## generated by RPythonic 0.4.8a
## http://code.google.com/p/rpythonic/
import os, sys, ctypes, inspect
__os = os
__sys = sys
__inspect = inspect

PYTHON_RESERVED_KEYWORDS = 'for while in as global with try except lambda return raise if else elif eval exec and not or break continue finally print yield del def class assert from is pass'.split()


IS32BIT = (ctypes.sizeof(ctypes.c_void_p)==4)

_ISPYTHON2 = sys.version_info[0] == 2
if _ISPYTHON2: _NULLBYTE = '\0'
else: _NULLBYTE = bytes( chr(0), 'ascii' )

def _CHARP2STRING( charp, encoding='utf-8' ):
	b = bytes()
	i = 0
	while True:
		char = charp[ i ]
		if char == _NULLBYTE: break
		else:
			b += char
			i += 1
	return b.decode( encoding )

## try to load precompiled c-libraries from this directory, if the library is not there try to load from the system.
_clibs_dir = os.path.dirname(os.path.abspath(__file__))

def _load_ctypes_lib( name ):
	if __os.name == 'posix':
		if __sys.platform.startswith('linux'):
			if not name.endswith('.so'): name += '.so'
			if not name.startswith('lib'): name = 'lib' + name

			if IS32BIT: 	path = __os.path.join(_clibs_dir,'linux32')
			else: 		path = __os.path.join(_clibs_dir,'linux64')
			url = __os.path.join( path, name )
			if __os.path.isfile( url ): return ctypes.CDLL(url)
			elif __os.path.isfile( '/usr/local/lib/%s'%name ): return ctypes.CDLL('/usr/local/lib/%s'%name)
			elif __os.path.isfile( '/usr/local/lib64/%s'%name ) and not IS32BIT: return ctypes.CDLL('/usr/local/lib64/%s'%name)
			elif __os.path.isfile( '/usr/lib/%s'%name ): return ctypes.CDLL('/usr/lib/%s'%name)
			elif __os.path.isfile( './%s'%name ): return ctypes.CDLL('./%s'%name)
			else:	# fallback
				try: return ctypes.CDLL(name)
				except: return ctypes.CDLL('')

		elif sys.platform == 'darwin':
			name += '.dylib'
			if IS32BIT: 	path = os.path.join(_clibs_dir,'osx32')
			else: 		path = os.path.join(_clibs_dir,'osx64')
			url = os.path.join( path, name )
			if os.path.isfile( url ): return ctypes.CDLL(url)
			else: return ctypes.CDLL(name) #fallback

	elif os.name == 'nt':
		name += '.dll'
		if IS32BIT: 	path = os.path.join(_clibs_dir,'win32')
		else: 		path = os.path.join(_clibs_dir,'win64')
		url = os.path.join( path, name )
		if os.path.isfile( url ): return ctypes.CDLL(url)
		else: return ctypes.CDLL(name) #fallback

RPYTHONIC_WRAPPER_FUNCTIONS = {}
RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES = []
RPYTHONIC_AUTOPREFIX_IGNORE = []

## ctypes does not clearly expose these types ##
PyCFuncPtrType = type(ctypes.CFUNCTYPE(ctypes.c_void_p))
PyCArrayType = type( ctypes.c_int * 2 )
PyCPointerType = type( ctypes.POINTER(ctypes.c_int) )
PyCStructType = type( ctypes.Structure )
CArgObject = type( ctypes.byref(ctypes.c_int()) )

class _rpythonic_meta_(object):
	'''
	Reserved Attributes:
		POINTER
		CSTRUCT
		CAST
	'''
	_rpythonic_ = True		# workaround for now, must have a way to know if object is a meta from another module, isinstance(o,_rpythonic_meta_) will fail in those cases. another workaround could be check sys.modules for other rpythonic modules and fetch _rpythonic_meta_ from there.
	def __init__(self, *args, **kw ):							# cheap trick, abuse **kw, and look for "pointer", "cast"
		if kw and 'pointer' not in kw: raise SyntaxError	# sorry, you can not init with keywords
		elif kw and 'pointer' in kw:
			if 'cast' in kw and kw['cast']:
				self.POINTER = ctypes.cast( kw['pointer'], ctypes.POINTER(self.CSTRUCT) )
			else: self.POINTER = kw['pointer']
		else: self.POINTER = ctypes.pointer( self.CSTRUCT(*args) )
		self.POINTER.pyobject = self	# .pyobject is local to this pointer "object"

	def __getattr__(self,name):
		if hasattr( self.POINTER.contents, name ):
			return getattr( self.POINTER.contents, name )

		else:	# when rpythonic failed to generate good bindings - these lookups should be cached
			for parent in self._rpythonic_parent_classes_:
				if hasattr( parent, name ):
					method = getattr( parent, name )	# should check if it really is an unbound method
					if method in parent._rpythonic_unbound_lookup_:
						func = parent._rpythonic_unbound_lookup_[ method ]
						n = func.name
						if len(func.argnames) > 1:
							argnames = func.argnames[ 1 : ]
							a = ',' + '=None,'.join( argnames ) + '=None'
							b = ','.join( argnames )
						else: a = b = ''
						lamb = eval( 'lambda self %s: %s( self.POINTER, %s )' %(a,n,b) )
						setattr( self.__class__, name, lamb )
						#return lamb	# this would return the unbound lambda, must call getattr again
						return getattr( self, name )
					else:
						# this can happen if self also inherits from the same parent class,
						# assume that by continuing this reaches that shared parent class,
						# and the lambda above is created as normal.
						continue
			## last resort, load from global name space ##
			G = globals()
			if name in G: return lambda *args: G[name](self.POINTER, *args)
			else:
				for prefix in self._autoprefix_:
					n = prefix + name
					if n in G: return lambda *args: G[n](self.POINTER, *args)
				print( 'possible auto-prefixes available', self._autoprefix_ )
				raise AttributeError

	def __call__(self, type=False):
		print('calling object is DEPRECATED - use ob.POINTER or ob.CSTRUCT')
		if type: return self.CSTRUCT
		else: return self.POINTER


def _rpythonic_generate_subclass_( name, struct, functions ):
	head = 'class %s( _rpythonic_meta_ ):' %name
	body = [ 
		'_rpythonic_parent_classes_ = []' ,
		'_rpythonic_unbound_lookup_ = {}' 
	]

	names = [ func.name for func in functions ]

	possibles = {}
	rank = []		# rank by longest name
	if len(names) > 3000: print('too many functions to use this hack')
	else:
		for n1 in names:
			prefix = ''
			for i,char in enumerate(n1):
				prefix += char
				if prefix not in possibles:
					possibles[ prefix ] = 0
					for n2 in names:
						if n2.startswith( prefix ):
							possibles[ prefix ] += 1

					if not rank or len(prefix) > len(rank[-1]) and possibles[prefix] > len(names)/4:
						rank.append( prefix )

	top = []
	while rank:
		best = rank.pop()
		if possibles[best] > len(functions)/2 and best not in names:
			if best.endswith('_set_') or best.endswith('_get_'): best = best[ : -4 ]
			elif best.endswith('Set') or best.endswith('Get'): best = best[ : -3 ]

			rem = []
			for other in rank:
				if best.startswith(other): rem.append( other )
			for r in rem: rank.remove( r )

			if best not in top: top.append( best )

		if len(top) > 3: break

	for n in names:		# find shortest prefixes #
		prefix = ''
		for i,char in enumerate(n):		# cammelCase
			if i==0: prefix += char; continue
			if char.isupper() and len(prefix) >= 2: break
			prefix += char
		if prefix and prefix != n and len(prefix) >= 2:
			hits = 0
			for other in names:
				if other.startswith( prefix ): hits += 1
			if hits >= 2 and prefix not in top:
				top.append( prefix )
				if len(top) >= 6: break

	## setup full names
	for func in functions:
		n = func.name
		if len(func.argnames) > 1:
			argnames = func.argnames[ 1 : ]
			a = ',' + '=None,'.join( argnames ) + '=None'
			b = ','.join( argnames )
		else: a = b = ''

		fhead = 'def %s( self %s ):' %(n,a)
		fbody = ['return %s(self.POINTER, %s)' %(func.name,b)]
		g = fhead + '\n\t\t' + '\n\t\t'.join( fbody )
		body.append( g )
		#body.append( '%s._rpythonic_function_ = %s' %(func.name, func.name) )

	## setup short names ##
	for n in names:
		for prefix in top:
			if n.startswith(prefix) and n[len(prefix):] not in names:
				alt = n[ len(prefix) : ]
				if alt and alt != n and alt not in PYTHON_RESERVED_KEYWORDS and not alt.isdigit() and not alt[0].isdigit():
					body.append( '%s = %s' %(alt,n) )
					names.append( alt )

	gen = head + '\n\t' + '\n\t'.join( body )
	try: exec( gen )
	except:
		print( gen )
		raise SyntaxError

	klass = locals()[name]
	klass.CSTRUCT = struct	# ctypes struct class

	klass._autoprefix_ = top
	for func in functions:
		unbound = getattr( klass, func.name )
		klass._rpythonic_unbound_lookup_[ unbound ] = func
		# klass.longname is klass.shortname = False
		# klass.longname == klass.shortname = True
	return klass

def _rpythonic_convert_structs_to_objects():
	G = globals()
	for klass in _OOAPI_:
		altname = name = klass.__name__
		prefix = ''
		for i,char in enumerate(name):
			if i==0: prefix += char; continue
			if char.isupper(): break
			prefix += char
		if prefix and prefix != name:
			hits = 0
			for other in _OOAPI_:
				if other is not klass:
					if other.__name__.startswith( prefix ): hits += 1
			if hits >= 2:
				altname = name[ len(prefix) : ]

		funcs = _OOAPI_[ klass ]
		newklass = _rpythonic_generate_subclass_( altname, klass, funcs )
		klass._rpythonic_wrapper_class_ = newklass
		G[ name ] = newklass	# replace struct with wrapper
		if altname not in G: G[ altname ] = newklass	# safely define with nicer name
		elif altname != name: # odd cases, maybe a function that returns the object, almost never happens.
			print('WARN - not replacing something with struct wrapper:', G[altname] )


def _rpythonic_setup_return_wrappers():
	R = _rpythonic_function_
	for klass in _OOAPI_:
		if klass in _OOAPI_RETURNS_OBJECT_:
			for f in _OOAPI_RETURNS_OBJECT_[klass]:
				f.object_oriented = True
				if not f.return_wrapper:	# just in case the ctypes footer had already defined it, do not overwrite
					f.return_wrapper = klass._rpythonic_wrapper_class_

def _rpythonic_function_( name, result=ctypes.c_void_p, args=[]):
	mname = '_metafunc_%s' %name
	exec( 'class %s( _rpythonic_metafunc_ ): pass' %mname )
	k = locals()[mname]
	return k( name, result, args )

_OOAPI_ = {}
_OOAPI_RETURNS_OBJECT_ = {}

class _rpythonic_metafunc_(object):
	def __init__(self, name, result=ctypes.c_void_p, args=[]):
		self.name = name
		self.result = result
		self.argtypes = []		# can dynamically change CFUNCTYPE trick
		self.argnames = []
		self.argtypestypes = []
		for i,arg in enumerate(args):
			n,t = arg
			if n in PYTHON_RESERVED_KEYWORDS: n = 'C_'+n
			if n in self.argnames: n = '%s%s' %(n,i)
			self.argnames.append( n )
			self.argtypes.append( t )
			self.argtypestypes.append( type(t) )		# precomputed for speed

		self.argnames = tuple( self.argnames )				# should never change
		self.numargs = len( self.argtypes )
		self.callbacks = [None] * self.numargs
		self.return_wrapper = None
		self.object_oriented = False
		self.function = None
		try:
			func = self.function = getattr(CTYPES_DLL, self.name )
			RPYTHONIC_WRAPPER_FUNCTIONS[ name ] = self
		except:
			RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES.append( name )
		if self.function: self.reset()

	def change_argument_type( self, name, t ):
		idx = self.argnames.index( name )
		self.argtypes[ idx ] = t
		self.argtypestypes[ idx ] = type(t)
		self.function.argtypes = self.argtypes

	def reset(self):
		if self.argnames:
			a = ',' + '=None,'.join( self.argnames ) + '=None'
			b = ','.join( self.argnames )
		else: a = b = ''

		callmeth = eval( 'lambda self %s: self._call_( %s )' %(a,b) )
		setattr( self.__class__, '__call__', callmeth )

		self.function.restype = self.result
		self.function.argtypes = self.argtypes

		if type( self.result ) is PyCPointerType and type(self.result._type_) is PyCStructType:
			klass = self.result._type_
			if klass not in _OOAPI_RETURNS_OBJECT_: _OOAPI_RETURNS_OBJECT_[klass] = []
			_OOAPI_RETURNS_OBJECT_[klass].append( self )

		self.defaults = []
		for i in range( self.numargs ):
			T = self.argtypes[ i ]
			if type(T) is PyCFuncPtrType:
				p = T()	# func pointers can not be None
				self.defaults.append( p )
				self.callbacks[ i ] = p					# save reference
			elif T in (ctypes.c_int, ctypes.c_uint, ctypes.c_long, ctypes.c_ulong):
				self.defaults.append( 0 )
			elif T in (ctypes.c_float, ctypes.c_double):
				self.defaults.append( .0 )
			else: self.defaults.append( None )	# None is allowed for all other types

			## generate OO API ##
			if i == 0 and type(T) is PyCPointerType and type(T._type_) is PyCStructType:
				klass = T._type_
				if klass not in _OOAPI_: _OOAPI_[ klass ] = []
				_OOAPI_[ klass ].append( self )

	def _call_( self, *args ):			# allow flexible calling types
		cargs = list( self.defaults )
		for i,arg in enumerate(args):
			if isinstance( arg, _rpythonic_meta_ ): arg = arg.POINTER
			elif hasattr( arg, '_rpythonic_' ): arg = arg.POINTER		# workaround - instance from another module

			t = type(arg)
			k = self.argtypes[ i ]
			kt = self.argtypestypes[ i ]
			if arg is None and cargs[i] is not None:	# use user defaults, very rare cases
				continue

			elif t is bool and k is ctypes.c_int:
				if arg: cargs[i] = 1	#ctypes.c_int(1)
				else: cargs[i] = 0	#ctypes.c_int(0)

			elif t in (list,tuple):				# convert lists and tuples into array
				if kt is PyCArrayType:
					cargs[ i ] = k(*arg)
				elif kt is PyCStructType:
					if k._array_wrapper_: cargs[ i ] = k(arg)	# allow easy array init
					else: cargs[ i ] = k(*arg)							# allow multiple args
				elif kt is PyCPointerType:
					cargs[ i ] = _convert_nested_list_to_pointer( k, arg )
				else: assert 0

			elif isinstance( arg, ctypes._Pointer ) and t is not k and kt is PyCPointerType:
				cargs[ i ] = ctypes.cast( arg, k )		# generic's that need to be cast

			elif kt is PyCStructType and isinstance( arg, ctypes._Pointer ):
				cargs[ i ] = arg.contents	# fixed may25

			elif kt is PyCPointerType and not isinstance( arg, (ctypes._Pointer,CArgObject) ):
				if t in (int,float,bool): ptr = k( k._type_(arg) )
				elif t is str:
					if not _ISPYTHON2: arg = arg.encode('utf-8')	# encode to ascii in python3
					ptr = ctypes.create_string_buffer(arg)				# correct and pypy compatible
				elif t in (PyCStructType, PyCArrayType):
					ptr = ctypes.cast( ctypes.pointer( arg ), k )
				else:
					ptr = arg	# TODO print warning?
				cargs[ i ] = ptr

			elif kt is PyCFuncPtrType:
				if t.__name__ == 'CFunctionType': cargs[ i ] = arg		# assume outside holds pointer
				else:													# this is not safe #
					cargs[ i ] = self.callbacks[ i ] = k( arg )				# assume arg is a callable
			else:
				cargs[ i ] = arg		# directly pass

		## if you define your own return_wrapper, it must take keyword "pointer"
		if self.return_wrapper: return self.return_wrapper( pointer=self.function( *cargs ) )
		else: return self.function( *cargs )



def _convert_nested_list_to_pointer( k, arg ):
	depth = 0; s = k
	while True:
		if type(s) is PyCPointerType:
			s = getattr( s, '_type_' )
			depth += 1
		else: break
	assert depth and depth <= 2
	if depth == 1:
		T = k._type_
		ptr = k( k._type_() )
		for i in range( len(arg) ):
			ptr[ i ] = T( *arg[i] )
	elif depth == 2:
		T = k._type_._type_
		_ptr = k._type_( k._type_._type_() )
		for i in range(len( arg )):
			for j in range( len(arg[i]) ):
				_ptr[ j ] = T( *arg[ i ][ j ] )
		ptr = k( _ptr )
	return ptr


def __freeze_rpythonic_struct( cls, fields ):
	if cls not in _OOAPI_: _OOAPI_[ cls ] = []	# wrap all structs
	try: setattr( cls, '_fields_', fields )
	except:
		print( 'WARN - bad order struct freeze', cls )
		#cls._fields_ = []

class _rpythonic_struct_( ctypes.Structure ):
	_array_wrapper_ = False
	_fields_ = []
	_methods_ = {}
	#def __call__(self): return self
	def __init__(self, *args, **kw ):
		cargs = []
		argtypes = []
		for a in self._fields_: argtypes.append( a[1] )
		if len(args) > len(argtypes): args = [args]	# allow both calling conventions
		for i,arg in enumerate( args ):
			if isinstance( arg, _rpythonic_meta_ ): arg = arg.POINTER

			t = type(arg)
			k = argtypes[ i ]
			if t in (list,tuple):
				if k.__class__.__name__	== 'PyCArrayType':
					cargs.append( k(*arg) )
				elif k.__class__.__name__ == 'PyCStructType':
					if k._array_wrapper_: cargs.append( k(arg) )	# allow easy array init
					else: cargs.append( k(*arg) )							# allow multiple args
			elif isinstance( arg, ctypes._Pointer ) and t is not k:
				cargs[ i ] = ctypes.cast( arg, k )	# generic's that need to be cast
			elif k.__class__.__name__ == 'PyCArrayType' and t in (float,int,bool):
				cargs.append( k(arg) )		# support init array from single value
			else:
				cargs.append( arg )		# directly pass

		ctypes.Structure.__init__(self, *cargs, **kw)


def _rpythonic_make_nice_global_enums_():
	G = globals()
	for name in RPYTHONIC_GLOBAL_ENUMS:
		if '_' in name and name.index('_') <= 4:
			altname = name[ name.index('_') + 1 : ]
			if altname not in G:
				G[altname] = RPYTHONIC_GLOBAL_ENUMS[ name ]

def _rpythonic_clean_up_missing_functions_():
	G = globals()
	for f in RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES:
		G.pop( f )
	print( "C functions loaded: %s" %len(RPYTHONIC_WRAPPER_FUNCTIONS) )
	print( "C functions failed: %s" %len(RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES) )



###### NEW API #########
CTYPES_DLL = None

class _VOID_POINTER_CONTAINER_(object):
	def __init__(self, ptr, name=None):
		self._pointer_ = ptr
		self.name = name
NULL = _VOID_POINTER_CONTAINER_(None,'<null pointer>')


class meta:	# NEW API - allow run time switch from ctypes to rffi
	'''
	Methods:
		RPython will not allow object wrapper around a method (__call__ not allowed)
		keep C function names in list "__cfunctions__"
		rpythonic.enable_rffi( classA, classB )	
		can take advantage of methods in object-method-wrapper,
		generate rffi wrapper and set method on classA, etc.
		replaces object-method-wrapper with rffi-method

	Properties:
		CPython: obj.x=1
		RPython: obj.set_x(1)	
	'''
	METAS = []
	def __init__(self, constructors=[], methods={}, properties={}):
		global CTYPES_DLL
		if not CTYPES_DLL:
			CTYPES_DLL = _load_ctypes_lib( _clib_name_ )

		self.constructors = constructors
		self.methods = methods
		self.properties = properties
		self.METAS.append( self )



	def __call__(self, cls ):
		print('@meta', cls )

		if not self.constructors:
			lamb = lambda s, _explicit_pointer_=None: setattr(s,'_pointer_',getattr(_explicit_pointer_,'_pointer_')) if hasattr(_explicit_pointer_,'_pointer_') else setattr(s,'_pointer_',_explicit_pointer_)
			lamb._debug = '(no constructor)'
			setattr( cls, '__init__', lamb )
		else:
			con = self._find_best_function( self.constructors )
			cfunc = self._build_cfunc( con )
			setattr( cls, '_%s'%con['name'], cfunc )
			g = self._gen_init( con )
			setattr( cls, '__init__', g )
		
		## set methods ##
		for name in self.methods:
			meth = self.methods[ name ]
			cfuncs = []
			for m in meth['functions']:
				cfunc = self._build_cfunc( m, method=True, static=meth['static'] )
				self._setup_return( cfunc, meth )
				setattr( cls, '_%s'%m['name'], cfunc )
				cfuncs.append( cfunc )

			f = self._find_best_function( meth['functions'] )
			g = self._gen_method( meth, f )
			g._cfuncs = cfuncs
			if meth['static']: g = classmethod( g )
			setattr( cls, name, g )

		for name in self.properties:
			print( 'property:', name )
			p = []
			for f in self.properties[name]:
				cfunc = self._build_cfunc( f )
				setattr( cls, '_%s'%f['name'], cfunc )
				g = self._gen_method( f, f )
				p.append( g )

			setattr( cls, name, property(*p) )

		return cls


	@staticmethod
	def _build_cfunc( info, method=False, static=False ):
		cfunc = getattr(CTYPES_DLL, info['name'])
		if method and not static: argtypes = [ ctypes.c_void_p ]
		else: argtypes = []
		for p in info['parameters']: argtypes.append( eval(p['ctypes_type']) )
		cfunc.argtypes = argtypes
		return cfunc

	@staticmethod
	def _setup_return( cfunc, info ):
		if not info['returns_fundamental']:
			cfunc.restype = ctypes.c_void_p
		elif info['returns_fundamental']:
			cfunc.restype = eval( info['returns_ctypes'] )
		else:
			cfunc.restype = ctypes.c_void_p

	@staticmethod
	def _gen_prepare_args( m ):
		a = []; b = []
		for i,p in enumerate(m['parameters']):
			if 'name' in p: n = p['name']
			else: n = '_unnamed_%s' %i
			if '<' in n: n = '_TODOfixme_%s' %i
			if n in PYTHON_RESERVED_KEYWORDS: n += str(i)
			if p['fundamental']:
				b.append( n )
				s = p['raw_type'].split()
				if 'default' in p:
					d = p['default']
					if p['raw_type'] in ('float', 'double'):
						if d.endswith('f'): d = d[:-1]
						d = d.replace(' ', '.')
						if 'e' in d: d = 0.0
						try: d = float(d)
						except: d = 0.0
					elif ('int' in s or 'size_t' in s) and not d.isdigit(): d = 0
					elif 'char' in s and '"' not in d: d = '""'
					elif d.lower() == 'false': d = False
					elif d.lower() == 'true': d = True
				elif 'char' in s: d = '""'
				elif 'float' in s or 'double' in s: d = 0.0
				elif 'size_t' in s or 'int' in s or 'long' in s or 'short' in s: d = 0
				elif p['raw_type'] == 'bool': d = False
				elif p['raw_type'] in ('void', '(template)'): d = 'NULL'
				else: print( p )
				a.append( n+'=%s' %d )

			else:
				b.append( '%s._pointer_'%n )
				a.append( n+'=NULL' )
		return a, b

	@staticmethod
	def _gen_init( m ):
		a, b = meta._gen_prepare_args( m )
		if a: e = 'lambda _py_self_, %s, _explicit_pointer_=None: ' %(','.join(a))
		else: e = 'lambda _py_self_, _explicit_pointer_=None: '
		e += 'setattr(_py_self_, "_pointer_", _py_self_._%s(%s))' %( m['name'], ','.join(b) )
		e += ' if not _explicit_pointer_ else '
		e += 'setattr(_py_self_, "_pointer_", _explicit_pointer_)'
		print( e )
		lamb = eval( e ); lamb._debug = e; lamb._introspect = m
		return lamb

	@staticmethod
	def _find_best_function( funcs ):
		best = funcs[0]
		score = -1
		if len(funcs) > 1:
			for f in funcs:
				hits = 0
				for p in f['parameters']:
					if p['fundamental']: hits += 1
				if hits and hits == len( f['parameters'] ):
					if hits > score:
						score = hits
						best = f
		return best

	@staticmethod
	def _gen_method( m, f ):
		a, b = meta._gen_prepare_args( f )
		if a: e = 'lambda _py_self_, %s: ' %(','.join(a))
		else: e = 'lambda _py_self_: '

		if 'static' in m and m['static']:	# static in c++ is like a classmethod
			c = '_py_self_._%s( %s )' %( f['name'], ','.join(b) )
		else:
			c = '_py_self_._%s( _py_self_._pointer_, %s )' %( f['name'], ','.join(b) )

		if not m['returns_fundamental']:
			if 'returns_unknown' in m or '<' in m['returns']: c = '_VOID_POINTER_CONTAINER_( %s, name="%s" )' %(c,m['returns'])
			else:
				something = m['returns'].replace('::', '.')
				c = '%s( _explicit_pointer_=%s )' %(something, c)

		e += c; lamb = eval( e )
		lamb._debug = e; lamb._introspect = f
		return lamb


	META_FUNCTIONS = []
	@classmethod
	def function( self, info ):
		print('@meta.function', info['name'] )
		global CTYPES_DLL
		if not CTYPES_DLL:
			CTYPES_DLL = _load_ctypes_lib( _clib_name_ )

		cfunc = self._build_cfunc( info, method=False, static=True )
		setattr( meta, '_%s'%info['name'], cfunc )
		self._setup_return( cfunc, info )
		a, b = meta._gen_prepare_args( info )
		e = 'lambda %s: ' %(','.join(a))
		c = 'meta._%s( %s )' %( info['name'], ','.join(b) )

		if not info['returns_fundamental']:
			if 'returns_unknown' in info or '<' in info['returns']:
				c = '_VOID_POINTER_CONTAINER_( %s, name="%s" )' %(c,info['returns'])
			else:
				something = info['returns'].replace('::', '.')
				c = '%s( _explicit_pointer_=%s )' %(something, c)
		e += c
		lamb = eval( e )
		lamb._debug = e
		lamb._introspect = info
		return lamb



def _rpythonic_strip_prefixes_( prefixes ):
	G = globals()
	names = list(G.keys())	# ensure list in py3
	for name in names:
		for prefix in prefixes:
			if name.startswith( prefix ):
				newname = name[ len(prefix) : ]
				if newname and newname not in G:
					G[ newname ] = G[ name ]






_clib_name_ = 'libmono-2.0'
print('loading lib', _clib_name_)
print( os.path.abspath( os.path.curdir ) )
CTYPES_DLL = _load_ctypes_lib( _clib_name_ )
assert CTYPES_DLL
print( CTYPES_DLL._name )

## macro globals ##
## enums ##
MONO_TYPE_END = 0 
MONO_TYPE_VOID = 1 
MONO_TYPE_BOOLEAN = 2 
MONO_TYPE_CHAR = 3 
MONO_TYPE_I1 = 4 
MONO_TYPE_U1 = 5 
MONO_TYPE_I2 = 6 
MONO_TYPE_U2 = 7 
MONO_TYPE_I4 = 8 
MONO_TYPE_U4 = 9 
MONO_TYPE_I8 = 10 
MONO_TYPE_U8 = 11 
MONO_TYPE_R4 = 12 
MONO_TYPE_R8 = 13 
MONO_TYPE_STRING = 14 
MONO_TYPE_PTR = 15 
MONO_TYPE_BYREF = 16 
MONO_TYPE_VALUETYPE = 17 
MONO_TYPE_CLASS = 18 
MONO_TYPE_VAR = 19 
MONO_TYPE_ARRAY = 20 
MONO_TYPE_GENERICINST = 21 
MONO_TYPE_TYPEDBYREF = 22 
MONO_TYPE_I = 24 
MONO_TYPE_U = 25 
MONO_TYPE_FNPTR = 27 
MONO_TYPE_OBJECT = 28 
MONO_TYPE_SZARRAY = 29 
MONO_TYPE_MVAR = 30 
MONO_TYPE_CMOD_REQD = 31 
MONO_TYPE_CMOD_OPT = 32 
MONO_TYPE_INTERNAL = 33 
MONO_TYPE_MODIFIER = 64 
MONO_TYPE_SENTINEL = 65 
MONO_TYPE_PINNED = 69 
MONO_TYPE_ENUM = 85 

MONO_TABLE_MODULE = 0 
MONO_TABLE_TYPEREF = 1 
MONO_TABLE_TYPEDEF = 2 
MONO_TABLE_FIELD_POINTER = 3 
MONO_TABLE_FIELD = 4 
MONO_TABLE_METHOD_POINTER = 5 
MONO_TABLE_METHOD = 6 
MONO_TABLE_PARAM_POINTER = 7 
MONO_TABLE_PARAM = 8 
MONO_TABLE_INTERFACEIMPL = 9 
MONO_TABLE_MEMBERREF = 10 
MONO_TABLE_CONSTANT = 11 
MONO_TABLE_CUSTOMATTRIBUTE = 12 
MONO_TABLE_FIELDMARSHAL = 13 
MONO_TABLE_DECLSECURITY = 14 
MONO_TABLE_CLASSLAYOUT = 15 
MONO_TABLE_FIELDLAYOUT = 16 
MONO_TABLE_STANDALONESIG = 17 
MONO_TABLE_EVENTMAP = 18 
MONO_TABLE_EVENT_POINTER = 19 
MONO_TABLE_EVENT = 20 
MONO_TABLE_PROPERTYMAP = 21 
MONO_TABLE_PROPERTY_POINTER = 22 
MONO_TABLE_PROPERTY = 23 
MONO_TABLE_METHODSEMANTICS = 24 
MONO_TABLE_METHODIMPL = 25 
MONO_TABLE_MODULEREF = 26 
MONO_TABLE_TYPESPEC = 27 
MONO_TABLE_IMPLMAP = 28 
MONO_TABLE_FIELDRVA = 29 
MONO_TABLE_UNUSED6 = 30 
MONO_TABLE_UNUSED7 = 31 
MONO_TABLE_ASSEMBLY = 32 
MONO_TABLE_ASSEMBLYPROCESSOR = 33 
MONO_TABLE_ASSEMBLYOS = 34 
MONO_TABLE_ASSEMBLYREF = 35 
MONO_TABLE_ASSEMBLYREFPROCESSOR = 36 
MONO_TABLE_ASSEMBLYREFOS = 37 
MONO_TABLE_FILE = 38 
MONO_TABLE_EXPORTEDTYPE = 39 
MONO_TABLE_MANIFESTRESOURCE = 40 
MONO_TABLE_NESTEDCLASS = 41 
MONO_TABLE_GENERICPARAM = 42 
MONO_TABLE_METHODSPEC = 43 
MONO_TABLE_GENERICPARAMCONSTRAINT = 44 

MONO_ASSEMBLY_HASH_ALG = 0 
MONO_ASSEMBLY_MAJOR_VERSION = 1 
MONO_ASSEMBLY_MINOR_VERSION = 2 
MONO_ASSEMBLY_BUILD_NUMBER = 3 
MONO_ASSEMBLY_REV_NUMBER = 4 
MONO_ASSEMBLY_FLAGS = 5 
MONO_ASSEMBLY_PUBLIC_KEY = 6 
MONO_ASSEMBLY_NAME = 7 
MONO_ASSEMBLY_CULTURE = 8 
MONO_ASSEMBLY_SIZE = 9 

MONO_ASSEMBLYOS_PLATFORM = 0 
MONO_ASSEMBLYOS_MAJOR_VERSION = 1 
MONO_ASSEMBLYOS_MINOR_VERSION = 2 
MONO_ASSEMBLYOS_SIZE = 3 

MONO_ASSEMBLY_PROCESSOR = 0 
MONO_ASSEMBLY_PROCESSOR_SIZE = 1 

MONO_ASSEMBLYREF_MAJOR_VERSION = 0 
MONO_ASSEMBLYREF_MINOR_VERSION = 1 
MONO_ASSEMBLYREF_BUILD_NUMBER = 2 
MONO_ASSEMBLYREF_REV_NUMBER = 3 
MONO_ASSEMBLYREF_FLAGS = 4 
MONO_ASSEMBLYREF_PUBLIC_KEY = 5 
MONO_ASSEMBLYREF_NAME = 6 
MONO_ASSEMBLYREF_CULTURE = 7 
MONO_ASSEMBLYREF_HASH_VALUE = 8 
MONO_ASSEMBLYREF_SIZE = 9 

MONO_ASSEMBLYREFOS_PLATFORM = 0 
MONO_ASSEMBLYREFOS_MAJOR_VERSION = 1 
MONO_ASSEMBLYREFOS_MINOR_VERSION = 2 
MONO_ASSEMBLYREFOS_ASSEMBLYREF = 3 
MONO_ASSEMBLYREFOS_SIZE = 4 

MONO_ASSEMBLYREFPROC_PROCESSOR = 0 
MONO_ASSEMBLYREFPROC_ASSEMBLYREF = 1 
MONO_ASSEMBLYREFPROC_SIZE = 2 

MONO_CLASS_LAYOUT_PACKING_SIZE = 0 
MONO_CLASS_LAYOUT_CLASS_SIZE = 1 
MONO_CLASS_LAYOUT_PARENT = 2 
MONO_CLASS_LAYOUT_SIZE = 3 

MONO_CONSTANT_TYPE = 0 
MONO_CONSTANT_PADDING = 1 
MONO_CONSTANT_PARENT = 2 
MONO_CONSTANT_VALUE = 3 
MONO_CONSTANT_SIZE = 4 

MONO_CUSTOM_ATTR_PARENT = 0 
MONO_CUSTOM_ATTR_TYPE = 1 
MONO_CUSTOM_ATTR_VALUE = 2 
MONO_CUSTOM_ATTR_SIZE = 3 

MONO_DECL_SECURITY_ACTION = 0 
MONO_DECL_SECURITY_PARENT = 1 
MONO_DECL_SECURITY_PERMISSIONSET = 2 
MONO_DECL_SECURITY_SIZE = 3 

MONO_EVENT_MAP_PARENT = 0 
MONO_EVENT_MAP_EVENTLIST = 1 
MONO_EVENT_MAP_SIZE = 2 

MONO_EVENT_FLAGS = 0 
MONO_EVENT_NAME = 1 
MONO_EVENT_TYPE = 2 
MONO_EVENT_SIZE = 3 

MONO_EVENT_POINTER_EVENT = 0 
MONO_EVENT_POINTER_SIZE = 1 

MONO_EXP_TYPE_FLAGS = 0 
MONO_EXP_TYPE_TYPEDEF = 1 
MONO_EXP_TYPE_NAME = 2 
MONO_EXP_TYPE_NAMESPACE = 3 
MONO_EXP_TYPE_IMPLEMENTATION = 4 
MONO_EXP_TYPE_SIZE = 5 

MONO_FIELD_FLAGS = 0 
MONO_FIELD_NAME = 1 
MONO_FIELD_SIGNATURE = 2 
MONO_FIELD_SIZE = 3 

MONO_FIELD_LAYOUT_OFFSET = 0 
MONO_FIELD_LAYOUT_FIELD = 1 
MONO_FIELD_LAYOUT_SIZE = 2 

MONO_FIELD_MARSHAL_PARENT = 0 
MONO_FIELD_MARSHAL_NATIVE_TYPE = 1 
MONO_FIELD_MARSHAL_SIZE = 2 

MONO_FIELD_POINTER_FIELD = 0 
MONO_FIELD_POINTER_SIZE = 1 

MONO_FIELD_RVA_RVA = 0 
MONO_FIELD_RVA_FIELD = 1 
MONO_FIELD_RVA_SIZE = 2 

MONO_FILE_FLAGS = 0 
MONO_FILE_NAME = 1 
MONO_FILE_HASH_VALUE = 2 
MONO_FILE_SIZE = 3 

MONO_IMPLMAP_FLAGS = 0 
MONO_IMPLMAP_MEMBER = 1 
MONO_IMPLMAP_NAME = 2 
MONO_IMPLMAP_SCOPE = 3 
MONO_IMPLMAP_SIZE = 4 

MONO_INTERFACEIMPL_CLASS = 0 
MONO_INTERFACEIMPL_INTERFACE = 1 
MONO_INTERFACEIMPL_SIZE = 2 

MONO_MANIFEST_OFFSET = 0 
MONO_MANIFEST_FLAGS = 1 
MONO_MANIFEST_NAME = 2 
MONO_MANIFEST_IMPLEMENTATION = 3 
MONO_MANIFEST_SIZE = 4 

MONO_MEMBERREF_CLASS = 0 
MONO_MEMBERREF_NAME = 1 
MONO_MEMBERREF_SIGNATURE = 2 
MONO_MEMBERREF_SIZE = 3 

MONO_METHOD_RVA = 0 
MONO_METHOD_IMPLFLAGS = 1 
MONO_METHOD_FLAGS = 2 
MONO_METHOD_NAME = 3 
MONO_METHOD_SIGNATURE = 4 
MONO_METHOD_PARAMLIST = 5 
MONO_METHOD_SIZE = 6 

MONO_METHODIMPL_CLASS = 0 
MONO_METHODIMPL_BODY = 1 
MONO_METHODIMPL_DECLARATION = 2 
MONO_METHODIMPL_SIZE = 3 

MONO_METHOD_POINTER_METHOD = 0 
MONO_METHOD_POINTER_SIZE = 1 

MONO_METHOD_SEMA_SEMANTICS = 0 
MONO_METHOD_SEMA_METHOD = 1 
MONO_METHOD_SEMA_ASSOCIATION = 2 
MONO_METHOD_SEMA_SIZE = 3 

MONO_MODULE_GENERATION = 0 
MONO_MODULE_NAME = 1 
MONO_MODULE_MVID = 2 
MONO_MODULE_ENC = 3 
MONO_MODULE_ENCBASE = 4 
MONO_MODULE_SIZE = 5 

MONO_MODULEREF_NAME = 0 
MONO_MODULEREF_SIZE = 1 

MONO_NESTED_CLASS_NESTED = 0 
MONO_NESTED_CLASS_ENCLOSING = 1 
MONO_NESTED_CLASS_SIZE = 2 

MONO_PARAM_FLAGS = 0 
MONO_PARAM_SEQUENCE = 1 
MONO_PARAM_NAME = 2 
MONO_PARAM_SIZE = 3 

MONO_PARAM_POINTER_PARAM = 0 
MONO_PARAM_POINTER_SIZE = 1 

MONO_PROPERTY_FLAGS = 0 
MONO_PROPERTY_NAME = 1 
MONO_PROPERTY_TYPE = 2 
MONO_PROPERTY_SIZE = 3 

MONO_PROPERTY_POINTER_PROPERTY = 0 
MONO_PROPERTY_POINTER_SIZE = 1 

MONO_PROPERTY_MAP_PARENT = 0 
MONO_PROPERTY_MAP_PROPERTY_LIST = 1 
MONO_PROPERTY_MAP_SIZE = 2 

MONO_STAND_ALONE_SIGNATURE = 0 
MONO_STAND_ALONE_SIGNATURE_SIZE = 1 

MONO_TYPEDEF_FLAGS = 0 
MONO_TYPEDEF_NAME = 1 
MONO_TYPEDEF_NAMESPACE = 2 
MONO_TYPEDEF_EXTENDS = 3 
MONO_TYPEDEF_FIELD_LIST = 4 
MONO_TYPEDEF_METHOD_LIST = 5 
MONO_TYPEDEF_SIZE = 6 

MONO_TYPEREF_SCOPE = 0 
MONO_TYPEREF_NAME = 1 
MONO_TYPEREF_NAMESPACE = 2 
MONO_TYPEREF_SIZE = 3 

MONO_TYPESPEC_SIGNATURE = 0 
MONO_TYPESPEC_SIZE = 1 

MONO_GENERICPARAM_NUMBER = 0 
MONO_GENERICPARAM_FLAGS = 1 
MONO_GENERICPARAM_OWNER = 2 
MONO_GENERICPARAM_NAME = 3 
MONO_GENERICPARAM_SIZE = 4 

MONO_METHODSPEC_METHOD = 0 
MONO_METHODSPEC_SIGNATURE = 1 
MONO_METHODSPEC_SIZE = 2 

MONO_GENPARCONSTRAINT_GENERICPAR = 0 
MONO_GENPARCONSTRAINT_CONSTRAINT = 1 
MONO_GENPARCONSTRAINT_SIZE = 2 

MONO_TYPEDEFORREF_TYPEDEF = 0 
MONO_TYPEDEFORREF_TYPEREF = 1 
MONO_TYPEDEFORREF_TYPESPEC = 2 
MONO_TYPEDEFORREF_BITS = 2 
MONO_TYPEDEFORREF_MASK = 3 

MONO_HASCONSTANT_FIEDDEF = 0 
MONO_HASCONSTANT_PARAM = 1 
MONO_HASCONSTANT_PROPERTY = 2 
MONO_HASCONSTANT_BITS = 2 
MONO_HASCONSTANT_MASK = 3 

MONO_CUSTOM_ATTR_METHODDEF = 0 
MONO_CUSTOM_ATTR_FIELDDEF = 1 
MONO_CUSTOM_ATTR_TYPEREF = 2 
MONO_CUSTOM_ATTR_TYPEDEF = 3 
MONO_CUSTOM_ATTR_PARAMDEF = 4 
MONO_CUSTOM_ATTR_INTERFACE = 5 
MONO_CUSTOM_ATTR_MEMBERREF = 6 
MONO_CUSTOM_ATTR_MODULE = 7 
MONO_CUSTOM_ATTR_PERMISSION = 8 
MONO_CUSTOM_ATTR_PROPERTY = 9 
MONO_CUSTOM_ATTR_EVENT = 10 
MONO_CUSTOM_ATTR_SIGNATURE = 11 
MONO_CUSTOM_ATTR_MODULEREF = 12 
MONO_CUSTOM_ATTR_TYPESPEC = 13 
MONO_CUSTOM_ATTR_ASSEMBLY = 14 
MONO_CUSTOM_ATTR_ASSEMBLYREF = 15 
MONO_CUSTOM_ATTR_FILE = 16 
MONO_CUSTOM_ATTR_EXP_TYPE = 17 
MONO_CUSTOM_ATTR_MANIFEST = 18 
MONO_CUSTOM_ATTR_GENERICPAR = 19 
MONO_CUSTOM_ATTR_BITS = 5 
MONO_CUSTOM_ATTR_MASK = 31 

MONO_HAS_FIELD_MARSHAL_FIELDSREF = 0 
MONO_HAS_FIELD_MARSHAL_PARAMDEF = 1 
MONO_HAS_FIELD_MARSHAL_BITS = 1 
MONO_HAS_FIELD_MARSHAL_MASK = 1 

MONO_HAS_DECL_SECURITY_TYPEDEF = 0 
MONO_HAS_DECL_SECURITY_METHODDEF = 1 
MONO_HAS_DECL_SECURITY_ASSEMBLY = 2 
MONO_HAS_DECL_SECURITY_BITS = 2 
MONO_HAS_DECL_SECURITY_MASK = 3 

MONO_MEMBERREF_PARENT_TYPEDEF = 0 
MONO_MEMBERREF_PARENT_TYPEREF = 1 
MONO_MEMBERREF_PARENT_MODULEREF = 2 
MONO_MEMBERREF_PARENT_METHODDEF = 3 
MONO_MEMBERREF_PARENT_TYPESPEC = 4 
MONO_MEMBERREF_PARENT_BITS = 3 
MONO_MEMBERREF_PARENT_MASK = 7 

MONO_HAS_SEMANTICS_EVENT = 0 
MONO_HAS_SEMANTICS_PROPERTY = 1 
MONO_HAS_SEMANTICS_BITS = 1 
MONO_HAS_SEMANTICS_MASK = 1 

MONO_METHODDEFORREF_METHODDEF = 0 
MONO_METHODDEFORREF_METHODREF = 1 
MONO_METHODDEFORREF_BITS = 1 
MONO_METHODDEFORREF_MASK = 1 

MONO_MEMBERFORWD_FIELDDEF = 0 
MONO_MEMBERFORWD_METHODDEF = 1 
MONO_MEMBERFORWD_BITS = 1 
MONO_MEMBERFORWD_MASK = 1 

MONO_IMPLEMENTATION_FILE = 0 
MONO_IMPLEMENTATION_ASSEMBLYREF = 1 
MONO_IMPLEMENTATION_EXP_TYPE = 2 
MONO_IMPLEMENTATION_BITS = 2 
MONO_IMPLEMENTATION_MASK = 3 

MONO_CUSTOM_ATTR_TYPE_TYPEREF = 0 
MONO_CUSTOM_ATTR_TYPE_TYPEDEF = 1 
MONO_CUSTOM_ATTR_TYPE_METHODDEF = 2 
MONO_CUSTOM_ATTR_TYPE_MEMBERREF = 3 
MONO_CUSTOM_ATTR_TYPE_STRING = 4 
MONO_CUSTOM_ATTR_TYPE_BITS = 3 
MONO_CUSTOM_ATTR_TYPE_MASK = 7 

MONO_RESOLTION_SCOPE_MODULE = 0 
MONO_RESOLTION_SCOPE_MODULEREF = 1 
MONO_RESOLTION_SCOPE_ASSEMBLYREF = 2 
MONO_RESOLTION_SCOPE_TYPEREF = 3 
MONO_RESOLTION_SCOPE_BITS = 2 
MONO_RESOLTION_SCOPE_MASK = 3 

MONO_TYPEORMETHOD_TYPE = 0 
MONO_TYPEORMETHOD_METHOD = 1 
MONO_TYPEORMETHOD_BITS = 1 
MONO_TYPEORMETHOD_MASK = 1 

_GCONV_OK = 0 
_GCONV_NOCONV = 1 
_GCONV_NODB = 2 
_GCONV_NOMEM = 3 
_GCONV_EMPTY_INPUT = 4 
_GCONV_FULL_OUTPUT = 5 
_GCONV_ILLEGAL_INPUT = 6 
_GCONV_INCOMPLETE_INPUT = 7 
_GCONV_ILLEGAL_DESCRIPTOR = 8 
_GCONV_INTERNAL_ERROR = 9 

_GCONV_IS_LAST = 1 
_GCONV_IGNORE_ERRORS = 2 

_codecvt_result = { 
	"__codecvt_ok" : 0, 
	"__codecvt_partial" : 1, 
	"__codecvt_error" : 2, 
	"__codecvt_noconv" : 3, 
}

MONO_IMAGE_OK = 0 
MONO_IMAGE_ERROR_ERRNO = 1 
MONO_IMAGE_MISSING_ASSEMBLYREF = 2 
MONO_IMAGE_IMAGE_INVALID = 3 

MONO_EXCEPTION_CLAUSE_NONE = 0 
MONO_EXCEPTION_CLAUSE_FILTER = 1 
MONO_EXCEPTION_CLAUSE_FINALLY = 2 
MONO_EXCEPTION_CLAUSE_FAULT = 4 

MONO_CALL_DEFAULT = 0 
MONO_CALL_C = 1 
MONO_CALL_STDCALL = 2 
MONO_CALL_THISCALL = 3 
MONO_CALL_FASTCALL = 4 
MONO_CALL_VARARG = 5 

MONO_NATIVE_BOOLEAN = 2 
MONO_NATIVE_I1 = 3 
MONO_NATIVE_U1 = 4 
MONO_NATIVE_I2 = 5 
MONO_NATIVE_U2 = 6 
MONO_NATIVE_I4 = 7 
MONO_NATIVE_U4 = 8 
MONO_NATIVE_I8 = 9 
MONO_NATIVE_U8 = 10 
MONO_NATIVE_R4 = 11 
MONO_NATIVE_R8 = 12 
MONO_NATIVE_CURRENCY = 15 
MONO_NATIVE_BSTR = 19 
MONO_NATIVE_LPSTR = 20 
MONO_NATIVE_LPWSTR = 21 
MONO_NATIVE_LPTSTR = 22 
MONO_NATIVE_BYVALTSTR = 23 
MONO_NATIVE_IUNKNOWN = 25 
MONO_NATIVE_IDISPATCH = 26 
MONO_NATIVE_STRUCT = 27 
MONO_NATIVE_INTERFACE = 28 
MONO_NATIVE_SAFEARRAY = 29 
MONO_NATIVE_BYVALARRAY = 30 
MONO_NATIVE_INT = 31 
MONO_NATIVE_UINT = 32 
MONO_NATIVE_VBBYREFSTR = 34 
MONO_NATIVE_ANSIBSTR = 35 
MONO_NATIVE_TBSTR = 36 
MONO_NATIVE_VARIANTBOOL = 37 
MONO_NATIVE_FUNC = 38 
MONO_NATIVE_ASANY = 40 
MONO_NATIVE_LPARRAY = 42 
MONO_NATIVE_LPSTRUCT = 43 
MONO_NATIVE_CUSTOM = 44 
MONO_NATIVE_ERROR = 45 
MONO_NATIVE_MAX = 80 

MONO_VARIANT_EMPTY = 0 
MONO_VARIANT_NULL = 1 
MONO_VARIANT_I2 = 2 
MONO_VARIANT_I4 = 3 
MONO_VARIANT_R4 = 4 
MONO_VARIANT_R8 = 5 
MONO_VARIANT_CY = 6 
MONO_VARIANT_DATE = 7 
MONO_VARIANT_BSTR = 8 
MONO_VARIANT_DISPATCH = 9 
MONO_VARIANT_ERROR = 10 
MONO_VARIANT_BOOL = 11 
MONO_VARIANT_VARIANT = 12 
MONO_VARIANT_UNKNOWN = 13 
MONO_VARIANT_DECIMAL = 14 
MONO_VARIANT_I1 = 16 
MONO_VARIANT_UI1 = 17 
MONO_VARIANT_UI2 = 18 
MONO_VARIANT_UI4 = 19 
MONO_VARIANT_I8 = 20 
MONO_VARIANT_UI8 = 21 
MONO_VARIANT_INT = 22 
MONO_VARIANT_UINT = 23 
MONO_VARIANT_VOID = 24 
MONO_VARIANT_HRESULT = 25 
MONO_VARIANT_PTR = 26 
MONO_VARIANT_SAFEARRAY = 27 
MONO_VARIANT_CARRAY = 28 
MONO_VARIANT_USERDEFINED = 29 
MONO_VARIANT_LPSTR = 30 
MONO_VARIANT_LPWSTR = 31 
MONO_VARIANT_RECORD = 36 
MONO_VARIANT_FILETIME = 64 
MONO_VARIANT_BLOB = 65 
MONO_VARIANT_STREAM = 66 
MONO_VARIANT_STORAGE = 67 
MONO_VARIANT_STREAMED_OBJECT = 68 
MONO_VARIANT_STORED_OBJECT = 69 
MONO_VARIANT_BLOB_OBJECT = 70 
MONO_VARIANT_CF = 71 
MONO_VARIANT_CLSID = 72 
MONO_VARIANT_VECTOR = 4096 
MONO_VARIANT_ARRAY = 8192 
MONO_VARIANT_BYREF = 16384 

MONO_MARSHAL_CONV_NONE = 0 
MONO_MARSHAL_CONV_BOOL_VARIANTBOOL = 1 
MONO_MARSHAL_CONV_BOOL_I4 = 2 
MONO_MARSHAL_CONV_STR_BSTR = 3 
MONO_MARSHAL_CONV_STR_LPSTR = 4 
MONO_MARSHAL_CONV_LPSTR_STR = 5 
MONO_MARSHAL_CONV_LPTSTR_STR = 6 
MONO_MARSHAL_CONV_STR_LPWSTR = 7 
MONO_MARSHAL_CONV_LPWSTR_STR = 8 
MONO_MARSHAL_CONV_STR_LPTSTR = 9 
MONO_MARSHAL_CONV_STR_ANSIBSTR = 10 
MONO_MARSHAL_CONV_STR_TBSTR = 11 
MONO_MARSHAL_CONV_STR_BYVALSTR = 12 
MONO_MARSHAL_CONV_STR_BYVALWSTR = 13 
MONO_MARSHAL_CONV_SB_LPSTR = 14 
MONO_MARSHAL_CONV_SB_LPTSTR = 15 
MONO_MARSHAL_CONV_SB_LPWSTR = 16 
MONO_MARSHAL_CONV_LPSTR_SB = 17 
MONO_MARSHAL_CONV_LPTSTR_SB = 18 
MONO_MARSHAL_CONV_LPWSTR_SB = 19 
MONO_MARSHAL_CONV_ARRAY_BYVALARRAY = 20 
MONO_MARSHAL_CONV_ARRAY_BYVALCHARARRAY = 21 
MONO_MARSHAL_CONV_ARRAY_SAVEARRAY = 22 
MONO_MARSHAL_CONV_ARRAY_LPARRAY = 23 
MONO_MARSHAL_FREE_LPARRAY = 24 
MONO_MARSHAL_CONV_OBJECT_INTERFACE = 25 
MONO_MARSHAL_CONV_OBJECT_IDISPATCH = 26 
MONO_MARSHAL_CONV_OBJECT_IUNKNOWN = 27 
MONO_MARSHAL_CONV_OBJECT_STRUCT = 28 
MONO_MARSHAL_CONV_DEL_FTN = 29 
MONO_MARSHAL_CONV_FTN_DEL = 30 
MONO_MARSHAL_FREE_ARRAY = 31 
MONO_MARSHAL_CONV_BSTR_STR = 32 
MONO_MARSHAL_CONV_SAFEHANDLE = 33 
MONO_MARSHAL_CONV_HANDLEREF = 34 

MONO_PARSE_TYPE = 0 
MONO_PARSE_MOD_TYPE = 1 
MONO_PARSE_LOCAL = 2 
MONO_PARSE_PARAM = 3 
MONO_PARSE_RET = 4 
MONO_PARSE_FIELD = 5 

MONO_ERROR_FREE_STRINGS = 1 
MONO_ERROR_INCOMPLETE = 2 

MONO_ERROR_NONE = 0 
MONO_ERROR_MISSING_METHOD = 1 
MONO_ERROR_MISSING_FIELD = 2 
MONO_ERROR_TYPE_LOAD = 3 
MONO_ERROR_FILE_NOT_FOUND = 4 
MONO_ERROR_BAD_IMAGE = 5 
MONO_ERROR_OUT_OF_MEMORY = 6 
MONO_ERROR_ARGUMENT = 7 
MONO_ERROR_NOT_VERIFIABLE = 8 
MONO_ERROR_GENERIC = 9 

ResolveTokenError_OutOfRange = 0 
ResolveTokenError_BadTable = 1 
ResolveTokenError_Other = 2 

MONO_DECLSEC_FLAG_REQUEST = 1 
MONO_DECLSEC_FLAG_DEMAND = 2 
MONO_DECLSEC_FLAG_ASSERT = 4 
MONO_DECLSEC_FLAG_DENY = 8 
MONO_DECLSEC_FLAG_PERMITONLY = 16 
MONO_DECLSEC_FLAG_LINKDEMAND = 32 
MONO_DECLSEC_FLAG_INHERITANCEDEMAND = 64 
MONO_DECLSEC_FLAG_REQUEST_MINIMUM = 128 
MONO_DECLSEC_FLAG_REQUEST_OPTIONAL = 256 
MONO_DECLSEC_FLAG_REQUEST_REFUSE = 512 
MONO_DECLSEC_FLAG_PREJIT_GRANT = 1024 
MONO_DECLSEC_FLAG_PREJIT_DENY = 2048 
MONO_DECLSEC_FLAG_NONCAS_DEMAND = 4096 
MONO_DECLSEC_FLAG_NONCAS_LINKDEMAND = 8192 
MONO_DECLSEC_FLAG_NONCAS_INHERITANCEDEMAND = 16384 
MONO_DECLSEC_FLAG_LINKDEMAND_CHOICE = 32768 
MONO_DECLSEC_FLAG_INHERITANCEDEMAND_CHOICE = 65536 
MONO_DECLSEC_FLAG_DEMAND_CHOICE = 131072 

MONO_BREAK_POLICY_ALWAYS = 0 
MONO_BREAK_POLICY_NEVER = 1 
MONO_BREAK_POLICY_ON_DBG = 2 

## simple enums ##
RPYTHONIC_GLOBAL_ENUMS = { 
 "MONO_TYPE_END" : 0,  "MONO_TYPE_VOID" : 1,  "MONO_TYPE_BOOLEAN" : 2,  "MONO_TYPE_CHAR" : 3,  "MONO_TYPE_I1" : 4,  "MONO_TYPE_U1" : 5,  "MONO_TYPE_I2" : 6,  "MONO_TYPE_U2" : 7,  "MONO_TYPE_I4" : 8,  "MONO_TYPE_U4" : 9,  "MONO_TYPE_I8" : 10,  "MONO_TYPE_U8" : 11,  "MONO_TYPE_R4" : 12,  "MONO_TYPE_R8" : 13,  "MONO_TYPE_STRING" : 14,  "MONO_TYPE_PTR" : 15,  "MONO_TYPE_BYREF" : 16,  "MONO_TYPE_VALUETYPE" : 17,  "MONO_TYPE_CLASS" : 18,  "MONO_TYPE_VAR" : 19,  "MONO_TYPE_ARRAY" : 20,  "MONO_TYPE_GENERICINST" : 21,  "MONO_TYPE_TYPEDBYREF" : 22,  "MONO_TYPE_I" : 24,  "MONO_TYPE_U" : 25,  "MONO_TYPE_FNPTR" : 27,  "MONO_TYPE_OBJECT" : 28,  "MONO_TYPE_SZARRAY" : 29,  "MONO_TYPE_MVAR" : 30,  "MONO_TYPE_CMOD_REQD" : 31,  "MONO_TYPE_CMOD_OPT" : 32,  "MONO_TYPE_INTERNAL" : 33,  "MONO_TYPE_MODIFIER" : 64,  "MONO_TYPE_SENTINEL" : 65,  "MONO_TYPE_PINNED" : 69,  "MONO_TYPE_ENUM" : 85, 
 "MONO_TABLE_MODULE" : 0,  "MONO_TABLE_TYPEREF" : 1,  "MONO_TABLE_TYPEDEF" : 2,  "MONO_TABLE_FIELD_POINTER" : 3,  "MONO_TABLE_FIELD" : 4,  "MONO_TABLE_METHOD_POINTER" : 5,  "MONO_TABLE_METHOD" : 6,  "MONO_TABLE_PARAM_POINTER" : 7,  "MONO_TABLE_PARAM" : 8,  "MONO_TABLE_INTERFACEIMPL" : 9,  "MONO_TABLE_MEMBERREF" : 10,  "MONO_TABLE_CONSTANT" : 11,  "MONO_TABLE_CUSTOMATTRIBUTE" : 12,  "MONO_TABLE_FIELDMARSHAL" : 13,  "MONO_TABLE_DECLSECURITY" : 14,  "MONO_TABLE_CLASSLAYOUT" : 15,  "MONO_TABLE_FIELDLAYOUT" : 16,  "MONO_TABLE_STANDALONESIG" : 17,  "MONO_TABLE_EVENTMAP" : 18,  "MONO_TABLE_EVENT_POINTER" : 19,  "MONO_TABLE_EVENT" : 20,  "MONO_TABLE_PROPERTYMAP" : 21,  "MONO_TABLE_PROPERTY_POINTER" : 22,  "MONO_TABLE_PROPERTY" : 23,  "MONO_TABLE_METHODSEMANTICS" : 24,  "MONO_TABLE_METHODIMPL" : 25,  "MONO_TABLE_MODULEREF" : 26,  "MONO_TABLE_TYPESPEC" : 27,  "MONO_TABLE_IMPLMAP" : 28,  "MONO_TABLE_FIELDRVA" : 29,  "MONO_TABLE_UNUSED6" : 30,  "MONO_TABLE_UNUSED7" : 31,  "MONO_TABLE_ASSEMBLY" : 32,  "MONO_TABLE_ASSEMBLYPROCESSOR" : 33,  "MONO_TABLE_ASSEMBLYOS" : 34,  "MONO_TABLE_ASSEMBLYREF" : 35,  "MONO_TABLE_ASSEMBLYREFPROCESSOR" : 36,  "MONO_TABLE_ASSEMBLYREFOS" : 37,  "MONO_TABLE_FILE" : 38,  "MONO_TABLE_EXPORTEDTYPE" : 39,  "MONO_TABLE_MANIFESTRESOURCE" : 40,  "MONO_TABLE_NESTEDCLASS" : 41,  "MONO_TABLE_GENERICPARAM" : 42,  "MONO_TABLE_METHODSPEC" : 43,  "MONO_TABLE_GENERICPARAMCONSTRAINT" : 44, 
 "MONO_ASSEMBLY_HASH_ALG" : 0,  "MONO_ASSEMBLY_MAJOR_VERSION" : 1,  "MONO_ASSEMBLY_MINOR_VERSION" : 2,  "MONO_ASSEMBLY_BUILD_NUMBER" : 3,  "MONO_ASSEMBLY_REV_NUMBER" : 4,  "MONO_ASSEMBLY_FLAGS" : 5,  "MONO_ASSEMBLY_PUBLIC_KEY" : 6,  "MONO_ASSEMBLY_NAME" : 7,  "MONO_ASSEMBLY_CULTURE" : 8,  "MONO_ASSEMBLY_SIZE" : 9, 
 "MONO_ASSEMBLYOS_PLATFORM" : 0,  "MONO_ASSEMBLYOS_MAJOR_VERSION" : 1,  "MONO_ASSEMBLYOS_MINOR_VERSION" : 2,  "MONO_ASSEMBLYOS_SIZE" : 3, 
 "MONO_ASSEMBLY_PROCESSOR" : 0,  "MONO_ASSEMBLY_PROCESSOR_SIZE" : 1, 
 "MONO_ASSEMBLYREF_MAJOR_VERSION" : 0,  "MONO_ASSEMBLYREF_MINOR_VERSION" : 1,  "MONO_ASSEMBLYREF_BUILD_NUMBER" : 2,  "MONO_ASSEMBLYREF_REV_NUMBER" : 3,  "MONO_ASSEMBLYREF_FLAGS" : 4,  "MONO_ASSEMBLYREF_PUBLIC_KEY" : 5,  "MONO_ASSEMBLYREF_NAME" : 6,  "MONO_ASSEMBLYREF_CULTURE" : 7,  "MONO_ASSEMBLYREF_HASH_VALUE" : 8,  "MONO_ASSEMBLYREF_SIZE" : 9, 
 "MONO_ASSEMBLYREFOS_PLATFORM" : 0,  "MONO_ASSEMBLYREFOS_MAJOR_VERSION" : 1,  "MONO_ASSEMBLYREFOS_MINOR_VERSION" : 2,  "MONO_ASSEMBLYREFOS_ASSEMBLYREF" : 3,  "MONO_ASSEMBLYREFOS_SIZE" : 4, 
 "MONO_ASSEMBLYREFPROC_PROCESSOR" : 0,  "MONO_ASSEMBLYREFPROC_ASSEMBLYREF" : 1,  "MONO_ASSEMBLYREFPROC_SIZE" : 2, 
 "MONO_CLASS_LAYOUT_PACKING_SIZE" : 0,  "MONO_CLASS_LAYOUT_CLASS_SIZE" : 1,  "MONO_CLASS_LAYOUT_PARENT" : 2,  "MONO_CLASS_LAYOUT_SIZE" : 3, 
 "MONO_CONSTANT_TYPE" : 0,  "MONO_CONSTANT_PADDING" : 1,  "MONO_CONSTANT_PARENT" : 2,  "MONO_CONSTANT_VALUE" : 3,  "MONO_CONSTANT_SIZE" : 4, 
 "MONO_CUSTOM_ATTR_PARENT" : 0,  "MONO_CUSTOM_ATTR_TYPE" : 1,  "MONO_CUSTOM_ATTR_VALUE" : 2,  "MONO_CUSTOM_ATTR_SIZE" : 3, 
 "MONO_DECL_SECURITY_ACTION" : 0,  "MONO_DECL_SECURITY_PARENT" : 1,  "MONO_DECL_SECURITY_PERMISSIONSET" : 2,  "MONO_DECL_SECURITY_SIZE" : 3, 
 "MONO_EVENT_MAP_PARENT" : 0,  "MONO_EVENT_MAP_EVENTLIST" : 1,  "MONO_EVENT_MAP_SIZE" : 2, 
 "MONO_EVENT_FLAGS" : 0,  "MONO_EVENT_NAME" : 1,  "MONO_EVENT_TYPE" : 2,  "MONO_EVENT_SIZE" : 3, 
 "MONO_EVENT_POINTER_EVENT" : 0,  "MONO_EVENT_POINTER_SIZE" : 1, 
 "MONO_EXP_TYPE_FLAGS" : 0,  "MONO_EXP_TYPE_TYPEDEF" : 1,  "MONO_EXP_TYPE_NAME" : 2,  "MONO_EXP_TYPE_NAMESPACE" : 3,  "MONO_EXP_TYPE_IMPLEMENTATION" : 4,  "MONO_EXP_TYPE_SIZE" : 5, 
 "MONO_FIELD_FLAGS" : 0,  "MONO_FIELD_NAME" : 1,  "MONO_FIELD_SIGNATURE" : 2,  "MONO_FIELD_SIZE" : 3, 
 "MONO_FIELD_LAYOUT_OFFSET" : 0,  "MONO_FIELD_LAYOUT_FIELD" : 1,  "MONO_FIELD_LAYOUT_SIZE" : 2, 
 "MONO_FIELD_MARSHAL_PARENT" : 0,  "MONO_FIELD_MARSHAL_NATIVE_TYPE" : 1,  "MONO_FIELD_MARSHAL_SIZE" : 2, 
 "MONO_FIELD_POINTER_FIELD" : 0,  "MONO_FIELD_POINTER_SIZE" : 1, 
 "MONO_FIELD_RVA_RVA" : 0,  "MONO_FIELD_RVA_FIELD" : 1,  "MONO_FIELD_RVA_SIZE" : 2, 
 "MONO_FILE_FLAGS" : 0,  "MONO_FILE_NAME" : 1,  "MONO_FILE_HASH_VALUE" : 2,  "MONO_FILE_SIZE" : 3, 
 "MONO_IMPLMAP_FLAGS" : 0,  "MONO_IMPLMAP_MEMBER" : 1,  "MONO_IMPLMAP_NAME" : 2,  "MONO_IMPLMAP_SCOPE" : 3,  "MONO_IMPLMAP_SIZE" : 4, 
 "MONO_INTERFACEIMPL_CLASS" : 0,  "MONO_INTERFACEIMPL_INTERFACE" : 1,  "MONO_INTERFACEIMPL_SIZE" : 2, 
 "MONO_MANIFEST_OFFSET" : 0,  "MONO_MANIFEST_FLAGS" : 1,  "MONO_MANIFEST_NAME" : 2,  "MONO_MANIFEST_IMPLEMENTATION" : 3,  "MONO_MANIFEST_SIZE" : 4, 
 "MONO_MEMBERREF_CLASS" : 0,  "MONO_MEMBERREF_NAME" : 1,  "MONO_MEMBERREF_SIGNATURE" : 2,  "MONO_MEMBERREF_SIZE" : 3, 
 "MONO_METHOD_RVA" : 0,  "MONO_METHOD_IMPLFLAGS" : 1,  "MONO_METHOD_FLAGS" : 2,  "MONO_METHOD_NAME" : 3,  "MONO_METHOD_SIGNATURE" : 4,  "MONO_METHOD_PARAMLIST" : 5,  "MONO_METHOD_SIZE" : 6, 
 "MONO_METHODIMPL_CLASS" : 0,  "MONO_METHODIMPL_BODY" : 1,  "MONO_METHODIMPL_DECLARATION" : 2,  "MONO_METHODIMPL_SIZE" : 3, 
 "MONO_METHOD_POINTER_METHOD" : 0,  "MONO_METHOD_POINTER_SIZE" : 1, 
 "MONO_METHOD_SEMA_SEMANTICS" : 0,  "MONO_METHOD_SEMA_METHOD" : 1,  "MONO_METHOD_SEMA_ASSOCIATION" : 2,  "MONO_METHOD_SEMA_SIZE" : 3, 
 "MONO_MODULE_GENERATION" : 0,  "MONO_MODULE_NAME" : 1,  "MONO_MODULE_MVID" : 2,  "MONO_MODULE_ENC" : 3,  "MONO_MODULE_ENCBASE" : 4,  "MONO_MODULE_SIZE" : 5, 
 "MONO_MODULEREF_NAME" : 0,  "MONO_MODULEREF_SIZE" : 1, 
 "MONO_NESTED_CLASS_NESTED" : 0,  "MONO_NESTED_CLASS_ENCLOSING" : 1,  "MONO_NESTED_CLASS_SIZE" : 2, 
 "MONO_PARAM_FLAGS" : 0,  "MONO_PARAM_SEQUENCE" : 1,  "MONO_PARAM_NAME" : 2,  "MONO_PARAM_SIZE" : 3, 
 "MONO_PARAM_POINTER_PARAM" : 0,  "MONO_PARAM_POINTER_SIZE" : 1, 
 "MONO_PROPERTY_FLAGS" : 0,  "MONO_PROPERTY_NAME" : 1,  "MONO_PROPERTY_TYPE" : 2,  "MONO_PROPERTY_SIZE" : 3, 
 "MONO_PROPERTY_POINTER_PROPERTY" : 0,  "MONO_PROPERTY_POINTER_SIZE" : 1, 
 "MONO_PROPERTY_MAP_PARENT" : 0,  "MONO_PROPERTY_MAP_PROPERTY_LIST" : 1,  "MONO_PROPERTY_MAP_SIZE" : 2, 
 "MONO_STAND_ALONE_SIGNATURE" : 0,  "MONO_STAND_ALONE_SIGNATURE_SIZE" : 1, 
 "MONO_TYPEDEF_FLAGS" : 0,  "MONO_TYPEDEF_NAME" : 1,  "MONO_TYPEDEF_NAMESPACE" : 2,  "MONO_TYPEDEF_EXTENDS" : 3,  "MONO_TYPEDEF_FIELD_LIST" : 4,  "MONO_TYPEDEF_METHOD_LIST" : 5,  "MONO_TYPEDEF_SIZE" : 6, 
 "MONO_TYPEREF_SCOPE" : 0,  "MONO_TYPEREF_NAME" : 1,  "MONO_TYPEREF_NAMESPACE" : 2,  "MONO_TYPEREF_SIZE" : 3, 
 "MONO_TYPESPEC_SIGNATURE" : 0,  "MONO_TYPESPEC_SIZE" : 1, 
 "MONO_GENERICPARAM_NUMBER" : 0,  "MONO_GENERICPARAM_FLAGS" : 1,  "MONO_GENERICPARAM_OWNER" : 2,  "MONO_GENERICPARAM_NAME" : 3,  "MONO_GENERICPARAM_SIZE" : 4, 
 "MONO_METHODSPEC_METHOD" : 0,  "MONO_METHODSPEC_SIGNATURE" : 1,  "MONO_METHODSPEC_SIZE" : 2, 
 "MONO_GENPARCONSTRAINT_GENERICPAR" : 0,  "MONO_GENPARCONSTRAINT_CONSTRAINT" : 1,  "MONO_GENPARCONSTRAINT_SIZE" : 2, 
 "MONO_TYPEDEFORREF_TYPEDEF" : 0,  "MONO_TYPEDEFORREF_TYPEREF" : 1,  "MONO_TYPEDEFORREF_TYPESPEC" : 2,  "MONO_TYPEDEFORREF_BITS" : 2,  "MONO_TYPEDEFORREF_MASK" : 3, 
 "MONO_HASCONSTANT_FIEDDEF" : 0,  "MONO_HASCONSTANT_PARAM" : 1,  "MONO_HASCONSTANT_PROPERTY" : 2,  "MONO_HASCONSTANT_BITS" : 2,  "MONO_HASCONSTANT_MASK" : 3, 
 "MONO_CUSTOM_ATTR_METHODDEF" : 0,  "MONO_CUSTOM_ATTR_FIELDDEF" : 1,  "MONO_CUSTOM_ATTR_TYPEREF" : 2,  "MONO_CUSTOM_ATTR_TYPEDEF" : 3,  "MONO_CUSTOM_ATTR_PARAMDEF" : 4,  "MONO_CUSTOM_ATTR_INTERFACE" : 5,  "MONO_CUSTOM_ATTR_MEMBERREF" : 6,  "MONO_CUSTOM_ATTR_MODULE" : 7,  "MONO_CUSTOM_ATTR_PERMISSION" : 8,  "MONO_CUSTOM_ATTR_PROPERTY" : 9,  "MONO_CUSTOM_ATTR_EVENT" : 10,  "MONO_CUSTOM_ATTR_SIGNATURE" : 11,  "MONO_CUSTOM_ATTR_MODULEREF" : 12,  "MONO_CUSTOM_ATTR_TYPESPEC" : 13,  "MONO_CUSTOM_ATTR_ASSEMBLY" : 14,  "MONO_CUSTOM_ATTR_ASSEMBLYREF" : 15,  "MONO_CUSTOM_ATTR_FILE" : 16,  "MONO_CUSTOM_ATTR_EXP_TYPE" : 17,  "MONO_CUSTOM_ATTR_MANIFEST" : 18,  "MONO_CUSTOM_ATTR_GENERICPAR" : 19,  "MONO_CUSTOM_ATTR_BITS" : 5,  "MONO_CUSTOM_ATTR_MASK" : 31, 
 "MONO_HAS_FIELD_MARSHAL_FIELDSREF" : 0,  "MONO_HAS_FIELD_MARSHAL_PARAMDEF" : 1,  "MONO_HAS_FIELD_MARSHAL_BITS" : 1,  "MONO_HAS_FIELD_MARSHAL_MASK" : 1, 
 "MONO_HAS_DECL_SECURITY_TYPEDEF" : 0,  "MONO_HAS_DECL_SECURITY_METHODDEF" : 1,  "MONO_HAS_DECL_SECURITY_ASSEMBLY" : 2,  "MONO_HAS_DECL_SECURITY_BITS" : 2,  "MONO_HAS_DECL_SECURITY_MASK" : 3, 
 "MONO_MEMBERREF_PARENT_TYPEDEF" : 0,  "MONO_MEMBERREF_PARENT_TYPEREF" : 1,  "MONO_MEMBERREF_PARENT_MODULEREF" : 2,  "MONO_MEMBERREF_PARENT_METHODDEF" : 3,  "MONO_MEMBERREF_PARENT_TYPESPEC" : 4,  "MONO_MEMBERREF_PARENT_BITS" : 3,  "MONO_MEMBERREF_PARENT_MASK" : 7, 
 "MONO_HAS_SEMANTICS_EVENT" : 0,  "MONO_HAS_SEMANTICS_PROPERTY" : 1,  "MONO_HAS_SEMANTICS_BITS" : 1,  "MONO_HAS_SEMANTICS_MASK" : 1, 
 "MONO_METHODDEFORREF_METHODDEF" : 0,  "MONO_METHODDEFORREF_METHODREF" : 1,  "MONO_METHODDEFORREF_BITS" : 1,  "MONO_METHODDEFORREF_MASK" : 1, 
 "MONO_MEMBERFORWD_FIELDDEF" : 0,  "MONO_MEMBERFORWD_METHODDEF" : 1,  "MONO_MEMBERFORWD_BITS" : 1,  "MONO_MEMBERFORWD_MASK" : 1, 
 "MONO_IMPLEMENTATION_FILE" : 0,  "MONO_IMPLEMENTATION_ASSEMBLYREF" : 1,  "MONO_IMPLEMENTATION_EXP_TYPE" : 2,  "MONO_IMPLEMENTATION_BITS" : 2,  "MONO_IMPLEMENTATION_MASK" : 3, 
 "MONO_CUSTOM_ATTR_TYPE_TYPEREF" : 0,  "MONO_CUSTOM_ATTR_TYPE_TYPEDEF" : 1,  "MONO_CUSTOM_ATTR_TYPE_METHODDEF" : 2,  "MONO_CUSTOM_ATTR_TYPE_MEMBERREF" : 3,  "MONO_CUSTOM_ATTR_TYPE_STRING" : 4,  "MONO_CUSTOM_ATTR_TYPE_BITS" : 3,  "MONO_CUSTOM_ATTR_TYPE_MASK" : 7, 
 "MONO_RESOLTION_SCOPE_MODULE" : 0,  "MONO_RESOLTION_SCOPE_MODULEREF" : 1,  "MONO_RESOLTION_SCOPE_ASSEMBLYREF" : 2,  "MONO_RESOLTION_SCOPE_TYPEREF" : 3,  "MONO_RESOLTION_SCOPE_BITS" : 2,  "MONO_RESOLTION_SCOPE_MASK" : 3, 
 "MONO_TYPEORMETHOD_TYPE" : 0,  "MONO_TYPEORMETHOD_METHOD" : 1,  "MONO_TYPEORMETHOD_BITS" : 1,  "MONO_TYPEORMETHOD_MASK" : 1, 
 "_GCONV_OK" : 0,  "_GCONV_NOCONV" : 1,  "_GCONV_NODB" : 2,  "_GCONV_NOMEM" : 3,  "_GCONV_EMPTY_INPUT" : 4,  "_GCONV_FULL_OUTPUT" : 5,  "_GCONV_ILLEGAL_INPUT" : 6,  "_GCONV_INCOMPLETE_INPUT" : 7,  "_GCONV_ILLEGAL_DESCRIPTOR" : 8,  "_GCONV_INTERNAL_ERROR" : 9, 
 "_GCONV_IS_LAST" : 1,  "_GCONV_IGNORE_ERRORS" : 2, 
 "MONO_IMAGE_OK" : 0,  "MONO_IMAGE_ERROR_ERRNO" : 1,  "MONO_IMAGE_MISSING_ASSEMBLYREF" : 2,  "MONO_IMAGE_IMAGE_INVALID" : 3, 
 "MONO_EXCEPTION_CLAUSE_NONE" : 0,  "MONO_EXCEPTION_CLAUSE_FILTER" : 1,  "MONO_EXCEPTION_CLAUSE_FINALLY" : 2,  "MONO_EXCEPTION_CLAUSE_FAULT" : 4, 
 "MONO_CALL_DEFAULT" : 0,  "MONO_CALL_C" : 1,  "MONO_CALL_STDCALL" : 2,  "MONO_CALL_THISCALL" : 3,  "MONO_CALL_FASTCALL" : 4,  "MONO_CALL_VARARG" : 5, 
 "MONO_NATIVE_BOOLEAN" : 2,  "MONO_NATIVE_I1" : 3,  "MONO_NATIVE_U1" : 4,  "MONO_NATIVE_I2" : 5,  "MONO_NATIVE_U2" : 6,  "MONO_NATIVE_I4" : 7,  "MONO_NATIVE_U4" : 8,  "MONO_NATIVE_I8" : 9,  "MONO_NATIVE_U8" : 10,  "MONO_NATIVE_R4" : 11,  "MONO_NATIVE_R8" : 12,  "MONO_NATIVE_CURRENCY" : 15,  "MONO_NATIVE_BSTR" : 19,  "MONO_NATIVE_LPSTR" : 20,  "MONO_NATIVE_LPWSTR" : 21,  "MONO_NATIVE_LPTSTR" : 22,  "MONO_NATIVE_BYVALTSTR" : 23,  "MONO_NATIVE_IUNKNOWN" : 25,  "MONO_NATIVE_IDISPATCH" : 26,  "MONO_NATIVE_STRUCT" : 27,  "MONO_NATIVE_INTERFACE" : 28,  "MONO_NATIVE_SAFEARRAY" : 29,  "MONO_NATIVE_BYVALARRAY" : 30,  "MONO_NATIVE_INT" : 31,  "MONO_NATIVE_UINT" : 32,  "MONO_NATIVE_VBBYREFSTR" : 34,  "MONO_NATIVE_ANSIBSTR" : 35,  "MONO_NATIVE_TBSTR" : 36,  "MONO_NATIVE_VARIANTBOOL" : 37,  "MONO_NATIVE_FUNC" : 38,  "MONO_NATIVE_ASANY" : 40,  "MONO_NATIVE_LPARRAY" : 42,  "MONO_NATIVE_LPSTRUCT" : 43,  "MONO_NATIVE_CUSTOM" : 44,  "MONO_NATIVE_ERROR" : 45,  "MONO_NATIVE_MAX" : 80, 
 "MONO_VARIANT_EMPTY" : 0,  "MONO_VARIANT_NULL" : 1,  "MONO_VARIANT_I2" : 2,  "MONO_VARIANT_I4" : 3,  "MONO_VARIANT_R4" : 4,  "MONO_VARIANT_R8" : 5,  "MONO_VARIANT_CY" : 6,  "MONO_VARIANT_DATE" : 7,  "MONO_VARIANT_BSTR" : 8,  "MONO_VARIANT_DISPATCH" : 9,  "MONO_VARIANT_ERROR" : 10,  "MONO_VARIANT_BOOL" : 11,  "MONO_VARIANT_VARIANT" : 12,  "MONO_VARIANT_UNKNOWN" : 13,  "MONO_VARIANT_DECIMAL" : 14,  "MONO_VARIANT_I1" : 16,  "MONO_VARIANT_UI1" : 17,  "MONO_VARIANT_UI2" : 18,  "MONO_VARIANT_UI4" : 19,  "MONO_VARIANT_I8" : 20,  "MONO_VARIANT_UI8" : 21,  "MONO_VARIANT_INT" : 22,  "MONO_VARIANT_UINT" : 23,  "MONO_VARIANT_VOID" : 24,  "MONO_VARIANT_HRESULT" : 25,  "MONO_VARIANT_PTR" : 26,  "MONO_VARIANT_SAFEARRAY" : 27,  "MONO_VARIANT_CARRAY" : 28,  "MONO_VARIANT_USERDEFINED" : 29,  "MONO_VARIANT_LPSTR" : 30,  "MONO_VARIANT_LPWSTR" : 31,  "MONO_VARIANT_RECORD" : 36,  "MONO_VARIANT_FILETIME" : 64,  "MONO_VARIANT_BLOB" : 65,  "MONO_VARIANT_STREAM" : 66,  "MONO_VARIANT_STORAGE" : 67,  "MONO_VARIANT_STREAMED_OBJECT" : 68,  "MONO_VARIANT_STORED_OBJECT" : 69,  "MONO_VARIANT_BLOB_OBJECT" : 70,  "MONO_VARIANT_CF" : 71,  "MONO_VARIANT_CLSID" : 72,  "MONO_VARIANT_VECTOR" : 4096,  "MONO_VARIANT_ARRAY" : 8192,  "MONO_VARIANT_BYREF" : 16384, 
 "MONO_MARSHAL_CONV_NONE" : 0,  "MONO_MARSHAL_CONV_BOOL_VARIANTBOOL" : 1,  "MONO_MARSHAL_CONV_BOOL_I4" : 2,  "MONO_MARSHAL_CONV_STR_BSTR" : 3,  "MONO_MARSHAL_CONV_STR_LPSTR" : 4,  "MONO_MARSHAL_CONV_LPSTR_STR" : 5,  "MONO_MARSHAL_CONV_LPTSTR_STR" : 6,  "MONO_MARSHAL_CONV_STR_LPWSTR" : 7,  "MONO_MARSHAL_CONV_LPWSTR_STR" : 8,  "MONO_MARSHAL_CONV_STR_LPTSTR" : 9,  "MONO_MARSHAL_CONV_STR_ANSIBSTR" : 10,  "MONO_MARSHAL_CONV_STR_TBSTR" : 11,  "MONO_MARSHAL_CONV_STR_BYVALSTR" : 12,  "MONO_MARSHAL_CONV_STR_BYVALWSTR" : 13,  "MONO_MARSHAL_CONV_SB_LPSTR" : 14,  "MONO_MARSHAL_CONV_SB_LPTSTR" : 15,  "MONO_MARSHAL_CONV_SB_LPWSTR" : 16,  "MONO_MARSHAL_CONV_LPSTR_SB" : 17,  "MONO_MARSHAL_CONV_LPTSTR_SB" : 18,  "MONO_MARSHAL_CONV_LPWSTR_SB" : 19,  "MONO_MARSHAL_CONV_ARRAY_BYVALARRAY" : 20,  "MONO_MARSHAL_CONV_ARRAY_BYVALCHARARRAY" : 21,  "MONO_MARSHAL_CONV_ARRAY_SAVEARRAY" : 22,  "MONO_MARSHAL_CONV_ARRAY_LPARRAY" : 23,  "MONO_MARSHAL_FREE_LPARRAY" : 24,  "MONO_MARSHAL_CONV_OBJECT_INTERFACE" : 25,  "MONO_MARSHAL_CONV_OBJECT_IDISPATCH" : 26,  "MONO_MARSHAL_CONV_OBJECT_IUNKNOWN" : 27,  "MONO_MARSHAL_CONV_OBJECT_STRUCT" : 28,  "MONO_MARSHAL_CONV_DEL_FTN" : 29,  "MONO_MARSHAL_CONV_FTN_DEL" : 30,  "MONO_MARSHAL_FREE_ARRAY" : 31,  "MONO_MARSHAL_CONV_BSTR_STR" : 32,  "MONO_MARSHAL_CONV_SAFEHANDLE" : 33,  "MONO_MARSHAL_CONV_HANDLEREF" : 34, 
 "MONO_PARSE_TYPE" : 0,  "MONO_PARSE_MOD_TYPE" : 1,  "MONO_PARSE_LOCAL" : 2,  "MONO_PARSE_PARAM" : 3,  "MONO_PARSE_RET" : 4,  "MONO_PARSE_FIELD" : 5, 
 "MONO_ERROR_FREE_STRINGS" : 1,  "MONO_ERROR_INCOMPLETE" : 2, 
 "MONO_ERROR_NONE" : 0,  "MONO_ERROR_MISSING_METHOD" : 1,  "MONO_ERROR_MISSING_FIELD" : 2,  "MONO_ERROR_TYPE_LOAD" : 3,  "MONO_ERROR_FILE_NOT_FOUND" : 4,  "MONO_ERROR_BAD_IMAGE" : 5,  "MONO_ERROR_OUT_OF_MEMORY" : 6,  "MONO_ERROR_ARGUMENT" : 7,  "MONO_ERROR_NOT_VERIFIABLE" : 8,  "MONO_ERROR_GENERIC" : 9, 
 "ResolveTokenError_OutOfRange" : 0,  "ResolveTokenError_BadTable" : 1,  "ResolveTokenError_Other" : 2, 
 "MONO_DECLSEC_FLAG_REQUEST" : 1,  "MONO_DECLSEC_FLAG_DEMAND" : 2,  "MONO_DECLSEC_FLAG_ASSERT" : 4,  "MONO_DECLSEC_FLAG_DENY" : 8,  "MONO_DECLSEC_FLAG_PERMITONLY" : 16,  "MONO_DECLSEC_FLAG_LINKDEMAND" : 32,  "MONO_DECLSEC_FLAG_INHERITANCEDEMAND" : 64,  "MONO_DECLSEC_FLAG_REQUEST_MINIMUM" : 128,  "MONO_DECLSEC_FLAG_REQUEST_OPTIONAL" : 256,  "MONO_DECLSEC_FLAG_REQUEST_REFUSE" : 512,  "MONO_DECLSEC_FLAG_PREJIT_GRANT" : 1024,  "MONO_DECLSEC_FLAG_PREJIT_DENY" : 2048,  "MONO_DECLSEC_FLAG_NONCAS_DEMAND" : 4096,  "MONO_DECLSEC_FLAG_NONCAS_LINKDEMAND" : 8192,  "MONO_DECLSEC_FLAG_NONCAS_INHERITANCEDEMAND" : 16384,  "MONO_DECLSEC_FLAG_LINKDEMAND_CHOICE" : 32768,  "MONO_DECLSEC_FLAG_INHERITANCEDEMAND_CHOICE" : 65536,  "MONO_DECLSEC_FLAG_DEMAND_CHOICE" : 131072, 
 "MONO_BREAK_POLICY_ALWAYS" : 0,  "MONO_BREAK_POLICY_NEVER" : 1,  "MONO_BREAK_POLICY_ON_DBG" : 2, 

}
class __fsid_t(_rpythonic_struct_): _array_wrapper_ = True
class __mbstate_t(_rpythonic_struct_): pass
class __value(ctypes.Union): pass
class _G_fpos_t(_rpythonic_struct_): pass
class _G_fpos64_t(_rpythonic_struct_): pass
class __gconv_loaded_object(_rpythonic_struct_): pass
class __gconv_trans_data(_rpythonic_struct_): pass
class __gconv_step(_rpythonic_struct_): pass
class __gconv_step_data(_rpythonic_struct_): pass
class __gconv_info(_rpythonic_struct_): _array_wrapper_ = True
class _G_iconv_t(ctypes.Union): pass
class __combined(_rpythonic_struct_): pass
class _IO_jump_t(_rpythonic_struct_): pass
class _IO_marker(_rpythonic_struct_): pass
class _IO_codecvt(_rpythonic_struct_): pass
class _IO_wide_data(_rpythonic_struct_): _array_wrapper_ = True
class _IO_FILE(_rpythonic_struct_): _array_wrapper_ = True
class _IO_FILE_plus(_rpythonic_struct_): pass
class _MonoImage(_rpythonic_struct_): pass
class _MonoAssembly(_rpythonic_struct_): pass
class _MonoAssemblyName(_rpythonic_struct_): pass
class _MonoTableInfo(_rpythonic_struct_): pass
class _MonoClass(_rpythonic_struct_): pass
class _MonoDomain(_rpythonic_struct_): pass
class _MonoMethod(_rpythonic_struct_): pass
class MonoMarshalSpec(_rpythonic_struct_): pass
class data(ctypes.Union): pass
class array_data(_rpythonic_struct_): pass
class custom_data(_rpythonic_struct_): pass
class safearray_data(_rpythonic_struct_): pass
class MonoExceptionClause(_rpythonic_struct_): pass
class _MonoType(_rpythonic_struct_): pass
class _MonoGenericInst(_rpythonic_struct_): pass
class _MonoGenericClass(_rpythonic_struct_): pass
class _MonoDynamicGenericClass(_rpythonic_struct_): pass
class _MonoGenericContext(_rpythonic_struct_): pass
class _MonoGenericContainer(_rpythonic_struct_): pass
class _MonoGenericParam(_rpythonic_struct_): pass
class _MonoMethodSignature(_rpythonic_struct_): pass
class invalid_name(_rpythonic_struct_): pass
class MonoCustomMod(_rpythonic_struct_): pass
class _MonoArrayType(_rpythonic_struct_): pass
class _MonoMethodHeader(_rpythonic_struct_): pass
class MonoVTable(_rpythonic_struct_): pass
class _MonoClassField(_rpythonic_struct_): pass
class _MonoProperty(_rpythonic_struct_): pass
class _MonoEvent(_rpythonic_struct_): pass
class MonoError(_rpythonic_struct_): _array_wrapper_ = True
class _MonoString(_rpythonic_struct_): pass
class _MonoArray(_rpythonic_struct_): pass
class _MonoReflectionMethod(_rpythonic_struct_): pass
class _MonoReflectionAssembly(_rpythonic_struct_): pass
class _MonoReflectionModule(_rpythonic_struct_): pass
class _MonoReflectionField(_rpythonic_struct_): pass
class _MonoReflectionProperty(_rpythonic_struct_): pass
class _MonoReflectionEvent(_rpythonic_struct_): pass
class _MonoReflectionType(_rpythonic_struct_): pass
class _MonoDelegate(_rpythonic_struct_): pass
class _MonoException(_rpythonic_struct_): pass
class _MonoThreadsSync(_rpythonic_struct_): pass
class _MonoThread(_rpythonic_struct_): pass
class _MonoDynamicAssembly(_rpythonic_struct_): pass
class _MonoDynamicImage(_rpythonic_struct_): pass
class _MonoReflectionMethodBody(_rpythonic_struct_): pass
class _MonoAppContext(_rpythonic_struct_): pass
class MonoObject(_rpythonic_struct_): pass
class MonoTypeNameParse(_rpythonic_struct_): pass
class MonoCustomAttrEntry(_rpythonic_struct_): pass
class MonoCustomAttrInfo(_rpythonic_struct_): _array_wrapper_ = True
class MonoReflectionMethodAux(_rpythonic_struct_): pass
class MonoDeclSecurityEntry(_rpythonic_struct_): pass
class MonoDeclSecurityActions(_rpythonic_struct_): pass
class _MonoAppDomain(_rpythonic_struct_): pass
class _MonoJitInfo(_rpythonic_struct_): pass
## union and structures ##
__freeze_rpythonic_struct( __fsid_t, [
	( "__val", ( ctypes.c_int * 2 ) ),
])

__freeze_rpythonic_struct( __value, [
	( "__wch", ctypes.c_uint ),
	( "__wchb", ( ctypes.c_char * 4 ) ),
])

__freeze_rpythonic_struct( __mbstate_t, [
	( "__count", ctypes.c_int ),
	( "__value", __value ),
])

__freeze_rpythonic_struct( _G_fpos_t, [
	( "__pos", ctypes.c_int64 ),
	( "__state", __mbstate_t ),
])

__freeze_rpythonic_struct( _G_fpos64_t, [
	( "__pos", ctypes.c_longlong ),
	( "__state", __mbstate_t ),
])

__freeze_rpythonic_struct( __gconv_loaded_object, [
])

__freeze_rpythonic_struct( __gconv_trans_data, [
	( "__trans_fct", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(__gconv_step),ctypes.POINTER(__gconv_step_data),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)),ctypes.POINTER(ctypes.c_uint),) ),
	( "__trans_context_fct", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "__trans_end_fct", ctypes.CFUNCTYPE(ctypes.c_void_p, ) ),
	( "__data", ctypes.POINTER(ctypes.c_void_p) ),
	( "__next", ctypes.POINTER(__gconv_trans_data) ),
])

__freeze_rpythonic_struct( __gconv_step, [
	( "__shlib_handle", ctypes.POINTER(__gconv_loaded_object) ),
	( "__modname", ctypes.POINTER(ctypes.c_char) ),
	( "__counter", ctypes.c_int ),
	( "__from_name", ctypes.POINTER(ctypes.c_char) ),
	( "__to_name", ctypes.POINTER(ctypes.c_char) ),
	( "__fct", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(__gconv_step),ctypes.POINTER(__gconv_step_data),ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)),ctypes.POINTER(ctypes.c_uint),ctypes.c_int,ctypes.c_int,) ),
	( "__btowc_fct", ctypes.CFUNCTYPE(ctypes.c_uint, ctypes.POINTER(__gconv_step),ctypes.c_ubyte,) ),
	( "__init_fct", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(__gconv_step),) ),
	( "__end_fct", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(__gconv_step),) ),
	( "__min_needed_from", ctypes.c_int ),
	( "__max_needed_from", ctypes.c_int ),
	( "__min_needed_to", ctypes.c_int ),
	( "__max_needed_to", ctypes.c_int ),
	( "__stateful", ctypes.c_int ),
	( "__data", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( __gconv_step_data, [
	( "__outbuf", ctypes.POINTER(ctypes.c_ubyte) ),
	( "__outbufend", ctypes.POINTER(ctypes.c_ubyte) ),
	( "__flags", ctypes.c_int ),
	( "__invocation_counter", ctypes.c_int ),
	( "__internal_use", ctypes.c_int ),
	( "__statep", ctypes.POINTER(__mbstate_t) ),
	( "__state", __mbstate_t ),
	( "__trans", ctypes.POINTER(__gconv_trans_data) ),
])

__freeze_rpythonic_struct( __gconv_info, [
	( "__nsteps", ctypes.c_uint ),
	( "__steps", ctypes.POINTER(__gconv_step) ),
	( "__data", __gconv_step_data ),
])

__freeze_rpythonic_struct( __combined, [
	( "__cd", __gconv_info ),
	( "__data", __gconv_step_data ),
])

__freeze_rpythonic_struct( _G_iconv_t, [
	( "__cd", __gconv_info ),
	( "__combined", __combined ),
])

__freeze_rpythonic_struct( _IO_jump_t, [
])

__freeze_rpythonic_struct( _IO_marker, [
	( "_next", ctypes.POINTER(_IO_marker) ),
	( "_sbuf", ctypes.POINTER(_IO_FILE) ),
	( "_pos", ctypes.c_int ),
])

__freeze_rpythonic_struct( _IO_codecvt, [
	( "__codecvt_destr", ctypes.c_void_p ),
	( "__codecvt_do_out", ctypes.c_void_p ),
	( "__codecvt_do_unshift", ctypes.c_void_p ),
	( "__codecvt_do_in", ctypes.c_void_p ),
	( "__codecvt_do_encoding", ctypes.c_void_p ),
	( "__codecvt_do_always_noconv", ctypes.c_void_p ),
	( "__codecvt_do_length", ctypes.c_void_p ),
	( "__codecvt_do_max_length", ctypes.c_void_p ),
	( "__cd_in", _G_iconv_t ),
	( "__cd_out", _G_iconv_t ),
])

__freeze_rpythonic_struct( _IO_wide_data, [
	( "_IO_read_ptr", ctypes.POINTER(ctypes.c_int64) ),
	( "_IO_read_end", ctypes.POINTER(ctypes.c_int64) ),
	( "_IO_read_base", ctypes.POINTER(ctypes.c_int64) ),
	( "_IO_write_base", ctypes.POINTER(ctypes.c_int64) ),
	( "_IO_write_ptr", ctypes.POINTER(ctypes.c_int64) ),
	( "_IO_write_end", ctypes.POINTER(ctypes.c_int64) ),
	( "_IO_buf_base", ctypes.POINTER(ctypes.c_int64) ),
	( "_IO_buf_end", ctypes.POINTER(ctypes.c_int64) ),
	( "_IO_save_base", ctypes.POINTER(ctypes.c_int64) ),
	( "_IO_backup_base", ctypes.POINTER(ctypes.c_int64) ),
	( "_IO_save_end", ctypes.POINTER(ctypes.c_int64) ),
	( "_IO_state", __mbstate_t ),
	( "_IO_last_state", __mbstate_t ),
	( "_codecvt", _IO_codecvt ),
	( "_shortbuf", ( ctypes.c_int64 * 1 ) ),
	( "_wide_vtable", ctypes.POINTER(_IO_jump_t) ),
])

__freeze_rpythonic_struct( _IO_FILE, [
	( "_flags", ctypes.c_int ),
	( "_IO_read_ptr", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_read_end", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_read_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_write_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_write_ptr", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_write_end", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_buf_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_buf_end", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_save_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_backup_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_save_end", ctypes.POINTER(ctypes.c_char) ),
	( "_markers", ctypes.POINTER(_IO_marker) ),
	( "_chain", ctypes.POINTER(_IO_FILE) ),
	( "_fileno", ctypes.c_int ),
	( "_flags2", ctypes.c_int ),
	( "_old_offset", ctypes.c_int64 ),
	( "_cur_column", ctypes.c_ushort ),
	( "_vtable_offset", ctypes.c_char ),
	( "_shortbuf", ( ctypes.c_char * 1 ) ),
	( "_lock", ctypes.POINTER(ctypes.c_void_p) ),
	( "_offset", ctypes.c_longlong ),
	( "_codecvt", ctypes.POINTER(_IO_codecvt) ),
	( "_wide_data", ctypes.POINTER(_IO_wide_data) ),
	( "_freeres_list", ctypes.POINTER(_IO_FILE) ),
	( "_freeres_buf", ctypes.POINTER(ctypes.c_void_p) ),
	( "_freeres_size", ctypes.c_uint ),
	( "_mode", ctypes.c_int ),
	( "_unused2", ctypes.c_char ),
])

__freeze_rpythonic_struct( _IO_FILE_plus, [
])

__freeze_rpythonic_struct( _MonoImage, [
])

__freeze_rpythonic_struct( _MonoAssembly, [
])

__freeze_rpythonic_struct( _MonoAssemblyName, [
])

__freeze_rpythonic_struct( _MonoTableInfo, [
])

__freeze_rpythonic_struct( _MonoClass, [
])

__freeze_rpythonic_struct( _MonoDomain, [
])

__freeze_rpythonic_struct( _MonoMethod, [
])

__freeze_rpythonic_struct( array_data, [
	( "elem_type", ctypes.c_int ),
	( "num_elem", ctypes.c_int32 ),
	( "param_num", ctypes.c_int16 ),
	( "elem_mult", ctypes.c_int16 ),
])

__freeze_rpythonic_struct( custom_data, [
	( "custom_name", ctypes.POINTER(ctypes.c_char) ),
	( "cookie", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( safearray_data, [
	( "elem_type", ctypes.c_int ),
	( "num_elem", ctypes.c_int32 ),
])

__freeze_rpythonic_struct( data, [
	( "array_data", array_data ),
	( "custom_data", custom_data ),
	( "safearray_data", safearray_data ),
])

__freeze_rpythonic_struct( MonoMarshalSpec, [
	( "native", ctypes.c_int ),
	( "data", data ),
])

__freeze_rpythonic_struct( MonoExceptionClause, [
	( "flags", ctypes.c_uint32 ),
	( "try_offset", ctypes.c_uint32 ),
	( "try_len", ctypes.c_uint32 ),
	( "handler_offset", ctypes.c_uint32 ),
	( "handler_len", ctypes.c_uint32 ),
	( "data", data ),
])

__freeze_rpythonic_struct( _MonoType, [
])

__freeze_rpythonic_struct( _MonoGenericInst, [
])

__freeze_rpythonic_struct( _MonoGenericClass, [
])

__freeze_rpythonic_struct( _MonoDynamicGenericClass, [
])

__freeze_rpythonic_struct( _MonoGenericContext, [
])

__freeze_rpythonic_struct( _MonoGenericContainer, [
])

__freeze_rpythonic_struct( _MonoGenericParam, [
])

__freeze_rpythonic_struct( _MonoMethodSignature, [
])

__freeze_rpythonic_struct( invalid_name, [
])

__freeze_rpythonic_struct( MonoCustomMod, [
	( "required", ctypes.c_uint ),
	( "token", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _MonoArrayType, [
	( "eklass", ctypes.POINTER(_MonoClass) ),
	( "rank", ctypes.c_uint8 ),
	( "numsizes", ctypes.c_uint8 ),
	( "numlobounds", ctypes.c_uint8 ),
	( "sizes", ctypes.POINTER(ctypes.c_int) ),
	( "lobounds", ctypes.POINTER(ctypes.c_int) ),
])

__freeze_rpythonic_struct( _MonoMethodHeader, [
])

__freeze_rpythonic_struct( MonoVTable, [
])

__freeze_rpythonic_struct( _MonoClassField, [
])

__freeze_rpythonic_struct( _MonoProperty, [
])

__freeze_rpythonic_struct( _MonoEvent, [
])

__freeze_rpythonic_struct( MonoError, [
	( "error_code", ctypes.c_ushort ),
	( "hidden_0", ctypes.c_ushort ),
	( "hidden_1", ctypes.POINTER(( ctypes.c_void_p * 12 )) ),
	( "hidden_2", ( ctypes.c_char * 128 ) ),
])

__freeze_rpythonic_struct( _MonoString, [
])

__freeze_rpythonic_struct( _MonoArray, [
])

__freeze_rpythonic_struct( _MonoReflectionMethod, [
])

__freeze_rpythonic_struct( _MonoReflectionAssembly, [
])

__freeze_rpythonic_struct( _MonoReflectionModule, [
])

__freeze_rpythonic_struct( _MonoReflectionField, [
])

__freeze_rpythonic_struct( _MonoReflectionProperty, [
])

__freeze_rpythonic_struct( _MonoReflectionEvent, [
])

__freeze_rpythonic_struct( _MonoReflectionType, [
])

__freeze_rpythonic_struct( _MonoDelegate, [
])

__freeze_rpythonic_struct( _MonoException, [
])

__freeze_rpythonic_struct( _MonoThreadsSync, [
])

__freeze_rpythonic_struct( _MonoThread, [
])

__freeze_rpythonic_struct( _MonoDynamicAssembly, [
])

__freeze_rpythonic_struct( _MonoDynamicImage, [
])

__freeze_rpythonic_struct( _MonoReflectionMethodBody, [
])

__freeze_rpythonic_struct( _MonoAppContext, [
])

__freeze_rpythonic_struct( MonoObject, [
	( "vtable", ctypes.POINTER(MonoVTable) ),
	( "synchronisation", ctypes.POINTER(_MonoThreadsSync) ),
])

__freeze_rpythonic_struct( MonoTypeNameParse, [
])

__freeze_rpythonic_struct( MonoCustomAttrEntry, [
	( "ctor", ctypes.POINTER(_MonoMethod) ),
	( "data_size", ctypes.c_uint32 ),
	( "data", ctypes.POINTER(ctypes.c_uint8) ),
])

__freeze_rpythonic_struct( MonoCustomAttrInfo, [
	( "num_attrs", ctypes.c_int ),
	( "cached", ctypes.c_int ),
	( "image", ctypes.POINTER(_MonoImage) ),
	( "attrs", MonoCustomAttrEntry ),
])

__freeze_rpythonic_struct( MonoReflectionMethodAux, [
	( "param_names", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)) ),
	( "param_marshall", ctypes.POINTER(ctypes.POINTER(MonoMarshalSpec)) ),
	( "param_cattr", ctypes.POINTER(ctypes.POINTER(MonoCustomAttrInfo)) ),
	( "param_defaults", ctypes.POINTER(ctypes.POINTER(ctypes.c_uint8)) ),
	( "param_default_types", ctypes.POINTER(ctypes.c_uint32) ),
	( "dllentry", ctypes.POINTER(ctypes.c_char) ),
	( "dll", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( MonoDeclSecurityEntry, [
	( "blob", ctypes.POINTER(ctypes.c_char) ),
	( "size", ctypes.c_uint32 ),
	( "index", ctypes.c_uint32 ),
])

__freeze_rpythonic_struct( MonoDeclSecurityActions, [
	( "demand", MonoDeclSecurityEntry ),
	( "noncasdemand", MonoDeclSecurityEntry ),
	( "demandchoice", MonoDeclSecurityEntry ),
])

__freeze_rpythonic_struct( _MonoAppDomain, [
])

__freeze_rpythonic_struct( _MonoJitInfo, [
])

## wrapper functions ##
MonoFunc = _rpythonic_function_(		"MonoFunc", ctypes.c_void_p, [
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

MonoHFunc = _rpythonic_function_(		"MonoHFunc", ctypes.c_void_p, [
	("key",		ctypes.POINTER(ctypes.c_void_p)),
	("value",		ctypes.POINTER(ctypes.c_void_p)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

mono_free = _rpythonic_function_(		"mono_free", ctypes.c_void_p, [] )

_IO_getc = _rpythonic_function_(		"_IO_getc", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_putc = _rpythonic_function_(		"_IO_putc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_feof = _rpythonic_function_(		"_IO_feof", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_ferror = _rpythonic_function_(		"_IO_ferror", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_peekc_locked = _rpythonic_function_(		"_IO_peekc_locked", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_flockfile = _rpythonic_function_(		"_IO_flockfile", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_IO_funlockfile = _rpythonic_function_(		"_IO_funlockfile", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_IO_ftrylockfile = _rpythonic_function_(		"_IO_ftrylockfile", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_IO_vfscanf = _rpythonic_function_(		"_IO_vfscanf", ctypes.c_int, [
	("__restrict",		ctypes.POINTER(_IO_FILE)),
	("__restrict",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_char),
	("__restrict",		ctypes.POINTER(ctypes.c_int)),] )

_IO_vfprintf = _rpythonic_function_(		"_IO_vfprintf", ctypes.c_int, [
	("__restrict",		ctypes.POINTER(_IO_FILE)),
	("__restrict",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_char),] )

_IO_padn = _rpythonic_function_(		"_IO_padn", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

_IO_sgetn = _rpythonic_function_(		"_IO_sgetn", ctypes.c_uint, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_uint),] )

_IO_seekoff = _rpythonic_function_(		"_IO_seekoff", ctypes.c_longlong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_longlong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

_IO_seekpos = _rpythonic_function_(		"_IO_seekpos", ctypes.c_longlong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_longlong),
	("none",		ctypes.c_int),] )

_IO_free_backup_area = _rpythonic_function_(		"_IO_free_backup_area", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_IO_getwc = _rpythonic_function_(		"_IO_getwc", ctypes.c_uint, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_putwc = _rpythonic_function_(		"_IO_putwc", ctypes.c_uint, [
	("__wc",		ctypes.c_int64),
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_fwide = _rpythonic_function_(		"_IO_fwide", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),
	("__mode",		ctypes.c_int),] )

_IO_vfwscanf = _rpythonic_function_(		"_IO_vfwscanf", ctypes.c_int, [
	("__restrict",		ctypes.POINTER(_IO_FILE)),
	("__restrict",		ctypes.POINTER(ctypes.c_int64)),
	("none",		ctypes.c_char),
	("__restrict",		ctypes.POINTER(ctypes.c_int)),] )

_IO_vfwprintf = _rpythonic_function_(		"_IO_vfwprintf", ctypes.c_int, [
	("__restrict",		ctypes.POINTER(_IO_FILE)),
	("__restrict",		ctypes.POINTER(ctypes.c_int64)),
	("none",		ctypes.c_char),] )

_IO_wpadn = _rpythonic_function_(		"_IO_wpadn", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_int),] )

_IO_free_wbackup_area = _rpythonic_function_(		"_IO_free_wbackup_area", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

remove = _rpythonic_function_(		"remove", ctypes.c_int, [
	("__filename",		ctypes.POINTER(ctypes.c_char)),] )

rename = _rpythonic_function_(		"rename", ctypes.c_int, [
	("__old",		ctypes.POINTER(ctypes.c_char)),
	("__new",		ctypes.POINTER(ctypes.c_char)),] )

renameat = _rpythonic_function_(		"renameat", ctypes.c_int, [
	("__oldfd",		ctypes.c_int),
	("__old",		ctypes.POINTER(ctypes.c_char)),
	("__newfd",		ctypes.c_int),
	("__new",		ctypes.POINTER(ctypes.c_char)),] )

tmpfile = _rpythonic_function_(		"tmpfile", ctypes.POINTER(_IO_FILE), [] )

tmpnam = _rpythonic_function_(		"tmpnam", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

tmpnam_r = _rpythonic_function_(		"tmpnam_r", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

tempnam = _rpythonic_function_(		"tempnam", ctypes.POINTER(ctypes.c_char), [
	("__dir",		ctypes.POINTER(ctypes.c_char)),
	("__pfx",		ctypes.POINTER(ctypes.c_char)),] )

fclose = _rpythonic_function_(		"fclose", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fflush = _rpythonic_function_(		"fflush", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fflush_unlocked = _rpythonic_function_(		"fflush_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fopen = _rpythonic_function_(		"fopen", ctypes.POINTER(_IO_FILE), [
	("__filename",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

freopen = _rpythonic_function_(		"freopen", ctypes.POINTER(_IO_FILE), [
	("__filename",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.POINTER(ctypes.c_char)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fdopen = _rpythonic_function_(		"fdopen", ctypes.POINTER(_IO_FILE), [
	("__fd",		ctypes.c_int),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

fmemopen = _rpythonic_function_(		"fmemopen", ctypes.POINTER(_IO_FILE), [
	("__s",		ctypes.POINTER(ctypes.c_void_p)),
	("__len",		ctypes.c_uint),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

open_memstream = _rpythonic_function_(		"open_memstream", ctypes.POINTER(_IO_FILE), [
	("__bufloc",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__sizeloc",		ctypes.POINTER(ctypes.c_uint)),] )

setbuf = _rpythonic_function_(		"setbuf", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

setvbuf = _rpythonic_function_(		"setvbuf", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.c_int),
	("__n",		ctypes.c_uint),] )

setbuffer = _rpythonic_function_(		"setbuffer", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__size",		ctypes.c_uint),] )

setlinebuf = _rpythonic_function_(		"setlinebuf", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

vfprintf = _rpythonic_function_(		"vfprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vprintf = _rpythonic_function_(		"vprintf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vsprintf = _rpythonic_function_(		"vsprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vsnprintf = _rpythonic_function_(		"vsnprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__maxlen",		ctypes.c_uint),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vdprintf = _rpythonic_function_(		"vdprintf", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__fmt",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vfscanf = _rpythonic_function_(		"vfscanf", ctypes.c_int, [
	("__s",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vscanf = _rpythonic_function_(		"vscanf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vsscanf = _rpythonic_function_(		"vsscanf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

fgetc = _rpythonic_function_(		"fgetc", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getc = _rpythonic_function_(		"getc", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getchar = _rpythonic_function_(		"getchar", ctypes.c_int, [] )

getc_unlocked = _rpythonic_function_(		"getc_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getchar_unlocked = _rpythonic_function_(		"getchar_unlocked", ctypes.c_int, [] )

fgetc_unlocked = _rpythonic_function_(		"fgetc_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fputc = _rpythonic_function_(		"fputc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putc = _rpythonic_function_(		"putc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putchar = _rpythonic_function_(		"putchar", ctypes.c_int, [
	("__c",		ctypes.c_int),] )

fputc_unlocked = _rpythonic_function_(		"fputc_unlocked", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putc_unlocked = _rpythonic_function_(		"putc_unlocked", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putchar_unlocked = _rpythonic_function_(		"putchar_unlocked", ctypes.c_int, [
	("__c",		ctypes.c_int),] )

getw = _rpythonic_function_(		"getw", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putw = _rpythonic_function_(		"putw", ctypes.c_int, [
	("__w",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fgets = _rpythonic_function_(		"fgets", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

gets = _rpythonic_function_(		"gets", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

getdelim = _rpythonic_function_(		"getdelim", ctypes.c_int, [
	("__lineptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__n",		ctypes.POINTER(ctypes.c_uint)),
	("__delimiter",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getline = _rpythonic_function_(		"getline", ctypes.c_int, [
	("__lineptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__n",		ctypes.POINTER(ctypes.c_uint)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fputs = _rpythonic_function_(		"fputs", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

puts = _rpythonic_function_(		"puts", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

ungetc = _rpythonic_function_(		"ungetc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fread = _rpythonic_function_(		"fread", ctypes.c_uint, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint),
	("__n",		ctypes.c_uint),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fwrite = _rpythonic_function_(		"fwrite", ctypes.c_uint, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint),
	("__n",		ctypes.c_uint),
	("__s",		ctypes.POINTER(_IO_FILE)),] )

fread_unlocked = _rpythonic_function_(		"fread_unlocked", ctypes.c_uint, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint),
	("__n",		ctypes.c_uint),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fwrite_unlocked = _rpythonic_function_(		"fwrite_unlocked", ctypes.c_uint, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint),
	("__n",		ctypes.c_uint),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fseek = _rpythonic_function_(		"fseek", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__off",		ctypes.c_int64),
	("__whence",		ctypes.c_int),] )

ftell = _rpythonic_function_(		"ftell", ctypes.c_int64, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

rewind = _rpythonic_function_(		"rewind", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fseeko = _rpythonic_function_(		"fseeko", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__off",		ctypes.c_int64),
	("__whence",		ctypes.c_int),] )

ftello = _rpythonic_function_(		"ftello", ctypes.c_int64, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fgetpos = _rpythonic_function_(		"fgetpos", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__pos",		ctypes.POINTER(_G_fpos_t)),] )

fsetpos = _rpythonic_function_(		"fsetpos", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__pos",		ctypes.POINTER(_G_fpos_t)),] )

clearerr = _rpythonic_function_(		"clearerr", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

feof = _rpythonic_function_(		"feof", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ferror = _rpythonic_function_(		"ferror", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

clearerr_unlocked = _rpythonic_function_(		"clearerr_unlocked", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

feof_unlocked = _rpythonic_function_(		"feof_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ferror_unlocked = _rpythonic_function_(		"ferror_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

perror = _rpythonic_function_(		"perror", ctypes.c_void_p, [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

fileno = _rpythonic_function_(		"fileno", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fileno_unlocked = _rpythonic_function_(		"fileno_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

popen = _rpythonic_function_(		"popen", ctypes.POINTER(_IO_FILE), [
	("__command",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

pclose = _rpythonic_function_(		"pclose", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ctermid = _rpythonic_function_(		"ctermid", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

flockfile = _rpythonic_function_(		"flockfile", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ftrylockfile = _rpythonic_function_(		"ftrylockfile", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

funlockfile = _rpythonic_function_(		"funlockfile", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

mono_images_init = _rpythonic_function_(		"mono_images_init", ctypes.c_void_p, [] )

mono_images_cleanup = _rpythonic_function_(		"mono_images_cleanup", ctypes.c_void_p, [] )

mono_image_open = _rpythonic_function_(		"mono_image_open", ctypes.POINTER(_MonoImage), [
	("fname",		ctypes.POINTER(ctypes.c_char)),
	("status",		ctypes.POINTER(ctypes.c_int)),] )

mono_image_open_full = _rpythonic_function_(		"mono_image_open_full", ctypes.POINTER(_MonoImage), [
	("fname",		ctypes.POINTER(ctypes.c_char)),
	("status",		ctypes.POINTER(ctypes.c_int)),
	("refonly",		ctypes.c_int32),] )

mono_pe_file_open = _rpythonic_function_(		"mono_pe_file_open", ctypes.POINTER(_MonoImage), [
	("fname",		ctypes.POINTER(ctypes.c_char)),
	("status",		ctypes.POINTER(ctypes.c_int)),] )

mono_image_open_from_data = _rpythonic_function_(		"mono_image_open_from_data", ctypes.POINTER(_MonoImage), [
	("data",		ctypes.POINTER(ctypes.c_char)),
	("data_len",		ctypes.c_uint32),
	("need_copy",		ctypes.c_int32),
	("status",		ctypes.POINTER(ctypes.c_int)),] )

mono_image_open_from_data_full = _rpythonic_function_(		"mono_image_open_from_data_full", ctypes.POINTER(_MonoImage), [
	("data",		ctypes.POINTER(ctypes.c_char)),
	("data_len",		ctypes.c_uint32),
	("need_copy",		ctypes.c_int32),
	("status",		ctypes.POINTER(ctypes.c_int)),
	("refonly",		ctypes.c_int32),] )

mono_image_open_from_data_with_name = _rpythonic_function_(		"mono_image_open_from_data_with_name", ctypes.POINTER(_MonoImage), [
	("data",		ctypes.POINTER(ctypes.c_char)),
	("data_len",		ctypes.c_uint32),
	("need_copy",		ctypes.c_int32),
	("status",		ctypes.POINTER(ctypes.c_int)),
	("refonly",		ctypes.c_int32),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

mono_image_fixup_vtable = _rpythonic_function_(		"mono_image_fixup_vtable", ctypes.c_void_p, [
	("image",		ctypes.POINTER(_MonoImage)),] )

mono_image_loaded = _rpythonic_function_(		"mono_image_loaded", ctypes.POINTER(_MonoImage), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

mono_image_loaded_full = _rpythonic_function_(		"mono_image_loaded_full", ctypes.POINTER(_MonoImage), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("refonly",		ctypes.c_int32),] )

mono_image_loaded_by_guid = _rpythonic_function_(		"mono_image_loaded_by_guid", ctypes.POINTER(_MonoImage), [
	("guid",		ctypes.POINTER(ctypes.c_char)),] )

mono_image_loaded_by_guid_full = _rpythonic_function_(		"mono_image_loaded_by_guid_full", ctypes.POINTER(_MonoImage), [
	("guid",		ctypes.POINTER(ctypes.c_char)),
	("refonly",		ctypes.c_int32),] )

mono_image_init = _rpythonic_function_(		"mono_image_init", ctypes.c_void_p, [
	("image",		ctypes.POINTER(_MonoImage)),] )

mono_image_close = _rpythonic_function_(		"mono_image_close", ctypes.c_void_p, [
	("image",		ctypes.POINTER(_MonoImage)),] )

mono_image_addref = _rpythonic_function_(		"mono_image_addref", ctypes.c_void_p, [
	("image",		ctypes.POINTER(_MonoImage)),] )

mono_image_strerror = _rpythonic_function_(		"mono_image_strerror", ctypes.POINTER(ctypes.c_char), [
	("status",		ctypes.c_int),] )

mono_image_ensure_section = _rpythonic_function_(		"mono_image_ensure_section", ctypes.c_int, [
	("image",		ctypes.POINTER(_MonoImage)),
	("section",		ctypes.POINTER(ctypes.c_char)),] )

mono_image_ensure_section_idx = _rpythonic_function_(		"mono_image_ensure_section_idx", ctypes.c_int, [
	("image",		ctypes.POINTER(_MonoImage)),
	("section",		ctypes.c_int),] )

mono_image_get_entry_point = _rpythonic_function_(		"mono_image_get_entry_point", ctypes.c_uint32, [
	("image",		ctypes.POINTER(_MonoImage)),] )

mono_image_get_resource = _rpythonic_function_(		"mono_image_get_resource", ctypes.POINTER(ctypes.c_char), [
	("image",		ctypes.POINTER(_MonoImage)),
	("offset",		ctypes.c_uint32),
	("size",		ctypes.POINTER(ctypes.c_uint32)),] )

mono_image_load_file_for_image = _rpythonic_function_(		"mono_image_load_file_for_image", ctypes.POINTER(_MonoImage), [
	("image",		ctypes.POINTER(_MonoImage)),
	("fileidx",		ctypes.c_int),] )

mono_image_load_module = _rpythonic_function_(		"mono_image_load_module", ctypes.POINTER(_MonoImage), [
	("image",		ctypes.POINTER(_MonoImage)),
	("idx",		ctypes.c_int),] )

mono_image_get_name = _rpythonic_function_(		"mono_image_get_name", ctypes.POINTER(ctypes.c_char), [
	("image",		ctypes.POINTER(_MonoImage)),] )

mono_image_get_filename = _rpythonic_function_(		"mono_image_get_filename", ctypes.POINTER(ctypes.c_char), [
	("image",		ctypes.POINTER(_MonoImage)),] )

mono_image_get_guid = _rpythonic_function_(		"mono_image_get_guid", ctypes.POINTER(ctypes.c_char), [
	("image",		ctypes.POINTER(_MonoImage)),] )

mono_image_get_assembly = _rpythonic_function_(		"mono_image_get_assembly", ctypes.POINTER(_MonoAssembly), [
	("image",		ctypes.POINTER(_MonoImage)),] )

mono_image_is_dynamic = _rpythonic_function_(		"mono_image_is_dynamic", ctypes.c_int32, [
	("image",		ctypes.POINTER(_MonoImage)),] )

mono_image_rva_map = _rpythonic_function_(		"mono_image_rva_map", ctypes.POINTER(ctypes.c_char), [
	("image",		ctypes.POINTER(_MonoImage)),
	("rva",		ctypes.c_uint32),] )

mono_image_get_table_info = _rpythonic_function_(		"mono_image_get_table_info", ctypes.POINTER(_MonoTableInfo), [
	("image",		ctypes.POINTER(_MonoImage)),
	("table_id",		ctypes.c_int),] )

mono_image_get_table_rows = _rpythonic_function_(		"mono_image_get_table_rows", ctypes.c_int, [
	("image",		ctypes.POINTER(_MonoImage)),
	("table_id",		ctypes.c_int),] )

mono_table_info_get_rows = _rpythonic_function_(		"mono_table_info_get_rows", ctypes.c_int, [
	("table",		ctypes.POINTER(_MonoTableInfo)),] )

mono_image_lookup_resource = _rpythonic_function_(		"mono_image_lookup_resource", ctypes.POINTER(ctypes.c_void_p), [
	("image",		ctypes.POINTER(_MonoImage)),
	("res_id",		ctypes.c_uint32),
	("lang_id",		ctypes.c_uint32),
	("name",		ctypes.POINTER(ctypes.c_uint16)),] )

mono_image_get_public_key = _rpythonic_function_(		"mono_image_get_public_key", ctypes.POINTER(ctypes.c_char), [
	("image",		ctypes.POINTER(_MonoImage)),
	("size",		ctypes.POINTER(ctypes.c_uint32)),] )

mono_image_get_strong_name = _rpythonic_function_(		"mono_image_get_strong_name", ctypes.POINTER(ctypes.c_char), [
	("image",		ctypes.POINTER(_MonoImage)),
	("size",		ctypes.POINTER(ctypes.c_uint32)),] )

mono_image_strong_name_position = _rpythonic_function_(		"mono_image_strong_name_position", ctypes.c_uint32, [
	("image",		ctypes.POINTER(_MonoImage)),
	("size",		ctypes.POINTER(ctypes.c_uint32)),] )

mono_image_add_to_name_cache = _rpythonic_function_(		"mono_image_add_to_name_cache", ctypes.c_void_p, [
	("image",		ctypes.POINTER(_MonoImage)),
	("nspace",		ctypes.POINTER(ctypes.c_char)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("idx",		ctypes.c_uint32),] )

mono_image_has_authenticode_entry = _rpythonic_function_(		"mono_image_has_authenticode_entry", ctypes.c_int32, [
	("image",		ctypes.POINTER(_MonoImage)),] )

mono_metadata_init = _rpythonic_function_(		"mono_metadata_init", ctypes.c_void_p, [] )

mono_metadata_decode_row = _rpythonic_function_(		"mono_metadata_decode_row", ctypes.c_void_p, [
	("t",		ctypes.POINTER(_MonoTableInfo)),
	("idx",		ctypes.c_int),
	("res",		ctypes.POINTER(ctypes.c_uint32)),
	("res_size",		ctypes.c_int),] )

mono_metadata_decode_row_col = _rpythonic_function_(		"mono_metadata_decode_row_col", ctypes.c_uint32, [
	("t",		ctypes.POINTER(_MonoTableInfo)),
	("idx",		ctypes.c_int),
	("col",		ctypes.c_uint),] )

mono_metadata_compute_size = _rpythonic_function_(		"mono_metadata_compute_size", ctypes.c_int, [
	("meta",		ctypes.POINTER(_MonoImage)),
	("tableindex",		ctypes.c_int),
	("result_bitfield",		ctypes.POINTER(ctypes.c_uint32)),] )

mono_metadata_locate = _rpythonic_function_(		"mono_metadata_locate", ctypes.POINTER(ctypes.c_char), [
	("meta",		ctypes.POINTER(_MonoImage)),
	("table",		ctypes.c_int),
	("idx",		ctypes.c_int),] )

mono_metadata_locate_token = _rpythonic_function_(		"mono_metadata_locate_token", ctypes.POINTER(ctypes.c_char), [
	("meta",		ctypes.POINTER(_MonoImage)),
	("token",		ctypes.c_uint32),] )

mono_metadata_string_heap = _rpythonic_function_(		"mono_metadata_string_heap", ctypes.POINTER(ctypes.c_char), [
	("meta",		ctypes.POINTER(_MonoImage)),
	("table_index",		ctypes.c_uint32),] )

mono_metadata_blob_heap = _rpythonic_function_(		"mono_metadata_blob_heap", ctypes.POINTER(ctypes.c_char), [
	("meta",		ctypes.POINTER(_MonoImage)),
	("table_index",		ctypes.c_uint32),] )

mono_metadata_user_string = _rpythonic_function_(		"mono_metadata_user_string", ctypes.POINTER(ctypes.c_char), [
	("meta",		ctypes.POINTER(_MonoImage)),
	("table_index",		ctypes.c_uint32),] )

mono_metadata_guid_heap = _rpythonic_function_(		"mono_metadata_guid_heap", ctypes.POINTER(ctypes.c_char), [
	("meta",		ctypes.POINTER(_MonoImage)),
	("table_index",		ctypes.c_uint32),] )

mono_metadata_typedef_from_field = _rpythonic_function_(		"mono_metadata_typedef_from_field", ctypes.c_uint32, [
	("meta",		ctypes.POINTER(_MonoImage)),
	("table_index",		ctypes.c_uint32),] )

mono_metadata_typedef_from_method = _rpythonic_function_(		"mono_metadata_typedef_from_method", ctypes.c_uint32, [
	("meta",		ctypes.POINTER(_MonoImage)),
	("table_index",		ctypes.c_uint32),] )

mono_metadata_nested_in_typedef = _rpythonic_function_(		"mono_metadata_nested_in_typedef", ctypes.c_uint32, [
	("meta",		ctypes.POINTER(_MonoImage)),
	("table_index",		ctypes.c_uint32),] )

mono_metadata_nesting_typedef = _rpythonic_function_(		"mono_metadata_nesting_typedef", ctypes.c_uint32, [
	("meta",		ctypes.POINTER(_MonoImage)),
	("table_index",		ctypes.c_uint32),
	("start_index",		ctypes.c_uint32),] )

mono_metadata_interfaces_from_typedef = _rpythonic_function_(		"mono_metadata_interfaces_from_typedef", ctypes.POINTER(ctypes.POINTER(_MonoClass)), [
	("meta",		ctypes.POINTER(_MonoImage)),
	("table_index",		ctypes.c_uint32),
	("count",		ctypes.POINTER(ctypes.c_uint)),] )

mono_metadata_events_from_typedef = _rpythonic_function_(		"mono_metadata_events_from_typedef", ctypes.c_uint32, [
	("meta",		ctypes.POINTER(_MonoImage)),
	("table_index",		ctypes.c_uint32),
	("end_idx",		ctypes.POINTER(ctypes.c_uint)),] )

mono_metadata_methods_from_event = _rpythonic_function_(		"mono_metadata_methods_from_event", ctypes.c_uint32, [
	("meta",		ctypes.POINTER(_MonoImage)),
	("table_index",		ctypes.c_uint32),
	("end",		ctypes.POINTER(ctypes.c_uint)),] )

mono_metadata_properties_from_typedef = _rpythonic_function_(		"mono_metadata_properties_from_typedef", ctypes.c_uint32, [
	("meta",		ctypes.POINTER(_MonoImage)),
	("table_index",		ctypes.c_uint32),
	("end",		ctypes.POINTER(ctypes.c_uint)),] )

mono_metadata_methods_from_property = _rpythonic_function_(		"mono_metadata_methods_from_property", ctypes.c_uint32, [
	("meta",		ctypes.POINTER(_MonoImage)),
	("table_index",		ctypes.c_uint32),
	("end",		ctypes.POINTER(ctypes.c_uint)),] )

mono_metadata_packing_from_typedef = _rpythonic_function_(		"mono_metadata_packing_from_typedef", ctypes.c_uint32, [
	("meta",		ctypes.POINTER(_MonoImage)),
	("table_index",		ctypes.c_uint32),
	("packing",		ctypes.POINTER(ctypes.c_uint32)),
	("size",		ctypes.POINTER(ctypes.c_uint32)),] )

mono_metadata_get_marshal_info = _rpythonic_function_(		"mono_metadata_get_marshal_info", ctypes.POINTER(ctypes.c_char), [
	("meta",		ctypes.POINTER(_MonoImage)),
	("idx",		ctypes.c_uint32),
	("is_field",		ctypes.c_int32),] )

mono_metadata_custom_attrs_from_index = _rpythonic_function_(		"mono_metadata_custom_attrs_from_index", ctypes.c_uint32, [
	("meta",		ctypes.POINTER(_MonoImage)),
	("cattr_index",		ctypes.c_uint32),] )

mono_metadata_parse_marshal_spec = _rpythonic_function_(		"mono_metadata_parse_marshal_spec", ctypes.POINTER(MonoMarshalSpec), [
	("image",		ctypes.POINTER(_MonoImage)),
	("ptr",		ctypes.POINTER(ctypes.c_char)),] )

mono_metadata_free_marshal_spec = _rpythonic_function_(		"mono_metadata_free_marshal_spec", ctypes.c_void_p, [
	("spec",		ctypes.POINTER(MonoMarshalSpec)),] )

mono_metadata_implmap_from_method = _rpythonic_function_(		"mono_metadata_implmap_from_method", ctypes.c_uint32, [
	("meta",		ctypes.POINTER(_MonoImage)),
	("method_idx",		ctypes.c_uint32),] )

mono_metadata_field_info = _rpythonic_function_(		"mono_metadata_field_info", ctypes.c_void_p, [
	("meta",		ctypes.POINTER(_MonoImage)),
	("table_index",		ctypes.c_uint32),
	("offset",		ctypes.POINTER(ctypes.c_uint32)),
	("rva",		ctypes.POINTER(ctypes.c_uint32)),
	("marshal_spec",		ctypes.POINTER(ctypes.POINTER(MonoMarshalSpec))),] )

mono_metadata_get_constant_index = _rpythonic_function_(		"mono_metadata_get_constant_index", ctypes.c_uint32, [
	("meta",		ctypes.POINTER(_MonoImage)),
	("token",		ctypes.c_uint32),
	("hint",		ctypes.c_uint32),] )

mono_metadata_decode_value = _rpythonic_function_(		"mono_metadata_decode_value", ctypes.c_uint32, [
	("ptr",		ctypes.POINTER(ctypes.c_char)),
	("rptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

mono_metadata_decode_signed_value = _rpythonic_function_(		"mono_metadata_decode_signed_value", ctypes.c_int32, [
	("ptr",		ctypes.POINTER(ctypes.c_char)),
	("rptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

mono_metadata_decode_blob_size = _rpythonic_function_(		"mono_metadata_decode_blob_size", ctypes.c_uint32, [
	("ptr",		ctypes.POINTER(ctypes.c_char)),
	("rptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

mono_metadata_encode_value = _rpythonic_function_(		"mono_metadata_encode_value", ctypes.c_void_p, [
	("value",		ctypes.c_uint32),
	("bug",		ctypes.POINTER(ctypes.c_char)),
	("endbuf",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

mono_type_is_byref = _rpythonic_function_(		"mono_type_is_byref", ctypes.c_int32, [
	("C_type",		ctypes.POINTER(_MonoType)),] )

mono_type_get_type = _rpythonic_function_(		"mono_type_get_type", ctypes.c_int, [
	("C_type",		ctypes.POINTER(_MonoType)),] )

mono_type_get_signature = _rpythonic_function_(		"mono_type_get_signature", ctypes.POINTER(_MonoMethodSignature), [
	("C_type",		ctypes.POINTER(_MonoType)),] )

mono_type_get_class = _rpythonic_function_(		"mono_type_get_class", ctypes.POINTER(_MonoClass), [
	("C_type",		ctypes.POINTER(_MonoType)),] )

mono_type_get_array_type = _rpythonic_function_(		"mono_type_get_array_type", ctypes.POINTER(_MonoArrayType), [
	("C_type",		ctypes.POINTER(_MonoType)),] )

mono_type_get_ptr_type = _rpythonic_function_(		"mono_type_get_ptr_type", ctypes.POINTER(_MonoType), [
	("C_type",		ctypes.POINTER(_MonoType)),] )

mono_type_get_modifiers = _rpythonic_function_(		"mono_type_get_modifiers", ctypes.POINTER(_MonoClass), [
	("C_type",		ctypes.POINTER(_MonoType)),
	("is_required",		ctypes.POINTER(ctypes.c_int32)),
	("iter",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

mono_type_is_struct = _rpythonic_function_(		"mono_type_is_struct", ctypes.c_int32, [
	("C_type",		ctypes.POINTER(_MonoType)),] )

mono_type_is_void = _rpythonic_function_(		"mono_type_is_void", ctypes.c_int32, [
	("C_type",		ctypes.POINTER(_MonoType)),] )

mono_type_is_pointer = _rpythonic_function_(		"mono_type_is_pointer", ctypes.c_int32, [
	("C_type",		ctypes.POINTER(_MonoType)),] )

mono_type_is_reference = _rpythonic_function_(		"mono_type_is_reference", ctypes.c_int32, [
	("C_type",		ctypes.POINTER(_MonoType)),] )

mono_signature_get_return_type = _rpythonic_function_(		"mono_signature_get_return_type", ctypes.POINTER(_MonoType), [
	("sig",		ctypes.POINTER(_MonoMethodSignature)),] )

mono_signature_get_params = _rpythonic_function_(		"mono_signature_get_params", ctypes.POINTER(_MonoType), [
	("sig",		ctypes.POINTER(_MonoMethodSignature)),
	("iter",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

mono_signature_get_param_count = _rpythonic_function_(		"mono_signature_get_param_count", ctypes.c_uint32, [
	("sig",		ctypes.POINTER(_MonoMethodSignature)),] )

mono_signature_get_call_conv = _rpythonic_function_(		"mono_signature_get_call_conv", ctypes.c_uint32, [
	("sig",		ctypes.POINTER(_MonoMethodSignature)),] )

mono_signature_vararg_start = _rpythonic_function_(		"mono_signature_vararg_start", ctypes.c_int, [
	("sig",		ctypes.POINTER(_MonoMethodSignature)),] )

mono_signature_is_instance = _rpythonic_function_(		"mono_signature_is_instance", ctypes.c_int32, [
	("sig",		ctypes.POINTER(_MonoMethodSignature)),] )

mono_signature_explicit_this = _rpythonic_function_(		"mono_signature_explicit_this", ctypes.c_int32, [
	("sig",		ctypes.POINTER(_MonoMethodSignature)),] )

mono_metadata_parse_typedef_or_ref = _rpythonic_function_(		"mono_metadata_parse_typedef_or_ref", ctypes.c_uint32, [
	("m",		ctypes.POINTER(_MonoImage)),
	("ptr",		ctypes.POINTER(ctypes.c_char)),
	("rptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

mono_metadata_parse_custom_mod = _rpythonic_function_(		"mono_metadata_parse_custom_mod", ctypes.c_int, [
	("m",		ctypes.POINTER(_MonoImage)),
	("dest",		ctypes.POINTER(MonoCustomMod)),
	("ptr",		ctypes.POINTER(ctypes.c_char)),
	("rptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

mono_metadata_parse_array = _rpythonic_function_(		"mono_metadata_parse_array", ctypes.POINTER(_MonoArrayType), [
	("m",		ctypes.POINTER(_MonoImage)),
	("ptr",		ctypes.POINTER(ctypes.c_char)),
	("rptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

mono_metadata_free_array = _rpythonic_function_(		"mono_metadata_free_array", ctypes.c_void_p, [
	("array",		ctypes.POINTER(_MonoArrayType)),] )

mono_metadata_parse_type = _rpythonic_function_(		"mono_metadata_parse_type", ctypes.POINTER(_MonoType), [
	("m",		ctypes.POINTER(_MonoImage)),
	("mode",		ctypes.c_int),
	("opt_attrs",		ctypes.c_short),
	("ptr",		ctypes.POINTER(ctypes.c_char)),
	("rptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

mono_metadata_parse_param = _rpythonic_function_(		"mono_metadata_parse_param", ctypes.POINTER(_MonoType), [
	("m",		ctypes.POINTER(_MonoImage)),
	("ptr",		ctypes.POINTER(ctypes.c_char)),
	("rptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

mono_metadata_parse_ret_type = _rpythonic_function_(		"mono_metadata_parse_ret_type", ctypes.POINTER(_MonoType), [
	("m",		ctypes.POINTER(_MonoImage)),
	("ptr",		ctypes.POINTER(ctypes.c_char)),
	("rptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

mono_metadata_parse_field_type = _rpythonic_function_(		"mono_metadata_parse_field_type", ctypes.POINTER(_MonoType), [
	("m",		ctypes.POINTER(_MonoImage)),
	("field_flags",		ctypes.c_short),
	("ptr",		ctypes.POINTER(ctypes.c_char)),
	("rptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

mono_type_create_from_typespec = _rpythonic_function_(		"mono_type_create_from_typespec", ctypes.POINTER(_MonoType), [
	("image",		ctypes.POINTER(_MonoImage)),
	("type_spec",		ctypes.c_uint32),] )

mono_metadata_free_type = _rpythonic_function_(		"mono_metadata_free_type", ctypes.c_void_p, [
	("C_type",		ctypes.POINTER(_MonoType)),] )

mono_type_size = _rpythonic_function_(		"mono_type_size", ctypes.c_int, [
	("C_type",		ctypes.POINTER(_MonoType)),
	("alignment",		ctypes.POINTER(ctypes.c_int)),] )

mono_type_stack_size = _rpythonic_function_(		"mono_type_stack_size", ctypes.c_int, [
	("C_type",		ctypes.POINTER(_MonoType)),
	("alignment",		ctypes.POINTER(ctypes.c_int)),] )

mono_type_generic_inst_is_valuetype = _rpythonic_function_(		"mono_type_generic_inst_is_valuetype", ctypes.c_int32, [
	("C_type",		ctypes.POINTER(_MonoType)),] )

mono_metadata_generic_class_is_valuetype = _rpythonic_function_(		"mono_metadata_generic_class_is_valuetype", ctypes.c_int32, [
	("gclass",		ctypes.POINTER(_MonoGenericClass)),] )

mono_metadata_generic_class_hash = _rpythonic_function_(		"mono_metadata_generic_class_hash", ctypes.c_uint, [
	("gclass",		ctypes.POINTER(_MonoGenericClass)),] )

mono_metadata_generic_class_equal = _rpythonic_function_(		"mono_metadata_generic_class_equal", ctypes.c_int32, [
	("g1",		ctypes.POINTER(_MonoGenericClass)),
	("g2",		ctypes.POINTER(_MonoGenericClass)),] )

mono_metadata_type_hash = _rpythonic_function_(		"mono_metadata_type_hash", ctypes.c_uint, [
	("t1",		ctypes.POINTER(_MonoType)),] )

mono_metadata_type_equal = _rpythonic_function_(		"mono_metadata_type_equal", ctypes.c_int32, [
	("t1",		ctypes.POINTER(_MonoType)),
	("t2",		ctypes.POINTER(_MonoType)),] )

mono_metadata_signature_alloc = _rpythonic_function_(		"mono_metadata_signature_alloc", ctypes.POINTER(_MonoMethodSignature), [
	("image",		ctypes.POINTER(_MonoImage)),
	("nparams",		ctypes.c_uint32),] )

mono_metadata_signature_dup = _rpythonic_function_(		"mono_metadata_signature_dup", ctypes.POINTER(_MonoMethodSignature), [
	("sig",		ctypes.POINTER(_MonoMethodSignature)),] )

mono_metadata_parse_signature = _rpythonic_function_(		"mono_metadata_parse_signature", ctypes.POINTER(_MonoMethodSignature), [
	("image",		ctypes.POINTER(_MonoImage)),
	("token",		ctypes.c_uint32),] )

mono_metadata_parse_method_signature = _rpythonic_function_(		"mono_metadata_parse_method_signature", ctypes.POINTER(_MonoMethodSignature), [
	("m",		ctypes.POINTER(_MonoImage)),
	("C_def",		ctypes.c_int),
	("ptr",		ctypes.POINTER(ctypes.c_char)),
	("rptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

mono_metadata_free_method_signature = _rpythonic_function_(		"mono_metadata_free_method_signature", ctypes.c_void_p, [
	("method",		ctypes.POINTER(_MonoMethodSignature)),] )

mono_metadata_signature_equal = _rpythonic_function_(		"mono_metadata_signature_equal", ctypes.c_int32, [
	("sig1",		ctypes.POINTER(_MonoMethodSignature)),
	("sig2",		ctypes.POINTER(_MonoMethodSignature)),] )

mono_signature_hash = _rpythonic_function_(		"mono_signature_hash", ctypes.c_uint, [
	("sig",		ctypes.POINTER(_MonoMethodSignature)),] )

mono_metadata_parse_mh = _rpythonic_function_(		"mono_metadata_parse_mh", ctypes.POINTER(_MonoMethodHeader), [
	("m",		ctypes.POINTER(_MonoImage)),
	("ptr",		ctypes.POINTER(ctypes.c_char)),] )

mono_metadata_free_mh = _rpythonic_function_(		"mono_metadata_free_mh", ctypes.c_void_p, [
	("mh",		ctypes.POINTER(_MonoMethodHeader)),] )

mono_method_header_get_code = _rpythonic_function_(		"mono_method_header_get_code", ctypes.POINTER(ctypes.c_ubyte), [
	("header",		ctypes.POINTER(_MonoMethodHeader)),
	("code_size",		ctypes.POINTER(ctypes.c_uint32)),
	("max_stack",		ctypes.POINTER(ctypes.c_uint32)),] )

mono_method_header_get_locals = _rpythonic_function_(		"mono_method_header_get_locals", ctypes.POINTER(ctypes.POINTER(_MonoType)), [
	("header",		ctypes.POINTER(_MonoMethodHeader)),
	("num_locals",		ctypes.POINTER(ctypes.c_uint32)),
	("init_locals",		ctypes.POINTER(ctypes.c_int32)),] )

mono_method_header_get_num_clauses = _rpythonic_function_(		"mono_method_header_get_num_clauses", ctypes.c_int, [
	("header",		ctypes.POINTER(_MonoMethodHeader)),] )

mono_method_header_get_clauses = _rpythonic_function_(		"mono_method_header_get_clauses", ctypes.c_int, [
	("header",		ctypes.POINTER(_MonoMethodHeader)),
	("method",		ctypes.POINTER(_MonoMethod)),
	("iter",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("clause",		ctypes.POINTER(MonoExceptionClause)),] )

mono_type_to_unmanaged = _rpythonic_function_(		"mono_type_to_unmanaged", ctypes.c_uint32, [
	("C_type",		ctypes.POINTER(_MonoType)),
	("mspec",		ctypes.POINTER(MonoMarshalSpec)),
	("as_field",		ctypes.c_int32),
	("unicode",		ctypes.c_int32),
	("conv",		ctypes.POINTER(ctypes.c_int)),] )

mono_metadata_token_from_dor = _rpythonic_function_(		"mono_metadata_token_from_dor", ctypes.c_uint32, [
	("dor_index",		ctypes.c_uint32),] )

mono_guid_to_string = _rpythonic_function_(		"mono_guid_to_string", ctypes.POINTER(ctypes.c_char), [
	("guid",		ctypes.POINTER(ctypes.c_uint8)),] )

mono_metadata_declsec_from_index = _rpythonic_function_(		"mono_metadata_declsec_from_index", ctypes.c_uint32, [
	("meta",		ctypes.POINTER(_MonoImage)),
	("idx",		ctypes.c_uint32),] )

mono_metadata_translate_token_index = _rpythonic_function_(		"mono_metadata_translate_token_index", ctypes.c_uint32, [
	("image",		ctypes.POINTER(_MonoImage)),
	("table",		ctypes.c_int),
	("idx",		ctypes.c_uint32),] )

mono_metadata_decode_table_row = _rpythonic_function_(		"mono_metadata_decode_table_row", ctypes.c_void_p, [
	("image",		ctypes.POINTER(_MonoImage)),
	("table",		ctypes.c_int),
	("idx",		ctypes.c_int),
	("res",		ctypes.POINTER(ctypes.c_uint32)),
	("res_size",		ctypes.c_int),] )

mono_metadata_decode_table_row_col = _rpythonic_function_(		"mono_metadata_decode_table_row_col", ctypes.c_uint32, [
	("image",		ctypes.POINTER(_MonoImage)),
	("table",		ctypes.c_int),
	("idx",		ctypes.c_int),
	("col",		ctypes.c_uint),] )

MonoStackWalk = _rpythonic_function_(		"MonoStackWalk", ctypes.c_int32, [
	("method",		ctypes.POINTER(_MonoMethod)),
	("native_offset",		ctypes.c_int32),
	("il_offset",		ctypes.c_int32),
	("managed",		ctypes.c_int32),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

mono_get_method = _rpythonic_function_(		"mono_get_method", ctypes.POINTER(_MonoMethod), [
	("image",		ctypes.POINTER(_MonoImage)),
	("token",		ctypes.c_uint32),
	("klass",		ctypes.POINTER(_MonoClass)),] )

mono_get_method_full = _rpythonic_function_(		"mono_get_method_full", ctypes.POINTER(_MonoMethod), [
	("image",		ctypes.POINTER(_MonoImage)),
	("token",		ctypes.c_uint32),
	("klass",		ctypes.POINTER(_MonoClass)),
	("context",		ctypes.POINTER(_MonoGenericContext)),] )

mono_get_method_constrained = _rpythonic_function_(		"mono_get_method_constrained", ctypes.POINTER(_MonoMethod), [
	("image",		ctypes.POINTER(_MonoImage)),
	("token",		ctypes.c_uint32),
	("constrained_class",		ctypes.POINTER(_MonoClass)),
	("context",		ctypes.POINTER(_MonoGenericContext)),
	("cil_method",		ctypes.POINTER(ctypes.POINTER(_MonoMethod))),] )

mono_free_method = _rpythonic_function_(		"mono_free_method", ctypes.c_void_p, [
	("method",		ctypes.POINTER(_MonoMethod)),] )

mono_method_get_signature_full = _rpythonic_function_(		"mono_method_get_signature_full", ctypes.POINTER(_MonoMethodSignature), [
	("method",		ctypes.POINTER(_MonoMethod)),
	("image",		ctypes.POINTER(_MonoImage)),
	("token",		ctypes.c_uint32),
	("context",		ctypes.POINTER(_MonoGenericContext)),] )

mono_method_get_signature = _rpythonic_function_(		"mono_method_get_signature", ctypes.POINTER(_MonoMethodSignature), [
	("method",		ctypes.POINTER(_MonoMethod)),
	("image",		ctypes.POINTER(_MonoImage)),
	("token",		ctypes.c_uint32),] )

mono_method_signature = _rpythonic_function_(		"mono_method_signature", ctypes.POINTER(_MonoMethodSignature), [
	("method",		ctypes.POINTER(_MonoMethod)),] )

mono_method_get_header = _rpythonic_function_(		"mono_method_get_header", ctypes.POINTER(_MonoMethodHeader), [
	("method",		ctypes.POINTER(_MonoMethod)),] )

mono_method_get_name = _rpythonic_function_(		"mono_method_get_name", ctypes.POINTER(ctypes.c_char), [
	("method",		ctypes.POINTER(_MonoMethod)),] )

mono_method_get_class = _rpythonic_function_(		"mono_method_get_class", ctypes.POINTER(_MonoClass), [
	("method",		ctypes.POINTER(_MonoMethod)),] )

mono_method_get_token = _rpythonic_function_(		"mono_method_get_token", ctypes.c_uint32, [
	("method",		ctypes.POINTER(_MonoMethod)),] )

mono_method_get_flags = _rpythonic_function_(		"mono_method_get_flags", ctypes.c_uint32, [
	("method",		ctypes.POINTER(_MonoMethod)),
	("iflags",		ctypes.POINTER(ctypes.c_uint32)),] )

mono_method_get_index = _rpythonic_function_(		"mono_method_get_index", ctypes.c_uint32, [
	("method",		ctypes.POINTER(_MonoMethod)),] )

mono_load_image = _rpythonic_function_(		"mono_load_image", ctypes.POINTER(_MonoImage), [
	("fname",		ctypes.POINTER(ctypes.c_char)),
	("status",		ctypes.POINTER(ctypes.c_int)),] )

mono_add_internal_call = _rpythonic_function_(		"mono_add_internal_call", ctypes.c_void_p, [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("method",		ctypes.POINTER(ctypes.c_void_p)),] )

mono_lookup_internal_call = _rpythonic_function_(		"mono_lookup_internal_call", ctypes.POINTER(ctypes.c_void_p), [
	("method",		ctypes.POINTER(_MonoMethod)),] )

mono_dllmap_insert = _rpythonic_function_(		"mono_dllmap_insert", ctypes.c_void_p, [
	("assembly",		ctypes.POINTER(_MonoImage)),
	("dll",		ctypes.POINTER(ctypes.c_char)),
	("func",		ctypes.POINTER(ctypes.c_char)),
	("tdll",		ctypes.POINTER(ctypes.c_char)),
	("tfunc",		ctypes.POINTER(ctypes.c_char)),] )

mono_lookup_pinvoke_call = _rpythonic_function_(		"mono_lookup_pinvoke_call", ctypes.POINTER(ctypes.c_void_p), [
	("method",		ctypes.POINTER(_MonoMethod)),
	("exc_class",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("exc_arg",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

mono_method_get_param_names = _rpythonic_function_(		"mono_method_get_param_names", ctypes.c_void_p, [
	("method",		ctypes.POINTER(_MonoMethod)),
	("names",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

mono_method_get_param_token = _rpythonic_function_(		"mono_method_get_param_token", ctypes.c_uint32, [
	("method",		ctypes.POINTER(_MonoMethod)),
	("idx",		ctypes.c_int),] )

mono_method_get_marshal_info = _rpythonic_function_(		"mono_method_get_marshal_info", ctypes.c_void_p, [
	("method",		ctypes.POINTER(_MonoMethod)),
	("mspecs",		ctypes.POINTER(ctypes.POINTER(MonoMarshalSpec))),] )

mono_method_has_marshal_info = _rpythonic_function_(		"mono_method_has_marshal_info", ctypes.c_int32, [
	("method",		ctypes.POINTER(_MonoMethod)),] )

mono_method_get_last_managed = _rpythonic_function_(		"mono_method_get_last_managed", ctypes.POINTER(_MonoMethod), [] )

mono_stack_walk = _rpythonic_function_(		"mono_stack_walk", ctypes.c_void_p, [
	("func",		ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(_MonoMethod),ctypes.c_int32,ctypes.c_int32,ctypes.c_int32,ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

mono_stack_walk_no_il = _rpythonic_function_(		"mono_stack_walk_no_il", ctypes.c_void_p, [
	("func",		ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(_MonoMethod),ctypes.c_int32,ctypes.c_int32,ctypes.c_int32,ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

mono_class_get = _rpythonic_function_(		"mono_class_get", ctypes.POINTER(_MonoClass), [
	("image",		ctypes.POINTER(_MonoImage)),
	("type_token",		ctypes.c_uint32),] )

mono_class_get_full = _rpythonic_function_(		"mono_class_get_full", ctypes.POINTER(_MonoClass), [
	("image",		ctypes.POINTER(_MonoImage)),
	("type_token",		ctypes.c_uint32),
	("context",		ctypes.POINTER(_MonoGenericContext)),] )

mono_class_init = _rpythonic_function_(		"mono_class_init", ctypes.c_int32, [
	("klass",		ctypes.POINTER(_MonoClass)),] )

mono_class_vtable = _rpythonic_function_(		"mono_class_vtable", ctypes.POINTER(MonoVTable), [
	("domain",		ctypes.POINTER(_MonoDomain)),
	("klass",		ctypes.POINTER(_MonoClass)),] )

mono_class_from_name = _rpythonic_function_(		"mono_class_from_name", ctypes.POINTER(_MonoClass), [
	("image",		ctypes.POINTER(_MonoImage)),
	("name_space",		ctypes.POINTER(ctypes.c_char)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

mono_class_from_name_case = _rpythonic_function_(		"mono_class_from_name_case", ctypes.POINTER(_MonoClass), [
	("image",		ctypes.POINTER(_MonoImage)),
	("name_space",		ctypes.POINTER(ctypes.c_char)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

mono_class_get_method_from_name_flags = _rpythonic_function_(		"mono_class_get_method_from_name_flags", ctypes.POINTER(_MonoMethod), [
	("klass",		ctypes.POINTER(_MonoClass)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("param_count",		ctypes.c_int),
	("flags",		ctypes.c_int),] )

mono_class_from_typeref = _rpythonic_function_(		"mono_class_from_typeref", ctypes.POINTER(_MonoClass), [
	("image",		ctypes.POINTER(_MonoImage)),
	("type_token",		ctypes.c_uint32),] )

mono_class_from_generic_parameter = _rpythonic_function_(		"mono_class_from_generic_parameter", ctypes.POINTER(_MonoClass), [
	("param",		ctypes.POINTER(_MonoGenericParam)),
	("image",		ctypes.POINTER(_MonoImage)),
	("is_mvar",		ctypes.c_int32),] )

mono_class_inflate_generic_type = _rpythonic_function_(		"mono_class_inflate_generic_type", ctypes.POINTER(_MonoType), [
	("C_type",		ctypes.POINTER(_MonoType)),
	("context",		ctypes.POINTER(_MonoGenericContext)),] )

mono_class_inflate_generic_method = _rpythonic_function_(		"mono_class_inflate_generic_method", ctypes.POINTER(_MonoMethod), [
	("method",		ctypes.POINTER(_MonoMethod)),
	("context",		ctypes.POINTER(_MonoGenericContext)),] )

mono_get_inflated_method = _rpythonic_function_(		"mono_get_inflated_method", ctypes.POINTER(_MonoMethod), [
	("method",		ctypes.POINTER(_MonoMethod)),] )

mono_field_from_token = _rpythonic_function_(		"mono_field_from_token", ctypes.POINTER(_MonoClassField), [
	("image",		ctypes.POINTER(_MonoImage)),
	("token",		ctypes.c_uint32),
	("retklass",		ctypes.POINTER(ctypes.POINTER(_MonoClass))),
	("context",		ctypes.POINTER(_MonoGenericContext)),] )

mono_bounded_array_class_get = _rpythonic_function_(		"mono_bounded_array_class_get", ctypes.POINTER(_MonoClass), [
	("element_class",		ctypes.POINTER(_MonoClass)),
	("rank",		ctypes.c_uint32),
	("bounded",		ctypes.c_int32),] )

mono_array_class_get = _rpythonic_function_(		"mono_array_class_get", ctypes.POINTER(_MonoClass), [
	("element_class",		ctypes.POINTER(_MonoClass)),
	("rank",		ctypes.c_uint32),] )

mono_ptr_class_get = _rpythonic_function_(		"mono_ptr_class_get", ctypes.POINTER(_MonoClass), [
	("C_type",		ctypes.POINTER(_MonoType)),] )

mono_class_get_field = _rpythonic_function_(		"mono_class_get_field", ctypes.POINTER(_MonoClassField), [
	("klass",		ctypes.POINTER(_MonoClass)),
	("field_token",		ctypes.c_uint32),] )

mono_class_get_field_from_name = _rpythonic_function_(		"mono_class_get_field_from_name", ctypes.POINTER(_MonoClassField), [
	("klass",		ctypes.POINTER(_MonoClass)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

mono_class_get_field_token = _rpythonic_function_(		"mono_class_get_field_token", ctypes.c_uint32, [
	("field",		ctypes.POINTER(_MonoClassField)),] )

mono_class_get_event_token = _rpythonic_function_(		"mono_class_get_event_token", ctypes.c_uint32, [
	("event",		ctypes.POINTER(_MonoEvent)),] )

mono_class_get_property_from_name = _rpythonic_function_(		"mono_class_get_property_from_name", ctypes.POINTER(_MonoProperty), [
	("klass",		ctypes.POINTER(_MonoClass)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

mono_class_get_property_token = _rpythonic_function_(		"mono_class_get_property_token", ctypes.c_uint32, [
	("prop",		ctypes.POINTER(_MonoProperty)),] )

mono_array_element_size = _rpythonic_function_(		"mono_array_element_size", ctypes.c_int32, [
	("ac",		ctypes.POINTER(_MonoClass)),] )

mono_class_instance_size = _rpythonic_function_(		"mono_class_instance_size", ctypes.c_int32, [
	("klass",		ctypes.POINTER(_MonoClass)),] )

mono_class_array_element_size = _rpythonic_function_(		"mono_class_array_element_size", ctypes.c_int32, [
	("klass",		ctypes.POINTER(_MonoClass)),] )

mono_class_data_size = _rpythonic_function_(		"mono_class_data_size", ctypes.c_int32, [
	("klass",		ctypes.POINTER(_MonoClass)),] )

mono_class_value_size = _rpythonic_function_(		"mono_class_value_size", ctypes.c_int32, [
	("klass",		ctypes.POINTER(_MonoClass)),
	("align",		ctypes.POINTER(ctypes.c_uint32)),] )

mono_class_min_align = _rpythonic_function_(		"mono_class_min_align", ctypes.c_int32, [
	("klass",		ctypes.POINTER(_MonoClass)),] )

mono_class_from_mono_type = _rpythonic_function_(		"mono_class_from_mono_type", ctypes.POINTER(_MonoClass), [
	("C_type",		ctypes.POINTER(_MonoType)),] )

mono_class_is_subclass_of = _rpythonic_function_(		"mono_class_is_subclass_of", ctypes.c_int32, [
	("klass",		ctypes.POINTER(_MonoClass)),
	("klassc",		ctypes.POINTER(_MonoClass)),
	("check_interfaces",		ctypes.c_int32),] )

mono_class_is_assignable_from = _rpythonic_function_(		"mono_class_is_assignable_from", ctypes.c_int32, [
	("klass",		ctypes.POINTER(_MonoClass)),
	("oklass",		ctypes.POINTER(_MonoClass)),] )

mono_ldtoken = _rpythonic_function_(		"mono_ldtoken", ctypes.POINTER(ctypes.c_void_p), [
	("image",		ctypes.POINTER(_MonoImage)),
	("token",		ctypes.c_uint32),
	("retclass",		ctypes.POINTER(ctypes.POINTER(_MonoClass))),
	("context",		ctypes.POINTER(_MonoGenericContext)),] )

mono_type_get_name = _rpythonic_function_(		"mono_type_get_name", ctypes.POINTER(ctypes.c_char), [
	("C_type",		ctypes.POINTER(_MonoType)),] )

mono_type_get_underlying_type = _rpythonic_function_(		"mono_type_get_underlying_type", ctypes.POINTER(_MonoType), [
	("C_type",		ctypes.POINTER(_MonoType)),] )

mono_class_get_image = _rpythonic_function_(		"mono_class_get_image", ctypes.POINTER(_MonoImage), [
	("klass",		ctypes.POINTER(_MonoClass)),] )

mono_class_get_element_class = _rpythonic_function_(		"mono_class_get_element_class", ctypes.POINTER(_MonoClass), [
	("klass",		ctypes.POINTER(_MonoClass)),] )

mono_class_is_valuetype = _rpythonic_function_(		"mono_class_is_valuetype", ctypes.c_int32, [
	("klass",		ctypes.POINTER(_MonoClass)),] )

mono_class_is_enum = _rpythonic_function_(		"mono_class_is_enum", ctypes.c_int32, [
	("klass",		ctypes.POINTER(_MonoClass)),] )

mono_class_enum_basetype = _rpythonic_function_(		"mono_class_enum_basetype", ctypes.POINTER(_MonoType), [
	("klass",		ctypes.POINTER(_MonoClass)),] )

mono_class_get_parent = _rpythonic_function_(		"mono_class_get_parent", ctypes.POINTER(_MonoClass), [
	("klass",		ctypes.POINTER(_MonoClass)),] )

mono_class_get_nesting_type = _rpythonic_function_(		"mono_class_get_nesting_type", ctypes.POINTER(_MonoClass), [
	("klass",		ctypes.POINTER(_MonoClass)),] )

mono_class_get_rank = _rpythonic_function_(		"mono_class_get_rank", ctypes.c_int, [
	("klass",		ctypes.POINTER(_MonoClass)),] )

mono_class_get_flags = _rpythonic_function_(		"mono_class_get_flags", ctypes.c_uint32, [
	("klass",		ctypes.POINTER(_MonoClass)),] )

mono_class_get_name = _rpythonic_function_(		"mono_class_get_name", ctypes.POINTER(ctypes.c_char), [
	("klass",		ctypes.POINTER(_MonoClass)),] )

mono_class_get_namespace = _rpythonic_function_(		"mono_class_get_namespace", ctypes.POINTER(ctypes.c_char), [
	("klass",		ctypes.POINTER(_MonoClass)),] )

mono_class_get_type = _rpythonic_function_(		"mono_class_get_type", ctypes.POINTER(_MonoType), [
	("klass",		ctypes.POINTER(_MonoClass)),] )

mono_class_get_type_token = _rpythonic_function_(		"mono_class_get_type_token", ctypes.c_uint32, [
	("klass",		ctypes.POINTER(_MonoClass)),] )

mono_class_get_byref_type = _rpythonic_function_(		"mono_class_get_byref_type", ctypes.POINTER(_MonoType), [
	("klass",		ctypes.POINTER(_MonoClass)),] )

mono_class_num_fields = _rpythonic_function_(		"mono_class_num_fields", ctypes.c_int, [
	("klass",		ctypes.POINTER(_MonoClass)),] )

mono_class_num_methods = _rpythonic_function_(		"mono_class_num_methods", ctypes.c_int, [
	("klass",		ctypes.POINTER(_MonoClass)),] )

mono_class_num_properties = _rpythonic_function_(		"mono_class_num_properties", ctypes.c_int, [
	("klass",		ctypes.POINTER(_MonoClass)),] )

mono_class_num_events = _rpythonic_function_(		"mono_class_num_events", ctypes.c_int, [
	("klass",		ctypes.POINTER(_MonoClass)),] )

mono_class_get_fields = _rpythonic_function_(		"mono_class_get_fields", ctypes.POINTER(_MonoClassField), [
	("klass",		ctypes.POINTER(_MonoClass)),
	("iter",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

mono_class_get_methods = _rpythonic_function_(		"mono_class_get_methods", ctypes.POINTER(_MonoMethod), [
	("klass",		ctypes.POINTER(_MonoClass)),
	("iter",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

mono_class_get_properties = _rpythonic_function_(		"mono_class_get_properties", ctypes.POINTER(_MonoProperty), [
	("klass",		ctypes.POINTER(_MonoClass)),
	("iter",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

mono_class_get_events = _rpythonic_function_(		"mono_class_get_events", ctypes.POINTER(_MonoEvent), [
	("klass",		ctypes.POINTER(_MonoClass)),
	("iter",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

mono_class_get_interfaces = _rpythonic_function_(		"mono_class_get_interfaces", ctypes.POINTER(_MonoClass), [
	("klass",		ctypes.POINTER(_MonoClass)),
	("iter",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

mono_class_get_nested_types = _rpythonic_function_(		"mono_class_get_nested_types", ctypes.POINTER(_MonoClass), [
	("klass",		ctypes.POINTER(_MonoClass)),
	("iter",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

mono_field_get_name = _rpythonic_function_(		"mono_field_get_name", ctypes.POINTER(ctypes.c_char), [
	("field",		ctypes.POINTER(_MonoClassField)),] )

mono_field_get_type = _rpythonic_function_(		"mono_field_get_type", ctypes.POINTER(_MonoType), [
	("field",		ctypes.POINTER(_MonoClassField)),] )

mono_field_get_parent = _rpythonic_function_(		"mono_field_get_parent", ctypes.POINTER(_MonoClass), [
	("field",		ctypes.POINTER(_MonoClassField)),] )

mono_field_get_flags = _rpythonic_function_(		"mono_field_get_flags", ctypes.c_uint32, [
	("field",		ctypes.POINTER(_MonoClassField)),] )

mono_field_get_offset = _rpythonic_function_(		"mono_field_get_offset", ctypes.c_uint32, [
	("field",		ctypes.POINTER(_MonoClassField)),] )

mono_field_get_data = _rpythonic_function_(		"mono_field_get_data", ctypes.POINTER(ctypes.c_char), [
	("field",		ctypes.POINTER(_MonoClassField)),] )

mono_property_get_name = _rpythonic_function_(		"mono_property_get_name", ctypes.POINTER(ctypes.c_char), [
	("prop",		ctypes.POINTER(_MonoProperty)),] )

mono_property_get_set_method = _rpythonic_function_(		"mono_property_get_set_method", ctypes.POINTER(_MonoMethod), [
	("prop",		ctypes.POINTER(_MonoProperty)),] )

mono_property_get_get_method = _rpythonic_function_(		"mono_property_get_get_method", ctypes.POINTER(_MonoMethod), [
	("prop",		ctypes.POINTER(_MonoProperty)),] )

mono_property_get_parent = _rpythonic_function_(		"mono_property_get_parent", ctypes.POINTER(_MonoClass), [
	("prop",		ctypes.POINTER(_MonoProperty)),] )

mono_property_get_flags = _rpythonic_function_(		"mono_property_get_flags", ctypes.c_uint32, [
	("prop",		ctypes.POINTER(_MonoProperty)),] )

mono_event_get_name = _rpythonic_function_(		"mono_event_get_name", ctypes.POINTER(ctypes.c_char), [
	("event",		ctypes.POINTER(_MonoEvent)),] )

mono_event_get_add_method = _rpythonic_function_(		"mono_event_get_add_method", ctypes.POINTER(_MonoMethod), [
	("event",		ctypes.POINTER(_MonoEvent)),] )

mono_event_get_remove_method = _rpythonic_function_(		"mono_event_get_remove_method", ctypes.POINTER(_MonoMethod), [
	("event",		ctypes.POINTER(_MonoEvent)),] )

mono_event_get_raise_method = _rpythonic_function_(		"mono_event_get_raise_method", ctypes.POINTER(_MonoMethod), [
	("event",		ctypes.POINTER(_MonoEvent)),] )

mono_event_get_parent = _rpythonic_function_(		"mono_event_get_parent", ctypes.POINTER(_MonoClass), [
	("event",		ctypes.POINTER(_MonoEvent)),] )

mono_event_get_flags = _rpythonic_function_(		"mono_event_get_flags", ctypes.c_uint32, [
	("event",		ctypes.POINTER(_MonoEvent)),] )

mono_class_get_method_from_name = _rpythonic_function_(		"mono_class_get_method_from_name", ctypes.POINTER(_MonoMethod), [
	("klass",		ctypes.POINTER(_MonoClass)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("param_count",		ctypes.c_int),] )

mono_class_name_from_token = _rpythonic_function_(		"mono_class_name_from_token", ctypes.POINTER(ctypes.c_char), [
	("image",		ctypes.POINTER(_MonoImage)),
	("type_token",		ctypes.c_uint32),] )

mono_method_can_access_field = _rpythonic_function_(		"mono_method_can_access_field", ctypes.c_int32, [
	("method",		ctypes.POINTER(_MonoMethod)),
	("field",		ctypes.POINTER(_MonoClassField)),] )

mono_method_can_access_method = _rpythonic_function_(		"mono_method_can_access_method", ctypes.c_int32, [
	("method",		ctypes.POINTER(_MonoMethod)),
	("called",		ctypes.POINTER(_MonoMethod)),] )

mono_error_init = _rpythonic_function_(		"mono_error_init", ctypes.c_void_p, [
	("error",		ctypes.POINTER(MonoError)),] )

mono_error_init_flags = _rpythonic_function_(		"mono_error_init_flags", ctypes.c_void_p, [
	("error",		ctypes.POINTER(MonoError)),
	("flags",		ctypes.c_ushort),] )

mono_error_cleanup = _rpythonic_function_(		"mono_error_cleanup", ctypes.c_void_p, [
	("error",		ctypes.POINTER(MonoError)),] )

mono_error_ok = _rpythonic_function_(		"mono_error_ok", ctypes.c_int32, [
	("error",		ctypes.POINTER(MonoError)),] )

mono_error_get_error_code = _rpythonic_function_(		"mono_error_get_error_code", ctypes.c_ushort, [
	("error",		ctypes.POINTER(MonoError)),] )

mono_error_get_message = _rpythonic_function_(		"mono_error_get_message", ctypes.POINTER(ctypes.c_char), [
	("error",		ctypes.POINTER(MonoError)),] )

MonoInvokeFunc = _rpythonic_function_(		"MonoInvokeFunc", ctypes.POINTER(MonoObject), [
	("method",		ctypes.POINTER(_MonoMethod)),
	("obj",		ctypes.POINTER(ctypes.c_void_p)),
	("params",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("exc",		ctypes.POINTER(ctypes.POINTER(MonoObject))),] )

MonoCompileFunc = _rpythonic_function_(		"MonoCompileFunc", ctypes.POINTER(ctypes.c_void_p), [
	("method",		ctypes.POINTER(_MonoMethod)),] )

MonoMainThreadFunc = _rpythonic_function_(		"MonoMainThreadFunc", ctypes.c_void_p, [("user_data",		ctypes.c_void_p)] )

mono_string_chars = _rpythonic_function_(		"mono_string_chars", ctypes.POINTER(ctypes.c_uint16), [
	("s",		ctypes.POINTER(_MonoString)),] )

mono_string_length = _rpythonic_function_(		"mono_string_length", ctypes.c_int, [
	("s",		ctypes.POINTER(_MonoString)),] )

mono_object_new = _rpythonic_function_(		"mono_object_new", ctypes.POINTER(MonoObject), [
	("domain",		ctypes.POINTER(_MonoDomain)),
	("klass",		ctypes.POINTER(_MonoClass)),] )

mono_object_new_specific = _rpythonic_function_(		"mono_object_new_specific", ctypes.POINTER(MonoObject), [
	("vtable",		ctypes.POINTER(MonoVTable)),] )

mono_object_new_fast = _rpythonic_function_(		"mono_object_new_fast", ctypes.POINTER(MonoObject), [
	("vtable",		ctypes.POINTER(MonoVTable)),] )

mono_object_new_alloc_specific = _rpythonic_function_(		"mono_object_new_alloc_specific", ctypes.POINTER(MonoObject), [
	("vtable",		ctypes.POINTER(MonoVTable)),] )

mono_object_new_from_token = _rpythonic_function_(		"mono_object_new_from_token", ctypes.POINTER(MonoObject), [
	("domain",		ctypes.POINTER(_MonoDomain)),
	("image",		ctypes.POINTER(_MonoImage)),
	("token",		ctypes.c_uint32),] )

mono_array_new = _rpythonic_function_(		"mono_array_new", ctypes.POINTER(_MonoArray), [
	("domain",		ctypes.POINTER(_MonoDomain)),
	("eclass",		ctypes.POINTER(_MonoClass)),
	("n",		ctypes.c_uint),] )

mono_array_new_full = _rpythonic_function_(		"mono_array_new_full", ctypes.POINTER(_MonoArray), [
	("domain",		ctypes.POINTER(_MonoDomain)),
	("array_class",		ctypes.POINTER(_MonoClass)),
	("lengths",		ctypes.POINTER(ctypes.c_uint)),
	("lower_bounds",		ctypes.POINTER(ctypes.c_int)),] )

mono_array_new_specific = _rpythonic_function_(		"mono_array_new_specific", ctypes.POINTER(_MonoArray), [
	("vtable",		ctypes.POINTER(MonoVTable)),
	("n",		ctypes.c_uint),] )

mono_array_clone = _rpythonic_function_(		"mono_array_clone", ctypes.POINTER(_MonoArray), [
	("array",		ctypes.POINTER(_MonoArray)),] )

mono_array_addr_with_size = _rpythonic_function_(		"mono_array_addr_with_size", ctypes.POINTER(ctypes.c_char), [
	("array",		ctypes.POINTER(_MonoArray)),
	("size",		ctypes.c_int),
	("idx",		ctypes.c_uint),] )

mono_array_length = _rpythonic_function_(		"mono_array_length", ctypes.c_uint, [
	("array",		ctypes.POINTER(_MonoArray)),] )

mono_string_new_utf16 = _rpythonic_function_(		"mono_string_new_utf16", ctypes.POINTER(_MonoString), [
	("domain",		ctypes.POINTER(_MonoDomain)),
	("text",		ctypes.POINTER(ctypes.c_uint16)),
	("C_len",		ctypes.c_int32),] )

mono_string_new_size = _rpythonic_function_(		"mono_string_new_size", ctypes.POINTER(_MonoString), [
	("domain",		ctypes.POINTER(_MonoDomain)),
	("C_len",		ctypes.c_int32),] )

mono_ldstr = _rpythonic_function_(		"mono_ldstr", ctypes.POINTER(_MonoString), [
	("domain",		ctypes.POINTER(_MonoDomain)),
	("image",		ctypes.POINTER(_MonoImage)),
	("str_index",		ctypes.c_uint32),] )

mono_string_is_interned = _rpythonic_function_(		"mono_string_is_interned", ctypes.POINTER(_MonoString), [
	("C_str",		ctypes.POINTER(_MonoString)),] )

mono_string_intern = _rpythonic_function_(		"mono_string_intern", ctypes.POINTER(_MonoString), [
	("C_str",		ctypes.POINTER(_MonoString)),] )

mono_string_new = _rpythonic_function_(		"mono_string_new", ctypes.POINTER(_MonoString), [
	("domain",		ctypes.POINTER(_MonoDomain)),
	("text",		ctypes.POINTER(ctypes.c_char)),] )

mono_string_new_wrapper = _rpythonic_function_(		"mono_string_new_wrapper", ctypes.POINTER(_MonoString), [
	("text",		ctypes.POINTER(ctypes.c_char)),] )

mono_string_new_len = _rpythonic_function_(		"mono_string_new_len", ctypes.POINTER(_MonoString), [
	("domain",		ctypes.POINTER(_MonoDomain)),
	("text",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_uint),] )

mono_string_to_utf8 = _rpythonic_function_(		"mono_string_to_utf8", ctypes.POINTER(ctypes.c_char), [
	("string_obj",		ctypes.POINTER(_MonoString)),] )

mono_string_to_utf8_checked = _rpythonic_function_(		"mono_string_to_utf8_checked", ctypes.POINTER(ctypes.c_char), [
	("string_obj",		ctypes.POINTER(_MonoString)),
	("error",		ctypes.POINTER(MonoError)),] )

mono_string_to_utf16 = _rpythonic_function_(		"mono_string_to_utf16", ctypes.POINTER(ctypes.c_uint16), [
	("string_obj",		ctypes.POINTER(_MonoString)),] )

mono_string_from_utf16 = _rpythonic_function_(		"mono_string_from_utf16", ctypes.POINTER(_MonoString), [
	("data",		ctypes.POINTER(ctypes.c_uint16)),] )

mono_string_equal = _rpythonic_function_(		"mono_string_equal", ctypes.c_int32, [
	("s1",		ctypes.POINTER(_MonoString)),
	("s2",		ctypes.POINTER(_MonoString)),] )

mono_string_hash = _rpythonic_function_(		"mono_string_hash", ctypes.c_uint, [
	("s",		ctypes.POINTER(_MonoString)),] )

mono_object_hash = _rpythonic_function_(		"mono_object_hash", ctypes.c_int, [
	("obj",		ctypes.POINTER(MonoObject)),] )

mono_object_to_string = _rpythonic_function_(		"mono_object_to_string", ctypes.POINTER(_MonoString), [
	("obj",		ctypes.POINTER(MonoObject)),
	("exc",		ctypes.POINTER(ctypes.POINTER(MonoObject))),] )

mono_value_box = _rpythonic_function_(		"mono_value_box", ctypes.POINTER(MonoObject), [
	("domain",		ctypes.POINTER(_MonoDomain)),
	("klass",		ctypes.POINTER(_MonoClass)),
	("val",		ctypes.POINTER(ctypes.c_void_p)),] )

mono_value_copy = _rpythonic_function_(		"mono_value_copy", ctypes.c_void_p, [
	("dest",		ctypes.POINTER(ctypes.c_void_p)),
	("src",		ctypes.POINTER(ctypes.c_void_p)),
	("klass",		ctypes.POINTER(_MonoClass)),] )

mono_value_copy_array = _rpythonic_function_(		"mono_value_copy_array", ctypes.c_void_p, [
	("dest",		ctypes.POINTER(_MonoArray)),
	("dest_idx",		ctypes.c_int),
	("src",		ctypes.POINTER(ctypes.c_void_p)),
	("count",		ctypes.c_int),] )

mono_object_get_domain = _rpythonic_function_(		"mono_object_get_domain", ctypes.POINTER(_MonoDomain), [
	("obj",		ctypes.POINTER(MonoObject)),] )

mono_object_get_class = _rpythonic_function_(		"mono_object_get_class", ctypes.POINTER(_MonoClass), [
	("obj",		ctypes.POINTER(MonoObject)),] )

mono_object_unbox = _rpythonic_function_(		"mono_object_unbox", ctypes.POINTER(ctypes.c_void_p), [
	("obj",		ctypes.POINTER(MonoObject)),] )

mono_object_clone = _rpythonic_function_(		"mono_object_clone", ctypes.POINTER(MonoObject), [
	("obj",		ctypes.POINTER(MonoObject)),] )

mono_object_isinst = _rpythonic_function_(		"mono_object_isinst", ctypes.POINTER(MonoObject), [
	("obj",		ctypes.POINTER(MonoObject)),
	("klass",		ctypes.POINTER(_MonoClass)),] )

mono_object_isinst_mbyref = _rpythonic_function_(		"mono_object_isinst_mbyref", ctypes.POINTER(MonoObject), [
	("obj",		ctypes.POINTER(MonoObject)),
	("klass",		ctypes.POINTER(_MonoClass)),] )

mono_object_castclass_mbyref = _rpythonic_function_(		"mono_object_castclass_mbyref", ctypes.POINTER(MonoObject), [
	("obj",		ctypes.POINTER(MonoObject)),
	("klass",		ctypes.POINTER(_MonoClass)),] )

mono_monitor_try_enter = _rpythonic_function_(		"mono_monitor_try_enter", ctypes.c_int32, [
	("obj",		ctypes.POINTER(MonoObject)),
	("ms",		ctypes.c_uint32),] )

mono_monitor_enter = _rpythonic_function_(		"mono_monitor_enter", ctypes.c_int32, [
	("obj",		ctypes.POINTER(MonoObject)),] )

mono_object_get_size = _rpythonic_function_(		"mono_object_get_size", ctypes.c_uint, [
	("o",		ctypes.POINTER(MonoObject)),] )

mono_monitor_exit = _rpythonic_function_(		"mono_monitor_exit", ctypes.c_void_p, [
	("obj",		ctypes.POINTER(MonoObject)),] )

mono_raise_exception = _rpythonic_function_(		"mono_raise_exception", ctypes.c_void_p, [
	("ex",		ctypes.POINTER(_MonoException)),] )

mono_runtime_object_init = _rpythonic_function_(		"mono_runtime_object_init", ctypes.c_void_p, [
	("this_obj",		ctypes.POINTER(MonoObject)),] )

mono_runtime_class_init = _rpythonic_function_(		"mono_runtime_class_init", ctypes.c_void_p, [
	("vtable",		ctypes.POINTER(MonoVTable)),] )

mono_object_get_virtual_method = _rpythonic_function_(		"mono_object_get_virtual_method", ctypes.POINTER(_MonoMethod), [
	("obj",		ctypes.POINTER(MonoObject)),
	("method",		ctypes.POINTER(_MonoMethod)),] )

mono_runtime_invoke = _rpythonic_function_(		"mono_runtime_invoke", ctypes.POINTER(MonoObject), [
	("method",		ctypes.POINTER(_MonoMethod)),
	("obj",		ctypes.POINTER(ctypes.c_void_p)),
	("params",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("exc",		ctypes.POINTER(ctypes.POINTER(MonoObject))),] )

mono_get_delegate_invoke = _rpythonic_function_(		"mono_get_delegate_invoke", ctypes.POINTER(_MonoMethod), [
	("klass",		ctypes.POINTER(_MonoClass)),] )

mono_runtime_delegate_invoke = _rpythonic_function_(		"mono_runtime_delegate_invoke", ctypes.POINTER(MonoObject), [
	("delegate",		ctypes.POINTER(MonoObject)),
	("params",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("exc",		ctypes.POINTER(ctypes.POINTER(MonoObject))),] )

mono_runtime_invoke_array = _rpythonic_function_(		"mono_runtime_invoke_array", ctypes.POINTER(MonoObject), [
	("method",		ctypes.POINTER(_MonoMethod)),
	("obj",		ctypes.POINTER(ctypes.c_void_p)),
	("params",		ctypes.POINTER(_MonoArray)),
	("exc",		ctypes.POINTER(ctypes.POINTER(MonoObject))),] )

mono_method_get_unmanaged_thunk = _rpythonic_function_(		"mono_method_get_unmanaged_thunk", ctypes.POINTER(ctypes.c_void_p), [
	("method",		ctypes.POINTER(_MonoMethod)),] )

mono_runtime_get_main_args = _rpythonic_function_(		"mono_runtime_get_main_args", ctypes.POINTER(_MonoArray), [] )

mono_runtime_exec_managed_code = _rpythonic_function_(		"mono_runtime_exec_managed_code", ctypes.c_void_p, [
	("domain",		ctypes.POINTER(_MonoDomain)),
	("main_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("main_args",		ctypes.POINTER(ctypes.c_void_p)),] )

mono_runtime_run_main = _rpythonic_function_(		"mono_runtime_run_main", ctypes.c_int, [
	("method",		ctypes.POINTER(_MonoMethod)),
	("argc",		ctypes.c_int),
	("argv",		ctypes.POINTER(ctypes.c_char)),
	("exc",		ctypes.POINTER(ctypes.POINTER(MonoObject))),] )

mono_runtime_exec_main = _rpythonic_function_(		"mono_runtime_exec_main", ctypes.c_int, [
	("method",		ctypes.POINTER(_MonoMethod)),
	("args",		ctypes.POINTER(_MonoArray)),
	("exc",		ctypes.POINTER(ctypes.POINTER(MonoObject))),] )

mono_load_remote_field = _rpythonic_function_(		"mono_load_remote_field", ctypes.POINTER(ctypes.c_void_p), [
	("this_obj",		ctypes.POINTER(MonoObject)),
	("klass",		ctypes.POINTER(_MonoClass)),
	("field",		ctypes.POINTER(_MonoClassField)),
	("res",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

mono_load_remote_field_new = _rpythonic_function_(		"mono_load_remote_field_new", ctypes.POINTER(MonoObject), [
	("this_obj",		ctypes.POINTER(MonoObject)),
	("klass",		ctypes.POINTER(_MonoClass)),
	("field",		ctypes.POINTER(_MonoClassField)),] )

mono_store_remote_field = _rpythonic_function_(		"mono_store_remote_field", ctypes.c_void_p, [
	("this_obj",		ctypes.POINTER(MonoObject)),
	("klass",		ctypes.POINTER(_MonoClass)),
	("field",		ctypes.POINTER(_MonoClassField)),
	("val",		ctypes.POINTER(ctypes.c_void_p)),] )

mono_store_remote_field_new = _rpythonic_function_(		"mono_store_remote_field_new", ctypes.c_void_p, [
	("this_obj",		ctypes.POINTER(MonoObject)),
	("klass",		ctypes.POINTER(_MonoClass)),
	("field",		ctypes.POINTER(_MonoClassField)),
	("arg",		ctypes.POINTER(MonoObject)),] )

mono_unhandled_exception = _rpythonic_function_(		"mono_unhandled_exception", ctypes.c_void_p, [
	("exc",		ctypes.POINTER(MonoObject)),] )

mono_print_unhandled_exception = _rpythonic_function_(		"mono_print_unhandled_exception", ctypes.c_void_p, [
	("exc",		ctypes.POINTER(MonoObject)),] )

mono_compile_method = _rpythonic_function_(		"mono_compile_method", ctypes.POINTER(ctypes.c_void_p), [
	("method",		ctypes.POINTER(_MonoMethod)),] )

mono_field_set_value = _rpythonic_function_(		"mono_field_set_value", ctypes.c_void_p, [
	("obj",		ctypes.POINTER(MonoObject)),
	("field",		ctypes.POINTER(_MonoClassField)),
	("value",		ctypes.POINTER(ctypes.c_void_p)),] )

mono_field_static_set_value = _rpythonic_function_(		"mono_field_static_set_value", ctypes.c_void_p, [
	("vt",		ctypes.POINTER(MonoVTable)),
	("field",		ctypes.POINTER(_MonoClassField)),
	("value",		ctypes.POINTER(ctypes.c_void_p)),] )

mono_field_get_value = _rpythonic_function_(		"mono_field_get_value", ctypes.c_void_p, [
	("obj",		ctypes.POINTER(MonoObject)),
	("field",		ctypes.POINTER(_MonoClassField)),
	("value",		ctypes.POINTER(ctypes.c_void_p)),] )

mono_field_static_get_value = _rpythonic_function_(		"mono_field_static_get_value", ctypes.c_void_p, [
	("vt",		ctypes.POINTER(MonoVTable)),
	("field",		ctypes.POINTER(_MonoClassField)),
	("value",		ctypes.POINTER(ctypes.c_void_p)),] )

mono_field_get_value_object = _rpythonic_function_(		"mono_field_get_value_object", ctypes.POINTER(MonoObject), [
	("domain",		ctypes.POINTER(_MonoDomain)),
	("field",		ctypes.POINTER(_MonoClassField)),
	("obj",		ctypes.POINTER(MonoObject)),] )

mono_property_set_value = _rpythonic_function_(		"mono_property_set_value", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(_MonoProperty)),
	("obj",		ctypes.POINTER(ctypes.c_void_p)),
	("params",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("exc",		ctypes.POINTER(ctypes.POINTER(MonoObject))),] )

mono_property_get_value = _rpythonic_function_(		"mono_property_get_value", ctypes.POINTER(MonoObject), [
	("prop",		ctypes.POINTER(_MonoProperty)),
	("obj",		ctypes.POINTER(ctypes.c_void_p)),
	("params",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("exc",		ctypes.POINTER(ctypes.POINTER(MonoObject))),] )

mono_gchandle_new = _rpythonic_function_(		"mono_gchandle_new", ctypes.c_uint32, [
	("obj",		ctypes.POINTER(MonoObject)),
	("pinned",		ctypes.c_int32),] )

mono_gchandle_new_weakref = _rpythonic_function_(		"mono_gchandle_new_weakref", ctypes.c_uint32, [
	("obj",		ctypes.POINTER(MonoObject)),
	("track_resurrection",		ctypes.c_int32),] )

mono_gchandle_get_target = _rpythonic_function_(		"mono_gchandle_get_target", ctypes.POINTER(MonoObject), [
	("gchandle",		ctypes.c_uint32),] )

mono_gchandle_free = _rpythonic_function_(		"mono_gchandle_free", ctypes.c_void_p, [
	("gchandle",		ctypes.c_uint32),] )

mono_gc_wbarrier_set_field = _rpythonic_function_(		"mono_gc_wbarrier_set_field", ctypes.c_void_p, [
	("obj",		ctypes.POINTER(MonoObject)),
	("field_ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("value",		ctypes.POINTER(MonoObject)),] )

mono_gc_wbarrier_set_arrayref = _rpythonic_function_(		"mono_gc_wbarrier_set_arrayref", ctypes.c_void_p, [
	("arr",		ctypes.POINTER(_MonoArray)),
	("slot_ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("value",		ctypes.POINTER(MonoObject)),] )

mono_gc_wbarrier_arrayref_copy = _rpythonic_function_(		"mono_gc_wbarrier_arrayref_copy", ctypes.c_void_p, [
	("dest_ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("src_ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("count",		ctypes.c_int),] )

mono_gc_wbarrier_generic_store = _rpythonic_function_(		"mono_gc_wbarrier_generic_store", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("value",		ctypes.POINTER(MonoObject)),] )

mono_gc_wbarrier_generic_nostore = _rpythonic_function_(		"mono_gc_wbarrier_generic_nostore", ctypes.c_void_p, [("ptr",		ctypes.c_void_p)] )

mono_gc_wbarrier_value_copy = _rpythonic_function_(		"mono_gc_wbarrier_value_copy", ctypes.c_void_p, [
	("dest",		ctypes.POINTER(ctypes.c_void_p)),
	("src",		ctypes.POINTER(ctypes.c_void_p)),
	("count",		ctypes.c_int),
	("klass",		ctypes.POINTER(_MonoClass)),] )

mono_gc_wbarrier_object_copy = _rpythonic_function_(		"mono_gc_wbarrier_object_copy", ctypes.c_void_p, [
	("obj",		ctypes.POINTER(MonoObject)),
	("src",		ctypes.POINTER(MonoObject)),] )

mono_reflection_parse_type = _rpythonic_function_(		"mono_reflection_parse_type", ctypes.c_int, [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("info",		ctypes.POINTER(MonoTypeNameParse)),] )

mono_reflection_get_type = _rpythonic_function_(		"mono_reflection_get_type", ctypes.POINTER(_MonoType), [
	("image",		ctypes.POINTER(_MonoImage)),
	("info",		ctypes.POINTER(MonoTypeNameParse)),
	("ignorecase",		ctypes.c_int32),
	("type_resolve",		ctypes.POINTER(ctypes.c_int32)),] )

mono_reflection_free_type_info = _rpythonic_function_(		"mono_reflection_free_type_info", ctypes.c_void_p, [
	("info",		ctypes.POINTER(MonoTypeNameParse)),] )

mono_reflection_type_from_name = _rpythonic_function_(		"mono_reflection_type_from_name", ctypes.POINTER(_MonoType), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("image",		ctypes.POINTER(_MonoImage)),] )

mono_reflection_get_token = _rpythonic_function_(		"mono_reflection_get_token", ctypes.c_uint32, [
	("obj",		ctypes.POINTER(MonoObject)),] )

mono_assembly_get_object = _rpythonic_function_(		"mono_assembly_get_object", ctypes.POINTER(_MonoReflectionAssembly), [
	("domain",		ctypes.POINTER(_MonoDomain)),
	("assembly",		ctypes.POINTER(_MonoAssembly)),] )

mono_module_get_object = _rpythonic_function_(		"mono_module_get_object", ctypes.POINTER(_MonoReflectionModule), [
	("domain",		ctypes.POINTER(_MonoDomain)),
	("image",		ctypes.POINTER(_MonoImage)),] )

mono_module_file_get_object = _rpythonic_function_(		"mono_module_file_get_object", ctypes.POINTER(_MonoReflectionModule), [
	("domain",		ctypes.POINTER(_MonoDomain)),
	("image",		ctypes.POINTER(_MonoImage)),
	("table_index",		ctypes.c_int),] )

mono_type_get_object = _rpythonic_function_(		"mono_type_get_object", ctypes.POINTER(_MonoReflectionType), [
	("domain",		ctypes.POINTER(_MonoDomain)),
	("C_type",		ctypes.POINTER(_MonoType)),] )

mono_method_get_object = _rpythonic_function_(		"mono_method_get_object", ctypes.POINTER(_MonoReflectionMethod), [
	("domain",		ctypes.POINTER(_MonoDomain)),
	("method",		ctypes.POINTER(_MonoMethod)),
	("refclass",		ctypes.POINTER(_MonoClass)),] )

mono_field_get_object = _rpythonic_function_(		"mono_field_get_object", ctypes.POINTER(_MonoReflectionField), [
	("domain",		ctypes.POINTER(_MonoDomain)),
	("klass",		ctypes.POINTER(_MonoClass)),
	("field",		ctypes.POINTER(_MonoClassField)),] )

mono_property_get_object = _rpythonic_function_(		"mono_property_get_object", ctypes.POINTER(_MonoReflectionProperty), [
	("domain",		ctypes.POINTER(_MonoDomain)),
	("klass",		ctypes.POINTER(_MonoClass)),
	("property",		ctypes.POINTER(_MonoProperty)),] )

mono_event_get_object = _rpythonic_function_(		"mono_event_get_object", ctypes.POINTER(_MonoReflectionEvent), [
	("domain",		ctypes.POINTER(_MonoDomain)),
	("klass",		ctypes.POINTER(_MonoClass)),
	("event",		ctypes.POINTER(_MonoEvent)),] )

mono_param_get_objects = _rpythonic_function_(		"mono_param_get_objects", ctypes.POINTER(_MonoArray), [
	("domain",		ctypes.POINTER(_MonoDomain)),
	("method",		ctypes.POINTER(_MonoMethod)),] )

mono_method_body_get_object = _rpythonic_function_(		"mono_method_body_get_object", ctypes.POINTER(_MonoReflectionMethodBody), [
	("domain",		ctypes.POINTER(_MonoDomain)),
	("method",		ctypes.POINTER(_MonoMethod)),] )

mono_get_dbnull_object = _rpythonic_function_(		"mono_get_dbnull_object", ctypes.POINTER(MonoObject), [
	("domain",		ctypes.POINTER(_MonoDomain)),] )

mono_reflection_get_custom_attrs_by_type = _rpythonic_function_(		"mono_reflection_get_custom_attrs_by_type", ctypes.POINTER(_MonoArray), [
	("obj",		ctypes.POINTER(MonoObject)),
	("attr_klass",		ctypes.POINTER(_MonoClass)),
	("error",		ctypes.POINTER(MonoError)),] )

mono_reflection_get_custom_attrs = _rpythonic_function_(		"mono_reflection_get_custom_attrs", ctypes.POINTER(_MonoArray), [
	("obj",		ctypes.POINTER(MonoObject)),] )

mono_reflection_get_custom_attrs_data = _rpythonic_function_(		"mono_reflection_get_custom_attrs_data", ctypes.POINTER(_MonoArray), [
	("obj",		ctypes.POINTER(MonoObject)),] )

mono_reflection_get_custom_attrs_blob = _rpythonic_function_(		"mono_reflection_get_custom_attrs_blob", ctypes.POINTER(_MonoArray), [
	("assembly",		ctypes.POINTER(_MonoReflectionAssembly)),
	("ctor",		ctypes.POINTER(MonoObject)),
	("ctorArgs",		ctypes.POINTER(_MonoArray)),
	("properties",		ctypes.POINTER(_MonoArray)),
	("porpValues",		ctypes.POINTER(_MonoArray)),
	("fields",		ctypes.POINTER(_MonoArray)),
	("fieldValues",		ctypes.POINTER(_MonoArray)),] )

mono_reflection_get_custom_attrs_info = _rpythonic_function_(		"mono_reflection_get_custom_attrs_info", ctypes.POINTER(MonoCustomAttrInfo), [
	("obj",		ctypes.POINTER(MonoObject)),] )

mono_custom_attrs_construct = _rpythonic_function_(		"mono_custom_attrs_construct", ctypes.POINTER(_MonoArray), [
	("cinfo",		ctypes.POINTER(MonoCustomAttrInfo)),] )

mono_custom_attrs_from_index = _rpythonic_function_(		"mono_custom_attrs_from_index", ctypes.POINTER(MonoCustomAttrInfo), [
	("image",		ctypes.POINTER(_MonoImage)),
	("idx",		ctypes.c_uint32),] )

mono_custom_attrs_from_method = _rpythonic_function_(		"mono_custom_attrs_from_method", ctypes.POINTER(MonoCustomAttrInfo), [
	("method",		ctypes.POINTER(_MonoMethod)),] )

mono_custom_attrs_from_class = _rpythonic_function_(		"mono_custom_attrs_from_class", ctypes.POINTER(MonoCustomAttrInfo), [
	("klass",		ctypes.POINTER(_MonoClass)),] )

mono_custom_attrs_from_assembly = _rpythonic_function_(		"mono_custom_attrs_from_assembly", ctypes.POINTER(MonoCustomAttrInfo), [
	("assembly",		ctypes.POINTER(_MonoAssembly)),] )

mono_custom_attrs_from_property = _rpythonic_function_(		"mono_custom_attrs_from_property", ctypes.POINTER(MonoCustomAttrInfo), [
	("klass",		ctypes.POINTER(_MonoClass)),
	("property",		ctypes.POINTER(_MonoProperty)),] )

mono_custom_attrs_from_event = _rpythonic_function_(		"mono_custom_attrs_from_event", ctypes.POINTER(MonoCustomAttrInfo), [
	("klass",		ctypes.POINTER(_MonoClass)),
	("event",		ctypes.POINTER(_MonoEvent)),] )

mono_custom_attrs_from_field = _rpythonic_function_(		"mono_custom_attrs_from_field", ctypes.POINTER(MonoCustomAttrInfo), [
	("klass",		ctypes.POINTER(_MonoClass)),
	("field",		ctypes.POINTER(_MonoClassField)),] )

mono_custom_attrs_from_param = _rpythonic_function_(		"mono_custom_attrs_from_param", ctypes.POINTER(MonoCustomAttrInfo), [
	("method",		ctypes.POINTER(_MonoMethod)),
	("param",		ctypes.c_uint32),] )

mono_custom_attrs_has_attr = _rpythonic_function_(		"mono_custom_attrs_has_attr", ctypes.c_int32, [
	("ainfo",		ctypes.POINTER(MonoCustomAttrInfo)),
	("attr_klass",		ctypes.POINTER(_MonoClass)),] )

mono_custom_attrs_get_attr = _rpythonic_function_(		"mono_custom_attrs_get_attr", ctypes.POINTER(MonoObject), [
	("ainfo",		ctypes.POINTER(MonoCustomAttrInfo)),
	("attr_klass",		ctypes.POINTER(_MonoClass)),] )

mono_custom_attrs_free = _rpythonic_function_(		"mono_custom_attrs_free", ctypes.c_void_p, [
	("ainfo",		ctypes.POINTER(MonoCustomAttrInfo)),] )

mono_declsec_flags_from_method = _rpythonic_function_(		"mono_declsec_flags_from_method", ctypes.c_uint32, [
	("method",		ctypes.POINTER(_MonoMethod)),] )

mono_declsec_flags_from_class = _rpythonic_function_(		"mono_declsec_flags_from_class", ctypes.c_uint32, [
	("klass",		ctypes.POINTER(_MonoClass)),] )

mono_declsec_flags_from_assembly = _rpythonic_function_(		"mono_declsec_flags_from_assembly", ctypes.c_uint32, [
	("assembly",		ctypes.POINTER(_MonoAssembly)),] )

mono_declsec_get_demands = _rpythonic_function_(		"mono_declsec_get_demands", ctypes.c_uint8, [
	("callee",		ctypes.POINTER(_MonoMethod)),
	("demands",		ctypes.POINTER(MonoDeclSecurityActions)),] )

mono_declsec_get_linkdemands = _rpythonic_function_(		"mono_declsec_get_linkdemands", ctypes.c_uint8, [
	("callee",		ctypes.POINTER(_MonoMethod)),
	("klass",		ctypes.POINTER(MonoDeclSecurityActions)),
	("cmethod",		ctypes.POINTER(MonoDeclSecurityActions)),] )

mono_declsec_get_inheritdemands_class = _rpythonic_function_(		"mono_declsec_get_inheritdemands_class", ctypes.c_uint8, [
	("klass",		ctypes.POINTER(_MonoClass)),
	("demands",		ctypes.POINTER(MonoDeclSecurityActions)),] )

mono_declsec_get_inheritdemands_method = _rpythonic_function_(		"mono_declsec_get_inheritdemands_method", ctypes.c_uint8, [
	("callee",		ctypes.POINTER(_MonoMethod)),
	("demands",		ctypes.POINTER(MonoDeclSecurityActions)),] )

mono_declsec_get_method_action = _rpythonic_function_(		"mono_declsec_get_method_action", ctypes.c_uint8, [
	("method",		ctypes.POINTER(_MonoMethod)),
	("action",		ctypes.c_uint32),
	("entry",		ctypes.POINTER(MonoDeclSecurityEntry)),] )

mono_declsec_get_class_action = _rpythonic_function_(		"mono_declsec_get_class_action", ctypes.c_uint8, [
	("klass",		ctypes.POINTER(_MonoClass)),
	("action",		ctypes.c_uint32),
	("entry",		ctypes.POINTER(MonoDeclSecurityEntry)),] )

mono_declsec_get_assembly_action = _rpythonic_function_(		"mono_declsec_get_assembly_action", ctypes.c_uint8, [
	("assembly",		ctypes.POINTER(_MonoAssembly)),
	("action",		ctypes.c_uint32),
	("entry",		ctypes.POINTER(MonoDeclSecurityEntry)),] )

MonoThreadStartCB = _rpythonic_function_(		"MonoThreadStartCB", ctypes.c_void_p, [
	("tid",		ctypes.c_int),
	("stack_start",		ctypes.POINTER(ctypes.c_void_p)),
	("func",		ctypes.POINTER(ctypes.c_void_p)),] )

MonoThreadAttachCB = _rpythonic_function_(		"MonoThreadAttachCB", ctypes.c_void_p, [
	("tid",		ctypes.c_int),
	("stack_start",		ctypes.POINTER(ctypes.c_void_p)),] )

MonoDomainFunc = _rpythonic_function_(		"MonoDomainFunc", ctypes.c_void_p, [
	("domain",		ctypes.POINTER(_MonoDomain)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

mono_init = _rpythonic_function_(		"mono_init", ctypes.POINTER(_MonoDomain), [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

mono_init_from_assembly = _rpythonic_function_(		"mono_init_from_assembly", ctypes.POINTER(_MonoDomain), [
	("domain_name",		ctypes.POINTER(ctypes.c_char)),
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

mono_init_version = _rpythonic_function_(		"mono_init_version", ctypes.POINTER(_MonoDomain), [
	("domain_name",		ctypes.POINTER(ctypes.c_char)),
	("version",		ctypes.POINTER(ctypes.c_char)),] )

mono_get_root_domain = _rpythonic_function_(		"mono_get_root_domain", ctypes.POINTER(_MonoDomain), [] )

mono_runtime_init = _rpythonic_function_(		"mono_runtime_init", ctypes.c_void_p, [
	("domain",		ctypes.POINTER(_MonoDomain)),
	("start_cb",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("attach_cb",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),)),] )

mono_runtime_cleanup = _rpythonic_function_(		"mono_runtime_cleanup", ctypes.c_void_p, [
	("domain",		ctypes.POINTER(_MonoDomain)),] )

mono_install_runtime_cleanup = _rpythonic_function_(		"mono_install_runtime_cleanup", ctypes.c_void_p, [
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_MonoDomain),ctypes.POINTER(ctypes.c_void_p),)),] )

mono_runtime_quit = _rpythonic_function_(		"mono_runtime_quit", ctypes.c_void_p, [] )

mono_runtime_set_shutting_down = _rpythonic_function_(		"mono_runtime_set_shutting_down", ctypes.c_void_p, [] )

mono_runtime_is_shutting_down = _rpythonic_function_(		"mono_runtime_is_shutting_down", ctypes.c_int32, [] )

mono_check_corlib_version = _rpythonic_function_(		"mono_check_corlib_version", ctypes.POINTER(ctypes.c_char), [] )

mono_domain_create = _rpythonic_function_(		"mono_domain_create", ctypes.POINTER(_MonoDomain), [] )

mono_domain_create_appdomain = _rpythonic_function_(		"mono_domain_create_appdomain", ctypes.POINTER(_MonoDomain), [
	("friendly_name",		ctypes.POINTER(ctypes.c_char)),
	("configuration_file",		ctypes.POINTER(ctypes.c_char)),] )

mono_domain_get = _rpythonic_function_(		"mono_domain_get", ctypes.POINTER(_MonoDomain), [] )

mono_domain_get_by_id = _rpythonic_function_(		"mono_domain_get_by_id", ctypes.POINTER(_MonoDomain), [
	("domainid",		ctypes.c_int32),] )

mono_domain_get_id = _rpythonic_function_(		"mono_domain_get_id", ctypes.c_int32, [
	("domain",		ctypes.POINTER(_MonoDomain)),] )

mono_domain_set = _rpythonic_function_(		"mono_domain_set", ctypes.c_int32, [
	("domain",		ctypes.POINTER(_MonoDomain)),
	("force",		ctypes.c_int32),] )

mono_domain_set_internal = _rpythonic_function_(		"mono_domain_set_internal", ctypes.c_void_p, [
	("domain",		ctypes.POINTER(_MonoDomain)),] )

mono_domain_unload = _rpythonic_function_(		"mono_domain_unload", ctypes.c_void_p, [
	("domain",		ctypes.POINTER(_MonoDomain)),] )

mono_domain_try_unload = _rpythonic_function_(		"mono_domain_try_unload", ctypes.c_void_p, [
	("domain",		ctypes.POINTER(_MonoDomain)),
	("exc",		ctypes.POINTER(ctypes.POINTER(MonoObject))),] )

mono_domain_is_unloading = _rpythonic_function_(		"mono_domain_is_unloading", ctypes.c_int32, [
	("domain",		ctypes.POINTER(_MonoDomain)),] )

mono_domain_from_appdomain = _rpythonic_function_(		"mono_domain_from_appdomain", ctypes.POINTER(_MonoDomain), [
	("appdomain",		ctypes.POINTER(_MonoAppDomain)),] )

mono_domain_foreach = _rpythonic_function_(		"mono_domain_foreach", ctypes.c_void_p, [
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_MonoDomain),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

mono_domain_assembly_open = _rpythonic_function_(		"mono_domain_assembly_open", ctypes.POINTER(_MonoAssembly), [
	("domain",		ctypes.POINTER(_MonoDomain)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

mono_domain_finalize = _rpythonic_function_(		"mono_domain_finalize", ctypes.c_int32, [
	("domain",		ctypes.POINTER(_MonoDomain)),
	("timeout",		ctypes.c_uint32),] )

mono_domain_free = _rpythonic_function_(		"mono_domain_free", ctypes.c_void_p, [
	("domain",		ctypes.POINTER(_MonoDomain)),
	("force",		ctypes.c_int32),] )

mono_domain_has_type_resolve = _rpythonic_function_(		"mono_domain_has_type_resolve", ctypes.c_int32, [
	("domain",		ctypes.POINTER(_MonoDomain)),] )

mono_domain_try_type_resolve = _rpythonic_function_(		"mono_domain_try_type_resolve", ctypes.POINTER(_MonoReflectionAssembly), [
	("domain",		ctypes.POINTER(_MonoDomain)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("tb",		ctypes.POINTER(MonoObject)),] )

mono_domain_owns_vtable_slot = _rpythonic_function_(		"mono_domain_owns_vtable_slot", ctypes.c_int32, [
	("domain",		ctypes.POINTER(_MonoDomain)),
	("vtable_slot",		ctypes.POINTER(ctypes.c_void_p)),] )

mono_context_init = _rpythonic_function_(		"mono_context_init", ctypes.c_void_p, [
	("domain",		ctypes.POINTER(_MonoDomain)),] )

mono_context_set = _rpythonic_function_(		"mono_context_set", ctypes.c_void_p, [
	("new_context",		ctypes.POINTER(_MonoAppContext)),] )

mono_context_get = _rpythonic_function_(		"mono_context_get", ctypes.POINTER(_MonoAppContext), [] )

mono_jit_info_table_find = _rpythonic_function_(		"mono_jit_info_table_find", ctypes.POINTER(_MonoJitInfo), [
	("domain",		ctypes.POINTER(_MonoDomain)),
	("addr",		ctypes.POINTER(ctypes.c_char)),] )

mono_jit_info_get_code_start = _rpythonic_function_(		"mono_jit_info_get_code_start", ctypes.POINTER(ctypes.c_void_p), [
	("ji",		ctypes.POINTER(_MonoJitInfo)),] )

mono_jit_info_get_code_size = _rpythonic_function_(		"mono_jit_info_get_code_size", ctypes.c_int, [
	("ji",		ctypes.POINTER(_MonoJitInfo)),] )

mono_jit_info_get_method = _rpythonic_function_(		"mono_jit_info_get_method", ctypes.POINTER(_MonoMethod), [
	("ji",		ctypes.POINTER(_MonoJitInfo)),] )

mono_get_corlib = _rpythonic_function_(		"mono_get_corlib", ctypes.POINTER(_MonoImage), [] )

mono_get_object_class = _rpythonic_function_(		"mono_get_object_class", ctypes.POINTER(_MonoClass), [] )

mono_get_byte_class = _rpythonic_function_(		"mono_get_byte_class", ctypes.POINTER(_MonoClass), [] )

mono_get_void_class = _rpythonic_function_(		"mono_get_void_class", ctypes.POINTER(_MonoClass), [] )

mono_get_boolean_class = _rpythonic_function_(		"mono_get_boolean_class", ctypes.POINTER(_MonoClass), [] )

mono_get_sbyte_class = _rpythonic_function_(		"mono_get_sbyte_class", ctypes.POINTER(_MonoClass), [] )

mono_get_int16_class = _rpythonic_function_(		"mono_get_int16_class", ctypes.POINTER(_MonoClass), [] )

mono_get_uint16_class = _rpythonic_function_(		"mono_get_uint16_class", ctypes.POINTER(_MonoClass), [] )

mono_get_int32_class = _rpythonic_function_(		"mono_get_int32_class", ctypes.POINTER(_MonoClass), [] )

mono_get_uint32_class = _rpythonic_function_(		"mono_get_uint32_class", ctypes.POINTER(_MonoClass), [] )

mono_get_intptr_class = _rpythonic_function_(		"mono_get_intptr_class", ctypes.POINTER(_MonoClass), [] )

mono_get_uintptr_class = _rpythonic_function_(		"mono_get_uintptr_class", ctypes.POINTER(_MonoClass), [] )

mono_get_int64_class = _rpythonic_function_(		"mono_get_int64_class", ctypes.POINTER(_MonoClass), [] )

mono_get_uint64_class = _rpythonic_function_(		"mono_get_uint64_class", ctypes.POINTER(_MonoClass), [] )

mono_get_single_class = _rpythonic_function_(		"mono_get_single_class", ctypes.POINTER(_MonoClass), [] )

mono_get_double_class = _rpythonic_function_(		"mono_get_double_class", ctypes.POINTER(_MonoClass), [] )

mono_get_char_class = _rpythonic_function_(		"mono_get_char_class", ctypes.POINTER(_MonoClass), [] )

mono_get_string_class = _rpythonic_function_(		"mono_get_string_class", ctypes.POINTER(_MonoClass), [] )

mono_get_enum_class = _rpythonic_function_(		"mono_get_enum_class", ctypes.POINTER(_MonoClass), [] )

mono_get_array_class = _rpythonic_function_(		"mono_get_array_class", ctypes.POINTER(_MonoClass), [] )

mono_get_thread_class = _rpythonic_function_(		"mono_get_thread_class", ctypes.POINTER(_MonoClass), [] )

mono_get_exception_class = _rpythonic_function_(		"mono_get_exception_class", ctypes.POINTER(_MonoClass), [] )

mono_security_enable_core_clr = _rpythonic_function_(		"mono_security_enable_core_clr", ctypes.c_void_p, [] )

MonoCoreClrPlatformCB = _rpythonic_function_(		"MonoCoreClrPlatformCB", ctypes.c_int32, [
	("image_name",		ctypes.POINTER(ctypes.c_char)),] )

mono_security_set_core_clr_platform_callback = _rpythonic_function_(		"mono_security_set_core_clr_platform_callback", ctypes.c_void_p, [
	("callback",		ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(ctypes.c_char),)),] )

mono_jit_init = _rpythonic_function_(		"mono_jit_init", ctypes.POINTER(_MonoDomain), [
	("file",		ctypes.POINTER(ctypes.c_char)),] )

mono_jit_init_version = _rpythonic_function_(		"mono_jit_init_version", ctypes.POINTER(_MonoDomain), [
	("root_domain_name",		ctypes.POINTER(ctypes.c_char)),
	("runtime_version",		ctypes.POINTER(ctypes.c_char)),] )

mono_jit_exec = _rpythonic_function_(		"mono_jit_exec", ctypes.c_int, [
	("domain",		ctypes.POINTER(_MonoDomain)),
	("assembly",		ctypes.POINTER(_MonoAssembly)),
	("argc",		ctypes.c_int),
	("argv",		ctypes.POINTER(ctypes.c_char)),] )

mono_jit_cleanup = _rpythonic_function_(		"mono_jit_cleanup", ctypes.c_void_p, [
	("domain",		ctypes.POINTER(_MonoDomain)),] )

mono_jit_set_trace_options = _rpythonic_function_(		"mono_jit_set_trace_options", ctypes.c_int32, [
	("options",		ctypes.POINTER(ctypes.c_char)),] )

mono_set_signal_chaining = _rpythonic_function_(		"mono_set_signal_chaining", ctypes.c_void_p, [
	("chain_signals",		ctypes.c_int32),] )

mono_jit_set_aot_only = _rpythonic_function_(		"mono_jit_set_aot_only", ctypes.c_void_p, [
	("aot_only",		ctypes.c_int32),] )

MonoBreakPolicyFunc = _rpythonic_function_(		"MonoBreakPolicyFunc", ctypes.c_int, [
	("method",		ctypes.POINTER(_MonoMethod)),] )

mono_set_break_policy = _rpythonic_function_(		"mono_set_break_policy", ctypes.c_void_p, [
	("policy_callback",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_MonoMethod),)),] )

mono_jit_parse_options = _rpythonic_function_(		"mono_jit_parse_options", ctypes.c_void_p, [
	("argc",		ctypes.c_int),
	("argv",		ctypes.POINTER(ctypes.c_char)),] )


_rpythonic_convert_structs_to_objects()

_rpythonic_setup_return_wrappers()
_rpythonic_make_nice_global_enums_()
_rpythonic_clean_up_missing_functions_()
_rpythonic_strip_prefixes_(['mono_'])