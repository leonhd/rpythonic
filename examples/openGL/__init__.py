## generated by RPythonic 0.4.8d	| host-type:32bits=True
## http://code.google.com/p/rpythonic/
import os, sys, ctypes, inspect
__os = os
__sys = sys
__inspect = inspect
_CTYPES_CDLLS = []	# support loading functions from multiple libraries


PYTHON_RESERVED_KEYWORDS = 'for while in as global with try except lambda return raise if else elif eval exec and not or break continue finally print yield del def class assert from is pass'.split()


IS32BIT = (ctypes.sizeof(ctypes.c_void_p)==4)

_ISPYTHON2 = sys.version_info[0] == 2
if _ISPYTHON2: _NULLBYTE = '\0'
else: _NULLBYTE = bytes( chr(0), 'ascii' )

def _CHARP2STRING( charp, encoding='utf-8' ):
	b = bytes()
	i = 0
	while True:
		char = charp[ i ]
		if char == _NULLBYTE: break
		else:
			b += char
			i += 1
	return b.decode( encoding )

## try to load precompiled c-libraries from this directory, if the library is not there try to load from the system.
_clibs_dir = os.path.dirname(os.path.abspath(__file__))

def _load_ctypes_lib( name ):
	if __os.name == 'posix':
		if __sys.platform.startswith('linux'):
			if not name.endswith('.so'): name += '.so'
			if not name.startswith('lib'): name = 'lib' + name

			if IS32BIT: 	path = __os.path.join(_clibs_dir,'linux32')
			else: 		path = __os.path.join(_clibs_dir,'linux64')
			url = __os.path.join( path, name )
			if __os.path.isfile( url ): return ctypes.CDLL(url)
			elif __os.path.isfile( '/usr/local/lib/%s'%name ): return ctypes.CDLL('/usr/local/lib/%s'%name)
			elif __os.path.isfile( '/usr/local/lib64/%s'%name ) and not IS32BIT: return ctypes.CDLL('/usr/local/lib64/%s'%name)
			elif __os.path.isfile( '/usr/lib/%s'%name ): return ctypes.CDLL('/usr/lib/%s'%name)
			elif __os.path.isfile( './%s'%name ): return ctypes.CDLL('./%s'%name)
			
			elif __os.path.isfile( '/usr/lib/%s.0'%name ):	# Fedora style
				return ctypes.CDLL('/usr/lib/%s.0'%name )
			elif __os.path.isfile( '/usr/lib64/%s.0'%name ):	# Fedora style
				return ctypes.CDLL('/usr/lib64/%s.0'%name )

			else:	# fallback
				print('[ falling back to loading from current process ]')
				try: return ctypes.CDLL(name)
				except: return ctypes.CDLL('')

		elif sys.platform == 'darwin':
			name += '.dylib'
			if IS32BIT: 	path = os.path.join(_clibs_dir,'osx32')
			else: 		path = os.path.join(_clibs_dir,'osx64')
			url = os.path.join( path, name )
			if os.path.isfile( url ): return ctypes.CDLL(url)
			else: return ctypes.CDLL(name) #fallback

	elif os.name == 'nt':
		name += '.dll'
		if IS32BIT: 	path = os.path.join(_clibs_dir,'win32')
		else: 		path = os.path.join(_clibs_dir,'win64')
		url = os.path.join( path, name )
		if os.path.isfile( url ): return ctypes.CDLL(url)
		else: return ctypes.CDLL(name) #fallback

RPYTHONIC_WRAPPER_FUNCTIONS = {}
RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES = []
RPYTHONIC_AUTOPREFIX_IGNORE = []

## ctypes does not clearly expose these types ##
PyCFuncPtrType = type(ctypes.CFUNCTYPE(ctypes.c_void_p))
PyCArrayType = type( ctypes.c_int * 2 )
PyCPointerType = type( ctypes.POINTER(ctypes.c_int) )
PyCStructType = type( ctypes.Structure )
CArgObject = type( ctypes.byref(ctypes.c_int()) )

class _rpythonic_meta_(object):
	'''
	Reserved Attributes:
		POINTER
		CSTRUCT
		CAST
	'''
	_rpythonic_ = True		# workaround for now, must have a way to know if object is a meta from another module, isinstance(o,_rpythonic_meta_) will fail in those cases. another workaround could be check sys.modules for other rpythonic modules and fetch _rpythonic_meta_ from there.
	def __init__(self, *args, **kw ):							# cheap trick, abuse **kw, and look for "pointer", "cast"
		if kw and 'pointer' not in kw: raise SyntaxError	# sorry, you can not init with keywords
		elif kw and 'pointer' in kw:
			if 'cast' in kw and kw['cast']:
				self.POINTER = ctypes.cast( kw['pointer'], ctypes.POINTER(self.CSTRUCT) )
			else: self.POINTER = kw['pointer']
		else: self.POINTER = ctypes.pointer( self.CSTRUCT(*args) )
		self.POINTER.pyobject = self	# .pyobject is local to this pointer "object"

	def __getattr__(self,name):
		if hasattr( self.POINTER.contents, name ):
			return getattr( self.POINTER.contents, name )

		else:	# when rpythonic failed to generate good bindings - these lookups should be cached
			for parent in self._rpythonic_parent_classes_:
				if hasattr( parent, name ):
					method = getattr( parent, name )	# should check if it really is an unbound method
					if method in parent._rpythonic_unbound_lookup_:
						func = parent._rpythonic_unbound_lookup_[ method ]
						n = func.name
						if len(func.argnames) > 1:
							argnames = func.argnames[ 1 : ]
							a = ',' + '=None,'.join( argnames ) + '=None'
							b = ','.join( argnames )
						else: a = b = ''
						lamb = eval( 'lambda self %s: %s( self.POINTER, %s )' %(a,n,b) )
						setattr( self.__class__, name, lamb )
						#return lamb	# this would return the unbound lambda, must call getattr again
						return getattr( self, name )
					else:
						# this can happen if self also inherits from the same parent class,
						# assume that by continuing this reaches that shared parent class,
						# and the lambda above is created as normal.
						continue
			## last resort, load from global name space ##
			G = globals()
			if name in G: return lambda *args: G[name](self.POINTER, *args)
			else:
				for prefix in self._autoprefix_:
					n = prefix + name
					if n in G: return lambda *args: G[n](self.POINTER, *args)
				print( 'possible auto-prefixes available', self._autoprefix_ )
				raise AttributeError

	def __call__(self, type=False):
		print('calling object is DEPRECATED - use ob.POINTER or ob.CSTRUCT')
		if type: return self.CSTRUCT
		else: return self.POINTER


def _rpythonic_generate_subclass_( name, struct, functions ):
	head = 'class %s( _rpythonic_meta_ ):' %name
	body = [ 
		'_rpythonic_parent_classes_ = []' ,
		'_rpythonic_unbound_lookup_ = {}' 
	]

	names = [ func.name for func in functions ]

	possibles = {}
	rank = []		# rank by longest name
	if len(names) > 3000: print('too many functions to use this hack')
	else:
		for n1 in names:
			prefix = ''
			for i,char in enumerate(n1):
				prefix += char
				if prefix not in possibles:
					possibles[ prefix ] = 0
					for n2 in names:
						if n2.startswith( prefix ):
							possibles[ prefix ] += 1

					if not rank or len(prefix) > len(rank[-1]) and possibles[prefix] > len(names)/4:
						rank.append( prefix )

	top = []
	while rank:
		best = rank.pop()
		if possibles[best] > len(functions)/2 and best not in names:
			if best.endswith('_set_') or best.endswith('_get_'): best = best[ : -4 ]
			elif best.endswith('Set') or best.endswith('Get'): best = best[ : -3 ]

			rem = []
			for other in rank:
				if best.startswith(other): rem.append( other )
			for r in rem: rank.remove( r )

			if best not in top: top.append( best )

		if len(top) > 3: break

	for n in names:		# find shortest prefixes #
		prefix = ''
		for i,char in enumerate(n):		# cammelCase
			if i==0: prefix += char; continue
			if char.isupper() and len(prefix) >= 2: break
			prefix += char
		if prefix and prefix != n and len(prefix) >= 2:
			hits = 0
			for other in names:
				if other.startswith( prefix ): hits += 1
			if hits >= 2 and prefix not in top:
				top.append( prefix )
				if len(top) >= 6: break

	## setup full names
	for func in functions:
		n = func.name
		if len(func.argnames) > 1:
			argnames = func.argnames[ 1 : ]
			a = ',' + '=None,'.join( argnames ) + '=None'
			b = ','.join( argnames )
		else: a = b = ''

		fhead = 'def %s( self %s ):' %(n,a)
		fbody = ['return %s(self.POINTER, %s)' %(func.name,b)]
		g = fhead + '\n\t\t' + '\n\t\t'.join( fbody )
		body.append( g )
		#body.append( '%s._rpythonic_function_ = %s' %(func.name, func.name) )

	## setup short names ##
	for n in names:
		for prefix in top:
			if n.startswith(prefix) and n[len(prefix):] not in names:
				alt = n[ len(prefix) : ]
				if alt and alt != n and alt not in PYTHON_RESERVED_KEYWORDS and not alt.isdigit() and not alt[0].isdigit():
					body.append( '%s = %s' %(alt,n) )
					names.append( alt )

	gen = head + '\n\t' + '\n\t'.join( body )
	try: exec( gen )
	except:
		print( gen )
		raise SyntaxError

	klass = locals()[name]
	klass.CSTRUCT = struct	# ctypes struct class

	klass._autoprefix_ = top
	for func in functions:
		unbound = getattr( klass, func.name )
		klass._rpythonic_unbound_lookup_[ unbound ] = func
		# klass.longname is klass.shortname = False
		# klass.longname == klass.shortname = True
	return klass

def _rpythonic_convert_structs_to_objects():
	G = globals()
	for klass in _OOAPI_:
		altname = name = klass.__name__
		prefix = ''
		for i,char in enumerate(name):
			if i==0: prefix += char; continue
			if char.isupper(): break
			prefix += char
		if prefix and prefix != name:
			hits = 0
			for other in _OOAPI_:
				if other is not klass:
					if other.__name__.startswith( prefix ): hits += 1
			if hits >= 2:
				altname = name[ len(prefix) : ]

		funcs = _OOAPI_[ klass ]
		newklass = _rpythonic_generate_subclass_( altname, klass, funcs )
		klass._rpythonic_wrapper_class_ = newklass
		G[ name ] = newklass	# replace struct with wrapper
		if altname not in G: G[ altname ] = newklass	# safely define with nicer name
		elif altname != name: # odd cases, maybe a function that returns the object, almost never happens.
			print('WARN - not replacing something with struct wrapper:', G[altname] )


def _rpythonic_setup_return_wrappers():
	R = _rpythonic_function_
	for klass in _OOAPI_:
		if klass in _OOAPI_RETURNS_OBJECT_:
			for f in _OOAPI_RETURNS_OBJECT_[klass]:
				f.object_oriented = True
				if not f.return_wrapper:	# just in case the ctypes footer had already defined it, do not overwrite
					f.return_wrapper = klass._rpythonic_wrapper_class_


###############################################################
##						OLD META FUNC						##
###############################################################
def _rpythonic_function_( name, result=ctypes.c_void_p, args=[]):
	mname = '_metafunc_%s' %name
	exec( 'class %s( _rpythonic_metafunc_ ): pass' %mname )
	k = locals()[mname]
	return k( name, result, args )
_OOAPI_ = {}
_OOAPI_RETURNS_OBJECT_ = {}
class _rpythonic_metafunc_(object):
	def __init__(self, name, result=ctypes.c_void_p, args=[]):
		self.name = name
		self.result = result
		self.argtypes = []		# can dynamically change CFUNCTYPE trick
		self.argnames = []
		self.argtypestypes = []
		for i,arg in enumerate(args):
			n,t = arg
			if n in PYTHON_RESERVED_KEYWORDS: n = 'C_'+n
			if n in self.argnames: n = '%s%s' %(n,i)
			self.argnames.append( n )
			self.argtypes.append( t )
			self.argtypestypes.append( type(t) )		# precomputed for speed

		self.argnames = tuple( self.argnames )				# should never change
		self.numargs = len( self.argtypes )
		self.callbacks = [None] * self.numargs
		self.return_wrapper = None
		self.object_oriented = False
		self.function = None
		for cdll in _CTYPES_CDLLS:	# functions could be multiple libraries
			if hasattr(cdll, self.name):
				func = self.function = getattr(cdll, self.name )
				RPYTHONIC_WRAPPER_FUNCTIONS[ name ] = self
				break
		if not self.function:
			RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES.append( name )

		if self.function: self.reset()

	def change_argument_type( self, name, t ):
		idx = self.argnames.index( name )
		self.argtypes[ idx ] = t
		self.argtypestypes[ idx ] = type(t)
		self.function.argtypes = self.argtypes

	def reset(self):
		if self.argnames:
			a = ',' + '=None,'.join( self.argnames ) + '=None'
			b = ','.join( self.argnames )
		else: a = b = ''

		callmeth = eval( 'lambda self %s: self._call_( %s )' %(a,b) )
		setattr( self.__class__, '__call__', callmeth )

		self.function.restype = self.result
		self.function.argtypes = self.argtypes

		if type( self.result ) is PyCPointerType and type(self.result._type_) is PyCStructType:
			klass = self.result._type_
			if klass not in _OOAPI_RETURNS_OBJECT_: _OOAPI_RETURNS_OBJECT_[klass] = []
			_OOAPI_RETURNS_OBJECT_[klass].append( self )

		self.defaults = []
		for i in range( self.numargs ):
			T = self.argtypes[ i ]
			if type(T) is PyCFuncPtrType:
				p = T()	# func pointers can not be None
				self.defaults.append( p )
				self.callbacks[ i ] = p					# save reference
			elif T in (ctypes.c_int, ctypes.c_uint, ctypes.c_long, ctypes.c_ulong):
				self.defaults.append( 0 )
			elif T in (ctypes.c_float, ctypes.c_double):
				self.defaults.append( .0 )
			else: self.defaults.append( None )	# None is allowed for all other types

			## generate OO API ##
			if i == 0 and type(T) is PyCPointerType and type(T._type_) is PyCStructType:
				klass = T._type_
				if klass not in _OOAPI_: _OOAPI_[ klass ] = []
				_OOAPI_[ klass ].append( self )

	def _call_( self, *args ):			# allow flexible calling types
		cargs = list( self.defaults )
		for i,arg in enumerate(args):
			if isinstance( arg, _rpythonic_meta_ ): arg = arg.POINTER
			elif hasattr( arg, '_rpythonic_' ): arg = arg.POINTER		# workaround - instance from another module

			t = type(arg)
			k = self.argtypes[ i ]
			kt = self.argtypestypes[ i ]
			if arg is None and cargs[i] is not None:	# use user defaults, very rare cases
				continue

			elif t is bool and k is ctypes.c_int:
				if arg: cargs[i] = 1	#ctypes.c_int(1)
				else: cargs[i] = 0	#ctypes.c_int(0)

			elif t in (list,tuple):				# convert lists and tuples into array
				if kt is PyCArrayType:
					cargs[ i ] = k(*arg)
				elif kt is PyCStructType:
					if k._array_wrapper_: cargs[ i ] = k(arg)	# allow easy array init
					else: cargs[ i ] = k(*arg)							# allow multiple args
				elif kt is PyCPointerType:
					cargs[ i ] = _convert_nested_list_to_pointer( k, arg )
				else: assert 0

			elif isinstance( arg, ctypes._Pointer ) and t is not k and kt is PyCPointerType:
				cargs[ i ] = ctypes.cast( arg, k )		# generic's that need to be cast

			elif kt is PyCStructType and isinstance( arg, ctypes._Pointer ):
				cargs[ i ] = arg.contents	# fixed may25

			elif kt is PyCPointerType and not isinstance( arg, (ctypes._Pointer,CArgObject) ):
				if t in (int,float,bool): ptr = k( k._type_(arg) )
				elif t is str:
					if not _ISPYTHON2: arg = arg.encode('utf-8')	# encode to ascii in python3
					ptr = ctypes.create_string_buffer(arg)				# correct and pypy compatible
				elif t in (PyCStructType, PyCArrayType):
					ptr = ctypes.cast( ctypes.pointer( arg ), k )
				else:
					ptr = arg	# TODO print warning?
				cargs[ i ] = ptr

			elif kt is PyCFuncPtrType:
				if t.__name__ == 'CFunctionType': cargs[ i ] = arg		# assume outside holds pointer
				else:													# this is not safe #
					cargs[ i ] = self.callbacks[ i ] = k( arg )				# assume arg is a callable
			else:
				cargs[ i ] = arg		# directly pass

		## if you define your own return_wrapper, it must take keyword "pointer"
		if self.return_wrapper: return self.return_wrapper( pointer=self.function( *cargs ) )
		else: return self.function( *cargs )



def _convert_nested_list_to_pointer( k, arg ):
	depth = 0; s = k
	while True:
		if type(s) is PyCPointerType:
			s = getattr( s, '_type_' )
			depth += 1
		else: break
	assert depth and depth <= 2
	if depth == 1:
		T = k._type_
		ptr = k( k._type_() )
		for i in range( len(arg) ):
			ptr[ i ] = T( *arg[i] )
	elif depth == 2:
		T = k._type_._type_
		_ptr = k._type_( k._type_._type_() )
		for i in range(len( arg )):
			for j in range( len(arg[i]) ):
				_ptr[ j ] = T( *arg[ i ][ j ] )
		ptr = k( _ptr )
	return ptr


def __freeze_rpythonic_struct( cls, fields ):
	if cls not in _OOAPI_: _OOAPI_[ cls ] = []	# wrap all structs
	try: setattr( cls, '_fields_', fields )
	except:
		print( 'WARN - bad order struct freeze', cls )
		#cls._fields_ = []

class _rpythonic_struct_( ctypes.Structure ):
	_array_wrapper_ = False
	_fields_ = []
	_methods_ = {}
	#def __call__(self): return self
	def __init__(self, *args, **kw ):
		cargs = []
		argtypes = []
		for a in self._fields_: argtypes.append( a[1] )
		if len(args) > len(argtypes): args = [args]	# allow both calling conventions
		for i,arg in enumerate( args ):
			if isinstance( arg, _rpythonic_meta_ ): arg = arg.POINTER

			t = type(arg)
			k = argtypes[ i ]
			if t in (list,tuple):
				if k.__class__.__name__	== 'PyCArrayType':
					cargs.append( k(*arg) )
				elif k.__class__.__name__ == 'PyCStructType':
					if k._array_wrapper_: cargs.append( k(arg) )	# allow easy array init
					else: cargs.append( k(*arg) )							# allow multiple args
			elif isinstance( arg, ctypes._Pointer ) and t is not k:
				cargs[ i ] = ctypes.cast( arg, k )	# generic's that need to be cast
			elif k.__class__.__name__ == 'PyCArrayType' and t in (float,int,bool):
				cargs.append( k(arg) )		# support init array from single value
			else:
				cargs.append( arg )		# directly pass

		ctypes.Structure.__init__(self, *cargs, **kw)


def _rpythonic_make_nice_global_enums_():
	G = globals()
	for name in RPYTHONIC_GLOBAL_ENUMS:
		if '_' in name and name.index('_') <= 4:
			altname = name[ name.index('_') + 1 : ]
			if altname not in G:
				G[altname] = RPYTHONIC_GLOBAL_ENUMS[ name ]

def _rpythonic_clean_up_missing_functions_():
	G = globals()
	for f in RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES:
		G.pop( f )
	print( "C functions loaded: %s" %len(RPYTHONIC_WRAPPER_FUNCTIONS) )
	print( "C functions failed: %s" %len(RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES) )



###### NEW API #########
CTYPES_DLL = None

class _VOID_POINTER_CONTAINER_(object):
	def __init__(self, ptr, name=None):
		self._pointer_ = ptr
		self.name = name
NULL = _VOID_POINTER_CONTAINER_(None,'<null pointer>')


class meta:	# NEW API - allow run time switch from ctypes to rffi
	'''
	Methods:
		RPython will not allow object wrapper around a method (__call__ not allowed)
		keep C function names in list "__cfunctions__"
		rpythonic.enable_rffi( classA, classB )	
		can take advantage of methods in object-method-wrapper,
		generate rffi wrapper and set method on classA, etc.
		replaces object-method-wrapper with rffi-method

	Properties:
		CPython: obj.x=1
		RPython: obj.set_x(1)	
	'''
	METAS = []
	def __init__(self, constructors=[], methods={}, properties={}):
		#global CTYPES_DLL	# TODO update me to using _CTYPES_CDLLS
		#if not CTYPES_DLL:
		#	CTYPES_DLL = _load_ctypes_lib( _clib_name_ )

		self.constructors = constructors
		self.methods = methods
		self.properties = properties
		self.METAS.append( self )



	def __call__(self, cls ):
		print('@meta', cls )

		if not self.constructors:
			lamb = lambda s, _explicit_pointer_=None: setattr(s,'_pointer_',getattr(_explicit_pointer_,'_pointer_')) if hasattr(_explicit_pointer_,'_pointer_') else setattr(s,'_pointer_',_explicit_pointer_)
			lamb._debug = '(no constructor)'
			setattr( cls, '__init__', lamb )
		else:
			con = self._find_best_function( self.constructors )
			cfunc = self._build_cfunc( con )
			setattr( cls, '_%s'%con['name'], cfunc )
			g = self._gen_init( con )
			setattr( cls, '__init__', g )
		
		## set methods ##
		for name in self.methods:
			meth = self.methods[ name ]
			cfuncs = []
			for m in meth['functions']:
				cfunc = self._build_cfunc( m, method=True, static=meth['static'] )
				self._setup_return( cfunc, meth )
				setattr( cls, '_%s'%m['name'], cfunc )
				cfuncs.append( cfunc )

			f = self._find_best_function( meth['functions'] )
			g = self._gen_method( meth, f )
			g._cfuncs = cfuncs
			if meth['static']: g = classmethod( g )
			setattr( cls, name, g )

		for name in self.properties:
			print( 'property:', name )
			p = []
			for f in self.properties[name]:
				cfunc = self._build_cfunc( f )
				setattr( cls, '_%s'%f['name'], cfunc )
				g = self._gen_method( f, f )
				p.append( g )

			setattr( cls, name, property(*p) )

		return cls


	@staticmethod
	def _build_cfunc( info, method=False, static=False ):
		cfunc = getattr(CTYPES_DLL, info['name'])
		if method and not static: argtypes = [ ctypes.c_void_p ]
		else: argtypes = []
		for p in info['parameters']: argtypes.append( eval(p['ctypes_type']) )
		cfunc.argtypes = argtypes
		return cfunc

	@staticmethod
	def _setup_return( cfunc, info ):
		if not info['returns_fundamental']:
			cfunc.restype = ctypes.c_void_p
		elif info['returns_fundamental']:
			cfunc.restype = eval( info['returns_ctypes'] )
		else:
			cfunc.restype = ctypes.c_void_p

	@staticmethod
	def _gen_prepare_args( m ):
		a = []; b = []
		for i,p in enumerate(m['parameters']):
			if 'name' in p: n = p['name']
			else: n = '_unnamed_%s' %i
			if '<' in n: n = '_TODOfixme_%s' %i
			if n in PYTHON_RESERVED_KEYWORDS: n += str(i)
			if p['fundamental']:
				b.append( n )
				s = p['raw_type'].split()
				if 'default' in p:
					d = p['default']
					if p['raw_type'] in ('float', 'double'):
						if d.endswith('f'): d = d[:-1]
						d = d.replace(' ', '.')
						if 'e' in d: d = 0.0
						try: d = float(d)
						except: d = 0.0
					elif ('int' in s or 'size_t' in s) and not d.isdigit(): d = 0
					elif 'char' in s and '"' not in d: d = '""'
					elif d.lower() == 'false': d = False
					elif d.lower() == 'true': d = True
				elif 'char' in s: d = '""'
				elif 'float' in s or 'double' in s: d = 0.0
				elif 'size_t' in s or 'int' in s or 'long' in s or 'short' in s: d = 0
				elif p['raw_type'] == 'bool': d = False
				elif p['raw_type'] in ('void', '(template)'): d = 'NULL'
				else: print( p )
				a.append( n+'=%s' %d )

			else:
				b.append( '%s._pointer_'%n )
				a.append( n+'=NULL' )
		return a, b

	@staticmethod
	def _gen_init( m ):
		a, b = meta._gen_prepare_args( m )
		if a: e = 'lambda _py_self_, %s, _explicit_pointer_=None: ' %(','.join(a))
		else: e = 'lambda _py_self_, _explicit_pointer_=None: '
		e += 'setattr(_py_self_, "_pointer_", _py_self_._%s(%s))' %( m['name'], ','.join(b) )
		e += ' if not _explicit_pointer_ else '
		e += 'setattr(_py_self_, "_pointer_", _explicit_pointer_)'
		print( e )
		lamb = eval( e ); lamb._debug = e; lamb._introspect = m
		return lamb

	@staticmethod
	def _find_best_function( funcs ):
		best = funcs[0]
		score = -1
		if len(funcs) > 1:
			for f in funcs:
				hits = 0
				for p in f['parameters']:
					if p['fundamental']: hits += 1
				if hits and hits == len( f['parameters'] ):
					if hits > score:
						score = hits
						best = f
		return best

	@staticmethod
	def _gen_method( m, f ):
		a, b = meta._gen_prepare_args( f )
		if a: e = 'lambda _py_self_, %s: ' %(','.join(a))
		else: e = 'lambda _py_self_: '

		if 'static' in m and m['static']:	# static in c++ is like a classmethod
			c = '_py_self_._%s( %s )' %( f['name'], ','.join(b) )
		else:
			c = '_py_self_._%s( _py_self_._pointer_, %s )' %( f['name'], ','.join(b) )

		if not m['returns_fundamental']:
			if 'returns_unknown' in m or '<' in m['returns']: c = '_VOID_POINTER_CONTAINER_( %s, name="%s" )' %(c,m['returns'])
			else:
				something = m['returns'].replace('::', '.')
				c = '%s( _explicit_pointer_=%s )' %(something, c)

		e += c; lamb = eval( e )
		lamb._debug = e; lamb._introspect = f
		return lamb


	META_FUNCTIONS = []
	@classmethod
	def function( self, info ):
		print('@meta.function', info['name'] )
		#global CTYPES_DLL
		#if not CTYPES_DLL:
		#	CTYPES_DLL = _load_ctypes_lib( _clib_name_ )

		cfunc = self._build_cfunc( info, method=False, static=True )
		setattr( meta, '_%s'%info['name'], cfunc )
		self._setup_return( cfunc, info )
		a, b = meta._gen_prepare_args( info )
		e = 'lambda %s: ' %(','.join(a))
		c = 'meta._%s( %s )' %( info['name'], ','.join(b) )

		if not info['returns_fundamental']:
			if 'returns_unknown' in info or '<' in info['returns']:
				c = '_VOID_POINTER_CONTAINER_( %s, name="%s" )' %(c,info['returns'])
			else:
				something = info['returns'].replace('::', '.')
				c = '%s( _explicit_pointer_=%s )' %(something, c)
		e += c
		lamb = eval( e )
		lamb._debug = e
		lamb._introspect = info
		return lamb



def _rpythonic_strip_prefixes_( prefixes ):
	G = globals()
	names = list(G.keys())	# ensure list in py3
	for name in names:
		for prefix in prefixes:
			if name.startswith( prefix ):
				newname = name[ len(prefix) : ]
				if newname and newname not in G:
					G[ newname ] = G[ name ]


########################################################
##				Load Dynamic Libaries					##
def _rpythonic_load_dynamic_libraries(names):
	global _CTYPES_CDLLS
	for name in names:
		cdll = _load_ctypes_lib( name )
		if cdll:
			print('[[dynamic library loaded: %s]]' %name)
			_CTYPES_CDLLS.append( cdll )
#----------------------------------------------------------#
print( os.path.abspath( os.path.curdir ) )



_rpythonic_load_dynamic_libraries( ['libGL'] )

## macro globals ##
WIN32_LEAN_AND_MEAN = 1
GL_VERSION_1_1 = 1
GL_VERSION_1_2 = 1
GL_VERSION_1_3 = 1
GL_ARB_imaging = 1
GL_FALSE = 0
GL_TRUE = 1
GL_BYTE = 5120
GL_UNSIGNED_BYTE = 5121
GL_SHORT = 5122
GL_UNSIGNED_SHORT = 5123
GL_INT = 5124
GL_UNSIGNED_INT = 5125
GL_FLOAT = 5126
GL_2_BYTES = 5127
GL_3_BYTES = 5128
GL_4_BYTES = 5129
GL_DOUBLE = 5130
GL_POINTS = 0
GL_LINES = 1
GL_LINE_LOOP = 2
GL_LINE_STRIP = 3
GL_TRIANGLES = 4
GL_TRIANGLE_STRIP = 5
GL_TRIANGLE_FAN = 6
GL_QUADS = 7
GL_QUAD_STRIP = 8
GL_POLYGON = 9
GL_VERTEX_ARRAY = 32884
GL_NORMAL_ARRAY = 32885
GL_COLOR_ARRAY = 32886
GL_INDEX_ARRAY = 32887
GL_TEXTURE_COORD_ARRAY = 32888
GL_EDGE_FLAG_ARRAY = 32889
GL_VERTEX_ARRAY_SIZE = 32890
GL_VERTEX_ARRAY_TYPE = 32891
GL_VERTEX_ARRAY_STRIDE = 32892
GL_NORMAL_ARRAY_TYPE = 32894
GL_NORMAL_ARRAY_STRIDE = 32895
GL_COLOR_ARRAY_SIZE = 32897
GL_COLOR_ARRAY_TYPE = 32898
GL_COLOR_ARRAY_STRIDE = 32899
GL_INDEX_ARRAY_TYPE = 32901
GL_INDEX_ARRAY_STRIDE = 32902
GL_TEXTURE_COORD_ARRAY_SIZE = 32904
GL_TEXTURE_COORD_ARRAY_TYPE = 32905
GL_TEXTURE_COORD_ARRAY_STRIDE = 32906
GL_EDGE_FLAG_ARRAY_STRIDE = 32908
GL_VERTEX_ARRAY_POINTER = 32910
GL_NORMAL_ARRAY_POINTER = 32911
GL_COLOR_ARRAY_POINTER = 32912
GL_INDEX_ARRAY_POINTER = 32913
GL_TEXTURE_COORD_ARRAY_POINTER = 32914
GL_EDGE_FLAG_ARRAY_POINTER = 32915
GL_V2F = 10784
GL_V3F = 10785
GL_C4UB_V2F = 10786
GL_C4UB_V3F = 10787
GL_C3F_V3F = 10788
GL_N3F_V3F = 10789
GL_C4F_N3F_V3F = 10790
GL_T2F_V3F = 10791
GL_T4F_V4F = 10792
GL_T2F_C4UB_V3F = 10793
GL_T2F_C3F_V3F = 10794
GL_T2F_N3F_V3F = 10795
GL_T2F_C4F_N3F_V3F = 10796
GL_T4F_C4F_N3F_V4F = 10797
GL_MATRIX_MODE = 2976
GL_MODELVIEW = 5888
GL_PROJECTION = 5889
GL_TEXTURE = 5890
GL_POINT_SMOOTH = 2832
GL_POINT_SIZE = 2833
GL_POINT_SIZE_GRANULARITY = 2835
GL_POINT_SIZE_RANGE = 2834
GL_LINE_SMOOTH = 2848
GL_LINE_STIPPLE = 2852
GL_LINE_STIPPLE_PATTERN = 2853
GL_LINE_STIPPLE_REPEAT = 2854
GL_LINE_WIDTH = 2849
GL_LINE_WIDTH_GRANULARITY = 2851
GL_LINE_WIDTH_RANGE = 2850
GL_POINT = 6912
GL_LINE = 6913
GL_FILL = 6914
GL_CW = 2304
GL_CCW = 2305
GL_FRONT = 1028
GL_BACK = 1029
GL_POLYGON_MODE = 2880
GL_POLYGON_SMOOTH = 2881
GL_POLYGON_STIPPLE = 2882
GL_EDGE_FLAG = 2883
GL_CULL_FACE = 2884
GL_CULL_FACE_MODE = 2885
GL_FRONT_FACE = 2886
GL_POLYGON_OFFSET_FACTOR = 32824
GL_POLYGON_OFFSET_UNITS = 10752
GL_POLYGON_OFFSET_POINT = 10753
GL_POLYGON_OFFSET_LINE = 10754
GL_POLYGON_OFFSET_FILL = 32823
GL_COMPILE = 4864
GL_COMPILE_AND_EXECUTE = 4865
GL_LIST_BASE = 2866
GL_LIST_INDEX = 2867
GL_LIST_MODE = 2864
GL_NEVER = 512
GL_LESS = 513
GL_EQUAL = 514
GL_LEQUAL = 515
GL_GREATER = 516
GL_NOTEQUAL = 517
GL_GEQUAL = 518
GL_ALWAYS = 519
GL_DEPTH_TEST = 2929
GL_DEPTH_BITS = 3414
GL_DEPTH_CLEAR_VALUE = 2931
GL_DEPTH_FUNC = 2932
GL_DEPTH_RANGE = 2928
GL_DEPTH_WRITEMASK = 2930
GL_DEPTH_COMPONENT = 6402
GL_LIGHTING = 2896
GL_LIGHT0 = 16384
GL_LIGHT1 = 16385
GL_LIGHT2 = 16386
GL_LIGHT3 = 16387
GL_LIGHT4 = 16388
GL_LIGHT5 = 16389
GL_LIGHT6 = 16390
GL_LIGHT7 = 16391
GL_SPOT_EXPONENT = 4613
GL_SPOT_CUTOFF = 4614
GL_CONSTANT_ATTENUATION = 4615
GL_LINEAR_ATTENUATION = 4616
GL_QUADRATIC_ATTENUATION = 4617
GL_AMBIENT = 4608
GL_DIFFUSE = 4609
GL_SPECULAR = 4610
GL_SHININESS = 5633
GL_EMISSION = 5632
GL_POSITION = 4611
GL_SPOT_DIRECTION = 4612
GL_AMBIENT_AND_DIFFUSE = 5634
GL_COLOR_INDEXES = 5635
GL_LIGHT_MODEL_TWO_SIDE = 2898
GL_LIGHT_MODEL_LOCAL_VIEWER = 2897
GL_LIGHT_MODEL_AMBIENT = 2899
GL_FRONT_AND_BACK = 1032
GL_SHADE_MODEL = 2900
GL_FLAT = 7424
GL_SMOOTH = 7425
GL_COLOR_MATERIAL = 2903
GL_COLOR_MATERIAL_FACE = 2901
GL_COLOR_MATERIAL_PARAMETER = 2902
GL_NORMALIZE = 2977
GL_CLIP_PLANE0 = 12288
GL_CLIP_PLANE1 = 12289
GL_CLIP_PLANE2 = 12290
GL_CLIP_PLANE3 = 12291
GL_CLIP_PLANE4 = 12292
GL_CLIP_PLANE5 = 12293
GL_ACCUM_RED_BITS = 3416
GL_ACCUM_GREEN_BITS = 3417
GL_ACCUM_BLUE_BITS = 3418
GL_ACCUM_ALPHA_BITS = 3419
GL_ACCUM_CLEAR_VALUE = 2944
GL_ACCUM = 256
GL_ADD = 260
GL_LOAD = 257
GL_MULT = 259
GL_RETURN = 258
GL_ALPHA_TEST = 3008
GL_ALPHA_TEST_REF = 3010
GL_ALPHA_TEST_FUNC = 3009
GL_BLEND = 3042
GL_BLEND_SRC = 3041
GL_BLEND_DST = 3040
GL_ZERO = 0
GL_ONE = 1
GL_SRC_COLOR = 768
GL_ONE_MINUS_SRC_COLOR = 769
GL_SRC_ALPHA = 770
GL_ONE_MINUS_SRC_ALPHA = 771
GL_DST_ALPHA = 772
GL_ONE_MINUS_DST_ALPHA = 773
GL_DST_COLOR = 774
GL_ONE_MINUS_DST_COLOR = 775
GL_SRC_ALPHA_SATURATE = 776
GL_FEEDBACK = 7169
GL_RENDER = 7168
GL_SELECT = 7170
GL_2D = 1536
GL_3D = 1537
GL_3D_COLOR = 1538
GL_3D_COLOR_TEXTURE = 1539
GL_4D_COLOR_TEXTURE = 1540
GL_POINT_TOKEN = 1793
GL_LINE_TOKEN = 1794
GL_LINE_RESET_TOKEN = 1799
GL_POLYGON_TOKEN = 1795
GL_BITMAP_TOKEN = 1796
GL_DRAW_PIXEL_TOKEN = 1797
GL_COPY_PIXEL_TOKEN = 1798
GL_PASS_THROUGH_TOKEN = 1792
GL_FEEDBACK_BUFFER_POINTER = 3568
GL_FEEDBACK_BUFFER_SIZE = 3569
GL_FEEDBACK_BUFFER_TYPE = 3570
GL_SELECTION_BUFFER_POINTER = 3571
GL_SELECTION_BUFFER_SIZE = 3572
GL_FOG = 2912
GL_FOG_MODE = 2917
GL_FOG_DENSITY = 2914
GL_FOG_COLOR = 2918
GL_FOG_INDEX = 2913
GL_FOG_START = 2915
GL_FOG_END = 2916
GL_LINEAR = 9729
GL_EXP = 2048
GL_EXP2 = 2049
GL_LOGIC_OP = 3057
GL_INDEX_LOGIC_OP = 3057
GL_COLOR_LOGIC_OP = 3058
GL_LOGIC_OP_MODE = 3056
GL_CLEAR = 5376
GL_SET = 5391
GL_COPY = 5379
GL_COPY_INVERTED = 5388
GL_NOOP = 5381
GL_INVERT = 5386
GL_AND = 5377
GL_NAND = 5390
GL_OR = 5383
GL_NOR = 5384
GL_XOR = 5382
GL_EQUIV = 5385
GL_AND_REVERSE = 5378
GL_AND_INVERTED = 5380
GL_OR_REVERSE = 5387
GL_OR_INVERTED = 5389
GL_STENCIL_BITS = 3415
GL_STENCIL_TEST = 2960
GL_STENCIL_CLEAR_VALUE = 2961
GL_STENCIL_FUNC = 2962
GL_STENCIL_VALUE_MASK = 2963
GL_STENCIL_FAIL = 2964
GL_STENCIL_PASS_DEPTH_FAIL = 2965
GL_STENCIL_PASS_DEPTH_PASS = 2966
GL_STENCIL_REF = 2967
GL_STENCIL_WRITEMASK = 2968
GL_STENCIL_INDEX = 6401
GL_KEEP = 7680
GL_REPLACE = 7681
GL_INCR = 7682
GL_DECR = 7683
GL_NONE = 0
GL_LEFT = 1030
GL_RIGHT = 1031
GL_FRONT_LEFT = 1024
GL_FRONT_RIGHT = 1025
GL_BACK_LEFT = 1026
GL_BACK_RIGHT = 1027
GL_AUX0 = 1033
GL_AUX1 = 1034
GL_AUX2 = 1035
GL_AUX3 = 1036
GL_COLOR_INDEX = 6400
GL_RED = 6403
GL_GREEN = 6404
GL_BLUE = 6405
GL_ALPHA = 6406
GL_LUMINANCE = 6409
GL_LUMINANCE_ALPHA = 6410
GL_ALPHA_BITS = 3413
GL_RED_BITS = 3410
GL_GREEN_BITS = 3411
GL_BLUE_BITS = 3412
GL_INDEX_BITS = 3409
GL_SUBPIXEL_BITS = 3408
GL_AUX_BUFFERS = 3072
GL_READ_BUFFER = 3074
GL_DRAW_BUFFER = 3073
GL_DOUBLEBUFFER = 3122
GL_STEREO = 3123
GL_BITMAP = 6656
GL_COLOR = 6144
GL_DEPTH = 6145
GL_STENCIL = 6146
GL_DITHER = 3024
GL_RGB = 6407
GL_RGBA = 6408
GL_MAX_LIST_NESTING = 2865
GL_MAX_EVAL_ORDER = 3376
GL_MAX_LIGHTS = 3377
GL_MAX_CLIP_PLANES = 3378
GL_MAX_TEXTURE_SIZE = 3379
GL_MAX_PIXEL_MAP_TABLE = 3380
GL_MAX_ATTRIB_STACK_DEPTH = 3381
GL_MAX_MODELVIEW_STACK_DEPTH = 3382
GL_MAX_NAME_STACK_DEPTH = 3383
GL_MAX_PROJECTION_STACK_DEPTH = 3384
GL_MAX_TEXTURE_STACK_DEPTH = 3385
GL_MAX_VIEWPORT_DIMS = 3386
GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 3387
GL_ATTRIB_STACK_DEPTH = 2992
GL_CLIENT_ATTRIB_STACK_DEPTH = 2993
GL_COLOR_CLEAR_VALUE = 3106
GL_COLOR_WRITEMASK = 3107
GL_CURRENT_INDEX = 2817
GL_CURRENT_COLOR = 2816
GL_CURRENT_NORMAL = 2818
GL_CURRENT_RASTER_COLOR = 2820
GL_CURRENT_RASTER_DISTANCE = 2825
GL_CURRENT_RASTER_INDEX = 2821
GL_CURRENT_RASTER_POSITION = 2823
GL_CURRENT_RASTER_TEXTURE_COORDS = 2822
GL_CURRENT_RASTER_POSITION_VALID = 2824
GL_CURRENT_TEXTURE_COORDS = 2819
GL_INDEX_CLEAR_VALUE = 3104
GL_INDEX_MODE = 3120
GL_INDEX_WRITEMASK = 3105
GL_MODELVIEW_MATRIX = 2982
GL_MODELVIEW_STACK_DEPTH = 2979
GL_NAME_STACK_DEPTH = 3440
GL_PROJECTION_MATRIX = 2983
GL_PROJECTION_STACK_DEPTH = 2980
GL_RENDER_MODE = 3136
GL_RGBA_MODE = 3121
GL_TEXTURE_MATRIX = 2984
GL_TEXTURE_STACK_DEPTH = 2981
GL_VIEWPORT = 2978
GL_AUTO_NORMAL = 3456
GL_MAP1_COLOR_4 = 3472
GL_MAP1_INDEX = 3473
GL_MAP1_NORMAL = 3474
GL_MAP1_TEXTURE_COORD_1 = 3475
GL_MAP1_TEXTURE_COORD_2 = 3476
GL_MAP1_TEXTURE_COORD_3 = 3477
GL_MAP1_TEXTURE_COORD_4 = 3478
GL_MAP1_VERTEX_3 = 3479
GL_MAP1_VERTEX_4 = 3480
GL_MAP2_COLOR_4 = 3504
GL_MAP2_INDEX = 3505
GL_MAP2_NORMAL = 3506
GL_MAP2_TEXTURE_COORD_1 = 3507
GL_MAP2_TEXTURE_COORD_2 = 3508
GL_MAP2_TEXTURE_COORD_3 = 3509
GL_MAP2_TEXTURE_COORD_4 = 3510
GL_MAP2_VERTEX_3 = 3511
GL_MAP2_VERTEX_4 = 3512
GL_MAP1_GRID_DOMAIN = 3536
GL_MAP1_GRID_SEGMENTS = 3537
GL_MAP2_GRID_DOMAIN = 3538
GL_MAP2_GRID_SEGMENTS = 3539
GL_COEFF = 2560
GL_ORDER = 2561
GL_DOMAIN = 2562
GL_PERSPECTIVE_CORRECTION_HINT = 3152
GL_POINT_SMOOTH_HINT = 3153
GL_LINE_SMOOTH_HINT = 3154
GL_POLYGON_SMOOTH_HINT = 3155
GL_FOG_HINT = 3156
GL_DONT_CARE = 4352
GL_FASTEST = 4353
GL_NICEST = 4354
GL_SCISSOR_BOX = 3088
GL_SCISSOR_TEST = 3089
GL_MAP_COLOR = 3344
GL_MAP_STENCIL = 3345
GL_INDEX_SHIFT = 3346
GL_INDEX_OFFSET = 3347
GL_RED_SCALE = 3348
GL_RED_BIAS = 3349
GL_GREEN_SCALE = 3352
GL_GREEN_BIAS = 3353
GL_BLUE_SCALE = 3354
GL_BLUE_BIAS = 3355
GL_ALPHA_SCALE = 3356
GL_ALPHA_BIAS = 3357
GL_DEPTH_SCALE = 3358
GL_DEPTH_BIAS = 3359
GL_PIXEL_MAP_S_TO_S_SIZE = 3249
GL_PIXEL_MAP_I_TO_I_SIZE = 3248
GL_PIXEL_MAP_I_TO_R_SIZE = 3250
GL_PIXEL_MAP_I_TO_G_SIZE = 3251
GL_PIXEL_MAP_I_TO_B_SIZE = 3252
GL_PIXEL_MAP_I_TO_A_SIZE = 3253
GL_PIXEL_MAP_R_TO_R_SIZE = 3254
GL_PIXEL_MAP_G_TO_G_SIZE = 3255
GL_PIXEL_MAP_B_TO_B_SIZE = 3256
GL_PIXEL_MAP_A_TO_A_SIZE = 3257
GL_PIXEL_MAP_S_TO_S = 3185
GL_PIXEL_MAP_I_TO_I = 3184
GL_PIXEL_MAP_I_TO_R = 3186
GL_PIXEL_MAP_I_TO_G = 3187
GL_PIXEL_MAP_I_TO_B = 3188
GL_PIXEL_MAP_I_TO_A = 3189
GL_PIXEL_MAP_R_TO_R = 3190
GL_PIXEL_MAP_G_TO_G = 3191
GL_PIXEL_MAP_B_TO_B = 3192
GL_PIXEL_MAP_A_TO_A = 3193
GL_PACK_ALIGNMENT = 3333
GL_PACK_LSB_FIRST = 3329
GL_PACK_ROW_LENGTH = 3330
GL_PACK_SKIP_PIXELS = 3332
GL_PACK_SKIP_ROWS = 3331
GL_PACK_SWAP_BYTES = 3328
GL_UNPACK_ALIGNMENT = 3317
GL_UNPACK_LSB_FIRST = 3313
GL_UNPACK_ROW_LENGTH = 3314
GL_UNPACK_SKIP_PIXELS = 3316
GL_UNPACK_SKIP_ROWS = 3315
GL_UNPACK_SWAP_BYTES = 3312
GL_ZOOM_X = 3350
GL_ZOOM_Y = 3351
GL_TEXTURE_ENV = 8960
GL_TEXTURE_ENV_MODE = 8704
GL_TEXTURE_1D = 3552
GL_TEXTURE_2D = 3553
GL_TEXTURE_WRAP_S = 10242
GL_TEXTURE_WRAP_T = 10243
GL_TEXTURE_MAG_FILTER = 10240
GL_TEXTURE_MIN_FILTER = 10241
GL_TEXTURE_ENV_COLOR = 8705
GL_TEXTURE_GEN_S = 3168
GL_TEXTURE_GEN_T = 3169
GL_TEXTURE_GEN_R = 3170
GL_TEXTURE_GEN_Q = 3171
GL_TEXTURE_GEN_MODE = 9472
GL_TEXTURE_BORDER_COLOR = 4100
GL_TEXTURE_WIDTH = 4096
GL_TEXTURE_HEIGHT = 4097
GL_TEXTURE_BORDER = 4101
GL_TEXTURE_COMPONENTS = 4099
GL_TEXTURE_RED_SIZE = 32860
GL_TEXTURE_GREEN_SIZE = 32861
GL_TEXTURE_BLUE_SIZE = 32862
GL_TEXTURE_ALPHA_SIZE = 32863
GL_TEXTURE_LUMINANCE_SIZE = 32864
GL_TEXTURE_INTENSITY_SIZE = 32865
GL_NEAREST_MIPMAP_NEAREST = 9984
GL_NEAREST_MIPMAP_LINEAR = 9986
GL_LINEAR_MIPMAP_NEAREST = 9985
GL_LINEAR_MIPMAP_LINEAR = 9987
GL_OBJECT_LINEAR = 9217
GL_OBJECT_PLANE = 9473
GL_EYE_LINEAR = 9216
GL_EYE_PLANE = 9474
GL_SPHERE_MAP = 9218
GL_DECAL = 8449
GL_MODULATE = 8448
GL_NEAREST = 9728
GL_REPEAT = 10497
GL_CLAMP = 10496
GL_S = 8192
GL_T = 8193
GL_R = 8194
GL_Q = 8195
GL_VENDOR = 7936
GL_RENDERER = 7937
GL_VERSION = 7938
GL_EXTENSIONS = 7939
GL_NO_ERROR = 0
GL_INVALID_ENUM = 1280
GL_INVALID_VALUE = 1281
GL_INVALID_OPERATION = 1282
GL_STACK_OVERFLOW = 1283
GL_STACK_UNDERFLOW = 1284
GL_OUT_OF_MEMORY = 1285
GL_CURRENT_BIT = 1
GL_POINT_BIT = 2
GL_LINE_BIT = 4
GL_POLYGON_BIT = 8
GL_POLYGON_STIPPLE_BIT = 16
GL_PIXEL_MODE_BIT = 32
GL_LIGHTING_BIT = 64
GL_FOG_BIT = 128
GL_DEPTH_BUFFER_BIT = 256
GL_ACCUM_BUFFER_BIT = 512
GL_STENCIL_BUFFER_BIT = 1024
GL_VIEWPORT_BIT = 2048
GL_TRANSFORM_BIT = 4096
GL_ENABLE_BIT = 8192
GL_COLOR_BUFFER_BIT = 16384
GL_HINT_BIT = 32768
GL_EVAL_BIT = 65536
GL_LIST_BIT = 131072
GL_TEXTURE_BIT = 262144
GL_SCISSOR_BIT = 524288
GL_ALL_ATTRIB_BITS = 1048575
GL_PROXY_TEXTURE_1D = 32867
GL_PROXY_TEXTURE_2D = 32868
GL_TEXTURE_PRIORITY = 32870
GL_TEXTURE_RESIDENT = 32871
GL_TEXTURE_BINDING_1D = 32872
GL_TEXTURE_BINDING_2D = 32873
GL_TEXTURE_INTERNAL_FORMAT = 4099
GL_ALPHA4 = 32827
GL_ALPHA8 = 32828
GL_ALPHA12 = 32829
GL_ALPHA16 = 32830
GL_LUMINANCE4 = 32831
GL_LUMINANCE8 = 32832
GL_LUMINANCE12 = 32833
GL_LUMINANCE16 = 32834
GL_LUMINANCE4_ALPHA4 = 32835
GL_LUMINANCE6_ALPHA2 = 32836
GL_LUMINANCE8_ALPHA8 = 32837
GL_LUMINANCE12_ALPHA4 = 32838
GL_LUMINANCE12_ALPHA12 = 32839
GL_LUMINANCE16_ALPHA16 = 32840
GL_INTENSITY = 32841
GL_INTENSITY4 = 32842
GL_INTENSITY8 = 32843
GL_INTENSITY12 = 32844
GL_INTENSITY16 = 32845
GL_R3_G3_B2 = 10768
GL_RGB4 = 32847
GL_RGB5 = 32848
GL_RGB8 = 32849
GL_RGB10 = 32850
GL_RGB12 = 32851
GL_RGB16 = 32852
GL_RGBA2 = 32853
GL_RGBA4 = 32854
GL_RGB5_A1 = 32855
GL_RGBA8 = 32856
GL_RGB10_A2 = 32857
GL_RGBA12 = 32858
GL_RGBA16 = 32859
GL_CLIENT_PIXEL_STORE_BIT = 1
GL_CLIENT_VERTEX_ARRAY_BIT = 2
GL_ALL_CLIENT_ATTRIB_BITS = 4294967295
GL_CLIENT_ALL_ATTRIB_BITS = 4294967295
GL_RESCALE_NORMAL = 32826
GL_CLAMP_TO_EDGE = 33071
GL_MAX_ELEMENTS_VERTICES = 33000
GL_MAX_ELEMENTS_INDICES = 33001
GL_BGR = 32992
GL_BGRA = 32993
GL_UNSIGNED_BYTE_3_3_2 = 32818
GL_UNSIGNED_BYTE_2_3_3_REV = 33634
GL_UNSIGNED_SHORT_5_6_5 = 33635
GL_UNSIGNED_SHORT_5_6_5_REV = 33636
GL_UNSIGNED_SHORT_4_4_4_4 = 32819
GL_UNSIGNED_SHORT_4_4_4_4_REV = 33637
GL_UNSIGNED_SHORT_5_5_5_1 = 32820
GL_UNSIGNED_SHORT_1_5_5_5_REV = 33638
GL_UNSIGNED_INT_8_8_8_8 = 32821
GL_UNSIGNED_INT_8_8_8_8_REV = 33639
GL_UNSIGNED_INT_10_10_10_2 = 32822
GL_UNSIGNED_INT_2_10_10_10_REV = 33640
GL_LIGHT_MODEL_COLOR_CONTROL = 33272
GL_SINGLE_COLOR = 33273
GL_SEPARATE_SPECULAR_COLOR = 33274
GL_TEXTURE_MIN_LOD = 33082
GL_TEXTURE_MAX_LOD = 33083
GL_TEXTURE_BASE_LEVEL = 33084
GL_TEXTURE_MAX_LEVEL = 33085
GL_SMOOTH_POINT_SIZE_RANGE = 2834
GL_SMOOTH_POINT_SIZE_GRANULARITY = 2835
GL_SMOOTH_LINE_WIDTH_RANGE = 2850
GL_SMOOTH_LINE_WIDTH_GRANULARITY = 2851
GL_ALIASED_POINT_SIZE_RANGE = 33901
GL_ALIASED_LINE_WIDTH_RANGE = 33902
GL_PACK_SKIP_IMAGES = 32875
GL_PACK_IMAGE_HEIGHT = 32876
GL_UNPACK_SKIP_IMAGES = 32877
GL_UNPACK_IMAGE_HEIGHT = 32878
GL_TEXTURE_3D = 32879
GL_PROXY_TEXTURE_3D = 32880
GL_TEXTURE_DEPTH = 32881
GL_TEXTURE_WRAP_R = 32882
GL_MAX_3D_TEXTURE_SIZE = 32883
GL_TEXTURE_BINDING_3D = 32874
GL_CONSTANT_COLOR = 32769
GL_ONE_MINUS_CONSTANT_COLOR = 32770
GL_CONSTANT_ALPHA = 32771
GL_ONE_MINUS_CONSTANT_ALPHA = 32772
GL_COLOR_TABLE = 32976
GL_POST_CONVOLUTION_COLOR_TABLE = 32977
GL_POST_COLOR_MATRIX_COLOR_TABLE = 32978
GL_PROXY_COLOR_TABLE = 32979
GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = 32980
GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = 32981
GL_COLOR_TABLE_SCALE = 32982
GL_COLOR_TABLE_BIAS = 32983
GL_COLOR_TABLE_FORMAT = 32984
GL_COLOR_TABLE_WIDTH = 32985
GL_COLOR_TABLE_RED_SIZE = 32986
GL_COLOR_TABLE_GREEN_SIZE = 32987
GL_COLOR_TABLE_BLUE_SIZE = 32988
GL_COLOR_TABLE_ALPHA_SIZE = 32989
GL_COLOR_TABLE_LUMINANCE_SIZE = 32990
GL_COLOR_TABLE_INTENSITY_SIZE = 32991
GL_CONVOLUTION_1D = 32784
GL_CONVOLUTION_2D = 32785
GL_SEPARABLE_2D = 32786
GL_CONVOLUTION_BORDER_MODE = 32787
GL_CONVOLUTION_FILTER_SCALE = 32788
GL_CONVOLUTION_FILTER_BIAS = 32789
GL_REDUCE = 32790
GL_CONVOLUTION_FORMAT = 32791
GL_CONVOLUTION_WIDTH = 32792
GL_CONVOLUTION_HEIGHT = 32793
GL_MAX_CONVOLUTION_WIDTH = 32794
GL_MAX_CONVOLUTION_HEIGHT = 32795
GL_POST_CONVOLUTION_RED_SCALE = 32796
GL_POST_CONVOLUTION_GREEN_SCALE = 32797
GL_POST_CONVOLUTION_BLUE_SCALE = 32798
GL_POST_CONVOLUTION_ALPHA_SCALE = 32799
GL_POST_CONVOLUTION_RED_BIAS = 32800
GL_POST_CONVOLUTION_GREEN_BIAS = 32801
GL_POST_CONVOLUTION_BLUE_BIAS = 32802
GL_POST_CONVOLUTION_ALPHA_BIAS = 32803
GL_CONSTANT_BORDER = 33105
GL_REPLICATE_BORDER = 33107
GL_CONVOLUTION_BORDER_COLOR = 33108
GL_COLOR_MATRIX = 32945
GL_COLOR_MATRIX_STACK_DEPTH = 32946
GL_MAX_COLOR_MATRIX_STACK_DEPTH = 32947
GL_POST_COLOR_MATRIX_RED_SCALE = 32948
GL_POST_COLOR_MATRIX_GREEN_SCALE = 32949
GL_POST_COLOR_MATRIX_BLUE_SCALE = 32950
GL_POST_COLOR_MATRIX_ALPHA_SCALE = 32951
GL_POST_COLOR_MATRIX_RED_BIAS = 32952
GL_POST_COLOR_MATRIX_GREEN_BIAS = 32953
GL_POST_COLOR_MATRIX_BLUE_BIAS = 32954
GL_POST_COLOR_MATRIX_ALPHA_BIAS = 32955
GL_HISTOGRAM = 32804
GL_PROXY_HISTOGRAM = 32805
GL_HISTOGRAM_WIDTH = 32806
GL_HISTOGRAM_FORMAT = 32807
GL_HISTOGRAM_RED_SIZE = 32808
GL_HISTOGRAM_GREEN_SIZE = 32809
GL_HISTOGRAM_BLUE_SIZE = 32810
GL_HISTOGRAM_ALPHA_SIZE = 32811
GL_HISTOGRAM_LUMINANCE_SIZE = 32812
GL_HISTOGRAM_SINK = 32813
GL_MINMAX = 32814
GL_MINMAX_FORMAT = 32815
GL_MINMAX_SINK = 32816
GL_TABLE_TOO_LARGE = 32817
GL_BLEND_EQUATION = 32777
GL_MIN = 32775
GL_MAX = 32776
GL_FUNC_ADD = 32774
GL_FUNC_SUBTRACT = 32778
GL_FUNC_REVERSE_SUBTRACT = 32779
GL_BLEND_COLOR = 32773
GL_TEXTURE0 = 33984
GL_TEXTURE1 = 33985
GL_TEXTURE2 = 33986
GL_TEXTURE3 = 33987
GL_TEXTURE4 = 33988
GL_TEXTURE5 = 33989
GL_TEXTURE6 = 33990
GL_TEXTURE7 = 33991
GL_TEXTURE8 = 33992
GL_TEXTURE9 = 33993
GL_TEXTURE10 = 33994
GL_TEXTURE11 = 33995
GL_TEXTURE12 = 33996
GL_TEXTURE13 = 33997
GL_TEXTURE14 = 33998
GL_TEXTURE15 = 33999
GL_TEXTURE16 = 34000
GL_TEXTURE17 = 34001
GL_TEXTURE18 = 34002
GL_TEXTURE19 = 34003
GL_TEXTURE20 = 34004
GL_TEXTURE21 = 34005
GL_TEXTURE22 = 34006
GL_TEXTURE23 = 34007
GL_TEXTURE24 = 34008
GL_TEXTURE25 = 34009
GL_TEXTURE26 = 34010
GL_TEXTURE27 = 34011
GL_TEXTURE28 = 34012
GL_TEXTURE29 = 34013
GL_TEXTURE30 = 34014
GL_TEXTURE31 = 34015
GL_ACTIVE_TEXTURE = 34016
GL_CLIENT_ACTIVE_TEXTURE = 34017
GL_MAX_TEXTURE_UNITS = 34018
GL_NORMAL_MAP = 34065
GL_REFLECTION_MAP = 34066
GL_TEXTURE_CUBE_MAP = 34067
GL_TEXTURE_BINDING_CUBE_MAP = 34068
GL_TEXTURE_CUBE_MAP_POSITIVE_X = 34069
GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 34070
GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 34071
GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072
GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 34073
GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074
GL_PROXY_TEXTURE_CUBE_MAP = 34075
GL_MAX_CUBE_MAP_TEXTURE_SIZE = 34076
GL_COMPRESSED_ALPHA = 34025
GL_COMPRESSED_LUMINANCE = 34026
GL_COMPRESSED_LUMINANCE_ALPHA = 34027
GL_COMPRESSED_INTENSITY = 34028
GL_COMPRESSED_RGB = 34029
GL_COMPRESSED_RGBA = 34030
GL_TEXTURE_COMPRESSION_HINT = 34031
GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 34464
GL_TEXTURE_COMPRESSED = 34465
GL_NUM_COMPRESSED_TEXTURE_FORMATS = 34466
GL_COMPRESSED_TEXTURE_FORMATS = 34467
GL_MULTISAMPLE = 32925
GL_SAMPLE_ALPHA_TO_COVERAGE = 32926
GL_SAMPLE_ALPHA_TO_ONE = 32927
GL_SAMPLE_COVERAGE = 32928
GL_SAMPLE_BUFFERS = 32936
GL_SAMPLES = 32937
GL_SAMPLE_COVERAGE_VALUE = 32938
GL_SAMPLE_COVERAGE_INVERT = 32939
GL_MULTISAMPLE_BIT = 536870912
GL_TRANSPOSE_MODELVIEW_MATRIX = 34019
GL_TRANSPOSE_PROJECTION_MATRIX = 34020
GL_TRANSPOSE_TEXTURE_MATRIX = 34021
GL_TRANSPOSE_COLOR_MATRIX = 34022
GL_COMBINE = 34160
GL_COMBINE_RGB = 34161
GL_COMBINE_ALPHA = 34162
GL_SOURCE0_RGB = 34176
GL_SOURCE1_RGB = 34177
GL_SOURCE2_RGB = 34178
GL_SOURCE0_ALPHA = 34184
GL_SOURCE1_ALPHA = 34185
GL_SOURCE2_ALPHA = 34186
GL_OPERAND0_RGB = 34192
GL_OPERAND1_RGB = 34193
GL_OPERAND2_RGB = 34194
GL_OPERAND0_ALPHA = 34200
GL_OPERAND1_ALPHA = 34201
GL_OPERAND2_ALPHA = 34202
GL_RGB_SCALE = 34163
GL_ADD_SIGNED = 34164
GL_INTERPOLATE = 34165
GL_SUBTRACT = 34023
GL_CONSTANT = 34166
GL_PRIMARY_COLOR = 34167
GL_PREVIOUS = 34168
GL_DOT3_RGB = 34478
GL_DOT3_RGBA = 34479
GL_CLAMP_TO_BORDER = 33069
GL_ARB_multitexture = 1
GL_TEXTURE0_ARB = 33984
GL_TEXTURE1_ARB = 33985
GL_TEXTURE2_ARB = 33986
GL_TEXTURE3_ARB = 33987
GL_TEXTURE4_ARB = 33988
GL_TEXTURE5_ARB = 33989
GL_TEXTURE6_ARB = 33990
GL_TEXTURE7_ARB = 33991
GL_TEXTURE8_ARB = 33992
GL_TEXTURE9_ARB = 33993
GL_TEXTURE10_ARB = 33994
GL_TEXTURE11_ARB = 33995
GL_TEXTURE12_ARB = 33996
GL_TEXTURE13_ARB = 33997
GL_TEXTURE14_ARB = 33998
GL_TEXTURE15_ARB = 33999
GL_TEXTURE16_ARB = 34000
GL_TEXTURE17_ARB = 34001
GL_TEXTURE18_ARB = 34002
GL_TEXTURE19_ARB = 34003
GL_TEXTURE20_ARB = 34004
GL_TEXTURE21_ARB = 34005
GL_TEXTURE22_ARB = 34006
GL_TEXTURE23_ARB = 34007
GL_TEXTURE24_ARB = 34008
GL_TEXTURE25_ARB = 34009
GL_TEXTURE26_ARB = 34010
GL_TEXTURE27_ARB = 34011
GL_TEXTURE28_ARB = 34012
GL_TEXTURE29_ARB = 34013
GL_TEXTURE30_ARB = 34014
GL_TEXTURE31_ARB = 34015
GL_ACTIVE_TEXTURE_ARB = 34016
GL_CLIENT_ACTIVE_TEXTURE_ARB = 34017
GL_MAX_TEXTURE_UNITS_ARB = 34018
GL_MESA_shader_debug = 1
GL_DEBUG_OBJECT_MESA = 34649
GL_DEBUG_PRINT_MESA = 34650
GL_DEBUG_ASSERT_MESA = 34651
GL_MESA_packed_depth_stencil = 1
GL_DEPTH_STENCIL_MESA = 34640
GL_UNSIGNED_INT_24_8_MESA = 34641
GL_UNSIGNED_INT_8_24_REV_MESA = 34642
GL_UNSIGNED_SHORT_15_1_MESA = 34643
GL_UNSIGNED_SHORT_1_15_REV_MESA = 34644
GL_MESA_program_debug = 1
GL_FRAGMENT_PROGRAM_POSITION_MESA = 35760
GL_FRAGMENT_PROGRAM_CALLBACK_MESA = 35761
GL_FRAGMENT_PROGRAM_CALLBACK_FUNC_MESA = 35762
GL_FRAGMENT_PROGRAM_CALLBACK_DATA_MESA = 35763
GL_VERTEX_PROGRAM_POSITION_MESA = 35764
GL_VERTEX_PROGRAM_CALLBACK_MESA = 35765
GL_VERTEX_PROGRAM_CALLBACK_FUNC_MESA = 35766
GL_VERTEX_PROGRAM_CALLBACK_DATA_MESA = 35767
GL_MESA_texture_array = 1
GL_TEXTURE_1D_ARRAY_EXT = 35864
GL_PROXY_TEXTURE_1D_ARRAY_EXT = 35865
GL_TEXTURE_2D_ARRAY_EXT = 35866
GL_PROXY_TEXTURE_2D_ARRAY_EXT = 35867
GL_TEXTURE_BINDING_1D_ARRAY_EXT = 35868
GL_TEXTURE_BINDING_2D_ARRAY_EXT = 35869
GL_MAX_ARRAY_TEXTURE_LAYERS_EXT = 35071
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = 36052
GL_ATI_blend_equation_separate = 1
GL_ALPHA_BLEND_EQUATION_ATI = 34877
GL_OES_EGL_image = 1
GLX_VERSION_1_1 = 1
GLX_VERSION_1_2 = 1
GLX_VERSION_1_3 = 1
GLX_VERSION_1_4 = 1
GLX_EXTENSION_NAME = "GLX"
GLX_USE_GL = 1
GLX_BUFFER_SIZE = 2
GLX_LEVEL = 3
GLX_RGBA = 4
GLX_DOUBLEBUFFER = 5
GLX_STEREO = 6
GLX_AUX_BUFFERS = 7
GLX_RED_SIZE = 8
GLX_GREEN_SIZE = 9
GLX_BLUE_SIZE = 10
GLX_ALPHA_SIZE = 11
GLX_DEPTH_SIZE = 12
GLX_STENCIL_SIZE = 13
GLX_ACCUM_RED_SIZE = 14
GLX_ACCUM_GREEN_SIZE = 15
GLX_ACCUM_BLUE_SIZE = 16
GLX_ACCUM_ALPHA_SIZE = 17
GLX_BAD_SCREEN = 1
GLX_BAD_ATTRIBUTE = 2
GLX_NO_EXTENSION = 3
GLX_BAD_VISUAL = 4
GLX_BAD_CONTEXT = 5
GLX_BAD_VALUE = 6
GLX_BAD_ENUM = 7
GLX_VENDOR = 1
GLX_VERSION = 2
GLX_EXTENSIONS = 3
GLX_CONFIG_CAVEAT = 32
GLX_DONT_CARE = 4294967295
GLX_X_VISUAL_TYPE = 34
GLX_TRANSPARENT_TYPE = 35
GLX_TRANSPARENT_INDEX_VALUE = 36
GLX_TRANSPARENT_RED_VALUE = 37
GLX_TRANSPARENT_GREEN_VALUE = 38
GLX_TRANSPARENT_BLUE_VALUE = 39
GLX_TRANSPARENT_ALPHA_VALUE = 40
GLX_WINDOW_BIT = 1
GLX_PIXMAP_BIT = 2
GLX_PBUFFER_BIT = 4
GLX_AUX_BUFFERS_BIT = 16
GLX_FRONT_LEFT_BUFFER_BIT = 1
GLX_FRONT_RIGHT_BUFFER_BIT = 2
GLX_BACK_LEFT_BUFFER_BIT = 4
GLX_BACK_RIGHT_BUFFER_BIT = 8
GLX_DEPTH_BUFFER_BIT = 32
GLX_STENCIL_BUFFER_BIT = 64
GLX_ACCUM_BUFFER_BIT = 128
GLX_NONE = 32768
GLX_SLOW_CONFIG = 32769
GLX_TRUE_COLOR = 32770
GLX_DIRECT_COLOR = 32771
GLX_PSEUDO_COLOR = 32772
GLX_STATIC_COLOR = 32773
GLX_GRAY_SCALE = 32774
GLX_STATIC_GRAY = 32775
GLX_TRANSPARENT_RGB = 32776
GLX_TRANSPARENT_INDEX = 32777
GLX_VISUAL_ID = 32779
GLX_SCREEN = 32780
GLX_NON_CONFORMANT_CONFIG = 32781
GLX_DRAWABLE_TYPE = 32784
GLX_RENDER_TYPE = 32785
GLX_X_RENDERABLE = 32786
GLX_FBCONFIG_ID = 32787
GLX_RGBA_TYPE = 32788
GLX_COLOR_INDEX_TYPE = 32789
GLX_MAX_PBUFFER_WIDTH = 32790
GLX_MAX_PBUFFER_HEIGHT = 32791
GLX_MAX_PBUFFER_PIXELS = 32792
GLX_PRESERVED_CONTENTS = 32795
GLX_LARGEST_PBUFFER = 32796
GLX_WIDTH = 32797
GLX_HEIGHT = 32798
GLX_EVENT_MASK = 32799
GLX_DAMAGED = 32800
GLX_SAVED = 32801
GLX_WINDOW = 32802
GLX_PBUFFER = 32803
GLX_PBUFFER_HEIGHT = 32832
GLX_PBUFFER_WIDTH = 32833
GLX_RGBA_BIT = 1
GLX_COLOR_INDEX_BIT = 2
GLX_PBUFFER_CLOBBER_MASK = 134217728
GLX_SAMPLE_BUFFERS = 100000
GLX_SAMPLES = 100001
GLX_PbufferClobber = 0
GLX_BufferSwapComplete = 1
__GLX_NUMBER_EVENTS = 17
GLX_ARB_get_proc_address = 1
GLX_ARB_render_texture = 1
GLX_NV_float_buffer = 1
GLX_FLOAT_COMPONENTS_NV = 8368
GLX_MESA_swap_frame_usage = 1
GLX_MESA_swap_control = 1
GLX_EXT_texture_from_pixmap = 1
GLX_BIND_TO_TEXTURE_RGB_EXT = 8400
GLX_BIND_TO_TEXTURE_RGBA_EXT = 8401
GLX_BIND_TO_MIPMAP_TEXTURE_EXT = 8402
GLX_BIND_TO_TEXTURE_TARGETS_EXT = 8403
GLX_Y_INVERTED_EXT = 8404
GLX_TEXTURE_FORMAT_EXT = 8405
GLX_TEXTURE_TARGET_EXT = 8406
GLX_MIPMAP_TEXTURE_EXT = 8407
GLX_TEXTURE_FORMAT_NONE_EXT = 8408
GLX_TEXTURE_FORMAT_RGB_EXT = 8409
GLX_TEXTURE_FORMAT_RGBA_EXT = 8410
GLX_TEXTURE_1D_BIT_EXT = 1
GLX_TEXTURE_2D_BIT_EXT = 2
GLX_TEXTURE_RECTANGLE_BIT_EXT = 4
GLX_TEXTURE_1D_EXT = 8411
GLX_TEXTURE_2D_EXT = 8412
GLX_TEXTURE_RECTANGLE_EXT = 8413
GLX_FRONT_LEFT_EXT = 8414
GLX_FRONT_RIGHT_EXT = 8415
GLX_BACK_LEFT_EXT = 8416
GLX_BACK_RIGHT_EXT = 8417
GLX_FRONT_EXT = 8414
GLX_BACK_EXT = 8416
GLX_AUX0_EXT = 8418
GLX_AUX1_EXT = 8419
GLX_AUX2_EXT = 8420
GLX_AUX3_EXT = 8421
GLX_AUX4_EXT = 8422
GLX_AUX5_EXT = 8423
GLX_AUX6_EXT = 8424
GLX_AUX7_EXT = 8425
GLX_AUX8_EXT = 8426
GLX_AUX9_EXT = 8427
## enums ##
XOMOrientation_LTR_TTB = 0 
XOMOrientation_RTL_TTB = 1 
XOMOrientation_TTB_LTR = 2 
XOMOrientation_TTB_RTL = 3 
XOMOrientation_Context = 4 

XIMForwardChar = 0 
XIMBackwardChar = 1 
XIMForwardWord = 2 
XIMBackwardWord = 3 
XIMCaretUp = 4 
XIMCaretDown = 5 
XIMNextLine = 6 
XIMPreviousLine = 7 
XIMLineStart = 8 
XIMLineEnd = 9 
XIMAbsolutePosition = 10 
XIMDontChange = 11 

XIMIsInvisible = 0 
XIMIsPrimary = 1 
XIMIsSecondary = 2 

XIMTextType = 0 
XIMBitmapType = 1 

XStringStyle = 0 
XCompoundTextStyle = 1 
XTextStyle = 2 
XStdICCTextStyle = 3 
XUTF8StringStyle = 4 

## simple enums ##
RPYTHONIC_GLOBAL_ENUMS = { 
 "XOMOrientation_LTR_TTB" : 0,  "XOMOrientation_RTL_TTB" : 1,  "XOMOrientation_TTB_LTR" : 2,  "XOMOrientation_TTB_RTL" : 3,  "XOMOrientation_Context" : 4, 
 "XIMForwardChar" : 0,  "XIMBackwardChar" : 1,  "XIMForwardWord" : 2,  "XIMBackwardWord" : 3,  "XIMCaretUp" : 4,  "XIMCaretDown" : 5,  "XIMNextLine" : 6,  "XIMPreviousLine" : 7,  "XIMLineStart" : 8,  "XIMLineEnd" : 9,  "XIMAbsolutePosition" : 10,  "XIMDontChange" : 11, 
 "XIMIsInvisible" : 0,  "XIMIsPrimary" : 1,  "XIMIsSecondary" : 2, 
 "XIMTextType" : 0,  "XIMBitmapType" : 1, 
 "XStringStyle" : 0,  "XCompoundTextStyle" : 1,  "XTextStyle" : 2,  "XStdICCTextStyle" : 3,  "XUTF8StringStyle" : 4, 

}
class imaxdiv_t(_rpythonic_struct_): pass
class __GLsync(_rpythonic_struct_): pass
class _cl_context(_rpythonic_struct_): pass
class _cl_event(_rpythonic_struct_): pass
class __fsid_t(_rpythonic_struct_): _array_wrapper_ = True
class __sigset_t(_rpythonic_struct_): _array_wrapper_ = True
class timespec(_rpythonic_struct_): pass
class timeval(_rpythonic_struct_): pass
class fd_set(_rpythonic_struct_): _array_wrapper_ = True
class pthread_attr_t(ctypes.Union): pass
class __pthread_internal_slist(_rpythonic_struct_): pass
class pthread_mutex_t(ctypes.Union): pass
class __pthread_mutex_s(_rpythonic_struct_): pass
class pthread_mutexattr_t(ctypes.Union): pass
class pthread_cond_t(ctypes.Union): pass
class pthread_condattr_t(ctypes.Union): pass
class pthread_rwlock_t(ctypes.Union): pass
class __data(_rpythonic_struct_): pass
class pthread_rwlockattr_t(ctypes.Union): pass
class pthread_barrier_t(ctypes.Union): pass
class pthread_barrierattr_t(ctypes.Union): pass
class _XExtData(_rpythonic_struct_): pass
class XExtCodes(_rpythonic_struct_): pass
class XPixmapFormatValues(_rpythonic_struct_): pass
class XGCValues(_rpythonic_struct_): pass
class _XGC(_rpythonic_struct_): pass
class Visual(_rpythonic_struct_): pass
class Depth(_rpythonic_struct_): pass
class _XDisplay(_rpythonic_struct_): pass
class Screen(_rpythonic_struct_): pass
class ScreenFormat(_rpythonic_struct_): pass
class XSetWindowAttributes(_rpythonic_struct_): pass
class XWindowAttributes(_rpythonic_struct_): pass
class XHostAddress(_rpythonic_struct_): pass
class XServerInterpretedAddress(_rpythonic_struct_): pass
class _XImage(_rpythonic_struct_): pass
class funcs(_rpythonic_struct_): pass
class XWindowChanges(_rpythonic_struct_): pass
class XColor(_rpythonic_struct_): pass
class XSegment(_rpythonic_struct_): pass
class XPoint(_rpythonic_struct_): pass
class XRectangle(_rpythonic_struct_): pass
class XArc(_rpythonic_struct_): pass
class XKeyboardControl(_rpythonic_struct_): pass
class XKeyboardState(_rpythonic_struct_): _array_wrapper_ = True
class XTimeCoord(_rpythonic_struct_): pass
class XModifierKeymap(_rpythonic_struct_): pass
class _XPrivate(_rpythonic_struct_): pass
class _XrmHashBucketRec(_rpythonic_struct_): pass
class _XPrivDisplay(_rpythonic_struct_): pass
class XKeyEvent(_rpythonic_struct_): pass
class XButtonEvent(_rpythonic_struct_): pass
class XMotionEvent(_rpythonic_struct_): pass
class XCrossingEvent(_rpythonic_struct_): pass
class XFocusChangeEvent(_rpythonic_struct_): pass
class XKeymapEvent(_rpythonic_struct_): _array_wrapper_ = True
class XExposeEvent(_rpythonic_struct_): pass
class XGraphicsExposeEvent(_rpythonic_struct_): pass
class XNoExposeEvent(_rpythonic_struct_): pass
class XVisibilityEvent(_rpythonic_struct_): pass
class XCreateWindowEvent(_rpythonic_struct_): pass
class XDestroyWindowEvent(_rpythonic_struct_): pass
class XUnmapEvent(_rpythonic_struct_): pass
class XMapEvent(_rpythonic_struct_): pass
class XMapRequestEvent(_rpythonic_struct_): pass
class XReparentEvent(_rpythonic_struct_): pass
class XConfigureEvent(_rpythonic_struct_): pass
class XGravityEvent(_rpythonic_struct_): pass
class XResizeRequestEvent(_rpythonic_struct_): pass
class XConfigureRequestEvent(_rpythonic_struct_): pass
class XCirculateEvent(_rpythonic_struct_): pass
class XCirculateRequestEvent(_rpythonic_struct_): pass
class XPropertyEvent(_rpythonic_struct_): pass
class XSelectionClearEvent(_rpythonic_struct_): pass
class XSelectionRequestEvent(_rpythonic_struct_): pass
class XSelectionEvent(_rpythonic_struct_): pass
class XColormapEvent(_rpythonic_struct_): pass
class XClientMessageEvent(_rpythonic_struct_): pass
class data(ctypes.Union): pass
class XMappingEvent(_rpythonic_struct_): pass
class XErrorEvent(_rpythonic_struct_): pass
class XAnyEvent(_rpythonic_struct_): pass
class XGenericEvent(_rpythonic_struct_): pass
class XGenericEventCookie(_rpythonic_struct_): pass
class _XEvent(ctypes.Union): pass
class XCharStruct(_rpythonic_struct_): pass
class XFontProp(_rpythonic_struct_): pass
class XFontStruct(_rpythonic_struct_): pass
class XTextItem(_rpythonic_struct_): pass
class XChar2b(_rpythonic_struct_): pass
class XTextItem16(_rpythonic_struct_): pass
class XEDataObject(ctypes.Union): pass
class XFontSetExtents(_rpythonic_struct_): pass
class _XOM(_rpythonic_struct_): pass
class _XOC(_rpythonic_struct_): pass
class XmbTextItem(_rpythonic_struct_): pass
class XwcTextItem(_rpythonic_struct_): pass
class XOMCharSetList(_rpythonic_struct_): pass
class XOMOrientation(_rpythonic_struct_): pass
class XOMFontInfo(_rpythonic_struct_): pass
class _XIM(_rpythonic_struct_): pass
class _XIC(_rpythonic_struct_): pass
class XIMStyles(_rpythonic_struct_): pass
class XIMCallback(_rpythonic_struct_): pass
class XICCallback(_rpythonic_struct_): pass
class _XIMText(_rpythonic_struct_): pass
class string(ctypes.Union): pass
class _XIMPreeditStateNotifyCallbackStruct(_rpythonic_struct_): pass
class _XIMStringConversionText(_rpythonic_struct_): pass
class _XIMStringConversionCallbackStruct(_rpythonic_struct_): pass
class _XIMPreeditDrawCallbackStruct(_rpythonic_struct_): pass
class _XIMPreeditCaretCallbackStruct(_rpythonic_struct_): pass
class _XIMStatusDrawCallbackStruct(_rpythonic_struct_): pass
class _XIMHotKeyTrigger(_rpythonic_struct_): pass
class _XIMHotKeyTriggers(_rpythonic_struct_): pass
class XIMValuesList(_rpythonic_struct_): pass
class XSizeHints(_rpythonic_struct_): pass
class min_aspect(_rpythonic_struct_): pass
class max_aspect(_rpythonic_struct_): pass
class XWMHints(_rpythonic_struct_): pass
class XTextProperty(_rpythonic_struct_): pass
class XIconSize(_rpythonic_struct_): pass
class XClassHint(_rpythonic_struct_): pass
class _XComposeStatus(_rpythonic_struct_): pass
class _XRegion(_rpythonic_struct_): pass
class XVisualInfo(_rpythonic_struct_): pass
class XStandardColormap(_rpythonic_struct_): pass
class __GLXcontextRec(_rpythonic_struct_): pass
class __GLXFBConfigRec(_rpythonic_struct_): pass
class GLXBufferClobberEventSGIX(_rpythonic_struct_): pass
class GLXHyperpipeNetworkSGIX(_rpythonic_struct_): _array_wrapper_ = True
class GLXHyperpipeConfigSGIX(_rpythonic_struct_): _array_wrapper_ = True
class GLXPipeRect(_rpythonic_struct_): _array_wrapper_ = True
class GLXPipeRectLimits(_rpythonic_struct_): _array_wrapper_ = True
class GLXPbufferClobberEvent(_rpythonic_struct_): pass
class GLXBufferSwapComplete(_rpythonic_struct_): pass
class __GLXEvent(ctypes.Union): pass
## union and structures ##
__freeze_rpythonic_struct( imaxdiv_t, [
	( "quot", ctypes.c_longlong ),
	( "rem", ctypes.c_longlong ),
])

__freeze_rpythonic_struct( __GLsync, [
])

__freeze_rpythonic_struct( _cl_context, [
])

__freeze_rpythonic_struct( _cl_event, [
])

__freeze_rpythonic_struct( __fsid_t, [
	( "__val", ( ctypes.c_int * 2 ) ),
])

__freeze_rpythonic_struct( __sigset_t, [
	( "__val", ctypes.c_uint64 ),
])

__freeze_rpythonic_struct( timespec, [
	( "tv_sec", ctypes.c_int64 ),
	( "tv_nsec", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( timeval, [
	( "tv_sec", ctypes.c_int64 ),
	( "tv_usec", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( fd_set, [
	( "__fds_bits", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_attr_t, [
	( "__size", ( ctypes.c_char * 36 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( __pthread_internal_slist, [
	( "__next", ctypes.POINTER(__pthread_internal_slist) ),
])

__freeze_rpythonic_struct( __pthread_mutex_s, [
	( "__lock", ctypes.c_int ),
	( "__count", ctypes.c_uint ),
	( "__owner", ctypes.c_int ),
	( "__kind", ctypes.c_int ),
	( "__nusers", ctypes.c_uint ),
	#opaque-warning# <rpythonic.rpythonic.SomeThing object at 0xc784a4c>
])

__freeze_rpythonic_struct( pthread_mutex_t, [
	( "__data", __pthread_mutex_s ),
	( "__size", ( ctypes.c_char * 24 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_mutexattr_t, [
	( "__size", ( ctypes.c_char * 4 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( __data, [
	( "__lock", ctypes.c_int ),
	( "__nr_readers", ctypes.c_uint ),
	( "__readers_wakeup", ctypes.c_uint ),
	( "__writer_wakeup", ctypes.c_uint ),
	( "__nr_readers_queued", ctypes.c_uint ),
	( "__nr_writers_queued", ctypes.c_uint ),
	( "__flags", ctypes.c_ubyte ),
	( "__shared", ctypes.c_ubyte ),
	( "__pad1", ctypes.c_ubyte ),
	( "__pad2", ctypes.c_ubyte ),
	( "__writer", ctypes.c_int ),
])

__freeze_rpythonic_struct( pthread_cond_t, [
	( "__data", __data ),
	( "__size", ( ctypes.c_char * 48 ) ),
	( "__align", ctypes.c_longlong ),
])

__freeze_rpythonic_struct( pthread_condattr_t, [
	( "__size", ( ctypes.c_char * 4 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_rwlock_t, [
	( "__data", __data ),
	( "__size", ( ctypes.c_char * 32 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_rwlockattr_t, [
	( "__size", ( ctypes.c_char * 8 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_barrier_t, [
	( "__size", ( ctypes.c_char * 20 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_barrierattr_t, [
	( "__size", ( ctypes.c_char * 4 ) ),
	( "__align", ctypes.c_int ),
])

__freeze_rpythonic_struct( _XExtData, [
	( "number", ctypes.c_int ),
	( "next", ctypes.POINTER(_XExtData) ),
	( "free_private", ctypes.c_void_p ),
	( "private_data", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( XExtCodes, [
	( "extension", ctypes.c_int ),
	( "major_opcode", ctypes.c_int ),
	( "first_event", ctypes.c_int ),
	( "first_error", ctypes.c_int ),
])

__freeze_rpythonic_struct( XPixmapFormatValues, [
	( "depth", ctypes.c_int ),
	( "bits_per_pixel", ctypes.c_int ),
	( "scanline_pad", ctypes.c_int ),
])

__freeze_rpythonic_struct( XGCValues, [
	( "function", ctypes.c_int ),
	( "plane_mask", ctypes.c_ulong ),
	( "foreground", ctypes.c_ulong ),
	( "background", ctypes.c_ulong ),
	( "line_width", ctypes.c_int ),
	( "line_style", ctypes.c_int ),
	( "cap_style", ctypes.c_int ),
	( "join_style", ctypes.c_int ),
	( "fill_style", ctypes.c_int ),
	( "fill_rule", ctypes.c_int ),
	( "arc_mode", ctypes.c_int ),
	( "tile", ctypes.c_ulong ),
	( "stipple", ctypes.c_ulong ),
	( "ts_x_origin", ctypes.c_int ),
	( "ts_y_origin", ctypes.c_int ),
	( "font", ctypes.c_ulong ),
	( "subwindow_mode", ctypes.c_int ),
	( "graphics_exposures", ctypes.c_int ),
	( "clip_x_origin", ctypes.c_int ),
	( "clip_y_origin", ctypes.c_int ),
	( "clip_mask", ctypes.c_ulong ),
	( "dash_offset", ctypes.c_int ),
	( "dashes", ctypes.c_char ),
])

__freeze_rpythonic_struct( _XGC, [
])

__freeze_rpythonic_struct( Visual, [
	( "ext_data", ctypes.POINTER(_XExtData) ),
	( "visualid", ctypes.c_ulong ),
	( "C_class", ctypes.c_int ),
	( "red_mask", ctypes.c_ulong ),
	( "green_mask", ctypes.c_ulong ),
	( "blue_mask", ctypes.c_ulong ),
	( "bits_per_rgb", ctypes.c_int ),
	( "map_entries", ctypes.c_int ),
])

__freeze_rpythonic_struct( Depth, [
	( "depth", ctypes.c_int ),
	( "nvisuals", ctypes.c_int ),
	( "visuals", ctypes.POINTER(Visual) ),
])

__freeze_rpythonic_struct( _XDisplay, [
])

__freeze_rpythonic_struct( Screen, [
	( "ext_data", ctypes.POINTER(_XExtData) ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "root", ctypes.c_ulong ),
	( "width", ctypes.c_int ),
	( "height", ctypes.c_int ),
	( "mwidth", ctypes.c_int ),
	( "mheight", ctypes.c_int ),
	( "ndepths", ctypes.c_int ),
	( "depths", ctypes.POINTER(Depth) ),
	( "root_depth", ctypes.c_int ),
	( "root_visual", ctypes.POINTER(Visual) ),
	( "default_gc", ctypes.POINTER(_XGC) ),
	( "cmap", ctypes.c_ulong ),
	( "white_pixel", ctypes.c_ulong ),
	( "black_pixel", ctypes.c_ulong ),
	( "max_maps", ctypes.c_int ),
	( "min_maps", ctypes.c_int ),
	( "backing_store", ctypes.c_int ),
	( "save_unders", ctypes.c_int ),
	( "root_input_mask", ctypes.c_long ),
])

__freeze_rpythonic_struct( ScreenFormat, [
	( "ext_data", ctypes.POINTER(_XExtData) ),
	( "depth", ctypes.c_int ),
	( "bits_per_pixel", ctypes.c_int ),
	( "scanline_pad", ctypes.c_int ),
])

__freeze_rpythonic_struct( XSetWindowAttributes, [
	( "background_pixmap", ctypes.c_ulong ),
	( "background_pixel", ctypes.c_ulong ),
	( "border_pixmap", ctypes.c_ulong ),
	( "border_pixel", ctypes.c_ulong ),
	( "bit_gravity", ctypes.c_int ),
	( "win_gravity", ctypes.c_int ),
	( "backing_store", ctypes.c_int ),
	( "backing_planes", ctypes.c_ulong ),
	( "backing_pixel", ctypes.c_ulong ),
	( "save_under", ctypes.c_int ),
	( "event_mask", ctypes.c_long ),
	( "do_not_propagate_mask", ctypes.c_long ),
	( "override_redirect", ctypes.c_int ),
	( "colormap", ctypes.c_ulong ),
	( "cursor", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( XWindowAttributes, [
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
	( "width", ctypes.c_int ),
	( "height", ctypes.c_int ),
	( "border_width", ctypes.c_int ),
	( "depth", ctypes.c_int ),
	( "visual", ctypes.POINTER(Visual) ),
	( "root", ctypes.c_ulong ),
	( "C_class", ctypes.c_int ),
	( "bit_gravity", ctypes.c_int ),
	( "win_gravity", ctypes.c_int ),
	( "backing_store", ctypes.c_int ),
	( "backing_planes", ctypes.c_ulong ),
	( "backing_pixel", ctypes.c_ulong ),
	( "save_under", ctypes.c_int ),
	( "colormap", ctypes.c_ulong ),
	( "map_installed", ctypes.c_int ),
	( "map_state", ctypes.c_int ),
	( "all_event_masks", ctypes.c_long ),
	( "your_event_mask", ctypes.c_long ),
	( "do_not_propagate_mask", ctypes.c_long ),
	( "override_redirect", ctypes.c_int ),
	( "screen", ctypes.POINTER(Screen) ),
])

__freeze_rpythonic_struct( XHostAddress, [
	( "family", ctypes.c_int ),
	( "length", ctypes.c_int ),
	( "address", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( XServerInterpretedAddress, [
	( "typelength", ctypes.c_int ),
	( "valuelength", ctypes.c_int ),
	( "C_type", ctypes.POINTER(ctypes.c_char) ),
	( "value", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( funcs, [
	( "create_image", ctypes.POINTER(ctypes.c_void_p) ),
	( "destroy_image", ctypes.c_void_p ),
	( "get_pixel", ctypes.c_void_p ),
	( "put_pixel", ctypes.c_void_p ),
	( "sub_image", ctypes.POINTER(ctypes.c_void_p) ),
	( "add_pixel", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _XImage, [
	( "width", ctypes.c_int ),
	( "height", ctypes.c_int ),
	( "xoffset", ctypes.c_int ),
	( "format", ctypes.c_int ),
	( "data", ctypes.POINTER(ctypes.c_char) ),
	( "byte_order", ctypes.c_int ),
	( "bitmap_unit", ctypes.c_int ),
	( "bitmap_bit_order", ctypes.c_int ),
	( "bitmap_pad", ctypes.c_int ),
	( "depth", ctypes.c_int ),
	( "bytes_per_line", ctypes.c_int ),
	( "bits_per_pixel", ctypes.c_int ),
	( "red_mask", ctypes.c_ulong ),
	( "green_mask", ctypes.c_ulong ),
	( "blue_mask", ctypes.c_ulong ),
	( "obdata", ctypes.POINTER(ctypes.c_char) ),
	( "f", funcs ),
])

__freeze_rpythonic_struct( XWindowChanges, [
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
	( "width", ctypes.c_int ),
	( "height", ctypes.c_int ),
	( "border_width", ctypes.c_int ),
	( "sibling", ctypes.c_ulong ),
	( "stack_mode", ctypes.c_int ),
])

__freeze_rpythonic_struct( XColor, [
	( "pixel", ctypes.c_ulong ),
	( "red", ctypes.c_ushort ),
	( "green", ctypes.c_ushort ),
	( "blue", ctypes.c_ushort ),
	( "flags", ctypes.c_char ),
	( "pad", ctypes.c_char ),
])

__freeze_rpythonic_struct( XSegment, [
	( "x1", ctypes.c_short ),
	( "y1", ctypes.c_short ),
	( "x2", ctypes.c_short ),
	( "y2", ctypes.c_short ),
])

__freeze_rpythonic_struct( XPoint, [
	( "x", ctypes.c_short ),
	( "y", ctypes.c_short ),
])

__freeze_rpythonic_struct( XRectangle, [
	( "x", ctypes.c_short ),
	( "y", ctypes.c_short ),
	( "width", ctypes.c_ushort ),
	( "height", ctypes.c_ushort ),
])

__freeze_rpythonic_struct( XArc, [
	( "x", ctypes.c_short ),
	( "y", ctypes.c_short ),
	( "width", ctypes.c_ushort ),
	( "height", ctypes.c_ushort ),
	( "angle1", ctypes.c_short ),
	( "angle2", ctypes.c_short ),
])

__freeze_rpythonic_struct( XKeyboardControl, [
	( "key_click_percent", ctypes.c_int ),
	( "bell_percent", ctypes.c_int ),
	( "bell_pitch", ctypes.c_int ),
	( "bell_duration", ctypes.c_int ),
	( "led", ctypes.c_int ),
	( "led_mode", ctypes.c_int ),
	( "key", ctypes.c_int ),
	( "auto_repeat_mode", ctypes.c_int ),
])

__freeze_rpythonic_struct( XKeyboardState, [
	( "key_click_percent", ctypes.c_int ),
	( "bell_percent", ctypes.c_int ),
	( "bell_pitch", ctypes.c_uint ),
	( "bell_duration", ctypes.c_uint ),
	( "led_mask", ctypes.c_ulong ),
	( "global_auto_repeat", ctypes.c_int ),
	( "auto_repeats", ( ctypes.c_char * 32 ) ),
])

__freeze_rpythonic_struct( XTimeCoord, [
	( "time", ctypes.c_ulong ),
	( "x", ctypes.c_short ),
	( "y", ctypes.c_short ),
])

__freeze_rpythonic_struct( XModifierKeymap, [
	( "max_keypermod", ctypes.c_int ),
	( "modifiermap", ctypes.POINTER(ctypes.c_ubyte) ),
])

__freeze_rpythonic_struct( _XPrivate, [
])

__freeze_rpythonic_struct( _XrmHashBucketRec, [
])

__freeze_rpythonic_struct( _XPrivDisplay, [
	( "ext_data", ctypes.POINTER(_XExtData) ),
	( "private1", ctypes.POINTER(_XPrivate) ),
	( "fd", ctypes.c_int ),
	( "private2", ctypes.c_int ),
	( "proto_major_version", ctypes.c_int ),
	( "proto_minor_version", ctypes.c_int ),
	( "vendor", ctypes.POINTER(ctypes.c_char) ),
	( "private3", ctypes.c_ulong ),
	( "private4", ctypes.c_ulong ),
	( "private5", ctypes.c_ulong ),
	( "private6", ctypes.c_int ),
	( "resource_alloc", ctypes.c_void_p ),
	( "byte_order", ctypes.c_int ),
	( "bitmap_unit", ctypes.c_int ),
	( "bitmap_pad", ctypes.c_int ),
	( "bitmap_bit_order", ctypes.c_int ),
	( "nformats", ctypes.c_int ),
	( "pixmap_format", ctypes.POINTER(ScreenFormat) ),
	( "private8", ctypes.c_int ),
	( "release", ctypes.c_int ),
	( "private9", ctypes.POINTER(_XPrivate) ),
	( "private10", ctypes.POINTER(_XPrivate) ),
	( "qlen", ctypes.c_int ),
	( "last_request_read", ctypes.c_ulong ),
	( "request", ctypes.c_ulong ),
	( "private11", ctypes.POINTER(ctypes.c_char) ),
	( "private12", ctypes.POINTER(ctypes.c_char) ),
	( "private13", ctypes.POINTER(ctypes.c_char) ),
	( "private14", ctypes.POINTER(ctypes.c_char) ),
	( "max_request_size", ctypes.c_void_p ),
	( "db", ctypes.POINTER(_XrmHashBucketRec) ),
	( "private15", ctypes.c_void_p ),
	( "display_name", ctypes.POINTER(ctypes.c_char) ),
	( "default_screen", ctypes.c_int ),
	( "nscreens", ctypes.c_int ),
	( "screens", ctypes.POINTER(Screen) ),
	( "motion_buffer", ctypes.c_ulong ),
	( "private16", ctypes.c_ulong ),
	( "min_keycode", ctypes.c_int ),
	( "max_keycode", ctypes.c_int ),
	( "private17", ctypes.POINTER(ctypes.c_char) ),
	( "private18", ctypes.POINTER(ctypes.c_char) ),
	( "private19", ctypes.c_int ),
	( "xdefaults", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( XKeyEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "window", ctypes.c_ulong ),
	( "root", ctypes.c_ulong ),
	( "subwindow", ctypes.c_ulong ),
	( "time", ctypes.c_ulong ),
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
	( "x_root", ctypes.c_int ),
	( "y_root", ctypes.c_int ),
	( "state", ctypes.c_uint ),
	( "keycode", ctypes.c_uint ),
	( "same_screen", ctypes.c_int ),
])

__freeze_rpythonic_struct( XButtonEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "window", ctypes.c_ulong ),
	( "root", ctypes.c_ulong ),
	( "subwindow", ctypes.c_ulong ),
	( "time", ctypes.c_ulong ),
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
	( "x_root", ctypes.c_int ),
	( "y_root", ctypes.c_int ),
	( "state", ctypes.c_uint ),
	( "button", ctypes.c_uint ),
	( "same_screen", ctypes.c_int ),
])

__freeze_rpythonic_struct( XMotionEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "window", ctypes.c_ulong ),
	( "root", ctypes.c_ulong ),
	( "subwindow", ctypes.c_ulong ),
	( "time", ctypes.c_ulong ),
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
	( "x_root", ctypes.c_int ),
	( "y_root", ctypes.c_int ),
	( "state", ctypes.c_uint ),
	( "is_hint", ctypes.c_char ),
	( "same_screen", ctypes.c_int ),
])

__freeze_rpythonic_struct( XCrossingEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "window", ctypes.c_ulong ),
	( "root", ctypes.c_ulong ),
	( "subwindow", ctypes.c_ulong ),
	( "time", ctypes.c_ulong ),
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
	( "x_root", ctypes.c_int ),
	( "y_root", ctypes.c_int ),
	( "mode", ctypes.c_int ),
	( "detail", ctypes.c_int ),
	( "same_screen", ctypes.c_int ),
	( "focus", ctypes.c_int ),
	( "state", ctypes.c_uint ),
])

__freeze_rpythonic_struct( XFocusChangeEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "window", ctypes.c_ulong ),
	( "mode", ctypes.c_int ),
	( "detail", ctypes.c_int ),
])

__freeze_rpythonic_struct( XKeymapEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "window", ctypes.c_ulong ),
	( "key_vector", ( ctypes.c_char * 32 ) ),
])

__freeze_rpythonic_struct( XExposeEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "window", ctypes.c_ulong ),
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
	( "width", ctypes.c_int ),
	( "height", ctypes.c_int ),
	( "count", ctypes.c_int ),
])

__freeze_rpythonic_struct( XGraphicsExposeEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "drawable", ctypes.c_ulong ),
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
	( "width", ctypes.c_int ),
	( "height", ctypes.c_int ),
	( "count", ctypes.c_int ),
	( "major_code", ctypes.c_int ),
	( "minor_code", ctypes.c_int ),
])

__freeze_rpythonic_struct( XNoExposeEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "drawable", ctypes.c_ulong ),
	( "major_code", ctypes.c_int ),
	( "minor_code", ctypes.c_int ),
])

__freeze_rpythonic_struct( XVisibilityEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "window", ctypes.c_ulong ),
	( "state", ctypes.c_int ),
])

__freeze_rpythonic_struct( XCreateWindowEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "parent", ctypes.c_ulong ),
	( "window", ctypes.c_ulong ),
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
	( "width", ctypes.c_int ),
	( "height", ctypes.c_int ),
	( "border_width", ctypes.c_int ),
	( "override_redirect", ctypes.c_int ),
])

__freeze_rpythonic_struct( XDestroyWindowEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "event", ctypes.c_ulong ),
	( "window", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( XUnmapEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "event", ctypes.c_ulong ),
	( "window", ctypes.c_ulong ),
	( "from_configure", ctypes.c_int ),
])

__freeze_rpythonic_struct( XMapEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "event", ctypes.c_ulong ),
	( "window", ctypes.c_ulong ),
	( "override_redirect", ctypes.c_int ),
])

__freeze_rpythonic_struct( XMapRequestEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "parent", ctypes.c_ulong ),
	( "window", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( XReparentEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "event", ctypes.c_ulong ),
	( "window", ctypes.c_ulong ),
	( "parent", ctypes.c_ulong ),
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
	( "override_redirect", ctypes.c_int ),
])

__freeze_rpythonic_struct( XConfigureEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "event", ctypes.c_ulong ),
	( "window", ctypes.c_ulong ),
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
	( "width", ctypes.c_int ),
	( "height", ctypes.c_int ),
	( "border_width", ctypes.c_int ),
	( "above", ctypes.c_ulong ),
	( "override_redirect", ctypes.c_int ),
])

__freeze_rpythonic_struct( XGravityEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "event", ctypes.c_ulong ),
	( "window", ctypes.c_ulong ),
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
])

__freeze_rpythonic_struct( XResizeRequestEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "window", ctypes.c_ulong ),
	( "width", ctypes.c_int ),
	( "height", ctypes.c_int ),
])

__freeze_rpythonic_struct( XConfigureRequestEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "parent", ctypes.c_ulong ),
	( "window", ctypes.c_ulong ),
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
	( "width", ctypes.c_int ),
	( "height", ctypes.c_int ),
	( "border_width", ctypes.c_int ),
	( "above", ctypes.c_ulong ),
	( "detail", ctypes.c_int ),
	( "value_mask", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( XCirculateEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "event", ctypes.c_ulong ),
	( "window", ctypes.c_ulong ),
	( "place", ctypes.c_int ),
])

__freeze_rpythonic_struct( XCirculateRequestEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "parent", ctypes.c_ulong ),
	( "window", ctypes.c_ulong ),
	( "place", ctypes.c_int ),
])

__freeze_rpythonic_struct( XPropertyEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "window", ctypes.c_ulong ),
	( "atom", ctypes.c_ulong ),
	( "time", ctypes.c_ulong ),
	( "state", ctypes.c_int ),
])

__freeze_rpythonic_struct( XSelectionClearEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "window", ctypes.c_ulong ),
	( "selection", ctypes.c_ulong ),
	( "time", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( XSelectionRequestEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "owner", ctypes.c_ulong ),
	( "requestor", ctypes.c_ulong ),
	( "selection", ctypes.c_ulong ),
	( "target", ctypes.c_ulong ),
	( "property", ctypes.c_ulong ),
	( "time", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( XSelectionEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "requestor", ctypes.c_ulong ),
	( "selection", ctypes.c_ulong ),
	( "target", ctypes.c_ulong ),
	( "property", ctypes.c_ulong ),
	( "time", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( XColormapEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "window", ctypes.c_ulong ),
	( "colormap", ctypes.c_ulong ),
	( "new", ctypes.c_int ),
	( "state", ctypes.c_int ),
])

__freeze_rpythonic_struct( data, [
	( "b", ( ctypes.c_char * 20 ) ),
	( "s", ( ctypes.c_short * 10 ) ),
	( "l", ( ctypes.c_long * 5 ) ),
])

__freeze_rpythonic_struct( XClientMessageEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "window", ctypes.c_ulong ),
	( "message_type", ctypes.c_ulong ),
	( "format", ctypes.c_int ),
	( "data", data ),
])

__freeze_rpythonic_struct( XMappingEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "window", ctypes.c_ulong ),
	( "request", ctypes.c_int ),
	( "first_keycode", ctypes.c_int ),
	( "count", ctypes.c_int ),
])

__freeze_rpythonic_struct( XErrorEvent, [
	( "C_type", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "resourceid", ctypes.c_ulong ),
	( "serial", ctypes.c_ulong ),
	( "error_code", ctypes.c_ubyte ),
	( "request_code", ctypes.c_ubyte ),
	( "minor_code", ctypes.c_ubyte ),
])

__freeze_rpythonic_struct( XAnyEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "window", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( XGenericEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "extension", ctypes.c_int ),
	( "evtype", ctypes.c_int ),
])

__freeze_rpythonic_struct( XGenericEventCookie, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "extension", ctypes.c_int ),
	( "evtype", ctypes.c_int ),
	( "cookie", ctypes.c_uint ),
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _XEvent, [
	( "C_type", ctypes.c_int ),
	( "xany", XAnyEvent ),
	( "xkey", XKeyEvent ),
	( "xbutton", XButtonEvent ),
	( "xmotion", XMotionEvent ),
	( "xcrossing", XCrossingEvent ),
	( "xfocus", XFocusChangeEvent ),
	( "xexpose", XExposeEvent ),
	( "xgraphicsexpose", XGraphicsExposeEvent ),
	( "xnoexpose", XNoExposeEvent ),
	( "xvisibility", XVisibilityEvent ),
	( "xcreatewindow", XCreateWindowEvent ),
	( "xdestroywindow", XDestroyWindowEvent ),
	( "xunmap", XUnmapEvent ),
	( "xmap", XMapEvent ),
	( "xmaprequest", XMapRequestEvent ),
	( "xreparent", XReparentEvent ),
	( "xconfigure", XConfigureEvent ),
	( "xgravity", XGravityEvent ),
	( "xresizerequest", XResizeRequestEvent ),
	( "xconfigurerequest", XConfigureRequestEvent ),
	( "xcirculate", XCirculateEvent ),
	( "xcirculaterequest", XCirculateRequestEvent ),
	( "xproperty", XPropertyEvent ),
	( "xselectionclear", XSelectionClearEvent ),
	( "xselectionrequest", XSelectionRequestEvent ),
	( "xselection", XSelectionEvent ),
	( "xcolormap", XColormapEvent ),
	( "xclient", XClientMessageEvent ),
	( "xmapping", XMappingEvent ),
	( "xerror", XErrorEvent ),
	( "xkeymap", XKeymapEvent ),
	( "xgeneric", XGenericEvent ),
	( "xcookie", XGenericEventCookie ),
	( "pad", ( ctypes.c_long * 24 ) ),
])

__freeze_rpythonic_struct( XCharStruct, [
	( "lbearing", ctypes.c_short ),
	( "rbearing", ctypes.c_short ),
	( "width", ctypes.c_short ),
	( "ascent", ctypes.c_short ),
	( "descent", ctypes.c_short ),
	( "attributes", ctypes.c_ushort ),
])

__freeze_rpythonic_struct( XFontProp, [
	( "name", ctypes.c_ulong ),
	( "card32", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( XFontStruct, [
	( "ext_data", ctypes.POINTER(_XExtData) ),
	( "fid", ctypes.c_ulong ),
	( "direction", ctypes.c_void_p ),
	( "min_char_or_byte2", ctypes.c_void_p ),
	( "max_char_or_byte2", ctypes.c_void_p ),
	( "min_byte1", ctypes.c_void_p ),
	( "max_byte1", ctypes.c_void_p ),
	( "all_chars_exist", ctypes.c_int ),
	( "default_char", ctypes.c_void_p ),
	( "n_properties", ctypes.c_int ),
	( "properties", ctypes.POINTER(XFontProp) ),
	( "min_bounds", XCharStruct ),
	( "max_bounds", XCharStruct ),
	( "per_char", ctypes.POINTER(XCharStruct) ),
	( "ascent", ctypes.c_int ),
	( "descent", ctypes.c_int ),
])

__freeze_rpythonic_struct( XTextItem, [
	( "chars", ctypes.POINTER(ctypes.c_char) ),
	( "nchars", ctypes.c_int ),
	( "delta", ctypes.c_int ),
	( "font", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( XChar2b, [
	( "byte1", ctypes.c_ubyte ),
	( "byte2", ctypes.c_ubyte ),
])

__freeze_rpythonic_struct( XTextItem16, [
	( "chars", ctypes.POINTER(XChar2b) ),
	( "nchars", ctypes.c_int ),
	( "delta", ctypes.c_int ),
	( "font", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( XEDataObject, [
	( "display", ctypes.POINTER(_XDisplay) ),
	( "gc", ctypes.POINTER(_XGC) ),
	( "visual", ctypes.POINTER(Visual) ),
	( "screen", ctypes.POINTER(Screen) ),
	( "pixmap_format", ctypes.POINTER(ScreenFormat) ),
	( "font", ctypes.POINTER(XFontStruct) ),
])

__freeze_rpythonic_struct( XFontSetExtents, [
	( "max_ink_extent", XRectangle ),
	( "max_logical_extent", XRectangle ),
])

__freeze_rpythonic_struct( _XOM, [
])

__freeze_rpythonic_struct( _XOC, [
])

__freeze_rpythonic_struct( XmbTextItem, [
	( "chars", ctypes.POINTER(ctypes.c_char) ),
	( "nchars", ctypes.c_int ),
	( "delta", ctypes.c_int ),
	( "font_set", ctypes.POINTER(_XOC) ),
])

__freeze_rpythonic_struct( XwcTextItem, [
	( "chars", ctypes.POINTER(ctypes.c_int64) ),
	( "nchars", ctypes.c_int ),
	( "delta", ctypes.c_int ),
	( "font_set", ctypes.POINTER(_XOC) ),
])

__freeze_rpythonic_struct( XOMCharSetList, [
	( "charset_count", ctypes.c_int ),
	( "charset_list", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)) ),
])

__freeze_rpythonic_struct( XOMOrientation, [
	( "num_orientation", ctypes.c_int ),
	( "orientation", ctypes.POINTER(ctypes.c_int) ),
])

__freeze_rpythonic_struct( XOMFontInfo, [
	( "num_font", ctypes.c_int ),
	( "font_struct_list", ctypes.POINTER(ctypes.POINTER(XFontStruct)) ),
	( "font_name_list", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)) ),
])

__freeze_rpythonic_struct( _XIM, [
])

__freeze_rpythonic_struct( _XIC, [
])

__freeze_rpythonic_struct( XIMStyles, [
	( "count_styles", ctypes.c_ushort ),
	( "supported_styles", ctypes.POINTER(ctypes.c_ulong) ),
])

__freeze_rpythonic_struct( XIMCallback, [
	( "client_data", ctypes.POINTER(ctypes.c_char) ),
	( "callback", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),) ),
])

__freeze_rpythonic_struct( XICCallback, [
	( "client_data", ctypes.POINTER(ctypes.c_char) ),
	( "callback", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),) ),
])

__freeze_rpythonic_struct( string, [
	( "multi_byte", ctypes.POINTER(ctypes.c_char) ),
	( "wide_char", ctypes.POINTER(ctypes.c_int64) ),
])

__freeze_rpythonic_struct( _XIMText, [
	( "length", ctypes.c_ushort ),
	( "feedback", ctypes.POINTER(ctypes.c_ulong) ),
	( "encoding_is_wchar", ctypes.c_int ),
	( "string", string ),
])

__freeze_rpythonic_struct( _XIMPreeditStateNotifyCallbackStruct, [
	( "state", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( _XIMStringConversionText, [
	( "length", ctypes.c_ushort ),
	( "feedback", ctypes.POINTER(ctypes.c_ulong) ),
	( "encoding_is_wchar", ctypes.c_int ),
	( "string", string ),
])

__freeze_rpythonic_struct( _XIMStringConversionCallbackStruct, [
	( "position", ctypes.c_ushort ),
	( "direction", ctypes.c_int ),
	( "operation", ctypes.c_ushort ),
	( "factor", ctypes.c_ushort ),
	( "text", ctypes.POINTER(_XIMStringConversionText) ),
])

__freeze_rpythonic_struct( _XIMPreeditDrawCallbackStruct, [
	( "caret", ctypes.c_int ),
	( "chg_first", ctypes.c_int ),
	( "chg_length", ctypes.c_int ),
	( "text", ctypes.POINTER(_XIMText) ),
])

__freeze_rpythonic_struct( _XIMPreeditCaretCallbackStruct, [
	( "position", ctypes.c_int ),
	( "direction", ctypes.c_int ),
	( "style", ctypes.c_int ),
])

__freeze_rpythonic_struct( _XIMStatusDrawCallbackStruct, [
	( "C_type", ctypes.c_int ),
	( "data", data ),
])

__freeze_rpythonic_struct( _XIMHotKeyTrigger, [
	( "keysym", ctypes.c_ulong ),
	( "modifier", ctypes.c_int ),
	( "modifier_mask", ctypes.c_int ),
])

__freeze_rpythonic_struct( _XIMHotKeyTriggers, [
	( "num_hot_key", ctypes.c_int ),
	( "key", ctypes.POINTER(_XIMHotKeyTrigger) ),
])

__freeze_rpythonic_struct( XIMValuesList, [
	( "count_values", ctypes.c_ushort ),
	( "supported_values", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)) ),
])

__freeze_rpythonic_struct( min_aspect, [
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
])

__freeze_rpythonic_struct( max_aspect, [
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
])

__freeze_rpythonic_struct( XSizeHints, [
	( "flags", ctypes.c_long ),
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
	( "width", ctypes.c_int ),
	( "height", ctypes.c_int ),
	( "min_width", ctypes.c_int ),
	( "min_height", ctypes.c_int ),
	( "max_width", ctypes.c_int ),
	( "max_height", ctypes.c_int ),
	( "width_inc", ctypes.c_int ),
	( "height_inc", ctypes.c_int ),
	( "min_aspect", min_aspect ),
	( "max_aspect", max_aspect ),
	( "base_width", ctypes.c_int ),
	( "base_height", ctypes.c_int ),
	( "win_gravity", ctypes.c_int ),
])

__freeze_rpythonic_struct( XWMHints, [
	( "flags", ctypes.c_long ),
	( "input", ctypes.c_int ),
	( "initial_state", ctypes.c_int ),
	( "icon_pixmap", ctypes.c_ulong ),
	( "icon_window", ctypes.c_ulong ),
	( "icon_x", ctypes.c_int ),
	( "icon_y", ctypes.c_int ),
	( "icon_mask", ctypes.c_ulong ),
	( "window_group", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( XTextProperty, [
	( "value", ctypes.POINTER(ctypes.c_ubyte) ),
	( "encoding", ctypes.c_ulong ),
	( "format", ctypes.c_int ),
	( "nitems", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( XIconSize, [
	( "min_width", ctypes.c_int ),
	( "min_height", ctypes.c_int ),
	( "max_width", ctypes.c_int ),
	( "max_height", ctypes.c_int ),
	( "width_inc", ctypes.c_int ),
	( "height_inc", ctypes.c_int ),
])

__freeze_rpythonic_struct( XClassHint, [
	( "res_name", ctypes.POINTER(ctypes.c_char) ),
	( "res_class", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( _XComposeStatus, [
	( "compose_ptr", ctypes.POINTER(ctypes.c_char) ),
	( "chars_matched", ctypes.c_int ),
])

__freeze_rpythonic_struct( _XRegion, [
])

__freeze_rpythonic_struct( XVisualInfo, [
	( "visual", ctypes.POINTER(Visual) ),
	( "visualid", ctypes.c_ulong ),
	( "screen", ctypes.c_int ),
	( "depth", ctypes.c_int ),
	( "C_class", ctypes.c_int ),
	( "red_mask", ctypes.c_ulong ),
	( "green_mask", ctypes.c_ulong ),
	( "blue_mask", ctypes.c_ulong ),
	( "colormap_size", ctypes.c_int ),
	( "bits_per_rgb", ctypes.c_int ),
])

__freeze_rpythonic_struct( XStandardColormap, [
	( "colormap", ctypes.c_ulong ),
	( "red_max", ctypes.c_ulong ),
	( "red_mult", ctypes.c_ulong ),
	( "green_max", ctypes.c_ulong ),
	( "green_mult", ctypes.c_ulong ),
	( "blue_max", ctypes.c_ulong ),
	( "blue_mult", ctypes.c_ulong ),
	( "base_pixel", ctypes.c_ulong ),
	( "visualid", ctypes.c_ulong ),
	( "killid", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( __GLXcontextRec, [
])

__freeze_rpythonic_struct( __GLXFBConfigRec, [
])

__freeze_rpythonic_struct( GLXBufferClobberEventSGIX, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "drawable", ctypes.c_ulong ),
	( "event_type", ctypes.c_int ),
	( "draw_type", ctypes.c_int ),
	( "mask", ctypes.c_uint ),
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
	( "width", ctypes.c_int ),
	( "height", ctypes.c_int ),
	( "count", ctypes.c_int ),
])

__freeze_rpythonic_struct( GLXHyperpipeNetworkSGIX, [
	( "pipeName", ( ctypes.c_char * 80 ) ),
	( "networkId", ctypes.c_int ),
])

__freeze_rpythonic_struct( GLXHyperpipeConfigSGIX, [
	( "pipeName", ( ctypes.c_char * 80 ) ),
	( "channel", ctypes.c_int ),
	( "participationType", ctypes.c_uint ),
	( "timeSlice", ctypes.c_int ),
])

__freeze_rpythonic_struct( GLXPipeRect, [
	( "pipeName", ( ctypes.c_char * 80 ) ),
	( "srcXOrigin", ctypes.c_int ),
	( "srcYOrigin", ctypes.c_int ),
	( "srcWidth", ctypes.c_int ),
	( "srcHeight", ctypes.c_int ),
	( "destXOrigin", ctypes.c_int ),
	( "destYOrigin", ctypes.c_int ),
	( "destWidth", ctypes.c_int ),
	( "destHeight", ctypes.c_int ),
])

__freeze_rpythonic_struct( GLXPipeRectLimits, [
	( "pipeName", ( ctypes.c_char * 80 ) ),
	( "XOrigin", ctypes.c_int ),
	( "YOrigin", ctypes.c_int ),
	( "maxHeight", ctypes.c_int ),
	( "maxWidth", ctypes.c_int ),
])

__freeze_rpythonic_struct( GLXPbufferClobberEvent, [
	( "event_type", ctypes.c_int ),
	( "draw_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "drawable", ctypes.c_ulong ),
	( "buffer_mask", ctypes.c_uint ),
	( "aux_buffer", ctypes.c_uint ),
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
	( "width", ctypes.c_int ),
	( "height", ctypes.c_int ),
	( "count", ctypes.c_int ),
])

__freeze_rpythonic_struct( GLXBufferSwapComplete, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "drawable", ctypes.c_ulong ),
	( "event_type", ctypes.c_int ),
	( "ust", ctypes.c_int64 ),
	( "msc", ctypes.c_int64 ),
	( "sbc", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( __GLXEvent, [
	( "glxpbufferclobber", GLXPbufferClobberEvent ),
	( "glxbufferswapcomplete", GLXBufferSwapComplete ),
	( "pad", ( ctypes.c_long * 24 ) ),
])

## wrapper functions ##
glClearIndex = _rpythonic_function_(		"glClearIndex", ctypes.c_void_p, [
	("c",		ctypes.c_float),] )

glClearColor = _rpythonic_function_(		"glClearColor", ctypes.c_void_p, [
	("red",		ctypes.c_float),
	("green",		ctypes.c_float),
	("blue",		ctypes.c_float),
	("alpha",		ctypes.c_float),] )

glClear = _rpythonic_function_(		"glClear", ctypes.c_void_p, [
	("mask",		ctypes.c_uint),] )

glIndexMask = _rpythonic_function_(		"glIndexMask", ctypes.c_void_p, [
	("mask",		ctypes.c_uint),] )

glColorMask = _rpythonic_function_(		"glColorMask", ctypes.c_void_p, [
	("red",		ctypes.c_ubyte),
	("green",		ctypes.c_ubyte),
	("blue",		ctypes.c_ubyte),
	("alpha",		ctypes.c_ubyte),] )

glAlphaFunc = _rpythonic_function_(		"glAlphaFunc", ctypes.c_void_p, [
	("func",		ctypes.c_uint),
	("ref",		ctypes.c_float),] )

glBlendFunc = _rpythonic_function_(		"glBlendFunc", ctypes.c_void_p, [
	("sfactor",		ctypes.c_uint),
	("dfactor",		ctypes.c_uint),] )

glLogicOp = _rpythonic_function_(		"glLogicOp", ctypes.c_void_p, [
	("opcode",		ctypes.c_uint),] )

glCullFace = _rpythonic_function_(		"glCullFace", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),] )

glFrontFace = _rpythonic_function_(		"glFrontFace", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),] )

glPointSize = _rpythonic_function_(		"glPointSize", ctypes.c_void_p, [
	("size",		ctypes.c_float),] )

glLineWidth = _rpythonic_function_(		"glLineWidth", ctypes.c_void_p, [
	("width",		ctypes.c_float),] )

glLineStipple = _rpythonic_function_(		"glLineStipple", ctypes.c_void_p, [
	("factor",		ctypes.c_int),
	("pattern",		ctypes.c_ushort),] )

glPolygonMode = _rpythonic_function_(		"glPolygonMode", ctypes.c_void_p, [
	("face",		ctypes.c_uint),
	("mode",		ctypes.c_uint),] )

glPolygonOffset = _rpythonic_function_(		"glPolygonOffset", ctypes.c_void_p, [
	("factor",		ctypes.c_float),
	("units",		ctypes.c_float),] )

glPolygonStipple = _rpythonic_function_(		"glPolygonStipple", ctypes.c_void_p, [
	("mask",		ctypes.POINTER(ctypes.c_ubyte)),] )

glGetPolygonStipple = _rpythonic_function_(		"glGetPolygonStipple", ctypes.c_void_p, [
	("mask",		ctypes.POINTER(ctypes.c_ubyte)),] )

glEdgeFlag = _rpythonic_function_(		"glEdgeFlag", ctypes.c_void_p, [
	("flag",		ctypes.c_ubyte),] )

glEdgeFlagv = _rpythonic_function_(		"glEdgeFlagv", ctypes.c_void_p, [
	("flag",		ctypes.POINTER(ctypes.c_ubyte)),] )

glScissor = _rpythonic_function_(		"glScissor", ctypes.c_void_p, [
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

glClipPlane = _rpythonic_function_(		"glClipPlane", ctypes.c_void_p, [
	("plane",		ctypes.c_uint),
	("equation",		ctypes.POINTER(ctypes.c_double)),] )

glGetClipPlane = _rpythonic_function_(		"glGetClipPlane", ctypes.c_void_p, [
	("plane",		ctypes.c_uint),
	("equation",		ctypes.POINTER(ctypes.c_double)),] )

glDrawBuffer = _rpythonic_function_(		"glDrawBuffer", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),] )

glReadBuffer = _rpythonic_function_(		"glReadBuffer", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),] )

glEnable = _rpythonic_function_(		"glEnable", ctypes.c_void_p, [
	("cap",		ctypes.c_uint),] )

glDisable = _rpythonic_function_(		"glDisable", ctypes.c_void_p, [
	("cap",		ctypes.c_uint),] )

glIsEnabled = _rpythonic_function_(		"glIsEnabled", ctypes.c_ubyte, [
	("cap",		ctypes.c_uint),] )

glEnableClientState = _rpythonic_function_(		"glEnableClientState", ctypes.c_void_p, [
	("cap",		ctypes.c_uint),] )

glDisableClientState = _rpythonic_function_(		"glDisableClientState", ctypes.c_void_p, [
	("cap",		ctypes.c_uint),] )

glGetBooleanv = _rpythonic_function_(		"glGetBooleanv", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_ubyte)),] )

glGetDoublev = _rpythonic_function_(		"glGetDoublev", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_double)),] )

glGetFloatv = _rpythonic_function_(		"glGetFloatv", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

glGetIntegerv = _rpythonic_function_(		"glGetIntegerv", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

glPushAttrib = _rpythonic_function_(		"glPushAttrib", ctypes.c_void_p, [
	("mask",		ctypes.c_uint),] )

glPopAttrib = _rpythonic_function_(		"glPopAttrib", ctypes.c_void_p, [] )

glPushClientAttrib = _rpythonic_function_(		"glPushClientAttrib", ctypes.c_void_p, [
	("mask",		ctypes.c_uint),] )

glPopClientAttrib = _rpythonic_function_(		"glPopClientAttrib", ctypes.c_void_p, [] )

glRenderMode = _rpythonic_function_(		"glRenderMode", ctypes.c_int, [
	("mode",		ctypes.c_uint),] )

glGetError = _rpythonic_function_(		"glGetError", ctypes.c_uint, [] )

glGetString = _rpythonic_function_(		"glGetString", ctypes.POINTER(ctypes.c_ubyte), [
	("name",		ctypes.c_uint),] )

glFinish = _rpythonic_function_(		"glFinish", ctypes.c_void_p, [] )

glFlush = _rpythonic_function_(		"glFlush", ctypes.c_void_p, [] )

glHint = _rpythonic_function_(		"glHint", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("mode",		ctypes.c_uint),] )

glClearDepth = _rpythonic_function_(		"glClearDepth", ctypes.c_void_p, [
	("depth",		ctypes.c_double),] )

glDepthFunc = _rpythonic_function_(		"glDepthFunc", ctypes.c_void_p, [
	("func",		ctypes.c_uint),] )

glDepthMask = _rpythonic_function_(		"glDepthMask", ctypes.c_void_p, [
	("flag",		ctypes.c_ubyte),] )

glDepthRange = _rpythonic_function_(		"glDepthRange", ctypes.c_void_p, [
	("near_val",		ctypes.c_double),
	("far_val",		ctypes.c_double),] )

glClearAccum = _rpythonic_function_(		"glClearAccum", ctypes.c_void_p, [
	("red",		ctypes.c_float),
	("green",		ctypes.c_float),
	("blue",		ctypes.c_float),
	("alpha",		ctypes.c_float),] )

glAccum = _rpythonic_function_(		"glAccum", ctypes.c_void_p, [
	("op",		ctypes.c_uint),
	("value",		ctypes.c_float),] )

glMatrixMode = _rpythonic_function_(		"glMatrixMode", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),] )

glOrtho = _rpythonic_function_(		"glOrtho", ctypes.c_void_p, [
	("left",		ctypes.c_double),
	("right",		ctypes.c_double),
	("bottom",		ctypes.c_double),
	("top",		ctypes.c_double),
	("near_val",		ctypes.c_double),
	("far_val",		ctypes.c_double),] )

glFrustum = _rpythonic_function_(		"glFrustum", ctypes.c_void_p, [
	("left",		ctypes.c_double),
	("right",		ctypes.c_double),
	("bottom",		ctypes.c_double),
	("top",		ctypes.c_double),
	("near_val",		ctypes.c_double),
	("far_val",		ctypes.c_double),] )

glViewport = _rpythonic_function_(		"glViewport", ctypes.c_void_p, [
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

glPushMatrix = _rpythonic_function_(		"glPushMatrix", ctypes.c_void_p, [] )

glPopMatrix = _rpythonic_function_(		"glPopMatrix", ctypes.c_void_p, [] )

glLoadIdentity = _rpythonic_function_(		"glLoadIdentity", ctypes.c_void_p, [] )

glLoadMatrixd = _rpythonic_function_(		"glLoadMatrixd", ctypes.c_void_p, [
	("m",		ctypes.POINTER(ctypes.c_double)),] )

glLoadMatrixf = _rpythonic_function_(		"glLoadMatrixf", ctypes.c_void_p, [
	("m",		ctypes.POINTER(ctypes.c_float)),] )

glMultMatrixd = _rpythonic_function_(		"glMultMatrixd", ctypes.c_void_p, [
	("m",		ctypes.POINTER(ctypes.c_double)),] )

glMultMatrixf = _rpythonic_function_(		"glMultMatrixf", ctypes.c_void_p, [
	("m",		ctypes.POINTER(ctypes.c_float)),] )

glRotated = _rpythonic_function_(		"glRotated", ctypes.c_void_p, [
	("angle",		ctypes.c_double),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("z",		ctypes.c_double),] )

glRotatef = _rpythonic_function_(		"glRotatef", ctypes.c_void_p, [
	("angle",		ctypes.c_float),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

glScaled = _rpythonic_function_(		"glScaled", ctypes.c_void_p, [
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("z",		ctypes.c_double),] )

glScalef = _rpythonic_function_(		"glScalef", ctypes.c_void_p, [
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

glTranslated = _rpythonic_function_(		"glTranslated", ctypes.c_void_p, [
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("z",		ctypes.c_double),] )

glTranslatef = _rpythonic_function_(		"glTranslatef", ctypes.c_void_p, [
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

glIsList = _rpythonic_function_(		"glIsList", ctypes.c_ubyte, [
	("C_list",		ctypes.c_uint),] )

glDeleteLists = _rpythonic_function_(		"glDeleteLists", ctypes.c_void_p, [
	("C_list",		ctypes.c_uint),
	("C_range",		ctypes.c_int),] )

glGenLists = _rpythonic_function_(		"glGenLists", ctypes.c_uint, [
	("C_range",		ctypes.c_int),] )

glNewList = _rpythonic_function_(		"glNewList", ctypes.c_void_p, [
	("C_list",		ctypes.c_uint),
	("mode",		ctypes.c_uint),] )

glEndList = _rpythonic_function_(		"glEndList", ctypes.c_void_p, [] )

glCallList = _rpythonic_function_(		"glCallList", ctypes.c_void_p, [
	("C_list",		ctypes.c_uint),] )

glCallLists = _rpythonic_function_(		"glCallLists", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("lists",		ctypes.POINTER(ctypes.c_void_p)),] )

glListBase = _rpythonic_function_(		"glListBase", ctypes.c_void_p, [
	("base",		ctypes.c_uint),] )

glBegin = _rpythonic_function_(		"glBegin", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),] )

glEnd = _rpythonic_function_(		"glEnd", ctypes.c_void_p, [] )

glVertex2d = _rpythonic_function_(		"glVertex2d", ctypes.c_void_p, [
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),] )

glVertex2f = _rpythonic_function_(		"glVertex2f", ctypes.c_void_p, [
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),] )

glVertex2i = _rpythonic_function_(		"glVertex2i", ctypes.c_void_p, [
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

glVertex2s = _rpythonic_function_(		"glVertex2s", ctypes.c_void_p, [
	("x",		ctypes.c_short),
	("y",		ctypes.c_short),] )

glVertex3d = _rpythonic_function_(		"glVertex3d", ctypes.c_void_p, [
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("z",		ctypes.c_double),] )

glVertex3f = _rpythonic_function_(		"glVertex3f", ctypes.c_void_p, [
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

glVertex3i = _rpythonic_function_(		"glVertex3i", ctypes.c_void_p, [
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("z",		ctypes.c_int),] )

glVertex3s = _rpythonic_function_(		"glVertex3s", ctypes.c_void_p, [
	("x",		ctypes.c_short),
	("y",		ctypes.c_short),
	("z",		ctypes.c_short),] )

glVertex4d = _rpythonic_function_(		"glVertex4d", ctypes.c_void_p, [
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("z",		ctypes.c_double),
	("w",		ctypes.c_double),] )

glVertex4f = _rpythonic_function_(		"glVertex4f", ctypes.c_void_p, [
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),
	("w",		ctypes.c_float),] )

glVertex4i = _rpythonic_function_(		"glVertex4i", ctypes.c_void_p, [
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("z",		ctypes.c_int),
	("w",		ctypes.c_int),] )

glVertex4s = _rpythonic_function_(		"glVertex4s", ctypes.c_void_p, [
	("x",		ctypes.c_short),
	("y",		ctypes.c_short),
	("z",		ctypes.c_short),
	("w",		ctypes.c_short),] )

glVertex2dv = _rpythonic_function_(		"glVertex2dv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_double)),] )

glVertex2fv = _rpythonic_function_(		"glVertex2fv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_float)),] )

glVertex2iv = _rpythonic_function_(		"glVertex2iv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_int)),] )

glVertex2sv = _rpythonic_function_(		"glVertex2sv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_short)),] )

glVertex3dv = _rpythonic_function_(		"glVertex3dv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_double)),] )

glVertex3fv = _rpythonic_function_(		"glVertex3fv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_float)),] )

glVertex3iv = _rpythonic_function_(		"glVertex3iv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_int)),] )

glVertex3sv = _rpythonic_function_(		"glVertex3sv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_short)),] )

glVertex4dv = _rpythonic_function_(		"glVertex4dv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_double)),] )

glVertex4fv = _rpythonic_function_(		"glVertex4fv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_float)),] )

glVertex4iv = _rpythonic_function_(		"glVertex4iv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_int)),] )

glVertex4sv = _rpythonic_function_(		"glVertex4sv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_short)),] )

glNormal3b = _rpythonic_function_(		"glNormal3b", ctypes.c_void_p, [
	("nx",		ctypes.c_char),
	("ny",		ctypes.c_char),
	("nz",		ctypes.c_char),] )

glNormal3d = _rpythonic_function_(		"glNormal3d", ctypes.c_void_p, [
	("nx",		ctypes.c_double),
	("ny",		ctypes.c_double),
	("nz",		ctypes.c_double),] )

glNormal3f = _rpythonic_function_(		"glNormal3f", ctypes.c_void_p, [
	("nx",		ctypes.c_float),
	("ny",		ctypes.c_float),
	("nz",		ctypes.c_float),] )

glNormal3i = _rpythonic_function_(		"glNormal3i", ctypes.c_void_p, [
	("nx",		ctypes.c_int),
	("ny",		ctypes.c_int),
	("nz",		ctypes.c_int),] )

glNormal3s = _rpythonic_function_(		"glNormal3s", ctypes.c_void_p, [
	("nx",		ctypes.c_short),
	("ny",		ctypes.c_short),
	("nz",		ctypes.c_short),] )

glNormal3bv = _rpythonic_function_(		"glNormal3bv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_char)),] )

glNormal3dv = _rpythonic_function_(		"glNormal3dv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_double)),] )

glNormal3fv = _rpythonic_function_(		"glNormal3fv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_float)),] )

glNormal3iv = _rpythonic_function_(		"glNormal3iv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_int)),] )

glNormal3sv = _rpythonic_function_(		"glNormal3sv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_short)),] )

glIndexd = _rpythonic_function_(		"glIndexd", ctypes.c_void_p, [
	("c",		ctypes.c_double),] )

glIndexf = _rpythonic_function_(		"glIndexf", ctypes.c_void_p, [
	("c",		ctypes.c_float),] )

glIndexi = _rpythonic_function_(		"glIndexi", ctypes.c_void_p, [
	("c",		ctypes.c_int),] )

glIndexs = _rpythonic_function_(		"glIndexs", ctypes.c_void_p, [
	("c",		ctypes.c_short),] )

glIndexub = _rpythonic_function_(		"glIndexub", ctypes.c_void_p, [
	("c",		ctypes.c_ubyte),] )

glIndexdv = _rpythonic_function_(		"glIndexdv", ctypes.c_void_p, [
	("c",		ctypes.POINTER(ctypes.c_double)),] )

glIndexfv = _rpythonic_function_(		"glIndexfv", ctypes.c_void_p, [
	("c",		ctypes.POINTER(ctypes.c_float)),] )

glIndexiv = _rpythonic_function_(		"glIndexiv", ctypes.c_void_p, [
	("c",		ctypes.POINTER(ctypes.c_int)),] )

glIndexsv = _rpythonic_function_(		"glIndexsv", ctypes.c_void_p, [
	("c",		ctypes.POINTER(ctypes.c_short)),] )

glIndexubv = _rpythonic_function_(		"glIndexubv", ctypes.c_void_p, [
	("c",		ctypes.POINTER(ctypes.c_ubyte)),] )

glColor3b = _rpythonic_function_(		"glColor3b", ctypes.c_void_p, [
	("red",		ctypes.c_char),
	("green",		ctypes.c_char),
	("blue",		ctypes.c_char),] )

glColor3d = _rpythonic_function_(		"glColor3d", ctypes.c_void_p, [
	("red",		ctypes.c_double),
	("green",		ctypes.c_double),
	("blue",		ctypes.c_double),] )

glColor3f = _rpythonic_function_(		"glColor3f", ctypes.c_void_p, [
	("red",		ctypes.c_float),
	("green",		ctypes.c_float),
	("blue",		ctypes.c_float),] )

glColor3i = _rpythonic_function_(		"glColor3i", ctypes.c_void_p, [
	("red",		ctypes.c_int),
	("green",		ctypes.c_int),
	("blue",		ctypes.c_int),] )

glColor3s = _rpythonic_function_(		"glColor3s", ctypes.c_void_p, [
	("red",		ctypes.c_short),
	("green",		ctypes.c_short),
	("blue",		ctypes.c_short),] )

glColor3ub = _rpythonic_function_(		"glColor3ub", ctypes.c_void_p, [
	("red",		ctypes.c_ubyte),
	("green",		ctypes.c_ubyte),
	("blue",		ctypes.c_ubyte),] )

glColor3ui = _rpythonic_function_(		"glColor3ui", ctypes.c_void_p, [
	("red",		ctypes.c_uint),
	("green",		ctypes.c_uint),
	("blue",		ctypes.c_uint),] )

glColor3us = _rpythonic_function_(		"glColor3us", ctypes.c_void_p, [
	("red",		ctypes.c_ushort),
	("green",		ctypes.c_ushort),
	("blue",		ctypes.c_ushort),] )

glColor4b = _rpythonic_function_(		"glColor4b", ctypes.c_void_p, [
	("red",		ctypes.c_char),
	("green",		ctypes.c_char),
	("blue",		ctypes.c_char),
	("alpha",		ctypes.c_char),] )

glColor4d = _rpythonic_function_(		"glColor4d", ctypes.c_void_p, [
	("red",		ctypes.c_double),
	("green",		ctypes.c_double),
	("blue",		ctypes.c_double),
	("alpha",		ctypes.c_double),] )

glColor4f = _rpythonic_function_(		"glColor4f", ctypes.c_void_p, [
	("red",		ctypes.c_float),
	("green",		ctypes.c_float),
	("blue",		ctypes.c_float),
	("alpha",		ctypes.c_float),] )

glColor4i = _rpythonic_function_(		"glColor4i", ctypes.c_void_p, [
	("red",		ctypes.c_int),
	("green",		ctypes.c_int),
	("blue",		ctypes.c_int),
	("alpha",		ctypes.c_int),] )

glColor4s = _rpythonic_function_(		"glColor4s", ctypes.c_void_p, [
	("red",		ctypes.c_short),
	("green",		ctypes.c_short),
	("blue",		ctypes.c_short),
	("alpha",		ctypes.c_short),] )

glColor4ub = _rpythonic_function_(		"glColor4ub", ctypes.c_void_p, [
	("red",		ctypes.c_ubyte),
	("green",		ctypes.c_ubyte),
	("blue",		ctypes.c_ubyte),
	("alpha",		ctypes.c_ubyte),] )

glColor4ui = _rpythonic_function_(		"glColor4ui", ctypes.c_void_p, [
	("red",		ctypes.c_uint),
	("green",		ctypes.c_uint),
	("blue",		ctypes.c_uint),
	("alpha",		ctypes.c_uint),] )

glColor4us = _rpythonic_function_(		"glColor4us", ctypes.c_void_p, [
	("red",		ctypes.c_ushort),
	("green",		ctypes.c_ushort),
	("blue",		ctypes.c_ushort),
	("alpha",		ctypes.c_ushort),] )

glColor3bv = _rpythonic_function_(		"glColor3bv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_char)),] )

glColor3dv = _rpythonic_function_(		"glColor3dv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_double)),] )

glColor3fv = _rpythonic_function_(		"glColor3fv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_float)),] )

glColor3iv = _rpythonic_function_(		"glColor3iv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_int)),] )

glColor3sv = _rpythonic_function_(		"glColor3sv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_short)),] )

glColor3ubv = _rpythonic_function_(		"glColor3ubv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_ubyte)),] )

glColor3uiv = _rpythonic_function_(		"glColor3uiv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_uint)),] )

glColor3usv = _rpythonic_function_(		"glColor3usv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_ushort)),] )

glColor4bv = _rpythonic_function_(		"glColor4bv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_char)),] )

glColor4dv = _rpythonic_function_(		"glColor4dv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_double)),] )

glColor4fv = _rpythonic_function_(		"glColor4fv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_float)),] )

glColor4iv = _rpythonic_function_(		"glColor4iv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_int)),] )

glColor4sv = _rpythonic_function_(		"glColor4sv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_short)),] )

glColor4ubv = _rpythonic_function_(		"glColor4ubv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_ubyte)),] )

glColor4uiv = _rpythonic_function_(		"glColor4uiv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_uint)),] )

glColor4usv = _rpythonic_function_(		"glColor4usv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_ushort)),] )

glTexCoord1d = _rpythonic_function_(		"glTexCoord1d", ctypes.c_void_p, [
	("s",		ctypes.c_double),] )

glTexCoord1f = _rpythonic_function_(		"glTexCoord1f", ctypes.c_void_p, [
	("s",		ctypes.c_float),] )

glTexCoord1i = _rpythonic_function_(		"glTexCoord1i", ctypes.c_void_p, [
	("s",		ctypes.c_int),] )

glTexCoord1s = _rpythonic_function_(		"glTexCoord1s", ctypes.c_void_p, [
	("s",		ctypes.c_short),] )

glTexCoord2d = _rpythonic_function_(		"glTexCoord2d", ctypes.c_void_p, [
	("s",		ctypes.c_double),
	("t",		ctypes.c_double),] )

glTexCoord2f = _rpythonic_function_(		"glTexCoord2f", ctypes.c_void_p, [
	("s",		ctypes.c_float),
	("t",		ctypes.c_float),] )

glTexCoord2i = _rpythonic_function_(		"glTexCoord2i", ctypes.c_void_p, [
	("s",		ctypes.c_int),
	("t",		ctypes.c_int),] )

glTexCoord2s = _rpythonic_function_(		"glTexCoord2s", ctypes.c_void_p, [
	("s",		ctypes.c_short),
	("t",		ctypes.c_short),] )

glTexCoord3d = _rpythonic_function_(		"glTexCoord3d", ctypes.c_void_p, [
	("s",		ctypes.c_double),
	("t",		ctypes.c_double),
	("r",		ctypes.c_double),] )

glTexCoord3f = _rpythonic_function_(		"glTexCoord3f", ctypes.c_void_p, [
	("s",		ctypes.c_float),
	("t",		ctypes.c_float),
	("r",		ctypes.c_float),] )

glTexCoord3i = _rpythonic_function_(		"glTexCoord3i", ctypes.c_void_p, [
	("s",		ctypes.c_int),
	("t",		ctypes.c_int),
	("r",		ctypes.c_int),] )

glTexCoord3s = _rpythonic_function_(		"glTexCoord3s", ctypes.c_void_p, [
	("s",		ctypes.c_short),
	("t",		ctypes.c_short),
	("r",		ctypes.c_short),] )

glTexCoord4d = _rpythonic_function_(		"glTexCoord4d", ctypes.c_void_p, [
	("s",		ctypes.c_double),
	("t",		ctypes.c_double),
	("r",		ctypes.c_double),
	("q",		ctypes.c_double),] )

glTexCoord4f = _rpythonic_function_(		"glTexCoord4f", ctypes.c_void_p, [
	("s",		ctypes.c_float),
	("t",		ctypes.c_float),
	("r",		ctypes.c_float),
	("q",		ctypes.c_float),] )

glTexCoord4i = _rpythonic_function_(		"glTexCoord4i", ctypes.c_void_p, [
	("s",		ctypes.c_int),
	("t",		ctypes.c_int),
	("r",		ctypes.c_int),
	("q",		ctypes.c_int),] )

glTexCoord4s = _rpythonic_function_(		"glTexCoord4s", ctypes.c_void_p, [
	("s",		ctypes.c_short),
	("t",		ctypes.c_short),
	("r",		ctypes.c_short),
	("q",		ctypes.c_short),] )

glTexCoord1dv = _rpythonic_function_(		"glTexCoord1dv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_double)),] )

glTexCoord1fv = _rpythonic_function_(		"glTexCoord1fv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_float)),] )

glTexCoord1iv = _rpythonic_function_(		"glTexCoord1iv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_int)),] )

glTexCoord1sv = _rpythonic_function_(		"glTexCoord1sv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_short)),] )

glTexCoord2dv = _rpythonic_function_(		"glTexCoord2dv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_double)),] )

glTexCoord2fv = _rpythonic_function_(		"glTexCoord2fv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_float)),] )

glTexCoord2iv = _rpythonic_function_(		"glTexCoord2iv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_int)),] )

glTexCoord2sv = _rpythonic_function_(		"glTexCoord2sv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_short)),] )

glTexCoord3dv = _rpythonic_function_(		"glTexCoord3dv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_double)),] )

glTexCoord3fv = _rpythonic_function_(		"glTexCoord3fv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_float)),] )

glTexCoord3iv = _rpythonic_function_(		"glTexCoord3iv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_int)),] )

glTexCoord3sv = _rpythonic_function_(		"glTexCoord3sv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_short)),] )

glTexCoord4dv = _rpythonic_function_(		"glTexCoord4dv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_double)),] )

glTexCoord4fv = _rpythonic_function_(		"glTexCoord4fv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_float)),] )

glTexCoord4iv = _rpythonic_function_(		"glTexCoord4iv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_int)),] )

glTexCoord4sv = _rpythonic_function_(		"glTexCoord4sv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_short)),] )

glRasterPos2d = _rpythonic_function_(		"glRasterPos2d", ctypes.c_void_p, [
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),] )

glRasterPos2f = _rpythonic_function_(		"glRasterPos2f", ctypes.c_void_p, [
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),] )

glRasterPos2i = _rpythonic_function_(		"glRasterPos2i", ctypes.c_void_p, [
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

glRasterPos2s = _rpythonic_function_(		"glRasterPos2s", ctypes.c_void_p, [
	("x",		ctypes.c_short),
	("y",		ctypes.c_short),] )

glRasterPos3d = _rpythonic_function_(		"glRasterPos3d", ctypes.c_void_p, [
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("z",		ctypes.c_double),] )

glRasterPos3f = _rpythonic_function_(		"glRasterPos3f", ctypes.c_void_p, [
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

glRasterPos3i = _rpythonic_function_(		"glRasterPos3i", ctypes.c_void_p, [
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("z",		ctypes.c_int),] )

glRasterPos3s = _rpythonic_function_(		"glRasterPos3s", ctypes.c_void_p, [
	("x",		ctypes.c_short),
	("y",		ctypes.c_short),
	("z",		ctypes.c_short),] )

glRasterPos4d = _rpythonic_function_(		"glRasterPos4d", ctypes.c_void_p, [
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("z",		ctypes.c_double),
	("w",		ctypes.c_double),] )

glRasterPos4f = _rpythonic_function_(		"glRasterPos4f", ctypes.c_void_p, [
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),
	("w",		ctypes.c_float),] )

glRasterPos4i = _rpythonic_function_(		"glRasterPos4i", ctypes.c_void_p, [
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("z",		ctypes.c_int),
	("w",		ctypes.c_int),] )

glRasterPos4s = _rpythonic_function_(		"glRasterPos4s", ctypes.c_void_p, [
	("x",		ctypes.c_short),
	("y",		ctypes.c_short),
	("z",		ctypes.c_short),
	("w",		ctypes.c_short),] )

glRasterPos2dv = _rpythonic_function_(		"glRasterPos2dv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_double)),] )

glRasterPos2fv = _rpythonic_function_(		"glRasterPos2fv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_float)),] )

glRasterPos2iv = _rpythonic_function_(		"glRasterPos2iv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_int)),] )

glRasterPos2sv = _rpythonic_function_(		"glRasterPos2sv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_short)),] )

glRasterPos3dv = _rpythonic_function_(		"glRasterPos3dv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_double)),] )

glRasterPos3fv = _rpythonic_function_(		"glRasterPos3fv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_float)),] )

glRasterPos3iv = _rpythonic_function_(		"glRasterPos3iv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_int)),] )

glRasterPos3sv = _rpythonic_function_(		"glRasterPos3sv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_short)),] )

glRasterPos4dv = _rpythonic_function_(		"glRasterPos4dv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_double)),] )

glRasterPos4fv = _rpythonic_function_(		"glRasterPos4fv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_float)),] )

glRasterPos4iv = _rpythonic_function_(		"glRasterPos4iv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_int)),] )

glRasterPos4sv = _rpythonic_function_(		"glRasterPos4sv", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_short)),] )

glRectd = _rpythonic_function_(		"glRectd", ctypes.c_void_p, [
	("x1",		ctypes.c_double),
	("y1",		ctypes.c_double),
	("x2",		ctypes.c_double),
	("y2",		ctypes.c_double),] )

glRectf = _rpythonic_function_(		"glRectf", ctypes.c_void_p, [
	("x1",		ctypes.c_float),
	("y1",		ctypes.c_float),
	("x2",		ctypes.c_float),
	("y2",		ctypes.c_float),] )

glRecti = _rpythonic_function_(		"glRecti", ctypes.c_void_p, [
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_int),
	("y2",		ctypes.c_int),] )

glRects = _rpythonic_function_(		"glRects", ctypes.c_void_p, [
	("x1",		ctypes.c_short),
	("y1",		ctypes.c_short),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),] )

glRectdv = _rpythonic_function_(		"glRectdv", ctypes.c_void_p, [
	("v1",		ctypes.POINTER(ctypes.c_double)),
	("v2",		ctypes.POINTER(ctypes.c_double)),] )

glRectfv = _rpythonic_function_(		"glRectfv", ctypes.c_void_p, [
	("v1",		ctypes.POINTER(ctypes.c_float)),
	("v2",		ctypes.POINTER(ctypes.c_float)),] )

glRectiv = _rpythonic_function_(		"glRectiv", ctypes.c_void_p, [
	("v1",		ctypes.POINTER(ctypes.c_int)),
	("v2",		ctypes.POINTER(ctypes.c_int)),] )

glRectsv = _rpythonic_function_(		"glRectsv", ctypes.c_void_p, [
	("v1",		ctypes.POINTER(ctypes.c_short)),
	("v2",		ctypes.POINTER(ctypes.c_short)),] )

glVertexPointer = _rpythonic_function_(		"glVertexPointer", ctypes.c_void_p, [
	("size",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("stride",		ctypes.c_int),
	("ptr",		ctypes.POINTER(ctypes.c_void_p)),] )

glNormalPointer = _rpythonic_function_(		"glNormalPointer", ctypes.c_void_p, [
	("C_type",		ctypes.c_uint),
	("stride",		ctypes.c_int),
	("ptr",		ctypes.POINTER(ctypes.c_void_p)),] )

glColorPointer = _rpythonic_function_(		"glColorPointer", ctypes.c_void_p, [
	("size",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("stride",		ctypes.c_int),
	("ptr",		ctypes.POINTER(ctypes.c_void_p)),] )

glIndexPointer = _rpythonic_function_(		"glIndexPointer", ctypes.c_void_p, [
	("C_type",		ctypes.c_uint),
	("stride",		ctypes.c_int),
	("ptr",		ctypes.POINTER(ctypes.c_void_p)),] )

glTexCoordPointer = _rpythonic_function_(		"glTexCoordPointer", ctypes.c_void_p, [
	("size",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("stride",		ctypes.c_int),
	("ptr",		ctypes.POINTER(ctypes.c_void_p)),] )

glEdgeFlagPointer = _rpythonic_function_(		"glEdgeFlagPointer", ctypes.c_void_p, [
	("stride",		ctypes.c_int),
	("ptr",		ctypes.POINTER(ctypes.c_void_p)),] )

glGetPointerv = _rpythonic_function_(		"glGetPointerv", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

glArrayElement = _rpythonic_function_(		"glArrayElement", ctypes.c_void_p, [
	("i",		ctypes.c_int),] )

glDrawArrays = _rpythonic_function_(		"glDrawArrays", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("first",		ctypes.c_int),
	("count",		ctypes.c_int),] )

glDrawElements = _rpythonic_function_(		"glDrawElements", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("indices",		ctypes.POINTER(ctypes.c_void_p)),] )

glInterleavedArrays = _rpythonic_function_(		"glInterleavedArrays", ctypes.c_void_p, [
	("format",		ctypes.c_uint),
	("stride",		ctypes.c_int),
	("pointer",		ctypes.POINTER(ctypes.c_void_p)),] )

glShadeModel = _rpythonic_function_(		"glShadeModel", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),] )

glLightf = _rpythonic_function_(		"glLightf", ctypes.c_void_p, [
	("light",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_float),] )

glLighti = _rpythonic_function_(		"glLighti", ctypes.c_void_p, [
	("light",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_int),] )

glLightfv = _rpythonic_function_(		"glLightfv", ctypes.c_void_p, [
	("light",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

glLightiv = _rpythonic_function_(		"glLightiv", ctypes.c_void_p, [
	("light",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

glGetLightfv = _rpythonic_function_(		"glGetLightfv", ctypes.c_void_p, [
	("light",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

glGetLightiv = _rpythonic_function_(		"glGetLightiv", ctypes.c_void_p, [
	("light",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

glLightModelf = _rpythonic_function_(		"glLightModelf", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_float),] )

glLightModeli = _rpythonic_function_(		"glLightModeli", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_int),] )

glLightModelfv = _rpythonic_function_(		"glLightModelfv", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

glLightModeliv = _rpythonic_function_(		"glLightModeliv", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

glMaterialf = _rpythonic_function_(		"glMaterialf", ctypes.c_void_p, [
	("face",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_float),] )

glMateriali = _rpythonic_function_(		"glMateriali", ctypes.c_void_p, [
	("face",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_int),] )

glMaterialfv = _rpythonic_function_(		"glMaterialfv", ctypes.c_void_p, [
	("face",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

glMaterialiv = _rpythonic_function_(		"glMaterialiv", ctypes.c_void_p, [
	("face",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

glGetMaterialfv = _rpythonic_function_(		"glGetMaterialfv", ctypes.c_void_p, [
	("face",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

glGetMaterialiv = _rpythonic_function_(		"glGetMaterialiv", ctypes.c_void_p, [
	("face",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

glColorMaterial = _rpythonic_function_(		"glColorMaterial", ctypes.c_void_p, [
	("face",		ctypes.c_uint),
	("mode",		ctypes.c_uint),] )

glPixelZoom = _rpythonic_function_(		"glPixelZoom", ctypes.c_void_p, [
	("xfactor",		ctypes.c_float),
	("yfactor",		ctypes.c_float),] )

glPixelStoref = _rpythonic_function_(		"glPixelStoref", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_float),] )

glPixelStorei = _rpythonic_function_(		"glPixelStorei", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_int),] )

glPixelTransferf = _rpythonic_function_(		"glPixelTransferf", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_float),] )

glPixelTransferi = _rpythonic_function_(		"glPixelTransferi", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_int),] )

glPixelMapfv = _rpythonic_function_(		"glPixelMapfv", ctypes.c_void_p, [
	("map",		ctypes.c_uint),
	("mapsize",		ctypes.c_int),
	("values",		ctypes.POINTER(ctypes.c_float)),] )

glPixelMapuiv = _rpythonic_function_(		"glPixelMapuiv", ctypes.c_void_p, [
	("map",		ctypes.c_uint),
	("mapsize",		ctypes.c_int),
	("values",		ctypes.POINTER(ctypes.c_uint)),] )

glPixelMapusv = _rpythonic_function_(		"glPixelMapusv", ctypes.c_void_p, [
	("map",		ctypes.c_uint),
	("mapsize",		ctypes.c_int),
	("values",		ctypes.POINTER(ctypes.c_ushort)),] )

glGetPixelMapfv = _rpythonic_function_(		"glGetPixelMapfv", ctypes.c_void_p, [
	("map",		ctypes.c_uint),
	("values",		ctypes.POINTER(ctypes.c_float)),] )

glGetPixelMapuiv = _rpythonic_function_(		"glGetPixelMapuiv", ctypes.c_void_p, [
	("map",		ctypes.c_uint),
	("values",		ctypes.POINTER(ctypes.c_uint)),] )

glGetPixelMapusv = _rpythonic_function_(		"glGetPixelMapusv", ctypes.c_void_p, [
	("map",		ctypes.c_uint),
	("values",		ctypes.POINTER(ctypes.c_ushort)),] )

glBitmap = _rpythonic_function_(		"glBitmap", ctypes.c_void_p, [
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("xorig",		ctypes.c_float),
	("yorig",		ctypes.c_float),
	("xmove",		ctypes.c_float),
	("ymove",		ctypes.c_float),
	("bitmap",		ctypes.POINTER(ctypes.c_ubyte)),] )

glReadPixels = _rpythonic_function_(		"glReadPixels", ctypes.c_void_p, [
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("pixels",		ctypes.POINTER(ctypes.c_void_p)),] )

glDrawPixels = _rpythonic_function_(		"glDrawPixels", ctypes.c_void_p, [
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("pixels",		ctypes.POINTER(ctypes.c_void_p)),] )

glCopyPixels = _rpythonic_function_(		"glCopyPixels", ctypes.c_void_p, [
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("C_type",		ctypes.c_uint),] )

glStencilFunc = _rpythonic_function_(		"glStencilFunc", ctypes.c_void_p, [
	("func",		ctypes.c_uint),
	("ref",		ctypes.c_int),
	("mask",		ctypes.c_uint),] )

glStencilMask = _rpythonic_function_(		"glStencilMask", ctypes.c_void_p, [
	("mask",		ctypes.c_uint),] )

glStencilOp = _rpythonic_function_(		"glStencilOp", ctypes.c_void_p, [
	("fail",		ctypes.c_uint),
	("zfail",		ctypes.c_uint),
	("zpass",		ctypes.c_uint),] )

glClearStencil = _rpythonic_function_(		"glClearStencil", ctypes.c_void_p, [
	("s",		ctypes.c_int),] )

glTexGend = _rpythonic_function_(		"glTexGend", ctypes.c_void_p, [
	("coord",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_double),] )

glTexGenf = _rpythonic_function_(		"glTexGenf", ctypes.c_void_p, [
	("coord",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_float),] )

glTexGeni = _rpythonic_function_(		"glTexGeni", ctypes.c_void_p, [
	("coord",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_int),] )

glTexGendv = _rpythonic_function_(		"glTexGendv", ctypes.c_void_p, [
	("coord",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_double)),] )

glTexGenfv = _rpythonic_function_(		"glTexGenfv", ctypes.c_void_p, [
	("coord",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

glTexGeniv = _rpythonic_function_(		"glTexGeniv", ctypes.c_void_p, [
	("coord",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

glGetTexGendv = _rpythonic_function_(		"glGetTexGendv", ctypes.c_void_p, [
	("coord",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_double)),] )

glGetTexGenfv = _rpythonic_function_(		"glGetTexGenfv", ctypes.c_void_p, [
	("coord",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

glGetTexGeniv = _rpythonic_function_(		"glGetTexGeniv", ctypes.c_void_p, [
	("coord",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

glTexEnvf = _rpythonic_function_(		"glTexEnvf", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_float),] )

glTexEnvi = _rpythonic_function_(		"glTexEnvi", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_int),] )

glTexEnvfv = _rpythonic_function_(		"glTexEnvfv", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

glTexEnviv = _rpythonic_function_(		"glTexEnviv", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

glGetTexEnvfv = _rpythonic_function_(		"glGetTexEnvfv", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

glGetTexEnviv = _rpythonic_function_(		"glGetTexEnviv", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

glTexParameterf = _rpythonic_function_(		"glTexParameterf", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_float),] )

glTexParameteri = _rpythonic_function_(		"glTexParameteri", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_int),] )

glTexParameterfv = _rpythonic_function_(		"glTexParameterfv", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

glTexParameteriv = _rpythonic_function_(		"glTexParameteriv", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

glGetTexParameterfv = _rpythonic_function_(		"glGetTexParameterfv", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

glGetTexParameteriv = _rpythonic_function_(		"glGetTexParameteriv", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

glGetTexLevelParameterfv = _rpythonic_function_(		"glGetTexLevelParameterfv", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

glGetTexLevelParameteriv = _rpythonic_function_(		"glGetTexLevelParameteriv", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

glTexImage1D = _rpythonic_function_(		"glTexImage1D", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("internalFormat",		ctypes.c_int),
	("width",		ctypes.c_int),
	("border",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("pixels",		ctypes.POINTER(ctypes.c_void_p)),] )

glTexImage2D = _rpythonic_function_(		"glTexImage2D", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("internalFormat",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("border",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("pixels",		ctypes.POINTER(ctypes.c_void_p)),] )

glGetTexImage = _rpythonic_function_(		"glGetTexImage", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("pixels",		ctypes.POINTER(ctypes.c_void_p)),] )

glGenTextures = _rpythonic_function_(		"glGenTextures", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("textures",		ctypes.POINTER(ctypes.c_uint)),] )

glDeleteTextures = _rpythonic_function_(		"glDeleteTextures", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("textures",		ctypes.POINTER(ctypes.c_uint)),] )

glBindTexture = _rpythonic_function_(		"glBindTexture", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("texture",		ctypes.c_uint),] )

glPrioritizeTextures = _rpythonic_function_(		"glPrioritizeTextures", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("textures",		ctypes.POINTER(ctypes.c_uint)),
	("priorities",		ctypes.POINTER(ctypes.c_float)),] )

glAreTexturesResident = _rpythonic_function_(		"glAreTexturesResident", ctypes.c_ubyte, [
	("n",		ctypes.c_int),
	("textures",		ctypes.POINTER(ctypes.c_uint)),
	("residences",		ctypes.POINTER(ctypes.c_ubyte)),] )

glIsTexture = _rpythonic_function_(		"glIsTexture", ctypes.c_ubyte, [
	("texture",		ctypes.c_uint),] )

glTexSubImage1D = _rpythonic_function_(		"glTexSubImage1D", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("xoffset",		ctypes.c_int),
	("width",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("pixels",		ctypes.POINTER(ctypes.c_void_p)),] )

glTexSubImage2D = _rpythonic_function_(		"glTexSubImage2D", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("xoffset",		ctypes.c_int),
	("yoffset",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("pixels",		ctypes.POINTER(ctypes.c_void_p)),] )

glCopyTexImage2D = _rpythonic_function_(		"glCopyTexImage2D", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("internalformat",		ctypes.c_uint),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("border",		ctypes.c_int),] )

glCopyTexImage1D = _rpythonic_function_(		"glCopyTexImage1D", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("internalformat",		ctypes.c_uint),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("border",		ctypes.c_int),] )

glCopyTexSubImage1D = _rpythonic_function_(		"glCopyTexSubImage1D", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("xoffset",		ctypes.c_int),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),] )

glCopyTexSubImage2D = _rpythonic_function_(		"glCopyTexSubImage2D", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("xoffset",		ctypes.c_int),
	("yoffset",		ctypes.c_int),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

glMap1d = _rpythonic_function_(		"glMap1d", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("u1",		ctypes.c_double),
	("u2",		ctypes.c_double),
	("stride",		ctypes.c_int),
	("order",		ctypes.c_int),
	("points",		ctypes.POINTER(ctypes.c_double)),] )

glMap1f = _rpythonic_function_(		"glMap1f", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("u1",		ctypes.c_float),
	("u2",		ctypes.c_float),
	("stride",		ctypes.c_int),
	("order",		ctypes.c_int),
	("points",		ctypes.POINTER(ctypes.c_float)),] )

glMap2d = _rpythonic_function_(		"glMap2d", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("u1",		ctypes.c_double),
	("u2",		ctypes.c_double),
	("ustride",		ctypes.c_int),
	("uorder",		ctypes.c_int),
	("v1",		ctypes.c_double),
	("v2",		ctypes.c_double),
	("vstride",		ctypes.c_int),
	("vorder",		ctypes.c_int),
	("points",		ctypes.POINTER(ctypes.c_double)),] )

glMap2f = _rpythonic_function_(		"glMap2f", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("u1",		ctypes.c_float),
	("u2",		ctypes.c_float),
	("ustride",		ctypes.c_int),
	("uorder",		ctypes.c_int),
	("v1",		ctypes.c_float),
	("v2",		ctypes.c_float),
	("vstride",		ctypes.c_int),
	("vorder",		ctypes.c_int),
	("points",		ctypes.POINTER(ctypes.c_float)),] )

glGetMapdv = _rpythonic_function_(		"glGetMapdv", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("query",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

glGetMapfv = _rpythonic_function_(		"glGetMapfv", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("query",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

glGetMapiv = _rpythonic_function_(		"glGetMapiv", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("query",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_int)),] )

glEvalCoord1d = _rpythonic_function_(		"glEvalCoord1d", ctypes.c_void_p, [
	("u",		ctypes.c_double),] )

glEvalCoord1f = _rpythonic_function_(		"glEvalCoord1f", ctypes.c_void_p, [
	("u",		ctypes.c_float),] )

glEvalCoord1dv = _rpythonic_function_(		"glEvalCoord1dv", ctypes.c_void_p, [
	("u",		ctypes.POINTER(ctypes.c_double)),] )

glEvalCoord1fv = _rpythonic_function_(		"glEvalCoord1fv", ctypes.c_void_p, [
	("u",		ctypes.POINTER(ctypes.c_float)),] )

glEvalCoord2d = _rpythonic_function_(		"glEvalCoord2d", ctypes.c_void_p, [
	("u",		ctypes.c_double),
	("v",		ctypes.c_double),] )

glEvalCoord2f = _rpythonic_function_(		"glEvalCoord2f", ctypes.c_void_p, [
	("u",		ctypes.c_float),
	("v",		ctypes.c_float),] )

glEvalCoord2dv = _rpythonic_function_(		"glEvalCoord2dv", ctypes.c_void_p, [
	("u",		ctypes.POINTER(ctypes.c_double)),] )

glEvalCoord2fv = _rpythonic_function_(		"glEvalCoord2fv", ctypes.c_void_p, [
	("u",		ctypes.POINTER(ctypes.c_float)),] )

glMapGrid1d = _rpythonic_function_(		"glMapGrid1d", ctypes.c_void_p, [
	("un",		ctypes.c_int),
	("u1",		ctypes.c_double),
	("u2",		ctypes.c_double),] )

glMapGrid1f = _rpythonic_function_(		"glMapGrid1f", ctypes.c_void_p, [
	("un",		ctypes.c_int),
	("u1",		ctypes.c_float),
	("u2",		ctypes.c_float),] )

glMapGrid2d = _rpythonic_function_(		"glMapGrid2d", ctypes.c_void_p, [
	("un",		ctypes.c_int),
	("u1",		ctypes.c_double),
	("u2",		ctypes.c_double),
	("vn",		ctypes.c_int),
	("v1",		ctypes.c_double),
	("v2",		ctypes.c_double),] )

glMapGrid2f = _rpythonic_function_(		"glMapGrid2f", ctypes.c_void_p, [
	("un",		ctypes.c_int),
	("u1",		ctypes.c_float),
	("u2",		ctypes.c_float),
	("vn",		ctypes.c_int),
	("v1",		ctypes.c_float),
	("v2",		ctypes.c_float),] )

glEvalPoint1 = _rpythonic_function_(		"glEvalPoint1", ctypes.c_void_p, [
	("i",		ctypes.c_int),] )

glEvalPoint2 = _rpythonic_function_(		"glEvalPoint2", ctypes.c_void_p, [
	("i",		ctypes.c_int),
	("j",		ctypes.c_int),] )

glEvalMesh1 = _rpythonic_function_(		"glEvalMesh1", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("i1",		ctypes.c_int),
	("i2",		ctypes.c_int),] )

glEvalMesh2 = _rpythonic_function_(		"glEvalMesh2", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("i1",		ctypes.c_int),
	("i2",		ctypes.c_int),
	("j1",		ctypes.c_int),
	("j2",		ctypes.c_int),] )

glFogf = _rpythonic_function_(		"glFogf", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_float),] )

glFogi = _rpythonic_function_(		"glFogi", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_int),] )

glFogfv = _rpythonic_function_(		"glFogfv", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

glFogiv = _rpythonic_function_(		"glFogiv", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

glFeedbackBuffer = _rpythonic_function_(		"glFeedbackBuffer", ctypes.c_void_p, [
	("size",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("buffer",		ctypes.POINTER(ctypes.c_float)),] )

glPassThrough = _rpythonic_function_(		"glPassThrough", ctypes.c_void_p, [
	("token",		ctypes.c_float),] )

glSelectBuffer = _rpythonic_function_(		"glSelectBuffer", ctypes.c_void_p, [
	("size",		ctypes.c_int),
	("buffer",		ctypes.POINTER(ctypes.c_uint)),] )

glInitNames = _rpythonic_function_(		"glInitNames", ctypes.c_void_p, [] )

glLoadName = _rpythonic_function_(		"glLoadName", ctypes.c_void_p, [
	("name",		ctypes.c_uint),] )

glPushName = _rpythonic_function_(		"glPushName", ctypes.c_void_p, [
	("name",		ctypes.c_uint),] )

glPopName = _rpythonic_function_(		"glPopName", ctypes.c_void_p, [] )

glDrawRangeElements = _rpythonic_function_(		"glDrawRangeElements", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("start",		ctypes.c_uint),
	("end",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("indices",		ctypes.POINTER(ctypes.c_void_p)),] )

glTexImage3D = _rpythonic_function_(		"glTexImage3D", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("internalFormat",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("depth",		ctypes.c_int),
	("border",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("pixels",		ctypes.POINTER(ctypes.c_void_p)),] )

glTexSubImage3D = _rpythonic_function_(		"glTexSubImage3D", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("xoffset",		ctypes.c_int),
	("yoffset",		ctypes.c_int),
	("zoffset",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("depth",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("pixels",		ctypes.POINTER(ctypes.c_void_p)),] )

glCopyTexSubImage3D = _rpythonic_function_(		"glCopyTexSubImage3D", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("xoffset",		ctypes.c_int),
	("yoffset",		ctypes.c_int),
	("zoffset",		ctypes.c_int),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

PFNGLDRAWRANGEELEMENTSPROC = _rpythonic_function_(		"PFNGLDRAWRANGEELEMENTSPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("start",		ctypes.c_uint),
	("end",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("indices",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLTEXIMAGE3DPROC = _rpythonic_function_(		"PFNGLTEXIMAGE3DPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("internalformat",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("depth",		ctypes.c_int),
	("border",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("pixels",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLTEXSUBIMAGE3DPROC = _rpythonic_function_(		"PFNGLTEXSUBIMAGE3DPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("xoffset",		ctypes.c_int),
	("yoffset",		ctypes.c_int),
	("zoffset",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("depth",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("pixels",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLCOPYTEXSUBIMAGE3DPROC = _rpythonic_function_(		"PFNGLCOPYTEXSUBIMAGE3DPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("xoffset",		ctypes.c_int),
	("yoffset",		ctypes.c_int),
	("zoffset",		ctypes.c_int),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

glColorTable = _rpythonic_function_(		"glColorTable", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("internalformat",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("table",		ctypes.POINTER(ctypes.c_void_p)),] )

glColorSubTable = _rpythonic_function_(		"glColorSubTable", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("start",		ctypes.c_int),
	("count",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

glColorTableParameteriv = _rpythonic_function_(		"glColorTableParameteriv", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

glColorTableParameterfv = _rpythonic_function_(		"glColorTableParameterfv", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

glCopyColorSubTable = _rpythonic_function_(		"glCopyColorSubTable", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("start",		ctypes.c_int),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),] )

glCopyColorTable = _rpythonic_function_(		"glCopyColorTable", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("internalformat",		ctypes.c_uint),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),] )

glGetColorTable = _rpythonic_function_(		"glGetColorTable", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("table",		ctypes.POINTER(ctypes.c_void_p)),] )

glGetColorTableParameterfv = _rpythonic_function_(		"glGetColorTableParameterfv", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

glGetColorTableParameteriv = _rpythonic_function_(		"glGetColorTableParameteriv", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

glBlendEquation = _rpythonic_function_(		"glBlendEquation", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),] )

glBlendColor = _rpythonic_function_(		"glBlendColor", ctypes.c_void_p, [
	("red",		ctypes.c_float),
	("green",		ctypes.c_float),
	("blue",		ctypes.c_float),
	("alpha",		ctypes.c_float),] )

glHistogram = _rpythonic_function_(		"glHistogram", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("internalformat",		ctypes.c_uint),
	("sink",		ctypes.c_ubyte),] )

glResetHistogram = _rpythonic_function_(		"glResetHistogram", ctypes.c_void_p, [
	("target",		ctypes.c_uint),] )

glGetHistogram = _rpythonic_function_(		"glGetHistogram", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("reset",		ctypes.c_ubyte),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("values",		ctypes.POINTER(ctypes.c_void_p)),] )

glGetHistogramParameterfv = _rpythonic_function_(		"glGetHistogramParameterfv", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

glGetHistogramParameteriv = _rpythonic_function_(		"glGetHistogramParameteriv", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

glMinmax = _rpythonic_function_(		"glMinmax", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("internalformat",		ctypes.c_uint),
	("sink",		ctypes.c_ubyte),] )

glResetMinmax = _rpythonic_function_(		"glResetMinmax", ctypes.c_void_p, [
	("target",		ctypes.c_uint),] )

glGetMinmax = _rpythonic_function_(		"glGetMinmax", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("reset",		ctypes.c_ubyte),
	("format",		ctypes.c_uint),
	("types",		ctypes.c_uint),
	("values",		ctypes.POINTER(ctypes.c_void_p)),] )

glGetMinmaxParameterfv = _rpythonic_function_(		"glGetMinmaxParameterfv", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

glGetMinmaxParameteriv = _rpythonic_function_(		"glGetMinmaxParameteriv", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

glConvolutionFilter1D = _rpythonic_function_(		"glConvolutionFilter1D", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("internalformat",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("image",		ctypes.POINTER(ctypes.c_void_p)),] )

glConvolutionFilter2D = _rpythonic_function_(		"glConvolutionFilter2D", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("internalformat",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("image",		ctypes.POINTER(ctypes.c_void_p)),] )

glConvolutionParameterf = _rpythonic_function_(		"glConvolutionParameterf", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.c_float),] )

glConvolutionParameterfv = _rpythonic_function_(		"glConvolutionParameterfv", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

glConvolutionParameteri = _rpythonic_function_(		"glConvolutionParameteri", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.c_int),] )

glConvolutionParameteriv = _rpythonic_function_(		"glConvolutionParameteriv", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

glCopyConvolutionFilter1D = _rpythonic_function_(		"glCopyConvolutionFilter1D", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("internalformat",		ctypes.c_uint),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),] )

glCopyConvolutionFilter2D = _rpythonic_function_(		"glCopyConvolutionFilter2D", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("internalformat",		ctypes.c_uint),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

glGetConvolutionFilter = _rpythonic_function_(		"glGetConvolutionFilter", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("image",		ctypes.POINTER(ctypes.c_void_p)),] )

glGetConvolutionParameterfv = _rpythonic_function_(		"glGetConvolutionParameterfv", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

glGetConvolutionParameteriv = _rpythonic_function_(		"glGetConvolutionParameteriv", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

glSeparableFilter2D = _rpythonic_function_(		"glSeparableFilter2D", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("internalformat",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("row",		ctypes.POINTER(ctypes.c_void_p)),
	("column",		ctypes.POINTER(ctypes.c_void_p)),] )

glGetSeparableFilter = _rpythonic_function_(		"glGetSeparableFilter", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("row",		ctypes.POINTER(ctypes.c_void_p)),
	("column",		ctypes.POINTER(ctypes.c_void_p)),
	("span",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLBLENDCOLORPROC = _rpythonic_function_(		"PFNGLBLENDCOLORPROC", ctypes.c_void_p, [
	("red",		ctypes.c_float),
	("green",		ctypes.c_float),
	("blue",		ctypes.c_float),
	("alpha",		ctypes.c_float),] )

PFNGLBLENDEQUATIONPROC = _rpythonic_function_(		"PFNGLBLENDEQUATIONPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),] )

glActiveTexture = _rpythonic_function_(		"glActiveTexture", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),] )

glClientActiveTexture = _rpythonic_function_(		"glClientActiveTexture", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),] )

glCompressedTexImage1D = _rpythonic_function_(		"glCompressedTexImage1D", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("internalformat",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("border",		ctypes.c_int),
	("imageSize",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

glCompressedTexImage2D = _rpythonic_function_(		"glCompressedTexImage2D", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("internalformat",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("border",		ctypes.c_int),
	("imageSize",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

glCompressedTexImage3D = _rpythonic_function_(		"glCompressedTexImage3D", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("internalformat",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("depth",		ctypes.c_int),
	("border",		ctypes.c_int),
	("imageSize",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

glCompressedTexSubImage2D = _rpythonic_function_(		"glCompressedTexSubImage2D", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("xoffset",		ctypes.c_int),
	("yoffset",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("imageSize",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

glCompressedTexSubImage1D = _rpythonic_function_(		"glCompressedTexSubImage1D", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("xoffset",		ctypes.c_int),
	("width",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("imageSize",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

glCompressedTexSubImage3D = _rpythonic_function_(		"glCompressedTexSubImage3D", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("xoffset",		ctypes.c_int),
	("yoffset",		ctypes.c_int),
	("zoffset",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("depth",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("imageSize",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

glGetCompressedTexImage = _rpythonic_function_(		"glGetCompressedTexImage", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("lod",		ctypes.c_int),
	("img",		ctypes.POINTER(ctypes.c_void_p)),] )

glMultiTexCoord1d = _rpythonic_function_(		"glMultiTexCoord1d", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_double),] )

glMultiTexCoord1dv = _rpythonic_function_(		"glMultiTexCoord1dv", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

glMultiTexCoord1f = _rpythonic_function_(		"glMultiTexCoord1f", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_float),] )

glMultiTexCoord1fv = _rpythonic_function_(		"glMultiTexCoord1fv", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

glMultiTexCoord1i = _rpythonic_function_(		"glMultiTexCoord1i", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_int),] )

glMultiTexCoord1iv = _rpythonic_function_(		"glMultiTexCoord1iv", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_int)),] )

glMultiTexCoord1s = _rpythonic_function_(		"glMultiTexCoord1s", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_short),] )

glMultiTexCoord1sv = _rpythonic_function_(		"glMultiTexCoord1sv", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_short)),] )

glMultiTexCoord2d = _rpythonic_function_(		"glMultiTexCoord2d", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_double),
	("t",		ctypes.c_double),] )

glMultiTexCoord2dv = _rpythonic_function_(		"glMultiTexCoord2dv", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

glMultiTexCoord2f = _rpythonic_function_(		"glMultiTexCoord2f", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_float),
	("t",		ctypes.c_float),] )

glMultiTexCoord2fv = _rpythonic_function_(		"glMultiTexCoord2fv", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

glMultiTexCoord2i = _rpythonic_function_(		"glMultiTexCoord2i", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_int),
	("t",		ctypes.c_int),] )

glMultiTexCoord2iv = _rpythonic_function_(		"glMultiTexCoord2iv", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_int)),] )

glMultiTexCoord2s = _rpythonic_function_(		"glMultiTexCoord2s", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_short),
	("t",		ctypes.c_short),] )

glMultiTexCoord2sv = _rpythonic_function_(		"glMultiTexCoord2sv", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_short)),] )

glMultiTexCoord3d = _rpythonic_function_(		"glMultiTexCoord3d", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_double),
	("t",		ctypes.c_double),
	("r",		ctypes.c_double),] )

glMultiTexCoord3dv = _rpythonic_function_(		"glMultiTexCoord3dv", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

glMultiTexCoord3f = _rpythonic_function_(		"glMultiTexCoord3f", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_float),
	("t",		ctypes.c_float),
	("r",		ctypes.c_float),] )

glMultiTexCoord3fv = _rpythonic_function_(		"glMultiTexCoord3fv", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

glMultiTexCoord3i = _rpythonic_function_(		"glMultiTexCoord3i", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_int),
	("t",		ctypes.c_int),
	("r",		ctypes.c_int),] )

glMultiTexCoord3iv = _rpythonic_function_(		"glMultiTexCoord3iv", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_int)),] )

glMultiTexCoord3s = _rpythonic_function_(		"glMultiTexCoord3s", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_short),
	("t",		ctypes.c_short),
	("r",		ctypes.c_short),] )

glMultiTexCoord3sv = _rpythonic_function_(		"glMultiTexCoord3sv", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_short)),] )

glMultiTexCoord4d = _rpythonic_function_(		"glMultiTexCoord4d", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_double),
	("t",		ctypes.c_double),
	("r",		ctypes.c_double),
	("q",		ctypes.c_double),] )

glMultiTexCoord4dv = _rpythonic_function_(		"glMultiTexCoord4dv", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

glMultiTexCoord4f = _rpythonic_function_(		"glMultiTexCoord4f", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_float),
	("t",		ctypes.c_float),
	("r",		ctypes.c_float),
	("q",		ctypes.c_float),] )

glMultiTexCoord4fv = _rpythonic_function_(		"glMultiTexCoord4fv", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

glMultiTexCoord4i = _rpythonic_function_(		"glMultiTexCoord4i", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_int),
	("t",		ctypes.c_int),
	("r",		ctypes.c_int),
	("q",		ctypes.c_int),] )

glMultiTexCoord4iv = _rpythonic_function_(		"glMultiTexCoord4iv", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_int)),] )

glMultiTexCoord4s = _rpythonic_function_(		"glMultiTexCoord4s", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_short),
	("t",		ctypes.c_short),
	("r",		ctypes.c_short),
	("q",		ctypes.c_short),] )

glMultiTexCoord4sv = _rpythonic_function_(		"glMultiTexCoord4sv", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_short)),] )

glLoadTransposeMatrixd = _rpythonic_function_(		"glLoadTransposeMatrixd", ctypes.c_void_p, [
	("m",		( ctypes.c_double * 16 )),] )

glLoadTransposeMatrixf = _rpythonic_function_(		"glLoadTransposeMatrixf", ctypes.c_void_p, [
	("m",		( ctypes.c_float * 16 )),] )

glMultTransposeMatrixd = _rpythonic_function_(		"glMultTransposeMatrixd", ctypes.c_void_p, [
	("m",		( ctypes.c_double * 16 )),] )

glMultTransposeMatrixf = _rpythonic_function_(		"glMultTransposeMatrixf", ctypes.c_void_p, [
	("m",		( ctypes.c_float * 16 )),] )

glSampleCoverage = _rpythonic_function_(		"glSampleCoverage", ctypes.c_void_p, [
	("value",		ctypes.c_float),
	("invert",		ctypes.c_ubyte),] )

PFNGLACTIVETEXTUREPROC = _rpythonic_function_(		"PFNGLACTIVETEXTUREPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),] )

PFNGLSAMPLECOVERAGEPROC = _rpythonic_function_(		"PFNGLSAMPLECOVERAGEPROC", ctypes.c_void_p, [
	("value",		ctypes.c_float),
	("invert",		ctypes.c_ubyte),] )

PFNGLCOMPRESSEDTEXIMAGE3DPROC = _rpythonic_function_(		"PFNGLCOMPRESSEDTEXIMAGE3DPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("internalformat",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("depth",		ctypes.c_int),
	("border",		ctypes.c_int),
	("imageSize",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLCOMPRESSEDTEXIMAGE2DPROC = _rpythonic_function_(		"PFNGLCOMPRESSEDTEXIMAGE2DPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("internalformat",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("border",		ctypes.c_int),
	("imageSize",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC = _rpythonic_function_(		"PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("xoffset",		ctypes.c_int),
	("yoffset",		ctypes.c_int),
	("zoffset",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("depth",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("imageSize",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLCOMPRESSEDTEXIMAGE1DPROC = _rpythonic_function_(		"PFNGLCOMPRESSEDTEXIMAGE1DPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("internalformat",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("border",		ctypes.c_int),
	("imageSize",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC = _rpythonic_function_(		"PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("xoffset",		ctypes.c_int),
	("yoffset",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("imageSize",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC = _rpythonic_function_(		"PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("xoffset",		ctypes.c_int),
	("width",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("imageSize",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLGETCOMPRESSEDTEXIMAGEPROC = _rpythonic_function_(		"PFNGLGETCOMPRESSEDTEXIMAGEPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("img",		ctypes.POINTER(ctypes.c_void_p)),] )

glActiveTextureARB = _rpythonic_function_(		"glActiveTextureARB", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),] )

glClientActiveTextureARB = _rpythonic_function_(		"glClientActiveTextureARB", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),] )

glMultiTexCoord1dARB = _rpythonic_function_(		"glMultiTexCoord1dARB", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_double),] )

glMultiTexCoord1dvARB = _rpythonic_function_(		"glMultiTexCoord1dvARB", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

glMultiTexCoord1fARB = _rpythonic_function_(		"glMultiTexCoord1fARB", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_float),] )

glMultiTexCoord1fvARB = _rpythonic_function_(		"glMultiTexCoord1fvARB", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

glMultiTexCoord1iARB = _rpythonic_function_(		"glMultiTexCoord1iARB", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_int),] )

glMultiTexCoord1ivARB = _rpythonic_function_(		"glMultiTexCoord1ivARB", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_int)),] )

glMultiTexCoord1sARB = _rpythonic_function_(		"glMultiTexCoord1sARB", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_short),] )

glMultiTexCoord1svARB = _rpythonic_function_(		"glMultiTexCoord1svARB", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_short)),] )

glMultiTexCoord2dARB = _rpythonic_function_(		"glMultiTexCoord2dARB", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_double),
	("t",		ctypes.c_double),] )

glMultiTexCoord2dvARB = _rpythonic_function_(		"glMultiTexCoord2dvARB", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

glMultiTexCoord2fARB = _rpythonic_function_(		"glMultiTexCoord2fARB", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_float),
	("t",		ctypes.c_float),] )

glMultiTexCoord2fvARB = _rpythonic_function_(		"glMultiTexCoord2fvARB", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

glMultiTexCoord2iARB = _rpythonic_function_(		"glMultiTexCoord2iARB", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_int),
	("t",		ctypes.c_int),] )

glMultiTexCoord2ivARB = _rpythonic_function_(		"glMultiTexCoord2ivARB", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_int)),] )

glMultiTexCoord2sARB = _rpythonic_function_(		"glMultiTexCoord2sARB", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_short),
	("t",		ctypes.c_short),] )

glMultiTexCoord2svARB = _rpythonic_function_(		"glMultiTexCoord2svARB", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_short)),] )

glMultiTexCoord3dARB = _rpythonic_function_(		"glMultiTexCoord3dARB", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_double),
	("t",		ctypes.c_double),
	("r",		ctypes.c_double),] )

glMultiTexCoord3dvARB = _rpythonic_function_(		"glMultiTexCoord3dvARB", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

glMultiTexCoord3fARB = _rpythonic_function_(		"glMultiTexCoord3fARB", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_float),
	("t",		ctypes.c_float),
	("r",		ctypes.c_float),] )

glMultiTexCoord3fvARB = _rpythonic_function_(		"glMultiTexCoord3fvARB", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

glMultiTexCoord3iARB = _rpythonic_function_(		"glMultiTexCoord3iARB", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_int),
	("t",		ctypes.c_int),
	("r",		ctypes.c_int),] )

glMultiTexCoord3ivARB = _rpythonic_function_(		"glMultiTexCoord3ivARB", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_int)),] )

glMultiTexCoord3sARB = _rpythonic_function_(		"glMultiTexCoord3sARB", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_short),
	("t",		ctypes.c_short),
	("r",		ctypes.c_short),] )

glMultiTexCoord3svARB = _rpythonic_function_(		"glMultiTexCoord3svARB", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_short)),] )

glMultiTexCoord4dARB = _rpythonic_function_(		"glMultiTexCoord4dARB", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_double),
	("t",		ctypes.c_double),
	("r",		ctypes.c_double),
	("q",		ctypes.c_double),] )

glMultiTexCoord4dvARB = _rpythonic_function_(		"glMultiTexCoord4dvARB", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

glMultiTexCoord4fARB = _rpythonic_function_(		"glMultiTexCoord4fARB", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_float),
	("t",		ctypes.c_float),
	("r",		ctypes.c_float),
	("q",		ctypes.c_float),] )

glMultiTexCoord4fvARB = _rpythonic_function_(		"glMultiTexCoord4fvARB", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

glMultiTexCoord4iARB = _rpythonic_function_(		"glMultiTexCoord4iARB", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_int),
	("t",		ctypes.c_int),
	("r",		ctypes.c_int),
	("q",		ctypes.c_int),] )

glMultiTexCoord4ivARB = _rpythonic_function_(		"glMultiTexCoord4ivARB", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_int)),] )

glMultiTexCoord4sARB = _rpythonic_function_(		"glMultiTexCoord4sARB", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_short),
	("t",		ctypes.c_short),
	("r",		ctypes.c_short),
	("q",		ctypes.c_short),] )

glMultiTexCoord4svARB = _rpythonic_function_(		"glMultiTexCoord4svARB", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_short)),] )

PFNGLACTIVETEXTUREARBPROC = _rpythonic_function_(		"PFNGLACTIVETEXTUREARBPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),] )

PFNGLCLIENTACTIVETEXTUREARBPROC = _rpythonic_function_(		"PFNGLCLIENTACTIVETEXTUREARBPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),] )

PFNGLMULTITEXCOORD1DARBPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD1DARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_double),] )

PFNGLMULTITEXCOORD1DVARBPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD1DVARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLMULTITEXCOORD1FARBPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD1FARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_float),] )

PFNGLMULTITEXCOORD1FVARBPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD1FVARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLMULTITEXCOORD1IARBPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD1IARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_int),] )

PFNGLMULTITEXCOORD1IVARBPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD1IVARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLMULTITEXCOORD1SARBPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD1SARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_short),] )

PFNGLMULTITEXCOORD1SVARBPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD1SVARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_short)),] )

PFNGLMULTITEXCOORD2DARBPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD2DARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_double),
	("t",		ctypes.c_double),] )

PFNGLMULTITEXCOORD2DVARBPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD2DVARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLMULTITEXCOORD2FARBPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD2FARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_float),
	("t",		ctypes.c_float),] )

PFNGLMULTITEXCOORD2FVARBPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD2FVARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLMULTITEXCOORD2IARBPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD2IARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_int),
	("t",		ctypes.c_int),] )

PFNGLMULTITEXCOORD2IVARBPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD2IVARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLMULTITEXCOORD2SARBPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD2SARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_short),
	("t",		ctypes.c_short),] )

PFNGLMULTITEXCOORD2SVARBPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD2SVARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_short)),] )

PFNGLMULTITEXCOORD3DARBPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD3DARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_double),
	("t",		ctypes.c_double),
	("r",		ctypes.c_double),] )

PFNGLMULTITEXCOORD3DVARBPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD3DVARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLMULTITEXCOORD3FARBPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD3FARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_float),
	("t",		ctypes.c_float),
	("r",		ctypes.c_float),] )

PFNGLMULTITEXCOORD3FVARBPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD3FVARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLMULTITEXCOORD3IARBPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD3IARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_int),
	("t",		ctypes.c_int),
	("r",		ctypes.c_int),] )

PFNGLMULTITEXCOORD3IVARBPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD3IVARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLMULTITEXCOORD3SARBPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD3SARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_short),
	("t",		ctypes.c_short),
	("r",		ctypes.c_short),] )

PFNGLMULTITEXCOORD3SVARBPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD3SVARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_short)),] )

PFNGLMULTITEXCOORD4DARBPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD4DARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_double),
	("t",		ctypes.c_double),
	("r",		ctypes.c_double),
	("q",		ctypes.c_double),] )

PFNGLMULTITEXCOORD4DVARBPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD4DVARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLMULTITEXCOORD4FARBPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD4FARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_float),
	("t",		ctypes.c_float),
	("r",		ctypes.c_float),
	("q",		ctypes.c_float),] )

PFNGLMULTITEXCOORD4FVARBPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD4FVARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLMULTITEXCOORD4IARBPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD4IARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_int),
	("t",		ctypes.c_int),
	("r",		ctypes.c_int),
	("q",		ctypes.c_int),] )

PFNGLMULTITEXCOORD4IVARBPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD4IVARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLMULTITEXCOORD4SARBPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD4SARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_short),
	("t",		ctypes.c_short),
	("r",		ctypes.c_short),
	("q",		ctypes.c_short),] )

PFNGLMULTITEXCOORD4SVARBPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD4SVARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_short)),] )

imaxabs = _rpythonic_function_(		"imaxabs", ctypes.c_longlong, [
	("__n",		ctypes.c_longlong),] )

imaxdiv = _rpythonic_function_(		"imaxdiv", imaxdiv_t, [
	("__numer",		ctypes.c_longlong),
	("__denom",		ctypes.c_longlong),] )

strtoimax = _rpythonic_function_(		"strtoimax", ctypes.c_longlong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

strtoumax = _rpythonic_function_(		"strtoumax", ctypes.c_ulonglong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

wcstoimax = _rpythonic_function_(		"wcstoimax", ctypes.c_longlong, [
	("__nptr",		ctypes.POINTER(ctypes.c_int64)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int64))),
	("__base",		ctypes.c_int),] )

wcstoumax = _rpythonic_function_(		"wcstoumax", ctypes.c_ulonglong, [
	("__nptr",		ctypes.POINTER(ctypes.c_int64)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int64))),
	("__base",		ctypes.c_int),] )

GLDEBUGPROCARB = _rpythonic_function_(		"GLDEBUGPROCARB", ctypes.c_void_p, [
	("source",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("C_id",		ctypes.c_uint),
	("severity",		ctypes.c_uint),
	("length",		ctypes.c_int),
	("message",		ctypes.POINTER(ctypes.c_char)),
	("userParam",		ctypes.POINTER(ctypes.c_void_p)),] )

GLDEBUGPROCAMD = _rpythonic_function_(		"GLDEBUGPROCAMD", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),
	("category",		ctypes.c_uint),
	("severity",		ctypes.c_uint),
	("length",		ctypes.c_int),
	("message",		ctypes.POINTER(ctypes.c_char)),
	("userParam",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLCOLORTABLEPROC = _rpythonic_function_(		"PFNGLCOLORTABLEPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("internalformat",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("table",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLCOLORTABLEPARAMETERFVPROC = _rpythonic_function_(		"PFNGLCOLORTABLEPARAMETERFVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLCOLORTABLEPARAMETERIVPROC = _rpythonic_function_(		"PFNGLCOLORTABLEPARAMETERIVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLCOPYCOLORTABLEPROC = _rpythonic_function_(		"PFNGLCOPYCOLORTABLEPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("internalformat",		ctypes.c_uint),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),] )

PFNGLGETCOLORTABLEPROC = _rpythonic_function_(		"PFNGLGETCOLORTABLEPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("table",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLGETCOLORTABLEPARAMETERIVPROC = _rpythonic_function_(		"PFNGLGETCOLORTABLEPARAMETERIVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETCOLORTABLEPARAMETERFVPROC = _rpythonic_function_(		"PFNGLGETCOLORTABLEPARAMETERFVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLCOLORSUBTABLEPROC = _rpythonic_function_(		"PFNGLCOLORSUBTABLEPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("start",		ctypes.c_int),
	("count",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLCOPYCOLORSUBTABLEPROC = _rpythonic_function_(		"PFNGLCOPYCOLORSUBTABLEPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("start",		ctypes.c_int),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),] )

PFNGLCONVOLUTIONFILTER1DPROC = _rpythonic_function_(		"PFNGLCONVOLUTIONFILTER1DPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("internalformat",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("image",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLCONVOLUTIONFILTER2DPROC = _rpythonic_function_(		"PFNGLCONVOLUTIONFILTER2DPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("internalformat",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("image",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLCONVOLUTIONPARAMETERFPROC = _rpythonic_function_(		"PFNGLCONVOLUTIONPARAMETERFPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.c_float),] )

PFNGLCONVOLUTIONPARAMETERFVPROC = _rpythonic_function_(		"PFNGLCONVOLUTIONPARAMETERFVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLCONVOLUTIONPARAMETERIPROC = _rpythonic_function_(		"PFNGLCONVOLUTIONPARAMETERIPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.c_int),] )

PFNGLCONVOLUTIONPARAMETERIVPROC = _rpythonic_function_(		"PFNGLCONVOLUTIONPARAMETERIVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLCOPYCONVOLUTIONFILTER1DPROC = _rpythonic_function_(		"PFNGLCOPYCONVOLUTIONFILTER1DPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("internalformat",		ctypes.c_uint),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),] )

PFNGLCOPYCONVOLUTIONFILTER2DPROC = _rpythonic_function_(		"PFNGLCOPYCONVOLUTIONFILTER2DPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("internalformat",		ctypes.c_uint),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

PFNGLGETCONVOLUTIONFILTERPROC = _rpythonic_function_(		"PFNGLGETCONVOLUTIONFILTERPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("image",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLGETCONVOLUTIONPARAMETERFVPROC = _rpythonic_function_(		"PFNGLGETCONVOLUTIONPARAMETERFVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETCONVOLUTIONPARAMETERIVPROC = _rpythonic_function_(		"PFNGLGETCONVOLUTIONPARAMETERIVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETSEPARABLEFILTERPROC = _rpythonic_function_(		"PFNGLGETSEPARABLEFILTERPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("row",		ctypes.POINTER(ctypes.c_void_p)),
	("column",		ctypes.POINTER(ctypes.c_void_p)),
	("span",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLSEPARABLEFILTER2DPROC = _rpythonic_function_(		"PFNGLSEPARABLEFILTER2DPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("internalformat",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("row",		ctypes.POINTER(ctypes.c_void_p)),
	("column",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLGETHISTOGRAMPROC = _rpythonic_function_(		"PFNGLGETHISTOGRAMPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("reset",		ctypes.c_ubyte),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("values",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLGETHISTOGRAMPARAMETERFVPROC = _rpythonic_function_(		"PFNGLGETHISTOGRAMPARAMETERFVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETHISTOGRAMPARAMETERIVPROC = _rpythonic_function_(		"PFNGLGETHISTOGRAMPARAMETERIVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETMINMAXPROC = _rpythonic_function_(		"PFNGLGETMINMAXPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("reset",		ctypes.c_ubyte),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("values",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLGETMINMAXPARAMETERFVPROC = _rpythonic_function_(		"PFNGLGETMINMAXPARAMETERFVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETMINMAXPARAMETERIVPROC = _rpythonic_function_(		"PFNGLGETMINMAXPARAMETERIVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLHISTOGRAMPROC = _rpythonic_function_(		"PFNGLHISTOGRAMPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("internalformat",		ctypes.c_uint),
	("sink",		ctypes.c_ubyte),] )

PFNGLMINMAXPROC = _rpythonic_function_(		"PFNGLMINMAXPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("internalformat",		ctypes.c_uint),
	("sink",		ctypes.c_ubyte),] )

PFNGLRESETHISTOGRAMPROC = _rpythonic_function_(		"PFNGLRESETHISTOGRAMPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),] )

PFNGLRESETMINMAXPROC = _rpythonic_function_(		"PFNGLRESETMINMAXPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),] )

PFNGLCLIENTACTIVETEXTUREPROC = _rpythonic_function_(		"PFNGLCLIENTACTIVETEXTUREPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),] )

PFNGLMULTITEXCOORD1DPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD1DPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_double),] )

PFNGLMULTITEXCOORD1DVPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD1DVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLMULTITEXCOORD1FPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD1FPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_float),] )

PFNGLMULTITEXCOORD1FVPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD1FVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLMULTITEXCOORD1IPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD1IPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_int),] )

PFNGLMULTITEXCOORD1IVPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD1IVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLMULTITEXCOORD1SPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD1SPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_short),] )

PFNGLMULTITEXCOORD1SVPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD1SVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_short)),] )

PFNGLMULTITEXCOORD2DPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD2DPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_double),
	("t",		ctypes.c_double),] )

PFNGLMULTITEXCOORD2DVPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD2DVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLMULTITEXCOORD2FPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD2FPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_float),
	("t",		ctypes.c_float),] )

PFNGLMULTITEXCOORD2FVPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD2FVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLMULTITEXCOORD2IPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD2IPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_int),
	("t",		ctypes.c_int),] )

PFNGLMULTITEXCOORD2IVPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD2IVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLMULTITEXCOORD2SPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD2SPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_short),
	("t",		ctypes.c_short),] )

PFNGLMULTITEXCOORD2SVPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD2SVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_short)),] )

PFNGLMULTITEXCOORD3DPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD3DPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_double),
	("t",		ctypes.c_double),
	("r",		ctypes.c_double),] )

PFNGLMULTITEXCOORD3DVPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD3DVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLMULTITEXCOORD3FPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD3FPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_float),
	("t",		ctypes.c_float),
	("r",		ctypes.c_float),] )

PFNGLMULTITEXCOORD3FVPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD3FVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLMULTITEXCOORD3IPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD3IPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_int),
	("t",		ctypes.c_int),
	("r",		ctypes.c_int),] )

PFNGLMULTITEXCOORD3IVPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD3IVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLMULTITEXCOORD3SPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD3SPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_short),
	("t",		ctypes.c_short),
	("r",		ctypes.c_short),] )

PFNGLMULTITEXCOORD3SVPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD3SVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_short)),] )

PFNGLMULTITEXCOORD4DPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD4DPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_double),
	("t",		ctypes.c_double),
	("r",		ctypes.c_double),
	("q",		ctypes.c_double),] )

PFNGLMULTITEXCOORD4DVPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD4DVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLMULTITEXCOORD4FPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD4FPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_float),
	("t",		ctypes.c_float),
	("r",		ctypes.c_float),
	("q",		ctypes.c_float),] )

PFNGLMULTITEXCOORD4FVPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD4FVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLMULTITEXCOORD4IPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD4IPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_int),
	("t",		ctypes.c_int),
	("r",		ctypes.c_int),
	("q",		ctypes.c_int),] )

PFNGLMULTITEXCOORD4IVPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD4IVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLMULTITEXCOORD4SPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD4SPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_short),
	("t",		ctypes.c_short),
	("r",		ctypes.c_short),
	("q",		ctypes.c_short),] )

PFNGLMULTITEXCOORD4SVPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD4SVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_short)),] )

PFNGLLOADTRANSPOSEMATRIXFPROC = _rpythonic_function_(		"PFNGLLOADTRANSPOSEMATRIXFPROC", ctypes.c_void_p, [
	("m",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLLOADTRANSPOSEMATRIXDPROC = _rpythonic_function_(		"PFNGLLOADTRANSPOSEMATRIXDPROC", ctypes.c_void_p, [
	("m",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLMULTTRANSPOSEMATRIXFPROC = _rpythonic_function_(		"PFNGLMULTTRANSPOSEMATRIXFPROC", ctypes.c_void_p, [
	("m",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLMULTTRANSPOSEMATRIXDPROC = _rpythonic_function_(		"PFNGLMULTTRANSPOSEMATRIXDPROC", ctypes.c_void_p, [
	("m",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLBLENDFUNCSEPARATEPROC = _rpythonic_function_(		"PFNGLBLENDFUNCSEPARATEPROC", ctypes.c_void_p, [
	("sfactorRGB",		ctypes.c_uint),
	("dfactorRGB",		ctypes.c_uint),
	("sfactorAlpha",		ctypes.c_uint),
	("dfactorAlpha",		ctypes.c_uint),] )

PFNGLMULTIDRAWARRAYSPROC = _rpythonic_function_(		"PFNGLMULTIDRAWARRAYSPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("first",		ctypes.POINTER(ctypes.c_int)),
	("count",		ctypes.POINTER(ctypes.c_int)),
	("primcount",		ctypes.c_int),] )

PFNGLMULTIDRAWELEMENTSPROC = _rpythonic_function_(		"PFNGLMULTIDRAWELEMENTSPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("count",		ctypes.POINTER(ctypes.c_int)),
	("C_type",		ctypes.c_uint),
	("indices",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("primcount",		ctypes.c_int),] )

PFNGLPOINTPARAMETERFPROC = _rpythonic_function_(		"PFNGLPOINTPARAMETERFPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_float),] )

PFNGLPOINTPARAMETERFVPROC = _rpythonic_function_(		"PFNGLPOINTPARAMETERFVPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLPOINTPARAMETERIPROC = _rpythonic_function_(		"PFNGLPOINTPARAMETERIPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_int),] )

PFNGLPOINTPARAMETERIVPROC = _rpythonic_function_(		"PFNGLPOINTPARAMETERIVPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLFOGCOORDFPROC = _rpythonic_function_(		"PFNGLFOGCOORDFPROC", ctypes.c_void_p, [
	("coord",		ctypes.c_float),] )

PFNGLFOGCOORDFVPROC = _rpythonic_function_(		"PFNGLFOGCOORDFVPROC", ctypes.c_void_p, [
	("coord",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLFOGCOORDDPROC = _rpythonic_function_(		"PFNGLFOGCOORDDPROC", ctypes.c_void_p, [
	("coord",		ctypes.c_double),] )

PFNGLFOGCOORDDVPROC = _rpythonic_function_(		"PFNGLFOGCOORDDVPROC", ctypes.c_void_p, [
	("coord",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLFOGCOORDPOINTERPROC = _rpythonic_function_(		"PFNGLFOGCOORDPOINTERPROC", ctypes.c_void_p, [
	("C_type",		ctypes.c_uint),
	("stride",		ctypes.c_int),
	("pointer",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLSECONDARYCOLOR3BPROC = _rpythonic_function_(		"PFNGLSECONDARYCOLOR3BPROC", ctypes.c_void_p, [
	("red",		ctypes.c_char),
	("green",		ctypes.c_char),
	("blue",		ctypes.c_char),] )

PFNGLSECONDARYCOLOR3BVPROC = _rpythonic_function_(		"PFNGLSECONDARYCOLOR3BVPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLSECONDARYCOLOR3DPROC = _rpythonic_function_(		"PFNGLSECONDARYCOLOR3DPROC", ctypes.c_void_p, [
	("red",		ctypes.c_double),
	("green",		ctypes.c_double),
	("blue",		ctypes.c_double),] )

PFNGLSECONDARYCOLOR3DVPROC = _rpythonic_function_(		"PFNGLSECONDARYCOLOR3DVPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLSECONDARYCOLOR3FPROC = _rpythonic_function_(		"PFNGLSECONDARYCOLOR3FPROC", ctypes.c_void_p, [
	("red",		ctypes.c_float),
	("green",		ctypes.c_float),
	("blue",		ctypes.c_float),] )

PFNGLSECONDARYCOLOR3FVPROC = _rpythonic_function_(		"PFNGLSECONDARYCOLOR3FVPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLSECONDARYCOLOR3IPROC = _rpythonic_function_(		"PFNGLSECONDARYCOLOR3IPROC", ctypes.c_void_p, [
	("red",		ctypes.c_int),
	("green",		ctypes.c_int),
	("blue",		ctypes.c_int),] )

PFNGLSECONDARYCOLOR3IVPROC = _rpythonic_function_(		"PFNGLSECONDARYCOLOR3IVPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLSECONDARYCOLOR3SPROC = _rpythonic_function_(		"PFNGLSECONDARYCOLOR3SPROC", ctypes.c_void_p, [
	("red",		ctypes.c_short),
	("green",		ctypes.c_short),
	("blue",		ctypes.c_short),] )

PFNGLSECONDARYCOLOR3SVPROC = _rpythonic_function_(		"PFNGLSECONDARYCOLOR3SVPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_short)),] )

PFNGLSECONDARYCOLOR3UBPROC = _rpythonic_function_(		"PFNGLSECONDARYCOLOR3UBPROC", ctypes.c_void_p, [
	("red",		ctypes.c_ubyte),
	("green",		ctypes.c_ubyte),
	("blue",		ctypes.c_ubyte),] )

PFNGLSECONDARYCOLOR3UBVPROC = _rpythonic_function_(		"PFNGLSECONDARYCOLOR3UBVPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_ubyte)),] )

PFNGLSECONDARYCOLOR3UIPROC = _rpythonic_function_(		"PFNGLSECONDARYCOLOR3UIPROC", ctypes.c_void_p, [
	("red",		ctypes.c_uint),
	("green",		ctypes.c_uint),
	("blue",		ctypes.c_uint),] )

PFNGLSECONDARYCOLOR3UIVPROC = _rpythonic_function_(		"PFNGLSECONDARYCOLOR3UIVPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLSECONDARYCOLOR3USPROC = _rpythonic_function_(		"PFNGLSECONDARYCOLOR3USPROC", ctypes.c_void_p, [
	("red",		ctypes.c_ushort),
	("green",		ctypes.c_ushort),
	("blue",		ctypes.c_ushort),] )

PFNGLSECONDARYCOLOR3USVPROC = _rpythonic_function_(		"PFNGLSECONDARYCOLOR3USVPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_ushort)),] )

PFNGLSECONDARYCOLORPOINTERPROC = _rpythonic_function_(		"PFNGLSECONDARYCOLORPOINTERPROC", ctypes.c_void_p, [
	("size",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("stride",		ctypes.c_int),
	("pointer",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLWINDOWPOS2DPROC = _rpythonic_function_(		"PFNGLWINDOWPOS2DPROC", ctypes.c_void_p, [
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),] )

PFNGLWINDOWPOS2DVPROC = _rpythonic_function_(		"PFNGLWINDOWPOS2DVPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLWINDOWPOS2FPROC = _rpythonic_function_(		"PFNGLWINDOWPOS2FPROC", ctypes.c_void_p, [
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),] )

PFNGLWINDOWPOS2FVPROC = _rpythonic_function_(		"PFNGLWINDOWPOS2FVPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLWINDOWPOS2IPROC = _rpythonic_function_(		"PFNGLWINDOWPOS2IPROC", ctypes.c_void_p, [
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

PFNGLWINDOWPOS2IVPROC = _rpythonic_function_(		"PFNGLWINDOWPOS2IVPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLWINDOWPOS2SPROC = _rpythonic_function_(		"PFNGLWINDOWPOS2SPROC", ctypes.c_void_p, [
	("x",		ctypes.c_short),
	("y",		ctypes.c_short),] )

PFNGLWINDOWPOS2SVPROC = _rpythonic_function_(		"PFNGLWINDOWPOS2SVPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_short)),] )

PFNGLWINDOWPOS3DPROC = _rpythonic_function_(		"PFNGLWINDOWPOS3DPROC", ctypes.c_void_p, [
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("z",		ctypes.c_double),] )

PFNGLWINDOWPOS3DVPROC = _rpythonic_function_(		"PFNGLWINDOWPOS3DVPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLWINDOWPOS3FPROC = _rpythonic_function_(		"PFNGLWINDOWPOS3FPROC", ctypes.c_void_p, [
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

PFNGLWINDOWPOS3FVPROC = _rpythonic_function_(		"PFNGLWINDOWPOS3FVPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLWINDOWPOS3IPROC = _rpythonic_function_(		"PFNGLWINDOWPOS3IPROC", ctypes.c_void_p, [
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("z",		ctypes.c_int),] )

PFNGLWINDOWPOS3IVPROC = _rpythonic_function_(		"PFNGLWINDOWPOS3IVPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLWINDOWPOS3SPROC = _rpythonic_function_(		"PFNGLWINDOWPOS3SPROC", ctypes.c_void_p, [
	("x",		ctypes.c_short),
	("y",		ctypes.c_short),
	("z",		ctypes.c_short),] )

PFNGLWINDOWPOS3SVPROC = _rpythonic_function_(		"PFNGLWINDOWPOS3SVPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_short)),] )

PFNGLGENQUERIESPROC = _rpythonic_function_(		"PFNGLGENQUERIESPROC", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("ids",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLDELETEQUERIESPROC = _rpythonic_function_(		"PFNGLDELETEQUERIESPROC", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("ids",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLISQUERYPROC = _rpythonic_function_(		"PFNGLISQUERYPROC", ctypes.c_ubyte, [
	("C_id",		ctypes.c_uint),] )

PFNGLBEGINQUERYPROC = _rpythonic_function_(		"PFNGLBEGINQUERYPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("C_id",		ctypes.c_uint),] )

PFNGLENDQUERYPROC = _rpythonic_function_(		"PFNGLENDQUERYPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),] )

PFNGLGETQUERYIVPROC = _rpythonic_function_(		"PFNGLGETQUERYIVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETQUERYOBJECTIVPROC = _rpythonic_function_(		"PFNGLGETQUERYOBJECTIVPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETQUERYOBJECTUIVPROC = _rpythonic_function_(		"PFNGLGETQUERYOBJECTUIVPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLBINDBUFFERPROC = _rpythonic_function_(		"PFNGLBINDBUFFERPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("buffer",		ctypes.c_uint),] )

PFNGLDELETEBUFFERSPROC = _rpythonic_function_(		"PFNGLDELETEBUFFERSPROC", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("buffers",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLGENBUFFERSPROC = _rpythonic_function_(		"PFNGLGENBUFFERSPROC", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("buffers",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLISBUFFERPROC = _rpythonic_function_(		"PFNGLISBUFFERPROC", ctypes.c_ubyte, [
	("buffer",		ctypes.c_uint),] )

PFNGLBUFFERDATAPROC = _rpythonic_function_(		"PFNGLBUFFERDATAPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("size",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("usage",		ctypes.c_uint),] )

PFNGLBUFFERSUBDATAPROC = _rpythonic_function_(		"PFNGLBUFFERSUBDATAPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("offset",		ctypes.c_int),
	("size",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLGETBUFFERSUBDATAPROC = _rpythonic_function_(		"PFNGLGETBUFFERSUBDATAPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("offset",		ctypes.c_int),
	("size",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLMAPBUFFERPROC = _rpythonic_function_(		"PFNGLMAPBUFFERPROC", ctypes.POINTER(ctypes.c_void_p), [
	("target",		ctypes.c_uint),
	("access",		ctypes.c_uint),] )

PFNGLUNMAPBUFFERPROC = _rpythonic_function_(		"PFNGLUNMAPBUFFERPROC", ctypes.c_ubyte, [
	("target",		ctypes.c_uint),] )

PFNGLGETBUFFERPARAMETERIVPROC = _rpythonic_function_(		"PFNGLGETBUFFERPARAMETERIVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETBUFFERPOINTERVPROC = _rpythonic_function_(		"PFNGLGETBUFFERPOINTERVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

PFNGLBLENDEQUATIONSEPARATEPROC = _rpythonic_function_(		"PFNGLBLENDEQUATIONSEPARATEPROC", ctypes.c_void_p, [
	("modeRGB",		ctypes.c_uint),
	("modeAlpha",		ctypes.c_uint),] )

PFNGLDRAWBUFFERSPROC = _rpythonic_function_(		"PFNGLDRAWBUFFERSPROC", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("bufs",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLSTENCILOPSEPARATEPROC = _rpythonic_function_(		"PFNGLSTENCILOPSEPARATEPROC", ctypes.c_void_p, [
	("face",		ctypes.c_uint),
	("sfail",		ctypes.c_uint),
	("dpfail",		ctypes.c_uint),
	("dppass",		ctypes.c_uint),] )

PFNGLSTENCILFUNCSEPARATEPROC = _rpythonic_function_(		"PFNGLSTENCILFUNCSEPARATEPROC", ctypes.c_void_p, [
	("face",		ctypes.c_uint),
	("func",		ctypes.c_uint),
	("ref",		ctypes.c_int),
	("mask",		ctypes.c_uint),] )

PFNGLSTENCILMASKSEPARATEPROC = _rpythonic_function_(		"PFNGLSTENCILMASKSEPARATEPROC", ctypes.c_void_p, [
	("face",		ctypes.c_uint),
	("mask",		ctypes.c_uint),] )

PFNGLATTACHSHADERPROC = _rpythonic_function_(		"PFNGLATTACHSHADERPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("shader",		ctypes.c_uint),] )

PFNGLBINDATTRIBLOCATIONPROC = _rpythonic_function_(		"PFNGLBINDATTRIBLOCATIONPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLCOMPILESHADERPROC = _rpythonic_function_(		"PFNGLCOMPILESHADERPROC", ctypes.c_void_p, [
	("shader",		ctypes.c_uint),] )

PFNGLCREATEPROGRAMPROC = _rpythonic_function_(		"PFNGLCREATEPROGRAMPROC", ctypes.c_uint, [] )

PFNGLCREATESHADERPROC = _rpythonic_function_(		"PFNGLCREATESHADERPROC", ctypes.c_uint, [
	("C_type",		ctypes.c_uint),] )

PFNGLDELETEPROGRAMPROC = _rpythonic_function_(		"PFNGLDELETEPROGRAMPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),] )

PFNGLDELETESHADERPROC = _rpythonic_function_(		"PFNGLDELETESHADERPROC", ctypes.c_void_p, [
	("shader",		ctypes.c_uint),] )

PFNGLDETACHSHADERPROC = _rpythonic_function_(		"PFNGLDETACHSHADERPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("shader",		ctypes.c_uint),] )

PFNGLDISABLEVERTEXATTRIBARRAYPROC = _rpythonic_function_(		"PFNGLDISABLEVERTEXATTRIBARRAYPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),] )

PFNGLENABLEVERTEXATTRIBARRAYPROC = _rpythonic_function_(		"PFNGLENABLEVERTEXATTRIBARRAYPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),] )

PFNGLGETACTIVEATTRIBPROC = _rpythonic_function_(		"PFNGLGETACTIVEATTRIBPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("bufSize",		ctypes.c_int),
	("length",		ctypes.POINTER(ctypes.c_int)),
	("size",		ctypes.POINTER(ctypes.c_int)),
	("C_type",		ctypes.POINTER(ctypes.c_uint)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLGETACTIVEUNIFORMPROC = _rpythonic_function_(		"PFNGLGETACTIVEUNIFORMPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("bufSize",		ctypes.c_int),
	("length",		ctypes.POINTER(ctypes.c_int)),
	("size",		ctypes.POINTER(ctypes.c_int)),
	("C_type",		ctypes.POINTER(ctypes.c_uint)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLGETATTACHEDSHADERSPROC = _rpythonic_function_(		"PFNGLGETATTACHEDSHADERSPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("maxCount",		ctypes.c_int),
	("count",		ctypes.POINTER(ctypes.c_int)),
	("obj",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLGETATTRIBLOCATIONPROC = _rpythonic_function_(		"PFNGLGETATTRIBLOCATIONPROC", ctypes.c_int, [
	("program",		ctypes.c_uint),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLGETPROGRAMIVPROC = _rpythonic_function_(		"PFNGLGETPROGRAMIVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETPROGRAMINFOLOGPROC = _rpythonic_function_(		"PFNGLGETPROGRAMINFOLOGPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("bufSize",		ctypes.c_int),
	("length",		ctypes.POINTER(ctypes.c_int)),
	("infoLog",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLGETSHADERIVPROC = _rpythonic_function_(		"PFNGLGETSHADERIVPROC", ctypes.c_void_p, [
	("shader",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETSHADERINFOLOGPROC = _rpythonic_function_(		"PFNGLGETSHADERINFOLOGPROC", ctypes.c_void_p, [
	("shader",		ctypes.c_uint),
	("bufSize",		ctypes.c_int),
	("length",		ctypes.POINTER(ctypes.c_int)),
	("infoLog",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLGETSHADERSOURCEPROC = _rpythonic_function_(		"PFNGLGETSHADERSOURCEPROC", ctypes.c_void_p, [
	("shader",		ctypes.c_uint),
	("bufSize",		ctypes.c_int),
	("length",		ctypes.POINTER(ctypes.c_int)),
	("source",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLGETUNIFORMLOCATIONPROC = _rpythonic_function_(		"PFNGLGETUNIFORMLOCATIONPROC", ctypes.c_int, [
	("program",		ctypes.c_uint),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLGETUNIFORMFVPROC = _rpythonic_function_(		"PFNGLGETUNIFORMFVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETUNIFORMIVPROC = _rpythonic_function_(		"PFNGLGETUNIFORMIVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETVERTEXATTRIBDVPROC = _rpythonic_function_(		"PFNGLGETVERTEXATTRIBDVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLGETVERTEXATTRIBFVPROC = _rpythonic_function_(		"PFNGLGETVERTEXATTRIBFVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETVERTEXATTRIBIVPROC = _rpythonic_function_(		"PFNGLGETVERTEXATTRIBIVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETVERTEXATTRIBPOINTERVPROC = _rpythonic_function_(		"PFNGLGETVERTEXATTRIBPOINTERVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("pointer",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

PFNGLISPROGRAMPROC = _rpythonic_function_(		"PFNGLISPROGRAMPROC", ctypes.c_ubyte, [
	("program",		ctypes.c_uint),] )

PFNGLISSHADERPROC = _rpythonic_function_(		"PFNGLISSHADERPROC", ctypes.c_ubyte, [
	("shader",		ctypes.c_uint),] )

PFNGLLINKPROGRAMPROC = _rpythonic_function_(		"PFNGLLINKPROGRAMPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),] )

PFNGLSHADERSOURCEPROC = _rpythonic_function_(		"PFNGLSHADERSOURCEPROC", ctypes.c_void_p, [
	("shader",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("string",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("length",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLUSEPROGRAMPROC = _rpythonic_function_(		"PFNGLUSEPROGRAMPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),] )

PFNGLUNIFORM1FPROC = _rpythonic_function_(		"PFNGLUNIFORM1FPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("v0",		ctypes.c_float),] )

PFNGLUNIFORM2FPROC = _rpythonic_function_(		"PFNGLUNIFORM2FPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("v0",		ctypes.c_float),
	("v1",		ctypes.c_float),] )

PFNGLUNIFORM3FPROC = _rpythonic_function_(		"PFNGLUNIFORM3FPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("v0",		ctypes.c_float),
	("v1",		ctypes.c_float),
	("v2",		ctypes.c_float),] )

PFNGLUNIFORM4FPROC = _rpythonic_function_(		"PFNGLUNIFORM4FPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("v0",		ctypes.c_float),
	("v1",		ctypes.c_float),
	("v2",		ctypes.c_float),
	("v3",		ctypes.c_float),] )

PFNGLUNIFORM1IPROC = _rpythonic_function_(		"PFNGLUNIFORM1IPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("v0",		ctypes.c_int),] )

PFNGLUNIFORM2IPROC = _rpythonic_function_(		"PFNGLUNIFORM2IPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("v0",		ctypes.c_int),
	("v1",		ctypes.c_int),] )

PFNGLUNIFORM3IPROC = _rpythonic_function_(		"PFNGLUNIFORM3IPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("v0",		ctypes.c_int),
	("v1",		ctypes.c_int),
	("v2",		ctypes.c_int),] )

PFNGLUNIFORM4IPROC = _rpythonic_function_(		"PFNGLUNIFORM4IPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("v0",		ctypes.c_int),
	("v1",		ctypes.c_int),
	("v2",		ctypes.c_int),
	("v3",		ctypes.c_int),] )

PFNGLUNIFORM1FVPROC = _rpythonic_function_(		"PFNGLUNIFORM1FVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLUNIFORM2FVPROC = _rpythonic_function_(		"PFNGLUNIFORM2FVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLUNIFORM3FVPROC = _rpythonic_function_(		"PFNGLUNIFORM3FVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLUNIFORM4FVPROC = _rpythonic_function_(		"PFNGLUNIFORM4FVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLUNIFORM1IVPROC = _rpythonic_function_(		"PFNGLUNIFORM1IVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLUNIFORM2IVPROC = _rpythonic_function_(		"PFNGLUNIFORM2IVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLUNIFORM3IVPROC = _rpythonic_function_(		"PFNGLUNIFORM3IVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLUNIFORM4IVPROC = _rpythonic_function_(		"PFNGLUNIFORM4IVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLUNIFORMMATRIX2FVPROC = _rpythonic_function_(		"PFNGLUNIFORMMATRIX2FVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLUNIFORMMATRIX3FVPROC = _rpythonic_function_(		"PFNGLUNIFORMMATRIX3FVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLUNIFORMMATRIX4FVPROC = _rpythonic_function_(		"PFNGLUNIFORMMATRIX4FVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLVALIDATEPROGRAMPROC = _rpythonic_function_(		"PFNGLVALIDATEPROGRAMPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),] )

PFNGLVERTEXATTRIB1DPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB1DPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_double),] )

PFNGLVERTEXATTRIB1DVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB1DVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLVERTEXATTRIB1FPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB1FPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_float),] )

PFNGLVERTEXATTRIB1FVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB1FVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLVERTEXATTRIB1SPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB1SPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_short),] )

PFNGLVERTEXATTRIB1SVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB1SVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_short)),] )

PFNGLVERTEXATTRIB2DPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB2DPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),] )

PFNGLVERTEXATTRIB2DVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB2DVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLVERTEXATTRIB2FPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB2FPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),] )

PFNGLVERTEXATTRIB2FVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB2FVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLVERTEXATTRIB2SPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB2SPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_short),
	("y",		ctypes.c_short),] )

PFNGLVERTEXATTRIB2SVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB2SVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_short)),] )

PFNGLVERTEXATTRIB3DPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB3DPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("z",		ctypes.c_double),] )

PFNGLVERTEXATTRIB3DVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB3DVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLVERTEXATTRIB3FPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB3FPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

PFNGLVERTEXATTRIB3FVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB3FVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLVERTEXATTRIB3SPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB3SPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_short),
	("y",		ctypes.c_short),
	("z",		ctypes.c_short),] )

PFNGLVERTEXATTRIB3SVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB3SVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_short)),] )

PFNGLVERTEXATTRIB4NBVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB4NBVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLVERTEXATTRIB4NIVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB4NIVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLVERTEXATTRIB4NSVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB4NSVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_short)),] )

PFNGLVERTEXATTRIB4NUBPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB4NUBPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_ubyte),
	("y",		ctypes.c_ubyte),
	("z",		ctypes.c_ubyte),
	("w",		ctypes.c_ubyte),] )

PFNGLVERTEXATTRIB4NUBVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB4NUBVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_ubyte)),] )

PFNGLVERTEXATTRIB4NUIVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB4NUIVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLVERTEXATTRIB4NUSVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB4NUSVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_ushort)),] )

PFNGLVERTEXATTRIB4BVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB4BVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLVERTEXATTRIB4DPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB4DPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("z",		ctypes.c_double),
	("w",		ctypes.c_double),] )

PFNGLVERTEXATTRIB4DVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB4DVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLVERTEXATTRIB4FPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB4FPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),
	("w",		ctypes.c_float),] )

PFNGLVERTEXATTRIB4FVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB4FVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLVERTEXATTRIB4IVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB4IVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLVERTEXATTRIB4SPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB4SPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_short),
	("y",		ctypes.c_short),
	("z",		ctypes.c_short),
	("w",		ctypes.c_short),] )

PFNGLVERTEXATTRIB4SVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB4SVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_short)),] )

PFNGLVERTEXATTRIB4UBVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB4UBVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_ubyte)),] )

PFNGLVERTEXATTRIB4UIVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB4UIVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLVERTEXATTRIB4USVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB4USVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_ushort)),] )

PFNGLVERTEXATTRIBPOINTERPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBPOINTERPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("size",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("normalized",		ctypes.c_ubyte),
	("stride",		ctypes.c_int),
	("pointer",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLUNIFORMMATRIX2X3FVPROC = _rpythonic_function_(		"PFNGLUNIFORMMATRIX2X3FVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLUNIFORMMATRIX3X2FVPROC = _rpythonic_function_(		"PFNGLUNIFORMMATRIX3X2FVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLUNIFORMMATRIX2X4FVPROC = _rpythonic_function_(		"PFNGLUNIFORMMATRIX2X4FVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLUNIFORMMATRIX4X2FVPROC = _rpythonic_function_(		"PFNGLUNIFORMMATRIX4X2FVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLUNIFORMMATRIX3X4FVPROC = _rpythonic_function_(		"PFNGLUNIFORMMATRIX3X4FVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLUNIFORMMATRIX4X3FVPROC = _rpythonic_function_(		"PFNGLUNIFORMMATRIX4X3FVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLCOLORMASKIPROC = _rpythonic_function_(		"PFNGLCOLORMASKIPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("r",		ctypes.c_ubyte),
	("g",		ctypes.c_ubyte),
	("b",		ctypes.c_ubyte),
	("a",		ctypes.c_ubyte),] )

PFNGLGETBOOLEANI_VPROC = _rpythonic_function_(		"PFNGLGETBOOLEANI_VPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_ubyte)),] )

PFNGLGETINTEGERI_VPROC = _rpythonic_function_(		"PFNGLGETINTEGERI_VPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLENABLEIPROC = _rpythonic_function_(		"PFNGLENABLEIPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),] )

PFNGLDISABLEIPROC = _rpythonic_function_(		"PFNGLDISABLEIPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),] )

PFNGLISENABLEDIPROC = _rpythonic_function_(		"PFNGLISENABLEDIPROC", ctypes.c_ubyte, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),] )

PFNGLBEGINTRANSFORMFEEDBACKPROC = _rpythonic_function_(		"PFNGLBEGINTRANSFORMFEEDBACKPROC", ctypes.c_void_p, [
	("primitiveMode",		ctypes.c_uint),] )

PFNGLENDTRANSFORMFEEDBACKPROC = _rpythonic_function_(		"PFNGLENDTRANSFORMFEEDBACKPROC", ctypes.c_void_p, [] )

PFNGLBINDBUFFERRANGEPROC = _rpythonic_function_(		"PFNGLBINDBUFFERRANGEPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("buffer",		ctypes.c_uint),
	("offset",		ctypes.c_int),
	("size",		ctypes.c_int),] )

PFNGLBINDBUFFERBASEPROC = _rpythonic_function_(		"PFNGLBINDBUFFERBASEPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("buffer",		ctypes.c_uint),] )

PFNGLTRANSFORMFEEDBACKVARYINGSPROC = _rpythonic_function_(		"PFNGLTRANSFORMFEEDBACKVARYINGSPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("varyings",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("bufferMode",		ctypes.c_uint),] )

PFNGLGETTRANSFORMFEEDBACKVARYINGPROC = _rpythonic_function_(		"PFNGLGETTRANSFORMFEEDBACKVARYINGPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("bufSize",		ctypes.c_int),
	("length",		ctypes.POINTER(ctypes.c_int)),
	("size",		ctypes.POINTER(ctypes.c_int)),
	("C_type",		ctypes.POINTER(ctypes.c_uint)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLCLAMPCOLORPROC = _rpythonic_function_(		"PFNGLCLAMPCOLORPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("clamp",		ctypes.c_uint),] )

PFNGLBEGINCONDITIONALRENDERPROC = _rpythonic_function_(		"PFNGLBEGINCONDITIONALRENDERPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),
	("mode",		ctypes.c_uint),] )

PFNGLENDCONDITIONALRENDERPROC = _rpythonic_function_(		"PFNGLENDCONDITIONALRENDERPROC", ctypes.c_void_p, [] )

PFNGLVERTEXATTRIBIPOINTERPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBIPOINTERPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("size",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("stride",		ctypes.c_int),
	("pointer",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLGETVERTEXATTRIBIIVPROC = _rpythonic_function_(		"PFNGLGETVERTEXATTRIBIIVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETVERTEXATTRIBIUIVPROC = _rpythonic_function_(		"PFNGLGETVERTEXATTRIBIUIVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLVERTEXATTRIBI1IPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBI1IPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_int),] )

PFNGLVERTEXATTRIBI2IPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBI2IPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

PFNGLVERTEXATTRIBI3IPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBI3IPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("z",		ctypes.c_int),] )

PFNGLVERTEXATTRIBI4IPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBI4IPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("z",		ctypes.c_int),
	("w",		ctypes.c_int),] )

PFNGLVERTEXATTRIBI1UIPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBI1UIPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_uint),] )

PFNGLVERTEXATTRIBI2UIPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBI2UIPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_uint),
	("y",		ctypes.c_uint),] )

PFNGLVERTEXATTRIBI3UIPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBI3UIPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_uint),
	("y",		ctypes.c_uint),
	("z",		ctypes.c_uint),] )

PFNGLVERTEXATTRIBI4UIPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBI4UIPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_uint),
	("y",		ctypes.c_uint),
	("z",		ctypes.c_uint),
	("w",		ctypes.c_uint),] )

PFNGLVERTEXATTRIBI1IVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBI1IVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLVERTEXATTRIBI2IVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBI2IVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLVERTEXATTRIBI3IVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBI3IVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLVERTEXATTRIBI4IVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBI4IVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLVERTEXATTRIBI1UIVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBI1UIVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLVERTEXATTRIBI2UIVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBI2UIVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLVERTEXATTRIBI3UIVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBI3UIVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLVERTEXATTRIBI4UIVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBI4UIVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLVERTEXATTRIBI4BVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBI4BVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLVERTEXATTRIBI4SVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBI4SVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_short)),] )

PFNGLVERTEXATTRIBI4UBVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBI4UBVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_ubyte)),] )

PFNGLVERTEXATTRIBI4USVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBI4USVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_ushort)),] )

PFNGLGETUNIFORMUIVPROC = _rpythonic_function_(		"PFNGLGETUNIFORMUIVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("params",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLBINDFRAGDATALOCATIONPROC = _rpythonic_function_(		"PFNGLBINDFRAGDATALOCATIONPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("color",		ctypes.c_uint),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLGETFRAGDATALOCATIONPROC = _rpythonic_function_(		"PFNGLGETFRAGDATALOCATIONPROC", ctypes.c_int, [
	("program",		ctypes.c_uint),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLUNIFORM1UIPROC = _rpythonic_function_(		"PFNGLUNIFORM1UIPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("v0",		ctypes.c_uint),] )

PFNGLUNIFORM2UIPROC = _rpythonic_function_(		"PFNGLUNIFORM2UIPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("v0",		ctypes.c_uint),
	("v1",		ctypes.c_uint),] )

PFNGLUNIFORM3UIPROC = _rpythonic_function_(		"PFNGLUNIFORM3UIPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("v0",		ctypes.c_uint),
	("v1",		ctypes.c_uint),
	("v2",		ctypes.c_uint),] )

PFNGLUNIFORM4UIPROC = _rpythonic_function_(		"PFNGLUNIFORM4UIPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("v0",		ctypes.c_uint),
	("v1",		ctypes.c_uint),
	("v2",		ctypes.c_uint),
	("v3",		ctypes.c_uint),] )

PFNGLUNIFORM1UIVPROC = _rpythonic_function_(		"PFNGLUNIFORM1UIVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLUNIFORM2UIVPROC = _rpythonic_function_(		"PFNGLUNIFORM2UIVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLUNIFORM3UIVPROC = _rpythonic_function_(		"PFNGLUNIFORM3UIVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLUNIFORM4UIVPROC = _rpythonic_function_(		"PFNGLUNIFORM4UIVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLTEXPARAMETERIIVPROC = _rpythonic_function_(		"PFNGLTEXPARAMETERIIVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLTEXPARAMETERIUIVPROC = _rpythonic_function_(		"PFNGLTEXPARAMETERIUIVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLGETTEXPARAMETERIIVPROC = _rpythonic_function_(		"PFNGLGETTEXPARAMETERIIVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETTEXPARAMETERIUIVPROC = _rpythonic_function_(		"PFNGLGETTEXPARAMETERIUIVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLCLEARBUFFERIVPROC = _rpythonic_function_(		"PFNGLCLEARBUFFERIVPROC", ctypes.c_void_p, [
	("buffer",		ctypes.c_uint),
	("drawbuffer",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLCLEARBUFFERUIVPROC = _rpythonic_function_(		"PFNGLCLEARBUFFERUIVPROC", ctypes.c_void_p, [
	("buffer",		ctypes.c_uint),
	("drawbuffer",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLCLEARBUFFERFVPROC = _rpythonic_function_(		"PFNGLCLEARBUFFERFVPROC", ctypes.c_void_p, [
	("buffer",		ctypes.c_uint),
	("drawbuffer",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLCLEARBUFFERFIPROC = _rpythonic_function_(		"PFNGLCLEARBUFFERFIPROC", ctypes.c_void_p, [
	("buffer",		ctypes.c_uint),
	("drawbuffer",		ctypes.c_int),
	("depth",		ctypes.c_float),
	("stencil",		ctypes.c_int),] )

PFNGLGETSTRINGIPROC = _rpythonic_function_(		"PFNGLGETSTRINGIPROC", ctypes.POINTER(ctypes.c_ubyte), [
	("name",		ctypes.c_uint),
	("index",		ctypes.c_uint),] )

PFNGLDRAWARRAYSINSTANCEDPROC = _rpythonic_function_(		"PFNGLDRAWARRAYSINSTANCEDPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("first",		ctypes.c_int),
	("count",		ctypes.c_int),
	("primcount",		ctypes.c_int),] )

PFNGLDRAWELEMENTSINSTANCEDPROC = _rpythonic_function_(		"PFNGLDRAWELEMENTSINSTANCEDPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("indices",		ctypes.POINTER(ctypes.c_void_p)),
	("primcount",		ctypes.c_int),] )

PFNGLTEXBUFFERPROC = _rpythonic_function_(		"PFNGLTEXBUFFERPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("internalformat",		ctypes.c_uint),
	("buffer",		ctypes.c_uint),] )

PFNGLPRIMITIVERESTARTINDEXPROC = _rpythonic_function_(		"PFNGLPRIMITIVERESTARTINDEXPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),] )

PFNGLGETINTEGER64I_VPROC = _rpythonic_function_(		"PFNGLGETINTEGER64I_VPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_int64)),] )

PFNGLGETBUFFERPARAMETERI64VPROC = _rpythonic_function_(		"PFNGLGETBUFFERPARAMETERI64VPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int64)),] )

PFNGLFRAMEBUFFERTEXTUREPROC = _rpythonic_function_(		"PFNGLFRAMEBUFFERTEXTUREPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("attachment",		ctypes.c_uint),
	("texture",		ctypes.c_uint),
	("level",		ctypes.c_int),] )

PFNGLVERTEXATTRIBDIVISORPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBDIVISORPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("divisor",		ctypes.c_uint),] )

PFNGLMINSAMPLESHADINGPROC = _rpythonic_function_(		"PFNGLMINSAMPLESHADINGPROC", ctypes.c_void_p, [
	("value",		ctypes.c_float),] )

PFNGLBLENDEQUATIONIPROC = _rpythonic_function_(		"PFNGLBLENDEQUATIONIPROC", ctypes.c_void_p, [
	("buf",		ctypes.c_uint),
	("mode",		ctypes.c_uint),] )

PFNGLBLENDEQUATIONSEPARATEIPROC = _rpythonic_function_(		"PFNGLBLENDEQUATIONSEPARATEIPROC", ctypes.c_void_p, [
	("buf",		ctypes.c_uint),
	("modeRGB",		ctypes.c_uint),
	("modeAlpha",		ctypes.c_uint),] )

PFNGLBLENDFUNCIPROC = _rpythonic_function_(		"PFNGLBLENDFUNCIPROC", ctypes.c_void_p, [
	("buf",		ctypes.c_uint),
	("src",		ctypes.c_uint),
	("dst",		ctypes.c_uint),] )

PFNGLBLENDFUNCSEPARATEIPROC = _rpythonic_function_(		"PFNGLBLENDFUNCSEPARATEIPROC", ctypes.c_void_p, [
	("buf",		ctypes.c_uint),
	("srcRGB",		ctypes.c_uint),
	("dstRGB",		ctypes.c_uint),
	("srcAlpha",		ctypes.c_uint),
	("dstAlpha",		ctypes.c_uint),] )

PFNGLLOADTRANSPOSEMATRIXFARBPROC = _rpythonic_function_(		"PFNGLLOADTRANSPOSEMATRIXFARBPROC", ctypes.c_void_p, [
	("m",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLLOADTRANSPOSEMATRIXDARBPROC = _rpythonic_function_(		"PFNGLLOADTRANSPOSEMATRIXDARBPROC", ctypes.c_void_p, [
	("m",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLMULTTRANSPOSEMATRIXFARBPROC = _rpythonic_function_(		"PFNGLMULTTRANSPOSEMATRIXFARBPROC", ctypes.c_void_p, [
	("m",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLMULTTRANSPOSEMATRIXDARBPROC = _rpythonic_function_(		"PFNGLMULTTRANSPOSEMATRIXDARBPROC", ctypes.c_void_p, [
	("m",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLSAMPLECOVERAGEARBPROC = _rpythonic_function_(		"PFNGLSAMPLECOVERAGEARBPROC", ctypes.c_void_p, [
	("value",		ctypes.c_float),
	("invert",		ctypes.c_ubyte),] )

PFNGLCOMPRESSEDTEXIMAGE3DARBPROC = _rpythonic_function_(		"PFNGLCOMPRESSEDTEXIMAGE3DARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("internalformat",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("depth",		ctypes.c_int),
	("border",		ctypes.c_int),
	("imageSize",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLCOMPRESSEDTEXIMAGE2DARBPROC = _rpythonic_function_(		"PFNGLCOMPRESSEDTEXIMAGE2DARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("internalformat",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("border",		ctypes.c_int),
	("imageSize",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLCOMPRESSEDTEXIMAGE1DARBPROC = _rpythonic_function_(		"PFNGLCOMPRESSEDTEXIMAGE1DARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("internalformat",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("border",		ctypes.c_int),
	("imageSize",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC = _rpythonic_function_(		"PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("xoffset",		ctypes.c_int),
	("yoffset",		ctypes.c_int),
	("zoffset",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("depth",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("imageSize",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC = _rpythonic_function_(		"PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("xoffset",		ctypes.c_int),
	("yoffset",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("imageSize",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC = _rpythonic_function_(		"PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("xoffset",		ctypes.c_int),
	("width",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("imageSize",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLGETCOMPRESSEDTEXIMAGEARBPROC = _rpythonic_function_(		"PFNGLGETCOMPRESSEDTEXIMAGEARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("img",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLPOINTPARAMETERFARBPROC = _rpythonic_function_(		"PFNGLPOINTPARAMETERFARBPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_float),] )

PFNGLPOINTPARAMETERFVARBPROC = _rpythonic_function_(		"PFNGLPOINTPARAMETERFVARBPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLWEIGHTBVARBPROC = _rpythonic_function_(		"PFNGLWEIGHTBVARBPROC", ctypes.c_void_p, [
	("size",		ctypes.c_int),
	("weights",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLWEIGHTSVARBPROC = _rpythonic_function_(		"PFNGLWEIGHTSVARBPROC", ctypes.c_void_p, [
	("size",		ctypes.c_int),
	("weights",		ctypes.POINTER(ctypes.c_short)),] )

PFNGLWEIGHTIVARBPROC = _rpythonic_function_(		"PFNGLWEIGHTIVARBPROC", ctypes.c_void_p, [
	("size",		ctypes.c_int),
	("weights",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLWEIGHTFVARBPROC = _rpythonic_function_(		"PFNGLWEIGHTFVARBPROC", ctypes.c_void_p, [
	("size",		ctypes.c_int),
	("weights",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLWEIGHTDVARBPROC = _rpythonic_function_(		"PFNGLWEIGHTDVARBPROC", ctypes.c_void_p, [
	("size",		ctypes.c_int),
	("weights",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLWEIGHTUBVARBPROC = _rpythonic_function_(		"PFNGLWEIGHTUBVARBPROC", ctypes.c_void_p, [
	("size",		ctypes.c_int),
	("weights",		ctypes.POINTER(ctypes.c_ubyte)),] )

PFNGLWEIGHTUSVARBPROC = _rpythonic_function_(		"PFNGLWEIGHTUSVARBPROC", ctypes.c_void_p, [
	("size",		ctypes.c_int),
	("weights",		ctypes.POINTER(ctypes.c_ushort)),] )

PFNGLWEIGHTUIVARBPROC = _rpythonic_function_(		"PFNGLWEIGHTUIVARBPROC", ctypes.c_void_p, [
	("size",		ctypes.c_int),
	("weights",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLWEIGHTPOINTERARBPROC = _rpythonic_function_(		"PFNGLWEIGHTPOINTERARBPROC", ctypes.c_void_p, [
	("size",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("stride",		ctypes.c_int),
	("pointer",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLVERTEXBLENDARBPROC = _rpythonic_function_(		"PFNGLVERTEXBLENDARBPROC", ctypes.c_void_p, [
	("count",		ctypes.c_int),] )

PFNGLCURRENTPALETTEMATRIXARBPROC = _rpythonic_function_(		"PFNGLCURRENTPALETTEMATRIXARBPROC", ctypes.c_void_p, [
	("index",		ctypes.c_int),] )

PFNGLMATRIXINDEXUBVARBPROC = _rpythonic_function_(		"PFNGLMATRIXINDEXUBVARBPROC", ctypes.c_void_p, [
	("size",		ctypes.c_int),
	("indices",		ctypes.POINTER(ctypes.c_ubyte)),] )

PFNGLMATRIXINDEXUSVARBPROC = _rpythonic_function_(		"PFNGLMATRIXINDEXUSVARBPROC", ctypes.c_void_p, [
	("size",		ctypes.c_int),
	("indices",		ctypes.POINTER(ctypes.c_ushort)),] )

PFNGLMATRIXINDEXUIVARBPROC = _rpythonic_function_(		"PFNGLMATRIXINDEXUIVARBPROC", ctypes.c_void_p, [
	("size",		ctypes.c_int),
	("indices",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLMATRIXINDEXPOINTERARBPROC = _rpythonic_function_(		"PFNGLMATRIXINDEXPOINTERARBPROC", ctypes.c_void_p, [
	("size",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("stride",		ctypes.c_int),
	("pointer",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLWINDOWPOS2DARBPROC = _rpythonic_function_(		"PFNGLWINDOWPOS2DARBPROC", ctypes.c_void_p, [
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),] )

PFNGLWINDOWPOS2DVARBPROC = _rpythonic_function_(		"PFNGLWINDOWPOS2DVARBPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLWINDOWPOS2FARBPROC = _rpythonic_function_(		"PFNGLWINDOWPOS2FARBPROC", ctypes.c_void_p, [
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),] )

PFNGLWINDOWPOS2FVARBPROC = _rpythonic_function_(		"PFNGLWINDOWPOS2FVARBPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLWINDOWPOS2IARBPROC = _rpythonic_function_(		"PFNGLWINDOWPOS2IARBPROC", ctypes.c_void_p, [
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

PFNGLWINDOWPOS2IVARBPROC = _rpythonic_function_(		"PFNGLWINDOWPOS2IVARBPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLWINDOWPOS2SARBPROC = _rpythonic_function_(		"PFNGLWINDOWPOS2SARBPROC", ctypes.c_void_p, [
	("x",		ctypes.c_short),
	("y",		ctypes.c_short),] )

PFNGLWINDOWPOS2SVARBPROC = _rpythonic_function_(		"PFNGLWINDOWPOS2SVARBPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_short)),] )

PFNGLWINDOWPOS3DARBPROC = _rpythonic_function_(		"PFNGLWINDOWPOS3DARBPROC", ctypes.c_void_p, [
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("z",		ctypes.c_double),] )

PFNGLWINDOWPOS3DVARBPROC = _rpythonic_function_(		"PFNGLWINDOWPOS3DVARBPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLWINDOWPOS3FARBPROC = _rpythonic_function_(		"PFNGLWINDOWPOS3FARBPROC", ctypes.c_void_p, [
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

PFNGLWINDOWPOS3FVARBPROC = _rpythonic_function_(		"PFNGLWINDOWPOS3FVARBPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLWINDOWPOS3IARBPROC = _rpythonic_function_(		"PFNGLWINDOWPOS3IARBPROC", ctypes.c_void_p, [
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("z",		ctypes.c_int),] )

PFNGLWINDOWPOS3IVARBPROC = _rpythonic_function_(		"PFNGLWINDOWPOS3IVARBPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLWINDOWPOS3SARBPROC = _rpythonic_function_(		"PFNGLWINDOWPOS3SARBPROC", ctypes.c_void_p, [
	("x",		ctypes.c_short),
	("y",		ctypes.c_short),
	("z",		ctypes.c_short),] )

PFNGLWINDOWPOS3SVARBPROC = _rpythonic_function_(		"PFNGLWINDOWPOS3SVARBPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_short)),] )

PFNGLVERTEXATTRIB1DARBPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB1DARBPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_double),] )

PFNGLVERTEXATTRIB1DVARBPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB1DVARBPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLVERTEXATTRIB1FARBPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB1FARBPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_float),] )

PFNGLVERTEXATTRIB1FVARBPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB1FVARBPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLVERTEXATTRIB1SARBPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB1SARBPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_short),] )

PFNGLVERTEXATTRIB1SVARBPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB1SVARBPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_short)),] )

PFNGLVERTEXATTRIB2DARBPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB2DARBPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),] )

PFNGLVERTEXATTRIB2DVARBPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB2DVARBPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLVERTEXATTRIB2FARBPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB2FARBPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),] )

PFNGLVERTEXATTRIB2FVARBPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB2FVARBPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLVERTEXATTRIB2SARBPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB2SARBPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_short),
	("y",		ctypes.c_short),] )

PFNGLVERTEXATTRIB2SVARBPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB2SVARBPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_short)),] )

PFNGLVERTEXATTRIB3DARBPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB3DARBPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("z",		ctypes.c_double),] )

PFNGLVERTEXATTRIB3DVARBPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB3DVARBPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLVERTEXATTRIB3FARBPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB3FARBPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

PFNGLVERTEXATTRIB3FVARBPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB3FVARBPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLVERTEXATTRIB3SARBPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB3SARBPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_short),
	("y",		ctypes.c_short),
	("z",		ctypes.c_short),] )

PFNGLVERTEXATTRIB3SVARBPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB3SVARBPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_short)),] )

PFNGLVERTEXATTRIB4NBVARBPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB4NBVARBPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLVERTEXATTRIB4NIVARBPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB4NIVARBPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLVERTEXATTRIB4NSVARBPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB4NSVARBPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_short)),] )

PFNGLVERTEXATTRIB4NUBARBPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB4NUBARBPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_ubyte),
	("y",		ctypes.c_ubyte),
	("z",		ctypes.c_ubyte),
	("w",		ctypes.c_ubyte),] )

PFNGLVERTEXATTRIB4NUBVARBPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB4NUBVARBPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_ubyte)),] )

PFNGLVERTEXATTRIB4NUIVARBPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB4NUIVARBPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLVERTEXATTRIB4NUSVARBPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB4NUSVARBPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_ushort)),] )

PFNGLVERTEXATTRIB4BVARBPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB4BVARBPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLVERTEXATTRIB4DARBPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB4DARBPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("z",		ctypes.c_double),
	("w",		ctypes.c_double),] )

PFNGLVERTEXATTRIB4DVARBPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB4DVARBPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLVERTEXATTRIB4FARBPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB4FARBPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),
	("w",		ctypes.c_float),] )

PFNGLVERTEXATTRIB4FVARBPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB4FVARBPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLVERTEXATTRIB4IVARBPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB4IVARBPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLVERTEXATTRIB4SARBPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB4SARBPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_short),
	("y",		ctypes.c_short),
	("z",		ctypes.c_short),
	("w",		ctypes.c_short),] )

PFNGLVERTEXATTRIB4SVARBPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB4SVARBPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_short)),] )

PFNGLVERTEXATTRIB4UBVARBPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB4UBVARBPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_ubyte)),] )

PFNGLVERTEXATTRIB4UIVARBPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB4UIVARBPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLVERTEXATTRIB4USVARBPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB4USVARBPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_ushort)),] )

PFNGLVERTEXATTRIBPOINTERARBPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBPOINTERARBPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("size",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("normalized",		ctypes.c_ubyte),
	("stride",		ctypes.c_int),
	("pointer",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLENABLEVERTEXATTRIBARRAYARBPROC = _rpythonic_function_(		"PFNGLENABLEVERTEXATTRIBARRAYARBPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),] )

PFNGLDISABLEVERTEXATTRIBARRAYARBPROC = _rpythonic_function_(		"PFNGLDISABLEVERTEXATTRIBARRAYARBPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),] )

PFNGLPROGRAMSTRINGARBPROC = _rpythonic_function_(		"PFNGLPROGRAMSTRINGARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("format",		ctypes.c_uint),
	("C_len",		ctypes.c_int),
	("string",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLBINDPROGRAMARBPROC = _rpythonic_function_(		"PFNGLBINDPROGRAMARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("program",		ctypes.c_uint),] )

PFNGLDELETEPROGRAMSARBPROC = _rpythonic_function_(		"PFNGLDELETEPROGRAMSARBPROC", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("programs",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLGENPROGRAMSARBPROC = _rpythonic_function_(		"PFNGLGENPROGRAMSARBPROC", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("programs",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLPROGRAMENVPARAMETER4DARBPROC = _rpythonic_function_(		"PFNGLPROGRAMENVPARAMETER4DARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("z",		ctypes.c_double),
	("w",		ctypes.c_double),] )

PFNGLPROGRAMENVPARAMETER4DVARBPROC = _rpythonic_function_(		"PFNGLPROGRAMENVPARAMETER4DVARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLPROGRAMENVPARAMETER4FARBPROC = _rpythonic_function_(		"PFNGLPROGRAMENVPARAMETER4FARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),
	("w",		ctypes.c_float),] )

PFNGLPROGRAMENVPARAMETER4FVARBPROC = _rpythonic_function_(		"PFNGLPROGRAMENVPARAMETER4FVARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLPROGRAMLOCALPARAMETER4DARBPROC = _rpythonic_function_(		"PFNGLPROGRAMLOCALPARAMETER4DARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("z",		ctypes.c_double),
	("w",		ctypes.c_double),] )

PFNGLPROGRAMLOCALPARAMETER4DVARBPROC = _rpythonic_function_(		"PFNGLPROGRAMLOCALPARAMETER4DVARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLPROGRAMLOCALPARAMETER4FARBPROC = _rpythonic_function_(		"PFNGLPROGRAMLOCALPARAMETER4FARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),
	("w",		ctypes.c_float),] )

PFNGLPROGRAMLOCALPARAMETER4FVARBPROC = _rpythonic_function_(		"PFNGLPROGRAMLOCALPARAMETER4FVARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETPROGRAMENVPARAMETERDVARBPROC = _rpythonic_function_(		"PFNGLGETPROGRAMENVPARAMETERDVARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLGETPROGRAMENVPARAMETERFVARBPROC = _rpythonic_function_(		"PFNGLGETPROGRAMENVPARAMETERFVARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC = _rpythonic_function_(		"PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC = _rpythonic_function_(		"PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETPROGRAMIVARBPROC = _rpythonic_function_(		"PFNGLGETPROGRAMIVARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETPROGRAMSTRINGARBPROC = _rpythonic_function_(		"PFNGLGETPROGRAMSTRINGARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("string",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLGETVERTEXATTRIBDVARBPROC = _rpythonic_function_(		"PFNGLGETVERTEXATTRIBDVARBPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLGETVERTEXATTRIBFVARBPROC = _rpythonic_function_(		"PFNGLGETVERTEXATTRIBFVARBPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETVERTEXATTRIBIVARBPROC = _rpythonic_function_(		"PFNGLGETVERTEXATTRIBIVARBPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETVERTEXATTRIBPOINTERVARBPROC = _rpythonic_function_(		"PFNGLGETVERTEXATTRIBPOINTERVARBPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("pointer",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

PFNGLISPROGRAMARBPROC = _rpythonic_function_(		"PFNGLISPROGRAMARBPROC", ctypes.c_ubyte, [
	("program",		ctypes.c_uint),] )

PFNGLBINDBUFFERARBPROC = _rpythonic_function_(		"PFNGLBINDBUFFERARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("buffer",		ctypes.c_uint),] )

PFNGLDELETEBUFFERSARBPROC = _rpythonic_function_(		"PFNGLDELETEBUFFERSARBPROC", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("buffers",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLGENBUFFERSARBPROC = _rpythonic_function_(		"PFNGLGENBUFFERSARBPROC", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("buffers",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLISBUFFERARBPROC = _rpythonic_function_(		"PFNGLISBUFFERARBPROC", ctypes.c_ubyte, [
	("buffer",		ctypes.c_uint),] )

PFNGLBUFFERDATAARBPROC = _rpythonic_function_(		"PFNGLBUFFERDATAARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("size",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("usage",		ctypes.c_uint),] )

PFNGLBUFFERSUBDATAARBPROC = _rpythonic_function_(		"PFNGLBUFFERSUBDATAARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("offset",		ctypes.c_int),
	("size",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLGETBUFFERSUBDATAARBPROC = _rpythonic_function_(		"PFNGLGETBUFFERSUBDATAARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("offset",		ctypes.c_int),
	("size",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLMAPBUFFERARBPROC = _rpythonic_function_(		"PFNGLMAPBUFFERARBPROC", ctypes.POINTER(ctypes.c_void_p), [
	("target",		ctypes.c_uint),
	("access",		ctypes.c_uint),] )

PFNGLUNMAPBUFFERARBPROC = _rpythonic_function_(		"PFNGLUNMAPBUFFERARBPROC", ctypes.c_ubyte, [
	("target",		ctypes.c_uint),] )

PFNGLGETBUFFERPARAMETERIVARBPROC = _rpythonic_function_(		"PFNGLGETBUFFERPARAMETERIVARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETBUFFERPOINTERVARBPROC = _rpythonic_function_(		"PFNGLGETBUFFERPOINTERVARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

PFNGLGENQUERIESARBPROC = _rpythonic_function_(		"PFNGLGENQUERIESARBPROC", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("ids",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLDELETEQUERIESARBPROC = _rpythonic_function_(		"PFNGLDELETEQUERIESARBPROC", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("ids",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLISQUERYARBPROC = _rpythonic_function_(		"PFNGLISQUERYARBPROC", ctypes.c_ubyte, [
	("C_id",		ctypes.c_uint),] )

PFNGLBEGINQUERYARBPROC = _rpythonic_function_(		"PFNGLBEGINQUERYARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("C_id",		ctypes.c_uint),] )

PFNGLENDQUERYARBPROC = _rpythonic_function_(		"PFNGLENDQUERYARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),] )

PFNGLGETQUERYIVARBPROC = _rpythonic_function_(		"PFNGLGETQUERYIVARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETQUERYOBJECTIVARBPROC = _rpythonic_function_(		"PFNGLGETQUERYOBJECTIVARBPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETQUERYOBJECTUIVARBPROC = _rpythonic_function_(		"PFNGLGETQUERYOBJECTUIVARBPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLDELETEOBJECTARBPROC = _rpythonic_function_(		"PFNGLDELETEOBJECTARBPROC", ctypes.c_void_p, [
	("obj",		ctypes.c_uint),] )

PFNGLGETHANDLEARBPROC = _rpythonic_function_(		"PFNGLGETHANDLEARBPROC", ctypes.c_uint, [
	("pname",		ctypes.c_uint),] )

PFNGLDETACHOBJECTARBPROC = _rpythonic_function_(		"PFNGLDETACHOBJECTARBPROC", ctypes.c_void_p, [
	("containerObj",		ctypes.c_uint),
	("attachedObj",		ctypes.c_uint),] )

PFNGLCREATESHADEROBJECTARBPROC = _rpythonic_function_(		"PFNGLCREATESHADEROBJECTARBPROC", ctypes.c_uint, [
	("shaderType",		ctypes.c_uint),] )

PFNGLSHADERSOURCEARBPROC = _rpythonic_function_(		"PFNGLSHADERSOURCEARBPROC", ctypes.c_void_p, [
	("shaderObj",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("string",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("length",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLCOMPILESHADERARBPROC = _rpythonic_function_(		"PFNGLCOMPILESHADERARBPROC", ctypes.c_void_p, [
	("shaderObj",		ctypes.c_uint),] )

PFNGLCREATEPROGRAMOBJECTARBPROC = _rpythonic_function_(		"PFNGLCREATEPROGRAMOBJECTARBPROC", ctypes.c_uint, [] )

PFNGLATTACHOBJECTARBPROC = _rpythonic_function_(		"PFNGLATTACHOBJECTARBPROC", ctypes.c_void_p, [
	("containerObj",		ctypes.c_uint),
	("obj",		ctypes.c_uint),] )

PFNGLLINKPROGRAMARBPROC = _rpythonic_function_(		"PFNGLLINKPROGRAMARBPROC", ctypes.c_void_p, [
	("programObj",		ctypes.c_uint),] )

PFNGLUSEPROGRAMOBJECTARBPROC = _rpythonic_function_(		"PFNGLUSEPROGRAMOBJECTARBPROC", ctypes.c_void_p, [
	("programObj",		ctypes.c_uint),] )

PFNGLVALIDATEPROGRAMARBPROC = _rpythonic_function_(		"PFNGLVALIDATEPROGRAMARBPROC", ctypes.c_void_p, [
	("programObj",		ctypes.c_uint),] )

PFNGLUNIFORM1FARBPROC = _rpythonic_function_(		"PFNGLUNIFORM1FARBPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("v0",		ctypes.c_float),] )

PFNGLUNIFORM2FARBPROC = _rpythonic_function_(		"PFNGLUNIFORM2FARBPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("v0",		ctypes.c_float),
	("v1",		ctypes.c_float),] )

PFNGLUNIFORM3FARBPROC = _rpythonic_function_(		"PFNGLUNIFORM3FARBPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("v0",		ctypes.c_float),
	("v1",		ctypes.c_float),
	("v2",		ctypes.c_float),] )

PFNGLUNIFORM4FARBPROC = _rpythonic_function_(		"PFNGLUNIFORM4FARBPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("v0",		ctypes.c_float),
	("v1",		ctypes.c_float),
	("v2",		ctypes.c_float),
	("v3",		ctypes.c_float),] )

PFNGLUNIFORM1IARBPROC = _rpythonic_function_(		"PFNGLUNIFORM1IARBPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("v0",		ctypes.c_int),] )

PFNGLUNIFORM2IARBPROC = _rpythonic_function_(		"PFNGLUNIFORM2IARBPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("v0",		ctypes.c_int),
	("v1",		ctypes.c_int),] )

PFNGLUNIFORM3IARBPROC = _rpythonic_function_(		"PFNGLUNIFORM3IARBPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("v0",		ctypes.c_int),
	("v1",		ctypes.c_int),
	("v2",		ctypes.c_int),] )

PFNGLUNIFORM4IARBPROC = _rpythonic_function_(		"PFNGLUNIFORM4IARBPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("v0",		ctypes.c_int),
	("v1",		ctypes.c_int),
	("v2",		ctypes.c_int),
	("v3",		ctypes.c_int),] )

PFNGLUNIFORM1FVARBPROC = _rpythonic_function_(		"PFNGLUNIFORM1FVARBPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLUNIFORM2FVARBPROC = _rpythonic_function_(		"PFNGLUNIFORM2FVARBPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLUNIFORM3FVARBPROC = _rpythonic_function_(		"PFNGLUNIFORM3FVARBPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLUNIFORM4FVARBPROC = _rpythonic_function_(		"PFNGLUNIFORM4FVARBPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLUNIFORM1IVARBPROC = _rpythonic_function_(		"PFNGLUNIFORM1IVARBPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLUNIFORM2IVARBPROC = _rpythonic_function_(		"PFNGLUNIFORM2IVARBPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLUNIFORM3IVARBPROC = _rpythonic_function_(		"PFNGLUNIFORM3IVARBPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLUNIFORM4IVARBPROC = _rpythonic_function_(		"PFNGLUNIFORM4IVARBPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLUNIFORMMATRIX2FVARBPROC = _rpythonic_function_(		"PFNGLUNIFORMMATRIX2FVARBPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLUNIFORMMATRIX3FVARBPROC = _rpythonic_function_(		"PFNGLUNIFORMMATRIX3FVARBPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLUNIFORMMATRIX4FVARBPROC = _rpythonic_function_(		"PFNGLUNIFORMMATRIX4FVARBPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETOBJECTPARAMETERFVARBPROC = _rpythonic_function_(		"PFNGLGETOBJECTPARAMETERFVARBPROC", ctypes.c_void_p, [
	("obj",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETOBJECTPARAMETERIVARBPROC = _rpythonic_function_(		"PFNGLGETOBJECTPARAMETERIVARBPROC", ctypes.c_void_p, [
	("obj",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETINFOLOGARBPROC = _rpythonic_function_(		"PFNGLGETINFOLOGARBPROC", ctypes.c_void_p, [
	("obj",		ctypes.c_uint),
	("maxLength",		ctypes.c_int),
	("length",		ctypes.POINTER(ctypes.c_int)),
	("infoLog",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLGETATTACHEDOBJECTSARBPROC = _rpythonic_function_(		"PFNGLGETATTACHEDOBJECTSARBPROC", ctypes.c_void_p, [
	("containerObj",		ctypes.c_uint),
	("maxCount",		ctypes.c_int),
	("count",		ctypes.POINTER(ctypes.c_int)),
	("obj",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLGETUNIFORMLOCATIONARBPROC = _rpythonic_function_(		"PFNGLGETUNIFORMLOCATIONARBPROC", ctypes.c_int, [
	("programObj",		ctypes.c_uint),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLGETACTIVEUNIFORMARBPROC = _rpythonic_function_(		"PFNGLGETACTIVEUNIFORMARBPROC", ctypes.c_void_p, [
	("programObj",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("maxLength",		ctypes.c_int),
	("length",		ctypes.POINTER(ctypes.c_int)),
	("size",		ctypes.POINTER(ctypes.c_int)),
	("C_type",		ctypes.POINTER(ctypes.c_uint)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLGETUNIFORMFVARBPROC = _rpythonic_function_(		"PFNGLGETUNIFORMFVARBPROC", ctypes.c_void_p, [
	("programObj",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETUNIFORMIVARBPROC = _rpythonic_function_(		"PFNGLGETUNIFORMIVARBPROC", ctypes.c_void_p, [
	("programObj",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETSHADERSOURCEARBPROC = _rpythonic_function_(		"PFNGLGETSHADERSOURCEARBPROC", ctypes.c_void_p, [
	("obj",		ctypes.c_uint),
	("maxLength",		ctypes.c_int),
	("length",		ctypes.POINTER(ctypes.c_int)),
	("source",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLBINDATTRIBLOCATIONARBPROC = _rpythonic_function_(		"PFNGLBINDATTRIBLOCATIONARBPROC", ctypes.c_void_p, [
	("programObj",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLGETACTIVEATTRIBARBPROC = _rpythonic_function_(		"PFNGLGETACTIVEATTRIBARBPROC", ctypes.c_void_p, [
	("programObj",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("maxLength",		ctypes.c_int),
	("length",		ctypes.POINTER(ctypes.c_int)),
	("size",		ctypes.POINTER(ctypes.c_int)),
	("C_type",		ctypes.POINTER(ctypes.c_uint)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLGETATTRIBLOCATIONARBPROC = _rpythonic_function_(		"PFNGLGETATTRIBLOCATIONARBPROC", ctypes.c_int, [
	("programObj",		ctypes.c_uint),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLDRAWBUFFERSARBPROC = _rpythonic_function_(		"PFNGLDRAWBUFFERSARBPROC", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("bufs",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLCLAMPCOLORARBPROC = _rpythonic_function_(		"PFNGLCLAMPCOLORARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("clamp",		ctypes.c_uint),] )

PFNGLDRAWARRAYSINSTANCEDARBPROC = _rpythonic_function_(		"PFNGLDRAWARRAYSINSTANCEDARBPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("first",		ctypes.c_int),
	("count",		ctypes.c_int),
	("primcount",		ctypes.c_int),] )

PFNGLDRAWELEMENTSINSTANCEDARBPROC = _rpythonic_function_(		"PFNGLDRAWELEMENTSINSTANCEDARBPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("indices",		ctypes.POINTER(ctypes.c_void_p)),
	("primcount",		ctypes.c_int),] )

PFNGLISRENDERBUFFERPROC = _rpythonic_function_(		"PFNGLISRENDERBUFFERPROC", ctypes.c_ubyte, [
	("renderbuffer",		ctypes.c_uint),] )

PFNGLBINDRENDERBUFFERPROC = _rpythonic_function_(		"PFNGLBINDRENDERBUFFERPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("renderbuffer",		ctypes.c_uint),] )

PFNGLDELETERENDERBUFFERSPROC = _rpythonic_function_(		"PFNGLDELETERENDERBUFFERSPROC", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("renderbuffers",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLGENRENDERBUFFERSPROC = _rpythonic_function_(		"PFNGLGENRENDERBUFFERSPROC", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("renderbuffers",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLRENDERBUFFERSTORAGEPROC = _rpythonic_function_(		"PFNGLRENDERBUFFERSTORAGEPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("internalformat",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

PFNGLGETRENDERBUFFERPARAMETERIVPROC = _rpythonic_function_(		"PFNGLGETRENDERBUFFERPARAMETERIVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLISFRAMEBUFFERPROC = _rpythonic_function_(		"PFNGLISFRAMEBUFFERPROC", ctypes.c_ubyte, [
	("framebuffer",		ctypes.c_uint),] )

PFNGLBINDFRAMEBUFFERPROC = _rpythonic_function_(		"PFNGLBINDFRAMEBUFFERPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("framebuffer",		ctypes.c_uint),] )

PFNGLDELETEFRAMEBUFFERSPROC = _rpythonic_function_(		"PFNGLDELETEFRAMEBUFFERSPROC", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("framebuffers",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLGENFRAMEBUFFERSPROC = _rpythonic_function_(		"PFNGLGENFRAMEBUFFERSPROC", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("framebuffers",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLCHECKFRAMEBUFFERSTATUSPROC = _rpythonic_function_(		"PFNGLCHECKFRAMEBUFFERSTATUSPROC", ctypes.c_uint, [
	("target",		ctypes.c_uint),] )

PFNGLFRAMEBUFFERTEXTURE1DPROC = _rpythonic_function_(		"PFNGLFRAMEBUFFERTEXTURE1DPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("attachment",		ctypes.c_uint),
	("textarget",		ctypes.c_uint),
	("texture",		ctypes.c_uint),
	("level",		ctypes.c_int),] )

PFNGLFRAMEBUFFERTEXTURE2DPROC = _rpythonic_function_(		"PFNGLFRAMEBUFFERTEXTURE2DPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("attachment",		ctypes.c_uint),
	("textarget",		ctypes.c_uint),
	("texture",		ctypes.c_uint),
	("level",		ctypes.c_int),] )

PFNGLFRAMEBUFFERTEXTURE3DPROC = _rpythonic_function_(		"PFNGLFRAMEBUFFERTEXTURE3DPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("attachment",		ctypes.c_uint),
	("textarget",		ctypes.c_uint),
	("texture",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("zoffset",		ctypes.c_int),] )

PFNGLFRAMEBUFFERRENDERBUFFERPROC = _rpythonic_function_(		"PFNGLFRAMEBUFFERRENDERBUFFERPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("attachment",		ctypes.c_uint),
	("renderbuffertarget",		ctypes.c_uint),
	("renderbuffer",		ctypes.c_uint),] )

PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC = _rpythonic_function_(		"PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("attachment",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGENERATEMIPMAPPROC = _rpythonic_function_(		"PFNGLGENERATEMIPMAPPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),] )

PFNGLBLITFRAMEBUFFERPROC = _rpythonic_function_(		"PFNGLBLITFRAMEBUFFERPROC", ctypes.c_void_p, [
	("srcX0",		ctypes.c_int),
	("srcY0",		ctypes.c_int),
	("srcX1",		ctypes.c_int),
	("srcY1",		ctypes.c_int),
	("dstX0",		ctypes.c_int),
	("dstY0",		ctypes.c_int),
	("dstX1",		ctypes.c_int),
	("dstY1",		ctypes.c_int),
	("mask",		ctypes.c_uint),
	("filter",		ctypes.c_uint),] )

PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC = _rpythonic_function_(		"PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("samples",		ctypes.c_int),
	("internalformat",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

PFNGLFRAMEBUFFERTEXTURELAYERPROC = _rpythonic_function_(		"PFNGLFRAMEBUFFERTEXTURELAYERPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("attachment",		ctypes.c_uint),
	("texture",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("layer",		ctypes.c_int),] )

PFNGLPROGRAMPARAMETERIARBPROC = _rpythonic_function_(		"PFNGLPROGRAMPARAMETERIARBPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("value",		ctypes.c_int),] )

PFNGLFRAMEBUFFERTEXTUREARBPROC = _rpythonic_function_(		"PFNGLFRAMEBUFFERTEXTUREARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("attachment",		ctypes.c_uint),
	("texture",		ctypes.c_uint),
	("level",		ctypes.c_int),] )

PFNGLFRAMEBUFFERTEXTURELAYERARBPROC = _rpythonic_function_(		"PFNGLFRAMEBUFFERTEXTURELAYERARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("attachment",		ctypes.c_uint),
	("texture",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("layer",		ctypes.c_int),] )

PFNGLFRAMEBUFFERTEXTUREFACEARBPROC = _rpythonic_function_(		"PFNGLFRAMEBUFFERTEXTUREFACEARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("attachment",		ctypes.c_uint),
	("texture",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("face",		ctypes.c_uint),] )

PFNGLVERTEXATTRIBDIVISORARBPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBDIVISORARBPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("divisor",		ctypes.c_uint),] )

PFNGLMAPBUFFERRANGEPROC = _rpythonic_function_(		"PFNGLMAPBUFFERRANGEPROC", ctypes.POINTER(ctypes.c_void_p), [
	("target",		ctypes.c_uint),
	("offset",		ctypes.c_int),
	("length",		ctypes.c_int),
	("access",		ctypes.c_uint),] )

PFNGLFLUSHMAPPEDBUFFERRANGEPROC = _rpythonic_function_(		"PFNGLFLUSHMAPPEDBUFFERRANGEPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("offset",		ctypes.c_int),
	("length",		ctypes.c_int),] )

PFNGLTEXBUFFERARBPROC = _rpythonic_function_(		"PFNGLTEXBUFFERARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("internalformat",		ctypes.c_uint),
	("buffer",		ctypes.c_uint),] )

PFNGLBINDVERTEXARRAYPROC = _rpythonic_function_(		"PFNGLBINDVERTEXARRAYPROC", ctypes.c_void_p, [
	("array",		ctypes.c_uint),] )

PFNGLDELETEVERTEXARRAYSPROC = _rpythonic_function_(		"PFNGLDELETEVERTEXARRAYSPROC", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("arrays",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLGENVERTEXARRAYSPROC = _rpythonic_function_(		"PFNGLGENVERTEXARRAYSPROC", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("arrays",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLISVERTEXARRAYPROC = _rpythonic_function_(		"PFNGLISVERTEXARRAYPROC", ctypes.c_ubyte, [
	("array",		ctypes.c_uint),] )

PFNGLGETUNIFORMINDICESPROC = _rpythonic_function_(		"PFNGLGETUNIFORMINDICESPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("uniformCount",		ctypes.c_int),
	("uniformNames",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("uniformIndices",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLGETACTIVEUNIFORMSIVPROC = _rpythonic_function_(		"PFNGLGETACTIVEUNIFORMSIVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("uniformCount",		ctypes.c_int),
	("uniformIndices",		ctypes.POINTER(ctypes.c_uint)),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETACTIVEUNIFORMNAMEPROC = _rpythonic_function_(		"PFNGLGETACTIVEUNIFORMNAMEPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("uniformIndex",		ctypes.c_uint),
	("bufSize",		ctypes.c_int),
	("length",		ctypes.POINTER(ctypes.c_int)),
	("uniformName",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLGETUNIFORMBLOCKINDEXPROC = _rpythonic_function_(		"PFNGLGETUNIFORMBLOCKINDEXPROC", ctypes.c_uint, [
	("program",		ctypes.c_uint),
	("uniformBlockName",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLGETACTIVEUNIFORMBLOCKIVPROC = _rpythonic_function_(		"PFNGLGETACTIVEUNIFORMBLOCKIVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("uniformBlockIndex",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC = _rpythonic_function_(		"PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("uniformBlockIndex",		ctypes.c_uint),
	("bufSize",		ctypes.c_int),
	("length",		ctypes.POINTER(ctypes.c_int)),
	("uniformBlockName",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLUNIFORMBLOCKBINDINGPROC = _rpythonic_function_(		"PFNGLUNIFORMBLOCKBINDINGPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("uniformBlockIndex",		ctypes.c_uint),
	("uniformBlockBinding",		ctypes.c_uint),] )

PFNGLCOPYBUFFERSUBDATAPROC = _rpythonic_function_(		"PFNGLCOPYBUFFERSUBDATAPROC", ctypes.c_void_p, [
	("readTarget",		ctypes.c_uint),
	("writeTarget",		ctypes.c_uint),
	("readOffset",		ctypes.c_int),
	("writeOffset",		ctypes.c_int),
	("size",		ctypes.c_int),] )

PFNGLDRAWELEMENTSBASEVERTEXPROC = _rpythonic_function_(		"PFNGLDRAWELEMENTSBASEVERTEXPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("indices",		ctypes.POINTER(ctypes.c_void_p)),
	("basevertex",		ctypes.c_int),] )

PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC = _rpythonic_function_(		"PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("indices",		ctypes.POINTER(ctypes.c_void_p)),
	("primcount",		ctypes.c_int),
	("basevertex",		ctypes.c_int),] )

PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC = _rpythonic_function_(		"PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("start",		ctypes.c_uint),
	("end",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("indices",		ctypes.POINTER(ctypes.c_void_p)),
	("basevertex",		ctypes.c_int),] )

PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC = _rpythonic_function_(		"PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("count",		ctypes.POINTER(ctypes.c_int)),
	("C_type",		ctypes.c_uint),
	("indices",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("primcount",		ctypes.c_int),
	("basevertex",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLPROVOKINGVERTEXPROC = _rpythonic_function_(		"PFNGLPROVOKINGVERTEXPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),] )

PFNGLFENCESYNCPROC = _rpythonic_function_(		"PFNGLFENCESYNCPROC", ctypes.POINTER(__GLsync), [
	("condition",		ctypes.c_uint),
	("flags",		ctypes.c_uint),] )

PFNGLISSYNCPROC = _rpythonic_function_(		"PFNGLISSYNCPROC", ctypes.c_ubyte, [
	("sync",		ctypes.POINTER(__GLsync)),] )

PFNGLDELETESYNCPROC = _rpythonic_function_(		"PFNGLDELETESYNCPROC", ctypes.c_void_p, [
	("sync",		ctypes.POINTER(__GLsync)),] )

PFNGLCLIENTWAITSYNCPROC = _rpythonic_function_(		"PFNGLCLIENTWAITSYNCPROC", ctypes.c_uint, [
	("sync",		ctypes.POINTER(__GLsync)),
	("flags",		ctypes.c_uint),
	("timeout",		ctypes.c_uint64),] )

PFNGLWAITSYNCPROC = _rpythonic_function_(		"PFNGLWAITSYNCPROC", ctypes.c_void_p, [
	("sync",		ctypes.POINTER(__GLsync)),
	("flags",		ctypes.c_uint),
	("timeout",		ctypes.c_uint64),] )

PFNGLGETINTEGER64VPROC = _rpythonic_function_(		"PFNGLGETINTEGER64VPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int64)),] )

PFNGLGETSYNCIVPROC = _rpythonic_function_(		"PFNGLGETSYNCIVPROC", ctypes.c_void_p, [
	("sync",		ctypes.POINTER(__GLsync)),
	("pname",		ctypes.c_uint),
	("bufSize",		ctypes.c_int),
	("length",		ctypes.POINTER(ctypes.c_int)),
	("values",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLTEXIMAGE2DMULTISAMPLEPROC = _rpythonic_function_(		"PFNGLTEXIMAGE2DMULTISAMPLEPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("samples",		ctypes.c_int),
	("internalformat",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("fixedsamplelocations",		ctypes.c_ubyte),] )

PFNGLTEXIMAGE3DMULTISAMPLEPROC = _rpythonic_function_(		"PFNGLTEXIMAGE3DMULTISAMPLEPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("samples",		ctypes.c_int),
	("internalformat",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("depth",		ctypes.c_int),
	("fixedsamplelocations",		ctypes.c_ubyte),] )

PFNGLGETMULTISAMPLEFVPROC = _rpythonic_function_(		"PFNGLGETMULTISAMPLEFVPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("val",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLSAMPLEMASKIPROC = _rpythonic_function_(		"PFNGLSAMPLEMASKIPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("mask",		ctypes.c_uint),] )

PFNGLBLENDEQUATIONIARBPROC = _rpythonic_function_(		"PFNGLBLENDEQUATIONIARBPROC", ctypes.c_void_p, [
	("buf",		ctypes.c_uint),
	("mode",		ctypes.c_uint),] )

PFNGLBLENDEQUATIONSEPARATEIARBPROC = _rpythonic_function_(		"PFNGLBLENDEQUATIONSEPARATEIARBPROC", ctypes.c_void_p, [
	("buf",		ctypes.c_uint),
	("modeRGB",		ctypes.c_uint),
	("modeAlpha",		ctypes.c_uint),] )

PFNGLBLENDFUNCIARBPROC = _rpythonic_function_(		"PFNGLBLENDFUNCIARBPROC", ctypes.c_void_p, [
	("buf",		ctypes.c_uint),
	("src",		ctypes.c_uint),
	("dst",		ctypes.c_uint),] )

PFNGLBLENDFUNCSEPARATEIARBPROC = _rpythonic_function_(		"PFNGLBLENDFUNCSEPARATEIARBPROC", ctypes.c_void_p, [
	("buf",		ctypes.c_uint),
	("srcRGB",		ctypes.c_uint),
	("dstRGB",		ctypes.c_uint),
	("srcAlpha",		ctypes.c_uint),
	("dstAlpha",		ctypes.c_uint),] )

PFNGLMINSAMPLESHADINGARBPROC = _rpythonic_function_(		"PFNGLMINSAMPLESHADINGARBPROC", ctypes.c_void_p, [
	("value",		ctypes.c_float),] )

PFNGLNAMEDSTRINGARBPROC = _rpythonic_function_(		"PFNGLNAMEDSTRINGARBPROC", ctypes.c_void_p, [
	("C_type",		ctypes.c_uint),
	("namelen",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("stringlen",		ctypes.c_int),
	("string",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLDELETENAMEDSTRINGARBPROC = _rpythonic_function_(		"PFNGLDELETENAMEDSTRINGARBPROC", ctypes.c_void_p, [
	("namelen",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLCOMPILESHADERINCLUDEARBPROC = _rpythonic_function_(		"PFNGLCOMPILESHADERINCLUDEARBPROC", ctypes.c_void_p, [
	("shader",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("path",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("length",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLISNAMEDSTRINGARBPROC = _rpythonic_function_(		"PFNGLISNAMEDSTRINGARBPROC", ctypes.c_ubyte, [
	("namelen",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLGETNAMEDSTRINGARBPROC = _rpythonic_function_(		"PFNGLGETNAMEDSTRINGARBPROC", ctypes.c_void_p, [
	("namelen",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("bufSize",		ctypes.c_int),
	("stringlen",		ctypes.POINTER(ctypes.c_int)),
	("string",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLGETNAMEDSTRINGIVARBPROC = _rpythonic_function_(		"PFNGLGETNAMEDSTRINGIVARBPROC", ctypes.c_void_p, [
	("namelen",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETFRAGDATAINDEXPROC = _rpythonic_function_(		"PFNGLGETFRAGDATAINDEXPROC", ctypes.c_int, [
	("program",		ctypes.c_uint),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLBINDFRAGDATALOCATIONINDEXEDPROC = _rpythonic_function_(		"PFNGLBINDFRAGDATALOCATIONINDEXEDPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("colorNumber",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLGENSAMPLERSPROC = _rpythonic_function_(		"PFNGLGENSAMPLERSPROC", ctypes.c_void_p, [
	("count",		ctypes.c_int),
	("samplers",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLDELETESAMPLERSPROC = _rpythonic_function_(		"PFNGLDELETESAMPLERSPROC", ctypes.c_void_p, [
	("count",		ctypes.c_int),
	("samplers",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLISSAMPLERPROC = _rpythonic_function_(		"PFNGLISSAMPLERPROC", ctypes.c_ubyte, [
	("sampler",		ctypes.c_uint),] )

PFNGLBINDSAMPLERPROC = _rpythonic_function_(		"PFNGLBINDSAMPLERPROC", ctypes.c_void_p, [
	("unit",		ctypes.c_uint),
	("sampler",		ctypes.c_uint),] )

PFNGLSAMPLERPARAMETERIPROC = _rpythonic_function_(		"PFNGLSAMPLERPARAMETERIPROC", ctypes.c_void_p, [
	("sampler",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_int),] )

PFNGLSAMPLERPARAMETERIVPROC = _rpythonic_function_(		"PFNGLSAMPLERPARAMETERIVPROC", ctypes.c_void_p, [
	("sampler",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("param",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLSAMPLERPARAMETERFPROC = _rpythonic_function_(		"PFNGLSAMPLERPARAMETERFPROC", ctypes.c_void_p, [
	("sampler",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_float),] )

PFNGLSAMPLERPARAMETERFVPROC = _rpythonic_function_(		"PFNGLSAMPLERPARAMETERFVPROC", ctypes.c_void_p, [
	("sampler",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("param",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLSAMPLERPARAMETERIIVPROC = _rpythonic_function_(		"PFNGLSAMPLERPARAMETERIIVPROC", ctypes.c_void_p, [
	("sampler",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("param",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLSAMPLERPARAMETERIUIVPROC = _rpythonic_function_(		"PFNGLSAMPLERPARAMETERIUIVPROC", ctypes.c_void_p, [
	("sampler",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("param",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLGETSAMPLERPARAMETERIVPROC = _rpythonic_function_(		"PFNGLGETSAMPLERPARAMETERIVPROC", ctypes.c_void_p, [
	("sampler",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETSAMPLERPARAMETERIIVPROC = _rpythonic_function_(		"PFNGLGETSAMPLERPARAMETERIIVPROC", ctypes.c_void_p, [
	("sampler",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETSAMPLERPARAMETERFVPROC = _rpythonic_function_(		"PFNGLGETSAMPLERPARAMETERFVPROC", ctypes.c_void_p, [
	("sampler",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETSAMPLERPARAMETERIUIVPROC = _rpythonic_function_(		"PFNGLGETSAMPLERPARAMETERIUIVPROC", ctypes.c_void_p, [
	("sampler",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLQUERYCOUNTERPROC = _rpythonic_function_(		"PFNGLQUERYCOUNTERPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),
	("target",		ctypes.c_uint),] )

PFNGLGETQUERYOBJECTI64VPROC = _rpythonic_function_(		"PFNGLGETQUERYOBJECTI64VPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int64)),] )

PFNGLGETQUERYOBJECTUI64VPROC = _rpythonic_function_(		"PFNGLGETQUERYOBJECTUI64VPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_uint64)),] )

PFNGLVERTEXP2UIPROC = _rpythonic_function_(		"PFNGLVERTEXP2UIPROC", ctypes.c_void_p, [
	("C_type",		ctypes.c_uint),
	("value",		ctypes.c_uint),] )

PFNGLVERTEXP2UIVPROC = _rpythonic_function_(		"PFNGLVERTEXP2UIVPROC", ctypes.c_void_p, [
	("C_type",		ctypes.c_uint),
	("value",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLVERTEXP3UIPROC = _rpythonic_function_(		"PFNGLVERTEXP3UIPROC", ctypes.c_void_p, [
	("C_type",		ctypes.c_uint),
	("value",		ctypes.c_uint),] )

PFNGLVERTEXP3UIVPROC = _rpythonic_function_(		"PFNGLVERTEXP3UIVPROC", ctypes.c_void_p, [
	("C_type",		ctypes.c_uint),
	("value",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLVERTEXP4UIPROC = _rpythonic_function_(		"PFNGLVERTEXP4UIPROC", ctypes.c_void_p, [
	("C_type",		ctypes.c_uint),
	("value",		ctypes.c_uint),] )

PFNGLVERTEXP4UIVPROC = _rpythonic_function_(		"PFNGLVERTEXP4UIVPROC", ctypes.c_void_p, [
	("C_type",		ctypes.c_uint),
	("value",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLTEXCOORDP1UIPROC = _rpythonic_function_(		"PFNGLTEXCOORDP1UIPROC", ctypes.c_void_p, [
	("C_type",		ctypes.c_uint),
	("coords",		ctypes.c_uint),] )

PFNGLTEXCOORDP1UIVPROC = _rpythonic_function_(		"PFNGLTEXCOORDP1UIVPROC", ctypes.c_void_p, [
	("C_type",		ctypes.c_uint),
	("coords",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLTEXCOORDP2UIPROC = _rpythonic_function_(		"PFNGLTEXCOORDP2UIPROC", ctypes.c_void_p, [
	("C_type",		ctypes.c_uint),
	("coords",		ctypes.c_uint),] )

PFNGLTEXCOORDP2UIVPROC = _rpythonic_function_(		"PFNGLTEXCOORDP2UIVPROC", ctypes.c_void_p, [
	("C_type",		ctypes.c_uint),
	("coords",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLTEXCOORDP3UIPROC = _rpythonic_function_(		"PFNGLTEXCOORDP3UIPROC", ctypes.c_void_p, [
	("C_type",		ctypes.c_uint),
	("coords",		ctypes.c_uint),] )

PFNGLTEXCOORDP3UIVPROC = _rpythonic_function_(		"PFNGLTEXCOORDP3UIVPROC", ctypes.c_void_p, [
	("C_type",		ctypes.c_uint),
	("coords",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLTEXCOORDP4UIPROC = _rpythonic_function_(		"PFNGLTEXCOORDP4UIPROC", ctypes.c_void_p, [
	("C_type",		ctypes.c_uint),
	("coords",		ctypes.c_uint),] )

PFNGLTEXCOORDP4UIVPROC = _rpythonic_function_(		"PFNGLTEXCOORDP4UIVPROC", ctypes.c_void_p, [
	("C_type",		ctypes.c_uint),
	("coords",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLMULTITEXCOORDP1UIPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORDP1UIPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("coords",		ctypes.c_uint),] )

PFNGLMULTITEXCOORDP1UIVPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORDP1UIVPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("coords",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLMULTITEXCOORDP2UIPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORDP2UIPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("coords",		ctypes.c_uint),] )

PFNGLMULTITEXCOORDP2UIVPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORDP2UIVPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("coords",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLMULTITEXCOORDP3UIPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORDP3UIPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("coords",		ctypes.c_uint),] )

PFNGLMULTITEXCOORDP3UIVPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORDP3UIVPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("coords",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLMULTITEXCOORDP4UIPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORDP4UIPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("coords",		ctypes.c_uint),] )

PFNGLMULTITEXCOORDP4UIVPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORDP4UIVPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("coords",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLNORMALP3UIPROC = _rpythonic_function_(		"PFNGLNORMALP3UIPROC", ctypes.c_void_p, [
	("C_type",		ctypes.c_uint),
	("coords",		ctypes.c_uint),] )

PFNGLNORMALP3UIVPROC = _rpythonic_function_(		"PFNGLNORMALP3UIVPROC", ctypes.c_void_p, [
	("C_type",		ctypes.c_uint),
	("coords",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLCOLORP3UIPROC = _rpythonic_function_(		"PFNGLCOLORP3UIPROC", ctypes.c_void_p, [
	("C_type",		ctypes.c_uint),
	("color",		ctypes.c_uint),] )

PFNGLCOLORP3UIVPROC = _rpythonic_function_(		"PFNGLCOLORP3UIVPROC", ctypes.c_void_p, [
	("C_type",		ctypes.c_uint),
	("color",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLCOLORP4UIPROC = _rpythonic_function_(		"PFNGLCOLORP4UIPROC", ctypes.c_void_p, [
	("C_type",		ctypes.c_uint),
	("color",		ctypes.c_uint),] )

PFNGLCOLORP4UIVPROC = _rpythonic_function_(		"PFNGLCOLORP4UIVPROC", ctypes.c_void_p, [
	("C_type",		ctypes.c_uint),
	("color",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLSECONDARYCOLORP3UIPROC = _rpythonic_function_(		"PFNGLSECONDARYCOLORP3UIPROC", ctypes.c_void_p, [
	("C_type",		ctypes.c_uint),
	("color",		ctypes.c_uint),] )

PFNGLSECONDARYCOLORP3UIVPROC = _rpythonic_function_(		"PFNGLSECONDARYCOLORP3UIVPROC", ctypes.c_void_p, [
	("C_type",		ctypes.c_uint),
	("color",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLVERTEXATTRIBP1UIPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBP1UIPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("normalized",		ctypes.c_ubyte),
	("value",		ctypes.c_uint),] )

PFNGLVERTEXATTRIBP1UIVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBP1UIVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("normalized",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLVERTEXATTRIBP2UIPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBP2UIPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("normalized",		ctypes.c_ubyte),
	("value",		ctypes.c_uint),] )

PFNGLVERTEXATTRIBP2UIVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBP2UIVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("normalized",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLVERTEXATTRIBP3UIPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBP3UIPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("normalized",		ctypes.c_ubyte),
	("value",		ctypes.c_uint),] )

PFNGLVERTEXATTRIBP3UIVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBP3UIVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("normalized",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLVERTEXATTRIBP4UIPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBP4UIPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("normalized",		ctypes.c_ubyte),
	("value",		ctypes.c_uint),] )

PFNGLVERTEXATTRIBP4UIVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBP4UIVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("normalized",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLDRAWARRAYSINDIRECTPROC = _rpythonic_function_(		"PFNGLDRAWARRAYSINDIRECTPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("indirect",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLDRAWELEMENTSINDIRECTPROC = _rpythonic_function_(		"PFNGLDRAWELEMENTSINDIRECTPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("indirect",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLUNIFORM1DPROC = _rpythonic_function_(		"PFNGLUNIFORM1DPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("x",		ctypes.c_double),] )

PFNGLUNIFORM2DPROC = _rpythonic_function_(		"PFNGLUNIFORM2DPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),] )

PFNGLUNIFORM3DPROC = _rpythonic_function_(		"PFNGLUNIFORM3DPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("z",		ctypes.c_double),] )

PFNGLUNIFORM4DPROC = _rpythonic_function_(		"PFNGLUNIFORM4DPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("z",		ctypes.c_double),
	("w",		ctypes.c_double),] )

PFNGLUNIFORM1DVPROC = _rpythonic_function_(		"PFNGLUNIFORM1DVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLUNIFORM2DVPROC = _rpythonic_function_(		"PFNGLUNIFORM2DVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLUNIFORM3DVPROC = _rpythonic_function_(		"PFNGLUNIFORM3DVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLUNIFORM4DVPROC = _rpythonic_function_(		"PFNGLUNIFORM4DVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLUNIFORMMATRIX2DVPROC = _rpythonic_function_(		"PFNGLUNIFORMMATRIX2DVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLUNIFORMMATRIX3DVPROC = _rpythonic_function_(		"PFNGLUNIFORMMATRIX3DVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLUNIFORMMATRIX4DVPROC = _rpythonic_function_(		"PFNGLUNIFORMMATRIX4DVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLUNIFORMMATRIX2X3DVPROC = _rpythonic_function_(		"PFNGLUNIFORMMATRIX2X3DVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLUNIFORMMATRIX2X4DVPROC = _rpythonic_function_(		"PFNGLUNIFORMMATRIX2X4DVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLUNIFORMMATRIX3X2DVPROC = _rpythonic_function_(		"PFNGLUNIFORMMATRIX3X2DVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLUNIFORMMATRIX3X4DVPROC = _rpythonic_function_(		"PFNGLUNIFORMMATRIX3X4DVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLUNIFORMMATRIX4X2DVPROC = _rpythonic_function_(		"PFNGLUNIFORMMATRIX4X2DVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLUNIFORMMATRIX4X3DVPROC = _rpythonic_function_(		"PFNGLUNIFORMMATRIX4X3DVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLGETUNIFORMDVPROC = _rpythonic_function_(		"PFNGLGETUNIFORMDVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("params",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC = _rpythonic_function_(		"PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC", ctypes.c_int, [
	("program",		ctypes.c_uint),
	("shadertype",		ctypes.c_uint),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLGETSUBROUTINEINDEXPROC = _rpythonic_function_(		"PFNGLGETSUBROUTINEINDEXPROC", ctypes.c_uint, [
	("program",		ctypes.c_uint),
	("shadertype",		ctypes.c_uint),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC = _rpythonic_function_(		"PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("shadertype",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("values",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC = _rpythonic_function_(		"PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("shadertype",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("bufsize",		ctypes.c_int),
	("length",		ctypes.POINTER(ctypes.c_int)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLGETACTIVESUBROUTINENAMEPROC = _rpythonic_function_(		"PFNGLGETACTIVESUBROUTINENAMEPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("shadertype",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("bufsize",		ctypes.c_int),
	("length",		ctypes.POINTER(ctypes.c_int)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLUNIFORMSUBROUTINESUIVPROC = _rpythonic_function_(		"PFNGLUNIFORMSUBROUTINESUIVPROC", ctypes.c_void_p, [
	("shadertype",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("indices",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLGETUNIFORMSUBROUTINEUIVPROC = _rpythonic_function_(		"PFNGLGETUNIFORMSUBROUTINEUIVPROC", ctypes.c_void_p, [
	("shadertype",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("params",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLGETPROGRAMSTAGEIVPROC = _rpythonic_function_(		"PFNGLGETPROGRAMSTAGEIVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("shadertype",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("values",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLPATCHPARAMETERIPROC = _rpythonic_function_(		"PFNGLPATCHPARAMETERIPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("value",		ctypes.c_int),] )

PFNGLPATCHPARAMETERFVPROC = _rpythonic_function_(		"PFNGLPATCHPARAMETERFVPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("values",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLBINDTRANSFORMFEEDBACKPROC = _rpythonic_function_(		"PFNGLBINDTRANSFORMFEEDBACKPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("C_id",		ctypes.c_uint),] )

PFNGLDELETETRANSFORMFEEDBACKSPROC = _rpythonic_function_(		"PFNGLDELETETRANSFORMFEEDBACKSPROC", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("ids",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLGENTRANSFORMFEEDBACKSPROC = _rpythonic_function_(		"PFNGLGENTRANSFORMFEEDBACKSPROC", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("ids",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLISTRANSFORMFEEDBACKPROC = _rpythonic_function_(		"PFNGLISTRANSFORMFEEDBACKPROC", ctypes.c_ubyte, [
	("C_id",		ctypes.c_uint),] )

PFNGLPAUSETRANSFORMFEEDBACKPROC = _rpythonic_function_(		"PFNGLPAUSETRANSFORMFEEDBACKPROC", ctypes.c_void_p, [] )

PFNGLRESUMETRANSFORMFEEDBACKPROC = _rpythonic_function_(		"PFNGLRESUMETRANSFORMFEEDBACKPROC", ctypes.c_void_p, [] )

PFNGLDRAWTRANSFORMFEEDBACKPROC = _rpythonic_function_(		"PFNGLDRAWTRANSFORMFEEDBACKPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("C_id",		ctypes.c_uint),] )

PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC = _rpythonic_function_(		"PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("C_id",		ctypes.c_uint),
	("stream",		ctypes.c_uint),] )

PFNGLBEGINQUERYINDEXEDPROC = _rpythonic_function_(		"PFNGLBEGINQUERYINDEXEDPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("C_id",		ctypes.c_uint),] )

PFNGLENDQUERYINDEXEDPROC = _rpythonic_function_(		"PFNGLENDQUERYINDEXEDPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),] )

PFNGLGETQUERYINDEXEDIVPROC = _rpythonic_function_(		"PFNGLGETQUERYINDEXEDIVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLRELEASESHADERCOMPILERPROC = _rpythonic_function_(		"PFNGLRELEASESHADERCOMPILERPROC", ctypes.c_void_p, [] )

PFNGLSHADERBINARYPROC = _rpythonic_function_(		"PFNGLSHADERBINARYPROC", ctypes.c_void_p, [
	("count",		ctypes.c_int),
	("shaders",		ctypes.POINTER(ctypes.c_uint)),
	("binaryformat",		ctypes.c_uint),
	("binary",		ctypes.POINTER(ctypes.c_void_p)),
	("length",		ctypes.c_int),] )

PFNGLGETSHADERPRECISIONFORMATPROC = _rpythonic_function_(		"PFNGLGETSHADERPRECISIONFORMATPROC", ctypes.c_void_p, [
	("shadertype",		ctypes.c_uint),
	("precisiontype",		ctypes.c_uint),
	("C_range",		ctypes.POINTER(ctypes.c_int)),
	("precision",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLDEPTHRANGEFPROC = _rpythonic_function_(		"PFNGLDEPTHRANGEFPROC", ctypes.c_void_p, [
	("n",		ctypes.c_float),
	("f",		ctypes.c_float),] )

PFNGLCLEARDEPTHFPROC = _rpythonic_function_(		"PFNGLCLEARDEPTHFPROC", ctypes.c_void_p, [
	("d",		ctypes.c_float),] )

PFNGLGETPROGRAMBINARYPROC = _rpythonic_function_(		"PFNGLGETPROGRAMBINARYPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("bufSize",		ctypes.c_int),
	("length",		ctypes.POINTER(ctypes.c_int)),
	("binaryFormat",		ctypes.POINTER(ctypes.c_uint)),
	("binary",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLPROGRAMBINARYPROC = _rpythonic_function_(		"PFNGLPROGRAMBINARYPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("binaryFormat",		ctypes.c_uint),
	("binary",		ctypes.POINTER(ctypes.c_void_p)),
	("length",		ctypes.c_int),] )

PFNGLPROGRAMPARAMETERIPROC = _rpythonic_function_(		"PFNGLPROGRAMPARAMETERIPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("value",		ctypes.c_int),] )

PFNGLUSEPROGRAMSTAGESPROC = _rpythonic_function_(		"PFNGLUSEPROGRAMSTAGESPROC", ctypes.c_void_p, [
	("pipeline",		ctypes.c_uint),
	("stages",		ctypes.c_uint),
	("program",		ctypes.c_uint),] )

PFNGLACTIVESHADERPROGRAMPROC = _rpythonic_function_(		"PFNGLACTIVESHADERPROGRAMPROC", ctypes.c_void_p, [
	("pipeline",		ctypes.c_uint),
	("program",		ctypes.c_uint),] )

PFNGLCREATESHADERPROGRAMVPROC = _rpythonic_function_(		"PFNGLCREATESHADERPROGRAMVPROC", ctypes.c_uint, [
	("C_type",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("strings",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

PFNGLBINDPROGRAMPIPELINEPROC = _rpythonic_function_(		"PFNGLBINDPROGRAMPIPELINEPROC", ctypes.c_void_p, [
	("pipeline",		ctypes.c_uint),] )

PFNGLDELETEPROGRAMPIPELINESPROC = _rpythonic_function_(		"PFNGLDELETEPROGRAMPIPELINESPROC", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("pipelines",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLGENPROGRAMPIPELINESPROC = _rpythonic_function_(		"PFNGLGENPROGRAMPIPELINESPROC", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("pipelines",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLISPROGRAMPIPELINEPROC = _rpythonic_function_(		"PFNGLISPROGRAMPIPELINEPROC", ctypes.c_ubyte, [
	("pipeline",		ctypes.c_uint),] )

PFNGLGETPROGRAMPIPELINEIVPROC = _rpythonic_function_(		"PFNGLGETPROGRAMPIPELINEIVPROC", ctypes.c_void_p, [
	("pipeline",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLPROGRAMUNIFORM1IPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM1IPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("v0",		ctypes.c_int),] )

PFNGLPROGRAMUNIFORM1IVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM1IVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLPROGRAMUNIFORM1FPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM1FPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("v0",		ctypes.c_float),] )

PFNGLPROGRAMUNIFORM1FVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM1FVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLPROGRAMUNIFORM1DPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM1DPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("v0",		ctypes.c_double),] )

PFNGLPROGRAMUNIFORM1DVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM1DVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLPROGRAMUNIFORM1UIPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM1UIPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("v0",		ctypes.c_uint),] )

PFNGLPROGRAMUNIFORM1UIVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM1UIVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLPROGRAMUNIFORM2IPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM2IPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("v0",		ctypes.c_int),
	("v1",		ctypes.c_int),] )

PFNGLPROGRAMUNIFORM2IVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM2IVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLPROGRAMUNIFORM2FPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM2FPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("v0",		ctypes.c_float),
	("v1",		ctypes.c_float),] )

PFNGLPROGRAMUNIFORM2FVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM2FVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLPROGRAMUNIFORM2DPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM2DPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("v0",		ctypes.c_double),
	("v1",		ctypes.c_double),] )

PFNGLPROGRAMUNIFORM2DVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM2DVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLPROGRAMUNIFORM2UIPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM2UIPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("v0",		ctypes.c_uint),
	("v1",		ctypes.c_uint),] )

PFNGLPROGRAMUNIFORM2UIVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM2UIVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLPROGRAMUNIFORM3IPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM3IPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("v0",		ctypes.c_int),
	("v1",		ctypes.c_int),
	("v2",		ctypes.c_int),] )

PFNGLPROGRAMUNIFORM3IVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM3IVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLPROGRAMUNIFORM3FPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM3FPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("v0",		ctypes.c_float),
	("v1",		ctypes.c_float),
	("v2",		ctypes.c_float),] )

PFNGLPROGRAMUNIFORM3FVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM3FVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLPROGRAMUNIFORM3DVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM3DVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLPROGRAMUNIFORM3DPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM3DPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("v0",		ctypes.c_double),
	("v1",		ctypes.c_double),
	("v2",		ctypes.c_double),] )

PFNGLPROGRAMUNIFORM3UIVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM3UIVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLPROGRAMUNIFORM3UIPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM3UIPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("v0",		ctypes.c_uint),
	("v1",		ctypes.c_uint),
	("v2",		ctypes.c_uint),] )

PFNGLPROGRAMUNIFORM4IPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM4IPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("v0",		ctypes.c_int),
	("v1",		ctypes.c_int),
	("v2",		ctypes.c_int),
	("v3",		ctypes.c_int),] )

PFNGLPROGRAMUNIFORM4IVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM4IVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLPROGRAMUNIFORM4FPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM4FPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("v0",		ctypes.c_float),
	("v1",		ctypes.c_float),
	("v2",		ctypes.c_float),
	("v3",		ctypes.c_float),] )

PFNGLPROGRAMUNIFORM4FVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM4FVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLPROGRAMUNIFORM4DPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM4DPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("v0",		ctypes.c_double),
	("v1",		ctypes.c_double),
	("v2",		ctypes.c_double),
	("v3",		ctypes.c_double),] )

PFNGLPROGRAMUNIFORM4DVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM4DVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLPROGRAMUNIFORM4UIPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM4UIPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("v0",		ctypes.c_uint),
	("v1",		ctypes.c_uint),
	("v2",		ctypes.c_uint),
	("v3",		ctypes.c_uint),] )

PFNGLPROGRAMUNIFORM4UIVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM4UIVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLPROGRAMUNIFORMMATRIX2FVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORMMATRIX2FVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLPROGRAMUNIFORMMATRIX3FVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORMMATRIX3FVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLPROGRAMUNIFORMMATRIX2DVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORMMATRIX2DVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLPROGRAMUNIFORMMATRIX4FVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORMMATRIX4FVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLPROGRAMUNIFORMMATRIX3DVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORMMATRIX3DVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLPROGRAMUNIFORMMATRIX4DVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORMMATRIX4DVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLVALIDATEPROGRAMPIPELINEPROC = _rpythonic_function_(		"PFNGLVALIDATEPROGRAMPIPELINEPROC", ctypes.c_void_p, [
	("pipeline",		ctypes.c_uint),] )

PFNGLGETPROGRAMPIPELINEINFOLOGPROC = _rpythonic_function_(		"PFNGLGETPROGRAMPIPELINEINFOLOGPROC", ctypes.c_void_p, [
	("pipeline",		ctypes.c_uint),
	("bufSize",		ctypes.c_int),
	("length",		ctypes.POINTER(ctypes.c_int)),
	("infoLog",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLVERTEXATTRIBL1DPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBL1DPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_double),] )

PFNGLVERTEXATTRIBL2DPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBL2DPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),] )

PFNGLVERTEXATTRIBL3DPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBL3DPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("z",		ctypes.c_double),] )

PFNGLVERTEXATTRIBL4DPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBL4DPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("z",		ctypes.c_double),
	("w",		ctypes.c_double),] )

PFNGLVERTEXATTRIBL1DVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBL1DVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLVERTEXATTRIBL2DVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBL2DVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLVERTEXATTRIBL3DVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBL3DVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLVERTEXATTRIBL4DVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBL4DVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLVERTEXATTRIBLPOINTERPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBLPOINTERPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("size",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("stride",		ctypes.c_int),
	("pointer",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLGETVERTEXATTRIBLDVPROC = _rpythonic_function_(		"PFNGLGETVERTEXATTRIBLDVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLVIEWPORTARRAYVPROC = _rpythonic_function_(		"PFNGLVIEWPORTARRAYVPROC", ctypes.c_void_p, [
	("first",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLVIEWPORTINDEXEDFPROC = _rpythonic_function_(		"PFNGLVIEWPORTINDEXEDFPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("w",		ctypes.c_float),
	("h",		ctypes.c_float),] )

PFNGLVIEWPORTINDEXEDFVPROC = _rpythonic_function_(		"PFNGLVIEWPORTINDEXEDFVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLSCISSORARRAYVPROC = _rpythonic_function_(		"PFNGLSCISSORARRAYVPROC", ctypes.c_void_p, [
	("first",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("v",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLSCISSORINDEXEDPROC = _rpythonic_function_(		"PFNGLSCISSORINDEXEDPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("left",		ctypes.c_int),
	("bottom",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

PFNGLSCISSORINDEXEDVPROC = _rpythonic_function_(		"PFNGLSCISSORINDEXEDVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLDEPTHRANGEARRAYVPROC = _rpythonic_function_(		"PFNGLDEPTHRANGEARRAYVPROC", ctypes.c_void_p, [
	("first",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLDEPTHRANGEINDEXEDPROC = _rpythonic_function_(		"PFNGLDEPTHRANGEINDEXEDPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("n",		ctypes.c_double),
	("f",		ctypes.c_double),] )

PFNGLGETFLOATI_VPROC = _rpythonic_function_(		"PFNGLGETFLOATI_VPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETDOUBLEI_VPROC = _rpythonic_function_(		"PFNGLGETDOUBLEI_VPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLCREATESYNCFROMCLEVENTARBPROC = _rpythonic_function_(		"PFNGLCREATESYNCFROMCLEVENTARBPROC", ctypes.POINTER(__GLsync), [
	("context",		ctypes.POINTER(_cl_context)),
	("event",		ctypes.POINTER(_cl_event)),
	("flags",		ctypes.c_uint),] )

PFNGLDEBUGMESSAGECONTROLARBPROC = _rpythonic_function_(		"PFNGLDEBUGMESSAGECONTROLARBPROC", ctypes.c_void_p, [
	("source",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("severity",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("ids",		ctypes.POINTER(ctypes.c_uint)),
	("enabled",		ctypes.c_ubyte),] )

PFNGLDEBUGMESSAGEINSERTARBPROC = _rpythonic_function_(		"PFNGLDEBUGMESSAGEINSERTARBPROC", ctypes.c_void_p, [
	("source",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("C_id",		ctypes.c_uint),
	("severity",		ctypes.c_uint),
	("length",		ctypes.c_int),
	("buf",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLDEBUGMESSAGECALLBACKARBPROC = _rpythonic_function_(		"PFNGLDEBUGMESSAGECALLBACKARBPROC", ctypes.c_void_p, [
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_uint,ctypes.c_uint,ctypes.c_uint,ctypes.c_uint,ctypes.c_int,ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),)),
	("userParam",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLGETDEBUGMESSAGELOGARBPROC = _rpythonic_function_(		"PFNGLGETDEBUGMESSAGELOGARBPROC", ctypes.c_uint, [
	("count",		ctypes.c_uint),
	("bufsize",		ctypes.c_int),
	("sources",		ctypes.POINTER(ctypes.c_uint)),
	("types",		ctypes.POINTER(ctypes.c_uint)),
	("ids",		ctypes.POINTER(ctypes.c_uint)),
	("severities",		ctypes.POINTER(ctypes.c_uint)),
	("lengths",		ctypes.POINTER(ctypes.c_int)),
	("messageLog",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLGETGRAPHICSRESETSTATUSARBPROC = _rpythonic_function_(		"PFNGLGETGRAPHICSRESETSTATUSARBPROC", ctypes.c_uint, [] )

PFNGLGETNMAPDVARBPROC = _rpythonic_function_(		"PFNGLGETNMAPDVARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("query",		ctypes.c_uint),
	("bufSize",		ctypes.c_int),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLGETNMAPFVARBPROC = _rpythonic_function_(		"PFNGLGETNMAPFVARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("query",		ctypes.c_uint),
	("bufSize",		ctypes.c_int),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETNMAPIVARBPROC = _rpythonic_function_(		"PFNGLGETNMAPIVARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("query",		ctypes.c_uint),
	("bufSize",		ctypes.c_int),
	("v",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETNPIXELMAPFVARBPROC = _rpythonic_function_(		"PFNGLGETNPIXELMAPFVARBPROC", ctypes.c_void_p, [
	("map",		ctypes.c_uint),
	("bufSize",		ctypes.c_int),
	("values",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETNPIXELMAPUIVARBPROC = _rpythonic_function_(		"PFNGLGETNPIXELMAPUIVARBPROC", ctypes.c_void_p, [
	("map",		ctypes.c_uint),
	("bufSize",		ctypes.c_int),
	("values",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLGETNPIXELMAPUSVARBPROC = _rpythonic_function_(		"PFNGLGETNPIXELMAPUSVARBPROC", ctypes.c_void_p, [
	("map",		ctypes.c_uint),
	("bufSize",		ctypes.c_int),
	("values",		ctypes.POINTER(ctypes.c_ushort)),] )

PFNGLGETNPOLYGONSTIPPLEARBPROC = _rpythonic_function_(		"PFNGLGETNPOLYGONSTIPPLEARBPROC", ctypes.c_void_p, [
	("bufSize",		ctypes.c_int),
	("pattern",		ctypes.POINTER(ctypes.c_ubyte)),] )

PFNGLGETNCOLORTABLEARBPROC = _rpythonic_function_(		"PFNGLGETNCOLORTABLEARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("bufSize",		ctypes.c_int),
	("table",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLGETNCONVOLUTIONFILTERARBPROC = _rpythonic_function_(		"PFNGLGETNCONVOLUTIONFILTERARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("bufSize",		ctypes.c_int),
	("image",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLGETNSEPARABLEFILTERARBPROC = _rpythonic_function_(		"PFNGLGETNSEPARABLEFILTERARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("rowBufSize",		ctypes.c_int),
	("row",		ctypes.POINTER(ctypes.c_void_p)),
	("columnBufSize",		ctypes.c_int),
	("column",		ctypes.POINTER(ctypes.c_void_p)),
	("span",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLGETNHISTOGRAMARBPROC = _rpythonic_function_(		"PFNGLGETNHISTOGRAMARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("reset",		ctypes.c_ubyte),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("bufSize",		ctypes.c_int),
	("values",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLGETNMINMAXARBPROC = _rpythonic_function_(		"PFNGLGETNMINMAXARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("reset",		ctypes.c_ubyte),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("bufSize",		ctypes.c_int),
	("values",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLGETNTEXIMAGEARBPROC = _rpythonic_function_(		"PFNGLGETNTEXIMAGEARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("bufSize",		ctypes.c_int),
	("img",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLREADNPIXELSARBPROC = _rpythonic_function_(		"PFNGLREADNPIXELSARBPROC", ctypes.c_void_p, [
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("bufSize",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC = _rpythonic_function_(		"PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("lod",		ctypes.c_int),
	("bufSize",		ctypes.c_int),
	("img",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLGETNUNIFORMFVARBPROC = _rpythonic_function_(		"PFNGLGETNUNIFORMFVARBPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("bufSize",		ctypes.c_int),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETNUNIFORMIVARBPROC = _rpythonic_function_(		"PFNGLGETNUNIFORMIVARBPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("bufSize",		ctypes.c_int),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETNUNIFORMUIVARBPROC = _rpythonic_function_(		"PFNGLGETNUNIFORMUIVARBPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("bufSize",		ctypes.c_int),
	("params",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLGETNUNIFORMDVARBPROC = _rpythonic_function_(		"PFNGLGETNUNIFORMDVARBPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("bufSize",		ctypes.c_int),
	("params",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLBLENDCOLOREXTPROC = _rpythonic_function_(		"PFNGLBLENDCOLOREXTPROC", ctypes.c_void_p, [
	("red",		ctypes.c_float),
	("green",		ctypes.c_float),
	("blue",		ctypes.c_float),
	("alpha",		ctypes.c_float),] )

PFNGLPOLYGONOFFSETEXTPROC = _rpythonic_function_(		"PFNGLPOLYGONOFFSETEXTPROC", ctypes.c_void_p, [
	("factor",		ctypes.c_float),
	("bias",		ctypes.c_float),] )

PFNGLTEXIMAGE3DEXTPROC = _rpythonic_function_(		"PFNGLTEXIMAGE3DEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("internalformat",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("depth",		ctypes.c_int),
	("border",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("pixels",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLTEXSUBIMAGE3DEXTPROC = _rpythonic_function_(		"PFNGLTEXSUBIMAGE3DEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("xoffset",		ctypes.c_int),
	("yoffset",		ctypes.c_int),
	("zoffset",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("depth",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("pixels",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLTEXFILTERFUNCSGISPROC = _rpythonic_function_(		"PFNGLTEXFILTERFUNCSGISPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("filter",		ctypes.c_uint),
	("n",		ctypes.c_int),
	("weights",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETTEXFILTERFUNCSGISPROC = _rpythonic_function_(		"PFNGLGETTEXFILTERFUNCSGISPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("filter",		ctypes.c_uint),
	("weights",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLTEXSUBIMAGE1DEXTPROC = _rpythonic_function_(		"PFNGLTEXSUBIMAGE1DEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("xoffset",		ctypes.c_int),
	("width",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("pixels",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLTEXSUBIMAGE2DEXTPROC = _rpythonic_function_(		"PFNGLTEXSUBIMAGE2DEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("xoffset",		ctypes.c_int),
	("yoffset",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("pixels",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLCOPYTEXIMAGE1DEXTPROC = _rpythonic_function_(		"PFNGLCOPYTEXIMAGE1DEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("internalformat",		ctypes.c_uint),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("border",		ctypes.c_int),] )

PFNGLCOPYTEXIMAGE2DEXTPROC = _rpythonic_function_(		"PFNGLCOPYTEXIMAGE2DEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("internalformat",		ctypes.c_uint),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("border",		ctypes.c_int),] )

PFNGLCOPYTEXSUBIMAGE1DEXTPROC = _rpythonic_function_(		"PFNGLCOPYTEXSUBIMAGE1DEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("xoffset",		ctypes.c_int),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),] )

PFNGLCOPYTEXSUBIMAGE2DEXTPROC = _rpythonic_function_(		"PFNGLCOPYTEXSUBIMAGE2DEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("xoffset",		ctypes.c_int),
	("yoffset",		ctypes.c_int),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

PFNGLCOPYTEXSUBIMAGE3DEXTPROC = _rpythonic_function_(		"PFNGLCOPYTEXSUBIMAGE3DEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("xoffset",		ctypes.c_int),
	("yoffset",		ctypes.c_int),
	("zoffset",		ctypes.c_int),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

PFNGLGETHISTOGRAMEXTPROC = _rpythonic_function_(		"PFNGLGETHISTOGRAMEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("reset",		ctypes.c_ubyte),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("values",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLGETHISTOGRAMPARAMETERFVEXTPROC = _rpythonic_function_(		"PFNGLGETHISTOGRAMPARAMETERFVEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETHISTOGRAMPARAMETERIVEXTPROC = _rpythonic_function_(		"PFNGLGETHISTOGRAMPARAMETERIVEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETMINMAXEXTPROC = _rpythonic_function_(		"PFNGLGETMINMAXEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("reset",		ctypes.c_ubyte),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("values",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLGETMINMAXPARAMETERFVEXTPROC = _rpythonic_function_(		"PFNGLGETMINMAXPARAMETERFVEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETMINMAXPARAMETERIVEXTPROC = _rpythonic_function_(		"PFNGLGETMINMAXPARAMETERIVEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLHISTOGRAMEXTPROC = _rpythonic_function_(		"PFNGLHISTOGRAMEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("internalformat",		ctypes.c_uint),
	("sink",		ctypes.c_ubyte),] )

PFNGLMINMAXEXTPROC = _rpythonic_function_(		"PFNGLMINMAXEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("internalformat",		ctypes.c_uint),
	("sink",		ctypes.c_ubyte),] )

PFNGLRESETHISTOGRAMEXTPROC = _rpythonic_function_(		"PFNGLRESETHISTOGRAMEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),] )

PFNGLRESETMINMAXEXTPROC = _rpythonic_function_(		"PFNGLRESETMINMAXEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),] )

PFNGLCONVOLUTIONFILTER1DEXTPROC = _rpythonic_function_(		"PFNGLCONVOLUTIONFILTER1DEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("internalformat",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("image",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLCONVOLUTIONFILTER2DEXTPROC = _rpythonic_function_(		"PFNGLCONVOLUTIONFILTER2DEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("internalformat",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("image",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLCONVOLUTIONPARAMETERFEXTPROC = _rpythonic_function_(		"PFNGLCONVOLUTIONPARAMETERFEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.c_float),] )

PFNGLCONVOLUTIONPARAMETERFVEXTPROC = _rpythonic_function_(		"PFNGLCONVOLUTIONPARAMETERFVEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLCONVOLUTIONPARAMETERIEXTPROC = _rpythonic_function_(		"PFNGLCONVOLUTIONPARAMETERIEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.c_int),] )

PFNGLCONVOLUTIONPARAMETERIVEXTPROC = _rpythonic_function_(		"PFNGLCONVOLUTIONPARAMETERIVEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC = _rpythonic_function_(		"PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("internalformat",		ctypes.c_uint),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),] )

PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC = _rpythonic_function_(		"PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("internalformat",		ctypes.c_uint),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

PFNGLGETCONVOLUTIONFILTEREXTPROC = _rpythonic_function_(		"PFNGLGETCONVOLUTIONFILTEREXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("image",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC = _rpythonic_function_(		"PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC = _rpythonic_function_(		"PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETSEPARABLEFILTEREXTPROC = _rpythonic_function_(		"PFNGLGETSEPARABLEFILTEREXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("row",		ctypes.POINTER(ctypes.c_void_p)),
	("column",		ctypes.POINTER(ctypes.c_void_p)),
	("span",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLSEPARABLEFILTER2DEXTPROC = _rpythonic_function_(		"PFNGLSEPARABLEFILTER2DEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("internalformat",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("row",		ctypes.POINTER(ctypes.c_void_p)),
	("column",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLCOLORTABLESGIPROC = _rpythonic_function_(		"PFNGLCOLORTABLESGIPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("internalformat",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("table",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLCOLORTABLEPARAMETERFVSGIPROC = _rpythonic_function_(		"PFNGLCOLORTABLEPARAMETERFVSGIPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLCOLORTABLEPARAMETERIVSGIPROC = _rpythonic_function_(		"PFNGLCOLORTABLEPARAMETERIVSGIPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLCOPYCOLORTABLESGIPROC = _rpythonic_function_(		"PFNGLCOPYCOLORTABLESGIPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("internalformat",		ctypes.c_uint),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),] )

PFNGLGETCOLORTABLESGIPROC = _rpythonic_function_(		"PFNGLGETCOLORTABLESGIPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("table",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLGETCOLORTABLEPARAMETERFVSGIPROC = _rpythonic_function_(		"PFNGLGETCOLORTABLEPARAMETERFVSGIPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETCOLORTABLEPARAMETERIVSGIPROC = _rpythonic_function_(		"PFNGLGETCOLORTABLEPARAMETERIVSGIPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLPIXELTEXGENSGIXPROC = _rpythonic_function_(		"PFNGLPIXELTEXGENSGIXPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),] )

PFNGLPIXELTEXGENPARAMETERISGISPROC = _rpythonic_function_(		"PFNGLPIXELTEXGENPARAMETERISGISPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_int),] )

PFNGLPIXELTEXGENPARAMETERIVSGISPROC = _rpythonic_function_(		"PFNGLPIXELTEXGENPARAMETERIVSGISPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLPIXELTEXGENPARAMETERFSGISPROC = _rpythonic_function_(		"PFNGLPIXELTEXGENPARAMETERFSGISPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_float),] )

PFNGLPIXELTEXGENPARAMETERFVSGISPROC = _rpythonic_function_(		"PFNGLPIXELTEXGENPARAMETERFVSGISPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC = _rpythonic_function_(		"PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC = _rpythonic_function_(		"PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLTEXIMAGE4DSGISPROC = _rpythonic_function_(		"PFNGLTEXIMAGE4DSGISPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("internalformat",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("depth",		ctypes.c_int),
	("size4d",		ctypes.c_int),
	("border",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("pixels",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLTEXSUBIMAGE4DSGISPROC = _rpythonic_function_(		"PFNGLTEXSUBIMAGE4DSGISPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("xoffset",		ctypes.c_int),
	("yoffset",		ctypes.c_int),
	("zoffset",		ctypes.c_int),
	("woffset",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("depth",		ctypes.c_int),
	("size4d",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("pixels",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLARETEXTURESRESIDENTEXTPROC = _rpythonic_function_(		"PFNGLARETEXTURESRESIDENTEXTPROC", ctypes.c_ubyte, [
	("n",		ctypes.c_int),
	("textures",		ctypes.POINTER(ctypes.c_uint)),
	("residences",		ctypes.POINTER(ctypes.c_ubyte)),] )

PFNGLBINDTEXTUREEXTPROC = _rpythonic_function_(		"PFNGLBINDTEXTUREEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("texture",		ctypes.c_uint),] )

PFNGLDELETETEXTURESEXTPROC = _rpythonic_function_(		"PFNGLDELETETEXTURESEXTPROC", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("textures",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLGENTEXTURESEXTPROC = _rpythonic_function_(		"PFNGLGENTEXTURESEXTPROC", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("textures",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLISTEXTUREEXTPROC = _rpythonic_function_(		"PFNGLISTEXTUREEXTPROC", ctypes.c_ubyte, [
	("texture",		ctypes.c_uint),] )

PFNGLPRIORITIZETEXTURESEXTPROC = _rpythonic_function_(		"PFNGLPRIORITIZETEXTURESEXTPROC", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("textures",		ctypes.POINTER(ctypes.c_uint)),
	("priorities",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLDETAILTEXFUNCSGISPROC = _rpythonic_function_(		"PFNGLDETAILTEXFUNCSGISPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("n",		ctypes.c_int),
	("points",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETDETAILTEXFUNCSGISPROC = _rpythonic_function_(		"PFNGLGETDETAILTEXFUNCSGISPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("points",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLSHARPENTEXFUNCSGISPROC = _rpythonic_function_(		"PFNGLSHARPENTEXFUNCSGISPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("n",		ctypes.c_int),
	("points",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETSHARPENTEXFUNCSGISPROC = _rpythonic_function_(		"PFNGLGETSHARPENTEXFUNCSGISPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("points",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLSAMPLEMASKSGISPROC = _rpythonic_function_(		"PFNGLSAMPLEMASKSGISPROC", ctypes.c_void_p, [
	("value",		ctypes.c_float),
	("invert",		ctypes.c_ubyte),] )

PFNGLSAMPLEPATTERNSGISPROC = _rpythonic_function_(		"PFNGLSAMPLEPATTERNSGISPROC", ctypes.c_void_p, [
	("pattern",		ctypes.c_uint),] )

PFNGLARRAYELEMENTEXTPROC = _rpythonic_function_(		"PFNGLARRAYELEMENTEXTPROC", ctypes.c_void_p, [
	("i",		ctypes.c_int),] )

PFNGLCOLORPOINTEREXTPROC = _rpythonic_function_(		"PFNGLCOLORPOINTEREXTPROC", ctypes.c_void_p, [
	("size",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("stride",		ctypes.c_int),
	("count",		ctypes.c_int),
	("pointer",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLDRAWARRAYSEXTPROC = _rpythonic_function_(		"PFNGLDRAWARRAYSEXTPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("first",		ctypes.c_int),
	("count",		ctypes.c_int),] )

PFNGLEDGEFLAGPOINTEREXTPROC = _rpythonic_function_(		"PFNGLEDGEFLAGPOINTEREXTPROC", ctypes.c_void_p, [
	("stride",		ctypes.c_int),
	("count",		ctypes.c_int),
	("pointer",		ctypes.POINTER(ctypes.c_ubyte)),] )

PFNGLGETPOINTERVEXTPROC = _rpythonic_function_(		"PFNGLGETPOINTERVEXTPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

PFNGLINDEXPOINTEREXTPROC = _rpythonic_function_(		"PFNGLINDEXPOINTEREXTPROC", ctypes.c_void_p, [
	("C_type",		ctypes.c_uint),
	("stride",		ctypes.c_int),
	("count",		ctypes.c_int),
	("pointer",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLNORMALPOINTEREXTPROC = _rpythonic_function_(		"PFNGLNORMALPOINTEREXTPROC", ctypes.c_void_p, [
	("C_type",		ctypes.c_uint),
	("stride",		ctypes.c_int),
	("count",		ctypes.c_int),
	("pointer",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLTEXCOORDPOINTEREXTPROC = _rpythonic_function_(		"PFNGLTEXCOORDPOINTEREXTPROC", ctypes.c_void_p, [
	("size",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("stride",		ctypes.c_int),
	("count",		ctypes.c_int),
	("pointer",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLVERTEXPOINTEREXTPROC = _rpythonic_function_(		"PFNGLVERTEXPOINTEREXTPROC", ctypes.c_void_p, [
	("size",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("stride",		ctypes.c_int),
	("count",		ctypes.c_int),
	("pointer",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLBLENDEQUATIONEXTPROC = _rpythonic_function_(		"PFNGLBLENDEQUATIONEXTPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),] )

PFNGLSPRITEPARAMETERFSGIXPROC = _rpythonic_function_(		"PFNGLSPRITEPARAMETERFSGIXPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_float),] )

PFNGLSPRITEPARAMETERFVSGIXPROC = _rpythonic_function_(		"PFNGLSPRITEPARAMETERFVSGIXPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLSPRITEPARAMETERISGIXPROC = _rpythonic_function_(		"PFNGLSPRITEPARAMETERISGIXPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_int),] )

PFNGLSPRITEPARAMETERIVSGIXPROC = _rpythonic_function_(		"PFNGLSPRITEPARAMETERIVSGIXPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLPOINTPARAMETERFEXTPROC = _rpythonic_function_(		"PFNGLPOINTPARAMETERFEXTPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_float),] )

PFNGLPOINTPARAMETERFVEXTPROC = _rpythonic_function_(		"PFNGLPOINTPARAMETERFVEXTPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLPOINTPARAMETERFSGISPROC = _rpythonic_function_(		"PFNGLPOINTPARAMETERFSGISPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_float),] )

PFNGLPOINTPARAMETERFVSGISPROC = _rpythonic_function_(		"PFNGLPOINTPARAMETERFVSGISPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETINSTRUMENTSSGIXPROC = _rpythonic_function_(		"PFNGLGETINSTRUMENTSSGIXPROC", ctypes.c_int, [] )

PFNGLINSTRUMENTSBUFFERSGIXPROC = _rpythonic_function_(		"PFNGLINSTRUMENTSBUFFERSGIXPROC", ctypes.c_void_p, [
	("size",		ctypes.c_int),
	("buffer",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLPOLLINSTRUMENTSSGIXPROC = _rpythonic_function_(		"PFNGLPOLLINSTRUMENTSSGIXPROC", ctypes.c_int, [
	("marker_p",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLREADINSTRUMENTSSGIXPROC = _rpythonic_function_(		"PFNGLREADINSTRUMENTSSGIXPROC", ctypes.c_void_p, [
	("marker",		ctypes.c_int),] )

PFNGLSTARTINSTRUMENTSSGIXPROC = _rpythonic_function_(		"PFNGLSTARTINSTRUMENTSSGIXPROC", ctypes.c_void_p, [] )

PFNGLSTOPINSTRUMENTSSGIXPROC = _rpythonic_function_(		"PFNGLSTOPINSTRUMENTSSGIXPROC", ctypes.c_void_p, [
	("marker",		ctypes.c_int),] )

PFNGLFRAMEZOOMSGIXPROC = _rpythonic_function_(		"PFNGLFRAMEZOOMSGIXPROC", ctypes.c_void_p, [
	("factor",		ctypes.c_int),] )

PFNGLTAGSAMPLEBUFFERSGIXPROC = _rpythonic_function_(		"PFNGLTAGSAMPLEBUFFERSGIXPROC", ctypes.c_void_p, [] )

PFNGLDEFORMATIONMAP3DSGIXPROC = _rpythonic_function_(		"PFNGLDEFORMATIONMAP3DSGIXPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("u1",		ctypes.c_double),
	("u2",		ctypes.c_double),
	("ustride",		ctypes.c_int),
	("uorder",		ctypes.c_int),
	("v1",		ctypes.c_double),
	("v2",		ctypes.c_double),
	("vstride",		ctypes.c_int),
	("vorder",		ctypes.c_int),
	("w1",		ctypes.c_double),
	("w2",		ctypes.c_double),
	("wstride",		ctypes.c_int),
	("worder",		ctypes.c_int),
	("points",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLDEFORMATIONMAP3FSGIXPROC = _rpythonic_function_(		"PFNGLDEFORMATIONMAP3FSGIXPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("u1",		ctypes.c_float),
	("u2",		ctypes.c_float),
	("ustride",		ctypes.c_int),
	("uorder",		ctypes.c_int),
	("v1",		ctypes.c_float),
	("v2",		ctypes.c_float),
	("vstride",		ctypes.c_int),
	("vorder",		ctypes.c_int),
	("w1",		ctypes.c_float),
	("w2",		ctypes.c_float),
	("wstride",		ctypes.c_int),
	("worder",		ctypes.c_int),
	("points",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLDEFORMSGIXPROC = _rpythonic_function_(		"PFNGLDEFORMSGIXPROC", ctypes.c_void_p, [
	("mask",		ctypes.c_uint),] )

PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC = _rpythonic_function_(		"PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC", ctypes.c_void_p, [
	("mask",		ctypes.c_uint),] )

PFNGLREFERENCEPLANESGIXPROC = _rpythonic_function_(		"PFNGLREFERENCEPLANESGIXPROC", ctypes.c_void_p, [
	("equation",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLFLUSHRASTERSGIXPROC = _rpythonic_function_(		"PFNGLFLUSHRASTERSGIXPROC", ctypes.c_void_p, [] )

PFNGLFOGFUNCSGISPROC = _rpythonic_function_(		"PFNGLFOGFUNCSGISPROC", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("points",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETFOGFUNCSGISPROC = _rpythonic_function_(		"PFNGLGETFOGFUNCSGISPROC", ctypes.c_void_p, [
	("points",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLIMAGETRANSFORMPARAMETERIHPPROC = _rpythonic_function_(		"PFNGLIMAGETRANSFORMPARAMETERIHPPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_int),] )

PFNGLIMAGETRANSFORMPARAMETERFHPPROC = _rpythonic_function_(		"PFNGLIMAGETRANSFORMPARAMETERFHPPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_float),] )

PFNGLIMAGETRANSFORMPARAMETERIVHPPROC = _rpythonic_function_(		"PFNGLIMAGETRANSFORMPARAMETERIVHPPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLIMAGETRANSFORMPARAMETERFVHPPROC = _rpythonic_function_(		"PFNGLIMAGETRANSFORMPARAMETERFVHPPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC = _rpythonic_function_(		"PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC = _rpythonic_function_(		"PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLCOLORSUBTABLEEXTPROC = _rpythonic_function_(		"PFNGLCOLORSUBTABLEEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("start",		ctypes.c_int),
	("count",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLCOPYCOLORSUBTABLEEXTPROC = _rpythonic_function_(		"PFNGLCOPYCOLORSUBTABLEEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("start",		ctypes.c_int),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),] )

PFNGLHINTPGIPROC = _rpythonic_function_(		"PFNGLHINTPGIPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("mode",		ctypes.c_int),] )

PFNGLCOLORTABLEEXTPROC = _rpythonic_function_(		"PFNGLCOLORTABLEEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("internalFormat",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("table",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLGETCOLORTABLEEXTPROC = _rpythonic_function_(		"PFNGLGETCOLORTABLEEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLGETCOLORTABLEPARAMETERIVEXTPROC = _rpythonic_function_(		"PFNGLGETCOLORTABLEPARAMETERIVEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETCOLORTABLEPARAMETERFVEXTPROC = _rpythonic_function_(		"PFNGLGETCOLORTABLEPARAMETERFVEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETLISTPARAMETERFVSGIXPROC = _rpythonic_function_(		"PFNGLGETLISTPARAMETERFVSGIXPROC", ctypes.c_void_p, [
	("C_list",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETLISTPARAMETERIVSGIXPROC = _rpythonic_function_(		"PFNGLGETLISTPARAMETERIVSGIXPROC", ctypes.c_void_p, [
	("C_list",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLLISTPARAMETERFSGIXPROC = _rpythonic_function_(		"PFNGLLISTPARAMETERFSGIXPROC", ctypes.c_void_p, [
	("C_list",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_float),] )

PFNGLLISTPARAMETERFVSGIXPROC = _rpythonic_function_(		"PFNGLLISTPARAMETERFVSGIXPROC", ctypes.c_void_p, [
	("C_list",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLLISTPARAMETERISGIXPROC = _rpythonic_function_(		"PFNGLLISTPARAMETERISGIXPROC", ctypes.c_void_p, [
	("C_list",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_int),] )

PFNGLLISTPARAMETERIVSGIXPROC = _rpythonic_function_(		"PFNGLLISTPARAMETERIVSGIXPROC", ctypes.c_void_p, [
	("C_list",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLINDEXMATERIALEXTPROC = _rpythonic_function_(		"PFNGLINDEXMATERIALEXTPROC", ctypes.c_void_p, [
	("face",		ctypes.c_uint),
	("mode",		ctypes.c_uint),] )

PFNGLINDEXFUNCEXTPROC = _rpythonic_function_(		"PFNGLINDEXFUNCEXTPROC", ctypes.c_void_p, [
	("func",		ctypes.c_uint),
	("ref",		ctypes.c_float),] )

PFNGLLOCKARRAYSEXTPROC = _rpythonic_function_(		"PFNGLLOCKARRAYSEXTPROC", ctypes.c_void_p, [
	("first",		ctypes.c_int),
	("count",		ctypes.c_int),] )

PFNGLUNLOCKARRAYSEXTPROC = _rpythonic_function_(		"PFNGLUNLOCKARRAYSEXTPROC", ctypes.c_void_p, [] )

PFNGLCULLPARAMETERDVEXTPROC = _rpythonic_function_(		"PFNGLCULLPARAMETERDVEXTPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLCULLPARAMETERFVEXTPROC = _rpythonic_function_(		"PFNGLCULLPARAMETERFVEXTPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLFRAGMENTCOLORMATERIALSGIXPROC = _rpythonic_function_(		"PFNGLFRAGMENTCOLORMATERIALSGIXPROC", ctypes.c_void_p, [
	("face",		ctypes.c_uint),
	("mode",		ctypes.c_uint),] )

PFNGLFRAGMENTLIGHTFSGIXPROC = _rpythonic_function_(		"PFNGLFRAGMENTLIGHTFSGIXPROC", ctypes.c_void_p, [
	("light",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_float),] )

PFNGLFRAGMENTLIGHTFVSGIXPROC = _rpythonic_function_(		"PFNGLFRAGMENTLIGHTFVSGIXPROC", ctypes.c_void_p, [
	("light",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLFRAGMENTLIGHTISGIXPROC = _rpythonic_function_(		"PFNGLFRAGMENTLIGHTISGIXPROC", ctypes.c_void_p, [
	("light",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_int),] )

PFNGLFRAGMENTLIGHTIVSGIXPROC = _rpythonic_function_(		"PFNGLFRAGMENTLIGHTIVSGIXPROC", ctypes.c_void_p, [
	("light",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLFRAGMENTLIGHTMODELFSGIXPROC = _rpythonic_function_(		"PFNGLFRAGMENTLIGHTMODELFSGIXPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_float),] )

PFNGLFRAGMENTLIGHTMODELFVSGIXPROC = _rpythonic_function_(		"PFNGLFRAGMENTLIGHTMODELFVSGIXPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLFRAGMENTLIGHTMODELISGIXPROC = _rpythonic_function_(		"PFNGLFRAGMENTLIGHTMODELISGIXPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_int),] )

PFNGLFRAGMENTLIGHTMODELIVSGIXPROC = _rpythonic_function_(		"PFNGLFRAGMENTLIGHTMODELIVSGIXPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLFRAGMENTMATERIALFSGIXPROC = _rpythonic_function_(		"PFNGLFRAGMENTMATERIALFSGIXPROC", ctypes.c_void_p, [
	("face",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_float),] )

PFNGLFRAGMENTMATERIALFVSGIXPROC = _rpythonic_function_(		"PFNGLFRAGMENTMATERIALFVSGIXPROC", ctypes.c_void_p, [
	("face",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLFRAGMENTMATERIALISGIXPROC = _rpythonic_function_(		"PFNGLFRAGMENTMATERIALISGIXPROC", ctypes.c_void_p, [
	("face",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_int),] )

PFNGLFRAGMENTMATERIALIVSGIXPROC = _rpythonic_function_(		"PFNGLFRAGMENTMATERIALIVSGIXPROC", ctypes.c_void_p, [
	("face",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETFRAGMENTLIGHTFVSGIXPROC = _rpythonic_function_(		"PFNGLGETFRAGMENTLIGHTFVSGIXPROC", ctypes.c_void_p, [
	("light",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETFRAGMENTLIGHTIVSGIXPROC = _rpythonic_function_(		"PFNGLGETFRAGMENTLIGHTIVSGIXPROC", ctypes.c_void_p, [
	("light",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETFRAGMENTMATERIALFVSGIXPROC = _rpythonic_function_(		"PFNGLGETFRAGMENTMATERIALFVSGIXPROC", ctypes.c_void_p, [
	("face",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETFRAGMENTMATERIALIVSGIXPROC = _rpythonic_function_(		"PFNGLGETFRAGMENTMATERIALIVSGIXPROC", ctypes.c_void_p, [
	("face",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLLIGHTENVISGIXPROC = _rpythonic_function_(		"PFNGLLIGHTENVISGIXPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_int),] )

PFNGLDRAWRANGEELEMENTSEXTPROC = _rpythonic_function_(		"PFNGLDRAWRANGEELEMENTSEXTPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("start",		ctypes.c_uint),
	("end",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("indices",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLAPPLYTEXTUREEXTPROC = _rpythonic_function_(		"PFNGLAPPLYTEXTUREEXTPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),] )

PFNGLTEXTURELIGHTEXTPROC = _rpythonic_function_(		"PFNGLTEXTURELIGHTEXTPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),] )

PFNGLTEXTUREMATERIALEXTPROC = _rpythonic_function_(		"PFNGLTEXTUREMATERIALEXTPROC", ctypes.c_void_p, [
	("face",		ctypes.c_uint),
	("mode",		ctypes.c_uint),] )

PFNGLASYNCMARKERSGIXPROC = _rpythonic_function_(		"PFNGLASYNCMARKERSGIXPROC", ctypes.c_void_p, [
	("marker",		ctypes.c_uint),] )

PFNGLFINISHASYNCSGIXPROC = _rpythonic_function_(		"PFNGLFINISHASYNCSGIXPROC", ctypes.c_int, [
	("markerp",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLPOLLASYNCSGIXPROC = _rpythonic_function_(		"PFNGLPOLLASYNCSGIXPROC", ctypes.c_int, [
	("markerp",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLGENASYNCMARKERSSGIXPROC = _rpythonic_function_(		"PFNGLGENASYNCMARKERSSGIXPROC", ctypes.c_uint, [
	("C_range",		ctypes.c_int),] )

PFNGLDELETEASYNCMARKERSSGIXPROC = _rpythonic_function_(		"PFNGLDELETEASYNCMARKERSSGIXPROC", ctypes.c_void_p, [
	("marker",		ctypes.c_uint),
	("C_range",		ctypes.c_int),] )

PFNGLISASYNCMARKERSGIXPROC = _rpythonic_function_(		"PFNGLISASYNCMARKERSGIXPROC", ctypes.c_ubyte, [
	("marker",		ctypes.c_uint),] )

PFNGLVERTEXPOINTERVINTELPROC = _rpythonic_function_(		"PFNGLVERTEXPOINTERVINTELPROC", ctypes.c_void_p, [
	("size",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("pointer",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

PFNGLNORMALPOINTERVINTELPROC = _rpythonic_function_(		"PFNGLNORMALPOINTERVINTELPROC", ctypes.c_void_p, [
	("C_type",		ctypes.c_uint),
	("pointer",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

PFNGLCOLORPOINTERVINTELPROC = _rpythonic_function_(		"PFNGLCOLORPOINTERVINTELPROC", ctypes.c_void_p, [
	("size",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("pointer",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

PFNGLTEXCOORDPOINTERVINTELPROC = _rpythonic_function_(		"PFNGLTEXCOORDPOINTERVINTELPROC", ctypes.c_void_p, [
	("size",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("pointer",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

PFNGLPIXELTRANSFORMPARAMETERIEXTPROC = _rpythonic_function_(		"PFNGLPIXELTRANSFORMPARAMETERIEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_int),] )

PFNGLPIXELTRANSFORMPARAMETERFEXTPROC = _rpythonic_function_(		"PFNGLPIXELTRANSFORMPARAMETERFEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_float),] )

PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC = _rpythonic_function_(		"PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC = _rpythonic_function_(		"PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLSECONDARYCOLOR3BEXTPROC = _rpythonic_function_(		"PFNGLSECONDARYCOLOR3BEXTPROC", ctypes.c_void_p, [
	("red",		ctypes.c_char),
	("green",		ctypes.c_char),
	("blue",		ctypes.c_char),] )

PFNGLSECONDARYCOLOR3BVEXTPROC = _rpythonic_function_(		"PFNGLSECONDARYCOLOR3BVEXTPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLSECONDARYCOLOR3DEXTPROC = _rpythonic_function_(		"PFNGLSECONDARYCOLOR3DEXTPROC", ctypes.c_void_p, [
	("red",		ctypes.c_double),
	("green",		ctypes.c_double),
	("blue",		ctypes.c_double),] )

PFNGLSECONDARYCOLOR3DVEXTPROC = _rpythonic_function_(		"PFNGLSECONDARYCOLOR3DVEXTPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLSECONDARYCOLOR3FEXTPROC = _rpythonic_function_(		"PFNGLSECONDARYCOLOR3FEXTPROC", ctypes.c_void_p, [
	("red",		ctypes.c_float),
	("green",		ctypes.c_float),
	("blue",		ctypes.c_float),] )

PFNGLSECONDARYCOLOR3FVEXTPROC = _rpythonic_function_(		"PFNGLSECONDARYCOLOR3FVEXTPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLSECONDARYCOLOR3IEXTPROC = _rpythonic_function_(		"PFNGLSECONDARYCOLOR3IEXTPROC", ctypes.c_void_p, [
	("red",		ctypes.c_int),
	("green",		ctypes.c_int),
	("blue",		ctypes.c_int),] )

PFNGLSECONDARYCOLOR3IVEXTPROC = _rpythonic_function_(		"PFNGLSECONDARYCOLOR3IVEXTPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLSECONDARYCOLOR3SEXTPROC = _rpythonic_function_(		"PFNGLSECONDARYCOLOR3SEXTPROC", ctypes.c_void_p, [
	("red",		ctypes.c_short),
	("green",		ctypes.c_short),
	("blue",		ctypes.c_short),] )

PFNGLSECONDARYCOLOR3SVEXTPROC = _rpythonic_function_(		"PFNGLSECONDARYCOLOR3SVEXTPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_short)),] )

PFNGLSECONDARYCOLOR3UBEXTPROC = _rpythonic_function_(		"PFNGLSECONDARYCOLOR3UBEXTPROC", ctypes.c_void_p, [
	("red",		ctypes.c_ubyte),
	("green",		ctypes.c_ubyte),
	("blue",		ctypes.c_ubyte),] )

PFNGLSECONDARYCOLOR3UBVEXTPROC = _rpythonic_function_(		"PFNGLSECONDARYCOLOR3UBVEXTPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_ubyte)),] )

PFNGLSECONDARYCOLOR3UIEXTPROC = _rpythonic_function_(		"PFNGLSECONDARYCOLOR3UIEXTPROC", ctypes.c_void_p, [
	("red",		ctypes.c_uint),
	("green",		ctypes.c_uint),
	("blue",		ctypes.c_uint),] )

PFNGLSECONDARYCOLOR3UIVEXTPROC = _rpythonic_function_(		"PFNGLSECONDARYCOLOR3UIVEXTPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLSECONDARYCOLOR3USEXTPROC = _rpythonic_function_(		"PFNGLSECONDARYCOLOR3USEXTPROC", ctypes.c_void_p, [
	("red",		ctypes.c_ushort),
	("green",		ctypes.c_ushort),
	("blue",		ctypes.c_ushort),] )

PFNGLSECONDARYCOLOR3USVEXTPROC = _rpythonic_function_(		"PFNGLSECONDARYCOLOR3USVEXTPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_ushort)),] )

PFNGLSECONDARYCOLORPOINTEREXTPROC = _rpythonic_function_(		"PFNGLSECONDARYCOLORPOINTEREXTPROC", ctypes.c_void_p, [
	("size",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("stride",		ctypes.c_int),
	("pointer",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLTEXTURENORMALEXTPROC = _rpythonic_function_(		"PFNGLTEXTURENORMALEXTPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),] )

PFNGLMULTIDRAWARRAYSEXTPROC = _rpythonic_function_(		"PFNGLMULTIDRAWARRAYSEXTPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("first",		ctypes.POINTER(ctypes.c_int)),
	("count",		ctypes.POINTER(ctypes.c_int)),
	("primcount",		ctypes.c_int),] )

PFNGLMULTIDRAWELEMENTSEXTPROC = _rpythonic_function_(		"PFNGLMULTIDRAWELEMENTSEXTPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("count",		ctypes.POINTER(ctypes.c_int)),
	("C_type",		ctypes.c_uint),
	("indices",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("primcount",		ctypes.c_int),] )

PFNGLFOGCOORDFEXTPROC = _rpythonic_function_(		"PFNGLFOGCOORDFEXTPROC", ctypes.c_void_p, [
	("coord",		ctypes.c_float),] )

PFNGLFOGCOORDFVEXTPROC = _rpythonic_function_(		"PFNGLFOGCOORDFVEXTPROC", ctypes.c_void_p, [
	("coord",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLFOGCOORDDEXTPROC = _rpythonic_function_(		"PFNGLFOGCOORDDEXTPROC", ctypes.c_void_p, [
	("coord",		ctypes.c_double),] )

PFNGLFOGCOORDDVEXTPROC = _rpythonic_function_(		"PFNGLFOGCOORDDVEXTPROC", ctypes.c_void_p, [
	("coord",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLFOGCOORDPOINTEREXTPROC = _rpythonic_function_(		"PFNGLFOGCOORDPOINTEREXTPROC", ctypes.c_void_p, [
	("C_type",		ctypes.c_uint),
	("stride",		ctypes.c_int),
	("pointer",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLTANGENT3BEXTPROC = _rpythonic_function_(		"PFNGLTANGENT3BEXTPROC", ctypes.c_void_p, [
	("tx",		ctypes.c_char),
	("ty",		ctypes.c_char),
	("tz",		ctypes.c_char),] )

PFNGLTANGENT3BVEXTPROC = _rpythonic_function_(		"PFNGLTANGENT3BVEXTPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLTANGENT3DEXTPROC = _rpythonic_function_(		"PFNGLTANGENT3DEXTPROC", ctypes.c_void_p, [
	("tx",		ctypes.c_double),
	("ty",		ctypes.c_double),
	("tz",		ctypes.c_double),] )

PFNGLTANGENT3DVEXTPROC = _rpythonic_function_(		"PFNGLTANGENT3DVEXTPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLTANGENT3FEXTPROC = _rpythonic_function_(		"PFNGLTANGENT3FEXTPROC", ctypes.c_void_p, [
	("tx",		ctypes.c_float),
	("ty",		ctypes.c_float),
	("tz",		ctypes.c_float),] )

PFNGLTANGENT3FVEXTPROC = _rpythonic_function_(		"PFNGLTANGENT3FVEXTPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLTANGENT3IEXTPROC = _rpythonic_function_(		"PFNGLTANGENT3IEXTPROC", ctypes.c_void_p, [
	("tx",		ctypes.c_int),
	("ty",		ctypes.c_int),
	("tz",		ctypes.c_int),] )

PFNGLTANGENT3IVEXTPROC = _rpythonic_function_(		"PFNGLTANGENT3IVEXTPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLTANGENT3SEXTPROC = _rpythonic_function_(		"PFNGLTANGENT3SEXTPROC", ctypes.c_void_p, [
	("tx",		ctypes.c_short),
	("ty",		ctypes.c_short),
	("tz",		ctypes.c_short),] )

PFNGLTANGENT3SVEXTPROC = _rpythonic_function_(		"PFNGLTANGENT3SVEXTPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_short)),] )

PFNGLBINORMAL3BEXTPROC = _rpythonic_function_(		"PFNGLBINORMAL3BEXTPROC", ctypes.c_void_p, [
	("bx",		ctypes.c_char),
	("by",		ctypes.c_char),
	("bz",		ctypes.c_char),] )

PFNGLBINORMAL3BVEXTPROC = _rpythonic_function_(		"PFNGLBINORMAL3BVEXTPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLBINORMAL3DEXTPROC = _rpythonic_function_(		"PFNGLBINORMAL3DEXTPROC", ctypes.c_void_p, [
	("bx",		ctypes.c_double),
	("by",		ctypes.c_double),
	("bz",		ctypes.c_double),] )

PFNGLBINORMAL3DVEXTPROC = _rpythonic_function_(		"PFNGLBINORMAL3DVEXTPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLBINORMAL3FEXTPROC = _rpythonic_function_(		"PFNGLBINORMAL3FEXTPROC", ctypes.c_void_p, [
	("bx",		ctypes.c_float),
	("by",		ctypes.c_float),
	("bz",		ctypes.c_float),] )

PFNGLBINORMAL3FVEXTPROC = _rpythonic_function_(		"PFNGLBINORMAL3FVEXTPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLBINORMAL3IEXTPROC = _rpythonic_function_(		"PFNGLBINORMAL3IEXTPROC", ctypes.c_void_p, [
	("bx",		ctypes.c_int),
	("by",		ctypes.c_int),
	("bz",		ctypes.c_int),] )

PFNGLBINORMAL3IVEXTPROC = _rpythonic_function_(		"PFNGLBINORMAL3IVEXTPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLBINORMAL3SEXTPROC = _rpythonic_function_(		"PFNGLBINORMAL3SEXTPROC", ctypes.c_void_p, [
	("bx",		ctypes.c_short),
	("by",		ctypes.c_short),
	("bz",		ctypes.c_short),] )

PFNGLBINORMAL3SVEXTPROC = _rpythonic_function_(		"PFNGLBINORMAL3SVEXTPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_short)),] )

PFNGLTANGENTPOINTEREXTPROC = _rpythonic_function_(		"PFNGLTANGENTPOINTEREXTPROC", ctypes.c_void_p, [
	("C_type",		ctypes.c_uint),
	("stride",		ctypes.c_int),
	("pointer",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLBINORMALPOINTEREXTPROC = _rpythonic_function_(		"PFNGLBINORMALPOINTEREXTPROC", ctypes.c_void_p, [
	("C_type",		ctypes.c_uint),
	("stride",		ctypes.c_int),
	("pointer",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLFINISHTEXTURESUNXPROC = _rpythonic_function_(		"PFNGLFINISHTEXTURESUNXPROC", ctypes.c_void_p, [] )

PFNGLGLOBALALPHAFACTORBSUNPROC = _rpythonic_function_(		"PFNGLGLOBALALPHAFACTORBSUNPROC", ctypes.c_void_p, [
	("factor",		ctypes.c_char),] )

PFNGLGLOBALALPHAFACTORSSUNPROC = _rpythonic_function_(		"PFNGLGLOBALALPHAFACTORSSUNPROC", ctypes.c_void_p, [
	("factor",		ctypes.c_short),] )

PFNGLGLOBALALPHAFACTORISUNPROC = _rpythonic_function_(		"PFNGLGLOBALALPHAFACTORISUNPROC", ctypes.c_void_p, [
	("factor",		ctypes.c_int),] )

PFNGLGLOBALALPHAFACTORFSUNPROC = _rpythonic_function_(		"PFNGLGLOBALALPHAFACTORFSUNPROC", ctypes.c_void_p, [
	("factor",		ctypes.c_float),] )

PFNGLGLOBALALPHAFACTORDSUNPROC = _rpythonic_function_(		"PFNGLGLOBALALPHAFACTORDSUNPROC", ctypes.c_void_p, [
	("factor",		ctypes.c_double),] )

PFNGLGLOBALALPHAFACTORUBSUNPROC = _rpythonic_function_(		"PFNGLGLOBALALPHAFACTORUBSUNPROC", ctypes.c_void_p, [
	("factor",		ctypes.c_ubyte),] )

PFNGLGLOBALALPHAFACTORUSSUNPROC = _rpythonic_function_(		"PFNGLGLOBALALPHAFACTORUSSUNPROC", ctypes.c_void_p, [
	("factor",		ctypes.c_ushort),] )

PFNGLGLOBALALPHAFACTORUISUNPROC = _rpythonic_function_(		"PFNGLGLOBALALPHAFACTORUISUNPROC", ctypes.c_void_p, [
	("factor",		ctypes.c_uint),] )

PFNGLREPLACEMENTCODEUISUNPROC = _rpythonic_function_(		"PFNGLREPLACEMENTCODEUISUNPROC", ctypes.c_void_p, [
	("code",		ctypes.c_uint),] )

PFNGLREPLACEMENTCODEUSSUNPROC = _rpythonic_function_(		"PFNGLREPLACEMENTCODEUSSUNPROC", ctypes.c_void_p, [
	("code",		ctypes.c_ushort),] )

PFNGLREPLACEMENTCODEUBSUNPROC = _rpythonic_function_(		"PFNGLREPLACEMENTCODEUBSUNPROC", ctypes.c_void_p, [
	("code",		ctypes.c_ubyte),] )

PFNGLREPLACEMENTCODEUIVSUNPROC = _rpythonic_function_(		"PFNGLREPLACEMENTCODEUIVSUNPROC", ctypes.c_void_p, [
	("code",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLREPLACEMENTCODEUSVSUNPROC = _rpythonic_function_(		"PFNGLREPLACEMENTCODEUSVSUNPROC", ctypes.c_void_p, [
	("code",		ctypes.POINTER(ctypes.c_ushort)),] )

PFNGLREPLACEMENTCODEUBVSUNPROC = _rpythonic_function_(		"PFNGLREPLACEMENTCODEUBVSUNPROC", ctypes.c_void_p, [
	("code",		ctypes.POINTER(ctypes.c_ubyte)),] )

PFNGLREPLACEMENTCODEPOINTERSUNPROC = _rpythonic_function_(		"PFNGLREPLACEMENTCODEPOINTERSUNPROC", ctypes.c_void_p, [
	("C_type",		ctypes.c_uint),
	("stride",		ctypes.c_int),
	("pointer",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

PFNGLCOLOR4UBVERTEX2FSUNPROC = _rpythonic_function_(		"PFNGLCOLOR4UBVERTEX2FSUNPROC", ctypes.c_void_p, [
	("r",		ctypes.c_ubyte),
	("g",		ctypes.c_ubyte),
	("b",		ctypes.c_ubyte),
	("a",		ctypes.c_ubyte),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),] )

PFNGLCOLOR4UBVERTEX2FVSUNPROC = _rpythonic_function_(		"PFNGLCOLOR4UBVERTEX2FVSUNPROC", ctypes.c_void_p, [
	("c",		ctypes.POINTER(ctypes.c_ubyte)),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLCOLOR4UBVERTEX3FSUNPROC = _rpythonic_function_(		"PFNGLCOLOR4UBVERTEX3FSUNPROC", ctypes.c_void_p, [
	("r",		ctypes.c_ubyte),
	("g",		ctypes.c_ubyte),
	("b",		ctypes.c_ubyte),
	("a",		ctypes.c_ubyte),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

PFNGLCOLOR4UBVERTEX3FVSUNPROC = _rpythonic_function_(		"PFNGLCOLOR4UBVERTEX3FVSUNPROC", ctypes.c_void_p, [
	("c",		ctypes.POINTER(ctypes.c_ubyte)),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLCOLOR3FVERTEX3FSUNPROC = _rpythonic_function_(		"PFNGLCOLOR3FVERTEX3FSUNPROC", ctypes.c_void_p, [
	("r",		ctypes.c_float),
	("g",		ctypes.c_float),
	("b",		ctypes.c_float),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

PFNGLCOLOR3FVERTEX3FVSUNPROC = _rpythonic_function_(		"PFNGLCOLOR3FVERTEX3FVSUNPROC", ctypes.c_void_p, [
	("c",		ctypes.POINTER(ctypes.c_float)),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLNORMAL3FVERTEX3FSUNPROC = _rpythonic_function_(		"PFNGLNORMAL3FVERTEX3FSUNPROC", ctypes.c_void_p, [
	("nx",		ctypes.c_float),
	("ny",		ctypes.c_float),
	("nz",		ctypes.c_float),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

PFNGLNORMAL3FVERTEX3FVSUNPROC = _rpythonic_function_(		"PFNGLNORMAL3FVERTEX3FVSUNPROC", ctypes.c_void_p, [
	("n",		ctypes.POINTER(ctypes.c_float)),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC = _rpythonic_function_(		"PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC", ctypes.c_void_p, [
	("r",		ctypes.c_float),
	("g",		ctypes.c_float),
	("b",		ctypes.c_float),
	("a",		ctypes.c_float),
	("nx",		ctypes.c_float),
	("ny",		ctypes.c_float),
	("nz",		ctypes.c_float),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC = _rpythonic_function_(		"PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC", ctypes.c_void_p, [
	("c",		ctypes.POINTER(ctypes.c_float)),
	("n",		ctypes.POINTER(ctypes.c_float)),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLTEXCOORD2FVERTEX3FSUNPROC = _rpythonic_function_(		"PFNGLTEXCOORD2FVERTEX3FSUNPROC", ctypes.c_void_p, [
	("s",		ctypes.c_float),
	("t",		ctypes.c_float),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

PFNGLTEXCOORD2FVERTEX3FVSUNPROC = _rpythonic_function_(		"PFNGLTEXCOORD2FVERTEX3FVSUNPROC", ctypes.c_void_p, [
	("tc",		ctypes.POINTER(ctypes.c_float)),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLTEXCOORD4FVERTEX4FSUNPROC = _rpythonic_function_(		"PFNGLTEXCOORD4FVERTEX4FSUNPROC", ctypes.c_void_p, [
	("s",		ctypes.c_float),
	("t",		ctypes.c_float),
	("p",		ctypes.c_float),
	("q",		ctypes.c_float),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),
	("w",		ctypes.c_float),] )

PFNGLTEXCOORD4FVERTEX4FVSUNPROC = _rpythonic_function_(		"PFNGLTEXCOORD4FVERTEX4FVSUNPROC", ctypes.c_void_p, [
	("tc",		ctypes.POINTER(ctypes.c_float)),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC = _rpythonic_function_(		"PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC", ctypes.c_void_p, [
	("s",		ctypes.c_float),
	("t",		ctypes.c_float),
	("r",		ctypes.c_ubyte),
	("g",		ctypes.c_ubyte),
	("b",		ctypes.c_ubyte),
	("a",		ctypes.c_ubyte),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC = _rpythonic_function_(		"PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC", ctypes.c_void_p, [
	("tc",		ctypes.POINTER(ctypes.c_float)),
	("c",		ctypes.POINTER(ctypes.c_ubyte)),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC = _rpythonic_function_(		"PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC", ctypes.c_void_p, [
	("s",		ctypes.c_float),
	("t",		ctypes.c_float),
	("r",		ctypes.c_float),
	("g",		ctypes.c_float),
	("b",		ctypes.c_float),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC = _rpythonic_function_(		"PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC", ctypes.c_void_p, [
	("tc",		ctypes.POINTER(ctypes.c_float)),
	("c",		ctypes.POINTER(ctypes.c_float)),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC = _rpythonic_function_(		"PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC", ctypes.c_void_p, [
	("s",		ctypes.c_float),
	("t",		ctypes.c_float),
	("nx",		ctypes.c_float),
	("ny",		ctypes.c_float),
	("nz",		ctypes.c_float),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC = _rpythonic_function_(		"PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC", ctypes.c_void_p, [
	("tc",		ctypes.POINTER(ctypes.c_float)),
	("n",		ctypes.POINTER(ctypes.c_float)),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC = _rpythonic_function_(		"PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC", ctypes.c_void_p, [
	("s",		ctypes.c_float),
	("t",		ctypes.c_float),
	("r",		ctypes.c_float),
	("g",		ctypes.c_float),
	("b",		ctypes.c_float),
	("a",		ctypes.c_float),
	("nx",		ctypes.c_float),
	("ny",		ctypes.c_float),
	("nz",		ctypes.c_float),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC = _rpythonic_function_(		"PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC", ctypes.c_void_p, [
	("tc",		ctypes.POINTER(ctypes.c_float)),
	("c",		ctypes.POINTER(ctypes.c_float)),
	("n",		ctypes.POINTER(ctypes.c_float)),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC = _rpythonic_function_(		"PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC", ctypes.c_void_p, [
	("s",		ctypes.c_float),
	("t",		ctypes.c_float),
	("p",		ctypes.c_float),
	("q",		ctypes.c_float),
	("r",		ctypes.c_float),
	("g",		ctypes.c_float),
	("b",		ctypes.c_float),
	("a",		ctypes.c_float),
	("nx",		ctypes.c_float),
	("ny",		ctypes.c_float),
	("nz",		ctypes.c_float),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),
	("w",		ctypes.c_float),] )

PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC = _rpythonic_function_(		"PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC", ctypes.c_void_p, [
	("tc",		ctypes.POINTER(ctypes.c_float)),
	("c",		ctypes.POINTER(ctypes.c_float)),
	("n",		ctypes.POINTER(ctypes.c_float)),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC = _rpythonic_function_(		"PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC", ctypes.c_void_p, [
	("rc",		ctypes.c_uint),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC = _rpythonic_function_(		"PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC", ctypes.c_void_p, [
	("rc",		ctypes.POINTER(ctypes.c_uint)),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC = _rpythonic_function_(		"PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC", ctypes.c_void_p, [
	("rc",		ctypes.c_uint),
	("r",		ctypes.c_ubyte),
	("g",		ctypes.c_ubyte),
	("b",		ctypes.c_ubyte),
	("a",		ctypes.c_ubyte),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC = _rpythonic_function_(		"PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC", ctypes.c_void_p, [
	("rc",		ctypes.c_uint),
	("r",		ctypes.c_float),
	("g",		ctypes.c_float),
	("b",		ctypes.c_float),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC = _rpythonic_function_(		"PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC", ctypes.c_void_p, [
	("rc",		ctypes.POINTER(ctypes.c_uint)),
	("c",		ctypes.POINTER(ctypes.c_ubyte)),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC = _rpythonic_function_(		"PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC", ctypes.c_void_p, [
	("rc",		ctypes.POINTER(ctypes.c_uint)),
	("c",		ctypes.POINTER(ctypes.c_float)),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC = _rpythonic_function_(		"PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC", ctypes.c_void_p, [
	("rc",		ctypes.c_uint),
	("nx",		ctypes.c_float),
	("ny",		ctypes.c_float),
	("nz",		ctypes.c_float),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC = _rpythonic_function_(		"PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC", ctypes.c_void_p, [
	("rc",		ctypes.POINTER(ctypes.c_uint)),
	("n",		ctypes.POINTER(ctypes.c_float)),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC = _rpythonic_function_(		"PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC", ctypes.c_void_p, [
	("rc",		ctypes.c_uint),
	("r",		ctypes.c_float),
	("g",		ctypes.c_float),
	("b",		ctypes.c_float),
	("a",		ctypes.c_float),
	("nx",		ctypes.c_float),
	("ny",		ctypes.c_float),
	("nz",		ctypes.c_float),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC = _rpythonic_function_(		"PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC", ctypes.c_void_p, [
	("rc",		ctypes.POINTER(ctypes.c_uint)),
	("c",		ctypes.POINTER(ctypes.c_float)),
	("n",		ctypes.POINTER(ctypes.c_float)),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC = _rpythonic_function_(		"PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC", ctypes.c_void_p, [
	("rc",		ctypes.c_uint),
	("s",		ctypes.c_float),
	("t",		ctypes.c_float),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC = _rpythonic_function_(		"PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC", ctypes.c_void_p, [
	("rc",		ctypes.POINTER(ctypes.c_uint)),
	("tc",		ctypes.POINTER(ctypes.c_float)),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC = _rpythonic_function_(		"PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC", ctypes.c_void_p, [
	("rc",		ctypes.c_uint),
	("s",		ctypes.c_float),
	("t",		ctypes.c_float),
	("nx",		ctypes.c_float),
	("ny",		ctypes.c_float),
	("nz",		ctypes.c_float),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC = _rpythonic_function_(		"PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC", ctypes.c_void_p, [
	("rc",		ctypes.POINTER(ctypes.c_uint)),
	("tc",		ctypes.POINTER(ctypes.c_float)),
	("n",		ctypes.POINTER(ctypes.c_float)),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC = _rpythonic_function_(		"PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC", ctypes.c_void_p, [
	("rc",		ctypes.c_uint),
	("s",		ctypes.c_float),
	("t",		ctypes.c_float),
	("r",		ctypes.c_float),
	("g",		ctypes.c_float),
	("b",		ctypes.c_float),
	("a",		ctypes.c_float),
	("nx",		ctypes.c_float),
	("ny",		ctypes.c_float),
	("nz",		ctypes.c_float),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC = _rpythonic_function_(		"PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC", ctypes.c_void_p, [
	("rc",		ctypes.POINTER(ctypes.c_uint)),
	("tc",		ctypes.POINTER(ctypes.c_float)),
	("c",		ctypes.POINTER(ctypes.c_float)),
	("n",		ctypes.POINTER(ctypes.c_float)),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLBLENDFUNCSEPARATEEXTPROC = _rpythonic_function_(		"PFNGLBLENDFUNCSEPARATEEXTPROC", ctypes.c_void_p, [
	("sfactorRGB",		ctypes.c_uint),
	("dfactorRGB",		ctypes.c_uint),
	("sfactorAlpha",		ctypes.c_uint),
	("dfactorAlpha",		ctypes.c_uint),] )

PFNGLBLENDFUNCSEPARATEINGRPROC = _rpythonic_function_(		"PFNGLBLENDFUNCSEPARATEINGRPROC", ctypes.c_void_p, [
	("sfactorRGB",		ctypes.c_uint),
	("dfactorRGB",		ctypes.c_uint),
	("sfactorAlpha",		ctypes.c_uint),
	("dfactorAlpha",		ctypes.c_uint),] )

PFNGLVERTEXWEIGHTFEXTPROC = _rpythonic_function_(		"PFNGLVERTEXWEIGHTFEXTPROC", ctypes.c_void_p, [
	("weight",		ctypes.c_float),] )

PFNGLVERTEXWEIGHTFVEXTPROC = _rpythonic_function_(		"PFNGLVERTEXWEIGHTFVEXTPROC", ctypes.c_void_p, [
	("weight",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLVERTEXWEIGHTPOINTEREXTPROC = _rpythonic_function_(		"PFNGLVERTEXWEIGHTPOINTEREXTPROC", ctypes.c_void_p, [
	("size",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("stride",		ctypes.c_int),
	("pointer",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLFLUSHVERTEXARRAYRANGENVPROC = _rpythonic_function_(		"PFNGLFLUSHVERTEXARRAYRANGENVPROC", ctypes.c_void_p, [] )

PFNGLVERTEXARRAYRANGENVPROC = _rpythonic_function_(		"PFNGLVERTEXARRAYRANGENVPROC", ctypes.c_void_p, [
	("length",		ctypes.c_int),
	("pointer",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLCOMBINERPARAMETERFVNVPROC = _rpythonic_function_(		"PFNGLCOMBINERPARAMETERFVNVPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLCOMBINERPARAMETERFNVPROC = _rpythonic_function_(		"PFNGLCOMBINERPARAMETERFNVPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_float),] )

PFNGLCOMBINERPARAMETERIVNVPROC = _rpythonic_function_(		"PFNGLCOMBINERPARAMETERIVNVPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLCOMBINERPARAMETERINVPROC = _rpythonic_function_(		"PFNGLCOMBINERPARAMETERINVPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_int),] )

PFNGLCOMBINERINPUTNVPROC = _rpythonic_function_(		"PFNGLCOMBINERINPUTNVPROC", ctypes.c_void_p, [
	("stage",		ctypes.c_uint),
	("portion",		ctypes.c_uint),
	("variable",		ctypes.c_uint),
	("input",		ctypes.c_uint),
	("mapping",		ctypes.c_uint),
	("componentUsage",		ctypes.c_uint),] )

PFNGLCOMBINEROUTPUTNVPROC = _rpythonic_function_(		"PFNGLCOMBINEROUTPUTNVPROC", ctypes.c_void_p, [
	("stage",		ctypes.c_uint),
	("portion",		ctypes.c_uint),
	("abOutput",		ctypes.c_uint),
	("cdOutput",		ctypes.c_uint),
	("sumOutput",		ctypes.c_uint),
	("scale",		ctypes.c_uint),
	("bias",		ctypes.c_uint),
	("abDotProduct",		ctypes.c_ubyte),
	("cdDotProduct",		ctypes.c_ubyte),
	("muxSum",		ctypes.c_ubyte),] )

PFNGLFINALCOMBINERINPUTNVPROC = _rpythonic_function_(		"PFNGLFINALCOMBINERINPUTNVPROC", ctypes.c_void_p, [
	("variable",		ctypes.c_uint),
	("input",		ctypes.c_uint),
	("mapping",		ctypes.c_uint),
	("componentUsage",		ctypes.c_uint),] )

PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC = _rpythonic_function_(		"PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC", ctypes.c_void_p, [
	("stage",		ctypes.c_uint),
	("portion",		ctypes.c_uint),
	("variable",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC = _rpythonic_function_(		"PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC", ctypes.c_void_p, [
	("stage",		ctypes.c_uint),
	("portion",		ctypes.c_uint),
	("variable",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC = _rpythonic_function_(		"PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC", ctypes.c_void_p, [
	("variable",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC = _rpythonic_function_(		"PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC", ctypes.c_void_p, [
	("stage",		ctypes.c_uint),
	("portion",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC = _rpythonic_function_(		"PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC", ctypes.c_void_p, [
	("stage",		ctypes.c_uint),
	("portion",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC = _rpythonic_function_(		"PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC", ctypes.c_void_p, [
	("variable",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLRESIZEBUFFERSMESAPROC = _rpythonic_function_(		"PFNGLRESIZEBUFFERSMESAPROC", ctypes.c_void_p, [] )

PFNGLWINDOWPOS2DMESAPROC = _rpythonic_function_(		"PFNGLWINDOWPOS2DMESAPROC", ctypes.c_void_p, [
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),] )

PFNGLWINDOWPOS2DVMESAPROC = _rpythonic_function_(		"PFNGLWINDOWPOS2DVMESAPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLWINDOWPOS2FMESAPROC = _rpythonic_function_(		"PFNGLWINDOWPOS2FMESAPROC", ctypes.c_void_p, [
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),] )

PFNGLWINDOWPOS2FVMESAPROC = _rpythonic_function_(		"PFNGLWINDOWPOS2FVMESAPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLWINDOWPOS2IMESAPROC = _rpythonic_function_(		"PFNGLWINDOWPOS2IMESAPROC", ctypes.c_void_p, [
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

PFNGLWINDOWPOS2IVMESAPROC = _rpythonic_function_(		"PFNGLWINDOWPOS2IVMESAPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLWINDOWPOS2SMESAPROC = _rpythonic_function_(		"PFNGLWINDOWPOS2SMESAPROC", ctypes.c_void_p, [
	("x",		ctypes.c_short),
	("y",		ctypes.c_short),] )

PFNGLWINDOWPOS2SVMESAPROC = _rpythonic_function_(		"PFNGLWINDOWPOS2SVMESAPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_short)),] )

PFNGLWINDOWPOS3DMESAPROC = _rpythonic_function_(		"PFNGLWINDOWPOS3DMESAPROC", ctypes.c_void_p, [
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("z",		ctypes.c_double),] )

PFNGLWINDOWPOS3DVMESAPROC = _rpythonic_function_(		"PFNGLWINDOWPOS3DVMESAPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLWINDOWPOS3FMESAPROC = _rpythonic_function_(		"PFNGLWINDOWPOS3FMESAPROC", ctypes.c_void_p, [
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

PFNGLWINDOWPOS3FVMESAPROC = _rpythonic_function_(		"PFNGLWINDOWPOS3FVMESAPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLWINDOWPOS3IMESAPROC = _rpythonic_function_(		"PFNGLWINDOWPOS3IMESAPROC", ctypes.c_void_p, [
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("z",		ctypes.c_int),] )

PFNGLWINDOWPOS3IVMESAPROC = _rpythonic_function_(		"PFNGLWINDOWPOS3IVMESAPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLWINDOWPOS3SMESAPROC = _rpythonic_function_(		"PFNGLWINDOWPOS3SMESAPROC", ctypes.c_void_p, [
	("x",		ctypes.c_short),
	("y",		ctypes.c_short),
	("z",		ctypes.c_short),] )

PFNGLWINDOWPOS3SVMESAPROC = _rpythonic_function_(		"PFNGLWINDOWPOS3SVMESAPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_short)),] )

PFNGLWINDOWPOS4DMESAPROC = _rpythonic_function_(		"PFNGLWINDOWPOS4DMESAPROC", ctypes.c_void_p, [
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("z",		ctypes.c_double),
	("w",		ctypes.c_double),] )

PFNGLWINDOWPOS4DVMESAPROC = _rpythonic_function_(		"PFNGLWINDOWPOS4DVMESAPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLWINDOWPOS4FMESAPROC = _rpythonic_function_(		"PFNGLWINDOWPOS4FMESAPROC", ctypes.c_void_p, [
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),
	("w",		ctypes.c_float),] )

PFNGLWINDOWPOS4FVMESAPROC = _rpythonic_function_(		"PFNGLWINDOWPOS4FVMESAPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLWINDOWPOS4IMESAPROC = _rpythonic_function_(		"PFNGLWINDOWPOS4IMESAPROC", ctypes.c_void_p, [
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("z",		ctypes.c_int),
	("w",		ctypes.c_int),] )

PFNGLWINDOWPOS4IVMESAPROC = _rpythonic_function_(		"PFNGLWINDOWPOS4IVMESAPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLWINDOWPOS4SMESAPROC = _rpythonic_function_(		"PFNGLWINDOWPOS4SMESAPROC", ctypes.c_void_p, [
	("x",		ctypes.c_short),
	("y",		ctypes.c_short),
	("z",		ctypes.c_short),
	("w",		ctypes.c_short),] )

PFNGLWINDOWPOS4SVMESAPROC = _rpythonic_function_(		"PFNGLWINDOWPOS4SVMESAPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_short)),] )

PFNGLMULTIMODEDRAWARRAYSIBMPROC = _rpythonic_function_(		"PFNGLMULTIMODEDRAWARRAYSIBMPROC", ctypes.c_void_p, [
	("mode",		ctypes.POINTER(ctypes.c_uint)),
	("first",		ctypes.POINTER(ctypes.c_int)),
	("count",		ctypes.POINTER(ctypes.c_int)),
	("primcount",		ctypes.c_int),
	("modestride",		ctypes.c_int),] )

PFNGLMULTIMODEDRAWELEMENTSIBMPROC = _rpythonic_function_(		"PFNGLMULTIMODEDRAWELEMENTSIBMPROC", ctypes.c_void_p, [
	("mode",		ctypes.POINTER(ctypes.c_uint)),
	("count",		ctypes.POINTER(ctypes.c_int)),
	("C_type",		ctypes.c_uint),
	("indices",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("primcount",		ctypes.c_int),
	("modestride",		ctypes.c_int),] )

PFNGLCOLORPOINTERLISTIBMPROC = _rpythonic_function_(		"PFNGLCOLORPOINTERLISTIBMPROC", ctypes.c_void_p, [
	("size",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("stride",		ctypes.c_int),
	("pointer",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("ptrstride",		ctypes.c_int),] )

PFNGLSECONDARYCOLORPOINTERLISTIBMPROC = _rpythonic_function_(		"PFNGLSECONDARYCOLORPOINTERLISTIBMPROC", ctypes.c_void_p, [
	("size",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("stride",		ctypes.c_int),
	("pointer",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("ptrstride",		ctypes.c_int),] )

PFNGLEDGEFLAGPOINTERLISTIBMPROC = _rpythonic_function_(		"PFNGLEDGEFLAGPOINTERLISTIBMPROC", ctypes.c_void_p, [
	("stride",		ctypes.c_int),
	("pointer",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("ptrstride",		ctypes.c_int),] )

PFNGLFOGCOORDPOINTERLISTIBMPROC = _rpythonic_function_(		"PFNGLFOGCOORDPOINTERLISTIBMPROC", ctypes.c_void_p, [
	("C_type",		ctypes.c_uint),
	("stride",		ctypes.c_int),
	("pointer",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("ptrstride",		ctypes.c_int),] )

PFNGLINDEXPOINTERLISTIBMPROC = _rpythonic_function_(		"PFNGLINDEXPOINTERLISTIBMPROC", ctypes.c_void_p, [
	("C_type",		ctypes.c_uint),
	("stride",		ctypes.c_int),
	("pointer",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("ptrstride",		ctypes.c_int),] )

PFNGLNORMALPOINTERLISTIBMPROC = _rpythonic_function_(		"PFNGLNORMALPOINTERLISTIBMPROC", ctypes.c_void_p, [
	("C_type",		ctypes.c_uint),
	("stride",		ctypes.c_int),
	("pointer",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("ptrstride",		ctypes.c_int),] )

PFNGLTEXCOORDPOINTERLISTIBMPROC = _rpythonic_function_(		"PFNGLTEXCOORDPOINTERLISTIBMPROC", ctypes.c_void_p, [
	("size",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("stride",		ctypes.c_int),
	("pointer",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("ptrstride",		ctypes.c_int),] )

PFNGLVERTEXPOINTERLISTIBMPROC = _rpythonic_function_(		"PFNGLVERTEXPOINTERLISTIBMPROC", ctypes.c_void_p, [
	("size",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("stride",		ctypes.c_int),
	("pointer",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("ptrstride",		ctypes.c_int),] )

PFNGLTBUFFERMASK3DFXPROC = _rpythonic_function_(		"PFNGLTBUFFERMASK3DFXPROC", ctypes.c_void_p, [
	("mask",		ctypes.c_uint),] )

PFNGLSAMPLEMASKEXTPROC = _rpythonic_function_(		"PFNGLSAMPLEMASKEXTPROC", ctypes.c_void_p, [
	("value",		ctypes.c_float),
	("invert",		ctypes.c_ubyte),] )

PFNGLSAMPLEPATTERNEXTPROC = _rpythonic_function_(		"PFNGLSAMPLEPATTERNEXTPROC", ctypes.c_void_p, [
	("pattern",		ctypes.c_uint),] )

PFNGLTEXTURECOLORMASKSGISPROC = _rpythonic_function_(		"PFNGLTEXTURECOLORMASKSGISPROC", ctypes.c_void_p, [
	("red",		ctypes.c_ubyte),
	("green",		ctypes.c_ubyte),
	("blue",		ctypes.c_ubyte),
	("alpha",		ctypes.c_ubyte),] )

PFNGLIGLOOINTERFACESGIXPROC = _rpythonic_function_(		"PFNGLIGLOOINTERFACESGIXPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLDELETEFENCESNVPROC = _rpythonic_function_(		"PFNGLDELETEFENCESNVPROC", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("fences",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLGENFENCESNVPROC = _rpythonic_function_(		"PFNGLGENFENCESNVPROC", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("fences",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLISFENCENVPROC = _rpythonic_function_(		"PFNGLISFENCENVPROC", ctypes.c_ubyte, [
	("fence",		ctypes.c_uint),] )

PFNGLTESTFENCENVPROC = _rpythonic_function_(		"PFNGLTESTFENCENVPROC", ctypes.c_ubyte, [
	("fence",		ctypes.c_uint),] )

PFNGLGETFENCEIVNVPROC = _rpythonic_function_(		"PFNGLGETFENCEIVNVPROC", ctypes.c_void_p, [
	("fence",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLFINISHFENCENVPROC = _rpythonic_function_(		"PFNGLFINISHFENCENVPROC", ctypes.c_void_p, [
	("fence",		ctypes.c_uint),] )

PFNGLSETFENCENVPROC = _rpythonic_function_(		"PFNGLSETFENCENVPROC", ctypes.c_void_p, [
	("fence",		ctypes.c_uint),
	("condition",		ctypes.c_uint),] )

PFNGLMAPCONTROLPOINTSNVPROC = _rpythonic_function_(		"PFNGLMAPCONTROLPOINTSNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("ustride",		ctypes.c_int),
	("vstride",		ctypes.c_int),
	("uorder",		ctypes.c_int),
	("vorder",		ctypes.c_int),
	("packed",		ctypes.c_ubyte),
	("points",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLMAPPARAMETERIVNVPROC = _rpythonic_function_(		"PFNGLMAPPARAMETERIVNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLMAPPARAMETERFVNVPROC = _rpythonic_function_(		"PFNGLMAPPARAMETERFVNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETMAPCONTROLPOINTSNVPROC = _rpythonic_function_(		"PFNGLGETMAPCONTROLPOINTSNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("ustride",		ctypes.c_int),
	("vstride",		ctypes.c_int),
	("packed",		ctypes.c_ubyte),
	("points",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLGETMAPPARAMETERIVNVPROC = _rpythonic_function_(		"PFNGLGETMAPPARAMETERIVNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETMAPPARAMETERFVNVPROC = _rpythonic_function_(		"PFNGLGETMAPPARAMETERFVNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETMAPATTRIBPARAMETERIVNVPROC = _rpythonic_function_(		"PFNGLGETMAPATTRIBPARAMETERIVNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETMAPATTRIBPARAMETERFVNVPROC = _rpythonic_function_(		"PFNGLGETMAPATTRIBPARAMETERFVNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLEVALMAPSNVPROC = _rpythonic_function_(		"PFNGLEVALMAPSNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("mode",		ctypes.c_uint),] )

PFNGLCOMBINERSTAGEPARAMETERFVNVPROC = _rpythonic_function_(		"PFNGLCOMBINERSTAGEPARAMETERFVNVPROC", ctypes.c_void_p, [
	("stage",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC = _rpythonic_function_(		"PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC", ctypes.c_void_p, [
	("stage",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLAREPROGRAMSRESIDENTNVPROC = _rpythonic_function_(		"PFNGLAREPROGRAMSRESIDENTNVPROC", ctypes.c_ubyte, [
	("n",		ctypes.c_int),
	("programs",		ctypes.POINTER(ctypes.c_uint)),
	("residences",		ctypes.POINTER(ctypes.c_ubyte)),] )

PFNGLBINDPROGRAMNVPROC = _rpythonic_function_(		"PFNGLBINDPROGRAMNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("C_id",		ctypes.c_uint),] )

PFNGLDELETEPROGRAMSNVPROC = _rpythonic_function_(		"PFNGLDELETEPROGRAMSNVPROC", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("programs",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLEXECUTEPROGRAMNVPROC = _rpythonic_function_(		"PFNGLEXECUTEPROGRAMNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("C_id",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGENPROGRAMSNVPROC = _rpythonic_function_(		"PFNGLGENPROGRAMSNVPROC", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("programs",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLGETPROGRAMPARAMETERDVNVPROC = _rpythonic_function_(		"PFNGLGETPROGRAMPARAMETERDVNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLGETPROGRAMPARAMETERFVNVPROC = _rpythonic_function_(		"PFNGLGETPROGRAMPARAMETERFVNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETPROGRAMIVNVPROC = _rpythonic_function_(		"PFNGLGETPROGRAMIVNVPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETPROGRAMSTRINGNVPROC = _rpythonic_function_(		"PFNGLGETPROGRAMSTRINGNVPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("program",		ctypes.POINTER(ctypes.c_ubyte)),] )

PFNGLGETTRACKMATRIXIVNVPROC = _rpythonic_function_(		"PFNGLGETTRACKMATRIXIVNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("address",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETVERTEXATTRIBDVNVPROC = _rpythonic_function_(		"PFNGLGETVERTEXATTRIBDVNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLGETVERTEXATTRIBFVNVPROC = _rpythonic_function_(		"PFNGLGETVERTEXATTRIBFVNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETVERTEXATTRIBIVNVPROC = _rpythonic_function_(		"PFNGLGETVERTEXATTRIBIVNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETVERTEXATTRIBPOINTERVNVPROC = _rpythonic_function_(		"PFNGLGETVERTEXATTRIBPOINTERVNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("pointer",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

PFNGLISPROGRAMNVPROC = _rpythonic_function_(		"PFNGLISPROGRAMNVPROC", ctypes.c_ubyte, [
	("C_id",		ctypes.c_uint),] )

PFNGLLOADPROGRAMNVPROC = _rpythonic_function_(		"PFNGLLOADPROGRAMNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("C_id",		ctypes.c_uint),
	("C_len",		ctypes.c_int),
	("program",		ctypes.POINTER(ctypes.c_ubyte)),] )

PFNGLPROGRAMPARAMETER4DNVPROC = _rpythonic_function_(		"PFNGLPROGRAMPARAMETER4DNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("z",		ctypes.c_double),
	("w",		ctypes.c_double),] )

PFNGLPROGRAMPARAMETER4DVNVPROC = _rpythonic_function_(		"PFNGLPROGRAMPARAMETER4DVNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLPROGRAMPARAMETER4FNVPROC = _rpythonic_function_(		"PFNGLPROGRAMPARAMETER4FNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),
	("w",		ctypes.c_float),] )

PFNGLPROGRAMPARAMETER4FVNVPROC = _rpythonic_function_(		"PFNGLPROGRAMPARAMETER4FVNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLPROGRAMPARAMETERS4DVNVPROC = _rpythonic_function_(		"PFNGLPROGRAMPARAMETERS4DVNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLPROGRAMPARAMETERS4FVNVPROC = _rpythonic_function_(		"PFNGLPROGRAMPARAMETERS4FVNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLREQUESTRESIDENTPROGRAMSNVPROC = _rpythonic_function_(		"PFNGLREQUESTRESIDENTPROGRAMSNVPROC", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("programs",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLTRACKMATRIXNVPROC = _rpythonic_function_(		"PFNGLTRACKMATRIXNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("address",		ctypes.c_uint),
	("matrix",		ctypes.c_uint),
	("transform",		ctypes.c_uint),] )

PFNGLVERTEXATTRIBPOINTERNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBPOINTERNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("fsize",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("stride",		ctypes.c_int),
	("pointer",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLVERTEXATTRIB1DNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB1DNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_double),] )

PFNGLVERTEXATTRIB1DVNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB1DVNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLVERTEXATTRIB1FNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB1FNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_float),] )

PFNGLVERTEXATTRIB1FVNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB1FVNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLVERTEXATTRIB1SNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB1SNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_short),] )

PFNGLVERTEXATTRIB1SVNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB1SVNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_short)),] )

PFNGLVERTEXATTRIB2DNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB2DNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),] )

PFNGLVERTEXATTRIB2DVNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB2DVNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLVERTEXATTRIB2FNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB2FNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),] )

PFNGLVERTEXATTRIB2FVNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB2FVNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLVERTEXATTRIB2SNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB2SNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_short),
	("y",		ctypes.c_short),] )

PFNGLVERTEXATTRIB2SVNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB2SVNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_short)),] )

PFNGLVERTEXATTRIB3DNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB3DNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("z",		ctypes.c_double),] )

PFNGLVERTEXATTRIB3DVNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB3DVNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLVERTEXATTRIB3FNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB3FNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

PFNGLVERTEXATTRIB3FVNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB3FVNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLVERTEXATTRIB3SNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB3SNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_short),
	("y",		ctypes.c_short),
	("z",		ctypes.c_short),] )

PFNGLVERTEXATTRIB3SVNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB3SVNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_short)),] )

PFNGLVERTEXATTRIB4DNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB4DNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("z",		ctypes.c_double),
	("w",		ctypes.c_double),] )

PFNGLVERTEXATTRIB4DVNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB4DVNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLVERTEXATTRIB4FNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB4FNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),
	("w",		ctypes.c_float),] )

PFNGLVERTEXATTRIB4FVNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB4FVNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLVERTEXATTRIB4SNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB4SNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_short),
	("y",		ctypes.c_short),
	("z",		ctypes.c_short),
	("w",		ctypes.c_short),] )

PFNGLVERTEXATTRIB4SVNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB4SVNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_short)),] )

PFNGLVERTEXATTRIB4UBNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB4UBNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_ubyte),
	("y",		ctypes.c_ubyte),
	("z",		ctypes.c_ubyte),
	("w",		ctypes.c_ubyte),] )

PFNGLVERTEXATTRIB4UBVNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB4UBVNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_ubyte)),] )

PFNGLVERTEXATTRIBS1DVNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBS1DVNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLVERTEXATTRIBS1FVNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBS1FVNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLVERTEXATTRIBS1SVNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBS1SVNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("v",		ctypes.POINTER(ctypes.c_short)),] )

PFNGLVERTEXATTRIBS2DVNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBS2DVNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLVERTEXATTRIBS2FVNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBS2FVNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLVERTEXATTRIBS2SVNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBS2SVNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("v",		ctypes.POINTER(ctypes.c_short)),] )

PFNGLVERTEXATTRIBS3DVNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBS3DVNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLVERTEXATTRIBS3FVNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBS3FVNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLVERTEXATTRIBS3SVNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBS3SVNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("v",		ctypes.POINTER(ctypes.c_short)),] )

PFNGLVERTEXATTRIBS4DVNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBS4DVNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLVERTEXATTRIBS4FVNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBS4FVNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLVERTEXATTRIBS4SVNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBS4SVNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("v",		ctypes.POINTER(ctypes.c_short)),] )

PFNGLVERTEXATTRIBS4UBVNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBS4UBVNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("v",		ctypes.POINTER(ctypes.c_ubyte)),] )

PFNGLTEXBUMPPARAMETERIVATIPROC = _rpythonic_function_(		"PFNGLTEXBUMPPARAMETERIVATIPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("param",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLTEXBUMPPARAMETERFVATIPROC = _rpythonic_function_(		"PFNGLTEXBUMPPARAMETERFVATIPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("param",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETTEXBUMPPARAMETERIVATIPROC = _rpythonic_function_(		"PFNGLGETTEXBUMPPARAMETERIVATIPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("param",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETTEXBUMPPARAMETERFVATIPROC = _rpythonic_function_(		"PFNGLGETTEXBUMPPARAMETERFVATIPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("param",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGENFRAGMENTSHADERSATIPROC = _rpythonic_function_(		"PFNGLGENFRAGMENTSHADERSATIPROC", ctypes.c_uint, [
	("C_range",		ctypes.c_uint),] )

PFNGLBINDFRAGMENTSHADERATIPROC = _rpythonic_function_(		"PFNGLBINDFRAGMENTSHADERATIPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),] )

PFNGLDELETEFRAGMENTSHADERATIPROC = _rpythonic_function_(		"PFNGLDELETEFRAGMENTSHADERATIPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),] )

PFNGLBEGINFRAGMENTSHADERATIPROC = _rpythonic_function_(		"PFNGLBEGINFRAGMENTSHADERATIPROC", ctypes.c_void_p, [] )

PFNGLENDFRAGMENTSHADERATIPROC = _rpythonic_function_(		"PFNGLENDFRAGMENTSHADERATIPROC", ctypes.c_void_p, [] )

PFNGLPASSTEXCOORDATIPROC = _rpythonic_function_(		"PFNGLPASSTEXCOORDATIPROC", ctypes.c_void_p, [
	("dst",		ctypes.c_uint),
	("coord",		ctypes.c_uint),
	("swizzle",		ctypes.c_uint),] )

PFNGLSAMPLEMAPATIPROC = _rpythonic_function_(		"PFNGLSAMPLEMAPATIPROC", ctypes.c_void_p, [
	("dst",		ctypes.c_uint),
	("interp",		ctypes.c_uint),
	("swizzle",		ctypes.c_uint),] )

PFNGLCOLORFRAGMENTOP1ATIPROC = _rpythonic_function_(		"PFNGLCOLORFRAGMENTOP1ATIPROC", ctypes.c_void_p, [
	("op",		ctypes.c_uint),
	("dst",		ctypes.c_uint),
	("dstMask",		ctypes.c_uint),
	("dstMod",		ctypes.c_uint),
	("arg1",		ctypes.c_uint),
	("arg1Rep",		ctypes.c_uint),
	("arg1Mod",		ctypes.c_uint),] )

PFNGLCOLORFRAGMENTOP2ATIPROC = _rpythonic_function_(		"PFNGLCOLORFRAGMENTOP2ATIPROC", ctypes.c_void_p, [
	("op",		ctypes.c_uint),
	("dst",		ctypes.c_uint),
	("dstMask",		ctypes.c_uint),
	("dstMod",		ctypes.c_uint),
	("arg1",		ctypes.c_uint),
	("arg1Rep",		ctypes.c_uint),
	("arg1Mod",		ctypes.c_uint),
	("arg2",		ctypes.c_uint),
	("arg2Rep",		ctypes.c_uint),
	("arg2Mod",		ctypes.c_uint),] )

PFNGLCOLORFRAGMENTOP3ATIPROC = _rpythonic_function_(		"PFNGLCOLORFRAGMENTOP3ATIPROC", ctypes.c_void_p, [
	("op",		ctypes.c_uint),
	("dst",		ctypes.c_uint),
	("dstMask",		ctypes.c_uint),
	("dstMod",		ctypes.c_uint),
	("arg1",		ctypes.c_uint),
	("arg1Rep",		ctypes.c_uint),
	("arg1Mod",		ctypes.c_uint),
	("arg2",		ctypes.c_uint),
	("arg2Rep",		ctypes.c_uint),
	("arg2Mod",		ctypes.c_uint),
	("arg3",		ctypes.c_uint),
	("arg3Rep",		ctypes.c_uint),
	("arg3Mod",		ctypes.c_uint),] )

PFNGLALPHAFRAGMENTOP1ATIPROC = _rpythonic_function_(		"PFNGLALPHAFRAGMENTOP1ATIPROC", ctypes.c_void_p, [
	("op",		ctypes.c_uint),
	("dst",		ctypes.c_uint),
	("dstMod",		ctypes.c_uint),
	("arg1",		ctypes.c_uint),
	("arg1Rep",		ctypes.c_uint),
	("arg1Mod",		ctypes.c_uint),] )

PFNGLALPHAFRAGMENTOP2ATIPROC = _rpythonic_function_(		"PFNGLALPHAFRAGMENTOP2ATIPROC", ctypes.c_void_p, [
	("op",		ctypes.c_uint),
	("dst",		ctypes.c_uint),
	("dstMod",		ctypes.c_uint),
	("arg1",		ctypes.c_uint),
	("arg1Rep",		ctypes.c_uint),
	("arg1Mod",		ctypes.c_uint),
	("arg2",		ctypes.c_uint),
	("arg2Rep",		ctypes.c_uint),
	("arg2Mod",		ctypes.c_uint),] )

PFNGLALPHAFRAGMENTOP3ATIPROC = _rpythonic_function_(		"PFNGLALPHAFRAGMENTOP3ATIPROC", ctypes.c_void_p, [
	("op",		ctypes.c_uint),
	("dst",		ctypes.c_uint),
	("dstMod",		ctypes.c_uint),
	("arg1",		ctypes.c_uint),
	("arg1Rep",		ctypes.c_uint),
	("arg1Mod",		ctypes.c_uint),
	("arg2",		ctypes.c_uint),
	("arg2Rep",		ctypes.c_uint),
	("arg2Mod",		ctypes.c_uint),
	("arg3",		ctypes.c_uint),
	("arg3Rep",		ctypes.c_uint),
	("arg3Mod",		ctypes.c_uint),] )

PFNGLSETFRAGMENTSHADERCONSTANTATIPROC = _rpythonic_function_(		"PFNGLSETFRAGMENTSHADERCONSTANTATIPROC", ctypes.c_void_p, [
	("dst",		ctypes.c_uint),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLPNTRIANGLESIATIPROC = _rpythonic_function_(		"PFNGLPNTRIANGLESIATIPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_int),] )

PFNGLPNTRIANGLESFATIPROC = _rpythonic_function_(		"PFNGLPNTRIANGLESFATIPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_float),] )

PFNGLNEWOBJECTBUFFERATIPROC = _rpythonic_function_(		"PFNGLNEWOBJECTBUFFERATIPROC", ctypes.c_uint, [
	("size",		ctypes.c_int),
	("pointer",		ctypes.POINTER(ctypes.c_void_p)),
	("usage",		ctypes.c_uint),] )

PFNGLISOBJECTBUFFERATIPROC = _rpythonic_function_(		"PFNGLISOBJECTBUFFERATIPROC", ctypes.c_ubyte, [
	("buffer",		ctypes.c_uint),] )

PFNGLUPDATEOBJECTBUFFERATIPROC = _rpythonic_function_(		"PFNGLUPDATEOBJECTBUFFERATIPROC", ctypes.c_void_p, [
	("buffer",		ctypes.c_uint),
	("offset",		ctypes.c_uint),
	("size",		ctypes.c_int),
	("pointer",		ctypes.POINTER(ctypes.c_void_p)),
	("preserve",		ctypes.c_uint),] )

PFNGLGETOBJECTBUFFERFVATIPROC = _rpythonic_function_(		"PFNGLGETOBJECTBUFFERFVATIPROC", ctypes.c_void_p, [
	("buffer",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETOBJECTBUFFERIVATIPROC = _rpythonic_function_(		"PFNGLGETOBJECTBUFFERIVATIPROC", ctypes.c_void_p, [
	("buffer",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLFREEOBJECTBUFFERATIPROC = _rpythonic_function_(		"PFNGLFREEOBJECTBUFFERATIPROC", ctypes.c_void_p, [
	("buffer",		ctypes.c_uint),] )

PFNGLARRAYOBJECTATIPROC = _rpythonic_function_(		"PFNGLARRAYOBJECTATIPROC", ctypes.c_void_p, [
	("array",		ctypes.c_uint),
	("size",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("stride",		ctypes.c_int),
	("buffer",		ctypes.c_uint),
	("offset",		ctypes.c_uint),] )

PFNGLGETARRAYOBJECTFVATIPROC = _rpythonic_function_(		"PFNGLGETARRAYOBJECTFVATIPROC", ctypes.c_void_p, [
	("array",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETARRAYOBJECTIVATIPROC = _rpythonic_function_(		"PFNGLGETARRAYOBJECTIVATIPROC", ctypes.c_void_p, [
	("array",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLVARIANTARRAYOBJECTATIPROC = _rpythonic_function_(		"PFNGLVARIANTARRAYOBJECTATIPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("stride",		ctypes.c_int),
	("buffer",		ctypes.c_uint),
	("offset",		ctypes.c_uint),] )

PFNGLGETVARIANTARRAYOBJECTFVATIPROC = _rpythonic_function_(		"PFNGLGETVARIANTARRAYOBJECTFVATIPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETVARIANTARRAYOBJECTIVATIPROC = _rpythonic_function_(		"PFNGLGETVARIANTARRAYOBJECTIVATIPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLBEGINVERTEXSHADEREXTPROC = _rpythonic_function_(		"PFNGLBEGINVERTEXSHADEREXTPROC", ctypes.c_void_p, [] )

PFNGLENDVERTEXSHADEREXTPROC = _rpythonic_function_(		"PFNGLENDVERTEXSHADEREXTPROC", ctypes.c_void_p, [] )

PFNGLBINDVERTEXSHADEREXTPROC = _rpythonic_function_(		"PFNGLBINDVERTEXSHADEREXTPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),] )

PFNGLGENVERTEXSHADERSEXTPROC = _rpythonic_function_(		"PFNGLGENVERTEXSHADERSEXTPROC", ctypes.c_uint, [
	("C_range",		ctypes.c_uint),] )

PFNGLDELETEVERTEXSHADEREXTPROC = _rpythonic_function_(		"PFNGLDELETEVERTEXSHADEREXTPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),] )

PFNGLSHADEROP1EXTPROC = _rpythonic_function_(		"PFNGLSHADEROP1EXTPROC", ctypes.c_void_p, [
	("op",		ctypes.c_uint),
	("res",		ctypes.c_uint),
	("arg1",		ctypes.c_uint),] )

PFNGLSHADEROP2EXTPROC = _rpythonic_function_(		"PFNGLSHADEROP2EXTPROC", ctypes.c_void_p, [
	("op",		ctypes.c_uint),
	("res",		ctypes.c_uint),
	("arg1",		ctypes.c_uint),
	("arg2",		ctypes.c_uint),] )

PFNGLSHADEROP3EXTPROC = _rpythonic_function_(		"PFNGLSHADEROP3EXTPROC", ctypes.c_void_p, [
	("op",		ctypes.c_uint),
	("res",		ctypes.c_uint),
	("arg1",		ctypes.c_uint),
	("arg2",		ctypes.c_uint),
	("arg3",		ctypes.c_uint),] )

PFNGLSWIZZLEEXTPROC = _rpythonic_function_(		"PFNGLSWIZZLEEXTPROC", ctypes.c_void_p, [
	("res",		ctypes.c_uint),
	("C_in",		ctypes.c_uint),
	("outX",		ctypes.c_uint),
	("outY",		ctypes.c_uint),
	("outZ",		ctypes.c_uint),
	("outW",		ctypes.c_uint),] )

PFNGLWRITEMASKEXTPROC = _rpythonic_function_(		"PFNGLWRITEMASKEXTPROC", ctypes.c_void_p, [
	("res",		ctypes.c_uint),
	("C_in",		ctypes.c_uint),
	("outX",		ctypes.c_uint),
	("outY",		ctypes.c_uint),
	("outZ",		ctypes.c_uint),
	("outW",		ctypes.c_uint),] )

PFNGLINSERTCOMPONENTEXTPROC = _rpythonic_function_(		"PFNGLINSERTCOMPONENTEXTPROC", ctypes.c_void_p, [
	("res",		ctypes.c_uint),
	("src",		ctypes.c_uint),
	("num",		ctypes.c_uint),] )

PFNGLEXTRACTCOMPONENTEXTPROC = _rpythonic_function_(		"PFNGLEXTRACTCOMPONENTEXTPROC", ctypes.c_void_p, [
	("res",		ctypes.c_uint),
	("src",		ctypes.c_uint),
	("num",		ctypes.c_uint),] )

PFNGLGENSYMBOLSEXTPROC = _rpythonic_function_(		"PFNGLGENSYMBOLSEXTPROC", ctypes.c_uint, [
	("datatype",		ctypes.c_uint),
	("storagetype",		ctypes.c_uint),
	("C_range",		ctypes.c_uint),
	("components",		ctypes.c_uint),] )

PFNGLSETINVARIANTEXTPROC = _rpythonic_function_(		"PFNGLSETINVARIANTEXTPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("addr",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLSETLOCALCONSTANTEXTPROC = _rpythonic_function_(		"PFNGLSETLOCALCONSTANTEXTPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("addr",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLVARIANTBVEXTPROC = _rpythonic_function_(		"PFNGLVARIANTBVEXTPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),
	("addr",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLVARIANTSVEXTPROC = _rpythonic_function_(		"PFNGLVARIANTSVEXTPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),
	("addr",		ctypes.POINTER(ctypes.c_short)),] )

PFNGLVARIANTIVEXTPROC = _rpythonic_function_(		"PFNGLVARIANTIVEXTPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),
	("addr",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLVARIANTFVEXTPROC = _rpythonic_function_(		"PFNGLVARIANTFVEXTPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),
	("addr",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLVARIANTDVEXTPROC = _rpythonic_function_(		"PFNGLVARIANTDVEXTPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),
	("addr",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLVARIANTUBVEXTPROC = _rpythonic_function_(		"PFNGLVARIANTUBVEXTPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),
	("addr",		ctypes.POINTER(ctypes.c_ubyte)),] )

PFNGLVARIANTUSVEXTPROC = _rpythonic_function_(		"PFNGLVARIANTUSVEXTPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),
	("addr",		ctypes.POINTER(ctypes.c_ushort)),] )

PFNGLVARIANTUIVEXTPROC = _rpythonic_function_(		"PFNGLVARIANTUIVEXTPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),
	("addr",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLVARIANTPOINTEREXTPROC = _rpythonic_function_(		"PFNGLVARIANTPOINTEREXTPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("stride",		ctypes.c_uint),
	("addr",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLENABLEVARIANTCLIENTSTATEEXTPROC = _rpythonic_function_(		"PFNGLENABLEVARIANTCLIENTSTATEEXTPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),] )

PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC = _rpythonic_function_(		"PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),] )

PFNGLBINDLIGHTPARAMETEREXTPROC = _rpythonic_function_(		"PFNGLBINDLIGHTPARAMETEREXTPROC", ctypes.c_uint, [
	("light",		ctypes.c_uint),
	("value",		ctypes.c_uint),] )

PFNGLBINDMATERIALPARAMETEREXTPROC = _rpythonic_function_(		"PFNGLBINDMATERIALPARAMETEREXTPROC", ctypes.c_uint, [
	("face",		ctypes.c_uint),
	("value",		ctypes.c_uint),] )

PFNGLBINDTEXGENPARAMETEREXTPROC = _rpythonic_function_(		"PFNGLBINDTEXGENPARAMETEREXTPROC", ctypes.c_uint, [
	("unit",		ctypes.c_uint),
	("coord",		ctypes.c_uint),
	("value",		ctypes.c_uint),] )

PFNGLBINDTEXTUREUNITPARAMETEREXTPROC = _rpythonic_function_(		"PFNGLBINDTEXTUREUNITPARAMETEREXTPROC", ctypes.c_uint, [
	("unit",		ctypes.c_uint),
	("value",		ctypes.c_uint),] )

PFNGLBINDPARAMETEREXTPROC = _rpythonic_function_(		"PFNGLBINDPARAMETEREXTPROC", ctypes.c_uint, [
	("value",		ctypes.c_uint),] )

PFNGLISVARIANTENABLEDEXTPROC = _rpythonic_function_(		"PFNGLISVARIANTENABLEDEXTPROC", ctypes.c_ubyte, [
	("C_id",		ctypes.c_uint),
	("cap",		ctypes.c_uint),] )

PFNGLGETVARIANTBOOLEANVEXTPROC = _rpythonic_function_(		"PFNGLGETVARIANTBOOLEANVEXTPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),
	("value",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_ubyte)),] )

PFNGLGETVARIANTINTEGERVEXTPROC = _rpythonic_function_(		"PFNGLGETVARIANTINTEGERVEXTPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),
	("value",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETVARIANTFLOATVEXTPROC = _rpythonic_function_(		"PFNGLGETVARIANTFLOATVEXTPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),
	("value",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETVARIANTPOINTERVEXTPROC = _rpythonic_function_(		"PFNGLGETVARIANTPOINTERVEXTPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),
	("value",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

PFNGLGETINVARIANTBOOLEANVEXTPROC = _rpythonic_function_(		"PFNGLGETINVARIANTBOOLEANVEXTPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),
	("value",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_ubyte)),] )

PFNGLGETINVARIANTINTEGERVEXTPROC = _rpythonic_function_(		"PFNGLGETINVARIANTINTEGERVEXTPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),
	("value",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETINVARIANTFLOATVEXTPROC = _rpythonic_function_(		"PFNGLGETINVARIANTFLOATVEXTPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),
	("value",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC = _rpythonic_function_(		"PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),
	("value",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_ubyte)),] )

PFNGLGETLOCALCONSTANTINTEGERVEXTPROC = _rpythonic_function_(		"PFNGLGETLOCALCONSTANTINTEGERVEXTPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),
	("value",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETLOCALCONSTANTFLOATVEXTPROC = _rpythonic_function_(		"PFNGLGETLOCALCONSTANTFLOATVEXTPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),
	("value",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLVERTEXSTREAM1SATIPROC = _rpythonic_function_(		"PFNGLVERTEXSTREAM1SATIPROC", ctypes.c_void_p, [
	("stream",		ctypes.c_uint),
	("x",		ctypes.c_short),] )

PFNGLVERTEXSTREAM1SVATIPROC = _rpythonic_function_(		"PFNGLVERTEXSTREAM1SVATIPROC", ctypes.c_void_p, [
	("stream",		ctypes.c_uint),
	("coords",		ctypes.POINTER(ctypes.c_short)),] )

PFNGLVERTEXSTREAM1IATIPROC = _rpythonic_function_(		"PFNGLVERTEXSTREAM1IATIPROC", ctypes.c_void_p, [
	("stream",		ctypes.c_uint),
	("x",		ctypes.c_int),] )

PFNGLVERTEXSTREAM1IVATIPROC = _rpythonic_function_(		"PFNGLVERTEXSTREAM1IVATIPROC", ctypes.c_void_p, [
	("stream",		ctypes.c_uint),
	("coords",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLVERTEXSTREAM1FATIPROC = _rpythonic_function_(		"PFNGLVERTEXSTREAM1FATIPROC", ctypes.c_void_p, [
	("stream",		ctypes.c_uint),
	("x",		ctypes.c_float),] )

PFNGLVERTEXSTREAM1FVATIPROC = _rpythonic_function_(		"PFNGLVERTEXSTREAM1FVATIPROC", ctypes.c_void_p, [
	("stream",		ctypes.c_uint),
	("coords",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLVERTEXSTREAM1DATIPROC = _rpythonic_function_(		"PFNGLVERTEXSTREAM1DATIPROC", ctypes.c_void_p, [
	("stream",		ctypes.c_uint),
	("x",		ctypes.c_double),] )

PFNGLVERTEXSTREAM1DVATIPROC = _rpythonic_function_(		"PFNGLVERTEXSTREAM1DVATIPROC", ctypes.c_void_p, [
	("stream",		ctypes.c_uint),
	("coords",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLVERTEXSTREAM2SATIPROC = _rpythonic_function_(		"PFNGLVERTEXSTREAM2SATIPROC", ctypes.c_void_p, [
	("stream",		ctypes.c_uint),
	("x",		ctypes.c_short),
	("y",		ctypes.c_short),] )

PFNGLVERTEXSTREAM2SVATIPROC = _rpythonic_function_(		"PFNGLVERTEXSTREAM2SVATIPROC", ctypes.c_void_p, [
	("stream",		ctypes.c_uint),
	("coords",		ctypes.POINTER(ctypes.c_short)),] )

PFNGLVERTEXSTREAM2IATIPROC = _rpythonic_function_(		"PFNGLVERTEXSTREAM2IATIPROC", ctypes.c_void_p, [
	("stream",		ctypes.c_uint),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

PFNGLVERTEXSTREAM2IVATIPROC = _rpythonic_function_(		"PFNGLVERTEXSTREAM2IVATIPROC", ctypes.c_void_p, [
	("stream",		ctypes.c_uint),
	("coords",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLVERTEXSTREAM2FATIPROC = _rpythonic_function_(		"PFNGLVERTEXSTREAM2FATIPROC", ctypes.c_void_p, [
	("stream",		ctypes.c_uint),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),] )

PFNGLVERTEXSTREAM2FVATIPROC = _rpythonic_function_(		"PFNGLVERTEXSTREAM2FVATIPROC", ctypes.c_void_p, [
	("stream",		ctypes.c_uint),
	("coords",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLVERTEXSTREAM2DATIPROC = _rpythonic_function_(		"PFNGLVERTEXSTREAM2DATIPROC", ctypes.c_void_p, [
	("stream",		ctypes.c_uint),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),] )

PFNGLVERTEXSTREAM2DVATIPROC = _rpythonic_function_(		"PFNGLVERTEXSTREAM2DVATIPROC", ctypes.c_void_p, [
	("stream",		ctypes.c_uint),
	("coords",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLVERTEXSTREAM3SATIPROC = _rpythonic_function_(		"PFNGLVERTEXSTREAM3SATIPROC", ctypes.c_void_p, [
	("stream",		ctypes.c_uint),
	("x",		ctypes.c_short),
	("y",		ctypes.c_short),
	("z",		ctypes.c_short),] )

PFNGLVERTEXSTREAM3SVATIPROC = _rpythonic_function_(		"PFNGLVERTEXSTREAM3SVATIPROC", ctypes.c_void_p, [
	("stream",		ctypes.c_uint),
	("coords",		ctypes.POINTER(ctypes.c_short)),] )

PFNGLVERTEXSTREAM3IATIPROC = _rpythonic_function_(		"PFNGLVERTEXSTREAM3IATIPROC", ctypes.c_void_p, [
	("stream",		ctypes.c_uint),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("z",		ctypes.c_int),] )

PFNGLVERTEXSTREAM3IVATIPROC = _rpythonic_function_(		"PFNGLVERTEXSTREAM3IVATIPROC", ctypes.c_void_p, [
	("stream",		ctypes.c_uint),
	("coords",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLVERTEXSTREAM3FATIPROC = _rpythonic_function_(		"PFNGLVERTEXSTREAM3FATIPROC", ctypes.c_void_p, [
	("stream",		ctypes.c_uint),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

PFNGLVERTEXSTREAM3FVATIPROC = _rpythonic_function_(		"PFNGLVERTEXSTREAM3FVATIPROC", ctypes.c_void_p, [
	("stream",		ctypes.c_uint),
	("coords",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLVERTEXSTREAM3DATIPROC = _rpythonic_function_(		"PFNGLVERTEXSTREAM3DATIPROC", ctypes.c_void_p, [
	("stream",		ctypes.c_uint),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("z",		ctypes.c_double),] )

PFNGLVERTEXSTREAM3DVATIPROC = _rpythonic_function_(		"PFNGLVERTEXSTREAM3DVATIPROC", ctypes.c_void_p, [
	("stream",		ctypes.c_uint),
	("coords",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLVERTEXSTREAM4SATIPROC = _rpythonic_function_(		"PFNGLVERTEXSTREAM4SATIPROC", ctypes.c_void_p, [
	("stream",		ctypes.c_uint),
	("x",		ctypes.c_short),
	("y",		ctypes.c_short),
	("z",		ctypes.c_short),
	("w",		ctypes.c_short),] )

PFNGLVERTEXSTREAM4SVATIPROC = _rpythonic_function_(		"PFNGLVERTEXSTREAM4SVATIPROC", ctypes.c_void_p, [
	("stream",		ctypes.c_uint),
	("coords",		ctypes.POINTER(ctypes.c_short)),] )

PFNGLVERTEXSTREAM4IATIPROC = _rpythonic_function_(		"PFNGLVERTEXSTREAM4IATIPROC", ctypes.c_void_p, [
	("stream",		ctypes.c_uint),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("z",		ctypes.c_int),
	("w",		ctypes.c_int),] )

PFNGLVERTEXSTREAM4IVATIPROC = _rpythonic_function_(		"PFNGLVERTEXSTREAM4IVATIPROC", ctypes.c_void_p, [
	("stream",		ctypes.c_uint),
	("coords",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLVERTEXSTREAM4FATIPROC = _rpythonic_function_(		"PFNGLVERTEXSTREAM4FATIPROC", ctypes.c_void_p, [
	("stream",		ctypes.c_uint),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),
	("w",		ctypes.c_float),] )

PFNGLVERTEXSTREAM4FVATIPROC = _rpythonic_function_(		"PFNGLVERTEXSTREAM4FVATIPROC", ctypes.c_void_p, [
	("stream",		ctypes.c_uint),
	("coords",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLVERTEXSTREAM4DATIPROC = _rpythonic_function_(		"PFNGLVERTEXSTREAM4DATIPROC", ctypes.c_void_p, [
	("stream",		ctypes.c_uint),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("z",		ctypes.c_double),
	("w",		ctypes.c_double),] )

PFNGLVERTEXSTREAM4DVATIPROC = _rpythonic_function_(		"PFNGLVERTEXSTREAM4DVATIPROC", ctypes.c_void_p, [
	("stream",		ctypes.c_uint),
	("coords",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLNORMALSTREAM3BATIPROC = _rpythonic_function_(		"PFNGLNORMALSTREAM3BATIPROC", ctypes.c_void_p, [
	("stream",		ctypes.c_uint),
	("nx",		ctypes.c_char),
	("ny",		ctypes.c_char),
	("nz",		ctypes.c_char),] )

PFNGLNORMALSTREAM3BVATIPROC = _rpythonic_function_(		"PFNGLNORMALSTREAM3BVATIPROC", ctypes.c_void_p, [
	("stream",		ctypes.c_uint),
	("coords",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLNORMALSTREAM3SATIPROC = _rpythonic_function_(		"PFNGLNORMALSTREAM3SATIPROC", ctypes.c_void_p, [
	("stream",		ctypes.c_uint),
	("nx",		ctypes.c_short),
	("ny",		ctypes.c_short),
	("nz",		ctypes.c_short),] )

PFNGLNORMALSTREAM3SVATIPROC = _rpythonic_function_(		"PFNGLNORMALSTREAM3SVATIPROC", ctypes.c_void_p, [
	("stream",		ctypes.c_uint),
	("coords",		ctypes.POINTER(ctypes.c_short)),] )

PFNGLNORMALSTREAM3IATIPROC = _rpythonic_function_(		"PFNGLNORMALSTREAM3IATIPROC", ctypes.c_void_p, [
	("stream",		ctypes.c_uint),
	("nx",		ctypes.c_int),
	("ny",		ctypes.c_int),
	("nz",		ctypes.c_int),] )

PFNGLNORMALSTREAM3IVATIPROC = _rpythonic_function_(		"PFNGLNORMALSTREAM3IVATIPROC", ctypes.c_void_p, [
	("stream",		ctypes.c_uint),
	("coords",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLNORMALSTREAM3FATIPROC = _rpythonic_function_(		"PFNGLNORMALSTREAM3FATIPROC", ctypes.c_void_p, [
	("stream",		ctypes.c_uint),
	("nx",		ctypes.c_float),
	("ny",		ctypes.c_float),
	("nz",		ctypes.c_float),] )

PFNGLNORMALSTREAM3FVATIPROC = _rpythonic_function_(		"PFNGLNORMALSTREAM3FVATIPROC", ctypes.c_void_p, [
	("stream",		ctypes.c_uint),
	("coords",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLNORMALSTREAM3DATIPROC = _rpythonic_function_(		"PFNGLNORMALSTREAM3DATIPROC", ctypes.c_void_p, [
	("stream",		ctypes.c_uint),
	("nx",		ctypes.c_double),
	("ny",		ctypes.c_double),
	("nz",		ctypes.c_double),] )

PFNGLNORMALSTREAM3DVATIPROC = _rpythonic_function_(		"PFNGLNORMALSTREAM3DVATIPROC", ctypes.c_void_p, [
	("stream",		ctypes.c_uint),
	("coords",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC = _rpythonic_function_(		"PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC", ctypes.c_void_p, [
	("stream",		ctypes.c_uint),] )

PFNGLVERTEXBLENDENVIATIPROC = _rpythonic_function_(		"PFNGLVERTEXBLENDENVIATIPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_int),] )

PFNGLVERTEXBLENDENVFATIPROC = _rpythonic_function_(		"PFNGLVERTEXBLENDENVFATIPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_float),] )

PFNGLELEMENTPOINTERATIPROC = _rpythonic_function_(		"PFNGLELEMENTPOINTERATIPROC", ctypes.c_void_p, [
	("C_type",		ctypes.c_uint),
	("pointer",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLDRAWELEMENTARRAYATIPROC = _rpythonic_function_(		"PFNGLDRAWELEMENTARRAYATIPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("count",		ctypes.c_int),] )

PFNGLDRAWRANGEELEMENTARRAYATIPROC = _rpythonic_function_(		"PFNGLDRAWRANGEELEMENTARRAYATIPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("start",		ctypes.c_uint),
	("end",		ctypes.c_uint),
	("count",		ctypes.c_int),] )

PFNGLDRAWMESHARRAYSSUNPROC = _rpythonic_function_(		"PFNGLDRAWMESHARRAYSSUNPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("first",		ctypes.c_int),
	("count",		ctypes.c_int),
	("width",		ctypes.c_int),] )

PFNGLGENOCCLUSIONQUERIESNVPROC = _rpythonic_function_(		"PFNGLGENOCCLUSIONQUERIESNVPROC", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("ids",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLDELETEOCCLUSIONQUERIESNVPROC = _rpythonic_function_(		"PFNGLDELETEOCCLUSIONQUERIESNVPROC", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("ids",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLISOCCLUSIONQUERYNVPROC = _rpythonic_function_(		"PFNGLISOCCLUSIONQUERYNVPROC", ctypes.c_ubyte, [
	("C_id",		ctypes.c_uint),] )

PFNGLBEGINOCCLUSIONQUERYNVPROC = _rpythonic_function_(		"PFNGLBEGINOCCLUSIONQUERYNVPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),] )

PFNGLENDOCCLUSIONQUERYNVPROC = _rpythonic_function_(		"PFNGLENDOCCLUSIONQUERYNVPROC", ctypes.c_void_p, [] )

PFNGLGETOCCLUSIONQUERYIVNVPROC = _rpythonic_function_(		"PFNGLGETOCCLUSIONQUERYIVNVPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETOCCLUSIONQUERYUIVNVPROC = _rpythonic_function_(		"PFNGLGETOCCLUSIONQUERYUIVNVPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLPOINTPARAMETERINVPROC = _rpythonic_function_(		"PFNGLPOINTPARAMETERINVPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_int),] )

PFNGLPOINTPARAMETERIVNVPROC = _rpythonic_function_(		"PFNGLPOINTPARAMETERIVNVPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLACTIVESTENCILFACEEXTPROC = _rpythonic_function_(		"PFNGLACTIVESTENCILFACEEXTPROC", ctypes.c_void_p, [
	("face",		ctypes.c_uint),] )

PFNGLELEMENTPOINTERAPPLEPROC = _rpythonic_function_(		"PFNGLELEMENTPOINTERAPPLEPROC", ctypes.c_void_p, [
	("C_type",		ctypes.c_uint),
	("pointer",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLDRAWELEMENTARRAYAPPLEPROC = _rpythonic_function_(		"PFNGLDRAWELEMENTARRAYAPPLEPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("first",		ctypes.c_int),
	("count",		ctypes.c_int),] )

PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC = _rpythonic_function_(		"PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("start",		ctypes.c_uint),
	("end",		ctypes.c_uint),
	("first",		ctypes.c_int),
	("count",		ctypes.c_int),] )

PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC = _rpythonic_function_(		"PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("first",		ctypes.POINTER(ctypes.c_int)),
	("count",		ctypes.POINTER(ctypes.c_int)),
	("primcount",		ctypes.c_int),] )

PFNGLGENFENCESAPPLEPROC = _rpythonic_function_(		"PFNGLGENFENCESAPPLEPROC", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("fences",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC = _rpythonic_function_(		"PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("start",		ctypes.c_uint),
	("end",		ctypes.c_uint),
	("first",		ctypes.POINTER(ctypes.c_int)),
	("count",		ctypes.POINTER(ctypes.c_int)),
	("primcount",		ctypes.c_int),] )

PFNGLDELETEFENCESAPPLEPROC = _rpythonic_function_(		"PFNGLDELETEFENCESAPPLEPROC", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("fences",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLSETFENCEAPPLEPROC = _rpythonic_function_(		"PFNGLSETFENCEAPPLEPROC", ctypes.c_void_p, [
	("fence",		ctypes.c_uint),] )

PFNGLISFENCEAPPLEPROC = _rpythonic_function_(		"PFNGLISFENCEAPPLEPROC", ctypes.c_ubyte, [
	("fence",		ctypes.c_uint),] )

PFNGLTESTFENCEAPPLEPROC = _rpythonic_function_(		"PFNGLTESTFENCEAPPLEPROC", ctypes.c_ubyte, [
	("fence",		ctypes.c_uint),] )

PFNGLFINISHFENCEAPPLEPROC = _rpythonic_function_(		"PFNGLFINISHFENCEAPPLEPROC", ctypes.c_void_p, [
	("fence",		ctypes.c_uint),] )

PFNGLTESTOBJECTAPPLEPROC = _rpythonic_function_(		"PFNGLTESTOBJECTAPPLEPROC", ctypes.c_ubyte, [
	("C_object",		ctypes.c_uint),
	("name",		ctypes.c_uint),] )

PFNGLFINISHOBJECTAPPLEPROC = _rpythonic_function_(		"PFNGLFINISHOBJECTAPPLEPROC", ctypes.c_void_p, [
	("C_object",		ctypes.c_uint),
	("name",		ctypes.c_int),] )

PFNGLBINDVERTEXARRAYAPPLEPROC = _rpythonic_function_(		"PFNGLBINDVERTEXARRAYAPPLEPROC", ctypes.c_void_p, [
	("array",		ctypes.c_uint),] )

PFNGLDELETEVERTEXARRAYSAPPLEPROC = _rpythonic_function_(		"PFNGLDELETEVERTEXARRAYSAPPLEPROC", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("arrays",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLGENVERTEXARRAYSAPPLEPROC = _rpythonic_function_(		"PFNGLGENVERTEXARRAYSAPPLEPROC", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("arrays",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLISVERTEXARRAYAPPLEPROC = _rpythonic_function_(		"PFNGLISVERTEXARRAYAPPLEPROC", ctypes.c_ubyte, [
	("array",		ctypes.c_uint),] )

PFNGLVERTEXARRAYRANGEAPPLEPROC = _rpythonic_function_(		"PFNGLVERTEXARRAYRANGEAPPLEPROC", ctypes.c_void_p, [
	("length",		ctypes.c_int),
	("pointer",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC = _rpythonic_function_(		"PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC", ctypes.c_void_p, [
	("length",		ctypes.c_int),
	("pointer",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLVERTEXARRAYPARAMETERIAPPLEPROC = _rpythonic_function_(		"PFNGLVERTEXARRAYPARAMETERIAPPLEPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_int),] )

PFNGLDRAWBUFFERSATIPROC = _rpythonic_function_(		"PFNGLDRAWBUFFERSATIPROC", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("bufs",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLPROGRAMNAMEDPARAMETER4FNVPROC = _rpythonic_function_(		"PFNGLPROGRAMNAMEDPARAMETER4FNVPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),
	("C_len",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),
	("w",		ctypes.c_float),] )

PFNGLPROGRAMNAMEDPARAMETER4DNVPROC = _rpythonic_function_(		"PFNGLPROGRAMNAMEDPARAMETER4DNVPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),
	("C_len",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("z",		ctypes.c_double),
	("w",		ctypes.c_double),] )

PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC = _rpythonic_function_(		"PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),
	("C_len",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC = _rpythonic_function_(		"PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),
	("C_len",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC = _rpythonic_function_(		"PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),
	("C_len",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC = _rpythonic_function_(		"PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),
	("C_len",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("params",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLVERTEX2HNVPROC = _rpythonic_function_(		"PFNGLVERTEX2HNVPROC", ctypes.c_void_p, [
	("x",		ctypes.c_ushort),
	("y",		ctypes.c_ushort),] )

PFNGLVERTEX2HVNVPROC = _rpythonic_function_(		"PFNGLVERTEX2HVNVPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_ushort)),] )

PFNGLVERTEX3HNVPROC = _rpythonic_function_(		"PFNGLVERTEX3HNVPROC", ctypes.c_void_p, [
	("x",		ctypes.c_ushort),
	("y",		ctypes.c_ushort),
	("z",		ctypes.c_ushort),] )

PFNGLVERTEX3HVNVPROC = _rpythonic_function_(		"PFNGLVERTEX3HVNVPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_ushort)),] )

PFNGLVERTEX4HNVPROC = _rpythonic_function_(		"PFNGLVERTEX4HNVPROC", ctypes.c_void_p, [
	("x",		ctypes.c_ushort),
	("y",		ctypes.c_ushort),
	("z",		ctypes.c_ushort),
	("w",		ctypes.c_ushort),] )

PFNGLVERTEX4HVNVPROC = _rpythonic_function_(		"PFNGLVERTEX4HVNVPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_ushort)),] )

PFNGLNORMAL3HNVPROC = _rpythonic_function_(		"PFNGLNORMAL3HNVPROC", ctypes.c_void_p, [
	("nx",		ctypes.c_ushort),
	("ny",		ctypes.c_ushort),
	("nz",		ctypes.c_ushort),] )

PFNGLNORMAL3HVNVPROC = _rpythonic_function_(		"PFNGLNORMAL3HVNVPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_ushort)),] )

PFNGLCOLOR3HNVPROC = _rpythonic_function_(		"PFNGLCOLOR3HNVPROC", ctypes.c_void_p, [
	("red",		ctypes.c_ushort),
	("green",		ctypes.c_ushort),
	("blue",		ctypes.c_ushort),] )

PFNGLCOLOR3HVNVPROC = _rpythonic_function_(		"PFNGLCOLOR3HVNVPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_ushort)),] )

PFNGLCOLOR4HNVPROC = _rpythonic_function_(		"PFNGLCOLOR4HNVPROC", ctypes.c_void_p, [
	("red",		ctypes.c_ushort),
	("green",		ctypes.c_ushort),
	("blue",		ctypes.c_ushort),
	("alpha",		ctypes.c_ushort),] )

PFNGLCOLOR4HVNVPROC = _rpythonic_function_(		"PFNGLCOLOR4HVNVPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_ushort)),] )

PFNGLTEXCOORD1HNVPROC = _rpythonic_function_(		"PFNGLTEXCOORD1HNVPROC", ctypes.c_void_p, [
	("s",		ctypes.c_ushort),] )

PFNGLTEXCOORD1HVNVPROC = _rpythonic_function_(		"PFNGLTEXCOORD1HVNVPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_ushort)),] )

PFNGLTEXCOORD2HNVPROC = _rpythonic_function_(		"PFNGLTEXCOORD2HNVPROC", ctypes.c_void_p, [
	("s",		ctypes.c_ushort),
	("t",		ctypes.c_ushort),] )

PFNGLTEXCOORD2HVNVPROC = _rpythonic_function_(		"PFNGLTEXCOORD2HVNVPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_ushort)),] )

PFNGLTEXCOORD3HNVPROC = _rpythonic_function_(		"PFNGLTEXCOORD3HNVPROC", ctypes.c_void_p, [
	("s",		ctypes.c_ushort),
	("t",		ctypes.c_ushort),
	("r",		ctypes.c_ushort),] )

PFNGLTEXCOORD3HVNVPROC = _rpythonic_function_(		"PFNGLTEXCOORD3HVNVPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_ushort)),] )

PFNGLTEXCOORD4HNVPROC = _rpythonic_function_(		"PFNGLTEXCOORD4HNVPROC", ctypes.c_void_p, [
	("s",		ctypes.c_ushort),
	("t",		ctypes.c_ushort),
	("r",		ctypes.c_ushort),
	("q",		ctypes.c_ushort),] )

PFNGLTEXCOORD4HVNVPROC = _rpythonic_function_(		"PFNGLTEXCOORD4HVNVPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_ushort)),] )

PFNGLMULTITEXCOORD1HNVPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD1HNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_ushort),] )

PFNGLMULTITEXCOORD1HVNVPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD1HVNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_ushort)),] )

PFNGLMULTITEXCOORD2HNVPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD2HNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_ushort),
	("t",		ctypes.c_ushort),] )

PFNGLMULTITEXCOORD2HVNVPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD2HVNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_ushort)),] )

PFNGLMULTITEXCOORD3HNVPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD3HNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_ushort),
	("t",		ctypes.c_ushort),
	("r",		ctypes.c_ushort),] )

PFNGLMULTITEXCOORD3HVNVPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD3HVNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_ushort)),] )

PFNGLMULTITEXCOORD4HNVPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD4HNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("s",		ctypes.c_ushort),
	("t",		ctypes.c_ushort),
	("r",		ctypes.c_ushort),
	("q",		ctypes.c_ushort),] )

PFNGLMULTITEXCOORD4HVNVPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORD4HVNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_ushort)),] )

PFNGLFOGCOORDHNVPROC = _rpythonic_function_(		"PFNGLFOGCOORDHNVPROC", ctypes.c_void_p, [
	("fog",		ctypes.c_ushort),] )

PFNGLFOGCOORDHVNVPROC = _rpythonic_function_(		"PFNGLFOGCOORDHVNVPROC", ctypes.c_void_p, [
	("fog",		ctypes.POINTER(ctypes.c_ushort)),] )

PFNGLSECONDARYCOLOR3HNVPROC = _rpythonic_function_(		"PFNGLSECONDARYCOLOR3HNVPROC", ctypes.c_void_p, [
	("red",		ctypes.c_ushort),
	("green",		ctypes.c_ushort),
	("blue",		ctypes.c_ushort),] )

PFNGLSECONDARYCOLOR3HVNVPROC = _rpythonic_function_(		"PFNGLSECONDARYCOLOR3HVNVPROC", ctypes.c_void_p, [
	("v",		ctypes.POINTER(ctypes.c_ushort)),] )

PFNGLVERTEXWEIGHTHNVPROC = _rpythonic_function_(		"PFNGLVERTEXWEIGHTHNVPROC", ctypes.c_void_p, [
	("weight",		ctypes.c_ushort),] )

PFNGLVERTEXWEIGHTHVNVPROC = _rpythonic_function_(		"PFNGLVERTEXWEIGHTHVNVPROC", ctypes.c_void_p, [
	("weight",		ctypes.POINTER(ctypes.c_ushort)),] )

PFNGLVERTEXATTRIB1HNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB1HNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_ushort),] )

PFNGLVERTEXATTRIB1HVNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB1HVNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_ushort)),] )

PFNGLVERTEXATTRIB2HNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB2HNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_ushort),
	("y",		ctypes.c_ushort),] )

PFNGLVERTEXATTRIB2HVNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB2HVNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_ushort)),] )

PFNGLVERTEXATTRIB3HNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB3HNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_ushort),
	("y",		ctypes.c_ushort),
	("z",		ctypes.c_ushort),] )

PFNGLVERTEXATTRIB3HVNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB3HVNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_ushort)),] )

PFNGLVERTEXATTRIB4HNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB4HNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_ushort),
	("y",		ctypes.c_ushort),
	("z",		ctypes.c_ushort),
	("w",		ctypes.c_ushort),] )

PFNGLVERTEXATTRIB4HVNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIB4HVNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_ushort)),] )

PFNGLVERTEXATTRIBS1HVNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBS1HVNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("n",		ctypes.c_int),
	("v",		ctypes.POINTER(ctypes.c_ushort)),] )

PFNGLVERTEXATTRIBS2HVNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBS2HVNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("n",		ctypes.c_int),
	("v",		ctypes.POINTER(ctypes.c_ushort)),] )

PFNGLVERTEXATTRIBS3HVNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBS3HVNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("n",		ctypes.c_int),
	("v",		ctypes.POINTER(ctypes.c_ushort)),] )

PFNGLVERTEXATTRIBS4HVNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBS4HVNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("n",		ctypes.c_int),
	("v",		ctypes.POINTER(ctypes.c_ushort)),] )

PFNGLPIXELDATARANGENVPROC = _rpythonic_function_(		"PFNGLPIXELDATARANGENVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("length",		ctypes.c_int),
	("pointer",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLFLUSHPIXELDATARANGENVPROC = _rpythonic_function_(		"PFNGLFLUSHPIXELDATARANGENVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),] )

PFNGLPRIMITIVERESTARTNVPROC = _rpythonic_function_(		"PFNGLPRIMITIVERESTARTNVPROC", ctypes.c_void_p, [] )

PFNGLPRIMITIVERESTARTINDEXNVPROC = _rpythonic_function_(		"PFNGLPRIMITIVERESTARTINDEXNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),] )

PFNGLMAPOBJECTBUFFERATIPROC = _rpythonic_function_(		"PFNGLMAPOBJECTBUFFERATIPROC", ctypes.POINTER(ctypes.c_void_p), [
	("buffer",		ctypes.c_uint),] )

PFNGLUNMAPOBJECTBUFFERATIPROC = _rpythonic_function_(		"PFNGLUNMAPOBJECTBUFFERATIPROC", ctypes.c_void_p, [
	("buffer",		ctypes.c_uint),] )

PFNGLSTENCILOPSEPARATEATIPROC = _rpythonic_function_(		"PFNGLSTENCILOPSEPARATEATIPROC", ctypes.c_void_p, [
	("face",		ctypes.c_uint),
	("sfail",		ctypes.c_uint),
	("dpfail",		ctypes.c_uint),
	("dppass",		ctypes.c_uint),] )

PFNGLSTENCILFUNCSEPARATEATIPROC = _rpythonic_function_(		"PFNGLSTENCILFUNCSEPARATEATIPROC", ctypes.c_void_p, [
	("frontfunc",		ctypes.c_uint),
	("backfunc",		ctypes.c_uint),
	("ref",		ctypes.c_int),
	("mask",		ctypes.c_uint),] )

PFNGLVERTEXATTRIBARRAYOBJECTATIPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBARRAYOBJECTATIPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("size",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("normalized",		ctypes.c_ubyte),
	("stride",		ctypes.c_int),
	("buffer",		ctypes.c_uint),
	("offset",		ctypes.c_uint),] )

PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC = _rpythonic_function_(		"PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC = _rpythonic_function_(		"PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLDEPTHBOUNDSEXTPROC = _rpythonic_function_(		"PFNGLDEPTHBOUNDSEXTPROC", ctypes.c_void_p, [
	("zmin",		ctypes.c_double),
	("zmax",		ctypes.c_double),] )

PFNGLBLENDEQUATIONSEPARATEEXTPROC = _rpythonic_function_(		"PFNGLBLENDEQUATIONSEPARATEEXTPROC", ctypes.c_void_p, [
	("modeRGB",		ctypes.c_uint),
	("modeAlpha",		ctypes.c_uint),] )

PFNGLISRENDERBUFFEREXTPROC = _rpythonic_function_(		"PFNGLISRENDERBUFFEREXTPROC", ctypes.c_ubyte, [
	("renderbuffer",		ctypes.c_uint),] )

PFNGLBINDRENDERBUFFEREXTPROC = _rpythonic_function_(		"PFNGLBINDRENDERBUFFEREXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("renderbuffer",		ctypes.c_uint),] )

PFNGLDELETERENDERBUFFERSEXTPROC = _rpythonic_function_(		"PFNGLDELETERENDERBUFFERSEXTPROC", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("renderbuffers",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLGENRENDERBUFFERSEXTPROC = _rpythonic_function_(		"PFNGLGENRENDERBUFFERSEXTPROC", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("renderbuffers",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLRENDERBUFFERSTORAGEEXTPROC = _rpythonic_function_(		"PFNGLRENDERBUFFERSTORAGEEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("internalformat",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC = _rpythonic_function_(		"PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLISFRAMEBUFFEREXTPROC = _rpythonic_function_(		"PFNGLISFRAMEBUFFEREXTPROC", ctypes.c_ubyte, [
	("framebuffer",		ctypes.c_uint),] )

PFNGLBINDFRAMEBUFFEREXTPROC = _rpythonic_function_(		"PFNGLBINDFRAMEBUFFEREXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("framebuffer",		ctypes.c_uint),] )

PFNGLDELETEFRAMEBUFFERSEXTPROC = _rpythonic_function_(		"PFNGLDELETEFRAMEBUFFERSEXTPROC", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("framebuffers",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLGENFRAMEBUFFERSEXTPROC = _rpythonic_function_(		"PFNGLGENFRAMEBUFFERSEXTPROC", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("framebuffers",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC = _rpythonic_function_(		"PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC", ctypes.c_uint, [
	("target",		ctypes.c_uint),] )

PFNGLFRAMEBUFFERTEXTURE1DEXTPROC = _rpythonic_function_(		"PFNGLFRAMEBUFFERTEXTURE1DEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("attachment",		ctypes.c_uint),
	("textarget",		ctypes.c_uint),
	("texture",		ctypes.c_uint),
	("level",		ctypes.c_int),] )

PFNGLFRAMEBUFFERTEXTURE2DEXTPROC = _rpythonic_function_(		"PFNGLFRAMEBUFFERTEXTURE2DEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("attachment",		ctypes.c_uint),
	("textarget",		ctypes.c_uint),
	("texture",		ctypes.c_uint),
	("level",		ctypes.c_int),] )

PFNGLFRAMEBUFFERTEXTURE3DEXTPROC = _rpythonic_function_(		"PFNGLFRAMEBUFFERTEXTURE3DEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("attachment",		ctypes.c_uint),
	("textarget",		ctypes.c_uint),
	("texture",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("zoffset",		ctypes.c_int),] )

PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC = _rpythonic_function_(		"PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("attachment",		ctypes.c_uint),
	("renderbuffertarget",		ctypes.c_uint),
	("renderbuffer",		ctypes.c_uint),] )

PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC = _rpythonic_function_(		"PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("attachment",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGENERATEMIPMAPEXTPROC = _rpythonic_function_(		"PFNGLGENERATEMIPMAPEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),] )

PFNGLSTRINGMARKERGREMEDYPROC = _rpythonic_function_(		"PFNGLSTRINGMARKERGREMEDYPROC", ctypes.c_void_p, [
	("C_len",		ctypes.c_int),
	("string",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLSTENCILCLEARTAGEXTPROC = _rpythonic_function_(		"PFNGLSTENCILCLEARTAGEXTPROC", ctypes.c_void_p, [
	("stencilTagBits",		ctypes.c_int),
	("stencilClearTag",		ctypes.c_uint),] )

PFNGLBLITFRAMEBUFFEREXTPROC = _rpythonic_function_(		"PFNGLBLITFRAMEBUFFEREXTPROC", ctypes.c_void_p, [
	("srcX0",		ctypes.c_int),
	("srcY0",		ctypes.c_int),
	("srcX1",		ctypes.c_int),
	("srcY1",		ctypes.c_int),
	("dstX0",		ctypes.c_int),
	("dstY0",		ctypes.c_int),
	("dstX1",		ctypes.c_int),
	("dstY1",		ctypes.c_int),
	("mask",		ctypes.c_uint),
	("filter",		ctypes.c_uint),] )

PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC = _rpythonic_function_(		"PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("samples",		ctypes.c_int),
	("internalformat",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

PFNGLGETQUERYOBJECTI64VEXTPROC = _rpythonic_function_(		"PFNGLGETQUERYOBJECTI64VEXTPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int64)),] )

PFNGLGETQUERYOBJECTUI64VEXTPROC = _rpythonic_function_(		"PFNGLGETQUERYOBJECTUI64VEXTPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_uint64)),] )

PFNGLPROGRAMENVPARAMETERS4FVEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMENVPARAMETERS4FVEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLBUFFERPARAMETERIAPPLEPROC = _rpythonic_function_(		"PFNGLBUFFERPARAMETERIAPPLEPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_int),] )

PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC = _rpythonic_function_(		"PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("offset",		ctypes.c_int),
	("size",		ctypes.c_int),] )

PFNGLPROGRAMLOCALPARAMETERI4INVPROC = _rpythonic_function_(		"PFNGLPROGRAMLOCALPARAMETERI4INVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("z",		ctypes.c_int),
	("w",		ctypes.c_int),] )

PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC = _rpythonic_function_(		"PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC = _rpythonic_function_(		"PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLPROGRAMLOCALPARAMETERI4UINVPROC = _rpythonic_function_(		"PFNGLPROGRAMLOCALPARAMETERI4UINVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("x",		ctypes.c_uint),
	("y",		ctypes.c_uint),
	("z",		ctypes.c_uint),
	("w",		ctypes.c_uint),] )

PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC = _rpythonic_function_(		"PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC = _rpythonic_function_(		"PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("params",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLPROGRAMENVPARAMETERI4INVPROC = _rpythonic_function_(		"PFNGLPROGRAMENVPARAMETERI4INVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("z",		ctypes.c_int),
	("w",		ctypes.c_int),] )

PFNGLPROGRAMENVPARAMETERI4IVNVPROC = _rpythonic_function_(		"PFNGLPROGRAMENVPARAMETERI4IVNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLPROGRAMENVPARAMETERSI4IVNVPROC = _rpythonic_function_(		"PFNGLPROGRAMENVPARAMETERSI4IVNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLPROGRAMENVPARAMETERI4UINVPROC = _rpythonic_function_(		"PFNGLPROGRAMENVPARAMETERI4UINVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("x",		ctypes.c_uint),
	("y",		ctypes.c_uint),
	("z",		ctypes.c_uint),
	("w",		ctypes.c_uint),] )

PFNGLPROGRAMENVPARAMETERI4UIVNVPROC = _rpythonic_function_(		"PFNGLPROGRAMENVPARAMETERI4UIVNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC = _rpythonic_function_(		"PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("params",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC = _rpythonic_function_(		"PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC = _rpythonic_function_(		"PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLGETPROGRAMENVPARAMETERIIVNVPROC = _rpythonic_function_(		"PFNGLGETPROGRAMENVPARAMETERIIVNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC = _rpythonic_function_(		"PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLPROGRAMVERTEXLIMITNVPROC = _rpythonic_function_(		"PFNGLPROGRAMVERTEXLIMITNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("limit",		ctypes.c_int),] )

PFNGLFRAMEBUFFERTEXTUREEXTPROC = _rpythonic_function_(		"PFNGLFRAMEBUFFERTEXTUREEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("attachment",		ctypes.c_uint),
	("texture",		ctypes.c_uint),
	("level",		ctypes.c_int),] )

PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC = _rpythonic_function_(		"PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("attachment",		ctypes.c_uint),
	("texture",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("layer",		ctypes.c_int),] )

PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC = _rpythonic_function_(		"PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("attachment",		ctypes.c_uint),
	("texture",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("face",		ctypes.c_uint),] )

PFNGLPROGRAMPARAMETERIEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMPARAMETERIEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("value",		ctypes.c_int),] )

PFNGLVERTEXATTRIBI1IEXTPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBI1IEXTPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_int),] )

PFNGLVERTEXATTRIBI2IEXTPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBI2IEXTPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

PFNGLVERTEXATTRIBI3IEXTPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBI3IEXTPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("z",		ctypes.c_int),] )

PFNGLVERTEXATTRIBI4IEXTPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBI4IEXTPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("z",		ctypes.c_int),
	("w",		ctypes.c_int),] )

PFNGLVERTEXATTRIBI1UIEXTPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBI1UIEXTPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_uint),] )

PFNGLVERTEXATTRIBI2UIEXTPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBI2UIEXTPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_uint),
	("y",		ctypes.c_uint),] )

PFNGLVERTEXATTRIBI3UIEXTPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBI3UIEXTPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_uint),
	("y",		ctypes.c_uint),
	("z",		ctypes.c_uint),] )

PFNGLVERTEXATTRIBI4UIEXTPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBI4UIEXTPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_uint),
	("y",		ctypes.c_uint),
	("z",		ctypes.c_uint),
	("w",		ctypes.c_uint),] )

PFNGLVERTEXATTRIBI1IVEXTPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBI1IVEXTPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLVERTEXATTRIBI2IVEXTPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBI2IVEXTPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLVERTEXATTRIBI3IVEXTPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBI3IVEXTPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLVERTEXATTRIBI4IVEXTPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBI4IVEXTPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLVERTEXATTRIBI1UIVEXTPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBI1UIVEXTPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLVERTEXATTRIBI2UIVEXTPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBI2UIVEXTPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLVERTEXATTRIBI3UIVEXTPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBI3UIVEXTPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLVERTEXATTRIBI4UIVEXTPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBI4UIVEXTPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLVERTEXATTRIBI4BVEXTPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBI4BVEXTPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLVERTEXATTRIBI4SVEXTPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBI4SVEXTPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_short)),] )

PFNGLVERTEXATTRIBI4UBVEXTPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBI4UBVEXTPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_ubyte)),] )

PFNGLVERTEXATTRIBI4USVEXTPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBI4USVEXTPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_ushort)),] )

PFNGLVERTEXATTRIBIPOINTEREXTPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBIPOINTEREXTPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("size",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("stride",		ctypes.c_int),
	("pointer",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLGETVERTEXATTRIBIIVEXTPROC = _rpythonic_function_(		"PFNGLGETVERTEXATTRIBIIVEXTPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETVERTEXATTRIBIUIVEXTPROC = _rpythonic_function_(		"PFNGLGETVERTEXATTRIBIUIVEXTPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLGETUNIFORMUIVEXTPROC = _rpythonic_function_(		"PFNGLGETUNIFORMUIVEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("params",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLBINDFRAGDATALOCATIONEXTPROC = _rpythonic_function_(		"PFNGLBINDFRAGDATALOCATIONEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("color",		ctypes.c_uint),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLGETFRAGDATALOCATIONEXTPROC = _rpythonic_function_(		"PFNGLGETFRAGDATALOCATIONEXTPROC", ctypes.c_int, [
	("program",		ctypes.c_uint),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLUNIFORM1UIEXTPROC = _rpythonic_function_(		"PFNGLUNIFORM1UIEXTPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("v0",		ctypes.c_uint),] )

PFNGLUNIFORM2UIEXTPROC = _rpythonic_function_(		"PFNGLUNIFORM2UIEXTPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("v0",		ctypes.c_uint),
	("v1",		ctypes.c_uint),] )

PFNGLUNIFORM3UIEXTPROC = _rpythonic_function_(		"PFNGLUNIFORM3UIEXTPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("v0",		ctypes.c_uint),
	("v1",		ctypes.c_uint),
	("v2",		ctypes.c_uint),] )

PFNGLUNIFORM4UIEXTPROC = _rpythonic_function_(		"PFNGLUNIFORM4UIEXTPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("v0",		ctypes.c_uint),
	("v1",		ctypes.c_uint),
	("v2",		ctypes.c_uint),
	("v3",		ctypes.c_uint),] )

PFNGLUNIFORM1UIVEXTPROC = _rpythonic_function_(		"PFNGLUNIFORM1UIVEXTPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLUNIFORM2UIVEXTPROC = _rpythonic_function_(		"PFNGLUNIFORM2UIVEXTPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLUNIFORM3UIVEXTPROC = _rpythonic_function_(		"PFNGLUNIFORM3UIVEXTPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLUNIFORM4UIVEXTPROC = _rpythonic_function_(		"PFNGLUNIFORM4UIVEXTPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLDRAWARRAYSINSTANCEDEXTPROC = _rpythonic_function_(		"PFNGLDRAWARRAYSINSTANCEDEXTPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("start",		ctypes.c_int),
	("count",		ctypes.c_int),
	("primcount",		ctypes.c_int),] )

PFNGLDRAWELEMENTSINSTANCEDEXTPROC = _rpythonic_function_(		"PFNGLDRAWELEMENTSINSTANCEDEXTPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("indices",		ctypes.POINTER(ctypes.c_void_p)),
	("primcount",		ctypes.c_int),] )

PFNGLTEXBUFFEREXTPROC = _rpythonic_function_(		"PFNGLTEXBUFFEREXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("internalformat",		ctypes.c_uint),
	("buffer",		ctypes.c_uint),] )

PFNGLDEPTHRANGEDNVPROC = _rpythonic_function_(		"PFNGLDEPTHRANGEDNVPROC", ctypes.c_void_p, [
	("zNear",		ctypes.c_double),
	("zFar",		ctypes.c_double),] )

PFNGLCLEARDEPTHDNVPROC = _rpythonic_function_(		"PFNGLCLEARDEPTHDNVPROC", ctypes.c_void_p, [
	("depth",		ctypes.c_double),] )

PFNGLDEPTHBOUNDSDNVPROC = _rpythonic_function_(		"PFNGLDEPTHBOUNDSDNVPROC", ctypes.c_void_p, [
	("zmin",		ctypes.c_double),
	("zmax",		ctypes.c_double),] )

PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC = _rpythonic_function_(		"PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("coverageSamples",		ctypes.c_int),
	("colorSamples",		ctypes.c_int),
	("internalformat",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC = _rpythonic_function_(		"PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("buffer",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC = _rpythonic_function_(		"PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("buffer",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLCOLORMASKINDEXEDEXTPROC = _rpythonic_function_(		"PFNGLCOLORMASKINDEXEDEXTPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("r",		ctypes.c_ubyte),
	("g",		ctypes.c_ubyte),
	("b",		ctypes.c_ubyte),
	("a",		ctypes.c_ubyte),] )

PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC = _rpythonic_function_(		"PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("buffer",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("params",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLGETBOOLEANINDEXEDVEXTPROC = _rpythonic_function_(		"PFNGLGETBOOLEANINDEXEDVEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_ubyte)),] )

PFNGLGETINTEGERINDEXEDVEXTPROC = _rpythonic_function_(		"PFNGLGETINTEGERINDEXEDVEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLENABLEINDEXEDEXTPROC = _rpythonic_function_(		"PFNGLENABLEINDEXEDEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),] )

PFNGLDISABLEINDEXEDEXTPROC = _rpythonic_function_(		"PFNGLDISABLEINDEXEDEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),] )

PFNGLISENABLEDINDEXEDEXTPROC = _rpythonic_function_(		"PFNGLISENABLEDINDEXEDEXTPROC", ctypes.c_ubyte, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),] )

PFNGLBEGINTRANSFORMFEEDBACKNVPROC = _rpythonic_function_(		"PFNGLBEGINTRANSFORMFEEDBACKNVPROC", ctypes.c_void_p, [
	("primitiveMode",		ctypes.c_uint),] )

PFNGLENDTRANSFORMFEEDBACKNVPROC = _rpythonic_function_(		"PFNGLENDTRANSFORMFEEDBACKNVPROC", ctypes.c_void_p, [] )

PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC = _rpythonic_function_(		"PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC", ctypes.c_void_p, [
	("count",		ctypes.c_uint),
	("attribs",		ctypes.POINTER(ctypes.c_int)),
	("bufferMode",		ctypes.c_uint),] )

PFNGLBINDBUFFERRANGENVPROC = _rpythonic_function_(		"PFNGLBINDBUFFERRANGENVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("buffer",		ctypes.c_uint),
	("offset",		ctypes.c_int),
	("size",		ctypes.c_int),] )

PFNGLBINDBUFFEROFFSETNVPROC = _rpythonic_function_(		"PFNGLBINDBUFFEROFFSETNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("buffer",		ctypes.c_uint),
	("offset",		ctypes.c_int),] )

PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC = _rpythonic_function_(		"PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("locations",		ctypes.POINTER(ctypes.c_int)),
	("bufferMode",		ctypes.c_uint),] )

PFNGLBINDBUFFERBASENVPROC = _rpythonic_function_(		"PFNGLBINDBUFFERBASENVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("buffer",		ctypes.c_uint),] )

PFNGLACTIVEVARYINGNVPROC = _rpythonic_function_(		"PFNGLACTIVEVARYINGNVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLGETVARYINGLOCATIONNVPROC = _rpythonic_function_(		"PFNGLGETVARYINGLOCATIONNVPROC", ctypes.c_int, [
	("program",		ctypes.c_uint),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLGETACTIVEVARYINGNVPROC = _rpythonic_function_(		"PFNGLGETACTIVEVARYINGNVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("bufSize",		ctypes.c_int),
	("length",		ctypes.POINTER(ctypes.c_int)),
	("size",		ctypes.POINTER(ctypes.c_int)),
	("C_type",		ctypes.POINTER(ctypes.c_uint)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC = _rpythonic_function_(		"PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("location",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC = _rpythonic_function_(		"PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC", ctypes.c_void_p, [
	("count",		ctypes.c_int),
	("attribs",		ctypes.POINTER(ctypes.c_int)),
	("nbuffers",		ctypes.c_int),
	("bufstreams",		ctypes.POINTER(ctypes.c_int)),
	("bufferMode",		ctypes.c_uint),] )

PFNGLUNIFORMBUFFEREXTPROC = _rpythonic_function_(		"PFNGLUNIFORMBUFFEREXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("buffer",		ctypes.c_uint),] )

PFNGLGETUNIFORMBUFFERSIZEEXTPROC = _rpythonic_function_(		"PFNGLGETUNIFORMBUFFERSIZEEXTPROC", ctypes.c_int, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),] )

PFNGLGETUNIFORMOFFSETEXTPROC = _rpythonic_function_(		"PFNGLGETUNIFORMOFFSETEXTPROC", ctypes.c_int, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),] )

PFNGLTEXPARAMETERIIVEXTPROC = _rpythonic_function_(		"PFNGLTEXPARAMETERIIVEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLTEXPARAMETERIUIVEXTPROC = _rpythonic_function_(		"PFNGLTEXPARAMETERIUIVEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLGETTEXPARAMETERIIVEXTPROC = _rpythonic_function_(		"PFNGLGETTEXPARAMETERIIVEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETTEXPARAMETERIUIVEXTPROC = _rpythonic_function_(		"PFNGLGETTEXPARAMETERIUIVEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLCLEARCOLORIIEXTPROC = _rpythonic_function_(		"PFNGLCLEARCOLORIIEXTPROC", ctypes.c_void_p, [
	("red",		ctypes.c_int),
	("green",		ctypes.c_int),
	("blue",		ctypes.c_int),
	("alpha",		ctypes.c_int),] )

PFNGLCLEARCOLORIUIEXTPROC = _rpythonic_function_(		"PFNGLCLEARCOLORIUIEXTPROC", ctypes.c_void_p, [
	("red",		ctypes.c_uint),
	("green",		ctypes.c_uint),
	("blue",		ctypes.c_uint),
	("alpha",		ctypes.c_uint),] )

PFNGLFRAMETERMINATORGREMEDYPROC = _rpythonic_function_(		"PFNGLFRAMETERMINATORGREMEDYPROC", ctypes.c_void_p, [] )

PFNGLBEGINCONDITIONALRENDERNVPROC = _rpythonic_function_(		"PFNGLBEGINCONDITIONALRENDERNVPROC", ctypes.c_void_p, [
	("C_id",		ctypes.c_uint),
	("mode",		ctypes.c_uint),] )

PFNGLENDCONDITIONALRENDERNVPROC = _rpythonic_function_(		"PFNGLENDCONDITIONALRENDERNVPROC", ctypes.c_void_p, [] )

PFNGLPRESENTFRAMEKEYEDNVPROC = _rpythonic_function_(		"PFNGLPRESENTFRAMEKEYEDNVPROC", ctypes.c_void_p, [
	("video_slot",		ctypes.c_uint),
	("minPresentTime",		ctypes.c_uint64),
	("beginPresentTimeId",		ctypes.c_uint),
	("presentDurationId",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("target0",		ctypes.c_uint),
	("fill0",		ctypes.c_uint),
	("key0",		ctypes.c_uint),
	("target1",		ctypes.c_uint),
	("fill1",		ctypes.c_uint),
	("key1",		ctypes.c_uint),] )

PFNGLPRESENTFRAMEDUALFILLNVPROC = _rpythonic_function_(		"PFNGLPRESENTFRAMEDUALFILLNVPROC", ctypes.c_void_p, [
	("video_slot",		ctypes.c_uint),
	("minPresentTime",		ctypes.c_uint64),
	("beginPresentTimeId",		ctypes.c_uint),
	("presentDurationId",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("target0",		ctypes.c_uint),
	("fill0",		ctypes.c_uint),
	("target1",		ctypes.c_uint),
	("fill1",		ctypes.c_uint),
	("target2",		ctypes.c_uint),
	("fill2",		ctypes.c_uint),
	("target3",		ctypes.c_uint),
	("fill3",		ctypes.c_uint),] )

PFNGLGETVIDEOIVNVPROC = _rpythonic_function_(		"PFNGLGETVIDEOIVNVPROC", ctypes.c_void_p, [
	("video_slot",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETVIDEOUIVNVPROC = _rpythonic_function_(		"PFNGLGETVIDEOUIVNVPROC", ctypes.c_void_p, [
	("video_slot",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLGETVIDEOI64VNVPROC = _rpythonic_function_(		"PFNGLGETVIDEOI64VNVPROC", ctypes.c_void_p, [
	("video_slot",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int64)),] )

PFNGLGETVIDEOUI64VNVPROC = _rpythonic_function_(		"PFNGLGETVIDEOUI64VNVPROC", ctypes.c_void_p, [
	("video_slot",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_uint64)),] )

PFNGLBEGINTRANSFORMFEEDBACKEXTPROC = _rpythonic_function_(		"PFNGLBEGINTRANSFORMFEEDBACKEXTPROC", ctypes.c_void_p, [
	("primitiveMode",		ctypes.c_uint),] )

PFNGLENDTRANSFORMFEEDBACKEXTPROC = _rpythonic_function_(		"PFNGLENDTRANSFORMFEEDBACKEXTPROC", ctypes.c_void_p, [] )

PFNGLBINDBUFFERRANGEEXTPROC = _rpythonic_function_(		"PFNGLBINDBUFFERRANGEEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("buffer",		ctypes.c_uint),
	("offset",		ctypes.c_int),
	("size",		ctypes.c_int),] )

PFNGLBINDBUFFEROFFSETEXTPROC = _rpythonic_function_(		"PFNGLBINDBUFFEROFFSETEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("buffer",		ctypes.c_uint),
	("offset",		ctypes.c_int),] )

PFNGLBINDBUFFERBASEEXTPROC = _rpythonic_function_(		"PFNGLBINDBUFFERBASEEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("buffer",		ctypes.c_uint),] )

PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC = _rpythonic_function_(		"PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("varyings",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("bufferMode",		ctypes.c_uint),] )

PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC = _rpythonic_function_(		"PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("bufSize",		ctypes.c_int),
	("length",		ctypes.POINTER(ctypes.c_int)),
	("size",		ctypes.POINTER(ctypes.c_int)),
	("C_type",		ctypes.POINTER(ctypes.c_uint)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLCLIENTATTRIBDEFAULTEXTPROC = _rpythonic_function_(		"PFNGLCLIENTATTRIBDEFAULTEXTPROC", ctypes.c_void_p, [
	("mask",		ctypes.c_uint),] )

PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC = _rpythonic_function_(		"PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC", ctypes.c_void_p, [
	("mask",		ctypes.c_uint),] )

PFNGLMATRIXLOADFEXTPROC = _rpythonic_function_(		"PFNGLMATRIXLOADFEXTPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("m",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLMATRIXLOADDEXTPROC = _rpythonic_function_(		"PFNGLMATRIXLOADDEXTPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("m",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLMATRIXMULTFEXTPROC = _rpythonic_function_(		"PFNGLMATRIXMULTFEXTPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("m",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLMATRIXMULTDEXTPROC = _rpythonic_function_(		"PFNGLMATRIXMULTDEXTPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("m",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLMATRIXLOADIDENTITYEXTPROC = _rpythonic_function_(		"PFNGLMATRIXLOADIDENTITYEXTPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),] )

PFNGLMATRIXROTATEFEXTPROC = _rpythonic_function_(		"PFNGLMATRIXROTATEFEXTPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("angle",		ctypes.c_float),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

PFNGLMATRIXROTATEDEXTPROC = _rpythonic_function_(		"PFNGLMATRIXROTATEDEXTPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("angle",		ctypes.c_double),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("z",		ctypes.c_double),] )

PFNGLMATRIXTRANSLATEFEXTPROC = _rpythonic_function_(		"PFNGLMATRIXTRANSLATEFEXTPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

PFNGLMATRIXSCALEFEXTPROC = _rpythonic_function_(		"PFNGLMATRIXSCALEFEXTPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

PFNGLMATRIXSCALEDEXTPROC = _rpythonic_function_(		"PFNGLMATRIXSCALEDEXTPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("z",		ctypes.c_double),] )

PFNGLMATRIXTRANSLATEDEXTPROC = _rpythonic_function_(		"PFNGLMATRIXTRANSLATEDEXTPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("z",		ctypes.c_double),] )

PFNGLMATRIXFRUSTUMEXTPROC = _rpythonic_function_(		"PFNGLMATRIXFRUSTUMEXTPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("left",		ctypes.c_double),
	("right",		ctypes.c_double),
	("bottom",		ctypes.c_double),
	("top",		ctypes.c_double),
	("zNear",		ctypes.c_double),
	("zFar",		ctypes.c_double),] )

PFNGLMATRIXORTHOEXTPROC = _rpythonic_function_(		"PFNGLMATRIXORTHOEXTPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("left",		ctypes.c_double),
	("right",		ctypes.c_double),
	("bottom",		ctypes.c_double),
	("top",		ctypes.c_double),
	("zNear",		ctypes.c_double),
	("zFar",		ctypes.c_double),] )

PFNGLMATRIXPOPEXTPROC = _rpythonic_function_(		"PFNGLMATRIXPOPEXTPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),] )

PFNGLMATRIXPUSHEXTPROC = _rpythonic_function_(		"PFNGLMATRIXPUSHEXTPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),] )

PFNGLMATRIXLOADTRANSPOSEFEXTPROC = _rpythonic_function_(		"PFNGLMATRIXLOADTRANSPOSEFEXTPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("m",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLMATRIXLOADTRANSPOSEDEXTPROC = _rpythonic_function_(		"PFNGLMATRIXLOADTRANSPOSEDEXTPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("m",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLMATRIXMULTTRANSPOSEFEXTPROC = _rpythonic_function_(		"PFNGLMATRIXMULTTRANSPOSEFEXTPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("m",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLMATRIXMULTTRANSPOSEDEXTPROC = _rpythonic_function_(		"PFNGLMATRIXMULTTRANSPOSEDEXTPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("m",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLTEXTUREPARAMETERFEXTPROC = _rpythonic_function_(		"PFNGLTEXTUREPARAMETERFEXTPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_float),] )

PFNGLTEXTUREPARAMETERFVEXTPROC = _rpythonic_function_(		"PFNGLTEXTUREPARAMETERFVEXTPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLTEXTUREPARAMETERIEXTPROC = _rpythonic_function_(		"PFNGLTEXTUREPARAMETERIEXTPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_int),] )

PFNGLTEXTUREPARAMETERIVEXTPROC = _rpythonic_function_(		"PFNGLTEXTUREPARAMETERIVEXTPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLTEXTUREIMAGE1DEXTPROC = _rpythonic_function_(		"PFNGLTEXTUREIMAGE1DEXTPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("internalformat",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("border",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("pixels",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLTEXTUREIMAGE2DEXTPROC = _rpythonic_function_(		"PFNGLTEXTUREIMAGE2DEXTPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("internalformat",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("border",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("pixels",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLTEXTURESUBIMAGE2DEXTPROC = _rpythonic_function_(		"PFNGLTEXTURESUBIMAGE2DEXTPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("xoffset",		ctypes.c_int),
	("yoffset",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("pixels",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLTEXTURESUBIMAGE1DEXTPROC = _rpythonic_function_(		"PFNGLTEXTURESUBIMAGE1DEXTPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("xoffset",		ctypes.c_int),
	("width",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("pixels",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLCOPYTEXTUREIMAGE1DEXTPROC = _rpythonic_function_(		"PFNGLCOPYTEXTUREIMAGE1DEXTPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("internalformat",		ctypes.c_uint),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("border",		ctypes.c_int),] )

PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC = _rpythonic_function_(		"PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("xoffset",		ctypes.c_int),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),] )

PFNGLCOPYTEXTUREIMAGE2DEXTPROC = _rpythonic_function_(		"PFNGLCOPYTEXTUREIMAGE2DEXTPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("internalformat",		ctypes.c_uint),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("border",		ctypes.c_int),] )

PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC = _rpythonic_function_(		"PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("xoffset",		ctypes.c_int),
	("yoffset",		ctypes.c_int),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

PFNGLGETTEXTUREIMAGEEXTPROC = _rpythonic_function_(		"PFNGLGETTEXTUREIMAGEEXTPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("pixels",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLGETTEXTUREPARAMETERFVEXTPROC = _rpythonic_function_(		"PFNGLGETTEXTUREPARAMETERFVEXTPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETTEXTUREPARAMETERIVEXTPROC = _rpythonic_function_(		"PFNGLGETTEXTUREPARAMETERIVEXTPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC = _rpythonic_function_(		"PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC = _rpythonic_function_(		"PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLTEXTUREIMAGE3DEXTPROC = _rpythonic_function_(		"PFNGLTEXTUREIMAGE3DEXTPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("internalformat",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("depth",		ctypes.c_int),
	("border",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("pixels",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLTEXTURESUBIMAGE3DEXTPROC = _rpythonic_function_(		"PFNGLTEXTURESUBIMAGE3DEXTPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("xoffset",		ctypes.c_int),
	("yoffset",		ctypes.c_int),
	("zoffset",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("depth",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("pixels",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC = _rpythonic_function_(		"PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("xoffset",		ctypes.c_int),
	("yoffset",		ctypes.c_int),
	("zoffset",		ctypes.c_int),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

PFNGLMULTITEXPARAMETERFEXTPROC = _rpythonic_function_(		"PFNGLMULTITEXPARAMETERFEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_float),] )

PFNGLMULTITEXPARAMETERIEXTPROC = _rpythonic_function_(		"PFNGLMULTITEXPARAMETERIEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_int),] )

PFNGLMULTITEXPARAMETERFVEXTPROC = _rpythonic_function_(		"PFNGLMULTITEXPARAMETERFVEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLMULTITEXPARAMETERIVEXTPROC = _rpythonic_function_(		"PFNGLMULTITEXPARAMETERIVEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLMULTITEXIMAGE1DEXTPROC = _rpythonic_function_(		"PFNGLMULTITEXIMAGE1DEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("internalformat",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("border",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("pixels",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLMULTITEXIMAGE2DEXTPROC = _rpythonic_function_(		"PFNGLMULTITEXIMAGE2DEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("internalformat",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("border",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("pixels",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLMULTITEXSUBIMAGE2DEXTPROC = _rpythonic_function_(		"PFNGLMULTITEXSUBIMAGE2DEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("xoffset",		ctypes.c_int),
	("yoffset",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("pixels",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLMULTITEXSUBIMAGE1DEXTPROC = _rpythonic_function_(		"PFNGLMULTITEXSUBIMAGE1DEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("xoffset",		ctypes.c_int),
	("width",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("pixels",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLCOPYMULTITEXIMAGE1DEXTPROC = _rpythonic_function_(		"PFNGLCOPYMULTITEXIMAGE1DEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("internalformat",		ctypes.c_uint),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("border",		ctypes.c_int),] )

PFNGLCOPYMULTITEXIMAGE2DEXTPROC = _rpythonic_function_(		"PFNGLCOPYMULTITEXIMAGE2DEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("internalformat",		ctypes.c_uint),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("border",		ctypes.c_int),] )

PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC = _rpythonic_function_(		"PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("xoffset",		ctypes.c_int),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),] )

PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC = _rpythonic_function_(		"PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("xoffset",		ctypes.c_int),
	("yoffset",		ctypes.c_int),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

PFNGLGETMULTITEXIMAGEEXTPROC = _rpythonic_function_(		"PFNGLGETMULTITEXIMAGEEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("pixels",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLGETMULTITEXPARAMETERFVEXTPROC = _rpythonic_function_(		"PFNGLGETMULTITEXPARAMETERFVEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETMULTITEXPARAMETERIVEXTPROC = _rpythonic_function_(		"PFNGLGETMULTITEXPARAMETERIVEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC = _rpythonic_function_(		"PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC = _rpythonic_function_(		"PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLMULTITEXSUBIMAGE3DEXTPROC = _rpythonic_function_(		"PFNGLMULTITEXSUBIMAGE3DEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("xoffset",		ctypes.c_int),
	("yoffset",		ctypes.c_int),
	("zoffset",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("depth",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("pixels",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLMULTITEXIMAGE3DEXTPROC = _rpythonic_function_(		"PFNGLMULTITEXIMAGE3DEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("internalformat",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("depth",		ctypes.c_int),
	("border",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("pixels",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC = _rpythonic_function_(		"PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("xoffset",		ctypes.c_int),
	("yoffset",		ctypes.c_int),
	("zoffset",		ctypes.c_int),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

PFNGLBINDMULTITEXTUREEXTPROC = _rpythonic_function_(		"PFNGLBINDMULTITEXTUREEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("texture",		ctypes.c_uint),] )

PFNGLENABLECLIENTSTATEINDEXEDEXTPROC = _rpythonic_function_(		"PFNGLENABLECLIENTSTATEINDEXEDEXTPROC", ctypes.c_void_p, [
	("array",		ctypes.c_uint),
	("index",		ctypes.c_uint),] )

PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC = _rpythonic_function_(		"PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC", ctypes.c_void_p, [
	("array",		ctypes.c_uint),
	("index",		ctypes.c_uint),] )

PFNGLMULTITEXCOORDPOINTEREXTPROC = _rpythonic_function_(		"PFNGLMULTITEXCOORDPOINTEREXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("size",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("stride",		ctypes.c_int),
	("pointer",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLMULTITEXENVFEXTPROC = _rpythonic_function_(		"PFNGLMULTITEXENVFEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_float),] )

PFNGLMULTITEXENVIEXTPROC = _rpythonic_function_(		"PFNGLMULTITEXENVIEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_int),] )

PFNGLMULTITEXENVFVEXTPROC = _rpythonic_function_(		"PFNGLMULTITEXENVFVEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLMULTITEXENVIVEXTPROC = _rpythonic_function_(		"PFNGLMULTITEXENVIVEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLMULTITEXGENDEXTPROC = _rpythonic_function_(		"PFNGLMULTITEXGENDEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("coord",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_double),] )

PFNGLMULTITEXGENDVEXTPROC = _rpythonic_function_(		"PFNGLMULTITEXGENDVEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("coord",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLMULTITEXGENFEXTPROC = _rpythonic_function_(		"PFNGLMULTITEXGENFEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("coord",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_float),] )

PFNGLMULTITEXGENFVEXTPROC = _rpythonic_function_(		"PFNGLMULTITEXGENFVEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("coord",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLMULTITEXGENIEXTPROC = _rpythonic_function_(		"PFNGLMULTITEXGENIEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("coord",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("param",		ctypes.c_int),] )

PFNGLMULTITEXGENIVEXTPROC = _rpythonic_function_(		"PFNGLMULTITEXGENIVEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("coord",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETMULTITEXENVFVEXTPROC = _rpythonic_function_(		"PFNGLGETMULTITEXENVFVEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETMULTITEXGENDVEXTPROC = _rpythonic_function_(		"PFNGLGETMULTITEXGENDVEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("coord",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLGETMULTITEXENVIVEXTPROC = _rpythonic_function_(		"PFNGLGETMULTITEXENVIVEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETMULTITEXGENFVEXTPROC = _rpythonic_function_(		"PFNGLGETMULTITEXGENFVEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("coord",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETMULTITEXGENIVEXTPROC = _rpythonic_function_(		"PFNGLGETMULTITEXGENIVEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("coord",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETFLOATINDEXEDVEXTPROC = _rpythonic_function_(		"PFNGLGETFLOATINDEXEDVEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETDOUBLEINDEXEDVEXTPROC = _rpythonic_function_(		"PFNGLGETDOUBLEINDEXEDVEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLGETPOINTERINDEXEDVEXTPROC = _rpythonic_function_(		"PFNGLGETPOINTERINDEXEDVEXTPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC = _rpythonic_function_(		"PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("internalformat",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("depth",		ctypes.c_int),
	("border",		ctypes.c_int),
	("imageSize",		ctypes.c_int),
	("bits",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC = _rpythonic_function_(		"PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("internalformat",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("border",		ctypes.c_int),
	("imageSize",		ctypes.c_int),
	("bits",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC = _rpythonic_function_(		"PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("xoffset",		ctypes.c_int),
	("yoffset",		ctypes.c_int),
	("zoffset",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("depth",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("imageSize",		ctypes.c_int),
	("bits",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC = _rpythonic_function_(		"PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("internalformat",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("border",		ctypes.c_int),
	("imageSize",		ctypes.c_int),
	("bits",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC = _rpythonic_function_(		"PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("xoffset",		ctypes.c_int),
	("yoffset",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("imageSize",		ctypes.c_int),
	("bits",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC = _rpythonic_function_(		"PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("xoffset",		ctypes.c_int),
	("width",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("imageSize",		ctypes.c_int),
	("bits",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC = _rpythonic_function_(		"PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("lod",		ctypes.c_int),
	("img",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC = _rpythonic_function_(		"PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("internalformat",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("border",		ctypes.c_int),
	("imageSize",		ctypes.c_int),
	("bits",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC = _rpythonic_function_(		"PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("internalformat",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("depth",		ctypes.c_int),
	("border",		ctypes.c_int),
	("imageSize",		ctypes.c_int),
	("bits",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC = _rpythonic_function_(		"PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("xoffset",		ctypes.c_int),
	("yoffset",		ctypes.c_int),
	("zoffset",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("depth",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("imageSize",		ctypes.c_int),
	("bits",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC = _rpythonic_function_(		"PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("internalformat",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("border",		ctypes.c_int),
	("imageSize",		ctypes.c_int),
	("bits",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC = _rpythonic_function_(		"PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("xoffset",		ctypes.c_int),
	("yoffset",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("imageSize",		ctypes.c_int),
	("bits",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC = _rpythonic_function_(		"PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("xoffset",		ctypes.c_int),
	("width",		ctypes.c_int),
	("format",		ctypes.c_uint),
	("imageSize",		ctypes.c_int),
	("bits",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC = _rpythonic_function_(		"PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("lod",		ctypes.c_int),
	("img",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLNAMEDPROGRAMSTRINGEXTPROC = _rpythonic_function_(		"PFNGLNAMEDPROGRAMSTRINGEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("format",		ctypes.c_uint),
	("C_len",		ctypes.c_int),
	("string",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC = _rpythonic_function_(		"PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("z",		ctypes.c_double),
	("w",		ctypes.c_double),] )

PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC = _rpythonic_function_(		"PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC = _rpythonic_function_(		"PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),
	("w",		ctypes.c_float),] )

PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC = _rpythonic_function_(		"PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC = _rpythonic_function_(		"PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC = _rpythonic_function_(		"PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETNAMEDPROGRAMIVEXTPROC = _rpythonic_function_(		"PFNGLGETNAMEDPROGRAMIVEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETNAMEDPROGRAMSTRINGEXTPROC = _rpythonic_function_(		"PFNGLGETNAMEDPROGRAMSTRINGEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("string",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC = _rpythonic_function_(		"PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC = _rpythonic_function_(		"PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("z",		ctypes.c_int),
	("w",		ctypes.c_int),] )

PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC = _rpythonic_function_(		"PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC = _rpythonic_function_(		"PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC = _rpythonic_function_(		"PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("x",		ctypes.c_uint),
	("y",		ctypes.c_uint),
	("z",		ctypes.c_uint),
	("w",		ctypes.c_uint),] )

PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC = _rpythonic_function_(		"PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC = _rpythonic_function_(		"PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("params",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC = _rpythonic_function_(		"PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC = _rpythonic_function_(		"PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLTEXTUREPARAMETERIIVEXTPROC = _rpythonic_function_(		"PFNGLTEXTUREPARAMETERIIVEXTPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLTEXTUREPARAMETERIUIVEXTPROC = _rpythonic_function_(		"PFNGLTEXTUREPARAMETERIUIVEXTPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLGETTEXTUREPARAMETERIIVEXTPROC = _rpythonic_function_(		"PFNGLGETTEXTUREPARAMETERIIVEXTPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETTEXTUREPARAMETERIUIVEXTPROC = _rpythonic_function_(		"PFNGLGETTEXTUREPARAMETERIUIVEXTPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLMULTITEXPARAMETERIIVEXTPROC = _rpythonic_function_(		"PFNGLMULTITEXPARAMETERIIVEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLMULTITEXPARAMETERIUIVEXTPROC = _rpythonic_function_(		"PFNGLMULTITEXPARAMETERIUIVEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLGETMULTITEXPARAMETERIIVEXTPROC = _rpythonic_function_(		"PFNGLGETMULTITEXPARAMETERIIVEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETMULTITEXPARAMETERIUIVEXTPROC = _rpythonic_function_(		"PFNGLGETMULTITEXPARAMETERIUIVEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLPROGRAMUNIFORM1FEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM1FEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("v0",		ctypes.c_float),] )

PFNGLPROGRAMUNIFORM2FEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM2FEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("v0",		ctypes.c_float),
	("v1",		ctypes.c_float),] )

PFNGLPROGRAMUNIFORM3FEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM3FEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("v0",		ctypes.c_float),
	("v1",		ctypes.c_float),
	("v2",		ctypes.c_float),] )

PFNGLPROGRAMUNIFORM4FEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM4FEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("v0",		ctypes.c_float),
	("v1",		ctypes.c_float),
	("v2",		ctypes.c_float),
	("v3",		ctypes.c_float),] )

PFNGLPROGRAMUNIFORM1IEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM1IEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("v0",		ctypes.c_int),] )

PFNGLPROGRAMUNIFORM2IEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM2IEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("v0",		ctypes.c_int),
	("v1",		ctypes.c_int),] )

PFNGLPROGRAMUNIFORM3IEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM3IEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("v0",		ctypes.c_int),
	("v1",		ctypes.c_int),
	("v2",		ctypes.c_int),] )

PFNGLPROGRAMUNIFORM4IEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM4IEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("v0",		ctypes.c_int),
	("v1",		ctypes.c_int),
	("v2",		ctypes.c_int),
	("v3",		ctypes.c_int),] )

PFNGLPROGRAMUNIFORM1FVEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM1FVEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLPROGRAMUNIFORM2FVEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM2FVEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLPROGRAMUNIFORM3FVEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM3FVEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLPROGRAMUNIFORM4FVEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM4FVEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLPROGRAMUNIFORM1IVEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM1IVEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLPROGRAMUNIFORM2IVEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM2IVEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLPROGRAMUNIFORM3IVEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM3IVEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLPROGRAMUNIFORM4IVEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM4IVEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLPROGRAMUNIFORM1UIEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM1UIEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("v0",		ctypes.c_uint),] )

PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLPROGRAMUNIFORM2UIEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM2UIEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("v0",		ctypes.c_uint),
	("v1",		ctypes.c_uint),] )

PFNGLPROGRAMUNIFORM3UIEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM3UIEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("v0",		ctypes.c_uint),
	("v1",		ctypes.c_uint),
	("v2",		ctypes.c_uint),] )

PFNGLPROGRAMUNIFORM4UIEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM4UIEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("v0",		ctypes.c_uint),
	("v1",		ctypes.c_uint),
	("v2",		ctypes.c_uint),
	("v3",		ctypes.c_uint),] )

PFNGLPROGRAMUNIFORM1UIVEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM1UIVEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLPROGRAMUNIFORM2UIVEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM2UIVEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLPROGRAMUNIFORM4UIVEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM4UIVEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLPROGRAMUNIFORM3UIVEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM3UIVEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLNAMEDBUFFERDATAEXTPROC = _rpythonic_function_(		"PFNGLNAMEDBUFFERDATAEXTPROC", ctypes.c_void_p, [
	("buffer",		ctypes.c_uint),
	("size",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("usage",		ctypes.c_uint),] )

PFNGLNAMEDBUFFERSUBDATAEXTPROC = _rpythonic_function_(		"PFNGLNAMEDBUFFERSUBDATAEXTPROC", ctypes.c_void_p, [
	("buffer",		ctypes.c_uint),
	("offset",		ctypes.c_int),
	("size",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLMAPNAMEDBUFFEREXTPROC = _rpythonic_function_(		"PFNGLMAPNAMEDBUFFEREXTPROC", ctypes.POINTER(ctypes.c_void_p), [
	("buffer",		ctypes.c_uint),
	("access",		ctypes.c_uint),] )

PFNGLUNMAPNAMEDBUFFEREXTPROC = _rpythonic_function_(		"PFNGLUNMAPNAMEDBUFFEREXTPROC", ctypes.c_ubyte, [
	("buffer",		ctypes.c_uint),] )

PFNGLMAPNAMEDBUFFERRANGEEXTPROC = _rpythonic_function_(		"PFNGLMAPNAMEDBUFFERRANGEEXTPROC", ctypes.POINTER(ctypes.c_void_p), [
	("buffer",		ctypes.c_uint),
	("offset",		ctypes.c_int),
	("length",		ctypes.c_int),
	("access",		ctypes.c_uint),] )

PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC = _rpythonic_function_(		"PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC", ctypes.c_void_p, [
	("buffer",		ctypes.c_uint),
	("offset",		ctypes.c_int),
	("length",		ctypes.c_int),] )

PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC = _rpythonic_function_(		"PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC", ctypes.c_void_p, [
	("readBuffer",		ctypes.c_uint),
	("writeBuffer",		ctypes.c_uint),
	("readOffset",		ctypes.c_int),
	("writeOffset",		ctypes.c_int),
	("size",		ctypes.c_int),] )

PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC = _rpythonic_function_(		"PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC", ctypes.c_void_p, [
	("buffer",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETNAMEDBUFFERPOINTERVEXTPROC = _rpythonic_function_(		"PFNGLGETNAMEDBUFFERPOINTERVEXTPROC", ctypes.c_void_p, [
	("buffer",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

PFNGLGETNAMEDBUFFERSUBDATAEXTPROC = _rpythonic_function_(		"PFNGLGETNAMEDBUFFERSUBDATAEXTPROC", ctypes.c_void_p, [
	("buffer",		ctypes.c_uint),
	("offset",		ctypes.c_int),
	("size",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLTEXTUREBUFFEREXTPROC = _rpythonic_function_(		"PFNGLTEXTUREBUFFEREXTPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("internalformat",		ctypes.c_uint),
	("buffer",		ctypes.c_uint),] )

PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC = _rpythonic_function_(		"PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC", ctypes.c_void_p, [
	("renderbuffer",		ctypes.c_uint),
	("internalformat",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

PFNGLMULTITEXBUFFEREXTPROC = _rpythonic_function_(		"PFNGLMULTITEXBUFFEREXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("internalformat",		ctypes.c_uint),
	("buffer",		ctypes.c_uint),] )

PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC = _rpythonic_function_(		"PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC", ctypes.c_void_p, [
	("renderbuffer",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC = _rpythonic_function_(		"PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC", ctypes.c_uint, [
	("framebuffer",		ctypes.c_uint),
	("target",		ctypes.c_uint),] )

PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC = _rpythonic_function_(		"PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC", ctypes.c_void_p, [
	("framebuffer",		ctypes.c_uint),
	("attachment",		ctypes.c_uint),
	("textarget",		ctypes.c_uint),
	("texture",		ctypes.c_uint),
	("level",		ctypes.c_int),] )

PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC = _rpythonic_function_(		"PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC", ctypes.c_void_p, [
	("framebuffer",		ctypes.c_uint),
	("attachment",		ctypes.c_uint),
	("textarget",		ctypes.c_uint),
	("texture",		ctypes.c_uint),
	("level",		ctypes.c_int),] )

PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC = _rpythonic_function_(		"PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC", ctypes.c_void_p, [
	("framebuffer",		ctypes.c_uint),
	("attachment",		ctypes.c_uint),
	("textarget",		ctypes.c_uint),
	("texture",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("zoffset",		ctypes.c_int),] )

PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC = _rpythonic_function_(		"PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC", ctypes.c_void_p, [
	("framebuffer",		ctypes.c_uint),
	("attachment",		ctypes.c_uint),
	("renderbuffertarget",		ctypes.c_uint),
	("renderbuffer",		ctypes.c_uint),] )

PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC = _rpythonic_function_(		"PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC", ctypes.c_void_p, [
	("framebuffer",		ctypes.c_uint),
	("attachment",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGENERATETEXTUREMIPMAPEXTPROC = _rpythonic_function_(		"PFNGLGENERATETEXTUREMIPMAPEXTPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),
	("target",		ctypes.c_uint),] )

PFNGLGENERATEMULTITEXMIPMAPEXTPROC = _rpythonic_function_(		"PFNGLGENERATEMULTITEXMIPMAPEXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("target",		ctypes.c_uint),] )

PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC = _rpythonic_function_(		"PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC", ctypes.c_void_p, [
	("framebuffer",		ctypes.c_uint),
	("mode",		ctypes.c_uint),] )

PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC = _rpythonic_function_(		"PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC", ctypes.c_void_p, [
	("framebuffer",		ctypes.c_uint),
	("n",		ctypes.c_int),
	("bufs",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLFRAMEBUFFERREADBUFFEREXTPROC = _rpythonic_function_(		"PFNGLFRAMEBUFFERREADBUFFEREXTPROC", ctypes.c_void_p, [
	("framebuffer",		ctypes.c_uint),
	("mode",		ctypes.c_uint),] )

PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC = _rpythonic_function_(		"PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC", ctypes.c_void_p, [
	("framebuffer",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC = _rpythonic_function_(		"PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC", ctypes.c_void_p, [
	("renderbuffer",		ctypes.c_uint),
	("samples",		ctypes.c_int),
	("internalformat",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC = _rpythonic_function_(		"PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC", ctypes.c_void_p, [
	("renderbuffer",		ctypes.c_uint),
	("coverageSamples",		ctypes.c_int),
	("colorSamples",		ctypes.c_int),
	("internalformat",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC = _rpythonic_function_(		"PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC", ctypes.c_void_p, [
	("framebuffer",		ctypes.c_uint),
	("attachment",		ctypes.c_uint),
	("texture",		ctypes.c_uint),
	("level",		ctypes.c_int),] )

PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC = _rpythonic_function_(		"PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC", ctypes.c_void_p, [
	("framebuffer",		ctypes.c_uint),
	("attachment",		ctypes.c_uint),
	("texture",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("layer",		ctypes.c_int),] )

PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC = _rpythonic_function_(		"PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC", ctypes.c_void_p, [
	("framebuffer",		ctypes.c_uint),
	("attachment",		ctypes.c_uint),
	("texture",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("face",		ctypes.c_uint),] )

PFNGLTEXTURERENDERBUFFEREXTPROC = _rpythonic_function_(		"PFNGLTEXTURERENDERBUFFEREXTPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("renderbuffer",		ctypes.c_uint),] )

PFNGLMULTITEXRENDERBUFFEREXTPROC = _rpythonic_function_(		"PFNGLMULTITEXRENDERBUFFEREXTPROC", ctypes.c_void_p, [
	("texunit",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("renderbuffer",		ctypes.c_uint),] )

PFNGLPROGRAMUNIFORM1DEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM1DEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("x",		ctypes.c_double),] )

PFNGLPROGRAMUNIFORM2DEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM2DEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),] )

PFNGLPROGRAMUNIFORM3DEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM3DEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("z",		ctypes.c_double),] )

PFNGLPROGRAMUNIFORM4DEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM4DEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("z",		ctypes.c_double),
	("w",		ctypes.c_double),] )

PFNGLPROGRAMUNIFORM1DVEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM1DVEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLPROGRAMUNIFORM2DVEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM2DVEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLPROGRAMUNIFORM3DVEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM3DVEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLPROGRAMUNIFORM4DVEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM4DVEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("transpose",		ctypes.c_ubyte),
	("value",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLGETMULTISAMPLEFVNVPROC = _rpythonic_function_(		"PFNGLGETMULTISAMPLEFVNVPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("val",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLSAMPLEMASKINDEXEDNVPROC = _rpythonic_function_(		"PFNGLSAMPLEMASKINDEXEDNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("mask",		ctypes.c_uint),] )

PFNGLTEXRENDERBUFFERNVPROC = _rpythonic_function_(		"PFNGLTEXRENDERBUFFERNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("renderbuffer",		ctypes.c_uint),] )

PFNGLBINDTRANSFORMFEEDBACKNVPROC = _rpythonic_function_(		"PFNGLBINDTRANSFORMFEEDBACKNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("C_id",		ctypes.c_uint),] )

PFNGLDELETETRANSFORMFEEDBACKSNVPROC = _rpythonic_function_(		"PFNGLDELETETRANSFORMFEEDBACKSNVPROC", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("ids",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLGENTRANSFORMFEEDBACKSNVPROC = _rpythonic_function_(		"PFNGLGENTRANSFORMFEEDBACKSNVPROC", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("ids",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLISTRANSFORMFEEDBACKNVPROC = _rpythonic_function_(		"PFNGLISTRANSFORMFEEDBACKNVPROC", ctypes.c_ubyte, [
	("C_id",		ctypes.c_uint),] )

PFNGLPAUSETRANSFORMFEEDBACKNVPROC = _rpythonic_function_(		"PFNGLPAUSETRANSFORMFEEDBACKNVPROC", ctypes.c_void_p, [] )

PFNGLRESUMETRANSFORMFEEDBACKNVPROC = _rpythonic_function_(		"PFNGLRESUMETRANSFORMFEEDBACKNVPROC", ctypes.c_void_p, [] )

PFNGLDRAWTRANSFORMFEEDBACKNVPROC = _rpythonic_function_(		"PFNGLDRAWTRANSFORMFEEDBACKNVPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("C_id",		ctypes.c_uint),] )

PFNGLGETPERFMONITORGROUPSAMDPROC = _rpythonic_function_(		"PFNGLGETPERFMONITORGROUPSAMDPROC", ctypes.c_void_p, [
	("numGroups",		ctypes.POINTER(ctypes.c_int)),
	("groupsSize",		ctypes.c_int),
	("groups",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLGETPERFMONITORCOUNTERSAMDPROC = _rpythonic_function_(		"PFNGLGETPERFMONITORCOUNTERSAMDPROC", ctypes.c_void_p, [
	("group",		ctypes.c_uint),
	("numCounters",		ctypes.POINTER(ctypes.c_int)),
	("maxActiveCounters",		ctypes.POINTER(ctypes.c_int)),
	("counterSize",		ctypes.c_int),
	("counters",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLGETPERFMONITORGROUPSTRINGAMDPROC = _rpythonic_function_(		"PFNGLGETPERFMONITORGROUPSTRINGAMDPROC", ctypes.c_void_p, [
	("group",		ctypes.c_uint),
	("bufSize",		ctypes.c_int),
	("length",		ctypes.POINTER(ctypes.c_int)),
	("groupString",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC = _rpythonic_function_(		"PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC", ctypes.c_void_p, [
	("group",		ctypes.c_uint),
	("counter",		ctypes.c_uint),
	("bufSize",		ctypes.c_int),
	("length",		ctypes.POINTER(ctypes.c_int)),
	("counterString",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLGETPERFMONITORCOUNTERINFOAMDPROC = _rpythonic_function_(		"PFNGLGETPERFMONITORCOUNTERINFOAMDPROC", ctypes.c_void_p, [
	("group",		ctypes.c_uint),
	("counter",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLGENPERFMONITORSAMDPROC = _rpythonic_function_(		"PFNGLGENPERFMONITORSAMDPROC", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("monitors",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLDELETEPERFMONITORSAMDPROC = _rpythonic_function_(		"PFNGLDELETEPERFMONITORSAMDPROC", ctypes.c_void_p, [
	("n",		ctypes.c_int),
	("monitors",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLSELECTPERFMONITORCOUNTERSAMDPROC = _rpythonic_function_(		"PFNGLSELECTPERFMONITORCOUNTERSAMDPROC", ctypes.c_void_p, [
	("monitor",		ctypes.c_uint),
	("enable",		ctypes.c_ubyte),
	("group",		ctypes.c_uint),
	("numCounters",		ctypes.c_int),
	("counterList",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLBEGINPERFMONITORAMDPROC = _rpythonic_function_(		"PFNGLBEGINPERFMONITORAMDPROC", ctypes.c_void_p, [
	("monitor",		ctypes.c_uint),] )

PFNGLENDPERFMONITORAMDPROC = _rpythonic_function_(		"PFNGLENDPERFMONITORAMDPROC", ctypes.c_void_p, [
	("monitor",		ctypes.c_uint),] )

PFNGLGETPERFMONITORCOUNTERDATAAMDPROC = _rpythonic_function_(		"PFNGLGETPERFMONITORCOUNTERDATAAMDPROC", ctypes.c_void_p, [
	("monitor",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("dataSize",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_uint)),
	("bytesWritten",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLTESSELLATIONFACTORAMDPROC = _rpythonic_function_(		"PFNGLTESSELLATIONFACTORAMDPROC", ctypes.c_void_p, [
	("factor",		ctypes.c_float),] )

PFNGLTESSELLATIONMODEAMDPROC = _rpythonic_function_(		"PFNGLTESSELLATIONMODEAMDPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),] )

PFNGLPROVOKINGVERTEXEXTPROC = _rpythonic_function_(		"PFNGLPROVOKINGVERTEXEXTPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),] )

PFNGLBLENDFUNCINDEXEDAMDPROC = _rpythonic_function_(		"PFNGLBLENDFUNCINDEXEDAMDPROC", ctypes.c_void_p, [
	("buf",		ctypes.c_uint),
	("src",		ctypes.c_uint),
	("dst",		ctypes.c_uint),] )

PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC = _rpythonic_function_(		"PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC", ctypes.c_void_p, [
	("buf",		ctypes.c_uint),
	("srcRGB",		ctypes.c_uint),
	("dstRGB",		ctypes.c_uint),
	("srcAlpha",		ctypes.c_uint),
	("dstAlpha",		ctypes.c_uint),] )

PFNGLBLENDEQUATIONINDEXEDAMDPROC = _rpythonic_function_(		"PFNGLBLENDEQUATIONINDEXEDAMDPROC", ctypes.c_void_p, [
	("buf",		ctypes.c_uint),
	("mode",		ctypes.c_uint),] )

PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC = _rpythonic_function_(		"PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC", ctypes.c_void_p, [
	("buf",		ctypes.c_uint),
	("modeRGB",		ctypes.c_uint),
	("modeAlpha",		ctypes.c_uint),] )

PFNGLTEXTURERANGEAPPLEPROC = _rpythonic_function_(		"PFNGLTEXTURERANGEAPPLEPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("length",		ctypes.c_int),
	("pointer",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC = _rpythonic_function_(		"PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

PFNGLENABLEVERTEXATTRIBAPPLEPROC = _rpythonic_function_(		"PFNGLENABLEVERTEXATTRIBAPPLEPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("pname",		ctypes.c_uint),] )

PFNGLDISABLEVERTEXATTRIBAPPLEPROC = _rpythonic_function_(		"PFNGLDISABLEVERTEXATTRIBAPPLEPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("pname",		ctypes.c_uint),] )

PFNGLISVERTEXATTRIBENABLEDAPPLEPROC = _rpythonic_function_(		"PFNGLISVERTEXATTRIBENABLEDAPPLEPROC", ctypes.c_ubyte, [
	("index",		ctypes.c_uint),
	("pname",		ctypes.c_uint),] )

PFNGLMAPVERTEXATTRIB1DAPPLEPROC = _rpythonic_function_(		"PFNGLMAPVERTEXATTRIB1DAPPLEPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("size",		ctypes.c_uint),
	("u1",		ctypes.c_double),
	("u2",		ctypes.c_double),
	("stride",		ctypes.c_int),
	("order",		ctypes.c_int),
	("points",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLMAPVERTEXATTRIB1FAPPLEPROC = _rpythonic_function_(		"PFNGLMAPVERTEXATTRIB1FAPPLEPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("size",		ctypes.c_uint),
	("u1",		ctypes.c_float),
	("u2",		ctypes.c_float),
	("stride",		ctypes.c_int),
	("order",		ctypes.c_int),
	("points",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLMAPVERTEXATTRIB2DAPPLEPROC = _rpythonic_function_(		"PFNGLMAPVERTEXATTRIB2DAPPLEPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("size",		ctypes.c_uint),
	("u1",		ctypes.c_double),
	("u2",		ctypes.c_double),
	("ustride",		ctypes.c_int),
	("uorder",		ctypes.c_int),
	("v1",		ctypes.c_double),
	("v2",		ctypes.c_double),
	("vstride",		ctypes.c_int),
	("vorder",		ctypes.c_int),
	("points",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLMAPVERTEXATTRIB2FAPPLEPROC = _rpythonic_function_(		"PFNGLMAPVERTEXATTRIB2FAPPLEPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("size",		ctypes.c_uint),
	("u1",		ctypes.c_float),
	("u2",		ctypes.c_float),
	("ustride",		ctypes.c_int),
	("uorder",		ctypes.c_int),
	("v1",		ctypes.c_float),
	("v2",		ctypes.c_float),
	("vstride",		ctypes.c_int),
	("vorder",		ctypes.c_int),
	("points",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLOBJECTPURGEABLEAPPLEPROC = _rpythonic_function_(		"PFNGLOBJECTPURGEABLEAPPLEPROC", ctypes.c_uint, [
	("objectType",		ctypes.c_uint),
	("name",		ctypes.c_uint),
	("option",		ctypes.c_uint),] )

PFNGLOBJECTUNPURGEABLEAPPLEPROC = _rpythonic_function_(		"PFNGLOBJECTUNPURGEABLEAPPLEPROC", ctypes.c_uint, [
	("objectType",		ctypes.c_uint),
	("name",		ctypes.c_uint),
	("option",		ctypes.c_uint),] )

PFNGLGETOBJECTPARAMETERIVAPPLEPROC = _rpythonic_function_(		"PFNGLGETOBJECTPARAMETERIVAPPLEPROC", ctypes.c_void_p, [
	("objectType",		ctypes.c_uint),
	("name",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLBEGINVIDEOCAPTURENVPROC = _rpythonic_function_(		"PFNGLBEGINVIDEOCAPTURENVPROC", ctypes.c_void_p, [
	("video_capture_slot",		ctypes.c_uint),] )

PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC = _rpythonic_function_(		"PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC", ctypes.c_void_p, [
	("video_capture_slot",		ctypes.c_uint),
	("stream",		ctypes.c_uint),
	("frame_region",		ctypes.c_uint),
	("offset",		ctypes.c_int),] )

PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC = _rpythonic_function_(		"PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC", ctypes.c_void_p, [
	("video_capture_slot",		ctypes.c_uint),
	("stream",		ctypes.c_uint),
	("frame_region",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("texture",		ctypes.c_uint),] )

PFNGLENDVIDEOCAPTURENVPROC = _rpythonic_function_(		"PFNGLENDVIDEOCAPTURENVPROC", ctypes.c_void_p, [
	("video_capture_slot",		ctypes.c_uint),] )

PFNGLGETVIDEOCAPTUREIVNVPROC = _rpythonic_function_(		"PFNGLGETVIDEOCAPTUREIVNVPROC", ctypes.c_void_p, [
	("video_capture_slot",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETVIDEOCAPTURESTREAMIVNVPROC = _rpythonic_function_(		"PFNGLGETVIDEOCAPTURESTREAMIVNVPROC", ctypes.c_void_p, [
	("video_capture_slot",		ctypes.c_uint),
	("stream",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLGETVIDEOCAPTURESTREAMFVNVPROC = _rpythonic_function_(		"PFNGLGETVIDEOCAPTURESTREAMFVNVPROC", ctypes.c_void_p, [
	("video_capture_slot",		ctypes.c_uint),
	("stream",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLGETVIDEOCAPTURESTREAMDVNVPROC = _rpythonic_function_(		"PFNGLGETVIDEOCAPTURESTREAMDVNVPROC", ctypes.c_void_p, [
	("video_capture_slot",		ctypes.c_uint),
	("stream",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLVIDEOCAPTURENVPROC = _rpythonic_function_(		"PFNGLVIDEOCAPTURENVPROC", ctypes.c_uint, [
	("video_capture_slot",		ctypes.c_uint),
	("sequence_num",		ctypes.POINTER(ctypes.c_uint)),
	("capture_time",		ctypes.POINTER(ctypes.c_uint64)),] )

PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC = _rpythonic_function_(		"PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC", ctypes.c_void_p, [
	("video_capture_slot",		ctypes.c_uint),
	("stream",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC = _rpythonic_function_(		"PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC", ctypes.c_void_p, [
	("video_capture_slot",		ctypes.c_uint),
	("stream",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC = _rpythonic_function_(		"PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC", ctypes.c_void_p, [
	("video_capture_slot",		ctypes.c_uint),
	("stream",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLCOPYIMAGESUBDATANVPROC = _rpythonic_function_(		"PFNGLCOPYIMAGESUBDATANVPROC", ctypes.c_void_p, [
	("srcName",		ctypes.c_uint),
	("srcTarget",		ctypes.c_uint),
	("srcLevel",		ctypes.c_int),
	("srcX",		ctypes.c_int),
	("srcY",		ctypes.c_int),
	("srcZ",		ctypes.c_int),
	("dstName",		ctypes.c_uint),
	("dstTarget",		ctypes.c_uint),
	("dstLevel",		ctypes.c_int),
	("dstX",		ctypes.c_int),
	("dstY",		ctypes.c_int),
	("dstZ",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("depth",		ctypes.c_int),] )

PFNGLUSESHADERPROGRAMEXTPROC = _rpythonic_function_(		"PFNGLUSESHADERPROGRAMEXTPROC", ctypes.c_void_p, [
	("C_type",		ctypes.c_uint),
	("program",		ctypes.c_uint),] )

PFNGLACTIVEPROGRAMEXTPROC = _rpythonic_function_(		"PFNGLACTIVEPROGRAMEXTPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),] )

PFNGLCREATESHADERPROGRAMEXTPROC = _rpythonic_function_(		"PFNGLCREATESHADERPROGRAMEXTPROC", ctypes.c_uint, [
	("C_type",		ctypes.c_uint),
	("string",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLMAKEBUFFERRESIDENTNVPROC = _rpythonic_function_(		"PFNGLMAKEBUFFERRESIDENTNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("access",		ctypes.c_uint),] )

PFNGLMAKEBUFFERNONRESIDENTNVPROC = _rpythonic_function_(		"PFNGLMAKEBUFFERNONRESIDENTNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),] )

PFNGLISBUFFERRESIDENTNVPROC = _rpythonic_function_(		"PFNGLISBUFFERRESIDENTNVPROC", ctypes.c_ubyte, [
	("target",		ctypes.c_uint),] )

PFNGLMAKENAMEDBUFFERRESIDENTNVPROC = _rpythonic_function_(		"PFNGLMAKENAMEDBUFFERRESIDENTNVPROC", ctypes.c_void_p, [
	("buffer",		ctypes.c_uint),
	("access",		ctypes.c_uint),] )

PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC = _rpythonic_function_(		"PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC", ctypes.c_void_p, [
	("buffer",		ctypes.c_uint),] )

PFNGLISNAMEDBUFFERRESIDENTNVPROC = _rpythonic_function_(		"PFNGLISNAMEDBUFFERRESIDENTNVPROC", ctypes.c_ubyte, [
	("buffer",		ctypes.c_uint),] )

PFNGLGETBUFFERPARAMETERUI64VNVPROC = _rpythonic_function_(		"PFNGLGETBUFFERPARAMETERUI64VNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_uint64)),] )

PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC = _rpythonic_function_(		"PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC", ctypes.c_void_p, [
	("buffer",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_uint64)),] )

PFNGLGETINTEGERUI64VNVPROC = _rpythonic_function_(		"PFNGLGETINTEGERUI64VNVPROC", ctypes.c_void_p, [
	("value",		ctypes.c_uint),
	("result",		ctypes.POINTER(ctypes.c_uint64)),] )

PFNGLUNIFORMUI64NVPROC = _rpythonic_function_(		"PFNGLUNIFORMUI64NVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("value",		ctypes.c_uint64),] )

PFNGLUNIFORMUI64VNVPROC = _rpythonic_function_(		"PFNGLUNIFORMUI64VNVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_uint64)),] )

PFNGLGETUNIFORMUI64VNVPROC = _rpythonic_function_(		"PFNGLGETUNIFORMUI64VNVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("params",		ctypes.POINTER(ctypes.c_uint64)),] )

PFNGLPROGRAMUNIFORMUI64NVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORMUI64NVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("value",		ctypes.c_uint64),] )

PFNGLPROGRAMUNIFORMUI64VNVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORMUI64VNVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_uint64)),] )

PFNGLBUFFERADDRESSRANGENVPROC = _rpythonic_function_(		"PFNGLBUFFERADDRESSRANGENVPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("address",		ctypes.c_uint64),
	("length",		ctypes.c_int),] )

PFNGLVERTEXFORMATNVPROC = _rpythonic_function_(		"PFNGLVERTEXFORMATNVPROC", ctypes.c_void_p, [
	("size",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("stride",		ctypes.c_int),] )

PFNGLNORMALFORMATNVPROC = _rpythonic_function_(		"PFNGLNORMALFORMATNVPROC", ctypes.c_void_p, [
	("C_type",		ctypes.c_uint),
	("stride",		ctypes.c_int),] )

PFNGLCOLORFORMATNVPROC = _rpythonic_function_(		"PFNGLCOLORFORMATNVPROC", ctypes.c_void_p, [
	("size",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("stride",		ctypes.c_int),] )

PFNGLINDEXFORMATNVPROC = _rpythonic_function_(		"PFNGLINDEXFORMATNVPROC", ctypes.c_void_p, [
	("C_type",		ctypes.c_uint),
	("stride",		ctypes.c_int),] )

PFNGLTEXCOORDFORMATNVPROC = _rpythonic_function_(		"PFNGLTEXCOORDFORMATNVPROC", ctypes.c_void_p, [
	("size",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("stride",		ctypes.c_int),] )

PFNGLEDGEFLAGFORMATNVPROC = _rpythonic_function_(		"PFNGLEDGEFLAGFORMATNVPROC", ctypes.c_void_p, [
	("stride",		ctypes.c_int),] )

PFNGLSECONDARYCOLORFORMATNVPROC = _rpythonic_function_(		"PFNGLSECONDARYCOLORFORMATNVPROC", ctypes.c_void_p, [
	("size",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("stride",		ctypes.c_int),] )

PFNGLFOGCOORDFORMATNVPROC = _rpythonic_function_(		"PFNGLFOGCOORDFORMATNVPROC", ctypes.c_void_p, [
	("C_type",		ctypes.c_uint),
	("stride",		ctypes.c_int),] )

PFNGLVERTEXATTRIBFORMATNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBFORMATNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("size",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("normalized",		ctypes.c_ubyte),
	("stride",		ctypes.c_int),] )

PFNGLVERTEXATTRIBIFORMATNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBIFORMATNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("size",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("stride",		ctypes.c_int),] )

PFNGLGETINTEGERUI64I_VNVPROC = _rpythonic_function_(		"PFNGLGETINTEGERUI64I_VNVPROC", ctypes.c_void_p, [
	("value",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("result",		ctypes.POINTER(ctypes.c_uint64)),] )

PFNGLTEXTUREBARRIERNVPROC = _rpythonic_function_(		"PFNGLTEXTUREBARRIERNVPROC", ctypes.c_void_p, [] )

PFNGLBINDIMAGETEXTUREEXTPROC = _rpythonic_function_(		"PFNGLBINDIMAGETEXTUREEXTPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("texture",		ctypes.c_uint),
	("level",		ctypes.c_int),
	("layered",		ctypes.c_ubyte),
	("layer",		ctypes.c_int),
	("access",		ctypes.c_uint),
	("format",		ctypes.c_int),] )

PFNGLMEMORYBARRIEREXTPROC = _rpythonic_function_(		"PFNGLMEMORYBARRIEREXTPROC", ctypes.c_void_p, [
	("barriers",		ctypes.c_uint),] )

PFNGLVERTEXATTRIBL1DEXTPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBL1DEXTPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_double),] )

PFNGLVERTEXATTRIBL2DEXTPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBL2DEXTPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),] )

PFNGLVERTEXATTRIBL3DEXTPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBL3DEXTPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("z",		ctypes.c_double),] )

PFNGLVERTEXATTRIBL4DEXTPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBL4DEXTPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("z",		ctypes.c_double),
	("w",		ctypes.c_double),] )

PFNGLVERTEXATTRIBL1DVEXTPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBL1DVEXTPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLVERTEXATTRIBL2DVEXTPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBL2DVEXTPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLVERTEXATTRIBL3DVEXTPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBL3DVEXTPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLVERTEXATTRIBL4DVEXTPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBL4DVEXTPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLVERTEXATTRIBLPOINTEREXTPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBLPOINTEREXTPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("size",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("stride",		ctypes.c_int),
	("pointer",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLGETVERTEXATTRIBLDVEXTPROC = _rpythonic_function_(		"PFNGLGETVERTEXATTRIBLDVEXTPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_double)),] )

PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC = _rpythonic_function_(		"PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC", ctypes.c_void_p, [
	("vaobj",		ctypes.c_uint),
	("buffer",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("size",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("stride",		ctypes.c_int),
	("offset",		ctypes.c_int),] )

PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC = _rpythonic_function_(		"PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("params",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC = _rpythonic_function_(		"PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("param",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLUNIFORM1I64NVPROC = _rpythonic_function_(		"PFNGLUNIFORM1I64NVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("x",		ctypes.c_int64),] )

PFNGLUNIFORM2I64NVPROC = _rpythonic_function_(		"PFNGLUNIFORM2I64NVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("x",		ctypes.c_int64),
	("y",		ctypes.c_int64),] )

PFNGLUNIFORM3I64NVPROC = _rpythonic_function_(		"PFNGLUNIFORM3I64NVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("x",		ctypes.c_int64),
	("y",		ctypes.c_int64),
	("z",		ctypes.c_int64),] )

PFNGLUNIFORM4I64NVPROC = _rpythonic_function_(		"PFNGLUNIFORM4I64NVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("x",		ctypes.c_int64),
	("y",		ctypes.c_int64),
	("z",		ctypes.c_int64),
	("w",		ctypes.c_int64),] )

PFNGLUNIFORM1I64VNVPROC = _rpythonic_function_(		"PFNGLUNIFORM1I64VNVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_int64)),] )

PFNGLUNIFORM2I64VNVPROC = _rpythonic_function_(		"PFNGLUNIFORM2I64VNVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_int64)),] )

PFNGLUNIFORM3I64VNVPROC = _rpythonic_function_(		"PFNGLUNIFORM3I64VNVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_int64)),] )

PFNGLUNIFORM4I64VNVPROC = _rpythonic_function_(		"PFNGLUNIFORM4I64VNVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_int64)),] )

PFNGLUNIFORM1UI64NVPROC = _rpythonic_function_(		"PFNGLUNIFORM1UI64NVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("x",		ctypes.c_uint64),] )

PFNGLUNIFORM2UI64NVPROC = _rpythonic_function_(		"PFNGLUNIFORM2UI64NVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("x",		ctypes.c_uint64),
	("y",		ctypes.c_uint64),] )

PFNGLUNIFORM3UI64NVPROC = _rpythonic_function_(		"PFNGLUNIFORM3UI64NVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("x",		ctypes.c_uint64),
	("y",		ctypes.c_uint64),
	("z",		ctypes.c_uint64),] )

PFNGLUNIFORM4UI64NVPROC = _rpythonic_function_(		"PFNGLUNIFORM4UI64NVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("x",		ctypes.c_uint64),
	("y",		ctypes.c_uint64),
	("z",		ctypes.c_uint64),
	("w",		ctypes.c_uint64),] )

PFNGLUNIFORM1UI64VNVPROC = _rpythonic_function_(		"PFNGLUNIFORM1UI64VNVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_uint64)),] )

PFNGLUNIFORM2UI64VNVPROC = _rpythonic_function_(		"PFNGLUNIFORM2UI64VNVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_uint64)),] )

PFNGLUNIFORM3UI64VNVPROC = _rpythonic_function_(		"PFNGLUNIFORM3UI64VNVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_uint64)),] )

PFNGLUNIFORM4UI64VNVPROC = _rpythonic_function_(		"PFNGLUNIFORM4UI64VNVPROC", ctypes.c_void_p, [
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_uint64)),] )

PFNGLGETUNIFORMI64VNVPROC = _rpythonic_function_(		"PFNGLGETUNIFORMI64VNVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("params",		ctypes.POINTER(ctypes.c_int64)),] )

PFNGLPROGRAMUNIFORM1I64NVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM1I64NVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("x",		ctypes.c_int64),] )

PFNGLPROGRAMUNIFORM2I64NVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM2I64NVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("x",		ctypes.c_int64),
	("y",		ctypes.c_int64),] )

PFNGLPROGRAMUNIFORM3I64NVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM3I64NVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("x",		ctypes.c_int64),
	("y",		ctypes.c_int64),
	("z",		ctypes.c_int64),] )

PFNGLPROGRAMUNIFORM4I64NVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM4I64NVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("x",		ctypes.c_int64),
	("y",		ctypes.c_int64),
	("z",		ctypes.c_int64),
	("w",		ctypes.c_int64),] )

PFNGLPROGRAMUNIFORM1I64VNVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM1I64VNVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_int64)),] )

PFNGLPROGRAMUNIFORM2I64VNVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM2I64VNVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_int64)),] )

PFNGLPROGRAMUNIFORM3I64VNVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM3I64VNVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_int64)),] )

PFNGLPROGRAMUNIFORM4I64VNVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM4I64VNVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_int64)),] )

PFNGLPROGRAMUNIFORM1UI64NVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM1UI64NVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("x",		ctypes.c_uint64),] )

PFNGLPROGRAMUNIFORM2UI64NVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM2UI64NVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("x",		ctypes.c_uint64),
	("y",		ctypes.c_uint64),] )

PFNGLPROGRAMUNIFORM3UI64NVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM3UI64NVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("x",		ctypes.c_uint64),
	("y",		ctypes.c_uint64),
	("z",		ctypes.c_uint64),] )

PFNGLPROGRAMUNIFORM4UI64NVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM4UI64NVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("x",		ctypes.c_uint64),
	("y",		ctypes.c_uint64),
	("z",		ctypes.c_uint64),
	("w",		ctypes.c_uint64),] )

PFNGLPROGRAMUNIFORM1UI64VNVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM1UI64VNVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_uint64)),] )

PFNGLPROGRAMUNIFORM2UI64VNVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM2UI64VNVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_uint64)),] )

PFNGLPROGRAMUNIFORM3UI64VNVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM3UI64VNVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_uint64)),] )

PFNGLPROGRAMUNIFORM4UI64VNVPROC = _rpythonic_function_(		"PFNGLPROGRAMUNIFORM4UI64VNVPROC", ctypes.c_void_p, [
	("program",		ctypes.c_uint),
	("location",		ctypes.c_int),
	("count",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_uint64)),] )

PFNGLVERTEXATTRIBL1I64NVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBL1I64NVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_int64),] )

PFNGLVERTEXATTRIBL2I64NVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBL2I64NVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_int64),
	("y",		ctypes.c_int64),] )

PFNGLVERTEXATTRIBL3I64NVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBL3I64NVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_int64),
	("y",		ctypes.c_int64),
	("z",		ctypes.c_int64),] )

PFNGLVERTEXATTRIBL4I64NVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBL4I64NVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_int64),
	("y",		ctypes.c_int64),
	("z",		ctypes.c_int64),
	("w",		ctypes.c_int64),] )

PFNGLVERTEXATTRIBL1I64VNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBL1I64VNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_int64)),] )

PFNGLVERTEXATTRIBL2I64VNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBL2I64VNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_int64)),] )

PFNGLVERTEXATTRIBL3I64VNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBL3I64VNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_int64)),] )

PFNGLVERTEXATTRIBL4I64VNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBL4I64VNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_int64)),] )

PFNGLVERTEXATTRIBL1UI64NVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBL1UI64NVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_uint64),] )

PFNGLVERTEXATTRIBL2UI64NVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBL2UI64NVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_uint64),
	("y",		ctypes.c_uint64),] )

PFNGLVERTEXATTRIBL3UI64NVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBL3UI64NVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_uint64),
	("y",		ctypes.c_uint64),
	("z",		ctypes.c_uint64),] )

PFNGLVERTEXATTRIBL4UI64NVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBL4UI64NVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("x",		ctypes.c_uint64),
	("y",		ctypes.c_uint64),
	("z",		ctypes.c_uint64),
	("w",		ctypes.c_uint64),] )

PFNGLVERTEXATTRIBL1UI64VNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBL1UI64VNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_uint64)),] )

PFNGLVERTEXATTRIBL2UI64VNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBL2UI64VNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_uint64)),] )

PFNGLVERTEXATTRIBL3UI64VNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBL3UI64VNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_uint64)),] )

PFNGLVERTEXATTRIBL4UI64VNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBL4UI64VNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("v",		ctypes.POINTER(ctypes.c_uint64)),] )

PFNGLGETVERTEXATTRIBLI64VNVPROC = _rpythonic_function_(		"PFNGLGETVERTEXATTRIBLI64VNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_int64)),] )

PFNGLGETVERTEXATTRIBLUI64VNVPROC = _rpythonic_function_(		"PFNGLGETVERTEXATTRIBLUI64VNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("pname",		ctypes.c_uint),
	("params",		ctypes.POINTER(ctypes.c_uint64)),] )

PFNGLVERTEXATTRIBLFORMATNVPROC = _rpythonic_function_(		"PFNGLVERTEXATTRIBLFORMATNVPROC", ctypes.c_void_p, [
	("index",		ctypes.c_uint),
	("size",		ctypes.c_int),
	("C_type",		ctypes.c_uint),
	("stride",		ctypes.c_int),] )

PFNGLGENNAMESAMDPROC = _rpythonic_function_(		"PFNGLGENNAMESAMDPROC", ctypes.c_void_p, [
	("identifier",		ctypes.c_uint),
	("num",		ctypes.c_uint),
	("names",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLDELETENAMESAMDPROC = _rpythonic_function_(		"PFNGLDELETENAMESAMDPROC", ctypes.c_void_p, [
	("identifier",		ctypes.c_uint),
	("num",		ctypes.c_uint),
	("names",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLISNAMEAMDPROC = _rpythonic_function_(		"PFNGLISNAMEAMDPROC", ctypes.c_ubyte, [
	("identifier",		ctypes.c_uint),
	("name",		ctypes.c_uint),] )

PFNGLDEBUGMESSAGEENABLEAMDPROC = _rpythonic_function_(		"PFNGLDEBUGMESSAGEENABLEAMDPROC", ctypes.c_void_p, [
	("category",		ctypes.c_uint),
	("severity",		ctypes.c_uint),
	("count",		ctypes.c_int),
	("ids",		ctypes.POINTER(ctypes.c_uint)),
	("enabled",		ctypes.c_ubyte),] )

PFNGLDEBUGMESSAGEINSERTAMDPROC = _rpythonic_function_(		"PFNGLDEBUGMESSAGEINSERTAMDPROC", ctypes.c_void_p, [
	("category",		ctypes.c_uint),
	("severity",		ctypes.c_uint),
	("C_id",		ctypes.c_uint),
	("length",		ctypes.c_int),
	("buf",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLDEBUGMESSAGECALLBACKAMDPROC = _rpythonic_function_(		"PFNGLDEBUGMESSAGECALLBACKAMDPROC", ctypes.c_void_p, [
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_uint,ctypes.c_uint,ctypes.c_uint,ctypes.c_int,ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),)),
	("userParam",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLGETDEBUGMESSAGELOGAMDPROC = _rpythonic_function_(		"PFNGLGETDEBUGMESSAGELOGAMDPROC", ctypes.c_uint, [
	("count",		ctypes.c_uint),
	("bufsize",		ctypes.c_int),
	("categories",		ctypes.POINTER(ctypes.c_uint)),
	("severities",		ctypes.POINTER(ctypes.c_uint)),
	("ids",		ctypes.POINTER(ctypes.c_uint)),
	("lengths",		ctypes.POINTER(ctypes.c_int)),
	("message",		ctypes.POINTER(ctypes.c_char)),] )

PFNGLVDPAUINITNVPROC = _rpythonic_function_(		"PFNGLVDPAUINITNVPROC", ctypes.c_void_p, [
	("vdpDevice",		ctypes.POINTER(ctypes.c_void_p)),
	("getProcAddress",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLVDPAUFININVPROC = _rpythonic_function_(		"PFNGLVDPAUFININVPROC", ctypes.c_void_p, [] )

PFNGLVDPAUREGISTERVIDEOSURFACENVPROC = _rpythonic_function_(		"PFNGLVDPAUREGISTERVIDEOSURFACENVPROC", ctypes.c_int, [
	("vdpSurface",		ctypes.POINTER(ctypes.c_void_p)),
	("target",		ctypes.c_uint),
	("numTextureNames",		ctypes.c_int),
	("textureNames",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC = _rpythonic_function_(		"PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC", ctypes.c_int, [
	("vdpSurface",		ctypes.POINTER(ctypes.c_void_p)),
	("target",		ctypes.c_uint),
	("numTextureNames",		ctypes.c_int),
	("textureNames",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLVDPAUISSURFACENVPROC = _rpythonic_function_(		"PFNGLVDPAUISSURFACENVPROC", ctypes.c_void_p, [
	("surface",		ctypes.c_int),] )

PFNGLVDPAUUNREGISTERSURFACENVPROC = _rpythonic_function_(		"PFNGLVDPAUUNREGISTERSURFACENVPROC", ctypes.c_void_p, [
	("surface",		ctypes.c_int),] )

PFNGLVDPAUGETSURFACEIVNVPROC = _rpythonic_function_(		"PFNGLVDPAUGETSURFACEIVNVPROC", ctypes.c_void_p, [
	("surface",		ctypes.c_int),
	("pname",		ctypes.c_uint),
	("bufSize",		ctypes.c_int),
	("length",		ctypes.POINTER(ctypes.c_int)),
	("values",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLVDPAUSURFACEACCESSNVPROC = _rpythonic_function_(		"PFNGLVDPAUSURFACEACCESSNVPROC", ctypes.c_void_p, [
	("surface",		ctypes.c_int),
	("access",		ctypes.c_uint),] )

PFNGLVDPAUMAPSURFACESNVPROC = _rpythonic_function_(		"PFNGLVDPAUMAPSURFACESNVPROC", ctypes.c_void_p, [
	("numSurfaces",		ctypes.c_int),
	("surfaces",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLVDPAUUNMAPSURFACESNVPROC = _rpythonic_function_(		"PFNGLVDPAUUNMAPSURFACESNVPROC", ctypes.c_void_p, [
	("numSurface",		ctypes.c_int),
	("surfaces",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC = _rpythonic_function_(		"PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("coverageSamples",		ctypes.c_int),
	("colorSamples",		ctypes.c_int),
	("internalFormat",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("fixedSampleLocations",		ctypes.c_ubyte),] )

PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC = _rpythonic_function_(		"PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("coverageSamples",		ctypes.c_int),
	("colorSamples",		ctypes.c_int),
	("internalFormat",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("depth",		ctypes.c_int),
	("fixedSampleLocations",		ctypes.c_ubyte),] )

PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC = _rpythonic_function_(		"PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("samples",		ctypes.c_int),
	("internalFormat",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("fixedSampleLocations",		ctypes.c_ubyte),] )

PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC = _rpythonic_function_(		"PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("samples",		ctypes.c_int),
	("internalFormat",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("depth",		ctypes.c_int),
	("fixedSampleLocations",		ctypes.c_ubyte),] )

PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC = _rpythonic_function_(		"PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("coverageSamples",		ctypes.c_int),
	("colorSamples",		ctypes.c_int),
	("internalFormat",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("fixedSampleLocations",		ctypes.c_ubyte),] )

PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC = _rpythonic_function_(		"PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC", ctypes.c_void_p, [
	("texture",		ctypes.c_uint),
	("target",		ctypes.c_uint),
	("coverageSamples",		ctypes.c_int),
	("colorSamples",		ctypes.c_int),
	("internalFormat",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("depth",		ctypes.c_int),
	("fixedSampleLocations",		ctypes.c_ubyte),] )

PFNGLSETMULTISAMPLEFVAMDPROC = _rpythonic_function_(		"PFNGLSETMULTISAMPLEFVAMDPROC", ctypes.c_void_p, [
	("pname",		ctypes.c_uint),
	("index",		ctypes.c_uint),
	("val",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLIMPORTSYNCEXTPROC = _rpythonic_function_(		"PFNGLIMPORTSYNCEXTPROC", ctypes.POINTER(__GLsync), [
	("external_sync_type",		ctypes.c_uint),
	("external_sync",		ctypes.c_int),
	("flags",		ctypes.c_uint),] )

PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC = _rpythonic_function_(		"PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("indirect",		ctypes.POINTER(ctypes.c_void_p)),
	("primcount",		ctypes.c_int),
	("stride",		ctypes.c_int),] )

PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC = _rpythonic_function_(		"PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC", ctypes.c_void_p, [
	("mode",		ctypes.c_uint),
	("C_type",		ctypes.c_uint),
	("indirect",		ctypes.POINTER(ctypes.c_void_p)),
	("primcount",		ctypes.c_int),
	("stride",		ctypes.c_int),] )

glCreateDebugObjectMESA = _rpythonic_function_(		"glCreateDebugObjectMESA", ctypes.c_uint, [] )

glClearDebugLogMESA = _rpythonic_function_(		"glClearDebugLogMESA", ctypes.c_void_p, [
	("obj",		ctypes.c_uint),
	("logType",		ctypes.c_uint),
	("shaderType",		ctypes.c_uint),] )

glGetDebugLogMESA = _rpythonic_function_(		"glGetDebugLogMESA", ctypes.c_void_p, [
	("obj",		ctypes.c_uint),
	("logType",		ctypes.c_uint),
	("shaderType",		ctypes.c_uint),
	("maxLength",		ctypes.c_int),
	("length",		ctypes.POINTER(ctypes.c_int)),
	("debugLog",		ctypes.POINTER(ctypes.c_char)),] )

glGetDebugLogLengthMESA = _rpythonic_function_(		"glGetDebugLogLengthMESA", ctypes.c_int, [
	("obj",		ctypes.c_uint),
	("logType",		ctypes.c_uint),
	("shaderType",		ctypes.c_uint),] )

GLprogramcallbackMESA = _rpythonic_function_(		"GLprogramcallbackMESA", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

glProgramCallbackMESA = _rpythonic_function_(		"glProgramCallbackMESA", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_uint,ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

glGetProgramRegisterfvMESA = _rpythonic_function_(		"glGetProgramRegisterfvMESA", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("C_len",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("v",		ctypes.POINTER(ctypes.c_float)),] )

glBlendEquationSeparateATI = _rpythonic_function_(		"glBlendEquationSeparateATI", ctypes.c_void_p, [
	("modeRGB",		ctypes.c_uint),
	("modeA",		ctypes.c_uint),] )

PFNGLBLENDEQUATIONSEPARATEATIPROC = _rpythonic_function_(		"PFNGLBLENDEQUATIONSEPARATEATIPROC", ctypes.c_void_p, [
	("modeRGB",		ctypes.c_uint),
	("modeA",		ctypes.c_uint),] )

PFNGLEGLIMAGETARGETTEXTURE2DOESPROC = _rpythonic_function_(		"PFNGLEGLIMAGETARGETTEXTURE2DOESPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("image",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC = _rpythonic_function_(		"PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC", ctypes.c_void_p, [
	("target",		ctypes.c_uint),
	("image",		ctypes.POINTER(ctypes.c_void_p)),] )

select = _rpythonic_function_(		"select", ctypes.c_int, [
	("__nfds",		ctypes.c_int),
	("__readfds",		ctypes.POINTER(fd_set)),
	("__writefds",		ctypes.POINTER(fd_set)),
	("__exceptfds",		ctypes.POINTER(fd_set)),
	("__timeout",		ctypes.POINTER(timeval)),] )

pselect = _rpythonic_function_(		"pselect", ctypes.c_int, [
	("__nfds",		ctypes.c_int),
	("__readfds",		ctypes.POINTER(fd_set)),
	("__writefds",		ctypes.POINTER(fd_set)),
	("__exceptfds",		ctypes.POINTER(fd_set)),
	("__timeout",		ctypes.POINTER(timespec)),
	("__sigmask",		ctypes.POINTER(__sigset_t)),] )

gnu_dev_major = _rpythonic_function_(		"gnu_dev_major", ctypes.c_uint, [
	("__dev",		ctypes.c_ulonglong),] )

gnu_dev_minor = _rpythonic_function_(		"gnu_dev_minor", ctypes.c_uint, [
	("__dev",		ctypes.c_ulonglong),] )

gnu_dev_makedev = _rpythonic_function_(		"gnu_dev_makedev", ctypes.c_ulonglong, [
	("__major",		ctypes.c_uint),
	("__minor",		ctypes.c_uint),] )

_Xmblen = _rpythonic_function_(		"_Xmblen", ctypes.c_int, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

free_private = _rpythonic_function_(		"free_private", ctypes.c_int, [
	("extension",		ctypes.POINTER(_XExtData)),] )

create_image = _rpythonic_function_(		"create_image", ctypes.POINTER(_XImage), [
	("_XDisplay",		ctypes.POINTER(_XDisplay)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

destroy_image = _rpythonic_function_(		"destroy_image", ctypes.c_int, [
	("_XImage",		ctypes.POINTER(_XImage)),] )

get_pixel = _rpythonic_function_(		"get_pixel", ctypes.c_ulong, [
	("_XImage",		ctypes.POINTER(_XImage)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

put_pixel = _rpythonic_function_(		"put_pixel", ctypes.c_int, [
	("_XImage",		ctypes.POINTER(_XImage)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_ulong),] )

sub_image = _rpythonic_function_(		"sub_image", ctypes.POINTER(_XImage), [
	("_XImage",		ctypes.POINTER(_XImage)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),] )

add_pixel = _rpythonic_function_(		"add_pixel", ctypes.c_int, [
	("_XImage",		ctypes.POINTER(_XImage)),
	("none",		ctypes.c_long),] )

resource_alloc = _rpythonic_function_(		"resource_alloc", ctypes.c_ulong, [
	("_XDisplay",		ctypes.POINTER(_XDisplay)),] )

private15 = _rpythonic_function_(		"private15", ctypes.c_int, [
	("_XDisplay",		ctypes.POINTER(_XDisplay)),] )

XIMProc = _rpythonic_function_(		"XIMProc", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

XICProc = _rpythonic_function_(		"XICProc", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

XIDProc = _rpythonic_function_(		"XIDProc", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

XLoadQueryFont = _rpythonic_function_(		"XLoadQueryFont", ctypes.POINTER(XFontStruct), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

XQueryFont = _rpythonic_function_(		"XQueryFont", ctypes.POINTER(XFontStruct), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XGetMotionEvents = _rpythonic_function_(		"XGetMotionEvents", ctypes.POINTER(XTimeCoord), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XDeleteModifiermapEntry = _rpythonic_function_(		"XDeleteModifiermapEntry", ctypes.POINTER(XModifierKeymap), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ubyte),
	("none",		ctypes.c_int),] )

XGetModifierMapping = _rpythonic_function_(		"XGetModifierMapping", ctypes.POINTER(XModifierKeymap), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XInsertModifiermapEntry = _rpythonic_function_(		"XInsertModifiermapEntry", ctypes.POINTER(XModifierKeymap), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ubyte),
	("none",		ctypes.c_int),] )

XNewModifiermap = _rpythonic_function_(		"XNewModifiermap", ctypes.POINTER(XModifierKeymap), [
	("none",		ctypes.c_int),] )

XCreateImage = _rpythonic_function_(		"XCreateImage", ctypes.POINTER(_XImage), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XInitImage = _rpythonic_function_(		"XInitImage", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XGetImage = _rpythonic_function_(		"XGetImage", ctypes.POINTER(_XImage), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),] )

XGetSubImage = _rpythonic_function_(		"XGetSubImage", ctypes.POINTER(_XImage), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XOpenDisplay = _rpythonic_function_(		"XOpenDisplay", ctypes.POINTER(_XDisplay), [
	("none",		ctypes.POINTER(ctypes.c_char)),] )

XrmInitialize = _rpythonic_function_(		"XrmInitialize", ctypes.c_void_p, [] )

XFetchBytes = _rpythonic_function_(		"XFetchBytes", ctypes.POINTER(ctypes.c_char), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XFetchBuffer = _rpythonic_function_(		"XFetchBuffer", ctypes.POINTER(ctypes.c_char), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.c_int),] )

XGetAtomName = _rpythonic_function_(		"XGetAtomName", ctypes.POINTER(ctypes.c_char), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XGetAtomNames = _rpythonic_function_(		"XGetAtomNames", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

XGetDefault = _rpythonic_function_(		"XGetDefault", ctypes.POINTER(ctypes.c_char), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

XDisplayName = _rpythonic_function_(		"XDisplayName", ctypes.POINTER(ctypes.c_char), [
	("none",		ctypes.POINTER(ctypes.c_char)),] )

XKeysymToString = _rpythonic_function_(		"XKeysymToString", ctypes.POINTER(ctypes.c_char), [
	("none",		ctypes.c_ulong),] )

XSynchronize = _rpythonic_function_(		"XSynchronize", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XSetAfterFunction = _rpythonic_function_(		"XSetAfterFunction", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XInternAtom = _rpythonic_function_(		"XInternAtom", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),] )

XInternAtoms = _rpythonic_function_(		"XInternAtoms", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_ulong)),] )

XCopyColormapAndFree = _rpythonic_function_(		"XCopyColormapAndFree", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XCreateColormap = _rpythonic_function_(		"XCreateColormap", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XCreatePixmapCursor = _rpythonic_function_(		"XCreatePixmapCursor", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),] )

XCreateGlyphCursor = _rpythonic_function_(		"XCreateGlyphCursor", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XLoadFont = _rpythonic_function_(		"XLoadFont", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

XCreateFontCursor = _rpythonic_function_(		"XCreateFontCursor", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_uint),] )

XCreateGC = _rpythonic_function_(		"XCreateGC", ctypes.POINTER(_XGC), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XGContextFromGC = _rpythonic_function_(		"XGContextFromGC", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XFlushGC = _rpythonic_function_(		"XFlushGC", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XCreatePixmap = _rpythonic_function_(		"XCreatePixmap", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),] )

XCreateBitmapFromData = _rpythonic_function_(		"XCreateBitmapFromData", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),] )

XCreatePixmapFromBitmapData = _rpythonic_function_(		"XCreatePixmapFromBitmapData", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_uint),] )

XCreateSimpleWindow = _rpythonic_function_(		"XCreateSimpleWindow", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),] )

XGetSelectionOwner = _rpythonic_function_(		"XGetSelectionOwner", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XCreateWindow = _rpythonic_function_(		"XCreateWindow", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_int),
	("none",		ctypes.c_uint),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XListInstalledColormaps = _rpythonic_function_(		"XListInstalledColormaps", ctypes.POINTER(ctypes.c_ulong), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XListFonts = _rpythonic_function_(		"XListFonts", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XListFontsWithInfo = _rpythonic_function_(		"XListFontsWithInfo", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

XGetFontPath = _rpythonic_function_(		"XGetFontPath", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XListExtensions = _rpythonic_function_(		"XListExtensions", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XListProperties = _rpythonic_function_(		"XListProperties", ctypes.POINTER(ctypes.c_ulong), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XListHosts = _rpythonic_function_(		"XListHosts", ctypes.POINTER(XHostAddress), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XKeycodeToKeysym = _rpythonic_function_(		"XKeycodeToKeysym", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ubyte),
	("none",		ctypes.c_int),] )

XLookupKeysym = _rpythonic_function_(		"XLookupKeysym", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XGetKeyboardMapping = _rpythonic_function_(		"XGetKeyboardMapping", ctypes.POINTER(ctypes.c_ulong), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ubyte),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XStringToKeysym = _rpythonic_function_(		"XStringToKeysym", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_char)),] )

XMaxRequestSize = _rpythonic_function_(		"XMaxRequestSize", ctypes.c_long, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XExtendedMaxRequestSize = _rpythonic_function_(		"XExtendedMaxRequestSize", ctypes.c_long, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XResourceManagerString = _rpythonic_function_(		"XResourceManagerString", ctypes.POINTER(ctypes.c_char), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XScreenResourceString = _rpythonic_function_(		"XScreenResourceString", ctypes.POINTER(ctypes.c_char), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XDisplayMotionBufferSize = _rpythonic_function_(		"XDisplayMotionBufferSize", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XVisualIDFromVisual = _rpythonic_function_(		"XVisualIDFromVisual", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XInitThreads = _rpythonic_function_(		"XInitThreads", ctypes.c_int, [] )

XLockDisplay = _rpythonic_function_(		"XLockDisplay", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XUnlockDisplay = _rpythonic_function_(		"XUnlockDisplay", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XInitExtension = _rpythonic_function_(		"XInitExtension", ctypes.POINTER(XExtCodes), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

XAddExtension = _rpythonic_function_(		"XAddExtension", ctypes.POINTER(XExtCodes), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XFindOnExtensionList = _rpythonic_function_(		"XFindOnExtensionList", ctypes.POINTER(_XExtData), [
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("none",		ctypes.c_int),] )

XEHeadOfExtensionList = _rpythonic_function_(		"XEHeadOfExtensionList", ctypes.POINTER(ctypes.POINTER(_XExtData)), [
	("none",		ctypes.c_void_p),] )

XRootWindow = _rpythonic_function_(		"XRootWindow", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XDefaultRootWindow = _rpythonic_function_(		"XDefaultRootWindow", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XRootWindowOfScreen = _rpythonic_function_(		"XRootWindowOfScreen", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XDefaultVisual = _rpythonic_function_(		"XDefaultVisual", ctypes.POINTER(Visual), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XDefaultVisualOfScreen = _rpythonic_function_(		"XDefaultVisualOfScreen", ctypes.POINTER(Visual), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XDefaultGC = _rpythonic_function_(		"XDefaultGC", ctypes.POINTER(_XGC), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XDefaultGCOfScreen = _rpythonic_function_(		"XDefaultGCOfScreen", ctypes.POINTER(_XGC), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XBlackPixel = _rpythonic_function_(		"XBlackPixel", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XWhitePixel = _rpythonic_function_(		"XWhitePixel", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XAllPlanes = _rpythonic_function_(		"XAllPlanes", ctypes.c_ulong, [] )

XBlackPixelOfScreen = _rpythonic_function_(		"XBlackPixelOfScreen", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XWhitePixelOfScreen = _rpythonic_function_(		"XWhitePixelOfScreen", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XNextRequest = _rpythonic_function_(		"XNextRequest", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XLastKnownRequestProcessed = _rpythonic_function_(		"XLastKnownRequestProcessed", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XServerVendor = _rpythonic_function_(		"XServerVendor", ctypes.POINTER(ctypes.c_char), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XDisplayString = _rpythonic_function_(		"XDisplayString", ctypes.POINTER(ctypes.c_char), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XDefaultColormap = _rpythonic_function_(		"XDefaultColormap", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XDefaultColormapOfScreen = _rpythonic_function_(		"XDefaultColormapOfScreen", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XDisplayOfScreen = _rpythonic_function_(		"XDisplayOfScreen", ctypes.POINTER(_XDisplay), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XScreenOfDisplay = _rpythonic_function_(		"XScreenOfDisplay", ctypes.POINTER(Screen), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XDefaultScreenOfDisplay = _rpythonic_function_(		"XDefaultScreenOfDisplay", ctypes.POINTER(Screen), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XEventMaskOfScreen = _rpythonic_function_(		"XEventMaskOfScreen", ctypes.c_long, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XScreenNumberOfScreen = _rpythonic_function_(		"XScreenNumberOfScreen", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XErrorHandler = _rpythonic_function_(		"XErrorHandler", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XSetErrorHandler = _rpythonic_function_(		"XSetErrorHandler", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),), [
	("none",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

XIOErrorHandler = _rpythonic_function_(		"XIOErrorHandler", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XSetIOErrorHandler = _rpythonic_function_(		"XSetIOErrorHandler", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),), [
	("none",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),)),] )

XListPixmapFormats = _rpythonic_function_(		"XListPixmapFormats", ctypes.POINTER(XPixmapFormatValues), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XListDepths = _rpythonic_function_(		"XListDepths", ctypes.POINTER(ctypes.c_int), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XReconfigureWMWindow = _rpythonic_function_(		"XReconfigureWMWindow", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_uint),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XGetWMProtocols = _rpythonic_function_(		"XGetWMProtocols", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ulong))),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XSetWMProtocols = _rpythonic_function_(		"XSetWMProtocols", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.c_int),] )

XIconifyWindow = _rpythonic_function_(		"XIconifyWindow", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),] )

XWithdrawWindow = _rpythonic_function_(		"XWithdrawWindow", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),] )

XGetCommand = _rpythonic_function_(		"XGetCommand", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(ctypes.c_char)))),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XGetWMColormapWindows = _rpythonic_function_(		"XGetWMColormapWindows", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ulong))),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XSetWMColormapWindows = _rpythonic_function_(		"XSetWMColormapWindows", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.c_int),] )

XFreeStringList = _rpythonic_function_(		"XFreeStringList", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

XSetTransientForHint = _rpythonic_function_(		"XSetTransientForHint", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),] )

XActivateScreenSaver = _rpythonic_function_(		"XActivateScreenSaver", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XAddHost = _rpythonic_function_(		"XAddHost", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XAddHosts = _rpythonic_function_(		"XAddHosts", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XAddToExtensionList = _rpythonic_function_(		"XAddToExtensionList", ctypes.c_int, [
	("_XExtData",		ctypes.POINTER(ctypes.POINTER(_XExtData))),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XAddToSaveSet = _rpythonic_function_(		"XAddToSaveSet", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XAllocColor = _rpythonic_function_(		"XAllocColor", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XAllocColorCells = _rpythonic_function_(		"XAllocColorCells", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.c_uint),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.c_uint),] )

XAllocColorPlanes = _rpythonic_function_(		"XAllocColorPlanes", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.POINTER(ctypes.c_ulong)),] )

XAllocNamedColor = _rpythonic_function_(		"XAllocNamedColor", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XAllowEvents = _rpythonic_function_(		"XAllowEvents", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_ulong),] )

XAutoRepeatOff = _rpythonic_function_(		"XAutoRepeatOff", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XAutoRepeatOn = _rpythonic_function_(		"XAutoRepeatOn", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XBell = _rpythonic_function_(		"XBell", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XBitmapBitOrder = _rpythonic_function_(		"XBitmapBitOrder", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XBitmapPad = _rpythonic_function_(		"XBitmapPad", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XBitmapUnit = _rpythonic_function_(		"XBitmapUnit", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XCellsOfScreen = _rpythonic_function_(		"XCellsOfScreen", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XChangeActivePointerGrab = _rpythonic_function_(		"XChangeActivePointerGrab", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),] )

XChangeGC = _rpythonic_function_(		"XChangeGC", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XChangeKeyboardControl = _rpythonic_function_(		"XChangeKeyboardControl", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XChangeKeyboardMapping = _rpythonic_function_(		"XChangeKeyboardMapping", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.c_int),] )

XChangePointerControl = _rpythonic_function_(		"XChangePointerControl", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XChangeProperty = _rpythonic_function_(		"XChangeProperty", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_ubyte)),
	("none",		ctypes.c_int),] )

XChangeSaveSet = _rpythonic_function_(		"XChangeSaveSet", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),] )

XChangeWindowAttributes = _rpythonic_function_(		"XChangeWindowAttributes", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XCheckIfEvent = _rpythonic_function_(		"XCheckIfEvent", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_void_p),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

XCheckMaskEvent = _rpythonic_function_(		"XCheckMaskEvent", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_long),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XCheckTypedEvent = _rpythonic_function_(		"XCheckTypedEvent", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XCheckTypedWindowEvent = _rpythonic_function_(		"XCheckTypedWindowEvent", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XCheckWindowEvent = _rpythonic_function_(		"XCheckWindowEvent", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_long),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XCirculateSubwindows = _rpythonic_function_(		"XCirculateSubwindows", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),] )

XCirculateSubwindowsDown = _rpythonic_function_(		"XCirculateSubwindowsDown", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XCirculateSubwindowsUp = _rpythonic_function_(		"XCirculateSubwindowsUp", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XClearArea = _rpythonic_function_(		"XClearArea", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_int),] )

XClearWindow = _rpythonic_function_(		"XClearWindow", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XCloseDisplay = _rpythonic_function_(		"XCloseDisplay", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XConfigureWindow = _rpythonic_function_(		"XConfigureWindow", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_uint),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XConnectionNumber = _rpythonic_function_(		"XConnectionNumber", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XConvertSelection = _rpythonic_function_(		"XConvertSelection", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),] )

XCopyArea = _rpythonic_function_(		"XCopyArea", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XCopyGC = _rpythonic_function_(		"XCopyGC", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XCopyPlane = _rpythonic_function_(		"XCopyPlane", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_ulong),] )

XDefaultDepth = _rpythonic_function_(		"XDefaultDepth", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XDefaultDepthOfScreen = _rpythonic_function_(		"XDefaultDepthOfScreen", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XDefaultScreen = _rpythonic_function_(		"XDefaultScreen", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XDefineCursor = _rpythonic_function_(		"XDefineCursor", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),] )

XDeleteProperty = _rpythonic_function_(		"XDeleteProperty", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),] )

XDestroyWindow = _rpythonic_function_(		"XDestroyWindow", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XDestroySubwindows = _rpythonic_function_(		"XDestroySubwindows", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XDoesBackingStore = _rpythonic_function_(		"XDoesBackingStore", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XDoesSaveUnders = _rpythonic_function_(		"XDoesSaveUnders", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XDisableAccessControl = _rpythonic_function_(		"XDisableAccessControl", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XDisplayCells = _rpythonic_function_(		"XDisplayCells", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XDisplayHeight = _rpythonic_function_(		"XDisplayHeight", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XDisplayHeightMM = _rpythonic_function_(		"XDisplayHeightMM", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XDisplayKeycodes = _rpythonic_function_(		"XDisplayKeycodes", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XDisplayPlanes = _rpythonic_function_(		"XDisplayPlanes", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XDisplayWidth = _rpythonic_function_(		"XDisplayWidth", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XDisplayWidthMM = _rpythonic_function_(		"XDisplayWidthMM", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XDrawArc = _rpythonic_function_(		"XDrawArc", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XDrawArcs = _rpythonic_function_(		"XDrawArcs", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XDrawImageString = _rpythonic_function_(		"XDrawImageString", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),] )

XDrawImageString16 = _rpythonic_function_(		"XDrawImageString16", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XDrawLines = _rpythonic_function_(		"XDrawLines", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XDrawLine = _rpythonic_function_(		"XDrawLine", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XDrawPoint = _rpythonic_function_(		"XDrawPoint", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XDrawPoints = _rpythonic_function_(		"XDrawPoints", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XDrawRectangle = _rpythonic_function_(		"XDrawRectangle", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),] )

XDrawRectangles = _rpythonic_function_(		"XDrawRectangles", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XDrawSegments = _rpythonic_function_(		"XDrawSegments", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XDrawString = _rpythonic_function_(		"XDrawString", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),] )

XDrawString16 = _rpythonic_function_(		"XDrawString16", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XDrawText = _rpythonic_function_(		"XDrawText", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XEnableAccessControl = _rpythonic_function_(		"XEnableAccessControl", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XDrawText16 = _rpythonic_function_(		"XDrawText16", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XEventsQueued = _rpythonic_function_(		"XEventsQueued", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XFetchName = _rpythonic_function_(		"XFetchName", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

XFillArc = _rpythonic_function_(		"XFillArc", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XFillArcs = _rpythonic_function_(		"XFillArcs", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XFillPolygon = _rpythonic_function_(		"XFillPolygon", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XFillRectangle = _rpythonic_function_(		"XFillRectangle", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),] )

XFillRectangles = _rpythonic_function_(		"XFillRectangles", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XFlush = _rpythonic_function_(		"XFlush", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XForceScreenSaver = _rpythonic_function_(		"XForceScreenSaver", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XFree = _rpythonic_function_(		"XFree", ctypes.c_int, [] )

XFreeColormap = _rpythonic_function_(		"XFreeColormap", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XFreeColors = _rpythonic_function_(		"XFreeColors", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_ulong),] )

XFreeCursor = _rpythonic_function_(		"XFreeCursor", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XFreeExtensionList = _rpythonic_function_(		"XFreeExtensionList", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

XFreeFont = _rpythonic_function_(		"XFreeFont", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XFreeFontInfo = _rpythonic_function_(		"XFreeFontInfo", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XFreeFontNames = _rpythonic_function_(		"XFreeFontNames", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

XFreeFontPath = _rpythonic_function_(		"XFreeFontPath", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

XFreeGC = _rpythonic_function_(		"XFreeGC", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XFreeModifiermap = _rpythonic_function_(		"XFreeModifiermap", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XFreePixmap = _rpythonic_function_(		"XFreePixmap", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XGeometry = _rpythonic_function_(		"XGeometry", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XGetErrorDatabaseText = _rpythonic_function_(		"XGetErrorDatabaseText", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),] )

XGetErrorText = _rpythonic_function_(		"XGetErrorText", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),] )

XGetFontProperty = _rpythonic_function_(		"XGetFontProperty", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_ulong)),] )

XGetGCValues = _rpythonic_function_(		"XGetGCValues", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XGetGeometry = _rpythonic_function_(		"XGetGeometry", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_uint)),
	("none",		ctypes.POINTER(ctypes.c_uint)),
	("none",		ctypes.POINTER(ctypes.c_uint)),
	("none",		ctypes.POINTER(ctypes.c_uint)),] )

XGetIconName = _rpythonic_function_(		"XGetIconName", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

XGetInputFocus = _rpythonic_function_(		"XGetInputFocus", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XGetKeyboardControl = _rpythonic_function_(		"XGetKeyboardControl", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XGetPointerControl = _rpythonic_function_(		"XGetPointerControl", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XGetPointerMapping = _rpythonic_function_(		"XGetPointerMapping", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_ubyte)),
	("none",		ctypes.c_int),] )

XGetScreenSaver = _rpythonic_function_(		"XGetScreenSaver", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XGetTransientForHint = _rpythonic_function_(		"XGetTransientForHint", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_ulong)),] )

XGetWindowProperty = _rpythonic_function_(		"XGetWindowProperty", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_long),
	("none",		ctypes.c_long),
	("none",		ctypes.c_int),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),] )

XGetWindowAttributes = _rpythonic_function_(		"XGetWindowAttributes", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XGrabButton = _rpythonic_function_(		"XGrabButton", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),] )

XGrabKey = _rpythonic_function_(		"XGrabKey", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XGrabKeyboard = _rpythonic_function_(		"XGrabKeyboard", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_ulong),] )

XGrabPointer = _rpythonic_function_(		"XGrabPointer", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),] )

XGrabServer = _rpythonic_function_(		"XGrabServer", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XHeightMMOfScreen = _rpythonic_function_(		"XHeightMMOfScreen", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XHeightOfScreen = _rpythonic_function_(		"XHeightOfScreen", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XIfEvent = _rpythonic_function_(		"XIfEvent", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_void_p),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

XImageByteOrder = _rpythonic_function_(		"XImageByteOrder", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XInstallColormap = _rpythonic_function_(		"XInstallColormap", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XKeysymToKeycode = _rpythonic_function_(		"XKeysymToKeycode", ctypes.c_ubyte, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XKillClient = _rpythonic_function_(		"XKillClient", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XLookupColor = _rpythonic_function_(		"XLookupColor", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XLowerWindow = _rpythonic_function_(		"XLowerWindow", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XMapRaised = _rpythonic_function_(		"XMapRaised", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XMapSubwindows = _rpythonic_function_(		"XMapSubwindows", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XMapWindow = _rpythonic_function_(		"XMapWindow", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XMaskEvent = _rpythonic_function_(		"XMaskEvent", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_long),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XMaxCmapsOfScreen = _rpythonic_function_(		"XMaxCmapsOfScreen", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XMinCmapsOfScreen = _rpythonic_function_(		"XMinCmapsOfScreen", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XMoveResizeWindow = _rpythonic_function_(		"XMoveResizeWindow", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),] )

XMoveWindow = _rpythonic_function_(		"XMoveWindow", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XNextEvent = _rpythonic_function_(		"XNextEvent", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XNoOp = _rpythonic_function_(		"XNoOp", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XParseColor = _rpythonic_function_(		"XParseColor", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XParseGeometry = _rpythonic_function_(		"XParseGeometry", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_uint)),
	("none",		ctypes.POINTER(ctypes.c_uint)),] )

XPeekEvent = _rpythonic_function_(		"XPeekEvent", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XPeekIfEvent = _rpythonic_function_(		"XPeekIfEvent", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_void_p),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

XPending = _rpythonic_function_(		"XPending", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XPlanesOfScreen = _rpythonic_function_(		"XPlanesOfScreen", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XProtocolRevision = _rpythonic_function_(		"XProtocolRevision", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XProtocolVersion = _rpythonic_function_(		"XProtocolVersion", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XPutBackEvent = _rpythonic_function_(		"XPutBackEvent", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XPutImage = _rpythonic_function_(		"XPutImage", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),] )

XQLength = _rpythonic_function_(		"XQLength", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XQueryBestCursor = _rpythonic_function_(		"XQueryBestCursor", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.POINTER(ctypes.c_uint)),
	("none",		ctypes.POINTER(ctypes.c_uint)),] )

XQueryBestSize = _rpythonic_function_(		"XQueryBestSize", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.POINTER(ctypes.c_uint)),
	("none",		ctypes.POINTER(ctypes.c_uint)),] )

XQueryBestStipple = _rpythonic_function_(		"XQueryBestStipple", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.POINTER(ctypes.c_uint)),
	("none",		ctypes.POINTER(ctypes.c_uint)),] )

XQueryBestTile = _rpythonic_function_(		"XQueryBestTile", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.POINTER(ctypes.c_uint)),
	("none",		ctypes.POINTER(ctypes.c_uint)),] )

XQueryColor = _rpythonic_function_(		"XQueryColor", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XQueryColors = _rpythonic_function_(		"XQueryColors", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XQueryExtension = _rpythonic_function_(		"XQueryExtension", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XQueryKeymap = _rpythonic_function_(		"XQueryKeymap", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_char),] )

XQueryPointer = _rpythonic_function_(		"XQueryPointer", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_uint)),] )

XQueryTextExtents = _rpythonic_function_(		"XQueryTextExtents", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XQueryTextExtents16 = _rpythonic_function_(		"XQueryTextExtents16", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XRaiseWindow = _rpythonic_function_(		"XRaiseWindow", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XQueryTree = _rpythonic_function_(		"XQueryTree", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ulong))),
	("none",		ctypes.POINTER(ctypes.c_uint)),] )

XReadBitmapFile = _rpythonic_function_(		"XReadBitmapFile", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_uint)),
	("none",		ctypes.POINTER(ctypes.c_uint)),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XReadBitmapFileData = _rpythonic_function_(		"XReadBitmapFileData", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_uint)),
	("none",		ctypes.POINTER(ctypes.c_uint)),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XRecolorCursor = _rpythonic_function_(		"XRecolorCursor", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XRebindKeysym = _rpythonic_function_(		"XRebindKeysym", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_ubyte)),
	("none",		ctypes.c_int),] )

XRefreshKeyboardMapping = _rpythonic_function_(		"XRefreshKeyboardMapping", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XRemoveFromSaveSet = _rpythonic_function_(		"XRemoveFromSaveSet", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XRemoveHost = _rpythonic_function_(		"XRemoveHost", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XRemoveHosts = _rpythonic_function_(		"XRemoveHosts", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XReparentWindow = _rpythonic_function_(		"XReparentWindow", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XResetScreenSaver = _rpythonic_function_(		"XResetScreenSaver", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XResizeWindow = _rpythonic_function_(		"XResizeWindow", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),] )

XRestackWindows = _rpythonic_function_(		"XRestackWindows", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.c_int),] )

XRotateBuffers = _rpythonic_function_(		"XRotateBuffers", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XRotateWindowProperties = _rpythonic_function_(		"XRotateWindowProperties", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XScreenCount = _rpythonic_function_(		"XScreenCount", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XSelectInput = _rpythonic_function_(		"XSelectInput", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_long),] )

XSendEvent = _rpythonic_function_(		"XSendEvent", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_long),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XSetAccessControl = _rpythonic_function_(		"XSetAccessControl", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XSetArcMode = _rpythonic_function_(		"XSetArcMode", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XSetBackground = _rpythonic_function_(		"XSetBackground", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XSetClipMask = _rpythonic_function_(		"XSetClipMask", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XSetClipOrigin = _rpythonic_function_(		"XSetClipOrigin", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XSetClipRectangles = _rpythonic_function_(		"XSetClipRectangles", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XSetCloseDownMode = _rpythonic_function_(		"XSetCloseDownMode", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XSetCommand = _rpythonic_function_(		"XSetCommand", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("none",		ctypes.c_int),] )

XSetDashes = _rpythonic_function_(		"XSetDashes", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),] )

XSetFillRule = _rpythonic_function_(		"XSetFillRule", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XSetFillStyle = _rpythonic_function_(		"XSetFillStyle", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XSetFont = _rpythonic_function_(		"XSetFont", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XSetFontPath = _rpythonic_function_(		"XSetFontPath", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("none",		ctypes.c_int),] )

XSetForeground = _rpythonic_function_(		"XSetForeground", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XSetFunction = _rpythonic_function_(		"XSetFunction", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XSetGraphicsExposures = _rpythonic_function_(		"XSetGraphicsExposures", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XSetIconName = _rpythonic_function_(		"XSetIconName", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

XSetInputFocus = _rpythonic_function_(		"XSetInputFocus", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_ulong),] )

XSetLineAttributes = _rpythonic_function_(		"XSetLineAttributes", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XSetModifierMapping = _rpythonic_function_(		"XSetModifierMapping", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XSetPlaneMask = _rpythonic_function_(		"XSetPlaneMask", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XSetPointerMapping = _rpythonic_function_(		"XSetPointerMapping", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_ubyte)),
	("none",		ctypes.c_int),] )

XSetScreenSaver = _rpythonic_function_(		"XSetScreenSaver", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XSetSelectionOwner = _rpythonic_function_(		"XSetSelectionOwner", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),] )

XSetState = _rpythonic_function_(		"XSetState", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_ulong),] )

XSetStipple = _rpythonic_function_(		"XSetStipple", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XSetSubwindowMode = _rpythonic_function_(		"XSetSubwindowMode", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XSetTSOrigin = _rpythonic_function_(		"XSetTSOrigin", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XSetTile = _rpythonic_function_(		"XSetTile", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XSetWindowBackground = _rpythonic_function_(		"XSetWindowBackground", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),] )

XSetWindowBackgroundPixmap = _rpythonic_function_(		"XSetWindowBackgroundPixmap", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),] )

XSetWindowBorder = _rpythonic_function_(		"XSetWindowBorder", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),] )

XSetWindowBorderPixmap = _rpythonic_function_(		"XSetWindowBorderPixmap", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),] )

XSetWindowBorderWidth = _rpythonic_function_(		"XSetWindowBorderWidth", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_uint),] )

XSetWindowColormap = _rpythonic_function_(		"XSetWindowColormap", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),] )

XStoreBuffer = _rpythonic_function_(		"XStoreBuffer", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XStoreBytes = _rpythonic_function_(		"XStoreBytes", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),] )

XStoreColor = _rpythonic_function_(		"XStoreColor", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XStoreColors = _rpythonic_function_(		"XStoreColors", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XStoreName = _rpythonic_function_(		"XStoreName", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

XStoreNamedColor = _rpythonic_function_(		"XStoreNamedColor", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),] )

XSync = _rpythonic_function_(		"XSync", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XTextExtents = _rpythonic_function_(		"XTextExtents", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XTextExtents16 = _rpythonic_function_(		"XTextExtents16", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XTextWidth = _rpythonic_function_(		"XTextWidth", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),] )

XTextWidth16 = _rpythonic_function_(		"XTextWidth16", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XTranslateCoordinates = _rpythonic_function_(		"XTranslateCoordinates", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_ulong)),] )

XUndefineCursor = _rpythonic_function_(		"XUndefineCursor", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XUngrabButton = _rpythonic_function_(		"XUngrabButton", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_ulong),] )

XUngrabKey = _rpythonic_function_(		"XUngrabKey", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_ulong),] )

XUngrabKeyboard = _rpythonic_function_(		"XUngrabKeyboard", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XUngrabPointer = _rpythonic_function_(		"XUngrabPointer", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XUngrabServer = _rpythonic_function_(		"XUngrabServer", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XUninstallColormap = _rpythonic_function_(		"XUninstallColormap", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XUnloadFont = _rpythonic_function_(		"XUnloadFont", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XUnmapSubwindows = _rpythonic_function_(		"XUnmapSubwindows", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XUnmapWindow = _rpythonic_function_(		"XUnmapWindow", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XVendorRelease = _rpythonic_function_(		"XVendorRelease", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XWarpPointer = _rpythonic_function_(		"XWarpPointer", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XWidthMMOfScreen = _rpythonic_function_(		"XWidthMMOfScreen", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XWidthOfScreen = _rpythonic_function_(		"XWidthOfScreen", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XWindowEvent = _rpythonic_function_(		"XWindowEvent", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_long),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XWriteBitmapFile = _rpythonic_function_(		"XWriteBitmapFile", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XSupportsLocale = _rpythonic_function_(		"XSupportsLocale", ctypes.c_int, [] )

XSetLocaleModifiers = _rpythonic_function_(		"XSetLocaleModifiers", ctypes.POINTER(ctypes.c_char), [
	("none",		ctypes.POINTER(ctypes.c_char)),] )

XOpenOM = _rpythonic_function_(		"XOpenOM", ctypes.POINTER(_XOM), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("_XrmHashBucketRec",		ctypes.POINTER(_XrmHashBucketRec)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

XCloseOM = _rpythonic_function_(		"XCloseOM", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XDisplayOfOM = _rpythonic_function_(		"XDisplayOfOM", ctypes.POINTER(_XDisplay), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XLocaleOfOM = _rpythonic_function_(		"XLocaleOfOM", ctypes.POINTER(ctypes.c_char), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XDestroyOC = _rpythonic_function_(		"XDestroyOC", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XOMOfOC = _rpythonic_function_(		"XOMOfOC", ctypes.POINTER(_XOM), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XCreateFontSet = _rpythonic_function_(		"XCreateFontSet", ctypes.POINTER(_XOC), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(ctypes.c_char)))),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

XFreeFontSet = _rpythonic_function_(		"XFreeFontSet", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XFontsOfFontSet = _rpythonic_function_(		"XFontsOfFontSet", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)))),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(ctypes.c_char)))),] )

XBaseFontNameListOfFontSet = _rpythonic_function_(		"XBaseFontNameListOfFontSet", ctypes.POINTER(ctypes.c_char), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XLocaleOfFontSet = _rpythonic_function_(		"XLocaleOfFontSet", ctypes.POINTER(ctypes.c_char), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XContextDependentDrawing = _rpythonic_function_(		"XContextDependentDrawing", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XDirectionalDependentDrawing = _rpythonic_function_(		"XDirectionalDependentDrawing", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XContextualDrawing = _rpythonic_function_(		"XContextualDrawing", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XExtentsOfFontSet = _rpythonic_function_(		"XExtentsOfFontSet", ctypes.POINTER(XFontSetExtents), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XmbTextEscapement = _rpythonic_function_(		"XmbTextEscapement", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),] )

XwcTextEscapement = _rpythonic_function_(		"XwcTextEscapement", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_int64)),
	("none",		ctypes.c_int),] )

Xutf8TextEscapement = _rpythonic_function_(		"Xutf8TextEscapement", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),] )

XmbTextExtents = _rpythonic_function_(		"XmbTextExtents", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XwcTextExtents = _rpythonic_function_(		"XwcTextExtents", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_int64)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

Xutf8TextExtents = _rpythonic_function_(		"Xutf8TextExtents", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XmbTextPerCharExtents = _rpythonic_function_(		"XmbTextPerCharExtents", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XwcTextPerCharExtents = _rpythonic_function_(		"XwcTextPerCharExtents", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_int64)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

Xutf8TextPerCharExtents = _rpythonic_function_(		"Xutf8TextPerCharExtents", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XmbDrawText = _rpythonic_function_(		"XmbDrawText", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XwcDrawText = _rpythonic_function_(		"XwcDrawText", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

Xutf8DrawText = _rpythonic_function_(		"Xutf8DrawText", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XmbDrawString = _rpythonic_function_(		"XmbDrawString", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),] )

XwcDrawString = _rpythonic_function_(		"XwcDrawString", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_int64)),
	("none",		ctypes.c_int),] )

Xutf8DrawString = _rpythonic_function_(		"Xutf8DrawString", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),] )

XmbDrawImageString = _rpythonic_function_(		"XmbDrawImageString", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),] )

XwcDrawImageString = _rpythonic_function_(		"XwcDrawImageString", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_int64)),
	("none",		ctypes.c_int),] )

Xutf8DrawImageString = _rpythonic_function_(		"Xutf8DrawImageString", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),] )

XCloseIM = _rpythonic_function_(		"XCloseIM", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XOpenIM = _rpythonic_function_(		"XOpenIM", ctypes.POINTER(_XIM), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("_XrmHashBucketRec",		ctypes.POINTER(_XrmHashBucketRec)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

XDisplayOfIM = _rpythonic_function_(		"XDisplayOfIM", ctypes.POINTER(_XDisplay), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XLocaleOfIM = _rpythonic_function_(		"XLocaleOfIM", ctypes.POINTER(ctypes.c_char), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XDestroyIC = _rpythonic_function_(		"XDestroyIC", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XSetICFocus = _rpythonic_function_(		"XSetICFocus", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XUnsetICFocus = _rpythonic_function_(		"XUnsetICFocus", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XwcResetIC = _rpythonic_function_(		"XwcResetIC", ctypes.POINTER(ctypes.c_int64), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XmbResetIC = _rpythonic_function_(		"XmbResetIC", ctypes.POINTER(ctypes.c_char), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

Xutf8ResetIC = _rpythonic_function_(		"Xutf8ResetIC", ctypes.POINTER(ctypes.c_char), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XIMOfIC = _rpythonic_function_(		"XIMOfIC", ctypes.POINTER(_XIM), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XFilterEvent = _rpythonic_function_(		"XFilterEvent", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XmbLookupString = _rpythonic_function_(		"XmbLookupString", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XwcLookupString = _rpythonic_function_(		"XwcLookupString", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_int64)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

Xutf8LookupString = _rpythonic_function_(		"Xutf8LookupString", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XRegisterIMInstantiateCallback = _rpythonic_function_(		"XRegisterIMInstantiateCallback", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("_XrmHashBucketRec",		ctypes.POINTER(_XrmHashBucketRec)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),)),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

XUnregisterIMInstantiateCallback = _rpythonic_function_(		"XUnregisterIMInstantiateCallback", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("_XrmHashBucketRec",		ctypes.POINTER(_XrmHashBucketRec)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),)),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

XConnectionWatchProc = _rpythonic_function_(		"XConnectionWatchProc", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

XInternalConnectionNumbers = _rpythonic_function_(		"XInternalConnectionNumbers", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XProcessInternalConnection = _rpythonic_function_(		"XProcessInternalConnection", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XAddConnectionWatch = _rpythonic_function_(		"XAddConnectionWatch", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),ctypes.c_int,ctypes.c_int,ctypes.POINTER(ctypes.POINTER(ctypes.c_char)),)),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

XRemoveConnectionWatch = _rpythonic_function_(		"XRemoveConnectionWatch", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),ctypes.c_int,ctypes.c_int,ctypes.POINTER(ctypes.POINTER(ctypes.c_char)),)),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

XSetAuthorization = _rpythonic_function_(		"XSetAuthorization", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),] )

_Xmbtowc = _rpythonic_function_(		"_Xmbtowc", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_int64)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),] )

_Xwctomb = _rpythonic_function_(		"_Xwctomb", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int64),] )

XGetEventData = _rpythonic_function_(		"XGetEventData", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XFreeEventData = _rpythonic_function_(		"XFreeEventData", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XAllocClassHint = _rpythonic_function_(		"XAllocClassHint", ctypes.POINTER(XClassHint), [] )

XAllocIconSize = _rpythonic_function_(		"XAllocIconSize", ctypes.POINTER(XIconSize), [] )

XAllocSizeHints = _rpythonic_function_(		"XAllocSizeHints", ctypes.POINTER(XSizeHints), [] )

XAllocStandardColormap = _rpythonic_function_(		"XAllocStandardColormap", ctypes.POINTER(XStandardColormap), [] )

XAllocWMHints = _rpythonic_function_(		"XAllocWMHints", ctypes.POINTER(XWMHints), [] )

XClipBox = _rpythonic_function_(		"XClipBox", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XCreateRegion = _rpythonic_function_(		"XCreateRegion", ctypes.POINTER(_XRegion), [] )

XDefaultString = _rpythonic_function_(		"XDefaultString", ctypes.POINTER(ctypes.c_char), [] )

XDeleteContext = _rpythonic_function_(		"XDeleteContext", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),] )

XDestroyRegion = _rpythonic_function_(		"XDestroyRegion", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XEmptyRegion = _rpythonic_function_(		"XEmptyRegion", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XEqualRegion = _rpythonic_function_(		"XEqualRegion", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XFindContext = _rpythonic_function_(		"XFindContext", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

XGetClassHint = _rpythonic_function_(		"XGetClassHint", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XGetIconSizes = _rpythonic_function_(		"XGetIconSizes", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XGetNormalHints = _rpythonic_function_(		"XGetNormalHints", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XGetRGBColormaps = _rpythonic_function_(		"XGetRGBColormaps", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.c_ulong),] )

XGetSizeHints = _rpythonic_function_(		"XGetSizeHints", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XGetStandardColormap = _rpythonic_function_(		"XGetStandardColormap", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XGetTextProperty = _rpythonic_function_(		"XGetTextProperty", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XGetVisualInfo = _rpythonic_function_(		"XGetVisualInfo", ctypes.POINTER(XVisualInfo), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_long),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XGetWMClientMachine = _rpythonic_function_(		"XGetWMClientMachine", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XGetWMHints = _rpythonic_function_(		"XGetWMHints", ctypes.POINTER(XWMHints), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XGetWMIconName = _rpythonic_function_(		"XGetWMIconName", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XGetWMName = _rpythonic_function_(		"XGetWMName", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XGetWMNormalHints = _rpythonic_function_(		"XGetWMNormalHints", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_long)),] )

XGetWMSizeHints = _rpythonic_function_(		"XGetWMSizeHints", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_long)),
	("none",		ctypes.c_ulong),] )

XGetZoomHints = _rpythonic_function_(		"XGetZoomHints", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XIntersectRegion = _rpythonic_function_(		"XIntersectRegion", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XConvertCase = _rpythonic_function_(		"XConvertCase", ctypes.c_void_p, [
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.POINTER(ctypes.c_ulong)),] )

XLookupString = _rpythonic_function_(		"XLookupString", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XMatchVisualInfo = _rpythonic_function_(		"XMatchVisualInfo", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XOffsetRegion = _rpythonic_function_(		"XOffsetRegion", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XPointInRegion = _rpythonic_function_(		"XPointInRegion", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XPolygonRegion = _rpythonic_function_(		"XPolygonRegion", ctypes.POINTER(_XRegion), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XRectInRegion = _rpythonic_function_(		"XRectInRegion", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),] )

XSaveContext = _rpythonic_function_(		"XSaveContext", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

XSetClassHint = _rpythonic_function_(		"XSetClassHint", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XSetIconSizes = _rpythonic_function_(		"XSetIconSizes", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XSetNormalHints = _rpythonic_function_(		"XSetNormalHints", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XSetRGBColormaps = _rpythonic_function_(		"XSetRGBColormaps", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_ulong),] )

XSetSizeHints = _rpythonic_function_(		"XSetSizeHints", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XSetStandardProperties = _rpythonic_function_(		"XSetStandardProperties", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XSetTextProperty = _rpythonic_function_(		"XSetTextProperty", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XSetWMClientMachine = _rpythonic_function_(		"XSetWMClientMachine", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XSetWMHints = _rpythonic_function_(		"XSetWMHints", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XSetWMIconName = _rpythonic_function_(		"XSetWMIconName", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XSetWMName = _rpythonic_function_(		"XSetWMName", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XSetWMNormalHints = _rpythonic_function_(		"XSetWMNormalHints", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XSetWMProperties = _rpythonic_function_(		"XSetWMProperties", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XmbSetWMProperties = _rpythonic_function_(		"XmbSetWMProperties", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

Xutf8SetWMProperties = _rpythonic_function_(		"Xutf8SetWMProperties", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XSetWMSizeHints = _rpythonic_function_(		"XSetWMSizeHints", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XSetRegion = _rpythonic_function_(		"XSetRegion", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XSetStandardColormap = _rpythonic_function_(		"XSetStandardColormap", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XSetZoomHints = _rpythonic_function_(		"XSetZoomHints", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XShrinkRegion = _rpythonic_function_(		"XShrinkRegion", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XStringListToTextProperty = _rpythonic_function_(		"XStringListToTextProperty", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XSubtractRegion = _rpythonic_function_(		"XSubtractRegion", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XmbTextListToTextProperty = _rpythonic_function_(		"XmbTextListToTextProperty", ctypes.c_int, [
	("display",		ctypes.POINTER(_XDisplay)),
	("C_list",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("count",		ctypes.c_int),
	("style",		ctypes.c_int),
	("text_prop_return",		ctypes.POINTER(XTextProperty)),] )

XwcTextListToTextProperty = _rpythonic_function_(		"XwcTextListToTextProperty", ctypes.c_int, [
	("display",		ctypes.POINTER(_XDisplay)),
	("C_list",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int64))),
	("count",		ctypes.c_int),
	("style",		ctypes.c_int),
	("text_prop_return",		ctypes.POINTER(XTextProperty)),] )

Xutf8TextListToTextProperty = _rpythonic_function_(		"Xutf8TextListToTextProperty", ctypes.c_int, [
	("display",		ctypes.POINTER(_XDisplay)),
	("C_list",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("count",		ctypes.c_int),
	("style",		ctypes.c_int),
	("text_prop_return",		ctypes.POINTER(XTextProperty)),] )

XwcFreeStringList = _rpythonic_function_(		"XwcFreeStringList", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int64))),] )

XTextPropertyToStringList = _rpythonic_function_(		"XTextPropertyToStringList", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(ctypes.c_char)))),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XmbTextPropertyToTextList = _rpythonic_function_(		"XmbTextPropertyToTextList", ctypes.c_int, [
	("display",		ctypes.POINTER(_XDisplay)),
	("text_prop",		ctypes.POINTER(XTextProperty)),
	("list_return",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(ctypes.c_char)))),
	("count_return",		ctypes.POINTER(ctypes.c_int)),] )

XwcTextPropertyToTextList = _rpythonic_function_(		"XwcTextPropertyToTextList", ctypes.c_int, [
	("display",		ctypes.POINTER(_XDisplay)),
	("text_prop",		ctypes.POINTER(XTextProperty)),
	("list_return",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(ctypes.c_int64)))),
	("count_return",		ctypes.POINTER(ctypes.c_int)),] )

Xutf8TextPropertyToTextList = _rpythonic_function_(		"Xutf8TextPropertyToTextList", ctypes.c_int, [
	("display",		ctypes.POINTER(_XDisplay)),
	("text_prop",		ctypes.POINTER(XTextProperty)),
	("list_return",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(ctypes.c_char)))),
	("count_return",		ctypes.POINTER(ctypes.c_int)),] )

XUnionRectWithRegion = _rpythonic_function_(		"XUnionRectWithRegion", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XUnionRegion = _rpythonic_function_(		"XUnionRegion", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XWMGeometry = _rpythonic_function_(		"XWMGeometry", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_uint),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XXorRegion = _rpythonic_function_(		"XXorRegion", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

glXChooseVisual = _rpythonic_function_(		"glXChooseVisual", ctypes.POINTER(XVisualInfo), [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("screen",		ctypes.c_int),
	("attribList",		ctypes.POINTER(ctypes.c_int)),] )

glXCreateContext = _rpythonic_function_(		"glXCreateContext", ctypes.POINTER(__GLXcontextRec), [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("vis",		ctypes.POINTER(XVisualInfo)),
	("shareList",		ctypes.POINTER(__GLXcontextRec)),
	("direct",		ctypes.c_int),] )

glXDestroyContext = _rpythonic_function_(		"glXDestroyContext", ctypes.c_void_p, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("ctx",		ctypes.POINTER(__GLXcontextRec)),] )

glXMakeCurrent = _rpythonic_function_(		"glXMakeCurrent", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("drawable",		ctypes.c_ulong),
	("ctx",		ctypes.POINTER(__GLXcontextRec)),] )

glXCopyContext = _rpythonic_function_(		"glXCopyContext", ctypes.c_void_p, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("src",		ctypes.POINTER(__GLXcontextRec)),
	("dst",		ctypes.POINTER(__GLXcontextRec)),
	("mask",		ctypes.c_ulong),] )

glXSwapBuffers = _rpythonic_function_(		"glXSwapBuffers", ctypes.c_void_p, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("drawable",		ctypes.c_ulong),] )

glXCreateGLXPixmap = _rpythonic_function_(		"glXCreateGLXPixmap", ctypes.c_ulong, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("visual",		ctypes.POINTER(XVisualInfo)),
	("pixmap",		ctypes.c_ulong),] )

glXDestroyGLXPixmap = _rpythonic_function_(		"glXDestroyGLXPixmap", ctypes.c_void_p, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("pixmap",		ctypes.c_ulong),] )

glXQueryExtension = _rpythonic_function_(		"glXQueryExtension", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("errorb",		ctypes.POINTER(ctypes.c_int)),
	("event",		ctypes.POINTER(ctypes.c_int)),] )

glXQueryVersion = _rpythonic_function_(		"glXQueryVersion", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("maj",		ctypes.POINTER(ctypes.c_int)),
	("min",		ctypes.POINTER(ctypes.c_int)),] )

glXIsDirect = _rpythonic_function_(		"glXIsDirect", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("ctx",		ctypes.POINTER(__GLXcontextRec)),] )

glXGetConfig = _rpythonic_function_(		"glXGetConfig", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("visual",		ctypes.POINTER(XVisualInfo)),
	("attrib",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_int)),] )

glXGetCurrentContext = _rpythonic_function_(		"glXGetCurrentContext", ctypes.POINTER(__GLXcontextRec), [] )

glXGetCurrentDrawable = _rpythonic_function_(		"glXGetCurrentDrawable", ctypes.c_ulong, [] )

glXWaitGL = _rpythonic_function_(		"glXWaitGL", ctypes.c_void_p, [] )

glXWaitX = _rpythonic_function_(		"glXWaitX", ctypes.c_void_p, [] )

glXUseXFont = _rpythonic_function_(		"glXUseXFont", ctypes.c_void_p, [
	("font",		ctypes.c_ulong),
	("first",		ctypes.c_int),
	("count",		ctypes.c_int),
	("C_list",		ctypes.c_int),] )

glXQueryExtensionsString = _rpythonic_function_(		"glXQueryExtensionsString", ctypes.POINTER(ctypes.c_char), [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("screen",		ctypes.c_int),] )

glXQueryServerString = _rpythonic_function_(		"glXQueryServerString", ctypes.POINTER(ctypes.c_char), [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("screen",		ctypes.c_int),
	("name",		ctypes.c_int),] )

glXGetClientString = _rpythonic_function_(		"glXGetClientString", ctypes.POINTER(ctypes.c_char), [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("name",		ctypes.c_int),] )

glXGetCurrentDisplay = _rpythonic_function_(		"glXGetCurrentDisplay", ctypes.POINTER(_XDisplay), [] )

glXChooseFBConfig = _rpythonic_function_(		"glXChooseFBConfig", ctypes.POINTER(ctypes.POINTER(__GLXFBConfigRec)), [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("screen",		ctypes.c_int),
	("attribList",		ctypes.POINTER(ctypes.c_int)),
	("nitems",		ctypes.POINTER(ctypes.c_int)),] )

glXGetFBConfigAttrib = _rpythonic_function_(		"glXGetFBConfigAttrib", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("config",		ctypes.POINTER(__GLXFBConfigRec)),
	("attribute",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_int)),] )

glXGetFBConfigs = _rpythonic_function_(		"glXGetFBConfigs", ctypes.POINTER(ctypes.POINTER(__GLXFBConfigRec)), [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("screen",		ctypes.c_int),
	("nelements",		ctypes.POINTER(ctypes.c_int)),] )

glXGetVisualFromFBConfig = _rpythonic_function_(		"glXGetVisualFromFBConfig", ctypes.POINTER(XVisualInfo), [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("config",		ctypes.POINTER(__GLXFBConfigRec)),] )

glXCreateWindow = _rpythonic_function_(		"glXCreateWindow", ctypes.c_ulong, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("config",		ctypes.POINTER(__GLXFBConfigRec)),
	("win",		ctypes.c_ulong),
	("attribList",		ctypes.POINTER(ctypes.c_int)),] )

glXDestroyWindow = _rpythonic_function_(		"glXDestroyWindow", ctypes.c_void_p, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("window",		ctypes.c_ulong),] )

glXCreatePixmap = _rpythonic_function_(		"glXCreatePixmap", ctypes.c_ulong, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("config",		ctypes.POINTER(__GLXFBConfigRec)),
	("pixmap",		ctypes.c_ulong),
	("attribList",		ctypes.POINTER(ctypes.c_int)),] )

glXDestroyPixmap = _rpythonic_function_(		"glXDestroyPixmap", ctypes.c_void_p, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("pixmap",		ctypes.c_ulong),] )

glXCreatePbuffer = _rpythonic_function_(		"glXCreatePbuffer", ctypes.c_ulong, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("config",		ctypes.POINTER(__GLXFBConfigRec)),
	("attribList",		ctypes.POINTER(ctypes.c_int)),] )

glXDestroyPbuffer = _rpythonic_function_(		"glXDestroyPbuffer", ctypes.c_void_p, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("pbuf",		ctypes.c_ulong),] )

glXQueryDrawable = _rpythonic_function_(		"glXQueryDrawable", ctypes.c_void_p, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("draw",		ctypes.c_ulong),
	("attribute",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_uint)),] )

glXCreateNewContext = _rpythonic_function_(		"glXCreateNewContext", ctypes.POINTER(__GLXcontextRec), [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("config",		ctypes.POINTER(__GLXFBConfigRec)),
	("renderType",		ctypes.c_int),
	("shareList",		ctypes.POINTER(__GLXcontextRec)),
	("direct",		ctypes.c_int),] )

glXMakeContextCurrent = _rpythonic_function_(		"glXMakeContextCurrent", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("draw",		ctypes.c_ulong),
	("read",		ctypes.c_ulong),
	("ctx",		ctypes.POINTER(__GLXcontextRec)),] )

glXGetCurrentReadDrawable = _rpythonic_function_(		"glXGetCurrentReadDrawable", ctypes.c_ulong, [] )

glXQueryContext = _rpythonic_function_(		"glXQueryContext", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("ctx",		ctypes.POINTER(__GLXcontextRec)),
	("attribute",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_int)),] )

glXSelectEvent = _rpythonic_function_(		"glXSelectEvent", ctypes.c_void_p, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("drawable",		ctypes.c_ulong),
	("mask",		ctypes.c_ulong),] )

glXGetSelectedEvent = _rpythonic_function_(		"glXGetSelectedEvent", ctypes.c_void_p, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("drawable",		ctypes.c_ulong),
	("mask",		ctypes.POINTER(ctypes.c_ulong)),] )

PFNGLXGETFBCONFIGSPROC = _rpythonic_function_(		"PFNGLXGETFBCONFIGSPROC", ctypes.POINTER(ctypes.POINTER(__GLXFBConfigRec)), [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("screen",		ctypes.c_int),
	("nelements",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLXCHOOSEFBCONFIGPROC = _rpythonic_function_(		"PFNGLXCHOOSEFBCONFIGPROC", ctypes.POINTER(ctypes.POINTER(__GLXFBConfigRec)), [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("screen",		ctypes.c_int),
	("attrib_list",		ctypes.POINTER(ctypes.c_int)),
	("nelements",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLXGETFBCONFIGATTRIBPROC = _rpythonic_function_(		"PFNGLXGETFBCONFIGATTRIBPROC", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("config",		ctypes.POINTER(__GLXFBConfigRec)),
	("attribute",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLXGETVISUALFROMFBCONFIGPROC = _rpythonic_function_(		"PFNGLXGETVISUALFROMFBCONFIGPROC", ctypes.POINTER(XVisualInfo), [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("config",		ctypes.POINTER(__GLXFBConfigRec)),] )

PFNGLXCREATEWINDOWPROC = _rpythonic_function_(		"PFNGLXCREATEWINDOWPROC", ctypes.c_ulong, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("config",		ctypes.POINTER(__GLXFBConfigRec)),
	("win",		ctypes.c_ulong),
	("attrib_list",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLXDESTROYWINDOWPROC = _rpythonic_function_(		"PFNGLXDESTROYWINDOWPROC", ctypes.c_void_p, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("win",		ctypes.c_ulong),] )

PFNGLXCREATEPIXMAPPROC = _rpythonic_function_(		"PFNGLXCREATEPIXMAPPROC", ctypes.c_ulong, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("config",		ctypes.POINTER(__GLXFBConfigRec)),
	("pixmap",		ctypes.c_ulong),
	("attrib_list",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLXDESTROYPIXMAPPROC = _rpythonic_function_(		"PFNGLXDESTROYPIXMAPPROC", ctypes.c_void_p, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("pixmap",		ctypes.c_ulong),] )

PFNGLXCREATEPBUFFERPROC = _rpythonic_function_(		"PFNGLXCREATEPBUFFERPROC", ctypes.c_ulong, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("config",		ctypes.POINTER(__GLXFBConfigRec)),
	("attrib_list",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLXDESTROYPBUFFERPROC = _rpythonic_function_(		"PFNGLXDESTROYPBUFFERPROC", ctypes.c_void_p, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("pbuf",		ctypes.c_ulong),] )

PFNGLXQUERYDRAWABLEPROC = _rpythonic_function_(		"PFNGLXQUERYDRAWABLEPROC", ctypes.c_void_p, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("draw",		ctypes.c_ulong),
	("attribute",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLXCREATENEWCONTEXTPROC = _rpythonic_function_(		"PFNGLXCREATENEWCONTEXTPROC", ctypes.POINTER(__GLXcontextRec), [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("config",		ctypes.POINTER(__GLXFBConfigRec)),
	("render_type",		ctypes.c_int),
	("share_list",		ctypes.POINTER(__GLXcontextRec)),
	("direct",		ctypes.c_int),] )

PFNGLXMAKECONTEXTCURRENTPROC = _rpythonic_function_(		"PFNGLXMAKECONTEXTCURRENTPROC", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("draw",		ctypes.c_ulong),
	("read",		ctypes.c_ulong),
	("ctx",		ctypes.POINTER(__GLXcontextRec)),] )

PFNGLXGETCURRENTREADDRAWABLEPROC = _rpythonic_function_(		"PFNGLXGETCURRENTREADDRAWABLEPROC", ctypes.c_ulong, [] )

PFNGLXGETCURRENTDISPLAYPROC = _rpythonic_function_(		"PFNGLXGETCURRENTDISPLAYPROC", ctypes.POINTER(_XDisplay), [] )

PFNGLXQUERYCONTEXTPROC = _rpythonic_function_(		"PFNGLXQUERYCONTEXTPROC", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("ctx",		ctypes.POINTER(__GLXcontextRec)),
	("attribute",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLXSELECTEVENTPROC = _rpythonic_function_(		"PFNGLXSELECTEVENTPROC", ctypes.c_void_p, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("draw",		ctypes.c_ulong),
	("event_mask",		ctypes.c_ulong),] )

PFNGLXGETSELECTEDEVENTPROC = _rpythonic_function_(		"PFNGLXGETSELECTEDEVENTPROC", ctypes.c_void_p, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("draw",		ctypes.c_ulong),
	("event_mask",		ctypes.POINTER(ctypes.c_ulong)),] )

glXGetProcAddressARB = _rpythonic_function_(		"glXGetProcAddressARB", ctypes.CFUNCTYPE(ctypes.c_void_p, ), [
	("none",		ctypes.POINTER(ctypes.c_ubyte)),] )

glXGetProcAddress = _rpythonic_function_(		"glXGetProcAddress", ctypes.c_void_p, [] )

PFNGLXGETPROCADDRESSPROC = _rpythonic_function_(		"PFNGLXGETPROCADDRESSPROC", ctypes.CFUNCTYPE(ctypes.c_void_p, ), [
	("procName",		ctypes.POINTER(ctypes.c_ubyte)),] )

PFNGLXCREATECONTEXTATTRIBSARBPROC = _rpythonic_function_(		"PFNGLXCREATECONTEXTATTRIBSARBPROC", ctypes.POINTER(__GLXcontextRec), [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("config",		ctypes.POINTER(__GLXFBConfigRec)),
	("share_context",		ctypes.POINTER(__GLXcontextRec)),
	("direct",		ctypes.c_int),
	("attrib_list",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLXSWAPINTERVALSGIPROC = _rpythonic_function_(		"PFNGLXSWAPINTERVALSGIPROC", ctypes.c_int, [
	("interval",		ctypes.c_int),] )

PFNGLXGETVIDEOSYNCSGIPROC = _rpythonic_function_(		"PFNGLXGETVIDEOSYNCSGIPROC", ctypes.c_int, [
	("count",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLXWAITVIDEOSYNCSGIPROC = _rpythonic_function_(		"PFNGLXWAITVIDEOSYNCSGIPROC", ctypes.c_int, [
	("divisor",		ctypes.c_int),
	("remainder",		ctypes.c_int),
	("count",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLXMAKECURRENTREADSGIPROC = _rpythonic_function_(		"PFNGLXMAKECURRENTREADSGIPROC", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("draw",		ctypes.c_ulong),
	("read",		ctypes.c_ulong),
	("ctx",		ctypes.POINTER(__GLXcontextRec)),] )

PFNGLXGETCURRENTREADDRAWABLESGIPROC = _rpythonic_function_(		"PFNGLXGETCURRENTREADDRAWABLESGIPROC", ctypes.c_ulong, [] )

PFNGLXGETCURRENTDISPLAYEXTPROC = _rpythonic_function_(		"PFNGLXGETCURRENTDISPLAYEXTPROC", ctypes.POINTER(_XDisplay), [] )

PFNGLXQUERYCONTEXTINFOEXTPROC = _rpythonic_function_(		"PFNGLXQUERYCONTEXTINFOEXTPROC", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("context",		ctypes.POINTER(__GLXcontextRec)),
	("attribute",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLXGETCONTEXTIDEXTPROC = _rpythonic_function_(		"PFNGLXGETCONTEXTIDEXTPROC", ctypes.c_ulong, [
	("context",		ctypes.POINTER(__GLXcontextRec)),] )

PFNGLXIMPORTCONTEXTEXTPROC = _rpythonic_function_(		"PFNGLXIMPORTCONTEXTEXTPROC", ctypes.POINTER(__GLXcontextRec), [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("contextID",		ctypes.c_ulong),] )

PFNGLXFREECONTEXTEXTPROC = _rpythonic_function_(		"PFNGLXFREECONTEXTEXTPROC", ctypes.c_void_p, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("context",		ctypes.POINTER(__GLXcontextRec)),] )

PFNGLXGETFBCONFIGATTRIBSGIXPROC = _rpythonic_function_(		"PFNGLXGETFBCONFIGATTRIBSGIXPROC", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("config",		ctypes.POINTER(__GLXFBConfigRec)),
	("attribute",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLXCHOOSEFBCONFIGSGIXPROC = _rpythonic_function_(		"PFNGLXCHOOSEFBCONFIGSGIXPROC", ctypes.POINTER(ctypes.POINTER(__GLXFBConfigRec)), [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("screen",		ctypes.c_int),
	("attrib_list",		ctypes.POINTER(ctypes.c_int)),
	("nelements",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC = _rpythonic_function_(		"PFNGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC", ctypes.c_ulong, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("config",		ctypes.POINTER(__GLXFBConfigRec)),
	("pixmap",		ctypes.c_ulong),] )

PFNGLXCREATECONTEXTWITHCONFIGSGIXPROC = _rpythonic_function_(		"PFNGLXCREATECONTEXTWITHCONFIGSGIXPROC", ctypes.POINTER(__GLXcontextRec), [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("config",		ctypes.POINTER(__GLXFBConfigRec)),
	("render_type",		ctypes.c_int),
	("share_list",		ctypes.POINTER(__GLXcontextRec)),
	("direct",		ctypes.c_int),] )

PFNGLXGETVISUALFROMFBCONFIGSGIXPROC = _rpythonic_function_(		"PFNGLXGETVISUALFROMFBCONFIGSGIXPROC", ctypes.POINTER(XVisualInfo), [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("config",		ctypes.POINTER(__GLXFBConfigRec)),] )

PFNGLXGETFBCONFIGFROMVISUALSGIXPROC = _rpythonic_function_(		"PFNGLXGETFBCONFIGFROMVISUALSGIXPROC", ctypes.POINTER(__GLXFBConfigRec), [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("vis",		ctypes.POINTER(XVisualInfo)),] )

PFNGLXCREATEGLXPBUFFERSGIXPROC = _rpythonic_function_(		"PFNGLXCREATEGLXPBUFFERSGIXPROC", ctypes.c_ulong, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("config",		ctypes.POINTER(__GLXFBConfigRec)),
	("width",		ctypes.c_uint),
	("height",		ctypes.c_uint),
	("attrib_list",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLXDESTROYGLXPBUFFERSGIXPROC = _rpythonic_function_(		"PFNGLXDESTROYGLXPBUFFERSGIXPROC", ctypes.c_void_p, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("pbuf",		ctypes.c_ulong),] )

PFNGLXQUERYGLXPBUFFERSGIXPROC = _rpythonic_function_(		"PFNGLXQUERYGLXPBUFFERSGIXPROC", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("pbuf",		ctypes.c_ulong),
	("attribute",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLXSELECTEVENTSGIXPROC = _rpythonic_function_(		"PFNGLXSELECTEVENTSGIXPROC", ctypes.c_void_p, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("drawable",		ctypes.c_ulong),
	("mask",		ctypes.c_ulong),] )

PFNGLXGETSELECTEDEVENTSGIXPROC = _rpythonic_function_(		"PFNGLXGETSELECTEDEVENTSGIXPROC", ctypes.c_void_p, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("drawable",		ctypes.c_ulong),
	("mask",		ctypes.POINTER(ctypes.c_ulong)),] )

PFNGLXCUSHIONSGIPROC = _rpythonic_function_(		"PFNGLXCUSHIONSGIPROC", ctypes.c_void_p, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("window",		ctypes.c_ulong),
	("cushion",		ctypes.c_float),] )

PFNGLXBINDCHANNELTOWINDOWSGIXPROC = _rpythonic_function_(		"PFNGLXBINDCHANNELTOWINDOWSGIXPROC", ctypes.c_int, [
	("display",		ctypes.POINTER(_XDisplay)),
	("screen",		ctypes.c_int),
	("channel",		ctypes.c_int),
	("window",		ctypes.c_ulong),] )

PFNGLXQUERYCHANNELRECTSGIXPROC = _rpythonic_function_(		"PFNGLXQUERYCHANNELRECTSGIXPROC", ctypes.c_int, [
	("display",		ctypes.POINTER(_XDisplay)),
	("screen",		ctypes.c_int),
	("channel",		ctypes.c_int),
	("dx",		ctypes.POINTER(ctypes.c_int)),
	("dy",		ctypes.POINTER(ctypes.c_int)),
	("dw",		ctypes.POINTER(ctypes.c_int)),
	("dh",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLXCHANNELRECTSGIXPROC = _rpythonic_function_(		"PFNGLXCHANNELRECTSGIXPROC", ctypes.c_int, [
	("display",		ctypes.POINTER(_XDisplay)),
	("screen",		ctypes.c_int),
	("channel",		ctypes.c_int),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("w",		ctypes.c_int),
	("h",		ctypes.c_int),] )

PFNGLXQUERYCHANNELDELTASSGIXPROC = _rpythonic_function_(		"PFNGLXQUERYCHANNELDELTASSGIXPROC", ctypes.c_int, [
	("display",		ctypes.POINTER(_XDisplay)),
	("screen",		ctypes.c_int),
	("channel",		ctypes.c_int),
	("x",		ctypes.POINTER(ctypes.c_int)),
	("y",		ctypes.POINTER(ctypes.c_int)),
	("w",		ctypes.POINTER(ctypes.c_int)),
	("h",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLXCHANNELRECTSYNCSGIXPROC = _rpythonic_function_(		"PFNGLXCHANNELRECTSYNCSGIXPROC", ctypes.c_int, [
	("display",		ctypes.POINTER(_XDisplay)),
	("screen",		ctypes.c_int),
	("channel",		ctypes.c_int),
	("synctype",		ctypes.c_uint),] )

PFNGLXJOINSWAPGROUPSGIXPROC = _rpythonic_function_(		"PFNGLXJOINSWAPGROUPSGIXPROC", ctypes.c_void_p, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("drawable",		ctypes.c_ulong),
	("member",		ctypes.c_ulong),] )

PFNGLXBINDSWAPBARRIERSGIXPROC = _rpythonic_function_(		"PFNGLXBINDSWAPBARRIERSGIXPROC", ctypes.c_void_p, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("drawable",		ctypes.c_ulong),
	("barrier",		ctypes.c_int),] )

PFNGLXQUERYMAXSWAPBARRIERSSGIXPROC = _rpythonic_function_(		"PFNGLXQUERYMAXSWAPBARRIERSSGIXPROC", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("screen",		ctypes.c_int),
	("max",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLXGETTRANSPARENTINDEXSUNPROC = _rpythonic_function_(		"PFNGLXGETTRANSPARENTINDEXSUNPROC", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("overlay",		ctypes.c_ulong),
	("underlay",		ctypes.c_ulong),
	("pTransparentIndex",		ctypes.POINTER(ctypes.c_long)),] )

PFNGLXCOPYSUBBUFFERMESAPROC = _rpythonic_function_(		"PFNGLXCOPYSUBBUFFERMESAPROC", ctypes.c_void_p, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("drawable",		ctypes.c_ulong),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

PFNGLXCREATEGLXPIXMAPMESAPROC = _rpythonic_function_(		"PFNGLXCREATEGLXPIXMAPMESAPROC", ctypes.c_ulong, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("visual",		ctypes.POINTER(XVisualInfo)),
	("pixmap",		ctypes.c_ulong),
	("cmap",		ctypes.c_ulong),] )

PFNGLXRELEASEBUFFERSMESAPROC = _rpythonic_function_(		"PFNGLXRELEASEBUFFERSMESAPROC", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("drawable",		ctypes.c_ulong),] )

PFNGLXSET3DFXMODEMESAPROC = _rpythonic_function_(		"PFNGLXSET3DFXMODEMESAPROC", ctypes.c_int, [
	("mode",		ctypes.c_int),] )

PFNGLXGETSYNCVALUESOMLPROC = _rpythonic_function_(		"PFNGLXGETSYNCVALUESOMLPROC", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("drawable",		ctypes.c_ulong),
	("ust",		ctypes.POINTER(ctypes.c_int64)),
	("msc",		ctypes.POINTER(ctypes.c_int64)),
	("sbc",		ctypes.POINTER(ctypes.c_int64)),] )

PFNGLXGETMSCRATEOMLPROC = _rpythonic_function_(		"PFNGLXGETMSCRATEOMLPROC", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("drawable",		ctypes.c_ulong),
	("numerator",		ctypes.POINTER(ctypes.c_int32)),
	("denominator",		ctypes.POINTER(ctypes.c_int32)),] )

PFNGLXWAITFORMSCOMLPROC = _rpythonic_function_(		"PFNGLXWAITFORMSCOMLPROC", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("drawable",		ctypes.c_ulong),
	("target_msc",		ctypes.c_int64),
	("divisor",		ctypes.c_int64),
	("remainder",		ctypes.c_int64),
	("ust",		ctypes.POINTER(ctypes.c_int64)),
	("msc",		ctypes.POINTER(ctypes.c_int64)),
	("sbc",		ctypes.POINTER(ctypes.c_int64)),] )

PFNGLXSWAPBUFFERSMSCOMLPROC = _rpythonic_function_(		"PFNGLXSWAPBUFFERSMSCOMLPROC", ctypes.c_int64, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("drawable",		ctypes.c_ulong),
	("target_msc",		ctypes.c_int64),
	("divisor",		ctypes.c_int64),
	("remainder",		ctypes.c_int64),] )

PFNGLXWAITFORSBCOMLPROC = _rpythonic_function_(		"PFNGLXWAITFORSBCOMLPROC", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("drawable",		ctypes.c_ulong),
	("target_sbc",		ctypes.c_int64),
	("ust",		ctypes.POINTER(ctypes.c_int64)),
	("msc",		ctypes.POINTER(ctypes.c_int64)),
	("sbc",		ctypes.POINTER(ctypes.c_int64)),] )

PFNGLXQUERYHYPERPIPENETWORKSGIXPROC = _rpythonic_function_(		"PFNGLXQUERYHYPERPIPENETWORKSGIXPROC", ctypes.POINTER(GLXHyperpipeNetworkSGIX), [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("npipes",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLXHYPERPIPECONFIGSGIXPROC = _rpythonic_function_(		"PFNGLXHYPERPIPECONFIGSGIXPROC", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("networkId",		ctypes.c_int),
	("npipes",		ctypes.c_int),
	("cfg",		ctypes.POINTER(GLXHyperpipeConfigSGIX)),
	("hpId",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLXQUERYHYPERPIPECONFIGSGIXPROC = _rpythonic_function_(		"PFNGLXQUERYHYPERPIPECONFIGSGIXPROC", ctypes.POINTER(GLXHyperpipeConfigSGIX), [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("hpId",		ctypes.c_int),
	("npipes",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLXDESTROYHYPERPIPECONFIGSGIXPROC = _rpythonic_function_(		"PFNGLXDESTROYHYPERPIPECONFIGSGIXPROC", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("hpId",		ctypes.c_int),] )

PFNGLXBINDHYPERPIPESGIXPROC = _rpythonic_function_(		"PFNGLXBINDHYPERPIPESGIXPROC", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("hpId",		ctypes.c_int),] )

PFNGLXQUERYHYPERPIPEBESTATTRIBSGIXPROC = _rpythonic_function_(		"PFNGLXQUERYHYPERPIPEBESTATTRIBSGIXPROC", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("timeSlice",		ctypes.c_int),
	("attrib",		ctypes.c_int),
	("size",		ctypes.c_int),
	("attribList",		ctypes.POINTER(ctypes.c_void_p)),
	("returnAttribList",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLXHYPERPIPEATTRIBSGIXPROC = _rpythonic_function_(		"PFNGLXHYPERPIPEATTRIBSGIXPROC", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("timeSlice",		ctypes.c_int),
	("attrib",		ctypes.c_int),
	("size",		ctypes.c_int),
	("attribList",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLXQUERYHYPERPIPEATTRIBSGIXPROC = _rpythonic_function_(		"PFNGLXQUERYHYPERPIPEATTRIBSGIXPROC", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("timeSlice",		ctypes.c_int),
	("attrib",		ctypes.c_int),
	("size",		ctypes.c_int),
	("returnAttribList",		ctypes.POINTER(ctypes.c_void_p)),] )

PFNGLXGETAGPOFFSETMESAPROC = _rpythonic_function_(		"PFNGLXGETAGPOFFSETMESAPROC", ctypes.c_uint, [("pointer",		ctypes.c_void_p)] )

PFNGLXBINDTEXIMAGEEXTPROC = _rpythonic_function_(		"PFNGLXBINDTEXIMAGEEXTPROC", ctypes.c_void_p, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("drawable",		ctypes.c_ulong),
	("buffer",		ctypes.c_int),
	("attrib_list",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLXRELEASETEXIMAGEEXTPROC = _rpythonic_function_(		"PFNGLXRELEASETEXIMAGEEXTPROC", ctypes.c_void_p, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("drawable",		ctypes.c_ulong),
	("buffer",		ctypes.c_int),] )

PFNGLXENUMERATEVIDEODEVICESNVPROC = _rpythonic_function_(		"PFNGLXENUMERATEVIDEODEVICESNVPROC", ctypes.POINTER(ctypes.c_uint), [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("screen",		ctypes.c_int),
	("nelements",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLXBINDVIDEODEVICENVPROC = _rpythonic_function_(		"PFNGLXBINDVIDEODEVICENVPROC", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("video_slot",		ctypes.c_uint),
	("video_device",		ctypes.c_uint),
	("attrib_list",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLXGETVIDEODEVICENVPROC = _rpythonic_function_(		"PFNGLXGETVIDEODEVICENVPROC", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("screen",		ctypes.c_int),
	("numVideoDevices",		ctypes.c_int),
	("pVideoDevice",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLXRELEASEVIDEODEVICENVPROC = _rpythonic_function_(		"PFNGLXRELEASEVIDEODEVICENVPROC", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("screen",		ctypes.c_int),
	("VideoDevice",		ctypes.c_uint),] )

PFNGLXBINDVIDEOIMAGENVPROC = _rpythonic_function_(		"PFNGLXBINDVIDEOIMAGENVPROC", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("VideoDevice",		ctypes.c_uint),
	("pbuf",		ctypes.c_ulong),
	("iVideoBuffer",		ctypes.c_int),] )

PFNGLXRELEASEVIDEOIMAGENVPROC = _rpythonic_function_(		"PFNGLXRELEASEVIDEOIMAGENVPROC", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("pbuf",		ctypes.c_ulong),] )

PFNGLXSENDPBUFFERTOVIDEONVPROC = _rpythonic_function_(		"PFNGLXSENDPBUFFERTOVIDEONVPROC", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("pbuf",		ctypes.c_ulong),
	("iBufferType",		ctypes.c_int),
	("pulCounterPbuffer",		ctypes.POINTER(ctypes.c_ulong)),
	("bBlock",		ctypes.c_ubyte),] )

PFNGLXGETVIDEOINFONVPROC = _rpythonic_function_(		"PFNGLXGETVIDEOINFONVPROC", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("screen",		ctypes.c_int),
	("VideoDevice",		ctypes.c_uint),
	("pulCounterOutputPbuffer",		ctypes.POINTER(ctypes.c_ulong)),
	("pulCounterOutputVideo",		ctypes.POINTER(ctypes.c_ulong)),] )

PFNGLXJOINSWAPGROUPNVPROC = _rpythonic_function_(		"PFNGLXJOINSWAPGROUPNVPROC", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("drawable",		ctypes.c_ulong),
	("group",		ctypes.c_uint),] )

PFNGLXBINDSWAPBARRIERNVPROC = _rpythonic_function_(		"PFNGLXBINDSWAPBARRIERNVPROC", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("group",		ctypes.c_uint),
	("barrier",		ctypes.c_uint),] )

PFNGLXQUERYSWAPGROUPNVPROC = _rpythonic_function_(		"PFNGLXQUERYSWAPGROUPNVPROC", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("drawable",		ctypes.c_ulong),
	("group",		ctypes.POINTER(ctypes.c_uint)),
	("barrier",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLXQUERYMAXSWAPGROUPSNVPROC = _rpythonic_function_(		"PFNGLXQUERYMAXSWAPGROUPSNVPROC", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("screen",		ctypes.c_int),
	("maxGroups",		ctypes.POINTER(ctypes.c_uint)),
	("maxBarriers",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLXQUERYFRAMECOUNTNVPROC = _rpythonic_function_(		"PFNGLXQUERYFRAMECOUNTNVPROC", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("screen",		ctypes.c_int),
	("count",		ctypes.POINTER(ctypes.c_uint)),] )

PFNGLXRESETFRAMECOUNTNVPROC = _rpythonic_function_(		"PFNGLXRESETFRAMECOUNTNVPROC", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("screen",		ctypes.c_int),] )

PFNGLXBINDVIDEOCAPTUREDEVICENVPROC = _rpythonic_function_(		"PFNGLXBINDVIDEOCAPTUREDEVICENVPROC", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("video_capture_slot",		ctypes.c_uint),
	("device",		ctypes.c_ulong),] )

PFNGLXENUMERATEVIDEOCAPTUREDEVICESNVPROC = _rpythonic_function_(		"PFNGLXENUMERATEVIDEOCAPTUREDEVICESNVPROC", ctypes.POINTER(ctypes.c_ulong), [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("screen",		ctypes.c_int),
	("nelements",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLXLOCKVIDEOCAPTUREDEVICENVPROC = _rpythonic_function_(		"PFNGLXLOCKVIDEOCAPTUREDEVICENVPROC", ctypes.c_void_p, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("device",		ctypes.c_ulong),] )

PFNGLXQUERYVIDEOCAPTUREDEVICENVPROC = _rpythonic_function_(		"PFNGLXQUERYVIDEOCAPTUREDEVICENVPROC", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("device",		ctypes.c_ulong),
	("attribute",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_int)),] )

PFNGLXRELEASEVIDEOCAPTUREDEVICENVPROC = _rpythonic_function_(		"PFNGLXRELEASEVIDEOCAPTUREDEVICENVPROC", ctypes.c_void_p, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("device",		ctypes.c_ulong),] )

PFNGLXSWAPINTERVALEXTPROC = _rpythonic_function_(		"PFNGLXSWAPINTERVALEXTPROC", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("drawable",		ctypes.c_ulong),
	("interval",		ctypes.c_int),] )

PFNGLXCOPYIMAGESUBDATANVPROC = _rpythonic_function_(		"PFNGLXCOPYIMAGESUBDATANVPROC", ctypes.c_void_p, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("srcCtx",		ctypes.POINTER(__GLXcontextRec)),
	("srcName",		ctypes.c_uint),
	("srcTarget",		ctypes.c_uint),
	("srcLevel",		ctypes.c_int),
	("srcX",		ctypes.c_int),
	("srcY",		ctypes.c_int),
	("srcZ",		ctypes.c_int),
	("dstCtx",		ctypes.POINTER(__GLXcontextRec)),
	("dstName",		ctypes.c_uint),
	("dstTarget",		ctypes.c_uint),
	("dstLevel",		ctypes.c_int),
	("dstX",		ctypes.c_int),
	("dstY",		ctypes.c_int),
	("dstZ",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("depth",		ctypes.c_int),] )

glXAllocateMemoryNV = _rpythonic_function_(		"glXAllocateMemoryNV", ctypes.POINTER(ctypes.c_void_p), [
	("size",		ctypes.c_int),
	("readfreq",		ctypes.c_float),
	("writefreq",		ctypes.c_float),
	("priority",		ctypes.c_float),] )

glXFreeMemoryNV = _rpythonic_function_(		"glXFreeMemoryNV", ctypes.c_void_p, [("pointer",		ctypes.c_void_p)] )

PFNGLXALLOCATEMEMORYNVPROC = _rpythonic_function_(		"PFNGLXALLOCATEMEMORYNVPROC", ctypes.POINTER(ctypes.c_void_p), [
	("size",		ctypes.c_int),
	("readfreq",		ctypes.c_float),
	("writefreq",		ctypes.c_float),
	("priority",		ctypes.c_float),] )

PFNGLXFREEMEMORYNVPROC = _rpythonic_function_(		"PFNGLXFREEMEMORYNVPROC", ctypes.c_void_p, [("pointer",		ctypes.c_void_p)] )

glXBindTexImageARB = _rpythonic_function_(		"glXBindTexImageARB", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("pbuffer",		ctypes.c_ulong),
	("buffer",		ctypes.c_int),] )

glXReleaseTexImageARB = _rpythonic_function_(		"glXReleaseTexImageARB", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("pbuffer",		ctypes.c_ulong),
	("buffer",		ctypes.c_int),] )

glXDrawableAttribARB = _rpythonic_function_(		"glXDrawableAttribARB", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("draw",		ctypes.c_ulong),
	("attribList",		ctypes.POINTER(ctypes.c_int)),] )

glXGetFrameUsageMESA = _rpythonic_function_(		"glXGetFrameUsageMESA", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("drawable",		ctypes.c_ulong),
	("usage",		ctypes.POINTER(ctypes.c_float)),] )

glXBeginFrameTrackingMESA = _rpythonic_function_(		"glXBeginFrameTrackingMESA", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("drawable",		ctypes.c_ulong),] )

glXEndFrameTrackingMESA = _rpythonic_function_(		"glXEndFrameTrackingMESA", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("drawable",		ctypes.c_ulong),] )

glXQueryFrameTrackingMESA = _rpythonic_function_(		"glXQueryFrameTrackingMESA", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("drawable",		ctypes.c_ulong),
	("swapCount",		ctypes.POINTER(ctypes.c_int64)),
	("missedFrames",		ctypes.POINTER(ctypes.c_int64)),
	("lastMissedUsage",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLXGETFRAMEUSAGEMESAPROC = _rpythonic_function_(		"PFNGLXGETFRAMEUSAGEMESAPROC", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("drawable",		ctypes.c_ulong),
	("usage",		ctypes.POINTER(ctypes.c_float)),] )

PFNGLXBEGINFRAMETRACKINGMESAPROC = _rpythonic_function_(		"PFNGLXBEGINFRAMETRACKINGMESAPROC", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("drawable",		ctypes.c_ulong),] )

PFNGLXENDFRAMETRACKINGMESAPROC = _rpythonic_function_(		"PFNGLXENDFRAMETRACKINGMESAPROC", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("drawable",		ctypes.c_ulong),] )

PFNGLXQUERYFRAMETRACKINGMESAPROC = _rpythonic_function_(		"PFNGLXQUERYFRAMETRACKINGMESAPROC", ctypes.c_int, [
	("dpy",		ctypes.POINTER(_XDisplay)),
	("drawable",		ctypes.c_ulong),
	("swapCount",		ctypes.POINTER(ctypes.c_int64)),
	("missedFrames",		ctypes.POINTER(ctypes.c_int64)),
	("lastMissedUsage",		ctypes.POINTER(ctypes.c_float)),] )

glXSwapIntervalMESA = _rpythonic_function_(		"glXSwapIntervalMESA", ctypes.c_int, [
	("interval",		ctypes.c_uint),] )

glXGetSwapIntervalMESA = _rpythonic_function_(		"glXGetSwapIntervalMESA", ctypes.c_int, [] )

PFNGLXSWAPINTERVALMESAPROC = _rpythonic_function_(		"PFNGLXSWAPINTERVALMESAPROC", ctypes.c_int, [
	("interval",		ctypes.c_uint),] )

PFNGLXGETSWAPINTERVALMESAPROC = _rpythonic_function_(		"PFNGLXGETSWAPINTERVALMESAPROC", ctypes.c_int, [] )


_rpythonic_convert_structs_to_objects()

_rpythonic_setup_return_wrappers()
_rpythonic_make_nice_global_enums_()
_rpythonic_clean_up_missing_functions_()
_rpythonic_strip_prefixes_(['gl'])