## generated by RPythonic 0.4.4
## http://code.google.com/p/rpythonic/
import os, sys, ctypes, inspect
__os = os
__sys = sys
__inspect = inspect

IS32BIT = (ctypes.sizeof(ctypes.c_void_p)==4)
PYTHON_RESERVED_KEYWORDS = 'for while in as global with try except lambda return raise if else elif eval exec and not or break continue finally print yield del def class assert from is pass'.split()

## try to load precompiled c-libraries from this directory, if the library is not there try to load from the system.
_clibs_dir = os.path.dirname(os.path.abspath(__file__))

def _load_ctypes_lib( name ):
	if __os.name == 'posix':
		if __sys.platform=='linux2':
			if not name.endswith('.so'): name += '.so'
			if not name.startswith('lib'): name = 'lib' + name

			if IS32BIT: 	path = __os.path.join(_clibs_dir,'linux32')
			else: 		path = __os.path.join(_clibs_dir,'linux64')
			url = __os.path.join( path, name )
			if __os.path.isfile( url ): return ctypes.CDLL(url)
			elif __os.path.isfile( '/usr/local/lib/%s'%name ): return ctypes.CDLL('/usr/local/lib/%s'%name)
			elif __os.path.isfile( '/usr/local/lib64/%s'%name ) and not IS32BIT: return ctypes.CDLL('/usr/local/lib64/%s'%name)
			elif __os.path.isfile( '/usr/lib/%s'%name ): return ctypes.CDLL('/usr/lib/%s'%name)
			elif __os.path.isfile( './%s'%name ): return ctypes.CDLL('./%s'%name)
			else:	# fallback
				try: return ctypes.CDLL(name)
				except: return ctypes.CDLL('')

		elif sys.platform == 'darwin':
			name += '.dylib'
			if IS32BIT: 	path = os.path.join(_clibs_dir,'osx32')
			else: 		path = os.path.join(_clibs_dir,'osx64')
			url = os.path.join( path, name )
			if os.path.isfile( url ): return ctypes.CDLL(url)
			else: return ctypes.CDLL(name) #fallback

	elif os.name == 'nt':
		name += '.dll'
		if IS32BIT: 	path = os.path.join(_clibs_dir,'win32')
		else: 		path = os.path.join(_clibs_dir,'win64')
		url = os.path.join( path, name )
		if os.path.isfile( url ): return ctypes.CDLL(url)
		else: return ctypes.CDLL(name) #fallback

RPYTHONIC_WRAPPER_FUNCTIONS = {}
RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES = []
RPYTHONIC_AUTOPREFIX_IGNORE = []

## ctypes does not clearly expose these types ##
PyCFuncPtrType = type(ctypes.CFUNCTYPE(ctypes.c_void_p))
PyCArrayType = type( ctypes.c_int * 2 )
PyCPointerType = type( ctypes.POINTER(ctypes.c_int) )
PyCStructType = type( ctypes.Structure )
CArgObject = type( ctypes.byref(ctypes.c_int()) )

class _rpythonic_meta_(object):
	'''
	Reserved Attributes:
		POINTER
		CSTRUCT
		CAST
	'''
	_rpythonic_ = True		# workaround for now, must have a way to know if object is a meta from another module, isinstance(o,_rpythonic_meta_) will fail in those cases. another workaround could be check sys.modules for other rpythonic modules and fetch _rpythonic_meta_ from there.
	def __init__(self, *args, **kw ):							# cheap trick, abuse **kw, and look for "pointer", "cast"
		if kw and 'pointer' not in kw: raise SyntaxError	# sorry, you can not init with keywords
		elif kw and 'pointer' in kw:
			if 'cast' in kw and kw['cast']:
				self.POINTER = ctypes.cast( kw['pointer'], ctypes.POINTER(self.CSTRUCT) )
			else: self.POINTER = kw['pointer']
		else: self.POINTER = ctypes.pointer( self.CSTRUCT(*args) )
		self.POINTER.pyobject = self	# .pyobject is local to this pointer "object"

	def __getattr__(self,name):
		if hasattr( self.POINTER.contents, name ):
			return getattr( self.POINTER.contents, name )

		else:	# when rpythonic failed to generate good bindings - these lookups should be cached
			for parent in self._rpythonic_parent_classes_:
				if hasattr( parent, name ):
					method = getattr( parent, name )	# should check if it really is an unbound method
					func = parent._rpythonic_unbound_lookup_[ method ]
					n = func.name
					if len(func.argnames) > 1:
						argnames = func.argnames[ 1 : ]
						a = ',' + '=None,'.join( argnames ) + '=None'
						b = ','.join( argnames )
					else: a = b = ''
					lamb = eval( 'lambda self %s: %s( self.POINTER, %s )' %(a,n,b) )
					setattr( self.__class__, name, lamb )
					#return lamb	# this would return the unbound lambda, must call getattr again
					return getattr( self, name )

			## last resort, load from global name space ##
			G = globals()
			if name in G: return lambda *args: G[name](self.POINTER, *args)
			else:
				for prefix in self._autoprefix_:
					n = prefix + name
					if n in G: return lambda *args: G[n](self.POINTER, *args)
				print( 'possible auto-prefixes available', self._autoprefix_ )
				raise AttributeError

	def __call__(self, type=False):
		print('calling object is DEPRECATED - use ob.POINTER or ob.CSTRUCT')
		if type: return self.CSTRUCT
		else: return self.POINTER


def _rpythonic_generate_subclass_( name, struct, functions ):
	head = 'class %s( _rpythonic_meta_ ):' %name
	body = [ 
		'_rpythonic_parent_classes_ = []' ,
		'_rpythonic_unbound_lookup_ = {}' 
	]

	names = [ func.name for func in functions ]

	possibles = {}
	rank = []		# rank by longest name
	if len(names) > 3000: print('too many functions to use this hack')
	else:
		for n1 in names:
			prefix = ''
			for i,char in enumerate(n1):
				prefix += char
				if prefix not in possibles:
					possibles[ prefix ] = 0
					for n2 in names:
						if n2.startswith( prefix ):
							possibles[ prefix ] += 1

					if not rank or len(prefix) > len(rank[-1]) and possibles[prefix] > len(names)/4:
						rank.append( prefix )

	top = []
	while rank:
		best = rank.pop()
		if possibles[best] > len(functions)/2 and best not in names:
			if best.endswith('_set_') or best.endswith('_get_'): best = best[ : -4 ]
			elif best.endswith('Set') or best.endswith('Get'): best = best[ : -3 ]

			rem = []
			for other in rank:
				if best.startswith(other): rem.append( other )
			for r in rem: rank.remove( r )

			if best not in top: top.append( best )

		if len(top) > 3: break

	for n in names:		# find shortest prefixes #
		prefix = ''
		for i,char in enumerate(n):		# cammelCase
			if i==0: prefix += char; continue
			if char.isupper() and len(prefix) >= 2: break
			prefix += char
		if prefix and prefix != n and len(prefix) >= 2:
			hits = 0
			for other in names:
				if other.startswith( prefix ): hits += 1
			if hits >= 2 and prefix not in top:
				top.append( prefix )
				if len(top) >= 6: break

	## setup full names
	for func in functions:
		n = func.name
		if len(func.argnames) > 1:
			argnames = func.argnames[ 1 : ]
			a = ',' + '=None,'.join( argnames ) + '=None'
			b = ','.join( argnames )
		else: a = b = ''

		fhead = 'def %s( self %s ):' %(n,a)
		fbody = ['return %s(self.POINTER, %s)' %(func.name,b)]
		g = fhead + '\n\t\t' + '\n\t\t'.join( fbody )
		body.append( g )
		#body.append( '%s._rpythonic_function_ = %s' %(func.name, func.name) )

	## setup short names ##
	for n in names:
		for prefix in top:
			if n.startswith(prefix) and n[len(prefix):] not in names:
				alt = n[ len(prefix) : ]
				if alt and alt != n and alt not in PYTHON_RESERVED_KEYWORDS and not alt.isdigit() and not alt[0].isdigit():
					body.append( '%s = %s' %(alt,n) )
					names.append( alt )

	gen = head + '\n\t' + '\n\t'.join( body )
	try: exec( gen )
	except:
		print( gen )
		raise SyntaxError

	klass = locals()[name]
	klass.CSTRUCT = struct	# ctypes struct class

	klass._autoprefix_ = top
	for func in functions:
		unbound = getattr( klass, func.name )
		klass._rpythonic_unbound_lookup_[ unbound ] = func
		# klass.longname is klass.shortname = False
		# klass.longname == klass.shortname = True
	return klass

def _rpythonic_convert_structs_to_objects():
	G = globals()
	for klass in _OOAPI_:
		altname = name = klass.__name__
		prefix = ''
		for i,char in enumerate(name):
			if i==0: prefix += char; continue
			if char.isupper(): break
			prefix += char
		if prefix and prefix != name:
			hits = 0
			for other in _OOAPI_:
				if other is not klass:
					if other.__name__.startswith( prefix ): hits += 1
			if hits >= 2:
				altname = name[ len(prefix) : ]

		funcs = _OOAPI_[ klass ]
		newklass = _rpythonic_generate_subclass_( altname, klass, funcs )
		klass._rpythonic_wrapper_class_ = newklass
		G[ name ] = newklass	# replace struct with wrapper
		if altname not in G: G[ altname ] = newklass	# safely define with nicer name
		elif altname != name: # odd cases, maybe a function that returns the object, almost never happens.
			print('WARN - not replacing something with struct wrapper:', G[altname] )


def _rpythonic_setup_return_wrappers():
	R = _rpythonic_function_
	for klass in _OOAPI_:
		if klass in _OOAPI_RETURNS_OBJECT_:
			for f in _OOAPI_RETURNS_OBJECT_[klass]:
				f.object_oriented = True
				if not f.return_wrapper:	# just in case the ctypes footer defines it
					f.return_wrapper = klass._rpythonic_wrapper_class_

def _rpythonic_function_( name, result=ctypes.c_void_p, args=[]):
	mname = '_metafunc_%s' %name
	exec( 'class %s( _rpythonic_metafunc_ ): pass' %mname )
	k = locals()[mname]
	return k( name, result, args )

_OOAPI_ = {}
_OOAPI_RETURNS_OBJECT_ = {}

class _rpythonic_metafunc_(object):
	def __init__(self, name, result=ctypes.c_void_p, args=[]):
		self.name = name
		self.result = result
		self.argtypes = []		# can dynamically change CFUNCTYPE trick
		self.argnames = []
		self.argtypestypes = []
		for i,arg in enumerate(args):
			n,t = arg
			if n in PYTHON_RESERVED_KEYWORDS: n = 'C_'+n
			if n in self.argnames: n = '%s%s' %(n,i)
			self.argnames.append( n )
			self.argtypes.append( t )
			self.argtypestypes.append( type(t) )		# precomputed for speed

		self.argnames = tuple( self.argnames )				# should never change
		self.numargs = len( self.argtypes )
		self.callbacks = [None] * self.numargs
		self.return_wrapper = None
		self.object_oriented = False
		self.function = None
		try:
			func = self.function = getattr(CTYPES_DLL, self.name )
			RPYTHONIC_WRAPPER_FUNCTIONS[ name ] = self
		except:
			RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES.append( name )
		if self.function: self.reset()

	def change_argument_type( self, name, t ):
		idx = self.argnames.index( name )
		self.argtypes[ idx ] = t
		self.argtypestypes[ idx ] = type(t)
		self.function.argtypes = self.argtypes

	def reset(self):
		if self.argnames:
			a = ',' + '=None,'.join( self.argnames ) + '=None'
			b = ','.join( self.argnames )
		else: a = b = ''

		callmeth = eval( 'lambda self %s: self._call_( %s )' %(a,b) )
		setattr( self.__class__, '__call__', callmeth )

		self.function.restype = self.result
		self.function.argtypes = self.argtypes

		if type( self.result ) is PyCPointerType and type(self.result._type_) is PyCStructType:
			klass = self.result._type_
			if klass not in _OOAPI_RETURNS_OBJECT_: _OOAPI_RETURNS_OBJECT_[klass] = []
			_OOAPI_RETURNS_OBJECT_[klass].append( self )

		self.defaults = []
		for i in range( self.numargs ):
			T = self.argtypes[ i ]
			if type(T) is PyCFuncPtrType:
				p = T()	# func pointers can not be None
				self.defaults.append( p )
				self.callbacks[ i ] = p					# save reference
			elif T in (ctypes.c_int, ctypes.c_uint, ctypes.c_long, ctypes.c_ulong):
				self.defaults.append( 0 )
			elif T in (ctypes.c_float, ctypes.c_double):
				self.defaults.append( .0 )
			else: self.defaults.append( None )	# None is allowed for all other types

			## generate OO API ##
			if i == 0 and type(T) is PyCPointerType and type(T._type_) is PyCStructType:
				klass = T._type_
				if klass not in _OOAPI_: _OOAPI_[ klass ] = []
				_OOAPI_[ klass ].append( self )

	def _call_( self, *args ):			# allow flexible calling types
		cargs = list( self.defaults )
		for i,arg in enumerate(args):
			if isinstance( arg, _rpythonic_meta_ ): arg = arg.POINTER
			elif hasattr( arg, '_rpythonic_' ): arg = arg.POINTER		# workaround - instance from another module

			t = type(arg)
			k = self.argtypes[ i ]
			kt = self.argtypestypes[ i ]
			if arg is None and cargs[i] is not None:	# use user defaults, very rare cases
				continue

			elif t is bool and k is ctypes.c_int:
				if arg: cargs[i] = 1	#ctypes.c_int(1)
				else: cargs[i] = 0	#ctypes.c_int(0)

			elif t in (list,tuple):				# convert lists and tuples into array
				if kt is PyCArrayType:
					cargs[ i ] = k(*arg)
				elif kt is PyCStructType:
					if k._array_wrapper_: cargs[ i ] = k(arg)	# allow easy array init
					else: cargs[ i ] = k(*arg)							# allow multiple args
				elif kt is PyCPointerType:
					cargs[ i ] = _convert_nested_list_to_pointer( k, arg )
				else: assert 0

			elif isinstance( arg, ctypes._Pointer ) and t is not k and kt is PyCPointerType:
				cargs[ i ] = ctypes.cast( arg, k )		# generic's that need to be cast

			elif kt is PyCStructType and isinstance( arg, ctypes._Pointer ):
				cargs[ i ] = arg.contents	# fixed may25

			elif kt is PyCPointerType and not isinstance( arg, (ctypes._Pointer,CArgObject) ):
				if t in (int,float,bool): ptr = k( k._type_(arg) )
				elif t is str:
					arg = arg.encode('utf-8')
					#ptr = k( k._type_() )								# not k() otherwise null pointer error
					#for j, char in enumerate(arg): ptr[ j ] = char		# not correct - missing null byte?
					ptr = ctypes.create_string_buffer(arg)				# correct and pypy compatible
				elif t in (PyCStructType, PyCArrayType):
					ptr = ctypes.cast( ctypes.pointer( arg ), k )
				else:
					ptr = arg	# TODO print warning?
				cargs[ i ] = ptr

			elif kt is PyCFuncPtrType:
				if t.__name__ == 'CFunctionType': cargs[ i ] = arg		# assume outside holds pointer
				else:													# this is not safe #
					cargs[ i ] = self.callbacks[ i ] = k( arg )				# assume arg is a callable
			else:
				cargs[ i ] = arg		# directly pass

		## if you define your own return_wrapper, it must take keyword "pointer"
		if self.return_wrapper: return self.return_wrapper( pointer=self.function( *cargs ) )
		else: return self.function( *cargs )



def _convert_nested_list_to_pointer( k, arg ):
	depth = 0; s = k
	while True:
		if type(s) is PyCPointerType:
			s = getattr( s, '_type_' )
			depth += 1
		else: break
	assert depth and depth <= 2
	if depth == 1:
		T = k._type_
		ptr = k( k._type_() )
		for i in range( len(arg) ):
			ptr[ i ] = T( *arg[i] )
	elif depth == 2:
		T = k._type_._type_
		_ptr = k._type_( k._type_._type_() )
		for i in range(len( arg )):
			for j in range( len(arg[i]) ):
				_ptr[ j ] = T( *arg[ i ][ j ] )
		ptr = k( _ptr )
	return ptr


def __freeze_rpythonic_struct( cls, fields ):
	if cls not in _OOAPI_: _OOAPI_[ cls ] = []	# wrap all structs
	try: setattr( cls, '_fields_', fields )
	except:
		print( 'WARN - bad order struct freeze', cls )
		#cls._fields_ = []

class _rpythonic_struct_( ctypes.Structure ):
	_array_wrapper_ = False
	_fields_ = []
	_methods_ = {}
	#def __call__(self): return self
	def __init__(self, *args, **kw ):
		cargs = []
		argtypes = []
		for a in self._fields_: argtypes.append( a[1] )
		if len(args) > len(argtypes): args = [args]	# allow both calling conventions
		for i,arg in enumerate( args ):
			if isinstance( arg, _rpythonic_meta_ ): arg = arg.POINTER

			t = type(arg)
			k = argtypes[ i ]
			if t in (list,tuple):
				if k.__class__.__name__	== 'PyCArrayType':
					cargs.append( k(*arg) )
				elif k.__class__.__name__ == 'PyCStructType':
					if k._array_wrapper_: cargs.append( k(arg) )	# allow easy array init
					else: cargs.append( k(*arg) )							# allow multiple args
			elif isinstance( arg, ctypes._Pointer ) and t is not k:
				cargs[ i ] = ctypes.cast( arg, k )	# generic's that need to be cast
			elif k.__class__.__name__ == 'PyCArrayType' and t in (float,int,bool):
				cargs.append( k(arg) )		# support init array from single value
			else:
				cargs.append( arg )		# directly pass

		ctypes.Structure.__init__(self, *cargs, **kw)


def _rpythonic_make_nice_global_enums_():
	G = globals()
	for name in RPYTHONIC_GLOBAL_ENUMS:
		if '_' in name and name.index('_') <= 4:
			altname = name[ name.index('_') + 1 : ]
			if altname not in G:
				G[altname] = RPYTHONIC_GLOBAL_ENUMS[ name ]

def _rpythonic_clean_up_missing_functions_():
	G = globals()
	for f in RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES:
		G.pop( f )
	print( "C functions loaded: %s" %len(RPYTHONIC_WRAPPER_FUNCTIONS) )
	print( "C functions failed: %s" %len(RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES) )



###### NEW API #########
CTYPES_DLL = None

class _VOID_POINTER_CONTAINER_(object):
	def __init__(self, ptr, name=None):
		self._pointer_ = ptr
		self.name = name
NULL = _VOID_POINTER_CONTAINER_(None,'<null pointer>')


class meta:	# NEW API - allow run time switch from ctypes to rffi
	'''
	Methods:
		RPython will not allow object wrapper around a method (__call__ not allowed)
		keep C function names in list "__cfunctions__"
		rpythonic.enable_rffi( classA, classB )	
		can take advantage of methods in object-method-wrapper,
		generate rffi wrapper and set method on classA, etc.
		replaces object-method-wrapper with rffi-method

	Properties:
		CPython: obj.x=1
		RPython: obj.set_x(1)	
	'''
	METAS = []
	def __init__(self, constructors=[], methods={}, properties={}):
		global CTYPES_DLL
		if not CTYPES_DLL:
			CTYPES_DLL = _load_ctypes_lib( _clib_name_ )

		self.constructors = constructors
		self.methods = methods
		self.properties = properties
		self.METAS.append( self )



	def __call__(self, cls ):
		print('@meta', cls )

		if not self.constructors:
			lamb = lambda s, _explicit_pointer_=None: setattr(s,'_pointer_',getattr(_explicit_pointer_,'_pointer_')) if hasattr(_explicit_pointer_,'_pointer_') else setattr(s,'_pointer_',_explicit_pointer_)
			lamb._debug = '(no constructor)'
			setattr( cls, '__init__', lamb )
		else:
			con = self._find_best_function( self.constructors )
			cfunc = self._build_cfunc( con )
			setattr( cls, '_%s'%con['name'], cfunc )
			g = self._gen_init( con )
			setattr( cls, '__init__', g )
		
		## set methods ##
		for name in self.methods:
			meth = self.methods[ name ]
			cfuncs = []
			for m in meth['functions']:
				cfunc = self._build_cfunc( m, method=True, static=meth['static'] )
				self._setup_return( cfunc, meth )
				setattr( cls, '_%s'%m['name'], cfunc )
				cfuncs.append( cfunc )

			f = self._find_best_function( meth['functions'] )
			g = self._gen_method( meth, f )
			g._cfuncs = cfuncs
			if meth['static']: g = classmethod( g )
			setattr( cls, name, g )

		for name in self.properties:
			print( 'property:', name )
			p = []
			for f in self.properties[name]:
				cfunc = self._build_cfunc( f )
				setattr( cls, '_%s'%f['name'], cfunc )
				g = self._gen_method( f, f )
				p.append( g )

			setattr( cls, name, property(*p) )

		return cls


	@staticmethod
	def _build_cfunc( info, method=False, static=False ):
		cfunc = getattr(CTYPES_DLL, info['name'])
		if method and not static: argtypes = [ ctypes.c_void_p ]
		else: argtypes = []
		for p in info['parameters']: argtypes.append( eval(p['ctypes_type']) )
		cfunc.argtypes = argtypes
		return cfunc

	@staticmethod
	def _setup_return( cfunc, info ):
		if not info['returns_fundamental']:
			cfunc.restype = ctypes.c_void_p
		elif info['returns_fundamental']:
			cfunc.restype = eval( info['returns_ctypes'] )
		else:
			cfunc.restype = ctypes.c_void_p

	@staticmethod
	def _gen_prepare_args( m ):
		a = []; b = []
		for i,p in enumerate(m['parameters']):
			if 'name' in p: n = p['name']
			else: n = '_unnamed_%s' %i
			if '<' in n: n = '_TODOfixme_%s' %i
			if n in PYTHON_RESERVED_KEYWORDS: n += str(i)
			if p['fundamental']:
				b.append( n )
				s = p['raw_type'].split()
				if 'default' in p:
					d = p['default']
					if p['raw_type'] in ('float', 'double'):
						if d.endswith('f'): d = d[:-1]
						d = d.replace(' ', '.')
						if 'e' in d: d = 0.0
						try: d = float(d)
						except: d = 0.0
					elif ('int' in s or 'size_t' in s) and not d.isdigit(): d = 0
					elif 'char' in s and '"' not in d: d = '""'
					elif d.lower() == 'false': d = False
					elif d.lower() == 'true': d = True
				elif 'char' in s: d = '""'
				elif 'float' in s or 'double' in s: d = 0.0
				elif 'size_t' in s or 'int' in s or 'long' in s or 'short' in s: d = 0
				elif p['raw_type'] == 'bool': d = False
				elif p['raw_type'] in ('void', '(template)'): d = 'NULL'
				else: print( p )
				a.append( n+'=%s' %d )

			else:
				b.append( '%s._pointer_'%n )
				a.append( n+'=NULL' )
		return a, b

	@staticmethod
	def _gen_init( m ):
		a, b = meta._gen_prepare_args( m )
		if a: e = 'lambda _py_self_, %s, _explicit_pointer_=None: ' %(','.join(a))
		else: e = 'lambda _py_self_, _explicit_pointer_=None: '
		e += 'setattr(_py_self_, "_pointer_", _py_self_._%s(%s))' %( m['name'], ','.join(b) )
		e += ' if not _explicit_pointer_ else '
		e += 'setattr(_py_self_, "_pointer_", _explicit_pointer_)'
		print( e )
		lamb = eval( e ); lamb._debug = e; lamb._introspect = m
		return lamb

	@staticmethod
	def _find_best_function( funcs ):
		best = funcs[0]
		score = -1
		if len(funcs) > 1:
			for f in funcs:
				hits = 0
				for p in f['parameters']:
					if p['fundamental']: hits += 1
				if hits and hits == len( f['parameters'] ):
					if hits > score:
						score = hits
						best = f
		return best

	@staticmethod
	def _gen_method( m, f ):
		a, b = meta._gen_prepare_args( f )
		if a: e = 'lambda _py_self_, %s: ' %(','.join(a))
		else: e = 'lambda _py_self_: '

		if 'static' in m and m['static']:	# static in c++ is like a classmethod
			c = '_py_self_._%s( %s )' %( f['name'], ','.join(b) )
		else:
			c = '_py_self_._%s( _py_self_._pointer_, %s )' %( f['name'], ','.join(b) )

		if not m['returns_fundamental']:
			if 'returns_unknown' in m or '<' in m['returns']: c = '_VOID_POINTER_CONTAINER_( %s, name="%s" )' %(c,m['returns'])
			else:
				something = m['returns'].replace('::', '.')
				c = '%s( _explicit_pointer_=%s )' %(something, c)

		e += c; lamb = eval( e )
		lamb._debug = e; lamb._introspect = f
		return lamb


	META_FUNCTIONS = []
	@classmethod
	def function( self, info ):
		print('@meta.function', info['name'] )
		global CTYPES_DLL
		if not CTYPES_DLL:
			CTYPES_DLL = _load_ctypes_lib( _clib_name_ )

		cfunc = self._build_cfunc( info, method=False, static=True )
		setattr( meta, '_%s'%info['name'], cfunc )
		self._setup_return( cfunc, info )
		a, b = meta._gen_prepare_args( info )
		e = 'lambda %s: ' %(','.join(a))
		c = 'meta._%s( %s )' %( info['name'], ','.join(b) )

		if not info['returns_fundamental']:
			if 'returns_unknown' in info or '<' in info['returns']:
				c = '_VOID_POINTER_CONTAINER_( %s, name="%s" )' %(c,info['returns'])
			else:
				something = info['returns'].replace('::', '.')
				c = '%s( _explicit_pointer_=%s )' %(something, c)
		e += c
		lamb = eval( e )
		lamb._debug = e
		lamb._introspect = info
		return lamb



def _rpythonic_strip_prefixes_( prefixes ):
	G = globals()
	names = list(G.keys())	# ensure list in py3
	for name in names:
		for prefix in prefixes:
			if name.startswith( prefix ):
				newname = name[ len(prefix) : ]
				if newname and newname not in G:
					G[ newname ] = G[ name ]






_clib_name_ = 'libpython3.2mu'
print('loading lib', _clib_name_)
print( os.path.abspath( os.path.curdir ) )
CTYPES_DLL = _load_ctypes_lib( _clib_name_ )
assert CTYPES_DLL
print( CTYPES_DLL._name )

## macro globals ##
Py_single_input = 256
Py_file_input = 257
Py_eval_input = 258
## enums ##
_codecvt_result = { 
	"__codecvt_ok" : 0, 
	"__codecvt_partial" : 1, 
	"__codecvt_error" : 2, 
	"__codecvt_noconv" : 3, 
}

PC_LINK_MAX = 0 
PC_MAX_CANON = 1 
PC_MAX_INPUT = 2 
PC_NAME_MAX = 3 
PC_PATH_MAX = 4 
PC_PIPE_BUF = 5 
PC_CHOWN_RESTRICTED = 6 
PC_NO_TRUNC = 7 
PC_VDISABLE = 8 
PC_SYNC_IO = 9 
PC_ASYNC_IO = 10 
PC_PRIO_IO = 11 
PC_SOCK_MAXBUF = 12 
PC_FILESIZEBITS = 13 
PC_REC_INCR_XFER_SIZE = 14 
PC_REC_MAX_XFER_SIZE = 15 
PC_REC_MIN_XFER_SIZE = 16 
PC_REC_XFER_ALIGN = 17 
PC_ALLOC_SIZE_MIN = 18 
PC_SYMLINK_MAX = 19 
PC_2_SYMLINKS = 20 

SC_ARG_MAX = 0 
SC_CHILD_MAX = 1 
SC_CLK_TCK = 2 
SC_NGROUPS_MAX = 3 
SC_OPEN_MAX = 4 
SC_STREAM_MAX = 5 
SC_TZNAME_MAX = 6 
SC_JOB_CONTROL = 7 
SC_SAVED_IDS = 8 
SC_REALTIME_SIGNALS = 9 
SC_PRIORITY_SCHEDULING = 10 
SC_TIMERS = 11 
SC_ASYNCHRONOUS_IO = 12 
SC_PRIORITIZED_IO = 13 
SC_SYNCHRONIZED_IO = 14 
SC_FSYNC = 15 
SC_MAPPED_FILES = 16 
SC_MEMLOCK = 17 
SC_MEMLOCK_RANGE = 18 
SC_MEMORY_PROTECTION = 19 
SC_MESSAGE_PASSING = 20 
SC_SEMAPHORES = 21 
SC_SHARED_MEMORY_OBJECTS = 22 
SC_AIO_LISTIO_MAX = 23 
SC_AIO_MAX = 24 
SC_AIO_PRIO_DELTA_MAX = 25 
SC_DELAYTIMER_MAX = 26 
SC_MQ_OPEN_MAX = 27 
SC_MQ_PRIO_MAX = 28 
SC_VERSION = 29 
SC_PAGESIZE = 30 
SC_RTSIG_MAX = 31 
SC_SEM_NSEMS_MAX = 32 
SC_SEM_VALUE_MAX = 33 
SC_SIGQUEUE_MAX = 34 
SC_TIMER_MAX = 35 
SC_BC_BASE_MAX = 36 
SC_BC_DIM_MAX = 37 
SC_BC_SCALE_MAX = 38 
SC_BC_STRING_MAX = 39 
SC_COLL_WEIGHTS_MAX = 40 
SC_EQUIV_CLASS_MAX = 41 
SC_EXPR_NEST_MAX = 42 
SC_LINE_MAX = 43 
SC_RE_DUP_MAX = 44 
SC_CHARCLASS_NAME_MAX = 45 
SC_2_VERSION = 46 
SC_2_C_BIND = 47 
SC_2_C_DEV = 48 
SC_2_FORT_DEV = 49 
SC_2_FORT_RUN = 50 
SC_2_SW_DEV = 51 
SC_2_LOCALEDEF = 52 
SC_PII = 53 
SC_PII_XTI = 54 
SC_PII_SOCKET = 55 
SC_PII_INTERNET = 56 
SC_PII_OSI = 57 
SC_POLL = 58 
SC_SELECT = 59 
SC_UIO_MAXIOV = 60 
SC_IOV_MAX = 60 
SC_PII_INTERNET_STREAM = 61 
SC_PII_INTERNET_DGRAM = 62 
SC_PII_OSI_COTS = 63 
SC_PII_OSI_CLTS = 64 
SC_PII_OSI_M = 65 
SC_T_IOV_MAX = 66 
SC_THREADS = 67 
SC_THREAD_SAFE_FUNCTIONS = 68 
SC_GETGR_R_SIZE_MAX = 69 
SC_GETPW_R_SIZE_MAX = 70 
SC_LOGIN_NAME_MAX = 71 
SC_TTY_NAME_MAX = 72 
SC_THREAD_DESTRUCTOR_ITERATIONS = 73 
SC_THREAD_KEYS_MAX = 74 
SC_THREAD_STACK_MIN = 75 
SC_THREAD_THREADS_MAX = 76 
SC_THREAD_ATTR_STACKADDR = 77 
SC_THREAD_ATTR_STACKSIZE = 78 
SC_THREAD_PRIORITY_SCHEDULING = 79 
SC_THREAD_PRIO_INHERIT = 80 
SC_THREAD_PRIO_PROTECT = 81 
SC_THREAD_PROCESS_SHARED = 82 
SC_NPROCESSORS_CONF = 83 
SC_NPROCESSORS_ONLN = 84 
SC_PHYS_PAGES = 85 
SC_AVPHYS_PAGES = 86 
SC_ATEXIT_MAX = 87 
SC_PASS_MAX = 88 
SC_XOPEN_VERSION = 89 
SC_XOPEN_XCU_VERSION = 90 
SC_XOPEN_UNIX = 91 
SC_XOPEN_CRYPT = 92 
SC_XOPEN_ENH_I18N = 93 
SC_XOPEN_SHM = 94 
SC_2_CHAR_TERM = 95 
SC_2_C_VERSION = 96 
SC_2_UPE = 97 
SC_XOPEN_XPG2 = 98 
SC_XOPEN_XPG3 = 99 
SC_XOPEN_XPG4 = 100 
SC_CHAR_BIT = 101 
SC_CHAR_MAX = 102 
SC_CHAR_MIN = 103 
SC_INT_MAX = 104 
SC_INT_MIN = 105 
SC_LONG_BIT = 106 
SC_WORD_BIT = 107 
SC_MB_LEN_MAX = 108 
SC_NZERO = 109 
SC_SSIZE_MAX = 110 
SC_SCHAR_MAX = 111 
SC_SCHAR_MIN = 112 
SC_SHRT_MAX = 113 
SC_SHRT_MIN = 114 
SC_UCHAR_MAX = 115 
SC_UINT_MAX = 116 
SC_ULONG_MAX = 117 
SC_USHRT_MAX = 118 
SC_NL_ARGMAX = 119 
SC_NL_LANGMAX = 120 
SC_NL_MSGMAX = 121 
SC_NL_NMAX = 122 
SC_NL_SETMAX = 123 
SC_NL_TEXTMAX = 124 
SC_XBS5_ILP32_OFF32 = 125 
SC_XBS5_ILP32_OFFBIG = 126 
SC_XBS5_LP64_OFF64 = 127 
SC_XBS5_LPBIG_OFFBIG = 128 
SC_XOPEN_LEGACY = 129 
SC_XOPEN_REALTIME = 130 
SC_XOPEN_REALTIME_THREADS = 131 
SC_ADVISORY_INFO = 132 
SC_BARRIERS = 133 
SC_BASE = 134 
SC_C_LANG_SUPPORT = 135 
SC_C_LANG_SUPPORT_R = 136 
SC_CLOCK_SELECTION = 137 
SC_CPUTIME = 138 
SC_THREAD_CPUTIME = 139 
SC_DEVICE_IO = 140 
SC_DEVICE_SPECIFIC = 141 
SC_DEVICE_SPECIFIC_R = 142 
SC_FD_MGMT = 143 
SC_FIFO = 144 
SC_PIPE = 145 
SC_FILE_ATTRIBUTES = 146 
SC_FILE_LOCKING = 147 
SC_FILE_SYSTEM = 148 
SC_MONOTONIC_CLOCK = 149 
SC_MULTI_PROCESS = 150 
SC_SINGLE_PROCESS = 151 
SC_NETWORKING = 152 
SC_READER_WRITER_LOCKS = 153 
SC_SPIN_LOCKS = 154 
SC_REGEXP = 155 
SC_REGEX_VERSION = 156 
SC_SHELL = 157 
SC_SIGNALS = 158 
SC_SPAWN = 159 
SC_SPORADIC_SERVER = 160 
SC_THREAD_SPORADIC_SERVER = 161 
SC_SYSTEM_DATABASE = 162 
SC_SYSTEM_DATABASE_R = 163 
SC_TIMEOUTS = 164 
SC_TYPED_MEMORY_OBJECTS = 165 
SC_USER_GROUPS = 166 
SC_USER_GROUPS_R = 167 
SC_2_PBS = 168 
SC_2_PBS_ACCOUNTING = 169 
SC_2_PBS_LOCATE = 170 
SC_2_PBS_MESSAGE = 171 
SC_2_PBS_TRACK = 172 
SC_SYMLOOP_MAX = 173 
SC_STREAMS = 174 
SC_2_PBS_CHECKPOINT = 175 
SC_V6_ILP32_OFF32 = 176 
SC_V6_ILP32_OFFBIG = 177 
SC_V6_LP64_OFF64 = 178 
SC_V6_LPBIG_OFFBIG = 179 
SC_HOST_NAME_MAX = 180 
SC_TRACE = 181 
SC_TRACE_EVENT_FILTER = 182 
SC_TRACE_INHERIT = 183 
SC_TRACE_LOG = 184 
SC_LEVEL1_ICACHE_SIZE = 185 
SC_LEVEL1_ICACHE_ASSOC = 186 
SC_LEVEL1_ICACHE_LINESIZE = 187 
SC_LEVEL1_DCACHE_SIZE = 188 
SC_LEVEL1_DCACHE_ASSOC = 189 
SC_LEVEL1_DCACHE_LINESIZE = 190 
SC_LEVEL2_CACHE_SIZE = 191 
SC_LEVEL2_CACHE_ASSOC = 192 
SC_LEVEL2_CACHE_LINESIZE = 193 
SC_LEVEL3_CACHE_SIZE = 194 
SC_LEVEL3_CACHE_ASSOC = 195 
SC_LEVEL3_CACHE_LINESIZE = 196 
SC_LEVEL4_CACHE_SIZE = 197 
SC_LEVEL4_CACHE_ASSOC = 198 
SC_LEVEL4_CACHE_LINESIZE = 199 
SC_IPV6 = 265 
SC_RAW_SOCKETS = 266 
SC_V7_ILP32_OFF32 = 267 
SC_V7_ILP32_OFFBIG = 268 
SC_V7_LP64_OFF64 = 269 
SC_V7_LPBIG_OFFBIG = 270 
SC_SS_REPL_MAX = 271 
SC_TRACE_EVENT_NAME_MAX = 272 
SC_TRACE_NAME_MAX = 273 
SC_TRACE_SYS_MAX = 274 
SC_TRACE_USER_EVENT_MAX = 275 
SC_XOPEN_STREAMS = 276 
SC_THREAD_ROBUST_PRIO_INHERIT = 277 
SC_THREAD_ROBUST_PRIO_PROTECT = 278 

CS_PATH = 0 
CS_V6_WIDTH_RESTRICTED_ENVS = 1 
CS_GNU_LIBC_VERSION = 2 
CS_GNU_LIBPTHREAD_VERSION = 3 
CS_V5_WIDTH_RESTRICTED_ENVS = 4 
CS_V7_WIDTH_RESTRICTED_ENVS = 5 
CS_LFS_CFLAGS = 1000 
CS_LFS_LDFLAGS = 1001 
CS_LFS_LIBS = 1002 
CS_LFS_LINTFLAGS = 1003 
CS_LFS64_CFLAGS = 1004 
CS_LFS64_LDFLAGS = 1005 
CS_LFS64_LIBS = 1006 
CS_LFS64_LINTFLAGS = 1007 
CS_XBS5_ILP32_OFF32_CFLAGS = 1100 
CS_XBS5_ILP32_OFF32_LDFLAGS = 1101 
CS_XBS5_ILP32_OFF32_LIBS = 1102 
CS_XBS5_ILP32_OFF32_LINTFLAGS = 1103 
CS_XBS5_ILP32_OFFBIG_CFLAGS = 1104 
CS_XBS5_ILP32_OFFBIG_LDFLAGS = 1105 
CS_XBS5_ILP32_OFFBIG_LIBS = 1106 
CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 1107 
CS_XBS5_LP64_OFF64_CFLAGS = 1108 
CS_XBS5_LP64_OFF64_LDFLAGS = 1109 
CS_XBS5_LP64_OFF64_LIBS = 1110 
CS_XBS5_LP64_OFF64_LINTFLAGS = 1111 
CS_XBS5_LPBIG_OFFBIG_CFLAGS = 1112 
CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 1113 
CS_XBS5_LPBIG_OFFBIG_LIBS = 1114 
CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 1115 
CS_POSIX_V6_ILP32_OFF32_CFLAGS = 1116 
CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 1117 
CS_POSIX_V6_ILP32_OFF32_LIBS = 1118 
CS_POSIX_V6_ILP32_OFF32_LINTFLAGS = 1119 
CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 1120 
CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 1121 
CS_POSIX_V6_ILP32_OFFBIG_LIBS = 1122 
CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS = 1123 
CS_POSIX_V6_LP64_OFF64_CFLAGS = 1124 
CS_POSIX_V6_LP64_OFF64_LDFLAGS = 1125 
CS_POSIX_V6_LP64_OFF64_LIBS = 1126 
CS_POSIX_V6_LP64_OFF64_LINTFLAGS = 1127 
CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 1128 
CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 1129 
CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 1130 
CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS = 1131 
CS_POSIX_V7_ILP32_OFF32_CFLAGS = 1132 
CS_POSIX_V7_ILP32_OFF32_LDFLAGS = 1133 
CS_POSIX_V7_ILP32_OFF32_LIBS = 1134 
CS_POSIX_V7_ILP32_OFF32_LINTFLAGS = 1135 
CS_POSIX_V7_ILP32_OFFBIG_CFLAGS = 1136 
CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS = 1137 
CS_POSIX_V7_ILP32_OFFBIG_LIBS = 1138 
CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS = 1139 
CS_POSIX_V7_LP64_OFF64_CFLAGS = 1140 
CS_POSIX_V7_LP64_OFF64_LDFLAGS = 1141 
CS_POSIX_V7_LP64_OFF64_LIBS = 1142 
CS_POSIX_V7_LP64_OFF64_LINTFLAGS = 1143 
CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS = 1144 
CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS = 1145 
CS_POSIX_V7_LPBIG_OFFBIG_LIBS = 1146 
CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS = 1147 
CS_V6_ENV = 1148 
CS_V7_ENV = 1149 

FP_NAN = 0 
FP_INFINITE = 1 
FP_ZERO = 2 
FP_SUBNORMAL = 3 
FP_NORMAL = 4 

IEEE_ = -1 
SVID_ = 0 
XOPEN_ = 1 
POSIX_ = 2 
ISOC_ = 3 

_itimer_which = { 
	"ITIMER_REAL" : 0, 
	"ITIMER_VIRTUAL" : 1, 
	"ITIMER_PROF" : 2, 
}

Py_memory_order = { 
	"_Py_memory_order_relaxed" : 0, 
	"_Py_memory_order_acquire" : 1, 
	"_Py_memory_order_release" : 2, 
	"_Py_memory_order_acq_rel" : 3, 
	"_Py_memory_order_seq_cst" : 4, 
}

ISupper = 0 
ISlower = 1 
ISalpha = 2 
ISdigit = 3 
ISxdigit = 4 
ISspace = 5 
ISprint = 6 
ISgraph = 7 
ISblank = 8 
IScntrl = 9 
ISpunct = 10 
ISalnum = 11 

PyGILState_LOCKED = 0 
PyGILState_UNLOCKED = 1 

SI_ASYNCNL = -60 
SI_TKILL = -6 
SI_SIGIO = -5 
SI_ASYNCIO = -4 
SI_MESGQ = -3 
SI_TIMER = -2 
SI_QUEUE = -1 
SI_USER = 0 
SI_KERNEL = 128 

ILL_ILLOPC = 1 
ILL_ILLOPN = 2 
ILL_ILLADR = 3 
ILL_ILLTRP = 4 
ILL_PRVOPC = 5 
ILL_PRVREG = 6 
ILL_COPROC = 7 
ILL_BADSTK = 8 

FPE_INTDIV = 1 
FPE_INTOVF = 2 
FPE_FLTDIV = 3 
FPE_FLTOVF = 4 
FPE_FLTUND = 5 
FPE_FLTRES = 6 
FPE_FLTINV = 7 
FPE_FLTSUB = 8 

SEGV_MAPERR = 1 
SEGV_ACCERR = 2 

BUS_ADRALN = 1 
BUS_ADRERR = 2 
BUS_OBJERR = 3 

TRAP_BRKPT = 1 
TRAP_TRACE = 2 

CLD_EXITED = 1 
CLD_KILLED = 2 
CLD_DUMPED = 3 
CLD_TRAPPED = 4 
CLD_STOPPED = 5 
CLD_CONTINUED = 6 

POLL_IN = 1 
POLL_OUT = 2 
POLL_MSG = 3 
POLL_ERR = 4 
POLL_PRI = 5 
POLL_HUP = 6 

SIGEV_SIGNAL = 0 
SIGEV_NONE = 1 
SIGEV_THREAD = 2 
SIGEV_THREAD_ID = 4 

SS_ONSTACK = 1 
SS_DISABLE = 2 

REG_GS = 0 
REG_FS = 1 
REG_ES = 2 
REG_DS = 3 
REG_EDI = 4 
REG_ESI = 5 
REG_EBP = 6 
REG_ESP = 7 
REG_EBX = 8 
REG_EDX = 9 
REG_ECX = 10 
REG_EAX = 11 
REG_TRAPNO = 12 
REG_ERR = 13 
REG_EIP = 14 
REG_CS = 15 
REG_EFL = 16 
REG_UESP = 17 
REG_SS = 18 

## simple enums ##
RPYTHONIC_GLOBAL_ENUMS = { 
 "PC_LINK_MAX" : 0,  "PC_MAX_CANON" : 1,  "PC_MAX_INPUT" : 2,  "PC_NAME_MAX" : 3,  "PC_PATH_MAX" : 4,  "PC_PIPE_BUF" : 5,  "PC_CHOWN_RESTRICTED" : 6,  "PC_NO_TRUNC" : 7,  "PC_VDISABLE" : 8,  "PC_SYNC_IO" : 9,  "PC_ASYNC_IO" : 10,  "PC_PRIO_IO" : 11,  "PC_SOCK_MAXBUF" : 12,  "PC_FILESIZEBITS" : 13,  "PC_REC_INCR_XFER_SIZE" : 14,  "PC_REC_MAX_XFER_SIZE" : 15,  "PC_REC_MIN_XFER_SIZE" : 16,  "PC_REC_XFER_ALIGN" : 17,  "PC_ALLOC_SIZE_MIN" : 18,  "PC_SYMLINK_MAX" : 19,  "PC_2_SYMLINKS" : 20, 
 "SC_ARG_MAX" : 0,  "SC_CHILD_MAX" : 1,  "SC_CLK_TCK" : 2,  "SC_NGROUPS_MAX" : 3,  "SC_OPEN_MAX" : 4,  "SC_STREAM_MAX" : 5,  "SC_TZNAME_MAX" : 6,  "SC_JOB_CONTROL" : 7,  "SC_SAVED_IDS" : 8,  "SC_REALTIME_SIGNALS" : 9,  "SC_PRIORITY_SCHEDULING" : 10,  "SC_TIMERS" : 11,  "SC_ASYNCHRONOUS_IO" : 12,  "SC_PRIORITIZED_IO" : 13,  "SC_SYNCHRONIZED_IO" : 14,  "SC_FSYNC" : 15,  "SC_MAPPED_FILES" : 16,  "SC_MEMLOCK" : 17,  "SC_MEMLOCK_RANGE" : 18,  "SC_MEMORY_PROTECTION" : 19,  "SC_MESSAGE_PASSING" : 20,  "SC_SEMAPHORES" : 21,  "SC_SHARED_MEMORY_OBJECTS" : 22,  "SC_AIO_LISTIO_MAX" : 23,  "SC_AIO_MAX" : 24,  "SC_AIO_PRIO_DELTA_MAX" : 25,  "SC_DELAYTIMER_MAX" : 26,  "SC_MQ_OPEN_MAX" : 27,  "SC_MQ_PRIO_MAX" : 28,  "SC_VERSION" : 29,  "SC_PAGESIZE" : 30,  "SC_RTSIG_MAX" : 31,  "SC_SEM_NSEMS_MAX" : 32,  "SC_SEM_VALUE_MAX" : 33,  "SC_SIGQUEUE_MAX" : 34,  "SC_TIMER_MAX" : 35,  "SC_BC_BASE_MAX" : 36,  "SC_BC_DIM_MAX" : 37,  "SC_BC_SCALE_MAX" : 38,  "SC_BC_STRING_MAX" : 39,  "SC_COLL_WEIGHTS_MAX" : 40,  "SC_EQUIV_CLASS_MAX" : 41,  "SC_EXPR_NEST_MAX" : 42,  "SC_LINE_MAX" : 43,  "SC_RE_DUP_MAX" : 44,  "SC_CHARCLASS_NAME_MAX" : 45,  "SC_2_VERSION" : 46,  "SC_2_C_BIND" : 47,  "SC_2_C_DEV" : 48,  "SC_2_FORT_DEV" : 49,  "SC_2_FORT_RUN" : 50,  "SC_2_SW_DEV" : 51,  "SC_2_LOCALEDEF" : 52,  "SC_PII" : 53,  "SC_PII_XTI" : 54,  "SC_PII_SOCKET" : 55,  "SC_PII_INTERNET" : 56,  "SC_PII_OSI" : 57,  "SC_POLL" : 58,  "SC_SELECT" : 59,  "SC_UIO_MAXIOV" : 60,  "SC_IOV_MAX" : 60,  "SC_PII_INTERNET_STREAM" : 61,  "SC_PII_INTERNET_DGRAM" : 62,  "SC_PII_OSI_COTS" : 63,  "SC_PII_OSI_CLTS" : 64,  "SC_PII_OSI_M" : 65,  "SC_T_IOV_MAX" : 66,  "SC_THREADS" : 67,  "SC_THREAD_SAFE_FUNCTIONS" : 68,  "SC_GETGR_R_SIZE_MAX" : 69,  "SC_GETPW_R_SIZE_MAX" : 70,  "SC_LOGIN_NAME_MAX" : 71,  "SC_TTY_NAME_MAX" : 72,  "SC_THREAD_DESTRUCTOR_ITERATIONS" : 73,  "SC_THREAD_KEYS_MAX" : 74,  "SC_THREAD_STACK_MIN" : 75,  "SC_THREAD_THREADS_MAX" : 76,  "SC_THREAD_ATTR_STACKADDR" : 77,  "SC_THREAD_ATTR_STACKSIZE" : 78,  "SC_THREAD_PRIORITY_SCHEDULING" : 79,  "SC_THREAD_PRIO_INHERIT" : 80,  "SC_THREAD_PRIO_PROTECT" : 81,  "SC_THREAD_PROCESS_SHARED" : 82,  "SC_NPROCESSORS_CONF" : 83,  "SC_NPROCESSORS_ONLN" : 84,  "SC_PHYS_PAGES" : 85,  "SC_AVPHYS_PAGES" : 86,  "SC_ATEXIT_MAX" : 87,  "SC_PASS_MAX" : 88,  "SC_XOPEN_VERSION" : 89,  "SC_XOPEN_XCU_VERSION" : 90,  "SC_XOPEN_UNIX" : 91,  "SC_XOPEN_CRYPT" : 92,  "SC_XOPEN_ENH_I18N" : 93,  "SC_XOPEN_SHM" : 94,  "SC_2_CHAR_TERM" : 95,  "SC_2_C_VERSION" : 96,  "SC_2_UPE" : 97,  "SC_XOPEN_XPG2" : 98,  "SC_XOPEN_XPG3" : 99,  "SC_XOPEN_XPG4" : 100,  "SC_CHAR_BIT" : 101,  "SC_CHAR_MAX" : 102,  "SC_CHAR_MIN" : 103,  "SC_INT_MAX" : 104,  "SC_INT_MIN" : 105,  "SC_LONG_BIT" : 106,  "SC_WORD_BIT" : 107,  "SC_MB_LEN_MAX" : 108,  "SC_NZERO" : 109,  "SC_SSIZE_MAX" : 110,  "SC_SCHAR_MAX" : 111,  "SC_SCHAR_MIN" : 112,  "SC_SHRT_MAX" : 113,  "SC_SHRT_MIN" : 114,  "SC_UCHAR_MAX" : 115,  "SC_UINT_MAX" : 116,  "SC_ULONG_MAX" : 117,  "SC_USHRT_MAX" : 118,  "SC_NL_ARGMAX" : 119,  "SC_NL_LANGMAX" : 120,  "SC_NL_MSGMAX" : 121,  "SC_NL_NMAX" : 122,  "SC_NL_SETMAX" : 123,  "SC_NL_TEXTMAX" : 124,  "SC_XBS5_ILP32_OFF32" : 125,  "SC_XBS5_ILP32_OFFBIG" : 126,  "SC_XBS5_LP64_OFF64" : 127,  "SC_XBS5_LPBIG_OFFBIG" : 128,  "SC_XOPEN_LEGACY" : 129,  "SC_XOPEN_REALTIME" : 130,  "SC_XOPEN_REALTIME_THREADS" : 131,  "SC_ADVISORY_INFO" : 132,  "SC_BARRIERS" : 133,  "SC_BASE" : 134,  "SC_C_LANG_SUPPORT" : 135,  "SC_C_LANG_SUPPORT_R" : 136,  "SC_CLOCK_SELECTION" : 137,  "SC_CPUTIME" : 138,  "SC_THREAD_CPUTIME" : 139,  "SC_DEVICE_IO" : 140,  "SC_DEVICE_SPECIFIC" : 141,  "SC_DEVICE_SPECIFIC_R" : 142,  "SC_FD_MGMT" : 143,  "SC_FIFO" : 144,  "SC_PIPE" : 145,  "SC_FILE_ATTRIBUTES" : 146,  "SC_FILE_LOCKING" : 147,  "SC_FILE_SYSTEM" : 148,  "SC_MONOTONIC_CLOCK" : 149,  "SC_MULTI_PROCESS" : 150,  "SC_SINGLE_PROCESS" : 151,  "SC_NETWORKING" : 152,  "SC_READER_WRITER_LOCKS" : 153,  "SC_SPIN_LOCKS" : 154,  "SC_REGEXP" : 155,  "SC_REGEX_VERSION" : 156,  "SC_SHELL" : 157,  "SC_SIGNALS" : 158,  "SC_SPAWN" : 159,  "SC_SPORADIC_SERVER" : 160,  "SC_THREAD_SPORADIC_SERVER" : 161,  "SC_SYSTEM_DATABASE" : 162,  "SC_SYSTEM_DATABASE_R" : 163,  "SC_TIMEOUTS" : 164,  "SC_TYPED_MEMORY_OBJECTS" : 165,  "SC_USER_GROUPS" : 166,  "SC_USER_GROUPS_R" : 167,  "SC_2_PBS" : 168,  "SC_2_PBS_ACCOUNTING" : 169,  "SC_2_PBS_LOCATE" : 170,  "SC_2_PBS_MESSAGE" : 171,  "SC_2_PBS_TRACK" : 172,  "SC_SYMLOOP_MAX" : 173,  "SC_STREAMS" : 174,  "SC_2_PBS_CHECKPOINT" : 175,  "SC_V6_ILP32_OFF32" : 176,  "SC_V6_ILP32_OFFBIG" : 177,  "SC_V6_LP64_OFF64" : 178,  "SC_V6_LPBIG_OFFBIG" : 179,  "SC_HOST_NAME_MAX" : 180,  "SC_TRACE" : 181,  "SC_TRACE_EVENT_FILTER" : 182,  "SC_TRACE_INHERIT" : 183,  "SC_TRACE_LOG" : 184,  "SC_LEVEL1_ICACHE_SIZE" : 185,  "SC_LEVEL1_ICACHE_ASSOC" : 186,  "SC_LEVEL1_ICACHE_LINESIZE" : 187,  "SC_LEVEL1_DCACHE_SIZE" : 188,  "SC_LEVEL1_DCACHE_ASSOC" : 189,  "SC_LEVEL1_DCACHE_LINESIZE" : 190,  "SC_LEVEL2_CACHE_SIZE" : 191,  "SC_LEVEL2_CACHE_ASSOC" : 192,  "SC_LEVEL2_CACHE_LINESIZE" : 193,  "SC_LEVEL3_CACHE_SIZE" : 194,  "SC_LEVEL3_CACHE_ASSOC" : 195,  "SC_LEVEL3_CACHE_LINESIZE" : 196,  "SC_LEVEL4_CACHE_SIZE" : 197,  "SC_LEVEL4_CACHE_ASSOC" : 198,  "SC_LEVEL4_CACHE_LINESIZE" : 199,  "SC_IPV6" : 265,  "SC_RAW_SOCKETS" : 266,  "SC_V7_ILP32_OFF32" : 267,  "SC_V7_ILP32_OFFBIG" : 268,  "SC_V7_LP64_OFF64" : 269,  "SC_V7_LPBIG_OFFBIG" : 270,  "SC_SS_REPL_MAX" : 271,  "SC_TRACE_EVENT_NAME_MAX" : 272,  "SC_TRACE_NAME_MAX" : 273,  "SC_TRACE_SYS_MAX" : 274,  "SC_TRACE_USER_EVENT_MAX" : 275,  "SC_XOPEN_STREAMS" : 276,  "SC_THREAD_ROBUST_PRIO_INHERIT" : 277,  "SC_THREAD_ROBUST_PRIO_PROTECT" : 278, 
 "CS_PATH" : 0,  "CS_V6_WIDTH_RESTRICTED_ENVS" : 1,  "CS_GNU_LIBC_VERSION" : 2,  "CS_GNU_LIBPTHREAD_VERSION" : 3,  "CS_V5_WIDTH_RESTRICTED_ENVS" : 4,  "CS_V7_WIDTH_RESTRICTED_ENVS" : 5,  "CS_LFS_CFLAGS" : 1000,  "CS_LFS_LDFLAGS" : 1001,  "CS_LFS_LIBS" : 1002,  "CS_LFS_LINTFLAGS" : 1003,  "CS_LFS64_CFLAGS" : 1004,  "CS_LFS64_LDFLAGS" : 1005,  "CS_LFS64_LIBS" : 1006,  "CS_LFS64_LINTFLAGS" : 1007,  "CS_XBS5_ILP32_OFF32_CFLAGS" : 1100,  "CS_XBS5_ILP32_OFF32_LDFLAGS" : 1101,  "CS_XBS5_ILP32_OFF32_LIBS" : 1102,  "CS_XBS5_ILP32_OFF32_LINTFLAGS" : 1103,  "CS_XBS5_ILP32_OFFBIG_CFLAGS" : 1104,  "CS_XBS5_ILP32_OFFBIG_LDFLAGS" : 1105,  "CS_XBS5_ILP32_OFFBIG_LIBS" : 1106,  "CS_XBS5_ILP32_OFFBIG_LINTFLAGS" : 1107,  "CS_XBS5_LP64_OFF64_CFLAGS" : 1108,  "CS_XBS5_LP64_OFF64_LDFLAGS" : 1109,  "CS_XBS5_LP64_OFF64_LIBS" : 1110,  "CS_XBS5_LP64_OFF64_LINTFLAGS" : 1111,  "CS_XBS5_LPBIG_OFFBIG_CFLAGS" : 1112,  "CS_XBS5_LPBIG_OFFBIG_LDFLAGS" : 1113,  "CS_XBS5_LPBIG_OFFBIG_LIBS" : 1114,  "CS_XBS5_LPBIG_OFFBIG_LINTFLAGS" : 1115,  "CS_POSIX_V6_ILP32_OFF32_CFLAGS" : 1116,  "CS_POSIX_V6_ILP32_OFF32_LDFLAGS" : 1117,  "CS_POSIX_V6_ILP32_OFF32_LIBS" : 1118,  "CS_POSIX_V6_ILP32_OFF32_LINTFLAGS" : 1119,  "CS_POSIX_V6_ILP32_OFFBIG_CFLAGS" : 1120,  "CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS" : 1121,  "CS_POSIX_V6_ILP32_OFFBIG_LIBS" : 1122,  "CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS" : 1123,  "CS_POSIX_V6_LP64_OFF64_CFLAGS" : 1124,  "CS_POSIX_V6_LP64_OFF64_LDFLAGS" : 1125,  "CS_POSIX_V6_LP64_OFF64_LIBS" : 1126,  "CS_POSIX_V6_LP64_OFF64_LINTFLAGS" : 1127,  "CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS" : 1128,  "CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS" : 1129,  "CS_POSIX_V6_LPBIG_OFFBIG_LIBS" : 1130,  "CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS" : 1131,  "CS_POSIX_V7_ILP32_OFF32_CFLAGS" : 1132,  "CS_POSIX_V7_ILP32_OFF32_LDFLAGS" : 1133,  "CS_POSIX_V7_ILP32_OFF32_LIBS" : 1134,  "CS_POSIX_V7_ILP32_OFF32_LINTFLAGS" : 1135,  "CS_POSIX_V7_ILP32_OFFBIG_CFLAGS" : 1136,  "CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS" : 1137,  "CS_POSIX_V7_ILP32_OFFBIG_LIBS" : 1138,  "CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS" : 1139,  "CS_POSIX_V7_LP64_OFF64_CFLAGS" : 1140,  "CS_POSIX_V7_LP64_OFF64_LDFLAGS" : 1141,  "CS_POSIX_V7_LP64_OFF64_LIBS" : 1142,  "CS_POSIX_V7_LP64_OFF64_LINTFLAGS" : 1143,  "CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS" : 1144,  "CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS" : 1145,  "CS_POSIX_V7_LPBIG_OFFBIG_LIBS" : 1146,  "CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS" : 1147,  "CS_V6_ENV" : 1148,  "CS_V7_ENV" : 1149, 
 "FP_NAN" : 0,  "FP_INFINITE" : 1,  "FP_ZERO" : 2,  "FP_SUBNORMAL" : 3,  "FP_NORMAL" : 4, 
 "IEEE_" : -1,  "SVID_" : 0,  "XOPEN_" : 1,  "POSIX_" : 2,  "ISOC_" : 3, 
 "ISupper" : 0,  "ISlower" : 1,  "ISalpha" : 2,  "ISdigit" : 3,  "ISxdigit" : 4,  "ISspace" : 5,  "ISprint" : 6,  "ISgraph" : 7,  "ISblank" : 8,  "IScntrl" : 9,  "ISpunct" : 10,  "ISalnum" : 11, 
 "PyGILState_LOCKED" : 0,  "PyGILState_UNLOCKED" : 1, 
 "SI_ASYNCNL" : -60,  "SI_TKILL" : -6,  "SI_SIGIO" : -5,  "SI_ASYNCIO" : -4,  "SI_MESGQ" : -3,  "SI_TIMER" : -2,  "SI_QUEUE" : -1,  "SI_USER" : 0,  "SI_KERNEL" : 128, 
 "ILL_ILLOPC" : 1,  "ILL_ILLOPN" : 2,  "ILL_ILLADR" : 3,  "ILL_ILLTRP" : 4,  "ILL_PRVOPC" : 5,  "ILL_PRVREG" : 6,  "ILL_COPROC" : 7,  "ILL_BADSTK" : 8, 
 "FPE_INTDIV" : 1,  "FPE_INTOVF" : 2,  "FPE_FLTDIV" : 3,  "FPE_FLTOVF" : 4,  "FPE_FLTUND" : 5,  "FPE_FLTRES" : 6,  "FPE_FLTINV" : 7,  "FPE_FLTSUB" : 8, 
 "SEGV_MAPERR" : 1,  "SEGV_ACCERR" : 2, 
 "BUS_ADRALN" : 1,  "BUS_ADRERR" : 2,  "BUS_OBJERR" : 3, 
 "TRAP_BRKPT" : 1,  "TRAP_TRACE" : 2, 
 "CLD_EXITED" : 1,  "CLD_KILLED" : 2,  "CLD_DUMPED" : 3,  "CLD_TRAPPED" : 4,  "CLD_STOPPED" : 5,  "CLD_CONTINUED" : 6, 
 "POLL_IN" : 1,  "POLL_OUT" : 2,  "POLL_MSG" : 3,  "POLL_ERR" : 4,  "POLL_PRI" : 5,  "POLL_HUP" : 6, 
 "SIGEV_SIGNAL" : 0,  "SIGEV_NONE" : 1,  "SIGEV_THREAD" : 2,  "SIGEV_THREAD_ID" : 4, 
 "SS_ONSTACK" : 1,  "SS_DISABLE" : 2, 
 "REG_GS" : 0,  "REG_FS" : 1,  "REG_ES" : 2,  "REG_DS" : 3,  "REG_EDI" : 4,  "REG_ESI" : 5,  "REG_EBP" : 6,  "REG_ESP" : 7,  "REG_EBX" : 8,  "REG_EDX" : 9,  "REG_ECX" : 10,  "REG_EAX" : 11,  "REG_TRAPNO" : 12,  "REG_ERR" : 13,  "REG_EIP" : 14,  "REG_CS" : 15,  "REG_EFL" : 16,  "REG_UESP" : 17,  "REG_SS" : 18, 

}
class __fsid_t(_rpythonic_struct_): _array_wrapper_ = True
class __mbstate_t(_rpythonic_struct_): pass
class __value(ctypes.Union): pass
class _G_fpos_t(_rpythonic_struct_): pass
class _G_fpos64_t(_rpythonic_struct_): pass
class _IO_jump_t(_rpythonic_struct_): pass
class _IO_marker(_rpythonic_struct_): pass
class _IO_FILE(_rpythonic_struct_): _array_wrapper_ = True
class _IO_FILE_plus(_rpythonic_struct_): pass
class _IO_cookie_io_functions_t(_rpythonic_struct_): pass
class _IO_cookie_file(_rpythonic_struct_): pass
class obstack(_rpythonic_struct_): pass
class __locale_struct(_rpythonic_struct_): _array_wrapper_ = True
class __locale_data(_rpythonic_struct_): pass
class wait(ctypes.Union): pass
class __wait_terminated(_rpythonic_struct_): pass
class __wait_stopped(_rpythonic_struct_): pass
class __WAIT_STATUS(ctypes.Union): pass
class div_t(_rpythonic_struct_): pass
class ldiv_t(_rpythonic_struct_): pass
class lldiv_t(_rpythonic_struct_): pass
class __sigset_t(_rpythonic_struct_): _array_wrapper_ = True
class timespec(_rpythonic_struct_): pass
class timeval(_rpythonic_struct_): pass
class fd_set(_rpythonic_struct_): _array_wrapper_ = True
class pthread_attr_t(ctypes.Union): pass
class __pthread_internal_slist(_rpythonic_struct_): pass
class pthread_mutex_t(ctypes.Union): pass
class __pthread_mutex_s(_rpythonic_struct_): pass
class pthread_mutexattr_t(ctypes.Union): pass
class pthread_cond_t(ctypes.Union): pass
class pthread_condattr_t(ctypes.Union): pass
class pthread_rwlock_t(ctypes.Union): pass
class __data(_rpythonic_struct_): pass
class pthread_rwlockattr_t(ctypes.Union): pass
class pthread_barrier_t(ctypes.Union): pass
class pthread_barrierattr_t(ctypes.Union): pass
class random_data(_rpythonic_struct_): pass
class drand48_data(_rpythonic_struct_): _array_wrapper_ = True
class imaxdiv_t(_rpythonic_struct_): pass
class exception(_rpythonic_struct_): pass
class timezone(_rpythonic_struct_): pass
class itimerval(_rpythonic_struct_): pass
class tm(_rpythonic_struct_): pass
class itimerspec(_rpythonic_struct_): pass
class stat(_rpythonic_struct_): pass
class stat64(_rpythonic_struct_): pass
class _Py_atomic_address(_rpythonic_struct_): pass
class _Py_atomic_int(_rpythonic_struct_): pass
class _object(_rpythonic_struct_): pass
class PyVarObject(_rpythonic_struct_): pass
class bufferinfo(_rpythonic_struct_): _array_wrapper_ = True
class PyNumberMethods(_rpythonic_struct_): pass
class PySequenceMethods(_rpythonic_struct_): pass
class PyMappingMethods(_rpythonic_struct_): pass
class PyBufferProcs(_rpythonic_struct_): pass
class _typeobject(_rpythonic_struct_): pass
class PyMemberDef(_rpythonic_struct_): pass
class PyType_Slot(_rpythonic_struct_): pass
class PyType_Spec(_rpythonic_struct_): pass
class _heaptypeobject(_rpythonic_struct_): pass
class _gc_head(ctypes.Union): pass
class gc(_rpythonic_struct_): pass
class PyByteArrayObject(_rpythonic_struct_): pass
class PyBytesObject(_rpythonic_struct_): _array_wrapper_ = True
class PyUnicodeObject(_rpythonic_struct_): pass
class _longobject(_rpythonic_struct_): _array_wrapper_ = True
class PyFloatObject(_rpythonic_struct_): pass
class Py_complex(_rpythonic_struct_): pass
class PyComplexObject(_rpythonic_struct_): pass
class PyMemoryViewObject(_rpythonic_struct_): pass
class PyTupleObject(_rpythonic_struct_): _array_wrapper_ = True
class PyListObject(_rpythonic_struct_): pass
class PyDictEntry(_rpythonic_struct_): pass
class _dictobject(_rpythonic_struct_): _array_wrapper_ = True
class setentry(_rpythonic_struct_): pass
class _setobject(_rpythonic_struct_): _array_wrapper_ = True
class PyMethodDef(_rpythonic_struct_): pass
class PyCFunctionObject(_rpythonic_struct_): pass
class PyModuleDef_Base(_rpythonic_struct_): pass
class PyModuleDef(_rpythonic_struct_): pass
class PyFunctionObject(_rpythonic_struct_): pass
class PyMethodObject(_rpythonic_struct_): pass
class PyInstanceMethodObject(_rpythonic_struct_): pass
class _frame(_rpythonic_struct_): pass
class _traceback(_rpythonic_struct_): pass
class PySliceObject(_rpythonic_struct_): pass
class PyCellObject(_rpythonic_struct_): pass
class PyGenObject(_rpythonic_struct_): pass
class PyGetSetDef(_rpythonic_struct_): pass
class wrapperbase(_rpythonic_struct_): pass
class PyDescrObject(_rpythonic_struct_): pass
class PyMethodDescrObject(_rpythonic_struct_): pass
class PyMemberDescrObject(_rpythonic_struct_): pass
class PyGetSetDescrObject(_rpythonic_struct_): pass
class PyWrapperDescrObject(_rpythonic_struct_): pass
class _PyWeakReference(_rpythonic_struct_): pass
class PyStructSequence_Field(_rpythonic_struct_): pass
class PyStructSequence_Desc(_rpythonic_struct_): pass
class PyBaseExceptionObject(_rpythonic_struct_): pass
class PySyntaxErrorObject(_rpythonic_struct_): pass
class PyUnicodeErrorObject(_rpythonic_struct_): pass
class PySystemExitObject(_rpythonic_struct_): pass
class PyEnvironmentErrorObject(_rpythonic_struct_): pass
class _is(_rpythonic_struct_): pass
class _ts(_rpythonic_struct_): pass
class _arena(_rpythonic_struct_): pass
class PyCompilerFlags(_rpythonic_struct_): pass
class _mod(_rpythonic_struct_): pass
class _node(_rpythonic_struct_): pass
class symtable(_rpythonic_struct_): pass
class _inittab(_rpythonic_struct_): pass
class _frozen(_rpythonic_struct_): pass
class PyCodeObject(_rpythonic_struct_): pass
class _addr_pair(_rpythonic_struct_): pass
class PyFutureFeatures(_rpythonic_struct_): pass
class sigval(ctypes.Union): pass
class siginfo(_rpythonic_struct_): pass
class _sifields(ctypes.Union): pass
class _kill(_rpythonic_struct_): pass
class _timer(_rpythonic_struct_): pass
class _rt(_rpythonic_struct_): pass
class _sigchld(_rpythonic_struct_): pass
class _sigfault(_rpythonic_struct_): pass
class _sigpoll(_rpythonic_struct_): pass
class sigevent(_rpythonic_struct_): pass
class _sigev_un(ctypes.Union): pass
class _sigev_thread(_rpythonic_struct_): pass
class sigaction(_rpythonic_struct_): pass
class __sigaction_handler(ctypes.Union): pass
class sigvec(_rpythonic_struct_): pass
class _fpreg(_rpythonic_struct_): _array_wrapper_ = True
class _fpxreg(_rpythonic_struct_): _array_wrapper_ = True
class _xmmreg(_rpythonic_struct_): _array_wrapper_ = True
class _fpstate(_rpythonic_struct_): _array_wrapper_ = True
class sigcontext(_rpythonic_struct_): pass
class sigstack(_rpythonic_struct_): pass
class sigaltstack(_rpythonic_struct_): pass
class _libc_fpreg(_rpythonic_struct_): _array_wrapper_ = True
class _libc_fpstate(_rpythonic_struct_): _array_wrapper_ = True
class mcontext_t(_rpythonic_struct_): pass
class ucontext(_rpythonic_struct_): pass
class __jmp_buf_tag(_rpythonic_struct_): pass
## union and structures ##
__freeze_rpythonic_struct( __fsid_t, [
	( "__val", ( ctypes.c_int * 2 ) ),
])

__freeze_rpythonic_struct( __value, [
	( "__wch", ctypes.c_uint ),
	( "__wchb", ( ctypes.c_char * 4 ) ),
])

__freeze_rpythonic_struct( __mbstate_t, [
	( "__count", ctypes.c_int ),
	( "__value", __value ),
])

__freeze_rpythonic_struct( _G_fpos_t, [
	( "__pos", ctypes.c_int64 ),
	( "__state", __mbstate_t ),
])

__freeze_rpythonic_struct( _G_fpos64_t, [
	( "__pos", ctypes.c_longlong ),
	( "__state", __mbstate_t ),
])

__freeze_rpythonic_struct( _IO_jump_t, [
])

__freeze_rpythonic_struct( _IO_marker, [
	( "_next", ctypes.POINTER(_IO_marker) ),
	( "_sbuf", ctypes.POINTER(_IO_FILE) ),
	( "_pos", ctypes.c_int ),
])

__freeze_rpythonic_struct( _IO_FILE, [
	( "_flags", ctypes.c_int ),
	( "_IO_read_ptr", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_read_end", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_read_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_write_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_write_ptr", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_write_end", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_buf_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_buf_end", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_save_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_backup_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_save_end", ctypes.POINTER(ctypes.c_char) ),
	( "_markers", ctypes.POINTER(_IO_marker) ),
	( "_chain", ctypes.POINTER(_IO_FILE) ),
	( "_fileno", ctypes.c_int ),
	( "_flags2", ctypes.c_int ),
	( "_old_offset", ctypes.c_int64 ),
	( "_cur_column", ctypes.c_ushort ),
	( "_vtable_offset", ctypes.c_char ),
	( "_shortbuf", ( ctypes.c_char * 1 ) ),
	( "_lock", ctypes.POINTER(ctypes.c_void_p) ),
	( "_offset", ctypes.c_longlong ),
	( "__pad1", ctypes.POINTER(ctypes.c_void_p) ),
	( "__pad2", ctypes.POINTER(ctypes.c_void_p) ),
	( "__pad3", ctypes.POINTER(ctypes.c_void_p) ),
	( "__pad4", ctypes.POINTER(ctypes.c_void_p) ),
	( "__pad5", ctypes.c_uint ),
	( "_mode", ctypes.c_int ),
	( "_unused2", ctypes.c_char ),
])

__freeze_rpythonic_struct( _IO_FILE_plus, [
])

__freeze_rpythonic_struct( _IO_cookie_io_functions_t, [
	( "read", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),ctypes.c_uint,) ),
	( "write", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),ctypes.c_uint,) ),
	( "seek", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_longlong),ctypes.c_int,) ),
	( "close", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
])

__freeze_rpythonic_struct( _IO_cookie_file, [
])

__freeze_rpythonic_struct( obstack, [
])

__freeze_rpythonic_struct( __locale_data, [
])

__freeze_rpythonic_struct( __locale_struct, [
	( "__locales", ctypes.POINTER(( __locale_data * 13 )) ),
	( "__ctype_b", ctypes.POINTER(ctypes.c_uint16) ),
	( "__ctype_tolower", ctypes.POINTER(ctypes.c_int) ),
	( "__ctype_toupper", ctypes.POINTER(ctypes.c_int) ),
	( "__names", ctypes.POINTER(( ctypes.c_char * 13 )) ),
])

__freeze_rpythonic_struct( __wait_terminated, [
	( "__w_termsig", ctypes.c_uint ),
	( "__w_coredump", ctypes.c_uint ),
	( "__w_retcode", ctypes.c_uint ),
	#opaque-warning# <rpythonic.rpythonic.SomeThing object at 0x9c02e0c>
])

__freeze_rpythonic_struct( __wait_stopped, [
	( "__w_stopval", ctypes.c_uint ),
	( "__w_stopsig", ctypes.c_uint ),
	#opaque-warning# <rpythonic.rpythonic.SomeThing object at 0x9c02f4c>
])

__freeze_rpythonic_struct( wait, [
	( "w_status", ctypes.c_int ),
	( "__wait_terminated", __wait_terminated ),
	( "__wait_stopped", __wait_stopped ),
])

__freeze_rpythonic_struct( __WAIT_STATUS, [
	( "__uptr", ctypes.POINTER(wait) ),
	( "__iptr", ctypes.POINTER(ctypes.c_int) ),
])

__freeze_rpythonic_struct( div_t, [
	( "quot", ctypes.c_int ),
	( "rem", ctypes.c_int ),
])

__freeze_rpythonic_struct( ldiv_t, [
	( "quot", ctypes.c_int64 ),
	( "rem", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( lldiv_t, [
	( "quot", ctypes.c_longlong ),
	( "rem", ctypes.c_longlong ),
])

__freeze_rpythonic_struct( __sigset_t, [
	( "__val", ctypes.c_uint64 ),
])

__freeze_rpythonic_struct( timespec, [
	( "tv_sec", ctypes.c_int64 ),
	( "tv_nsec", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( timeval, [
	( "tv_sec", ctypes.c_int64 ),
	( "tv_usec", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( fd_set, [
	( "fds_bits", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_attr_t, [
	( "__size", ( ctypes.c_char * 36 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( __pthread_internal_slist, [
	( "__next", ctypes.POINTER(__pthread_internal_slist) ),
])

__freeze_rpythonic_struct( __pthread_mutex_s, [
	( "__lock", ctypes.c_int ),
	( "__count", ctypes.c_uint ),
	( "__owner", ctypes.c_int ),
	( "__kind", ctypes.c_int ),
	( "__nusers", ctypes.c_uint ),
	#opaque-warning# <rpythonic.rpythonic.SomeThing object at 0x9c21eec>
])

__freeze_rpythonic_struct( pthread_mutex_t, [
	( "__data", __pthread_mutex_s ),
	( "__size", ( ctypes.c_char * 24 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_mutexattr_t, [
	( "__size", ( ctypes.c_char * 4 ) ),
	( "__align", ctypes.c_int ),
])

__freeze_rpythonic_struct( __data, [
	( "__lock", ctypes.c_int ),
	( "__nr_readers", ctypes.c_uint ),
	( "__readers_wakeup", ctypes.c_uint ),
	( "__writer_wakeup", ctypes.c_uint ),
	( "__nr_readers_queued", ctypes.c_uint ),
	( "__nr_writers_queued", ctypes.c_uint ),
	( "__flags", ctypes.c_ubyte ),
	( "__shared", ctypes.c_ubyte ),
	( "__pad1", ctypes.c_ubyte ),
	( "__pad2", ctypes.c_ubyte ),
	( "__writer", ctypes.c_int ),
])

__freeze_rpythonic_struct( pthread_cond_t, [
	( "__data", __data ),
	( "__size", ( ctypes.c_char * 48 ) ),
	( "__align", ctypes.c_longlong ),
])

__freeze_rpythonic_struct( pthread_condattr_t, [
	( "__size", ( ctypes.c_char * 4 ) ),
	( "__align", ctypes.c_int ),
])

__freeze_rpythonic_struct( pthread_rwlock_t, [
	( "__data", __data ),
	( "__size", ( ctypes.c_char * 32 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_rwlockattr_t, [
	( "__size", ( ctypes.c_char * 8 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_barrier_t, [
	( "__size", ( ctypes.c_char * 20 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_barrierattr_t, [
	( "__size", ( ctypes.c_char * 4 ) ),
	( "__align", ctypes.c_int ),
])

__freeze_rpythonic_struct( random_data, [
	( "fptr", ctypes.POINTER(ctypes.c_int32) ),
	( "rptr", ctypes.POINTER(ctypes.c_int32) ),
	( "state", ctypes.POINTER(ctypes.c_int32) ),
	( "rand_type", ctypes.c_int ),
	( "rand_deg", ctypes.c_int ),
	( "rand_sep", ctypes.c_int ),
	( "end_ptr", ctypes.POINTER(ctypes.c_int32) ),
])

__freeze_rpythonic_struct( drand48_data, [
	( "__x", ( ctypes.c_uint16 * 3 ) ),
	( "__old_x", ( ctypes.c_uint16 * 3 ) ),
	( "__c", ctypes.c_uint16 ),
	( "__init", ctypes.c_uint16 ),
	( "__a", ctypes.c_ulonglong ),
])

__freeze_rpythonic_struct( imaxdiv_t, [
	( "quot", ctypes.c_longlong ),
	( "rem", ctypes.c_longlong ),
])

__freeze_rpythonic_struct( exception, [
	( "C_type", ctypes.c_int ),
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "arg1", ctypes.c_double ),
	( "arg2", ctypes.c_double ),
	( "retval", ctypes.c_double ),
])

__freeze_rpythonic_struct( timezone, [
	( "tz_minuteswest", ctypes.c_int ),
	( "tz_dsttime", ctypes.c_int ),
])

__freeze_rpythonic_struct( itimerval, [
	( "it_interval", timeval ),
	( "it_value", timeval ),
])

__freeze_rpythonic_struct( tm, [
	( "tm_sec", ctypes.c_int ),
	( "tm_min", ctypes.c_int ),
	( "tm_hour", ctypes.c_int ),
	( "tm_mday", ctypes.c_int ),
	( "tm_mon", ctypes.c_int ),
	( "tm_year", ctypes.c_int ),
	( "tm_wday", ctypes.c_int ),
	( "tm_yday", ctypes.c_int ),
	( "tm_isdst", ctypes.c_int ),
	( "tm_gmtoff", ctypes.c_int64 ),
	( "tm_zone", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( itimerspec, [
	( "it_interval", timespec ),
	( "it_value", timespec ),
])

__freeze_rpythonic_struct( stat, [
	( "st_dev", ctypes.c_ulonglong ),
	( "__pad1", ctypes.c_uint16 ),
	( "__st_ino", ctypes.c_uint64 ),
	( "st_mode", ctypes.c_uint ),
	( "st_nlink", ctypes.c_uint ),
	( "st_uid", ctypes.c_uint ),
	( "st_gid", ctypes.c_uint ),
	( "st_rdev", ctypes.c_ulonglong ),
	( "__pad2", ctypes.c_uint16 ),
	( "st_size", ctypes.c_longlong ),
	( "st_blksize", ctypes.c_int64 ),
	( "st_blocks", ctypes.c_longlong ),
	( "st_atim", timespec ),
	( "st_mtim", timespec ),
	( "st_ctim", timespec ),
	( "st_ino", ctypes.c_ulonglong ),
])

__freeze_rpythonic_struct( stat64, [
	( "st_dev", ctypes.c_ulonglong ),
	( "__pad1", ctypes.c_uint ),
	( "__st_ino", ctypes.c_uint64 ),
	( "st_mode", ctypes.c_uint ),
	( "st_nlink", ctypes.c_uint ),
	( "st_uid", ctypes.c_uint ),
	( "st_gid", ctypes.c_uint ),
	( "st_rdev", ctypes.c_ulonglong ),
	( "__pad2", ctypes.c_uint ),
	( "st_size", ctypes.c_longlong ),
	( "st_blksize", ctypes.c_int64 ),
	( "st_blocks", ctypes.c_longlong ),
	( "st_atim", timespec ),
	( "st_mtim", timespec ),
	( "st_ctim", timespec ),
	( "st_ino", ctypes.c_ulonglong ),
])

__freeze_rpythonic_struct( _Py_atomic_address, [
	( "_value", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _Py_atomic_int, [
	( "_value", ctypes.c_int ),
])

__freeze_rpythonic_struct( _object, [
	( "ob_refcnt", ctypes.c_int ),
	( "ob_type", ctypes.POINTER(_typeobject) ),
])

__freeze_rpythonic_struct( PyVarObject, [
	( "ob_base", _object ),
	( "ob_size", ctypes.c_int ),
])

__freeze_rpythonic_struct( bufferinfo, [
	( "buf", ctypes.POINTER(ctypes.c_void_p) ),
	( "obj", ctypes.POINTER(_object) ),
	( "C_len", ctypes.c_int ),
	( "itemsize", ctypes.c_int ),
	( "readonly", ctypes.c_int ),
	( "ndim", ctypes.c_int ),
	( "format", ctypes.POINTER(ctypes.c_char) ),
	( "shape", ctypes.POINTER(ctypes.c_int) ),
	( "strides", ctypes.POINTER(ctypes.c_int) ),
	( "suboffsets", ctypes.POINTER(ctypes.c_int) ),
	( "smalltable", ( ctypes.c_int * 2 ) ),
	( "internal", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( PyNumberMethods, [
	( "nb_add", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)) ),
	( "nb_subtract", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)) ),
	( "nb_multiply", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)) ),
	( "nb_remainder", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)) ),
	( "nb_divmod", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)) ),
	( "nb_power", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)) ),
	( "nb_negative", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),)) ),
	( "nb_positive", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),)) ),
	( "nb_absolute", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),)) ),
	( "nb_bool", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),) ),
	( "nb_invert", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),)) ),
	( "nb_lshift", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)) ),
	( "nb_rshift", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)) ),
	( "nb_and", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)) ),
	( "nb_xor", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)) ),
	( "nb_or", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)) ),
	( "nb_int", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),)) ),
	( "nb_reserved", ctypes.POINTER(ctypes.c_void_p) ),
	( "nb_float", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),)) ),
	( "nb_inplace_add", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)) ),
	( "nb_inplace_subtract", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)) ),
	( "nb_inplace_multiply", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)) ),
	( "nb_inplace_remainder", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)) ),
	( "nb_inplace_power", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)) ),
	( "nb_inplace_lshift", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)) ),
	( "nb_inplace_rshift", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)) ),
	( "nb_inplace_and", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)) ),
	( "nb_inplace_xor", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)) ),
	( "nb_inplace_or", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)) ),
	( "nb_floor_divide", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)) ),
	( "nb_true_divide", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)) ),
	( "nb_inplace_floor_divide", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)) ),
	( "nb_inplace_true_divide", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)) ),
	( "nb_index", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),)) ),
])

__freeze_rpythonic_struct( PySequenceMethods, [
	( "sq_length", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),) ),
	( "sq_concat", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)) ),
	( "sq_repeat", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),ctypes.c_int,)) ),
	( "sq_item", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),ctypes.c_int,)) ),
	( "was_sq_slice", ctypes.POINTER(ctypes.c_void_p) ),
	( "sq_ass_item", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),) ),
	( "was_sq_ass_slice", ctypes.POINTER(ctypes.c_void_p) ),
	( "sq_contains", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),) ),
	( "sq_inplace_concat", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)) ),
	( "sq_inplace_repeat", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),ctypes.c_int,)) ),
])

__freeze_rpythonic_struct( PyMappingMethods, [
	( "mp_length", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),) ),
	( "mp_subscript", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)) ),
	( "mp_ass_subscript", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),) ),
])

__freeze_rpythonic_struct( PyBufferProcs, [
	( "bf_getbuffer", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.c_int,) ),
	( "bf_releasebuffer", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),) ),
])

__freeze_rpythonic_struct( PyMethodDef, [
	( "ml_name", ctypes.POINTER(ctypes.c_char) ),
	( "ml_meth", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)) ),
	( "ml_flags", ctypes.c_int ),
	( "ml_doc", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( PyMemberDef, [
])

__freeze_rpythonic_struct( PyGetSetDef, [
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "get", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)) ),
	( "set", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),) ),
	( "doc", ctypes.POINTER(ctypes.c_char) ),
	( "closure", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _typeobject, [
	( "ob_base", PyVarObject ),
	( "tp_name", ctypes.POINTER(ctypes.c_char) ),
	( "tp_basicsize", ctypes.c_int ),
	( "tp_itemsize", ctypes.c_int ),
	( "tp_dealloc", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),) ),
	( "tp_print", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.c_int,) ),
	( "tp_getattr", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),)) ),
	( "tp_setattr", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),) ),
	( "tp_reserved", ctypes.POINTER(ctypes.c_void_p) ),
	( "tp_repr", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),)) ),
	( "tp_as_number", ctypes.POINTER(PyNumberMethods) ),
	( "tp_as_sequence", ctypes.POINTER(PySequenceMethods) ),
	( "tp_as_mapping", ctypes.POINTER(PyMappingMethods) ),
	( "tp_hash", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),) ),
	( "tp_call", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)) ),
	( "tp_str", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),)) ),
	( "tp_getattro", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)) ),
	( "tp_setattro", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),) ),
	( "tp_as_buffer", ctypes.POINTER(PyBufferProcs) ),
	( "tp_flags", ctypes.c_long ),
	( "tp_doc", ctypes.POINTER(ctypes.c_char) ),
	( "tp_traverse", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),),ctypes.POINTER(ctypes.c_void_p),) ),
	( "tp_clear", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),) ),
	( "tp_richcompare", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.c_int,)) ),
	( "tp_weaklistoffset", ctypes.c_int ),
	( "tp_iter", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),)) ),
	( "tp_iternext", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),)) ),
	( "tp_methods", ctypes.POINTER(PyMethodDef) ),
	( "tp_members", ctypes.POINTER(PyMemberDef) ),
	( "tp_getset", ctypes.POINTER(PyGetSetDef) ),
	( "tp_base", ctypes.POINTER(_typeobject) ),
	( "tp_dict", ctypes.POINTER(_object) ),
	( "tp_descr_get", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)) ),
	( "tp_descr_set", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),) ),
	( "tp_dictoffset", ctypes.c_int ),
	( "tp_init", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),) ),
	( "tp_alloc", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(_typeobject),ctypes.c_int,)) ),
	( "tp_new", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(_typeobject),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)) ),
	( "tp_free", ctypes.CFUNCTYPE(ctypes.c_void_p, ) ),
	( "tp_is_gc", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),) ),
	( "tp_bases", ctypes.POINTER(_object) ),
	( "tp_mro", ctypes.POINTER(_object) ),
	( "tp_cache", ctypes.POINTER(_object) ),
	( "tp_subclasses", ctypes.POINTER(_object) ),
	( "tp_weaklist", ctypes.POINTER(_object) ),
	( "tp_del", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),) ),
	( "tp_version_tag", ctypes.c_uint ),
])

__freeze_rpythonic_struct( PyType_Slot, [
	( "slot", ctypes.c_int ),
	( "pfunc", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( PyType_Spec, [
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "basicsize", ctypes.c_int ),
	( "itemsize", ctypes.c_int ),
	( "flags", ctypes.c_int ),
	( "slots", ctypes.POINTER(PyType_Slot) ),
])

__freeze_rpythonic_struct( _heaptypeobject, [
	( "ht_type", _typeobject ),
	( "as_number", PyNumberMethods ),
	( "as_mapping", PyMappingMethods ),
	( "as_sequence", PySequenceMethods ),
	( "as_buffer", PyBufferProcs ),
	( "ht_name", ctypes.POINTER(_object) ),
	( "ht_slots", ctypes.POINTER(_object) ),
])

__freeze_rpythonic_struct( _gc_head, [
	( "gc", gc ),
	( "dummy", ctypes.c_double ),
])

__freeze_rpythonic_struct( gc, [
	( "gc_next", ctypes.POINTER(_gc_head) ),
	( "gc_prev", ctypes.POINTER(_gc_head) ),
	( "gc_refs", ctypes.c_int ),
])

__freeze_rpythonic_struct( PyByteArrayObject, [
	( "ob_base", PyVarObject ),
	( "ob_exports", ctypes.c_int ),
	( "ob_alloc", ctypes.c_int ),
	( "ob_bytes", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( PyBytesObject, [
	( "ob_base", PyVarObject ),
	( "ob_shash", ctypes.c_int ),
	( "ob_sval", ( ctypes.c_char * 1 ) ),
])

__freeze_rpythonic_struct( PyUnicodeObject, [
	( "ob_base", _object ),
	( "length", ctypes.c_int ),
	( "C_str", ctypes.POINTER(ctypes.c_ulong) ),
	( "hash", ctypes.c_int ),
	( "state", ctypes.c_int ),
	( "defenc", ctypes.POINTER(_object) ),
])

__freeze_rpythonic_struct( _longobject, [
	( "ob_base", PyVarObject ),
	( "ob_digit", ( ctypes.c_ushort * 1 ) ),
])

__freeze_rpythonic_struct( PyFloatObject, [
	( "ob_base", _object ),
	( "ob_fval", ctypes.c_double ),
])

__freeze_rpythonic_struct( Py_complex, [
	( "real", ctypes.c_double ),
	( "imag", ctypes.c_double ),
])

__freeze_rpythonic_struct( PyComplexObject, [
	( "ob_base", _object ),
	( "cval", Py_complex ),
])

__freeze_rpythonic_struct( PyMemoryViewObject, [
	( "ob_base", _object ),
	( "view", bufferinfo ),
])

__freeze_rpythonic_struct( PyTupleObject, [
	( "ob_base", PyVarObject ),
	( "ob_item", ctypes.POINTER(( _object * 1 )) ),
])

__freeze_rpythonic_struct( PyListObject, [
	( "ob_base", PyVarObject ),
	( "ob_item", ctypes.POINTER(ctypes.POINTER(_object)) ),
	( "allocated", ctypes.c_int ),
])

__freeze_rpythonic_struct( PyDictEntry, [
	( "me_hash", ctypes.c_int ),
	( "me_key", ctypes.POINTER(_object) ),
	( "me_value", ctypes.POINTER(_object) ),
])

__freeze_rpythonic_struct( _dictobject, [
	( "ob_base", _object ),
	( "ma_fill", ctypes.c_int ),
	( "ma_used", ctypes.c_int ),
	( "ma_mask", ctypes.c_int ),
	( "ma_table", ctypes.POINTER(PyDictEntry) ),
	( "ma_lookup", ctypes.POINTER(ctypes.c_void_p) ),
	( "ma_smalltable", ( PyDictEntry * 8 ) ),
])

__freeze_rpythonic_struct( setentry, [
	( "hash", ctypes.c_int ),
	( "key", ctypes.POINTER(_object) ),
])

__freeze_rpythonic_struct( _setobject, [
	( "ob_base", _object ),
	( "fill", ctypes.c_int ),
	( "used", ctypes.c_int ),
	( "mask", ctypes.c_int ),
	( "table", ctypes.POINTER(setentry) ),
	( "lookup", ctypes.POINTER(ctypes.c_void_p) ),
	( "smalltable", ( setentry * 8 ) ),
	( "hash", ctypes.c_int ),
	( "weakreflist", ctypes.POINTER(_object) ),
])

__freeze_rpythonic_struct( PyCFunctionObject, [
	( "ob_base", _object ),
	( "m_ml", ctypes.POINTER(PyMethodDef) ),
	( "m_self", ctypes.POINTER(_object) ),
	( "m_module", ctypes.POINTER(_object) ),
])

__freeze_rpythonic_struct( PyModuleDef_Base, [
	( "ob_base", _object ),
	( "m_init", ctypes.POINTER(ctypes.c_void_p) ),
	( "m_index", ctypes.c_int ),
	( "m_copy", ctypes.POINTER(_object) ),
])

__freeze_rpythonic_struct( PyModuleDef, [
	( "m_base", PyModuleDef_Base ),
	( "m_name", ctypes.POINTER(ctypes.c_char) ),
	( "m_doc", ctypes.POINTER(ctypes.c_char) ),
	( "m_size", ctypes.c_int ),
	( "m_methods", ctypes.POINTER(PyMethodDef) ),
	( "m_reload", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),) ),
	( "m_traverse", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),),ctypes.POINTER(ctypes.c_void_p),) ),
	( "m_clear", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),) ),
	( "m_free", ctypes.CFUNCTYPE(ctypes.c_void_p, ) ),
])

__freeze_rpythonic_struct( PyFunctionObject, [
	( "ob_base", _object ),
	( "func_code", ctypes.POINTER(_object) ),
	( "func_globals", ctypes.POINTER(_object) ),
	( "func_defaults", ctypes.POINTER(_object) ),
	( "func_kwdefaults", ctypes.POINTER(_object) ),
	( "func_closure", ctypes.POINTER(_object) ),
	( "func_doc", ctypes.POINTER(_object) ),
	( "func_name", ctypes.POINTER(_object) ),
	( "func_dict", ctypes.POINTER(_object) ),
	( "func_weakreflist", ctypes.POINTER(_object) ),
	( "func_module", ctypes.POINTER(_object) ),
	( "func_annotations", ctypes.POINTER(_object) ),
])

__freeze_rpythonic_struct( PyMethodObject, [
	( "ob_base", _object ),
	( "im_func", ctypes.POINTER(_object) ),
	( "im_self", ctypes.POINTER(_object) ),
	( "im_weakreflist", ctypes.POINTER(_object) ),
])

__freeze_rpythonic_struct( PyInstanceMethodObject, [
	( "ob_base", _object ),
	( "func", ctypes.POINTER(_object) ),
])

__freeze_rpythonic_struct( _frame, [
])

__freeze_rpythonic_struct( _traceback, [
	( "ob_base", _object ),
	( "tb_next", ctypes.POINTER(_traceback) ),
	( "tb_frame", ctypes.POINTER(_frame) ),
	( "tb_lasti", ctypes.c_int ),
	( "tb_lineno", ctypes.c_int ),
])

__freeze_rpythonic_struct( PySliceObject, [
	( "ob_base", _object ),
	( "start", ctypes.POINTER(_object) ),
	( "stop", ctypes.POINTER(_object) ),
	( "step", ctypes.POINTER(_object) ),
])

__freeze_rpythonic_struct( PyCellObject, [
	( "ob_base", _object ),
	( "ob_ref", ctypes.POINTER(_object) ),
])

__freeze_rpythonic_struct( PyGenObject, [
	( "ob_base", _object ),
	( "gi_frame", ctypes.POINTER(_frame) ),
	( "gi_running", ctypes.c_int ),
	( "gi_code", ctypes.POINTER(_object) ),
	( "gi_weakreflist", ctypes.POINTER(_object) ),
])

__freeze_rpythonic_struct( wrapperbase, [
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "offset", ctypes.c_int ),
	( "function", ctypes.POINTER(ctypes.c_void_p) ),
	( "wrapper", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(_object),ctypes.POINTER(_object),ctypes.POINTER(ctypes.c_void_p),)) ),
	( "doc", ctypes.POINTER(ctypes.c_char) ),
	( "flags", ctypes.c_int ),
	( "name_strobj", ctypes.POINTER(_object) ),
])

__freeze_rpythonic_struct( PyDescrObject, [
	( "ob_base", _object ),
	( "d_type", ctypes.POINTER(_typeobject) ),
	( "d_name", ctypes.POINTER(_object) ),
])

__freeze_rpythonic_struct( PyMethodDescrObject, [
	( "d_common", PyDescrObject ),
	( "d_method", ctypes.POINTER(PyMethodDef) ),
])

__freeze_rpythonic_struct( PyMemberDescrObject, [
	( "d_common", PyDescrObject ),
	( "d_member", ctypes.POINTER(PyMemberDef) ),
])

__freeze_rpythonic_struct( PyGetSetDescrObject, [
	( "d_common", PyDescrObject ),
	( "d_getset", ctypes.POINTER(PyGetSetDef) ),
])

__freeze_rpythonic_struct( PyWrapperDescrObject, [
	( "d_common", PyDescrObject ),
	( "d_base", ctypes.POINTER(wrapperbase) ),
	( "d_wrapped", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _PyWeakReference, [
	( "ob_base", _object ),
	( "wr_object", ctypes.POINTER(_object) ),
	( "wr_callback", ctypes.POINTER(_object) ),
	( "hash", ctypes.c_int ),
	( "wr_prev", ctypes.POINTER(_PyWeakReference) ),
	( "wr_next", ctypes.POINTER(_PyWeakReference) ),
])

__freeze_rpythonic_struct( PyStructSequence_Field, [
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "doc", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( PyStructSequence_Desc, [
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "doc", ctypes.POINTER(ctypes.c_char) ),
	( "fields", ctypes.POINTER(PyStructSequence_Field) ),
	( "n_in_sequence", ctypes.c_int ),
])

__freeze_rpythonic_struct( PyBaseExceptionObject, [
	( "ob_base", _object ),
	( "C_dict", ctypes.POINTER(_object) ),
	( "args", ctypes.POINTER(_object) ),
	( "traceback", ctypes.POINTER(_object) ),
	( "context", ctypes.POINTER(_object) ),
	( "cause", ctypes.POINTER(_object) ),
])

__freeze_rpythonic_struct( PySyntaxErrorObject, [
	( "ob_base", _object ),
	( "C_dict", ctypes.POINTER(_object) ),
	( "args", ctypes.POINTER(_object) ),
	( "traceback", ctypes.POINTER(_object) ),
	( "context", ctypes.POINTER(_object) ),
	( "cause", ctypes.POINTER(_object) ),
	( "msg", ctypes.POINTER(_object) ),
	( "filename", ctypes.POINTER(_object) ),
	( "lineno", ctypes.POINTER(_object) ),
	( "offset", ctypes.POINTER(_object) ),
	( "text", ctypes.POINTER(_object) ),
	( "print_file_and_line", ctypes.POINTER(_object) ),
])

__freeze_rpythonic_struct( PyUnicodeErrorObject, [
	( "ob_base", _object ),
	( "C_dict", ctypes.POINTER(_object) ),
	( "args", ctypes.POINTER(_object) ),
	( "traceback", ctypes.POINTER(_object) ),
	( "context", ctypes.POINTER(_object) ),
	( "cause", ctypes.POINTER(_object) ),
	( "encoding", ctypes.POINTER(_object) ),
	( "C_object", ctypes.POINTER(_object) ),
	( "start", ctypes.c_int ),
	( "end", ctypes.c_int ),
	( "reason", ctypes.POINTER(_object) ),
])

__freeze_rpythonic_struct( PySystemExitObject, [
	( "ob_base", _object ),
	( "C_dict", ctypes.POINTER(_object) ),
	( "args", ctypes.POINTER(_object) ),
	( "traceback", ctypes.POINTER(_object) ),
	( "context", ctypes.POINTER(_object) ),
	( "cause", ctypes.POINTER(_object) ),
	( "code", ctypes.POINTER(_object) ),
])

__freeze_rpythonic_struct( PyEnvironmentErrorObject, [
	( "ob_base", _object ),
	( "C_dict", ctypes.POINTER(_object) ),
	( "args", ctypes.POINTER(_object) ),
	( "traceback", ctypes.POINTER(_object) ),
	( "context", ctypes.POINTER(_object) ),
	( "cause", ctypes.POINTER(_object) ),
	( "myerrno", ctypes.POINTER(_object) ),
	( "strerror", ctypes.POINTER(_object) ),
	( "filename", ctypes.POINTER(_object) ),
])

__freeze_rpythonic_struct( _is, [
	( "next", ctypes.POINTER(_is) ),
	( "tstate_head", ctypes.POINTER(_ts) ),
	( "modules", ctypes.POINTER(_object) ),
	( "modules_by_index", ctypes.POINTER(_object) ),
	( "sysdict", ctypes.POINTER(_object) ),
	( "builtins", ctypes.POINTER(_object) ),
	( "modules_reloading", ctypes.POINTER(_object) ),
	( "codec_search_path", ctypes.POINTER(_object) ),
	( "codec_search_cache", ctypes.POINTER(_object) ),
	( "codec_error_registry", ctypes.POINTER(_object) ),
	( "codecs_initialized", ctypes.c_int ),
	( "dlopenflags", ctypes.c_int ),
])

__freeze_rpythonic_struct( _ts, [
	( "next", ctypes.POINTER(_ts) ),
	( "interp", ctypes.POINTER(_is) ),
	( "frame", ctypes.POINTER(_frame) ),
	( "recursion_depth", ctypes.c_int ),
	( "overflowed", ctypes.c_char ),
	( "recursion_critical", ctypes.c_char ),
	( "tracing", ctypes.c_int ),
	( "use_tracing", ctypes.c_int ),
	( "c_profilefunc", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_frame),ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),) ),
	( "c_tracefunc", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_frame),ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),) ),
	( "c_profileobj", ctypes.POINTER(_object) ),
	( "c_traceobj", ctypes.POINTER(_object) ),
	( "curexc_type", ctypes.POINTER(_object) ),
	( "curexc_value", ctypes.POINTER(_object) ),
	( "curexc_traceback", ctypes.POINTER(_object) ),
	( "exc_type", ctypes.POINTER(_object) ),
	( "exc_value", ctypes.POINTER(_object) ),
	( "exc_traceback", ctypes.POINTER(_object) ),
	( "C_dict", ctypes.POINTER(_object) ),
	( "tick_counter", ctypes.c_int ),
	( "gilstate_counter", ctypes.c_int ),
	( "async_exc", ctypes.POINTER(_object) ),
	( "thread_id", ctypes.c_long ),
])

__freeze_rpythonic_struct( _arena, [
])

__freeze_rpythonic_struct( PyCompilerFlags, [
	( "cf_flags", ctypes.c_int ),
])

__freeze_rpythonic_struct( _mod, [
])

__freeze_rpythonic_struct( _node, [
])

__freeze_rpythonic_struct( symtable, [
])

__freeze_rpythonic_struct( _inittab, [
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "initfunc", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _frozen, [
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "code", ctypes.POINTER(ctypes.c_ubyte) ),
	( "size", ctypes.c_int ),
])

__freeze_rpythonic_struct( PyCodeObject, [
	( "ob_base", _object ),
	( "co_argcount", ctypes.c_int ),
	( "co_kwonlyargcount", ctypes.c_int ),
	( "co_nlocals", ctypes.c_int ),
	( "co_stacksize", ctypes.c_int ),
	( "co_flags", ctypes.c_int ),
	( "co_code", ctypes.POINTER(_object) ),
	( "co_consts", ctypes.POINTER(_object) ),
	( "co_names", ctypes.POINTER(_object) ),
	( "co_varnames", ctypes.POINTER(_object) ),
	( "co_freevars", ctypes.POINTER(_object) ),
	( "co_cellvars", ctypes.POINTER(_object) ),
	( "co_filename", ctypes.POINTER(_object) ),
	( "co_name", ctypes.POINTER(_object) ),
	( "co_firstlineno", ctypes.c_int ),
	( "co_lnotab", ctypes.POINTER(_object) ),
	( "co_zombieframe", ctypes.POINTER(ctypes.c_void_p) ),
	( "co_weakreflist", ctypes.POINTER(_object) ),
])

__freeze_rpythonic_struct( _addr_pair, [
	( "ap_lower", ctypes.c_int ),
	( "ap_upper", ctypes.c_int ),
])

__freeze_rpythonic_struct( PyFutureFeatures, [
	( "ff_features", ctypes.c_int ),
	( "ff_lineno", ctypes.c_int ),
])

__freeze_rpythonic_struct( sigval, [
	( "sival_int", ctypes.c_int ),
	( "sival_ptr", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _kill, [
	( "si_pid", ctypes.c_int ),
	( "si_uid", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _timer, [
	( "si_tid", ctypes.c_int ),
	( "si_overrun", ctypes.c_int ),
	( "si_sigval", sigval ),
])

__freeze_rpythonic_struct( _rt, [
	( "si_pid", ctypes.c_int ),
	( "si_uid", ctypes.c_uint ),
	( "si_sigval", sigval ),
])

__freeze_rpythonic_struct( _sigchld, [
	( "si_pid", ctypes.c_int ),
	( "si_uid", ctypes.c_uint ),
	( "si_status", ctypes.c_int ),
	( "si_utime", ctypes.c_int64 ),
	( "si_stime", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( _sigfault, [
	( "si_addr", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _sigpoll, [
	( "si_band", ctypes.c_int64 ),
	( "si_fd", ctypes.c_int ),
])

__freeze_rpythonic_struct( _sifields, [
	( "_pad", ctypes.c_int ),
	( "_kill", _kill ),
	( "_timer", _timer ),
	( "_rt", _rt ),
	( "_sigchld", _sigchld ),
	( "_sigfault", _sigfault ),
	( "_sigpoll", _sigpoll ),
])

__freeze_rpythonic_struct( siginfo, [
	( "si_signo", ctypes.c_int ),
	( "si_errno", ctypes.c_int ),
	( "si_code", ctypes.c_int ),
	( "_sifields", _sifields ),
])

__freeze_rpythonic_struct( _sigev_thread, [
	( "_function", ctypes.c_void_p ),
	( "_attribute", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _sigev_un, [
	( "_pad", ctypes.c_int ),
	( "_tid", ctypes.c_int ),
	( "_sigev_thread", _sigev_thread ),
])

__freeze_rpythonic_struct( sigevent, [
	( "sigev_value", sigval ),
	( "sigev_signo", ctypes.c_int ),
	( "sigev_notify", ctypes.c_int ),
	( "_sigev_un", _sigev_un ),
])

__freeze_rpythonic_struct( __sigaction_handler, [
	( "sa_handler", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,) ),
	( "sa_sigaction", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( sigaction, [
	( "__sigaction_handler", __sigaction_handler ),
	( "sa_mask", __sigset_t ),
	( "sa_flags", ctypes.c_int ),
	( "sa_restorer", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( sigvec, [
	( "sv_handler", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,) ),
	( "sv_mask", ctypes.c_int ),
	( "sv_flags", ctypes.c_int ),
])

__freeze_rpythonic_struct( _fpreg, [
	( "significand", ( ctypes.c_ushort * 4 ) ),
	( "exponent", ctypes.c_ushort ),
])

__freeze_rpythonic_struct( _fpxreg, [
	( "significand", ( ctypes.c_ushort * 4 ) ),
	( "exponent", ctypes.c_ushort ),
	( "padding", ( ctypes.c_ushort * 3 ) ),
])

__freeze_rpythonic_struct( _xmmreg, [
	( "element", ( ctypes.c_uint * 4 ) ),
])

__freeze_rpythonic_struct( _fpstate, [
	( "cw", ctypes.c_uint ),
	( "sw", ctypes.c_uint ),
	( "tag", ctypes.c_uint ),
	( "ipoff", ctypes.c_uint ),
	( "cssel", ctypes.c_uint ),
	( "dataoff", ctypes.c_uint ),
	( "datasel", ctypes.c_uint ),
	( "_st", ( _fpreg * 8 ) ),
	( "status", ctypes.c_ushort ),
	( "magic", ctypes.c_ushort ),
	( "_fxsr_env", ( ctypes.c_uint * 6 ) ),
	( "mxcsr", ctypes.c_uint ),
	( "reserved", ctypes.c_uint ),
	( "_fxsr_st", ( _fpxreg * 8 ) ),
	( "_xmm", ( _xmmreg * 8 ) ),
	( "padding", ( ctypes.c_uint * 56 ) ),
])

__freeze_rpythonic_struct( sigcontext, [
	( "gs", ctypes.c_ushort ),
	( "__gsh", ctypes.c_ushort ),
	( "fs", ctypes.c_ushort ),
	( "__fsh", ctypes.c_ushort ),
	( "es", ctypes.c_ushort ),
	( "__esh", ctypes.c_ushort ),
	( "ds", ctypes.c_ushort ),
	( "__dsh", ctypes.c_ushort ),
	( "edi", ctypes.c_ulong ),
	( "esi", ctypes.c_ulong ),
	( "ebp", ctypes.c_ulong ),
	( "esp", ctypes.c_ulong ),
	( "ebx", ctypes.c_ulong ),
	( "edx", ctypes.c_ulong ),
	( "ecx", ctypes.c_ulong ),
	( "eax", ctypes.c_ulong ),
	( "trapno", ctypes.c_ulong ),
	( "err", ctypes.c_ulong ),
	( "eip", ctypes.c_ulong ),
	( "cs", ctypes.c_ushort ),
	( "__csh", ctypes.c_ushort ),
	( "eflags", ctypes.c_ulong ),
	( "esp_at_signal", ctypes.c_ulong ),
	( "ss", ctypes.c_ushort ),
	( "__ssh", ctypes.c_ushort ),
	( "fpstate", ctypes.POINTER(_fpstate) ),
	( "oldmask", ctypes.c_ulong ),
	( "cr2", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( sigstack, [
	( "ss_sp", ctypes.POINTER(ctypes.c_void_p) ),
	( "ss_onstack", ctypes.c_int ),
])

__freeze_rpythonic_struct( sigaltstack, [
	( "ss_sp", ctypes.POINTER(ctypes.c_void_p) ),
	( "ss_flags", ctypes.c_int ),
	( "ss_size", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _libc_fpreg, [
	( "significand", ( ctypes.c_uint16 * 4 ) ),
	( "exponent", ctypes.c_uint16 ),
])

__freeze_rpythonic_struct( _libc_fpstate, [
	( "cw", ctypes.c_uint64 ),
	( "sw", ctypes.c_uint64 ),
	( "tag", ctypes.c_uint64 ),
	( "ipoff", ctypes.c_uint64 ),
	( "cssel", ctypes.c_uint64 ),
	( "dataoff", ctypes.c_uint64 ),
	( "datasel", ctypes.c_uint64 ),
	( "_st", ( _libc_fpreg * 8 ) ),
	( "status", ctypes.c_uint64 ),
])

__freeze_rpythonic_struct( mcontext_t, [
	( "gregs", ( ctypes.c_int * 19 ) ),
	( "fpregs", ctypes.POINTER(_libc_fpstate) ),
	( "oldmask", ctypes.c_uint64 ),
	( "cr2", ctypes.c_uint64 ),
])

__freeze_rpythonic_struct( ucontext, [
	( "uc_flags", ctypes.c_uint64 ),
	( "uc_link", ctypes.POINTER(ucontext) ),
	( "uc_stack", sigaltstack ),
	( "uc_mcontext", mcontext_t ),
	( "uc_sigmask", __sigset_t ),
	( "__fpregs_mem", _libc_fpstate ),
])

__freeze_rpythonic_struct( __jmp_buf_tag, [
	( "__jmpbuf", ( ctypes.c_int * 6 ) ),
	( "__mask_was_saved", ctypes.c_int ),
	( "__saved_mask", __sigset_t ),
])

## wrapper functions ##
_IO_cookie_init = _rpythonic_function_(		"_IO_cookie_init", ctypes.c_void_p, [
	("__cfile",		ctypes.POINTER(_IO_cookie_file)),
	("__read_write",		ctypes.c_int),
	("__cookie",		ctypes.POINTER(ctypes.c_void_p)),
	("__fns",		_IO_cookie_io_functions_t),] )

_IO_getc = _rpythonic_function_(		"_IO_getc", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_putc = _rpythonic_function_(		"_IO_putc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_feof = _rpythonic_function_(		"_IO_feof", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_ferror = _rpythonic_function_(		"_IO_ferror", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_peekc_locked = _rpythonic_function_(		"_IO_peekc_locked", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_flockfile = _rpythonic_function_(		"_IO_flockfile", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_IO_funlockfile = _rpythonic_function_(		"_IO_funlockfile", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_IO_ftrylockfile = _rpythonic_function_(		"_IO_ftrylockfile", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_IO_vfscanf = _rpythonic_function_(		"_IO_vfscanf", ctypes.c_int, [
	("__restrict",		ctypes.POINTER(_IO_FILE)),
	("__restrict",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_char),
	("__restrict",		ctypes.POINTER(ctypes.c_int)),] )

_IO_vfprintf = _rpythonic_function_(		"_IO_vfprintf", ctypes.c_int, [
	("__restrict",		ctypes.POINTER(_IO_FILE)),
	("__restrict",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_char),] )

_IO_padn = _rpythonic_function_(		"_IO_padn", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

_IO_sgetn = _rpythonic_function_(		"_IO_sgetn", ctypes.c_uint, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_uint),] )

_IO_seekoff = _rpythonic_function_(		"_IO_seekoff", ctypes.c_longlong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_longlong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

_IO_seekpos = _rpythonic_function_(		"_IO_seekpos", ctypes.c_longlong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_longlong),
	("none",		ctypes.c_int),] )

_IO_free_backup_area = _rpythonic_function_(		"_IO_free_backup_area", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

remove = _rpythonic_function_(		"remove", ctypes.c_int, [
	("__filename",		ctypes.POINTER(ctypes.c_char)),] )

rename = _rpythonic_function_(		"rename", ctypes.c_int, [
	("__old",		ctypes.POINTER(ctypes.c_char)),
	("__new",		ctypes.POINTER(ctypes.c_char)),] )

renameat = _rpythonic_function_(		"renameat", ctypes.c_int, [
	("__oldfd",		ctypes.c_int),
	("__old",		ctypes.POINTER(ctypes.c_char)),
	("__newfd",		ctypes.c_int),
	("__new",		ctypes.POINTER(ctypes.c_char)),] )

tmpfile = _rpythonic_function_(		"tmpfile", ctypes.POINTER(_IO_FILE), [] )

tmpfile64 = _rpythonic_function_(		"tmpfile64", ctypes.POINTER(_IO_FILE), [] )

tmpnam = _rpythonic_function_(		"tmpnam", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

tmpnam_r = _rpythonic_function_(		"tmpnam_r", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

tempnam = _rpythonic_function_(		"tempnam", ctypes.POINTER(ctypes.c_char), [
	("__dir",		ctypes.POINTER(ctypes.c_char)),
	("__pfx",		ctypes.POINTER(ctypes.c_char)),] )

fclose = _rpythonic_function_(		"fclose", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fflush = _rpythonic_function_(		"fflush", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fflush_unlocked = _rpythonic_function_(		"fflush_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fcloseall = _rpythonic_function_(		"fcloseall", ctypes.c_int, [] )

fopen = _rpythonic_function_(		"fopen", ctypes.POINTER(_IO_FILE), [
	("__filename",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

freopen = _rpythonic_function_(		"freopen", ctypes.POINTER(_IO_FILE), [
	("__filename",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.POINTER(ctypes.c_char)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fopen64 = _rpythonic_function_(		"fopen64", ctypes.POINTER(_IO_FILE), [
	("__filename",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

freopen64 = _rpythonic_function_(		"freopen64", ctypes.POINTER(_IO_FILE), [
	("__filename",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.POINTER(ctypes.c_char)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fdopen = _rpythonic_function_(		"fdopen", ctypes.POINTER(_IO_FILE), [
	("__fd",		ctypes.c_int),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

fopencookie = _rpythonic_function_(		"fopencookie", ctypes.POINTER(_IO_FILE), [
	("__magic_cookie",		ctypes.POINTER(ctypes.c_void_p)),
	("__modes",		ctypes.POINTER(ctypes.c_char)),
	("__io_funcs",		_IO_cookie_io_functions_t),] )

fmemopen = _rpythonic_function_(		"fmemopen", ctypes.POINTER(_IO_FILE), [
	("__s",		ctypes.POINTER(ctypes.c_void_p)),
	("__len",		ctypes.c_uint),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

open_memstream = _rpythonic_function_(		"open_memstream", ctypes.POINTER(_IO_FILE), [
	("__bufloc",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__sizeloc",		ctypes.POINTER(ctypes.c_uint)),] )

setbuf = _rpythonic_function_(		"setbuf", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

setvbuf = _rpythonic_function_(		"setvbuf", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.c_int),
	("__n",		ctypes.c_uint),] )

setbuffer = _rpythonic_function_(		"setbuffer", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__size",		ctypes.c_uint),] )

setlinebuf = _rpythonic_function_(		"setlinebuf", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fprintf = _rpythonic_function_(		"fprintf", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

printf = _rpythonic_function_(		"printf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

sprintf = _rpythonic_function_(		"sprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

vfprintf = _rpythonic_function_(		"vfprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vprintf = _rpythonic_function_(		"vprintf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vsprintf = _rpythonic_function_(		"vsprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

snprintf = _rpythonic_function_(		"snprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__maxlen",		ctypes.c_uint),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

vsnprintf = _rpythonic_function_(		"vsnprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__maxlen",		ctypes.c_uint),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vasprintf = _rpythonic_function_(		"vasprintf", ctypes.c_int, [
	("__ptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__f",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

asprintf = _rpythonic_function_(		"asprintf", ctypes.c_int, [
	("__ptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__fmt",		ctypes.POINTER(ctypes.c_char)),] )

vdprintf = _rpythonic_function_(		"vdprintf", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__fmt",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

dprintf = _rpythonic_function_(		"dprintf", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__fmt",		ctypes.POINTER(ctypes.c_char)),] )

fscanf = _rpythonic_function_(		"fscanf", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

scanf = _rpythonic_function_(		"scanf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

sscanf = _rpythonic_function_(		"sscanf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

vfscanf = _rpythonic_function_(		"vfscanf", ctypes.c_int, [
	("__s",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vscanf = _rpythonic_function_(		"vscanf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vsscanf = _rpythonic_function_(		"vsscanf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

fgetc = _rpythonic_function_(		"fgetc", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getc = _rpythonic_function_(		"getc", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getchar = _rpythonic_function_(		"getchar", ctypes.c_int, [] )

getc_unlocked = _rpythonic_function_(		"getc_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getchar_unlocked = _rpythonic_function_(		"getchar_unlocked", ctypes.c_int, [] )

fgetc_unlocked = _rpythonic_function_(		"fgetc_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fputc = _rpythonic_function_(		"fputc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putc = _rpythonic_function_(		"putc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putchar = _rpythonic_function_(		"putchar", ctypes.c_int, [
	("__c",		ctypes.c_int),] )

fputc_unlocked = _rpythonic_function_(		"fputc_unlocked", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putc_unlocked = _rpythonic_function_(		"putc_unlocked", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putchar_unlocked = _rpythonic_function_(		"putchar_unlocked", ctypes.c_int, [
	("__c",		ctypes.c_int),] )

getw = _rpythonic_function_(		"getw", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putw = _rpythonic_function_(		"putw", ctypes.c_int, [
	("__w",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fgets = _rpythonic_function_(		"fgets", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

gets = _rpythonic_function_(		"gets", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

fgets_unlocked = _rpythonic_function_(		"fgets_unlocked", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getdelim = _rpythonic_function_(		"getdelim", ctypes.c_int, [
	("__lineptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__n",		ctypes.POINTER(ctypes.c_uint)),
	("__delimiter",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getline = _rpythonic_function_(		"getline", ctypes.c_int, [
	("__lineptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__n",		ctypes.POINTER(ctypes.c_uint)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fputs = _rpythonic_function_(		"fputs", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

puts = _rpythonic_function_(		"puts", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

ungetc = _rpythonic_function_(		"ungetc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fread = _rpythonic_function_(		"fread", ctypes.c_uint, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint),
	("__n",		ctypes.c_uint),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fwrite = _rpythonic_function_(		"fwrite", ctypes.c_uint, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint),
	("__n",		ctypes.c_uint),
	("__s",		ctypes.POINTER(_IO_FILE)),] )

fputs_unlocked = _rpythonic_function_(		"fputs_unlocked", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fread_unlocked = _rpythonic_function_(		"fread_unlocked", ctypes.c_uint, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint),
	("__n",		ctypes.c_uint),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fwrite_unlocked = _rpythonic_function_(		"fwrite_unlocked", ctypes.c_uint, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint),
	("__n",		ctypes.c_uint),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fseek = _rpythonic_function_(		"fseek", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__off",		ctypes.c_int64),
	("__whence",		ctypes.c_int),] )

ftell = _rpythonic_function_(		"ftell", ctypes.c_int64, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

rewind = _rpythonic_function_(		"rewind", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fseeko = _rpythonic_function_(		"fseeko", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__off",		ctypes.c_longlong),
	("__whence",		ctypes.c_int),] )

ftello = _rpythonic_function_(		"ftello", ctypes.c_longlong, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fgetpos = _rpythonic_function_(		"fgetpos", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__pos",		ctypes.POINTER(_G_fpos64_t)),] )

fsetpos = _rpythonic_function_(		"fsetpos", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__pos",		ctypes.POINTER(_G_fpos64_t)),] )

fseeko64 = _rpythonic_function_(		"fseeko64", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__off",		ctypes.c_longlong),
	("__whence",		ctypes.c_int),] )

ftello64 = _rpythonic_function_(		"ftello64", ctypes.c_longlong, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fgetpos64 = _rpythonic_function_(		"fgetpos64", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__pos",		ctypes.POINTER(_G_fpos64_t)),] )

fsetpos64 = _rpythonic_function_(		"fsetpos64", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__pos",		ctypes.POINTER(_G_fpos64_t)),] )

clearerr = _rpythonic_function_(		"clearerr", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

feof = _rpythonic_function_(		"feof", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ferror = _rpythonic_function_(		"ferror", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

clearerr_unlocked = _rpythonic_function_(		"clearerr_unlocked", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

feof_unlocked = _rpythonic_function_(		"feof_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ferror_unlocked = _rpythonic_function_(		"ferror_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

perror = _rpythonic_function_(		"perror", ctypes.c_void_p, [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

fileno = _rpythonic_function_(		"fileno", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fileno_unlocked = _rpythonic_function_(		"fileno_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

popen = _rpythonic_function_(		"popen", ctypes.POINTER(_IO_FILE), [
	("__command",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

pclose = _rpythonic_function_(		"pclose", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ctermid = _rpythonic_function_(		"ctermid", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

cuserid = _rpythonic_function_(		"cuserid", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

obstack_printf = _rpythonic_function_(		"obstack_printf", ctypes.c_int, [
	("__obstack",		ctypes.POINTER(obstack)),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

obstack_vprintf = _rpythonic_function_(		"obstack_vprintf", ctypes.c_int, [
	("__obstack",		ctypes.POINTER(obstack)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__args",		ctypes.c_char),] )

flockfile = _rpythonic_function_(		"flockfile", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ftrylockfile = _rpythonic_function_(		"ftrylockfile", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

funlockfile = _rpythonic_function_(		"funlockfile", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

memcpy = _rpythonic_function_(		"memcpy", ctypes.POINTER(ctypes.c_void_p), [
	("__dest",		ctypes.POINTER(ctypes.c_void_p)),
	("__src",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),] )

memmove = _rpythonic_function_(		"memmove", ctypes.POINTER(ctypes.c_void_p), [
	("__dest",		ctypes.POINTER(ctypes.c_void_p)),
	("__src",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),] )

memccpy = _rpythonic_function_(		"memccpy", ctypes.POINTER(ctypes.c_void_p), [
	("__dest",		ctypes.POINTER(ctypes.c_void_p)),
	("__src",		ctypes.POINTER(ctypes.c_void_p)),
	("__c",		ctypes.c_int),
	("__n",		ctypes.c_uint),] )

memset = _rpythonic_function_(		"memset", ctypes.POINTER(ctypes.c_void_p), [
	("__s",		ctypes.POINTER(ctypes.c_void_p)),
	("__c",		ctypes.c_int),
	("__n",		ctypes.c_uint),] )

memcmp = _rpythonic_function_(		"memcmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_void_p)),
	("__s2",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),] )

memchr = _rpythonic_function_(		"memchr", ctypes.POINTER(ctypes.c_void_p), [
	("__s",		ctypes.POINTER(ctypes.c_void_p)),
	("__c",		ctypes.c_int),
	("__n",		ctypes.c_uint),] )

rawmemchr = _rpythonic_function_(		"rawmemchr", ctypes.POINTER(ctypes.c_void_p), [
	("__s",		ctypes.POINTER(ctypes.c_void_p)),
	("__c",		ctypes.c_int),] )

memrchr = _rpythonic_function_(		"memrchr", ctypes.POINTER(ctypes.c_void_p), [
	("__s",		ctypes.POINTER(ctypes.c_void_p)),
	("__c",		ctypes.c_int),
	("__n",		ctypes.c_uint),] )

strcpy = _rpythonic_function_(		"strcpy", ctypes.POINTER(ctypes.c_char), [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),] )

strncpy = _rpythonic_function_(		"strncpy", ctypes.POINTER(ctypes.c_char), [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

strcat = _rpythonic_function_(		"strcat", ctypes.POINTER(ctypes.c_char), [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),] )

strncat = _rpythonic_function_(		"strncat", ctypes.POINTER(ctypes.c_char), [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

strcmp = _rpythonic_function_(		"strcmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),] )

strncmp = _rpythonic_function_(		"strncmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

strcoll = _rpythonic_function_(		"strcoll", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),] )

strxfrm = _rpythonic_function_(		"strxfrm", ctypes.c_uint, [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

strcoll_l = _rpythonic_function_(		"strcoll_l", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),
	("__l",		ctypes.POINTER(__locale_struct)),] )

strxfrm_l = _rpythonic_function_(		"strxfrm_l", ctypes.c_uint, [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),
	("__l",		ctypes.POINTER(__locale_struct)),] )

strdup = _rpythonic_function_(		"strdup", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

strndup = _rpythonic_function_(		"strndup", ctypes.POINTER(ctypes.c_char), [
	("__string",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

strchr = _rpythonic_function_(		"strchr", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__c",		ctypes.c_int),] )

strrchr = _rpythonic_function_(		"strrchr", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__c",		ctypes.c_int),] )

strchrnul = _rpythonic_function_(		"strchrnul", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__c",		ctypes.c_int),] )

strcspn = _rpythonic_function_(		"strcspn", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__reject",		ctypes.POINTER(ctypes.c_char)),] )

strspn = _rpythonic_function_(		"strspn", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__accept",		ctypes.POINTER(ctypes.c_char)),] )

strpbrk = _rpythonic_function_(		"strpbrk", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__accept",		ctypes.POINTER(ctypes.c_char)),] )

strstr = _rpythonic_function_(		"strstr", ctypes.POINTER(ctypes.c_char), [
	("__haystack",		ctypes.POINTER(ctypes.c_char)),
	("__needle",		ctypes.POINTER(ctypes.c_char)),] )

strtok = _rpythonic_function_(		"strtok", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__delim",		ctypes.POINTER(ctypes.c_char)),] )

strtok_r = _rpythonic_function_(		"strtok_r", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__delim",		ctypes.POINTER(ctypes.c_char)),
	("__save_ptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

strcasestr = _rpythonic_function_(		"strcasestr", ctypes.POINTER(ctypes.c_char), [
	("__haystack",		ctypes.POINTER(ctypes.c_char)),
	("__needle",		ctypes.POINTER(ctypes.c_char)),] )

memmem = _rpythonic_function_(		"memmem", ctypes.POINTER(ctypes.c_void_p), [
	("__haystack",		ctypes.POINTER(ctypes.c_void_p)),
	("__haystacklen",		ctypes.c_uint),
	("__needle",		ctypes.POINTER(ctypes.c_void_p)),
	("__needlelen",		ctypes.c_uint),] )

mempcpy = _rpythonic_function_(		"mempcpy", ctypes.POINTER(ctypes.c_void_p), [
	("__dest",		ctypes.POINTER(ctypes.c_void_p)),
	("__src",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),] )

strlen = _rpythonic_function_(		"strlen", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

strnlen = _rpythonic_function_(		"strnlen", ctypes.c_uint, [
	("__string",		ctypes.POINTER(ctypes.c_char)),
	("__maxlen",		ctypes.c_uint),] )

strerror = _rpythonic_function_(		"strerror", ctypes.POINTER(ctypes.c_char), [
	("__errnum",		ctypes.c_int),] )

strerror_r = _rpythonic_function_(		"strerror_r", ctypes.POINTER(ctypes.c_char), [
	("__errnum",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__buflen",		ctypes.c_uint),] )

strerror_l = _rpythonic_function_(		"strerror_l", ctypes.POINTER(ctypes.c_char), [
	("__errnum",		ctypes.c_int),
	("__l",		ctypes.POINTER(__locale_struct)),] )

bcopy = _rpythonic_function_(		"bcopy", ctypes.c_void_p, [
	("__src",		ctypes.POINTER(ctypes.c_void_p)),
	("__dest",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),] )

bzero = _rpythonic_function_(		"bzero", ctypes.c_void_p, [
	("__s",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),] )

bcmp = _rpythonic_function_(		"bcmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_void_p)),
	("__s2",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),] )

index = _rpythonic_function_(		"index", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__c",		ctypes.c_int),] )

rindex = _rpythonic_function_(		"rindex", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__c",		ctypes.c_int),] )

ffs = _rpythonic_function_(		"ffs", ctypes.c_int, [
	("__i",		ctypes.c_int),] )

ffsl = _rpythonic_function_(		"ffsl", ctypes.c_int, [
	("__l",		ctypes.c_int64),] )

ffsll = _rpythonic_function_(		"ffsll", ctypes.c_int, [
	("__ll",		ctypes.c_longlong),] )

strcasecmp = _rpythonic_function_(		"strcasecmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),] )

strncasecmp = _rpythonic_function_(		"strncasecmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

strcasecmp_l = _rpythonic_function_(		"strcasecmp_l", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

strncasecmp_l = _rpythonic_function_(		"strncasecmp_l", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

strsep = _rpythonic_function_(		"strsep", ctypes.POINTER(ctypes.c_char), [
	("__stringp",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__delim",		ctypes.POINTER(ctypes.c_char)),] )

strsignal = _rpythonic_function_(		"strsignal", ctypes.POINTER(ctypes.c_char), [
	("__sig",		ctypes.c_int),] )

stpcpy = _rpythonic_function_(		"stpcpy", ctypes.POINTER(ctypes.c_char), [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),] )

stpncpy = _rpythonic_function_(		"stpncpy", ctypes.POINTER(ctypes.c_char), [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

strverscmp = _rpythonic_function_(		"strverscmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),] )

strfry = _rpythonic_function_(		"strfry", ctypes.POINTER(ctypes.c_char), [
	("__string",		ctypes.POINTER(ctypes.c_char)),] )

memfrob = _rpythonic_function_(		"memfrob", ctypes.POINTER(ctypes.c_void_p), [
	("__s",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),] )

basename = _rpythonic_function_(		"basename", ctypes.POINTER(ctypes.c_char), [
	("__filename",		ctypes.POINTER(ctypes.c_char)),] )

atof = _rpythonic_function_(		"atof", ctypes.c_double, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),] )

atoi = _rpythonic_function_(		"atoi", ctypes.c_int, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),] )

atol = _rpythonic_function_(		"atol", ctypes.c_int64, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),] )

atoll = _rpythonic_function_(		"atoll", ctypes.c_longlong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),] )

strtod = _rpythonic_function_(		"strtod", ctypes.c_double, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

strtof = _rpythonic_function_(		"strtof", ctypes.c_float, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

strtold = _rpythonic_function_(		"strtold", ctypes.c_double, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

strtol = _rpythonic_function_(		"strtol", ctypes.c_int64, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

strtoul = _rpythonic_function_(		"strtoul", ctypes.c_uint64, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

strtoq = _rpythonic_function_(		"strtoq", ctypes.c_longlong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

strtouq = _rpythonic_function_(		"strtouq", ctypes.c_ulonglong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

strtoll = _rpythonic_function_(		"strtoll", ctypes.c_longlong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

strtoull = _rpythonic_function_(		"strtoull", ctypes.c_ulonglong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

strtol_l = _rpythonic_function_(		"strtol_l", ctypes.c_int64, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

strtoul_l = _rpythonic_function_(		"strtoul_l", ctypes.c_uint64, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

strtoll_l = _rpythonic_function_(		"strtoll_l", ctypes.c_longlong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

strtoull_l = _rpythonic_function_(		"strtoull_l", ctypes.c_ulonglong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

strtod_l = _rpythonic_function_(		"strtod_l", ctypes.c_double, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

strtof_l = _rpythonic_function_(		"strtof_l", ctypes.c_float, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

strtold_l = _rpythonic_function_(		"strtold_l", ctypes.c_double, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

l64a = _rpythonic_function_(		"l64a", ctypes.POINTER(ctypes.c_char), [
	("__n",		ctypes.c_int64),] )

a64l = _rpythonic_function_(		"a64l", ctypes.c_int64, [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

select = _rpythonic_function_(		"select", ctypes.c_int, [
	("__nfds",		ctypes.c_int),
	("__readfds",		ctypes.POINTER(fd_set)),
	("__writefds",		ctypes.POINTER(fd_set)),
	("__exceptfds",		ctypes.POINTER(fd_set)),
	("__timeout",		ctypes.POINTER(timeval)),] )

pselect = _rpythonic_function_(		"pselect", ctypes.c_int, [
	("__nfds",		ctypes.c_int),
	("__readfds",		ctypes.POINTER(fd_set)),
	("__writefds",		ctypes.POINTER(fd_set)),
	("__exceptfds",		ctypes.POINTER(fd_set)),
	("__timeout",		ctypes.POINTER(timespec)),
	("__sigmask",		ctypes.POINTER(__sigset_t)),] )

gnu_dev_major = _rpythonic_function_(		"gnu_dev_major", ctypes.c_uint, [
	("__dev",		ctypes.c_ulonglong),] )

gnu_dev_minor = _rpythonic_function_(		"gnu_dev_minor", ctypes.c_uint, [
	("__dev",		ctypes.c_ulonglong),] )

gnu_dev_makedev = _rpythonic_function_(		"gnu_dev_makedev", ctypes.c_ulonglong, [
	("__major",		ctypes.c_uint),
	("__minor",		ctypes.c_uint),] )

random = _rpythonic_function_(		"random", ctypes.c_int64, [] )

srandom = _rpythonic_function_(		"srandom", ctypes.c_void_p, [
	("__seed",		ctypes.c_uint),] )

initstate = _rpythonic_function_(		"initstate", ctypes.POINTER(ctypes.c_char), [
	("__seed",		ctypes.c_uint),
	("__statebuf",		ctypes.POINTER(ctypes.c_char)),
	("__statelen",		ctypes.c_uint),] )

setstate = _rpythonic_function_(		"setstate", ctypes.POINTER(ctypes.c_char), [
	("__statebuf",		ctypes.POINTER(ctypes.c_char)),] )

random_r = _rpythonic_function_(		"random_r", ctypes.c_int, [
	("__buf",		ctypes.POINTER(random_data)),
	("__result",		ctypes.POINTER(ctypes.c_int32)),] )

srandom_r = _rpythonic_function_(		"srandom_r", ctypes.c_int, [
	("__seed",		ctypes.c_uint),
	("__buf",		ctypes.POINTER(random_data)),] )

initstate_r = _rpythonic_function_(		"initstate_r", ctypes.c_int, [
	("__seed",		ctypes.c_uint),
	("__statebuf",		ctypes.POINTER(ctypes.c_char)),
	("__statelen",		ctypes.c_uint),
	("__buf",		ctypes.POINTER(random_data)),] )

setstate_r = _rpythonic_function_(		"setstate_r", ctypes.c_int, [
	("__statebuf",		ctypes.POINTER(ctypes.c_char)),
	("__buf",		ctypes.POINTER(random_data)),] )

rand = _rpythonic_function_(		"rand", ctypes.c_int, [] )

srand = _rpythonic_function_(		"srand", ctypes.c_void_p, [
	("__seed",		ctypes.c_uint),] )

rand_r = _rpythonic_function_(		"rand_r", ctypes.c_int, [
	("__seed",		ctypes.POINTER(ctypes.c_uint)),] )

drand48 = _rpythonic_function_(		"drand48", ctypes.c_double, [] )

erand48 = _rpythonic_function_(		"erand48", ctypes.c_double, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),] )

lrand48 = _rpythonic_function_(		"lrand48", ctypes.c_int64, [] )

nrand48 = _rpythonic_function_(		"nrand48", ctypes.c_int64, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),] )

mrand48 = _rpythonic_function_(		"mrand48", ctypes.c_int64, [] )

jrand48 = _rpythonic_function_(		"jrand48", ctypes.c_int64, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),] )

srand48 = _rpythonic_function_(		"srand48", ctypes.c_void_p, [
	("__seedval",		ctypes.c_int64),] )

seed48 = _rpythonic_function_(		"seed48", ctypes.POINTER(ctypes.c_uint16), [
	("__seed16v",		( ctypes.c_uint16 * 3 )),] )

lcong48 = _rpythonic_function_(		"lcong48", ctypes.c_void_p, [
	("__param",		( ctypes.c_uint16 * 7 )),] )

drand48_r = _rpythonic_function_(		"drand48_r", ctypes.c_int, [
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_double)),] )

erand48_r = _rpythonic_function_(		"erand48_r", ctypes.c_int, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_double)),] )

lrand48_r = _rpythonic_function_(		"lrand48_r", ctypes.c_int, [
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_int64)),] )

nrand48_r = _rpythonic_function_(		"nrand48_r", ctypes.c_int, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_int64)),] )

mrand48_r = _rpythonic_function_(		"mrand48_r", ctypes.c_int, [
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_int64)),] )

jrand48_r = _rpythonic_function_(		"jrand48_r", ctypes.c_int, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_int64)),] )

srand48_r = _rpythonic_function_(		"srand48_r", ctypes.c_int, [
	("__seedval",		ctypes.c_int64),
	("__buffer",		ctypes.POINTER(drand48_data)),] )

seed48_r = _rpythonic_function_(		"seed48_r", ctypes.c_int, [
	("__seed16v",		( ctypes.c_uint16 * 3 )),
	("__buffer",		ctypes.POINTER(drand48_data)),] )

lcong48_r = _rpythonic_function_(		"lcong48_r", ctypes.c_int, [
	("__param",		( ctypes.c_uint16 * 7 )),
	("__buffer",		ctypes.POINTER(drand48_data)),] )

malloc = _rpythonic_function_(		"malloc", ctypes.POINTER(ctypes.c_void_p), [
	("__size",		ctypes.c_uint),] )

calloc = _rpythonic_function_(		"calloc", ctypes.POINTER(ctypes.c_void_p), [
	("__nmemb",		ctypes.c_uint),
	("__size",		ctypes.c_uint),] )

realloc = _rpythonic_function_(		"realloc", ctypes.POINTER(ctypes.c_void_p), [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint),] )

free = _rpythonic_function_(		"free", ctypes.c_void_p, [("__ptr",		ctypes.c_void_p)] )

cfree = _rpythonic_function_(		"cfree", ctypes.c_void_p, [("__ptr",		ctypes.c_void_p)] )

alloca = _rpythonic_function_(		"alloca", ctypes.POINTER(ctypes.c_void_p), [
	("__size",		ctypes.c_uint),] )

valloc = _rpythonic_function_(		"valloc", ctypes.POINTER(ctypes.c_void_p), [
	("__size",		ctypes.c_uint),] )

posix_memalign = _rpythonic_function_(		"posix_memalign", ctypes.c_int, [
	("__memptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("__alignment",		ctypes.c_uint),
	("__size",		ctypes.c_uint),] )

abort = _rpythonic_function_(		"abort", ctypes.c_void_p, [] )

atexit = _rpythonic_function_(		"atexit", ctypes.c_int, [
	("__func",		ctypes.c_void_p),] )

at_quick_exit = _rpythonic_function_(		"at_quick_exit", ctypes.c_int, [
	("__func",		ctypes.c_void_p),] )

on_exit = _rpythonic_function_(		"on_exit", ctypes.c_int, [
	("__func",		ctypes.c_void_p),
	("__arg",		ctypes.POINTER(ctypes.c_void_p)),] )

exit = _rpythonic_function_(		"exit", ctypes.c_void_p, [
	("__status",		ctypes.c_int),] )

quick_exit = _rpythonic_function_(		"quick_exit", ctypes.c_void_p, [
	("__status",		ctypes.c_int),] )

_Exit = _rpythonic_function_(		"_Exit", ctypes.c_void_p, [
	("__status",		ctypes.c_int),] )

getenv = _rpythonic_function_(		"getenv", ctypes.POINTER(ctypes.c_char), [
	("__name",		ctypes.POINTER(ctypes.c_char)),] )

putenv = _rpythonic_function_(		"putenv", ctypes.c_int, [
	("__string",		ctypes.POINTER(ctypes.c_char)),] )

setenv = _rpythonic_function_(		"setenv", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),
	("__value",		ctypes.POINTER(ctypes.c_char)),
	("__replace",		ctypes.c_int),] )

unsetenv = _rpythonic_function_(		"unsetenv", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),] )

clearenv = _rpythonic_function_(		"clearenv", ctypes.c_int, [] )

mktemp = _rpythonic_function_(		"mktemp", ctypes.POINTER(ctypes.c_char), [
	("__template",		ctypes.POINTER(ctypes.c_char)),] )

mkstemp = _rpythonic_function_(		"mkstemp", ctypes.c_int, [
	("__template",		ctypes.POINTER(ctypes.c_char)),] )

mkstemp64 = _rpythonic_function_(		"mkstemp64", ctypes.c_int, [
	("__template",		ctypes.POINTER(ctypes.c_char)),] )

mkstemps = _rpythonic_function_(		"mkstemps", ctypes.c_int, [
	("__template",		ctypes.POINTER(ctypes.c_char)),
	("__suffixlen",		ctypes.c_int),] )

mkstemps64 = _rpythonic_function_(		"mkstemps64", ctypes.c_int, [
	("__template",		ctypes.POINTER(ctypes.c_char)),
	("__suffixlen",		ctypes.c_int),] )

mkdtemp = _rpythonic_function_(		"mkdtemp", ctypes.POINTER(ctypes.c_char), [
	("__template",		ctypes.POINTER(ctypes.c_char)),] )

mkostemp = _rpythonic_function_(		"mkostemp", ctypes.c_int, [
	("__template",		ctypes.POINTER(ctypes.c_char)),
	("__flags",		ctypes.c_int),] )

mkostemp64 = _rpythonic_function_(		"mkostemp64", ctypes.c_int, [
	("__template",		ctypes.POINTER(ctypes.c_char)),
	("__flags",		ctypes.c_int),] )

mkostemps = _rpythonic_function_(		"mkostemps", ctypes.c_int, [
	("__template",		ctypes.POINTER(ctypes.c_char)),
	("__suffixlen",		ctypes.c_int),
	("__flags",		ctypes.c_int),] )

mkostemps64 = _rpythonic_function_(		"mkostemps64", ctypes.c_int, [
	("__template",		ctypes.POINTER(ctypes.c_char)),
	("__suffixlen",		ctypes.c_int),
	("__flags",		ctypes.c_int),] )

system = _rpythonic_function_(		"system", ctypes.c_int, [
	("__command",		ctypes.POINTER(ctypes.c_char)),] )

canonicalize_file_name = _rpythonic_function_(		"canonicalize_file_name", ctypes.POINTER(ctypes.c_char), [
	("__name",		ctypes.POINTER(ctypes.c_char)),] )

realpath = _rpythonic_function_(		"realpath", ctypes.POINTER(ctypes.c_char), [
	("__name",		ctypes.POINTER(ctypes.c_char)),
	("__resolved",		ctypes.POINTER(ctypes.c_char)),] )

bsearch = _rpythonic_function_(		"bsearch", ctypes.POINTER(ctypes.c_void_p), [
	("__key",		ctypes.POINTER(ctypes.c_void_p)),
	("__base",		ctypes.POINTER(ctypes.c_void_p)),
	("__nmemb",		ctypes.c_uint),
	("__size",		ctypes.c_uint),
	("__compar",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

qsort = _rpythonic_function_(		"qsort", ctypes.c_void_p, [
	("__base",		ctypes.POINTER(ctypes.c_void_p)),
	("__nmemb",		ctypes.c_uint),
	("__size",		ctypes.c_uint),
	("__compar",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

qsort_r = _rpythonic_function_(		"qsort_r", ctypes.c_void_p, [
	("__base",		ctypes.POINTER(ctypes.c_void_p)),
	("__nmemb",		ctypes.c_uint),
	("__size",		ctypes.c_uint),
	("__compar",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("__arg",		ctypes.POINTER(ctypes.c_void_p)),] )

abs = _rpythonic_function_(		"abs", ctypes.c_int, [
	("__x",		ctypes.c_int),] )

labs = _rpythonic_function_(		"labs", ctypes.c_int64, [
	("__x",		ctypes.c_int64),] )

llabs = _rpythonic_function_(		"llabs", ctypes.c_longlong, [
	("__x",		ctypes.c_longlong),] )

div = _rpythonic_function_(		"div", div_t, [
	("__numer",		ctypes.c_int),
	("__denom",		ctypes.c_int),] )

ldiv = _rpythonic_function_(		"ldiv", ldiv_t, [
	("__numer",		ctypes.c_int64),
	("__denom",		ctypes.c_int64),] )

lldiv = _rpythonic_function_(		"lldiv", lldiv_t, [
	("__numer",		ctypes.c_longlong),
	("__denom",		ctypes.c_longlong),] )

ecvt = _rpythonic_function_(		"ecvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),] )

fcvt = _rpythonic_function_(		"fcvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),] )

gcvt = _rpythonic_function_(		"gcvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

qecvt = _rpythonic_function_(		"qecvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),] )

qfcvt = _rpythonic_function_(		"qfcvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),] )

qgcvt = _rpythonic_function_(		"qgcvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

ecvt_r = _rpythonic_function_(		"ecvt_r", ctypes.c_int, [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint),] )

fcvt_r = _rpythonic_function_(		"fcvt_r", ctypes.c_int, [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint),] )

qecvt_r = _rpythonic_function_(		"qecvt_r", ctypes.c_int, [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint),] )

qfcvt_r = _rpythonic_function_(		"qfcvt_r", ctypes.c_int, [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint),] )

mblen = _rpythonic_function_(		"mblen", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

mbtowc = _rpythonic_function_(		"mbtowc", ctypes.c_int, [
	("__pwc",		ctypes.POINTER(ctypes.c_int)),
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

wctomb = _rpythonic_function_(		"wctomb", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__wchar",		ctypes.c_int),] )

mbstowcs = _rpythonic_function_(		"mbstowcs", ctypes.c_uint, [
	("__pwcs",		ctypes.POINTER(ctypes.c_int)),
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

wcstombs = _rpythonic_function_(		"wcstombs", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__pwcs",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),] )

rpmatch = _rpythonic_function_(		"rpmatch", ctypes.c_int, [
	("__response",		ctypes.POINTER(ctypes.c_char)),] )

getsubopt = _rpythonic_function_(		"getsubopt", ctypes.c_int, [
	("__optionp",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__tokens",		ctypes.POINTER(ctypes.c_char)),
	("__valuep",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

setkey = _rpythonic_function_(		"setkey", ctypes.c_void_p, [
	("__key",		ctypes.POINTER(ctypes.c_char)),] )

posix_openpt = _rpythonic_function_(		"posix_openpt", ctypes.c_int, [
	("__oflag",		ctypes.c_int),] )

grantpt = _rpythonic_function_(		"grantpt", ctypes.c_int, [
	("__fd",		ctypes.c_int),] )

unlockpt = _rpythonic_function_(		"unlockpt", ctypes.c_int, [
	("__fd",		ctypes.c_int),] )

ptsname = _rpythonic_function_(		"ptsname", ctypes.POINTER(ctypes.c_char), [
	("__fd",		ctypes.c_int),] )

ptsname_r = _rpythonic_function_(		"ptsname_r", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__buflen",		ctypes.c_uint),] )

getpt = _rpythonic_function_(		"getpt", ctypes.c_int, [] )

getloadavg = _rpythonic_function_(		"getloadavg", ctypes.c_int, [
	("__loadavg",		ctypes.c_double),
	("__nelem",		ctypes.c_int),] )

access = _rpythonic_function_(		"access", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),
	("__type",		ctypes.c_int),] )

euidaccess = _rpythonic_function_(		"euidaccess", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),
	("__type",		ctypes.c_int),] )

eaccess = _rpythonic_function_(		"eaccess", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),
	("__type",		ctypes.c_int),] )

faccessat = _rpythonic_function_(		"faccessat", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__type",		ctypes.c_int),
	("__flag",		ctypes.c_int),] )

lseek = _rpythonic_function_(		"lseek", ctypes.c_longlong, [
	("__fd",		ctypes.c_int),
	("__offset",		ctypes.c_longlong),
	("__whence",		ctypes.c_int),] )

lseek64 = _rpythonic_function_(		"lseek64", ctypes.c_longlong, [
	("__fd",		ctypes.c_int),
	("__offset",		ctypes.c_longlong),
	("__whence",		ctypes.c_int),] )

close = _rpythonic_function_(		"close", ctypes.c_int, [
	("__fd",		ctypes.c_int),] )

read = _rpythonic_function_(		"read", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_void_p)),
	("__nbytes",		ctypes.c_uint),] )

write = _rpythonic_function_(		"write", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),] )

pread = _rpythonic_function_(		"pread", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_void_p)),
	("__nbytes",		ctypes.c_uint),
	("__offset",		ctypes.c_longlong),] )

pwrite = _rpythonic_function_(		"pwrite", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_void_p)),
	("__nbytes",		ctypes.c_uint),
	("__offset",		ctypes.c_longlong),] )

pread64 = _rpythonic_function_(		"pread64", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_void_p)),
	("__nbytes",		ctypes.c_uint),
	("__offset",		ctypes.c_longlong),] )

pwrite64 = _rpythonic_function_(		"pwrite64", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),
	("__offset",		ctypes.c_longlong),] )

pipe = _rpythonic_function_(		"pipe", ctypes.c_int, [
	("__pipedes",		( ctypes.c_int * 2 )),] )

pipe2 = _rpythonic_function_(		"pipe2", ctypes.c_int, [
	("__pipedes",		( ctypes.c_int * 2 )),
	("__flags",		ctypes.c_int),] )

alarm = _rpythonic_function_(		"alarm", ctypes.c_uint, [
	("__seconds",		ctypes.c_uint),] )

sleep = _rpythonic_function_(		"sleep", ctypes.c_uint, [
	("__seconds",		ctypes.c_uint),] )

ualarm = _rpythonic_function_(		"ualarm", ctypes.c_uint, [
	("__value",		ctypes.c_uint),
	("__interval",		ctypes.c_uint),] )

usleep = _rpythonic_function_(		"usleep", ctypes.c_int, [
	("__useconds",		ctypes.c_uint),] )

pause = _rpythonic_function_(		"pause", ctypes.c_int, [] )

chown = _rpythonic_function_(		"chown", ctypes.c_int, [
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__owner",		ctypes.c_uint),
	("__group",		ctypes.c_uint),] )

fchown = _rpythonic_function_(		"fchown", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__owner",		ctypes.c_uint),
	("__group",		ctypes.c_uint),] )

lchown = _rpythonic_function_(		"lchown", ctypes.c_int, [
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__owner",		ctypes.c_uint),
	("__group",		ctypes.c_uint),] )

fchownat = _rpythonic_function_(		"fchownat", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__owner",		ctypes.c_uint),
	("__group",		ctypes.c_uint),
	("__flag",		ctypes.c_int),] )

chdir = _rpythonic_function_(		"chdir", ctypes.c_int, [
	("__path",		ctypes.POINTER(ctypes.c_char)),] )

fchdir = _rpythonic_function_(		"fchdir", ctypes.c_int, [
	("__fd",		ctypes.c_int),] )

getcwd = _rpythonic_function_(		"getcwd", ctypes.POINTER(ctypes.c_char), [
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__size",		ctypes.c_uint),] )

get_current_dir_name = _rpythonic_function_(		"get_current_dir_name", ctypes.POINTER(ctypes.c_char), [] )

getwd = _rpythonic_function_(		"getwd", ctypes.POINTER(ctypes.c_char), [
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

dup = _rpythonic_function_(		"dup", ctypes.c_int, [
	("__fd",		ctypes.c_int),] )

dup2 = _rpythonic_function_(		"dup2", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__fd2",		ctypes.c_int),] )

dup3 = _rpythonic_function_(		"dup3", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__fd2",		ctypes.c_int),
	("__flags",		ctypes.c_int),] )

execve = _rpythonic_function_(		"execve", ctypes.c_int, [
	("__path",		ctypes.POINTER(ctypes.c_char)),
	("__argv",		ctypes.c_char),
	("__envp",		ctypes.c_char),] )

fexecve = _rpythonic_function_(		"fexecve", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__argv",		ctypes.c_char),
	("__envp",		ctypes.c_char),] )

execv = _rpythonic_function_(		"execv", ctypes.c_int, [
	("__path",		ctypes.POINTER(ctypes.c_char)),
	("__argv",		ctypes.c_char),] )

execle = _rpythonic_function_(		"execle", ctypes.c_int, [
	("__path",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.POINTER(ctypes.c_char)),] )

execl = _rpythonic_function_(		"execl", ctypes.c_int, [
	("__path",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.POINTER(ctypes.c_char)),] )

execvp = _rpythonic_function_(		"execvp", ctypes.c_int, [
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__argv",		ctypes.c_char),] )

execlp = _rpythonic_function_(		"execlp", ctypes.c_int, [
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.POINTER(ctypes.c_char)),] )

execvpe = _rpythonic_function_(		"execvpe", ctypes.c_int, [
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__argv",		ctypes.c_char),
	("__envp",		ctypes.c_char),] )

nice = _rpythonic_function_(		"nice", ctypes.c_int, [
	("__inc",		ctypes.c_int),] )

_exit = _rpythonic_function_(		"_exit", ctypes.c_void_p, [
	("__status",		ctypes.c_int),] )

pathconf = _rpythonic_function_(		"pathconf", ctypes.c_int64, [
	("__path",		ctypes.POINTER(ctypes.c_char)),
	("__name",		ctypes.c_int),] )

fpathconf = _rpythonic_function_(		"fpathconf", ctypes.c_int64, [
	("__fd",		ctypes.c_int),
	("__name",		ctypes.c_int),] )

sysconf = _rpythonic_function_(		"sysconf", ctypes.c_int64, [
	("__name",		ctypes.c_int),] )

confstr = _rpythonic_function_(		"confstr", ctypes.c_uint, [
	("__name",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint),] )

getpid = _rpythonic_function_(		"getpid", ctypes.c_int, [] )

getppid = _rpythonic_function_(		"getppid", ctypes.c_int, [] )

getpgrp = _rpythonic_function_(		"getpgrp", ctypes.c_int, [] )

getpgid = _rpythonic_function_(		"getpgid", ctypes.c_int, [
	("__pid",		ctypes.c_int),] )

setpgid = _rpythonic_function_(		"setpgid", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__pgid",		ctypes.c_int),] )

setpgrp = _rpythonic_function_(		"setpgrp", ctypes.c_int, [] )

setsid = _rpythonic_function_(		"setsid", ctypes.c_int, [] )

getsid = _rpythonic_function_(		"getsid", ctypes.c_int, [
	("__pid",		ctypes.c_int),] )

getuid = _rpythonic_function_(		"getuid", ctypes.c_uint, [] )

geteuid = _rpythonic_function_(		"geteuid", ctypes.c_uint, [] )

getgid = _rpythonic_function_(		"getgid", ctypes.c_uint, [] )

getegid = _rpythonic_function_(		"getegid", ctypes.c_uint, [] )

getgroups = _rpythonic_function_(		"getgroups", ctypes.c_int, [
	("__size",		ctypes.c_int),
	("__list",		ctypes.c_uint),] )

group_member = _rpythonic_function_(		"group_member", ctypes.c_int, [
	("__gid",		ctypes.c_uint),] )

setuid = _rpythonic_function_(		"setuid", ctypes.c_int, [
	("__uid",		ctypes.c_uint),] )

setreuid = _rpythonic_function_(		"setreuid", ctypes.c_int, [
	("__ruid",		ctypes.c_uint),
	("__euid",		ctypes.c_uint),] )

seteuid = _rpythonic_function_(		"seteuid", ctypes.c_int, [
	("__uid",		ctypes.c_uint),] )

setgid = _rpythonic_function_(		"setgid", ctypes.c_int, [
	("__gid",		ctypes.c_uint),] )

setregid = _rpythonic_function_(		"setregid", ctypes.c_int, [
	("__rgid",		ctypes.c_uint),
	("__egid",		ctypes.c_uint),] )

setegid = _rpythonic_function_(		"setegid", ctypes.c_int, [
	("__gid",		ctypes.c_uint),] )

getresuid = _rpythonic_function_(		"getresuid", ctypes.c_int, [
	("__ruid",		ctypes.POINTER(ctypes.c_uint)),
	("__euid",		ctypes.POINTER(ctypes.c_uint)),
	("__suid",		ctypes.POINTER(ctypes.c_uint)),] )

getresgid = _rpythonic_function_(		"getresgid", ctypes.c_int, [
	("__rgid",		ctypes.POINTER(ctypes.c_uint)),
	("__egid",		ctypes.POINTER(ctypes.c_uint)),
	("__sgid",		ctypes.POINTER(ctypes.c_uint)),] )

setresuid = _rpythonic_function_(		"setresuid", ctypes.c_int, [
	("__ruid",		ctypes.c_uint),
	("__euid",		ctypes.c_uint),
	("__suid",		ctypes.c_uint),] )

setresgid = _rpythonic_function_(		"setresgid", ctypes.c_int, [
	("__rgid",		ctypes.c_uint),
	("__egid",		ctypes.c_uint),
	("__sgid",		ctypes.c_uint),] )

fork = _rpythonic_function_(		"fork", ctypes.c_int, [] )

vfork = _rpythonic_function_(		"vfork", ctypes.c_int, [] )

ttyname = _rpythonic_function_(		"ttyname", ctypes.POINTER(ctypes.c_char), [
	("__fd",		ctypes.c_int),] )

ttyname_r = _rpythonic_function_(		"ttyname_r", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__buflen",		ctypes.c_uint),] )

isatty = _rpythonic_function_(		"isatty", ctypes.c_int, [
	("__fd",		ctypes.c_int),] )

ttyslot = _rpythonic_function_(		"ttyslot", ctypes.c_int, [] )

link = _rpythonic_function_(		"link", ctypes.c_int, [
	("__from",		ctypes.POINTER(ctypes.c_char)),
	("__to",		ctypes.POINTER(ctypes.c_char)),] )

linkat = _rpythonic_function_(		"linkat", ctypes.c_int, [
	("__fromfd",		ctypes.c_int),
	("__from",		ctypes.POINTER(ctypes.c_char)),
	("__tofd",		ctypes.c_int),
	("__to",		ctypes.POINTER(ctypes.c_char)),
	("__flags",		ctypes.c_int),] )

symlink = _rpythonic_function_(		"symlink", ctypes.c_int, [
	("__from",		ctypes.POINTER(ctypes.c_char)),
	("__to",		ctypes.POINTER(ctypes.c_char)),] )

readlink = _rpythonic_function_(		"readlink", ctypes.c_int, [
	("__path",		ctypes.POINTER(ctypes.c_char)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint),] )

symlinkat = _rpythonic_function_(		"symlinkat", ctypes.c_int, [
	("__from",		ctypes.POINTER(ctypes.c_char)),
	("__tofd",		ctypes.c_int),
	("__to",		ctypes.POINTER(ctypes.c_char)),] )

readlinkat = _rpythonic_function_(		"readlinkat", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__path",		ctypes.POINTER(ctypes.c_char)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint),] )

unlink = _rpythonic_function_(		"unlink", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),] )

unlinkat = _rpythonic_function_(		"unlinkat", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__name",		ctypes.POINTER(ctypes.c_char)),
	("__flag",		ctypes.c_int),] )

rmdir = _rpythonic_function_(		"rmdir", ctypes.c_int, [
	("__path",		ctypes.POINTER(ctypes.c_char)),] )

tcgetpgrp = _rpythonic_function_(		"tcgetpgrp", ctypes.c_int, [
	("__fd",		ctypes.c_int),] )

tcsetpgrp = _rpythonic_function_(		"tcsetpgrp", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__pgrp_id",		ctypes.c_int),] )

getlogin = _rpythonic_function_(		"getlogin", ctypes.POINTER(ctypes.c_char), [] )

getlogin_r = _rpythonic_function_(		"getlogin_r", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),
	("__name_len",		ctypes.c_uint),] )

setlogin = _rpythonic_function_(		"setlogin", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),] )

getopt = _rpythonic_function_(		"getopt", ctypes.c_int, [
	("___argc",		ctypes.c_int),
	("___argv",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__shortopts",		ctypes.POINTER(ctypes.c_char)),] )

gethostname = _rpythonic_function_(		"gethostname", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint),] )

sethostname = _rpythonic_function_(		"sethostname", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint),] )

sethostid = _rpythonic_function_(		"sethostid", ctypes.c_int, [
	("__id",		ctypes.c_int64),] )

getdomainname = _rpythonic_function_(		"getdomainname", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint),] )

setdomainname = _rpythonic_function_(		"setdomainname", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint),] )

vhangup = _rpythonic_function_(		"vhangup", ctypes.c_int, [] )

revoke = _rpythonic_function_(		"revoke", ctypes.c_int, [
	("__file",		ctypes.POINTER(ctypes.c_char)),] )

profil = _rpythonic_function_(		"profil", ctypes.c_int, [
	("__sample_buffer",		ctypes.POINTER(ctypes.c_uint16)),
	("__size",		ctypes.c_uint),
	("__offset",		ctypes.c_uint),
	("__scale",		ctypes.c_uint),] )

acct = _rpythonic_function_(		"acct", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),] )

getusershell = _rpythonic_function_(		"getusershell", ctypes.POINTER(ctypes.c_char), [] )

endusershell = _rpythonic_function_(		"endusershell", ctypes.c_void_p, [] )

setusershell = _rpythonic_function_(		"setusershell", ctypes.c_void_p, [] )

daemon = _rpythonic_function_(		"daemon", ctypes.c_int, [
	("__nochdir",		ctypes.c_int),
	("__noclose",		ctypes.c_int),] )

chroot = _rpythonic_function_(		"chroot", ctypes.c_int, [
	("__path",		ctypes.POINTER(ctypes.c_char)),] )

getpass = _rpythonic_function_(		"getpass", ctypes.POINTER(ctypes.c_char), [
	("__prompt",		ctypes.POINTER(ctypes.c_char)),] )

fsync = _rpythonic_function_(		"fsync", ctypes.c_int, [
	("__fd",		ctypes.c_int),] )

gethostid = _rpythonic_function_(		"gethostid", ctypes.c_int64, [] )

sync = _rpythonic_function_(		"sync", ctypes.c_void_p, [] )

getpagesize = _rpythonic_function_(		"getpagesize", ctypes.c_int, [] )

getdtablesize = _rpythonic_function_(		"getdtablesize", ctypes.c_int, [] )

truncate = _rpythonic_function_(		"truncate", ctypes.c_int, [
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__length",		ctypes.c_longlong),] )

truncate64 = _rpythonic_function_(		"truncate64", ctypes.c_int, [
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__length",		ctypes.c_longlong),] )

ftruncate = _rpythonic_function_(		"ftruncate", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__length",		ctypes.c_longlong),] )

ftruncate64 = _rpythonic_function_(		"ftruncate64", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__length",		ctypes.c_longlong),] )

brk = _rpythonic_function_(		"brk", ctypes.c_int, [("__addr",		ctypes.c_void_p)] )

sbrk = _rpythonic_function_(		"sbrk", ctypes.POINTER(ctypes.c_void_p), [
	("__delta",		ctypes.c_int),] )

syscall = _rpythonic_function_(		"syscall", ctypes.c_int64, [
	("__sysno",		ctypes.c_int64),] )

lockf = _rpythonic_function_(		"lockf", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__cmd",		ctypes.c_int),
	("__len",		ctypes.c_longlong),] )

lockf64 = _rpythonic_function_(		"lockf64", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__cmd",		ctypes.c_int),
	("__len",		ctypes.c_longlong),] )

fdatasync = _rpythonic_function_(		"fdatasync", ctypes.c_int, [
	("__fildes",		ctypes.c_int),] )

crypt = _rpythonic_function_(		"crypt", ctypes.POINTER(ctypes.c_char), [
	("__key",		ctypes.POINTER(ctypes.c_char)),
	("__salt",		ctypes.POINTER(ctypes.c_char)),] )

encrypt = _rpythonic_function_(		"encrypt", ctypes.c_void_p, [
	("__libc_block",		ctypes.POINTER(ctypes.c_char)),
	("__edflag",		ctypes.c_int),] )

swab = _rpythonic_function_(		"swab", ctypes.c_void_p, [
	("__from",		ctypes.POINTER(ctypes.c_void_p)),
	("__to",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_int),] )

imaxabs = _rpythonic_function_(		"imaxabs", ctypes.c_longlong, [
	("__n",		ctypes.c_longlong),] )

imaxdiv = _rpythonic_function_(		"imaxdiv", imaxdiv_t, [
	("__numer",		ctypes.c_longlong),
	("__denom",		ctypes.c_longlong),] )

strtoimax = _rpythonic_function_(		"strtoimax", ctypes.c_longlong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

strtoumax = _rpythonic_function_(		"strtoumax", ctypes.c_ulonglong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

wcstoimax = _rpythonic_function_(		"wcstoimax", ctypes.c_longlong, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__base",		ctypes.c_int),] )

wcstoumax = _rpythonic_function_(		"wcstoumax", ctypes.c_ulonglong, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__base",		ctypes.c_int),] )

acos = _rpythonic_function_(		"acos", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

asin = _rpythonic_function_(		"asin", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

atan = _rpythonic_function_(		"atan", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

atan2 = _rpythonic_function_(		"atan2", ctypes.c_double, [
	("__y",		ctypes.c_double),
	("__x",		ctypes.c_double),] )

cos = _rpythonic_function_(		"cos", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

sin = _rpythonic_function_(		"sin", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

tan = _rpythonic_function_(		"tan", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

cosh = _rpythonic_function_(		"cosh", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

sinh = _rpythonic_function_(		"sinh", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

tanh = _rpythonic_function_(		"tanh", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

sincos = _rpythonic_function_(		"sincos", ctypes.c_void_p, [
	("__x",		ctypes.c_double),
	("__sinx",		ctypes.POINTER(ctypes.c_double)),
	("__cosx",		ctypes.POINTER(ctypes.c_double)),] )

acosh = _rpythonic_function_(		"acosh", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

asinh = _rpythonic_function_(		"asinh", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

atanh = _rpythonic_function_(		"atanh", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

exp = _rpythonic_function_(		"exp", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

frexp = _rpythonic_function_(		"frexp", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__exponent",		ctypes.POINTER(ctypes.c_int)),] )

ldexp = _rpythonic_function_(		"ldexp", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__exponent",		ctypes.c_int),] )

log = _rpythonic_function_(		"log", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

log10 = _rpythonic_function_(		"log10", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

modf = _rpythonic_function_(		"modf", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__iptr",		ctypes.POINTER(ctypes.c_double)),] )

exp10 = _rpythonic_function_(		"exp10", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

pow10 = _rpythonic_function_(		"pow10", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

expm1 = _rpythonic_function_(		"expm1", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

log1p = _rpythonic_function_(		"log1p", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

logb = _rpythonic_function_(		"logb", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

exp2 = _rpythonic_function_(		"exp2", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

log2 = _rpythonic_function_(		"log2", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

pow = _rpythonic_function_(		"pow", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

sqrt = _rpythonic_function_(		"sqrt", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

hypot = _rpythonic_function_(		"hypot", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

cbrt = _rpythonic_function_(		"cbrt", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

ceil = _rpythonic_function_(		"ceil", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

fabs = _rpythonic_function_(		"fabs", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

floor = _rpythonic_function_(		"floor", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

fmod = _rpythonic_function_(		"fmod", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

isinf = _rpythonic_function_(		"isinf", ctypes.c_int, [
	("__value",		ctypes.c_double),] )

finite = _rpythonic_function_(		"finite", ctypes.c_int, [
	("__value",		ctypes.c_double),] )

drem = _rpythonic_function_(		"drem", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

significand = _rpythonic_function_(		"significand", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

copysign = _rpythonic_function_(		"copysign", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

nan = _rpythonic_function_(		"nan", ctypes.c_double, [
	("__tagb",		ctypes.POINTER(ctypes.c_char)),] )

isnan = _rpythonic_function_(		"isnan", ctypes.c_int, [
	("__value",		ctypes.c_double),] )

j0 = _rpythonic_function_(		"j0", ctypes.c_double, [
	("none",		ctypes.c_double),] )

j1 = _rpythonic_function_(		"j1", ctypes.c_double, [
	("none",		ctypes.c_double),] )

jn = _rpythonic_function_(		"jn", ctypes.c_double, [
	("none",		ctypes.c_int),
	("none",		ctypes.c_double),] )

y0 = _rpythonic_function_(		"y0", ctypes.c_double, [
	("none",		ctypes.c_double),] )

y1 = _rpythonic_function_(		"y1", ctypes.c_double, [
	("none",		ctypes.c_double),] )

yn = _rpythonic_function_(		"yn", ctypes.c_double, [
	("none",		ctypes.c_int),
	("none",		ctypes.c_double),] )

erf = _rpythonic_function_(		"erf", ctypes.c_double, [
	("none",		ctypes.c_double),] )

erfc = _rpythonic_function_(		"erfc", ctypes.c_double, [
	("none",		ctypes.c_double),] )

lgamma = _rpythonic_function_(		"lgamma", ctypes.c_double, [
	("none",		ctypes.c_double),] )

tgamma = _rpythonic_function_(		"tgamma", ctypes.c_double, [
	("none",		ctypes.c_double),] )

gamma = _rpythonic_function_(		"gamma", ctypes.c_double, [
	("none",		ctypes.c_double),] )

lgamma_r = _rpythonic_function_(		"lgamma_r", ctypes.c_double, [
	("none",		ctypes.c_double),
	("__signgamp",		ctypes.POINTER(ctypes.c_int)),] )

rint = _rpythonic_function_(		"rint", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

nextafter = _rpythonic_function_(		"nextafter", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

nexttoward = _rpythonic_function_(		"nexttoward", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

remainder = _rpythonic_function_(		"remainder", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

scalbn = _rpythonic_function_(		"scalbn", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__n",		ctypes.c_int),] )

ilogb = _rpythonic_function_(		"ilogb", ctypes.c_int, [
	("__x",		ctypes.c_double),] )

scalbln = _rpythonic_function_(		"scalbln", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__n",		ctypes.c_int64),] )

nearbyint = _rpythonic_function_(		"nearbyint", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

round = _rpythonic_function_(		"round", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

trunc = _rpythonic_function_(		"trunc", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

remquo = _rpythonic_function_(		"remquo", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),
	("__quo",		ctypes.POINTER(ctypes.c_int)),] )

lrint = _rpythonic_function_(		"lrint", ctypes.c_int64, [
	("__x",		ctypes.c_double),] )

llrint = _rpythonic_function_(		"llrint", ctypes.c_longlong, [
	("__x",		ctypes.c_double),] )

lround = _rpythonic_function_(		"lround", ctypes.c_int64, [
	("__x",		ctypes.c_double),] )

llround = _rpythonic_function_(		"llround", ctypes.c_longlong, [
	("__x",		ctypes.c_double),] )

fdim = _rpythonic_function_(		"fdim", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

fmax = _rpythonic_function_(		"fmax", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

fmin = _rpythonic_function_(		"fmin", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

fma = _rpythonic_function_(		"fma", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),
	("__z",		ctypes.c_double),] )

scalb = _rpythonic_function_(		"scalb", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__n",		ctypes.c_double),] )

acosf = _rpythonic_function_(		"acosf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

asinf = _rpythonic_function_(		"asinf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

atanf = _rpythonic_function_(		"atanf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

atan2f = _rpythonic_function_(		"atan2f", ctypes.c_float, [
	("__y",		ctypes.c_float),
	("__x",		ctypes.c_float),] )

cosf = _rpythonic_function_(		"cosf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

sinf = _rpythonic_function_(		"sinf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

tanf = _rpythonic_function_(		"tanf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

coshf = _rpythonic_function_(		"coshf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

sinhf = _rpythonic_function_(		"sinhf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

tanhf = _rpythonic_function_(		"tanhf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

sincosf = _rpythonic_function_(		"sincosf", ctypes.c_void_p, [
	("__x",		ctypes.c_float),
	("__sinx",		ctypes.POINTER(ctypes.c_float)),
	("__cosx",		ctypes.POINTER(ctypes.c_float)),] )

acoshf = _rpythonic_function_(		"acoshf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

asinhf = _rpythonic_function_(		"asinhf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

atanhf = _rpythonic_function_(		"atanhf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

expf = _rpythonic_function_(		"expf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

frexpf = _rpythonic_function_(		"frexpf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__exponent",		ctypes.POINTER(ctypes.c_int)),] )

ldexpf = _rpythonic_function_(		"ldexpf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__exponent",		ctypes.c_int),] )

logf = _rpythonic_function_(		"logf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

log10f = _rpythonic_function_(		"log10f", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

modff = _rpythonic_function_(		"modff", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__iptr",		ctypes.POINTER(ctypes.c_float)),] )

exp10f = _rpythonic_function_(		"exp10f", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

pow10f = _rpythonic_function_(		"pow10f", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

expm1f = _rpythonic_function_(		"expm1f", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

log1pf = _rpythonic_function_(		"log1pf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

logbf = _rpythonic_function_(		"logbf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

exp2f = _rpythonic_function_(		"exp2f", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

log2f = _rpythonic_function_(		"log2f", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

powf = _rpythonic_function_(		"powf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),] )

sqrtf = _rpythonic_function_(		"sqrtf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

hypotf = _rpythonic_function_(		"hypotf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),] )

cbrtf = _rpythonic_function_(		"cbrtf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

ceilf = _rpythonic_function_(		"ceilf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

fabsf = _rpythonic_function_(		"fabsf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

floorf = _rpythonic_function_(		"floorf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

fmodf = _rpythonic_function_(		"fmodf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),] )

isinff = _rpythonic_function_(		"isinff", ctypes.c_int, [
	("__value",		ctypes.c_float),] )

finitef = _rpythonic_function_(		"finitef", ctypes.c_int, [
	("__value",		ctypes.c_float),] )

dremf = _rpythonic_function_(		"dremf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),] )

significandf = _rpythonic_function_(		"significandf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

copysignf = _rpythonic_function_(		"copysignf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),] )

nanf = _rpythonic_function_(		"nanf", ctypes.c_float, [
	("__tagb",		ctypes.POINTER(ctypes.c_char)),] )

isnanf = _rpythonic_function_(		"isnanf", ctypes.c_int, [
	("__value",		ctypes.c_float),] )

j0f = _rpythonic_function_(		"j0f", ctypes.c_float, [
	("none",		ctypes.c_float),] )

j1f = _rpythonic_function_(		"j1f", ctypes.c_float, [
	("none",		ctypes.c_float),] )

jnf = _rpythonic_function_(		"jnf", ctypes.c_float, [
	("none",		ctypes.c_int),
	("none",		ctypes.c_float),] )

y0f = _rpythonic_function_(		"y0f", ctypes.c_float, [
	("none",		ctypes.c_float),] )

y1f = _rpythonic_function_(		"y1f", ctypes.c_float, [
	("none",		ctypes.c_float),] )

ynf = _rpythonic_function_(		"ynf", ctypes.c_float, [
	("none",		ctypes.c_int),
	("none",		ctypes.c_float),] )

erff = _rpythonic_function_(		"erff", ctypes.c_float, [
	("none",		ctypes.c_float),] )

erfcf = _rpythonic_function_(		"erfcf", ctypes.c_float, [
	("none",		ctypes.c_float),] )

lgammaf = _rpythonic_function_(		"lgammaf", ctypes.c_float, [
	("none",		ctypes.c_float),] )

tgammaf = _rpythonic_function_(		"tgammaf", ctypes.c_float, [
	("none",		ctypes.c_float),] )

gammaf = _rpythonic_function_(		"gammaf", ctypes.c_float, [
	("none",		ctypes.c_float),] )

lgammaf_r = _rpythonic_function_(		"lgammaf_r", ctypes.c_float, [
	("none",		ctypes.c_float),
	("__signgamp",		ctypes.POINTER(ctypes.c_int)),] )

rintf = _rpythonic_function_(		"rintf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

nextafterf = _rpythonic_function_(		"nextafterf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),] )

nexttowardf = _rpythonic_function_(		"nexttowardf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_double),] )

remainderf = _rpythonic_function_(		"remainderf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),] )

scalbnf = _rpythonic_function_(		"scalbnf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__n",		ctypes.c_int),] )

ilogbf = _rpythonic_function_(		"ilogbf", ctypes.c_int, [
	("__x",		ctypes.c_float),] )

scalblnf = _rpythonic_function_(		"scalblnf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__n",		ctypes.c_int64),] )

nearbyintf = _rpythonic_function_(		"nearbyintf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

roundf = _rpythonic_function_(		"roundf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

truncf = _rpythonic_function_(		"truncf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

remquof = _rpythonic_function_(		"remquof", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),
	("__quo",		ctypes.POINTER(ctypes.c_int)),] )

lrintf = _rpythonic_function_(		"lrintf", ctypes.c_int64, [
	("__x",		ctypes.c_float),] )

llrintf = _rpythonic_function_(		"llrintf", ctypes.c_longlong, [
	("__x",		ctypes.c_float),] )

lroundf = _rpythonic_function_(		"lroundf", ctypes.c_int64, [
	("__x",		ctypes.c_float),] )

llroundf = _rpythonic_function_(		"llroundf", ctypes.c_longlong, [
	("__x",		ctypes.c_float),] )

fdimf = _rpythonic_function_(		"fdimf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),] )

fmaxf = _rpythonic_function_(		"fmaxf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),] )

fminf = _rpythonic_function_(		"fminf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),] )

fmaf = _rpythonic_function_(		"fmaf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),
	("__z",		ctypes.c_float),] )

scalbf = _rpythonic_function_(		"scalbf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__n",		ctypes.c_float),] )

acosl = _rpythonic_function_(		"acosl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

asinl = _rpythonic_function_(		"asinl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

atanl = _rpythonic_function_(		"atanl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

atan2l = _rpythonic_function_(		"atan2l", ctypes.c_double, [
	("__y",		ctypes.c_double),
	("__x",		ctypes.c_double),] )

cosl = _rpythonic_function_(		"cosl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

sinl = _rpythonic_function_(		"sinl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

tanl = _rpythonic_function_(		"tanl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

coshl = _rpythonic_function_(		"coshl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

sinhl = _rpythonic_function_(		"sinhl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

tanhl = _rpythonic_function_(		"tanhl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

sincosl = _rpythonic_function_(		"sincosl", ctypes.c_void_p, [
	("__x",		ctypes.c_double),
	("__sinx",		ctypes.POINTER(ctypes.c_double)),
	("__cosx",		ctypes.POINTER(ctypes.c_double)),] )

acoshl = _rpythonic_function_(		"acoshl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

asinhl = _rpythonic_function_(		"asinhl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

atanhl = _rpythonic_function_(		"atanhl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

expl = _rpythonic_function_(		"expl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

frexpl = _rpythonic_function_(		"frexpl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__exponent",		ctypes.POINTER(ctypes.c_int)),] )

ldexpl = _rpythonic_function_(		"ldexpl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__exponent",		ctypes.c_int),] )

logl = _rpythonic_function_(		"logl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

log10l = _rpythonic_function_(		"log10l", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

modfl = _rpythonic_function_(		"modfl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__iptr",		ctypes.POINTER(ctypes.c_double)),] )

exp10l = _rpythonic_function_(		"exp10l", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

pow10l = _rpythonic_function_(		"pow10l", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

expm1l = _rpythonic_function_(		"expm1l", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

log1pl = _rpythonic_function_(		"log1pl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

logbl = _rpythonic_function_(		"logbl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

exp2l = _rpythonic_function_(		"exp2l", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

log2l = _rpythonic_function_(		"log2l", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

powl = _rpythonic_function_(		"powl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

sqrtl = _rpythonic_function_(		"sqrtl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

hypotl = _rpythonic_function_(		"hypotl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

cbrtl = _rpythonic_function_(		"cbrtl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

ceill = _rpythonic_function_(		"ceill", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

fabsl = _rpythonic_function_(		"fabsl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

floorl = _rpythonic_function_(		"floorl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

fmodl = _rpythonic_function_(		"fmodl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

isinfl = _rpythonic_function_(		"isinfl", ctypes.c_int, [
	("__value",		ctypes.c_double),] )

finitel = _rpythonic_function_(		"finitel", ctypes.c_int, [
	("__value",		ctypes.c_double),] )

dreml = _rpythonic_function_(		"dreml", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

significandl = _rpythonic_function_(		"significandl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

copysignl = _rpythonic_function_(		"copysignl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

nanl = _rpythonic_function_(		"nanl", ctypes.c_double, [
	("__tagb",		ctypes.POINTER(ctypes.c_char)),] )

isnanl = _rpythonic_function_(		"isnanl", ctypes.c_int, [
	("__value",		ctypes.c_double),] )

j0l = _rpythonic_function_(		"j0l", ctypes.c_double, [
	("none",		ctypes.c_double),] )

j1l = _rpythonic_function_(		"j1l", ctypes.c_double, [
	("none",		ctypes.c_double),] )

jnl = _rpythonic_function_(		"jnl", ctypes.c_double, [
	("none",		ctypes.c_int),
	("none",		ctypes.c_double),] )

y0l = _rpythonic_function_(		"y0l", ctypes.c_double, [
	("none",		ctypes.c_double),] )

y1l = _rpythonic_function_(		"y1l", ctypes.c_double, [
	("none",		ctypes.c_double),] )

ynl = _rpythonic_function_(		"ynl", ctypes.c_double, [
	("none",		ctypes.c_int),
	("none",		ctypes.c_double),] )

erfl = _rpythonic_function_(		"erfl", ctypes.c_double, [
	("none",		ctypes.c_double),] )

erfcl = _rpythonic_function_(		"erfcl", ctypes.c_double, [
	("none",		ctypes.c_double),] )

lgammal = _rpythonic_function_(		"lgammal", ctypes.c_double, [
	("none",		ctypes.c_double),] )

tgammal = _rpythonic_function_(		"tgammal", ctypes.c_double, [
	("none",		ctypes.c_double),] )

gammal = _rpythonic_function_(		"gammal", ctypes.c_double, [
	("none",		ctypes.c_double),] )

lgammal_r = _rpythonic_function_(		"lgammal_r", ctypes.c_double, [
	("none",		ctypes.c_double),
	("__signgamp",		ctypes.POINTER(ctypes.c_int)),] )

rintl = _rpythonic_function_(		"rintl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

nextafterl = _rpythonic_function_(		"nextafterl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

nexttowardl = _rpythonic_function_(		"nexttowardl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

remainderl = _rpythonic_function_(		"remainderl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

scalbnl = _rpythonic_function_(		"scalbnl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__n",		ctypes.c_int),] )

ilogbl = _rpythonic_function_(		"ilogbl", ctypes.c_int, [
	("__x",		ctypes.c_double),] )

scalblnl = _rpythonic_function_(		"scalblnl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__n",		ctypes.c_int64),] )

nearbyintl = _rpythonic_function_(		"nearbyintl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

roundl = _rpythonic_function_(		"roundl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

truncl = _rpythonic_function_(		"truncl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

remquol = _rpythonic_function_(		"remquol", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),
	("__quo",		ctypes.POINTER(ctypes.c_int)),] )

lrintl = _rpythonic_function_(		"lrintl", ctypes.c_int64, [
	("__x",		ctypes.c_double),] )

llrintl = _rpythonic_function_(		"llrintl", ctypes.c_longlong, [
	("__x",		ctypes.c_double),] )

lroundl = _rpythonic_function_(		"lroundl", ctypes.c_int64, [
	("__x",		ctypes.c_double),] )

llroundl = _rpythonic_function_(		"llroundl", ctypes.c_longlong, [
	("__x",		ctypes.c_double),] )

fdiml = _rpythonic_function_(		"fdiml", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

fmaxl = _rpythonic_function_(		"fmaxl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

fminl = _rpythonic_function_(		"fminl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

fmal = _rpythonic_function_(		"fmal", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),
	("__z",		ctypes.c_double),] )

scalbl = _rpythonic_function_(		"scalbl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__n",		ctypes.c_double),] )

matherr = _rpythonic_function_(		"matherr", ctypes.c_int, [
	("__exc",		ctypes.POINTER(exception)),] )

gettimeofday = _rpythonic_function_(		"gettimeofday", ctypes.c_int, [
	("__tv",		ctypes.POINTER(timeval)),
	("__tz",		ctypes.POINTER(timezone)),] )

settimeofday = _rpythonic_function_(		"settimeofday", ctypes.c_int, [
	("__tv",		ctypes.POINTER(timeval)),
	("__tz",		ctypes.POINTER(timezone)),] )

adjtime = _rpythonic_function_(		"adjtime", ctypes.c_int, [
	("__delta",		ctypes.POINTER(timeval)),
	("__olddelta",		ctypes.POINTER(timeval)),] )

getitimer = _rpythonic_function_(		"getitimer", ctypes.c_int, [
	("__which",		ctypes.c_int),
	("__value",		ctypes.POINTER(itimerval)),] )

setitimer = _rpythonic_function_(		"setitimer", ctypes.c_int, [
	("__which",		ctypes.c_int),
	("__new",		ctypes.POINTER(itimerval)),
	("__old",		ctypes.POINTER(itimerval)),] )

utimes = _rpythonic_function_(		"utimes", ctypes.c_int, [
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__tvp",		( timeval * 2 )),] )

lutimes = _rpythonic_function_(		"lutimes", ctypes.c_int, [
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__tvp",		( timeval * 2 )),] )

futimes = _rpythonic_function_(		"futimes", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__tvp",		( timeval * 2 )),] )

futimesat = _rpythonic_function_(		"futimesat", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__tvp",		( timeval * 2 )),] )

clock = _rpythonic_function_(		"clock", ctypes.c_int64, [] )

time = _rpythonic_function_(		"time", ctypes.c_int64, [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),] )

difftime = _rpythonic_function_(		"difftime", ctypes.c_double, [
	("__time1",		ctypes.c_int64),
	("__time0",		ctypes.c_int64),] )

mktime = _rpythonic_function_(		"mktime", ctypes.c_int64, [
	("__tp",		ctypes.POINTER(tm)),] )

strftime = _rpythonic_function_(		"strftime", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__maxsize",		ctypes.c_uint),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__tp",		ctypes.POINTER(tm)),] )

strptime = _rpythonic_function_(		"strptime", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__fmt",		ctypes.POINTER(ctypes.c_char)),
	("__tp",		ctypes.POINTER(tm)),] )

strftime_l = _rpythonic_function_(		"strftime_l", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__maxsize",		ctypes.c_uint),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__tp",		ctypes.POINTER(tm)),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

strptime_l = _rpythonic_function_(		"strptime_l", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__fmt",		ctypes.POINTER(ctypes.c_char)),
	("__tp",		ctypes.POINTER(tm)),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

gmtime = _rpythonic_function_(		"gmtime", ctypes.POINTER(tm), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),] )

localtime = _rpythonic_function_(		"localtime", ctypes.POINTER(tm), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),] )

gmtime_r = _rpythonic_function_(		"gmtime_r", ctypes.POINTER(tm), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),
	("__tp",		ctypes.POINTER(tm)),] )

localtime_r = _rpythonic_function_(		"localtime_r", ctypes.POINTER(tm), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),
	("__tp",		ctypes.POINTER(tm)),] )

asctime = _rpythonic_function_(		"asctime", ctypes.POINTER(ctypes.c_char), [
	("__tp",		ctypes.POINTER(tm)),] )

ctime = _rpythonic_function_(		"ctime", ctypes.POINTER(ctypes.c_char), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),] )

asctime_r = _rpythonic_function_(		"asctime_r", ctypes.POINTER(ctypes.c_char), [
	("__tp",		ctypes.POINTER(tm)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

ctime_r = _rpythonic_function_(		"ctime_r", ctypes.POINTER(ctypes.c_char), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

tzset = _rpythonic_function_(		"tzset", ctypes.c_void_p, [] )

stime = _rpythonic_function_(		"stime", ctypes.c_int, [
	("__when",		ctypes.POINTER(ctypes.c_int64)),] )

timegm = _rpythonic_function_(		"timegm", ctypes.c_int64, [
	("__tp",		ctypes.POINTER(tm)),] )

timelocal = _rpythonic_function_(		"timelocal", ctypes.c_int64, [
	("__tp",		ctypes.POINTER(tm)),] )

dysize = _rpythonic_function_(		"dysize", ctypes.c_int, [
	("__year",		ctypes.c_int),] )

nanosleep = _rpythonic_function_(		"nanosleep", ctypes.c_int, [
	("__requested_time",		ctypes.POINTER(timespec)),
	("__remaining",		ctypes.POINTER(timespec)),] )

clock_getres = _rpythonic_function_(		"clock_getres", ctypes.c_int, [
	("__clock_id",		ctypes.c_int),
	("__res",		ctypes.POINTER(timespec)),] )

clock_gettime = _rpythonic_function_(		"clock_gettime", ctypes.c_int, [
	("__clock_id",		ctypes.c_int),
	("__tp",		ctypes.POINTER(timespec)),] )

clock_settime = _rpythonic_function_(		"clock_settime", ctypes.c_int, [
	("__clock_id",		ctypes.c_int),
	("__tp",		ctypes.POINTER(timespec)),] )

clock_nanosleep = _rpythonic_function_(		"clock_nanosleep", ctypes.c_int, [
	("__clock_id",		ctypes.c_int),
	("__flags",		ctypes.c_int),
	("__req",		ctypes.POINTER(timespec)),
	("__rem",		ctypes.POINTER(timespec)),] )

clock_getcpuclockid = _rpythonic_function_(		"clock_getcpuclockid", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__clock_id",		ctypes.POINTER(ctypes.c_int)),] )

timer_create = _rpythonic_function_(		"timer_create", ctypes.c_int, [
	("__clock_id",		ctypes.c_int),
	("__evp",		ctypes.POINTER(sigevent)),
	("__timerid",		ctypes.POINTER(ctypes.c_void_p)),] )

timer_delete = _rpythonic_function_(		"timer_delete", ctypes.c_int, [("__timerid",		ctypes.c_void_p)] )

timer_settime = _rpythonic_function_(		"timer_settime", ctypes.c_int, [
	("__timerid",		ctypes.c_void_p),
	("__flags",		ctypes.c_int),
	("__value",		ctypes.POINTER(itimerspec)),
	("__ovalue",		ctypes.POINTER(itimerspec)),] )

timer_gettime = _rpythonic_function_(		"timer_gettime", ctypes.c_int, [
	("__timerid",		ctypes.c_void_p),
	("__value",		ctypes.POINTER(itimerspec)),] )

timer_getoverrun = _rpythonic_function_(		"timer_getoverrun", ctypes.c_int, [("__timerid",		ctypes.c_void_p)] )

getdate = _rpythonic_function_(		"getdate", ctypes.POINTER(tm), [
	("__string",		ctypes.POINTER(ctypes.c_char)),] )

getdate_r = _rpythonic_function_(		"getdate_r", ctypes.c_int, [
	("__string",		ctypes.POINTER(ctypes.c_char)),
	("__resbufp",		ctypes.POINTER(tm)),] )

fstat = _rpythonic_function_(		"fstat", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__buf",		ctypes.POINTER(stat)),] )

fstat64 = _rpythonic_function_(		"fstat64", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__buf",		ctypes.POINTER(stat64)),] )

fstatat = _rpythonic_function_(		"fstatat", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__buf",		ctypes.POINTER(stat)),
	("__flag",		ctypes.c_int),] )

fstatat64 = _rpythonic_function_(		"fstatat64", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__buf",		ctypes.POINTER(stat64)),
	("__flag",		ctypes.c_int),] )

lstat = _rpythonic_function_(		"lstat", ctypes.c_int, [
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__buf",		ctypes.POINTER(stat)),] )

lstat64 = _rpythonic_function_(		"lstat64", ctypes.c_int, [
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__buf",		ctypes.POINTER(stat64)),] )

chmod = _rpythonic_function_(		"chmod", ctypes.c_int, [
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__mode",		ctypes.c_uint),] )

lchmod = _rpythonic_function_(		"lchmod", ctypes.c_int, [
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__mode",		ctypes.c_uint),] )

fchmod = _rpythonic_function_(		"fchmod", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__mode",		ctypes.c_uint),] )

fchmodat = _rpythonic_function_(		"fchmodat", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__mode",		ctypes.c_uint),
	("__flag",		ctypes.c_int),] )

umask = _rpythonic_function_(		"umask", ctypes.c_uint, [
	("__mask",		ctypes.c_uint),] )

getumask = _rpythonic_function_(		"getumask", ctypes.c_uint, [] )

mkdir = _rpythonic_function_(		"mkdir", ctypes.c_int, [
	("__path",		ctypes.POINTER(ctypes.c_char)),
	("__mode",		ctypes.c_uint),] )

mkdirat = _rpythonic_function_(		"mkdirat", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__path",		ctypes.POINTER(ctypes.c_char)),
	("__mode",		ctypes.c_uint),] )

mknod = _rpythonic_function_(		"mknod", ctypes.c_int, [
	("__path",		ctypes.POINTER(ctypes.c_char)),
	("__mode",		ctypes.c_uint),
	("__dev",		ctypes.c_ulonglong),] )

mknodat = _rpythonic_function_(		"mknodat", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__path",		ctypes.POINTER(ctypes.c_char)),
	("__mode",		ctypes.c_uint),
	("__dev",		ctypes.c_ulonglong),] )

mkfifo = _rpythonic_function_(		"mkfifo", ctypes.c_int, [
	("__path",		ctypes.POINTER(ctypes.c_char)),
	("__mode",		ctypes.c_uint),] )

mkfifoat = _rpythonic_function_(		"mkfifoat", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__path",		ctypes.POINTER(ctypes.c_char)),
	("__mode",		ctypes.c_uint),] )

utimensat = _rpythonic_function_(		"utimensat", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__path",		ctypes.POINTER(ctypes.c_char)),
	("__times",		( timespec * 2 )),
	("__flags",		ctypes.c_int),] )

futimens = _rpythonic_function_(		"futimens", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__times",		( timespec * 2 )),] )

AnnotateRWLockCreate = _rpythonic_function_(		"AnnotateRWLockCreate", ctypes.c_void_p, [
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("lock",		ctypes.POINTER(ctypes.c_void_p)),] )

AnnotateRWLockDestroy = _rpythonic_function_(		"AnnotateRWLockDestroy", ctypes.c_void_p, [
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("lock",		ctypes.POINTER(ctypes.c_void_p)),] )

AnnotateRWLockAcquired = _rpythonic_function_(		"AnnotateRWLockAcquired", ctypes.c_void_p, [
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("lock",		ctypes.POINTER(ctypes.c_void_p)),
	("is_w",		ctypes.c_long),] )

AnnotateRWLockReleased = _rpythonic_function_(		"AnnotateRWLockReleased", ctypes.c_void_p, [
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("lock",		ctypes.POINTER(ctypes.c_void_p)),
	("is_w",		ctypes.c_long),] )

AnnotateBarrierInit = _rpythonic_function_(		"AnnotateBarrierInit", ctypes.c_void_p, [
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("barrier",		ctypes.POINTER(ctypes.c_void_p)),
	("count",		ctypes.c_long),
	("reinitialization_allowed",		ctypes.c_long),] )

AnnotateBarrierWaitBefore = _rpythonic_function_(		"AnnotateBarrierWaitBefore", ctypes.c_void_p, [
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("barrier",		ctypes.POINTER(ctypes.c_void_p)),] )

AnnotateBarrierWaitAfter = _rpythonic_function_(		"AnnotateBarrierWaitAfter", ctypes.c_void_p, [
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("barrier",		ctypes.POINTER(ctypes.c_void_p)),] )

AnnotateBarrierDestroy = _rpythonic_function_(		"AnnotateBarrierDestroy", ctypes.c_void_p, [
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("barrier",		ctypes.POINTER(ctypes.c_void_p)),] )

AnnotateCondVarWait = _rpythonic_function_(		"AnnotateCondVarWait", ctypes.c_void_p, [
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("cv",		ctypes.POINTER(ctypes.c_void_p)),
	("lock",		ctypes.POINTER(ctypes.c_void_p)),] )

AnnotateCondVarSignal = _rpythonic_function_(		"AnnotateCondVarSignal", ctypes.c_void_p, [
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("cv",		ctypes.POINTER(ctypes.c_void_p)),] )

AnnotateCondVarSignalAll = _rpythonic_function_(		"AnnotateCondVarSignalAll", ctypes.c_void_p, [
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("cv",		ctypes.POINTER(ctypes.c_void_p)),] )

AnnotatePublishMemoryRange = _rpythonic_function_(		"AnnotatePublishMemoryRange", ctypes.c_void_p, [
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("address",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.c_long),] )

AnnotateUnpublishMemoryRange = _rpythonic_function_(		"AnnotateUnpublishMemoryRange", ctypes.c_void_p, [
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("address",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.c_long),] )

AnnotatePCQCreate = _rpythonic_function_(		"AnnotatePCQCreate", ctypes.c_void_p, [
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("pcq",		ctypes.POINTER(ctypes.c_void_p)),] )

AnnotatePCQDestroy = _rpythonic_function_(		"AnnotatePCQDestroy", ctypes.c_void_p, [
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("pcq",		ctypes.POINTER(ctypes.c_void_p)),] )

AnnotatePCQPut = _rpythonic_function_(		"AnnotatePCQPut", ctypes.c_void_p, [
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("pcq",		ctypes.POINTER(ctypes.c_void_p)),] )

AnnotatePCQGet = _rpythonic_function_(		"AnnotatePCQGet", ctypes.c_void_p, [
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("pcq",		ctypes.POINTER(ctypes.c_void_p)),] )

AnnotateNewMemory = _rpythonic_function_(		"AnnotateNewMemory", ctypes.c_void_p, [
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("address",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.c_long),] )

AnnotateExpectRace = _rpythonic_function_(		"AnnotateExpectRace", ctypes.c_void_p, [
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("address",		ctypes.POINTER(ctypes.c_void_p)),
	("description",		ctypes.POINTER(ctypes.c_char)),] )

AnnotateBenignRace = _rpythonic_function_(		"AnnotateBenignRace", ctypes.c_void_p, [
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("address",		ctypes.POINTER(ctypes.c_void_p)),
	("description",		ctypes.POINTER(ctypes.c_char)),] )

AnnotateBenignRaceSized = _rpythonic_function_(		"AnnotateBenignRaceSized", ctypes.c_void_p, [
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("address",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.c_long),
	("description",		ctypes.POINTER(ctypes.c_char)),] )

AnnotateMutexIsUsedAsCondVar = _rpythonic_function_(		"AnnotateMutexIsUsedAsCondVar", ctypes.c_void_p, [
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("mu",		ctypes.POINTER(ctypes.c_void_p)),] )

AnnotateTraceMemory = _rpythonic_function_(		"AnnotateTraceMemory", ctypes.c_void_p, [
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),] )

AnnotateThreadName = _rpythonic_function_(		"AnnotateThreadName", ctypes.c_void_p, [
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

AnnotateIgnoreReadsBegin = _rpythonic_function_(		"AnnotateIgnoreReadsBegin", ctypes.c_void_p, [
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),] )

AnnotateIgnoreReadsEnd = _rpythonic_function_(		"AnnotateIgnoreReadsEnd", ctypes.c_void_p, [
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),] )

AnnotateIgnoreWritesBegin = _rpythonic_function_(		"AnnotateIgnoreWritesBegin", ctypes.c_void_p, [
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),] )

AnnotateIgnoreWritesEnd = _rpythonic_function_(		"AnnotateIgnoreWritesEnd", ctypes.c_void_p, [
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),] )

AnnotateEnableRaceDetection = _rpythonic_function_(		"AnnotateEnableRaceDetection", ctypes.c_void_p, [
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("enable",		ctypes.c_int),] )

AnnotateNoOp = _rpythonic_function_(		"AnnotateNoOp", ctypes.c_void_p, [
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),] )

AnnotateFlushState = _rpythonic_function_(		"AnnotateFlushState", ctypes.c_void_p, [
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),] )

RunningOnValgrind = _rpythonic_function_(		"RunningOnValgrind", ctypes.c_int, [] )

_Py_force_double = _rpythonic_function_(		"_Py_force_double", ctypes.c_double, [
	("none",		ctypes.c_double),] )

_Py_get_387controlword = _rpythonic_function_(		"_Py_get_387controlword", ctypes.c_ushort, [] )

_Py_set_387controlword = _rpythonic_function_(		"_Py_set_387controlword", ctypes.c_void_p, [
	("none",		ctypes.c_ushort),] )

_PyTime_gettimeofday = _rpythonic_function_(		"_PyTime_gettimeofday", ctypes.c_void_p, [
	("tp",		ctypes.POINTER(timeval)),] )

_PyTime_Init = _rpythonic_function_(		"_PyTime_Init", ctypes.c_void_p, [] )

PyMem_Malloc = _rpythonic_function_(		"PyMem_Malloc", ctypes.POINTER(ctypes.c_void_p), [
	("none",		ctypes.c_uint),] )

PyMem_Realloc = _rpythonic_function_(		"PyMem_Realloc", ctypes.POINTER(ctypes.c_void_p), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_uint),] )

PyMem_Free = _rpythonic_function_(		"PyMem_Free", ctypes.c_void_p, [] )

unaryfunc = _rpythonic_function_(		"unaryfunc", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

binaryfunc = _rpythonic_function_(		"binaryfunc", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

ternaryfunc = _rpythonic_function_(		"ternaryfunc", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

inquiry = _rpythonic_function_(		"inquiry", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

lenfunc = _rpythonic_function_(		"lenfunc", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

ssizeargfunc = _rpythonic_function_(		"ssizeargfunc", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

ssizessizeargfunc = _rpythonic_function_(		"ssizessizeargfunc", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

ssizeobjargproc = _rpythonic_function_(		"ssizeobjargproc", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

ssizessizeobjargproc = _rpythonic_function_(		"ssizessizeobjargproc", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

objobjargproc = _rpythonic_function_(		"objobjargproc", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

getbufferproc = _rpythonic_function_(		"getbufferproc", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

releasebufferproc = _rpythonic_function_(		"releasebufferproc", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

objobjproc = _rpythonic_function_(		"objobjproc", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

visitproc = _rpythonic_function_(		"visitproc", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

traverseproc = _rpythonic_function_(		"traverseproc", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

freefunc = _rpythonic_function_(		"freefunc", ctypes.c_void_p, [] )

destructor = _rpythonic_function_(		"destructor", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

printfunc = _rpythonic_function_(		"printfunc", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

getattrfunc = _rpythonic_function_(		"getattrfunc", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

getattrofunc = _rpythonic_function_(		"getattrofunc", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

setattrfunc = _rpythonic_function_(		"setattrfunc", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

setattrofunc = _rpythonic_function_(		"setattrofunc", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

reprfunc = _rpythonic_function_(		"reprfunc", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

hashfunc = _rpythonic_function_(		"hashfunc", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

richcmpfunc = _rpythonic_function_(		"richcmpfunc", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

getiterfunc = _rpythonic_function_(		"getiterfunc", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

iternextfunc = _rpythonic_function_(		"iternextfunc", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

descrgetfunc = _rpythonic_function_(		"descrgetfunc", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

descrsetfunc = _rpythonic_function_(		"descrsetfunc", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

initproc = _rpythonic_function_(		"initproc", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

newfunc = _rpythonic_function_(		"newfunc", ctypes.POINTER(_object), [
	("_typeobject",		ctypes.POINTER(_typeobject)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

allocfunc = _rpythonic_function_(		"allocfunc", ctypes.POINTER(_object), [
	("_typeobject",		ctypes.POINTER(_typeobject)),
	("none",		ctypes.c_int),] )

PyType_FromSpec = _rpythonic_function_(		"PyType_FromSpec", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyType_IsSubtype = _rpythonic_function_(		"PyType_IsSubtype", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyType_GetFlags = _rpythonic_function_(		"PyType_GetFlags", ctypes.c_long, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyType_Ready = _rpythonic_function_(		"PyType_Ready", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyType_GenericAlloc = _rpythonic_function_(		"PyType_GenericAlloc", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

PyType_GenericNew = _rpythonic_function_(		"PyType_GenericNew", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_PyType_Lookup = _rpythonic_function_(		"_PyType_Lookup", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_PyObject_LookupSpecial = _rpythonic_function_(		"_PyObject_LookupSpecial", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

PyType_ClearCache = _rpythonic_function_(		"PyType_ClearCache", ctypes.c_uint, [] )

PyType_Modified = _rpythonic_function_(		"PyType_Modified", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyObject_Print = _rpythonic_function_(		"PyObject_Print", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

_Py_BreakPoint = _rpythonic_function_(		"_Py_BreakPoint", ctypes.c_void_p, [] )

_PyObject_Dump = _rpythonic_function_(		"_PyObject_Dump", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyObject_Repr = _rpythonic_function_(		"PyObject_Repr", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyObject_Str = _rpythonic_function_(		"PyObject_Str", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyObject_ASCII = _rpythonic_function_(		"PyObject_ASCII", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyObject_Bytes = _rpythonic_function_(		"PyObject_Bytes", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyObject_RichCompare = _rpythonic_function_(		"PyObject_RichCompare", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

PyObject_RichCompareBool = _rpythonic_function_(		"PyObject_RichCompareBool", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

PyObject_GetAttrString = _rpythonic_function_(		"PyObject_GetAttrString", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

PyObject_SetAttrString = _rpythonic_function_(		"PyObject_SetAttrString", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyObject_HasAttrString = _rpythonic_function_(		"PyObject_HasAttrString", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

PyObject_GetAttr = _rpythonic_function_(		"PyObject_GetAttr", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyObject_SetAttr = _rpythonic_function_(		"PyObject_SetAttr", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyObject_HasAttr = _rpythonic_function_(		"PyObject_HasAttr", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_PyObject_GetDictPtr = _rpythonic_function_(		"_PyObject_GetDictPtr", ctypes.POINTER(ctypes.POINTER(_object)), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyObject_SelfIter = _rpythonic_function_(		"PyObject_SelfIter", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_PyObject_NextNotImplemented = _rpythonic_function_(		"_PyObject_NextNotImplemented", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyObject_GenericGetAttr = _rpythonic_function_(		"PyObject_GenericGetAttr", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyObject_GenericSetAttr = _rpythonic_function_(		"PyObject_GenericSetAttr", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyObject_Hash = _rpythonic_function_(		"PyObject_Hash", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyObject_HashNotImplemented = _rpythonic_function_(		"PyObject_HashNotImplemented", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyObject_IsTrue = _rpythonic_function_(		"PyObject_IsTrue", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyObject_Not = _rpythonic_function_(		"PyObject_Not", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyCallable_Check = _rpythonic_function_(		"PyCallable_Check", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyObject_ClearWeakRefs = _rpythonic_function_(		"PyObject_ClearWeakRefs", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_PyObject_GenericGetAttrWithDict = _rpythonic_function_(		"_PyObject_GenericGetAttrWithDict", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_PyObject_GenericSetAttrWithDict = _rpythonic_function_(		"_PyObject_GenericSetAttrWithDict", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyObject_Dir = _rpythonic_function_(		"PyObject_Dir", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

Py_ReprEnter = _rpythonic_function_(		"Py_ReprEnter", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

Py_ReprLeave = _rpythonic_function_(		"Py_ReprLeave", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_Py_HashDouble = _rpythonic_function_(		"_Py_HashDouble", ctypes.c_int, [
	("none",		ctypes.c_double),] )

_Py_HashPointer = _rpythonic_function_(		"_Py_HashPointer", ctypes.c_int, [] )

Py_IncRef = _rpythonic_function_(		"Py_IncRef", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

Py_DecRef = _rpythonic_function_(		"Py_DecRef", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_PyTrash_deposit_object = _rpythonic_function_(		"_PyTrash_deposit_object", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_PyTrash_destroy_chain = _rpythonic_function_(		"_PyTrash_destroy_chain", ctypes.c_void_p, [] )

PyObject_Malloc = _rpythonic_function_(		"PyObject_Malloc", ctypes.POINTER(ctypes.c_void_p), [
	("none",		ctypes.c_uint),] )

PyObject_Realloc = _rpythonic_function_(		"PyObject_Realloc", ctypes.POINTER(ctypes.c_void_p), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_uint),] )

PyObject_Free = _rpythonic_function_(		"PyObject_Free", ctypes.c_void_p, [] )

PyObject_Init = _rpythonic_function_(		"PyObject_Init", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyObject_InitVar = _rpythonic_function_(		"PyObject_InitVar", ctypes.POINTER(PyVarObject), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

_PyObject_New = _rpythonic_function_(		"_PyObject_New", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_PyObject_NewVar = _rpythonic_function_(		"_PyObject_NewVar", ctypes.POINTER(PyVarObject), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

PyGC_Collect = _rpythonic_function_(		"PyGC_Collect", ctypes.c_int, [] )

_PyObject_GC_Resize = _rpythonic_function_(		"_PyObject_GC_Resize", ctypes.POINTER(PyVarObject), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

_PyObject_GC_Malloc = _rpythonic_function_(		"_PyObject_GC_Malloc", ctypes.POINTER(_object), [
	("none",		ctypes.c_uint),] )

_PyObject_GC_New = _rpythonic_function_(		"_PyObject_GC_New", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_PyObject_GC_NewVar = _rpythonic_function_(		"_PyObject_GC_NewVar", ctypes.POINTER(PyVarObject), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

PyObject_GC_Track = _rpythonic_function_(		"PyObject_GC_Track", ctypes.c_void_p, [] )

PyObject_GC_UnTrack = _rpythonic_function_(		"PyObject_GC_UnTrack", ctypes.c_void_p, [] )

PyObject_GC_Del = _rpythonic_function_(		"PyObject_GC_Del", ctypes.c_void_p, [] )

Py_FatalError = _rpythonic_function_(		"Py_FatalError", ctypes.c_void_p, [
	("message",		ctypes.POINTER(ctypes.c_char)),] )

PyByteArray_FromObject = _rpythonic_function_(		"PyByteArray_FromObject", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyByteArray_Concat = _rpythonic_function_(		"PyByteArray_Concat", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyByteArray_FromStringAndSize = _rpythonic_function_(		"PyByteArray_FromStringAndSize", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),] )

PyByteArray_Size = _rpythonic_function_(		"PyByteArray_Size", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyByteArray_AsString = _rpythonic_function_(		"PyByteArray_AsString", ctypes.POINTER(ctypes.c_char), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyByteArray_Resize = _rpythonic_function_(		"PyByteArray_Resize", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

PyBytes_FromStringAndSize = _rpythonic_function_(		"PyBytes_FromStringAndSize", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),] )

PyBytes_FromString = _rpythonic_function_(		"PyBytes_FromString", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_char)),] )

PyBytes_FromObject = _rpythonic_function_(		"PyBytes_FromObject", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyBytes_FromFormatV = _rpythonic_function_(		"PyBytes_FromFormatV", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_char),] )

PyBytes_FromFormat = _rpythonic_function_(		"PyBytes_FromFormat", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_char)),] )

PyBytes_Size = _rpythonic_function_(		"PyBytes_Size", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyBytes_AsString = _rpythonic_function_(		"PyBytes_AsString", ctypes.POINTER(ctypes.c_char), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyBytes_Repr = _rpythonic_function_(		"PyBytes_Repr", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

PyBytes_Concat = _rpythonic_function_(		"PyBytes_Concat", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyBytes_ConcatAndDel = _rpythonic_function_(		"PyBytes_ConcatAndDel", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_PyBytes_Resize = _rpythonic_function_(		"_PyBytes_Resize", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("none",		ctypes.c_int),] )

_PyBytes_FormatLong = _rpythonic_function_(		"_PyBytes_FormatLong", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

PyBytes_DecodeEscape = _rpythonic_function_(		"PyBytes_DecodeEscape", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

_PyBytes_Join = _rpythonic_function_(		"_PyBytes_Join", ctypes.POINTER(_object), [
	("sep",		ctypes.POINTER(_object)),
	("x",		ctypes.POINTER(_object)),] )

PyBytes_AsStringAndSize = _rpythonic_function_(		"PyBytes_AsStringAndSize", ctypes.c_int, [
	("obj",		ctypes.POINTER(_object)),
	("s",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("C_len",		ctypes.POINTER(ctypes.c_int)),] )

_PyBytes_InsertThousandsGroupingLocale = _rpythonic_function_(		"_PyBytes_InsertThousandsGroupingLocale", ctypes.c_int, [
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("n_buffer",		ctypes.c_int),
	("digits",		ctypes.POINTER(ctypes.c_char)),
	("n_digits",		ctypes.c_int),
	("min_width",		ctypes.c_int),] )

_PyBytes_InsertThousandsGrouping = _rpythonic_function_(		"_PyBytes_InsertThousandsGrouping", ctypes.c_int, [
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("n_buffer",		ctypes.c_int),
	("digits",		ctypes.POINTER(ctypes.c_char)),
	("n_digits",		ctypes.c_int),
	("min_width",		ctypes.c_int),
	("grouping",		ctypes.POINTER(ctypes.c_char)),
	("thousands_sep",		ctypes.POINTER(ctypes.c_char)),] )

isalnum = _rpythonic_function_(		"isalnum", ctypes.c_int, [
	("none",		ctypes.c_int),] )

isalpha = _rpythonic_function_(		"isalpha", ctypes.c_int, [
	("none",		ctypes.c_int),] )

iscntrl = _rpythonic_function_(		"iscntrl", ctypes.c_int, [
	("none",		ctypes.c_int),] )

isdigit = _rpythonic_function_(		"isdigit", ctypes.c_int, [
	("none",		ctypes.c_int),] )

islower = _rpythonic_function_(		"islower", ctypes.c_int, [
	("none",		ctypes.c_int),] )

isgraph = _rpythonic_function_(		"isgraph", ctypes.c_int, [
	("none",		ctypes.c_int),] )

isprint = _rpythonic_function_(		"isprint", ctypes.c_int, [
	("none",		ctypes.c_int),] )

ispunct = _rpythonic_function_(		"ispunct", ctypes.c_int, [
	("none",		ctypes.c_int),] )

isspace = _rpythonic_function_(		"isspace", ctypes.c_int, [
	("none",		ctypes.c_int),] )

isupper = _rpythonic_function_(		"isupper", ctypes.c_int, [
	("none",		ctypes.c_int),] )

isxdigit = _rpythonic_function_(		"isxdigit", ctypes.c_int, [
	("none",		ctypes.c_int),] )

tolower = _rpythonic_function_(		"tolower", ctypes.c_int, [
	("__c",		ctypes.c_int),] )

toupper = _rpythonic_function_(		"toupper", ctypes.c_int, [
	("__c",		ctypes.c_int),] )

isblank = _rpythonic_function_(		"isblank", ctypes.c_int, [
	("none",		ctypes.c_int),] )

isctype = _rpythonic_function_(		"isctype", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__mask",		ctypes.c_int),] )

isascii = _rpythonic_function_(		"isascii", ctypes.c_int, [
	("__c",		ctypes.c_int),] )

toascii = _rpythonic_function_(		"toascii", ctypes.c_int, [
	("__c",		ctypes.c_int),] )

_toupper = _rpythonic_function_(		"_toupper", ctypes.c_int, [
	("none",		ctypes.c_int),] )

_tolower = _rpythonic_function_(		"_tolower", ctypes.c_int, [
	("none",		ctypes.c_int),] )

isalnum_l = _rpythonic_function_(		"isalnum_l", ctypes.c_int, [
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

isalpha_l = _rpythonic_function_(		"isalpha_l", ctypes.c_int, [
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

iscntrl_l = _rpythonic_function_(		"iscntrl_l", ctypes.c_int, [
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

isdigit_l = _rpythonic_function_(		"isdigit_l", ctypes.c_int, [
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

islower_l = _rpythonic_function_(		"islower_l", ctypes.c_int, [
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

isgraph_l = _rpythonic_function_(		"isgraph_l", ctypes.c_int, [
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

isprint_l = _rpythonic_function_(		"isprint_l", ctypes.c_int, [
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

ispunct_l = _rpythonic_function_(		"ispunct_l", ctypes.c_int, [
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

isspace_l = _rpythonic_function_(		"isspace_l", ctypes.c_int, [
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

isupper_l = _rpythonic_function_(		"isupper_l", ctypes.c_int, [
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

isxdigit_l = _rpythonic_function_(		"isxdigit_l", ctypes.c_int, [
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

isblank_l = _rpythonic_function_(		"isblank_l", ctypes.c_int, [
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

tolower_l = _rpythonic_function_(		"tolower_l", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__l",		ctypes.POINTER(__locale_struct)),] )

toupper_l = _rpythonic_function_(		"toupper_l", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__l",		ctypes.POINTER(__locale_struct)),] )

wcscpy = _rpythonic_function_(		"wcscpy", ctypes.POINTER(ctypes.c_int), [
	("__dest",		ctypes.POINTER(ctypes.c_int)),
	("__src",		ctypes.POINTER(ctypes.c_int)),] )

wcsncpy = _rpythonic_function_(		"wcsncpy", ctypes.POINTER(ctypes.c_int), [
	("__dest",		ctypes.POINTER(ctypes.c_int)),
	("__src",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),] )

wcscat = _rpythonic_function_(		"wcscat", ctypes.POINTER(ctypes.c_int), [
	("__dest",		ctypes.POINTER(ctypes.c_int)),
	("__src",		ctypes.POINTER(ctypes.c_int)),] )

wcsncat = _rpythonic_function_(		"wcsncat", ctypes.POINTER(ctypes.c_int), [
	("__dest",		ctypes.POINTER(ctypes.c_int)),
	("__src",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),] )

wcscmp = _rpythonic_function_(		"wcscmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_int)),
	("__s2",		ctypes.POINTER(ctypes.c_int)),] )

wcsncmp = _rpythonic_function_(		"wcsncmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_int)),
	("__s2",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),] )

wcscasecmp = _rpythonic_function_(		"wcscasecmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_int)),
	("__s2",		ctypes.POINTER(ctypes.c_int)),] )

wcsncasecmp = _rpythonic_function_(		"wcsncasecmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_int)),
	("__s2",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),] )

wcscasecmp_l = _rpythonic_function_(		"wcscasecmp_l", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_int)),
	("__s2",		ctypes.POINTER(ctypes.c_int)),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

wcsncasecmp_l = _rpythonic_function_(		"wcsncasecmp_l", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_int)),
	("__s2",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

wcscoll = _rpythonic_function_(		"wcscoll", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_int)),
	("__s2",		ctypes.POINTER(ctypes.c_int)),] )

wcsxfrm = _rpythonic_function_(		"wcsxfrm", ctypes.c_uint, [
	("__s1",		ctypes.POINTER(ctypes.c_int)),
	("__s2",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),] )

wcscoll_l = _rpythonic_function_(		"wcscoll_l", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_int)),
	("__s2",		ctypes.POINTER(ctypes.c_int)),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

wcsxfrm_l = _rpythonic_function_(		"wcsxfrm_l", ctypes.c_uint, [
	("__s1",		ctypes.POINTER(ctypes.c_int)),
	("__s2",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

wcsdup = _rpythonic_function_(		"wcsdup", ctypes.POINTER(ctypes.c_int), [
	("__s",		ctypes.POINTER(ctypes.c_int)),] )

wcschr = _rpythonic_function_(		"wcschr", ctypes.POINTER(ctypes.c_int), [
	("__wcs",		ctypes.POINTER(ctypes.c_int)),
	("__wc",		ctypes.c_int),] )

wcsrchr = _rpythonic_function_(		"wcsrchr", ctypes.POINTER(ctypes.c_int), [
	("__wcs",		ctypes.POINTER(ctypes.c_int)),
	("__wc",		ctypes.c_int),] )

wcschrnul = _rpythonic_function_(		"wcschrnul", ctypes.POINTER(ctypes.c_int), [
	("__s",		ctypes.POINTER(ctypes.c_int)),
	("__wc",		ctypes.c_int),] )

wcscspn = _rpythonic_function_(		"wcscspn", ctypes.c_uint, [
	("__wcs",		ctypes.POINTER(ctypes.c_int)),
	("__reject",		ctypes.POINTER(ctypes.c_int)),] )

wcsspn = _rpythonic_function_(		"wcsspn", ctypes.c_uint, [
	("__wcs",		ctypes.POINTER(ctypes.c_int)),
	("__accept",		ctypes.POINTER(ctypes.c_int)),] )

wcspbrk = _rpythonic_function_(		"wcspbrk", ctypes.POINTER(ctypes.c_int), [
	("__wcs",		ctypes.POINTER(ctypes.c_int)),
	("__accept",		ctypes.POINTER(ctypes.c_int)),] )

wcsstr = _rpythonic_function_(		"wcsstr", ctypes.POINTER(ctypes.c_int), [
	("__haystack",		ctypes.POINTER(ctypes.c_int)),
	("__needle",		ctypes.POINTER(ctypes.c_int)),] )

wcstok = _rpythonic_function_(		"wcstok", ctypes.POINTER(ctypes.c_int), [
	("__s",		ctypes.POINTER(ctypes.c_int)),
	("__delim",		ctypes.POINTER(ctypes.c_int)),
	("__ptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),] )

wcslen = _rpythonic_function_(		"wcslen", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_int)),] )

wcswcs = _rpythonic_function_(		"wcswcs", ctypes.POINTER(ctypes.c_int), [
	("__haystack",		ctypes.POINTER(ctypes.c_int)),
	("__needle",		ctypes.POINTER(ctypes.c_int)),] )

wcsnlen = _rpythonic_function_(		"wcsnlen", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_int)),
	("__maxlen",		ctypes.c_uint),] )

wmemchr = _rpythonic_function_(		"wmemchr", ctypes.POINTER(ctypes.c_int), [
	("__s",		ctypes.POINTER(ctypes.c_int)),
	("__c",		ctypes.c_int),
	("__n",		ctypes.c_uint),] )

wmemcmp = _rpythonic_function_(		"wmemcmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_int)),
	("__s2",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),] )

wmemcpy = _rpythonic_function_(		"wmemcpy", ctypes.POINTER(ctypes.c_int), [
	("__s1",		ctypes.POINTER(ctypes.c_int)),
	("__s2",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),] )

wmemmove = _rpythonic_function_(		"wmemmove", ctypes.POINTER(ctypes.c_int), [
	("__s1",		ctypes.POINTER(ctypes.c_int)),
	("__s2",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),] )

wmemset = _rpythonic_function_(		"wmemset", ctypes.POINTER(ctypes.c_int), [
	("__s",		ctypes.POINTER(ctypes.c_int)),
	("__c",		ctypes.c_int),
	("__n",		ctypes.c_uint),] )

wmempcpy = _rpythonic_function_(		"wmempcpy", ctypes.POINTER(ctypes.c_int), [
	("__s1",		ctypes.POINTER(ctypes.c_int)),
	("__s2",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),] )

btowc = _rpythonic_function_(		"btowc", ctypes.c_uint, [
	("__c",		ctypes.c_int),] )

wctob = _rpythonic_function_(		"wctob", ctypes.c_int, [
	("__c",		ctypes.c_uint),] )

mbsinit = _rpythonic_function_(		"mbsinit", ctypes.c_int, [
	("__ps",		ctypes.POINTER(__mbstate_t)),] )

mbrtowc = _rpythonic_function_(		"mbrtowc", ctypes.c_uint, [
	("__pwc",		ctypes.POINTER(ctypes.c_int)),
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),
	("__p",		ctypes.POINTER(__mbstate_t)),] )

wcrtomb = _rpythonic_function_(		"wcrtomb", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__wc",		ctypes.c_int),
	("__ps",		ctypes.POINTER(__mbstate_t)),] )

mbrlen = _rpythonic_function_(		"mbrlen", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),
	("__ps",		ctypes.POINTER(__mbstate_t)),] )

mbsrtowcs = _rpythonic_function_(		"mbsrtowcs", ctypes.c_uint, [
	("__dst",		ctypes.POINTER(ctypes.c_int)),
	("__src",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__len",		ctypes.c_uint),
	("__ps",		ctypes.POINTER(__mbstate_t)),] )

wcsrtombs = _rpythonic_function_(		"wcsrtombs", ctypes.c_uint, [
	("__dst",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__len",		ctypes.c_uint),
	("__ps",		ctypes.POINTER(__mbstate_t)),] )

mbsnrtowcs = _rpythonic_function_(		"mbsnrtowcs", ctypes.c_uint, [
	("__dst",		ctypes.POINTER(ctypes.c_int)),
	("__src",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__nmc",		ctypes.c_uint),
	("__len",		ctypes.c_uint),
	("__ps",		ctypes.POINTER(__mbstate_t)),] )

wcsnrtombs = _rpythonic_function_(		"wcsnrtombs", ctypes.c_uint, [
	("__dst",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__nwc",		ctypes.c_uint),
	("__len",		ctypes.c_uint),
	("__ps",		ctypes.POINTER(__mbstate_t)),] )

wcwidth = _rpythonic_function_(		"wcwidth", ctypes.c_int, [
	("__c",		ctypes.c_int),] )

wcswidth = _rpythonic_function_(		"wcswidth", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),] )

wcstod = _rpythonic_function_(		"wcstod", ctypes.c_double, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),] )

wcstof = _rpythonic_function_(		"wcstof", ctypes.c_float, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),] )

wcstold = _rpythonic_function_(		"wcstold", ctypes.c_double, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),] )

wcstol = _rpythonic_function_(		"wcstol", ctypes.c_int64, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__base",		ctypes.c_int),] )

wcstoul = _rpythonic_function_(		"wcstoul", ctypes.c_uint64, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__base",		ctypes.c_int),] )

wcstoll = _rpythonic_function_(		"wcstoll", ctypes.c_longlong, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__base",		ctypes.c_int),] )

wcstoull = _rpythonic_function_(		"wcstoull", ctypes.c_ulonglong, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__base",		ctypes.c_int),] )

wcstoq = _rpythonic_function_(		"wcstoq", ctypes.c_longlong, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__base",		ctypes.c_int),] )

wcstouq = _rpythonic_function_(		"wcstouq", ctypes.c_ulonglong, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__base",		ctypes.c_int),] )

wcstol_l = _rpythonic_function_(		"wcstol_l", ctypes.c_int64, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__base",		ctypes.c_int),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

wcstoul_l = _rpythonic_function_(		"wcstoul_l", ctypes.c_uint64, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__base",		ctypes.c_int),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

wcstoll_l = _rpythonic_function_(		"wcstoll_l", ctypes.c_longlong, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__base",		ctypes.c_int),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

wcstoull_l = _rpythonic_function_(		"wcstoull_l", ctypes.c_ulonglong, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__base",		ctypes.c_int),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

wcstod_l = _rpythonic_function_(		"wcstod_l", ctypes.c_double, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

wcstof_l = _rpythonic_function_(		"wcstof_l", ctypes.c_float, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

wcstold_l = _rpythonic_function_(		"wcstold_l", ctypes.c_double, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

wcpcpy = _rpythonic_function_(		"wcpcpy", ctypes.POINTER(ctypes.c_int), [
	("__dest",		ctypes.POINTER(ctypes.c_int)),
	("__src",		ctypes.POINTER(ctypes.c_int)),] )

wcpncpy = _rpythonic_function_(		"wcpncpy", ctypes.POINTER(ctypes.c_int), [
	("__dest",		ctypes.POINTER(ctypes.c_int)),
	("__src",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),] )

open_wmemstream = _rpythonic_function_(		"open_wmemstream", ctypes.POINTER(_IO_FILE), [
	("__bufloc",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__sizeloc",		ctypes.POINTER(ctypes.c_uint)),] )

fwide = _rpythonic_function_(		"fwide", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),
	("__mode",		ctypes.c_int),] )

fwprintf = _rpythonic_function_(		"fwprintf", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_int)),] )

wprintf = _rpythonic_function_(		"wprintf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_int)),] )

swprintf = _rpythonic_function_(		"swprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),
	("__format",		ctypes.POINTER(ctypes.c_int)),] )

vfwprintf = _rpythonic_function_(		"vfwprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_int)),
	("__arg",		ctypes.c_char),] )

vwprintf = _rpythonic_function_(		"vwprintf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_int)),
	("__arg",		ctypes.c_char),] )

vswprintf = _rpythonic_function_(		"vswprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),
	("__format",		ctypes.POINTER(ctypes.c_int)),
	("__arg",		ctypes.c_char),] )

fwscanf = _rpythonic_function_(		"fwscanf", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_int)),] )

wscanf = _rpythonic_function_(		"wscanf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_int)),] )

swscanf = _rpythonic_function_(		"swscanf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_int)),
	("__format",		ctypes.POINTER(ctypes.c_int)),] )

vfwscanf = _rpythonic_function_(		"vfwscanf", ctypes.c_int, [
	("__s",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_int)),
	("__arg",		ctypes.c_char),] )

vwscanf = _rpythonic_function_(		"vwscanf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_int)),
	("__arg",		ctypes.c_char),] )

vswscanf = _rpythonic_function_(		"vswscanf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_int)),
	("__format",		ctypes.POINTER(ctypes.c_int)),
	("__arg",		ctypes.c_char),] )

fgetwc = _rpythonic_function_(		"fgetwc", ctypes.c_uint, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getwc = _rpythonic_function_(		"getwc", ctypes.c_uint, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getwchar = _rpythonic_function_(		"getwchar", ctypes.c_uint, [] )

fputwc = _rpythonic_function_(		"fputwc", ctypes.c_uint, [
	("__wc",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putwc = _rpythonic_function_(		"putwc", ctypes.c_uint, [
	("__wc",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putwchar = _rpythonic_function_(		"putwchar", ctypes.c_uint, [
	("__wc",		ctypes.c_int),] )

fgetws = _rpythonic_function_(		"fgetws", ctypes.POINTER(ctypes.c_int), [
	("__ws",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fputws = _rpythonic_function_(		"fputws", ctypes.c_int, [
	("__ws",		ctypes.POINTER(ctypes.c_int)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ungetwc = _rpythonic_function_(		"ungetwc", ctypes.c_uint, [
	("__wc",		ctypes.c_uint),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getwc_unlocked = _rpythonic_function_(		"getwc_unlocked", ctypes.c_uint, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getwchar_unlocked = _rpythonic_function_(		"getwchar_unlocked", ctypes.c_uint, [] )

fgetwc_unlocked = _rpythonic_function_(		"fgetwc_unlocked", ctypes.c_uint, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fputwc_unlocked = _rpythonic_function_(		"fputwc_unlocked", ctypes.c_uint, [
	("__wc",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putwc_unlocked = _rpythonic_function_(		"putwc_unlocked", ctypes.c_uint, [
	("__wc",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putwchar_unlocked = _rpythonic_function_(		"putwchar_unlocked", ctypes.c_uint, [
	("__wc",		ctypes.c_int),] )

fgetws_unlocked = _rpythonic_function_(		"fgetws_unlocked", ctypes.POINTER(ctypes.c_int), [
	("__ws",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fputws_unlocked = _rpythonic_function_(		"fputws_unlocked", ctypes.c_int, [
	("__ws",		ctypes.POINTER(ctypes.c_int)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

wcsftime = _rpythonic_function_(		"wcsftime", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_int)),
	("__maxsize",		ctypes.c_uint),
	("__format",		ctypes.POINTER(ctypes.c_int)),
	("__tp",		ctypes.POINTER(tm)),] )

wcsftime_l = _rpythonic_function_(		"wcsftime_l", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_int)),
	("__maxsize",		ctypes.c_uint),
	("__format",		ctypes.POINTER(ctypes.c_int)),
	("__tp",		ctypes.POINTER(tm)),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

PyUnicodeUCS4_FromUnicode = _rpythonic_function_(		"PyUnicodeUCS4_FromUnicode", ctypes.POINTER(_object), [
	("u",		ctypes.POINTER(ctypes.c_ulong)),
	("size",		ctypes.c_int),] )

PyUnicodeUCS4_FromStringAndSize = _rpythonic_function_(		"PyUnicodeUCS4_FromStringAndSize", ctypes.POINTER(_object), [
	("u",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_int),] )

PyUnicodeUCS4_FromString = _rpythonic_function_(		"PyUnicodeUCS4_FromString", ctypes.POINTER(_object), [
	("u",		ctypes.POINTER(ctypes.c_char)),] )

PyUnicodeUCS4_AsUnicode = _rpythonic_function_(		"PyUnicodeUCS4_AsUnicode", ctypes.POINTER(ctypes.c_ulong), [
	("unicode",		ctypes.POINTER(_object)),] )

PyUnicodeUCS4_GetSize = _rpythonic_function_(		"PyUnicodeUCS4_GetSize", ctypes.c_int, [
	("unicode",		ctypes.POINTER(_object)),] )

PyUnicodeUCS4_GetMax = _rpythonic_function_(		"PyUnicodeUCS4_GetMax", ctypes.c_ulong, [] )

PyUnicodeUCS4_Resize = _rpythonic_function_(		"PyUnicodeUCS4_Resize", ctypes.c_int, [
	("unicode",		ctypes.POINTER(ctypes.POINTER(_object))),
	("length",		ctypes.c_int),] )

PyUnicodeUCS4_FromEncodedObject = _rpythonic_function_(		"PyUnicodeUCS4_FromEncodedObject", ctypes.POINTER(_object), [
	("obj",		ctypes.POINTER(_object)),
	("encoding",		ctypes.POINTER(ctypes.c_char)),
	("errors",		ctypes.POINTER(ctypes.c_char)),] )

PyUnicodeUCS4_FromObject = _rpythonic_function_(		"PyUnicodeUCS4_FromObject", ctypes.POINTER(_object), [
	("obj",		ctypes.POINTER(_object)),] )

PyUnicodeUCS4_FromFormatV = _rpythonic_function_(		"PyUnicodeUCS4_FromFormatV", ctypes.POINTER(_object), [
	("format",		ctypes.POINTER(ctypes.c_char)),
	("vargs",		ctypes.c_char),] )

PyUnicodeUCS4_FromFormat = _rpythonic_function_(		"PyUnicodeUCS4_FromFormat", ctypes.POINTER(_object), [
	("format",		ctypes.POINTER(ctypes.c_char)),] )

_PyUnicode_FormatAdvanced = _rpythonic_function_(		"_PyUnicode_FormatAdvanced", ctypes.POINTER(_object), [
	("obj",		ctypes.POINTER(_object)),
	("format_spec",		ctypes.POINTER(ctypes.c_ulong)),
	("format_spec_len",		ctypes.c_int),] )

PyUnicode_InternInPlace = _rpythonic_function_(		"PyUnicode_InternInPlace", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

PyUnicode_InternImmortal = _rpythonic_function_(		"PyUnicode_InternImmortal", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

PyUnicode_InternFromString = _rpythonic_function_(		"PyUnicode_InternFromString", ctypes.POINTER(_object), [
	("u",		ctypes.POINTER(ctypes.c_char)),] )

_Py_ReleaseInternedUnicodeStrings = _rpythonic_function_(		"_Py_ReleaseInternedUnicodeStrings", ctypes.c_void_p, [] )

PyUnicodeUCS4_FromWideChar = _rpythonic_function_(		"PyUnicodeUCS4_FromWideChar", ctypes.POINTER(_object), [
	("w",		ctypes.POINTER(ctypes.c_int)),
	("size",		ctypes.c_int),] )

PyUnicodeUCS4_AsWideChar = _rpythonic_function_(		"PyUnicodeUCS4_AsWideChar", ctypes.c_int, [
	("unicode",		ctypes.POINTER(_object)),
	("w",		ctypes.POINTER(ctypes.c_int)),
	("size",		ctypes.c_int),] )

PyUnicodeUCS4_AsWideCharString = _rpythonic_function_(		"PyUnicodeUCS4_AsWideCharString", ctypes.POINTER(ctypes.c_int), [
	("unicode",		ctypes.POINTER(_object)),
	("size",		ctypes.POINTER(ctypes.c_int)),] )

PyUnicodeUCS4_FromOrdinal = _rpythonic_function_(		"PyUnicodeUCS4_FromOrdinal", ctypes.POINTER(_object), [
	("ordinal",		ctypes.c_int),] )

PyUnicodeUCS4_ClearFreelist = _rpythonic_function_(		"PyUnicodeUCS4_ClearFreelist", ctypes.c_int, [] )

_PyUnicodeUCS4_AsDefaultEncodedString = _rpythonic_function_(		"_PyUnicodeUCS4_AsDefaultEncodedString", ctypes.POINTER(_object), [
	("unicode",		ctypes.POINTER(_object)),
	("errors",		ctypes.POINTER(ctypes.c_char)),] )

_PyUnicode_AsStringAndSize = _rpythonic_function_(		"_PyUnicode_AsStringAndSize", ctypes.POINTER(ctypes.c_char), [
	("unicode",		ctypes.POINTER(_object)),
	("size",		ctypes.POINTER(ctypes.c_int)),] )

_PyUnicode_AsString = _rpythonic_function_(		"_PyUnicode_AsString", ctypes.POINTER(ctypes.c_char), [
	("unicode",		ctypes.POINTER(_object)),] )

PyUnicodeUCS4_GetDefaultEncoding = _rpythonic_function_(		"PyUnicodeUCS4_GetDefaultEncoding", ctypes.POINTER(ctypes.c_char), [] )

PyUnicodeUCS4_Decode = _rpythonic_function_(		"PyUnicodeUCS4_Decode", ctypes.POINTER(_object), [
	("s",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_int),
	("encoding",		ctypes.POINTER(ctypes.c_char)),
	("errors",		ctypes.POINTER(ctypes.c_char)),] )

PyUnicodeUCS4_AsDecodedObject = _rpythonic_function_(		"PyUnicodeUCS4_AsDecodedObject", ctypes.POINTER(_object), [
	("unicode",		ctypes.POINTER(_object)),
	("encoding",		ctypes.POINTER(ctypes.c_char)),
	("errors",		ctypes.POINTER(ctypes.c_char)),] )

PyUnicodeUCS4_AsDecodedUnicode = _rpythonic_function_(		"PyUnicodeUCS4_AsDecodedUnicode", ctypes.POINTER(_object), [
	("unicode",		ctypes.POINTER(_object)),
	("encoding",		ctypes.POINTER(ctypes.c_char)),
	("errors",		ctypes.POINTER(ctypes.c_char)),] )

PyUnicodeUCS4_Encode = _rpythonic_function_(		"PyUnicodeUCS4_Encode", ctypes.POINTER(_object), [
	("s",		ctypes.POINTER(ctypes.c_ulong)),
	("size",		ctypes.c_int),
	("encoding",		ctypes.POINTER(ctypes.c_char)),
	("errors",		ctypes.POINTER(ctypes.c_char)),] )

PyUnicodeUCS4_AsEncodedObject = _rpythonic_function_(		"PyUnicodeUCS4_AsEncodedObject", ctypes.POINTER(_object), [
	("unicode",		ctypes.POINTER(_object)),
	("encoding",		ctypes.POINTER(ctypes.c_char)),
	("errors",		ctypes.POINTER(ctypes.c_char)),] )

PyUnicodeUCS4_AsEncodedString = _rpythonic_function_(		"PyUnicodeUCS4_AsEncodedString", ctypes.POINTER(_object), [
	("unicode",		ctypes.POINTER(_object)),
	("encoding",		ctypes.POINTER(ctypes.c_char)),
	("errors",		ctypes.POINTER(ctypes.c_char)),] )

PyUnicodeUCS4_AsEncodedUnicode = _rpythonic_function_(		"PyUnicodeUCS4_AsEncodedUnicode", ctypes.POINTER(_object), [
	("unicode",		ctypes.POINTER(_object)),
	("encoding",		ctypes.POINTER(ctypes.c_char)),
	("errors",		ctypes.POINTER(ctypes.c_char)),] )

PyUnicode_BuildEncodingMap = _rpythonic_function_(		"PyUnicode_BuildEncodingMap", ctypes.POINTER(_object), [
	("string",		ctypes.POINTER(_object)),] )

PyUnicode_DecodeUTF7 = _rpythonic_function_(		"PyUnicode_DecodeUTF7", ctypes.POINTER(_object), [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),
	("errors",		ctypes.POINTER(ctypes.c_char)),] )

PyUnicode_DecodeUTF7Stateful = _rpythonic_function_(		"PyUnicode_DecodeUTF7Stateful", ctypes.POINTER(_object), [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),
	("errors",		ctypes.POINTER(ctypes.c_char)),
	("consumed",		ctypes.POINTER(ctypes.c_int)),] )

PyUnicode_EncodeUTF7 = _rpythonic_function_(		"PyUnicode_EncodeUTF7", ctypes.POINTER(_object), [
	("data",		ctypes.POINTER(ctypes.c_ulong)),
	("length",		ctypes.c_int),
	("base64SetO",		ctypes.c_int),
	("base64WhiteSpace",		ctypes.c_int),
	("errors",		ctypes.POINTER(ctypes.c_char)),] )

PyUnicodeUCS4_DecodeUTF8 = _rpythonic_function_(		"PyUnicodeUCS4_DecodeUTF8", ctypes.POINTER(_object), [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),
	("errors",		ctypes.POINTER(ctypes.c_char)),] )

PyUnicodeUCS4_DecodeUTF8Stateful = _rpythonic_function_(		"PyUnicodeUCS4_DecodeUTF8Stateful", ctypes.POINTER(_object), [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),
	("errors",		ctypes.POINTER(ctypes.c_char)),
	("consumed",		ctypes.POINTER(ctypes.c_int)),] )

PyUnicodeUCS4_AsUTF8String = _rpythonic_function_(		"PyUnicodeUCS4_AsUTF8String", ctypes.POINTER(_object), [
	("unicode",		ctypes.POINTER(_object)),] )

PyUnicodeUCS4_EncodeUTF8 = _rpythonic_function_(		"PyUnicodeUCS4_EncodeUTF8", ctypes.POINTER(_object), [
	("data",		ctypes.POINTER(ctypes.c_ulong)),
	("length",		ctypes.c_int),
	("errors",		ctypes.POINTER(ctypes.c_char)),] )

PyUnicodeUCS4_DecodeUTF32 = _rpythonic_function_(		"PyUnicodeUCS4_DecodeUTF32", ctypes.POINTER(_object), [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),
	("errors",		ctypes.POINTER(ctypes.c_char)),
	("byteorder",		ctypes.POINTER(ctypes.c_int)),] )

PyUnicodeUCS4_DecodeUTF32Stateful = _rpythonic_function_(		"PyUnicodeUCS4_DecodeUTF32Stateful", ctypes.POINTER(_object), [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),
	("errors",		ctypes.POINTER(ctypes.c_char)),
	("byteorder",		ctypes.POINTER(ctypes.c_int)),
	("consumed",		ctypes.POINTER(ctypes.c_int)),] )

PyUnicodeUCS4_AsUTF32String = _rpythonic_function_(		"PyUnicodeUCS4_AsUTF32String", ctypes.POINTER(_object), [
	("unicode",		ctypes.POINTER(_object)),] )

PyUnicodeUCS4_EncodeUTF32 = _rpythonic_function_(		"PyUnicodeUCS4_EncodeUTF32", ctypes.POINTER(_object), [
	("data",		ctypes.POINTER(ctypes.c_ulong)),
	("length",		ctypes.c_int),
	("errors",		ctypes.POINTER(ctypes.c_char)),
	("byteorder",		ctypes.c_int),] )

PyUnicodeUCS4_DecodeUTF16 = _rpythonic_function_(		"PyUnicodeUCS4_DecodeUTF16", ctypes.POINTER(_object), [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),
	("errors",		ctypes.POINTER(ctypes.c_char)),
	("byteorder",		ctypes.POINTER(ctypes.c_int)),] )

PyUnicodeUCS4_DecodeUTF16Stateful = _rpythonic_function_(		"PyUnicodeUCS4_DecodeUTF16Stateful", ctypes.POINTER(_object), [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),
	("errors",		ctypes.POINTER(ctypes.c_char)),
	("byteorder",		ctypes.POINTER(ctypes.c_int)),
	("consumed",		ctypes.POINTER(ctypes.c_int)),] )

PyUnicodeUCS4_AsUTF16String = _rpythonic_function_(		"PyUnicodeUCS4_AsUTF16String", ctypes.POINTER(_object), [
	("unicode",		ctypes.POINTER(_object)),] )

PyUnicodeUCS4_EncodeUTF16 = _rpythonic_function_(		"PyUnicodeUCS4_EncodeUTF16", ctypes.POINTER(_object), [
	("data",		ctypes.POINTER(ctypes.c_ulong)),
	("length",		ctypes.c_int),
	("errors",		ctypes.POINTER(ctypes.c_char)),
	("byteorder",		ctypes.c_int),] )

PyUnicodeUCS4_DecodeUnicodeEscape = _rpythonic_function_(		"PyUnicodeUCS4_DecodeUnicodeEscape", ctypes.POINTER(_object), [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),
	("errors",		ctypes.POINTER(ctypes.c_char)),] )

PyUnicodeUCS4_AsUnicodeEscapeString = _rpythonic_function_(		"PyUnicodeUCS4_AsUnicodeEscapeString", ctypes.POINTER(_object), [
	("unicode",		ctypes.POINTER(_object)),] )

PyUnicodeUCS4_EncodeUnicodeEscape = _rpythonic_function_(		"PyUnicodeUCS4_EncodeUnicodeEscape", ctypes.POINTER(_object), [
	("data",		ctypes.POINTER(ctypes.c_ulong)),
	("length",		ctypes.c_int),] )

PyUnicodeUCS4_DecodeRawUnicodeEscape = _rpythonic_function_(		"PyUnicodeUCS4_DecodeRawUnicodeEscape", ctypes.POINTER(_object), [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),
	("errors",		ctypes.POINTER(ctypes.c_char)),] )

PyUnicodeUCS4_AsRawUnicodeEscapeString = _rpythonic_function_(		"PyUnicodeUCS4_AsRawUnicodeEscapeString", ctypes.POINTER(_object), [
	("unicode",		ctypes.POINTER(_object)),] )

PyUnicodeUCS4_EncodeRawUnicodeEscape = _rpythonic_function_(		"PyUnicodeUCS4_EncodeRawUnicodeEscape", ctypes.POINTER(_object), [
	("data",		ctypes.POINTER(ctypes.c_ulong)),
	("length",		ctypes.c_int),] )

_PyUnicode_DecodeUnicodeInternal = _rpythonic_function_(		"_PyUnicode_DecodeUnicodeInternal", ctypes.POINTER(_object), [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),
	("errors",		ctypes.POINTER(ctypes.c_char)),] )

PyUnicodeUCS4_DecodeLatin1 = _rpythonic_function_(		"PyUnicodeUCS4_DecodeLatin1", ctypes.POINTER(_object), [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),
	("errors",		ctypes.POINTER(ctypes.c_char)),] )

PyUnicodeUCS4_AsLatin1String = _rpythonic_function_(		"PyUnicodeUCS4_AsLatin1String", ctypes.POINTER(_object), [
	("unicode",		ctypes.POINTER(_object)),] )

PyUnicodeUCS4_EncodeLatin1 = _rpythonic_function_(		"PyUnicodeUCS4_EncodeLatin1", ctypes.POINTER(_object), [
	("data",		ctypes.POINTER(ctypes.c_ulong)),
	("length",		ctypes.c_int),
	("errors",		ctypes.POINTER(ctypes.c_char)),] )

PyUnicodeUCS4_DecodeASCII = _rpythonic_function_(		"PyUnicodeUCS4_DecodeASCII", ctypes.POINTER(_object), [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),
	("errors",		ctypes.POINTER(ctypes.c_char)),] )

PyUnicodeUCS4_AsASCIIString = _rpythonic_function_(		"PyUnicodeUCS4_AsASCIIString", ctypes.POINTER(_object), [
	("unicode",		ctypes.POINTER(_object)),] )

PyUnicodeUCS4_EncodeASCII = _rpythonic_function_(		"PyUnicodeUCS4_EncodeASCII", ctypes.POINTER(_object), [
	("data",		ctypes.POINTER(ctypes.c_ulong)),
	("length",		ctypes.c_int),
	("errors",		ctypes.POINTER(ctypes.c_char)),] )

PyUnicodeUCS4_DecodeCharmap = _rpythonic_function_(		"PyUnicodeUCS4_DecodeCharmap", ctypes.POINTER(_object), [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),
	("mapping",		ctypes.POINTER(_object)),
	("errors",		ctypes.POINTER(ctypes.c_char)),] )

PyUnicodeUCS4_AsCharmapString = _rpythonic_function_(		"PyUnicodeUCS4_AsCharmapString", ctypes.POINTER(_object), [
	("unicode",		ctypes.POINTER(_object)),
	("mapping",		ctypes.POINTER(_object)),] )

PyUnicodeUCS4_EncodeCharmap = _rpythonic_function_(		"PyUnicodeUCS4_EncodeCharmap", ctypes.POINTER(_object), [
	("data",		ctypes.POINTER(ctypes.c_ulong)),
	("length",		ctypes.c_int),
	("mapping",		ctypes.POINTER(_object)),
	("errors",		ctypes.POINTER(ctypes.c_char)),] )

PyUnicodeUCS4_TranslateCharmap = _rpythonic_function_(		"PyUnicodeUCS4_TranslateCharmap", ctypes.POINTER(_object), [
	("data",		ctypes.POINTER(ctypes.c_ulong)),
	("length",		ctypes.c_int),
	("table",		ctypes.POINTER(_object)),
	("errors",		ctypes.POINTER(ctypes.c_char)),] )

PyUnicodeUCS4_EncodeDecimal = _rpythonic_function_(		"PyUnicodeUCS4_EncodeDecimal", ctypes.c_int, [
	("s",		ctypes.POINTER(ctypes.c_ulong)),
	("length",		ctypes.c_int),
	("output",		ctypes.POINTER(ctypes.c_char)),
	("errors",		ctypes.POINTER(ctypes.c_char)),] )

PyUnicode_TransformDecimalToASCII = _rpythonic_function_(		"PyUnicode_TransformDecimalToASCII", ctypes.POINTER(_object), [
	("s",		ctypes.POINTER(ctypes.c_ulong)),
	("length",		ctypes.c_int),] )

PyUnicodeUCS4_FSConverter = _rpythonic_function_(		"PyUnicodeUCS4_FSConverter", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyUnicodeUCS4_FSDecoder = _rpythonic_function_(		"PyUnicodeUCS4_FSDecoder", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyUnicodeUCS4_DecodeFSDefault = _rpythonic_function_(		"PyUnicodeUCS4_DecodeFSDefault", ctypes.POINTER(_object), [
	("s",		ctypes.POINTER(ctypes.c_char)),] )

PyUnicodeUCS4_DecodeFSDefaultAndSize = _rpythonic_function_(		"PyUnicodeUCS4_DecodeFSDefaultAndSize", ctypes.POINTER(_object), [
	("s",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_int),] )

PyUnicode_EncodeFSDefault = _rpythonic_function_(		"PyUnicode_EncodeFSDefault", ctypes.POINTER(_object), [
	("unicode",		ctypes.POINTER(_object)),] )

PyUnicodeUCS4_Concat = _rpythonic_function_(		"PyUnicodeUCS4_Concat", ctypes.POINTER(_object), [
	("left",		ctypes.POINTER(_object)),
	("right",		ctypes.POINTER(_object)),] )

PyUnicodeUCS4_Append = _rpythonic_function_(		"PyUnicodeUCS4_Append", ctypes.c_void_p, [
	("pleft",		ctypes.POINTER(ctypes.POINTER(_object))),
	("right",		ctypes.POINTER(_object)),] )

PyUnicodeUCS4_AppendAndDel = _rpythonic_function_(		"PyUnicodeUCS4_AppendAndDel", ctypes.c_void_p, [
	("pleft",		ctypes.POINTER(ctypes.POINTER(_object))),
	("right",		ctypes.POINTER(_object)),] )

PyUnicodeUCS4_Split = _rpythonic_function_(		"PyUnicodeUCS4_Split", ctypes.POINTER(_object), [
	("s",		ctypes.POINTER(_object)),
	("sep",		ctypes.POINTER(_object)),
	("maxsplit",		ctypes.c_int),] )

PyUnicodeUCS4_Splitlines = _rpythonic_function_(		"PyUnicodeUCS4_Splitlines", ctypes.POINTER(_object), [
	("s",		ctypes.POINTER(_object)),
	("keepends",		ctypes.c_int),] )

PyUnicodeUCS4_Partition = _rpythonic_function_(		"PyUnicodeUCS4_Partition", ctypes.POINTER(_object), [
	("s",		ctypes.POINTER(_object)),
	("sep",		ctypes.POINTER(_object)),] )

PyUnicodeUCS4_RPartition = _rpythonic_function_(		"PyUnicodeUCS4_RPartition", ctypes.POINTER(_object), [
	("s",		ctypes.POINTER(_object)),
	("sep",		ctypes.POINTER(_object)),] )

PyUnicodeUCS4_RSplit = _rpythonic_function_(		"PyUnicodeUCS4_RSplit", ctypes.POINTER(_object), [
	("s",		ctypes.POINTER(_object)),
	("sep",		ctypes.POINTER(_object)),
	("maxsplit",		ctypes.c_int),] )

PyUnicodeUCS4_Translate = _rpythonic_function_(		"PyUnicodeUCS4_Translate", ctypes.POINTER(_object), [
	("C_str",		ctypes.POINTER(_object)),
	("table",		ctypes.POINTER(_object)),
	("errors",		ctypes.POINTER(ctypes.c_char)),] )

PyUnicodeUCS4_Join = _rpythonic_function_(		"PyUnicodeUCS4_Join", ctypes.POINTER(_object), [
	("separator",		ctypes.POINTER(_object)),
	("seq",		ctypes.POINTER(_object)),] )

PyUnicodeUCS4_Tailmatch = _rpythonic_function_(		"PyUnicodeUCS4_Tailmatch", ctypes.c_int, [
	("C_str",		ctypes.POINTER(_object)),
	("substr",		ctypes.POINTER(_object)),
	("start",		ctypes.c_int),
	("end",		ctypes.c_int),
	("direction",		ctypes.c_int),] )

PyUnicodeUCS4_Find = _rpythonic_function_(		"PyUnicodeUCS4_Find", ctypes.c_int, [
	("C_str",		ctypes.POINTER(_object)),
	("substr",		ctypes.POINTER(_object)),
	("start",		ctypes.c_int),
	("end",		ctypes.c_int),
	("direction",		ctypes.c_int),] )

PyUnicodeUCS4_Count = _rpythonic_function_(		"PyUnicodeUCS4_Count", ctypes.c_int, [
	("C_str",		ctypes.POINTER(_object)),
	("substr",		ctypes.POINTER(_object)),
	("start",		ctypes.c_int),
	("end",		ctypes.c_int),] )

PyUnicodeUCS4_Replace = _rpythonic_function_(		"PyUnicodeUCS4_Replace", ctypes.POINTER(_object), [
	("C_str",		ctypes.POINTER(_object)),
	("substr",		ctypes.POINTER(_object)),
	("replstr",		ctypes.POINTER(_object)),
	("maxcount",		ctypes.c_int),] )

PyUnicodeUCS4_Compare = _rpythonic_function_(		"PyUnicodeUCS4_Compare", ctypes.c_int, [
	("left",		ctypes.POINTER(_object)),
	("right",		ctypes.POINTER(_object)),] )

PyUnicodeUCS4_CompareWithASCIIString = _rpythonic_function_(		"PyUnicodeUCS4_CompareWithASCIIString", ctypes.c_int, [
	("left",		ctypes.POINTER(_object)),
	("right",		ctypes.POINTER(ctypes.c_char)),] )

PyUnicodeUCS4_RichCompare = _rpythonic_function_(		"PyUnicodeUCS4_RichCompare", ctypes.POINTER(_object), [
	("left",		ctypes.POINTER(_object)),
	("right",		ctypes.POINTER(_object)),
	("op",		ctypes.c_int),] )

PyUnicodeUCS4_Format = _rpythonic_function_(		"PyUnicodeUCS4_Format", ctypes.POINTER(_object), [
	("format",		ctypes.POINTER(_object)),
	("args",		ctypes.POINTER(_object)),] )

PyUnicodeUCS4_Contains = _rpythonic_function_(		"PyUnicodeUCS4_Contains", ctypes.c_int, [
	("container",		ctypes.POINTER(_object)),
	("element",		ctypes.POINTER(_object)),] )

PyUnicodeUCS4_IsIdentifier = _rpythonic_function_(		"PyUnicodeUCS4_IsIdentifier", ctypes.c_int, [
	("s",		ctypes.POINTER(_object)),] )

_PyUnicode_XStrip = _rpythonic_function_(		"_PyUnicode_XStrip", ctypes.POINTER(_object), [
	("C_self",		ctypes.POINTER(PyUnicodeObject)),
	("striptype",		ctypes.c_int),
	("sepobj",		ctypes.POINTER(_object)),] )

_PyUnicode_InsertThousandsGroupingLocale = _rpythonic_function_(		"_PyUnicode_InsertThousandsGroupingLocale", ctypes.c_int, [
	("buffer",		ctypes.POINTER(ctypes.c_ulong)),
	("n_buffer",		ctypes.c_int),
	("digits",		ctypes.POINTER(ctypes.c_ulong)),
	("n_digits",		ctypes.c_int),
	("min_width",		ctypes.c_int),] )

_PyUnicode_InsertThousandsGrouping = _rpythonic_function_(		"_PyUnicode_InsertThousandsGrouping", ctypes.c_int, [
	("buffer",		ctypes.POINTER(ctypes.c_ulong)),
	("n_buffer",		ctypes.c_int),
	("digits",		ctypes.POINTER(ctypes.c_ulong)),
	("n_digits",		ctypes.c_int),
	("min_width",		ctypes.c_int),
	("grouping",		ctypes.POINTER(ctypes.c_char)),
	("thousands_sep",		ctypes.POINTER(ctypes.c_char)),] )

_PyUnicode_IsLowercase = _rpythonic_function_(		"_PyUnicode_IsLowercase", ctypes.c_int, [
	("ch",		ctypes.c_uint),] )

_PyUnicode_IsUppercase = _rpythonic_function_(		"_PyUnicode_IsUppercase", ctypes.c_int, [
	("ch",		ctypes.c_uint),] )

_PyUnicode_IsTitlecase = _rpythonic_function_(		"_PyUnicode_IsTitlecase", ctypes.c_int, [
	("ch",		ctypes.c_uint),] )

_PyUnicode_IsXidStart = _rpythonic_function_(		"_PyUnicode_IsXidStart", ctypes.c_int, [
	("ch",		ctypes.c_uint),] )

_PyUnicode_IsXidContinue = _rpythonic_function_(		"_PyUnicode_IsXidContinue", ctypes.c_int, [
	("ch",		ctypes.c_uint),] )

_PyUnicode_IsWhitespace = _rpythonic_function_(		"_PyUnicode_IsWhitespace", ctypes.c_int, [
	("ch",		ctypes.c_uint),] )

_PyUnicode_IsLinebreak = _rpythonic_function_(		"_PyUnicode_IsLinebreak", ctypes.c_int, [
	("ch",		ctypes.c_uint),] )

_PyUnicode_ToLowercase = _rpythonic_function_(		"_PyUnicode_ToLowercase", ctypes.c_uint, [
	("ch",		ctypes.c_uint),] )

_PyUnicode_ToUppercase = _rpythonic_function_(		"_PyUnicode_ToUppercase", ctypes.c_uint, [
	("ch",		ctypes.c_uint),] )

_PyUnicode_ToTitlecase = _rpythonic_function_(		"_PyUnicode_ToTitlecase", ctypes.c_uint, [
	("ch",		ctypes.c_uint),] )

_PyUnicode_ToDecimalDigit = _rpythonic_function_(		"_PyUnicode_ToDecimalDigit", ctypes.c_int, [
	("ch",		ctypes.c_uint),] )

_PyUnicode_ToDigit = _rpythonic_function_(		"_PyUnicode_ToDigit", ctypes.c_int, [
	("ch",		ctypes.c_uint),] )

_PyUnicode_ToNumeric = _rpythonic_function_(		"_PyUnicode_ToNumeric", ctypes.c_double, [
	("ch",		ctypes.c_uint),] )

_PyUnicode_IsDecimalDigit = _rpythonic_function_(		"_PyUnicode_IsDecimalDigit", ctypes.c_int, [
	("ch",		ctypes.c_uint),] )

_PyUnicode_IsDigit = _rpythonic_function_(		"_PyUnicode_IsDigit", ctypes.c_int, [
	("ch",		ctypes.c_uint),] )

_PyUnicode_IsNumeric = _rpythonic_function_(		"_PyUnicode_IsNumeric", ctypes.c_int, [
	("ch",		ctypes.c_uint),] )

_PyUnicode_IsPrintable = _rpythonic_function_(		"_PyUnicode_IsPrintable", ctypes.c_int, [
	("ch",		ctypes.c_uint),] )

_PyUnicode_IsAlpha = _rpythonic_function_(		"_PyUnicode_IsAlpha", ctypes.c_int, [
	("ch",		ctypes.c_uint),] )

Py_UNICODE_strlen = _rpythonic_function_(		"Py_UNICODE_strlen", ctypes.c_uint, [
	("u",		ctypes.POINTER(ctypes.c_ulong)),] )

Py_UNICODE_strcpy = _rpythonic_function_(		"Py_UNICODE_strcpy", ctypes.POINTER(ctypes.c_ulong), [
	("s1",		ctypes.POINTER(ctypes.c_ulong)),
	("s2",		ctypes.POINTER(ctypes.c_ulong)),] )

Py_UNICODE_strcat = _rpythonic_function_(		"Py_UNICODE_strcat", ctypes.POINTER(ctypes.c_ulong), [
	("s1",		ctypes.POINTER(ctypes.c_ulong)),
	("s2",		ctypes.POINTER(ctypes.c_ulong)),] )

Py_UNICODE_strncpy = _rpythonic_function_(		"Py_UNICODE_strncpy", ctypes.POINTER(ctypes.c_ulong), [
	("s1",		ctypes.POINTER(ctypes.c_ulong)),
	("s2",		ctypes.POINTER(ctypes.c_ulong)),
	("n",		ctypes.c_uint),] )

Py_UNICODE_strcmp = _rpythonic_function_(		"Py_UNICODE_strcmp", ctypes.c_int, [
	("s1",		ctypes.POINTER(ctypes.c_ulong)),
	("s2",		ctypes.POINTER(ctypes.c_ulong)),] )

Py_UNICODE_strncmp = _rpythonic_function_(		"Py_UNICODE_strncmp", ctypes.c_int, [
	("s1",		ctypes.POINTER(ctypes.c_ulong)),
	("s2",		ctypes.POINTER(ctypes.c_ulong)),
	("n",		ctypes.c_uint),] )

Py_UNICODE_strchr = _rpythonic_function_(		"Py_UNICODE_strchr", ctypes.POINTER(ctypes.c_ulong), [
	("s",		ctypes.POINTER(ctypes.c_ulong)),
	("c",		ctypes.c_ulong),] )

Py_UNICODE_strrchr = _rpythonic_function_(		"Py_UNICODE_strrchr", ctypes.POINTER(ctypes.c_ulong), [
	("s",		ctypes.POINTER(ctypes.c_ulong)),
	("c",		ctypes.c_ulong),] )

PyUnicode_AsUnicodeCopy = _rpythonic_function_(		"PyUnicode_AsUnicodeCopy", ctypes.POINTER(ctypes.c_ulong), [
	("unicode",		ctypes.POINTER(_object)),] )

PyLong_FromLong = _rpythonic_function_(		"PyLong_FromLong", ctypes.POINTER(_object), [
	("none",		ctypes.c_long),] )

PyLong_FromUnsignedLong = _rpythonic_function_(		"PyLong_FromUnsignedLong", ctypes.POINTER(_object), [
	("none",		ctypes.c_ulong),] )

PyLong_FromSize_t = _rpythonic_function_(		"PyLong_FromSize_t", ctypes.POINTER(_object), [
	("none",		ctypes.c_uint),] )

PyLong_FromSsize_t = _rpythonic_function_(		"PyLong_FromSsize_t", ctypes.POINTER(_object), [
	("none",		ctypes.c_int),] )

PyLong_FromDouble = _rpythonic_function_(		"PyLong_FromDouble", ctypes.POINTER(_object), [
	("none",		ctypes.c_double),] )

PyLong_AsLong = _rpythonic_function_(		"PyLong_AsLong", ctypes.c_long, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyLong_AsLongAndOverflow = _rpythonic_function_(		"PyLong_AsLongAndOverflow", ctypes.c_long, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

PyLong_AsSsize_t = _rpythonic_function_(		"PyLong_AsSsize_t", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyLong_AsSize_t = _rpythonic_function_(		"PyLong_AsSize_t", ctypes.c_uint, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyLong_AsUnsignedLong = _rpythonic_function_(		"PyLong_AsUnsignedLong", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyLong_AsUnsignedLongMask = _rpythonic_function_(		"PyLong_AsUnsignedLongMask", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyLong_GetInfo = _rpythonic_function_(		"PyLong_GetInfo", ctypes.POINTER(_object), [] )

_PyLong_Frexp = _rpythonic_function_(		"_PyLong_Frexp", ctypes.c_double, [
	("a",		ctypes.POINTER(_longobject)),
	("e",		ctypes.POINTER(ctypes.c_int)),] )

PyLong_AsDouble = _rpythonic_function_(		"PyLong_AsDouble", ctypes.c_double, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyLong_FromVoidPtr = _rpythonic_function_(		"PyLong_FromVoidPtr", ctypes.POINTER(_object), [] )

PyLong_AsVoidPtr = _rpythonic_function_(		"PyLong_AsVoidPtr", ctypes.POINTER(ctypes.c_void_p), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyLong_FromLongLong = _rpythonic_function_(		"PyLong_FromLongLong", ctypes.POINTER(_object), [
	("none",		ctypes.c_longlong),] )

PyLong_FromUnsignedLongLong = _rpythonic_function_(		"PyLong_FromUnsignedLongLong", ctypes.POINTER(_object), [
	("none",		ctypes.c_ulonglong),] )

PyLong_AsLongLong = _rpythonic_function_(		"PyLong_AsLongLong", ctypes.c_longlong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyLong_AsUnsignedLongLong = _rpythonic_function_(		"PyLong_AsUnsignedLongLong", ctypes.c_ulonglong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyLong_AsUnsignedLongLongMask = _rpythonic_function_(		"PyLong_AsUnsignedLongLongMask", ctypes.c_ulonglong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyLong_AsLongLongAndOverflow = _rpythonic_function_(		"PyLong_AsLongLongAndOverflow", ctypes.c_longlong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

PyLong_FromString = _rpythonic_function_(		"PyLong_FromString", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("none",		ctypes.c_int),] )

PyLong_FromUnicode = _rpythonic_function_(		"PyLong_FromUnicode", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

_PyLong_Sign = _rpythonic_function_(		"_PyLong_Sign", ctypes.c_int, [
	("v",		ctypes.POINTER(_object)),] )

_PyLong_NumBits = _rpythonic_function_(		"_PyLong_NumBits", ctypes.c_uint, [
	("v",		ctypes.POINTER(_object)),] )

_PyLong_DivmodNear = _rpythonic_function_(		"_PyLong_DivmodNear", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_PyLong_FromByteArray = _rpythonic_function_(		"_PyLong_FromByteArray", ctypes.POINTER(_object), [
	("bytes",		ctypes.POINTER(ctypes.c_ubyte)),
	("n",		ctypes.c_uint),
	("little_endian",		ctypes.c_int),
	("is_signed",		ctypes.c_int),] )

_PyLong_AsByteArray = _rpythonic_function_(		"_PyLong_AsByteArray", ctypes.c_int, [
	("v",		ctypes.POINTER(_longobject)),
	("bytes",		ctypes.POINTER(ctypes.c_ubyte)),
	("n",		ctypes.c_uint),
	("little_endian",		ctypes.c_int),
	("is_signed",		ctypes.c_int),] )

_PyLong_Format = _rpythonic_function_(		"_PyLong_Format", ctypes.POINTER(_object), [
	("aa",		ctypes.POINTER(_object)),
	("base",		ctypes.c_int),] )

_PyLong_FormatAdvanced = _rpythonic_function_(		"_PyLong_FormatAdvanced", ctypes.POINTER(_object), [
	("obj",		ctypes.POINTER(_object)),
	("format_spec",		ctypes.POINTER(ctypes.c_ulong)),
	("format_spec_len",		ctypes.c_int),] )

PyOS_strtoul = _rpythonic_function_(		"PyOS_strtoul", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("none",		ctypes.c_int),] )

PyOS_strtol = _rpythonic_function_(		"PyOS_strtol", ctypes.c_long, [
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("none",		ctypes.c_int),] )

_PyLong_New = _rpythonic_function_(		"_PyLong_New", ctypes.POINTER(_longobject), [
	("none",		ctypes.c_int),] )

_PyLong_Copy = _rpythonic_function_(		"_PyLong_Copy", ctypes.POINTER(_object), [
	("src",		ctypes.POINTER(_longobject)),] )

PyBool_FromLong = _rpythonic_function_(		"PyBool_FromLong", ctypes.POINTER(_object), [
	("none",		ctypes.c_long),] )

PyFloat_GetMax = _rpythonic_function_(		"PyFloat_GetMax", ctypes.c_double, [] )

PyFloat_GetMin = _rpythonic_function_(		"PyFloat_GetMin", ctypes.c_double, [] )

PyFloat_GetInfo = _rpythonic_function_(		"PyFloat_GetInfo", ctypes.POINTER(_object), [] )

PyFloat_FromString = _rpythonic_function_(		"PyFloat_FromString", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyFloat_FromDouble = _rpythonic_function_(		"PyFloat_FromDouble", ctypes.POINTER(_object), [
	("none",		ctypes.c_double),] )

PyFloat_AsDouble = _rpythonic_function_(		"PyFloat_AsDouble", ctypes.c_double, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_PyFloat_Pack4 = _rpythonic_function_(		"_PyFloat_Pack4", ctypes.c_int, [
	("x",		ctypes.c_double),
	("p",		ctypes.POINTER(ctypes.c_ubyte)),
	("le",		ctypes.c_int),] )

_PyFloat_Pack8 = _rpythonic_function_(		"_PyFloat_Pack8", ctypes.c_int, [
	("x",		ctypes.c_double),
	("p",		ctypes.POINTER(ctypes.c_ubyte)),
	("le",		ctypes.c_int),] )

_PyFloat_Repr = _rpythonic_function_(		"_PyFloat_Repr", ctypes.c_int, [
	("x",		ctypes.c_double),
	("p",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_uint),] )

_PyFloat_Digits = _rpythonic_function_(		"_PyFloat_Digits", ctypes.c_int, [
	("buf",		ctypes.POINTER(ctypes.c_char)),
	("v",		ctypes.c_double),
	("signum",		ctypes.POINTER(ctypes.c_int)),] )

_PyFloat_DigitsInit = _rpythonic_function_(		"_PyFloat_DigitsInit", ctypes.c_void_p, [] )

_PyFloat_Unpack4 = _rpythonic_function_(		"_PyFloat_Unpack4", ctypes.c_double, [
	("p",		ctypes.POINTER(ctypes.c_ubyte)),
	("le",		ctypes.c_int),] )

_PyFloat_Unpack8 = _rpythonic_function_(		"_PyFloat_Unpack8", ctypes.c_double, [
	("p",		ctypes.POINTER(ctypes.c_ubyte)),
	("le",		ctypes.c_int),] )

PyFloat_ClearFreeList = _rpythonic_function_(		"PyFloat_ClearFreeList", ctypes.c_int, [] )

_PyFloat_FormatAdvanced = _rpythonic_function_(		"_PyFloat_FormatAdvanced", ctypes.POINTER(_object), [
	("obj",		ctypes.POINTER(_object)),
	("format_spec",		ctypes.POINTER(ctypes.c_ulong)),
	("format_spec_len",		ctypes.c_int),] )

_Py_c_sum = _rpythonic_function_(		"_Py_c_sum", Py_complex, [
	("none",		ctypes.c_void_p),
	("none",		ctypes.c_void_p),] )

_Py_c_diff = _rpythonic_function_(		"_Py_c_diff", Py_complex, [
	("none",		ctypes.c_void_p),
	("none",		ctypes.c_void_p),] )

_Py_c_neg = _rpythonic_function_(		"_Py_c_neg", Py_complex, [
	("none",		ctypes.c_void_p),] )

_Py_c_prod = _rpythonic_function_(		"_Py_c_prod", Py_complex, [
	("none",		ctypes.c_void_p),
	("none",		ctypes.c_void_p),] )

_Py_c_quot = _rpythonic_function_(		"_Py_c_quot", Py_complex, [
	("none",		ctypes.c_void_p),
	("none",		ctypes.c_void_p),] )

_Py_c_pow = _rpythonic_function_(		"_Py_c_pow", Py_complex, [
	("none",		ctypes.c_void_p),
	("none",		ctypes.c_void_p),] )

_Py_c_abs = _rpythonic_function_(		"_Py_c_abs", ctypes.c_double, [
	("none",		ctypes.c_void_p),] )

PyComplex_FromCComplex = _rpythonic_function_(		"PyComplex_FromCComplex", ctypes.POINTER(_object), [
	("none",		ctypes.c_void_p),] )

PyComplex_FromDoubles = _rpythonic_function_(		"PyComplex_FromDoubles", ctypes.POINTER(_object), [
	("real",		ctypes.c_double),
	("imag",		ctypes.c_double),] )

PyComplex_RealAsDouble = _rpythonic_function_(		"PyComplex_RealAsDouble", ctypes.c_double, [
	("op",		ctypes.POINTER(_object)),] )

PyComplex_ImagAsDouble = _rpythonic_function_(		"PyComplex_ImagAsDouble", ctypes.c_double, [
	("op",		ctypes.POINTER(_object)),] )

PyComplex_AsCComplex = _rpythonic_function_(		"PyComplex_AsCComplex", Py_complex, [
	("op",		ctypes.POINTER(_object)),] )

_PyComplex_FormatAdvanced = _rpythonic_function_(		"_PyComplex_FormatAdvanced", ctypes.POINTER(_object), [
	("obj",		ctypes.POINTER(_object)),
	("format_spec",		ctypes.POINTER(ctypes.c_ulong)),
	("format_spec_len",		ctypes.c_int),] )

PyMemoryView_GetContiguous = _rpythonic_function_(		"PyMemoryView_GetContiguous", ctypes.POINTER(_object), [
	("base",		ctypes.POINTER(_object)),
	("buffertype",		ctypes.c_int),
	("fort",		ctypes.c_char),] )

PyMemoryView_FromObject = _rpythonic_function_(		"PyMemoryView_FromObject", ctypes.POINTER(_object), [
	("base",		ctypes.POINTER(_object)),] )

PyMemoryView_FromBuffer = _rpythonic_function_(		"PyMemoryView_FromBuffer", ctypes.POINTER(_object), [
	("info",		ctypes.POINTER(bufferinfo)),] )

PyTuple_New = _rpythonic_function_(		"PyTuple_New", ctypes.POINTER(_object), [
	("size",		ctypes.c_int),] )

PyTuple_Size = _rpythonic_function_(		"PyTuple_Size", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyTuple_GetItem = _rpythonic_function_(		"PyTuple_GetItem", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

PyTuple_SetItem = _rpythonic_function_(		"PyTuple_SetItem", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyTuple_GetSlice = _rpythonic_function_(		"PyTuple_GetSlice", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

_PyTuple_Resize = _rpythonic_function_(		"_PyTuple_Resize", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("none",		ctypes.c_int),] )

PyTuple_Pack = _rpythonic_function_(		"PyTuple_Pack", ctypes.POINTER(_object), [
	("none",		ctypes.c_int),] )

_PyTuple_MaybeUntrack = _rpythonic_function_(		"_PyTuple_MaybeUntrack", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyTuple_ClearFreeList = _rpythonic_function_(		"PyTuple_ClearFreeList", ctypes.c_int, [] )

PyList_New = _rpythonic_function_(		"PyList_New", ctypes.POINTER(_object), [
	("size",		ctypes.c_int),] )

PyList_Size = _rpythonic_function_(		"PyList_Size", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyList_GetItem = _rpythonic_function_(		"PyList_GetItem", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

PyList_SetItem = _rpythonic_function_(		"PyList_SetItem", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyList_Insert = _rpythonic_function_(		"PyList_Insert", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyList_Append = _rpythonic_function_(		"PyList_Append", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyList_GetSlice = _rpythonic_function_(		"PyList_GetSlice", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

PyList_SetSlice = _rpythonic_function_(		"PyList_SetSlice", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyList_Sort = _rpythonic_function_(		"PyList_Sort", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyList_Reverse = _rpythonic_function_(		"PyList_Reverse", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyList_AsTuple = _rpythonic_function_(		"PyList_AsTuple", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_PyList_Extend = _rpythonic_function_(		"_PyList_Extend", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

ma_lookup = _rpythonic_function_(		"ma_lookup", ctypes.POINTER(PyDictEntry), [
	("mp",		ctypes.POINTER(_dictobject)),
	("key",		ctypes.POINTER(_object)),
	("hash",		ctypes.c_int),] )

PyDict_New = _rpythonic_function_(		"PyDict_New", ctypes.POINTER(_object), [] )

PyDict_GetItem = _rpythonic_function_(		"PyDict_GetItem", ctypes.POINTER(_object), [
	("mp",		ctypes.POINTER(_object)),
	("key",		ctypes.POINTER(_object)),] )

PyDict_GetItemWithError = _rpythonic_function_(		"PyDict_GetItemWithError", ctypes.POINTER(_object), [
	("mp",		ctypes.POINTER(_object)),
	("key",		ctypes.POINTER(_object)),] )

PyDict_SetItem = _rpythonic_function_(		"PyDict_SetItem", ctypes.c_int, [
	("mp",		ctypes.POINTER(_object)),
	("key",		ctypes.POINTER(_object)),
	("item",		ctypes.POINTER(_object)),] )

PyDict_DelItem = _rpythonic_function_(		"PyDict_DelItem", ctypes.c_int, [
	("mp",		ctypes.POINTER(_object)),
	("key",		ctypes.POINTER(_object)),] )

PyDict_Clear = _rpythonic_function_(		"PyDict_Clear", ctypes.c_void_p, [
	("mp",		ctypes.POINTER(_object)),] )

PyDict_Next = _rpythonic_function_(		"PyDict_Next", ctypes.c_int, [
	("mp",		ctypes.POINTER(_object)),
	("pos",		ctypes.POINTER(ctypes.c_int)),
	("key",		ctypes.POINTER(ctypes.POINTER(_object))),
	("value",		ctypes.POINTER(ctypes.POINTER(_object))),] )

_PyDict_Next = _rpythonic_function_(		"_PyDict_Next", ctypes.c_int, [
	("mp",		ctypes.POINTER(_object)),
	("pos",		ctypes.POINTER(ctypes.c_int)),
	("key",		ctypes.POINTER(ctypes.POINTER(_object))),
	("value",		ctypes.POINTER(ctypes.POINTER(_object))),
	("hash",		ctypes.POINTER(ctypes.c_int)),] )

PyDict_Keys = _rpythonic_function_(		"PyDict_Keys", ctypes.POINTER(_object), [
	("mp",		ctypes.POINTER(_object)),] )

PyDict_Values = _rpythonic_function_(		"PyDict_Values", ctypes.POINTER(_object), [
	("mp",		ctypes.POINTER(_object)),] )

PyDict_Items = _rpythonic_function_(		"PyDict_Items", ctypes.POINTER(_object), [
	("mp",		ctypes.POINTER(_object)),] )

PyDict_Size = _rpythonic_function_(		"PyDict_Size", ctypes.c_int, [
	("mp",		ctypes.POINTER(_object)),] )

PyDict_Copy = _rpythonic_function_(		"PyDict_Copy", ctypes.POINTER(_object), [
	("mp",		ctypes.POINTER(_object)),] )

PyDict_Contains = _rpythonic_function_(		"PyDict_Contains", ctypes.c_int, [
	("mp",		ctypes.POINTER(_object)),
	("key",		ctypes.POINTER(_object)),] )

_PyDict_Contains = _rpythonic_function_(		"_PyDict_Contains", ctypes.c_int, [
	("mp",		ctypes.POINTER(_object)),
	("key",		ctypes.POINTER(_object)),
	("hash",		ctypes.c_int),] )

_PyDict_NewPresized = _rpythonic_function_(		"_PyDict_NewPresized", ctypes.POINTER(_object), [
	("minused",		ctypes.c_int),] )

_PyDict_MaybeUntrack = _rpythonic_function_(		"_PyDict_MaybeUntrack", ctypes.c_void_p, [
	("mp",		ctypes.POINTER(_object)),] )

_PyDict_HasOnlyStringKeys = _rpythonic_function_(		"_PyDict_HasOnlyStringKeys", ctypes.c_int, [
	("mp",		ctypes.POINTER(_object)),] )

PyDict_Update = _rpythonic_function_(		"PyDict_Update", ctypes.c_int, [
	("mp",		ctypes.POINTER(_object)),
	("other",		ctypes.POINTER(_object)),] )

PyDict_Merge = _rpythonic_function_(		"PyDict_Merge", ctypes.c_int, [
	("mp",		ctypes.POINTER(_object)),
	("other",		ctypes.POINTER(_object)),
	("override",		ctypes.c_int),] )

PyDict_MergeFromSeq2 = _rpythonic_function_(		"PyDict_MergeFromSeq2", ctypes.c_int, [
	("d",		ctypes.POINTER(_object)),
	("seq2",		ctypes.POINTER(_object)),
	("override",		ctypes.c_int),] )

PyDict_GetItemString = _rpythonic_function_(		"PyDict_GetItemString", ctypes.POINTER(_object), [
	("dp",		ctypes.POINTER(_object)),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

PyDict_SetItemString = _rpythonic_function_(		"PyDict_SetItemString", ctypes.c_int, [
	("dp",		ctypes.POINTER(_object)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("item",		ctypes.POINTER(_object)),] )

PyDict_DelItemString = _rpythonic_function_(		"PyDict_DelItemString", ctypes.c_int, [
	("dp",		ctypes.POINTER(_object)),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

lookup = _rpythonic_function_(		"lookup", ctypes.POINTER(setentry), [
	("so",		ctypes.POINTER(_setobject)),
	("key",		ctypes.POINTER(_object)),
	("hash",		ctypes.c_int),] )

PySet_New = _rpythonic_function_(		"PySet_New", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyFrozenSet_New = _rpythonic_function_(		"PyFrozenSet_New", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PySet_Size = _rpythonic_function_(		"PySet_Size", ctypes.c_int, [
	("anyset",		ctypes.POINTER(_object)),] )

PySet_Clear = _rpythonic_function_(		"PySet_Clear", ctypes.c_int, [
	("set",		ctypes.POINTER(_object)),] )

PySet_Contains = _rpythonic_function_(		"PySet_Contains", ctypes.c_int, [
	("anyset",		ctypes.POINTER(_object)),
	("key",		ctypes.POINTER(_object)),] )

PySet_Discard = _rpythonic_function_(		"PySet_Discard", ctypes.c_int, [
	("set",		ctypes.POINTER(_object)),
	("key",		ctypes.POINTER(_object)),] )

PySet_Add = _rpythonic_function_(		"PySet_Add", ctypes.c_int, [
	("set",		ctypes.POINTER(_object)),
	("key",		ctypes.POINTER(_object)),] )

_PySet_NextEntry = _rpythonic_function_(		"_PySet_NextEntry", ctypes.c_int, [
	("set",		ctypes.POINTER(_object)),
	("pos",		ctypes.POINTER(ctypes.c_int)),
	("key",		ctypes.POINTER(ctypes.POINTER(_object))),
	("hash",		ctypes.POINTER(ctypes.c_int)),] )

PySet_Pop = _rpythonic_function_(		"PySet_Pop", ctypes.POINTER(_object), [
	("set",		ctypes.POINTER(_object)),] )

_PySet_Update = _rpythonic_function_(		"_PySet_Update", ctypes.c_int, [
	("set",		ctypes.POINTER(_object)),
	("iterable",		ctypes.POINTER(_object)),] )

PyCFunction = _rpythonic_function_(		"PyCFunction", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyCFunctionWithKeywords = _rpythonic_function_(		"PyCFunctionWithKeywords", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyNoArgsFunction = _rpythonic_function_(		"PyNoArgsFunction", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyCFunction_GetFunction = _rpythonic_function_(		"PyCFunction_GetFunction", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_object), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyCFunction_GetSelf = _rpythonic_function_(		"PyCFunction_GetSelf", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyCFunction_GetFlags = _rpythonic_function_(		"PyCFunction_GetFlags", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyCFunction_Call = _rpythonic_function_(		"PyCFunction_Call", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyCFunction_NewEx = _rpythonic_function_(		"PyCFunction_NewEx", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyCFunction_ClearFreeList = _rpythonic_function_(		"PyCFunction_ClearFreeList", ctypes.c_int, [] )

PyModule_New = _rpythonic_function_(		"PyModule_New", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_char)),] )

PyModule_GetDict = _rpythonic_function_(		"PyModule_GetDict", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyModule_GetName = _rpythonic_function_(		"PyModule_GetName", ctypes.POINTER(ctypes.c_char), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyModule_GetFilename = _rpythonic_function_(		"PyModule_GetFilename", ctypes.POINTER(ctypes.c_char), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyModule_GetFilenameObject = _rpythonic_function_(		"PyModule_GetFilenameObject", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_PyModule_Clear = _rpythonic_function_(		"_PyModule_Clear", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyModule_GetDef = _rpythonic_function_(		"PyModule_GetDef", ctypes.POINTER(PyModuleDef), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyModule_GetState = _rpythonic_function_(		"PyModule_GetState", ctypes.POINTER(ctypes.c_void_p), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

m_init = _rpythonic_function_(		"m_init", ctypes.POINTER(_object), [] )

PyFunction_New = _rpythonic_function_(		"PyFunction_New", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyFunction_GetCode = _rpythonic_function_(		"PyFunction_GetCode", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyFunction_GetGlobals = _rpythonic_function_(		"PyFunction_GetGlobals", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyFunction_GetModule = _rpythonic_function_(		"PyFunction_GetModule", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyFunction_GetDefaults = _rpythonic_function_(		"PyFunction_GetDefaults", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyFunction_SetDefaults = _rpythonic_function_(		"PyFunction_SetDefaults", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyFunction_GetKwDefaults = _rpythonic_function_(		"PyFunction_GetKwDefaults", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyFunction_SetKwDefaults = _rpythonic_function_(		"PyFunction_SetKwDefaults", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyFunction_GetClosure = _rpythonic_function_(		"PyFunction_GetClosure", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyFunction_SetClosure = _rpythonic_function_(		"PyFunction_SetClosure", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyFunction_GetAnnotations = _rpythonic_function_(		"PyFunction_GetAnnotations", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyFunction_SetAnnotations = _rpythonic_function_(		"PyFunction_SetAnnotations", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyClassMethod_New = _rpythonic_function_(		"PyClassMethod_New", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyStaticMethod_New = _rpythonic_function_(		"PyStaticMethod_New", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyMethod_New = _rpythonic_function_(		"PyMethod_New", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyMethod_Function = _rpythonic_function_(		"PyMethod_Function", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyMethod_Self = _rpythonic_function_(		"PyMethod_Self", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyMethod_ClearFreeList = _rpythonic_function_(		"PyMethod_ClearFreeList", ctypes.c_int, [] )

PyInstanceMethod_New = _rpythonic_function_(		"PyInstanceMethod_New", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyInstanceMethod_Function = _rpythonic_function_(		"PyInstanceMethod_Function", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyFile_FromFd = _rpythonic_function_(		"PyFile_FromFd", ctypes.POINTER(_object), [
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),] )

PyFile_GetLine = _rpythonic_function_(		"PyFile_GetLine", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

PyFile_WriteObject = _rpythonic_function_(		"PyFile_WriteObject", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

PyFile_WriteString = _rpythonic_function_(		"PyFile_WriteString", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyObject_AsFileDescriptor = _rpythonic_function_(		"PyObject_AsFileDescriptor", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

Py_UniversalNewlineFgets = _rpythonic_function_(		"Py_UniversalNewlineFgets", ctypes.POINTER(ctypes.c_char), [
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyFile_NewStdPrinter = _rpythonic_function_(		"PyFile_NewStdPrinter", ctypes.POINTER(_object), [
	("none",		ctypes.c_int),] )

PyCapsule_Destructor = _rpythonic_function_(		"PyCapsule_Destructor", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyCapsule_New = _rpythonic_function_(		"PyCapsule_New", ctypes.POINTER(_object), [
	("pointer",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_void_p),] )

PyCapsule_GetPointer = _rpythonic_function_(		"PyCapsule_GetPointer", ctypes.POINTER(ctypes.c_void_p), [
	("capsule",		ctypes.POINTER(_object)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

PyCapsule_GetDestructor = _rpythonic_function_(		"PyCapsule_GetDestructor", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),), [
	("capsule",		ctypes.POINTER(_object)),] )

PyCapsule_GetName = _rpythonic_function_(		"PyCapsule_GetName", ctypes.POINTER(ctypes.c_char), [
	("capsule",		ctypes.POINTER(_object)),] )

PyCapsule_GetContext = _rpythonic_function_(		"PyCapsule_GetContext", ctypes.POINTER(ctypes.c_void_p), [
	("capsule",		ctypes.POINTER(_object)),] )

PyCapsule_IsValid = _rpythonic_function_(		"PyCapsule_IsValid", ctypes.c_int, [
	("capsule",		ctypes.POINTER(_object)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

PyCapsule_SetPointer = _rpythonic_function_(		"PyCapsule_SetPointer", ctypes.c_int, [
	("capsule",		ctypes.POINTER(_object)),
	("pointer",		ctypes.POINTER(ctypes.c_void_p)),] )

PyCapsule_SetDestructor = _rpythonic_function_(		"PyCapsule_SetDestructor", ctypes.c_int, [
	("capsule",		ctypes.POINTER(_object)),
	("none",		ctypes.c_void_p),] )

PyCapsule_SetName = _rpythonic_function_(		"PyCapsule_SetName", ctypes.c_int, [
	("capsule",		ctypes.POINTER(_object)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

PyCapsule_SetContext = _rpythonic_function_(		"PyCapsule_SetContext", ctypes.c_int, [
	("capsule",		ctypes.POINTER(_object)),
	("context",		ctypes.POINTER(ctypes.c_void_p)),] )

PyCapsule_Import = _rpythonic_function_(		"PyCapsule_Import", ctypes.POINTER(ctypes.c_void_p), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("no_block",		ctypes.c_int),] )

PyTraceBack_Here = _rpythonic_function_(		"PyTraceBack_Here", ctypes.c_int, [
	("_frame",		ctypes.POINTER(_frame)),] )

PyTraceBack_Print = _rpythonic_function_(		"PyTraceBack_Print", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_Py_DisplaySourceLine = _rpythonic_function_(		"_Py_DisplaySourceLine", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

PySlice_New = _rpythonic_function_(		"PySlice_New", ctypes.POINTER(_object), [
	("start",		ctypes.POINTER(_object)),
	("stop",		ctypes.POINTER(_object)),
	("step",		ctypes.POINTER(_object)),] )

_PySlice_FromIndices = _rpythonic_function_(		"_PySlice_FromIndices", ctypes.POINTER(_object), [
	("start",		ctypes.c_int),
	("stop",		ctypes.c_int),] )

PySlice_GetIndices = _rpythonic_function_(		"PySlice_GetIndices", ctypes.c_int, [
	("r",		ctypes.POINTER(_object)),
	("length",		ctypes.c_int),
	("start",		ctypes.POINTER(ctypes.c_int)),
	("stop",		ctypes.POINTER(ctypes.c_int)),
	("step",		ctypes.POINTER(ctypes.c_int)),] )

PySlice_GetIndicesEx = _rpythonic_function_(		"PySlice_GetIndicesEx", ctypes.c_int, [
	("r",		ctypes.POINTER(_object)),
	("length",		ctypes.c_int),
	("start",		ctypes.POINTER(ctypes.c_int)),
	("stop",		ctypes.POINTER(ctypes.c_int)),
	("step",		ctypes.POINTER(ctypes.c_int)),
	("slicelength",		ctypes.POINTER(ctypes.c_int)),] )

PyCell_New = _rpythonic_function_(		"PyCell_New", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyCell_Get = _rpythonic_function_(		"PyCell_Get", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyCell_Set = _rpythonic_function_(		"PyCell_Set", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PySeqIter_New = _rpythonic_function_(		"PySeqIter_New", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyCallIter_New = _rpythonic_function_(		"PyCallIter_New", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyGen_New = _rpythonic_function_(		"PyGen_New", ctypes.POINTER(_object), [
	("_frame",		ctypes.POINTER(_frame)),] )

PyGen_NeedsFinalizing = _rpythonic_function_(		"PyGen_NeedsFinalizing", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

getter = _rpythonic_function_(		"getter", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

setter = _rpythonic_function_(		"setter", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

wrapperfunc = _rpythonic_function_(		"wrapperfunc", ctypes.POINTER(_object), [
	("C_self",		ctypes.POINTER(_object)),
	("args",		ctypes.POINTER(_object)),
	("wrapped",		ctypes.POINTER(ctypes.c_void_p)),] )

wrapperfunc_kwds = _rpythonic_function_(		"wrapperfunc_kwds", ctypes.POINTER(_object), [
	("C_self",		ctypes.POINTER(_object)),
	("args",		ctypes.POINTER(_object)),
	("wrapped",		ctypes.POINTER(ctypes.c_void_p)),
	("kwds",		ctypes.POINTER(_object)),] )

PyDescr_NewMethod = _rpythonic_function_(		"PyDescr_NewMethod", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyDescr_NewClassMethod = _rpythonic_function_(		"PyDescr_NewClassMethod", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyDescr_NewMember = _rpythonic_function_(		"PyDescr_NewMember", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("PyMemberDef",		ctypes.POINTER(PyMemberDef)),] )

PyDescr_NewGetSet = _rpythonic_function_(		"PyDescr_NewGetSet", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("PyGetSetDef",		ctypes.POINTER(PyGetSetDef)),] )

PyDescr_NewWrapper = _rpythonic_function_(		"PyDescr_NewWrapper", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("wrapperbase",		ctypes.POINTER(wrapperbase)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyDictProxy_New = _rpythonic_function_(		"PyDictProxy_New", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyWrapper_New = _rpythonic_function_(		"PyWrapper_New", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_PyWarnings_Init = _rpythonic_function_(		"_PyWarnings_Init", ctypes.POINTER(_object), [] )

PyErr_WarnEx = _rpythonic_function_(		"PyErr_WarnEx", ctypes.c_int, [
	("category",		ctypes.POINTER(_object)),
	("message",		ctypes.POINTER(ctypes.c_char)),
	("stack_level",		ctypes.c_int),] )

PyErr_WarnFormat = _rpythonic_function_(		"PyErr_WarnFormat", ctypes.c_int, [
	("category",		ctypes.POINTER(_object)),
	("stack_level",		ctypes.c_int),
	("format",		ctypes.POINTER(ctypes.c_char)),] )

PyErr_WarnExplicit = _rpythonic_function_(		"PyErr_WarnExplicit", ctypes.c_int, [
	("category",		ctypes.POINTER(_object)),
	("message",		ctypes.POINTER(ctypes.c_char)),
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("lineno",		ctypes.c_int),
	("module",		ctypes.POINTER(ctypes.c_char)),
	("registry",		ctypes.POINTER(_object)),] )

PyWeakref_NewRef = _rpythonic_function_(		"PyWeakref_NewRef", ctypes.POINTER(_object), [
	("ob",		ctypes.POINTER(_object)),
	("callback",		ctypes.POINTER(_object)),] )

PyWeakref_NewProxy = _rpythonic_function_(		"PyWeakref_NewProxy", ctypes.POINTER(_object), [
	("ob",		ctypes.POINTER(_object)),
	("callback",		ctypes.POINTER(_object)),] )

PyWeakref_GetObject = _rpythonic_function_(		"PyWeakref_GetObject", ctypes.POINTER(_object), [
	("ref",		ctypes.POINTER(_object)),] )

_PyWeakref_GetWeakrefCount = _rpythonic_function_(		"_PyWeakref_GetWeakrefCount", ctypes.c_int, [
	("head",		ctypes.POINTER(_PyWeakReference)),] )

_PyWeakref_ClearRef = _rpythonic_function_(		"_PyWeakref_ClearRef", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_PyWeakReference)),] )

PyStructSequence_InitType = _rpythonic_function_(		"PyStructSequence_InitType", ctypes.c_void_p, [
	("C_type",		ctypes.POINTER(_typeobject)),
	("desc",		ctypes.POINTER(PyStructSequence_Desc)),] )

PyStructSequence_NewType = _rpythonic_function_(		"PyStructSequence_NewType", ctypes.POINTER(_typeobject), [
	("desc",		ctypes.POINTER(PyStructSequence_Desc)),] )

PyStructSequence_New = _rpythonic_function_(		"PyStructSequence_New", ctypes.POINTER(_object), [
	("C_type",		ctypes.POINTER(_typeobject)),] )

PyStructSequence_SetItem = _rpythonic_function_(		"PyStructSequence_SetItem", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyStructSequence_GetItem = _rpythonic_function_(		"PyStructSequence_GetItem", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

PyCodec_Register = _rpythonic_function_(		"PyCodec_Register", ctypes.c_int, [
	("search_function",		ctypes.POINTER(_object)),] )

_PyCodec_Lookup = _rpythonic_function_(		"_PyCodec_Lookup", ctypes.POINTER(_object), [
	("encoding",		ctypes.POINTER(ctypes.c_char)),] )

PyCodec_KnownEncoding = _rpythonic_function_(		"PyCodec_KnownEncoding", ctypes.c_int, [
	("encoding",		ctypes.POINTER(ctypes.c_char)),] )

PyCodec_Encode = _rpythonic_function_(		"PyCodec_Encode", ctypes.POINTER(_object), [
	("C_object",		ctypes.POINTER(_object)),
	("encoding",		ctypes.POINTER(ctypes.c_char)),
	("errors",		ctypes.POINTER(ctypes.c_char)),] )

PyCodec_Decode = _rpythonic_function_(		"PyCodec_Decode", ctypes.POINTER(_object), [
	("C_object",		ctypes.POINTER(_object)),
	("encoding",		ctypes.POINTER(ctypes.c_char)),
	("errors",		ctypes.POINTER(ctypes.c_char)),] )

PyCodec_Encoder = _rpythonic_function_(		"PyCodec_Encoder", ctypes.POINTER(_object), [
	("encoding",		ctypes.POINTER(ctypes.c_char)),] )

PyCodec_Decoder = _rpythonic_function_(		"PyCodec_Decoder", ctypes.POINTER(_object), [
	("encoding",		ctypes.POINTER(ctypes.c_char)),] )

PyCodec_IncrementalEncoder = _rpythonic_function_(		"PyCodec_IncrementalEncoder", ctypes.POINTER(_object), [
	("encoding",		ctypes.POINTER(ctypes.c_char)),
	("errors",		ctypes.POINTER(ctypes.c_char)),] )

PyCodec_IncrementalDecoder = _rpythonic_function_(		"PyCodec_IncrementalDecoder", ctypes.POINTER(_object), [
	("encoding",		ctypes.POINTER(ctypes.c_char)),
	("errors",		ctypes.POINTER(ctypes.c_char)),] )

PyCodec_StreamReader = _rpythonic_function_(		"PyCodec_StreamReader", ctypes.POINTER(_object), [
	("encoding",		ctypes.POINTER(ctypes.c_char)),
	("stream",		ctypes.POINTER(_object)),
	("errors",		ctypes.POINTER(ctypes.c_char)),] )

PyCodec_StreamWriter = _rpythonic_function_(		"PyCodec_StreamWriter", ctypes.POINTER(_object), [
	("encoding",		ctypes.POINTER(ctypes.c_char)),
	("stream",		ctypes.POINTER(_object)),
	("errors",		ctypes.POINTER(ctypes.c_char)),] )

PyCodec_RegisterError = _rpythonic_function_(		"PyCodec_RegisterError", ctypes.c_int, [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(_object)),] )

PyCodec_LookupError = _rpythonic_function_(		"PyCodec_LookupError", ctypes.POINTER(_object), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

PyCodec_StrictErrors = _rpythonic_function_(		"PyCodec_StrictErrors", ctypes.POINTER(_object), [
	("exc",		ctypes.POINTER(_object)),] )

PyCodec_IgnoreErrors = _rpythonic_function_(		"PyCodec_IgnoreErrors", ctypes.POINTER(_object), [
	("exc",		ctypes.POINTER(_object)),] )

PyCodec_ReplaceErrors = _rpythonic_function_(		"PyCodec_ReplaceErrors", ctypes.POINTER(_object), [
	("exc",		ctypes.POINTER(_object)),] )

PyCodec_XMLCharRefReplaceErrors = _rpythonic_function_(		"PyCodec_XMLCharRefReplaceErrors", ctypes.POINTER(_object), [
	("exc",		ctypes.POINTER(_object)),] )

PyCodec_BackslashReplaceErrors = _rpythonic_function_(		"PyCodec_BackslashReplaceErrors", ctypes.POINTER(_object), [
	("exc",		ctypes.POINTER(_object)),] )

PyErr_SetNone = _rpythonic_function_(		"PyErr_SetNone", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyErr_SetObject = _rpythonic_function_(		"PyErr_SetObject", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyErr_SetString = _rpythonic_function_(		"PyErr_SetString", ctypes.c_void_p, [
	("exception",		ctypes.POINTER(_object)),
	("string",		ctypes.POINTER(ctypes.c_char)),] )

PyErr_Occurred = _rpythonic_function_(		"PyErr_Occurred", ctypes.POINTER(_object), [] )

PyErr_Clear = _rpythonic_function_(		"PyErr_Clear", ctypes.c_void_p, [] )

PyErr_Fetch = _rpythonic_function_(		"PyErr_Fetch", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

PyErr_Restore = _rpythonic_function_(		"PyErr_Restore", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyErr_GivenExceptionMatches = _rpythonic_function_(		"PyErr_GivenExceptionMatches", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyErr_ExceptionMatches = _rpythonic_function_(		"PyErr_ExceptionMatches", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyErr_NormalizeException = _rpythonic_function_(		"PyErr_NormalizeException", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

PyException_SetTraceback = _rpythonic_function_(		"PyException_SetTraceback", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyException_GetTraceback = _rpythonic_function_(		"PyException_GetTraceback", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyException_GetCause = _rpythonic_function_(		"PyException_GetCause", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyException_SetCause = _rpythonic_function_(		"PyException_SetCause", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyException_GetContext = _rpythonic_function_(		"PyException_GetContext", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyException_SetContext = _rpythonic_function_(		"PyException_SetContext", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyErr_BadArgument = _rpythonic_function_(		"PyErr_BadArgument", ctypes.c_int, [] )

PyErr_NoMemory = _rpythonic_function_(		"PyErr_NoMemory", ctypes.POINTER(_object), [] )

PyErr_SetFromErrno = _rpythonic_function_(		"PyErr_SetFromErrno", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyErr_SetFromErrnoWithFilenameObject = _rpythonic_function_(		"PyErr_SetFromErrnoWithFilenameObject", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyErr_SetFromErrnoWithFilename = _rpythonic_function_(		"PyErr_SetFromErrnoWithFilename", ctypes.POINTER(_object), [
	("exc",		ctypes.POINTER(_object)),
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

PyErr_Format = _rpythonic_function_(		"PyErr_Format", ctypes.POINTER(_object), [
	("exception",		ctypes.POINTER(_object)),
	("format",		ctypes.POINTER(ctypes.c_char)),] )

PyErr_BadInternalCall = _rpythonic_function_(		"PyErr_BadInternalCall", ctypes.c_void_p, [] )

_PyErr_BadInternalCall = _rpythonic_function_(		"_PyErr_BadInternalCall", ctypes.c_void_p, [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("lineno",		ctypes.c_int),] )

PyErr_NewException = _rpythonic_function_(		"PyErr_NewException", ctypes.POINTER(_object), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("base",		ctypes.POINTER(_object)),
	("C_dict",		ctypes.POINTER(_object)),] )

PyErr_NewExceptionWithDoc = _rpythonic_function_(		"PyErr_NewExceptionWithDoc", ctypes.POINTER(_object), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("doc",		ctypes.POINTER(ctypes.c_char)),
	("base",		ctypes.POINTER(_object)),
	("C_dict",		ctypes.POINTER(_object)),] )

PyErr_WriteUnraisable = _rpythonic_function_(		"PyErr_WriteUnraisable", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyErr_CheckSignals = _rpythonic_function_(		"PyErr_CheckSignals", ctypes.c_int, [] )

PyErr_SetInterrupt = _rpythonic_function_(		"PyErr_SetInterrupt", ctypes.c_void_p, [] )

PySignal_SetWakeupFd = _rpythonic_function_(		"PySignal_SetWakeupFd", ctypes.c_int, [
	("fd",		ctypes.c_int),] )

PyErr_SyntaxLocation = _rpythonic_function_(		"PyErr_SyntaxLocation", ctypes.c_void_p, [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("lineno",		ctypes.c_int),] )

PyErr_SyntaxLocationEx = _rpythonic_function_(		"PyErr_SyntaxLocationEx", ctypes.c_void_p, [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("lineno",		ctypes.c_int),
	("col_offset",		ctypes.c_int),] )

PyErr_ProgramText = _rpythonic_function_(		"PyErr_ProgramText", ctypes.POINTER(_object), [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("lineno",		ctypes.c_int),] )

PyUnicodeDecodeError_Create = _rpythonic_function_(		"PyUnicodeDecodeError_Create", ctypes.POINTER(_object), [
	("encoding",		ctypes.POINTER(ctypes.c_char)),
	("C_object",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),
	("start",		ctypes.c_int),
	("end",		ctypes.c_int),
	("reason",		ctypes.POINTER(ctypes.c_char)),] )

PyUnicodeEncodeError_Create = _rpythonic_function_(		"PyUnicodeEncodeError_Create", ctypes.POINTER(_object), [
	("encoding",		ctypes.POINTER(ctypes.c_char)),
	("C_object",		ctypes.POINTER(ctypes.c_ulong)),
	("length",		ctypes.c_int),
	("start",		ctypes.c_int),
	("end",		ctypes.c_int),
	("reason",		ctypes.POINTER(ctypes.c_char)),] )

PyUnicodeTranslateError_Create = _rpythonic_function_(		"PyUnicodeTranslateError_Create", ctypes.POINTER(_object), [
	("C_object",		ctypes.POINTER(ctypes.c_ulong)),
	("length",		ctypes.c_int),
	("start",		ctypes.c_int),
	("end",		ctypes.c_int),
	("reason",		ctypes.POINTER(ctypes.c_char)),] )

PyUnicodeEncodeError_GetEncoding = _rpythonic_function_(		"PyUnicodeEncodeError_GetEncoding", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyUnicodeDecodeError_GetEncoding = _rpythonic_function_(		"PyUnicodeDecodeError_GetEncoding", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyUnicodeEncodeError_GetObject = _rpythonic_function_(		"PyUnicodeEncodeError_GetObject", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyUnicodeDecodeError_GetObject = _rpythonic_function_(		"PyUnicodeDecodeError_GetObject", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyUnicodeTranslateError_GetObject = _rpythonic_function_(		"PyUnicodeTranslateError_GetObject", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyUnicodeEncodeError_GetStart = _rpythonic_function_(		"PyUnicodeEncodeError_GetStart", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

PyUnicodeDecodeError_GetStart = _rpythonic_function_(		"PyUnicodeDecodeError_GetStart", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

PyUnicodeTranslateError_GetStart = _rpythonic_function_(		"PyUnicodeTranslateError_GetStart", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

PyUnicodeEncodeError_SetStart = _rpythonic_function_(		"PyUnicodeEncodeError_SetStart", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

PyUnicodeDecodeError_SetStart = _rpythonic_function_(		"PyUnicodeDecodeError_SetStart", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

PyUnicodeTranslateError_SetStart = _rpythonic_function_(		"PyUnicodeTranslateError_SetStart", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

PyUnicodeEncodeError_GetEnd = _rpythonic_function_(		"PyUnicodeEncodeError_GetEnd", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

PyUnicodeDecodeError_GetEnd = _rpythonic_function_(		"PyUnicodeDecodeError_GetEnd", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

PyUnicodeTranslateError_GetEnd = _rpythonic_function_(		"PyUnicodeTranslateError_GetEnd", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

PyUnicodeEncodeError_SetEnd = _rpythonic_function_(		"PyUnicodeEncodeError_SetEnd", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

PyUnicodeDecodeError_SetEnd = _rpythonic_function_(		"PyUnicodeDecodeError_SetEnd", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

PyUnicodeTranslateError_SetEnd = _rpythonic_function_(		"PyUnicodeTranslateError_SetEnd", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

PyUnicodeEncodeError_GetReason = _rpythonic_function_(		"PyUnicodeEncodeError_GetReason", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyUnicodeDecodeError_GetReason = _rpythonic_function_(		"PyUnicodeDecodeError_GetReason", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyUnicodeTranslateError_GetReason = _rpythonic_function_(		"PyUnicodeTranslateError_GetReason", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyUnicodeEncodeError_SetReason = _rpythonic_function_(		"PyUnicodeEncodeError_SetReason", ctypes.c_int, [
	("exc",		ctypes.POINTER(_object)),
	("reason",		ctypes.POINTER(ctypes.c_char)),] )

PyUnicodeDecodeError_SetReason = _rpythonic_function_(		"PyUnicodeDecodeError_SetReason", ctypes.c_int, [
	("exc",		ctypes.POINTER(_object)),
	("reason",		ctypes.POINTER(ctypes.c_char)),] )

PyUnicodeTranslateError_SetReason = _rpythonic_function_(		"PyUnicodeTranslateError_SetReason", ctypes.c_int, [
	("exc",		ctypes.POINTER(_object)),
	("reason",		ctypes.POINTER(ctypes.c_char)),] )

PyOS_snprintf = _rpythonic_function_(		"PyOS_snprintf", ctypes.c_int, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_uint),
	("format",		ctypes.POINTER(ctypes.c_char)),] )

PyOS_vsnprintf = _rpythonic_function_(		"PyOS_vsnprintf", ctypes.c_int, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_uint),
	("format",		ctypes.POINTER(ctypes.c_char)),
	("va",		ctypes.c_char),] )

Py_tracefunc = _rpythonic_function_(		"Py_tracefunc", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("_frame",		ctypes.POINTER(_frame)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyInterpreterState_New = _rpythonic_function_(		"PyInterpreterState_New", ctypes.POINTER(_is), [] )

PyInterpreterState_Clear = _rpythonic_function_(		"PyInterpreterState_Clear", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyInterpreterState_Delete = _rpythonic_function_(		"PyInterpreterState_Delete", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_PyState_AddModule = _rpythonic_function_(		"_PyState_AddModule", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("PyModuleDef",		ctypes.POINTER(PyModuleDef)),] )

PyState_FindModule = _rpythonic_function_(		"PyState_FindModule", ctypes.POINTER(_object), [
	("PyModuleDef",		ctypes.POINTER(PyModuleDef)),] )

PyThreadState_New = _rpythonic_function_(		"PyThreadState_New", ctypes.POINTER(_ts), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_PyThreadState_Prealloc = _rpythonic_function_(		"_PyThreadState_Prealloc", ctypes.POINTER(_ts), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_PyThreadState_Init = _rpythonic_function_(		"_PyThreadState_Init", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyThreadState_Clear = _rpythonic_function_(		"PyThreadState_Clear", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyThreadState_Delete = _rpythonic_function_(		"PyThreadState_Delete", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyThreadState_DeleteCurrent = _rpythonic_function_(		"PyThreadState_DeleteCurrent", ctypes.c_void_p, [] )

PyThreadState_Get = _rpythonic_function_(		"PyThreadState_Get", ctypes.POINTER(_ts), [] )

PyThreadState_Swap = _rpythonic_function_(		"PyThreadState_Swap", ctypes.POINTER(_ts), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyThreadState_GetDict = _rpythonic_function_(		"PyThreadState_GetDict", ctypes.POINTER(_object), [] )

PyThreadState_SetAsyncExc = _rpythonic_function_(		"PyThreadState_SetAsyncExc", ctypes.c_int, [
	("none",		ctypes.c_long),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyGILState_Ensure = _rpythonic_function_(		"PyGILState_Ensure", ctypes.c_int, [] )

PyGILState_Release = _rpythonic_function_(		"PyGILState_Release", ctypes.c_void_p, [
	("none",		ctypes.c_int),] )

PyGILState_GetThisThreadState = _rpythonic_function_(		"PyGILState_GetThisThreadState", ctypes.POINTER(_ts), [] )

_PyThread_CurrentFrames = _rpythonic_function_(		"_PyThread_CurrentFrames", ctypes.POINTER(_object), [] )

PyInterpreterState_Head = _rpythonic_function_(		"PyInterpreterState_Head", ctypes.POINTER(_is), [] )

PyInterpreterState_Next = _rpythonic_function_(		"PyInterpreterState_Next", ctypes.POINTER(_is), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyInterpreterState_ThreadHead = _rpythonic_function_(		"PyInterpreterState_ThreadHead", ctypes.POINTER(_ts), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyThreadState_Next = _rpythonic_function_(		"PyThreadState_Next", ctypes.POINTER(_ts), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyThreadFrameGetter = _rpythonic_function_(		"PyThreadFrameGetter", ctypes.POINTER(_frame), [
	("self_",		ctypes.POINTER(_ts)),] )

PyArena_New = _rpythonic_function_(		"PyArena_New", ctypes.POINTER(_arena), [] )

PyArena_Free = _rpythonic_function_(		"PyArena_Free", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyArena_Malloc = _rpythonic_function_(		"PyArena_Malloc", ctypes.POINTER(ctypes.c_void_p), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.c_uint),] )

PyArena_AddPyObject = _rpythonic_function_(		"PyArena_AddPyObject", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_Py_VaBuildValue_SizeT = _rpythonic_function_(		"_Py_VaBuildValue_SizeT", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_char),] )

PyArg_Parse = _rpythonic_function_(		"PyArg_Parse", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

PyArg_ParseTuple = _rpythonic_function_(		"PyArg_ParseTuple", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

PyArg_ParseTupleAndKeywords = _rpythonic_function_(		"PyArg_ParseTupleAndKeywords", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

PyArg_ValidateKeywordArguments = _rpythonic_function_(		"PyArg_ValidateKeywordArguments", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyArg_UnpackTuple = _rpythonic_function_(		"PyArg_UnpackTuple", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

Py_BuildValue = _rpythonic_function_(		"Py_BuildValue", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_char)),] )

_Py_BuildValue_SizeT = _rpythonic_function_(		"_Py_BuildValue_SizeT", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_char)),] )

_PyArg_NoKeywords = _rpythonic_function_(		"_PyArg_NoKeywords", ctypes.c_int, [
	("funcname",		ctypes.POINTER(ctypes.c_char)),
	("kw",		ctypes.POINTER(_object)),] )

PyArg_VaParse = _rpythonic_function_(		"PyArg_VaParse", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_char),] )

PyArg_VaParseTupleAndKeywords = _rpythonic_function_(		"PyArg_VaParseTupleAndKeywords", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("none",		ctypes.c_char),] )

Py_VaBuildValue = _rpythonic_function_(		"Py_VaBuildValue", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_char),] )

PyModule_AddObject = _rpythonic_function_(		"PyModule_AddObject", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyModule_AddIntConstant = _rpythonic_function_(		"PyModule_AddIntConstant", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_long),] )

PyModule_AddStringConstant = _rpythonic_function_(		"PyModule_AddStringConstant", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

Py_SetProgramName = _rpythonic_function_(		"Py_SetProgramName", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_int)),] )

PyModule_Create2 = _rpythonic_function_(		"PyModule_Create2", ctypes.POINTER(_object), [
	("PyModuleDef",		ctypes.POINTER(PyModuleDef)),
	("apiver",		ctypes.c_int),] )

Py_GetProgramName = _rpythonic_function_(		"Py_GetProgramName", ctypes.POINTER(ctypes.c_int), [] )

Py_SetPythonHome = _rpythonic_function_(		"Py_SetPythonHome", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_int)),] )

Py_GetPythonHome = _rpythonic_function_(		"Py_GetPythonHome", ctypes.POINTER(ctypes.c_int), [] )

Py_Initialize = _rpythonic_function_(		"Py_Initialize", ctypes.c_void_p, [] )

Py_InitializeEx = _rpythonic_function_(		"Py_InitializeEx", ctypes.c_void_p, [
	("none",		ctypes.c_int),] )

Py_Finalize = _rpythonic_function_(		"Py_Finalize", ctypes.c_void_p, [] )

Py_IsInitialized = _rpythonic_function_(		"Py_IsInitialized", ctypes.c_int, [] )

Py_NewInterpreter = _rpythonic_function_(		"Py_NewInterpreter", ctypes.POINTER(_ts), [] )

Py_EndInterpreter = _rpythonic_function_(		"Py_EndInterpreter", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyRun_SimpleStringFlags = _rpythonic_function_(		"PyRun_SimpleStringFlags", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyRun_AnyFileFlags = _rpythonic_function_(		"PyRun_AnyFileFlags", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyRun_AnyFileExFlags = _rpythonic_function_(		"PyRun_AnyFileExFlags", ctypes.c_int, [
	("fp",		ctypes.POINTER(_IO_FILE)),
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("closeit",		ctypes.c_int),
	("flags",		ctypes.POINTER(PyCompilerFlags)),] )

PyRun_SimpleFileExFlags = _rpythonic_function_(		"PyRun_SimpleFileExFlags", ctypes.c_int, [
	("fp",		ctypes.POINTER(_IO_FILE)),
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("closeit",		ctypes.c_int),
	("flags",		ctypes.POINTER(PyCompilerFlags)),] )

PyRun_InteractiveOneFlags = _rpythonic_function_(		"PyRun_InteractiveOneFlags", ctypes.c_int, [
	("fp",		ctypes.POINTER(_IO_FILE)),
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.POINTER(PyCompilerFlags)),] )

PyRun_InteractiveLoopFlags = _rpythonic_function_(		"PyRun_InteractiveLoopFlags", ctypes.c_int, [
	("fp",		ctypes.POINTER(_IO_FILE)),
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.POINTER(PyCompilerFlags)),] )

PyParser_ASTFromString = _rpythonic_function_(		"PyParser_ASTFromString", ctypes.POINTER(_mod), [
	("s",		ctypes.POINTER(ctypes.c_char)),
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("start",		ctypes.c_int),
	("flags",		ctypes.POINTER(PyCompilerFlags)),
	("arena",		ctypes.POINTER(_arena)),] )

PyParser_ASTFromFile = _rpythonic_function_(		"PyParser_ASTFromFile", ctypes.POINTER(_mod), [
	("fp",		ctypes.POINTER(_IO_FILE)),
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("enc",		ctypes.POINTER(ctypes.c_char)),
	("start",		ctypes.c_int),
	("ps1",		ctypes.POINTER(ctypes.c_char)),
	("ps2",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.POINTER(PyCompilerFlags)),
	("errcode",		ctypes.POINTER(ctypes.c_int)),
	("arena",		ctypes.POINTER(_arena)),] )

PyParser_SimpleParseStringFlags = _rpythonic_function_(		"PyParser_SimpleParseStringFlags", ctypes.POINTER(_node), [
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

PyParser_SimpleParseFileFlags = _rpythonic_function_(		"PyParser_SimpleParseFileFlags", ctypes.POINTER(_node), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

PyRun_StringFlags = _rpythonic_function_(		"PyRun_StringFlags", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyRun_FileExFlags = _rpythonic_function_(		"PyRun_FileExFlags", ctypes.POINTER(_object), [
	("fp",		ctypes.POINTER(_IO_FILE)),
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("start",		ctypes.c_int),
	("C_globals",		ctypes.POINTER(_object)),
	("C_locals",		ctypes.POINTER(_object)),
	("closeit",		ctypes.c_int),
	("flags",		ctypes.POINTER(PyCompilerFlags)),] )

Py_CompileStringExFlags = _rpythonic_function_(		"Py_CompileStringExFlags", ctypes.POINTER(_object), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("start",		ctypes.c_int),
	("flags",		ctypes.POINTER(PyCompilerFlags)),
	("optimize",		ctypes.c_int),] )

Py_SymtableString = _rpythonic_function_(		"Py_SymtableString", ctypes.POINTER(symtable), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("start",		ctypes.c_int),] )

PyErr_Print = _rpythonic_function_(		"PyErr_Print", ctypes.c_void_p, [] )

PyErr_PrintEx = _rpythonic_function_(		"PyErr_PrintEx", ctypes.c_void_p, [
	("none",		ctypes.c_int),] )

PyErr_Display = _rpythonic_function_(		"PyErr_Display", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_Py_PyAtExit = _rpythonic_function_(		"_Py_PyAtExit", ctypes.c_void_p, [
	("func",		ctypes.c_void_p),] )

func = _rpythonic_function_(		"func", ctypes.c_void_p, [] )

Py_AtExit = _rpythonic_function_(		"Py_AtExit", ctypes.c_int, [
	("func",		ctypes.c_void_p),] )

Py_Exit = _rpythonic_function_(		"Py_Exit", ctypes.c_void_p, [
	("none",		ctypes.c_int),] )

_Py_RestoreSignals = _rpythonic_function_(		"_Py_RestoreSignals", ctypes.c_void_p, [] )

Py_FdIsInteractive = _rpythonic_function_(		"Py_FdIsInteractive", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

Py_Main = _rpythonic_function_(		"Py_Main", ctypes.c_int, [
	("argc",		ctypes.c_int),
	("argv",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),] )

Py_GetProgramFullPath = _rpythonic_function_(		"Py_GetProgramFullPath", ctypes.POINTER(ctypes.c_int), [] )

Py_GetPrefix = _rpythonic_function_(		"Py_GetPrefix", ctypes.POINTER(ctypes.c_int), [] )

Py_GetExecPrefix = _rpythonic_function_(		"Py_GetExecPrefix", ctypes.POINTER(ctypes.c_int), [] )

Py_GetPath = _rpythonic_function_(		"Py_GetPath", ctypes.POINTER(ctypes.c_int), [] )

Py_SetPath = _rpythonic_function_(		"Py_SetPath", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_int)),] )

Py_GetVersion = _rpythonic_function_(		"Py_GetVersion", ctypes.POINTER(ctypes.c_char), [] )

Py_GetPlatform = _rpythonic_function_(		"Py_GetPlatform", ctypes.POINTER(ctypes.c_char), [] )

Py_GetCopyright = _rpythonic_function_(		"Py_GetCopyright", ctypes.POINTER(ctypes.c_char), [] )

Py_GetCompiler = _rpythonic_function_(		"Py_GetCompiler", ctypes.POINTER(ctypes.c_char), [] )

Py_GetBuildInfo = _rpythonic_function_(		"Py_GetBuildInfo", ctypes.POINTER(ctypes.c_char), [] )

_Py_svnversion = _rpythonic_function_(		"_Py_svnversion", ctypes.POINTER(ctypes.c_char), [] )

Py_SubversionRevision = _rpythonic_function_(		"Py_SubversionRevision", ctypes.POINTER(ctypes.c_char), [] )

Py_SubversionShortBranch = _rpythonic_function_(		"Py_SubversionShortBranch", ctypes.POINTER(ctypes.c_char), [] )

_PyBuiltin_Init = _rpythonic_function_(		"_PyBuiltin_Init", ctypes.POINTER(_object), [] )

_PySys_Init = _rpythonic_function_(		"_PySys_Init", ctypes.POINTER(_object), [] )

_PyImport_Init = _rpythonic_function_(		"_PyImport_Init", ctypes.c_void_p, [] )

_PyExc_Init = _rpythonic_function_(		"_PyExc_Init", ctypes.c_void_p, [] )

_PyImportHooks_Init = _rpythonic_function_(		"_PyImportHooks_Init", ctypes.c_void_p, [] )

_PyFrame_Init = _rpythonic_function_(		"_PyFrame_Init", ctypes.c_int, [] )

_PyFloat_Init = _rpythonic_function_(		"_PyFloat_Init", ctypes.c_void_p, [] )

PyByteArray_Init = _rpythonic_function_(		"PyByteArray_Init", ctypes.c_int, [] )

_PyExc_Fini = _rpythonic_function_(		"_PyExc_Fini", ctypes.c_void_p, [] )

_PyImport_Fini = _rpythonic_function_(		"_PyImport_Fini", ctypes.c_void_p, [] )

PyMethod_Fini = _rpythonic_function_(		"PyMethod_Fini", ctypes.c_void_p, [] )

PyFrame_Fini = _rpythonic_function_(		"PyFrame_Fini", ctypes.c_void_p, [] )

PyCFunction_Fini = _rpythonic_function_(		"PyCFunction_Fini", ctypes.c_void_p, [] )

PyDict_Fini = _rpythonic_function_(		"PyDict_Fini", ctypes.c_void_p, [] )

PyTuple_Fini = _rpythonic_function_(		"PyTuple_Fini", ctypes.c_void_p, [] )

PyList_Fini = _rpythonic_function_(		"PyList_Fini", ctypes.c_void_p, [] )

PySet_Fini = _rpythonic_function_(		"PySet_Fini", ctypes.c_void_p, [] )

PyBytes_Fini = _rpythonic_function_(		"PyBytes_Fini", ctypes.c_void_p, [] )

PyByteArray_Fini = _rpythonic_function_(		"PyByteArray_Fini", ctypes.c_void_p, [] )

PyFloat_Fini = _rpythonic_function_(		"PyFloat_Fini", ctypes.c_void_p, [] )

PyOS_FiniInterrupts = _rpythonic_function_(		"PyOS_FiniInterrupts", ctypes.c_void_p, [] )

_PyGC_Fini = _rpythonic_function_(		"_PyGC_Fini", ctypes.c_void_p, [] )

PyOS_Readline = _rpythonic_function_(		"PyOS_Readline", ctypes.POINTER(ctypes.c_char), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

PyOS_InputHook = _rpythonic_function_(		"PyOS_InputHook", ctypes.c_int, [] )

PyOS_ReadlineFunctionPointer = _rpythonic_function_(		"PyOS_ReadlineFunctionPointer", ctypes.POINTER(ctypes.c_char), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

PyOS_sighandler_t = _rpythonic_function_(		"PyOS_sighandler_t", ctypes.c_void_p, [
	("none",		ctypes.c_int),] )

PyOS_getsig = _rpythonic_function_(		"PyOS_getsig", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,), [
	("none",		ctypes.c_int),] )

PyOS_setsig = _rpythonic_function_(		"PyOS_setsig", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,), [
	("none",		ctypes.c_int),
	("none",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,)),] )

PyEval_CallObjectWithKeywords = _rpythonic_function_(		"PyEval_CallObjectWithKeywords", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyEval_CallFunction = _rpythonic_function_(		"PyEval_CallFunction", ctypes.POINTER(_object), [
	("obj",		ctypes.POINTER(_object)),
	("format",		ctypes.POINTER(ctypes.c_char)),] )

PyEval_CallMethod = _rpythonic_function_(		"PyEval_CallMethod", ctypes.POINTER(_object), [
	("obj",		ctypes.POINTER(_object)),
	("methodname",		ctypes.POINTER(ctypes.c_char)),
	("format",		ctypes.POINTER(ctypes.c_char)),] )

PyEval_SetProfile = _rpythonic_function_(		"PyEval_SetProfile", ctypes.c_void_p, [
	("none",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_frame),ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyEval_SetTrace = _rpythonic_function_(		"PyEval_SetTrace", ctypes.c_void_p, [
	("none",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_frame),ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyEval_GetBuiltins = _rpythonic_function_(		"PyEval_GetBuiltins", ctypes.POINTER(_object), [] )

PyEval_GetGlobals = _rpythonic_function_(		"PyEval_GetGlobals", ctypes.POINTER(_object), [] )

PyEval_GetLocals = _rpythonic_function_(		"PyEval_GetLocals", ctypes.POINTER(_object), [] )

PyEval_GetFrame = _rpythonic_function_(		"PyEval_GetFrame", ctypes.POINTER(_frame), [] )

PyEval_MergeCompilerFlags = _rpythonic_function_(		"PyEval_MergeCompilerFlags", ctypes.c_int, [
	("cf",		ctypes.POINTER(PyCompilerFlags)),] )

Py_AddPendingCall = _rpythonic_function_(		"Py_AddPendingCall", ctypes.c_int, [
	("func",		ctypes.c_void_p),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),] )

Py_MakePendingCalls = _rpythonic_function_(		"Py_MakePendingCalls", ctypes.c_int, [] )

Py_SetRecursionLimit = _rpythonic_function_(		"Py_SetRecursionLimit", ctypes.c_void_p, [
	("none",		ctypes.c_int),] )

Py_GetRecursionLimit = _rpythonic_function_(		"Py_GetRecursionLimit", ctypes.c_int, [] )

_Py_CheckRecursiveCall = _rpythonic_function_(		"_Py_CheckRecursiveCall", ctypes.c_int, [
	("where",		ctypes.POINTER(ctypes.c_char)),] )

PyEval_GetFuncName = _rpythonic_function_(		"PyEval_GetFuncName", ctypes.POINTER(ctypes.c_char), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyEval_GetFuncDesc = _rpythonic_function_(		"PyEval_GetFuncDesc", ctypes.POINTER(ctypes.c_char), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyEval_GetCallStats = _rpythonic_function_(		"PyEval_GetCallStats", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyEval_EvalFrame = _rpythonic_function_(		"PyEval_EvalFrame", ctypes.POINTER(_object), [
	("_frame",		ctypes.POINTER(_frame)),] )

PyEval_EvalFrameEx = _rpythonic_function_(		"PyEval_EvalFrameEx", ctypes.POINTER(_object), [
	("f",		ctypes.POINTER(_frame)),
	("exc",		ctypes.c_int),] )

PyEval_SaveThread = _rpythonic_function_(		"PyEval_SaveThread", ctypes.POINTER(_ts), [] )

PyEval_RestoreThread = _rpythonic_function_(		"PyEval_RestoreThread", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyEval_ThreadsInitialized = _rpythonic_function_(		"PyEval_ThreadsInitialized", ctypes.c_int, [] )

PyEval_InitThreads = _rpythonic_function_(		"PyEval_InitThreads", ctypes.c_void_p, [] )

_PyEval_FiniThreads = _rpythonic_function_(		"_PyEval_FiniThreads", ctypes.c_void_p, [] )

PyEval_AcquireLock = _rpythonic_function_(		"PyEval_AcquireLock", ctypes.c_void_p, [] )

PyEval_ReleaseLock = _rpythonic_function_(		"PyEval_ReleaseLock", ctypes.c_void_p, [] )

PyEval_AcquireThread = _rpythonic_function_(		"PyEval_AcquireThread", ctypes.c_void_p, [
	("tstate",		ctypes.POINTER(_ts)),] )

PyEval_ReleaseThread = _rpythonic_function_(		"PyEval_ReleaseThread", ctypes.c_void_p, [
	("tstate",		ctypes.POINTER(_ts)),] )

PyEval_ReInitThreads = _rpythonic_function_(		"PyEval_ReInitThreads", ctypes.c_void_p, [] )

_PyEval_SetSwitchInterval = _rpythonic_function_(		"_PyEval_SetSwitchInterval", ctypes.c_void_p, [
	("microseconds",		ctypes.c_ulong),] )

_PyEval_GetSwitchInterval = _rpythonic_function_(		"_PyEval_GetSwitchInterval", ctypes.c_ulong, [] )

_PyEval_SliceIndex = _rpythonic_function_(		"_PyEval_SliceIndex", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

_PyEval_SignalAsyncExc = _rpythonic_function_(		"_PyEval_SignalAsyncExc", ctypes.c_void_p, [] )

PySys_GetObject = _rpythonic_function_(		"PySys_GetObject", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_char)),] )

PySys_SetObject = _rpythonic_function_(		"PySys_SetObject", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PySys_SetArgv = _rpythonic_function_(		"PySys_SetArgv", ctypes.c_void_p, [
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),] )

PySys_SetArgvEx = _rpythonic_function_(		"PySys_SetArgvEx", ctypes.c_void_p, [
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("none",		ctypes.c_int),] )

PySys_SetPath = _rpythonic_function_(		"PySys_SetPath", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_int)),] )

PySys_WriteStdout = _rpythonic_function_(		"PySys_WriteStdout", ctypes.c_void_p, [
	("format",		ctypes.POINTER(ctypes.c_char)),] )

PySys_WriteStderr = _rpythonic_function_(		"PySys_WriteStderr", ctypes.c_void_p, [
	("format",		ctypes.POINTER(ctypes.c_char)),] )

PySys_FormatStdout = _rpythonic_function_(		"PySys_FormatStdout", ctypes.c_void_p, [
	("format",		ctypes.POINTER(ctypes.c_char)),] )

PySys_FormatStderr = _rpythonic_function_(		"PySys_FormatStderr", ctypes.c_void_p, [
	("format",		ctypes.POINTER(ctypes.c_char)),] )

PySys_ResetWarnOptions = _rpythonic_function_(		"PySys_ResetWarnOptions", ctypes.c_void_p, [] )

PySys_AddWarnOption = _rpythonic_function_(		"PySys_AddWarnOption", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_int)),] )

PySys_AddWarnOptionUnicode = _rpythonic_function_(		"PySys_AddWarnOptionUnicode", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PySys_HasWarnOptions = _rpythonic_function_(		"PySys_HasWarnOptions", ctypes.c_int, [] )

PySys_AddXOption = _rpythonic_function_(		"PySys_AddXOption", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_int)),] )

PySys_GetXOptions = _rpythonic_function_(		"PySys_GetXOptions", ctypes.POINTER(_object), [] )

PyOS_InterruptOccurred = _rpythonic_function_(		"PyOS_InterruptOccurred", ctypes.c_int, [] )

PyOS_InitInterrupts = _rpythonic_function_(		"PyOS_InitInterrupts", ctypes.c_void_p, [] )

PyOS_AfterFork = _rpythonic_function_(		"PyOS_AfterFork", ctypes.c_void_p, [] )

PyImport_GetMagicNumber = _rpythonic_function_(		"PyImport_GetMagicNumber", ctypes.c_long, [] )

PyImport_GetMagicTag = _rpythonic_function_(		"PyImport_GetMagicTag", ctypes.POINTER(ctypes.c_char), [] )

PyImport_ExecCodeModule = _rpythonic_function_(		"PyImport_ExecCodeModule", ctypes.POINTER(_object), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("co",		ctypes.POINTER(_object)),] )

PyImport_ExecCodeModuleEx = _rpythonic_function_(		"PyImport_ExecCodeModuleEx", ctypes.POINTER(_object), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("co",		ctypes.POINTER(_object)),
	("pathname",		ctypes.POINTER(ctypes.c_char)),] )

PyImport_ExecCodeModuleWithPathnames = _rpythonic_function_(		"PyImport_ExecCodeModuleWithPathnames", ctypes.POINTER(_object), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("co",		ctypes.POINTER(_object)),
	("pathname",		ctypes.POINTER(ctypes.c_char)),
	("cpathname",		ctypes.POINTER(ctypes.c_char)),] )

PyImport_GetModuleDict = _rpythonic_function_(		"PyImport_GetModuleDict", ctypes.POINTER(_object), [] )

PyImport_AddModule = _rpythonic_function_(		"PyImport_AddModule", ctypes.POINTER(_object), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

PyImport_ImportModule = _rpythonic_function_(		"PyImport_ImportModule", ctypes.POINTER(_object), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

PyImport_ImportModuleNoBlock = _rpythonic_function_(		"PyImport_ImportModuleNoBlock", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_char)),] )

PyImport_ImportModuleLevel = _rpythonic_function_(		"PyImport_ImportModuleLevel", ctypes.POINTER(_object), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("C_globals",		ctypes.POINTER(_object)),
	("C_locals",		ctypes.POINTER(_object)),
	("fromlist",		ctypes.POINTER(_object)),
	("level",		ctypes.c_int),] )

PyImport_GetImporter = _rpythonic_function_(		"PyImport_GetImporter", ctypes.POINTER(_object), [
	("path",		ctypes.POINTER(_object)),] )

PyImport_Import = _rpythonic_function_(		"PyImport_Import", ctypes.POINTER(_object), [
	("name",		ctypes.POINTER(_object)),] )

PyImport_ReloadModule = _rpythonic_function_(		"PyImport_ReloadModule", ctypes.POINTER(_object), [
	("m",		ctypes.POINTER(_object)),] )

PyImport_Cleanup = _rpythonic_function_(		"PyImport_Cleanup", ctypes.c_void_p, [] )

PyImport_ImportFrozenModule = _rpythonic_function_(		"PyImport_ImportFrozenModule", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_char)),] )

_PyImport_AcquireLock = _rpythonic_function_(		"_PyImport_AcquireLock", ctypes.c_void_p, [] )

_PyImport_ReleaseLock = _rpythonic_function_(		"_PyImport_ReleaseLock", ctypes.c_int, [] )

_PyImport_ReInitLock = _rpythonic_function_(		"_PyImport_ReInitLock", ctypes.c_void_p, [] )

_PyImport_FindBuiltin = _rpythonic_function_(		"_PyImport_FindBuiltin", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_char)),] )

_PyImport_FindExtensionUnicode = _rpythonic_function_(		"_PyImport_FindExtensionUnicode", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_PyImport_FixupBuiltin = _rpythonic_function_(		"_PyImport_FixupBuiltin", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

_PyImport_FixupExtensionUnicode = _rpythonic_function_(		"_PyImport_FixupExtensionUnicode", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

initfunc = _rpythonic_function_(		"initfunc", ctypes.POINTER(_object), [] )

PyImport_ExtendInittab = _rpythonic_function_(		"PyImport_ExtendInittab", ctypes.c_int, [
	("newtab",		ctypes.POINTER(_inittab)),] )

PyImport_AppendInittab = _rpythonic_function_(		"PyImport_AppendInittab", ctypes.c_int, [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("initfunc",		ctypes.POINTER(ctypes.c_void_p)),] )

PyObject_Call = _rpythonic_function_(		"PyObject_Call", ctypes.POINTER(_object), [
	("callable_object",		ctypes.POINTER(_object)),
	("args",		ctypes.POINTER(_object)),
	("kw",		ctypes.POINTER(_object)),] )

PyObject_CallObject = _rpythonic_function_(		"PyObject_CallObject", ctypes.POINTER(_object), [
	("callable_object",		ctypes.POINTER(_object)),
	("args",		ctypes.POINTER(_object)),] )

PyObject_CallFunction = _rpythonic_function_(		"PyObject_CallFunction", ctypes.POINTER(_object), [
	("callable_object",		ctypes.POINTER(_object)),
	("format",		ctypes.POINTER(ctypes.c_char)),] )

PyObject_CallMethod = _rpythonic_function_(		"PyObject_CallMethod", ctypes.POINTER(_object), [
	("o",		ctypes.POINTER(_object)),
	("method",		ctypes.POINTER(ctypes.c_char)),
	("format",		ctypes.POINTER(ctypes.c_char)),] )

_PyObject_CallFunction_SizeT = _rpythonic_function_(		"_PyObject_CallFunction_SizeT", ctypes.POINTER(_object), [
	("callable",		ctypes.POINTER(_object)),
	("format",		ctypes.POINTER(ctypes.c_char)),] )

_PyObject_CallMethod_SizeT = _rpythonic_function_(		"_PyObject_CallMethod_SizeT", ctypes.POINTER(_object), [
	("o",		ctypes.POINTER(_object)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("format",		ctypes.POINTER(ctypes.c_char)),] )

PyObject_CallFunctionObjArgs = _rpythonic_function_(		"PyObject_CallFunctionObjArgs", ctypes.POINTER(_object), [
	("callable",		ctypes.POINTER(_object)),] )

PyObject_CallMethodObjArgs = _rpythonic_function_(		"PyObject_CallMethodObjArgs", ctypes.POINTER(_object), [
	("o",		ctypes.POINTER(_object)),
	("method",		ctypes.POINTER(_object)),] )

PyObject_Type = _rpythonic_function_(		"PyObject_Type", ctypes.POINTER(_object), [
	("o",		ctypes.POINTER(_object)),] )

PyObject_Size = _rpythonic_function_(		"PyObject_Size", ctypes.c_int, [
	("o",		ctypes.POINTER(_object)),] )

PyObject_Length = _rpythonic_function_(		"PyObject_Length", ctypes.c_int, [
	("o",		ctypes.POINTER(_object)),] )

_PyObject_LengthHint = _rpythonic_function_(		"_PyObject_LengthHint", ctypes.c_int, [
	("o",		ctypes.POINTER(_object)),
	("none",		ctypes.c_int),] )

PyObject_GetItem = _rpythonic_function_(		"PyObject_GetItem", ctypes.POINTER(_object), [
	("o",		ctypes.POINTER(_object)),
	("key",		ctypes.POINTER(_object)),] )

PyObject_SetItem = _rpythonic_function_(		"PyObject_SetItem", ctypes.c_int, [
	("o",		ctypes.POINTER(_object)),
	("key",		ctypes.POINTER(_object)),
	("v",		ctypes.POINTER(_object)),] )

PyObject_DelItemString = _rpythonic_function_(		"PyObject_DelItemString", ctypes.c_int, [
	("o",		ctypes.POINTER(_object)),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

PyObject_DelItem = _rpythonic_function_(		"PyObject_DelItem", ctypes.c_int, [
	("o",		ctypes.POINTER(_object)),
	("key",		ctypes.POINTER(_object)),] )

PyObject_AsCharBuffer = _rpythonic_function_(		"PyObject_AsCharBuffer", ctypes.c_int, [
	("obj",		ctypes.POINTER(_object)),
	("buffer",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("buffer_len",		ctypes.POINTER(ctypes.c_int)),] )

PyObject_CheckReadBuffer = _rpythonic_function_(		"PyObject_CheckReadBuffer", ctypes.c_int, [
	("obj",		ctypes.POINTER(_object)),] )

PyObject_AsReadBuffer = _rpythonic_function_(		"PyObject_AsReadBuffer", ctypes.c_int, [
	("obj",		ctypes.POINTER(_object)),
	("buffer",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("buffer_len",		ctypes.POINTER(ctypes.c_int)),] )

PyObject_AsWriteBuffer = _rpythonic_function_(		"PyObject_AsWriteBuffer", ctypes.c_int, [
	("obj",		ctypes.POINTER(_object)),
	("buffer",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("buffer_len",		ctypes.POINTER(ctypes.c_int)),] )

PyObject_GetBuffer = _rpythonic_function_(		"PyObject_GetBuffer", ctypes.c_int, [
	("obj",		ctypes.POINTER(_object)),
	("view",		ctypes.POINTER(bufferinfo)),
	("flags",		ctypes.c_int),] )

PyBuffer_GetPointer = _rpythonic_function_(		"PyBuffer_GetPointer", ctypes.POINTER(ctypes.c_void_p), [
	("view",		ctypes.POINTER(bufferinfo)),
	("indices",		ctypes.POINTER(ctypes.c_int)),] )

PyBuffer_SizeFromFormat = _rpythonic_function_(		"PyBuffer_SizeFromFormat", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_char)),] )

PyBuffer_ToContiguous = _rpythonic_function_(		"PyBuffer_ToContiguous", ctypes.c_int, [
	("buf",		ctypes.POINTER(ctypes.c_void_p)),
	("view",		ctypes.POINTER(bufferinfo)),
	("C_len",		ctypes.c_int),
	("fort",		ctypes.c_char),] )

PyBuffer_FromContiguous = _rpythonic_function_(		"PyBuffer_FromContiguous", ctypes.c_int, [
	("view",		ctypes.POINTER(bufferinfo)),
	("buf",		ctypes.POINTER(ctypes.c_void_p)),
	("C_len",		ctypes.c_int),
	("fort",		ctypes.c_char),] )

PyObject_CopyData = _rpythonic_function_(		"PyObject_CopyData", ctypes.c_int, [
	("dest",		ctypes.POINTER(_object)),
	("src",		ctypes.POINTER(_object)),] )

PyBuffer_IsContiguous = _rpythonic_function_(		"PyBuffer_IsContiguous", ctypes.c_int, [
	("view",		ctypes.POINTER(bufferinfo)),
	("fort",		ctypes.c_char),] )

PyBuffer_FillContiguousStrides = _rpythonic_function_(		"PyBuffer_FillContiguousStrides", ctypes.c_void_p, [
	("ndims",		ctypes.c_int),
	("shape",		ctypes.POINTER(ctypes.c_int)),
	("strides",		ctypes.POINTER(ctypes.c_int)),
	("itemsize",		ctypes.c_int),
	("fort",		ctypes.c_char),] )

PyBuffer_FillInfo = _rpythonic_function_(		"PyBuffer_FillInfo", ctypes.c_int, [
	("view",		ctypes.POINTER(bufferinfo)),
	("o",		ctypes.POINTER(_object)),
	("buf",		ctypes.POINTER(ctypes.c_void_p)),
	("C_len",		ctypes.c_int),
	("readonly",		ctypes.c_int),
	("flags",		ctypes.c_int),] )

PyBuffer_Release = _rpythonic_function_(		"PyBuffer_Release", ctypes.c_void_p, [
	("view",		ctypes.POINTER(bufferinfo)),] )

PyObject_Format = _rpythonic_function_(		"PyObject_Format", ctypes.POINTER(_object), [
	("obj",		ctypes.POINTER(_object)),
	("format_spec",		ctypes.POINTER(_object)),] )

PyObject_GetIter = _rpythonic_function_(		"PyObject_GetIter", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyIter_Next = _rpythonic_function_(		"PyIter_Next", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyNumber_Check = _rpythonic_function_(		"PyNumber_Check", ctypes.c_int, [
	("o",		ctypes.POINTER(_object)),] )

PyNumber_Add = _rpythonic_function_(		"PyNumber_Add", ctypes.POINTER(_object), [
	("o1",		ctypes.POINTER(_object)),
	("o2",		ctypes.POINTER(_object)),] )

PyNumber_Subtract = _rpythonic_function_(		"PyNumber_Subtract", ctypes.POINTER(_object), [
	("o1",		ctypes.POINTER(_object)),
	("o2",		ctypes.POINTER(_object)),] )

PyNumber_Multiply = _rpythonic_function_(		"PyNumber_Multiply", ctypes.POINTER(_object), [
	("o1",		ctypes.POINTER(_object)),
	("o2",		ctypes.POINTER(_object)),] )

PyNumber_FloorDivide = _rpythonic_function_(		"PyNumber_FloorDivide", ctypes.POINTER(_object), [
	("o1",		ctypes.POINTER(_object)),
	("o2",		ctypes.POINTER(_object)),] )

PyNumber_TrueDivide = _rpythonic_function_(		"PyNumber_TrueDivide", ctypes.POINTER(_object), [
	("o1",		ctypes.POINTER(_object)),
	("o2",		ctypes.POINTER(_object)),] )

PyNumber_Remainder = _rpythonic_function_(		"PyNumber_Remainder", ctypes.POINTER(_object), [
	("o1",		ctypes.POINTER(_object)),
	("o2",		ctypes.POINTER(_object)),] )

PyNumber_Divmod = _rpythonic_function_(		"PyNumber_Divmod", ctypes.POINTER(_object), [
	("o1",		ctypes.POINTER(_object)),
	("o2",		ctypes.POINTER(_object)),] )

PyNumber_Power = _rpythonic_function_(		"PyNumber_Power", ctypes.POINTER(_object), [
	("o1",		ctypes.POINTER(_object)),
	("o2",		ctypes.POINTER(_object)),
	("o3",		ctypes.POINTER(_object)),] )

PyNumber_Negative = _rpythonic_function_(		"PyNumber_Negative", ctypes.POINTER(_object), [
	("o",		ctypes.POINTER(_object)),] )

PyNumber_Positive = _rpythonic_function_(		"PyNumber_Positive", ctypes.POINTER(_object), [
	("o",		ctypes.POINTER(_object)),] )

PyNumber_Absolute = _rpythonic_function_(		"PyNumber_Absolute", ctypes.POINTER(_object), [
	("o",		ctypes.POINTER(_object)),] )

PyNumber_Invert = _rpythonic_function_(		"PyNumber_Invert", ctypes.POINTER(_object), [
	("o",		ctypes.POINTER(_object)),] )

PyNumber_Lshift = _rpythonic_function_(		"PyNumber_Lshift", ctypes.POINTER(_object), [
	("o1",		ctypes.POINTER(_object)),
	("o2",		ctypes.POINTER(_object)),] )

PyNumber_Rshift = _rpythonic_function_(		"PyNumber_Rshift", ctypes.POINTER(_object), [
	("o1",		ctypes.POINTER(_object)),
	("o2",		ctypes.POINTER(_object)),] )

PyNumber_And = _rpythonic_function_(		"PyNumber_And", ctypes.POINTER(_object), [
	("o1",		ctypes.POINTER(_object)),
	("o2",		ctypes.POINTER(_object)),] )

PyNumber_Xor = _rpythonic_function_(		"PyNumber_Xor", ctypes.POINTER(_object), [
	("o1",		ctypes.POINTER(_object)),
	("o2",		ctypes.POINTER(_object)),] )

PyNumber_Or = _rpythonic_function_(		"PyNumber_Or", ctypes.POINTER(_object), [
	("o1",		ctypes.POINTER(_object)),
	("o2",		ctypes.POINTER(_object)),] )

PyNumber_Index = _rpythonic_function_(		"PyNumber_Index", ctypes.POINTER(_object), [
	("o",		ctypes.POINTER(_object)),] )

PyNumber_AsSsize_t = _rpythonic_function_(		"PyNumber_AsSsize_t", ctypes.c_int, [
	("o",		ctypes.POINTER(_object)),
	("exc",		ctypes.POINTER(_object)),] )

_PyNumber_ConvertIntegralToInt = _rpythonic_function_(		"_PyNumber_ConvertIntegralToInt", ctypes.POINTER(_object), [
	("integral",		ctypes.POINTER(_object)),
	("error_format",		ctypes.POINTER(ctypes.c_char)),] )

PyNumber_Long = _rpythonic_function_(		"PyNumber_Long", ctypes.POINTER(_object), [
	("o",		ctypes.POINTER(_object)),] )

PyNumber_Float = _rpythonic_function_(		"PyNumber_Float", ctypes.POINTER(_object), [
	("o",		ctypes.POINTER(_object)),] )

PyNumber_InPlaceAdd = _rpythonic_function_(		"PyNumber_InPlaceAdd", ctypes.POINTER(_object), [
	("o1",		ctypes.POINTER(_object)),
	("o2",		ctypes.POINTER(_object)),] )

PyNumber_InPlaceSubtract = _rpythonic_function_(		"PyNumber_InPlaceSubtract", ctypes.POINTER(_object), [
	("o1",		ctypes.POINTER(_object)),
	("o2",		ctypes.POINTER(_object)),] )

PyNumber_InPlaceMultiply = _rpythonic_function_(		"PyNumber_InPlaceMultiply", ctypes.POINTER(_object), [
	("o1",		ctypes.POINTER(_object)),
	("o2",		ctypes.POINTER(_object)),] )

PyNumber_InPlaceFloorDivide = _rpythonic_function_(		"PyNumber_InPlaceFloorDivide", ctypes.POINTER(_object), [
	("o1",		ctypes.POINTER(_object)),
	("o2",		ctypes.POINTER(_object)),] )

PyNumber_InPlaceTrueDivide = _rpythonic_function_(		"PyNumber_InPlaceTrueDivide", ctypes.POINTER(_object), [
	("o1",		ctypes.POINTER(_object)),
	("o2",		ctypes.POINTER(_object)),] )

PyNumber_InPlaceRemainder = _rpythonic_function_(		"PyNumber_InPlaceRemainder", ctypes.POINTER(_object), [
	("o1",		ctypes.POINTER(_object)),
	("o2",		ctypes.POINTER(_object)),] )

PyNumber_InPlacePower = _rpythonic_function_(		"PyNumber_InPlacePower", ctypes.POINTER(_object), [
	("o1",		ctypes.POINTER(_object)),
	("o2",		ctypes.POINTER(_object)),
	("o3",		ctypes.POINTER(_object)),] )

PyNumber_InPlaceLshift = _rpythonic_function_(		"PyNumber_InPlaceLshift", ctypes.POINTER(_object), [
	("o1",		ctypes.POINTER(_object)),
	("o2",		ctypes.POINTER(_object)),] )

PyNumber_InPlaceRshift = _rpythonic_function_(		"PyNumber_InPlaceRshift", ctypes.POINTER(_object), [
	("o1",		ctypes.POINTER(_object)),
	("o2",		ctypes.POINTER(_object)),] )

PyNumber_InPlaceAnd = _rpythonic_function_(		"PyNumber_InPlaceAnd", ctypes.POINTER(_object), [
	("o1",		ctypes.POINTER(_object)),
	("o2",		ctypes.POINTER(_object)),] )

PyNumber_InPlaceXor = _rpythonic_function_(		"PyNumber_InPlaceXor", ctypes.POINTER(_object), [
	("o1",		ctypes.POINTER(_object)),
	("o2",		ctypes.POINTER(_object)),] )

PyNumber_InPlaceOr = _rpythonic_function_(		"PyNumber_InPlaceOr", ctypes.POINTER(_object), [
	("o1",		ctypes.POINTER(_object)),
	("o2",		ctypes.POINTER(_object)),] )

PyNumber_ToBase = _rpythonic_function_(		"PyNumber_ToBase", ctypes.POINTER(_object), [
	("n",		ctypes.POINTER(_object)),
	("base",		ctypes.c_int),] )

PySequence_Check = _rpythonic_function_(		"PySequence_Check", ctypes.c_int, [
	("o",		ctypes.POINTER(_object)),] )

PySequence_Size = _rpythonic_function_(		"PySequence_Size", ctypes.c_int, [
	("o",		ctypes.POINTER(_object)),] )

PySequence_Length = _rpythonic_function_(		"PySequence_Length", ctypes.c_int, [
	("o",		ctypes.POINTER(_object)),] )

PySequence_Concat = _rpythonic_function_(		"PySequence_Concat", ctypes.POINTER(_object), [
	("o1",		ctypes.POINTER(_object)),
	("o2",		ctypes.POINTER(_object)),] )

PySequence_Repeat = _rpythonic_function_(		"PySequence_Repeat", ctypes.POINTER(_object), [
	("o",		ctypes.POINTER(_object)),
	("count",		ctypes.c_int),] )

PySequence_GetItem = _rpythonic_function_(		"PySequence_GetItem", ctypes.POINTER(_object), [
	("o",		ctypes.POINTER(_object)),
	("i",		ctypes.c_int),] )

PySequence_GetSlice = _rpythonic_function_(		"PySequence_GetSlice", ctypes.POINTER(_object), [
	("o",		ctypes.POINTER(_object)),
	("i1",		ctypes.c_int),
	("i2",		ctypes.c_int),] )

PySequence_SetItem = _rpythonic_function_(		"PySequence_SetItem", ctypes.c_int, [
	("o",		ctypes.POINTER(_object)),
	("i",		ctypes.c_int),
	("v",		ctypes.POINTER(_object)),] )

PySequence_DelItem = _rpythonic_function_(		"PySequence_DelItem", ctypes.c_int, [
	("o",		ctypes.POINTER(_object)),
	("i",		ctypes.c_int),] )

PySequence_SetSlice = _rpythonic_function_(		"PySequence_SetSlice", ctypes.c_int, [
	("o",		ctypes.POINTER(_object)),
	("i1",		ctypes.c_int),
	("i2",		ctypes.c_int),
	("v",		ctypes.POINTER(_object)),] )

PySequence_DelSlice = _rpythonic_function_(		"PySequence_DelSlice", ctypes.c_int, [
	("o",		ctypes.POINTER(_object)),
	("i1",		ctypes.c_int),
	("i2",		ctypes.c_int),] )

PySequence_Tuple = _rpythonic_function_(		"PySequence_Tuple", ctypes.POINTER(_object), [
	("o",		ctypes.POINTER(_object)),] )

PySequence_List = _rpythonic_function_(		"PySequence_List", ctypes.POINTER(_object), [
	("o",		ctypes.POINTER(_object)),] )

PySequence_Fast = _rpythonic_function_(		"PySequence_Fast", ctypes.POINTER(_object), [
	("o",		ctypes.POINTER(_object)),
	("m",		ctypes.POINTER(ctypes.c_char)),] )

PySequence_Count = _rpythonic_function_(		"PySequence_Count", ctypes.c_int, [
	("o",		ctypes.POINTER(_object)),
	("value",		ctypes.POINTER(_object)),] )

PySequence_Contains = _rpythonic_function_(		"PySequence_Contains", ctypes.c_int, [
	("seq",		ctypes.POINTER(_object)),
	("ob",		ctypes.POINTER(_object)),] )

_PySequence_IterSearch = _rpythonic_function_(		"_PySequence_IterSearch", ctypes.c_int, [
	("seq",		ctypes.POINTER(_object)),
	("obj",		ctypes.POINTER(_object)),
	("operation",		ctypes.c_int),] )

PySequence_In = _rpythonic_function_(		"PySequence_In", ctypes.c_int, [
	("o",		ctypes.POINTER(_object)),
	("value",		ctypes.POINTER(_object)),] )

PySequence_Index = _rpythonic_function_(		"PySequence_Index", ctypes.c_int, [
	("o",		ctypes.POINTER(_object)),
	("value",		ctypes.POINTER(_object)),] )

PySequence_InPlaceConcat = _rpythonic_function_(		"PySequence_InPlaceConcat", ctypes.POINTER(_object), [
	("o1",		ctypes.POINTER(_object)),
	("o2",		ctypes.POINTER(_object)),] )

PySequence_InPlaceRepeat = _rpythonic_function_(		"PySequence_InPlaceRepeat", ctypes.POINTER(_object), [
	("o",		ctypes.POINTER(_object)),
	("count",		ctypes.c_int),] )

PyMapping_Check = _rpythonic_function_(		"PyMapping_Check", ctypes.c_int, [
	("o",		ctypes.POINTER(_object)),] )

PyMapping_Size = _rpythonic_function_(		"PyMapping_Size", ctypes.c_int, [
	("o",		ctypes.POINTER(_object)),] )

PyMapping_Length = _rpythonic_function_(		"PyMapping_Length", ctypes.c_int, [
	("o",		ctypes.POINTER(_object)),] )

PyMapping_HasKeyString = _rpythonic_function_(		"PyMapping_HasKeyString", ctypes.c_int, [
	("o",		ctypes.POINTER(_object)),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

PyMapping_HasKey = _rpythonic_function_(		"PyMapping_HasKey", ctypes.c_int, [
	("o",		ctypes.POINTER(_object)),
	("key",		ctypes.POINTER(_object)),] )

PyMapping_Keys = _rpythonic_function_(		"PyMapping_Keys", ctypes.POINTER(_object), [
	("o",		ctypes.POINTER(_object)),] )

PyMapping_Values = _rpythonic_function_(		"PyMapping_Values", ctypes.POINTER(_object), [
	("o",		ctypes.POINTER(_object)),] )

PyMapping_Items = _rpythonic_function_(		"PyMapping_Items", ctypes.POINTER(_object), [
	("o",		ctypes.POINTER(_object)),] )

PyMapping_GetItemString = _rpythonic_function_(		"PyMapping_GetItemString", ctypes.POINTER(_object), [
	("o",		ctypes.POINTER(_object)),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

PyMapping_SetItemString = _rpythonic_function_(		"PyMapping_SetItemString", ctypes.c_int, [
	("o",		ctypes.POINTER(_object)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(_object)),] )

PyObject_IsInstance = _rpythonic_function_(		"PyObject_IsInstance", ctypes.c_int, [
	("C_object",		ctypes.POINTER(_object)),
	("typeorclass",		ctypes.POINTER(_object)),] )

PyObject_IsSubclass = _rpythonic_function_(		"PyObject_IsSubclass", ctypes.c_int, [
	("C_object",		ctypes.POINTER(_object)),
	("typeorclass",		ctypes.POINTER(_object)),] )

_PyObject_RealIsInstance = _rpythonic_function_(		"_PyObject_RealIsInstance", ctypes.c_int, [
	("inst",		ctypes.POINTER(_object)),
	("cls",		ctypes.POINTER(_object)),] )

_PyObject_RealIsSubclass = _rpythonic_function_(		"_PyObject_RealIsSubclass", ctypes.c_int, [
	("derived",		ctypes.POINTER(_object)),
	("cls",		ctypes.POINTER(_object)),] )

_Py_add_one_to_index_F = _rpythonic_function_(		"_Py_add_one_to_index_F", ctypes.c_void_p, [
	("nd",		ctypes.c_int),
	("index",		ctypes.POINTER(ctypes.c_int)),
	("shape",		ctypes.POINTER(ctypes.c_int)),] )

_Py_add_one_to_index_C = _rpythonic_function_(		"_Py_add_one_to_index_C", ctypes.c_void_p, [
	("nd",		ctypes.c_int),
	("index",		ctypes.POINTER(ctypes.c_int)),
	("shape",		ctypes.POINTER(ctypes.c_int)),] )

PyCode_New = _rpythonic_function_(		"PyCode_New", ctypes.POINTER(PyCodeObject), [
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyCode_NewEmpty = _rpythonic_function_(		"PyCode_NewEmpty", ctypes.POINTER(PyCodeObject), [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("funcname",		ctypes.POINTER(ctypes.c_char)),
	("firstlineno",		ctypes.c_int),] )

PyCode_Addr2Line = _rpythonic_function_(		"PyCode_Addr2Line", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

_PyCode_CheckLineNumber = _rpythonic_function_(		"_PyCode_CheckLineNumber", ctypes.c_int, [
	("co",		ctypes.POINTER(PyCodeObject)),
	("lasti",		ctypes.c_int),
	("bounds",		ctypes.POINTER(_addr_pair)),] )

PyCode_Optimize = _rpythonic_function_(		"PyCode_Optimize", ctypes.POINTER(_object), [
	("code",		ctypes.POINTER(_object)),
	("consts",		ctypes.POINTER(_object)),
	("names",		ctypes.POINTER(_object)),
	("lineno_obj",		ctypes.POINTER(_object)),] )

PyNode_Compile = _rpythonic_function_(		"PyNode_Compile", ctypes.POINTER(PyCodeObject), [
	("_node",		ctypes.POINTER(_node)),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

PyAST_CompileEx = _rpythonic_function_(		"PyAST_CompileEx", ctypes.POINTER(PyCodeObject), [
	("mod",		ctypes.POINTER(_mod)),
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.POINTER(PyCompilerFlags)),
	("optimize",		ctypes.c_int),
	("arena",		ctypes.POINTER(_arena)),] )

PyFuture_FromAST = _rpythonic_function_(		"PyFuture_FromAST", ctypes.POINTER(PyFutureFeatures), [
	("_mod",		ctypes.POINTER(_mod)),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

PyEval_EvalCode = _rpythonic_function_(		"PyEval_EvalCode", ctypes.POINTER(_object), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

PyEval_EvalCodeEx = _rpythonic_function_(		"PyEval_EvalCodeEx", ctypes.POINTER(_object), [
	("co",		ctypes.POINTER(_object)),
	("C_globals",		ctypes.POINTER(_object)),
	("C_locals",		ctypes.POINTER(_object)),
	("args",		ctypes.POINTER(ctypes.POINTER(_object))),
	("argc",		ctypes.c_int),
	("kwds",		ctypes.POINTER(ctypes.POINTER(_object))),
	("kwdc",		ctypes.c_int),
	("defs",		ctypes.POINTER(ctypes.POINTER(_object))),
	("defc",		ctypes.c_int),
	("kwdefs",		ctypes.POINTER(_object)),
	("closure",		ctypes.POINTER(_object)),] )

_PyEval_CallTracing = _rpythonic_function_(		"_PyEval_CallTracing", ctypes.POINTER(_object), [
	("func",		ctypes.POINTER(_object)),
	("args",		ctypes.POINTER(_object)),] )

PyOS_string_to_double = _rpythonic_function_(		"PyOS_string_to_double", ctypes.c_double, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("overflow_exception",		ctypes.POINTER(_object)),] )

PyOS_double_to_string = _rpythonic_function_(		"PyOS_double_to_string", ctypes.POINTER(ctypes.c_char), [
	("val",		ctypes.c_double),
	("format_code",		ctypes.c_char),
	("precision",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("C_type",		ctypes.POINTER(ctypes.c_int)),] )

_Py_parse_inf_or_nan = _rpythonic_function_(		"_Py_parse_inf_or_nan", ctypes.c_double, [
	("p",		ctypes.POINTER(ctypes.c_char)),
	("endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

PyOS_mystrnicmp = _rpythonic_function_(		"PyOS_mystrnicmp", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),] )

PyOS_mystricmp = _rpythonic_function_(		"PyOS_mystricmp", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

_Py_dg_strtod = _rpythonic_function_(		"_Py_dg_strtod", ctypes.c_double, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("ptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

_Py_dg_dtoa = _rpythonic_function_(		"_Py_dg_dtoa", ctypes.POINTER(ctypes.c_char), [
	("d",		ctypes.c_double),
	("mode",		ctypes.c_int),
	("ndigits",		ctypes.c_int),
	("decpt",		ctypes.POINTER(ctypes.c_int)),
	("sign",		ctypes.POINTER(ctypes.c_int)),
	("rve",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

_Py_dg_freedtoa = _rpythonic_function_(		"_Py_dg_freedtoa", ctypes.c_void_p, [
	("s",		ctypes.POINTER(ctypes.c_char)),] )

_Py_char2wchar = _rpythonic_function_(		"_Py_char2wchar", ctypes.POINTER(ctypes.c_int), [
	("arg",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.POINTER(ctypes.c_uint)),] )

_Py_wchar2char = _rpythonic_function_(		"_Py_wchar2char", ctypes.POINTER(ctypes.c_char), [
	("text",		ctypes.POINTER(ctypes.c_int)),
	("error_pos",		ctypes.POINTER(ctypes.c_uint)),] )

_Py_wstat = _rpythonic_function_(		"_Py_wstat", ctypes.c_int, [
	("path",		ctypes.POINTER(ctypes.c_int)),
	("buf",		ctypes.POINTER(stat)),] )

_Py_stat = _rpythonic_function_(		"_Py_stat", ctypes.c_int, [
	("path",		ctypes.POINTER(_object)),
	("statbuf",		ctypes.POINTER(stat)),] )

_Py_wfopen = _rpythonic_function_(		"_Py_wfopen", ctypes.POINTER(_IO_FILE), [
	("path",		ctypes.POINTER(ctypes.c_int)),
	("mode",		ctypes.POINTER(ctypes.c_int)),] )

_Py_fopen = _rpythonic_function_(		"_Py_fopen", ctypes.POINTER(_IO_FILE), [
	("path",		ctypes.POINTER(_object)),
	("mode",		ctypes.POINTER(ctypes.c_char)),] )

_Py_wreadlink = _rpythonic_function_(		"_Py_wreadlink", ctypes.c_int, [
	("path",		ctypes.POINTER(ctypes.c_int)),
	("buf",		ctypes.POINTER(ctypes.c_int)),
	("bufsiz",		ctypes.c_uint),] )

_Py_wrealpath = _rpythonic_function_(		"_Py_wrealpath", ctypes.POINTER(ctypes.c_int), [
	("path",		ctypes.POINTER(ctypes.c_int)),
	("resolved_path",		ctypes.POINTER(ctypes.c_int)),
	("resolved_path_size",		ctypes.c_uint),] )

_Py_wgetcwd = _rpythonic_function_(		"_Py_wgetcwd", ctypes.POINTER(ctypes.c_int), [
	("buf",		ctypes.POINTER(ctypes.c_int)),
	("size",		ctypes.c_uint),] )

_Py_Mangle = _rpythonic_function_(		"_Py_Mangle", ctypes.POINTER(_object), [
	("p",		ctypes.POINTER(_object)),
	("name",		ctypes.POINTER(_object)),] )

_function = _rpythonic_function_(		"_function", ctypes.c_void_p, [
	("none",		ctypes.c_void_p),] )

sysv_signal = _rpythonic_function_(		"sysv_signal", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,), [
	("__sig",		ctypes.c_int),
	("__handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,)),] )

signal = _rpythonic_function_(		"signal", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,), [
	("__sig",		ctypes.c_int),
	("__handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,)),] )

bsd_signal = _rpythonic_function_(		"bsd_signal", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,), [
	("__sig",		ctypes.c_int),
	("__handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,)),] )

kill = _rpythonic_function_(		"kill", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__sig",		ctypes.c_int),] )

killpg = _rpythonic_function_(		"killpg", ctypes.c_int, [
	("__pgrp",		ctypes.c_int),
	("__sig",		ctypes.c_int),] )

C_raise = _rpythonic_function_(		"C_raise", ctypes.c_int, [
	("__sig",		ctypes.c_int),] )

ssignal = _rpythonic_function_(		"ssignal", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,), [
	("__sig",		ctypes.c_int),
	("__handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,)),] )

gsignal = _rpythonic_function_(		"gsignal", ctypes.c_int, [
	("__sig",		ctypes.c_int),] )

psignal = _rpythonic_function_(		"psignal", ctypes.c_void_p, [
	("__sig",		ctypes.c_int),
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

psiginfo = _rpythonic_function_(		"psiginfo", ctypes.c_void_p, [
	("__pinfo",		ctypes.POINTER(siginfo)),
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

sigpause = _rpythonic_function_(		"sigpause", ctypes.c_int, [
	("__sig",		ctypes.c_int),] )

sigblock = _rpythonic_function_(		"sigblock", ctypes.c_int, [
	("__mask",		ctypes.c_int),] )

sigsetmask = _rpythonic_function_(		"sigsetmask", ctypes.c_int, [
	("__mask",		ctypes.c_int),] )

siggetmask = _rpythonic_function_(		"siggetmask", ctypes.c_int, [] )

sigemptyset = _rpythonic_function_(		"sigemptyset", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),] )

sigfillset = _rpythonic_function_(		"sigfillset", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),] )

sigaddset = _rpythonic_function_(		"sigaddset", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),
	("__signo",		ctypes.c_int),] )

sigdelset = _rpythonic_function_(		"sigdelset", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),
	("__signo",		ctypes.c_int),] )

sigismember = _rpythonic_function_(		"sigismember", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),
	("__signo",		ctypes.c_int),] )

sigisemptyset = _rpythonic_function_(		"sigisemptyset", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),] )

sigandset = _rpythonic_function_(		"sigandset", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),
	("__left",		ctypes.POINTER(__sigset_t)),
	("__right",		ctypes.POINTER(__sigset_t)),] )

sigorset = _rpythonic_function_(		"sigorset", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),
	("__left",		ctypes.POINTER(__sigset_t)),
	("__right",		ctypes.POINTER(__sigset_t)),] )

sa_sigaction = _rpythonic_function_(		"sa_sigaction", ctypes.c_void_p, [
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

sigprocmask = _rpythonic_function_(		"sigprocmask", ctypes.c_int, [
	("__how",		ctypes.c_int),
	("__set",		ctypes.POINTER(__sigset_t)),
	("__oset",		ctypes.POINTER(__sigset_t)),] )

sa_restorer = _rpythonic_function_(		"sa_restorer", ctypes.c_void_p, [] )

sigsuspend = _rpythonic_function_(		"sigsuspend", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),] )

sigpending = _rpythonic_function_(		"sigpending", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),] )

sigwait = _rpythonic_function_(		"sigwait", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),
	("__sig",		ctypes.POINTER(ctypes.c_int)),] )

sigwaitinfo = _rpythonic_function_(		"sigwaitinfo", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),
	("__info",		ctypes.POINTER(siginfo)),] )

sigtimedwait = _rpythonic_function_(		"sigtimedwait", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),
	("__info",		ctypes.POINTER(siginfo)),
	("__timeout",		ctypes.POINTER(timespec)),] )

sigqueue = _rpythonic_function_(		"sigqueue", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__sig",		ctypes.c_int),
	("__val",		sigval),] )

sigreturn = _rpythonic_function_(		"sigreturn", ctypes.c_int, [
	("__scp",		ctypes.POINTER(sigcontext)),] )

siginterrupt = _rpythonic_function_(		"siginterrupt", ctypes.c_int, [
	("__sig",		ctypes.c_int),
	("__interrupt",		ctypes.c_int),] )

sighold = _rpythonic_function_(		"sighold", ctypes.c_int, [
	("__sig",		ctypes.c_int),] )

sigrelse = _rpythonic_function_(		"sigrelse", ctypes.c_int, [
	("__sig",		ctypes.c_int),] )

sigignore = _rpythonic_function_(		"sigignore", ctypes.c_int, [
	("__sig",		ctypes.c_int),] )

sigset = _rpythonic_function_(		"sigset", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,), [
	("__sig",		ctypes.c_int),
	("__disp",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,)),] )

pthread_sigmask = _rpythonic_function_(		"pthread_sigmask", ctypes.c_int, [
	("__how",		ctypes.c_int),
	("__newmask",		ctypes.POINTER(__sigset_t)),
	("__oldmask",		ctypes.POINTER(__sigset_t)),] )

pthread_kill = _rpythonic_function_(		"pthread_kill", ctypes.c_int, [
	("__threadid",		ctypes.c_uint64),
	("__signo",		ctypes.c_int),] )

pthread_sigqueue = _rpythonic_function_(		"pthread_sigqueue", ctypes.c_int, [
	("__threadid",		ctypes.c_uint64),
	("__signo",		ctypes.c_int),
	("__value",		sigval),] )

setjmp = _rpythonic_function_(		"setjmp", ctypes.c_int, [
	("__env",		( __jmp_buf_tag * 1 )),] )

_setjmp = _rpythonic_function_(		"_setjmp", ctypes.c_int, [
	("__env",		( __jmp_buf_tag * 1 )),] )

longjmp = _rpythonic_function_(		"longjmp", ctypes.c_void_p, [
	("__env",		( __jmp_buf_tag * 1 )),
	("__val",		ctypes.c_int),] )

_longjmp = _rpythonic_function_(		"_longjmp", ctypes.c_void_p, [
	("__env",		( __jmp_buf_tag * 1 )),
	("__val",		ctypes.c_int),] )

siglongjmp = _rpythonic_function_(		"siglongjmp", ctypes.c_void_p, [
	("__env",		( __jmp_buf_tag * 1 )),
	("__val",		ctypes.c_int),] )

PyFPE_dummy = _rpythonic_function_(		"PyFPE_dummy", ctypes.c_double, [] )


_rpythonic_convert_structs_to_objects()
PyRun_SimpleString = PyRun_SimpleStringFlags
_rpythonic_setup_return_wrappers()
_rpythonic_make_nice_global_enums_()
_rpythonic_clean_up_missing_functions_()

################### Raymond Hettinger's Constant Folding ##################
# Decorator for BindingConstants at compile time
# A recipe by Raymond Hettinger, from Python Cookbook:
# http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/277940
# updated for Python3 and still compatible with Python2 - by Hart, May17th 2011

try: _BUILTINS_DICT_ = vars(__builtins__)
except: _BUILTINS_DICT_ = __builtins__
ISPYTHON2 = sys.version_info[0] == 2
_HETTINGER_FOLDS_ = 0

def _hettinger_make_constants(f, builtin_only=False, stoplist=[], verbose=0):
    from opcode import opmap, HAVE_ARGUMENT, EXTENDED_ARG
    global _HETTINGER_FOLDS_
    try:
        if ISPYTHON2: co = f.func_code; fname = f.func_name
        else: co = f.__code__; fname = f.__name__
    except AttributeError: return f        # Jython doesn't have a func_code attribute.
    if ISPYTHON2: newcode = map(ord, co.co_code)
    else: newcode = list( co.co_code )
    newconsts = list(co.co_consts)
    names = co.co_names
    codelen = len(newcode)
    if ISPYTHON2:
        if verbose >= 2: print( f.func_name )
        func_globals = f.func_globals
    else:
        if verbose >= 2: print( f.__name__ )
        func_globals = f.__globals__

    env = _BUILTINS_DICT_.copy()
    if builtin_only:
        stoplist = dict.fromkeys(stoplist)
        stoplist.update(func_globals)
    else:
        env.update(func_globals)

    # First pass converts global lookups into constants
    i = 0
    while i < codelen:
        opcode = newcode[i]
        if opcode in (EXTENDED_ARG, opmap['STORE_GLOBAL']):
            if verbose >= 1: print('skipping function', fname)
            return f    # for simplicity, only optimize common cases
        if opcode == opmap['LOAD_GLOBAL']:
            oparg = newcode[i+1] + (newcode[i+2] << 8)
            name = co.co_names[oparg]
            if name in env and name not in stoplist:
                value = env[name]
                for pos, v in enumerate(newconsts):
                    if v is value:
                        break
                else:
                    pos = len(newconsts)
                    newconsts.append(value)
                newcode[i] = opmap['LOAD_CONST']
                newcode[i+1] = pos & 0xFF
                newcode[i+2] = pos >> 8
                _HETTINGER_FOLDS_ += 1
                if verbose >= 2:
                    print( "    global constant fold:", name )
        i += 1
        if opcode >= HAVE_ARGUMENT:
            i += 2

    # Second pass folds tuples of constants and constant attribute lookups
    i = 0
    while i < codelen:

        newtuple = []
        while newcode[i] == opmap['LOAD_CONST']:
            oparg = newcode[i+1] + (newcode[i+2] << 8)
            newtuple.append(newconsts[oparg])
            i += 3

        opcode = newcode[i]
        if not newtuple:
            i += 1
            if opcode >= HAVE_ARGUMENT:
                i += 2
            continue

        if opcode == opmap['LOAD_ATTR']:
            obj = newtuple[-1]
            oparg = newcode[i+1] + (newcode[i+2] << 8)
            name = names[oparg]
            try:
                value = getattr(obj, name)
                if verbose >= 2: print( '    folding attribute', name )
            except AttributeError:
                continue
            deletions = 1

        elif opcode == opmap['BUILD_TUPLE']:
            oparg = newcode[i+1] + (newcode[i+2] << 8)
            if oparg != len(newtuple): continue
            deletions = len(newtuple)
            value = tuple(newtuple)

        else: continue

        reljump = deletions * 3
        newcode[i-reljump] = opmap['JUMP_FORWARD']
        newcode[i-reljump+1] = (reljump-3) & 0xFF
        newcode[i-reljump+2] = (reljump-3) >> 8

        n = len(newconsts)
        newconsts.append(value)
        newcode[i] = opmap['LOAD_CONST']
        newcode[i+1] = n & 0xFF
        newcode[i+2] = n >> 8
        i += 3
        _HETTINGER_FOLDS_ += 1
        if verbose >= 2:
            print( "    folded constant:",value )

    if ISPYTHON2:
        codestr = ''.join(map(chr, newcode))
        codeobj = type(co)(co.co_argcount, co.co_nlocals, co.co_stacksize,
                        co.co_flags, codestr, tuple(newconsts), co.co_names,
                        co.co_varnames, co.co_filename, co.co_name,
                        co.co_firstlineno, co.co_lnotab, co.co_freevars,
                        co.co_cellvars)
        return type(f)(codeobj, f.func_globals, f.func_name, f.func_defaults, f.func_closure)
    else:
        codestr = b''
        for s in newcode: codestr += s.to_bytes(1,'little')
        codeobj = type(co)(co.co_argcount, co.co_kwonlyargcount, co.co_nlocals, co.co_stacksize,
                        co.co_flags, codestr, tuple(newconsts), co.co_names,
                        co.co_varnames, co.co_filename, co.co_name,
                        co.co_firstlineno, co.co_lnotab, co.co_freevars,
                        co.co_cellvars)
        return type(f)(codeobj, f.__globals__, f.__name__, f.__defaults__, f.__closure__)


def hettinger_bind_recursive(mc, builtin_only=False, stoplist=[],  verbose=0):
    """Recursively apply constant binding to functions in a module or class.

    Use as the last line of the module (after everything is defined, but
    before test code).  In modules that need modifiable globals, set
    builtin_only to True.

    """
    import types
    try: d = vars(mc)
    except TypeError: return
    if ISPYTHON2: recursivetypes = (type, types.ClassType)
    else: recursivetypes = (type,)
    for k, v in d.items():
        if type(v) is types.FunctionType:
            newv = _hettinger_make_constants(v, builtin_only, stoplist,  verbose)
            setattr(mc, k, newv)
        elif type(v) in recursivetypes:
            hettinger_bind_recursive(v, builtin_only, stoplist, verbose)

def hettinger_transform( module=None ):
    global _HETTINGER_FOLDS_
    _HETTINGER_FOLDS_ = 0
    if not module: module = sys.modules[__name__]
    hettinger_bind_recursive( module, verbose=1 )
    print( 'HETTINGER: constants folded', _HETTINGER_FOLDS_ )
