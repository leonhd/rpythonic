## generated by RPythonic 0.4.4
## http://code.google.com/p/rpythonic/
import os, sys, ctypes, inspect
__os = os
__sys = sys
__inspect = inspect

IS32BIT = (ctypes.sizeof(ctypes.c_void_p)==4)
PYTHON_RESERVED_KEYWORDS = 'for while in as global with try except lambda return raise if else elif eval exec and not or break continue finally print yield del def class assert from is pass'.split()

## try to load precompiled c-libraries from this directory, if the library is not there try to load from the system.
_clibs_dir = os.path.dirname(os.path.abspath(__file__))

def _load_ctypes_lib( name ):
	if __os.name == 'posix':
		if __sys.platform=='linux2':
			if not name.endswith('.so'): name += '.so'
			if not name.startswith('lib'): name = 'lib' + name

			if IS32BIT: 	path = __os.path.join(_clibs_dir,'linux32')
			else: 		path = __os.path.join(_clibs_dir,'linux64')
			url = __os.path.join( path, name )
			if __os.path.isfile( url ): return ctypes.CDLL(url)
			elif __os.path.isfile( '/usr/local/lib/%s'%name ): return ctypes.CDLL('/usr/local/lib/%s'%name)
			elif __os.path.isfile( '/usr/local/lib64/%s'%name ) and not IS32BIT: return ctypes.CDLL('/usr/local/lib64/%s'%name)
			elif __os.path.isfile( '/usr/lib/%s'%name ): return ctypes.CDLL('/usr/lib/%s'%name)
			elif __os.path.isfile( './%s'%name ): return ctypes.CDLL('./%s'%name)
			else:	# fallback
				try: return ctypes.CDLL(name)
				except: return ctypes.CDLL('')

		elif sys.platform == 'darwin':
			name += '.dylib'
			if IS32BIT: 	path = os.path.join(_clibs_dir,'osx32')
			else: 		path = os.path.join(_clibs_dir,'osx64')
			url = os.path.join( path, name )
			if os.path.isfile( url ): return ctypes.CDLL(url)
			else: return ctypes.CDLL(name) #fallback

	elif os.name == 'nt':
		name += '.dll'
		if IS32BIT: 	path = os.path.join(_clibs_dir,'win32')
		else: 		path = os.path.join(_clibs_dir,'win64')
		url = os.path.join( path, name )
		if os.path.isfile( url ): return ctypes.CDLL(url)
		else: return ctypes.CDLL(name) #fallback

RPYTHONIC_WRAPPER_FUNCTIONS = {}
RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES = []
RPYTHONIC_AUTOPREFIX_IGNORE = []

## ctypes does not clearly expose these types ##
PyCFuncPtrType = type(ctypes.CFUNCTYPE(ctypes.c_void_p))
PyCArrayType = type( ctypes.c_int * 2 )
PyCPointerType = type( ctypes.POINTER(ctypes.c_int) )
PyCStructType = type( ctypes.Structure )
CArgObject = type( ctypes.byref(ctypes.c_int()) )

class _rpythonic_meta_(object):
	'''
	Reserved Attributes:
		POINTER
		CSTRUCT
		CAST
	'''
	_rpythonic_ = True		# workaround for now, must have a way to know if object is a meta from another module, isinstance(o,_rpythonic_meta_) will fail in those cases. another workaround could be check sys.modules for other rpythonic modules and fetch _rpythonic_meta_ from there.
	def __init__(self, *args, **kw ):							# cheap trick, abuse **kw, and look for "pointer", "cast"
		if kw and 'pointer' not in kw: raise SyntaxError	# sorry, you can not init with keywords
		elif kw and 'pointer' in kw:
			if 'cast' in kw and kw['cast']:
				self.POINTER = ctypes.cast( kw['pointer'], ctypes.POINTER(self.CSTRUCT) )
			else: self.POINTER = kw['pointer']
		else: self.POINTER = ctypes.pointer( self.CSTRUCT(*args) )
		self.POINTER.pyobject = self	# .pyobject is local to this pointer "object"

	def __getattr__(self,name):
		if hasattr( self.POINTER.contents, name ):
			return getattr( self.POINTER.contents, name )

		else:	# when rpythonic failed to generate good bindings - these lookups should be cached
			for parent in self._rpythonic_parent_classes_:
				if hasattr( parent, name ):
					method = getattr( parent, name )	# should check if it really is an unbound method
					func = parent._rpythonic_unbound_lookup_[ method ]
					n = func.name
					if len(func.argnames) > 1:
						argnames = func.argnames[ 1 : ]
						a = ',' + '=None,'.join( argnames ) + '=None'
						b = ','.join( argnames )
					else: a = b = ''
					lamb = eval( 'lambda self %s: %s( self.POINTER, %s )' %(a,n,b) )
					setattr( self.__class__, name, lamb )
					#return lamb	# this would return the unbound lambda, must call getattr again
					return getattr( self, name )

			## last resort, load from global name space ##
			G = globals()
			if name in G: return lambda *args: G[name](self.POINTER, *args)
			else:
				for prefix in self._autoprefix_:
					n = prefix + name
					if n in G: return lambda *args: G[n](self.POINTER, *args)
				print( 'possible auto-prefixes available', self._autoprefix_ )
				raise AttributeError

	def __call__(self, type=False):
		print('calling object is DEPRECATED - use ob.POINTER or ob.CSTRUCT')
		if type: return self.CSTRUCT
		else: return self.POINTER


def _rpythonic_generate_subclass_( name, struct, functions ):
	head = 'class %s( _rpythonic_meta_ ):' %name
	body = [ 
		'_rpythonic_parent_classes_ = []' ,
		'_rpythonic_unbound_lookup_ = {}' 
	]

	names = [ func.name for func in functions ]

	possibles = {}
	rank = []		# rank by longest name
	if len(names) > 3000: print('too many functions to use this hack')
	else:
		for n1 in names:
			prefix = ''
			for i,char in enumerate(n1):
				prefix += char
				if prefix not in possibles:
					possibles[ prefix ] = 0
					for n2 in names:
						if n2.startswith( prefix ):
							possibles[ prefix ] += 1

					if not rank or len(prefix) > len(rank[-1]) and possibles[prefix] > len(names)/4:
						rank.append( prefix )

	top = []
	while rank:
		best = rank.pop()
		if possibles[best] > len(functions)/2 and best not in names:
			if best.endswith('_set_') or best.endswith('_get_'): best = best[ : -4 ]
			elif best.endswith('Set') or best.endswith('Get'): best = best[ : -3 ]

			rem = []
			for other in rank:
				if best.startswith(other): rem.append( other )
			for r in rem: rank.remove( r )

			if best not in top: top.append( best )

		if len(top) > 3: break

	for n in names:		# find shortest prefixes #
		prefix = ''
		for i,char in enumerate(n):		# cammelCase
			if i==0: prefix += char; continue
			if char.isupper() and len(prefix) >= 2: break
			prefix += char
		if prefix and prefix != n and len(prefix) >= 2:
			hits = 0
			for other in names:
				if other.startswith( prefix ): hits += 1
			if hits >= 2 and prefix not in top:
				top.append( prefix )
				if len(top) >= 6: break

	## setup full names
	for func in functions:
		n = func.name
		if len(func.argnames) > 1:
			argnames = func.argnames[ 1 : ]
			a = ',' + '=None,'.join( argnames ) + '=None'
			b = ','.join( argnames )
		else: a = b = ''

		fhead = 'def %s( self %s ):' %(n,a)
		fbody = ['return %s(self.POINTER, %s)' %(func.name,b)]
		g = fhead + '\n\t\t' + '\n\t\t'.join( fbody )
		body.append( g )
		#body.append( '%s._rpythonic_function_ = %s' %(func.name, func.name) )

	## setup short names ##
	for n in names:
		for prefix in top:
			if n.startswith(prefix) and n[len(prefix):] not in names:
				alt = n[ len(prefix) : ]
				if alt and alt != n and alt not in PYTHON_RESERVED_KEYWORDS and not alt.isdigit() and not alt[0].isdigit():
					body.append( '%s = %s' %(alt,n) )
					names.append( alt )

	gen = head + '\n\t' + '\n\t'.join( body )
	try: exec( gen )
	except:
		print( gen )
		raise SyntaxError

	klass = locals()[name]
	klass.CSTRUCT = struct	# ctypes struct class

	klass._autoprefix_ = top
	for func in functions:
		unbound = getattr( klass, func.name )
		klass._rpythonic_unbound_lookup_[ unbound ] = func
		# klass.longname is klass.shortname = False
		# klass.longname == klass.shortname = True
	return klass

def _rpythonic_convert_structs_to_objects():
	G = globals()
	for klass in _OOAPI_:
		altname = name = klass.__name__
		prefix = ''
		for i,char in enumerate(name):
			if i==0: prefix += char; continue
			if char.isupper(): break
			prefix += char
		if prefix and prefix != name:
			hits = 0
			for other in _OOAPI_:
				if other is not klass:
					if other.__name__.startswith( prefix ): hits += 1
			if hits >= 2:
				altname = name[ len(prefix) : ]

		funcs = _OOAPI_[ klass ]
		newklass = _rpythonic_generate_subclass_( altname, klass, funcs )
		klass._rpythonic_wrapper_class_ = newklass
		G[ name ] = newklass	# replace struct with wrapper
		if altname not in G: G[ altname ] = newklass	# safely define with nicer name
		elif altname != name: # odd cases, maybe a function that returns the object, almost never happens.
			print('WARN - not replacing something with struct wrapper:', G[altname] )


def _rpythonic_setup_return_wrappers():
	R = _rpythonic_function_
	for klass in _OOAPI_:
		if klass in _OOAPI_RETURNS_OBJECT_:
			for f in _OOAPI_RETURNS_OBJECT_[klass]:
				f.object_oriented = True
				if not f.return_wrapper:	# just in case the ctypes footer defines it
					f.return_wrapper = klass._rpythonic_wrapper_class_

def _rpythonic_function_( name, result=ctypes.c_void_p, args=[]):
	mname = '_metafunc_%s' %name
	exec( 'class %s( _rpythonic_metafunc_ ): pass' %mname )
	k = locals()[mname]
	return k( name, result, args )

_OOAPI_ = {}
_OOAPI_RETURNS_OBJECT_ = {}

class _rpythonic_metafunc_(object):
	def __init__(self, name, result=ctypes.c_void_p, args=[]):
		self.name = name
		self.result = result
		self.argtypes = []		# can dynamically change CFUNCTYPE trick
		self.argnames = []
		self.argtypestypes = []
		for i,arg in enumerate(args):
			n,t = arg
			if n in PYTHON_RESERVED_KEYWORDS: n = 'C_'+n
			if n in self.argnames: n = '%s%s' %(n,i)
			self.argnames.append( n )
			self.argtypes.append( t )
			self.argtypestypes.append( type(t) )		# precomputed for speed

		self.argnames = tuple( self.argnames )				# should never change
		self.numargs = len( self.argtypes )
		self.callbacks = [None] * self.numargs
		self.return_wrapper = None
		self.object_oriented = False
		self.function = None
		try:
			func = self.function = getattr(CTYPES_DLL, self.name )
			RPYTHONIC_WRAPPER_FUNCTIONS[ name ] = self
		except:
			RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES.append( name )
		if self.function: self.reset()

	def change_argument_type( self, name, t ):
		idx = self.argnames.index( name )
		self.argtypes[ idx ] = t
		self.argtypestypes[ idx ] = type(t)
		self.function.argtypes = self.argtypes

	def reset(self):
		if self.argnames:
			a = ',' + '=None,'.join( self.argnames ) + '=None'
			b = ','.join( self.argnames )
		else: a = b = ''

		callmeth = eval( 'lambda self %s: self._call_( %s )' %(a,b) )
		setattr( self.__class__, '__call__', callmeth )

		self.function.restype = self.result
		self.function.argtypes = self.argtypes

		if type( self.result ) is PyCPointerType and type(self.result._type_) is PyCStructType:
			klass = self.result._type_
			if klass not in _OOAPI_RETURNS_OBJECT_: _OOAPI_RETURNS_OBJECT_[klass] = []
			_OOAPI_RETURNS_OBJECT_[klass].append( self )

		self.defaults = []
		for i in range( self.numargs ):
			T = self.argtypes[ i ]
			if type(T) is PyCFuncPtrType:
				p = T()	# func pointers can not be None
				self.defaults.append( p )
				self.callbacks[ i ] = p					# save reference
			elif T in (ctypes.c_int, ctypes.c_uint, ctypes.c_long, ctypes.c_ulong):
				self.defaults.append( 0 )
			elif T in (ctypes.c_float, ctypes.c_double):
				self.defaults.append( .0 )
			else: self.defaults.append( None )	# None is allowed for all other types

			## generate OO API ##
			if i == 0 and type(T) is PyCPointerType and type(T._type_) is PyCStructType:
				klass = T._type_
				if klass not in _OOAPI_: _OOAPI_[ klass ] = []
				_OOAPI_[ klass ].append( self )

	def _call_( self, *args ):			# allow flexible calling types
		cargs = list( self.defaults )
		for i,arg in enumerate(args):
			if isinstance( arg, _rpythonic_meta_ ): arg = arg.POINTER
			elif hasattr( arg, '_rpythonic_' ): arg = arg.POINTER		# workaround - instance from another module

			t = type(arg)
			k = self.argtypes[ i ]
			kt = self.argtypestypes[ i ]
			if arg is None and cargs[i] is not None:	# use user defaults, very rare cases
				continue

			elif t is bool and k is ctypes.c_int:
				if arg: cargs[i] = 1	#ctypes.c_int(1)
				else: cargs[i] = 0	#ctypes.c_int(0)

			elif t in (list,tuple):				# convert lists and tuples into array
				if kt is PyCArrayType:
					cargs[ i ] = k(*arg)
				elif kt is PyCStructType:
					if k._array_wrapper_: cargs[ i ] = k(arg)	# allow easy array init
					else: cargs[ i ] = k(*arg)							# allow multiple args
				elif kt is PyCPointerType:
					cargs[ i ] = _convert_nested_list_to_pointer( k, arg )
				else: assert 0

			elif isinstance( arg, ctypes._Pointer ) and t is not k and kt is PyCPointerType:
				cargs[ i ] = ctypes.cast( arg, k )		# generic's that need to be cast

			elif kt is PyCStructType and isinstance( arg, ctypes._Pointer ):
				cargs[ i ] = arg.contents	# fixed may25

			elif kt is PyCPointerType and not isinstance( arg, (ctypes._Pointer,CArgObject) ):
				if t in (int,float,bool): ptr = k( k._type_(arg) )
				elif t is str:
					arg = arg.encode('utf-8')
					#ptr = k( k._type_() )								# not k() otherwise null pointer error
					#for j, char in enumerate(arg): ptr[ j ] = char		# not correct - missing null byte?
					ptr = ctypes.create_string_buffer(arg)				# correct and pypy compatible
				elif t in (PyCStructType, PyCArrayType):
					ptr = ctypes.cast( ctypes.pointer( arg ), k )
				else:
					ptr = arg	# TODO print warning?
				cargs[ i ] = ptr

			elif kt is PyCFuncPtrType:
				if t.__name__ == 'CFunctionType': cargs[ i ] = arg		# assume outside holds pointer
				else:													# this is not safe #
					cargs[ i ] = self.callbacks[ i ] = k( arg )				# assume arg is a callable
			else:
				cargs[ i ] = arg		# directly pass

		## if you define your own return_wrapper, it must take keyword "pointer"
		if self.return_wrapper: return self.return_wrapper( pointer=self.function( *cargs ) )
		else: return self.function( *cargs )



def _convert_nested_list_to_pointer( k, arg ):
	depth = 0; s = k
	while True:
		if type(s) is PyCPointerType:
			s = getattr( s, '_type_' )
			depth += 1
		else: break
	assert depth and depth <= 2
	if depth == 1:
		T = k._type_
		ptr = k( k._type_() )
		for i in range( len(arg) ):
			ptr[ i ] = T( *arg[i] )
	elif depth == 2:
		T = k._type_._type_
		_ptr = k._type_( k._type_._type_() )
		for i in range(len( arg )):
			for j in range( len(arg[i]) ):
				_ptr[ j ] = T( *arg[ i ][ j ] )
		ptr = k( _ptr )
	return ptr


def __freeze_rpythonic_struct( cls, fields ):
	if cls not in _OOAPI_: _OOAPI_[ cls ] = []	# wrap all structs
	try: setattr( cls, '_fields_', fields )
	except:
		print( 'WARN - bad order struct freeze', cls )
		#cls._fields_ = []

class _rpythonic_struct_( ctypes.Structure ):
	_array_wrapper_ = False
	_fields_ = []
	_methods_ = {}
	#def __call__(self): return self
	def __init__(self, *args, **kw ):
		cargs = []
		argtypes = []
		for a in self._fields_: argtypes.append( a[1] )
		if len(args) > len(argtypes): args = [args]	# allow both calling conventions
		for i,arg in enumerate( args ):
			if isinstance( arg, _rpythonic_meta_ ): arg = arg.POINTER

			t = type(arg)
			k = argtypes[ i ]
			if t in (list,tuple):
				if k.__class__.__name__	== 'PyCArrayType':
					cargs.append( k(*arg) )
				elif k.__class__.__name__ == 'PyCStructType':
					if k._array_wrapper_: cargs.append( k(arg) )	# allow easy array init
					else: cargs.append( k(*arg) )							# allow multiple args
			elif isinstance( arg, ctypes._Pointer ) and t is not k:
				cargs[ i ] = ctypes.cast( arg, k )	# generic's that need to be cast
			elif k.__class__.__name__ == 'PyCArrayType' and t in (float,int,bool):
				cargs.append( k(arg) )		# support init array from single value
			else:
				cargs.append( arg )		# directly pass

		ctypes.Structure.__init__(self, *cargs, **kw)


def _rpythonic_make_nice_global_enums_():
	G = globals()
	for name in RPYTHONIC_GLOBAL_ENUMS:
		if '_' in name and name.index('_') <= 4:
			altname = name[ name.index('_') + 1 : ]
			if altname not in G:
				G[altname] = RPYTHONIC_GLOBAL_ENUMS[ name ]

def _rpythonic_clean_up_missing_functions_():
	G = globals()
	for f in RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES:
		G.pop( f )
	print( "C functions loaded: %s" %len(RPYTHONIC_WRAPPER_FUNCTIONS) )
	print( "C functions failed: %s" %len(RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES) )



###### NEW API #########
CTYPES_DLL = None

class _VOID_POINTER_CONTAINER_(object):
	def __init__(self, ptr, name=None):
		self._pointer_ = ptr
		self.name = name
NULL = _VOID_POINTER_CONTAINER_(None,'<null pointer>')


class meta:	# NEW API - allow run time switch from ctypes to rffi
	'''
	Methods:
		RPython will not allow object wrapper around a method (__call__ not allowed)
		keep C function names in list "__cfunctions__"
		rpythonic.enable_rffi( classA, classB )	
		can take advantage of methods in object-method-wrapper,
		generate rffi wrapper and set method on classA, etc.
		replaces object-method-wrapper with rffi-method

	Properties:
		CPython: obj.x=1
		RPython: obj.set_x(1)	
	'''
	METAS = []
	def __init__(self, constructors=[], methods={}, properties={}):
		global CTYPES_DLL
		if not CTYPES_DLL:
			CTYPES_DLL = _load_ctypes_lib( _clib_name_ )

		self.constructors = constructors
		self.methods = methods
		self.properties = properties
		self.METAS.append( self )



	def __call__(self, cls ):
		print('@meta', cls )

		if not self.constructors:
			lamb = lambda s, _explicit_pointer_=None: setattr(s,'_pointer_',getattr(_explicit_pointer_,'_pointer_')) if hasattr(_explicit_pointer_,'_pointer_') else setattr(s,'_pointer_',_explicit_pointer_)
			lamb._debug = '(no constructor)'
			setattr( cls, '__init__', lamb )
		else:
			con = self._find_best_function( self.constructors )
			cfunc = self._build_cfunc( con )
			setattr( cls, '_%s'%con['name'], cfunc )
			g = self._gen_init( con )
			setattr( cls, '__init__', g )
		
		## set methods ##
		for name in self.methods:
			meth = self.methods[ name ]
			cfuncs = []
			for m in meth['functions']:
				cfunc = self._build_cfunc( m, method=True, static=meth['static'] )
				self._setup_return( cfunc, meth )
				setattr( cls, '_%s'%m['name'], cfunc )
				cfuncs.append( cfunc )

			f = self._find_best_function( meth['functions'] )
			g = self._gen_method( meth, f )
			g._cfuncs = cfuncs
			if meth['static']: g = classmethod( g )
			setattr( cls, name, g )

		for name in self.properties:
			print( 'property:', name )
			p = []
			for f in self.properties[name]:
				cfunc = self._build_cfunc( f )
				setattr( cls, '_%s'%f['name'], cfunc )
				g = self._gen_method( f, f )
				p.append( g )

			setattr( cls, name, property(*p) )

		return cls


	@staticmethod
	def _build_cfunc( info, method=False, static=False ):
		cfunc = getattr(CTYPES_DLL, info['name'])
		if method and not static: argtypes = [ ctypes.c_void_p ]
		else: argtypes = []
		for p in info['parameters']: argtypes.append( eval(p['ctypes_type']) )
		cfunc.argtypes = argtypes
		return cfunc

	@staticmethod
	def _setup_return( cfunc, info ):
		if not info['returns_fundamental']:
			cfunc.restype = ctypes.c_void_p
		elif info['returns_fundamental']:
			cfunc.restype = eval( info['returns_ctypes'] )
		else:
			cfunc.restype = ctypes.c_void_p

	@staticmethod
	def _gen_prepare_args( m ):
		a = []; b = []
		for i,p in enumerate(m['parameters']):
			if 'name' in p: n = p['name']
			else: n = '_unnamed_%s' %i
			if '<' in n: n = '_TODOfixme_%s' %i
			if n in PYTHON_RESERVED_KEYWORDS: n += str(i)
			if p['fundamental']:
				b.append( n )
				s = p['raw_type'].split()
				if 'default' in p:
					d = p['default']
					if p['raw_type'] in ('float', 'double'):
						if d.endswith('f'): d = d[:-1]
						d = d.replace(' ', '.')
						if 'e' in d: d = 0.0
						try: d = float(d)
						except: d = 0.0
					elif ('int' in s or 'size_t' in s) and not d.isdigit(): d = 0
					elif 'char' in s and '"' not in d: d = '""'
					elif d.lower() == 'false': d = False
					elif d.lower() == 'true': d = True
				elif 'char' in s: d = '""'
				elif 'float' in s or 'double' in s: d = 0.0
				elif 'size_t' in s or 'int' in s or 'long' in s or 'short' in s: d = 0
				elif p['raw_type'] == 'bool': d = False
				elif p['raw_type'] in ('void', '(template)'): d = 'NULL'
				else: print( p )
				a.append( n+'=%s' %d )

			else:
				b.append( '%s._pointer_'%n )
				a.append( n+'=NULL' )
		return a, b

	@staticmethod
	def _gen_init( m ):
		a, b = meta._gen_prepare_args( m )
		if a: e = 'lambda _py_self_, %s, _explicit_pointer_=None: ' %(','.join(a))
		else: e = 'lambda _py_self_, _explicit_pointer_=None: '
		e += 'setattr(_py_self_, "_pointer_", _py_self_._%s(%s))' %( m['name'], ','.join(b) )
		e += ' if not _explicit_pointer_ else '
		e += 'setattr(_py_self_, "_pointer_", _explicit_pointer_)'
		print( e )
		lamb = eval( e ); lamb._debug = e; lamb._introspect = m
		return lamb

	@staticmethod
	def _find_best_function( funcs ):
		best = funcs[0]
		score = -1
		if len(funcs) > 1:
			for f in funcs:
				hits = 0
				for p in f['parameters']:
					if p['fundamental']: hits += 1
				if hits and hits == len( f['parameters'] ):
					if hits > score:
						score = hits
						best = f
		return best

	@staticmethod
	def _gen_method( m, f ):
		a, b = meta._gen_prepare_args( f )
		if a: e = 'lambda _py_self_, %s: ' %(','.join(a))
		else: e = 'lambda _py_self_: '

		if 'static' in m and m['static']:	# static in c++ is like a classmethod
			c = '_py_self_._%s( %s )' %( f['name'], ','.join(b) )
		else:
			c = '_py_self_._%s( _py_self_._pointer_, %s )' %( f['name'], ','.join(b) )

		if not m['returns_fundamental']:
			if 'returns_unknown' in m or '<' in m['returns']: c = '_VOID_POINTER_CONTAINER_( %s, name="%s" )' %(c,m['returns'])
			else:
				something = m['returns'].replace('::', '.')
				c = '%s( _explicit_pointer_=%s )' %(something, c)

		e += c; lamb = eval( e )
		lamb._debug = e; lamb._introspect = f
		return lamb


	META_FUNCTIONS = []
	@classmethod
	def function( self, info ):
		print('@meta.function', info['name'] )
		global CTYPES_DLL
		if not CTYPES_DLL:
			CTYPES_DLL = _load_ctypes_lib( _clib_name_ )

		cfunc = self._build_cfunc( info, method=False, static=True )
		setattr( meta, '_%s'%info['name'], cfunc )
		self._setup_return( cfunc, info )
		a, b = meta._gen_prepare_args( info )
		e = 'lambda %s: ' %(','.join(a))
		c = 'meta._%s( %s )' %( info['name'], ','.join(b) )

		if not info['returns_fundamental']:
			if 'returns_unknown' in info or '<' in info['returns']:
				c = '_VOID_POINTER_CONTAINER_( %s, name="%s" )' %(c,info['returns'])
			else:
				something = info['returns'].replace('::', '.')
				c = '%s( _explicit_pointer_=%s )' %(something, c)
		e += c
		lamb = eval( e )
		lamb._debug = e
		lamb._introspect = info
		return lamb



def _rpythonic_strip_prefixes_( prefixes ):
	G = globals()
	names = list(G.keys())	# ensure list in py3
	for name in names:
		for prefix in prefixes:
			if name.startswith( prefix ):
				newname = name[ len(prefix) : ]
				if newname and newname not in G:
					G[ newname ] = G[ name ]






_clib_name_ = 'libopenjpeg'
print('loading lib', _clib_name_)
print( os.path.abspath( os.path.curdir ) )
CTYPES_DLL = _load_ctypes_lib( _clib_name_ )
assert CTYPES_DLL
print( CTYPES_DLL._name )

## macro globals ##
OPENJPEG_VERSION = "1.3.0"
true = 1
false = 0
OPJ_PATH_LEN = 4096
J2K_MAXRLVLS = 33
J2K_MAXBANDS = 97
JPWL_MAX_NO_TILESPECS = 16
JPWL_MAX_NO_PACKSPECS = 16
JPWL_MAX_NO_MARKERS = 512
JPWL_PRIVATEINDEX_NAME = "jpwl_index_privatefilename"
JPWL_EXPECTED_COMPONENTS = 3
JPWL_MAXIMUM_TILES = 8192
JPWL_MAXIMUM_HAMMING = 2
JPWL_MAXIMUM_EPB_ROOM = 65450
OPJ_STREAM_READ = 1
OPJ_STREAM_WRITE = 2
## enums ##
COLOR_SPACE = { 
	"CLRSPC_UNKNOWN" : -1, 
	"CLRSPC_SRGB" : 1, 
	"CLRSPC_GRAY" : 2, 
	"CLRSPC_SYCC" : 3, 
}

CODEC_FORMAT = { 
	"CODEC_UNKNOWN" : -1, 
	"CODEC_J2K" : 0, 
	"CODEC_JPT" : 1, 
	"CODEC_JP2" : 2, 
}

LIMIT_DECODING = { 
	"NO_LIMITATION" : 0, 
	"LIMIT_TO_MAIN_HEADER" : 1, 
	"DECODE_ALL_BUT_PACKETS" : 2, 
}

PROG_ORDER = { 
	"PROG_UNKNOWN" : -1, 
	"LRCP" : 0, 
	"RLCP" : 1, 
	"RPCL" : 2, 
	"PCRL" : 3, 
	"CPRL" : 4, 
}

CINEMA_MODE = { 
	"OFF" : 0, 
	"CINEMA2K_24" : 1, 
	"CINEMA2K_48" : 2, 
	"CINEMA4K_24" : 3, 
}

RSIZ_CAPABILITIES = { 
	"STD_RSIZ" : 0, 
	"CINEMA2K" : 3, 
	"CINEMA4K" : 4, 
}

## simple enums ##
RPYTHONIC_GLOBAL_ENUMS = { 

}
class opj_event_mgr(_rpythonic_struct_): pass
class opj_poc(_rpythonic_struct_): _array_wrapper_ = True
class opj_cparameters(_rpythonic_struct_): _array_wrapper_ = True
class opj_dparameters(_rpythonic_struct_): _array_wrapper_ = True
class opj_common_struct(_rpythonic_struct_): pass
class opj_cinfo(_rpythonic_struct_): pass
class opj_dinfo(_rpythonic_struct_): pass
class opj_cio(_rpythonic_struct_): pass
class opj_image_comp(_rpythonic_struct_): pass
class opj_image(_rpythonic_struct_): pass
class opj_image_comptparm(_rpythonic_struct_): pass
class opj_packet_info(_rpythonic_struct_): pass
class opj_tp_info(_rpythonic_struct_): pass
class opj_tile_info(_rpythonic_struct_): _array_wrapper_ = True
class opj_marker_info_t(_rpythonic_struct_): pass
class opj_codestream_info(_rpythonic_struct_): pass
## union and structures ##
__freeze_rpythonic_struct( opj_event_mgr, [
	( "error_handler", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),) ),
	( "warning_handler", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),) ),
	( "info_handler", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),) ),
])

__freeze_rpythonic_struct( opj_poc, [
	( "resno0", ctypes.c_int ),
	( "compno0", ctypes.c_int ),
	( "layno1", ctypes.c_int ),
	( "resno1", ctypes.c_int ),
	( "compno1", ctypes.c_int ),
	( "layno0", ctypes.c_int ),
	( "precno0", ctypes.c_int ),
	( "precno1", ctypes.c_int ),
	( "prg1", ctypes.c_int ),
	( "prg", ctypes.c_int ),
	( "progorder", ( ctypes.c_char * 5 ) ),
	( "tile", ctypes.c_int ),
	( "tx0", ctypes.c_int ),
	( "tx1", ctypes.c_int ),
	( "ty0", ctypes.c_int ),
	( "ty1", ctypes.c_int ),
	( "layS", ctypes.c_int ),
	( "resS", ctypes.c_int ),
	( "compS", ctypes.c_int ),
	( "prcS", ctypes.c_int ),
	( "layE", ctypes.c_int ),
	( "resE", ctypes.c_int ),
	( "compE", ctypes.c_int ),
	( "prcE", ctypes.c_int ),
	( "txS", ctypes.c_int ),
	( "txE", ctypes.c_int ),
	( "tyS", ctypes.c_int ),
	( "tyE", ctypes.c_int ),
	( "dx", ctypes.c_int ),
	( "dy", ctypes.c_int ),
	( "lay_t", ctypes.c_int ),
	( "res_t", ctypes.c_int ),
	( "comp_t", ctypes.c_int ),
	( "prc_t", ctypes.c_int ),
	( "tx0_t", ctypes.c_int ),
	( "ty0_t", ctypes.c_int ),
])

__freeze_rpythonic_struct( opj_cparameters, [
	( "tile_size_on", ctypes.c_int ),
	( "cp_tx0", ctypes.c_int ),
	( "cp_ty0", ctypes.c_int ),
	( "cp_tdx", ctypes.c_int ),
	( "cp_tdy", ctypes.c_int ),
	( "cp_disto_alloc", ctypes.c_int ),
	( "cp_fixed_alloc", ctypes.c_int ),
	( "cp_fixed_quality", ctypes.c_int ),
	( "cp_matrice", ctypes.POINTER(ctypes.c_int) ),
	( "cp_comment", ctypes.POINTER(ctypes.c_char) ),
	( "csty", ctypes.c_int ),
	( "prog_order", ctypes.c_int ),
	( "POC", ( opj_poc * 32 ) ),
	( "numpocs", ctypes.c_int ),
	( "tcp_numlayers", ctypes.c_int ),
	( "tcp_rates", ( ctypes.c_float * 100 ) ),
	( "tcp_distoratio", ( ctypes.c_float * 100 ) ),
	( "numresolution", ctypes.c_int ),
	( "cblockw_init", ctypes.c_int ),
	( "cblockh_init", ctypes.c_int ),
	( "mode", ctypes.c_int ),
	( "irreversible", ctypes.c_int ),
	( "roi_compno", ctypes.c_int ),
	( "roi_shift", ctypes.c_int ),
	( "res_spec", ctypes.c_int ),
	( "prcw_init", ( ctypes.c_int * 33 ) ),
	( "prch_init", ( ctypes.c_int * 33 ) ),
	( "infile", ( ctypes.c_char * 4096 ) ),
	( "outfile", ( ctypes.c_char * 4096 ) ),
	( "index_on", ctypes.c_int ),
	( "index", ( ctypes.c_char * 4096 ) ),
	( "image_offset_x0", ctypes.c_int ),
	( "image_offset_y0", ctypes.c_int ),
	( "subsampling_dx", ctypes.c_int ),
	( "subsampling_dy", ctypes.c_int ),
	( "decod_format", ctypes.c_int ),
	( "cod_format", ctypes.c_int ),
	( "jpwl_epc_on", ctypes.c_int ),
	( "jpwl_hprot_MH", ctypes.c_int ),
	( "jpwl_hprot_TPH_tileno", ( ctypes.c_int * 16 ) ),
	( "jpwl_hprot_TPH", ( ctypes.c_int * 16 ) ),
	( "jpwl_pprot_tileno", ( ctypes.c_int * 16 ) ),
	( "jpwl_pprot_packno", ( ctypes.c_int * 16 ) ),
	( "jpwl_pprot", ( ctypes.c_int * 16 ) ),
	( "jpwl_sens_size", ctypes.c_int ),
	( "jpwl_sens_addr", ctypes.c_int ),
	( "jpwl_sens_range", ctypes.c_int ),
	( "jpwl_sens_MH", ctypes.c_int ),
	( "jpwl_sens_TPH_tileno", ( ctypes.c_int * 16 ) ),
	( "jpwl_sens_TPH", ( ctypes.c_int * 16 ) ),
	( "cp_cinema", ctypes.c_int ),
	( "max_comp_size", ctypes.c_int ),
	( "cp_rsiz", ctypes.c_int ),
	( "tp_on", ctypes.c_char ),
	( "tp_flag", ctypes.c_char ),
	( "tcp_mct", ctypes.c_char ),
])

__freeze_rpythonic_struct( opj_dparameters, [
	( "cp_reduce", ctypes.c_int ),
	( "cp_layer", ctypes.c_int ),
	( "infile", ( ctypes.c_char * 4096 ) ),
	( "outfile", ( ctypes.c_char * 4096 ) ),
	( "decod_format", ctypes.c_int ),
	( "cod_format", ctypes.c_int ),
	( "jpwl_correct", ctypes.c_int ),
	( "jpwl_exp_comps", ctypes.c_int ),
	( "jpwl_max_tiles", ctypes.c_int ),
	( "cp_limit_decoding", ctypes.c_int ),
])

__freeze_rpythonic_struct( opj_common_struct, [
	( "event_mgr", ctypes.POINTER(opj_event_mgr) ),
	( "client_data", ctypes.POINTER(ctypes.c_void_p) ),
	( "is_decompressor", ctypes.c_int ),
	( "codec_format", ctypes.c_int ),
	( "j2k_handle", ctypes.POINTER(ctypes.c_void_p) ),
	( "jp2_handle", ctypes.POINTER(ctypes.c_void_p) ),
	( "mj2_handle", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( opj_cinfo, [
	( "event_mgr", ctypes.POINTER(opj_event_mgr) ),
	( "client_data", ctypes.POINTER(ctypes.c_void_p) ),
	( "is_decompressor", ctypes.c_int ),
	( "codec_format", ctypes.c_int ),
	( "j2k_handle", ctypes.POINTER(ctypes.c_void_p) ),
	( "jp2_handle", ctypes.POINTER(ctypes.c_void_p) ),
	( "mj2_handle", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( opj_dinfo, [
	( "event_mgr", ctypes.POINTER(opj_event_mgr) ),
	( "client_data", ctypes.POINTER(ctypes.c_void_p) ),
	( "is_decompressor", ctypes.c_int ),
	( "codec_format", ctypes.c_int ),
	( "j2k_handle", ctypes.POINTER(ctypes.c_void_p) ),
	( "jp2_handle", ctypes.POINTER(ctypes.c_void_p) ),
	( "mj2_handle", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( opj_cio, [
	( "cinfo", ctypes.POINTER(opj_common_struct) ),
	( "openmode", ctypes.c_int ),
	( "buffer", ctypes.POINTER(ctypes.c_ubyte) ),
	( "length", ctypes.c_int ),
	( "start", ctypes.POINTER(ctypes.c_ubyte) ),
	( "end", ctypes.POINTER(ctypes.c_ubyte) ),
	( "bp", ctypes.POINTER(ctypes.c_ubyte) ),
])

__freeze_rpythonic_struct( opj_image_comp, [
	( "dx", ctypes.c_int ),
	( "dy", ctypes.c_int ),
	( "w", ctypes.c_int ),
	( "h", ctypes.c_int ),
	( "x0", ctypes.c_int ),
	( "y0", ctypes.c_int ),
	( "prec", ctypes.c_int ),
	( "bpp", ctypes.c_int ),
	( "sgnd", ctypes.c_int ),
	( "resno_decoded", ctypes.c_int ),
	( "factor", ctypes.c_int ),
	( "data", ctypes.POINTER(ctypes.c_int) ),
])

__freeze_rpythonic_struct( opj_image, [
	( "x0", ctypes.c_int ),
	( "y0", ctypes.c_int ),
	( "x1", ctypes.c_int ),
	( "y1", ctypes.c_int ),
	( "numcomps", ctypes.c_int ),
	( "color_space", ctypes.c_int ),
	( "comps", ctypes.POINTER(opj_image_comp) ),
])

__freeze_rpythonic_struct( opj_image_comptparm, [
	( "dx", ctypes.c_int ),
	( "dy", ctypes.c_int ),
	( "w", ctypes.c_int ),
	( "h", ctypes.c_int ),
	( "x0", ctypes.c_int ),
	( "y0", ctypes.c_int ),
	( "prec", ctypes.c_int ),
	( "bpp", ctypes.c_int ),
	( "sgnd", ctypes.c_int ),
])

__freeze_rpythonic_struct( opj_packet_info, [
	( "start_pos", ctypes.c_int ),
	( "end_ph_pos", ctypes.c_int ),
	( "end_pos", ctypes.c_int ),
	( "disto", ctypes.c_double ),
])

__freeze_rpythonic_struct( opj_tp_info, [
	( "tp_start_pos", ctypes.c_int ),
	( "tp_end_header", ctypes.c_int ),
	( "tp_end_pos", ctypes.c_int ),
	( "tp_start_pack", ctypes.c_int ),
	( "tp_numpacks", ctypes.c_int ),
])

__freeze_rpythonic_struct( opj_tile_info, [
	( "thresh", ctypes.POINTER(ctypes.c_double) ),
	( "tileno", ctypes.c_int ),
	( "start_pos", ctypes.c_int ),
	( "end_header", ctypes.c_int ),
	( "end_pos", ctypes.c_int ),
	( "pw", ( ctypes.c_int * 33 ) ),
	( "ph", ( ctypes.c_int * 33 ) ),
	( "pdx", ( ctypes.c_int * 33 ) ),
	( "pdy", ( ctypes.c_int * 33 ) ),
	( "packet", ctypes.POINTER(opj_packet_info) ),
	( "numpix", ctypes.c_int ),
	( "distotile", ctypes.c_double ),
	( "num_tps", ctypes.c_int ),
	( "tp", ctypes.POINTER(opj_tp_info) ),
])

__freeze_rpythonic_struct( opj_marker_info_t, [
	( "C_type", ctypes.c_uint16 ),
	( "pos", ctypes.c_int ),
	( "C_len", ctypes.c_int ),
])

__freeze_rpythonic_struct( opj_codestream_info, [
	( "D_max", ctypes.c_double ),
	( "packno", ctypes.c_int ),
	( "index_write", ctypes.c_int ),
	( "image_w", ctypes.c_int ),
	( "image_h", ctypes.c_int ),
	( "prog", ctypes.c_int ),
	( "tile_x", ctypes.c_int ),
	( "tile_y", ctypes.c_int ),
	( "tile_Ox", ctypes.c_int ),
	( "tile_Oy", ctypes.c_int ),
	( "tw", ctypes.c_int ),
	( "th", ctypes.c_int ),
	( "numcomps", ctypes.c_int ),
	( "numlayers", ctypes.c_int ),
	( "numdecompos", ctypes.POINTER(ctypes.c_int) ),
	( "marknum", ctypes.c_int ),
	( "marker", ctypes.POINTER(opj_marker_info_t) ),
	( "maxmarknum", ctypes.c_int ),
	( "main_head_start", ctypes.c_int ),
	( "main_head_end", ctypes.c_int ),
	( "codestream_size", ctypes.c_int ),
	( "tile", ctypes.POINTER(opj_tile_info) ),
])

## wrapper functions ##
opj_set_event_mgr = _rpythonic_function_(		"opj_set_event_mgr", ctypes.POINTER(opj_event_mgr), [
	("cinfo",		ctypes.POINTER(opj_common_struct)),
	("event_mgr",		ctypes.POINTER(opj_event_mgr)),
	("context",		ctypes.POINTER(ctypes.c_void_p)),] )

opj_destroy_decompress = _rpythonic_function_(		"opj_destroy_decompress", ctypes.c_void_p, [
	("dinfo",		ctypes.POINTER(opj_dinfo)),] )

opj_set_default_decoder_parameters = _rpythonic_function_(		"opj_set_default_decoder_parameters", ctypes.c_void_p, [
	("parameters",		ctypes.POINTER(opj_dparameters)),] )

opj_create_decompress = _rpythonic_function_(		"opj_create_decompress", ctypes.POINTER(opj_dinfo), [
	("format",		ctypes.c_int),] )

opj_create_compress = _rpythonic_function_(		"opj_create_compress", ctypes.POINTER(opj_cinfo), [
	("format",		ctypes.c_int),] )

opj_destroy_compress = _rpythonic_function_(		"opj_destroy_compress", ctypes.c_void_p, [
	("cinfo",		ctypes.POINTER(opj_cinfo)),] )

opj_setup_decoder = _rpythonic_function_(		"opj_setup_decoder", ctypes.c_void_p, [
	("dinfo",		ctypes.POINTER(opj_dinfo)),
	("parameters",		ctypes.POINTER(opj_dparameters)),] )

opj_decode_with_info = _rpythonic_function_(		"opj_decode_with_info", ctypes.POINTER(opj_image), [
	("dinfo",		ctypes.POINTER(opj_dinfo)),
	("cio",		ctypes.POINTER(opj_cio)),
	("cstr_info",		ctypes.POINTER(opj_codestream_info)),] )

opj_decode = _rpythonic_function_(		"opj_decode", ctypes.POINTER(opj_image), [
	("dinfo",		ctypes.POINTER(opj_dinfo)),
	("cio",		ctypes.POINTER(opj_cio)),] )

opj_set_default_encoder_parameters = _rpythonic_function_(		"opj_set_default_encoder_parameters", ctypes.c_void_p, [
	("parameters",		ctypes.POINTER(opj_cparameters)),] )

opj_destroy_cstr_info = _rpythonic_function_(		"opj_destroy_cstr_info", ctypes.c_void_p, [
	("cstr_info",		ctypes.POINTER(opj_codestream_info)),] )

opj_encode_with_info = _rpythonic_function_(		"opj_encode_with_info", ctypes.c_int, [
	("cinfo",		ctypes.POINTER(opj_cinfo)),
	("cio",		ctypes.POINTER(opj_cio)),
	("image",		ctypes.POINTER(opj_image)),
	("cstr_info",		ctypes.POINTER(opj_codestream_info)),] )

opj_encode = _rpythonic_function_(		"opj_encode", ctypes.c_int, [
	("cinfo",		ctypes.POINTER(opj_cinfo)),
	("cio",		ctypes.POINTER(opj_cio)),
	("image",		ctypes.POINTER(opj_image)),
	("index",		ctypes.POINTER(ctypes.c_char)),] )

opj_setup_encoder = _rpythonic_function_(		"opj_setup_encoder", ctypes.c_void_p, [
	("cinfo",		ctypes.POINTER(opj_cinfo)),
	("parameters",		ctypes.POINTER(opj_cparameters)),
	("image",		ctypes.POINTER(opj_image)),] )

opj_msg_callback = _rpythonic_function_(		"opj_msg_callback", ctypes.c_void_p, [
	("msg",		ctypes.POINTER(ctypes.c_char)),
	("client_data",		ctypes.POINTER(ctypes.c_void_p)),] )

cio_seek = _rpythonic_function_(		"cio_seek", ctypes.c_void_p, [
	("cio",		ctypes.POINTER(opj_cio)),
	("pos",		ctypes.c_int),] )

cio_tell = _rpythonic_function_(		"cio_tell", ctypes.c_int, [
	("cio",		ctypes.POINTER(opj_cio)),] )

opj_cio_close = _rpythonic_function_(		"opj_cio_close", ctypes.c_void_p, [
	("cio",		ctypes.POINTER(opj_cio)),] )

opj_cio_open = _rpythonic_function_(		"opj_cio_open", ctypes.POINTER(opj_cio), [
	("cinfo",		ctypes.POINTER(opj_common_struct)),
	("buffer",		ctypes.POINTER(ctypes.c_ubyte)),
	("length",		ctypes.c_int),] )

opj_image_destroy = _rpythonic_function_(		"opj_image_destroy", ctypes.c_void_p, [
	("image",		ctypes.POINTER(opj_image)),] )

opj_image_create = _rpythonic_function_(		"opj_image_create", ctypes.POINTER(opj_image), [
	("numcmpts",		ctypes.c_int),
	("cmptparms",		ctypes.POINTER(opj_image_comptparm)),
	("clrspc",		ctypes.c_int),] )

opj_version = _rpythonic_function_(		"opj_version", ctypes.POINTER(ctypes.c_char), [] )


_rpythonic_convert_structs_to_objects()

_rpythonic_setup_return_wrappers()
_rpythonic_make_nice_global_enums_()
_rpythonic_clean_up_missing_functions_()

################### Raymond Hettinger's Constant Folding ##################
# Decorator for BindingConstants at compile time
# A recipe by Raymond Hettinger, from Python Cookbook:
# http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/277940
# updated for Python3 and still compatible with Python2 - by Hart, May17th 2011

try: _BUILTINS_DICT_ = vars(__builtins__)
except: _BUILTINS_DICT_ = __builtins__
ISPYTHON2 = sys.version_info[0] == 2
_HETTINGER_FOLDS_ = 0

def _hettinger_make_constants(f, builtin_only=False, stoplist=[], verbose=0):
    from opcode import opmap, HAVE_ARGUMENT, EXTENDED_ARG
    global _HETTINGER_FOLDS_
    try:
        if ISPYTHON2: co = f.func_code; fname = f.func_name
        else: co = f.__code__; fname = f.__name__
    except AttributeError: return f        # Jython doesn't have a func_code attribute.
    if ISPYTHON2: newcode = map(ord, co.co_code)
    else: newcode = list( co.co_code )
    newconsts = list(co.co_consts)
    names = co.co_names
    codelen = len(newcode)
    if ISPYTHON2:
        if verbose >= 2: print( f.func_name )
        func_globals = f.func_globals
    else:
        if verbose >= 2: print( f.__name__ )
        func_globals = f.__globals__

    env = _BUILTINS_DICT_.copy()
    if builtin_only:
        stoplist = dict.fromkeys(stoplist)
        stoplist.update(func_globals)
    else:
        env.update(func_globals)

    # First pass converts global lookups into constants
    i = 0
    while i < codelen:
        opcode = newcode[i]
        if opcode in (EXTENDED_ARG, opmap['STORE_GLOBAL']):
            if verbose >= 1: print('skipping function', fname)
            return f    # for simplicity, only optimize common cases
        if opcode == opmap['LOAD_GLOBAL']:
            oparg = newcode[i+1] + (newcode[i+2] << 8)
            name = co.co_names[oparg]
            if name in env and name not in stoplist:
                value = env[name]
                for pos, v in enumerate(newconsts):
                    if v is value:
                        break
                else:
                    pos = len(newconsts)
                    newconsts.append(value)
                newcode[i] = opmap['LOAD_CONST']
                newcode[i+1] = pos & 0xFF
                newcode[i+2] = pos >> 8
                _HETTINGER_FOLDS_ += 1
                if verbose >= 2:
                    print( "    global constant fold:", name )
        i += 1
        if opcode >= HAVE_ARGUMENT:
            i += 2

    # Second pass folds tuples of constants and constant attribute lookups
    i = 0
    while i < codelen:

        newtuple = []
        while newcode[i] == opmap['LOAD_CONST']:
            oparg = newcode[i+1] + (newcode[i+2] << 8)
            newtuple.append(newconsts[oparg])
            i += 3

        opcode = newcode[i]
        if not newtuple:
            i += 1
            if opcode >= HAVE_ARGUMENT:
                i += 2
            continue

        if opcode == opmap['LOAD_ATTR']:
            obj = newtuple[-1]
            oparg = newcode[i+1] + (newcode[i+2] << 8)
            name = names[oparg]
            try:
                value = getattr(obj, name)
                if verbose >= 2: print( '    folding attribute', name )
            except AttributeError:
                continue
            deletions = 1

        elif opcode == opmap['BUILD_TUPLE']:
            oparg = newcode[i+1] + (newcode[i+2] << 8)
            if oparg != len(newtuple): continue
            deletions = len(newtuple)
            value = tuple(newtuple)

        else: continue

        reljump = deletions * 3
        newcode[i-reljump] = opmap['JUMP_FORWARD']
        newcode[i-reljump+1] = (reljump-3) & 0xFF
        newcode[i-reljump+2] = (reljump-3) >> 8

        n = len(newconsts)
        newconsts.append(value)
        newcode[i] = opmap['LOAD_CONST']
        newcode[i+1] = n & 0xFF
        newcode[i+2] = n >> 8
        i += 3
        _HETTINGER_FOLDS_ += 1
        if verbose >= 2:
            print( "    folded constant:",value )

    if ISPYTHON2:
        codestr = ''.join(map(chr, newcode))
        codeobj = type(co)(co.co_argcount, co.co_nlocals, co.co_stacksize,
                        co.co_flags, codestr, tuple(newconsts), co.co_names,
                        co.co_varnames, co.co_filename, co.co_name,
                        co.co_firstlineno, co.co_lnotab, co.co_freevars,
                        co.co_cellvars)
        return type(f)(codeobj, f.func_globals, f.func_name, f.func_defaults, f.func_closure)
    else:
        codestr = b''
        for s in newcode: codestr += s.to_bytes(1,'little')
        codeobj = type(co)(co.co_argcount, co.co_kwonlyargcount, co.co_nlocals, co.co_stacksize,
                        co.co_flags, codestr, tuple(newconsts), co.co_names,
                        co.co_varnames, co.co_filename, co.co_name,
                        co.co_firstlineno, co.co_lnotab, co.co_freevars,
                        co.co_cellvars)
        return type(f)(codeobj, f.__globals__, f.__name__, f.__defaults__, f.__closure__)


def hettinger_bind_recursive(mc, builtin_only=False, stoplist=[],  verbose=0):
    """Recursively apply constant binding to functions in a module or class.

    Use as the last line of the module (after everything is defined, but
    before test code).  In modules that need modifiable globals, set
    builtin_only to True.

    """
    import types
    try: d = vars(mc)
    except TypeError: return
    if ISPYTHON2: recursivetypes = (type, types.ClassType)
    else: recursivetypes = (type,)
    for k, v in d.items():
        if type(v) is types.FunctionType:
            newv = _hettinger_make_constants(v, builtin_only, stoplist,  verbose)
            setattr(mc, k, newv)
        elif type(v) in recursivetypes:
            hettinger_bind_recursive(v, builtin_only, stoplist, verbose)

def hettinger_transform( module=None ):
    global _HETTINGER_FOLDS_
    _HETTINGER_FOLDS_ = 0
    if not module: module = sys.modules[__name__]
    hettinger_bind_recursive( module, verbose=1 )
    print( 'HETTINGER: constants folded', _HETTINGER_FOLDS_ )
