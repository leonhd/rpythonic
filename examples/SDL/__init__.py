## generated by RPythonic 0.4.4
## http://code.google.com/p/rpythonic/
import os, sys, ctypes, inspect
__os = os
__sys = sys
__inspect = inspect

IS32BIT = (ctypes.sizeof(ctypes.c_void_p)==4)
PYTHON_RESERVED_KEYWORDS = 'for while in as global with try except lambda return raise if else elif eval exec and not or break continue finally print yield del def class assert from is pass'.split()

## try to load precompiled c-libraries from this directory, if the library is not there try to load from the system.
_clibs_dir = os.path.dirname(os.path.abspath(__file__))

def _load_ctypes_lib( name ):
	if __os.name == 'posix':
		if __sys.platform=='linux2':
			if not name.endswith('.so'): name += '.so'
			if not name.startswith('lib'): name = 'lib' + name

			if IS32BIT: 	path = __os.path.join(_clibs_dir,'linux32')
			else: 		path = __os.path.join(_clibs_dir,'linux64')
			url = __os.path.join( path, name )
			if __os.path.isfile( url ): return ctypes.CDLL(url)
			elif __os.path.isfile( '/usr/local/lib/%s'%name ): return ctypes.CDLL('/usr/local/lib/%s'%name)
			elif __os.path.isfile( '/usr/local/lib64/%s'%name ) and not IS32BIT: return ctypes.CDLL('/usr/local/lib64/%s'%name)
			elif __os.path.isfile( '/usr/lib/%s'%name ): return ctypes.CDLL('/usr/lib/%s'%name)
			elif __os.path.isfile( './%s'%name ): return ctypes.CDLL('./%s'%name)
			else:	# fallback
				try: return ctypes.CDLL(name)
				except: return ctypes.CDLL('')

		elif sys.platform == 'darwin':
			name += '.dylib'
			if IS32BIT: 	path = os.path.join(_clibs_dir,'osx32')
			else: 		path = os.path.join(_clibs_dir,'osx64')
			url = os.path.join( path, name )
			if os.path.isfile( url ): return ctypes.CDLL(url)
			else: return ctypes.CDLL(name) #fallback

	elif os.name == 'nt':
		name += '.dll'
		if IS32BIT: 	path = os.path.join(_clibs_dir,'win32')
		else: 		path = os.path.join(_clibs_dir,'win64')
		url = os.path.join( path, name )
		if os.path.isfile( url ): return ctypes.CDLL(url)
		else: return ctypes.CDLL(name) #fallback

RPYTHONIC_WRAPPER_FUNCTIONS = {}
RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES = []
RPYTHONIC_AUTOPREFIX_IGNORE = []

## ctypes does not clearly expose these types ##
PyCFuncPtrType = type(ctypes.CFUNCTYPE(ctypes.c_void_p))
PyCArrayType = type( ctypes.c_int * 2 )
PyCPointerType = type( ctypes.POINTER(ctypes.c_int) )
PyCStructType = type( ctypes.Structure )
CArgObject = type( ctypes.byref(ctypes.c_int()) )

class _rpythonic_meta_(object):
	'''
	Reserved Attributes:
		POINTER
		CSTRUCT
		CAST
	'''
	_rpythonic_ = True		# workaround for now, must have a way to know if object is a meta from another module, isinstance(o,_rpythonic_meta_) will fail in those cases. another workaround could be check sys.modules for other rpythonic modules and fetch _rpythonic_meta_ from there.
	def __init__(self, *args, **kw ):							# cheap trick, abuse **kw, and look for "pointer", "cast"
		if kw and 'pointer' not in kw: raise SyntaxError	# sorry, you can not init with keywords
		elif kw and 'pointer' in kw:
			if 'cast' in kw and kw['cast']:
				self.POINTER = ctypes.cast( kw['pointer'], ctypes.POINTER(self.CSTRUCT) )
			else: self.POINTER = kw['pointer']
		else: self.POINTER = ctypes.pointer( self.CSTRUCT(*args) )
		self.POINTER.pyobject = self	# .pyobject is local to this pointer "object"

	def __getattr__(self,name):
		if hasattr( self.POINTER.contents, name ):
			return getattr( self.POINTER.contents, name )

		else:	# when rpythonic failed to generate good bindings - these lookups should be cached
			for parent in self._rpythonic_parent_classes_:
				if hasattr( parent, name ):
					method = getattr( parent, name )	# should check if it really is an unbound method
					func = parent._rpythonic_unbound_lookup_[ method ]
					n = func.name
					if len(func.argnames) > 1:
						argnames = func.argnames[ 1 : ]
						a = ',' + '=None,'.join( argnames ) + '=None'
						b = ','.join( argnames )
					else: a = b = ''
					lamb = eval( 'lambda self %s: %s( self.POINTER, %s )' %(a,n,b) )
					setattr( self.__class__, name, lamb )
					#return lamb	# this would return the unbound lambda, must call getattr again
					return getattr( self, name )

			## last resort, load from global name space ##
			G = globals()
			if name in G: return lambda *args: G[name](self.POINTER, *args)
			else:
				for prefix in self._autoprefix_:
					n = prefix + name
					if n in G: return lambda *args: G[n](self.POINTER, *args)
				print( 'possible auto-prefixes available', self._autoprefix_ )
				raise AttributeError

	def __call__(self, type=False):
		print('calling object is DEPRECATED - use ob.POINTER or ob.CSTRUCT')
		if type: return self.CSTRUCT
		else: return self.POINTER


def _rpythonic_generate_subclass_( name, struct, functions ):
	head = 'class %s( _rpythonic_meta_ ):' %name
	body = [ 
		'_rpythonic_parent_classes_ = []' ,
		'_rpythonic_unbound_lookup_ = {}' 
	]

	names = [ func.name for func in functions ]

	possibles = {}
	rank = []		# rank by longest name
	if len(names) > 3000: print('too many functions to use this hack')
	else:
		for n1 in names:
			prefix = ''
			for i,char in enumerate(n1):
				prefix += char
				if prefix not in possibles:
					possibles[ prefix ] = 0
					for n2 in names:
						if n2.startswith( prefix ):
							possibles[ prefix ] += 1

					if not rank or len(prefix) > len(rank[-1]) and possibles[prefix] > len(names)/4:
						rank.append( prefix )

	top = []
	while rank:
		best = rank.pop()
		if possibles[best] > len(functions)/2 and best not in names:
			if best.endswith('_set_') or best.endswith('_get_'): best = best[ : -4 ]
			elif best.endswith('Set') or best.endswith('Get'): best = best[ : -3 ]

			rem = []
			for other in rank:
				if best.startswith(other): rem.append( other )
			for r in rem: rank.remove( r )

			if best not in top: top.append( best )

		if len(top) > 3: break

	for n in names:		# find shortest prefixes #
		prefix = ''
		for i,char in enumerate(n):		# cammelCase
			if i==0: prefix += char; continue
			if char.isupper() and len(prefix) >= 2: break
			prefix += char
		if prefix and prefix != n and len(prefix) >= 2:
			hits = 0
			for other in names:
				if other.startswith( prefix ): hits += 1
			if hits >= 2 and prefix not in top:
				top.append( prefix )
				if len(top) >= 6: break

	## setup full names
	for func in functions:
		n = func.name
		if len(func.argnames) > 1:
			argnames = func.argnames[ 1 : ]
			a = ',' + '=None,'.join( argnames ) + '=None'
			b = ','.join( argnames )
		else: a = b = ''

		fhead = 'def %s( self %s ):' %(n,a)
		fbody = ['return %s(self.POINTER, %s)' %(func.name,b)]
		g = fhead + '\n\t\t' + '\n\t\t'.join( fbody )
		body.append( g )
		#body.append( '%s._rpythonic_function_ = %s' %(func.name, func.name) )

	## setup short names ##
	for n in names:
		for prefix in top:
			if n.startswith(prefix) and n[len(prefix):] not in names:
				alt = n[ len(prefix) : ]
				if alt and alt != n and alt not in PYTHON_RESERVED_KEYWORDS and not alt.isdigit() and not alt[0].isdigit():
					body.append( '%s = %s' %(alt,n) )
					names.append( alt )

	gen = head + '\n\t' + '\n\t'.join( body )
	try: exec( gen )
	except:
		print( gen )
		raise SyntaxError

	klass = locals()[name]
	klass.CSTRUCT = struct	# ctypes struct class

	klass._autoprefix_ = top
	for func in functions:
		unbound = getattr( klass, func.name )
		klass._rpythonic_unbound_lookup_[ unbound ] = func
		# klass.longname is klass.shortname = False
		# klass.longname == klass.shortname = True
	return klass

def _rpythonic_convert_structs_to_objects():
	G = globals()
	for klass in _OOAPI_:
		altname = name = klass.__name__
		prefix = ''
		for i,char in enumerate(name):
			if i==0: prefix += char; continue
			if char.isupper(): break
			prefix += char
		if prefix and prefix != name:
			hits = 0
			for other in _OOAPI_:
				if other is not klass:
					if other.__name__.startswith( prefix ): hits += 1
			if hits >= 2:
				altname = name[ len(prefix) : ]

		funcs = _OOAPI_[ klass ]
		newklass = _rpythonic_generate_subclass_( altname, klass, funcs )
		klass._rpythonic_wrapper_class_ = newklass
		G[ name ] = newklass	# replace struct with wrapper
		if altname not in G: G[ altname ] = newklass	# safely define with nicer name
		elif altname != name: # odd cases, maybe a function that returns the object, almost never happens.
			print('WARN - not replacing something with struct wrapper:', G[altname] )


def _rpythonic_setup_return_wrappers():
	R = _rpythonic_function_
	for klass in _OOAPI_:
		if klass in _OOAPI_RETURNS_OBJECT_:
			for f in _OOAPI_RETURNS_OBJECT_[klass]:
				f.object_oriented = True
				if not f.return_wrapper:	# just in case the ctypes footer defines it
					f.return_wrapper = klass._rpythonic_wrapper_class_

def _rpythonic_function_( name, result=ctypes.c_void_p, args=[]):
	mname = '_metafunc_%s' %name
	exec( 'class %s( _rpythonic_metafunc_ ): pass' %mname )
	k = locals()[mname]
	return k( name, result, args )

_OOAPI_ = {}
_OOAPI_RETURNS_OBJECT_ = {}

class _rpythonic_metafunc_(object):
	def __init__(self, name, result=ctypes.c_void_p, args=[]):
		self.name = name
		self.result = result
		self.argtypes = []		# can dynamically change CFUNCTYPE trick
		self.argnames = []
		self.argtypestypes = []
		for i,arg in enumerate(args):
			n,t = arg
			if n in PYTHON_RESERVED_KEYWORDS: n = 'C_'+n
			if n in self.argnames: n = '%s%s' %(n,i)
			self.argnames.append( n )
			self.argtypes.append( t )
			self.argtypestypes.append( type(t) )		# precomputed for speed

		self.argnames = tuple( self.argnames )				# should never change
		self.numargs = len( self.argtypes )
		self.callbacks = [None] * self.numargs
		self.return_wrapper = None
		self.object_oriented = False
		self.function = None
		try:
			func = self.function = getattr(CTYPES_DLL, self.name )
			RPYTHONIC_WRAPPER_FUNCTIONS[ name ] = self
		except:
			RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES.append( name )
		if self.function: self.reset()

	def change_argument_type( self, name, t ):
		idx = self.argnames.index( name )
		self.argtypes[ idx ] = t
		self.argtypestypes[ idx ] = type(t)
		self.function.argtypes = self.argtypes

	def reset(self):
		if self.argnames:
			a = ',' + '=None,'.join( self.argnames ) + '=None'
			b = ','.join( self.argnames )
		else: a = b = ''

		callmeth = eval( 'lambda self %s: self._call_( %s )' %(a,b) )
		setattr( self.__class__, '__call__', callmeth )

		self.function.restype = self.result
		self.function.argtypes = self.argtypes

		if type( self.result ) is PyCPointerType and type(self.result._type_) is PyCStructType:
			klass = self.result._type_
			if klass not in _OOAPI_RETURNS_OBJECT_: _OOAPI_RETURNS_OBJECT_[klass] = []
			_OOAPI_RETURNS_OBJECT_[klass].append( self )

		self.defaults = []
		for i in range( self.numargs ):
			T = self.argtypes[ i ]
			if type(T) is PyCFuncPtrType:
				p = T()	# func pointers can not be None
				self.defaults.append( p )
				self.callbacks[ i ] = p					# save reference
			elif T in (ctypes.c_int, ctypes.c_uint, ctypes.c_long, ctypes.c_ulong):
				self.defaults.append( 0 )
			elif T in (ctypes.c_float, ctypes.c_double):
				self.defaults.append( .0 )
			else: self.defaults.append( None )	# None is allowed for all other types

			## generate OO API ##
			if i == 0 and type(T) is PyCPointerType and type(T._type_) is PyCStructType:
				klass = T._type_
				if klass not in _OOAPI_: _OOAPI_[ klass ] = []
				_OOAPI_[ klass ].append( self )

	def _call_( self, *args ):			# allow flexible calling types
		cargs = list( self.defaults )
		for i,arg in enumerate(args):
			if isinstance( arg, _rpythonic_meta_ ): arg = arg.POINTER
			elif hasattr( arg, '_rpythonic_' ): arg = arg.POINTER		# workaround - instance from another module

			t = type(arg)
			k = self.argtypes[ i ]
			kt = self.argtypestypes[ i ]
			if arg is None and cargs[i] is not None:	# use user defaults, very rare cases
				continue

			elif t is bool and k is ctypes.c_int:
				if arg: cargs[i] = 1	#ctypes.c_int(1)
				else: cargs[i] = 0	#ctypes.c_int(0)

			elif t in (list,tuple):				# convert lists and tuples into array
				if kt is PyCArrayType:
					cargs[ i ] = k(*arg)
				elif kt is PyCStructType:
					if k._array_wrapper_: cargs[ i ] = k(arg)	# allow easy array init
					else: cargs[ i ] = k(*arg)							# allow multiple args
				elif kt is PyCPointerType:
					cargs[ i ] = _convert_nested_list_to_pointer( k, arg )
				else: assert 0

			elif isinstance( arg, ctypes._Pointer ) and t is not k and kt is PyCPointerType:
				cargs[ i ] = ctypes.cast( arg, k )		# generic's that need to be cast

			elif kt is PyCStructType and isinstance( arg, ctypes._Pointer ):
				cargs[ i ] = arg.contents	# fixed may25

			elif kt is PyCPointerType and not isinstance( arg, (ctypes._Pointer,CArgObject) ):
				if t in (int,float,bool): ptr = k( k._type_(arg) )
				elif t is str:
					arg = arg.encode('utf-8')
					#ptr = k( k._type_() )								# not k() otherwise null pointer error
					#for j, char in enumerate(arg): ptr[ j ] = char		# not correct - missing null byte?
					ptr = ctypes.create_string_buffer(arg)				# correct and pypy compatible
				elif t in (PyCStructType, PyCArrayType):
					ptr = ctypes.cast( ctypes.pointer( arg ), k )
				else:
					ptr = arg	# TODO print warning?
				cargs[ i ] = ptr

			elif kt is PyCFuncPtrType:
				if t.__name__ == 'CFunctionType': cargs[ i ] = arg		# assume outside holds pointer
				else:													# this is not safe #
					cargs[ i ] = self.callbacks[ i ] = k( arg )				# assume arg is a callable
			else:
				cargs[ i ] = arg		# directly pass

		## if you define your own return_wrapper, it must take keyword "pointer"
		if self.return_wrapper: return self.return_wrapper( pointer=self.function( *cargs ) )
		else: return self.function( *cargs )



def _convert_nested_list_to_pointer( k, arg ):
	depth = 0; s = k
	while True:
		if type(s) is PyCPointerType:
			s = getattr( s, '_type_' )
			depth += 1
		else: break
	assert depth and depth <= 2
	if depth == 1:
		T = k._type_
		ptr = k( k._type_() )
		for i in range( len(arg) ):
			ptr[ i ] = T( *arg[i] )
	elif depth == 2:
		T = k._type_._type_
		_ptr = k._type_( k._type_._type_() )
		for i in range(len( arg )):
			for j in range( len(arg[i]) ):
				_ptr[ j ] = T( *arg[ i ][ j ] )
		ptr = k( _ptr )
	return ptr


def __freeze_rpythonic_struct( cls, fields ):
	if cls not in _OOAPI_: _OOAPI_[ cls ] = []	# wrap all structs
	try: setattr( cls, '_fields_', fields )
	except:
		print( 'WARN - bad order struct freeze', cls )
		#cls._fields_ = []

class _rpythonic_struct_( ctypes.Structure ):
	_array_wrapper_ = False
	_fields_ = []
	_methods_ = {}
	#def __call__(self): return self
	def __init__(self, *args, **kw ):
		cargs = []
		argtypes = []
		for a in self._fields_: argtypes.append( a[1] )
		if len(args) > len(argtypes): args = [args]	# allow both calling conventions
		for i,arg in enumerate( args ):
			if isinstance( arg, _rpythonic_meta_ ): arg = arg.POINTER

			t = type(arg)
			k = argtypes[ i ]
			if t in (list,tuple):
				if k.__class__.__name__	== 'PyCArrayType':
					cargs.append( k(*arg) )
				elif k.__class__.__name__ == 'PyCStructType':
					if k._array_wrapper_: cargs.append( k(arg) )	# allow easy array init
					else: cargs.append( k(*arg) )							# allow multiple args
			elif isinstance( arg, ctypes._Pointer ) and t is not k:
				cargs[ i ] = ctypes.cast( arg, k )	# generic's that need to be cast
			elif k.__class__.__name__ == 'PyCArrayType' and t in (float,int,bool):
				cargs.append( k(arg) )		# support init array from single value
			else:
				cargs.append( arg )		# directly pass

		ctypes.Structure.__init__(self, *cargs, **kw)


def _rpythonic_make_nice_global_enums_():
	G = globals()
	for name in RPYTHONIC_GLOBAL_ENUMS:
		if '_' in name and name.index('_') <= 4:
			altname = name[ name.index('_') + 1 : ]
			if altname not in G:
				G[altname] = RPYTHONIC_GLOBAL_ENUMS[ name ]

def _rpythonic_clean_up_missing_functions_():
	G = globals()
	for f in RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES:
		G.pop( f )
	print( "C functions loaded: %s" %len(RPYTHONIC_WRAPPER_FUNCTIONS) )
	print( "C functions failed: %s" %len(RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES) )



###### NEW API #########
CTYPES_DLL = None

class _VOID_POINTER_CONTAINER_(object):
	def __init__(self, ptr, name=None):
		self._pointer_ = ptr
		self.name = name
NULL = _VOID_POINTER_CONTAINER_(None,'<null pointer>')


class meta:	# NEW API - allow run time switch from ctypes to rffi
	'''
	Methods:
		RPython will not allow object wrapper around a method (__call__ not allowed)
		keep C function names in list "__cfunctions__"
		rpythonic.enable_rffi( classA, classB )	
		can take advantage of methods in object-method-wrapper,
		generate rffi wrapper and set method on classA, etc.
		replaces object-method-wrapper with rffi-method

	Properties:
		CPython: obj.x=1
		RPython: obj.set_x(1)	
	'''
	METAS = []
	def __init__(self, constructors=[], methods={}, properties={}):
		global CTYPES_DLL
		if not CTYPES_DLL:
			CTYPES_DLL = _load_ctypes_lib( _clib_name_ )

		self.constructors = constructors
		self.methods = methods
		self.properties = properties
		self.METAS.append( self )



	def __call__(self, cls ):
		print('@meta', cls )

		if not self.constructors:
			lamb = lambda s, _explicit_pointer_=None: setattr(s,'_pointer_',getattr(_explicit_pointer_,'_pointer_')) if hasattr(_explicit_pointer_,'_pointer_') else setattr(s,'_pointer_',_explicit_pointer_)
			lamb._debug = '(no constructor)'
			setattr( cls, '__init__', lamb )
		else:
			con = self._find_best_function( self.constructors )
			cfunc = self._build_cfunc( con )
			setattr( cls, '_%s'%con['name'], cfunc )
			g = self._gen_init( con )
			setattr( cls, '__init__', g )
		
		## set methods ##
		for name in self.methods:
			meth = self.methods[ name ]
			cfuncs = []
			for m in meth['functions']:
				cfunc = self._build_cfunc( m, method=True, static=meth['static'] )
				self._setup_return( cfunc, meth )
				setattr( cls, '_%s'%m['name'], cfunc )
				cfuncs.append( cfunc )

			f = self._find_best_function( meth['functions'] )
			g = self._gen_method( meth, f )
			g._cfuncs = cfuncs
			if meth['static']: g = classmethod( g )
			setattr( cls, name, g )

		for name in self.properties:
			print( 'property:', name )
			p = []
			for f in self.properties[name]:
				cfunc = self._build_cfunc( f )
				setattr( cls, '_%s'%f['name'], cfunc )
				g = self._gen_method( f, f )
				p.append( g )

			setattr( cls, name, property(*p) )

		return cls


	@staticmethod
	def _build_cfunc( info, method=False, static=False ):
		cfunc = getattr(CTYPES_DLL, info['name'])
		if method and not static: argtypes = [ ctypes.c_void_p ]
		else: argtypes = []
		for p in info['parameters']: argtypes.append( eval(p['ctypes_type']) )
		cfunc.argtypes = argtypes
		return cfunc

	@staticmethod
	def _setup_return( cfunc, info ):
		if not info['returns_fundamental']:
			cfunc.restype = ctypes.c_void_p
		elif info['returns_fundamental']:
			cfunc.restype = eval( info['returns_ctypes'] )
		else:
			cfunc.restype = ctypes.c_void_p

	@staticmethod
	def _gen_prepare_args( m ):
		a = []; b = []
		for i,p in enumerate(m['parameters']):
			if 'name' in p: n = p['name']
			else: n = '_unnamed_%s' %i
			if '<' in n: n = '_TODOfixme_%s' %i
			if n in PYTHON_RESERVED_KEYWORDS: n += str(i)
			if p['fundamental']:
				b.append( n )
				s = p['raw_type'].split()
				if 'default' in p:
					d = p['default']
					if p['raw_type'] in ('float', 'double'):
						if d.endswith('f'): d = d[:-1]
						d = d.replace(' ', '.')
						if 'e' in d: d = 0.0
						try: d = float(d)
						except: d = 0.0
					elif ('int' in s or 'size_t' in s) and not d.isdigit(): d = 0
					elif 'char' in s and '"' not in d: d = '""'
					elif d.lower() == 'false': d = False
					elif d.lower() == 'true': d = True
				elif 'char' in s: d = '""'
				elif 'float' in s or 'double' in s: d = 0.0
				elif 'size_t' in s or 'int' in s or 'long' in s or 'short' in s: d = 0
				elif p['raw_type'] == 'bool': d = False
				elif p['raw_type'] in ('void', '(template)'): d = 'NULL'
				else: print( p )
				a.append( n+'=%s' %d )

			else:
				b.append( '%s._pointer_'%n )
				a.append( n+'=NULL' )
		return a, b

	@staticmethod
	def _gen_init( m ):
		a, b = meta._gen_prepare_args( m )
		if a: e = 'lambda _py_self_, %s, _explicit_pointer_=None: ' %(','.join(a))
		else: e = 'lambda _py_self_, _explicit_pointer_=None: '
		e += 'setattr(_py_self_, "_pointer_", _py_self_._%s(%s))' %( m['name'], ','.join(b) )
		e += ' if not _explicit_pointer_ else '
		e += 'setattr(_py_self_, "_pointer_", _explicit_pointer_)'
		print( e )
		lamb = eval( e ); lamb._debug = e; lamb._introspect = m
		return lamb

	@staticmethod
	def _find_best_function( funcs ):
		best = funcs[0]
		score = -1
		if len(funcs) > 1:
			for f in funcs:
				hits = 0
				for p in f['parameters']:
					if p['fundamental']: hits += 1
				if hits and hits == len( f['parameters'] ):
					if hits > score:
						score = hits
						best = f
		return best

	@staticmethod
	def _gen_method( m, f ):
		a, b = meta._gen_prepare_args( f )
		if a: e = 'lambda _py_self_, %s: ' %(','.join(a))
		else: e = 'lambda _py_self_: '

		if 'static' in m and m['static']:	# static in c++ is like a classmethod
			c = '_py_self_._%s( %s )' %( f['name'], ','.join(b) )
		else:
			c = '_py_self_._%s( _py_self_._pointer_, %s )' %( f['name'], ','.join(b) )

		if not m['returns_fundamental']:
			if 'returns_unknown' in m or '<' in m['returns']: c = '_VOID_POINTER_CONTAINER_( %s, name="%s" )' %(c,m['returns'])
			else:
				something = m['returns'].replace('::', '.')
				c = '%s( _explicit_pointer_=%s )' %(something, c)

		e += c; lamb = eval( e )
		lamb._debug = e; lamb._introspect = f
		return lamb


	META_FUNCTIONS = []
	@classmethod
	def function( self, info ):
		print('@meta.function', info['name'] )
		global CTYPES_DLL
		if not CTYPES_DLL:
			CTYPES_DLL = _load_ctypes_lib( _clib_name_ )

		cfunc = self._build_cfunc( info, method=False, static=True )
		setattr( meta, '_%s'%info['name'], cfunc )
		self._setup_return( cfunc, info )
		a, b = meta._gen_prepare_args( info )
		e = 'lambda %s: ' %(','.join(a))
		c = 'meta._%s( %s )' %( info['name'], ','.join(b) )

		if not info['returns_fundamental']:
			if 'returns_unknown' in info or '<' in info['returns']:
				c = '_VOID_POINTER_CONTAINER_( %s, name="%s" )' %(c,info['returns'])
			else:
				something = info['returns'].replace('::', '.')
				c = '%s( _explicit_pointer_=%s )' %(something, c)
		e += c
		lamb = eval( e )
		lamb._debug = e
		lamb._introspect = info
		return lamb



def _rpythonic_strip_prefixes_( prefixes ):
	G = globals()
	names = list(G.keys())	# ensure list in py3
	for name in names:
		for prefix in prefixes:
			if name.startswith( prefix ):
				newname = name[ len(prefix) : ]
				if newname and newname not in G:
					G[ newname ] = G[ name ]






_clib_name_ = 'libSDL'
print('loading lib', _clib_name_)
print( os.path.abspath( os.path.curdir ) )
CTYPES_DLL = _load_ctypes_lib( _clib_name_ )
assert CTYPES_DLL
print( CTYPES_DLL._name )

## macro globals ##
SDL_INIT_TIMER = 1
SDL_INIT_AUDIO = 16
SDL_INIT_VIDEO = 32
SDL_INIT_CDROM = 256
SDL_INIT_JOYSTICK = 512
SDL_INIT_NOPARACHUTE = 1048576
SDL_INIT_EVENTTHREAD = 16777216
SDL_INIT_EVERYTHING = 65535
## enums ##
_codecvt_result = { 
	"__codecvt_ok" : 0, 
	"__codecvt_partial" : 1, 
	"__codecvt_error" : 2, 
	"__codecvt_noconv" : 3, 
}

SDL_ENOMEM = 0 
SDL_EFREAD = 1 
SDL_EFWRITE = 2 
SDL_EFSEEK = 3 
SDL_UNSUPPORTED = 4 
SDL_LASTERROR = 5 

SDL_FALSE = 0 
SDL_TRUE = 1 

DUMMY_ENUM_VALUE = 0 

ISupper = 0 
ISlower = 1 
ISalpha = 2 
ISdigit = 3 
ISxdigit = 4 
ISspace = 5 
ISprint = 6 
ISgraph = 7 
ISblank = 8 
IScntrl = 9 
ISpunct = 10 
ISalnum = 11 

SDL_ADDEVENT = 0 
SDL_PEEKEVENT = 1 
SDL_GETEVENT = 2 

SDL_NOEVENT = 0 
SDL_ACTIVEEVENT = 1 
SDL_KEYDOWN = 2 
SDL_KEYUP = 3 
SDL_MOUSEMOTION = 4 
SDL_MOUSEBUTTONDOWN = 5 
SDL_MOUSEBUTTONUP = 6 
SDL_JOYAXISMOTION = 7 
SDL_JOYBALLMOTION = 8 
SDL_JOYHATMOTION = 9 
SDL_JOYBUTTONDOWN = 10 
SDL_JOYBUTTONUP = 11 
SDL_QUIT = 12 
SDL_SYSWMEVENT = 13 
SDL_EVENT_RESERVEDA = 14 
SDL_EVENT_RESERVEDB = 15 
SDL_VIDEORESIZE = 16 
SDL_VIDEOEXPOSE = 17 
SDL_EVENT_RESERVED2 = 18 
SDL_EVENT_RESERVED3 = 19 
SDL_EVENT_RESERVED4 = 20 
SDL_EVENT_RESERVED5 = 21 
SDL_EVENT_RESERVED6 = 22 
SDL_EVENT_RESERVED7 = 23 
SDL_USEREVENT = 24 
SDL_NUMEVENTS = 32 

SDL_ACTIVEEVENTMASK = 2 
SDL_KEYDOWNMASK = 4 
SDL_KEYUPMASK = 8 
SDL_KEYEVENTMASK = 12 
SDL_MOUSEMOTIONMASK = 16 
SDL_MOUSEBUTTONDOWNMASK = 32 
SDL_MOUSEBUTTONUPMASK = 64 
SDL_MOUSEEVENTMASK = 112 
SDL_JOYAXISMOTIONMASK = 128 
SDL_JOYBALLMOTIONMASK = 256 
SDL_JOYHATMOTIONMASK = 512 
SDL_JOYBUTTONDOWNMASK = 1024 
SDL_JOYBUTTONUPMASK = 2048 
SDL_JOYEVENTMASK = 3968 
SDL_VIDEORESIZEMASK = 65536 
SDL_VIDEOEXPOSEMASK = 131072 
SDL_QUITMASK = 4096 
SDL_SYSWMEVENTMASK = 8192 

SDL_GRAB_QUERY = -1 
SDL_GRAB_OFF = 0 
SDL_GRAB_ON = 1 
SDL_GRAB_FULLSCREEN = 2 

SDL_GL_RED_SIZE = 0 
SDL_GL_GREEN_SIZE = 1 
SDL_GL_BLUE_SIZE = 2 
SDL_GL_ALPHA_SIZE = 3 
SDL_GL_BUFFER_SIZE = 4 
SDL_GL_DOUBLEBUFFER = 5 
SDL_GL_DEPTH_SIZE = 6 
SDL_GL_STENCIL_SIZE = 7 
SDL_GL_ACCUM_RED_SIZE = 8 
SDL_GL_ACCUM_GREEN_SIZE = 9 
SDL_GL_ACCUM_BLUE_SIZE = 10 
SDL_GL_ACCUM_ALPHA_SIZE = 11 
SDL_GL_STEREO = 12 
SDL_GL_MULTISAMPLEBUFFERS = 13 
SDL_GL_MULTISAMPLESAMPLES = 14 
SDL_GL_ACCELERATED_VISUAL = 15 
SDL_GL_SWAP_CONTROL = 16 

SDLK_UNKNOWN = 0 
SDLK_FIRST = 0 
SDLK_BACKSPACE = 8 
SDLK_TAB = 9 
SDLK_CLEAR = 12 
SDLK_RETURN = 13 
SDLK_PAUSE = 19 
SDLK_ESCAPE = 27 
SDLK_SPACE = 32 
SDLK_EXCLAIM = 33 
SDLK_QUOTEDBL = 34 
SDLK_HASH = 35 
SDLK_DOLLAR = 36 
SDLK_AMPERSAND = 38 
SDLK_QUOTE = 39 
SDLK_LEFTPAREN = 40 
SDLK_RIGHTPAREN = 41 
SDLK_ASTERISK = 42 
SDLK_PLUS = 43 
SDLK_COMMA = 44 
SDLK_MINUS = 45 
SDLK_PERIOD = 46 
SDLK_SLASH = 47 
SDLK_0 = 48 
SDLK_1 = 49 
SDLK_2 = 50 
SDLK_3 = 51 
SDLK_4 = 52 
SDLK_5 = 53 
SDLK_6 = 54 
SDLK_7 = 55 
SDLK_8 = 56 
SDLK_9 = 57 
SDLK_COLON = 58 
SDLK_SEMICOLON = 59 
SDLK_LESS = 60 
SDLK_EQUALS = 61 
SDLK_GREATER = 62 
SDLK_QUESTION = 63 
SDLK_AT = 64 
SDLK_LEFTBRACKET = 91 
SDLK_BACKSLASH = 92 
SDLK_RIGHTBRACKET = 93 
SDLK_CARET = 94 
SDLK_UNDERSCORE = 95 
SDLK_BACKQUOTE = 96 
SDLK_a = 97 
SDLK_b = 98 
SDLK_c = 99 
SDLK_d = 100 
SDLK_e = 101 
SDLK_f = 102 
SDLK_g = 103 
SDLK_h = 104 
SDLK_i = 105 
SDLK_j = 106 
SDLK_k = 107 
SDLK_l = 108 
SDLK_m = 109 
SDLK_n = 110 
SDLK_o = 111 
SDLK_p = 112 
SDLK_q = 113 
SDLK_r = 114 
SDLK_s = 115 
SDLK_t = 116 
SDLK_u = 117 
SDLK_v = 118 
SDLK_w = 119 
SDLK_x = 120 
SDLK_y = 121 
SDLK_z = 122 
SDLK_DELETE = 127 
SDLK_WORLD_0 = 160 
SDLK_WORLD_1 = 161 
SDLK_WORLD_2 = 162 
SDLK_WORLD_3 = 163 
SDLK_WORLD_4 = 164 
SDLK_WORLD_5 = 165 
SDLK_WORLD_6 = 166 
SDLK_WORLD_7 = 167 
SDLK_WORLD_8 = 168 
SDLK_WORLD_9 = 169 
SDLK_WORLD_10 = 170 
SDLK_WORLD_11 = 171 
SDLK_WORLD_12 = 172 
SDLK_WORLD_13 = 173 
SDLK_WORLD_14 = 174 
SDLK_WORLD_15 = 175 
SDLK_WORLD_16 = 176 
SDLK_WORLD_17 = 177 
SDLK_WORLD_18 = 178 
SDLK_WORLD_19 = 179 
SDLK_WORLD_20 = 180 
SDLK_WORLD_21 = 181 
SDLK_WORLD_22 = 182 
SDLK_WORLD_23 = 183 
SDLK_WORLD_24 = 184 
SDLK_WORLD_25 = 185 
SDLK_WORLD_26 = 186 
SDLK_WORLD_27 = 187 
SDLK_WORLD_28 = 188 
SDLK_WORLD_29 = 189 
SDLK_WORLD_30 = 190 
SDLK_WORLD_31 = 191 
SDLK_WORLD_32 = 192 
SDLK_WORLD_33 = 193 
SDLK_WORLD_34 = 194 
SDLK_WORLD_35 = 195 
SDLK_WORLD_36 = 196 
SDLK_WORLD_37 = 197 
SDLK_WORLD_38 = 198 
SDLK_WORLD_39 = 199 
SDLK_WORLD_40 = 200 
SDLK_WORLD_41 = 201 
SDLK_WORLD_42 = 202 
SDLK_WORLD_43 = 203 
SDLK_WORLD_44 = 204 
SDLK_WORLD_45 = 205 
SDLK_WORLD_46 = 206 
SDLK_WORLD_47 = 207 
SDLK_WORLD_48 = 208 
SDLK_WORLD_49 = 209 
SDLK_WORLD_50 = 210 
SDLK_WORLD_51 = 211 
SDLK_WORLD_52 = 212 
SDLK_WORLD_53 = 213 
SDLK_WORLD_54 = 214 
SDLK_WORLD_55 = 215 
SDLK_WORLD_56 = 216 
SDLK_WORLD_57 = 217 
SDLK_WORLD_58 = 218 
SDLK_WORLD_59 = 219 
SDLK_WORLD_60 = 220 
SDLK_WORLD_61 = 221 
SDLK_WORLD_62 = 222 
SDLK_WORLD_63 = 223 
SDLK_WORLD_64 = 224 
SDLK_WORLD_65 = 225 
SDLK_WORLD_66 = 226 
SDLK_WORLD_67 = 227 
SDLK_WORLD_68 = 228 
SDLK_WORLD_69 = 229 
SDLK_WORLD_70 = 230 
SDLK_WORLD_71 = 231 
SDLK_WORLD_72 = 232 
SDLK_WORLD_73 = 233 
SDLK_WORLD_74 = 234 
SDLK_WORLD_75 = 235 
SDLK_WORLD_76 = 236 
SDLK_WORLD_77 = 237 
SDLK_WORLD_78 = 238 
SDLK_WORLD_79 = 239 
SDLK_WORLD_80 = 240 
SDLK_WORLD_81 = 241 
SDLK_WORLD_82 = 242 
SDLK_WORLD_83 = 243 
SDLK_WORLD_84 = 244 
SDLK_WORLD_85 = 245 
SDLK_WORLD_86 = 246 
SDLK_WORLD_87 = 247 
SDLK_WORLD_88 = 248 
SDLK_WORLD_89 = 249 
SDLK_WORLD_90 = 250 
SDLK_WORLD_91 = 251 
SDLK_WORLD_92 = 252 
SDLK_WORLD_93 = 253 
SDLK_WORLD_94 = 254 
SDLK_WORLD_95 = 255 
SDLK_KP0 = 256 
SDLK_KP1 = 257 
SDLK_KP2 = 258 
SDLK_KP3 = 259 
SDLK_KP4 = 260 
SDLK_KP5 = 261 
SDLK_KP6 = 262 
SDLK_KP7 = 263 
SDLK_KP8 = 264 
SDLK_KP9 = 265 
SDLK_KP_PERIOD = 266 
SDLK_KP_DIVIDE = 267 
SDLK_KP_MULTIPLY = 268 
SDLK_KP_MINUS = 269 
SDLK_KP_PLUS = 270 
SDLK_KP_ENTER = 271 
SDLK_KP_EQUALS = 272 
SDLK_UP = 273 
SDLK_DOWN = 274 
SDLK_RIGHT = 275 
SDLK_LEFT = 276 
SDLK_INSERT = 277 
SDLK_HOME = 278 
SDLK_END = 279 
SDLK_PAGEUP = 280 
SDLK_PAGEDOWN = 281 
SDLK_F1 = 282 
SDLK_F2 = 283 
SDLK_F3 = 284 
SDLK_F4 = 285 
SDLK_F5 = 286 
SDLK_F6 = 287 
SDLK_F7 = 288 
SDLK_F8 = 289 
SDLK_F9 = 290 
SDLK_F10 = 291 
SDLK_F11 = 292 
SDLK_F12 = 293 
SDLK_F13 = 294 
SDLK_F14 = 295 
SDLK_F15 = 296 
SDLK_NUMLOCK = 300 
SDLK_CAPSLOCK = 301 
SDLK_SCROLLOCK = 302 
SDLK_RSHIFT = 303 
SDLK_LSHIFT = 304 
SDLK_RCTRL = 305 
SDLK_LCTRL = 306 
SDLK_RALT = 307 
SDLK_LALT = 308 
SDLK_RMETA = 309 
SDLK_LMETA = 310 
SDLK_LSUPER = 311 
SDLK_RSUPER = 312 
SDLK_MODE = 313 
SDLK_COMPOSE = 314 
SDLK_HELP = 315 
SDLK_PRINT = 316 
SDLK_SYSREQ = 317 
SDLK_BREAK = 318 
SDLK_MENU = 319 
SDLK_POWER = 320 
SDLK_EURO = 321 
SDLK_UNDO = 322 
SDLK_LAST = 323 

KMOD_NONE = 0 
KMOD_LSHIFT = 1 
KMOD_RSHIFT = 2 
KMOD_LCTRL = 64 
KMOD_RCTRL = 128 
KMOD_LALT = 256 
KMOD_RALT = 512 
KMOD_LMETA = 1024 
KMOD_RMETA = 2048 
KMOD_NUM = 4096 
KMOD_CAPS = 8192 
KMOD_MODE = 16384 
KMOD_RESERVED = 32768 

SDL_AUDIO_STOPPED = 0 
SDL_AUDIO_PLAYING = 1 
SDL_AUDIO_PAUSED = 2 

CD_TRAYEMPTY = 0 
CD_STOPPED = 1 
CD_PLAYING = 2 
CD_PAUSED = 3 
CD_ERROR = -1 

## simple enums ##
RPYTHONIC_GLOBAL_ENUMS = { 
 "SDL_ENOMEM" : 0,  "SDL_EFREAD" : 1,  "SDL_EFWRITE" : 2,  "SDL_EFSEEK" : 3,  "SDL_UNSUPPORTED" : 4,  "SDL_LASTERROR" : 5, 
 "SDL_FALSE" : 0,  "SDL_TRUE" : 1, 
 "DUMMY_ENUM_VALUE" : 0, 
 "ISupper" : 0,  "ISlower" : 1,  "ISalpha" : 2,  "ISdigit" : 3,  "ISxdigit" : 4,  "ISspace" : 5,  "ISprint" : 6,  "ISgraph" : 7,  "ISblank" : 8,  "IScntrl" : 9,  "ISpunct" : 10,  "ISalnum" : 11, 
 "SDL_ADDEVENT" : 0,  "SDL_PEEKEVENT" : 1,  "SDL_GETEVENT" : 2, 
 "SDL_NOEVENT" : 0,  "SDL_ACTIVEEVENT" : 1,  "SDL_KEYDOWN" : 2,  "SDL_KEYUP" : 3,  "SDL_MOUSEMOTION" : 4,  "SDL_MOUSEBUTTONDOWN" : 5,  "SDL_MOUSEBUTTONUP" : 6,  "SDL_JOYAXISMOTION" : 7,  "SDL_JOYBALLMOTION" : 8,  "SDL_JOYHATMOTION" : 9,  "SDL_JOYBUTTONDOWN" : 10,  "SDL_JOYBUTTONUP" : 11,  "SDL_QUIT" : 12,  "SDL_SYSWMEVENT" : 13,  "SDL_EVENT_RESERVEDA" : 14,  "SDL_EVENT_RESERVEDB" : 15,  "SDL_VIDEORESIZE" : 16,  "SDL_VIDEOEXPOSE" : 17,  "SDL_EVENT_RESERVED2" : 18,  "SDL_EVENT_RESERVED3" : 19,  "SDL_EVENT_RESERVED4" : 20,  "SDL_EVENT_RESERVED5" : 21,  "SDL_EVENT_RESERVED6" : 22,  "SDL_EVENT_RESERVED7" : 23,  "SDL_USEREVENT" : 24,  "SDL_NUMEVENTS" : 32, 
 "SDL_ACTIVEEVENTMASK" : 2,  "SDL_KEYDOWNMASK" : 4,  "SDL_KEYUPMASK" : 8,  "SDL_KEYEVENTMASK" : 12,  "SDL_MOUSEMOTIONMASK" : 16,  "SDL_MOUSEBUTTONDOWNMASK" : 32,  "SDL_MOUSEBUTTONUPMASK" : 64,  "SDL_MOUSEEVENTMASK" : 112,  "SDL_JOYAXISMOTIONMASK" : 128,  "SDL_JOYBALLMOTIONMASK" : 256,  "SDL_JOYHATMOTIONMASK" : 512,  "SDL_JOYBUTTONDOWNMASK" : 1024,  "SDL_JOYBUTTONUPMASK" : 2048,  "SDL_JOYEVENTMASK" : 3968,  "SDL_VIDEORESIZEMASK" : 65536,  "SDL_VIDEOEXPOSEMASK" : 131072,  "SDL_QUITMASK" : 4096,  "SDL_SYSWMEVENTMASK" : 8192, 
 "SDL_GRAB_QUERY" : -1,  "SDL_GRAB_OFF" : 0,  "SDL_GRAB_ON" : 1,  "SDL_GRAB_FULLSCREEN" : 2, 
 "SDL_GL_RED_SIZE" : 0,  "SDL_GL_GREEN_SIZE" : 1,  "SDL_GL_BLUE_SIZE" : 2,  "SDL_GL_ALPHA_SIZE" : 3,  "SDL_GL_BUFFER_SIZE" : 4,  "SDL_GL_DOUBLEBUFFER" : 5,  "SDL_GL_DEPTH_SIZE" : 6,  "SDL_GL_STENCIL_SIZE" : 7,  "SDL_GL_ACCUM_RED_SIZE" : 8,  "SDL_GL_ACCUM_GREEN_SIZE" : 9,  "SDL_GL_ACCUM_BLUE_SIZE" : 10,  "SDL_GL_ACCUM_ALPHA_SIZE" : 11,  "SDL_GL_STEREO" : 12,  "SDL_GL_MULTISAMPLEBUFFERS" : 13,  "SDL_GL_MULTISAMPLESAMPLES" : 14,  "SDL_GL_ACCELERATED_VISUAL" : 15,  "SDL_GL_SWAP_CONTROL" : 16, 
 "SDLK_UNKNOWN" : 0,  "SDLK_FIRST" : 0,  "SDLK_BACKSPACE" : 8,  "SDLK_TAB" : 9,  "SDLK_CLEAR" : 12,  "SDLK_RETURN" : 13,  "SDLK_PAUSE" : 19,  "SDLK_ESCAPE" : 27,  "SDLK_SPACE" : 32,  "SDLK_EXCLAIM" : 33,  "SDLK_QUOTEDBL" : 34,  "SDLK_HASH" : 35,  "SDLK_DOLLAR" : 36,  "SDLK_AMPERSAND" : 38,  "SDLK_QUOTE" : 39,  "SDLK_LEFTPAREN" : 40,  "SDLK_RIGHTPAREN" : 41,  "SDLK_ASTERISK" : 42,  "SDLK_PLUS" : 43,  "SDLK_COMMA" : 44,  "SDLK_MINUS" : 45,  "SDLK_PERIOD" : 46,  "SDLK_SLASH" : 47,  "SDLK_0" : 48,  "SDLK_1" : 49,  "SDLK_2" : 50,  "SDLK_3" : 51,  "SDLK_4" : 52,  "SDLK_5" : 53,  "SDLK_6" : 54,  "SDLK_7" : 55,  "SDLK_8" : 56,  "SDLK_9" : 57,  "SDLK_COLON" : 58,  "SDLK_SEMICOLON" : 59,  "SDLK_LESS" : 60,  "SDLK_EQUALS" : 61,  "SDLK_GREATER" : 62,  "SDLK_QUESTION" : 63,  "SDLK_AT" : 64,  "SDLK_LEFTBRACKET" : 91,  "SDLK_BACKSLASH" : 92,  "SDLK_RIGHTBRACKET" : 93,  "SDLK_CARET" : 94,  "SDLK_UNDERSCORE" : 95,  "SDLK_BACKQUOTE" : 96,  "SDLK_a" : 97,  "SDLK_b" : 98,  "SDLK_c" : 99,  "SDLK_d" : 100,  "SDLK_e" : 101,  "SDLK_f" : 102,  "SDLK_g" : 103,  "SDLK_h" : 104,  "SDLK_i" : 105,  "SDLK_j" : 106,  "SDLK_k" : 107,  "SDLK_l" : 108,  "SDLK_m" : 109,  "SDLK_n" : 110,  "SDLK_o" : 111,  "SDLK_p" : 112,  "SDLK_q" : 113,  "SDLK_r" : 114,  "SDLK_s" : 115,  "SDLK_t" : 116,  "SDLK_u" : 117,  "SDLK_v" : 118,  "SDLK_w" : 119,  "SDLK_x" : 120,  "SDLK_y" : 121,  "SDLK_z" : 122,  "SDLK_DELETE" : 127,  "SDLK_WORLD_0" : 160,  "SDLK_WORLD_1" : 161,  "SDLK_WORLD_2" : 162,  "SDLK_WORLD_3" : 163,  "SDLK_WORLD_4" : 164,  "SDLK_WORLD_5" : 165,  "SDLK_WORLD_6" : 166,  "SDLK_WORLD_7" : 167,  "SDLK_WORLD_8" : 168,  "SDLK_WORLD_9" : 169,  "SDLK_WORLD_10" : 170,  "SDLK_WORLD_11" : 171,  "SDLK_WORLD_12" : 172,  "SDLK_WORLD_13" : 173,  "SDLK_WORLD_14" : 174,  "SDLK_WORLD_15" : 175,  "SDLK_WORLD_16" : 176,  "SDLK_WORLD_17" : 177,  "SDLK_WORLD_18" : 178,  "SDLK_WORLD_19" : 179,  "SDLK_WORLD_20" : 180,  "SDLK_WORLD_21" : 181,  "SDLK_WORLD_22" : 182,  "SDLK_WORLD_23" : 183,  "SDLK_WORLD_24" : 184,  "SDLK_WORLD_25" : 185,  "SDLK_WORLD_26" : 186,  "SDLK_WORLD_27" : 187,  "SDLK_WORLD_28" : 188,  "SDLK_WORLD_29" : 189,  "SDLK_WORLD_30" : 190,  "SDLK_WORLD_31" : 191,  "SDLK_WORLD_32" : 192,  "SDLK_WORLD_33" : 193,  "SDLK_WORLD_34" : 194,  "SDLK_WORLD_35" : 195,  "SDLK_WORLD_36" : 196,  "SDLK_WORLD_37" : 197,  "SDLK_WORLD_38" : 198,  "SDLK_WORLD_39" : 199,  "SDLK_WORLD_40" : 200,  "SDLK_WORLD_41" : 201,  "SDLK_WORLD_42" : 202,  "SDLK_WORLD_43" : 203,  "SDLK_WORLD_44" : 204,  "SDLK_WORLD_45" : 205,  "SDLK_WORLD_46" : 206,  "SDLK_WORLD_47" : 207,  "SDLK_WORLD_48" : 208,  "SDLK_WORLD_49" : 209,  "SDLK_WORLD_50" : 210,  "SDLK_WORLD_51" : 211,  "SDLK_WORLD_52" : 212,  "SDLK_WORLD_53" : 213,  "SDLK_WORLD_54" : 214,  "SDLK_WORLD_55" : 215,  "SDLK_WORLD_56" : 216,  "SDLK_WORLD_57" : 217,  "SDLK_WORLD_58" : 218,  "SDLK_WORLD_59" : 219,  "SDLK_WORLD_60" : 220,  "SDLK_WORLD_61" : 221,  "SDLK_WORLD_62" : 222,  "SDLK_WORLD_63" : 223,  "SDLK_WORLD_64" : 224,  "SDLK_WORLD_65" : 225,  "SDLK_WORLD_66" : 226,  "SDLK_WORLD_67" : 227,  "SDLK_WORLD_68" : 228,  "SDLK_WORLD_69" : 229,  "SDLK_WORLD_70" : 230,  "SDLK_WORLD_71" : 231,  "SDLK_WORLD_72" : 232,  "SDLK_WORLD_73" : 233,  "SDLK_WORLD_74" : 234,  "SDLK_WORLD_75" : 235,  "SDLK_WORLD_76" : 236,  "SDLK_WORLD_77" : 237,  "SDLK_WORLD_78" : 238,  "SDLK_WORLD_79" : 239,  "SDLK_WORLD_80" : 240,  "SDLK_WORLD_81" : 241,  "SDLK_WORLD_82" : 242,  "SDLK_WORLD_83" : 243,  "SDLK_WORLD_84" : 244,  "SDLK_WORLD_85" : 245,  "SDLK_WORLD_86" : 246,  "SDLK_WORLD_87" : 247,  "SDLK_WORLD_88" : 248,  "SDLK_WORLD_89" : 249,  "SDLK_WORLD_90" : 250,  "SDLK_WORLD_91" : 251,  "SDLK_WORLD_92" : 252,  "SDLK_WORLD_93" : 253,  "SDLK_WORLD_94" : 254,  "SDLK_WORLD_95" : 255,  "SDLK_KP0" : 256,  "SDLK_KP1" : 257,  "SDLK_KP2" : 258,  "SDLK_KP3" : 259,  "SDLK_KP4" : 260,  "SDLK_KP5" : 261,  "SDLK_KP6" : 262,  "SDLK_KP7" : 263,  "SDLK_KP8" : 264,  "SDLK_KP9" : 265,  "SDLK_KP_PERIOD" : 266,  "SDLK_KP_DIVIDE" : 267,  "SDLK_KP_MULTIPLY" : 268,  "SDLK_KP_MINUS" : 269,  "SDLK_KP_PLUS" : 270,  "SDLK_KP_ENTER" : 271,  "SDLK_KP_EQUALS" : 272,  "SDLK_UP" : 273,  "SDLK_DOWN" : 274,  "SDLK_RIGHT" : 275,  "SDLK_LEFT" : 276,  "SDLK_INSERT" : 277,  "SDLK_HOME" : 278,  "SDLK_END" : 279,  "SDLK_PAGEUP" : 280,  "SDLK_PAGEDOWN" : 281,  "SDLK_F1" : 282,  "SDLK_F2" : 283,  "SDLK_F3" : 284,  "SDLK_F4" : 285,  "SDLK_F5" : 286,  "SDLK_F6" : 287,  "SDLK_F7" : 288,  "SDLK_F8" : 289,  "SDLK_F9" : 290,  "SDLK_F10" : 291,  "SDLK_F11" : 292,  "SDLK_F12" : 293,  "SDLK_F13" : 294,  "SDLK_F14" : 295,  "SDLK_F15" : 296,  "SDLK_NUMLOCK" : 300,  "SDLK_CAPSLOCK" : 301,  "SDLK_SCROLLOCK" : 302,  "SDLK_RSHIFT" : 303,  "SDLK_LSHIFT" : 304,  "SDLK_RCTRL" : 305,  "SDLK_LCTRL" : 306,  "SDLK_RALT" : 307,  "SDLK_LALT" : 308,  "SDLK_RMETA" : 309,  "SDLK_LMETA" : 310,  "SDLK_LSUPER" : 311,  "SDLK_RSUPER" : 312,  "SDLK_MODE" : 313,  "SDLK_COMPOSE" : 314,  "SDLK_HELP" : 315,  "SDLK_PRINT" : 316,  "SDLK_SYSREQ" : 317,  "SDLK_BREAK" : 318,  "SDLK_MENU" : 319,  "SDLK_POWER" : 320,  "SDLK_EURO" : 321,  "SDLK_UNDO" : 322,  "SDLK_LAST" : 323, 
 "KMOD_NONE" : 0,  "KMOD_LSHIFT" : 1,  "KMOD_RSHIFT" : 2,  "KMOD_LCTRL" : 64,  "KMOD_RCTRL" : 128,  "KMOD_LALT" : 256,  "KMOD_RALT" : 512,  "KMOD_LMETA" : 1024,  "KMOD_RMETA" : 2048,  "KMOD_NUM" : 4096,  "KMOD_CAPS" : 8192,  "KMOD_MODE" : 16384,  "KMOD_RESERVED" : 32768, 
 "SDL_AUDIO_STOPPED" : 0,  "SDL_AUDIO_PLAYING" : 1,  "SDL_AUDIO_PAUSED" : 2, 
 "CD_TRAYEMPTY" : 0,  "CD_STOPPED" : 1,  "CD_PLAYING" : 2,  "CD_PAUSED" : 3,  "CD_ERROR" : -1, 

}
class __fsid_t(_rpythonic_struct_): _array_wrapper_ = True
class __sigset_t(_rpythonic_struct_): _array_wrapper_ = True
class timespec(_rpythonic_struct_): pass
class timeval(_rpythonic_struct_): pass
class fd_set(_rpythonic_struct_): _array_wrapper_ = True
class pthread_attr_t(ctypes.Union): pass
class __pthread_internal_slist(_rpythonic_struct_): pass
class pthread_mutex_t(ctypes.Union): pass
class __pthread_mutex_s(_rpythonic_struct_): pass
class pthread_mutexattr_t(ctypes.Union): pass
class pthread_cond_t(ctypes.Union): pass
class pthread_condattr_t(ctypes.Union): pass
class pthread_rwlock_t(ctypes.Union): pass
class __data(_rpythonic_struct_): pass
class pthread_rwlockattr_t(ctypes.Union): pass
class pthread_barrier_t(ctypes.Union): pass
class pthread_barrierattr_t(ctypes.Union): pass
class __mbstate_t(_rpythonic_struct_): pass
class __value(ctypes.Union): pass
class _G_fpos_t(_rpythonic_struct_): pass
class _G_fpos64_t(_rpythonic_struct_): pass
class _IO_jump_t(_rpythonic_struct_): pass
class _IO_marker(_rpythonic_struct_): pass
class _IO_FILE(_rpythonic_struct_): _array_wrapper_ = True
class _IO_FILE_plus(_rpythonic_struct_): pass
class wait(ctypes.Union): pass
class __wait_terminated(_rpythonic_struct_): pass
class __wait_stopped(_rpythonic_struct_): pass
class __WAIT_STATUS(ctypes.Union): pass
class div_t(_rpythonic_struct_): pass
class ldiv_t(_rpythonic_struct_): pass
class lldiv_t(_rpythonic_struct_): pass
class random_data(_rpythonic_struct_): pass
class drand48_data(_rpythonic_struct_): _array_wrapper_ = True
class __locale_struct(_rpythonic_struct_): _array_wrapper_ = True
class __locale_data(_rpythonic_struct_): pass
class imaxdiv_t(_rpythonic_struct_): pass
class SDL_mutex(_rpythonic_struct_): pass
class SDL_semaphore(_rpythonic_struct_): pass
class SDL_cond(_rpythonic_struct_): pass
class SDL_Thread(_rpythonic_struct_): pass
class SDL_RWops(_rpythonic_struct_): pass
class hidden(ctypes.Union): pass
class stdio(_rpythonic_struct_): pass
class mem(_rpythonic_struct_): pass
class unknown(_rpythonic_struct_): pass
class SDL_AudioSpec(_rpythonic_struct_): pass
class SDL_AudioCVT(_rpythonic_struct_): _array_wrapper_ = True
class SDL_CDtrack(_rpythonic_struct_): pass
class SDL_CD(_rpythonic_struct_): _array_wrapper_ = True
class SDL_keysym(_rpythonic_struct_): pass
class SDL_Rect(_rpythonic_struct_): pass
class SDL_Color(_rpythonic_struct_): pass
class SDL_Palette(_rpythonic_struct_): pass
class SDL_PixelFormat(_rpythonic_struct_): pass
class SDL_Surface(_rpythonic_struct_): pass
class private_hwdata(_rpythonic_struct_): pass
class SDL_BlitMap(_rpythonic_struct_): pass
class SDL_VideoInfo(_rpythonic_struct_): pass
class SDL_Overlay(_rpythonic_struct_): pass
class private_yuvhwfuncs(_rpythonic_struct_): pass
class private_yuvhwdata(_rpythonic_struct_): pass
class WMcursor(_rpythonic_struct_): pass
class SDL_Cursor(_rpythonic_struct_): _array_wrapper_ = True
class _SDL_Joystick(_rpythonic_struct_): pass
class SDL_ActiveEvent(_rpythonic_struct_): pass
class SDL_KeyboardEvent(_rpythonic_struct_): pass
class SDL_MouseMotionEvent(_rpythonic_struct_): pass
class SDL_MouseButtonEvent(_rpythonic_struct_): pass
class SDL_JoyAxisEvent(_rpythonic_struct_): pass
class SDL_JoyBallEvent(_rpythonic_struct_): pass
class SDL_JoyHatEvent(_rpythonic_struct_): pass
class SDL_JoyButtonEvent(_rpythonic_struct_): pass
class SDL_ResizeEvent(_rpythonic_struct_): pass
class SDL_ExposeEvent(_rpythonic_struct_): pass
class SDL_QuitEvent(_rpythonic_struct_): pass
class SDL_UserEvent(_rpythonic_struct_): pass
class SDL_SysWMmsg(_rpythonic_struct_): pass
class SDL_SysWMEvent(_rpythonic_struct_): pass
class SDL_Event(ctypes.Union): pass
class _SDL_TimerID(_rpythonic_struct_): pass
class SDL_version(_rpythonic_struct_): pass
## union and structures ##
__freeze_rpythonic_struct( __fsid_t, [
	( "__val", ( ctypes.c_int * 2 ) ),
])

__freeze_rpythonic_struct( __sigset_t, [
	( "__val", ctypes.c_uint64 ),
])

__freeze_rpythonic_struct( timespec, [
	( "tv_sec", ctypes.c_int64 ),
	( "tv_nsec", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( timeval, [
	( "tv_sec", ctypes.c_int64 ),
	( "tv_usec", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( fd_set, [
	( "__fds_bits", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_attr_t, [
	( "__size", ( ctypes.c_char * 36 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( __pthread_internal_slist, [
	( "__next", ctypes.POINTER(__pthread_internal_slist) ),
])

__freeze_rpythonic_struct( __pthread_mutex_s, [
	( "__lock", ctypes.c_int ),
	( "__count", ctypes.c_uint ),
	( "__owner", ctypes.c_int ),
	( "__kind", ctypes.c_int ),
	( "__nusers", ctypes.c_uint ),
	#opaque-warning# <rpythonic.rpythonic.SomeThing object at 0xc63c70c>
])

__freeze_rpythonic_struct( pthread_mutex_t, [
	( "__data", __pthread_mutex_s ),
	( "__size", ( ctypes.c_char * 24 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_mutexattr_t, [
	( "__size", ( ctypes.c_char * 4 ) ),
	( "__align", ctypes.c_int ),
])

__freeze_rpythonic_struct( __data, [
	( "__lock", ctypes.c_int ),
	( "__nr_readers", ctypes.c_uint ),
	( "__readers_wakeup", ctypes.c_uint ),
	( "__writer_wakeup", ctypes.c_uint ),
	( "__nr_readers_queued", ctypes.c_uint ),
	( "__nr_writers_queued", ctypes.c_uint ),
	( "__flags", ctypes.c_ubyte ),
	( "__shared", ctypes.c_ubyte ),
	( "__pad1", ctypes.c_ubyte ),
	( "__pad2", ctypes.c_ubyte ),
	( "__writer", ctypes.c_int ),
])

__freeze_rpythonic_struct( pthread_cond_t, [
	( "__data", __data ),
	( "__size", ( ctypes.c_char * 48 ) ),
	( "__align", ctypes.c_longlong ),
])

__freeze_rpythonic_struct( pthread_condattr_t, [
	( "__size", ( ctypes.c_char * 4 ) ),
	( "__align", ctypes.c_int ),
])

__freeze_rpythonic_struct( pthread_rwlock_t, [
	( "__data", __data ),
	( "__size", ( ctypes.c_char * 32 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_rwlockattr_t, [
	( "__size", ( ctypes.c_char * 8 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_barrier_t, [
	( "__size", ( ctypes.c_char * 20 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_barrierattr_t, [
	( "__size", ( ctypes.c_char * 4 ) ),
	( "__align", ctypes.c_int ),
])

__freeze_rpythonic_struct( __value, [
	( "__wch", ctypes.c_uint ),
	( "__wchb", ( ctypes.c_char * 4 ) ),
])

__freeze_rpythonic_struct( __mbstate_t, [
	( "__count", ctypes.c_int ),
	( "__value", __value ),
])

__freeze_rpythonic_struct( _G_fpos_t, [
	( "__pos", ctypes.c_int64 ),
	( "__state", __mbstate_t ),
])

__freeze_rpythonic_struct( _G_fpos64_t, [
	( "__pos", ctypes.c_longlong ),
	( "__state", __mbstate_t ),
])

__freeze_rpythonic_struct( _IO_jump_t, [
])

__freeze_rpythonic_struct( _IO_marker, [
	( "_next", ctypes.POINTER(_IO_marker) ),
	( "_sbuf", ctypes.POINTER(_IO_FILE) ),
	( "_pos", ctypes.c_int ),
])

__freeze_rpythonic_struct( _IO_FILE, [
	( "_flags", ctypes.c_int ),
	( "_IO_read_ptr", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_read_end", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_read_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_write_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_write_ptr", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_write_end", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_buf_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_buf_end", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_save_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_backup_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_save_end", ctypes.POINTER(ctypes.c_char) ),
	( "_markers", ctypes.POINTER(_IO_marker) ),
	( "_chain", ctypes.POINTER(_IO_FILE) ),
	( "_fileno", ctypes.c_int ),
	( "_flags2", ctypes.c_int ),
	( "_old_offset", ctypes.c_int64 ),
	( "_cur_column", ctypes.c_ushort ),
	( "_vtable_offset", ctypes.c_char ),
	( "_shortbuf", ( ctypes.c_char * 1 ) ),
	( "_lock", ctypes.POINTER(ctypes.c_void_p) ),
	( "_offset", ctypes.c_longlong ),
	( "__pad1", ctypes.POINTER(ctypes.c_void_p) ),
	( "__pad2", ctypes.POINTER(ctypes.c_void_p) ),
	( "__pad3", ctypes.POINTER(ctypes.c_void_p) ),
	( "__pad4", ctypes.POINTER(ctypes.c_void_p) ),
	( "__pad5", ctypes.c_uint ),
	( "_mode", ctypes.c_int ),
	( "_unused2", ctypes.c_char ),
])

__freeze_rpythonic_struct( _IO_FILE_plus, [
])

__freeze_rpythonic_struct( __wait_terminated, [
	( "__w_termsig", ctypes.c_uint ),
	( "__w_coredump", ctypes.c_uint ),
	( "__w_retcode", ctypes.c_uint ),
	#opaque-warning# <rpythonic.rpythonic.SomeThing object at 0xcf2998c>
])

__freeze_rpythonic_struct( __wait_stopped, [
	( "__w_stopval", ctypes.c_uint ),
	( "__w_stopsig", ctypes.c_uint ),
	#opaque-warning# <rpythonic.rpythonic.SomeThing object at 0xcf29acc>
])

__freeze_rpythonic_struct( wait, [
	( "w_status", ctypes.c_int ),
	( "__wait_terminated", __wait_terminated ),
	( "__wait_stopped", __wait_stopped ),
])

__freeze_rpythonic_struct( __WAIT_STATUS, [
	( "__uptr", ctypes.POINTER(wait) ),
	( "__iptr", ctypes.POINTER(ctypes.c_int) ),
])

__freeze_rpythonic_struct( div_t, [
	( "quot", ctypes.c_int ),
	( "rem", ctypes.c_int ),
])

__freeze_rpythonic_struct( ldiv_t, [
	( "quot", ctypes.c_int64 ),
	( "rem", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( lldiv_t, [
	( "quot", ctypes.c_longlong ),
	( "rem", ctypes.c_longlong ),
])

__freeze_rpythonic_struct( random_data, [
	( "fptr", ctypes.POINTER(ctypes.c_int32) ),
	( "rptr", ctypes.POINTER(ctypes.c_int32) ),
	( "state", ctypes.POINTER(ctypes.c_int32) ),
	( "rand_type", ctypes.c_int ),
	( "rand_deg", ctypes.c_int ),
	( "rand_sep", ctypes.c_int ),
	( "end_ptr", ctypes.POINTER(ctypes.c_int32) ),
])

__freeze_rpythonic_struct( drand48_data, [
	( "__x", ( ctypes.c_uint16 * 3 ) ),
	( "__old_x", ( ctypes.c_uint16 * 3 ) ),
	( "__c", ctypes.c_uint16 ),
	( "__init", ctypes.c_uint16 ),
	( "__a", ctypes.c_ulonglong ),
])

__freeze_rpythonic_struct( __locale_data, [
])

__freeze_rpythonic_struct( __locale_struct, [
	( "__locales", ctypes.POINTER(( __locale_data * 13 )) ),
	( "__ctype_b", ctypes.POINTER(ctypes.c_uint16) ),
	( "__ctype_tolower", ctypes.POINTER(ctypes.c_int) ),
	( "__ctype_toupper", ctypes.POINTER(ctypes.c_int) ),
	( "__names", ctypes.POINTER(( ctypes.c_char * 13 )) ),
])

__freeze_rpythonic_struct( imaxdiv_t, [
	( "quot", ctypes.c_longlong ),
	( "rem", ctypes.c_longlong ),
])

__freeze_rpythonic_struct( SDL_mutex, [
])

__freeze_rpythonic_struct( SDL_semaphore, [
])

__freeze_rpythonic_struct( SDL_cond, [
])

__freeze_rpythonic_struct( SDL_Thread, [
])

__freeze_rpythonic_struct( stdio, [
	( "autoclose", ctypes.c_int ),
	( "fp", ctypes.POINTER(_IO_FILE) ),
])

__freeze_rpythonic_struct( mem, [
	( "base", ctypes.POINTER(ctypes.c_uint8) ),
	( "here", ctypes.POINTER(ctypes.c_uint8) ),
	( "stop", ctypes.POINTER(ctypes.c_uint8) ),
])

__freeze_rpythonic_struct( unknown, [
	( "data1", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( hidden, [
	( "stdio", stdio ),
	( "mem", mem ),
	( "unknown", unknown ),
])

__freeze_rpythonic_struct( SDL_RWops, [
	( "seek", ctypes.c_void_p ),
	( "read", ctypes.c_void_p ),
	( "write", ctypes.c_void_p ),
	( "close", ctypes.c_void_p ),
	( "C_type", ctypes.c_uint32 ),
	( "hidden", hidden ),
])

__freeze_rpythonic_struct( SDL_AudioSpec, [
	( "freq", ctypes.c_int ),
	( "format", ctypes.c_uint16 ),
	( "channels", ctypes.c_uint8 ),
	( "silence", ctypes.c_uint8 ),
	( "samples", ctypes.c_uint16 ),
	( "padding", ctypes.c_uint16 ),
	( "size", ctypes.c_uint32 ),
	( "callback", ctypes.c_void_p ),
	( "userdata", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( SDL_AudioCVT, [
	( "needed", ctypes.c_int ),
	( "src_format", ctypes.c_uint16 ),
	( "dst_format", ctypes.c_uint16 ),
	( "rate_incr", ctypes.c_double ),
	( "buf", ctypes.POINTER(ctypes.c_uint8) ),
	( "C_len", ctypes.c_int ),
	( "len_cvt", ctypes.c_int ),
	( "len_mult", ctypes.c_int ),
	( "len_ratio", ctypes.c_double ),
	( "filters", ( ctypes.c_void_p * 10 ) ),
	( "filter_index", ctypes.c_int ),
])

__freeze_rpythonic_struct( SDL_CDtrack, [
	( "C_id", ctypes.c_uint8 ),
	( "C_type", ctypes.c_uint8 ),
	( "unused", ctypes.c_uint16 ),
	( "length", ctypes.c_uint32 ),
	( "offset", ctypes.c_uint32 ),
])

__freeze_rpythonic_struct( SDL_CD, [
	( "C_id", ctypes.c_int ),
	( "status", ctypes.c_int ),
	( "numtracks", ctypes.c_int ),
	( "cur_track", ctypes.c_int ),
	( "cur_frame", ctypes.c_int ),
	( "track", ( SDL_CDtrack * 154 ) ),
])

__freeze_rpythonic_struct( SDL_keysym, [
	( "scancode", ctypes.c_uint8 ),
	( "sym", ctypes.c_int ),
	( "mod", ctypes.c_int ),
	( "unicode", ctypes.c_uint16 ),
])

__freeze_rpythonic_struct( SDL_Rect, [
	( "x", ctypes.c_int16 ),
	( "y", ctypes.c_int16 ),
	( "w", ctypes.c_uint16 ),
	( "h", ctypes.c_uint16 ),
])

__freeze_rpythonic_struct( SDL_Color, [
	( "r", ctypes.c_uint8 ),
	( "g", ctypes.c_uint8 ),
	( "b", ctypes.c_uint8 ),
	( "unused", ctypes.c_uint8 ),
])

__freeze_rpythonic_struct( SDL_Palette, [
	( "ncolors", ctypes.c_int ),
	( "colors", ctypes.POINTER(SDL_Color) ),
])

__freeze_rpythonic_struct( SDL_PixelFormat, [
	( "palette", ctypes.POINTER(SDL_Palette) ),
	( "BitsPerPixel", ctypes.c_uint8 ),
	( "BytesPerPixel", ctypes.c_uint8 ),
	( "Rloss", ctypes.c_uint8 ),
	( "Gloss", ctypes.c_uint8 ),
	( "Bloss", ctypes.c_uint8 ),
	( "Aloss", ctypes.c_uint8 ),
	( "Rshift", ctypes.c_uint8 ),
	( "Gshift", ctypes.c_uint8 ),
	( "Bshift", ctypes.c_uint8 ),
	( "Ashift", ctypes.c_uint8 ),
	( "Rmask", ctypes.c_uint32 ),
	( "Gmask", ctypes.c_uint32 ),
	( "Bmask", ctypes.c_uint32 ),
	( "Amask", ctypes.c_uint32 ),
	( "colorkey", ctypes.c_uint32 ),
	( "alpha", ctypes.c_uint8 ),
])

__freeze_rpythonic_struct( private_hwdata, [
])

__freeze_rpythonic_struct( SDL_BlitMap, [
])

__freeze_rpythonic_struct( SDL_Surface, [
	( "flags", ctypes.c_uint32 ),
	( "format", ctypes.POINTER(SDL_PixelFormat) ),
	( "w", ctypes.c_int ),
	( "h", ctypes.c_int ),
	( "pitch", ctypes.c_uint16 ),
	( "pixels", ctypes.POINTER(ctypes.c_void_p) ),
	( "offset", ctypes.c_int ),
	( "hwdata", ctypes.POINTER(private_hwdata) ),
	( "clip_rect", SDL_Rect ),
	( "unused1", ctypes.c_uint32 ),
	( "locked", ctypes.c_uint32 ),
	( "map", ctypes.POINTER(SDL_BlitMap) ),
	( "format_version", ctypes.c_uint ),
	( "refcount", ctypes.c_int ),
])

__freeze_rpythonic_struct( SDL_VideoInfo, [
	( "hw_available", ctypes.c_uint32 ),
	( "wm_available", ctypes.c_uint32 ),
	( "UnusedBits1", ctypes.c_uint32 ),
	( "UnusedBits2", ctypes.c_uint32 ),
	( "blit_hw", ctypes.c_uint32 ),
	( "blit_hw_CC", ctypes.c_uint32 ),
	( "blit_hw_A", ctypes.c_uint32 ),
	( "blit_sw", ctypes.c_uint32 ),
	( "blit_sw_CC", ctypes.c_uint32 ),
	( "blit_sw_A", ctypes.c_uint32 ),
	( "blit_fill", ctypes.c_uint32 ),
	( "UnusedBits3", ctypes.c_uint32 ),
	( "video_mem", ctypes.c_uint32 ),
	( "vfmt", ctypes.POINTER(SDL_PixelFormat) ),
	( "current_w", ctypes.c_int ),
	( "current_h", ctypes.c_int ),
])

__freeze_rpythonic_struct( private_yuvhwfuncs, [
])

__freeze_rpythonic_struct( private_yuvhwdata, [
])

__freeze_rpythonic_struct( SDL_Overlay, [
	( "format", ctypes.c_uint32 ),
	( "w", ctypes.c_int ),
	( "h", ctypes.c_int ),
	( "planes", ctypes.c_int ),
	( "pitches", ctypes.POINTER(ctypes.c_uint16) ),
	( "pixels", ctypes.POINTER(ctypes.POINTER(ctypes.c_uint8)) ),
	( "hwfuncs", ctypes.POINTER(private_yuvhwfuncs) ),
	( "hwdata", ctypes.POINTER(private_yuvhwdata) ),
	( "hw_overlay", ctypes.c_uint32 ),
	( "UnusedBits", ctypes.c_uint32 ),
])

__freeze_rpythonic_struct( WMcursor, [
])

__freeze_rpythonic_struct( SDL_Cursor, [
	( "area", SDL_Rect ),
	( "hot_x", ctypes.c_int16 ),
	( "hot_y", ctypes.c_int16 ),
	( "data", ctypes.POINTER(ctypes.c_uint8) ),
	( "mask", ctypes.POINTER(ctypes.c_uint8) ),
	( "save", ctypes.POINTER(( ctypes.c_uint8 * 2 )) ),
	( "wm_cursor", ctypes.POINTER(WMcursor) ),
])

__freeze_rpythonic_struct( _SDL_Joystick, [
])

__freeze_rpythonic_struct( SDL_ActiveEvent, [
	( "C_type", ctypes.c_uint8 ),
	( "gain", ctypes.c_uint8 ),
	( "state", ctypes.c_uint8 ),
])

__freeze_rpythonic_struct( SDL_KeyboardEvent, [
	( "C_type", ctypes.c_uint8 ),
	( "which", ctypes.c_uint8 ),
	( "state", ctypes.c_uint8 ),
	( "keysym", SDL_keysym ),
])

__freeze_rpythonic_struct( SDL_MouseMotionEvent, [
	( "C_type", ctypes.c_uint8 ),
	( "which", ctypes.c_uint8 ),
	( "state", ctypes.c_uint8 ),
	( "x", ctypes.c_uint16 ),
	( "y", ctypes.c_uint16 ),
	( "xrel", ctypes.c_int16 ),
	( "yrel", ctypes.c_int16 ),
])

__freeze_rpythonic_struct( SDL_MouseButtonEvent, [
	( "C_type", ctypes.c_uint8 ),
	( "which", ctypes.c_uint8 ),
	( "button", ctypes.c_uint8 ),
	( "state", ctypes.c_uint8 ),
	( "x", ctypes.c_uint16 ),
	( "y", ctypes.c_uint16 ),
])

__freeze_rpythonic_struct( SDL_JoyAxisEvent, [
	( "C_type", ctypes.c_uint8 ),
	( "which", ctypes.c_uint8 ),
	( "axis", ctypes.c_uint8 ),
	( "value", ctypes.c_int16 ),
])

__freeze_rpythonic_struct( SDL_JoyBallEvent, [
	( "C_type", ctypes.c_uint8 ),
	( "which", ctypes.c_uint8 ),
	( "ball", ctypes.c_uint8 ),
	( "xrel", ctypes.c_int16 ),
	( "yrel", ctypes.c_int16 ),
])

__freeze_rpythonic_struct( SDL_JoyHatEvent, [
	( "C_type", ctypes.c_uint8 ),
	( "which", ctypes.c_uint8 ),
	( "hat", ctypes.c_uint8 ),
	( "value", ctypes.c_uint8 ),
])

__freeze_rpythonic_struct( SDL_JoyButtonEvent, [
	( "C_type", ctypes.c_uint8 ),
	( "which", ctypes.c_uint8 ),
	( "button", ctypes.c_uint8 ),
	( "state", ctypes.c_uint8 ),
])

__freeze_rpythonic_struct( SDL_ResizeEvent, [
	( "C_type", ctypes.c_uint8 ),
	( "w", ctypes.c_int ),
	( "h", ctypes.c_int ),
])

__freeze_rpythonic_struct( SDL_ExposeEvent, [
	( "C_type", ctypes.c_uint8 ),
])

__freeze_rpythonic_struct( SDL_QuitEvent, [
	( "C_type", ctypes.c_uint8 ),
])

__freeze_rpythonic_struct( SDL_UserEvent, [
	( "C_type", ctypes.c_uint8 ),
	( "code", ctypes.c_int ),
	( "data1", ctypes.POINTER(ctypes.c_void_p) ),
	( "data2", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( SDL_SysWMmsg, [
])

__freeze_rpythonic_struct( SDL_SysWMEvent, [
	( "C_type", ctypes.c_uint8 ),
	( "msg", ctypes.POINTER(SDL_SysWMmsg) ),
])

__freeze_rpythonic_struct( SDL_Event, [
	( "C_type", ctypes.c_uint8 ),
	( "active", SDL_ActiveEvent ),
	( "key", SDL_KeyboardEvent ),
	( "motion", SDL_MouseMotionEvent ),
	( "button", SDL_MouseButtonEvent ),
	( "jaxis", SDL_JoyAxisEvent ),
	( "jball", SDL_JoyBallEvent ),
	( "jhat", SDL_JoyHatEvent ),
	( "jbutton", SDL_JoyButtonEvent ),
	( "resize", SDL_ResizeEvent ),
	( "expose", SDL_ExposeEvent ),
	( "quit", SDL_QuitEvent ),
	( "user", SDL_UserEvent ),
	( "syswm", SDL_SysWMEvent ),
])

__freeze_rpythonic_struct( _SDL_TimerID, [
])

__freeze_rpythonic_struct( SDL_version, [
	( "major", ctypes.c_uint8 ),
	( "minor", ctypes.c_uint8 ),
	( "patch", ctypes.c_uint8 ),
])

## wrapper functions ##
remove = _rpythonic_function_(		"remove", ctypes.c_int, [
	("__filename",		ctypes.POINTER(ctypes.c_char)),] )

rename = _rpythonic_function_(		"rename", ctypes.c_int, [
	("__old",		ctypes.POINTER(ctypes.c_char)),
	("__new",		ctypes.POINTER(ctypes.c_char)),] )

renameat = _rpythonic_function_(		"renameat", ctypes.c_int, [
	("__oldfd",		ctypes.c_int),
	("__old",		ctypes.POINTER(ctypes.c_char)),
	("__newfd",		ctypes.c_int),
	("__new",		ctypes.POINTER(ctypes.c_char)),] )

tmpfile = _rpythonic_function_(		"tmpfile", ctypes.POINTER(_IO_FILE), [] )

tmpnam = _rpythonic_function_(		"tmpnam", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

tmpnam_r = _rpythonic_function_(		"tmpnam_r", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

tempnam = _rpythonic_function_(		"tempnam", ctypes.POINTER(ctypes.c_char), [
	("__dir",		ctypes.POINTER(ctypes.c_char)),
	("__pfx",		ctypes.POINTER(ctypes.c_char)),] )

fclose = _rpythonic_function_(		"fclose", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

_IO_vfscanf = _rpythonic_function_(		"_IO_vfscanf", ctypes.c_int, [
	("__restrict",		ctypes.POINTER(_IO_FILE)),
	("__restrict",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_char),
	("__restrict",		ctypes.POINTER(ctypes.c_int)),] )

_IO_vfprintf = _rpythonic_function_(		"_IO_vfprintf", ctypes.c_int, [
	("__restrict",		ctypes.POINTER(_IO_FILE)),
	("__restrict",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_char),] )

_IO_padn = _rpythonic_function_(		"_IO_padn", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

_IO_sgetn = _rpythonic_function_(		"_IO_sgetn", ctypes.c_uint, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_uint),] )

_IO_seekoff = _rpythonic_function_(		"_IO_seekoff", ctypes.c_longlong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_longlong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

_IO_seekpos = _rpythonic_function_(		"_IO_seekpos", ctypes.c_longlong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_longlong),
	("none",		ctypes.c_int),] )

_IO_free_backup_area = _rpythonic_function_(		"_IO_free_backup_area", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_IO_getc = _rpythonic_function_(		"_IO_getc", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_putc = _rpythonic_function_(		"_IO_putc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_feof = _rpythonic_function_(		"_IO_feof", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_ferror = _rpythonic_function_(		"_IO_ferror", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_peekc_locked = _rpythonic_function_(		"_IO_peekc_locked", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_flockfile = _rpythonic_function_(		"_IO_flockfile", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_IO_funlockfile = _rpythonic_function_(		"_IO_funlockfile", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_IO_ftrylockfile = _rpythonic_function_(		"_IO_ftrylockfile", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

gnu_dev_minor = _rpythonic_function_(		"gnu_dev_minor", ctypes.c_uint, [
	("__dev",		ctypes.c_ulonglong),] )

gnu_dev_makedev = _rpythonic_function_(		"gnu_dev_makedev", ctypes.c_ulonglong, [
	("__major",		ctypes.c_uint),
	("__minor",		ctypes.c_uint),] )

gnu_dev_major = _rpythonic_function_(		"gnu_dev_major", ctypes.c_uint, [
	("__dev",		ctypes.c_ulonglong),] )

pselect = _rpythonic_function_(		"pselect", ctypes.c_int, [
	("__nfds",		ctypes.c_int),
	("__readfds",		ctypes.POINTER(fd_set)),
	("__writefds",		ctypes.POINTER(fd_set)),
	("__exceptfds",		ctypes.POINTER(fd_set)),
	("__timeout",		ctypes.POINTER(timespec)),
	("__sigmask",		ctypes.POINTER(__sigset_t)),] )

select = _rpythonic_function_(		"select", ctypes.c_int, [
	("__nfds",		ctypes.c_int),
	("__readfds",		ctypes.POINTER(fd_set)),
	("__writefds",		ctypes.POINTER(fd_set)),
	("__exceptfds",		ctypes.POINTER(fd_set)),
	("__timeout",		ctypes.POINTER(timeval)),] )

SDL_SetError = _rpythonic_function_(		"SDL_SetError", ctypes.c_void_p, [
	("fmt",		ctypes.POINTER(ctypes.c_char)),] )

SDL_GetError = _rpythonic_function_(		"SDL_GetError", ctypes.POINTER(ctypes.c_char), [] )

SDL_ClearError = _rpythonic_function_(		"SDL_ClearError", ctypes.c_void_p, [] )

SDL_Error = _rpythonic_function_(		"SDL_Error", ctypes.c_void_p, [
	("code",		ctypes.c_int),] )

SDL_iconv_string = _rpythonic_function_(		"SDL_iconv_string", ctypes.POINTER(ctypes.c_char), [
	("tocode",		ctypes.POINTER(ctypes.c_char)),
	("fromcode",		ctypes.POINTER(ctypes.c_char)),
	("inbuf",		ctypes.POINTER(ctypes.c_char)),
	("inbytesleft",		ctypes.c_uint),] )

SDL_iconv = _rpythonic_function_(		"SDL_iconv", ctypes.c_uint, [
	("cd",		ctypes.POINTER(ctypes.c_void_p)),
	("inbuf",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("inbytesleft",		ctypes.POINTER(ctypes.c_uint)),
	("outbuf",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("outbytesleft",		ctypes.POINTER(ctypes.c_uint)),] )

SDL_ulltoa = _rpythonic_function_(		"SDL_ulltoa", ctypes.POINTER(ctypes.c_char), [
	("value",		ctypes.c_uint64),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("radix",		ctypes.c_int),] )

SDL_lltoa = _rpythonic_function_(		"SDL_lltoa", ctypes.POINTER(ctypes.c_char), [
	("value",		ctypes.c_int64),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("radix",		ctypes.c_int),] )

SDL_ultoa = _rpythonic_function_(		"SDL_ultoa", ctypes.POINTER(ctypes.c_char), [
	("value",		ctypes.c_ulong),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("radix",		ctypes.c_int),] )

SDL_ltoa = _rpythonic_function_(		"SDL_ltoa", ctypes.POINTER(ctypes.c_char), [
	("value",		ctypes.c_long),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("radix",		ctypes.c_int),] )

SDL_strlwr = _rpythonic_function_(		"SDL_strlwr", ctypes.POINTER(ctypes.c_char), [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

SDL_strlcpy = _rpythonic_function_(		"SDL_strlcpy", ctypes.c_uint, [
	("dst",		ctypes.POINTER(ctypes.c_char)),
	("src",		ctypes.POINTER(ctypes.c_char)),
	("maxlen",		ctypes.c_uint),] )

SDL_strlcat = _rpythonic_function_(		"SDL_strlcat", ctypes.c_uint, [
	("dst",		ctypes.POINTER(ctypes.c_char)),
	("src",		ctypes.POINTER(ctypes.c_char)),
	("maxlen",		ctypes.c_uint),] )

SDL_strrev = _rpythonic_function_(		"SDL_strrev", ctypes.POINTER(ctypes.c_char), [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

SDL_strupr = _rpythonic_function_(		"SDL_strupr", ctypes.POINTER(ctypes.c_char), [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

iconv_close = _rpythonic_function_(		"iconv_close", ctypes.c_int, [("__cd",		ctypes.c_void_p)] )

iconv = _rpythonic_function_(		"iconv", ctypes.c_uint, [
	("__cd",		ctypes.POINTER(ctypes.c_void_p)),
	("__inbuf",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__inbytesleft",		ctypes.POINTER(ctypes.c_uint)),
	("__outbuf",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__outbytesleft",		ctypes.POINTER(ctypes.c_uint)),] )

iconv_open = _rpythonic_function_(		"iconv_open", ctypes.POINTER(ctypes.c_void_p), [
	("__tocode",		ctypes.POINTER(ctypes.c_char)),
	("__fromcode",		ctypes.POINTER(ctypes.c_char)),] )

toupper_l = _rpythonic_function_(		"toupper_l", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__l",		ctypes.POINTER(__locale_struct)),] )

tolower_l = _rpythonic_function_(		"tolower_l", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__l",		ctypes.POINTER(__locale_struct)),] )

isblank_l = _rpythonic_function_(		"isblank_l", ctypes.c_int, [
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

isalnum_l = _rpythonic_function_(		"isalnum_l", ctypes.c_int, [
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_tolower = _rpythonic_function_(		"_tolower", ctypes.c_int, [
	("none",		ctypes.c_int),] )

_toupper = _rpythonic_function_(		"_toupper", ctypes.c_int, [
	("none",		ctypes.c_int),] )

toascii = _rpythonic_function_(		"toascii", ctypes.c_int, [
	("__c",		ctypes.c_int),] )

isblank = _rpythonic_function_(		"isblank", ctypes.c_int, [
	("none",		ctypes.c_int),] )

isascii = _rpythonic_function_(		"isascii", ctypes.c_int, [
	("__c",		ctypes.c_int),] )

toupper = _rpythonic_function_(		"toupper", ctypes.c_int, [
	("__c",		ctypes.c_int),] )

tolower = _rpythonic_function_(		"tolower", ctypes.c_int, [
	("__c",		ctypes.c_int),] )

isprint = _rpythonic_function_(		"isprint", ctypes.c_int, [
	("none",		ctypes.c_int),] )

isxdigit = _rpythonic_function_(		"isxdigit", ctypes.c_int, [
	("none",		ctypes.c_int),] )

isupper = _rpythonic_function_(		"isupper", ctypes.c_int, [
	("none",		ctypes.c_int),] )

isspace = _rpythonic_function_(		"isspace", ctypes.c_int, [
	("none",		ctypes.c_int),] )

ispunct = _rpythonic_function_(		"ispunct", ctypes.c_int, [
	("none",		ctypes.c_int),] )

isalpha_l = _rpythonic_function_(		"isalpha_l", ctypes.c_int, [
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

iscntrl_l = _rpythonic_function_(		"iscntrl_l", ctypes.c_int, [
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

isdigit_l = _rpythonic_function_(		"isdigit_l", ctypes.c_int, [
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

islower_l = _rpythonic_function_(		"islower_l", ctypes.c_int, [
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

isgraph_l = _rpythonic_function_(		"isgraph_l", ctypes.c_int, [
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

isprint_l = _rpythonic_function_(		"isprint_l", ctypes.c_int, [
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

ispunct_l = _rpythonic_function_(		"ispunct_l", ctypes.c_int, [
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

isspace_l = _rpythonic_function_(		"isspace_l", ctypes.c_int, [
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

isupper_l = _rpythonic_function_(		"isupper_l", ctypes.c_int, [
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

isxdigit_l = _rpythonic_function_(		"isxdigit_l", ctypes.c_int, [
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

isgraph = _rpythonic_function_(		"isgraph", ctypes.c_int, [
	("none",		ctypes.c_int),] )

islower = _rpythonic_function_(		"islower", ctypes.c_int, [
	("none",		ctypes.c_int),] )

isdigit = _rpythonic_function_(		"isdigit", ctypes.c_int, [
	("none",		ctypes.c_int),] )

wcstoumax = _rpythonic_function_(		"wcstoumax", ctypes.c_ulonglong, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__base",		ctypes.c_int),] )

iscntrl = _rpythonic_function_(		"iscntrl", ctypes.c_int, [
	("none",		ctypes.c_int),] )

isalnum = _rpythonic_function_(		"isalnum", ctypes.c_int, [
	("none",		ctypes.c_int),] )

isalpha = _rpythonic_function_(		"isalpha", ctypes.c_int, [
	("none",		ctypes.c_int),] )

imaxabs = _rpythonic_function_(		"imaxabs", ctypes.c_longlong, [
	("__n",		ctypes.c_longlong),] )

imaxdiv = _rpythonic_function_(		"imaxdiv", imaxdiv_t, [
	("__numer",		ctypes.c_longlong),
	("__denom",		ctypes.c_longlong),] )

strtoimax = _rpythonic_function_(		"strtoimax", ctypes.c_longlong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

strtoumax = _rpythonic_function_(		"strtoumax", ctypes.c_ulonglong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

wcstoimax = _rpythonic_function_(		"wcstoimax", ctypes.c_longlong, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__base",		ctypes.c_int),] )

strsignal = _rpythonic_function_(		"strsignal", ctypes.POINTER(ctypes.c_char), [
	("__sig",		ctypes.c_int),] )

stpcpy = _rpythonic_function_(		"stpcpy", ctypes.POINTER(ctypes.c_char), [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),] )

stpncpy = _rpythonic_function_(		"stpncpy", ctypes.POINTER(ctypes.c_char), [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

strsep = _rpythonic_function_(		"strsep", ctypes.POINTER(ctypes.c_char), [
	("__stringp",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__delim",		ctypes.POINTER(ctypes.c_char)),] )

strncasecmp = _rpythonic_function_(		"strncasecmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

strcasecmp = _rpythonic_function_(		"strcasecmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),] )

ffs = _rpythonic_function_(		"ffs", ctypes.c_int, [
	("__i",		ctypes.c_int),] )

rindex = _rpythonic_function_(		"rindex", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__c",		ctypes.c_int),] )

index = _rpythonic_function_(		"index", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__c",		ctypes.c_int),] )

bcmp = _rpythonic_function_(		"bcmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_void_p)),
	("__s2",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),] )

bzero = _rpythonic_function_(		"bzero", ctypes.c_void_p, [
	("__s",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),] )

strtok_r = _rpythonic_function_(		"strtok_r", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__delim",		ctypes.POINTER(ctypes.c_char)),
	("__save_ptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

strlen = _rpythonic_function_(		"strlen", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

strnlen = _rpythonic_function_(		"strnlen", ctypes.c_uint, [
	("__string",		ctypes.POINTER(ctypes.c_char)),
	("__maxlen",		ctypes.c_uint),] )

strerror = _rpythonic_function_(		"strerror", ctypes.POINTER(ctypes.c_char), [
	("__errnum",		ctypes.c_int),] )

strerror_r = _rpythonic_function_(		"strerror_r", ctypes.c_int, [
	("__errnum",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__buflen",		ctypes.c_uint),] )

strerror_l = _rpythonic_function_(		"strerror_l", ctypes.POINTER(ctypes.c_char), [
	("__errnum",		ctypes.c_int),
	("__l",		ctypes.POINTER(__locale_struct)),] )

bcopy = _rpythonic_function_(		"bcopy", ctypes.c_void_p, [
	("__src",		ctypes.POINTER(ctypes.c_void_p)),
	("__dest",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),] )

strchr = _rpythonic_function_(		"strchr", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__c",		ctypes.c_int),] )

strrchr = _rpythonic_function_(		"strrchr", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__c",		ctypes.c_int),] )

strcspn = _rpythonic_function_(		"strcspn", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__reject",		ctypes.POINTER(ctypes.c_char)),] )

strspn = _rpythonic_function_(		"strspn", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__accept",		ctypes.POINTER(ctypes.c_char)),] )

strpbrk = _rpythonic_function_(		"strpbrk", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__accept",		ctypes.POINTER(ctypes.c_char)),] )

strstr = _rpythonic_function_(		"strstr", ctypes.POINTER(ctypes.c_char), [
	("__haystack",		ctypes.POINTER(ctypes.c_char)),
	("__needle",		ctypes.POINTER(ctypes.c_char)),] )

strtok = _rpythonic_function_(		"strtok", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__delim",		ctypes.POINTER(ctypes.c_char)),] )

SDL_RemoveTimer = _rpythonic_function_(		"SDL_RemoveTimer", ctypes.c_int, [
	("t",		ctypes.POINTER(_SDL_TimerID)),] )

SDL_Linked_Version = _rpythonic_function_(		"SDL_Linked_Version", ctypes.POINTER(SDL_version), [] )

SDL_Init = _rpythonic_function_(		"SDL_Init", ctypes.c_int, [
	("flags",		ctypes.c_uint32),] )

SDL_InitSubSystem = _rpythonic_function_(		"SDL_InitSubSystem", ctypes.c_int, [
	("flags",		ctypes.c_uint32),] )

SDL_QuitSubSystem = _rpythonic_function_(		"SDL_QuitSubSystem", ctypes.c_void_p, [
	("flags",		ctypes.c_uint32),] )

SDL_WasInit = _rpythonic_function_(		"SDL_WasInit", ctypes.c_uint32, [
	("flags",		ctypes.c_uint32),] )

SDL_Quit = _rpythonic_function_(		"SDL_Quit", ctypes.c_void_p, [] )

SDL_LoadObject = _rpythonic_function_(		"SDL_LoadObject", ctypes.POINTER(ctypes.c_void_p), [
	("sofile",		ctypes.POINTER(ctypes.c_char)),] )

SDL_LoadFunction = _rpythonic_function_(		"SDL_LoadFunction", ctypes.POINTER(ctypes.c_void_p), [
	("handle",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

SDL_UnloadObject = _rpythonic_function_(		"SDL_UnloadObject", ctypes.c_void_p, [("handle",		ctypes.c_void_p)] )

SDL_GetTicks = _rpythonic_function_(		"SDL_GetTicks", ctypes.c_uint32, [] )

SDL_Delay = _rpythonic_function_(		"SDL_Delay", ctypes.c_void_p, [
	("ms",		ctypes.c_uint32),] )

SDL_TimerCallback = _rpythonic_function_(		"SDL_TimerCallback", ctypes.c_uint32, [
	("interval",		ctypes.c_uint32),] )

SDL_SetTimer = _rpythonic_function_(		"SDL_SetTimer", ctypes.c_int, [
	("interval",		ctypes.c_uint32),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_uint32, ctypes.c_uint32,)),] )

SDL_NewTimerCallback = _rpythonic_function_(		"SDL_NewTimerCallback", ctypes.c_uint32, [
	("interval",		ctypes.c_uint32),
	("param",		ctypes.POINTER(ctypes.c_void_p)),] )

SDL_AddTimer = _rpythonic_function_(		"SDL_AddTimer", ctypes.POINTER(_SDL_TimerID), [
	("interval",		ctypes.c_uint32),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_uint32, ctypes.c_uint32,ctypes.POINTER(ctypes.c_void_p),)),
	("param",		ctypes.POINTER(ctypes.c_void_p)),] )

SDL_PumpEvents = _rpythonic_function_(		"SDL_PumpEvents", ctypes.c_void_p, [] )

SDL_PeepEvents = _rpythonic_function_(		"SDL_PeepEvents", ctypes.c_int, [
	("events",		ctypes.POINTER(SDL_Event)),
	("numevents",		ctypes.c_int),
	("action",		ctypes.c_int),
	("mask",		ctypes.c_uint32),] )

SDL_PollEvent = _rpythonic_function_(		"SDL_PollEvent", ctypes.c_int, [
	("event",		ctypes.POINTER(SDL_Event)),] )

SDL_WaitEvent = _rpythonic_function_(		"SDL_WaitEvent", ctypes.c_int, [
	("event",		ctypes.POINTER(SDL_Event)),] )

SDL_PushEvent = _rpythonic_function_(		"SDL_PushEvent", ctypes.c_int, [
	("event",		ctypes.POINTER(SDL_Event)),] )

SDL_EventFilter = _rpythonic_function_(		"SDL_EventFilter", ctypes.c_int, [
	("event",		ctypes.POINTER(SDL_Event)),] )

SDL_SetEventFilter = _rpythonic_function_(		"SDL_SetEventFilter", ctypes.c_void_p, [
	("filter",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(SDL_Event),)),] )

SDL_GetEventFilter = _rpythonic_function_(		"SDL_GetEventFilter", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(SDL_Event),), [] )

SDL_EventState = _rpythonic_function_(		"SDL_EventState", ctypes.c_uint8, [
	("C_type",		ctypes.c_uint8),
	("state",		ctypes.c_int),] )

srandom = _rpythonic_function_(		"srandom", ctypes.c_void_p, [
	("__seed",		ctypes.c_uint),] )

initstate = _rpythonic_function_(		"initstate", ctypes.POINTER(ctypes.c_char), [
	("__seed",		ctypes.c_uint),
	("__statebuf",		ctypes.POINTER(ctypes.c_char)),
	("__statelen",		ctypes.c_uint),] )

setstate = _rpythonic_function_(		"setstate", ctypes.POINTER(ctypes.c_char), [
	("__statebuf",		ctypes.POINTER(ctypes.c_char)),] )

random_r = _rpythonic_function_(		"random_r", ctypes.c_int, [
	("__buf",		ctypes.POINTER(random_data)),
	("__result",		ctypes.POINTER(ctypes.c_int32)),] )

srandom_r = _rpythonic_function_(		"srandom_r", ctypes.c_int, [
	("__seed",		ctypes.c_uint),
	("__buf",		ctypes.POINTER(random_data)),] )

initstate_r = _rpythonic_function_(		"initstate_r", ctypes.c_int, [
	("__seed",		ctypes.c_uint),
	("__statebuf",		ctypes.POINTER(ctypes.c_char)),
	("__statelen",		ctypes.c_uint),
	("__buf",		ctypes.POINTER(random_data)),] )

strtoul = _rpythonic_function_(		"strtoul", ctypes.c_uint64, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

strtoq = _rpythonic_function_(		"strtoq", ctypes.c_longlong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

strtouq = _rpythonic_function_(		"strtouq", ctypes.c_ulonglong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

strtoll = _rpythonic_function_(		"strtoll", ctypes.c_longlong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

strtoull = _rpythonic_function_(		"strtoull", ctypes.c_ulonglong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

l64a = _rpythonic_function_(		"l64a", ctypes.POINTER(ctypes.c_char), [
	("__n",		ctypes.c_int64),] )

a64l = _rpythonic_function_(		"a64l", ctypes.c_int64, [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

random = _rpythonic_function_(		"random", ctypes.c_int64, [] )

atof = _rpythonic_function_(		"atof", ctypes.c_double, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),] )

atoi = _rpythonic_function_(		"atoi", ctypes.c_int, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),] )

atol = _rpythonic_function_(		"atol", ctypes.c_int64, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),] )

atoll = _rpythonic_function_(		"atoll", ctypes.c_longlong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),] )

strtod = _rpythonic_function_(		"strtod", ctypes.c_double, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

strtof = _rpythonic_function_(		"strtof", ctypes.c_float, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

strtold = _rpythonic_function_(		"strtold", ctypes.c_double, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

strtol = _rpythonic_function_(		"strtol", ctypes.c_int64, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

ctermid = _rpythonic_function_(		"ctermid", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

flockfile = _rpythonic_function_(		"flockfile", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ftrylockfile = _rpythonic_function_(		"ftrylockfile", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

funlockfile = _rpythonic_function_(		"funlockfile", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

feof = _rpythonic_function_(		"feof", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ferror = _rpythonic_function_(		"ferror", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

clearerr_unlocked = _rpythonic_function_(		"clearerr_unlocked", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

feof_unlocked = _rpythonic_function_(		"feof_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ferror_unlocked = _rpythonic_function_(		"ferror_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

perror = _rpythonic_function_(		"perror", ctypes.c_void_p, [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

fileno = _rpythonic_function_(		"fileno", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fileno_unlocked = _rpythonic_function_(		"fileno_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

popen = _rpythonic_function_(		"popen", ctypes.POINTER(_IO_FILE), [
	("__command",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

pclose = _rpythonic_function_(		"pclose", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fwrite_unlocked = _rpythonic_function_(		"fwrite_unlocked", ctypes.c_uint, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint),
	("__n",		ctypes.c_uint),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fseek = _rpythonic_function_(		"fseek", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__off",		ctypes.c_int64),
	("__whence",		ctypes.c_int),] )

ftell = _rpythonic_function_(		"ftell", ctypes.c_int64, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

rewind = _rpythonic_function_(		"rewind", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fseeko = _rpythonic_function_(		"fseeko", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__off",		ctypes.c_int64),
	("__whence",		ctypes.c_int),] )

ftello = _rpythonic_function_(		"ftello", ctypes.c_int64, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fgetpos = _rpythonic_function_(		"fgetpos", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__pos",		ctypes.POINTER(_G_fpos_t)),] )

fsetpos = _rpythonic_function_(		"fsetpos", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__pos",		ctypes.POINTER(_G_fpos_t)),] )

clearerr = _rpythonic_function_(		"clearerr", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getline = _rpythonic_function_(		"getline", ctypes.c_int, [
	("__lineptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__n",		ctypes.POINTER(ctypes.c_uint)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fputs = _rpythonic_function_(		"fputs", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

puts = _rpythonic_function_(		"puts", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

ungetc = _rpythonic_function_(		"ungetc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fread = _rpythonic_function_(		"fread", ctypes.c_uint, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint),
	("__n",		ctypes.c_uint),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fwrite = _rpythonic_function_(		"fwrite", ctypes.c_uint, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint),
	("__n",		ctypes.c_uint),
	("__s",		ctypes.POINTER(_IO_FILE)),] )

fread_unlocked = _rpythonic_function_(		"fread_unlocked", ctypes.c_uint, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint),
	("__n",		ctypes.c_uint),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putc_unlocked = _rpythonic_function_(		"putc_unlocked", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putchar_unlocked = _rpythonic_function_(		"putchar_unlocked", ctypes.c_int, [
	("__c",		ctypes.c_int),] )

getw = _rpythonic_function_(		"getw", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putw = _rpythonic_function_(		"putw", ctypes.c_int, [
	("__w",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fgets = _rpythonic_function_(		"fgets", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

gets = _rpythonic_function_(		"gets", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

getdelim = _rpythonic_function_(		"getdelim", ctypes.c_int, [
	("__lineptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__n",		ctypes.POINTER(ctypes.c_uint)),
	("__delimiter",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fgetc = _rpythonic_function_(		"fgetc", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getc = _rpythonic_function_(		"getc", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getchar = _rpythonic_function_(		"getchar", ctypes.c_int, [] )

getc_unlocked = _rpythonic_function_(		"getc_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getchar_unlocked = _rpythonic_function_(		"getchar_unlocked", ctypes.c_int, [] )

fgetc_unlocked = _rpythonic_function_(		"fgetc_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fputc = _rpythonic_function_(		"fputc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putc = _rpythonic_function_(		"putc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putchar = _rpythonic_function_(		"putchar", ctypes.c_int, [
	("__c",		ctypes.c_int),] )

fputc_unlocked = _rpythonic_function_(		"fputc_unlocked", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

setbuf = _rpythonic_function_(		"setbuf", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

open_memstream = _rpythonic_function_(		"open_memstream", ctypes.POINTER(_IO_FILE), [
	("__bufloc",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__sizeloc",		ctypes.POINTER(ctypes.c_uint)),] )

fmemopen = _rpythonic_function_(		"fmemopen", ctypes.POINTER(_IO_FILE), [
	("__s",		ctypes.POINTER(ctypes.c_void_p)),
	("__len",		ctypes.c_uint),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

fflush = _rpythonic_function_(		"fflush", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fdopen = _rpythonic_function_(		"fdopen", ctypes.POINTER(_IO_FILE), [
	("__fd",		ctypes.c_int),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

freopen = _rpythonic_function_(		"freopen", ctypes.POINTER(_IO_FILE), [
	("__filename",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.POINTER(ctypes.c_char)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fopen = _rpythonic_function_(		"fopen", ctypes.POINTER(_IO_FILE), [
	("__filename",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

fflush_unlocked = _rpythonic_function_(		"fflush_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

vfscanf = _rpythonic_function_(		"vfscanf", ctypes.c_int, [
	("__s",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vscanf = _rpythonic_function_(		"vscanf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vsscanf = _rpythonic_function_(		"vsscanf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vsprintf = _rpythonic_function_(		"vsprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

snprintf = _rpythonic_function_(		"snprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__maxlen",		ctypes.c_uint),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

vsnprintf = _rpythonic_function_(		"vsnprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__maxlen",		ctypes.c_uint),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vdprintf = _rpythonic_function_(		"vdprintf", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__fmt",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

dprintf = _rpythonic_function_(		"dprintf", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__fmt",		ctypes.POINTER(ctypes.c_char)),] )

fscanf = _rpythonic_function_(		"fscanf", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

scanf = _rpythonic_function_(		"scanf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

sscanf = _rpythonic_function_(		"sscanf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

setvbuf = _rpythonic_function_(		"setvbuf", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.c_int),
	("__n",		ctypes.c_uint),] )

setbuffer = _rpythonic_function_(		"setbuffer", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__size",		ctypes.c_uint),] )

setlinebuf = _rpythonic_function_(		"setlinebuf", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fprintf = _rpythonic_function_(		"fprintf", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

printf = _rpythonic_function_(		"printf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

sprintf = _rpythonic_function_(		"sprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

vfprintf = _rpythonic_function_(		"vfprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vprintf = _rpythonic_function_(		"vprintf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

strxfrm = _rpythonic_function_(		"strxfrm", ctypes.c_uint, [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

strcoll_l = _rpythonic_function_(		"strcoll_l", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),
	("__l",		ctypes.POINTER(__locale_struct)),] )

strxfrm_l = _rpythonic_function_(		"strxfrm_l", ctypes.c_uint, [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),
	("__l",		ctypes.POINTER(__locale_struct)),] )

strdup = _rpythonic_function_(		"strdup", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

strndup = _rpythonic_function_(		"strndup", ctypes.POINTER(ctypes.c_char), [
	("__string",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

strcpy = _rpythonic_function_(		"strcpy", ctypes.POINTER(ctypes.c_char), [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),] )

strncpy = _rpythonic_function_(		"strncpy", ctypes.POINTER(ctypes.c_char), [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

strcat = _rpythonic_function_(		"strcat", ctypes.POINTER(ctypes.c_char), [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),] )

strncat = _rpythonic_function_(		"strncat", ctypes.POINTER(ctypes.c_char), [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

strcmp = _rpythonic_function_(		"strcmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),] )

strncmp = _rpythonic_function_(		"strncmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

strcoll = _rpythonic_function_(		"strcoll", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),] )

getloadavg = _rpythonic_function_(		"getloadavg", ctypes.c_int, [
	("__loadavg",		ctypes.c_double),
	("__nelem",		ctypes.c_int),] )

memcpy = _rpythonic_function_(		"memcpy", ctypes.POINTER(ctypes.c_void_p), [
	("__dest",		ctypes.POINTER(ctypes.c_void_p)),
	("__src",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),] )

memmove = _rpythonic_function_(		"memmove", ctypes.POINTER(ctypes.c_void_p), [
	("__dest",		ctypes.POINTER(ctypes.c_void_p)),
	("__src",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),] )

memccpy = _rpythonic_function_(		"memccpy", ctypes.POINTER(ctypes.c_void_p), [
	("__dest",		ctypes.POINTER(ctypes.c_void_p)),
	("__src",		ctypes.POINTER(ctypes.c_void_p)),
	("__c",		ctypes.c_int),
	("__n",		ctypes.c_uint),] )

memset = _rpythonic_function_(		"memset", ctypes.POINTER(ctypes.c_void_p), [
	("__s",		ctypes.POINTER(ctypes.c_void_p)),
	("__c",		ctypes.c_int),
	("__n",		ctypes.c_uint),] )

memcmp = _rpythonic_function_(		"memcmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_void_p)),
	("__s2",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),] )

memchr = _rpythonic_function_(		"memchr", ctypes.POINTER(ctypes.c_void_p), [
	("__s",		ctypes.POINTER(ctypes.c_void_p)),
	("__c",		ctypes.c_int),
	("__n",		ctypes.c_uint),] )

getsubopt = _rpythonic_function_(		"getsubopt", ctypes.c_int, [
	("__optionp",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__tokens",		ctypes.POINTER(ctypes.c_char)),
	("__valuep",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

rpmatch = _rpythonic_function_(		"rpmatch", ctypes.c_int, [
	("__response",		ctypes.POINTER(ctypes.c_char)),] )

wcstombs = _rpythonic_function_(		"wcstombs", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__pwcs",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),] )

mbstowcs = _rpythonic_function_(		"mbstowcs", ctypes.c_uint, [
	("__pwcs",		ctypes.POINTER(ctypes.c_int)),
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

wctomb = _rpythonic_function_(		"wctomb", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__wchar",		ctypes.c_int),] )

mbtowc = _rpythonic_function_(		"mbtowc", ctypes.c_int, [
	("__pwc",		ctypes.POINTER(ctypes.c_int)),
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

mblen = _rpythonic_function_(		"mblen", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

qgcvt = _rpythonic_function_(		"qgcvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

ecvt_r = _rpythonic_function_(		"ecvt_r", ctypes.c_int, [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint),] )

fcvt_r = _rpythonic_function_(		"fcvt_r", ctypes.c_int, [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint),] )

qecvt_r = _rpythonic_function_(		"qecvt_r", ctypes.c_int, [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint),] )

qfcvt_r = _rpythonic_function_(		"qfcvt_r", ctypes.c_int, [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint),] )

ldiv = _rpythonic_function_(		"ldiv", ldiv_t, [
	("__numer",		ctypes.c_int64),
	("__denom",		ctypes.c_int64),] )

lldiv = _rpythonic_function_(		"lldiv", lldiv_t, [
	("__numer",		ctypes.c_longlong),
	("__denom",		ctypes.c_longlong),] )

ecvt = _rpythonic_function_(		"ecvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),] )

fcvt = _rpythonic_function_(		"fcvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),] )

gcvt = _rpythonic_function_(		"gcvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

qecvt = _rpythonic_function_(		"qecvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),] )

qfcvt = _rpythonic_function_(		"qfcvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),] )

realpath = _rpythonic_function_(		"realpath", ctypes.POINTER(ctypes.c_char), [
	("__name",		ctypes.POINTER(ctypes.c_char)),
	("__resolved",		ctypes.POINTER(ctypes.c_char)),] )

bsearch = _rpythonic_function_(		"bsearch", ctypes.POINTER(ctypes.c_void_p), [
	("__key",		ctypes.POINTER(ctypes.c_void_p)),
	("__base",		ctypes.POINTER(ctypes.c_void_p)),
	("__nmemb",		ctypes.c_uint),
	("__size",		ctypes.c_uint),
	("__compar",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

qsort = _rpythonic_function_(		"qsort", ctypes.c_void_p, [
	("__base",		ctypes.POINTER(ctypes.c_void_p)),
	("__nmemb",		ctypes.c_uint),
	("__size",		ctypes.c_uint),
	("__compar",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

abs = _rpythonic_function_(		"abs", ctypes.c_int, [
	("__x",		ctypes.c_int),] )

labs = _rpythonic_function_(		"labs", ctypes.c_int64, [
	("__x",		ctypes.c_int64),] )

llabs = _rpythonic_function_(		"llabs", ctypes.c_longlong, [
	("__x",		ctypes.c_longlong),] )

div = _rpythonic_function_(		"div", div_t, [
	("__numer",		ctypes.c_int),
	("__denom",		ctypes.c_int),] )

getenv = _rpythonic_function_(		"getenv", ctypes.POINTER(ctypes.c_char), [
	("__name",		ctypes.POINTER(ctypes.c_char)),] )

putenv = _rpythonic_function_(		"putenv", ctypes.c_int, [
	("__string",		ctypes.POINTER(ctypes.c_char)),] )

setenv = _rpythonic_function_(		"setenv", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),
	("__value",		ctypes.POINTER(ctypes.c_char)),
	("__replace",		ctypes.c_int),] )

unsetenv = _rpythonic_function_(		"unsetenv", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),] )

clearenv = _rpythonic_function_(		"clearenv", ctypes.c_int, [] )

mktemp = _rpythonic_function_(		"mktemp", ctypes.POINTER(ctypes.c_char), [
	("__template",		ctypes.POINTER(ctypes.c_char)),] )

mkstemp = _rpythonic_function_(		"mkstemp", ctypes.c_int, [
	("__template",		ctypes.POINTER(ctypes.c_char)),] )

mkstemps = _rpythonic_function_(		"mkstemps", ctypes.c_int, [
	("__template",		ctypes.POINTER(ctypes.c_char)),
	("__suffixlen",		ctypes.c_int),] )

mkdtemp = _rpythonic_function_(		"mkdtemp", ctypes.POINTER(ctypes.c_char), [
	("__template",		ctypes.POINTER(ctypes.c_char)),] )

system = _rpythonic_function_(		"system", ctypes.c_int, [
	("__command",		ctypes.POINTER(ctypes.c_char)),] )

alloca = _rpythonic_function_(		"alloca", ctypes.POINTER(ctypes.c_void_p), [
	("__size",		ctypes.c_uint),] )

valloc = _rpythonic_function_(		"valloc", ctypes.POINTER(ctypes.c_void_p), [
	("__size",		ctypes.c_uint),] )

posix_memalign = _rpythonic_function_(		"posix_memalign", ctypes.c_int, [
	("__memptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("__alignment",		ctypes.c_uint),
	("__size",		ctypes.c_uint),] )

abort = _rpythonic_function_(		"abort", ctypes.c_void_p, [] )

atexit = _rpythonic_function_(		"atexit", ctypes.c_int, [
	("__func",		ctypes.c_void_p),] )

on_exit = _rpythonic_function_(		"on_exit", ctypes.c_int, [
	("__func",		ctypes.c_void_p),
	("__arg",		ctypes.POINTER(ctypes.c_void_p)),] )

exit = _rpythonic_function_(		"exit", ctypes.c_void_p, [
	("__status",		ctypes.c_int),] )

_Exit = _rpythonic_function_(		"_Exit", ctypes.c_void_p, [
	("__status",		ctypes.c_int),] )

jrand48_r = _rpythonic_function_(		"jrand48_r", ctypes.c_int, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_int64)),] )

srand48_r = _rpythonic_function_(		"srand48_r", ctypes.c_int, [
	("__seedval",		ctypes.c_int64),
	("__buffer",		ctypes.POINTER(drand48_data)),] )

seed48_r = _rpythonic_function_(		"seed48_r", ctypes.c_int, [
	("__seed16v",		( ctypes.c_uint16 * 3 )),
	("__buffer",		ctypes.POINTER(drand48_data)),] )

lcong48_r = _rpythonic_function_(		"lcong48_r", ctypes.c_int, [
	("__param",		( ctypes.c_uint16 * 7 )),
	("__buffer",		ctypes.POINTER(drand48_data)),] )

malloc = _rpythonic_function_(		"malloc", ctypes.POINTER(ctypes.c_void_p), [
	("__size",		ctypes.c_uint),] )

calloc = _rpythonic_function_(		"calloc", ctypes.POINTER(ctypes.c_void_p), [
	("__nmemb",		ctypes.c_uint),
	("__size",		ctypes.c_uint),] )

realloc = _rpythonic_function_(		"realloc", ctypes.POINTER(ctypes.c_void_p), [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint),] )

free = _rpythonic_function_(		"free", ctypes.c_void_p, [("__ptr",		ctypes.c_void_p)] )

cfree = _rpythonic_function_(		"cfree", ctypes.c_void_p, [("__ptr",		ctypes.c_void_p)] )

lcong48 = _rpythonic_function_(		"lcong48", ctypes.c_void_p, [
	("__param",		( ctypes.c_uint16 * 7 )),] )

drand48_r = _rpythonic_function_(		"drand48_r", ctypes.c_int, [
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_double)),] )

erand48_r = _rpythonic_function_(		"erand48_r", ctypes.c_int, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_double)),] )

lrand48_r = _rpythonic_function_(		"lrand48_r", ctypes.c_int, [
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_int64)),] )

nrand48_r = _rpythonic_function_(		"nrand48_r", ctypes.c_int, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_int64)),] )

mrand48_r = _rpythonic_function_(		"mrand48_r", ctypes.c_int, [
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_int64)),] )

setstate_r = _rpythonic_function_(		"setstate_r", ctypes.c_int, [
	("__statebuf",		ctypes.POINTER(ctypes.c_char)),
	("__buf",		ctypes.POINTER(random_data)),] )

rand = _rpythonic_function_(		"rand", ctypes.c_int, [] )

srand = _rpythonic_function_(		"srand", ctypes.c_void_p, [
	("__seed",		ctypes.c_uint),] )

rand_r = _rpythonic_function_(		"rand_r", ctypes.c_int, [
	("__seed",		ctypes.POINTER(ctypes.c_uint)),] )

drand48 = _rpythonic_function_(		"drand48", ctypes.c_double, [] )

erand48 = _rpythonic_function_(		"erand48", ctypes.c_double, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),] )

lrand48 = _rpythonic_function_(		"lrand48", ctypes.c_int64, [] )

nrand48 = _rpythonic_function_(		"nrand48", ctypes.c_int64, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),] )

mrand48 = _rpythonic_function_(		"mrand48", ctypes.c_int64, [] )

jrand48 = _rpythonic_function_(		"jrand48", ctypes.c_int64, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),] )

srand48 = _rpythonic_function_(		"srand48", ctypes.c_void_p, [
	("__seedval",		ctypes.c_int64),] )

seed48 = _rpythonic_function_(		"seed48", ctypes.POINTER(ctypes.c_uint16), [
	("__seed16v",		( ctypes.c_uint16 * 3 )),] )

SDL_JoystickClose = _rpythonic_function_(		"SDL_JoystickClose", ctypes.c_void_p, [
	("joystick",		ctypes.POINTER(_SDL_Joystick)),] )

SDL_JoystickNumAxes = _rpythonic_function_(		"SDL_JoystickNumAxes", ctypes.c_int, [
	("joystick",		ctypes.POINTER(_SDL_Joystick)),] )

SDL_JoystickNumBalls = _rpythonic_function_(		"SDL_JoystickNumBalls", ctypes.c_int, [
	("joystick",		ctypes.POINTER(_SDL_Joystick)),] )

SDL_JoystickNumHats = _rpythonic_function_(		"SDL_JoystickNumHats", ctypes.c_int, [
	("joystick",		ctypes.POINTER(_SDL_Joystick)),] )

SDL_JoystickNumButtons = _rpythonic_function_(		"SDL_JoystickNumButtons", ctypes.c_int, [
	("joystick",		ctypes.POINTER(_SDL_Joystick)),] )

SDL_JoystickUpdate = _rpythonic_function_(		"SDL_JoystickUpdate", ctypes.c_void_p, [] )

SDL_JoystickEventState = _rpythonic_function_(		"SDL_JoystickEventState", ctypes.c_int, [
	("state",		ctypes.c_int),] )

SDL_JoystickGetAxis = _rpythonic_function_(		"SDL_JoystickGetAxis", ctypes.c_int16, [
	("joystick",		ctypes.POINTER(_SDL_Joystick)),
	("axis",		ctypes.c_int),] )

SDL_JoystickGetHat = _rpythonic_function_(		"SDL_JoystickGetHat", ctypes.c_uint8, [
	("joystick",		ctypes.POINTER(_SDL_Joystick)),
	("hat",		ctypes.c_int),] )

SDL_JoystickGetBall = _rpythonic_function_(		"SDL_JoystickGetBall", ctypes.c_int, [
	("joystick",		ctypes.POINTER(_SDL_Joystick)),
	("ball",		ctypes.c_int),
	("dx",		ctypes.POINTER(ctypes.c_int)),
	("dy",		ctypes.POINTER(ctypes.c_int)),] )

SDL_JoystickGetButton = _rpythonic_function_(		"SDL_JoystickGetButton", ctypes.c_uint8, [
	("joystick",		ctypes.POINTER(_SDL_Joystick)),
	("button",		ctypes.c_int),] )

SDL_SetCursor = _rpythonic_function_(		"SDL_SetCursor", ctypes.c_void_p, [
	("cursor",		ctypes.POINTER(SDL_Cursor)),] )

SDL_GetCursor = _rpythonic_function_(		"SDL_GetCursor", ctypes.POINTER(SDL_Cursor), [] )

SDL_FreeCursor = _rpythonic_function_(		"SDL_FreeCursor", ctypes.c_void_p, [
	("cursor",		ctypes.POINTER(SDL_Cursor)),] )

SDL_ShowCursor = _rpythonic_function_(		"SDL_ShowCursor", ctypes.c_int, [
	("toggle",		ctypes.c_int),] )

SDL_NumJoysticks = _rpythonic_function_(		"SDL_NumJoysticks", ctypes.c_int, [] )

SDL_JoystickName = _rpythonic_function_(		"SDL_JoystickName", ctypes.POINTER(ctypes.c_char), [
	("device_index",		ctypes.c_int),] )

SDL_JoystickOpen = _rpythonic_function_(		"SDL_JoystickOpen", ctypes.POINTER(_SDL_Joystick), [
	("device_index",		ctypes.c_int),] )

SDL_JoystickOpened = _rpythonic_function_(		"SDL_JoystickOpened", ctypes.c_int, [
	("device_index",		ctypes.c_int),] )

SDL_JoystickIndex = _rpythonic_function_(		"SDL_JoystickIndex", ctypes.c_int, [
	("joystick",		ctypes.POINTER(_SDL_Joystick)),] )

SDL_WM_GrabInput = _rpythonic_function_(		"SDL_WM_GrabInput", ctypes.c_int, [
	("mode",		ctypes.c_int),] )

SDL_SoftStretch = _rpythonic_function_(		"SDL_SoftStretch", ctypes.c_int, [
	("src",		ctypes.POINTER(SDL_Surface)),
	("srcrect",		ctypes.POINTER(SDL_Rect)),
	("dst",		ctypes.POINTER(SDL_Surface)),
	("dstrect",		ctypes.POINTER(SDL_Rect)),] )

SDL_GetMouseState = _rpythonic_function_(		"SDL_GetMouseState", ctypes.c_uint8, [
	("x",		ctypes.POINTER(ctypes.c_int)),
	("y",		ctypes.POINTER(ctypes.c_int)),] )

SDL_GetRelativeMouseState = _rpythonic_function_(		"SDL_GetRelativeMouseState", ctypes.c_uint8, [
	("x",		ctypes.POINTER(ctypes.c_int)),
	("y",		ctypes.POINTER(ctypes.c_int)),] )

SDL_WarpMouse = _rpythonic_function_(		"SDL_WarpMouse", ctypes.c_void_p, [
	("x",		ctypes.c_uint16),
	("y",		ctypes.c_uint16),] )

SDL_CreateCursor = _rpythonic_function_(		"SDL_CreateCursor", ctypes.POINTER(SDL_Cursor), [
	("data",		ctypes.POINTER(ctypes.c_uint8)),
	("mask",		ctypes.POINTER(ctypes.c_uint8)),
	("w",		ctypes.c_int),
	("h",		ctypes.c_int),
	("hot_x",		ctypes.c_int),
	("hot_y",		ctypes.c_int),] )

SDL_VideoQuit = _rpythonic_function_(		"SDL_VideoQuit", ctypes.c_void_p, [] )

SDL_VideoInit = _rpythonic_function_(		"SDL_VideoInit", ctypes.c_int, [
	("driver_name",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_uint32),] )

SDL_GL_GetAttribute = _rpythonic_function_(		"SDL_GL_GetAttribute", ctypes.c_int, [
	("attr",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_int)),] )

SDL_GL_SwapBuffers = _rpythonic_function_(		"SDL_GL_SwapBuffers", ctypes.c_void_p, [] )

SDL_GL_UpdateRects = _rpythonic_function_(		"SDL_GL_UpdateRects", ctypes.c_void_p, [
	("numrects",		ctypes.c_int),
	("rects",		ctypes.POINTER(SDL_Rect)),] )

SDL_GL_Lock = _rpythonic_function_(		"SDL_GL_Lock", ctypes.c_void_p, [] )

SDL_GL_Unlock = _rpythonic_function_(		"SDL_GL_Unlock", ctypes.c_void_p, [] )

SDL_WM_SetCaption = _rpythonic_function_(		"SDL_WM_SetCaption", ctypes.c_void_p, [
	("title",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.POINTER(ctypes.c_char)),] )

SDL_WM_GetCaption = _rpythonic_function_(		"SDL_WM_GetCaption", ctypes.c_void_p, [
	("title",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("icon",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

SDL_WM_SetIcon = _rpythonic_function_(		"SDL_WM_SetIcon", ctypes.c_void_p, [
	("icon",		ctypes.POINTER(SDL_Surface)),
	("mask",		ctypes.POINTER(ctypes.c_uint8)),] )

SDL_WM_IconifyWindow = _rpythonic_function_(		"SDL_WM_IconifyWindow", ctypes.c_int, [] )

SDL_WM_ToggleFullScreen = _rpythonic_function_(		"SDL_WM_ToggleFullScreen", ctypes.c_int, [
	("surface",		ctypes.POINTER(SDL_Surface)),] )

SDL_DisplayFormat = _rpythonic_function_(		"SDL_DisplayFormat", ctypes.POINTER(SDL_Surface), [
	("surface",		ctypes.POINTER(SDL_Surface)),] )

SDL_DisplayFormatAlpha = _rpythonic_function_(		"SDL_DisplayFormatAlpha", ctypes.POINTER(SDL_Surface), [
	("surface",		ctypes.POINTER(SDL_Surface)),] )

SDL_CreateYUVOverlay = _rpythonic_function_(		"SDL_CreateYUVOverlay", ctypes.POINTER(SDL_Overlay), [
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("format",		ctypes.c_uint32),
	("display",		ctypes.POINTER(SDL_Surface)),] )

SDL_LockYUVOverlay = _rpythonic_function_(		"SDL_LockYUVOverlay", ctypes.c_int, [
	("overlay",		ctypes.POINTER(SDL_Overlay)),] )

SDL_UnlockYUVOverlay = _rpythonic_function_(		"SDL_UnlockYUVOverlay", ctypes.c_void_p, [
	("overlay",		ctypes.POINTER(SDL_Overlay)),] )

SDL_DisplayYUVOverlay = _rpythonic_function_(		"SDL_DisplayYUVOverlay", ctypes.c_int, [
	("overlay",		ctypes.POINTER(SDL_Overlay)),
	("dstrect",		ctypes.POINTER(SDL_Rect)),] )

SDL_FreeYUVOverlay = _rpythonic_function_(		"SDL_FreeYUVOverlay", ctypes.c_void_p, [
	("overlay",		ctypes.POINTER(SDL_Overlay)),] )

SDL_GL_LoadLibrary = _rpythonic_function_(		"SDL_GL_LoadLibrary", ctypes.c_int, [
	("path",		ctypes.POINTER(ctypes.c_char)),] )

SDL_GL_GetProcAddress = _rpythonic_function_(		"SDL_GL_GetProcAddress", ctypes.POINTER(ctypes.c_void_p), [
	("proc",		ctypes.POINTER(ctypes.c_char)),] )

SDL_GL_SetAttribute = _rpythonic_function_(		"SDL_GL_SetAttribute", ctypes.c_int, [
	("attr",		ctypes.c_int),
	("value",		ctypes.c_int),] )

SDL_SetClipRect = _rpythonic_function_(		"SDL_SetClipRect", ctypes.c_int, [
	("surface",		ctypes.POINTER(SDL_Surface)),
	("rect",		ctypes.POINTER(SDL_Rect)),] )

SDL_GetClipRect = _rpythonic_function_(		"SDL_GetClipRect", ctypes.c_void_p, [
	("surface",		ctypes.POINTER(SDL_Surface)),
	("rect",		ctypes.POINTER(SDL_Rect)),] )

SDL_ConvertSurface = _rpythonic_function_(		"SDL_ConvertSurface", ctypes.POINTER(SDL_Surface), [
	("src",		ctypes.POINTER(SDL_Surface)),
	("fmt",		ctypes.POINTER(SDL_PixelFormat)),
	("flags",		ctypes.c_uint32),] )

SDL_UpperBlit = _rpythonic_function_(		"SDL_UpperBlit", ctypes.c_int, [
	("src",		ctypes.POINTER(SDL_Surface)),
	("srcrect",		ctypes.POINTER(SDL_Rect)),
	("dst",		ctypes.POINTER(SDL_Surface)),
	("dstrect",		ctypes.POINTER(SDL_Rect)),] )

SDL_LowerBlit = _rpythonic_function_(		"SDL_LowerBlit", ctypes.c_int, [
	("src",		ctypes.POINTER(SDL_Surface)),
	("srcrect",		ctypes.POINTER(SDL_Rect)),
	("dst",		ctypes.POINTER(SDL_Surface)),
	("dstrect",		ctypes.POINTER(SDL_Rect)),] )

SDL_FillRect = _rpythonic_function_(		"SDL_FillRect", ctypes.c_int, [
	("dst",		ctypes.POINTER(SDL_Surface)),
	("dstrect",		ctypes.POINTER(SDL_Rect)),
	("color",		ctypes.c_uint32),] )

SDL_CreateRGBSurfaceFrom = _rpythonic_function_(		"SDL_CreateRGBSurfaceFrom", ctypes.POINTER(SDL_Surface), [
	("pixels",		ctypes.POINTER(ctypes.c_void_p)),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("depth",		ctypes.c_int),
	("pitch",		ctypes.c_int),
	("Rmask",		ctypes.c_uint32),
	("Gmask",		ctypes.c_uint32),
	("Bmask",		ctypes.c_uint32),
	("Amask",		ctypes.c_uint32),] )

SDL_FreeSurface = _rpythonic_function_(		"SDL_FreeSurface", ctypes.c_void_p, [
	("surface",		ctypes.POINTER(SDL_Surface)),] )

SDL_LockSurface = _rpythonic_function_(		"SDL_LockSurface", ctypes.c_int, [
	("surface",		ctypes.POINTER(SDL_Surface)),] )

SDL_UnlockSurface = _rpythonic_function_(		"SDL_UnlockSurface", ctypes.c_void_p, [
	("surface",		ctypes.POINTER(SDL_Surface)),] )

SDL_LoadBMP_RW = _rpythonic_function_(		"SDL_LoadBMP_RW", ctypes.POINTER(SDL_Surface), [
	("src",		ctypes.POINTER(SDL_RWops)),
	("freesrc",		ctypes.c_int),] )

SDL_SaveBMP_RW = _rpythonic_function_(		"SDL_SaveBMP_RW", ctypes.c_int, [
	("surface",		ctypes.POINTER(SDL_Surface)),
	("dst",		ctypes.POINTER(SDL_RWops)),
	("freedst",		ctypes.c_int),] )

SDL_SetColorKey = _rpythonic_function_(		"SDL_SetColorKey", ctypes.c_int, [
	("surface",		ctypes.POINTER(SDL_Surface)),
	("flag",		ctypes.c_uint32),
	("key",		ctypes.c_uint32),] )

SDL_SetAlpha = _rpythonic_function_(		"SDL_SetAlpha", ctypes.c_int, [
	("surface",		ctypes.POINTER(SDL_Surface)),
	("flag",		ctypes.c_uint32),
	("alpha",		ctypes.c_uint8),] )

SDL_MapRGBA = _rpythonic_function_(		"SDL_MapRGBA", ctypes.c_uint32, [
	("format",		ctypes.POINTER(SDL_PixelFormat)),
	("r",		ctypes.c_uint8),
	("g",		ctypes.c_uint8),
	("b",		ctypes.c_uint8),
	("a",		ctypes.c_uint8),] )

SDL_GetRGB = _rpythonic_function_(		"SDL_GetRGB", ctypes.c_void_p, [
	("pixel",		ctypes.c_uint32),
	("fmt",		ctypes.POINTER(SDL_PixelFormat)),
	("r",		ctypes.POINTER(ctypes.c_uint8)),
	("g",		ctypes.POINTER(ctypes.c_uint8)),
	("b",		ctypes.POINTER(ctypes.c_uint8)),] )

SDL_GetRGBA = _rpythonic_function_(		"SDL_GetRGBA", ctypes.c_void_p, [
	("pixel",		ctypes.c_uint32),
	("fmt",		ctypes.POINTER(SDL_PixelFormat)),
	("r",		ctypes.POINTER(ctypes.c_uint8)),
	("g",		ctypes.POINTER(ctypes.c_uint8)),
	("b",		ctypes.POINTER(ctypes.c_uint8)),
	("a",		ctypes.POINTER(ctypes.c_uint8)),] )

SDL_CreateRGBSurface = _rpythonic_function_(		"SDL_CreateRGBSurface", ctypes.POINTER(SDL_Surface), [
	("flags",		ctypes.c_uint32),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("depth",		ctypes.c_int),
	("Rmask",		ctypes.c_uint32),
	("Gmask",		ctypes.c_uint32),
	("Bmask",		ctypes.c_uint32),
	("Amask",		ctypes.c_uint32),] )

SDL_Flip = _rpythonic_function_(		"SDL_Flip", ctypes.c_int, [
	("screen",		ctypes.POINTER(SDL_Surface)),] )

SDL_SetGamma = _rpythonic_function_(		"SDL_SetGamma", ctypes.c_int, [
	("red",		ctypes.c_float),
	("green",		ctypes.c_float),
	("blue",		ctypes.c_float),] )

SDL_SetGammaRamp = _rpythonic_function_(		"SDL_SetGammaRamp", ctypes.c_int, [
	("red",		ctypes.POINTER(ctypes.c_uint16)),
	("green",		ctypes.POINTER(ctypes.c_uint16)),
	("blue",		ctypes.POINTER(ctypes.c_uint16)),] )

SDL_GetGammaRamp = _rpythonic_function_(		"SDL_GetGammaRamp", ctypes.c_int, [
	("red",		ctypes.POINTER(ctypes.c_uint16)),
	("green",		ctypes.POINTER(ctypes.c_uint16)),
	("blue",		ctypes.POINTER(ctypes.c_uint16)),] )

SDL_SetColors = _rpythonic_function_(		"SDL_SetColors", ctypes.c_int, [
	("surface",		ctypes.POINTER(SDL_Surface)),
	("colors",		ctypes.POINTER(SDL_Color)),
	("firstcolor",		ctypes.c_int),
	("ncolors",		ctypes.c_int),] )

SDL_SetPalette = _rpythonic_function_(		"SDL_SetPalette", ctypes.c_int, [
	("surface",		ctypes.POINTER(SDL_Surface)),
	("flags",		ctypes.c_int),
	("colors",		ctypes.POINTER(SDL_Color)),
	("firstcolor",		ctypes.c_int),
	("ncolors",		ctypes.c_int),] )

SDL_MapRGB = _rpythonic_function_(		"SDL_MapRGB", ctypes.c_uint32, [
	("format",		ctypes.POINTER(SDL_PixelFormat)),
	("r",		ctypes.c_uint8),
	("g",		ctypes.c_uint8),
	("b",		ctypes.c_uint8),] )

SDL_VideoDriverName = _rpythonic_function_(		"SDL_VideoDriverName", ctypes.POINTER(ctypes.c_char), [
	("namebuf",		ctypes.POINTER(ctypes.c_char)),
	("maxlen",		ctypes.c_int),] )

SDL_GetVideoSurface = _rpythonic_function_(		"SDL_GetVideoSurface", ctypes.POINTER(SDL_Surface), [] )

SDL_GetVideoInfo = _rpythonic_function_(		"SDL_GetVideoInfo", ctypes.POINTER(SDL_VideoInfo), [] )

SDL_VideoModeOK = _rpythonic_function_(		"SDL_VideoModeOK", ctypes.c_int, [
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("bpp",		ctypes.c_int),
	("flags",		ctypes.c_uint32),] )

SDL_ListModes = _rpythonic_function_(		"SDL_ListModes", ctypes.POINTER(ctypes.POINTER(SDL_Rect)), [
	("format",		ctypes.POINTER(SDL_PixelFormat)),
	("flags",		ctypes.c_uint32),] )

SDL_SetVideoMode = _rpythonic_function_(		"SDL_SetVideoMode", ctypes.POINTER(SDL_Surface), [
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("bpp",		ctypes.c_int),
	("flags",		ctypes.c_uint32),] )

SDL_UpdateRects = _rpythonic_function_(		"SDL_UpdateRects", ctypes.c_void_p, [
	("screen",		ctypes.POINTER(SDL_Surface)),
	("numrects",		ctypes.c_int),
	("rects",		ctypes.POINTER(SDL_Rect)),] )

SDL_UpdateRect = _rpythonic_function_(		"SDL_UpdateRect", ctypes.c_void_p, [
	("screen",		ctypes.POINTER(SDL_Surface)),
	("x",		ctypes.c_int32),
	("y",		ctypes.c_int32),
	("w",		ctypes.c_uint32),
	("h",		ctypes.c_uint32),] )

SDL_blit = _rpythonic_function_(		"SDL_blit", ctypes.c_int, [
	("src",		ctypes.POINTER(SDL_Surface)),
	("srcrect",		ctypes.POINTER(SDL_Rect)),
	("dst",		ctypes.POINTER(SDL_Surface)),
	("dstrect",		ctypes.POINTER(SDL_Rect)),] )

SDL_EnableUNICODE = _rpythonic_function_(		"SDL_EnableUNICODE", ctypes.c_int, [
	("enable",		ctypes.c_int),] )

SDL_EnableKeyRepeat = _rpythonic_function_(		"SDL_EnableKeyRepeat", ctypes.c_int, [
	("delay",		ctypes.c_int),
	("interval",		ctypes.c_int),] )

SDL_GetKeyRepeat = _rpythonic_function_(		"SDL_GetKeyRepeat", ctypes.c_void_p, [
	("delay",		ctypes.POINTER(ctypes.c_int)),
	("interval",		ctypes.POINTER(ctypes.c_int)),] )

SDL_GetKeyState = _rpythonic_function_(		"SDL_GetKeyState", ctypes.POINTER(ctypes.c_uint8), [
	("numkeys",		ctypes.POINTER(ctypes.c_int)),] )

SDL_GetModState = _rpythonic_function_(		"SDL_GetModState", ctypes.c_int, [] )

SDL_SetModState = _rpythonic_function_(		"SDL_SetModState", ctypes.c_void_p, [
	("modstate",		ctypes.c_int),] )

SDL_GetKeyName = _rpythonic_function_(		"SDL_GetKeyName", ctypes.POINTER(ctypes.c_char), [
	("key",		ctypes.c_int),] )

SDL_CDClose = _rpythonic_function_(		"SDL_CDClose", ctypes.c_void_p, [
	("cdrom",		ctypes.POINTER(SDL_CD)),] )

SDL_HasRDTSC = _rpythonic_function_(		"SDL_HasRDTSC", ctypes.c_int, [] )

SDL_HasMMX = _rpythonic_function_(		"SDL_HasMMX", ctypes.c_int, [] )

SDL_HasMMXExt = _rpythonic_function_(		"SDL_HasMMXExt", ctypes.c_int, [] )

SDL_Has3DNow = _rpythonic_function_(		"SDL_Has3DNow", ctypes.c_int, [] )

SDL_Has3DNowExt = _rpythonic_function_(		"SDL_Has3DNowExt", ctypes.c_int, [] )

SDL_HasSSE = _rpythonic_function_(		"SDL_HasSSE", ctypes.c_int, [] )

SDL_HasSSE2 = _rpythonic_function_(		"SDL_HasSSE2", ctypes.c_int, [] )

SDL_HasAltiVec = _rpythonic_function_(		"SDL_HasAltiVec", ctypes.c_int, [] )

SDL_GetAppState = _rpythonic_function_(		"SDL_GetAppState", ctypes.c_uint8, [] )

SDL_CDNumDrives = _rpythonic_function_(		"SDL_CDNumDrives", ctypes.c_int, [] )

SDL_CDName = _rpythonic_function_(		"SDL_CDName", ctypes.POINTER(ctypes.c_char), [
	("drive",		ctypes.c_int),] )

SDL_CDOpen = _rpythonic_function_(		"SDL_CDOpen", ctypes.POINTER(SDL_CD), [
	("drive",		ctypes.c_int),] )

SDL_CDStatus = _rpythonic_function_(		"SDL_CDStatus", ctypes.c_int, [
	("cdrom",		ctypes.POINTER(SDL_CD)),] )

SDL_CDPlayTracks = _rpythonic_function_(		"SDL_CDPlayTracks", ctypes.c_int, [
	("cdrom",		ctypes.POINTER(SDL_CD)),
	("start_track",		ctypes.c_int),
	("start_frame",		ctypes.c_int),
	("ntracks",		ctypes.c_int),
	("nframes",		ctypes.c_int),] )

SDL_CDPlay = _rpythonic_function_(		"SDL_CDPlay", ctypes.c_int, [
	("cdrom",		ctypes.POINTER(SDL_CD)),
	("start",		ctypes.c_int),
	("length",		ctypes.c_int),] )

SDL_CDPause = _rpythonic_function_(		"SDL_CDPause", ctypes.c_int, [
	("cdrom",		ctypes.POINTER(SDL_CD)),] )

SDL_CDResume = _rpythonic_function_(		"SDL_CDResume", ctypes.c_int, [
	("cdrom",		ctypes.POINTER(SDL_CD)),] )

SDL_CDStop = _rpythonic_function_(		"SDL_CDStop", ctypes.c_int, [
	("cdrom",		ctypes.POINTER(SDL_CD)),] )

SDL_CDEject = _rpythonic_function_(		"SDL_CDEject", ctypes.c_int, [
	("cdrom",		ctypes.POINTER(SDL_CD)),] )

SDL_AudioInit = _rpythonic_function_(		"SDL_AudioInit", ctypes.c_int, [
	("driver_name",		ctypes.POINTER(ctypes.c_char)),] )

SDL_AudioQuit = _rpythonic_function_(		"SDL_AudioQuit", ctypes.c_void_p, [] )

SDL_AudioDriverName = _rpythonic_function_(		"SDL_AudioDriverName", ctypes.POINTER(ctypes.c_char), [
	("namebuf",		ctypes.POINTER(ctypes.c_char)),
	("maxlen",		ctypes.c_int),] )

SDL_OpenAudio = _rpythonic_function_(		"SDL_OpenAudio", ctypes.c_int, [
	("desired",		ctypes.POINTER(SDL_AudioSpec)),
	("obtained",		ctypes.POINTER(SDL_AudioSpec)),] )

SDL_GetAudioStatus = _rpythonic_function_(		"SDL_GetAudioStatus", ctypes.c_int, [] )

SDL_PauseAudio = _rpythonic_function_(		"SDL_PauseAudio", ctypes.c_void_p, [
	("pause_on",		ctypes.c_int),] )

SDL_LoadWAV_RW = _rpythonic_function_(		"SDL_LoadWAV_RW", ctypes.POINTER(SDL_AudioSpec), [
	("src",		ctypes.POINTER(SDL_RWops)),
	("freesrc",		ctypes.c_int),
	("spec",		ctypes.POINTER(SDL_AudioSpec)),
	("audio_buf",		ctypes.POINTER(ctypes.POINTER(ctypes.c_uint8))),
	("audio_len",		ctypes.POINTER(ctypes.c_uint32)),] )

SDL_FreeWAV = _rpythonic_function_(		"SDL_FreeWAV", ctypes.c_void_p, [
	("audio_buf",		ctypes.POINTER(ctypes.c_uint8)),] )

SDL_BuildAudioCVT = _rpythonic_function_(		"SDL_BuildAudioCVT", ctypes.c_int, [
	("cvt",		ctypes.POINTER(SDL_AudioCVT)),
	("src_format",		ctypes.c_uint16),
	("src_channels",		ctypes.c_uint8),
	("src_rate",		ctypes.c_int),
	("dst_format",		ctypes.c_uint16),
	("dst_channels",		ctypes.c_uint8),
	("dst_rate",		ctypes.c_int),] )

SDL_ConvertAudio = _rpythonic_function_(		"SDL_ConvertAudio", ctypes.c_int, [
	("cvt",		ctypes.POINTER(SDL_AudioCVT)),] )

SDL_MixAudio = _rpythonic_function_(		"SDL_MixAudio", ctypes.c_void_p, [
	("dst",		ctypes.POINTER(ctypes.c_uint8)),
	("src",		ctypes.POINTER(ctypes.c_uint8)),
	("C_len",		ctypes.c_uint32),
	("volume",		ctypes.c_int),] )

SDL_LockAudio = _rpythonic_function_(		"SDL_LockAudio", ctypes.c_void_p, [] )

SDL_UnlockAudio = _rpythonic_function_(		"SDL_UnlockAudio", ctypes.c_void_p, [] )

SDL_CloseAudio = _rpythonic_function_(		"SDL_CloseAudio", ctypes.c_void_p, [] )

SDL_WriteLE64 = _rpythonic_function_(		"SDL_WriteLE64", ctypes.c_int, [
	("dst",		ctypes.POINTER(SDL_RWops)),
	("value",		ctypes.c_uint64),] )

SDL_WriteBE64 = _rpythonic_function_(		"SDL_WriteBE64", ctypes.c_int, [
	("dst",		ctypes.POINTER(SDL_RWops)),
	("value",		ctypes.c_uint64),] )

callback = _rpythonic_function_(		"callback", ctypes.c_void_p, [
	("userdata",		ctypes.POINTER(ctypes.c_void_p)),
	("stream",		ctypes.POINTER(ctypes.c_uint8)),
	("C_len",		ctypes.c_int),] )

filters = _rpythonic_function_(		"filters", ( ctypes.c_void_p * 10 ), [
	("cvt",		ctypes.POINTER(( SDL_AudioCVT * 10 ))),
	("format",		( ctypes.c_uint16 * 10 )),] )

SDL_ReadLE16 = _rpythonic_function_(		"SDL_ReadLE16", ctypes.c_uint16, [
	("src",		ctypes.POINTER(SDL_RWops)),] )

SDL_ReadBE16 = _rpythonic_function_(		"SDL_ReadBE16", ctypes.c_uint16, [
	("src",		ctypes.POINTER(SDL_RWops)),] )

SDL_ReadLE32 = _rpythonic_function_(		"SDL_ReadLE32", ctypes.c_uint32, [
	("src",		ctypes.POINTER(SDL_RWops)),] )

SDL_ReadBE32 = _rpythonic_function_(		"SDL_ReadBE32", ctypes.c_uint32, [
	("src",		ctypes.POINTER(SDL_RWops)),] )

SDL_ReadLE64 = _rpythonic_function_(		"SDL_ReadLE64", ctypes.c_uint64, [
	("src",		ctypes.POINTER(SDL_RWops)),] )

SDL_ReadBE64 = _rpythonic_function_(		"SDL_ReadBE64", ctypes.c_uint64, [
	("src",		ctypes.POINTER(SDL_RWops)),] )

SDL_WriteLE16 = _rpythonic_function_(		"SDL_WriteLE16", ctypes.c_int, [
	("dst",		ctypes.POINTER(SDL_RWops)),
	("value",		ctypes.c_uint16),] )

SDL_WriteBE16 = _rpythonic_function_(		"SDL_WriteBE16", ctypes.c_int, [
	("dst",		ctypes.POINTER(SDL_RWops)),
	("value",		ctypes.c_uint16),] )

SDL_WriteLE32 = _rpythonic_function_(		"SDL_WriteLE32", ctypes.c_int, [
	("dst",		ctypes.POINTER(SDL_RWops)),
	("value",		ctypes.c_uint32),] )

SDL_WriteBE32 = _rpythonic_function_(		"SDL_WriteBE32", ctypes.c_int, [
	("dst",		ctypes.POINTER(SDL_RWops)),
	("value",		ctypes.c_uint32),] )

SDL_RWFromFile = _rpythonic_function_(		"SDL_RWFromFile", ctypes.POINTER(SDL_RWops), [
	("file",		ctypes.POINTER(ctypes.c_char)),
	("mode",		ctypes.POINTER(ctypes.c_char)),] )

SDL_RWFromFP = _rpythonic_function_(		"SDL_RWFromFP", ctypes.POINTER(SDL_RWops), [
	("fp",		ctypes.POINTER(_IO_FILE)),
	("autoclose",		ctypes.c_int),] )

SDL_RWFromMem = _rpythonic_function_(		"SDL_RWFromMem", ctypes.POINTER(SDL_RWops), [
	("mem",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.c_int),] )

SDL_RWFromConstMem = _rpythonic_function_(		"SDL_RWFromConstMem", ctypes.POINTER(SDL_RWops), [
	("mem",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.c_int),] )

SDL_AllocRW = _rpythonic_function_(		"SDL_AllocRW", ctypes.POINTER(SDL_RWops), [] )

SDL_FreeRW = _rpythonic_function_(		"SDL_FreeRW", ctypes.c_void_p, [
	("area",		ctypes.POINTER(SDL_RWops)),] )

SDL_ThreadID = _rpythonic_function_(		"SDL_ThreadID", ctypes.c_uint32, [] )

SDL_GetThreadID = _rpythonic_function_(		"SDL_GetThreadID", ctypes.c_uint32, [
	("thread",		ctypes.POINTER(SDL_Thread)),] )

SDL_WaitThread = _rpythonic_function_(		"SDL_WaitThread", ctypes.c_void_p, [
	("thread",		ctypes.POINTER(SDL_Thread)),
	("status",		ctypes.POINTER(ctypes.c_int)),] )

SDL_KillThread = _rpythonic_function_(		"SDL_KillThread", ctypes.c_void_p, [
	("thread",		ctypes.POINTER(SDL_Thread)),] )

seek = _rpythonic_function_(		"seek", ctypes.c_int, [
	("context",		ctypes.POINTER(SDL_RWops)),
	("offset",		ctypes.c_int),
	("whence",		ctypes.c_int),] )

read = _rpythonic_function_(		"read", ctypes.c_int, [
	("context",		ctypes.POINTER(SDL_RWops)),
	("ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.c_int),
	("maxnum",		ctypes.c_int),] )

write = _rpythonic_function_(		"write", ctypes.c_int, [
	("context",		ctypes.POINTER(SDL_RWops)),
	("ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.c_int),
	("num",		ctypes.c_int),] )

close = _rpythonic_function_(		"close", ctypes.c_int, [
	("context",		ctypes.POINTER(SDL_RWops)),] )

SDL_CreateCond = _rpythonic_function_(		"SDL_CreateCond", ctypes.POINTER(SDL_cond), [] )

SDL_DestroyCond = _rpythonic_function_(		"SDL_DestroyCond", ctypes.c_void_p, [
	("cond",		ctypes.POINTER(SDL_cond)),] )

SDL_CondSignal = _rpythonic_function_(		"SDL_CondSignal", ctypes.c_int, [
	("cond",		ctypes.POINTER(SDL_cond)),] )

SDL_CondBroadcast = _rpythonic_function_(		"SDL_CondBroadcast", ctypes.c_int, [
	("cond",		ctypes.POINTER(SDL_cond)),] )

SDL_CondWait = _rpythonic_function_(		"SDL_CondWait", ctypes.c_int, [
	("cond",		ctypes.POINTER(SDL_cond)),
	("mut",		ctypes.POINTER(SDL_mutex)),] )

SDL_CondWaitTimeout = _rpythonic_function_(		"SDL_CondWaitTimeout", ctypes.c_int, [
	("cond",		ctypes.POINTER(SDL_cond)),
	("mutex",		ctypes.POINTER(SDL_mutex)),
	("ms",		ctypes.c_uint32),] )

SDL_CreateThread = _rpythonic_function_(		"SDL_CreateThread", ctypes.POINTER(SDL_Thread), [
	("fn",		ctypes.c_void_p),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

fn = _rpythonic_function_(		"fn", ctypes.c_int, [] )

SDL_CreateMutex = _rpythonic_function_(		"SDL_CreateMutex", ctypes.POINTER(SDL_mutex), [] )

SDL_mutexP = _rpythonic_function_(		"SDL_mutexP", ctypes.c_int, [
	("mutex",		ctypes.POINTER(SDL_mutex)),] )

SDL_mutexV = _rpythonic_function_(		"SDL_mutexV", ctypes.c_int, [
	("mutex",		ctypes.POINTER(SDL_mutex)),] )

SDL_DestroyMutex = _rpythonic_function_(		"SDL_DestroyMutex", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(SDL_mutex)),] )

SDL_CreateSemaphore = _rpythonic_function_(		"SDL_CreateSemaphore", ctypes.POINTER(SDL_semaphore), [
	("initial_value",		ctypes.c_uint32),] )

SDL_DestroySemaphore = _rpythonic_function_(		"SDL_DestroySemaphore", ctypes.c_void_p, [
	("sem",		ctypes.POINTER(SDL_semaphore)),] )

SDL_SemWait = _rpythonic_function_(		"SDL_SemWait", ctypes.c_int, [
	("sem",		ctypes.POINTER(SDL_semaphore)),] )

SDL_SemTryWait = _rpythonic_function_(		"SDL_SemTryWait", ctypes.c_int, [
	("sem",		ctypes.POINTER(SDL_semaphore)),] )

SDL_SemWaitTimeout = _rpythonic_function_(		"SDL_SemWaitTimeout", ctypes.c_int, [
	("sem",		ctypes.POINTER(SDL_semaphore)),
	("ms",		ctypes.c_uint32),] )

SDL_SemPost = _rpythonic_function_(		"SDL_SemPost", ctypes.c_int, [
	("sem",		ctypes.POINTER(SDL_semaphore)),] )

SDL_SemValue = _rpythonic_function_(		"SDL_SemValue", ctypes.c_uint32, [
	("sem",		ctypes.POINTER(SDL_semaphore)),] )


_rpythonic_convert_structs_to_objects()

_rpythonic_setup_return_wrappers()
_rpythonic_make_nice_global_enums_()
_rpythonic_clean_up_missing_functions_()

################### Raymond Hettinger's Constant Folding ##################
# Decorator for BindingConstants at compile time
# A recipe by Raymond Hettinger, from Python Cookbook:
# http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/277940
# updated for Python3 and still compatible with Python2 - by Hart, May17th 2011

try: _BUILTINS_DICT_ = vars(__builtins__)
except: _BUILTINS_DICT_ = __builtins__
ISPYTHON2 = sys.version_info[0] == 2
_HETTINGER_FOLDS_ = 0

def _hettinger_make_constants(f, builtin_only=False, stoplist=[], verbose=0):
    from opcode import opmap, HAVE_ARGUMENT, EXTENDED_ARG
    global _HETTINGER_FOLDS_
    try:
        if ISPYTHON2: co = f.func_code; fname = f.func_name
        else: co = f.__code__; fname = f.__name__
    except AttributeError: return f        # Jython doesn't have a func_code attribute.
    if ISPYTHON2: newcode = map(ord, co.co_code)
    else: newcode = list( co.co_code )
    newconsts = list(co.co_consts)
    names = co.co_names
    codelen = len(newcode)
    if ISPYTHON2:
        if verbose >= 2: print( f.func_name )
        func_globals = f.func_globals
    else:
        if verbose >= 2: print( f.__name__ )
        func_globals = f.__globals__

    env = _BUILTINS_DICT_.copy()
    if builtin_only:
        stoplist = dict.fromkeys(stoplist)
        stoplist.update(func_globals)
    else:
        env.update(func_globals)

    # First pass converts global lookups into constants
    i = 0
    while i < codelen:
        opcode = newcode[i]
        if opcode in (EXTENDED_ARG, opmap['STORE_GLOBAL']):
            if verbose >= 1: print('skipping function', fname)
            return f    # for simplicity, only optimize common cases
        if opcode == opmap['LOAD_GLOBAL']:
            oparg = newcode[i+1] + (newcode[i+2] << 8)
            name = co.co_names[oparg]
            if name in env and name not in stoplist:
                value = env[name]
                for pos, v in enumerate(newconsts):
                    if v is value:
                        break
                else:
                    pos = len(newconsts)
                    newconsts.append(value)
                newcode[i] = opmap['LOAD_CONST']
                newcode[i+1] = pos & 0xFF
                newcode[i+2] = pos >> 8
                _HETTINGER_FOLDS_ += 1
                if verbose >= 2:
                    print( "    global constant fold:", name )
        i += 1
        if opcode >= HAVE_ARGUMENT:
            i += 2

    # Second pass folds tuples of constants and constant attribute lookups
    i = 0
    while i < codelen:

        newtuple = []
        while newcode[i] == opmap['LOAD_CONST']:
            oparg = newcode[i+1] + (newcode[i+2] << 8)
            newtuple.append(newconsts[oparg])
            i += 3

        opcode = newcode[i]
        if not newtuple:
            i += 1
            if opcode >= HAVE_ARGUMENT:
                i += 2
            continue

        if opcode == opmap['LOAD_ATTR']:
            obj = newtuple[-1]
            oparg = newcode[i+1] + (newcode[i+2] << 8)
            name = names[oparg]
            try:
                value = getattr(obj, name)
                if verbose >= 2: print( '    folding attribute', name )
            except AttributeError:
                continue
            deletions = 1

        elif opcode == opmap['BUILD_TUPLE']:
            oparg = newcode[i+1] + (newcode[i+2] << 8)
            if oparg != len(newtuple): continue
            deletions = len(newtuple)
            value = tuple(newtuple)

        else: continue

        reljump = deletions * 3
        newcode[i-reljump] = opmap['JUMP_FORWARD']
        newcode[i-reljump+1] = (reljump-3) & 0xFF
        newcode[i-reljump+2] = (reljump-3) >> 8

        n = len(newconsts)
        newconsts.append(value)
        newcode[i] = opmap['LOAD_CONST']
        newcode[i+1] = n & 0xFF
        newcode[i+2] = n >> 8
        i += 3
        _HETTINGER_FOLDS_ += 1
        if verbose >= 2:
            print( "    folded constant:",value )

    if ISPYTHON2:
        codestr = ''.join(map(chr, newcode))
        codeobj = type(co)(co.co_argcount, co.co_nlocals, co.co_stacksize,
                        co.co_flags, codestr, tuple(newconsts), co.co_names,
                        co.co_varnames, co.co_filename, co.co_name,
                        co.co_firstlineno, co.co_lnotab, co.co_freevars,
                        co.co_cellvars)
        return type(f)(codeobj, f.func_globals, f.func_name, f.func_defaults, f.func_closure)
    else:
        codestr = b''
        for s in newcode: codestr += s.to_bytes(1,'little')
        codeobj = type(co)(co.co_argcount, co.co_kwonlyargcount, co.co_nlocals, co.co_stacksize,
                        co.co_flags, codestr, tuple(newconsts), co.co_names,
                        co.co_varnames, co.co_filename, co.co_name,
                        co.co_firstlineno, co.co_lnotab, co.co_freevars,
                        co.co_cellvars)
        return type(f)(codeobj, f.__globals__, f.__name__, f.__defaults__, f.__closure__)


def hettinger_bind_recursive(mc, builtin_only=False, stoplist=[],  verbose=0):
    """Recursively apply constant binding to functions in a module or class.

    Use as the last line of the module (after everything is defined, but
    before test code).  In modules that need modifiable globals, set
    builtin_only to True.

    """
    import types
    try: d = vars(mc)
    except TypeError: return
    if ISPYTHON2: recursivetypes = (type, types.ClassType)
    else: recursivetypes = (type,)
    for k, v in d.items():
        if type(v) is types.FunctionType:
            newv = _hettinger_make_constants(v, builtin_only, stoplist,  verbose)
            setattr(mc, k, newv)
        elif type(v) in recursivetypes:
            hettinger_bind_recursive(v, builtin_only, stoplist, verbose)

def hettinger_transform( module=None ):
    global _HETTINGER_FOLDS_
    _HETTINGER_FOLDS_ = 0
    if not module: module = sys.modules[__name__]
    hettinger_bind_recursive( module, verbose=1 )
    print( 'HETTINGER: constants folded', _HETTINGER_FOLDS_ )

_rpythonic_strip_prefixes_(['SDL_'])