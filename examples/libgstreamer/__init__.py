## generated by RPythonic 0.4.5b
## http://code.google.com/p/rpythonic/
import os, sys, ctypes, inspect
__os = os
__sys = sys
__inspect = inspect

PYTHON_RESERVED_KEYWORDS = 'for while in as global with try except lambda return raise if else elif eval exec and not or break continue finally print yield del def class assert from is pass'.split()


IS32BIT = (ctypes.sizeof(ctypes.c_void_p)==4)

_ISPYTHON2 = sys.version_info[0] == 2
if _ISPYTHON2: _NULLBYTE = '\0'
else: _NULLBYTE = bytes( chr(0), 'ascii' )

def _CHARP2STRING( charp, encoding='utf-8' ):
	b = bytes()
	i = 0
	while True:
		char = charp[ i ]
		if char == _NULLBYTE: break
		else:
			b += char
			i += 1
	return b.decode( encoding )

## try to load precompiled c-libraries from this directory, if the library is not there try to load from the system.
_clibs_dir = os.path.dirname(os.path.abspath(__file__))

def _load_ctypes_lib( name ):
	if __os.name == 'posix':
		if __sys.platform.startswith('linux'):
			if not name.endswith('.so'): name += '.so'
			if not name.startswith('lib'): name = 'lib' + name

			if IS32BIT: 	path = __os.path.join(_clibs_dir,'linux32')
			else: 		path = __os.path.join(_clibs_dir,'linux64')
			url = __os.path.join( path, name )
			if __os.path.isfile( url ): return ctypes.CDLL(url)
			elif __os.path.isfile( '/usr/local/lib/%s'%name ): return ctypes.CDLL('/usr/local/lib/%s'%name)
			elif __os.path.isfile( '/usr/local/lib64/%s'%name ) and not IS32BIT: return ctypes.CDLL('/usr/local/lib64/%s'%name)
			elif __os.path.isfile( '/usr/lib/%s'%name ): return ctypes.CDLL('/usr/lib/%s'%name)
			elif __os.path.isfile( './%s'%name ): return ctypes.CDLL('./%s'%name)
			
			elif __os.path.isfile( '/usr/lib/%s.0'%name ):	# Fedora style
				return ctypes.CDLL('/usr/lib/%s.0'%name )
			elif __os.path.isfile( '/usr/lib64/%s.0'%name ):	# Fedora style
				return ctypes.CDLL('/usr/lib64/%s.0'%name )

			else:	# fallback
				print('[ falling back to loading from current process ]')
				try: return ctypes.CDLL(name)
				except: return ctypes.CDLL('')

		elif sys.platform == 'darwin':
			name += '.dylib'
			if IS32BIT: 	path = os.path.join(_clibs_dir,'osx32')
			else: 		path = os.path.join(_clibs_dir,'osx64')
			url = os.path.join( path, name )
			if os.path.isfile( url ): return ctypes.CDLL(url)
			else: return ctypes.CDLL(name) #fallback

	elif os.name == 'nt':
		name += '.dll'
		if IS32BIT: 	path = os.path.join(_clibs_dir,'win32')
		else: 		path = os.path.join(_clibs_dir,'win64')
		url = os.path.join( path, name )
		if os.path.isfile( url ): return ctypes.CDLL(url)
		else: return ctypes.CDLL(name) #fallback


RPYTHONIC_WRAPPER_FUNCTIONS = {}
RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES = []
RPYTHONIC_AUTOPREFIX_IGNORE = []

## ctypes does not clearly expose these types ##
PyCFuncPtrType = type(ctypes.CFUNCTYPE(ctypes.c_void_p))
PyCArrayType = type( ctypes.c_int * 2 )
PyCPointerType = type( ctypes.POINTER(ctypes.c_int) )
PyCStructType = type( ctypes.Structure )
CArgObject = type( ctypes.byref(ctypes.c_int()) )

class _rpythonic_meta_(object):
	'''
	Reserved Attributes:
		POINTER
		CSTRUCT
		CAST
	'''
	_rpythonic_ = True		# workaround for now, must have a way to know if object is a meta from another module, isinstance(o,_rpythonic_meta_) will fail in those cases. another workaround could be check sys.modules for other rpythonic modules and fetch _rpythonic_meta_ from there.
	def __init__(self, *args, **kw ):							# cheap trick, abuse **kw, and look for "pointer", "cast"
		if kw and 'pointer' not in kw: raise SyntaxError	# sorry, you can not init with keywords
		elif kw and 'pointer' in kw:
			if 'cast' in kw and kw['cast']:
				self.POINTER = ctypes.cast( kw['pointer'], ctypes.POINTER(self.CSTRUCT) )
			else: self.POINTER = kw['pointer']
		else: self.POINTER = ctypes.pointer( self.CSTRUCT(*args) )
		self.POINTER.pyobject = self	# .pyobject is local to this pointer "object"

	def __getattr__(self,name):
		if hasattr( self.POINTER.contents, name ):
			return getattr( self.POINTER.contents, name )

		else:	# when rpythonic failed to generate good bindings - these lookups should be cached
			for parent in self._rpythonic_parent_classes_:
				if hasattr( parent, name ):
					method = getattr( parent, name )	# should check if it really is an unbound method
					if method in parent._rpythonic_unbound_lookup_:
						func = parent._rpythonic_unbound_lookup_[ method ]
						n = func.name
						if len(func.argnames) > 1:
							argnames = func.argnames[ 1 : ]
							a = ',' + '=None,'.join( argnames ) + '=None'
							b = ','.join( argnames )
						else: a = b = ''
						lamb = eval( 'lambda self %s: %s( self.POINTER, %s )' %(a,n,b) )
						setattr( self.__class__, name, lamb )
						#return lamb	# this would return the unbound lambda, must call getattr again
						return getattr( self, name )
					else:
						# this can happen if self also inherits from the same parent class,
						# assume that by continuing this reaches that shared parent class,
						# and the lambda above is created as normal.
						continue
			## last resort, load from global name space ##
			G = globals()
			if name in G: return lambda *args: G[name](self.POINTER, *args)
			else:
				for prefix in self._autoprefix_:
					n = prefix + name
					if n in G: return lambda *args: G[n](self.POINTER, *args)
				print( 'possible auto-prefixes available', self._autoprefix_ )
				raise AttributeError

	def __call__(self, type=False):
		print('calling object is DEPRECATED - use ob.POINTER or ob.CSTRUCT')
		if type: return self.CSTRUCT
		else: return self.POINTER


def _rpythonic_generate_subclass_( name, struct, functions ):
	head = 'class %s( _rpythonic_meta_ ):' %name
	body = [ 
		'_rpythonic_parent_classes_ = []' ,
		'_rpythonic_unbound_lookup_ = {}' 
	]

	names = [ func.name for func in functions ]

	possibles = {}
	rank = []		# rank by longest name
	if len(names) > 3000: print('too many functions to use this hack')
	else:
		for n1 in names:
			prefix = ''
			for i,char in enumerate(n1):
				prefix += char
				if prefix not in possibles:
					possibles[ prefix ] = 0
					for n2 in names:
						if n2.startswith( prefix ):
							possibles[ prefix ] += 1

					if not rank or len(prefix) > len(rank[-1]) and possibles[prefix] > len(names)/4:
						rank.append( prefix )

	top = []
	while rank:
		best = rank.pop()
		if possibles[best] > len(functions)/2 and best not in names:
			if best.endswith('_set_') or best.endswith('_get_'): best = best[ : -4 ]
			elif best.endswith('Set') or best.endswith('Get'): best = best[ : -3 ]

			rem = []
			for other in rank:
				if best.startswith(other): rem.append( other )
			for r in rem: rank.remove( r )

			if best not in top: top.append( best )

		if len(top) > 3: break

	for n in names:		# find shortest prefixes #
		prefix = ''
		for i,char in enumerate(n):		# cammelCase
			if i==0: prefix += char; continue
			if char.isupper() and len(prefix) >= 2: break
			prefix += char
		if prefix and prefix != n and len(prefix) >= 2:
			hits = 0
			for other in names:
				if other.startswith( prefix ): hits += 1
			if hits >= 2 and prefix not in top:
				top.append( prefix )
				if len(top) >= 6: break

	## setup full names
	for func in functions:
		n = func.name
		if len(func.argnames) > 1:
			argnames = func.argnames[ 1 : ]
			a = ',' + '=None,'.join( argnames ) + '=None'
			b = ','.join( argnames )
		else: a = b = ''

		fhead = 'def %s( self %s ):' %(n,a)
		fbody = ['return %s(self.POINTER, %s)' %(func.name,b)]
		g = fhead + '\n\t\t' + '\n\t\t'.join( fbody )
		body.append( g )
		#body.append( '%s._rpythonic_function_ = %s' %(func.name, func.name) )

	## setup short names ##
	for n in names:
		for prefix in top:
			if n.startswith(prefix) and n[len(prefix):] not in names:
				alt = n[ len(prefix) : ]
				if alt and alt != n and alt not in PYTHON_RESERVED_KEYWORDS and not alt.isdigit() and not alt[0].isdigit():
					body.append( '%s = %s' %(alt,n) )
					names.append( alt )

	gen = head + '\n\t' + '\n\t'.join( body )
	try: exec( gen )
	except:
		print( gen )
		raise SyntaxError

	klass = locals()[name]
	klass.CSTRUCT = struct	# ctypes struct class

	klass._autoprefix_ = top
	for func in functions:
		unbound = getattr( klass, func.name )
		klass._rpythonic_unbound_lookup_[ unbound ] = func
		# klass.longname is klass.shortname = False
		# klass.longname == klass.shortname = True
	return klass

def _rpythonic_convert_structs_to_objects():
	G = globals()
	for klass in _OOAPI_:
		altname = name = klass.__name__
		prefix = ''
		for i,char in enumerate(name):
			if i==0: prefix += char; continue
			if char.isupper(): break
			prefix += char
		if prefix and prefix != name:
			hits = 0
			for other in _OOAPI_:
				if other is not klass:
					if other.__name__.startswith( prefix ): hits += 1
			if hits >= 2:
				altname = name[ len(prefix) : ]

		funcs = _OOAPI_[ klass ]
		newklass = _rpythonic_generate_subclass_( altname, klass, funcs )
		klass._rpythonic_wrapper_class_ = newklass
		G[ name ] = newklass	# replace struct with wrapper
		if altname not in G: G[ altname ] = newklass	# safely define with nicer name
		elif altname != name: # odd cases, maybe a function that returns the object, almost never happens.
			print('WARN - not replacing something with struct wrapper:', G[altname] )


def _rpythonic_setup_return_wrappers():
	R = _rpythonic_function_
	for klass in _OOAPI_:
		if klass in _OOAPI_RETURNS_OBJECT_:
			for f in _OOAPI_RETURNS_OBJECT_[klass]:
				f.object_oriented = True
				if not f.return_wrapper:	# just in case the ctypes footer had already defined it, do not overwrite
					f.return_wrapper = klass._rpythonic_wrapper_class_

def _rpythonic_function_( name, result=ctypes.c_void_p, args=[]):
	mname = '_metafunc_%s' %name
	exec( 'class %s( _rpythonic_metafunc_ ): pass' %mname )
	k = locals()[mname]
	return k( name, result, args )

_OOAPI_ = {}
_OOAPI_RETURNS_OBJECT_ = {}

class _rpythonic_metafunc_(object):
	def __init__(self, name, result=ctypes.c_void_p, args=[]):
		self.name = name
		self.result = result
		self.argtypes = []		# can dynamically change CFUNCTYPE trick
		self.argnames = []
		self.argtypestypes = []
		for i,arg in enumerate(args):
			n,t = arg
			if n in PYTHON_RESERVED_KEYWORDS: n = 'C_'+n
			if n in self.argnames: n = '%s%s' %(n,i)
			self.argnames.append( n )
			self.argtypes.append( t )
			self.argtypestypes.append( type(t) )		# precomputed for speed

		self.argnames = tuple( self.argnames )				# should never change
		self.numargs = len( self.argtypes )
		self.callbacks = [None] * self.numargs
		self.return_wrapper = None
		self.object_oriented = False
		self.function = None
		try:
			func = self.function = getattr(CTYPES_DLL, self.name )
			RPYTHONIC_WRAPPER_FUNCTIONS[ name ] = self
		except:
			RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES.append( name )
		if self.function: self.reset()

	def change_argument_type( self, name, t ):
		idx = self.argnames.index( name )
		self.argtypes[ idx ] = t
		self.argtypestypes[ idx ] = type(t)
		self.function.argtypes = self.argtypes

	def reset(self):
		if self.argnames:
			a = ',' + '=None,'.join( self.argnames ) + '=None'
			b = ','.join( self.argnames )
		else: a = b = ''

		callmeth = eval( 'lambda self %s: self._call_( %s )' %(a,b) )
		setattr( self.__class__, '__call__', callmeth )

		self.function.restype = self.result
		self.function.argtypes = self.argtypes

		if type( self.result ) is PyCPointerType and type(self.result._type_) is PyCStructType:
			klass = self.result._type_
			if klass not in _OOAPI_RETURNS_OBJECT_: _OOAPI_RETURNS_OBJECT_[klass] = []
			_OOAPI_RETURNS_OBJECT_[klass].append( self )

		self.defaults = []
		for i in range( self.numargs ):
			T = self.argtypes[ i ]
			if type(T) is PyCFuncPtrType:
				p = T()	# func pointers can not be None
				self.defaults.append( p )
				self.callbacks[ i ] = p					# save reference
			elif T in (ctypes.c_int, ctypes.c_uint, ctypes.c_long, ctypes.c_ulong):
				self.defaults.append( 0 )
			elif T in (ctypes.c_float, ctypes.c_double):
				self.defaults.append( .0 )
			else: self.defaults.append( None )	# None is allowed for all other types

			## generate OO API ##
			if i == 0 and type(T) is PyCPointerType and type(T._type_) is PyCStructType:
				klass = T._type_
				if klass not in _OOAPI_: _OOAPI_[ klass ] = []
				_OOAPI_[ klass ].append( self )

	def _call_( self, *args ):			# allow flexible calling types
		cargs = list( self.defaults )
		for i,arg in enumerate(args):
			if isinstance( arg, _rpythonic_meta_ ): arg = arg.POINTER
			elif hasattr( arg, '_rpythonic_' ): arg = arg.POINTER		# workaround - instance from another module

			t = type(arg)
			k = self.argtypes[ i ]
			kt = self.argtypestypes[ i ]
			if arg is None and cargs[i] is not None:	# use user defaults, very rare cases
				continue

			elif t is bool and k is ctypes.c_int:
				if arg: cargs[i] = 1	#ctypes.c_int(1)
				else: cargs[i] = 0	#ctypes.c_int(0)

			elif t in (list,tuple):				# convert lists and tuples into array
				if kt is PyCArrayType:
					cargs[ i ] = k(*arg)
				elif kt is PyCStructType:
					if k._array_wrapper_: cargs[ i ] = k(arg)	# allow easy array init
					else: cargs[ i ] = k(*arg)							# allow multiple args
				elif kt is PyCPointerType:
					cargs[ i ] = _convert_nested_list_to_pointer( k, arg )
				else: assert 0

			elif isinstance( arg, ctypes._Pointer ) and t is not k and kt is PyCPointerType:
				cargs[ i ] = ctypes.cast( arg, k )		# generic's that need to be cast

			elif kt is PyCStructType and isinstance( arg, ctypes._Pointer ):
				cargs[ i ] = arg.contents	# fixed may25

			elif kt is PyCPointerType and not isinstance( arg, (ctypes._Pointer,CArgObject) ):
				if t in (int,float,bool): ptr = k( k._type_(arg) )
				elif t is str:
					arg = arg.encode('utf-8')
					#ptr = k( k._type_() )								# not k() otherwise null pointer error
					#for j, char in enumerate(arg): ptr[ j ] = char		# not correct - missing null byte?
					ptr = ctypes.create_string_buffer(arg)				# correct and pypy compatible
				elif t in (PyCStructType, PyCArrayType):
					ptr = ctypes.cast( ctypes.pointer( arg ), k )
				else:
					ptr = arg	# TODO print warning?
				cargs[ i ] = ptr

			elif kt is PyCFuncPtrType:
				if t.__name__ == 'CFunctionType': cargs[ i ] = arg		# assume outside holds pointer
				else:													# this is not safe #
					cargs[ i ] = self.callbacks[ i ] = k( arg )				# assume arg is a callable
			else:
				cargs[ i ] = arg		# directly pass

		## if you define your own return_wrapper, it must take keyword "pointer"
		if self.return_wrapper: return self.return_wrapper( pointer=self.function( *cargs ) )
		else: return self.function( *cargs )



def _convert_nested_list_to_pointer( k, arg ):
	depth = 0; s = k
	while True:
		if type(s) is PyCPointerType:
			s = getattr( s, '_type_' )
			depth += 1
		else: break
	assert depth and depth <= 2
	if depth == 1:
		T = k._type_
		ptr = k( k._type_() )
		for i in range( len(arg) ):
			ptr[ i ] = T( *arg[i] )
	elif depth == 2:
		T = k._type_._type_
		_ptr = k._type_( k._type_._type_() )
		for i in range(len( arg )):
			for j in range( len(arg[i]) ):
				_ptr[ j ] = T( *arg[ i ][ j ] )
		ptr = k( _ptr )
	return ptr


def __freeze_rpythonic_struct( cls, fields ):
	if cls not in _OOAPI_: _OOAPI_[ cls ] = []	# wrap all structs
	try: setattr( cls, '_fields_', fields )
	except:
		print( 'WARN - bad order struct freeze', cls )
		#cls._fields_ = []

class _rpythonic_struct_( ctypes.Structure ):
	_array_wrapper_ = False
	_fields_ = []
	_methods_ = {}
	#def __call__(self): return self
	def __init__(self, *args, **kw ):
		cargs = []
		argtypes = []
		for a in self._fields_: argtypes.append( a[1] )
		if len(args) > len(argtypes): args = [args]	# allow both calling conventions
		for i,arg in enumerate( args ):
			if isinstance( arg, _rpythonic_meta_ ): arg = arg.POINTER

			t = type(arg)
			k = argtypes[ i ]
			if t in (list,tuple):
				if k.__class__.__name__	== 'PyCArrayType':
					cargs.append( k(*arg) )
				elif k.__class__.__name__ == 'PyCStructType':
					if k._array_wrapper_: cargs.append( k(arg) )	# allow easy array init
					else: cargs.append( k(*arg) )							# allow multiple args
			elif isinstance( arg, ctypes._Pointer ) and t is not k:
				cargs[ i ] = ctypes.cast( arg, k )	# generic's that need to be cast
			elif k.__class__.__name__ == 'PyCArrayType' and t in (float,int,bool):
				cargs.append( k(arg) )		# support init array from single value
			else:
				cargs.append( arg )		# directly pass

		ctypes.Structure.__init__(self, *cargs, **kw)


def _rpythonic_make_nice_global_enums_():
	G = globals()
	for name in RPYTHONIC_GLOBAL_ENUMS:
		if '_' in name and name.index('_') <= 4:
			altname = name[ name.index('_') + 1 : ]
			if altname not in G:
				G[altname] = RPYTHONIC_GLOBAL_ENUMS[ name ]

def _rpythonic_clean_up_missing_functions_():
	G = globals()
	for f in RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES:
		G.pop( f )
	print( "C functions loaded: %s" %len(RPYTHONIC_WRAPPER_FUNCTIONS) )
	print( "C functions failed: %s" %len(RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES) )



###### NEW API #########
CTYPES_DLL = None

class _VOID_POINTER_CONTAINER_(object):
	def __init__(self, ptr, name=None):
		self._pointer_ = ptr
		self.name = name
NULL = _VOID_POINTER_CONTAINER_(None,'<null pointer>')


class meta:	# NEW API - allow run time switch from ctypes to rffi
	'''
	Methods:
		RPython will not allow object wrapper around a method (__call__ not allowed)
		keep C function names in list "__cfunctions__"
		rpythonic.enable_rffi( classA, classB )	
		can take advantage of methods in object-method-wrapper,
		generate rffi wrapper and set method on classA, etc.
		replaces object-method-wrapper with rffi-method

	Properties:
		CPython: obj.x=1
		RPython: obj.set_x(1)	
	'''
	METAS = []
	def __init__(self, constructors=[], methods={}, properties={}):
		global CTYPES_DLL
		if not CTYPES_DLL:
			CTYPES_DLL = _load_ctypes_lib( _clib_name_ )

		self.constructors = constructors
		self.methods = methods
		self.properties = properties
		self.METAS.append( self )



	def __call__(self, cls ):
		print('@meta', cls )

		if not self.constructors:
			lamb = lambda s, _explicit_pointer_=None: setattr(s,'_pointer_',getattr(_explicit_pointer_,'_pointer_')) if hasattr(_explicit_pointer_,'_pointer_') else setattr(s,'_pointer_',_explicit_pointer_)
			lamb._debug = '(no constructor)'
			setattr( cls, '__init__', lamb )
		else:
			con = self._find_best_function( self.constructors )
			cfunc = self._build_cfunc( con )
			setattr( cls, '_%s'%con['name'], cfunc )
			g = self._gen_init( con )
			setattr( cls, '__init__', g )
		
		## set methods ##
		for name in self.methods:
			meth = self.methods[ name ]
			cfuncs = []
			for m in meth['functions']:
				cfunc = self._build_cfunc( m, method=True, static=meth['static'] )
				self._setup_return( cfunc, meth )
				setattr( cls, '_%s'%m['name'], cfunc )
				cfuncs.append( cfunc )

			f = self._find_best_function( meth['functions'] )
			g = self._gen_method( meth, f )
			g._cfuncs = cfuncs
			if meth['static']: g = classmethod( g )
			setattr( cls, name, g )

		for name in self.properties:
			print( 'property:', name )
			p = []
			for f in self.properties[name]:
				cfunc = self._build_cfunc( f )
				setattr( cls, '_%s'%f['name'], cfunc )
				g = self._gen_method( f, f )
				p.append( g )

			setattr( cls, name, property(*p) )

		return cls


	@staticmethod
	def _build_cfunc( info, method=False, static=False ):
		cfunc = getattr(CTYPES_DLL, info['name'])
		if method and not static: argtypes = [ ctypes.c_void_p ]
		else: argtypes = []
		for p in info['parameters']: argtypes.append( eval(p['ctypes_type']) )
		cfunc.argtypes = argtypes
		return cfunc

	@staticmethod
	def _setup_return( cfunc, info ):
		if not info['returns_fundamental']:
			cfunc.restype = ctypes.c_void_p
		elif info['returns_fundamental']:
			cfunc.restype = eval( info['returns_ctypes'] )
		else:
			cfunc.restype = ctypes.c_void_p

	@staticmethod
	def _gen_prepare_args( m ):
		a = []; b = []
		for i,p in enumerate(m['parameters']):
			if 'name' in p: n = p['name']
			else: n = '_unnamed_%s' %i
			if '<' in n: n = '_TODOfixme_%s' %i
			if n in PYTHON_RESERVED_KEYWORDS: n += str(i)
			if p['fundamental']:
				b.append( n )
				s = p['raw_type'].split()
				if 'default' in p:
					d = p['default']
					if p['raw_type'] in ('float', 'double'):
						if d.endswith('f'): d = d[:-1]
						d = d.replace(' ', '.')
						if 'e' in d: d = 0.0
						try: d = float(d)
						except: d = 0.0
					elif ('int' in s or 'size_t' in s) and not d.isdigit(): d = 0
					elif 'char' in s and '"' not in d: d = '""'
					elif d.lower() == 'false': d = False
					elif d.lower() == 'true': d = True
				elif 'char' in s: d = '""'
				elif 'float' in s or 'double' in s: d = 0.0
				elif 'size_t' in s or 'int' in s or 'long' in s or 'short' in s: d = 0
				elif p['raw_type'] == 'bool': d = False
				elif p['raw_type'] in ('void', '(template)'): d = 'NULL'
				else: print( p )
				a.append( n+'=%s' %d )

			else:
				b.append( '%s._pointer_'%n )
				a.append( n+'=NULL' )
		return a, b

	@staticmethod
	def _gen_init( m ):
		a, b = meta._gen_prepare_args( m )
		if a: e = 'lambda _py_self_, %s, _explicit_pointer_=None: ' %(','.join(a))
		else: e = 'lambda _py_self_, _explicit_pointer_=None: '
		e += 'setattr(_py_self_, "_pointer_", _py_self_._%s(%s))' %( m['name'], ','.join(b) )
		e += ' if not _explicit_pointer_ else '
		e += 'setattr(_py_self_, "_pointer_", _explicit_pointer_)'
		print( e )
		lamb = eval( e ); lamb._debug = e; lamb._introspect = m
		return lamb

	@staticmethod
	def _find_best_function( funcs ):
		best = funcs[0]
		score = -1
		if len(funcs) > 1:
			for f in funcs:
				hits = 0
				for p in f['parameters']:
					if p['fundamental']: hits += 1
				if hits and hits == len( f['parameters'] ):
					if hits > score:
						score = hits
						best = f
		return best

	@staticmethod
	def _gen_method( m, f ):
		a, b = meta._gen_prepare_args( f )
		if a: e = 'lambda _py_self_, %s: ' %(','.join(a))
		else: e = 'lambda _py_self_: '

		if 'static' in m and m['static']:	# static in c++ is like a classmethod
			c = '_py_self_._%s( %s )' %( f['name'], ','.join(b) )
		else:
			c = '_py_self_._%s( _py_self_._pointer_, %s )' %( f['name'], ','.join(b) )

		if not m['returns_fundamental']:
			if 'returns_unknown' in m or '<' in m['returns']: c = '_VOID_POINTER_CONTAINER_( %s, name="%s" )' %(c,m['returns'])
			else:
				something = m['returns'].replace('::', '.')
				c = '%s( _explicit_pointer_=%s )' %(something, c)

		e += c; lamb = eval( e )
		lamb._debug = e; lamb._introspect = f
		return lamb


	META_FUNCTIONS = []
	@classmethod
	def function( self, info ):
		print('@meta.function', info['name'] )
		global CTYPES_DLL
		if not CTYPES_DLL:
			CTYPES_DLL = _load_ctypes_lib( _clib_name_ )

		cfunc = self._build_cfunc( info, method=False, static=True )
		setattr( meta, '_%s'%info['name'], cfunc )
		self._setup_return( cfunc, info )
		a, b = meta._gen_prepare_args( info )
		e = 'lambda %s: ' %(','.join(a))
		c = 'meta._%s( %s )' %( info['name'], ','.join(b) )

		if not info['returns_fundamental']:
			if 'returns_unknown' in info or '<' in info['returns']:
				c = '_VOID_POINTER_CONTAINER_( %s, name="%s" )' %(c,info['returns'])
			else:
				something = info['returns'].replace('::', '.')
				c = '%s( _explicit_pointer_=%s )' %(something, c)
		e += c
		lamb = eval( e )
		lamb._debug = e
		lamb._introspect = info
		return lamb



def _rpythonic_strip_prefixes_( prefixes ):
	G = globals()
	names = list(G.keys())	# ensure list in py3
	for name in names:
		for prefix in prefixes:
			if name.startswith( prefix ):
				newname = name[ len(prefix) : ]
				if newname and newname not in G:
					G[ newname ] = G[ name ]



_clib_name_ = 'gstreamer-0.10'
print('loading lib', _clib_name_)
print( os.path.abspath( os.path.curdir ) )
CTYPES_DLL = _load_ctypes_lib( _clib_name_ )
assert CTYPES_DLL
print( 'loaded:', CTYPES_DLL._name )

## macro globals ##
## enums ##
G_USER_DIRECTORY_DESKTOP = 0 
G_USER_DIRECTORY_DOCUMENTS = 1 
G_USER_DIRECTORY_DOWNLOAD = 2 
G_USER_DIRECTORY_MUSIC = 3 
G_USER_DIRECTORY_PICTURES = 4 
G_USER_DIRECTORY_PUBLIC_SHARE = 5 
G_USER_DIRECTORY_TEMPLATES = 6 
G_USER_DIRECTORY_VIDEOS = 7 
G_USER_N_DIRECTORIES = 8 

G_THREAD_ERROR_AGAIN = 0 

G_THREAD_PRIORITY_LOW = 0 
G_THREAD_PRIORITY_NORMAL = 1 
G_THREAD_PRIORITY_HIGH = 2 
G_THREAD_PRIORITY_URGENT = 3 

G_ONCE_STATUS_NOTCALLED = 0 
G_ONCE_STATUS_PROGRESS = 1 
G_ONCE_STATUS_READY = 2 

SI_ASYNCNL = -60 
SI_TKILL = -6 
SI_SIGIO = -5 
SI_ASYNCIO = -4 
SI_MESGQ = -3 
SI_TIMER = -2 
SI_QUEUE = -1 
SI_USER = 0 
SI_KERNEL = 128 

ILL_ILLOPC = 1 
ILL_ILLOPN = 2 
ILL_ILLADR = 3 
ILL_ILLTRP = 4 
ILL_PRVOPC = 5 
ILL_PRVREG = 6 
ILL_COPROC = 7 
ILL_BADSTK = 8 

FPE_INTDIV = 1 
FPE_INTOVF = 2 
FPE_FLTDIV = 3 
FPE_FLTOVF = 4 
FPE_FLTUND = 5 
FPE_FLTRES = 6 
FPE_FLTINV = 7 
FPE_FLTSUB = 8 

SEGV_MAPERR = 1 
SEGV_ACCERR = 2 

BUS_ADRALN = 1 
BUS_ADRERR = 2 
BUS_OBJERR = 3 

TRAP_BRKPT = 1 
TRAP_TRACE = 2 

CLD_EXITED = 1 
CLD_KILLED = 2 
CLD_DUMPED = 3 
CLD_TRAPPED = 4 
CLD_STOPPED = 5 
CLD_CONTINUED = 6 

POLL_IN = 1 
POLL_OUT = 2 
POLL_MSG = 3 
POLL_ERR = 4 
POLL_PRI = 5 
POLL_HUP = 6 

SIGEV_SIGNAL = 0 
SIGEV_NONE = 1 
SIGEV_THREAD = 2 
SIGEV_THREAD_ID = 4 

SS_ONSTACK = 1 
SS_DISABLE = 2 

G_BOOKMARK_FILE_ERROR_INVALID_URI = 0 
G_BOOKMARK_FILE_ERROR_INVALID_VALUE = 1 
G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED = 2 
G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND = 3 
G_BOOKMARK_FILE_ERROR_READ = 4 
G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING = 5 
G_BOOKMARK_FILE_ERROR_WRITE = 6 
G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND = 7 

G_SLICE_CONFIG_ALWAYS_MALLOC = 1 
G_SLICE_CONFIG_BYPASS_MAGAZINES = 2 
G_SLICE_CONFIG_WORKING_SET_MSECS = 3 
G_SLICE_CONFIG_COLOR_INCREMENT = 4 
G_SLICE_CONFIG_CHUNK_SIZES = 5 
G_SLICE_CONFIG_CONTENTION_COUNTER = 6 

G_CHECKSUM_MD5 = 0 
G_CHECKSUM_SHA1 = 1 
G_CHECKSUM_SHA256 = 2 

G_CONVERT_ERROR_NO_CONVERSION = 0 
G_CONVERT_ERROR_ILLEGAL_SEQUENCE = 1 
G_CONVERT_ERROR_FAILED = 2 
G_CONVERT_ERROR_PARTIAL_INPUT = 3 
G_CONVERT_ERROR_BAD_URI = 4 
G_CONVERT_ERROR_NOT_ABSOLUTE_PATH = 5 

G_DATE_DAY = 0 
G_DATE_MONTH = 1 
G_DATE_YEAR = 2 

G_DATE_BAD_WEEKDAY = 0 
G_DATE_MONDAY = 1 
G_DATE_TUESDAY = 2 
G_DATE_WEDNESDAY = 3 
G_DATE_THURSDAY = 4 
G_DATE_FRIDAY = 5 
G_DATE_SATURDAY = 6 
G_DATE_SUNDAY = 7 

G_DATE_BAD_MONTH = 0 
G_DATE_JANUARY = 1 
G_DATE_FEBRUARY = 2 
G_DATE_MARCH = 3 
G_DATE_APRIL = 4 
G_DATE_MAY = 5 
G_DATE_JUNE = 6 
G_DATE_JULY = 7 
G_DATE_AUGUST = 8 
G_DATE_SEPTEMBER = 9 
G_DATE_OCTOBER = 10 
G_DATE_NOVEMBER = 11 
G_DATE_DECEMBER = 12 

G_TIME_TYPE_STANDARD = 0 
G_TIME_TYPE_DAYLIGHT = 1 
G_TIME_TYPE_UNIVERSAL = 2 

G_FILE_ERROR_EXIST = 0 
G_FILE_ERROR_ISDIR = 1 
G_FILE_ERROR_ACCES = 2 
G_FILE_ERROR_NAMETOOLONG = 3 
G_FILE_ERROR_NOENT = 4 
G_FILE_ERROR_NOTDIR = 5 
G_FILE_ERROR_NXIO = 6 
G_FILE_ERROR_NODEV = 7 
G_FILE_ERROR_ROFS = 8 
G_FILE_ERROR_TXTBSY = 9 
G_FILE_ERROR_FAULT = 10 
G_FILE_ERROR_LOOP = 11 
G_FILE_ERROR_NOSPC = 12 
G_FILE_ERROR_NOMEM = 13 
G_FILE_ERROR_MFILE = 14 
G_FILE_ERROR_NFILE = 15 
G_FILE_ERROR_BADF = 16 
G_FILE_ERROR_INVAL = 17 
G_FILE_ERROR_PIPE = 18 
G_FILE_ERROR_AGAIN = 19 
G_FILE_ERROR_INTR = 20 
G_FILE_ERROR_IO = 21 
G_FILE_ERROR_PERM = 22 
G_FILE_ERROR_NOSYS = 23 
G_FILE_ERROR_FAILED = 24 

G_FILE_TEST_IS_REGULAR = 1 
G_FILE_TEST_IS_SYMLINK = 2 
G_FILE_TEST_IS_DIR = 4 
G_FILE_TEST_IS_EXECUTABLE = 8 
G_FILE_TEST_EXISTS = 16 

G_FORMAT_SIZE_DEFAULT = 0 
G_FORMAT_SIZE_LONG_FORMAT = 1 
G_FORMAT_SIZE_IEC_UNITS = 2 

G_HOOK_FLAG_ACTIVE = 1 
G_HOOK_FLAG_IN_CALL = 2 
G_HOOK_FLAG_MASK = 15 

G_UNICODE_CONTROL = 0 
G_UNICODE_FORMAT = 1 
G_UNICODE_UNASSIGNED = 2 
G_UNICODE_PRIVATE_USE = 3 
G_UNICODE_SURROGATE = 4 
G_UNICODE_LOWERCASE_LETTER = 5 
G_UNICODE_MODIFIER_LETTER = 6 
G_UNICODE_OTHER_LETTER = 7 
G_UNICODE_TITLECASE_LETTER = 8 
G_UNICODE_UPPERCASE_LETTER = 9 
G_UNICODE_SPACING_MARK = 10 
G_UNICODE_ENCLOSING_MARK = 11 
G_UNICODE_NON_SPACING_MARK = 12 
G_UNICODE_DECIMAL_NUMBER = 13 
G_UNICODE_LETTER_NUMBER = 14 
G_UNICODE_OTHER_NUMBER = 15 
G_UNICODE_CONNECT_PUNCTUATION = 16 
G_UNICODE_DASH_PUNCTUATION = 17 
G_UNICODE_CLOSE_PUNCTUATION = 18 
G_UNICODE_FINAL_PUNCTUATION = 19 
G_UNICODE_INITIAL_PUNCTUATION = 20 
G_UNICODE_OTHER_PUNCTUATION = 21 
G_UNICODE_OPEN_PUNCTUATION = 22 
G_UNICODE_CURRENCY_SYMBOL = 23 
G_UNICODE_MODIFIER_SYMBOL = 24 
G_UNICODE_MATH_SYMBOL = 25 
G_UNICODE_OTHER_SYMBOL = 26 
G_UNICODE_LINE_SEPARATOR = 27 
G_UNICODE_PARAGRAPH_SEPARATOR = 28 
G_UNICODE_SPACE_SEPARATOR = 29 

G_UNICODE_BREAK_MANDATORY = 0 
G_UNICODE_BREAK_CARRIAGE_RETURN = 1 
G_UNICODE_BREAK_LINE_FEED = 2 
G_UNICODE_BREAK_COMBINING_MARK = 3 
G_UNICODE_BREAK_SURROGATE = 4 
G_UNICODE_BREAK_ZERO_WIDTH_SPACE = 5 
G_UNICODE_BREAK_INSEPARABLE = 6 
G_UNICODE_BREAK_NON_BREAKING_GLUE = 7 
G_UNICODE_BREAK_CONTINGENT = 8 
G_UNICODE_BREAK_SPACE = 9 
G_UNICODE_BREAK_AFTER = 10 
G_UNICODE_BREAK_BEFORE = 11 
G_UNICODE_BREAK_BEFORE_AND_AFTER = 12 
G_UNICODE_BREAK_HYPHEN = 13 
G_UNICODE_BREAK_NON_STARTER = 14 
G_UNICODE_BREAK_OPEN_PUNCTUATION = 15 
G_UNICODE_BREAK_CLOSE_PUNCTUATION = 16 
G_UNICODE_BREAK_QUOTATION = 17 
G_UNICODE_BREAK_EXCLAMATION = 18 
G_UNICODE_BREAK_IDEOGRAPHIC = 19 
G_UNICODE_BREAK_NUMERIC = 20 
G_UNICODE_BREAK_INFIX_SEPARATOR = 21 
G_UNICODE_BREAK_SYMBOL = 22 
G_UNICODE_BREAK_ALPHABETIC = 23 
G_UNICODE_BREAK_PREFIX = 24 
G_UNICODE_BREAK_POSTFIX = 25 
G_UNICODE_BREAK_COMPLEX_CONTEXT = 26 
G_UNICODE_BREAK_AMBIGUOUS = 27 
G_UNICODE_BREAK_UNKNOWN = 28 
G_UNICODE_BREAK_NEXT_LINE = 29 
G_UNICODE_BREAK_WORD_JOINER = 30 
G_UNICODE_BREAK_HANGUL_L_JAMO = 31 
G_UNICODE_BREAK_HANGUL_V_JAMO = 32 
G_UNICODE_BREAK_HANGUL_T_JAMO = 33 
G_UNICODE_BREAK_HANGUL_LV_SYLLABLE = 34 
G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE = 35 
G_UNICODE_BREAK_CLOSE_PARANTHESIS = 36 

G_UNICODE_SCRIPT_INVALID_CODE = -1 
G_UNICODE_SCRIPT_COMMON = 0 
G_UNICODE_SCRIPT_INHERITED = 1 
G_UNICODE_SCRIPT_ARABIC = 2 
G_UNICODE_SCRIPT_ARMENIAN = 3 
G_UNICODE_SCRIPT_BENGALI = 4 
G_UNICODE_SCRIPT_BOPOMOFO = 5 
G_UNICODE_SCRIPT_CHEROKEE = 6 
G_UNICODE_SCRIPT_COPTIC = 7 
G_UNICODE_SCRIPT_CYRILLIC = 8 
G_UNICODE_SCRIPT_DESERET = 9 
G_UNICODE_SCRIPT_DEVANAGARI = 10 
G_UNICODE_SCRIPT_ETHIOPIC = 11 
G_UNICODE_SCRIPT_GEORGIAN = 12 
G_UNICODE_SCRIPT_GOTHIC = 13 
G_UNICODE_SCRIPT_GREEK = 14 
G_UNICODE_SCRIPT_GUJARATI = 15 
G_UNICODE_SCRIPT_GURMUKHI = 16 
G_UNICODE_SCRIPT_HAN = 17 
G_UNICODE_SCRIPT_HANGUL = 18 
G_UNICODE_SCRIPT_HEBREW = 19 
G_UNICODE_SCRIPT_HIRAGANA = 20 
G_UNICODE_SCRIPT_KANNADA = 21 
G_UNICODE_SCRIPT_KATAKANA = 22 
G_UNICODE_SCRIPT_KHMER = 23 
G_UNICODE_SCRIPT_LAO = 24 
G_UNICODE_SCRIPT_LATIN = 25 
G_UNICODE_SCRIPT_MALAYALAM = 26 
G_UNICODE_SCRIPT_MONGOLIAN = 27 
G_UNICODE_SCRIPT_MYANMAR = 28 
G_UNICODE_SCRIPT_OGHAM = 29 
G_UNICODE_SCRIPT_OLD_ITALIC = 30 
G_UNICODE_SCRIPT_ORIYA = 31 
G_UNICODE_SCRIPT_RUNIC = 32 
G_UNICODE_SCRIPT_SINHALA = 33 
G_UNICODE_SCRIPT_SYRIAC = 34 
G_UNICODE_SCRIPT_TAMIL = 35 
G_UNICODE_SCRIPT_TELUGU = 36 
G_UNICODE_SCRIPT_THAANA = 37 
G_UNICODE_SCRIPT_THAI = 38 
G_UNICODE_SCRIPT_TIBETAN = 39 
G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL = 40 
G_UNICODE_SCRIPT_YI = 41 
G_UNICODE_SCRIPT_TAGALOG = 42 
G_UNICODE_SCRIPT_HANUNOO = 43 
G_UNICODE_SCRIPT_BUHID = 44 
G_UNICODE_SCRIPT_TAGBANWA = 45 
G_UNICODE_SCRIPT_BRAILLE = 46 
G_UNICODE_SCRIPT_CYPRIOT = 47 
G_UNICODE_SCRIPT_LIMBU = 48 
G_UNICODE_SCRIPT_OSMANYA = 49 
G_UNICODE_SCRIPT_SHAVIAN = 50 
G_UNICODE_SCRIPT_LINEAR_B = 51 
G_UNICODE_SCRIPT_TAI_LE = 52 
G_UNICODE_SCRIPT_UGARITIC = 53 
G_UNICODE_SCRIPT_NEW_TAI_LUE = 54 
G_UNICODE_SCRIPT_BUGINESE = 55 
G_UNICODE_SCRIPT_GLAGOLITIC = 56 
G_UNICODE_SCRIPT_TIFINAGH = 57 
G_UNICODE_SCRIPT_SYLOTI_NAGRI = 58 
G_UNICODE_SCRIPT_OLD_PERSIAN = 59 
G_UNICODE_SCRIPT_KHAROSHTHI = 60 
G_UNICODE_SCRIPT_UNKNOWN = 61 
G_UNICODE_SCRIPT_BALINESE = 62 
G_UNICODE_SCRIPT_CUNEIFORM = 63 
G_UNICODE_SCRIPT_PHOENICIAN = 64 
G_UNICODE_SCRIPT_PHAGS_PA = 65 
G_UNICODE_SCRIPT_NKO = 66 
G_UNICODE_SCRIPT_KAYAH_LI = 67 
G_UNICODE_SCRIPT_LEPCHA = 68 
G_UNICODE_SCRIPT_REJANG = 69 
G_UNICODE_SCRIPT_SUNDANESE = 70 
G_UNICODE_SCRIPT_SAURASHTRA = 71 
G_UNICODE_SCRIPT_CHAM = 72 
G_UNICODE_SCRIPT_OL_CHIKI = 73 
G_UNICODE_SCRIPT_VAI = 74 
G_UNICODE_SCRIPT_CARIAN = 75 
G_UNICODE_SCRIPT_LYCIAN = 76 
G_UNICODE_SCRIPT_LYDIAN = 77 
G_UNICODE_SCRIPT_AVESTAN = 78 
G_UNICODE_SCRIPT_BAMUM = 79 
G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS = 80 
G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC = 81 
G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI = 82 
G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN = 83 
G_UNICODE_SCRIPT_JAVANESE = 84 
G_UNICODE_SCRIPT_KAITHI = 85 
G_UNICODE_SCRIPT_LISU = 86 
G_UNICODE_SCRIPT_MEETEI_MAYEK = 87 
G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN = 88 
G_UNICODE_SCRIPT_OLD_TURKIC = 89 
G_UNICODE_SCRIPT_SAMARITAN = 90 
G_UNICODE_SCRIPT_TAI_THAM = 91 
G_UNICODE_SCRIPT_TAI_VIET = 92 
G_UNICODE_SCRIPT_BATAK = 93 
G_UNICODE_SCRIPT_BRAHMI = 94 
G_UNICODE_SCRIPT_MANDAIC = 95 

G_NORMALIZE_DEFAULT = 0 
G_NORMALIZE_NFD = 0 
G_NORMALIZE_DEFAULT_COMPOSE = 1 
G_NORMALIZE_NFC = 1 
G_NORMALIZE_ALL = 2 
G_NORMALIZE_NFKD = 2 
G_NORMALIZE_ALL_COMPOSE = 3 
G_NORMALIZE_NFKC = 3 

G_IO_ERROR_NONE = 0 
G_IO_ERROR_AGAIN = 1 
G_IO_ERROR_INVAL = 2 
G_IO_ERROR_UNKNOWN = 3 

G_IO_CHANNEL_ERROR_FBIG = 0 
G_IO_CHANNEL_ERROR_INVAL = 1 
G_IO_CHANNEL_ERROR_IO = 2 
G_IO_CHANNEL_ERROR_ISDIR = 3 
G_IO_CHANNEL_ERROR_NOSPC = 4 
G_IO_CHANNEL_ERROR_NXIO = 5 
G_IO_CHANNEL_ERROR_OVERFLOW = 6 
G_IO_CHANNEL_ERROR_PIPE = 7 
G_IO_CHANNEL_ERROR_FAILED = 8 

G_IO_STATUS_ERROR = 0 
G_IO_STATUS_NORMAL = 1 
G_IO_STATUS_EOF = 2 
G_IO_STATUS_AGAIN = 3 

G_SEEK_CUR = 0 
G_SEEK_SET = 1 
G_SEEK_END = 2 

G_IO_IN = 1 
G_IO_OUT = 4 
G_IO_PRI = 2 
G_IO_ERR = 8 
G_IO_HUP = 16 
G_IO_NVAL = 32 

G_IO_FLAG_APPEND = 1 
G_IO_FLAG_NONBLOCK = 2 
G_IO_FLAG_IS_READABLE = 4 
G_IO_FLAG_IS_WRITEABLE = 8 
G_IO_FLAG_IS_SEEKABLE = 16 
G_IO_FLAG_MASK = 31 
G_IO_FLAG_GET_MASK = 31 
G_IO_FLAG_SET_MASK = 3 

G_KEY_FILE_ERROR_UNKNOWN_ENCODING = 0 
G_KEY_FILE_ERROR_PARSE = 1 
G_KEY_FILE_ERROR_NOT_FOUND = 2 
G_KEY_FILE_ERROR_KEY_NOT_FOUND = 3 
G_KEY_FILE_ERROR_GROUP_NOT_FOUND = 4 
G_KEY_FILE_ERROR_INVALID_VALUE = 5 

G_KEY_FILE_NONE = 0 
G_KEY_FILE_KEEP_COMMENTS = 1 
G_KEY_FILE_KEEP_TRANSLATIONS = 2 

G_MARKUP_ERROR_BAD_UTF8 = 0 
G_MARKUP_ERROR_EMPTY = 1 
G_MARKUP_ERROR_PARSE = 2 
G_MARKUP_ERROR_UNKNOWN_ELEMENT = 3 
G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE = 4 
G_MARKUP_ERROR_INVALID_CONTENT = 5 
G_MARKUP_ERROR_MISSING_ATTRIBUTE = 6 

G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG = 1 
G_MARKUP_TREAT_CDATA_AS_TEXT = 2 
G_MARKUP_PREFIX_ERROR_POSITION = 4 

G_MARKUP_COLLECT_INVALID = 0 
G_MARKUP_COLLECT_STRING = 1 
G_MARKUP_COLLECT_STRDUP = 2 
G_MARKUP_COLLECT_BOOLEAN = 3 
G_MARKUP_COLLECT_TRISTATE = 4 
G_MARKUP_COLLECT_OPTIONAL = 4194304 

G_LOG_FLAG_RECURSION = 1 
G_LOG_FLAG_FATAL = 2 
G_LOG_LEVEL_ERROR = 4 
G_LOG_LEVEL_CRITICAL = 8 
G_LOG_LEVEL_WARNING = 16 
G_LOG_LEVEL_MESSAGE = 32 
G_LOG_LEVEL_INFO = 64 
G_LOG_LEVEL_DEBUG = 128 
G_LOG_LEVEL_MASK = 3 

G_TRAVERSE_LEAVES = 1 
G_TRAVERSE_NON_LEAVES = 2 
G_TRAVERSE_ALL = 3 
G_TRAVERSE_MASK = 3 
G_TRAVERSE_LEAFS = 1 
G_TRAVERSE_NON_LEAFS = 2 

G_IN_ORDER = 0 
G_PRE_ORDER = 1 
G_POST_ORDER = 2 
G_LEVEL_ORDER = 3 

G_OPTION_FLAG_HIDDEN = 1 
G_OPTION_FLAG_IN_MAIN = 2 
G_OPTION_FLAG_REVERSE = 4 
G_OPTION_FLAG_NO_ARG = 8 
G_OPTION_FLAG_FILENAME = 16 
G_OPTION_FLAG_OPTIONAL_ARG = 32 
G_OPTION_FLAG_NOALIAS = 64 

G_OPTION_ARG_NONE = 0 
G_OPTION_ARG_STRING = 1 
G_OPTION_ARG_INT = 2 
G_OPTION_ARG_CALLBACK = 3 
G_OPTION_ARG_FILENAME = 4 
G_OPTION_ARG_STRING_ARRAY = 5 
G_OPTION_ARG_FILENAME_ARRAY = 6 
G_OPTION_ARG_DOUBLE = 7 
G_OPTION_ARG_INT64 = 8 

G_OPTION_ERROR_UNKNOWN_OPTION = 0 
G_OPTION_ERROR_BAD_VALUE = 1 
G_OPTION_ERROR_FAILED = 2 

G_REGEX_ERROR_COMPILE = 0 
G_REGEX_ERROR_OPTIMIZE = 1 
G_REGEX_ERROR_REPLACE = 2 
G_REGEX_ERROR_MATCH = 3 
G_REGEX_ERROR_INTERNAL = 4 
G_REGEX_ERROR_STRAY_BACKSLASH = 101 
G_REGEX_ERROR_MISSING_CONTROL_CHAR = 102 
G_REGEX_ERROR_UNRECOGNIZED_ESCAPE = 103 
G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER = 104 
G_REGEX_ERROR_QUANTIFIER_TOO_BIG = 105 
G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS = 106 
G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS = 107 
G_REGEX_ERROR_RANGE_OUT_OF_ORDER = 108 
G_REGEX_ERROR_NOTHING_TO_REPEAT = 109 
G_REGEX_ERROR_UNRECOGNIZED_CHARACTER = 112 
G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS = 113 
G_REGEX_ERROR_UNMATCHED_PARENTHESIS = 114 
G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE = 115 
G_REGEX_ERROR_UNTERMINATED_COMMENT = 118 
G_REGEX_ERROR_EXPRESSION_TOO_LARGE = 120 
G_REGEX_ERROR_MEMORY_ERROR = 121 
G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND = 125 
G_REGEX_ERROR_MALFORMED_CONDITION = 126 
G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES = 127 
G_REGEX_ERROR_ASSERTION_EXPECTED = 128 
G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME = 130 
G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED = 131 
G_REGEX_ERROR_HEX_CODE_TOO_LARGE = 134 
G_REGEX_ERROR_INVALID_CONDITION = 135 
G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND = 136 
G_REGEX_ERROR_INFINITE_LOOP = 140 
G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR = 142 
G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME = 143 
G_REGEX_ERROR_MALFORMED_PROPERTY = 146 
G_REGEX_ERROR_UNKNOWN_PROPERTY = 147 
G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG = 148 
G_REGEX_ERROR_TOO_MANY_SUBPATTERNS = 149 
G_REGEX_ERROR_INVALID_OCTAL_VALUE = 151 
G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE = 154 
G_REGEX_ERROR_DEFINE_REPETION = 155 
G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS = 156 
G_REGEX_ERROR_MISSING_BACK_REFERENCE = 157 

G_REGEX_CASELESS = 1 
G_REGEX_MULTILINE = 2 
G_REGEX_DOTALL = 4 
G_REGEX_EXTENDED = 8 
G_REGEX_ANCHORED = 16 
G_REGEX_DOLLAR_ENDONLY = 32 
G_REGEX_UNGREEDY = 512 
G_REGEX_RAW = 131072 
G_REGEX_NO_AUTO_CAPTURE = 262144 
G_REGEX_OPTIMIZE = 524288 
G_REGEX_DUPNAMES = 33554432 
G_REGEX_NEWLINE_CR = 4294967296 
G_REGEX_NEWLINE_LF = 8589934592 
G_REGEX_NEWLINE_CRLF = 12884901888 

G_REGEX_MATCH_ANCHORED = 16 
G_REGEX_MATCH_NOTBOL = 128 
G_REGEX_MATCH_NOTEOL = 256 
G_REGEX_MATCH_NOTEMPTY = 65536 
G_REGEX_MATCH_PARTIAL = 2097152 
G_REGEX_MATCH_NEWLINE_CR = 4294967296 
G_REGEX_MATCH_NEWLINE_LF = 8589934592 
G_REGEX_MATCH_NEWLINE_CRLF = 12884901888 
G_REGEX_MATCH_NEWLINE_ANY = 17179869184 

G_ERR_UNKNOWN = 0 
G_ERR_UNEXP_EOF = 1 
G_ERR_UNEXP_EOF_IN_STRING = 2 
G_ERR_UNEXP_EOF_IN_COMMENT = 3 
G_ERR_NON_DIGIT_IN_CONST = 4 
G_ERR_DIGIT_RADIX = 5 
G_ERR_FLOAT_RADIX = 6 
G_ERR_FLOAT_MALFORMED = 7 

G_TOKEN_EOF = 0 
G_TOKEN_LEFT_PAREN = "(" 
G_TOKEN_RIGHT_PAREN = ")" 
G_TOKEN_LEFT_CURLY = "{" 
G_TOKEN_RIGHT_CURLY = "}" 
G_TOKEN_LEFT_BRACE = "[" 
G_TOKEN_RIGHT_BRACE = "]" 
G_TOKEN_EQUAL_SIGN = "=" 
G_TOKEN_COMMA = "," 
G_TOKEN_NONE = 256 
G_TOKEN_ERROR = 257 
G_TOKEN_CHAR = 258 
G_TOKEN_BINARY = 259 
G_TOKEN_OCTAL = 260 
G_TOKEN_INT = 261 
G_TOKEN_HEX = 262 
G_TOKEN_FLOAT = 263 
G_TOKEN_STRING = 264 
G_TOKEN_SYMBOL = 265 
G_TOKEN_IDENTIFIER = 266 
G_TOKEN_IDENTIFIER_NULL = 267 
G_TOKEN_COMMENT_SINGLE = 268 
G_TOKEN_COMMENT_MULTI = 269 
G_TOKEN_LAST = 270 

G_SHELL_ERROR_BAD_QUOTING = 0 
G_SHELL_ERROR_EMPTY_STRING = 1 
G_SHELL_ERROR_FAILED = 2 

G_SPAWN_ERROR_FORK = 0 
G_SPAWN_ERROR_READ = 1 
G_SPAWN_ERROR_CHDIR = 2 
G_SPAWN_ERROR_ACCES = 3 
G_SPAWN_ERROR_PERM = 4 
G_SPAWN_ERROR_2BIG = 5 
G_SPAWN_ERROR_NOEXEC = 6 
G_SPAWN_ERROR_NAMETOOLONG = 7 
G_SPAWN_ERROR_NOENT = 8 
G_SPAWN_ERROR_NOMEM = 9 
G_SPAWN_ERROR_NOTDIR = 10 
G_SPAWN_ERROR_LOOP = 11 
G_SPAWN_ERROR_TXTBUSY = 12 
G_SPAWN_ERROR_IO = 13 
G_SPAWN_ERROR_NFILE = 14 
G_SPAWN_ERROR_MFILE = 15 
G_SPAWN_ERROR_INVAL = 16 
G_SPAWN_ERROR_ISDIR = 17 
G_SPAWN_ERROR_LIBBAD = 18 
G_SPAWN_ERROR_FAILED = 19 

G_SPAWN_LEAVE_DESCRIPTORS_OPEN = 1 
G_SPAWN_DO_NOT_REAP_CHILD = 2 
G_SPAWN_SEARCH_PATH = 4 
G_SPAWN_STDOUT_TO_DEV_NULL = 8 
G_SPAWN_STDERR_TO_DEV_NULL = 16 
G_SPAWN_CHILD_INHERITS_STDIN = 32 
G_SPAWN_FILE_AND_ARGV_ZERO = 64 

G_ASCII_ALNUM = 1 
G_ASCII_ALPHA = 2 
G_ASCII_CNTRL = 4 
G_ASCII_DIGIT = 8 
G_ASCII_GRAPH = 16 
G_ASCII_LOWER = 32 
G_ASCII_PRINT = 64 
G_ASCII_PUNCT = 128 
G_ASCII_SPACE = 256 
G_ASCII_UPPER = 512 
G_ASCII_XDIGIT = 65536 

G_TEST_TRAP_SILENCE_STDOUT = 128 
G_TEST_TRAP_SILENCE_STDERR = 256 
G_TEST_TRAP_INHERIT_STDIN = 512 

G_TEST_LOG_NONE = 0 
G_TEST_LOG_ERROR = 1 
G_TEST_LOG_START_BINARY = 2 
G_TEST_LOG_LIST_CASE = 3 
G_TEST_LOG_SKIP_CASE = 4 
G_TEST_LOG_START_CASE = 5 
G_TEST_LOG_STOP_CASE = 6 
G_TEST_LOG_MIN_RESULT = 7 
G_TEST_LOG_MAX_RESULT = 8 
G_TEST_LOG_MESSAGE = 9 

G_VARIANT_CLASS_BOOLEAN = "b" 
G_VARIANT_CLASS_BYTE = "y" 
G_VARIANT_CLASS_INT16 = "n" 
G_VARIANT_CLASS_UINT16 = "q" 
G_VARIANT_CLASS_INT32 = "i" 
G_VARIANT_CLASS_UINT32 = "u" 
G_VARIANT_CLASS_INT64 = "x" 
G_VARIANT_CLASS_UINT64 = "t" 
G_VARIANT_CLASS_HANDLE = "h" 
G_VARIANT_CLASS_DOUBLE = "d" 
G_VARIANT_CLASS_STRING = "s" 
G_VARIANT_CLASS_OBJECT_PATH = "o" 
G_VARIANT_CLASS_SIGNATURE = "g" 
G_VARIANT_CLASS_VARIANT = "v" 
G_VARIANT_CLASS_MAYBE = "m" 
G_VARIANT_CLASS_ARRAY = "a" 
G_VARIANT_CLASS_TUPLE = "(" 
G_VARIANT_CLASS_DICT_ENTRY = "{" 

G_VARIANT_PARSE_ERROR_FAILED = 0 
G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED = 1 
G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE = 2 
G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED = 3 
G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END = 4 
G_VARIANT_PARSE_ERROR_INVALID_CHARACTER = 5 
G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING = 6 
G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH = 7 
G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE = 8 
G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING = 9 
G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE = 10 
G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE = 11 
G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG = 12 
G_VARIANT_PARSE_ERROR_TYPE_ERROR = 13 
G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN = 14 
G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD = 15 
G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT = 16 
G_VARIANT_PARSE_ERROR_VALUE_EXPECTED = 17 

G_TYPE_DEBUG_NONE = 0 
G_TYPE_DEBUG_OBJECTS = 1 
G_TYPE_DEBUG_SIGNALS = 2 
G_TYPE_DEBUG_MASK = 3 

G_TYPE_FLAG_CLASSED = 1 
G_TYPE_FLAG_INSTANTIATABLE = 2 
G_TYPE_FLAG_DERIVABLE = 4 
G_TYPE_FLAG_DEEP_DERIVABLE = 8 

G_TYPE_FLAG_ABSTRACT = 16 
G_TYPE_FLAG_VALUE_ABSTRACT = 32 

G_PARAM_READABLE = 1 
G_PARAM_WRITABLE = 2 
G_PARAM_CONSTRUCT = 4 
G_PARAM_CONSTRUCT_ONLY = 8 
G_PARAM_LAX_VALIDATION = 16 
G_PARAM_STATIC_NAME = 32 
G_PARAM_PRIVATE = 32 
G_PARAM_STATIC_NICK = 64 
G_PARAM_STATIC_BLURB = 128 
G_PARAM_DEPRECATED = 562949953421312 

G_SIGNAL_RUN_FIRST = 1 
G_SIGNAL_RUN_LAST = 2 
G_SIGNAL_RUN_CLEANUP = 4 
G_SIGNAL_NO_RECURSE = 8 
G_SIGNAL_DETAILED = 16 
G_SIGNAL_ACTION = 32 
G_SIGNAL_NO_HOOKS = 64 
G_SIGNAL_MUST_COLLECT = 128 

G_CONNECT_AFTER = 1 
G_CONNECT_SWAPPED = 2 

G_SIGNAL_MATCH_ID = 1 
G_SIGNAL_MATCH_DETAIL = 2 
G_SIGNAL_MATCH_CLOSURE = 4 
G_SIGNAL_MATCH_FUNC = 8 
G_SIGNAL_MATCH_DATA = 16 
G_SIGNAL_MATCH_UNBLOCKED = 32 

G_BINDING_DEFAULT = 0 
G_BINDING_BIDIRECTIONAL = 1 
G_BINDING_SYNC_CREATE = 2 
G_BINDING_INVERT_BOOLEAN = 4 

GST_STATE_VOID_PENDING = 0 
GST_STATE_NULL = 1 
GST_STATE_READY = 2 
GST_STATE_PAUSED = 3 
GST_STATE_PLAYING = 4 

_codecvt_result = { 
	"__codecvt_ok" : 0, 
	"__codecvt_partial" : 1, 
	"__codecvt_error" : 2, 
	"__codecvt_noconv" : 3, 
}

XML_BUFFER_ALLOC_DOUBLEIT = 0 
XML_BUFFER_ALLOC_EXACT = 1 
XML_BUFFER_ALLOC_IMMUTABLE = 2 
XML_BUFFER_ALLOC_IO = 3 

XML_ELEMENT_NODE = 1 
XML_ATTRIBUTE_NODE = 2 
XML_TEXT_NODE = 3 
XML_CDATA_SECTION_NODE = 4 
XML_ENTITY_REF_NODE = 5 
XML_ENTITY_NODE = 6 
XML_PI_NODE = 7 
XML_COMMENT_NODE = 8 
XML_DOCUMENT_NODE = 9 
XML_DOCUMENT_TYPE_NODE = 10 
XML_DOCUMENT_FRAG_NODE = 11 
XML_NOTATION_NODE = 12 
XML_HTML_DOCUMENT_NODE = 13 
XML_DTD_NODE = 14 
XML_ELEMENT_DECL = 15 
XML_ATTRIBUTE_DECL = 16 
XML_ENTITY_DECL = 17 
XML_NAMESPACE_DECL = 18 
XML_XINCLUDE_START = 19 
XML_XINCLUDE_END = 20 
XML_DOCB_DOCUMENT_NODE = 21 

XML_ATTRIBUTE_CDATA = 1 
XML_ATTRIBUTE_ID = 2 
XML_ATTRIBUTE_IDREF = 3 
XML_ATTRIBUTE_IDREFS = 4 
XML_ATTRIBUTE_ENTITY = 5 
XML_ATTRIBUTE_ENTITIES = 6 
XML_ATTRIBUTE_NMTOKEN = 7 
XML_ATTRIBUTE_NMTOKENS = 8 
XML_ATTRIBUTE_ENUMERATION = 9 
XML_ATTRIBUTE_NOTATION = 10 

XML_ATTRIBUTE_NONE = 1 
XML_ATTRIBUTE_REQUIRED = 2 
XML_ATTRIBUTE_IMPLIED = 3 
XML_ATTRIBUTE_FIXED = 4 

XML_ELEMENT_CONTENT_PCDATA = 1 
XML_ELEMENT_CONTENT_ELEMENT = 2 
XML_ELEMENT_CONTENT_SEQ = 3 
XML_ELEMENT_CONTENT_OR = 4 

XML_ELEMENT_CONTENT_ONCE = 1 
XML_ELEMENT_CONTENT_OPT = 2 
XML_ELEMENT_CONTENT_MULT = 3 
XML_ELEMENT_CONTENT_PLUS = 4 

XML_ELEMENT_TYPE_UNDEFINED = 0 
XML_ELEMENT_TYPE_EMPTY = 1 
XML_ELEMENT_TYPE_ANY = 2 
XML_ELEMENT_TYPE_MIXED = 3 
XML_ELEMENT_TYPE_ELEMENT = 4 

XML_EXP_EMPTY = 0 
XML_EXP_FORBID = 1 
XML_EXP_ATOM = 2 
XML_EXP_SEQ = 3 
XML_EXP_OR = 4 
XML_EXP_COUNT = 5 

XML_DOC_WELLFORMED = 1 
XML_DOC_NSVALID = 2 
XML_DOC_OLD10 = 4 
XML_DOC_DTDVALID = 8 
XML_DOC_XINCLUDE = 16 
XML_DOC_USERBUILT = 32 
XML_DOC_INTERNAL = 64 
XML_DOC_HTML = 128 

XML_ERR_NONE = 0 
XML_ERR_WARNING = 1 
XML_ERR_ERROR = 2 
XML_ERR_FATAL = 3 

XML_FROM_NONE = 0 
XML_FROM_PARSER = 1 
XML_FROM_TREE = 2 
XML_FROM_NAMESPACE = 3 
XML_FROM_DTD = 4 
XML_FROM_HTML = 5 
XML_FROM_MEMORY = 6 
XML_FROM_OUTPUT = 7 
XML_FROM_IO = 8 
XML_FROM_FTP = 9 
XML_FROM_HTTP = 10 
XML_FROM_XINCLUDE = 11 
XML_FROM_XPATH = 12 
XML_FROM_XPOINTER = 13 
XML_FROM_REGEXP = 14 
XML_FROM_DATATYPE = 15 
XML_FROM_SCHEMASP = 16 
XML_FROM_SCHEMASV = 17 
XML_FROM_RELAXNGP = 18 
XML_FROM_RELAXNGV = 19 
XML_FROM_CATALOG = 20 
XML_FROM_C14N = 21 
XML_FROM_XSLT = 22 
XML_FROM_VALID = 23 
XML_FROM_CHECK = 24 
XML_FROM_WRITER = 25 
XML_FROM_MODULE = 26 
XML_FROM_I18N = 27 
XML_FROM_SCHEMATRONV = 28 

XML_ERR_OK = 0 
XML_ERR_INTERNAL_ERROR = 1 
XML_ERR_NO_MEMORY = 2 
XML_ERR_DOCUMENT_START = 3 
XML_ERR_DOCUMENT_EMPTY = 4 
XML_ERR_DOCUMENT_END = 5 
XML_ERR_INVALID_HEX_CHARREF = 6 
XML_ERR_INVALID_DEC_CHARREF = 7 
XML_ERR_INVALID_CHARREF = 8 
XML_ERR_INVALID_CHAR = 9 
XML_ERR_CHARREF_AT_EOF = 10 
XML_ERR_CHARREF_IN_PROLOG = 11 
XML_ERR_CHARREF_IN_EPILOG = 12 
XML_ERR_CHARREF_IN_DTD = 13 
XML_ERR_ENTITYREF_AT_EOF = 14 
XML_ERR_ENTITYREF_IN_PROLOG = 15 
XML_ERR_ENTITYREF_IN_EPILOG = 16 
XML_ERR_ENTITYREF_IN_DTD = 17 
XML_ERR_PEREF_AT_EOF = 18 
XML_ERR_PEREF_IN_PROLOG = 19 
XML_ERR_PEREF_IN_EPILOG = 20 
XML_ERR_PEREF_IN_INT_SUBSET = 21 
XML_ERR_ENTITYREF_NO_NAME = 22 
XML_ERR_ENTITYREF_SEMICOL_MISSING = 23 
XML_ERR_PEREF_NO_NAME = 24 
XML_ERR_PEREF_SEMICOL_MISSING = 25 
XML_ERR_UNDECLARED_ENTITY = 26 
XML_WAR_UNDECLARED_ENTITY = 27 
XML_ERR_UNPARSED_ENTITY = 28 
XML_ERR_ENTITY_IS_EXTERNAL = 29 
XML_ERR_ENTITY_IS_PARAMETER = 30 
XML_ERR_UNKNOWN_ENCODING = 31 
XML_ERR_UNSUPPORTED_ENCODING = 32 
XML_ERR_STRING_NOT_STARTED = 33 
XML_ERR_STRING_NOT_CLOSED = 34 
XML_ERR_NS_DECL_ERROR = 35 
XML_ERR_ENTITY_NOT_STARTED = 36 
XML_ERR_ENTITY_NOT_FINISHED = 37 
XML_ERR_LT_IN_ATTRIBUTE = 38 
XML_ERR_ATTRIBUTE_NOT_STARTED = 39 
XML_ERR_ATTRIBUTE_NOT_FINISHED = 40 
XML_ERR_ATTRIBUTE_WITHOUT_VALUE = 41 
XML_ERR_ATTRIBUTE_REDEFINED = 42 
XML_ERR_LITERAL_NOT_STARTED = 43 
XML_ERR_LITERAL_NOT_FINISHED = 44 
XML_ERR_COMMENT_NOT_FINISHED = 45 
XML_ERR_PI_NOT_STARTED = 46 
XML_ERR_PI_NOT_FINISHED = 47 
XML_ERR_NOTATION_NOT_STARTED = 48 
XML_ERR_NOTATION_NOT_FINISHED = 49 
XML_ERR_ATTLIST_NOT_STARTED = 50 
XML_ERR_ATTLIST_NOT_FINISHED = 51 
XML_ERR_MIXED_NOT_STARTED = 52 
XML_ERR_MIXED_NOT_FINISHED = 53 
XML_ERR_ELEMCONTENT_NOT_STARTED = 54 
XML_ERR_ELEMCONTENT_NOT_FINISHED = 55 
XML_ERR_XMLDECL_NOT_STARTED = 56 
XML_ERR_XMLDECL_NOT_FINISHED = 57 
XML_ERR_CONDSEC_NOT_STARTED = 58 
XML_ERR_CONDSEC_NOT_FINISHED = 59 
XML_ERR_EXT_SUBSET_NOT_FINISHED = 60 
XML_ERR_DOCTYPE_NOT_FINISHED = 61 
XML_ERR_MISPLACED_CDATA_END = 62 
XML_ERR_CDATA_NOT_FINISHED = 63 
XML_ERR_RESERVED_XML_NAME = 64 
XML_ERR_SPACE_REQUIRED = 65 
XML_ERR_SEPARATOR_REQUIRED = 66 
XML_ERR_NMTOKEN_REQUIRED = 67 
XML_ERR_NAME_REQUIRED = 68 
XML_ERR_PCDATA_REQUIRED = 69 
XML_ERR_URI_REQUIRED = 70 
XML_ERR_PUBID_REQUIRED = 71 
XML_ERR_LT_REQUIRED = 72 
XML_ERR_GT_REQUIRED = 73 
XML_ERR_LTSLASH_REQUIRED = 74 
XML_ERR_EQUAL_REQUIRED = 75 
XML_ERR_TAG_NAME_MISMATCH = 76 
XML_ERR_TAG_NOT_FINISHED = 77 
XML_ERR_STANDALONE_VALUE = 78 
XML_ERR_ENCODING_NAME = 79 
XML_ERR_HYPHEN_IN_COMMENT = 80 
XML_ERR_INVALID_ENCODING = 81 
XML_ERR_EXT_ENTITY_STANDALONE = 82 
XML_ERR_CONDSEC_INVALID = 83 
XML_ERR_VALUE_REQUIRED = 84 
XML_ERR_NOT_WELL_BALANCED = 85 
XML_ERR_EXTRA_CONTENT = 86 
XML_ERR_ENTITY_CHAR_ERROR = 87 
XML_ERR_ENTITY_PE_INTERNAL = 88 
XML_ERR_ENTITY_LOOP = 89 
XML_ERR_ENTITY_BOUNDARY = 90 
XML_ERR_INVALID_URI = 91 
XML_ERR_URI_FRAGMENT = 92 
XML_WAR_CATALOG_PI = 93 
XML_ERR_NO_DTD = 94 
XML_ERR_CONDSEC_INVALID_KEYWORD = 95 
XML_ERR_VERSION_MISSING = 96 
XML_WAR_UNKNOWN_VERSION = 97 
XML_WAR_LANG_VALUE = 98 
XML_WAR_NS_URI = 99 
XML_WAR_NS_URI_RELATIVE = 100 
XML_ERR_MISSING_ENCODING = 101 
XML_WAR_SPACE_VALUE = 102 
XML_ERR_NOT_STANDALONE = 103 
XML_ERR_ENTITY_PROCESSING = 104 
XML_ERR_NOTATION_PROCESSING = 105 
XML_WAR_NS_COLUMN = 106 
XML_WAR_ENTITY_REDEFINED = 107 
XML_ERR_UNKNOWN_VERSION = 108 
XML_ERR_VERSION_MISMATCH = 109 
XML_NS_ERR_XML_NAMESPACE = 200 
XML_NS_ERR_UNDEFINED_NAMESPACE = 201 
XML_NS_ERR_QNAME = 202 
XML_NS_ERR_ATTRIBUTE_REDEFINED = 203 
XML_NS_ERR_EMPTY = 204 
XML_NS_ERR_COLON = 205 
XML_DTD_ATTRIBUTE_DEFAULT = 500 
XML_DTD_ATTRIBUTE_REDEFINED = 501 
XML_DTD_ATTRIBUTE_VALUE = 502 
XML_DTD_CONTENT_ERROR = 503 
XML_DTD_CONTENT_MODEL = 504 
XML_DTD_CONTENT_NOT_DETERMINIST = 505 
XML_DTD_DIFFERENT_PREFIX = 506 
XML_DTD_ELEM_DEFAULT_NAMESPACE = 507 
XML_DTD_ELEM_NAMESPACE = 508 
XML_DTD_ELEM_REDEFINED = 509 
XML_DTD_EMPTY_NOTATION = 510 
XML_DTD_ENTITY_TYPE = 511 
XML_DTD_ID_FIXED = 512 
XML_DTD_ID_REDEFINED = 513 
XML_DTD_ID_SUBSET = 514 
XML_DTD_INVALID_CHILD = 515 
XML_DTD_INVALID_DEFAULT = 516 
XML_DTD_LOAD_ERROR = 517 
XML_DTD_MISSING_ATTRIBUTE = 518 
XML_DTD_MIXED_CORRUPT = 519 
XML_DTD_MULTIPLE_ID = 520 
XML_DTD_NO_DOC = 521 
XML_DTD_NO_DTD = 522 
XML_DTD_NO_ELEM_NAME = 523 
XML_DTD_NO_PREFIX = 524 
XML_DTD_NO_ROOT = 525 
XML_DTD_NOTATION_REDEFINED = 526 
XML_DTD_NOTATION_VALUE = 527 
XML_DTD_NOT_EMPTY = 528 
XML_DTD_NOT_PCDATA = 529 
XML_DTD_NOT_STANDALONE = 530 
XML_DTD_ROOT_NAME = 531 
XML_DTD_STANDALONE_WHITE_SPACE = 532 
XML_DTD_UNKNOWN_ATTRIBUTE = 533 
XML_DTD_UNKNOWN_ELEM = 534 
XML_DTD_UNKNOWN_ENTITY = 535 
XML_DTD_UNKNOWN_ID = 536 
XML_DTD_UNKNOWN_NOTATION = 537 
XML_DTD_STANDALONE_DEFAULTED = 538 
XML_DTD_XMLID_VALUE = 539 
XML_DTD_XMLID_TYPE = 540 
XML_DTD_DUP_TOKEN = 541 
XML_HTML_STRUCURE_ERROR = 800 
XML_HTML_UNKNOWN_TAG = 801 
XML_RNGP_ANYNAME_ATTR_ANCESTOR = 1000 
XML_RNGP_ATTR_CONFLICT = 1001 
XML_RNGP_ATTRIBUTE_CHILDREN = 1002 
XML_RNGP_ATTRIBUTE_CONTENT = 1003 
XML_RNGP_ATTRIBUTE_EMPTY = 1004 
XML_RNGP_ATTRIBUTE_NOOP = 1005 
XML_RNGP_CHOICE_CONTENT = 1006 
XML_RNGP_CHOICE_EMPTY = 1007 
XML_RNGP_CREATE_FAILURE = 1008 
XML_RNGP_DATA_CONTENT = 1009 
XML_RNGP_DEF_CHOICE_AND_INTERLEAVE = 1010 
XML_RNGP_DEFINE_CREATE_FAILED = 1011 
XML_RNGP_DEFINE_EMPTY = 1012 
XML_RNGP_DEFINE_MISSING = 1013 
XML_RNGP_DEFINE_NAME_MISSING = 1014 
XML_RNGP_ELEM_CONTENT_EMPTY = 1015 
XML_RNGP_ELEM_CONTENT_ERROR = 1016 
XML_RNGP_ELEMENT_EMPTY = 1017 
XML_RNGP_ELEMENT_CONTENT = 1018 
XML_RNGP_ELEMENT_NAME = 1019 
XML_RNGP_ELEMENT_NO_CONTENT = 1020 
XML_RNGP_ELEM_TEXT_CONFLICT = 1021 
XML_RNGP_EMPTY = 1022 
XML_RNGP_EMPTY_CONSTRUCT = 1023 
XML_RNGP_EMPTY_CONTENT = 1024 
XML_RNGP_EMPTY_NOT_EMPTY = 1025 
XML_RNGP_ERROR_TYPE_LIB = 1026 
XML_RNGP_EXCEPT_EMPTY = 1027 
XML_RNGP_EXCEPT_MISSING = 1028 
XML_RNGP_EXCEPT_MULTIPLE = 1029 
XML_RNGP_EXCEPT_NO_CONTENT = 1030 
XML_RNGP_EXTERNALREF_EMTPY = 1031 
XML_RNGP_EXTERNAL_REF_FAILURE = 1032 
XML_RNGP_EXTERNALREF_RECURSE = 1033 
XML_RNGP_FORBIDDEN_ATTRIBUTE = 1034 
XML_RNGP_FOREIGN_ELEMENT = 1035 
XML_RNGP_GRAMMAR_CONTENT = 1036 
XML_RNGP_GRAMMAR_EMPTY = 1037 
XML_RNGP_GRAMMAR_MISSING = 1038 
XML_RNGP_GRAMMAR_NO_START = 1039 
XML_RNGP_GROUP_ATTR_CONFLICT = 1040 
XML_RNGP_HREF_ERROR = 1041 
XML_RNGP_INCLUDE_EMPTY = 1042 
XML_RNGP_INCLUDE_FAILURE = 1043 
XML_RNGP_INCLUDE_RECURSE = 1044 
XML_RNGP_INTERLEAVE_ADD = 1045 
XML_RNGP_INTERLEAVE_CREATE_FAILED = 1046 
XML_RNGP_INTERLEAVE_EMPTY = 1047 
XML_RNGP_INTERLEAVE_NO_CONTENT = 1048 
XML_RNGP_INVALID_DEFINE_NAME = 1049 
XML_RNGP_INVALID_URI = 1050 
XML_RNGP_INVALID_VALUE = 1051 
XML_RNGP_MISSING_HREF = 1052 
XML_RNGP_NAME_MISSING = 1053 
XML_RNGP_NEED_COMBINE = 1054 
XML_RNGP_NOTALLOWED_NOT_EMPTY = 1055 
XML_RNGP_NSNAME_ATTR_ANCESTOR = 1056 
XML_RNGP_NSNAME_NO_NS = 1057 
XML_RNGP_PARAM_FORBIDDEN = 1058 
XML_RNGP_PARAM_NAME_MISSING = 1059 
XML_RNGP_PARENTREF_CREATE_FAILED = 1060 
XML_RNGP_PARENTREF_NAME_INVALID = 1061 
XML_RNGP_PARENTREF_NO_NAME = 1062 
XML_RNGP_PARENTREF_NO_PARENT = 1063 
XML_RNGP_PARENTREF_NOT_EMPTY = 1064 
XML_RNGP_PARSE_ERROR = 1065 
XML_RNGP_PAT_ANYNAME_EXCEPT_ANYNAME = 1066 
XML_RNGP_PAT_ATTR_ATTR = 1067 
XML_RNGP_PAT_ATTR_ELEM = 1068 
XML_RNGP_PAT_DATA_EXCEPT_ATTR = 1069 
XML_RNGP_PAT_DATA_EXCEPT_ELEM = 1070 
XML_RNGP_PAT_DATA_EXCEPT_EMPTY = 1071 
XML_RNGP_PAT_DATA_EXCEPT_GROUP = 1072 
XML_RNGP_PAT_DATA_EXCEPT_INTERLEAVE = 1073 
XML_RNGP_PAT_DATA_EXCEPT_LIST = 1074 
XML_RNGP_PAT_DATA_EXCEPT_ONEMORE = 1075 
XML_RNGP_PAT_DATA_EXCEPT_REF = 1076 
XML_RNGP_PAT_DATA_EXCEPT_TEXT = 1077 
XML_RNGP_PAT_LIST_ATTR = 1078 
XML_RNGP_PAT_LIST_ELEM = 1079 
XML_RNGP_PAT_LIST_INTERLEAVE = 1080 
XML_RNGP_PAT_LIST_LIST = 1081 
XML_RNGP_PAT_LIST_REF = 1082 
XML_RNGP_PAT_LIST_TEXT = 1083 
XML_RNGP_PAT_NSNAME_EXCEPT_ANYNAME = 1084 
XML_RNGP_PAT_NSNAME_EXCEPT_NSNAME = 1085 
XML_RNGP_PAT_ONEMORE_GROUP_ATTR = 1086 
XML_RNGP_PAT_ONEMORE_INTERLEAVE_ATTR = 1087 
XML_RNGP_PAT_START_ATTR = 1088 
XML_RNGP_PAT_START_DATA = 1089 
XML_RNGP_PAT_START_EMPTY = 1090 
XML_RNGP_PAT_START_GROUP = 1091 
XML_RNGP_PAT_START_INTERLEAVE = 1092 
XML_RNGP_PAT_START_LIST = 1093 
XML_RNGP_PAT_START_ONEMORE = 1094 
XML_RNGP_PAT_START_TEXT = 1095 
XML_RNGP_PAT_START_VALUE = 1096 
XML_RNGP_PREFIX_UNDEFINED = 1097 
XML_RNGP_REF_CREATE_FAILED = 1098 
XML_RNGP_REF_CYCLE = 1099 
XML_RNGP_REF_NAME_INVALID = 1100 
XML_RNGP_REF_NO_DEF = 1101 
XML_RNGP_REF_NO_NAME = 1102 
XML_RNGP_REF_NOT_EMPTY = 1103 
XML_RNGP_START_CHOICE_AND_INTERLEAVE = 1104 
XML_RNGP_START_CONTENT = 1105 
XML_RNGP_START_EMPTY = 1106 
XML_RNGP_START_MISSING = 1107 
XML_RNGP_TEXT_EXPECTED = 1108 
XML_RNGP_TEXT_HAS_CHILD = 1109 
XML_RNGP_TYPE_MISSING = 1110 
XML_RNGP_TYPE_NOT_FOUND = 1111 
XML_RNGP_TYPE_VALUE = 1112 
XML_RNGP_UNKNOWN_ATTRIBUTE = 1113 
XML_RNGP_UNKNOWN_COMBINE = 1114 
XML_RNGP_UNKNOWN_CONSTRUCT = 1115 
XML_RNGP_UNKNOWN_TYPE_LIB = 1116 
XML_RNGP_URI_FRAGMENT = 1117 
XML_RNGP_URI_NOT_ABSOLUTE = 1118 
XML_RNGP_VALUE_EMPTY = 1119 
XML_RNGP_VALUE_NO_CONTENT = 1120 
XML_RNGP_XMLNS_NAME = 1121 
XML_RNGP_XML_NS = 1122 
XML_XPATH_EXPRESSION_OK = 1200 
XML_XPATH_NUMBER_ERROR = 1201 
XML_XPATH_UNFINISHED_LITERAL_ERROR = 1202 
XML_XPATH_START_LITERAL_ERROR = 1203 
XML_XPATH_VARIABLE_REF_ERROR = 1204 
XML_XPATH_UNDEF_VARIABLE_ERROR = 1205 
XML_XPATH_INVALID_PREDICATE_ERROR = 1206 
XML_XPATH_EXPR_ERROR = 1207 
XML_XPATH_UNCLOSED_ERROR = 1208 
XML_XPATH_UNKNOWN_FUNC_ERROR = 1209 
XML_XPATH_INVALID_OPERAND = 1210 
XML_XPATH_INVALID_TYPE = 1211 
XML_XPATH_INVALID_ARITY = 1212 
XML_XPATH_INVALID_CTXT_SIZE = 1213 
XML_XPATH_INVALID_CTXT_POSITION = 1214 
XML_XPATH_MEMORY_ERROR = 1215 
XML_XPTR_SYNTAX_ERROR = 1216 
XML_XPTR_RESOURCE_ERROR = 1217 
XML_XPTR_SUB_RESOURCE_ERROR = 1218 
XML_XPATH_UNDEF_PREFIX_ERROR = 1219 
XML_XPATH_ENCODING_ERROR = 1220 
XML_XPATH_INVALID_CHAR_ERROR = 1221 
XML_TREE_INVALID_HEX = 1300 
XML_TREE_INVALID_DEC = 1301 
XML_TREE_UNTERMINATED_ENTITY = 1302 
XML_TREE_NOT_UTF8 = 1303 
XML_SAVE_NOT_UTF8 = 1400 
XML_SAVE_CHAR_INVALID = 1401 
XML_SAVE_NO_DOCTYPE = 1402 
XML_SAVE_UNKNOWN_ENCODING = 1403 
XML_REGEXP_COMPILE_ERROR = 1450 
XML_IO_UNKNOWN = 1500 
XML_IO_EACCES = 1501 
XML_IO_EAGAIN = 1502 
XML_IO_EBADF = 1503 
XML_IO_EBADMSG = 1504 
XML_IO_EBUSY = 1505 
XML_IO_ECANCELED = 1506 
XML_IO_ECHILD = 1507 
XML_IO_EDEADLK = 1508 
XML_IO_EDOM = 1509 
XML_IO_EEXIST = 1510 
XML_IO_EFAULT = 1511 
XML_IO_EFBIG = 1512 
XML_IO_EINPROGRESS = 1513 
XML_IO_EINTR = 1514 
XML_IO_EINVAL = 1515 
XML_IO_EIO = 1516 
XML_IO_EISDIR = 1517 
XML_IO_EMFILE = 1518 
XML_IO_EMLINK = 1519 
XML_IO_EMSGSIZE = 1520 
XML_IO_ENAMETOOLONG = 1521 
XML_IO_ENFILE = 1522 
XML_IO_ENODEV = 1523 
XML_IO_ENOENT = 1524 
XML_IO_ENOEXEC = 1525 
XML_IO_ENOLCK = 1526 
XML_IO_ENOMEM = 1527 
XML_IO_ENOSPC = 1528 
XML_IO_ENOSYS = 1529 
XML_IO_ENOTDIR = 1530 
XML_IO_ENOTEMPTY = 1531 
XML_IO_ENOTSUP = 1532 
XML_IO_ENOTTY = 1533 
XML_IO_ENXIO = 1534 
XML_IO_EPERM = 1535 
XML_IO_EPIPE = 1536 
XML_IO_ERANGE = 1537 
XML_IO_EROFS = 1538 
XML_IO_ESPIPE = 1539 
XML_IO_ESRCH = 1540 
XML_IO_ETIMEDOUT = 1541 
XML_IO_EXDEV = 1542 
XML_IO_NETWORK_ATTEMPT = 1543 
XML_IO_ENCODER = 1544 
XML_IO_FLUSH = 1545 
XML_IO_WRITE = 1546 
XML_IO_NO_INPUT = 1547 
XML_IO_BUFFER_FULL = 1548 
XML_IO_LOAD_ERROR = 1549 
XML_IO_ENOTSOCK = 1550 
XML_IO_EISCONN = 1551 
XML_IO_ECONNREFUSED = 1552 
XML_IO_ENETUNREACH = 1553 
XML_IO_EADDRINUSE = 1554 
XML_IO_EALREADY = 1555 
XML_IO_EAFNOSUPPORT = 1556 
XML_XINCLUDE_RECURSION = 1600 
XML_XINCLUDE_PARSE_VALUE = 1601 
XML_XINCLUDE_ENTITY_DEF_MISMATCH = 1602 
XML_XINCLUDE_NO_HREF = 1603 
XML_XINCLUDE_NO_FALLBACK = 1604 
XML_XINCLUDE_HREF_URI = 1605 
XML_XINCLUDE_TEXT_FRAGMENT = 1606 
XML_XINCLUDE_TEXT_DOCUMENT = 1607 
XML_XINCLUDE_INVALID_CHAR = 1608 
XML_XINCLUDE_BUILD_FAILED = 1609 
XML_XINCLUDE_UNKNOWN_ENCODING = 1610 
XML_XINCLUDE_MULTIPLE_ROOT = 1611 
XML_XINCLUDE_XPTR_FAILED = 1612 
XML_XINCLUDE_XPTR_RESULT = 1613 
XML_XINCLUDE_INCLUDE_IN_INCLUDE = 1614 
XML_XINCLUDE_FALLBACKS_IN_INCLUDE = 1615 
XML_XINCLUDE_FALLBACK_NOT_IN_INCLUDE = 1616 
XML_XINCLUDE_DEPRECATED_NS = 1617 
XML_XINCLUDE_FRAGMENT_ID = 1618 
XML_CATALOG_MISSING_ATTR = 1650 
XML_CATALOG_ENTRY_BROKEN = 1651 
XML_CATALOG_PREFER_VALUE = 1652 
XML_CATALOG_NOT_CATALOG = 1653 
XML_CATALOG_RECURSION = 1654 
XML_SCHEMAP_PREFIX_UNDEFINED = 1700 
XML_SCHEMAP_ATTRFORMDEFAULT_VALUE = 1701 
XML_SCHEMAP_ATTRGRP_NONAME_NOREF = 1702 
XML_SCHEMAP_ATTR_NONAME_NOREF = 1703 
XML_SCHEMAP_COMPLEXTYPE_NONAME_NOREF = 1704 
XML_SCHEMAP_ELEMFORMDEFAULT_VALUE = 1705 
XML_SCHEMAP_ELEM_NONAME_NOREF = 1706 
XML_SCHEMAP_EXTENSION_NO_BASE = 1707 
XML_SCHEMAP_FACET_NO_VALUE = 1708 
XML_SCHEMAP_FAILED_BUILD_IMPORT = 1709 
XML_SCHEMAP_GROUP_NONAME_NOREF = 1710 
XML_SCHEMAP_IMPORT_NAMESPACE_NOT_URI = 1711 
XML_SCHEMAP_IMPORT_REDEFINE_NSNAME = 1712 
XML_SCHEMAP_IMPORT_SCHEMA_NOT_URI = 1713 
XML_SCHEMAP_INVALID_BOOLEAN = 1714 
XML_SCHEMAP_INVALID_ENUM = 1715 
XML_SCHEMAP_INVALID_FACET = 1716 
XML_SCHEMAP_INVALID_FACET_VALUE = 1717 
XML_SCHEMAP_INVALID_MAXOCCURS = 1718 
XML_SCHEMAP_INVALID_MINOCCURS = 1719 
XML_SCHEMAP_INVALID_REF_AND_SUBTYPE = 1720 
XML_SCHEMAP_INVALID_WHITE_SPACE = 1721 
XML_SCHEMAP_NOATTR_NOREF = 1722 
XML_SCHEMAP_NOTATION_NO_NAME = 1723 
XML_SCHEMAP_NOTYPE_NOREF = 1724 
XML_SCHEMAP_REF_AND_SUBTYPE = 1725 
XML_SCHEMAP_RESTRICTION_NONAME_NOREF = 1726 
XML_SCHEMAP_SIMPLETYPE_NONAME = 1727 
XML_SCHEMAP_TYPE_AND_SUBTYPE = 1728 
XML_SCHEMAP_UNKNOWN_ALL_CHILD = 1729 
XML_SCHEMAP_UNKNOWN_ANYATTRIBUTE_CHILD = 1730 
XML_SCHEMAP_UNKNOWN_ATTR_CHILD = 1731 
XML_SCHEMAP_UNKNOWN_ATTRGRP_CHILD = 1732 
XML_SCHEMAP_UNKNOWN_ATTRIBUTE_GROUP = 1733 
XML_SCHEMAP_UNKNOWN_BASE_TYPE = 1734 
XML_SCHEMAP_UNKNOWN_CHOICE_CHILD = 1735 
XML_SCHEMAP_UNKNOWN_COMPLEXCONTENT_CHILD = 1736 
XML_SCHEMAP_UNKNOWN_COMPLEXTYPE_CHILD = 1737 
XML_SCHEMAP_UNKNOWN_ELEM_CHILD = 1738 
XML_SCHEMAP_UNKNOWN_EXTENSION_CHILD = 1739 
XML_SCHEMAP_UNKNOWN_FACET_CHILD = 1740 
XML_SCHEMAP_UNKNOWN_FACET_TYPE = 1741 
XML_SCHEMAP_UNKNOWN_GROUP_CHILD = 1742 
XML_SCHEMAP_UNKNOWN_IMPORT_CHILD = 1743 
XML_SCHEMAP_UNKNOWN_LIST_CHILD = 1744 
XML_SCHEMAP_UNKNOWN_NOTATION_CHILD = 1745 
XML_SCHEMAP_UNKNOWN_PROCESSCONTENT_CHILD = 1746 
XML_SCHEMAP_UNKNOWN_REF = 1747 
XML_SCHEMAP_UNKNOWN_RESTRICTION_CHILD = 1748 
XML_SCHEMAP_UNKNOWN_SCHEMAS_CHILD = 1749 
XML_SCHEMAP_UNKNOWN_SEQUENCE_CHILD = 1750 
XML_SCHEMAP_UNKNOWN_SIMPLECONTENT_CHILD = 1751 
XML_SCHEMAP_UNKNOWN_SIMPLETYPE_CHILD = 1752 
XML_SCHEMAP_UNKNOWN_TYPE = 1753 
XML_SCHEMAP_UNKNOWN_UNION_CHILD = 1754 
XML_SCHEMAP_ELEM_DEFAULT_FIXED = 1755 
XML_SCHEMAP_REGEXP_INVALID = 1756 
XML_SCHEMAP_FAILED_LOAD = 1757 
XML_SCHEMAP_NOTHING_TO_PARSE = 1758 
XML_SCHEMAP_NOROOT = 1759 
XML_SCHEMAP_REDEFINED_GROUP = 1760 
XML_SCHEMAP_REDEFINED_TYPE = 1761 
XML_SCHEMAP_REDEFINED_ELEMENT = 1762 
XML_SCHEMAP_REDEFINED_ATTRGROUP = 1763 
XML_SCHEMAP_REDEFINED_ATTR = 1764 
XML_SCHEMAP_REDEFINED_NOTATION = 1765 
XML_SCHEMAP_FAILED_PARSE = 1766 
XML_SCHEMAP_UNKNOWN_PREFIX = 1767 
XML_SCHEMAP_DEF_AND_PREFIX = 1768 
XML_SCHEMAP_UNKNOWN_INCLUDE_CHILD = 1769 
XML_SCHEMAP_INCLUDE_SCHEMA_NOT_URI = 1770 
XML_SCHEMAP_INCLUDE_SCHEMA_NO_URI = 1771 
XML_SCHEMAP_NOT_SCHEMA = 1772 
XML_SCHEMAP_UNKNOWN_MEMBER_TYPE = 1773 
XML_SCHEMAP_INVALID_ATTR_USE = 1774 
XML_SCHEMAP_RECURSIVE = 1775 
XML_SCHEMAP_SUPERNUMEROUS_LIST_ITEM_TYPE = 1776 
XML_SCHEMAP_INVALID_ATTR_COMBINATION = 1777 
XML_SCHEMAP_INVALID_ATTR_INLINE_COMBINATION = 1778 
XML_SCHEMAP_MISSING_SIMPLETYPE_CHILD = 1779 
XML_SCHEMAP_INVALID_ATTR_NAME = 1780 
XML_SCHEMAP_REF_AND_CONTENT = 1781 
XML_SCHEMAP_CT_PROPS_CORRECT_1 = 1782 
XML_SCHEMAP_CT_PROPS_CORRECT_2 = 1783 
XML_SCHEMAP_CT_PROPS_CORRECT_3 = 1784 
XML_SCHEMAP_CT_PROPS_CORRECT_4 = 1785 
XML_SCHEMAP_CT_PROPS_CORRECT_5 = 1786 
XML_SCHEMAP_DERIVATION_OK_RESTRICTION_1 = 1787 
XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_1 = 1788 
XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_2 = 1789 
XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_2 = 1790 
XML_SCHEMAP_DERIVATION_OK_RESTRICTION_3 = 1791 
XML_SCHEMAP_WILDCARD_INVALID_NS_MEMBER = 1792 
XML_SCHEMAP_INTERSECTION_NOT_EXPRESSIBLE = 1793 
XML_SCHEMAP_UNION_NOT_EXPRESSIBLE = 1794 
XML_SCHEMAP_SRC_IMPORT_3_1 = 1795 
XML_SCHEMAP_SRC_IMPORT_3_2 = 1796 
XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_1 = 1797 
XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_2 = 1798 
XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_3 = 1799 
XML_SCHEMAP_COS_CT_EXTENDS_1_3 = 1800 
XML_SCHEMAV_NOROOT = 1801 
XML_SCHEMAV_UNDECLAREDELEM = 1802 
XML_SCHEMAV_NOTTOPLEVEL = 1803 
XML_SCHEMAV_MISSING = 1804 
XML_SCHEMAV_WRONGELEM = 1805 
XML_SCHEMAV_NOTYPE = 1806 
XML_SCHEMAV_NOROLLBACK = 1807 
XML_SCHEMAV_ISABSTRACT = 1808 
XML_SCHEMAV_NOTEMPTY = 1809 
XML_SCHEMAV_ELEMCONT = 1810 
XML_SCHEMAV_HAVEDEFAULT = 1811 
XML_SCHEMAV_NOTNILLABLE = 1812 
XML_SCHEMAV_EXTRACONTENT = 1813 
XML_SCHEMAV_INVALIDATTR = 1814 
XML_SCHEMAV_INVALIDELEM = 1815 
XML_SCHEMAV_NOTDETERMINIST = 1816 
XML_SCHEMAV_CONSTRUCT = 1817 
XML_SCHEMAV_INTERNAL = 1818 
XML_SCHEMAV_NOTSIMPLE = 1819 
XML_SCHEMAV_ATTRUNKNOWN = 1820 
XML_SCHEMAV_ATTRINVALID = 1821 
XML_SCHEMAV_VALUE = 1822 
XML_SCHEMAV_FACET = 1823 
XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_1 = 1824 
XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_2 = 1825 
XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_3 = 1826 
XML_SCHEMAV_CVC_TYPE_3_1_1 = 1827 
XML_SCHEMAV_CVC_TYPE_3_1_2 = 1828 
XML_SCHEMAV_CVC_FACET_VALID = 1829 
XML_SCHEMAV_CVC_LENGTH_VALID = 1830 
XML_SCHEMAV_CVC_MINLENGTH_VALID = 1831 
XML_SCHEMAV_CVC_MAXLENGTH_VALID = 1832 
XML_SCHEMAV_CVC_MININCLUSIVE_VALID = 1833 
XML_SCHEMAV_CVC_MAXINCLUSIVE_VALID = 1834 
XML_SCHEMAV_CVC_MINEXCLUSIVE_VALID = 1835 
XML_SCHEMAV_CVC_MAXEXCLUSIVE_VALID = 1836 
XML_SCHEMAV_CVC_TOTALDIGITS_VALID = 1837 
XML_SCHEMAV_CVC_FRACTIONDIGITS_VALID = 1838 
XML_SCHEMAV_CVC_PATTERN_VALID = 1839 
XML_SCHEMAV_CVC_ENUMERATION_VALID = 1840 
XML_SCHEMAV_CVC_COMPLEX_TYPE_2_1 = 1841 
XML_SCHEMAV_CVC_COMPLEX_TYPE_2_2 = 1842 
XML_SCHEMAV_CVC_COMPLEX_TYPE_2_3 = 1843 
XML_SCHEMAV_CVC_COMPLEX_TYPE_2_4 = 1844 
XML_SCHEMAV_CVC_ELT_1 = 1845 
XML_SCHEMAV_CVC_ELT_2 = 1846 
XML_SCHEMAV_CVC_ELT_3_1 = 1847 
XML_SCHEMAV_CVC_ELT_3_2_1 = 1848 
XML_SCHEMAV_CVC_ELT_3_2_2 = 1849 
XML_SCHEMAV_CVC_ELT_4_1 = 1850 
XML_SCHEMAV_CVC_ELT_4_2 = 1851 
XML_SCHEMAV_CVC_ELT_4_3 = 1852 
XML_SCHEMAV_CVC_ELT_5_1_1 = 1853 
XML_SCHEMAV_CVC_ELT_5_1_2 = 1854 
XML_SCHEMAV_CVC_ELT_5_2_1 = 1855 
XML_SCHEMAV_CVC_ELT_5_2_2_1 = 1856 
XML_SCHEMAV_CVC_ELT_5_2_2_2_1 = 1857 
XML_SCHEMAV_CVC_ELT_5_2_2_2_2 = 1858 
XML_SCHEMAV_CVC_ELT_6 = 1859 
XML_SCHEMAV_CVC_ELT_7 = 1860 
XML_SCHEMAV_CVC_ATTRIBUTE_1 = 1861 
XML_SCHEMAV_CVC_ATTRIBUTE_2 = 1862 
XML_SCHEMAV_CVC_ATTRIBUTE_3 = 1863 
XML_SCHEMAV_CVC_ATTRIBUTE_4 = 1864 
XML_SCHEMAV_CVC_COMPLEX_TYPE_3_1 = 1865 
XML_SCHEMAV_CVC_COMPLEX_TYPE_3_2_1 = 1866 
XML_SCHEMAV_CVC_COMPLEX_TYPE_3_2_2 = 1867 
XML_SCHEMAV_CVC_COMPLEX_TYPE_4 = 1868 
XML_SCHEMAV_CVC_COMPLEX_TYPE_5_1 = 1869 
XML_SCHEMAV_CVC_COMPLEX_TYPE_5_2 = 1870 
XML_SCHEMAV_ELEMENT_CONTENT = 1871 
XML_SCHEMAV_DOCUMENT_ELEMENT_MISSING = 1872 
XML_SCHEMAV_CVC_COMPLEX_TYPE_1 = 1873 
XML_SCHEMAV_CVC_AU = 1874 
XML_SCHEMAV_CVC_TYPE_1 = 1875 
XML_SCHEMAV_CVC_TYPE_2 = 1876 
XML_SCHEMAV_CVC_IDC = 1877 
XML_SCHEMAV_CVC_WILDCARD = 1878 
XML_SCHEMAV_MISC = 1879 
XML_XPTR_UNKNOWN_SCHEME = 1900 
XML_XPTR_CHILDSEQ_START = 1901 
XML_XPTR_EVAL_FAILED = 1902 
XML_XPTR_EXTRA_OBJECTS = 1903 
XML_C14N_CREATE_CTXT = 1950 
XML_C14N_REQUIRES_UTF8 = 1951 
XML_C14N_CREATE_STACK = 1952 
XML_C14N_INVALID_NODE = 1953 
XML_C14N_UNKNOW_NODE = 1954 
XML_C14N_RELATIVE_NAMESPACE = 1955 
XML_FTP_PASV_ANSWER = 2000 
XML_FTP_EPSV_ANSWER = 2001 
XML_FTP_ACCNT = 2002 
XML_FTP_URL_SYNTAX = 2003 
XML_HTTP_URL_SYNTAX = 2020 
XML_HTTP_USE_IP = 2021 
XML_HTTP_UNKNOWN_HOST = 2022 
XML_SCHEMAP_SRC_SIMPLE_TYPE_1 = 3000 
XML_SCHEMAP_SRC_SIMPLE_TYPE_2 = 3001 
XML_SCHEMAP_SRC_SIMPLE_TYPE_3 = 3002 
XML_SCHEMAP_SRC_SIMPLE_TYPE_4 = 3003 
XML_SCHEMAP_SRC_RESOLVE = 3004 
XML_SCHEMAP_SRC_RESTRICTION_BASE_OR_SIMPLETYPE = 3005 
XML_SCHEMAP_SRC_LIST_ITEMTYPE_OR_SIMPLETYPE = 3006 
XML_SCHEMAP_SRC_UNION_MEMBERTYPES_OR_SIMPLETYPES = 3007 
XML_SCHEMAP_ST_PROPS_CORRECT_1 = 3008 
XML_SCHEMAP_ST_PROPS_CORRECT_2 = 3009 
XML_SCHEMAP_ST_PROPS_CORRECT_3 = 3010 
XML_SCHEMAP_COS_ST_RESTRICTS_1_1 = 3011 
XML_SCHEMAP_COS_ST_RESTRICTS_1_2 = 3012 
XML_SCHEMAP_COS_ST_RESTRICTS_1_3_1 = 3013 
XML_SCHEMAP_COS_ST_RESTRICTS_1_3_2 = 3014 
XML_SCHEMAP_COS_ST_RESTRICTS_2_1 = 3015 
XML_SCHEMAP_COS_ST_RESTRICTS_2_3_1_1 = 3016 
XML_SCHEMAP_COS_ST_RESTRICTS_2_3_1_2 = 3017 
XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_1 = 3018 
XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_2 = 3019 
XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_3 = 3020 
XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_4 = 3021 
XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_5 = 3022 
XML_SCHEMAP_COS_ST_RESTRICTS_3_1 = 3023 
XML_SCHEMAP_COS_ST_RESTRICTS_3_3_1 = 3024 
XML_SCHEMAP_COS_ST_RESTRICTS_3_3_1_2 = 3025 
XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_2 = 3026 
XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_1 = 3027 
XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_3 = 3028 
XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_4 = 3029 
XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_5 = 3030 
XML_SCHEMAP_COS_ST_DERIVED_OK_2_1 = 3031 
XML_SCHEMAP_COS_ST_DERIVED_OK_2_2 = 3032 
XML_SCHEMAP_S4S_ELEM_NOT_ALLOWED = 3033 
XML_SCHEMAP_S4S_ELEM_MISSING = 3034 
XML_SCHEMAP_S4S_ATTR_NOT_ALLOWED = 3035 
XML_SCHEMAP_S4S_ATTR_MISSING = 3036 
XML_SCHEMAP_S4S_ATTR_INVALID_VALUE = 3037 
XML_SCHEMAP_SRC_ELEMENT_1 = 3038 
XML_SCHEMAP_SRC_ELEMENT_2_1 = 3039 
XML_SCHEMAP_SRC_ELEMENT_2_2 = 3040 
XML_SCHEMAP_SRC_ELEMENT_3 = 3041 
XML_SCHEMAP_P_PROPS_CORRECT_1 = 3042 
XML_SCHEMAP_P_PROPS_CORRECT_2_1 = 3043 
XML_SCHEMAP_P_PROPS_CORRECT_2_2 = 3044 
XML_SCHEMAP_E_PROPS_CORRECT_2 = 3045 
XML_SCHEMAP_E_PROPS_CORRECT_3 = 3046 
XML_SCHEMAP_E_PROPS_CORRECT_4 = 3047 
XML_SCHEMAP_E_PROPS_CORRECT_5 = 3048 
XML_SCHEMAP_E_PROPS_CORRECT_6 = 3049 
XML_SCHEMAP_SRC_INCLUDE = 3050 
XML_SCHEMAP_SRC_ATTRIBUTE_1 = 3051 
XML_SCHEMAP_SRC_ATTRIBUTE_2 = 3052 
XML_SCHEMAP_SRC_ATTRIBUTE_3_1 = 3053 
XML_SCHEMAP_SRC_ATTRIBUTE_3_2 = 3054 
XML_SCHEMAP_SRC_ATTRIBUTE_4 = 3055 
XML_SCHEMAP_NO_XMLNS = 3056 
XML_SCHEMAP_NO_XSI = 3057 
XML_SCHEMAP_COS_VALID_DEFAULT_1 = 3058 
XML_SCHEMAP_COS_VALID_DEFAULT_2_1 = 3059 
XML_SCHEMAP_COS_VALID_DEFAULT_2_2_1 = 3060 
XML_SCHEMAP_COS_VALID_DEFAULT_2_2_2 = 3061 
XML_SCHEMAP_CVC_SIMPLE_TYPE = 3062 
XML_SCHEMAP_COS_CT_EXTENDS_1_1 = 3063 
XML_SCHEMAP_SRC_IMPORT_1_1 = 3064 
XML_SCHEMAP_SRC_IMPORT_1_2 = 3065 
XML_SCHEMAP_SRC_IMPORT_2 = 3066 
XML_SCHEMAP_SRC_IMPORT_2_1 = 3067 
XML_SCHEMAP_SRC_IMPORT_2_2 = 3068 
XML_SCHEMAP_INTERNAL = 3069 
XML_SCHEMAP_NOT_DETERMINISTIC = 3070 
XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_1 = 3071 
XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_2 = 3072 
XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_3 = 3073 
XML_SCHEMAP_MG_PROPS_CORRECT_1 = 3074 
XML_SCHEMAP_MG_PROPS_CORRECT_2 = 3075 
XML_SCHEMAP_SRC_CT_1 = 3076 
XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_3 = 3077 
XML_SCHEMAP_AU_PROPS_CORRECT_2 = 3078 
XML_SCHEMAP_A_PROPS_CORRECT_2 = 3079 
XML_SCHEMAP_C_PROPS_CORRECT = 3080 
XML_SCHEMAP_SRC_REDEFINE = 3081 
XML_SCHEMAP_SRC_IMPORT = 3082 
XML_SCHEMAP_WARN_SKIP_SCHEMA = 3083 
XML_SCHEMAP_WARN_UNLOCATED_SCHEMA = 3084 
XML_SCHEMAP_WARN_ATTR_REDECL_PROH = 3085 
XML_SCHEMAP_WARN_ATTR_POINTLESS_PROH = 3086 
XML_SCHEMAP_AG_PROPS_CORRECT = 3087 
XML_SCHEMAP_COS_CT_EXTENDS_1_2 = 3088 
XML_SCHEMAP_AU_PROPS_CORRECT = 3089 
XML_SCHEMAP_A_PROPS_CORRECT_3 = 3090 
XML_SCHEMAP_COS_ALL_LIMITED = 3091 
XML_SCHEMATRONV_ASSERT = 4000 
XML_SCHEMATRONV_REPORT = 4001 
XML_MODULE_OPEN = 4900 
XML_MODULE_CLOSE = 4901 
XML_CHECK_FOUND_ELEMENT = 5000 
XML_CHECK_FOUND_ATTRIBUTE = 5001 
XML_CHECK_FOUND_TEXT = 5002 
XML_CHECK_FOUND_CDATA = 5003 
XML_CHECK_FOUND_ENTITYREF = 5004 
XML_CHECK_FOUND_ENTITY = 5005 
XML_CHECK_FOUND_PI = 5006 
XML_CHECK_FOUND_COMMENT = 5007 
XML_CHECK_FOUND_DOCTYPE = 5008 
XML_CHECK_FOUND_FRAGMENT = 5009 
XML_CHECK_FOUND_NOTATION = 5010 
XML_CHECK_UNKNOWN_NODE = 5011 
XML_CHECK_ENTITY_TYPE = 5012 
XML_CHECK_NO_PARENT = 5013 
XML_CHECK_NO_DOC = 5014 
XML_CHECK_NO_NAME = 5015 
XML_CHECK_NO_ELEM = 5016 
XML_CHECK_WRONG_DOC = 5017 
XML_CHECK_NO_PREV = 5018 
XML_CHECK_WRONG_PREV = 5019 
XML_CHECK_NO_NEXT = 5020 
XML_CHECK_WRONG_NEXT = 5021 
XML_CHECK_NOT_DTD = 5022 
XML_CHECK_NOT_ATTR = 5023 
XML_CHECK_NOT_ATTR_DECL = 5024 
XML_CHECK_NOT_ELEM_DECL = 5025 
XML_CHECK_NOT_ENTITY_DECL = 5026 
XML_CHECK_NOT_NS_DECL = 5027 
XML_CHECK_NO_HREF = 5028 
XML_CHECK_WRONG_PARENT = 5029 
XML_CHECK_NS_SCOPE = 5030 
XML_CHECK_NS_ANCESTOR = 5031 
XML_CHECK_NOT_UTF8 = 5032 
XML_CHECK_NO_DICT = 5033 
XML_CHECK_NOT_NCNAME = 5034 
XML_CHECK_OUTSIDE_DICT = 5035 
XML_CHECK_WRONG_NAME = 5036 
XML_CHECK_NAME_NOT_NULL = 5037 
XML_I18N_NO_NAME = 6000 
XML_I18N_NO_HANDLER = 6001 
XML_I18N_EXCESS_HANDLER = 6002 
XML_I18N_CONV_FAILED = 6003 
XML_I18N_NO_OUTPUT = 6004 

XML_INTERNAL_GENERAL_ENTITY = 1 
XML_EXTERNAL_GENERAL_PARSED_ENTITY = 2 
XML_EXTERNAL_GENERAL_UNPARSED_ENTITY = 3 
XML_INTERNAL_PARAMETER_ENTITY = 4 
XML_EXTERNAL_PARAMETER_ENTITY = 5 
XML_INTERNAL_PREDEFINED_ENTITY = 6 

XML_PARSER_EOF = -1 
XML_PARSER_START = 0 
XML_PARSER_MISC = 1 
XML_PARSER_PI = 2 
XML_PARSER_DTD = 3 
XML_PARSER_PROLOG = 4 
XML_PARSER_COMMENT = 5 
XML_PARSER_START_TAG = 6 
XML_PARSER_CONTENT = 7 
XML_PARSER_CDATA_SECTION = 8 
XML_PARSER_END_TAG = 9 
XML_PARSER_ENTITY_DECL = 10 
XML_PARSER_ENTITY_VALUE = 11 
XML_PARSER_ATTRIBUTE_VALUE = 12 
XML_PARSER_SYSTEM_LITERAL = 13 
XML_PARSER_EPILOG = 14 
XML_PARSER_IGNORE = 15 
XML_PARSER_PUBLIC_LITERAL = 16 

XML_PARSE_UNKNOWN = 0 
XML_PARSE_DOM = 1 
XML_PARSE_SAX = 2 
XML_PARSE_PUSH_DOM = 3 
XML_PARSE_PUSH_SAX = 4 
XML_PARSE_READER = 5 

XML_CHAR_ENCODING_ERROR = -1 
XML_CHAR_ENCODING_NONE = 0 
XML_CHAR_ENCODING_UTF8 = 1 
XML_CHAR_ENCODING_UTF16LE = 2 
XML_CHAR_ENCODING_UTF16BE = 3 
XML_CHAR_ENCODING_UCS4LE = 4 
XML_CHAR_ENCODING_UCS4BE = 5 
XML_CHAR_ENCODING_EBCDIC = 6 
XML_CHAR_ENCODING_UCS4_2143 = 7 
XML_CHAR_ENCODING_UCS4_3412 = 8 
XML_CHAR_ENCODING_UCS2 = 9 
XML_CHAR_ENCODING_8859_1 = 10 
XML_CHAR_ENCODING_8859_2 = 11 
XML_CHAR_ENCODING_8859_3 = 12 
XML_CHAR_ENCODING_8859_4 = 13 
XML_CHAR_ENCODING_8859_5 = 14 
XML_CHAR_ENCODING_8859_6 = 15 
XML_CHAR_ENCODING_8859_7 = 16 
XML_CHAR_ENCODING_8859_8 = 17 
XML_CHAR_ENCODING_8859_9 = 18 
XML_CHAR_ENCODING_2022_JP = 19 
XML_CHAR_ENCODING_SHIFT_JIS = 20 
XML_CHAR_ENCODING_EUC_JP = 21 
XML_CHAR_ENCODING_ASCII = 22 

XLINK_TYPE_NONE = 0 
XLINK_TYPE_SIMPLE = 1 
XLINK_TYPE_EXTENDED = 2 
XLINK_TYPE_EXTENDED_SET = 3 

XLINK_SHOW_NONE = 0 
XLINK_SHOW_NEW = 1 
XLINK_SHOW_EMBED = 2 
XLINK_SHOW_REPLACE = 3 

XLINK_ACTUATE_NONE = 0 
XLINK_ACTUATE_AUTO = 1 
XLINK_ACTUATE_ONREQUEST = 2 

XML_PARSE_RECOVER = 1 
XML_PARSE_NOENT = 2 
XML_PARSE_DTDLOAD = 4 
XML_PARSE_DTDATTR = 8 
XML_PARSE_DTDVALID = 16 
XML_PARSE_NOERROR = 32 
XML_PARSE_NOWARNING = 64 
XML_PARSE_PEDANTIC = 128 
XML_PARSE_NOBLANKS = 256 
XML_PARSE_SAX1 = 512 
XML_PARSE_XINCLUDE = 65536 
XML_PARSE_NONET = 131072 
XML_PARSE_NODICT = 262144 
XML_PARSE_NSCLEAN = 524288 
XML_PARSE_NOCDATA = 1048576 
XML_PARSE_NOXINCNODE = 2097152 
XML_PARSE_COMPACT = 4194304 
XML_PARSE_OLD10 = 8388608 
XML_PARSE_NOBASEFIX = 16777216 
XML_PARSE_HUGE = 33554432 
XML_PARSE_OLDSAX = 4294967296 

XML_WITH_THREAD = 1 
XML_WITH_TREE = 2 
XML_WITH_OUTPUT = 3 
XML_WITH_PUSH = 4 
XML_WITH_READER = 5 
XML_WITH_PATTERN = 6 
XML_WITH_WRITER = 7 
XML_WITH_SAX1 = 8 
XML_WITH_FTP = 9 
XML_WITH_HTTP = 10 
XML_WITH_VALID = 11 
XML_WITH_HTML = 12 
XML_WITH_LEGACY = 13 
XML_WITH_C14N = 14 
XML_WITH_CATALOG = 15 
XML_WITH_XPATH = 16 
XML_WITH_XPTR = 17 
XML_WITH_XINCLUDE = 18 
XML_WITH_ICONV = 19 
XML_WITH_ISO8859X = 20 
XML_WITH_UNICODE = 21 
XML_WITH_REGEXP = 22 
XML_WITH_AUTOMATA = 23 
XML_WITH_EXPR = 24 
XML_WITH_SCHEMAS = 25 
XML_WITH_SCHEMATRON = 26 
XML_WITH_MODULES = 27 
XML_WITH_DEBUG = 28 
XML_WITH_DEBUG_MEM = 29 
XML_WITH_DEBUG_RUN = 30 
XML_WITH_ZLIB = 31 
XML_WITH_ICU = 32 
XML_WITH_NONE = 99999 

GST_OBJECT_DISPOSING = 1 
GST_OBJECT_FLOATING = 2 
GST_OBJECT_FLAG_LAST = 16 

GST_MINI_OBJECT_FLAG_READONLY = 1 
GST_MINI_OBJECT_FLAG_RESERVED1 = 2 
GST_MINI_OBJECT_FLAG_LAST = 16 

GST_CLOCK_OK = 0 
GST_CLOCK_EARLY = 1 
GST_CLOCK_UNSCHEDULED = 2 
GST_CLOCK_BUSY = 3 
GST_CLOCK_BADTIME = 4 
GST_CLOCK_ERROR = 5 
GST_CLOCK_UNSUPPORTED = 6 
GST_CLOCK_DONE = 7 

GST_CLOCK_ENTRY_SINGLE = 0 
GST_CLOCK_ENTRY_PERIODIC = 1 

GST_CLOCK_FLAG_CAN_DO_SINGLE_SYNC = 16 
GST_CLOCK_FLAG_CAN_DO_SINGLE_ASYNC = 32 
GST_CLOCK_FLAG_CAN_DO_PERIODIC_SYNC = 64 
GST_CLOCK_FLAG_CAN_DO_PERIODIC_ASYNC = 128 
GST_CLOCK_FLAG_CAN_SET_RESOLUTION = 256 
GST_CLOCK_FLAG_CAN_SET_MASTER = 512 
GST_CLOCK_FLAG_LAST = 4096 

GST_CAPS_FLAGS_ANY = 1 

GST_CAPS_INTERSECT_ZIG_ZAG = 0 
GST_CAPS_INTERSECT_FIRST = 1 

GST_BUFFER_FLAG_READONLY = 1 
GST_BUFFER_FLAG_MEDIA4 = 2 
GST_BUFFER_FLAG_PREROLL = 16 
GST_BUFFER_FLAG_DISCONT = 32 
GST_BUFFER_FLAG_IN_CAPS = 64 
GST_BUFFER_FLAG_GAP = 128 
GST_BUFFER_FLAG_DELTA_UNIT = 256 
GST_BUFFER_FLAG_MEDIA1 = 512 
GST_BUFFER_FLAG_MEDIA2 = 1024 
GST_BUFFER_FLAG_MEDIA3 = 2048 
GST_BUFFER_FLAG_LAST = 4096 

GST_BUFFER_COPY_FLAGS = 1 
GST_BUFFER_COPY_TIMESTAMPS = 2 
GST_BUFFER_COPY_CAPS = 4 

GST_BUFFER_LIST_CONTINUE = 0 
GST_BUFFER_LIST_SKIP_GROUP = 1 
GST_BUFFER_LIST_END = 2 

GST_ITERATOR_DONE = 0 
GST_ITERATOR_OK = 1 
GST_ITERATOR_RESYNC = 2 
GST_ITERATOR_ERROR = 3 

GST_ITERATOR_ITEM_SKIP = 0 
GST_ITERATOR_ITEM_PASS = 1 
GST_ITERATOR_ITEM_END = 2 

GST_FORMAT_UNDEFINED = 0 
GST_FORMAT_DEFAULT = 1 
GST_FORMAT_BYTES = 2 
GST_FORMAT_TIME = 3 
GST_FORMAT_BUFFERS = 4 
GST_FORMAT_PERCENT = 5 

GST_TAG_MERGE_UNDEFINED = 0 
GST_TAG_MERGE_REPLACE_ALL = 1 
GST_TAG_MERGE_REPLACE = 2 
GST_TAG_MERGE_APPEND = 3 
GST_TAG_MERGE_PREPEND = 4 
GST_TAG_MERGE_KEEP = 5 
GST_TAG_MERGE_KEEP_ALL = 6 
GST_TAG_MERGE_COUNT = 7 

GST_TAG_FLAG_UNDEFINED = 0 
GST_TAG_FLAG_META = 1 
GST_TAG_FLAG_ENCODED = 2 
GST_TAG_FLAG_DECODED = 3 
GST_TAG_FLAG_COUNT = 4 

GST_EVENT_TYPE_UPSTREAM = 1 
GST_EVENT_TYPE_DOWNSTREAM = 2 
GST_EVENT_TYPE_SERIALIZED = 4 

GST_EVENT_UNKNOWN = 0 
GST_EVENT_FLUSH_START = 19 
GST_EVENT_FLUSH_STOP = 39 
GST_EVENT_EOS = 86 
GST_EVENT_NEWSEGMENT = 102 
GST_EVENT_TAG = 118 
GST_EVENT_BUFFERSIZE = 134 
GST_EVENT_SINK_MESSAGE = 150 
GST_EVENT_QOS = 337 
GST_EVENT_SEEK = 353 
GST_EVENT_NAVIGATION = 369 
GST_EVENT_LATENCY = 385 
GST_EVENT_STEP = 401 
GST_EVENT_CUSTOM_UPSTREAM = 801 
GST_EVENT_CUSTOM_DOWNSTREAM = 806 
GST_EVENT_CUSTOM_DOWNSTREAM_OOB = 802 
GST_EVENT_CUSTOM_BOTH = 807 
GST_EVENT_CUSTOM_BOTH_OOB = 803 

GST_SEEK_TYPE_NONE = 0 
GST_SEEK_TYPE_CUR = 1 
GST_SEEK_TYPE_SET = 2 
GST_SEEK_TYPE_END = 3 

GST_SEEK_FLAG_NONE = 0 
GST_SEEK_FLAG_FLUSH = 1 
GST_SEEK_FLAG_ACCURATE = 2 
GST_SEEK_FLAG_KEY_UNIT = 4 
GST_SEEK_FLAG_SEGMENT = 8 
GST_SEEK_FLAG_SKIP = 16 

GST_QOS_TYPE_OVERFLOW = 0 
GST_QOS_TYPE_UNDERFLOW = 1 
GST_QOS_TYPE_THROTTLE = 2 

GST_QUERY_NONE = 0 
GST_QUERY_POSITION = 1 
GST_QUERY_DURATION = 2 
GST_QUERY_LATENCY = 3 
GST_QUERY_JITTER = 4 
GST_QUERY_RATE = 5 
GST_QUERY_SEEKING = 6 
GST_QUERY_SEGMENT = 7 
GST_QUERY_CONVERT = 8 
GST_QUERY_FORMATS = 9 
GST_QUERY_BUFFERING = 10 
GST_QUERY_CUSTOM = 11 
GST_QUERY_URI = 12 

GST_BUFFERING_STREAM = 0 
GST_BUFFERING_DOWNLOAD = 1 
GST_BUFFERING_TIMESHIFT = 2 
GST_BUFFERING_LIVE = 3 

GST_TASK_STARTED = 0 
GST_TASK_STOPPED = 1 
GST_TASK_PAUSED = 2 

GST_PAD_LINK_OK = 0 
GST_PAD_LINK_WRONG_HIERARCHY = -1 
GST_PAD_LINK_WAS_LINKED = -2 
GST_PAD_LINK_WRONG_DIRECTION = -3 
GST_PAD_LINK_NOFORMAT = -4 
GST_PAD_LINK_NOSCHED = -5 
GST_PAD_LINK_REFUSED = -6 

GST_FLOW_CUSTOM_SUCCESS_2 = 102 
GST_FLOW_CUSTOM_SUCCESS_1 = 101 
GST_FLOW_CUSTOM_SUCCESS = 100 
GST_FLOW_RESEND = 1 
GST_FLOW_OK = 0 
GST_FLOW_NOT_LINKED = -1 
GST_FLOW_WRONG_STATE = -2 
GST_FLOW_UNEXPECTED = -3 
GST_FLOW_NOT_NEGOTIATED = -4 
GST_FLOW_ERROR = -5 
GST_FLOW_NOT_SUPPORTED = -6 
GST_FLOW_CUSTOM_ERROR = -100 
GST_FLOW_CUSTOM_ERROR_1 = -101 
GST_FLOW_CUSTOM_ERROR_2 = -102 

GST_PAD_LINK_CHECK_NOTHING = 0 
GST_PAD_LINK_CHECK_HIERARCHY = 1 
GST_PAD_LINK_CHECK_TEMPLATE_CAPS = 2 
GST_PAD_LINK_CHECK_CAPS = 4 

GST_ACTIVATE_NONE = 0 
GST_ACTIVATE_PUSH = 1 
GST_ACTIVATE_PULL = 2 

GST_PAD_UNKNOWN = 0 
GST_PAD_SRC = 1 
GST_PAD_SINK = 2 

GST_PAD_BLOCKED = 16 
GST_PAD_FLUSHING = 32 
GST_PAD_IN_GETCAPS = 64 
GST_PAD_IN_SETCAPS = 128 
GST_PAD_BLOCKING = 256 
GST_PAD_FLAG_LAST = 4096 

GST_PAD_ALWAYS = 0 
GST_PAD_SOMETIMES = 1 
GST_PAD_REQUEST = 2 

GST_PAD_TEMPLATE_FIXED = 16 
GST_PAD_TEMPLATE_FLAG_LAST = 256 

GST_MESSAGE_UNKNOWN = 0 
GST_MESSAGE_EOS = 1 
GST_MESSAGE_ERROR = 2 
GST_MESSAGE_WARNING = 4 
GST_MESSAGE_INFO = 8 
GST_MESSAGE_TAG = 16 
GST_MESSAGE_BUFFERING = 32 
GST_MESSAGE_STATE_CHANGED = 64 
GST_MESSAGE_STATE_DIRTY = 128 
GST_MESSAGE_STEP_DONE = 256 
GST_MESSAGE_CLOCK_PROVIDE = 512 
GST_MESSAGE_CLOCK_LOST = 65536 
GST_MESSAGE_NEW_CLOCK = 131072 
GST_MESSAGE_STRUCTURE_CHANGE = 262144 
GST_MESSAGE_STREAM_STATUS = 524288 
GST_MESSAGE_APPLICATION = 1048576 
GST_MESSAGE_ELEMENT = 2097152 
GST_MESSAGE_SEGMENT_START = 4194304 
GST_MESSAGE_SEGMENT_DONE = 8388608 
GST_MESSAGE_DURATION = 16777216 
GST_MESSAGE_LATENCY = 33554432 
GST_MESSAGE_ASYNC_START = 4294967296 
GST_MESSAGE_ASYNC_DONE = 8589934592 
GST_MESSAGE_REQUEST_STATE = 17179869184 
GST_MESSAGE_STEP_START = 34359738368 
GST_MESSAGE_QOS = 68719476736 
GST_MESSAGE_PROGRESS = 137438953472 
GST_MESSAGE_ANY = -1 

GST_STRUCTURE_CHANGE_TYPE_PAD_LINK = 0 
GST_STRUCTURE_CHANGE_TYPE_PAD_UNLINK = 1 

GST_STREAM_STATUS_TYPE_CREATE = 0 
GST_STREAM_STATUS_TYPE_ENTER = 1 
GST_STREAM_STATUS_TYPE_LEAVE = 2 
GST_STREAM_STATUS_TYPE_DESTROY = 3 
GST_STREAM_STATUS_TYPE_START = 8 
GST_STREAM_STATUS_TYPE_PAUSE = 9 
GST_STREAM_STATUS_TYPE_STOP = 10 

GST_PROGRESS_TYPE_START = 0 
GST_PROGRESS_TYPE_CONTINUE = 1 
GST_PROGRESS_TYPE_COMPLETE = 2 
GST_PROGRESS_TYPE_CANCELED = 3 
GST_PROGRESS_TYPE_ERROR = 4 

GST_BUS_FLUSHING = 16 
GST_BUS_FLAG_LAST = 32 

GST_BUS_DROP = 0 
GST_BUS_PASS = 1 
GST_BUS_ASYNC = 2 

G_MODULE_BIND_LAZY = 1 
G_MODULE_BIND_LOCAL = 2 
G_MODULE_BIND_MASK = 3 

GST_PLUGIN_ERROR_MODULE = 0 
GST_PLUGIN_ERROR_DEPENDENCIES = 1 
GST_PLUGIN_ERROR_NAME_MISMATCH = 2 

GST_PLUGIN_FLAG_CACHED = 1 
GST_PLUGIN_FLAG_BLACKLISTED = 2 

GST_PLUGIN_DEPENDENCY_FLAG_NONE = 0 
GST_PLUGIN_DEPENDENCY_FLAG_RECURSE = 1 
GST_PLUGIN_DEPENDENCY_FLAG_PATHS_ARE_DEFAULT_ONLY = 2 
GST_PLUGIN_DEPENDENCY_FLAG_FILE_NAME_IS_SUFFIX = 4 

GST_RANK_NONE = 0 
GST_RANK_MARGINAL = 64 
GST_RANK_SECONDARY = 128 
GST_RANK_PRIMARY = 256 

GST_INDEX_UNKNOWN = 0 
GST_INDEX_CERTAIN = 1 
GST_INDEX_FUZZY = 2 

GST_INDEX_ENTRY_ID = 0 
GST_INDEX_ENTRY_ASSOCIATION = 1 
GST_INDEX_ENTRY_OBJECT = 2 
GST_INDEX_ENTRY_FORMAT = 3 

GST_INDEX_LOOKUP_EXACT = 0 
GST_INDEX_LOOKUP_BEFORE = 1 
GST_INDEX_LOOKUP_AFTER = 2 

GST_ASSOCIATION_FLAG_NONE = 0 
GST_ASSOCIATION_FLAG_KEY_UNIT = 1 
GST_ASSOCIATION_FLAG_DELTA_UNIT = 2 
GST_ASSOCIATION_FLAG_LAST = 256 

GST_INDEX_RESOLVER_CUSTOM = 0 
GST_INDEX_RESOLVER_GTYPE = 1 
GST_INDEX_RESOLVER_PATH = 2 

GST_INDEX_WRITABLE = 16 
GST_INDEX_READABLE = 32 
GST_INDEX_FLAG_LAST = 4096 

GST_STATE_CHANGE_FAILURE = 0 
GST_STATE_CHANGE_SUCCESS = 1 
GST_STATE_CHANGE_ASYNC = 2 
GST_STATE_CHANGE_NO_PREROLL = 3 

GST_STATE_CHANGE_NULL_TO_READY = 10 
GST_STATE_CHANGE_READY_TO_PAUSED = 19 
GST_STATE_CHANGE_PAUSED_TO_PLAYING = 28 
GST_STATE_CHANGE_PLAYING_TO_PAUSED = 35 
GST_STATE_CHANGE_PAUSED_TO_READY = 26 
GST_STATE_CHANGE_READY_TO_NULL = 17 

GST_ELEMENT_LOCKED_STATE = 16 
GST_ELEMENT_IS_SINK = 32 
GST_ELEMENT_UNPARENTING = 64 
GST_ELEMENT_IS_SOURCE = 128 
GST_ELEMENT_FLAG_LAST = 67108864 

GST_BIN_FLAG_LAST = 2147483648 

GST_DEBUG_GRAPH_SHOW_MEDIA_TYPE = 1 
GST_DEBUG_GRAPH_SHOW_CAPS_DETAILS = 2 
GST_DEBUG_GRAPH_SHOW_NON_DEFAULT_PARAMS = 4 
GST_DEBUG_GRAPH_SHOW_STATES = 8 
GST_DEBUG_GRAPH_SHOW_ALL = 15 

GST_CORE_ERROR_FAILED = 1 
GST_CORE_ERROR_TOO_LAZY = 2 
GST_CORE_ERROR_NOT_IMPLEMENTED = 3 
GST_CORE_ERROR_STATE_CHANGE = 4 
GST_CORE_ERROR_PAD = 5 
GST_CORE_ERROR_THREAD = 6 
GST_CORE_ERROR_NEGOTIATION = 7 
GST_CORE_ERROR_EVENT = 8 
GST_CORE_ERROR_SEEK = 9 
GST_CORE_ERROR_CAPS = 10 
GST_CORE_ERROR_TAG = 11 
GST_CORE_ERROR_MISSING_PLUGIN = 12 
GST_CORE_ERROR_CLOCK = 13 
GST_CORE_ERROR_DISABLED = 14 
GST_CORE_ERROR_NUM_ERRORS = 15 

GST_LIBRARY_ERROR_FAILED = 1 
GST_LIBRARY_ERROR_TOO_LAZY = 2 
GST_LIBRARY_ERROR_INIT = 3 
GST_LIBRARY_ERROR_SHUTDOWN = 4 
GST_LIBRARY_ERROR_SETTINGS = 5 
GST_LIBRARY_ERROR_ENCODE = 6 
GST_LIBRARY_ERROR_NUM_ERRORS = 7 

GST_RESOURCE_ERROR_FAILED = 1 
GST_RESOURCE_ERROR_TOO_LAZY = 2 
GST_RESOURCE_ERROR_NOT_FOUND = 3 
GST_RESOURCE_ERROR_BUSY = 4 
GST_RESOURCE_ERROR_OPEN_READ = 5 
GST_RESOURCE_ERROR_OPEN_WRITE = 6 
GST_RESOURCE_ERROR_OPEN_READ_WRITE = 7 
GST_RESOURCE_ERROR_CLOSE = 8 
GST_RESOURCE_ERROR_READ = 9 
GST_RESOURCE_ERROR_WRITE = 10 
GST_RESOURCE_ERROR_SEEK = 11 
GST_RESOURCE_ERROR_SYNC = 12 
GST_RESOURCE_ERROR_SETTINGS = 13 
GST_RESOURCE_ERROR_NO_SPACE_LEFT = 14 
GST_RESOURCE_ERROR_NUM_ERRORS = 15 

GST_STREAM_ERROR_FAILED = 1 
GST_STREAM_ERROR_TOO_LAZY = 2 
GST_STREAM_ERROR_NOT_IMPLEMENTED = 3 
GST_STREAM_ERROR_TYPE_NOT_FOUND = 4 
GST_STREAM_ERROR_WRONG_TYPE = 5 
GST_STREAM_ERROR_CODEC_NOT_FOUND = 6 
GST_STREAM_ERROR_DECODE = 7 
GST_STREAM_ERROR_ENCODE = 8 
GST_STREAM_ERROR_DEMUX = 9 
GST_STREAM_ERROR_MUX = 10 
GST_STREAM_ERROR_FORMAT = 11 
GST_STREAM_ERROR_DECRYPT = 12 
GST_STREAM_ERROR_DECRYPT_NOKEY = 13 
GST_STREAM_ERROR_NUM_ERRORS = 14 

GST_LEVEL_NONE = 0 
GST_LEVEL_ERROR = 1 
GST_LEVEL_WARNING = 2 
GST_LEVEL_INFO = 3 
GST_LEVEL_DEBUG = 4 
GST_LEVEL_LOG = 5 
GST_LEVEL_FIXME = 6 
GST_LEVEL_TRACE = 7 
GST_LEVEL_MEMDUMP = 9 
GST_LEVEL_COUNT = 10 

GST_DEBUG_FG_BLACK = 0 
GST_DEBUG_FG_RED = 1 
GST_DEBUG_FG_GREEN = 2 
GST_DEBUG_FG_YELLOW = 3 
GST_DEBUG_FG_BLUE = 4 
GST_DEBUG_FG_MAGENTA = 5 
GST_DEBUG_FG_CYAN = 6 
GST_DEBUG_FG_WHITE = 7 
GST_DEBUG_BG_BLACK = 0 
GST_DEBUG_BG_RED = 16 
GST_DEBUG_BG_GREEN = 32 
GST_DEBUG_BG_YELLOW = 48 
GST_DEBUG_BG_BLUE = 64 
GST_DEBUG_BG_MAGENTA = 80 
GST_DEBUG_BG_CYAN = 96 
GST_DEBUG_BG_WHITE = 112 
GST_DEBUG_BOLD = 256 
GST_DEBUG_UNDERLINE = 512 

GST_PIPELINE_FLAG_FIXED_CLOCK = 2147483648 
GST_PIPELINE_FLAG_LAST = 34359738368 

GST_CLOCK_TYPE_REALTIME = 0 
GST_CLOCK_TYPE_MONOTONIC = 1 

GST_ALLOC_TRACE_LIVE = 1 
GST_ALLOC_TRACE_MEM_LIVE = 2 

GST_TYPE_FIND_MINIMUM = 1 
GST_TYPE_FIND_POSSIBLE = 50 
GST_TYPE_FIND_LIKELY = 80 
GST_TYPE_FIND_NEARLY_CERTAIN = 99 
GST_TYPE_FIND_MAXIMUM = 100 

GST_URI_UNKNOWN = 0 
GST_URI_SINK = 1 
GST_URI_SRC = 2 

GST_PARSE_ERROR_SYNTAX = 0 
GST_PARSE_ERROR_NO_SUCH_ELEMENT = 1 
GST_PARSE_ERROR_NO_SUCH_PROPERTY = 2 
GST_PARSE_ERROR_LINK = 3 
GST_PARSE_ERROR_COULD_NOT_SET_PROPERTY = 4 
GST_PARSE_ERROR_EMPTY_BIN = 5 
GST_PARSE_ERROR_EMPTY = 6 

GST_PARSE_FLAG_NONE = 0 
GST_PARSE_FLAG_FATAL_ERRORS = 1 

GST_SEARCH_MODE_EXACT = 0 
GST_SEARCH_MODE_BEFORE = 1 
GST_SEARCH_MODE_AFTER = 2 

## simple enums ##
RPYTHONIC_GLOBAL_ENUMS = { 
 "G_USER_DIRECTORY_DESKTOP" : 0,  "G_USER_DIRECTORY_DOCUMENTS" : 1,  "G_USER_DIRECTORY_DOWNLOAD" : 2,  "G_USER_DIRECTORY_MUSIC" : 3,  "G_USER_DIRECTORY_PICTURES" : 4,  "G_USER_DIRECTORY_PUBLIC_SHARE" : 5,  "G_USER_DIRECTORY_TEMPLATES" : 6,  "G_USER_DIRECTORY_VIDEOS" : 7,  "G_USER_N_DIRECTORIES" : 8, 
 "G_THREAD_ERROR_AGAIN" : 0, 
 "G_THREAD_PRIORITY_LOW" : 0,  "G_THREAD_PRIORITY_NORMAL" : 1,  "G_THREAD_PRIORITY_HIGH" : 2,  "G_THREAD_PRIORITY_URGENT" : 3, 
 "G_ONCE_STATUS_NOTCALLED" : 0,  "G_ONCE_STATUS_PROGRESS" : 1,  "G_ONCE_STATUS_READY" : 2, 
 "SI_ASYNCNL" : -60,  "SI_TKILL" : -6,  "SI_SIGIO" : -5,  "SI_ASYNCIO" : -4,  "SI_MESGQ" : -3,  "SI_TIMER" : -2,  "SI_QUEUE" : -1,  "SI_USER" : 0,  "SI_KERNEL" : 128, 
 "ILL_ILLOPC" : 1,  "ILL_ILLOPN" : 2,  "ILL_ILLADR" : 3,  "ILL_ILLTRP" : 4,  "ILL_PRVOPC" : 5,  "ILL_PRVREG" : 6,  "ILL_COPROC" : 7,  "ILL_BADSTK" : 8, 
 "FPE_INTDIV" : 1,  "FPE_INTOVF" : 2,  "FPE_FLTDIV" : 3,  "FPE_FLTOVF" : 4,  "FPE_FLTUND" : 5,  "FPE_FLTRES" : 6,  "FPE_FLTINV" : 7,  "FPE_FLTSUB" : 8, 
 "SEGV_MAPERR" : 1,  "SEGV_ACCERR" : 2, 
 "BUS_ADRALN" : 1,  "BUS_ADRERR" : 2,  "BUS_OBJERR" : 3, 
 "TRAP_BRKPT" : 1,  "TRAP_TRACE" : 2, 
 "CLD_EXITED" : 1,  "CLD_KILLED" : 2,  "CLD_DUMPED" : 3,  "CLD_TRAPPED" : 4,  "CLD_STOPPED" : 5,  "CLD_CONTINUED" : 6, 
 "POLL_IN" : 1,  "POLL_OUT" : 2,  "POLL_MSG" : 3,  "POLL_ERR" : 4,  "POLL_PRI" : 5,  "POLL_HUP" : 6, 
 "SIGEV_SIGNAL" : 0,  "SIGEV_NONE" : 1,  "SIGEV_THREAD" : 2,  "SIGEV_THREAD_ID" : 4, 
 "SS_ONSTACK" : 1,  "SS_DISABLE" : 2, 
 "G_BOOKMARK_FILE_ERROR_INVALID_URI" : 0,  "G_BOOKMARK_FILE_ERROR_INVALID_VALUE" : 1,  "G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED" : 2,  "G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND" : 3,  "G_BOOKMARK_FILE_ERROR_READ" : 4,  "G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING" : 5,  "G_BOOKMARK_FILE_ERROR_WRITE" : 6,  "G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND" : 7, 
 "G_SLICE_CONFIG_ALWAYS_MALLOC" : 1,  "G_SLICE_CONFIG_BYPASS_MAGAZINES" : 2,  "G_SLICE_CONFIG_WORKING_SET_MSECS" : 3,  "G_SLICE_CONFIG_COLOR_INCREMENT" : 4,  "G_SLICE_CONFIG_CHUNK_SIZES" : 5,  "G_SLICE_CONFIG_CONTENTION_COUNTER" : 6, 
 "G_CHECKSUM_MD5" : 0,  "G_CHECKSUM_SHA1" : 1,  "G_CHECKSUM_SHA256" : 2, 
 "G_CONVERT_ERROR_NO_CONVERSION" : 0,  "G_CONVERT_ERROR_ILLEGAL_SEQUENCE" : 1,  "G_CONVERT_ERROR_FAILED" : 2,  "G_CONVERT_ERROR_PARTIAL_INPUT" : 3,  "G_CONVERT_ERROR_BAD_URI" : 4,  "G_CONVERT_ERROR_NOT_ABSOLUTE_PATH" : 5, 
 "G_DATE_DAY" : 0,  "G_DATE_MONTH" : 1,  "G_DATE_YEAR" : 2, 
 "G_DATE_BAD_WEEKDAY" : 0,  "G_DATE_MONDAY" : 1,  "G_DATE_TUESDAY" : 2,  "G_DATE_WEDNESDAY" : 3,  "G_DATE_THURSDAY" : 4,  "G_DATE_FRIDAY" : 5,  "G_DATE_SATURDAY" : 6,  "G_DATE_SUNDAY" : 7, 
 "G_DATE_BAD_MONTH" : 0,  "G_DATE_JANUARY" : 1,  "G_DATE_FEBRUARY" : 2,  "G_DATE_MARCH" : 3,  "G_DATE_APRIL" : 4,  "G_DATE_MAY" : 5,  "G_DATE_JUNE" : 6,  "G_DATE_JULY" : 7,  "G_DATE_AUGUST" : 8,  "G_DATE_SEPTEMBER" : 9,  "G_DATE_OCTOBER" : 10,  "G_DATE_NOVEMBER" : 11,  "G_DATE_DECEMBER" : 12, 
 "G_TIME_TYPE_STANDARD" : 0,  "G_TIME_TYPE_DAYLIGHT" : 1,  "G_TIME_TYPE_UNIVERSAL" : 2, 
 "G_FILE_ERROR_EXIST" : 0,  "G_FILE_ERROR_ISDIR" : 1,  "G_FILE_ERROR_ACCES" : 2,  "G_FILE_ERROR_NAMETOOLONG" : 3,  "G_FILE_ERROR_NOENT" : 4,  "G_FILE_ERROR_NOTDIR" : 5,  "G_FILE_ERROR_NXIO" : 6,  "G_FILE_ERROR_NODEV" : 7,  "G_FILE_ERROR_ROFS" : 8,  "G_FILE_ERROR_TXTBSY" : 9,  "G_FILE_ERROR_FAULT" : 10,  "G_FILE_ERROR_LOOP" : 11,  "G_FILE_ERROR_NOSPC" : 12,  "G_FILE_ERROR_NOMEM" : 13,  "G_FILE_ERROR_MFILE" : 14,  "G_FILE_ERROR_NFILE" : 15,  "G_FILE_ERROR_BADF" : 16,  "G_FILE_ERROR_INVAL" : 17,  "G_FILE_ERROR_PIPE" : 18,  "G_FILE_ERROR_AGAIN" : 19,  "G_FILE_ERROR_INTR" : 20,  "G_FILE_ERROR_IO" : 21,  "G_FILE_ERROR_PERM" : 22,  "G_FILE_ERROR_NOSYS" : 23,  "G_FILE_ERROR_FAILED" : 24, 
 "G_FILE_TEST_IS_REGULAR" : 1,  "G_FILE_TEST_IS_SYMLINK" : 2,  "G_FILE_TEST_IS_DIR" : 4,  "G_FILE_TEST_IS_EXECUTABLE" : 8,  "G_FILE_TEST_EXISTS" : 16, 
 "G_FORMAT_SIZE_DEFAULT" : 0,  "G_FORMAT_SIZE_LONG_FORMAT" : 1,  "G_FORMAT_SIZE_IEC_UNITS" : 2, 
 "G_HOOK_FLAG_ACTIVE" : 1,  "G_HOOK_FLAG_IN_CALL" : 2,  "G_HOOK_FLAG_MASK" : 15, 
 "G_UNICODE_CONTROL" : 0,  "G_UNICODE_FORMAT" : 1,  "G_UNICODE_UNASSIGNED" : 2,  "G_UNICODE_PRIVATE_USE" : 3,  "G_UNICODE_SURROGATE" : 4,  "G_UNICODE_LOWERCASE_LETTER" : 5,  "G_UNICODE_MODIFIER_LETTER" : 6,  "G_UNICODE_OTHER_LETTER" : 7,  "G_UNICODE_TITLECASE_LETTER" : 8,  "G_UNICODE_UPPERCASE_LETTER" : 9,  "G_UNICODE_SPACING_MARK" : 10,  "G_UNICODE_ENCLOSING_MARK" : 11,  "G_UNICODE_NON_SPACING_MARK" : 12,  "G_UNICODE_DECIMAL_NUMBER" : 13,  "G_UNICODE_LETTER_NUMBER" : 14,  "G_UNICODE_OTHER_NUMBER" : 15,  "G_UNICODE_CONNECT_PUNCTUATION" : 16,  "G_UNICODE_DASH_PUNCTUATION" : 17,  "G_UNICODE_CLOSE_PUNCTUATION" : 18,  "G_UNICODE_FINAL_PUNCTUATION" : 19,  "G_UNICODE_INITIAL_PUNCTUATION" : 20,  "G_UNICODE_OTHER_PUNCTUATION" : 21,  "G_UNICODE_OPEN_PUNCTUATION" : 22,  "G_UNICODE_CURRENCY_SYMBOL" : 23,  "G_UNICODE_MODIFIER_SYMBOL" : 24,  "G_UNICODE_MATH_SYMBOL" : 25,  "G_UNICODE_OTHER_SYMBOL" : 26,  "G_UNICODE_LINE_SEPARATOR" : 27,  "G_UNICODE_PARAGRAPH_SEPARATOR" : 28,  "G_UNICODE_SPACE_SEPARATOR" : 29, 
 "G_UNICODE_BREAK_MANDATORY" : 0,  "G_UNICODE_BREAK_CARRIAGE_RETURN" : 1,  "G_UNICODE_BREAK_LINE_FEED" : 2,  "G_UNICODE_BREAK_COMBINING_MARK" : 3,  "G_UNICODE_BREAK_SURROGATE" : 4,  "G_UNICODE_BREAK_ZERO_WIDTH_SPACE" : 5,  "G_UNICODE_BREAK_INSEPARABLE" : 6,  "G_UNICODE_BREAK_NON_BREAKING_GLUE" : 7,  "G_UNICODE_BREAK_CONTINGENT" : 8,  "G_UNICODE_BREAK_SPACE" : 9,  "G_UNICODE_BREAK_AFTER" : 10,  "G_UNICODE_BREAK_BEFORE" : 11,  "G_UNICODE_BREAK_BEFORE_AND_AFTER" : 12,  "G_UNICODE_BREAK_HYPHEN" : 13,  "G_UNICODE_BREAK_NON_STARTER" : 14,  "G_UNICODE_BREAK_OPEN_PUNCTUATION" : 15,  "G_UNICODE_BREAK_CLOSE_PUNCTUATION" : 16,  "G_UNICODE_BREAK_QUOTATION" : 17,  "G_UNICODE_BREAK_EXCLAMATION" : 18,  "G_UNICODE_BREAK_IDEOGRAPHIC" : 19,  "G_UNICODE_BREAK_NUMERIC" : 20,  "G_UNICODE_BREAK_INFIX_SEPARATOR" : 21,  "G_UNICODE_BREAK_SYMBOL" : 22,  "G_UNICODE_BREAK_ALPHABETIC" : 23,  "G_UNICODE_BREAK_PREFIX" : 24,  "G_UNICODE_BREAK_POSTFIX" : 25,  "G_UNICODE_BREAK_COMPLEX_CONTEXT" : 26,  "G_UNICODE_BREAK_AMBIGUOUS" : 27,  "G_UNICODE_BREAK_UNKNOWN" : 28,  "G_UNICODE_BREAK_NEXT_LINE" : 29,  "G_UNICODE_BREAK_WORD_JOINER" : 30,  "G_UNICODE_BREAK_HANGUL_L_JAMO" : 31,  "G_UNICODE_BREAK_HANGUL_V_JAMO" : 32,  "G_UNICODE_BREAK_HANGUL_T_JAMO" : 33,  "G_UNICODE_BREAK_HANGUL_LV_SYLLABLE" : 34,  "G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE" : 35,  "G_UNICODE_BREAK_CLOSE_PARANTHESIS" : 36, 
 "G_UNICODE_SCRIPT_INVALID_CODE" : -1,  "G_UNICODE_SCRIPT_COMMON" : 0,  "G_UNICODE_SCRIPT_INHERITED" : 1,  "G_UNICODE_SCRIPT_ARABIC" : 2,  "G_UNICODE_SCRIPT_ARMENIAN" : 3,  "G_UNICODE_SCRIPT_BENGALI" : 4,  "G_UNICODE_SCRIPT_BOPOMOFO" : 5,  "G_UNICODE_SCRIPT_CHEROKEE" : 6,  "G_UNICODE_SCRIPT_COPTIC" : 7,  "G_UNICODE_SCRIPT_CYRILLIC" : 8,  "G_UNICODE_SCRIPT_DESERET" : 9,  "G_UNICODE_SCRIPT_DEVANAGARI" : 10,  "G_UNICODE_SCRIPT_ETHIOPIC" : 11,  "G_UNICODE_SCRIPT_GEORGIAN" : 12,  "G_UNICODE_SCRIPT_GOTHIC" : 13,  "G_UNICODE_SCRIPT_GREEK" : 14,  "G_UNICODE_SCRIPT_GUJARATI" : 15,  "G_UNICODE_SCRIPT_GURMUKHI" : 16,  "G_UNICODE_SCRIPT_HAN" : 17,  "G_UNICODE_SCRIPT_HANGUL" : 18,  "G_UNICODE_SCRIPT_HEBREW" : 19,  "G_UNICODE_SCRIPT_HIRAGANA" : 20,  "G_UNICODE_SCRIPT_KANNADA" : 21,  "G_UNICODE_SCRIPT_KATAKANA" : 22,  "G_UNICODE_SCRIPT_KHMER" : 23,  "G_UNICODE_SCRIPT_LAO" : 24,  "G_UNICODE_SCRIPT_LATIN" : 25,  "G_UNICODE_SCRIPT_MALAYALAM" : 26,  "G_UNICODE_SCRIPT_MONGOLIAN" : 27,  "G_UNICODE_SCRIPT_MYANMAR" : 28,  "G_UNICODE_SCRIPT_OGHAM" : 29,  "G_UNICODE_SCRIPT_OLD_ITALIC" : 30,  "G_UNICODE_SCRIPT_ORIYA" : 31,  "G_UNICODE_SCRIPT_RUNIC" : 32,  "G_UNICODE_SCRIPT_SINHALA" : 33,  "G_UNICODE_SCRIPT_SYRIAC" : 34,  "G_UNICODE_SCRIPT_TAMIL" : 35,  "G_UNICODE_SCRIPT_TELUGU" : 36,  "G_UNICODE_SCRIPT_THAANA" : 37,  "G_UNICODE_SCRIPT_THAI" : 38,  "G_UNICODE_SCRIPT_TIBETAN" : 39,  "G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL" : 40,  "G_UNICODE_SCRIPT_YI" : 41,  "G_UNICODE_SCRIPT_TAGALOG" : 42,  "G_UNICODE_SCRIPT_HANUNOO" : 43,  "G_UNICODE_SCRIPT_BUHID" : 44,  "G_UNICODE_SCRIPT_TAGBANWA" : 45,  "G_UNICODE_SCRIPT_BRAILLE" : 46,  "G_UNICODE_SCRIPT_CYPRIOT" : 47,  "G_UNICODE_SCRIPT_LIMBU" : 48,  "G_UNICODE_SCRIPT_OSMANYA" : 49,  "G_UNICODE_SCRIPT_SHAVIAN" : 50,  "G_UNICODE_SCRIPT_LINEAR_B" : 51,  "G_UNICODE_SCRIPT_TAI_LE" : 52,  "G_UNICODE_SCRIPT_UGARITIC" : 53,  "G_UNICODE_SCRIPT_NEW_TAI_LUE" : 54,  "G_UNICODE_SCRIPT_BUGINESE" : 55,  "G_UNICODE_SCRIPT_GLAGOLITIC" : 56,  "G_UNICODE_SCRIPT_TIFINAGH" : 57,  "G_UNICODE_SCRIPT_SYLOTI_NAGRI" : 58,  "G_UNICODE_SCRIPT_OLD_PERSIAN" : 59,  "G_UNICODE_SCRIPT_KHAROSHTHI" : 60,  "G_UNICODE_SCRIPT_UNKNOWN" : 61,  "G_UNICODE_SCRIPT_BALINESE" : 62,  "G_UNICODE_SCRIPT_CUNEIFORM" : 63,  "G_UNICODE_SCRIPT_PHOENICIAN" : 64,  "G_UNICODE_SCRIPT_PHAGS_PA" : 65,  "G_UNICODE_SCRIPT_NKO" : 66,  "G_UNICODE_SCRIPT_KAYAH_LI" : 67,  "G_UNICODE_SCRIPT_LEPCHA" : 68,  "G_UNICODE_SCRIPT_REJANG" : 69,  "G_UNICODE_SCRIPT_SUNDANESE" : 70,  "G_UNICODE_SCRIPT_SAURASHTRA" : 71,  "G_UNICODE_SCRIPT_CHAM" : 72,  "G_UNICODE_SCRIPT_OL_CHIKI" : 73,  "G_UNICODE_SCRIPT_VAI" : 74,  "G_UNICODE_SCRIPT_CARIAN" : 75,  "G_UNICODE_SCRIPT_LYCIAN" : 76,  "G_UNICODE_SCRIPT_LYDIAN" : 77,  "G_UNICODE_SCRIPT_AVESTAN" : 78,  "G_UNICODE_SCRIPT_BAMUM" : 79,  "G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS" : 80,  "G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC" : 81,  "G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI" : 82,  "G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN" : 83,  "G_UNICODE_SCRIPT_JAVANESE" : 84,  "G_UNICODE_SCRIPT_KAITHI" : 85,  "G_UNICODE_SCRIPT_LISU" : 86,  "G_UNICODE_SCRIPT_MEETEI_MAYEK" : 87,  "G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN" : 88,  "G_UNICODE_SCRIPT_OLD_TURKIC" : 89,  "G_UNICODE_SCRIPT_SAMARITAN" : 90,  "G_UNICODE_SCRIPT_TAI_THAM" : 91,  "G_UNICODE_SCRIPT_TAI_VIET" : 92,  "G_UNICODE_SCRIPT_BATAK" : 93,  "G_UNICODE_SCRIPT_BRAHMI" : 94,  "G_UNICODE_SCRIPT_MANDAIC" : 95, 
 "G_NORMALIZE_DEFAULT" : 0,  "G_NORMALIZE_NFD" : 0,  "G_NORMALIZE_DEFAULT_COMPOSE" : 1,  "G_NORMALIZE_NFC" : 1,  "G_NORMALIZE_ALL" : 2,  "G_NORMALIZE_NFKD" : 2,  "G_NORMALIZE_ALL_COMPOSE" : 3,  "G_NORMALIZE_NFKC" : 3, 
 "G_IO_ERROR_NONE" : 0,  "G_IO_ERROR_AGAIN" : 1,  "G_IO_ERROR_INVAL" : 2,  "G_IO_ERROR_UNKNOWN" : 3, 
 "G_IO_CHANNEL_ERROR_FBIG" : 0,  "G_IO_CHANNEL_ERROR_INVAL" : 1,  "G_IO_CHANNEL_ERROR_IO" : 2,  "G_IO_CHANNEL_ERROR_ISDIR" : 3,  "G_IO_CHANNEL_ERROR_NOSPC" : 4,  "G_IO_CHANNEL_ERROR_NXIO" : 5,  "G_IO_CHANNEL_ERROR_OVERFLOW" : 6,  "G_IO_CHANNEL_ERROR_PIPE" : 7,  "G_IO_CHANNEL_ERROR_FAILED" : 8, 
 "G_IO_STATUS_ERROR" : 0,  "G_IO_STATUS_NORMAL" : 1,  "G_IO_STATUS_EOF" : 2,  "G_IO_STATUS_AGAIN" : 3, 
 "G_SEEK_CUR" : 0,  "G_SEEK_SET" : 1,  "G_SEEK_END" : 2, 
 "G_IO_IN" : 1,  "G_IO_OUT" : 4,  "G_IO_PRI" : 2,  "G_IO_ERR" : 8,  "G_IO_HUP" : 16,  "G_IO_NVAL" : 32, 
 "G_IO_FLAG_APPEND" : 1,  "G_IO_FLAG_NONBLOCK" : 2,  "G_IO_FLAG_IS_READABLE" : 4,  "G_IO_FLAG_IS_WRITEABLE" : 8,  "G_IO_FLAG_IS_SEEKABLE" : 16,  "G_IO_FLAG_MASK" : 31,  "G_IO_FLAG_GET_MASK" : 31,  "G_IO_FLAG_SET_MASK" : 3, 
 "G_KEY_FILE_ERROR_UNKNOWN_ENCODING" : 0,  "G_KEY_FILE_ERROR_PARSE" : 1,  "G_KEY_FILE_ERROR_NOT_FOUND" : 2,  "G_KEY_FILE_ERROR_KEY_NOT_FOUND" : 3,  "G_KEY_FILE_ERROR_GROUP_NOT_FOUND" : 4,  "G_KEY_FILE_ERROR_INVALID_VALUE" : 5, 
 "G_KEY_FILE_NONE" : 0,  "G_KEY_FILE_KEEP_COMMENTS" : 1,  "G_KEY_FILE_KEEP_TRANSLATIONS" : 2, 
 "G_MARKUP_ERROR_BAD_UTF8" : 0,  "G_MARKUP_ERROR_EMPTY" : 1,  "G_MARKUP_ERROR_PARSE" : 2,  "G_MARKUP_ERROR_UNKNOWN_ELEMENT" : 3,  "G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE" : 4,  "G_MARKUP_ERROR_INVALID_CONTENT" : 5,  "G_MARKUP_ERROR_MISSING_ATTRIBUTE" : 6, 
 "G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG" : 1,  "G_MARKUP_TREAT_CDATA_AS_TEXT" : 2,  "G_MARKUP_PREFIX_ERROR_POSITION" : 4, 
 "G_MARKUP_COLLECT_INVALID" : 0,  "G_MARKUP_COLLECT_STRING" : 1,  "G_MARKUP_COLLECT_STRDUP" : 2,  "G_MARKUP_COLLECT_BOOLEAN" : 3,  "G_MARKUP_COLLECT_TRISTATE" : 4,  "G_MARKUP_COLLECT_OPTIONAL" : 4194304, 
 "G_LOG_FLAG_RECURSION" : 1,  "G_LOG_FLAG_FATAL" : 2,  "G_LOG_LEVEL_ERROR" : 4,  "G_LOG_LEVEL_CRITICAL" : 8,  "G_LOG_LEVEL_WARNING" : 16,  "G_LOG_LEVEL_MESSAGE" : 32,  "G_LOG_LEVEL_INFO" : 64,  "G_LOG_LEVEL_DEBUG" : 128,  "G_LOG_LEVEL_MASK" : 3, 
 "G_TRAVERSE_LEAVES" : 1,  "G_TRAVERSE_NON_LEAVES" : 2,  "G_TRAVERSE_ALL" : 3,  "G_TRAVERSE_MASK" : 3,  "G_TRAVERSE_LEAFS" : 1,  "G_TRAVERSE_NON_LEAFS" : 2, 
 "G_IN_ORDER" : 0,  "G_PRE_ORDER" : 1,  "G_POST_ORDER" : 2,  "G_LEVEL_ORDER" : 3, 
 "G_OPTION_FLAG_HIDDEN" : 1,  "G_OPTION_FLAG_IN_MAIN" : 2,  "G_OPTION_FLAG_REVERSE" : 4,  "G_OPTION_FLAG_NO_ARG" : 8,  "G_OPTION_FLAG_FILENAME" : 16,  "G_OPTION_FLAG_OPTIONAL_ARG" : 32,  "G_OPTION_FLAG_NOALIAS" : 64, 
 "G_OPTION_ARG_NONE" : 0,  "G_OPTION_ARG_STRING" : 1,  "G_OPTION_ARG_INT" : 2,  "G_OPTION_ARG_CALLBACK" : 3,  "G_OPTION_ARG_FILENAME" : 4,  "G_OPTION_ARG_STRING_ARRAY" : 5,  "G_OPTION_ARG_FILENAME_ARRAY" : 6,  "G_OPTION_ARG_DOUBLE" : 7,  "G_OPTION_ARG_INT64" : 8, 
 "G_OPTION_ERROR_UNKNOWN_OPTION" : 0,  "G_OPTION_ERROR_BAD_VALUE" : 1,  "G_OPTION_ERROR_FAILED" : 2, 
 "G_REGEX_ERROR_COMPILE" : 0,  "G_REGEX_ERROR_OPTIMIZE" : 1,  "G_REGEX_ERROR_REPLACE" : 2,  "G_REGEX_ERROR_MATCH" : 3,  "G_REGEX_ERROR_INTERNAL" : 4,  "G_REGEX_ERROR_STRAY_BACKSLASH" : 101,  "G_REGEX_ERROR_MISSING_CONTROL_CHAR" : 102,  "G_REGEX_ERROR_UNRECOGNIZED_ESCAPE" : 103,  "G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER" : 104,  "G_REGEX_ERROR_QUANTIFIER_TOO_BIG" : 105,  "G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS" : 106,  "G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS" : 107,  "G_REGEX_ERROR_RANGE_OUT_OF_ORDER" : 108,  "G_REGEX_ERROR_NOTHING_TO_REPEAT" : 109,  "G_REGEX_ERROR_UNRECOGNIZED_CHARACTER" : 112,  "G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS" : 113,  "G_REGEX_ERROR_UNMATCHED_PARENTHESIS" : 114,  "G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE" : 115,  "G_REGEX_ERROR_UNTERMINATED_COMMENT" : 118,  "G_REGEX_ERROR_EXPRESSION_TOO_LARGE" : 120,  "G_REGEX_ERROR_MEMORY_ERROR" : 121,  "G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND" : 125,  "G_REGEX_ERROR_MALFORMED_CONDITION" : 126,  "G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES" : 127,  "G_REGEX_ERROR_ASSERTION_EXPECTED" : 128,  "G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME" : 130,  "G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED" : 131,  "G_REGEX_ERROR_HEX_CODE_TOO_LARGE" : 134,  "G_REGEX_ERROR_INVALID_CONDITION" : 135,  "G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND" : 136,  "G_REGEX_ERROR_INFINITE_LOOP" : 140,  "G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR" : 142,  "G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME" : 143,  "G_REGEX_ERROR_MALFORMED_PROPERTY" : 146,  "G_REGEX_ERROR_UNKNOWN_PROPERTY" : 147,  "G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG" : 148,  "G_REGEX_ERROR_TOO_MANY_SUBPATTERNS" : 149,  "G_REGEX_ERROR_INVALID_OCTAL_VALUE" : 151,  "G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE" : 154,  "G_REGEX_ERROR_DEFINE_REPETION" : 155,  "G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS" : 156,  "G_REGEX_ERROR_MISSING_BACK_REFERENCE" : 157, 
 "G_REGEX_CASELESS" : 1,  "G_REGEX_MULTILINE" : 2,  "G_REGEX_DOTALL" : 4,  "G_REGEX_EXTENDED" : 8,  "G_REGEX_ANCHORED" : 16,  "G_REGEX_DOLLAR_ENDONLY" : 32,  "G_REGEX_UNGREEDY" : 512,  "G_REGEX_RAW" : 131072,  "G_REGEX_NO_AUTO_CAPTURE" : 262144,  "G_REGEX_OPTIMIZE" : 524288,  "G_REGEX_DUPNAMES" : 33554432,  "G_REGEX_NEWLINE_CR" : 4294967296,  "G_REGEX_NEWLINE_LF" : 8589934592,  "G_REGEX_NEWLINE_CRLF" : 12884901888, 
 "G_REGEX_MATCH_ANCHORED" : 16,  "G_REGEX_MATCH_NOTBOL" : 128,  "G_REGEX_MATCH_NOTEOL" : 256,  "G_REGEX_MATCH_NOTEMPTY" : 65536,  "G_REGEX_MATCH_PARTIAL" : 2097152,  "G_REGEX_MATCH_NEWLINE_CR" : 4294967296,  "G_REGEX_MATCH_NEWLINE_LF" : 8589934592,  "G_REGEX_MATCH_NEWLINE_CRLF" : 12884901888,  "G_REGEX_MATCH_NEWLINE_ANY" : 17179869184, 
 "G_ERR_UNKNOWN" : 0,  "G_ERR_UNEXP_EOF" : 1,  "G_ERR_UNEXP_EOF_IN_STRING" : 2,  "G_ERR_UNEXP_EOF_IN_COMMENT" : 3,  "G_ERR_NON_DIGIT_IN_CONST" : 4,  "G_ERR_DIGIT_RADIX" : 5,  "G_ERR_FLOAT_RADIX" : 6,  "G_ERR_FLOAT_MALFORMED" : 7, 
 "G_TOKEN_EOF" : 0,  "G_TOKEN_LEFT_PAREN" : "(",  "G_TOKEN_RIGHT_PAREN" : ")",  "G_TOKEN_LEFT_CURLY" : "{",  "G_TOKEN_RIGHT_CURLY" : "}",  "G_TOKEN_LEFT_BRACE" : "[",  "G_TOKEN_RIGHT_BRACE" : "]",  "G_TOKEN_EQUAL_SIGN" : "=",  "G_TOKEN_COMMA" : ",",  "G_TOKEN_NONE" : 256,  "G_TOKEN_ERROR" : 257,  "G_TOKEN_CHAR" : 258,  "G_TOKEN_BINARY" : 259,  "G_TOKEN_OCTAL" : 260,  "G_TOKEN_INT" : 261,  "G_TOKEN_HEX" : 262,  "G_TOKEN_FLOAT" : 263,  "G_TOKEN_STRING" : 264,  "G_TOKEN_SYMBOL" : 265,  "G_TOKEN_IDENTIFIER" : 266,  "G_TOKEN_IDENTIFIER_NULL" : 267,  "G_TOKEN_COMMENT_SINGLE" : 268,  "G_TOKEN_COMMENT_MULTI" : 269,  "G_TOKEN_LAST" : 270, 
 "G_SHELL_ERROR_BAD_QUOTING" : 0,  "G_SHELL_ERROR_EMPTY_STRING" : 1,  "G_SHELL_ERROR_FAILED" : 2, 
 "G_SPAWN_ERROR_FORK" : 0,  "G_SPAWN_ERROR_READ" : 1,  "G_SPAWN_ERROR_CHDIR" : 2,  "G_SPAWN_ERROR_ACCES" : 3,  "G_SPAWN_ERROR_PERM" : 4,  "G_SPAWN_ERROR_2BIG" : 5,  "G_SPAWN_ERROR_NOEXEC" : 6,  "G_SPAWN_ERROR_NAMETOOLONG" : 7,  "G_SPAWN_ERROR_NOENT" : 8,  "G_SPAWN_ERROR_NOMEM" : 9,  "G_SPAWN_ERROR_NOTDIR" : 10,  "G_SPAWN_ERROR_LOOP" : 11,  "G_SPAWN_ERROR_TXTBUSY" : 12,  "G_SPAWN_ERROR_IO" : 13,  "G_SPAWN_ERROR_NFILE" : 14,  "G_SPAWN_ERROR_MFILE" : 15,  "G_SPAWN_ERROR_INVAL" : 16,  "G_SPAWN_ERROR_ISDIR" : 17,  "G_SPAWN_ERROR_LIBBAD" : 18,  "G_SPAWN_ERROR_FAILED" : 19, 
 "G_SPAWN_LEAVE_DESCRIPTORS_OPEN" : 1,  "G_SPAWN_DO_NOT_REAP_CHILD" : 2,  "G_SPAWN_SEARCH_PATH" : 4,  "G_SPAWN_STDOUT_TO_DEV_NULL" : 8,  "G_SPAWN_STDERR_TO_DEV_NULL" : 16,  "G_SPAWN_CHILD_INHERITS_STDIN" : 32,  "G_SPAWN_FILE_AND_ARGV_ZERO" : 64, 
 "G_ASCII_ALNUM" : 1,  "G_ASCII_ALPHA" : 2,  "G_ASCII_CNTRL" : 4,  "G_ASCII_DIGIT" : 8,  "G_ASCII_GRAPH" : 16,  "G_ASCII_LOWER" : 32,  "G_ASCII_PRINT" : 64,  "G_ASCII_PUNCT" : 128,  "G_ASCII_SPACE" : 256,  "G_ASCII_UPPER" : 512,  "G_ASCII_XDIGIT" : 65536, 
 "G_TEST_TRAP_SILENCE_STDOUT" : 128,  "G_TEST_TRAP_SILENCE_STDERR" : 256,  "G_TEST_TRAP_INHERIT_STDIN" : 512, 
 "G_TEST_LOG_NONE" : 0,  "G_TEST_LOG_ERROR" : 1,  "G_TEST_LOG_START_BINARY" : 2,  "G_TEST_LOG_LIST_CASE" : 3,  "G_TEST_LOG_SKIP_CASE" : 4,  "G_TEST_LOG_START_CASE" : 5,  "G_TEST_LOG_STOP_CASE" : 6,  "G_TEST_LOG_MIN_RESULT" : 7,  "G_TEST_LOG_MAX_RESULT" : 8,  "G_TEST_LOG_MESSAGE" : 9, 
 "G_VARIANT_CLASS_BOOLEAN" : "b",  "G_VARIANT_CLASS_BYTE" : "y",  "G_VARIANT_CLASS_INT16" : "n",  "G_VARIANT_CLASS_UINT16" : "q",  "G_VARIANT_CLASS_INT32" : "i",  "G_VARIANT_CLASS_UINT32" : "u",  "G_VARIANT_CLASS_INT64" : "x",  "G_VARIANT_CLASS_UINT64" : "t",  "G_VARIANT_CLASS_HANDLE" : "h",  "G_VARIANT_CLASS_DOUBLE" : "d",  "G_VARIANT_CLASS_STRING" : "s",  "G_VARIANT_CLASS_OBJECT_PATH" : "o",  "G_VARIANT_CLASS_SIGNATURE" : "g",  "G_VARIANT_CLASS_VARIANT" : "v",  "G_VARIANT_CLASS_MAYBE" : "m",  "G_VARIANT_CLASS_ARRAY" : "a",  "G_VARIANT_CLASS_TUPLE" : "(",  "G_VARIANT_CLASS_DICT_ENTRY" : "{", 
 "G_VARIANT_PARSE_ERROR_FAILED" : 0,  "G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED" : 1,  "G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE" : 2,  "G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED" : 3,  "G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END" : 4,  "G_VARIANT_PARSE_ERROR_INVALID_CHARACTER" : 5,  "G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING" : 6,  "G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH" : 7,  "G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE" : 8,  "G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING" : 9,  "G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE" : 10,  "G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE" : 11,  "G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG" : 12,  "G_VARIANT_PARSE_ERROR_TYPE_ERROR" : 13,  "G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN" : 14,  "G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD" : 15,  "G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT" : 16,  "G_VARIANT_PARSE_ERROR_VALUE_EXPECTED" : 17, 
 "G_TYPE_DEBUG_NONE" : 0,  "G_TYPE_DEBUG_OBJECTS" : 1,  "G_TYPE_DEBUG_SIGNALS" : 2,  "G_TYPE_DEBUG_MASK" : 3, 
 "G_TYPE_FLAG_CLASSED" : 1,  "G_TYPE_FLAG_INSTANTIATABLE" : 2,  "G_TYPE_FLAG_DERIVABLE" : 4,  "G_TYPE_FLAG_DEEP_DERIVABLE" : 8, 
 "G_TYPE_FLAG_ABSTRACT" : 16,  "G_TYPE_FLAG_VALUE_ABSTRACT" : 32, 
 "G_PARAM_READABLE" : 1,  "G_PARAM_WRITABLE" : 2,  "G_PARAM_CONSTRUCT" : 4,  "G_PARAM_CONSTRUCT_ONLY" : 8,  "G_PARAM_LAX_VALIDATION" : 16,  "G_PARAM_STATIC_NAME" : 32,  "G_PARAM_PRIVATE" : 32,  "G_PARAM_STATIC_NICK" : 64,  "G_PARAM_STATIC_BLURB" : 128,  "G_PARAM_DEPRECATED" : 562949953421312, 
 "G_SIGNAL_RUN_FIRST" : 1,  "G_SIGNAL_RUN_LAST" : 2,  "G_SIGNAL_RUN_CLEANUP" : 4,  "G_SIGNAL_NO_RECURSE" : 8,  "G_SIGNAL_DETAILED" : 16,  "G_SIGNAL_ACTION" : 32,  "G_SIGNAL_NO_HOOKS" : 64,  "G_SIGNAL_MUST_COLLECT" : 128, 
 "G_CONNECT_AFTER" : 1,  "G_CONNECT_SWAPPED" : 2, 
 "G_SIGNAL_MATCH_ID" : 1,  "G_SIGNAL_MATCH_DETAIL" : 2,  "G_SIGNAL_MATCH_CLOSURE" : 4,  "G_SIGNAL_MATCH_FUNC" : 8,  "G_SIGNAL_MATCH_DATA" : 16,  "G_SIGNAL_MATCH_UNBLOCKED" : 32, 
 "G_BINDING_DEFAULT" : 0,  "G_BINDING_BIDIRECTIONAL" : 1,  "G_BINDING_SYNC_CREATE" : 2,  "G_BINDING_INVERT_BOOLEAN" : 4, 
 "GST_STATE_VOID_PENDING" : 0,  "GST_STATE_NULL" : 1,  "GST_STATE_READY" : 2,  "GST_STATE_PAUSED" : 3,  "GST_STATE_PLAYING" : 4, 
 "XML_BUFFER_ALLOC_DOUBLEIT" : 0,  "XML_BUFFER_ALLOC_EXACT" : 1,  "XML_BUFFER_ALLOC_IMMUTABLE" : 2,  "XML_BUFFER_ALLOC_IO" : 3, 
 "XML_ELEMENT_NODE" : 1,  "XML_ATTRIBUTE_NODE" : 2,  "XML_TEXT_NODE" : 3,  "XML_CDATA_SECTION_NODE" : 4,  "XML_ENTITY_REF_NODE" : 5,  "XML_ENTITY_NODE" : 6,  "XML_PI_NODE" : 7,  "XML_COMMENT_NODE" : 8,  "XML_DOCUMENT_NODE" : 9,  "XML_DOCUMENT_TYPE_NODE" : 10,  "XML_DOCUMENT_FRAG_NODE" : 11,  "XML_NOTATION_NODE" : 12,  "XML_HTML_DOCUMENT_NODE" : 13,  "XML_DTD_NODE" : 14,  "XML_ELEMENT_DECL" : 15,  "XML_ATTRIBUTE_DECL" : 16,  "XML_ENTITY_DECL" : 17,  "XML_NAMESPACE_DECL" : 18,  "XML_XINCLUDE_START" : 19,  "XML_XINCLUDE_END" : 20,  "XML_DOCB_DOCUMENT_NODE" : 21, 
 "XML_ATTRIBUTE_CDATA" : 1,  "XML_ATTRIBUTE_ID" : 2,  "XML_ATTRIBUTE_IDREF" : 3,  "XML_ATTRIBUTE_IDREFS" : 4,  "XML_ATTRIBUTE_ENTITY" : 5,  "XML_ATTRIBUTE_ENTITIES" : 6,  "XML_ATTRIBUTE_NMTOKEN" : 7,  "XML_ATTRIBUTE_NMTOKENS" : 8,  "XML_ATTRIBUTE_ENUMERATION" : 9,  "XML_ATTRIBUTE_NOTATION" : 10, 
 "XML_ATTRIBUTE_NONE" : 1,  "XML_ATTRIBUTE_REQUIRED" : 2,  "XML_ATTRIBUTE_IMPLIED" : 3,  "XML_ATTRIBUTE_FIXED" : 4, 
 "XML_ELEMENT_CONTENT_PCDATA" : 1,  "XML_ELEMENT_CONTENT_ELEMENT" : 2,  "XML_ELEMENT_CONTENT_SEQ" : 3,  "XML_ELEMENT_CONTENT_OR" : 4, 
 "XML_ELEMENT_CONTENT_ONCE" : 1,  "XML_ELEMENT_CONTENT_OPT" : 2,  "XML_ELEMENT_CONTENT_MULT" : 3,  "XML_ELEMENT_CONTENT_PLUS" : 4, 
 "XML_ELEMENT_TYPE_UNDEFINED" : 0,  "XML_ELEMENT_TYPE_EMPTY" : 1,  "XML_ELEMENT_TYPE_ANY" : 2,  "XML_ELEMENT_TYPE_MIXED" : 3,  "XML_ELEMENT_TYPE_ELEMENT" : 4, 
 "XML_EXP_EMPTY" : 0,  "XML_EXP_FORBID" : 1,  "XML_EXP_ATOM" : 2,  "XML_EXP_SEQ" : 3,  "XML_EXP_OR" : 4,  "XML_EXP_COUNT" : 5, 
 "XML_DOC_WELLFORMED" : 1,  "XML_DOC_NSVALID" : 2,  "XML_DOC_OLD10" : 4,  "XML_DOC_DTDVALID" : 8,  "XML_DOC_XINCLUDE" : 16,  "XML_DOC_USERBUILT" : 32,  "XML_DOC_INTERNAL" : 64,  "XML_DOC_HTML" : 128, 
 "XML_ERR_NONE" : 0,  "XML_ERR_WARNING" : 1,  "XML_ERR_ERROR" : 2,  "XML_ERR_FATAL" : 3, 
 "XML_FROM_NONE" : 0,  "XML_FROM_PARSER" : 1,  "XML_FROM_TREE" : 2,  "XML_FROM_NAMESPACE" : 3,  "XML_FROM_DTD" : 4,  "XML_FROM_HTML" : 5,  "XML_FROM_MEMORY" : 6,  "XML_FROM_OUTPUT" : 7,  "XML_FROM_IO" : 8,  "XML_FROM_FTP" : 9,  "XML_FROM_HTTP" : 10,  "XML_FROM_XINCLUDE" : 11,  "XML_FROM_XPATH" : 12,  "XML_FROM_XPOINTER" : 13,  "XML_FROM_REGEXP" : 14,  "XML_FROM_DATATYPE" : 15,  "XML_FROM_SCHEMASP" : 16,  "XML_FROM_SCHEMASV" : 17,  "XML_FROM_RELAXNGP" : 18,  "XML_FROM_RELAXNGV" : 19,  "XML_FROM_CATALOG" : 20,  "XML_FROM_C14N" : 21,  "XML_FROM_XSLT" : 22,  "XML_FROM_VALID" : 23,  "XML_FROM_CHECK" : 24,  "XML_FROM_WRITER" : 25,  "XML_FROM_MODULE" : 26,  "XML_FROM_I18N" : 27,  "XML_FROM_SCHEMATRONV" : 28, 
 "XML_ERR_OK" : 0,  "XML_ERR_INTERNAL_ERROR" : 1,  "XML_ERR_NO_MEMORY" : 2,  "XML_ERR_DOCUMENT_START" : 3,  "XML_ERR_DOCUMENT_EMPTY" : 4,  "XML_ERR_DOCUMENT_END" : 5,  "XML_ERR_INVALID_HEX_CHARREF" : 6,  "XML_ERR_INVALID_DEC_CHARREF" : 7,  "XML_ERR_INVALID_CHARREF" : 8,  "XML_ERR_INVALID_CHAR" : 9,  "XML_ERR_CHARREF_AT_EOF" : 10,  "XML_ERR_CHARREF_IN_PROLOG" : 11,  "XML_ERR_CHARREF_IN_EPILOG" : 12,  "XML_ERR_CHARREF_IN_DTD" : 13,  "XML_ERR_ENTITYREF_AT_EOF" : 14,  "XML_ERR_ENTITYREF_IN_PROLOG" : 15,  "XML_ERR_ENTITYREF_IN_EPILOG" : 16,  "XML_ERR_ENTITYREF_IN_DTD" : 17,  "XML_ERR_PEREF_AT_EOF" : 18,  "XML_ERR_PEREF_IN_PROLOG" : 19,  "XML_ERR_PEREF_IN_EPILOG" : 20,  "XML_ERR_PEREF_IN_INT_SUBSET" : 21,  "XML_ERR_ENTITYREF_NO_NAME" : 22,  "XML_ERR_ENTITYREF_SEMICOL_MISSING" : 23,  "XML_ERR_PEREF_NO_NAME" : 24,  "XML_ERR_PEREF_SEMICOL_MISSING" : 25,  "XML_ERR_UNDECLARED_ENTITY" : 26,  "XML_WAR_UNDECLARED_ENTITY" : 27,  "XML_ERR_UNPARSED_ENTITY" : 28,  "XML_ERR_ENTITY_IS_EXTERNAL" : 29,  "XML_ERR_ENTITY_IS_PARAMETER" : 30,  "XML_ERR_UNKNOWN_ENCODING" : 31,  "XML_ERR_UNSUPPORTED_ENCODING" : 32,  "XML_ERR_STRING_NOT_STARTED" : 33,  "XML_ERR_STRING_NOT_CLOSED" : 34,  "XML_ERR_NS_DECL_ERROR" : 35,  "XML_ERR_ENTITY_NOT_STARTED" : 36,  "XML_ERR_ENTITY_NOT_FINISHED" : 37,  "XML_ERR_LT_IN_ATTRIBUTE" : 38,  "XML_ERR_ATTRIBUTE_NOT_STARTED" : 39,  "XML_ERR_ATTRIBUTE_NOT_FINISHED" : 40,  "XML_ERR_ATTRIBUTE_WITHOUT_VALUE" : 41,  "XML_ERR_ATTRIBUTE_REDEFINED" : 42,  "XML_ERR_LITERAL_NOT_STARTED" : 43,  "XML_ERR_LITERAL_NOT_FINISHED" : 44,  "XML_ERR_COMMENT_NOT_FINISHED" : 45,  "XML_ERR_PI_NOT_STARTED" : 46,  "XML_ERR_PI_NOT_FINISHED" : 47,  "XML_ERR_NOTATION_NOT_STARTED" : 48,  "XML_ERR_NOTATION_NOT_FINISHED" : 49,  "XML_ERR_ATTLIST_NOT_STARTED" : 50,  "XML_ERR_ATTLIST_NOT_FINISHED" : 51,  "XML_ERR_MIXED_NOT_STARTED" : 52,  "XML_ERR_MIXED_NOT_FINISHED" : 53,  "XML_ERR_ELEMCONTENT_NOT_STARTED" : 54,  "XML_ERR_ELEMCONTENT_NOT_FINISHED" : 55,  "XML_ERR_XMLDECL_NOT_STARTED" : 56,  "XML_ERR_XMLDECL_NOT_FINISHED" : 57,  "XML_ERR_CONDSEC_NOT_STARTED" : 58,  "XML_ERR_CONDSEC_NOT_FINISHED" : 59,  "XML_ERR_EXT_SUBSET_NOT_FINISHED" : 60,  "XML_ERR_DOCTYPE_NOT_FINISHED" : 61,  "XML_ERR_MISPLACED_CDATA_END" : 62,  "XML_ERR_CDATA_NOT_FINISHED" : 63,  "XML_ERR_RESERVED_XML_NAME" : 64,  "XML_ERR_SPACE_REQUIRED" : 65,  "XML_ERR_SEPARATOR_REQUIRED" : 66,  "XML_ERR_NMTOKEN_REQUIRED" : 67,  "XML_ERR_NAME_REQUIRED" : 68,  "XML_ERR_PCDATA_REQUIRED" : 69,  "XML_ERR_URI_REQUIRED" : 70,  "XML_ERR_PUBID_REQUIRED" : 71,  "XML_ERR_LT_REQUIRED" : 72,  "XML_ERR_GT_REQUIRED" : 73,  "XML_ERR_LTSLASH_REQUIRED" : 74,  "XML_ERR_EQUAL_REQUIRED" : 75,  "XML_ERR_TAG_NAME_MISMATCH" : 76,  "XML_ERR_TAG_NOT_FINISHED" : 77,  "XML_ERR_STANDALONE_VALUE" : 78,  "XML_ERR_ENCODING_NAME" : 79,  "XML_ERR_HYPHEN_IN_COMMENT" : 80,  "XML_ERR_INVALID_ENCODING" : 81,  "XML_ERR_EXT_ENTITY_STANDALONE" : 82,  "XML_ERR_CONDSEC_INVALID" : 83,  "XML_ERR_VALUE_REQUIRED" : 84,  "XML_ERR_NOT_WELL_BALANCED" : 85,  "XML_ERR_EXTRA_CONTENT" : 86,  "XML_ERR_ENTITY_CHAR_ERROR" : 87,  "XML_ERR_ENTITY_PE_INTERNAL" : 88,  "XML_ERR_ENTITY_LOOP" : 89,  "XML_ERR_ENTITY_BOUNDARY" : 90,  "XML_ERR_INVALID_URI" : 91,  "XML_ERR_URI_FRAGMENT" : 92,  "XML_WAR_CATALOG_PI" : 93,  "XML_ERR_NO_DTD" : 94,  "XML_ERR_CONDSEC_INVALID_KEYWORD" : 95,  "XML_ERR_VERSION_MISSING" : 96,  "XML_WAR_UNKNOWN_VERSION" : 97,  "XML_WAR_LANG_VALUE" : 98,  "XML_WAR_NS_URI" : 99,  "XML_WAR_NS_URI_RELATIVE" : 100,  "XML_ERR_MISSING_ENCODING" : 101,  "XML_WAR_SPACE_VALUE" : 102,  "XML_ERR_NOT_STANDALONE" : 103,  "XML_ERR_ENTITY_PROCESSING" : 104,  "XML_ERR_NOTATION_PROCESSING" : 105,  "XML_WAR_NS_COLUMN" : 106,  "XML_WAR_ENTITY_REDEFINED" : 107,  "XML_ERR_UNKNOWN_VERSION" : 108,  "XML_ERR_VERSION_MISMATCH" : 109,  "XML_NS_ERR_XML_NAMESPACE" : 200,  "XML_NS_ERR_UNDEFINED_NAMESPACE" : 201,  "XML_NS_ERR_QNAME" : 202,  "XML_NS_ERR_ATTRIBUTE_REDEFINED" : 203,  "XML_NS_ERR_EMPTY" : 204,  "XML_NS_ERR_COLON" : 205,  "XML_DTD_ATTRIBUTE_DEFAULT" : 500,  "XML_DTD_ATTRIBUTE_REDEFINED" : 501,  "XML_DTD_ATTRIBUTE_VALUE" : 502,  "XML_DTD_CONTENT_ERROR" : 503,  "XML_DTD_CONTENT_MODEL" : 504,  "XML_DTD_CONTENT_NOT_DETERMINIST" : 505,  "XML_DTD_DIFFERENT_PREFIX" : 506,  "XML_DTD_ELEM_DEFAULT_NAMESPACE" : 507,  "XML_DTD_ELEM_NAMESPACE" : 508,  "XML_DTD_ELEM_REDEFINED" : 509,  "XML_DTD_EMPTY_NOTATION" : 510,  "XML_DTD_ENTITY_TYPE" : 511,  "XML_DTD_ID_FIXED" : 512,  "XML_DTD_ID_REDEFINED" : 513,  "XML_DTD_ID_SUBSET" : 514,  "XML_DTD_INVALID_CHILD" : 515,  "XML_DTD_INVALID_DEFAULT" : 516,  "XML_DTD_LOAD_ERROR" : 517,  "XML_DTD_MISSING_ATTRIBUTE" : 518,  "XML_DTD_MIXED_CORRUPT" : 519,  "XML_DTD_MULTIPLE_ID" : 520,  "XML_DTD_NO_DOC" : 521,  "XML_DTD_NO_DTD" : 522,  "XML_DTD_NO_ELEM_NAME" : 523,  "XML_DTD_NO_PREFIX" : 524,  "XML_DTD_NO_ROOT" : 525,  "XML_DTD_NOTATION_REDEFINED" : 526,  "XML_DTD_NOTATION_VALUE" : 527,  "XML_DTD_NOT_EMPTY" : 528,  "XML_DTD_NOT_PCDATA" : 529,  "XML_DTD_NOT_STANDALONE" : 530,  "XML_DTD_ROOT_NAME" : 531,  "XML_DTD_STANDALONE_WHITE_SPACE" : 532,  "XML_DTD_UNKNOWN_ATTRIBUTE" : 533,  "XML_DTD_UNKNOWN_ELEM" : 534,  "XML_DTD_UNKNOWN_ENTITY" : 535,  "XML_DTD_UNKNOWN_ID" : 536,  "XML_DTD_UNKNOWN_NOTATION" : 537,  "XML_DTD_STANDALONE_DEFAULTED" : 538,  "XML_DTD_XMLID_VALUE" : 539,  "XML_DTD_XMLID_TYPE" : 540,  "XML_DTD_DUP_TOKEN" : 541,  "XML_HTML_STRUCURE_ERROR" : 800,  "XML_HTML_UNKNOWN_TAG" : 801,  "XML_RNGP_ANYNAME_ATTR_ANCESTOR" : 1000,  "XML_RNGP_ATTR_CONFLICT" : 1001,  "XML_RNGP_ATTRIBUTE_CHILDREN" : 1002,  "XML_RNGP_ATTRIBUTE_CONTENT" : 1003,  "XML_RNGP_ATTRIBUTE_EMPTY" : 1004,  "XML_RNGP_ATTRIBUTE_NOOP" : 1005,  "XML_RNGP_CHOICE_CONTENT" : 1006,  "XML_RNGP_CHOICE_EMPTY" : 1007,  "XML_RNGP_CREATE_FAILURE" : 1008,  "XML_RNGP_DATA_CONTENT" : 1009,  "XML_RNGP_DEF_CHOICE_AND_INTERLEAVE" : 1010,  "XML_RNGP_DEFINE_CREATE_FAILED" : 1011,  "XML_RNGP_DEFINE_EMPTY" : 1012,  "XML_RNGP_DEFINE_MISSING" : 1013,  "XML_RNGP_DEFINE_NAME_MISSING" : 1014,  "XML_RNGP_ELEM_CONTENT_EMPTY" : 1015,  "XML_RNGP_ELEM_CONTENT_ERROR" : 1016,  "XML_RNGP_ELEMENT_EMPTY" : 1017,  "XML_RNGP_ELEMENT_CONTENT" : 1018,  "XML_RNGP_ELEMENT_NAME" : 1019,  "XML_RNGP_ELEMENT_NO_CONTENT" : 1020,  "XML_RNGP_ELEM_TEXT_CONFLICT" : 1021,  "XML_RNGP_EMPTY" : 1022,  "XML_RNGP_EMPTY_CONSTRUCT" : 1023,  "XML_RNGP_EMPTY_CONTENT" : 1024,  "XML_RNGP_EMPTY_NOT_EMPTY" : 1025,  "XML_RNGP_ERROR_TYPE_LIB" : 1026,  "XML_RNGP_EXCEPT_EMPTY" : 1027,  "XML_RNGP_EXCEPT_MISSING" : 1028,  "XML_RNGP_EXCEPT_MULTIPLE" : 1029,  "XML_RNGP_EXCEPT_NO_CONTENT" : 1030,  "XML_RNGP_EXTERNALREF_EMTPY" : 1031,  "XML_RNGP_EXTERNAL_REF_FAILURE" : 1032,  "XML_RNGP_EXTERNALREF_RECURSE" : 1033,  "XML_RNGP_FORBIDDEN_ATTRIBUTE" : 1034,  "XML_RNGP_FOREIGN_ELEMENT" : 1035,  "XML_RNGP_GRAMMAR_CONTENT" : 1036,  "XML_RNGP_GRAMMAR_EMPTY" : 1037,  "XML_RNGP_GRAMMAR_MISSING" : 1038,  "XML_RNGP_GRAMMAR_NO_START" : 1039,  "XML_RNGP_GROUP_ATTR_CONFLICT" : 1040,  "XML_RNGP_HREF_ERROR" : 1041,  "XML_RNGP_INCLUDE_EMPTY" : 1042,  "XML_RNGP_INCLUDE_FAILURE" : 1043,  "XML_RNGP_INCLUDE_RECURSE" : 1044,  "XML_RNGP_INTERLEAVE_ADD" : 1045,  "XML_RNGP_INTERLEAVE_CREATE_FAILED" : 1046,  "XML_RNGP_INTERLEAVE_EMPTY" : 1047,  "XML_RNGP_INTERLEAVE_NO_CONTENT" : 1048,  "XML_RNGP_INVALID_DEFINE_NAME" : 1049,  "XML_RNGP_INVALID_URI" : 1050,  "XML_RNGP_INVALID_VALUE" : 1051,  "XML_RNGP_MISSING_HREF" : 1052,  "XML_RNGP_NAME_MISSING" : 1053,  "XML_RNGP_NEED_COMBINE" : 1054,  "XML_RNGP_NOTALLOWED_NOT_EMPTY" : 1055,  "XML_RNGP_NSNAME_ATTR_ANCESTOR" : 1056,  "XML_RNGP_NSNAME_NO_NS" : 1057,  "XML_RNGP_PARAM_FORBIDDEN" : 1058,  "XML_RNGP_PARAM_NAME_MISSING" : 1059,  "XML_RNGP_PARENTREF_CREATE_FAILED" : 1060,  "XML_RNGP_PARENTREF_NAME_INVALID" : 1061,  "XML_RNGP_PARENTREF_NO_NAME" : 1062,  "XML_RNGP_PARENTREF_NO_PARENT" : 1063,  "XML_RNGP_PARENTREF_NOT_EMPTY" : 1064,  "XML_RNGP_PARSE_ERROR" : 1065,  "XML_RNGP_PAT_ANYNAME_EXCEPT_ANYNAME" : 1066,  "XML_RNGP_PAT_ATTR_ATTR" : 1067,  "XML_RNGP_PAT_ATTR_ELEM" : 1068,  "XML_RNGP_PAT_DATA_EXCEPT_ATTR" : 1069,  "XML_RNGP_PAT_DATA_EXCEPT_ELEM" : 1070,  "XML_RNGP_PAT_DATA_EXCEPT_EMPTY" : 1071,  "XML_RNGP_PAT_DATA_EXCEPT_GROUP" : 1072,  "XML_RNGP_PAT_DATA_EXCEPT_INTERLEAVE" : 1073,  "XML_RNGP_PAT_DATA_EXCEPT_LIST" : 1074,  "XML_RNGP_PAT_DATA_EXCEPT_ONEMORE" : 1075,  "XML_RNGP_PAT_DATA_EXCEPT_REF" : 1076,  "XML_RNGP_PAT_DATA_EXCEPT_TEXT" : 1077,  "XML_RNGP_PAT_LIST_ATTR" : 1078,  "XML_RNGP_PAT_LIST_ELEM" : 1079,  "XML_RNGP_PAT_LIST_INTERLEAVE" : 1080,  "XML_RNGP_PAT_LIST_LIST" : 1081,  "XML_RNGP_PAT_LIST_REF" : 1082,  "XML_RNGP_PAT_LIST_TEXT" : 1083,  "XML_RNGP_PAT_NSNAME_EXCEPT_ANYNAME" : 1084,  "XML_RNGP_PAT_NSNAME_EXCEPT_NSNAME" : 1085,  "XML_RNGP_PAT_ONEMORE_GROUP_ATTR" : 1086,  "XML_RNGP_PAT_ONEMORE_INTERLEAVE_ATTR" : 1087,  "XML_RNGP_PAT_START_ATTR" : 1088,  "XML_RNGP_PAT_START_DATA" : 1089,  "XML_RNGP_PAT_START_EMPTY" : 1090,  "XML_RNGP_PAT_START_GROUP" : 1091,  "XML_RNGP_PAT_START_INTERLEAVE" : 1092,  "XML_RNGP_PAT_START_LIST" : 1093,  "XML_RNGP_PAT_START_ONEMORE" : 1094,  "XML_RNGP_PAT_START_TEXT" : 1095,  "XML_RNGP_PAT_START_VALUE" : 1096,  "XML_RNGP_PREFIX_UNDEFINED" : 1097,  "XML_RNGP_REF_CREATE_FAILED" : 1098,  "XML_RNGP_REF_CYCLE" : 1099,  "XML_RNGP_REF_NAME_INVALID" : 1100,  "XML_RNGP_REF_NO_DEF" : 1101,  "XML_RNGP_REF_NO_NAME" : 1102,  "XML_RNGP_REF_NOT_EMPTY" : 1103,  "XML_RNGP_START_CHOICE_AND_INTERLEAVE" : 1104,  "XML_RNGP_START_CONTENT" : 1105,  "XML_RNGP_START_EMPTY" : 1106,  "XML_RNGP_START_MISSING" : 1107,  "XML_RNGP_TEXT_EXPECTED" : 1108,  "XML_RNGP_TEXT_HAS_CHILD" : 1109,  "XML_RNGP_TYPE_MISSING" : 1110,  "XML_RNGP_TYPE_NOT_FOUND" : 1111,  "XML_RNGP_TYPE_VALUE" : 1112,  "XML_RNGP_UNKNOWN_ATTRIBUTE" : 1113,  "XML_RNGP_UNKNOWN_COMBINE" : 1114,  "XML_RNGP_UNKNOWN_CONSTRUCT" : 1115,  "XML_RNGP_UNKNOWN_TYPE_LIB" : 1116,  "XML_RNGP_URI_FRAGMENT" : 1117,  "XML_RNGP_URI_NOT_ABSOLUTE" : 1118,  "XML_RNGP_VALUE_EMPTY" : 1119,  "XML_RNGP_VALUE_NO_CONTENT" : 1120,  "XML_RNGP_XMLNS_NAME" : 1121,  "XML_RNGP_XML_NS" : 1122,  "XML_XPATH_EXPRESSION_OK" : 1200,  "XML_XPATH_NUMBER_ERROR" : 1201,  "XML_XPATH_UNFINISHED_LITERAL_ERROR" : 1202,  "XML_XPATH_START_LITERAL_ERROR" : 1203,  "XML_XPATH_VARIABLE_REF_ERROR" : 1204,  "XML_XPATH_UNDEF_VARIABLE_ERROR" : 1205,  "XML_XPATH_INVALID_PREDICATE_ERROR" : 1206,  "XML_XPATH_EXPR_ERROR" : 1207,  "XML_XPATH_UNCLOSED_ERROR" : 1208,  "XML_XPATH_UNKNOWN_FUNC_ERROR" : 1209,  "XML_XPATH_INVALID_OPERAND" : 1210,  "XML_XPATH_INVALID_TYPE" : 1211,  "XML_XPATH_INVALID_ARITY" : 1212,  "XML_XPATH_INVALID_CTXT_SIZE" : 1213,  "XML_XPATH_INVALID_CTXT_POSITION" : 1214,  "XML_XPATH_MEMORY_ERROR" : 1215,  "XML_XPTR_SYNTAX_ERROR" : 1216,  "XML_XPTR_RESOURCE_ERROR" : 1217,  "XML_XPTR_SUB_RESOURCE_ERROR" : 1218,  "XML_XPATH_UNDEF_PREFIX_ERROR" : 1219,  "XML_XPATH_ENCODING_ERROR" : 1220,  "XML_XPATH_INVALID_CHAR_ERROR" : 1221,  "XML_TREE_INVALID_HEX" : 1300,  "XML_TREE_INVALID_DEC" : 1301,  "XML_TREE_UNTERMINATED_ENTITY" : 1302,  "XML_TREE_NOT_UTF8" : 1303,  "XML_SAVE_NOT_UTF8" : 1400,  "XML_SAVE_CHAR_INVALID" : 1401,  "XML_SAVE_NO_DOCTYPE" : 1402,  "XML_SAVE_UNKNOWN_ENCODING" : 1403,  "XML_REGEXP_COMPILE_ERROR" : 1450,  "XML_IO_UNKNOWN" : 1500,  "XML_IO_EACCES" : 1501,  "XML_IO_EAGAIN" : 1502,  "XML_IO_EBADF" : 1503,  "XML_IO_EBADMSG" : 1504,  "XML_IO_EBUSY" : 1505,  "XML_IO_ECANCELED" : 1506,  "XML_IO_ECHILD" : 1507,  "XML_IO_EDEADLK" : 1508,  "XML_IO_EDOM" : 1509,  "XML_IO_EEXIST" : 1510,  "XML_IO_EFAULT" : 1511,  "XML_IO_EFBIG" : 1512,  "XML_IO_EINPROGRESS" : 1513,  "XML_IO_EINTR" : 1514,  "XML_IO_EINVAL" : 1515,  "XML_IO_EIO" : 1516,  "XML_IO_EISDIR" : 1517,  "XML_IO_EMFILE" : 1518,  "XML_IO_EMLINK" : 1519,  "XML_IO_EMSGSIZE" : 1520,  "XML_IO_ENAMETOOLONG" : 1521,  "XML_IO_ENFILE" : 1522,  "XML_IO_ENODEV" : 1523,  "XML_IO_ENOENT" : 1524,  "XML_IO_ENOEXEC" : 1525,  "XML_IO_ENOLCK" : 1526,  "XML_IO_ENOMEM" : 1527,  "XML_IO_ENOSPC" : 1528,  "XML_IO_ENOSYS" : 1529,  "XML_IO_ENOTDIR" : 1530,  "XML_IO_ENOTEMPTY" : 1531,  "XML_IO_ENOTSUP" : 1532,  "XML_IO_ENOTTY" : 1533,  "XML_IO_ENXIO" : 1534,  "XML_IO_EPERM" : 1535,  "XML_IO_EPIPE" : 1536,  "XML_IO_ERANGE" : 1537,  "XML_IO_EROFS" : 1538,  "XML_IO_ESPIPE" : 1539,  "XML_IO_ESRCH" : 1540,  "XML_IO_ETIMEDOUT" : 1541,  "XML_IO_EXDEV" : 1542,  "XML_IO_NETWORK_ATTEMPT" : 1543,  "XML_IO_ENCODER" : 1544,  "XML_IO_FLUSH" : 1545,  "XML_IO_WRITE" : 1546,  "XML_IO_NO_INPUT" : 1547,  "XML_IO_BUFFER_FULL" : 1548,  "XML_IO_LOAD_ERROR" : 1549,  "XML_IO_ENOTSOCK" : 1550,  "XML_IO_EISCONN" : 1551,  "XML_IO_ECONNREFUSED" : 1552,  "XML_IO_ENETUNREACH" : 1553,  "XML_IO_EADDRINUSE" : 1554,  "XML_IO_EALREADY" : 1555,  "XML_IO_EAFNOSUPPORT" : 1556,  "XML_XINCLUDE_RECURSION" : 1600,  "XML_XINCLUDE_PARSE_VALUE" : 1601,  "XML_XINCLUDE_ENTITY_DEF_MISMATCH" : 1602,  "XML_XINCLUDE_NO_HREF" : 1603,  "XML_XINCLUDE_NO_FALLBACK" : 1604,  "XML_XINCLUDE_HREF_URI" : 1605,  "XML_XINCLUDE_TEXT_FRAGMENT" : 1606,  "XML_XINCLUDE_TEXT_DOCUMENT" : 1607,  "XML_XINCLUDE_INVALID_CHAR" : 1608,  "XML_XINCLUDE_BUILD_FAILED" : 1609,  "XML_XINCLUDE_UNKNOWN_ENCODING" : 1610,  "XML_XINCLUDE_MULTIPLE_ROOT" : 1611,  "XML_XINCLUDE_XPTR_FAILED" : 1612,  "XML_XINCLUDE_XPTR_RESULT" : 1613,  "XML_XINCLUDE_INCLUDE_IN_INCLUDE" : 1614,  "XML_XINCLUDE_FALLBACKS_IN_INCLUDE" : 1615,  "XML_XINCLUDE_FALLBACK_NOT_IN_INCLUDE" : 1616,  "XML_XINCLUDE_DEPRECATED_NS" : 1617,  "XML_XINCLUDE_FRAGMENT_ID" : 1618,  "XML_CATALOG_MISSING_ATTR" : 1650,  "XML_CATALOG_ENTRY_BROKEN" : 1651,  "XML_CATALOG_PREFER_VALUE" : 1652,  "XML_CATALOG_NOT_CATALOG" : 1653,  "XML_CATALOG_RECURSION" : 1654,  "XML_SCHEMAP_PREFIX_UNDEFINED" : 1700,  "XML_SCHEMAP_ATTRFORMDEFAULT_VALUE" : 1701,  "XML_SCHEMAP_ATTRGRP_NONAME_NOREF" : 1702,  "XML_SCHEMAP_ATTR_NONAME_NOREF" : 1703,  "XML_SCHEMAP_COMPLEXTYPE_NONAME_NOREF" : 1704,  "XML_SCHEMAP_ELEMFORMDEFAULT_VALUE" : 1705,  "XML_SCHEMAP_ELEM_NONAME_NOREF" : 1706,  "XML_SCHEMAP_EXTENSION_NO_BASE" : 1707,  "XML_SCHEMAP_FACET_NO_VALUE" : 1708,  "XML_SCHEMAP_FAILED_BUILD_IMPORT" : 1709,  "XML_SCHEMAP_GROUP_NONAME_NOREF" : 1710,  "XML_SCHEMAP_IMPORT_NAMESPACE_NOT_URI" : 1711,  "XML_SCHEMAP_IMPORT_REDEFINE_NSNAME" : 1712,  "XML_SCHEMAP_IMPORT_SCHEMA_NOT_URI" : 1713,  "XML_SCHEMAP_INVALID_BOOLEAN" : 1714,  "XML_SCHEMAP_INVALID_ENUM" : 1715,  "XML_SCHEMAP_INVALID_FACET" : 1716,  "XML_SCHEMAP_INVALID_FACET_VALUE" : 1717,  "XML_SCHEMAP_INVALID_MAXOCCURS" : 1718,  "XML_SCHEMAP_INVALID_MINOCCURS" : 1719,  "XML_SCHEMAP_INVALID_REF_AND_SUBTYPE" : 1720,  "XML_SCHEMAP_INVALID_WHITE_SPACE" : 1721,  "XML_SCHEMAP_NOATTR_NOREF" : 1722,  "XML_SCHEMAP_NOTATION_NO_NAME" : 1723,  "XML_SCHEMAP_NOTYPE_NOREF" : 1724,  "XML_SCHEMAP_REF_AND_SUBTYPE" : 1725,  "XML_SCHEMAP_RESTRICTION_NONAME_NOREF" : 1726,  "XML_SCHEMAP_SIMPLETYPE_NONAME" : 1727,  "XML_SCHEMAP_TYPE_AND_SUBTYPE" : 1728,  "XML_SCHEMAP_UNKNOWN_ALL_CHILD" : 1729,  "XML_SCHEMAP_UNKNOWN_ANYATTRIBUTE_CHILD" : 1730,  "XML_SCHEMAP_UNKNOWN_ATTR_CHILD" : 1731,  "XML_SCHEMAP_UNKNOWN_ATTRGRP_CHILD" : 1732,  "XML_SCHEMAP_UNKNOWN_ATTRIBUTE_GROUP" : 1733,  "XML_SCHEMAP_UNKNOWN_BASE_TYPE" : 1734,  "XML_SCHEMAP_UNKNOWN_CHOICE_CHILD" : 1735,  "XML_SCHEMAP_UNKNOWN_COMPLEXCONTENT_CHILD" : 1736,  "XML_SCHEMAP_UNKNOWN_COMPLEXTYPE_CHILD" : 1737,  "XML_SCHEMAP_UNKNOWN_ELEM_CHILD" : 1738,  "XML_SCHEMAP_UNKNOWN_EXTENSION_CHILD" : 1739,  "XML_SCHEMAP_UNKNOWN_FACET_CHILD" : 1740,  "XML_SCHEMAP_UNKNOWN_FACET_TYPE" : 1741,  "XML_SCHEMAP_UNKNOWN_GROUP_CHILD" : 1742,  "XML_SCHEMAP_UNKNOWN_IMPORT_CHILD" : 1743,  "XML_SCHEMAP_UNKNOWN_LIST_CHILD" : 1744,  "XML_SCHEMAP_UNKNOWN_NOTATION_CHILD" : 1745,  "XML_SCHEMAP_UNKNOWN_PROCESSCONTENT_CHILD" : 1746,  "XML_SCHEMAP_UNKNOWN_REF" : 1747,  "XML_SCHEMAP_UNKNOWN_RESTRICTION_CHILD" : 1748,  "XML_SCHEMAP_UNKNOWN_SCHEMAS_CHILD" : 1749,  "XML_SCHEMAP_UNKNOWN_SEQUENCE_CHILD" : 1750,  "XML_SCHEMAP_UNKNOWN_SIMPLECONTENT_CHILD" : 1751,  "XML_SCHEMAP_UNKNOWN_SIMPLETYPE_CHILD" : 1752,  "XML_SCHEMAP_UNKNOWN_TYPE" : 1753,  "XML_SCHEMAP_UNKNOWN_UNION_CHILD" : 1754,  "XML_SCHEMAP_ELEM_DEFAULT_FIXED" : 1755,  "XML_SCHEMAP_REGEXP_INVALID" : 1756,  "XML_SCHEMAP_FAILED_LOAD" : 1757,  "XML_SCHEMAP_NOTHING_TO_PARSE" : 1758,  "XML_SCHEMAP_NOROOT" : 1759,  "XML_SCHEMAP_REDEFINED_GROUP" : 1760,  "XML_SCHEMAP_REDEFINED_TYPE" : 1761,  "XML_SCHEMAP_REDEFINED_ELEMENT" : 1762,  "XML_SCHEMAP_REDEFINED_ATTRGROUP" : 1763,  "XML_SCHEMAP_REDEFINED_ATTR" : 1764,  "XML_SCHEMAP_REDEFINED_NOTATION" : 1765,  "XML_SCHEMAP_FAILED_PARSE" : 1766,  "XML_SCHEMAP_UNKNOWN_PREFIX" : 1767,  "XML_SCHEMAP_DEF_AND_PREFIX" : 1768,  "XML_SCHEMAP_UNKNOWN_INCLUDE_CHILD" : 1769,  "XML_SCHEMAP_INCLUDE_SCHEMA_NOT_URI" : 1770,  "XML_SCHEMAP_INCLUDE_SCHEMA_NO_URI" : 1771,  "XML_SCHEMAP_NOT_SCHEMA" : 1772,  "XML_SCHEMAP_UNKNOWN_MEMBER_TYPE" : 1773,  "XML_SCHEMAP_INVALID_ATTR_USE" : 1774,  "XML_SCHEMAP_RECURSIVE" : 1775,  "XML_SCHEMAP_SUPERNUMEROUS_LIST_ITEM_TYPE" : 1776,  "XML_SCHEMAP_INVALID_ATTR_COMBINATION" : 1777,  "XML_SCHEMAP_INVALID_ATTR_INLINE_COMBINATION" : 1778,  "XML_SCHEMAP_MISSING_SIMPLETYPE_CHILD" : 1779,  "XML_SCHEMAP_INVALID_ATTR_NAME" : 1780,  "XML_SCHEMAP_REF_AND_CONTENT" : 1781,  "XML_SCHEMAP_CT_PROPS_CORRECT_1" : 1782,  "XML_SCHEMAP_CT_PROPS_CORRECT_2" : 1783,  "XML_SCHEMAP_CT_PROPS_CORRECT_3" : 1784,  "XML_SCHEMAP_CT_PROPS_CORRECT_4" : 1785,  "XML_SCHEMAP_CT_PROPS_CORRECT_5" : 1786,  "XML_SCHEMAP_DERIVATION_OK_RESTRICTION_1" : 1787,  "XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_1" : 1788,  "XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_2" : 1789,  "XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_2" : 1790,  "XML_SCHEMAP_DERIVATION_OK_RESTRICTION_3" : 1791,  "XML_SCHEMAP_WILDCARD_INVALID_NS_MEMBER" : 1792,  "XML_SCHEMAP_INTERSECTION_NOT_EXPRESSIBLE" : 1793,  "XML_SCHEMAP_UNION_NOT_EXPRESSIBLE" : 1794,  "XML_SCHEMAP_SRC_IMPORT_3_1" : 1795,  "XML_SCHEMAP_SRC_IMPORT_3_2" : 1796,  "XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_1" : 1797,  "XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_2" : 1798,  "XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_3" : 1799,  "XML_SCHEMAP_COS_CT_EXTENDS_1_3" : 1800,  "XML_SCHEMAV_NOROOT" : 1801,  "XML_SCHEMAV_UNDECLAREDELEM" : 1802,  "XML_SCHEMAV_NOTTOPLEVEL" : 1803,  "XML_SCHEMAV_MISSING" : 1804,  "XML_SCHEMAV_WRONGELEM" : 1805,  "XML_SCHEMAV_NOTYPE" : 1806,  "XML_SCHEMAV_NOROLLBACK" : 1807,  "XML_SCHEMAV_ISABSTRACT" : 1808,  "XML_SCHEMAV_NOTEMPTY" : 1809,  "XML_SCHEMAV_ELEMCONT" : 1810,  "XML_SCHEMAV_HAVEDEFAULT" : 1811,  "XML_SCHEMAV_NOTNILLABLE" : 1812,  "XML_SCHEMAV_EXTRACONTENT" : 1813,  "XML_SCHEMAV_INVALIDATTR" : 1814,  "XML_SCHEMAV_INVALIDELEM" : 1815,  "XML_SCHEMAV_NOTDETERMINIST" : 1816,  "XML_SCHEMAV_CONSTRUCT" : 1817,  "XML_SCHEMAV_INTERNAL" : 1818,  "XML_SCHEMAV_NOTSIMPLE" : 1819,  "XML_SCHEMAV_ATTRUNKNOWN" : 1820,  "XML_SCHEMAV_ATTRINVALID" : 1821,  "XML_SCHEMAV_VALUE" : 1822,  "XML_SCHEMAV_FACET" : 1823,  "XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_1" : 1824,  "XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_2" : 1825,  "XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_3" : 1826,  "XML_SCHEMAV_CVC_TYPE_3_1_1" : 1827,  "XML_SCHEMAV_CVC_TYPE_3_1_2" : 1828,  "XML_SCHEMAV_CVC_FACET_VALID" : 1829,  "XML_SCHEMAV_CVC_LENGTH_VALID" : 1830,  "XML_SCHEMAV_CVC_MINLENGTH_VALID" : 1831,  "XML_SCHEMAV_CVC_MAXLENGTH_VALID" : 1832,  "XML_SCHEMAV_CVC_MININCLUSIVE_VALID" : 1833,  "XML_SCHEMAV_CVC_MAXINCLUSIVE_VALID" : 1834,  "XML_SCHEMAV_CVC_MINEXCLUSIVE_VALID" : 1835,  "XML_SCHEMAV_CVC_MAXEXCLUSIVE_VALID" : 1836,  "XML_SCHEMAV_CVC_TOTALDIGITS_VALID" : 1837,  "XML_SCHEMAV_CVC_FRACTIONDIGITS_VALID" : 1838,  "XML_SCHEMAV_CVC_PATTERN_VALID" : 1839,  "XML_SCHEMAV_CVC_ENUMERATION_VALID" : 1840,  "XML_SCHEMAV_CVC_COMPLEX_TYPE_2_1" : 1841,  "XML_SCHEMAV_CVC_COMPLEX_TYPE_2_2" : 1842,  "XML_SCHEMAV_CVC_COMPLEX_TYPE_2_3" : 1843,  "XML_SCHEMAV_CVC_COMPLEX_TYPE_2_4" : 1844,  "XML_SCHEMAV_CVC_ELT_1" : 1845,  "XML_SCHEMAV_CVC_ELT_2" : 1846,  "XML_SCHEMAV_CVC_ELT_3_1" : 1847,  "XML_SCHEMAV_CVC_ELT_3_2_1" : 1848,  "XML_SCHEMAV_CVC_ELT_3_2_2" : 1849,  "XML_SCHEMAV_CVC_ELT_4_1" : 1850,  "XML_SCHEMAV_CVC_ELT_4_2" : 1851,  "XML_SCHEMAV_CVC_ELT_4_3" : 1852,  "XML_SCHEMAV_CVC_ELT_5_1_1" : 1853,  "XML_SCHEMAV_CVC_ELT_5_1_2" : 1854,  "XML_SCHEMAV_CVC_ELT_5_2_1" : 1855,  "XML_SCHEMAV_CVC_ELT_5_2_2_1" : 1856,  "XML_SCHEMAV_CVC_ELT_5_2_2_2_1" : 1857,  "XML_SCHEMAV_CVC_ELT_5_2_2_2_2" : 1858,  "XML_SCHEMAV_CVC_ELT_6" : 1859,  "XML_SCHEMAV_CVC_ELT_7" : 1860,  "XML_SCHEMAV_CVC_ATTRIBUTE_1" : 1861,  "XML_SCHEMAV_CVC_ATTRIBUTE_2" : 1862,  "XML_SCHEMAV_CVC_ATTRIBUTE_3" : 1863,  "XML_SCHEMAV_CVC_ATTRIBUTE_4" : 1864,  "XML_SCHEMAV_CVC_COMPLEX_TYPE_3_1" : 1865,  "XML_SCHEMAV_CVC_COMPLEX_TYPE_3_2_1" : 1866,  "XML_SCHEMAV_CVC_COMPLEX_TYPE_3_2_2" : 1867,  "XML_SCHEMAV_CVC_COMPLEX_TYPE_4" : 1868,  "XML_SCHEMAV_CVC_COMPLEX_TYPE_5_1" : 1869,  "XML_SCHEMAV_CVC_COMPLEX_TYPE_5_2" : 1870,  "XML_SCHEMAV_ELEMENT_CONTENT" : 1871,  "XML_SCHEMAV_DOCUMENT_ELEMENT_MISSING" : 1872,  "XML_SCHEMAV_CVC_COMPLEX_TYPE_1" : 1873,  "XML_SCHEMAV_CVC_AU" : 1874,  "XML_SCHEMAV_CVC_TYPE_1" : 1875,  "XML_SCHEMAV_CVC_TYPE_2" : 1876,  "XML_SCHEMAV_CVC_IDC" : 1877,  "XML_SCHEMAV_CVC_WILDCARD" : 1878,  "XML_SCHEMAV_MISC" : 1879,  "XML_XPTR_UNKNOWN_SCHEME" : 1900,  "XML_XPTR_CHILDSEQ_START" : 1901,  "XML_XPTR_EVAL_FAILED" : 1902,  "XML_XPTR_EXTRA_OBJECTS" : 1903,  "XML_C14N_CREATE_CTXT" : 1950,  "XML_C14N_REQUIRES_UTF8" : 1951,  "XML_C14N_CREATE_STACK" : 1952,  "XML_C14N_INVALID_NODE" : 1953,  "XML_C14N_UNKNOW_NODE" : 1954,  "XML_C14N_RELATIVE_NAMESPACE" : 1955,  "XML_FTP_PASV_ANSWER" : 2000,  "XML_FTP_EPSV_ANSWER" : 2001,  "XML_FTP_ACCNT" : 2002,  "XML_FTP_URL_SYNTAX" : 2003,  "XML_HTTP_URL_SYNTAX" : 2020,  "XML_HTTP_USE_IP" : 2021,  "XML_HTTP_UNKNOWN_HOST" : 2022,  "XML_SCHEMAP_SRC_SIMPLE_TYPE_1" : 3000,  "XML_SCHEMAP_SRC_SIMPLE_TYPE_2" : 3001,  "XML_SCHEMAP_SRC_SIMPLE_TYPE_3" : 3002,  "XML_SCHEMAP_SRC_SIMPLE_TYPE_4" : 3003,  "XML_SCHEMAP_SRC_RESOLVE" : 3004,  "XML_SCHEMAP_SRC_RESTRICTION_BASE_OR_SIMPLETYPE" : 3005,  "XML_SCHEMAP_SRC_LIST_ITEMTYPE_OR_SIMPLETYPE" : 3006,  "XML_SCHEMAP_SRC_UNION_MEMBERTYPES_OR_SIMPLETYPES" : 3007,  "XML_SCHEMAP_ST_PROPS_CORRECT_1" : 3008,  "XML_SCHEMAP_ST_PROPS_CORRECT_2" : 3009,  "XML_SCHEMAP_ST_PROPS_CORRECT_3" : 3010,  "XML_SCHEMAP_COS_ST_RESTRICTS_1_1" : 3011,  "XML_SCHEMAP_COS_ST_RESTRICTS_1_2" : 3012,  "XML_SCHEMAP_COS_ST_RESTRICTS_1_3_1" : 3013,  "XML_SCHEMAP_COS_ST_RESTRICTS_1_3_2" : 3014,  "XML_SCHEMAP_COS_ST_RESTRICTS_2_1" : 3015,  "XML_SCHEMAP_COS_ST_RESTRICTS_2_3_1_1" : 3016,  "XML_SCHEMAP_COS_ST_RESTRICTS_2_3_1_2" : 3017,  "XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_1" : 3018,  "XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_2" : 3019,  "XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_3" : 3020,  "XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_4" : 3021,  "XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_5" : 3022,  "XML_SCHEMAP_COS_ST_RESTRICTS_3_1" : 3023,  "XML_SCHEMAP_COS_ST_RESTRICTS_3_3_1" : 3024,  "XML_SCHEMAP_COS_ST_RESTRICTS_3_3_1_2" : 3025,  "XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_2" : 3026,  "XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_1" : 3027,  "XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_3" : 3028,  "XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_4" : 3029,  "XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_5" : 3030,  "XML_SCHEMAP_COS_ST_DERIVED_OK_2_1" : 3031,  "XML_SCHEMAP_COS_ST_DERIVED_OK_2_2" : 3032,  "XML_SCHEMAP_S4S_ELEM_NOT_ALLOWED" : 3033,  "XML_SCHEMAP_S4S_ELEM_MISSING" : 3034,  "XML_SCHEMAP_S4S_ATTR_NOT_ALLOWED" : 3035,  "XML_SCHEMAP_S4S_ATTR_MISSING" : 3036,  "XML_SCHEMAP_S4S_ATTR_INVALID_VALUE" : 3037,  "XML_SCHEMAP_SRC_ELEMENT_1" : 3038,  "XML_SCHEMAP_SRC_ELEMENT_2_1" : 3039,  "XML_SCHEMAP_SRC_ELEMENT_2_2" : 3040,  "XML_SCHEMAP_SRC_ELEMENT_3" : 3041,  "XML_SCHEMAP_P_PROPS_CORRECT_1" : 3042,  "XML_SCHEMAP_P_PROPS_CORRECT_2_1" : 3043,  "XML_SCHEMAP_P_PROPS_CORRECT_2_2" : 3044,  "XML_SCHEMAP_E_PROPS_CORRECT_2" : 3045,  "XML_SCHEMAP_E_PROPS_CORRECT_3" : 3046,  "XML_SCHEMAP_E_PROPS_CORRECT_4" : 3047,  "XML_SCHEMAP_E_PROPS_CORRECT_5" : 3048,  "XML_SCHEMAP_E_PROPS_CORRECT_6" : 3049,  "XML_SCHEMAP_SRC_INCLUDE" : 3050,  "XML_SCHEMAP_SRC_ATTRIBUTE_1" : 3051,  "XML_SCHEMAP_SRC_ATTRIBUTE_2" : 3052,  "XML_SCHEMAP_SRC_ATTRIBUTE_3_1" : 3053,  "XML_SCHEMAP_SRC_ATTRIBUTE_3_2" : 3054,  "XML_SCHEMAP_SRC_ATTRIBUTE_4" : 3055,  "XML_SCHEMAP_NO_XMLNS" : 3056,  "XML_SCHEMAP_NO_XSI" : 3057,  "XML_SCHEMAP_COS_VALID_DEFAULT_1" : 3058,  "XML_SCHEMAP_COS_VALID_DEFAULT_2_1" : 3059,  "XML_SCHEMAP_COS_VALID_DEFAULT_2_2_1" : 3060,  "XML_SCHEMAP_COS_VALID_DEFAULT_2_2_2" : 3061,  "XML_SCHEMAP_CVC_SIMPLE_TYPE" : 3062,  "XML_SCHEMAP_COS_CT_EXTENDS_1_1" : 3063,  "XML_SCHEMAP_SRC_IMPORT_1_1" : 3064,  "XML_SCHEMAP_SRC_IMPORT_1_2" : 3065,  "XML_SCHEMAP_SRC_IMPORT_2" : 3066,  "XML_SCHEMAP_SRC_IMPORT_2_1" : 3067,  "XML_SCHEMAP_SRC_IMPORT_2_2" : 3068,  "XML_SCHEMAP_INTERNAL" : 3069,  "XML_SCHEMAP_NOT_DETERMINISTIC" : 3070,  "XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_1" : 3071,  "XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_2" : 3072,  "XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_3" : 3073,  "XML_SCHEMAP_MG_PROPS_CORRECT_1" : 3074,  "XML_SCHEMAP_MG_PROPS_CORRECT_2" : 3075,  "XML_SCHEMAP_SRC_CT_1" : 3076,  "XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_3" : 3077,  "XML_SCHEMAP_AU_PROPS_CORRECT_2" : 3078,  "XML_SCHEMAP_A_PROPS_CORRECT_2" : 3079,  "XML_SCHEMAP_C_PROPS_CORRECT" : 3080,  "XML_SCHEMAP_SRC_REDEFINE" : 3081,  "XML_SCHEMAP_SRC_IMPORT" : 3082,  "XML_SCHEMAP_WARN_SKIP_SCHEMA" : 3083,  "XML_SCHEMAP_WARN_UNLOCATED_SCHEMA" : 3084,  "XML_SCHEMAP_WARN_ATTR_REDECL_PROH" : 3085,  "XML_SCHEMAP_WARN_ATTR_POINTLESS_PROH" : 3086,  "XML_SCHEMAP_AG_PROPS_CORRECT" : 3087,  "XML_SCHEMAP_COS_CT_EXTENDS_1_2" : 3088,  "XML_SCHEMAP_AU_PROPS_CORRECT" : 3089,  "XML_SCHEMAP_A_PROPS_CORRECT_3" : 3090,  "XML_SCHEMAP_COS_ALL_LIMITED" : 3091,  "XML_SCHEMATRONV_ASSERT" : 4000,  "XML_SCHEMATRONV_REPORT" : 4001,  "XML_MODULE_OPEN" : 4900,  "XML_MODULE_CLOSE" : 4901,  "XML_CHECK_FOUND_ELEMENT" : 5000,  "XML_CHECK_FOUND_ATTRIBUTE" : 5001,  "XML_CHECK_FOUND_TEXT" : 5002,  "XML_CHECK_FOUND_CDATA" : 5003,  "XML_CHECK_FOUND_ENTITYREF" : 5004,  "XML_CHECK_FOUND_ENTITY" : 5005,  "XML_CHECK_FOUND_PI" : 5006,  "XML_CHECK_FOUND_COMMENT" : 5007,  "XML_CHECK_FOUND_DOCTYPE" : 5008,  "XML_CHECK_FOUND_FRAGMENT" : 5009,  "XML_CHECK_FOUND_NOTATION" : 5010,  "XML_CHECK_UNKNOWN_NODE" : 5011,  "XML_CHECK_ENTITY_TYPE" : 5012,  "XML_CHECK_NO_PARENT" : 5013,  "XML_CHECK_NO_DOC" : 5014,  "XML_CHECK_NO_NAME" : 5015,  "XML_CHECK_NO_ELEM" : 5016,  "XML_CHECK_WRONG_DOC" : 5017,  "XML_CHECK_NO_PREV" : 5018,  "XML_CHECK_WRONG_PREV" : 5019,  "XML_CHECK_NO_NEXT" : 5020,  "XML_CHECK_WRONG_NEXT" : 5021,  "XML_CHECK_NOT_DTD" : 5022,  "XML_CHECK_NOT_ATTR" : 5023,  "XML_CHECK_NOT_ATTR_DECL" : 5024,  "XML_CHECK_NOT_ELEM_DECL" : 5025,  "XML_CHECK_NOT_ENTITY_DECL" : 5026,  "XML_CHECK_NOT_NS_DECL" : 5027,  "XML_CHECK_NO_HREF" : 5028,  "XML_CHECK_WRONG_PARENT" : 5029,  "XML_CHECK_NS_SCOPE" : 5030,  "XML_CHECK_NS_ANCESTOR" : 5031,  "XML_CHECK_NOT_UTF8" : 5032,  "XML_CHECK_NO_DICT" : 5033,  "XML_CHECK_NOT_NCNAME" : 5034,  "XML_CHECK_OUTSIDE_DICT" : 5035,  "XML_CHECK_WRONG_NAME" : 5036,  "XML_CHECK_NAME_NOT_NULL" : 5037,  "XML_I18N_NO_NAME" : 6000,  "XML_I18N_NO_HANDLER" : 6001,  "XML_I18N_EXCESS_HANDLER" : 6002,  "XML_I18N_CONV_FAILED" : 6003,  "XML_I18N_NO_OUTPUT" : 6004, 
 "XML_INTERNAL_GENERAL_ENTITY" : 1,  "XML_EXTERNAL_GENERAL_PARSED_ENTITY" : 2,  "XML_EXTERNAL_GENERAL_UNPARSED_ENTITY" : 3,  "XML_INTERNAL_PARAMETER_ENTITY" : 4,  "XML_EXTERNAL_PARAMETER_ENTITY" : 5,  "XML_INTERNAL_PREDEFINED_ENTITY" : 6, 
 "XML_PARSER_EOF" : -1,  "XML_PARSER_START" : 0,  "XML_PARSER_MISC" : 1,  "XML_PARSER_PI" : 2,  "XML_PARSER_DTD" : 3,  "XML_PARSER_PROLOG" : 4,  "XML_PARSER_COMMENT" : 5,  "XML_PARSER_START_TAG" : 6,  "XML_PARSER_CONTENT" : 7,  "XML_PARSER_CDATA_SECTION" : 8,  "XML_PARSER_END_TAG" : 9,  "XML_PARSER_ENTITY_DECL" : 10,  "XML_PARSER_ENTITY_VALUE" : 11,  "XML_PARSER_ATTRIBUTE_VALUE" : 12,  "XML_PARSER_SYSTEM_LITERAL" : 13,  "XML_PARSER_EPILOG" : 14,  "XML_PARSER_IGNORE" : 15,  "XML_PARSER_PUBLIC_LITERAL" : 16, 
 "XML_PARSE_UNKNOWN" : 0,  "XML_PARSE_DOM" : 1,  "XML_PARSE_SAX" : 2,  "XML_PARSE_PUSH_DOM" : 3,  "XML_PARSE_PUSH_SAX" : 4,  "XML_PARSE_READER" : 5, 
 "XML_CHAR_ENCODING_ERROR" : -1,  "XML_CHAR_ENCODING_NONE" : 0,  "XML_CHAR_ENCODING_UTF8" : 1,  "XML_CHAR_ENCODING_UTF16LE" : 2,  "XML_CHAR_ENCODING_UTF16BE" : 3,  "XML_CHAR_ENCODING_UCS4LE" : 4,  "XML_CHAR_ENCODING_UCS4BE" : 5,  "XML_CHAR_ENCODING_EBCDIC" : 6,  "XML_CHAR_ENCODING_UCS4_2143" : 7,  "XML_CHAR_ENCODING_UCS4_3412" : 8,  "XML_CHAR_ENCODING_UCS2" : 9,  "XML_CHAR_ENCODING_8859_1" : 10,  "XML_CHAR_ENCODING_8859_2" : 11,  "XML_CHAR_ENCODING_8859_3" : 12,  "XML_CHAR_ENCODING_8859_4" : 13,  "XML_CHAR_ENCODING_8859_5" : 14,  "XML_CHAR_ENCODING_8859_6" : 15,  "XML_CHAR_ENCODING_8859_7" : 16,  "XML_CHAR_ENCODING_8859_8" : 17,  "XML_CHAR_ENCODING_8859_9" : 18,  "XML_CHAR_ENCODING_2022_JP" : 19,  "XML_CHAR_ENCODING_SHIFT_JIS" : 20,  "XML_CHAR_ENCODING_EUC_JP" : 21,  "XML_CHAR_ENCODING_ASCII" : 22, 
 "XLINK_TYPE_NONE" : 0,  "XLINK_TYPE_SIMPLE" : 1,  "XLINK_TYPE_EXTENDED" : 2,  "XLINK_TYPE_EXTENDED_SET" : 3, 
 "XLINK_SHOW_NONE" : 0,  "XLINK_SHOW_NEW" : 1,  "XLINK_SHOW_EMBED" : 2,  "XLINK_SHOW_REPLACE" : 3, 
 "XLINK_ACTUATE_NONE" : 0,  "XLINK_ACTUATE_AUTO" : 1,  "XLINK_ACTUATE_ONREQUEST" : 2, 
 "XML_PARSE_RECOVER" : 1,  "XML_PARSE_NOENT" : 2,  "XML_PARSE_DTDLOAD" : 4,  "XML_PARSE_DTDATTR" : 8,  "XML_PARSE_DTDVALID" : 16,  "XML_PARSE_NOERROR" : 32,  "XML_PARSE_NOWARNING" : 64,  "XML_PARSE_PEDANTIC" : 128,  "XML_PARSE_NOBLANKS" : 256,  "XML_PARSE_SAX1" : 512,  "XML_PARSE_XINCLUDE" : 65536,  "XML_PARSE_NONET" : 131072,  "XML_PARSE_NODICT" : 262144,  "XML_PARSE_NSCLEAN" : 524288,  "XML_PARSE_NOCDATA" : 1048576,  "XML_PARSE_NOXINCNODE" : 2097152,  "XML_PARSE_COMPACT" : 4194304,  "XML_PARSE_OLD10" : 8388608,  "XML_PARSE_NOBASEFIX" : 16777216,  "XML_PARSE_HUGE" : 33554432,  "XML_PARSE_OLDSAX" : 4294967296, 
 "XML_WITH_THREAD" : 1,  "XML_WITH_TREE" : 2,  "XML_WITH_OUTPUT" : 3,  "XML_WITH_PUSH" : 4,  "XML_WITH_READER" : 5,  "XML_WITH_PATTERN" : 6,  "XML_WITH_WRITER" : 7,  "XML_WITH_SAX1" : 8,  "XML_WITH_FTP" : 9,  "XML_WITH_HTTP" : 10,  "XML_WITH_VALID" : 11,  "XML_WITH_HTML" : 12,  "XML_WITH_LEGACY" : 13,  "XML_WITH_C14N" : 14,  "XML_WITH_CATALOG" : 15,  "XML_WITH_XPATH" : 16,  "XML_WITH_XPTR" : 17,  "XML_WITH_XINCLUDE" : 18,  "XML_WITH_ICONV" : 19,  "XML_WITH_ISO8859X" : 20,  "XML_WITH_UNICODE" : 21,  "XML_WITH_REGEXP" : 22,  "XML_WITH_AUTOMATA" : 23,  "XML_WITH_EXPR" : 24,  "XML_WITH_SCHEMAS" : 25,  "XML_WITH_SCHEMATRON" : 26,  "XML_WITH_MODULES" : 27,  "XML_WITH_DEBUG" : 28,  "XML_WITH_DEBUG_MEM" : 29,  "XML_WITH_DEBUG_RUN" : 30,  "XML_WITH_ZLIB" : 31,  "XML_WITH_ICU" : 32,  "XML_WITH_NONE" : 99999, 
 "GST_OBJECT_DISPOSING" : 1,  "GST_OBJECT_FLOATING" : 2,  "GST_OBJECT_FLAG_LAST" : 16, 
 "GST_MINI_OBJECT_FLAG_READONLY" : 1,  "GST_MINI_OBJECT_FLAG_RESERVED1" : 2,  "GST_MINI_OBJECT_FLAG_LAST" : 16, 
 "GST_CLOCK_OK" : 0,  "GST_CLOCK_EARLY" : 1,  "GST_CLOCK_UNSCHEDULED" : 2,  "GST_CLOCK_BUSY" : 3,  "GST_CLOCK_BADTIME" : 4,  "GST_CLOCK_ERROR" : 5,  "GST_CLOCK_UNSUPPORTED" : 6,  "GST_CLOCK_DONE" : 7, 
 "GST_CLOCK_ENTRY_SINGLE" : 0,  "GST_CLOCK_ENTRY_PERIODIC" : 1, 
 "GST_CLOCK_FLAG_CAN_DO_SINGLE_SYNC" : 16,  "GST_CLOCK_FLAG_CAN_DO_SINGLE_ASYNC" : 32,  "GST_CLOCK_FLAG_CAN_DO_PERIODIC_SYNC" : 64,  "GST_CLOCK_FLAG_CAN_DO_PERIODIC_ASYNC" : 128,  "GST_CLOCK_FLAG_CAN_SET_RESOLUTION" : 256,  "GST_CLOCK_FLAG_CAN_SET_MASTER" : 512,  "GST_CLOCK_FLAG_LAST" : 4096, 
 "GST_CAPS_FLAGS_ANY" : 1, 
 "GST_CAPS_INTERSECT_ZIG_ZAG" : 0,  "GST_CAPS_INTERSECT_FIRST" : 1, 
 "GST_BUFFER_FLAG_READONLY" : 1,  "GST_BUFFER_FLAG_MEDIA4" : 2,  "GST_BUFFER_FLAG_PREROLL" : 16,  "GST_BUFFER_FLAG_DISCONT" : 32,  "GST_BUFFER_FLAG_IN_CAPS" : 64,  "GST_BUFFER_FLAG_GAP" : 128,  "GST_BUFFER_FLAG_DELTA_UNIT" : 256,  "GST_BUFFER_FLAG_MEDIA1" : 512,  "GST_BUFFER_FLAG_MEDIA2" : 1024,  "GST_BUFFER_FLAG_MEDIA3" : 2048,  "GST_BUFFER_FLAG_LAST" : 4096, 
 "GST_BUFFER_COPY_FLAGS" : 1,  "GST_BUFFER_COPY_TIMESTAMPS" : 2,  "GST_BUFFER_COPY_CAPS" : 4, 
 "GST_BUFFER_LIST_CONTINUE" : 0,  "GST_BUFFER_LIST_SKIP_GROUP" : 1,  "GST_BUFFER_LIST_END" : 2, 
 "GST_ITERATOR_DONE" : 0,  "GST_ITERATOR_OK" : 1,  "GST_ITERATOR_RESYNC" : 2,  "GST_ITERATOR_ERROR" : 3, 
 "GST_ITERATOR_ITEM_SKIP" : 0,  "GST_ITERATOR_ITEM_PASS" : 1,  "GST_ITERATOR_ITEM_END" : 2, 
 "GST_FORMAT_UNDEFINED" : 0,  "GST_FORMAT_DEFAULT" : 1,  "GST_FORMAT_BYTES" : 2,  "GST_FORMAT_TIME" : 3,  "GST_FORMAT_BUFFERS" : 4,  "GST_FORMAT_PERCENT" : 5, 
 "GST_TAG_MERGE_UNDEFINED" : 0,  "GST_TAG_MERGE_REPLACE_ALL" : 1,  "GST_TAG_MERGE_REPLACE" : 2,  "GST_TAG_MERGE_APPEND" : 3,  "GST_TAG_MERGE_PREPEND" : 4,  "GST_TAG_MERGE_KEEP" : 5,  "GST_TAG_MERGE_KEEP_ALL" : 6,  "GST_TAG_MERGE_COUNT" : 7, 
 "GST_TAG_FLAG_UNDEFINED" : 0,  "GST_TAG_FLAG_META" : 1,  "GST_TAG_FLAG_ENCODED" : 2,  "GST_TAG_FLAG_DECODED" : 3,  "GST_TAG_FLAG_COUNT" : 4, 
 "GST_EVENT_TYPE_UPSTREAM" : 1,  "GST_EVENT_TYPE_DOWNSTREAM" : 2,  "GST_EVENT_TYPE_SERIALIZED" : 4, 
 "GST_EVENT_UNKNOWN" : 0,  "GST_EVENT_FLUSH_START" : 19,  "GST_EVENT_FLUSH_STOP" : 39,  "GST_EVENT_EOS" : 86,  "GST_EVENT_NEWSEGMENT" : 102,  "GST_EVENT_TAG" : 118,  "GST_EVENT_BUFFERSIZE" : 134,  "GST_EVENT_SINK_MESSAGE" : 150,  "GST_EVENT_QOS" : 337,  "GST_EVENT_SEEK" : 353,  "GST_EVENT_NAVIGATION" : 369,  "GST_EVENT_LATENCY" : 385,  "GST_EVENT_STEP" : 401,  "GST_EVENT_CUSTOM_UPSTREAM" : 801,  "GST_EVENT_CUSTOM_DOWNSTREAM" : 806,  "GST_EVENT_CUSTOM_DOWNSTREAM_OOB" : 802,  "GST_EVENT_CUSTOM_BOTH" : 807,  "GST_EVENT_CUSTOM_BOTH_OOB" : 803, 
 "GST_SEEK_TYPE_NONE" : 0,  "GST_SEEK_TYPE_CUR" : 1,  "GST_SEEK_TYPE_SET" : 2,  "GST_SEEK_TYPE_END" : 3, 
 "GST_SEEK_FLAG_NONE" : 0,  "GST_SEEK_FLAG_FLUSH" : 1,  "GST_SEEK_FLAG_ACCURATE" : 2,  "GST_SEEK_FLAG_KEY_UNIT" : 4,  "GST_SEEK_FLAG_SEGMENT" : 8,  "GST_SEEK_FLAG_SKIP" : 16, 
 "GST_QOS_TYPE_OVERFLOW" : 0,  "GST_QOS_TYPE_UNDERFLOW" : 1,  "GST_QOS_TYPE_THROTTLE" : 2, 
 "GST_QUERY_NONE" : 0,  "GST_QUERY_POSITION" : 1,  "GST_QUERY_DURATION" : 2,  "GST_QUERY_LATENCY" : 3,  "GST_QUERY_JITTER" : 4,  "GST_QUERY_RATE" : 5,  "GST_QUERY_SEEKING" : 6,  "GST_QUERY_SEGMENT" : 7,  "GST_QUERY_CONVERT" : 8,  "GST_QUERY_FORMATS" : 9,  "GST_QUERY_BUFFERING" : 10,  "GST_QUERY_CUSTOM" : 11,  "GST_QUERY_URI" : 12, 
 "GST_BUFFERING_STREAM" : 0,  "GST_BUFFERING_DOWNLOAD" : 1,  "GST_BUFFERING_TIMESHIFT" : 2,  "GST_BUFFERING_LIVE" : 3, 
 "GST_TASK_STARTED" : 0,  "GST_TASK_STOPPED" : 1,  "GST_TASK_PAUSED" : 2, 
 "GST_PAD_LINK_OK" : 0,  "GST_PAD_LINK_WRONG_HIERARCHY" : -1,  "GST_PAD_LINK_WAS_LINKED" : -2,  "GST_PAD_LINK_WRONG_DIRECTION" : -3,  "GST_PAD_LINK_NOFORMAT" : -4,  "GST_PAD_LINK_NOSCHED" : -5,  "GST_PAD_LINK_REFUSED" : -6, 
 "GST_FLOW_CUSTOM_SUCCESS_2" : 102,  "GST_FLOW_CUSTOM_SUCCESS_1" : 101,  "GST_FLOW_CUSTOM_SUCCESS" : 100,  "GST_FLOW_RESEND" : 1,  "GST_FLOW_OK" : 0,  "GST_FLOW_NOT_LINKED" : -1,  "GST_FLOW_WRONG_STATE" : -2,  "GST_FLOW_UNEXPECTED" : -3,  "GST_FLOW_NOT_NEGOTIATED" : -4,  "GST_FLOW_ERROR" : -5,  "GST_FLOW_NOT_SUPPORTED" : -6,  "GST_FLOW_CUSTOM_ERROR" : -100,  "GST_FLOW_CUSTOM_ERROR_1" : -101,  "GST_FLOW_CUSTOM_ERROR_2" : -102, 
 "GST_PAD_LINK_CHECK_NOTHING" : 0,  "GST_PAD_LINK_CHECK_HIERARCHY" : 1,  "GST_PAD_LINK_CHECK_TEMPLATE_CAPS" : 2,  "GST_PAD_LINK_CHECK_CAPS" : 4, 
 "GST_ACTIVATE_NONE" : 0,  "GST_ACTIVATE_PUSH" : 1,  "GST_ACTIVATE_PULL" : 2, 
 "GST_PAD_UNKNOWN" : 0,  "GST_PAD_SRC" : 1,  "GST_PAD_SINK" : 2, 
 "GST_PAD_BLOCKED" : 16,  "GST_PAD_FLUSHING" : 32,  "GST_PAD_IN_GETCAPS" : 64,  "GST_PAD_IN_SETCAPS" : 128,  "GST_PAD_BLOCKING" : 256,  "GST_PAD_FLAG_LAST" : 4096, 
 "GST_PAD_ALWAYS" : 0,  "GST_PAD_SOMETIMES" : 1,  "GST_PAD_REQUEST" : 2, 
 "GST_PAD_TEMPLATE_FIXED" : 16,  "GST_PAD_TEMPLATE_FLAG_LAST" : 256, 
 "GST_MESSAGE_UNKNOWN" : 0,  "GST_MESSAGE_EOS" : 1,  "GST_MESSAGE_ERROR" : 2,  "GST_MESSAGE_WARNING" : 4,  "GST_MESSAGE_INFO" : 8,  "GST_MESSAGE_TAG" : 16,  "GST_MESSAGE_BUFFERING" : 32,  "GST_MESSAGE_STATE_CHANGED" : 64,  "GST_MESSAGE_STATE_DIRTY" : 128,  "GST_MESSAGE_STEP_DONE" : 256,  "GST_MESSAGE_CLOCK_PROVIDE" : 512,  "GST_MESSAGE_CLOCK_LOST" : 65536,  "GST_MESSAGE_NEW_CLOCK" : 131072,  "GST_MESSAGE_STRUCTURE_CHANGE" : 262144,  "GST_MESSAGE_STREAM_STATUS" : 524288,  "GST_MESSAGE_APPLICATION" : 1048576,  "GST_MESSAGE_ELEMENT" : 2097152,  "GST_MESSAGE_SEGMENT_START" : 4194304,  "GST_MESSAGE_SEGMENT_DONE" : 8388608,  "GST_MESSAGE_DURATION" : 16777216,  "GST_MESSAGE_LATENCY" : 33554432,  "GST_MESSAGE_ASYNC_START" : 4294967296,  "GST_MESSAGE_ASYNC_DONE" : 8589934592,  "GST_MESSAGE_REQUEST_STATE" : 17179869184,  "GST_MESSAGE_STEP_START" : 34359738368,  "GST_MESSAGE_QOS" : 68719476736,  "GST_MESSAGE_PROGRESS" : 137438953472,  "GST_MESSAGE_ANY" : -1, 
 "GST_STRUCTURE_CHANGE_TYPE_PAD_LINK" : 0,  "GST_STRUCTURE_CHANGE_TYPE_PAD_UNLINK" : 1, 
 "GST_STREAM_STATUS_TYPE_CREATE" : 0,  "GST_STREAM_STATUS_TYPE_ENTER" : 1,  "GST_STREAM_STATUS_TYPE_LEAVE" : 2,  "GST_STREAM_STATUS_TYPE_DESTROY" : 3,  "GST_STREAM_STATUS_TYPE_START" : 8,  "GST_STREAM_STATUS_TYPE_PAUSE" : 9,  "GST_STREAM_STATUS_TYPE_STOP" : 10, 
 "GST_PROGRESS_TYPE_START" : 0,  "GST_PROGRESS_TYPE_CONTINUE" : 1,  "GST_PROGRESS_TYPE_COMPLETE" : 2,  "GST_PROGRESS_TYPE_CANCELED" : 3,  "GST_PROGRESS_TYPE_ERROR" : 4, 
 "GST_BUS_FLUSHING" : 16,  "GST_BUS_FLAG_LAST" : 32, 
 "GST_BUS_DROP" : 0,  "GST_BUS_PASS" : 1,  "GST_BUS_ASYNC" : 2, 
 "G_MODULE_BIND_LAZY" : 1,  "G_MODULE_BIND_LOCAL" : 2,  "G_MODULE_BIND_MASK" : 3, 
 "GST_PLUGIN_ERROR_MODULE" : 0,  "GST_PLUGIN_ERROR_DEPENDENCIES" : 1,  "GST_PLUGIN_ERROR_NAME_MISMATCH" : 2, 
 "GST_PLUGIN_FLAG_CACHED" : 1,  "GST_PLUGIN_FLAG_BLACKLISTED" : 2, 
 "GST_PLUGIN_DEPENDENCY_FLAG_NONE" : 0,  "GST_PLUGIN_DEPENDENCY_FLAG_RECURSE" : 1,  "GST_PLUGIN_DEPENDENCY_FLAG_PATHS_ARE_DEFAULT_ONLY" : 2,  "GST_PLUGIN_DEPENDENCY_FLAG_FILE_NAME_IS_SUFFIX" : 4, 
 "GST_RANK_NONE" : 0,  "GST_RANK_MARGINAL" : 64,  "GST_RANK_SECONDARY" : 128,  "GST_RANK_PRIMARY" : 256, 
 "GST_INDEX_UNKNOWN" : 0,  "GST_INDEX_CERTAIN" : 1,  "GST_INDEX_FUZZY" : 2, 
 "GST_INDEX_ENTRY_ID" : 0,  "GST_INDEX_ENTRY_ASSOCIATION" : 1,  "GST_INDEX_ENTRY_OBJECT" : 2,  "GST_INDEX_ENTRY_FORMAT" : 3, 
 "GST_INDEX_LOOKUP_EXACT" : 0,  "GST_INDEX_LOOKUP_BEFORE" : 1,  "GST_INDEX_LOOKUP_AFTER" : 2, 
 "GST_ASSOCIATION_FLAG_NONE" : 0,  "GST_ASSOCIATION_FLAG_KEY_UNIT" : 1,  "GST_ASSOCIATION_FLAG_DELTA_UNIT" : 2,  "GST_ASSOCIATION_FLAG_LAST" : 256, 
 "GST_INDEX_RESOLVER_CUSTOM" : 0,  "GST_INDEX_RESOLVER_GTYPE" : 1,  "GST_INDEX_RESOLVER_PATH" : 2, 
 "GST_INDEX_WRITABLE" : 16,  "GST_INDEX_READABLE" : 32,  "GST_INDEX_FLAG_LAST" : 4096, 
 "GST_STATE_CHANGE_FAILURE" : 0,  "GST_STATE_CHANGE_SUCCESS" : 1,  "GST_STATE_CHANGE_ASYNC" : 2,  "GST_STATE_CHANGE_NO_PREROLL" : 3, 
 "GST_STATE_CHANGE_NULL_TO_READY" : 10,  "GST_STATE_CHANGE_READY_TO_PAUSED" : 19,  "GST_STATE_CHANGE_PAUSED_TO_PLAYING" : 28,  "GST_STATE_CHANGE_PLAYING_TO_PAUSED" : 35,  "GST_STATE_CHANGE_PAUSED_TO_READY" : 26,  "GST_STATE_CHANGE_READY_TO_NULL" : 17, 
 "GST_ELEMENT_LOCKED_STATE" : 16,  "GST_ELEMENT_IS_SINK" : 32,  "GST_ELEMENT_UNPARENTING" : 64,  "GST_ELEMENT_IS_SOURCE" : 128,  "GST_ELEMENT_FLAG_LAST" : 67108864, 
 "GST_BIN_FLAG_LAST" : 2147483648, 
 "GST_DEBUG_GRAPH_SHOW_MEDIA_TYPE" : 1,  "GST_DEBUG_GRAPH_SHOW_CAPS_DETAILS" : 2,  "GST_DEBUG_GRAPH_SHOW_NON_DEFAULT_PARAMS" : 4,  "GST_DEBUG_GRAPH_SHOW_STATES" : 8,  "GST_DEBUG_GRAPH_SHOW_ALL" : 15, 
 "GST_CORE_ERROR_FAILED" : 1,  "GST_CORE_ERROR_TOO_LAZY" : 2,  "GST_CORE_ERROR_NOT_IMPLEMENTED" : 3,  "GST_CORE_ERROR_STATE_CHANGE" : 4,  "GST_CORE_ERROR_PAD" : 5,  "GST_CORE_ERROR_THREAD" : 6,  "GST_CORE_ERROR_NEGOTIATION" : 7,  "GST_CORE_ERROR_EVENT" : 8,  "GST_CORE_ERROR_SEEK" : 9,  "GST_CORE_ERROR_CAPS" : 10,  "GST_CORE_ERROR_TAG" : 11,  "GST_CORE_ERROR_MISSING_PLUGIN" : 12,  "GST_CORE_ERROR_CLOCK" : 13,  "GST_CORE_ERROR_DISABLED" : 14,  "GST_CORE_ERROR_NUM_ERRORS" : 15, 
 "GST_LIBRARY_ERROR_FAILED" : 1,  "GST_LIBRARY_ERROR_TOO_LAZY" : 2,  "GST_LIBRARY_ERROR_INIT" : 3,  "GST_LIBRARY_ERROR_SHUTDOWN" : 4,  "GST_LIBRARY_ERROR_SETTINGS" : 5,  "GST_LIBRARY_ERROR_ENCODE" : 6,  "GST_LIBRARY_ERROR_NUM_ERRORS" : 7, 
 "GST_RESOURCE_ERROR_FAILED" : 1,  "GST_RESOURCE_ERROR_TOO_LAZY" : 2,  "GST_RESOURCE_ERROR_NOT_FOUND" : 3,  "GST_RESOURCE_ERROR_BUSY" : 4,  "GST_RESOURCE_ERROR_OPEN_READ" : 5,  "GST_RESOURCE_ERROR_OPEN_WRITE" : 6,  "GST_RESOURCE_ERROR_OPEN_READ_WRITE" : 7,  "GST_RESOURCE_ERROR_CLOSE" : 8,  "GST_RESOURCE_ERROR_READ" : 9,  "GST_RESOURCE_ERROR_WRITE" : 10,  "GST_RESOURCE_ERROR_SEEK" : 11,  "GST_RESOURCE_ERROR_SYNC" : 12,  "GST_RESOURCE_ERROR_SETTINGS" : 13,  "GST_RESOURCE_ERROR_NO_SPACE_LEFT" : 14,  "GST_RESOURCE_ERROR_NUM_ERRORS" : 15, 
 "GST_STREAM_ERROR_FAILED" : 1,  "GST_STREAM_ERROR_TOO_LAZY" : 2,  "GST_STREAM_ERROR_NOT_IMPLEMENTED" : 3,  "GST_STREAM_ERROR_TYPE_NOT_FOUND" : 4,  "GST_STREAM_ERROR_WRONG_TYPE" : 5,  "GST_STREAM_ERROR_CODEC_NOT_FOUND" : 6,  "GST_STREAM_ERROR_DECODE" : 7,  "GST_STREAM_ERROR_ENCODE" : 8,  "GST_STREAM_ERROR_DEMUX" : 9,  "GST_STREAM_ERROR_MUX" : 10,  "GST_STREAM_ERROR_FORMAT" : 11,  "GST_STREAM_ERROR_DECRYPT" : 12,  "GST_STREAM_ERROR_DECRYPT_NOKEY" : 13,  "GST_STREAM_ERROR_NUM_ERRORS" : 14, 
 "GST_LEVEL_NONE" : 0,  "GST_LEVEL_ERROR" : 1,  "GST_LEVEL_WARNING" : 2,  "GST_LEVEL_INFO" : 3,  "GST_LEVEL_DEBUG" : 4,  "GST_LEVEL_LOG" : 5,  "GST_LEVEL_FIXME" : 6,  "GST_LEVEL_TRACE" : 7,  "GST_LEVEL_MEMDUMP" : 9,  "GST_LEVEL_COUNT" : 10, 
 "GST_DEBUG_FG_BLACK" : 0,  "GST_DEBUG_FG_RED" : 1,  "GST_DEBUG_FG_GREEN" : 2,  "GST_DEBUG_FG_YELLOW" : 3,  "GST_DEBUG_FG_BLUE" : 4,  "GST_DEBUG_FG_MAGENTA" : 5,  "GST_DEBUG_FG_CYAN" : 6,  "GST_DEBUG_FG_WHITE" : 7,  "GST_DEBUG_BG_BLACK" : 0,  "GST_DEBUG_BG_RED" : 16,  "GST_DEBUG_BG_GREEN" : 32,  "GST_DEBUG_BG_YELLOW" : 48,  "GST_DEBUG_BG_BLUE" : 64,  "GST_DEBUG_BG_MAGENTA" : 80,  "GST_DEBUG_BG_CYAN" : 96,  "GST_DEBUG_BG_WHITE" : 112,  "GST_DEBUG_BOLD" : 256,  "GST_DEBUG_UNDERLINE" : 512, 
 "GST_PIPELINE_FLAG_FIXED_CLOCK" : 2147483648,  "GST_PIPELINE_FLAG_LAST" : 34359738368, 
 "GST_CLOCK_TYPE_REALTIME" : 0,  "GST_CLOCK_TYPE_MONOTONIC" : 1, 
 "GST_ALLOC_TRACE_LIVE" : 1,  "GST_ALLOC_TRACE_MEM_LIVE" : 2, 
 "GST_TYPE_FIND_MINIMUM" : 1,  "GST_TYPE_FIND_POSSIBLE" : 50,  "GST_TYPE_FIND_LIKELY" : 80,  "GST_TYPE_FIND_NEARLY_CERTAIN" : 99,  "GST_TYPE_FIND_MAXIMUM" : 100, 
 "GST_URI_UNKNOWN" : 0,  "GST_URI_SINK" : 1,  "GST_URI_SRC" : 2, 
 "GST_PARSE_ERROR_SYNTAX" : 0,  "GST_PARSE_ERROR_NO_SUCH_ELEMENT" : 1,  "GST_PARSE_ERROR_NO_SUCH_PROPERTY" : 2,  "GST_PARSE_ERROR_LINK" : 3,  "GST_PARSE_ERROR_COULD_NOT_SET_PROPERTY" : 4,  "GST_PARSE_ERROR_EMPTY_BIN" : 5,  "GST_PARSE_ERROR_EMPTY" : 6, 
 "GST_PARSE_FLAG_NONE" : 0,  "GST_PARSE_FLAG_FATAL_ERRORS" : 1, 
 "GST_SEARCH_MODE_EXACT" : 0,  "GST_SEARCH_MODE_BEFORE" : 1,  "GST_SEARCH_MODE_AFTER" : 2, 

}
class _GStaticMutex(_rpythonic_struct_): pass
class _GMutex(_rpythonic_struct_): pass
class static_mutex(ctypes.Union): pass
class _GSystemThread(ctypes.Union): pass
class __fsid_t(_rpythonic_struct_): _array_wrapper_ = True
class timespec(_rpythonic_struct_): pass
class tm(_rpythonic_struct_): pass
class itimerspec(_rpythonic_struct_): pass
class __locale_struct(_rpythonic_struct_): _array_wrapper_ = True
class __locale_data(_rpythonic_struct_): pass
class _GFloatIEEE754(ctypes.Union): pass
class _GDoubleIEEE754(ctypes.Union): pass
class mpn(_rpythonic_struct_): pass
class _GTimeVal(_rpythonic_struct_): pass
class _GArray(_rpythonic_struct_): pass
class _GByteArray(_rpythonic_struct_): pass
class _GPtrArray(_rpythonic_struct_): pass
class _GError(_rpythonic_struct_): pass
class _GDebugKey(_rpythonic_struct_): pass
class _GTrashStack(_rpythonic_struct_): pass
class _GThread(_rpythonic_struct_): pass
class _GCond(_rpythonic_struct_): pass
class _GPrivate(_rpythonic_struct_): pass
class _GThreadFunctions(_rpythonic_struct_): pass
class _GStaticPrivate(_rpythonic_struct_): pass
class _GStaticRecMutex(_rpythonic_struct_): pass
class _GStaticRWLock(_rpythonic_struct_): pass
class _GOnce(_rpythonic_struct_): pass
class _GAsyncQueue(_rpythonic_struct_): pass
class __sigset_t(_rpythonic_struct_): _array_wrapper_ = True
class sigval(ctypes.Union): pass
class siginfo(_rpythonic_struct_): pass
class _sifields(ctypes.Union): pass
class _kill(_rpythonic_struct_): pass
class _timer(_rpythonic_struct_): pass
class _rt(_rpythonic_struct_): pass
class _sigchld(_rpythonic_struct_): pass
class _sigfault(_rpythonic_struct_): pass
class _sigpoll(_rpythonic_struct_): pass
class sigevent(_rpythonic_struct_): pass
class _sigev_un(ctypes.Union): pass
class _sigev_thread(_rpythonic_struct_): pass
class sigaction(_rpythonic_struct_): pass
class __sigaction_handler(ctypes.Union): pass
class sigvec(_rpythonic_struct_): pass
class _fpreg(_rpythonic_struct_): _array_wrapper_ = True
class _fpxreg(_rpythonic_struct_): _array_wrapper_ = True
class _xmmreg(_rpythonic_struct_): _array_wrapper_ = True
class _fpstate(_rpythonic_struct_): _array_wrapper_ = True
class sigcontext(_rpythonic_struct_): _array_wrapper_ = True
class sigstack(_rpythonic_struct_): pass
class sigaltstack(_rpythonic_struct_): pass
class _libc_fpxreg(_rpythonic_struct_): _array_wrapper_ = True
class _libc_xmmreg(_rpythonic_struct_): _array_wrapper_ = True
class _libc_fpstate(_rpythonic_struct_): _array_wrapper_ = True
class mcontext_t(_rpythonic_struct_): _array_wrapper_ = True
class ucontext(_rpythonic_struct_): pass
class pthread_attr_t(ctypes.Union): pass
class __pthread_internal_list(_rpythonic_struct_): pass
class pthread_mutex_t(ctypes.Union): pass
class __pthread_mutex_s(_rpythonic_struct_): pass
class pthread_mutexattr_t(ctypes.Union): pass
class pthread_cond_t(ctypes.Union): pass
class pthread_condattr_t(ctypes.Union): pass
class pthread_rwlock_t(ctypes.Union): pass
class __data(_rpythonic_struct_): pass
class pthread_rwlockattr_t(ctypes.Union): pass
class pthread_barrier_t(ctypes.Union): pass
class pthread_barrierattr_t(ctypes.Union): pass
class _GBookmarkFile(_rpythonic_struct_): pass
class _GMemVTable(_rpythonic_struct_): pass
class _GAllocator(_rpythonic_struct_): pass
class _GMemChunk(_rpythonic_struct_): pass
class _GList(_rpythonic_struct_): pass
class _GCache(_rpythonic_struct_): pass
class _GChecksum(_rpythonic_struct_): pass
class _GCompletion(_rpythonic_struct_): pass
class _GIConv(_rpythonic_struct_): pass
class _GData(_rpythonic_struct_): pass
class _GDate(_rpythonic_struct_): pass
class _GTimeZone(_rpythonic_struct_): pass
class _GDateTime(_rpythonic_struct_): pass
class _GDir(_rpythonic_struct_): pass
class _GHashTable(_rpythonic_struct_): pass
class _GHashTableIter(_rpythonic_struct_): pass
class _GHmac(_rpythonic_struct_): pass
class _GHookList(_rpythonic_struct_): _array_wrapper_ = True
class _GHook(_rpythonic_struct_): pass
class _GPollFD(_rpythonic_struct_): pass
class _GSList(_rpythonic_struct_): pass
class _GMainContext(_rpythonic_struct_): pass
class _GMainLoop(_rpythonic_struct_): pass
class _GSourcePrivate(_rpythonic_struct_): pass
class _GSource(_rpythonic_struct_): pass
class _GSourceCallbackFuncs(_rpythonic_struct_): pass
class _GSourceFuncs(_rpythonic_struct_): pass
class _GStringChunk(_rpythonic_struct_): pass
class _GString(_rpythonic_struct_): pass
class _GIOChannel(_rpythonic_struct_): _array_wrapper_ = True
class _GIOFuncs(_rpythonic_struct_): pass
class _GKeyFile(_rpythonic_struct_): pass
class _GMappedFile(_rpythonic_struct_): pass
class _GMarkupParseContext(_rpythonic_struct_): pass
class _GMarkupParser(_rpythonic_struct_): pass
class _GNode(_rpythonic_struct_): pass
class _GOptionContext(_rpythonic_struct_): pass
class _GOptionGroup(_rpythonic_struct_): pass
class _GOptionEntry(_rpythonic_struct_): pass
class _GPatternSpec(_rpythonic_struct_): pass
class _GQueue(_rpythonic_struct_): pass
class _GRand(_rpythonic_struct_): pass
class _GRelation(_rpythonic_struct_): pass
class _GTuples(_rpythonic_struct_): pass
class _GRegex(_rpythonic_struct_): pass
class _GMatchInfo(_rpythonic_struct_): pass
class _GTokenValue(ctypes.Union): pass
class _GScannerConfig(_rpythonic_struct_): pass
class _GScanner(_rpythonic_struct_): pass
class _GSequence(_rpythonic_struct_): pass
class _GSequenceNode(_rpythonic_struct_): pass
class GTestCase(_rpythonic_struct_): pass
class GTestSuite(_rpythonic_struct_): pass
class GTestConfig(_rpythonic_struct_): pass
class GTestLogMsg(_rpythonic_struct_): pass
class GTestLogBuffer(_rpythonic_struct_): pass
class _GThreadPool(_rpythonic_struct_): pass
class _GTimer(_rpythonic_struct_): pass
class _GTree(_rpythonic_struct_): pass
class _GVariantType(_rpythonic_struct_): pass
class _GVariant(_rpythonic_struct_): pass
class _GVariantIter(_rpythonic_struct_): _array_wrapper_ = True
class _GVariantBuilder(_rpythonic_struct_): _array_wrapper_ = True
class _GTypeCValue(ctypes.Union): pass
class _GTypePlugin(_rpythonic_struct_): pass
class _GTypeClass(_rpythonic_struct_): pass
class _GTypeInstance(_rpythonic_struct_): pass
class _GTypeInterface(_rpythonic_struct_): pass
class _GTypeQuery(_rpythonic_struct_): pass
class _GTypeInfo(_rpythonic_struct_): pass
class _GTypeFundamentalInfo(_rpythonic_struct_): pass
class _GInterfaceInfo(_rpythonic_struct_): pass
class _GTypeValueTable(_rpythonic_struct_): pass
class _GValue(_rpythonic_struct_): _array_wrapper_ = True
class _GParamSpecPool(_rpythonic_struct_): pass
class _GParamSpec(_rpythonic_struct_): pass
class _GParamSpecClass(_rpythonic_struct_): _array_wrapper_ = True
class _GParameter(_rpythonic_struct_): pass
class _GParamSpecTypeInfo(_rpythonic_struct_): pass
class _GClosureNotifyData(_rpythonic_struct_): pass
class _GClosure(_rpythonic_struct_): pass
class _GCClosure(_rpythonic_struct_): pass
class _GSignalInvocationHint(_rpythonic_struct_): pass
class _GSignalQuery(_rpythonic_struct_): pass
class _GObject(_rpythonic_struct_): pass
class _GObjectClass(_rpythonic_struct_): _array_wrapper_ = True
class _GObjectConstructParam(_rpythonic_struct_): pass
class _GBinding(_rpythonic_struct_): pass
class _GEnumClass(_rpythonic_struct_): pass
class _GFlagsClass(_rpythonic_struct_): pass
class _GEnumValue(_rpythonic_struct_): pass
class _GFlagsValue(_rpythonic_struct_): pass
class _GParamSpecChar(_rpythonic_struct_): pass
class _GParamSpecUChar(_rpythonic_struct_): pass
class _GParamSpecBoolean(_rpythonic_struct_): pass
class _GParamSpecInt(_rpythonic_struct_): pass
class _GParamSpecUInt(_rpythonic_struct_): pass
class _GParamSpecLong(_rpythonic_struct_): pass
class _GParamSpecULong(_rpythonic_struct_): pass
class _GParamSpecInt64(_rpythonic_struct_): pass
class _GParamSpecUInt64(_rpythonic_struct_): pass
class _GParamSpecUnichar(_rpythonic_struct_): pass
class _GParamSpecEnum(_rpythonic_struct_): pass
class _GParamSpecFlags(_rpythonic_struct_): pass
class _GParamSpecFloat(_rpythonic_struct_): pass
class _GParamSpecDouble(_rpythonic_struct_): pass
class _GParamSpecString(_rpythonic_struct_): pass
class _GParamSpecParam(_rpythonic_struct_): pass
class _GParamSpecBoxed(_rpythonic_struct_): pass
class _GParamSpecPointer(_rpythonic_struct_): pass
class _GParamSpecValueArray(_rpythonic_struct_): pass
class _GParamSpecObject(_rpythonic_struct_): pass
class _GParamSpecOverride(_rpythonic_struct_): pass
class _GParamSpecGType(_rpythonic_struct_): pass
class _GParamSpecVariant(_rpythonic_struct_): _array_wrapper_ = True
class _GTypeModule(_rpythonic_struct_): pass
class _GTypeModuleClass(_rpythonic_struct_): pass
class _GTypePluginClass(_rpythonic_struct_): pass
class _GValueArray(_rpythonic_struct_): pass
class __mbstate_t(_rpythonic_struct_): pass
class __value(ctypes.Union): pass
class _G_fpos_t(_rpythonic_struct_): pass
class _G_fpos64_t(_rpythonic_struct_): pass
class _IO_jump_t(_rpythonic_struct_): pass
class _IO_marker(_rpythonic_struct_): pass
class _IO_FILE(_rpythonic_struct_): _array_wrapper_ = True
class _IO_FILE_plus(_rpythonic_struct_): pass
class _xmlBuffer(_rpythonic_struct_): pass
class _xmlNotation(_rpythonic_struct_): pass
class _xmlEnumeration(_rpythonic_struct_): pass
class _xmlAttribute(_rpythonic_struct_): pass
class _xmlElementContent(_rpythonic_struct_): pass
class _xmlRegexp(_rpythonic_struct_): pass
class _xmlRegExecCtxt(_rpythonic_struct_): pass
class _xmlDict(_rpythonic_struct_): pass
class _xmlExpCtxt(_rpythonic_struct_): pass
class _xmlExpNode(_rpythonic_struct_): pass
class _xmlElement(_rpythonic_struct_): pass
class _xmlNs(_rpythonic_struct_): pass
class _xmlDtd(_rpythonic_struct_): pass
class _xmlAttr(_rpythonic_struct_): pass
class _xmlID(_rpythonic_struct_): pass
class _xmlRef(_rpythonic_struct_): pass
class _xmlNode(_rpythonic_struct_): pass
class _xmlDoc(_rpythonic_struct_): pass
class _xmlDOMWrapCtxt(_rpythonic_struct_): pass
class _xmlHashTable(_rpythonic_struct_): pass
class _xmlError(_rpythonic_struct_): pass
class _xmlLink(_rpythonic_struct_): pass
class _xmlList(_rpythonic_struct_): pass
class _xmlAutomata(_rpythonic_struct_): pass
class _xmlAutomataState(_rpythonic_struct_): pass
class _xmlValidState(_rpythonic_struct_): pass
class _xmlValidCtxt(_rpythonic_struct_): pass
class _xmlEntity(_rpythonic_struct_): pass
class _xmlParserInput(_rpythonic_struct_): pass
class _xmlParserNodeInfo(_rpythonic_struct_): pass
class _xmlParserNodeInfoSeq(_rpythonic_struct_): pass
class _xmlParserCtxt(_rpythonic_struct_): pass
class _xmlSAXLocator(_rpythonic_struct_): pass
class _xmlSAXHandler(_rpythonic_struct_): pass
class _xmlSAXHandlerV1(_rpythonic_struct_): pass
class _xmlCharEncodingHandler(_rpythonic_struct_): pass
class wait(ctypes.Union): pass
class __wait_terminated(_rpythonic_struct_): pass
class __wait_stopped(_rpythonic_struct_): pass
class __WAIT_STATUS(ctypes.Union): pass
class div_t(_rpythonic_struct_): pass
class ldiv_t(_rpythonic_struct_): pass
class lldiv_t(_rpythonic_struct_): pass
class timeval(_rpythonic_struct_): pass
class fd_set(_rpythonic_struct_): _array_wrapper_ = True
class random_data(_rpythonic_struct_): pass
class drand48_data(_rpythonic_struct_): _array_wrapper_ = True
class _xlinkHandler(_rpythonic_struct_): pass
class _xmlGlobalState(_rpythonic_struct_): pass
class _xmlMutex(_rpythonic_struct_): pass
class _xmlRMutex(_rpythonic_struct_): pass
class _xmlParserInputBuffer(_rpythonic_struct_): pass
class _xmlOutputBuffer(_rpythonic_struct_): pass
class _GstObject(_rpythonic_struct_): pass
class _GstObjectClass(_rpythonic_struct_): _array_wrapper_ = True
class _GstMiniObject(_rpythonic_struct_): pass
class _GstMiniObjectClass(_rpythonic_struct_): pass
class _GstParamSpecMiniObject(_rpythonic_struct_): pass
class _GstClockPrivate(_rpythonic_struct_): pass
class _GstClockEntry(_rpythonic_struct_): pass
class _GstClock(_rpythonic_struct_): pass
class ABI(ctypes.Union): pass
class _GstClockClass(_rpythonic_struct_): _array_wrapper_ = True
class _GstDateTime(_rpythonic_struct_): pass
class _GstStructure(_rpythonic_struct_): pass
class _GstCaps(_rpythonic_struct_): _array_wrapper_ = True
class _GstStaticCaps(_rpythonic_struct_): _array_wrapper_ = True
class _GstBuffer(_rpythonic_struct_): _array_wrapper_ = True
class _GstBufferClass(_rpythonic_struct_): pass
class _GstBufferList(_rpythonic_struct_): pass
class _GstBufferListClass(_rpythonic_struct_): pass
class _GstBufferListIterator(_rpythonic_struct_): pass
class _GstIterator(_rpythonic_struct_): _array_wrapper_ = True
class _GstFormatDefinition(_rpythonic_struct_): pass
class _GstEvent(_rpythonic_struct_): pass
class _GstEventClass(_rpythonic_struct_): _array_wrapper_ = True
class _GstQueryTypeDefinition(_rpythonic_struct_): pass
class _GstQuery(_rpythonic_struct_): pass
class _GstQueryClass(_rpythonic_struct_): _array_wrapper_ = True
class _GstTaskPool(_rpythonic_struct_): _array_wrapper_ = True
class _GstTaskPoolClass(_rpythonic_struct_): _array_wrapper_ = True
class _GstTaskPrivate(_rpythonic_struct_): pass
class GstTaskThreadCallbacks(_rpythonic_struct_): _array_wrapper_ = True
class _GstTask(_rpythonic_struct_): pass
class _GstTaskClass(_rpythonic_struct_): _array_wrapper_ = True
class _GstPadPrivate(_rpythonic_struct_): pass
class _GstPad(_rpythonic_struct_): pass
class abidata(ctypes.Union): pass
class ABI(_rpythonic_struct_): pass
class _GstPadClass(_rpythonic_struct_): _array_wrapper_ = True
class _GstPadTemplate(_rpythonic_struct_): _array_wrapper_ = True
class _GstPadTemplateClass(_rpythonic_struct_): _array_wrapper_ = True
class _GstStaticPadTemplate(_rpythonic_struct_): pass
class _GstBusPrivate(_rpythonic_struct_): pass
class _GstMessage(_rpythonic_struct_): pass
class _GstMessageClass(_rpythonic_struct_): _array_wrapper_ = True
class _GstBus(_rpythonic_struct_): _array_wrapper_ = True
class _GstBusClass(_rpythonic_struct_): _array_wrapper_ = True
class stat(_rpythonic_struct_): _array_wrapper_ = True
class _GModule(_rpythonic_struct_): pass
class _GstPluginPrivate(_rpythonic_struct_): pass
class _GstPluginDesc(_rpythonic_struct_): _array_wrapper_ = True
class _GstPlugin(_rpythonic_struct_): _array_wrapper_ = True
class _GstPluginClass(_rpythonic_struct_): _array_wrapper_ = True
class _GstPluginFeature(_rpythonic_struct_): _array_wrapper_ = True
class _GstPluginFeatureClass(_rpythonic_struct_): _array_wrapper_ = True
class GstTypeNameData(_rpythonic_struct_): pass
class _GstElementDetails(_rpythonic_struct_): _array_wrapper_ = True
class _GstElementFactory(_rpythonic_struct_): _array_wrapper_ = True
class _GstElementFactoryClass(_rpythonic_struct_): _array_wrapper_ = True
class _GstIndexAssociation(_rpythonic_struct_): pass
class _GstIndexEntry(_rpythonic_struct_): pass
class data(ctypes.Union): pass
class C_id(_rpythonic_struct_): pass
class assoc(_rpythonic_struct_): pass
class C_object(_rpythonic_struct_): pass
class format(_rpythonic_struct_): pass
class _GstIndexGroup(_rpythonic_struct_): pass
class _GstIndex(_rpythonic_struct_): _array_wrapper_ = True
class _GstIndexClass(_rpythonic_struct_): _array_wrapper_ = True
class _GstIndexFactory(_rpythonic_struct_): _array_wrapper_ = True
class _GstIndexFactoryClass(_rpythonic_struct_): _array_wrapper_ = True
class _GstElement(_rpythonic_struct_): pass
class _GstElementClass(_rpythonic_struct_): _array_wrapper_ = True
class _GstBinPrivate(_rpythonic_struct_): pass
class _GstBin(_rpythonic_struct_): _array_wrapper_ = True
class _GstBinClass(_rpythonic_struct_): _array_wrapper_ = True
class _GstChildProxy(_rpythonic_struct_): pass
class _GstChildProxyInterface(_rpythonic_struct_): _array_wrapper_ = True
class _GstProxyPadPrivate(_rpythonic_struct_): pass
class _GstProxyPad(_rpythonic_struct_): pass
class _GstProxyPadClass(_rpythonic_struct_): _array_wrapper_ = True
class _GstGhostPadPrivate(_rpythonic_struct_): pass
class _GstGhostPad(_rpythonic_struct_): pass
class _GstGhostPadClass(_rpythonic_struct_): _array_wrapper_ = True
class _GstDebugCategory(_rpythonic_struct_): pass
class _GstDebugMessage(_rpythonic_struct_): pass
class _GstImplementsInterface(_rpythonic_struct_): pass
class _GstImplementsInterfaceClass(_rpythonic_struct_): _array_wrapper_ = True
class _GstValueTable(_rpythonic_struct_): _array_wrapper_ = True
class _GstParamSpecFraction(_rpythonic_struct_): pass
class _GstPipelinePrivate(_rpythonic_struct_): pass
class _GstPipeline(_rpythonic_struct_): _array_wrapper_ = True
class _GstPipelineClass(_rpythonic_struct_): _array_wrapper_ = True
class _GstPoll(_rpythonic_struct_): pass
class GstPollFD(_rpythonic_struct_): pass
class _GstPreset(_rpythonic_struct_): pass
class _GstPresetInterface(_rpythonic_struct_): _array_wrapper_ = True
class _GstRegistryPrivate(_rpythonic_struct_): pass
class _GstRegistry(_rpythonic_struct_): _array_wrapper_ = True
class _GstRegistryClass(_rpythonic_struct_): _array_wrapper_ = True
class _GstSegment(_rpythonic_struct_): _array_wrapper_ = True
class _GstSystemClockPrivate(_rpythonic_struct_): pass
class _GstSystemClock(_rpythonic_struct_): _array_wrapper_ = True
class _GstSystemClockClass(_rpythonic_struct_): _array_wrapper_ = True
class _GstTagSetter(_rpythonic_struct_): pass
class _GstTagSetterIFace(_rpythonic_struct_): pass
class _GstAllocTrace(_rpythonic_struct_): pass
class _GstTrace(_rpythonic_struct_): pass
class _GstTraceEntry(_rpythonic_struct_): _array_wrapper_ = True
class _GstTypeFind(_rpythonic_struct_): _array_wrapper_ = True
class _GstTypeFindFactory(_rpythonic_struct_): _array_wrapper_ = True
class _GstTypeFindFactoryClass(_rpythonic_struct_): _array_wrapper_ = True
class _GstURIHandler(_rpythonic_struct_): pass
class _GstURIHandlerInterface(_rpythonic_struct_): _array_wrapper_ = True
class _GstParseContext(_rpythonic_struct_): pass
class _GstXML(_rpythonic_struct_): _array_wrapper_ = True
class _GstXMLClass(_rpythonic_struct_): _array_wrapper_ = True
## union and structures ##
__freeze_rpythonic_struct( _GMutex, [
])

__freeze_rpythonic_struct( static_mutex, [
	( "pad", ( ctypes.c_char * 40 ) ),
	( "dummy_double", ctypes.c_double ),
	( "dummy_pointer", ctypes.POINTER(ctypes.c_void_p) ),
	( "dummy_long", ctypes.c_long ),
])

__freeze_rpythonic_struct( _GStaticMutex, [
	( "runtime_mutex", ctypes.POINTER(_GMutex) ),
	( "static_mutex", static_mutex ),
])

__freeze_rpythonic_struct( _GSystemThread, [
	( "data", ( ctypes.c_char * 8 ) ),
	( "dummy_double", ctypes.c_double ),
	( "dummy_pointer", ctypes.POINTER(ctypes.c_void_p) ),
	( "dummy_long", ctypes.c_long ),
])

__freeze_rpythonic_struct( __fsid_t, [
	( "__val", ( ctypes.c_int * 2 ) ),
])

__freeze_rpythonic_struct( timespec, [
	( "tv_sec", ctypes.c_int64 ),
	( "tv_nsec", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( tm, [
	( "tm_sec", ctypes.c_int ),
	( "tm_min", ctypes.c_int ),
	( "tm_hour", ctypes.c_int ),
	( "tm_mday", ctypes.c_int ),
	( "tm_mon", ctypes.c_int ),
	( "tm_year", ctypes.c_int ),
	( "tm_wday", ctypes.c_int ),
	( "tm_yday", ctypes.c_int ),
	( "tm_isdst", ctypes.c_int ),
	( "tm_gmtoff", ctypes.c_int64 ),
	( "tm_zone", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( itimerspec, [
	( "it_interval", timespec ),
	( "it_value", timespec ),
])

__freeze_rpythonic_struct( __locale_data, [
])

__freeze_rpythonic_struct( __locale_struct, [
	( "__locales", ctypes.POINTER(( __locale_data * 13 )) ),
	( "__ctype_b", ctypes.POINTER(ctypes.c_uint16) ),
	( "__ctype_tolower", ctypes.POINTER(ctypes.c_int) ),
	( "__ctype_toupper", ctypes.POINTER(ctypes.c_int) ),
	( "__names", ctypes.POINTER(( ctypes.c_char * 13 )) ),
])

__freeze_rpythonic_struct( mpn, [
	( "mantissa_low", ctypes.c_uint ),
	( "mantissa_high", ctypes.c_uint ),
	( "biased_exponent", ctypes.c_uint ),
	( "sign", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GFloatIEEE754, [
	( "v_float", ctypes.c_float ),
	( "mpn", mpn ),
])

__freeze_rpythonic_struct( _GDoubleIEEE754, [
	( "v_double", ctypes.c_double ),
	( "mpn", mpn ),
])

__freeze_rpythonic_struct( _GTimeVal, [
	( "tv_sec", ctypes.c_long ),
	( "tv_usec", ctypes.c_long ),
])

__freeze_rpythonic_struct( _GArray, [
	( "data", ctypes.POINTER(ctypes.c_char) ),
	( "C_len", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GByteArray, [
	( "data", ctypes.POINTER(ctypes.c_ubyte) ),
	( "C_len", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GPtrArray, [
	( "pdata", ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)) ),
	( "C_len", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GError, [
	( "domain", ctypes.c_uint ),
	( "code", ctypes.c_int ),
	( "message", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( _GDebugKey, [
	( "key", ctypes.POINTER(ctypes.c_char) ),
	( "value", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GTrashStack, [
	( "next", ctypes.POINTER(_GTrashStack) ),
])

__freeze_rpythonic_struct( _GThread, [
	( "func", ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), ) ),
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
	( "joinable", ctypes.c_int ),
	( "priority", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GCond, [
])

__freeze_rpythonic_struct( _GPrivate, [
])

__freeze_rpythonic_struct( _GThreadFunctions, [
	( "mutex_new", ctypes.POINTER(ctypes.c_void_p) ),
	( "mutex_lock", ctypes.c_void_p ),
	( "mutex_trylock", ctypes.c_void_p ),
	( "mutex_unlock", ctypes.c_void_p ),
	( "mutex_free", ctypes.c_void_p ),
	( "cond_new", ctypes.POINTER(ctypes.c_void_p) ),
	( "cond_signal", ctypes.c_void_p ),
	( "cond_broadcast", ctypes.c_void_p ),
	( "cond_wait", ctypes.c_void_p ),
	( "cond_timed_wait", ctypes.c_void_p ),
	( "cond_free", ctypes.c_void_p ),
	( "private_new", ctypes.POINTER(ctypes.c_void_p) ),
	( "private_get", ctypes.POINTER(ctypes.c_void_p) ),
	( "private_set", ctypes.c_void_p ),
	( "thread_create", ctypes.c_void_p ),
	( "thread_yield", ctypes.c_void_p ),
	( "thread_join", ctypes.c_void_p ),
	( "thread_exit", ctypes.c_void_p ),
	( "thread_set_priority", ctypes.c_void_p ),
	( "thread_self", ctypes.c_void_p ),
	( "thread_equal", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GStaticPrivate, [
	( "index", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GStaticRecMutex, [
	( "mutex", _GStaticMutex ),
	( "depth", ctypes.c_uint ),
	( "owner", _GSystemThread ),
])

__freeze_rpythonic_struct( _GStaticRWLock, [
	( "mutex", _GStaticMutex ),
	( "read_cond", ctypes.POINTER(_GCond) ),
	( "write_cond", ctypes.POINTER(_GCond) ),
	( "read_counter", ctypes.c_uint ),
	( "have_writer", ctypes.c_int ),
	( "want_to_read", ctypes.c_uint ),
	( "want_to_write", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GOnce, [
	( "status", ctypes.c_int ),
	( "retval", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GAsyncQueue, [
])

__freeze_rpythonic_struct( __sigset_t, [
	( "__val", ctypes.c_uint64 ),
])

__freeze_rpythonic_struct( sigval, [
	( "sival_int", ctypes.c_int ),
	( "sival_ptr", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _kill, [
	( "si_pid", ctypes.c_int ),
	( "si_uid", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _timer, [
	( "si_tid", ctypes.c_int ),
	( "si_overrun", ctypes.c_int ),
	( "si_sigval", sigval ),
])

__freeze_rpythonic_struct( _rt, [
	( "si_pid", ctypes.c_int ),
	( "si_uid", ctypes.c_uint ),
	( "si_sigval", sigval ),
])

__freeze_rpythonic_struct( _sigchld, [
	( "si_pid", ctypes.c_int ),
	( "si_uid", ctypes.c_uint ),
	( "si_status", ctypes.c_int ),
	( "si_utime", ctypes.c_int64 ),
	( "si_stime", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( _sigfault, [
	( "si_addr", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _sigpoll, [
	( "si_band", ctypes.c_int64 ),
	( "si_fd", ctypes.c_int ),
])

__freeze_rpythonic_struct( _sifields, [
	( "_pad", ctypes.c_int ),
	( "_kill", _kill ),
	( "_timer", _timer ),
	( "_rt", _rt ),
	( "_sigchld", _sigchld ),
	( "_sigfault", _sigfault ),
	( "_sigpoll", _sigpoll ),
])

__freeze_rpythonic_struct( siginfo, [
	( "si_signo", ctypes.c_int ),
	( "si_errno", ctypes.c_int ),
	( "si_code", ctypes.c_int ),
	( "_sifields", _sifields ),
])

__freeze_rpythonic_struct( _sigev_thread, [
	( "_function", ctypes.c_void_p ),
	( "_attribute", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _sigev_un, [
	( "_pad", ctypes.c_int ),
	( "_tid", ctypes.c_int ),
	( "_sigev_thread", _sigev_thread ),
])

__freeze_rpythonic_struct( sigevent, [
	( "sigev_value", sigval ),
	( "sigev_signo", ctypes.c_int ),
	( "sigev_notify", ctypes.c_int ),
	( "_sigev_un", _sigev_un ),
])

__freeze_rpythonic_struct( __sigaction_handler, [
	( "sa_handler", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,) ),
	( "sa_sigaction", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( sigaction, [
	( "__sigaction_handler", __sigaction_handler ),
	( "sa_mask", __sigset_t ),
	( "sa_flags", ctypes.c_int ),
	( "sa_restorer", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( sigvec, [
	( "sv_handler", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,) ),
	( "sv_mask", ctypes.c_int ),
	( "sv_flags", ctypes.c_int ),
])

__freeze_rpythonic_struct( _fpreg, [
	( "significand", ( ctypes.c_ushort * 4 ) ),
	( "exponent", ctypes.c_ushort ),
])

__freeze_rpythonic_struct( _fpxreg, [
	( "significand", ( ctypes.c_ushort * 4 ) ),
	( "exponent", ctypes.c_ushort ),
	( "padding", ( ctypes.c_ushort * 3 ) ),
])

__freeze_rpythonic_struct( _xmmreg, [
	( "element", ( ctypes.c_uint * 4 ) ),
])

__freeze_rpythonic_struct( _fpstate, [
	( "cwd", ctypes.c_uint16 ),
	( "swd", ctypes.c_uint16 ),
	( "ftw", ctypes.c_uint16 ),
	( "fop", ctypes.c_uint16 ),
	( "rip", ctypes.c_uint64 ),
	( "rdp", ctypes.c_uint64 ),
	( "mxcsr", ctypes.c_uint ),
	( "mxcr_mask", ctypes.c_uint ),
	( "_st", ( _fpxreg * 8 ) ),
	( "_xmm", ( _xmmreg * 16 ) ),
	( "padding", ( ctypes.c_uint * 24 ) ),
])

__freeze_rpythonic_struct( sigcontext, [
	( "r8", ctypes.c_ulong ),
	( "r9", ctypes.c_ulong ),
	( "r10", ctypes.c_ulong ),
	( "r11", ctypes.c_ulong ),
	( "r12", ctypes.c_ulong ),
	( "r13", ctypes.c_ulong ),
	( "r14", ctypes.c_ulong ),
	( "r15", ctypes.c_ulong ),
	( "rdi", ctypes.c_ulong ),
	( "rsi", ctypes.c_ulong ),
	( "rbp", ctypes.c_ulong ),
	( "rbx", ctypes.c_ulong ),
	( "rdx", ctypes.c_ulong ),
	( "rax", ctypes.c_ulong ),
	( "rcx", ctypes.c_ulong ),
	( "rsp", ctypes.c_ulong ),
	( "rip", ctypes.c_ulong ),
	( "eflags", ctypes.c_ulong ),
	( "cs", ctypes.c_ushort ),
	( "gs", ctypes.c_ushort ),
	( "fs", ctypes.c_ushort ),
	( "__pad0", ctypes.c_ushort ),
	( "err", ctypes.c_ulong ),
	( "trapno", ctypes.c_ulong ),
	( "oldmask", ctypes.c_ulong ),
	( "cr2", ctypes.c_ulong ),
	( "fpstate", ctypes.POINTER(_fpstate) ),
	( "__reserved1", ( ctypes.c_ulong * 8 ) ),
])

__freeze_rpythonic_struct( sigstack, [
	( "ss_sp", ctypes.POINTER(ctypes.c_void_p) ),
	( "ss_onstack", ctypes.c_int ),
])

__freeze_rpythonic_struct( sigaltstack, [
	( "ss_sp", ctypes.POINTER(ctypes.c_void_p) ),
	( "ss_flags", ctypes.c_int ),
	( "ss_size", ctypes.c_uint64 ),
])

__freeze_rpythonic_struct( _libc_fpxreg, [
	( "significand", ( ctypes.c_uint16 * 4 ) ),
	( "exponent", ctypes.c_uint16 ),
	( "padding", ( ctypes.c_uint16 * 3 ) ),
])

__freeze_rpythonic_struct( _libc_xmmreg, [
	( "element", ( ctypes.c_uint * 4 ) ),
])

__freeze_rpythonic_struct( _libc_fpstate, [
	( "cwd", ctypes.c_uint16 ),
	( "swd", ctypes.c_uint16 ),
	( "ftw", ctypes.c_uint16 ),
	( "fop", ctypes.c_uint16 ),
	( "rip", ctypes.c_uint64 ),
	( "rdp", ctypes.c_uint64 ),
	( "mxcsr", ctypes.c_uint ),
	( "mxcr_mask", ctypes.c_uint ),
	( "_st", ( _libc_fpxreg * 8 ) ),
	( "_xmm", ( _libc_xmmreg * 16 ) ),
	( "padding", ( ctypes.c_uint * 24 ) ),
])

__freeze_rpythonic_struct( mcontext_t, [
	( "gregs", ( ctypes.c_int64 * 23 ) ),
	( "fpregs", ctypes.POINTER(_libc_fpstate) ),
	( "__reserved1", ( ctypes.c_ulong * 8 ) ),
])

__freeze_rpythonic_struct( ucontext, [
	( "uc_flags", ctypes.c_uint64 ),
	( "uc_link", ctypes.POINTER(ucontext) ),
	( "uc_stack", sigaltstack ),
	( "uc_mcontext", mcontext_t ),
	( "uc_sigmask", __sigset_t ),
	( "__fpregs_mem", _libc_fpstate ),
])

__freeze_rpythonic_struct( pthread_attr_t, [
	( "__size", ( ctypes.c_char * 56 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( __pthread_internal_list, [
	( "__prev", ctypes.POINTER(__pthread_internal_list) ),
	( "__next", ctypes.POINTER(__pthread_internal_list) ),
])

__freeze_rpythonic_struct( __pthread_mutex_s, [
	( "__lock", ctypes.c_int ),
	( "__count", ctypes.c_uint ),
	( "__owner", ctypes.c_int ),
	( "__nusers", ctypes.c_uint ),
	( "__kind", ctypes.c_int ),
	( "__spins", ctypes.c_int ),
	( "__list", __pthread_internal_list ),
])

__freeze_rpythonic_struct( pthread_mutex_t, [
	( "__data", __pthread_mutex_s ),
	( "__size", ( ctypes.c_char * 40 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_mutexattr_t, [
	( "__size", ( ctypes.c_char * 4 ) ),
	( "__align", ctypes.c_int ),
])

__freeze_rpythonic_struct( __data, [
	( "__lock", ctypes.c_int ),
	( "__nr_readers", ctypes.c_uint ),
	( "__readers_wakeup", ctypes.c_uint ),
	( "__writer_wakeup", ctypes.c_uint ),
	( "__nr_readers_queued", ctypes.c_uint ),
	( "__nr_writers_queued", ctypes.c_uint ),
	( "__writer", ctypes.c_int ),
	( "__shared", ctypes.c_int ),
	( "__pad1", ctypes.c_uint64 ),
	( "__pad2", ctypes.c_uint64 ),
	( "__flags", ctypes.c_uint ),
])

__freeze_rpythonic_struct( pthread_cond_t, [
	( "__data", __data ),
	( "__size", ( ctypes.c_char * 48 ) ),
	( "__align", ctypes.c_longlong ),
])

__freeze_rpythonic_struct( pthread_condattr_t, [
	( "__size", ( ctypes.c_char * 4 ) ),
	( "__align", ctypes.c_int ),
])

__freeze_rpythonic_struct( pthread_rwlock_t, [
	( "__data", __data ),
	( "__size", ( ctypes.c_char * 56 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_rwlockattr_t, [
	( "__size", ( ctypes.c_char * 8 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_barrier_t, [
	( "__size", ( ctypes.c_char * 32 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_barrierattr_t, [
	( "__size", ( ctypes.c_char * 4 ) ),
	( "__align", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GBookmarkFile, [
])

__freeze_rpythonic_struct( _GMemVTable, [
	( "malloc", ctypes.POINTER(ctypes.c_void_p) ),
	( "realloc", ctypes.POINTER(ctypes.c_void_p) ),
	( "free", ctypes.c_void_p ),
	( "calloc", ctypes.POINTER(ctypes.c_void_p) ),
	( "try_malloc", ctypes.POINTER(ctypes.c_void_p) ),
	( "try_realloc", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GAllocator, [
])

__freeze_rpythonic_struct( _GMemChunk, [
])

__freeze_rpythonic_struct( _GList, [
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
	( "next", ctypes.POINTER(_GList) ),
	( "prev", ctypes.POINTER(_GList) ),
])

__freeze_rpythonic_struct( _GCache, [
])

__freeze_rpythonic_struct( _GChecksum, [
])

__freeze_rpythonic_struct( _GCompletion, [
	( "items", ctypes.POINTER(_GList) ),
	( "func", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_char), )) ),
	( "prefix", ctypes.POINTER(ctypes.c_char) ),
	( "cache", ctypes.POINTER(_GList) ),
	( "strncmp_func", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.c_ulong,) ),
])

__freeze_rpythonic_struct( _GIConv, [
])

__freeze_rpythonic_struct( _GData, [
])

__freeze_rpythonic_struct( _GDate, [
	( "julian_days", ctypes.c_uint ),
	( "julian", ctypes.c_uint ),
	( "dmy", ctypes.c_uint ),
	( "day", ctypes.c_uint ),
	( "month", ctypes.c_uint ),
	( "year", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GTimeZone, [
])

__freeze_rpythonic_struct( _GDateTime, [
])

__freeze_rpythonic_struct( _GDir, [
])

__freeze_rpythonic_struct( _GHashTable, [
])

__freeze_rpythonic_struct( _GHashTableIter, [
	( "dummy1", ctypes.POINTER(ctypes.c_void_p) ),
	( "dummy2", ctypes.POINTER(ctypes.c_void_p) ),
	( "dummy3", ctypes.POINTER(ctypes.c_void_p) ),
	( "dummy4", ctypes.c_int ),
	( "dummy5", ctypes.c_int ),
	( "dummy6", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GHmac, [
])

__freeze_rpythonic_struct( _GHook, [
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
	( "next", ctypes.POINTER(_GHook) ),
	( "prev", ctypes.POINTER(_GHook) ),
	( "ref_count", ctypes.c_uint ),
	( "hook_id", ctypes.c_ulong ),
	( "flags", ctypes.c_uint ),
	( "func", ctypes.POINTER(ctypes.c_void_p) ),
	( "destroy", ctypes.CFUNCTYPE(ctypes.c_void_p, ) ),
])

__freeze_rpythonic_struct( _GHookList, [
	( "seq_id", ctypes.c_ulong ),
	( "hook_size", ctypes.c_uint ),
	( "is_setup", ctypes.c_uint ),
	( "hooks", ctypes.POINTER(_GHook) ),
	( "dummy3", ctypes.POINTER(ctypes.c_void_p) ),
	( "finalize_hook", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GHookList),ctypes.POINTER(_GHook),) ),
	( "dummy", ctypes.POINTER(( ctypes.c_void_p * 2 )) ),
])

__freeze_rpythonic_struct( _GPollFD, [
	( "fd", ctypes.c_int ),
	( "events", ctypes.c_ushort ),
	( "revents", ctypes.c_ushort ),
])

__freeze_rpythonic_struct( _GSList, [
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
	( "next", ctypes.POINTER(_GSList) ),
])

__freeze_rpythonic_struct( _GMainContext, [
])

__freeze_rpythonic_struct( _GMainLoop, [
])

__freeze_rpythonic_struct( _GSourcePrivate, [
])

__freeze_rpythonic_struct( _GSourceCallbackFuncs, [
	( "ref", ctypes.c_void_p ),
	( "unref", ctypes.c_void_p ),
	( "get", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GSourceFuncs, [
	( "prepare", ctypes.c_void_p ),
	( "check", ctypes.c_void_p ),
	( "dispatch", ctypes.c_void_p ),
	( "finalize", ctypes.c_void_p ),
	( "closure_callback", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
	( "closure_marshal", ctypes.CFUNCTYPE(ctypes.c_void_p, ) ),
])

__freeze_rpythonic_struct( _GSource, [
	( "callback_data", ctypes.POINTER(ctypes.c_void_p) ),
	( "callback_funcs", ctypes.POINTER(_GSourceCallbackFuncs) ),
	( "source_funcs", ctypes.POINTER(_GSourceFuncs) ),
	( "ref_count", ctypes.c_uint ),
	( "context", ctypes.POINTER(_GMainContext) ),
	( "priority", ctypes.c_int ),
	( "flags", ctypes.c_uint ),
	( "source_id", ctypes.c_uint ),
	( "poll_fds", ctypes.POINTER(_GSList) ),
	( "prev", ctypes.POINTER(_GSource) ),
	( "next", ctypes.POINTER(_GSource) ),
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "priv", ctypes.POINTER(_GSourcePrivate) ),
])

__freeze_rpythonic_struct( _GStringChunk, [
])

__freeze_rpythonic_struct( _GString, [
	( "C_str", ctypes.POINTER(ctypes.c_char) ),
	( "C_len", ctypes.c_ulong ),
	( "allocated_len", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( _GIOFuncs, [
	( "io_read", ctypes.c_void_p ),
	( "io_write", ctypes.c_void_p ),
	( "io_seek", ctypes.c_void_p ),
	( "io_close", ctypes.c_void_p ),
	( "io_create_watch", ctypes.POINTER(ctypes.c_void_p) ),
	( "io_free", ctypes.c_void_p ),
	( "io_set_flags", ctypes.c_void_p ),
	( "io_get_flags", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GIOChannel, [
	( "ref_count", ctypes.c_int ),
	( "funcs", ctypes.POINTER(_GIOFuncs) ),
	( "encoding", ctypes.POINTER(ctypes.c_char) ),
	( "read_cd", ctypes.POINTER(_GIConv) ),
	( "write_cd", ctypes.POINTER(_GIConv) ),
	( "line_term", ctypes.POINTER(ctypes.c_char) ),
	( "line_term_len", ctypes.c_uint ),
	( "buf_size", ctypes.c_ulong ),
	( "read_buf", ctypes.POINTER(_GString) ),
	( "encoded_read_buf", ctypes.POINTER(_GString) ),
	( "write_buf", ctypes.POINTER(_GString) ),
	( "partial_write_buf", ( ctypes.c_char * 6 ) ),
	( "use_buffer", ctypes.c_uint ),
	( "do_encode", ctypes.c_uint ),
	( "close_on_unref", ctypes.c_uint ),
	( "is_readable", ctypes.c_uint ),
	( "is_writeable", ctypes.c_uint ),
	( "is_seekable", ctypes.c_uint ),
	( "reserved1", ctypes.POINTER(ctypes.c_void_p) ),
	( "reserved2", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GKeyFile, [
])

__freeze_rpythonic_struct( _GMappedFile, [
])

__freeze_rpythonic_struct( _GMarkupParseContext, [
])

__freeze_rpythonic_struct( _GMarkupParser, [
	( "start_element", ctypes.c_void_p ),
	( "end_element", ctypes.c_void_p ),
	( "text", ctypes.c_void_p ),
	( "passthrough", ctypes.c_void_p ),
	( "error", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GNode, [
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
	( "next", ctypes.POINTER(_GNode) ),
	( "prev", ctypes.POINTER(_GNode) ),
	( "parent", ctypes.POINTER(_GNode) ),
	( "children", ctypes.POINTER(_GNode) ),
])

__freeze_rpythonic_struct( _GOptionContext, [
])

__freeze_rpythonic_struct( _GOptionGroup, [
])

__freeze_rpythonic_struct( _GOptionEntry, [
	( "long_name", ctypes.POINTER(ctypes.c_char) ),
	( "short_name", ctypes.c_char ),
	( "flags", ctypes.c_int ),
	( "arg", ctypes.c_int ),
	( "arg_data", ctypes.POINTER(ctypes.c_void_p) ),
	( "description", ctypes.POINTER(ctypes.c_char) ),
	( "arg_description", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( _GPatternSpec, [
])

__freeze_rpythonic_struct( _GQueue, [
	( "head", ctypes.POINTER(_GList) ),
	( "tail", ctypes.POINTER(_GList) ),
	( "length", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GRand, [
])

__freeze_rpythonic_struct( _GRelation, [
])

__freeze_rpythonic_struct( _GTuples, [
	( "C_len", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GRegex, [
])

__freeze_rpythonic_struct( _GMatchInfo, [
])

__freeze_rpythonic_struct( _GTokenValue, [
	( "v_symbol", ctypes.POINTER(ctypes.c_void_p) ),
	( "v_identifier", ctypes.POINTER(ctypes.c_char) ),
	( "v_binary", ctypes.c_ulong ),
	( "v_octal", ctypes.c_ulong ),
	( "v_int", ctypes.c_ulong ),
	( "v_int64", ctypes.c_ulong ),
	( "v_float", ctypes.c_double ),
	( "v_hex", ctypes.c_ulong ),
	( "v_string", ctypes.POINTER(ctypes.c_char) ),
	( "v_comment", ctypes.POINTER(ctypes.c_char) ),
	( "v_char", ctypes.c_ubyte ),
	( "v_error", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GScannerConfig, [
	( "cset_skip_characters", ctypes.POINTER(ctypes.c_char) ),
	( "cset_identifier_first", ctypes.POINTER(ctypes.c_char) ),
	( "cset_identifier_nth", ctypes.POINTER(ctypes.c_char) ),
	( "cpair_comment_single", ctypes.POINTER(ctypes.c_char) ),
	( "case_sensitive", ctypes.c_uint ),
	( "skip_comment_multi", ctypes.c_uint ),
	( "skip_comment_single", ctypes.c_uint ),
	( "scan_comment_multi", ctypes.c_uint ),
	( "scan_identifier", ctypes.c_uint ),
	( "scan_identifier_1char", ctypes.c_uint ),
	( "scan_identifier_NULL", ctypes.c_uint ),
	( "scan_symbols", ctypes.c_uint ),
	( "scan_binary", ctypes.c_uint ),
	( "scan_octal", ctypes.c_uint ),
	( "scan_float", ctypes.c_uint ),
	( "scan_hex", ctypes.c_uint ),
	( "scan_hex_dollar", ctypes.c_uint ),
	( "scan_string_sq", ctypes.c_uint ),
	( "scan_string_dq", ctypes.c_uint ),
	( "numbers_2_int", ctypes.c_uint ),
	( "int_2_float", ctypes.c_uint ),
	( "identifier_2_string", ctypes.c_uint ),
	( "char_2_token", ctypes.c_uint ),
	( "symbol_2_token", ctypes.c_uint ),
	( "scope_0_fallback", ctypes.c_uint ),
	( "store_int64", ctypes.c_uint ),
	( "padding_dummy", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GScanner, [
	( "user_data", ctypes.POINTER(ctypes.c_void_p) ),
	( "max_parse_errors", ctypes.c_uint ),
	( "parse_errors", ctypes.c_uint ),
	( "input_name", ctypes.POINTER(ctypes.c_char) ),
	( "qdata", ctypes.POINTER(_GData) ),
	( "config", ctypes.POINTER(_GScannerConfig) ),
	( "token", ctypes.c_int ),
	( "value", _GTokenValue ),
	( "line", ctypes.c_uint ),
	( "position", ctypes.c_uint ),
	( "next_token", ctypes.c_int ),
	( "next_value", _GTokenValue ),
	( "next_line", ctypes.c_uint ),
	( "next_position", ctypes.c_uint ),
	( "symbol_table", ctypes.POINTER(_GHashTable) ),
	( "input_fd", ctypes.c_int ),
	( "text", ctypes.POINTER(ctypes.c_char) ),
	( "text_end", ctypes.POINTER(ctypes.c_char) ),
	( "buffer", ctypes.POINTER(ctypes.c_char) ),
	( "scope_id", ctypes.c_uint ),
	( "msg_handler", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GScanner),ctypes.POINTER(ctypes.c_char),ctypes.c_int,) ),
])

__freeze_rpythonic_struct( _GSequence, [
])

__freeze_rpythonic_struct( _GSequenceNode, [
])

__freeze_rpythonic_struct( GTestCase, [
])

__freeze_rpythonic_struct( GTestSuite, [
])

__freeze_rpythonic_struct( GTestConfig, [
	( "test_initialized", ctypes.c_int ),
	( "test_quick", ctypes.c_int ),
	( "test_perf", ctypes.c_int ),
	( "test_verbose", ctypes.c_int ),
	( "test_quiet", ctypes.c_int ),
])

__freeze_rpythonic_struct( GTestLogMsg, [
	( "log_type", ctypes.c_int ),
	( "n_strings", ctypes.c_uint ),
	( "strings", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)) ),
	( "n_nums", ctypes.c_uint ),
	( "nums", ctypes.POINTER(ctypes.c_double) ),
])

__freeze_rpythonic_struct( GTestLogBuffer, [
	( "data", ctypes.POINTER(_GString) ),
	( "msgs", ctypes.POINTER(_GSList) ),
])

__freeze_rpythonic_struct( _GThreadPool, [
	( "func", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),) ),
	( "user_data", ctypes.POINTER(ctypes.c_void_p) ),
	( "exclusive", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GTimer, [
])

__freeze_rpythonic_struct( _GTree, [
])

__freeze_rpythonic_struct( _GVariantType, [
])

__freeze_rpythonic_struct( _GVariant, [
])

__freeze_rpythonic_struct( _GVariantIter, [
	( "x", ( ctypes.c_ulong * 16 ) ),
])

__freeze_rpythonic_struct( _GVariantBuilder, [
	( "x", ( ctypes.c_ulong * 16 ) ),
])

__freeze_rpythonic_struct( _GTypeCValue, [
])

__freeze_rpythonic_struct( _GTypePlugin, [
])

__freeze_rpythonic_struct( _GTypeClass, [
	( "g_type", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( _GTypeInstance, [
	( "g_class", ctypes.POINTER(_GTypeClass) ),
])

__freeze_rpythonic_struct( _GTypeInterface, [
	( "g_type", ctypes.c_ulong ),
	( "g_instance_type", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( _GTypeQuery, [
	( "C_type", ctypes.c_ulong ),
	( "type_name", ctypes.POINTER(ctypes.c_char) ),
	( "class_size", ctypes.c_uint ),
	( "instance_size", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GTypeValueTable, [
	( "value_init", ctypes.c_void_p ),
	( "value_free", ctypes.c_void_p ),
	( "value_copy", ctypes.c_void_p ),
	( "value_peek_pointer", ctypes.POINTER(ctypes.c_void_p) ),
	( "collect_format", ctypes.POINTER(ctypes.c_char) ),
	( "collect_value", ctypes.POINTER(ctypes.c_void_p) ),
	( "lcopy_format", ctypes.POINTER(ctypes.c_char) ),
	( "lcopy_value", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GTypeInfo, [
	( "class_size", ctypes.c_ushort ),
	( "base_init", ctypes.CFUNCTYPE(ctypes.c_void_p, ) ),
	( "base_finalize", ctypes.CFUNCTYPE(ctypes.c_void_p, ) ),
	( "class_init", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),) ),
	( "class_finalize", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),) ),
	( "class_data", ctypes.POINTER(ctypes.c_void_p) ),
	( "instance_size", ctypes.c_ushort ),
	( "n_preallocs", ctypes.c_ushort ),
	( "instance_init", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GTypeInstance),ctypes.POINTER(ctypes.c_void_p),) ),
	( "value_table", ctypes.POINTER(_GTypeValueTable) ),
])

__freeze_rpythonic_struct( _GTypeFundamentalInfo, [
	( "type_flags", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GInterfaceInfo, [
	( "interface_init", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),) ),
	( "interface_finalize", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),) ),
	( "interface_data", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( C_id, [
	( "description", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( _GstIndexAssociation, [
	( "format", ctypes.c_int ),
	( "value", ctypes.c_long ),
])

__freeze_rpythonic_struct( assoc, [
	( "nassocs", ctypes.c_int ),
	( "assocs", ctypes.POINTER(_GstIndexAssociation) ),
	( "flags", ctypes.c_int ),
])

__freeze_rpythonic_struct( C_object, [
	( "key", ctypes.POINTER(ctypes.c_char) ),
	( "C_type", ctypes.c_ulong ),
	( "C_object", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( format, [
	( "format", ctypes.c_int ),
	( "key", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( data, [
	( "C_id", C_id ),
	( "assoc", assoc ),
	( "C_object", C_object ),
	( "format", format ),
])

__freeze_rpythonic_struct( _GValue, [
	( "g_type", ctypes.c_ulong ),
	( "data", ( data * 2 ) ),
])

__freeze_rpythonic_struct( _GParamSpecPool, [
])

__freeze_rpythonic_struct( _GParamSpec, [
	( "g_type_instance", _GTypeInstance ),
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "flags", ctypes.c_int ),
	( "value_type", ctypes.c_ulong ),
	( "owner_type", ctypes.c_ulong ),
	( "_nick", ctypes.POINTER(ctypes.c_char) ),
	( "_blurb", ctypes.POINTER(ctypes.c_char) ),
	( "qdata", ctypes.POINTER(_GData) ),
	( "ref_count", ctypes.c_uint ),
	( "param_id", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GParamSpecClass, [
	( "g_type_class", _GTypeClass ),
	( "value_type", ctypes.c_ulong ),
	( "finalize", ctypes.c_void_p ),
	( "value_set_default", ctypes.c_void_p ),
	( "value_validate", ctypes.c_void_p ),
	( "values_cmp", ctypes.c_void_p ),
	( "dummy", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( _GParameter, [
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "value", _GValue ),
])

__freeze_rpythonic_struct( _GParamSpecTypeInfo, [
	( "instance_size", ctypes.c_ushort ),
	( "n_preallocs", ctypes.c_ushort ),
	( "instance_init", ctypes.c_void_p ),
	( "value_type", ctypes.c_ulong ),
	( "finalize", ctypes.c_void_p ),
	( "value_set_default", ctypes.c_void_p ),
	( "value_validate", ctypes.c_void_p ),
	( "values_cmp", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GClosureNotifyData, [
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
	( "notify", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GClosure),) ),
])

__freeze_rpythonic_struct( _GClosure, [
	( "ref_count", ctypes.c_uint ),
	( "meta_marshal", ctypes.c_uint ),
	( "n_guards", ctypes.c_uint ),
	( "n_fnotifiers", ctypes.c_uint ),
	( "n_inotifiers", ctypes.c_uint ),
	( "in_inotify", ctypes.c_uint ),
	( "floating", ctypes.c_uint ),
	( "derivative_flag", ctypes.c_uint ),
	( "in_marshal", ctypes.c_uint ),
	( "is_invalid", ctypes.c_uint ),
	( "marshal", ctypes.c_void_p ),
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
	( "notifiers", ctypes.POINTER(_GClosureNotifyData) ),
])

__freeze_rpythonic_struct( _GCClosure, [
	( "closure", _GClosure ),
	( "callback", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GSignalInvocationHint, [
	( "signal_id", ctypes.c_uint ),
	( "detail", ctypes.c_uint ),
	( "run_type", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GSignalQuery, [
	( "signal_id", ctypes.c_uint ),
	( "signal_name", ctypes.POINTER(ctypes.c_char) ),
	( "itype", ctypes.c_ulong ),
	( "signal_flags", ctypes.c_int ),
	( "return_type", ctypes.c_ulong ),
	( "n_params", ctypes.c_uint ),
	( "param_types", ctypes.POINTER(ctypes.c_ulong) ),
])

__freeze_rpythonic_struct( _GObject, [
	( "g_type_instance", _GTypeInstance ),
	( "ref_count", ctypes.c_uint ),
	( "qdata", ctypes.POINTER(_GData) ),
])

__freeze_rpythonic_struct( _GObjectClass, [
	( "g_type_class", _GTypeClass ),
	( "construct_properties", ctypes.POINTER(_GSList) ),
	( "constructor", ctypes.POINTER(ctypes.c_void_p) ),
	( "set_property", ctypes.c_void_p ),
	( "get_property", ctypes.c_void_p ),
	( "dispose", ctypes.c_void_p ),
	( "finalize", ctypes.c_void_p ),
	( "dispatch_properties_changed", ctypes.c_void_p ),
	( "notify", ctypes.c_void_p ),
	( "constructed", ctypes.c_void_p ),
	( "flags", ctypes.c_ulong ),
	( "pdummy", ctypes.POINTER(( ctypes.c_void_p * 6 )) ),
])

__freeze_rpythonic_struct( _GObjectConstructParam, [
	( "pspec", ctypes.POINTER(_GParamSpec) ),
	( "value", ctypes.POINTER(_GValue) ),
])

__freeze_rpythonic_struct( _GBinding, [
])

__freeze_rpythonic_struct( _GEnumValue, [
	( "value", ctypes.c_int ),
	( "value_name", ctypes.POINTER(ctypes.c_char) ),
	( "value_nick", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( _GEnumClass, [
	( "g_type_class", _GTypeClass ),
	( "minimum", ctypes.c_int ),
	( "maximum", ctypes.c_int ),
	( "n_values", ctypes.c_uint ),
	( "values", ctypes.POINTER(_GEnumValue) ),
])

__freeze_rpythonic_struct( _GFlagsValue, [
	( "value", ctypes.c_uint ),
	( "value_name", ctypes.POINTER(ctypes.c_char) ),
	( "value_nick", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( _GFlagsClass, [
	( "g_type_class", _GTypeClass ),
	( "mask", ctypes.c_uint ),
	( "n_values", ctypes.c_uint ),
	( "values", ctypes.POINTER(_GFlagsValue) ),
])

__freeze_rpythonic_struct( _GParamSpecChar, [
	( "parent_instance", _GParamSpec ),
	( "minimum", ctypes.c_char ),
	( "maximum", ctypes.c_char ),
	( "default_value", ctypes.c_char ),
])

__freeze_rpythonic_struct( _GParamSpecUChar, [
	( "parent_instance", _GParamSpec ),
	( "minimum", ctypes.c_ubyte ),
	( "maximum", ctypes.c_ubyte ),
	( "default_value", ctypes.c_ubyte ),
])

__freeze_rpythonic_struct( _GParamSpecBoolean, [
	( "parent_instance", _GParamSpec ),
	( "default_value", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GParamSpecInt, [
	( "parent_instance", _GParamSpec ),
	( "minimum", ctypes.c_int ),
	( "maximum", ctypes.c_int ),
	( "default_value", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GParamSpecUInt, [
	( "parent_instance", _GParamSpec ),
	( "minimum", ctypes.c_uint ),
	( "maximum", ctypes.c_uint ),
	( "default_value", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GParamSpecLong, [
	( "parent_instance", _GParamSpec ),
	( "minimum", ctypes.c_long ),
	( "maximum", ctypes.c_long ),
	( "default_value", ctypes.c_long ),
])

__freeze_rpythonic_struct( _GParamSpecULong, [
	( "parent_instance", _GParamSpec ),
	( "minimum", ctypes.c_ulong ),
	( "maximum", ctypes.c_ulong ),
	( "default_value", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( _GParamSpecInt64, [
	( "parent_instance", _GParamSpec ),
	( "minimum", ctypes.c_long ),
	( "maximum", ctypes.c_long ),
	( "default_value", ctypes.c_long ),
])

__freeze_rpythonic_struct( _GParamSpecUInt64, [
	( "parent_instance", _GParamSpec ),
	( "minimum", ctypes.c_ulong ),
	( "maximum", ctypes.c_ulong ),
	( "default_value", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( _GParamSpecUnichar, [
	( "parent_instance", _GParamSpec ),
	( "default_value", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GParamSpecEnum, [
	( "parent_instance", _GParamSpec ),
	( "enum_class", ctypes.POINTER(_GEnumClass) ),
	( "default_value", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GParamSpecFlags, [
	( "parent_instance", _GParamSpec ),
	( "flags_class", ctypes.POINTER(_GFlagsClass) ),
	( "default_value", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GParamSpecFloat, [
	( "parent_instance", _GParamSpec ),
	( "minimum", ctypes.c_float ),
	( "maximum", ctypes.c_float ),
	( "default_value", ctypes.c_float ),
	( "epsilon", ctypes.c_float ),
])

__freeze_rpythonic_struct( _GParamSpecDouble, [
	( "parent_instance", _GParamSpec ),
	( "minimum", ctypes.c_double ),
	( "maximum", ctypes.c_double ),
	( "default_value", ctypes.c_double ),
	( "epsilon", ctypes.c_double ),
])

__freeze_rpythonic_struct( _GParamSpecString, [
	( "parent_instance", _GParamSpec ),
	( "default_value", ctypes.POINTER(ctypes.c_char) ),
	( "cset_first", ctypes.POINTER(ctypes.c_char) ),
	( "cset_nth", ctypes.POINTER(ctypes.c_char) ),
	( "substitutor", ctypes.c_char ),
	( "null_fold_if_empty", ctypes.c_uint ),
	( "ensure_non_null", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GParamSpecParam, [
	( "parent_instance", _GParamSpec ),
])

__freeze_rpythonic_struct( _GParamSpecBoxed, [
	( "parent_instance", _GParamSpec ),
])

__freeze_rpythonic_struct( _GParamSpecPointer, [
	( "parent_instance", _GParamSpec ),
])

__freeze_rpythonic_struct( _GParamSpecValueArray, [
	( "parent_instance", _GParamSpec ),
	( "element_spec", ctypes.POINTER(_GParamSpec) ),
	( "fixed_n_elements", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GParamSpecObject, [
	( "parent_instance", _GParamSpec ),
])

__freeze_rpythonic_struct( _GParamSpecOverride, [
	( "parent_instance", _GParamSpec ),
	( "overridden", ctypes.POINTER(_GParamSpec) ),
])

__freeze_rpythonic_struct( _GParamSpecGType, [
	( "parent_instance", _GParamSpec ),
	( "is_a_type", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( _GParamSpecVariant, [
	( "parent_instance", _GParamSpec ),
	( "C_type", ctypes.POINTER(_GVariantType) ),
	( "default_value", ctypes.POINTER(_GVariant) ),
	( "padding", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( _GTypeModule, [
	( "parent_instance", _GObject ),
	( "use_count", ctypes.c_uint ),
	( "type_infos", ctypes.POINTER(_GSList) ),
	( "interface_infos", ctypes.POINTER(_GSList) ),
	( "name", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( _GTypeModuleClass, [
	( "parent_class", _GObjectClass ),
	( "load", ctypes.c_void_p ),
	( "unload", ctypes.c_void_p ),
	( "reserved1", ctypes.c_void_p ),
	( "reserved2", ctypes.c_void_p ),
	( "reserved3", ctypes.c_void_p ),
	( "reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GTypePluginClass, [
	( "base_iface", _GTypeInterface ),
	( "use_plugin", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GTypePlugin),) ),
	( "unuse_plugin", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GTypePlugin),) ),
	( "complete_type_info", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GTypePlugin),ctypes.c_ulong,ctypes.POINTER(_GTypeInfo),ctypes.POINTER(_GTypeValueTable),) ),
	( "complete_interface_info", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GTypePlugin),ctypes.c_ulong,ctypes.c_ulong,ctypes.POINTER(_GInterfaceInfo),) ),
])

__freeze_rpythonic_struct( _GValueArray, [
	( "n_values", ctypes.c_uint ),
	( "values", ctypes.POINTER(_GValue) ),
	( "n_prealloced", ctypes.c_uint ),
])

__freeze_rpythonic_struct( __value, [
	( "__wch", ctypes.c_uint ),
	( "__wchb", ( ctypes.c_char * 4 ) ),
])

__freeze_rpythonic_struct( __mbstate_t, [
	( "__count", ctypes.c_int ),
	( "__value", __value ),
])

__freeze_rpythonic_struct( _G_fpos_t, [
	( "__pos", ctypes.c_int64 ),
	( "__state", __mbstate_t ),
])

__freeze_rpythonic_struct( _G_fpos64_t, [
	( "__pos", ctypes.c_int64 ),
	( "__state", __mbstate_t ),
])

__freeze_rpythonic_struct( _IO_jump_t, [
])

__freeze_rpythonic_struct( _IO_marker, [
	( "_next", ctypes.POINTER(_IO_marker) ),
	( "_sbuf", ctypes.POINTER(_IO_FILE) ),
	( "_pos", ctypes.c_int ),
])

__freeze_rpythonic_struct( _IO_FILE, [
	( "_flags", ctypes.c_int ),
	( "_IO_read_ptr", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_read_end", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_read_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_write_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_write_ptr", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_write_end", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_buf_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_buf_end", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_save_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_backup_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_save_end", ctypes.POINTER(ctypes.c_char) ),
	( "_markers", ctypes.POINTER(_IO_marker) ),
	( "_chain", ctypes.POINTER(_IO_FILE) ),
	( "_fileno", ctypes.c_int ),
	( "_flags2", ctypes.c_int ),
	( "_old_offset", ctypes.c_int64 ),
	( "_cur_column", ctypes.c_ushort ),
	( "_vtable_offset", ctypes.c_char ),
	( "_shortbuf", ( ctypes.c_char * 1 ) ),
	( "_lock", ctypes.POINTER(ctypes.c_void_p) ),
	( "_offset", ctypes.c_int64 ),
	( "__pad1", ctypes.POINTER(ctypes.c_void_p) ),
	( "__pad2", ctypes.POINTER(ctypes.c_void_p) ),
	( "__pad3", ctypes.POINTER(ctypes.c_void_p) ),
	( "__pad4", ctypes.POINTER(ctypes.c_void_p) ),
	( "__pad5", ctypes.c_uint64 ),
	( "_mode", ctypes.c_int ),
	( "_unused2", ctypes.c_char ),
])

__freeze_rpythonic_struct( _IO_FILE_plus, [
])

__freeze_rpythonic_struct( _xmlBuffer, [
	( "content", ctypes.POINTER(ctypes.c_ubyte) ),
	( "use", ctypes.c_uint ),
	( "size", ctypes.c_uint ),
	( "alloc", ctypes.c_int ),
	( "contentIO", ctypes.POINTER(ctypes.c_ubyte) ),
])

__freeze_rpythonic_struct( _xmlNotation, [
	( "name", ctypes.POINTER(ctypes.c_ubyte) ),
	( "PublicID", ctypes.POINTER(ctypes.c_ubyte) ),
	( "SystemID", ctypes.POINTER(ctypes.c_ubyte) ),
])

__freeze_rpythonic_struct( _xmlEnumeration, [
	( "next", ctypes.POINTER(_xmlEnumeration) ),
	( "name", ctypes.POINTER(ctypes.c_ubyte) ),
])

__freeze_rpythonic_struct( _xmlNs, [
	( "next", ctypes.POINTER(_xmlNs) ),
	( "C_type", ctypes.c_int ),
	( "href", ctypes.POINTER(ctypes.c_ubyte) ),
	( "prefix", ctypes.POINTER(ctypes.c_ubyte) ),
	( "_private", ctypes.POINTER(ctypes.c_void_p) ),
	( "context", ctypes.POINTER(_xmlDoc) ),
])

__freeze_rpythonic_struct( _xmlNode, [
	( "_private", ctypes.POINTER(ctypes.c_void_p) ),
	( "C_type", ctypes.c_int ),
	( "name", ctypes.POINTER(ctypes.c_ubyte) ),
	( "children", ctypes.POINTER(_xmlNode) ),
	( "last", ctypes.POINTER(_xmlNode) ),
	( "parent", ctypes.POINTER(_xmlNode) ),
	( "next", ctypes.POINTER(_xmlNode) ),
	( "prev", ctypes.POINTER(_xmlNode) ),
	( "doc", ctypes.POINTER(_xmlDoc) ),
	( "ns", ctypes.POINTER(_xmlNs) ),
	( "content", ctypes.POINTER(ctypes.c_ubyte) ),
	( "properties", ctypes.POINTER(_xmlAttr) ),
	( "nsDef", ctypes.POINTER(_xmlNs) ),
	( "psvi", ctypes.POINTER(ctypes.c_void_p) ),
	( "line", ctypes.c_ushort ),
	( "extra", ctypes.c_ushort ),
])

__freeze_rpythonic_struct( _xmlDtd, [
	( "_private", ctypes.POINTER(ctypes.c_void_p) ),
	( "C_type", ctypes.c_int ),
	( "name", ctypes.POINTER(ctypes.c_ubyte) ),
	( "children", ctypes.POINTER(_xmlNode) ),
	( "last", ctypes.POINTER(_xmlNode) ),
	( "parent", ctypes.POINTER(_xmlDoc) ),
	( "next", ctypes.POINTER(_xmlNode) ),
	( "prev", ctypes.POINTER(_xmlNode) ),
	( "doc", ctypes.POINTER(_xmlDoc) ),
	( "notations", ctypes.POINTER(ctypes.c_void_p) ),
	( "elements", ctypes.POINTER(ctypes.c_void_p) ),
	( "attributes", ctypes.POINTER(ctypes.c_void_p) ),
	( "entities", ctypes.POINTER(ctypes.c_void_p) ),
	( "ExternalID", ctypes.POINTER(ctypes.c_ubyte) ),
	( "SystemID", ctypes.POINTER(ctypes.c_ubyte) ),
	( "pentities", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _xmlDict, [
])

__freeze_rpythonic_struct( _xmlDoc, [
	( "_private", ctypes.POINTER(ctypes.c_void_p) ),
	( "C_type", ctypes.c_int ),
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "children", ctypes.POINTER(_xmlNode) ),
	( "last", ctypes.POINTER(_xmlNode) ),
	( "parent", ctypes.POINTER(_xmlNode) ),
	( "next", ctypes.POINTER(_xmlNode) ),
	( "prev", ctypes.POINTER(_xmlNode) ),
	( "doc", ctypes.POINTER(_xmlDoc) ),
	( "compression", ctypes.c_int ),
	( "standalone", ctypes.c_int ),
	( "intSubset", ctypes.POINTER(_xmlDtd) ),
	( "extSubset", ctypes.POINTER(_xmlDtd) ),
	( "oldNs", ctypes.POINTER(_xmlNs) ),
	( "version", ctypes.POINTER(ctypes.c_ubyte) ),
	( "encoding", ctypes.POINTER(ctypes.c_ubyte) ),
	( "ids", ctypes.POINTER(ctypes.c_void_p) ),
	( "refs", ctypes.POINTER(ctypes.c_void_p) ),
	( "URL", ctypes.POINTER(ctypes.c_ubyte) ),
	( "charset", ctypes.c_int ),
	( "C_dict", ctypes.POINTER(_xmlDict) ),
	( "psvi", ctypes.POINTER(ctypes.c_void_p) ),
	( "parseFlags", ctypes.c_int ),
	( "properties", ctypes.c_int ),
])

__freeze_rpythonic_struct( _xmlAttribute, [
	( "_private", ctypes.POINTER(ctypes.c_void_p) ),
	( "C_type", ctypes.c_int ),
	( "name", ctypes.POINTER(ctypes.c_ubyte) ),
	( "children", ctypes.POINTER(_xmlNode) ),
	( "last", ctypes.POINTER(_xmlNode) ),
	( "parent", ctypes.POINTER(_xmlDtd) ),
	( "next", ctypes.POINTER(_xmlNode) ),
	( "prev", ctypes.POINTER(_xmlNode) ),
	( "doc", ctypes.POINTER(_xmlDoc) ),
	( "nexth", ctypes.POINTER(_xmlAttribute) ),
	( "atype", ctypes.c_int ),
	( "C_def", ctypes.c_int ),
	( "defaultValue", ctypes.POINTER(ctypes.c_ubyte) ),
	( "tree", ctypes.POINTER(_xmlEnumeration) ),
	( "prefix", ctypes.POINTER(ctypes.c_ubyte) ),
	( "elem", ctypes.POINTER(ctypes.c_ubyte) ),
])

__freeze_rpythonic_struct( _xmlElementContent, [
	( "C_type", ctypes.c_int ),
	( "ocur", ctypes.c_int ),
	( "name", ctypes.POINTER(ctypes.c_ubyte) ),
	( "c1", ctypes.POINTER(_xmlElementContent) ),
	( "c2", ctypes.POINTER(_xmlElementContent) ),
	( "parent", ctypes.POINTER(_xmlElementContent) ),
	( "prefix", ctypes.POINTER(ctypes.c_ubyte) ),
])

__freeze_rpythonic_struct( _xmlRegexp, [
])

__freeze_rpythonic_struct( _xmlRegExecCtxt, [
])

__freeze_rpythonic_struct( _xmlExpCtxt, [
])

__freeze_rpythonic_struct( _xmlExpNode, [
])

__freeze_rpythonic_struct( _xmlElement, [
	( "_private", ctypes.POINTER(ctypes.c_void_p) ),
	( "C_type", ctypes.c_int ),
	( "name", ctypes.POINTER(ctypes.c_ubyte) ),
	( "children", ctypes.POINTER(_xmlNode) ),
	( "last", ctypes.POINTER(_xmlNode) ),
	( "parent", ctypes.POINTER(_xmlDtd) ),
	( "next", ctypes.POINTER(_xmlNode) ),
	( "prev", ctypes.POINTER(_xmlNode) ),
	( "doc", ctypes.POINTER(_xmlDoc) ),
	( "etype", ctypes.c_int ),
	( "content", ctypes.POINTER(_xmlElementContent) ),
	( "attributes", ctypes.POINTER(_xmlAttribute) ),
	( "prefix", ctypes.POINTER(ctypes.c_ubyte) ),
	( "contModel", ctypes.POINTER(_xmlRegexp) ),
])

__freeze_rpythonic_struct( _xmlAttr, [
	( "_private", ctypes.POINTER(ctypes.c_void_p) ),
	( "C_type", ctypes.c_int ),
	( "name", ctypes.POINTER(ctypes.c_ubyte) ),
	( "children", ctypes.POINTER(_xmlNode) ),
	( "last", ctypes.POINTER(_xmlNode) ),
	( "parent", ctypes.POINTER(_xmlNode) ),
	( "next", ctypes.POINTER(_xmlAttr) ),
	( "prev", ctypes.POINTER(_xmlAttr) ),
	( "doc", ctypes.POINTER(_xmlDoc) ),
	( "ns", ctypes.POINTER(_xmlNs) ),
	( "atype", ctypes.c_int ),
	( "psvi", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _xmlID, [
	( "next", ctypes.POINTER(_xmlID) ),
	( "value", ctypes.POINTER(ctypes.c_ubyte) ),
	( "attr", ctypes.POINTER(_xmlAttr) ),
	( "name", ctypes.POINTER(ctypes.c_ubyte) ),
	( "lineno", ctypes.c_int ),
	( "doc", ctypes.POINTER(_xmlDoc) ),
])

__freeze_rpythonic_struct( _xmlRef, [
	( "next", ctypes.POINTER(_xmlRef) ),
	( "value", ctypes.POINTER(ctypes.c_ubyte) ),
	( "attr", ctypes.POINTER(_xmlAttr) ),
	( "name", ctypes.POINTER(ctypes.c_ubyte) ),
	( "lineno", ctypes.c_int ),
])

__freeze_rpythonic_struct( _xmlDOMWrapCtxt, [
	( "_private", ctypes.POINTER(ctypes.c_void_p) ),
	( "C_type", ctypes.c_int ),
	( "namespaceMap", ctypes.POINTER(ctypes.c_void_p) ),
	( "getNsForNodeFunc", ctypes.CFUNCTYPE(ctypes.POINTER(_xmlNs), ctypes.POINTER(_xmlDOMWrapCtxt),ctypes.POINTER(_xmlNode),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),) ),
])

__freeze_rpythonic_struct( _xmlHashTable, [
])

__freeze_rpythonic_struct( _xmlError, [
	( "domain", ctypes.c_int ),
	( "code", ctypes.c_int ),
	( "message", ctypes.POINTER(ctypes.c_char) ),
	( "level", ctypes.c_int ),
	( "file", ctypes.POINTER(ctypes.c_char) ),
	( "line", ctypes.c_int ),
	( "str1", ctypes.POINTER(ctypes.c_char) ),
	( "str2", ctypes.POINTER(ctypes.c_char) ),
	( "str3", ctypes.POINTER(ctypes.c_char) ),
	( "int1", ctypes.c_int ),
	( "int2", ctypes.c_int ),
	( "ctxt", ctypes.POINTER(ctypes.c_void_p) ),
	( "node", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _xmlLink, [
])

__freeze_rpythonic_struct( _xmlList, [
])

__freeze_rpythonic_struct( _xmlAutomata, [
])

__freeze_rpythonic_struct( _xmlAutomataState, [
])

__freeze_rpythonic_struct( _xmlValidState, [
])

__freeze_rpythonic_struct( _xmlValidCtxt, [
	( "userData", ctypes.POINTER(ctypes.c_void_p) ),
	( "error", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),) ),
	( "warning", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),) ),
	( "node", ctypes.POINTER(_xmlNode) ),
	( "nodeNr", ctypes.c_int ),
	( "nodeMax", ctypes.c_int ),
	( "nodeTab", ctypes.POINTER(ctypes.POINTER(_xmlNode)) ),
	( "finishDtd", ctypes.c_uint ),
	( "doc", ctypes.POINTER(_xmlDoc) ),
	( "valid", ctypes.c_int ),
	( "vstate", ctypes.POINTER(_xmlValidState) ),
	( "vstateNr", ctypes.c_int ),
	( "vstateMax", ctypes.c_int ),
	( "vstateTab", ctypes.POINTER(_xmlValidState) ),
	( "am", ctypes.POINTER(_xmlAutomata) ),
	( "state", ctypes.POINTER(_xmlAutomataState) ),
])

__freeze_rpythonic_struct( _xmlEntity, [
	( "_private", ctypes.POINTER(ctypes.c_void_p) ),
	( "C_type", ctypes.c_int ),
	( "name", ctypes.POINTER(ctypes.c_ubyte) ),
	( "children", ctypes.POINTER(_xmlNode) ),
	( "last", ctypes.POINTER(_xmlNode) ),
	( "parent", ctypes.POINTER(_xmlDtd) ),
	( "next", ctypes.POINTER(_xmlNode) ),
	( "prev", ctypes.POINTER(_xmlNode) ),
	( "doc", ctypes.POINTER(_xmlDoc) ),
	( "orig", ctypes.POINTER(ctypes.c_ubyte) ),
	( "content", ctypes.POINTER(ctypes.c_ubyte) ),
	( "length", ctypes.c_int ),
	( "etype", ctypes.c_int ),
	( "ExternalID", ctypes.POINTER(ctypes.c_ubyte) ),
	( "SystemID", ctypes.POINTER(ctypes.c_ubyte) ),
	( "nexte", ctypes.POINTER(_xmlEntity) ),
	( "URI", ctypes.POINTER(ctypes.c_ubyte) ),
	( "owner", ctypes.c_int ),
	( "checked", ctypes.c_int ),
])

__freeze_rpythonic_struct( _xmlCharEncodingHandler, [
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "input", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_int),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_int),) ),
	( "output", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_int),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_int),) ),
	( "iconv_in", ctypes.POINTER(ctypes.c_void_p) ),
	( "iconv_out", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _xmlParserInputBuffer, [
	( "context", ctypes.POINTER(ctypes.c_void_p) ),
	( "readcallback", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),ctypes.c_int,) ),
	( "closecallback", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
	( "encoder", ctypes.POINTER(_xmlCharEncodingHandler) ),
	( "buffer", ctypes.POINTER(_xmlBuffer) ),
	( "raw", ctypes.POINTER(_xmlBuffer) ),
	( "compressed", ctypes.c_int ),
	( "error", ctypes.c_int ),
	( "rawconsumed", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( _xmlParserInput, [
	( "buf", ctypes.POINTER(_xmlParserInputBuffer) ),
	( "filename", ctypes.POINTER(ctypes.c_char) ),
	( "directory", ctypes.POINTER(ctypes.c_char) ),
	( "base", ctypes.POINTER(ctypes.c_ubyte) ),
	( "cur", ctypes.POINTER(ctypes.c_ubyte) ),
	( "end", ctypes.POINTER(ctypes.c_ubyte) ),
	( "length", ctypes.c_int ),
	( "line", ctypes.c_int ),
	( "col", ctypes.c_int ),
	( "consumed", ctypes.c_ulong ),
	( "free", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_ubyte),) ),
	( "encoding", ctypes.POINTER(ctypes.c_ubyte) ),
	( "version", ctypes.POINTER(ctypes.c_ubyte) ),
	( "standalone", ctypes.c_int ),
	( "C_id", ctypes.c_int ),
])

__freeze_rpythonic_struct( _xmlParserNodeInfo, [
	( "node", ctypes.POINTER(_xmlNode) ),
	( "begin_pos", ctypes.c_ulong ),
	( "begin_line", ctypes.c_ulong ),
	( "end_pos", ctypes.c_ulong ),
	( "end_line", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( _xmlParserNodeInfoSeq, [
	( "maximum", ctypes.c_ulong ),
	( "length", ctypes.c_ulong ),
	( "buffer", ctypes.POINTER(_xmlParserNodeInfo) ),
])

__freeze_rpythonic_struct( _xmlSAXHandler, [
	( "internalSubset", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "isStandalone", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
	( "hasInternalSubset", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
	( "hasExternalSubset", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
	( "resolveEntity", ctypes.CFUNCTYPE(ctypes.POINTER(_xmlParserInput), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "getEntity", ctypes.CFUNCTYPE(ctypes.POINTER(_xmlEntity), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "entityDecl", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.c_int,ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "notationDecl", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "attributeDecl", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),ctypes.c_int,ctypes.c_int,ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(_xmlEnumeration),) ),
	( "elementDecl", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.c_int,ctypes.POINTER(_xmlElementContent),) ),
	( "unparsedEntityDecl", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "setDocumentLocator", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_xmlSAXLocator),) ),
	( "startDocument", ctypes.CFUNCTYPE(ctypes.c_void_p, ) ),
	( "endDocument", ctypes.CFUNCTYPE(ctypes.c_void_p, ) ),
	( "startElement", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)),) ),
	( "endElement", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "reference", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "characters", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.c_int,) ),
	( "ignorableWhitespace", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.c_int,) ),
	( "processingInstruction", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "comment", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "warning", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),) ),
	( "error", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),) ),
	( "fatalError", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),) ),
	( "getParameterEntity", ctypes.CFUNCTYPE(ctypes.POINTER(_xmlEntity), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "cdataBlock", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.c_int,) ),
	( "externalSubset", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "initialized", ctypes.c_uint ),
	( "_private", ctypes.POINTER(ctypes.c_void_p) ),
	( "startElementNs", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),ctypes.c_int,ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)),ctypes.c_int,ctypes.c_int,ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)),) ),
	( "endElementNs", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "serror", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_xmlError),) ),
])

__freeze_rpythonic_struct( _xmlParserCtxt, [
	( "sax", ctypes.POINTER(_xmlSAXHandler) ),
	( "userData", ctypes.POINTER(ctypes.c_void_p) ),
	( "myDoc", ctypes.POINTER(_xmlDoc) ),
	( "wellFormed", ctypes.c_int ),
	( "replaceEntities", ctypes.c_int ),
	( "version", ctypes.POINTER(ctypes.c_ubyte) ),
	( "encoding", ctypes.POINTER(ctypes.c_ubyte) ),
	( "standalone", ctypes.c_int ),
	( "html", ctypes.c_int ),
	( "input", ctypes.POINTER(_xmlParserInput) ),
	( "inputNr", ctypes.c_int ),
	( "inputMax", ctypes.c_int ),
	( "inputTab", ctypes.POINTER(ctypes.POINTER(_xmlParserInput)) ),
	( "node", ctypes.POINTER(_xmlNode) ),
	( "nodeNr", ctypes.c_int ),
	( "nodeMax", ctypes.c_int ),
	( "nodeTab", ctypes.POINTER(ctypes.POINTER(_xmlNode)) ),
	( "record_info", ctypes.c_int ),
	( "node_seq", _xmlParserNodeInfoSeq ),
	( "errNo", ctypes.c_int ),
	( "hasExternalSubset", ctypes.c_int ),
	( "hasPErefs", ctypes.c_int ),
	( "external", ctypes.c_int ),
	( "valid", ctypes.c_int ),
	( "validate", ctypes.c_int ),
	( "vctxt", _xmlValidCtxt ),
	( "instate", ctypes.c_int ),
	( "token", ctypes.c_int ),
	( "directory", ctypes.POINTER(ctypes.c_char) ),
	( "name", ctypes.POINTER(ctypes.c_ubyte) ),
	( "nameNr", ctypes.c_int ),
	( "nameMax", ctypes.c_int ),
	( "nameTab", ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)) ),
	( "nbChars", ctypes.c_long ),
	( "checkIndex", ctypes.c_long ),
	( "keepBlanks", ctypes.c_int ),
	( "disableSAX", ctypes.c_int ),
	( "inSubset", ctypes.c_int ),
	( "intSubName", ctypes.POINTER(ctypes.c_ubyte) ),
	( "extSubURI", ctypes.POINTER(ctypes.c_ubyte) ),
	( "extSubSystem", ctypes.POINTER(ctypes.c_ubyte) ),
	( "space", ctypes.POINTER(ctypes.c_int) ),
	( "spaceNr", ctypes.c_int ),
	( "spaceMax", ctypes.c_int ),
	( "spaceTab", ctypes.POINTER(ctypes.c_int) ),
	( "depth", ctypes.c_int ),
	( "entity", ctypes.POINTER(_xmlParserInput) ),
	( "charset", ctypes.c_int ),
	( "nodelen", ctypes.c_int ),
	( "nodemem", ctypes.c_int ),
	( "pedantic", ctypes.c_int ),
	( "_private", ctypes.POINTER(ctypes.c_void_p) ),
	( "loadsubset", ctypes.c_int ),
	( "linenumbers", ctypes.c_int ),
	( "catalogs", ctypes.POINTER(ctypes.c_void_p) ),
	( "recovery", ctypes.c_int ),
	( "progressive", ctypes.c_int ),
	( "C_dict", ctypes.POINTER(_xmlDict) ),
	( "atts", ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)) ),
	( "maxatts", ctypes.c_int ),
	( "docdict", ctypes.c_int ),
	( "str_xml", ctypes.POINTER(ctypes.c_ubyte) ),
	( "str_xmlns", ctypes.POINTER(ctypes.c_ubyte) ),
	( "str_xml_ns", ctypes.POINTER(ctypes.c_ubyte) ),
	( "sax2", ctypes.c_int ),
	( "nsNr", ctypes.c_int ),
	( "nsMax", ctypes.c_int ),
	( "nsTab", ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)) ),
	( "attallocs", ctypes.POINTER(ctypes.c_int) ),
	( "pushTab", ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)) ),
	( "attsDefault", ctypes.POINTER(_xmlHashTable) ),
	( "attsSpecial", ctypes.POINTER(_xmlHashTable) ),
	( "nsWellFormed", ctypes.c_int ),
	( "options", ctypes.c_int ),
	( "dictNames", ctypes.c_int ),
	( "freeElemsNr", ctypes.c_int ),
	( "freeElems", ctypes.POINTER(_xmlNode) ),
	( "freeAttrsNr", ctypes.c_int ),
	( "freeAttrs", ctypes.POINTER(_xmlAttr) ),
	( "lastError", _xmlError ),
	( "parseMode", ctypes.c_int ),
	( "nbentities", ctypes.c_ulong ),
	( "sizeentities", ctypes.c_ulong ),
	( "nodeInfo", ctypes.POINTER(_xmlParserNodeInfo) ),
	( "nodeInfoNr", ctypes.c_int ),
	( "nodeInfoMax", ctypes.c_int ),
	( "nodeInfoTab", ctypes.POINTER(_xmlParserNodeInfo) ),
])

__freeze_rpythonic_struct( _xmlSAXLocator, [
	( "getPublicId", ctypes.POINTER(ctypes.c_void_p) ),
	( "getSystemId", ctypes.POINTER(ctypes.c_void_p) ),
	( "getLineNumber", ctypes.c_void_p ),
	( "getColumnNumber", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _xmlSAXHandlerV1, [
	( "internalSubset", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "isStandalone", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
	( "hasInternalSubset", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
	( "hasExternalSubset", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
	( "resolveEntity", ctypes.CFUNCTYPE(ctypes.POINTER(_xmlParserInput), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "getEntity", ctypes.CFUNCTYPE(ctypes.POINTER(_xmlEntity), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "entityDecl", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.c_int,ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "notationDecl", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "attributeDecl", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),ctypes.c_int,ctypes.c_int,ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(_xmlEnumeration),) ),
	( "elementDecl", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.c_int,ctypes.POINTER(_xmlElementContent),) ),
	( "unparsedEntityDecl", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "setDocumentLocator", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_xmlSAXLocator),) ),
	( "startDocument", ctypes.CFUNCTYPE(ctypes.c_void_p, ) ),
	( "endDocument", ctypes.CFUNCTYPE(ctypes.c_void_p, ) ),
	( "startElement", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)),) ),
	( "endElement", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "reference", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "characters", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.c_int,) ),
	( "ignorableWhitespace", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.c_int,) ),
	( "processingInstruction", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "comment", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "warning", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),) ),
	( "error", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),) ),
	( "fatalError", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),) ),
	( "getParameterEntity", ctypes.CFUNCTYPE(ctypes.POINTER(_xmlEntity), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "cdataBlock", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.c_int,) ),
	( "externalSubset", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "initialized", ctypes.c_uint ),
])

__freeze_rpythonic_struct( __wait_terminated, [
	( "__w_termsig", ctypes.c_uint ),
	( "__w_coredump", ctypes.c_uint ),
	( "__w_retcode", ctypes.c_uint ),
	#opaque-warning# <rpythonic.rpythonic.SomeThing object at 0x90a8a10>
])

__freeze_rpythonic_struct( __wait_stopped, [
	( "__w_stopval", ctypes.c_uint ),
	( "__w_stopsig", ctypes.c_uint ),
	#opaque-warning# <rpythonic.rpythonic.SomeThing object at 0x90a8d10>
])

__freeze_rpythonic_struct( wait, [
	( "w_status", ctypes.c_int ),
	( "__wait_terminated", __wait_terminated ),
	( "__wait_stopped", __wait_stopped ),
])

__freeze_rpythonic_struct( __WAIT_STATUS, [
	( "__uptr", ctypes.POINTER(wait) ),
	( "__iptr", ctypes.POINTER(ctypes.c_int) ),
])

__freeze_rpythonic_struct( div_t, [
	( "quot", ctypes.c_int ),
	( "rem", ctypes.c_int ),
])

__freeze_rpythonic_struct( ldiv_t, [
	( "quot", ctypes.c_int64 ),
	( "rem", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( lldiv_t, [
	( "quot", ctypes.c_longlong ),
	( "rem", ctypes.c_longlong ),
])

__freeze_rpythonic_struct( timeval, [
	( "tv_sec", ctypes.c_int64 ),
	( "tv_usec", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( fd_set, [
	( "__fds_bits", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( random_data, [
	( "fptr", ctypes.POINTER(ctypes.c_int32) ),
	( "rptr", ctypes.POINTER(ctypes.c_int32) ),
	( "state", ctypes.POINTER(ctypes.c_int32) ),
	( "rand_type", ctypes.c_int ),
	( "rand_deg", ctypes.c_int ),
	( "rand_sep", ctypes.c_int ),
	( "end_ptr", ctypes.POINTER(ctypes.c_int32) ),
])

__freeze_rpythonic_struct( drand48_data, [
	( "__x", ( ctypes.c_uint16 * 3 ) ),
	( "__old_x", ( ctypes.c_uint16 * 3 ) ),
	( "__c", ctypes.c_uint16 ),
	( "__init", ctypes.c_uint16 ),
	( "__a", ctypes.c_ulonglong ),
])

__freeze_rpythonic_struct( _xlinkHandler, [
	( "simple", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_xmlNode),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "extended", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_xmlNode),ctypes.c_int,ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)),ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)),ctypes.c_int,ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)),ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)),ctypes.POINTER(ctypes.c_int),ctypes.POINTER(ctypes.c_int),ctypes.c_int,ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)),ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)),) ),
	( "set", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_xmlNode),ctypes.c_int,ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)),ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)),ctypes.c_int,ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)),ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)),) ),
])

__freeze_rpythonic_struct( _xmlGlobalState, [
	( "xmlParserVersion", ctypes.POINTER(ctypes.c_char) ),
	( "xmlDefaultSAXLocator", _xmlSAXLocator ),
	( "xmlDefaultSAXHandler", _xmlSAXHandlerV1 ),
	( "docbDefaultSAXHandler", _xmlSAXHandlerV1 ),
	( "htmlDefaultSAXHandler", _xmlSAXHandlerV1 ),
	( "xmlFree", ctypes.CFUNCTYPE(ctypes.c_void_p, ) ),
	( "xmlMalloc", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), ctypes.c_uint64,)) ),
	( "xmlMemStrdup", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_char),)) ),
	( "xmlRealloc", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), ctypes.POINTER(ctypes.c_void_p),ctypes.c_uint64,)) ),
	( "xmlGenericError", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),) ),
	( "xmlStructuredError", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_xmlError),) ),
	( "xmlGenericErrorContext", ctypes.POINTER(ctypes.c_void_p) ),
	( "oldXMLWDcompatibility", ctypes.c_int ),
	( "xmlBufferAllocScheme", ctypes.c_int ),
	( "xmlDefaultBufferSize", ctypes.c_int ),
	( "xmlSubstituteEntitiesDefaultValue", ctypes.c_int ),
	( "xmlDoValidityCheckingDefaultValue", ctypes.c_int ),
	( "xmlGetWarningsDefaultValue", ctypes.c_int ),
	( "xmlKeepBlanksDefaultValue", ctypes.c_int ),
	( "xmlLineNumbersDefaultValue", ctypes.c_int ),
	( "xmlLoadExtDtdDefaultValue", ctypes.c_int ),
	( "xmlParserDebugEntities", ctypes.c_int ),
	( "xmlPedanticParserDefaultValue", ctypes.c_int ),
	( "xmlSaveNoEmptyTags", ctypes.c_int ),
	( "xmlIndentTreeOutput", ctypes.c_int ),
	( "xmlTreeIndentString", ctypes.POINTER(ctypes.c_char) ),
	( "xmlRegisterNodeDefaultValue", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_xmlNode),) ),
	( "xmlDeregisterNodeDefaultValue", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_xmlNode),) ),
	( "xmlMallocAtomic", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), ctypes.c_uint64,)) ),
	( "xmlLastError", _xmlError ),
	( "xmlParserInputBufferCreateFilenameValue", ctypes.CFUNCTYPE(ctypes.POINTER(_xmlParserInputBuffer), ctypes.POINTER(ctypes.c_char),ctypes.c_int,) ),
	( "xmlOutputBufferCreateFilenameValue", ctypes.CFUNCTYPE(ctypes.POINTER(_xmlOutputBuffer), ctypes.POINTER(ctypes.c_char),ctypes.POINTER(_xmlCharEncodingHandler),ctypes.c_int,) ),
	( "xmlStructuredErrorContext", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _xmlMutex, [
])

__freeze_rpythonic_struct( _xmlRMutex, [
])

__freeze_rpythonic_struct( _xmlOutputBuffer, [
	( "context", ctypes.POINTER(ctypes.c_void_p) ),
	( "writecallback", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),ctypes.c_int,) ),
	( "closecallback", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
	( "encoder", ctypes.POINTER(_xmlCharEncodingHandler) ),
	( "buffer", ctypes.POINTER(_xmlBuffer) ),
	( "conv", ctypes.POINTER(_xmlBuffer) ),
	( "written", ctypes.c_int ),
	( "error", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GstObject, [
	( "C_object", _GObject ),
	( "refcount", ctypes.c_int ),
	( "lock", ctypes.POINTER(_GMutex) ),
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "name_prefix", ctypes.POINTER(ctypes.c_char) ),
	( "parent", ctypes.POINTER(_GstObject) ),
	( "flags", ctypes.c_uint ),
	( "_gst_reserved", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GstObjectClass, [
	( "parent_class", _GObjectClass ),
	( "path_string_separator", ctypes.POINTER(ctypes.c_char) ),
	( "signal_object", ctypes.POINTER(_GObject) ),
	( "lock", ctypes.POINTER(_GStaticRecMutex) ),
	( "parent_set", ctypes.c_void_p ),
	( "parent_unset", ctypes.c_void_p ),
	( "object_saved", ctypes.c_void_p ),
	( "deep_notify", ctypes.c_void_p ),
	( "save_thyself", ctypes.POINTER(ctypes.c_void_p) ),
	( "restore_thyself", ctypes.c_void_p ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( _GstMiniObject, [
	( "instance", _GTypeInstance ),
	( "refcount", ctypes.c_int ),
	( "flags", ctypes.c_uint ),
	( "_gst_reserved", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GstMiniObjectClass, [
	( "type_class", _GTypeClass ),
	( "copy", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_GstMiniObject), ctypes.POINTER(_GstMiniObject),)) ),
	( "finalize", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GstMiniObject),) ),
	( "_gst_reserved", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GstParamSpecMiniObject, [
	( "parent_instance", _GParamSpec ),
])

__freeze_rpythonic_struct( _GstClockPrivate, [
])

__freeze_rpythonic_struct( ABI, [
	( "priv", ctypes.POINTER(_GstClockPrivate) ),
	( "_gst_reserved", ( ctypes.c_ulong * 4 ) ),
])

__freeze_rpythonic_struct( _GstPadPrivate, [
])

__freeze_rpythonic_struct( ABI, [
	( "block_callback_called", ctypes.c_int ),
	( "priv", ctypes.POINTER(_GstPadPrivate) ),
])

__freeze_rpythonic_struct( _GstClock, [
	( "C_object", _GstObject ),
	( "slave_lock", ctypes.POINTER(_GMutex) ),
	( "internal_calibration", ctypes.c_ulong ),
	( "external_calibration", ctypes.c_ulong ),
	( "rate_numerator", ctypes.c_ulong ),
	( "rate_denominator", ctypes.c_ulong ),
	( "last_time", ctypes.c_ulong ),
	( "entries", ctypes.POINTER(_GList) ),
	( "entries_changed", ctypes.POINTER(_GCond) ),
	( "resolution", ctypes.c_ulong ),
	( "stats", ctypes.c_int ),
	( "master", ctypes.POINTER(_GstClock) ),
	( "filling", ctypes.c_int ),
	( "window_size", ctypes.c_int ),
	( "window_threshold", ctypes.c_int ),
	( "time_index", ctypes.c_int ),
	( "timeout", ctypes.c_ulong ),
	( "times", ctypes.POINTER(ctypes.c_ulong) ),
	( "clockid", ctypes.c_void_p ),
	( "ABI", ABI ),
])

__freeze_rpythonic_struct( _GstClockEntry, [
	( "refcount", ctypes.c_int ),
	( "clock", ctypes.POINTER(_GstClock) ),
	( "C_type", ctypes.c_int ),
	( "time", ctypes.c_ulong ),
	( "interval", ctypes.c_ulong ),
	( "status", ctypes.c_int ),
	( "func", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstClock),ctypes.c_ulong,ctypes.c_void_p,ctypes.POINTER(ctypes.c_void_p),) ),
	( "user_data", ctypes.POINTER(ctypes.c_void_p) ),
	( "destroy_data", ctypes.CFUNCTYPE(ctypes.c_void_p, ) ),
	( "unscheduled", ctypes.c_int ),
	( "woken_up", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GstClockClass, [
	( "parent_class", _GstObjectClass ),
	( "change_resolution", ctypes.c_void_p ),
	( "get_resolution", ctypes.c_void_p ),
	( "get_internal_time", ctypes.c_void_p ),
	( "wait", ctypes.c_void_p ),
	( "wait_async", ctypes.c_void_p ),
	( "unschedule", ctypes.c_void_p ),
	( "wait_jitter", ctypes.c_void_p ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 3 )) ),
])

__freeze_rpythonic_struct( _GstDateTime, [
])

__freeze_rpythonic_struct( _GstStructure, [
	( "C_type", ctypes.c_ulong ),
	( "name", ctypes.c_uint ),
	( "parent_refcount", ctypes.POINTER(ctypes.c_int) ),
	( "fields", ctypes.POINTER(_GArray) ),
	( "_gst_reserved", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GstCaps, [
	( "C_type", ctypes.c_ulong ),
	( "refcount", ctypes.c_int ),
	( "flags", ctypes.c_int ),
	( "structs", ctypes.POINTER(_GPtrArray) ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( _GstStaticCaps, [
	( "caps", _GstCaps ),
	( "string", ctypes.POINTER(ctypes.c_char) ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( _GstBuffer, [
	( "mini_object", _GstMiniObject ),
	( "data", ctypes.POINTER(ctypes.c_ubyte) ),
	( "size", ctypes.c_uint ),
	( "timestamp", ctypes.c_ulong ),
	( "duration", ctypes.c_ulong ),
	( "caps", ctypes.POINTER(_GstCaps) ),
	( "offset", ctypes.c_ulong ),
	( "offset_end", ctypes.c_ulong ),
	( "malloc_data", ctypes.POINTER(ctypes.c_ubyte) ),
	( "free_func", ctypes.CFUNCTYPE(ctypes.c_void_p, ) ),
	( "parent", ctypes.POINTER(_GstBuffer) ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 2 )) ),
])

__freeze_rpythonic_struct( _GstBufferClass, [
	( "mini_object_class", _GstMiniObjectClass ),
])

__freeze_rpythonic_struct( _GstBufferList, [
])

__freeze_rpythonic_struct( _GstBufferListClass, [
])

__freeze_rpythonic_struct( _GstBufferListIterator, [
])

__freeze_rpythonic_struct( _GstIterator, [
	( "next", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstIterator),ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)),) ),
	( "item", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstIterator),ctypes.POINTER(ctypes.c_void_p),) ),
	( "resync", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GstIterator),) ),
	( "free", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GstIterator),) ),
	( "pushed", ctypes.POINTER(_GstIterator) ),
	( "C_type", ctypes.c_ulong ),
	( "lock", ctypes.POINTER(_GMutex) ),
	( "cookie", ctypes.c_uint ),
	( "master_cookie", ctypes.POINTER(ctypes.c_uint) ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( _GstFormatDefinition, [
	( "value", ctypes.c_int ),
	( "nick", ctypes.POINTER(ctypes.c_char) ),
	( "description", ctypes.POINTER(ctypes.c_char) ),
	( "quark", ctypes.c_uint ),
])

__freeze_rpythonic_struct( abidata, [
	( "ABI", ABI ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 2 )) ),
])

__freeze_rpythonic_struct( _GstEvent, [
	( "mini_object", _GstMiniObject ),
	( "C_type", ctypes.c_int ),
	( "timestamp", ctypes.c_ulong ),
	( "src", ctypes.POINTER(_GstObject) ),
	( "structure", ctypes.POINTER(_GstStructure) ),
	( "abidata", abidata ),
])

__freeze_rpythonic_struct( _GstEventClass, [
	( "mini_object_class", _GstMiniObjectClass ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( _GstQueryTypeDefinition, [
	( "value", ctypes.c_int ),
	( "nick", ctypes.POINTER(ctypes.c_char) ),
	( "description", ctypes.POINTER(ctypes.c_char) ),
	( "quark", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GstQuery, [
	( "mini_object", _GstMiniObject ),
	( "C_type", ctypes.c_int ),
	( "structure", ctypes.POINTER(_GstStructure) ),
	( "_gst_reserved", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GstQueryClass, [
	( "mini_object_class", _GstMiniObjectClass ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( _GstTaskPool, [
	( "C_object", _GstObject ),
	( "pool", ctypes.POINTER(_GThreadPool) ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( _GstTaskPoolClass, [
	( "parent_class", _GstObjectClass ),
	( "prepare", ctypes.c_void_p ),
	( "cleanup", ctypes.c_void_p ),
	( "push", ctypes.POINTER(ctypes.c_void_p) ),
	( "join", ctypes.c_void_p ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( _GstTaskPrivate, [
])

__freeze_rpythonic_struct( GstTaskThreadCallbacks, [
	( "enter_thread", ctypes.c_void_p ),
	( "leave_thread", ctypes.c_void_p ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( _GstTask, [
	( "C_object", _GstObject ),
	( "state", ctypes.c_int ),
	( "cond", ctypes.POINTER(_GCond) ),
	( "lock", ctypes.POINTER(_GStaticRecMutex) ),
	( "func", ctypes.CFUNCTYPE(ctypes.c_void_p, ) ),
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
	( "running", ctypes.c_int ),
	( "abidata", abidata ),
	( "priv", ctypes.POINTER(_GstTaskPrivate) ),
])

__freeze_rpythonic_struct( _GstTaskClass, [
	( "parent_class", _GstObjectClass ),
	( "pool", ctypes.POINTER(_GstTaskPool) ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( _GstPadTemplate, [
	( "C_object", _GstObject ),
	( "name_template", ctypes.POINTER(ctypes.c_char) ),
	( "direction", ctypes.c_int ),
	( "presence", ctypes.c_int ),
	( "caps", ctypes.POINTER(_GstCaps) ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( _GstPad, [
	( "C_object", _GstObject ),
	( "element_private", ctypes.POINTER(ctypes.c_void_p) ),
	( "padtemplate", ctypes.POINTER(_GstPadTemplate) ),
	( "direction", ctypes.c_int ),
	( "stream_rec_lock", ctypes.POINTER(_GStaticRecMutex) ),
	( "task", ctypes.POINTER(_GstTask) ),
	( "preroll_lock", ctypes.POINTER(_GMutex) ),
	( "preroll_cond", ctypes.POINTER(_GCond) ),
	( "block_cond", ctypes.POINTER(_GCond) ),
	( "block_callback", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GstPad),ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),) ),
	( "block_data", ctypes.POINTER(ctypes.c_void_p) ),
	( "caps", ctypes.POINTER(_GstCaps) ),
	( "getcapsfunc", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_GstCaps), ctypes.POINTER(_GstPad),)) ),
	( "setcapsfunc", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstPad),ctypes.POINTER(_GstCaps),) ),
	( "acceptcapsfunc", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstPad),ctypes.POINTER(_GstCaps),) ),
	( "fixatecapsfunc", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GstPad),ctypes.POINTER(_GstCaps),) ),
	( "activatefunc", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstPad),) ),
	( "activatepushfunc", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstPad),ctypes.c_int,) ),
	( "activatepullfunc", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstPad),ctypes.c_int,) ),
	( "linkfunc", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstPad),ctypes.POINTER(_GstPad),) ),
	( "unlinkfunc", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GstPad),) ),
	( "peer", ctypes.POINTER(_GstPad) ),
	( "sched_private", ctypes.POINTER(ctypes.c_void_p) ),
	( "chainfunc", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstPad),ctypes.POINTER(_GstBuffer),) ),
	( "checkgetrangefunc", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstPad),) ),
	( "getrangefunc", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstPad),ctypes.c_ulong,ctypes.c_uint,ctypes.POINTER(ctypes.POINTER(_GstBuffer)),) ),
	( "eventfunc", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstPad),ctypes.POINTER(_GstEvent),) ),
	( "mode", ctypes.c_int ),
	( "querytypefunc", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_int), ctypes.POINTER(_GstPad),)) ),
	( "queryfunc", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstPad),ctypes.POINTER(_GstQuery),) ),
	( "intlinkfunc", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_GList), ctypes.POINTER(_GstPad),)) ),
	( "bufferallocfunc", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstPad),ctypes.c_ulong,ctypes.c_uint,ctypes.POINTER(_GstCaps),ctypes.POINTER(ctypes.POINTER(_GstBuffer)),) ),
	( "do_buffer_signals", ctypes.c_int ),
	( "do_event_signals", ctypes.c_int ),
	( "iterintlinkfunc", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_GstIterator), ctypes.POINTER(_GstPad),)) ),
	( "block_destroy_data", ctypes.CFUNCTYPE(ctypes.c_void_p, ) ),
	( "abidata", abidata ),
])

__freeze_rpythonic_struct( _GstPadClass, [
	( "parent_class", _GstObjectClass ),
	( "linked", ctypes.c_void_p ),
	( "unlinked", ctypes.c_void_p ),
	( "request_link", ctypes.c_void_p ),
	( "have_data", ctypes.c_void_p ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( _GstPadTemplateClass, [
	( "parent_class", _GstObjectClass ),
	( "pad_created", ctypes.c_void_p ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( _GstStaticPadTemplate, [
	( "name_template", ctypes.POINTER(ctypes.c_char) ),
	( "direction", ctypes.c_int ),
	( "presence", ctypes.c_int ),
	( "static_caps", _GstStaticCaps ),
])

__freeze_rpythonic_struct( _GstBusPrivate, [
])

__freeze_rpythonic_struct( _GstMessage, [
	( "mini_object", _GstMiniObject ),
	( "lock", ctypes.POINTER(_GMutex) ),
	( "cond", ctypes.POINTER(_GCond) ),
	( "C_type", ctypes.c_int ),
	( "timestamp", ctypes.c_ulong ),
	( "src", ctypes.POINTER(_GstObject) ),
	( "structure", ctypes.POINTER(_GstStructure) ),
	( "abidata", abidata ),
])

__freeze_rpythonic_struct( _GstMessageClass, [
	( "mini_object_class", _GstMiniObjectClass ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( _GstBus, [
	( "C_object", _GstObject ),
	( "queue", ctypes.POINTER(_GQueue) ),
	( "queue_lock", ctypes.POINTER(_GMutex) ),
	( "sync_handler", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstBus),ctypes.POINTER(_GstMessage),ctypes.POINTER(ctypes.c_void_p),) ),
	( "sync_handler_data", ctypes.POINTER(ctypes.c_void_p) ),
	( "signal_watch_id", ctypes.c_uint ),
	( "num_signal_watchers", ctypes.c_uint ),
	( "priv", ctypes.POINTER(_GstBusPrivate) ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 3 )) ),
])

__freeze_rpythonic_struct( _GstBusClass, [
	( "parent_class", _GstObjectClass ),
	( "message", ctypes.c_void_p ),
	( "sync_message", ctypes.c_void_p ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( stat, [
	( "st_dev", ctypes.c_uint64 ),
	( "st_ino", ctypes.c_uint64 ),
	( "st_nlink", ctypes.c_uint64 ),
	( "st_mode", ctypes.c_uint ),
	( "st_uid", ctypes.c_uint ),
	( "st_gid", ctypes.c_uint ),
	( "__pad0", ctypes.c_int ),
	( "st_rdev", ctypes.c_uint64 ),
	( "st_size", ctypes.c_int64 ),
	( "st_blksize", ctypes.c_int64 ),
	( "st_blocks", ctypes.c_int64 ),
	( "st_atim", timespec ),
	( "st_mtim", timespec ),
	( "st_ctim", timespec ),
	( "__unused", ( ctypes.c_int64 * 3 ) ),
])

__freeze_rpythonic_struct( _GModule, [
])

__freeze_rpythonic_struct( _GstPluginPrivate, [
])

__freeze_rpythonic_struct( _GstPluginDesc, [
	( "major_version", ctypes.c_int ),
	( "minor_version", ctypes.c_int ),
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "description", ctypes.POINTER(ctypes.c_char) ),
	( "plugin_init", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstPlugin),) ),
	( "version", ctypes.POINTER(ctypes.c_char) ),
	( "license", ctypes.POINTER(ctypes.c_char) ),
	( "source", ctypes.POINTER(ctypes.c_char) ),
	( "package", ctypes.POINTER(ctypes.c_char) ),
	( "origin", ctypes.POINTER(ctypes.c_char) ),
	( "release_datetime", ctypes.POINTER(ctypes.c_char) ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 3 )) ),
])

__freeze_rpythonic_struct( _GstPlugin, [
	( "C_object", _GstObject ),
	( "desc", _GstPluginDesc ),
	( "orig_desc", ctypes.POINTER(_GstPluginDesc) ),
	( "flags", ctypes.c_uint ),
	( "filename", ctypes.POINTER(ctypes.c_char) ),
	( "basename", ctypes.POINTER(ctypes.c_char) ),
	( "module", ctypes.POINTER(_GModule) ),
	( "file_size", ctypes.c_int64 ),
	( "file_mtime", ctypes.c_int64 ),
	( "registered", ctypes.c_int ),
	( "priv", ctypes.POINTER(_GstPluginPrivate) ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 3 )) ),
])

__freeze_rpythonic_struct( _GstPluginClass, [
	( "object_class", _GstObjectClass ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( _GstPluginFeature, [
	( "C_object", _GstObject ),
	( "loaded", ctypes.c_int ),
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "rank", ctypes.c_uint ),
	( "plugin_name", ctypes.POINTER(ctypes.c_char) ),
	( "plugin", ctypes.POINTER(_GstPlugin) ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 3 )) ),
])

__freeze_rpythonic_struct( _GstPluginFeatureClass, [
	( "parent_class", _GstObjectClass ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( GstTypeNameData, [
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "C_type", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( _GstElementDetails, [
	( "longname", ctypes.POINTER(ctypes.c_char) ),
	( "klass", ctypes.POINTER(ctypes.c_char) ),
	( "description", ctypes.POINTER(ctypes.c_char) ),
	( "author", ctypes.POINTER(ctypes.c_char) ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( _GstElementFactory, [
	( "parent", _GstPluginFeature ),
	( "C_type", ctypes.c_ulong ),
	( "details", _GstElementDetails ),
	( "staticpadtemplates", ctypes.POINTER(_GList) ),
	( "numpadtemplates", ctypes.c_uint ),
	( "uri_type", ctypes.c_uint ),
	( "uri_protocols", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)) ),
	( "interfaces", ctypes.POINTER(_GList) ),
	( "meta_data", ctypes.POINTER(ctypes.c_void_p) ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 3 )) ),
])

__freeze_rpythonic_struct( _GstElementFactoryClass, [
	( "parent_class", _GstPluginFeatureClass ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( _GstIndexEntry, [
	( "C_type", ctypes.c_int ),
	( "C_id", ctypes.c_int ),
	( "data", data ),
])

__freeze_rpythonic_struct( _GstIndexGroup, [
	( "groupnum", ctypes.c_int ),
	( "entries", ctypes.POINTER(_GList) ),
	( "certainty", ctypes.c_int ),
	( "peergroup", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GstIndex, [
	( "C_object", _GstObject ),
	( "groups", ctypes.POINTER(_GList) ),
	( "curgroup", ctypes.POINTER(_GstIndexGroup) ),
	( "maxgroup", ctypes.c_int ),
	( "method", ctypes.c_int ),
	( "resolver", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstIndex),ctypes.POINTER(_GstObject),ctypes.POINTER(ctypes.POINTER(ctypes.c_char)),ctypes.POINTER(ctypes.c_void_p),) ),
	( "resolver_user_data", ctypes.POINTER(ctypes.c_void_p) ),
	( "filter", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstIndex),ctypes.POINTER(_GstIndexEntry),ctypes.POINTER(ctypes.c_void_p),) ),
	( "filter_user_data", ctypes.POINTER(ctypes.c_void_p) ),
	( "filter_user_data_destroy", ctypes.CFUNCTYPE(ctypes.c_void_p, ) ),
	( "writers", ctypes.POINTER(_GHashTable) ),
	( "last_id", ctypes.c_int ),
	( "resolver_user_data_destroy", ctypes.CFUNCTYPE(ctypes.c_void_p, ) ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 3 )) ),
])

__freeze_rpythonic_struct( _GstIndexClass, [
	( "parent_class", _GstObjectClass ),
	( "get_writer_id", ctypes.c_void_p ),
	( "commit", ctypes.c_void_p ),
	( "add_entry", ctypes.c_void_p ),
	( "get_assoc_entry", ctypes.POINTER(ctypes.c_void_p) ),
	( "entry_added", ctypes.c_void_p ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( _GstIndexFactory, [
	( "feature", _GstPluginFeature ),
	( "longdesc", ctypes.POINTER(ctypes.c_char) ),
	( "C_type", ctypes.c_ulong ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( _GstIndexFactoryClass, [
	( "parent", _GstPluginFeatureClass ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( _GstElement, [
	( "C_object", _GstObject ),
	( "state_lock", ctypes.POINTER(_GStaticRecMutex) ),
	( "state_cond", ctypes.POINTER(_GCond) ),
	( "state_cookie", ctypes.c_uint ),
	( "current_state", ctypes.c_int ),
	( "next_state", ctypes.c_int ),
	( "pending_state", ctypes.c_int ),
	( "last_return", ctypes.c_int ),
	( "bus", ctypes.POINTER(_GstBus) ),
	( "clock", ctypes.POINTER(_GstClock) ),
	( "base_time", ctypes.c_long ),
	( "numpads", ctypes.c_ushort ),
	( "pads", ctypes.POINTER(_GList) ),
	( "numsrcpads", ctypes.c_ushort ),
	( "srcpads", ctypes.POINTER(_GList) ),
	( "numsinkpads", ctypes.c_ushort ),
	( "sinkpads", ctypes.POINTER(_GList) ),
	( "pads_cookie", ctypes.c_uint ),
	( "abidata", abidata ),
])

__freeze_rpythonic_struct( _GstElementClass, [
	( "parent_class", _GstObjectClass ),
	( "details", _GstElementDetails ),
	( "elementfactory", ctypes.POINTER(_GstElementFactory) ),
	( "padtemplates", ctypes.POINTER(_GList) ),
	( "numpadtemplates", ctypes.c_int ),
	( "pad_templ_cookie", ctypes.c_uint ),
	( "pad_added", ctypes.c_void_p ),
	( "pad_removed", ctypes.c_void_p ),
	( "no_more_pads", ctypes.c_void_p ),
	( "request_new_pad", ctypes.POINTER(ctypes.c_void_p) ),
	( "release_pad", ctypes.c_void_p ),
	( "get_state", ctypes.c_void_p ),
	( "set_state", ctypes.c_void_p ),
	( "change_state", ctypes.c_void_p ),
	( "set_bus", ctypes.c_void_p ),
	( "provide_clock", ctypes.POINTER(ctypes.c_void_p) ),
	( "set_clock", ctypes.c_void_p ),
	( "get_index", ctypes.POINTER(ctypes.c_void_p) ),
	( "set_index", ctypes.c_void_p ),
	( "send_event", ctypes.c_void_p ),
	( "get_query_types", ctypes.POINTER(ctypes.c_void_p) ),
	( "query", ctypes.c_void_p ),
	( "meta_data", ctypes.POINTER(ctypes.c_void_p) ),
	( "request_new_pad_full", ctypes.POINTER(ctypes.c_void_p) ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 2 )) ),
])

__freeze_rpythonic_struct( _GstBinPrivate, [
])

__freeze_rpythonic_struct( _GstBin, [
	( "element", _GstElement ),
	( "numchildren", ctypes.c_int ),
	( "children", ctypes.POINTER(_GList) ),
	( "children_cookie", ctypes.c_uint ),
	( "child_bus", ctypes.POINTER(_GstBus) ),
	( "messages", ctypes.POINTER(_GList) ),
	( "polling", ctypes.c_int ),
	( "state_dirty", ctypes.c_int ),
	( "clock_dirty", ctypes.c_int ),
	( "provided_clock", ctypes.POINTER(_GstClock) ),
	( "clock_provider", ctypes.POINTER(_GstElement) ),
	( "priv", ctypes.POINTER(_GstBinPrivate) ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 3 )) ),
])

__freeze_rpythonic_struct( _GstBinClass, [
	( "parent_class", _GstElementClass ),
	( "pool", ctypes.POINTER(_GThreadPool) ),
	( "element_added", ctypes.c_void_p ),
	( "element_removed", ctypes.c_void_p ),
	( "add_element", ctypes.c_void_p ),
	( "remove_element", ctypes.c_void_p ),
	( "handle_message", ctypes.c_void_p ),
	( "do_latency", ctypes.c_void_p ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 3 )) ),
])

__freeze_rpythonic_struct( _GstChildProxy, [
])

__freeze_rpythonic_struct( _GstChildProxyInterface, [
	( "parent", _GTypeInterface ),
	( "get_child_by_index", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_children_count", ctypes.c_void_p ),
	( "child_added", ctypes.c_void_p ),
	( "child_removed", ctypes.c_void_p ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( _GstProxyPadPrivate, [
])

__freeze_rpythonic_struct( _GstProxyPad, [
	( "pad", _GstPad ),
	( "priv", ctypes.POINTER(_GstProxyPadPrivate) ),
])

__freeze_rpythonic_struct( _GstProxyPadClass, [
	( "parent_class", _GstPadClass ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 1 )) ),
])

__freeze_rpythonic_struct( _GstGhostPadPrivate, [
])

__freeze_rpythonic_struct( _GstGhostPad, [
	( "pad", _GstProxyPad ),
	( "priv", ctypes.POINTER(_GstGhostPadPrivate) ),
])

__freeze_rpythonic_struct( _GstGhostPadClass, [
	( "parent_class", _GstProxyPadClass ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( _GstDebugCategory, [
	( "threshold", ctypes.c_int ),
	( "color", ctypes.c_uint ),
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "description", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( _GstDebugMessage, [
])

__freeze_rpythonic_struct( _GstImplementsInterface, [
])

__freeze_rpythonic_struct( _GstImplementsInterfaceClass, [
	( "parent", _GTypeInterface ),
	( "supported", ctypes.c_void_p ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( _GstValueTable, [
	( "C_type", ctypes.c_ulong ),
	( "compare", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GValue),ctypes.POINTER(_GValue),) ),
	( "serialize", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_char), ctypes.POINTER(_GValue),)) ),
	( "deserialize", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GValue),ctypes.POINTER(ctypes.c_char),) ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( _GstParamSpecFraction, [
	( "parent_instance", _GParamSpec ),
	( "min_num", ctypes.c_int ),
	( "min_den", ctypes.c_int ),
	( "max_num", ctypes.c_int ),
	( "max_den", ctypes.c_int ),
	( "def_num", ctypes.c_int ),
	( "def_den", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GstPipelinePrivate, [
])

__freeze_rpythonic_struct( _GstPipeline, [
	( "bin", _GstBin ),
	( "fixed_clock", ctypes.POINTER(_GstClock) ),
	( "stream_time", ctypes.c_ulong ),
	( "delay", ctypes.c_ulong ),
	( "priv", ctypes.POINTER(_GstPipelinePrivate) ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 3 )) ),
])

__freeze_rpythonic_struct( _GstPipelineClass, [
	( "parent_class", _GstBinClass ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( _GstPoll, [
])

__freeze_rpythonic_struct( GstPollFD, [
	( "fd", ctypes.c_int ),
	( "idx", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GstPreset, [
])

__freeze_rpythonic_struct( _GstPresetInterface, [
	( "parent", _GTypeInterface ),
	( "get_preset_names", ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)) ),
	( "get_property_names", ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)) ),
	( "load_preset", ctypes.c_void_p ),
	( "save_preset", ctypes.c_void_p ),
	( "rename_preset", ctypes.c_void_p ),
	( "delete_preset", ctypes.c_void_p ),
	( "set_meta", ctypes.c_void_p ),
	( "get_meta", ctypes.c_void_p ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( _GstRegistryPrivate, [
])

__freeze_rpythonic_struct( _GstRegistry, [
	( "C_object", _GstObject ),
	( "plugins", ctypes.POINTER(_GList) ),
	( "features", ctypes.POINTER(_GList) ),
	( "paths", ctypes.POINTER(_GList) ),
	( "cache_file", ctypes.c_int ),
	( "feature_hash", ctypes.POINTER(_GHashTable) ),
	( "basename_hash", ctypes.POINTER(_GHashTable) ),
	( "priv", ctypes.POINTER(_GstRegistryPrivate) ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 1 )) ),
])

__freeze_rpythonic_struct( _GstRegistryClass, [
	( "parent_class", _GstObjectClass ),
	( "plugin_added", ctypes.c_void_p ),
	( "feature_added", ctypes.c_void_p ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( _GstSegment, [
	( "rate", ctypes.c_double ),
	( "abs_rate", ctypes.c_double ),
	( "format", ctypes.c_int ),
	( "flags", ctypes.c_int ),
	( "start", ctypes.c_long ),
	( "stop", ctypes.c_long ),
	( "time", ctypes.c_long ),
	( "accum", ctypes.c_long ),
	( "last_stop", ctypes.c_long ),
	( "duration", ctypes.c_long ),
	( "applied_rate", ctypes.c_double ),
	( "_gst_reserved", ctypes.c_ubyte ),
])

__freeze_rpythonic_struct( _GstSystemClockPrivate, [
])

__freeze_rpythonic_struct( _GstSystemClock, [
	( "clock", _GstClock ),
	( "thread", ctypes.POINTER(_GThread) ),
	( "stopping", ctypes.c_int ),
	( "priv", ctypes.POINTER(_GstSystemClockPrivate) ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 3 )) ),
])

__freeze_rpythonic_struct( _GstSystemClockClass, [
	( "parent_class", _GstClockClass ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( _GstTagSetter, [
])

__freeze_rpythonic_struct( _GstTagSetterIFace, [
	( "g_iface", _GTypeInterface ),
])

__freeze_rpythonic_struct( _GstAllocTrace, [
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "flags", ctypes.c_int ),
	( "live", ctypes.c_int ),
	( "mem_live", ctypes.POINTER(_GSList) ),
])

__freeze_rpythonic_struct( _GstTraceEntry, [
	( "timestamp", ctypes.c_long ),
	( "sequence", ctypes.c_uint ),
	( "data", ctypes.c_uint ),
	( "message", ( ctypes.c_char * 112 ) ),
])

__freeze_rpythonic_struct( _GstTrace, [
	( "filename", ctypes.POINTER(ctypes.c_char) ),
	( "fd", ctypes.c_int ),
	( "buf", ctypes.POINTER(_GstTraceEntry) ),
	( "bufsize", ctypes.c_int ),
	( "bufoffset", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GstTypeFind, [
	( "peek", ctypes.POINTER(ctypes.c_void_p) ),
	( "suggest", ctypes.c_void_p ),
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_length", ctypes.c_void_p ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( _GstTypeFindFactory, [
	( "feature", _GstPluginFeature ),
	( "function", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GstTypeFind),ctypes.POINTER(ctypes.c_void_p),) ),
	( "extensions", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)) ),
	( "caps", ctypes.POINTER(_GstCaps) ),
	( "user_data", ctypes.POINTER(ctypes.c_void_p) ),
	( "user_data_notify", ctypes.CFUNCTYPE(ctypes.c_void_p, ) ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( _GstTypeFindFactoryClass, [
	( "parent", _GstPluginFeatureClass ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( _GstURIHandler, [
])

__freeze_rpythonic_struct( _GstURIHandlerInterface, [
	( "parent", _GTypeInterface ),
	( "new_uri", ctypes.c_void_p ),
	( "get_type", ctypes.c_void_p ),
	( "get_protocols", ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)) ),
	( "get_uri", ctypes.POINTER(ctypes.c_void_p) ),
	( "set_uri", ctypes.c_void_p ),
	( "get_type_full", ctypes.c_void_p ),
	( "get_protocols_full", ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)) ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 2 )) ),
])

__freeze_rpythonic_struct( _GstParseContext, [
])

__freeze_rpythonic_struct( _GstXML, [
	( "C_object", _GstObject ),
	( "topelements", ctypes.POINTER(_GList) ),
	( "ns", ctypes.POINTER(_xmlNs) ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( _GstXMLClass, [
	( "parent_class", _GstObjectClass ),
	( "object_loaded", ctypes.c_void_p ),
	( "object_saved", ctypes.c_void_p ),
	( "_gst_reserved", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

## wrapper functions ##
clock = _rpythonic_function_(		"clock", ctypes.c_int64, [] )

time = _rpythonic_function_(		"time", ctypes.c_int64, [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),] )

difftime = _rpythonic_function_(		"difftime", ctypes.c_double, [
	("__time1",		ctypes.c_int64),
	("__time0",		ctypes.c_int64),] )

mktime = _rpythonic_function_(		"mktime", ctypes.c_int64, [
	("__tp",		ctypes.POINTER(tm)),] )

strftime = _rpythonic_function_(		"strftime", ctypes.c_uint64, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__maxsize",		ctypes.c_uint64),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__tp",		ctypes.POINTER(tm)),] )

strftime_l = _rpythonic_function_(		"strftime_l", ctypes.c_uint64, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__maxsize",		ctypes.c_uint64),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__tp",		ctypes.POINTER(tm)),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

gmtime = _rpythonic_function_(		"gmtime", ctypes.POINTER(tm), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),] )

localtime = _rpythonic_function_(		"localtime", ctypes.POINTER(tm), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),] )

gmtime_r = _rpythonic_function_(		"gmtime_r", ctypes.POINTER(tm), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),
	("__tp",		ctypes.POINTER(tm)),] )

localtime_r = _rpythonic_function_(		"localtime_r", ctypes.POINTER(tm), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),
	("__tp",		ctypes.POINTER(tm)),] )

asctime = _rpythonic_function_(		"asctime", ctypes.POINTER(ctypes.c_char), [
	("__tp",		ctypes.POINTER(tm)),] )

ctime = _rpythonic_function_(		"ctime", ctypes.POINTER(ctypes.c_char), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),] )

asctime_r = _rpythonic_function_(		"asctime_r", ctypes.POINTER(ctypes.c_char), [
	("__tp",		ctypes.POINTER(tm)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

ctime_r = _rpythonic_function_(		"ctime_r", ctypes.POINTER(ctypes.c_char), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

tzset = _rpythonic_function_(		"tzset", ctypes.c_void_p, [] )

stime = _rpythonic_function_(		"stime", ctypes.c_int, [
	("__when",		ctypes.POINTER(ctypes.c_int64)),] )

timegm = _rpythonic_function_(		"timegm", ctypes.c_int64, [
	("__tp",		ctypes.POINTER(tm)),] )

timelocal = _rpythonic_function_(		"timelocal", ctypes.c_int64, [
	("__tp",		ctypes.POINTER(tm)),] )

dysize = _rpythonic_function_(		"dysize", ctypes.c_int, [
	("__year",		ctypes.c_int),] )

nanosleep = _rpythonic_function_(		"nanosleep", ctypes.c_int, [
	("__requested_time",		ctypes.POINTER(timespec)),
	("__remaining",		ctypes.POINTER(timespec)),] )

clock_getres = _rpythonic_function_(		"clock_getres", ctypes.c_int, [
	("__clock_id",		ctypes.c_int),
	("__res",		ctypes.POINTER(timespec)),] )

clock_gettime = _rpythonic_function_(		"clock_gettime", ctypes.c_int, [
	("__clock_id",		ctypes.c_int),
	("__tp",		ctypes.POINTER(timespec)),] )

clock_settime = _rpythonic_function_(		"clock_settime", ctypes.c_int, [
	("__clock_id",		ctypes.c_int),
	("__tp",		ctypes.POINTER(timespec)),] )

clock_nanosleep = _rpythonic_function_(		"clock_nanosleep", ctypes.c_int, [
	("__clock_id",		ctypes.c_int),
	("__flags",		ctypes.c_int),
	("__req",		ctypes.POINTER(timespec)),
	("__rem",		ctypes.POINTER(timespec)),] )

clock_getcpuclockid = _rpythonic_function_(		"clock_getcpuclockid", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__clock_id",		ctypes.POINTER(ctypes.c_int)),] )

timer_create = _rpythonic_function_(		"timer_create", ctypes.c_int, [
	("__clock_id",		ctypes.c_int),
	("__evp",		ctypes.POINTER(sigevent)),
	("__timerid",		ctypes.POINTER(ctypes.c_void_p)),] )

timer_delete = _rpythonic_function_(		"timer_delete", ctypes.c_int, [("__timerid",		ctypes.c_void_p)] )

timer_settime = _rpythonic_function_(		"timer_settime", ctypes.c_int, [
	("__timerid",		ctypes.c_void_p),
	("__flags",		ctypes.c_int),
	("__value",		ctypes.POINTER(itimerspec)),
	("__ovalue",		ctypes.POINTER(itimerspec)),] )

timer_gettime = _rpythonic_function_(		"timer_gettime", ctypes.c_int, [
	("__timerid",		ctypes.c_void_p),
	("__value",		ctypes.POINTER(itimerspec)),] )

timer_getoverrun = _rpythonic_function_(		"timer_getoverrun", ctypes.c_int, [("__timerid",		ctypes.c_void_p)] )

GCompareFunc = _rpythonic_function_(		"GCompareFunc", ctypes.c_int, [
	("a",		ctypes.POINTER(ctypes.c_void_p)),
	("b",		ctypes.POINTER(ctypes.c_void_p)),] )

GCompareDataFunc = _rpythonic_function_(		"GCompareDataFunc", ctypes.c_int, [
	("a",		ctypes.POINTER(ctypes.c_void_p)),
	("b",		ctypes.POINTER(ctypes.c_void_p)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GEqualFunc = _rpythonic_function_(		"GEqualFunc", ctypes.c_int, [
	("a",		ctypes.POINTER(ctypes.c_void_p)),
	("b",		ctypes.POINTER(ctypes.c_void_p)),] )

GDestroyNotify = _rpythonic_function_(		"GDestroyNotify", ctypes.c_void_p, [("data",		ctypes.c_void_p)] )

GFunc = _rpythonic_function_(		"GFunc", ctypes.c_void_p, [
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GHashFunc = _rpythonic_function_(		"GHashFunc", ctypes.c_uint, [("key",		ctypes.c_void_p)] )

GHFunc = _rpythonic_function_(		"GHFunc", ctypes.c_void_p, [
	("key",		ctypes.POINTER(ctypes.c_void_p)),
	("value",		ctypes.POINTER(ctypes.c_void_p)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GFreeFunc = _rpythonic_function_(		"GFreeFunc", ctypes.c_void_p, [("data",		ctypes.c_void_p)] )

GTranslateFunc = _rpythonic_function_(		"GTranslateFunc", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_array_new = _rpythonic_function_(		"g_array_new", ctypes.POINTER(_GArray), [
	("zero_terminated",		ctypes.c_int),
	("clear_",		ctypes.c_int),
	("element_size",		ctypes.c_uint),] )

g_array_sized_new = _rpythonic_function_(		"g_array_sized_new", ctypes.POINTER(_GArray), [
	("zero_terminated",		ctypes.c_int),
	("clear_",		ctypes.c_int),
	("element_size",		ctypes.c_uint),
	("reserved_size",		ctypes.c_uint),] )

g_array_free = _rpythonic_function_(		"g_array_free", ctypes.POINTER(ctypes.c_char), [
	("array",		ctypes.POINTER(_GArray)),
	("free_segment",		ctypes.c_int),] )

g_array_ref = _rpythonic_function_(		"g_array_ref", ctypes.POINTER(_GArray), [
	("array",		ctypes.POINTER(_GArray)),] )

g_array_unref = _rpythonic_function_(		"g_array_unref", ctypes.c_void_p, [
	("array",		ctypes.POINTER(_GArray)),] )

g_array_get_element_size = _rpythonic_function_(		"g_array_get_element_size", ctypes.c_uint, [
	("array",		ctypes.POINTER(_GArray)),] )

g_array_append_vals = _rpythonic_function_(		"g_array_append_vals", ctypes.POINTER(_GArray), [
	("array",		ctypes.POINTER(_GArray)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("C_len",		ctypes.c_uint),] )

g_array_prepend_vals = _rpythonic_function_(		"g_array_prepend_vals", ctypes.POINTER(_GArray), [
	("array",		ctypes.POINTER(_GArray)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("C_len",		ctypes.c_uint),] )

g_array_insert_vals = _rpythonic_function_(		"g_array_insert_vals", ctypes.POINTER(_GArray), [
	("array",		ctypes.POINTER(_GArray)),
	("index_",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("C_len",		ctypes.c_uint),] )

g_array_set_size = _rpythonic_function_(		"g_array_set_size", ctypes.POINTER(_GArray), [
	("array",		ctypes.POINTER(_GArray)),
	("length",		ctypes.c_uint),] )

g_array_remove_index = _rpythonic_function_(		"g_array_remove_index", ctypes.POINTER(_GArray), [
	("array",		ctypes.POINTER(_GArray)),
	("index_",		ctypes.c_uint),] )

g_array_remove_index_fast = _rpythonic_function_(		"g_array_remove_index_fast", ctypes.POINTER(_GArray), [
	("array",		ctypes.POINTER(_GArray)),
	("index_",		ctypes.c_uint),] )

g_array_remove_range = _rpythonic_function_(		"g_array_remove_range", ctypes.POINTER(_GArray), [
	("array",		ctypes.POINTER(_GArray)),
	("index_",		ctypes.c_uint),
	("length",		ctypes.c_uint),] )

g_array_sort = _rpythonic_function_(		"g_array_sort", ctypes.c_void_p, [
	("array",		ctypes.POINTER(_GArray)),
	("compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_array_sort_with_data = _rpythonic_function_(		"g_array_sort_with_data", ctypes.c_void_p, [
	("array",		ctypes.POINTER(_GArray)),
	("compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_ptr_array_new = _rpythonic_function_(		"g_ptr_array_new", ctypes.POINTER(_GPtrArray), [] )

g_ptr_array_new_with_free_func = _rpythonic_function_(		"g_ptr_array_new_with_free_func", ctypes.POINTER(_GPtrArray), [
	("element_free_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_ptr_array_sized_new = _rpythonic_function_(		"g_ptr_array_sized_new", ctypes.POINTER(_GPtrArray), [
	("reserved_size",		ctypes.c_uint),] )

g_ptr_array_new_full = _rpythonic_function_(		"g_ptr_array_new_full", ctypes.POINTER(_GPtrArray), [
	("reserved_size",		ctypes.c_uint),
	("element_free_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_ptr_array_free = _rpythonic_function_(		"g_ptr_array_free", ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)), [
	("array",		ctypes.POINTER(_GPtrArray)),
	("free_seg",		ctypes.c_int),] )

g_ptr_array_ref = _rpythonic_function_(		"g_ptr_array_ref", ctypes.POINTER(_GPtrArray), [
	("array",		ctypes.POINTER(_GPtrArray)),] )

g_ptr_array_unref = _rpythonic_function_(		"g_ptr_array_unref", ctypes.c_void_p, [
	("array",		ctypes.POINTER(_GPtrArray)),] )

g_ptr_array_set_free_func = _rpythonic_function_(		"g_ptr_array_set_free_func", ctypes.c_void_p, [
	("array",		ctypes.POINTER(_GPtrArray)),
	("element_free_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_ptr_array_set_size = _rpythonic_function_(		"g_ptr_array_set_size", ctypes.c_void_p, [
	("array",		ctypes.POINTER(_GPtrArray)),
	("length",		ctypes.c_int),] )

g_ptr_array_remove_index = _rpythonic_function_(		"g_ptr_array_remove_index", ctypes.POINTER(ctypes.c_void_p), [
	("array",		ctypes.POINTER(_GPtrArray)),
	("index_",		ctypes.c_uint),] )

g_ptr_array_remove_index_fast = _rpythonic_function_(		"g_ptr_array_remove_index_fast", ctypes.POINTER(ctypes.c_void_p), [
	("array",		ctypes.POINTER(_GPtrArray)),
	("index_",		ctypes.c_uint),] )

g_ptr_array_remove = _rpythonic_function_(		"g_ptr_array_remove", ctypes.c_int, [
	("array",		ctypes.POINTER(_GPtrArray)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_ptr_array_remove_fast = _rpythonic_function_(		"g_ptr_array_remove_fast", ctypes.c_int, [
	("array",		ctypes.POINTER(_GPtrArray)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_ptr_array_remove_range = _rpythonic_function_(		"g_ptr_array_remove_range", ctypes.c_void_p, [
	("array",		ctypes.POINTER(_GPtrArray)),
	("index_",		ctypes.c_uint),
	("length",		ctypes.c_uint),] )

g_ptr_array_add = _rpythonic_function_(		"g_ptr_array_add", ctypes.c_void_p, [
	("array",		ctypes.POINTER(_GPtrArray)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_ptr_array_sort = _rpythonic_function_(		"g_ptr_array_sort", ctypes.c_void_p, [
	("array",		ctypes.POINTER(_GPtrArray)),
	("compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_ptr_array_sort_with_data = _rpythonic_function_(		"g_ptr_array_sort_with_data", ctypes.c_void_p, [
	("array",		ctypes.POINTER(_GPtrArray)),
	("compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_ptr_array_foreach = _rpythonic_function_(		"g_ptr_array_foreach", ctypes.c_void_p, [
	("array",		ctypes.POINTER(_GPtrArray)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_byte_array_new = _rpythonic_function_(		"g_byte_array_new", ctypes.POINTER(_GByteArray), [] )

g_byte_array_sized_new = _rpythonic_function_(		"g_byte_array_sized_new", ctypes.POINTER(_GByteArray), [
	("reserved_size",		ctypes.c_uint),] )

g_byte_array_free = _rpythonic_function_(		"g_byte_array_free", ctypes.POINTER(ctypes.c_ubyte), [
	("array",		ctypes.POINTER(_GByteArray)),
	("free_segment",		ctypes.c_int),] )

g_byte_array_ref = _rpythonic_function_(		"g_byte_array_ref", ctypes.POINTER(_GByteArray), [
	("array",		ctypes.POINTER(_GByteArray)),] )

g_byte_array_unref = _rpythonic_function_(		"g_byte_array_unref", ctypes.c_void_p, [
	("array",		ctypes.POINTER(_GByteArray)),] )

g_byte_array_append = _rpythonic_function_(		"g_byte_array_append", ctypes.POINTER(_GByteArray), [
	("array",		ctypes.POINTER(_GByteArray)),
	("data",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_uint),] )

g_byte_array_prepend = _rpythonic_function_(		"g_byte_array_prepend", ctypes.POINTER(_GByteArray), [
	("array",		ctypes.POINTER(_GByteArray)),
	("data",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_uint),] )

g_byte_array_set_size = _rpythonic_function_(		"g_byte_array_set_size", ctypes.POINTER(_GByteArray), [
	("array",		ctypes.POINTER(_GByteArray)),
	("length",		ctypes.c_uint),] )

g_byte_array_remove_index = _rpythonic_function_(		"g_byte_array_remove_index", ctypes.POINTER(_GByteArray), [
	("array",		ctypes.POINTER(_GByteArray)),
	("index_",		ctypes.c_uint),] )

g_byte_array_remove_index_fast = _rpythonic_function_(		"g_byte_array_remove_index_fast", ctypes.POINTER(_GByteArray), [
	("array",		ctypes.POINTER(_GByteArray)),
	("index_",		ctypes.c_uint),] )

g_byte_array_remove_range = _rpythonic_function_(		"g_byte_array_remove_range", ctypes.POINTER(_GByteArray), [
	("array",		ctypes.POINTER(_GByteArray)),
	("index_",		ctypes.c_uint),
	("length",		ctypes.c_uint),] )

g_byte_array_sort = _rpythonic_function_(		"g_byte_array_sort", ctypes.c_void_p, [
	("array",		ctypes.POINTER(_GByteArray)),
	("compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_byte_array_sort_with_data = _rpythonic_function_(		"g_byte_array_sort_with_data", ctypes.c_void_p, [
	("array",		ctypes.POINTER(_GByteArray)),
	("compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_quark_try_string = _rpythonic_function_(		"g_quark_try_string", ctypes.c_uint, [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_quark_from_static_string = _rpythonic_function_(		"g_quark_from_static_string", ctypes.c_uint, [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_quark_from_string = _rpythonic_function_(		"g_quark_from_string", ctypes.c_uint, [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_quark_to_string = _rpythonic_function_(		"g_quark_to_string", ctypes.POINTER(ctypes.c_char), [
	("quark",		ctypes.c_uint),] )

g_intern_string = _rpythonic_function_(		"g_intern_string", ctypes.POINTER(ctypes.c_char), [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_intern_static_string = _rpythonic_function_(		"g_intern_static_string", ctypes.POINTER(ctypes.c_char), [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_error_new = _rpythonic_function_(		"g_error_new", ctypes.POINTER(_GError), [
	("domain",		ctypes.c_uint),
	("code",		ctypes.c_int),
	("format",		ctypes.POINTER(ctypes.c_char)),] )

g_error_new_literal = _rpythonic_function_(		"g_error_new_literal", ctypes.POINTER(_GError), [
	("domain",		ctypes.c_uint),
	("code",		ctypes.c_int),
	("message",		ctypes.POINTER(ctypes.c_char)),] )

g_error_new_valist = _rpythonic_function_(		"g_error_new_valist", ctypes.POINTER(_GError), [
	("domain",		ctypes.c_uint),
	("code",		ctypes.c_int),
	("format",		ctypes.POINTER(ctypes.c_char)),
	("args",		ctypes.c_char),] )

g_error_free = _rpythonic_function_(		"g_error_free", ctypes.c_void_p, [
	("error",		ctypes.POINTER(_GError)),] )

g_error_copy = _rpythonic_function_(		"g_error_copy", ctypes.POINTER(_GError), [
	("error",		ctypes.POINTER(_GError)),] )

g_error_matches = _rpythonic_function_(		"g_error_matches", ctypes.c_int, [
	("error",		ctypes.POINTER(_GError)),
	("domain",		ctypes.c_uint),
	("code",		ctypes.c_int),] )

g_set_error = _rpythonic_function_(		"g_set_error", ctypes.c_void_p, [
	("err",		ctypes.POINTER(ctypes.POINTER(_GError))),
	("domain",		ctypes.c_uint),
	("code",		ctypes.c_int),
	("format",		ctypes.POINTER(ctypes.c_char)),] )

g_set_error_literal = _rpythonic_function_(		"g_set_error_literal", ctypes.c_void_p, [
	("err",		ctypes.POINTER(ctypes.POINTER(_GError))),
	("domain",		ctypes.c_uint),
	("code",		ctypes.c_int),
	("message",		ctypes.POINTER(ctypes.c_char)),] )

g_propagate_error = _rpythonic_function_(		"g_propagate_error", ctypes.c_void_p, [
	("dest",		ctypes.POINTER(ctypes.POINTER(_GError))),
	("src",		ctypes.POINTER(_GError)),] )

g_clear_error = _rpythonic_function_(		"g_clear_error", ctypes.c_void_p, [
	("err",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_prefix_error = _rpythonic_function_(		"g_prefix_error", ctypes.c_void_p, [
	("err",		ctypes.POINTER(ctypes.POINTER(_GError))),
	("format",		ctypes.POINTER(ctypes.c_char)),] )

g_propagate_prefixed_error = _rpythonic_function_(		"g_propagate_prefixed_error", ctypes.c_void_p, [
	("dest",		ctypes.POINTER(ctypes.POINTER(_GError))),
	("src",		ctypes.POINTER(_GError)),
	("format",		ctypes.POINTER(ctypes.c_char)),] )

g_get_user_name = _rpythonic_function_(		"g_get_user_name", ctypes.POINTER(ctypes.c_char), [] )

g_get_real_name = _rpythonic_function_(		"g_get_real_name", ctypes.POINTER(ctypes.c_char), [] )

g_get_home_dir = _rpythonic_function_(		"g_get_home_dir", ctypes.POINTER(ctypes.c_char), [] )

g_get_tmp_dir = _rpythonic_function_(		"g_get_tmp_dir", ctypes.POINTER(ctypes.c_char), [] )

g_get_host_name = _rpythonic_function_(		"g_get_host_name", ctypes.POINTER(ctypes.c_char), [] )

g_get_prgname = _rpythonic_function_(		"g_get_prgname", ctypes.POINTER(ctypes.c_char), [] )

g_set_prgname = _rpythonic_function_(		"g_set_prgname", ctypes.c_void_p, [
	("prgname",		ctypes.POINTER(ctypes.c_char)),] )

g_get_application_name = _rpythonic_function_(		"g_get_application_name", ctypes.POINTER(ctypes.c_char), [] )

g_set_application_name = _rpythonic_function_(		"g_set_application_name", ctypes.c_void_p, [
	("application_name",		ctypes.POINTER(ctypes.c_char)),] )

g_reload_user_special_dirs_cache = _rpythonic_function_(		"g_reload_user_special_dirs_cache", ctypes.c_void_p, [] )

g_get_user_data_dir = _rpythonic_function_(		"g_get_user_data_dir", ctypes.POINTER(ctypes.c_char), [] )

g_get_user_config_dir = _rpythonic_function_(		"g_get_user_config_dir", ctypes.POINTER(ctypes.c_char), [] )

g_get_user_cache_dir = _rpythonic_function_(		"g_get_user_cache_dir", ctypes.POINTER(ctypes.c_char), [] )

g_get_system_data_dirs = _rpythonic_function_(		"g_get_system_data_dirs", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [] )

g_get_system_config_dirs = _rpythonic_function_(		"g_get_system_config_dirs", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [] )

g_get_user_runtime_dir = _rpythonic_function_(		"g_get_user_runtime_dir", ctypes.POINTER(ctypes.c_char), [] )

g_get_language_names = _rpythonic_function_(		"g_get_language_names", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [] )

g_get_locale_variants = _rpythonic_function_(		"g_get_locale_variants", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("locale",		ctypes.POINTER(ctypes.c_char)),] )

g_get_user_special_dir = _rpythonic_function_(		"g_get_user_special_dir", ctypes.POINTER(ctypes.c_char), [
	("directory",		ctypes.c_int),] )

g_parse_debug_string = _rpythonic_function_(		"g_parse_debug_string", ctypes.c_uint, [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("keys",		ctypes.POINTER(_GDebugKey)),
	("nkeys",		ctypes.c_uint),] )

g_snprintf = _rpythonic_function_(		"g_snprintf", ctypes.c_int, [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("n",		ctypes.c_ulong),
	("format",		ctypes.POINTER(ctypes.c_char)),] )

g_vsnprintf = _rpythonic_function_(		"g_vsnprintf", ctypes.c_int, [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("n",		ctypes.c_ulong),
	("format",		ctypes.POINTER(ctypes.c_char)),
	("args",		ctypes.c_char),] )

g_path_is_absolute = _rpythonic_function_(		"g_path_is_absolute", ctypes.c_int, [
	("file_name",		ctypes.POINTER(ctypes.c_char)),] )

g_path_skip_root = _rpythonic_function_(		"g_path_skip_root", ctypes.POINTER(ctypes.c_char), [
	("file_name",		ctypes.POINTER(ctypes.c_char)),] )

g_basename = _rpythonic_function_(		"g_basename", ctypes.POINTER(ctypes.c_char), [
	("file_name",		ctypes.POINTER(ctypes.c_char)),] )

g_get_current_dir = _rpythonic_function_(		"g_get_current_dir", ctypes.POINTER(ctypes.c_char), [] )

g_path_get_basename = _rpythonic_function_(		"g_path_get_basename", ctypes.POINTER(ctypes.c_char), [
	("file_name",		ctypes.POINTER(ctypes.c_char)),] )

g_path_get_dirname = _rpythonic_function_(		"g_path_get_dirname", ctypes.POINTER(ctypes.c_char), [
	("file_name",		ctypes.POINTER(ctypes.c_char)),] )

g_nullify_pointer = _rpythonic_function_(		"g_nullify_pointer", ctypes.c_void_p, [("nullify_location",		ctypes.c_void_p)] )

g_getenv = _rpythonic_function_(		"g_getenv", ctypes.POINTER(ctypes.c_char), [
	("variable",		ctypes.POINTER(ctypes.c_char)),] )

g_setenv = _rpythonic_function_(		"g_setenv", ctypes.c_int, [
	("variable",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_char)),
	("overwrite",		ctypes.c_int),] )

g_unsetenv = _rpythonic_function_(		"g_unsetenv", ctypes.c_void_p, [
	("variable",		ctypes.POINTER(ctypes.c_char)),] )

g_listenv = _rpythonic_function_(		"g_listenv", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [] )

g_get_environ = _rpythonic_function_(		"g_get_environ", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [] )

_g_getenv_nomalloc = _rpythonic_function_(		"_g_getenv_nomalloc", ctypes.POINTER(ctypes.c_char), [
	("variable",		ctypes.POINTER(ctypes.c_char)),
	("buffer",		( ctypes.c_char * 1024 )),] )

GVoidFunc = _rpythonic_function_(		"GVoidFunc", ctypes.c_void_p, [] )

g_atexit = _rpythonic_function_(		"g_atexit", ctypes.c_void_p, [
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_find_program_in_path = _rpythonic_function_(		"g_find_program_in_path", ctypes.POINTER(ctypes.c_char), [
	("program",		ctypes.POINTER(ctypes.c_char)),] )

glib_check_version = _rpythonic_function_(		"glib_check_version", ctypes.POINTER(ctypes.c_char), [
	("required_major",		ctypes.c_uint),
	("required_minor",		ctypes.c_uint),
	("required_micro",		ctypes.c_uint),] )

g_atomic_int_get = _rpythonic_function_(		"g_atomic_int_get", ctypes.c_int, [
	("atomic",		ctypes.POINTER(ctypes.c_int)),] )

g_atomic_int_set = _rpythonic_function_(		"g_atomic_int_set", ctypes.c_void_p, [
	("atomic",		ctypes.POINTER(ctypes.c_int)),
	("newval",		ctypes.c_int),] )

g_atomic_int_inc = _rpythonic_function_(		"g_atomic_int_inc", ctypes.c_void_p, [
	("atomic",		ctypes.POINTER(ctypes.c_int)),] )

g_atomic_int_dec_and_test = _rpythonic_function_(		"g_atomic_int_dec_and_test", ctypes.c_int, [
	("atomic",		ctypes.POINTER(ctypes.c_int)),] )

g_atomic_int_compare_and_exchange = _rpythonic_function_(		"g_atomic_int_compare_and_exchange", ctypes.c_int, [
	("atomic",		ctypes.POINTER(ctypes.c_int)),
	("oldval",		ctypes.c_int),
	("newval",		ctypes.c_int),] )

g_atomic_int_add = _rpythonic_function_(		"g_atomic_int_add", ctypes.c_int, [
	("atomic",		ctypes.POINTER(ctypes.c_int)),
	("val",		ctypes.c_int),] )

g_atomic_int_and = _rpythonic_function_(		"g_atomic_int_and", ctypes.c_uint, [
	("atomic",		ctypes.POINTER(ctypes.c_uint)),
	("val",		ctypes.c_uint),] )

g_atomic_int_or = _rpythonic_function_(		"g_atomic_int_or", ctypes.c_uint, [
	("atomic",		ctypes.POINTER(ctypes.c_uint)),
	("val",		ctypes.c_uint),] )

g_atomic_int_xor = _rpythonic_function_(		"g_atomic_int_xor", ctypes.c_uint, [
	("atomic",		ctypes.POINTER(ctypes.c_uint)),
	("val",		ctypes.c_uint),] )

g_atomic_pointer_get = _rpythonic_function_(		"g_atomic_pointer_get", ctypes.POINTER(ctypes.c_void_p), [("atomic",		ctypes.c_void_p)] )

g_atomic_pointer_set = _rpythonic_function_(		"g_atomic_pointer_set", ctypes.c_void_p, [
	("atomic",		ctypes.POINTER(ctypes.c_void_p)),
	("newval",		ctypes.POINTER(ctypes.c_void_p)),] )

g_atomic_pointer_compare_and_exchange = _rpythonic_function_(		"g_atomic_pointer_compare_and_exchange", ctypes.c_int, [
	("atomic",		ctypes.POINTER(ctypes.c_void_p)),
	("oldval",		ctypes.POINTER(ctypes.c_void_p)),
	("newval",		ctypes.POINTER(ctypes.c_void_p)),] )

g_atomic_pointer_add = _rpythonic_function_(		"g_atomic_pointer_add", ctypes.c_long, [
	("atomic",		ctypes.POINTER(ctypes.c_void_p)),
	("val",		ctypes.c_long),] )

g_atomic_pointer_and = _rpythonic_function_(		"g_atomic_pointer_and", ctypes.c_ulong, [
	("atomic",		ctypes.POINTER(ctypes.c_void_p)),
	("val",		ctypes.c_ulong),] )

g_atomic_pointer_or = _rpythonic_function_(		"g_atomic_pointer_or", ctypes.c_ulong, [
	("atomic",		ctypes.POINTER(ctypes.c_void_p)),
	("val",		ctypes.c_ulong),] )

g_atomic_pointer_xor = _rpythonic_function_(		"g_atomic_pointer_xor", ctypes.c_ulong, [
	("atomic",		ctypes.POINTER(ctypes.c_void_p)),
	("val",		ctypes.c_ulong),] )

g_atomic_int_exchange_and_add = _rpythonic_function_(		"g_atomic_int_exchange_and_add", ctypes.c_int, [
	("atomic",		ctypes.POINTER(ctypes.c_int)),
	("val",		ctypes.c_int),] )

g_thread_error_quark = _rpythonic_function_(		"g_thread_error_quark", ctypes.c_uint, [] )

GThreadFunc = _rpythonic_function_(		"GThreadFunc", ctypes.POINTER(ctypes.c_void_p), [("data",		ctypes.c_void_p)] )

mutex_new = _rpythonic_function_(		"mutex_new", ctypes.POINTER(_GMutex), [] )

mutex_lock = _rpythonic_function_(		"mutex_lock", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(_GMutex)),] )

mutex_trylock = _rpythonic_function_(		"mutex_trylock", ctypes.c_int, [
	("mutex",		ctypes.POINTER(_GMutex)),] )

mutex_unlock = _rpythonic_function_(		"mutex_unlock", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(_GMutex)),] )

mutex_free = _rpythonic_function_(		"mutex_free", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(_GMutex)),] )

cond_new = _rpythonic_function_(		"cond_new", ctypes.POINTER(_GCond), [] )

cond_signal = _rpythonic_function_(		"cond_signal", ctypes.c_void_p, [
	("cond",		ctypes.POINTER(_GCond)),] )

cond_broadcast = _rpythonic_function_(		"cond_broadcast", ctypes.c_void_p, [
	("cond",		ctypes.POINTER(_GCond)),] )

cond_wait = _rpythonic_function_(		"cond_wait", ctypes.c_void_p, [
	("cond",		ctypes.POINTER(_GCond)),
	("mutex",		ctypes.POINTER(_GMutex)),] )

cond_timed_wait = _rpythonic_function_(		"cond_timed_wait", ctypes.c_int, [
	("cond",		ctypes.POINTER(_GCond)),
	("mutex",		ctypes.POINTER(_GMutex)),
	("end_time",		ctypes.POINTER(_GTimeVal)),] )

cond_free = _rpythonic_function_(		"cond_free", ctypes.c_void_p, [
	("cond",		ctypes.POINTER(_GCond)),] )

private_new = _rpythonic_function_(		"private_new", ctypes.POINTER(_GPrivate), [
	("destructor",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

private_get = _rpythonic_function_(		"private_get", ctypes.POINTER(ctypes.c_void_p), [
	("private_key",		ctypes.POINTER(_GPrivate)),] )

private_set = _rpythonic_function_(		"private_set", ctypes.c_void_p, [
	("private_key",		ctypes.POINTER(_GPrivate)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

thread_create = _rpythonic_function_(		"thread_create", ctypes.c_void_p, [
	("func",		ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("stack_size",		ctypes.c_ulong),
	("joinable",		ctypes.c_int),
	("bound",		ctypes.c_int),
	("priority",		ctypes.c_int),
	("thread",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

thread_yield = _rpythonic_function_(		"thread_yield", ctypes.c_void_p, [] )

thread_join = _rpythonic_function_(		"thread_join", ctypes.c_void_p, [("thread",		ctypes.c_void_p)] )

thread_exit = _rpythonic_function_(		"thread_exit", ctypes.c_void_p, [] )

thread_set_priority = _rpythonic_function_(		"thread_set_priority", ctypes.c_void_p, [
	("thread",		ctypes.POINTER(ctypes.c_void_p)),
	("priority",		ctypes.c_int),] )

thread_self = _rpythonic_function_(		"thread_self", ctypes.c_void_p, [("thread",		ctypes.c_void_p)] )

thread_equal = _rpythonic_function_(		"thread_equal", ctypes.c_int, [
	("thread1",		ctypes.POINTER(ctypes.c_void_p)),
	("thread2",		ctypes.POINTER(ctypes.c_void_p)),] )

g_thread_gettime = _rpythonic_function_(		"g_thread_gettime", ctypes.c_ulong, [] )

g_thread_init = _rpythonic_function_(		"g_thread_init", ctypes.c_void_p, [
	("vtable",		ctypes.POINTER(_GThreadFunctions)),] )

g_thread_init_with_errorcheck_mutexes = _rpythonic_function_(		"g_thread_init_with_errorcheck_mutexes", ctypes.c_void_p, [
	("vtable",		ctypes.POINTER(_GThreadFunctions)),] )

g_thread_get_initialized = _rpythonic_function_(		"g_thread_get_initialized", ctypes.c_int, [] )

g_static_mutex_get_mutex_impl = _rpythonic_function_(		"g_static_mutex_get_mutex_impl", ctypes.POINTER(_GMutex), [
	("mutex",		ctypes.POINTER(ctypes.POINTER(_GMutex))),] )

g_thread_create_full = _rpythonic_function_(		"g_thread_create_full", ctypes.POINTER(_GThread), [
	("func",		ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("stack_size",		ctypes.c_ulong),
	("joinable",		ctypes.c_int),
	("bound",		ctypes.c_int),
	("priority",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_thread_self = _rpythonic_function_(		"g_thread_self", ctypes.POINTER(_GThread), [] )

g_thread_exit = _rpythonic_function_(		"g_thread_exit", ctypes.c_void_p, [("retval",		ctypes.c_void_p)] )

g_thread_join = _rpythonic_function_(		"g_thread_join", ctypes.POINTER(ctypes.c_void_p), [
	("thread",		ctypes.POINTER(_GThread)),] )

g_thread_set_priority = _rpythonic_function_(		"g_thread_set_priority", ctypes.c_void_p, [
	("thread",		ctypes.POINTER(_GThread)),
	("priority",		ctypes.c_int),] )

g_static_mutex_init = _rpythonic_function_(		"g_static_mutex_init", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(_GStaticMutex)),] )

g_static_mutex_free = _rpythonic_function_(		"g_static_mutex_free", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(_GStaticMutex)),] )

g_static_private_init = _rpythonic_function_(		"g_static_private_init", ctypes.c_void_p, [
	("private_key",		ctypes.POINTER(_GStaticPrivate)),] )

g_static_private_get = _rpythonic_function_(		"g_static_private_get", ctypes.POINTER(ctypes.c_void_p), [
	("private_key",		ctypes.POINTER(_GStaticPrivate)),] )

g_static_private_set = _rpythonic_function_(		"g_static_private_set", ctypes.c_void_p, [
	("private_key",		ctypes.POINTER(_GStaticPrivate)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_static_private_free = _rpythonic_function_(		"g_static_private_free", ctypes.c_void_p, [
	("private_key",		ctypes.POINTER(_GStaticPrivate)),] )

g_static_rec_mutex_init = _rpythonic_function_(		"g_static_rec_mutex_init", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(_GStaticRecMutex)),] )

g_static_rec_mutex_lock = _rpythonic_function_(		"g_static_rec_mutex_lock", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(_GStaticRecMutex)),] )

g_static_rec_mutex_trylock = _rpythonic_function_(		"g_static_rec_mutex_trylock", ctypes.c_int, [
	("mutex",		ctypes.POINTER(_GStaticRecMutex)),] )

g_static_rec_mutex_unlock = _rpythonic_function_(		"g_static_rec_mutex_unlock", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(_GStaticRecMutex)),] )

g_static_rec_mutex_lock_full = _rpythonic_function_(		"g_static_rec_mutex_lock_full", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(_GStaticRecMutex)),
	("depth",		ctypes.c_uint),] )

g_static_rec_mutex_unlock_full = _rpythonic_function_(		"g_static_rec_mutex_unlock_full", ctypes.c_uint, [
	("mutex",		ctypes.POINTER(_GStaticRecMutex)),] )

g_static_rec_mutex_free = _rpythonic_function_(		"g_static_rec_mutex_free", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(_GStaticRecMutex)),] )

g_static_rw_lock_init = _rpythonic_function_(		"g_static_rw_lock_init", ctypes.c_void_p, [
	("lock",		ctypes.POINTER(_GStaticRWLock)),] )

g_static_rw_lock_reader_lock = _rpythonic_function_(		"g_static_rw_lock_reader_lock", ctypes.c_void_p, [
	("lock",		ctypes.POINTER(_GStaticRWLock)),] )

g_static_rw_lock_reader_trylock = _rpythonic_function_(		"g_static_rw_lock_reader_trylock", ctypes.c_int, [
	("lock",		ctypes.POINTER(_GStaticRWLock)),] )

g_static_rw_lock_reader_unlock = _rpythonic_function_(		"g_static_rw_lock_reader_unlock", ctypes.c_void_p, [
	("lock",		ctypes.POINTER(_GStaticRWLock)),] )

g_static_rw_lock_writer_lock = _rpythonic_function_(		"g_static_rw_lock_writer_lock", ctypes.c_void_p, [
	("lock",		ctypes.POINTER(_GStaticRWLock)),] )

g_static_rw_lock_writer_trylock = _rpythonic_function_(		"g_static_rw_lock_writer_trylock", ctypes.c_int, [
	("lock",		ctypes.POINTER(_GStaticRWLock)),] )

g_static_rw_lock_writer_unlock = _rpythonic_function_(		"g_static_rw_lock_writer_unlock", ctypes.c_void_p, [
	("lock",		ctypes.POINTER(_GStaticRWLock)),] )

g_static_rw_lock_free = _rpythonic_function_(		"g_static_rw_lock_free", ctypes.c_void_p, [
	("lock",		ctypes.POINTER(_GStaticRWLock)),] )

g_thread_foreach = _rpythonic_function_(		"g_thread_foreach", ctypes.c_void_p, [
	("thread_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_once_impl = _rpythonic_function_(		"g_once_impl", ctypes.POINTER(ctypes.c_void_p), [
	("once",		ctypes.POINTER(_GOnce)),
	("func",		ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), )),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),] )

g_once_init_enter_impl = _rpythonic_function_(		"g_once_init_enter_impl", ctypes.c_int, [
	("value_location",		ctypes.POINTER(ctypes.c_ulong)),] )

g_once_init_leave = _rpythonic_function_(		"g_once_init_leave", ctypes.c_void_p, [
	("value_location",		ctypes.POINTER(ctypes.c_ulong)),
	("initialization_value",		ctypes.c_ulong),] )

glib_dummy_decl = _rpythonic_function_(		"glib_dummy_decl", ctypes.c_void_p, [] )

g_async_queue_new = _rpythonic_function_(		"g_async_queue_new", ctypes.POINTER(_GAsyncQueue), [] )

g_async_queue_new_full = _rpythonic_function_(		"g_async_queue_new_full", ctypes.POINTER(_GAsyncQueue), [
	("item_free_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_async_queue_lock = _rpythonic_function_(		"g_async_queue_lock", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GAsyncQueue)),] )

g_async_queue_unlock = _rpythonic_function_(		"g_async_queue_unlock", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GAsyncQueue)),] )

g_async_queue_ref = _rpythonic_function_(		"g_async_queue_ref", ctypes.POINTER(_GAsyncQueue), [
	("queue",		ctypes.POINTER(_GAsyncQueue)),] )

g_async_queue_unref = _rpythonic_function_(		"g_async_queue_unref", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GAsyncQueue)),] )

g_async_queue_ref_unlocked = _rpythonic_function_(		"g_async_queue_ref_unlocked", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GAsyncQueue)),] )

g_async_queue_unref_and_unlock = _rpythonic_function_(		"g_async_queue_unref_and_unlock", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GAsyncQueue)),] )

g_async_queue_push = _rpythonic_function_(		"g_async_queue_push", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GAsyncQueue)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_async_queue_push_unlocked = _rpythonic_function_(		"g_async_queue_push_unlocked", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GAsyncQueue)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_async_queue_push_sorted = _rpythonic_function_(		"g_async_queue_push_sorted", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GAsyncQueue)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_async_queue_push_sorted_unlocked = _rpythonic_function_(		"g_async_queue_push_sorted_unlocked", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GAsyncQueue)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_async_queue_pop = _rpythonic_function_(		"g_async_queue_pop", ctypes.POINTER(ctypes.c_void_p), [
	("queue",		ctypes.POINTER(_GAsyncQueue)),] )

g_async_queue_pop_unlocked = _rpythonic_function_(		"g_async_queue_pop_unlocked", ctypes.POINTER(ctypes.c_void_p), [
	("queue",		ctypes.POINTER(_GAsyncQueue)),] )

g_async_queue_try_pop = _rpythonic_function_(		"g_async_queue_try_pop", ctypes.POINTER(ctypes.c_void_p), [
	("queue",		ctypes.POINTER(_GAsyncQueue)),] )

g_async_queue_try_pop_unlocked = _rpythonic_function_(		"g_async_queue_try_pop_unlocked", ctypes.POINTER(ctypes.c_void_p), [
	("queue",		ctypes.POINTER(_GAsyncQueue)),] )

g_async_queue_timed_pop = _rpythonic_function_(		"g_async_queue_timed_pop", ctypes.POINTER(ctypes.c_void_p), [
	("queue",		ctypes.POINTER(_GAsyncQueue)),
	("end_time",		ctypes.POINTER(_GTimeVal)),] )

g_async_queue_timed_pop_unlocked = _rpythonic_function_(		"g_async_queue_timed_pop_unlocked", ctypes.POINTER(ctypes.c_void_p), [
	("queue",		ctypes.POINTER(_GAsyncQueue)),
	("end_time",		ctypes.POINTER(_GTimeVal)),] )

g_async_queue_length = _rpythonic_function_(		"g_async_queue_length", ctypes.c_int, [
	("queue",		ctypes.POINTER(_GAsyncQueue)),] )

g_async_queue_length_unlocked = _rpythonic_function_(		"g_async_queue_length_unlocked", ctypes.c_int, [
	("queue",		ctypes.POINTER(_GAsyncQueue)),] )

g_async_queue_sort = _rpythonic_function_(		"g_async_queue_sort", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GAsyncQueue)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_async_queue_sort_unlocked = _rpythonic_function_(		"g_async_queue_sort_unlocked", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GAsyncQueue)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

_g_async_queue_get_mutex = _rpythonic_function_(		"_g_async_queue_get_mutex", ctypes.POINTER(_GMutex), [
	("queue",		ctypes.POINTER(_GAsyncQueue)),] )

_function = _rpythonic_function_(		"_function", ctypes.c_void_p, [
	("none",		ctypes.c_void_p),] )

g_date_time_add_years = _rpythonic_function_(		"g_date_time_add_years", ctypes.POINTER(_GDateTime), [
	("datetime",		ctypes.POINTER(_GDateTime)),
	("years",		ctypes.c_int),] )

signal = _rpythonic_function_(		"signal", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,), [
	("__sig",		ctypes.c_int),
	("__handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,)),] )

kill = _rpythonic_function_(		"kill", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__sig",		ctypes.c_int),] )

killpg = _rpythonic_function_(		"killpg", ctypes.c_int, [
	("__pgrp",		ctypes.c_int),
	("__sig",		ctypes.c_int),] )

C_raise = _rpythonic_function_(		"C_raise", ctypes.c_int, [
	("__sig",		ctypes.c_int),] )

ssignal = _rpythonic_function_(		"ssignal", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,), [
	("__sig",		ctypes.c_int),
	("__handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,)),] )

gsignal = _rpythonic_function_(		"gsignal", ctypes.c_int, [
	("__sig",		ctypes.c_int),] )

psignal = _rpythonic_function_(		"psignal", ctypes.c_void_p, [
	("__sig",		ctypes.c_int),
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

psiginfo = _rpythonic_function_(		"psiginfo", ctypes.c_void_p, [
	("__pinfo",		ctypes.POINTER(siginfo)),
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

sigblock = _rpythonic_function_(		"sigblock", ctypes.c_int, [
	("__mask",		ctypes.c_int),] )

sigsetmask = _rpythonic_function_(		"sigsetmask", ctypes.c_int, [
	("__mask",		ctypes.c_int),] )

siggetmask = _rpythonic_function_(		"siggetmask", ctypes.c_int, [] )

sigemptyset = _rpythonic_function_(		"sigemptyset", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),] )

sigfillset = _rpythonic_function_(		"sigfillset", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),] )

sigaddset = _rpythonic_function_(		"sigaddset", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),
	("__signo",		ctypes.c_int),] )

sigdelset = _rpythonic_function_(		"sigdelset", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),
	("__signo",		ctypes.c_int),] )

sigismember = _rpythonic_function_(		"sigismember", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),
	("__signo",		ctypes.c_int),] )

sa_sigaction = _rpythonic_function_(		"sa_sigaction", ctypes.c_void_p, [
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

sa_restorer = _rpythonic_function_(		"sa_restorer", ctypes.c_void_p, [] )

sigprocmask = _rpythonic_function_(		"sigprocmask", ctypes.c_int, [
	("__how",		ctypes.c_int),
	("__set",		ctypes.POINTER(__sigset_t)),
	("__oset",		ctypes.POINTER(__sigset_t)),] )

sigsuspend = _rpythonic_function_(		"sigsuspend", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),] )

sigpending = _rpythonic_function_(		"sigpending", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),] )

sigwait = _rpythonic_function_(		"sigwait", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),
	("__sig",		ctypes.POINTER(ctypes.c_int)),] )

sigwaitinfo = _rpythonic_function_(		"sigwaitinfo", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),
	("__info",		ctypes.POINTER(siginfo)),] )

sigtimedwait = _rpythonic_function_(		"sigtimedwait", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),
	("__info",		ctypes.POINTER(siginfo)),
	("__timeout",		ctypes.POINTER(timespec)),] )

sigqueue = _rpythonic_function_(		"sigqueue", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__sig",		ctypes.c_int),
	("__val",		sigval),] )

sigreturn = _rpythonic_function_(		"sigreturn", ctypes.c_int, [
	("__scp",		ctypes.POINTER(sigcontext)),] )

siginterrupt = _rpythonic_function_(		"siginterrupt", ctypes.c_int, [
	("__sig",		ctypes.c_int),
	("__interrupt",		ctypes.c_int),] )

pthread_sigmask = _rpythonic_function_(		"pthread_sigmask", ctypes.c_int, [
	("__how",		ctypes.c_int),
	("__newmask",		ctypes.POINTER(__sigset_t)),
	("__oldmask",		ctypes.POINTER(__sigset_t)),] )

pthread_kill = _rpythonic_function_(		"pthread_kill", ctypes.c_int, [
	("__threadid",		ctypes.c_uint64),
	("__signo",		ctypes.c_int),] )

g_on_error_query = _rpythonic_function_(		"g_on_error_query", ctypes.c_void_p, [
	("prg_name",		ctypes.POINTER(ctypes.c_char)),] )

g_on_error_stack_trace = _rpythonic_function_(		"g_on_error_stack_trace", ctypes.c_void_p, [
	("prg_name",		ctypes.POINTER(ctypes.c_char)),] )

g_base64_encode_step = _rpythonic_function_(		"g_base64_encode_step", ctypes.c_ulong, [
	("C_in",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_ulong),
	("break_lines",		ctypes.c_int),
	("out",		ctypes.POINTER(ctypes.c_char)),
	("state",		ctypes.POINTER(ctypes.c_int)),
	("save",		ctypes.POINTER(ctypes.c_int)),] )

g_base64_encode_close = _rpythonic_function_(		"g_base64_encode_close", ctypes.c_ulong, [
	("break_lines",		ctypes.c_int),
	("out",		ctypes.POINTER(ctypes.c_char)),
	("state",		ctypes.POINTER(ctypes.c_int)),
	("save",		ctypes.POINTER(ctypes.c_int)),] )

g_base64_encode = _rpythonic_function_(		"g_base64_encode", ctypes.POINTER(ctypes.c_char), [
	("data",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_ulong),] )

g_base64_decode_step = _rpythonic_function_(		"g_base64_decode_step", ctypes.c_ulong, [
	("C_in",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_ulong),
	("out",		ctypes.POINTER(ctypes.c_ubyte)),
	("state",		ctypes.POINTER(ctypes.c_int)),
	("save",		ctypes.POINTER(ctypes.c_uint)),] )

g_base64_decode = _rpythonic_function_(		"g_base64_decode", ctypes.POINTER(ctypes.c_ubyte), [
	("text",		ctypes.POINTER(ctypes.c_char)),
	("out_len",		ctypes.POINTER(ctypes.c_ulong)),] )

g_base64_decode_inplace = _rpythonic_function_(		"g_base64_decode_inplace", ctypes.POINTER(ctypes.c_ubyte), [
	("text",		ctypes.POINTER(ctypes.c_char)),
	("out_len",		ctypes.POINTER(ctypes.c_ulong)),] )

g_bit_lock = _rpythonic_function_(		"g_bit_lock", ctypes.c_void_p, [
	("address",		ctypes.POINTER(ctypes.c_int)),
	("lock_bit",		ctypes.c_int),] )

g_bit_trylock = _rpythonic_function_(		"g_bit_trylock", ctypes.c_int, [
	("address",		ctypes.POINTER(ctypes.c_int)),
	("lock_bit",		ctypes.c_int),] )

g_bit_unlock = _rpythonic_function_(		"g_bit_unlock", ctypes.c_void_p, [
	("address",		ctypes.POINTER(ctypes.c_int)),
	("lock_bit",		ctypes.c_int),] )

g_pointer_bit_lock = _rpythonic_function_(		"g_pointer_bit_lock", ctypes.c_void_p, [
	("address",		ctypes.POINTER(ctypes.c_void_p)),
	("lock_bit",		ctypes.c_int),] )

g_pointer_bit_trylock = _rpythonic_function_(		"g_pointer_bit_trylock", ctypes.c_int, [
	("address",		ctypes.POINTER(ctypes.c_void_p)),
	("lock_bit",		ctypes.c_int),] )

g_pointer_bit_unlock = _rpythonic_function_(		"g_pointer_bit_unlock", ctypes.c_void_p, [
	("address",		ctypes.POINTER(ctypes.c_void_p)),
	("lock_bit",		ctypes.c_int),] )

g_bookmark_file_error_quark = _rpythonic_function_(		"g_bookmark_file_error_quark", ctypes.c_uint, [] )

g_bookmark_file_new = _rpythonic_function_(		"g_bookmark_file_new", ctypes.POINTER(_GBookmarkFile), [] )

g_bookmark_file_free = _rpythonic_function_(		"g_bookmark_file_free", ctypes.c_void_p, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),] )

g_bookmark_file_load_from_file = _rpythonic_function_(		"g_bookmark_file_load_from_file", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_load_from_data = _rpythonic_function_(		"g_bookmark_file_load_from_data", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("data",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_ulong),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_load_from_data_dirs = _rpythonic_function_(		"g_bookmark_file_load_from_data_dirs", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("full_path",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_to_data = _rpythonic_function_(		"g_bookmark_file_to_data", ctypes.POINTER(ctypes.c_char), [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_to_file = _rpythonic_function_(		"g_bookmark_file_to_file", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_set_title = _rpythonic_function_(		"g_bookmark_file_set_title", ctypes.c_void_p, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("title",		ctypes.POINTER(ctypes.c_char)),] )

g_bookmark_file_get_title = _rpythonic_function_(		"g_bookmark_file_get_title", ctypes.POINTER(ctypes.c_char), [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_set_description = _rpythonic_function_(		"g_bookmark_file_set_description", ctypes.c_void_p, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("description",		ctypes.POINTER(ctypes.c_char)),] )

g_bookmark_file_get_description = _rpythonic_function_(		"g_bookmark_file_get_description", ctypes.POINTER(ctypes.c_char), [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_set_mime_type = _rpythonic_function_(		"g_bookmark_file_set_mime_type", ctypes.c_void_p, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("mime_type",		ctypes.POINTER(ctypes.c_char)),] )

g_bookmark_file_get_mime_type = _rpythonic_function_(		"g_bookmark_file_get_mime_type", ctypes.POINTER(ctypes.c_char), [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_set_groups = _rpythonic_function_(		"g_bookmark_file_set_groups", ctypes.c_void_p, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("groups",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("length",		ctypes.c_ulong),] )

g_bookmark_file_add_group = _rpythonic_function_(		"g_bookmark_file_add_group", ctypes.c_void_p, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("group",		ctypes.POINTER(ctypes.c_char)),] )

g_bookmark_file_has_group = _rpythonic_function_(		"g_bookmark_file_has_group", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("group",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_get_groups = _rpythonic_function_(		"g_bookmark_file_get_groups", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_add_application = _rpythonic_function_(		"g_bookmark_file_add_application", ctypes.c_void_p, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("C_exec",		ctypes.POINTER(ctypes.c_char)),] )

g_bookmark_file_has_application = _rpythonic_function_(		"g_bookmark_file_has_application", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_get_applications = _rpythonic_function_(		"g_bookmark_file_get_applications", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_set_app_info = _rpythonic_function_(		"g_bookmark_file_set_app_info", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("C_exec",		ctypes.POINTER(ctypes.c_char)),
	("count",		ctypes.c_int),
	("stamp",		ctypes.c_int64),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_get_app_info = _rpythonic_function_(		"g_bookmark_file_get_app_info", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("C_exec",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("count",		ctypes.POINTER(ctypes.c_uint)),
	("stamp",		ctypes.POINTER(ctypes.c_int64)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_set_is_private = _rpythonic_function_(		"g_bookmark_file_set_is_private", ctypes.c_void_p, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("is_private",		ctypes.c_int),] )

g_bookmark_file_get_is_private = _rpythonic_function_(		"g_bookmark_file_get_is_private", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_set_icon = _rpythonic_function_(		"g_bookmark_file_set_icon", ctypes.c_void_p, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("href",		ctypes.POINTER(ctypes.c_char)),
	("mime_type",		ctypes.POINTER(ctypes.c_char)),] )

g_bookmark_file_get_icon = _rpythonic_function_(		"g_bookmark_file_get_icon", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("href",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("mime_type",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_set_added = _rpythonic_function_(		"g_bookmark_file_set_added", ctypes.c_void_p, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("added",		ctypes.c_int64),] )

g_bookmark_file_get_added = _rpythonic_function_(		"g_bookmark_file_get_added", ctypes.c_int64, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_set_modified = _rpythonic_function_(		"g_bookmark_file_set_modified", ctypes.c_void_p, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("modified",		ctypes.c_int64),] )

g_bookmark_file_get_modified = _rpythonic_function_(		"g_bookmark_file_get_modified", ctypes.c_int64, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_set_visited = _rpythonic_function_(		"g_bookmark_file_set_visited", ctypes.c_void_p, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("visited",		ctypes.c_int64),] )

g_bookmark_file_get_visited = _rpythonic_function_(		"g_bookmark_file_get_visited", ctypes.c_int64, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_has_item = _rpythonic_function_(		"g_bookmark_file_has_item", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

g_bookmark_file_get_size = _rpythonic_function_(		"g_bookmark_file_get_size", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),] )

g_bookmark_file_get_uris = _rpythonic_function_(		"g_bookmark_file_get_uris", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),] )

g_bookmark_file_remove_group = _rpythonic_function_(		"g_bookmark_file_remove_group", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("group",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_remove_application = _rpythonic_function_(		"g_bookmark_file_remove_application", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_remove_item = _rpythonic_function_(		"g_bookmark_file_remove_item", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_move_item = _rpythonic_function_(		"g_bookmark_file_move_item", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("old_uri",		ctypes.POINTER(ctypes.c_char)),
	("new_uri",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_slice_alloc = _rpythonic_function_(		"g_slice_alloc", ctypes.POINTER(ctypes.c_void_p), [
	("block_size",		ctypes.c_ulong),] )

g_slice_alloc0 = _rpythonic_function_(		"g_slice_alloc0", ctypes.POINTER(ctypes.c_void_p), [
	("block_size",		ctypes.c_ulong),] )

g_slice_copy = _rpythonic_function_(		"g_slice_copy", ctypes.POINTER(ctypes.c_void_p), [
	("block_size",		ctypes.c_ulong),
	("mem_block",		ctypes.POINTER(ctypes.c_void_p)),] )

g_slice_free1 = _rpythonic_function_(		"g_slice_free1", ctypes.c_void_p, [
	("block_size",		ctypes.c_ulong),
	("mem_block",		ctypes.POINTER(ctypes.c_void_p)),] )

g_slice_free_chain_with_offset = _rpythonic_function_(		"g_slice_free_chain_with_offset", ctypes.c_void_p, [
	("block_size",		ctypes.c_ulong),
	("mem_chain",		ctypes.POINTER(ctypes.c_void_p)),
	("next_offset",		ctypes.c_ulong),] )

g_slice_set_config = _rpythonic_function_(		"g_slice_set_config", ctypes.c_void_p, [
	("ckey",		ctypes.c_int),
	("value",		ctypes.c_long),] )

g_slice_get_config = _rpythonic_function_(		"g_slice_get_config", ctypes.c_long, [
	("ckey",		ctypes.c_int),] )

g_slice_get_config_state = _rpythonic_function_(		"g_slice_get_config_state", ctypes.POINTER(ctypes.c_long), [
	("ckey",		ctypes.c_int),
	("address",		ctypes.c_long),
	("n_values",		ctypes.POINTER(ctypes.c_uint)),] )

g_free = _rpythonic_function_(		"g_free", ctypes.c_void_p, [("mem",		ctypes.c_void_p)] )

g_malloc = _rpythonic_function_(		"g_malloc", ctypes.POINTER(ctypes.c_void_p), [
	("n_bytes",		ctypes.c_ulong),] )

g_malloc0 = _rpythonic_function_(		"g_malloc0", ctypes.POINTER(ctypes.c_void_p), [
	("n_bytes",		ctypes.c_ulong),] )

g_realloc = _rpythonic_function_(		"g_realloc", ctypes.POINTER(ctypes.c_void_p), [
	("mem",		ctypes.POINTER(ctypes.c_void_p)),
	("n_bytes",		ctypes.c_ulong),] )

g_try_malloc = _rpythonic_function_(		"g_try_malloc", ctypes.POINTER(ctypes.c_void_p), [
	("n_bytes",		ctypes.c_ulong),] )

g_try_malloc0 = _rpythonic_function_(		"g_try_malloc0", ctypes.POINTER(ctypes.c_void_p), [
	("n_bytes",		ctypes.c_ulong),] )

g_try_realloc = _rpythonic_function_(		"g_try_realloc", ctypes.POINTER(ctypes.c_void_p), [
	("mem",		ctypes.POINTER(ctypes.c_void_p)),
	("n_bytes",		ctypes.c_ulong),] )

g_malloc_n = _rpythonic_function_(		"g_malloc_n", ctypes.POINTER(ctypes.c_void_p), [
	("n_blocks",		ctypes.c_ulong),
	("n_block_bytes",		ctypes.c_ulong),] )

g_malloc0_n = _rpythonic_function_(		"g_malloc0_n", ctypes.POINTER(ctypes.c_void_p), [
	("n_blocks",		ctypes.c_ulong),
	("n_block_bytes",		ctypes.c_ulong),] )

g_realloc_n = _rpythonic_function_(		"g_realloc_n", ctypes.POINTER(ctypes.c_void_p), [
	("mem",		ctypes.POINTER(ctypes.c_void_p)),
	("n_blocks",		ctypes.c_ulong),
	("n_block_bytes",		ctypes.c_ulong),] )

g_try_malloc_n = _rpythonic_function_(		"g_try_malloc_n", ctypes.POINTER(ctypes.c_void_p), [
	("n_blocks",		ctypes.c_ulong),
	("n_block_bytes",		ctypes.c_ulong),] )

g_try_malloc0_n = _rpythonic_function_(		"g_try_malloc0_n", ctypes.POINTER(ctypes.c_void_p), [
	("n_blocks",		ctypes.c_ulong),
	("n_block_bytes",		ctypes.c_ulong),] )

g_try_realloc_n = _rpythonic_function_(		"g_try_realloc_n", ctypes.POINTER(ctypes.c_void_p), [
	("mem",		ctypes.POINTER(ctypes.c_void_p)),
	("n_blocks",		ctypes.c_ulong),
	("n_block_bytes",		ctypes.c_ulong),] )

malloc = _rpythonic_function_(		"malloc", ctypes.POINTER(ctypes.c_void_p), [
	("n_bytes",		ctypes.c_ulong),] )

realloc = _rpythonic_function_(		"realloc", ctypes.POINTER(ctypes.c_void_p), [
	("mem",		ctypes.POINTER(ctypes.c_void_p)),
	("n_bytes",		ctypes.c_ulong),] )

free = _rpythonic_function_(		"free", ctypes.c_void_p, [("mem",		ctypes.c_void_p)] )

calloc = _rpythonic_function_(		"calloc", ctypes.POINTER(ctypes.c_void_p), [
	("n_blocks",		ctypes.c_ulong),
	("n_block_bytes",		ctypes.c_ulong),] )

try_malloc = _rpythonic_function_(		"try_malloc", ctypes.POINTER(ctypes.c_void_p), [
	("n_bytes",		ctypes.c_ulong),] )

try_realloc = _rpythonic_function_(		"try_realloc", ctypes.POINTER(ctypes.c_void_p), [
	("mem",		ctypes.POINTER(ctypes.c_void_p)),
	("n_bytes",		ctypes.c_ulong),] )

g_mem_set_vtable = _rpythonic_function_(		"g_mem_set_vtable", ctypes.c_void_p, [
	("vtable",		ctypes.POINTER(_GMemVTable)),] )

g_mem_is_system_malloc = _rpythonic_function_(		"g_mem_is_system_malloc", ctypes.c_int, [] )

g_mem_profile = _rpythonic_function_(		"g_mem_profile", ctypes.c_void_p, [] )

g_mem_chunk_new = _rpythonic_function_(		"g_mem_chunk_new", ctypes.POINTER(_GMemChunk), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("atom_size",		ctypes.c_int),
	("area_size",		ctypes.c_ulong),
	("C_type",		ctypes.c_int),] )

g_mem_chunk_destroy = _rpythonic_function_(		"g_mem_chunk_destroy", ctypes.c_void_p, [
	("mem_chunk",		ctypes.POINTER(_GMemChunk)),] )

g_mem_chunk_alloc = _rpythonic_function_(		"g_mem_chunk_alloc", ctypes.POINTER(ctypes.c_void_p), [
	("mem_chunk",		ctypes.POINTER(_GMemChunk)),] )

g_mem_chunk_alloc0 = _rpythonic_function_(		"g_mem_chunk_alloc0", ctypes.POINTER(ctypes.c_void_p), [
	("mem_chunk",		ctypes.POINTER(_GMemChunk)),] )

g_mem_chunk_free = _rpythonic_function_(		"g_mem_chunk_free", ctypes.c_void_p, [
	("mem_chunk",		ctypes.POINTER(_GMemChunk)),
	("mem",		ctypes.POINTER(ctypes.c_void_p)),] )

g_mem_chunk_clean = _rpythonic_function_(		"g_mem_chunk_clean", ctypes.c_void_p, [
	("mem_chunk",		ctypes.POINTER(_GMemChunk)),] )

g_mem_chunk_reset = _rpythonic_function_(		"g_mem_chunk_reset", ctypes.c_void_p, [
	("mem_chunk",		ctypes.POINTER(_GMemChunk)),] )

g_mem_chunk_print = _rpythonic_function_(		"g_mem_chunk_print", ctypes.c_void_p, [
	("mem_chunk",		ctypes.POINTER(_GMemChunk)),] )

g_mem_chunk_info = _rpythonic_function_(		"g_mem_chunk_info", ctypes.c_void_p, [] )

g_blow_chunks = _rpythonic_function_(		"g_blow_chunks", ctypes.c_void_p, [] )

g_allocator_new = _rpythonic_function_(		"g_allocator_new", ctypes.POINTER(_GAllocator), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("n_preallocs",		ctypes.c_uint),] )

g_allocator_free = _rpythonic_function_(		"g_allocator_free", ctypes.c_void_p, [
	("allocator",		ctypes.POINTER(_GAllocator)),] )

g_list_alloc = _rpythonic_function_(		"g_list_alloc", ctypes.POINTER(_GList), [] )

g_list_free = _rpythonic_function_(		"g_list_free", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GList)),] )

g_list_free_1 = _rpythonic_function_(		"g_list_free_1", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GList)),] )

g_list_free_full = _rpythonic_function_(		"g_list_free_full", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GList)),
	("free_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_list_append = _rpythonic_function_(		"g_list_append", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_list_prepend = _rpythonic_function_(		"g_list_prepend", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_list_insert = _rpythonic_function_(		"g_list_insert", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("position",		ctypes.c_int),] )

g_list_insert_sorted = _rpythonic_function_(		"g_list_insert_sorted", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_list_insert_sorted_with_data = _rpythonic_function_(		"g_list_insert_sorted_with_data", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_list_insert_before = _rpythonic_function_(		"g_list_insert_before", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("sibling",		ctypes.POINTER(_GList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_list_concat = _rpythonic_function_(		"g_list_concat", ctypes.POINTER(_GList), [
	("list1",		ctypes.POINTER(_GList)),
	("list2",		ctypes.POINTER(_GList)),] )

g_list_remove = _rpythonic_function_(		"g_list_remove", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_list_remove_all = _rpythonic_function_(		"g_list_remove_all", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_list_remove_link = _rpythonic_function_(		"g_list_remove_link", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("llink",		ctypes.POINTER(_GList)),] )

g_list_delete_link = _rpythonic_function_(		"g_list_delete_link", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("link_",		ctypes.POINTER(_GList)),] )

g_list_reverse = _rpythonic_function_(		"g_list_reverse", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),] )

g_list_copy = _rpythonic_function_(		"g_list_copy", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),] )

g_list_nth = _rpythonic_function_(		"g_list_nth", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("n",		ctypes.c_uint),] )

g_list_nth_prev = _rpythonic_function_(		"g_list_nth_prev", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("n",		ctypes.c_uint),] )

g_list_find = _rpythonic_function_(		"g_list_find", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_list_find_custom = _rpythonic_function_(		"g_list_find_custom", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_list_position = _rpythonic_function_(		"g_list_position", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GList)),
	("llink",		ctypes.POINTER(_GList)),] )

g_list_index = _rpythonic_function_(		"g_list_index", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_list_last = _rpythonic_function_(		"g_list_last", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),] )

g_list_first = _rpythonic_function_(		"g_list_first", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),] )

g_list_length = _rpythonic_function_(		"g_list_length", ctypes.c_uint, [
	("C_list",		ctypes.POINTER(_GList)),] )

g_list_foreach = _rpythonic_function_(		"g_list_foreach", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GList)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_list_sort = _rpythonic_function_(		"g_list_sort", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_list_sort_with_data = _rpythonic_function_(		"g_list_sort_with_data", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_list_nth_data = _rpythonic_function_(		"g_list_nth_data", ctypes.POINTER(ctypes.c_void_p), [
	("C_list",		ctypes.POINTER(_GList)),
	("n",		ctypes.c_uint),] )

g_list_push_allocator = _rpythonic_function_(		"g_list_push_allocator", ctypes.c_void_p, [("allocator",		ctypes.c_void_p)] )

g_list_pop_allocator = _rpythonic_function_(		"g_list_pop_allocator", ctypes.c_void_p, [] )

GCacheNewFunc = _rpythonic_function_(		"GCacheNewFunc", ctypes.POINTER(ctypes.c_void_p), [("key",		ctypes.c_void_p)] )

GCacheDupFunc = _rpythonic_function_(		"GCacheDupFunc", ctypes.POINTER(ctypes.c_void_p), [("value",		ctypes.c_void_p)] )

GCacheDestroyFunc = _rpythonic_function_(		"GCacheDestroyFunc", ctypes.c_void_p, [("value",		ctypes.c_void_p)] )

g_cache_new = _rpythonic_function_(		"g_cache_new", ctypes.POINTER(_GCache), [
	("value_new_func",		ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), )),
	("value_destroy_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("key_dup_func",		ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), )),
	("key_destroy_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("hash_key_func",		ctypes.CFUNCTYPE(ctypes.c_uint, )),
	("hash_value_func",		ctypes.CFUNCTYPE(ctypes.c_uint, )),
	("key_equal_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_cache_destroy = _rpythonic_function_(		"g_cache_destroy", ctypes.c_void_p, [
	("cache",		ctypes.POINTER(_GCache)),] )

g_cache_insert = _rpythonic_function_(		"g_cache_insert", ctypes.POINTER(ctypes.c_void_p), [
	("cache",		ctypes.POINTER(_GCache)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cache_remove = _rpythonic_function_(		"g_cache_remove", ctypes.c_void_p, [
	("cache",		ctypes.POINTER(_GCache)),
	("value",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cache_key_foreach = _rpythonic_function_(		"g_cache_key_foreach", ctypes.c_void_p, [
	("cache",		ctypes.POINTER(_GCache)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cache_value_foreach = _rpythonic_function_(		"g_cache_value_foreach", ctypes.c_void_p, [
	("cache",		ctypes.POINTER(_GCache)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_checksum_type_get_length = _rpythonic_function_(		"g_checksum_type_get_length", ctypes.c_long, [
	("checksum_type",		ctypes.c_int),] )

g_checksum_new = _rpythonic_function_(		"g_checksum_new", ctypes.POINTER(_GChecksum), [
	("checksum_type",		ctypes.c_int),] )

g_checksum_reset = _rpythonic_function_(		"g_checksum_reset", ctypes.c_void_p, [
	("checksum",		ctypes.POINTER(_GChecksum)),] )

g_checksum_copy = _rpythonic_function_(		"g_checksum_copy", ctypes.POINTER(_GChecksum), [
	("checksum",		ctypes.POINTER(_GChecksum)),] )

g_checksum_free = _rpythonic_function_(		"g_checksum_free", ctypes.c_void_p, [
	("checksum",		ctypes.POINTER(_GChecksum)),] )

g_checksum_update = _rpythonic_function_(		"g_checksum_update", ctypes.c_void_p, [
	("checksum",		ctypes.POINTER(_GChecksum)),
	("data",		ctypes.POINTER(ctypes.c_ubyte)),
	("length",		ctypes.c_long),] )

g_checksum_get_string = _rpythonic_function_(		"g_checksum_get_string", ctypes.POINTER(ctypes.c_char), [
	("checksum",		ctypes.POINTER(_GChecksum)),] )

g_checksum_get_digest = _rpythonic_function_(		"g_checksum_get_digest", ctypes.c_void_p, [
	("checksum",		ctypes.POINTER(_GChecksum)),
	("buffer",		ctypes.POINTER(ctypes.c_ubyte)),
	("digest_len",		ctypes.POINTER(ctypes.c_ulong)),] )

g_compute_checksum_for_data = _rpythonic_function_(		"g_compute_checksum_for_data", ctypes.POINTER(ctypes.c_char), [
	("checksum_type",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_ubyte)),
	("length",		ctypes.c_ulong),] )

g_compute_checksum_for_string = _rpythonic_function_(		"g_compute_checksum_for_string", ctypes.POINTER(ctypes.c_char), [
	("checksum_type",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_long),] )

GCompletionFunc = _rpythonic_function_(		"GCompletionFunc", ctypes.POINTER(ctypes.c_char), [] )

GCompletionStrncmpFunc = _rpythonic_function_(		"GCompletionStrncmpFunc", ctypes.c_int, [
	("s1",		ctypes.POINTER(ctypes.c_char)),
	("s2",		ctypes.POINTER(ctypes.c_char)),
	("n",		ctypes.c_ulong),] )

g_completion_new = _rpythonic_function_(		"g_completion_new", ctypes.POINTER(_GCompletion), [
	("func",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_char), ))),] )

g_completion_add_items = _rpythonic_function_(		"g_completion_add_items", ctypes.c_void_p, [
	("cmp",		ctypes.POINTER(_GCompletion)),
	("items",		ctypes.POINTER(_GList)),] )

g_completion_remove_items = _rpythonic_function_(		"g_completion_remove_items", ctypes.c_void_p, [
	("cmp",		ctypes.POINTER(_GCompletion)),
	("items",		ctypes.POINTER(_GList)),] )

g_completion_clear_items = _rpythonic_function_(		"g_completion_clear_items", ctypes.c_void_p, [
	("cmp",		ctypes.POINTER(_GCompletion)),] )

g_completion_complete = _rpythonic_function_(		"g_completion_complete", ctypes.POINTER(_GList), [
	("cmp",		ctypes.POINTER(_GCompletion)),
	("prefix",		ctypes.POINTER(ctypes.c_char)),
	("new_prefix",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_completion_complete_utf8 = _rpythonic_function_(		"g_completion_complete_utf8", ctypes.POINTER(_GList), [
	("cmp",		ctypes.POINTER(_GCompletion)),
	("prefix",		ctypes.POINTER(ctypes.c_char)),
	("new_prefix",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_completion_set_compare = _rpythonic_function_(		"g_completion_set_compare", ctypes.c_void_p, [
	("cmp",		ctypes.POINTER(_GCompletion)),
	("strncmp_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.c_ulong,)),] )

g_completion_free = _rpythonic_function_(		"g_completion_free", ctypes.c_void_p, [
	("cmp",		ctypes.POINTER(_GCompletion)),] )

g_convert_error_quark = _rpythonic_function_(		"g_convert_error_quark", ctypes.c_uint, [] )

g_iconv_open = _rpythonic_function_(		"g_iconv_open", ctypes.POINTER(_GIConv), [
	("to_codeset",		ctypes.POINTER(ctypes.c_char)),
	("from_codeset",		ctypes.POINTER(ctypes.c_char)),] )

g_iconv = _rpythonic_function_(		"g_iconv", ctypes.c_ulong, [
	("converter",		ctypes.POINTER(_GIConv)),
	("inbuf",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("inbytes_left",		ctypes.POINTER(ctypes.c_ulong)),
	("outbuf",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("outbytes_left",		ctypes.POINTER(ctypes.c_ulong)),] )

g_iconv_close = _rpythonic_function_(		"g_iconv_close", ctypes.c_int, [
	("converter",		ctypes.POINTER(_GIConv)),] )

g_convert = _rpythonic_function_(		"g_convert", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),
	("to_codeset",		ctypes.POINTER(ctypes.c_char)),
	("from_codeset",		ctypes.POINTER(ctypes.c_char)),
	("bytes_read",		ctypes.POINTER(ctypes.c_ulong)),
	("bytes_written",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_convert_with_iconv = _rpythonic_function_(		"g_convert_with_iconv", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),
	("converter",		ctypes.POINTER(_GIConv)),
	("bytes_read",		ctypes.POINTER(ctypes.c_ulong)),
	("bytes_written",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_convert_with_fallback = _rpythonic_function_(		"g_convert_with_fallback", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),
	("to_codeset",		ctypes.POINTER(ctypes.c_char)),
	("from_codeset",		ctypes.POINTER(ctypes.c_char)),
	("fallback",		ctypes.POINTER(ctypes.c_char)),
	("bytes_read",		ctypes.POINTER(ctypes.c_ulong)),
	("bytes_written",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_locale_to_utf8 = _rpythonic_function_(		"g_locale_to_utf8", ctypes.POINTER(ctypes.c_char), [
	("opsysstring",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),
	("bytes_read",		ctypes.POINTER(ctypes.c_ulong)),
	("bytes_written",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_locale_from_utf8 = _rpythonic_function_(		"g_locale_from_utf8", ctypes.POINTER(ctypes.c_char), [
	("utf8string",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),
	("bytes_read",		ctypes.POINTER(ctypes.c_ulong)),
	("bytes_written",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_filename_to_utf8 = _rpythonic_function_(		"g_filename_to_utf8", ctypes.POINTER(ctypes.c_char), [
	("opsysstring",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),
	("bytes_read",		ctypes.POINTER(ctypes.c_ulong)),
	("bytes_written",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_filename_from_utf8 = _rpythonic_function_(		"g_filename_from_utf8", ctypes.POINTER(ctypes.c_char), [
	("utf8string",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),
	("bytes_read",		ctypes.POINTER(ctypes.c_ulong)),
	("bytes_written",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_filename_from_uri = _rpythonic_function_(		"g_filename_from_uri", ctypes.POINTER(ctypes.c_char), [
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("hostname",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_filename_to_uri = _rpythonic_function_(		"g_filename_to_uri", ctypes.POINTER(ctypes.c_char), [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("hostname",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_filename_display_name = _rpythonic_function_(		"g_filename_display_name", ctypes.POINTER(ctypes.c_char), [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

g_get_filename_charsets = _rpythonic_function_(		"g_get_filename_charsets", ctypes.c_int, [
	("charsets",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(ctypes.c_char)))),] )

g_filename_display_basename = _rpythonic_function_(		"g_filename_display_basename", ctypes.POINTER(ctypes.c_char), [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

g_uri_list_extract_uris = _rpythonic_function_(		"g_uri_list_extract_uris", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("uri_list",		ctypes.POINTER(ctypes.c_char)),] )

GDataForeachFunc = _rpythonic_function_(		"GDataForeachFunc", ctypes.c_void_p, [
	("key_id",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_datalist_init = _rpythonic_function_(		"g_datalist_init", ctypes.c_void_p, [
	("datalist",		ctypes.POINTER(ctypes.POINTER(_GData))),] )

g_datalist_clear = _rpythonic_function_(		"g_datalist_clear", ctypes.c_void_p, [
	("datalist",		ctypes.POINTER(ctypes.POINTER(_GData))),] )

g_datalist_id_get_data = _rpythonic_function_(		"g_datalist_id_get_data", ctypes.POINTER(ctypes.c_void_p), [
	("datalist",		ctypes.POINTER(ctypes.POINTER(_GData))),
	("key_id",		ctypes.c_uint),] )

g_datalist_id_set_data_full = _rpythonic_function_(		"g_datalist_id_set_data_full", ctypes.c_void_p, [
	("datalist",		ctypes.POINTER(ctypes.POINTER(_GData))),
	("key_id",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_datalist_id_remove_no_notify = _rpythonic_function_(		"g_datalist_id_remove_no_notify", ctypes.POINTER(ctypes.c_void_p), [
	("datalist",		ctypes.POINTER(ctypes.POINTER(_GData))),
	("key_id",		ctypes.c_uint),] )

g_datalist_foreach = _rpythonic_function_(		"g_datalist_foreach", ctypes.c_void_p, [
	("datalist",		ctypes.POINTER(ctypes.POINTER(_GData))),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_uint,ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_datalist_set_flags = _rpythonic_function_(		"g_datalist_set_flags", ctypes.c_void_p, [
	("datalist",		ctypes.POINTER(ctypes.POINTER(_GData))),
	("flags",		ctypes.c_uint),] )

g_datalist_unset_flags = _rpythonic_function_(		"g_datalist_unset_flags", ctypes.c_void_p, [
	("datalist",		ctypes.POINTER(ctypes.POINTER(_GData))),
	("flags",		ctypes.c_uint),] )

g_datalist_get_flags = _rpythonic_function_(		"g_datalist_get_flags", ctypes.c_uint, [
	("datalist",		ctypes.POINTER(ctypes.POINTER(_GData))),] )

g_dataset_destroy = _rpythonic_function_(		"g_dataset_destroy", ctypes.c_void_p, [("dataset_location",		ctypes.c_void_p)] )

g_dataset_id_get_data = _rpythonic_function_(		"g_dataset_id_get_data", ctypes.POINTER(ctypes.c_void_p), [
	("dataset_location",		ctypes.POINTER(ctypes.c_void_p)),
	("key_id",		ctypes.c_uint),] )

g_datalist_get_data = _rpythonic_function_(		"g_datalist_get_data", ctypes.POINTER(ctypes.c_void_p), [
	("datalist",		ctypes.POINTER(ctypes.POINTER(_GData))),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

g_dataset_id_set_data_full = _rpythonic_function_(		"g_dataset_id_set_data_full", ctypes.c_void_p, [
	("dataset_location",		ctypes.POINTER(ctypes.c_void_p)),
	("key_id",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_dataset_id_remove_no_notify = _rpythonic_function_(		"g_dataset_id_remove_no_notify", ctypes.POINTER(ctypes.c_void_p), [
	("dataset_location",		ctypes.POINTER(ctypes.c_void_p)),
	("key_id",		ctypes.c_uint),] )

g_dataset_foreach = _rpythonic_function_(		"g_dataset_foreach", ctypes.c_void_p, [
	("dataset_location",		ctypes.POINTER(ctypes.c_void_p)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_uint,ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_date_new = _rpythonic_function_(		"g_date_new", ctypes.POINTER(_GDate), [] )

g_date_new_dmy = _rpythonic_function_(		"g_date_new_dmy", ctypes.POINTER(_GDate), [
	("day",		ctypes.c_ubyte),
	("month",		ctypes.c_int),
	("year",		ctypes.c_ushort),] )

g_date_new_julian = _rpythonic_function_(		"g_date_new_julian", ctypes.POINTER(_GDate), [
	("julian_day",		ctypes.c_uint),] )

g_date_free = _rpythonic_function_(		"g_date_free", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),] )

g_date_valid = _rpythonic_function_(		"g_date_valid", ctypes.c_int, [
	("date",		ctypes.POINTER(_GDate)),] )

g_date_valid_day = _rpythonic_function_(		"g_date_valid_day", ctypes.c_int, [
	("day",		ctypes.c_ubyte),] )

g_date_valid_month = _rpythonic_function_(		"g_date_valid_month", ctypes.c_int, [
	("month",		ctypes.c_int),] )

g_date_valid_year = _rpythonic_function_(		"g_date_valid_year", ctypes.c_int, [
	("year",		ctypes.c_ushort),] )

g_date_valid_weekday = _rpythonic_function_(		"g_date_valid_weekday", ctypes.c_int, [
	("weekday",		ctypes.c_int),] )

g_date_valid_julian = _rpythonic_function_(		"g_date_valid_julian", ctypes.c_int, [
	("julian_date",		ctypes.c_uint),] )

g_date_valid_dmy = _rpythonic_function_(		"g_date_valid_dmy", ctypes.c_int, [
	("day",		ctypes.c_ubyte),
	("month",		ctypes.c_int),
	("year",		ctypes.c_ushort),] )

g_date_get_weekday = _rpythonic_function_(		"g_date_get_weekday", ctypes.c_int, [
	("date",		ctypes.POINTER(_GDate)),] )

g_date_get_month = _rpythonic_function_(		"g_date_get_month", ctypes.c_int, [
	("date",		ctypes.POINTER(_GDate)),] )

g_date_get_year = _rpythonic_function_(		"g_date_get_year", ctypes.c_ushort, [
	("date",		ctypes.POINTER(_GDate)),] )

g_date_get_day = _rpythonic_function_(		"g_date_get_day", ctypes.c_ubyte, [
	("date",		ctypes.POINTER(_GDate)),] )

g_date_get_julian = _rpythonic_function_(		"g_date_get_julian", ctypes.c_uint, [
	("date",		ctypes.POINTER(_GDate)),] )

g_date_get_day_of_year = _rpythonic_function_(		"g_date_get_day_of_year", ctypes.c_uint, [
	("date",		ctypes.POINTER(_GDate)),] )

g_date_get_monday_week_of_year = _rpythonic_function_(		"g_date_get_monday_week_of_year", ctypes.c_uint, [
	("date",		ctypes.POINTER(_GDate)),] )

g_date_get_sunday_week_of_year = _rpythonic_function_(		"g_date_get_sunday_week_of_year", ctypes.c_uint, [
	("date",		ctypes.POINTER(_GDate)),] )

g_date_get_iso8601_week_of_year = _rpythonic_function_(		"g_date_get_iso8601_week_of_year", ctypes.c_uint, [
	("date",		ctypes.POINTER(_GDate)),] )

g_date_clear = _rpythonic_function_(		"g_date_clear", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("n_dates",		ctypes.c_uint),] )

g_date_set_parse = _rpythonic_function_(		"g_date_set_parse", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

g_date_set_time_t = _rpythonic_function_(		"g_date_set_time_t", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("timet",		ctypes.c_int64),] )

g_date_set_time_val = _rpythonic_function_(		"g_date_set_time_val", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("timeval",		ctypes.POINTER(_GTimeVal)),] )

g_date_set_time = _rpythonic_function_(		"g_date_set_time", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("time_",		ctypes.c_int),] )

g_date_set_month = _rpythonic_function_(		"g_date_set_month", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("month",		ctypes.c_int),] )

g_date_set_day = _rpythonic_function_(		"g_date_set_day", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("day",		ctypes.c_ubyte),] )

g_date_set_year = _rpythonic_function_(		"g_date_set_year", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("year",		ctypes.c_ushort),] )

g_date_set_dmy = _rpythonic_function_(		"g_date_set_dmy", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("day",		ctypes.c_ubyte),
	("month",		ctypes.c_int),
	("y",		ctypes.c_ushort),] )

g_date_set_julian = _rpythonic_function_(		"g_date_set_julian", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("julian_date",		ctypes.c_uint),] )

g_date_is_first_of_month = _rpythonic_function_(		"g_date_is_first_of_month", ctypes.c_int, [
	("date",		ctypes.POINTER(_GDate)),] )

g_date_is_last_of_month = _rpythonic_function_(		"g_date_is_last_of_month", ctypes.c_int, [
	("date",		ctypes.POINTER(_GDate)),] )

g_date_add_days = _rpythonic_function_(		"g_date_add_days", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("n_days",		ctypes.c_uint),] )

g_date_subtract_days = _rpythonic_function_(		"g_date_subtract_days", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("n_days",		ctypes.c_uint),] )

g_date_add_months = _rpythonic_function_(		"g_date_add_months", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("n_months",		ctypes.c_uint),] )

g_date_subtract_months = _rpythonic_function_(		"g_date_subtract_months", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("n_months",		ctypes.c_uint),] )

g_date_add_years = _rpythonic_function_(		"g_date_add_years", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("n_years",		ctypes.c_uint),] )

g_date_subtract_years = _rpythonic_function_(		"g_date_subtract_years", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("n_years",		ctypes.c_uint),] )

g_date_is_leap_year = _rpythonic_function_(		"g_date_is_leap_year", ctypes.c_int, [
	("year",		ctypes.c_ushort),] )

g_date_get_days_in_month = _rpythonic_function_(		"g_date_get_days_in_month", ctypes.c_ubyte, [
	("month",		ctypes.c_int),
	("year",		ctypes.c_ushort),] )

g_date_get_monday_weeks_in_year = _rpythonic_function_(		"g_date_get_monday_weeks_in_year", ctypes.c_ubyte, [
	("year",		ctypes.c_ushort),] )

g_date_get_sunday_weeks_in_year = _rpythonic_function_(		"g_date_get_sunday_weeks_in_year", ctypes.c_ubyte, [
	("year",		ctypes.c_ushort),] )

g_date_days_between = _rpythonic_function_(		"g_date_days_between", ctypes.c_int, [
	("date1",		ctypes.POINTER(_GDate)),
	("date2",		ctypes.POINTER(_GDate)),] )

g_date_compare = _rpythonic_function_(		"g_date_compare", ctypes.c_int, [
	("lhs",		ctypes.POINTER(_GDate)),
	("rhs",		ctypes.POINTER(_GDate)),] )

g_date_to_struct_tm = _rpythonic_function_(		"g_date_to_struct_tm", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("tm",		ctypes.POINTER(tm)),] )

g_date_clamp = _rpythonic_function_(		"g_date_clamp", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("min_date",		ctypes.POINTER(_GDate)),
	("max_date",		ctypes.POINTER(_GDate)),] )

g_date_order = _rpythonic_function_(		"g_date_order", ctypes.c_void_p, [
	("date1",		ctypes.POINTER(_GDate)),
	("date2",		ctypes.POINTER(_GDate)),] )

g_date_strftime = _rpythonic_function_(		"g_date_strftime", ctypes.c_ulong, [
	("s",		ctypes.POINTER(ctypes.c_char)),
	("slen",		ctypes.c_ulong),
	("format",		ctypes.POINTER(ctypes.c_char)),
	("date",		ctypes.POINTER(_GDate)),] )

g_time_zone_new = _rpythonic_function_(		"g_time_zone_new", ctypes.POINTER(_GTimeZone), [
	("identifier",		ctypes.POINTER(ctypes.c_char)),] )

g_time_zone_new_utc = _rpythonic_function_(		"g_time_zone_new_utc", ctypes.POINTER(_GTimeZone), [] )

g_time_zone_new_local = _rpythonic_function_(		"g_time_zone_new_local", ctypes.POINTER(_GTimeZone), [] )

g_time_zone_ref = _rpythonic_function_(		"g_time_zone_ref", ctypes.POINTER(_GTimeZone), [
	("tz",		ctypes.POINTER(_GTimeZone)),] )

g_time_zone_unref = _rpythonic_function_(		"g_time_zone_unref", ctypes.c_void_p, [
	("tz",		ctypes.POINTER(_GTimeZone)),] )

g_time_zone_find_interval = _rpythonic_function_(		"g_time_zone_find_interval", ctypes.c_int, [
	("tz",		ctypes.POINTER(_GTimeZone)),
	("C_type",		ctypes.c_int),
	("time_",		ctypes.c_long),] )

g_time_zone_adjust_time = _rpythonic_function_(		"g_time_zone_adjust_time", ctypes.c_int, [
	("tz",		ctypes.POINTER(_GTimeZone)),
	("C_type",		ctypes.c_int),
	("time_",		ctypes.POINTER(ctypes.c_long)),] )

g_time_zone_get_abbreviation = _rpythonic_function_(		"g_time_zone_get_abbreviation", ctypes.POINTER(ctypes.c_char), [
	("tz",		ctypes.POINTER(_GTimeZone)),
	("interval",		ctypes.c_int),] )

g_time_zone_get_offset = _rpythonic_function_(		"g_time_zone_get_offset", ctypes.c_int, [
	("tz",		ctypes.POINTER(_GTimeZone)),
	("interval",		ctypes.c_int),] )

g_time_zone_is_dst = _rpythonic_function_(		"g_time_zone_is_dst", ctypes.c_int, [
	("tz",		ctypes.POINTER(_GTimeZone)),
	("interval",		ctypes.c_int),] )

g_date_time_unref = _rpythonic_function_(		"g_date_time_unref", ctypes.c_void_p, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_ref = _rpythonic_function_(		"g_date_time_ref", ctypes.POINTER(_GDateTime), [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_new_now = _rpythonic_function_(		"g_date_time_new_now", ctypes.POINTER(_GDateTime), [
	("tz",		ctypes.POINTER(_GTimeZone)),] )

g_date_time_new_now_local = _rpythonic_function_(		"g_date_time_new_now_local", ctypes.POINTER(_GDateTime), [] )

g_date_time_new_now_utc = _rpythonic_function_(		"g_date_time_new_now_utc", ctypes.POINTER(_GDateTime), [] )

g_date_time_new_from_unix_local = _rpythonic_function_(		"g_date_time_new_from_unix_local", ctypes.POINTER(_GDateTime), [
	("t",		ctypes.c_long),] )

g_date_time_new_from_unix_utc = _rpythonic_function_(		"g_date_time_new_from_unix_utc", ctypes.POINTER(_GDateTime), [
	("t",		ctypes.c_long),] )

g_date_time_new_from_timeval_local = _rpythonic_function_(		"g_date_time_new_from_timeval_local", ctypes.POINTER(_GDateTime), [
	("tv",		ctypes.POINTER(_GTimeVal)),] )

g_date_time_new_from_timeval_utc = _rpythonic_function_(		"g_date_time_new_from_timeval_utc", ctypes.POINTER(_GDateTime), [
	("tv",		ctypes.POINTER(_GTimeVal)),] )

g_date_time_new = _rpythonic_function_(		"g_date_time_new", ctypes.POINTER(_GDateTime), [
	("tz",		ctypes.POINTER(_GTimeZone)),
	("year",		ctypes.c_int),
	("month",		ctypes.c_int),
	("day",		ctypes.c_int),
	("hour",		ctypes.c_int),
	("minute",		ctypes.c_int),
	("seconds",		ctypes.c_double),] )

g_date_time_new_local = _rpythonic_function_(		"g_date_time_new_local", ctypes.POINTER(_GDateTime), [
	("year",		ctypes.c_int),
	("month",		ctypes.c_int),
	("day",		ctypes.c_int),
	("hour",		ctypes.c_int),
	("minute",		ctypes.c_int),
	("seconds",		ctypes.c_double),] )

g_date_time_new_utc = _rpythonic_function_(		"g_date_time_new_utc", ctypes.POINTER(_GDateTime), [
	("year",		ctypes.c_int),
	("month",		ctypes.c_int),
	("day",		ctypes.c_int),
	("hour",		ctypes.c_int),
	("minute",		ctypes.c_int),
	("seconds",		ctypes.c_double),] )

g_date_time_add = _rpythonic_function_(		"g_date_time_add", ctypes.POINTER(_GDateTime), [
	("datetime",		ctypes.POINTER(_GDateTime)),
	("timespan",		ctypes.c_long),] )

g_date_time_add_months = _rpythonic_function_(		"g_date_time_add_months", ctypes.POINTER(_GDateTime), [
	("datetime",		ctypes.POINTER(_GDateTime)),
	("months",		ctypes.c_int),] )

g_date_time_add_weeks = _rpythonic_function_(		"g_date_time_add_weeks", ctypes.POINTER(_GDateTime), [
	("datetime",		ctypes.POINTER(_GDateTime)),
	("weeks",		ctypes.c_int),] )

g_date_time_add_days = _rpythonic_function_(		"g_date_time_add_days", ctypes.POINTER(_GDateTime), [
	("datetime",		ctypes.POINTER(_GDateTime)),
	("days",		ctypes.c_int),] )

g_date_time_add_hours = _rpythonic_function_(		"g_date_time_add_hours", ctypes.POINTER(_GDateTime), [
	("datetime",		ctypes.POINTER(_GDateTime)),
	("hours",		ctypes.c_int),] )

g_date_time_add_minutes = _rpythonic_function_(		"g_date_time_add_minutes", ctypes.POINTER(_GDateTime), [
	("datetime",		ctypes.POINTER(_GDateTime)),
	("minutes",		ctypes.c_int),] )

g_date_time_add_seconds = _rpythonic_function_(		"g_date_time_add_seconds", ctypes.POINTER(_GDateTime), [
	("datetime",		ctypes.POINTER(_GDateTime)),
	("seconds",		ctypes.c_double),] )

g_date_time_add_full = _rpythonic_function_(		"g_date_time_add_full", ctypes.POINTER(_GDateTime), [
	("datetime",		ctypes.POINTER(_GDateTime)),
	("years",		ctypes.c_int),
	("months",		ctypes.c_int),
	("days",		ctypes.c_int),
	("hours",		ctypes.c_int),
	("minutes",		ctypes.c_int),
	("seconds",		ctypes.c_double),] )

g_date_time_compare = _rpythonic_function_(		"g_date_time_compare", ctypes.c_int, [
	("dt1",		ctypes.POINTER(ctypes.c_void_p)),
	("dt2",		ctypes.POINTER(ctypes.c_void_p)),] )

g_date_time_difference = _rpythonic_function_(		"g_date_time_difference", ctypes.c_long, [
	("end",		ctypes.POINTER(_GDateTime)),
	("begin",		ctypes.POINTER(_GDateTime)),] )

g_date_time_hash = _rpythonic_function_(		"g_date_time_hash", ctypes.c_uint, [("datetime",		ctypes.c_void_p)] )

g_date_time_equal = _rpythonic_function_(		"g_date_time_equal", ctypes.c_int, [
	("dt1",		ctypes.POINTER(ctypes.c_void_p)),
	("dt2",		ctypes.POINTER(ctypes.c_void_p)),] )

g_date_time_get_ymd = _rpythonic_function_(		"g_date_time_get_ymd", ctypes.c_void_p, [
	("datetime",		ctypes.POINTER(_GDateTime)),
	("year",		ctypes.POINTER(ctypes.c_int)),
	("month",		ctypes.POINTER(ctypes.c_int)),
	("day",		ctypes.POINTER(ctypes.c_int)),] )

g_date_time_get_year = _rpythonic_function_(		"g_date_time_get_year", ctypes.c_int, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_get_month = _rpythonic_function_(		"g_date_time_get_month", ctypes.c_int, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_get_day_of_month = _rpythonic_function_(		"g_date_time_get_day_of_month", ctypes.c_int, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_get_week_numbering_year = _rpythonic_function_(		"g_date_time_get_week_numbering_year", ctypes.c_int, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_get_week_of_year = _rpythonic_function_(		"g_date_time_get_week_of_year", ctypes.c_int, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_get_day_of_week = _rpythonic_function_(		"g_date_time_get_day_of_week", ctypes.c_int, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_get_day_of_year = _rpythonic_function_(		"g_date_time_get_day_of_year", ctypes.c_int, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_get_hour = _rpythonic_function_(		"g_date_time_get_hour", ctypes.c_int, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_get_minute = _rpythonic_function_(		"g_date_time_get_minute", ctypes.c_int, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_get_second = _rpythonic_function_(		"g_date_time_get_second", ctypes.c_int, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_get_microsecond = _rpythonic_function_(		"g_date_time_get_microsecond", ctypes.c_int, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_get_seconds = _rpythonic_function_(		"g_date_time_get_seconds", ctypes.c_double, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_to_unix = _rpythonic_function_(		"g_date_time_to_unix", ctypes.c_long, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_to_timeval = _rpythonic_function_(		"g_date_time_to_timeval", ctypes.c_int, [
	("datetime",		ctypes.POINTER(_GDateTime)),
	("tv",		ctypes.POINTER(_GTimeVal)),] )

g_date_time_get_utc_offset = _rpythonic_function_(		"g_date_time_get_utc_offset", ctypes.c_long, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_get_timezone_abbreviation = _rpythonic_function_(		"g_date_time_get_timezone_abbreviation", ctypes.POINTER(ctypes.c_char), [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_is_daylight_savings = _rpythonic_function_(		"g_date_time_is_daylight_savings", ctypes.c_int, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_to_timezone = _rpythonic_function_(		"g_date_time_to_timezone", ctypes.POINTER(_GDateTime), [
	("datetime",		ctypes.POINTER(_GDateTime)),
	("tz",		ctypes.POINTER(_GTimeZone)),] )

g_date_time_to_local = _rpythonic_function_(		"g_date_time_to_local", ctypes.POINTER(_GDateTime), [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_to_utc = _rpythonic_function_(		"g_date_time_to_utc", ctypes.POINTER(_GDateTime), [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_format = _rpythonic_function_(		"g_date_time_format", ctypes.POINTER(ctypes.c_char), [
	("datetime",		ctypes.POINTER(_GDateTime)),
	("format",		ctypes.POINTER(ctypes.c_char)),] )

g_dir_open = _rpythonic_function_(		"g_dir_open", ctypes.POINTER(_GDir), [
	("path",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_uint),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dir_read_name = _rpythonic_function_(		"g_dir_read_name", ctypes.POINTER(ctypes.c_char), [
	("dir",		ctypes.POINTER(_GDir)),] )

g_dir_rewind = _rpythonic_function_(		"g_dir_rewind", ctypes.c_void_p, [
	("dir",		ctypes.POINTER(_GDir)),] )

g_dir_close = _rpythonic_function_(		"g_dir_close", ctypes.c_void_p, [
	("dir",		ctypes.POINTER(_GDir)),] )

g_file_error_quark = _rpythonic_function_(		"g_file_error_quark", ctypes.c_uint, [] )

g_file_error_from_errno = _rpythonic_function_(		"g_file_error_from_errno", ctypes.c_int, [
	("err_no",		ctypes.c_int),] )

g_file_test = _rpythonic_function_(		"g_file_test", ctypes.c_int, [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("test",		ctypes.c_int),] )

g_file_get_contents = _rpythonic_function_(		"g_file_get_contents", ctypes.c_int, [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("contents",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("length",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_set_contents = _rpythonic_function_(		"g_file_set_contents", ctypes.c_int, [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("contents",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_long),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_read_link = _rpythonic_function_(		"g_file_read_link", ctypes.POINTER(ctypes.c_char), [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_mkdtemp = _rpythonic_function_(		"g_mkdtemp", ctypes.POINTER(ctypes.c_char), [
	("tmpl",		ctypes.POINTER(ctypes.c_char)),] )

g_mkdtemp_full = _rpythonic_function_(		"g_mkdtemp_full", ctypes.POINTER(ctypes.c_char), [
	("tmpl",		ctypes.POINTER(ctypes.c_char)),
	("mode",		ctypes.c_int),] )

g_mkstemp = _rpythonic_function_(		"g_mkstemp", ctypes.c_int, [
	("tmpl",		ctypes.POINTER(ctypes.c_char)),] )

g_mkstemp_full = _rpythonic_function_(		"g_mkstemp_full", ctypes.c_int, [
	("tmpl",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("mode",		ctypes.c_int),] )

g_file_open_tmp = _rpythonic_function_(		"g_file_open_tmp", ctypes.c_int, [
	("tmpl",		ctypes.POINTER(ctypes.c_char)),
	("name_used",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dir_make_tmp = _rpythonic_function_(		"g_dir_make_tmp", ctypes.POINTER(ctypes.c_char), [
	("tmpl",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_format_size_full = _rpythonic_function_(		"g_format_size_full", ctypes.POINTER(ctypes.c_char), [
	("size",		ctypes.c_ulong),
	("flags",		ctypes.c_int),] )

g_format_size = _rpythonic_function_(		"g_format_size", ctypes.POINTER(ctypes.c_char), [
	("size",		ctypes.c_ulong),] )

g_format_size_for_display = _rpythonic_function_(		"g_format_size_for_display", ctypes.POINTER(ctypes.c_char), [
	("size",		ctypes.c_long),] )

g_build_path = _rpythonic_function_(		"g_build_path", ctypes.POINTER(ctypes.c_char), [
	("separator",		ctypes.POINTER(ctypes.c_char)),
	("first_element",		ctypes.POINTER(ctypes.c_char)),] )

g_build_pathv = _rpythonic_function_(		"g_build_pathv", ctypes.POINTER(ctypes.c_char), [
	("separator",		ctypes.POINTER(ctypes.c_char)),
	("args",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_build_filename = _rpythonic_function_(		"g_build_filename", ctypes.POINTER(ctypes.c_char), [
	("first_element",		ctypes.POINTER(ctypes.c_char)),] )

g_build_filenamev = _rpythonic_function_(		"g_build_filenamev", ctypes.POINTER(ctypes.c_char), [
	("args",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_mkdir_with_parents = _rpythonic_function_(		"g_mkdir_with_parents", ctypes.c_int, [
	("pathname",		ctypes.POINTER(ctypes.c_char)),
	("mode",		ctypes.c_int),] )

GHRFunc = _rpythonic_function_(		"GHRFunc", ctypes.c_int, [
	("key",		ctypes.POINTER(ctypes.c_void_p)),
	("value",		ctypes.POINTER(ctypes.c_void_p)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hash_table_new = _rpythonic_function_(		"g_hash_table_new", ctypes.POINTER(_GHashTable), [
	("hash_func",		ctypes.CFUNCTYPE(ctypes.c_uint, )),
	("key_equal_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_hash_table_new_full = _rpythonic_function_(		"g_hash_table_new_full", ctypes.POINTER(_GHashTable), [
	("hash_func",		ctypes.CFUNCTYPE(ctypes.c_uint, )),
	("key_equal_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("key_destroy_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("value_destroy_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_hash_table_destroy = _rpythonic_function_(		"g_hash_table_destroy", ctypes.c_void_p, [
	("hash_table",		ctypes.POINTER(_GHashTable)),] )

g_hash_table_insert = _rpythonic_function_(		"g_hash_table_insert", ctypes.c_void_p, [
	("hash_table",		ctypes.POINTER(_GHashTable)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),
	("value",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hash_table_replace = _rpythonic_function_(		"g_hash_table_replace", ctypes.c_void_p, [
	("hash_table",		ctypes.POINTER(_GHashTable)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),
	("value",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hash_table_remove = _rpythonic_function_(		"g_hash_table_remove", ctypes.c_int, [
	("hash_table",		ctypes.POINTER(_GHashTable)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hash_table_remove_all = _rpythonic_function_(		"g_hash_table_remove_all", ctypes.c_void_p, [
	("hash_table",		ctypes.POINTER(_GHashTable)),] )

g_hash_table_steal = _rpythonic_function_(		"g_hash_table_steal", ctypes.c_int, [
	("hash_table",		ctypes.POINTER(_GHashTable)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hash_table_steal_all = _rpythonic_function_(		"g_hash_table_steal_all", ctypes.c_void_p, [
	("hash_table",		ctypes.POINTER(_GHashTable)),] )

g_hash_table_lookup = _rpythonic_function_(		"g_hash_table_lookup", ctypes.POINTER(ctypes.c_void_p), [
	("hash_table",		ctypes.POINTER(_GHashTable)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hash_table_lookup_extended = _rpythonic_function_(		"g_hash_table_lookup_extended", ctypes.c_int, [
	("hash_table",		ctypes.POINTER(_GHashTable)),
	("lookup_key",		ctypes.POINTER(ctypes.c_void_p)),
	("orig_key",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("value",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

g_hash_table_foreach = _rpythonic_function_(		"g_hash_table_foreach", ctypes.c_void_p, [
	("hash_table",		ctypes.POINTER(_GHashTable)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hash_table_find = _rpythonic_function_(		"g_hash_table_find", ctypes.POINTER(ctypes.c_void_p), [
	("hash_table",		ctypes.POINTER(_GHashTable)),
	("predicate",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hash_table_foreach_remove = _rpythonic_function_(		"g_hash_table_foreach_remove", ctypes.c_uint, [
	("hash_table",		ctypes.POINTER(_GHashTable)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hash_table_foreach_steal = _rpythonic_function_(		"g_hash_table_foreach_steal", ctypes.c_uint, [
	("hash_table",		ctypes.POINTER(_GHashTable)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hash_table_size = _rpythonic_function_(		"g_hash_table_size", ctypes.c_uint, [
	("hash_table",		ctypes.POINTER(_GHashTable)),] )

g_hash_table_get_keys = _rpythonic_function_(		"g_hash_table_get_keys", ctypes.POINTER(_GList), [
	("hash_table",		ctypes.POINTER(_GHashTable)),] )

g_hash_table_get_values = _rpythonic_function_(		"g_hash_table_get_values", ctypes.POINTER(_GList), [
	("hash_table",		ctypes.POINTER(_GHashTable)),] )

g_hash_table_iter_init = _rpythonic_function_(		"g_hash_table_iter_init", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(_GHashTableIter)),
	("hash_table",		ctypes.POINTER(_GHashTable)),] )

g_hash_table_iter_next = _rpythonic_function_(		"g_hash_table_iter_next", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GHashTableIter)),
	("key",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("value",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

g_hash_table_iter_get_hash_table = _rpythonic_function_(		"g_hash_table_iter_get_hash_table", ctypes.POINTER(_GHashTable), [
	("iter",		ctypes.POINTER(_GHashTableIter)),] )

g_hash_table_iter_remove = _rpythonic_function_(		"g_hash_table_iter_remove", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(_GHashTableIter)),] )

g_hash_table_iter_replace = _rpythonic_function_(		"g_hash_table_iter_replace", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(_GHashTableIter)),
	("value",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hash_table_iter_steal = _rpythonic_function_(		"g_hash_table_iter_steal", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(_GHashTableIter)),] )

g_hash_table_ref = _rpythonic_function_(		"g_hash_table_ref", ctypes.POINTER(_GHashTable), [
	("hash_table",		ctypes.POINTER(_GHashTable)),] )

g_hash_table_unref = _rpythonic_function_(		"g_hash_table_unref", ctypes.c_void_p, [
	("hash_table",		ctypes.POINTER(_GHashTable)),] )

g_str_equal = _rpythonic_function_(		"g_str_equal", ctypes.c_int, [
	("v1",		ctypes.POINTER(ctypes.c_void_p)),
	("v2",		ctypes.POINTER(ctypes.c_void_p)),] )

g_str_hash = _rpythonic_function_(		"g_str_hash", ctypes.c_uint, [("v",		ctypes.c_void_p)] )

g_int_equal = _rpythonic_function_(		"g_int_equal", ctypes.c_int, [
	("v1",		ctypes.POINTER(ctypes.c_void_p)),
	("v2",		ctypes.POINTER(ctypes.c_void_p)),] )

g_int_hash = _rpythonic_function_(		"g_int_hash", ctypes.c_uint, [("v",		ctypes.c_void_p)] )

g_int64_equal = _rpythonic_function_(		"g_int64_equal", ctypes.c_int, [
	("v1",		ctypes.POINTER(ctypes.c_void_p)),
	("v2",		ctypes.POINTER(ctypes.c_void_p)),] )

g_int64_hash = _rpythonic_function_(		"g_int64_hash", ctypes.c_uint, [("v",		ctypes.c_void_p)] )

g_double_equal = _rpythonic_function_(		"g_double_equal", ctypes.c_int, [
	("v1",		ctypes.POINTER(ctypes.c_void_p)),
	("v2",		ctypes.POINTER(ctypes.c_void_p)),] )

g_double_hash = _rpythonic_function_(		"g_double_hash", ctypes.c_uint, [("v",		ctypes.c_void_p)] )

g_direct_hash = _rpythonic_function_(		"g_direct_hash", ctypes.c_uint, [("v",		ctypes.c_void_p)] )

g_direct_equal = _rpythonic_function_(		"g_direct_equal", ctypes.c_int, [
	("v1",		ctypes.POINTER(ctypes.c_void_p)),
	("v2",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hmac_new = _rpythonic_function_(		"g_hmac_new", ctypes.POINTER(_GHmac), [
	("digest_type",		ctypes.c_int),
	("key",		ctypes.POINTER(ctypes.c_ubyte)),
	("key_len",		ctypes.c_ulong),] )

g_hmac_copy = _rpythonic_function_(		"g_hmac_copy", ctypes.POINTER(_GHmac), [
	("hmac",		ctypes.POINTER(_GHmac)),] )

g_hmac_ref = _rpythonic_function_(		"g_hmac_ref", ctypes.POINTER(_GHmac), [
	("hmac",		ctypes.POINTER(_GHmac)),] )

g_hmac_unref = _rpythonic_function_(		"g_hmac_unref", ctypes.c_void_p, [
	("hmac",		ctypes.POINTER(_GHmac)),] )

g_hmac_update = _rpythonic_function_(		"g_hmac_update", ctypes.c_void_p, [
	("hmac",		ctypes.POINTER(_GHmac)),
	("data",		ctypes.POINTER(ctypes.c_ubyte)),
	("length",		ctypes.c_long),] )

g_hmac_get_string = _rpythonic_function_(		"g_hmac_get_string", ctypes.POINTER(ctypes.c_char), [
	("hmac",		ctypes.POINTER(_GHmac)),] )

g_hmac_get_digest = _rpythonic_function_(		"g_hmac_get_digest", ctypes.c_void_p, [
	("hmac",		ctypes.POINTER(_GHmac)),
	("buffer",		ctypes.POINTER(ctypes.c_ubyte)),
	("digest_len",		ctypes.POINTER(ctypes.c_ulong)),] )

g_compute_hmac_for_data = _rpythonic_function_(		"g_compute_hmac_for_data", ctypes.POINTER(ctypes.c_char), [
	("digest_type",		ctypes.c_int),
	("key",		ctypes.POINTER(ctypes.c_ubyte)),
	("key_len",		ctypes.c_ulong),
	("data",		ctypes.POINTER(ctypes.c_ubyte)),
	("length",		ctypes.c_ulong),] )

g_compute_hmac_for_string = _rpythonic_function_(		"g_compute_hmac_for_string", ctypes.POINTER(ctypes.c_char), [
	("digest_type",		ctypes.c_int),
	("key",		ctypes.POINTER(ctypes.c_ubyte)),
	("key_len",		ctypes.c_ulong),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_long),] )

GHookCompareFunc = _rpythonic_function_(		"GHookCompareFunc", ctypes.c_int, [
	("new_hook",		ctypes.POINTER(_GHook)),
	("sibling",		ctypes.POINTER(_GHook)),] )

GHookFindFunc = _rpythonic_function_(		"GHookFindFunc", ctypes.c_int, [
	("hook",		ctypes.POINTER(_GHook)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

GHookMarshaller = _rpythonic_function_(		"GHookMarshaller", ctypes.c_void_p, [
	("hook",		ctypes.POINTER(_GHook)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GHookCheckMarshaller = _rpythonic_function_(		"GHookCheckMarshaller", ctypes.c_int, [
	("hook",		ctypes.POINTER(_GHook)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GHookFunc = _rpythonic_function_(		"GHookFunc", ctypes.c_void_p, [("data",		ctypes.c_void_p)] )

GHookCheckFunc = _rpythonic_function_(		"GHookCheckFunc", ctypes.c_int, [("data",		ctypes.c_void_p)] )

GHookFinalizeFunc = _rpythonic_function_(		"GHookFinalizeFunc", ctypes.c_void_p, [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("hook",		ctypes.POINTER(_GHook)),] )

g_hook_list_init = _rpythonic_function_(		"g_hook_list_init", ctypes.c_void_p, [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("hook_size",		ctypes.c_uint),] )

g_hook_list_clear = _rpythonic_function_(		"g_hook_list_clear", ctypes.c_void_p, [
	("hook_list",		ctypes.POINTER(_GHookList)),] )

g_hook_alloc = _rpythonic_function_(		"g_hook_alloc", ctypes.POINTER(_GHook), [
	("hook_list",		ctypes.POINTER(_GHookList)),] )

g_hook_free = _rpythonic_function_(		"g_hook_free", ctypes.c_void_p, [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("hook",		ctypes.POINTER(_GHook)),] )

g_hook_ref = _rpythonic_function_(		"g_hook_ref", ctypes.POINTER(_GHook), [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("hook",		ctypes.POINTER(_GHook)),] )

g_hook_unref = _rpythonic_function_(		"g_hook_unref", ctypes.c_void_p, [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("hook",		ctypes.POINTER(_GHook)),] )

g_hook_destroy = _rpythonic_function_(		"g_hook_destroy", ctypes.c_int, [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("hook_id",		ctypes.c_ulong),] )

g_hook_destroy_link = _rpythonic_function_(		"g_hook_destroy_link", ctypes.c_void_p, [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("hook",		ctypes.POINTER(_GHook)),] )

g_hook_prepend = _rpythonic_function_(		"g_hook_prepend", ctypes.c_void_p, [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("hook",		ctypes.POINTER(_GHook)),] )

g_hook_insert_before = _rpythonic_function_(		"g_hook_insert_before", ctypes.c_void_p, [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("sibling",		ctypes.POINTER(_GHook)),
	("hook",		ctypes.POINTER(_GHook)),] )

g_hook_insert_sorted = _rpythonic_function_(		"g_hook_insert_sorted", ctypes.c_void_p, [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("hook",		ctypes.POINTER(_GHook)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GHook),ctypes.POINTER(_GHook),)),] )

g_hook_get = _rpythonic_function_(		"g_hook_get", ctypes.POINTER(_GHook), [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("hook_id",		ctypes.c_ulong),] )

g_hook_find = _rpythonic_function_(		"g_hook_find", ctypes.POINTER(_GHook), [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("need_valids",		ctypes.c_int),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GHook),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hook_find_data = _rpythonic_function_(		"g_hook_find_data", ctypes.POINTER(_GHook), [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("need_valids",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hook_find_func = _rpythonic_function_(		"g_hook_find_func", ctypes.POINTER(_GHook), [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("need_valids",		ctypes.c_int),
	("func",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hook_find_func_data = _rpythonic_function_(		"g_hook_find_func_data", ctypes.POINTER(_GHook), [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("need_valids",		ctypes.c_int),
	("func",		ctypes.POINTER(ctypes.c_void_p)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hook_first_valid = _rpythonic_function_(		"g_hook_first_valid", ctypes.POINTER(_GHook), [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("may_be_in_call",		ctypes.c_int),] )

g_hook_next_valid = _rpythonic_function_(		"g_hook_next_valid", ctypes.POINTER(_GHook), [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("hook",		ctypes.POINTER(_GHook)),
	("may_be_in_call",		ctypes.c_int),] )

g_hook_compare_ids = _rpythonic_function_(		"g_hook_compare_ids", ctypes.c_int, [
	("new_hook",		ctypes.POINTER(_GHook)),
	("sibling",		ctypes.POINTER(_GHook)),] )

g_hook_list_invoke = _rpythonic_function_(		"g_hook_list_invoke", ctypes.c_void_p, [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("may_recurse",		ctypes.c_int),] )

g_hook_list_invoke_check = _rpythonic_function_(		"g_hook_list_invoke_check", ctypes.c_void_p, [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("may_recurse",		ctypes.c_int),] )

g_hook_list_marshal = _rpythonic_function_(		"g_hook_list_marshal", ctypes.c_void_p, [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("may_recurse",		ctypes.c_int),
	("marshaller",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GHook),ctypes.POINTER(ctypes.c_void_p),)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hook_list_marshal_check = _rpythonic_function_(		"g_hook_list_marshal_check", ctypes.c_void_p, [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("may_recurse",		ctypes.c_int),
	("marshaller",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GHook),ctypes.POINTER(ctypes.c_void_p),)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hostname_is_non_ascii = _rpythonic_function_(		"g_hostname_is_non_ascii", ctypes.c_int, [
	("hostname",		ctypes.POINTER(ctypes.c_char)),] )

g_hostname_is_ascii_encoded = _rpythonic_function_(		"g_hostname_is_ascii_encoded", ctypes.c_int, [
	("hostname",		ctypes.POINTER(ctypes.c_char)),] )

g_hostname_is_ip_address = _rpythonic_function_(		"g_hostname_is_ip_address", ctypes.c_int, [
	("hostname",		ctypes.POINTER(ctypes.c_char)),] )

g_hostname_to_ascii = _rpythonic_function_(		"g_hostname_to_ascii", ctypes.POINTER(ctypes.c_char), [
	("hostname",		ctypes.POINTER(ctypes.c_char)),] )

g_hostname_to_unicode = _rpythonic_function_(		"g_hostname_to_unicode", ctypes.POINTER(ctypes.c_char), [
	("hostname",		ctypes.POINTER(ctypes.c_char)),] )

GPollFunc = _rpythonic_function_(		"GPollFunc", ctypes.c_int, [
	("ufds",		ctypes.POINTER(_GPollFD)),
	("nfsd",		ctypes.c_uint),
	("timeout_",		ctypes.c_int),] )

g_poll = _rpythonic_function_(		"g_poll", ctypes.c_int, [
	("fds",		ctypes.POINTER(_GPollFD)),
	("nfds",		ctypes.c_uint),
	("timeout",		ctypes.c_int),] )

g_slist_alloc = _rpythonic_function_(		"g_slist_alloc", ctypes.POINTER(_GSList), [] )

g_slist_free = _rpythonic_function_(		"g_slist_free", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GSList)),] )

g_slist_free_1 = _rpythonic_function_(		"g_slist_free_1", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GSList)),] )

g_slist_free_full = _rpythonic_function_(		"g_slist_free_full", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GSList)),
	("free_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_slist_append = _rpythonic_function_(		"g_slist_append", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_slist_prepend = _rpythonic_function_(		"g_slist_prepend", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_slist_insert = _rpythonic_function_(		"g_slist_insert", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("position",		ctypes.c_int),] )

g_slist_insert_sorted = _rpythonic_function_(		"g_slist_insert_sorted", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_slist_insert_sorted_with_data = _rpythonic_function_(		"g_slist_insert_sorted_with_data", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_slist_insert_before = _rpythonic_function_(		"g_slist_insert_before", ctypes.POINTER(_GSList), [
	("slist",		ctypes.POINTER(_GSList)),
	("sibling",		ctypes.POINTER(_GSList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_slist_concat = _rpythonic_function_(		"g_slist_concat", ctypes.POINTER(_GSList), [
	("list1",		ctypes.POINTER(_GSList)),
	("list2",		ctypes.POINTER(_GSList)),] )

g_slist_remove = _rpythonic_function_(		"g_slist_remove", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_slist_remove_all = _rpythonic_function_(		"g_slist_remove_all", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_slist_remove_link = _rpythonic_function_(		"g_slist_remove_link", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),
	("link_",		ctypes.POINTER(_GSList)),] )

g_slist_delete_link = _rpythonic_function_(		"g_slist_delete_link", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),
	("link_",		ctypes.POINTER(_GSList)),] )

g_slist_reverse = _rpythonic_function_(		"g_slist_reverse", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),] )

g_slist_copy = _rpythonic_function_(		"g_slist_copy", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),] )

g_slist_nth = _rpythonic_function_(		"g_slist_nth", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),
	("n",		ctypes.c_uint),] )

g_slist_find = _rpythonic_function_(		"g_slist_find", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_slist_find_custom = _rpythonic_function_(		"g_slist_find_custom", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_slist_position = _rpythonic_function_(		"g_slist_position", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GSList)),
	("llink",		ctypes.POINTER(_GSList)),] )

g_slist_index = _rpythonic_function_(		"g_slist_index", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GSList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_slist_last = _rpythonic_function_(		"g_slist_last", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),] )

g_slist_length = _rpythonic_function_(		"g_slist_length", ctypes.c_uint, [
	("C_list",		ctypes.POINTER(_GSList)),] )

g_slist_foreach = _rpythonic_function_(		"g_slist_foreach", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GSList)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_slist_sort = _rpythonic_function_(		"g_slist_sort", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),
	("compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_slist_sort_with_data = _rpythonic_function_(		"g_slist_sort_with_data", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),
	("compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_slist_nth_data = _rpythonic_function_(		"g_slist_nth_data", ctypes.POINTER(ctypes.c_void_p), [
	("C_list",		ctypes.POINTER(_GSList)),
	("n",		ctypes.c_uint),] )

g_slist_push_allocator = _rpythonic_function_(		"g_slist_push_allocator", ctypes.c_void_p, [("dummy",		ctypes.c_void_p)] )

g_slist_pop_allocator = _rpythonic_function_(		"g_slist_pop_allocator", ctypes.c_void_p, [] )

GSourceFunc = _rpythonic_function_(		"GSourceFunc", ctypes.c_int, [("user_data",		ctypes.c_void_p)] )

GChildWatchFunc = _rpythonic_function_(		"GChildWatchFunc", ctypes.c_void_p, [
	("pid",		ctypes.c_int),
	("status",		ctypes.c_int),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

ref = _rpythonic_function_(		"ref", ctypes.c_void_p, [("cb_data",		ctypes.c_void_p)] )

unref = _rpythonic_function_(		"unref", ctypes.c_void_p, [("cb_data",		ctypes.c_void_p)] )

get = _rpythonic_function_(		"get", ctypes.c_void_p, [
	("cb_data",		ctypes.POINTER(ctypes.c_void_p)),
	("source",		ctypes.POINTER(_GSource)),
	("func",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.c_int, ))),
	("data",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

GSourceDummyMarshal = _rpythonic_function_(		"GSourceDummyMarshal", ctypes.c_void_p, [] )

prepare = _rpythonic_function_(		"prepare", ctypes.c_int, [
	("source",		ctypes.POINTER(_GSource)),
	("timeout_",		ctypes.POINTER(ctypes.c_int)),] )

check = _rpythonic_function_(		"check", ctypes.c_int, [
	("source",		ctypes.POINTER(_GSource)),] )

dispatch = _rpythonic_function_(		"dispatch", ctypes.c_int, [
	("source",		ctypes.POINTER(_GSource)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

finalize = _rpythonic_function_(		"finalize", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),] )

g_main_context_new = _rpythonic_function_(		"g_main_context_new", ctypes.POINTER(_GMainContext), [] )

g_main_context_ref = _rpythonic_function_(		"g_main_context_ref", ctypes.POINTER(_GMainContext), [
	("context",		ctypes.POINTER(_GMainContext)),] )

g_main_context_unref = _rpythonic_function_(		"g_main_context_unref", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMainContext)),] )

g_main_context_default = _rpythonic_function_(		"g_main_context_default", ctypes.POINTER(_GMainContext), [] )

g_main_context_iteration = _rpythonic_function_(		"g_main_context_iteration", ctypes.c_int, [
	("context",		ctypes.POINTER(_GMainContext)),
	("may_block",		ctypes.c_int),] )

g_main_context_pending = _rpythonic_function_(		"g_main_context_pending", ctypes.c_int, [
	("context",		ctypes.POINTER(_GMainContext)),] )

g_main_context_find_source_by_id = _rpythonic_function_(		"g_main_context_find_source_by_id", ctypes.POINTER(_GSource), [
	("context",		ctypes.POINTER(_GMainContext)),
	("source_id",		ctypes.c_uint),] )

g_main_context_find_source_by_user_data = _rpythonic_function_(		"g_main_context_find_source_by_user_data", ctypes.POINTER(_GSource), [
	("context",		ctypes.POINTER(_GMainContext)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_main_context_find_source_by_funcs_user_data = _rpythonic_function_(		"g_main_context_find_source_by_funcs_user_data", ctypes.POINTER(_GSource), [
	("context",		ctypes.POINTER(_GMainContext)),
	("funcs",		ctypes.POINTER(_GSourceFuncs)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_main_context_wakeup = _rpythonic_function_(		"g_main_context_wakeup", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMainContext)),] )

g_main_context_acquire = _rpythonic_function_(		"g_main_context_acquire", ctypes.c_int, [
	("context",		ctypes.POINTER(_GMainContext)),] )

g_main_context_release = _rpythonic_function_(		"g_main_context_release", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMainContext)),] )

g_main_context_is_owner = _rpythonic_function_(		"g_main_context_is_owner", ctypes.c_int, [
	("context",		ctypes.POINTER(_GMainContext)),] )

g_main_context_wait = _rpythonic_function_(		"g_main_context_wait", ctypes.c_int, [
	("context",		ctypes.POINTER(_GMainContext)),
	("cond",		ctypes.POINTER(_GCond)),
	("mutex",		ctypes.POINTER(_GMutex)),] )

g_main_context_prepare = _rpythonic_function_(		"g_main_context_prepare", ctypes.c_int, [
	("context",		ctypes.POINTER(_GMainContext)),
	("priority",		ctypes.POINTER(ctypes.c_int)),] )

g_main_context_query = _rpythonic_function_(		"g_main_context_query", ctypes.c_int, [
	("context",		ctypes.POINTER(_GMainContext)),
	("max_priority",		ctypes.c_int),
	("timeout_",		ctypes.POINTER(ctypes.c_int)),
	("fds",		ctypes.POINTER(_GPollFD)),
	("n_fds",		ctypes.c_int),] )

g_main_context_check = _rpythonic_function_(		"g_main_context_check", ctypes.c_int, [
	("context",		ctypes.POINTER(_GMainContext)),
	("max_priority",		ctypes.c_int),
	("fds",		ctypes.POINTER(_GPollFD)),
	("n_fds",		ctypes.c_int),] )

g_main_context_dispatch = _rpythonic_function_(		"g_main_context_dispatch", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMainContext)),] )

g_main_context_set_poll_func = _rpythonic_function_(		"g_main_context_set_poll_func", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMainContext)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GPollFD),ctypes.c_uint,ctypes.c_int,)),] )

g_main_context_get_poll_func = _rpythonic_function_(		"g_main_context_get_poll_func", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GPollFD),ctypes.c_uint,ctypes.c_int,), [
	("context",		ctypes.POINTER(_GMainContext)),] )

g_main_context_add_poll = _rpythonic_function_(		"g_main_context_add_poll", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMainContext)),
	("fd",		ctypes.POINTER(_GPollFD)),
	("priority",		ctypes.c_int),] )

g_main_context_remove_poll = _rpythonic_function_(		"g_main_context_remove_poll", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMainContext)),
	("fd",		ctypes.POINTER(_GPollFD)),] )

g_main_depth = _rpythonic_function_(		"g_main_depth", ctypes.c_int, [] )

g_main_current_source = _rpythonic_function_(		"g_main_current_source", ctypes.POINTER(_GSource), [] )

g_main_context_push_thread_default = _rpythonic_function_(		"g_main_context_push_thread_default", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMainContext)),] )

g_main_context_pop_thread_default = _rpythonic_function_(		"g_main_context_pop_thread_default", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMainContext)),] )

g_main_context_get_thread_default = _rpythonic_function_(		"g_main_context_get_thread_default", ctypes.POINTER(_GMainContext), [] )

g_main_loop_new = _rpythonic_function_(		"g_main_loop_new", ctypes.POINTER(_GMainLoop), [
	("context",		ctypes.POINTER(_GMainContext)),
	("is_running",		ctypes.c_int),] )

g_main_loop_run = _rpythonic_function_(		"g_main_loop_run", ctypes.c_void_p, [
	("loop",		ctypes.POINTER(_GMainLoop)),] )

g_main_loop_quit = _rpythonic_function_(		"g_main_loop_quit", ctypes.c_void_p, [
	("loop",		ctypes.POINTER(_GMainLoop)),] )

g_main_loop_ref = _rpythonic_function_(		"g_main_loop_ref", ctypes.POINTER(_GMainLoop), [
	("loop",		ctypes.POINTER(_GMainLoop)),] )

g_main_loop_unref = _rpythonic_function_(		"g_main_loop_unref", ctypes.c_void_p, [
	("loop",		ctypes.POINTER(_GMainLoop)),] )

g_main_loop_is_running = _rpythonic_function_(		"g_main_loop_is_running", ctypes.c_int, [
	("loop",		ctypes.POINTER(_GMainLoop)),] )

g_main_loop_get_context = _rpythonic_function_(		"g_main_loop_get_context", ctypes.POINTER(_GMainContext), [
	("loop",		ctypes.POINTER(_GMainLoop)),] )

g_source_new = _rpythonic_function_(		"g_source_new", ctypes.POINTER(_GSource), [
	("source_funcs",		ctypes.POINTER(_GSourceFuncs)),
	("struct_size",		ctypes.c_uint),] )

g_source_ref = _rpythonic_function_(		"g_source_ref", ctypes.POINTER(_GSource), [
	("source",		ctypes.POINTER(_GSource)),] )

g_source_unref = _rpythonic_function_(		"g_source_unref", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),] )

g_source_attach = _rpythonic_function_(		"g_source_attach", ctypes.c_uint, [
	("source",		ctypes.POINTER(_GSource)),
	("context",		ctypes.POINTER(_GMainContext)),] )

g_source_destroy = _rpythonic_function_(		"g_source_destroy", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),] )

g_source_set_priority = _rpythonic_function_(		"g_source_set_priority", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),
	("priority",		ctypes.c_int),] )

g_source_get_priority = _rpythonic_function_(		"g_source_get_priority", ctypes.c_int, [
	("source",		ctypes.POINTER(_GSource)),] )

g_source_set_can_recurse = _rpythonic_function_(		"g_source_set_can_recurse", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),
	("can_recurse",		ctypes.c_int),] )

g_source_get_can_recurse = _rpythonic_function_(		"g_source_get_can_recurse", ctypes.c_int, [
	("source",		ctypes.POINTER(_GSource)),] )

g_source_get_id = _rpythonic_function_(		"g_source_get_id", ctypes.c_uint, [
	("source",		ctypes.POINTER(_GSource)),] )

g_source_get_context = _rpythonic_function_(		"g_source_get_context", ctypes.POINTER(_GMainContext), [
	("source",		ctypes.POINTER(_GSource)),] )

g_source_set_callback = _rpythonic_function_(		"g_source_set_callback", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_source_set_funcs = _rpythonic_function_(		"g_source_set_funcs", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),
	("funcs",		ctypes.POINTER(_GSourceFuncs)),] )

g_source_is_destroyed = _rpythonic_function_(		"g_source_is_destroyed", ctypes.c_int, [
	("source",		ctypes.POINTER(_GSource)),] )

g_source_set_name = _rpythonic_function_(		"g_source_set_name", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_source_get_name = _rpythonic_function_(		"g_source_get_name", ctypes.POINTER(ctypes.c_char), [
	("source",		ctypes.POINTER(_GSource)),] )

g_source_set_name_by_id = _rpythonic_function_(		"g_source_set_name_by_id", ctypes.c_void_p, [
	("tag",		ctypes.c_uint),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_source_set_callback_indirect = _rpythonic_function_(		"g_source_set_callback_indirect", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),
	("callback_funcs",		ctypes.POINTER(_GSourceCallbackFuncs)),] )

g_source_add_poll = _rpythonic_function_(		"g_source_add_poll", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),
	("fd",		ctypes.POINTER(_GPollFD)),] )

g_source_remove_poll = _rpythonic_function_(		"g_source_remove_poll", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),
	("fd",		ctypes.POINTER(_GPollFD)),] )

g_source_add_child_source = _rpythonic_function_(		"g_source_add_child_source", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),
	("child_source",		ctypes.POINTER(_GSource)),] )

g_source_remove_child_source = _rpythonic_function_(		"g_source_remove_child_source", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),
	("child_source",		ctypes.POINTER(_GSource)),] )

g_source_get_current_time = _rpythonic_function_(		"g_source_get_current_time", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),
	("timeval",		ctypes.POINTER(_GTimeVal)),] )

g_source_get_time = _rpythonic_function_(		"g_source_get_time", ctypes.c_long, [
	("source",		ctypes.POINTER(_GSource)),] )

g_idle_source_new = _rpythonic_function_(		"g_idle_source_new", ctypes.POINTER(_GSource), [] )

g_child_watch_source_new = _rpythonic_function_(		"g_child_watch_source_new", ctypes.POINTER(_GSource), [
	("pid",		ctypes.c_int),] )

g_timeout_source_new = _rpythonic_function_(		"g_timeout_source_new", ctypes.POINTER(_GSource), [
	("interval",		ctypes.c_uint),] )

g_timeout_source_new_seconds = _rpythonic_function_(		"g_timeout_source_new_seconds", ctypes.POINTER(_GSource), [
	("interval",		ctypes.c_uint),] )

g_get_current_time = _rpythonic_function_(		"g_get_current_time", ctypes.c_void_p, [
	("result",		ctypes.POINTER(_GTimeVal)),] )

g_get_monotonic_time = _rpythonic_function_(		"g_get_monotonic_time", ctypes.c_long, [] )

g_get_real_time = _rpythonic_function_(		"g_get_real_time", ctypes.c_long, [] )

g_source_remove = _rpythonic_function_(		"g_source_remove", ctypes.c_int, [
	("tag",		ctypes.c_uint),] )

g_source_remove_by_user_data = _rpythonic_function_(		"g_source_remove_by_user_data", ctypes.c_int, [("user_data",		ctypes.c_void_p)] )

g_source_remove_by_funcs_user_data = _rpythonic_function_(		"g_source_remove_by_funcs_user_data", ctypes.c_int, [
	("funcs",		ctypes.POINTER(_GSourceFuncs)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_timeout_add_full = _rpythonic_function_(		"g_timeout_add_full", ctypes.c_uint, [
	("priority",		ctypes.c_int),
	("interval",		ctypes.c_uint),
	("function",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_timeout_add = _rpythonic_function_(		"g_timeout_add", ctypes.c_uint, [
	("interval",		ctypes.c_uint),
	("function",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_timeout_add_seconds_full = _rpythonic_function_(		"g_timeout_add_seconds_full", ctypes.c_uint, [
	("priority",		ctypes.c_int),
	("interval",		ctypes.c_uint),
	("function",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_timeout_add_seconds = _rpythonic_function_(		"g_timeout_add_seconds", ctypes.c_uint, [
	("interval",		ctypes.c_uint),
	("function",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_child_watch_add_full = _rpythonic_function_(		"g_child_watch_add_full", ctypes.c_uint, [
	("priority",		ctypes.c_int),
	("pid",		ctypes.c_int),
	("function",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_child_watch_add = _rpythonic_function_(		"g_child_watch_add", ctypes.c_uint, [
	("pid",		ctypes.c_int),
	("function",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_idle_add = _rpythonic_function_(		"g_idle_add", ctypes.c_uint, [
	("function",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_idle_add_full = _rpythonic_function_(		"g_idle_add_full", ctypes.c_uint, [
	("priority",		ctypes.c_int),
	("function",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_idle_remove_by_data = _rpythonic_function_(		"g_idle_remove_by_data", ctypes.c_int, [("data",		ctypes.c_void_p)] )

g_main_context_invoke_full = _rpythonic_function_(		"g_main_context_invoke_full", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMainContext)),
	("priority",		ctypes.c_int),
	("function",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_main_context_invoke = _rpythonic_function_(		"g_main_context_invoke", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMainContext)),
	("function",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_unicode_script_to_iso15924 = _rpythonic_function_(		"g_unicode_script_to_iso15924", ctypes.c_uint, [
	("script",		ctypes.c_int),] )

g_unicode_script_from_iso15924 = _rpythonic_function_(		"g_unicode_script_from_iso15924", ctypes.c_int, [
	("iso15924",		ctypes.c_uint),] )

g_get_charset = _rpythonic_function_(		"g_get_charset", ctypes.c_int, [
	("charset",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_unichar_isalnum = _rpythonic_function_(		"g_unichar_isalnum", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_isalpha = _rpythonic_function_(		"g_unichar_isalpha", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_iscntrl = _rpythonic_function_(		"g_unichar_iscntrl", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_isdigit = _rpythonic_function_(		"g_unichar_isdigit", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_isgraph = _rpythonic_function_(		"g_unichar_isgraph", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_islower = _rpythonic_function_(		"g_unichar_islower", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_isprint = _rpythonic_function_(		"g_unichar_isprint", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_ispunct = _rpythonic_function_(		"g_unichar_ispunct", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_isspace = _rpythonic_function_(		"g_unichar_isspace", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_isupper = _rpythonic_function_(		"g_unichar_isupper", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_isxdigit = _rpythonic_function_(		"g_unichar_isxdigit", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_istitle = _rpythonic_function_(		"g_unichar_istitle", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_isdefined = _rpythonic_function_(		"g_unichar_isdefined", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_iswide = _rpythonic_function_(		"g_unichar_iswide", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_iswide_cjk = _rpythonic_function_(		"g_unichar_iswide_cjk", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_iszerowidth = _rpythonic_function_(		"g_unichar_iszerowidth", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_ismark = _rpythonic_function_(		"g_unichar_ismark", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_toupper = _rpythonic_function_(		"g_unichar_toupper", ctypes.c_uint, [
	("c",		ctypes.c_uint),] )

g_unichar_tolower = _rpythonic_function_(		"g_unichar_tolower", ctypes.c_uint, [
	("c",		ctypes.c_uint),] )

g_unichar_totitle = _rpythonic_function_(		"g_unichar_totitle", ctypes.c_uint, [
	("c",		ctypes.c_uint),] )

g_unichar_digit_value = _rpythonic_function_(		"g_unichar_digit_value", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_xdigit_value = _rpythonic_function_(		"g_unichar_xdigit_value", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_type = _rpythonic_function_(		"g_unichar_type", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_break_type = _rpythonic_function_(		"g_unichar_break_type", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_combining_class = _rpythonic_function_(		"g_unichar_combining_class", ctypes.c_int, [
	("uc",		ctypes.c_uint),] )

g_unichar_get_mirror_char = _rpythonic_function_(		"g_unichar_get_mirror_char", ctypes.c_int, [
	("ch",		ctypes.c_uint),
	("mirrored_ch",		ctypes.POINTER(ctypes.c_uint)),] )

g_unichar_get_script = _rpythonic_function_(		"g_unichar_get_script", ctypes.c_int, [
	("ch",		ctypes.c_uint),] )

g_unichar_validate = _rpythonic_function_(		"g_unichar_validate", ctypes.c_int, [
	("ch",		ctypes.c_uint),] )

g_unichar_compose = _rpythonic_function_(		"g_unichar_compose", ctypes.c_int, [
	("a",		ctypes.c_uint),
	("b",		ctypes.c_uint),
	("ch",		ctypes.POINTER(ctypes.c_uint)),] )

g_unichar_decompose = _rpythonic_function_(		"g_unichar_decompose", ctypes.c_int, [
	("ch",		ctypes.c_uint),
	("a",		ctypes.POINTER(ctypes.c_uint)),
	("b",		ctypes.POINTER(ctypes.c_uint)),] )

g_unichar_fully_decompose = _rpythonic_function_(		"g_unichar_fully_decompose", ctypes.c_ulong, [
	("ch",		ctypes.c_uint),
	("compat",		ctypes.c_int),
	("result",		ctypes.POINTER(ctypes.c_uint)),
	("result_len",		ctypes.c_ulong),] )

g_unicode_canonical_ordering = _rpythonic_function_(		"g_unicode_canonical_ordering", ctypes.c_void_p, [
	("string",		ctypes.POINTER(ctypes.c_uint)),
	("C_len",		ctypes.c_ulong),] )

g_unicode_canonical_decomposition = _rpythonic_function_(		"g_unicode_canonical_decomposition", ctypes.POINTER(ctypes.c_uint), [
	("ch",		ctypes.c_uint),
	("result_len",		ctypes.POINTER(ctypes.c_ulong)),] )

g_utf8_get_char = _rpythonic_function_(		"g_utf8_get_char", ctypes.c_uint, [
	("p",		ctypes.POINTER(ctypes.c_char)),] )

g_utf8_get_char_validated = _rpythonic_function_(		"g_utf8_get_char_validated", ctypes.c_uint, [
	("p",		ctypes.POINTER(ctypes.c_char)),
	("max_len",		ctypes.c_long),] )

g_utf8_offset_to_pointer = _rpythonic_function_(		"g_utf8_offset_to_pointer", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("offset",		ctypes.c_long),] )

g_utf8_pointer_to_offset = _rpythonic_function_(		"g_utf8_pointer_to_offset", ctypes.c_long, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("pos",		ctypes.POINTER(ctypes.c_char)),] )

g_utf8_prev_char = _rpythonic_function_(		"g_utf8_prev_char", ctypes.POINTER(ctypes.c_char), [
	("p",		ctypes.POINTER(ctypes.c_char)),] )

g_utf8_find_next_char = _rpythonic_function_(		"g_utf8_find_next_char", ctypes.POINTER(ctypes.c_char), [
	("p",		ctypes.POINTER(ctypes.c_char)),
	("end",		ctypes.POINTER(ctypes.c_char)),] )

g_utf8_find_prev_char = _rpythonic_function_(		"g_utf8_find_prev_char", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("p",		ctypes.POINTER(ctypes.c_char)),] )

g_utf8_strlen = _rpythonic_function_(		"g_utf8_strlen", ctypes.c_long, [
	("p",		ctypes.POINTER(ctypes.c_char)),
	("max",		ctypes.c_long),] )

g_utf8_substring = _rpythonic_function_(		"g_utf8_substring", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("start_pos",		ctypes.c_long),
	("end_pos",		ctypes.c_long),] )

g_utf8_strncpy = _rpythonic_function_(		"g_utf8_strncpy", ctypes.POINTER(ctypes.c_char), [
	("dest",		ctypes.POINTER(ctypes.c_char)),
	("src",		ctypes.POINTER(ctypes.c_char)),
	("n",		ctypes.c_ulong),] )

g_utf8_strchr = _rpythonic_function_(		"g_utf8_strchr", ctypes.POINTER(ctypes.c_char), [
	("p",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),
	("c",		ctypes.c_uint),] )

g_utf8_strrchr = _rpythonic_function_(		"g_utf8_strrchr", ctypes.POINTER(ctypes.c_char), [
	("p",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),
	("c",		ctypes.c_uint),] )

g_utf8_strreverse = _rpythonic_function_(		"g_utf8_strreverse", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),] )

g_utf8_to_utf16 = _rpythonic_function_(		"g_utf8_to_utf16", ctypes.POINTER(ctypes.c_ushort), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),
	("items_read",		ctypes.POINTER(ctypes.c_long)),
	("items_written",		ctypes.POINTER(ctypes.c_long)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_utf8_to_ucs4 = _rpythonic_function_(		"g_utf8_to_ucs4", ctypes.POINTER(ctypes.c_uint), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),
	("items_read",		ctypes.POINTER(ctypes.c_long)),
	("items_written",		ctypes.POINTER(ctypes.c_long)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_utf8_to_ucs4_fast = _rpythonic_function_(		"g_utf8_to_ucs4_fast", ctypes.POINTER(ctypes.c_uint), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),
	("items_written",		ctypes.POINTER(ctypes.c_long)),] )

g_utf16_to_ucs4 = _rpythonic_function_(		"g_utf16_to_ucs4", ctypes.POINTER(ctypes.c_uint), [
	("C_str",		ctypes.POINTER(ctypes.c_ushort)),
	("C_len",		ctypes.c_long),
	("items_read",		ctypes.POINTER(ctypes.c_long)),
	("items_written",		ctypes.POINTER(ctypes.c_long)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_utf16_to_utf8 = _rpythonic_function_(		"g_utf16_to_utf8", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_ushort)),
	("C_len",		ctypes.c_long),
	("items_read",		ctypes.POINTER(ctypes.c_long)),
	("items_written",		ctypes.POINTER(ctypes.c_long)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_ucs4_to_utf16 = _rpythonic_function_(		"g_ucs4_to_utf16", ctypes.POINTER(ctypes.c_ushort), [
	("C_str",		ctypes.POINTER(ctypes.c_uint)),
	("C_len",		ctypes.c_long),
	("items_read",		ctypes.POINTER(ctypes.c_long)),
	("items_written",		ctypes.POINTER(ctypes.c_long)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_ucs4_to_utf8 = _rpythonic_function_(		"g_ucs4_to_utf8", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_uint)),
	("C_len",		ctypes.c_long),
	("items_read",		ctypes.POINTER(ctypes.c_long)),
	("items_written",		ctypes.POINTER(ctypes.c_long)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_unichar_to_utf8 = _rpythonic_function_(		"g_unichar_to_utf8", ctypes.c_int, [
	("c",		ctypes.c_uint),
	("outbuf",		ctypes.POINTER(ctypes.c_char)),] )

g_utf8_validate = _rpythonic_function_(		"g_utf8_validate", ctypes.c_int, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("max_len",		ctypes.c_long),
	("end",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_utf8_strup = _rpythonic_function_(		"g_utf8_strup", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),] )

g_utf8_strdown = _rpythonic_function_(		"g_utf8_strdown", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),] )

g_utf8_casefold = _rpythonic_function_(		"g_utf8_casefold", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),] )

g_utf8_normalize = _rpythonic_function_(		"g_utf8_normalize", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),
	("mode",		ctypes.c_int),] )

g_utf8_collate = _rpythonic_function_(		"g_utf8_collate", ctypes.c_int, [
	("str1",		ctypes.POINTER(ctypes.c_char)),
	("str2",		ctypes.POINTER(ctypes.c_char)),] )

g_utf8_collate_key = _rpythonic_function_(		"g_utf8_collate_key", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),] )

g_utf8_collate_key_for_filename = _rpythonic_function_(		"g_utf8_collate_key_for_filename", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),] )

_g_utf8_make_valid = _rpythonic_function_(		"_g_utf8_make_valid", ctypes.POINTER(ctypes.c_char), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_string_chunk_new = _rpythonic_function_(		"g_string_chunk_new", ctypes.POINTER(_GStringChunk), [
	("size",		ctypes.c_ulong),] )

g_string_chunk_free = _rpythonic_function_(		"g_string_chunk_free", ctypes.c_void_p, [
	("chunk",		ctypes.POINTER(_GStringChunk)),] )

g_string_chunk_clear = _rpythonic_function_(		"g_string_chunk_clear", ctypes.c_void_p, [
	("chunk",		ctypes.POINTER(_GStringChunk)),] )

g_string_chunk_insert = _rpythonic_function_(		"g_string_chunk_insert", ctypes.POINTER(ctypes.c_char), [
	("chunk",		ctypes.POINTER(_GStringChunk)),
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_string_chunk_insert_len = _rpythonic_function_(		"g_string_chunk_insert_len", ctypes.POINTER(ctypes.c_char), [
	("chunk",		ctypes.POINTER(_GStringChunk)),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),] )

g_string_chunk_insert_const = _rpythonic_function_(		"g_string_chunk_insert_const", ctypes.POINTER(ctypes.c_char), [
	("chunk",		ctypes.POINTER(_GStringChunk)),
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_string_new = _rpythonic_function_(		"g_string_new", ctypes.POINTER(_GString), [
	("init",		ctypes.POINTER(ctypes.c_char)),] )

g_string_new_len = _rpythonic_function_(		"g_string_new_len", ctypes.POINTER(_GString), [
	("init",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),] )

g_string_sized_new = _rpythonic_function_(		"g_string_sized_new", ctypes.POINTER(_GString), [
	("dfl_size",		ctypes.c_ulong),] )

g_string_free = _rpythonic_function_(		"g_string_free", ctypes.POINTER(ctypes.c_char), [
	("string",		ctypes.POINTER(_GString)),
	("free_segment",		ctypes.c_int),] )

g_string_equal = _rpythonic_function_(		"g_string_equal", ctypes.c_int, [
	("v",		ctypes.POINTER(_GString)),
	("v2",		ctypes.POINTER(_GString)),] )

g_string_hash = _rpythonic_function_(		"g_string_hash", ctypes.c_uint, [
	("C_str",		ctypes.POINTER(_GString)),] )

g_string_assign = _rpythonic_function_(		"g_string_assign", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("rval",		ctypes.POINTER(ctypes.c_char)),] )

g_string_truncate = _rpythonic_function_(		"g_string_truncate", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("C_len",		ctypes.c_ulong),] )

g_string_set_size = _rpythonic_function_(		"g_string_set_size", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("C_len",		ctypes.c_ulong),] )

g_string_insert_len = _rpythonic_function_(		"g_string_insert_len", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("pos",		ctypes.c_long),
	("val",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),] )

g_string_append = _rpythonic_function_(		"g_string_append", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("val",		ctypes.POINTER(ctypes.c_char)),] )

g_string_append_len = _rpythonic_function_(		"g_string_append_len", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("val",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),] )

g_string_append_c = _rpythonic_function_(		"g_string_append_c", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("c",		ctypes.c_char),] )

g_string_append_unichar = _rpythonic_function_(		"g_string_append_unichar", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("wc",		ctypes.c_uint),] )

g_string_prepend = _rpythonic_function_(		"g_string_prepend", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("val",		ctypes.POINTER(ctypes.c_char)),] )

g_string_prepend_c = _rpythonic_function_(		"g_string_prepend_c", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("c",		ctypes.c_char),] )

g_string_prepend_unichar = _rpythonic_function_(		"g_string_prepend_unichar", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("wc",		ctypes.c_uint),] )

g_string_prepend_len = _rpythonic_function_(		"g_string_prepend_len", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("val",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),] )

g_string_insert = _rpythonic_function_(		"g_string_insert", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("pos",		ctypes.c_long),
	("val",		ctypes.POINTER(ctypes.c_char)),] )

g_string_insert_c = _rpythonic_function_(		"g_string_insert_c", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("pos",		ctypes.c_long),
	("c",		ctypes.c_char),] )

g_string_insert_unichar = _rpythonic_function_(		"g_string_insert_unichar", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("pos",		ctypes.c_long),
	("wc",		ctypes.c_uint),] )

g_string_overwrite = _rpythonic_function_(		"g_string_overwrite", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("pos",		ctypes.c_ulong),
	("val",		ctypes.POINTER(ctypes.c_char)),] )

g_string_overwrite_len = _rpythonic_function_(		"g_string_overwrite_len", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("pos",		ctypes.c_ulong),
	("val",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),] )

g_string_erase = _rpythonic_function_(		"g_string_erase", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("pos",		ctypes.c_long),
	("C_len",		ctypes.c_long),] )

g_string_ascii_down = _rpythonic_function_(		"g_string_ascii_down", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),] )

g_string_ascii_up = _rpythonic_function_(		"g_string_ascii_up", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),] )

g_string_vprintf = _rpythonic_function_(		"g_string_vprintf", ctypes.c_void_p, [
	("string",		ctypes.POINTER(_GString)),
	("format",		ctypes.POINTER(ctypes.c_char)),
	("args",		ctypes.c_char),] )

g_string_printf = _rpythonic_function_(		"g_string_printf", ctypes.c_void_p, [
	("string",		ctypes.POINTER(_GString)),
	("format",		ctypes.POINTER(ctypes.c_char)),] )

g_string_append_vprintf = _rpythonic_function_(		"g_string_append_vprintf", ctypes.c_void_p, [
	("string",		ctypes.POINTER(_GString)),
	("format",		ctypes.POINTER(ctypes.c_char)),
	("args",		ctypes.c_char),] )

g_string_append_printf = _rpythonic_function_(		"g_string_append_printf", ctypes.c_void_p, [
	("string",		ctypes.POINTER(_GString)),
	("format",		ctypes.POINTER(ctypes.c_char)),] )

g_string_append_uri_escaped = _rpythonic_function_(		"g_string_append_uri_escaped", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("unescaped",		ctypes.POINTER(ctypes.c_char)),
	("reserved_chars_allowed",		ctypes.POINTER(ctypes.c_char)),
	("allow_utf8",		ctypes.c_int),] )

g_string_down = _rpythonic_function_(		"g_string_down", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),] )

g_string_up = _rpythonic_function_(		"g_string_up", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),] )

GIOFunc = _rpythonic_function_(		"GIOFunc", ctypes.c_int, [
	("source",		ctypes.POINTER(_GIOChannel)),
	("condition",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

io_read = _rpythonic_function_(		"io_read", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("buf",		ctypes.POINTER(ctypes.c_char)),
	("count",		ctypes.c_ulong),
	("bytes_read",		ctypes.POINTER(ctypes.c_ulong)),
	("err",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

io_write = _rpythonic_function_(		"io_write", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("buf",		ctypes.POINTER(ctypes.c_char)),
	("count",		ctypes.c_ulong),
	("bytes_written",		ctypes.POINTER(ctypes.c_ulong)),
	("err",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

io_seek = _rpythonic_function_(		"io_seek", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("offset",		ctypes.c_long),
	("C_type",		ctypes.c_int),
	("err",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

io_close = _rpythonic_function_(		"io_close", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("err",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

io_create_watch = _rpythonic_function_(		"io_create_watch", ctypes.POINTER(_GSource), [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("condition",		ctypes.c_int),] )

io_free = _rpythonic_function_(		"io_free", ctypes.c_void_p, [
	("channel",		ctypes.POINTER(_GIOChannel)),] )

io_set_flags = _rpythonic_function_(		"io_set_flags", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("flags",		ctypes.c_int),
	("err",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

io_get_flags = _rpythonic_function_(		"io_get_flags", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),] )

g_io_channel_init = _rpythonic_function_(		"g_io_channel_init", ctypes.c_void_p, [
	("channel",		ctypes.POINTER(_GIOChannel)),] )

g_io_channel_ref = _rpythonic_function_(		"g_io_channel_ref", ctypes.POINTER(_GIOChannel), [
	("channel",		ctypes.POINTER(_GIOChannel)),] )

g_io_channel_unref = _rpythonic_function_(		"g_io_channel_unref", ctypes.c_void_p, [
	("channel",		ctypes.POINTER(_GIOChannel)),] )

g_io_channel_read = _rpythonic_function_(		"g_io_channel_read", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("buf",		ctypes.POINTER(ctypes.c_char)),
	("count",		ctypes.c_ulong),
	("bytes_read",		ctypes.POINTER(ctypes.c_ulong)),] )

g_io_channel_write = _rpythonic_function_(		"g_io_channel_write", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("buf",		ctypes.POINTER(ctypes.c_char)),
	("count",		ctypes.c_ulong),
	("bytes_written",		ctypes.POINTER(ctypes.c_ulong)),] )

g_io_channel_seek = _rpythonic_function_(		"g_io_channel_seek", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("offset",		ctypes.c_long),
	("C_type",		ctypes.c_int),] )

g_io_channel_close = _rpythonic_function_(		"g_io_channel_close", ctypes.c_void_p, [
	("channel",		ctypes.POINTER(_GIOChannel)),] )

g_io_channel_shutdown = _rpythonic_function_(		"g_io_channel_shutdown", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("flush",		ctypes.c_int),
	("err",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_add_watch_full = _rpythonic_function_(		"g_io_add_watch_full", ctypes.c_uint, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("priority",		ctypes.c_int),
	("condition",		ctypes.c_int),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GIOChannel),ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_io_create_watch = _rpythonic_function_(		"g_io_create_watch", ctypes.POINTER(_GSource), [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("condition",		ctypes.c_int),] )

g_io_add_watch = _rpythonic_function_(		"g_io_add_watch", ctypes.c_uint, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("condition",		ctypes.c_int),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GIOChannel),ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_io_channel_set_buffer_size = _rpythonic_function_(		"g_io_channel_set_buffer_size", ctypes.c_void_p, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("size",		ctypes.c_ulong),] )

g_io_channel_get_buffer_size = _rpythonic_function_(		"g_io_channel_get_buffer_size", ctypes.c_ulong, [
	("channel",		ctypes.POINTER(_GIOChannel)),] )

g_io_channel_get_buffer_condition = _rpythonic_function_(		"g_io_channel_get_buffer_condition", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),] )

g_io_channel_set_flags = _rpythonic_function_(		"g_io_channel_set_flags", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("flags",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_channel_get_flags = _rpythonic_function_(		"g_io_channel_get_flags", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),] )

g_io_channel_set_line_term = _rpythonic_function_(		"g_io_channel_set_line_term", ctypes.c_void_p, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("line_term",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),] )

g_io_channel_get_line_term = _rpythonic_function_(		"g_io_channel_get_line_term", ctypes.POINTER(ctypes.c_char), [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("length",		ctypes.POINTER(ctypes.c_int)),] )

g_io_channel_set_buffered = _rpythonic_function_(		"g_io_channel_set_buffered", ctypes.c_void_p, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("buffered",		ctypes.c_int),] )

g_io_channel_get_buffered = _rpythonic_function_(		"g_io_channel_get_buffered", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),] )

g_io_channel_set_encoding = _rpythonic_function_(		"g_io_channel_set_encoding", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("encoding",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_channel_get_encoding = _rpythonic_function_(		"g_io_channel_get_encoding", ctypes.POINTER(ctypes.c_char), [
	("channel",		ctypes.POINTER(_GIOChannel)),] )

g_io_channel_set_close_on_unref = _rpythonic_function_(		"g_io_channel_set_close_on_unref", ctypes.c_void_p, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("do_close",		ctypes.c_int),] )

g_io_channel_get_close_on_unref = _rpythonic_function_(		"g_io_channel_get_close_on_unref", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),] )

g_io_channel_flush = _rpythonic_function_(		"g_io_channel_flush", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_channel_read_line = _rpythonic_function_(		"g_io_channel_read_line", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("str_return",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("length",		ctypes.POINTER(ctypes.c_ulong)),
	("terminator_pos",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_channel_read_line_string = _rpythonic_function_(		"g_io_channel_read_line_string", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("buffer",		ctypes.POINTER(_GString)),
	("terminator_pos",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_channel_read_to_end = _rpythonic_function_(		"g_io_channel_read_to_end", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("str_return",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("length",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_channel_read_chars = _rpythonic_function_(		"g_io_channel_read_chars", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("buf",		ctypes.POINTER(ctypes.c_char)),
	("count",		ctypes.c_ulong),
	("bytes_read",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_channel_read_unichar = _rpythonic_function_(		"g_io_channel_read_unichar", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("thechar",		ctypes.POINTER(ctypes.c_uint)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_channel_write_chars = _rpythonic_function_(		"g_io_channel_write_chars", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("buf",		ctypes.POINTER(ctypes.c_char)),
	("count",		ctypes.c_long),
	("bytes_written",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_channel_write_unichar = _rpythonic_function_(		"g_io_channel_write_unichar", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("thechar",		ctypes.c_uint),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_channel_seek_position = _rpythonic_function_(		"g_io_channel_seek_position", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("offset",		ctypes.c_long),
	("C_type",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_channel_new_file = _rpythonic_function_(		"g_io_channel_new_file", ctypes.POINTER(_GIOChannel), [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("mode",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_channel_error_quark = _rpythonic_function_(		"g_io_channel_error_quark", ctypes.c_uint, [] )

g_io_channel_error_from_errno = _rpythonic_function_(		"g_io_channel_error_from_errno", ctypes.c_int, [
	("en",		ctypes.c_int),] )

g_io_channel_unix_new = _rpythonic_function_(		"g_io_channel_unix_new", ctypes.POINTER(_GIOChannel), [
	("fd",		ctypes.c_int),] )

g_io_channel_unix_get_fd = _rpythonic_function_(		"g_io_channel_unix_get_fd", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),] )

g_key_file_error_quark = _rpythonic_function_(		"g_key_file_error_quark", ctypes.c_uint, [] )

g_key_file_new = _rpythonic_function_(		"g_key_file_new", ctypes.POINTER(_GKeyFile), [] )

g_key_file_free = _rpythonic_function_(		"g_key_file_free", ctypes.c_void_p, [
	("key_file",		ctypes.POINTER(_GKeyFile)),] )

g_key_file_set_list_separator = _rpythonic_function_(		"g_key_file_set_list_separator", ctypes.c_void_p, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("separator",		ctypes.c_char),] )

g_key_file_load_from_file = _rpythonic_function_(		"g_key_file_load_from_file", ctypes.c_int, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_load_from_data = _rpythonic_function_(		"g_key_file_load_from_data", ctypes.c_int, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("data",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_ulong),
	("flags",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_load_from_dirs = _rpythonic_function_(		"g_key_file_load_from_dirs", ctypes.c_int, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("search_dirs",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("full_path",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("flags",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_load_from_data_dirs = _rpythonic_function_(		"g_key_file_load_from_data_dirs", ctypes.c_int, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("full_path",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("flags",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_to_data = _rpythonic_function_(		"g_key_file_to_data", ctypes.POINTER(ctypes.c_char), [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_get_start_group = _rpythonic_function_(		"g_key_file_get_start_group", ctypes.POINTER(ctypes.c_char), [
	("key_file",		ctypes.POINTER(_GKeyFile)),] )

g_key_file_get_groups = _rpythonic_function_(		"g_key_file_get_groups", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),] )

g_key_file_get_keys = _rpythonic_function_(		"g_key_file_get_keys", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_has_group = _rpythonic_function_(		"g_key_file_has_group", ctypes.c_int, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),] )

g_key_file_has_key = _rpythonic_function_(		"g_key_file_has_key", ctypes.c_int, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_get_value = _rpythonic_function_(		"g_key_file_get_value", ctypes.POINTER(ctypes.c_char), [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_set_value = _rpythonic_function_(		"g_key_file_set_value", ctypes.c_void_p, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

g_key_file_get_string = _rpythonic_function_(		"g_key_file_get_string", ctypes.POINTER(ctypes.c_char), [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_set_string = _rpythonic_function_(		"g_key_file_set_string", ctypes.c_void_p, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_key_file_get_locale_string = _rpythonic_function_(		"g_key_file_get_locale_string", ctypes.POINTER(ctypes.c_char), [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("locale",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_set_locale_string = _rpythonic_function_(		"g_key_file_set_locale_string", ctypes.c_void_p, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("locale",		ctypes.POINTER(ctypes.c_char)),
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_key_file_get_boolean = _rpythonic_function_(		"g_key_file_get_boolean", ctypes.c_int, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_set_boolean = _rpythonic_function_(		"g_key_file_set_boolean", ctypes.c_void_p, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_int),] )

g_key_file_get_integer = _rpythonic_function_(		"g_key_file_get_integer", ctypes.c_int, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_set_integer = _rpythonic_function_(		"g_key_file_set_integer", ctypes.c_void_p, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_int),] )

g_key_file_get_int64 = _rpythonic_function_(		"g_key_file_get_int64", ctypes.c_long, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_set_int64 = _rpythonic_function_(		"g_key_file_set_int64", ctypes.c_void_p, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_long),] )

g_key_file_get_uint64 = _rpythonic_function_(		"g_key_file_get_uint64", ctypes.c_ulong, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_set_uint64 = _rpythonic_function_(		"g_key_file_set_uint64", ctypes.c_void_p, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_ulong),] )

g_key_file_get_double = _rpythonic_function_(		"g_key_file_get_double", ctypes.c_double, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_set_double = _rpythonic_function_(		"g_key_file_set_double", ctypes.c_void_p, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_double),] )

g_key_file_get_string_list = _rpythonic_function_(		"g_key_file_get_string_list", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_set_string_list = _rpythonic_function_(		"g_key_file_set_string_list", ctypes.c_void_p, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("C_list",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_ulong),] )

g_key_file_get_locale_string_list = _rpythonic_function_(		"g_key_file_get_locale_string_list", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("locale",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_set_locale_string_list = _rpythonic_function_(		"g_key_file_set_locale_string_list", ctypes.c_void_p, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("locale",		ctypes.POINTER(ctypes.c_char)),
	("C_list",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_ulong),] )

g_key_file_get_boolean_list = _rpythonic_function_(		"g_key_file_get_boolean_list", ctypes.POINTER(ctypes.c_int), [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_set_boolean_list = _rpythonic_function_(		"g_key_file_set_boolean_list", ctypes.c_void_p, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("C_list",		ctypes.c_int),
	("length",		ctypes.c_ulong),] )

g_key_file_get_integer_list = _rpythonic_function_(		"g_key_file_get_integer_list", ctypes.POINTER(ctypes.c_int), [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_set_double_list = _rpythonic_function_(		"g_key_file_set_double_list", ctypes.c_void_p, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("C_list",		ctypes.c_double),
	("length",		ctypes.c_ulong),] )

g_key_file_get_double_list = _rpythonic_function_(		"g_key_file_get_double_list", ctypes.POINTER(ctypes.c_double), [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_set_integer_list = _rpythonic_function_(		"g_key_file_set_integer_list", ctypes.c_void_p, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("C_list",		ctypes.c_int),
	("length",		ctypes.c_ulong),] )

g_key_file_set_comment = _rpythonic_function_(		"g_key_file_set_comment", ctypes.c_int, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("comment",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_get_comment = _rpythonic_function_(		"g_key_file_get_comment", ctypes.POINTER(ctypes.c_char), [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_remove_comment = _rpythonic_function_(		"g_key_file_remove_comment", ctypes.c_int, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_remove_key = _rpythonic_function_(		"g_key_file_remove_key", ctypes.c_int, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_remove_group = _rpythonic_function_(		"g_key_file_remove_group", ctypes.c_int, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_mapped_file_new = _rpythonic_function_(		"g_mapped_file_new", ctypes.POINTER(_GMappedFile), [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("writable",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_mapped_file_get_length = _rpythonic_function_(		"g_mapped_file_get_length", ctypes.c_ulong, [
	("file",		ctypes.POINTER(_GMappedFile)),] )

g_mapped_file_get_contents = _rpythonic_function_(		"g_mapped_file_get_contents", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(_GMappedFile)),] )

g_mapped_file_ref = _rpythonic_function_(		"g_mapped_file_ref", ctypes.POINTER(_GMappedFile), [
	("file",		ctypes.POINTER(_GMappedFile)),] )

g_mapped_file_unref = _rpythonic_function_(		"g_mapped_file_unref", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GMappedFile)),] )

g_mapped_file_free = _rpythonic_function_(		"g_mapped_file_free", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GMappedFile)),] )

g_markup_error_quark = _rpythonic_function_(		"g_markup_error_quark", ctypes.c_uint, [] )

start_element = _rpythonic_function_(		"start_element", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMarkupParseContext)),
	("element_name",		ctypes.POINTER(ctypes.c_char)),
	("attribute_names",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("attribute_values",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

end_element = _rpythonic_function_(		"end_element", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMarkupParseContext)),
	("element_name",		ctypes.POINTER(ctypes.c_char)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

text = _rpythonic_function_(		"text", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMarkupParseContext)),
	("text",		ctypes.POINTER(ctypes.c_char)),
	("text_len",		ctypes.c_ulong),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

passthrough = _rpythonic_function_(		"passthrough", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMarkupParseContext)),
	("passthrough_text",		ctypes.POINTER(ctypes.c_char)),
	("text_len",		ctypes.c_ulong),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

error = _rpythonic_function_(		"error", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMarkupParseContext)),
	("error",		ctypes.POINTER(_GError)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_markup_parse_context_new = _rpythonic_function_(		"g_markup_parse_context_new", ctypes.POINTER(_GMarkupParseContext), [
	("parser",		ctypes.POINTER(_GMarkupParser)),
	("flags",		ctypes.c_int),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("user_data_dnotify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_markup_parse_context_free = _rpythonic_function_(		"g_markup_parse_context_free", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMarkupParseContext)),] )

g_markup_parse_context_parse = _rpythonic_function_(		"g_markup_parse_context_parse", ctypes.c_int, [
	("context",		ctypes.POINTER(_GMarkupParseContext)),
	("text",		ctypes.POINTER(ctypes.c_char)),
	("text_len",		ctypes.c_long),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_markup_parse_context_push = _rpythonic_function_(		"g_markup_parse_context_push", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMarkupParseContext)),
	("parser",		ctypes.POINTER(_GMarkupParser)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_markup_parse_context_pop = _rpythonic_function_(		"g_markup_parse_context_pop", ctypes.POINTER(ctypes.c_void_p), [
	("context",		ctypes.POINTER(_GMarkupParseContext)),] )

g_markup_parse_context_end_parse = _rpythonic_function_(		"g_markup_parse_context_end_parse", ctypes.c_int, [
	("context",		ctypes.POINTER(_GMarkupParseContext)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_markup_parse_context_get_element = _rpythonic_function_(		"g_markup_parse_context_get_element", ctypes.POINTER(ctypes.c_char), [
	("context",		ctypes.POINTER(_GMarkupParseContext)),] )

g_markup_parse_context_get_element_stack = _rpythonic_function_(		"g_markup_parse_context_get_element_stack", ctypes.POINTER(_GSList), [
	("context",		ctypes.POINTER(_GMarkupParseContext)),] )

g_markup_parse_context_get_position = _rpythonic_function_(		"g_markup_parse_context_get_position", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMarkupParseContext)),
	("line_number",		ctypes.POINTER(ctypes.c_int)),
	("char_number",		ctypes.POINTER(ctypes.c_int)),] )

g_markup_parse_context_get_user_data = _rpythonic_function_(		"g_markup_parse_context_get_user_data", ctypes.POINTER(ctypes.c_void_p), [
	("context",		ctypes.POINTER(_GMarkupParseContext)),] )

g_markup_escape_text = _rpythonic_function_(		"g_markup_escape_text", ctypes.POINTER(ctypes.c_char), [
	("text",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_long),] )

g_markup_printf_escaped = _rpythonic_function_(		"g_markup_printf_escaped", ctypes.POINTER(ctypes.c_char), [
	("format",		ctypes.POINTER(ctypes.c_char)),] )

g_markup_vprintf_escaped = _rpythonic_function_(		"g_markup_vprintf_escaped", ctypes.POINTER(ctypes.c_char), [
	("format",		ctypes.POINTER(ctypes.c_char)),
	("args",		ctypes.c_char),] )

g_markup_collect_attributes = _rpythonic_function_(		"g_markup_collect_attributes", ctypes.c_int, [
	("element_name",		ctypes.POINTER(ctypes.c_char)),
	("attribute_names",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("attribute_values",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),
	("first_type",		ctypes.c_int),
	("first_attr",		ctypes.POINTER(ctypes.c_char)),] )

g_printf_string_upper_bound = _rpythonic_function_(		"g_printf_string_upper_bound", ctypes.c_ulong, [
	("format",		ctypes.POINTER(ctypes.c_char)),
	("args",		ctypes.c_char),] )

GLogFunc = _rpythonic_function_(		"GLogFunc", ctypes.c_void_p, [
	("log_domain",		ctypes.POINTER(ctypes.c_char)),
	("log_level",		ctypes.c_int),
	("message",		ctypes.POINTER(ctypes.c_char)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_log_set_handler = _rpythonic_function_(		"g_log_set_handler", ctypes.c_uint, [
	("log_domain",		ctypes.POINTER(ctypes.c_char)),
	("log_levels",		ctypes.c_int),
	("log_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_char),ctypes.c_int,ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_log_remove_handler = _rpythonic_function_(		"g_log_remove_handler", ctypes.c_void_p, [
	("log_domain",		ctypes.POINTER(ctypes.c_char)),
	("handler_id",		ctypes.c_uint),] )

g_log_default_handler = _rpythonic_function_(		"g_log_default_handler", ctypes.c_void_p, [
	("log_domain",		ctypes.POINTER(ctypes.c_char)),
	("log_level",		ctypes.c_int),
	("message",		ctypes.POINTER(ctypes.c_char)),
	("unused_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_log_set_default_handler = _rpythonic_function_(		"g_log_set_default_handler", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_char),ctypes.c_int,ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),), [
	("log_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_char),ctypes.c_int,ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_log = _rpythonic_function_(		"g_log", ctypes.c_void_p, [
	("log_domain",		ctypes.POINTER(ctypes.c_char)),
	("log_level",		ctypes.c_int),
	("format",		ctypes.POINTER(ctypes.c_char)),] )

g_logv = _rpythonic_function_(		"g_logv", ctypes.c_void_p, [
	("log_domain",		ctypes.POINTER(ctypes.c_char)),
	("log_level",		ctypes.c_int),
	("format",		ctypes.POINTER(ctypes.c_char)),
	("args",		ctypes.c_char),] )

g_log_set_fatal_mask = _rpythonic_function_(		"g_log_set_fatal_mask", ctypes.c_int, [
	("log_domain",		ctypes.POINTER(ctypes.c_char)),
	("fatal_mask",		ctypes.c_int),] )

g_log_set_always_fatal = _rpythonic_function_(		"g_log_set_always_fatal", ctypes.c_int, [
	("fatal_mask",		ctypes.c_int),] )

_g_log_fallback_handler = _rpythonic_function_(		"_g_log_fallback_handler", ctypes.c_void_p, [
	("log_domain",		ctypes.POINTER(ctypes.c_char)),
	("log_level",		ctypes.c_int),
	("message",		ctypes.POINTER(ctypes.c_char)),
	("unused_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_return_if_fail_warning = _rpythonic_function_(		"g_return_if_fail_warning", ctypes.c_void_p, [
	("log_domain",		ctypes.POINTER(ctypes.c_char)),
	("pretty_function",		ctypes.POINTER(ctypes.c_char)),
	("expression",		ctypes.POINTER(ctypes.c_char)),] )

g_warn_message = _rpythonic_function_(		"g_warn_message", ctypes.c_void_p, [
	("domain",		ctypes.POINTER(ctypes.c_char)),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("func",		ctypes.POINTER(ctypes.c_char)),
	("warnexpr",		ctypes.POINTER(ctypes.c_char)),] )

g_assert_warning = _rpythonic_function_(		"g_assert_warning", ctypes.c_void_p, [
	("log_domain",		ctypes.POINTER(ctypes.c_char)),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("pretty_function",		ctypes.POINTER(ctypes.c_char)),
	("expression",		ctypes.POINTER(ctypes.c_char)),] )

GPrintFunc = _rpythonic_function_(		"GPrintFunc", ctypes.c_void_p, [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_print = _rpythonic_function_(		"g_print", ctypes.c_void_p, [
	("format",		ctypes.POINTER(ctypes.c_char)),] )

g_set_print_handler = _rpythonic_function_(		"g_set_print_handler", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_char),), [
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_char),)),] )

g_printerr = _rpythonic_function_(		"g_printerr", ctypes.c_void_p, [
	("format",		ctypes.POINTER(ctypes.c_char)),] )

g_set_printerr_handler = _rpythonic_function_(		"g_set_printerr_handler", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_char),), [
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_char),)),] )

GNodeTraverseFunc = _rpythonic_function_(		"GNodeTraverseFunc", ctypes.c_int, [
	("node",		ctypes.POINTER(_GNode)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

GNodeForeachFunc = _rpythonic_function_(		"GNodeForeachFunc", ctypes.c_void_p, [
	("node",		ctypes.POINTER(_GNode)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

GCopyFunc = _rpythonic_function_(		"GCopyFunc", ctypes.POINTER(ctypes.c_void_p), [
	("src",		ctypes.POINTER(ctypes.c_void_p)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_node_new = _rpythonic_function_(		"g_node_new", ctypes.POINTER(_GNode), [("data",		ctypes.c_void_p)] )

g_node_destroy = _rpythonic_function_(		"g_node_destroy", ctypes.c_void_p, [
	("root",		ctypes.POINTER(_GNode)),] )

g_node_unlink = _rpythonic_function_(		"g_node_unlink", ctypes.c_void_p, [
	("node",		ctypes.POINTER(_GNode)),] )

g_node_copy_deep = _rpythonic_function_(		"g_node_copy_deep", ctypes.POINTER(_GNode), [
	("node",		ctypes.POINTER(_GNode)),
	("copy_func",		ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_node_copy = _rpythonic_function_(		"g_node_copy", ctypes.POINTER(_GNode), [
	("node",		ctypes.POINTER(_GNode)),] )

g_node_insert = _rpythonic_function_(		"g_node_insert", ctypes.POINTER(_GNode), [
	("parent",		ctypes.POINTER(_GNode)),
	("position",		ctypes.c_int),
	("node",		ctypes.POINTER(_GNode)),] )

g_node_insert_before = _rpythonic_function_(		"g_node_insert_before", ctypes.POINTER(_GNode), [
	("parent",		ctypes.POINTER(_GNode)),
	("sibling",		ctypes.POINTER(_GNode)),
	("node",		ctypes.POINTER(_GNode)),] )

g_node_insert_after = _rpythonic_function_(		"g_node_insert_after", ctypes.POINTER(_GNode), [
	("parent",		ctypes.POINTER(_GNode)),
	("sibling",		ctypes.POINTER(_GNode)),
	("node",		ctypes.POINTER(_GNode)),] )

g_node_prepend = _rpythonic_function_(		"g_node_prepend", ctypes.POINTER(_GNode), [
	("parent",		ctypes.POINTER(_GNode)),
	("node",		ctypes.POINTER(_GNode)),] )

g_node_n_nodes = _rpythonic_function_(		"g_node_n_nodes", ctypes.c_uint, [
	("root",		ctypes.POINTER(_GNode)),
	("flags",		ctypes.c_int),] )

g_node_get_root = _rpythonic_function_(		"g_node_get_root", ctypes.POINTER(_GNode), [
	("node",		ctypes.POINTER(_GNode)),] )

g_node_is_ancestor = _rpythonic_function_(		"g_node_is_ancestor", ctypes.c_int, [
	("node",		ctypes.POINTER(_GNode)),
	("descendant",		ctypes.POINTER(_GNode)),] )

g_node_depth = _rpythonic_function_(		"g_node_depth", ctypes.c_uint, [
	("node",		ctypes.POINTER(_GNode)),] )

g_node_find = _rpythonic_function_(		"g_node_find", ctypes.POINTER(_GNode), [
	("root",		ctypes.POINTER(_GNode)),
	("order",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_node_traverse = _rpythonic_function_(		"g_node_traverse", ctypes.c_void_p, [
	("root",		ctypes.POINTER(_GNode)),
	("order",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("max_depth",		ctypes.c_int),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GNode),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_node_max_height = _rpythonic_function_(		"g_node_max_height", ctypes.c_uint, [
	("root",		ctypes.POINTER(_GNode)),] )

g_node_children_foreach = _rpythonic_function_(		"g_node_children_foreach", ctypes.c_void_p, [
	("node",		ctypes.POINTER(_GNode)),
	("flags",		ctypes.c_int),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GNode),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_node_reverse_children = _rpythonic_function_(		"g_node_reverse_children", ctypes.c_void_p, [
	("node",		ctypes.POINTER(_GNode)),] )

g_node_n_children = _rpythonic_function_(		"g_node_n_children", ctypes.c_uint, [
	("node",		ctypes.POINTER(_GNode)),] )

g_node_nth_child = _rpythonic_function_(		"g_node_nth_child", ctypes.POINTER(_GNode), [
	("node",		ctypes.POINTER(_GNode)),
	("n",		ctypes.c_uint),] )

g_node_last_child = _rpythonic_function_(		"g_node_last_child", ctypes.POINTER(_GNode), [
	("node",		ctypes.POINTER(_GNode)),] )

g_node_find_child = _rpythonic_function_(		"g_node_find_child", ctypes.POINTER(_GNode), [
	("node",		ctypes.POINTER(_GNode)),
	("flags",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_node_child_position = _rpythonic_function_(		"g_node_child_position", ctypes.c_int, [
	("node",		ctypes.POINTER(_GNode)),
	("child",		ctypes.POINTER(_GNode)),] )

g_node_child_index = _rpythonic_function_(		"g_node_child_index", ctypes.c_int, [
	("node",		ctypes.POINTER(_GNode)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_node_first_sibling = _rpythonic_function_(		"g_node_first_sibling", ctypes.POINTER(_GNode), [
	("node",		ctypes.POINTER(_GNode)),] )

g_node_last_sibling = _rpythonic_function_(		"g_node_last_sibling", ctypes.POINTER(_GNode), [
	("node",		ctypes.POINTER(_GNode)),] )

g_node_push_allocator = _rpythonic_function_(		"g_node_push_allocator", ctypes.c_void_p, [("dummy",		ctypes.c_void_p)] )

g_node_pop_allocator = _rpythonic_function_(		"g_node_pop_allocator", ctypes.c_void_p, [] )

GOptionArgFunc = _rpythonic_function_(		"GOptionArgFunc", ctypes.c_int, [
	("option_name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_char)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

GOptionParseFunc = _rpythonic_function_(		"GOptionParseFunc", ctypes.c_int, [
	("context",		ctypes.POINTER(_GOptionContext)),
	("group",		ctypes.POINTER(_GOptionGroup)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

GOptionErrorFunc = _rpythonic_function_(		"GOptionErrorFunc", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GOptionContext)),
	("group",		ctypes.POINTER(_GOptionGroup)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_option_error_quark = _rpythonic_function_(		"g_option_error_quark", ctypes.c_uint, [] )

g_option_context_new = _rpythonic_function_(		"g_option_context_new", ctypes.POINTER(_GOptionContext), [
	("parameter_string",		ctypes.POINTER(ctypes.c_char)),] )

g_option_context_set_summary = _rpythonic_function_(		"g_option_context_set_summary", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GOptionContext)),
	("summary",		ctypes.POINTER(ctypes.c_char)),] )

g_option_context_get_summary = _rpythonic_function_(		"g_option_context_get_summary", ctypes.POINTER(ctypes.c_char), [
	("context",		ctypes.POINTER(_GOptionContext)),] )

g_option_context_set_description = _rpythonic_function_(		"g_option_context_set_description", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GOptionContext)),
	("description",		ctypes.POINTER(ctypes.c_char)),] )

g_option_context_get_description = _rpythonic_function_(		"g_option_context_get_description", ctypes.POINTER(ctypes.c_char), [
	("context",		ctypes.POINTER(_GOptionContext)),] )

g_option_context_free = _rpythonic_function_(		"g_option_context_free", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GOptionContext)),] )

g_option_context_set_help_enabled = _rpythonic_function_(		"g_option_context_set_help_enabled", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GOptionContext)),
	("help_enabled",		ctypes.c_int),] )

g_option_context_get_help_enabled = _rpythonic_function_(		"g_option_context_get_help_enabled", ctypes.c_int, [
	("context",		ctypes.POINTER(_GOptionContext)),] )

g_option_context_set_ignore_unknown_options = _rpythonic_function_(		"g_option_context_set_ignore_unknown_options", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GOptionContext)),
	("ignore_unknown",		ctypes.c_int),] )

g_option_context_get_ignore_unknown_options = _rpythonic_function_(		"g_option_context_get_ignore_unknown_options", ctypes.c_int, [
	("context",		ctypes.POINTER(_GOptionContext)),] )

g_option_context_add_main_entries = _rpythonic_function_(		"g_option_context_add_main_entries", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GOptionContext)),
	("entries",		ctypes.POINTER(_GOptionEntry)),
	("translation_domain",		ctypes.POINTER(ctypes.c_char)),] )

g_option_context_parse = _rpythonic_function_(		"g_option_context_parse", ctypes.c_int, [
	("context",		ctypes.POINTER(_GOptionContext)),
	("argc",		ctypes.POINTER(ctypes.c_int)),
	("argv",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(ctypes.c_char)))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_option_context_set_translate_func = _rpythonic_function_(		"g_option_context_set_translate_func", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GOptionContext)),
	("func",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),))),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy_notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_option_context_set_translation_domain = _rpythonic_function_(		"g_option_context_set_translation_domain", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GOptionContext)),
	("domain",		ctypes.POINTER(ctypes.c_char)),] )

g_option_context_add_group = _rpythonic_function_(		"g_option_context_add_group", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GOptionContext)),
	("group",		ctypes.POINTER(_GOptionGroup)),] )

g_option_context_set_main_group = _rpythonic_function_(		"g_option_context_set_main_group", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GOptionContext)),
	("group",		ctypes.POINTER(_GOptionGroup)),] )

g_option_context_get_main_group = _rpythonic_function_(		"g_option_context_get_main_group", ctypes.POINTER(_GOptionGroup), [
	("context",		ctypes.POINTER(_GOptionContext)),] )

g_option_context_get_help = _rpythonic_function_(		"g_option_context_get_help", ctypes.POINTER(ctypes.c_char), [
	("context",		ctypes.POINTER(_GOptionContext)),
	("main_help",		ctypes.c_int),
	("group",		ctypes.POINTER(_GOptionGroup)),] )

g_option_group_new = _rpythonic_function_(		"g_option_group_new", ctypes.POINTER(_GOptionGroup), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("description",		ctypes.POINTER(ctypes.c_char)),
	("help_description",		ctypes.POINTER(ctypes.c_char)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_option_group_set_parse_hooks = _rpythonic_function_(		"g_option_group_set_parse_hooks", ctypes.c_void_p, [
	("group",		ctypes.POINTER(_GOptionGroup)),
	("pre_parse_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GOptionContext),ctypes.POINTER(_GOptionGroup),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.POINTER(_GError)),)),
	("post_parse_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GOptionContext),ctypes.POINTER(_GOptionGroup),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.POINTER(_GError)),)),] )

g_option_group_set_error_hook = _rpythonic_function_(		"g_option_group_set_error_hook", ctypes.c_void_p, [
	("group",		ctypes.POINTER(_GOptionGroup)),
	("error_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GOptionContext),ctypes.POINTER(_GOptionGroup),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.POINTER(_GError)),)),] )

g_option_group_free = _rpythonic_function_(		"g_option_group_free", ctypes.c_void_p, [
	("group",		ctypes.POINTER(_GOptionGroup)),] )

g_option_group_add_entries = _rpythonic_function_(		"g_option_group_add_entries", ctypes.c_void_p, [
	("group",		ctypes.POINTER(_GOptionGroup)),
	("entries",		ctypes.POINTER(_GOptionEntry)),] )

g_option_group_set_translate_func = _rpythonic_function_(		"g_option_group_set_translate_func", ctypes.c_void_p, [
	("group",		ctypes.POINTER(_GOptionGroup)),
	("func",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),))),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy_notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_option_group_set_translation_domain = _rpythonic_function_(		"g_option_group_set_translation_domain", ctypes.c_void_p, [
	("group",		ctypes.POINTER(_GOptionGroup)),
	("domain",		ctypes.POINTER(ctypes.c_char)),] )

g_pattern_spec_new = _rpythonic_function_(		"g_pattern_spec_new", ctypes.POINTER(_GPatternSpec), [
	("pattern",		ctypes.POINTER(ctypes.c_char)),] )

g_pattern_spec_free = _rpythonic_function_(		"g_pattern_spec_free", ctypes.c_void_p, [
	("pspec",		ctypes.POINTER(_GPatternSpec)),] )

g_pattern_spec_equal = _rpythonic_function_(		"g_pattern_spec_equal", ctypes.c_int, [
	("pspec1",		ctypes.POINTER(_GPatternSpec)),
	("pspec2",		ctypes.POINTER(_GPatternSpec)),] )

g_pattern_match = _rpythonic_function_(		"g_pattern_match", ctypes.c_int, [
	("pspec",		ctypes.POINTER(_GPatternSpec)),
	("string_length",		ctypes.c_uint),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("string_reversed",		ctypes.POINTER(ctypes.c_char)),] )

g_pattern_match_string = _rpythonic_function_(		"g_pattern_match_string", ctypes.c_int, [
	("pspec",		ctypes.POINTER(_GPatternSpec)),
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_pattern_match_simple = _rpythonic_function_(		"g_pattern_match_simple", ctypes.c_int, [
	("pattern",		ctypes.POINTER(ctypes.c_char)),
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_spaced_primes_closest = _rpythonic_function_(		"g_spaced_primes_closest", ctypes.c_uint, [
	("num",		ctypes.c_uint),] )

g_qsort_with_data = _rpythonic_function_(		"g_qsort_with_data", ctypes.c_void_p, [
	("pbase",		ctypes.POINTER(ctypes.c_void_p)),
	("total_elems",		ctypes.c_int),
	("size",		ctypes.c_ulong),
	("compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_queue_new = _rpythonic_function_(		"g_queue_new", ctypes.POINTER(_GQueue), [] )

g_queue_free = _rpythonic_function_(		"g_queue_free", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),] )

g_queue_init = _rpythonic_function_(		"g_queue_init", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),] )

g_queue_clear = _rpythonic_function_(		"g_queue_clear", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),] )

g_queue_is_empty = _rpythonic_function_(		"g_queue_is_empty", ctypes.c_int, [
	("queue",		ctypes.POINTER(_GQueue)),] )

g_queue_get_length = _rpythonic_function_(		"g_queue_get_length", ctypes.c_uint, [
	("queue",		ctypes.POINTER(_GQueue)),] )

g_queue_reverse = _rpythonic_function_(		"g_queue_reverse", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),] )

g_queue_copy = _rpythonic_function_(		"g_queue_copy", ctypes.POINTER(_GQueue), [
	("queue",		ctypes.POINTER(_GQueue)),] )

g_queue_foreach = _rpythonic_function_(		"g_queue_foreach", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_queue_find = _rpythonic_function_(		"g_queue_find", ctypes.POINTER(_GList), [
	("queue",		ctypes.POINTER(_GQueue)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_queue_find_custom = _rpythonic_function_(		"g_queue_find_custom", ctypes.POINTER(_GList), [
	("queue",		ctypes.POINTER(_GQueue)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_queue_sort = _rpythonic_function_(		"g_queue_sort", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),
	("compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_queue_push_head = _rpythonic_function_(		"g_queue_push_head", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_queue_push_tail = _rpythonic_function_(		"g_queue_push_tail", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_queue_push_nth = _rpythonic_function_(		"g_queue_push_nth", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("n",		ctypes.c_int),] )

g_queue_pop_head = _rpythonic_function_(		"g_queue_pop_head", ctypes.POINTER(ctypes.c_void_p), [
	("queue",		ctypes.POINTER(_GQueue)),] )

g_queue_pop_tail = _rpythonic_function_(		"g_queue_pop_tail", ctypes.POINTER(ctypes.c_void_p), [
	("queue",		ctypes.POINTER(_GQueue)),] )

g_queue_pop_nth = _rpythonic_function_(		"g_queue_pop_nth", ctypes.POINTER(ctypes.c_void_p), [
	("queue",		ctypes.POINTER(_GQueue)),
	("n",		ctypes.c_uint),] )

g_queue_peek_head = _rpythonic_function_(		"g_queue_peek_head", ctypes.POINTER(ctypes.c_void_p), [
	("queue",		ctypes.POINTER(_GQueue)),] )

g_queue_peek_tail = _rpythonic_function_(		"g_queue_peek_tail", ctypes.POINTER(ctypes.c_void_p), [
	("queue",		ctypes.POINTER(_GQueue)),] )

g_queue_peek_nth = _rpythonic_function_(		"g_queue_peek_nth", ctypes.POINTER(ctypes.c_void_p), [
	("queue",		ctypes.POINTER(_GQueue)),
	("n",		ctypes.c_uint),] )

g_queue_index = _rpythonic_function_(		"g_queue_index", ctypes.c_int, [
	("queue",		ctypes.POINTER(_GQueue)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_queue_remove = _rpythonic_function_(		"g_queue_remove", ctypes.c_int, [
	("queue",		ctypes.POINTER(_GQueue)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_queue_remove_all = _rpythonic_function_(		"g_queue_remove_all", ctypes.c_uint, [
	("queue",		ctypes.POINTER(_GQueue)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_queue_insert_before = _rpythonic_function_(		"g_queue_insert_before", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),
	("sibling",		ctypes.POINTER(_GList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_queue_insert_after = _rpythonic_function_(		"g_queue_insert_after", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),
	("sibling",		ctypes.POINTER(_GList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_queue_insert_sorted = _rpythonic_function_(		"g_queue_insert_sorted", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_queue_push_head_link = _rpythonic_function_(		"g_queue_push_head_link", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),
	("link_",		ctypes.POINTER(_GList)),] )

g_queue_push_tail_link = _rpythonic_function_(		"g_queue_push_tail_link", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),
	("link_",		ctypes.POINTER(_GList)),] )

g_queue_push_nth_link = _rpythonic_function_(		"g_queue_push_nth_link", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),
	("n",		ctypes.c_int),
	("link_",		ctypes.POINTER(_GList)),] )

g_queue_pop_head_link = _rpythonic_function_(		"g_queue_pop_head_link", ctypes.POINTER(_GList), [
	("queue",		ctypes.POINTER(_GQueue)),] )

g_queue_pop_tail_link = _rpythonic_function_(		"g_queue_pop_tail_link", ctypes.POINTER(_GList), [
	("queue",		ctypes.POINTER(_GQueue)),] )

g_queue_pop_nth_link = _rpythonic_function_(		"g_queue_pop_nth_link", ctypes.POINTER(_GList), [
	("queue",		ctypes.POINTER(_GQueue)),
	("n",		ctypes.c_uint),] )

g_queue_peek_head_link = _rpythonic_function_(		"g_queue_peek_head_link", ctypes.POINTER(_GList), [
	("queue",		ctypes.POINTER(_GQueue)),] )

g_queue_peek_tail_link = _rpythonic_function_(		"g_queue_peek_tail_link", ctypes.POINTER(_GList), [
	("queue",		ctypes.POINTER(_GQueue)),] )

g_queue_peek_nth_link = _rpythonic_function_(		"g_queue_peek_nth_link", ctypes.POINTER(_GList), [
	("queue",		ctypes.POINTER(_GQueue)),
	("n",		ctypes.c_uint),] )

g_queue_link_index = _rpythonic_function_(		"g_queue_link_index", ctypes.c_int, [
	("queue",		ctypes.POINTER(_GQueue)),
	("link_",		ctypes.POINTER(_GList)),] )

g_queue_unlink = _rpythonic_function_(		"g_queue_unlink", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),
	("link_",		ctypes.POINTER(_GList)),] )

g_queue_delete_link = _rpythonic_function_(		"g_queue_delete_link", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),
	("link_",		ctypes.POINTER(_GList)),] )

g_rand_new_with_seed = _rpythonic_function_(		"g_rand_new_with_seed", ctypes.POINTER(_GRand), [
	("seed",		ctypes.c_uint),] )

g_rand_new_with_seed_array = _rpythonic_function_(		"g_rand_new_with_seed_array", ctypes.POINTER(_GRand), [
	("seed",		ctypes.POINTER(ctypes.c_uint)),
	("seed_length",		ctypes.c_uint),] )

g_rand_new = _rpythonic_function_(		"g_rand_new", ctypes.POINTER(_GRand), [] )

g_rand_free = _rpythonic_function_(		"g_rand_free", ctypes.c_void_p, [
	("rand_",		ctypes.POINTER(_GRand)),] )

g_rand_copy = _rpythonic_function_(		"g_rand_copy", ctypes.POINTER(_GRand), [
	("rand_",		ctypes.POINTER(_GRand)),] )

g_rand_set_seed = _rpythonic_function_(		"g_rand_set_seed", ctypes.c_void_p, [
	("rand_",		ctypes.POINTER(_GRand)),
	("seed",		ctypes.c_uint),] )

g_rand_set_seed_array = _rpythonic_function_(		"g_rand_set_seed_array", ctypes.c_void_p, [
	("rand_",		ctypes.POINTER(_GRand)),
	("seed",		ctypes.POINTER(ctypes.c_uint)),
	("seed_length",		ctypes.c_uint),] )

g_rand_int = _rpythonic_function_(		"g_rand_int", ctypes.c_uint, [
	("rand_",		ctypes.POINTER(_GRand)),] )

g_rand_int_range = _rpythonic_function_(		"g_rand_int_range", ctypes.c_int, [
	("rand_",		ctypes.POINTER(_GRand)),
	("begin",		ctypes.c_int),
	("end",		ctypes.c_int),] )

g_rand_double = _rpythonic_function_(		"g_rand_double", ctypes.c_double, [
	("rand_",		ctypes.POINTER(_GRand)),] )

g_rand_double_range = _rpythonic_function_(		"g_rand_double_range", ctypes.c_double, [
	("rand_",		ctypes.POINTER(_GRand)),
	("begin",		ctypes.c_double),
	("end",		ctypes.c_double),] )

g_random_set_seed = _rpythonic_function_(		"g_random_set_seed", ctypes.c_void_p, [
	("seed",		ctypes.c_uint),] )

g_random_int = _rpythonic_function_(		"g_random_int", ctypes.c_uint, [] )

g_random_int_range = _rpythonic_function_(		"g_random_int_range", ctypes.c_int, [
	("begin",		ctypes.c_int),
	("end",		ctypes.c_int),] )

g_random_double = _rpythonic_function_(		"g_random_double", ctypes.c_double, [] )

g_random_double_range = _rpythonic_function_(		"g_random_double_range", ctypes.c_double, [
	("begin",		ctypes.c_double),
	("end",		ctypes.c_double),] )

g_relation_new = _rpythonic_function_(		"g_relation_new", ctypes.POINTER(_GRelation), [
	("fields",		ctypes.c_int),] )

g_relation_destroy = _rpythonic_function_(		"g_relation_destroy", ctypes.c_void_p, [
	("relation",		ctypes.POINTER(_GRelation)),] )

g_relation_index = _rpythonic_function_(		"g_relation_index", ctypes.c_void_p, [
	("relation",		ctypes.POINTER(_GRelation)),
	("field",		ctypes.c_int),
	("hash_func",		ctypes.CFUNCTYPE(ctypes.c_uint, )),
	("key_equal_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_relation_insert = _rpythonic_function_(		"g_relation_insert", ctypes.c_void_p, [
	("relation",		ctypes.POINTER(_GRelation)),] )

g_relation_delete = _rpythonic_function_(		"g_relation_delete", ctypes.c_int, [
	("relation",		ctypes.POINTER(_GRelation)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),
	("field",		ctypes.c_int),] )

g_relation_select = _rpythonic_function_(		"g_relation_select", ctypes.POINTER(_GTuples), [
	("relation",		ctypes.POINTER(_GRelation)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),
	("field",		ctypes.c_int),] )

g_relation_count = _rpythonic_function_(		"g_relation_count", ctypes.c_int, [
	("relation",		ctypes.POINTER(_GRelation)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),
	("field",		ctypes.c_int),] )

g_relation_exists = _rpythonic_function_(		"g_relation_exists", ctypes.c_int, [
	("relation",		ctypes.POINTER(_GRelation)),] )

g_relation_print = _rpythonic_function_(		"g_relation_print", ctypes.c_void_p, [
	("relation",		ctypes.POINTER(_GRelation)),] )

g_tuples_destroy = _rpythonic_function_(		"g_tuples_destroy", ctypes.c_void_p, [
	("tuples",		ctypes.POINTER(_GTuples)),] )

g_tuples_index = _rpythonic_function_(		"g_tuples_index", ctypes.POINTER(ctypes.c_void_p), [
	("tuples",		ctypes.POINTER(_GTuples)),
	("index_",		ctypes.c_int),
	("field",		ctypes.c_int),] )

g_regex_error_quark = _rpythonic_function_(		"g_regex_error_quark", ctypes.c_uint, [] )

GRegexEvalCallback = _rpythonic_function_(		"GRegexEvalCallback", ctypes.c_int, [
	("match_info",		ctypes.POINTER(_GMatchInfo)),
	("result",		ctypes.POINTER(_GString)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_regex_new = _rpythonic_function_(		"g_regex_new", ctypes.POINTER(_GRegex), [
	("pattern",		ctypes.POINTER(ctypes.c_char)),
	("compile_options",		ctypes.c_int),
	("match_options",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_regex_ref = _rpythonic_function_(		"g_regex_ref", ctypes.POINTER(_GRegex), [
	("regex",		ctypes.POINTER(_GRegex)),] )

g_regex_unref = _rpythonic_function_(		"g_regex_unref", ctypes.c_void_p, [
	("regex",		ctypes.POINTER(_GRegex)),] )

g_regex_get_pattern = _rpythonic_function_(		"g_regex_get_pattern", ctypes.POINTER(ctypes.c_char), [
	("regex",		ctypes.POINTER(_GRegex)),] )

g_regex_get_max_backref = _rpythonic_function_(		"g_regex_get_max_backref", ctypes.c_int, [
	("regex",		ctypes.POINTER(_GRegex)),] )

g_regex_get_capture_count = _rpythonic_function_(		"g_regex_get_capture_count", ctypes.c_int, [
	("regex",		ctypes.POINTER(_GRegex)),] )

g_regex_get_string_number = _rpythonic_function_(		"g_regex_get_string_number", ctypes.c_int, [
	("regex",		ctypes.POINTER(_GRegex)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_regex_escape_string = _rpythonic_function_(		"g_regex_escape_string", ctypes.POINTER(ctypes.c_char), [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),] )

g_regex_escape_nul = _rpythonic_function_(		"g_regex_escape_nul", ctypes.POINTER(ctypes.c_char), [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),] )

g_regex_get_compile_flags = _rpythonic_function_(		"g_regex_get_compile_flags", ctypes.c_int, [
	("regex",		ctypes.POINTER(_GRegex)),] )

g_regex_get_match_flags = _rpythonic_function_(		"g_regex_get_match_flags", ctypes.c_int, [
	("regex",		ctypes.POINTER(_GRegex)),] )

g_regex_match_simple = _rpythonic_function_(		"g_regex_match_simple", ctypes.c_int, [
	("pattern",		ctypes.POINTER(ctypes.c_char)),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("compile_options",		ctypes.c_int),
	("match_options",		ctypes.c_int),] )

g_regex_match = _rpythonic_function_(		"g_regex_match", ctypes.c_int, [
	("regex",		ctypes.POINTER(_GRegex)),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("match_options",		ctypes.c_int),
	("match_info",		ctypes.POINTER(ctypes.POINTER(_GMatchInfo))),] )

g_regex_match_full = _rpythonic_function_(		"g_regex_match_full", ctypes.c_int, [
	("regex",		ctypes.POINTER(_GRegex)),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("string_len",		ctypes.c_long),
	("start_position",		ctypes.c_int),
	("match_options",		ctypes.c_int),
	("match_info",		ctypes.POINTER(ctypes.POINTER(_GMatchInfo))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_regex_match_all = _rpythonic_function_(		"g_regex_match_all", ctypes.c_int, [
	("regex",		ctypes.POINTER(_GRegex)),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("match_options",		ctypes.c_int),
	("match_info",		ctypes.POINTER(ctypes.POINTER(_GMatchInfo))),] )

g_regex_match_all_full = _rpythonic_function_(		"g_regex_match_all_full", ctypes.c_int, [
	("regex",		ctypes.POINTER(_GRegex)),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("string_len",		ctypes.c_long),
	("start_position",		ctypes.c_int),
	("match_options",		ctypes.c_int),
	("match_info",		ctypes.POINTER(ctypes.POINTER(_GMatchInfo))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_regex_split_simple = _rpythonic_function_(		"g_regex_split_simple", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("pattern",		ctypes.POINTER(ctypes.c_char)),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("compile_options",		ctypes.c_int),
	("match_options",		ctypes.c_int),] )

g_regex_split = _rpythonic_function_(		"g_regex_split", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("regex",		ctypes.POINTER(_GRegex)),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("match_options",		ctypes.c_int),] )

g_regex_split_full = _rpythonic_function_(		"g_regex_split_full", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("regex",		ctypes.POINTER(_GRegex)),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("string_len",		ctypes.c_long),
	("start_position",		ctypes.c_int),
	("match_options",		ctypes.c_int),
	("max_tokens",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_regex_replace = _rpythonic_function_(		"g_regex_replace", ctypes.POINTER(ctypes.c_char), [
	("regex",		ctypes.POINTER(_GRegex)),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("string_len",		ctypes.c_long),
	("start_position",		ctypes.c_int),
	("replacement",		ctypes.POINTER(ctypes.c_char)),
	("match_options",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_regex_replace_literal = _rpythonic_function_(		"g_regex_replace_literal", ctypes.POINTER(ctypes.c_char), [
	("regex",		ctypes.POINTER(_GRegex)),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("string_len",		ctypes.c_long),
	("start_position",		ctypes.c_int),
	("replacement",		ctypes.POINTER(ctypes.c_char)),
	("match_options",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_regex_replace_eval = _rpythonic_function_(		"g_regex_replace_eval", ctypes.POINTER(ctypes.c_char), [
	("regex",		ctypes.POINTER(_GRegex)),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("string_len",		ctypes.c_long),
	("start_position",		ctypes.c_int),
	("match_options",		ctypes.c_int),
	("C_eval",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GMatchInfo),ctypes.POINTER(_GString),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_regex_check_replacement = _rpythonic_function_(		"g_regex_check_replacement", ctypes.c_int, [
	("replacement",		ctypes.POINTER(ctypes.c_char)),
	("has_references",		ctypes.POINTER(ctypes.c_int)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_match_info_get_regex = _rpythonic_function_(		"g_match_info_get_regex", ctypes.POINTER(_GRegex), [
	("match_info",		ctypes.POINTER(_GMatchInfo)),] )

g_match_info_get_string = _rpythonic_function_(		"g_match_info_get_string", ctypes.POINTER(ctypes.c_char), [
	("match_info",		ctypes.POINTER(_GMatchInfo)),] )

g_match_info_ref = _rpythonic_function_(		"g_match_info_ref", ctypes.POINTER(_GMatchInfo), [
	("match_info",		ctypes.POINTER(_GMatchInfo)),] )

g_match_info_unref = _rpythonic_function_(		"g_match_info_unref", ctypes.c_void_p, [
	("match_info",		ctypes.POINTER(_GMatchInfo)),] )

g_match_info_free = _rpythonic_function_(		"g_match_info_free", ctypes.c_void_p, [
	("match_info",		ctypes.POINTER(_GMatchInfo)),] )

g_match_info_next = _rpythonic_function_(		"g_match_info_next", ctypes.c_int, [
	("match_info",		ctypes.POINTER(_GMatchInfo)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_match_info_matches = _rpythonic_function_(		"g_match_info_matches", ctypes.c_int, [
	("match_info",		ctypes.POINTER(_GMatchInfo)),] )

g_match_info_get_match_count = _rpythonic_function_(		"g_match_info_get_match_count", ctypes.c_int, [
	("match_info",		ctypes.POINTER(_GMatchInfo)),] )

g_match_info_is_partial_match = _rpythonic_function_(		"g_match_info_is_partial_match", ctypes.c_int, [
	("match_info",		ctypes.POINTER(_GMatchInfo)),] )

g_match_info_expand_references = _rpythonic_function_(		"g_match_info_expand_references", ctypes.POINTER(ctypes.c_char), [
	("match_info",		ctypes.POINTER(_GMatchInfo)),
	("string_to_expand",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_match_info_fetch = _rpythonic_function_(		"g_match_info_fetch", ctypes.POINTER(ctypes.c_char), [
	("match_info",		ctypes.POINTER(_GMatchInfo)),
	("match_num",		ctypes.c_int),] )

g_match_info_fetch_pos = _rpythonic_function_(		"g_match_info_fetch_pos", ctypes.c_int, [
	("match_info",		ctypes.POINTER(_GMatchInfo)),
	("match_num",		ctypes.c_int),
	("start_pos",		ctypes.POINTER(ctypes.c_int)),
	("end_pos",		ctypes.POINTER(ctypes.c_int)),] )

g_match_info_fetch_named = _rpythonic_function_(		"g_match_info_fetch_named", ctypes.POINTER(ctypes.c_char), [
	("match_info",		ctypes.POINTER(_GMatchInfo)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_match_info_fetch_named_pos = _rpythonic_function_(		"g_match_info_fetch_named_pos", ctypes.c_int, [
	("match_info",		ctypes.POINTER(_GMatchInfo)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("start_pos",		ctypes.POINTER(ctypes.c_int)),
	("end_pos",		ctypes.POINTER(ctypes.c_int)),] )

g_match_info_fetch_all = _rpythonic_function_(		"g_match_info_fetch_all", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("match_info",		ctypes.POINTER(_GMatchInfo)),] )

GScannerMsgFunc = _rpythonic_function_(		"GScannerMsgFunc", ctypes.c_void_p, [
	("scanner",		ctypes.POINTER(_GScanner)),
	("message",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.c_int),] )

g_scanner_new = _rpythonic_function_(		"g_scanner_new", ctypes.POINTER(_GScanner), [
	("config_templ",		ctypes.POINTER(_GScannerConfig)),] )

g_scanner_destroy = _rpythonic_function_(		"g_scanner_destroy", ctypes.c_void_p, [
	("scanner",		ctypes.POINTER(_GScanner)),] )

g_scanner_input_file = _rpythonic_function_(		"g_scanner_input_file", ctypes.c_void_p, [
	("scanner",		ctypes.POINTER(_GScanner)),
	("input_fd",		ctypes.c_int),] )

g_scanner_sync_file_offset = _rpythonic_function_(		"g_scanner_sync_file_offset", ctypes.c_void_p, [
	("scanner",		ctypes.POINTER(_GScanner)),] )

g_scanner_input_text = _rpythonic_function_(		"g_scanner_input_text", ctypes.c_void_p, [
	("scanner",		ctypes.POINTER(_GScanner)),
	("text",		ctypes.POINTER(ctypes.c_char)),
	("text_len",		ctypes.c_uint),] )

g_scanner_get_next_token = _rpythonic_function_(		"g_scanner_get_next_token", ctypes.c_int, [
	("scanner",		ctypes.POINTER(_GScanner)),] )

g_scanner_peek_next_token = _rpythonic_function_(		"g_scanner_peek_next_token", ctypes.c_int, [
	("scanner",		ctypes.POINTER(_GScanner)),] )

g_scanner_cur_token = _rpythonic_function_(		"g_scanner_cur_token", ctypes.c_int, [
	("scanner",		ctypes.POINTER(_GScanner)),] )

g_scanner_cur_value = _rpythonic_function_(		"g_scanner_cur_value", _GTokenValue, [
	("scanner",		ctypes.POINTER(_GScanner)),] )

g_scanner_cur_line = _rpythonic_function_(		"g_scanner_cur_line", ctypes.c_uint, [
	("scanner",		ctypes.POINTER(_GScanner)),] )

g_scanner_cur_position = _rpythonic_function_(		"g_scanner_cur_position", ctypes.c_uint, [
	("scanner",		ctypes.POINTER(_GScanner)),] )

g_scanner_eof = _rpythonic_function_(		"g_scanner_eof", ctypes.c_int, [
	("scanner",		ctypes.POINTER(_GScanner)),] )

g_scanner_set_scope = _rpythonic_function_(		"g_scanner_set_scope", ctypes.c_uint, [
	("scanner",		ctypes.POINTER(_GScanner)),
	("scope_id",		ctypes.c_uint),] )

g_scanner_scope_add_symbol = _rpythonic_function_(		"g_scanner_scope_add_symbol", ctypes.c_void_p, [
	("scanner",		ctypes.POINTER(_GScanner)),
	("scope_id",		ctypes.c_uint),
	("symbol",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_void_p)),] )

g_scanner_scope_remove_symbol = _rpythonic_function_(		"g_scanner_scope_remove_symbol", ctypes.c_void_p, [
	("scanner",		ctypes.POINTER(_GScanner)),
	("scope_id",		ctypes.c_uint),
	("symbol",		ctypes.POINTER(ctypes.c_char)),] )

g_scanner_scope_lookup_symbol = _rpythonic_function_(		"g_scanner_scope_lookup_symbol", ctypes.POINTER(ctypes.c_void_p), [
	("scanner",		ctypes.POINTER(_GScanner)),
	("scope_id",		ctypes.c_uint),
	("symbol",		ctypes.POINTER(ctypes.c_char)),] )

g_scanner_scope_foreach_symbol = _rpythonic_function_(		"g_scanner_scope_foreach_symbol", ctypes.c_void_p, [
	("scanner",		ctypes.POINTER(_GScanner)),
	("scope_id",		ctypes.c_uint),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_scanner_lookup_symbol = _rpythonic_function_(		"g_scanner_lookup_symbol", ctypes.POINTER(ctypes.c_void_p), [
	("scanner",		ctypes.POINTER(_GScanner)),
	("symbol",		ctypes.POINTER(ctypes.c_char)),] )

g_scanner_unexp_token = _rpythonic_function_(		"g_scanner_unexp_token", ctypes.c_void_p, [
	("scanner",		ctypes.POINTER(_GScanner)),
	("expected_token",		ctypes.c_int),
	("identifier_spec",		ctypes.POINTER(ctypes.c_char)),
	("symbol_spec",		ctypes.POINTER(ctypes.c_char)),
	("symbol_name",		ctypes.POINTER(ctypes.c_char)),
	("message",		ctypes.POINTER(ctypes.c_char)),
	("is_error",		ctypes.c_int),] )

g_scanner_error = _rpythonic_function_(		"g_scanner_error", ctypes.c_void_p, [
	("scanner",		ctypes.POINTER(_GScanner)),
	("format",		ctypes.POINTER(ctypes.c_char)),] )

g_scanner_warn = _rpythonic_function_(		"g_scanner_warn", ctypes.c_void_p, [
	("scanner",		ctypes.POINTER(_GScanner)),
	("format",		ctypes.POINTER(ctypes.c_char)),] )

GSequenceIterCompareFunc = _rpythonic_function_(		"GSequenceIterCompareFunc", ctypes.c_int, [
	("a",		ctypes.POINTER(_GSequenceNode)),
	("b",		ctypes.POINTER(_GSequenceNode)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_new = _rpythonic_function_(		"g_sequence_new", ctypes.POINTER(_GSequence), [
	("data_destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_sequence_free = _rpythonic_function_(		"g_sequence_free", ctypes.c_void_p, [
	("seq",		ctypes.POINTER(_GSequence)),] )

g_sequence_get_length = _rpythonic_function_(		"g_sequence_get_length", ctypes.c_int, [
	("seq",		ctypes.POINTER(_GSequence)),] )

g_sequence_foreach = _rpythonic_function_(		"g_sequence_foreach", ctypes.c_void_p, [
	("seq",		ctypes.POINTER(_GSequence)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_foreach_range = _rpythonic_function_(		"g_sequence_foreach_range", ctypes.c_void_p, [
	("begin",		ctypes.POINTER(_GSequenceNode)),
	("end",		ctypes.POINTER(_GSequenceNode)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_sort = _rpythonic_function_(		"g_sequence_sort", ctypes.c_void_p, [
	("seq",		ctypes.POINTER(_GSequence)),
	("cmp_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("cmp_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_sort_iter = _rpythonic_function_(		"g_sequence_sort_iter", ctypes.c_void_p, [
	("seq",		ctypes.POINTER(_GSequence)),
	("cmp_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GSequenceNode),ctypes.POINTER(_GSequenceNode),ctypes.POINTER(ctypes.c_void_p),)),
	("cmp_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_get_begin_iter = _rpythonic_function_(		"g_sequence_get_begin_iter", ctypes.POINTER(_GSequenceNode), [
	("seq",		ctypes.POINTER(_GSequence)),] )

g_sequence_get_end_iter = _rpythonic_function_(		"g_sequence_get_end_iter", ctypes.POINTER(_GSequenceNode), [
	("seq",		ctypes.POINTER(_GSequence)),] )

g_sequence_get_iter_at_pos = _rpythonic_function_(		"g_sequence_get_iter_at_pos", ctypes.POINTER(_GSequenceNode), [
	("seq",		ctypes.POINTER(_GSequence)),
	("pos",		ctypes.c_int),] )

g_sequence_append = _rpythonic_function_(		"g_sequence_append", ctypes.POINTER(_GSequenceNode), [
	("seq",		ctypes.POINTER(_GSequence)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_prepend = _rpythonic_function_(		"g_sequence_prepend", ctypes.POINTER(_GSequenceNode), [
	("seq",		ctypes.POINTER(_GSequence)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_insert_before = _rpythonic_function_(		"g_sequence_insert_before", ctypes.POINTER(_GSequenceNode), [
	("iter",		ctypes.POINTER(_GSequenceNode)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_move = _rpythonic_function_(		"g_sequence_move", ctypes.c_void_p, [
	("src",		ctypes.POINTER(_GSequenceNode)),
	("dest",		ctypes.POINTER(_GSequenceNode)),] )

g_sequence_swap = _rpythonic_function_(		"g_sequence_swap", ctypes.c_void_p, [
	("a",		ctypes.POINTER(_GSequenceNode)),
	("b",		ctypes.POINTER(_GSequenceNode)),] )

g_sequence_insert_sorted = _rpythonic_function_(		"g_sequence_insert_sorted", ctypes.POINTER(_GSequenceNode), [
	("seq",		ctypes.POINTER(_GSequence)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("cmp_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("cmp_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_insert_sorted_iter = _rpythonic_function_(		"g_sequence_insert_sorted_iter", ctypes.POINTER(_GSequenceNode), [
	("seq",		ctypes.POINTER(_GSequence)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("iter_cmp",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GSequenceNode),ctypes.POINTER(_GSequenceNode),ctypes.POINTER(ctypes.c_void_p),)),
	("cmp_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_sort_changed = _rpythonic_function_(		"g_sequence_sort_changed", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(_GSequenceNode)),
	("cmp_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("cmp_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_sort_changed_iter = _rpythonic_function_(		"g_sequence_sort_changed_iter", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(_GSequenceNode)),
	("iter_cmp",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GSequenceNode),ctypes.POINTER(_GSequenceNode),ctypes.POINTER(ctypes.c_void_p),)),
	("cmp_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_remove = _rpythonic_function_(		"g_sequence_remove", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(_GSequenceNode)),] )

g_sequence_remove_range = _rpythonic_function_(		"g_sequence_remove_range", ctypes.c_void_p, [
	("begin",		ctypes.POINTER(_GSequenceNode)),
	("end",		ctypes.POINTER(_GSequenceNode)),] )

g_sequence_move_range = _rpythonic_function_(		"g_sequence_move_range", ctypes.c_void_p, [
	("dest",		ctypes.POINTER(_GSequenceNode)),
	("begin",		ctypes.POINTER(_GSequenceNode)),
	("end",		ctypes.POINTER(_GSequenceNode)),] )

g_sequence_search = _rpythonic_function_(		"g_sequence_search", ctypes.POINTER(_GSequenceNode), [
	("seq",		ctypes.POINTER(_GSequence)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("cmp_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("cmp_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_search_iter = _rpythonic_function_(		"g_sequence_search_iter", ctypes.POINTER(_GSequenceNode), [
	("seq",		ctypes.POINTER(_GSequence)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("iter_cmp",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GSequenceNode),ctypes.POINTER(_GSequenceNode),ctypes.POINTER(ctypes.c_void_p),)),
	("cmp_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_lookup = _rpythonic_function_(		"g_sequence_lookup", ctypes.POINTER(_GSequenceNode), [
	("seq",		ctypes.POINTER(_GSequence)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("cmp_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("cmp_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_lookup_iter = _rpythonic_function_(		"g_sequence_lookup_iter", ctypes.POINTER(_GSequenceNode), [
	("seq",		ctypes.POINTER(_GSequence)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("iter_cmp",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GSequenceNode),ctypes.POINTER(_GSequenceNode),ctypes.POINTER(ctypes.c_void_p),)),
	("cmp_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_get = _rpythonic_function_(		"g_sequence_get", ctypes.POINTER(ctypes.c_void_p), [
	("iter",		ctypes.POINTER(_GSequenceNode)),] )

g_sequence_set = _rpythonic_function_(		"g_sequence_set", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(_GSequenceNode)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_iter_is_begin = _rpythonic_function_(		"g_sequence_iter_is_begin", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GSequenceNode)),] )

g_sequence_iter_is_end = _rpythonic_function_(		"g_sequence_iter_is_end", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GSequenceNode)),] )

g_sequence_iter_next = _rpythonic_function_(		"g_sequence_iter_next", ctypes.POINTER(_GSequenceNode), [
	("iter",		ctypes.POINTER(_GSequenceNode)),] )

g_sequence_iter_prev = _rpythonic_function_(		"g_sequence_iter_prev", ctypes.POINTER(_GSequenceNode), [
	("iter",		ctypes.POINTER(_GSequenceNode)),] )

g_sequence_iter_get_position = _rpythonic_function_(		"g_sequence_iter_get_position", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GSequenceNode)),] )

g_sequence_iter_move = _rpythonic_function_(		"g_sequence_iter_move", ctypes.POINTER(_GSequenceNode), [
	("iter",		ctypes.POINTER(_GSequenceNode)),
	("delta",		ctypes.c_int),] )

g_sequence_iter_get_sequence = _rpythonic_function_(		"g_sequence_iter_get_sequence", ctypes.POINTER(_GSequence), [
	("iter",		ctypes.POINTER(_GSequenceNode)),] )

g_sequence_iter_compare = _rpythonic_function_(		"g_sequence_iter_compare", ctypes.c_int, [
	("a",		ctypes.POINTER(_GSequenceNode)),
	("b",		ctypes.POINTER(_GSequenceNode)),] )

g_sequence_range_get_midpoint = _rpythonic_function_(		"g_sequence_range_get_midpoint", ctypes.POINTER(_GSequenceNode), [
	("begin",		ctypes.POINTER(_GSequenceNode)),
	("end",		ctypes.POINTER(_GSequenceNode)),] )

g_shell_error_quark = _rpythonic_function_(		"g_shell_error_quark", ctypes.c_uint, [] )

g_shell_quote = _rpythonic_function_(		"g_shell_quote", ctypes.POINTER(ctypes.c_char), [
	("unquoted_string",		ctypes.POINTER(ctypes.c_char)),] )

g_shell_unquote = _rpythonic_function_(		"g_shell_unquote", ctypes.POINTER(ctypes.c_char), [
	("quoted_string",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_shell_parse_argv = _rpythonic_function_(		"g_shell_parse_argv", ctypes.c_int, [
	("command_line",		ctypes.POINTER(ctypes.c_char)),
	("argcp",		ctypes.POINTER(ctypes.c_int)),
	("argvp",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(ctypes.c_char)))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

GSpawnChildSetupFunc = _rpythonic_function_(		"GSpawnChildSetupFunc", ctypes.c_void_p, [("user_data",		ctypes.c_void_p)] )

g_spawn_error_quark = _rpythonic_function_(		"g_spawn_error_quark", ctypes.c_uint, [] )

g_spawn_async = _rpythonic_function_(		"g_spawn_async", ctypes.c_int, [
	("working_directory",		ctypes.POINTER(ctypes.c_char)),
	("argv",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("envp",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("flags",		ctypes.c_int),
	("child_setup",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("child_pid",		ctypes.POINTER(ctypes.c_int)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_spawn_async_with_pipes = _rpythonic_function_(		"g_spawn_async_with_pipes", ctypes.c_int, [
	("working_directory",		ctypes.POINTER(ctypes.c_char)),
	("argv",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("envp",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("flags",		ctypes.c_int),
	("child_setup",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("child_pid",		ctypes.POINTER(ctypes.c_int)),
	("standard_input",		ctypes.POINTER(ctypes.c_int)),
	("standard_output",		ctypes.POINTER(ctypes.c_int)),
	("standard_error",		ctypes.POINTER(ctypes.c_int)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_spawn_sync = _rpythonic_function_(		"g_spawn_sync", ctypes.c_int, [
	("working_directory",		ctypes.POINTER(ctypes.c_char)),
	("argv",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("envp",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("flags",		ctypes.c_int),
	("child_setup",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("standard_output",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("standard_error",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("exit_status",		ctypes.POINTER(ctypes.c_int)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_spawn_command_line_sync = _rpythonic_function_(		"g_spawn_command_line_sync", ctypes.c_int, [
	("command_line",		ctypes.POINTER(ctypes.c_char)),
	("standard_output",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("standard_error",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("exit_status",		ctypes.POINTER(ctypes.c_int)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_spawn_command_line_async = _rpythonic_function_(		"g_spawn_command_line_async", ctypes.c_int, [
	("command_line",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_spawn_close_pid = _rpythonic_function_(		"g_spawn_close_pid", ctypes.c_void_p, [
	("pid",		ctypes.c_int),] )

g_ascii_tolower = _rpythonic_function_(		"g_ascii_tolower", ctypes.c_char, [
	("c",		ctypes.c_char),] )

g_ascii_toupper = _rpythonic_function_(		"g_ascii_toupper", ctypes.c_char, [
	("c",		ctypes.c_char),] )

g_ascii_digit_value = _rpythonic_function_(		"g_ascii_digit_value", ctypes.c_int, [
	("c",		ctypes.c_char),] )

g_ascii_xdigit_value = _rpythonic_function_(		"g_ascii_xdigit_value", ctypes.c_int, [
	("c",		ctypes.c_char),] )

g_strdelimit = _rpythonic_function_(		"g_strdelimit", ctypes.POINTER(ctypes.c_char), [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("delimiters",		ctypes.POINTER(ctypes.c_char)),
	("new_delimiter",		ctypes.c_char),] )

g_strcanon = _rpythonic_function_(		"g_strcanon", ctypes.POINTER(ctypes.c_char), [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("valid_chars",		ctypes.POINTER(ctypes.c_char)),
	("substitutor",		ctypes.c_char),] )

g_strerror = _rpythonic_function_(		"g_strerror", ctypes.POINTER(ctypes.c_char), [
	("errnum",		ctypes.c_int),] )

g_strsignal = _rpythonic_function_(		"g_strsignal", ctypes.POINTER(ctypes.c_char), [
	("signum",		ctypes.c_int),] )

g_strreverse = _rpythonic_function_(		"g_strreverse", ctypes.POINTER(ctypes.c_char), [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_strlcpy = _rpythonic_function_(		"g_strlcpy", ctypes.c_ulong, [
	("dest",		ctypes.POINTER(ctypes.c_char)),
	("src",		ctypes.POINTER(ctypes.c_char)),
	("dest_size",		ctypes.c_ulong),] )

g_strlcat = _rpythonic_function_(		"g_strlcat", ctypes.c_ulong, [
	("dest",		ctypes.POINTER(ctypes.c_char)),
	("src",		ctypes.POINTER(ctypes.c_char)),
	("dest_size",		ctypes.c_ulong),] )

g_strstr_len = _rpythonic_function_(		"g_strstr_len", ctypes.POINTER(ctypes.c_char), [
	("haystack",		ctypes.POINTER(ctypes.c_char)),
	("haystack_len",		ctypes.c_long),
	("needle",		ctypes.POINTER(ctypes.c_char)),] )

g_strrstr = _rpythonic_function_(		"g_strrstr", ctypes.POINTER(ctypes.c_char), [
	("haystack",		ctypes.POINTER(ctypes.c_char)),
	("needle",		ctypes.POINTER(ctypes.c_char)),] )

g_strrstr_len = _rpythonic_function_(		"g_strrstr_len", ctypes.POINTER(ctypes.c_char), [
	("haystack",		ctypes.POINTER(ctypes.c_char)),
	("haystack_len",		ctypes.c_long),
	("needle",		ctypes.POINTER(ctypes.c_char)),] )

g_str_has_suffix = _rpythonic_function_(		"g_str_has_suffix", ctypes.c_int, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("suffix",		ctypes.POINTER(ctypes.c_char)),] )

g_str_has_prefix = _rpythonic_function_(		"g_str_has_prefix", ctypes.c_int, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("prefix",		ctypes.POINTER(ctypes.c_char)),] )

g_strtod = _rpythonic_function_(		"g_strtod", ctypes.c_double, [
	("nptr",		ctypes.POINTER(ctypes.c_char)),
	("endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_ascii_strtod = _rpythonic_function_(		"g_ascii_strtod", ctypes.c_double, [
	("nptr",		ctypes.POINTER(ctypes.c_char)),
	("endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_ascii_strtoull = _rpythonic_function_(		"g_ascii_strtoull", ctypes.c_ulong, [
	("nptr",		ctypes.POINTER(ctypes.c_char)),
	("endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("base",		ctypes.c_uint),] )

g_ascii_strtoll = _rpythonic_function_(		"g_ascii_strtoll", ctypes.c_long, [
	("nptr",		ctypes.POINTER(ctypes.c_char)),
	("endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("base",		ctypes.c_uint),] )

g_ascii_dtostr = _rpythonic_function_(		"g_ascii_dtostr", ctypes.POINTER(ctypes.c_char), [
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("buf_len",		ctypes.c_int),
	("d",		ctypes.c_double),] )

g_ascii_formatd = _rpythonic_function_(		"g_ascii_formatd", ctypes.POINTER(ctypes.c_char), [
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("buf_len",		ctypes.c_int),
	("format",		ctypes.POINTER(ctypes.c_char)),
	("d",		ctypes.c_double),] )

g_strchug = _rpythonic_function_(		"g_strchug", ctypes.POINTER(ctypes.c_char), [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_strchomp = _rpythonic_function_(		"g_strchomp", ctypes.POINTER(ctypes.c_char), [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_ascii_strcasecmp = _rpythonic_function_(		"g_ascii_strcasecmp", ctypes.c_int, [
	("s1",		ctypes.POINTER(ctypes.c_char)),
	("s2",		ctypes.POINTER(ctypes.c_char)),] )

g_ascii_strncasecmp = _rpythonic_function_(		"g_ascii_strncasecmp", ctypes.c_int, [
	("s1",		ctypes.POINTER(ctypes.c_char)),
	("s2",		ctypes.POINTER(ctypes.c_char)),
	("n",		ctypes.c_ulong),] )

g_ascii_strdown = _rpythonic_function_(		"g_ascii_strdown", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),] )

g_ascii_strup = _rpythonic_function_(		"g_ascii_strup", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),] )

g_strcasecmp = _rpythonic_function_(		"g_strcasecmp", ctypes.c_int, [
	("s1",		ctypes.POINTER(ctypes.c_char)),
	("s2",		ctypes.POINTER(ctypes.c_char)),] )

g_strncasecmp = _rpythonic_function_(		"g_strncasecmp", ctypes.c_int, [
	("s1",		ctypes.POINTER(ctypes.c_char)),
	("s2",		ctypes.POINTER(ctypes.c_char)),
	("n",		ctypes.c_uint),] )

g_strdown = _rpythonic_function_(		"g_strdown", ctypes.POINTER(ctypes.c_char), [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_strup = _rpythonic_function_(		"g_strup", ctypes.POINTER(ctypes.c_char), [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_strdup = _rpythonic_function_(		"g_strdup", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

g_strdup_printf = _rpythonic_function_(		"g_strdup_printf", ctypes.POINTER(ctypes.c_char), [
	("format",		ctypes.POINTER(ctypes.c_char)),] )

g_strdup_vprintf = _rpythonic_function_(		"g_strdup_vprintf", ctypes.POINTER(ctypes.c_char), [
	("format",		ctypes.POINTER(ctypes.c_char)),
	("args",		ctypes.c_char),] )

g_strndup = _rpythonic_function_(		"g_strndup", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("n",		ctypes.c_ulong),] )

g_strnfill = _rpythonic_function_(		"g_strnfill", ctypes.POINTER(ctypes.c_char), [
	("length",		ctypes.c_ulong),
	("fill_char",		ctypes.c_char),] )

g_strconcat = _rpythonic_function_(		"g_strconcat", ctypes.POINTER(ctypes.c_char), [
	("string1",		ctypes.POINTER(ctypes.c_char)),] )

g_strjoin = _rpythonic_function_(		"g_strjoin", ctypes.POINTER(ctypes.c_char), [
	("separator",		ctypes.POINTER(ctypes.c_char)),] )

g_strcompress = _rpythonic_function_(		"g_strcompress", ctypes.POINTER(ctypes.c_char), [
	("source",		ctypes.POINTER(ctypes.c_char)),] )

g_strescape = _rpythonic_function_(		"g_strescape", ctypes.POINTER(ctypes.c_char), [
	("source",		ctypes.POINTER(ctypes.c_char)),
	("exceptions",		ctypes.POINTER(ctypes.c_char)),] )

g_memdup = _rpythonic_function_(		"g_memdup", ctypes.POINTER(ctypes.c_void_p), [
	("mem",		ctypes.POINTER(ctypes.c_void_p)),
	("byte_size",		ctypes.c_uint),] )

g_strsplit = _rpythonic_function_(		"g_strsplit", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("delimiter",		ctypes.POINTER(ctypes.c_char)),
	("max_tokens",		ctypes.c_int),] )

g_strsplit_set = _rpythonic_function_(		"g_strsplit_set", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("delimiters",		ctypes.POINTER(ctypes.c_char)),
	("max_tokens",		ctypes.c_int),] )

g_strjoinv = _rpythonic_function_(		"g_strjoinv", ctypes.POINTER(ctypes.c_char), [
	("separator",		ctypes.POINTER(ctypes.c_char)),
	("str_array",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_strfreev = _rpythonic_function_(		"g_strfreev", ctypes.c_void_p, [
	("str_array",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_strdupv = _rpythonic_function_(		"g_strdupv", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("str_array",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_strv_length = _rpythonic_function_(		"g_strv_length", ctypes.c_uint, [
	("str_array",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_stpcpy = _rpythonic_function_(		"g_stpcpy", ctypes.POINTER(ctypes.c_char), [
	("dest",		ctypes.POINTER(ctypes.c_char)),
	("src",		ctypes.POINTER(ctypes.c_char)),] )

g_strip_context = _rpythonic_function_(		"g_strip_context", ctypes.POINTER(ctypes.c_char), [
	("msgid",		ctypes.POINTER(ctypes.c_char)),
	("msgval",		ctypes.POINTER(ctypes.c_char)),] )

g_dgettext = _rpythonic_function_(		"g_dgettext", ctypes.POINTER(ctypes.c_char), [
	("domain",		ctypes.POINTER(ctypes.c_char)),
	("msgid",		ctypes.POINTER(ctypes.c_char)),] )

g_dcgettext = _rpythonic_function_(		"g_dcgettext", ctypes.POINTER(ctypes.c_char), [
	("domain",		ctypes.POINTER(ctypes.c_char)),
	("msgid",		ctypes.POINTER(ctypes.c_char)),
	("category",		ctypes.c_int),] )

g_dngettext = _rpythonic_function_(		"g_dngettext", ctypes.POINTER(ctypes.c_char), [
	("domain",		ctypes.POINTER(ctypes.c_char)),
	("msgid",		ctypes.POINTER(ctypes.c_char)),
	("msgid_plural",		ctypes.POINTER(ctypes.c_char)),
	("n",		ctypes.c_ulong),] )

g_dpgettext = _rpythonic_function_(		"g_dpgettext", ctypes.POINTER(ctypes.c_char), [
	("domain",		ctypes.POINTER(ctypes.c_char)),
	("msgctxtid",		ctypes.POINTER(ctypes.c_char)),
	("msgidoffset",		ctypes.c_ulong),] )

g_dpgettext2 = _rpythonic_function_(		"g_dpgettext2", ctypes.POINTER(ctypes.c_char), [
	("domain",		ctypes.POINTER(ctypes.c_char)),
	("context",		ctypes.POINTER(ctypes.c_char)),
	("msgid",		ctypes.POINTER(ctypes.c_char)),] )

GTestFunc = _rpythonic_function_(		"GTestFunc", ctypes.c_void_p, [] )

GTestDataFunc = _rpythonic_function_(		"GTestDataFunc", ctypes.c_void_p, [("user_data",		ctypes.c_void_p)] )

GTestFixtureFunc = _rpythonic_function_(		"GTestFixtureFunc", ctypes.c_void_p, [
	("fixture",		ctypes.POINTER(ctypes.c_void_p)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_strcmp0 = _rpythonic_function_(		"g_strcmp0", ctypes.c_int, [
	("str1",		ctypes.POINTER(ctypes.c_char)),
	("str2",		ctypes.POINTER(ctypes.c_char)),] )

g_test_minimized_result = _rpythonic_function_(		"g_test_minimized_result", ctypes.c_void_p, [
	("minimized_quantity",		ctypes.c_double),
	("format",		ctypes.POINTER(ctypes.c_char)),] )

g_test_maximized_result = _rpythonic_function_(		"g_test_maximized_result", ctypes.c_void_p, [
	("maximized_quantity",		ctypes.c_double),
	("format",		ctypes.POINTER(ctypes.c_char)),] )

g_test_init = _rpythonic_function_(		"g_test_init", ctypes.c_void_p, [
	("argc",		ctypes.POINTER(ctypes.c_int)),
	("argv",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(ctypes.c_char)))),] )

g_test_run = _rpythonic_function_(		"g_test_run", ctypes.c_int, [] )

g_test_add_func = _rpythonic_function_(		"g_test_add_func", ctypes.c_void_p, [
	("testpath",		ctypes.POINTER(ctypes.c_char)),
	("test_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_test_add_data_func = _rpythonic_function_(		"g_test_add_data_func", ctypes.c_void_p, [
	("testpath",		ctypes.POINTER(ctypes.c_char)),
	("test_data",		ctypes.POINTER(ctypes.c_void_p)),
	("test_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_test_fail = _rpythonic_function_(		"g_test_fail", ctypes.c_void_p, [] )

g_test_message = _rpythonic_function_(		"g_test_message", ctypes.c_void_p, [
	("format",		ctypes.POINTER(ctypes.c_char)),] )

g_test_bug_base = _rpythonic_function_(		"g_test_bug_base", ctypes.c_void_p, [
	("uri_pattern",		ctypes.POINTER(ctypes.c_char)),] )

g_test_bug = _rpythonic_function_(		"g_test_bug", ctypes.c_void_p, [
	("bug_uri_snippet",		ctypes.POINTER(ctypes.c_char)),] )

g_test_timer_start = _rpythonic_function_(		"g_test_timer_start", ctypes.c_void_p, [] )

g_test_timer_elapsed = _rpythonic_function_(		"g_test_timer_elapsed", ctypes.c_double, [] )

g_test_timer_last = _rpythonic_function_(		"g_test_timer_last", ctypes.c_double, [] )

g_test_queue_free = _rpythonic_function_(		"g_test_queue_free", ctypes.c_void_p, [("gfree_pointer",		ctypes.c_void_p)] )

g_test_queue_destroy = _rpythonic_function_(		"g_test_queue_destroy", ctypes.c_void_p, [
	("destroy_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("destroy_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_test_trap_fork = _rpythonic_function_(		"g_test_trap_fork", ctypes.c_int, [
	("usec_timeout",		ctypes.c_ulong),
	("test_trap_flags",		ctypes.c_int),] )

g_test_trap_has_passed = _rpythonic_function_(		"g_test_trap_has_passed", ctypes.c_int, [] )

g_test_trap_reached_timeout = _rpythonic_function_(		"g_test_trap_reached_timeout", ctypes.c_int, [] )

g_test_rand_int = _rpythonic_function_(		"g_test_rand_int", ctypes.c_int, [] )

g_test_rand_int_range = _rpythonic_function_(		"g_test_rand_int_range", ctypes.c_int, [
	("begin",		ctypes.c_int),
	("end",		ctypes.c_int),] )

g_test_rand_double = _rpythonic_function_(		"g_test_rand_double", ctypes.c_double, [] )

g_test_rand_double_range = _rpythonic_function_(		"g_test_rand_double_range", ctypes.c_double, [
	("range_start",		ctypes.c_double),
	("range_end",		ctypes.c_double),] )

g_test_create_case = _rpythonic_function_(		"g_test_create_case", ctypes.POINTER(GTestCase), [
	("test_name",		ctypes.POINTER(ctypes.c_char)),
	("data_size",		ctypes.c_ulong),
	("test_data",		ctypes.POINTER(ctypes.c_void_p)),
	("data_setup",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("data_test",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("data_teardown",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_test_create_suite = _rpythonic_function_(		"g_test_create_suite", ctypes.POINTER(GTestSuite), [
	("suite_name",		ctypes.POINTER(ctypes.c_char)),] )

g_test_get_root = _rpythonic_function_(		"g_test_get_root", ctypes.POINTER(GTestSuite), [] )

g_test_suite_add = _rpythonic_function_(		"g_test_suite_add", ctypes.c_void_p, [
	("suite",		ctypes.POINTER(GTestSuite)),
	("test_case",		ctypes.POINTER(GTestCase)),] )

g_test_suite_add_suite = _rpythonic_function_(		"g_test_suite_add_suite", ctypes.c_void_p, [
	("suite",		ctypes.POINTER(GTestSuite)),
	("nestedsuite",		ctypes.POINTER(GTestSuite)),] )

g_test_run_suite = _rpythonic_function_(		"g_test_run_suite", ctypes.c_int, [
	("suite",		ctypes.POINTER(GTestSuite)),] )

g_test_trap_assertions = _rpythonic_function_(		"g_test_trap_assertions", ctypes.c_void_p, [
	("domain",		ctypes.POINTER(ctypes.c_char)),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("func",		ctypes.POINTER(ctypes.c_char)),
	("assertion_flags",		ctypes.c_ulong),
	("pattern",		ctypes.POINTER(ctypes.c_char)),] )

g_assertion_message = _rpythonic_function_(		"g_assertion_message", ctypes.c_void_p, [
	("domain",		ctypes.POINTER(ctypes.c_char)),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("func",		ctypes.POINTER(ctypes.c_char)),
	("message",		ctypes.POINTER(ctypes.c_char)),] )

g_assertion_message_expr = _rpythonic_function_(		"g_assertion_message_expr", ctypes.c_void_p, [
	("domain",		ctypes.POINTER(ctypes.c_char)),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("func",		ctypes.POINTER(ctypes.c_char)),
	("expr",		ctypes.POINTER(ctypes.c_char)),] )

g_assertion_message_cmpstr = _rpythonic_function_(		"g_assertion_message_cmpstr", ctypes.c_void_p, [
	("domain",		ctypes.POINTER(ctypes.c_char)),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("func",		ctypes.POINTER(ctypes.c_char)),
	("expr",		ctypes.POINTER(ctypes.c_char)),
	("arg1",		ctypes.POINTER(ctypes.c_char)),
	("cmp",		ctypes.POINTER(ctypes.c_char)),
	("arg2",		ctypes.POINTER(ctypes.c_char)),] )

g_assertion_message_cmpnum = _rpythonic_function_(		"g_assertion_message_cmpnum", ctypes.c_void_p, [
	("domain",		ctypes.POINTER(ctypes.c_char)),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("func",		ctypes.POINTER(ctypes.c_char)),
	("expr",		ctypes.POINTER(ctypes.c_char)),
	("arg1",		ctypes.c_double),
	("cmp",		ctypes.POINTER(ctypes.c_char)),
	("arg2",		ctypes.c_double),
	("numtype",		ctypes.c_char),] )

g_assertion_message_error = _rpythonic_function_(		"g_assertion_message_error", ctypes.c_void_p, [
	("domain",		ctypes.POINTER(ctypes.c_char)),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("func",		ctypes.POINTER(ctypes.c_char)),
	("expr",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(_GError)),
	("error_domain",		ctypes.c_uint),
	("error_code",		ctypes.c_int),] )

g_test_add_vtable = _rpythonic_function_(		"g_test_add_vtable", ctypes.c_void_p, [
	("testpath",		ctypes.POINTER(ctypes.c_char)),
	("data_size",		ctypes.c_ulong),
	("test_data",		ctypes.POINTER(ctypes.c_void_p)),
	("data_setup",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("data_test",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("data_teardown",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_test_log_type_name = _rpythonic_function_(		"g_test_log_type_name", ctypes.POINTER(ctypes.c_char), [
	("log_type",		ctypes.c_int),] )

g_test_log_buffer_new = _rpythonic_function_(		"g_test_log_buffer_new", ctypes.POINTER(GTestLogBuffer), [] )

g_test_log_buffer_free = _rpythonic_function_(		"g_test_log_buffer_free", ctypes.c_void_p, [
	("tbuffer",		ctypes.POINTER(GTestLogBuffer)),] )

g_test_log_buffer_push = _rpythonic_function_(		"g_test_log_buffer_push", ctypes.c_void_p, [
	("tbuffer",		ctypes.POINTER(GTestLogBuffer)),
	("n_bytes",		ctypes.c_uint),
	("bytes",		ctypes.POINTER(ctypes.c_ubyte)),] )

g_test_log_buffer_pop = _rpythonic_function_(		"g_test_log_buffer_pop", ctypes.POINTER(GTestLogMsg), [
	("tbuffer",		ctypes.POINTER(GTestLogBuffer)),] )

g_test_log_msg_free = _rpythonic_function_(		"g_test_log_msg_free", ctypes.c_void_p, [
	("tmsg",		ctypes.POINTER(GTestLogMsg)),] )

GTestLogFatalFunc = _rpythonic_function_(		"GTestLogFatalFunc", ctypes.c_int, [
	("log_domain",		ctypes.POINTER(ctypes.c_char)),
	("log_level",		ctypes.c_int),
	("message",		ctypes.POINTER(ctypes.c_char)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_test_log_set_fatal_handler = _rpythonic_function_(		"g_test_log_set_fatal_handler", ctypes.c_void_p, [
	("log_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_char),ctypes.c_int,ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_thread_pool_new = _rpythonic_function_(		"g_thread_pool_new", ctypes.POINTER(_GThreadPool), [
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("max_threads",		ctypes.c_int),
	("exclusive",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_thread_pool_push = _rpythonic_function_(		"g_thread_pool_push", ctypes.c_void_p, [
	("pool",		ctypes.POINTER(_GThreadPool)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_thread_pool_set_max_threads = _rpythonic_function_(		"g_thread_pool_set_max_threads", ctypes.c_void_p, [
	("pool",		ctypes.POINTER(_GThreadPool)),
	("max_threads",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_thread_pool_get_max_threads = _rpythonic_function_(		"g_thread_pool_get_max_threads", ctypes.c_int, [
	("pool",		ctypes.POINTER(_GThreadPool)),] )

g_thread_pool_get_num_threads = _rpythonic_function_(		"g_thread_pool_get_num_threads", ctypes.c_uint, [
	("pool",		ctypes.POINTER(_GThreadPool)),] )

g_thread_pool_unprocessed = _rpythonic_function_(		"g_thread_pool_unprocessed", ctypes.c_uint, [
	("pool",		ctypes.POINTER(_GThreadPool)),] )

g_thread_pool_free = _rpythonic_function_(		"g_thread_pool_free", ctypes.c_void_p, [
	("pool",		ctypes.POINTER(_GThreadPool)),
	("immediate",		ctypes.c_int),
	("wait_",		ctypes.c_int),] )

g_thread_pool_set_max_unused_threads = _rpythonic_function_(		"g_thread_pool_set_max_unused_threads", ctypes.c_void_p, [
	("max_threads",		ctypes.c_int),] )

g_thread_pool_get_max_unused_threads = _rpythonic_function_(		"g_thread_pool_get_max_unused_threads", ctypes.c_int, [] )

g_thread_pool_get_num_unused_threads = _rpythonic_function_(		"g_thread_pool_get_num_unused_threads", ctypes.c_uint, [] )

g_thread_pool_stop_unused_threads = _rpythonic_function_(		"g_thread_pool_stop_unused_threads", ctypes.c_void_p, [] )

g_thread_pool_set_sort_function = _rpythonic_function_(		"g_thread_pool_set_sort_function", ctypes.c_void_p, [
	("pool",		ctypes.POINTER(_GThreadPool)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_thread_pool_set_max_idle_time = _rpythonic_function_(		"g_thread_pool_set_max_idle_time", ctypes.c_void_p, [
	("interval",		ctypes.c_uint),] )

g_thread_pool_get_max_idle_time = _rpythonic_function_(		"g_thread_pool_get_max_idle_time", ctypes.c_uint, [] )

g_timer_new = _rpythonic_function_(		"g_timer_new", ctypes.POINTER(_GTimer), [] )

g_timer_destroy = _rpythonic_function_(		"g_timer_destroy", ctypes.c_void_p, [
	("timer",		ctypes.POINTER(_GTimer)),] )

g_timer_start = _rpythonic_function_(		"g_timer_start", ctypes.c_void_p, [
	("timer",		ctypes.POINTER(_GTimer)),] )

g_timer_stop = _rpythonic_function_(		"g_timer_stop", ctypes.c_void_p, [
	("timer",		ctypes.POINTER(_GTimer)),] )

g_timer_reset = _rpythonic_function_(		"g_timer_reset", ctypes.c_void_p, [
	("timer",		ctypes.POINTER(_GTimer)),] )

g_timer_continue = _rpythonic_function_(		"g_timer_continue", ctypes.c_void_p, [
	("timer",		ctypes.POINTER(_GTimer)),] )

g_timer_elapsed = _rpythonic_function_(		"g_timer_elapsed", ctypes.c_double, [
	("timer",		ctypes.POINTER(_GTimer)),
	("microseconds",		ctypes.POINTER(ctypes.c_ulong)),] )

g_usleep = _rpythonic_function_(		"g_usleep", ctypes.c_void_p, [
	("microseconds",		ctypes.c_ulong),] )

g_time_val_add = _rpythonic_function_(		"g_time_val_add", ctypes.c_void_p, [
	("time_",		ctypes.POINTER(_GTimeVal)),
	("microseconds",		ctypes.c_long),] )

g_time_val_from_iso8601 = _rpythonic_function_(		"g_time_val_from_iso8601", ctypes.c_int, [
	("iso_date",		ctypes.POINTER(ctypes.c_char)),
	("time_",		ctypes.POINTER(_GTimeVal)),] )

g_time_val_to_iso8601 = _rpythonic_function_(		"g_time_val_to_iso8601", ctypes.POINTER(ctypes.c_char), [
	("time_",		ctypes.POINTER(_GTimeVal)),] )

GTraverseFunc = _rpythonic_function_(		"GTraverseFunc", ctypes.c_int, [
	("key",		ctypes.POINTER(ctypes.c_void_p)),
	("value",		ctypes.POINTER(ctypes.c_void_p)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_tree_new = _rpythonic_function_(		"g_tree_new", ctypes.POINTER(_GTree), [
	("key_compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_tree_new_with_data = _rpythonic_function_(		"g_tree_new_with_data", ctypes.POINTER(_GTree), [
	("key_compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("key_compare_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_tree_new_full = _rpythonic_function_(		"g_tree_new_full", ctypes.POINTER(_GTree), [
	("key_compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("key_compare_data",		ctypes.POINTER(ctypes.c_void_p)),
	("key_destroy_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("value_destroy_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_tree_ref = _rpythonic_function_(		"g_tree_ref", ctypes.POINTER(_GTree), [
	("tree",		ctypes.POINTER(_GTree)),] )

g_tree_unref = _rpythonic_function_(		"g_tree_unref", ctypes.c_void_p, [
	("tree",		ctypes.POINTER(_GTree)),] )

g_tree_destroy = _rpythonic_function_(		"g_tree_destroy", ctypes.c_void_p, [
	("tree",		ctypes.POINTER(_GTree)),] )

g_tree_insert = _rpythonic_function_(		"g_tree_insert", ctypes.c_void_p, [
	("tree",		ctypes.POINTER(_GTree)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),
	("value",		ctypes.POINTER(ctypes.c_void_p)),] )

g_tree_replace = _rpythonic_function_(		"g_tree_replace", ctypes.c_void_p, [
	("tree",		ctypes.POINTER(_GTree)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),
	("value",		ctypes.POINTER(ctypes.c_void_p)),] )

g_tree_remove = _rpythonic_function_(		"g_tree_remove", ctypes.c_int, [
	("tree",		ctypes.POINTER(_GTree)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),] )

g_tree_steal = _rpythonic_function_(		"g_tree_steal", ctypes.c_int, [
	("tree",		ctypes.POINTER(_GTree)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),] )

g_tree_lookup = _rpythonic_function_(		"g_tree_lookup", ctypes.POINTER(ctypes.c_void_p), [
	("tree",		ctypes.POINTER(_GTree)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),] )

g_tree_lookup_extended = _rpythonic_function_(		"g_tree_lookup_extended", ctypes.c_int, [
	("tree",		ctypes.POINTER(_GTree)),
	("lookup_key",		ctypes.POINTER(ctypes.c_void_p)),
	("orig_key",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("value",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

g_tree_foreach = _rpythonic_function_(		"g_tree_foreach", ctypes.c_void_p, [
	("tree",		ctypes.POINTER(_GTree)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_tree_traverse = _rpythonic_function_(		"g_tree_traverse", ctypes.c_void_p, [
	("tree",		ctypes.POINTER(_GTree)),
	("traverse_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("traverse_type",		ctypes.c_int),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_tree_search = _rpythonic_function_(		"g_tree_search", ctypes.POINTER(ctypes.c_void_p), [
	("tree",		ctypes.POINTER(_GTree)),
	("search_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_tree_height = _rpythonic_function_(		"g_tree_height", ctypes.c_int, [
	("tree",		ctypes.POINTER(_GTree)),] )

g_tree_nnodes = _rpythonic_function_(		"g_tree_nnodes", ctypes.c_int, [
	("tree",		ctypes.POINTER(_GTree)),] )

g_uri_unescape_string = _rpythonic_function_(		"g_uri_unescape_string", ctypes.POINTER(ctypes.c_char), [
	("escaped_string",		ctypes.POINTER(ctypes.c_char)),
	("illegal_characters",		ctypes.POINTER(ctypes.c_char)),] )

g_uri_unescape_segment = _rpythonic_function_(		"g_uri_unescape_segment", ctypes.POINTER(ctypes.c_char), [
	("escaped_string",		ctypes.POINTER(ctypes.c_char)),
	("escaped_string_end",		ctypes.POINTER(ctypes.c_char)),
	("illegal_characters",		ctypes.POINTER(ctypes.c_char)),] )

g_uri_parse_scheme = _rpythonic_function_(		"g_uri_parse_scheme", ctypes.POINTER(ctypes.c_char), [
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

g_uri_escape_string = _rpythonic_function_(		"g_uri_escape_string", ctypes.POINTER(ctypes.c_char), [
	("unescaped",		ctypes.POINTER(ctypes.c_char)),
	("reserved_chars_allowed",		ctypes.POINTER(ctypes.c_char)),
	("allow_utf8",		ctypes.c_int),] )

g_variant_type_string_is_valid = _rpythonic_function_(		"g_variant_type_string_is_valid", ctypes.c_int, [
	("type_string",		ctypes.POINTER(ctypes.c_char)),] )

g_variant_type_string_scan = _rpythonic_function_(		"g_variant_type_string_scan", ctypes.c_int, [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("limit",		ctypes.POINTER(ctypes.c_char)),
	("endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_variant_type_free = _rpythonic_function_(		"g_variant_type_free", ctypes.c_void_p, [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_copy = _rpythonic_function_(		"g_variant_type_copy", ctypes.POINTER(_GVariantType), [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_new = _rpythonic_function_(		"g_variant_type_new", ctypes.POINTER(_GVariantType), [
	("type_string",		ctypes.POINTER(ctypes.c_char)),] )

g_variant_type_get_string_length = _rpythonic_function_(		"g_variant_type_get_string_length", ctypes.c_ulong, [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_peek_string = _rpythonic_function_(		"g_variant_type_peek_string", ctypes.POINTER(ctypes.c_char), [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_dup_string = _rpythonic_function_(		"g_variant_type_dup_string", ctypes.POINTER(ctypes.c_char), [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_is_definite = _rpythonic_function_(		"g_variant_type_is_definite", ctypes.c_int, [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_is_container = _rpythonic_function_(		"g_variant_type_is_container", ctypes.c_int, [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_is_basic = _rpythonic_function_(		"g_variant_type_is_basic", ctypes.c_int, [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_is_maybe = _rpythonic_function_(		"g_variant_type_is_maybe", ctypes.c_int, [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_is_array = _rpythonic_function_(		"g_variant_type_is_array", ctypes.c_int, [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_is_tuple = _rpythonic_function_(		"g_variant_type_is_tuple", ctypes.c_int, [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_is_dict_entry = _rpythonic_function_(		"g_variant_type_is_dict_entry", ctypes.c_int, [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_is_variant = _rpythonic_function_(		"g_variant_type_is_variant", ctypes.c_int, [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_hash = _rpythonic_function_(		"g_variant_type_hash", ctypes.c_uint, [("C_type",		ctypes.c_void_p)] )

g_variant_type_equal = _rpythonic_function_(		"g_variant_type_equal", ctypes.c_int, [
	("type1",		ctypes.POINTER(ctypes.c_void_p)),
	("type2",		ctypes.POINTER(ctypes.c_void_p)),] )

g_variant_type_is_subtype_of = _rpythonic_function_(		"g_variant_type_is_subtype_of", ctypes.c_int, [
	("C_type",		ctypes.POINTER(_GVariantType)),
	("supertype",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_element = _rpythonic_function_(		"g_variant_type_element", ctypes.POINTER(_GVariantType), [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_first = _rpythonic_function_(		"g_variant_type_first", ctypes.POINTER(_GVariantType), [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_next = _rpythonic_function_(		"g_variant_type_next", ctypes.POINTER(_GVariantType), [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_n_items = _rpythonic_function_(		"g_variant_type_n_items", ctypes.c_ulong, [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_key = _rpythonic_function_(		"g_variant_type_key", ctypes.POINTER(_GVariantType), [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_value = _rpythonic_function_(		"g_variant_type_value", ctypes.POINTER(_GVariantType), [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_new_array = _rpythonic_function_(		"g_variant_type_new_array", ctypes.POINTER(_GVariantType), [
	("element",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_new_maybe = _rpythonic_function_(		"g_variant_type_new_maybe", ctypes.POINTER(_GVariantType), [
	("element",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_new_tuple = _rpythonic_function_(		"g_variant_type_new_tuple", ctypes.POINTER(_GVariantType), [
	("items",		ctypes.POINTER(ctypes.POINTER(_GVariantType))),
	("length",		ctypes.c_int),] )

g_variant_type_new_dict_entry = _rpythonic_function_(		"g_variant_type_new_dict_entry", ctypes.POINTER(_GVariantType), [
	("key",		ctypes.POINTER(_GVariantType)),
	("value",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_checked_ = _rpythonic_function_(		"g_variant_type_checked_", ctypes.POINTER(_GVariantType), [
	("none",		ctypes.POINTER(ctypes.c_char)),] )

g_variant_unref = _rpythonic_function_(		"g_variant_unref", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_ref = _rpythonic_function_(		"g_variant_ref", ctypes.POINTER(_GVariant), [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_ref_sink = _rpythonic_function_(		"g_variant_ref_sink", ctypes.POINTER(_GVariant), [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_is_floating = _rpythonic_function_(		"g_variant_is_floating", ctypes.c_int, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_take_ref = _rpythonic_function_(		"g_variant_take_ref", ctypes.POINTER(_GVariant), [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_type = _rpythonic_function_(		"g_variant_get_type", ctypes.POINTER(_GVariantType), [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_type_string = _rpythonic_function_(		"g_variant_get_type_string", ctypes.POINTER(ctypes.c_char), [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_is_of_type = _rpythonic_function_(		"g_variant_is_of_type", ctypes.c_int, [
	("value",		ctypes.POINTER(_GVariant)),
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_is_container = _rpythonic_function_(		"g_variant_is_container", ctypes.c_int, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_classify = _rpythonic_function_(		"g_variant_classify", ctypes.c_int, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_new_boolean = _rpythonic_function_(		"g_variant_new_boolean", ctypes.POINTER(_GVariant), [
	("value",		ctypes.c_int),] )

g_variant_new_byte = _rpythonic_function_(		"g_variant_new_byte", ctypes.POINTER(_GVariant), [
	("value",		ctypes.c_ubyte),] )

g_variant_new_int16 = _rpythonic_function_(		"g_variant_new_int16", ctypes.POINTER(_GVariant), [
	("value",		ctypes.c_short),] )

g_variant_new_uint16 = _rpythonic_function_(		"g_variant_new_uint16", ctypes.POINTER(_GVariant), [
	("value",		ctypes.c_ushort),] )

g_variant_new_int32 = _rpythonic_function_(		"g_variant_new_int32", ctypes.POINTER(_GVariant), [
	("value",		ctypes.c_int),] )

g_variant_new_uint32 = _rpythonic_function_(		"g_variant_new_uint32", ctypes.POINTER(_GVariant), [
	("value",		ctypes.c_uint),] )

g_variant_new_int64 = _rpythonic_function_(		"g_variant_new_int64", ctypes.POINTER(_GVariant), [
	("value",		ctypes.c_long),] )

g_variant_new_uint64 = _rpythonic_function_(		"g_variant_new_uint64", ctypes.POINTER(_GVariant), [
	("value",		ctypes.c_ulong),] )

g_variant_new_handle = _rpythonic_function_(		"g_variant_new_handle", ctypes.POINTER(_GVariant), [
	("value",		ctypes.c_int),] )

g_variant_new_double = _rpythonic_function_(		"g_variant_new_double", ctypes.POINTER(_GVariant), [
	("value",		ctypes.c_double),] )

g_variant_new_string = _rpythonic_function_(		"g_variant_new_string", ctypes.POINTER(_GVariant), [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_variant_new_object_path = _rpythonic_function_(		"g_variant_new_object_path", ctypes.POINTER(_GVariant), [
	("object_path",		ctypes.POINTER(ctypes.c_char)),] )

g_variant_is_object_path = _rpythonic_function_(		"g_variant_is_object_path", ctypes.c_int, [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_variant_new_signature = _rpythonic_function_(		"g_variant_new_signature", ctypes.POINTER(_GVariant), [
	("signature",		ctypes.POINTER(ctypes.c_char)),] )

g_variant_is_signature = _rpythonic_function_(		"g_variant_is_signature", ctypes.c_int, [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_variant_new_variant = _rpythonic_function_(		"g_variant_new_variant", ctypes.POINTER(_GVariant), [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_new_strv = _rpythonic_function_(		"g_variant_new_strv", ctypes.POINTER(_GVariant), [
	("strv",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("length",		ctypes.c_long),] )

g_variant_new_objv = _rpythonic_function_(		"g_variant_new_objv", ctypes.POINTER(_GVariant), [
	("strv",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("length",		ctypes.c_long),] )

g_variant_new_bytestring = _rpythonic_function_(		"g_variant_new_bytestring", ctypes.POINTER(_GVariant), [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_variant_new_bytestring_array = _rpythonic_function_(		"g_variant_new_bytestring_array", ctypes.POINTER(_GVariant), [
	("strv",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("length",		ctypes.c_long),] )

g_variant_get_boolean = _rpythonic_function_(		"g_variant_get_boolean", ctypes.c_int, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_byte = _rpythonic_function_(		"g_variant_get_byte", ctypes.c_ubyte, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_int16 = _rpythonic_function_(		"g_variant_get_int16", ctypes.c_short, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_uint16 = _rpythonic_function_(		"g_variant_get_uint16", ctypes.c_ushort, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_int32 = _rpythonic_function_(		"g_variant_get_int32", ctypes.c_int, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_uint32 = _rpythonic_function_(		"g_variant_get_uint32", ctypes.c_uint, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_int64 = _rpythonic_function_(		"g_variant_get_int64", ctypes.c_long, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_uint64 = _rpythonic_function_(		"g_variant_get_uint64", ctypes.c_ulong, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_handle = _rpythonic_function_(		"g_variant_get_handle", ctypes.c_int, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_double = _rpythonic_function_(		"g_variant_get_double", ctypes.c_double, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_variant = _rpythonic_function_(		"g_variant_get_variant", ctypes.POINTER(_GVariant), [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_string = _rpythonic_function_(		"g_variant_get_string", ctypes.POINTER(ctypes.c_char), [
	("value",		ctypes.POINTER(_GVariant)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),] )

g_variant_dup_string = _rpythonic_function_(		"g_variant_dup_string", ctypes.POINTER(ctypes.c_char), [
	("value",		ctypes.POINTER(_GVariant)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),] )

g_variant_get_strv = _rpythonic_function_(		"g_variant_get_strv", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("value",		ctypes.POINTER(_GVariant)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),] )

g_variant_dup_strv = _rpythonic_function_(		"g_variant_dup_strv", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("value",		ctypes.POINTER(_GVariant)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),] )

g_variant_get_objv = _rpythonic_function_(		"g_variant_get_objv", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("value",		ctypes.POINTER(_GVariant)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),] )

g_variant_dup_objv = _rpythonic_function_(		"g_variant_dup_objv", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("value",		ctypes.POINTER(_GVariant)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),] )

g_variant_get_bytestring = _rpythonic_function_(		"g_variant_get_bytestring", ctypes.POINTER(ctypes.c_char), [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_dup_bytestring = _rpythonic_function_(		"g_variant_dup_bytestring", ctypes.POINTER(ctypes.c_char), [
	("value",		ctypes.POINTER(_GVariant)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),] )

g_variant_get_bytestring_array = _rpythonic_function_(		"g_variant_get_bytestring_array", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("value",		ctypes.POINTER(_GVariant)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),] )

g_variant_dup_bytestring_array = _rpythonic_function_(		"g_variant_dup_bytestring_array", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("value",		ctypes.POINTER(_GVariant)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),] )

g_variant_new_maybe = _rpythonic_function_(		"g_variant_new_maybe", ctypes.POINTER(_GVariant), [
	("child_type",		ctypes.POINTER(_GVariantType)),
	("child",		ctypes.POINTER(_GVariant)),] )

g_variant_new_array = _rpythonic_function_(		"g_variant_new_array", ctypes.POINTER(_GVariant), [
	("child_type",		ctypes.POINTER(_GVariantType)),
	("children",		ctypes.POINTER(ctypes.POINTER(_GVariant))),
	("n_children",		ctypes.c_ulong),] )

g_variant_new_tuple = _rpythonic_function_(		"g_variant_new_tuple", ctypes.POINTER(_GVariant), [
	("children",		ctypes.POINTER(ctypes.POINTER(_GVariant))),
	("n_children",		ctypes.c_ulong),] )

g_variant_new_dict_entry = _rpythonic_function_(		"g_variant_new_dict_entry", ctypes.POINTER(_GVariant), [
	("key",		ctypes.POINTER(_GVariant)),
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_maybe = _rpythonic_function_(		"g_variant_get_maybe", ctypes.POINTER(_GVariant), [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_n_children = _rpythonic_function_(		"g_variant_n_children", ctypes.c_ulong, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_child = _rpythonic_function_(		"g_variant_get_child", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GVariant)),
	("index_",		ctypes.c_ulong),
	("format_string",		ctypes.POINTER(ctypes.c_char)),] )

g_variant_get_child_value = _rpythonic_function_(		"g_variant_get_child_value", ctypes.POINTER(_GVariant), [
	("value",		ctypes.POINTER(_GVariant)),
	("index_",		ctypes.c_ulong),] )

g_variant_lookup = _rpythonic_function_(		"g_variant_lookup", ctypes.c_int, [
	("dictionary",		ctypes.POINTER(_GVariant)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("format_string",		ctypes.POINTER(ctypes.c_char)),] )

g_variant_lookup_value = _rpythonic_function_(		"g_variant_lookup_value", ctypes.POINTER(_GVariant), [
	("dictionary",		ctypes.POINTER(_GVariant)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("expected_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_get_fixed_array = _rpythonic_function_(		"g_variant_get_fixed_array", ctypes.POINTER(ctypes.c_void_p), [
	("value",		ctypes.POINTER(_GVariant)),
	("n_elements",		ctypes.POINTER(ctypes.c_ulong)),
	("element_size",		ctypes.c_ulong),] )

g_variant_get_size = _rpythonic_function_(		"g_variant_get_size", ctypes.c_ulong, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_data = _rpythonic_function_(		"g_variant_get_data", ctypes.POINTER(ctypes.c_void_p), [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_store = _rpythonic_function_(		"g_variant_store", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GVariant)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_variant_print = _rpythonic_function_(		"g_variant_print", ctypes.POINTER(ctypes.c_char), [
	("value",		ctypes.POINTER(_GVariant)),
	("type_annotate",		ctypes.c_int),] )

g_variant_print_string = _rpythonic_function_(		"g_variant_print_string", ctypes.POINTER(_GString), [
	("value",		ctypes.POINTER(_GVariant)),
	("string",		ctypes.POINTER(_GString)),
	("type_annotate",		ctypes.c_int),] )

g_variant_hash = _rpythonic_function_(		"g_variant_hash", ctypes.c_uint, [("value",		ctypes.c_void_p)] )

g_variant_equal = _rpythonic_function_(		"g_variant_equal", ctypes.c_int, [
	("one",		ctypes.POINTER(ctypes.c_void_p)),
	("two",		ctypes.POINTER(ctypes.c_void_p)),] )

g_variant_get_normal_form = _rpythonic_function_(		"g_variant_get_normal_form", ctypes.POINTER(_GVariant), [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_is_normal_form = _rpythonic_function_(		"g_variant_is_normal_form", ctypes.c_int, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_byteswap = _rpythonic_function_(		"g_variant_byteswap", ctypes.POINTER(_GVariant), [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_new_from_data = _rpythonic_function_(		"g_variant_new_from_data", ctypes.POINTER(_GVariant), [
	("C_type",		ctypes.POINTER(_GVariantType)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.c_ulong),
	("trusted",		ctypes.c_int),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_variant_iter_new = _rpythonic_function_(		"g_variant_iter_new", ctypes.POINTER(_GVariantIter), [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_iter_init = _rpythonic_function_(		"g_variant_iter_init", ctypes.c_ulong, [
	("iter",		ctypes.POINTER(_GVariantIter)),
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_iter_copy = _rpythonic_function_(		"g_variant_iter_copy", ctypes.POINTER(_GVariantIter), [
	("iter",		ctypes.POINTER(_GVariantIter)),] )

g_variant_iter_n_children = _rpythonic_function_(		"g_variant_iter_n_children", ctypes.c_ulong, [
	("iter",		ctypes.POINTER(_GVariantIter)),] )

g_variant_iter_free = _rpythonic_function_(		"g_variant_iter_free", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(_GVariantIter)),] )

g_variant_iter_next_value = _rpythonic_function_(		"g_variant_iter_next_value", ctypes.POINTER(_GVariant), [
	("iter",		ctypes.POINTER(_GVariantIter)),] )

g_variant_iter_next = _rpythonic_function_(		"g_variant_iter_next", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GVariantIter)),
	("format_string",		ctypes.POINTER(ctypes.c_char)),] )

g_variant_iter_loop = _rpythonic_function_(		"g_variant_iter_loop", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GVariantIter)),
	("format_string",		ctypes.POINTER(ctypes.c_char)),] )

g_variant_parser_get_error_quark = _rpythonic_function_(		"g_variant_parser_get_error_quark", ctypes.c_uint, [] )

g_variant_builder_new = _rpythonic_function_(		"g_variant_builder_new", ctypes.POINTER(_GVariantBuilder), [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_builder_unref = _rpythonic_function_(		"g_variant_builder_unref", ctypes.c_void_p, [
	("builder",		ctypes.POINTER(_GVariantBuilder)),] )

g_variant_builder_ref = _rpythonic_function_(		"g_variant_builder_ref", ctypes.POINTER(_GVariantBuilder), [
	("builder",		ctypes.POINTER(_GVariantBuilder)),] )

g_variant_builder_init = _rpythonic_function_(		"g_variant_builder_init", ctypes.c_void_p, [
	("builder",		ctypes.POINTER(_GVariantBuilder)),
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_builder_end = _rpythonic_function_(		"g_variant_builder_end", ctypes.POINTER(_GVariant), [
	("builder",		ctypes.POINTER(_GVariantBuilder)),] )

g_variant_builder_clear = _rpythonic_function_(		"g_variant_builder_clear", ctypes.c_void_p, [
	("builder",		ctypes.POINTER(_GVariantBuilder)),] )

g_variant_builder_open = _rpythonic_function_(		"g_variant_builder_open", ctypes.c_void_p, [
	("builder",		ctypes.POINTER(_GVariantBuilder)),
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_builder_close = _rpythonic_function_(		"g_variant_builder_close", ctypes.c_void_p, [
	("builder",		ctypes.POINTER(_GVariantBuilder)),] )

g_variant_builder_add_value = _rpythonic_function_(		"g_variant_builder_add_value", ctypes.c_void_p, [
	("builder",		ctypes.POINTER(_GVariantBuilder)),
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_builder_add = _rpythonic_function_(		"g_variant_builder_add", ctypes.c_void_p, [
	("builder",		ctypes.POINTER(_GVariantBuilder)),
	("format_string",		ctypes.POINTER(ctypes.c_char)),] )

g_variant_builder_add_parsed = _rpythonic_function_(		"g_variant_builder_add_parsed", ctypes.c_void_p, [
	("builder",		ctypes.POINTER(_GVariantBuilder)),
	("format",		ctypes.POINTER(ctypes.c_char)),] )

g_variant_new = _rpythonic_function_(		"g_variant_new", ctypes.POINTER(_GVariant), [
	("format_string",		ctypes.POINTER(ctypes.c_char)),] )

g_variant_get = _rpythonic_function_(		"g_variant_get", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GVariant)),
	("format_string",		ctypes.POINTER(ctypes.c_char)),] )

g_variant_new_va = _rpythonic_function_(		"g_variant_new_va", ctypes.POINTER(_GVariant), [
	("format_string",		ctypes.POINTER(ctypes.c_char)),
	("endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("app",		ctypes.POINTER(ctypes.c_char)),] )

g_variant_get_va = _rpythonic_function_(		"g_variant_get_va", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GVariant)),
	("format_string",		ctypes.POINTER(ctypes.c_char)),
	("endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("app",		ctypes.POINTER(ctypes.c_char)),] )

g_variant_parse = _rpythonic_function_(		"g_variant_parse", ctypes.POINTER(_GVariant), [
	("C_type",		ctypes.POINTER(_GVariantType)),
	("text",		ctypes.POINTER(ctypes.c_char)),
	("limit",		ctypes.POINTER(ctypes.c_char)),
	("endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_variant_new_parsed = _rpythonic_function_(		"g_variant_new_parsed", ctypes.POINTER(_GVariant), [
	("format",		ctypes.POINTER(ctypes.c_char)),] )

g_variant_new_parsed_va = _rpythonic_function_(		"g_variant_new_parsed_va", ctypes.POINTER(_GVariant), [
	("format",		ctypes.POINTER(ctypes.c_char)),
	("app",		ctypes.POINTER(ctypes.c_char)),] )

g_variant_compare = _rpythonic_function_(		"g_variant_compare", ctypes.c_int, [
	("one",		ctypes.POINTER(ctypes.c_void_p)),
	("two",		ctypes.POINTER(ctypes.c_void_p)),] )

g_type_init = _rpythonic_function_(		"g_type_init", ctypes.c_void_p, [] )

g_type_init_with_debug_flags = _rpythonic_function_(		"g_type_init_with_debug_flags", ctypes.c_void_p, [
	("debug_flags",		ctypes.c_int),] )

g_type_name = _rpythonic_function_(		"g_type_name", ctypes.POINTER(ctypes.c_char), [
	("C_type",		ctypes.c_ulong),] )

g_type_qname = _rpythonic_function_(		"g_type_qname", ctypes.c_uint, [
	("C_type",		ctypes.c_ulong),] )

g_type_from_name = _rpythonic_function_(		"g_type_from_name", ctypes.c_ulong, [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_type_parent = _rpythonic_function_(		"g_type_parent", ctypes.c_ulong, [
	("C_type",		ctypes.c_ulong),] )

g_type_depth = _rpythonic_function_(		"g_type_depth", ctypes.c_uint, [
	("C_type",		ctypes.c_ulong),] )

g_type_next_base = _rpythonic_function_(		"g_type_next_base", ctypes.c_ulong, [
	("leaf_type",		ctypes.c_ulong),
	("root_type",		ctypes.c_ulong),] )

g_type_is_a = _rpythonic_function_(		"g_type_is_a", ctypes.c_int, [
	("C_type",		ctypes.c_ulong),
	("is_a_type",		ctypes.c_ulong),] )

g_type_class_ref = _rpythonic_function_(		"g_type_class_ref", ctypes.POINTER(ctypes.c_void_p), [
	("C_type",		ctypes.c_ulong),] )

g_type_class_peek = _rpythonic_function_(		"g_type_class_peek", ctypes.POINTER(ctypes.c_void_p), [
	("C_type",		ctypes.c_ulong),] )

g_type_class_peek_static = _rpythonic_function_(		"g_type_class_peek_static", ctypes.POINTER(ctypes.c_void_p), [
	("C_type",		ctypes.c_ulong),] )

g_type_class_unref = _rpythonic_function_(		"g_type_class_unref", ctypes.c_void_p, [("g_class",		ctypes.c_void_p)] )

g_type_class_peek_parent = _rpythonic_function_(		"g_type_class_peek_parent", ctypes.POINTER(ctypes.c_void_p), [("g_class",		ctypes.c_void_p)] )

g_type_interface_peek = _rpythonic_function_(		"g_type_interface_peek", ctypes.POINTER(ctypes.c_void_p), [
	("instance_class",		ctypes.POINTER(ctypes.c_void_p)),
	("iface_type",		ctypes.c_ulong),] )

g_type_interface_peek_parent = _rpythonic_function_(		"g_type_interface_peek_parent", ctypes.POINTER(ctypes.c_void_p), [("g_iface",		ctypes.c_void_p)] )

g_type_default_interface_ref = _rpythonic_function_(		"g_type_default_interface_ref", ctypes.POINTER(ctypes.c_void_p), [
	("g_type",		ctypes.c_ulong),] )

g_type_default_interface_peek = _rpythonic_function_(		"g_type_default_interface_peek", ctypes.POINTER(ctypes.c_void_p), [
	("g_type",		ctypes.c_ulong),] )

g_type_default_interface_unref = _rpythonic_function_(		"g_type_default_interface_unref", ctypes.c_void_p, [("g_iface",		ctypes.c_void_p)] )

g_type_children = _rpythonic_function_(		"g_type_children", ctypes.POINTER(ctypes.c_ulong), [
	("C_type",		ctypes.c_ulong),
	("n_children",		ctypes.POINTER(ctypes.c_uint)),] )

g_type_interfaces = _rpythonic_function_(		"g_type_interfaces", ctypes.POINTER(ctypes.c_ulong), [
	("C_type",		ctypes.c_ulong),
	("n_interfaces",		ctypes.POINTER(ctypes.c_uint)),] )

g_type_set_qdata = _rpythonic_function_(		"g_type_set_qdata", ctypes.c_void_p, [
	("C_type",		ctypes.c_ulong),
	("quark",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_type_get_qdata = _rpythonic_function_(		"g_type_get_qdata", ctypes.POINTER(ctypes.c_void_p), [
	("C_type",		ctypes.c_ulong),
	("quark",		ctypes.c_uint),] )

g_type_query = _rpythonic_function_(		"g_type_query", ctypes.c_void_p, [
	("C_type",		ctypes.c_ulong),
	("query",		ctypes.POINTER(_GTypeQuery)),] )

GBaseInitFunc = _rpythonic_function_(		"GBaseInitFunc", ctypes.c_void_p, [("g_class",		ctypes.c_void_p)] )

GBaseFinalizeFunc = _rpythonic_function_(		"GBaseFinalizeFunc", ctypes.c_void_p, [("g_class",		ctypes.c_void_p)] )

GClassInitFunc = _rpythonic_function_(		"GClassInitFunc", ctypes.c_void_p, [
	("g_class",		ctypes.POINTER(ctypes.c_void_p)),
	("class_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GClassFinalizeFunc = _rpythonic_function_(		"GClassFinalizeFunc", ctypes.c_void_p, [
	("g_class",		ctypes.POINTER(ctypes.c_void_p)),
	("class_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GInstanceInitFunc = _rpythonic_function_(		"GInstanceInitFunc", ctypes.c_void_p, [
	("instance",		ctypes.POINTER(_GTypeInstance)),
	("g_class",		ctypes.POINTER(ctypes.c_void_p)),] )

GInterfaceInitFunc = _rpythonic_function_(		"GInterfaceInitFunc", ctypes.c_void_p, [
	("g_iface",		ctypes.POINTER(ctypes.c_void_p)),
	("iface_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GInterfaceFinalizeFunc = _rpythonic_function_(		"GInterfaceFinalizeFunc", ctypes.c_void_p, [
	("g_iface",		ctypes.POINTER(ctypes.c_void_p)),
	("iface_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GTypeClassCacheFunc = _rpythonic_function_(		"GTypeClassCacheFunc", ctypes.c_int, [
	("cache_data",		ctypes.POINTER(ctypes.c_void_p)),
	("g_class",		ctypes.POINTER(_GTypeClass)),] )

GTypeInterfaceCheckFunc = _rpythonic_function_(		"GTypeInterfaceCheckFunc", ctypes.c_void_p, [
	("check_data",		ctypes.POINTER(ctypes.c_void_p)),
	("g_iface",		ctypes.POINTER(ctypes.c_void_p)),] )

value_init = _rpythonic_function_(		"value_init", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),] )

value_free = _rpythonic_function_(		"value_free", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),] )

value_copy = _rpythonic_function_(		"value_copy", ctypes.c_void_p, [
	("src_value",		ctypes.POINTER(_GValue)),
	("dest_value",		ctypes.POINTER(_GValue)),] )

value_peek_pointer = _rpythonic_function_(		"value_peek_pointer", ctypes.POINTER(ctypes.c_void_p), [
	("value",		ctypes.POINTER(_GValue)),] )

collect_value = _rpythonic_function_(		"collect_value", ctypes.POINTER(ctypes.c_char), [
	("value",		ctypes.POINTER(_GValue)),
	("n_collect_values",		ctypes.c_uint),
	("collect_values",		ctypes.POINTER(_GTypeCValue)),
	("collect_flags",		ctypes.c_uint),] )

lcopy_value = _rpythonic_function_(		"lcopy_value", ctypes.POINTER(ctypes.c_char), [
	("value",		ctypes.POINTER(_GValue)),
	("n_collect_values",		ctypes.c_uint),
	("collect_values",		ctypes.POINTER(_GTypeCValue)),
	("collect_flags",		ctypes.c_uint),] )

g_type_register_static = _rpythonic_function_(		"g_type_register_static", ctypes.c_ulong, [
	("parent_type",		ctypes.c_ulong),
	("type_name",		ctypes.POINTER(ctypes.c_char)),
	("info",		ctypes.POINTER(_GTypeInfo)),
	("flags",		ctypes.c_int),] )

g_type_register_static_simple = _rpythonic_function_(		"g_type_register_static_simple", ctypes.c_ulong, [
	("parent_type",		ctypes.c_ulong),
	("type_name",		ctypes.POINTER(ctypes.c_char)),
	("class_size",		ctypes.c_uint),
	("class_init",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("instance_size",		ctypes.c_uint),
	("instance_init",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GTypeInstance),ctypes.POINTER(ctypes.c_void_p),)),
	("flags",		ctypes.c_int),] )

g_type_register_dynamic = _rpythonic_function_(		"g_type_register_dynamic", ctypes.c_ulong, [
	("parent_type",		ctypes.c_ulong),
	("type_name",		ctypes.POINTER(ctypes.c_char)),
	("plugin",		ctypes.POINTER(_GTypePlugin)),
	("flags",		ctypes.c_int),] )

g_type_register_fundamental = _rpythonic_function_(		"g_type_register_fundamental", ctypes.c_ulong, [
	("type_id",		ctypes.c_ulong),
	("type_name",		ctypes.POINTER(ctypes.c_char)),
	("info",		ctypes.POINTER(_GTypeInfo)),
	("finfo",		ctypes.POINTER(_GTypeFundamentalInfo)),
	("flags",		ctypes.c_int),] )

g_type_add_interface_static = _rpythonic_function_(		"g_type_add_interface_static", ctypes.c_void_p, [
	("instance_type",		ctypes.c_ulong),
	("interface_type",		ctypes.c_ulong),
	("info",		ctypes.POINTER(_GInterfaceInfo)),] )

g_type_add_interface_dynamic = _rpythonic_function_(		"g_type_add_interface_dynamic", ctypes.c_void_p, [
	("instance_type",		ctypes.c_ulong),
	("interface_type",		ctypes.c_ulong),
	("plugin",		ctypes.POINTER(_GTypePlugin)),] )

g_type_interface_add_prerequisite = _rpythonic_function_(		"g_type_interface_add_prerequisite", ctypes.c_void_p, [
	("interface_type",		ctypes.c_ulong),
	("prerequisite_type",		ctypes.c_ulong),] )

g_type_interface_prerequisites = _rpythonic_function_(		"g_type_interface_prerequisites", ctypes.POINTER(ctypes.c_ulong), [
	("interface_type",		ctypes.c_ulong),
	("n_prerequisites",		ctypes.POINTER(ctypes.c_uint)),] )

g_type_class_add_private = _rpythonic_function_(		"g_type_class_add_private", ctypes.c_void_p, [
	("g_class",		ctypes.POINTER(ctypes.c_void_p)),
	("private_size",		ctypes.c_ulong),] )

g_type_instance_get_private = _rpythonic_function_(		"g_type_instance_get_private", ctypes.POINTER(ctypes.c_void_p), [
	("instance",		ctypes.POINTER(_GTypeInstance)),
	("private_type",		ctypes.c_ulong),] )

g_type_add_class_private = _rpythonic_function_(		"g_type_add_class_private", ctypes.c_void_p, [
	("class_type",		ctypes.c_ulong),
	("private_size",		ctypes.c_ulong),] )

g_type_class_get_private = _rpythonic_function_(		"g_type_class_get_private", ctypes.POINTER(ctypes.c_void_p), [
	("klass",		ctypes.POINTER(_GTypeClass)),
	("private_type",		ctypes.c_ulong),] )

g_type_get_plugin = _rpythonic_function_(		"g_type_get_plugin", ctypes.POINTER(_GTypePlugin), [
	("C_type",		ctypes.c_ulong),] )

g_type_interface_get_plugin = _rpythonic_function_(		"g_type_interface_get_plugin", ctypes.POINTER(_GTypePlugin), [
	("instance_type",		ctypes.c_ulong),
	("interface_type",		ctypes.c_ulong),] )

g_type_fundamental_next = _rpythonic_function_(		"g_type_fundamental_next", ctypes.c_ulong, [] )

g_type_fundamental = _rpythonic_function_(		"g_type_fundamental", ctypes.c_ulong, [
	("type_id",		ctypes.c_ulong),] )

g_type_create_instance = _rpythonic_function_(		"g_type_create_instance", ctypes.POINTER(_GTypeInstance), [
	("C_type",		ctypes.c_ulong),] )

g_type_free_instance = _rpythonic_function_(		"g_type_free_instance", ctypes.c_void_p, [
	("instance",		ctypes.POINTER(_GTypeInstance)),] )

g_type_add_class_cache_func = _rpythonic_function_(		"g_type_add_class_cache_func", ctypes.c_void_p, [
	("cache_data",		ctypes.POINTER(ctypes.c_void_p)),
	("cache_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GTypeClass),)),] )

g_type_remove_class_cache_func = _rpythonic_function_(		"g_type_remove_class_cache_func", ctypes.c_void_p, [
	("cache_data",		ctypes.POINTER(ctypes.c_void_p)),
	("cache_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GTypeClass),)),] )

g_type_class_unref_uncached = _rpythonic_function_(		"g_type_class_unref_uncached", ctypes.c_void_p, [("g_class",		ctypes.c_void_p)] )

g_type_add_interface_check = _rpythonic_function_(		"g_type_add_interface_check", ctypes.c_void_p, [
	("check_data",		ctypes.POINTER(ctypes.c_void_p)),
	("check_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_type_remove_interface_check = _rpythonic_function_(		"g_type_remove_interface_check", ctypes.c_void_p, [
	("check_data",		ctypes.POINTER(ctypes.c_void_p)),
	("check_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_type_value_table_peek = _rpythonic_function_(		"g_type_value_table_peek", ctypes.POINTER(_GTypeValueTable), [
	("C_type",		ctypes.c_ulong),] )

g_type_check_instance = _rpythonic_function_(		"g_type_check_instance", ctypes.c_int, [
	("instance",		ctypes.POINTER(_GTypeInstance)),] )

g_type_check_instance_cast = _rpythonic_function_(		"g_type_check_instance_cast", ctypes.POINTER(_GTypeInstance), [
	("instance",		ctypes.POINTER(_GTypeInstance)),
	("iface_type",		ctypes.c_ulong),] )

g_type_check_instance_is_a = _rpythonic_function_(		"g_type_check_instance_is_a", ctypes.c_int, [
	("instance",		ctypes.POINTER(_GTypeInstance)),
	("iface_type",		ctypes.c_ulong),] )

g_type_check_class_cast = _rpythonic_function_(		"g_type_check_class_cast", ctypes.POINTER(_GTypeClass), [
	("g_class",		ctypes.POINTER(_GTypeClass)),
	("is_a_type",		ctypes.c_ulong),] )

g_type_check_class_is_a = _rpythonic_function_(		"g_type_check_class_is_a", ctypes.c_int, [
	("g_class",		ctypes.POINTER(_GTypeClass)),
	("is_a_type",		ctypes.c_ulong),] )

g_type_check_is_value_type = _rpythonic_function_(		"g_type_check_is_value_type", ctypes.c_int, [
	("C_type",		ctypes.c_ulong),] )

g_type_check_value = _rpythonic_function_(		"g_type_check_value", ctypes.c_int, [
	("value",		ctypes.POINTER(_GValue)),] )

g_type_check_value_holds = _rpythonic_function_(		"g_type_check_value_holds", ctypes.c_int, [
	("value",		ctypes.POINTER(_GValue)),
	("C_type",		ctypes.c_ulong),] )

g_type_test_flags = _rpythonic_function_(		"g_type_test_flags", ctypes.c_int, [
	("C_type",		ctypes.c_ulong),
	("flags",		ctypes.c_uint),] )

g_type_name_from_instance = _rpythonic_function_(		"g_type_name_from_instance", ctypes.POINTER(ctypes.c_char), [
	("instance",		ctypes.POINTER(_GTypeInstance)),] )

g_type_name_from_class = _rpythonic_function_(		"g_type_name_from_class", ctypes.POINTER(ctypes.c_char), [
	("g_class",		ctypes.POINTER(_GTypeClass)),] )

GValueTransform = _rpythonic_function_(		"GValueTransform", ctypes.c_void_p, [
	("src_value",		ctypes.POINTER(_GValue)),
	("dest_value",		ctypes.POINTER(_GValue)),] )

g_value_init = _rpythonic_function_(		"g_value_init", ctypes.POINTER(_GValue), [
	("value",		ctypes.POINTER(_GValue)),
	("g_type",		ctypes.c_ulong),] )

g_value_copy = _rpythonic_function_(		"g_value_copy", ctypes.c_void_p, [
	("src_value",		ctypes.POINTER(_GValue)),
	("dest_value",		ctypes.POINTER(_GValue)),] )

g_value_reset = _rpythonic_function_(		"g_value_reset", ctypes.POINTER(_GValue), [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_unset = _rpythonic_function_(		"g_value_unset", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_set_instance = _rpythonic_function_(		"g_value_set_instance", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("instance",		ctypes.POINTER(ctypes.c_void_p)),] )

g_value_fits_pointer = _rpythonic_function_(		"g_value_fits_pointer", ctypes.c_int, [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_peek_pointer = _rpythonic_function_(		"g_value_peek_pointer", ctypes.POINTER(ctypes.c_void_p), [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_type_compatible = _rpythonic_function_(		"g_value_type_compatible", ctypes.c_int, [
	("src_type",		ctypes.c_ulong),
	("dest_type",		ctypes.c_ulong),] )

g_value_type_transformable = _rpythonic_function_(		"g_value_type_transformable", ctypes.c_int, [
	("src_type",		ctypes.c_ulong),
	("dest_type",		ctypes.c_ulong),] )

g_value_transform = _rpythonic_function_(		"g_value_transform", ctypes.c_int, [
	("src_value",		ctypes.POINTER(_GValue)),
	("dest_value",		ctypes.POINTER(_GValue)),] )

g_value_register_transform_func = _rpythonic_function_(		"g_value_register_transform_func", ctypes.c_void_p, [
	("src_type",		ctypes.c_ulong),
	("dest_type",		ctypes.c_ulong),
	("transform_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GValue),ctypes.POINTER(_GValue),)),] )

value_set_default = _rpythonic_function_(		"value_set_default", ctypes.c_void_p, [
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("value",		ctypes.POINTER(_GValue)),] )

value_validate = _rpythonic_function_(		"value_validate", ctypes.c_int, [
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("value",		ctypes.POINTER(_GValue)),] )

values_cmp = _rpythonic_function_(		"values_cmp", ctypes.c_int, [
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("value1",		ctypes.POINTER(_GValue)),
	("value2",		ctypes.POINTER(_GValue)),] )

g_param_spec_ref = _rpythonic_function_(		"g_param_spec_ref", ctypes.POINTER(_GParamSpec), [
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

g_param_spec_unref = _rpythonic_function_(		"g_param_spec_unref", ctypes.c_void_p, [
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

g_param_spec_sink = _rpythonic_function_(		"g_param_spec_sink", ctypes.c_void_p, [
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

g_param_spec_ref_sink = _rpythonic_function_(		"g_param_spec_ref_sink", ctypes.POINTER(_GParamSpec), [
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

g_param_spec_get_qdata = _rpythonic_function_(		"g_param_spec_get_qdata", ctypes.POINTER(ctypes.c_void_p), [
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("quark",		ctypes.c_uint),] )

g_param_spec_set_qdata = _rpythonic_function_(		"g_param_spec_set_qdata", ctypes.c_void_p, [
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("quark",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_param_spec_set_qdata_full = _rpythonic_function_(		"g_param_spec_set_qdata_full", ctypes.c_void_p, [
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("quark",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_param_spec_steal_qdata = _rpythonic_function_(		"g_param_spec_steal_qdata", ctypes.POINTER(ctypes.c_void_p), [
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("quark",		ctypes.c_uint),] )

g_param_spec_get_redirect_target = _rpythonic_function_(		"g_param_spec_get_redirect_target", ctypes.POINTER(_GParamSpec), [
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

g_param_value_set_default = _rpythonic_function_(		"g_param_value_set_default", ctypes.c_void_p, [
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("value",		ctypes.POINTER(_GValue)),] )

g_param_value_defaults = _rpythonic_function_(		"g_param_value_defaults", ctypes.c_int, [
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("value",		ctypes.POINTER(_GValue)),] )

g_param_value_validate = _rpythonic_function_(		"g_param_value_validate", ctypes.c_int, [
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("value",		ctypes.POINTER(_GValue)),] )

g_param_value_convert = _rpythonic_function_(		"g_param_value_convert", ctypes.c_int, [
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("src_value",		ctypes.POINTER(_GValue)),
	("dest_value",		ctypes.POINTER(_GValue)),
	("strict_validation",		ctypes.c_int),] )

g_param_values_cmp = _rpythonic_function_(		"g_param_values_cmp", ctypes.c_int, [
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("value1",		ctypes.POINTER(_GValue)),
	("value2",		ctypes.POINTER(_GValue)),] )

g_param_spec_get_name = _rpythonic_function_(		"g_param_spec_get_name", ctypes.POINTER(ctypes.c_char), [
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

g_param_spec_get_nick = _rpythonic_function_(		"g_param_spec_get_nick", ctypes.POINTER(ctypes.c_char), [
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

g_param_spec_get_blurb = _rpythonic_function_(		"g_param_spec_get_blurb", ctypes.POINTER(ctypes.c_char), [
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

g_value_set_param = _rpythonic_function_(		"g_value_set_param", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("param",		ctypes.POINTER(_GParamSpec)),] )

g_value_get_param = _rpythonic_function_(		"g_value_get_param", ctypes.POINTER(_GParamSpec), [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_dup_param = _rpythonic_function_(		"g_value_dup_param", ctypes.POINTER(_GParamSpec), [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_take_param = _rpythonic_function_(		"g_value_take_param", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("param",		ctypes.POINTER(_GParamSpec)),] )

g_value_set_param_take_ownership = _rpythonic_function_(		"g_value_set_param_take_ownership", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("param",		ctypes.POINTER(_GParamSpec)),] )

instance_init = _rpythonic_function_(		"instance_init", ctypes.c_void_p, [
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

g_param_type_register_static = _rpythonic_function_(		"g_param_type_register_static", ctypes.c_ulong, [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("pspec_info",		ctypes.POINTER(_GParamSpecTypeInfo)),] )

_g_param_type_register_static_constant = _rpythonic_function_(		"_g_param_type_register_static_constant", ctypes.c_ulong, [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("pspec_info",		ctypes.POINTER(_GParamSpecTypeInfo)),
	("opt_type",		ctypes.c_ulong),] )

g_param_spec_internal = _rpythonic_function_(		"g_param_spec_internal", ctypes.POINTER(ctypes.c_void_p), [
	("param_type",		ctypes.c_ulong),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),] )

g_param_spec_pool_new = _rpythonic_function_(		"g_param_spec_pool_new", ctypes.POINTER(_GParamSpecPool), [
	("type_prefixing",		ctypes.c_int),] )

g_param_spec_pool_insert = _rpythonic_function_(		"g_param_spec_pool_insert", ctypes.c_void_p, [
	("pool",		ctypes.POINTER(_GParamSpecPool)),
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("owner_type",		ctypes.c_ulong),] )

g_param_spec_pool_remove = _rpythonic_function_(		"g_param_spec_pool_remove", ctypes.c_void_p, [
	("pool",		ctypes.POINTER(_GParamSpecPool)),
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

g_param_spec_pool_lookup = _rpythonic_function_(		"g_param_spec_pool_lookup", ctypes.POINTER(_GParamSpec), [
	("pool",		ctypes.POINTER(_GParamSpecPool)),
	("param_name",		ctypes.POINTER(ctypes.c_char)),
	("owner_type",		ctypes.c_ulong),
	("walk_ancestors",		ctypes.c_int),] )

g_param_spec_pool_list_owned = _rpythonic_function_(		"g_param_spec_pool_list_owned", ctypes.POINTER(_GList), [
	("pool",		ctypes.POINTER(_GParamSpecPool)),
	("owner_type",		ctypes.c_ulong),] )

g_param_spec_pool_list = _rpythonic_function_(		"g_param_spec_pool_list", ctypes.POINTER(ctypes.POINTER(_GParamSpec)), [
	("pool",		ctypes.POINTER(_GParamSpecPool)),
	("owner_type",		ctypes.c_ulong),
	("n_pspecs_p",		ctypes.POINTER(ctypes.c_uint)),] )

GCallback = _rpythonic_function_(		"GCallback", ctypes.c_void_p, [] )

GClosureNotify = _rpythonic_function_(		"GClosureNotify", ctypes.c_void_p, [
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("closure",		ctypes.POINTER(_GClosure)),] )

GClosureMarshal = _rpythonic_function_(		"GClosureMarshal", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

marshal = _rpythonic_function_(		"marshal", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_new = _rpythonic_function_(		"g_cclosure_new", ctypes.POINTER(_GClosure), [
	("callback_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy_data",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GClosure),)),] )

g_cclosure_new_swap = _rpythonic_function_(		"g_cclosure_new_swap", ctypes.POINTER(_GClosure), [
	("callback_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy_data",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GClosure),)),] )

g_signal_type_cclosure_new = _rpythonic_function_(		"g_signal_type_cclosure_new", ctypes.POINTER(_GClosure), [
	("itype",		ctypes.c_ulong),
	("struct_offset",		ctypes.c_uint),] )

g_closure_ref = _rpythonic_function_(		"g_closure_ref", ctypes.POINTER(_GClosure), [
	("closure",		ctypes.POINTER(_GClosure)),] )

g_closure_sink = _rpythonic_function_(		"g_closure_sink", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),] )

g_closure_unref = _rpythonic_function_(		"g_closure_unref", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),] )

g_closure_new_simple = _rpythonic_function_(		"g_closure_new_simple", ctypes.POINTER(_GClosure), [
	("sizeof_closure",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_closure_add_finalize_notifier = _rpythonic_function_(		"g_closure_add_finalize_notifier", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("notify_data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GClosure),)),] )

g_closure_remove_finalize_notifier = _rpythonic_function_(		"g_closure_remove_finalize_notifier", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("notify_data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GClosure),)),] )

g_closure_add_invalidate_notifier = _rpythonic_function_(		"g_closure_add_invalidate_notifier", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("notify_data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GClosure),)),] )

g_closure_remove_invalidate_notifier = _rpythonic_function_(		"g_closure_remove_invalidate_notifier", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("notify_data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GClosure),)),] )

g_closure_add_marshal_guards = _rpythonic_function_(		"g_closure_add_marshal_guards", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("pre_marshal_data",		ctypes.POINTER(ctypes.c_void_p)),
	("pre_marshal_notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GClosure),)),
	("post_marshal_data",		ctypes.POINTER(ctypes.c_void_p)),
	("post_marshal_notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GClosure),)),] )

g_closure_set_marshal = _rpythonic_function_(		"g_closure_set_marshal", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("marshal",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GClosure),ctypes.POINTER(_GValue),ctypes.c_uint,ctypes.POINTER(_GValue),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_closure_set_meta_marshal = _rpythonic_function_(		"g_closure_set_meta_marshal", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),
	("meta_marshal",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GClosure),ctypes.POINTER(_GValue),ctypes.c_uint,ctypes.POINTER(_GValue),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_closure_invalidate = _rpythonic_function_(		"g_closure_invalidate", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),] )

g_closure_invoke = _rpythonic_function_(		"g_closure_invoke", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_generic = _rpythonic_function_(		"g_cclosure_marshal_generic", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_gvalue",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__VOID = _rpythonic_function_(		"g_cclosure_marshal_VOID__VOID", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__BOOLEAN = _rpythonic_function_(		"g_cclosure_marshal_VOID__BOOLEAN", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__CHAR = _rpythonic_function_(		"g_cclosure_marshal_VOID__CHAR", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__UCHAR = _rpythonic_function_(		"g_cclosure_marshal_VOID__UCHAR", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__INT = _rpythonic_function_(		"g_cclosure_marshal_VOID__INT", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__UINT = _rpythonic_function_(		"g_cclosure_marshal_VOID__UINT", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__LONG = _rpythonic_function_(		"g_cclosure_marshal_VOID__LONG", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__ULONG = _rpythonic_function_(		"g_cclosure_marshal_VOID__ULONG", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__ENUM = _rpythonic_function_(		"g_cclosure_marshal_VOID__ENUM", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__FLAGS = _rpythonic_function_(		"g_cclosure_marshal_VOID__FLAGS", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__FLOAT = _rpythonic_function_(		"g_cclosure_marshal_VOID__FLOAT", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__DOUBLE = _rpythonic_function_(		"g_cclosure_marshal_VOID__DOUBLE", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__STRING = _rpythonic_function_(		"g_cclosure_marshal_VOID__STRING", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__PARAM = _rpythonic_function_(		"g_cclosure_marshal_VOID__PARAM", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__BOXED = _rpythonic_function_(		"g_cclosure_marshal_VOID__BOXED", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__POINTER = _rpythonic_function_(		"g_cclosure_marshal_VOID__POINTER", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__OBJECT = _rpythonic_function_(		"g_cclosure_marshal_VOID__OBJECT", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__VARIANT = _rpythonic_function_(		"g_cclosure_marshal_VOID__VARIANT", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__UINT_POINTER = _rpythonic_function_(		"g_cclosure_marshal_VOID__UINT_POINTER", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_BOOLEAN__FLAGS = _rpythonic_function_(		"g_cclosure_marshal_BOOLEAN__FLAGS", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_STRING__OBJECT_POINTER = _rpythonic_function_(		"g_cclosure_marshal_STRING__OBJECT_POINTER", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_BOOLEAN__BOXED_BOXED = _rpythonic_function_(		"g_cclosure_marshal_BOOLEAN__BOXED_BOXED", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GSignalEmissionHook = _rpythonic_function_(		"GSignalEmissionHook", ctypes.c_int, [
	("ihint",		ctypes.POINTER(_GSignalInvocationHint)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

GSignalAccumulator = _rpythonic_function_(		"GSignalAccumulator", ctypes.c_int, [
	("ihint",		ctypes.POINTER(_GSignalInvocationHint)),
	("return_accu",		ctypes.POINTER(_GValue)),
	("handler_return",		ctypes.POINTER(_GValue)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_signal_newv = _rpythonic_function_(		"g_signal_newv", ctypes.c_uint, [
	("signal_name",		ctypes.POINTER(ctypes.c_char)),
	("itype",		ctypes.c_ulong),
	("signal_flags",		ctypes.c_int),
	("class_closure",		ctypes.POINTER(_GClosure)),
	("accumulator",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GSignalInvocationHint),ctypes.POINTER(_GValue),ctypes.POINTER(_GValue),ctypes.POINTER(ctypes.c_void_p),)),
	("accu_data",		ctypes.POINTER(ctypes.c_void_p)),
	("c_marshaller",		ctypes.c_void_p),
	("return_type",		ctypes.c_ulong),
	("n_params",		ctypes.c_uint),
	("param_types",		ctypes.POINTER(ctypes.c_ulong)),] )

g_signal_new_valist = _rpythonic_function_(		"g_signal_new_valist", ctypes.c_uint, [
	("signal_name",		ctypes.POINTER(ctypes.c_char)),
	("itype",		ctypes.c_ulong),
	("signal_flags",		ctypes.c_int),
	("class_closure",		ctypes.POINTER(_GClosure)),
	("accumulator",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GSignalInvocationHint),ctypes.POINTER(_GValue),ctypes.POINTER(_GValue),ctypes.POINTER(ctypes.c_void_p),)),
	("accu_data",		ctypes.POINTER(ctypes.c_void_p)),
	("c_marshaller",		ctypes.c_void_p),
	("return_type",		ctypes.c_ulong),
	("n_params",		ctypes.c_uint),
	("args",		ctypes.c_char),] )

g_signal_new = _rpythonic_function_(		"g_signal_new", ctypes.c_uint, [
	("signal_name",		ctypes.POINTER(ctypes.c_char)),
	("itype",		ctypes.c_ulong),
	("signal_flags",		ctypes.c_int),
	("class_offset",		ctypes.c_uint),
	("accumulator",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GSignalInvocationHint),ctypes.POINTER(_GValue),ctypes.POINTER(_GValue),ctypes.POINTER(ctypes.c_void_p),)),
	("accu_data",		ctypes.POINTER(ctypes.c_void_p)),
	("c_marshaller",		ctypes.c_void_p),
	("return_type",		ctypes.c_ulong),
	("n_params",		ctypes.c_uint),] )

g_signal_new_class_handler = _rpythonic_function_(		"g_signal_new_class_handler", ctypes.c_uint, [
	("signal_name",		ctypes.POINTER(ctypes.c_char)),
	("itype",		ctypes.c_ulong),
	("signal_flags",		ctypes.c_int),
	("class_handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("accumulator",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GSignalInvocationHint),ctypes.POINTER(_GValue),ctypes.POINTER(_GValue),ctypes.POINTER(ctypes.c_void_p),)),
	("accu_data",		ctypes.POINTER(ctypes.c_void_p)),
	("c_marshaller",		ctypes.c_void_p),
	("return_type",		ctypes.c_ulong),
	("n_params",		ctypes.c_uint),] )

g_signal_emitv = _rpythonic_function_(		"g_signal_emitv", ctypes.c_void_p, [
	("instance_and_params",		ctypes.POINTER(_GValue)),
	("signal_id",		ctypes.c_uint),
	("detail",		ctypes.c_uint),
	("return_value",		ctypes.POINTER(_GValue)),] )

g_signal_emit_valist = _rpythonic_function_(		"g_signal_emit_valist", ctypes.c_void_p, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("signal_id",		ctypes.c_uint),
	("detail",		ctypes.c_uint),
	("var_args",		ctypes.c_char),] )

g_signal_emit = _rpythonic_function_(		"g_signal_emit", ctypes.c_void_p, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("signal_id",		ctypes.c_uint),
	("detail",		ctypes.c_uint),] )

g_signal_emit_by_name = _rpythonic_function_(		"g_signal_emit_by_name", ctypes.c_void_p, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("detailed_signal",		ctypes.POINTER(ctypes.c_char)),] )

g_signal_lookup = _rpythonic_function_(		"g_signal_lookup", ctypes.c_uint, [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("itype",		ctypes.c_ulong),] )

g_signal_name = _rpythonic_function_(		"g_signal_name", ctypes.POINTER(ctypes.c_char), [
	("signal_id",		ctypes.c_uint),] )

g_signal_query = _rpythonic_function_(		"g_signal_query", ctypes.c_void_p, [
	("signal_id",		ctypes.c_uint),
	("query",		ctypes.POINTER(_GSignalQuery)),] )

g_signal_list_ids = _rpythonic_function_(		"g_signal_list_ids", ctypes.POINTER(ctypes.c_uint), [
	("itype",		ctypes.c_ulong),
	("n_ids",		ctypes.POINTER(ctypes.c_uint)),] )

g_signal_parse_name = _rpythonic_function_(		"g_signal_parse_name", ctypes.c_int, [
	("detailed_signal",		ctypes.POINTER(ctypes.c_char)),
	("itype",		ctypes.c_ulong),
	("signal_id_p",		ctypes.POINTER(ctypes.c_uint)),
	("detail_p",		ctypes.POINTER(ctypes.c_uint)),
	("force_detail_quark",		ctypes.c_int),] )

g_signal_get_invocation_hint = _rpythonic_function_(		"g_signal_get_invocation_hint", ctypes.POINTER(_GSignalInvocationHint), [("instance",		ctypes.c_void_p)] )

g_signal_stop_emission = _rpythonic_function_(		"g_signal_stop_emission", ctypes.c_void_p, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("signal_id",		ctypes.c_uint),
	("detail",		ctypes.c_uint),] )

g_signal_stop_emission_by_name = _rpythonic_function_(		"g_signal_stop_emission_by_name", ctypes.c_void_p, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("detailed_signal",		ctypes.POINTER(ctypes.c_char)),] )

g_signal_add_emission_hook = _rpythonic_function_(		"g_signal_add_emission_hook", ctypes.c_ulong, [
	("signal_id",		ctypes.c_uint),
	("detail",		ctypes.c_uint),
	("hook_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GSignalInvocationHint),ctypes.c_uint,ctypes.POINTER(_GValue),ctypes.POINTER(ctypes.c_void_p),)),
	("hook_data",		ctypes.POINTER(ctypes.c_void_p)),
	("data_destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_signal_remove_emission_hook = _rpythonic_function_(		"g_signal_remove_emission_hook", ctypes.c_void_p, [
	("signal_id",		ctypes.c_uint),
	("hook_id",		ctypes.c_ulong),] )

g_signal_has_handler_pending = _rpythonic_function_(		"g_signal_has_handler_pending", ctypes.c_int, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("signal_id",		ctypes.c_uint),
	("detail",		ctypes.c_uint),
	("may_be_blocked",		ctypes.c_int),] )

g_signal_connect_closure_by_id = _rpythonic_function_(		"g_signal_connect_closure_by_id", ctypes.c_ulong, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("signal_id",		ctypes.c_uint),
	("detail",		ctypes.c_uint),
	("closure",		ctypes.POINTER(_GClosure)),
	("after",		ctypes.c_int),] )

g_signal_connect_closure = _rpythonic_function_(		"g_signal_connect_closure", ctypes.c_ulong, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("detailed_signal",		ctypes.POINTER(ctypes.c_char)),
	("closure",		ctypes.POINTER(_GClosure)),
	("after",		ctypes.c_int),] )

g_signal_connect_data = _rpythonic_function_(		"g_signal_connect_data", ctypes.c_ulong, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("detailed_signal",		ctypes.POINTER(ctypes.c_char)),
	("c_handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy_data",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GClosure),)),
	("connect_flags",		ctypes.c_int),] )

g_signal_handler_block = _rpythonic_function_(		"g_signal_handler_block", ctypes.c_void_p, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("handler_id",		ctypes.c_ulong),] )

g_signal_handler_unblock = _rpythonic_function_(		"g_signal_handler_unblock", ctypes.c_void_p, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("handler_id",		ctypes.c_ulong),] )

g_signal_handler_disconnect = _rpythonic_function_(		"g_signal_handler_disconnect", ctypes.c_void_p, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("handler_id",		ctypes.c_ulong),] )

g_signal_handler_is_connected = _rpythonic_function_(		"g_signal_handler_is_connected", ctypes.c_int, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("handler_id",		ctypes.c_ulong),] )

g_signal_handler_find = _rpythonic_function_(		"g_signal_handler_find", ctypes.c_ulong, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("mask",		ctypes.c_int),
	("signal_id",		ctypes.c_uint),
	("detail",		ctypes.c_uint),
	("closure",		ctypes.POINTER(_GClosure)),
	("func",		ctypes.POINTER(ctypes.c_void_p)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_signal_handlers_block_matched = _rpythonic_function_(		"g_signal_handlers_block_matched", ctypes.c_uint, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("mask",		ctypes.c_int),
	("signal_id",		ctypes.c_uint),
	("detail",		ctypes.c_uint),
	("closure",		ctypes.POINTER(_GClosure)),
	("func",		ctypes.POINTER(ctypes.c_void_p)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_signal_handlers_unblock_matched = _rpythonic_function_(		"g_signal_handlers_unblock_matched", ctypes.c_uint, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("mask",		ctypes.c_int),
	("signal_id",		ctypes.c_uint),
	("detail",		ctypes.c_uint),
	("closure",		ctypes.POINTER(_GClosure)),
	("func",		ctypes.POINTER(ctypes.c_void_p)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_signal_handlers_disconnect_matched = _rpythonic_function_(		"g_signal_handlers_disconnect_matched", ctypes.c_uint, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("mask",		ctypes.c_int),
	("signal_id",		ctypes.c_uint),
	("detail",		ctypes.c_uint),
	("closure",		ctypes.POINTER(_GClosure)),
	("func",		ctypes.POINTER(ctypes.c_void_p)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_signal_override_class_closure = _rpythonic_function_(		"g_signal_override_class_closure", ctypes.c_void_p, [
	("signal_id",		ctypes.c_uint),
	("instance_type",		ctypes.c_ulong),
	("class_closure",		ctypes.POINTER(_GClosure)),] )

g_signal_override_class_handler = _rpythonic_function_(		"g_signal_override_class_handler", ctypes.c_void_p, [
	("signal_name",		ctypes.POINTER(ctypes.c_char)),
	("instance_type",		ctypes.c_ulong),
	("class_handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_signal_chain_from_overridden = _rpythonic_function_(		"g_signal_chain_from_overridden", ctypes.c_void_p, [
	("instance_and_params",		ctypes.POINTER(_GValue)),
	("return_value",		ctypes.POINTER(_GValue)),] )

g_signal_chain_from_overridden_handler = _rpythonic_function_(		"g_signal_chain_from_overridden_handler", ctypes.c_void_p, [("instance",		ctypes.c_void_p)] )

g_signal_accumulator_true_handled = _rpythonic_function_(		"g_signal_accumulator_true_handled", ctypes.c_int, [
	("ihint",		ctypes.POINTER(_GSignalInvocationHint)),
	("return_accu",		ctypes.POINTER(_GValue)),
	("handler_return",		ctypes.POINTER(_GValue)),
	("dummy",		ctypes.POINTER(ctypes.c_void_p)),] )

g_signal_accumulator_first_wins = _rpythonic_function_(		"g_signal_accumulator_first_wins", ctypes.c_int, [
	("ihint",		ctypes.POINTER(_GSignalInvocationHint)),
	("return_accu",		ctypes.POINTER(_GValue)),
	("handler_return",		ctypes.POINTER(_GValue)),
	("dummy",		ctypes.POINTER(ctypes.c_void_p)),] )

g_signal_handlers_destroy = _rpythonic_function_(		"g_signal_handlers_destroy", ctypes.c_void_p, [("instance",		ctypes.c_void_p)] )

_g_signals_destroy = _rpythonic_function_(		"_g_signals_destroy", ctypes.c_void_p, [
	("itype",		ctypes.c_ulong),] )

GObjectGetPropertyFunc = _rpythonic_function_(		"GObjectGetPropertyFunc", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("property_id",		ctypes.c_uint),
	("value",		ctypes.POINTER(_GValue)),
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

GObjectSetPropertyFunc = _rpythonic_function_(		"GObjectSetPropertyFunc", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("property_id",		ctypes.c_uint),
	("value",		ctypes.POINTER(_GValue)),
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

GObjectFinalizeFunc = _rpythonic_function_(		"GObjectFinalizeFunc", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),] )

GWeakNotify = _rpythonic_function_(		"GWeakNotify", ctypes.c_void_p, [
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("where_the_object_was",		ctypes.POINTER(_GObject)),] )

constructor = _rpythonic_function_(		"constructor", ctypes.POINTER(_GObject), [
	("C_type",		ctypes.c_ulong),
	("n_construct_properties",		ctypes.c_uint),
	("construct_properties",		ctypes.POINTER(_GObjectConstructParam)),] )

set_property = _rpythonic_function_(		"set_property", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("property_id",		ctypes.c_uint),
	("value",		ctypes.POINTER(_GValue)),
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

get_property = _rpythonic_function_(		"get_property", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("property_id",		ctypes.c_uint),
	("value",		ctypes.POINTER(_GValue)),
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

dispose = _rpythonic_function_(		"dispose", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),] )

dispatch_properties_changed = _rpythonic_function_(		"dispatch_properties_changed", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("n_pspecs",		ctypes.c_uint),
	("pspecs",		ctypes.POINTER(ctypes.POINTER(_GParamSpec))),] )

notify = _rpythonic_function_(		"notify", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

constructed = _rpythonic_function_(		"constructed", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),] )

g_initially_unowned_get_type = _rpythonic_function_(		"g_initially_unowned_get_type", ctypes.c_ulong, [] )

g_object_class_install_property = _rpythonic_function_(		"g_object_class_install_property", ctypes.c_void_p, [
	("oclass",		ctypes.POINTER(_GObjectClass)),
	("property_id",		ctypes.c_uint),
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

g_object_class_find_property = _rpythonic_function_(		"g_object_class_find_property", ctypes.POINTER(_GParamSpec), [
	("oclass",		ctypes.POINTER(_GObjectClass)),
	("property_name",		ctypes.POINTER(ctypes.c_char)),] )

g_object_class_list_properties = _rpythonic_function_(		"g_object_class_list_properties", ctypes.POINTER(ctypes.POINTER(_GParamSpec)), [
	("oclass",		ctypes.POINTER(_GObjectClass)),
	("n_properties",		ctypes.POINTER(ctypes.c_uint)),] )

g_object_class_override_property = _rpythonic_function_(		"g_object_class_override_property", ctypes.c_void_p, [
	("oclass",		ctypes.POINTER(_GObjectClass)),
	("property_id",		ctypes.c_uint),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_object_class_install_properties = _rpythonic_function_(		"g_object_class_install_properties", ctypes.c_void_p, [
	("oclass",		ctypes.POINTER(_GObjectClass)),
	("n_pspecs",		ctypes.c_uint),
	("pspecs",		ctypes.POINTER(ctypes.POINTER(_GParamSpec))),] )

g_object_interface_install_property = _rpythonic_function_(		"g_object_interface_install_property", ctypes.c_void_p, [
	("g_iface",		ctypes.POINTER(ctypes.c_void_p)),
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

g_object_interface_find_property = _rpythonic_function_(		"g_object_interface_find_property", ctypes.POINTER(_GParamSpec), [
	("g_iface",		ctypes.POINTER(ctypes.c_void_p)),
	("property_name",		ctypes.POINTER(ctypes.c_char)),] )

g_object_interface_list_properties = _rpythonic_function_(		"g_object_interface_list_properties", ctypes.POINTER(ctypes.POINTER(_GParamSpec)), [
	("g_iface",		ctypes.POINTER(ctypes.c_void_p)),
	("n_properties_p",		ctypes.POINTER(ctypes.c_uint)),] )

g_object_get_type = _rpythonic_function_(		"g_object_get_type", ctypes.c_ulong, [] )

g_object_new = _rpythonic_function_(		"g_object_new", ctypes.POINTER(ctypes.c_void_p), [
	("object_type",		ctypes.c_ulong),
	("first_property_name",		ctypes.POINTER(ctypes.c_char)),] )

g_object_newv = _rpythonic_function_(		"g_object_newv", ctypes.POINTER(ctypes.c_void_p), [
	("object_type",		ctypes.c_ulong),
	("n_parameters",		ctypes.c_uint),
	("parameters",		ctypes.POINTER(_GParameter)),] )

g_object_new_valist = _rpythonic_function_(		"g_object_new_valist", ctypes.POINTER(_GObject), [
	("object_type",		ctypes.c_ulong),
	("first_property_name",		ctypes.POINTER(ctypes.c_char)),
	("var_args",		ctypes.c_char),] )

g_object_set = _rpythonic_function_(		"g_object_set", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(ctypes.c_void_p)),
	("first_property_name",		ctypes.POINTER(ctypes.c_char)),] )

g_object_get = _rpythonic_function_(		"g_object_get", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(ctypes.c_void_p)),
	("first_property_name",		ctypes.POINTER(ctypes.c_char)),] )

g_object_connect = _rpythonic_function_(		"g_object_connect", ctypes.POINTER(ctypes.c_void_p), [
	("C_object",		ctypes.POINTER(ctypes.c_void_p)),
	("signal_spec",		ctypes.POINTER(ctypes.c_char)),] )

g_object_disconnect = _rpythonic_function_(		"g_object_disconnect", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(ctypes.c_void_p)),
	("signal_spec",		ctypes.POINTER(ctypes.c_char)),] )

g_object_set_valist = _rpythonic_function_(		"g_object_set_valist", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("first_property_name",		ctypes.POINTER(ctypes.c_char)),
	("var_args",		ctypes.c_char),] )

g_object_get_valist = _rpythonic_function_(		"g_object_get_valist", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("first_property_name",		ctypes.POINTER(ctypes.c_char)),
	("var_args",		ctypes.c_char),] )

g_object_set_property = _rpythonic_function_(		"g_object_set_property", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("property_name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(_GValue)),] )

g_object_get_property = _rpythonic_function_(		"g_object_get_property", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("property_name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(_GValue)),] )

g_object_freeze_notify = _rpythonic_function_(		"g_object_freeze_notify", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),] )

g_object_notify = _rpythonic_function_(		"g_object_notify", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("property_name",		ctypes.POINTER(ctypes.c_char)),] )

g_object_notify_by_pspec = _rpythonic_function_(		"g_object_notify_by_pspec", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

g_object_thaw_notify = _rpythonic_function_(		"g_object_thaw_notify", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),] )

g_object_is_floating = _rpythonic_function_(		"g_object_is_floating", ctypes.c_int, [("C_object",		ctypes.c_void_p)] )

g_object_ref_sink = _rpythonic_function_(		"g_object_ref_sink", ctypes.POINTER(ctypes.c_void_p), [("C_object",		ctypes.c_void_p)] )

g_object_ref = _rpythonic_function_(		"g_object_ref", ctypes.POINTER(ctypes.c_void_p), [("C_object",		ctypes.c_void_p)] )

g_object_unref = _rpythonic_function_(		"g_object_unref", ctypes.c_void_p, [("C_object",		ctypes.c_void_p)] )

g_object_weak_ref = _rpythonic_function_(		"g_object_weak_ref", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GObject),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_object_weak_unref = _rpythonic_function_(		"g_object_weak_unref", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GObject),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_object_add_weak_pointer = _rpythonic_function_(		"g_object_add_weak_pointer", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("weak_pointer_location",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

g_object_remove_weak_pointer = _rpythonic_function_(		"g_object_remove_weak_pointer", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("weak_pointer_location",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

GToggleNotify = _rpythonic_function_(		"GToggleNotify", ctypes.c_void_p, [
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("C_object",		ctypes.POINTER(_GObject)),
	("is_last_ref",		ctypes.c_int),] )

g_object_add_toggle_ref = _rpythonic_function_(		"g_object_add_toggle_ref", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GObject),ctypes.c_int,)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_object_remove_toggle_ref = _rpythonic_function_(		"g_object_remove_toggle_ref", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GObject),ctypes.c_int,)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_object_get_qdata = _rpythonic_function_(		"g_object_get_qdata", ctypes.POINTER(ctypes.c_void_p), [
	("C_object",		ctypes.POINTER(_GObject)),
	("quark",		ctypes.c_uint),] )

g_object_set_qdata = _rpythonic_function_(		"g_object_set_qdata", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("quark",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_object_set_qdata_full = _rpythonic_function_(		"g_object_set_qdata_full", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("quark",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_object_steal_qdata = _rpythonic_function_(		"g_object_steal_qdata", ctypes.POINTER(ctypes.c_void_p), [
	("C_object",		ctypes.POINTER(_GObject)),
	("quark",		ctypes.c_uint),] )

g_object_get_data = _rpythonic_function_(		"g_object_get_data", ctypes.POINTER(ctypes.c_void_p), [
	("C_object",		ctypes.POINTER(_GObject)),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

g_object_set_data = _rpythonic_function_(		"g_object_set_data", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_object_set_data_full = _rpythonic_function_(		"g_object_set_data_full", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_object_steal_data = _rpythonic_function_(		"g_object_steal_data", ctypes.POINTER(ctypes.c_void_p), [
	("C_object",		ctypes.POINTER(_GObject)),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

g_object_watch_closure = _rpythonic_function_(		"g_object_watch_closure", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("closure",		ctypes.POINTER(_GClosure)),] )

g_cclosure_new_object = _rpythonic_function_(		"g_cclosure_new_object", ctypes.POINTER(_GClosure), [
	("callback_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("C_object",		ctypes.POINTER(_GObject)),] )

g_cclosure_new_object_swap = _rpythonic_function_(		"g_cclosure_new_object_swap", ctypes.POINTER(_GClosure), [
	("callback_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("C_object",		ctypes.POINTER(_GObject)),] )

g_closure_new_object = _rpythonic_function_(		"g_closure_new_object", ctypes.POINTER(_GClosure), [
	("sizeof_closure",		ctypes.c_uint),
	("C_object",		ctypes.POINTER(_GObject)),] )

g_value_set_object = _rpythonic_function_(		"g_value_set_object", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_object",		ctypes.POINTER(ctypes.c_void_p)),] )

g_value_get_object = _rpythonic_function_(		"g_value_get_object", ctypes.POINTER(ctypes.c_void_p), [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_dup_object = _rpythonic_function_(		"g_value_dup_object", ctypes.POINTER(ctypes.c_void_p), [
	("value",		ctypes.POINTER(_GValue)),] )

g_signal_connect_object = _rpythonic_function_(		"g_signal_connect_object", ctypes.c_ulong, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("detailed_signal",		ctypes.POINTER(ctypes.c_char)),
	("c_handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("gobject",		ctypes.POINTER(ctypes.c_void_p)),
	("connect_flags",		ctypes.c_int),] )

g_object_force_floating = _rpythonic_function_(		"g_object_force_floating", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),] )

g_object_run_dispose = _rpythonic_function_(		"g_object_run_dispose", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),] )

g_value_take_object = _rpythonic_function_(		"g_value_take_object", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_object",		ctypes.POINTER(ctypes.c_void_p)),] )

g_value_set_object_take_ownership = _rpythonic_function_(		"g_value_set_object_take_ownership", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_object",		ctypes.POINTER(ctypes.c_void_p)),] )

g_object_compat_control = _rpythonic_function_(		"g_object_compat_control", ctypes.c_ulong, [
	("what",		ctypes.c_ulong),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_clear_object = _rpythonic_function_(		"g_clear_object", ctypes.c_void_p, [
	("object_ptr",		ctypes.POINTER(ctypes.POINTER(_GObject))),] )

GBindingTransformFunc = _rpythonic_function_(		"GBindingTransformFunc", ctypes.c_int, [
	("binding",		ctypes.POINTER(_GBinding)),
	("source_value",		ctypes.POINTER(_GValue)),
	("target_value",		ctypes.POINTER(_GValue)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_binding_flags_get_type = _rpythonic_function_(		"g_binding_flags_get_type", ctypes.c_ulong, [] )

g_binding_get_type = _rpythonic_function_(		"g_binding_get_type", ctypes.c_ulong, [] )

g_binding_get_flags = _rpythonic_function_(		"g_binding_get_flags", ctypes.c_int, [
	("binding",		ctypes.POINTER(_GBinding)),] )

g_binding_get_source = _rpythonic_function_(		"g_binding_get_source", ctypes.POINTER(_GObject), [
	("binding",		ctypes.POINTER(_GBinding)),] )

g_binding_get_target = _rpythonic_function_(		"g_binding_get_target", ctypes.POINTER(_GObject), [
	("binding",		ctypes.POINTER(_GBinding)),] )

g_binding_get_source_property = _rpythonic_function_(		"g_binding_get_source_property", ctypes.POINTER(ctypes.c_char), [
	("binding",		ctypes.POINTER(_GBinding)),] )

g_binding_get_target_property = _rpythonic_function_(		"g_binding_get_target_property", ctypes.POINTER(ctypes.c_char), [
	("binding",		ctypes.POINTER(_GBinding)),] )

g_object_bind_property = _rpythonic_function_(		"g_object_bind_property", ctypes.POINTER(_GBinding), [
	("source",		ctypes.POINTER(ctypes.c_void_p)),
	("source_property",		ctypes.POINTER(ctypes.c_char)),
	("target",		ctypes.POINTER(ctypes.c_void_p)),
	("target_property",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),] )

g_object_bind_property_full = _rpythonic_function_(		"g_object_bind_property_full", ctypes.POINTER(_GBinding), [
	("source",		ctypes.POINTER(ctypes.c_void_p)),
	("source_property",		ctypes.POINTER(ctypes.c_char)),
	("target",		ctypes.POINTER(ctypes.c_void_p)),
	("target_property",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("transform_to",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GBinding),ctypes.POINTER(_GValue),ctypes.POINTER(_GValue),ctypes.POINTER(ctypes.c_void_p),)),
	("transform_from",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GBinding),ctypes.POINTER(_GValue),ctypes.POINTER(_GValue),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_object_bind_property_with_closures = _rpythonic_function_(		"g_object_bind_property_with_closures", ctypes.POINTER(_GBinding), [
	("source",		ctypes.POINTER(ctypes.c_void_p)),
	("source_property",		ctypes.POINTER(ctypes.c_char)),
	("target",		ctypes.POINTER(ctypes.c_void_p)),
	("target_property",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("transform_to",		ctypes.POINTER(_GClosure)),
	("transform_from",		ctypes.POINTER(_GClosure)),] )

g_date_get_type = _rpythonic_function_(		"g_date_get_type", ctypes.c_ulong, [] )

g_strv_get_type = _rpythonic_function_(		"g_strv_get_type", ctypes.c_ulong, [] )

g_gstring_get_type = _rpythonic_function_(		"g_gstring_get_type", ctypes.c_ulong, [] )

g_hash_table_get_type = _rpythonic_function_(		"g_hash_table_get_type", ctypes.c_ulong, [] )

g_array_get_type = _rpythonic_function_(		"g_array_get_type", ctypes.c_ulong, [] )

g_byte_array_get_type = _rpythonic_function_(		"g_byte_array_get_type", ctypes.c_ulong, [] )

g_ptr_array_get_type = _rpythonic_function_(		"g_ptr_array_get_type", ctypes.c_ulong, [] )

g_variant_type_get_gtype = _rpythonic_function_(		"g_variant_type_get_gtype", ctypes.c_ulong, [] )

g_regex_get_type = _rpythonic_function_(		"g_regex_get_type", ctypes.c_ulong, [] )

g_match_info_get_type = _rpythonic_function_(		"g_match_info_get_type", ctypes.c_ulong, [] )

g_error_get_type = _rpythonic_function_(		"g_error_get_type", ctypes.c_ulong, [] )

g_date_time_get_type = _rpythonic_function_(		"g_date_time_get_type", ctypes.c_ulong, [] )

g_io_channel_get_type = _rpythonic_function_(		"g_io_channel_get_type", ctypes.c_ulong, [] )

g_io_condition_get_type = _rpythonic_function_(		"g_io_condition_get_type", ctypes.c_ulong, [] )

g_variant_builder_get_type = _rpythonic_function_(		"g_variant_builder_get_type", ctypes.c_ulong, [] )

g_main_loop_get_type = _rpythonic_function_(		"g_main_loop_get_type", ctypes.c_ulong, [] )

g_main_context_get_type = _rpythonic_function_(		"g_main_context_get_type", ctypes.c_ulong, [] )

g_source_get_type = _rpythonic_function_(		"g_source_get_type", ctypes.c_ulong, [] )

g_variant_get_gtype = _rpythonic_function_(		"g_variant_get_gtype", ctypes.c_ulong, [] )

GBoxedCopyFunc = _rpythonic_function_(		"GBoxedCopyFunc", ctypes.POINTER(ctypes.c_void_p), [("boxed",		ctypes.c_void_p)] )

GBoxedFreeFunc = _rpythonic_function_(		"GBoxedFreeFunc", ctypes.c_void_p, [("boxed",		ctypes.c_void_p)] )

g_boxed_copy = _rpythonic_function_(		"g_boxed_copy", ctypes.POINTER(ctypes.c_void_p), [
	("boxed_type",		ctypes.c_ulong),
	("src_boxed",		ctypes.POINTER(ctypes.c_void_p)),] )

g_boxed_free = _rpythonic_function_(		"g_boxed_free", ctypes.c_void_p, [
	("boxed_type",		ctypes.c_ulong),
	("boxed",		ctypes.POINTER(ctypes.c_void_p)),] )

g_value_set_boxed = _rpythonic_function_(		"g_value_set_boxed", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_boxed",		ctypes.POINTER(ctypes.c_void_p)),] )

g_value_set_static_boxed = _rpythonic_function_(		"g_value_set_static_boxed", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_boxed",		ctypes.POINTER(ctypes.c_void_p)),] )

g_value_take_boxed = _rpythonic_function_(		"g_value_take_boxed", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_boxed",		ctypes.POINTER(ctypes.c_void_p)),] )

g_value_set_boxed_take_ownership = _rpythonic_function_(		"g_value_set_boxed_take_ownership", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_boxed",		ctypes.POINTER(ctypes.c_void_p)),] )

g_value_get_boxed = _rpythonic_function_(		"g_value_get_boxed", ctypes.POINTER(ctypes.c_void_p), [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_dup_boxed = _rpythonic_function_(		"g_value_dup_boxed", ctypes.POINTER(ctypes.c_void_p), [
	("value",		ctypes.POINTER(_GValue)),] )

g_boxed_type_register_static = _rpythonic_function_(		"g_boxed_type_register_static", ctypes.c_ulong, [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("boxed_copy",		ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), )),
	("boxed_free",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_closure_get_type = _rpythonic_function_(		"g_closure_get_type", ctypes.c_ulong, [] )

g_value_get_type = _rpythonic_function_(		"g_value_get_type", ctypes.c_ulong, [] )

g_value_array_get_type = _rpythonic_function_(		"g_value_array_get_type", ctypes.c_ulong, [] )

g_enum_get_value = _rpythonic_function_(		"g_enum_get_value", ctypes.POINTER(_GEnumValue), [
	("enum_class",		ctypes.POINTER(_GEnumClass)),
	("value",		ctypes.c_int),] )

g_enum_get_value_by_name = _rpythonic_function_(		"g_enum_get_value_by_name", ctypes.POINTER(_GEnumValue), [
	("enum_class",		ctypes.POINTER(_GEnumClass)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_enum_get_value_by_nick = _rpythonic_function_(		"g_enum_get_value_by_nick", ctypes.POINTER(_GEnumValue), [
	("enum_class",		ctypes.POINTER(_GEnumClass)),
	("nick",		ctypes.POINTER(ctypes.c_char)),] )

g_flags_get_first_value = _rpythonic_function_(		"g_flags_get_first_value", ctypes.POINTER(_GFlagsValue), [
	("flags_class",		ctypes.POINTER(_GFlagsClass)),
	("value",		ctypes.c_uint),] )

g_flags_get_value_by_name = _rpythonic_function_(		"g_flags_get_value_by_name", ctypes.POINTER(_GFlagsValue), [
	("flags_class",		ctypes.POINTER(_GFlagsClass)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_flags_get_value_by_nick = _rpythonic_function_(		"g_flags_get_value_by_nick", ctypes.POINTER(_GFlagsValue), [
	("flags_class",		ctypes.POINTER(_GFlagsClass)),
	("nick",		ctypes.POINTER(ctypes.c_char)),] )

g_value_set_enum = _rpythonic_function_(		"g_value_set_enum", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_enum",		ctypes.c_int),] )

g_value_get_enum = _rpythonic_function_(		"g_value_get_enum", ctypes.c_int, [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_set_flags = _rpythonic_function_(		"g_value_set_flags", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_flags",		ctypes.c_uint),] )

g_value_get_flags = _rpythonic_function_(		"g_value_get_flags", ctypes.c_uint, [
	("value",		ctypes.POINTER(_GValue)),] )

g_enum_register_static = _rpythonic_function_(		"g_enum_register_static", ctypes.c_ulong, [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("const_static_values",		ctypes.POINTER(_GEnumValue)),] )

g_flags_register_static = _rpythonic_function_(		"g_flags_register_static", ctypes.c_ulong, [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("const_static_values",		ctypes.POINTER(_GFlagsValue)),] )

g_enum_complete_type_info = _rpythonic_function_(		"g_enum_complete_type_info", ctypes.c_void_p, [
	("g_enum_type",		ctypes.c_ulong),
	("info",		ctypes.POINTER(_GTypeInfo)),
	("const_values",		ctypes.POINTER(_GEnumValue)),] )

g_flags_complete_type_info = _rpythonic_function_(		"g_flags_complete_type_info", ctypes.c_void_p, [
	("g_flags_type",		ctypes.c_ulong),
	("info",		ctypes.POINTER(_GTypeInfo)),
	("const_values",		ctypes.POINTER(_GFlagsValue)),] )

g_param_spec_char = _rpythonic_function_(		"g_param_spec_char", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("minimum",		ctypes.c_char),
	("maximum",		ctypes.c_char),
	("default_value",		ctypes.c_char),
	("flags",		ctypes.c_int),] )

g_param_spec_uchar = _rpythonic_function_(		"g_param_spec_uchar", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("minimum",		ctypes.c_ubyte),
	("maximum",		ctypes.c_ubyte),
	("default_value",		ctypes.c_ubyte),
	("flags",		ctypes.c_int),] )

g_param_spec_boolean = _rpythonic_function_(		"g_param_spec_boolean", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("default_value",		ctypes.c_int),
	("flags",		ctypes.c_int),] )

g_param_spec_int = _rpythonic_function_(		"g_param_spec_int", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("minimum",		ctypes.c_int),
	("maximum",		ctypes.c_int),
	("default_value",		ctypes.c_int),
	("flags",		ctypes.c_int),] )

g_param_spec_uint = _rpythonic_function_(		"g_param_spec_uint", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("minimum",		ctypes.c_uint),
	("maximum",		ctypes.c_uint),
	("default_value",		ctypes.c_uint),
	("flags",		ctypes.c_int),] )

g_param_spec_long = _rpythonic_function_(		"g_param_spec_long", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("minimum",		ctypes.c_long),
	("maximum",		ctypes.c_long),
	("default_value",		ctypes.c_long),
	("flags",		ctypes.c_int),] )

g_param_spec_ulong = _rpythonic_function_(		"g_param_spec_ulong", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("minimum",		ctypes.c_ulong),
	("maximum",		ctypes.c_ulong),
	("default_value",		ctypes.c_ulong),
	("flags",		ctypes.c_int),] )

g_param_spec_int64 = _rpythonic_function_(		"g_param_spec_int64", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("minimum",		ctypes.c_long),
	("maximum",		ctypes.c_long),
	("default_value",		ctypes.c_long),
	("flags",		ctypes.c_int),] )

g_param_spec_uint64 = _rpythonic_function_(		"g_param_spec_uint64", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("minimum",		ctypes.c_ulong),
	("maximum",		ctypes.c_ulong),
	("default_value",		ctypes.c_ulong),
	("flags",		ctypes.c_int),] )

g_param_spec_unichar = _rpythonic_function_(		"g_param_spec_unichar", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("default_value",		ctypes.c_uint),
	("flags",		ctypes.c_int),] )

g_param_spec_enum = _rpythonic_function_(		"g_param_spec_enum", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("enum_type",		ctypes.c_ulong),
	("default_value",		ctypes.c_int),
	("flags",		ctypes.c_int),] )

g_param_spec_flags = _rpythonic_function_(		"g_param_spec_flags", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("flags_type",		ctypes.c_ulong),
	("default_value",		ctypes.c_uint),
	("flags",		ctypes.c_int),] )

g_param_spec_float = _rpythonic_function_(		"g_param_spec_float", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("minimum",		ctypes.c_float),
	("maximum",		ctypes.c_float),
	("default_value",		ctypes.c_float),
	("flags",		ctypes.c_int),] )

g_param_spec_double = _rpythonic_function_(		"g_param_spec_double", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("minimum",		ctypes.c_double),
	("maximum",		ctypes.c_double),
	("default_value",		ctypes.c_double),
	("flags",		ctypes.c_int),] )

g_param_spec_string = _rpythonic_function_(		"g_param_spec_string", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("default_value",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),] )

g_param_spec_param = _rpythonic_function_(		"g_param_spec_param", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("param_type",		ctypes.c_ulong),
	("flags",		ctypes.c_int),] )

g_param_spec_boxed = _rpythonic_function_(		"g_param_spec_boxed", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("boxed_type",		ctypes.c_ulong),
	("flags",		ctypes.c_int),] )

g_param_spec_pointer = _rpythonic_function_(		"g_param_spec_pointer", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),] )

g_param_spec_value_array = _rpythonic_function_(		"g_param_spec_value_array", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("element_spec",		ctypes.POINTER(_GParamSpec)),
	("flags",		ctypes.c_int),] )

g_param_spec_object = _rpythonic_function_(		"g_param_spec_object", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("object_type",		ctypes.c_ulong),
	("flags",		ctypes.c_int),] )

g_param_spec_override = _rpythonic_function_(		"g_param_spec_override", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("overridden",		ctypes.POINTER(_GParamSpec)),] )

g_param_spec_gtype = _rpythonic_function_(		"g_param_spec_gtype", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("is_a_type",		ctypes.c_ulong),
	("flags",		ctypes.c_int),] )

g_param_spec_variant = _rpythonic_function_(		"g_param_spec_variant", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("C_type",		ctypes.POINTER(_GVariantType)),
	("default_value",		ctypes.POINTER(_GVariant)),
	("flags",		ctypes.c_int),] )

g_source_set_closure = _rpythonic_function_(		"g_source_set_closure", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),
	("closure",		ctypes.POINTER(_GClosure)),] )

g_source_set_dummy_callback = _rpythonic_function_(		"g_source_set_dummy_callback", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),] )

load = _rpythonic_function_(		"load", ctypes.c_int, [
	("module",		ctypes.POINTER(_GTypeModule)),] )

unload = _rpythonic_function_(		"unload", ctypes.c_void_p, [
	("module",		ctypes.POINTER(_GTypeModule)),] )

reserved1 = _rpythonic_function_(		"reserved1", ctypes.c_void_p, [] )

reserved2 = _rpythonic_function_(		"reserved2", ctypes.c_void_p, [] )

reserved3 = _rpythonic_function_(		"reserved3", ctypes.c_void_p, [] )

reserved4 = _rpythonic_function_(		"reserved4", ctypes.c_void_p, [] )

g_type_module_get_type = _rpythonic_function_(		"g_type_module_get_type", ctypes.c_ulong, [] )

g_type_module_use = _rpythonic_function_(		"g_type_module_use", ctypes.c_int, [
	("module",		ctypes.POINTER(_GTypeModule)),] )

g_type_module_unuse = _rpythonic_function_(		"g_type_module_unuse", ctypes.c_void_p, [
	("module",		ctypes.POINTER(_GTypeModule)),] )

g_type_module_set_name = _rpythonic_function_(		"g_type_module_set_name", ctypes.c_void_p, [
	("module",		ctypes.POINTER(_GTypeModule)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_type_module_register_type = _rpythonic_function_(		"g_type_module_register_type", ctypes.c_ulong, [
	("module",		ctypes.POINTER(_GTypeModule)),
	("parent_type",		ctypes.c_ulong),
	("type_name",		ctypes.POINTER(ctypes.c_char)),
	("type_info",		ctypes.POINTER(_GTypeInfo)),
	("flags",		ctypes.c_int),] )

g_type_module_add_interface = _rpythonic_function_(		"g_type_module_add_interface", ctypes.c_void_p, [
	("module",		ctypes.POINTER(_GTypeModule)),
	("instance_type",		ctypes.c_ulong),
	("interface_type",		ctypes.c_ulong),
	("interface_info",		ctypes.POINTER(_GInterfaceInfo)),] )

g_type_module_register_enum = _rpythonic_function_(		"g_type_module_register_enum", ctypes.c_ulong, [
	("module",		ctypes.POINTER(_GTypeModule)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("const_static_values",		ctypes.POINTER(_GEnumValue)),] )

g_type_module_register_flags = _rpythonic_function_(		"g_type_module_register_flags", ctypes.c_ulong, [
	("module",		ctypes.POINTER(_GTypeModule)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("const_static_values",		ctypes.POINTER(_GFlagsValue)),] )

GTypePluginUse = _rpythonic_function_(		"GTypePluginUse", ctypes.c_void_p, [
	("plugin",		ctypes.POINTER(_GTypePlugin)),] )

GTypePluginUnuse = _rpythonic_function_(		"GTypePluginUnuse", ctypes.c_void_p, [
	("plugin",		ctypes.POINTER(_GTypePlugin)),] )

GTypePluginCompleteTypeInfo = _rpythonic_function_(		"GTypePluginCompleteTypeInfo", ctypes.c_void_p, [
	("plugin",		ctypes.POINTER(_GTypePlugin)),
	("g_type",		ctypes.c_ulong),
	("info",		ctypes.POINTER(_GTypeInfo)),
	("value_table",		ctypes.POINTER(_GTypeValueTable)),] )

GTypePluginCompleteInterfaceInfo = _rpythonic_function_(		"GTypePluginCompleteInterfaceInfo", ctypes.c_void_p, [
	("plugin",		ctypes.POINTER(_GTypePlugin)),
	("instance_type",		ctypes.c_ulong),
	("interface_type",		ctypes.c_ulong),
	("info",		ctypes.POINTER(_GInterfaceInfo)),] )

g_type_plugin_get_type = _rpythonic_function_(		"g_type_plugin_get_type", ctypes.c_ulong, [] )

g_type_plugin_use = _rpythonic_function_(		"g_type_plugin_use", ctypes.c_void_p, [
	("plugin",		ctypes.POINTER(_GTypePlugin)),] )

g_type_plugin_unuse = _rpythonic_function_(		"g_type_plugin_unuse", ctypes.c_void_p, [
	("plugin",		ctypes.POINTER(_GTypePlugin)),] )

g_type_plugin_complete_type_info = _rpythonic_function_(		"g_type_plugin_complete_type_info", ctypes.c_void_p, [
	("plugin",		ctypes.POINTER(_GTypePlugin)),
	("g_type",		ctypes.c_ulong),
	("info",		ctypes.POINTER(_GTypeInfo)),
	("value_table",		ctypes.POINTER(_GTypeValueTable)),] )

g_type_plugin_complete_interface_info = _rpythonic_function_(		"g_type_plugin_complete_interface_info", ctypes.c_void_p, [
	("plugin",		ctypes.POINTER(_GTypePlugin)),
	("instance_type",		ctypes.c_ulong),
	("interface_type",		ctypes.c_ulong),
	("info",		ctypes.POINTER(_GInterfaceInfo)),] )

g_value_array_get_nth = _rpythonic_function_(		"g_value_array_get_nth", ctypes.POINTER(_GValue), [
	("value_array",		ctypes.POINTER(_GValueArray)),
	("index_",		ctypes.c_uint),] )

g_value_array_new = _rpythonic_function_(		"g_value_array_new", ctypes.POINTER(_GValueArray), [
	("n_prealloced",		ctypes.c_uint),] )

g_value_array_free = _rpythonic_function_(		"g_value_array_free", ctypes.c_void_p, [
	("value_array",		ctypes.POINTER(_GValueArray)),] )

g_value_array_copy = _rpythonic_function_(		"g_value_array_copy", ctypes.POINTER(_GValueArray), [
	("value_array",		ctypes.POINTER(_GValueArray)),] )

g_value_array_prepend = _rpythonic_function_(		"g_value_array_prepend", ctypes.POINTER(_GValueArray), [
	("value_array",		ctypes.POINTER(_GValueArray)),
	("value",		ctypes.POINTER(_GValue)),] )

g_value_array_append = _rpythonic_function_(		"g_value_array_append", ctypes.POINTER(_GValueArray), [
	("value_array",		ctypes.POINTER(_GValueArray)),
	("value",		ctypes.POINTER(_GValue)),] )

g_value_array_insert = _rpythonic_function_(		"g_value_array_insert", ctypes.POINTER(_GValueArray), [
	("value_array",		ctypes.POINTER(_GValueArray)),
	("index_",		ctypes.c_uint),
	("value",		ctypes.POINTER(_GValue)),] )

g_value_array_remove = _rpythonic_function_(		"g_value_array_remove", ctypes.POINTER(_GValueArray), [
	("value_array",		ctypes.POINTER(_GValueArray)),
	("index_",		ctypes.c_uint),] )

g_value_array_sort = _rpythonic_function_(		"g_value_array_sort", ctypes.POINTER(_GValueArray), [
	("value_array",		ctypes.POINTER(_GValueArray)),
	("compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_value_array_sort_with_data = _rpythonic_function_(		"g_value_array_sort_with_data", ctypes.POINTER(_GValueArray), [
	("value_array",		ctypes.POINTER(_GValueArray)),
	("compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_value_set_char = _rpythonic_function_(		"g_value_set_char", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_char",		ctypes.c_char),] )

g_value_get_char = _rpythonic_function_(		"g_value_get_char", ctypes.c_char, [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_set_uchar = _rpythonic_function_(		"g_value_set_uchar", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_uchar",		ctypes.c_ubyte),] )

g_value_get_uchar = _rpythonic_function_(		"g_value_get_uchar", ctypes.c_ubyte, [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_set_boolean = _rpythonic_function_(		"g_value_set_boolean", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_boolean",		ctypes.c_int),] )

g_value_get_boolean = _rpythonic_function_(		"g_value_get_boolean", ctypes.c_int, [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_set_int = _rpythonic_function_(		"g_value_set_int", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_int",		ctypes.c_int),] )

g_value_get_int = _rpythonic_function_(		"g_value_get_int", ctypes.c_int, [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_set_uint = _rpythonic_function_(		"g_value_set_uint", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_uint",		ctypes.c_uint),] )

g_value_get_uint = _rpythonic_function_(		"g_value_get_uint", ctypes.c_uint, [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_set_long = _rpythonic_function_(		"g_value_set_long", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_long",		ctypes.c_long),] )

g_value_get_long = _rpythonic_function_(		"g_value_get_long", ctypes.c_long, [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_set_ulong = _rpythonic_function_(		"g_value_set_ulong", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_ulong",		ctypes.c_ulong),] )

g_value_get_ulong = _rpythonic_function_(		"g_value_get_ulong", ctypes.c_ulong, [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_set_int64 = _rpythonic_function_(		"g_value_set_int64", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_int64",		ctypes.c_long),] )

g_value_get_int64 = _rpythonic_function_(		"g_value_get_int64", ctypes.c_long, [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_set_uint64 = _rpythonic_function_(		"g_value_set_uint64", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_uint64",		ctypes.c_ulong),] )

g_value_get_uint64 = _rpythonic_function_(		"g_value_get_uint64", ctypes.c_ulong, [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_set_float = _rpythonic_function_(		"g_value_set_float", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_float",		ctypes.c_float),] )

g_value_get_float = _rpythonic_function_(		"g_value_get_float", ctypes.c_float, [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_set_double = _rpythonic_function_(		"g_value_set_double", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_double",		ctypes.c_double),] )

g_value_get_double = _rpythonic_function_(		"g_value_get_double", ctypes.c_double, [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_set_string = _rpythonic_function_(		"g_value_set_string", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_string",		ctypes.POINTER(ctypes.c_char)),] )

g_value_set_static_string = _rpythonic_function_(		"g_value_set_static_string", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_string",		ctypes.POINTER(ctypes.c_char)),] )

g_value_get_string = _rpythonic_function_(		"g_value_get_string", ctypes.POINTER(ctypes.c_char), [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_dup_string = _rpythonic_function_(		"g_value_dup_string", ctypes.POINTER(ctypes.c_char), [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_set_pointer = _rpythonic_function_(		"g_value_set_pointer", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_pointer",		ctypes.POINTER(ctypes.c_void_p)),] )

g_value_get_pointer = _rpythonic_function_(		"g_value_get_pointer", ctypes.POINTER(ctypes.c_void_p), [
	("value",		ctypes.POINTER(_GValue)),] )

g_gtype_get_type = _rpythonic_function_(		"g_gtype_get_type", ctypes.c_ulong, [] )

g_value_set_gtype = _rpythonic_function_(		"g_value_set_gtype", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_gtype",		ctypes.c_ulong),] )

g_value_get_gtype = _rpythonic_function_(		"g_value_get_gtype", ctypes.c_ulong, [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_set_variant = _rpythonic_function_(		"g_value_set_variant", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("variant",		ctypes.POINTER(_GVariant)),] )

g_value_take_variant = _rpythonic_function_(		"g_value_take_variant", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("variant",		ctypes.POINTER(_GVariant)),] )

g_value_get_variant = _rpythonic_function_(		"g_value_get_variant", ctypes.POINTER(_GVariant), [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_dup_variant = _rpythonic_function_(		"g_value_dup_variant", ctypes.POINTER(_GVariant), [
	("value",		ctypes.POINTER(_GValue)),] )

g_pointer_type_register_static = _rpythonic_function_(		"g_pointer_type_register_static", ctypes.c_ulong, [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_strdup_value_contents = _rpythonic_function_(		"g_strdup_value_contents", ctypes.POINTER(ctypes.c_char), [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_take_string = _rpythonic_function_(		"g_value_take_string", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_string",		ctypes.POINTER(ctypes.c_char)),] )

g_value_set_string_take_ownership = _rpythonic_function_(		"g_value_set_string_take_ownership", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_string",		ctypes.POINTER(ctypes.c_char)),] )

gst_object_flags_get_type = _rpythonic_function_(		"gst_object_flags_get_type", ctypes.c_ulong, [] )

gst_bin_flags_get_type = _rpythonic_function_(		"gst_bin_flags_get_type", ctypes.c_ulong, [] )

gst_buffer_flag_get_type = _rpythonic_function_(		"gst_buffer_flag_get_type", ctypes.c_ulong, [] )

gst_buffer_copy_flags_get_type = _rpythonic_function_(		"gst_buffer_copy_flags_get_type", ctypes.c_ulong, [] )

gst_buffer_list_item_get_type = _rpythonic_function_(		"gst_buffer_list_item_get_type", ctypes.c_ulong, [] )

gst_bus_flags_get_type = _rpythonic_function_(		"gst_bus_flags_get_type", ctypes.c_ulong, [] )

gst_bus_sync_reply_get_type = _rpythonic_function_(		"gst_bus_sync_reply_get_type", ctypes.c_ulong, [] )

gst_caps_flags_get_type = _rpythonic_function_(		"gst_caps_flags_get_type", ctypes.c_ulong, [] )

gst_caps_intersect_mode_get_type = _rpythonic_function_(		"gst_caps_intersect_mode_get_type", ctypes.c_ulong, [] )

gst_clock_return_get_type = _rpythonic_function_(		"gst_clock_return_get_type", ctypes.c_ulong, [] )

gst_clock_entry_type_get_type = _rpythonic_function_(		"gst_clock_entry_type_get_type", ctypes.c_ulong, [] )

gst_clock_flags_get_type = _rpythonic_function_(		"gst_clock_flags_get_type", ctypes.c_ulong, [] )

gst_debug_graph_details_get_type = _rpythonic_function_(		"gst_debug_graph_details_get_type", ctypes.c_ulong, [] )

gst_state_get_type = _rpythonic_function_(		"gst_state_get_type", ctypes.c_ulong, [] )

gst_state_change_return_get_type = _rpythonic_function_(		"gst_state_change_return_get_type", ctypes.c_ulong, [] )

gst_state_change_get_type = _rpythonic_function_(		"gst_state_change_get_type", ctypes.c_ulong, [] )

gst_element_flags_get_type = _rpythonic_function_(		"gst_element_flags_get_type", ctypes.c_ulong, [] )

gst_core_error_get_type = _rpythonic_function_(		"gst_core_error_get_type", ctypes.c_ulong, [] )

gst_library_error_get_type = _rpythonic_function_(		"gst_library_error_get_type", ctypes.c_ulong, [] )

gst_resource_error_get_type = _rpythonic_function_(		"gst_resource_error_get_type", ctypes.c_ulong, [] )

gst_stream_error_get_type = _rpythonic_function_(		"gst_stream_error_get_type", ctypes.c_ulong, [] )

gst_event_type_flags_get_type = _rpythonic_function_(		"gst_event_type_flags_get_type", ctypes.c_ulong, [] )

gst_event_type_get_type = _rpythonic_function_(		"gst_event_type_get_type", ctypes.c_ulong, [] )

gst_seek_type_get_type = _rpythonic_function_(		"gst_seek_type_get_type", ctypes.c_ulong, [] )

gst_seek_flags_get_type = _rpythonic_function_(		"gst_seek_flags_get_type", ctypes.c_ulong, [] )

gst_qos_type_get_type = _rpythonic_function_(		"gst_qos_type_get_type", ctypes.c_ulong, [] )

gst_format_get_type = _rpythonic_function_(		"gst_format_get_type", ctypes.c_ulong, [] )

gst_index_certainty_get_type = _rpythonic_function_(		"gst_index_certainty_get_type", ctypes.c_ulong, [] )

gst_index_entry_type_get_type = _rpythonic_function_(		"gst_index_entry_type_get_type", ctypes.c_ulong, [] )

gst_index_lookup_method_get_type = _rpythonic_function_(		"gst_index_lookup_method_get_type", ctypes.c_ulong, [] )

gst_assoc_flags_get_type = _rpythonic_function_(		"gst_assoc_flags_get_type", ctypes.c_ulong, [] )

gst_index_resolver_method_get_type = _rpythonic_function_(		"gst_index_resolver_method_get_type", ctypes.c_ulong, [] )

gst_index_flags_get_type = _rpythonic_function_(		"gst_index_flags_get_type", ctypes.c_ulong, [] )

gst_debug_level_get_type = _rpythonic_function_(		"gst_debug_level_get_type", ctypes.c_ulong, [] )

gst_debug_color_flags_get_type = _rpythonic_function_(		"gst_debug_color_flags_get_type", ctypes.c_ulong, [] )

gst_iterator_result_get_type = _rpythonic_function_(		"gst_iterator_result_get_type", ctypes.c_ulong, [] )

gst_iterator_item_get_type = _rpythonic_function_(		"gst_iterator_item_get_type", ctypes.c_ulong, [] )

gst_message_type_get_type = _rpythonic_function_(		"gst_message_type_get_type", ctypes.c_ulong, [] )

gst_structure_change_type_get_type = _rpythonic_function_(		"gst_structure_change_type_get_type", ctypes.c_ulong, [] )

gst_stream_status_type_get_type = _rpythonic_function_(		"gst_stream_status_type_get_type", ctypes.c_ulong, [] )

gst_progress_type_get_type = _rpythonic_function_(		"gst_progress_type_get_type", ctypes.c_ulong, [] )

gst_mini_object_flags_get_type = _rpythonic_function_(		"gst_mini_object_flags_get_type", ctypes.c_ulong, [] )

gst_pad_link_return_get_type = _rpythonic_function_(		"gst_pad_link_return_get_type", ctypes.c_ulong, [] )

gst_flow_return_get_type = _rpythonic_function_(		"gst_flow_return_get_type", ctypes.c_ulong, [] )

gst_pad_link_check_get_type = _rpythonic_function_(		"gst_pad_link_check_get_type", ctypes.c_ulong, [] )

gst_activate_mode_get_type = _rpythonic_function_(		"gst_activate_mode_get_type", ctypes.c_ulong, [] )

gst_pad_direction_get_type = _rpythonic_function_(		"gst_pad_direction_get_type", ctypes.c_ulong, [] )

gst_pad_flags_get_type = _rpythonic_function_(		"gst_pad_flags_get_type", ctypes.c_ulong, [] )

gst_pad_presence_get_type = _rpythonic_function_(		"gst_pad_presence_get_type", ctypes.c_ulong, [] )

gst_pad_template_flags_get_type = _rpythonic_function_(		"gst_pad_template_flags_get_type", ctypes.c_ulong, [] )

gst_pipeline_flags_get_type = _rpythonic_function_(		"gst_pipeline_flags_get_type", ctypes.c_ulong, [] )

gst_plugin_error_get_type = _rpythonic_function_(		"gst_plugin_error_get_type", ctypes.c_ulong, [] )

gst_plugin_flags_get_type = _rpythonic_function_(		"gst_plugin_flags_get_type", ctypes.c_ulong, [] )

gst_plugin_dependency_flags_get_type = _rpythonic_function_(		"gst_plugin_dependency_flags_get_type", ctypes.c_ulong, [] )

gst_rank_get_type = _rpythonic_function_(		"gst_rank_get_type", ctypes.c_ulong, [] )

gst_query_type_get_type = _rpythonic_function_(		"gst_query_type_get_type", ctypes.c_ulong, [] )

gst_buffering_mode_get_type = _rpythonic_function_(		"gst_buffering_mode_get_type", ctypes.c_ulong, [] )

gst_clock_type_get_type = _rpythonic_function_(		"gst_clock_type_get_type", ctypes.c_ulong, [] )

gst_tag_merge_mode_get_type = _rpythonic_function_(		"gst_tag_merge_mode_get_type", ctypes.c_ulong, [] )

gst_tag_flag_get_type = _rpythonic_function_(		"gst_tag_flag_get_type", ctypes.c_ulong, [] )

gst_task_state_get_type = _rpythonic_function_(		"gst_task_state_get_type", ctypes.c_ulong, [] )

gst_alloc_trace_flags_get_type = _rpythonic_function_(		"gst_alloc_trace_flags_get_type", ctypes.c_ulong, [] )

gst_type_find_probability_get_type = _rpythonic_function_(		"gst_type_find_probability_get_type", ctypes.c_ulong, [] )

gst_uri_type_get_type = _rpythonic_function_(		"gst_uri_type_get_type", ctypes.c_ulong, [] )

gst_search_mode_get_type = _rpythonic_function_(		"gst_search_mode_get_type", ctypes.c_ulong, [] )

gst_parse_error_get_type = _rpythonic_function_(		"gst_parse_error_get_type", ctypes.c_ulong, [] )

gst_parse_flags_get_type = _rpythonic_function_(		"gst_parse_flags_get_type", ctypes.c_ulong, [] )

xmlCheckVersion = _rpythonic_function_(		"xmlCheckVersion", ctypes.c_void_p, [
	("version",		ctypes.c_int),] )

_IO_getc = _rpythonic_function_(		"_IO_getc", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_putc = _rpythonic_function_(		"_IO_putc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_feof = _rpythonic_function_(		"_IO_feof", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_ferror = _rpythonic_function_(		"_IO_ferror", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_peekc_locked = _rpythonic_function_(		"_IO_peekc_locked", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_flockfile = _rpythonic_function_(		"_IO_flockfile", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_IO_funlockfile = _rpythonic_function_(		"_IO_funlockfile", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_IO_ftrylockfile = _rpythonic_function_(		"_IO_ftrylockfile", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_IO_vfscanf = _rpythonic_function_(		"_IO_vfscanf", ctypes.c_int, [
	("__restrict",		ctypes.POINTER(_IO_FILE)),
	("__restrict",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_char),
	("__restrict",		ctypes.POINTER(ctypes.c_int)),] )

_IO_vfprintf = _rpythonic_function_(		"_IO_vfprintf", ctypes.c_int, [
	("__restrict",		ctypes.POINTER(_IO_FILE)),
	("__restrict",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_char),] )

_IO_padn = _rpythonic_function_(		"_IO_padn", ctypes.c_int64, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int64),] )

_IO_sgetn = _rpythonic_function_(		"_IO_sgetn", ctypes.c_uint64, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_uint64),] )

_IO_seekoff = _rpythonic_function_(		"_IO_seekoff", ctypes.c_int64, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int64),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

_IO_seekpos = _rpythonic_function_(		"_IO_seekpos", ctypes.c_int64, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int64),
	("none",		ctypes.c_int),] )

_IO_free_backup_area = _rpythonic_function_(		"_IO_free_backup_area", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

remove = _rpythonic_function_(		"remove", ctypes.c_int, [
	("__filename",		ctypes.POINTER(ctypes.c_char)),] )

rename = _rpythonic_function_(		"rename", ctypes.c_int, [
	("__old",		ctypes.POINTER(ctypes.c_char)),
	("__new",		ctypes.POINTER(ctypes.c_char)),] )

renameat = _rpythonic_function_(		"renameat", ctypes.c_int, [
	("__oldfd",		ctypes.c_int),
	("__old",		ctypes.POINTER(ctypes.c_char)),
	("__newfd",		ctypes.c_int),
	("__new",		ctypes.POINTER(ctypes.c_char)),] )

tmpfile = _rpythonic_function_(		"tmpfile", ctypes.POINTER(_IO_FILE), [] )

tmpnam = _rpythonic_function_(		"tmpnam", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

tmpnam_r = _rpythonic_function_(		"tmpnam_r", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

tempnam = _rpythonic_function_(		"tempnam", ctypes.POINTER(ctypes.c_char), [
	("__dir",		ctypes.POINTER(ctypes.c_char)),
	("__pfx",		ctypes.POINTER(ctypes.c_char)),] )

fclose = _rpythonic_function_(		"fclose", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fflush = _rpythonic_function_(		"fflush", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fflush_unlocked = _rpythonic_function_(		"fflush_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fopen = _rpythonic_function_(		"fopen", ctypes.POINTER(_IO_FILE), [
	("__filename",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

freopen = _rpythonic_function_(		"freopen", ctypes.POINTER(_IO_FILE), [
	("__filename",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.POINTER(ctypes.c_char)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fdopen = _rpythonic_function_(		"fdopen", ctypes.POINTER(_IO_FILE), [
	("__fd",		ctypes.c_int),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

fmemopen = _rpythonic_function_(		"fmemopen", ctypes.POINTER(_IO_FILE), [
	("__s",		ctypes.POINTER(ctypes.c_void_p)),
	("__len",		ctypes.c_uint64),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

open_memstream = _rpythonic_function_(		"open_memstream", ctypes.POINTER(_IO_FILE), [
	("__bufloc",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__sizeloc",		ctypes.POINTER(ctypes.c_uint64)),] )

setbuf = _rpythonic_function_(		"setbuf", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

setvbuf = _rpythonic_function_(		"setvbuf", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.c_int),
	("__n",		ctypes.c_uint64),] )

setbuffer = _rpythonic_function_(		"setbuffer", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__size",		ctypes.c_uint64),] )

setlinebuf = _rpythonic_function_(		"setlinebuf", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fprintf = _rpythonic_function_(		"fprintf", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

printf = _rpythonic_function_(		"printf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

sprintf = _rpythonic_function_(		"sprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

vfprintf = _rpythonic_function_(		"vfprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vprintf = _rpythonic_function_(		"vprintf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vsprintf = _rpythonic_function_(		"vsprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

snprintf = _rpythonic_function_(		"snprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__maxlen",		ctypes.c_uint64),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

vsnprintf = _rpythonic_function_(		"vsnprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__maxlen",		ctypes.c_uint64),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vdprintf = _rpythonic_function_(		"vdprintf", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__fmt",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

dprintf = _rpythonic_function_(		"dprintf", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__fmt",		ctypes.POINTER(ctypes.c_char)),] )

fscanf = _rpythonic_function_(		"fscanf", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

scanf = _rpythonic_function_(		"scanf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

sscanf = _rpythonic_function_(		"sscanf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

vfscanf = _rpythonic_function_(		"vfscanf", ctypes.c_int, [
	("__s",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vscanf = _rpythonic_function_(		"vscanf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vsscanf = _rpythonic_function_(		"vsscanf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

fgetc = _rpythonic_function_(		"fgetc", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getc = _rpythonic_function_(		"getc", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getchar = _rpythonic_function_(		"getchar", ctypes.c_int, [] )

getc_unlocked = _rpythonic_function_(		"getc_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getchar_unlocked = _rpythonic_function_(		"getchar_unlocked", ctypes.c_int, [] )

fgetc_unlocked = _rpythonic_function_(		"fgetc_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fputc = _rpythonic_function_(		"fputc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putc = _rpythonic_function_(		"putc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putchar = _rpythonic_function_(		"putchar", ctypes.c_int, [
	("__c",		ctypes.c_int),] )

fputc_unlocked = _rpythonic_function_(		"fputc_unlocked", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putc_unlocked = _rpythonic_function_(		"putc_unlocked", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putchar_unlocked = _rpythonic_function_(		"putchar_unlocked", ctypes.c_int, [
	("__c",		ctypes.c_int),] )

getw = _rpythonic_function_(		"getw", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putw = _rpythonic_function_(		"putw", ctypes.c_int, [
	("__w",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fgets = _rpythonic_function_(		"fgets", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

gets = _rpythonic_function_(		"gets", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

getdelim = _rpythonic_function_(		"getdelim", ctypes.c_int64, [
	("__lineptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__n",		ctypes.POINTER(ctypes.c_uint64)),
	("__delimiter",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getline = _rpythonic_function_(		"getline", ctypes.c_int64, [
	("__lineptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__n",		ctypes.POINTER(ctypes.c_uint64)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fputs = _rpythonic_function_(		"fputs", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

puts = _rpythonic_function_(		"puts", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

ungetc = _rpythonic_function_(		"ungetc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fread = _rpythonic_function_(		"fread", ctypes.c_uint64, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint64),
	("__n",		ctypes.c_uint64),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fwrite = _rpythonic_function_(		"fwrite", ctypes.c_uint64, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint64),
	("__n",		ctypes.c_uint64),
	("__s",		ctypes.POINTER(_IO_FILE)),] )

fread_unlocked = _rpythonic_function_(		"fread_unlocked", ctypes.c_uint64, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint64),
	("__n",		ctypes.c_uint64),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fwrite_unlocked = _rpythonic_function_(		"fwrite_unlocked", ctypes.c_uint64, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint64),
	("__n",		ctypes.c_uint64),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fseek = _rpythonic_function_(		"fseek", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__off",		ctypes.c_int64),
	("__whence",		ctypes.c_int),] )

ftell = _rpythonic_function_(		"ftell", ctypes.c_int64, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

rewind = _rpythonic_function_(		"rewind", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fseeko = _rpythonic_function_(		"fseeko", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__off",		ctypes.c_int64),
	("__whence",		ctypes.c_int),] )

ftello = _rpythonic_function_(		"ftello", ctypes.c_int64, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fgetpos = _rpythonic_function_(		"fgetpos", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__pos",		ctypes.POINTER(_G_fpos_t)),] )

fsetpos = _rpythonic_function_(		"fsetpos", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__pos",		ctypes.POINTER(_G_fpos_t)),] )

clearerr = _rpythonic_function_(		"clearerr", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

feof = _rpythonic_function_(		"feof", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ferror = _rpythonic_function_(		"ferror", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

clearerr_unlocked = _rpythonic_function_(		"clearerr_unlocked", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

feof_unlocked = _rpythonic_function_(		"feof_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ferror_unlocked = _rpythonic_function_(		"ferror_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

perror = _rpythonic_function_(		"perror", ctypes.c_void_p, [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

fileno = _rpythonic_function_(		"fileno", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fileno_unlocked = _rpythonic_function_(		"fileno_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

popen = _rpythonic_function_(		"popen", ctypes.POINTER(_IO_FILE), [
	("__command",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

pclose = _rpythonic_function_(		"pclose", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ctermid = _rpythonic_function_(		"ctermid", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

flockfile = _rpythonic_function_(		"flockfile", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ftrylockfile = _rpythonic_function_(		"ftrylockfile", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

funlockfile = _rpythonic_function_(		"funlockfile", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

xmlStrdup = _rpythonic_function_(		"xmlStrdup", ctypes.POINTER(ctypes.c_ubyte), [
	("cur",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlStrndup = _rpythonic_function_(		"xmlStrndup", ctypes.POINTER(ctypes.c_ubyte), [
	("cur",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlCharStrndup = _rpythonic_function_(		"xmlCharStrndup", ctypes.POINTER(ctypes.c_ubyte), [
	("cur",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

xmlCharStrdup = _rpythonic_function_(		"xmlCharStrdup", ctypes.POINTER(ctypes.c_ubyte), [
	("cur",		ctypes.POINTER(ctypes.c_char)),] )

xmlStrsub = _rpythonic_function_(		"xmlStrsub", ctypes.POINTER(ctypes.c_ubyte), [
	("C_str",		ctypes.POINTER(ctypes.c_ubyte)),
	("start",		ctypes.c_int),
	("C_len",		ctypes.c_int),] )

xmlStrchr = _rpythonic_function_(		"xmlStrchr", ctypes.POINTER(ctypes.c_ubyte), [
	("C_str",		ctypes.POINTER(ctypes.c_ubyte)),
	("val",		ctypes.c_ubyte),] )

xmlStrstr = _rpythonic_function_(		"xmlStrstr", ctypes.POINTER(ctypes.c_ubyte), [
	("C_str",		ctypes.POINTER(ctypes.c_ubyte)),
	("val",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlStrcasestr = _rpythonic_function_(		"xmlStrcasestr", ctypes.POINTER(ctypes.c_ubyte), [
	("C_str",		ctypes.POINTER(ctypes.c_ubyte)),
	("val",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlStrcmp = _rpythonic_function_(		"xmlStrcmp", ctypes.c_int, [
	("str1",		ctypes.POINTER(ctypes.c_ubyte)),
	("str2",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlStrncmp = _rpythonic_function_(		"xmlStrncmp", ctypes.c_int, [
	("str1",		ctypes.POINTER(ctypes.c_ubyte)),
	("str2",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlStrcasecmp = _rpythonic_function_(		"xmlStrcasecmp", ctypes.c_int, [
	("str1",		ctypes.POINTER(ctypes.c_ubyte)),
	("str2",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlStrncasecmp = _rpythonic_function_(		"xmlStrncasecmp", ctypes.c_int, [
	("str1",		ctypes.POINTER(ctypes.c_ubyte)),
	("str2",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlStrEqual = _rpythonic_function_(		"xmlStrEqual", ctypes.c_int, [
	("str1",		ctypes.POINTER(ctypes.c_ubyte)),
	("str2",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlStrQEqual = _rpythonic_function_(		"xmlStrQEqual", ctypes.c_int, [
	("pref",		ctypes.POINTER(ctypes.c_ubyte)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_str",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlStrlen = _rpythonic_function_(		"xmlStrlen", ctypes.c_int, [
	("C_str",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlStrcat = _rpythonic_function_(		"xmlStrcat", ctypes.POINTER(ctypes.c_ubyte), [
	("cur",		ctypes.POINTER(ctypes.c_ubyte)),
	("add",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlStrncat = _rpythonic_function_(		"xmlStrncat", ctypes.POINTER(ctypes.c_ubyte), [
	("cur",		ctypes.POINTER(ctypes.c_ubyte)),
	("add",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlStrncatNew = _rpythonic_function_(		"xmlStrncatNew", ctypes.POINTER(ctypes.c_ubyte), [
	("str1",		ctypes.POINTER(ctypes.c_ubyte)),
	("str2",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlStrPrintf = _rpythonic_function_(		"xmlStrPrintf", ctypes.c_int, [
	("buf",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),
	("msg",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlStrVPrintf = _rpythonic_function_(		"xmlStrVPrintf", ctypes.c_int, [
	("buf",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),
	("msg",		ctypes.POINTER(ctypes.c_ubyte)),
	("ap",		ctypes.c_char),] )

xmlGetUTF8Char = _rpythonic_function_(		"xmlGetUTF8Char", ctypes.c_int, [
	("utf",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.POINTER(ctypes.c_int)),] )

xmlCheckUTF8 = _rpythonic_function_(		"xmlCheckUTF8", ctypes.c_int, [
	("utf",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlUTF8Strsize = _rpythonic_function_(		"xmlUTF8Strsize", ctypes.c_int, [
	("utf",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlUTF8Strndup = _rpythonic_function_(		"xmlUTF8Strndup", ctypes.POINTER(ctypes.c_ubyte), [
	("utf",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlUTF8Strpos = _rpythonic_function_(		"xmlUTF8Strpos", ctypes.POINTER(ctypes.c_ubyte), [
	("utf",		ctypes.POINTER(ctypes.c_ubyte)),
	("pos",		ctypes.c_int),] )

xmlUTF8Strloc = _rpythonic_function_(		"xmlUTF8Strloc", ctypes.c_int, [
	("utf",		ctypes.POINTER(ctypes.c_ubyte)),
	("utfchar",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlUTF8Strsub = _rpythonic_function_(		"xmlUTF8Strsub", ctypes.POINTER(ctypes.c_ubyte), [
	("utf",		ctypes.POINTER(ctypes.c_ubyte)),
	("start",		ctypes.c_int),
	("C_len",		ctypes.c_int),] )

xmlUTF8Strlen = _rpythonic_function_(		"xmlUTF8Strlen", ctypes.c_int, [
	("utf",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlUTF8Size = _rpythonic_function_(		"xmlUTF8Size", ctypes.c_int, [
	("utf",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlUTF8Charcmp = _rpythonic_function_(		"xmlUTF8Charcmp", ctypes.c_int, [
	("utf1",		ctypes.POINTER(ctypes.c_ubyte)),
	("utf2",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlDictCreate = _rpythonic_function_(		"xmlDictCreate", ctypes.POINTER(_xmlDict), [] )

xmlDictCreateSub = _rpythonic_function_(		"xmlDictCreateSub", ctypes.POINTER(_xmlDict), [
	("sub",		ctypes.POINTER(_xmlDict)),] )

xmlDictReference = _rpythonic_function_(		"xmlDictReference", ctypes.c_int, [
	("C_dict",		ctypes.POINTER(_xmlDict)),] )

xmlDictFree = _rpythonic_function_(		"xmlDictFree", ctypes.c_void_p, [
	("C_dict",		ctypes.POINTER(_xmlDict)),] )

xmlDictLookup = _rpythonic_function_(		"xmlDictLookup", ctypes.POINTER(ctypes.c_ubyte), [
	("C_dict",		ctypes.POINTER(_xmlDict)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlDictExists = _rpythonic_function_(		"xmlDictExists", ctypes.POINTER(ctypes.c_ubyte), [
	("C_dict",		ctypes.POINTER(_xmlDict)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlDictQLookup = _rpythonic_function_(		"xmlDictQLookup", ctypes.POINTER(ctypes.c_ubyte), [
	("C_dict",		ctypes.POINTER(_xmlDict)),
	("prefix",		ctypes.POINTER(ctypes.c_ubyte)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlDictOwns = _rpythonic_function_(		"xmlDictOwns", ctypes.c_int, [
	("C_dict",		ctypes.POINTER(_xmlDict)),
	("C_str",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlDictSize = _rpythonic_function_(		"xmlDictSize", ctypes.c_int, [
	("C_dict",		ctypes.POINTER(_xmlDict)),] )

xmlDictCleanup = _rpythonic_function_(		"xmlDictCleanup", ctypes.c_void_p, [] )

xmlRegexpCompile = _rpythonic_function_(		"xmlRegexpCompile", ctypes.POINTER(_xmlRegexp), [
	("regexp",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlRegFreeRegexp = _rpythonic_function_(		"xmlRegFreeRegexp", ctypes.c_void_p, [
	("regexp",		ctypes.POINTER(_xmlRegexp)),] )

xmlRegexpExec = _rpythonic_function_(		"xmlRegexpExec", ctypes.c_int, [
	("comp",		ctypes.POINTER(_xmlRegexp)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlRegexpPrint = _rpythonic_function_(		"xmlRegexpPrint", ctypes.c_void_p, [
	("output",		ctypes.POINTER(_IO_FILE)),
	("regexp",		ctypes.POINTER(_xmlRegexp)),] )

xmlRegexpIsDeterminist = _rpythonic_function_(		"xmlRegexpIsDeterminist", ctypes.c_int, [
	("comp",		ctypes.POINTER(_xmlRegexp)),] )

xmlRegExecCallbacks = _rpythonic_function_(		"xmlRegExecCallbacks", ctypes.c_void_p, [
	("C_exec",		ctypes.POINTER(_xmlRegExecCtxt)),
	("token",		ctypes.POINTER(ctypes.c_ubyte)),
	("transdata",		ctypes.POINTER(ctypes.c_void_p)),
	("inputdata",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlRegNewExecCtxt = _rpythonic_function_(		"xmlRegNewExecCtxt", ctypes.POINTER(_xmlRegExecCtxt), [
	("comp",		ctypes.POINTER(_xmlRegexp)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_xmlRegExecCtxt),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlRegFreeExecCtxt = _rpythonic_function_(		"xmlRegFreeExecCtxt", ctypes.c_void_p, [
	("C_exec",		ctypes.POINTER(_xmlRegExecCtxt)),] )

xmlRegExecPushString = _rpythonic_function_(		"xmlRegExecPushString", ctypes.c_int, [
	("C_exec",		ctypes.POINTER(_xmlRegExecCtxt)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlRegExecPushString2 = _rpythonic_function_(		"xmlRegExecPushString2", ctypes.c_int, [
	("C_exec",		ctypes.POINTER(_xmlRegExecCtxt)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),
	("value2",		ctypes.POINTER(ctypes.c_ubyte)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlRegExecNextValues = _rpythonic_function_(		"xmlRegExecNextValues", ctypes.c_int, [
	("C_exec",		ctypes.POINTER(_xmlRegExecCtxt)),
	("nbval",		ctypes.POINTER(ctypes.c_int)),
	("nbneg",		ctypes.POINTER(ctypes.c_int)),
	("values",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("terminal",		ctypes.POINTER(ctypes.c_int)),] )

xmlRegExecErrInfo = _rpythonic_function_(		"xmlRegExecErrInfo", ctypes.c_int, [
	("C_exec",		ctypes.POINTER(_xmlRegExecCtxt)),
	("string",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("nbval",		ctypes.POINTER(ctypes.c_int)),
	("nbneg",		ctypes.POINTER(ctypes.c_int)),
	("values",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("terminal",		ctypes.POINTER(ctypes.c_int)),] )

xmlExpFreeCtxt = _rpythonic_function_(		"xmlExpFreeCtxt", ctypes.c_void_p, [
	("ctxt",		ctypes.POINTER(_xmlExpCtxt)),] )

xmlExpNewCtxt = _rpythonic_function_(		"xmlExpNewCtxt", ctypes.POINTER(_xmlExpCtxt), [
	("maxNodes",		ctypes.c_int),
	("C_dict",		ctypes.POINTER(_xmlDict)),] )

xmlExpCtxtNbNodes = _rpythonic_function_(		"xmlExpCtxtNbNodes", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlExpCtxt)),] )

xmlExpCtxtNbCons = _rpythonic_function_(		"xmlExpCtxtNbCons", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlExpCtxt)),] )

xmlExpFree = _rpythonic_function_(		"xmlExpFree", ctypes.c_void_p, [
	("ctxt",		ctypes.POINTER(_xmlExpCtxt)),
	("expr",		ctypes.POINTER(_xmlExpNode)),] )

xmlExpRef = _rpythonic_function_(		"xmlExpRef", ctypes.c_void_p, [
	("expr",		ctypes.POINTER(_xmlExpNode)),] )

xmlExpParse = _rpythonic_function_(		"xmlExpParse", ctypes.POINTER(_xmlExpNode), [
	("ctxt",		ctypes.POINTER(_xmlExpCtxt)),
	("expr",		ctypes.POINTER(ctypes.c_char)),] )

xmlExpNewAtom = _rpythonic_function_(		"xmlExpNewAtom", ctypes.POINTER(_xmlExpNode), [
	("ctxt",		ctypes.POINTER(_xmlExpCtxt)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlExpNewOr = _rpythonic_function_(		"xmlExpNewOr", ctypes.POINTER(_xmlExpNode), [
	("ctxt",		ctypes.POINTER(_xmlExpCtxt)),
	("left",		ctypes.POINTER(_xmlExpNode)),
	("right",		ctypes.POINTER(_xmlExpNode)),] )

xmlExpNewSeq = _rpythonic_function_(		"xmlExpNewSeq", ctypes.POINTER(_xmlExpNode), [
	("ctxt",		ctypes.POINTER(_xmlExpCtxt)),
	("left",		ctypes.POINTER(_xmlExpNode)),
	("right",		ctypes.POINTER(_xmlExpNode)),] )

xmlExpNewRange = _rpythonic_function_(		"xmlExpNewRange", ctypes.POINTER(_xmlExpNode), [
	("ctxt",		ctypes.POINTER(_xmlExpCtxt)),
	("subset",		ctypes.POINTER(_xmlExpNode)),
	("min",		ctypes.c_int),
	("max",		ctypes.c_int),] )

xmlExpIsNillable = _rpythonic_function_(		"xmlExpIsNillable", ctypes.c_int, [
	("expr",		ctypes.POINTER(_xmlExpNode)),] )

xmlExpMaxToken = _rpythonic_function_(		"xmlExpMaxToken", ctypes.c_int, [
	("expr",		ctypes.POINTER(_xmlExpNode)),] )

xmlExpGetLanguage = _rpythonic_function_(		"xmlExpGetLanguage", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlExpCtxt)),
	("expr",		ctypes.POINTER(_xmlExpNode)),
	("langList",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("C_len",		ctypes.c_int),] )

xmlExpGetStart = _rpythonic_function_(		"xmlExpGetStart", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlExpCtxt)),
	("expr",		ctypes.POINTER(_xmlExpNode)),
	("tokList",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("C_len",		ctypes.c_int),] )

xmlExpStringDerive = _rpythonic_function_(		"xmlExpStringDerive", ctypes.POINTER(_xmlExpNode), [
	("ctxt",		ctypes.POINTER(_xmlExpCtxt)),
	("expr",		ctypes.POINTER(_xmlExpNode)),
	("C_str",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlExpExpDerive = _rpythonic_function_(		"xmlExpExpDerive", ctypes.POINTER(_xmlExpNode), [
	("ctxt",		ctypes.POINTER(_xmlExpCtxt)),
	("expr",		ctypes.POINTER(_xmlExpNode)),
	("sub",		ctypes.POINTER(_xmlExpNode)),] )

xmlExpSubsume = _rpythonic_function_(		"xmlExpSubsume", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlExpCtxt)),
	("expr",		ctypes.POINTER(_xmlExpNode)),
	("sub",		ctypes.POINTER(_xmlExpNode)),] )

xmlExpDump = _rpythonic_function_(		"xmlExpDump", ctypes.c_void_p, [
	("buf",		ctypes.POINTER(_xmlBuffer)),
	("expr",		ctypes.POINTER(_xmlExpNode)),] )

xmlDOMWrapAcquireNsFunction = _rpythonic_function_(		"xmlDOMWrapAcquireNsFunction", ctypes.POINTER(_xmlNs), [
	("ctxt",		ctypes.POINTER(_xmlDOMWrapCtxt)),
	("node",		ctypes.POINTER(_xmlNode)),
	("nsName",		ctypes.POINTER(ctypes.c_ubyte)),
	("nsPrefix",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlValidateNCName = _rpythonic_function_(		"xmlValidateNCName", ctypes.c_int, [
	("value",		ctypes.POINTER(ctypes.c_ubyte)),
	("space",		ctypes.c_int),] )

xmlValidateQName = _rpythonic_function_(		"xmlValidateQName", ctypes.c_int, [
	("value",		ctypes.POINTER(ctypes.c_ubyte)),
	("space",		ctypes.c_int),] )

xmlValidateName = _rpythonic_function_(		"xmlValidateName", ctypes.c_int, [
	("value",		ctypes.POINTER(ctypes.c_ubyte)),
	("space",		ctypes.c_int),] )

xmlValidateNMToken = _rpythonic_function_(		"xmlValidateNMToken", ctypes.c_int, [
	("value",		ctypes.POINTER(ctypes.c_ubyte)),
	("space",		ctypes.c_int),] )

xmlBuildQName = _rpythonic_function_(		"xmlBuildQName", ctypes.POINTER(ctypes.c_ubyte), [
	("ncname",		ctypes.POINTER(ctypes.c_ubyte)),
	("prefix",		ctypes.POINTER(ctypes.c_ubyte)),
	("memory",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlSplitQName2 = _rpythonic_function_(		"xmlSplitQName2", ctypes.POINTER(ctypes.c_ubyte), [
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("prefix",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),] )

xmlSplitQName3 = _rpythonic_function_(		"xmlSplitQName3", ctypes.POINTER(ctypes.c_ubyte), [
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.POINTER(ctypes.c_int)),] )

xmlSetBufferAllocationScheme = _rpythonic_function_(		"xmlSetBufferAllocationScheme", ctypes.c_void_p, [
	("scheme",		ctypes.c_int),] )

xmlGetBufferAllocationScheme = _rpythonic_function_(		"xmlGetBufferAllocationScheme", ctypes.c_int, [] )

xmlBufferCreate = _rpythonic_function_(		"xmlBufferCreate", ctypes.POINTER(_xmlBuffer), [] )

xmlBufferCreateSize = _rpythonic_function_(		"xmlBufferCreateSize", ctypes.POINTER(_xmlBuffer), [
	("size",		ctypes.c_uint64),] )

xmlBufferCreateStatic = _rpythonic_function_(		"xmlBufferCreateStatic", ctypes.POINTER(_xmlBuffer), [
	("mem",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.c_uint64),] )

xmlBufferResize = _rpythonic_function_(		"xmlBufferResize", ctypes.c_int, [
	("buf",		ctypes.POINTER(_xmlBuffer)),
	("size",		ctypes.c_uint),] )

xmlBufferFree = _rpythonic_function_(		"xmlBufferFree", ctypes.c_void_p, [
	("buf",		ctypes.POINTER(_xmlBuffer)),] )

xmlBufferDump = _rpythonic_function_(		"xmlBufferDump", ctypes.c_int, [
	("file",		ctypes.POINTER(_IO_FILE)),
	("buf",		ctypes.POINTER(_xmlBuffer)),] )

xmlBufferAdd = _rpythonic_function_(		"xmlBufferAdd", ctypes.c_int, [
	("buf",		ctypes.POINTER(_xmlBuffer)),
	("C_str",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlBufferAddHead = _rpythonic_function_(		"xmlBufferAddHead", ctypes.c_int, [
	("buf",		ctypes.POINTER(_xmlBuffer)),
	("C_str",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlBufferCat = _rpythonic_function_(		"xmlBufferCat", ctypes.c_int, [
	("buf",		ctypes.POINTER(_xmlBuffer)),
	("C_str",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlBufferCCat = _rpythonic_function_(		"xmlBufferCCat", ctypes.c_int, [
	("buf",		ctypes.POINTER(_xmlBuffer)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

xmlBufferShrink = _rpythonic_function_(		"xmlBufferShrink", ctypes.c_int, [
	("buf",		ctypes.POINTER(_xmlBuffer)),
	("C_len",		ctypes.c_uint),] )

xmlBufferGrow = _rpythonic_function_(		"xmlBufferGrow", ctypes.c_int, [
	("buf",		ctypes.POINTER(_xmlBuffer)),
	("C_len",		ctypes.c_uint),] )

xmlBufferEmpty = _rpythonic_function_(		"xmlBufferEmpty", ctypes.c_void_p, [
	("buf",		ctypes.POINTER(_xmlBuffer)),] )

xmlBufferContent = _rpythonic_function_(		"xmlBufferContent", ctypes.POINTER(ctypes.c_ubyte), [
	("buf",		ctypes.POINTER(_xmlBuffer)),] )

xmlBufferSetAllocationScheme = _rpythonic_function_(		"xmlBufferSetAllocationScheme", ctypes.c_void_p, [
	("buf",		ctypes.POINTER(_xmlBuffer)),
	("scheme",		ctypes.c_int),] )

xmlBufferLength = _rpythonic_function_(		"xmlBufferLength", ctypes.c_int, [
	("buf",		ctypes.POINTER(_xmlBuffer)),] )

xmlCreateIntSubset = _rpythonic_function_(		"xmlCreateIntSubset", ctypes.POINTER(_xmlDtd), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("ExternalID",		ctypes.POINTER(ctypes.c_ubyte)),
	("SystemID",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlNewDtd = _rpythonic_function_(		"xmlNewDtd", ctypes.POINTER(_xmlDtd), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("ExternalID",		ctypes.POINTER(ctypes.c_ubyte)),
	("SystemID",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlGetIntSubset = _rpythonic_function_(		"xmlGetIntSubset", ctypes.POINTER(_xmlDtd), [
	("doc",		ctypes.POINTER(_xmlDoc)),] )

xmlFreeDtd = _rpythonic_function_(		"xmlFreeDtd", ctypes.c_void_p, [
	("cur",		ctypes.POINTER(_xmlDtd)),] )

xmlNewGlobalNs = _rpythonic_function_(		"xmlNewGlobalNs", ctypes.POINTER(_xmlNs), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("href",		ctypes.POINTER(ctypes.c_ubyte)),
	("prefix",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlNewNs = _rpythonic_function_(		"xmlNewNs", ctypes.POINTER(_xmlNs), [
	("node",		ctypes.POINTER(_xmlNode)),
	("href",		ctypes.POINTER(ctypes.c_ubyte)),
	("prefix",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlFreeNs = _rpythonic_function_(		"xmlFreeNs", ctypes.c_void_p, [
	("cur",		ctypes.POINTER(_xmlNs)),] )

xmlFreeNsList = _rpythonic_function_(		"xmlFreeNsList", ctypes.c_void_p, [
	("cur",		ctypes.POINTER(_xmlNs)),] )

xmlNewDoc = _rpythonic_function_(		"xmlNewDoc", ctypes.POINTER(_xmlDoc), [
	("version",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlFreeDoc = _rpythonic_function_(		"xmlFreeDoc", ctypes.c_void_p, [
	("cur",		ctypes.POINTER(_xmlDoc)),] )

xmlNewDocProp = _rpythonic_function_(		"xmlNewDocProp", ctypes.POINTER(_xmlAttr), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlNewProp = _rpythonic_function_(		"xmlNewProp", ctypes.POINTER(_xmlAttr), [
	("node",		ctypes.POINTER(_xmlNode)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlNewNsProp = _rpythonic_function_(		"xmlNewNsProp", ctypes.POINTER(_xmlAttr), [
	("node",		ctypes.POINTER(_xmlNode)),
	("ns",		ctypes.POINTER(_xmlNs)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlNewNsPropEatName = _rpythonic_function_(		"xmlNewNsPropEatName", ctypes.POINTER(_xmlAttr), [
	("node",		ctypes.POINTER(_xmlNode)),
	("ns",		ctypes.POINTER(_xmlNs)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlFreePropList = _rpythonic_function_(		"xmlFreePropList", ctypes.c_void_p, [
	("cur",		ctypes.POINTER(_xmlAttr)),] )

xmlFreeProp = _rpythonic_function_(		"xmlFreeProp", ctypes.c_void_p, [
	("cur",		ctypes.POINTER(_xmlAttr)),] )

xmlCopyProp = _rpythonic_function_(		"xmlCopyProp", ctypes.POINTER(_xmlAttr), [
	("target",		ctypes.POINTER(_xmlNode)),
	("cur",		ctypes.POINTER(_xmlAttr)),] )

xmlCopyPropList = _rpythonic_function_(		"xmlCopyPropList", ctypes.POINTER(_xmlAttr), [
	("target",		ctypes.POINTER(_xmlNode)),
	("cur",		ctypes.POINTER(_xmlAttr)),] )

xmlCopyDtd = _rpythonic_function_(		"xmlCopyDtd", ctypes.POINTER(_xmlDtd), [
	("dtd",		ctypes.POINTER(_xmlDtd)),] )

xmlCopyDoc = _rpythonic_function_(		"xmlCopyDoc", ctypes.POINTER(_xmlDoc), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("recursive",		ctypes.c_int),] )

xmlNewDocNode = _rpythonic_function_(		"xmlNewDocNode", ctypes.POINTER(_xmlNode), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("ns",		ctypes.POINTER(_xmlNs)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("content",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlNewDocNodeEatName = _rpythonic_function_(		"xmlNewDocNodeEatName", ctypes.POINTER(_xmlNode), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("ns",		ctypes.POINTER(_xmlNs)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("content",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlNewNode = _rpythonic_function_(		"xmlNewNode", ctypes.POINTER(_xmlNode), [
	("ns",		ctypes.POINTER(_xmlNs)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlNewNodeEatName = _rpythonic_function_(		"xmlNewNodeEatName", ctypes.POINTER(_xmlNode), [
	("ns",		ctypes.POINTER(_xmlNs)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlNewChild = _rpythonic_function_(		"xmlNewChild", ctypes.POINTER(_xmlNode), [
	("parent",		ctypes.POINTER(_xmlNode)),
	("ns",		ctypes.POINTER(_xmlNs)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("content",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlNewDocText = _rpythonic_function_(		"xmlNewDocText", ctypes.POINTER(_xmlNode), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("content",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlNewText = _rpythonic_function_(		"xmlNewText", ctypes.POINTER(_xmlNode), [
	("content",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlNewDocPI = _rpythonic_function_(		"xmlNewDocPI", ctypes.POINTER(_xmlNode), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("content",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlNewPI = _rpythonic_function_(		"xmlNewPI", ctypes.POINTER(_xmlNode), [
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("content",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlNewDocTextLen = _rpythonic_function_(		"xmlNewDocTextLen", ctypes.POINTER(_xmlNode), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("content",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlNewTextLen = _rpythonic_function_(		"xmlNewTextLen", ctypes.POINTER(_xmlNode), [
	("content",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlNewDocComment = _rpythonic_function_(		"xmlNewDocComment", ctypes.POINTER(_xmlNode), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("content",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlNewComment = _rpythonic_function_(		"xmlNewComment", ctypes.POINTER(_xmlNode), [
	("content",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlNewCDataBlock = _rpythonic_function_(		"xmlNewCDataBlock", ctypes.POINTER(_xmlNode), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("content",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlCopyNodeList = _rpythonic_function_(		"xmlCopyNodeList", ctypes.POINTER(_xmlNode), [
	("node",		ctypes.POINTER(_xmlNode)),] )

xmlNewTextChild = _rpythonic_function_(		"xmlNewTextChild", ctypes.POINTER(_xmlNode), [
	("parent",		ctypes.POINTER(_xmlNode)),
	("ns",		ctypes.POINTER(_xmlNs)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("content",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlNewDocRawNode = _rpythonic_function_(		"xmlNewDocRawNode", ctypes.POINTER(_xmlNode), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("ns",		ctypes.POINTER(_xmlNs)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("content",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlNewDocFragment = _rpythonic_function_(		"xmlNewDocFragment", ctypes.POINTER(_xmlNode), [
	("doc",		ctypes.POINTER(_xmlDoc)),] )

xmlGetLineNo = _rpythonic_function_(		"xmlGetLineNo", ctypes.c_long, [
	("node",		ctypes.POINTER(_xmlNode)),] )

xmlNewCharRef = _rpythonic_function_(		"xmlNewCharRef", ctypes.POINTER(_xmlNode), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlNewReference = _rpythonic_function_(		"xmlNewReference", ctypes.POINTER(_xmlNode), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlCopyNode = _rpythonic_function_(		"xmlCopyNode", ctypes.POINTER(_xmlNode), [
	("node",		ctypes.POINTER(_xmlNode)),
	("recursive",		ctypes.c_int),] )

xmlDocCopyNode = _rpythonic_function_(		"xmlDocCopyNode", ctypes.POINTER(_xmlNode), [
	("node",		ctypes.POINTER(_xmlNode)),
	("doc",		ctypes.POINTER(_xmlDoc)),
	("recursive",		ctypes.c_int),] )

xmlDocCopyNodeList = _rpythonic_function_(		"xmlDocCopyNodeList", ctypes.POINTER(_xmlNode), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("node",		ctypes.POINTER(_xmlNode)),] )

xmlGetNodePath = _rpythonic_function_(		"xmlGetNodePath", ctypes.POINTER(ctypes.c_ubyte), [
	("node",		ctypes.POINTER(_xmlNode)),] )

xmlDocGetRootElement = _rpythonic_function_(		"xmlDocGetRootElement", ctypes.POINTER(_xmlNode), [
	("doc",		ctypes.POINTER(_xmlDoc)),] )

xmlGetLastChild = _rpythonic_function_(		"xmlGetLastChild", ctypes.POINTER(_xmlNode), [
	("parent",		ctypes.POINTER(_xmlNode)),] )

xmlNodeIsText = _rpythonic_function_(		"xmlNodeIsText", ctypes.c_int, [
	("node",		ctypes.POINTER(_xmlNode)),] )

xmlIsBlankNode = _rpythonic_function_(		"xmlIsBlankNode", ctypes.c_int, [
	("node",		ctypes.POINTER(_xmlNode)),] )

xmlDocSetRootElement = _rpythonic_function_(		"xmlDocSetRootElement", ctypes.POINTER(_xmlNode), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("root",		ctypes.POINTER(_xmlNode)),] )

xmlNodeSetName = _rpythonic_function_(		"xmlNodeSetName", ctypes.c_void_p, [
	("cur",		ctypes.POINTER(_xmlNode)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlAddChild = _rpythonic_function_(		"xmlAddChild", ctypes.POINTER(_xmlNode), [
	("parent",		ctypes.POINTER(_xmlNode)),
	("cur",		ctypes.POINTER(_xmlNode)),] )

xmlAddChildList = _rpythonic_function_(		"xmlAddChildList", ctypes.POINTER(_xmlNode), [
	("parent",		ctypes.POINTER(_xmlNode)),
	("cur",		ctypes.POINTER(_xmlNode)),] )

xmlReplaceNode = _rpythonic_function_(		"xmlReplaceNode", ctypes.POINTER(_xmlNode), [
	("old",		ctypes.POINTER(_xmlNode)),
	("cur",		ctypes.POINTER(_xmlNode)),] )

xmlAddPrevSibling = _rpythonic_function_(		"xmlAddPrevSibling", ctypes.POINTER(_xmlNode), [
	("cur",		ctypes.POINTER(_xmlNode)),
	("elem",		ctypes.POINTER(_xmlNode)),] )

xmlAddSibling = _rpythonic_function_(		"xmlAddSibling", ctypes.POINTER(_xmlNode), [
	("cur",		ctypes.POINTER(_xmlNode)),
	("elem",		ctypes.POINTER(_xmlNode)),] )

xmlAddNextSibling = _rpythonic_function_(		"xmlAddNextSibling", ctypes.POINTER(_xmlNode), [
	("cur",		ctypes.POINTER(_xmlNode)),
	("elem",		ctypes.POINTER(_xmlNode)),] )

xmlUnlinkNode = _rpythonic_function_(		"xmlUnlinkNode", ctypes.c_void_p, [
	("cur",		ctypes.POINTER(_xmlNode)),] )

xmlTextMerge = _rpythonic_function_(		"xmlTextMerge", ctypes.POINTER(_xmlNode), [
	("first",		ctypes.POINTER(_xmlNode)),
	("second",		ctypes.POINTER(_xmlNode)),] )

xmlTextConcat = _rpythonic_function_(		"xmlTextConcat", ctypes.c_int, [
	("node",		ctypes.POINTER(_xmlNode)),
	("content",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlFreeNodeList = _rpythonic_function_(		"xmlFreeNodeList", ctypes.c_void_p, [
	("cur",		ctypes.POINTER(_xmlNode)),] )

xmlFreeNode = _rpythonic_function_(		"xmlFreeNode", ctypes.c_void_p, [
	("cur",		ctypes.POINTER(_xmlNode)),] )

xmlSetTreeDoc = _rpythonic_function_(		"xmlSetTreeDoc", ctypes.c_void_p, [
	("tree",		ctypes.POINTER(_xmlNode)),
	("doc",		ctypes.POINTER(_xmlDoc)),] )

xmlSetListDoc = _rpythonic_function_(		"xmlSetListDoc", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_xmlNode)),
	("doc",		ctypes.POINTER(_xmlDoc)),] )

xmlSearchNs = _rpythonic_function_(		"xmlSearchNs", ctypes.POINTER(_xmlNs), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("node",		ctypes.POINTER(_xmlNode)),
	("nameSpace",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlSearchNsByHref = _rpythonic_function_(		"xmlSearchNsByHref", ctypes.POINTER(_xmlNs), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("node",		ctypes.POINTER(_xmlNode)),
	("href",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlGetNsList = _rpythonic_function_(		"xmlGetNsList", ctypes.POINTER(ctypes.POINTER(_xmlNs)), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("node",		ctypes.POINTER(_xmlNode)),] )

xmlSetNs = _rpythonic_function_(		"xmlSetNs", ctypes.c_void_p, [
	("node",		ctypes.POINTER(_xmlNode)),
	("ns",		ctypes.POINTER(_xmlNs)),] )

xmlCopyNamespace = _rpythonic_function_(		"xmlCopyNamespace", ctypes.POINTER(_xmlNs), [
	("cur",		ctypes.POINTER(_xmlNs)),] )

xmlCopyNamespaceList = _rpythonic_function_(		"xmlCopyNamespaceList", ctypes.POINTER(_xmlNs), [
	("cur",		ctypes.POINTER(_xmlNs)),] )

xmlSetProp = _rpythonic_function_(		"xmlSetProp", ctypes.POINTER(_xmlAttr), [
	("node",		ctypes.POINTER(_xmlNode)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlSetNsProp = _rpythonic_function_(		"xmlSetNsProp", ctypes.POINTER(_xmlAttr), [
	("node",		ctypes.POINTER(_xmlNode)),
	("ns",		ctypes.POINTER(_xmlNs)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlGetNoNsProp = _rpythonic_function_(		"xmlGetNoNsProp", ctypes.POINTER(ctypes.c_ubyte), [
	("node",		ctypes.POINTER(_xmlNode)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlGetProp = _rpythonic_function_(		"xmlGetProp", ctypes.POINTER(ctypes.c_ubyte), [
	("node",		ctypes.POINTER(_xmlNode)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlHasProp = _rpythonic_function_(		"xmlHasProp", ctypes.POINTER(_xmlAttr), [
	("node",		ctypes.POINTER(_xmlNode)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlHasNsProp = _rpythonic_function_(		"xmlHasNsProp", ctypes.POINTER(_xmlAttr), [
	("node",		ctypes.POINTER(_xmlNode)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("nameSpace",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlGetNsProp = _rpythonic_function_(		"xmlGetNsProp", ctypes.POINTER(ctypes.c_ubyte), [
	("node",		ctypes.POINTER(_xmlNode)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("nameSpace",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlStringGetNodeList = _rpythonic_function_(		"xmlStringGetNodeList", ctypes.POINTER(_xmlNode), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlStringLenGetNodeList = _rpythonic_function_(		"xmlStringLenGetNodeList", ctypes.POINTER(_xmlNode), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlNodeListGetString = _rpythonic_function_(		"xmlNodeListGetString", ctypes.POINTER(ctypes.c_ubyte), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("C_list",		ctypes.POINTER(_xmlNode)),
	("inLine",		ctypes.c_int),] )

xmlNodeListGetRawString = _rpythonic_function_(		"xmlNodeListGetRawString", ctypes.POINTER(ctypes.c_ubyte), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("C_list",		ctypes.POINTER(_xmlNode)),
	("inLine",		ctypes.c_int),] )

xmlNodeSetContent = _rpythonic_function_(		"xmlNodeSetContent", ctypes.c_void_p, [
	("cur",		ctypes.POINTER(_xmlNode)),
	("content",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlNodeSetContentLen = _rpythonic_function_(		"xmlNodeSetContentLen", ctypes.c_void_p, [
	("cur",		ctypes.POINTER(_xmlNode)),
	("content",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlNodeAddContent = _rpythonic_function_(		"xmlNodeAddContent", ctypes.c_void_p, [
	("cur",		ctypes.POINTER(_xmlNode)),
	("content",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlNodeAddContentLen = _rpythonic_function_(		"xmlNodeAddContentLen", ctypes.c_void_p, [
	("cur",		ctypes.POINTER(_xmlNode)),
	("content",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlNodeGetContent = _rpythonic_function_(		"xmlNodeGetContent", ctypes.POINTER(ctypes.c_ubyte), [
	("cur",		ctypes.POINTER(_xmlNode)),] )

xmlNodeBufGetContent = _rpythonic_function_(		"xmlNodeBufGetContent", ctypes.c_int, [
	("buffer",		ctypes.POINTER(_xmlBuffer)),
	("cur",		ctypes.POINTER(_xmlNode)),] )

xmlNodeGetLang = _rpythonic_function_(		"xmlNodeGetLang", ctypes.POINTER(ctypes.c_ubyte), [
	("cur",		ctypes.POINTER(_xmlNode)),] )

xmlNodeGetSpacePreserve = _rpythonic_function_(		"xmlNodeGetSpacePreserve", ctypes.c_int, [
	("cur",		ctypes.POINTER(_xmlNode)),] )

xmlNodeSetLang = _rpythonic_function_(		"xmlNodeSetLang", ctypes.c_void_p, [
	("cur",		ctypes.POINTER(_xmlNode)),
	("lang",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlNodeSetSpacePreserve = _rpythonic_function_(		"xmlNodeSetSpacePreserve", ctypes.c_void_p, [
	("cur",		ctypes.POINTER(_xmlNode)),
	("val",		ctypes.c_int),] )

xmlNodeGetBase = _rpythonic_function_(		"xmlNodeGetBase", ctypes.POINTER(ctypes.c_ubyte), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("cur",		ctypes.POINTER(_xmlNode)),] )

xmlNodeSetBase = _rpythonic_function_(		"xmlNodeSetBase", ctypes.c_void_p, [
	("cur",		ctypes.POINTER(_xmlNode)),
	("uri",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlRemoveProp = _rpythonic_function_(		"xmlRemoveProp", ctypes.c_int, [
	("cur",		ctypes.POINTER(_xmlAttr)),] )

xmlUnsetNsProp = _rpythonic_function_(		"xmlUnsetNsProp", ctypes.c_int, [
	("node",		ctypes.POINTER(_xmlNode)),
	("ns",		ctypes.POINTER(_xmlNs)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlUnsetProp = _rpythonic_function_(		"xmlUnsetProp", ctypes.c_int, [
	("node",		ctypes.POINTER(_xmlNode)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlBufferWriteCHAR = _rpythonic_function_(		"xmlBufferWriteCHAR", ctypes.c_void_p, [
	("buf",		ctypes.POINTER(_xmlBuffer)),
	("string",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlBufferWriteChar = _rpythonic_function_(		"xmlBufferWriteChar", ctypes.c_void_p, [
	("buf",		ctypes.POINTER(_xmlBuffer)),
	("string",		ctypes.POINTER(ctypes.c_char)),] )

xmlBufferWriteQuotedString = _rpythonic_function_(		"xmlBufferWriteQuotedString", ctypes.c_void_p, [
	("buf",		ctypes.POINTER(_xmlBuffer)),
	("string",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlAttrSerializeTxtContent = _rpythonic_function_(		"xmlAttrSerializeTxtContent", ctypes.c_void_p, [
	("buf",		ctypes.POINTER(_xmlBuffer)),
	("doc",		ctypes.POINTER(_xmlDoc)),
	("attr",		ctypes.POINTER(_xmlAttr)),
	("string",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlReconciliateNs = _rpythonic_function_(		"xmlReconciliateNs", ctypes.c_int, [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("tree",		ctypes.POINTER(_xmlNode)),] )

xmlDocDumpFormatMemory = _rpythonic_function_(		"xmlDocDumpFormatMemory", ctypes.c_void_p, [
	("cur",		ctypes.POINTER(_xmlDoc)),
	("mem",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("size",		ctypes.POINTER(ctypes.c_int)),
	("format",		ctypes.c_int),] )

xmlDocDumpMemory = _rpythonic_function_(		"xmlDocDumpMemory", ctypes.c_void_p, [
	("cur",		ctypes.POINTER(_xmlDoc)),
	("mem",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("size",		ctypes.POINTER(ctypes.c_int)),] )

xmlDocDumpMemoryEnc = _rpythonic_function_(		"xmlDocDumpMemoryEnc", ctypes.c_void_p, [
	("out_doc",		ctypes.POINTER(_xmlDoc)),
	("doc_txt_ptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("doc_txt_len",		ctypes.POINTER(ctypes.c_int)),
	("txt_encoding",		ctypes.POINTER(ctypes.c_char)),] )

xmlDocDumpFormatMemoryEnc = _rpythonic_function_(		"xmlDocDumpFormatMemoryEnc", ctypes.c_void_p, [
	("out_doc",		ctypes.POINTER(_xmlDoc)),
	("doc_txt_ptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("doc_txt_len",		ctypes.POINTER(ctypes.c_int)),
	("txt_encoding",		ctypes.POINTER(ctypes.c_char)),
	("format",		ctypes.c_int),] )

xmlDocFormatDump = _rpythonic_function_(		"xmlDocFormatDump", ctypes.c_int, [
	("f",		ctypes.POINTER(_IO_FILE)),
	("cur",		ctypes.POINTER(_xmlDoc)),
	("format",		ctypes.c_int),] )

xmlDocDump = _rpythonic_function_(		"xmlDocDump", ctypes.c_int, [
	("f",		ctypes.POINTER(_IO_FILE)),
	("cur",		ctypes.POINTER(_xmlDoc)),] )

xmlElemDump = _rpythonic_function_(		"xmlElemDump", ctypes.c_void_p, [
	("f",		ctypes.POINTER(_IO_FILE)),
	("doc",		ctypes.POINTER(_xmlDoc)),
	("cur",		ctypes.POINTER(_xmlNode)),] )

xmlSaveFile = _rpythonic_function_(		"xmlSaveFile", ctypes.c_int, [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("cur",		ctypes.POINTER(_xmlDoc)),] )

xmlSaveFormatFile = _rpythonic_function_(		"xmlSaveFormatFile", ctypes.c_int, [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("cur",		ctypes.POINTER(_xmlDoc)),
	("format",		ctypes.c_int),] )

xmlNodeDump = _rpythonic_function_(		"xmlNodeDump", ctypes.c_int, [
	("buf",		ctypes.POINTER(_xmlBuffer)),
	("doc",		ctypes.POINTER(_xmlDoc)),
	("cur",		ctypes.POINTER(_xmlNode)),
	("level",		ctypes.c_int),
	("format",		ctypes.c_int),] )

xmlSaveFileTo = _rpythonic_function_(		"xmlSaveFileTo", ctypes.c_int, [
	("buf",		ctypes.POINTER(_xmlOutputBuffer)),
	("cur",		ctypes.POINTER(_xmlDoc)),
	("encoding",		ctypes.POINTER(ctypes.c_char)),] )

xmlSaveFormatFileTo = _rpythonic_function_(		"xmlSaveFormatFileTo", ctypes.c_int, [
	("buf",		ctypes.POINTER(_xmlOutputBuffer)),
	("cur",		ctypes.POINTER(_xmlDoc)),
	("encoding",		ctypes.POINTER(ctypes.c_char)),
	("format",		ctypes.c_int),] )

xmlNodeDumpOutput = _rpythonic_function_(		"xmlNodeDumpOutput", ctypes.c_void_p, [
	("buf",		ctypes.POINTER(_xmlOutputBuffer)),
	("doc",		ctypes.POINTER(_xmlDoc)),
	("cur",		ctypes.POINTER(_xmlNode)),
	("level",		ctypes.c_int),
	("format",		ctypes.c_int),
	("encoding",		ctypes.POINTER(ctypes.c_char)),] )

xmlSaveFormatFileEnc = _rpythonic_function_(		"xmlSaveFormatFileEnc", ctypes.c_int, [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("cur",		ctypes.POINTER(_xmlDoc)),
	("encoding",		ctypes.POINTER(ctypes.c_char)),
	("format",		ctypes.c_int),] )

xmlSaveFileEnc = _rpythonic_function_(		"xmlSaveFileEnc", ctypes.c_int, [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("cur",		ctypes.POINTER(_xmlDoc)),
	("encoding",		ctypes.POINTER(ctypes.c_char)),] )

xmlIsXHTML = _rpythonic_function_(		"xmlIsXHTML", ctypes.c_int, [
	("systemID",		ctypes.POINTER(ctypes.c_ubyte)),
	("publicID",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlGetDocCompressMode = _rpythonic_function_(		"xmlGetDocCompressMode", ctypes.c_int, [
	("doc",		ctypes.POINTER(_xmlDoc)),] )

xmlSetDocCompressMode = _rpythonic_function_(		"xmlSetDocCompressMode", ctypes.c_void_p, [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("mode",		ctypes.c_int),] )

xmlGetCompressMode = _rpythonic_function_(		"xmlGetCompressMode", ctypes.c_int, [] )

xmlSetCompressMode = _rpythonic_function_(		"xmlSetCompressMode", ctypes.c_void_p, [
	("mode",		ctypes.c_int),] )

xmlDOMWrapNewCtxt = _rpythonic_function_(		"xmlDOMWrapNewCtxt", ctypes.POINTER(_xmlDOMWrapCtxt), [] )

xmlDOMWrapFreeCtxt = _rpythonic_function_(		"xmlDOMWrapFreeCtxt", ctypes.c_void_p, [
	("ctxt",		ctypes.POINTER(_xmlDOMWrapCtxt)),] )

xmlDOMWrapReconcileNamespaces = _rpythonic_function_(		"xmlDOMWrapReconcileNamespaces", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlDOMWrapCtxt)),
	("elem",		ctypes.POINTER(_xmlNode)),
	("options",		ctypes.c_int),] )

xmlDOMWrapAdoptNode = _rpythonic_function_(		"xmlDOMWrapAdoptNode", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlDOMWrapCtxt)),
	("sourceDoc",		ctypes.POINTER(_xmlDoc)),
	("node",		ctypes.POINTER(_xmlNode)),
	("destDoc",		ctypes.POINTER(_xmlDoc)),
	("destParent",		ctypes.POINTER(_xmlNode)),
	("options",		ctypes.c_int),] )

xmlDOMWrapRemoveNode = _rpythonic_function_(		"xmlDOMWrapRemoveNode", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlDOMWrapCtxt)),
	("doc",		ctypes.POINTER(_xmlDoc)),
	("node",		ctypes.POINTER(_xmlNode)),
	("options",		ctypes.c_int),] )

xmlDOMWrapCloneNode = _rpythonic_function_(		"xmlDOMWrapCloneNode", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlDOMWrapCtxt)),
	("sourceDoc",		ctypes.POINTER(_xmlDoc)),
	("node",		ctypes.POINTER(_xmlNode)),
	("clonedNode",		ctypes.POINTER(ctypes.POINTER(_xmlNode))),
	("destDoc",		ctypes.POINTER(_xmlDoc)),
	("destParent",		ctypes.POINTER(_xmlNode)),
	("deep",		ctypes.c_int),
	("options",		ctypes.c_int),] )

xmlChildElementCount = _rpythonic_function_(		"xmlChildElementCount", ctypes.c_ulong, [
	("parent",		ctypes.POINTER(_xmlNode)),] )

xmlNextElementSibling = _rpythonic_function_(		"xmlNextElementSibling", ctypes.POINTER(_xmlNode), [
	("node",		ctypes.POINTER(_xmlNode)),] )

xmlFirstElementChild = _rpythonic_function_(		"xmlFirstElementChild", ctypes.POINTER(_xmlNode), [
	("parent",		ctypes.POINTER(_xmlNode)),] )

xmlLastElementChild = _rpythonic_function_(		"xmlLastElementChild", ctypes.POINTER(_xmlNode), [
	("parent",		ctypes.POINTER(_xmlNode)),] )

xmlPreviousElementSibling = _rpythonic_function_(		"xmlPreviousElementSibling", ctypes.POINTER(_xmlNode), [
	("node",		ctypes.POINTER(_xmlNode)),] )

xmlHashDeallocator = _rpythonic_function_(		"xmlHashDeallocator", ctypes.c_void_p, [
	("payload",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlHashCopier = _rpythonic_function_(		"xmlHashCopier", ctypes.POINTER(ctypes.c_void_p), [
	("payload",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlHashScanner = _rpythonic_function_(		"xmlHashScanner", ctypes.c_void_p, [
	("payload",		ctypes.POINTER(ctypes.c_void_p)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlHashScannerFull = _rpythonic_function_(		"xmlHashScannerFull", ctypes.c_void_p, [
	("payload",		ctypes.POINTER(ctypes.c_void_p)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("name2",		ctypes.POINTER(ctypes.c_ubyte)),
	("name3",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlHashCreate = _rpythonic_function_(		"xmlHashCreate", ctypes.POINTER(_xmlHashTable), [
	("size",		ctypes.c_int),] )

xmlHashCreateDict = _rpythonic_function_(		"xmlHashCreateDict", ctypes.POINTER(_xmlHashTable), [
	("size",		ctypes.c_int),
	("C_dict",		ctypes.POINTER(_xmlDict)),] )

xmlHashFree = _rpythonic_function_(		"xmlHashFree", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_xmlHashTable)),
	("f",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),)),] )

xmlHashAddEntry = _rpythonic_function_(		"xmlHashAddEntry", ctypes.c_int, [
	("table",		ctypes.POINTER(_xmlHashTable)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("userdata",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlHashUpdateEntry = _rpythonic_function_(		"xmlHashUpdateEntry", ctypes.c_int, [
	("table",		ctypes.POINTER(_xmlHashTable)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("userdata",		ctypes.POINTER(ctypes.c_void_p)),
	("f",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),)),] )

xmlHashAddEntry2 = _rpythonic_function_(		"xmlHashAddEntry2", ctypes.c_int, [
	("table",		ctypes.POINTER(_xmlHashTable)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("name2",		ctypes.POINTER(ctypes.c_ubyte)),
	("userdata",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlHashUpdateEntry2 = _rpythonic_function_(		"xmlHashUpdateEntry2", ctypes.c_int, [
	("table",		ctypes.POINTER(_xmlHashTable)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("name2",		ctypes.POINTER(ctypes.c_ubyte)),
	("userdata",		ctypes.POINTER(ctypes.c_void_p)),
	("f",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),)),] )

xmlHashAddEntry3 = _rpythonic_function_(		"xmlHashAddEntry3", ctypes.c_int, [
	("table",		ctypes.POINTER(_xmlHashTable)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("name2",		ctypes.POINTER(ctypes.c_ubyte)),
	("name3",		ctypes.POINTER(ctypes.c_ubyte)),
	("userdata",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlHashUpdateEntry3 = _rpythonic_function_(		"xmlHashUpdateEntry3", ctypes.c_int, [
	("table",		ctypes.POINTER(_xmlHashTable)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("name2",		ctypes.POINTER(ctypes.c_ubyte)),
	("name3",		ctypes.POINTER(ctypes.c_ubyte)),
	("userdata",		ctypes.POINTER(ctypes.c_void_p)),
	("f",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),)),] )

xmlHashRemoveEntry = _rpythonic_function_(		"xmlHashRemoveEntry", ctypes.c_int, [
	("table",		ctypes.POINTER(_xmlHashTable)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("f",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),)),] )

xmlHashRemoveEntry2 = _rpythonic_function_(		"xmlHashRemoveEntry2", ctypes.c_int, [
	("table",		ctypes.POINTER(_xmlHashTable)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("name2",		ctypes.POINTER(ctypes.c_ubyte)),
	("f",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),)),] )

xmlHashRemoveEntry3 = _rpythonic_function_(		"xmlHashRemoveEntry3", ctypes.c_int, [
	("table",		ctypes.POINTER(_xmlHashTable)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("name2",		ctypes.POINTER(ctypes.c_ubyte)),
	("name3",		ctypes.POINTER(ctypes.c_ubyte)),
	("f",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),)),] )

xmlHashLookup = _rpythonic_function_(		"xmlHashLookup", ctypes.POINTER(ctypes.c_void_p), [
	("table",		ctypes.POINTER(_xmlHashTable)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlHashLookup2 = _rpythonic_function_(		"xmlHashLookup2", ctypes.POINTER(ctypes.c_void_p), [
	("table",		ctypes.POINTER(_xmlHashTable)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("name2",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlHashLookup3 = _rpythonic_function_(		"xmlHashLookup3", ctypes.POINTER(ctypes.c_void_p), [
	("table",		ctypes.POINTER(_xmlHashTable)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("name2",		ctypes.POINTER(ctypes.c_ubyte)),
	("name3",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlHashQLookup = _rpythonic_function_(		"xmlHashQLookup", ctypes.POINTER(ctypes.c_void_p), [
	("table",		ctypes.POINTER(_xmlHashTable)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("prefix",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlHashQLookup2 = _rpythonic_function_(		"xmlHashQLookup2", ctypes.POINTER(ctypes.c_void_p), [
	("table",		ctypes.POINTER(_xmlHashTable)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("prefix",		ctypes.POINTER(ctypes.c_ubyte)),
	("name2",		ctypes.POINTER(ctypes.c_ubyte)),
	("prefix2",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlHashQLookup3 = _rpythonic_function_(		"xmlHashQLookup3", ctypes.POINTER(ctypes.c_void_p), [
	("table",		ctypes.POINTER(_xmlHashTable)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("prefix",		ctypes.POINTER(ctypes.c_ubyte)),
	("name2",		ctypes.POINTER(ctypes.c_ubyte)),
	("prefix2",		ctypes.POINTER(ctypes.c_ubyte)),
	("name3",		ctypes.POINTER(ctypes.c_ubyte)),
	("prefix3",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlHashCopy = _rpythonic_function_(		"xmlHashCopy", ctypes.POINTER(_xmlHashTable), [
	("table",		ctypes.POINTER(_xmlHashTable)),
	("f",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),))),] )

xmlHashSize = _rpythonic_function_(		"xmlHashSize", ctypes.c_int, [
	("table",		ctypes.POINTER(_xmlHashTable)),] )

xmlHashScan = _rpythonic_function_(		"xmlHashScan", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_xmlHashTable)),
	("f",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlHashScan3 = _rpythonic_function_(		"xmlHashScan3", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_xmlHashTable)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("name2",		ctypes.POINTER(ctypes.c_ubyte)),
	("name3",		ctypes.POINTER(ctypes.c_ubyte)),
	("f",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlHashScanFull = _rpythonic_function_(		"xmlHashScanFull", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_xmlHashTable)),
	("f",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlHashScanFull3 = _rpythonic_function_(		"xmlHashScanFull3", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_xmlHashTable)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("name2",		ctypes.POINTER(ctypes.c_ubyte)),
	("name3",		ctypes.POINTER(ctypes.c_ubyte)),
	("f",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlGenericErrorFunc = _rpythonic_function_(		"xmlGenericErrorFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("msg",		ctypes.POINTER(ctypes.c_char)),] )

xmlStructuredErrorFunc = _rpythonic_function_(		"xmlStructuredErrorFunc", ctypes.c_void_p, [
	("userData",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(_xmlError)),] )

xmlSetGenericErrorFunc = _rpythonic_function_(		"xmlSetGenericErrorFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),)),] )

initGenericErrorDefaultFunc = _rpythonic_function_(		"initGenericErrorDefaultFunc", ctypes.c_void_p, [
	("handler",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),))),] )

xmlSetStructuredErrorFunc = _rpythonic_function_(		"xmlSetStructuredErrorFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_xmlError),)),] )

xmlParserError = _rpythonic_function_(		"xmlParserError", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("msg",		ctypes.POINTER(ctypes.c_char)),] )

xmlParserWarning = _rpythonic_function_(		"xmlParserWarning", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("msg",		ctypes.POINTER(ctypes.c_char)),] )

xmlParserValidityError = _rpythonic_function_(		"xmlParserValidityError", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("msg",		ctypes.POINTER(ctypes.c_char)),] )

xmlParserValidityWarning = _rpythonic_function_(		"xmlParserValidityWarning", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("msg",		ctypes.POINTER(ctypes.c_char)),] )

xmlParserPrintFileInfo = _rpythonic_function_(		"xmlParserPrintFileInfo", ctypes.c_void_p, [
	("input",		ctypes.POINTER(_xmlParserInput)),] )

xmlParserPrintFileContext = _rpythonic_function_(		"xmlParserPrintFileContext", ctypes.c_void_p, [
	("input",		ctypes.POINTER(_xmlParserInput)),] )

xmlGetLastError = _rpythonic_function_(		"xmlGetLastError", ctypes.POINTER(_xmlError), [] )

xmlResetLastError = _rpythonic_function_(		"xmlResetLastError", ctypes.c_void_p, [] )

xmlCtxtGetLastError = _rpythonic_function_(		"xmlCtxtGetLastError", ctypes.POINTER(_xmlError), [("ctx",		ctypes.c_void_p)] )

xmlCtxtResetLastError = _rpythonic_function_(		"xmlCtxtResetLastError", ctypes.c_void_p, [("ctx",		ctypes.c_void_p)] )

xmlResetError = _rpythonic_function_(		"xmlResetError", ctypes.c_void_p, [
	("err",		ctypes.POINTER(_xmlError)),] )

xmlCopyError = _rpythonic_function_(		"xmlCopyError", ctypes.c_int, [
	("from",		ctypes.POINTER(_xmlError)),
	("to",		ctypes.POINTER(_xmlError)),] )

xmlListDeallocator = _rpythonic_function_(		"xmlListDeallocator", ctypes.c_void_p, [
	("lk",		ctypes.POINTER(_xmlLink)),] )

xmlListDataCompare = _rpythonic_function_(		"xmlListDataCompare", ctypes.c_int, [
	("data0",		ctypes.POINTER(ctypes.c_void_p)),
	("data1",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlListWalker = _rpythonic_function_(		"xmlListWalker", ctypes.c_int, [
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("user",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlListCreate = _rpythonic_function_(		"xmlListCreate", ctypes.POINTER(_xmlList), [
	("deallocator",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_xmlLink),)),
	("compare",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

xmlListDelete = _rpythonic_function_(		"xmlListDelete", ctypes.c_void_p, [
	("l",		ctypes.POINTER(_xmlList)),] )

xmlListSearch = _rpythonic_function_(		"xmlListSearch", ctypes.POINTER(ctypes.c_void_p), [
	("l",		ctypes.POINTER(_xmlList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlListReverseSearch = _rpythonic_function_(		"xmlListReverseSearch", ctypes.POINTER(ctypes.c_void_p), [
	("l",		ctypes.POINTER(_xmlList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlListInsert = _rpythonic_function_(		"xmlListInsert", ctypes.c_int, [
	("l",		ctypes.POINTER(_xmlList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlListAppend = _rpythonic_function_(		"xmlListAppend", ctypes.c_int, [
	("l",		ctypes.POINTER(_xmlList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlListRemoveFirst = _rpythonic_function_(		"xmlListRemoveFirst", ctypes.c_int, [
	("l",		ctypes.POINTER(_xmlList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlListRemoveLast = _rpythonic_function_(		"xmlListRemoveLast", ctypes.c_int, [
	("l",		ctypes.POINTER(_xmlList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlListRemoveAll = _rpythonic_function_(		"xmlListRemoveAll", ctypes.c_int, [
	("l",		ctypes.POINTER(_xmlList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlListClear = _rpythonic_function_(		"xmlListClear", ctypes.c_void_p, [
	("l",		ctypes.POINTER(_xmlList)),] )

xmlListEmpty = _rpythonic_function_(		"xmlListEmpty", ctypes.c_int, [
	("l",		ctypes.POINTER(_xmlList)),] )

xmlListFront = _rpythonic_function_(		"xmlListFront", ctypes.POINTER(_xmlLink), [
	("l",		ctypes.POINTER(_xmlList)),] )

xmlListEnd = _rpythonic_function_(		"xmlListEnd", ctypes.POINTER(_xmlLink), [
	("l",		ctypes.POINTER(_xmlList)),] )

xmlListSize = _rpythonic_function_(		"xmlListSize", ctypes.c_int, [
	("l",		ctypes.POINTER(_xmlList)),] )

xmlListPopFront = _rpythonic_function_(		"xmlListPopFront", ctypes.c_void_p, [
	("l",		ctypes.POINTER(_xmlList)),] )

xmlListPopBack = _rpythonic_function_(		"xmlListPopBack", ctypes.c_void_p, [
	("l",		ctypes.POINTER(_xmlList)),] )

xmlListPushFront = _rpythonic_function_(		"xmlListPushFront", ctypes.c_int, [
	("l",		ctypes.POINTER(_xmlList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlListPushBack = _rpythonic_function_(		"xmlListPushBack", ctypes.c_int, [
	("l",		ctypes.POINTER(_xmlList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlListReverse = _rpythonic_function_(		"xmlListReverse", ctypes.c_void_p, [
	("l",		ctypes.POINTER(_xmlList)),] )

xmlListSort = _rpythonic_function_(		"xmlListSort", ctypes.c_void_p, [
	("l",		ctypes.POINTER(_xmlList)),] )

xmlListWalk = _rpythonic_function_(		"xmlListWalk", ctypes.c_void_p, [
	("l",		ctypes.POINTER(_xmlList)),
	("walker",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlListReverseWalk = _rpythonic_function_(		"xmlListReverseWalk", ctypes.c_void_p, [
	("l",		ctypes.POINTER(_xmlList)),
	("walker",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlListMerge = _rpythonic_function_(		"xmlListMerge", ctypes.c_void_p, [
	("l1",		ctypes.POINTER(_xmlList)),
	("l2",		ctypes.POINTER(_xmlList)),] )

xmlListDup = _rpythonic_function_(		"xmlListDup", ctypes.POINTER(_xmlList), [
	("old",		ctypes.POINTER(_xmlList)),] )

xmlListCopy = _rpythonic_function_(		"xmlListCopy", ctypes.c_int, [
	("cur",		ctypes.POINTER(_xmlList)),
	("old",		ctypes.POINTER(_xmlList)),] )

xmlLinkGetData = _rpythonic_function_(		"xmlLinkGetData", ctypes.POINTER(ctypes.c_void_p), [
	("lk",		ctypes.POINTER(_xmlLink)),] )

xmlNewAutomata = _rpythonic_function_(		"xmlNewAutomata", ctypes.POINTER(_xmlAutomata), [] )

xmlFreeAutomata = _rpythonic_function_(		"xmlFreeAutomata", ctypes.c_void_p, [
	("am",		ctypes.POINTER(_xmlAutomata)),] )

xmlAutomataGetInitState = _rpythonic_function_(		"xmlAutomataGetInitState", ctypes.POINTER(_xmlAutomataState), [
	("am",		ctypes.POINTER(_xmlAutomata)),] )

xmlAutomataSetFinalState = _rpythonic_function_(		"xmlAutomataSetFinalState", ctypes.c_int, [
	("am",		ctypes.POINTER(_xmlAutomata)),
	("state",		ctypes.POINTER(_xmlAutomataState)),] )

xmlAutomataNewState = _rpythonic_function_(		"xmlAutomataNewState", ctypes.POINTER(_xmlAutomataState), [
	("am",		ctypes.POINTER(_xmlAutomata)),] )

xmlAutomataNewTransition = _rpythonic_function_(		"xmlAutomataNewTransition", ctypes.POINTER(_xmlAutomataState), [
	("am",		ctypes.POINTER(_xmlAutomata)),
	("from",		ctypes.POINTER(_xmlAutomataState)),
	("to",		ctypes.POINTER(_xmlAutomataState)),
	("token",		ctypes.POINTER(ctypes.c_ubyte)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlAutomataNewTransition2 = _rpythonic_function_(		"xmlAutomataNewTransition2", ctypes.POINTER(_xmlAutomataState), [
	("am",		ctypes.POINTER(_xmlAutomata)),
	("from",		ctypes.POINTER(_xmlAutomataState)),
	("to",		ctypes.POINTER(_xmlAutomataState)),
	("token",		ctypes.POINTER(ctypes.c_ubyte)),
	("token2",		ctypes.POINTER(ctypes.c_ubyte)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlAutomataNewNegTrans = _rpythonic_function_(		"xmlAutomataNewNegTrans", ctypes.POINTER(_xmlAutomataState), [
	("am",		ctypes.POINTER(_xmlAutomata)),
	("from",		ctypes.POINTER(_xmlAutomataState)),
	("to",		ctypes.POINTER(_xmlAutomataState)),
	("token",		ctypes.POINTER(ctypes.c_ubyte)),
	("token2",		ctypes.POINTER(ctypes.c_ubyte)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlAutomataNewCountTrans = _rpythonic_function_(		"xmlAutomataNewCountTrans", ctypes.POINTER(_xmlAutomataState), [
	("am",		ctypes.POINTER(_xmlAutomata)),
	("from",		ctypes.POINTER(_xmlAutomataState)),
	("to",		ctypes.POINTER(_xmlAutomataState)),
	("token",		ctypes.POINTER(ctypes.c_ubyte)),
	("min",		ctypes.c_int),
	("max",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlAutomataNewCountTrans2 = _rpythonic_function_(		"xmlAutomataNewCountTrans2", ctypes.POINTER(_xmlAutomataState), [
	("am",		ctypes.POINTER(_xmlAutomata)),
	("from",		ctypes.POINTER(_xmlAutomataState)),
	("to",		ctypes.POINTER(_xmlAutomataState)),
	("token",		ctypes.POINTER(ctypes.c_ubyte)),
	("token2",		ctypes.POINTER(ctypes.c_ubyte)),
	("min",		ctypes.c_int),
	("max",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlAutomataNewOnceTrans = _rpythonic_function_(		"xmlAutomataNewOnceTrans", ctypes.POINTER(_xmlAutomataState), [
	("am",		ctypes.POINTER(_xmlAutomata)),
	("from",		ctypes.POINTER(_xmlAutomataState)),
	("to",		ctypes.POINTER(_xmlAutomataState)),
	("token",		ctypes.POINTER(ctypes.c_ubyte)),
	("min",		ctypes.c_int),
	("max",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlAutomataNewOnceTrans2 = _rpythonic_function_(		"xmlAutomataNewOnceTrans2", ctypes.POINTER(_xmlAutomataState), [
	("am",		ctypes.POINTER(_xmlAutomata)),
	("from",		ctypes.POINTER(_xmlAutomataState)),
	("to",		ctypes.POINTER(_xmlAutomataState)),
	("token",		ctypes.POINTER(ctypes.c_ubyte)),
	("token2",		ctypes.POINTER(ctypes.c_ubyte)),
	("min",		ctypes.c_int),
	("max",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlAutomataNewAllTrans = _rpythonic_function_(		"xmlAutomataNewAllTrans", ctypes.POINTER(_xmlAutomataState), [
	("am",		ctypes.POINTER(_xmlAutomata)),
	("from",		ctypes.POINTER(_xmlAutomataState)),
	("to",		ctypes.POINTER(_xmlAutomataState)),
	("lax",		ctypes.c_int),] )

xmlAutomataNewEpsilon = _rpythonic_function_(		"xmlAutomataNewEpsilon", ctypes.POINTER(_xmlAutomataState), [
	("am",		ctypes.POINTER(_xmlAutomata)),
	("from",		ctypes.POINTER(_xmlAutomataState)),
	("to",		ctypes.POINTER(_xmlAutomataState)),] )

xmlAutomataNewCountedTrans = _rpythonic_function_(		"xmlAutomataNewCountedTrans", ctypes.POINTER(_xmlAutomataState), [
	("am",		ctypes.POINTER(_xmlAutomata)),
	("from",		ctypes.POINTER(_xmlAutomataState)),
	("to",		ctypes.POINTER(_xmlAutomataState)),
	("counter",		ctypes.c_int),] )

xmlAutomataNewCounterTrans = _rpythonic_function_(		"xmlAutomataNewCounterTrans", ctypes.POINTER(_xmlAutomataState), [
	("am",		ctypes.POINTER(_xmlAutomata)),
	("from",		ctypes.POINTER(_xmlAutomataState)),
	("to",		ctypes.POINTER(_xmlAutomataState)),
	("counter",		ctypes.c_int),] )

xmlAutomataNewCounter = _rpythonic_function_(		"xmlAutomataNewCounter", ctypes.c_int, [
	("am",		ctypes.POINTER(_xmlAutomata)),
	("min",		ctypes.c_int),
	("max",		ctypes.c_int),] )

xmlAutomataCompile = _rpythonic_function_(		"xmlAutomataCompile", ctypes.POINTER(_xmlRegexp), [
	("am",		ctypes.POINTER(_xmlAutomata)),] )

xmlAutomataIsDeterminist = _rpythonic_function_(		"xmlAutomataIsDeterminist", ctypes.c_int, [
	("am",		ctypes.POINTER(_xmlAutomata)),] )

xmlValidityErrorFunc = _rpythonic_function_(		"xmlValidityErrorFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("msg",		ctypes.POINTER(ctypes.c_char)),] )

xmlValidityWarningFunc = _rpythonic_function_(		"xmlValidityWarningFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("msg",		ctypes.POINTER(ctypes.c_char)),] )

xmlAddNotationDecl = _rpythonic_function_(		"xmlAddNotationDecl", ctypes.POINTER(_xmlNotation), [
	("ctxt",		ctypes.POINTER(_xmlValidCtxt)),
	("dtd",		ctypes.POINTER(_xmlDtd)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("PublicID",		ctypes.POINTER(ctypes.c_ubyte)),
	("SystemID",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlCopyNotationTable = _rpythonic_function_(		"xmlCopyNotationTable", ctypes.POINTER(_xmlHashTable), [
	("table",		ctypes.POINTER(_xmlHashTable)),] )

xmlFreeNotationTable = _rpythonic_function_(		"xmlFreeNotationTable", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_xmlHashTable)),] )

xmlDumpNotationDecl = _rpythonic_function_(		"xmlDumpNotationDecl", ctypes.c_void_p, [
	("buf",		ctypes.POINTER(_xmlBuffer)),
	("nota",		ctypes.POINTER(_xmlNotation)),] )

xmlDumpNotationTable = _rpythonic_function_(		"xmlDumpNotationTable", ctypes.c_void_p, [
	("buf",		ctypes.POINTER(_xmlBuffer)),
	("table",		ctypes.POINTER(_xmlHashTable)),] )

xmlNewElementContent = _rpythonic_function_(		"xmlNewElementContent", ctypes.POINTER(_xmlElementContent), [
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_type",		ctypes.c_int),] )

xmlCopyElementContent = _rpythonic_function_(		"xmlCopyElementContent", ctypes.POINTER(_xmlElementContent), [
	("content",		ctypes.POINTER(_xmlElementContent)),] )

xmlFreeElementContent = _rpythonic_function_(		"xmlFreeElementContent", ctypes.c_void_p, [
	("cur",		ctypes.POINTER(_xmlElementContent)),] )

xmlNewDocElementContent = _rpythonic_function_(		"xmlNewDocElementContent", ctypes.POINTER(_xmlElementContent), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_type",		ctypes.c_int),] )

xmlCopyDocElementContent = _rpythonic_function_(		"xmlCopyDocElementContent", ctypes.POINTER(_xmlElementContent), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("content",		ctypes.POINTER(_xmlElementContent)),] )

xmlFreeDocElementContent = _rpythonic_function_(		"xmlFreeDocElementContent", ctypes.c_void_p, [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("cur",		ctypes.POINTER(_xmlElementContent)),] )

xmlSnprintfElementContent = _rpythonic_function_(		"xmlSnprintfElementContent", ctypes.c_void_p, [
	("buf",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_int),
	("content",		ctypes.POINTER(_xmlElementContent)),
	("englob",		ctypes.c_int),] )

xmlSprintfElementContent = _rpythonic_function_(		"xmlSprintfElementContent", ctypes.c_void_p, [
	("buf",		ctypes.POINTER(ctypes.c_char)),
	("content",		ctypes.POINTER(_xmlElementContent)),
	("englob",		ctypes.c_int),] )

xmlAddElementDecl = _rpythonic_function_(		"xmlAddElementDecl", ctypes.POINTER(_xmlElement), [
	("ctxt",		ctypes.POINTER(_xmlValidCtxt)),
	("dtd",		ctypes.POINTER(_xmlDtd)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_type",		ctypes.c_int),
	("content",		ctypes.POINTER(_xmlElementContent)),] )

xmlCopyElementTable = _rpythonic_function_(		"xmlCopyElementTable", ctypes.POINTER(_xmlHashTable), [
	("table",		ctypes.POINTER(_xmlHashTable)),] )

xmlFreeElementTable = _rpythonic_function_(		"xmlFreeElementTable", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_xmlHashTable)),] )

xmlDumpElementTable = _rpythonic_function_(		"xmlDumpElementTable", ctypes.c_void_p, [
	("buf",		ctypes.POINTER(_xmlBuffer)),
	("table",		ctypes.POINTER(_xmlHashTable)),] )

xmlDumpElementDecl = _rpythonic_function_(		"xmlDumpElementDecl", ctypes.c_void_p, [
	("buf",		ctypes.POINTER(_xmlBuffer)),
	("elem",		ctypes.POINTER(_xmlElement)),] )

xmlCreateEnumeration = _rpythonic_function_(		"xmlCreateEnumeration", ctypes.POINTER(_xmlEnumeration), [
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlFreeEnumeration = _rpythonic_function_(		"xmlFreeEnumeration", ctypes.c_void_p, [
	("cur",		ctypes.POINTER(_xmlEnumeration)),] )

xmlCopyEnumeration = _rpythonic_function_(		"xmlCopyEnumeration", ctypes.POINTER(_xmlEnumeration), [
	("cur",		ctypes.POINTER(_xmlEnumeration)),] )

xmlAddAttributeDecl = _rpythonic_function_(		"xmlAddAttributeDecl", ctypes.POINTER(_xmlAttribute), [
	("ctxt",		ctypes.POINTER(_xmlValidCtxt)),
	("dtd",		ctypes.POINTER(_xmlDtd)),
	("elem",		ctypes.POINTER(ctypes.c_ubyte)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("ns",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_type",		ctypes.c_int),
	("C_def",		ctypes.c_int),
	("defaultValue",		ctypes.POINTER(ctypes.c_ubyte)),
	("tree",		ctypes.POINTER(_xmlEnumeration)),] )

xmlCopyAttributeTable = _rpythonic_function_(		"xmlCopyAttributeTable", ctypes.POINTER(_xmlHashTable), [
	("table",		ctypes.POINTER(_xmlHashTable)),] )

xmlFreeAttributeTable = _rpythonic_function_(		"xmlFreeAttributeTable", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_xmlHashTable)),] )

xmlDumpAttributeTable = _rpythonic_function_(		"xmlDumpAttributeTable", ctypes.c_void_p, [
	("buf",		ctypes.POINTER(_xmlBuffer)),
	("table",		ctypes.POINTER(_xmlHashTable)),] )

xmlDumpAttributeDecl = _rpythonic_function_(		"xmlDumpAttributeDecl", ctypes.c_void_p, [
	("buf",		ctypes.POINTER(_xmlBuffer)),
	("attr",		ctypes.POINTER(_xmlAttribute)),] )

xmlAddID = _rpythonic_function_(		"xmlAddID", ctypes.POINTER(_xmlID), [
	("ctxt",		ctypes.POINTER(_xmlValidCtxt)),
	("doc",		ctypes.POINTER(_xmlDoc)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),
	("attr",		ctypes.POINTER(_xmlAttr)),] )

xmlFreeIDTable = _rpythonic_function_(		"xmlFreeIDTable", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_xmlHashTable)),] )

xmlGetID = _rpythonic_function_(		"xmlGetID", ctypes.POINTER(_xmlAttr), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("ID",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlIsID = _rpythonic_function_(		"xmlIsID", ctypes.c_int, [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("elem",		ctypes.POINTER(_xmlNode)),
	("attr",		ctypes.POINTER(_xmlAttr)),] )

xmlRemoveID = _rpythonic_function_(		"xmlRemoveID", ctypes.c_int, [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("attr",		ctypes.POINTER(_xmlAttr)),] )

xmlAddRef = _rpythonic_function_(		"xmlAddRef", ctypes.POINTER(_xmlRef), [
	("ctxt",		ctypes.POINTER(_xmlValidCtxt)),
	("doc",		ctypes.POINTER(_xmlDoc)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),
	("attr",		ctypes.POINTER(_xmlAttr)),] )

xmlFreeRefTable = _rpythonic_function_(		"xmlFreeRefTable", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_xmlHashTable)),] )

xmlIsRef = _rpythonic_function_(		"xmlIsRef", ctypes.c_int, [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("elem",		ctypes.POINTER(_xmlNode)),
	("attr",		ctypes.POINTER(_xmlAttr)),] )

xmlRemoveRef = _rpythonic_function_(		"xmlRemoveRef", ctypes.c_int, [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("attr",		ctypes.POINTER(_xmlAttr)),] )

xmlGetRefs = _rpythonic_function_(		"xmlGetRefs", ctypes.POINTER(_xmlList), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("ID",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlNewValidCtxt = _rpythonic_function_(		"xmlNewValidCtxt", ctypes.POINTER(_xmlValidCtxt), [] )

xmlFreeValidCtxt = _rpythonic_function_(		"xmlFreeValidCtxt", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlValidateRoot = _rpythonic_function_(		"xmlValidateRoot", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlValidCtxt)),
	("doc",		ctypes.POINTER(_xmlDoc)),] )

xmlValidateElementDecl = _rpythonic_function_(		"xmlValidateElementDecl", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlValidCtxt)),
	("doc",		ctypes.POINTER(_xmlDoc)),
	("elem",		ctypes.POINTER(_xmlElement)),] )

xmlValidNormalizeAttributeValue = _rpythonic_function_(		"xmlValidNormalizeAttributeValue", ctypes.POINTER(ctypes.c_ubyte), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("elem",		ctypes.POINTER(_xmlNode)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlValidCtxtNormalizeAttributeValue = _rpythonic_function_(		"xmlValidCtxtNormalizeAttributeValue", ctypes.POINTER(ctypes.c_ubyte), [
	("ctxt",		ctypes.POINTER(_xmlValidCtxt)),
	("doc",		ctypes.POINTER(_xmlDoc)),
	("elem",		ctypes.POINTER(_xmlNode)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlValidateAttributeDecl = _rpythonic_function_(		"xmlValidateAttributeDecl", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlValidCtxt)),
	("doc",		ctypes.POINTER(_xmlDoc)),
	("attr",		ctypes.POINTER(_xmlAttribute)),] )

xmlValidateAttributeValue = _rpythonic_function_(		"xmlValidateAttributeValue", ctypes.c_int, [
	("C_type",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlValidateNotationDecl = _rpythonic_function_(		"xmlValidateNotationDecl", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlValidCtxt)),
	("doc",		ctypes.POINTER(_xmlDoc)),
	("nota",		ctypes.POINTER(_xmlNotation)),] )

xmlValidateDtd = _rpythonic_function_(		"xmlValidateDtd", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlValidCtxt)),
	("doc",		ctypes.POINTER(_xmlDoc)),
	("dtd",		ctypes.POINTER(_xmlDtd)),] )

xmlValidateDtdFinal = _rpythonic_function_(		"xmlValidateDtdFinal", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlValidCtxt)),
	("doc",		ctypes.POINTER(_xmlDoc)),] )

xmlValidateDocument = _rpythonic_function_(		"xmlValidateDocument", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlValidCtxt)),
	("doc",		ctypes.POINTER(_xmlDoc)),] )

xmlValidateElement = _rpythonic_function_(		"xmlValidateElement", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlValidCtxt)),
	("doc",		ctypes.POINTER(_xmlDoc)),
	("elem",		ctypes.POINTER(_xmlNode)),] )

xmlValidateOneElement = _rpythonic_function_(		"xmlValidateOneElement", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlValidCtxt)),
	("doc",		ctypes.POINTER(_xmlDoc)),
	("elem",		ctypes.POINTER(_xmlNode)),] )

xmlValidateOneAttribute = _rpythonic_function_(		"xmlValidateOneAttribute", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlValidCtxt)),
	("doc",		ctypes.POINTER(_xmlDoc)),
	("elem",		ctypes.POINTER(_xmlNode)),
	("attr",		ctypes.POINTER(_xmlAttr)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlValidateOneNamespace = _rpythonic_function_(		"xmlValidateOneNamespace", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlValidCtxt)),
	("doc",		ctypes.POINTER(_xmlDoc)),
	("elem",		ctypes.POINTER(_xmlNode)),
	("prefix",		ctypes.POINTER(ctypes.c_ubyte)),
	("ns",		ctypes.POINTER(_xmlNs)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlValidateDocumentFinal = _rpythonic_function_(		"xmlValidateDocumentFinal", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlValidCtxt)),
	("doc",		ctypes.POINTER(_xmlDoc)),] )

xmlValidateNotationUse = _rpythonic_function_(		"xmlValidateNotationUse", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlValidCtxt)),
	("doc",		ctypes.POINTER(_xmlDoc)),
	("notationName",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlIsMixedElement = _rpythonic_function_(		"xmlIsMixedElement", ctypes.c_int, [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlGetDtdAttrDesc = _rpythonic_function_(		"xmlGetDtdAttrDesc", ctypes.POINTER(_xmlAttribute), [
	("dtd",		ctypes.POINTER(_xmlDtd)),
	("elem",		ctypes.POINTER(ctypes.c_ubyte)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlGetDtdQAttrDesc = _rpythonic_function_(		"xmlGetDtdQAttrDesc", ctypes.POINTER(_xmlAttribute), [
	("dtd",		ctypes.POINTER(_xmlDtd)),
	("elem",		ctypes.POINTER(ctypes.c_ubyte)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("prefix",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlGetDtdNotationDesc = _rpythonic_function_(		"xmlGetDtdNotationDesc", ctypes.POINTER(_xmlNotation), [
	("dtd",		ctypes.POINTER(_xmlDtd)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlGetDtdQElementDesc = _rpythonic_function_(		"xmlGetDtdQElementDesc", ctypes.POINTER(_xmlElement), [
	("dtd",		ctypes.POINTER(_xmlDtd)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("prefix",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlGetDtdElementDesc = _rpythonic_function_(		"xmlGetDtdElementDesc", ctypes.POINTER(_xmlElement), [
	("dtd",		ctypes.POINTER(_xmlDtd)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlValidGetPotentialChildren = _rpythonic_function_(		"xmlValidGetPotentialChildren", ctypes.c_int, [
	("ctree",		ctypes.POINTER(_xmlElementContent)),
	("names",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("C_len",		ctypes.POINTER(ctypes.c_int)),
	("max",		ctypes.c_int),] )

xmlValidGetValidElements = _rpythonic_function_(		"xmlValidGetValidElements", ctypes.c_int, [
	("prev",		ctypes.POINTER(_xmlNode)),
	("next",		ctypes.POINTER(_xmlNode)),
	("names",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("max",		ctypes.c_int),] )

xmlValidateNameValue = _rpythonic_function_(		"xmlValidateNameValue", ctypes.c_int, [
	("value",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlValidateNamesValue = _rpythonic_function_(		"xmlValidateNamesValue", ctypes.c_int, [
	("value",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlValidateNmtokenValue = _rpythonic_function_(		"xmlValidateNmtokenValue", ctypes.c_int, [
	("value",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlValidateNmtokensValue = _rpythonic_function_(		"xmlValidateNmtokensValue", ctypes.c_int, [
	("value",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlValidBuildContentModel = _rpythonic_function_(		"xmlValidBuildContentModel", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlValidCtxt)),
	("elem",		ctypes.POINTER(_xmlElement)),] )

xmlValidatePushElement = _rpythonic_function_(		"xmlValidatePushElement", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlValidCtxt)),
	("doc",		ctypes.POINTER(_xmlDoc)),
	("elem",		ctypes.POINTER(_xmlNode)),
	("qname",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlValidatePushCData = _rpythonic_function_(		"xmlValidatePushCData", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlValidCtxt)),
	("data",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlValidatePopElement = _rpythonic_function_(		"xmlValidatePopElement", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlValidCtxt)),
	("doc",		ctypes.POINTER(_xmlDoc)),
	("elem",		ctypes.POINTER(_xmlNode)),
	("qname",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlInitializePredefinedEntities = _rpythonic_function_(		"xmlInitializePredefinedEntities", ctypes.c_void_p, [] )

xmlNewEntity = _rpythonic_function_(		"xmlNewEntity", ctypes.POINTER(_xmlEntity), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_type",		ctypes.c_int),
	("ExternalID",		ctypes.POINTER(ctypes.c_ubyte)),
	("SystemID",		ctypes.POINTER(ctypes.c_ubyte)),
	("content",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlAddDocEntity = _rpythonic_function_(		"xmlAddDocEntity", ctypes.POINTER(_xmlEntity), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_type",		ctypes.c_int),
	("ExternalID",		ctypes.POINTER(ctypes.c_ubyte)),
	("SystemID",		ctypes.POINTER(ctypes.c_ubyte)),
	("content",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlAddDtdEntity = _rpythonic_function_(		"xmlAddDtdEntity", ctypes.POINTER(_xmlEntity), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_type",		ctypes.c_int),
	("ExternalID",		ctypes.POINTER(ctypes.c_ubyte)),
	("SystemID",		ctypes.POINTER(ctypes.c_ubyte)),
	("content",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlGetPredefinedEntity = _rpythonic_function_(		"xmlGetPredefinedEntity", ctypes.POINTER(_xmlEntity), [
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlGetDocEntity = _rpythonic_function_(		"xmlGetDocEntity", ctypes.POINTER(_xmlEntity), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlGetDtdEntity = _rpythonic_function_(		"xmlGetDtdEntity", ctypes.POINTER(_xmlEntity), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlGetParameterEntity = _rpythonic_function_(		"xmlGetParameterEntity", ctypes.POINTER(_xmlEntity), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlEncodeEntities = _rpythonic_function_(		"xmlEncodeEntities", ctypes.POINTER(ctypes.c_ubyte), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("input",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlEncodeEntitiesReentrant = _rpythonic_function_(		"xmlEncodeEntitiesReentrant", ctypes.POINTER(ctypes.c_ubyte), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("input",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlEncodeSpecialChars = _rpythonic_function_(		"xmlEncodeSpecialChars", ctypes.POINTER(ctypes.c_ubyte), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("input",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlCreateEntitiesTable = _rpythonic_function_(		"xmlCreateEntitiesTable", ctypes.POINTER(_xmlHashTable), [] )

xmlCopyEntitiesTable = _rpythonic_function_(		"xmlCopyEntitiesTable", ctypes.POINTER(_xmlHashTable), [
	("table",		ctypes.POINTER(_xmlHashTable)),] )

xmlFreeEntitiesTable = _rpythonic_function_(		"xmlFreeEntitiesTable", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_xmlHashTable)),] )

xmlDumpEntitiesTable = _rpythonic_function_(		"xmlDumpEntitiesTable", ctypes.c_void_p, [
	("buf",		ctypes.POINTER(_xmlBuffer)),
	("table",		ctypes.POINTER(_xmlHashTable)),] )

xmlDumpEntityDecl = _rpythonic_function_(		"xmlDumpEntityDecl", ctypes.c_void_p, [
	("buf",		ctypes.POINTER(_xmlBuffer)),
	("ent",		ctypes.POINTER(_xmlEntity)),] )

xmlCleanupPredefinedEntities = _rpythonic_function_(		"xmlCleanupPredefinedEntities", ctypes.c_void_p, [] )

xmlParserInputDeallocate = _rpythonic_function_(		"xmlParserInputDeallocate", ctypes.c_void_p, [
	("C_str",		ctypes.POINTER(ctypes.c_ubyte)),] )

getPublicId = _rpythonic_function_(		"getPublicId", ctypes.POINTER(ctypes.c_ubyte), [("ctx",		ctypes.c_void_p)] )

getSystemId = _rpythonic_function_(		"getSystemId", ctypes.POINTER(ctypes.c_ubyte), [("ctx",		ctypes.c_void_p)] )

getLineNumber = _rpythonic_function_(		"getLineNumber", ctypes.c_int, [("ctx",		ctypes.c_void_p)] )

getColumnNumber = _rpythonic_function_(		"getColumnNumber", ctypes.c_int, [("ctx",		ctypes.c_void_p)] )

resolveEntitySAXFunc = _rpythonic_function_(		"resolveEntitySAXFunc", ctypes.POINTER(_xmlParserInput), [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("publicId",		ctypes.POINTER(ctypes.c_ubyte)),
	("systemId",		ctypes.POINTER(ctypes.c_ubyte)),] )

internalSubsetSAXFunc = _rpythonic_function_(		"internalSubsetSAXFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("ExternalID",		ctypes.POINTER(ctypes.c_ubyte)),
	("SystemID",		ctypes.POINTER(ctypes.c_ubyte)),] )

externalSubsetSAXFunc = _rpythonic_function_(		"externalSubsetSAXFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("ExternalID",		ctypes.POINTER(ctypes.c_ubyte)),
	("SystemID",		ctypes.POINTER(ctypes.c_ubyte)),] )

getEntitySAXFunc = _rpythonic_function_(		"getEntitySAXFunc", ctypes.POINTER(_xmlEntity), [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

getParameterEntitySAXFunc = _rpythonic_function_(		"getParameterEntitySAXFunc", ctypes.POINTER(_xmlEntity), [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

entityDeclSAXFunc = _rpythonic_function_(		"entityDeclSAXFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_type",		ctypes.c_int),
	("publicId",		ctypes.POINTER(ctypes.c_ubyte)),
	("systemId",		ctypes.POINTER(ctypes.c_ubyte)),
	("content",		ctypes.POINTER(ctypes.c_ubyte)),] )

notationDeclSAXFunc = _rpythonic_function_(		"notationDeclSAXFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("publicId",		ctypes.POINTER(ctypes.c_ubyte)),
	("systemId",		ctypes.POINTER(ctypes.c_ubyte)),] )

attributeDeclSAXFunc = _rpythonic_function_(		"attributeDeclSAXFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("elem",		ctypes.POINTER(ctypes.c_ubyte)),
	("fullname",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_type",		ctypes.c_int),
	("C_def",		ctypes.c_int),
	("defaultValue",		ctypes.POINTER(ctypes.c_ubyte)),
	("tree",		ctypes.POINTER(_xmlEnumeration)),] )

elementDeclSAXFunc = _rpythonic_function_(		"elementDeclSAXFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_type",		ctypes.c_int),
	("content",		ctypes.POINTER(_xmlElementContent)),] )

unparsedEntityDeclSAXFunc = _rpythonic_function_(		"unparsedEntityDeclSAXFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("publicId",		ctypes.POINTER(ctypes.c_ubyte)),
	("systemId",		ctypes.POINTER(ctypes.c_ubyte)),
	("notationName",		ctypes.POINTER(ctypes.c_ubyte)),] )

setDocumentLocatorSAXFunc = _rpythonic_function_(		"setDocumentLocatorSAXFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("loc",		ctypes.POINTER(_xmlSAXLocator)),] )

startDocumentSAXFunc = _rpythonic_function_(		"startDocumentSAXFunc", ctypes.c_void_p, [("ctx",		ctypes.c_void_p)] )

endDocumentSAXFunc = _rpythonic_function_(		"endDocumentSAXFunc", ctypes.c_void_p, [("ctx",		ctypes.c_void_p)] )

startElementSAXFunc = _rpythonic_function_(		"startElementSAXFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("atts",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),] )

endElementSAXFunc = _rpythonic_function_(		"endElementSAXFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

attributeSAXFunc = _rpythonic_function_(		"attributeSAXFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),] )

referenceSAXFunc = _rpythonic_function_(		"referenceSAXFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

charactersSAXFunc = _rpythonic_function_(		"charactersSAXFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("ch",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

ignorableWhitespaceSAXFunc = _rpythonic_function_(		"ignorableWhitespaceSAXFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("ch",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

processingInstructionSAXFunc = _rpythonic_function_(		"processingInstructionSAXFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("target",		ctypes.POINTER(ctypes.c_ubyte)),
	("data",		ctypes.POINTER(ctypes.c_ubyte)),] )

commentSAXFunc = _rpythonic_function_(		"commentSAXFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),] )

cdataBlockSAXFunc = _rpythonic_function_(		"cdataBlockSAXFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

warningSAXFunc = _rpythonic_function_(		"warningSAXFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("msg",		ctypes.POINTER(ctypes.c_char)),] )

errorSAXFunc = _rpythonic_function_(		"errorSAXFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("msg",		ctypes.POINTER(ctypes.c_char)),] )

fatalErrorSAXFunc = _rpythonic_function_(		"fatalErrorSAXFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("msg",		ctypes.POINTER(ctypes.c_char)),] )

isStandaloneSAXFunc = _rpythonic_function_(		"isStandaloneSAXFunc", ctypes.c_int, [("ctx",		ctypes.c_void_p)] )

hasInternalSubsetSAXFunc = _rpythonic_function_(		"hasInternalSubsetSAXFunc", ctypes.c_int, [("ctx",		ctypes.c_void_p)] )

hasExternalSubsetSAXFunc = _rpythonic_function_(		"hasExternalSubsetSAXFunc", ctypes.c_int, [("ctx",		ctypes.c_void_p)] )

startElementNsSAX2Func = _rpythonic_function_(		"startElementNsSAX2Func", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("localname",		ctypes.POINTER(ctypes.c_ubyte)),
	("prefix",		ctypes.POINTER(ctypes.c_ubyte)),
	("URI",		ctypes.POINTER(ctypes.c_ubyte)),
	("nb_namespaces",		ctypes.c_int),
	("namespaces",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("nb_attributes",		ctypes.c_int),
	("nb_defaulted",		ctypes.c_int),
	("attributes",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),] )

endElementNsSAX2Func = _rpythonic_function_(		"endElementNsSAX2Func", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("localname",		ctypes.POINTER(ctypes.c_ubyte)),
	("prefix",		ctypes.POINTER(ctypes.c_ubyte)),
	("URI",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlRegisterCharEncodingHandler = _rpythonic_function_(		"xmlRegisterCharEncodingHandler", ctypes.c_void_p, [
	("handler",		ctypes.POINTER(_xmlCharEncodingHandler)),] )

xmlGetCharEncodingHandler = _rpythonic_function_(		"xmlGetCharEncodingHandler", ctypes.POINTER(_xmlCharEncodingHandler), [
	("enc",		ctypes.c_int),] )

xmlFindCharEncodingHandler = _rpythonic_function_(		"xmlFindCharEncodingHandler", ctypes.POINTER(_xmlCharEncodingHandler), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

xmlNewCharEncodingHandler = _rpythonic_function_(		"xmlNewCharEncodingHandler", ctypes.POINTER(_xmlCharEncodingHandler), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("input",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_int),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_int),)),
	("output",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_int),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_int),)),] )

xmlAddEncodingAlias = _rpythonic_function_(		"xmlAddEncodingAlias", ctypes.c_int, [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("alias",		ctypes.POINTER(ctypes.c_char)),] )

xmlExternalEntityLoader = _rpythonic_function_(		"xmlExternalEntityLoader", ctypes.POINTER(_xmlParserInput), [
	("URL",		ctypes.POINTER(ctypes.c_char)),
	("ID",		ctypes.POINTER(ctypes.c_char)),
	("context",		ctypes.POINTER(_xmlParserCtxt)),] )

iconv_open = _rpythonic_function_(		"iconv_open", ctypes.POINTER(ctypes.c_void_p), [
	("__tocode",		ctypes.POINTER(ctypes.c_char)),
	("__fromcode",		ctypes.POINTER(ctypes.c_char)),] )

iconv = _rpythonic_function_(		"iconv", ctypes.c_uint64, [
	("__cd",		ctypes.POINTER(ctypes.c_void_p)),
	("__inbuf",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__inbytesleft",		ctypes.POINTER(ctypes.c_uint64)),
	("__outbuf",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__outbytesleft",		ctypes.POINTER(ctypes.c_uint64)),] )

iconv_close = _rpythonic_function_(		"iconv_close", ctypes.c_int, [("__cd",		ctypes.c_void_p)] )

xmlCharEncodingInputFunc = _rpythonic_function_(		"xmlCharEncodingInputFunc", ctypes.c_int, [
	("out",		ctypes.POINTER(ctypes.c_ubyte)),
	("outlen",		ctypes.POINTER(ctypes.c_int)),
	("C_in",		ctypes.POINTER(ctypes.c_ubyte)),
	("inlen",		ctypes.POINTER(ctypes.c_int)),] )

xmlCharEncodingOutputFunc = _rpythonic_function_(		"xmlCharEncodingOutputFunc", ctypes.c_int, [
	("out",		ctypes.POINTER(ctypes.c_ubyte)),
	("outlen",		ctypes.POINTER(ctypes.c_int)),
	("C_in",		ctypes.POINTER(ctypes.c_ubyte)),
	("inlen",		ctypes.POINTER(ctypes.c_int)),] )

xmlInitCharEncodingHandlers = _rpythonic_function_(		"xmlInitCharEncodingHandlers", ctypes.c_void_p, [] )

xmlCleanupCharEncodingHandlers = _rpythonic_function_(		"xmlCleanupCharEncodingHandlers", ctypes.c_void_p, [] )

xmlDelEncodingAlias = _rpythonic_function_(		"xmlDelEncodingAlias", ctypes.c_int, [
	("alias",		ctypes.POINTER(ctypes.c_char)),] )

xmlGetEncodingAlias = _rpythonic_function_(		"xmlGetEncodingAlias", ctypes.POINTER(ctypes.c_char), [
	("alias",		ctypes.POINTER(ctypes.c_char)),] )

xmlCleanupEncodingAliases = _rpythonic_function_(		"xmlCleanupEncodingAliases", ctypes.c_void_p, [] )

xmlParseCharEncoding = _rpythonic_function_(		"xmlParseCharEncoding", ctypes.c_int, [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

xmlGetCharEncodingName = _rpythonic_function_(		"xmlGetCharEncodingName", ctypes.POINTER(ctypes.c_char), [
	("enc",		ctypes.c_int),] )

xmlDetectCharEncoding = _rpythonic_function_(		"xmlDetectCharEncoding", ctypes.c_int, [
	("C_in",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlCharEncOutFunc = _rpythonic_function_(		"xmlCharEncOutFunc", ctypes.c_int, [
	("handler",		ctypes.POINTER(_xmlCharEncodingHandler)),
	("out",		ctypes.POINTER(_xmlBuffer)),
	("C_in",		ctypes.POINTER(_xmlBuffer)),] )

xmlCharEncInFunc = _rpythonic_function_(		"xmlCharEncInFunc", ctypes.c_int, [
	("handler",		ctypes.POINTER(_xmlCharEncodingHandler)),
	("out",		ctypes.POINTER(_xmlBuffer)),
	("C_in",		ctypes.POINTER(_xmlBuffer)),] )

xmlCharEncFirstLine = _rpythonic_function_(		"xmlCharEncFirstLine", ctypes.c_int, [
	("handler",		ctypes.POINTER(_xmlCharEncodingHandler)),
	("out",		ctypes.POINTER(_xmlBuffer)),
	("C_in",		ctypes.POINTER(_xmlBuffer)),] )

xmlCharEncCloseFunc = _rpythonic_function_(		"xmlCharEncCloseFunc", ctypes.c_int, [
	("handler",		ctypes.POINTER(_xmlCharEncodingHandler)),] )

UTF8Toisolat1 = _rpythonic_function_(		"UTF8Toisolat1", ctypes.c_int, [
	("out",		ctypes.POINTER(ctypes.c_ubyte)),
	("outlen",		ctypes.POINTER(ctypes.c_int)),
	("C_in",		ctypes.POINTER(ctypes.c_ubyte)),
	("inlen",		ctypes.POINTER(ctypes.c_int)),] )

isolat1ToUTF8 = _rpythonic_function_(		"isolat1ToUTF8", ctypes.c_int, [
	("out",		ctypes.POINTER(ctypes.c_ubyte)),
	("outlen",		ctypes.POINTER(ctypes.c_int)),
	("C_in",		ctypes.POINTER(ctypes.c_ubyte)),
	("inlen",		ctypes.POINTER(ctypes.c_int)),] )

xmlInputMatchCallback = _rpythonic_function_(		"xmlInputMatchCallback", ctypes.c_int, [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

xmlInputOpenCallback = _rpythonic_function_(		"xmlInputOpenCallback", ctypes.POINTER(ctypes.c_void_p), [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

xmlInputReadCallback = _rpythonic_function_(		"xmlInputReadCallback", ctypes.c_int, [
	("context",		ctypes.POINTER(ctypes.c_void_p)),
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

xmlInputCloseCallback = _rpythonic_function_(		"xmlInputCloseCallback", ctypes.c_int, [("context",		ctypes.c_void_p)] )

xmlOutputMatchCallback = _rpythonic_function_(		"xmlOutputMatchCallback", ctypes.c_int, [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

xmlOutputOpenCallback = _rpythonic_function_(		"xmlOutputOpenCallback", ctypes.POINTER(ctypes.c_void_p), [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

xmlOutputWriteCallback = _rpythonic_function_(		"xmlOutputWriteCallback", ctypes.c_int, [
	("context",		ctypes.POINTER(ctypes.c_void_p)),
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

xmlOutputCloseCallback = _rpythonic_function_(		"xmlOutputCloseCallback", ctypes.c_int, [("context",		ctypes.c_void_p)] )

atof = _rpythonic_function_(		"atof", ctypes.c_double, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),] )

atoi = _rpythonic_function_(		"atoi", ctypes.c_int, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),] )

atol = _rpythonic_function_(		"atol", ctypes.c_int64, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),] )

atoll = _rpythonic_function_(		"atoll", ctypes.c_longlong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),] )

strtod = _rpythonic_function_(		"strtod", ctypes.c_double, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

strtof = _rpythonic_function_(		"strtof", ctypes.c_float, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

strtold = _rpythonic_function_(		"strtold", ctypes.c_double, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

strtol = _rpythonic_function_(		"strtol", ctypes.c_int64, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

strtoul = _rpythonic_function_(		"strtoul", ctypes.c_uint64, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

strtoq = _rpythonic_function_(		"strtoq", ctypes.c_longlong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

strtouq = _rpythonic_function_(		"strtouq", ctypes.c_ulonglong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

strtoll = _rpythonic_function_(		"strtoll", ctypes.c_longlong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

strtoull = _rpythonic_function_(		"strtoull", ctypes.c_ulonglong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

l64a = _rpythonic_function_(		"l64a", ctypes.POINTER(ctypes.c_char), [
	("__n",		ctypes.c_int64),] )

a64l = _rpythonic_function_(		"a64l", ctypes.c_int64, [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

select = _rpythonic_function_(		"select", ctypes.c_int, [
	("__nfds",		ctypes.c_int),
	("__readfds",		ctypes.POINTER(fd_set)),
	("__writefds",		ctypes.POINTER(fd_set)),
	("__exceptfds",		ctypes.POINTER(fd_set)),
	("__timeout",		ctypes.POINTER(timeval)),] )

pselect = _rpythonic_function_(		"pselect", ctypes.c_int, [
	("__nfds",		ctypes.c_int),
	("__readfds",		ctypes.POINTER(fd_set)),
	("__writefds",		ctypes.POINTER(fd_set)),
	("__exceptfds",		ctypes.POINTER(fd_set)),
	("__timeout",		ctypes.POINTER(timespec)),
	("__sigmask",		ctypes.POINTER(__sigset_t)),] )

gnu_dev_major = _rpythonic_function_(		"gnu_dev_major", ctypes.c_uint, [
	("__dev",		ctypes.c_ulonglong),] )

gnu_dev_minor = _rpythonic_function_(		"gnu_dev_minor", ctypes.c_uint, [
	("__dev",		ctypes.c_ulonglong),] )

gnu_dev_makedev = _rpythonic_function_(		"gnu_dev_makedev", ctypes.c_ulonglong, [
	("__major",		ctypes.c_uint),
	("__minor",		ctypes.c_uint),] )

random = _rpythonic_function_(		"random", ctypes.c_int64, [] )

srandom = _rpythonic_function_(		"srandom", ctypes.c_void_p, [
	("__seed",		ctypes.c_uint),] )

initstate = _rpythonic_function_(		"initstate", ctypes.POINTER(ctypes.c_char), [
	("__seed",		ctypes.c_uint),
	("__statebuf",		ctypes.POINTER(ctypes.c_char)),
	("__statelen",		ctypes.c_uint64),] )

setstate = _rpythonic_function_(		"setstate", ctypes.POINTER(ctypes.c_char), [
	("__statebuf",		ctypes.POINTER(ctypes.c_char)),] )

random_r = _rpythonic_function_(		"random_r", ctypes.c_int, [
	("__buf",		ctypes.POINTER(random_data)),
	("__result",		ctypes.POINTER(ctypes.c_int32)),] )

srandom_r = _rpythonic_function_(		"srandom_r", ctypes.c_int, [
	("__seed",		ctypes.c_uint),
	("__buf",		ctypes.POINTER(random_data)),] )

initstate_r = _rpythonic_function_(		"initstate_r", ctypes.c_int, [
	("__seed",		ctypes.c_uint),
	("__statebuf",		ctypes.POINTER(ctypes.c_char)),
	("__statelen",		ctypes.c_uint64),
	("__buf",		ctypes.POINTER(random_data)),] )

setstate_r = _rpythonic_function_(		"setstate_r", ctypes.c_int, [
	("__statebuf",		ctypes.POINTER(ctypes.c_char)),
	("__buf",		ctypes.POINTER(random_data)),] )

rand = _rpythonic_function_(		"rand", ctypes.c_int, [] )

srand = _rpythonic_function_(		"srand", ctypes.c_void_p, [
	("__seed",		ctypes.c_uint),] )

rand_r = _rpythonic_function_(		"rand_r", ctypes.c_int, [
	("__seed",		ctypes.POINTER(ctypes.c_uint)),] )

drand48 = _rpythonic_function_(		"drand48", ctypes.c_double, [] )

erand48 = _rpythonic_function_(		"erand48", ctypes.c_double, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),] )

lrand48 = _rpythonic_function_(		"lrand48", ctypes.c_int64, [] )

nrand48 = _rpythonic_function_(		"nrand48", ctypes.c_int64, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),] )

mrand48 = _rpythonic_function_(		"mrand48", ctypes.c_int64, [] )

jrand48 = _rpythonic_function_(		"jrand48", ctypes.c_int64, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),] )

srand48 = _rpythonic_function_(		"srand48", ctypes.c_void_p, [
	("__seedval",		ctypes.c_int64),] )

seed48 = _rpythonic_function_(		"seed48", ctypes.POINTER(ctypes.c_uint16), [
	("__seed16v",		( ctypes.c_uint16 * 3 )),] )

lcong48 = _rpythonic_function_(		"lcong48", ctypes.c_void_p, [
	("__param",		( ctypes.c_uint16 * 7 )),] )

drand48_r = _rpythonic_function_(		"drand48_r", ctypes.c_int, [
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_double)),] )

erand48_r = _rpythonic_function_(		"erand48_r", ctypes.c_int, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_double)),] )

lrand48_r = _rpythonic_function_(		"lrand48_r", ctypes.c_int, [
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_int64)),] )

nrand48_r = _rpythonic_function_(		"nrand48_r", ctypes.c_int, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_int64)),] )

mrand48_r = _rpythonic_function_(		"mrand48_r", ctypes.c_int, [
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_int64)),] )

jrand48_r = _rpythonic_function_(		"jrand48_r", ctypes.c_int, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_int64)),] )

srand48_r = _rpythonic_function_(		"srand48_r", ctypes.c_int, [
	("__seedval",		ctypes.c_int64),
	("__buffer",		ctypes.POINTER(drand48_data)),] )

seed48_r = _rpythonic_function_(		"seed48_r", ctypes.c_int, [
	("__seed16v",		( ctypes.c_uint16 * 3 )),
	("__buffer",		ctypes.POINTER(drand48_data)),] )

lcong48_r = _rpythonic_function_(		"lcong48_r", ctypes.c_int, [
	("__param",		( ctypes.c_uint16 * 7 )),
	("__buffer",		ctypes.POINTER(drand48_data)),] )

cfree = _rpythonic_function_(		"cfree", ctypes.c_void_p, [("__ptr",		ctypes.c_void_p)] )

alloca = _rpythonic_function_(		"alloca", ctypes.POINTER(ctypes.c_void_p), [
	("__size",		ctypes.c_uint64),] )

valloc = _rpythonic_function_(		"valloc", ctypes.POINTER(ctypes.c_void_p), [
	("__size",		ctypes.c_uint64),] )

posix_memalign = _rpythonic_function_(		"posix_memalign", ctypes.c_int, [
	("__memptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("__alignment",		ctypes.c_uint64),
	("__size",		ctypes.c_uint64),] )

abort = _rpythonic_function_(		"abort", ctypes.c_void_p, [] )

atexit = _rpythonic_function_(		"atexit", ctypes.c_int, [
	("__func",		ctypes.c_void_p),] )

on_exit = _rpythonic_function_(		"on_exit", ctypes.c_int, [
	("__func",		ctypes.c_void_p),
	("__arg",		ctypes.POINTER(ctypes.c_void_p)),] )

exit = _rpythonic_function_(		"exit", ctypes.c_void_p, [
	("__status",		ctypes.c_int),] )

_Exit = _rpythonic_function_(		"_Exit", ctypes.c_void_p, [
	("__status",		ctypes.c_int),] )

getenv = _rpythonic_function_(		"getenv", ctypes.POINTER(ctypes.c_char), [
	("__name",		ctypes.POINTER(ctypes.c_char)),] )

putenv = _rpythonic_function_(		"putenv", ctypes.c_int, [
	("__string",		ctypes.POINTER(ctypes.c_char)),] )

setenv = _rpythonic_function_(		"setenv", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),
	("__value",		ctypes.POINTER(ctypes.c_char)),
	("__replace",		ctypes.c_int),] )

unsetenv = _rpythonic_function_(		"unsetenv", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),] )

clearenv = _rpythonic_function_(		"clearenv", ctypes.c_int, [] )

mktemp = _rpythonic_function_(		"mktemp", ctypes.POINTER(ctypes.c_char), [
	("__template",		ctypes.POINTER(ctypes.c_char)),] )

mkstemp = _rpythonic_function_(		"mkstemp", ctypes.c_int, [
	("__template",		ctypes.POINTER(ctypes.c_char)),] )

mkstemps = _rpythonic_function_(		"mkstemps", ctypes.c_int, [
	("__template",		ctypes.POINTER(ctypes.c_char)),
	("__suffixlen",		ctypes.c_int),] )

mkdtemp = _rpythonic_function_(		"mkdtemp", ctypes.POINTER(ctypes.c_char), [
	("__template",		ctypes.POINTER(ctypes.c_char)),] )

system = _rpythonic_function_(		"system", ctypes.c_int, [
	("__command",		ctypes.POINTER(ctypes.c_char)),] )

realpath = _rpythonic_function_(		"realpath", ctypes.POINTER(ctypes.c_char), [
	("__name",		ctypes.POINTER(ctypes.c_char)),
	("__resolved",		ctypes.POINTER(ctypes.c_char)),] )

bsearch = _rpythonic_function_(		"bsearch", ctypes.POINTER(ctypes.c_void_p), [
	("__key",		ctypes.POINTER(ctypes.c_void_p)),
	("__base",		ctypes.POINTER(ctypes.c_void_p)),
	("__nmemb",		ctypes.c_uint64),
	("__size",		ctypes.c_uint64),
	("__compar",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

qsort = _rpythonic_function_(		"qsort", ctypes.c_void_p, [
	("__base",		ctypes.POINTER(ctypes.c_void_p)),
	("__nmemb",		ctypes.c_uint64),
	("__size",		ctypes.c_uint64),
	("__compar",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

abs = _rpythonic_function_(		"abs", ctypes.c_int, [
	("__x",		ctypes.c_int),] )

labs = _rpythonic_function_(		"labs", ctypes.c_int64, [
	("__x",		ctypes.c_int64),] )

llabs = _rpythonic_function_(		"llabs", ctypes.c_longlong, [
	("__x",		ctypes.c_longlong),] )

div = _rpythonic_function_(		"div", div_t, [
	("__numer",		ctypes.c_int),
	("__denom",		ctypes.c_int),] )

ldiv = _rpythonic_function_(		"ldiv", ldiv_t, [
	("__numer",		ctypes.c_int64),
	("__denom",		ctypes.c_int64),] )

lldiv = _rpythonic_function_(		"lldiv", lldiv_t, [
	("__numer",		ctypes.c_longlong),
	("__denom",		ctypes.c_longlong),] )

ecvt = _rpythonic_function_(		"ecvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),] )

fcvt = _rpythonic_function_(		"fcvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),] )

gcvt = _rpythonic_function_(		"gcvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

qecvt = _rpythonic_function_(		"qecvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),] )

qfcvt = _rpythonic_function_(		"qfcvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),] )

qgcvt = _rpythonic_function_(		"qgcvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

ecvt_r = _rpythonic_function_(		"ecvt_r", ctypes.c_int, [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint64),] )

fcvt_r = _rpythonic_function_(		"fcvt_r", ctypes.c_int, [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint64),] )

qecvt_r = _rpythonic_function_(		"qecvt_r", ctypes.c_int, [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint64),] )

qfcvt_r = _rpythonic_function_(		"qfcvt_r", ctypes.c_int, [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint64),] )

mblen = _rpythonic_function_(		"mblen", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint64),] )

mbtowc = _rpythonic_function_(		"mbtowc", ctypes.c_int, [
	("__pwc",		ctypes.POINTER(ctypes.c_int)),
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint64),] )

wctomb = _rpythonic_function_(		"wctomb", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__wchar",		ctypes.c_int),] )

mbstowcs = _rpythonic_function_(		"mbstowcs", ctypes.c_uint64, [
	("__pwcs",		ctypes.POINTER(ctypes.c_int)),
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint64),] )

wcstombs = _rpythonic_function_(		"wcstombs", ctypes.c_uint64, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__pwcs",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint64),] )

rpmatch = _rpythonic_function_(		"rpmatch", ctypes.c_int, [
	("__response",		ctypes.POINTER(ctypes.c_char)),] )

getsubopt = _rpythonic_function_(		"getsubopt", ctypes.c_int, [
	("__optionp",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__tokens",		ctypes.POINTER(ctypes.c_char)),
	("__valuep",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

getloadavg = _rpythonic_function_(		"getloadavg", ctypes.c_int, [
	("__loadavg",		ctypes.c_double),
	("__nelem",		ctypes.c_int),] )

xlinkNodeDetectFunc = _rpythonic_function_(		"xlinkNodeDetectFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("node",		ctypes.POINTER(_xmlNode)),] )

xlinkSimpleLinkFunk = _rpythonic_function_(		"xlinkSimpleLinkFunk", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("node",		ctypes.POINTER(_xmlNode)),
	("href",		ctypes.POINTER(ctypes.c_ubyte)),
	("role",		ctypes.POINTER(ctypes.c_ubyte)),
	("title",		ctypes.POINTER(ctypes.c_ubyte)),] )

xlinkExtendedLinkFunk = _rpythonic_function_(		"xlinkExtendedLinkFunk", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("node",		ctypes.POINTER(_xmlNode)),
	("nbLocators",		ctypes.c_int),
	("hrefs",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("roles",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("nbArcs",		ctypes.c_int),
	("from",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("to",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("show",		ctypes.POINTER(ctypes.c_int)),
	("actuate",		ctypes.POINTER(ctypes.c_int)),
	("nbTitles",		ctypes.c_int),
	("titles",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("langs",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),] )

xlinkExtendedLinkSetFunk = _rpythonic_function_(		"xlinkExtendedLinkSetFunk", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("node",		ctypes.POINTER(_xmlNode)),
	("nbLocators",		ctypes.c_int),
	("hrefs",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("roles",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("nbTitles",		ctypes.c_int),
	("titles",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("langs",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),] )

xlinkGetDefaultDetect = _rpythonic_function_(		"xlinkGetDefaultDetect", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_xmlNode),), [] )

xlinkSetDefaultDetect = _rpythonic_function_(		"xlinkSetDefaultDetect", ctypes.c_void_p, [
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_xmlNode),)),] )

xlinkGetDefaultHandler = _rpythonic_function_(		"xlinkGetDefaultHandler", ctypes.POINTER(_xlinkHandler), [] )

xlinkSetDefaultHandler = _rpythonic_function_(		"xlinkSetDefaultHandler", ctypes.c_void_p, [
	("handler",		ctypes.POINTER(_xlinkHandler)),] )

xlinkIsLink = _rpythonic_function_(		"xlinkIsLink", ctypes.c_int, [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("node",		ctypes.POINTER(_xmlNode)),] )

setDocumentLocator = _rpythonic_function_(		"setDocumentLocator", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("loc",		ctypes.POINTER(_xmlSAXLocator)),] )

isStandalone = _rpythonic_function_(		"isStandalone", ctypes.c_int, [("ctx",		ctypes.c_void_p)] )

hasInternalSubset = _rpythonic_function_(		"hasInternalSubset", ctypes.c_int, [("ctx",		ctypes.c_void_p)] )

hasExternalSubset = _rpythonic_function_(		"hasExternalSubset", ctypes.c_int, [("ctx",		ctypes.c_void_p)] )

internalSubset = _rpythonic_function_(		"internalSubset", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("ExternalID",		ctypes.POINTER(ctypes.c_ubyte)),
	("SystemID",		ctypes.POINTER(ctypes.c_ubyte)),] )

externalSubset = _rpythonic_function_(		"externalSubset", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("ExternalID",		ctypes.POINTER(ctypes.c_ubyte)),
	("SystemID",		ctypes.POINTER(ctypes.c_ubyte)),] )

getEntity = _rpythonic_function_(		"getEntity", ctypes.POINTER(_xmlEntity), [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

getParameterEntity = _rpythonic_function_(		"getParameterEntity", ctypes.POINTER(_xmlEntity), [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

resolveEntity = _rpythonic_function_(		"resolveEntity", ctypes.POINTER(_xmlParserInput), [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("publicId",		ctypes.POINTER(ctypes.c_ubyte)),
	("systemId",		ctypes.POINTER(ctypes.c_ubyte)),] )

entityDecl = _rpythonic_function_(		"entityDecl", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_type",		ctypes.c_int),
	("publicId",		ctypes.POINTER(ctypes.c_ubyte)),
	("systemId",		ctypes.POINTER(ctypes.c_ubyte)),
	("content",		ctypes.POINTER(ctypes.c_ubyte)),] )

attributeDecl = _rpythonic_function_(		"attributeDecl", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("elem",		ctypes.POINTER(ctypes.c_ubyte)),
	("fullname",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_type",		ctypes.c_int),
	("C_def",		ctypes.c_int),
	("defaultValue",		ctypes.POINTER(ctypes.c_ubyte)),
	("tree",		ctypes.POINTER(_xmlEnumeration)),] )

elementDecl = _rpythonic_function_(		"elementDecl", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_type",		ctypes.c_int),
	("content",		ctypes.POINTER(_xmlElementContent)),] )

notationDecl = _rpythonic_function_(		"notationDecl", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("publicId",		ctypes.POINTER(ctypes.c_ubyte)),
	("systemId",		ctypes.POINTER(ctypes.c_ubyte)),] )

unparsedEntityDecl = _rpythonic_function_(		"unparsedEntityDecl", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("publicId",		ctypes.POINTER(ctypes.c_ubyte)),
	("systemId",		ctypes.POINTER(ctypes.c_ubyte)),
	("notationName",		ctypes.POINTER(ctypes.c_ubyte)),] )

startDocument = _rpythonic_function_(		"startDocument", ctypes.c_void_p, [("ctx",		ctypes.c_void_p)] )

endDocument = _rpythonic_function_(		"endDocument", ctypes.c_void_p, [("ctx",		ctypes.c_void_p)] )

attribute = _rpythonic_function_(		"attribute", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("fullname",		ctypes.POINTER(ctypes.c_ubyte)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),] )

startElement = _rpythonic_function_(		"startElement", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("fullname",		ctypes.POINTER(ctypes.c_ubyte)),
	("atts",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),] )

endElement = _rpythonic_function_(		"endElement", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

reference = _rpythonic_function_(		"reference", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

characters = _rpythonic_function_(		"characters", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("ch",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

ignorableWhitespace = _rpythonic_function_(		"ignorableWhitespace", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("ch",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

processingInstruction = _rpythonic_function_(		"processingInstruction", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("target",		ctypes.POINTER(ctypes.c_ubyte)),
	("data",		ctypes.POINTER(ctypes.c_ubyte)),] )

globalNamespace = _rpythonic_function_(		"globalNamespace", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("href",		ctypes.POINTER(ctypes.c_ubyte)),
	("prefix",		ctypes.POINTER(ctypes.c_ubyte)),] )

setNamespace = _rpythonic_function_(		"setNamespace", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

getNamespace = _rpythonic_function_(		"getNamespace", ctypes.POINTER(_xmlNs), [("ctx",		ctypes.c_void_p)] )

checkNamespace = _rpythonic_function_(		"checkNamespace", ctypes.c_int, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("nameSpace",		ctypes.POINTER(ctypes.c_ubyte)),] )

namespaceDecl = _rpythonic_function_(		"namespaceDecl", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("href",		ctypes.POINTER(ctypes.c_ubyte)),
	("prefix",		ctypes.POINTER(ctypes.c_ubyte)),] )

comment = _rpythonic_function_(		"comment", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),] )

cdataBlock = _rpythonic_function_(		"cdataBlock", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

initxmlDefaultSAXHandler = _rpythonic_function_(		"initxmlDefaultSAXHandler", ctypes.c_void_p, [
	("hdlr",		ctypes.POINTER(_xmlSAXHandlerV1)),
	("warning",		ctypes.c_int),] )

inithtmlDefaultSAXHandler = _rpythonic_function_(		"inithtmlDefaultSAXHandler", ctypes.c_void_p, [
	("hdlr",		ctypes.POINTER(_xmlSAXHandlerV1)),] )

initdocbDefaultSAXHandler = _rpythonic_function_(		"initdocbDefaultSAXHandler", ctypes.c_void_p, [
	("hdlr",		ctypes.POINTER(_xmlSAXHandlerV1)),] )

xmlSAX2GetPublicId = _rpythonic_function_(		"xmlSAX2GetPublicId", ctypes.POINTER(ctypes.c_ubyte), [("ctx",		ctypes.c_void_p)] )

xmlSAX2GetSystemId = _rpythonic_function_(		"xmlSAX2GetSystemId", ctypes.POINTER(ctypes.c_ubyte), [("ctx",		ctypes.c_void_p)] )

xmlSAX2SetDocumentLocator = _rpythonic_function_(		"xmlSAX2SetDocumentLocator", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("loc",		ctypes.POINTER(_xmlSAXLocator)),] )

xmlSAX2GetLineNumber = _rpythonic_function_(		"xmlSAX2GetLineNumber", ctypes.c_int, [("ctx",		ctypes.c_void_p)] )

xmlSAX2GetColumnNumber = _rpythonic_function_(		"xmlSAX2GetColumnNumber", ctypes.c_int, [("ctx",		ctypes.c_void_p)] )

xmlSAX2IsStandalone = _rpythonic_function_(		"xmlSAX2IsStandalone", ctypes.c_int, [("ctx",		ctypes.c_void_p)] )

xmlSAX2HasInternalSubset = _rpythonic_function_(		"xmlSAX2HasInternalSubset", ctypes.c_int, [("ctx",		ctypes.c_void_p)] )

xmlSAX2HasExternalSubset = _rpythonic_function_(		"xmlSAX2HasExternalSubset", ctypes.c_int, [("ctx",		ctypes.c_void_p)] )

xmlSAX2InternalSubset = _rpythonic_function_(		"xmlSAX2InternalSubset", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("ExternalID",		ctypes.POINTER(ctypes.c_ubyte)),
	("SystemID",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlSAX2ExternalSubset = _rpythonic_function_(		"xmlSAX2ExternalSubset", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("ExternalID",		ctypes.POINTER(ctypes.c_ubyte)),
	("SystemID",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlSAX2GetEntity = _rpythonic_function_(		"xmlSAX2GetEntity", ctypes.POINTER(_xmlEntity), [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlSAX2GetParameterEntity = _rpythonic_function_(		"xmlSAX2GetParameterEntity", ctypes.POINTER(_xmlEntity), [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlSAX2ResolveEntity = _rpythonic_function_(		"xmlSAX2ResolveEntity", ctypes.POINTER(_xmlParserInput), [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("publicId",		ctypes.POINTER(ctypes.c_ubyte)),
	("systemId",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlSAX2EntityDecl = _rpythonic_function_(		"xmlSAX2EntityDecl", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_type",		ctypes.c_int),
	("publicId",		ctypes.POINTER(ctypes.c_ubyte)),
	("systemId",		ctypes.POINTER(ctypes.c_ubyte)),
	("content",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlSAX2AttributeDecl = _rpythonic_function_(		"xmlSAX2AttributeDecl", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("elem",		ctypes.POINTER(ctypes.c_ubyte)),
	("fullname",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_type",		ctypes.c_int),
	("C_def",		ctypes.c_int),
	("defaultValue",		ctypes.POINTER(ctypes.c_ubyte)),
	("tree",		ctypes.POINTER(_xmlEnumeration)),] )

xmlSAX2ElementDecl = _rpythonic_function_(		"xmlSAX2ElementDecl", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_type",		ctypes.c_int),
	("content",		ctypes.POINTER(_xmlElementContent)),] )

xmlSAX2NotationDecl = _rpythonic_function_(		"xmlSAX2NotationDecl", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("publicId",		ctypes.POINTER(ctypes.c_ubyte)),
	("systemId",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlSAX2UnparsedEntityDecl = _rpythonic_function_(		"xmlSAX2UnparsedEntityDecl", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("publicId",		ctypes.POINTER(ctypes.c_ubyte)),
	("systemId",		ctypes.POINTER(ctypes.c_ubyte)),
	("notationName",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlSAX2StartDocument = _rpythonic_function_(		"xmlSAX2StartDocument", ctypes.c_void_p, [("ctx",		ctypes.c_void_p)] )

xmlSAX2EndDocument = _rpythonic_function_(		"xmlSAX2EndDocument", ctypes.c_void_p, [("ctx",		ctypes.c_void_p)] )

xmlSAX2StartElement = _rpythonic_function_(		"xmlSAX2StartElement", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("fullname",		ctypes.POINTER(ctypes.c_ubyte)),
	("atts",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),] )

xmlSAX2EndElement = _rpythonic_function_(		"xmlSAX2EndElement", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlSAX2StartElementNs = _rpythonic_function_(		"xmlSAX2StartElementNs", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("localname",		ctypes.POINTER(ctypes.c_ubyte)),
	("prefix",		ctypes.POINTER(ctypes.c_ubyte)),
	("URI",		ctypes.POINTER(ctypes.c_ubyte)),
	("nb_namespaces",		ctypes.c_int),
	("namespaces",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("nb_attributes",		ctypes.c_int),
	("nb_defaulted",		ctypes.c_int),
	("attributes",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),] )

xmlSAX2EndElementNs = _rpythonic_function_(		"xmlSAX2EndElementNs", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("localname",		ctypes.POINTER(ctypes.c_ubyte)),
	("prefix",		ctypes.POINTER(ctypes.c_ubyte)),
	("URI",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlSAX2Reference = _rpythonic_function_(		"xmlSAX2Reference", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlSAX2Characters = _rpythonic_function_(		"xmlSAX2Characters", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("ch",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlSAX2IgnorableWhitespace = _rpythonic_function_(		"xmlSAX2IgnorableWhitespace", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("ch",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlSAX2ProcessingInstruction = _rpythonic_function_(		"xmlSAX2ProcessingInstruction", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("target",		ctypes.POINTER(ctypes.c_ubyte)),
	("data",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlSAX2Comment = _rpythonic_function_(		"xmlSAX2Comment", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlSAX2CDataBlock = _rpythonic_function_(		"xmlSAX2CDataBlock", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlSAXDefaultVersion = _rpythonic_function_(		"xmlSAXDefaultVersion", ctypes.c_int, [
	("version",		ctypes.c_int),] )

xmlSAXVersion = _rpythonic_function_(		"xmlSAXVersion", ctypes.c_int, [
	("hdlr",		ctypes.POINTER(_xmlSAXHandler)),
	("version",		ctypes.c_int),] )

xmlSAX2InitDefaultSAXHandler = _rpythonic_function_(		"xmlSAX2InitDefaultSAXHandler", ctypes.c_void_p, [
	("hdlr",		ctypes.POINTER(_xmlSAXHandler)),
	("warning",		ctypes.c_int),] )

xmlSAX2InitHtmlDefaultSAXHandler = _rpythonic_function_(		"xmlSAX2InitHtmlDefaultSAXHandler", ctypes.c_void_p, [
	("hdlr",		ctypes.POINTER(_xmlSAXHandler)),] )

htmlDefaultSAXHandlerInit = _rpythonic_function_(		"htmlDefaultSAXHandlerInit", ctypes.c_void_p, [] )

xmlSAX2InitDocbDefaultSAXHandler = _rpythonic_function_(		"xmlSAX2InitDocbDefaultSAXHandler", ctypes.c_void_p, [
	("hdlr",		ctypes.POINTER(_xmlSAXHandler)),] )

docbDefaultSAXHandlerInit = _rpythonic_function_(		"docbDefaultSAXHandlerInit", ctypes.c_void_p, [] )

xmlDefaultSAXHandlerInit = _rpythonic_function_(		"xmlDefaultSAXHandlerInit", ctypes.c_void_p, [] )

xmlFreeFunc = _rpythonic_function_(		"xmlFreeFunc", ctypes.c_void_p, [("mem",		ctypes.c_void_p)] )

xmlMallocFunc = _rpythonic_function_(		"xmlMallocFunc", ctypes.POINTER(ctypes.c_void_p), [
	("size",		ctypes.c_uint64),] )

xmlReallocFunc = _rpythonic_function_(		"xmlReallocFunc", ctypes.POINTER(ctypes.c_void_p), [
	("mem",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.c_uint64),] )

xmlStrdupFunc = _rpythonic_function_(		"xmlStrdupFunc", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

xmlMemSetup = _rpythonic_function_(		"xmlMemSetup", ctypes.c_int, [
	("freeFunc",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("mallocFunc",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), ctypes.c_uint64,))),
	("reallocFunc",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), ctypes.POINTER(ctypes.c_void_p),ctypes.c_uint64,))),
	("strdupFunc",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_char),))),] )

xmlMemGet = _rpythonic_function_(		"xmlMemGet", ctypes.c_int, [
	("freeFunc",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.c_void_p, ))),
	("mallocFunc",		ctypes.POINTER(ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), ctypes.c_uint64,)))),
	("reallocFunc",		ctypes.POINTER(ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), ctypes.POINTER(ctypes.c_void_p),ctypes.c_uint64,)))),
	("strdupFunc",		ctypes.POINTER(ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_char),)))),] )

xmlGcMemSetup = _rpythonic_function_(		"xmlGcMemSetup", ctypes.c_int, [
	("freeFunc",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("mallocFunc",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), ctypes.c_uint64,))),
	("mallocAtomicFunc",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), ctypes.c_uint64,))),
	("reallocFunc",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), ctypes.POINTER(ctypes.c_void_p),ctypes.c_uint64,))),
	("strdupFunc",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_char),))),] )

xmlGcMemGet = _rpythonic_function_(		"xmlGcMemGet", ctypes.c_int, [
	("freeFunc",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.c_void_p, ))),
	("mallocFunc",		ctypes.POINTER(ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), ctypes.c_uint64,)))),
	("mallocAtomicFunc",		ctypes.POINTER(ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), ctypes.c_uint64,)))),
	("reallocFunc",		ctypes.POINTER(ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), ctypes.POINTER(ctypes.c_void_p),ctypes.c_uint64,)))),
	("strdupFunc",		ctypes.POINTER(ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_char),)))),] )

xmlInitMemory = _rpythonic_function_(		"xmlInitMemory", ctypes.c_int, [] )

xmlCleanupMemory = _rpythonic_function_(		"xmlCleanupMemory", ctypes.c_void_p, [] )

xmlMemUsed = _rpythonic_function_(		"xmlMemUsed", ctypes.c_int, [] )

xmlMemBlocks = _rpythonic_function_(		"xmlMemBlocks", ctypes.c_int, [] )

xmlMemDisplay = _rpythonic_function_(		"xmlMemDisplay", ctypes.c_void_p, [
	("fp",		ctypes.POINTER(_IO_FILE)),] )

xmlMemDisplayLast = _rpythonic_function_(		"xmlMemDisplayLast", ctypes.c_void_p, [
	("fp",		ctypes.POINTER(_IO_FILE)),
	("nbBytes",		ctypes.c_long),] )

xmlMemShow = _rpythonic_function_(		"xmlMemShow", ctypes.c_void_p, [
	("fp",		ctypes.POINTER(_IO_FILE)),
	("nr",		ctypes.c_int),] )

xmlMemoryDump = _rpythonic_function_(		"xmlMemoryDump", ctypes.c_void_p, [] )

xmlMemMalloc = _rpythonic_function_(		"xmlMemMalloc", ctypes.POINTER(ctypes.c_void_p), [
	("size",		ctypes.c_uint64),] )

xmlMemRealloc = _rpythonic_function_(		"xmlMemRealloc", ctypes.POINTER(ctypes.c_void_p), [
	("ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.c_uint64),] )

xmlMemFree = _rpythonic_function_(		"xmlMemFree", ctypes.c_void_p, [("ptr",		ctypes.c_void_p)] )

xmlMemoryStrdup = _rpythonic_function_(		"xmlMemoryStrdup", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

xmlMallocLoc = _rpythonic_function_(		"xmlMallocLoc", ctypes.POINTER(ctypes.c_void_p), [
	("size",		ctypes.c_uint64),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),] )

xmlReallocLoc = _rpythonic_function_(		"xmlReallocLoc", ctypes.POINTER(ctypes.c_void_p), [
	("ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.c_uint64),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),] )

xmlMallocAtomicLoc = _rpythonic_function_(		"xmlMallocAtomicLoc", ctypes.POINTER(ctypes.c_void_p), [
	("size",		ctypes.c_uint64),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),] )

xmlMemStrdupLoc = _rpythonic_function_(		"xmlMemStrdupLoc", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),] )

xmlInitGlobals = _rpythonic_function_(		"xmlInitGlobals", ctypes.c_void_p, [] )

xmlCleanupGlobals = _rpythonic_function_(		"xmlCleanupGlobals", ctypes.c_void_p, [] )

xmlParserInputBufferCreateFilenameFunc = _rpythonic_function_(		"xmlParserInputBufferCreateFilenameFunc", ctypes.POINTER(_xmlParserInputBuffer), [
	("URI",		ctypes.POINTER(ctypes.c_char)),
	("enc",		ctypes.c_int),] )

xmlOutputBufferCreateFilenameFunc = _rpythonic_function_(		"xmlOutputBufferCreateFilenameFunc", ctypes.POINTER(_xmlOutputBuffer), [
	("URI",		ctypes.POINTER(ctypes.c_char)),
	("encoder",		ctypes.POINTER(_xmlCharEncodingHandler)),
	("compression",		ctypes.c_int),] )

xmlParserInputBufferCreateFilenameDefault = _rpythonic_function_(		"xmlParserInputBufferCreateFilenameDefault", ctypes.CFUNCTYPE(ctypes.POINTER(_xmlParserInputBuffer), ctypes.POINTER(ctypes.c_char),ctypes.c_int,), [
	("func",		ctypes.CFUNCTYPE(ctypes.POINTER(_xmlParserInputBuffer), ctypes.POINTER(ctypes.c_char),ctypes.c_int,)),] )

xmlOutputBufferCreateFilenameDefault = _rpythonic_function_(		"xmlOutputBufferCreateFilenameDefault", ctypes.CFUNCTYPE(ctypes.POINTER(_xmlOutputBuffer), ctypes.POINTER(ctypes.c_char),ctypes.POINTER(_xmlCharEncodingHandler),ctypes.c_int,), [
	("func",		ctypes.CFUNCTYPE(ctypes.POINTER(_xmlOutputBuffer), ctypes.POINTER(ctypes.c_char),ctypes.POINTER(_xmlCharEncodingHandler),ctypes.c_int,)),] )

xmlRegisterNodeFunc = _rpythonic_function_(		"xmlRegisterNodeFunc", ctypes.c_void_p, [
	("node",		ctypes.POINTER(_xmlNode)),] )

xmlDeregisterNodeFunc = _rpythonic_function_(		"xmlDeregisterNodeFunc", ctypes.c_void_p, [
	("node",		ctypes.POINTER(_xmlNode)),] )

xmlNewMutex = _rpythonic_function_(		"xmlNewMutex", ctypes.POINTER(_xmlMutex), [] )

xmlMutexLock = _rpythonic_function_(		"xmlMutexLock", ctypes.c_void_p, [
	("tok",		ctypes.POINTER(_xmlMutex)),] )

xmlMutexUnlock = _rpythonic_function_(		"xmlMutexUnlock", ctypes.c_void_p, [
	("tok",		ctypes.POINTER(_xmlMutex)),] )

xmlFreeMutex = _rpythonic_function_(		"xmlFreeMutex", ctypes.c_void_p, [
	("tok",		ctypes.POINTER(_xmlMutex)),] )

xmlNewRMutex = _rpythonic_function_(		"xmlNewRMutex", ctypes.POINTER(_xmlRMutex), [] )

xmlRMutexLock = _rpythonic_function_(		"xmlRMutexLock", ctypes.c_void_p, [
	("tok",		ctypes.POINTER(_xmlRMutex)),] )

xmlRMutexUnlock = _rpythonic_function_(		"xmlRMutexUnlock", ctypes.c_void_p, [
	("tok",		ctypes.POINTER(_xmlRMutex)),] )

xmlFreeRMutex = _rpythonic_function_(		"xmlFreeRMutex", ctypes.c_void_p, [
	("tok",		ctypes.POINTER(_xmlRMutex)),] )

xmlInitThreads = _rpythonic_function_(		"xmlInitThreads", ctypes.c_void_p, [] )

xmlLockLibrary = _rpythonic_function_(		"xmlLockLibrary", ctypes.c_void_p, [] )

xmlUnlockLibrary = _rpythonic_function_(		"xmlUnlockLibrary", ctypes.c_void_p, [] )

xmlGetThreadId = _rpythonic_function_(		"xmlGetThreadId", ctypes.c_int, [] )

xmlIsMainThread = _rpythonic_function_(		"xmlIsMainThread", ctypes.c_int, [] )

xmlCleanupThreads = _rpythonic_function_(		"xmlCleanupThreads", ctypes.c_void_p, [] )

xmlGetGlobalState = _rpythonic_function_(		"xmlGetGlobalState", ctypes.POINTER(_xmlGlobalState), [] )

xmlInitializeGlobalState = _rpythonic_function_(		"xmlInitializeGlobalState", ctypes.c_void_p, [
	("gs",		ctypes.POINTER(_xmlGlobalState)),] )

xmlThrDefSetGenericErrorFunc = _rpythonic_function_(		"xmlThrDefSetGenericErrorFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),)),] )

xmlThrDefSetStructuredErrorFunc = _rpythonic_function_(		"xmlThrDefSetStructuredErrorFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_xmlError),)),] )

xmlRegisterNodeDefault = _rpythonic_function_(		"xmlRegisterNodeDefault", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_xmlNode),), [
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_xmlNode),)),] )

xmlThrDefRegisterNodeDefault = _rpythonic_function_(		"xmlThrDefRegisterNodeDefault", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_xmlNode),), [
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_xmlNode),)),] )

xmlDeregisterNodeDefault = _rpythonic_function_(		"xmlDeregisterNodeDefault", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_xmlNode),), [
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_xmlNode),)),] )

xmlThrDefDeregisterNodeDefault = _rpythonic_function_(		"xmlThrDefDeregisterNodeDefault", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_xmlNode),), [
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_xmlNode),)),] )

xmlThrDefOutputBufferCreateFilenameDefault = _rpythonic_function_(		"xmlThrDefOutputBufferCreateFilenameDefault", ctypes.CFUNCTYPE(ctypes.POINTER(_xmlOutputBuffer), ctypes.POINTER(ctypes.c_char),ctypes.POINTER(_xmlCharEncodingHandler),ctypes.c_int,), [
	("func",		ctypes.CFUNCTYPE(ctypes.POINTER(_xmlOutputBuffer), ctypes.POINTER(ctypes.c_char),ctypes.POINTER(_xmlCharEncodingHandler),ctypes.c_int,)),] )

xmlThrDefParserInputBufferCreateFilenameDefault = _rpythonic_function_(		"xmlThrDefParserInputBufferCreateFilenameDefault", ctypes.CFUNCTYPE(ctypes.POINTER(_xmlParserInputBuffer), ctypes.POINTER(ctypes.c_char),ctypes.c_int,), [
	("func",		ctypes.CFUNCTYPE(ctypes.POINTER(_xmlParserInputBuffer), ctypes.POINTER(ctypes.c_char),ctypes.c_int,)),] )

xmlThrDefBufferAllocScheme = _rpythonic_function_(		"xmlThrDefBufferAllocScheme", ctypes.c_int, [
	("v",		ctypes.c_int),] )

xmlThrDefDefaultBufferSize = _rpythonic_function_(		"xmlThrDefDefaultBufferSize", ctypes.c_int, [
	("v",		ctypes.c_int),] )

xmlThrDefDoValidityCheckingDefaultValue = _rpythonic_function_(		"xmlThrDefDoValidityCheckingDefaultValue", ctypes.c_int, [
	("v",		ctypes.c_int),] )

xmlThrDefGetWarningsDefaultValue = _rpythonic_function_(		"xmlThrDefGetWarningsDefaultValue", ctypes.c_int, [
	("v",		ctypes.c_int),] )

xmlThrDefIndentTreeOutput = _rpythonic_function_(		"xmlThrDefIndentTreeOutput", ctypes.c_int, [
	("v",		ctypes.c_int),] )

xmlThrDefTreeIndentString = _rpythonic_function_(		"xmlThrDefTreeIndentString", ctypes.POINTER(ctypes.c_char), [
	("v",		ctypes.POINTER(ctypes.c_char)),] )

xmlThrDefKeepBlanksDefaultValue = _rpythonic_function_(		"xmlThrDefKeepBlanksDefaultValue", ctypes.c_int, [
	("v",		ctypes.c_int),] )

xmlThrDefLineNumbersDefaultValue = _rpythonic_function_(		"xmlThrDefLineNumbersDefaultValue", ctypes.c_int, [
	("v",		ctypes.c_int),] )

xmlThrDefLoadExtDtdDefaultValue = _rpythonic_function_(		"xmlThrDefLoadExtDtdDefaultValue", ctypes.c_int, [
	("v",		ctypes.c_int),] )

xmlThrDefParserDebugEntities = _rpythonic_function_(		"xmlThrDefParserDebugEntities", ctypes.c_int, [
	("v",		ctypes.c_int),] )

xmlThrDefPedanticParserDefaultValue = _rpythonic_function_(		"xmlThrDefPedanticParserDefaultValue", ctypes.c_int, [
	("v",		ctypes.c_int),] )

xmlThrDefSaveNoEmptyTags = _rpythonic_function_(		"xmlThrDefSaveNoEmptyTags", ctypes.c_int, [
	("v",		ctypes.c_int),] )

xmlThrDefSubstituteEntitiesDefaultValue = _rpythonic_function_(		"xmlThrDefSubstituteEntitiesDefaultValue", ctypes.c_int, [
	("v",		ctypes.c_int),] )

xmlCleanupInputCallbacks = _rpythonic_function_(		"xmlCleanupInputCallbacks", ctypes.c_void_p, [] )

xmlPopInputCallbacks = _rpythonic_function_(		"xmlPopInputCallbacks", ctypes.c_int, [] )

xmlRegisterDefaultInputCallbacks = _rpythonic_function_(		"xmlRegisterDefaultInputCallbacks", ctypes.c_void_p, [] )

xmlAllocParserInputBuffer = _rpythonic_function_(		"xmlAllocParserInputBuffer", ctypes.POINTER(_xmlParserInputBuffer), [
	("enc",		ctypes.c_int),] )

xmlParserInputBufferCreateFilename = _rpythonic_function_(		"xmlParserInputBufferCreateFilename", ctypes.POINTER(_xmlParserInputBuffer), [
	("URI",		ctypes.POINTER(ctypes.c_char)),
	("enc",		ctypes.c_int),] )

xmlParserInputBufferCreateFile = _rpythonic_function_(		"xmlParserInputBufferCreateFile", ctypes.POINTER(_xmlParserInputBuffer), [
	("file",		ctypes.POINTER(_IO_FILE)),
	("enc",		ctypes.c_int),] )

xmlParserInputBufferCreateFd = _rpythonic_function_(		"xmlParserInputBufferCreateFd", ctypes.POINTER(_xmlParserInputBuffer), [
	("fd",		ctypes.c_int),
	("enc",		ctypes.c_int),] )

xmlParserInputBufferCreateMem = _rpythonic_function_(		"xmlParserInputBufferCreateMem", ctypes.POINTER(_xmlParserInputBuffer), [
	("mem",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_int),
	("enc",		ctypes.c_int),] )

xmlParserInputBufferCreateStatic = _rpythonic_function_(		"xmlParserInputBufferCreateStatic", ctypes.POINTER(_xmlParserInputBuffer), [
	("mem",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_int),
	("enc",		ctypes.c_int),] )

xmlParserInputBufferCreateIO = _rpythonic_function_(		"xmlParserInputBufferCreateIO", ctypes.POINTER(_xmlParserInputBuffer), [
	("ioread",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),ctypes.c_int,)),
	("ioclose",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("ioctx",		ctypes.POINTER(ctypes.c_void_p)),
	("enc",		ctypes.c_int),] )

xmlParserInputBufferRead = _rpythonic_function_(		"xmlParserInputBufferRead", ctypes.c_int, [
	("C_in",		ctypes.POINTER(_xmlParserInputBuffer)),
	("C_len",		ctypes.c_int),] )

xmlParserInputBufferGrow = _rpythonic_function_(		"xmlParserInputBufferGrow", ctypes.c_int, [
	("C_in",		ctypes.POINTER(_xmlParserInputBuffer)),
	("C_len",		ctypes.c_int),] )

xmlParserInputBufferPush = _rpythonic_function_(		"xmlParserInputBufferPush", ctypes.c_int, [
	("C_in",		ctypes.POINTER(_xmlParserInputBuffer)),
	("C_len",		ctypes.c_int),
	("buf",		ctypes.POINTER(ctypes.c_char)),] )

xmlFreeParserInputBuffer = _rpythonic_function_(		"xmlFreeParserInputBuffer", ctypes.c_void_p, [
	("C_in",		ctypes.POINTER(_xmlParserInputBuffer)),] )

xmlParserGetDirectory = _rpythonic_function_(		"xmlParserGetDirectory", ctypes.POINTER(ctypes.c_char), [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

xmlRegisterInputCallbacks = _rpythonic_function_(		"xmlRegisterInputCallbacks", ctypes.c_int, [
	("matchFunc",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_char),)),
	("openFunc",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), ctypes.POINTER(ctypes.c_char),))),
	("readFunc",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),ctypes.c_int,)),
	("closeFunc",		ctypes.CFUNCTYPE(ctypes.c_int, )),] )

xmlCleanupOutputCallbacks = _rpythonic_function_(		"xmlCleanupOutputCallbacks", ctypes.c_void_p, [] )

xmlRegisterDefaultOutputCallbacks = _rpythonic_function_(		"xmlRegisterDefaultOutputCallbacks", ctypes.c_void_p, [] )

xmlAllocOutputBuffer = _rpythonic_function_(		"xmlAllocOutputBuffer", ctypes.POINTER(_xmlOutputBuffer), [
	("encoder",		ctypes.POINTER(_xmlCharEncodingHandler)),] )

xmlOutputBufferCreateFilename = _rpythonic_function_(		"xmlOutputBufferCreateFilename", ctypes.POINTER(_xmlOutputBuffer), [
	("URI",		ctypes.POINTER(ctypes.c_char)),
	("encoder",		ctypes.POINTER(_xmlCharEncodingHandler)),
	("compression",		ctypes.c_int),] )

xmlOutputBufferCreateFile = _rpythonic_function_(		"xmlOutputBufferCreateFile", ctypes.POINTER(_xmlOutputBuffer), [
	("file",		ctypes.POINTER(_IO_FILE)),
	("encoder",		ctypes.POINTER(_xmlCharEncodingHandler)),] )

xmlOutputBufferCreateBuffer = _rpythonic_function_(		"xmlOutputBufferCreateBuffer", ctypes.POINTER(_xmlOutputBuffer), [
	("buffer",		ctypes.POINTER(_xmlBuffer)),
	("encoder",		ctypes.POINTER(_xmlCharEncodingHandler)),] )

xmlOutputBufferCreateFd = _rpythonic_function_(		"xmlOutputBufferCreateFd", ctypes.POINTER(_xmlOutputBuffer), [
	("fd",		ctypes.c_int),
	("encoder",		ctypes.POINTER(_xmlCharEncodingHandler)),] )

xmlOutputBufferCreateIO = _rpythonic_function_(		"xmlOutputBufferCreateIO", ctypes.POINTER(_xmlOutputBuffer), [
	("iowrite",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),ctypes.c_int,)),
	("ioclose",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("ioctx",		ctypes.POINTER(ctypes.c_void_p)),
	("encoder",		ctypes.POINTER(_xmlCharEncodingHandler)),] )

xmlOutputBufferWrite = _rpythonic_function_(		"xmlOutputBufferWrite", ctypes.c_int, [
	("out",		ctypes.POINTER(_xmlOutputBuffer)),
	("C_len",		ctypes.c_int),
	("buf",		ctypes.POINTER(ctypes.c_char)),] )

xmlOutputBufferWriteString = _rpythonic_function_(		"xmlOutputBufferWriteString", ctypes.c_int, [
	("out",		ctypes.POINTER(_xmlOutputBuffer)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

xmlOutputBufferWriteEscape = _rpythonic_function_(		"xmlOutputBufferWriteEscape", ctypes.c_int, [
	("out",		ctypes.POINTER(_xmlOutputBuffer)),
	("C_str",		ctypes.POINTER(ctypes.c_ubyte)),
	("escaping",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_int),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_int),)),] )

xmlOutputBufferFlush = _rpythonic_function_(		"xmlOutputBufferFlush", ctypes.c_int, [
	("out",		ctypes.POINTER(_xmlOutputBuffer)),] )

xmlOutputBufferClose = _rpythonic_function_(		"xmlOutputBufferClose", ctypes.c_int, [
	("out",		ctypes.POINTER(_xmlOutputBuffer)),] )

xmlRegisterOutputCallbacks = _rpythonic_function_(		"xmlRegisterOutputCallbacks", ctypes.c_int, [
	("matchFunc",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_char),)),
	("openFunc",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), ctypes.POINTER(ctypes.c_char),))),
	("writeFunc",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),ctypes.c_int,)),
	("closeFunc",		ctypes.CFUNCTYPE(ctypes.c_int, )),] )

xmlRegisterHTTPPostCallbacks = _rpythonic_function_(		"xmlRegisterHTTPPostCallbacks", ctypes.c_void_p, [] )

xmlCheckHTTPInput = _rpythonic_function_(		"xmlCheckHTTPInput", ctypes.POINTER(_xmlParserInput), [
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),
	("ret",		ctypes.POINTER(_xmlParserInput)),] )

xmlNoNetExternalEntityLoader = _rpythonic_function_(		"xmlNoNetExternalEntityLoader", ctypes.POINTER(_xmlParserInput), [
	("URL",		ctypes.POINTER(ctypes.c_char)),
	("ID",		ctypes.POINTER(ctypes.c_char)),
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),] )

xmlNormalizeWindowsPath = _rpythonic_function_(		"xmlNormalizeWindowsPath", ctypes.POINTER(ctypes.c_ubyte), [
	("path",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlCheckFilename = _rpythonic_function_(		"xmlCheckFilename", ctypes.c_int, [
	("path",		ctypes.POINTER(ctypes.c_char)),] )

xmlFileMatch = _rpythonic_function_(		"xmlFileMatch", ctypes.c_int, [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

xmlFileOpen = _rpythonic_function_(		"xmlFileOpen", ctypes.POINTER(ctypes.c_void_p), [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

xmlFileRead = _rpythonic_function_(		"xmlFileRead", ctypes.c_int, [
	("context",		ctypes.POINTER(ctypes.c_void_p)),
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

xmlFileClose = _rpythonic_function_(		"xmlFileClose", ctypes.c_int, [("context",		ctypes.c_void_p)] )

xmlIOHTTPMatch = _rpythonic_function_(		"xmlIOHTTPMatch", ctypes.c_int, [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

xmlIOHTTPOpen = _rpythonic_function_(		"xmlIOHTTPOpen", ctypes.POINTER(ctypes.c_void_p), [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

xmlIOHTTPOpenW = _rpythonic_function_(		"xmlIOHTTPOpenW", ctypes.POINTER(ctypes.c_void_p), [
	("post_uri",		ctypes.POINTER(ctypes.c_char)),
	("compression",		ctypes.c_int),] )

xmlIOHTTPRead = _rpythonic_function_(		"xmlIOHTTPRead", ctypes.c_int, [
	("context",		ctypes.POINTER(ctypes.c_void_p)),
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

xmlIOHTTPClose = _rpythonic_function_(		"xmlIOHTTPClose", ctypes.c_int, [("context",		ctypes.c_void_p)] )

xmlIOFTPMatch = _rpythonic_function_(		"xmlIOFTPMatch", ctypes.c_int, [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

xmlIOFTPOpen = _rpythonic_function_(		"xmlIOFTPOpen", ctypes.POINTER(ctypes.c_void_p), [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

xmlIOFTPRead = _rpythonic_function_(		"xmlIOFTPRead", ctypes.c_int, [
	("context",		ctypes.POINTER(ctypes.c_void_p)),
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

xmlIOFTPClose = _rpythonic_function_(		"xmlIOFTPClose", ctypes.c_int, [("context",		ctypes.c_void_p)] )

xmlInitParser = _rpythonic_function_(		"xmlInitParser", ctypes.c_void_p, [] )

xmlCleanupParser = _rpythonic_function_(		"xmlCleanupParser", ctypes.c_void_p, [] )

xmlParserInputRead = _rpythonic_function_(		"xmlParserInputRead", ctypes.c_int, [
	("C_in",		ctypes.POINTER(_xmlParserInput)),
	("C_len",		ctypes.c_int),] )

xmlParserInputGrow = _rpythonic_function_(		"xmlParserInputGrow", ctypes.c_int, [
	("C_in",		ctypes.POINTER(_xmlParserInput)),
	("C_len",		ctypes.c_int),] )

xmlParseDoc = _rpythonic_function_(		"xmlParseDoc", ctypes.POINTER(_xmlDoc), [
	("cur",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlParseFile = _rpythonic_function_(		"xmlParseFile", ctypes.POINTER(_xmlDoc), [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

xmlParseMemory = _rpythonic_function_(		"xmlParseMemory", ctypes.POINTER(_xmlDoc), [
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_int),] )

xmlSubstituteEntitiesDefault = _rpythonic_function_(		"xmlSubstituteEntitiesDefault", ctypes.c_int, [
	("val",		ctypes.c_int),] )

xmlKeepBlanksDefault = _rpythonic_function_(		"xmlKeepBlanksDefault", ctypes.c_int, [
	("val",		ctypes.c_int),] )

xmlStopParser = _rpythonic_function_(		"xmlStopParser", ctypes.c_void_p, [
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),] )

xmlPedanticParserDefault = _rpythonic_function_(		"xmlPedanticParserDefault", ctypes.c_int, [
	("val",		ctypes.c_int),] )

xmlLineNumbersDefault = _rpythonic_function_(		"xmlLineNumbersDefault", ctypes.c_int, [
	("val",		ctypes.c_int),] )

xmlRecoverDoc = _rpythonic_function_(		"xmlRecoverDoc", ctypes.POINTER(_xmlDoc), [
	("cur",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlRecoverMemory = _rpythonic_function_(		"xmlRecoverMemory", ctypes.POINTER(_xmlDoc), [
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_int),] )

xmlRecoverFile = _rpythonic_function_(		"xmlRecoverFile", ctypes.POINTER(_xmlDoc), [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

xmlParseDocument = _rpythonic_function_(		"xmlParseDocument", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),] )

xmlParseExtParsedEnt = _rpythonic_function_(		"xmlParseExtParsedEnt", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),] )

xmlSAXUserParseFile = _rpythonic_function_(		"xmlSAXUserParseFile", ctypes.c_int, [
	("sax",		ctypes.POINTER(_xmlSAXHandler)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

xmlSAXUserParseMemory = _rpythonic_function_(		"xmlSAXUserParseMemory", ctypes.c_int, [
	("sax",		ctypes.POINTER(_xmlSAXHandler)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_int),] )

xmlSAXParseDoc = _rpythonic_function_(		"xmlSAXParseDoc", ctypes.POINTER(_xmlDoc), [
	("sax",		ctypes.POINTER(_xmlSAXHandler)),
	("cur",		ctypes.POINTER(ctypes.c_ubyte)),
	("recovery",		ctypes.c_int),] )

xmlSAXParseMemory = _rpythonic_function_(		"xmlSAXParseMemory", ctypes.POINTER(_xmlDoc), [
	("sax",		ctypes.POINTER(_xmlSAXHandler)),
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_int),
	("recovery",		ctypes.c_int),] )

xmlSAXParseMemoryWithData = _rpythonic_function_(		"xmlSAXParseMemoryWithData", ctypes.POINTER(_xmlDoc), [
	("sax",		ctypes.POINTER(_xmlSAXHandler)),
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_int),
	("recovery",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlSAXParseFile = _rpythonic_function_(		"xmlSAXParseFile", ctypes.POINTER(_xmlDoc), [
	("sax",		ctypes.POINTER(_xmlSAXHandler)),
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("recovery",		ctypes.c_int),] )

xmlSAXParseFileWithData = _rpythonic_function_(		"xmlSAXParseFileWithData", ctypes.POINTER(_xmlDoc), [
	("sax",		ctypes.POINTER(_xmlSAXHandler)),
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("recovery",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlSAXParseEntity = _rpythonic_function_(		"xmlSAXParseEntity", ctypes.POINTER(_xmlDoc), [
	("sax",		ctypes.POINTER(_xmlSAXHandler)),
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

xmlParseEntity = _rpythonic_function_(		"xmlParseEntity", ctypes.POINTER(_xmlDoc), [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

xmlSAXParseDTD = _rpythonic_function_(		"xmlSAXParseDTD", ctypes.POINTER(_xmlDtd), [
	("sax",		ctypes.POINTER(_xmlSAXHandler)),
	("ExternalID",		ctypes.POINTER(ctypes.c_ubyte)),
	("SystemID",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlParseDTD = _rpythonic_function_(		"xmlParseDTD", ctypes.POINTER(_xmlDtd), [
	("ExternalID",		ctypes.POINTER(ctypes.c_ubyte)),
	("SystemID",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlIOParseDTD = _rpythonic_function_(		"xmlIOParseDTD", ctypes.POINTER(_xmlDtd), [
	("sax",		ctypes.POINTER(_xmlSAXHandler)),
	("input",		ctypes.POINTER(_xmlParserInputBuffer)),
	("enc",		ctypes.c_int),] )

xmlParseBalancedChunkMemory = _rpythonic_function_(		"xmlParseBalancedChunkMemory", ctypes.c_int, [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("sax",		ctypes.POINTER(_xmlSAXHandler)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("depth",		ctypes.c_int),
	("string",		ctypes.POINTER(ctypes.c_ubyte)),
	("lst",		ctypes.POINTER(ctypes.POINTER(_xmlNode))),] )

xmlParseInNodeContext = _rpythonic_function_(		"xmlParseInNodeContext", ctypes.c_int, [
	("node",		ctypes.POINTER(_xmlNode)),
	("data",		ctypes.POINTER(ctypes.c_char)),
	("datalen",		ctypes.c_int),
	("options",		ctypes.c_int),
	("lst",		ctypes.POINTER(ctypes.POINTER(_xmlNode))),] )

xmlParseBalancedChunkMemoryRecover = _rpythonic_function_(		"xmlParseBalancedChunkMemoryRecover", ctypes.c_int, [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("sax",		ctypes.POINTER(_xmlSAXHandler)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("depth",		ctypes.c_int),
	("string",		ctypes.POINTER(ctypes.c_ubyte)),
	("lst",		ctypes.POINTER(ctypes.POINTER(_xmlNode))),
	("recover",		ctypes.c_int),] )

xmlParseExternalEntity = _rpythonic_function_(		"xmlParseExternalEntity", ctypes.c_int, [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("sax",		ctypes.POINTER(_xmlSAXHandler)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("depth",		ctypes.c_int),
	("URL",		ctypes.POINTER(ctypes.c_ubyte)),
	("ID",		ctypes.POINTER(ctypes.c_ubyte)),
	("lst",		ctypes.POINTER(ctypes.POINTER(_xmlNode))),] )

xmlParseCtxtExternalEntity = _rpythonic_function_(		"xmlParseCtxtExternalEntity", ctypes.c_int, [
	("ctx",		ctypes.POINTER(_xmlParserCtxt)),
	("URL",		ctypes.POINTER(ctypes.c_ubyte)),
	("ID",		ctypes.POINTER(ctypes.c_ubyte)),
	("lst",		ctypes.POINTER(ctypes.POINTER(_xmlNode))),] )

xmlNewParserCtxt = _rpythonic_function_(		"xmlNewParserCtxt", ctypes.POINTER(_xmlParserCtxt), [] )

xmlInitParserCtxt = _rpythonic_function_(		"xmlInitParserCtxt", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),] )

xmlClearParserCtxt = _rpythonic_function_(		"xmlClearParserCtxt", ctypes.c_void_p, [
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),] )

xmlFreeParserCtxt = _rpythonic_function_(		"xmlFreeParserCtxt", ctypes.c_void_p, [
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),] )

xmlSetupParserForBuffer = _rpythonic_function_(		"xmlSetupParserForBuffer", ctypes.c_void_p, [
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),
	("buffer",		ctypes.POINTER(ctypes.c_ubyte)),
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

xmlCreateDocParserCtxt = _rpythonic_function_(		"xmlCreateDocParserCtxt", ctypes.POINTER(_xmlParserCtxt), [
	("cur",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlGetFeaturesList = _rpythonic_function_(		"xmlGetFeaturesList", ctypes.c_int, [
	("C_len",		ctypes.POINTER(ctypes.c_int)),
	("result",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

xmlGetFeature = _rpythonic_function_(		"xmlGetFeature", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("result",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlSetFeature = _rpythonic_function_(		"xmlSetFeature", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlCreatePushParserCtxt = _rpythonic_function_(		"xmlCreatePushParserCtxt", ctypes.POINTER(_xmlParserCtxt), [
	("sax",		ctypes.POINTER(_xmlSAXHandler)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("chunk",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_int),
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

xmlParseChunk = _rpythonic_function_(		"xmlParseChunk", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),
	("chunk",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_int),
	("terminate",		ctypes.c_int),] )

xmlCreateIOParserCtxt = _rpythonic_function_(		"xmlCreateIOParserCtxt", ctypes.POINTER(_xmlParserCtxt), [
	("sax",		ctypes.POINTER(_xmlSAXHandler)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("ioread",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),ctypes.c_int,)),
	("ioclose",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("ioctx",		ctypes.POINTER(ctypes.c_void_p)),
	("enc",		ctypes.c_int),] )

xmlNewIOInputStream = _rpythonic_function_(		"xmlNewIOInputStream", ctypes.POINTER(_xmlParserInput), [
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),
	("input",		ctypes.POINTER(_xmlParserInputBuffer)),
	("enc",		ctypes.c_int),] )

xmlParserFindNodeInfo = _rpythonic_function_(		"xmlParserFindNodeInfo", ctypes.POINTER(_xmlParserNodeInfo), [
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),
	("node",		ctypes.POINTER(_xmlNode)),] )

xmlInitNodeInfoSeq = _rpythonic_function_(		"xmlInitNodeInfoSeq", ctypes.c_void_p, [
	("seq",		ctypes.POINTER(_xmlParserNodeInfoSeq)),] )

xmlClearNodeInfoSeq = _rpythonic_function_(		"xmlClearNodeInfoSeq", ctypes.c_void_p, [
	("seq",		ctypes.POINTER(_xmlParserNodeInfoSeq)),] )

xmlParserFindNodeInfoIndex = _rpythonic_function_(		"xmlParserFindNodeInfoIndex", ctypes.c_ulong, [
	("seq",		ctypes.POINTER(_xmlParserNodeInfoSeq)),
	("node",		ctypes.POINTER(_xmlNode)),] )

xmlParserAddNodeInfo = _rpythonic_function_(		"xmlParserAddNodeInfo", ctypes.c_void_p, [
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),
	("info",		ctypes.POINTER(_xmlParserNodeInfo)),] )

xmlSetExternalEntityLoader = _rpythonic_function_(		"xmlSetExternalEntityLoader", ctypes.c_void_p, [
	("f",		ctypes.CFUNCTYPE(ctypes.POINTER(_xmlParserInput), ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(_xmlParserCtxt),)),] )

xmlGetExternalEntityLoader = _rpythonic_function_(		"xmlGetExternalEntityLoader", ctypes.CFUNCTYPE(ctypes.POINTER(_xmlParserInput), ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(_xmlParserCtxt),), [] )

xmlLoadExternalEntity = _rpythonic_function_(		"xmlLoadExternalEntity", ctypes.POINTER(_xmlParserInput), [
	("URL",		ctypes.POINTER(ctypes.c_char)),
	("ID",		ctypes.POINTER(ctypes.c_char)),
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),] )

xmlByteConsumed = _rpythonic_function_(		"xmlByteConsumed", ctypes.c_long, [
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),] )

xmlCtxtReset = _rpythonic_function_(		"xmlCtxtReset", ctypes.c_void_p, [
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),] )

xmlCtxtResetPush = _rpythonic_function_(		"xmlCtxtResetPush", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),
	("chunk",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_int),
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("encoding",		ctypes.POINTER(ctypes.c_char)),] )

xmlCtxtUseOptions = _rpythonic_function_(		"xmlCtxtUseOptions", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),
	("options",		ctypes.c_int),] )

xmlReadDoc = _rpythonic_function_(		"xmlReadDoc", ctypes.POINTER(_xmlDoc), [
	("cur",		ctypes.POINTER(ctypes.c_ubyte)),
	("URL",		ctypes.POINTER(ctypes.c_char)),
	("encoding",		ctypes.POINTER(ctypes.c_char)),
	("options",		ctypes.c_int),] )

xmlReadFile = _rpythonic_function_(		"xmlReadFile", ctypes.POINTER(_xmlDoc), [
	("URL",		ctypes.POINTER(ctypes.c_char)),
	("encoding",		ctypes.POINTER(ctypes.c_char)),
	("options",		ctypes.c_int),] )

xmlReadMemory = _rpythonic_function_(		"xmlReadMemory", ctypes.POINTER(_xmlDoc), [
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_int),
	("URL",		ctypes.POINTER(ctypes.c_char)),
	("encoding",		ctypes.POINTER(ctypes.c_char)),
	("options",		ctypes.c_int),] )

xmlReadFd = _rpythonic_function_(		"xmlReadFd", ctypes.POINTER(_xmlDoc), [
	("fd",		ctypes.c_int),
	("URL",		ctypes.POINTER(ctypes.c_char)),
	("encoding",		ctypes.POINTER(ctypes.c_char)),
	("options",		ctypes.c_int),] )

xmlReadIO = _rpythonic_function_(		"xmlReadIO", ctypes.POINTER(_xmlDoc), [
	("ioread",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),ctypes.c_int,)),
	("ioclose",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("ioctx",		ctypes.POINTER(ctypes.c_void_p)),
	("URL",		ctypes.POINTER(ctypes.c_char)),
	("encoding",		ctypes.POINTER(ctypes.c_char)),
	("options",		ctypes.c_int),] )

xmlCtxtReadDoc = _rpythonic_function_(		"xmlCtxtReadDoc", ctypes.POINTER(_xmlDoc), [
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),
	("cur",		ctypes.POINTER(ctypes.c_ubyte)),
	("URL",		ctypes.POINTER(ctypes.c_char)),
	("encoding",		ctypes.POINTER(ctypes.c_char)),
	("options",		ctypes.c_int),] )

xmlCtxtReadFile = _rpythonic_function_(		"xmlCtxtReadFile", ctypes.POINTER(_xmlDoc), [
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("encoding",		ctypes.POINTER(ctypes.c_char)),
	("options",		ctypes.c_int),] )

xmlCtxtReadMemory = _rpythonic_function_(		"xmlCtxtReadMemory", ctypes.POINTER(_xmlDoc), [
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_int),
	("URL",		ctypes.POINTER(ctypes.c_char)),
	("encoding",		ctypes.POINTER(ctypes.c_char)),
	("options",		ctypes.c_int),] )

xmlCtxtReadFd = _rpythonic_function_(		"xmlCtxtReadFd", ctypes.POINTER(_xmlDoc), [
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),
	("fd",		ctypes.c_int),
	("URL",		ctypes.POINTER(ctypes.c_char)),
	("encoding",		ctypes.POINTER(ctypes.c_char)),
	("options",		ctypes.c_int),] )

xmlCtxtReadIO = _rpythonic_function_(		"xmlCtxtReadIO", ctypes.POINTER(_xmlDoc), [
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),
	("ioread",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),ctypes.c_int,)),
	("ioclose",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("ioctx",		ctypes.POINTER(ctypes.c_void_p)),
	("URL",		ctypes.POINTER(ctypes.c_char)),
	("encoding",		ctypes.POINTER(ctypes.c_char)),
	("options",		ctypes.c_int),] )

xmlHasFeature = _rpythonic_function_(		"xmlHasFeature", ctypes.c_int, [
	("feature",		ctypes.c_int),] )

parent_set = _rpythonic_function_(		"parent_set", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GstObject)),
	("parent",		ctypes.POINTER(_GstObject)),] )

parent_unset = _rpythonic_function_(		"parent_unset", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GstObject)),
	("parent",		ctypes.POINTER(_GstObject)),] )

object_saved = _rpythonic_function_(		"object_saved", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GstObject)),
	("parent",		ctypes.POINTER(_xmlNode)),] )

deep_notify = _rpythonic_function_(		"deep_notify", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GstObject)),
	("orig",		ctypes.POINTER(_GstObject)),
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

save_thyself = _rpythonic_function_(		"save_thyself", ctypes.POINTER(_xmlNode), [
	("C_object",		ctypes.POINTER(_GstObject)),
	("parent",		ctypes.POINTER(_xmlNode)),] )

restore_thyself = _rpythonic_function_(		"restore_thyself", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GstObject)),
	("C_self",		ctypes.POINTER(_xmlNode)),] )

gst_object_get_type = _rpythonic_function_(		"gst_object_get_type", ctypes.c_ulong, [] )

gst_object_set_name = _rpythonic_function_(		"gst_object_set_name", ctypes.c_int, [
	("C_object",		ctypes.POINTER(_GstObject)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gst_object_get_name = _rpythonic_function_(		"gst_object_get_name", ctypes.POINTER(ctypes.c_char), [
	("C_object",		ctypes.POINTER(_GstObject)),] )

gst_object_set_name_prefix = _rpythonic_function_(		"gst_object_set_name_prefix", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GstObject)),
	("name_prefix",		ctypes.POINTER(ctypes.c_char)),] )

gst_object_get_name_prefix = _rpythonic_function_(		"gst_object_get_name_prefix", ctypes.POINTER(ctypes.c_char), [
	("C_object",		ctypes.POINTER(_GstObject)),] )

gst_object_set_parent = _rpythonic_function_(		"gst_object_set_parent", ctypes.c_int, [
	("C_object",		ctypes.POINTER(_GstObject)),
	("parent",		ctypes.POINTER(_GstObject)),] )

gst_object_get_parent = _rpythonic_function_(		"gst_object_get_parent", ctypes.POINTER(_GstObject), [
	("C_object",		ctypes.POINTER(_GstObject)),] )

gst_object_unparent = _rpythonic_function_(		"gst_object_unparent", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GstObject)),] )

gst_object_has_ancestor = _rpythonic_function_(		"gst_object_has_ancestor", ctypes.c_int, [
	("C_object",		ctypes.POINTER(_GstObject)),
	("ancestor",		ctypes.POINTER(_GstObject)),] )

gst_object_default_deep_notify = _rpythonic_function_(		"gst_object_default_deep_notify", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("orig",		ctypes.POINTER(_GstObject)),
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("excluded_props",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

gst_object_ref = _rpythonic_function_(		"gst_object_ref", ctypes.POINTER(ctypes.c_void_p), [("C_object",		ctypes.c_void_p)] )

gst_object_unref = _rpythonic_function_(		"gst_object_unref", ctypes.c_void_p, [("C_object",		ctypes.c_void_p)] )

gst_object_ref_sink = _rpythonic_function_(		"gst_object_ref_sink", ctypes.c_void_p, [("C_object",		ctypes.c_void_p)] )

gst_object_sink = _rpythonic_function_(		"gst_object_sink", ctypes.c_void_p, [("C_object",		ctypes.c_void_p)] )

gst_object_replace = _rpythonic_function_(		"gst_object_replace", ctypes.c_void_p, [
	("oldobj",		ctypes.POINTER(ctypes.POINTER(_GstObject))),
	("newobj",		ctypes.POINTER(_GstObject)),] )

gst_object_get_path_string = _rpythonic_function_(		"gst_object_get_path_string", ctypes.POINTER(ctypes.c_char), [
	("C_object",		ctypes.POINTER(_GstObject)),] )

gst_object_check_uniqueness = _rpythonic_function_(		"gst_object_check_uniqueness", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GList)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gst_object_save_thyself = _rpythonic_function_(		"gst_object_save_thyself", ctypes.POINTER(_xmlNode), [
	("C_object",		ctypes.POINTER(_GstObject)),
	("parent",		ctypes.POINTER(_xmlNode)),] )

gst_object_restore_thyself = _rpythonic_function_(		"gst_object_restore_thyself", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GstObject)),
	("C_self",		ctypes.POINTER(_xmlNode)),] )

gst_class_signal_connect = _rpythonic_function_(		"gst_class_signal_connect", ctypes.c_uint, [
	("klass",		ctypes.POINTER(_GstObjectClass)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("func",		ctypes.POINTER(ctypes.c_void_p)),
	("func_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_class_signal_emit_by_name = _rpythonic_function_(		"gst_class_signal_emit_by_name", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GstObject)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("C_self",		ctypes.POINTER(_xmlNode)),] )

GstMiniObjectCopyFunction = _rpythonic_function_(		"GstMiniObjectCopyFunction", ctypes.POINTER(_GstMiniObject), [
	("obj",		ctypes.POINTER(_GstMiniObject)),] )

GstMiniObjectFinalizeFunction = _rpythonic_function_(		"GstMiniObjectFinalizeFunction", ctypes.c_void_p, [
	("obj",		ctypes.POINTER(_GstMiniObject)),] )

gst_mini_object_get_type = _rpythonic_function_(		"gst_mini_object_get_type", ctypes.c_ulong, [] )

gst_mini_object_new = _rpythonic_function_(		"gst_mini_object_new", ctypes.POINTER(_GstMiniObject), [
	("C_type",		ctypes.c_ulong),] )

gst_mini_object_copy = _rpythonic_function_(		"gst_mini_object_copy", ctypes.POINTER(_GstMiniObject), [
	("mini_object",		ctypes.POINTER(_GstMiniObject)),] )

gst_mini_object_is_writable = _rpythonic_function_(		"gst_mini_object_is_writable", ctypes.c_int, [
	("mini_object",		ctypes.POINTER(_GstMiniObject)),] )

gst_mini_object_make_writable = _rpythonic_function_(		"gst_mini_object_make_writable", ctypes.POINTER(_GstMiniObject), [
	("mini_object",		ctypes.POINTER(_GstMiniObject)),] )

gst_mini_object_ref = _rpythonic_function_(		"gst_mini_object_ref", ctypes.POINTER(_GstMiniObject), [
	("mini_object",		ctypes.POINTER(_GstMiniObject)),] )

gst_mini_object_unref = _rpythonic_function_(		"gst_mini_object_unref", ctypes.c_void_p, [
	("mini_object",		ctypes.POINTER(_GstMiniObject)),] )

gst_mini_object_replace = _rpythonic_function_(		"gst_mini_object_replace", ctypes.c_void_p, [
	("olddata",		ctypes.POINTER(ctypes.POINTER(_GstMiniObject))),
	("newdata",		ctypes.POINTER(_GstMiniObject)),] )

gst_param_spec_mini_object_get_type = _rpythonic_function_(		"gst_param_spec_mini_object_get_type", ctypes.c_ulong, [] )

gst_param_spec_mini_object = _rpythonic_function_(		"gst_param_spec_mini_object", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("object_type",		ctypes.c_ulong),
	("flags",		ctypes.c_int),] )

gst_value_set_mini_object = _rpythonic_function_(		"gst_value_set_mini_object", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("mini_object",		ctypes.POINTER(_GstMiniObject)),] )

gst_value_take_mini_object = _rpythonic_function_(		"gst_value_take_mini_object", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("mini_object",		ctypes.POINTER(_GstMiniObject)),] )

gst_value_get_mini_object = _rpythonic_function_(		"gst_value_get_mini_object", ctypes.POINTER(_GstMiniObject), [
	("value",		ctypes.POINTER(_GValue)),] )

gst_value_dup_mini_object = _rpythonic_function_(		"gst_value_dup_mini_object", ctypes.POINTER(_GstMiniObject), [
	("value",		ctypes.POINTER(_GValue)),] )

GstClockCallback = _rpythonic_function_(		"GstClockCallback", ctypes.c_int, [
	("clock",		ctypes.POINTER(_GstClock)),
	("time",		ctypes.c_ulong),
	("C_id",		ctypes.c_void_p),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

change_resolution = _rpythonic_function_(		"change_resolution", ctypes.c_ulong, [
	("clock",		ctypes.POINTER(_GstClock)),
	("old_resolution",		ctypes.c_ulong),
	("new_resolution",		ctypes.c_ulong),] )

get_resolution = _rpythonic_function_(		"get_resolution", ctypes.c_ulong, [
	("clock",		ctypes.POINTER(_GstClock)),] )

get_internal_time = _rpythonic_function_(		"get_internal_time", ctypes.c_ulong, [
	("clock",		ctypes.POINTER(_GstClock)),] )

wait = _rpythonic_function_(		"wait", ctypes.c_int, [
	("clock",		ctypes.POINTER(_GstClock)),
	("entry",		ctypes.POINTER(_GstClockEntry)),] )

wait_async = _rpythonic_function_(		"wait_async", ctypes.c_int, [
	("clock",		ctypes.POINTER(_GstClock)),
	("entry",		ctypes.POINTER(_GstClockEntry)),] )

unschedule = _rpythonic_function_(		"unschedule", ctypes.c_void_p, [
	("clock",		ctypes.POINTER(_GstClock)),
	("entry",		ctypes.POINTER(_GstClockEntry)),] )

wait_jitter = _rpythonic_function_(		"wait_jitter", ctypes.c_int, [
	("clock",		ctypes.POINTER(_GstClock)),
	("entry",		ctypes.POINTER(_GstClockEntry)),
	("jitter",		ctypes.POINTER(ctypes.c_long)),] )

gst_clock_get_type = _rpythonic_function_(		"gst_clock_get_type", ctypes.c_ulong, [] )

gst_clock_set_resolution = _rpythonic_function_(		"gst_clock_set_resolution", ctypes.c_ulong, [
	("clock",		ctypes.POINTER(_GstClock)),
	("resolution",		ctypes.c_ulong),] )

gst_clock_get_resolution = _rpythonic_function_(		"gst_clock_get_resolution", ctypes.c_ulong, [
	("clock",		ctypes.POINTER(_GstClock)),] )

gst_clock_get_time = _rpythonic_function_(		"gst_clock_get_time", ctypes.c_ulong, [
	("clock",		ctypes.POINTER(_GstClock)),] )

gst_clock_set_calibration = _rpythonic_function_(		"gst_clock_set_calibration", ctypes.c_void_p, [
	("clock",		ctypes.POINTER(_GstClock)),
	("internal",		ctypes.c_ulong),
	("external",		ctypes.c_ulong),
	("rate_num",		ctypes.c_ulong),
	("rate_denom",		ctypes.c_ulong),] )

gst_clock_get_calibration = _rpythonic_function_(		"gst_clock_get_calibration", ctypes.c_void_p, [
	("clock",		ctypes.POINTER(_GstClock)),
	("internal",		ctypes.POINTER(ctypes.c_ulong)),
	("external",		ctypes.POINTER(ctypes.c_ulong)),
	("rate_num",		ctypes.POINTER(ctypes.c_ulong)),
	("rate_denom",		ctypes.POINTER(ctypes.c_ulong)),] )

gst_clock_set_master = _rpythonic_function_(		"gst_clock_set_master", ctypes.c_int, [
	("clock",		ctypes.POINTER(_GstClock)),
	("master",		ctypes.POINTER(_GstClock)),] )

gst_clock_get_master = _rpythonic_function_(		"gst_clock_get_master", ctypes.POINTER(_GstClock), [
	("clock",		ctypes.POINTER(_GstClock)),] )

gst_clock_add_observation = _rpythonic_function_(		"gst_clock_add_observation", ctypes.c_int, [
	("clock",		ctypes.POINTER(_GstClock)),
	("slave",		ctypes.c_ulong),
	("master",		ctypes.c_ulong),
	("r_squared",		ctypes.POINTER(ctypes.c_double)),] )

gst_clock_get_internal_time = _rpythonic_function_(		"gst_clock_get_internal_time", ctypes.c_ulong, [
	("clock",		ctypes.POINTER(_GstClock)),] )

gst_clock_adjust_unlocked = _rpythonic_function_(		"gst_clock_adjust_unlocked", ctypes.c_ulong, [
	("clock",		ctypes.POINTER(_GstClock)),
	("internal",		ctypes.c_ulong),] )

gst_clock_unadjust_unlocked = _rpythonic_function_(		"gst_clock_unadjust_unlocked", ctypes.c_ulong, [
	("clock",		ctypes.POINTER(_GstClock)),
	("external",		ctypes.c_ulong),] )

gst_clock_new_single_shot_id = _rpythonic_function_(		"gst_clock_new_single_shot_id", ctypes.c_void_p, [
	("clock",		ctypes.POINTER(_GstClock)),
	("time",		ctypes.c_ulong),] )

gst_clock_new_periodic_id = _rpythonic_function_(		"gst_clock_new_periodic_id", ctypes.c_void_p, [
	("clock",		ctypes.POINTER(_GstClock)),
	("start_time",		ctypes.c_ulong),
	("interval",		ctypes.c_ulong),] )

gst_clock_id_ref = _rpythonic_function_(		"gst_clock_id_ref", ctypes.c_void_p, [("C_id",		ctypes.c_void_p)] )

gst_clock_id_unref = _rpythonic_function_(		"gst_clock_id_unref", ctypes.c_void_p, [("C_id",		ctypes.c_void_p)] )

gst_clock_id_compare_func = _rpythonic_function_(		"gst_clock_id_compare_func", ctypes.c_int, [
	("id1",		ctypes.POINTER(ctypes.c_void_p)),
	("id2",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_clock_id_get_time = _rpythonic_function_(		"gst_clock_id_get_time", ctypes.c_ulong, [("C_id",		ctypes.c_void_p)] )

gst_clock_id_wait = _rpythonic_function_(		"gst_clock_id_wait", ctypes.c_int, [
	("C_id",		ctypes.c_void_p),
	("jitter",		ctypes.POINTER(ctypes.c_long)),] )

gst_clock_id_wait_async = _rpythonic_function_(		"gst_clock_id_wait_async", ctypes.c_int, [
	("C_id",		ctypes.c_void_p),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstClock),ctypes.c_ulong,ctypes.c_void_p,ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_clock_id_wait_async_full = _rpythonic_function_(		"gst_clock_id_wait_async_full", ctypes.c_int, [
	("C_id",		ctypes.c_void_p),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstClock),ctypes.c_ulong,ctypes.c_void_p,ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy_data",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

gst_clock_id_unschedule = _rpythonic_function_(		"gst_clock_id_unschedule", ctypes.c_void_p, [("C_id",		ctypes.c_void_p)] )

gst_clock_single_shot_id_reinit = _rpythonic_function_(		"gst_clock_single_shot_id_reinit", ctypes.c_int, [
	("clock",		ctypes.POINTER(_GstClock)),
	("C_id",		ctypes.c_void_p),
	("time",		ctypes.c_ulong),] )

gst_clock_periodic_id_reinit = _rpythonic_function_(		"gst_clock_periodic_id_reinit", ctypes.c_int, [
	("clock",		ctypes.POINTER(_GstClock)),
	("C_id",		ctypes.c_void_p),
	("start_time",		ctypes.c_ulong),
	("interval",		ctypes.c_ulong),] )

gst_date_time_get_year = _rpythonic_function_(		"gst_date_time_get_year", ctypes.c_int, [
	("datetime",		ctypes.POINTER(_GstDateTime)),] )

gst_date_time_get_month = _rpythonic_function_(		"gst_date_time_get_month", ctypes.c_int, [
	("datetime",		ctypes.POINTER(_GstDateTime)),] )

gst_date_time_get_day = _rpythonic_function_(		"gst_date_time_get_day", ctypes.c_int, [
	("datetime",		ctypes.POINTER(_GstDateTime)),] )

gst_date_time_get_hour = _rpythonic_function_(		"gst_date_time_get_hour", ctypes.c_int, [
	("datetime",		ctypes.POINTER(_GstDateTime)),] )

gst_date_time_get_minute = _rpythonic_function_(		"gst_date_time_get_minute", ctypes.c_int, [
	("datetime",		ctypes.POINTER(_GstDateTime)),] )

gst_date_time_get_second = _rpythonic_function_(		"gst_date_time_get_second", ctypes.c_int, [
	("datetime",		ctypes.POINTER(_GstDateTime)),] )

gst_date_time_get_microsecond = _rpythonic_function_(		"gst_date_time_get_microsecond", ctypes.c_int, [
	("datetime",		ctypes.POINTER(_GstDateTime)),] )

gst_date_time_get_time_zone_offset = _rpythonic_function_(		"gst_date_time_get_time_zone_offset", ctypes.c_float, [
	("datetime",		ctypes.POINTER(_GstDateTime)),] )

gst_date_time_new_from_unix_epoch_local_time = _rpythonic_function_(		"gst_date_time_new_from_unix_epoch_local_time", ctypes.POINTER(_GstDateTime), [
	("secs",		ctypes.c_long),] )

gst_date_time_new_from_unix_epoch_utc = _rpythonic_function_(		"gst_date_time_new_from_unix_epoch_utc", ctypes.POINTER(_GstDateTime), [
	("secs",		ctypes.c_long),] )

gst_date_time_new_local_time = _rpythonic_function_(		"gst_date_time_new_local_time", ctypes.POINTER(_GstDateTime), [
	("year",		ctypes.c_int),
	("month",		ctypes.c_int),
	("day",		ctypes.c_int),
	("hour",		ctypes.c_int),
	("minute",		ctypes.c_int),
	("seconds",		ctypes.c_double),] )

gst_date_time_new = _rpythonic_function_(		"gst_date_time_new", ctypes.POINTER(_GstDateTime), [
	("tzoffset",		ctypes.c_float),
	("year",		ctypes.c_int),
	("month",		ctypes.c_int),
	("day",		ctypes.c_int),
	("hour",		ctypes.c_int),
	("minute",		ctypes.c_int),
	("seconds",		ctypes.c_double),] )

gst_date_time_new_now_local_time = _rpythonic_function_(		"gst_date_time_new_now_local_time", ctypes.POINTER(_GstDateTime), [] )

gst_date_time_new_now_utc = _rpythonic_function_(		"gst_date_time_new_now_utc", ctypes.POINTER(_GstDateTime), [] )

gst_date_time_ref = _rpythonic_function_(		"gst_date_time_ref", ctypes.POINTER(_GstDateTime), [
	("datetime",		ctypes.POINTER(_GstDateTime)),] )

gst_date_time_unref = _rpythonic_function_(		"gst_date_time_unref", ctypes.c_void_p, [
	("datetime",		ctypes.POINTER(_GstDateTime)),] )

GstStructureForeachFunc = _rpythonic_function_(		"GstStructureForeachFunc", ctypes.c_int, [
	("field_id",		ctypes.c_uint),
	("value",		ctypes.POINTER(_GValue)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GstStructureMapFunc = _rpythonic_function_(		"GstStructureMapFunc", ctypes.c_int, [
	("field_id",		ctypes.c_uint),
	("value",		ctypes.POINTER(_GValue)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_structure_get_type = _rpythonic_function_(		"gst_structure_get_type", ctypes.c_ulong, [] )

gst_structure_empty_new = _rpythonic_function_(		"gst_structure_empty_new", ctypes.POINTER(_GstStructure), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gst_structure_id_empty_new = _rpythonic_function_(		"gst_structure_id_empty_new", ctypes.POINTER(_GstStructure), [
	("quark",		ctypes.c_uint),] )

gst_structure_new = _rpythonic_function_(		"gst_structure_new", ctypes.POINTER(_GstStructure), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("firstfield",		ctypes.POINTER(ctypes.c_char)),] )

gst_structure_new_valist = _rpythonic_function_(		"gst_structure_new_valist", ctypes.POINTER(_GstStructure), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("firstfield",		ctypes.POINTER(ctypes.c_char)),
	("varargs",		ctypes.c_char),] )

gst_structure_id_new = _rpythonic_function_(		"gst_structure_id_new", ctypes.POINTER(_GstStructure), [
	("name_quark",		ctypes.c_uint),
	("field_quark",		ctypes.c_uint),] )

gst_structure_copy = _rpythonic_function_(		"gst_structure_copy", ctypes.POINTER(_GstStructure), [
	("structure",		ctypes.POINTER(_GstStructure)),] )

gst_structure_set_parent_refcount = _rpythonic_function_(		"gst_structure_set_parent_refcount", ctypes.c_void_p, [
	("structure",		ctypes.POINTER(_GstStructure)),
	("refcount",		ctypes.POINTER(ctypes.c_int)),] )

gst_structure_free = _rpythonic_function_(		"gst_structure_free", ctypes.c_void_p, [
	("structure",		ctypes.POINTER(_GstStructure)),] )

gst_structure_get_name = _rpythonic_function_(		"gst_structure_get_name", ctypes.POINTER(ctypes.c_char), [
	("structure",		ctypes.POINTER(_GstStructure)),] )

gst_structure_get_name_id = _rpythonic_function_(		"gst_structure_get_name_id", ctypes.c_uint, [
	("structure",		ctypes.POINTER(_GstStructure)),] )

gst_structure_has_name = _rpythonic_function_(		"gst_structure_has_name", ctypes.c_int, [
	("structure",		ctypes.POINTER(_GstStructure)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gst_structure_set_name = _rpythonic_function_(		"gst_structure_set_name", ctypes.c_void_p, [
	("structure",		ctypes.POINTER(_GstStructure)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gst_structure_id_set_value = _rpythonic_function_(		"gst_structure_id_set_value", ctypes.c_void_p, [
	("structure",		ctypes.POINTER(_GstStructure)),
	("field",		ctypes.c_uint),
	("value",		ctypes.POINTER(_GValue)),] )

gst_structure_set_value = _rpythonic_function_(		"gst_structure_set_value", ctypes.c_void_p, [
	("structure",		ctypes.POINTER(_GstStructure)),
	("fieldname",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(_GValue)),] )

gst_structure_id_take_value = _rpythonic_function_(		"gst_structure_id_take_value", ctypes.c_void_p, [
	("structure",		ctypes.POINTER(_GstStructure)),
	("field",		ctypes.c_uint),
	("value",		ctypes.POINTER(_GValue)),] )

gst_structure_take_value = _rpythonic_function_(		"gst_structure_take_value", ctypes.c_void_p, [
	("structure",		ctypes.POINTER(_GstStructure)),
	("fieldname",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(_GValue)),] )

gst_structure_set = _rpythonic_function_(		"gst_structure_set", ctypes.c_void_p, [
	("structure",		ctypes.POINTER(_GstStructure)),
	("fieldname",		ctypes.POINTER(ctypes.c_char)),] )

gst_structure_set_valist = _rpythonic_function_(		"gst_structure_set_valist", ctypes.c_void_p, [
	("structure",		ctypes.POINTER(_GstStructure)),
	("fieldname",		ctypes.POINTER(ctypes.c_char)),
	("varargs",		ctypes.c_char),] )

gst_structure_id_set = _rpythonic_function_(		"gst_structure_id_set", ctypes.c_void_p, [
	("structure",		ctypes.POINTER(_GstStructure)),
	("fieldname",		ctypes.c_uint),] )

gst_structure_id_set_valist = _rpythonic_function_(		"gst_structure_id_set_valist", ctypes.c_void_p, [
	("structure",		ctypes.POINTER(_GstStructure)),
	("fieldname",		ctypes.c_uint),
	("varargs",		ctypes.c_char),] )

gst_structure_get_valist = _rpythonic_function_(		"gst_structure_get_valist", ctypes.c_int, [
	("structure",		ctypes.POINTER(_GstStructure)),
	("first_fieldname",		ctypes.POINTER(ctypes.c_char)),
	("args",		ctypes.c_char),] )

gst_structure_get = _rpythonic_function_(		"gst_structure_get", ctypes.c_int, [
	("structure",		ctypes.POINTER(_GstStructure)),
	("first_fieldname",		ctypes.POINTER(ctypes.c_char)),] )

gst_structure_id_get_valist = _rpythonic_function_(		"gst_structure_id_get_valist", ctypes.c_int, [
	("structure",		ctypes.POINTER(_GstStructure)),
	("first_field_id",		ctypes.c_uint),
	("args",		ctypes.c_char),] )

gst_structure_id_get = _rpythonic_function_(		"gst_structure_id_get", ctypes.c_int, [
	("structure",		ctypes.POINTER(_GstStructure)),
	("first_field_id",		ctypes.c_uint),] )

gst_structure_id_get_value = _rpythonic_function_(		"gst_structure_id_get_value", ctypes.POINTER(_GValue), [
	("structure",		ctypes.POINTER(_GstStructure)),
	("field",		ctypes.c_uint),] )

gst_structure_get_value = _rpythonic_function_(		"gst_structure_get_value", ctypes.POINTER(_GValue), [
	("structure",		ctypes.POINTER(_GstStructure)),
	("fieldname",		ctypes.POINTER(ctypes.c_char)),] )

gst_structure_remove_field = _rpythonic_function_(		"gst_structure_remove_field", ctypes.c_void_p, [
	("structure",		ctypes.POINTER(_GstStructure)),
	("fieldname",		ctypes.POINTER(ctypes.c_char)),] )

gst_structure_remove_fields = _rpythonic_function_(		"gst_structure_remove_fields", ctypes.c_void_p, [
	("structure",		ctypes.POINTER(_GstStructure)),
	("fieldname",		ctypes.POINTER(ctypes.c_char)),] )

gst_structure_remove_fields_valist = _rpythonic_function_(		"gst_structure_remove_fields_valist", ctypes.c_void_p, [
	("structure",		ctypes.POINTER(_GstStructure)),
	("fieldname",		ctypes.POINTER(ctypes.c_char)),
	("varargs",		ctypes.c_char),] )

gst_structure_remove_all_fields = _rpythonic_function_(		"gst_structure_remove_all_fields", ctypes.c_void_p, [
	("structure",		ctypes.POINTER(_GstStructure)),] )

gst_structure_get_field_type = _rpythonic_function_(		"gst_structure_get_field_type", ctypes.c_ulong, [
	("structure",		ctypes.POINTER(_GstStructure)),
	("fieldname",		ctypes.POINTER(ctypes.c_char)),] )

gst_structure_foreach = _rpythonic_function_(		"gst_structure_foreach", ctypes.c_int, [
	("structure",		ctypes.POINTER(_GstStructure)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_uint,ctypes.POINTER(_GValue),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_structure_map_in_place = _rpythonic_function_(		"gst_structure_map_in_place", ctypes.c_int, [
	("structure",		ctypes.POINTER(_GstStructure)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_uint,ctypes.POINTER(_GValue),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_structure_n_fields = _rpythonic_function_(		"gst_structure_n_fields", ctypes.c_int, [
	("structure",		ctypes.POINTER(_GstStructure)),] )

gst_structure_nth_field_name = _rpythonic_function_(		"gst_structure_nth_field_name", ctypes.POINTER(ctypes.c_char), [
	("structure",		ctypes.POINTER(_GstStructure)),
	("index",		ctypes.c_uint),] )

gst_structure_id_has_field = _rpythonic_function_(		"gst_structure_id_has_field", ctypes.c_int, [
	("structure",		ctypes.POINTER(_GstStructure)),
	("field",		ctypes.c_uint),] )

gst_structure_id_has_field_typed = _rpythonic_function_(		"gst_structure_id_has_field_typed", ctypes.c_int, [
	("structure",		ctypes.POINTER(_GstStructure)),
	("field",		ctypes.c_uint),
	("C_type",		ctypes.c_ulong),] )

gst_structure_has_field = _rpythonic_function_(		"gst_structure_has_field", ctypes.c_int, [
	("structure",		ctypes.POINTER(_GstStructure)),
	("fieldname",		ctypes.POINTER(ctypes.c_char)),] )

gst_structure_has_field_typed = _rpythonic_function_(		"gst_structure_has_field_typed", ctypes.c_int, [
	("structure",		ctypes.POINTER(_GstStructure)),
	("fieldname",		ctypes.POINTER(ctypes.c_char)),
	("C_type",		ctypes.c_ulong),] )

gst_structure_get_boolean = _rpythonic_function_(		"gst_structure_get_boolean", ctypes.c_int, [
	("structure",		ctypes.POINTER(_GstStructure)),
	("fieldname",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_int)),] )

gst_structure_get_int = _rpythonic_function_(		"gst_structure_get_int", ctypes.c_int, [
	("structure",		ctypes.POINTER(_GstStructure)),
	("fieldname",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_int)),] )

gst_structure_get_uint = _rpythonic_function_(		"gst_structure_get_uint", ctypes.c_int, [
	("structure",		ctypes.POINTER(_GstStructure)),
	("fieldname",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_uint)),] )

gst_structure_get_fourcc = _rpythonic_function_(		"gst_structure_get_fourcc", ctypes.c_int, [
	("structure",		ctypes.POINTER(_GstStructure)),
	("fieldname",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_uint)),] )

gst_structure_get_double = _rpythonic_function_(		"gst_structure_get_double", ctypes.c_int, [
	("structure",		ctypes.POINTER(_GstStructure)),
	("fieldname",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_double)),] )

gst_structure_get_date = _rpythonic_function_(		"gst_structure_get_date", ctypes.c_int, [
	("structure",		ctypes.POINTER(_GstStructure)),
	("fieldname",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.POINTER(_GDate))),] )

gst_structure_get_date_time = _rpythonic_function_(		"gst_structure_get_date_time", ctypes.c_int, [
	("structure",		ctypes.POINTER(_GstStructure)),
	("fieldname",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.POINTER(_GstDateTime))),] )

gst_structure_get_clock_time = _rpythonic_function_(		"gst_structure_get_clock_time", ctypes.c_int, [
	("structure",		ctypes.POINTER(_GstStructure)),
	("fieldname",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_ulong)),] )

gst_structure_get_string = _rpythonic_function_(		"gst_structure_get_string", ctypes.POINTER(ctypes.c_char), [
	("structure",		ctypes.POINTER(_GstStructure)),
	("fieldname",		ctypes.POINTER(ctypes.c_char)),] )

gst_structure_get_enum = _rpythonic_function_(		"gst_structure_get_enum", ctypes.c_int, [
	("structure",		ctypes.POINTER(_GstStructure)),
	("fieldname",		ctypes.POINTER(ctypes.c_char)),
	("enumtype",		ctypes.c_ulong),
	("value",		ctypes.POINTER(ctypes.c_int)),] )

gst_structure_get_fraction = _rpythonic_function_(		"gst_structure_get_fraction", ctypes.c_int, [
	("structure",		ctypes.POINTER(_GstStructure)),
	("fieldname",		ctypes.POINTER(ctypes.c_char)),
	("value_numerator",		ctypes.POINTER(ctypes.c_int)),
	("value_denominator",		ctypes.POINTER(ctypes.c_int)),] )

gst_structure_to_string = _rpythonic_function_(		"gst_structure_to_string", ctypes.POINTER(ctypes.c_char), [
	("structure",		ctypes.POINTER(_GstStructure)),] )

gst_structure_from_string = _rpythonic_function_(		"gst_structure_from_string", ctypes.POINTER(_GstStructure), [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("end",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

gst_structure_fixate_field_nearest_int = _rpythonic_function_(		"gst_structure_fixate_field_nearest_int", ctypes.c_int, [
	("structure",		ctypes.POINTER(_GstStructure)),
	("field_name",		ctypes.POINTER(ctypes.c_char)),
	("target",		ctypes.c_int),] )

gst_structure_fixate_field_nearest_double = _rpythonic_function_(		"gst_structure_fixate_field_nearest_double", ctypes.c_int, [
	("structure",		ctypes.POINTER(_GstStructure)),
	("field_name",		ctypes.POINTER(ctypes.c_char)),
	("target",		ctypes.c_double),] )

gst_structure_fixate_field_boolean = _rpythonic_function_(		"gst_structure_fixate_field_boolean", ctypes.c_int, [
	("structure",		ctypes.POINTER(_GstStructure)),
	("field_name",		ctypes.POINTER(ctypes.c_char)),
	("target",		ctypes.c_int),] )

gst_structure_fixate_field_string = _rpythonic_function_(		"gst_structure_fixate_field_string", ctypes.c_int, [
	("structure",		ctypes.POINTER(_GstStructure)),
	("field_name",		ctypes.POINTER(ctypes.c_char)),
	("target",		ctypes.POINTER(ctypes.c_char)),] )

gst_structure_fixate_field_nearest_fraction = _rpythonic_function_(		"gst_structure_fixate_field_nearest_fraction", ctypes.c_int, [
	("structure",		ctypes.POINTER(_GstStructure)),
	("field_name",		ctypes.POINTER(ctypes.c_char)),
	("target_numerator",		ctypes.c_int),
	("target_denominator",		ctypes.c_int),] )

gst_caps_get_type = _rpythonic_function_(		"gst_caps_get_type", ctypes.c_ulong, [] )

gst_caps_new_empty = _rpythonic_function_(		"gst_caps_new_empty", ctypes.POINTER(_GstCaps), [] )

gst_caps_new_any = _rpythonic_function_(		"gst_caps_new_any", ctypes.POINTER(_GstCaps), [] )

gst_caps_new_simple = _rpythonic_function_(		"gst_caps_new_simple", ctypes.POINTER(_GstCaps), [
	("media_type",		ctypes.POINTER(ctypes.c_char)),
	("fieldname",		ctypes.POINTER(ctypes.c_char)),] )

gst_caps_new_full = _rpythonic_function_(		"gst_caps_new_full", ctypes.POINTER(_GstCaps), [
	("struct1",		ctypes.POINTER(_GstStructure)),] )

gst_caps_new_full_valist = _rpythonic_function_(		"gst_caps_new_full_valist", ctypes.POINTER(_GstCaps), [
	("structure",		ctypes.POINTER(_GstStructure)),
	("var_args",		ctypes.c_char),] )

gst_caps_ref = _rpythonic_function_(		"gst_caps_ref", ctypes.POINTER(_GstCaps), [
	("caps",		ctypes.POINTER(_GstCaps)),] )

gst_caps_copy = _rpythonic_function_(		"gst_caps_copy", ctypes.POINTER(_GstCaps), [
	("caps",		ctypes.POINTER(_GstCaps)),] )

gst_caps_make_writable = _rpythonic_function_(		"gst_caps_make_writable", ctypes.POINTER(_GstCaps), [
	("caps",		ctypes.POINTER(_GstCaps)),] )

gst_caps_unref = _rpythonic_function_(		"gst_caps_unref", ctypes.c_void_p, [
	("caps",		ctypes.POINTER(_GstCaps)),] )

gst_static_caps_get_type = _rpythonic_function_(		"gst_static_caps_get_type", ctypes.c_ulong, [] )

gst_static_caps_get = _rpythonic_function_(		"gst_static_caps_get", ctypes.POINTER(_GstCaps), [
	("static_caps",		ctypes.POINTER(_GstStaticCaps)),] )

gst_caps_append = _rpythonic_function_(		"gst_caps_append", ctypes.c_void_p, [
	("caps1",		ctypes.POINTER(_GstCaps)),
	("caps2",		ctypes.POINTER(_GstCaps)),] )

gst_caps_merge = _rpythonic_function_(		"gst_caps_merge", ctypes.c_void_p, [
	("caps1",		ctypes.POINTER(_GstCaps)),
	("caps2",		ctypes.POINTER(_GstCaps)),] )

gst_caps_append_structure = _rpythonic_function_(		"gst_caps_append_structure", ctypes.c_void_p, [
	("caps",		ctypes.POINTER(_GstCaps)),
	("structure",		ctypes.POINTER(_GstStructure)),] )

gst_caps_remove_structure = _rpythonic_function_(		"gst_caps_remove_structure", ctypes.c_void_p, [
	("caps",		ctypes.POINTER(_GstCaps)),
	("idx",		ctypes.c_uint),] )

gst_caps_merge_structure = _rpythonic_function_(		"gst_caps_merge_structure", ctypes.c_void_p, [
	("caps",		ctypes.POINTER(_GstCaps)),
	("structure",		ctypes.POINTER(_GstStructure)),] )

gst_caps_get_size = _rpythonic_function_(		"gst_caps_get_size", ctypes.c_uint, [
	("caps",		ctypes.POINTER(_GstCaps)),] )

gst_caps_get_structure = _rpythonic_function_(		"gst_caps_get_structure", ctypes.POINTER(_GstStructure), [
	("caps",		ctypes.POINTER(_GstCaps)),
	("index",		ctypes.c_uint),] )

gst_caps_steal_structure = _rpythonic_function_(		"gst_caps_steal_structure", ctypes.POINTER(_GstStructure), [
	("caps",		ctypes.POINTER(_GstCaps)),
	("index",		ctypes.c_uint),] )

gst_caps_copy_nth = _rpythonic_function_(		"gst_caps_copy_nth", ctypes.POINTER(_GstCaps), [
	("caps",		ctypes.POINTER(_GstCaps)),
	("nth",		ctypes.c_uint),] )

gst_caps_truncate = _rpythonic_function_(		"gst_caps_truncate", ctypes.c_void_p, [
	("caps",		ctypes.POINTER(_GstCaps)),] )

gst_caps_set_value = _rpythonic_function_(		"gst_caps_set_value", ctypes.c_void_p, [
	("caps",		ctypes.POINTER(_GstCaps)),
	("field",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(_GValue)),] )

gst_caps_set_simple = _rpythonic_function_(		"gst_caps_set_simple", ctypes.c_void_p, [
	("caps",		ctypes.POINTER(_GstCaps)),
	("field",		ctypes.POINTER(ctypes.c_char)),] )

gst_caps_set_simple_valist = _rpythonic_function_(		"gst_caps_set_simple_valist", ctypes.c_void_p, [
	("caps",		ctypes.POINTER(_GstCaps)),
	("field",		ctypes.POINTER(ctypes.c_char)),
	("varargs",		ctypes.c_char),] )

gst_caps_is_any = _rpythonic_function_(		"gst_caps_is_any", ctypes.c_int, [
	("caps",		ctypes.POINTER(_GstCaps)),] )

gst_caps_is_empty = _rpythonic_function_(		"gst_caps_is_empty", ctypes.c_int, [
	("caps",		ctypes.POINTER(_GstCaps)),] )

gst_caps_is_fixed = _rpythonic_function_(		"gst_caps_is_fixed", ctypes.c_int, [
	("caps",		ctypes.POINTER(_GstCaps)),] )

gst_caps_is_always_compatible = _rpythonic_function_(		"gst_caps_is_always_compatible", ctypes.c_int, [
	("caps1",		ctypes.POINTER(_GstCaps)),
	("caps2",		ctypes.POINTER(_GstCaps)),] )

gst_caps_is_subset = _rpythonic_function_(		"gst_caps_is_subset", ctypes.c_int, [
	("subset",		ctypes.POINTER(_GstCaps)),
	("superset",		ctypes.POINTER(_GstCaps)),] )

gst_caps_is_equal = _rpythonic_function_(		"gst_caps_is_equal", ctypes.c_int, [
	("caps1",		ctypes.POINTER(_GstCaps)),
	("caps2",		ctypes.POINTER(_GstCaps)),] )

gst_caps_is_equal_fixed = _rpythonic_function_(		"gst_caps_is_equal_fixed", ctypes.c_int, [
	("caps1",		ctypes.POINTER(_GstCaps)),
	("caps2",		ctypes.POINTER(_GstCaps)),] )

gst_caps_can_intersect = _rpythonic_function_(		"gst_caps_can_intersect", ctypes.c_int, [
	("caps1",		ctypes.POINTER(_GstCaps)),
	("caps2",		ctypes.POINTER(_GstCaps)),] )

gst_caps_intersect = _rpythonic_function_(		"gst_caps_intersect", ctypes.POINTER(_GstCaps), [
	("caps1",		ctypes.POINTER(_GstCaps)),
	("caps2",		ctypes.POINTER(_GstCaps)),] )

gst_caps_intersect_full = _rpythonic_function_(		"gst_caps_intersect_full", ctypes.POINTER(_GstCaps), [
	("caps1",		ctypes.POINTER(_GstCaps)),
	("caps2",		ctypes.POINTER(_GstCaps)),
	("mode",		ctypes.c_int),] )

gst_caps_subtract = _rpythonic_function_(		"gst_caps_subtract", ctypes.POINTER(_GstCaps), [
	("minuend",		ctypes.POINTER(_GstCaps)),
	("subtrahend",		ctypes.POINTER(_GstCaps)),] )

gst_caps_union = _rpythonic_function_(		"gst_caps_union", ctypes.POINTER(_GstCaps), [
	("caps1",		ctypes.POINTER(_GstCaps)),
	("caps2",		ctypes.POINTER(_GstCaps)),] )

gst_caps_normalize = _rpythonic_function_(		"gst_caps_normalize", ctypes.POINTER(_GstCaps), [
	("caps",		ctypes.POINTER(_GstCaps)),] )

gst_caps_do_simplify = _rpythonic_function_(		"gst_caps_do_simplify", ctypes.c_int, [
	("caps",		ctypes.POINTER(_GstCaps)),] )

gst_caps_save_thyself = _rpythonic_function_(		"gst_caps_save_thyself", ctypes.POINTER(_xmlNode), [
	("caps",		ctypes.POINTER(_GstCaps)),
	("parent",		ctypes.POINTER(_xmlNode)),] )

gst_caps_load_thyself = _rpythonic_function_(		"gst_caps_load_thyself", ctypes.POINTER(_GstCaps), [
	("parent",		ctypes.POINTER(_xmlNode)),] )

gst_caps_replace = _rpythonic_function_(		"gst_caps_replace", ctypes.c_void_p, [
	("caps",		ctypes.POINTER(ctypes.POINTER(_GstCaps))),
	("newcaps",		ctypes.POINTER(_GstCaps)),] )

gst_caps_to_string = _rpythonic_function_(		"gst_caps_to_string", ctypes.POINTER(ctypes.c_char), [
	("caps",		ctypes.POINTER(_GstCaps)),] )

gst_caps_from_string = _rpythonic_function_(		"gst_caps_from_string", ctypes.POINTER(_GstCaps), [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

gst_buffer_get_type = _rpythonic_function_(		"gst_buffer_get_type", ctypes.c_ulong, [] )

gst_buffer_new = _rpythonic_function_(		"gst_buffer_new", ctypes.POINTER(_GstBuffer), [] )

gst_buffer_new_and_alloc = _rpythonic_function_(		"gst_buffer_new_and_alloc", ctypes.POINTER(_GstBuffer), [
	("size",		ctypes.c_uint),] )

gst_buffer_try_new_and_alloc = _rpythonic_function_(		"gst_buffer_try_new_and_alloc", ctypes.POINTER(_GstBuffer), [
	("size",		ctypes.c_uint),] )

gst_buffer_copy_metadata = _rpythonic_function_(		"gst_buffer_copy_metadata", ctypes.c_void_p, [
	("dest",		ctypes.POINTER(_GstBuffer)),
	("src",		ctypes.POINTER(_GstBuffer)),
	("flags",		ctypes.c_int),] )

gst_buffer_is_metadata_writable = _rpythonic_function_(		"gst_buffer_is_metadata_writable", ctypes.c_int, [
	("buf",		ctypes.POINTER(_GstBuffer)),] )

gst_buffer_make_metadata_writable = _rpythonic_function_(		"gst_buffer_make_metadata_writable", ctypes.POINTER(_GstBuffer), [
	("buf",		ctypes.POINTER(_GstBuffer)),] )

gst_buffer_get_caps = _rpythonic_function_(		"gst_buffer_get_caps", ctypes.POINTER(_GstCaps), [
	("buffer",		ctypes.POINTER(_GstBuffer)),] )

gst_buffer_set_caps = _rpythonic_function_(		"gst_buffer_set_caps", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GstBuffer)),
	("caps",		ctypes.POINTER(_GstCaps)),] )

gst_buffer_create_sub = _rpythonic_function_(		"gst_buffer_create_sub", ctypes.POINTER(_GstBuffer), [
	("parent",		ctypes.POINTER(_GstBuffer)),
	("offset",		ctypes.c_uint),
	("size",		ctypes.c_uint),] )

gst_buffer_is_span_fast = _rpythonic_function_(		"gst_buffer_is_span_fast", ctypes.c_int, [
	("buf1",		ctypes.POINTER(_GstBuffer)),
	("buf2",		ctypes.POINTER(_GstBuffer)),] )

gst_buffer_span = _rpythonic_function_(		"gst_buffer_span", ctypes.POINTER(_GstBuffer), [
	("buf1",		ctypes.POINTER(_GstBuffer)),
	("offset",		ctypes.c_uint),
	("buf2",		ctypes.POINTER(_GstBuffer)),
	("C_len",		ctypes.c_uint),] )

GstBufferListDoFunction = _rpythonic_function_(		"GstBufferListDoFunction", ctypes.POINTER(_GstBuffer), [
	("buffer",		ctypes.POINTER(_GstBuffer)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GstBufferListFunc = _rpythonic_function_(		"GstBufferListFunc", ctypes.c_int, [
	("buffer",		ctypes.POINTER(ctypes.POINTER(_GstBuffer))),
	("group",		ctypes.c_uint),
	("idx",		ctypes.c_uint),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_buffer_list_get_type = _rpythonic_function_(		"gst_buffer_list_get_type", ctypes.c_ulong, [] )

gst_buffer_list_new = _rpythonic_function_(		"gst_buffer_list_new", ctypes.POINTER(_GstBufferList), [] )

gst_buffer_list_n_groups = _rpythonic_function_(		"gst_buffer_list_n_groups", ctypes.c_uint, [
	("C_list",		ctypes.POINTER(_GstBufferList)),] )

gst_buffer_list_foreach = _rpythonic_function_(		"gst_buffer_list_foreach", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GstBufferList)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.POINTER(_GstBuffer)),ctypes.c_uint,ctypes.c_uint,ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_buffer_list_get = _rpythonic_function_(		"gst_buffer_list_get", ctypes.POINTER(_GstBuffer), [
	("C_list",		ctypes.POINTER(_GstBufferList)),
	("group",		ctypes.c_uint),
	("idx",		ctypes.c_uint),] )

gst_buffer_list_iterator_get_type = _rpythonic_function_(		"gst_buffer_list_iterator_get_type", ctypes.c_ulong, [] )

gst_buffer_list_iterate = _rpythonic_function_(		"gst_buffer_list_iterate", ctypes.POINTER(_GstBufferListIterator), [
	("C_list",		ctypes.POINTER(_GstBufferList)),] )

gst_buffer_list_iterator_free = _rpythonic_function_(		"gst_buffer_list_iterator_free", ctypes.c_void_p, [
	("it",		ctypes.POINTER(_GstBufferListIterator)),] )

gst_buffer_list_iterator_n_buffers = _rpythonic_function_(		"gst_buffer_list_iterator_n_buffers", ctypes.c_uint, [
	("it",		ctypes.POINTER(_GstBufferListIterator)),] )

gst_buffer_list_iterator_next = _rpythonic_function_(		"gst_buffer_list_iterator_next", ctypes.POINTER(_GstBuffer), [
	("it",		ctypes.POINTER(_GstBufferListIterator)),] )

gst_buffer_list_iterator_next_group = _rpythonic_function_(		"gst_buffer_list_iterator_next_group", ctypes.c_int, [
	("it",		ctypes.POINTER(_GstBufferListIterator)),] )

gst_buffer_list_iterator_add = _rpythonic_function_(		"gst_buffer_list_iterator_add", ctypes.c_void_p, [
	("it",		ctypes.POINTER(_GstBufferListIterator)),
	("buffer",		ctypes.POINTER(_GstBuffer)),] )

gst_buffer_list_iterator_add_list = _rpythonic_function_(		"gst_buffer_list_iterator_add_list", ctypes.c_void_p, [
	("it",		ctypes.POINTER(_GstBufferListIterator)),
	("C_list",		ctypes.POINTER(_GList)),] )

gst_buffer_list_iterator_add_group = _rpythonic_function_(		"gst_buffer_list_iterator_add_group", ctypes.c_void_p, [
	("it",		ctypes.POINTER(_GstBufferListIterator)),] )

gst_buffer_list_iterator_remove = _rpythonic_function_(		"gst_buffer_list_iterator_remove", ctypes.c_void_p, [
	("it",		ctypes.POINTER(_GstBufferListIterator)),] )

gst_buffer_list_iterator_steal = _rpythonic_function_(		"gst_buffer_list_iterator_steal", ctypes.POINTER(_GstBuffer), [
	("it",		ctypes.POINTER(_GstBufferListIterator)),] )

gst_buffer_list_iterator_take = _rpythonic_function_(		"gst_buffer_list_iterator_take", ctypes.c_void_p, [
	("it",		ctypes.POINTER(_GstBufferListIterator)),
	("buffer",		ctypes.POINTER(_GstBuffer)),] )

gst_buffer_list_iterator_do = _rpythonic_function_(		"gst_buffer_list_iterator_do", ctypes.POINTER(_GstBuffer), [
	("it",		ctypes.POINTER(_GstBufferListIterator)),
	("do_func",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_GstBuffer), ctypes.POINTER(_GstBuffer),ctypes.POINTER(ctypes.c_void_p),))),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_buffer_list_iterator_merge_group = _rpythonic_function_(		"gst_buffer_list_iterator_merge_group", ctypes.POINTER(_GstBuffer), [
	("it",		ctypes.POINTER(_GstBufferListIterator)),] )

GstIteratorDisposeFunction = _rpythonic_function_(		"GstIteratorDisposeFunction", ctypes.c_void_p, [("owner",		ctypes.c_void_p)] )

GstIteratorNextFunction = _rpythonic_function_(		"GstIteratorNextFunction", ctypes.c_int, [
	("it",		ctypes.POINTER(_GstIterator)),
	("result",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

GstIteratorItemFunction = _rpythonic_function_(		"GstIteratorItemFunction", ctypes.c_int, [
	("it",		ctypes.POINTER(_GstIterator)),
	("item",		ctypes.POINTER(ctypes.c_void_p)),] )

GstIteratorResyncFunction = _rpythonic_function_(		"GstIteratorResyncFunction", ctypes.c_void_p, [
	("it",		ctypes.POINTER(_GstIterator)),] )

GstIteratorFreeFunction = _rpythonic_function_(		"GstIteratorFreeFunction", ctypes.c_void_p, [
	("it",		ctypes.POINTER(_GstIterator)),] )

GstIteratorFoldFunction = _rpythonic_function_(		"GstIteratorFoldFunction", ctypes.c_int, [
	("item",		ctypes.POINTER(ctypes.c_void_p)),
	("ret",		ctypes.POINTER(_GValue)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GstCopyFunction = _rpythonic_function_(		"GstCopyFunction", ctypes.POINTER(ctypes.c_void_p), [("C_object",		ctypes.c_void_p)] )

gst_iterator_new = _rpythonic_function_(		"gst_iterator_new", ctypes.POINTER(_GstIterator), [
	("size",		ctypes.c_uint),
	("C_type",		ctypes.c_ulong),
	("lock",		ctypes.POINTER(_GMutex)),
	("master_cookie",		ctypes.POINTER(ctypes.c_uint)),
	("next",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstIterator),ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)),)),
	("item",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstIterator),ctypes.POINTER(ctypes.c_void_p),)),
	("resync",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GstIterator),)),
	("free",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GstIterator),)),] )

gst_iterator_new_list = _rpythonic_function_(		"gst_iterator_new_list", ctypes.POINTER(_GstIterator), [
	("C_type",		ctypes.c_ulong),
	("lock",		ctypes.POINTER(_GMutex)),
	("master_cookie",		ctypes.POINTER(ctypes.c_uint)),
	("C_list",		ctypes.POINTER(ctypes.POINTER(_GList))),
	("owner",		ctypes.POINTER(ctypes.c_void_p)),
	("item",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstIterator),ctypes.POINTER(ctypes.c_void_p),)),
	("free",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

gst_iterator_new_single = _rpythonic_function_(		"gst_iterator_new_single", ctypes.POINTER(_GstIterator), [
	("C_type",		ctypes.c_ulong),
	("C_object",		ctypes.POINTER(ctypes.c_void_p)),
	("copy",		ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), )),
	("free",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

gst_iterator_next = _rpythonic_function_(		"gst_iterator_next", ctypes.c_int, [
	("it",		ctypes.POINTER(_GstIterator)),
	("elem",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

gst_iterator_resync = _rpythonic_function_(		"gst_iterator_resync", ctypes.c_void_p, [
	("it",		ctypes.POINTER(_GstIterator)),] )

gst_iterator_free = _rpythonic_function_(		"gst_iterator_free", ctypes.c_void_p, [
	("it",		ctypes.POINTER(_GstIterator)),] )

gst_iterator_push = _rpythonic_function_(		"gst_iterator_push", ctypes.c_void_p, [
	("it",		ctypes.POINTER(_GstIterator)),
	("other",		ctypes.POINTER(_GstIterator)),] )

gst_iterator_filter = _rpythonic_function_(		"gst_iterator_filter", ctypes.POINTER(_GstIterator), [
	("it",		ctypes.POINTER(_GstIterator)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_iterator_fold = _rpythonic_function_(		"gst_iterator_fold", ctypes.c_int, [
	("it",		ctypes.POINTER(_GstIterator)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GValue),ctypes.POINTER(ctypes.c_void_p),)),
	("ret",		ctypes.POINTER(_GValue)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_iterator_foreach = _rpythonic_function_(		"gst_iterator_foreach", ctypes.c_int, [
	("it",		ctypes.POINTER(_GstIterator)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_iterator_find_custom = _rpythonic_function_(		"gst_iterator_find_custom", ctypes.POINTER(ctypes.c_void_p), [
	("it",		ctypes.POINTER(_GstIterator)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_format_get_name = _rpythonic_function_(		"gst_format_get_name", ctypes.POINTER(ctypes.c_char), [
	("format",		ctypes.c_int),] )

gst_format_to_quark = _rpythonic_function_(		"gst_format_to_quark", ctypes.c_uint, [
	("format",		ctypes.c_int),] )

gst_format_register = _rpythonic_function_(		"gst_format_register", ctypes.c_int, [
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("description",		ctypes.POINTER(ctypes.c_char)),] )

gst_format_get_by_nick = _rpythonic_function_(		"gst_format_get_by_nick", ctypes.c_int, [
	("nick",		ctypes.POINTER(ctypes.c_char)),] )

gst_formats_contains = _rpythonic_function_(		"gst_formats_contains", ctypes.c_int, [
	("formats",		ctypes.POINTER(ctypes.c_int)),
	("format",		ctypes.c_int),] )

gst_format_get_details = _rpythonic_function_(		"gst_format_get_details", ctypes.POINTER(_GstFormatDefinition), [
	("format",		ctypes.c_int),] )

gst_format_iterate_definitions = _rpythonic_function_(		"gst_format_iterate_definitions", ctypes.POINTER(_GstIterator), [] )

GstTagForeachFunc = _rpythonic_function_(		"GstTagForeachFunc", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GstStructure)),
	("tag",		ctypes.POINTER(ctypes.c_char)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GstTagMergeFunc = _rpythonic_function_(		"GstTagMergeFunc", ctypes.c_void_p, [
	("dest",		ctypes.POINTER(_GValue)),
	("src",		ctypes.POINTER(_GValue)),] )

gst_tag_list_get_type = _rpythonic_function_(		"gst_tag_list_get_type", ctypes.c_ulong, [] )

gst_tag_register = _rpythonic_function_(		"gst_tag_register", ctypes.c_void_p, [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("flag",		ctypes.c_int),
	("C_type",		ctypes.c_ulong),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GValue),ctypes.POINTER(_GValue),)),] )

gst_tag_merge_use_first = _rpythonic_function_(		"gst_tag_merge_use_first", ctypes.c_void_p, [
	("dest",		ctypes.POINTER(_GValue)),
	("src",		ctypes.POINTER(_GValue)),] )

gst_tag_merge_strings_with_comma = _rpythonic_function_(		"gst_tag_merge_strings_with_comma", ctypes.c_void_p, [
	("dest",		ctypes.POINTER(_GValue)),
	("src",		ctypes.POINTER(_GValue)),] )

gst_tag_exists = _rpythonic_function_(		"gst_tag_exists", ctypes.c_int, [
	("tag",		ctypes.POINTER(ctypes.c_char)),] )

gst_tag_get_type = _rpythonic_function_(		"gst_tag_get_type", ctypes.c_ulong, [
	("tag",		ctypes.POINTER(ctypes.c_char)),] )

gst_tag_get_nick = _rpythonic_function_(		"gst_tag_get_nick", ctypes.POINTER(ctypes.c_char), [
	("tag",		ctypes.POINTER(ctypes.c_char)),] )

gst_tag_get_description = _rpythonic_function_(		"gst_tag_get_description", ctypes.POINTER(ctypes.c_char), [
	("tag",		ctypes.POINTER(ctypes.c_char)),] )

gst_tag_get_flag = _rpythonic_function_(		"gst_tag_get_flag", ctypes.c_int, [
	("tag",		ctypes.POINTER(ctypes.c_char)),] )

gst_tag_is_fixed = _rpythonic_function_(		"gst_tag_is_fixed", ctypes.c_int, [
	("tag",		ctypes.POINTER(ctypes.c_char)),] )

gst_tag_list_new = _rpythonic_function_(		"gst_tag_list_new", ctypes.POINTER(_GstStructure), [] )

gst_tag_list_new_full = _rpythonic_function_(		"gst_tag_list_new_full", ctypes.POINTER(_GstStructure), [
	("tag",		ctypes.POINTER(ctypes.c_char)),] )

gst_tag_list_new_full_valist = _rpythonic_function_(		"gst_tag_list_new_full_valist", ctypes.POINTER(_GstStructure), [
	("var_args",		ctypes.c_char),] )

gst_is_tag_list = _rpythonic_function_(		"gst_is_tag_list", ctypes.c_int, [("p",		ctypes.c_void_p)] )

gst_tag_list_copy = _rpythonic_function_(		"gst_tag_list_copy", ctypes.POINTER(_GstStructure), [
	("C_list",		ctypes.POINTER(_GstStructure)),] )

gst_tag_list_is_empty = _rpythonic_function_(		"gst_tag_list_is_empty", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GstStructure)),] )

gst_tag_list_insert = _rpythonic_function_(		"gst_tag_list_insert", ctypes.c_void_p, [
	("into",		ctypes.POINTER(_GstStructure)),
	("from",		ctypes.POINTER(_GstStructure)),
	("mode",		ctypes.c_int),] )

gst_tag_list_merge = _rpythonic_function_(		"gst_tag_list_merge", ctypes.POINTER(_GstStructure), [
	("list1",		ctypes.POINTER(_GstStructure)),
	("list2",		ctypes.POINTER(_GstStructure)),
	("mode",		ctypes.c_int),] )

gst_tag_list_free = _rpythonic_function_(		"gst_tag_list_free", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GstStructure)),] )

gst_tag_list_get_tag_size = _rpythonic_function_(		"gst_tag_list_get_tag_size", ctypes.c_uint, [
	("C_list",		ctypes.POINTER(_GstStructure)),
	("tag",		ctypes.POINTER(ctypes.c_char)),] )

gst_tag_list_add = _rpythonic_function_(		"gst_tag_list_add", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GstStructure)),
	("mode",		ctypes.c_int),
	("tag",		ctypes.POINTER(ctypes.c_char)),] )

gst_tag_list_add_values = _rpythonic_function_(		"gst_tag_list_add_values", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GstStructure)),
	("mode",		ctypes.c_int),
	("tag",		ctypes.POINTER(ctypes.c_char)),] )

gst_tag_list_add_valist = _rpythonic_function_(		"gst_tag_list_add_valist", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GstStructure)),
	("mode",		ctypes.c_int),
	("tag",		ctypes.POINTER(ctypes.c_char)),
	("var_args",		ctypes.c_char),] )

gst_tag_list_add_valist_values = _rpythonic_function_(		"gst_tag_list_add_valist_values", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GstStructure)),
	("mode",		ctypes.c_int),
	("tag",		ctypes.POINTER(ctypes.c_char)),
	("var_args",		ctypes.c_char),] )

gst_tag_list_add_value = _rpythonic_function_(		"gst_tag_list_add_value", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GstStructure)),
	("mode",		ctypes.c_int),
	("tag",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(_GValue)),] )

gst_tag_list_remove_tag = _rpythonic_function_(		"gst_tag_list_remove_tag", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GstStructure)),
	("tag",		ctypes.POINTER(ctypes.c_char)),] )

gst_tag_list_foreach = _rpythonic_function_(		"gst_tag_list_foreach", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GstStructure)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GstStructure),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_tag_list_get_value_index = _rpythonic_function_(		"gst_tag_list_get_value_index", ctypes.POINTER(_GValue), [
	("C_list",		ctypes.POINTER(_GstStructure)),
	("tag",		ctypes.POINTER(ctypes.c_char)),
	("index",		ctypes.c_uint),] )

gst_tag_list_copy_value = _rpythonic_function_(		"gst_tag_list_copy_value", ctypes.c_int, [
	("dest",		ctypes.POINTER(_GValue)),
	("C_list",		ctypes.POINTER(_GstStructure)),
	("tag",		ctypes.POINTER(ctypes.c_char)),] )

gst_tag_list_get_char = _rpythonic_function_(		"gst_tag_list_get_char", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GstStructure)),
	("tag",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

gst_tag_list_get_char_index = _rpythonic_function_(		"gst_tag_list_get_char_index", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GstStructure)),
	("tag",		ctypes.POINTER(ctypes.c_char)),
	("index",		ctypes.c_uint),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

gst_tag_list_get_uchar = _rpythonic_function_(		"gst_tag_list_get_uchar", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GstStructure)),
	("tag",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),] )

gst_tag_list_get_uchar_index = _rpythonic_function_(		"gst_tag_list_get_uchar_index", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GstStructure)),
	("tag",		ctypes.POINTER(ctypes.c_char)),
	("index",		ctypes.c_uint),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),] )

gst_tag_list_get_boolean = _rpythonic_function_(		"gst_tag_list_get_boolean", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GstStructure)),
	("tag",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_int)),] )

gst_tag_list_get_boolean_index = _rpythonic_function_(		"gst_tag_list_get_boolean_index", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GstStructure)),
	("tag",		ctypes.POINTER(ctypes.c_char)),
	("index",		ctypes.c_uint),
	("value",		ctypes.POINTER(ctypes.c_int)),] )

gst_tag_list_get_int = _rpythonic_function_(		"gst_tag_list_get_int", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GstStructure)),
	("tag",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_int)),] )

gst_tag_list_get_int_index = _rpythonic_function_(		"gst_tag_list_get_int_index", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GstStructure)),
	("tag",		ctypes.POINTER(ctypes.c_char)),
	("index",		ctypes.c_uint),
	("value",		ctypes.POINTER(ctypes.c_int)),] )

gst_tag_list_get_uint = _rpythonic_function_(		"gst_tag_list_get_uint", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GstStructure)),
	("tag",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_uint)),] )

gst_tag_list_get_uint_index = _rpythonic_function_(		"gst_tag_list_get_uint_index", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GstStructure)),
	("tag",		ctypes.POINTER(ctypes.c_char)),
	("index",		ctypes.c_uint),
	("value",		ctypes.POINTER(ctypes.c_uint)),] )

gst_tag_list_get_long = _rpythonic_function_(		"gst_tag_list_get_long", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GstStructure)),
	("tag",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_long)),] )

gst_tag_list_get_long_index = _rpythonic_function_(		"gst_tag_list_get_long_index", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GstStructure)),
	("tag",		ctypes.POINTER(ctypes.c_char)),
	("index",		ctypes.c_uint),
	("value",		ctypes.POINTER(ctypes.c_long)),] )

gst_tag_list_get_ulong = _rpythonic_function_(		"gst_tag_list_get_ulong", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GstStructure)),
	("tag",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_ulong)),] )

gst_tag_list_get_ulong_index = _rpythonic_function_(		"gst_tag_list_get_ulong_index", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GstStructure)),
	("tag",		ctypes.POINTER(ctypes.c_char)),
	("index",		ctypes.c_uint),
	("value",		ctypes.POINTER(ctypes.c_ulong)),] )

gst_tag_list_get_int64 = _rpythonic_function_(		"gst_tag_list_get_int64", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GstStructure)),
	("tag",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_long)),] )

gst_tag_list_get_int64_index = _rpythonic_function_(		"gst_tag_list_get_int64_index", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GstStructure)),
	("tag",		ctypes.POINTER(ctypes.c_char)),
	("index",		ctypes.c_uint),
	("value",		ctypes.POINTER(ctypes.c_long)),] )

gst_tag_list_get_uint64 = _rpythonic_function_(		"gst_tag_list_get_uint64", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GstStructure)),
	("tag",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_ulong)),] )

gst_tag_list_get_uint64_index = _rpythonic_function_(		"gst_tag_list_get_uint64_index", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GstStructure)),
	("tag",		ctypes.POINTER(ctypes.c_char)),
	("index",		ctypes.c_uint),
	("value",		ctypes.POINTER(ctypes.c_ulong)),] )

gst_tag_list_get_float = _rpythonic_function_(		"gst_tag_list_get_float", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GstStructure)),
	("tag",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

gst_tag_list_get_float_index = _rpythonic_function_(		"gst_tag_list_get_float_index", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GstStructure)),
	("tag",		ctypes.POINTER(ctypes.c_char)),
	("index",		ctypes.c_uint),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

gst_tag_list_get_double = _rpythonic_function_(		"gst_tag_list_get_double", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GstStructure)),
	("tag",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_double)),] )

gst_tag_list_get_double_index = _rpythonic_function_(		"gst_tag_list_get_double_index", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GstStructure)),
	("tag",		ctypes.POINTER(ctypes.c_char)),
	("index",		ctypes.c_uint),
	("value",		ctypes.POINTER(ctypes.c_double)),] )

gst_tag_list_get_string = _rpythonic_function_(		"gst_tag_list_get_string", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GstStructure)),
	("tag",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

gst_tag_list_get_string_index = _rpythonic_function_(		"gst_tag_list_get_string_index", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GstStructure)),
	("tag",		ctypes.POINTER(ctypes.c_char)),
	("index",		ctypes.c_uint),
	("value",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

gst_tag_list_peek_string_index = _rpythonic_function_(		"gst_tag_list_peek_string_index", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GstStructure)),
	("tag",		ctypes.POINTER(ctypes.c_char)),
	("index",		ctypes.c_uint),
	("value",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

gst_tag_list_get_pointer = _rpythonic_function_(		"gst_tag_list_get_pointer", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GstStructure)),
	("tag",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

gst_tag_list_get_pointer_index = _rpythonic_function_(		"gst_tag_list_get_pointer_index", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GstStructure)),
	("tag",		ctypes.POINTER(ctypes.c_char)),
	("index",		ctypes.c_uint),
	("value",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

gst_tag_list_get_date = _rpythonic_function_(		"gst_tag_list_get_date", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GstStructure)),
	("tag",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.POINTER(_GDate))),] )

gst_tag_list_get_date_index = _rpythonic_function_(		"gst_tag_list_get_date_index", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GstStructure)),
	("tag",		ctypes.POINTER(ctypes.c_char)),
	("index",		ctypes.c_uint),
	("value",		ctypes.POINTER(ctypes.POINTER(_GDate))),] )

gst_tag_list_get_date_time = _rpythonic_function_(		"gst_tag_list_get_date_time", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GstStructure)),
	("tag",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.POINTER(_GstDateTime))),] )

gst_tag_list_get_date_time_index = _rpythonic_function_(		"gst_tag_list_get_date_time_index", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GstStructure)),
	("tag",		ctypes.POINTER(ctypes.c_char)),
	("index",		ctypes.c_uint),
	("value",		ctypes.POINTER(ctypes.POINTER(_GstDateTime))),] )

gst_tag_list_get_buffer = _rpythonic_function_(		"gst_tag_list_get_buffer", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GstStructure)),
	("tag",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.POINTER(_GstBuffer))),] )

gst_tag_list_get_buffer_index = _rpythonic_function_(		"gst_tag_list_get_buffer_index", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GstStructure)),
	("tag",		ctypes.POINTER(ctypes.c_char)),
	("index",		ctypes.c_uint),
	("value",		ctypes.POINTER(ctypes.POINTER(_GstBuffer))),] )

gst_event_type_get_name = _rpythonic_function_(		"gst_event_type_get_name", ctypes.POINTER(ctypes.c_char), [
	("C_type",		ctypes.c_int),] )

gst_event_type_to_quark = _rpythonic_function_(		"gst_event_type_to_quark", ctypes.c_uint, [
	("C_type",		ctypes.c_int),] )

gst_event_type_get_flags = _rpythonic_function_(		"gst_event_type_get_flags", ctypes.c_int, [
	("C_type",		ctypes.c_int),] )

gst_event_get_type = _rpythonic_function_(		"gst_event_get_type", ctypes.c_ulong, [] )

gst_event_new_custom = _rpythonic_function_(		"gst_event_new_custom", ctypes.POINTER(_GstEvent), [
	("C_type",		ctypes.c_int),
	("structure",		ctypes.POINTER(_GstStructure)),] )

gst_event_get_structure = _rpythonic_function_(		"gst_event_get_structure", ctypes.POINTER(_GstStructure), [
	("event",		ctypes.POINTER(_GstEvent)),] )

gst_event_has_name = _rpythonic_function_(		"gst_event_has_name", ctypes.c_int, [
	("event",		ctypes.POINTER(_GstEvent)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gst_event_get_seqnum = _rpythonic_function_(		"gst_event_get_seqnum", ctypes.c_uint, [
	("event",		ctypes.POINTER(_GstEvent)),] )

gst_event_set_seqnum = _rpythonic_function_(		"gst_event_set_seqnum", ctypes.c_void_p, [
	("event",		ctypes.POINTER(_GstEvent)),
	("seqnum",		ctypes.c_uint),] )

gst_event_new_flush_start = _rpythonic_function_(		"gst_event_new_flush_start", ctypes.POINTER(_GstEvent), [] )

gst_event_new_flush_stop = _rpythonic_function_(		"gst_event_new_flush_stop", ctypes.POINTER(_GstEvent), [] )

gst_event_new_eos = _rpythonic_function_(		"gst_event_new_eos", ctypes.POINTER(_GstEvent), [] )

gst_event_new_new_segment = _rpythonic_function_(		"gst_event_new_new_segment", ctypes.POINTER(_GstEvent), [
	("update",		ctypes.c_int),
	("rate",		ctypes.c_double),
	("format",		ctypes.c_int),
	("start",		ctypes.c_long),
	("stop",		ctypes.c_long),
	("position",		ctypes.c_long),] )

gst_event_new_new_segment_full = _rpythonic_function_(		"gst_event_new_new_segment_full", ctypes.POINTER(_GstEvent), [
	("update",		ctypes.c_int),
	("rate",		ctypes.c_double),
	("applied_rate",		ctypes.c_double),
	("format",		ctypes.c_int),
	("start",		ctypes.c_long),
	("stop",		ctypes.c_long),
	("position",		ctypes.c_long),] )

gst_event_parse_new_segment = _rpythonic_function_(		"gst_event_parse_new_segment", ctypes.c_void_p, [
	("event",		ctypes.POINTER(_GstEvent)),
	("update",		ctypes.POINTER(ctypes.c_int)),
	("rate",		ctypes.POINTER(ctypes.c_double)),
	("format",		ctypes.POINTER(ctypes.c_int)),
	("start",		ctypes.POINTER(ctypes.c_long)),
	("stop",		ctypes.POINTER(ctypes.c_long)),
	("position",		ctypes.POINTER(ctypes.c_long)),] )

gst_event_parse_new_segment_full = _rpythonic_function_(		"gst_event_parse_new_segment_full", ctypes.c_void_p, [
	("event",		ctypes.POINTER(_GstEvent)),
	("update",		ctypes.POINTER(ctypes.c_int)),
	("rate",		ctypes.POINTER(ctypes.c_double)),
	("applied_rate",		ctypes.POINTER(ctypes.c_double)),
	("format",		ctypes.POINTER(ctypes.c_int)),
	("start",		ctypes.POINTER(ctypes.c_long)),
	("stop",		ctypes.POINTER(ctypes.c_long)),
	("position",		ctypes.POINTER(ctypes.c_long)),] )

gst_event_new_tag = _rpythonic_function_(		"gst_event_new_tag", ctypes.POINTER(_GstEvent), [
	("taglist",		ctypes.POINTER(_GstStructure)),] )

gst_event_parse_tag = _rpythonic_function_(		"gst_event_parse_tag", ctypes.c_void_p, [
	("event",		ctypes.POINTER(_GstEvent)),
	("taglist",		ctypes.POINTER(ctypes.POINTER(_GstStructure))),] )

gst_event_new_buffer_size = _rpythonic_function_(		"gst_event_new_buffer_size", ctypes.POINTER(_GstEvent), [
	("format",		ctypes.c_int),
	("minsize",		ctypes.c_long),
	("maxsize",		ctypes.c_long),
	("async",		ctypes.c_int),] )

gst_event_parse_buffer_size = _rpythonic_function_(		"gst_event_parse_buffer_size", ctypes.c_void_p, [
	("event",		ctypes.POINTER(_GstEvent)),
	("format",		ctypes.POINTER(ctypes.c_int)),
	("minsize",		ctypes.POINTER(ctypes.c_long)),
	("maxsize",		ctypes.POINTER(ctypes.c_long)),
	("async",		ctypes.POINTER(ctypes.c_int)),] )

gst_event_new_qos = _rpythonic_function_(		"gst_event_new_qos", ctypes.POINTER(_GstEvent), [
	("proportion",		ctypes.c_double),
	("diff",		ctypes.c_long),
	("timestamp",		ctypes.c_ulong),] )

gst_event_new_qos_full = _rpythonic_function_(		"gst_event_new_qos_full", ctypes.POINTER(_GstEvent), [
	("C_type",		ctypes.c_int),
	("proportion",		ctypes.c_double),
	("diff",		ctypes.c_long),
	("timestamp",		ctypes.c_ulong),] )

gst_event_parse_qos = _rpythonic_function_(		"gst_event_parse_qos", ctypes.c_void_p, [
	("event",		ctypes.POINTER(_GstEvent)),
	("proportion",		ctypes.POINTER(ctypes.c_double)),
	("diff",		ctypes.POINTER(ctypes.c_long)),
	("timestamp",		ctypes.POINTER(ctypes.c_ulong)),] )

gst_event_parse_qos_full = _rpythonic_function_(		"gst_event_parse_qos_full", ctypes.c_void_p, [
	("event",		ctypes.POINTER(_GstEvent)),
	("C_type",		ctypes.POINTER(ctypes.c_int)),
	("proportion",		ctypes.POINTER(ctypes.c_double)),
	("diff",		ctypes.POINTER(ctypes.c_long)),
	("timestamp",		ctypes.POINTER(ctypes.c_ulong)),] )

gst_event_new_seek = _rpythonic_function_(		"gst_event_new_seek", ctypes.POINTER(_GstEvent), [
	("rate",		ctypes.c_double),
	("format",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("start_type",		ctypes.c_int),
	("start",		ctypes.c_long),
	("stop_type",		ctypes.c_int),
	("stop",		ctypes.c_long),] )

gst_event_parse_seek = _rpythonic_function_(		"gst_event_parse_seek", ctypes.c_void_p, [
	("event",		ctypes.POINTER(_GstEvent)),
	("rate",		ctypes.POINTER(ctypes.c_double)),
	("format",		ctypes.POINTER(ctypes.c_int)),
	("flags",		ctypes.POINTER(ctypes.c_int)),
	("start_type",		ctypes.POINTER(ctypes.c_int)),
	("start",		ctypes.POINTER(ctypes.c_long)),
	("stop_type",		ctypes.POINTER(ctypes.c_int)),
	("stop",		ctypes.POINTER(ctypes.c_long)),] )

gst_event_new_navigation = _rpythonic_function_(		"gst_event_new_navigation", ctypes.POINTER(_GstEvent), [
	("structure",		ctypes.POINTER(_GstStructure)),] )

gst_event_new_latency = _rpythonic_function_(		"gst_event_new_latency", ctypes.POINTER(_GstEvent), [
	("latency",		ctypes.c_ulong),] )

gst_event_parse_latency = _rpythonic_function_(		"gst_event_parse_latency", ctypes.c_void_p, [
	("event",		ctypes.POINTER(_GstEvent)),
	("latency",		ctypes.POINTER(ctypes.c_ulong)),] )

gst_event_new_step = _rpythonic_function_(		"gst_event_new_step", ctypes.POINTER(_GstEvent), [
	("format",		ctypes.c_int),
	("amount",		ctypes.c_ulong),
	("rate",		ctypes.c_double),
	("flush",		ctypes.c_int),
	("intermediate",		ctypes.c_int),] )

gst_event_parse_step = _rpythonic_function_(		"gst_event_parse_step", ctypes.c_void_p, [
	("event",		ctypes.POINTER(_GstEvent)),
	("format",		ctypes.POINTER(ctypes.c_int)),
	("amount",		ctypes.POINTER(ctypes.c_ulong)),
	("rate",		ctypes.POINTER(ctypes.c_double)),
	("flush",		ctypes.POINTER(ctypes.c_int)),
	("intermediate",		ctypes.POINTER(ctypes.c_int)),] )

gst_query_type_get_name = _rpythonic_function_(		"gst_query_type_get_name", ctypes.POINTER(ctypes.c_char), [
	("query",		ctypes.c_int),] )

gst_query_type_to_quark = _rpythonic_function_(		"gst_query_type_to_quark", ctypes.c_uint, [
	("query",		ctypes.c_int),] )

gst_query_get_type = _rpythonic_function_(		"gst_query_get_type", ctypes.c_ulong, [] )

gst_query_type_register = _rpythonic_function_(		"gst_query_type_register", ctypes.c_int, [
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("description",		ctypes.POINTER(ctypes.c_char)),] )

gst_query_type_get_by_nick = _rpythonic_function_(		"gst_query_type_get_by_nick", ctypes.c_int, [
	("nick",		ctypes.POINTER(ctypes.c_char)),] )

gst_query_types_contains = _rpythonic_function_(		"gst_query_types_contains", ctypes.c_int, [
	("types",		ctypes.POINTER(ctypes.c_int)),
	("C_type",		ctypes.c_int),] )

gst_query_type_get_details = _rpythonic_function_(		"gst_query_type_get_details", ctypes.POINTER(_GstQueryTypeDefinition), [
	("C_type",		ctypes.c_int),] )

gst_query_type_iterate_definitions = _rpythonic_function_(		"gst_query_type_iterate_definitions", ctypes.POINTER(_GstIterator), [] )

gst_query_new_position = _rpythonic_function_(		"gst_query_new_position", ctypes.POINTER(_GstQuery), [
	("format",		ctypes.c_int),] )

gst_query_set_position = _rpythonic_function_(		"gst_query_set_position", ctypes.c_void_p, [
	("query",		ctypes.POINTER(_GstQuery)),
	("format",		ctypes.c_int),
	("cur",		ctypes.c_long),] )

gst_query_parse_position = _rpythonic_function_(		"gst_query_parse_position", ctypes.c_void_p, [
	("query",		ctypes.POINTER(_GstQuery)),
	("format",		ctypes.POINTER(ctypes.c_int)),
	("cur",		ctypes.POINTER(ctypes.c_long)),] )

gst_query_new_duration = _rpythonic_function_(		"gst_query_new_duration", ctypes.POINTER(_GstQuery), [
	("format",		ctypes.c_int),] )

gst_query_set_duration = _rpythonic_function_(		"gst_query_set_duration", ctypes.c_void_p, [
	("query",		ctypes.POINTER(_GstQuery)),
	("format",		ctypes.c_int),
	("duration",		ctypes.c_long),] )

gst_query_parse_duration = _rpythonic_function_(		"gst_query_parse_duration", ctypes.c_void_p, [
	("query",		ctypes.POINTER(_GstQuery)),
	("format",		ctypes.POINTER(ctypes.c_int)),
	("duration",		ctypes.POINTER(ctypes.c_long)),] )

gst_query_new_latency = _rpythonic_function_(		"gst_query_new_latency", ctypes.POINTER(_GstQuery), [] )

gst_query_set_latency = _rpythonic_function_(		"gst_query_set_latency", ctypes.c_void_p, [
	("query",		ctypes.POINTER(_GstQuery)),
	("live",		ctypes.c_int),
	("min_latency",		ctypes.c_ulong),
	("max_latency",		ctypes.c_ulong),] )

gst_query_parse_latency = _rpythonic_function_(		"gst_query_parse_latency", ctypes.c_void_p, [
	("query",		ctypes.POINTER(_GstQuery)),
	("live",		ctypes.POINTER(ctypes.c_int)),
	("min_latency",		ctypes.POINTER(ctypes.c_ulong)),
	("max_latency",		ctypes.POINTER(ctypes.c_ulong)),] )

gst_query_new_convert = _rpythonic_function_(		"gst_query_new_convert", ctypes.POINTER(_GstQuery), [
	("src_format",		ctypes.c_int),
	("value",		ctypes.c_long),
	("dest_format",		ctypes.c_int),] )

gst_query_set_convert = _rpythonic_function_(		"gst_query_set_convert", ctypes.c_void_p, [
	("query",		ctypes.POINTER(_GstQuery)),
	("src_format",		ctypes.c_int),
	("src_value",		ctypes.c_long),
	("dest_format",		ctypes.c_int),
	("dest_value",		ctypes.c_long),] )

gst_query_parse_convert = _rpythonic_function_(		"gst_query_parse_convert", ctypes.c_void_p, [
	("query",		ctypes.POINTER(_GstQuery)),
	("src_format",		ctypes.POINTER(ctypes.c_int)),
	("src_value",		ctypes.POINTER(ctypes.c_long)),
	("dest_format",		ctypes.POINTER(ctypes.c_int)),
	("dest_value",		ctypes.POINTER(ctypes.c_long)),] )

gst_query_new_segment = _rpythonic_function_(		"gst_query_new_segment", ctypes.POINTER(_GstQuery), [
	("format",		ctypes.c_int),] )

gst_query_set_segment = _rpythonic_function_(		"gst_query_set_segment", ctypes.c_void_p, [
	("query",		ctypes.POINTER(_GstQuery)),
	("rate",		ctypes.c_double),
	("format",		ctypes.c_int),
	("start_value",		ctypes.c_long),
	("stop_value",		ctypes.c_long),] )

gst_query_parse_segment = _rpythonic_function_(		"gst_query_parse_segment", ctypes.c_void_p, [
	("query",		ctypes.POINTER(_GstQuery)),
	("rate",		ctypes.POINTER(ctypes.c_double)),
	("format",		ctypes.POINTER(ctypes.c_int)),
	("start_value",		ctypes.POINTER(ctypes.c_long)),
	("stop_value",		ctypes.POINTER(ctypes.c_long)),] )

gst_query_new_application = _rpythonic_function_(		"gst_query_new_application", ctypes.POINTER(_GstQuery), [
	("C_type",		ctypes.c_int),
	("structure",		ctypes.POINTER(_GstStructure)),] )

gst_query_get_structure = _rpythonic_function_(		"gst_query_get_structure", ctypes.POINTER(_GstStructure), [
	("query",		ctypes.POINTER(_GstQuery)),] )

gst_query_new_seeking = _rpythonic_function_(		"gst_query_new_seeking", ctypes.POINTER(_GstQuery), [
	("format",		ctypes.c_int),] )

gst_query_set_seeking = _rpythonic_function_(		"gst_query_set_seeking", ctypes.c_void_p, [
	("query",		ctypes.POINTER(_GstQuery)),
	("format",		ctypes.c_int),
	("seekable",		ctypes.c_int),
	("segment_start",		ctypes.c_long),
	("segment_end",		ctypes.c_long),] )

gst_query_parse_seeking = _rpythonic_function_(		"gst_query_parse_seeking", ctypes.c_void_p, [
	("query",		ctypes.POINTER(_GstQuery)),
	("format",		ctypes.POINTER(ctypes.c_int)),
	("seekable",		ctypes.POINTER(ctypes.c_int)),
	("segment_start",		ctypes.POINTER(ctypes.c_long)),
	("segment_end",		ctypes.POINTER(ctypes.c_long)),] )

gst_query_new_formats = _rpythonic_function_(		"gst_query_new_formats", ctypes.POINTER(_GstQuery), [] )

gst_query_set_formats = _rpythonic_function_(		"gst_query_set_formats", ctypes.c_void_p, [
	("query",		ctypes.POINTER(_GstQuery)),
	("n_formats",		ctypes.c_int),] )

gst_query_set_formatsv = _rpythonic_function_(		"gst_query_set_formatsv", ctypes.c_void_p, [
	("query",		ctypes.POINTER(_GstQuery)),
	("n_formats",		ctypes.c_int),
	("formats",		ctypes.POINTER(ctypes.c_int)),] )

gst_query_parse_formats_length = _rpythonic_function_(		"gst_query_parse_formats_length", ctypes.c_void_p, [
	("query",		ctypes.POINTER(_GstQuery)),
	("n_formats",		ctypes.POINTER(ctypes.c_uint)),] )

gst_query_parse_formats_nth = _rpythonic_function_(		"gst_query_parse_formats_nth", ctypes.c_void_p, [
	("query",		ctypes.POINTER(_GstQuery)),
	("nth",		ctypes.c_uint),
	("format",		ctypes.POINTER(ctypes.c_int)),] )

gst_query_new_buffering = _rpythonic_function_(		"gst_query_new_buffering", ctypes.POINTER(_GstQuery), [
	("format",		ctypes.c_int),] )

gst_query_set_buffering_percent = _rpythonic_function_(		"gst_query_set_buffering_percent", ctypes.c_void_p, [
	("query",		ctypes.POINTER(_GstQuery)),
	("busy",		ctypes.c_int),
	("percent",		ctypes.c_int),] )

gst_query_parse_buffering_percent = _rpythonic_function_(		"gst_query_parse_buffering_percent", ctypes.c_void_p, [
	("query",		ctypes.POINTER(_GstQuery)),
	("busy",		ctypes.POINTER(ctypes.c_int)),
	("percent",		ctypes.POINTER(ctypes.c_int)),] )

gst_query_set_buffering_stats = _rpythonic_function_(		"gst_query_set_buffering_stats", ctypes.c_void_p, [
	("query",		ctypes.POINTER(_GstQuery)),
	("mode",		ctypes.c_int),
	("avg_in",		ctypes.c_int),
	("avg_out",		ctypes.c_int),
	("buffering_left",		ctypes.c_long),] )

gst_query_parse_buffering_stats = _rpythonic_function_(		"gst_query_parse_buffering_stats", ctypes.c_void_p, [
	("query",		ctypes.POINTER(_GstQuery)),
	("mode",		ctypes.POINTER(ctypes.c_int)),
	("avg_in",		ctypes.POINTER(ctypes.c_int)),
	("avg_out",		ctypes.POINTER(ctypes.c_int)),
	("buffering_left",		ctypes.POINTER(ctypes.c_long)),] )

gst_query_set_buffering_range = _rpythonic_function_(		"gst_query_set_buffering_range", ctypes.c_void_p, [
	("query",		ctypes.POINTER(_GstQuery)),
	("format",		ctypes.c_int),
	("start",		ctypes.c_long),
	("stop",		ctypes.c_long),
	("estimated_total",		ctypes.c_long),] )

gst_query_parse_buffering_range = _rpythonic_function_(		"gst_query_parse_buffering_range", ctypes.c_void_p, [
	("query",		ctypes.POINTER(_GstQuery)),
	("format",		ctypes.POINTER(ctypes.c_int)),
	("start",		ctypes.POINTER(ctypes.c_long)),
	("stop",		ctypes.POINTER(ctypes.c_long)),
	("estimated_total",		ctypes.POINTER(ctypes.c_long)),] )

gst_query_add_buffering_range = _rpythonic_function_(		"gst_query_add_buffering_range", ctypes.c_int, [
	("query",		ctypes.POINTER(_GstQuery)),
	("start",		ctypes.c_long),
	("stop",		ctypes.c_long),] )

gst_query_get_n_buffering_ranges = _rpythonic_function_(		"gst_query_get_n_buffering_ranges", ctypes.c_uint, [
	("query",		ctypes.POINTER(_GstQuery)),] )

gst_query_parse_nth_buffering_range = _rpythonic_function_(		"gst_query_parse_nth_buffering_range", ctypes.c_int, [
	("query",		ctypes.POINTER(_GstQuery)),
	("index",		ctypes.c_uint),
	("start",		ctypes.POINTER(ctypes.c_long)),
	("stop",		ctypes.POINTER(ctypes.c_long)),] )

gst_query_new_uri = _rpythonic_function_(		"gst_query_new_uri", ctypes.POINTER(_GstQuery), [] )

gst_query_parse_uri = _rpythonic_function_(		"gst_query_parse_uri", ctypes.c_void_p, [
	("query",		ctypes.POINTER(_GstQuery)),
	("uri",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

gst_query_set_uri = _rpythonic_function_(		"gst_query_set_uri", ctypes.c_void_p, [
	("query",		ctypes.POINTER(_GstQuery)),
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

GstTaskPoolFunction = _rpythonic_function_(		"GstTaskPoolFunction", ctypes.c_void_p, [("data",		ctypes.c_void_p)] )

cleanup = _rpythonic_function_(		"cleanup", ctypes.c_void_p, [
	("pool",		ctypes.POINTER(_GstTaskPool)),] )

push = _rpythonic_function_(		"push", ctypes.POINTER(ctypes.c_void_p), [
	("pool",		ctypes.POINTER(_GstTaskPool)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

join = _rpythonic_function_(		"join", ctypes.c_void_p, [
	("pool",		ctypes.POINTER(_GstTaskPool)),
	("C_id",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_task_pool_get_type = _rpythonic_function_(		"gst_task_pool_get_type", ctypes.c_ulong, [] )

gst_task_pool_new = _rpythonic_function_(		"gst_task_pool_new", ctypes.POINTER(_GstTaskPool), [] )

gst_task_pool_prepare = _rpythonic_function_(		"gst_task_pool_prepare", ctypes.c_void_p, [
	("pool",		ctypes.POINTER(_GstTaskPool)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gst_task_pool_push = _rpythonic_function_(		"gst_task_pool_push", ctypes.POINTER(ctypes.c_void_p), [
	("pool",		ctypes.POINTER(_GstTaskPool)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gst_task_pool_join = _rpythonic_function_(		"gst_task_pool_join", ctypes.c_void_p, [
	("pool",		ctypes.POINTER(_GstTaskPool)),
	("C_id",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_task_pool_cleanup = _rpythonic_function_(		"gst_task_pool_cleanup", ctypes.c_void_p, [
	("pool",		ctypes.POINTER(_GstTaskPool)),] )

GstTaskFunction = _rpythonic_function_(		"GstTaskFunction", ctypes.c_void_p, [("data",		ctypes.c_void_p)] )

enter_thread = _rpythonic_function_(		"enter_thread", ctypes.c_void_p, [
	("task",		ctypes.POINTER(_GstTask)),
	("thread",		ctypes.POINTER(_GThread)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

leave_thread = _rpythonic_function_(		"leave_thread", ctypes.c_void_p, [
	("task",		ctypes.POINTER(_GstTask)),
	("thread",		ctypes.POINTER(_GThread)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_task_cleanup_all = _rpythonic_function_(		"gst_task_cleanup_all", ctypes.c_void_p, [] )

gst_task_get_type = _rpythonic_function_(		"gst_task_get_type", ctypes.c_ulong, [] )

gst_task_create = _rpythonic_function_(		"gst_task_create", ctypes.POINTER(_GstTask), [
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_task_set_lock = _rpythonic_function_(		"gst_task_set_lock", ctypes.c_void_p, [
	("task",		ctypes.POINTER(_GstTask)),
	("mutex",		ctypes.POINTER(_GStaticRecMutex)),] )

gst_task_set_priority = _rpythonic_function_(		"gst_task_set_priority", ctypes.c_void_p, [
	("task",		ctypes.POINTER(_GstTask)),
	("priority",		ctypes.c_int),] )

gst_task_get_pool = _rpythonic_function_(		"gst_task_get_pool", ctypes.POINTER(_GstTaskPool), [
	("task",		ctypes.POINTER(_GstTask)),] )

gst_task_set_pool = _rpythonic_function_(		"gst_task_set_pool", ctypes.c_void_p, [
	("task",		ctypes.POINTER(_GstTask)),
	("pool",		ctypes.POINTER(_GstTaskPool)),] )

gst_task_set_thread_callbacks = _rpythonic_function_(		"gst_task_set_thread_callbacks", ctypes.c_void_p, [
	("task",		ctypes.POINTER(_GstTask)),
	("callbacks",		ctypes.POINTER(GstTaskThreadCallbacks)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

gst_task_get_state = _rpythonic_function_(		"gst_task_get_state", ctypes.c_int, [
	("task",		ctypes.POINTER(_GstTask)),] )

gst_task_set_state = _rpythonic_function_(		"gst_task_set_state", ctypes.c_int, [
	("task",		ctypes.POINTER(_GstTask)),
	("state",		ctypes.c_int),] )

gst_task_start = _rpythonic_function_(		"gst_task_start", ctypes.c_int, [
	("task",		ctypes.POINTER(_GstTask)),] )

gst_task_stop = _rpythonic_function_(		"gst_task_stop", ctypes.c_int, [
	("task",		ctypes.POINTER(_GstTask)),] )

gst_task_pause = _rpythonic_function_(		"gst_task_pause", ctypes.c_int, [
	("task",		ctypes.POINTER(_GstTask)),] )

gst_task_join = _rpythonic_function_(		"gst_task_join", ctypes.c_int, [
	("task",		ctypes.POINTER(_GstTask)),] )

gst_flow_get_name = _rpythonic_function_(		"gst_flow_get_name", ctypes.POINTER(ctypes.c_char), [
	("ret",		ctypes.c_int),] )

gst_flow_to_quark = _rpythonic_function_(		"gst_flow_to_quark", ctypes.c_uint, [
	("ret",		ctypes.c_int),] )

GstPadActivateFunction = _rpythonic_function_(		"GstPadActivateFunction", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),] )

GstPadActivateModeFunction = _rpythonic_function_(		"GstPadActivateModeFunction", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),
	("active",		ctypes.c_int),] )

GstPadChainFunction = _rpythonic_function_(		"GstPadChainFunction", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),
	("buffer",		ctypes.POINTER(_GstBuffer)),] )

GstPadChainListFunction = _rpythonic_function_(		"GstPadChainListFunction", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),
	("C_list",		ctypes.POINTER(_GstBufferList)),] )

GstPadGetRangeFunction = _rpythonic_function_(		"GstPadGetRangeFunction", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),
	("offset",		ctypes.c_ulong),
	("length",		ctypes.c_uint),
	("buffer",		ctypes.POINTER(ctypes.POINTER(_GstBuffer))),] )

GstPadEventFunction = _rpythonic_function_(		"GstPadEventFunction", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),
	("event",		ctypes.POINTER(_GstEvent)),] )

GstPadCheckGetRangeFunction = _rpythonic_function_(		"GstPadCheckGetRangeFunction", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),] )

GstPadIntLinkFunction = _rpythonic_function_(		"GstPadIntLinkFunction", ctypes.POINTER(_GList), [
	("pad",		ctypes.POINTER(_GstPad)),] )

GstPadIterIntLinkFunction = _rpythonic_function_(		"GstPadIterIntLinkFunction", ctypes.POINTER(_GstIterator), [
	("pad",		ctypes.POINTER(_GstPad)),] )

GstPadQueryTypeFunction = _rpythonic_function_(		"GstPadQueryTypeFunction", ctypes.POINTER(ctypes.c_int), [
	("pad",		ctypes.POINTER(_GstPad)),] )

GstPadQueryFunction = _rpythonic_function_(		"GstPadQueryFunction", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),
	("query",		ctypes.POINTER(_GstQuery)),] )

GstPadLinkFunction = _rpythonic_function_(		"GstPadLinkFunction", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),
	("peer",		ctypes.POINTER(_GstPad)),] )

GstPadUnlinkFunction = _rpythonic_function_(		"GstPadUnlinkFunction", ctypes.c_void_p, [
	("pad",		ctypes.POINTER(_GstPad)),] )

GstPadGetCapsFunction = _rpythonic_function_(		"GstPadGetCapsFunction", ctypes.POINTER(_GstCaps), [
	("pad",		ctypes.POINTER(_GstPad)),] )

GstPadSetCapsFunction = _rpythonic_function_(		"GstPadSetCapsFunction", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),
	("caps",		ctypes.POINTER(_GstCaps)),] )

GstPadAcceptCapsFunction = _rpythonic_function_(		"GstPadAcceptCapsFunction", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),
	("caps",		ctypes.POINTER(_GstCaps)),] )

GstPadFixateCapsFunction = _rpythonic_function_(		"GstPadFixateCapsFunction", ctypes.c_void_p, [
	("pad",		ctypes.POINTER(_GstPad)),
	("caps",		ctypes.POINTER(_GstCaps)),] )

GstPadBufferAllocFunction = _rpythonic_function_(		"GstPadBufferAllocFunction", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),
	("offset",		ctypes.c_ulong),
	("size",		ctypes.c_uint),
	("caps",		ctypes.POINTER(_GstCaps)),
	("buf",		ctypes.POINTER(ctypes.POINTER(_GstBuffer))),] )

GstPadDispatcherFunction = _rpythonic_function_(		"GstPadDispatcherFunction", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

GstPadBlockCallback = _rpythonic_function_(		"GstPadBlockCallback", ctypes.c_void_p, [
	("pad",		ctypes.POINTER(_GstPad)),
	("blocked",		ctypes.c_int),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

linked = _rpythonic_function_(		"linked", ctypes.c_void_p, [
	("pad",		ctypes.POINTER(_GstPad)),
	("peer",		ctypes.POINTER(_GstPad)),] )

unlinked = _rpythonic_function_(		"unlinked", ctypes.c_void_p, [
	("pad",		ctypes.POINTER(_GstPad)),
	("peer",		ctypes.POINTER(_GstPad)),] )

request_link = _rpythonic_function_(		"request_link", ctypes.c_void_p, [
	("pad",		ctypes.POINTER(_GstPad)),] )

have_data = _rpythonic_function_(		"have_data", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),
	("data",		ctypes.POINTER(_GstMiniObject)),] )

pad_created = _rpythonic_function_(		"pad_created", ctypes.c_void_p, [
	("templ",		ctypes.POINTER(_GstPadTemplate)),
	("pad",		ctypes.POINTER(_GstPad)),] )

gst_pad_template_get_type = _rpythonic_function_(		"gst_pad_template_get_type", ctypes.c_ulong, [] )

gst_static_pad_template_get_type = _rpythonic_function_(		"gst_static_pad_template_get_type", ctypes.c_ulong, [] )

gst_pad_template_new = _rpythonic_function_(		"gst_pad_template_new", ctypes.POINTER(_GstPadTemplate), [
	("name_template",		ctypes.POINTER(ctypes.c_char)),
	("direction",		ctypes.c_int),
	("presence",		ctypes.c_int),
	("caps",		ctypes.POINTER(_GstCaps)),] )

gst_static_pad_template_get = _rpythonic_function_(		"gst_static_pad_template_get", ctypes.POINTER(_GstPadTemplate), [
	("pad_template",		ctypes.POINTER(_GstStaticPadTemplate)),] )

gst_static_pad_template_get_caps = _rpythonic_function_(		"gst_static_pad_template_get_caps", ctypes.POINTER(_GstCaps), [
	("templ",		ctypes.POINTER(_GstStaticPadTemplate)),] )

gst_pad_template_get_caps = _rpythonic_function_(		"gst_pad_template_get_caps", ctypes.POINTER(_GstCaps), [
	("templ",		ctypes.POINTER(_GstPadTemplate)),] )

gst_pad_template_pad_created = _rpythonic_function_(		"gst_pad_template_pad_created", ctypes.c_void_p, [
	("templ",		ctypes.POINTER(_GstPadTemplate)),
	("pad",		ctypes.POINTER(_GstPad)),] )

gst_pad_get_type = _rpythonic_function_(		"gst_pad_get_type", ctypes.c_ulong, [] )

gst_pad_new = _rpythonic_function_(		"gst_pad_new", ctypes.POINTER(_GstPad), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("direction",		ctypes.c_int),] )

gst_pad_new_from_template = _rpythonic_function_(		"gst_pad_new_from_template", ctypes.POINTER(_GstPad), [
	("templ",		ctypes.POINTER(_GstPadTemplate)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gst_pad_new_from_static_template = _rpythonic_function_(		"gst_pad_new_from_static_template", ctypes.POINTER(_GstPad), [
	("templ",		ctypes.POINTER(_GstStaticPadTemplate)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gst_pad_get_direction = _rpythonic_function_(		"gst_pad_get_direction", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),] )

gst_pad_set_active = _rpythonic_function_(		"gst_pad_set_active", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),
	("active",		ctypes.c_int),] )

gst_pad_is_active = _rpythonic_function_(		"gst_pad_is_active", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),] )

gst_pad_activate_pull = _rpythonic_function_(		"gst_pad_activate_pull", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),
	("active",		ctypes.c_int),] )

gst_pad_activate_push = _rpythonic_function_(		"gst_pad_activate_push", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),
	("active",		ctypes.c_int),] )

gst_pad_set_blocked = _rpythonic_function_(		"gst_pad_set_blocked", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),
	("blocked",		ctypes.c_int),] )

gst_pad_set_blocked_async = _rpythonic_function_(		"gst_pad_set_blocked_async", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),
	("blocked",		ctypes.c_int),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GstPad),ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_pad_set_blocked_async_full = _rpythonic_function_(		"gst_pad_set_blocked_async_full", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),
	("blocked",		ctypes.c_int),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GstPad),ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy_data",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

gst_pad_is_blocked = _rpythonic_function_(		"gst_pad_is_blocked", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),] )

gst_pad_is_blocking = _rpythonic_function_(		"gst_pad_is_blocking", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),] )

gst_pad_set_element_private = _rpythonic_function_(		"gst_pad_set_element_private", ctypes.c_void_p, [
	("pad",		ctypes.POINTER(_GstPad)),
	("priv",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_pad_get_element_private = _rpythonic_function_(		"gst_pad_get_element_private", ctypes.POINTER(ctypes.c_void_p), [
	("pad",		ctypes.POINTER(_GstPad)),] )

gst_pad_get_pad_template = _rpythonic_function_(		"gst_pad_get_pad_template", ctypes.POINTER(_GstPadTemplate), [
	("pad",		ctypes.POINTER(_GstPad)),] )

gst_pad_set_bufferalloc_function = _rpythonic_function_(		"gst_pad_set_bufferalloc_function", ctypes.c_void_p, [
	("pad",		ctypes.POINTER(_GstPad)),
	("bufalloc",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstPad),ctypes.c_ulong,ctypes.c_uint,ctypes.POINTER(_GstCaps),ctypes.POINTER(ctypes.POINTER(_GstBuffer)),)),] )

gst_pad_alloc_buffer = _rpythonic_function_(		"gst_pad_alloc_buffer", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),
	("offset",		ctypes.c_ulong),
	("size",		ctypes.c_int),
	("caps",		ctypes.POINTER(_GstCaps)),
	("buf",		ctypes.POINTER(ctypes.POINTER(_GstBuffer))),] )

gst_pad_alloc_buffer_and_set_caps = _rpythonic_function_(		"gst_pad_alloc_buffer_and_set_caps", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),
	("offset",		ctypes.c_ulong),
	("size",		ctypes.c_int),
	("caps",		ctypes.POINTER(_GstCaps)),
	("buf",		ctypes.POINTER(ctypes.POINTER(_GstBuffer))),] )

gst_pad_set_activate_function = _rpythonic_function_(		"gst_pad_set_activate_function", ctypes.c_void_p, [
	("pad",		ctypes.POINTER(_GstPad)),
	("activate",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstPad),)),] )

gst_pad_set_activatepull_function = _rpythonic_function_(		"gst_pad_set_activatepull_function", ctypes.c_void_p, [
	("pad",		ctypes.POINTER(_GstPad)),
	("activatepull",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstPad),ctypes.c_int,)),] )

gst_pad_set_activatepush_function = _rpythonic_function_(		"gst_pad_set_activatepush_function", ctypes.c_void_p, [
	("pad",		ctypes.POINTER(_GstPad)),
	("activatepush",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstPad),ctypes.c_int,)),] )

gst_pad_set_chain_function = _rpythonic_function_(		"gst_pad_set_chain_function", ctypes.c_void_p, [
	("pad",		ctypes.POINTER(_GstPad)),
	("chain",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstPad),ctypes.POINTER(_GstBuffer),)),] )

gst_pad_set_chain_list_function = _rpythonic_function_(		"gst_pad_set_chain_list_function", ctypes.c_void_p, [
	("pad",		ctypes.POINTER(_GstPad)),
	("chainlist",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstPad),ctypes.POINTER(_GstBufferList),)),] )

gst_pad_set_getrange_function = _rpythonic_function_(		"gst_pad_set_getrange_function", ctypes.c_void_p, [
	("pad",		ctypes.POINTER(_GstPad)),
	("get",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstPad),ctypes.c_ulong,ctypes.c_uint,ctypes.POINTER(ctypes.POINTER(_GstBuffer)),)),] )

gst_pad_set_checkgetrange_function = _rpythonic_function_(		"gst_pad_set_checkgetrange_function", ctypes.c_void_p, [
	("pad",		ctypes.POINTER(_GstPad)),
	("check",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstPad),)),] )

gst_pad_set_event_function = _rpythonic_function_(		"gst_pad_set_event_function", ctypes.c_void_p, [
	("pad",		ctypes.POINTER(_GstPad)),
	("event",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstPad),ctypes.POINTER(_GstEvent),)),] )

gst_pad_set_link_function = _rpythonic_function_(		"gst_pad_set_link_function", ctypes.c_void_p, [
	("pad",		ctypes.POINTER(_GstPad)),
	("link",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstPad),ctypes.POINTER(_GstPad),)),] )

gst_pad_set_unlink_function = _rpythonic_function_(		"gst_pad_set_unlink_function", ctypes.c_void_p, [
	("pad",		ctypes.POINTER(_GstPad)),
	("unlink",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GstPad),)),] )

gst_pad_can_link = _rpythonic_function_(		"gst_pad_can_link", ctypes.c_int, [
	("srcpad",		ctypes.POINTER(_GstPad)),
	("sinkpad",		ctypes.POINTER(_GstPad)),] )

gst_pad_link = _rpythonic_function_(		"gst_pad_link", ctypes.c_int, [
	("srcpad",		ctypes.POINTER(_GstPad)),
	("sinkpad",		ctypes.POINTER(_GstPad)),] )

gst_pad_link_full = _rpythonic_function_(		"gst_pad_link_full", ctypes.c_int, [
	("srcpad",		ctypes.POINTER(_GstPad)),
	("sinkpad",		ctypes.POINTER(_GstPad)),
	("flags",		ctypes.c_int),] )

gst_pad_unlink = _rpythonic_function_(		"gst_pad_unlink", ctypes.c_int, [
	("srcpad",		ctypes.POINTER(_GstPad)),
	("sinkpad",		ctypes.POINTER(_GstPad)),] )

gst_pad_is_linked = _rpythonic_function_(		"gst_pad_is_linked", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),] )

gst_pad_get_peer = _rpythonic_function_(		"gst_pad_get_peer", ctypes.POINTER(_GstPad), [
	("pad",		ctypes.POINTER(_GstPad)),] )

gst_pad_set_getcaps_function = _rpythonic_function_(		"gst_pad_set_getcaps_function", ctypes.c_void_p, [
	("pad",		ctypes.POINTER(_GstPad)),
	("getcaps",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_GstCaps), ctypes.POINTER(_GstPad),))),] )

gst_pad_set_acceptcaps_function = _rpythonic_function_(		"gst_pad_set_acceptcaps_function", ctypes.c_void_p, [
	("pad",		ctypes.POINTER(_GstPad)),
	("acceptcaps",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstPad),ctypes.POINTER(_GstCaps),)),] )

gst_pad_set_fixatecaps_function = _rpythonic_function_(		"gst_pad_set_fixatecaps_function", ctypes.c_void_p, [
	("pad",		ctypes.POINTER(_GstPad)),
	("fixatecaps",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GstPad),ctypes.POINTER(_GstCaps),)),] )

gst_pad_set_setcaps_function = _rpythonic_function_(		"gst_pad_set_setcaps_function", ctypes.c_void_p, [
	("pad",		ctypes.POINTER(_GstPad)),
	("setcaps",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstPad),ctypes.POINTER(_GstCaps),)),] )

gst_pad_get_pad_template_caps = _rpythonic_function_(		"gst_pad_get_pad_template_caps", ctypes.POINTER(_GstCaps), [
	("pad",		ctypes.POINTER(_GstPad)),] )

gst_pad_get_caps_reffed = _rpythonic_function_(		"gst_pad_get_caps_reffed", ctypes.POINTER(_GstCaps), [
	("pad",		ctypes.POINTER(_GstPad)),] )

gst_pad_get_caps = _rpythonic_function_(		"gst_pad_get_caps", ctypes.POINTER(_GstCaps), [
	("pad",		ctypes.POINTER(_GstPad)),] )

gst_pad_fixate_caps = _rpythonic_function_(		"gst_pad_fixate_caps", ctypes.c_void_p, [
	("pad",		ctypes.POINTER(_GstPad)),
	("caps",		ctypes.POINTER(_GstCaps)),] )

gst_pad_accept_caps = _rpythonic_function_(		"gst_pad_accept_caps", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),
	("caps",		ctypes.POINTER(_GstCaps)),] )

gst_pad_set_caps = _rpythonic_function_(		"gst_pad_set_caps", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),
	("caps",		ctypes.POINTER(_GstCaps)),] )

gst_pad_peer_get_caps_reffed = _rpythonic_function_(		"gst_pad_peer_get_caps_reffed", ctypes.POINTER(_GstCaps), [
	("pad",		ctypes.POINTER(_GstPad)),] )

gst_pad_peer_get_caps = _rpythonic_function_(		"gst_pad_peer_get_caps", ctypes.POINTER(_GstCaps), [
	("pad",		ctypes.POINTER(_GstPad)),] )

gst_pad_peer_accept_caps = _rpythonic_function_(		"gst_pad_peer_accept_caps", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),
	("caps",		ctypes.POINTER(_GstCaps)),] )

gst_pad_get_allowed_caps = _rpythonic_function_(		"gst_pad_get_allowed_caps", ctypes.POINTER(_GstCaps), [
	("pad",		ctypes.POINTER(_GstPad)),] )

gst_pad_get_negotiated_caps = _rpythonic_function_(		"gst_pad_get_negotiated_caps", ctypes.POINTER(_GstCaps), [
	("pad",		ctypes.POINTER(_GstPad)),] )

gst_pad_push = _rpythonic_function_(		"gst_pad_push", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),
	("buffer",		ctypes.POINTER(_GstBuffer)),] )

gst_pad_push_list = _rpythonic_function_(		"gst_pad_push_list", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),
	("C_list",		ctypes.POINTER(_GstBufferList)),] )

gst_pad_check_pull_range = _rpythonic_function_(		"gst_pad_check_pull_range", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),] )

gst_pad_pull_range = _rpythonic_function_(		"gst_pad_pull_range", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),
	("offset",		ctypes.c_ulong),
	("size",		ctypes.c_uint),
	("buffer",		ctypes.POINTER(ctypes.POINTER(_GstBuffer))),] )

gst_pad_push_event = _rpythonic_function_(		"gst_pad_push_event", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),
	("event",		ctypes.POINTER(_GstEvent)),] )

gst_pad_event_default = _rpythonic_function_(		"gst_pad_event_default", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),
	("event",		ctypes.POINTER(_GstEvent)),] )

gst_pad_chain = _rpythonic_function_(		"gst_pad_chain", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),
	("buffer",		ctypes.POINTER(_GstBuffer)),] )

gst_pad_chain_list = _rpythonic_function_(		"gst_pad_chain_list", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),
	("C_list",		ctypes.POINTER(_GstBufferList)),] )

gst_pad_get_range = _rpythonic_function_(		"gst_pad_get_range", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),
	("offset",		ctypes.c_ulong),
	("size",		ctypes.c_uint),
	("buffer",		ctypes.POINTER(ctypes.POINTER(_GstBuffer))),] )

gst_pad_send_event = _rpythonic_function_(		"gst_pad_send_event", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),
	("event",		ctypes.POINTER(_GstEvent)),] )

gst_pad_start_task = _rpythonic_function_(		"gst_pad_start_task", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_pad_pause_task = _rpythonic_function_(		"gst_pad_pause_task", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),] )

gst_pad_stop_task = _rpythonic_function_(		"gst_pad_stop_task", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),] )

gst_pad_set_internal_link_function = _rpythonic_function_(		"gst_pad_set_internal_link_function", ctypes.c_void_p, [
	("pad",		ctypes.POINTER(_GstPad)),
	("intlink",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_GList), ctypes.POINTER(_GstPad),))),] )

gst_pad_get_internal_links = _rpythonic_function_(		"gst_pad_get_internal_links", ctypes.POINTER(_GList), [
	("pad",		ctypes.POINTER(_GstPad)),] )

gst_pad_get_internal_links_default = _rpythonic_function_(		"gst_pad_get_internal_links_default", ctypes.POINTER(_GList), [
	("pad",		ctypes.POINTER(_GstPad)),] )

gst_pad_set_iterate_internal_links_function = _rpythonic_function_(		"gst_pad_set_iterate_internal_links_function", ctypes.c_void_p, [
	("pad",		ctypes.POINTER(_GstPad)),
	("iterintlink",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_GstIterator), ctypes.POINTER(_GstPad),))),] )

gst_pad_iterate_internal_links = _rpythonic_function_(		"gst_pad_iterate_internal_links", ctypes.POINTER(_GstIterator), [
	("pad",		ctypes.POINTER(_GstPad)),] )

gst_pad_iterate_internal_links_default = _rpythonic_function_(		"gst_pad_iterate_internal_links_default", ctypes.POINTER(_GstIterator), [
	("pad",		ctypes.POINTER(_GstPad)),] )

gst_pad_set_query_type_function = _rpythonic_function_(		"gst_pad_set_query_type_function", ctypes.c_void_p, [
	("pad",		ctypes.POINTER(_GstPad)),
	("type_func",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_int), ctypes.POINTER(_GstPad),))),] )

gst_pad_get_query_types = _rpythonic_function_(		"gst_pad_get_query_types", ctypes.POINTER(ctypes.c_int), [
	("pad",		ctypes.POINTER(_GstPad)),] )

gst_pad_get_query_types_default = _rpythonic_function_(		"gst_pad_get_query_types_default", ctypes.POINTER(ctypes.c_int), [
	("pad",		ctypes.POINTER(_GstPad)),] )

gst_pad_query = _rpythonic_function_(		"gst_pad_query", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),
	("query",		ctypes.POINTER(_GstQuery)),] )

gst_pad_peer_query = _rpythonic_function_(		"gst_pad_peer_query", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),
	("query",		ctypes.POINTER(_GstQuery)),] )

gst_pad_set_query_function = _rpythonic_function_(		"gst_pad_set_query_function", ctypes.c_void_p, [
	("pad",		ctypes.POINTER(_GstPad)),
	("query",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstPad),ctypes.POINTER(_GstQuery),)),] )

gst_pad_query_default = _rpythonic_function_(		"gst_pad_query_default", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),
	("query",		ctypes.POINTER(_GstQuery)),] )

gst_pad_dispatcher = _rpythonic_function_(		"gst_pad_dispatcher", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),
	("dispatch",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstPad),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_pad_load_and_link = _rpythonic_function_(		"gst_pad_load_and_link", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_xmlNode)),
	("parent",		ctypes.POINTER(_GstObject)),] )

gst_message_get_type = _rpythonic_function_(		"gst_message_get_type", ctypes.c_ulong, [] )

gst_message_type_get_name = _rpythonic_function_(		"gst_message_type_get_name", ctypes.POINTER(ctypes.c_char), [
	("C_type",		ctypes.c_int),] )

gst_message_type_to_quark = _rpythonic_function_(		"gst_message_type_to_quark", ctypes.c_uint, [
	("C_type",		ctypes.c_int),] )

gst_message_get_seqnum = _rpythonic_function_(		"gst_message_get_seqnum", ctypes.c_uint, [
	("message",		ctypes.POINTER(_GstMessage)),] )

gst_message_set_seqnum = _rpythonic_function_(		"gst_message_set_seqnum", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GstMessage)),
	("seqnum",		ctypes.c_uint),] )

gst_message_new_eos = _rpythonic_function_(		"gst_message_new_eos", ctypes.POINTER(_GstMessage), [
	("src",		ctypes.POINTER(_GstObject)),] )

gst_message_new_error = _rpythonic_function_(		"gst_message_new_error", ctypes.POINTER(_GstMessage), [
	("src",		ctypes.POINTER(_GstObject)),
	("error",		ctypes.POINTER(_GError)),
	("debug",		ctypes.POINTER(ctypes.c_char)),] )

gst_message_parse_error = _rpythonic_function_(		"gst_message_parse_error", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GstMessage)),
	("gerror",		ctypes.POINTER(ctypes.POINTER(_GError))),
	("debug",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

gst_message_new_warning = _rpythonic_function_(		"gst_message_new_warning", ctypes.POINTER(_GstMessage), [
	("src",		ctypes.POINTER(_GstObject)),
	("error",		ctypes.POINTER(_GError)),
	("debug",		ctypes.POINTER(ctypes.c_char)),] )

gst_message_parse_warning = _rpythonic_function_(		"gst_message_parse_warning", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GstMessage)),
	("gerror",		ctypes.POINTER(ctypes.POINTER(_GError))),
	("debug",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

gst_message_new_info = _rpythonic_function_(		"gst_message_new_info", ctypes.POINTER(_GstMessage), [
	("src",		ctypes.POINTER(_GstObject)),
	("error",		ctypes.POINTER(_GError)),
	("debug",		ctypes.POINTER(ctypes.c_char)),] )

gst_message_parse_info = _rpythonic_function_(		"gst_message_parse_info", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GstMessage)),
	("gerror",		ctypes.POINTER(ctypes.POINTER(_GError))),
	("debug",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

gst_message_new_tag = _rpythonic_function_(		"gst_message_new_tag", ctypes.POINTER(_GstMessage), [
	("src",		ctypes.POINTER(_GstObject)),
	("tag_list",		ctypes.POINTER(_GstStructure)),] )

gst_message_new_tag_full = _rpythonic_function_(		"gst_message_new_tag_full", ctypes.POINTER(_GstMessage), [
	("src",		ctypes.POINTER(_GstObject)),
	("pad",		ctypes.POINTER(_GstPad)),
	("tag_list",		ctypes.POINTER(_GstStructure)),] )

gst_message_parse_tag = _rpythonic_function_(		"gst_message_parse_tag", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GstMessage)),
	("tag_list",		ctypes.POINTER(ctypes.POINTER(_GstStructure))),] )

gst_message_parse_tag_full = _rpythonic_function_(		"gst_message_parse_tag_full", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GstMessage)),
	("pad",		ctypes.POINTER(ctypes.POINTER(_GstPad))),
	("tag_list",		ctypes.POINTER(ctypes.POINTER(_GstStructure))),] )

gst_message_new_buffering = _rpythonic_function_(		"gst_message_new_buffering", ctypes.POINTER(_GstMessage), [
	("src",		ctypes.POINTER(_GstObject)),
	("percent",		ctypes.c_int),] )

gst_message_parse_buffering = _rpythonic_function_(		"gst_message_parse_buffering", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GstMessage)),
	("percent",		ctypes.POINTER(ctypes.c_int)),] )

gst_message_set_buffering_stats = _rpythonic_function_(		"gst_message_set_buffering_stats", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GstMessage)),
	("mode",		ctypes.c_int),
	("avg_in",		ctypes.c_int),
	("avg_out",		ctypes.c_int),
	("buffering_left",		ctypes.c_long),] )

gst_message_parse_buffering_stats = _rpythonic_function_(		"gst_message_parse_buffering_stats", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GstMessage)),
	("mode",		ctypes.POINTER(ctypes.c_int)),
	("avg_in",		ctypes.POINTER(ctypes.c_int)),
	("avg_out",		ctypes.POINTER(ctypes.c_int)),
	("buffering_left",		ctypes.POINTER(ctypes.c_long)),] )

gst_message_new_state_changed = _rpythonic_function_(		"gst_message_new_state_changed", ctypes.POINTER(_GstMessage), [
	("src",		ctypes.POINTER(_GstObject)),
	("oldstate",		ctypes.c_int),
	("newstate",		ctypes.c_int),
	("pending",		ctypes.c_int),] )

gst_message_parse_state_changed = _rpythonic_function_(		"gst_message_parse_state_changed", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GstMessage)),
	("oldstate",		ctypes.POINTER(ctypes.c_int)),
	("newstate",		ctypes.POINTER(ctypes.c_int)),
	("pending",		ctypes.POINTER(ctypes.c_int)),] )

gst_message_new_state_dirty = _rpythonic_function_(		"gst_message_new_state_dirty", ctypes.POINTER(_GstMessage), [
	("src",		ctypes.POINTER(_GstObject)),] )

gst_message_new_step_done = _rpythonic_function_(		"gst_message_new_step_done", ctypes.POINTER(_GstMessage), [
	("src",		ctypes.POINTER(_GstObject)),
	("format",		ctypes.c_int),
	("amount",		ctypes.c_ulong),
	("rate",		ctypes.c_double),
	("flush",		ctypes.c_int),
	("intermediate",		ctypes.c_int),
	("duration",		ctypes.c_ulong),
	("eos",		ctypes.c_int),] )

gst_message_parse_step_done = _rpythonic_function_(		"gst_message_parse_step_done", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GstMessage)),
	("format",		ctypes.POINTER(ctypes.c_int)),
	("amount",		ctypes.POINTER(ctypes.c_ulong)),
	("rate",		ctypes.POINTER(ctypes.c_double)),
	("flush",		ctypes.POINTER(ctypes.c_int)),
	("intermediate",		ctypes.POINTER(ctypes.c_int)),
	("duration",		ctypes.POINTER(ctypes.c_ulong)),
	("eos",		ctypes.POINTER(ctypes.c_int)),] )

gst_message_new_clock_provide = _rpythonic_function_(		"gst_message_new_clock_provide", ctypes.POINTER(_GstMessage), [
	("src",		ctypes.POINTER(_GstObject)),
	("clock",		ctypes.POINTER(_GstClock)),
	("ready",		ctypes.c_int),] )

gst_message_parse_clock_provide = _rpythonic_function_(		"gst_message_parse_clock_provide", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GstMessage)),
	("clock",		ctypes.POINTER(ctypes.POINTER(_GstClock))),
	("ready",		ctypes.POINTER(ctypes.c_int)),] )

gst_message_new_clock_lost = _rpythonic_function_(		"gst_message_new_clock_lost", ctypes.POINTER(_GstMessage), [
	("src",		ctypes.POINTER(_GstObject)),
	("clock",		ctypes.POINTER(_GstClock)),] )

gst_message_parse_clock_lost = _rpythonic_function_(		"gst_message_parse_clock_lost", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GstMessage)),
	("clock",		ctypes.POINTER(ctypes.POINTER(_GstClock))),] )

gst_message_new_new_clock = _rpythonic_function_(		"gst_message_new_new_clock", ctypes.POINTER(_GstMessage), [
	("src",		ctypes.POINTER(_GstObject)),
	("clock",		ctypes.POINTER(_GstClock)),] )

gst_message_parse_new_clock = _rpythonic_function_(		"gst_message_parse_new_clock", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GstMessage)),
	("clock",		ctypes.POINTER(ctypes.POINTER(_GstClock))),] )

gst_message_new_application = _rpythonic_function_(		"gst_message_new_application", ctypes.POINTER(_GstMessage), [
	("src",		ctypes.POINTER(_GstObject)),
	("structure",		ctypes.POINTER(_GstStructure)),] )

gst_message_new_element = _rpythonic_function_(		"gst_message_new_element", ctypes.POINTER(_GstMessage), [
	("src",		ctypes.POINTER(_GstObject)),
	("structure",		ctypes.POINTER(_GstStructure)),] )

gst_message_new_segment_start = _rpythonic_function_(		"gst_message_new_segment_start", ctypes.POINTER(_GstMessage), [
	("src",		ctypes.POINTER(_GstObject)),
	("format",		ctypes.c_int),
	("position",		ctypes.c_long),] )

gst_message_parse_segment_start = _rpythonic_function_(		"gst_message_parse_segment_start", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GstMessage)),
	("format",		ctypes.POINTER(ctypes.c_int)),
	("position",		ctypes.POINTER(ctypes.c_long)),] )

gst_message_new_segment_done = _rpythonic_function_(		"gst_message_new_segment_done", ctypes.POINTER(_GstMessage), [
	("src",		ctypes.POINTER(_GstObject)),
	("format",		ctypes.c_int),
	("position",		ctypes.c_long),] )

gst_message_parse_segment_done = _rpythonic_function_(		"gst_message_parse_segment_done", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GstMessage)),
	("format",		ctypes.POINTER(ctypes.c_int)),
	("position",		ctypes.POINTER(ctypes.c_long)),] )

gst_message_new_duration = _rpythonic_function_(		"gst_message_new_duration", ctypes.POINTER(_GstMessage), [
	("src",		ctypes.POINTER(_GstObject)),
	("format",		ctypes.c_int),
	("duration",		ctypes.c_long),] )

gst_message_parse_duration = _rpythonic_function_(		"gst_message_parse_duration", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GstMessage)),
	("format",		ctypes.POINTER(ctypes.c_int)),
	("duration",		ctypes.POINTER(ctypes.c_long)),] )

gst_message_new_latency = _rpythonic_function_(		"gst_message_new_latency", ctypes.POINTER(_GstMessage), [
	("src",		ctypes.POINTER(_GstObject)),] )

gst_message_new_async_start = _rpythonic_function_(		"gst_message_new_async_start", ctypes.POINTER(_GstMessage), [
	("src",		ctypes.POINTER(_GstObject)),
	("new_base_time",		ctypes.c_int),] )

gst_message_parse_async_start = _rpythonic_function_(		"gst_message_parse_async_start", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GstMessage)),
	("new_base_time",		ctypes.POINTER(ctypes.c_int)),] )

gst_message_new_async_done = _rpythonic_function_(		"gst_message_new_async_done", ctypes.POINTER(_GstMessage), [
	("src",		ctypes.POINTER(_GstObject)),] )

gst_message_new_structure_change = _rpythonic_function_(		"gst_message_new_structure_change", ctypes.POINTER(_GstMessage), [
	("src",		ctypes.POINTER(_GstObject)),
	("C_type",		ctypes.c_int),
	("owner",		ctypes.POINTER(_GstElement)),
	("busy",		ctypes.c_int),] )

gst_message_parse_structure_change = _rpythonic_function_(		"gst_message_parse_structure_change", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GstMessage)),
	("C_type",		ctypes.POINTER(ctypes.c_int)),
	("owner",		ctypes.POINTER(ctypes.POINTER(_GstElement))),
	("busy",		ctypes.POINTER(ctypes.c_int)),] )

gst_message_new_stream_status = _rpythonic_function_(		"gst_message_new_stream_status", ctypes.POINTER(_GstMessage), [
	("src",		ctypes.POINTER(_GstObject)),
	("C_type",		ctypes.c_int),
	("owner",		ctypes.POINTER(_GstElement)),] )

gst_message_parse_stream_status = _rpythonic_function_(		"gst_message_parse_stream_status", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GstMessage)),
	("C_type",		ctypes.POINTER(ctypes.c_int)),
	("owner",		ctypes.POINTER(ctypes.POINTER(_GstElement))),] )

gst_message_set_stream_status_object = _rpythonic_function_(		"gst_message_set_stream_status_object", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GstMessage)),
	("C_object",		ctypes.POINTER(_GValue)),] )

gst_message_get_stream_status_object = _rpythonic_function_(		"gst_message_get_stream_status_object", ctypes.POINTER(_GValue), [
	("message",		ctypes.POINTER(_GstMessage)),] )

gst_message_new_request_state = _rpythonic_function_(		"gst_message_new_request_state", ctypes.POINTER(_GstMessage), [
	("src",		ctypes.POINTER(_GstObject)),
	("state",		ctypes.c_int),] )

gst_message_parse_request_state = _rpythonic_function_(		"gst_message_parse_request_state", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GstMessage)),
	("state",		ctypes.POINTER(ctypes.c_int)),] )

gst_message_new_step_start = _rpythonic_function_(		"gst_message_new_step_start", ctypes.POINTER(_GstMessage), [
	("src",		ctypes.POINTER(_GstObject)),
	("active",		ctypes.c_int),
	("format",		ctypes.c_int),
	("amount",		ctypes.c_ulong),
	("rate",		ctypes.c_double),
	("flush",		ctypes.c_int),
	("intermediate",		ctypes.c_int),] )

gst_message_parse_step_start = _rpythonic_function_(		"gst_message_parse_step_start", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GstMessage)),
	("active",		ctypes.POINTER(ctypes.c_int)),
	("format",		ctypes.POINTER(ctypes.c_int)),
	("amount",		ctypes.POINTER(ctypes.c_ulong)),
	("rate",		ctypes.POINTER(ctypes.c_double)),
	("flush",		ctypes.POINTER(ctypes.c_int)),
	("intermediate",		ctypes.POINTER(ctypes.c_int)),] )

gst_message_new_qos = _rpythonic_function_(		"gst_message_new_qos", ctypes.POINTER(_GstMessage), [
	("src",		ctypes.POINTER(_GstObject)),
	("live",		ctypes.c_int),
	("running_time",		ctypes.c_ulong),
	("stream_time",		ctypes.c_ulong),
	("timestamp",		ctypes.c_ulong),
	("duration",		ctypes.c_ulong),] )

gst_message_set_qos_values = _rpythonic_function_(		"gst_message_set_qos_values", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GstMessage)),
	("jitter",		ctypes.c_long),
	("proportion",		ctypes.c_double),
	("quality",		ctypes.c_int),] )

gst_message_set_qos_stats = _rpythonic_function_(		"gst_message_set_qos_stats", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GstMessage)),
	("format",		ctypes.c_int),
	("processed",		ctypes.c_ulong),
	("dropped",		ctypes.c_ulong),] )

gst_message_parse_qos = _rpythonic_function_(		"gst_message_parse_qos", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GstMessage)),
	("live",		ctypes.POINTER(ctypes.c_int)),
	("running_time",		ctypes.POINTER(ctypes.c_ulong)),
	("stream_time",		ctypes.POINTER(ctypes.c_ulong)),
	("timestamp",		ctypes.POINTER(ctypes.c_ulong)),
	("duration",		ctypes.POINTER(ctypes.c_ulong)),] )

gst_message_parse_qos_values = _rpythonic_function_(		"gst_message_parse_qos_values", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GstMessage)),
	("jitter",		ctypes.POINTER(ctypes.c_long)),
	("proportion",		ctypes.POINTER(ctypes.c_double)),
	("quality",		ctypes.POINTER(ctypes.c_int)),] )

gst_message_parse_qos_stats = _rpythonic_function_(		"gst_message_parse_qos_stats", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GstMessage)),
	("format",		ctypes.POINTER(ctypes.c_int)),
	("processed",		ctypes.POINTER(ctypes.c_ulong)),
	("dropped",		ctypes.POINTER(ctypes.c_ulong)),] )

gst_message_new_progress = _rpythonic_function_(		"gst_message_new_progress", ctypes.POINTER(_GstMessage), [
	("src",		ctypes.POINTER(_GstObject)),
	("C_type",		ctypes.c_int),
	("code",		ctypes.POINTER(ctypes.c_char)),
	("text",		ctypes.POINTER(ctypes.c_char)),] )

gst_message_parse_progress = _rpythonic_function_(		"gst_message_parse_progress", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GstMessage)),
	("C_type",		ctypes.POINTER(ctypes.c_int)),
	("code",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("text",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

gst_message_new_custom = _rpythonic_function_(		"gst_message_new_custom", ctypes.POINTER(_GstMessage), [
	("C_type",		ctypes.c_int),
	("src",		ctypes.POINTER(_GstObject)),
	("structure",		ctypes.POINTER(_GstStructure)),] )

gst_message_get_structure = _rpythonic_function_(		"gst_message_get_structure", ctypes.POINTER(_GstStructure), [
	("message",		ctypes.POINTER(_GstMessage)),] )

GstBusSyncHandler = _rpythonic_function_(		"GstBusSyncHandler", ctypes.c_int, [
	("bus",		ctypes.POINTER(_GstBus)),
	("message",		ctypes.POINTER(_GstMessage)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

GstBusFunc = _rpythonic_function_(		"GstBusFunc", ctypes.c_int, [
	("bus",		ctypes.POINTER(_GstBus)),
	("message",		ctypes.POINTER(_GstMessage)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

message = _rpythonic_function_(		"message", ctypes.c_void_p, [
	("bus",		ctypes.POINTER(_GstBus)),
	("message",		ctypes.POINTER(_GstMessage)),] )

sync_message = _rpythonic_function_(		"sync_message", ctypes.c_void_p, [
	("bus",		ctypes.POINTER(_GstBus)),
	("message",		ctypes.POINTER(_GstMessage)),] )

gst_bus_get_type = _rpythonic_function_(		"gst_bus_get_type", ctypes.c_ulong, [] )

gst_bus_new = _rpythonic_function_(		"gst_bus_new", ctypes.POINTER(_GstBus), [] )

gst_bus_post = _rpythonic_function_(		"gst_bus_post", ctypes.c_int, [
	("bus",		ctypes.POINTER(_GstBus)),
	("message",		ctypes.POINTER(_GstMessage)),] )

gst_bus_have_pending = _rpythonic_function_(		"gst_bus_have_pending", ctypes.c_int, [
	("bus",		ctypes.POINTER(_GstBus)),] )

gst_bus_peek = _rpythonic_function_(		"gst_bus_peek", ctypes.POINTER(_GstMessage), [
	("bus",		ctypes.POINTER(_GstBus)),] )

gst_bus_pop = _rpythonic_function_(		"gst_bus_pop", ctypes.POINTER(_GstMessage), [
	("bus",		ctypes.POINTER(_GstBus)),] )

gst_bus_pop_filtered = _rpythonic_function_(		"gst_bus_pop_filtered", ctypes.POINTER(_GstMessage), [
	("bus",		ctypes.POINTER(_GstBus)),
	("types",		ctypes.c_int),] )

gst_bus_timed_pop = _rpythonic_function_(		"gst_bus_timed_pop", ctypes.POINTER(_GstMessage), [
	("bus",		ctypes.POINTER(_GstBus)),
	("timeout",		ctypes.c_ulong),] )

gst_bus_timed_pop_filtered = _rpythonic_function_(		"gst_bus_timed_pop_filtered", ctypes.POINTER(_GstMessage), [
	("bus",		ctypes.POINTER(_GstBus)),
	("timeout",		ctypes.c_ulong),
	("types",		ctypes.c_int),] )

gst_bus_set_flushing = _rpythonic_function_(		"gst_bus_set_flushing", ctypes.c_void_p, [
	("bus",		ctypes.POINTER(_GstBus)),
	("flushing",		ctypes.c_int),] )

gst_bus_set_sync_handler = _rpythonic_function_(		"gst_bus_set_sync_handler", ctypes.c_void_p, [
	("bus",		ctypes.POINTER(_GstBus)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstBus),ctypes.POINTER(_GstMessage),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_bus_create_watch = _rpythonic_function_(		"gst_bus_create_watch", ctypes.POINTER(_GSource), [
	("bus",		ctypes.POINTER(_GstBus)),] )

gst_bus_add_watch_full = _rpythonic_function_(		"gst_bus_add_watch_full", ctypes.c_uint, [
	("bus",		ctypes.POINTER(_GstBus)),
	("priority",		ctypes.c_int),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstBus),ctypes.POINTER(_GstMessage),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

gst_bus_add_watch = _rpythonic_function_(		"gst_bus_add_watch", ctypes.c_uint, [
	("bus",		ctypes.POINTER(_GstBus)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstBus),ctypes.POINTER(_GstMessage),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_bus_poll = _rpythonic_function_(		"gst_bus_poll", ctypes.POINTER(_GstMessage), [
	("bus",		ctypes.POINTER(_GstBus)),
	("events",		ctypes.c_int),
	("timeout",		ctypes.c_long),] )

gst_bus_async_signal_func = _rpythonic_function_(		"gst_bus_async_signal_func", ctypes.c_int, [
	("bus",		ctypes.POINTER(_GstBus)),
	("message",		ctypes.POINTER(_GstMessage)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_bus_sync_signal_handler = _rpythonic_function_(		"gst_bus_sync_signal_handler", ctypes.c_int, [
	("bus",		ctypes.POINTER(_GstBus)),
	("message",		ctypes.POINTER(_GstMessage)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_bus_add_signal_watch = _rpythonic_function_(		"gst_bus_add_signal_watch", ctypes.c_void_p, [
	("bus",		ctypes.POINTER(_GstBus)),] )

gst_bus_add_signal_watch_full = _rpythonic_function_(		"gst_bus_add_signal_watch_full", ctypes.c_void_p, [
	("bus",		ctypes.POINTER(_GstBus)),
	("priority",		ctypes.c_int),] )

gst_bus_remove_signal_watch = _rpythonic_function_(		"gst_bus_remove_signal_watch", ctypes.c_void_p, [
	("bus",		ctypes.POINTER(_GstBus)),] )

gst_bus_enable_sync_message_emission = _rpythonic_function_(		"gst_bus_enable_sync_message_emission", ctypes.c_void_p, [
	("bus",		ctypes.POINTER(_GstBus)),] )

gst_bus_disable_sync_message_emission = _rpythonic_function_(		"gst_bus_disable_sync_message_emission", ctypes.c_void_p, [
	("bus",		ctypes.POINTER(_GstBus)),] )

fstat = _rpythonic_function_(		"fstat", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__buf",		ctypes.POINTER(stat)),] )

fstatat = _rpythonic_function_(		"fstatat", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__buf",		ctypes.POINTER(stat)),
	("__flag",		ctypes.c_int),] )

lstat = _rpythonic_function_(		"lstat", ctypes.c_int, [
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__buf",		ctypes.POINTER(stat)),] )

chmod = _rpythonic_function_(		"chmod", ctypes.c_int, [
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__mode",		ctypes.c_uint),] )

lchmod = _rpythonic_function_(		"lchmod", ctypes.c_int, [
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__mode",		ctypes.c_uint),] )

fchmod = _rpythonic_function_(		"fchmod", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__mode",		ctypes.c_uint),] )

fchmodat = _rpythonic_function_(		"fchmodat", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__mode",		ctypes.c_uint),
	("__flag",		ctypes.c_int),] )

umask = _rpythonic_function_(		"umask", ctypes.c_uint, [
	("__mask",		ctypes.c_uint),] )

mkdir = _rpythonic_function_(		"mkdir", ctypes.c_int, [
	("__path",		ctypes.POINTER(ctypes.c_char)),
	("__mode",		ctypes.c_uint),] )

mkdirat = _rpythonic_function_(		"mkdirat", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__path",		ctypes.POINTER(ctypes.c_char)),
	("__mode",		ctypes.c_uint),] )

mknod = _rpythonic_function_(		"mknod", ctypes.c_int, [
	("__path",		ctypes.POINTER(ctypes.c_char)),
	("__mode",		ctypes.c_uint),
	("__dev",		ctypes.c_uint64),] )

mknodat = _rpythonic_function_(		"mknodat", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__path",		ctypes.POINTER(ctypes.c_char)),
	("__mode",		ctypes.c_uint),
	("__dev",		ctypes.c_uint64),] )

mkfifo = _rpythonic_function_(		"mkfifo", ctypes.c_int, [
	("__path",		ctypes.POINTER(ctypes.c_char)),
	("__mode",		ctypes.c_uint),] )

mkfifoat = _rpythonic_function_(		"mkfifoat", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__path",		ctypes.POINTER(ctypes.c_char)),
	("__mode",		ctypes.c_uint),] )

utimensat = _rpythonic_function_(		"utimensat", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__path",		ctypes.POINTER(ctypes.c_char)),
	("__times",		( timespec * 2 )),
	("__flags",		ctypes.c_int),] )

futimens = _rpythonic_function_(		"futimens", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__times",		( timespec * 2 )),] )

GModuleCheckInit = _rpythonic_function_(		"GModuleCheckInit", ctypes.POINTER(ctypes.c_char), [
	("module",		ctypes.POINTER(_GModule)),] )

GModuleUnload = _rpythonic_function_(		"GModuleUnload", ctypes.c_void_p, [
	("module",		ctypes.POINTER(_GModule)),] )

g_module_supported = _rpythonic_function_(		"g_module_supported", ctypes.c_int, [] )

g_module_open = _rpythonic_function_(		"g_module_open", ctypes.POINTER(_GModule), [
	("file_name",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),] )

g_module_close = _rpythonic_function_(		"g_module_close", ctypes.c_int, [
	("module",		ctypes.POINTER(_GModule)),] )

g_module_make_resident = _rpythonic_function_(		"g_module_make_resident", ctypes.c_void_p, [
	("module",		ctypes.POINTER(_GModule)),] )

g_module_error = _rpythonic_function_(		"g_module_error", ctypes.POINTER(ctypes.c_char), [] )

g_module_symbol = _rpythonic_function_(		"g_module_symbol", ctypes.c_int, [
	("module",		ctypes.POINTER(_GModule)),
	("symbol_name",		ctypes.POINTER(ctypes.c_char)),
	("symbol",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

g_module_name = _rpythonic_function_(		"g_module_name", ctypes.POINTER(ctypes.c_char), [
	("module",		ctypes.POINTER(_GModule)),] )

g_module_build_path = _rpythonic_function_(		"g_module_build_path", ctypes.POINTER(ctypes.c_char), [
	("directory",		ctypes.POINTER(ctypes.c_char)),
	("module_name",		ctypes.POINTER(ctypes.c_char)),] )

gst_plugin_error_quark = _rpythonic_function_(		"gst_plugin_error_quark", ctypes.c_uint, [] )

GstPluginInitFunc = _rpythonic_function_(		"GstPluginInitFunc", ctypes.c_int, [
	("plugin",		ctypes.POINTER(_GstPlugin)),] )

GstPluginInitFullFunc = _rpythonic_function_(		"GstPluginInitFullFunc", ctypes.c_int, [
	("plugin",		ctypes.POINTER(_GstPlugin)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GstPluginFilter = _rpythonic_function_(		"GstPluginFilter", ctypes.c_int, [
	("plugin",		ctypes.POINTER(_GstPlugin)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_plugin_get_type = _rpythonic_function_(		"gst_plugin_get_type", ctypes.c_ulong, [] )

_gst_plugin_register_static = _rpythonic_function_(		"_gst_plugin_register_static", ctypes.c_void_p, [
	("desc",		ctypes.POINTER(_GstPluginDesc)),] )

gst_plugin_register_static = _rpythonic_function_(		"gst_plugin_register_static", ctypes.c_int, [
	("major_version",		ctypes.c_int),
	("minor_version",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("description",		ctypes.POINTER(ctypes.c_char)),
	("init_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstPlugin),)),
	("version",		ctypes.POINTER(ctypes.c_char)),
	("license",		ctypes.POINTER(ctypes.c_char)),
	("source",		ctypes.POINTER(ctypes.c_char)),
	("package",		ctypes.POINTER(ctypes.c_char)),
	("origin",		ctypes.POINTER(ctypes.c_char)),] )

gst_plugin_register_static_full = _rpythonic_function_(		"gst_plugin_register_static_full", ctypes.c_int, [
	("major_version",		ctypes.c_int),
	("minor_version",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("description",		ctypes.POINTER(ctypes.c_char)),
	("init_full_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstPlugin),ctypes.POINTER(ctypes.c_void_p),)),
	("version",		ctypes.POINTER(ctypes.c_char)),
	("license",		ctypes.POINTER(ctypes.c_char)),
	("source",		ctypes.POINTER(ctypes.c_char)),
	("package",		ctypes.POINTER(ctypes.c_char)),
	("origin",		ctypes.POINTER(ctypes.c_char)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_plugin_get_name = _rpythonic_function_(		"gst_plugin_get_name", ctypes.POINTER(ctypes.c_char), [
	("plugin",		ctypes.POINTER(_GstPlugin)),] )

gst_plugin_get_description = _rpythonic_function_(		"gst_plugin_get_description", ctypes.POINTER(ctypes.c_char), [
	("plugin",		ctypes.POINTER(_GstPlugin)),] )

gst_plugin_get_filename = _rpythonic_function_(		"gst_plugin_get_filename", ctypes.POINTER(ctypes.c_char), [
	("plugin",		ctypes.POINTER(_GstPlugin)),] )

gst_plugin_get_version = _rpythonic_function_(		"gst_plugin_get_version", ctypes.POINTER(ctypes.c_char), [
	("plugin",		ctypes.POINTER(_GstPlugin)),] )

gst_plugin_get_license = _rpythonic_function_(		"gst_plugin_get_license", ctypes.POINTER(ctypes.c_char), [
	("plugin",		ctypes.POINTER(_GstPlugin)),] )

gst_plugin_get_source = _rpythonic_function_(		"gst_plugin_get_source", ctypes.POINTER(ctypes.c_char), [
	("plugin",		ctypes.POINTER(_GstPlugin)),] )

gst_plugin_get_package = _rpythonic_function_(		"gst_plugin_get_package", ctypes.POINTER(ctypes.c_char), [
	("plugin",		ctypes.POINTER(_GstPlugin)),] )

gst_plugin_get_origin = _rpythonic_function_(		"gst_plugin_get_origin", ctypes.POINTER(ctypes.c_char), [
	("plugin",		ctypes.POINTER(_GstPlugin)),] )

gst_plugin_get_cache_data = _rpythonic_function_(		"gst_plugin_get_cache_data", ctypes.POINTER(_GstStructure), [
	("plugin",		ctypes.POINTER(_GstPlugin)),] )

gst_plugin_set_cache_data = _rpythonic_function_(		"gst_plugin_set_cache_data", ctypes.c_void_p, [
	("plugin",		ctypes.POINTER(_GstPlugin)),
	("cache_data",		ctypes.POINTER(_GstStructure)),] )

gst_plugin_get_module = _rpythonic_function_(		"gst_plugin_get_module", ctypes.POINTER(_GModule), [
	("plugin",		ctypes.POINTER(_GstPlugin)),] )

gst_plugin_is_loaded = _rpythonic_function_(		"gst_plugin_is_loaded", ctypes.c_int, [
	("plugin",		ctypes.POINTER(_GstPlugin)),] )

gst_plugin_name_filter = _rpythonic_function_(		"gst_plugin_name_filter", ctypes.c_int, [
	("plugin",		ctypes.POINTER(_GstPlugin)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gst_plugin_load_file = _rpythonic_function_(		"gst_plugin_load_file", ctypes.POINTER(_GstPlugin), [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gst_plugin_load = _rpythonic_function_(		"gst_plugin_load", ctypes.POINTER(_GstPlugin), [
	("plugin",		ctypes.POINTER(_GstPlugin)),] )

gst_plugin_load_by_name = _rpythonic_function_(		"gst_plugin_load_by_name", ctypes.POINTER(_GstPlugin), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gst_plugin_add_dependency = _rpythonic_function_(		"gst_plugin_add_dependency", ctypes.c_void_p, [
	("plugin",		ctypes.POINTER(_GstPlugin)),
	("env_vars",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("paths",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("names",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("flags",		ctypes.c_int),] )

gst_plugin_add_dependency_simple = _rpythonic_function_(		"gst_plugin_add_dependency_simple", ctypes.c_void_p, [
	("plugin",		ctypes.POINTER(_GstPlugin)),
	("env_vars",		ctypes.POINTER(ctypes.c_char)),
	("paths",		ctypes.POINTER(ctypes.c_char)),
	("names",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),] )

gst_plugin_list_free = _rpythonic_function_(		"gst_plugin_list_free", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GList)),] )

GstPluginFeatureFilter = _rpythonic_function_(		"GstPluginFeatureFilter", ctypes.c_int, [
	("feature",		ctypes.POINTER(_GstPluginFeature)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_plugin_feature_get_type = _rpythonic_function_(		"gst_plugin_feature_get_type", ctypes.c_ulong, [] )

gst_plugin_feature_load = _rpythonic_function_(		"gst_plugin_feature_load", ctypes.POINTER(_GstPluginFeature), [
	("feature",		ctypes.POINTER(_GstPluginFeature)),] )

gst_plugin_feature_type_name_filter = _rpythonic_function_(		"gst_plugin_feature_type_name_filter", ctypes.c_int, [
	("feature",		ctypes.POINTER(_GstPluginFeature)),
	("data",		ctypes.POINTER(GstTypeNameData)),] )

gst_plugin_feature_set_rank = _rpythonic_function_(		"gst_plugin_feature_set_rank", ctypes.c_void_p, [
	("feature",		ctypes.POINTER(_GstPluginFeature)),
	("rank",		ctypes.c_uint),] )

gst_plugin_feature_set_name = _rpythonic_function_(		"gst_plugin_feature_set_name", ctypes.c_void_p, [
	("feature",		ctypes.POINTER(_GstPluginFeature)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gst_plugin_feature_get_rank = _rpythonic_function_(		"gst_plugin_feature_get_rank", ctypes.c_uint, [
	("feature",		ctypes.POINTER(_GstPluginFeature)),] )

gst_plugin_feature_get_name = _rpythonic_function_(		"gst_plugin_feature_get_name", ctypes.POINTER(ctypes.c_char), [
	("feature",		ctypes.POINTER(_GstPluginFeature)),] )

gst_plugin_feature_list_free = _rpythonic_function_(		"gst_plugin_feature_list_free", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GList)),] )

gst_plugin_feature_list_copy = _rpythonic_function_(		"gst_plugin_feature_list_copy", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),] )

gst_plugin_feature_list_debug = _rpythonic_function_(		"gst_plugin_feature_list_debug", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GList)),] )

gst_plugin_feature_check_version = _rpythonic_function_(		"gst_plugin_feature_check_version", ctypes.c_int, [
	("feature",		ctypes.POINTER(_GstPluginFeature)),
	("min_major",		ctypes.c_uint),
	("min_minor",		ctypes.c_uint),
	("min_micro",		ctypes.c_uint),] )

gst_plugin_feature_rank_compare_func = _rpythonic_function_(		"gst_plugin_feature_rank_compare_func", ctypes.c_int, [
	("p1",		ctypes.POINTER(ctypes.c_void_p)),
	("p2",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_element_factory_get_type = _rpythonic_function_(		"gst_element_factory_get_type", ctypes.c_ulong, [] )

gst_element_factory_find = _rpythonic_function_(		"gst_element_factory_find", ctypes.POINTER(_GstElementFactory), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gst_element_factory_get_element_type = _rpythonic_function_(		"gst_element_factory_get_element_type", ctypes.c_ulong, [
	("factory",		ctypes.POINTER(_GstElementFactory)),] )

gst_element_factory_get_longname = _rpythonic_function_(		"gst_element_factory_get_longname", ctypes.POINTER(ctypes.c_char), [
	("factory",		ctypes.POINTER(_GstElementFactory)),] )

gst_element_factory_get_klass = _rpythonic_function_(		"gst_element_factory_get_klass", ctypes.POINTER(ctypes.c_char), [
	("factory",		ctypes.POINTER(_GstElementFactory)),] )

gst_element_factory_get_description = _rpythonic_function_(		"gst_element_factory_get_description", ctypes.POINTER(ctypes.c_char), [
	("factory",		ctypes.POINTER(_GstElementFactory)),] )

gst_element_factory_get_author = _rpythonic_function_(		"gst_element_factory_get_author", ctypes.POINTER(ctypes.c_char), [
	("factory",		ctypes.POINTER(_GstElementFactory)),] )

gst_element_factory_get_documentation_uri = _rpythonic_function_(		"gst_element_factory_get_documentation_uri", ctypes.POINTER(ctypes.c_char), [
	("factory",		ctypes.POINTER(_GstElementFactory)),] )

gst_element_factory_get_icon_name = _rpythonic_function_(		"gst_element_factory_get_icon_name", ctypes.POINTER(ctypes.c_char), [
	("factory",		ctypes.POINTER(_GstElementFactory)),] )

gst_element_factory_get_num_pad_templates = _rpythonic_function_(		"gst_element_factory_get_num_pad_templates", ctypes.c_uint, [
	("factory",		ctypes.POINTER(_GstElementFactory)),] )

gst_element_factory_get_static_pad_templates = _rpythonic_function_(		"gst_element_factory_get_static_pad_templates", ctypes.POINTER(_GList), [
	("factory",		ctypes.POINTER(_GstElementFactory)),] )

gst_element_factory_get_uri_type = _rpythonic_function_(		"gst_element_factory_get_uri_type", ctypes.c_int, [
	("factory",		ctypes.POINTER(_GstElementFactory)),] )

gst_element_factory_get_uri_protocols = _rpythonic_function_(		"gst_element_factory_get_uri_protocols", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("factory",		ctypes.POINTER(_GstElementFactory)),] )

gst_element_factory_has_interface = _rpythonic_function_(		"gst_element_factory_has_interface", ctypes.c_int, [
	("factory",		ctypes.POINTER(_GstElementFactory)),
	("interfacename",		ctypes.POINTER(ctypes.c_char)),] )

gst_element_factory_create = _rpythonic_function_(		"gst_element_factory_create", ctypes.POINTER(_GstElement), [
	("factory",		ctypes.POINTER(_GstElementFactory)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gst_element_factory_make = _rpythonic_function_(		"gst_element_factory_make", ctypes.POINTER(_GstElement), [
	("factoryname",		ctypes.POINTER(ctypes.c_char)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gst_element_register = _rpythonic_function_(		"gst_element_register", ctypes.c_int, [
	("plugin",		ctypes.POINTER(_GstPlugin)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("rank",		ctypes.c_uint),
	("C_type",		ctypes.c_ulong),] )

gst_element_factory_list_is_type = _rpythonic_function_(		"gst_element_factory_list_is_type", ctypes.c_int, [
	("factory",		ctypes.POINTER(_GstElementFactory)),
	("C_type",		ctypes.c_ulong),] )

gst_element_factory_list_get_elements = _rpythonic_function_(		"gst_element_factory_list_get_elements", ctypes.POINTER(_GList), [
	("C_type",		ctypes.c_ulong),
	("minrank",		ctypes.c_int),] )

gst_element_factory_list_filter = _rpythonic_function_(		"gst_element_factory_list_filter", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("caps",		ctypes.POINTER(_GstCaps)),
	("direction",		ctypes.c_int),
	("subsetonly",		ctypes.c_int),] )

GstIndexFilter = _rpythonic_function_(		"GstIndexFilter", ctypes.c_int, [
	("index",		ctypes.POINTER(_GstIndex)),
	("entry",		ctypes.POINTER(_GstIndexEntry)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GstIndexResolver = _rpythonic_function_(		"GstIndexResolver", ctypes.c_int, [
	("index",		ctypes.POINTER(_GstIndex)),
	("writer",		ctypes.POINTER(_GstObject)),
	("writer_string",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

get_writer_id = _rpythonic_function_(		"get_writer_id", ctypes.c_int, [
	("index",		ctypes.POINTER(_GstIndex)),
	("writer_id",		ctypes.POINTER(ctypes.c_int)),
	("writer_string",		ctypes.POINTER(ctypes.c_char)),] )

commit = _rpythonic_function_(		"commit", ctypes.c_void_p, [
	("index",		ctypes.POINTER(_GstIndex)),
	("C_id",		ctypes.c_int),] )

add_entry = _rpythonic_function_(		"add_entry", ctypes.c_void_p, [
	("index",		ctypes.POINTER(_GstIndex)),
	("entry",		ctypes.POINTER(_GstIndexEntry)),] )

get_assoc_entry = _rpythonic_function_(		"get_assoc_entry", ctypes.POINTER(_GstIndexEntry), [
	("index",		ctypes.POINTER(_GstIndex)),
	("C_id",		ctypes.c_int),
	("method",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("format",		ctypes.c_int),
	("value",		ctypes.c_long),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

entry_added = _rpythonic_function_(		"entry_added", ctypes.c_void_p, [
	("index",		ctypes.POINTER(_GstIndex)),
	("entry",		ctypes.POINTER(_GstIndexEntry)),] )

gst_index_get_type = _rpythonic_function_(		"gst_index_get_type", ctypes.c_ulong, [] )

gst_index_new = _rpythonic_function_(		"gst_index_new", ctypes.POINTER(_GstIndex), [] )

gst_index_commit = _rpythonic_function_(		"gst_index_commit", ctypes.c_void_p, [
	("index",		ctypes.POINTER(_GstIndex)),
	("C_id",		ctypes.c_int),] )

gst_index_get_group = _rpythonic_function_(		"gst_index_get_group", ctypes.c_int, [
	("index",		ctypes.POINTER(_GstIndex)),] )

gst_index_new_group = _rpythonic_function_(		"gst_index_new_group", ctypes.c_int, [
	("index",		ctypes.POINTER(_GstIndex)),] )

gst_index_set_group = _rpythonic_function_(		"gst_index_set_group", ctypes.c_int, [
	("index",		ctypes.POINTER(_GstIndex)),
	("groupnum",		ctypes.c_int),] )

gst_index_set_certainty = _rpythonic_function_(		"gst_index_set_certainty", ctypes.c_void_p, [
	("index",		ctypes.POINTER(_GstIndex)),
	("certainty",		ctypes.c_int),] )

gst_index_get_certainty = _rpythonic_function_(		"gst_index_get_certainty", ctypes.c_int, [
	("index",		ctypes.POINTER(_GstIndex)),] )

gst_index_set_filter = _rpythonic_function_(		"gst_index_set_filter", ctypes.c_void_p, [
	("index",		ctypes.POINTER(_GstIndex)),
	("filter",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstIndex),ctypes.POINTER(_GstIndexEntry),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_index_set_filter_full = _rpythonic_function_(		"gst_index_set_filter_full", ctypes.c_void_p, [
	("index",		ctypes.POINTER(_GstIndex)),
	("filter",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstIndex),ctypes.POINTER(_GstIndexEntry),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("user_data_destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

gst_index_set_resolver = _rpythonic_function_(		"gst_index_set_resolver", ctypes.c_void_p, [
	("index",		ctypes.POINTER(_GstIndex)),
	("resolver",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstIndex),ctypes.POINTER(_GstObject),ctypes.POINTER(ctypes.POINTER(ctypes.c_char)),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_index_set_resolver_full = _rpythonic_function_(		"gst_index_set_resolver_full", ctypes.c_void_p, [
	("index",		ctypes.POINTER(_GstIndex)),
	("resolver",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstIndex),ctypes.POINTER(_GstObject),ctypes.POINTER(ctypes.POINTER(ctypes.c_char)),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("user_data_destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

gst_index_get_writer_id = _rpythonic_function_(		"gst_index_get_writer_id", ctypes.c_int, [
	("index",		ctypes.POINTER(_GstIndex)),
	("writer",		ctypes.POINTER(_GstObject)),
	("C_id",		ctypes.POINTER(ctypes.c_int)),] )

gst_index_add_format = _rpythonic_function_(		"gst_index_add_format", ctypes.POINTER(_GstIndexEntry), [
	("index",		ctypes.POINTER(_GstIndex)),
	("C_id",		ctypes.c_int),
	("format",		ctypes.c_int),] )

gst_index_add_associationv = _rpythonic_function_(		"gst_index_add_associationv", ctypes.POINTER(_GstIndexEntry), [
	("index",		ctypes.POINTER(_GstIndex)),
	("C_id",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("n",		ctypes.c_int),
	("C_list",		ctypes.POINTER(_GstIndexAssociation)),] )

gst_index_add_association = _rpythonic_function_(		"gst_index_add_association", ctypes.POINTER(_GstIndexEntry), [
	("index",		ctypes.POINTER(_GstIndex)),
	("C_id",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("format",		ctypes.c_int),
	("value",		ctypes.c_long),] )

gst_index_add_object = _rpythonic_function_(		"gst_index_add_object", ctypes.POINTER(_GstIndexEntry), [
	("index",		ctypes.POINTER(_GstIndex)),
	("C_id",		ctypes.c_int),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("C_type",		ctypes.c_ulong),
	("C_object",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_index_add_id = _rpythonic_function_(		"gst_index_add_id", ctypes.POINTER(_GstIndexEntry), [
	("index",		ctypes.POINTER(_GstIndex)),
	("C_id",		ctypes.c_int),
	("description",		ctypes.POINTER(ctypes.c_char)),] )

gst_index_get_assoc_entry = _rpythonic_function_(		"gst_index_get_assoc_entry", ctypes.POINTER(_GstIndexEntry), [
	("index",		ctypes.POINTER(_GstIndex)),
	("C_id",		ctypes.c_int),
	("method",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("format",		ctypes.c_int),
	("value",		ctypes.c_long),] )

gst_index_get_assoc_entry_full = _rpythonic_function_(		"gst_index_get_assoc_entry_full", ctypes.POINTER(_GstIndexEntry), [
	("index",		ctypes.POINTER(_GstIndex)),
	("C_id",		ctypes.c_int),
	("method",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("format",		ctypes.c_int),
	("value",		ctypes.c_long),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_index_entry_get_type = _rpythonic_function_(		"gst_index_entry_get_type", ctypes.c_ulong, [] )

gst_index_entry_copy = _rpythonic_function_(		"gst_index_entry_copy", ctypes.POINTER(_GstIndexEntry), [
	("entry",		ctypes.POINTER(_GstIndexEntry)),] )

gst_index_entry_free = _rpythonic_function_(		"gst_index_entry_free", ctypes.c_void_p, [
	("entry",		ctypes.POINTER(_GstIndexEntry)),] )

gst_index_entry_assoc_map = _rpythonic_function_(		"gst_index_entry_assoc_map", ctypes.c_int, [
	("entry",		ctypes.POINTER(_GstIndexEntry)),
	("format",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_long)),] )

gst_index_factory_get_type = _rpythonic_function_(		"gst_index_factory_get_type", ctypes.c_ulong, [] )

gst_index_factory_new = _rpythonic_function_(		"gst_index_factory_new", ctypes.POINTER(_GstIndexFactory), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("longdesc",		ctypes.POINTER(ctypes.c_char)),
	("C_type",		ctypes.c_ulong),] )

gst_index_factory_destroy = _rpythonic_function_(		"gst_index_factory_destroy", ctypes.c_void_p, [
	("factory",		ctypes.POINTER(_GstIndexFactory)),] )

gst_index_factory_find = _rpythonic_function_(		"gst_index_factory_find", ctypes.POINTER(_GstIndexFactory), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gst_index_factory_create = _rpythonic_function_(		"gst_index_factory_create", ctypes.POINTER(_GstIndex), [
	("factory",		ctypes.POINTER(_GstIndexFactory)),] )

gst_index_factory_make = _rpythonic_function_(		"gst_index_factory_make", ctypes.POINTER(_GstIndex), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

pad_added = _rpythonic_function_(		"pad_added", ctypes.c_void_p, [
	("element",		ctypes.POINTER(_GstElement)),
	("pad",		ctypes.POINTER(_GstPad)),] )

pad_removed = _rpythonic_function_(		"pad_removed", ctypes.c_void_p, [
	("element",		ctypes.POINTER(_GstElement)),
	("pad",		ctypes.POINTER(_GstPad)),] )

no_more_pads = _rpythonic_function_(		"no_more_pads", ctypes.c_void_p, [
	("element",		ctypes.POINTER(_GstElement)),] )

request_new_pad = _rpythonic_function_(		"request_new_pad", ctypes.POINTER(_GstPad), [
	("element",		ctypes.POINTER(_GstElement)),
	("templ",		ctypes.POINTER(_GstPadTemplate)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

release_pad = _rpythonic_function_(		"release_pad", ctypes.c_void_p, [
	("element",		ctypes.POINTER(_GstElement)),
	("pad",		ctypes.POINTER(_GstPad)),] )

get_state = _rpythonic_function_(		"get_state", ctypes.c_int, [
	("element",		ctypes.POINTER(_GstElement)),
	("state",		ctypes.POINTER(ctypes.c_int)),
	("pending",		ctypes.POINTER(ctypes.c_int)),
	("timeout",		ctypes.c_ulong),] )

set_state = _rpythonic_function_(		"set_state", ctypes.c_int, [
	("element",		ctypes.POINTER(_GstElement)),
	("state",		ctypes.c_int),] )

change_state = _rpythonic_function_(		"change_state", ctypes.c_int, [
	("element",		ctypes.POINTER(_GstElement)),
	("transition",		ctypes.c_int),] )

set_bus = _rpythonic_function_(		"set_bus", ctypes.c_void_p, [
	("element",		ctypes.POINTER(_GstElement)),
	("bus",		ctypes.POINTER(_GstBus)),] )

provide_clock = _rpythonic_function_(		"provide_clock", ctypes.POINTER(_GstClock), [
	("element",		ctypes.POINTER(_GstElement)),] )

set_clock = _rpythonic_function_(		"set_clock", ctypes.c_int, [
	("element",		ctypes.POINTER(_GstElement)),
	("clock",		ctypes.POINTER(_GstClock)),] )

get_index = _rpythonic_function_(		"get_index", ctypes.POINTER(_GstIndex), [
	("element",		ctypes.POINTER(_GstElement)),] )

set_index = _rpythonic_function_(		"set_index", ctypes.c_void_p, [
	("element",		ctypes.POINTER(_GstElement)),
	("index",		ctypes.POINTER(_GstIndex)),] )

send_event = _rpythonic_function_(		"send_event", ctypes.c_int, [
	("element",		ctypes.POINTER(_GstElement)),
	("event",		ctypes.POINTER(_GstEvent)),] )

get_query_types = _rpythonic_function_(		"get_query_types", ctypes.POINTER(ctypes.c_int), [
	("element",		ctypes.POINTER(_GstElement)),] )

query = _rpythonic_function_(		"query", ctypes.c_int, [
	("element",		ctypes.POINTER(_GstElement)),
	("query",		ctypes.POINTER(_GstQuery)),] )

request_new_pad_full = _rpythonic_function_(		"request_new_pad_full", ctypes.POINTER(_GstPad), [
	("element",		ctypes.POINTER(_GstElement)),
	("templ",		ctypes.POINTER(_GstPadTemplate)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("caps",		ctypes.POINTER(_GstCaps)),] )

gst_element_class_add_pad_template = _rpythonic_function_(		"gst_element_class_add_pad_template", ctypes.c_void_p, [
	("klass",		ctypes.POINTER(_GstElementClass)),
	("templ",		ctypes.POINTER(_GstPadTemplate)),] )

gst_element_class_get_pad_template = _rpythonic_function_(		"gst_element_class_get_pad_template", ctypes.POINTER(_GstPadTemplate), [
	("element_class",		ctypes.POINTER(_GstElementClass)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gst_element_class_get_pad_template_list = _rpythonic_function_(		"gst_element_class_get_pad_template_list", ctypes.POINTER(_GList), [
	("element_class",		ctypes.POINTER(_GstElementClass)),] )

gst_element_class_set_documentation_uri = _rpythonic_function_(		"gst_element_class_set_documentation_uri", ctypes.c_void_p, [
	("klass",		ctypes.POINTER(_GstElementClass)),
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

gst_element_class_set_icon_name = _rpythonic_function_(		"gst_element_class_set_icon_name", ctypes.c_void_p, [
	("klass",		ctypes.POINTER(_GstElementClass)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gst_element_class_set_details = _rpythonic_function_(		"gst_element_class_set_details", ctypes.c_void_p, [
	("klass",		ctypes.POINTER(_GstElementClass)),
	("details",		ctypes.POINTER(_GstElementDetails)),] )

gst_element_class_set_details_simple = _rpythonic_function_(		"gst_element_class_set_details_simple", ctypes.c_void_p, [
	("klass",		ctypes.POINTER(_GstElementClass)),
	("longname",		ctypes.POINTER(ctypes.c_char)),
	("classification",		ctypes.POINTER(ctypes.c_char)),
	("description",		ctypes.POINTER(ctypes.c_char)),
	("author",		ctypes.POINTER(ctypes.c_char)),] )

gst_element_get_type = _rpythonic_function_(		"gst_element_get_type", ctypes.c_ulong, [] )

gst_element_requires_clock = _rpythonic_function_(		"gst_element_requires_clock", ctypes.c_int, [
	("element",		ctypes.POINTER(_GstElement)),] )

gst_element_provides_clock = _rpythonic_function_(		"gst_element_provides_clock", ctypes.c_int, [
	("element",		ctypes.POINTER(_GstElement)),] )

gst_element_provide_clock = _rpythonic_function_(		"gst_element_provide_clock", ctypes.POINTER(_GstClock), [
	("element",		ctypes.POINTER(_GstElement)),] )

gst_element_get_clock = _rpythonic_function_(		"gst_element_get_clock", ctypes.POINTER(_GstClock), [
	("element",		ctypes.POINTER(_GstElement)),] )

gst_element_set_clock = _rpythonic_function_(		"gst_element_set_clock", ctypes.c_int, [
	("element",		ctypes.POINTER(_GstElement)),
	("clock",		ctypes.POINTER(_GstClock)),] )

gst_element_set_base_time = _rpythonic_function_(		"gst_element_set_base_time", ctypes.c_void_p, [
	("element",		ctypes.POINTER(_GstElement)),
	("time",		ctypes.c_ulong),] )

gst_element_get_base_time = _rpythonic_function_(		"gst_element_get_base_time", ctypes.c_ulong, [
	("element",		ctypes.POINTER(_GstElement)),] )

gst_element_set_start_time = _rpythonic_function_(		"gst_element_set_start_time", ctypes.c_void_p, [
	("element",		ctypes.POINTER(_GstElement)),
	("time",		ctypes.c_ulong),] )

gst_element_get_start_time = _rpythonic_function_(		"gst_element_get_start_time", ctypes.c_ulong, [
	("element",		ctypes.POINTER(_GstElement)),] )

gst_element_is_indexable = _rpythonic_function_(		"gst_element_is_indexable", ctypes.c_int, [
	("element",		ctypes.POINTER(_GstElement)),] )

gst_element_set_index = _rpythonic_function_(		"gst_element_set_index", ctypes.c_void_p, [
	("element",		ctypes.POINTER(_GstElement)),
	("index",		ctypes.POINTER(_GstIndex)),] )

gst_element_get_index = _rpythonic_function_(		"gst_element_get_index", ctypes.POINTER(_GstIndex), [
	("element",		ctypes.POINTER(_GstElement)),] )

gst_element_set_bus = _rpythonic_function_(		"gst_element_set_bus", ctypes.c_void_p, [
	("element",		ctypes.POINTER(_GstElement)),
	("bus",		ctypes.POINTER(_GstBus)),] )

gst_element_get_bus = _rpythonic_function_(		"gst_element_get_bus", ctypes.POINTER(_GstBus), [
	("element",		ctypes.POINTER(_GstElement)),] )

gst_element_add_pad = _rpythonic_function_(		"gst_element_add_pad", ctypes.c_int, [
	("element",		ctypes.POINTER(_GstElement)),
	("pad",		ctypes.POINTER(_GstPad)),] )

gst_element_remove_pad = _rpythonic_function_(		"gst_element_remove_pad", ctypes.c_int, [
	("element",		ctypes.POINTER(_GstElement)),
	("pad",		ctypes.POINTER(_GstPad)),] )

gst_element_no_more_pads = _rpythonic_function_(		"gst_element_no_more_pads", ctypes.c_void_p, [
	("element",		ctypes.POINTER(_GstElement)),] )

gst_element_get_pad = _rpythonic_function_(		"gst_element_get_pad", ctypes.POINTER(_GstPad), [
	("element",		ctypes.POINTER(_GstElement)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gst_element_get_static_pad = _rpythonic_function_(		"gst_element_get_static_pad", ctypes.POINTER(_GstPad), [
	("element",		ctypes.POINTER(_GstElement)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gst_element_get_request_pad = _rpythonic_function_(		"gst_element_get_request_pad", ctypes.POINTER(_GstPad), [
	("element",		ctypes.POINTER(_GstElement)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gst_element_request_pad = _rpythonic_function_(		"gst_element_request_pad", ctypes.POINTER(_GstPad), [
	("element",		ctypes.POINTER(_GstElement)),
	("templ",		ctypes.POINTER(_GstPadTemplate)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("caps",		ctypes.POINTER(_GstCaps)),] )

gst_element_release_request_pad = _rpythonic_function_(		"gst_element_release_request_pad", ctypes.c_void_p, [
	("element",		ctypes.POINTER(_GstElement)),
	("pad",		ctypes.POINTER(_GstPad)),] )

gst_element_iterate_pads = _rpythonic_function_(		"gst_element_iterate_pads", ctypes.POINTER(_GstIterator), [
	("element",		ctypes.POINTER(_GstElement)),] )

gst_element_iterate_src_pads = _rpythonic_function_(		"gst_element_iterate_src_pads", ctypes.POINTER(_GstIterator), [
	("element",		ctypes.POINTER(_GstElement)),] )

gst_element_iterate_sink_pads = _rpythonic_function_(		"gst_element_iterate_sink_pads", ctypes.POINTER(_GstIterator), [
	("element",		ctypes.POINTER(_GstElement)),] )

gst_element_send_event = _rpythonic_function_(		"gst_element_send_event", ctypes.c_int, [
	("element",		ctypes.POINTER(_GstElement)),
	("event",		ctypes.POINTER(_GstEvent)),] )

gst_element_seek = _rpythonic_function_(		"gst_element_seek", ctypes.c_int, [
	("element",		ctypes.POINTER(_GstElement)),
	("rate",		ctypes.c_double),
	("format",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("cur_type",		ctypes.c_int),
	("cur",		ctypes.c_long),
	("stop_type",		ctypes.c_int),
	("stop",		ctypes.c_long),] )

gst_element_get_query_types = _rpythonic_function_(		"gst_element_get_query_types", ctypes.POINTER(ctypes.c_int), [
	("element",		ctypes.POINTER(_GstElement)),] )

gst_element_query = _rpythonic_function_(		"gst_element_query", ctypes.c_int, [
	("element",		ctypes.POINTER(_GstElement)),
	("query",		ctypes.POINTER(_GstQuery)),] )

gst_element_post_message = _rpythonic_function_(		"gst_element_post_message", ctypes.c_int, [
	("element",		ctypes.POINTER(_GstElement)),
	("message",		ctypes.POINTER(_GstMessage)),] )

_gst_element_error_printf = _rpythonic_function_(		"_gst_element_error_printf", ctypes.POINTER(ctypes.c_char), [
	("format",		ctypes.POINTER(ctypes.c_char)),] )

gst_element_message_full = _rpythonic_function_(		"gst_element_message_full", ctypes.c_void_p, [
	("element",		ctypes.POINTER(_GstElement)),
	("C_type",		ctypes.c_int),
	("domain",		ctypes.c_uint),
	("code",		ctypes.c_int),
	("text",		ctypes.POINTER(ctypes.c_char)),
	("debug",		ctypes.POINTER(ctypes.c_char)),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("function",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),] )

gst_element_is_locked_state = _rpythonic_function_(		"gst_element_is_locked_state", ctypes.c_int, [
	("element",		ctypes.POINTER(_GstElement)),] )

gst_element_set_locked_state = _rpythonic_function_(		"gst_element_set_locked_state", ctypes.c_int, [
	("element",		ctypes.POINTER(_GstElement)),
	("locked_state",		ctypes.c_int),] )

gst_element_sync_state_with_parent = _rpythonic_function_(		"gst_element_sync_state_with_parent", ctypes.c_int, [
	("element",		ctypes.POINTER(_GstElement)),] )

gst_element_get_state = _rpythonic_function_(		"gst_element_get_state", ctypes.c_int, [
	("element",		ctypes.POINTER(_GstElement)),
	("state",		ctypes.POINTER(ctypes.c_int)),
	("pending",		ctypes.POINTER(ctypes.c_int)),
	("timeout",		ctypes.c_ulong),] )

gst_element_set_state = _rpythonic_function_(		"gst_element_set_state", ctypes.c_int, [
	("element",		ctypes.POINTER(_GstElement)),
	("state",		ctypes.c_int),] )

gst_element_abort_state = _rpythonic_function_(		"gst_element_abort_state", ctypes.c_void_p, [
	("element",		ctypes.POINTER(_GstElement)),] )

gst_element_change_state = _rpythonic_function_(		"gst_element_change_state", ctypes.c_int, [
	("element",		ctypes.POINTER(_GstElement)),
	("transition",		ctypes.c_int),] )

gst_element_continue_state = _rpythonic_function_(		"gst_element_continue_state", ctypes.c_int, [
	("element",		ctypes.POINTER(_GstElement)),
	("ret",		ctypes.c_int),] )

gst_element_lost_state = _rpythonic_function_(		"gst_element_lost_state", ctypes.c_void_p, [
	("element",		ctypes.POINTER(_GstElement)),] )

gst_element_lost_state_full = _rpythonic_function_(		"gst_element_lost_state_full", ctypes.c_void_p, [
	("element",		ctypes.POINTER(_GstElement)),
	("new_base_time",		ctypes.c_int),] )

gst_element_get_factory = _rpythonic_function_(		"gst_element_get_factory", ctypes.POINTER(_GstElementFactory), [
	("element",		ctypes.POINTER(_GstElement)),] )

element_added = _rpythonic_function_(		"element_added", ctypes.c_void_p, [
	("bin",		ctypes.POINTER(_GstBin)),
	("child",		ctypes.POINTER(_GstElement)),] )

element_removed = _rpythonic_function_(		"element_removed", ctypes.c_void_p, [
	("bin",		ctypes.POINTER(_GstBin)),
	("child",		ctypes.POINTER(_GstElement)),] )

add_element = _rpythonic_function_(		"add_element", ctypes.c_int, [
	("bin",		ctypes.POINTER(_GstBin)),
	("element",		ctypes.POINTER(_GstElement)),] )

remove_element = _rpythonic_function_(		"remove_element", ctypes.c_int, [
	("bin",		ctypes.POINTER(_GstBin)),
	("element",		ctypes.POINTER(_GstElement)),] )

handle_message = _rpythonic_function_(		"handle_message", ctypes.c_void_p, [
	("bin",		ctypes.POINTER(_GstBin)),
	("message",		ctypes.POINTER(_GstMessage)),] )

do_latency = _rpythonic_function_(		"do_latency", ctypes.c_int, [
	("bin",		ctypes.POINTER(_GstBin)),] )

gst_bin_get_type = _rpythonic_function_(		"gst_bin_get_type", ctypes.c_ulong, [] )

gst_bin_new = _rpythonic_function_(		"gst_bin_new", ctypes.POINTER(_GstElement), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gst_bin_add = _rpythonic_function_(		"gst_bin_add", ctypes.c_int, [
	("bin",		ctypes.POINTER(_GstBin)),
	("element",		ctypes.POINTER(_GstElement)),] )

gst_bin_remove = _rpythonic_function_(		"gst_bin_remove", ctypes.c_int, [
	("bin",		ctypes.POINTER(_GstBin)),
	("element",		ctypes.POINTER(_GstElement)),] )

gst_bin_get_by_name = _rpythonic_function_(		"gst_bin_get_by_name", ctypes.POINTER(_GstElement), [
	("bin",		ctypes.POINTER(_GstBin)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gst_bin_get_by_name_recurse_up = _rpythonic_function_(		"gst_bin_get_by_name_recurse_up", ctypes.POINTER(_GstElement), [
	("bin",		ctypes.POINTER(_GstBin)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gst_bin_get_by_interface = _rpythonic_function_(		"gst_bin_get_by_interface", ctypes.POINTER(_GstElement), [
	("bin",		ctypes.POINTER(_GstBin)),
	("iface",		ctypes.c_ulong),] )

gst_bin_iterate_elements = _rpythonic_function_(		"gst_bin_iterate_elements", ctypes.POINTER(_GstIterator), [
	("bin",		ctypes.POINTER(_GstBin)),] )

gst_bin_iterate_sorted = _rpythonic_function_(		"gst_bin_iterate_sorted", ctypes.POINTER(_GstIterator), [
	("bin",		ctypes.POINTER(_GstBin)),] )

gst_bin_iterate_recurse = _rpythonic_function_(		"gst_bin_iterate_recurse", ctypes.POINTER(_GstIterator), [
	("bin",		ctypes.POINTER(_GstBin)),] )

gst_bin_iterate_sinks = _rpythonic_function_(		"gst_bin_iterate_sinks", ctypes.POINTER(_GstIterator), [
	("bin",		ctypes.POINTER(_GstBin)),] )

gst_bin_iterate_sources = _rpythonic_function_(		"gst_bin_iterate_sources", ctypes.POINTER(_GstIterator), [
	("bin",		ctypes.POINTER(_GstBin)),] )

gst_bin_iterate_all_by_interface = _rpythonic_function_(		"gst_bin_iterate_all_by_interface", ctypes.POINTER(_GstIterator), [
	("bin",		ctypes.POINTER(_GstBin)),
	("iface",		ctypes.c_ulong),] )

gst_bin_recalculate_latency = _rpythonic_function_(		"gst_bin_recalculate_latency", ctypes.c_int, [
	("bin",		ctypes.POINTER(_GstBin)),] )

get_child_by_index = _rpythonic_function_(		"get_child_by_index", ctypes.POINTER(_GstObject), [
	("parent",		ctypes.POINTER(_GstChildProxy)),
	("index",		ctypes.c_uint),] )

get_children_count = _rpythonic_function_(		"get_children_count", ctypes.c_uint, [
	("parent",		ctypes.POINTER(_GstChildProxy)),] )

child_added = _rpythonic_function_(		"child_added", ctypes.c_void_p, [
	("parent",		ctypes.POINTER(_GstChildProxy)),
	("child",		ctypes.POINTER(_GstObject)),] )

child_removed = _rpythonic_function_(		"child_removed", ctypes.c_void_p, [
	("parent",		ctypes.POINTER(_GstChildProxy)),
	("child",		ctypes.POINTER(_GstObject)),] )

gst_child_proxy_get_type = _rpythonic_function_(		"gst_child_proxy_get_type", ctypes.c_ulong, [] )

gst_child_proxy_get_child_by_name = _rpythonic_function_(		"gst_child_proxy_get_child_by_name", ctypes.POINTER(_GstObject), [
	("parent",		ctypes.POINTER(_GstChildProxy)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gst_child_proxy_get_child_by_index = _rpythonic_function_(		"gst_child_proxy_get_child_by_index", ctypes.POINTER(_GstObject), [
	("parent",		ctypes.POINTER(_GstChildProxy)),
	("index",		ctypes.c_uint),] )

gst_child_proxy_get_children_count = _rpythonic_function_(		"gst_child_proxy_get_children_count", ctypes.c_uint, [
	("parent",		ctypes.POINTER(_GstChildProxy)),] )

gst_child_proxy_lookup = _rpythonic_function_(		"gst_child_proxy_lookup", ctypes.c_int, [
	("C_object",		ctypes.POINTER(_GstObject)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("target",		ctypes.POINTER(ctypes.POINTER(_GstObject))),
	("pspec",		ctypes.POINTER(ctypes.POINTER(_GParamSpec))),] )

gst_child_proxy_get_property = _rpythonic_function_(		"gst_child_proxy_get_property", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GstObject)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(_GValue)),] )

gst_child_proxy_get_valist = _rpythonic_function_(		"gst_child_proxy_get_valist", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GstObject)),
	("first_property_name",		ctypes.POINTER(ctypes.c_char)),
	("var_args",		ctypes.c_char),] )

gst_child_proxy_get = _rpythonic_function_(		"gst_child_proxy_get", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GstObject)),
	("first_property_name",		ctypes.POINTER(ctypes.c_char)),] )

gst_child_proxy_set_property = _rpythonic_function_(		"gst_child_proxy_set_property", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GstObject)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(_GValue)),] )

gst_child_proxy_set_valist = _rpythonic_function_(		"gst_child_proxy_set_valist", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GstObject)),
	("first_property_name",		ctypes.POINTER(ctypes.c_char)),
	("var_args",		ctypes.c_char),] )

gst_child_proxy_set = _rpythonic_function_(		"gst_child_proxy_set", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GstObject)),
	("first_property_name",		ctypes.POINTER(ctypes.c_char)),] )

gst_child_proxy_child_added = _rpythonic_function_(		"gst_child_proxy_child_added", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GstObject)),
	("child",		ctypes.POINTER(_GstObject)),] )

gst_child_proxy_child_removed = _rpythonic_function_(		"gst_child_proxy_child_removed", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GstObject)),
	("child",		ctypes.POINTER(_GstObject)),] )

_gst_debug_bin_to_dot_file = _rpythonic_function_(		"_gst_debug_bin_to_dot_file", ctypes.c_void_p, [
	("bin",		ctypes.POINTER(_GstBin)),
	("details",		ctypes.c_int),
	("file_name",		ctypes.POINTER(ctypes.c_char)),] )

_gst_debug_bin_to_dot_file_with_ts = _rpythonic_function_(		"_gst_debug_bin_to_dot_file_with_ts", ctypes.c_void_p, [
	("bin",		ctypes.POINTER(_GstBin)),
	("details",		ctypes.c_int),
	("file_name",		ctypes.POINTER(ctypes.c_char)),] )

gst_g_error_get_type = _rpythonic_function_(		"gst_g_error_get_type", ctypes.c_ulong, [] )

gst_error_get_message = _rpythonic_function_(		"gst_error_get_message", ctypes.POINTER(ctypes.c_char), [
	("domain",		ctypes.c_uint),
	("code",		ctypes.c_int),] )

gst_stream_error_quark = _rpythonic_function_(		"gst_stream_error_quark", ctypes.c_uint, [] )

gst_core_error_quark = _rpythonic_function_(		"gst_core_error_quark", ctypes.c_uint, [] )

gst_resource_error_quark = _rpythonic_function_(		"gst_resource_error_quark", ctypes.c_uint, [] )

gst_library_error_quark = _rpythonic_function_(		"gst_library_error_quark", ctypes.c_uint, [] )

gst_proxy_pad_get_type = _rpythonic_function_(		"gst_proxy_pad_get_type", ctypes.c_ulong, [] )

gst_ghost_pad_get_type = _rpythonic_function_(		"gst_ghost_pad_get_type", ctypes.c_ulong, [] )

gst_ghost_pad_new = _rpythonic_function_(		"gst_ghost_pad_new", ctypes.POINTER(_GstPad), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("target",		ctypes.POINTER(_GstPad)),] )

gst_ghost_pad_new_no_target = _rpythonic_function_(		"gst_ghost_pad_new_no_target", ctypes.POINTER(_GstPad), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("dir",		ctypes.c_int),] )

gst_ghost_pad_new_from_template = _rpythonic_function_(		"gst_ghost_pad_new_from_template", ctypes.POINTER(_GstPad), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("target",		ctypes.POINTER(_GstPad)),
	("templ",		ctypes.POINTER(_GstPadTemplate)),] )

gst_ghost_pad_new_no_target_from_template = _rpythonic_function_(		"gst_ghost_pad_new_no_target_from_template", ctypes.POINTER(_GstPad), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("templ",		ctypes.POINTER(_GstPadTemplate)),] )

gst_ghost_pad_get_target = _rpythonic_function_(		"gst_ghost_pad_get_target", ctypes.POINTER(_GstPad), [
	("gpad",		ctypes.POINTER(_GstGhostPad)),] )

gst_ghost_pad_set_target = _rpythonic_function_(		"gst_ghost_pad_set_target", ctypes.c_int, [
	("gpad",		ctypes.POINTER(_GstGhostPad)),
	("newtarget",		ctypes.POINTER(_GstPad)),] )

gst_ghost_pad_construct = _rpythonic_function_(		"gst_ghost_pad_construct", ctypes.c_int, [
	("gpad",		ctypes.POINTER(_GstGhostPad)),] )

GstLogFunction = _rpythonic_function_(		"GstLogFunction", ctypes.c_void_p, [
	("category",		ctypes.POINTER(_GstDebugCategory)),
	("level",		ctypes.c_int),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("function",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("C_object",		ctypes.POINTER(_GObject)),
	("message",		ctypes.POINTER(_GstDebugMessage)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

_gst_debug_init = _rpythonic_function_(		"_gst_debug_init", ctypes.c_void_p, [] )

gst_debug_log = _rpythonic_function_(		"gst_debug_log", ctypes.c_void_p, [
	("category",		ctypes.POINTER(_GstDebugCategory)),
	("level",		ctypes.c_int),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("function",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("C_object",		ctypes.POINTER(_GObject)),
	("format",		ctypes.POINTER(ctypes.c_char)),] )

gst_debug_log_valist = _rpythonic_function_(		"gst_debug_log_valist", ctypes.c_void_p, [
	("category",		ctypes.POINTER(_GstDebugCategory)),
	("level",		ctypes.c_int),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("function",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("C_object",		ctypes.POINTER(_GObject)),
	("format",		ctypes.POINTER(ctypes.c_char)),
	("args",		ctypes.c_char),] )

_gst_debug_category_new = _rpythonic_function_(		"_gst_debug_category_new", ctypes.POINTER(_GstDebugCategory), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("color",		ctypes.c_uint),
	("description",		ctypes.POINTER(ctypes.c_char)),] )

_gst_debug_get_category = _rpythonic_function_(		"_gst_debug_get_category", ctypes.POINTER(_GstDebugCategory), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

_gst_debug_dump_mem = _rpythonic_function_(		"_gst_debug_dump_mem", ctypes.c_void_p, [
	("cat",		ctypes.POINTER(_GstDebugCategory)),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("func",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("obj",		ctypes.POINTER(_GObject)),
	("msg",		ctypes.POINTER(ctypes.c_char)),
	("data",		ctypes.POINTER(ctypes.c_ubyte)),
	("length",		ctypes.c_uint),] )

GstDebugFuncPtr = _rpythonic_function_(		"GstDebugFuncPtr", ctypes.c_void_p, [] )

_gst_debug_register_funcptr = _rpythonic_function_(		"_gst_debug_register_funcptr", ctypes.c_void_p, [
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("ptrname",		ctypes.POINTER(ctypes.c_char)),] )

_gst_debug_nameof_funcptr = _rpythonic_function_(		"_gst_debug_nameof_funcptr", ctypes.POINTER(ctypes.c_char), [
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

gst_debug_message_get = _rpythonic_function_(		"gst_debug_message_get", ctypes.POINTER(ctypes.c_char), [
	("message",		ctypes.POINTER(_GstDebugMessage)),] )

gst_debug_log_default = _rpythonic_function_(		"gst_debug_log_default", ctypes.c_void_p, [
	("category",		ctypes.POINTER(_GstDebugCategory)),
	("level",		ctypes.c_int),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("function",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("C_object",		ctypes.POINTER(_GObject)),
	("message",		ctypes.POINTER(_GstDebugMessage)),
	("unused",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_debug_level_get_name = _rpythonic_function_(		"gst_debug_level_get_name", ctypes.POINTER(ctypes.c_char), [
	("level",		ctypes.c_int),] )

gst_debug_add_log_function = _rpythonic_function_(		"gst_debug_add_log_function", ctypes.c_void_p, [
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GstDebugCategory),ctypes.c_int,ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.c_int,ctypes.POINTER(_GObject),ctypes.POINTER(_GstDebugMessage),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_debug_remove_log_function = _rpythonic_function_(		"gst_debug_remove_log_function", ctypes.c_uint, [
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GstDebugCategory),ctypes.c_int,ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.c_int,ctypes.POINTER(_GObject),ctypes.POINTER(_GstDebugMessage),ctypes.POINTER(ctypes.c_void_p),)),] )

gst_debug_remove_log_function_by_data = _rpythonic_function_(		"gst_debug_remove_log_function_by_data", ctypes.c_uint, [("data",		ctypes.c_void_p)] )

gst_debug_set_active = _rpythonic_function_(		"gst_debug_set_active", ctypes.c_void_p, [
	("active",		ctypes.c_int),] )

gst_debug_is_active = _rpythonic_function_(		"gst_debug_is_active", ctypes.c_int, [] )

gst_debug_set_colored = _rpythonic_function_(		"gst_debug_set_colored", ctypes.c_void_p, [
	("colored",		ctypes.c_int),] )

gst_debug_is_colored = _rpythonic_function_(		"gst_debug_is_colored", ctypes.c_int, [] )

gst_debug_set_default_threshold = _rpythonic_function_(		"gst_debug_set_default_threshold", ctypes.c_void_p, [
	("level",		ctypes.c_int),] )

gst_debug_get_default_threshold = _rpythonic_function_(		"gst_debug_get_default_threshold", ctypes.c_int, [] )

gst_debug_set_threshold_for_name = _rpythonic_function_(		"gst_debug_set_threshold_for_name", ctypes.c_void_p, [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("level",		ctypes.c_int),] )

gst_debug_unset_threshold_for_name = _rpythonic_function_(		"gst_debug_unset_threshold_for_name", ctypes.c_void_p, [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gst_debug_category_free = _rpythonic_function_(		"gst_debug_category_free", ctypes.c_void_p, [
	("category",		ctypes.POINTER(_GstDebugCategory)),] )

gst_debug_category_set_threshold = _rpythonic_function_(		"gst_debug_category_set_threshold", ctypes.c_void_p, [
	("category",		ctypes.POINTER(_GstDebugCategory)),
	("level",		ctypes.c_int),] )

gst_debug_category_reset_threshold = _rpythonic_function_(		"gst_debug_category_reset_threshold", ctypes.c_void_p, [
	("category",		ctypes.POINTER(_GstDebugCategory)),] )

gst_debug_category_get_threshold = _rpythonic_function_(		"gst_debug_category_get_threshold", ctypes.c_int, [
	("category",		ctypes.POINTER(_GstDebugCategory)),] )

gst_debug_category_get_name = _rpythonic_function_(		"gst_debug_category_get_name", ctypes.POINTER(ctypes.c_char), [
	("category",		ctypes.POINTER(_GstDebugCategory)),] )

gst_debug_category_get_color = _rpythonic_function_(		"gst_debug_category_get_color", ctypes.c_uint, [
	("category",		ctypes.POINTER(_GstDebugCategory)),] )

gst_debug_category_get_description = _rpythonic_function_(		"gst_debug_category_get_description", ctypes.POINTER(ctypes.c_char), [
	("category",		ctypes.POINTER(_GstDebugCategory)),] )

gst_debug_get_all_categories = _rpythonic_function_(		"gst_debug_get_all_categories", ctypes.POINTER(_GSList), [] )

gst_debug_construct_term_color = _rpythonic_function_(		"gst_debug_construct_term_color", ctypes.POINTER(ctypes.c_char), [
	("colorinfo",		ctypes.c_uint),] )

gst_debug_construct_win_color = _rpythonic_function_(		"gst_debug_construct_win_color", ctypes.c_int, [
	("colorinfo",		ctypes.c_uint),] )

gst_debug_print_stack_trace = _rpythonic_function_(		"gst_debug_print_stack_trace", ctypes.c_void_p, [] )

supported = _rpythonic_function_(		"supported", ctypes.c_int, [
	("iface",		ctypes.POINTER(_GstImplementsInterface)),
	("iface_type",		ctypes.c_ulong),] )

gst_implements_interface_get_type = _rpythonic_function_(		"gst_implements_interface_get_type", ctypes.c_ulong, [] )

gst_element_implements_interface = _rpythonic_function_(		"gst_element_implements_interface", ctypes.c_int, [
	("element",		ctypes.POINTER(_GstElement)),
	("iface_type",		ctypes.c_ulong),] )

gst_implements_interface_cast = _rpythonic_function_(		"gst_implements_interface_cast", ctypes.POINTER(ctypes.c_void_p), [
	("from",		ctypes.POINTER(ctypes.c_void_p)),
	("C_type",		ctypes.c_ulong),] )

gst_implements_interface_check = _rpythonic_function_(		"gst_implements_interface_check", ctypes.c_int, [
	("from",		ctypes.POINTER(ctypes.c_void_p)),
	("C_type",		ctypes.c_ulong),] )

gst_marshal_VOID__BOXED_OBJECT = _rpythonic_function_(		"gst_marshal_VOID__BOXED_OBJECT", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_marshal_VOID__POINTER_OBJECT = _rpythonic_function_(		"gst_marshal_VOID__POINTER_OBJECT", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_marshal_VOID__OBJECT_OBJECT = _rpythonic_function_(		"gst_marshal_VOID__OBJECT_OBJECT", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_marshal_VOID__OBJECT_PARAM = _rpythonic_function_(		"gst_marshal_VOID__OBJECT_PARAM", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_marshal_VOID__OBJECT_POINTER = _rpythonic_function_(		"gst_marshal_VOID__OBJECT_POINTER", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_marshal_VOID__OBJECT_BOXED = _rpythonic_function_(		"gst_marshal_VOID__OBJECT_BOXED", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_marshal_VOID__OBJECT_BOXED_STRING = _rpythonic_function_(		"gst_marshal_VOID__OBJECT_BOXED_STRING", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_marshal_VOID__OBJECT_OBJECT_STRING = _rpythonic_function_(		"gst_marshal_VOID__OBJECT_OBJECT_STRING", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_marshal_VOID__OBJECT_STRING = _rpythonic_function_(		"gst_marshal_VOID__OBJECT_STRING", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_marshal_VOID__INT_INT = _rpythonic_function_(		"gst_marshal_VOID__INT_INT", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_marshal_VOID__INT64 = _rpythonic_function_(		"gst_marshal_VOID__INT64", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_marshal_VOID__UINT_BOXED = _rpythonic_function_(		"gst_marshal_VOID__UINT_BOXED", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_marshal_BOOLEAN__VOID = _rpythonic_function_(		"gst_marshal_BOOLEAN__VOID", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_marshal_BOOLEAN__POINTER = _rpythonic_function_(		"gst_marshal_BOOLEAN__POINTER", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_marshal_POINTER__POINTER = _rpythonic_function_(		"gst_marshal_POINTER__POINTER", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_marshal_BOXED__BOXED = _rpythonic_function_(		"gst_marshal_BOXED__BOXED", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GstValueCompareFunc = _rpythonic_function_(		"GstValueCompareFunc", ctypes.c_int, [
	("value1",		ctypes.POINTER(_GValue)),
	("value2",		ctypes.POINTER(_GValue)),] )

GstValueSerializeFunc = _rpythonic_function_(		"GstValueSerializeFunc", ctypes.POINTER(ctypes.c_char), [
	("value1",		ctypes.POINTER(_GValue)),] )

GstValueDeserializeFunc = _rpythonic_function_(		"GstValueDeserializeFunc", ctypes.c_int, [
	("dest",		ctypes.POINTER(_GValue)),
	("s",		ctypes.POINTER(ctypes.c_char)),] )

GstValueUnionFunc = _rpythonic_function_(		"GstValueUnionFunc", ctypes.c_int, [
	("dest",		ctypes.POINTER(_GValue)),
	("value1",		ctypes.POINTER(_GValue)),
	("value2",		ctypes.POINTER(_GValue)),] )

GstValueIntersectFunc = _rpythonic_function_(		"GstValueIntersectFunc", ctypes.c_int, [
	("dest",		ctypes.POINTER(_GValue)),
	("value1",		ctypes.POINTER(_GValue)),
	("value2",		ctypes.POINTER(_GValue)),] )

GstValueSubtractFunc = _rpythonic_function_(		"GstValueSubtractFunc", ctypes.c_int, [
	("dest",		ctypes.POINTER(_GValue)),
	("minuend",		ctypes.POINTER(_GValue)),
	("subtrahend",		ctypes.POINTER(_GValue)),] )

gst_int_range_get_type = _rpythonic_function_(		"gst_int_range_get_type", ctypes.c_ulong, [] )

gst_int64_range_get_type = _rpythonic_function_(		"gst_int64_range_get_type", ctypes.c_ulong, [] )

gst_double_range_get_type = _rpythonic_function_(		"gst_double_range_get_type", ctypes.c_ulong, [] )

gst_fraction_range_get_type = _rpythonic_function_(		"gst_fraction_range_get_type", ctypes.c_ulong, [] )

gst_fourcc_get_type = _rpythonic_function_(		"gst_fourcc_get_type", ctypes.c_ulong, [] )

gst_fraction_get_type = _rpythonic_function_(		"gst_fraction_get_type", ctypes.c_ulong, [] )

gst_value_list_get_type = _rpythonic_function_(		"gst_value_list_get_type", ctypes.c_ulong, [] )

gst_value_array_get_type = _rpythonic_function_(		"gst_value_array_get_type", ctypes.c_ulong, [] )

gst_date_get_type = _rpythonic_function_(		"gst_date_get_type", ctypes.c_ulong, [] )

gst_date_time_get_type = _rpythonic_function_(		"gst_date_time_get_type", ctypes.c_ulong, [] )

gst_value_register = _rpythonic_function_(		"gst_value_register", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_GstValueTable)),] )

gst_value_init_and_copy = _rpythonic_function_(		"gst_value_init_and_copy", ctypes.c_void_p, [
	("dest",		ctypes.POINTER(_GValue)),
	("src",		ctypes.POINTER(_GValue)),] )

gst_value_serialize = _rpythonic_function_(		"gst_value_serialize", ctypes.POINTER(ctypes.c_char), [
	("value",		ctypes.POINTER(_GValue)),] )

gst_value_deserialize = _rpythonic_function_(		"gst_value_deserialize", ctypes.c_int, [
	("dest",		ctypes.POINTER(_GValue)),
	("src",		ctypes.POINTER(ctypes.c_char)),] )

gst_value_list_append_value = _rpythonic_function_(		"gst_value_list_append_value", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("append_value",		ctypes.POINTER(_GValue)),] )

gst_value_list_prepend_value = _rpythonic_function_(		"gst_value_list_prepend_value", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("prepend_value",		ctypes.POINTER(_GValue)),] )

gst_value_list_concat = _rpythonic_function_(		"gst_value_list_concat", ctypes.c_void_p, [
	("dest",		ctypes.POINTER(_GValue)),
	("value1",		ctypes.POINTER(_GValue)),
	("value2",		ctypes.POINTER(_GValue)),] )

gst_value_list_merge = _rpythonic_function_(		"gst_value_list_merge", ctypes.c_void_p, [
	("dest",		ctypes.POINTER(_GValue)),
	("value1",		ctypes.POINTER(_GValue)),
	("value2",		ctypes.POINTER(_GValue)),] )

gst_value_list_get_size = _rpythonic_function_(		"gst_value_list_get_size", ctypes.c_uint, [
	("value",		ctypes.POINTER(_GValue)),] )

gst_value_list_get_value = _rpythonic_function_(		"gst_value_list_get_value", ctypes.POINTER(_GValue), [
	("value",		ctypes.POINTER(_GValue)),
	("index",		ctypes.c_uint),] )

gst_value_array_append_value = _rpythonic_function_(		"gst_value_array_append_value", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("append_value",		ctypes.POINTER(_GValue)),] )

gst_value_array_prepend_value = _rpythonic_function_(		"gst_value_array_prepend_value", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("prepend_value",		ctypes.POINTER(_GValue)),] )

gst_value_array_get_size = _rpythonic_function_(		"gst_value_array_get_size", ctypes.c_uint, [
	("value",		ctypes.POINTER(_GValue)),] )

gst_value_array_get_value = _rpythonic_function_(		"gst_value_array_get_value", ctypes.POINTER(_GValue), [
	("value",		ctypes.POINTER(_GValue)),
	("index",		ctypes.c_uint),] )

gst_value_set_fourcc = _rpythonic_function_(		"gst_value_set_fourcc", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("fourcc",		ctypes.c_uint),] )

gst_value_get_fourcc = _rpythonic_function_(		"gst_value_get_fourcc", ctypes.c_uint, [
	("value",		ctypes.POINTER(_GValue)),] )

gst_value_set_int_range = _rpythonic_function_(		"gst_value_set_int_range", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("start",		ctypes.c_int),
	("end",		ctypes.c_int),] )

gst_value_get_int_range_min = _rpythonic_function_(		"gst_value_get_int_range_min", ctypes.c_int, [
	("value",		ctypes.POINTER(_GValue)),] )

gst_value_get_int_range_max = _rpythonic_function_(		"gst_value_get_int_range_max", ctypes.c_int, [
	("value",		ctypes.POINTER(_GValue)),] )

gst_value_set_int64_range = _rpythonic_function_(		"gst_value_set_int64_range", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("start",		ctypes.c_long),
	("end",		ctypes.c_long),] )

gst_value_get_int64_range_min = _rpythonic_function_(		"gst_value_get_int64_range_min", ctypes.c_long, [
	("value",		ctypes.POINTER(_GValue)),] )

gst_value_get_int64_range_max = _rpythonic_function_(		"gst_value_get_int64_range_max", ctypes.c_long, [
	("value",		ctypes.POINTER(_GValue)),] )

gst_value_set_double_range = _rpythonic_function_(		"gst_value_set_double_range", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("start",		ctypes.c_double),
	("end",		ctypes.c_double),] )

gst_value_get_double_range_min = _rpythonic_function_(		"gst_value_get_double_range_min", ctypes.c_double, [
	("value",		ctypes.POINTER(_GValue)),] )

gst_value_get_double_range_max = _rpythonic_function_(		"gst_value_get_double_range_max", ctypes.c_double, [
	("value",		ctypes.POINTER(_GValue)),] )

gst_value_get_caps = _rpythonic_function_(		"gst_value_get_caps", ctypes.POINTER(_GstCaps), [
	("value",		ctypes.POINTER(_GValue)),] )

gst_value_set_caps = _rpythonic_function_(		"gst_value_set_caps", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("caps",		ctypes.POINTER(_GstCaps)),] )

gst_value_get_structure = _rpythonic_function_(		"gst_value_get_structure", ctypes.POINTER(_GstStructure), [
	("value",		ctypes.POINTER(_GValue)),] )

gst_value_set_structure = _rpythonic_function_(		"gst_value_set_structure", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("structure",		ctypes.POINTER(_GstStructure)),] )

gst_value_set_fraction = _rpythonic_function_(		"gst_value_set_fraction", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("numerator",		ctypes.c_int),
	("denominator",		ctypes.c_int),] )

gst_value_get_fraction_numerator = _rpythonic_function_(		"gst_value_get_fraction_numerator", ctypes.c_int, [
	("value",		ctypes.POINTER(_GValue)),] )

gst_value_get_fraction_denominator = _rpythonic_function_(		"gst_value_get_fraction_denominator", ctypes.c_int, [
	("value",		ctypes.POINTER(_GValue)),] )

gst_value_fraction_multiply = _rpythonic_function_(		"gst_value_fraction_multiply", ctypes.c_int, [
	("product",		ctypes.POINTER(_GValue)),
	("factor1",		ctypes.POINTER(_GValue)),
	("factor2",		ctypes.POINTER(_GValue)),] )

gst_value_fraction_subtract = _rpythonic_function_(		"gst_value_fraction_subtract", ctypes.c_int, [
	("dest",		ctypes.POINTER(_GValue)),
	("minuend",		ctypes.POINTER(_GValue)),
	("subtrahend",		ctypes.POINTER(_GValue)),] )

gst_value_set_fraction_range = _rpythonic_function_(		"gst_value_set_fraction_range", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("start",		ctypes.POINTER(_GValue)),
	("end",		ctypes.POINTER(_GValue)),] )

gst_value_set_fraction_range_full = _rpythonic_function_(		"gst_value_set_fraction_range_full", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("numerator_start",		ctypes.c_int),
	("denominator_start",		ctypes.c_int),
	("numerator_end",		ctypes.c_int),
	("denominator_end",		ctypes.c_int),] )

gst_value_get_fraction_range_min = _rpythonic_function_(		"gst_value_get_fraction_range_min", ctypes.POINTER(_GValue), [
	("value",		ctypes.POINTER(_GValue)),] )

gst_value_get_fraction_range_max = _rpythonic_function_(		"gst_value_get_fraction_range_max", ctypes.POINTER(_GValue), [
	("value",		ctypes.POINTER(_GValue)),] )

gst_value_get_date = _rpythonic_function_(		"gst_value_get_date", ctypes.POINTER(_GDate), [
	("value",		ctypes.POINTER(_GValue)),] )

gst_value_set_date = _rpythonic_function_(		"gst_value_set_date", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("date",		ctypes.POINTER(_GDate)),] )

gst_value_compare = _rpythonic_function_(		"gst_value_compare", ctypes.c_int, [
	("value1",		ctypes.POINTER(_GValue)),
	("value2",		ctypes.POINTER(_GValue)),] )

gst_value_can_compare = _rpythonic_function_(		"gst_value_can_compare", ctypes.c_int, [
	("value1",		ctypes.POINTER(_GValue)),
	("value2",		ctypes.POINTER(_GValue)),] )

gst_value_union = _rpythonic_function_(		"gst_value_union", ctypes.c_int, [
	("dest",		ctypes.POINTER(_GValue)),
	("value1",		ctypes.POINTER(_GValue)),
	("value2",		ctypes.POINTER(_GValue)),] )

gst_value_can_union = _rpythonic_function_(		"gst_value_can_union", ctypes.c_int, [
	("value1",		ctypes.POINTER(_GValue)),
	("value2",		ctypes.POINTER(_GValue)),] )

gst_value_register_union_func = _rpythonic_function_(		"gst_value_register_union_func", ctypes.c_void_p, [
	("type1",		ctypes.c_ulong),
	("type2",		ctypes.c_ulong),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GValue),ctypes.POINTER(_GValue),ctypes.POINTER(_GValue),)),] )

gst_value_intersect = _rpythonic_function_(		"gst_value_intersect", ctypes.c_int, [
	("dest",		ctypes.POINTER(_GValue)),
	("value1",		ctypes.POINTER(_GValue)),
	("value2",		ctypes.POINTER(_GValue)),] )

gst_value_can_intersect = _rpythonic_function_(		"gst_value_can_intersect", ctypes.c_int, [
	("value1",		ctypes.POINTER(_GValue)),
	("value2",		ctypes.POINTER(_GValue)),] )

gst_value_register_intersect_func = _rpythonic_function_(		"gst_value_register_intersect_func", ctypes.c_void_p, [
	("type1",		ctypes.c_ulong),
	("type2",		ctypes.c_ulong),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GValue),ctypes.POINTER(_GValue),ctypes.POINTER(_GValue),)),] )

gst_value_subtract = _rpythonic_function_(		"gst_value_subtract", ctypes.c_int, [
	("dest",		ctypes.POINTER(_GValue)),
	("minuend",		ctypes.POINTER(_GValue)),
	("subtrahend",		ctypes.POINTER(_GValue)),] )

gst_value_can_subtract = _rpythonic_function_(		"gst_value_can_subtract", ctypes.c_int, [
	("minuend",		ctypes.POINTER(_GValue)),
	("subtrahend",		ctypes.POINTER(_GValue)),] )

gst_value_register_subtract_func = _rpythonic_function_(		"gst_value_register_subtract_func", ctypes.c_void_p, [
	("minuend_type",		ctypes.c_ulong),
	("subtrahend_type",		ctypes.c_ulong),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GValue),ctypes.POINTER(_GValue),ctypes.POINTER(_GValue),)),] )

gst_value_is_fixed = _rpythonic_function_(		"gst_value_is_fixed", ctypes.c_int, [
	("value",		ctypes.POINTER(_GValue)),] )

gst_param_spec_fraction_get_type = _rpythonic_function_(		"gst_param_spec_fraction_get_type", ctypes.c_ulong, [] )

gst_param_spec_fraction = _rpythonic_function_(		"gst_param_spec_fraction", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("min_num",		ctypes.c_int),
	("min_denom",		ctypes.c_int),
	("max_num",		ctypes.c_int),
	("max_denom",		ctypes.c_int),
	("default_num",		ctypes.c_int),
	("default_denom",		ctypes.c_int),
	("flags",		ctypes.c_int),] )

gst_pipeline_get_type = _rpythonic_function_(		"gst_pipeline_get_type", ctypes.c_ulong, [] )

gst_pipeline_new = _rpythonic_function_(		"gst_pipeline_new", ctypes.POINTER(_GstElement), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gst_pipeline_get_bus = _rpythonic_function_(		"gst_pipeline_get_bus", ctypes.POINTER(_GstBus), [
	("pipeline",		ctypes.POINTER(_GstPipeline)),] )

gst_pipeline_set_new_stream_time = _rpythonic_function_(		"gst_pipeline_set_new_stream_time", ctypes.c_void_p, [
	("pipeline",		ctypes.POINTER(_GstPipeline)),
	("time",		ctypes.c_ulong),] )

gst_pipeline_get_last_stream_time = _rpythonic_function_(		"gst_pipeline_get_last_stream_time", ctypes.c_ulong, [
	("pipeline",		ctypes.POINTER(_GstPipeline)),] )

gst_pipeline_use_clock = _rpythonic_function_(		"gst_pipeline_use_clock", ctypes.c_void_p, [
	("pipeline",		ctypes.POINTER(_GstPipeline)),
	("clock",		ctypes.POINTER(_GstClock)),] )

gst_pipeline_set_clock = _rpythonic_function_(		"gst_pipeline_set_clock", ctypes.c_int, [
	("pipeline",		ctypes.POINTER(_GstPipeline)),
	("clock",		ctypes.POINTER(_GstClock)),] )

gst_pipeline_get_clock = _rpythonic_function_(		"gst_pipeline_get_clock", ctypes.POINTER(_GstClock), [
	("pipeline",		ctypes.POINTER(_GstPipeline)),] )

gst_pipeline_auto_clock = _rpythonic_function_(		"gst_pipeline_auto_clock", ctypes.c_void_p, [
	("pipeline",		ctypes.POINTER(_GstPipeline)),] )

gst_pipeline_set_delay = _rpythonic_function_(		"gst_pipeline_set_delay", ctypes.c_void_p, [
	("pipeline",		ctypes.POINTER(_GstPipeline)),
	("delay",		ctypes.c_ulong),] )

gst_pipeline_get_delay = _rpythonic_function_(		"gst_pipeline_get_delay", ctypes.c_ulong, [
	("pipeline",		ctypes.POINTER(_GstPipeline)),] )

gst_pipeline_set_auto_flush_bus = _rpythonic_function_(		"gst_pipeline_set_auto_flush_bus", ctypes.c_void_p, [
	("pipeline",		ctypes.POINTER(_GstPipeline)),
	("auto_flush",		ctypes.c_int),] )

gst_pipeline_get_auto_flush_bus = _rpythonic_function_(		"gst_pipeline_get_auto_flush_bus", ctypes.c_int, [
	("pipeline",		ctypes.POINTER(_GstPipeline)),] )

gst_poll_new = _rpythonic_function_(		"gst_poll_new", ctypes.POINTER(_GstPoll), [
	("controllable",		ctypes.c_int),] )

gst_poll_new_timer = _rpythonic_function_(		"gst_poll_new_timer", ctypes.POINTER(_GstPoll), [] )

gst_poll_free = _rpythonic_function_(		"gst_poll_free", ctypes.c_void_p, [
	("set",		ctypes.POINTER(_GstPoll)),] )

gst_poll_get_read_gpollfd = _rpythonic_function_(		"gst_poll_get_read_gpollfd", ctypes.c_void_p, [
	("set",		ctypes.POINTER(_GstPoll)),
	("fd",		ctypes.POINTER(_GPollFD)),] )

gst_poll_fd_init = _rpythonic_function_(		"gst_poll_fd_init", ctypes.c_void_p, [
	("fd",		ctypes.POINTER(GstPollFD)),] )

gst_poll_add_fd = _rpythonic_function_(		"gst_poll_add_fd", ctypes.c_int, [
	("set",		ctypes.POINTER(_GstPoll)),
	("fd",		ctypes.POINTER(GstPollFD)),] )

gst_poll_remove_fd = _rpythonic_function_(		"gst_poll_remove_fd", ctypes.c_int, [
	("set",		ctypes.POINTER(_GstPoll)),
	("fd",		ctypes.POINTER(GstPollFD)),] )

gst_poll_fd_ctl_write = _rpythonic_function_(		"gst_poll_fd_ctl_write", ctypes.c_int, [
	("set",		ctypes.POINTER(_GstPoll)),
	("fd",		ctypes.POINTER(GstPollFD)),
	("active",		ctypes.c_int),] )

gst_poll_fd_ctl_read = _rpythonic_function_(		"gst_poll_fd_ctl_read", ctypes.c_int, [
	("set",		ctypes.POINTER(_GstPoll)),
	("fd",		ctypes.POINTER(GstPollFD)),
	("active",		ctypes.c_int),] )

gst_poll_fd_ignored = _rpythonic_function_(		"gst_poll_fd_ignored", ctypes.c_void_p, [
	("set",		ctypes.POINTER(_GstPoll)),
	("fd",		ctypes.POINTER(GstPollFD)),] )

gst_poll_fd_has_closed = _rpythonic_function_(		"gst_poll_fd_has_closed", ctypes.c_int, [
	("set",		ctypes.POINTER(_GstPoll)),
	("fd",		ctypes.POINTER(GstPollFD)),] )

gst_poll_fd_has_error = _rpythonic_function_(		"gst_poll_fd_has_error", ctypes.c_int, [
	("set",		ctypes.POINTER(_GstPoll)),
	("fd",		ctypes.POINTER(GstPollFD)),] )

gst_poll_fd_can_read = _rpythonic_function_(		"gst_poll_fd_can_read", ctypes.c_int, [
	("set",		ctypes.POINTER(_GstPoll)),
	("fd",		ctypes.POINTER(GstPollFD)),] )

gst_poll_fd_can_write = _rpythonic_function_(		"gst_poll_fd_can_write", ctypes.c_int, [
	("set",		ctypes.POINTER(_GstPoll)),
	("fd",		ctypes.POINTER(GstPollFD)),] )

gst_poll_wait = _rpythonic_function_(		"gst_poll_wait", ctypes.c_int, [
	("set",		ctypes.POINTER(_GstPoll)),
	("timeout",		ctypes.c_ulong),] )

gst_poll_set_controllable = _rpythonic_function_(		"gst_poll_set_controllable", ctypes.c_int, [
	("set",		ctypes.POINTER(_GstPoll)),
	("controllable",		ctypes.c_int),] )

gst_poll_restart = _rpythonic_function_(		"gst_poll_restart", ctypes.c_void_p, [
	("set",		ctypes.POINTER(_GstPoll)),] )

gst_poll_set_flushing = _rpythonic_function_(		"gst_poll_set_flushing", ctypes.c_void_p, [
	("set",		ctypes.POINTER(_GstPoll)),
	("flushing",		ctypes.c_int),] )

gst_poll_write_control = _rpythonic_function_(		"gst_poll_write_control", ctypes.c_int, [
	("set",		ctypes.POINTER(_GstPoll)),] )

gst_poll_read_control = _rpythonic_function_(		"gst_poll_read_control", ctypes.c_int, [
	("set",		ctypes.POINTER(_GstPoll)),] )

get_preset_names = _rpythonic_function_(		"get_preset_names", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("preset",		ctypes.POINTER(_GstPreset)),] )

get_property_names = _rpythonic_function_(		"get_property_names", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("preset",		ctypes.POINTER(_GstPreset)),] )

load_preset = _rpythonic_function_(		"load_preset", ctypes.c_int, [
	("preset",		ctypes.POINTER(_GstPreset)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

save_preset = _rpythonic_function_(		"save_preset", ctypes.c_int, [
	("preset",		ctypes.POINTER(_GstPreset)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

rename_preset = _rpythonic_function_(		"rename_preset", ctypes.c_int, [
	("preset",		ctypes.POINTER(_GstPreset)),
	("old_name",		ctypes.POINTER(ctypes.c_char)),
	("new_name",		ctypes.POINTER(ctypes.c_char)),] )

delete_preset = _rpythonic_function_(		"delete_preset", ctypes.c_int, [
	("preset",		ctypes.POINTER(_GstPreset)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

set_meta = _rpythonic_function_(		"set_meta", ctypes.c_int, [
	("preset",		ctypes.POINTER(_GstPreset)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("tag",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

get_meta = _rpythonic_function_(		"get_meta", ctypes.c_int, [
	("preset",		ctypes.POINTER(_GstPreset)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("tag",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

gst_preset_get_type = _rpythonic_function_(		"gst_preset_get_type", ctypes.c_ulong, [] )

gst_preset_get_preset_names = _rpythonic_function_(		"gst_preset_get_preset_names", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("preset",		ctypes.POINTER(_GstPreset)),] )

gst_preset_get_property_names = _rpythonic_function_(		"gst_preset_get_property_names", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("preset",		ctypes.POINTER(_GstPreset)),] )

gst_preset_load_preset = _rpythonic_function_(		"gst_preset_load_preset", ctypes.c_int, [
	("preset",		ctypes.POINTER(_GstPreset)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gst_preset_save_preset = _rpythonic_function_(		"gst_preset_save_preset", ctypes.c_int, [
	("preset",		ctypes.POINTER(_GstPreset)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gst_preset_rename_preset = _rpythonic_function_(		"gst_preset_rename_preset", ctypes.c_int, [
	("preset",		ctypes.POINTER(_GstPreset)),
	("old_name",		ctypes.POINTER(ctypes.c_char)),
	("new_name",		ctypes.POINTER(ctypes.c_char)),] )

gst_preset_delete_preset = _rpythonic_function_(		"gst_preset_delete_preset", ctypes.c_int, [
	("preset",		ctypes.POINTER(_GstPreset)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gst_preset_set_meta = _rpythonic_function_(		"gst_preset_set_meta", ctypes.c_int, [
	("preset",		ctypes.POINTER(_GstPreset)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("tag",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

gst_preset_get_meta = _rpythonic_function_(		"gst_preset_get_meta", ctypes.c_int, [
	("preset",		ctypes.POINTER(_GstPreset)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("tag",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

plugin_added = _rpythonic_function_(		"plugin_added", ctypes.c_void_p, [
	("registry",		ctypes.POINTER(_GstRegistry)),
	("plugin",		ctypes.POINTER(_GstPlugin)),] )

feature_added = _rpythonic_function_(		"feature_added", ctypes.c_void_p, [
	("registry",		ctypes.POINTER(_GstRegistry)),
	("feature",		ctypes.POINTER(_GstPluginFeature)),] )

gst_registry_get_type = _rpythonic_function_(		"gst_registry_get_type", ctypes.c_ulong, [] )

gst_registry_get_default = _rpythonic_function_(		"gst_registry_get_default", ctypes.POINTER(_GstRegistry), [] )

gst_registry_scan_path = _rpythonic_function_(		"gst_registry_scan_path", ctypes.c_int, [
	("registry",		ctypes.POINTER(_GstRegistry)),
	("path",		ctypes.POINTER(ctypes.c_char)),] )

gst_registry_add_path = _rpythonic_function_(		"gst_registry_add_path", ctypes.c_void_p, [
	("registry",		ctypes.POINTER(_GstRegistry)),
	("path",		ctypes.POINTER(ctypes.c_char)),] )

gst_registry_get_path_list = _rpythonic_function_(		"gst_registry_get_path_list", ctypes.POINTER(_GList), [
	("registry",		ctypes.POINTER(_GstRegistry)),] )

gst_registry_add_plugin = _rpythonic_function_(		"gst_registry_add_plugin", ctypes.c_int, [
	("registry",		ctypes.POINTER(_GstRegistry)),
	("plugin",		ctypes.POINTER(_GstPlugin)),] )

gst_registry_remove_plugin = _rpythonic_function_(		"gst_registry_remove_plugin", ctypes.c_void_p, [
	("registry",		ctypes.POINTER(_GstRegistry)),
	("plugin",		ctypes.POINTER(_GstPlugin)),] )

gst_registry_add_feature = _rpythonic_function_(		"gst_registry_add_feature", ctypes.c_int, [
	("registry",		ctypes.POINTER(_GstRegistry)),
	("feature",		ctypes.POINTER(_GstPluginFeature)),] )

gst_registry_remove_feature = _rpythonic_function_(		"gst_registry_remove_feature", ctypes.c_void_p, [
	("registry",		ctypes.POINTER(_GstRegistry)),
	("feature",		ctypes.POINTER(_GstPluginFeature)),] )

gst_registry_get_plugin_list = _rpythonic_function_(		"gst_registry_get_plugin_list", ctypes.POINTER(_GList), [
	("registry",		ctypes.POINTER(_GstRegistry)),] )

gst_registry_plugin_filter = _rpythonic_function_(		"gst_registry_plugin_filter", ctypes.POINTER(_GList), [
	("registry",		ctypes.POINTER(_GstRegistry)),
	("filter",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstPlugin),ctypes.POINTER(ctypes.c_void_p),)),
	("first",		ctypes.c_int),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_registry_feature_filter = _rpythonic_function_(		"gst_registry_feature_filter", ctypes.POINTER(_GList), [
	("registry",		ctypes.POINTER(_GstRegistry)),
	("filter",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GstPluginFeature),ctypes.POINTER(ctypes.c_void_p),)),
	("first",		ctypes.c_int),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_registry_get_feature_list = _rpythonic_function_(		"gst_registry_get_feature_list", ctypes.POINTER(_GList), [
	("registry",		ctypes.POINTER(_GstRegistry)),
	("C_type",		ctypes.c_ulong),] )

gst_registry_get_feature_list_by_plugin = _rpythonic_function_(		"gst_registry_get_feature_list_by_plugin", ctypes.POINTER(_GList), [
	("registry",		ctypes.POINTER(_GstRegistry)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gst_registry_get_feature_list_cookie = _rpythonic_function_(		"gst_registry_get_feature_list_cookie", ctypes.c_uint, [
	("registry",		ctypes.POINTER(_GstRegistry)),] )

gst_registry_find_plugin = _rpythonic_function_(		"gst_registry_find_plugin", ctypes.POINTER(_GstPlugin), [
	("registry",		ctypes.POINTER(_GstRegistry)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gst_registry_find_feature = _rpythonic_function_(		"gst_registry_find_feature", ctypes.POINTER(_GstPluginFeature), [
	("registry",		ctypes.POINTER(_GstRegistry)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("C_type",		ctypes.c_ulong),] )

gst_registry_lookup = _rpythonic_function_(		"gst_registry_lookup", ctypes.POINTER(_GstPlugin), [
	("registry",		ctypes.POINTER(_GstRegistry)),
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

gst_registry_lookup_feature = _rpythonic_function_(		"gst_registry_lookup_feature", ctypes.POINTER(_GstPluginFeature), [
	("registry",		ctypes.POINTER(_GstRegistry)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gst_registry_xml_read_cache = _rpythonic_function_(		"gst_registry_xml_read_cache", ctypes.c_int, [
	("registry",		ctypes.POINTER(_GstRegistry)),
	("location",		ctypes.POINTER(ctypes.c_char)),] )

gst_registry_xml_write_cache = _rpythonic_function_(		"gst_registry_xml_write_cache", ctypes.c_int, [
	("registry",		ctypes.POINTER(_GstRegistry)),
	("location",		ctypes.POINTER(ctypes.c_char)),] )

gst_default_registry_check_feature_version = _rpythonic_function_(		"gst_default_registry_check_feature_version", ctypes.c_int, [
	("feature_name",		ctypes.POINTER(ctypes.c_char)),
	("min_major",		ctypes.c_uint),
	("min_minor",		ctypes.c_uint),
	("min_micro",		ctypes.c_uint),] )

gst_segment_get_type = _rpythonic_function_(		"gst_segment_get_type", ctypes.c_ulong, [] )

gst_segment_new = _rpythonic_function_(		"gst_segment_new", ctypes.POINTER(_GstSegment), [] )

gst_segment_copy = _rpythonic_function_(		"gst_segment_copy", ctypes.POINTER(_GstSegment), [
	("segment",		ctypes.POINTER(_GstSegment)),] )

gst_segment_free = _rpythonic_function_(		"gst_segment_free", ctypes.c_void_p, [
	("segment",		ctypes.POINTER(_GstSegment)),] )

gst_segment_init = _rpythonic_function_(		"gst_segment_init", ctypes.c_void_p, [
	("segment",		ctypes.POINTER(_GstSegment)),
	("format",		ctypes.c_int),] )

gst_segment_set_duration = _rpythonic_function_(		"gst_segment_set_duration", ctypes.c_void_p, [
	("segment",		ctypes.POINTER(_GstSegment)),
	("format",		ctypes.c_int),
	("duration",		ctypes.c_long),] )

gst_segment_set_last_stop = _rpythonic_function_(		"gst_segment_set_last_stop", ctypes.c_void_p, [
	("segment",		ctypes.POINTER(_GstSegment)),
	("format",		ctypes.c_int),
	("position",		ctypes.c_long),] )

gst_segment_set_seek = _rpythonic_function_(		"gst_segment_set_seek", ctypes.c_void_p, [
	("segment",		ctypes.POINTER(_GstSegment)),
	("rate",		ctypes.c_double),
	("format",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("start_type",		ctypes.c_int),
	("start",		ctypes.c_long),
	("stop_type",		ctypes.c_int),
	("stop",		ctypes.c_long),
	("update",		ctypes.POINTER(ctypes.c_int)),] )

gst_segment_set_newsegment = _rpythonic_function_(		"gst_segment_set_newsegment", ctypes.c_void_p, [
	("segment",		ctypes.POINTER(_GstSegment)),
	("update",		ctypes.c_int),
	("rate",		ctypes.c_double),
	("format",		ctypes.c_int),
	("start",		ctypes.c_long),
	("stop",		ctypes.c_long),
	("time",		ctypes.c_long),] )

gst_segment_set_newsegment_full = _rpythonic_function_(		"gst_segment_set_newsegment_full", ctypes.c_void_p, [
	("segment",		ctypes.POINTER(_GstSegment)),
	("update",		ctypes.c_int),
	("rate",		ctypes.c_double),
	("applied_rate",		ctypes.c_double),
	("format",		ctypes.c_int),
	("start",		ctypes.c_long),
	("stop",		ctypes.c_long),
	("time",		ctypes.c_long),] )

gst_segment_to_stream_time = _rpythonic_function_(		"gst_segment_to_stream_time", ctypes.c_long, [
	("segment",		ctypes.POINTER(_GstSegment)),
	("format",		ctypes.c_int),
	("position",		ctypes.c_long),] )

gst_segment_to_running_time = _rpythonic_function_(		"gst_segment_to_running_time", ctypes.c_long, [
	("segment",		ctypes.POINTER(_GstSegment)),
	("format",		ctypes.c_int),
	("position",		ctypes.c_long),] )

gst_segment_to_position = _rpythonic_function_(		"gst_segment_to_position", ctypes.c_long, [
	("segment",		ctypes.POINTER(_GstSegment)),
	("format",		ctypes.c_int),
	("running_time",		ctypes.c_long),] )

gst_segment_clip = _rpythonic_function_(		"gst_segment_clip", ctypes.c_int, [
	("segment",		ctypes.POINTER(_GstSegment)),
	("format",		ctypes.c_int),
	("start",		ctypes.c_long),
	("stop",		ctypes.c_long),
	("clip_start",		ctypes.POINTER(ctypes.c_long)),
	("clip_stop",		ctypes.POINTER(ctypes.c_long)),] )

gst_segment_set_running_time = _rpythonic_function_(		"gst_segment_set_running_time", ctypes.c_int, [
	("segment",		ctypes.POINTER(_GstSegment)),
	("format",		ctypes.c_int),
	("running_time",		ctypes.c_long),] )

gst_system_clock_get_type = _rpythonic_function_(		"gst_system_clock_get_type", ctypes.c_ulong, [] )

gst_system_clock_obtain = _rpythonic_function_(		"gst_system_clock_obtain", ctypes.POINTER(_GstClock), [] )

gst_tag_setter_get_type = _rpythonic_function_(		"gst_tag_setter_get_type", ctypes.c_ulong, [] )

gst_tag_setter_reset_tags = _rpythonic_function_(		"gst_tag_setter_reset_tags", ctypes.c_void_p, [
	("setter",		ctypes.POINTER(_GstTagSetter)),] )

gst_tag_setter_merge_tags = _rpythonic_function_(		"gst_tag_setter_merge_tags", ctypes.c_void_p, [
	("setter",		ctypes.POINTER(_GstTagSetter)),
	("C_list",		ctypes.POINTER(_GstStructure)),
	("mode",		ctypes.c_int),] )

gst_tag_setter_add_tags = _rpythonic_function_(		"gst_tag_setter_add_tags", ctypes.c_void_p, [
	("setter",		ctypes.POINTER(_GstTagSetter)),
	("mode",		ctypes.c_int),
	("tag",		ctypes.POINTER(ctypes.c_char)),] )

gst_tag_setter_add_tag_values = _rpythonic_function_(		"gst_tag_setter_add_tag_values", ctypes.c_void_p, [
	("setter",		ctypes.POINTER(_GstTagSetter)),
	("mode",		ctypes.c_int),
	("tag",		ctypes.POINTER(ctypes.c_char)),] )

gst_tag_setter_add_tag_valist = _rpythonic_function_(		"gst_tag_setter_add_tag_valist", ctypes.c_void_p, [
	("setter",		ctypes.POINTER(_GstTagSetter)),
	("mode",		ctypes.c_int),
	("tag",		ctypes.POINTER(ctypes.c_char)),
	("var_args",		ctypes.c_char),] )

gst_tag_setter_add_tag_valist_values = _rpythonic_function_(		"gst_tag_setter_add_tag_valist_values", ctypes.c_void_p, [
	("setter",		ctypes.POINTER(_GstTagSetter)),
	("mode",		ctypes.c_int),
	("tag",		ctypes.POINTER(ctypes.c_char)),
	("var_args",		ctypes.c_char),] )

gst_tag_setter_add_tag_value = _rpythonic_function_(		"gst_tag_setter_add_tag_value", ctypes.c_void_p, [
	("setter",		ctypes.POINTER(_GstTagSetter)),
	("mode",		ctypes.c_int),
	("tag",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(_GValue)),] )

gst_tag_setter_get_tag_list = _rpythonic_function_(		"gst_tag_setter_get_tag_list", ctypes.POINTER(_GstStructure), [
	("setter",		ctypes.POINTER(_GstTagSetter)),] )

gst_tag_setter_set_tag_merge_mode = _rpythonic_function_(		"gst_tag_setter_set_tag_merge_mode", ctypes.c_void_p, [
	("setter",		ctypes.POINTER(_GstTagSetter)),
	("mode",		ctypes.c_int),] )

gst_tag_setter_get_tag_merge_mode = _rpythonic_function_(		"gst_tag_setter_get_tag_merge_mode", ctypes.c_int, [
	("setter",		ctypes.POINTER(_GstTagSetter)),] )

gst_trace_new = _rpythonic_function_(		"gst_trace_new", ctypes.POINTER(_GstTrace), [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_int),] )

gst_trace_destroy = _rpythonic_function_(		"gst_trace_destroy", ctypes.c_void_p, [
	("trace",		ctypes.POINTER(_GstTrace)),] )

gst_trace_flush = _rpythonic_function_(		"gst_trace_flush", ctypes.c_void_p, [
	("trace",		ctypes.POINTER(_GstTrace)),] )

gst_trace_text_flush = _rpythonic_function_(		"gst_trace_text_flush", ctypes.c_void_p, [
	("trace",		ctypes.POINTER(_GstTrace)),] )

gst_trace_set_default = _rpythonic_function_(		"gst_trace_set_default", ctypes.c_void_p, [
	("trace",		ctypes.POINTER(_GstTrace)),] )

_gst_trace_add_entry = _rpythonic_function_(		"_gst_trace_add_entry", ctypes.c_void_p, [
	("trace",		ctypes.POINTER(_GstTrace)),
	("seq",		ctypes.c_uint),
	("data",		ctypes.c_uint),
	("msg",		ctypes.POINTER(ctypes.c_char)),] )

gst_trace_read_tsc = _rpythonic_function_(		"gst_trace_read_tsc", ctypes.c_void_p, [
	("dst",		ctypes.POINTER(ctypes.c_long)),] )

gst_alloc_trace_available = _rpythonic_function_(		"gst_alloc_trace_available", ctypes.c_int, [] )

gst_alloc_trace_list = _rpythonic_function_(		"gst_alloc_trace_list", ctypes.POINTER(_GList), [] )

_gst_alloc_trace_register = _rpythonic_function_(		"_gst_alloc_trace_register", ctypes.POINTER(_GstAllocTrace), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gst_alloc_trace_live_all = _rpythonic_function_(		"gst_alloc_trace_live_all", ctypes.c_int, [] )

gst_alloc_trace_print_all = _rpythonic_function_(		"gst_alloc_trace_print_all", ctypes.c_void_p, [] )

gst_alloc_trace_print_live = _rpythonic_function_(		"gst_alloc_trace_print_live", ctypes.c_void_p, [] )

gst_alloc_trace_set_flags_all = _rpythonic_function_(		"gst_alloc_trace_set_flags_all", ctypes.c_void_p, [
	("flags",		ctypes.c_int),] )

gst_alloc_trace_get = _rpythonic_function_(		"gst_alloc_trace_get", ctypes.POINTER(_GstAllocTrace), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gst_alloc_trace_print = _rpythonic_function_(		"gst_alloc_trace_print", ctypes.c_void_p, [
	("trace",		ctypes.POINTER(_GstAllocTrace)),] )

gst_alloc_trace_set_flags = _rpythonic_function_(		"gst_alloc_trace_set_flags", ctypes.c_void_p, [
	("trace",		ctypes.POINTER(_GstAllocTrace)),
	("flags",		ctypes.c_int),] )

GstTypeFindFunction = _rpythonic_function_(		"GstTypeFindFunction", ctypes.c_void_p, [
	("find",		ctypes.POINTER(_GstTypeFind)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

peek = _rpythonic_function_(		"peek", ctypes.POINTER(ctypes.c_ubyte), [
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("offset",		ctypes.c_long),
	("size",		ctypes.c_uint),] )

suggest = _rpythonic_function_(		"suggest", ctypes.c_void_p, [
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("probability",		ctypes.c_uint),
	("caps",		ctypes.POINTER(_GstCaps)),] )

get_length = _rpythonic_function_(		"get_length", ctypes.c_ulong, [("data",		ctypes.c_void_p)] )

gst_type_find_get_type = _rpythonic_function_(		"gst_type_find_get_type", ctypes.c_ulong, [] )

gst_type_find_peek = _rpythonic_function_(		"gst_type_find_peek", ctypes.POINTER(ctypes.c_ubyte), [
	("find",		ctypes.POINTER(_GstTypeFind)),
	("offset",		ctypes.c_long),
	("size",		ctypes.c_uint),] )

gst_type_find_suggest = _rpythonic_function_(		"gst_type_find_suggest", ctypes.c_void_p, [
	("find",		ctypes.POINTER(_GstTypeFind)),
	("probability",		ctypes.c_uint),
	("caps",		ctypes.POINTER(_GstCaps)),] )

gst_type_find_suggest_simple = _rpythonic_function_(		"gst_type_find_suggest_simple", ctypes.c_void_p, [
	("find",		ctypes.POINTER(_GstTypeFind)),
	("probability",		ctypes.c_uint),
	("media_type",		ctypes.POINTER(ctypes.c_char)),
	("fieldname",		ctypes.POINTER(ctypes.c_char)),] )

gst_type_find_get_length = _rpythonic_function_(		"gst_type_find_get_length", ctypes.c_ulong, [
	("find",		ctypes.POINTER(_GstTypeFind)),] )

gst_type_find_register = _rpythonic_function_(		"gst_type_find_register", ctypes.c_int, [
	("plugin",		ctypes.POINTER(_GstPlugin)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("rank",		ctypes.c_uint),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GstTypeFind),ctypes.POINTER(ctypes.c_void_p),)),
	("extensions",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("possible_caps",		ctypes.POINTER(_GstCaps)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("data_notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

gst_type_find_factory_get_type = _rpythonic_function_(		"gst_type_find_factory_get_type", ctypes.c_ulong, [] )

gst_type_find_factory_get_list = _rpythonic_function_(		"gst_type_find_factory_get_list", ctypes.POINTER(_GList), [] )

gst_type_find_factory_get_extensions = _rpythonic_function_(		"gst_type_find_factory_get_extensions", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("factory",		ctypes.POINTER(_GstTypeFindFactory)),] )

gst_type_find_factory_get_caps = _rpythonic_function_(		"gst_type_find_factory_get_caps", ctypes.POINTER(_GstCaps), [
	("factory",		ctypes.POINTER(_GstTypeFindFactory)),] )

gst_type_find_factory_call_function = _rpythonic_function_(		"gst_type_find_factory_call_function", ctypes.c_void_p, [
	("factory",		ctypes.POINTER(_GstTypeFindFactory)),
	("find",		ctypes.POINTER(_GstTypeFind)),] )

new_uri = _rpythonic_function_(		"new_uri", ctypes.c_void_p, [
	("handler",		ctypes.POINTER(_GstURIHandler)),
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

get_type = _rpythonic_function_(		"get_type", ctypes.c_int, [] )

get_protocols = _rpythonic_function_(		"get_protocols", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [] )

get_uri = _rpythonic_function_(		"get_uri", ctypes.POINTER(ctypes.c_char), [
	("handler",		ctypes.POINTER(_GstURIHandler)),] )

set_uri = _rpythonic_function_(		"set_uri", ctypes.c_int, [
	("handler",		ctypes.POINTER(_GstURIHandler)),
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

get_type_full = _rpythonic_function_(		"get_type_full", ctypes.c_int, [
	("C_type",		ctypes.c_ulong),] )

get_protocols_full = _rpythonic_function_(		"get_protocols_full", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("C_type",		ctypes.c_ulong),] )

gst_uri_protocol_is_valid = _rpythonic_function_(		"gst_uri_protocol_is_valid", ctypes.c_int, [
	("protocol",		ctypes.POINTER(ctypes.c_char)),] )

gst_uri_protocol_is_supported = _rpythonic_function_(		"gst_uri_protocol_is_supported", ctypes.c_int, [
	("C_type",		ctypes.c_int),
	("protocol",		ctypes.POINTER(ctypes.c_char)),] )

gst_uri_is_valid = _rpythonic_function_(		"gst_uri_is_valid", ctypes.c_int, [
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

gst_uri_get_protocol = _rpythonic_function_(		"gst_uri_get_protocol", ctypes.POINTER(ctypes.c_char), [
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

gst_uri_has_protocol = _rpythonic_function_(		"gst_uri_has_protocol", ctypes.c_int, [
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("protocol",		ctypes.POINTER(ctypes.c_char)),] )

gst_uri_get_location = _rpythonic_function_(		"gst_uri_get_location", ctypes.POINTER(ctypes.c_char), [
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

gst_uri_construct = _rpythonic_function_(		"gst_uri_construct", ctypes.POINTER(ctypes.c_char), [
	("protocol",		ctypes.POINTER(ctypes.c_char)),
	("location",		ctypes.POINTER(ctypes.c_char)),] )

gst_filename_to_uri = _rpythonic_function_(		"gst_filename_to_uri", ctypes.POINTER(ctypes.c_char), [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gst_element_make_from_uri = _rpythonic_function_(		"gst_element_make_from_uri", ctypes.POINTER(_GstElement), [
	("C_type",		ctypes.c_int),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("elementname",		ctypes.POINTER(ctypes.c_char)),] )

gst_uri_handler_get_type = _rpythonic_function_(		"gst_uri_handler_get_type", ctypes.c_ulong, [] )

gst_uri_handler_get_uri_type = _rpythonic_function_(		"gst_uri_handler_get_uri_type", ctypes.c_uint, [
	("handler",		ctypes.POINTER(_GstURIHandler)),] )

gst_uri_handler_get_protocols = _rpythonic_function_(		"gst_uri_handler_get_protocols", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("handler",		ctypes.POINTER(_GstURIHandler)),] )

gst_uri_handler_get_uri = _rpythonic_function_(		"gst_uri_handler_get_uri", ctypes.POINTER(ctypes.c_char), [
	("handler",		ctypes.POINTER(_GstURIHandler)),] )

gst_uri_handler_set_uri = _rpythonic_function_(		"gst_uri_handler_set_uri", ctypes.c_int, [
	("handler",		ctypes.POINTER(_GstURIHandler)),
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

gst_uri_handler_new_uri = _rpythonic_function_(		"gst_uri_handler_new_uri", ctypes.c_void_p, [
	("handler",		ctypes.POINTER(_GstURIHandler)),
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

gst_parse_error_quark = _rpythonic_function_(		"gst_parse_error_quark", ctypes.c_uint, [] )

gst_parse_context_get_type = _rpythonic_function_(		"gst_parse_context_get_type", ctypes.c_ulong, [] )

gst_parse_context_new = _rpythonic_function_(		"gst_parse_context_new", ctypes.POINTER(_GstParseContext), [] )

gst_parse_context_get_missing_elements = _rpythonic_function_(		"gst_parse_context_get_missing_elements", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("context",		ctypes.POINTER(_GstParseContext)),] )

gst_parse_context_free = _rpythonic_function_(		"gst_parse_context_free", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GstParseContext)),] )

gst_parse_launch = _rpythonic_function_(		"gst_parse_launch", ctypes.POINTER(_GstElement), [
	("pipeline_description",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gst_parse_launchv = _rpythonic_function_(		"gst_parse_launchv", ctypes.POINTER(_GstElement), [
	("argv",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gst_parse_launch_full = _rpythonic_function_(		"gst_parse_launch_full", ctypes.POINTER(_GstElement), [
	("pipeline_description",		ctypes.POINTER(ctypes.c_char)),
	("context",		ctypes.POINTER(_GstParseContext)),
	("flags",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gst_parse_launchv_full = _rpythonic_function_(		"gst_parse_launchv_full", ctypes.POINTER(_GstElement), [
	("argv",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("context",		ctypes.POINTER(_GstParseContext)),
	("flags",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gst_util_set_value_from_string = _rpythonic_function_(		"gst_util_set_value_from_string", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("value_str",		ctypes.POINTER(ctypes.c_char)),] )

gst_util_set_object_arg = _rpythonic_function_(		"gst_util_set_object_arg", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

gst_util_dump_mem = _rpythonic_function_(		"gst_util_dump_mem", ctypes.c_void_p, [
	("mem",		ctypes.POINTER(ctypes.c_ubyte)),
	("size",		ctypes.c_uint),] )

gst_util_gdouble_to_guint64 = _rpythonic_function_(		"gst_util_gdouble_to_guint64", ctypes.c_ulong, [
	("value",		ctypes.c_double),] )

gst_util_guint64_to_gdouble = _rpythonic_function_(		"gst_util_guint64_to_gdouble", ctypes.c_double, [
	("value",		ctypes.c_ulong),] )

gst_util_uint64_scale = _rpythonic_function_(		"gst_util_uint64_scale", ctypes.c_ulong, [
	("val",		ctypes.c_ulong),
	("num",		ctypes.c_ulong),
	("denom",		ctypes.c_ulong),] )

gst_util_uint64_scale_round = _rpythonic_function_(		"gst_util_uint64_scale_round", ctypes.c_ulong, [
	("val",		ctypes.c_ulong),
	("num",		ctypes.c_ulong),
	("denom",		ctypes.c_ulong),] )

gst_util_uint64_scale_ceil = _rpythonic_function_(		"gst_util_uint64_scale_ceil", ctypes.c_ulong, [
	("val",		ctypes.c_ulong),
	("num",		ctypes.c_ulong),
	("denom",		ctypes.c_ulong),] )

gst_util_uint64_scale_int = _rpythonic_function_(		"gst_util_uint64_scale_int", ctypes.c_ulong, [
	("val",		ctypes.c_ulong),
	("num",		ctypes.c_int),
	("denom",		ctypes.c_int),] )

gst_util_uint64_scale_int_round = _rpythonic_function_(		"gst_util_uint64_scale_int_round", ctypes.c_ulong, [
	("val",		ctypes.c_ulong),
	("num",		ctypes.c_int),
	("denom",		ctypes.c_int),] )

gst_util_uint64_scale_int_ceil = _rpythonic_function_(		"gst_util_uint64_scale_int_ceil", ctypes.c_ulong, [
	("val",		ctypes.c_ulong),
	("num",		ctypes.c_int),
	("denom",		ctypes.c_int),] )

gst_util_seqnum_next = _rpythonic_function_(		"gst_util_seqnum_next", ctypes.c_uint, [] )

gst_util_seqnum_compare = _rpythonic_function_(		"gst_util_seqnum_compare", ctypes.c_int, [
	("s1",		ctypes.c_uint),
	("s2",		ctypes.c_uint),] )

gst_print_pad_caps = _rpythonic_function_(		"gst_print_pad_caps", ctypes.c_void_p, [
	("buf",		ctypes.POINTER(_GString)),
	("indent",		ctypes.c_int),
	("pad",		ctypes.POINTER(_GstPad)),] )

gst_print_element_args = _rpythonic_function_(		"gst_print_element_args", ctypes.c_void_p, [
	("buf",		ctypes.POINTER(_GString)),
	("indent",		ctypes.c_int),
	("element",		ctypes.POINTER(_GstElement)),] )

gst_type_register_static_full = _rpythonic_function_(		"gst_type_register_static_full", ctypes.c_ulong, [
	("parent_type",		ctypes.c_ulong),
	("type_name",		ctypes.POINTER(ctypes.c_char)),
	("class_size",		ctypes.c_uint),
	("base_init",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("base_finalize",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("class_init",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("class_finalize",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("class_data",		ctypes.POINTER(ctypes.c_void_p)),
	("instance_size",		ctypes.c_uint),
	("n_preallocs",		ctypes.c_ushort),
	("instance_init",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GTypeInstance),ctypes.POINTER(ctypes.c_void_p),)),
	("value_table",		ctypes.POINTER(_GTypeValueTable)),
	("flags",		ctypes.c_int),] )

gst_object_default_error = _rpythonic_function_(		"gst_object_default_error", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GstObject)),
	("error",		ctypes.POINTER(_GError)),
	("debug",		ctypes.POINTER(ctypes.c_char)),] )

gst_element_create_all_pads = _rpythonic_function_(		"gst_element_create_all_pads", ctypes.c_void_p, [
	("element",		ctypes.POINTER(_GstElement)),] )

gst_element_get_compatible_pad = _rpythonic_function_(		"gst_element_get_compatible_pad", ctypes.POINTER(_GstPad), [
	("element",		ctypes.POINTER(_GstElement)),
	("pad",		ctypes.POINTER(_GstPad)),
	("caps",		ctypes.POINTER(_GstCaps)),] )

gst_element_get_compatible_pad_template = _rpythonic_function_(		"gst_element_get_compatible_pad_template", ctypes.POINTER(_GstPadTemplate), [
	("element",		ctypes.POINTER(_GstElement)),
	("compattempl",		ctypes.POINTER(_GstPadTemplate)),] )

gst_element_state_get_name = _rpythonic_function_(		"gst_element_state_get_name", ctypes.POINTER(ctypes.c_char), [
	("state",		ctypes.c_int),] )

gst_element_state_change_return_get_name = _rpythonic_function_(		"gst_element_state_change_return_get_name", ctypes.POINTER(ctypes.c_char), [
	("state_ret",		ctypes.c_int),] )

gst_element_link = _rpythonic_function_(		"gst_element_link", ctypes.c_int, [
	("src",		ctypes.POINTER(_GstElement)),
	("dest",		ctypes.POINTER(_GstElement)),] )

gst_element_link_many = _rpythonic_function_(		"gst_element_link_many", ctypes.c_int, [
	("element_1",		ctypes.POINTER(_GstElement)),
	("element_2",		ctypes.POINTER(_GstElement)),] )

gst_element_link_filtered = _rpythonic_function_(		"gst_element_link_filtered", ctypes.c_int, [
	("src",		ctypes.POINTER(_GstElement)),
	("dest",		ctypes.POINTER(_GstElement)),
	("filter",		ctypes.POINTER(_GstCaps)),] )

gst_element_unlink = _rpythonic_function_(		"gst_element_unlink", ctypes.c_void_p, [
	("src",		ctypes.POINTER(_GstElement)),
	("dest",		ctypes.POINTER(_GstElement)),] )

gst_element_unlink_many = _rpythonic_function_(		"gst_element_unlink_many", ctypes.c_void_p, [
	("element_1",		ctypes.POINTER(_GstElement)),
	("element_2",		ctypes.POINTER(_GstElement)),] )

gst_element_link_pads = _rpythonic_function_(		"gst_element_link_pads", ctypes.c_int, [
	("src",		ctypes.POINTER(_GstElement)),
	("srcpadname",		ctypes.POINTER(ctypes.c_char)),
	("dest",		ctypes.POINTER(_GstElement)),
	("destpadname",		ctypes.POINTER(ctypes.c_char)),] )

gst_element_link_pads_full = _rpythonic_function_(		"gst_element_link_pads_full", ctypes.c_int, [
	("src",		ctypes.POINTER(_GstElement)),
	("srcpadname",		ctypes.POINTER(ctypes.c_char)),
	("dest",		ctypes.POINTER(_GstElement)),
	("destpadname",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),] )

gst_element_unlink_pads = _rpythonic_function_(		"gst_element_unlink_pads", ctypes.c_void_p, [
	("src",		ctypes.POINTER(_GstElement)),
	("srcpadname",		ctypes.POINTER(ctypes.c_char)),
	("dest",		ctypes.POINTER(_GstElement)),
	("destpadname",		ctypes.POINTER(ctypes.c_char)),] )

gst_element_link_pads_filtered = _rpythonic_function_(		"gst_element_link_pads_filtered", ctypes.c_int, [
	("src",		ctypes.POINTER(_GstElement)),
	("srcpadname",		ctypes.POINTER(ctypes.c_char)),
	("dest",		ctypes.POINTER(_GstElement)),
	("destpadname",		ctypes.POINTER(ctypes.c_char)),
	("filter",		ctypes.POINTER(_GstCaps)),] )

gst_element_seek_simple = _rpythonic_function_(		"gst_element_seek_simple", ctypes.c_int, [
	("element",		ctypes.POINTER(_GstElement)),
	("format",		ctypes.c_int),
	("seek_flags",		ctypes.c_int),
	("seek_pos",		ctypes.c_long),] )

gst_element_factory_can_src_caps = _rpythonic_function_(		"gst_element_factory_can_src_caps", ctypes.c_int, [
	("factory",		ctypes.POINTER(_GstElementFactory)),
	("caps",		ctypes.POINTER(_GstCaps)),] )

gst_element_factory_can_sink_caps = _rpythonic_function_(		"gst_element_factory_can_sink_caps", ctypes.c_int, [
	("factory",		ctypes.POINTER(_GstElementFactory)),
	("caps",		ctypes.POINTER(_GstCaps)),] )

gst_element_factory_can_sink_all_caps = _rpythonic_function_(		"gst_element_factory_can_sink_all_caps", ctypes.c_int, [
	("factory",		ctypes.POINTER(_GstElementFactory)),
	("caps",		ctypes.POINTER(_GstCaps)),] )

gst_element_factory_can_src_all_caps = _rpythonic_function_(		"gst_element_factory_can_src_all_caps", ctypes.c_int, [
	("factory",		ctypes.POINTER(_GstElementFactory)),
	("caps",		ctypes.POINTER(_GstCaps)),] )

gst_element_factory_can_sink_any_caps = _rpythonic_function_(		"gst_element_factory_can_sink_any_caps", ctypes.c_int, [
	("factory",		ctypes.POINTER(_GstElementFactory)),
	("caps",		ctypes.POINTER(_GstCaps)),] )

gst_element_factory_can_src_any_caps = _rpythonic_function_(		"gst_element_factory_can_src_any_caps", ctypes.c_int, [
	("factory",		ctypes.POINTER(_GstElementFactory)),
	("caps",		ctypes.POINTER(_GstCaps)),] )

gst_element_query_position = _rpythonic_function_(		"gst_element_query_position", ctypes.c_int, [
	("element",		ctypes.POINTER(_GstElement)),
	("format",		ctypes.POINTER(ctypes.c_int)),
	("cur",		ctypes.POINTER(ctypes.c_long)),] )

gst_element_query_duration = _rpythonic_function_(		"gst_element_query_duration", ctypes.c_int, [
	("element",		ctypes.POINTER(_GstElement)),
	("format",		ctypes.POINTER(ctypes.c_int)),
	("duration",		ctypes.POINTER(ctypes.c_long)),] )

gst_element_query_convert = _rpythonic_function_(		"gst_element_query_convert", ctypes.c_int, [
	("element",		ctypes.POINTER(_GstElement)),
	("src_format",		ctypes.c_int),
	("src_val",		ctypes.c_long),
	("dest_format",		ctypes.POINTER(ctypes.c_int)),
	("dest_val",		ctypes.POINTER(ctypes.c_long)),] )

gst_element_class_install_std_props = _rpythonic_function_(		"gst_element_class_install_std_props", ctypes.c_void_p, [
	("klass",		ctypes.POINTER(_GstElementClass)),
	("first_name",		ctypes.POINTER(ctypes.c_char)),] )

gst_pad_use_fixed_caps = _rpythonic_function_(		"gst_pad_use_fixed_caps", ctypes.c_void_p, [
	("pad",		ctypes.POINTER(_GstPad)),] )

gst_pad_get_fixed_caps_func = _rpythonic_function_(		"gst_pad_get_fixed_caps_func", ctypes.POINTER(_GstCaps), [
	("pad",		ctypes.POINTER(_GstPad)),] )

gst_pad_proxy_getcaps = _rpythonic_function_(		"gst_pad_proxy_getcaps", ctypes.POINTER(_GstCaps), [
	("pad",		ctypes.POINTER(_GstPad)),] )

gst_pad_proxy_setcaps = _rpythonic_function_(		"gst_pad_proxy_setcaps", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),
	("caps",		ctypes.POINTER(_GstCaps)),] )

gst_pad_get_parent_element = _rpythonic_function_(		"gst_pad_get_parent_element", ctypes.POINTER(_GstElement), [
	("pad",		ctypes.POINTER(_GstPad)),] )

gst_pad_query_position = _rpythonic_function_(		"gst_pad_query_position", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),
	("format",		ctypes.POINTER(ctypes.c_int)),
	("cur",		ctypes.POINTER(ctypes.c_long)),] )

gst_pad_query_duration = _rpythonic_function_(		"gst_pad_query_duration", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),
	("format",		ctypes.POINTER(ctypes.c_int)),
	("duration",		ctypes.POINTER(ctypes.c_long)),] )

gst_pad_query_convert = _rpythonic_function_(		"gst_pad_query_convert", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),
	("src_format",		ctypes.c_int),
	("src_val",		ctypes.c_long),
	("dest_format",		ctypes.POINTER(ctypes.c_int)),
	("dest_val",		ctypes.POINTER(ctypes.c_long)),] )

gst_pad_query_peer_position = _rpythonic_function_(		"gst_pad_query_peer_position", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),
	("format",		ctypes.POINTER(ctypes.c_int)),
	("cur",		ctypes.POINTER(ctypes.c_long)),] )

gst_pad_query_peer_duration = _rpythonic_function_(		"gst_pad_query_peer_duration", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),
	("format",		ctypes.POINTER(ctypes.c_int)),
	("duration",		ctypes.POINTER(ctypes.c_long)),] )

gst_pad_query_peer_convert = _rpythonic_function_(		"gst_pad_query_peer_convert", ctypes.c_int, [
	("pad",		ctypes.POINTER(_GstPad)),
	("src_format",		ctypes.c_int),
	("src_val",		ctypes.c_long),
	("dest_format",		ctypes.POINTER(ctypes.c_int)),
	("dest_val",		ctypes.POINTER(ctypes.c_long)),] )

gst_bin_add_many = _rpythonic_function_(		"gst_bin_add_many", ctypes.c_void_p, [
	("bin",		ctypes.POINTER(_GstBin)),
	("element_1",		ctypes.POINTER(_GstElement)),] )

gst_bin_remove_many = _rpythonic_function_(		"gst_bin_remove_many", ctypes.c_void_p, [
	("bin",		ctypes.POINTER(_GstBin)),
	("element_1",		ctypes.POINTER(_GstElement)),] )

gst_bin_find_unlinked_pad = _rpythonic_function_(		"gst_bin_find_unlinked_pad", ctypes.POINTER(_GstPad), [
	("bin",		ctypes.POINTER(_GstBin)),
	("direction",		ctypes.c_int),] )

gst_bin_find_unconnected_pad = _rpythonic_function_(		"gst_bin_find_unconnected_pad", ctypes.POINTER(_GstPad), [
	("bin",		ctypes.POINTER(_GstBin)),
	("direction",		ctypes.c_int),] )

gst_buffer_merge = _rpythonic_function_(		"gst_buffer_merge", ctypes.POINTER(_GstBuffer), [
	("buf1",		ctypes.POINTER(_GstBuffer)),
	("buf2",		ctypes.POINTER(_GstBuffer)),] )

gst_buffer_join = _rpythonic_function_(		"gst_buffer_join", ctypes.POINTER(_GstBuffer), [
	("buf1",		ctypes.POINTER(_GstBuffer)),
	("buf2",		ctypes.POINTER(_GstBuffer)),] )

gst_buffer_stamp = _rpythonic_function_(		"gst_buffer_stamp", ctypes.c_void_p, [
	("dest",		ctypes.POINTER(_GstBuffer)),
	("src",		ctypes.POINTER(_GstBuffer)),] )

gst_atomic_int_set = _rpythonic_function_(		"gst_atomic_int_set", ctypes.c_void_p, [
	("atomic_int",		ctypes.POINTER(ctypes.c_int)),
	("value",		ctypes.c_int),] )

gst_pad_add_data_probe = _rpythonic_function_(		"gst_pad_add_data_probe", ctypes.c_ulong, [
	("pad",		ctypes.POINTER(_GstPad)),
	("handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_pad_add_data_probe_full = _rpythonic_function_(		"gst_pad_add_data_probe_full", ctypes.c_ulong, [
	("pad",		ctypes.POINTER(_GstPad)),
	("handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

gst_pad_remove_data_probe = _rpythonic_function_(		"gst_pad_remove_data_probe", ctypes.c_void_p, [
	("pad",		ctypes.POINTER(_GstPad)),
	("handler_id",		ctypes.c_uint),] )

gst_pad_add_event_probe = _rpythonic_function_(		"gst_pad_add_event_probe", ctypes.c_ulong, [
	("pad",		ctypes.POINTER(_GstPad)),
	("handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_pad_add_event_probe_full = _rpythonic_function_(		"gst_pad_add_event_probe_full", ctypes.c_ulong, [
	("pad",		ctypes.POINTER(_GstPad)),
	("handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

gst_pad_remove_event_probe = _rpythonic_function_(		"gst_pad_remove_event_probe", ctypes.c_void_p, [
	("pad",		ctypes.POINTER(_GstPad)),
	("handler_id",		ctypes.c_uint),] )

gst_pad_add_buffer_probe = _rpythonic_function_(		"gst_pad_add_buffer_probe", ctypes.c_ulong, [
	("pad",		ctypes.POINTER(_GstPad)),
	("handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_pad_add_buffer_probe_full = _rpythonic_function_(		"gst_pad_add_buffer_probe_full", ctypes.c_ulong, [
	("pad",		ctypes.POINTER(_GstPad)),
	("handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

gst_pad_remove_buffer_probe = _rpythonic_function_(		"gst_pad_remove_buffer_probe", ctypes.c_void_p, [
	("pad",		ctypes.POINTER(_GstPad)),
	("handler_id",		ctypes.c_uint),] )

gst_element_found_tags_for_pad = _rpythonic_function_(		"gst_element_found_tags_for_pad", ctypes.c_void_p, [
	("element",		ctypes.POINTER(_GstElement)),
	("pad",		ctypes.POINTER(_GstPad)),
	("C_list",		ctypes.POINTER(_GstStructure)),] )

gst_element_found_tags = _rpythonic_function_(		"gst_element_found_tags", ctypes.c_void_p, [
	("element",		ctypes.POINTER(_GstElement)),
	("C_list",		ctypes.POINTER(_GstStructure)),] )

gst_parse_bin_from_description = _rpythonic_function_(		"gst_parse_bin_from_description", ctypes.POINTER(_GstElement), [
	("bin_description",		ctypes.POINTER(ctypes.c_char)),
	("ghost_unlinked_pads",		ctypes.c_int),
	("err",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gst_parse_bin_from_description_full = _rpythonic_function_(		"gst_parse_bin_from_description_full", ctypes.POINTER(_GstElement), [
	("bin_description",		ctypes.POINTER(ctypes.c_char)),
	("ghost_unlinked_pads",		ctypes.c_int),
	("context",		ctypes.POINTER(_GstParseContext)),
	("flags",		ctypes.c_int),
	("err",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gst_util_get_timestamp = _rpythonic_function_(		"gst_util_get_timestamp", ctypes.c_ulong, [] )

gst_util_array_binary_search = _rpythonic_function_(		"gst_util_array_binary_search", ctypes.POINTER(ctypes.c_void_p), [
	("array",		ctypes.POINTER(ctypes.c_void_p)),
	("num_elements",		ctypes.c_uint),
	("element_size",		ctypes.c_ulong),
	("search_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("mode",		ctypes.c_int),
	("search_data",		ctypes.POINTER(ctypes.c_void_p)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gst_util_greatest_common_divisor = _rpythonic_function_(		"gst_util_greatest_common_divisor", ctypes.c_int, [
	("a",		ctypes.c_int),
	("b",		ctypes.c_int),] )

gst_util_fraction_to_double = _rpythonic_function_(		"gst_util_fraction_to_double", ctypes.c_void_p, [
	("src_n",		ctypes.c_int),
	("src_d",		ctypes.c_int),
	("dest",		ctypes.POINTER(ctypes.c_double)),] )

gst_util_double_to_fraction = _rpythonic_function_(		"gst_util_double_to_fraction", ctypes.c_void_p, [
	("src",		ctypes.c_double),
	("dest_n",		ctypes.POINTER(ctypes.c_int)),
	("dest_d",		ctypes.POINTER(ctypes.c_int)),] )

gst_util_fraction_multiply = _rpythonic_function_(		"gst_util_fraction_multiply", ctypes.c_int, [
	("a_n",		ctypes.c_int),
	("a_d",		ctypes.c_int),
	("b_n",		ctypes.c_int),
	("b_d",		ctypes.c_int),
	("res_n",		ctypes.POINTER(ctypes.c_int)),
	("res_d",		ctypes.POINTER(ctypes.c_int)),] )

gst_util_fraction_add = _rpythonic_function_(		"gst_util_fraction_add", ctypes.c_int, [
	("a_n",		ctypes.c_int),
	("a_d",		ctypes.c_int),
	("b_n",		ctypes.c_int),
	("b_d",		ctypes.c_int),
	("res_n",		ctypes.POINTER(ctypes.c_int)),
	("res_d",		ctypes.POINTER(ctypes.c_int)),] )

gst_util_fraction_compare = _rpythonic_function_(		"gst_util_fraction_compare", ctypes.c_int, [
	("a_n",		ctypes.c_int),
	("a_d",		ctypes.c_int),
	("b_n",		ctypes.c_int),
	("b_d",		ctypes.c_int),] )

gst_event_new_sink_message = _rpythonic_function_(		"gst_event_new_sink_message", ctypes.POINTER(_GstEvent), [
	("msg",		ctypes.POINTER(_GstMessage)),] )

gst_event_parse_sink_message = _rpythonic_function_(		"gst_event_parse_sink_message", ctypes.c_void_p, [
	("event",		ctypes.POINTER(_GstEvent)),
	("msg",		ctypes.POINTER(ctypes.POINTER(_GstMessage))),] )

object_loaded = _rpythonic_function_(		"object_loaded", ctypes.c_void_p, [
	("xml",		ctypes.POINTER(_GstXML)),
	("C_object",		ctypes.POINTER(_GstObject)),
	("C_self",		ctypes.POINTER(_xmlNode)),] )

gst_xml_get_type = _rpythonic_function_(		"gst_xml_get_type", ctypes.c_ulong, [] )

gst_xml_write = _rpythonic_function_(		"gst_xml_write", ctypes.POINTER(_xmlDoc), [
	("element",		ctypes.POINTER(_GstElement)),] )

gst_xml_write_file = _rpythonic_function_(		"gst_xml_write_file", ctypes.c_int, [
	("element",		ctypes.POINTER(_GstElement)),
	("out",		ctypes.POINTER(_IO_FILE)),] )

gst_xml_new = _rpythonic_function_(		"gst_xml_new", ctypes.POINTER(_GstXML), [] )

gst_xml_parse_doc = _rpythonic_function_(		"gst_xml_parse_doc", ctypes.c_int, [
	("xml",		ctypes.POINTER(_GstXML)),
	("doc",		ctypes.POINTER(_xmlDoc)),
	("root",		ctypes.POINTER(ctypes.c_ubyte)),] )

gst_xml_parse_file = _rpythonic_function_(		"gst_xml_parse_file", ctypes.c_int, [
	("xml",		ctypes.POINTER(_GstXML)),
	("fname",		ctypes.POINTER(ctypes.c_ubyte)),
	("root",		ctypes.POINTER(ctypes.c_ubyte)),] )

gst_xml_parse_memory = _rpythonic_function_(		"gst_xml_parse_memory", ctypes.c_int, [
	("xml",		ctypes.POINTER(_GstXML)),
	("buffer",		ctypes.POINTER(ctypes.c_ubyte)),
	("size",		ctypes.c_uint),
	("root",		ctypes.POINTER(ctypes.c_char)),] )

gst_xml_get_element = _rpythonic_function_(		"gst_xml_get_element", ctypes.POINTER(_GstElement), [
	("xml",		ctypes.POINTER(_GstXML)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

gst_xml_get_topelements = _rpythonic_function_(		"gst_xml_get_topelements", ctypes.POINTER(_GList), [
	("xml",		ctypes.POINTER(_GstXML)),] )

gst_xml_make_element = _rpythonic_function_(		"gst_xml_make_element", ctypes.POINTER(_GstElement), [
	("cur",		ctypes.POINTER(_xmlNode)),
	("parent",		ctypes.POINTER(_GstObject)),] )

gst_init = _rpythonic_function_(		"gst_init", ctypes.c_void_p, [
	("argc",		ctypes.POINTER(ctypes.c_int)),
	("argv",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

gst_init_check = _rpythonic_function_(		"gst_init_check", ctypes.c_int, [
	("argc",		ctypes.POINTER(ctypes.c_int)),
	("argv",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("err",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gst_is_initialized = _rpythonic_function_(		"gst_is_initialized", ctypes.c_int, [] )

gst_init_get_option_group = _rpythonic_function_(		"gst_init_get_option_group", ctypes.POINTER(_GOptionGroup), [] )

gst_deinit = _rpythonic_function_(		"gst_deinit", ctypes.c_void_p, [] )

gst_version = _rpythonic_function_(		"gst_version", ctypes.c_void_p, [
	("major",		ctypes.POINTER(ctypes.c_uint)),
	("minor",		ctypes.POINTER(ctypes.c_uint)),
	("micro",		ctypes.POINTER(ctypes.c_uint)),
	("nano",		ctypes.POINTER(ctypes.c_uint)),] )

gst_version_string = _rpythonic_function_(		"gst_version_string", ctypes.POINTER(ctypes.c_char), [] )

gst_segtrap_is_enabled = _rpythonic_function_(		"gst_segtrap_is_enabled", ctypes.c_int, [] )

gst_segtrap_set_enabled = _rpythonic_function_(		"gst_segtrap_set_enabled", ctypes.c_void_p, [
	("enabled",		ctypes.c_int),] )

gst_registry_fork_is_enabled = _rpythonic_function_(		"gst_registry_fork_is_enabled", ctypes.c_int, [] )

gst_registry_fork_set_enabled = _rpythonic_function_(		"gst_registry_fork_set_enabled", ctypes.c_void_p, [
	("enabled",		ctypes.c_int),] )

gst_update_registry = _rpythonic_function_(		"gst_update_registry", ctypes.c_int, [] )


_rpythonic_convert_structs_to_objects()

_rpythonic_setup_return_wrappers()
_rpythonic_make_nice_global_enums_()
_rpythonic_clean_up_missing_functions_()
_rpythonic_strip_prefixes_(['gst_'])


_RETURNS_CHARP_ = (
	gst_version_string,
	gst_structure_get_name,
	gst_format_get_name,
	gst_message_type_get_name,
	gst_element_state_get_name,
)

for func in _RETURNS_CHARP_:
	func.return_wrapper = lambda pointer=None: _CHARP2STRING(pointer)


class _nice_callback_args_container_(object):
	'''	(required for pypy)
	wraps args in an object because pypy ctypes creates a weakref to wrap pyobject
	'''
	def __init__(self,args): self.args = args

class _nice_callback_(object):
	def __del__(self): pass		# for some reason this holds a reference to self
	def __init__(self, widget, func, args):
		import inspect
		self.widget = widget
		self.function = func
		self.args = args
		argspec = inspect.getargspec( func )
		self.num_c_args = len(argspec.args)
		self.num_user_args = len(args)

		n = len(argspec.args) - len(args)
		if not inspect.ismethod( func ): n += 1		# if not a bound-method
		self.cfunc_prototype = ctypes.CFUNCTYPE( ctypes.c_void_p, *([ctypes.c_void_p]*n) )
		g_signal_connect_data.change_argument_type( 'c_handler', self.cfunc_prototype )	# ugly workaround

		self.cfunc = self.cfunc_prototype( self.call )

		self.wrapped_args = _nice_callback_args_container_( args )
		userdata = ctypes.pointer( ctypes.py_object(self.wrapped_args) )
		self.userdata = userdata


	def call(self, *args):
		a = [ self.widget ]	# the first argument is always the widget the signal is attached to
		for i,arg in enumerate(args):
			if i == len(args)-1:
				ptr = ctypes.cast( arg, ctypes.POINTER(ctypes.py_object) )
				w = ptr.contents.value
				a += list(w.args)
			elif i:
				a.append( arg )
		self.function( *a )
		return 0	# pypy complains if None is returned


def connect( ptr, name, func, *args ):
	wrapper = _nice_callback_( ptr.pyobject, func, args )
	return g_signal_connect_data( ptr, name, wrapper.cfunc, wrapper.userdata )

