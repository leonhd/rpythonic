## generated by RPythonic 0.4.4c
## http://code.google.com/p/rpythonic/
import os, sys, ctypes, inspect
__os = os
__sys = sys
__inspect = inspect

PYTHON_RESERVED_KEYWORDS = 'for while in as global with try except lambda return raise if else elif eval exec and not or break continue finally print yield del def class assert from is pass'.split()


IS32BIT = (ctypes.sizeof(ctypes.c_void_p)==4)

_ISPYTHON2 = sys.version_info[0] == 2
if _ISPYTHON2: _NULLBYTE = '\0'
else: _NULLBYTE = bytes( chr(0), 'ascii' )

def _CHARP2STRING( charp, encoding='utf-8' ):
	b = bytes()
	i = 0
	while True:
		char = charp[ i ]
		if char == _NULLBYTE: break
		else:
			b += char
			i += 1
	return b.decode( encoding )

## try to load precompiled c-libraries from this directory, if the library is not there try to load from the system.
_clibs_dir = os.path.dirname(os.path.abspath(__file__))

def _load_ctypes_lib( name ):
	if __os.name == 'posix':
		if __sys.platform=='linux2':
			if not name.endswith('.so'): name += '.so'
			if not name.startswith('lib'): name = 'lib' + name

			if IS32BIT: 	path = __os.path.join(_clibs_dir,'linux32')
			else: 		path = __os.path.join(_clibs_dir,'linux64')
			url = __os.path.join( path, name )
			if __os.path.isfile( url ): return ctypes.CDLL(url)
			elif __os.path.isfile( '/usr/local/lib/%s'%name ): return ctypes.CDLL('/usr/local/lib/%s'%name)
			elif __os.path.isfile( '/usr/local/lib64/%s'%name ) and not IS32BIT: return ctypes.CDLL('/usr/local/lib64/%s'%name)
			elif __os.path.isfile( '/usr/lib/%s'%name ): return ctypes.CDLL('/usr/lib/%s'%name)
			elif __os.path.isfile( './%s'%name ): return ctypes.CDLL('./%s'%name)
			else:	# fallback
				try: return ctypes.CDLL(name)
				except: return ctypes.CDLL('')

		elif sys.platform == 'darwin':
			name += '.dylib'
			if IS32BIT: 	path = os.path.join(_clibs_dir,'osx32')
			else: 		path = os.path.join(_clibs_dir,'osx64')
			url = os.path.join( path, name )
			if os.path.isfile( url ): return ctypes.CDLL(url)
			else: return ctypes.CDLL(name) #fallback

	elif os.name == 'nt':
		name += '.dll'
		if IS32BIT: 	path = os.path.join(_clibs_dir,'win32')
		else: 		path = os.path.join(_clibs_dir,'win64')
		url = os.path.join( path, name )
		if os.path.isfile( url ): return ctypes.CDLL(url)
		else: return ctypes.CDLL(name) #fallback

RPYTHONIC_WRAPPER_FUNCTIONS = {}
RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES = []
RPYTHONIC_AUTOPREFIX_IGNORE = []

## ctypes does not clearly expose these types ##
PyCFuncPtrType = type(ctypes.CFUNCTYPE(ctypes.c_void_p))
PyCArrayType = type( ctypes.c_int * 2 )
PyCPointerType = type( ctypes.POINTER(ctypes.c_int) )
PyCStructType = type( ctypes.Structure )
CArgObject = type( ctypes.byref(ctypes.c_int()) )

class _rpythonic_meta_(object):
	'''
	Reserved Attributes:
		POINTER
		CSTRUCT
		CAST
	'''
	_rpythonic_ = True		# workaround for now, must have a way to know if object is a meta from another module, isinstance(o,_rpythonic_meta_) will fail in those cases. another workaround could be check sys.modules for other rpythonic modules and fetch _rpythonic_meta_ from there.
	def __init__(self, *args, **kw ):							# cheap trick, abuse **kw, and look for "pointer", "cast"
		if kw and 'pointer' not in kw: raise SyntaxError	# sorry, you can not init with keywords
		elif kw and 'pointer' in kw:
			if 'cast' in kw and kw['cast']:
				self.POINTER = ctypes.cast( kw['pointer'], ctypes.POINTER(self.CSTRUCT) )
			else: self.POINTER = kw['pointer']
		else: self.POINTER = ctypes.pointer( self.CSTRUCT(*args) )
		self.POINTER.pyobject = self	# .pyobject is local to this pointer "object"

	def __getattr__(self,name):
		if hasattr( self.POINTER.contents, name ):
			return getattr( self.POINTER.contents, name )

		else:	# when rpythonic failed to generate good bindings - these lookups should be cached
			for parent in self._rpythonic_parent_classes_:
				if hasattr( parent, name ):
					method = getattr( parent, name )	# should check if it really is an unbound method
					func = parent._rpythonic_unbound_lookup_[ method ]
					n = func.name
					if len(func.argnames) > 1:
						argnames = func.argnames[ 1 : ]
						a = ',' + '=None,'.join( argnames ) + '=None'
						b = ','.join( argnames )
					else: a = b = ''
					lamb = eval( 'lambda self %s: %s( self.POINTER, %s )' %(a,n,b) )
					setattr( self.__class__, name, lamb )
					#return lamb	# this would return the unbound lambda, must call getattr again
					return getattr( self, name )

			## last resort, load from global name space ##
			G = globals()
			if name in G: return lambda *args: G[name](self.POINTER, *args)
			else:
				for prefix in self._autoprefix_:
					n = prefix + name
					if n in G: return lambda *args: G[n](self.POINTER, *args)
				print( 'possible auto-prefixes available', self._autoprefix_ )
				raise AttributeError

	def __call__(self, type=False):
		print('calling object is DEPRECATED - use ob.POINTER or ob.CSTRUCT')
		if type: return self.CSTRUCT
		else: return self.POINTER


def _rpythonic_generate_subclass_( name, struct, functions ):
	head = 'class %s( _rpythonic_meta_ ):' %name
	body = [ 
		'_rpythonic_parent_classes_ = []' ,
		'_rpythonic_unbound_lookup_ = {}' 
	]

	names = [ func.name for func in functions ]

	possibles = {}
	rank = []		# rank by longest name
	if len(names) > 3000: print('too many functions to use this hack')
	else:
		for n1 in names:
			prefix = ''
			for i,char in enumerate(n1):
				prefix += char
				if prefix not in possibles:
					possibles[ prefix ] = 0
					for n2 in names:
						if n2.startswith( prefix ):
							possibles[ prefix ] += 1

					if not rank or len(prefix) > len(rank[-1]) and possibles[prefix] > len(names)/4:
						rank.append( prefix )

	top = []
	while rank:
		best = rank.pop()
		if possibles[best] > len(functions)/2 and best not in names:
			if best.endswith('_set_') or best.endswith('_get_'): best = best[ : -4 ]
			elif best.endswith('Set') or best.endswith('Get'): best = best[ : -3 ]

			rem = []
			for other in rank:
				if best.startswith(other): rem.append( other )
			for r in rem: rank.remove( r )

			if best not in top: top.append( best )

		if len(top) > 3: break

	for n in names:		# find shortest prefixes #
		prefix = ''
		for i,char in enumerate(n):		# cammelCase
			if i==0: prefix += char; continue
			if char.isupper() and len(prefix) >= 2: break
			prefix += char
		if prefix and prefix != n and len(prefix) >= 2:
			hits = 0
			for other in names:
				if other.startswith( prefix ): hits += 1
			if hits >= 2 and prefix not in top:
				top.append( prefix )
				if len(top) >= 6: break

	## setup full names
	for func in functions:
		n = func.name
		if len(func.argnames) > 1:
			argnames = func.argnames[ 1 : ]
			a = ',' + '=None,'.join( argnames ) + '=None'
			b = ','.join( argnames )
		else: a = b = ''

		fhead = 'def %s( self %s ):' %(n,a)
		fbody = ['return %s(self.POINTER, %s)' %(func.name,b)]
		g = fhead + '\n\t\t' + '\n\t\t'.join( fbody )
		body.append( g )
		#body.append( '%s._rpythonic_function_ = %s' %(func.name, func.name) )

	## setup short names ##
	for n in names:
		for prefix in top:
			if n.startswith(prefix) and n[len(prefix):] not in names:
				alt = n[ len(prefix) : ]
				if alt and alt != n and alt not in PYTHON_RESERVED_KEYWORDS and not alt.isdigit() and not alt[0].isdigit():
					body.append( '%s = %s' %(alt,n) )
					names.append( alt )

	gen = head + '\n\t' + '\n\t'.join( body )
	try: exec( gen )
	except:
		print( gen )
		raise SyntaxError

	klass = locals()[name]
	klass.CSTRUCT = struct	# ctypes struct class

	klass._autoprefix_ = top
	for func in functions:
		unbound = getattr( klass, func.name )
		klass._rpythonic_unbound_lookup_[ unbound ] = func
		# klass.longname is klass.shortname = False
		# klass.longname == klass.shortname = True
	return klass

def _rpythonic_convert_structs_to_objects():
	G = globals()
	for klass in _OOAPI_:
		altname = name = klass.__name__
		prefix = ''
		for i,char in enumerate(name):
			if i==0: prefix += char; continue
			if char.isupper(): break
			prefix += char
		if prefix and prefix != name:
			hits = 0
			for other in _OOAPI_:
				if other is not klass:
					if other.__name__.startswith( prefix ): hits += 1
			if hits >= 2:
				altname = name[ len(prefix) : ]

		funcs = _OOAPI_[ klass ]
		newklass = _rpythonic_generate_subclass_( altname, klass, funcs )
		klass._rpythonic_wrapper_class_ = newklass
		G[ name ] = newklass	# replace struct with wrapper
		if altname not in G: G[ altname ] = newklass	# safely define with nicer name
		elif altname != name: # odd cases, maybe a function that returns the object, almost never happens.
			print('WARN - not replacing something with struct wrapper:', G[altname] )


def _rpythonic_setup_return_wrappers():
	R = _rpythonic_function_
	for klass in _OOAPI_:
		if klass in _OOAPI_RETURNS_OBJECT_:
			for f in _OOAPI_RETURNS_OBJECT_[klass]:
				f.object_oriented = True
				if not f.return_wrapper:	# just in case the ctypes footer had already defined it, do not overwrite
					f.return_wrapper = klass._rpythonic_wrapper_class_

def _rpythonic_function_( name, result=ctypes.c_void_p, args=[]):
	mname = '_metafunc_%s' %name
	exec( 'class %s( _rpythonic_metafunc_ ): pass' %mname )
	k = locals()[mname]
	return k( name, result, args )

_OOAPI_ = {}
_OOAPI_RETURNS_OBJECT_ = {}

class _rpythonic_metafunc_(object):
	def __init__(self, name, result=ctypes.c_void_p, args=[]):
		self.name = name
		self.result = result
		self.argtypes = []		# can dynamically change CFUNCTYPE trick
		self.argnames = []
		self.argtypestypes = []
		for i,arg in enumerate(args):
			n,t = arg
			if n in PYTHON_RESERVED_KEYWORDS: n = 'C_'+n
			if n in self.argnames: n = '%s%s' %(n,i)
			self.argnames.append( n )
			self.argtypes.append( t )
			self.argtypestypes.append( type(t) )		# precomputed for speed

		self.argnames = tuple( self.argnames )				# should never change
		self.numargs = len( self.argtypes )
		self.callbacks = [None] * self.numargs
		self.return_wrapper = None
		self.object_oriented = False
		self.function = None
		try:
			func = self.function = getattr(CTYPES_DLL, self.name )
			RPYTHONIC_WRAPPER_FUNCTIONS[ name ] = self
		except:
			RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES.append( name )
		if self.function: self.reset()

	def change_argument_type( self, name, t ):
		idx = self.argnames.index( name )
		self.argtypes[ idx ] = t
		self.argtypestypes[ idx ] = type(t)
		self.function.argtypes = self.argtypes

	def reset(self):
		if self.argnames:
			a = ',' + '=None,'.join( self.argnames ) + '=None'
			b = ','.join( self.argnames )
		else: a = b = ''

		callmeth = eval( 'lambda self %s: self._call_( %s )' %(a,b) )
		setattr( self.__class__, '__call__', callmeth )

		self.function.restype = self.result
		self.function.argtypes = self.argtypes

		if type( self.result ) is PyCPointerType and type(self.result._type_) is PyCStructType:
			klass = self.result._type_
			if klass not in _OOAPI_RETURNS_OBJECT_: _OOAPI_RETURNS_OBJECT_[klass] = []
			_OOAPI_RETURNS_OBJECT_[klass].append( self )

		self.defaults = []
		for i in range( self.numargs ):
			T = self.argtypes[ i ]
			if type(T) is PyCFuncPtrType:
				p = T()	# func pointers can not be None
				self.defaults.append( p )
				self.callbacks[ i ] = p					# save reference
			elif T in (ctypes.c_int, ctypes.c_uint, ctypes.c_long, ctypes.c_ulong):
				self.defaults.append( 0 )
			elif T in (ctypes.c_float, ctypes.c_double):
				self.defaults.append( .0 )
			else: self.defaults.append( None )	# None is allowed for all other types

			## generate OO API ##
			if i == 0 and type(T) is PyCPointerType and type(T._type_) is PyCStructType:
				klass = T._type_
				if klass not in _OOAPI_: _OOAPI_[ klass ] = []
				_OOAPI_[ klass ].append( self )

	def _call_( self, *args ):			# allow flexible calling types
		cargs = list( self.defaults )
		for i,arg in enumerate(args):
			if isinstance( arg, _rpythonic_meta_ ): arg = arg.POINTER
			elif hasattr( arg, '_rpythonic_' ): arg = arg.POINTER		# workaround - instance from another module

			t = type(arg)
			k = self.argtypes[ i ]
			kt = self.argtypestypes[ i ]
			if arg is None and cargs[i] is not None:	# use user defaults, very rare cases
				continue

			elif t is bool and k is ctypes.c_int:
				if arg: cargs[i] = 1	#ctypes.c_int(1)
				else: cargs[i] = 0	#ctypes.c_int(0)

			elif t in (list,tuple):				# convert lists and tuples into array
				if kt is PyCArrayType:
					cargs[ i ] = k(*arg)
				elif kt is PyCStructType:
					if k._array_wrapper_: cargs[ i ] = k(arg)	# allow easy array init
					else: cargs[ i ] = k(*arg)							# allow multiple args
				elif kt is PyCPointerType:
					cargs[ i ] = _convert_nested_list_to_pointer( k, arg )
				else: assert 0

			elif isinstance( arg, ctypes._Pointer ) and t is not k and kt is PyCPointerType:
				cargs[ i ] = ctypes.cast( arg, k )		# generic's that need to be cast

			elif kt is PyCStructType and isinstance( arg, ctypes._Pointer ):
				cargs[ i ] = arg.contents	# fixed may25

			elif kt is PyCPointerType and not isinstance( arg, (ctypes._Pointer,CArgObject) ):
				if t in (int,float,bool): ptr = k( k._type_(arg) )
				elif t is str:
					arg = arg.encode('utf-8')
					#ptr = k( k._type_() )								# not k() otherwise null pointer error
					#for j, char in enumerate(arg): ptr[ j ] = char		# not correct - missing null byte?
					ptr = ctypes.create_string_buffer(arg)				# correct and pypy compatible
				elif t in (PyCStructType, PyCArrayType):
					ptr = ctypes.cast( ctypes.pointer( arg ), k )
				else:
					ptr = arg	# TODO print warning?
				cargs[ i ] = ptr

			elif kt is PyCFuncPtrType:
				if t.__name__ == 'CFunctionType': cargs[ i ] = arg		# assume outside holds pointer
				else:													# this is not safe #
					cargs[ i ] = self.callbacks[ i ] = k( arg )				# assume arg is a callable
			else:
				cargs[ i ] = arg		# directly pass

		## if you define your own return_wrapper, it must take keyword "pointer"
		if self.return_wrapper: return self.return_wrapper( pointer=self.function( *cargs ) )
		else: return self.function( *cargs )



def _convert_nested_list_to_pointer( k, arg ):
	depth = 0; s = k
	while True:
		if type(s) is PyCPointerType:
			s = getattr( s, '_type_' )
			depth += 1
		else: break
	assert depth and depth <= 2
	if depth == 1:
		T = k._type_
		ptr = k( k._type_() )
		for i in range( len(arg) ):
			ptr[ i ] = T( *arg[i] )
	elif depth == 2:
		T = k._type_._type_
		_ptr = k._type_( k._type_._type_() )
		for i in range(len( arg )):
			for j in range( len(arg[i]) ):
				_ptr[ j ] = T( *arg[ i ][ j ] )
		ptr = k( _ptr )
	return ptr


def __freeze_rpythonic_struct( cls, fields ):
	if cls not in _OOAPI_: _OOAPI_[ cls ] = []	# wrap all structs
	try: setattr( cls, '_fields_', fields )
	except:
		print( 'WARN - bad order struct freeze', cls )
		#cls._fields_ = []

class _rpythonic_struct_( ctypes.Structure ):
	_array_wrapper_ = False
	_fields_ = []
	_methods_ = {}
	#def __call__(self): return self
	def __init__(self, *args, **kw ):
		cargs = []
		argtypes = []
		for a in self._fields_: argtypes.append( a[1] )
		if len(args) > len(argtypes): args = [args]	# allow both calling conventions
		for i,arg in enumerate( args ):
			if isinstance( arg, _rpythonic_meta_ ): arg = arg.POINTER

			t = type(arg)
			k = argtypes[ i ]
			if t in (list,tuple):
				if k.__class__.__name__	== 'PyCArrayType':
					cargs.append( k(*arg) )
				elif k.__class__.__name__ == 'PyCStructType':
					if k._array_wrapper_: cargs.append( k(arg) )	# allow easy array init
					else: cargs.append( k(*arg) )							# allow multiple args
			elif isinstance( arg, ctypes._Pointer ) and t is not k:
				cargs[ i ] = ctypes.cast( arg, k )	# generic's that need to be cast
			elif k.__class__.__name__ == 'PyCArrayType' and t in (float,int,bool):
				cargs.append( k(arg) )		# support init array from single value
			else:
				cargs.append( arg )		# directly pass

		ctypes.Structure.__init__(self, *cargs, **kw)


def _rpythonic_make_nice_global_enums_():
	G = globals()
	for name in RPYTHONIC_GLOBAL_ENUMS:
		if '_' in name and name.index('_') <= 4:
			altname = name[ name.index('_') + 1 : ]
			if altname not in G:
				G[altname] = RPYTHONIC_GLOBAL_ENUMS[ name ]

def _rpythonic_clean_up_missing_functions_():
	G = globals()
	for f in RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES:
		G.pop( f )
	print( "C functions loaded: %s" %len(RPYTHONIC_WRAPPER_FUNCTIONS) )
	print( "C functions failed: %s" %len(RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES) )



###### NEW API #########
CTYPES_DLL = None

class _VOID_POINTER_CONTAINER_(object):
	def __init__(self, ptr, name=None):
		self._pointer_ = ptr
		self.name = name
NULL = _VOID_POINTER_CONTAINER_(None,'<null pointer>')


class meta:	# NEW API - allow run time switch from ctypes to rffi
	'''
	Methods:
		RPython will not allow object wrapper around a method (__call__ not allowed)
		keep C function names in list "__cfunctions__"
		rpythonic.enable_rffi( classA, classB )	
		can take advantage of methods in object-method-wrapper,
		generate rffi wrapper and set method on classA, etc.
		replaces object-method-wrapper with rffi-method

	Properties:
		CPython: obj.x=1
		RPython: obj.set_x(1)	
	'''
	METAS = []
	def __init__(self, constructors=[], methods={}, properties={}):
		global CTYPES_DLL
		if not CTYPES_DLL:
			CTYPES_DLL = _load_ctypes_lib( _clib_name_ )

		self.constructors = constructors
		self.methods = methods
		self.properties = properties
		self.METAS.append( self )



	def __call__(self, cls ):
		print('@meta', cls )

		if not self.constructors:
			lamb = lambda s, _explicit_pointer_=None: setattr(s,'_pointer_',getattr(_explicit_pointer_,'_pointer_')) if hasattr(_explicit_pointer_,'_pointer_') else setattr(s,'_pointer_',_explicit_pointer_)
			lamb._debug = '(no constructor)'
			setattr( cls, '__init__', lamb )
		else:
			con = self._find_best_function( self.constructors )
			cfunc = self._build_cfunc( con )
			setattr( cls, '_%s'%con['name'], cfunc )
			g = self._gen_init( con )
			setattr( cls, '__init__', g )
		
		## set methods ##
		for name in self.methods:
			meth = self.methods[ name ]
			cfuncs = []
			for m in meth['functions']:
				cfunc = self._build_cfunc( m, method=True, static=meth['static'] )
				self._setup_return( cfunc, meth )
				setattr( cls, '_%s'%m['name'], cfunc )
				cfuncs.append( cfunc )

			f = self._find_best_function( meth['functions'] )
			g = self._gen_method( meth, f )
			g._cfuncs = cfuncs
			if meth['static']: g = classmethod( g )
			setattr( cls, name, g )

		for name in self.properties:
			print( 'property:', name )
			p = []
			for f in self.properties[name]:
				cfunc = self._build_cfunc( f )
				setattr( cls, '_%s'%f['name'], cfunc )
				g = self._gen_method( f, f )
				p.append( g )

			setattr( cls, name, property(*p) )

		return cls


	@staticmethod
	def _build_cfunc( info, method=False, static=False ):
		cfunc = getattr(CTYPES_DLL, info['name'])
		if method and not static: argtypes = [ ctypes.c_void_p ]
		else: argtypes = []
		for p in info['parameters']: argtypes.append( eval(p['ctypes_type']) )
		cfunc.argtypes = argtypes
		return cfunc

	@staticmethod
	def _setup_return( cfunc, info ):
		if not info['returns_fundamental']:
			cfunc.restype = ctypes.c_void_p
		elif info['returns_fundamental']:
			cfunc.restype = eval( info['returns_ctypes'] )
		else:
			cfunc.restype = ctypes.c_void_p

	@staticmethod
	def _gen_prepare_args( m ):
		a = []; b = []
		for i,p in enumerate(m['parameters']):
			if 'name' in p: n = p['name']
			else: n = '_unnamed_%s' %i
			if '<' in n: n = '_TODOfixme_%s' %i
			if n in PYTHON_RESERVED_KEYWORDS: n += str(i)
			if p['fundamental']:
				b.append( n )
				s = p['raw_type'].split()
				if 'default' in p:
					d = p['default']
					if p['raw_type'] in ('float', 'double'):
						if d.endswith('f'): d = d[:-1]
						d = d.replace(' ', '.')
						if 'e' in d: d = 0.0
						try: d = float(d)
						except: d = 0.0
					elif ('int' in s or 'size_t' in s) and not d.isdigit(): d = 0
					elif 'char' in s and '"' not in d: d = '""'
					elif d.lower() == 'false': d = False
					elif d.lower() == 'true': d = True
				elif 'char' in s: d = '""'
				elif 'float' in s or 'double' in s: d = 0.0
				elif 'size_t' in s or 'int' in s or 'long' in s or 'short' in s: d = 0
				elif p['raw_type'] == 'bool': d = False
				elif p['raw_type'] in ('void', '(template)'): d = 'NULL'
				else: print( p )
				a.append( n+'=%s' %d )

			else:
				b.append( '%s._pointer_'%n )
				a.append( n+'=NULL' )
		return a, b

	@staticmethod
	def _gen_init( m ):
		a, b = meta._gen_prepare_args( m )
		if a: e = 'lambda _py_self_, %s, _explicit_pointer_=None: ' %(','.join(a))
		else: e = 'lambda _py_self_, _explicit_pointer_=None: '
		e += 'setattr(_py_self_, "_pointer_", _py_self_._%s(%s))' %( m['name'], ','.join(b) )
		e += ' if not _explicit_pointer_ else '
		e += 'setattr(_py_self_, "_pointer_", _explicit_pointer_)'
		print( e )
		lamb = eval( e ); lamb._debug = e; lamb._introspect = m
		return lamb

	@staticmethod
	def _find_best_function( funcs ):
		best = funcs[0]
		score = -1
		if len(funcs) > 1:
			for f in funcs:
				hits = 0
				for p in f['parameters']:
					if p['fundamental']: hits += 1
				if hits and hits == len( f['parameters'] ):
					if hits > score:
						score = hits
						best = f
		return best

	@staticmethod
	def _gen_method( m, f ):
		a, b = meta._gen_prepare_args( f )
		if a: e = 'lambda _py_self_, %s: ' %(','.join(a))
		else: e = 'lambda _py_self_: '

		if 'static' in m and m['static']:	# static in c++ is like a classmethod
			c = '_py_self_._%s( %s )' %( f['name'], ','.join(b) )
		else:
			c = '_py_self_._%s( _py_self_._pointer_, %s )' %( f['name'], ','.join(b) )

		if not m['returns_fundamental']:
			if 'returns_unknown' in m or '<' in m['returns']: c = '_VOID_POINTER_CONTAINER_( %s, name="%s" )' %(c,m['returns'])
			else:
				something = m['returns'].replace('::', '.')
				c = '%s( _explicit_pointer_=%s )' %(something, c)

		e += c; lamb = eval( e )
		lamb._debug = e; lamb._introspect = f
		return lamb


	META_FUNCTIONS = []
	@classmethod
	def function( self, info ):
		print('@meta.function', info['name'] )
		global CTYPES_DLL
		if not CTYPES_DLL:
			CTYPES_DLL = _load_ctypes_lib( _clib_name_ )

		cfunc = self._build_cfunc( info, method=False, static=True )
		setattr( meta, '_%s'%info['name'], cfunc )
		self._setup_return( cfunc, info )
		a, b = meta._gen_prepare_args( info )
		e = 'lambda %s: ' %(','.join(a))
		c = 'meta._%s( %s )' %( info['name'], ','.join(b) )

		if not info['returns_fundamental']:
			if 'returns_unknown' in info or '<' in info['returns']:
				c = '_VOID_POINTER_CONTAINER_( %s, name="%s" )' %(c,info['returns'])
			else:
				something = info['returns'].replace('::', '.')
				c = '%s( _explicit_pointer_=%s )' %(something, c)
		e += c
		lamb = eval( e )
		lamb._debug = e
		lamb._introspect = info
		return lamb



def _rpythonic_strip_prefixes_( prefixes ):
	G = globals()
	names = list(G.keys())	# ensure list in py3
	for name in names:
		for prefix in prefixes:
			if name.startswith( prefix ):
				newname = name[ len(prefix) : ]
				if newname and newname not in G:
					G[ newname ] = G[ name ]






_clib_name_ = 'libfftw3'
print('loading lib', _clib_name_)
print( os.path.abspath( os.path.curdir ) )
CTYPES_DLL = _load_ctypes_lib( _clib_name_ )
assert CTYPES_DLL
print( CTYPES_DLL._name )

## macro globals ##
FFTW_FORWARD = -1
FFTW_BACKWARD = 1
FFTW_NO_TIMELIMIT = -1.0
FFTW_MEASURE = 0
FFTW_DESTROY_INPUT = 1
FFTW_UNALIGNED = 2
FFTW_CONSERVE_MEMORY = 4
FFTW_EXHAUSTIVE = 8
FFTW_PRESERVE_INPUT = 16
FFTW_PATIENT = 32
FFTW_ESTIMATE = 64
FFTW_ESTIMATE_PATIENT = 128
FFTW_BELIEVE_PCOST = 256
FFTW_NO_DFT_R2HC = 512
FFTW_NO_NONTHREADED = 1024
FFTW_NO_BUFFERING = 2048
FFTW_NO_INDIRECT_OP = 4096
FFTW_ALLOW_LARGE_GENERIC = 8192
FFTW_NO_RANK_SPLITS = 16384
FFTW_NO_VRANK_SPLITS = 32768
FFTW_NO_VRECURSE = 65536
FFTW_NO_SIMD = 131072
FFTW_NO_SLOW = 262144
FFTW_NO_FIXED_RADIX_LARGE_N = 524288
FFTW_ALLOW_PRUNING = 1048576
FFTW_WISDOM_ONLY = 2097152
## enums ##
_codecvt_result = { 
	"__codecvt_ok" : 0, 
	"__codecvt_partial" : 1, 
	"__codecvt_error" : 2, 
	"__codecvt_noconv" : 3, 
}

fftw_r2r_kind_do_not_use_me = { 
	"FFTW_R2HC" : 0, 
	"FFTW_HC2R" : 1, 
	"FFTW_DHT" : 2, 
	"FFTW_REDFT00" : 3, 
	"FFTW_REDFT01" : 4, 
	"FFTW_REDFT10" : 5, 
	"FFTW_REDFT11" : 6, 
	"FFTW_RODFT00" : 7, 
	"FFTW_RODFT01" : 8, 
	"FFTW_RODFT10" : 9, 
	"FFTW_RODFT11" : 10, 
}

## simple enums ##
RPYTHONIC_GLOBAL_ENUMS = { 

}
class __fsid_t(_rpythonic_struct_): _array_wrapper_ = True
class __mbstate_t(_rpythonic_struct_): pass
class __value(ctypes.Union): pass
class _G_fpos_t(_rpythonic_struct_): pass
class _G_fpos64_t(_rpythonic_struct_): pass
class _IO_jump_t(_rpythonic_struct_): pass
class _IO_marker(_rpythonic_struct_): pass
class _IO_FILE(_rpythonic_struct_): _array_wrapper_ = True
class _IO_FILE_plus(_rpythonic_struct_): pass
class fftw_iodim_do_not_use_me(_rpythonic_struct_): pass
class fftw_iodim64_do_not_use_me(_rpythonic_struct_): pass
class fftw_plan_s(_rpythonic_struct_): pass
class fftwf_plan_s(_rpythonic_struct_): pass
class fftwl_plan_s(_rpythonic_struct_): pass
## union and structures ##
__freeze_rpythonic_struct( __fsid_t, [
	( "__val", ( ctypes.c_int * 2 ) ),
])

__freeze_rpythonic_struct( __value, [
	( "__wch", ctypes.c_uint ),
	( "__wchb", ( ctypes.c_char * 4 ) ),
])

__freeze_rpythonic_struct( __mbstate_t, [
	( "__count", ctypes.c_int ),
	( "__value", __value ),
])

__freeze_rpythonic_struct( _G_fpos_t, [
	( "__pos", ctypes.c_int64 ),
	( "__state", __mbstate_t ),
])

__freeze_rpythonic_struct( _G_fpos64_t, [
	( "__pos", ctypes.c_longlong ),
	( "__state", __mbstate_t ),
])

__freeze_rpythonic_struct( _IO_jump_t, [
])

__freeze_rpythonic_struct( _IO_marker, [
	( "_next", ctypes.POINTER(_IO_marker) ),
	( "_sbuf", ctypes.POINTER(_IO_FILE) ),
	( "_pos", ctypes.c_int ),
])

__freeze_rpythonic_struct( _IO_FILE, [
	( "_flags", ctypes.c_int ),
	( "_IO_read_ptr", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_read_end", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_read_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_write_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_write_ptr", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_write_end", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_buf_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_buf_end", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_save_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_backup_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_save_end", ctypes.POINTER(ctypes.c_char) ),
	( "_markers", ctypes.POINTER(_IO_marker) ),
	( "_chain", ctypes.POINTER(_IO_FILE) ),
	( "_fileno", ctypes.c_int ),
	( "_flags2", ctypes.c_int ),
	( "_old_offset", ctypes.c_int64 ),
	( "_cur_column", ctypes.c_ushort ),
	( "_vtable_offset", ctypes.c_char ),
	( "_shortbuf", ( ctypes.c_char * 1 ) ),
	( "_lock", ctypes.POINTER(ctypes.c_void_p) ),
	( "_offset", ctypes.c_longlong ),
	( "__pad1", ctypes.POINTER(ctypes.c_void_p) ),
	( "__pad2", ctypes.POINTER(ctypes.c_void_p) ),
	( "__pad3", ctypes.POINTER(ctypes.c_void_p) ),
	( "__pad4", ctypes.POINTER(ctypes.c_void_p) ),
	( "__pad5", ctypes.c_uint ),
	( "_mode", ctypes.c_int ),
	( "_unused2", ctypes.c_char ),
])

__freeze_rpythonic_struct( _IO_FILE_plus, [
])

__freeze_rpythonic_struct( fftw_iodim_do_not_use_me, [
	( "n", ctypes.c_int ),
	( "is", ctypes.c_int ),
	( "os", ctypes.c_int ),
])

__freeze_rpythonic_struct( fftw_iodim64_do_not_use_me, [
	( "n", ctypes.c_int ),
	( "is", ctypes.c_int ),
	( "os", ctypes.c_int ),
])

__freeze_rpythonic_struct( fftw_plan_s, [
])

__freeze_rpythonic_struct( fftwf_plan_s, [
])

__freeze_rpythonic_struct( fftwl_plan_s, [
])

## wrapper functions ##
_IO_getc = _rpythonic_function_(		"_IO_getc", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_putc = _rpythonic_function_(		"_IO_putc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_feof = _rpythonic_function_(		"_IO_feof", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_ferror = _rpythonic_function_(		"_IO_ferror", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_peekc_locked = _rpythonic_function_(		"_IO_peekc_locked", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_flockfile = _rpythonic_function_(		"_IO_flockfile", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_IO_funlockfile = _rpythonic_function_(		"_IO_funlockfile", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_IO_ftrylockfile = _rpythonic_function_(		"_IO_ftrylockfile", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_IO_vfscanf = _rpythonic_function_(		"_IO_vfscanf", ctypes.c_int, [
	("__restrict",		ctypes.POINTER(_IO_FILE)),
	("__restrict",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_char),
	("__restrict",		ctypes.POINTER(ctypes.c_int)),] )

_IO_vfprintf = _rpythonic_function_(		"_IO_vfprintf", ctypes.c_int, [
	("__restrict",		ctypes.POINTER(_IO_FILE)),
	("__restrict",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_char),] )

_IO_padn = _rpythonic_function_(		"_IO_padn", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

_IO_sgetn = _rpythonic_function_(		"_IO_sgetn", ctypes.c_uint, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_uint),] )

_IO_seekoff = _rpythonic_function_(		"_IO_seekoff", ctypes.c_longlong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_longlong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

_IO_seekpos = _rpythonic_function_(		"_IO_seekpos", ctypes.c_longlong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_longlong),
	("none",		ctypes.c_int),] )

_IO_free_backup_area = _rpythonic_function_(		"_IO_free_backup_area", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

remove = _rpythonic_function_(		"remove", ctypes.c_int, [
	("__filename",		ctypes.POINTER(ctypes.c_char)),] )

rename = _rpythonic_function_(		"rename", ctypes.c_int, [
	("__old",		ctypes.POINTER(ctypes.c_char)),
	("__new",		ctypes.POINTER(ctypes.c_char)),] )

renameat = _rpythonic_function_(		"renameat", ctypes.c_int, [
	("__oldfd",		ctypes.c_int),
	("__old",		ctypes.POINTER(ctypes.c_char)),
	("__newfd",		ctypes.c_int),
	("__new",		ctypes.POINTER(ctypes.c_char)),] )

tmpfile = _rpythonic_function_(		"tmpfile", ctypes.POINTER(_IO_FILE), [] )

tmpnam = _rpythonic_function_(		"tmpnam", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

tmpnam_r = _rpythonic_function_(		"tmpnam_r", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

tempnam = _rpythonic_function_(		"tempnam", ctypes.POINTER(ctypes.c_char), [
	("__dir",		ctypes.POINTER(ctypes.c_char)),
	("__pfx",		ctypes.POINTER(ctypes.c_char)),] )

fclose = _rpythonic_function_(		"fclose", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fflush = _rpythonic_function_(		"fflush", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fflush_unlocked = _rpythonic_function_(		"fflush_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fopen = _rpythonic_function_(		"fopen", ctypes.POINTER(_IO_FILE), [
	("__filename",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

freopen = _rpythonic_function_(		"freopen", ctypes.POINTER(_IO_FILE), [
	("__filename",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.POINTER(ctypes.c_char)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fdopen = _rpythonic_function_(		"fdopen", ctypes.POINTER(_IO_FILE), [
	("__fd",		ctypes.c_int),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

fmemopen = _rpythonic_function_(		"fmemopen", ctypes.POINTER(_IO_FILE), [
	("__s",		ctypes.POINTER(ctypes.c_void_p)),
	("__len",		ctypes.c_uint),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

open_memstream = _rpythonic_function_(		"open_memstream", ctypes.POINTER(_IO_FILE), [
	("__bufloc",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__sizeloc",		ctypes.POINTER(ctypes.c_uint)),] )

setbuf = _rpythonic_function_(		"setbuf", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

setvbuf = _rpythonic_function_(		"setvbuf", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.c_int),
	("__n",		ctypes.c_uint),] )

setbuffer = _rpythonic_function_(		"setbuffer", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__size",		ctypes.c_uint),] )

setlinebuf = _rpythonic_function_(		"setlinebuf", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fprintf = _rpythonic_function_(		"fprintf", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

printf = _rpythonic_function_(		"printf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

sprintf = _rpythonic_function_(		"sprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

vfprintf = _rpythonic_function_(		"vfprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vprintf = _rpythonic_function_(		"vprintf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vsprintf = _rpythonic_function_(		"vsprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

snprintf = _rpythonic_function_(		"snprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__maxlen",		ctypes.c_uint),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

vsnprintf = _rpythonic_function_(		"vsnprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__maxlen",		ctypes.c_uint),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vdprintf = _rpythonic_function_(		"vdprintf", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__fmt",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

dprintf = _rpythonic_function_(		"dprintf", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__fmt",		ctypes.POINTER(ctypes.c_char)),] )

fscanf = _rpythonic_function_(		"fscanf", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

scanf = _rpythonic_function_(		"scanf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

sscanf = _rpythonic_function_(		"sscanf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

vfscanf = _rpythonic_function_(		"vfscanf", ctypes.c_int, [
	("__s",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vscanf = _rpythonic_function_(		"vscanf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vsscanf = _rpythonic_function_(		"vsscanf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

fgetc = _rpythonic_function_(		"fgetc", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getc = _rpythonic_function_(		"getc", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getchar = _rpythonic_function_(		"getchar", ctypes.c_int, [] )

getc_unlocked = _rpythonic_function_(		"getc_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getchar_unlocked = _rpythonic_function_(		"getchar_unlocked", ctypes.c_int, [] )

fgetc_unlocked = _rpythonic_function_(		"fgetc_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fputc = _rpythonic_function_(		"fputc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putc = _rpythonic_function_(		"putc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putchar = _rpythonic_function_(		"putchar", ctypes.c_int, [
	("__c",		ctypes.c_int),] )

fputc_unlocked = _rpythonic_function_(		"fputc_unlocked", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putc_unlocked = _rpythonic_function_(		"putc_unlocked", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putchar_unlocked = _rpythonic_function_(		"putchar_unlocked", ctypes.c_int, [
	("__c",		ctypes.c_int),] )

getw = _rpythonic_function_(		"getw", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putw = _rpythonic_function_(		"putw", ctypes.c_int, [
	("__w",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fgets = _rpythonic_function_(		"fgets", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

gets = _rpythonic_function_(		"gets", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

getdelim = _rpythonic_function_(		"getdelim", ctypes.c_int, [
	("__lineptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__n",		ctypes.POINTER(ctypes.c_uint)),
	("__delimiter",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getline = _rpythonic_function_(		"getline", ctypes.c_int, [
	("__lineptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__n",		ctypes.POINTER(ctypes.c_uint)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fputs = _rpythonic_function_(		"fputs", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

puts = _rpythonic_function_(		"puts", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

ungetc = _rpythonic_function_(		"ungetc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fread = _rpythonic_function_(		"fread", ctypes.c_uint, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint),
	("__n",		ctypes.c_uint),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fwrite = _rpythonic_function_(		"fwrite", ctypes.c_uint, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint),
	("__n",		ctypes.c_uint),
	("__s",		ctypes.POINTER(_IO_FILE)),] )

fread_unlocked = _rpythonic_function_(		"fread_unlocked", ctypes.c_uint, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint),
	("__n",		ctypes.c_uint),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fwrite_unlocked = _rpythonic_function_(		"fwrite_unlocked", ctypes.c_uint, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint),
	("__n",		ctypes.c_uint),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fseek = _rpythonic_function_(		"fseek", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__off",		ctypes.c_int64),
	("__whence",		ctypes.c_int),] )

ftell = _rpythonic_function_(		"ftell", ctypes.c_int64, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

rewind = _rpythonic_function_(		"rewind", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fseeko = _rpythonic_function_(		"fseeko", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__off",		ctypes.c_int64),
	("__whence",		ctypes.c_int),] )

ftello = _rpythonic_function_(		"ftello", ctypes.c_int64, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fgetpos = _rpythonic_function_(		"fgetpos", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__pos",		ctypes.POINTER(_G_fpos_t)),] )

fsetpos = _rpythonic_function_(		"fsetpos", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__pos",		ctypes.POINTER(_G_fpos_t)),] )

clearerr = _rpythonic_function_(		"clearerr", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

feof = _rpythonic_function_(		"feof", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ferror = _rpythonic_function_(		"ferror", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

clearerr_unlocked = _rpythonic_function_(		"clearerr_unlocked", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

feof_unlocked = _rpythonic_function_(		"feof_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ferror_unlocked = _rpythonic_function_(		"ferror_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

perror = _rpythonic_function_(		"perror", ctypes.c_void_p, [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

fileno = _rpythonic_function_(		"fileno", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fileno_unlocked = _rpythonic_function_(		"fileno_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

popen = _rpythonic_function_(		"popen", ctypes.POINTER(_IO_FILE), [
	("__command",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

pclose = _rpythonic_function_(		"pclose", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ctermid = _rpythonic_function_(		"ctermid", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

flockfile = _rpythonic_function_(		"flockfile", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ftrylockfile = _rpythonic_function_(		"ftrylockfile", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

funlockfile = _rpythonic_function_(		"funlockfile", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fftw_execute = _rpythonic_function_(		"fftw_execute", ctypes.c_void_p, [
	("p",		ctypes.POINTER(fftw_plan_s)),] )

fftw_plan_dft = _rpythonic_function_(		"fftw_plan_dft", ctypes.POINTER(fftw_plan_s), [
	("rank",		ctypes.c_int),
	("n",		ctypes.POINTER(ctypes.c_int)),
	("C_in",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("out",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("sign",		ctypes.c_int),
	("flags",		ctypes.c_void_p),] )

fftw_plan_dft_1d = _rpythonic_function_(		"fftw_plan_dft_1d", ctypes.POINTER(fftw_plan_s), [
	("n",		ctypes.c_int),
	("C_in",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("out",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("sign",		ctypes.c_int),
	("flags",		ctypes.c_void_p),] )

fftw_plan_dft_2d = _rpythonic_function_(		"fftw_plan_dft_2d", ctypes.POINTER(fftw_plan_s), [
	("n0",		ctypes.c_int),
	("n1",		ctypes.c_int),
	("C_in",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("out",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("sign",		ctypes.c_int),
	("flags",		ctypes.c_void_p),] )

fftw_plan_dft_3d = _rpythonic_function_(		"fftw_plan_dft_3d", ctypes.POINTER(fftw_plan_s), [
	("n0",		ctypes.c_int),
	("n1",		ctypes.c_int),
	("n2",		ctypes.c_int),
	("C_in",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("out",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("sign",		ctypes.c_int),
	("flags",		ctypes.c_void_p),] )

fftw_plan_many_dft = _rpythonic_function_(		"fftw_plan_many_dft", ctypes.POINTER(fftw_plan_s), [
	("rank",		ctypes.c_int),
	("n",		ctypes.POINTER(ctypes.c_int)),
	("howmany",		ctypes.c_int),
	("C_in",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("inembed",		ctypes.POINTER(ctypes.c_int)),
	("istride",		ctypes.c_int),
	("idist",		ctypes.c_int),
	("out",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("onembed",		ctypes.POINTER(ctypes.c_int)),
	("ostride",		ctypes.c_int),
	("odist",		ctypes.c_int),
	("sign",		ctypes.c_int),
	("flags",		ctypes.c_void_p),] )

fftw_plan_guru_dft = _rpythonic_function_(		"fftw_plan_guru_dft", ctypes.POINTER(fftw_plan_s), [
	("rank",		ctypes.c_int),
	("dims",		ctypes.POINTER(fftw_iodim_do_not_use_me)),
	("howmany_rank",		ctypes.c_int),
	("howmany_dims",		ctypes.POINTER(fftw_iodim_do_not_use_me)),
	("C_in",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("out",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("sign",		ctypes.c_int),
	("flags",		ctypes.c_void_p),] )

fftw_plan_guru_split_dft = _rpythonic_function_(		"fftw_plan_guru_split_dft", ctypes.POINTER(fftw_plan_s), [
	("rank",		ctypes.c_int),
	("dims",		ctypes.POINTER(fftw_iodim_do_not_use_me)),
	("howmany_rank",		ctypes.c_int),
	("howmany_dims",		ctypes.POINTER(fftw_iodim_do_not_use_me)),
	("ri",		ctypes.POINTER(ctypes.c_double)),
	("ii",		ctypes.POINTER(ctypes.c_double)),
	("ro",		ctypes.POINTER(ctypes.c_double)),
	("io",		ctypes.POINTER(ctypes.c_double)),
	("flags",		ctypes.c_void_p),] )

fftw_plan_guru64_dft = _rpythonic_function_(		"fftw_plan_guru64_dft", ctypes.POINTER(fftw_plan_s), [
	("rank",		ctypes.c_int),
	("dims",		ctypes.POINTER(fftw_iodim64_do_not_use_me)),
	("howmany_rank",		ctypes.c_int),
	("howmany_dims",		ctypes.POINTER(fftw_iodim64_do_not_use_me)),
	("C_in",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("out",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("sign",		ctypes.c_int),
	("flags",		ctypes.c_void_p),] )

fftw_plan_guru64_split_dft = _rpythonic_function_(		"fftw_plan_guru64_split_dft", ctypes.POINTER(fftw_plan_s), [
	("rank",		ctypes.c_int),
	("dims",		ctypes.POINTER(fftw_iodim64_do_not_use_me)),
	("howmany_rank",		ctypes.c_int),
	("howmany_dims",		ctypes.POINTER(fftw_iodim64_do_not_use_me)),
	("ri",		ctypes.POINTER(ctypes.c_double)),
	("ii",		ctypes.POINTER(ctypes.c_double)),
	("ro",		ctypes.POINTER(ctypes.c_double)),
	("io",		ctypes.POINTER(ctypes.c_double)),
	("flags",		ctypes.c_void_p),] )

fftw_execute_dft = _rpythonic_function_(		"fftw_execute_dft", ctypes.c_void_p, [
	("p",		ctypes.POINTER(fftw_plan_s)),
	("C_in",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("out",		ctypes.POINTER(( ctypes.c_double * 2 ))),] )

fftw_execute_split_dft = _rpythonic_function_(		"fftw_execute_split_dft", ctypes.c_void_p, [
	("p",		ctypes.POINTER(fftw_plan_s)),
	("ri",		ctypes.POINTER(ctypes.c_double)),
	("ii",		ctypes.POINTER(ctypes.c_double)),
	("ro",		ctypes.POINTER(ctypes.c_double)),
	("io",		ctypes.POINTER(ctypes.c_double)),] )

fftw_plan_many_dft_r2c = _rpythonic_function_(		"fftw_plan_many_dft_r2c", ctypes.POINTER(fftw_plan_s), [
	("rank",		ctypes.c_int),
	("n",		ctypes.POINTER(ctypes.c_int)),
	("howmany",		ctypes.c_int),
	("C_in",		ctypes.POINTER(ctypes.c_double)),
	("inembed",		ctypes.POINTER(ctypes.c_int)),
	("istride",		ctypes.c_int),
	("idist",		ctypes.c_int),
	("out",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("onembed",		ctypes.POINTER(ctypes.c_int)),
	("ostride",		ctypes.c_int),
	("odist",		ctypes.c_int),
	("flags",		ctypes.c_void_p),] )

fftw_plan_dft_r2c = _rpythonic_function_(		"fftw_plan_dft_r2c", ctypes.POINTER(fftw_plan_s), [
	("rank",		ctypes.c_int),
	("n",		ctypes.POINTER(ctypes.c_int)),
	("C_in",		ctypes.POINTER(ctypes.c_double)),
	("out",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("flags",		ctypes.c_void_p),] )

fftw_plan_dft_r2c_1d = _rpythonic_function_(		"fftw_plan_dft_r2c_1d", ctypes.POINTER(fftw_plan_s), [
	("n",		ctypes.c_int),
	("C_in",		ctypes.POINTER(ctypes.c_double)),
	("out",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("flags",		ctypes.c_void_p),] )

fftw_plan_dft_r2c_2d = _rpythonic_function_(		"fftw_plan_dft_r2c_2d", ctypes.POINTER(fftw_plan_s), [
	("n0",		ctypes.c_int),
	("n1",		ctypes.c_int),
	("C_in",		ctypes.POINTER(ctypes.c_double)),
	("out",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("flags",		ctypes.c_void_p),] )

fftw_plan_dft_r2c_3d = _rpythonic_function_(		"fftw_plan_dft_r2c_3d", ctypes.POINTER(fftw_plan_s), [
	("n0",		ctypes.c_int),
	("n1",		ctypes.c_int),
	("n2",		ctypes.c_int),
	("C_in",		ctypes.POINTER(ctypes.c_double)),
	("out",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("flags",		ctypes.c_void_p),] )

fftw_plan_many_dft_c2r = _rpythonic_function_(		"fftw_plan_many_dft_c2r", ctypes.POINTER(fftw_plan_s), [
	("rank",		ctypes.c_int),
	("n",		ctypes.POINTER(ctypes.c_int)),
	("howmany",		ctypes.c_int),
	("C_in",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("inembed",		ctypes.POINTER(ctypes.c_int)),
	("istride",		ctypes.c_int),
	("idist",		ctypes.c_int),
	("out",		ctypes.POINTER(ctypes.c_double)),
	("onembed",		ctypes.POINTER(ctypes.c_int)),
	("ostride",		ctypes.c_int),
	("odist",		ctypes.c_int),
	("flags",		ctypes.c_void_p),] )

fftw_plan_dft_c2r = _rpythonic_function_(		"fftw_plan_dft_c2r", ctypes.POINTER(fftw_plan_s), [
	("rank",		ctypes.c_int),
	("n",		ctypes.POINTER(ctypes.c_int)),
	("C_in",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("out",		ctypes.POINTER(ctypes.c_double)),
	("flags",		ctypes.c_void_p),] )

fftw_plan_dft_c2r_1d = _rpythonic_function_(		"fftw_plan_dft_c2r_1d", ctypes.POINTER(fftw_plan_s), [
	("n",		ctypes.c_int),
	("C_in",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("out",		ctypes.POINTER(ctypes.c_double)),
	("flags",		ctypes.c_void_p),] )

fftw_plan_dft_c2r_2d = _rpythonic_function_(		"fftw_plan_dft_c2r_2d", ctypes.POINTER(fftw_plan_s), [
	("n0",		ctypes.c_int),
	("n1",		ctypes.c_int),
	("C_in",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("out",		ctypes.POINTER(ctypes.c_double)),
	("flags",		ctypes.c_void_p),] )

fftw_plan_dft_c2r_3d = _rpythonic_function_(		"fftw_plan_dft_c2r_3d", ctypes.POINTER(fftw_plan_s), [
	("n0",		ctypes.c_int),
	("n1",		ctypes.c_int),
	("n2",		ctypes.c_int),
	("C_in",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("out",		ctypes.POINTER(ctypes.c_double)),
	("flags",		ctypes.c_void_p),] )

fftw_plan_guru_dft_r2c = _rpythonic_function_(		"fftw_plan_guru_dft_r2c", ctypes.POINTER(fftw_plan_s), [
	("rank",		ctypes.c_int),
	("dims",		ctypes.POINTER(fftw_iodim_do_not_use_me)),
	("howmany_rank",		ctypes.c_int),
	("howmany_dims",		ctypes.POINTER(fftw_iodim_do_not_use_me)),
	("C_in",		ctypes.POINTER(ctypes.c_double)),
	("out",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("flags",		ctypes.c_void_p),] )

fftw_plan_guru_dft_c2r = _rpythonic_function_(		"fftw_plan_guru_dft_c2r", ctypes.POINTER(fftw_plan_s), [
	("rank",		ctypes.c_int),
	("dims",		ctypes.POINTER(fftw_iodim_do_not_use_me)),
	("howmany_rank",		ctypes.c_int),
	("howmany_dims",		ctypes.POINTER(fftw_iodim_do_not_use_me)),
	("C_in",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("out",		ctypes.POINTER(ctypes.c_double)),
	("flags",		ctypes.c_void_p),] )

fftw_plan_guru_split_dft_r2c = _rpythonic_function_(		"fftw_plan_guru_split_dft_r2c", ctypes.POINTER(fftw_plan_s), [
	("rank",		ctypes.c_int),
	("dims",		ctypes.POINTER(fftw_iodim_do_not_use_me)),
	("howmany_rank",		ctypes.c_int),
	("howmany_dims",		ctypes.POINTER(fftw_iodim_do_not_use_me)),
	("C_in",		ctypes.POINTER(ctypes.c_double)),
	("ro",		ctypes.POINTER(ctypes.c_double)),
	("io",		ctypes.POINTER(ctypes.c_double)),
	("flags",		ctypes.c_void_p),] )

fftw_plan_guru_split_dft_c2r = _rpythonic_function_(		"fftw_plan_guru_split_dft_c2r", ctypes.POINTER(fftw_plan_s), [
	("rank",		ctypes.c_int),
	("dims",		ctypes.POINTER(fftw_iodim_do_not_use_me)),
	("howmany_rank",		ctypes.c_int),
	("howmany_dims",		ctypes.POINTER(fftw_iodim_do_not_use_me)),
	("ri",		ctypes.POINTER(ctypes.c_double)),
	("ii",		ctypes.POINTER(ctypes.c_double)),
	("out",		ctypes.POINTER(ctypes.c_double)),
	("flags",		ctypes.c_void_p),] )

fftw_plan_guru64_dft_r2c = _rpythonic_function_(		"fftw_plan_guru64_dft_r2c", ctypes.POINTER(fftw_plan_s), [
	("rank",		ctypes.c_int),
	("dims",		ctypes.POINTER(fftw_iodim64_do_not_use_me)),
	("howmany_rank",		ctypes.c_int),
	("howmany_dims",		ctypes.POINTER(fftw_iodim64_do_not_use_me)),
	("C_in",		ctypes.POINTER(ctypes.c_double)),
	("out",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("flags",		ctypes.c_void_p),] )

fftw_plan_guru64_dft_c2r = _rpythonic_function_(		"fftw_plan_guru64_dft_c2r", ctypes.POINTER(fftw_plan_s), [
	("rank",		ctypes.c_int),
	("dims",		ctypes.POINTER(fftw_iodim64_do_not_use_me)),
	("howmany_rank",		ctypes.c_int),
	("howmany_dims",		ctypes.POINTER(fftw_iodim64_do_not_use_me)),
	("C_in",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("out",		ctypes.POINTER(ctypes.c_double)),
	("flags",		ctypes.c_void_p),] )

fftw_plan_guru64_split_dft_r2c = _rpythonic_function_(		"fftw_plan_guru64_split_dft_r2c", ctypes.POINTER(fftw_plan_s), [
	("rank",		ctypes.c_int),
	("dims",		ctypes.POINTER(fftw_iodim64_do_not_use_me)),
	("howmany_rank",		ctypes.c_int),
	("howmany_dims",		ctypes.POINTER(fftw_iodim64_do_not_use_me)),
	("C_in",		ctypes.POINTER(ctypes.c_double)),
	("ro",		ctypes.POINTER(ctypes.c_double)),
	("io",		ctypes.POINTER(ctypes.c_double)),
	("flags",		ctypes.c_void_p),] )

fftw_plan_guru64_split_dft_c2r = _rpythonic_function_(		"fftw_plan_guru64_split_dft_c2r", ctypes.POINTER(fftw_plan_s), [
	("rank",		ctypes.c_int),
	("dims",		ctypes.POINTER(fftw_iodim64_do_not_use_me)),
	("howmany_rank",		ctypes.c_int),
	("howmany_dims",		ctypes.POINTER(fftw_iodim64_do_not_use_me)),
	("ri",		ctypes.POINTER(ctypes.c_double)),
	("ii",		ctypes.POINTER(ctypes.c_double)),
	("out",		ctypes.POINTER(ctypes.c_double)),
	("flags",		ctypes.c_void_p),] )

fftw_execute_dft_r2c = _rpythonic_function_(		"fftw_execute_dft_r2c", ctypes.c_void_p, [
	("p",		ctypes.POINTER(fftw_plan_s)),
	("C_in",		ctypes.POINTER(ctypes.c_double)),
	("out",		ctypes.POINTER(( ctypes.c_double * 2 ))),] )

fftw_execute_dft_c2r = _rpythonic_function_(		"fftw_execute_dft_c2r", ctypes.c_void_p, [
	("p",		ctypes.POINTER(fftw_plan_s)),
	("C_in",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("out",		ctypes.POINTER(ctypes.c_double)),] )

fftw_execute_split_dft_r2c = _rpythonic_function_(		"fftw_execute_split_dft_r2c", ctypes.c_void_p, [
	("p",		ctypes.POINTER(fftw_plan_s)),
	("C_in",		ctypes.POINTER(ctypes.c_double)),
	("ro",		ctypes.POINTER(ctypes.c_double)),
	("io",		ctypes.POINTER(ctypes.c_double)),] )

fftw_execute_split_dft_c2r = _rpythonic_function_(		"fftw_execute_split_dft_c2r", ctypes.c_void_p, [
	("p",		ctypes.POINTER(fftw_plan_s)),
	("ri",		ctypes.POINTER(ctypes.c_double)),
	("ii",		ctypes.POINTER(ctypes.c_double)),
	("out",		ctypes.POINTER(ctypes.c_double)),] )

fftw_plan_many_r2r = _rpythonic_function_(		"fftw_plan_many_r2r", ctypes.POINTER(fftw_plan_s), [
	("rank",		ctypes.c_int),
	("n",		ctypes.POINTER(ctypes.c_int)),
	("howmany",		ctypes.c_int),
	("C_in",		ctypes.POINTER(ctypes.c_double)),
	("inembed",		ctypes.POINTER(ctypes.c_int)),
	("istride",		ctypes.c_int),
	("idist",		ctypes.c_int),
	("out",		ctypes.POINTER(ctypes.c_double)),
	("onembed",		ctypes.POINTER(ctypes.c_int)),
	("ostride",		ctypes.c_int),
	("odist",		ctypes.c_int),
	("kind",		ctypes.POINTER(ctypes.c_int)),
	("flags",		ctypes.c_void_p),] )

fftw_plan_r2r = _rpythonic_function_(		"fftw_plan_r2r", ctypes.POINTER(fftw_plan_s), [
	("rank",		ctypes.c_int),
	("n",		ctypes.POINTER(ctypes.c_int)),
	("C_in",		ctypes.POINTER(ctypes.c_double)),
	("out",		ctypes.POINTER(ctypes.c_double)),
	("kind",		ctypes.POINTER(ctypes.c_int)),
	("flags",		ctypes.c_void_p),] )

fftw_plan_r2r_1d = _rpythonic_function_(		"fftw_plan_r2r_1d", ctypes.POINTER(fftw_plan_s), [
	("n",		ctypes.c_int),
	("C_in",		ctypes.POINTER(ctypes.c_double)),
	("out",		ctypes.POINTER(ctypes.c_double)),
	("kind",		ctypes.c_int),
	("flags",		ctypes.c_void_p),] )

fftw_plan_r2r_2d = _rpythonic_function_(		"fftw_plan_r2r_2d", ctypes.POINTER(fftw_plan_s), [
	("n0",		ctypes.c_int),
	("n1",		ctypes.c_int),
	("C_in",		ctypes.POINTER(ctypes.c_double)),
	("out",		ctypes.POINTER(ctypes.c_double)),
	("kind0",		ctypes.c_int),
	("kind1",		ctypes.c_int),
	("flags",		ctypes.c_void_p),] )

fftw_plan_r2r_3d = _rpythonic_function_(		"fftw_plan_r2r_3d", ctypes.POINTER(fftw_plan_s), [
	("n0",		ctypes.c_int),
	("n1",		ctypes.c_int),
	("n2",		ctypes.c_int),
	("C_in",		ctypes.POINTER(ctypes.c_double)),
	("out",		ctypes.POINTER(ctypes.c_double)),
	("kind0",		ctypes.c_int),
	("kind1",		ctypes.c_int),
	("kind2",		ctypes.c_int),
	("flags",		ctypes.c_void_p),] )

fftw_plan_guru_r2r = _rpythonic_function_(		"fftw_plan_guru_r2r", ctypes.POINTER(fftw_plan_s), [
	("rank",		ctypes.c_int),
	("dims",		ctypes.POINTER(fftw_iodim_do_not_use_me)),
	("howmany_rank",		ctypes.c_int),
	("howmany_dims",		ctypes.POINTER(fftw_iodim_do_not_use_me)),
	("C_in",		ctypes.POINTER(ctypes.c_double)),
	("out",		ctypes.POINTER(ctypes.c_double)),
	("kind",		ctypes.POINTER(ctypes.c_int)),
	("flags",		ctypes.c_void_p),] )

fftw_plan_guru64_r2r = _rpythonic_function_(		"fftw_plan_guru64_r2r", ctypes.POINTER(fftw_plan_s), [
	("rank",		ctypes.c_int),
	("dims",		ctypes.POINTER(fftw_iodim64_do_not_use_me)),
	("howmany_rank",		ctypes.c_int),
	("howmany_dims",		ctypes.POINTER(fftw_iodim64_do_not_use_me)),
	("C_in",		ctypes.POINTER(ctypes.c_double)),
	("out",		ctypes.POINTER(ctypes.c_double)),
	("kind",		ctypes.POINTER(ctypes.c_int)),
	("flags",		ctypes.c_void_p),] )

fftw_execute_r2r = _rpythonic_function_(		"fftw_execute_r2r", ctypes.c_void_p, [
	("p",		ctypes.POINTER(fftw_plan_s)),
	("C_in",		ctypes.POINTER(ctypes.c_double)),
	("out",		ctypes.POINTER(ctypes.c_double)),] )

fftw_destroy_plan = _rpythonic_function_(		"fftw_destroy_plan", ctypes.c_void_p, [
	("p",		ctypes.POINTER(fftw_plan_s)),] )

fftw_forget_wisdom = _rpythonic_function_(		"fftw_forget_wisdom", ctypes.c_void_p, [] )

fftw_cleanup = _rpythonic_function_(		"fftw_cleanup", ctypes.c_void_p, [] )

fftw_set_timelimit = _rpythonic_function_(		"fftw_set_timelimit", ctypes.c_void_p, [
	("none",		ctypes.c_double),] )

fftw_plan_with_nthreads = _rpythonic_function_(		"fftw_plan_with_nthreads", ctypes.c_void_p, [
	("nthreads",		ctypes.c_int),] )

fftw_init_threads = _rpythonic_function_(		"fftw_init_threads", ctypes.c_int, [] )

fftw_cleanup_threads = _rpythonic_function_(		"fftw_cleanup_threads", ctypes.c_void_p, [] )

fftw_export_wisdom_to_file = _rpythonic_function_(		"fftw_export_wisdom_to_file", ctypes.c_void_p, [
	("output_file",		ctypes.POINTER(_IO_FILE)),] )

fftw_export_wisdom_to_string = _rpythonic_function_(		"fftw_export_wisdom_to_string", ctypes.POINTER(ctypes.c_char), [] )

fftw_export_wisdom = _rpythonic_function_(		"fftw_export_wisdom", ctypes.c_void_p, [
	("write_char",		ctypes.c_void_p),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

write_char = _rpythonic_function_(		"write_char", ctypes.c_void_p, [
	("c",		ctypes.c_char),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

fftw_import_system_wisdom = _rpythonic_function_(		"fftw_import_system_wisdom", ctypes.c_int, [] )

fftw_import_wisdom_from_file = _rpythonic_function_(		"fftw_import_wisdom_from_file", ctypes.c_int, [
	("input_file",		ctypes.POINTER(_IO_FILE)),] )

fftw_import_wisdom_from_string = _rpythonic_function_(		"fftw_import_wisdom_from_string", ctypes.c_int, [
	("input_string",		ctypes.POINTER(ctypes.c_char)),] )

fftw_import_wisdom = _rpythonic_function_(		"fftw_import_wisdom", ctypes.c_int, [
	("read_char",		ctypes.c_void_p),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

read_char = _rpythonic_function_(		"read_char", ctypes.c_int, [] )

fftw_fprint_plan = _rpythonic_function_(		"fftw_fprint_plan", ctypes.c_void_p, [
	("p",		ctypes.POINTER(fftw_plan_s)),
	("output_file",		ctypes.POINTER(_IO_FILE)),] )

fftw_print_plan = _rpythonic_function_(		"fftw_print_plan", ctypes.c_void_p, [
	("p",		ctypes.POINTER(fftw_plan_s)),] )

fftw_malloc = _rpythonic_function_(		"fftw_malloc", ctypes.POINTER(ctypes.c_void_p), [
	("n",		ctypes.c_uint),] )

fftw_free = _rpythonic_function_(		"fftw_free", ctypes.c_void_p, [("p",		ctypes.c_void_p)] )

fftw_flops = _rpythonic_function_(		"fftw_flops", ctypes.c_void_p, [
	("p",		ctypes.POINTER(fftw_plan_s)),
	("add",		ctypes.POINTER(ctypes.c_double)),
	("mul",		ctypes.POINTER(ctypes.c_double)),
	("fmas",		ctypes.POINTER(ctypes.c_double)),] )

fftw_estimate_cost = _rpythonic_function_(		"fftw_estimate_cost", ctypes.c_double, [
	("p",		ctypes.POINTER(fftw_plan_s)),] )

fftwf_execute = _rpythonic_function_(		"fftwf_execute", ctypes.c_void_p, [
	("p",		ctypes.POINTER(fftwf_plan_s)),] )

fftwf_plan_dft = _rpythonic_function_(		"fftwf_plan_dft", ctypes.POINTER(fftwf_plan_s), [
	("rank",		ctypes.c_int),
	("n",		ctypes.POINTER(ctypes.c_int)),
	("C_in",		ctypes.POINTER(( ctypes.c_float * 2 ))),
	("out",		ctypes.POINTER(( ctypes.c_float * 2 ))),
	("sign",		ctypes.c_int),
	("flags",		ctypes.c_void_p),] )

fftwf_plan_dft_1d = _rpythonic_function_(		"fftwf_plan_dft_1d", ctypes.POINTER(fftwf_plan_s), [
	("n",		ctypes.c_int),
	("C_in",		ctypes.POINTER(( ctypes.c_float * 2 ))),
	("out",		ctypes.POINTER(( ctypes.c_float * 2 ))),
	("sign",		ctypes.c_int),
	("flags",		ctypes.c_void_p),] )

fftwf_plan_dft_2d = _rpythonic_function_(		"fftwf_plan_dft_2d", ctypes.POINTER(fftwf_plan_s), [
	("n0",		ctypes.c_int),
	("n1",		ctypes.c_int),
	("C_in",		ctypes.POINTER(( ctypes.c_float * 2 ))),
	("out",		ctypes.POINTER(( ctypes.c_float * 2 ))),
	("sign",		ctypes.c_int),
	("flags",		ctypes.c_void_p),] )

fftwf_plan_dft_3d = _rpythonic_function_(		"fftwf_plan_dft_3d", ctypes.POINTER(fftwf_plan_s), [
	("n0",		ctypes.c_int),
	("n1",		ctypes.c_int),
	("n2",		ctypes.c_int),
	("C_in",		ctypes.POINTER(( ctypes.c_float * 2 ))),
	("out",		ctypes.POINTER(( ctypes.c_float * 2 ))),
	("sign",		ctypes.c_int),
	("flags",		ctypes.c_void_p),] )

fftwf_plan_many_dft = _rpythonic_function_(		"fftwf_plan_many_dft", ctypes.POINTER(fftwf_plan_s), [
	("rank",		ctypes.c_int),
	("n",		ctypes.POINTER(ctypes.c_int)),
	("howmany",		ctypes.c_int),
	("C_in",		ctypes.POINTER(( ctypes.c_float * 2 ))),
	("inembed",		ctypes.POINTER(ctypes.c_int)),
	("istride",		ctypes.c_int),
	("idist",		ctypes.c_int),
	("out",		ctypes.POINTER(( ctypes.c_float * 2 ))),
	("onembed",		ctypes.POINTER(ctypes.c_int)),
	("ostride",		ctypes.c_int),
	("odist",		ctypes.c_int),
	("sign",		ctypes.c_int),
	("flags",		ctypes.c_void_p),] )

fftwf_plan_guru_dft = _rpythonic_function_(		"fftwf_plan_guru_dft", ctypes.POINTER(fftwf_plan_s), [
	("rank",		ctypes.c_int),
	("dims",		ctypes.POINTER(fftw_iodim_do_not_use_me)),
	("howmany_rank",		ctypes.c_int),
	("howmany_dims",		ctypes.POINTER(fftw_iodim_do_not_use_me)),
	("C_in",		ctypes.POINTER(( ctypes.c_float * 2 ))),
	("out",		ctypes.POINTER(( ctypes.c_float * 2 ))),
	("sign",		ctypes.c_int),
	("flags",		ctypes.c_void_p),] )

fftwf_plan_guru_split_dft = _rpythonic_function_(		"fftwf_plan_guru_split_dft", ctypes.POINTER(fftwf_plan_s), [
	("rank",		ctypes.c_int),
	("dims",		ctypes.POINTER(fftw_iodim_do_not_use_me)),
	("howmany_rank",		ctypes.c_int),
	("howmany_dims",		ctypes.POINTER(fftw_iodim_do_not_use_me)),
	("ri",		ctypes.POINTER(ctypes.c_float)),
	("ii",		ctypes.POINTER(ctypes.c_float)),
	("ro",		ctypes.POINTER(ctypes.c_float)),
	("io",		ctypes.POINTER(ctypes.c_float)),
	("flags",		ctypes.c_void_p),] )

fftwf_plan_guru64_dft = _rpythonic_function_(		"fftwf_plan_guru64_dft", ctypes.POINTER(fftwf_plan_s), [
	("rank",		ctypes.c_int),
	("dims",		ctypes.POINTER(fftw_iodim64_do_not_use_me)),
	("howmany_rank",		ctypes.c_int),
	("howmany_dims",		ctypes.POINTER(fftw_iodim64_do_not_use_me)),
	("C_in",		ctypes.POINTER(( ctypes.c_float * 2 ))),
	("out",		ctypes.POINTER(( ctypes.c_float * 2 ))),
	("sign",		ctypes.c_int),
	("flags",		ctypes.c_void_p),] )

fftwf_plan_guru64_split_dft = _rpythonic_function_(		"fftwf_plan_guru64_split_dft", ctypes.POINTER(fftwf_plan_s), [
	("rank",		ctypes.c_int),
	("dims",		ctypes.POINTER(fftw_iodim64_do_not_use_me)),
	("howmany_rank",		ctypes.c_int),
	("howmany_dims",		ctypes.POINTER(fftw_iodim64_do_not_use_me)),
	("ri",		ctypes.POINTER(ctypes.c_float)),
	("ii",		ctypes.POINTER(ctypes.c_float)),
	("ro",		ctypes.POINTER(ctypes.c_float)),
	("io",		ctypes.POINTER(ctypes.c_float)),
	("flags",		ctypes.c_void_p),] )

fftwf_execute_dft = _rpythonic_function_(		"fftwf_execute_dft", ctypes.c_void_p, [
	("p",		ctypes.POINTER(fftwf_plan_s)),
	("C_in",		ctypes.POINTER(( ctypes.c_float * 2 ))),
	("out",		ctypes.POINTER(( ctypes.c_float * 2 ))),] )

fftwf_execute_split_dft = _rpythonic_function_(		"fftwf_execute_split_dft", ctypes.c_void_p, [
	("p",		ctypes.POINTER(fftwf_plan_s)),
	("ri",		ctypes.POINTER(ctypes.c_float)),
	("ii",		ctypes.POINTER(ctypes.c_float)),
	("ro",		ctypes.POINTER(ctypes.c_float)),
	("io",		ctypes.POINTER(ctypes.c_float)),] )

fftwf_plan_many_dft_r2c = _rpythonic_function_(		"fftwf_plan_many_dft_r2c", ctypes.POINTER(fftwf_plan_s), [
	("rank",		ctypes.c_int),
	("n",		ctypes.POINTER(ctypes.c_int)),
	("howmany",		ctypes.c_int),
	("C_in",		ctypes.POINTER(ctypes.c_float)),
	("inembed",		ctypes.POINTER(ctypes.c_int)),
	("istride",		ctypes.c_int),
	("idist",		ctypes.c_int),
	("out",		ctypes.POINTER(( ctypes.c_float * 2 ))),
	("onembed",		ctypes.POINTER(ctypes.c_int)),
	("ostride",		ctypes.c_int),
	("odist",		ctypes.c_int),
	("flags",		ctypes.c_void_p),] )

fftwf_plan_dft_r2c = _rpythonic_function_(		"fftwf_plan_dft_r2c", ctypes.POINTER(fftwf_plan_s), [
	("rank",		ctypes.c_int),
	("n",		ctypes.POINTER(ctypes.c_int)),
	("C_in",		ctypes.POINTER(ctypes.c_float)),
	("out",		ctypes.POINTER(( ctypes.c_float * 2 ))),
	("flags",		ctypes.c_void_p),] )

fftwf_plan_dft_r2c_1d = _rpythonic_function_(		"fftwf_plan_dft_r2c_1d", ctypes.POINTER(fftwf_plan_s), [
	("n",		ctypes.c_int),
	("C_in",		ctypes.POINTER(ctypes.c_float)),
	("out",		ctypes.POINTER(( ctypes.c_float * 2 ))),
	("flags",		ctypes.c_void_p),] )

fftwf_plan_dft_r2c_2d = _rpythonic_function_(		"fftwf_plan_dft_r2c_2d", ctypes.POINTER(fftwf_plan_s), [
	("n0",		ctypes.c_int),
	("n1",		ctypes.c_int),
	("C_in",		ctypes.POINTER(ctypes.c_float)),
	("out",		ctypes.POINTER(( ctypes.c_float * 2 ))),
	("flags",		ctypes.c_void_p),] )

fftwf_plan_dft_r2c_3d = _rpythonic_function_(		"fftwf_plan_dft_r2c_3d", ctypes.POINTER(fftwf_plan_s), [
	("n0",		ctypes.c_int),
	("n1",		ctypes.c_int),
	("n2",		ctypes.c_int),
	("C_in",		ctypes.POINTER(ctypes.c_float)),
	("out",		ctypes.POINTER(( ctypes.c_float * 2 ))),
	("flags",		ctypes.c_void_p),] )

fftwf_plan_many_dft_c2r = _rpythonic_function_(		"fftwf_plan_many_dft_c2r", ctypes.POINTER(fftwf_plan_s), [
	("rank",		ctypes.c_int),
	("n",		ctypes.POINTER(ctypes.c_int)),
	("howmany",		ctypes.c_int),
	("C_in",		ctypes.POINTER(( ctypes.c_float * 2 ))),
	("inembed",		ctypes.POINTER(ctypes.c_int)),
	("istride",		ctypes.c_int),
	("idist",		ctypes.c_int),
	("out",		ctypes.POINTER(ctypes.c_float)),
	("onembed",		ctypes.POINTER(ctypes.c_int)),
	("ostride",		ctypes.c_int),
	("odist",		ctypes.c_int),
	("flags",		ctypes.c_void_p),] )

fftwf_plan_dft_c2r = _rpythonic_function_(		"fftwf_plan_dft_c2r", ctypes.POINTER(fftwf_plan_s), [
	("rank",		ctypes.c_int),
	("n",		ctypes.POINTER(ctypes.c_int)),
	("C_in",		ctypes.POINTER(( ctypes.c_float * 2 ))),
	("out",		ctypes.POINTER(ctypes.c_float)),
	("flags",		ctypes.c_void_p),] )

fftwf_plan_dft_c2r_1d = _rpythonic_function_(		"fftwf_plan_dft_c2r_1d", ctypes.POINTER(fftwf_plan_s), [
	("n",		ctypes.c_int),
	("C_in",		ctypes.POINTER(( ctypes.c_float * 2 ))),
	("out",		ctypes.POINTER(ctypes.c_float)),
	("flags",		ctypes.c_void_p),] )

fftwf_plan_dft_c2r_2d = _rpythonic_function_(		"fftwf_plan_dft_c2r_2d", ctypes.POINTER(fftwf_plan_s), [
	("n0",		ctypes.c_int),
	("n1",		ctypes.c_int),
	("C_in",		ctypes.POINTER(( ctypes.c_float * 2 ))),
	("out",		ctypes.POINTER(ctypes.c_float)),
	("flags",		ctypes.c_void_p),] )

fftwf_plan_dft_c2r_3d = _rpythonic_function_(		"fftwf_plan_dft_c2r_3d", ctypes.POINTER(fftwf_plan_s), [
	("n0",		ctypes.c_int),
	("n1",		ctypes.c_int),
	("n2",		ctypes.c_int),
	("C_in",		ctypes.POINTER(( ctypes.c_float * 2 ))),
	("out",		ctypes.POINTER(ctypes.c_float)),
	("flags",		ctypes.c_void_p),] )

fftwf_plan_guru_dft_r2c = _rpythonic_function_(		"fftwf_plan_guru_dft_r2c", ctypes.POINTER(fftwf_plan_s), [
	("rank",		ctypes.c_int),
	("dims",		ctypes.POINTER(fftw_iodim_do_not_use_me)),
	("howmany_rank",		ctypes.c_int),
	("howmany_dims",		ctypes.POINTER(fftw_iodim_do_not_use_me)),
	("C_in",		ctypes.POINTER(ctypes.c_float)),
	("out",		ctypes.POINTER(( ctypes.c_float * 2 ))),
	("flags",		ctypes.c_void_p),] )

fftwf_plan_guru_dft_c2r = _rpythonic_function_(		"fftwf_plan_guru_dft_c2r", ctypes.POINTER(fftwf_plan_s), [
	("rank",		ctypes.c_int),
	("dims",		ctypes.POINTER(fftw_iodim_do_not_use_me)),
	("howmany_rank",		ctypes.c_int),
	("howmany_dims",		ctypes.POINTER(fftw_iodim_do_not_use_me)),
	("C_in",		ctypes.POINTER(( ctypes.c_float * 2 ))),
	("out",		ctypes.POINTER(ctypes.c_float)),
	("flags",		ctypes.c_void_p),] )

fftwf_plan_guru_split_dft_r2c = _rpythonic_function_(		"fftwf_plan_guru_split_dft_r2c", ctypes.POINTER(fftwf_plan_s), [
	("rank",		ctypes.c_int),
	("dims",		ctypes.POINTER(fftw_iodim_do_not_use_me)),
	("howmany_rank",		ctypes.c_int),
	("howmany_dims",		ctypes.POINTER(fftw_iodim_do_not_use_me)),
	("C_in",		ctypes.POINTER(ctypes.c_float)),
	("ro",		ctypes.POINTER(ctypes.c_float)),
	("io",		ctypes.POINTER(ctypes.c_float)),
	("flags",		ctypes.c_void_p),] )

fftwf_plan_guru_split_dft_c2r = _rpythonic_function_(		"fftwf_plan_guru_split_dft_c2r", ctypes.POINTER(fftwf_plan_s), [
	("rank",		ctypes.c_int),
	("dims",		ctypes.POINTER(fftw_iodim_do_not_use_me)),
	("howmany_rank",		ctypes.c_int),
	("howmany_dims",		ctypes.POINTER(fftw_iodim_do_not_use_me)),
	("ri",		ctypes.POINTER(ctypes.c_float)),
	("ii",		ctypes.POINTER(ctypes.c_float)),
	("out",		ctypes.POINTER(ctypes.c_float)),
	("flags",		ctypes.c_void_p),] )

fftwf_plan_guru64_dft_r2c = _rpythonic_function_(		"fftwf_plan_guru64_dft_r2c", ctypes.POINTER(fftwf_plan_s), [
	("rank",		ctypes.c_int),
	("dims",		ctypes.POINTER(fftw_iodim64_do_not_use_me)),
	("howmany_rank",		ctypes.c_int),
	("howmany_dims",		ctypes.POINTER(fftw_iodim64_do_not_use_me)),
	("C_in",		ctypes.POINTER(ctypes.c_float)),
	("out",		ctypes.POINTER(( ctypes.c_float * 2 ))),
	("flags",		ctypes.c_void_p),] )

fftwf_plan_guru64_dft_c2r = _rpythonic_function_(		"fftwf_plan_guru64_dft_c2r", ctypes.POINTER(fftwf_plan_s), [
	("rank",		ctypes.c_int),
	("dims",		ctypes.POINTER(fftw_iodim64_do_not_use_me)),
	("howmany_rank",		ctypes.c_int),
	("howmany_dims",		ctypes.POINTER(fftw_iodim64_do_not_use_me)),
	("C_in",		ctypes.POINTER(( ctypes.c_float * 2 ))),
	("out",		ctypes.POINTER(ctypes.c_float)),
	("flags",		ctypes.c_void_p),] )

fftwf_plan_guru64_split_dft_r2c = _rpythonic_function_(		"fftwf_plan_guru64_split_dft_r2c", ctypes.POINTER(fftwf_plan_s), [
	("rank",		ctypes.c_int),
	("dims",		ctypes.POINTER(fftw_iodim64_do_not_use_me)),
	("howmany_rank",		ctypes.c_int),
	("howmany_dims",		ctypes.POINTER(fftw_iodim64_do_not_use_me)),
	("C_in",		ctypes.POINTER(ctypes.c_float)),
	("ro",		ctypes.POINTER(ctypes.c_float)),
	("io",		ctypes.POINTER(ctypes.c_float)),
	("flags",		ctypes.c_void_p),] )

fftwf_plan_guru64_split_dft_c2r = _rpythonic_function_(		"fftwf_plan_guru64_split_dft_c2r", ctypes.POINTER(fftwf_plan_s), [
	("rank",		ctypes.c_int),
	("dims",		ctypes.POINTER(fftw_iodim64_do_not_use_me)),
	("howmany_rank",		ctypes.c_int),
	("howmany_dims",		ctypes.POINTER(fftw_iodim64_do_not_use_me)),
	("ri",		ctypes.POINTER(ctypes.c_float)),
	("ii",		ctypes.POINTER(ctypes.c_float)),
	("out",		ctypes.POINTER(ctypes.c_float)),
	("flags",		ctypes.c_void_p),] )

fftwf_execute_dft_r2c = _rpythonic_function_(		"fftwf_execute_dft_r2c", ctypes.c_void_p, [
	("p",		ctypes.POINTER(fftwf_plan_s)),
	("C_in",		ctypes.POINTER(ctypes.c_float)),
	("out",		ctypes.POINTER(( ctypes.c_float * 2 ))),] )

fftwf_execute_dft_c2r = _rpythonic_function_(		"fftwf_execute_dft_c2r", ctypes.c_void_p, [
	("p",		ctypes.POINTER(fftwf_plan_s)),
	("C_in",		ctypes.POINTER(( ctypes.c_float * 2 ))),
	("out",		ctypes.POINTER(ctypes.c_float)),] )

fftwf_execute_split_dft_r2c = _rpythonic_function_(		"fftwf_execute_split_dft_r2c", ctypes.c_void_p, [
	("p",		ctypes.POINTER(fftwf_plan_s)),
	("C_in",		ctypes.POINTER(ctypes.c_float)),
	("ro",		ctypes.POINTER(ctypes.c_float)),
	("io",		ctypes.POINTER(ctypes.c_float)),] )

fftwf_execute_split_dft_c2r = _rpythonic_function_(		"fftwf_execute_split_dft_c2r", ctypes.c_void_p, [
	("p",		ctypes.POINTER(fftwf_plan_s)),
	("ri",		ctypes.POINTER(ctypes.c_float)),
	("ii",		ctypes.POINTER(ctypes.c_float)),
	("out",		ctypes.POINTER(ctypes.c_float)),] )

fftwf_plan_many_r2r = _rpythonic_function_(		"fftwf_plan_many_r2r", ctypes.POINTER(fftwf_plan_s), [
	("rank",		ctypes.c_int),
	("n",		ctypes.POINTER(ctypes.c_int)),
	("howmany",		ctypes.c_int),
	("C_in",		ctypes.POINTER(ctypes.c_float)),
	("inembed",		ctypes.POINTER(ctypes.c_int)),
	("istride",		ctypes.c_int),
	("idist",		ctypes.c_int),
	("out",		ctypes.POINTER(ctypes.c_float)),
	("onembed",		ctypes.POINTER(ctypes.c_int)),
	("ostride",		ctypes.c_int),
	("odist",		ctypes.c_int),
	("kind",		ctypes.POINTER(ctypes.c_int)),
	("flags",		ctypes.c_void_p),] )

fftwf_plan_r2r = _rpythonic_function_(		"fftwf_plan_r2r", ctypes.POINTER(fftwf_plan_s), [
	("rank",		ctypes.c_int),
	("n",		ctypes.POINTER(ctypes.c_int)),
	("C_in",		ctypes.POINTER(ctypes.c_float)),
	("out",		ctypes.POINTER(ctypes.c_float)),
	("kind",		ctypes.POINTER(ctypes.c_int)),
	("flags",		ctypes.c_void_p),] )

fftwf_plan_r2r_1d = _rpythonic_function_(		"fftwf_plan_r2r_1d", ctypes.POINTER(fftwf_plan_s), [
	("n",		ctypes.c_int),
	("C_in",		ctypes.POINTER(ctypes.c_float)),
	("out",		ctypes.POINTER(ctypes.c_float)),
	("kind",		ctypes.c_int),
	("flags",		ctypes.c_void_p),] )

fftwf_plan_r2r_2d = _rpythonic_function_(		"fftwf_plan_r2r_2d", ctypes.POINTER(fftwf_plan_s), [
	("n0",		ctypes.c_int),
	("n1",		ctypes.c_int),
	("C_in",		ctypes.POINTER(ctypes.c_float)),
	("out",		ctypes.POINTER(ctypes.c_float)),
	("kind0",		ctypes.c_int),
	("kind1",		ctypes.c_int),
	("flags",		ctypes.c_void_p),] )

fftwf_plan_r2r_3d = _rpythonic_function_(		"fftwf_plan_r2r_3d", ctypes.POINTER(fftwf_plan_s), [
	("n0",		ctypes.c_int),
	("n1",		ctypes.c_int),
	("n2",		ctypes.c_int),
	("C_in",		ctypes.POINTER(ctypes.c_float)),
	("out",		ctypes.POINTER(ctypes.c_float)),
	("kind0",		ctypes.c_int),
	("kind1",		ctypes.c_int),
	("kind2",		ctypes.c_int),
	("flags",		ctypes.c_void_p),] )

fftwf_plan_guru_r2r = _rpythonic_function_(		"fftwf_plan_guru_r2r", ctypes.POINTER(fftwf_plan_s), [
	("rank",		ctypes.c_int),
	("dims",		ctypes.POINTER(fftw_iodim_do_not_use_me)),
	("howmany_rank",		ctypes.c_int),
	("howmany_dims",		ctypes.POINTER(fftw_iodim_do_not_use_me)),
	("C_in",		ctypes.POINTER(ctypes.c_float)),
	("out",		ctypes.POINTER(ctypes.c_float)),
	("kind",		ctypes.POINTER(ctypes.c_int)),
	("flags",		ctypes.c_void_p),] )

fftwf_plan_guru64_r2r = _rpythonic_function_(		"fftwf_plan_guru64_r2r", ctypes.POINTER(fftwf_plan_s), [
	("rank",		ctypes.c_int),
	("dims",		ctypes.POINTER(fftw_iodim64_do_not_use_me)),
	("howmany_rank",		ctypes.c_int),
	("howmany_dims",		ctypes.POINTER(fftw_iodim64_do_not_use_me)),
	("C_in",		ctypes.POINTER(ctypes.c_float)),
	("out",		ctypes.POINTER(ctypes.c_float)),
	("kind",		ctypes.POINTER(ctypes.c_int)),
	("flags",		ctypes.c_void_p),] )

fftwf_execute_r2r = _rpythonic_function_(		"fftwf_execute_r2r", ctypes.c_void_p, [
	("p",		ctypes.POINTER(fftwf_plan_s)),
	("C_in",		ctypes.POINTER(ctypes.c_float)),
	("out",		ctypes.POINTER(ctypes.c_float)),] )

fftwf_destroy_plan = _rpythonic_function_(		"fftwf_destroy_plan", ctypes.c_void_p, [
	("p",		ctypes.POINTER(fftwf_plan_s)),] )

fftwf_forget_wisdom = _rpythonic_function_(		"fftwf_forget_wisdom", ctypes.c_void_p, [] )

fftwf_cleanup = _rpythonic_function_(		"fftwf_cleanup", ctypes.c_void_p, [] )

fftwf_set_timelimit = _rpythonic_function_(		"fftwf_set_timelimit", ctypes.c_void_p, [
	("none",		ctypes.c_double),] )

fftwf_plan_with_nthreads = _rpythonic_function_(		"fftwf_plan_with_nthreads", ctypes.c_void_p, [
	("nthreads",		ctypes.c_int),] )

fftwf_init_threads = _rpythonic_function_(		"fftwf_init_threads", ctypes.c_int, [] )

fftwf_cleanup_threads = _rpythonic_function_(		"fftwf_cleanup_threads", ctypes.c_void_p, [] )

fftwf_export_wisdom_to_file = _rpythonic_function_(		"fftwf_export_wisdom_to_file", ctypes.c_void_p, [
	("output_file",		ctypes.POINTER(_IO_FILE)),] )

fftwf_export_wisdom_to_string = _rpythonic_function_(		"fftwf_export_wisdom_to_string", ctypes.POINTER(ctypes.c_char), [] )

fftwf_export_wisdom = _rpythonic_function_(		"fftwf_export_wisdom", ctypes.c_void_p, [
	("write_char",		ctypes.c_void_p),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

fftwf_import_system_wisdom = _rpythonic_function_(		"fftwf_import_system_wisdom", ctypes.c_int, [] )

fftwf_import_wisdom_from_file = _rpythonic_function_(		"fftwf_import_wisdom_from_file", ctypes.c_int, [
	("input_file",		ctypes.POINTER(_IO_FILE)),] )

fftwf_import_wisdom_from_string = _rpythonic_function_(		"fftwf_import_wisdom_from_string", ctypes.c_int, [
	("input_string",		ctypes.POINTER(ctypes.c_char)),] )

fftwf_import_wisdom = _rpythonic_function_(		"fftwf_import_wisdom", ctypes.c_int, [
	("read_char",		ctypes.c_void_p),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

fftwf_fprint_plan = _rpythonic_function_(		"fftwf_fprint_plan", ctypes.c_void_p, [
	("p",		ctypes.POINTER(fftwf_plan_s)),
	("output_file",		ctypes.POINTER(_IO_FILE)),] )

fftwf_print_plan = _rpythonic_function_(		"fftwf_print_plan", ctypes.c_void_p, [
	("p",		ctypes.POINTER(fftwf_plan_s)),] )

fftwf_malloc = _rpythonic_function_(		"fftwf_malloc", ctypes.POINTER(ctypes.c_void_p), [
	("n",		ctypes.c_uint),] )

fftwf_free = _rpythonic_function_(		"fftwf_free", ctypes.c_void_p, [("p",		ctypes.c_void_p)] )

fftwf_flops = _rpythonic_function_(		"fftwf_flops", ctypes.c_void_p, [
	("p",		ctypes.POINTER(fftwf_plan_s)),
	("add",		ctypes.POINTER(ctypes.c_double)),
	("mul",		ctypes.POINTER(ctypes.c_double)),
	("fmas",		ctypes.POINTER(ctypes.c_double)),] )

fftwf_estimate_cost = _rpythonic_function_(		"fftwf_estimate_cost", ctypes.c_double, [
	("p",		ctypes.POINTER(fftwf_plan_s)),] )

fftwl_execute = _rpythonic_function_(		"fftwl_execute", ctypes.c_void_p, [
	("p",		ctypes.POINTER(fftwl_plan_s)),] )

fftwl_plan_dft = _rpythonic_function_(		"fftwl_plan_dft", ctypes.POINTER(fftwl_plan_s), [
	("rank",		ctypes.c_int),
	("n",		ctypes.POINTER(ctypes.c_int)),
	("C_in",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("out",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("sign",		ctypes.c_int),
	("flags",		ctypes.c_void_p),] )

fftwl_plan_dft_1d = _rpythonic_function_(		"fftwl_plan_dft_1d", ctypes.POINTER(fftwl_plan_s), [
	("n",		ctypes.c_int),
	("C_in",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("out",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("sign",		ctypes.c_int),
	("flags",		ctypes.c_void_p),] )

fftwl_plan_dft_2d = _rpythonic_function_(		"fftwl_plan_dft_2d", ctypes.POINTER(fftwl_plan_s), [
	("n0",		ctypes.c_int),
	("n1",		ctypes.c_int),
	("C_in",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("out",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("sign",		ctypes.c_int),
	("flags",		ctypes.c_void_p),] )

fftwl_plan_dft_3d = _rpythonic_function_(		"fftwl_plan_dft_3d", ctypes.POINTER(fftwl_plan_s), [
	("n0",		ctypes.c_int),
	("n1",		ctypes.c_int),
	("n2",		ctypes.c_int),
	("C_in",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("out",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("sign",		ctypes.c_int),
	("flags",		ctypes.c_void_p),] )

fftwl_plan_many_dft = _rpythonic_function_(		"fftwl_plan_many_dft", ctypes.POINTER(fftwl_plan_s), [
	("rank",		ctypes.c_int),
	("n",		ctypes.POINTER(ctypes.c_int)),
	("howmany",		ctypes.c_int),
	("C_in",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("inembed",		ctypes.POINTER(ctypes.c_int)),
	("istride",		ctypes.c_int),
	("idist",		ctypes.c_int),
	("out",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("onembed",		ctypes.POINTER(ctypes.c_int)),
	("ostride",		ctypes.c_int),
	("odist",		ctypes.c_int),
	("sign",		ctypes.c_int),
	("flags",		ctypes.c_void_p),] )

fftwl_plan_guru_dft = _rpythonic_function_(		"fftwl_plan_guru_dft", ctypes.POINTER(fftwl_plan_s), [
	("rank",		ctypes.c_int),
	("dims",		ctypes.POINTER(fftw_iodim_do_not_use_me)),
	("howmany_rank",		ctypes.c_int),
	("howmany_dims",		ctypes.POINTER(fftw_iodim_do_not_use_me)),
	("C_in",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("out",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("sign",		ctypes.c_int),
	("flags",		ctypes.c_void_p),] )

fftwl_plan_guru_split_dft = _rpythonic_function_(		"fftwl_plan_guru_split_dft", ctypes.POINTER(fftwl_plan_s), [
	("rank",		ctypes.c_int),
	("dims",		ctypes.POINTER(fftw_iodim_do_not_use_me)),
	("howmany_rank",		ctypes.c_int),
	("howmany_dims",		ctypes.POINTER(fftw_iodim_do_not_use_me)),
	("ri",		ctypes.POINTER(ctypes.c_double)),
	("ii",		ctypes.POINTER(ctypes.c_double)),
	("ro",		ctypes.POINTER(ctypes.c_double)),
	("io",		ctypes.POINTER(ctypes.c_double)),
	("flags",		ctypes.c_void_p),] )

fftwl_plan_guru64_dft = _rpythonic_function_(		"fftwl_plan_guru64_dft", ctypes.POINTER(fftwl_plan_s), [
	("rank",		ctypes.c_int),
	("dims",		ctypes.POINTER(fftw_iodim64_do_not_use_me)),
	("howmany_rank",		ctypes.c_int),
	("howmany_dims",		ctypes.POINTER(fftw_iodim64_do_not_use_me)),
	("C_in",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("out",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("sign",		ctypes.c_int),
	("flags",		ctypes.c_void_p),] )

fftwl_plan_guru64_split_dft = _rpythonic_function_(		"fftwl_plan_guru64_split_dft", ctypes.POINTER(fftwl_plan_s), [
	("rank",		ctypes.c_int),
	("dims",		ctypes.POINTER(fftw_iodim64_do_not_use_me)),
	("howmany_rank",		ctypes.c_int),
	("howmany_dims",		ctypes.POINTER(fftw_iodim64_do_not_use_me)),
	("ri",		ctypes.POINTER(ctypes.c_double)),
	("ii",		ctypes.POINTER(ctypes.c_double)),
	("ro",		ctypes.POINTER(ctypes.c_double)),
	("io",		ctypes.POINTER(ctypes.c_double)),
	("flags",		ctypes.c_void_p),] )

fftwl_execute_dft = _rpythonic_function_(		"fftwl_execute_dft", ctypes.c_void_p, [
	("p",		ctypes.POINTER(fftwl_plan_s)),
	("C_in",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("out",		ctypes.POINTER(( ctypes.c_double * 2 ))),] )

fftwl_execute_split_dft = _rpythonic_function_(		"fftwl_execute_split_dft", ctypes.c_void_p, [
	("p",		ctypes.POINTER(fftwl_plan_s)),
	("ri",		ctypes.POINTER(ctypes.c_double)),
	("ii",		ctypes.POINTER(ctypes.c_double)),
	("ro",		ctypes.POINTER(ctypes.c_double)),
	("io",		ctypes.POINTER(ctypes.c_double)),] )

fftwl_plan_many_dft_r2c = _rpythonic_function_(		"fftwl_plan_many_dft_r2c", ctypes.POINTER(fftwl_plan_s), [
	("rank",		ctypes.c_int),
	("n",		ctypes.POINTER(ctypes.c_int)),
	("howmany",		ctypes.c_int),
	("C_in",		ctypes.POINTER(ctypes.c_double)),
	("inembed",		ctypes.POINTER(ctypes.c_int)),
	("istride",		ctypes.c_int),
	("idist",		ctypes.c_int),
	("out",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("onembed",		ctypes.POINTER(ctypes.c_int)),
	("ostride",		ctypes.c_int),
	("odist",		ctypes.c_int),
	("flags",		ctypes.c_void_p),] )

fftwl_plan_dft_r2c = _rpythonic_function_(		"fftwl_plan_dft_r2c", ctypes.POINTER(fftwl_plan_s), [
	("rank",		ctypes.c_int),
	("n",		ctypes.POINTER(ctypes.c_int)),
	("C_in",		ctypes.POINTER(ctypes.c_double)),
	("out",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("flags",		ctypes.c_void_p),] )

fftwl_plan_dft_r2c_1d = _rpythonic_function_(		"fftwl_plan_dft_r2c_1d", ctypes.POINTER(fftwl_plan_s), [
	("n",		ctypes.c_int),
	("C_in",		ctypes.POINTER(ctypes.c_double)),
	("out",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("flags",		ctypes.c_void_p),] )

fftwl_plan_dft_r2c_2d = _rpythonic_function_(		"fftwl_plan_dft_r2c_2d", ctypes.POINTER(fftwl_plan_s), [
	("n0",		ctypes.c_int),
	("n1",		ctypes.c_int),
	("C_in",		ctypes.POINTER(ctypes.c_double)),
	("out",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("flags",		ctypes.c_void_p),] )

fftwl_plan_dft_r2c_3d = _rpythonic_function_(		"fftwl_plan_dft_r2c_3d", ctypes.POINTER(fftwl_plan_s), [
	("n0",		ctypes.c_int),
	("n1",		ctypes.c_int),
	("n2",		ctypes.c_int),
	("C_in",		ctypes.POINTER(ctypes.c_double)),
	("out",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("flags",		ctypes.c_void_p),] )

fftwl_plan_many_dft_c2r = _rpythonic_function_(		"fftwl_plan_many_dft_c2r", ctypes.POINTER(fftwl_plan_s), [
	("rank",		ctypes.c_int),
	("n",		ctypes.POINTER(ctypes.c_int)),
	("howmany",		ctypes.c_int),
	("C_in",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("inembed",		ctypes.POINTER(ctypes.c_int)),
	("istride",		ctypes.c_int),
	("idist",		ctypes.c_int),
	("out",		ctypes.POINTER(ctypes.c_double)),
	("onembed",		ctypes.POINTER(ctypes.c_int)),
	("ostride",		ctypes.c_int),
	("odist",		ctypes.c_int),
	("flags",		ctypes.c_void_p),] )

fftwl_plan_dft_c2r = _rpythonic_function_(		"fftwl_plan_dft_c2r", ctypes.POINTER(fftwl_plan_s), [
	("rank",		ctypes.c_int),
	("n",		ctypes.POINTER(ctypes.c_int)),
	("C_in",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("out",		ctypes.POINTER(ctypes.c_double)),
	("flags",		ctypes.c_void_p),] )

fftwl_plan_dft_c2r_1d = _rpythonic_function_(		"fftwl_plan_dft_c2r_1d", ctypes.POINTER(fftwl_plan_s), [
	("n",		ctypes.c_int),
	("C_in",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("out",		ctypes.POINTER(ctypes.c_double)),
	("flags",		ctypes.c_void_p),] )

fftwl_plan_dft_c2r_2d = _rpythonic_function_(		"fftwl_plan_dft_c2r_2d", ctypes.POINTER(fftwl_plan_s), [
	("n0",		ctypes.c_int),
	("n1",		ctypes.c_int),
	("C_in",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("out",		ctypes.POINTER(ctypes.c_double)),
	("flags",		ctypes.c_void_p),] )

fftwl_plan_dft_c2r_3d = _rpythonic_function_(		"fftwl_plan_dft_c2r_3d", ctypes.POINTER(fftwl_plan_s), [
	("n0",		ctypes.c_int),
	("n1",		ctypes.c_int),
	("n2",		ctypes.c_int),
	("C_in",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("out",		ctypes.POINTER(ctypes.c_double)),
	("flags",		ctypes.c_void_p),] )

fftwl_plan_guru_dft_r2c = _rpythonic_function_(		"fftwl_plan_guru_dft_r2c", ctypes.POINTER(fftwl_plan_s), [
	("rank",		ctypes.c_int),
	("dims",		ctypes.POINTER(fftw_iodim_do_not_use_me)),
	("howmany_rank",		ctypes.c_int),
	("howmany_dims",		ctypes.POINTER(fftw_iodim_do_not_use_me)),
	("C_in",		ctypes.POINTER(ctypes.c_double)),
	("out",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("flags",		ctypes.c_void_p),] )

fftwl_plan_guru_dft_c2r = _rpythonic_function_(		"fftwl_plan_guru_dft_c2r", ctypes.POINTER(fftwl_plan_s), [
	("rank",		ctypes.c_int),
	("dims",		ctypes.POINTER(fftw_iodim_do_not_use_me)),
	("howmany_rank",		ctypes.c_int),
	("howmany_dims",		ctypes.POINTER(fftw_iodim_do_not_use_me)),
	("C_in",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("out",		ctypes.POINTER(ctypes.c_double)),
	("flags",		ctypes.c_void_p),] )

fftwl_plan_guru_split_dft_r2c = _rpythonic_function_(		"fftwl_plan_guru_split_dft_r2c", ctypes.POINTER(fftwl_plan_s), [
	("rank",		ctypes.c_int),
	("dims",		ctypes.POINTER(fftw_iodim_do_not_use_me)),
	("howmany_rank",		ctypes.c_int),
	("howmany_dims",		ctypes.POINTER(fftw_iodim_do_not_use_me)),
	("C_in",		ctypes.POINTER(ctypes.c_double)),
	("ro",		ctypes.POINTER(ctypes.c_double)),
	("io",		ctypes.POINTER(ctypes.c_double)),
	("flags",		ctypes.c_void_p),] )

fftwl_plan_guru_split_dft_c2r = _rpythonic_function_(		"fftwl_plan_guru_split_dft_c2r", ctypes.POINTER(fftwl_plan_s), [
	("rank",		ctypes.c_int),
	("dims",		ctypes.POINTER(fftw_iodim_do_not_use_me)),
	("howmany_rank",		ctypes.c_int),
	("howmany_dims",		ctypes.POINTER(fftw_iodim_do_not_use_me)),
	("ri",		ctypes.POINTER(ctypes.c_double)),
	("ii",		ctypes.POINTER(ctypes.c_double)),
	("out",		ctypes.POINTER(ctypes.c_double)),
	("flags",		ctypes.c_void_p),] )

fftwl_plan_guru64_dft_r2c = _rpythonic_function_(		"fftwl_plan_guru64_dft_r2c", ctypes.POINTER(fftwl_plan_s), [
	("rank",		ctypes.c_int),
	("dims",		ctypes.POINTER(fftw_iodim64_do_not_use_me)),
	("howmany_rank",		ctypes.c_int),
	("howmany_dims",		ctypes.POINTER(fftw_iodim64_do_not_use_me)),
	("C_in",		ctypes.POINTER(ctypes.c_double)),
	("out",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("flags",		ctypes.c_void_p),] )

fftwl_plan_guru64_dft_c2r = _rpythonic_function_(		"fftwl_plan_guru64_dft_c2r", ctypes.POINTER(fftwl_plan_s), [
	("rank",		ctypes.c_int),
	("dims",		ctypes.POINTER(fftw_iodim64_do_not_use_me)),
	("howmany_rank",		ctypes.c_int),
	("howmany_dims",		ctypes.POINTER(fftw_iodim64_do_not_use_me)),
	("C_in",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("out",		ctypes.POINTER(ctypes.c_double)),
	("flags",		ctypes.c_void_p),] )

fftwl_plan_guru64_split_dft_r2c = _rpythonic_function_(		"fftwl_plan_guru64_split_dft_r2c", ctypes.POINTER(fftwl_plan_s), [
	("rank",		ctypes.c_int),
	("dims",		ctypes.POINTER(fftw_iodim64_do_not_use_me)),
	("howmany_rank",		ctypes.c_int),
	("howmany_dims",		ctypes.POINTER(fftw_iodim64_do_not_use_me)),
	("C_in",		ctypes.POINTER(ctypes.c_double)),
	("ro",		ctypes.POINTER(ctypes.c_double)),
	("io",		ctypes.POINTER(ctypes.c_double)),
	("flags",		ctypes.c_void_p),] )

fftwl_plan_guru64_split_dft_c2r = _rpythonic_function_(		"fftwl_plan_guru64_split_dft_c2r", ctypes.POINTER(fftwl_plan_s), [
	("rank",		ctypes.c_int),
	("dims",		ctypes.POINTER(fftw_iodim64_do_not_use_me)),
	("howmany_rank",		ctypes.c_int),
	("howmany_dims",		ctypes.POINTER(fftw_iodim64_do_not_use_me)),
	("ri",		ctypes.POINTER(ctypes.c_double)),
	("ii",		ctypes.POINTER(ctypes.c_double)),
	("out",		ctypes.POINTER(ctypes.c_double)),
	("flags",		ctypes.c_void_p),] )

fftwl_execute_dft_r2c = _rpythonic_function_(		"fftwl_execute_dft_r2c", ctypes.c_void_p, [
	("p",		ctypes.POINTER(fftwl_plan_s)),
	("C_in",		ctypes.POINTER(ctypes.c_double)),
	("out",		ctypes.POINTER(( ctypes.c_double * 2 ))),] )

fftwl_execute_dft_c2r = _rpythonic_function_(		"fftwl_execute_dft_c2r", ctypes.c_void_p, [
	("p",		ctypes.POINTER(fftwl_plan_s)),
	("C_in",		ctypes.POINTER(( ctypes.c_double * 2 ))),
	("out",		ctypes.POINTER(ctypes.c_double)),] )

fftwl_execute_split_dft_r2c = _rpythonic_function_(		"fftwl_execute_split_dft_r2c", ctypes.c_void_p, [
	("p",		ctypes.POINTER(fftwl_plan_s)),
	("C_in",		ctypes.POINTER(ctypes.c_double)),
	("ro",		ctypes.POINTER(ctypes.c_double)),
	("io",		ctypes.POINTER(ctypes.c_double)),] )

fftwl_execute_split_dft_c2r = _rpythonic_function_(		"fftwl_execute_split_dft_c2r", ctypes.c_void_p, [
	("p",		ctypes.POINTER(fftwl_plan_s)),
	("ri",		ctypes.POINTER(ctypes.c_double)),
	("ii",		ctypes.POINTER(ctypes.c_double)),
	("out",		ctypes.POINTER(ctypes.c_double)),] )

fftwl_plan_many_r2r = _rpythonic_function_(		"fftwl_plan_many_r2r", ctypes.POINTER(fftwl_plan_s), [
	("rank",		ctypes.c_int),
	("n",		ctypes.POINTER(ctypes.c_int)),
	("howmany",		ctypes.c_int),
	("C_in",		ctypes.POINTER(ctypes.c_double)),
	("inembed",		ctypes.POINTER(ctypes.c_int)),
	("istride",		ctypes.c_int),
	("idist",		ctypes.c_int),
	("out",		ctypes.POINTER(ctypes.c_double)),
	("onembed",		ctypes.POINTER(ctypes.c_int)),
	("ostride",		ctypes.c_int),
	("odist",		ctypes.c_int),
	("kind",		ctypes.POINTER(ctypes.c_int)),
	("flags",		ctypes.c_void_p),] )

fftwl_plan_r2r = _rpythonic_function_(		"fftwl_plan_r2r", ctypes.POINTER(fftwl_plan_s), [
	("rank",		ctypes.c_int),
	("n",		ctypes.POINTER(ctypes.c_int)),
	("C_in",		ctypes.POINTER(ctypes.c_double)),
	("out",		ctypes.POINTER(ctypes.c_double)),
	("kind",		ctypes.POINTER(ctypes.c_int)),
	("flags",		ctypes.c_void_p),] )

fftwl_plan_r2r_1d = _rpythonic_function_(		"fftwl_plan_r2r_1d", ctypes.POINTER(fftwl_plan_s), [
	("n",		ctypes.c_int),
	("C_in",		ctypes.POINTER(ctypes.c_double)),
	("out",		ctypes.POINTER(ctypes.c_double)),
	("kind",		ctypes.c_int),
	("flags",		ctypes.c_void_p),] )

fftwl_plan_r2r_2d = _rpythonic_function_(		"fftwl_plan_r2r_2d", ctypes.POINTER(fftwl_plan_s), [
	("n0",		ctypes.c_int),
	("n1",		ctypes.c_int),
	("C_in",		ctypes.POINTER(ctypes.c_double)),
	("out",		ctypes.POINTER(ctypes.c_double)),
	("kind0",		ctypes.c_int),
	("kind1",		ctypes.c_int),
	("flags",		ctypes.c_void_p),] )

fftwl_plan_r2r_3d = _rpythonic_function_(		"fftwl_plan_r2r_3d", ctypes.POINTER(fftwl_plan_s), [
	("n0",		ctypes.c_int),
	("n1",		ctypes.c_int),
	("n2",		ctypes.c_int),
	("C_in",		ctypes.POINTER(ctypes.c_double)),
	("out",		ctypes.POINTER(ctypes.c_double)),
	("kind0",		ctypes.c_int),
	("kind1",		ctypes.c_int),
	("kind2",		ctypes.c_int),
	("flags",		ctypes.c_void_p),] )

fftwl_plan_guru_r2r = _rpythonic_function_(		"fftwl_plan_guru_r2r", ctypes.POINTER(fftwl_plan_s), [
	("rank",		ctypes.c_int),
	("dims",		ctypes.POINTER(fftw_iodim_do_not_use_me)),
	("howmany_rank",		ctypes.c_int),
	("howmany_dims",		ctypes.POINTER(fftw_iodim_do_not_use_me)),
	("C_in",		ctypes.POINTER(ctypes.c_double)),
	("out",		ctypes.POINTER(ctypes.c_double)),
	("kind",		ctypes.POINTER(ctypes.c_int)),
	("flags",		ctypes.c_void_p),] )

fftwl_plan_guru64_r2r = _rpythonic_function_(		"fftwl_plan_guru64_r2r", ctypes.POINTER(fftwl_plan_s), [
	("rank",		ctypes.c_int),
	("dims",		ctypes.POINTER(fftw_iodim64_do_not_use_me)),
	("howmany_rank",		ctypes.c_int),
	("howmany_dims",		ctypes.POINTER(fftw_iodim64_do_not_use_me)),
	("C_in",		ctypes.POINTER(ctypes.c_double)),
	("out",		ctypes.POINTER(ctypes.c_double)),
	("kind",		ctypes.POINTER(ctypes.c_int)),
	("flags",		ctypes.c_void_p),] )

fftwl_execute_r2r = _rpythonic_function_(		"fftwl_execute_r2r", ctypes.c_void_p, [
	("p",		ctypes.POINTER(fftwl_plan_s)),
	("C_in",		ctypes.POINTER(ctypes.c_double)),
	("out",		ctypes.POINTER(ctypes.c_double)),] )

fftwl_destroy_plan = _rpythonic_function_(		"fftwl_destroy_plan", ctypes.c_void_p, [
	("p",		ctypes.POINTER(fftwl_plan_s)),] )

fftwl_forget_wisdom = _rpythonic_function_(		"fftwl_forget_wisdom", ctypes.c_void_p, [] )

fftwl_cleanup = _rpythonic_function_(		"fftwl_cleanup", ctypes.c_void_p, [] )

fftwl_set_timelimit = _rpythonic_function_(		"fftwl_set_timelimit", ctypes.c_void_p, [
	("none",		ctypes.c_double),] )

fftwl_plan_with_nthreads = _rpythonic_function_(		"fftwl_plan_with_nthreads", ctypes.c_void_p, [
	("nthreads",		ctypes.c_int),] )

fftwl_init_threads = _rpythonic_function_(		"fftwl_init_threads", ctypes.c_int, [] )

fftwl_cleanup_threads = _rpythonic_function_(		"fftwl_cleanup_threads", ctypes.c_void_p, [] )

fftwl_export_wisdom_to_file = _rpythonic_function_(		"fftwl_export_wisdom_to_file", ctypes.c_void_p, [
	("output_file",		ctypes.POINTER(_IO_FILE)),] )

fftwl_export_wisdom_to_string = _rpythonic_function_(		"fftwl_export_wisdom_to_string", ctypes.POINTER(ctypes.c_char), [] )

fftwl_export_wisdom = _rpythonic_function_(		"fftwl_export_wisdom", ctypes.c_void_p, [
	("write_char",		ctypes.c_void_p),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

fftwl_import_system_wisdom = _rpythonic_function_(		"fftwl_import_system_wisdom", ctypes.c_int, [] )

fftwl_import_wisdom_from_file = _rpythonic_function_(		"fftwl_import_wisdom_from_file", ctypes.c_int, [
	("input_file",		ctypes.POINTER(_IO_FILE)),] )

fftwl_import_wisdom_from_string = _rpythonic_function_(		"fftwl_import_wisdom_from_string", ctypes.c_int, [
	("input_string",		ctypes.POINTER(ctypes.c_char)),] )

fftwl_import_wisdom = _rpythonic_function_(		"fftwl_import_wisdom", ctypes.c_int, [
	("read_char",		ctypes.c_void_p),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

fftwl_fprint_plan = _rpythonic_function_(		"fftwl_fprint_plan", ctypes.c_void_p, [
	("p",		ctypes.POINTER(fftwl_plan_s)),
	("output_file",		ctypes.POINTER(_IO_FILE)),] )

fftwl_print_plan = _rpythonic_function_(		"fftwl_print_plan", ctypes.c_void_p, [
	("p",		ctypes.POINTER(fftwl_plan_s)),] )

fftwl_malloc = _rpythonic_function_(		"fftwl_malloc", ctypes.POINTER(ctypes.c_void_p), [
	("n",		ctypes.c_uint),] )

fftwl_free = _rpythonic_function_(		"fftwl_free", ctypes.c_void_p, [("p",		ctypes.c_void_p)] )

fftwl_flops = _rpythonic_function_(		"fftwl_flops", ctypes.c_void_p, [
	("p",		ctypes.POINTER(fftwl_plan_s)),
	("add",		ctypes.POINTER(ctypes.c_double)),
	("mul",		ctypes.POINTER(ctypes.c_double)),
	("fmas",		ctypes.POINTER(ctypes.c_double)),] )

fftwl_estimate_cost = _rpythonic_function_(		"fftwl_estimate_cost", ctypes.c_double, [
	("p",		ctypes.POINTER(fftwl_plan_s)),] )


_rpythonic_convert_structs_to_objects()

_rpythonic_setup_return_wrappers()
_rpythonic_make_nice_global_enums_()
_rpythonic_clean_up_missing_functions_()

################### Raymond Hettinger's Constant Folding ##################
# Decorator for BindingConstants at compile time
# A recipe by Raymond Hettinger, from Python Cookbook:
# http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/277940
# updated for Python3 and still compatible with Python2 - by Hart, May17th 2011

try: _BUILTINS_DICT_ = vars(__builtins__)
except: _BUILTINS_DICT_ = __builtins__
ISPYTHON2 = sys.version_info[0] == 2
_HETTINGER_FOLDS_ = 0

def _hettinger_make_constants(f, builtin_only=False, stoplist=[], verbose=0):
    from opcode import opmap, HAVE_ARGUMENT, EXTENDED_ARG
    global _HETTINGER_FOLDS_
    try:
        if ISPYTHON2: co = f.func_code; fname = f.func_name
        else: co = f.__code__; fname = f.__name__
    except AttributeError: return f        # Jython doesn't have a func_code attribute.
    if ISPYTHON2: newcode = map(ord, co.co_code)
    else: newcode = list( co.co_code )
    newconsts = list(co.co_consts)
    names = co.co_names
    codelen = len(newcode)
    if ISPYTHON2:
        if verbose >= 2: print( f.func_name )
        func_globals = f.func_globals
    else:
        if verbose >= 2: print( f.__name__ )
        func_globals = f.__globals__

    env = _BUILTINS_DICT_.copy()
    if builtin_only:
        stoplist = dict.fromkeys(stoplist)
        stoplist.update(func_globals)
    else:
        env.update(func_globals)

    # First pass converts global lookups into constants
    i = 0
    while i < codelen:
        opcode = newcode[i]
        if opcode in (EXTENDED_ARG, opmap['STORE_GLOBAL']):
            if verbose >= 1: print('skipping function', fname)
            return f    # for simplicity, only optimize common cases
        if opcode == opmap['LOAD_GLOBAL']:
            oparg = newcode[i+1] + (newcode[i+2] << 8)
            name = co.co_names[oparg]
            if name in env and name not in stoplist:
                value = env[name]
                for pos, v in enumerate(newconsts):
                    if v is value:
                        break
                else:
                    pos = len(newconsts)
                    newconsts.append(value)
                newcode[i] = opmap['LOAD_CONST']
                newcode[i+1] = pos & 0xFF
                newcode[i+2] = pos >> 8
                _HETTINGER_FOLDS_ += 1
                if verbose >= 2:
                    print( "    global constant fold:", name )
        i += 1
        if opcode >= HAVE_ARGUMENT:
            i += 2

    # Second pass folds tuples of constants and constant attribute lookups
    i = 0
    while i < codelen:

        newtuple = []
        while newcode[i] == opmap['LOAD_CONST']:
            oparg = newcode[i+1] + (newcode[i+2] << 8)
            newtuple.append(newconsts[oparg])
            i += 3

        opcode = newcode[i]
        if not newtuple:
            i += 1
            if opcode >= HAVE_ARGUMENT:
                i += 2
            continue

        if opcode == opmap['LOAD_ATTR']:
            obj = newtuple[-1]
            oparg = newcode[i+1] + (newcode[i+2] << 8)
            name = names[oparg]
            try:
                value = getattr(obj, name)
                if verbose >= 2: print( '    folding attribute', name )
            except AttributeError:
                continue
            deletions = 1

        elif opcode == opmap['BUILD_TUPLE']:
            oparg = newcode[i+1] + (newcode[i+2] << 8)
            if oparg != len(newtuple): continue
            deletions = len(newtuple)
            value = tuple(newtuple)

        else: continue

        reljump = deletions * 3
        newcode[i-reljump] = opmap['JUMP_FORWARD']
        newcode[i-reljump+1] = (reljump-3) & 0xFF
        newcode[i-reljump+2] = (reljump-3) >> 8

        n = len(newconsts)
        newconsts.append(value)
        newcode[i] = opmap['LOAD_CONST']
        newcode[i+1] = n & 0xFF
        newcode[i+2] = n >> 8
        i += 3
        _HETTINGER_FOLDS_ += 1
        if verbose >= 2:
            print( "    folded constant:",value )

    if ISPYTHON2:
        codestr = ''.join(map(chr, newcode))
        codeobj = type(co)(co.co_argcount, co.co_nlocals, co.co_stacksize,
                        co.co_flags, codestr, tuple(newconsts), co.co_names,
                        co.co_varnames, co.co_filename, co.co_name,
                        co.co_firstlineno, co.co_lnotab, co.co_freevars,
                        co.co_cellvars)
        return type(f)(codeobj, f.func_globals, f.func_name, f.func_defaults, f.func_closure)
    else:
        codestr = b''
        for s in newcode: codestr += s.to_bytes(1,'little')
        codeobj = type(co)(co.co_argcount, co.co_kwonlyargcount, co.co_nlocals, co.co_stacksize,
                        co.co_flags, codestr, tuple(newconsts), co.co_names,
                        co.co_varnames, co.co_filename, co.co_name,
                        co.co_firstlineno, co.co_lnotab, co.co_freevars,
                        co.co_cellvars)
        return type(f)(codeobj, f.__globals__, f.__name__, f.__defaults__, f.__closure__)


def hettinger_bind_recursive(mc, builtin_only=False, stoplist=[],  verbose=0):
    """Recursively apply constant binding to functions in a module or class.

    Use as the last line of the module (after everything is defined, but
    before test code).  In modules that need modifiable globals, set
    builtin_only to True.

    """
    import types
    try: d = vars(mc)
    except TypeError: return
    if ISPYTHON2: recursivetypes = (type, types.ClassType)
    else: recursivetypes = (type,)
    for k, v in d.items():
        if type(v) is types.FunctionType:
            newv = _hettinger_make_constants(v, builtin_only, stoplist,  verbose)
            setattr(mc, k, newv)
        elif type(v) in recursivetypes:
            hettinger_bind_recursive(v, builtin_only, stoplist, verbose)

def hettinger_transform( module=None ):
    global _HETTINGER_FOLDS_
    _HETTINGER_FOLDS_ = 0
    if not module: module = sys.modules[__name__]
    hettinger_bind_recursive( module, verbose=1 )
    print( 'HETTINGER: constants folded', _HETTINGER_FOLDS_ )

_rpythonic_strip_prefixes_(['fftw_', 'FFTW_'])