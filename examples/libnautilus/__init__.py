## generated by RPythonic 0.4.8e	| host-type:32bits=True
## http://code.google.com/p/rpythonic/
import os, sys, ctypes, inspect
__os = os
__sys = sys
__inspect = inspect
_CTYPES_CDLLS = []	# support loading functions from multiple libraries


PYTHON_RESERVED_KEYWORDS = 'for while in as global with try except lambda return raise if else elif eval exec and not or break continue finally print yield del def class assert from is pass'.split()


IS32BIT = (ctypes.sizeof(ctypes.c_void_p)==4)

_ISPYTHON2 = sys.version_info[0] == 2
if _ISPYTHON2: _NULLBYTE = '\0'
else: _NULLBYTE = bytes( chr(0), 'ascii' )

def _CHARP2STRING( charp, encoding='utf-8' ):
	b = bytes()
	i = 0
	while True:
		char = charp[ i ]
		if char == _NULLBYTE: break
		else:
			b += char
			i += 1
	return b.decode( encoding )

## try to load precompiled c-libraries from this directory, if the library is not there try to load from the system.
_clibs_dir = os.path.dirname(os.path.abspath(__file__))

def _load_ctypes_lib( name ):
	if __os.name == 'posix':
		if __sys.platform.startswith('linux'):
			if not name.endswith('.so'): name += '.so'
			if not name.startswith('lib'): name = 'lib' + name

			if IS32BIT: 	path = __os.path.join(_clibs_dir,'linux32')
			else: 		path = __os.path.join(_clibs_dir,'linux64')
			url = __os.path.join( path, name )
			if __os.path.isfile( url ): return ctypes.CDLL(url)
			elif __os.path.isfile( '/usr/local/lib/%s'%name ): return ctypes.CDLL('/usr/local/lib/%s'%name)
			elif __os.path.isfile( '/usr/local/lib64/%s'%name ) and not IS32BIT: return ctypes.CDLL('/usr/local/lib64/%s'%name)
			elif __os.path.isfile( '/usr/lib/%s'%name ): return ctypes.CDLL('/usr/lib/%s'%name)
			elif __os.path.isfile( './%s'%name ): return ctypes.CDLL('./%s'%name)
			
			elif __os.path.isfile( '/usr/lib/%s.0'%name ):	# Fedora style
				return ctypes.CDLL('/usr/lib/%s.0'%name )
			elif __os.path.isfile( '/usr/lib64/%s.0'%name ):	# Fedora style
				return ctypes.CDLL('/usr/lib64/%s.0'%name )

			else:	# fallback
				print('[ falling back to loading from current process ]')
				try: return ctypes.CDLL(name)
				except: return ctypes.CDLL('')

		elif sys.platform == 'darwin':
			name += '.dylib'
			if IS32BIT: 	path = os.path.join(_clibs_dir,'osx32')
			else: 		path = os.path.join(_clibs_dir,'osx64')
			url = os.path.join( path, name )
			if os.path.isfile( url ): return ctypes.CDLL(url)
			else: return ctypes.CDLL(name) #fallback

	elif os.name == 'nt':
		name += '.dll'
		if IS32BIT: 	path = os.path.join(_clibs_dir,'win32')
		else: 		path = os.path.join(_clibs_dir,'win64')
		url = os.path.join( path, name )
		if os.path.isfile( url ): return ctypes.CDLL(url)
		else: return ctypes.CDLL(name) #fallback

RPYTHONIC_WRAPPER_FUNCTIONS = {}
RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES = []
RPYTHONIC_AUTOPREFIX_IGNORE = []

## ctypes does not clearly expose these types ##
PyCFuncPtrType = type(ctypes.CFUNCTYPE(ctypes.c_void_p))
PyCArrayType = type( ctypes.c_int * 2 )
PyCPointerType = type( ctypes.POINTER(ctypes.c_int) )
PyCStructType = type( ctypes.Structure )
CArgObject = type( ctypes.byref(ctypes.c_int()) )

class _rpythonic_meta_(object):
	'''
	Reserved Attributes:
		POINTER
		CSTRUCT
		CAST
	'''
	_rpythonic_ = True		# workaround for now, must have a way to know if object is a meta from another module, isinstance(o,_rpythonic_meta_) will fail in those cases. another workaround could be check sys.modules for other rpythonic modules and fetch _rpythonic_meta_ from there.
	def __init__(self, *args, **kw ):							# cheap trick, abuse **kw, and look for "pointer", "cast"
		if kw and 'pointer' not in kw: raise SyntaxError	# sorry, you can not init with keywords
		elif kw and 'pointer' in kw:
			if 'cast' in kw and kw['cast']:
				self.POINTER = ctypes.cast( kw['pointer'], ctypes.POINTER(self.CSTRUCT) )
			else: self.POINTER = kw['pointer']
		else: self.POINTER = ctypes.pointer( self.CSTRUCT(*args) )
		self.POINTER.pyobject = self	# .pyobject is local to this pointer "object"

	def __getattr__(self,name):
		if hasattr( self.POINTER.contents, name ):
			return getattr( self.POINTER.contents, name )

		else:	# when rpythonic failed to generate good bindings - these lookups should be cached
			for parent in self._rpythonic_parent_classes_:
				if hasattr( parent, name ):
					method = getattr( parent, name )	# should check if it really is an unbound method
					if method in parent._rpythonic_unbound_lookup_:
						func = parent._rpythonic_unbound_lookup_[ method ]
						n = func.name
						if len(func.argnames) > 1:
							argnames = func.argnames[ 1 : ]
							a = ',' + '=None,'.join( argnames ) + '=None'
							b = ','.join( argnames )
						else: a = b = ''
						lamb = eval( 'lambda self %s: %s( self.POINTER, %s )' %(a,n,b) )
						setattr( self.__class__, name, lamb )
						#return lamb	# this would return the unbound lambda, must call getattr again
						return getattr( self, name )
					else:
						# this can happen if self also inherits from the same parent class,
						# assume that by continuing this reaches that shared parent class,
						# and the lambda above is created as normal.
						continue
			## last resort, load from global name space ##
			G = globals()
			if name in G: return lambda *args: G[name](self.POINTER, *args)
			else:
				for prefix in self._autoprefix_:
					n = prefix + name
					if n in G: return lambda *args: G[n](self.POINTER, *args)
				print( 'possible auto-prefixes available', self._autoprefix_ )
				raise AttributeError

	def __call__(self, type=False):
		print('calling object is DEPRECATED - use ob.POINTER or ob.CSTRUCT')
		if type: return self.CSTRUCT
		else: return self.POINTER


def _rpythonic_generate_subclass_( name, struct, functions ):
	head = 'class %s( _rpythonic_meta_ ):' %name
	body = [ 
		'_rpythonic_parent_classes_ = []' ,
		'_rpythonic_unbound_lookup_ = {}' 
	]

	names = [ func.name for func in functions ]

	possibles = {}
	rank = []		# rank by longest name
	if len(names) > 3000: print('too many functions to use this hack')
	else:
		for n1 in names:
			prefix = ''
			for i,char in enumerate(n1):
				prefix += char
				if prefix not in possibles:
					possibles[ prefix ] = 0
					for n2 in names:
						if n2.startswith( prefix ):
							possibles[ prefix ] += 1

					if not rank or len(prefix) > len(rank[-1]) and possibles[prefix] > len(names)/4:
						rank.append( prefix )

	top = []
	while rank:
		best = rank.pop()
		if possibles[best] > len(functions)/2 and best not in names:
			if best.endswith('_set_') or best.endswith('_get_'): best = best[ : -4 ]
			elif best.endswith('Set') or best.endswith('Get'): best = best[ : -3 ]

			rem = []
			for other in rank:
				if best.startswith(other): rem.append( other )
			for r in rem: rank.remove( r )

			if best not in top: top.append( best )

		if len(top) > 3: break

	for n in names:		# find shortest prefixes #
		prefix = ''
		for i,char in enumerate(n):		# cammelCase
			if i==0: prefix += char; continue
			if char.isupper() and len(prefix) >= 2: break
			prefix += char
		if prefix and prefix != n and len(prefix) >= 2:
			hits = 0
			for other in names:
				if other.startswith( prefix ): hits += 1
			if hits >= 2 and prefix not in top:
				top.append( prefix )
				if len(top) >= 6: break

	## setup full names
	for func in functions:
		n = func.name
		if len(func.argnames) > 1:
			argnames = func.argnames[ 1 : ]
			a = ',' + '=None,'.join( argnames ) + '=None'
			b = ','.join( argnames )
		else: a = b = ''

		fhead = 'def %s( self %s ):' %(n,a)
		fbody = ['return %s(self.POINTER, %s)' %(func.name,b)]
		g = fhead + '\n\t\t' + '\n\t\t'.join( fbody )
		body.append( g )
		#body.append( '%s._rpythonic_function_ = %s' %(func.name, func.name) )

	## setup short names ##
	for n in names:
		for prefix in top:
			if n.startswith(prefix) and n[len(prefix):] not in names:
				alt = n[ len(prefix) : ]
				if alt and alt != n and alt not in PYTHON_RESERVED_KEYWORDS and not alt.isdigit() and not alt[0].isdigit():
					body.append( '%s = %s' %(alt,n) )
					names.append( alt )

	gen = head + '\n\t' + '\n\t'.join( body )
	try: exec( gen )
	except:
		print( gen )
		raise SyntaxError

	klass = locals()[name]
	klass.CSTRUCT = struct	# ctypes struct class

	klass._autoprefix_ = top
	for func in functions:
		unbound = getattr( klass, func.name )
		klass._rpythonic_unbound_lookup_[ unbound ] = func
		# klass.longname is klass.shortname = False
		# klass.longname == klass.shortname = True
	return klass

def _rpythonic_convert_structs_to_objects():
	G = globals()
	for klass in _OOAPI_:
		altname = name = klass.__name__
		prefix = ''
		for i,char in enumerate(name):
			if i==0: prefix += char; continue
			if char.isupper(): break
			prefix += char
		if prefix and prefix != name:
			hits = 0
			for other in _OOAPI_:
				if other is not klass:
					if other.__name__.startswith( prefix ): hits += 1
			if hits >= 2:
				altname = name[ len(prefix) : ]

		funcs = _OOAPI_[ klass ]
		newklass = _rpythonic_generate_subclass_( altname, klass, funcs )
		klass._rpythonic_wrapper_class_ = newklass
		G[ name ] = newklass	# replace struct with wrapper
		if altname not in G: G[ altname ] = newklass	# safely define with nicer name
		elif altname != name: # odd cases, maybe a function that returns the object, almost never happens.
			print('WARN - not replacing something with struct wrapper:', G[altname] )


def _rpythonic_setup_return_wrappers():
	R = _rpythonic_function_
	for klass in _OOAPI_:
		if klass in _OOAPI_RETURNS_OBJECT_:
			for f in _OOAPI_RETURNS_OBJECT_[klass]:
				f.object_oriented = True
				if not f.return_wrapper:	# just in case the ctypes footer had already defined it, do not overwrite
					f.return_wrapper = klass._rpythonic_wrapper_class_


###############################################################
##						OLD META FUNC						##
###############################################################
def _rpythonic_function_( name, result=ctypes.c_void_p, args=[]):
	mname = '_metafunc_%s' %name
	exec( 'class %s( _rpythonic_metafunc_ ): pass' %mname )
	k = locals()[mname]
	return k( name, result, args )
_OOAPI_ = {}
_OOAPI_RETURNS_OBJECT_ = {}
class _rpythonic_metafunc_(object):
	def __init__(self, name, result=ctypes.c_void_p, args=[]):
		self.name = name
		self.result = result
		self.argtypes = []		# can dynamically change CFUNCTYPE trick
		self.argnames = []
		self.argtypestypes = []
		for i,arg in enumerate(args):
			n,t = arg
			if n in PYTHON_RESERVED_KEYWORDS: n = 'C_'+n
			if n in self.argnames: n = '%s%s' %(n,i)
			self.argnames.append( n )
			self.argtypes.append( t )
			self.argtypestypes.append( type(t) )		# precomputed for speed

		self.argnames = tuple( self.argnames )				# should never change
		self.numargs = len( self.argtypes )
		self.callbacks = [None] * self.numargs
		self.return_wrapper = None
		self.object_oriented = False
		self.function = None
		for cdll in _CTYPES_CDLLS:	# functions could be multiple libraries
			if hasattr(cdll, self.name):
				func = self.function = getattr(cdll, self.name )
				RPYTHONIC_WRAPPER_FUNCTIONS[ name ] = self
				break
		if not self.function:
			RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES.append( name )

		if self.function: self.reset()

	def change_argument_type( self, name, t ):
		idx = self.argnames.index( name )
		self.argtypes[ idx ] = t
		self.argtypestypes[ idx ] = type(t)
		self.function.argtypes = self.argtypes

	def reset(self):
		if self.argnames:
			a = ',' + '=None,'.join( self.argnames ) + '=None'
			b = ','.join( self.argnames )
		else: a = b = ''

		callmeth = eval( 'lambda self %s: self._call_( %s )' %(a,b) )
		setattr( self.__class__, '__call__', callmeth )

		self.function.restype = self.result
		self.function.argtypes = self.argtypes

		if type( self.result ) is PyCPointerType and type(self.result._type_) is PyCStructType:
			klass = self.result._type_
			if klass not in _OOAPI_RETURNS_OBJECT_: _OOAPI_RETURNS_OBJECT_[klass] = []
			_OOAPI_RETURNS_OBJECT_[klass].append( self )

		self.defaults = []
		for i in range( self.numargs ):
			T = self.argtypes[ i ]
			if type(T) is PyCFuncPtrType:
				p = T()	# func pointers can not be None
				self.defaults.append( p )
				self.callbacks[ i ] = p					# save reference
			elif T in (ctypes.c_int, ctypes.c_uint, ctypes.c_long, ctypes.c_ulong):
				self.defaults.append( 0 )
			elif T in (ctypes.c_float, ctypes.c_double):
				self.defaults.append( .0 )
			else: self.defaults.append( None )	# None is allowed for all other types

			## generate OO API ##
			if i == 0 and type(T) is PyCPointerType and type(T._type_) is PyCStructType:
				klass = T._type_
				if klass not in _OOAPI_: _OOAPI_[ klass ] = []
				_OOAPI_[ klass ].append( self )

	def _call_( self, *args ):			# allow flexible calling types
		cargs = list( self.defaults )
		for i,arg in enumerate(args):
			if isinstance( arg, _rpythonic_meta_ ): arg = arg.POINTER
			elif hasattr( arg, '_rpythonic_' ): arg = arg.POINTER		# workaround - instance from another module

			t = type(arg)
			k = self.argtypes[ i ]
			kt = self.argtypestypes[ i ]
			if arg is None and cargs[i] is not None:	# use user defaults, very rare cases
				continue

			elif t is bool and k is ctypes.c_int:
				if arg: cargs[i] = 1	#ctypes.c_int(1)
				else: cargs[i] = 0	#ctypes.c_int(0)

			elif t in (list,tuple):				# convert lists and tuples into array
				if kt is PyCArrayType:
					cargs[ i ] = k(*arg)
				elif kt is PyCStructType:
					if k._array_wrapper_: cargs[ i ] = k(arg)	# allow easy array init
					else: cargs[ i ] = k(*arg)							# allow multiple args
				elif kt is PyCPointerType:
					cargs[ i ] = _convert_nested_list_to_pointer( k, arg )
				else: assert 0

			elif isinstance( arg, ctypes._Pointer ) and t is not k and kt is PyCPointerType:
				cargs[ i ] = ctypes.cast( arg, k )		# generic's that need to be cast

			elif kt is PyCStructType and isinstance( arg, ctypes._Pointer ):
				cargs[ i ] = arg.contents	# fixed may25

			elif kt is PyCPointerType and not isinstance( arg, (ctypes._Pointer,CArgObject) ):
				if t in (int,float,bool): ptr = k( k._type_(arg) )
				elif t is str:
					if not _ISPYTHON2: arg = arg.encode('utf-8')	# encode to ascii in python3
					ptr = ctypes.create_string_buffer(arg)				# correct and pypy compatible
				elif t in (PyCStructType, PyCArrayType):
					ptr = ctypes.cast( ctypes.pointer( arg ), k )
				else:
					ptr = arg	# TODO print warning?
				cargs[ i ] = ptr

			elif kt is PyCFuncPtrType:
				if t.__name__ == 'CFunctionType': cargs[ i ] = arg		# assume outside holds pointer
				else:													# this is not safe #
					cargs[ i ] = self.callbacks[ i ] = k( arg )				# assume arg is a callable
			else:
				cargs[ i ] = arg		# directly pass

		## if you define your own return_wrapper, it must take keyword "pointer"
		if self.return_wrapper: return self.return_wrapper( pointer=self.function( *cargs ) )
		else: return self.function( *cargs )



def _convert_nested_list_to_pointer( k, arg ):
	depth = 0; s = k
	while True:
		if type(s) is PyCPointerType:
			s = getattr( s, '_type_' )
			depth += 1
		else: break
	assert depth and depth <= 2
	if depth == 1:
		T = k._type_
		ptr = k( k._type_() )
		for i in range( len(arg) ):
			ptr[ i ] = T( *arg[i] )
	elif depth == 2:
		T = k._type_._type_
		_ptr = k._type_( k._type_._type_() )
		for i in range(len( arg )):
			for j in range( len(arg[i]) ):
				_ptr[ j ] = T( *arg[ i ][ j ] )
		ptr = k( _ptr )
	return ptr


def __freeze_rpythonic_struct( cls, fields ):
	if cls not in _OOAPI_: _OOAPI_[ cls ] = []	# wrap all structs
	try: setattr( cls, '_fields_', fields )
	except:
		print( 'WARN - bad order struct freeze', cls )
		#cls._fields_ = []

class _rpythonic_struct_( ctypes.Structure ):
	_array_wrapper_ = False
	_fields_ = []
	_methods_ = {}
	#def __call__(self): return self
	def __init__(self, *args, **kw ):
		cargs = []
		argtypes = []
		for a in self._fields_: argtypes.append( a[1] )
		if len(args) > len(argtypes): args = [args]	# allow both calling conventions
		for i,arg in enumerate( args ):
			if isinstance( arg, _rpythonic_meta_ ): arg = arg.POINTER

			t = type(arg)
			k = argtypes[ i ]
			if t in (list,tuple):
				if k.__class__.__name__	== 'PyCArrayType':
					cargs.append( k(*arg) )
				elif k.__class__.__name__ == 'PyCStructType':
					if k._array_wrapper_: cargs.append( k(arg) )	# allow easy array init
					else: cargs.append( k(*arg) )							# allow multiple args
			elif isinstance( arg, ctypes._Pointer ) and t is not k:
				cargs[ i ] = ctypes.cast( arg, k )	# generic's that need to be cast
			elif k.__class__.__name__ == 'PyCArrayType' and t in (float,int,bool):
				cargs.append( k(arg) )		# support init array from single value
			else:
				cargs.append( arg )		# directly pass

		ctypes.Structure.__init__(self, *cargs, **kw)


def _rpythonic_make_nice_global_enums_():
	G = globals()
	for name in RPYTHONIC_GLOBAL_ENUMS:
		if '_' in name and name.index('_') <= 4:
			altname = name[ name.index('_') + 1 : ]
			if altname not in G:
				G[altname] = RPYTHONIC_GLOBAL_ENUMS[ name ]

def _rpythonic_clean_up_missing_functions_():
	G = globals()
	for f in RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES:
		G.pop( f ); print(f)
	print( "C functions loaded: %s" %len(RPYTHONIC_WRAPPER_FUNCTIONS) )
	print( "C functions failed: %s" %len(RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES) )



###### NEW API #########
CTYPES_DLL = None

class _VOID_POINTER_CONTAINER_(object):
	def __init__(self, ptr, name=None):
		self._pointer_ = ptr
		self.name = name
NULL = _VOID_POINTER_CONTAINER_(None,'<null pointer>')


class meta:	# NEW API - allow run time switch from ctypes to rffi
	'''
	Methods:
		RPython will not allow object wrapper around a method (__call__ not allowed)
		keep C function names in list "__cfunctions__"
		rpythonic.enable_rffi( classA, classB )	
		can take advantage of methods in object-method-wrapper,
		generate rffi wrapper and set method on classA, etc.
		replaces object-method-wrapper with rffi-method

	Properties:
		CPython: obj.x=1
		RPython: obj.set_x(1)	
	'''
	METAS = []
	def __init__(self, constructors=[], methods={}, properties={}):
		#global CTYPES_DLL	# TODO update me to using _CTYPES_CDLLS
		#if not CTYPES_DLL:
		#	CTYPES_DLL = _load_ctypes_lib( _clib_name_ )

		self.constructors = constructors
		self.methods = methods
		self.properties = properties
		self.METAS.append( self )



	def __call__(self, cls ):
		print('@meta', cls )

		if not self.constructors:
			lamb = lambda s, _explicit_pointer_=None: setattr(s,'_pointer_',getattr(_explicit_pointer_,'_pointer_')) if hasattr(_explicit_pointer_,'_pointer_') else setattr(s,'_pointer_',_explicit_pointer_)
			lamb._debug = '(no constructor)'
			setattr( cls, '__init__', lamb )
		else:
			con = self._find_best_function( self.constructors )
			cfunc = self._build_cfunc( con )
			setattr( cls, '_%s'%con['name'], cfunc )
			g = self._gen_init( con )
			setattr( cls, '__init__', g )
		
		## set methods ##
		for name in self.methods:
			meth = self.methods[ name ]
			cfuncs = []
			for m in meth['functions']:
				cfunc = self._build_cfunc( m, method=True, static=meth['static'] )
				self._setup_return( cfunc, meth )
				setattr( cls, '_%s'%m['name'], cfunc )
				cfuncs.append( cfunc )

			f = self._find_best_function( meth['functions'] )
			g = self._gen_method( meth, f )
			g._cfuncs = cfuncs
			if meth['static']: g = classmethod( g )
			setattr( cls, name, g )

		for name in self.properties:
			print( 'property:', name )
			p = []
			for f in self.properties[name]:
				cfunc = self._build_cfunc( f )
				setattr( cls, '_%s'%f['name'], cfunc )
				g = self._gen_method( f, f )
				p.append( g )

			setattr( cls, name, property(*p) )

		return cls


	@staticmethod
	def _build_cfunc( info, method=False, static=False ):
		cfunc = getattr(CTYPES_DLL, info['name'])
		if method and not static: argtypes = [ ctypes.c_void_p ]
		else: argtypes = []
		for p in info['parameters']: argtypes.append( eval(p['ctypes_type']) )
		cfunc.argtypes = argtypes
		return cfunc

	@staticmethod
	def _setup_return( cfunc, info ):
		if not info['returns_fundamental']:
			cfunc.restype = ctypes.c_void_p
		elif info['returns_fundamental']:
			cfunc.restype = eval( info['returns_ctypes'] )
		else:
			cfunc.restype = ctypes.c_void_p

	@staticmethod
	def _gen_prepare_args( m ):
		a = []; b = []
		for i,p in enumerate(m['parameters']):
			if 'name' in p: n = p['name']
			else: n = '_unnamed_%s' %i
			if '<' in n: n = '_TODOfixme_%s' %i
			if n in PYTHON_RESERVED_KEYWORDS: n += str(i)
			if p['fundamental']:
				b.append( n )
				s = p['raw_type'].split()
				if 'default' in p:
					d = p['default']
					if p['raw_type'] in ('float', 'double'):
						if d.endswith('f'): d = d[:-1]
						d = d.replace(' ', '.')
						if 'e' in d: d = 0.0
						try: d = float(d)
						except: d = 0.0
					elif ('int' in s or 'size_t' in s) and not d.isdigit(): d = 0
					elif 'char' in s and '"' not in d: d = '""'
					elif d.lower() == 'false': d = False
					elif d.lower() == 'true': d = True
				elif 'char' in s: d = '""'
				elif 'float' in s or 'double' in s: d = 0.0
				elif 'size_t' in s or 'int' in s or 'long' in s or 'short' in s: d = 0
				elif p['raw_type'] == 'bool': d = False
				elif p['raw_type'] in ('void', '(template)'): d = 'NULL'
				else: print( p )
				a.append( n+'=%s' %d )

			else:
				b.append( '%s._pointer_'%n )
				a.append( n+'=NULL' )
		return a, b

	@staticmethod
	def _gen_init( m ):
		a, b = meta._gen_prepare_args( m )
		if a: e = 'lambda _py_self_, %s, _explicit_pointer_=None: ' %(','.join(a))
		else: e = 'lambda _py_self_, _explicit_pointer_=None: '
		e += 'setattr(_py_self_, "_pointer_", _py_self_._%s(%s))' %( m['name'], ','.join(b) )
		e += ' if not _explicit_pointer_ else '
		e += 'setattr(_py_self_, "_pointer_", _explicit_pointer_)'
		print( e )
		lamb = eval( e ); lamb._debug = e; lamb._introspect = m
		return lamb

	@staticmethod
	def _find_best_function( funcs ):
		best = funcs[0]
		score = -1
		if len(funcs) > 1:
			for f in funcs:
				hits = 0
				for p in f['parameters']:
					if p['fundamental']: hits += 1
				if hits and hits == len( f['parameters'] ):
					if hits > score:
						score = hits
						best = f
		return best

	@staticmethod
	def _gen_method( m, f ):
		a, b = meta._gen_prepare_args( f )
		if a: e = 'lambda _py_self_, %s: ' %(','.join(a))
		else: e = 'lambda _py_self_: '

		if 'static' in m and m['static']:	# static in c++ is like a classmethod
			c = '_py_self_._%s( %s )' %( f['name'], ','.join(b) )
		else:
			c = '_py_self_._%s( _py_self_._pointer_, %s )' %( f['name'], ','.join(b) )

		if not m['returns_fundamental']:
			if 'returns_unknown' in m or '<' in m['returns']: c = '_VOID_POINTER_CONTAINER_( %s, name="%s" )' %(c,m['returns'])
			else:
				something = m['returns'].replace('::', '.')
				c = '%s( _explicit_pointer_=%s )' %(something, c)

		e += c; lamb = eval( e )
		lamb._debug = e; lamb._introspect = f
		return lamb


	META_FUNCTIONS = []
	@classmethod
	def function( self, info ):
		print('@meta.function', info['name'] )
		#global CTYPES_DLL
		#if not CTYPES_DLL:
		#	CTYPES_DLL = _load_ctypes_lib( _clib_name_ )

		cfunc = self._build_cfunc( info, method=False, static=True )
		setattr( meta, '_%s'%info['name'], cfunc )
		self._setup_return( cfunc, info )
		a, b = meta._gen_prepare_args( info )
		e = 'lambda %s: ' %(','.join(a))
		c = 'meta._%s( %s )' %( info['name'], ','.join(b) )

		if not info['returns_fundamental']:
			if 'returns_unknown' in info or '<' in info['returns']:
				c = '_VOID_POINTER_CONTAINER_( %s, name="%s" )' %(c,info['returns'])
			else:
				something = info['returns'].replace('::', '.')
				c = '%s( _explicit_pointer_=%s )' %(something, c)
		e += c
		lamb = eval( e )
		lamb._debug = e
		lamb._introspect = info
		return lamb



def _rpythonic_strip_prefixes_( prefixes ):
	G = globals()
	names = list(G.keys())	# ensure list in py3
	for name in names:
		for prefix in prefixes:
			if name.startswith( prefix ):
				newname = name[ len(prefix) : ]
				if newname and newname not in G:
					G[ newname ] = G[ name ]


########################################################
##				Load Dynamic Libaries					##
def _rpythonic_load_dynamic_libraries(names):
	global _CTYPES_CDLLS
	for name in names:
		cdll = _load_ctypes_lib( name )
		if cdll:
			print('[[dynamic library loaded: %s]]' %name)
			_CTYPES_CDLLS.append( cdll )
#----------------------------------------------------------#
print( os.path.abspath( os.path.curdir ) )



_rpythonic_load_dynamic_libraries( ['gtk-3', 'nautilus-extension'] )

## macro globals ##
NAUTILUS_WINDOW_SIDEBAR_PLACES = "places"
NAUTILUS_WINDOW_SIDEBAR_TREE = "tree"
NAUTILUS_ICON_DND_GNOME_ICON_LIST_TYPE = "x-special/gnome-icon-list"
NAUTILUS_ICON_DND_URI_LIST_TYPE = "text/uri-list"
NAUTILUS_ICON_DND_NETSCAPE_URL_TYPE = "_NETSCAPE_URL"
NAUTILUS_ICON_DND_BGIMAGE_TYPE = "property/bgimage"
NAUTILUS_ICON_DND_ROOTWINDOW_DROP_TYPE = "application/x-rootwindow-drop"
NAUTILUS_ICON_DND_XDNDDIRECTSAVE_TYPE = "XdndDirectSave0"
NAUTILUS_ICON_DND_RAW_TYPE = "application/octet-stream"
NAUTILUS_FILE_DND_ERASE_KEYWORD = "erase"
NAUTILUS_FILE_LARGE_TOP_LEFT_TEXT_MAXIMUM_CHARACTERS_PER_LINE = 80
NAUTILUS_FILE_LARGE_TOP_LEFT_TEXT_MAXIMUM_LINES = 24
NAUTILUS_FILE_LARGE_TOP_LEFT_TEXT_MAXIMUM_BYTES = 10000
NAUTILUS_FILE_TOP_LEFT_TEXT_MAXIMUM_CHARACTERS_PER_LINE = 10
NAUTILUS_FILE_TOP_LEFT_TEXT_MAXIMUM_LINES = 5
NAUTILUS_FILE_TOP_LEFT_TEXT_MAXIMUM_BYTES = 1024
NAUTILUS_FILE_DEFAULT_ATTRIBUTES = "standard::*,access::*,mountable::*,time::*,unix::*,owner::*,selinux::*,thumbnail::*,id::filesystem,trash::orig-path,trash::deletion-date,metadata::*"
NAUTILUS_SAVED_SEARCH_EXTENSION = ".savedSearch"
NAUTILUS_SAVED_SEARCH_MIMETYPE = "application/x-gnome-saved-search"
NAUTILUS_FILE_EMBLEM_NAME_SYMBOLIC_LINK = "symbolic-link"
NAUTILUS_FILE_EMBLEM_NAME_CANT_READ = "noread"
NAUTILUS_FILE_EMBLEM_NAME_CANT_WRITE = "nowrite"
NAUTILUS_FILE_EMBLEM_NAME_TRASH = "trash"
NAUTILUS_FILE_EMBLEM_NAME_NOTE = "note"
UNDEFINED_TIME = -1
NAUTILUS_PREFERENCES_CONFIRM_TRASH = "confirm-trash"
NAUTILUS_PREFERENCES_ENABLE_DELETE = "enable-delete"
NAUTILUS_PREFERENCES_SHOW_HIDDEN_FILES = "show-hidden-files"
NAUTILUS_PREFERENCES_SHOW_ADVANCED_PERMISSIONS = "show-advanced-permissions"
NAUTILUS_PREFERENCES_DATE_FORMAT = "date-format"
NAUTILUS_PREFERENCES_MOUSE_USE_EXTRA_BUTTONS = "mouse-use-extra-buttons"
NAUTILUS_PREFERENCES_MOUSE_FORWARD_BUTTON = "mouse-forward-button"
NAUTILUS_PREFERENCES_MOUSE_BACK_BUTTON = "mouse-back-button"
NAUTILUS_PREFERENCES_CLICK_POLICY = "click-policy"
NAUTILUS_PREFERENCES_EXECUTABLE_TEXT_ACTIVATION = "executable-text-activation"
NAUTILUS_PREFERENCES_INSTALL_MIME_ACTIVATION = "install-mime-activation"
NAUTILUS_PREFERENCES_ALWAYS_USE_BROWSER = "always-use-browser"
NAUTILUS_PREFERENCES_NEW_TAB_POSITION = "tabs-open-position"
NAUTILUS_PREFERENCES_ALWAYS_USE_LOCATION_ENTRY = "always-use-location-entry"
NAUTILUS_WINDOW_STATE_START_WITH_SIDEBAR = "start-with-sidebar"
NAUTILUS_WINDOW_STATE_GEOMETRY = "geometry"
NAUTILUS_WINDOW_STATE_MAXIMIZED = "maximized"
NAUTILUS_WINDOW_STATE_SIDEBAR_WIDTH = "sidebar-width"
NAUTILUS_PREFERENCES_SORT_DIRECTORIES_FIRST = "sort-directories-first"
NAUTILUS_PREFERENCES_DEFAULT_SORT_ORDER = "default-sort-order"
NAUTILUS_PREFERENCES_DEFAULT_SORT_IN_REVERSE_ORDER = "default-sort-in-reverse-order"
NAUTILUS_PREFERENCES_DEFAULT_FOLDER_VIEWER = "default-folder-viewer"
NAUTILUS_ICON_VIEW_IID = "OAFIID:Nautilus_File_Manager_Icon_View"
NAUTILUS_LIST_VIEW_IID = "OAFIID:Nautilus_File_Manager_List_View"
NAUTILUS_PREFERENCES_ICON_VIEW_DEFAULT_ZOOM_LEVEL = "default-zoom-level"
NAUTILUS_PREFERENCES_ICON_VIEW_LABELS_BESIDE_ICONS = "labels-beside-icons"
NAUTILUS_PREFERENCES_ICON_VIEW_CAPTIONS = "captions"
NAUTILUS_PREFERENCES_ICON_VIEW_THUMBNAIL_SIZE = "thumbnail-size"
NAUTILUS_PREFERENCES_ICON_VIEW_TEXT_ELLIPSIS_LIMIT = "text-ellipsis-limit"
NAUTILUS_PREFERENCES_DESKTOP_TEXT_ELLIPSIS_LIMIT = "text-ellipsis-limit"
NAUTILUS_PREFERENCES_LIST_VIEW_DEFAULT_ZOOM_LEVEL = "default-zoom-level"
NAUTILUS_PREFERENCES_LIST_VIEW_DEFAULT_VISIBLE_COLUMNS = "default-visible-columns"
NAUTILUS_PREFERENCES_LIST_VIEW_DEFAULT_COLUMN_ORDER = "default-column-order"
NAUTILUS_PREFERENCES_SHOW_TEXT_IN_ICONS = "show-icon-text"
NAUTILUS_PREFERENCES_SHOW_DIRECTORY_ITEM_COUNTS = "show-directory-item-counts"
NAUTILUS_PREFERENCES_SHOW_IMAGE_FILE_THUMBNAILS = "show-image-thumbnails"
NAUTILUS_PREFERENCES_IMAGE_FILE_THUMBNAIL_LIMIT = "thumbnail-limit"
NAUTILUS_PREFERENCES_DESKTOP_FONT = "font"
NAUTILUS_PREFERENCES_DESKTOP_HOME_VISIBLE = "home-icon-visible"
NAUTILUS_PREFERENCES_DESKTOP_HOME_NAME = "home-icon-name"
NAUTILUS_PREFERENCES_DESKTOP_TRASH_VISIBLE = "trash-icon-visible"
NAUTILUS_PREFERENCES_DESKTOP_TRASH_NAME = "trash-icon-name"
NAUTILUS_PREFERENCES_DESKTOP_VOLUMES_VISIBLE = "volumes-visible"
NAUTILUS_PREFERENCES_DESKTOP_NETWORK_VISIBLE = "network-icon-visible"
NAUTILUS_PREFERENCES_DESKTOP_NETWORK_NAME = "network-icon-name"
NAUTILUS_PREFERENCES_DESKTOP_BACKGROUND_FADE = "background-fade"
NAUTILUS_PREFERENCES_BULK_RENAME_TOOL = "bulk-rename-tool"
NAUTILUS_PREFERENCES_LOCKDOWN_COMMAND_LINE = "disable-command-line"
NAUTILUS_PREFERENCES_SHOW_DESKTOP = "show-desktop-icons"
NAUTILUS_ICON_CONTAINER_TYPESELECT_FLUSH_DELAY = 1000000
NAUTILUS_ICON_SIZE_SMALLEST = 16
NAUTILUS_ICON_SIZE_SMALLER = 24
NAUTILUS_ICON_SIZE_SMALL = 32
NAUTILUS_ICON_SIZE_STANDARD = 48
NAUTILUS_ICON_SIZE_LARGE = 72
NAUTILUS_ICON_SIZE_LARGER = 96
NAUTILUS_ICON_SIZE_LARGEST = 192
NAUTILUS_ICON_MAXIMUM_SIZE = 320
NAUTILUS_ICON_DESKTOP = "user-desktop"
NAUTILUS_ICON_FILESYSTEM = "drive-harddisk-system"
NAUTILUS_ICON_FOLDER = "folder"
NAUTILUS_ICON_FOLDER_REMOTE = "folder-remote"
NAUTILUS_ICON_HOME = "user-home"
NAUTILUS_ICON_NETWORK = "network-workgroup"
NAUTILUS_ICON_NETWORK_SERVER = "network-server"
NAUTILUS_ICON_SEARCH = "system-search"
NAUTILUS_ICON_TRASH = "user-trash"
NAUTILUS_ICON_TRASH_FULL = "user-trash-full"
NAUTILUS_ICON_DELETE = "edit-delete"
NAUTILUS_ICON_FOLDER_DESKTOP = "user-desktop"
NAUTILUS_ICON_FOLDER_DOCUMENTS = "folder-documents"
NAUTILUS_ICON_FOLDER_DOWNLOAD = "folder-download"
NAUTILUS_ICON_FOLDER_MUSIC = "folder-music"
NAUTILUS_ICON_FOLDER_PICTURES = "folder-pictures"
NAUTILUS_ICON_FOLDER_PUBLIC_SHARE = "folder-publicshare"
NAUTILUS_ICON_FOLDER_TEMPLATES = "folder-templates"
NAUTILUS_ICON_FOLDER_VIDEOS = "folder-videos"
NAUTILUS_ICON_FOLDER_SAVED_SEARCH = "folder-saved-search"
NAUTILUS_ICON_TEMPLATE = "text-x-generic-template"
NAUTILUS_ICON_BURN = "nautilus-cd-burner"
NAUTILUS_METADATA_KEY_DEFAULT_VIEW = "nautilus-default-view"
NAUTILUS_METADATA_KEY_LOCATION_BACKGROUND_COLOR = "folder-background-color"
NAUTILUS_METADATA_KEY_LOCATION_BACKGROUND_IMAGE = "folder-background-image"
NAUTILUS_METADATA_KEY_ICON_VIEW_ZOOM_LEVEL = "nautilus-icon-view-zoom-level"
NAUTILUS_METADATA_KEY_ICON_VIEW_AUTO_LAYOUT = "nautilus-icon-view-auto-layout"
NAUTILUS_METADATA_KEY_ICON_VIEW_SORT_BY = "nautilus-icon-view-sort-by"
NAUTILUS_METADATA_KEY_ICON_VIEW_SORT_REVERSED = "nautilus-icon-view-sort-reversed"
NAUTILUS_METADATA_KEY_ICON_VIEW_KEEP_ALIGNED = "nautilus-icon-view-keep-aligned"
NAUTILUS_METADATA_KEY_ICON_VIEW_LAYOUT_TIMESTAMP = "nautilus-icon-view-layout-timestamp"
NAUTILUS_METADATA_KEY_LIST_VIEW_ZOOM_LEVEL = "nautilus-list-view-zoom-level"
NAUTILUS_METADATA_KEY_LIST_VIEW_SORT_COLUMN = "nautilus-list-view-sort-column"
NAUTILUS_METADATA_KEY_LIST_VIEW_SORT_REVERSED = "nautilus-list-view-sort-reversed"
NAUTILUS_METADATA_KEY_LIST_VIEW_VISIBLE_COLUMNS = "nautilus-list-view-visible-columns"
NAUTILUS_METADATA_KEY_LIST_VIEW_COLUMN_ORDER = "nautilus-list-view-column-order"
NAUTILUS_METADATA_KEY_WINDOW_GEOMETRY = "nautilus-window-geometry"
NAUTILUS_METADATA_KEY_WINDOW_SCROLL_POSITION = "nautilus-window-scroll-position"
NAUTILUS_METADATA_KEY_WINDOW_SHOW_HIDDEN_FILES = "nautilus-window-show-hidden-files"
NAUTILUS_METADATA_KEY_WINDOW_MAXIMIZED = "nautilus-window-maximized"
NAUTILUS_METADATA_KEY_WINDOW_STICKY = "nautilus-window-sticky"
NAUTILUS_METADATA_KEY_WINDOW_KEEP_ABOVE = "nautilus-window-keep-above"
NAUTILUS_METADATA_KEY_SIDEBAR_BACKGROUND_COLOR = "nautilus-sidebar-background-color"
NAUTILUS_METADATA_KEY_SIDEBAR_BACKGROUND_IMAGE = "nautilus-sidebar-background-image"
NAUTILUS_METADATA_KEY_SIDEBAR_BUTTONS = "nautilus-sidebar-buttons"
NAUTILUS_METADATA_KEY_ICON_POSITION = "nautilus-icon-position"
NAUTILUS_METADATA_KEY_ICON_POSITION_TIMESTAMP = "nautilus-icon-position-timestamp"
NAUTILUS_METADATA_KEY_ANNOTATION = "annotation"
NAUTILUS_METADATA_KEY_ICON_SCALE = "icon-scale"
NAUTILUS_METADATA_KEY_CUSTOM_ICON = "custom-icon"
NAUTILUS_METADATA_KEY_CUSTOM_ICON_NAME = "custom-icon-name"
NAUTILUS_METADATA_KEY_SCREEN = "screen"
NAUTILUS_METADATA_KEY_EMBLEMS = "emblems"
NAUTILUS_ACTION_STOP = "Stop"
NAUTILUS_ACTION_RELOAD = "Reload"
NAUTILUS_ACTION_BACK = "Back"
NAUTILUS_ACTION_UP = "Up"
NAUTILUS_ACTION_UP_ACCEL = "UpAccel"
NAUTILUS_ACTION_UP_ACCEL = "UpAccel"
NAUTILUS_ACTION_FORWARD = "Forward"
NAUTILUS_ACTION_GO_HOME = "Home"
NAUTILUS_ACTION_HOME = "Home"
NAUTILUS_ACTION_CLOSE = "Close"
NAUTILUS_ACTION_SEARCH = "Search"
NAUTILUS_ACTION_PREFERENCES = "Preferences"
NAUTILUS_ACTION_HELP = "NautilusHelp"
NAUTILUS_ACTION_OPEN = "Open"
NAUTILUS_ACTION_OPEN_ALTERNATE = "OpenAlternate"
NAUTILUS_ACTION_OPEN_IN_NEW_TAB = "OpenInNewTab"
NAUTILUS_ACTION_LOCATION_OPEN_ALTERNATE = "LocationOpenAlternate"
NAUTILUS_ACTION_LOCATION_OPEN_IN_NEW_TAB = "LocationOpenInNewTab"
NAUTILUS_ACTION_OTHER_APPLICATION1 = "OtherApplication1"
NAUTILUS_ACTION_OTHER_APPLICATION2 = "OtherApplication2"
NAUTILUS_ACTION_PROPERTIES = "Properties"
NAUTILUS_ACTION_PROPERTIES_ACCEL = "PropertiesAccel"
NAUTILUS_ACTION_LOCATION_PROPERTIES = "LocationProperties"
NAUTILUS_ACTION_CUT = "Cut"
NAUTILUS_ACTION_LOCATION_CUT = "LocationCut"
NAUTILUS_ACTION_COPY = "Copy"
NAUTILUS_ACTION_LOCATION_COPY = "LocationCopy"
NAUTILUS_ACTION_PASTE = "Paste"
NAUTILUS_ACTION_LOCATION_PASTE_FILES_INTO = "LocationPasteFilesInto"
NAUTILUS_ACTION_RENAME = "Rename"
NAUTILUS_ACTION_DUPLICATE = "Duplicate"
NAUTILUS_ACTION_TRASH = "Trash"
NAUTILUS_ACTION_LOCATION_TRASH = "LocationTrash"
NAUTILUS_ACTION_DELETE = "Delete"
NAUTILUS_ACTION_LOCATION_DELETE = "LocationDelete"
NAUTILUS_ACTION_LOCATION_RESTORE_FROM_TRASH = "LocationRestoreFromTrash"
NAUTILUS_ACTION_POLL = "Poll"
NAUTILUS_ACTION_SCRIPTS = "Scripts"
NAUTILUS_ACTION_STRETCH = "Stretch"
NAUTILUS_ACTION_UNSTRETCH = "Unstretch"
NAUTILUS_DESKTOP_ICON_VIEW_IID = "OAFIID:Nautilus_File_Manager_Desktop_Icon_View"
NAUTILUS_DESKTOP_ICON_VIEW_ID = "OAFIID:Nautilus_File_Manager_Desktop_Icon_View"
NAUTILUS_EMPTY_VIEW_ID = "OAFIID:Nautilus_File_Manager_Empty_View"
NAUTILUS_FLOATING_BAR_ACTION_ID_STOP = 1
NAUTILUS_ICON_VIEW_ID = "OAFIID:Nautilus_File_Manager_Icon_View"
NAUTILUS_LIST_VIEW_ID = "OAFIID:Nautilus_File_Manager_List_View"
NAUTILUS_PLACES_SIDEBAR_ID = "places"
NAUTILUS_WINDOW_MIN_WIDTH = 200
NAUTILUS_WINDOW_MIN_HEIGHT = 200
NAUTILUS_WINDOW_DEFAULT_WIDTH = 800
NAUTILUS_WINDOW_DEFAULT_HEIGHT = 550
## enums ##
G_USER_DIRECTORY_DESKTOP = 0 
G_USER_DIRECTORY_DOCUMENTS = 1 
G_USER_DIRECTORY_DOWNLOAD = 2 
G_USER_DIRECTORY_MUSIC = 3 
G_USER_DIRECTORY_PICTURES = 4 
G_USER_DIRECTORY_PUBLIC_SHARE = 5 
G_USER_DIRECTORY_TEMPLATES = 6 
G_USER_DIRECTORY_VIDEOS = 7 
G_USER_N_DIRECTORIES = 8 

G_THREAD_ERROR_AGAIN = 0 

G_THREAD_PRIORITY_LOW = 0 
G_THREAD_PRIORITY_NORMAL = 1 
G_THREAD_PRIORITY_HIGH = 2 
G_THREAD_PRIORITY_URGENT = 3 

G_ONCE_STATUS_NOTCALLED = 0 
G_ONCE_STATUS_PROGRESS = 1 
G_ONCE_STATUS_READY = 2 

FPE_INTDIV = 1 
FPE_INTOVF = 2 
FPE_FLTDIV = 3 
FPE_FLTOVF = 4 
FPE_FLTUND = 5 
FPE_FLTRES = 6 
FPE_FLTINV = 7 
FPE_FLTSUB = 8 

ILL_ILLOPC = 1 
ILL_ILLOPN = 2 
ILL_ILLADR = 3 
ILL_ILLTRP = 4 
ILL_PRVOPC = 5 
ILL_PRVREG = 6 
ILL_COPROC = 7 
ILL_BADSTK = 8 

SI_ASYNCNL = -60 
SI_TKILL = -6 
SI_SIGIO = -5 
SI_ASYNCIO = -4 
SI_MESGQ = -3 
SI_TIMER = -2 
SI_QUEUE = -1 
SI_USER = 0 
SI_KERNEL = 128 

SEGV_MAPERR = 1 
SEGV_ACCERR = 2 

BUS_ADRALN = 1 
BUS_ADRERR = 2 
BUS_OBJERR = 3 

TRAP_BRKPT = 1 
TRAP_TRACE = 2 

CLD_EXITED = 1 
CLD_KILLED = 2 
CLD_DUMPED = 3 
CLD_TRAPPED = 4 
CLD_STOPPED = 5 
CLD_CONTINUED = 6 

POLL_IN = 1 
POLL_OUT = 2 
POLL_MSG = 3 
POLL_ERR = 4 
POLL_PRI = 5 
POLL_HUP = 6 

SIGEV_SIGNAL = 0 
SIGEV_NONE = 1 
SIGEV_THREAD = 2 
SIGEV_THREAD_ID = 4 

SS_ONSTACK = 1 
SS_DISABLE = 2 

G_BOOKMARK_FILE_ERROR_INVALID_URI = 0 
G_BOOKMARK_FILE_ERROR_INVALID_VALUE = 1 
G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED = 2 
G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND = 3 
G_BOOKMARK_FILE_ERROR_READ = 4 
G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING = 5 
G_BOOKMARK_FILE_ERROR_WRITE = 6 
G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND = 7 

G_SLICE_CONFIG_ALWAYS_MALLOC = 1 
G_SLICE_CONFIG_BYPASS_MAGAZINES = 2 
G_SLICE_CONFIG_WORKING_SET_MSECS = 3 
G_SLICE_CONFIG_COLOR_INCREMENT = 4 
G_SLICE_CONFIG_CHUNK_SIZES = 5 
G_SLICE_CONFIG_CONTENTION_COUNTER = 6 

G_CHECKSUM_MD5 = 0 
G_CHECKSUM_SHA1 = 1 
G_CHECKSUM_SHA256 = 2 

G_CONVERT_ERROR_NO_CONVERSION = 0 
G_CONVERT_ERROR_ILLEGAL_SEQUENCE = 1 
G_CONVERT_ERROR_FAILED = 2 
G_CONVERT_ERROR_PARTIAL_INPUT = 3 
G_CONVERT_ERROR_BAD_URI = 4 
G_CONVERT_ERROR_NOT_ABSOLUTE_PATH = 5 

G_DATE_DAY = 0 
G_DATE_MONTH = 1 
G_DATE_YEAR = 2 

G_DATE_BAD_WEEKDAY = 0 
G_DATE_MONDAY = 1 
G_DATE_TUESDAY = 2 
G_DATE_WEDNESDAY = 3 
G_DATE_THURSDAY = 4 
G_DATE_FRIDAY = 5 
G_DATE_SATURDAY = 6 
G_DATE_SUNDAY = 7 

G_DATE_BAD_MONTH = 0 
G_DATE_JANUARY = 1 
G_DATE_FEBRUARY = 2 
G_DATE_MARCH = 3 
G_DATE_APRIL = 4 
G_DATE_MAY = 5 
G_DATE_JUNE = 6 
G_DATE_JULY = 7 
G_DATE_AUGUST = 8 
G_DATE_SEPTEMBER = 9 
G_DATE_OCTOBER = 10 
G_DATE_NOVEMBER = 11 
G_DATE_DECEMBER = 12 

G_TIME_TYPE_STANDARD = 0 
G_TIME_TYPE_DAYLIGHT = 1 
G_TIME_TYPE_UNIVERSAL = 2 

G_FILE_ERROR_EXIST = 0 
G_FILE_ERROR_ISDIR = 1 
G_FILE_ERROR_ACCES = 2 
G_FILE_ERROR_NAMETOOLONG = 3 
G_FILE_ERROR_NOENT = 4 
G_FILE_ERROR_NOTDIR = 5 
G_FILE_ERROR_NXIO = 6 
G_FILE_ERROR_NODEV = 7 
G_FILE_ERROR_ROFS = 8 
G_FILE_ERROR_TXTBSY = 9 
G_FILE_ERROR_FAULT = 10 
G_FILE_ERROR_LOOP = 11 
G_FILE_ERROR_NOSPC = 12 
G_FILE_ERROR_NOMEM = 13 
G_FILE_ERROR_MFILE = 14 
G_FILE_ERROR_NFILE = 15 
G_FILE_ERROR_BADF = 16 
G_FILE_ERROR_INVAL = 17 
G_FILE_ERROR_PIPE = 18 
G_FILE_ERROR_AGAIN = 19 
G_FILE_ERROR_INTR = 20 
G_FILE_ERROR_IO = 21 
G_FILE_ERROR_PERM = 22 
G_FILE_ERROR_NOSYS = 23 
G_FILE_ERROR_FAILED = 24 

G_FILE_TEST_IS_REGULAR = 1 
G_FILE_TEST_IS_SYMLINK = 2 
G_FILE_TEST_IS_DIR = 4 
G_FILE_TEST_IS_EXECUTABLE = 8 
G_FILE_TEST_EXISTS = 16 

G_FORMAT_SIZE_DEFAULT = 0 
G_FORMAT_SIZE_LONG_FORMAT = 1 
G_FORMAT_SIZE_IEC_UNITS = 2 

G_HOOK_FLAG_ACTIVE = 1 
G_HOOK_FLAG_IN_CALL = 2 
G_HOOK_FLAG_MASK = 15 

G_UNICODE_CONTROL = 0 
G_UNICODE_FORMAT = 1 
G_UNICODE_UNASSIGNED = 2 
G_UNICODE_PRIVATE_USE = 3 
G_UNICODE_SURROGATE = 4 
G_UNICODE_LOWERCASE_LETTER = 5 
G_UNICODE_MODIFIER_LETTER = 6 
G_UNICODE_OTHER_LETTER = 7 
G_UNICODE_TITLECASE_LETTER = 8 
G_UNICODE_UPPERCASE_LETTER = 9 
G_UNICODE_SPACING_MARK = 10 
G_UNICODE_ENCLOSING_MARK = 11 
G_UNICODE_NON_SPACING_MARK = 12 
G_UNICODE_DECIMAL_NUMBER = 13 
G_UNICODE_LETTER_NUMBER = 14 
G_UNICODE_OTHER_NUMBER = 15 
G_UNICODE_CONNECT_PUNCTUATION = 16 
G_UNICODE_DASH_PUNCTUATION = 17 
G_UNICODE_CLOSE_PUNCTUATION = 18 
G_UNICODE_FINAL_PUNCTUATION = 19 
G_UNICODE_INITIAL_PUNCTUATION = 20 
G_UNICODE_OTHER_PUNCTUATION = 21 
G_UNICODE_OPEN_PUNCTUATION = 22 
G_UNICODE_CURRENCY_SYMBOL = 23 
G_UNICODE_MODIFIER_SYMBOL = 24 
G_UNICODE_MATH_SYMBOL = 25 
G_UNICODE_OTHER_SYMBOL = 26 
G_UNICODE_LINE_SEPARATOR = 27 
G_UNICODE_PARAGRAPH_SEPARATOR = 28 
G_UNICODE_SPACE_SEPARATOR = 29 

G_UNICODE_BREAK_MANDATORY = 0 
G_UNICODE_BREAK_CARRIAGE_RETURN = 1 
G_UNICODE_BREAK_LINE_FEED = 2 
G_UNICODE_BREAK_COMBINING_MARK = 3 
G_UNICODE_BREAK_SURROGATE = 4 
G_UNICODE_BREAK_ZERO_WIDTH_SPACE = 5 
G_UNICODE_BREAK_INSEPARABLE = 6 
G_UNICODE_BREAK_NON_BREAKING_GLUE = 7 
G_UNICODE_BREAK_CONTINGENT = 8 
G_UNICODE_BREAK_SPACE = 9 
G_UNICODE_BREAK_AFTER = 10 
G_UNICODE_BREAK_BEFORE = 11 
G_UNICODE_BREAK_BEFORE_AND_AFTER = 12 
G_UNICODE_BREAK_HYPHEN = 13 
G_UNICODE_BREAK_NON_STARTER = 14 
G_UNICODE_BREAK_OPEN_PUNCTUATION = 15 
G_UNICODE_BREAK_CLOSE_PUNCTUATION = 16 
G_UNICODE_BREAK_QUOTATION = 17 
G_UNICODE_BREAK_EXCLAMATION = 18 
G_UNICODE_BREAK_IDEOGRAPHIC = 19 
G_UNICODE_BREAK_NUMERIC = 20 
G_UNICODE_BREAK_INFIX_SEPARATOR = 21 
G_UNICODE_BREAK_SYMBOL = 22 
G_UNICODE_BREAK_ALPHABETIC = 23 
G_UNICODE_BREAK_PREFIX = 24 
G_UNICODE_BREAK_POSTFIX = 25 
G_UNICODE_BREAK_COMPLEX_CONTEXT = 26 
G_UNICODE_BREAK_AMBIGUOUS = 27 
G_UNICODE_BREAK_UNKNOWN = 28 
G_UNICODE_BREAK_NEXT_LINE = 29 
G_UNICODE_BREAK_WORD_JOINER = 30 
G_UNICODE_BREAK_HANGUL_L_JAMO = 31 
G_UNICODE_BREAK_HANGUL_V_JAMO = 32 
G_UNICODE_BREAK_HANGUL_T_JAMO = 33 
G_UNICODE_BREAK_HANGUL_LV_SYLLABLE = 34 
G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE = 35 
G_UNICODE_BREAK_CLOSE_PARANTHESIS = 36 

G_UNICODE_SCRIPT_INVALID_CODE = -1 
G_UNICODE_SCRIPT_COMMON = 0 
G_UNICODE_SCRIPT_INHERITED = 1 
G_UNICODE_SCRIPT_ARABIC = 2 
G_UNICODE_SCRIPT_ARMENIAN = 3 
G_UNICODE_SCRIPT_BENGALI = 4 
G_UNICODE_SCRIPT_BOPOMOFO = 5 
G_UNICODE_SCRIPT_CHEROKEE = 6 
G_UNICODE_SCRIPT_COPTIC = 7 
G_UNICODE_SCRIPT_CYRILLIC = 8 
G_UNICODE_SCRIPT_DESERET = 9 
G_UNICODE_SCRIPT_DEVANAGARI = 10 
G_UNICODE_SCRIPT_ETHIOPIC = 11 
G_UNICODE_SCRIPT_GEORGIAN = 12 
G_UNICODE_SCRIPT_GOTHIC = 13 
G_UNICODE_SCRIPT_GREEK = 14 
G_UNICODE_SCRIPT_GUJARATI = 15 
G_UNICODE_SCRIPT_GURMUKHI = 16 
G_UNICODE_SCRIPT_HAN = 17 
G_UNICODE_SCRIPT_HANGUL = 18 
G_UNICODE_SCRIPT_HEBREW = 19 
G_UNICODE_SCRIPT_HIRAGANA = 20 
G_UNICODE_SCRIPT_KANNADA = 21 
G_UNICODE_SCRIPT_KATAKANA = 22 
G_UNICODE_SCRIPT_KHMER = 23 
G_UNICODE_SCRIPT_LAO = 24 
G_UNICODE_SCRIPT_LATIN = 25 
G_UNICODE_SCRIPT_MALAYALAM = 26 
G_UNICODE_SCRIPT_MONGOLIAN = 27 
G_UNICODE_SCRIPT_MYANMAR = 28 
G_UNICODE_SCRIPT_OGHAM = 29 
G_UNICODE_SCRIPT_OLD_ITALIC = 30 
G_UNICODE_SCRIPT_ORIYA = 31 
G_UNICODE_SCRIPT_RUNIC = 32 
G_UNICODE_SCRIPT_SINHALA = 33 
G_UNICODE_SCRIPT_SYRIAC = 34 
G_UNICODE_SCRIPT_TAMIL = 35 
G_UNICODE_SCRIPT_TELUGU = 36 
G_UNICODE_SCRIPT_THAANA = 37 
G_UNICODE_SCRIPT_THAI = 38 
G_UNICODE_SCRIPT_TIBETAN = 39 
G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL = 40 
G_UNICODE_SCRIPT_YI = 41 
G_UNICODE_SCRIPT_TAGALOG = 42 
G_UNICODE_SCRIPT_HANUNOO = 43 
G_UNICODE_SCRIPT_BUHID = 44 
G_UNICODE_SCRIPT_TAGBANWA = 45 
G_UNICODE_SCRIPT_BRAILLE = 46 
G_UNICODE_SCRIPT_CYPRIOT = 47 
G_UNICODE_SCRIPT_LIMBU = 48 
G_UNICODE_SCRIPT_OSMANYA = 49 
G_UNICODE_SCRIPT_SHAVIAN = 50 
G_UNICODE_SCRIPT_LINEAR_B = 51 
G_UNICODE_SCRIPT_TAI_LE = 52 
G_UNICODE_SCRIPT_UGARITIC = 53 
G_UNICODE_SCRIPT_NEW_TAI_LUE = 54 
G_UNICODE_SCRIPT_BUGINESE = 55 
G_UNICODE_SCRIPT_GLAGOLITIC = 56 
G_UNICODE_SCRIPT_TIFINAGH = 57 
G_UNICODE_SCRIPT_SYLOTI_NAGRI = 58 
G_UNICODE_SCRIPT_OLD_PERSIAN = 59 
G_UNICODE_SCRIPT_KHAROSHTHI = 60 
G_UNICODE_SCRIPT_UNKNOWN = 61 
G_UNICODE_SCRIPT_BALINESE = 62 
G_UNICODE_SCRIPT_CUNEIFORM = 63 
G_UNICODE_SCRIPT_PHOENICIAN = 64 
G_UNICODE_SCRIPT_PHAGS_PA = 65 
G_UNICODE_SCRIPT_NKO = 66 
G_UNICODE_SCRIPT_KAYAH_LI = 67 
G_UNICODE_SCRIPT_LEPCHA = 68 
G_UNICODE_SCRIPT_REJANG = 69 
G_UNICODE_SCRIPT_SUNDANESE = 70 
G_UNICODE_SCRIPT_SAURASHTRA = 71 
G_UNICODE_SCRIPT_CHAM = 72 
G_UNICODE_SCRIPT_OL_CHIKI = 73 
G_UNICODE_SCRIPT_VAI = 74 
G_UNICODE_SCRIPT_CARIAN = 75 
G_UNICODE_SCRIPT_LYCIAN = 76 
G_UNICODE_SCRIPT_LYDIAN = 77 
G_UNICODE_SCRIPT_AVESTAN = 78 
G_UNICODE_SCRIPT_BAMUM = 79 
G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS = 80 
G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC = 81 
G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI = 82 
G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN = 83 
G_UNICODE_SCRIPT_JAVANESE = 84 
G_UNICODE_SCRIPT_KAITHI = 85 
G_UNICODE_SCRIPT_LISU = 86 
G_UNICODE_SCRIPT_MEETEI_MAYEK = 87 
G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN = 88 
G_UNICODE_SCRIPT_OLD_TURKIC = 89 
G_UNICODE_SCRIPT_SAMARITAN = 90 
G_UNICODE_SCRIPT_TAI_THAM = 91 
G_UNICODE_SCRIPT_TAI_VIET = 92 
G_UNICODE_SCRIPT_BATAK = 93 
G_UNICODE_SCRIPT_BRAHMI = 94 
G_UNICODE_SCRIPT_MANDAIC = 95 

G_NORMALIZE_DEFAULT = 0 
G_NORMALIZE_NFD = 0 
G_NORMALIZE_DEFAULT_COMPOSE = 1 
G_NORMALIZE_NFC = 1 
G_NORMALIZE_ALL = 2 
G_NORMALIZE_NFKD = 2 
G_NORMALIZE_ALL_COMPOSE = 3 
G_NORMALIZE_NFKC = 3 

G_IO_ERROR_NONE = 0 
G_IO_ERROR_AGAIN = 1 
G_IO_ERROR_INVAL = 2 
G_IO_ERROR_UNKNOWN = 3 

G_IO_CHANNEL_ERROR_FBIG = 0 
G_IO_CHANNEL_ERROR_INVAL = 1 
G_IO_CHANNEL_ERROR_IO = 2 
G_IO_CHANNEL_ERROR_ISDIR = 3 
G_IO_CHANNEL_ERROR_NOSPC = 4 
G_IO_CHANNEL_ERROR_NXIO = 5 
G_IO_CHANNEL_ERROR_OVERFLOW = 6 
G_IO_CHANNEL_ERROR_PIPE = 7 
G_IO_CHANNEL_ERROR_FAILED = 8 

G_IO_STATUS_ERROR = 0 
G_IO_STATUS_NORMAL = 1 
G_IO_STATUS_EOF = 2 
G_IO_STATUS_AGAIN = 3 

G_SEEK_CUR = 0 
G_SEEK_SET = 1 
G_SEEK_END = 2 

G_IO_IN = 1 
G_IO_OUT = 4 
G_IO_PRI = 2 
G_IO_ERR = 8 
G_IO_HUP = 16 
G_IO_NVAL = 32 

G_IO_FLAG_APPEND = 1 
G_IO_FLAG_NONBLOCK = 2 
G_IO_FLAG_IS_READABLE = 4 
G_IO_FLAG_IS_WRITEABLE = 8 
G_IO_FLAG_IS_SEEKABLE = 16 
G_IO_FLAG_MASK = 31 
G_IO_FLAG_GET_MASK = 31 
G_IO_FLAG_SET_MASK = 3 

G_KEY_FILE_ERROR_UNKNOWN_ENCODING = 0 
G_KEY_FILE_ERROR_PARSE = 1 
G_KEY_FILE_ERROR_NOT_FOUND = 2 
G_KEY_FILE_ERROR_KEY_NOT_FOUND = 3 
G_KEY_FILE_ERROR_GROUP_NOT_FOUND = 4 
G_KEY_FILE_ERROR_INVALID_VALUE = 5 

G_KEY_FILE_NONE = 0 
G_KEY_FILE_KEEP_COMMENTS = 1 
G_KEY_FILE_KEEP_TRANSLATIONS = 2 

G_MARKUP_ERROR_BAD_UTF8 = 0 
G_MARKUP_ERROR_EMPTY = 1 
G_MARKUP_ERROR_PARSE = 2 
G_MARKUP_ERROR_UNKNOWN_ELEMENT = 3 
G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE = 4 
G_MARKUP_ERROR_INVALID_CONTENT = 5 
G_MARKUP_ERROR_MISSING_ATTRIBUTE = 6 

G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG = 1 
G_MARKUP_TREAT_CDATA_AS_TEXT = 2 
G_MARKUP_PREFIX_ERROR_POSITION = 4 

G_MARKUP_COLLECT_INVALID = 0 
G_MARKUP_COLLECT_STRING = 1 
G_MARKUP_COLLECT_STRDUP = 2 
G_MARKUP_COLLECT_BOOLEAN = 3 
G_MARKUP_COLLECT_TRISTATE = 4 
G_MARKUP_COLLECT_OPTIONAL = 4194304 

G_LOG_FLAG_RECURSION = 1 
G_LOG_FLAG_FATAL = 2 
G_LOG_LEVEL_ERROR = 4 
G_LOG_LEVEL_CRITICAL = 8 
G_LOG_LEVEL_WARNING = 16 
G_LOG_LEVEL_MESSAGE = 32 
G_LOG_LEVEL_INFO = 64 
G_LOG_LEVEL_DEBUG = 128 
G_LOG_LEVEL_MASK = 3 

G_TRAVERSE_LEAVES = 1 
G_TRAVERSE_NON_LEAVES = 2 
G_TRAVERSE_ALL = 3 
G_TRAVERSE_MASK = 3 
G_TRAVERSE_LEAFS = 1 
G_TRAVERSE_NON_LEAFS = 2 

G_IN_ORDER = 0 
G_PRE_ORDER = 1 
G_POST_ORDER = 2 
G_LEVEL_ORDER = 3 

G_OPTION_FLAG_HIDDEN = 1 
G_OPTION_FLAG_IN_MAIN = 2 
G_OPTION_FLAG_REVERSE = 4 
G_OPTION_FLAG_NO_ARG = 8 
G_OPTION_FLAG_FILENAME = 16 
G_OPTION_FLAG_OPTIONAL_ARG = 32 
G_OPTION_FLAG_NOALIAS = 64 

G_OPTION_ARG_NONE = 0 
G_OPTION_ARG_STRING = 1 
G_OPTION_ARG_INT = 2 
G_OPTION_ARG_CALLBACK = 3 
G_OPTION_ARG_FILENAME = 4 
G_OPTION_ARG_STRING_ARRAY = 5 
G_OPTION_ARG_FILENAME_ARRAY = 6 
G_OPTION_ARG_DOUBLE = 7 
G_OPTION_ARG_INT64 = 8 

G_OPTION_ERROR_UNKNOWN_OPTION = 0 
G_OPTION_ERROR_BAD_VALUE = 1 
G_OPTION_ERROR_FAILED = 2 

G_REGEX_ERROR_COMPILE = 0 
G_REGEX_ERROR_OPTIMIZE = 1 
G_REGEX_ERROR_REPLACE = 2 
G_REGEX_ERROR_MATCH = 3 
G_REGEX_ERROR_INTERNAL = 4 
G_REGEX_ERROR_STRAY_BACKSLASH = 101 
G_REGEX_ERROR_MISSING_CONTROL_CHAR = 102 
G_REGEX_ERROR_UNRECOGNIZED_ESCAPE = 103 
G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER = 104 
G_REGEX_ERROR_QUANTIFIER_TOO_BIG = 105 
G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS = 106 
G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS = 107 
G_REGEX_ERROR_RANGE_OUT_OF_ORDER = 108 
G_REGEX_ERROR_NOTHING_TO_REPEAT = 109 
G_REGEX_ERROR_UNRECOGNIZED_CHARACTER = 112 
G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS = 113 
G_REGEX_ERROR_UNMATCHED_PARENTHESIS = 114 
G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE = 115 
G_REGEX_ERROR_UNTERMINATED_COMMENT = 118 
G_REGEX_ERROR_EXPRESSION_TOO_LARGE = 120 
G_REGEX_ERROR_MEMORY_ERROR = 121 
G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND = 125 
G_REGEX_ERROR_MALFORMED_CONDITION = 126 
G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES = 127 
G_REGEX_ERROR_ASSERTION_EXPECTED = 128 
G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME = 130 
G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED = 131 
G_REGEX_ERROR_HEX_CODE_TOO_LARGE = 134 
G_REGEX_ERROR_INVALID_CONDITION = 135 
G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND = 136 
G_REGEX_ERROR_INFINITE_LOOP = 140 
G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR = 142 
G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME = 143 
G_REGEX_ERROR_MALFORMED_PROPERTY = 146 
G_REGEX_ERROR_UNKNOWN_PROPERTY = 147 
G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG = 148 
G_REGEX_ERROR_TOO_MANY_SUBPATTERNS = 149 
G_REGEX_ERROR_INVALID_OCTAL_VALUE = 151 
G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE = 154 
G_REGEX_ERROR_DEFINE_REPETION = 155 
G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS = 156 
G_REGEX_ERROR_MISSING_BACK_REFERENCE = 157 

G_REGEX_MATCH_ANCHORED = 16 
G_REGEX_MATCH_NOTBOL = 128 
G_REGEX_MATCH_NOTEOL = 256 
G_REGEX_MATCH_NOTEMPTY = 65536 
G_REGEX_MATCH_PARTIAL = 2097152 
G_REGEX_MATCH_NEWLINE_CR = 4294967296 
G_REGEX_MATCH_NEWLINE_LF = 8589934592 
G_REGEX_MATCH_NEWLINE_CRLF = 12884901888 
G_REGEX_MATCH_NEWLINE_ANY = 17179869184 

G_REGEX_CASELESS = 1 
G_REGEX_MULTILINE = 2 
G_REGEX_DOTALL = 4 
G_REGEX_EXTENDED = 8 
G_REGEX_ANCHORED = 16 
G_REGEX_DOLLAR_ENDONLY = 32 
G_REGEX_UNGREEDY = 512 
G_REGEX_RAW = 131072 
G_REGEX_NO_AUTO_CAPTURE = 262144 
G_REGEX_OPTIMIZE = 524288 
G_REGEX_DUPNAMES = 33554432 
G_REGEX_NEWLINE_CR = 4294967296 
G_REGEX_NEWLINE_LF = 8589934592 
G_REGEX_NEWLINE_CRLF = 12884901888 

G_ERR_UNKNOWN = 0 
G_ERR_UNEXP_EOF = 1 
G_ERR_UNEXP_EOF_IN_STRING = 2 
G_ERR_UNEXP_EOF_IN_COMMENT = 3 
G_ERR_NON_DIGIT_IN_CONST = 4 
G_ERR_DIGIT_RADIX = 5 
G_ERR_FLOAT_RADIX = 6 
G_ERR_FLOAT_MALFORMED = 7 

G_TOKEN_EOF = 0 
G_TOKEN_LEFT_PAREN = "(" 
G_TOKEN_RIGHT_PAREN = ")" 
G_TOKEN_LEFT_CURLY = "{" 
G_TOKEN_RIGHT_CURLY = "}" 
G_TOKEN_LEFT_BRACE = "[" 
G_TOKEN_RIGHT_BRACE = "]" 
G_TOKEN_EQUAL_SIGN = "=" 
G_TOKEN_COMMA = "," 
G_TOKEN_NONE = 256 
G_TOKEN_ERROR = 257 
G_TOKEN_CHAR = 258 
G_TOKEN_BINARY = 259 
G_TOKEN_OCTAL = 260 
G_TOKEN_INT = 261 
G_TOKEN_HEX = 262 
G_TOKEN_FLOAT = 263 
G_TOKEN_STRING = 264 
G_TOKEN_SYMBOL = 265 
G_TOKEN_IDENTIFIER = 266 
G_TOKEN_IDENTIFIER_NULL = 267 
G_TOKEN_COMMENT_SINGLE = 268 
G_TOKEN_COMMENT_MULTI = 269 
G_TOKEN_LAST = 270 

G_SHELL_ERROR_BAD_QUOTING = 0 
G_SHELL_ERROR_EMPTY_STRING = 1 
G_SHELL_ERROR_FAILED = 2 

G_SPAWN_ERROR_FORK = 0 
G_SPAWN_ERROR_READ = 1 
G_SPAWN_ERROR_CHDIR = 2 
G_SPAWN_ERROR_ACCES = 3 
G_SPAWN_ERROR_PERM = 4 
G_SPAWN_ERROR_2BIG = 5 
G_SPAWN_ERROR_NOEXEC = 6 
G_SPAWN_ERROR_NAMETOOLONG = 7 
G_SPAWN_ERROR_NOENT = 8 
G_SPAWN_ERROR_NOMEM = 9 
G_SPAWN_ERROR_NOTDIR = 10 
G_SPAWN_ERROR_LOOP = 11 
G_SPAWN_ERROR_TXTBUSY = 12 
G_SPAWN_ERROR_IO = 13 
G_SPAWN_ERROR_NFILE = 14 
G_SPAWN_ERROR_MFILE = 15 
G_SPAWN_ERROR_INVAL = 16 
G_SPAWN_ERROR_ISDIR = 17 
G_SPAWN_ERROR_LIBBAD = 18 
G_SPAWN_ERROR_FAILED = 19 

G_SPAWN_LEAVE_DESCRIPTORS_OPEN = 1 
G_SPAWN_DO_NOT_REAP_CHILD = 2 
G_SPAWN_SEARCH_PATH = 4 
G_SPAWN_STDOUT_TO_DEV_NULL = 8 
G_SPAWN_STDERR_TO_DEV_NULL = 16 
G_SPAWN_CHILD_INHERITS_STDIN = 32 
G_SPAWN_FILE_AND_ARGV_ZERO = 64 

G_ASCII_ALNUM = 1 
G_ASCII_ALPHA = 2 
G_ASCII_CNTRL = 4 
G_ASCII_DIGIT = 8 
G_ASCII_GRAPH = 16 
G_ASCII_LOWER = 32 
G_ASCII_PRINT = 64 
G_ASCII_PUNCT = 128 
G_ASCII_SPACE = 256 
G_ASCII_UPPER = 512 
G_ASCII_XDIGIT = 65536 

G_TEST_TRAP_SILENCE_STDOUT = 128 
G_TEST_TRAP_SILENCE_STDERR = 256 
G_TEST_TRAP_INHERIT_STDIN = 512 

G_TEST_LOG_NONE = 0 
G_TEST_LOG_ERROR = 1 
G_TEST_LOG_START_BINARY = 2 
G_TEST_LOG_LIST_CASE = 3 
G_TEST_LOG_SKIP_CASE = 4 
G_TEST_LOG_START_CASE = 5 
G_TEST_LOG_STOP_CASE = 6 
G_TEST_LOG_MIN_RESULT = 7 
G_TEST_LOG_MAX_RESULT = 8 
G_TEST_LOG_MESSAGE = 9 

G_VARIANT_CLASS_BOOLEAN = "b" 
G_VARIANT_CLASS_BYTE = "y" 
G_VARIANT_CLASS_INT16 = "n" 
G_VARIANT_CLASS_UINT16 = "q" 
G_VARIANT_CLASS_INT32 = "i" 
G_VARIANT_CLASS_UINT32 = "u" 
G_VARIANT_CLASS_INT64 = "x" 
G_VARIANT_CLASS_UINT64 = "t" 
G_VARIANT_CLASS_HANDLE = "h" 
G_VARIANT_CLASS_DOUBLE = "d" 
G_VARIANT_CLASS_STRING = "s" 
G_VARIANT_CLASS_OBJECT_PATH = "o" 
G_VARIANT_CLASS_SIGNATURE = "g" 
G_VARIANT_CLASS_VARIANT = "v" 
G_VARIANT_CLASS_MAYBE = "m" 
G_VARIANT_CLASS_ARRAY = "a" 
G_VARIANT_CLASS_TUPLE = "(" 
G_VARIANT_CLASS_DICT_ENTRY = "{" 

G_VARIANT_PARSE_ERROR_FAILED = 0 
G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED = 1 
G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE = 2 
G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED = 3 
G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END = 4 
G_VARIANT_PARSE_ERROR_INVALID_CHARACTER = 5 
G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING = 6 
G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH = 7 
G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE = 8 
G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING = 9 
G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE = 10 
G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE = 11 
G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG = 12 
G_VARIANT_PARSE_ERROR_TYPE_ERROR = 13 
G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN = 14 
G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD = 15 
G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT = 16 
G_VARIANT_PARSE_ERROR_VALUE_EXPECTED = 17 

G_TYPE_DEBUG_NONE = 0 
G_TYPE_DEBUG_OBJECTS = 1 
G_TYPE_DEBUG_SIGNALS = 2 
G_TYPE_DEBUG_MASK = 3 

G_TYPE_FLAG_CLASSED = 1 
G_TYPE_FLAG_INSTANTIATABLE = 2 
G_TYPE_FLAG_DERIVABLE = 4 
G_TYPE_FLAG_DEEP_DERIVABLE = 8 

G_TYPE_FLAG_ABSTRACT = 16 
G_TYPE_FLAG_VALUE_ABSTRACT = 32 

G_PARAM_READABLE = 1 
G_PARAM_WRITABLE = 2 
G_PARAM_CONSTRUCT = 4 
G_PARAM_CONSTRUCT_ONLY = 8 
G_PARAM_LAX_VALIDATION = 16 
G_PARAM_STATIC_NAME = 32 
G_PARAM_PRIVATE = 32 
G_PARAM_STATIC_NICK = 64 
G_PARAM_STATIC_BLURB = 128 
G_PARAM_DEPRECATED = 562949953421312 

G_SIGNAL_RUN_FIRST = 1 
G_SIGNAL_RUN_LAST = 2 
G_SIGNAL_RUN_CLEANUP = 4 
G_SIGNAL_NO_RECURSE = 8 
G_SIGNAL_DETAILED = 16 
G_SIGNAL_ACTION = 32 
G_SIGNAL_NO_HOOKS = 64 
G_SIGNAL_MUST_COLLECT = 128 

G_SIGNAL_MATCH_ID = 1 
G_SIGNAL_MATCH_DETAIL = 2 
G_SIGNAL_MATCH_CLOSURE = 4 
G_SIGNAL_MATCH_FUNC = 8 
G_SIGNAL_MATCH_DATA = 16 
G_SIGNAL_MATCH_UNBLOCKED = 32 

G_CONNECT_AFTER = 1 
G_CONNECT_SWAPPED = 2 

G_BINDING_DEFAULT = 0 
G_BINDING_BIDIRECTIONAL = 1 
G_BINDING_SYNC_CREATE = 2 
G_BINDING_INVERT_BOOLEAN = 4 

G_APP_INFO_CREATE_NONE = 0 
G_APP_INFO_CREATE_NEEDS_TERMINAL = 1 
G_APP_INFO_CREATE_SUPPORTS_URIS = 2 
G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION = 4 

G_CONVERTER_ERROR = 0 
G_CONVERTER_CONVERTED = 1 
G_CONVERTER_FINISHED = 2 
G_CONVERTER_FLUSHED = 3 

G_CONVERTER_NO_FLAGS = 0 
G_CONVERTER_INPUT_AT_END = 1 
G_CONVERTER_FLUSH = 2 

G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN = 0 
G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN = 1 
G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN = 2 

G_DATA_STREAM_NEWLINE_TYPE_LF = 0 
G_DATA_STREAM_NEWLINE_TYPE_CR = 1 
G_DATA_STREAM_NEWLINE_TYPE_CR_LF = 2 
G_DATA_STREAM_NEWLINE_TYPE_ANY = 3 

G_FILE_ATTRIBUTE_TYPE_INVALID = 0 
G_FILE_ATTRIBUTE_TYPE_STRING = 1 
G_FILE_ATTRIBUTE_TYPE_BYTE_STRING = 2 
G_FILE_ATTRIBUTE_TYPE_BOOLEAN = 3 
G_FILE_ATTRIBUTE_TYPE_UINT32 = 4 
G_FILE_ATTRIBUTE_TYPE_INT32 = 5 
G_FILE_ATTRIBUTE_TYPE_UINT64 = 6 
G_FILE_ATTRIBUTE_TYPE_INT64 = 7 
G_FILE_ATTRIBUTE_TYPE_OBJECT = 8 
G_FILE_ATTRIBUTE_TYPE_STRINGV = 9 

G_FILE_ATTRIBUTE_INFO_NONE = 0 
G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE = 1 
G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED = 2 

G_FILE_ATTRIBUTE_STATUS_UNSET = 0 
G_FILE_ATTRIBUTE_STATUS_SET = 1 
G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING = 2 

G_FILE_QUERY_INFO_NONE = 0 
G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS = 1 

G_FILE_CREATE_NONE = 0 
G_FILE_CREATE_PRIVATE = 1 
G_FILE_CREATE_REPLACE_DESTINATION = 2 

G_MOUNT_MOUNT_NONE = 0 

G_MOUNT_UNMOUNT_NONE = 0 
G_MOUNT_UNMOUNT_FORCE = 1 

G_DRIVE_START_STOP_TYPE_UNKNOWN = 0 
G_DRIVE_START_STOP_TYPE_SHUTDOWN = 1 
G_DRIVE_START_STOP_TYPE_NETWORK = 2 
G_DRIVE_START_STOP_TYPE_MULTIDISK = 3 
G_DRIVE_START_STOP_TYPE_PASSWORD = 4 

G_DRIVE_START_NONE = 0 

G_FILE_COPY_NONE = 0 
G_FILE_COPY_OVERWRITE = 1 
G_FILE_COPY_BACKUP = 2 
G_FILE_COPY_NOFOLLOW_SYMLINKS = 4 
G_FILE_COPY_ALL_METADATA = 8 
G_FILE_COPY_NO_FALLBACK_FOR_MOVE = 16 
G_FILE_COPY_TARGET_DEFAULT_PERMS = 32 

G_FILE_TYPE_UNKNOWN = 0 
G_FILE_TYPE_REGULAR = 1 
G_FILE_TYPE_DIRECTORY = 2 
G_FILE_TYPE_SYMBOLIC_LINK = 3 
G_FILE_TYPE_SPECIAL = 4 
G_FILE_TYPE_SHORTCUT = 5 
G_FILE_TYPE_MOUNTABLE = 6 

G_FILE_MONITOR_NONE = 0 
G_FILE_MONITOR_WATCH_MOUNTS = 1 
G_FILE_MONITOR_SEND_MOVED = 2 

G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS = 0 
G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL = 1 
G_FILESYSTEM_PREVIEW_TYPE_NEVER = 2 

G_FILE_MONITOR_EVENT_CHANGED = 0 
G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT = 1 
G_FILE_MONITOR_EVENT_DELETED = 2 
G_FILE_MONITOR_EVENT_CREATED = 3 
G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED = 4 
G_FILE_MONITOR_EVENT_PRE_UNMOUNT = 5 
G_FILE_MONITOR_EVENT_UNMOUNTED = 6 
G_FILE_MONITOR_EVENT_MOVED = 7 

G_IO_ERROR_FAILED = 0 
G_IO_ERROR_NOT_FOUND = 1 
G_IO_ERROR_EXISTS = 2 
G_IO_ERROR_IS_DIRECTORY = 3 
G_IO_ERROR_NOT_DIRECTORY = 4 
G_IO_ERROR_NOT_EMPTY = 5 
G_IO_ERROR_NOT_REGULAR_FILE = 6 
G_IO_ERROR_NOT_SYMBOLIC_LINK = 7 
G_IO_ERROR_NOT_MOUNTABLE_FILE = 8 
G_IO_ERROR_FILENAME_TOO_LONG = 9 
G_IO_ERROR_INVALID_FILENAME = 10 
G_IO_ERROR_TOO_MANY_LINKS = 11 
G_IO_ERROR_NO_SPACE = 12 
G_IO_ERROR_INVALID_ARGUMENT = 13 
G_IO_ERROR_PERMISSION_DENIED = 14 
G_IO_ERROR_NOT_SUPPORTED = 15 
G_IO_ERROR_NOT_MOUNTED = 16 
G_IO_ERROR_ALREADY_MOUNTED = 17 
G_IO_ERROR_CLOSED = 18 
G_IO_ERROR_CANCELLED = 19 
G_IO_ERROR_PENDING = 20 
G_IO_ERROR_READ_ONLY = 21 
G_IO_ERROR_CANT_CREATE_BACKUP = 22 
G_IO_ERROR_WRONG_ETAG = 23 
G_IO_ERROR_TIMED_OUT = 24 
G_IO_ERROR_WOULD_RECURSE = 25 
G_IO_ERROR_BUSY = 26 
G_IO_ERROR_WOULD_BLOCK = 27 
G_IO_ERROR_HOST_NOT_FOUND = 28 
G_IO_ERROR_WOULD_MERGE = 29 
G_IO_ERROR_FAILED_HANDLED = 30 
G_IO_ERROR_TOO_MANY_OPEN_FILES = 31 
G_IO_ERROR_NOT_INITIALIZED = 32 
G_IO_ERROR_ADDRESS_IN_USE = 33 
G_IO_ERROR_PARTIAL_INPUT = 34 
G_IO_ERROR_INVALID_DATA = 35 
G_IO_ERROR_DBUS_ERROR = 36 
G_IO_ERROR_HOST_UNREACHABLE = 37 
G_IO_ERROR_NETWORK_UNREACHABLE = 38 
G_IO_ERROR_CONNECTION_REFUSED = 39 
G_IO_ERROR_PROXY_FAILED = 40 
G_IO_ERROR_PROXY_AUTH_FAILED = 41 
G_IO_ERROR_PROXY_NEED_AUTH = 42 
G_IO_ERROR_PROXY_NOT_ALLOWED = 43 

G_ASK_PASSWORD_NEED_PASSWORD = 1 
G_ASK_PASSWORD_NEED_USERNAME = 2 
G_ASK_PASSWORD_NEED_DOMAIN = 4 
G_ASK_PASSWORD_SAVING_SUPPORTED = 8 
G_ASK_PASSWORD_ANONYMOUS_SUPPORTED = 16 

G_PASSWORD_SAVE_NEVER = 0 
G_PASSWORD_SAVE_FOR_SESSION = 1 
G_PASSWORD_SAVE_PERMANENTLY = 2 

G_MOUNT_OPERATION_HANDLED = 0 
G_MOUNT_OPERATION_ABORTED = 1 
G_MOUNT_OPERATION_UNHANDLED = 2 

G_OUTPUT_STREAM_SPLICE_NONE = 0 
G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE = 1 
G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET = 2 

G_IO_STREAM_SPLICE_NONE = 0 
G_IO_STREAM_SPLICE_CLOSE_STREAM1 = 1 
G_IO_STREAM_SPLICE_CLOSE_STREAM2 = 2 
G_IO_STREAM_SPLICE_WAIT_FOR_BOTH = 4 

G_RESOLVER_ERROR_NOT_FOUND = 0 
G_RESOLVER_ERROR_TEMPORARY_FAILURE = 1 
G_RESOLVER_ERROR_INTERNAL = 2 

G_EMBLEM_ORIGIN_UNKNOWN = 0 
G_EMBLEM_ORIGIN_DEVICE = 1 
G_EMBLEM_ORIGIN_LIVEMETADATA = 2 
G_EMBLEM_ORIGIN_TAG = 3 

G_SOCKET_FAMILY_INVALID = 0 
G_SOCKET_FAMILY_UNIX = 1 
G_SOCKET_FAMILY_IPV4 = 2 
G_SOCKET_FAMILY_IPV6 = 10 

G_SOCKET_TYPE_INVALID = 0 
G_SOCKET_TYPE_STREAM = 1 
G_SOCKET_TYPE_DATAGRAM = 2 
G_SOCKET_TYPE_SEQPACKET = 3 

G_SOCKET_MSG_NONE = 0 
G_SOCKET_MSG_OOB = 1 
G_SOCKET_MSG_PEEK = 2 
G_SOCKET_MSG_DONTROUTE = 4 

G_SOCKET_PROTOCOL_UNKNOWN = -1 
G_SOCKET_PROTOCOL_DEFAULT = 0 
G_SOCKET_PROTOCOL_TCP = 6 
G_SOCKET_PROTOCOL_UDP = 17 
G_SOCKET_PROTOCOL_SCTP = 132 

G_ZLIB_COMPRESSOR_FORMAT_ZLIB = 0 
G_ZLIB_COMPRESSOR_FORMAT_GZIP = 1 
G_ZLIB_COMPRESSOR_FORMAT_RAW = 2 

G_UNIX_SOCKET_ADDRESS_INVALID = 0 
G_UNIX_SOCKET_ADDRESS_ANONYMOUS = 1 
G_UNIX_SOCKET_ADDRESS_PATH = 2 
G_UNIX_SOCKET_ADDRESS_ABSTRACT = 3 
G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED = 4 

G_BUS_TYPE_STARTER = -1 
G_BUS_TYPE_NONE = 0 
G_BUS_TYPE_SYSTEM = 1 
G_BUS_TYPE_SESSION = 2 

G_BUS_NAME_OWNER_FLAGS_NONE = 0 
G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT = 1 
G_BUS_NAME_OWNER_FLAGS_REPLACE = 2 

G_BUS_NAME_WATCHER_FLAGS_NONE = 0 
G_BUS_NAME_WATCHER_FLAGS_AUTO_START = 1 

G_DBUS_PROXY_FLAGS_NONE = 0 
G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES = 1 
G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS = 2 
G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START = 4 

G_DBUS_ERROR_FAILED = 0 
G_DBUS_ERROR_NO_MEMORY = 1 
G_DBUS_ERROR_SERVICE_UNKNOWN = 2 
G_DBUS_ERROR_NAME_HAS_NO_OWNER = 3 
G_DBUS_ERROR_NO_REPLY = 4 
G_DBUS_ERROR_IO_ERROR = 5 
G_DBUS_ERROR_BAD_ADDRESS = 6 
G_DBUS_ERROR_NOT_SUPPORTED = 7 
G_DBUS_ERROR_LIMITS_EXCEEDED = 8 
G_DBUS_ERROR_ACCESS_DENIED = 9 
G_DBUS_ERROR_AUTH_FAILED = 10 
G_DBUS_ERROR_NO_SERVER = 11 
G_DBUS_ERROR_TIMEOUT = 12 
G_DBUS_ERROR_NO_NETWORK = 13 
G_DBUS_ERROR_ADDRESS_IN_USE = 14 
G_DBUS_ERROR_DISCONNECTED = 15 
G_DBUS_ERROR_INVALID_ARGS = 16 
G_DBUS_ERROR_FILE_NOT_FOUND = 17 
G_DBUS_ERROR_FILE_EXISTS = 18 
G_DBUS_ERROR_UNKNOWN_METHOD = 19 
G_DBUS_ERROR_TIMED_OUT = 20 
G_DBUS_ERROR_MATCH_RULE_NOT_FOUND = 21 
G_DBUS_ERROR_MATCH_RULE_INVALID = 22 
G_DBUS_ERROR_SPAWN_EXEC_FAILED = 23 
G_DBUS_ERROR_SPAWN_FORK_FAILED = 24 
G_DBUS_ERROR_SPAWN_CHILD_EXITED = 25 
G_DBUS_ERROR_SPAWN_CHILD_SIGNALED = 26 
G_DBUS_ERROR_SPAWN_FAILED = 27 
G_DBUS_ERROR_SPAWN_SETUP_FAILED = 28 
G_DBUS_ERROR_SPAWN_CONFIG_INVALID = 29 
G_DBUS_ERROR_SPAWN_SERVICE_INVALID = 30 
G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND = 31 
G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID = 32 
G_DBUS_ERROR_SPAWN_FILE_INVALID = 33 
G_DBUS_ERROR_SPAWN_NO_MEMORY = 34 
G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN = 35 
G_DBUS_ERROR_INVALID_SIGNATURE = 36 
G_DBUS_ERROR_INVALID_FILE_CONTENT = 37 
G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN = 38 
G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN = 39 
G_DBUS_ERROR_OBJECT_PATH_IN_USE = 40 

G_DBUS_CONNECTION_FLAGS_NONE = 0 
G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT = 1 
G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER = 2 
G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = 4 
G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION = 8 
G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING = 16 

G_DBUS_CAPABILITY_FLAGS_NONE = 0 
G_DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING = 1 

G_DBUS_MESSAGE_FLAGS_NONE = 0 
G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED = 1 
G_DBUS_MESSAGE_FLAGS_NO_AUTO_START = 2 

G_DBUS_CALL_FLAGS_NONE = 0 
G_DBUS_CALL_FLAGS_NO_AUTO_START = 1 

G_DBUS_MESSAGE_TYPE_INVALID = 0 
G_DBUS_MESSAGE_TYPE_METHOD_CALL = 1 
G_DBUS_MESSAGE_TYPE_METHOD_RETURN = 2 
G_DBUS_MESSAGE_TYPE_ERROR = 3 
G_DBUS_MESSAGE_TYPE_SIGNAL = 4 

G_DBUS_MESSAGE_HEADER_FIELD_INVALID = 0 
G_DBUS_MESSAGE_HEADER_FIELD_PATH = 1 
G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE = 2 
G_DBUS_MESSAGE_HEADER_FIELD_MEMBER = 3 
G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME = 4 
G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL = 5 
G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION = 6 
G_DBUS_MESSAGE_HEADER_FIELD_SENDER = 7 
G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE = 8 
G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS = 9 

G_DBUS_PROPERTY_INFO_FLAGS_NONE = 0 
G_DBUS_PROPERTY_INFO_FLAGS_READABLE = 1 
G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE = 2 

G_DBUS_SUBTREE_FLAGS_NONE = 0 
G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES = 1 

G_DBUS_SIGNAL_FLAGS_NONE = 0 
G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE = 1 

G_DBUS_SERVER_FLAGS_NONE = 0 
G_DBUS_SERVER_FLAGS_RUN_IN_THREAD = 1 
G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = 2 

G_DBUS_SEND_MESSAGE_FLAGS_NONE = 0 
G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL = 1 

G_CREDENTIALS_TYPE_INVALID = 0 
G_CREDENTIALS_TYPE_LINUX_UCRED = 1 
G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED = 2 
G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED = 3 

G_DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN = "B" 
G_DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN = "l" 

G_APPLICATION_FLAGS_NONE = 0 
G_APPLICATION_IS_SERVICE = 1 
G_APPLICATION_IS_LAUNCHER = 2 
G_APPLICATION_HANDLES_OPEN = 4 
G_APPLICATION_HANDLES_COMMAND_LINE = 8 
G_APPLICATION_SEND_ENVIRONMENT = 16 
G_APPLICATION_NON_UNIQUE = 32 

G_TLS_ERROR_UNAVAILABLE = 0 
G_TLS_ERROR_MISC = 1 
G_TLS_ERROR_BAD_CERTIFICATE = 2 
G_TLS_ERROR_NOT_TLS = 3 
G_TLS_ERROR_HANDSHAKE = 4 
G_TLS_ERROR_CERTIFICATE_REQUIRED = 5 
G_TLS_ERROR_EOF = 6 

G_TLS_CERTIFICATE_UNKNOWN_CA = 1 
G_TLS_CERTIFICATE_BAD_IDENTITY = 2 
G_TLS_CERTIFICATE_NOT_ACTIVATED = 4 
G_TLS_CERTIFICATE_EXPIRED = 8 
G_TLS_CERTIFICATE_REVOKED = 16 
G_TLS_CERTIFICATE_INSECURE = 32 
G_TLS_CERTIFICATE_GENERIC_ERROR = 64 
G_TLS_CERTIFICATE_VALIDATE_ALL = 127 

G_TLS_AUTHENTICATION_NONE = 0 
G_TLS_AUTHENTICATION_REQUESTED = 1 
G_TLS_AUTHENTICATION_REQUIRED = 2 

G_TLS_REHANDSHAKE_NEVER = 0 
G_TLS_REHANDSHAKE_SAFELY = 1 
G_TLS_REHANDSHAKE_UNSAFELY = 2 

GTlsPasswordFlags = { 
	"G_TLS_PASSWORD_NONE" : 0, 
	"G_TLS_PASSWORD_RETRY" : 2, 
	"G_TLS_PASSWORD_MANY_TRIES" : 4, 
	"G_TLS_PASSWORD_FINAL_TRY" : 8, 
}

G_TLS_INTERACTION_UNHANDLED = 0 
G_TLS_INTERACTION_HANDLED = 1 
G_TLS_INTERACTION_FAILED = 2 

G_DBUS_INTERFACE_SKELETON_FLAGS_NONE = 0 
G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD = 1 

G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE = 0 
G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START = 1 

G_TLS_DATABASE_LOOKUP_NONE = 0 
G_TLS_DATABASE_LOOKUP_KEYPAIR = 1 

G_TLS_DATABASE_VERIFY_NONE = 0 

G_IO_MODULE_SCOPE_NONE = 0 
G_IO_MODULE_SCOPE_BLOCK_DUPLICATES = 1 

PC_LINK_MAX = 0 
PC_MAX_CANON = 1 
PC_MAX_INPUT = 2 
PC_NAME_MAX = 3 
PC_PATH_MAX = 4 
PC_PIPE_BUF = 5 
PC_CHOWN_RESTRICTED = 6 
PC_NO_TRUNC = 7 
PC_VDISABLE = 8 
PC_SYNC_IO = 9 
PC_ASYNC_IO = 10 
PC_PRIO_IO = 11 
PC_SOCK_MAXBUF = 12 
PC_FILESIZEBITS = 13 
PC_REC_INCR_XFER_SIZE = 14 
PC_REC_MAX_XFER_SIZE = 15 
PC_REC_MIN_XFER_SIZE = 16 
PC_REC_XFER_ALIGN = 17 
PC_ALLOC_SIZE_MIN = 18 
PC_SYMLINK_MAX = 19 
PC_2_SYMLINKS = 20 

SC_ARG_MAX = 0 
SC_CHILD_MAX = 1 
SC_CLK_TCK = 2 
SC_NGROUPS_MAX = 3 
SC_OPEN_MAX = 4 
SC_STREAM_MAX = 5 
SC_TZNAME_MAX = 6 
SC_JOB_CONTROL = 7 
SC_SAVED_IDS = 8 
SC_REALTIME_SIGNALS = 9 
SC_PRIORITY_SCHEDULING = 10 
SC_TIMERS = 11 
SC_ASYNCHRONOUS_IO = 12 
SC_PRIORITIZED_IO = 13 
SC_SYNCHRONIZED_IO = 14 
SC_FSYNC = 15 
SC_MAPPED_FILES = 16 
SC_MEMLOCK = 17 
SC_MEMLOCK_RANGE = 18 
SC_MEMORY_PROTECTION = 19 
SC_MESSAGE_PASSING = 20 
SC_SEMAPHORES = 21 
SC_SHARED_MEMORY_OBJECTS = 22 
SC_AIO_LISTIO_MAX = 23 
SC_AIO_MAX = 24 
SC_AIO_PRIO_DELTA_MAX = 25 
SC_DELAYTIMER_MAX = 26 
SC_MQ_OPEN_MAX = 27 
SC_MQ_PRIO_MAX = 28 
SC_VERSION = 29 
SC_PAGESIZE = 30 
SC_RTSIG_MAX = 31 
SC_SEM_NSEMS_MAX = 32 
SC_SEM_VALUE_MAX = 33 
SC_SIGQUEUE_MAX = 34 
SC_TIMER_MAX = 35 
SC_BC_BASE_MAX = 36 
SC_BC_DIM_MAX = 37 
SC_BC_SCALE_MAX = 38 
SC_BC_STRING_MAX = 39 
SC_COLL_WEIGHTS_MAX = 40 
SC_EQUIV_CLASS_MAX = 41 
SC_EXPR_NEST_MAX = 42 
SC_LINE_MAX = 43 
SC_RE_DUP_MAX = 44 
SC_CHARCLASS_NAME_MAX = 45 
SC_2_VERSION = 46 
SC_2_C_BIND = 47 
SC_2_C_DEV = 48 
SC_2_FORT_DEV = 49 
SC_2_FORT_RUN = 50 
SC_2_SW_DEV = 51 
SC_2_LOCALEDEF = 52 
SC_PII = 53 
SC_PII_XTI = 54 
SC_PII_SOCKET = 55 
SC_PII_INTERNET = 56 
SC_PII_OSI = 57 
SC_POLL = 58 
SC_SELECT = 59 
SC_UIO_MAXIOV = 60 
SC_IOV_MAX = 60 
SC_PII_INTERNET_STREAM = 61 
SC_PII_INTERNET_DGRAM = 62 
SC_PII_OSI_COTS = 63 
SC_PII_OSI_CLTS = 64 
SC_PII_OSI_M = 65 
SC_T_IOV_MAX = 66 
SC_THREADS = 67 
SC_THREAD_SAFE_FUNCTIONS = 68 
SC_GETGR_R_SIZE_MAX = 69 
SC_GETPW_R_SIZE_MAX = 70 
SC_LOGIN_NAME_MAX = 71 
SC_TTY_NAME_MAX = 72 
SC_THREAD_DESTRUCTOR_ITERATIONS = 73 
SC_THREAD_KEYS_MAX = 74 
SC_THREAD_STACK_MIN = 75 
SC_THREAD_THREADS_MAX = 76 
SC_THREAD_ATTR_STACKADDR = 77 
SC_THREAD_ATTR_STACKSIZE = 78 
SC_THREAD_PRIORITY_SCHEDULING = 79 
SC_THREAD_PRIO_INHERIT = 80 
SC_THREAD_PRIO_PROTECT = 81 
SC_THREAD_PROCESS_SHARED = 82 
SC_NPROCESSORS_CONF = 83 
SC_NPROCESSORS_ONLN = 84 
SC_PHYS_PAGES = 85 
SC_AVPHYS_PAGES = 86 
SC_ATEXIT_MAX = 87 
SC_PASS_MAX = 88 
SC_XOPEN_VERSION = 89 
SC_XOPEN_XCU_VERSION = 90 
SC_XOPEN_UNIX = 91 
SC_XOPEN_CRYPT = 92 
SC_XOPEN_ENH_I18N = 93 
SC_XOPEN_SHM = 94 
SC_2_CHAR_TERM = 95 
SC_2_C_VERSION = 96 
SC_2_UPE = 97 
SC_XOPEN_XPG2 = 98 
SC_XOPEN_XPG3 = 99 
SC_XOPEN_XPG4 = 100 
SC_CHAR_BIT = 101 
SC_CHAR_MAX = 102 
SC_CHAR_MIN = 103 
SC_INT_MAX = 104 
SC_INT_MIN = 105 
SC_LONG_BIT = 106 
SC_WORD_BIT = 107 
SC_MB_LEN_MAX = 108 
SC_NZERO = 109 
SC_SSIZE_MAX = 110 
SC_SCHAR_MAX = 111 
SC_SCHAR_MIN = 112 
SC_SHRT_MAX = 113 
SC_SHRT_MIN = 114 
SC_UCHAR_MAX = 115 
SC_UINT_MAX = 116 
SC_ULONG_MAX = 117 
SC_USHRT_MAX = 118 
SC_NL_ARGMAX = 119 
SC_NL_LANGMAX = 120 
SC_NL_MSGMAX = 121 
SC_NL_NMAX = 122 
SC_NL_SETMAX = 123 
SC_NL_TEXTMAX = 124 
SC_XBS5_ILP32_OFF32 = 125 
SC_XBS5_ILP32_OFFBIG = 126 
SC_XBS5_LP64_OFF64 = 127 
SC_XBS5_LPBIG_OFFBIG = 128 
SC_XOPEN_LEGACY = 129 
SC_XOPEN_REALTIME = 130 
SC_XOPEN_REALTIME_THREADS = 131 
SC_ADVISORY_INFO = 132 
SC_BARRIERS = 133 
SC_BASE = 134 
SC_C_LANG_SUPPORT = 135 
SC_C_LANG_SUPPORT_R = 136 
SC_CLOCK_SELECTION = 137 
SC_CPUTIME = 138 
SC_THREAD_CPUTIME = 139 
SC_DEVICE_IO = 140 
SC_DEVICE_SPECIFIC = 141 
SC_DEVICE_SPECIFIC_R = 142 
SC_FD_MGMT = 143 
SC_FIFO = 144 
SC_PIPE = 145 
SC_FILE_ATTRIBUTES = 146 
SC_FILE_LOCKING = 147 
SC_FILE_SYSTEM = 148 
SC_MONOTONIC_CLOCK = 149 
SC_MULTI_PROCESS = 150 
SC_SINGLE_PROCESS = 151 
SC_NETWORKING = 152 
SC_READER_WRITER_LOCKS = 153 
SC_SPIN_LOCKS = 154 
SC_REGEXP = 155 
SC_REGEX_VERSION = 156 
SC_SHELL = 157 
SC_SIGNALS = 158 
SC_SPAWN = 159 
SC_SPORADIC_SERVER = 160 
SC_THREAD_SPORADIC_SERVER = 161 
SC_SYSTEM_DATABASE = 162 
SC_SYSTEM_DATABASE_R = 163 
SC_TIMEOUTS = 164 
SC_TYPED_MEMORY_OBJECTS = 165 
SC_USER_GROUPS = 166 
SC_USER_GROUPS_R = 167 
SC_2_PBS = 168 
SC_2_PBS_ACCOUNTING = 169 
SC_2_PBS_LOCATE = 170 
SC_2_PBS_MESSAGE = 171 
SC_2_PBS_TRACK = 172 
SC_SYMLOOP_MAX = 173 
SC_STREAMS = 174 
SC_2_PBS_CHECKPOINT = 175 
SC_V6_ILP32_OFF32 = 176 
SC_V6_ILP32_OFFBIG = 177 
SC_V6_LP64_OFF64 = 178 
SC_V6_LPBIG_OFFBIG = 179 
SC_HOST_NAME_MAX = 180 
SC_TRACE = 181 
SC_TRACE_EVENT_FILTER = 182 
SC_TRACE_INHERIT = 183 
SC_TRACE_LOG = 184 
SC_LEVEL1_ICACHE_SIZE = 185 
SC_LEVEL1_ICACHE_ASSOC = 186 
SC_LEVEL1_ICACHE_LINESIZE = 187 
SC_LEVEL1_DCACHE_SIZE = 188 
SC_LEVEL1_DCACHE_ASSOC = 189 
SC_LEVEL1_DCACHE_LINESIZE = 190 
SC_LEVEL2_CACHE_SIZE = 191 
SC_LEVEL2_CACHE_ASSOC = 192 
SC_LEVEL2_CACHE_LINESIZE = 193 
SC_LEVEL3_CACHE_SIZE = 194 
SC_LEVEL3_CACHE_ASSOC = 195 
SC_LEVEL3_CACHE_LINESIZE = 196 
SC_LEVEL4_CACHE_SIZE = 197 
SC_LEVEL4_CACHE_ASSOC = 198 
SC_LEVEL4_CACHE_LINESIZE = 199 
SC_IPV6 = 265 
SC_RAW_SOCKETS = 266 
SC_V7_ILP32_OFF32 = 267 
SC_V7_ILP32_OFFBIG = 268 
SC_V7_LP64_OFF64 = 269 
SC_V7_LPBIG_OFFBIG = 270 
SC_SS_REPL_MAX = 271 
SC_TRACE_EVENT_NAME_MAX = 272 
SC_TRACE_NAME_MAX = 273 
SC_TRACE_SYS_MAX = 274 
SC_TRACE_USER_EVENT_MAX = 275 
SC_XOPEN_STREAMS = 276 
SC_THREAD_ROBUST_PRIO_INHERIT = 277 
SC_THREAD_ROBUST_PRIO_PROTECT = 278 

CS_PATH = 0 
CS_V6_WIDTH_RESTRICTED_ENVS = 1 
CS_GNU_LIBC_VERSION = 2 
CS_GNU_LIBPTHREAD_VERSION = 3 
CS_V5_WIDTH_RESTRICTED_ENVS = 4 
CS_V7_WIDTH_RESTRICTED_ENVS = 5 
CS_LFS_CFLAGS = 1000 
CS_LFS_LDFLAGS = 1001 
CS_LFS_LIBS = 1002 
CS_LFS_LINTFLAGS = 1003 
CS_LFS64_CFLAGS = 1004 
CS_LFS64_LDFLAGS = 1005 
CS_LFS64_LIBS = 1006 
CS_LFS64_LINTFLAGS = 1007 
CS_XBS5_ILP32_OFF32_CFLAGS = 1100 
CS_XBS5_ILP32_OFF32_LDFLAGS = 1101 
CS_XBS5_ILP32_OFF32_LIBS = 1102 
CS_XBS5_ILP32_OFF32_LINTFLAGS = 1103 
CS_XBS5_ILP32_OFFBIG_CFLAGS = 1104 
CS_XBS5_ILP32_OFFBIG_LDFLAGS = 1105 
CS_XBS5_ILP32_OFFBIG_LIBS = 1106 
CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 1107 
CS_XBS5_LP64_OFF64_CFLAGS = 1108 
CS_XBS5_LP64_OFF64_LDFLAGS = 1109 
CS_XBS5_LP64_OFF64_LIBS = 1110 
CS_XBS5_LP64_OFF64_LINTFLAGS = 1111 
CS_XBS5_LPBIG_OFFBIG_CFLAGS = 1112 
CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 1113 
CS_XBS5_LPBIG_OFFBIG_LIBS = 1114 
CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 1115 
CS_POSIX_V6_ILP32_OFF32_CFLAGS = 1116 
CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 1117 
CS_POSIX_V6_ILP32_OFF32_LIBS = 1118 
CS_POSIX_V6_ILP32_OFF32_LINTFLAGS = 1119 
CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 1120 
CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 1121 
CS_POSIX_V6_ILP32_OFFBIG_LIBS = 1122 
CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS = 1123 
CS_POSIX_V6_LP64_OFF64_CFLAGS = 1124 
CS_POSIX_V6_LP64_OFF64_LDFLAGS = 1125 
CS_POSIX_V6_LP64_OFF64_LIBS = 1126 
CS_POSIX_V6_LP64_OFF64_LINTFLAGS = 1127 
CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 1128 
CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 1129 
CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 1130 
CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS = 1131 
CS_POSIX_V7_ILP32_OFF32_CFLAGS = 1132 
CS_POSIX_V7_ILP32_OFF32_LDFLAGS = 1133 
CS_POSIX_V7_ILP32_OFF32_LIBS = 1134 
CS_POSIX_V7_ILP32_OFF32_LINTFLAGS = 1135 
CS_POSIX_V7_ILP32_OFFBIG_CFLAGS = 1136 
CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS = 1137 
CS_POSIX_V7_ILP32_OFFBIG_LIBS = 1138 
CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS = 1139 
CS_POSIX_V7_LP64_OFF64_CFLAGS = 1140 
CS_POSIX_V7_LP64_OFF64_LDFLAGS = 1141 
CS_POSIX_V7_LP64_OFF64_LIBS = 1142 
CS_POSIX_V7_LP64_OFF64_LINTFLAGS = 1143 
CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS = 1144 
CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS = 1145 
CS_POSIX_V7_LPBIG_OFFBIG_LIBS = 1146 
CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS = 1147 
CS_V6_ENV = 1148 
CS_V7_ENV = 1149 

G_MODULE_BIND_LAZY = 1 
G_MODULE_BIND_LOCAL = 2 
G_MODULE_BIND_MASK = 3 

G_SETTINGS_BIND_DEFAULT = 0 
G_SETTINGS_BIND_GET = 1 
G_SETTINGS_BIND_SET = 2 
G_SETTINGS_BIND_NO_SENSITIVITY = 4 
G_SETTINGS_BIND_GET_NO_CHANGES = 8 
G_SETTINGS_BIND_INVERT_BOOLEAN = 16 

PANGO_COVERAGE_NONE = 0 
PANGO_COVERAGE_FALLBACK = 1 
PANGO_COVERAGE_APPROXIMATE = 2 
PANGO_COVERAGE_EXACT = 3 

PANGO_GRAVITY_SOUTH = 0 
PANGO_GRAVITY_EAST = 1 
PANGO_GRAVITY_NORTH = 2 
PANGO_GRAVITY_WEST = 3 
PANGO_GRAVITY_AUTO = 4 

PANGO_GRAVITY_HINT_NATURAL = 0 
PANGO_GRAVITY_HINT_STRONG = 1 
PANGO_GRAVITY_HINT_LINE = 2 

PANGO_SCRIPT_INVALID_CODE = -1 
PANGO_SCRIPT_COMMON = 0 
PANGO_SCRIPT_INHERITED = 1 
PANGO_SCRIPT_ARABIC = 2 
PANGO_SCRIPT_ARMENIAN = 3 
PANGO_SCRIPT_BENGALI = 4 
PANGO_SCRIPT_BOPOMOFO = 5 
PANGO_SCRIPT_CHEROKEE = 6 
PANGO_SCRIPT_COPTIC = 7 
PANGO_SCRIPT_CYRILLIC = 8 
PANGO_SCRIPT_DESERET = 9 
PANGO_SCRIPT_DEVANAGARI = 10 
PANGO_SCRIPT_ETHIOPIC = 11 
PANGO_SCRIPT_GEORGIAN = 12 
PANGO_SCRIPT_GOTHIC = 13 
PANGO_SCRIPT_GREEK = 14 
PANGO_SCRIPT_GUJARATI = 15 
PANGO_SCRIPT_GURMUKHI = 16 
PANGO_SCRIPT_HAN = 17 
PANGO_SCRIPT_HANGUL = 18 
PANGO_SCRIPT_HEBREW = 19 
PANGO_SCRIPT_HIRAGANA = 20 
PANGO_SCRIPT_KANNADA = 21 
PANGO_SCRIPT_KATAKANA = 22 
PANGO_SCRIPT_KHMER = 23 
PANGO_SCRIPT_LAO = 24 
PANGO_SCRIPT_LATIN = 25 
PANGO_SCRIPT_MALAYALAM = 26 
PANGO_SCRIPT_MONGOLIAN = 27 
PANGO_SCRIPT_MYANMAR = 28 
PANGO_SCRIPT_OGHAM = 29 
PANGO_SCRIPT_OLD_ITALIC = 30 
PANGO_SCRIPT_ORIYA = 31 
PANGO_SCRIPT_RUNIC = 32 
PANGO_SCRIPT_SINHALA = 33 
PANGO_SCRIPT_SYRIAC = 34 
PANGO_SCRIPT_TAMIL = 35 
PANGO_SCRIPT_TELUGU = 36 
PANGO_SCRIPT_THAANA = 37 
PANGO_SCRIPT_THAI = 38 
PANGO_SCRIPT_TIBETAN = 39 
PANGO_SCRIPT_CANADIAN_ABORIGINAL = 40 
PANGO_SCRIPT_YI = 41 
PANGO_SCRIPT_TAGALOG = 42 
PANGO_SCRIPT_HANUNOO = 43 
PANGO_SCRIPT_BUHID = 44 
PANGO_SCRIPT_TAGBANWA = 45 
PANGO_SCRIPT_BRAILLE = 46 
PANGO_SCRIPT_CYPRIOT = 47 
PANGO_SCRIPT_LIMBU = 48 
PANGO_SCRIPT_OSMANYA = 49 
PANGO_SCRIPT_SHAVIAN = 50 
PANGO_SCRIPT_LINEAR_B = 51 
PANGO_SCRIPT_TAI_LE = 52 
PANGO_SCRIPT_UGARITIC = 53 
PANGO_SCRIPT_NEW_TAI_LUE = 54 
PANGO_SCRIPT_BUGINESE = 55 
PANGO_SCRIPT_GLAGOLITIC = 56 
PANGO_SCRIPT_TIFINAGH = 57 
PANGO_SCRIPT_SYLOTI_NAGRI = 58 
PANGO_SCRIPT_OLD_PERSIAN = 59 
PANGO_SCRIPT_KHAROSHTHI = 60 
PANGO_SCRIPT_UNKNOWN = 61 
PANGO_SCRIPT_BALINESE = 62 
PANGO_SCRIPT_CUNEIFORM = 63 
PANGO_SCRIPT_PHOENICIAN = 64 
PANGO_SCRIPT_PHAGS_PA = 65 
PANGO_SCRIPT_NKO = 66 
PANGO_SCRIPT_KAYAH_LI = 67 
PANGO_SCRIPT_LEPCHA = 68 
PANGO_SCRIPT_REJANG = 69 
PANGO_SCRIPT_SUNDANESE = 70 
PANGO_SCRIPT_SAURASHTRA = 71 
PANGO_SCRIPT_CHAM = 72 
PANGO_SCRIPT_OL_CHIKI = 73 
PANGO_SCRIPT_VAI = 74 
PANGO_SCRIPT_CARIAN = 75 
PANGO_SCRIPT_LYCIAN = 76 
PANGO_SCRIPT_LYDIAN = 77 

PANGO_BIDI_TYPE_L = 0 
PANGO_BIDI_TYPE_LRE = 1 
PANGO_BIDI_TYPE_LRO = 2 
PANGO_BIDI_TYPE_R = 3 
PANGO_BIDI_TYPE_AL = 4 
PANGO_BIDI_TYPE_RLE = 5 
PANGO_BIDI_TYPE_RLO = 6 
PANGO_BIDI_TYPE_PDF = 7 
PANGO_BIDI_TYPE_EN = 8 
PANGO_BIDI_TYPE_ES = 9 
PANGO_BIDI_TYPE_ET = 10 
PANGO_BIDI_TYPE_AN = 11 
PANGO_BIDI_TYPE_CS = 12 
PANGO_BIDI_TYPE_NSM = 13 
PANGO_BIDI_TYPE_BN = 14 
PANGO_BIDI_TYPE_B = 15 
PANGO_BIDI_TYPE_S = 16 
PANGO_BIDI_TYPE_WS = 17 
PANGO_BIDI_TYPE_ON = 18 

PANGO_DIRECTION_LTR = 0 
PANGO_DIRECTION_RTL = 1 
PANGO_DIRECTION_TTB_LTR = 2 
PANGO_DIRECTION_TTB_RTL = 3 
PANGO_DIRECTION_WEAK_LTR = 4 
PANGO_DIRECTION_WEAK_RTL = 5 
PANGO_DIRECTION_NEUTRAL = 6 

PANGO_STYLE_NORMAL = 0 
PANGO_STYLE_OBLIQUE = 1 
PANGO_STYLE_ITALIC = 2 

PANGO_VARIANT_NORMAL = 0 
PANGO_VARIANT_SMALL_CAPS = 1 

PANGO_WEIGHT_THIN = 100 
PANGO_WEIGHT_ULTRALIGHT = 200 
PANGO_WEIGHT_LIGHT = 300 
PANGO_WEIGHT_BOOK = 380 
PANGO_WEIGHT_NORMAL = 400 
PANGO_WEIGHT_MEDIUM = 500 
PANGO_WEIGHT_SEMIBOLD = 600 
PANGO_WEIGHT_BOLD = 700 
PANGO_WEIGHT_ULTRABOLD = 800 
PANGO_WEIGHT_HEAVY = 900 
PANGO_WEIGHT_ULTRAHEAVY = 1000 

PANGO_STRETCH_ULTRA_CONDENSED = 0 
PANGO_STRETCH_EXTRA_CONDENSED = 1 
PANGO_STRETCH_CONDENSED = 2 
PANGO_STRETCH_SEMI_CONDENSED = 3 
PANGO_STRETCH_NORMAL = 4 
PANGO_STRETCH_SEMI_EXPANDED = 5 
PANGO_STRETCH_EXPANDED = 6 
PANGO_STRETCH_EXTRA_EXPANDED = 7 
PANGO_STRETCH_ULTRA_EXPANDED = 8 

PANGO_FONT_MASK_FAMILY = 1 
PANGO_FONT_MASK_STYLE = 2 
PANGO_FONT_MASK_VARIANT = 4 
PANGO_FONT_MASK_WEIGHT = 8 
PANGO_FONT_MASK_STRETCH = 16 
PANGO_FONT_MASK_SIZE = 32 
PANGO_FONT_MASK_GRAVITY = 64 

PANGO_ATTR_INVALID = 0 
PANGO_ATTR_LANGUAGE = 1 
PANGO_ATTR_FAMILY = 2 
PANGO_ATTR_STYLE = 3 
PANGO_ATTR_WEIGHT = 4 
PANGO_ATTR_VARIANT = 5 
PANGO_ATTR_STRETCH = 6 
PANGO_ATTR_SIZE = 7 
PANGO_ATTR_FONT_DESC = 8 
PANGO_ATTR_FOREGROUND = 9 
PANGO_ATTR_BACKGROUND = 10 
PANGO_ATTR_UNDERLINE = 11 
PANGO_ATTR_STRIKETHROUGH = 12 
PANGO_ATTR_RISE = 13 
PANGO_ATTR_SHAPE = 14 
PANGO_ATTR_SCALE = 15 
PANGO_ATTR_FALLBACK = 16 
PANGO_ATTR_LETTER_SPACING = 17 
PANGO_ATTR_UNDERLINE_COLOR = 18 
PANGO_ATTR_STRIKETHROUGH_COLOR = 19 
PANGO_ATTR_ABSOLUTE_SIZE = 20 
PANGO_ATTR_GRAVITY = 21 
PANGO_ATTR_GRAVITY_HINT = 22 

PANGO_UNDERLINE_NONE = 0 
PANGO_UNDERLINE_SINGLE = 1 
PANGO_UNDERLINE_DOUBLE = 2 
PANGO_UNDERLINE_LOW = 3 
PANGO_UNDERLINE_ERROR = 4 

PANGO_TAB_LEFT = 0 

PANGO_ALIGN_LEFT = 0 
PANGO_ALIGN_CENTER = 1 
PANGO_ALIGN_RIGHT = 2 

PANGO_WRAP_WORD = 0 
PANGO_WRAP_CHAR = 1 
PANGO_WRAP_WORD_CHAR = 2 

PANGO_ELLIPSIZE_NONE = 0 
PANGO_ELLIPSIZE_START = 1 
PANGO_ELLIPSIZE_MIDDLE = 2 
PANGO_ELLIPSIZE_END = 3 

PANGO_RENDER_PART_FOREGROUND = 0 
PANGO_RENDER_PART_BACKGROUND = 1 
PANGO_RENDER_PART_UNDERLINE = 2 
PANGO_RENDER_PART_STRIKETHROUGH = 3 

_codecvt_result = { 
	"__codecvt_ok" : 0, 
	"__codecvt_partial" : 1, 
	"__codecvt_error" : 2, 
	"__codecvt_noconv" : 3, 
}

cairo_status = { 
	"CAIRO_STATUS_SUCCESS" : 0, 
	"CAIRO_STATUS_NO_MEMORY" : 1, 
	"CAIRO_STATUS_INVALID_RESTORE" : 2, 
	"CAIRO_STATUS_INVALID_POP_GROUP" : 3, 
	"CAIRO_STATUS_NO_CURRENT_POINT" : 4, 
	"CAIRO_STATUS_INVALID_MATRIX" : 5, 
	"CAIRO_STATUS_INVALID_STATUS" : 6, 
	"CAIRO_STATUS_NULL_POINTER" : 7, 
	"CAIRO_STATUS_INVALID_STRING" : 8, 
	"CAIRO_STATUS_INVALID_PATH_DATA" : 9, 
	"CAIRO_STATUS_READ_ERROR" : 10, 
	"CAIRO_STATUS_WRITE_ERROR" : 11, 
	"CAIRO_STATUS_SURFACE_FINISHED" : 12, 
	"CAIRO_STATUS_SURFACE_TYPE_MISMATCH" : 13, 
	"CAIRO_STATUS_PATTERN_TYPE_MISMATCH" : 14, 
	"CAIRO_STATUS_INVALID_CONTENT" : 15, 
	"CAIRO_STATUS_INVALID_FORMAT" : 16, 
	"CAIRO_STATUS_INVALID_VISUAL" : 17, 
	"CAIRO_STATUS_FILE_NOT_FOUND" : 18, 
	"CAIRO_STATUS_INVALID_DASH" : 19, 
	"CAIRO_STATUS_INVALID_DSC_COMMENT" : 20, 
	"CAIRO_STATUS_INVALID_INDEX" : 21, 
	"CAIRO_STATUS_CLIP_NOT_REPRESENTABLE" : 22, 
	"CAIRO_STATUS_TEMP_FILE_ERROR" : 23, 
	"CAIRO_STATUS_INVALID_STRIDE" : 24, 
	"CAIRO_STATUS_FONT_TYPE_MISMATCH" : 25, 
	"CAIRO_STATUS_USER_FONT_IMMUTABLE" : 26, 
	"CAIRO_STATUS_USER_FONT_ERROR" : 27, 
	"CAIRO_STATUS_NEGATIVE_COUNT" : 28, 
	"CAIRO_STATUS_INVALID_CLUSTERS" : 29, 
	"CAIRO_STATUS_INVALID_SLANT" : 30, 
	"CAIRO_STATUS_INVALID_WEIGHT" : 31, 
	"CAIRO_STATUS_INVALID_SIZE" : 32, 
	"CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED" : 33, 
	"CAIRO_STATUS_DEVICE_TYPE_MISMATCH" : 34, 
	"CAIRO_STATUS_DEVICE_ERROR" : 35, 
	"CAIRO_STATUS_LAST_STATUS" : 36, 
}

cairo_content = { 
	"CAIRO_CONTENT_COLOR" : 4096, 
	"CAIRO_CONTENT_ALPHA" : 8192, 
	"CAIRO_CONTENT_COLOR_ALPHA" : 12288, 
}

cairo_operator = { 
	"CAIRO_OPERATOR_CLEAR" : 0, 
	"CAIRO_OPERATOR_SOURCE" : 1, 
	"CAIRO_OPERATOR_OVER" : 2, 
	"CAIRO_OPERATOR_IN" : 3, 
	"CAIRO_OPERATOR_OUT" : 4, 
	"CAIRO_OPERATOR_ATOP" : 5, 
	"CAIRO_OPERATOR_DEST" : 6, 
	"CAIRO_OPERATOR_DEST_OVER" : 7, 
	"CAIRO_OPERATOR_DEST_IN" : 8, 
	"CAIRO_OPERATOR_DEST_OUT" : 9, 
	"CAIRO_OPERATOR_DEST_ATOP" : 10, 
	"CAIRO_OPERATOR_XOR" : 11, 
	"CAIRO_OPERATOR_ADD" : 12, 
	"CAIRO_OPERATOR_SATURATE" : 13, 
	"CAIRO_OPERATOR_MULTIPLY" : 14, 
	"CAIRO_OPERATOR_SCREEN" : 15, 
	"CAIRO_OPERATOR_OVERLAY" : 16, 
	"CAIRO_OPERATOR_DARKEN" : 17, 
	"CAIRO_OPERATOR_LIGHTEN" : 18, 
	"CAIRO_OPERATOR_COLOR_DODGE" : 19, 
	"CAIRO_OPERATOR_COLOR_BURN" : 20, 
	"CAIRO_OPERATOR_HARD_LIGHT" : 21, 
	"CAIRO_OPERATOR_SOFT_LIGHT" : 22, 
	"CAIRO_OPERATOR_DIFFERENCE" : 23, 
	"CAIRO_OPERATOR_EXCLUSION" : 24, 
	"CAIRO_OPERATOR_HSL_HUE" : 25, 
	"CAIRO_OPERATOR_HSL_SATURATION" : 26, 
	"CAIRO_OPERATOR_HSL_COLOR" : 27, 
	"CAIRO_OPERATOR_HSL_LUMINOSITY" : 28, 
}

cairo_antialias = { 
	"CAIRO_ANTIALIAS_DEFAULT" : 0, 
	"CAIRO_ANTIALIAS_NONE" : 1, 
	"CAIRO_ANTIALIAS_GRAY" : 2, 
	"CAIRO_ANTIALIAS_SUBPIXEL" : 3, 
}

cairo_fill_rule = { 
	"CAIRO_FILL_RULE_WINDING" : 0, 
	"CAIRO_FILL_RULE_EVEN_ODD" : 1, 
}

cairo_line_cap = { 
	"CAIRO_LINE_CAP_BUTT" : 0, 
	"CAIRO_LINE_CAP_ROUND" : 1, 
	"CAIRO_LINE_CAP_SQUARE" : 2, 
}

cairo_line_join = { 
	"CAIRO_LINE_JOIN_MITER" : 0, 
	"CAIRO_LINE_JOIN_ROUND" : 1, 
	"CAIRO_LINE_JOIN_BEVEL" : 2, 
}

cairo_text_cluster_flags = { 
	"CAIRO_TEXT_CLUSTER_FLAG_BACKWARD" : 1, 
}

cairo_font_slant = { 
	"CAIRO_FONT_SLANT_NORMAL" : 0, 
	"CAIRO_FONT_SLANT_ITALIC" : 1, 
	"CAIRO_FONT_SLANT_OBLIQUE" : 2, 
}

cairo_font_weight = { 
	"CAIRO_FONT_WEIGHT_NORMAL" : 0, 
	"CAIRO_FONT_WEIGHT_BOLD" : 1, 
}

cairo_subpixel_order = { 
	"CAIRO_SUBPIXEL_ORDER_DEFAULT" : 0, 
	"CAIRO_SUBPIXEL_ORDER_RGB" : 1, 
	"CAIRO_SUBPIXEL_ORDER_BGR" : 2, 
	"CAIRO_SUBPIXEL_ORDER_VRGB" : 3, 
	"CAIRO_SUBPIXEL_ORDER_VBGR" : 4, 
}

cairo_hint_style = { 
	"CAIRO_HINT_STYLE_DEFAULT" : 0, 
	"CAIRO_HINT_STYLE_NONE" : 1, 
	"CAIRO_HINT_STYLE_SLIGHT" : 2, 
	"CAIRO_HINT_STYLE_MEDIUM" : 3, 
	"CAIRO_HINT_STYLE_FULL" : 4, 
}

cairo_hint_metrics = { 
	"CAIRO_HINT_METRICS_DEFAULT" : 0, 
	"CAIRO_HINT_METRICS_OFF" : 1, 
	"CAIRO_HINT_METRICS_ON" : 2, 
}

cairo_font_type = { 
	"CAIRO_FONT_TYPE_TOY" : 0, 
	"CAIRO_FONT_TYPE_FT" : 1, 
	"CAIRO_FONT_TYPE_WIN32" : 2, 
	"CAIRO_FONT_TYPE_QUARTZ" : 3, 
	"CAIRO_FONT_TYPE_USER" : 4, 
}

cairo_path_data_type = { 
	"CAIRO_PATH_MOVE_TO" : 0, 
	"CAIRO_PATH_LINE_TO" : 1, 
	"CAIRO_PATH_CURVE_TO" : 2, 
	"CAIRO_PATH_CLOSE_PATH" : 3, 
}

cairo_device_type = { 
	"CAIRO_DEVICE_TYPE_DRM" : 0, 
	"CAIRO_DEVICE_TYPE_GL" : 1, 
	"CAIRO_DEVICE_TYPE_SCRIPT" : 2, 
	"CAIRO_DEVICE_TYPE_XCB" : 3, 
	"CAIRO_DEVICE_TYPE_XLIB" : 4, 
	"CAIRO_DEVICE_TYPE_XML" : 5, 
}

cairo_surface_type = { 
	"CAIRO_SURFACE_TYPE_IMAGE" : 0, 
	"CAIRO_SURFACE_TYPE_PDF" : 1, 
	"CAIRO_SURFACE_TYPE_PS" : 2, 
	"CAIRO_SURFACE_TYPE_XLIB" : 3, 
	"CAIRO_SURFACE_TYPE_XCB" : 4, 
	"CAIRO_SURFACE_TYPE_GLITZ" : 5, 
	"CAIRO_SURFACE_TYPE_QUARTZ" : 6, 
	"CAIRO_SURFACE_TYPE_WIN32" : 7, 
	"CAIRO_SURFACE_TYPE_BEOS" : 8, 
	"CAIRO_SURFACE_TYPE_DIRECTFB" : 9, 
	"CAIRO_SURFACE_TYPE_SVG" : 10, 
	"CAIRO_SURFACE_TYPE_OS2" : 11, 
	"CAIRO_SURFACE_TYPE_WIN32_PRINTING" : 12, 
	"CAIRO_SURFACE_TYPE_QUARTZ_IMAGE" : 13, 
	"CAIRO_SURFACE_TYPE_SCRIPT" : 14, 
	"CAIRO_SURFACE_TYPE_QT" : 15, 
	"CAIRO_SURFACE_TYPE_RECORDING" : 16, 
	"CAIRO_SURFACE_TYPE_VG" : 17, 
	"CAIRO_SURFACE_TYPE_GL" : 18, 
	"CAIRO_SURFACE_TYPE_DRM" : 19, 
	"CAIRO_SURFACE_TYPE_TEE" : 20, 
	"CAIRO_SURFACE_TYPE_XML" : 21, 
	"CAIRO_SURFACE_TYPE_SKIA" : 22, 
	"CAIRO_SURFACE_TYPE_SUBSURFACE" : 23, 
}

cairo_format = { 
	"CAIRO_FORMAT_INVALID" : -1, 
	"CAIRO_FORMAT_ARGB32" : 0, 
	"CAIRO_FORMAT_RGB24" : 1, 
	"CAIRO_FORMAT_A8" : 2, 
	"CAIRO_FORMAT_A1" : 3, 
	"CAIRO_FORMAT_RGB16_565" : 4, 
}

cairo_pattern_type = { 
	"CAIRO_PATTERN_TYPE_SOLID" : 0, 
	"CAIRO_PATTERN_TYPE_SURFACE" : 1, 
	"CAIRO_PATTERN_TYPE_LINEAR" : 2, 
	"CAIRO_PATTERN_TYPE_RADIAL" : 3, 
}

cairo_extend = { 
	"CAIRO_EXTEND_NONE" : 0, 
	"CAIRO_EXTEND_REPEAT" : 1, 
	"CAIRO_EXTEND_REFLECT" : 2, 
	"CAIRO_EXTEND_PAD" : 3, 
}

cairo_filter = { 
	"CAIRO_FILTER_FAST" : 0, 
	"CAIRO_FILTER_GOOD" : 1, 
	"CAIRO_FILTER_BEST" : 2, 
	"CAIRO_FILTER_NEAREST" : 3, 
	"CAIRO_FILTER_BILINEAR" : 4, 
	"CAIRO_FILTER_GAUSSIAN" : 5, 
}

cairo_region_overlap = { 
	"CAIRO_REGION_OVERLAP_IN" : 0, 
	"CAIRO_REGION_OVERLAP_OUT" : 1, 
	"CAIRO_REGION_OVERLAP_PART" : 2, 
}

GDK_LSB_FIRST = 0 
GDK_MSB_FIRST = 1 

GDK_SHIFT_MASK = 1 
GDK_LOCK_MASK = 2 
GDK_CONTROL_MASK = 4 
GDK_MOD1_MASK = 8 
GDK_MOD2_MASK = 16 
GDK_MOD3_MASK = 32 
GDK_MOD4_MASK = 64 
GDK_MOD5_MASK = 128 
GDK_BUTTON1_MASK = 256 
GDK_BUTTON2_MASK = 512 
GDK_BUTTON3_MASK = 65536 
GDK_BUTTON4_MASK = 131072 
GDK_BUTTON5_MASK = 262144 
GDK_MODIFIER_RESERVED_13_MASK = 524288 
GDK_MODIFIER_RESERVED_14_MASK = 1048576 
GDK_MODIFIER_RESERVED_15_MASK = 2097152 
GDK_MODIFIER_RESERVED_16_MASK = 4194304 
GDK_MODIFIER_RESERVED_17_MASK = 8388608 
GDK_MODIFIER_RESERVED_18_MASK = 16777216 
GDK_MODIFIER_RESERVED_19_MASK = 33554432 
GDK_MODIFIER_RESERVED_20_MASK = 4294967296 
GDK_MODIFIER_RESERVED_21_MASK = 8589934592 
GDK_MODIFIER_RESERVED_22_MASK = 17179869184 
GDK_MODIFIER_RESERVED_23_MASK = 34359738368 
GDK_MODIFIER_RESERVED_24_MASK = 68719476736 
GDK_MODIFIER_RESERVED_25_MASK = 137438953472 
GDK_SUPER_MASK = 274877906944 
GDK_HYPER_MASK = 549755813888 
GDK_META_MASK = 1099511627776 
GDK_MODIFIER_RESERVED_29_MASK = 2199023255552 
GDK_RELEASE_MASK = 281474976710656 
GDK_MODIFIER_MASK = 1543512063 

GDK_OK = 0 
GDK_ERROR = -1 
GDK_ERROR_PARAM = -2 
GDK_ERROR_FILE = -3 
GDK_ERROR_MEM = -4 

GDK_OWNERSHIP_NONE = 0 
GDK_OWNERSHIP_WINDOW = 1 
GDK_OWNERSHIP_APPLICATION = 2 

GDK_GRAB_SUCCESS = 0 
GDK_GRAB_ALREADY_GRABBED = 1 
GDK_GRAB_INVALID_TIME = 2 
GDK_GRAB_NOT_VIEWABLE = 3 
GDK_GRAB_FROZEN = 4 

GDK_EXPOSURE_MASK = 2 
GDK_POINTER_MOTION_MASK = 4 
GDK_POINTER_MOTION_HINT_MASK = 8 
GDK_BUTTON_MOTION_MASK = 16 
GDK_BUTTON1_MOTION_MASK = 32 
GDK_BUTTON2_MOTION_MASK = 64 
GDK_BUTTON3_MOTION_MASK = 128 
GDK_BUTTON_PRESS_MASK = 256 
GDK_BUTTON_RELEASE_MASK = 512 
GDK_KEY_PRESS_MASK = 65536 
GDK_KEY_RELEASE_MASK = 131072 
GDK_ENTER_NOTIFY_MASK = 262144 
GDK_LEAVE_NOTIFY_MASK = 524288 
GDK_FOCUS_CHANGE_MASK = 1048576 
GDK_STRUCTURE_MASK = 2097152 
GDK_PROPERTY_CHANGE_MASK = 4194304 
GDK_VISIBILITY_NOTIFY_MASK = 8388608 
GDK_PROXIMITY_IN_MASK = 16777216 
GDK_PROXIMITY_OUT_MASK = 33554432 
GDK_SUBSTRUCTURE_MASK = 4294967296 
GDK_SCROLL_MASK = 8589934592 
GDK_ALL_EVENTS_MASK = 4194302 

GDK_EXTENSION_EVENTS_NONE = 0 
GDK_EXTENSION_EVENTS_ALL = 1 
GDK_EXTENSION_EVENTS_CURSOR = 2 

GDK_SOURCE_MOUSE = 0 
GDK_SOURCE_PEN = 1 
GDK_SOURCE_ERASER = 2 
GDK_SOURCE_CURSOR = 3 
GDK_SOURCE_KEYBOARD = 4 

GDK_MODE_DISABLED = 0 
GDK_MODE_SCREEN = 1 
GDK_MODE_WINDOW = 2 

GDK_AXIS_IGNORE = 0 
GDK_AXIS_X = 1 
GDK_AXIS_Y = 2 
GDK_AXIS_PRESSURE = 3 
GDK_AXIS_XTILT = 4 
GDK_AXIS_YTILT = 5 
GDK_AXIS_WHEEL = 6 
GDK_AXIS_LAST = 7 

GDK_DEVICE_TYPE_MASTER = 0 
GDK_DEVICE_TYPE_SLAVE = 1 
GDK_DEVICE_TYPE_FLOATING = 2 

GDK_ACTION_DEFAULT = 1 
GDK_ACTION_COPY = 2 
GDK_ACTION_MOVE = 4 
GDK_ACTION_LINK = 8 
GDK_ACTION_PRIVATE = 16 
GDK_ACTION_ASK = 32 

GDK_DRAG_PROTO_NONE = 0 
GDK_DRAG_PROTO_MOTIF = 1 
GDK_DRAG_PROTO_XDND = 2 
GDK_DRAG_PROTO_ROOTWIN = 3 
GDK_DRAG_PROTO_WIN32_DROPFILES = 4 
GDK_DRAG_PROTO_OLE2 = 5 
GDK_DRAG_PROTO_LOCAL = 6 

GDK_FILTER_CONTINUE = 0 
GDK_FILTER_TRANSLATE = 1 
GDK_FILTER_REMOVE = 2 

GDK_NOTHING = -1 
GDK_DELETE = 0 
GDK_DESTROY = 1 
GDK_EXPOSE = 2 
GDK_MOTION_NOTIFY = 3 
GDK_BUTTON_PRESS = 4 
GDK_2BUTTON_PRESS = 5 
GDK_3BUTTON_PRESS = 6 
GDK_BUTTON_RELEASE = 7 
GDK_KEY_PRESS = 8 
GDK_KEY_RELEASE = 9 
GDK_ENTER_NOTIFY = 10 
GDK_LEAVE_NOTIFY = 11 
GDK_FOCUS_CHANGE = 12 
GDK_CONFIGURE = 13 
GDK_MAP = 14 
GDK_UNMAP = 15 
GDK_PROPERTY_NOTIFY = 16 
GDK_SELECTION_CLEAR = 17 
GDK_SELECTION_REQUEST = 18 
GDK_SELECTION_NOTIFY = 19 
GDK_PROXIMITY_IN = 20 
GDK_PROXIMITY_OUT = 21 
GDK_DRAG_ENTER = 22 
GDK_DRAG_LEAVE = 23 
GDK_DRAG_MOTION = 24 
GDK_DRAG_STATUS = 25 
GDK_DROP_START = 26 
GDK_DROP_FINISHED = 27 
GDK_CLIENT_EVENT = 28 
GDK_VISIBILITY_NOTIFY = 29 
GDK_SCROLL = 31 
GDK_WINDOW_STATE = 32 
GDK_SETTING = 33 
GDK_OWNER_CHANGE = 34 
GDK_GRAB_BROKEN = 35 
GDK_DAMAGE = 36 
GDK_EVENT_LAST = 37 

GDK_VISIBILITY_UNOBSCURED = 0 
GDK_VISIBILITY_PARTIAL = 1 
GDK_VISIBILITY_FULLY_OBSCURED = 2 

GDK_SCROLL_UP = 0 
GDK_SCROLL_DOWN = 1 
GDK_SCROLL_LEFT = 2 
GDK_SCROLL_RIGHT = 3 

GDK_NOTIFY_ANCESTOR = 0 
GDK_NOTIFY_VIRTUAL = 1 
GDK_NOTIFY_INFERIOR = 2 
GDK_NOTIFY_NONLINEAR = 3 
GDK_NOTIFY_NONLINEAR_VIRTUAL = 4 
GDK_NOTIFY_UNKNOWN = 5 

GDK_CROSSING_NORMAL = 0 
GDK_CROSSING_GRAB = 1 
GDK_CROSSING_UNGRAB = 2 
GDK_CROSSING_GTK_GRAB = 3 
GDK_CROSSING_GTK_UNGRAB = 4 
GDK_CROSSING_STATE_CHANGED = 5 

GDK_PROPERTY_NEW_VALUE = 0 
GDK_PROPERTY_DELETE = 1 

GDK_WINDOW_STATE_WITHDRAWN = 1 
GDK_WINDOW_STATE_ICONIFIED = 2 
GDK_WINDOW_STATE_MAXIMIZED = 4 
GDK_WINDOW_STATE_STICKY = 8 
GDK_WINDOW_STATE_FULLSCREEN = 16 
GDK_WINDOW_STATE_ABOVE = 32 
GDK_WINDOW_STATE_BELOW = 64 

GDK_SETTING_ACTION_NEW = 0 
GDK_SETTING_ACTION_CHANGED = 1 
GDK_SETTING_ACTION_DELETED = 2 

GDK_OWNER_CHANGE_NEW_OWNER = 0 
GDK_OWNER_CHANGE_DESTROY = 1 
GDK_OWNER_CHANGE_CLOSE = 2 

GDK_PIXBUF_ALPHA_BILEVEL = 0 
GDK_PIXBUF_ALPHA_FULL = 1 

GDK_COLORSPACE_RGB = 0 

GDK_PIXBUF_ERROR_CORRUPT_IMAGE = 0 
GDK_PIXBUF_ERROR_INSUFFICIENT_MEMORY = 1 
GDK_PIXBUF_ERROR_BAD_OPTION = 2 
GDK_PIXBUF_ERROR_UNKNOWN_TYPE = 3 
GDK_PIXBUF_ERROR_UNSUPPORTED_OPERATION = 4 
GDK_PIXBUF_ERROR_FAILED = 5 

GDK_INTERP_NEAREST = 0 
GDK_INTERP_TILES = 1 
GDK_INTERP_BILINEAR = 2 
GDK_INTERP_HYPER = 3 

GDK_PIXBUF_ROTATE_NONE = 0 
GDK_PIXBUF_ROTATE_COUNTERCLOCKWISE = 90 
GDK_PIXBUF_ROTATE_UPSIDEDOWN = 180 
GDK_PIXBUF_ROTATE_CLOCKWISE = 270 

GDK_X_CURSOR = 0 
GDK_ARROW = 2 
GDK_BASED_ARROW_DOWN = 4 
GDK_BASED_ARROW_UP = 6 
GDK_BOAT = 8 
GDK_BOGOSITY = 10 
GDK_BOTTOM_LEFT_CORNER = 12 
GDK_BOTTOM_RIGHT_CORNER = 14 
GDK_BOTTOM_SIDE = 16 
GDK_BOTTOM_TEE = 18 
GDK_BOX_SPIRAL = 20 
GDK_CENTER_PTR = 22 
GDK_CIRCLE = 24 
GDK_CLOCK = 26 
GDK_COFFEE_MUG = 28 
GDK_CROSS = 30 
GDK_CROSS_REVERSE = 32 
GDK_CROSSHAIR = 34 
GDK_DIAMOND_CROSS = 36 
GDK_DOT = 38 
GDK_DOTBOX = 40 
GDK_DOUBLE_ARROW = 42 
GDK_DRAFT_LARGE = 44 
GDK_DRAFT_SMALL = 46 
GDK_DRAPED_BOX = 48 
GDK_EXCHANGE = 50 
GDK_FLEUR = 52 
GDK_GOBBLER = 54 
GDK_GUMBY = 56 
GDK_HAND1 = 58 
GDK_HAND2 = 60 
GDK_HEART = 62 
GDK_ICON = 64 
GDK_IRON_CROSS = 66 
GDK_LEFT_PTR = 68 
GDK_LEFT_SIDE = 70 
GDK_LEFT_TEE = 72 
GDK_LEFTBUTTON = 74 
GDK_LL_ANGLE = 76 
GDK_LR_ANGLE = 78 
GDK_MAN = 80 
GDK_MIDDLEBUTTON = 82 
GDK_MOUSE = 84 
GDK_PENCIL = 86 
GDK_PIRATE = 88 
GDK_PLUS = 90 
GDK_QUESTION_ARROW = 92 
GDK_RIGHT_PTR = 94 
GDK_RIGHT_SIDE = 96 
GDK_RIGHT_TEE = 98 
GDK_RIGHTBUTTON = 100 
GDK_RTL_LOGO = 102 
GDK_SAILBOAT = 104 
GDK_SB_DOWN_ARROW = 106 
GDK_SB_H_DOUBLE_ARROW = 108 
GDK_SB_LEFT_ARROW = 110 
GDK_SB_RIGHT_ARROW = 112 
GDK_SB_UP_ARROW = 114 
GDK_SB_V_DOUBLE_ARROW = 116 
GDK_SHUTTLE = 118 
GDK_SIZING = 120 
GDK_SPIDER = 122 
GDK_SPRAYCAN = 124 
GDK_STAR = 126 
GDK_TARGET = 128 
GDK_TCROSS = 130 
GDK_TOP_LEFT_ARROW = 132 
GDK_TOP_LEFT_CORNER = 134 
GDK_TOP_RIGHT_CORNER = 136 
GDK_TOP_SIDE = 138 
GDK_TOP_TEE = 140 
GDK_TREK = 142 
GDK_UL_ANGLE = 144 
GDK_UMBRELLA = 146 
GDK_UR_ANGLE = 148 
GDK_WATCH = 150 
GDK_XTERM = 152 
GDK_LAST_CURSOR = 153 
GDK_BLANK_CURSOR = -2 
GDK_CURSOR_IS_PIXMAP = -1 

GDK_PROP_MODE_REPLACE = 0 
GDK_PROP_MODE_PREPEND = 1 
GDK_PROP_MODE_APPEND = 2 

GDK_INPUT_OUTPUT = 0 
GDK_INPUT_ONLY = 1 

GDK_WINDOW_ROOT = 0 
GDK_WINDOW_TOPLEVEL = 1 
GDK_WINDOW_CHILD = 2 
GDK_WINDOW_TEMP = 3 
GDK_WINDOW_FOREIGN = 4 
GDK_WINDOW_OFFSCREEN = 5 

GDK_WA_TITLE = 2 
GDK_WA_X = 4 
GDK_WA_Y = 8 
GDK_WA_CURSOR = 16 
GDK_WA_VISUAL = 32 
GDK_WA_WMCLASS = 64 
GDK_WA_NOREDIR = 128 
GDK_WA_TYPE_HINT = 256 

GDK_DECOR_ALL = 1 
GDK_DECOR_BORDER = 2 
GDK_DECOR_RESIZEH = 4 
GDK_DECOR_TITLE = 8 
GDK_DECOR_MENU = 16 
GDK_DECOR_MINIMIZE = 32 
GDK_DECOR_MAXIMIZE = 64 

GDK_HINT_POS = 1 
GDK_HINT_MIN_SIZE = 2 
GDK_HINT_MAX_SIZE = 4 
GDK_HINT_BASE_SIZE = 8 
GDK_HINT_ASPECT = 16 
GDK_HINT_RESIZE_INC = 32 
GDK_HINT_WIN_GRAVITY = 64 
GDK_HINT_USER_POS = 128 
GDK_HINT_USER_SIZE = 256 

GDK_WINDOW_TYPE_HINT_NORMAL = 0 
GDK_WINDOW_TYPE_HINT_DIALOG = 1 
GDK_WINDOW_TYPE_HINT_MENU = 2 
GDK_WINDOW_TYPE_HINT_TOOLBAR = 3 
GDK_WINDOW_TYPE_HINT_SPLASHSCREEN = 4 
GDK_WINDOW_TYPE_HINT_UTILITY = 5 
GDK_WINDOW_TYPE_HINT_DOCK = 6 
GDK_WINDOW_TYPE_HINT_DESKTOP = 7 
GDK_WINDOW_TYPE_HINT_DROPDOWN_MENU = 8 
GDK_WINDOW_TYPE_HINT_POPUP_MENU = 9 
GDK_WINDOW_TYPE_HINT_TOOLTIP = 10 
GDK_WINDOW_TYPE_HINT_NOTIFICATION = 11 
GDK_WINDOW_TYPE_HINT_COMBO = 12 
GDK_WINDOW_TYPE_HINT_DND = 13 

GDK_WINDOW_EDGE_NORTH_WEST = 0 
GDK_WINDOW_EDGE_NORTH = 1 
GDK_WINDOW_EDGE_NORTH_EAST = 2 
GDK_WINDOW_EDGE_WEST = 3 
GDK_WINDOW_EDGE_EAST = 4 
GDK_WINDOW_EDGE_SOUTH_WEST = 5 
GDK_WINDOW_EDGE_SOUTH = 6 
GDK_WINDOW_EDGE_SOUTH_EAST = 7 

GDK_FUNC_ALL = 1 
GDK_FUNC_RESIZE = 2 
GDK_FUNC_MOVE = 4 
GDK_FUNC_MINIMIZE = 8 
GDK_FUNC_MAXIMIZE = 16 
GDK_FUNC_CLOSE = 32 

GDK_GRAVITY_NORTH_WEST = 1 
GDK_GRAVITY_NORTH = 2 
GDK_GRAVITY_NORTH_EAST = 3 
GDK_GRAVITY_WEST = 4 
GDK_GRAVITY_CENTER = 5 
GDK_GRAVITY_EAST = 6 
GDK_GRAVITY_SOUTH_WEST = 7 
GDK_GRAVITY_SOUTH = 8 
GDK_GRAVITY_SOUTH_EAST = 9 
GDK_GRAVITY_STATIC = 10 

GDK_VISUAL_STATIC_GRAY = 0 
GDK_VISUAL_GRAYSCALE = 1 
GDK_VISUAL_STATIC_COLOR = 2 
GDK_VISUAL_PSEUDO_COLOR = 3 
GDK_VISUAL_TRUE_COLOR = 4 
GDK_VISUAL_DIRECT_COLOR = 5 

GTK_ALIGN_FILL = 0 
GTK_ALIGN_START = 1 
GTK_ALIGN_END = 2 
GTK_ALIGN_CENTER = 3 

GTK_ARROWS_BOTH = 0 
GTK_ARROWS_START = 1 
GTK_ARROWS_END = 2 

GTK_ARROW_UP = 0 
GTK_ARROW_DOWN = 1 
GTK_ARROW_LEFT = 2 
GTK_ARROW_RIGHT = 3 
GTK_ARROW_NONE = 4 

GTK_EXPAND = 1 
GTK_SHRINK = 2 
GTK_FILL = 4 

GTK_BUTTONBOX_SPREAD = 1 
GTK_BUTTONBOX_EDGE = 2 
GTK_BUTTONBOX_START = 3 
GTK_BUTTONBOX_END = 4 
GTK_BUTTONBOX_CENTER = 5 

GTK_DELETE_CHARS = 0 
GTK_DELETE_WORD_ENDS = 1 
GTK_DELETE_WORDS = 2 
GTK_DELETE_DISPLAY_LINES = 3 
GTK_DELETE_DISPLAY_LINE_ENDS = 4 
GTK_DELETE_PARAGRAPH_ENDS = 5 
GTK_DELETE_PARAGRAPHS = 6 
GTK_DELETE_WHITESPACE = 7 

GTK_DIR_TAB_FORWARD = 0 
GTK_DIR_TAB_BACKWARD = 1 
GTK_DIR_UP = 2 
GTK_DIR_DOWN = 3 
GTK_DIR_LEFT = 4 
GTK_DIR_RIGHT = 5 

GTK_EXPANDER_COLLAPSED = 0 
GTK_EXPANDER_SEMI_COLLAPSED = 1 
GTK_EXPANDER_SEMI_EXPANDED = 2 
GTK_EXPANDER_EXPANDED = 3 

GTK_ICON_SIZE_INVALID = 0 
GTK_ICON_SIZE_MENU = 1 
GTK_ICON_SIZE_SMALL_TOOLBAR = 2 
GTK_ICON_SIZE_LARGE_TOOLBAR = 3 
GTK_ICON_SIZE_BUTTON = 4 
GTK_ICON_SIZE_DND = 5 
GTK_ICON_SIZE_DIALOG = 6 

GTK_SENSITIVITY_AUTO = 0 
GTK_SENSITIVITY_ON = 1 
GTK_SENSITIVITY_OFF = 2 

GTK_TEXT_DIR_NONE = 0 
GTK_TEXT_DIR_LTR = 1 
GTK_TEXT_DIR_RTL = 2 

GTK_JUSTIFY_LEFT = 0 
GTK_JUSTIFY_RIGHT = 1 
GTK_JUSTIFY_CENTER = 2 
GTK_JUSTIFY_FILL = 3 

GTK_MENU_DIR_PARENT = 0 
GTK_MENU_DIR_CHILD = 1 
GTK_MENU_DIR_NEXT = 2 
GTK_MENU_DIR_PREV = 3 

GTK_MESSAGE_INFO = 0 
GTK_MESSAGE_WARNING = 1 
GTK_MESSAGE_QUESTION = 2 
GTK_MESSAGE_ERROR = 3 
GTK_MESSAGE_OTHER = 4 

GTK_MOVEMENT_LOGICAL_POSITIONS = 0 
GTK_MOVEMENT_VISUAL_POSITIONS = 1 
GTK_MOVEMENT_WORDS = 2 
GTK_MOVEMENT_DISPLAY_LINES = 3 
GTK_MOVEMENT_DISPLAY_LINE_ENDS = 4 
GTK_MOVEMENT_PARAGRAPHS = 5 
GTK_MOVEMENT_PARAGRAPH_ENDS = 6 
GTK_MOVEMENT_PAGES = 7 
GTK_MOVEMENT_BUFFER_ENDS = 8 
GTK_MOVEMENT_HORIZONTAL_PAGES = 9 

GTK_SCROLL_STEPS = 0 
GTK_SCROLL_PAGES = 1 
GTK_SCROLL_ENDS = 2 
GTK_SCROLL_HORIZONTAL_STEPS = 3 
GTK_SCROLL_HORIZONTAL_PAGES = 4 
GTK_SCROLL_HORIZONTAL_ENDS = 5 

GTK_ORIENTATION_HORIZONTAL = 0 
GTK_ORIENTATION_VERTICAL = 1 

GTK_CORNER_TOP_LEFT = 0 
GTK_CORNER_BOTTOM_LEFT = 1 
GTK_CORNER_TOP_RIGHT = 2 
GTK_CORNER_BOTTOM_RIGHT = 3 

GTK_PACK_START = 0 
GTK_PACK_END = 1 

GTK_PATH_PRIO_LOWEST = 0 
GTK_PATH_PRIO_GTK = 4 
GTK_PATH_PRIO_APPLICATION = 8 
GTK_PATH_PRIO_THEME = 10 
GTK_PATH_PRIO_RC = 12 
GTK_PATH_PRIO_HIGHEST = 15 

GTK_PATH_WIDGET = 0 
GTK_PATH_WIDGET_CLASS = 1 
GTK_PATH_CLASS = 2 

GTK_POLICY_ALWAYS = 0 
GTK_POLICY_AUTOMATIC = 1 
GTK_POLICY_NEVER = 2 

GTK_POS_LEFT = 0 
GTK_POS_RIGHT = 1 
GTK_POS_TOP = 2 
GTK_POS_BOTTOM = 3 

GTK_RELIEF_NORMAL = 0 
GTK_RELIEF_HALF = 1 
GTK_RELIEF_NONE = 2 

GTK_RESIZE_PARENT = 0 
GTK_RESIZE_QUEUE = 1 
GTK_RESIZE_IMMEDIATE = 2 

GTK_SCROLL_NONE = 0 
GTK_SCROLL_JUMP = 1 
GTK_SCROLL_STEP_BACKWARD = 2 
GTK_SCROLL_STEP_FORWARD = 3 
GTK_SCROLL_PAGE_BACKWARD = 4 
GTK_SCROLL_PAGE_FORWARD = 5 
GTK_SCROLL_STEP_UP = 6 
GTK_SCROLL_STEP_DOWN = 7 
GTK_SCROLL_PAGE_UP = 8 
GTK_SCROLL_PAGE_DOWN = 9 
GTK_SCROLL_STEP_LEFT = 10 
GTK_SCROLL_STEP_RIGHT = 11 
GTK_SCROLL_PAGE_LEFT = 12 
GTK_SCROLL_PAGE_RIGHT = 13 
GTK_SCROLL_START = 14 
GTK_SCROLL_END = 15 

GTK_SELECTION_NONE = 0 
GTK_SELECTION_SINGLE = 1 
GTK_SELECTION_BROWSE = 2 
GTK_SELECTION_MULTIPLE = 3 

GTK_SHADOW_NONE = 0 
GTK_SHADOW_IN = 1 
GTK_SHADOW_OUT = 2 
GTK_SHADOW_ETCHED_IN = 3 
GTK_SHADOW_ETCHED_OUT = 4 

GTK_STATE_NORMAL = 0 
GTK_STATE_ACTIVE = 1 
GTK_STATE_PRELIGHT = 2 
GTK_STATE_SELECTED = 3 
GTK_STATE_INSENSITIVE = 4 
GTK_STATE_INCONSISTENT = 5 
GTK_STATE_FOCUSED = 6 

GTK_TOOLBAR_ICONS = 0 
GTK_TOOLBAR_TEXT = 1 
GTK_TOOLBAR_BOTH = 2 
GTK_TOOLBAR_BOTH_HORIZ = 3 

GTK_WIN_POS_NONE = 0 
GTK_WIN_POS_CENTER = 1 
GTK_WIN_POS_MOUSE = 2 
GTK_WIN_POS_CENTER_ALWAYS = 3 
GTK_WIN_POS_CENTER_ON_PARENT = 4 

GTK_WINDOW_TOPLEVEL = 0 
GTK_WINDOW_POPUP = 1 

GTK_WRAP_NONE = 0 
GTK_WRAP_CHAR = 1 
GTK_WRAP_WORD = 2 
GTK_WRAP_WORD_CHAR = 3 

GTK_SORT_ASCENDING = 0 
GTK_SORT_DESCENDING = 1 

GTK_IM_PREEDIT_NOTHING = 0 
GTK_IM_PREEDIT_CALLBACK = 1 
GTK_IM_PREEDIT_NONE = 2 

GTK_IM_STATUS_NOTHING = 0 
GTK_IM_STATUS_CALLBACK = 1 
GTK_IM_STATUS_NONE = 2 

GTK_PACK_DIRECTION_LTR = 0 
GTK_PACK_DIRECTION_RTL = 1 
GTK_PACK_DIRECTION_TTB = 2 
GTK_PACK_DIRECTION_BTT = 3 

GTK_PRINT_PAGES_ALL = 0 
GTK_PRINT_PAGES_CURRENT = 1 
GTK_PRINT_PAGES_RANGES = 2 
GTK_PRINT_PAGES_SELECTION = 3 

GTK_PAGE_SET_ALL = 0 
GTK_PAGE_SET_EVEN = 1 
GTK_PAGE_SET_ODD = 2 

GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_TOP_TO_BOTTOM = 0 
GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_BOTTOM_TO_TOP = 1 
GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_TOP_TO_BOTTOM = 2 
GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_BOTTOM_TO_TOP = 3 
GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_LEFT_TO_RIGHT = 4 
GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_RIGHT_TO_LEFT = 5 
GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_LEFT_TO_RIGHT = 6 
GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_RIGHT_TO_LEFT = 7 

GTK_PAGE_ORIENTATION_PORTRAIT = 0 
GTK_PAGE_ORIENTATION_LANDSCAPE = 1 
GTK_PAGE_ORIENTATION_REVERSE_PORTRAIT = 2 
GTK_PAGE_ORIENTATION_REVERSE_LANDSCAPE = 3 

GTK_PRINT_QUALITY_LOW = 0 
GTK_PRINT_QUALITY_NORMAL = 1 
GTK_PRINT_QUALITY_HIGH = 2 
GTK_PRINT_QUALITY_DRAFT = 3 

GTK_PRINT_DUPLEX_SIMPLEX = 0 
GTK_PRINT_DUPLEX_HORIZONTAL = 1 
GTK_PRINT_DUPLEX_VERTICAL = 2 

GTK_UNIT_PIXEL = 0 
GTK_UNIT_POINTS = 1 
GTK_UNIT_INCH = 2 
GTK_UNIT_MM = 3 

GTK_TREE_VIEW_GRID_LINES_NONE = 0 
GTK_TREE_VIEW_GRID_LINES_HORIZONTAL = 1 
GTK_TREE_VIEW_GRID_LINES_VERTICAL = 2 
GTK_TREE_VIEW_GRID_LINES_BOTH = 3 

GTK_DRAG_RESULT_SUCCESS = 0 
GTK_DRAG_RESULT_NO_TARGET = 1 
GTK_DRAG_RESULT_USER_CANCELLED = 2 
GTK_DRAG_RESULT_TIMEOUT_EXPIRED = 3 
GTK_DRAG_RESULT_GRAB_BROKEN = 4 
GTK_DRAG_RESULT_ERROR = 5 

GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH = 0 
GTK_SIZE_REQUEST_WIDTH_FOR_HEIGHT = 1 
GTK_SIZE_REQUEST_CONSTANT_SIZE = 2 

GTK_SCROLL_MINIMUM = 0 
GTK_SCROLL_NATURAL = 1 

GTK_STATE_FLAG_NORMAL = 0 
GTK_STATE_FLAG_ACTIVE = 1 
GTK_STATE_FLAG_PRELIGHT = 2 
GTK_STATE_FLAG_SELECTED = 4 
GTK_STATE_FLAG_INSENSITIVE = 8 
GTK_STATE_FLAG_INCONSISTENT = 16 
GTK_STATE_FLAG_FOCUSED = 32 

GTK_REGION_EVEN = 1 
GTK_REGION_ODD = 2 
GTK_REGION_FIRST = 4 
GTK_REGION_LAST = 8 
GTK_REGION_SORTED = 32 

GTK_JUNCTION_NONE = 0 
GTK_JUNCTION_CORNER_TOPLEFT = 1 
GTK_JUNCTION_CORNER_TOPRIGHT = 2 
GTK_JUNCTION_CORNER_BOTTOMLEFT = 4 
GTK_JUNCTION_CORNER_BOTTOMRIGHT = 8 
GTK_JUNCTION_TOP = 3 
GTK_JUNCTION_BOTTOM = 12 
GTK_JUNCTION_LEFT = 5 
GTK_JUNCTION_RIGHT = 10 

GTK_ACCEL_VISIBLE = 1 
GTK_ACCEL_LOCKED = 2 
GTK_ACCEL_MASK = 7 

GTK_BORDER_STYLE_NONE = 0 
GTK_BORDER_STYLE_SOLID = 1 
GTK_BORDER_STYLE_INSET = 2 
GTK_BORDER_STYLE_OUTSET = 3 

GTK_RC_FG = 1 
GTK_RC_BG = 2 
GTK_RC_TEXT = 4 
GTK_RC_BASE = 8 

GTK_RC_TOKEN_INVALID = 270 
GTK_RC_TOKEN_INCLUDE = 271 
GTK_RC_TOKEN_NORMAL = 272 
GTK_RC_TOKEN_ACTIVE = 273 
GTK_RC_TOKEN_PRELIGHT = 274 
GTK_RC_TOKEN_SELECTED = 275 
GTK_RC_TOKEN_INSENSITIVE = 276 
GTK_RC_TOKEN_FG = 277 
GTK_RC_TOKEN_BG = 278 
GTK_RC_TOKEN_TEXT = 279 
GTK_RC_TOKEN_BASE = 280 
GTK_RC_TOKEN_XTHICKNESS = 281 
GTK_RC_TOKEN_YTHICKNESS = 282 
GTK_RC_TOKEN_FONT = 283 
GTK_RC_TOKEN_FONTSET = 284 
GTK_RC_TOKEN_FONT_NAME = 285 
GTK_RC_TOKEN_BG_PIXMAP = 286 
GTK_RC_TOKEN_PIXMAP_PATH = 287 
GTK_RC_TOKEN_STYLE = 288 
GTK_RC_TOKEN_BINDING = 289 
GTK_RC_TOKEN_BIND = 290 
GTK_RC_TOKEN_WIDGET = 291 
GTK_RC_TOKEN_WIDGET_CLASS = 292 
GTK_RC_TOKEN_CLASS = 293 
GTK_RC_TOKEN_LOWEST = 294 
GTK_RC_TOKEN_GTK = 295 
GTK_RC_TOKEN_APPLICATION = 296 
GTK_RC_TOKEN_THEME = 297 
GTK_RC_TOKEN_RC = 298 
GTK_RC_TOKEN_HIGHEST = 299 
GTK_RC_TOKEN_ENGINE = 300 
GTK_RC_TOKEN_MODULE_PATH = 301 
GTK_RC_TOKEN_IM_MODULE_PATH = 302 
GTK_RC_TOKEN_IM_MODULE_FILE = 303 
GTK_RC_TOKEN_STOCK = 304 
GTK_RC_TOKEN_LTR = 305 
GTK_RC_TOKEN_RTL = 306 
GTK_RC_TOKEN_COLOR = 307 
GTK_RC_TOKEN_UNBIND = 308 
GTK_RC_TOKEN_LAST = 309 

ATK_STATE_INVALID = 0 
ATK_STATE_ACTIVE = 1 
ATK_STATE_ARMED = 2 
ATK_STATE_BUSY = 3 
ATK_STATE_CHECKED = 4 
ATK_STATE_DEFUNCT = 5 
ATK_STATE_EDITABLE = 6 
ATK_STATE_ENABLED = 7 
ATK_STATE_EXPANDABLE = 8 
ATK_STATE_EXPANDED = 9 
ATK_STATE_FOCUSABLE = 10 
ATK_STATE_FOCUSED = 11 
ATK_STATE_HORIZONTAL = 12 
ATK_STATE_ICONIFIED = 13 
ATK_STATE_MODAL = 14 
ATK_STATE_MULTI_LINE = 15 
ATK_STATE_MULTISELECTABLE = 16 
ATK_STATE_OPAQUE = 17 
ATK_STATE_PRESSED = 18 
ATK_STATE_RESIZABLE = 19 
ATK_STATE_SELECTABLE = 20 
ATK_STATE_SELECTED = 21 
ATK_STATE_SENSITIVE = 22 
ATK_STATE_SHOWING = 23 
ATK_STATE_SINGLE_LINE = 24 
ATK_STATE_STALE = 25 
ATK_STATE_TRANSIENT = 26 
ATK_STATE_VERTICAL = 27 
ATK_STATE_VISIBLE = 28 
ATK_STATE_MANAGES_DESCENDANTS = 29 
ATK_STATE_INDETERMINATE = 30 
ATK_STATE_TRUNCATED = 31 
ATK_STATE_REQUIRED = 32 
ATK_STATE_INVALID_ENTRY = 33 
ATK_STATE_SUPPORTS_AUTOCOMPLETION = 34 
ATK_STATE_SELECTABLE_TEXT = 35 
ATK_STATE_DEFAULT = 36 
ATK_STATE_ANIMATED = 37 
ATK_STATE_VISITED = 38 
ATK_STATE_LAST_DEFINED = 39 

ATK_RELATION_NULL = 0 
ATK_RELATION_CONTROLLED_BY = 1 
ATK_RELATION_CONTROLLER_FOR = 2 
ATK_RELATION_LABEL_FOR = 3 
ATK_RELATION_LABELLED_BY = 4 
ATK_RELATION_MEMBER_OF = 5 
ATK_RELATION_NODE_CHILD_OF = 6 
ATK_RELATION_FLOWS_TO = 7 
ATK_RELATION_FLOWS_FROM = 8 
ATK_RELATION_SUBWINDOW_OF = 9 
ATK_RELATION_EMBEDS = 10 
ATK_RELATION_EMBEDDED_BY = 11 
ATK_RELATION_POPUP_FOR = 12 
ATK_RELATION_PARENT_WINDOW_OF = 13 
ATK_RELATION_DESCRIBED_BY = 14 
ATK_RELATION_DESCRIPTION_FOR = 15 
ATK_RELATION_NODE_PARENT_OF = 16 
ATK_RELATION_LAST_DEFINED = 17 

ATK_ROLE_INVALID = 0 
ATK_ROLE_ACCEL_LABEL = 1 
ATK_ROLE_ALERT = 2 
ATK_ROLE_ANIMATION = 3 
ATK_ROLE_ARROW = 4 
ATK_ROLE_CALENDAR = 5 
ATK_ROLE_CANVAS = 6 
ATK_ROLE_CHECK_BOX = 7 
ATK_ROLE_CHECK_MENU_ITEM = 8 
ATK_ROLE_COLOR_CHOOSER = 9 
ATK_ROLE_COLUMN_HEADER = 10 
ATK_ROLE_COMBO_BOX = 11 
ATK_ROLE_DATE_EDITOR = 12 
ATK_ROLE_DESKTOP_ICON = 13 
ATK_ROLE_DESKTOP_FRAME = 14 
ATK_ROLE_DIAL = 15 
ATK_ROLE_DIALOG = 16 
ATK_ROLE_DIRECTORY_PANE = 17 
ATK_ROLE_DRAWING_AREA = 18 
ATK_ROLE_FILE_CHOOSER = 19 
ATK_ROLE_FILLER = 20 
ATK_ROLE_FONT_CHOOSER = 21 
ATK_ROLE_FRAME = 22 
ATK_ROLE_GLASS_PANE = 23 
ATK_ROLE_HTML_CONTAINER = 24 
ATK_ROLE_ICON = 25 
ATK_ROLE_IMAGE = 26 
ATK_ROLE_INTERNAL_FRAME = 27 
ATK_ROLE_LABEL = 28 
ATK_ROLE_LAYERED_PANE = 29 
ATK_ROLE_LIST = 30 
ATK_ROLE_LIST_ITEM = 31 
ATK_ROLE_MENU = 32 
ATK_ROLE_MENU_BAR = 33 
ATK_ROLE_MENU_ITEM = 34 
ATK_ROLE_OPTION_PANE = 35 
ATK_ROLE_PAGE_TAB = 36 
ATK_ROLE_PAGE_TAB_LIST = 37 
ATK_ROLE_PANEL = 38 
ATK_ROLE_PASSWORD_TEXT = 39 
ATK_ROLE_POPUP_MENU = 40 
ATK_ROLE_PROGRESS_BAR = 41 
ATK_ROLE_PUSH_BUTTON = 42 
ATK_ROLE_RADIO_BUTTON = 43 
ATK_ROLE_RADIO_MENU_ITEM = 44 
ATK_ROLE_ROOT_PANE = 45 
ATK_ROLE_ROW_HEADER = 46 
ATK_ROLE_SCROLL_BAR = 47 
ATK_ROLE_SCROLL_PANE = 48 
ATK_ROLE_SEPARATOR = 49 
ATK_ROLE_SLIDER = 50 
ATK_ROLE_SPLIT_PANE = 51 
ATK_ROLE_SPIN_BUTTON = 52 
ATK_ROLE_STATUSBAR = 53 
ATK_ROLE_TABLE = 54 
ATK_ROLE_TABLE_CELL = 55 
ATK_ROLE_TABLE_COLUMN_HEADER = 56 
ATK_ROLE_TABLE_ROW_HEADER = 57 
ATK_ROLE_TEAR_OFF_MENU_ITEM = 58 
ATK_ROLE_TERMINAL = 59 
ATK_ROLE_TEXT = 60 
ATK_ROLE_TOGGLE_BUTTON = 61 
ATK_ROLE_TOOL_BAR = 62 
ATK_ROLE_TOOL_TIP = 63 
ATK_ROLE_TREE = 64 
ATK_ROLE_TREE_TABLE = 65 
ATK_ROLE_UNKNOWN = 66 
ATK_ROLE_VIEWPORT = 67 
ATK_ROLE_WINDOW = 68 
ATK_ROLE_HEADER = 69 
ATK_ROLE_FOOTER = 70 
ATK_ROLE_PARAGRAPH = 71 
ATK_ROLE_RULER = 72 
ATK_ROLE_APPLICATION = 73 
ATK_ROLE_AUTOCOMPLETE = 74 
ATK_ROLE_EDITBAR = 75 
ATK_ROLE_EMBEDDED = 76 
ATK_ROLE_ENTRY = 77 
ATK_ROLE_CHART = 78 
ATK_ROLE_CAPTION = 79 
ATK_ROLE_DOCUMENT_FRAME = 80 
ATK_ROLE_HEADING = 81 
ATK_ROLE_PAGE = 82 
ATK_ROLE_SECTION = 83 
ATK_ROLE_REDUNDANT_OBJECT = 84 
ATK_ROLE_FORM = 85 
ATK_ROLE_LINK = 86 
ATK_ROLE_INPUT_METHOD_WINDOW = 87 
ATK_ROLE_TABLE_ROW = 88 
ATK_ROLE_TREE_ITEM = 89 
ATK_ROLE_DOCUMENT_SPREADSHEET = 90 
ATK_ROLE_DOCUMENT_PRESENTATION = 91 
ATK_ROLE_DOCUMENT_TEXT = 92 
ATK_ROLE_DOCUMENT_WEB = 93 
ATK_ROLE_DOCUMENT_EMAIL = 94 
ATK_ROLE_COMMENT = 95 
ATK_ROLE_LIST_BOX = 96 
ATK_ROLE_GROUPING = 97 
ATK_ROLE_IMAGE_MAP = 98 
ATK_ROLE_NOTIFICATION = 99 
ATK_ROLE_INFO_BAR = 100 
ATK_ROLE_LAST_DEFINED = 101 

ATK_LAYER_INVALID = 0 
ATK_LAYER_BACKGROUND = 1 
ATK_LAYER_CANVAS = 2 
ATK_LAYER_WIDGET = 3 
ATK_LAYER_MDI = 4 
ATK_LAYER_POPUP = 5 
ATK_LAYER_OVERLAY = 6 
ATK_LAYER_WINDOW = 7 

ATK_KEY_EVENT_PRESS = 0 
ATK_KEY_EVENT_RELEASE = 1 
ATK_KEY_EVENT_LAST_DEFINED = 2 

ATK_XY_SCREEN = 0 
ATK_XY_WINDOW = 1 

ATK_TEXT_ATTR_INVALID = 0 
ATK_TEXT_ATTR_LEFT_MARGIN = 1 
ATK_TEXT_ATTR_RIGHT_MARGIN = 2 
ATK_TEXT_ATTR_INDENT = 3 
ATK_TEXT_ATTR_INVISIBLE = 4 
ATK_TEXT_ATTR_EDITABLE = 5 
ATK_TEXT_ATTR_PIXELS_ABOVE_LINES = 6 
ATK_TEXT_ATTR_PIXELS_BELOW_LINES = 7 
ATK_TEXT_ATTR_PIXELS_INSIDE_WRAP = 8 
ATK_TEXT_ATTR_BG_FULL_HEIGHT = 9 
ATK_TEXT_ATTR_RISE = 10 
ATK_TEXT_ATTR_UNDERLINE = 11 
ATK_TEXT_ATTR_STRIKETHROUGH = 12 
ATK_TEXT_ATTR_SIZE = 13 
ATK_TEXT_ATTR_SCALE = 14 
ATK_TEXT_ATTR_WEIGHT = 15 
ATK_TEXT_ATTR_LANGUAGE = 16 
ATK_TEXT_ATTR_FAMILY_NAME = 17 
ATK_TEXT_ATTR_BG_COLOR = 18 
ATK_TEXT_ATTR_FG_COLOR = 19 
ATK_TEXT_ATTR_BG_STIPPLE = 20 
ATK_TEXT_ATTR_FG_STIPPLE = 21 
ATK_TEXT_ATTR_WRAP_MODE = 22 
ATK_TEXT_ATTR_DIRECTION = 23 
ATK_TEXT_ATTR_JUSTIFICATION = 24 
ATK_TEXT_ATTR_STRETCH = 25 
ATK_TEXT_ATTR_VARIANT = 26 
ATK_TEXT_ATTR_STYLE = 27 
ATK_TEXT_ATTR_LAST_DEFINED = 28 

ATK_TEXT_BOUNDARY_CHAR = 0 
ATK_TEXT_BOUNDARY_WORD_START = 1 
ATK_TEXT_BOUNDARY_WORD_END = 2 
ATK_TEXT_BOUNDARY_SENTENCE_START = 3 
ATK_TEXT_BOUNDARY_SENTENCE_END = 4 
ATK_TEXT_BOUNDARY_LINE_START = 5 
ATK_TEXT_BOUNDARY_LINE_END = 6 

ATK_TEXT_CLIP_NONE = 0 
ATK_TEXT_CLIP_MIN = 1 
ATK_TEXT_CLIP_MAX = 2 
ATK_TEXT_CLIP_BOTH = 3 

ATK_HYPERLINK_IS_INLINE = 1 

GTK_WIDGET_HELP_TOOLTIP = 0 
GTK_WIDGET_HELP_WHATS_THIS = 1 

GTK_DIALOG_MODAL = 1 
GTK_DIALOG_DESTROY_WITH_PARENT = 2 

GTK_RESPONSE_NONE = -1 
GTK_RESPONSE_REJECT = -2 
GTK_RESPONSE_ACCEPT = -3 
GTK_RESPONSE_DELETE_EVENT = -4 
GTK_RESPONSE_OK = -5 
GTK_RESPONSE_CANCEL = -6 
GTK_RESPONSE_CLOSE = -7 
GTK_RESPONSE_YES = -8 
GTK_RESPONSE_NO = -9 
GTK_RESPONSE_APPLY = -10 
GTK_RESPONSE_HELP = -11 

GTK_LICENSE_UNKNOWN = 0 
GTK_LICENSE_CUSTOM = 1 
GTK_LICENSE_GPL_2_0 = 2 
GTK_LICENSE_GPL_3_0 = 3 
GTK_LICENSE_LGPL_2_1 = 4 
GTK_LICENSE_LGPL_3_0 = 5 
GTK_LICENSE_BSD = 6 
GTK_LICENSE_MIT_X11 = 7 
GTK_LICENSE_ARTISTIC = 8 

GTK_TREE_MODEL_ITERS_PERSIST = 1 
GTK_TREE_MODEL_LIST_ONLY = 2 

GTK_CELL_RENDERER_SELECTED = 1 
GTK_CELL_RENDERER_PRELIT = 2 
GTK_CELL_RENDERER_INSENSITIVE = 4 
GTK_CELL_RENDERER_SORTED = 8 
GTK_CELL_RENDERER_FOCUSED = 16 

GTK_CELL_RENDERER_MODE_INERT = 0 
GTK_CELL_RENDERER_MODE_ACTIVATABLE = 1 
GTK_CELL_RENDERER_MODE_EDITABLE = 2 

GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID = -1 
GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID = -2 

GTK_TREE_VIEW_COLUMN_GROW_ONLY = 0 
GTK_TREE_VIEW_COLUMN_AUTOSIZE = 1 
GTK_TREE_VIEW_COLUMN_FIXED = 2 

GTK_TEXT_SEARCH_VISIBLE_ONLY = 1 
GTK_TEXT_SEARCH_TEXT_ONLY = 2 
GTK_TEXT_SEARCH_CASE_INSENSITIVE = 4 

GTK_DEST_DEFAULT_MOTION = 1 
GTK_DEST_DEFAULT_HIGHLIGHT = 2 
GTK_DEST_DEFAULT_DROP = 4 
GTK_DEST_DEFAULT_ALL = 7 

GTK_TARGET_SAME_APP = 1 
GTK_TARGET_SAME_WIDGET = 2 
GTK_TARGET_OTHER_APP = 4 
GTK_TARGET_OTHER_WIDGET = 8 

GTK_IMAGE_EMPTY = 0 
GTK_IMAGE_PIXBUF = 1 
GTK_IMAGE_STOCK = 2 
GTK_IMAGE_ICON_SET = 3 
GTK_IMAGE_ANIMATION = 4 
GTK_IMAGE_ICON_NAME = 5 
GTK_IMAGE_GICON = 6 

GTK_ENTRY_ICON_PRIMARY = 0 
GTK_ENTRY_ICON_SECONDARY = 1 

GTK_TREE_VIEW_DROP_BEFORE = 0 
GTK_TREE_VIEW_DROP_AFTER = 1 
GTK_TREE_VIEW_DROP_INTO_OR_BEFORE = 2 
GTK_TREE_VIEW_DROP_INTO_OR_AFTER = 3 

GTK_ASSISTANT_PAGE_CONTENT = 0 
GTK_ASSISTANT_PAGE_INTRO = 1 
GTK_ASSISTANT_PAGE_CONFIRM = 2 
GTK_ASSISTANT_PAGE_SUMMARY = 3 
GTK_ASSISTANT_PAGE_PROGRESS = 4 
GTK_ASSISTANT_PAGE_CUSTOM = 5 

GTK_BUILDER_ERROR_INVALID_TYPE_FUNCTION = 0 
GTK_BUILDER_ERROR_UNHANDLED_TAG = 1 
GTK_BUILDER_ERROR_MISSING_ATTRIBUTE = 2 
GTK_BUILDER_ERROR_INVALID_ATTRIBUTE = 3 
GTK_BUILDER_ERROR_INVALID_TAG = 4 
GTK_BUILDER_ERROR_MISSING_PROPERTY_VALUE = 5 
GTK_BUILDER_ERROR_INVALID_VALUE = 6 
GTK_BUILDER_ERROR_VERSION_MISMATCH = 7 
GTK_BUILDER_ERROR_DUPLICATE_ID = 8 

GTK_CALENDAR_SHOW_HEADING = 1 
GTK_CALENDAR_SHOW_DAY_NAMES = 2 
GTK_CALENDAR_NO_MONTH_CHANGE = 4 
GTK_CALENDAR_SHOW_WEEK_NUMBERS = 8 
GTK_CALENDAR_SHOW_DETAILS = 32 

GTK_CELL_RENDERER_ACCEL_MODE_GTK = 0 
GTK_CELL_RENDERER_ACCEL_MODE_OTHER = 1 

GTK_CSS_SECTION_DOCUMENT = 0 
GTK_CSS_SECTION_IMPORT = 1 
GTK_CSS_SECTION_COLOR_DEFINITION = 2 
GTK_CSS_SECTION_BINDING_SET = 3 
GTK_CSS_SECTION_RULESET = 4 
GTK_CSS_SECTION_SELECTOR = 5 
GTK_CSS_SECTION_DECLARATION = 6 
GTK_CSS_SECTION_VALUE = 7 

GTK_CSS_PROVIDER_ERROR_FAILED = 0 
GTK_CSS_PROVIDER_ERROR_SYNTAX = 1 
GTK_CSS_PROVIDER_ERROR_IMPORT = 2 
GTK_CSS_PROVIDER_ERROR_NAME = 3 
GTK_CSS_PROVIDER_ERROR_DEPRECATED = 4 
GTK_CSS_PROVIDER_ERROR_UNKNOWN_VALUE = 5 

GTK_DEBUG_MISC = 1 
GTK_DEBUG_PLUGSOCKET = 2 
GTK_DEBUG_TEXT = 4 
GTK_DEBUG_TREE = 8 
GTK_DEBUG_UPDATES = 16 
GTK_DEBUG_KEYBINDINGS = 32 
GTK_DEBUG_MULTIHEAD = 64 
GTK_DEBUG_MODULES = 128 
GTK_DEBUG_GEOMETRY = 256 
GTK_DEBUG_ICONTHEME = 512 
GTK_DEBUG_PRINTING = 65536 
GTK_DEBUG_BUILDER = 131072 
GTK_DEBUG_SIZE_REQUEST = 262144 

GTK_FILE_FILTER_FILENAME = 1 
GTK_FILE_FILTER_URI = 2 
GTK_FILE_FILTER_DISPLAY_NAME = 4 
GTK_FILE_FILTER_MIME_TYPE = 8 

GTK_FILE_CHOOSER_ACTION_OPEN = 0 
GTK_FILE_CHOOSER_ACTION_SAVE = 1 
GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER = 2 
GTK_FILE_CHOOSER_ACTION_CREATE_FOLDER = 3 

GTK_FILE_CHOOSER_CONFIRMATION_CONFIRM = 0 
GTK_FILE_CHOOSER_CONFIRMATION_ACCEPT_FILENAME = 1 
GTK_FILE_CHOOSER_CONFIRMATION_SELECT_AGAIN = 2 

GTK_FILE_CHOOSER_ERROR_NONEXISTENT = 0 
GTK_FILE_CHOOSER_ERROR_BAD_FILENAME = 1 
GTK_FILE_CHOOSER_ERROR_ALREADY_EXISTS = 2 
GTK_FILE_CHOOSER_ERROR_INCOMPLETE_HOSTNAME = 3 

GTK_ICON_LOOKUP_NO_SVG = 1 
GTK_ICON_LOOKUP_FORCE_SVG = 2 
GTK_ICON_LOOKUP_USE_BUILTIN = 4 
GTK_ICON_LOOKUP_GENERIC_FALLBACK = 8 
GTK_ICON_LOOKUP_FORCE_SIZE = 16 

GTK_ICON_THEME_NOT_FOUND = 0 
GTK_ICON_THEME_FAILED = 1 

GTK_ICON_VIEW_NO_DROP = 0 
GTK_ICON_VIEW_DROP_INTO = 1 
GTK_ICON_VIEW_DROP_LEFT = 2 
GTK_ICON_VIEW_DROP_RIGHT = 3 
GTK_ICON_VIEW_DROP_ABOVE = 4 
GTK_ICON_VIEW_DROP_BELOW = 5 

GTK_SIZE_GROUP_NONE = 0 
GTK_SIZE_GROUP_HORIZONTAL = 1 
GTK_SIZE_GROUP_VERTICAL = 2 
GTK_SIZE_GROUP_BOTH = 3 

GTK_BUTTONS_NONE = 0 
GTK_BUTTONS_OK = 1 
GTK_BUTTONS_CLOSE = 2 
GTK_BUTTONS_CANCEL = 3 
GTK_BUTTONS_YES_NO = 4 
GTK_BUTTONS_OK_CANCEL = 5 

GTK_NOTEBOOK_TAB_FIRST = 0 
GTK_NOTEBOOK_TAB_LAST = 1 

GTK_PRINT_STATUS_INITIAL = 0 
GTK_PRINT_STATUS_PREPARING = 1 
GTK_PRINT_STATUS_GENERATING_DATA = 2 
GTK_PRINT_STATUS_SENDING_DATA = 3 
GTK_PRINT_STATUS_PENDING = 4 
GTK_PRINT_STATUS_PENDING_ISSUE = 5 
GTK_PRINT_STATUS_PRINTING = 6 
GTK_PRINT_STATUS_FINISHED = 7 
GTK_PRINT_STATUS_FINISHED_ABORTED = 8 

GTK_PRINT_OPERATION_RESULT_ERROR = 0 
GTK_PRINT_OPERATION_RESULT_APPLY = 1 
GTK_PRINT_OPERATION_RESULT_CANCEL = 2 
GTK_PRINT_OPERATION_RESULT_IN_PROGRESS = 3 

GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG = 0 
GTK_PRINT_OPERATION_ACTION_PRINT = 1 
GTK_PRINT_OPERATION_ACTION_PREVIEW = 2 
GTK_PRINT_OPERATION_ACTION_EXPORT = 3 

GTK_PRINT_ERROR_GENERAL = 0 
GTK_PRINT_ERROR_INTERNAL_ERROR = 1 
GTK_PRINT_ERROR_NOMEM = 2 
GTK_PRINT_ERROR_INVALID_FILE = 3 

GTK_RECENT_MANAGER_ERROR_NOT_FOUND = 0 
GTK_RECENT_MANAGER_ERROR_INVALID_URI = 1 
GTK_RECENT_MANAGER_ERROR_INVALID_ENCODING = 2 
GTK_RECENT_MANAGER_ERROR_NOT_REGISTERED = 3 
GTK_RECENT_MANAGER_ERROR_READ = 4 
GTK_RECENT_MANAGER_ERROR_WRITE = 5 
GTK_RECENT_MANAGER_ERROR_UNKNOWN = 6 

GTK_RECENT_FILTER_URI = 1 
GTK_RECENT_FILTER_DISPLAY_NAME = 2 
GTK_RECENT_FILTER_MIME_TYPE = 4 
GTK_RECENT_FILTER_APPLICATION = 8 
GTK_RECENT_FILTER_GROUP = 16 
GTK_RECENT_FILTER_AGE = 32 

GTK_RECENT_SORT_NONE = 0 
GTK_RECENT_SORT_MRU = 1 
GTK_RECENT_SORT_LRU = 2 
GTK_RECENT_SORT_CUSTOM = 3 

GTK_RECENT_CHOOSER_ERROR_NOT_FOUND = 0 
GTK_RECENT_CHOOSER_ERROR_INVALID_URI = 1 

GTK_UPDATE_ALWAYS = 0 
GTK_UPDATE_IF_VALID = 1 

GTK_SPIN_STEP_FORWARD = 0 
GTK_SPIN_STEP_BACKWARD = 1 
GTK_SPIN_PAGE_FORWARD = 2 
GTK_SPIN_PAGE_BACKWARD = 3 
GTK_SPIN_HOME = 4 
GTK_SPIN_END = 5 
GTK_SPIN_USER_DEFINED = 6 

GTK_TEXT_BUFFER_TARGET_INFO_BUFFER_CONTENTS = -1 
GTK_TEXT_BUFFER_TARGET_INFO_RICH_TEXT = -2 
GTK_TEXT_BUFFER_TARGET_INFO_TEXT = -3 

GTK_TEXT_WINDOW_PRIVATE = 0 
GTK_TEXT_WINDOW_WIDGET = 1 
GTK_TEXT_WINDOW_TEXT = 2 
GTK_TEXT_WINDOW_LEFT = 3 
GTK_TEXT_WINDOW_RIGHT = 4 
GTK_TEXT_WINDOW_TOP = 5 
GTK_TEXT_WINDOW_BOTTOM = 6 

GTK_TOOLBAR_SPACE_EMPTY = 0 
GTK_TOOLBAR_SPACE_LINE = 1 

GTK_TOOL_PALETTE_DRAG_ITEMS = 1 
GTK_TOOL_PALETTE_DRAG_GROUPS = 2 

GTK_UI_MANAGER_AUTO = 0 
GTK_UI_MANAGER_MENUBAR = 1 
GTK_UI_MANAGER_MENU = 2 
GTK_UI_MANAGER_TOOLBAR = 4 
GTK_UI_MANAGER_PLACEHOLDER = 8 
GTK_UI_MANAGER_POPUP = 16 
GTK_UI_MANAGER_MENUITEM = 32 
GTK_UI_MANAGER_TOOLITEM = 64 
GTK_UI_MANAGER_SEPARATOR = 128 
GTK_UI_MANAGER_ACCELERATOR = 256 
GTK_UI_MANAGER_POPUP_WITH_ACCELS = 512 

NAUTILUS_FILE_ATTRIBUTE_INFO = 1 
NAUTILUS_FILE_ATTRIBUTE_LINK_INFO = 2 
NAUTILUS_FILE_ATTRIBUTE_DEEP_COUNTS = 4 
NAUTILUS_FILE_ATTRIBUTE_DIRECTORY_ITEM_COUNT = 8 
NAUTILUS_FILE_ATTRIBUTE_DIRECTORY_ITEM_MIME_TYPES = 16 
NAUTILUS_FILE_ATTRIBUTE_TOP_LEFT_TEXT = 32 
NAUTILUS_FILE_ATTRIBUTE_LARGE_TOP_LEFT_TEXT = 64 
NAUTILUS_FILE_ATTRIBUTE_EXTENSION_INFO = 128 
NAUTILUS_FILE_ATTRIBUTE_THUMBNAIL = 256 
NAUTILUS_FILE_ATTRIBUTE_MOUNT = 512 
NAUTILUS_FILE_ATTRIBUTE_FILESYSTEM_INFO = 65536 

NAUTILUS_ZOOM_LEVEL_SMALLEST = 0 
NAUTILUS_ZOOM_LEVEL_SMALLER = 1 
NAUTILUS_ZOOM_LEVEL_SMALL = 2 
NAUTILUS_ZOOM_LEVEL_STANDARD = 3 
NAUTILUS_ZOOM_LEVEL_LARGE = 4 
NAUTILUS_ZOOM_LEVEL_LARGER = 5 
NAUTILUS_ZOOM_LEVEL_LARGEST = 6 

NAUTILUS_FILE_SORT_NONE = 0 
NAUTILUS_FILE_SORT_BY_DISPLAY_NAME = 1 
NAUTILUS_FILE_SORT_BY_SIZE = 2 
NAUTILUS_FILE_SORT_BY_TYPE = 3 
NAUTILUS_FILE_SORT_BY_MTIME = 4 
NAUTILUS_FILE_SORT_BY_ATIME = 5 
NAUTILUS_FILE_SORT_BY_TRASHED_TIME = 6 

NAUTILUS_REQUEST_NOT_STARTED = 0 
NAUTILUS_REQUEST_IN_PROGRESS = 1 
NAUTILUS_REQUEST_DONE = 2 

NAUTILUS_FILE_ICON_FLAGS_NONE = 0 
NAUTILUS_FILE_ICON_FLAGS_USE_THUMBNAILS = 1 
NAUTILUS_FILE_ICON_FLAGS_IGNORE_VISITING = 2 
NAUTILUS_FILE_ICON_FLAGS_EMBEDDING_TEXT = 4 
NAUTILUS_FILE_ICON_FLAGS_FOR_DRAG_ACCEPT = 8 
NAUTILUS_FILE_ICON_FLAGS_FOR_OPEN_FOLDER = 16 
NAUTILUS_FILE_ICON_FLAGS_FORCE_THUMBNAIL_SIZE = 32 
NAUTILUS_FILE_ICON_FLAGS_USE_MOUNT_ICON = 64 
NAUTILUS_FILE_ICON_FLAGS_USE_MOUNT_ICON_AS_EMBLEM = 128 

NAUTILUS_DATE_TYPE_MODIFIED = 0 
NAUTILUS_DATE_TYPE_CHANGED = 1 
NAUTILUS_DATE_TYPE_ACCESSED = 2 
NAUTILUS_DATE_TYPE_PERMISSIONS_CHANGED = 3 
NAUTILUS_DATE_TYPE_TRASHED = 4 

EEL_CANVAS_ITEM_REALIZED = 16 
EEL_CANVAS_ITEM_MAPPED = 32 
EEL_CANVAS_ITEM_ALWAYS_REDRAW = 64 
EEL_CANVAS_ITEM_VISIBLE = 128 
EEL_CANVAS_ITEM_NEED_UPDATE = 256 
EEL_CANVAS_ITEM_NEED_DEEP_UPDATE = 512 

EEL_CANVAS_UPDATE_REQUESTED = 1 
EEL_CANVAS_UPDATE_DEEP = 2 

NAUTILUS_ICON_LAYOUT_L_R_T_B = 0 
NAUTILUS_ICON_LAYOUT_R_L_T_B = 1 
NAUTILUS_ICON_LAYOUT_T_B_L_R = 2 
NAUTILUS_ICON_LAYOUT_T_B_R_L = 3 

NAUTILUS_ICON_LABEL_POSITION_UNDER = 0 
NAUTILUS_ICON_LABEL_POSITION_BESIDE = 1 

NAUTILUS_WINDOW_OPEN_FLAG_CLOSE_BEHIND = 1 
NAUTILUS_WINDOW_OPEN_FLAG_NEW_WINDOW = 2 
NAUTILUS_WINDOW_OPEN_FLAG_NEW_TAB = 4 

NAUTILUS_LOCATION_CHANGE_STANDARD = 0 
NAUTILUS_LOCATION_CHANGE_BACK = 1 
NAUTILUS_LOCATION_CHANGE_FORWARD = 2 
NAUTILUS_LOCATION_CHANGE_RELOAD = 3 

NAUTILUS_WINDOW_SHOW_HIDDEN_FILES_DEFAULT = 0 
NAUTILUS_WINDOW_SHOW_HIDDEN_FILES_ENABLE = 1 
NAUTILUS_WINDOW_SHOW_HIDDEN_FILES_DISABLE = 2 

NAUTILUS_WINDOW_NOT_SHOWN = 0 
NAUTILUS_WINDOW_POSITION_SET = 1 
NAUTILUS_WINDOW_SHOULD_SHOW = 2 

NAUTILUS_WINDOW_OPEN_SLOT_NONE = 0 
NAUTILUS_WINDOW_OPEN_SLOT_APPEND = 1 

NAUTILUS_OPERATION_COMPLETE = 0 
NAUTILUS_OPERATION_FAILED = 1 
NAUTILUS_OPERATION_IN_PROGRESS = 2 

NAUTILUS_DESKTOP_LINK_HOME = 0 
NAUTILUS_DESKTOP_LINK_TRASH = 1 
NAUTILUS_DESKTOP_LINK_MOUNT = 2 
NAUTILUS_DESKTOP_LINK_NETWORK = 3 

XML_BUFFER_ALLOC_DOUBLEIT = 0 
XML_BUFFER_ALLOC_EXACT = 1 
XML_BUFFER_ALLOC_IMMUTABLE = 2 
XML_BUFFER_ALLOC_IO = 3 

XML_ELEMENT_NODE = 1 
XML_ATTRIBUTE_NODE = 2 
XML_TEXT_NODE = 3 
XML_CDATA_SECTION_NODE = 4 
XML_ENTITY_REF_NODE = 5 
XML_ENTITY_NODE = 6 
XML_PI_NODE = 7 
XML_COMMENT_NODE = 8 
XML_DOCUMENT_NODE = 9 
XML_DOCUMENT_TYPE_NODE = 10 
XML_DOCUMENT_FRAG_NODE = 11 
XML_NOTATION_NODE = 12 
XML_HTML_DOCUMENT_NODE = 13 
XML_DTD_NODE = 14 
XML_ELEMENT_DECL = 15 
XML_ATTRIBUTE_DECL = 16 
XML_ENTITY_DECL = 17 
XML_NAMESPACE_DECL = 18 
XML_XINCLUDE_START = 19 
XML_XINCLUDE_END = 20 
XML_DOCB_DOCUMENT_NODE = 21 

XML_ATTRIBUTE_CDATA = 1 
XML_ATTRIBUTE_ID = 2 
XML_ATTRIBUTE_IDREF = 3 
XML_ATTRIBUTE_IDREFS = 4 
XML_ATTRIBUTE_ENTITY = 5 
XML_ATTRIBUTE_ENTITIES = 6 
XML_ATTRIBUTE_NMTOKEN = 7 
XML_ATTRIBUTE_NMTOKENS = 8 
XML_ATTRIBUTE_ENUMERATION = 9 
XML_ATTRIBUTE_NOTATION = 10 

XML_ATTRIBUTE_NONE = 1 
XML_ATTRIBUTE_REQUIRED = 2 
XML_ATTRIBUTE_IMPLIED = 3 
XML_ATTRIBUTE_FIXED = 4 

XML_ELEMENT_CONTENT_PCDATA = 1 
XML_ELEMENT_CONTENT_ELEMENT = 2 
XML_ELEMENT_CONTENT_SEQ = 3 
XML_ELEMENT_CONTENT_OR = 4 

XML_ELEMENT_CONTENT_ONCE = 1 
XML_ELEMENT_CONTENT_OPT = 2 
XML_ELEMENT_CONTENT_MULT = 3 
XML_ELEMENT_CONTENT_PLUS = 4 

XML_ELEMENT_TYPE_UNDEFINED = 0 
XML_ELEMENT_TYPE_EMPTY = 1 
XML_ELEMENT_TYPE_ANY = 2 
XML_ELEMENT_TYPE_MIXED = 3 
XML_ELEMENT_TYPE_ELEMENT = 4 

XML_EXP_EMPTY = 0 
XML_EXP_FORBID = 1 
XML_EXP_ATOM = 2 
XML_EXP_SEQ = 3 
XML_EXP_OR = 4 
XML_EXP_COUNT = 5 

XML_DOC_WELLFORMED = 1 
XML_DOC_NSVALID = 2 
XML_DOC_OLD10 = 4 
XML_DOC_DTDVALID = 8 
XML_DOC_XINCLUDE = 16 
XML_DOC_USERBUILT = 32 
XML_DOC_INTERNAL = 64 
XML_DOC_HTML = 128 

XML_ERR_NONE = 0 
XML_ERR_WARNING = 1 
XML_ERR_ERROR = 2 
XML_ERR_FATAL = 3 

XML_FROM_NONE = 0 
XML_FROM_PARSER = 1 
XML_FROM_TREE = 2 
XML_FROM_NAMESPACE = 3 
XML_FROM_DTD = 4 
XML_FROM_HTML = 5 
XML_FROM_MEMORY = 6 
XML_FROM_OUTPUT = 7 
XML_FROM_IO = 8 
XML_FROM_FTP = 9 
XML_FROM_HTTP = 10 
XML_FROM_XINCLUDE = 11 
XML_FROM_XPATH = 12 
XML_FROM_XPOINTER = 13 
XML_FROM_REGEXP = 14 
XML_FROM_DATATYPE = 15 
XML_FROM_SCHEMASP = 16 
XML_FROM_SCHEMASV = 17 
XML_FROM_RELAXNGP = 18 
XML_FROM_RELAXNGV = 19 
XML_FROM_CATALOG = 20 
XML_FROM_C14N = 21 
XML_FROM_XSLT = 22 
XML_FROM_VALID = 23 
XML_FROM_CHECK = 24 
XML_FROM_WRITER = 25 
XML_FROM_MODULE = 26 
XML_FROM_I18N = 27 
XML_FROM_SCHEMATRONV = 28 

XML_ERR_OK = 0 
XML_ERR_INTERNAL_ERROR = 1 
XML_ERR_NO_MEMORY = 2 
XML_ERR_DOCUMENT_START = 3 
XML_ERR_DOCUMENT_EMPTY = 4 
XML_ERR_DOCUMENT_END = 5 
XML_ERR_INVALID_HEX_CHARREF = 6 
XML_ERR_INVALID_DEC_CHARREF = 7 
XML_ERR_INVALID_CHARREF = 8 
XML_ERR_INVALID_CHAR = 9 
XML_ERR_CHARREF_AT_EOF = 10 
XML_ERR_CHARREF_IN_PROLOG = 11 
XML_ERR_CHARREF_IN_EPILOG = 12 
XML_ERR_CHARREF_IN_DTD = 13 
XML_ERR_ENTITYREF_AT_EOF = 14 
XML_ERR_ENTITYREF_IN_PROLOG = 15 
XML_ERR_ENTITYREF_IN_EPILOG = 16 
XML_ERR_ENTITYREF_IN_DTD = 17 
XML_ERR_PEREF_AT_EOF = 18 
XML_ERR_PEREF_IN_PROLOG = 19 
XML_ERR_PEREF_IN_EPILOG = 20 
XML_ERR_PEREF_IN_INT_SUBSET = 21 
XML_ERR_ENTITYREF_NO_NAME = 22 
XML_ERR_ENTITYREF_SEMICOL_MISSING = 23 
XML_ERR_PEREF_NO_NAME = 24 
XML_ERR_PEREF_SEMICOL_MISSING = 25 
XML_ERR_UNDECLARED_ENTITY = 26 
XML_WAR_UNDECLARED_ENTITY = 27 
XML_ERR_UNPARSED_ENTITY = 28 
XML_ERR_ENTITY_IS_EXTERNAL = 29 
XML_ERR_ENTITY_IS_PARAMETER = 30 
XML_ERR_UNKNOWN_ENCODING = 31 
XML_ERR_UNSUPPORTED_ENCODING = 32 
XML_ERR_STRING_NOT_STARTED = 33 
XML_ERR_STRING_NOT_CLOSED = 34 
XML_ERR_NS_DECL_ERROR = 35 
XML_ERR_ENTITY_NOT_STARTED = 36 
XML_ERR_ENTITY_NOT_FINISHED = 37 
XML_ERR_LT_IN_ATTRIBUTE = 38 
XML_ERR_ATTRIBUTE_NOT_STARTED = 39 
XML_ERR_ATTRIBUTE_NOT_FINISHED = 40 
XML_ERR_ATTRIBUTE_WITHOUT_VALUE = 41 
XML_ERR_ATTRIBUTE_REDEFINED = 42 
XML_ERR_LITERAL_NOT_STARTED = 43 
XML_ERR_LITERAL_NOT_FINISHED = 44 
XML_ERR_COMMENT_NOT_FINISHED = 45 
XML_ERR_PI_NOT_STARTED = 46 
XML_ERR_PI_NOT_FINISHED = 47 
XML_ERR_NOTATION_NOT_STARTED = 48 
XML_ERR_NOTATION_NOT_FINISHED = 49 
XML_ERR_ATTLIST_NOT_STARTED = 50 
XML_ERR_ATTLIST_NOT_FINISHED = 51 
XML_ERR_MIXED_NOT_STARTED = 52 
XML_ERR_MIXED_NOT_FINISHED = 53 
XML_ERR_ELEMCONTENT_NOT_STARTED = 54 
XML_ERR_ELEMCONTENT_NOT_FINISHED = 55 
XML_ERR_XMLDECL_NOT_STARTED = 56 
XML_ERR_XMLDECL_NOT_FINISHED = 57 
XML_ERR_CONDSEC_NOT_STARTED = 58 
XML_ERR_CONDSEC_NOT_FINISHED = 59 
XML_ERR_EXT_SUBSET_NOT_FINISHED = 60 
XML_ERR_DOCTYPE_NOT_FINISHED = 61 
XML_ERR_MISPLACED_CDATA_END = 62 
XML_ERR_CDATA_NOT_FINISHED = 63 
XML_ERR_RESERVED_XML_NAME = 64 
XML_ERR_SPACE_REQUIRED = 65 
XML_ERR_SEPARATOR_REQUIRED = 66 
XML_ERR_NMTOKEN_REQUIRED = 67 
XML_ERR_NAME_REQUIRED = 68 
XML_ERR_PCDATA_REQUIRED = 69 
XML_ERR_URI_REQUIRED = 70 
XML_ERR_PUBID_REQUIRED = 71 
XML_ERR_LT_REQUIRED = 72 
XML_ERR_GT_REQUIRED = 73 
XML_ERR_LTSLASH_REQUIRED = 74 
XML_ERR_EQUAL_REQUIRED = 75 
XML_ERR_TAG_NAME_MISMATCH = 76 
XML_ERR_TAG_NOT_FINISHED = 77 
XML_ERR_STANDALONE_VALUE = 78 
XML_ERR_ENCODING_NAME = 79 
XML_ERR_HYPHEN_IN_COMMENT = 80 
XML_ERR_INVALID_ENCODING = 81 
XML_ERR_EXT_ENTITY_STANDALONE = 82 
XML_ERR_CONDSEC_INVALID = 83 
XML_ERR_VALUE_REQUIRED = 84 
XML_ERR_NOT_WELL_BALANCED = 85 
XML_ERR_EXTRA_CONTENT = 86 
XML_ERR_ENTITY_CHAR_ERROR = 87 
XML_ERR_ENTITY_PE_INTERNAL = 88 
XML_ERR_ENTITY_LOOP = 89 
XML_ERR_ENTITY_BOUNDARY = 90 
XML_ERR_INVALID_URI = 91 
XML_ERR_URI_FRAGMENT = 92 
XML_WAR_CATALOG_PI = 93 
XML_ERR_NO_DTD = 94 
XML_ERR_CONDSEC_INVALID_KEYWORD = 95 
XML_ERR_VERSION_MISSING = 96 
XML_WAR_UNKNOWN_VERSION = 97 
XML_WAR_LANG_VALUE = 98 
XML_WAR_NS_URI = 99 
XML_WAR_NS_URI_RELATIVE = 100 
XML_ERR_MISSING_ENCODING = 101 
XML_WAR_SPACE_VALUE = 102 
XML_ERR_NOT_STANDALONE = 103 
XML_ERR_ENTITY_PROCESSING = 104 
XML_ERR_NOTATION_PROCESSING = 105 
XML_WAR_NS_COLUMN = 106 
XML_WAR_ENTITY_REDEFINED = 107 
XML_ERR_UNKNOWN_VERSION = 108 
XML_ERR_VERSION_MISMATCH = 109 
XML_NS_ERR_XML_NAMESPACE = 200 
XML_NS_ERR_UNDEFINED_NAMESPACE = 201 
XML_NS_ERR_QNAME = 202 
XML_NS_ERR_ATTRIBUTE_REDEFINED = 203 
XML_NS_ERR_EMPTY = 204 
XML_NS_ERR_COLON = 205 
XML_DTD_ATTRIBUTE_DEFAULT = 500 
XML_DTD_ATTRIBUTE_REDEFINED = 501 
XML_DTD_ATTRIBUTE_VALUE = 502 
XML_DTD_CONTENT_ERROR = 503 
XML_DTD_CONTENT_MODEL = 504 
XML_DTD_CONTENT_NOT_DETERMINIST = 505 
XML_DTD_DIFFERENT_PREFIX = 506 
XML_DTD_ELEM_DEFAULT_NAMESPACE = 507 
XML_DTD_ELEM_NAMESPACE = 508 
XML_DTD_ELEM_REDEFINED = 509 
XML_DTD_EMPTY_NOTATION = 510 
XML_DTD_ENTITY_TYPE = 511 
XML_DTD_ID_FIXED = 512 
XML_DTD_ID_REDEFINED = 513 
XML_DTD_ID_SUBSET = 514 
XML_DTD_INVALID_CHILD = 515 
XML_DTD_INVALID_DEFAULT = 516 
XML_DTD_LOAD_ERROR = 517 
XML_DTD_MISSING_ATTRIBUTE = 518 
XML_DTD_MIXED_CORRUPT = 519 
XML_DTD_MULTIPLE_ID = 520 
XML_DTD_NO_DOC = 521 
XML_DTD_NO_DTD = 522 
XML_DTD_NO_ELEM_NAME = 523 
XML_DTD_NO_PREFIX = 524 
XML_DTD_NO_ROOT = 525 
XML_DTD_NOTATION_REDEFINED = 526 
XML_DTD_NOTATION_VALUE = 527 
XML_DTD_NOT_EMPTY = 528 
XML_DTD_NOT_PCDATA = 529 
XML_DTD_NOT_STANDALONE = 530 
XML_DTD_ROOT_NAME = 531 
XML_DTD_STANDALONE_WHITE_SPACE = 532 
XML_DTD_UNKNOWN_ATTRIBUTE = 533 
XML_DTD_UNKNOWN_ELEM = 534 
XML_DTD_UNKNOWN_ENTITY = 535 
XML_DTD_UNKNOWN_ID = 536 
XML_DTD_UNKNOWN_NOTATION = 537 
XML_DTD_STANDALONE_DEFAULTED = 538 
XML_DTD_XMLID_VALUE = 539 
XML_DTD_XMLID_TYPE = 540 
XML_DTD_DUP_TOKEN = 541 
XML_HTML_STRUCURE_ERROR = 800 
XML_HTML_UNKNOWN_TAG = 801 
XML_RNGP_ANYNAME_ATTR_ANCESTOR = 1000 
XML_RNGP_ATTR_CONFLICT = 1001 
XML_RNGP_ATTRIBUTE_CHILDREN = 1002 
XML_RNGP_ATTRIBUTE_CONTENT = 1003 
XML_RNGP_ATTRIBUTE_EMPTY = 1004 
XML_RNGP_ATTRIBUTE_NOOP = 1005 
XML_RNGP_CHOICE_CONTENT = 1006 
XML_RNGP_CHOICE_EMPTY = 1007 
XML_RNGP_CREATE_FAILURE = 1008 
XML_RNGP_DATA_CONTENT = 1009 
XML_RNGP_DEF_CHOICE_AND_INTERLEAVE = 1010 
XML_RNGP_DEFINE_CREATE_FAILED = 1011 
XML_RNGP_DEFINE_EMPTY = 1012 
XML_RNGP_DEFINE_MISSING = 1013 
XML_RNGP_DEFINE_NAME_MISSING = 1014 
XML_RNGP_ELEM_CONTENT_EMPTY = 1015 
XML_RNGP_ELEM_CONTENT_ERROR = 1016 
XML_RNGP_ELEMENT_EMPTY = 1017 
XML_RNGP_ELEMENT_CONTENT = 1018 
XML_RNGP_ELEMENT_NAME = 1019 
XML_RNGP_ELEMENT_NO_CONTENT = 1020 
XML_RNGP_ELEM_TEXT_CONFLICT = 1021 
XML_RNGP_EMPTY = 1022 
XML_RNGP_EMPTY_CONSTRUCT = 1023 
XML_RNGP_EMPTY_CONTENT = 1024 
XML_RNGP_EMPTY_NOT_EMPTY = 1025 
XML_RNGP_ERROR_TYPE_LIB = 1026 
XML_RNGP_EXCEPT_EMPTY = 1027 
XML_RNGP_EXCEPT_MISSING = 1028 
XML_RNGP_EXCEPT_MULTIPLE = 1029 
XML_RNGP_EXCEPT_NO_CONTENT = 1030 
XML_RNGP_EXTERNALREF_EMTPY = 1031 
XML_RNGP_EXTERNAL_REF_FAILURE = 1032 
XML_RNGP_EXTERNALREF_RECURSE = 1033 
XML_RNGP_FORBIDDEN_ATTRIBUTE = 1034 
XML_RNGP_FOREIGN_ELEMENT = 1035 
XML_RNGP_GRAMMAR_CONTENT = 1036 
XML_RNGP_GRAMMAR_EMPTY = 1037 
XML_RNGP_GRAMMAR_MISSING = 1038 
XML_RNGP_GRAMMAR_NO_START = 1039 
XML_RNGP_GROUP_ATTR_CONFLICT = 1040 
XML_RNGP_HREF_ERROR = 1041 
XML_RNGP_INCLUDE_EMPTY = 1042 
XML_RNGP_INCLUDE_FAILURE = 1043 
XML_RNGP_INCLUDE_RECURSE = 1044 
XML_RNGP_INTERLEAVE_ADD = 1045 
XML_RNGP_INTERLEAVE_CREATE_FAILED = 1046 
XML_RNGP_INTERLEAVE_EMPTY = 1047 
XML_RNGP_INTERLEAVE_NO_CONTENT = 1048 
XML_RNGP_INVALID_DEFINE_NAME = 1049 
XML_RNGP_INVALID_URI = 1050 
XML_RNGP_INVALID_VALUE = 1051 
XML_RNGP_MISSING_HREF = 1052 
XML_RNGP_NAME_MISSING = 1053 
XML_RNGP_NEED_COMBINE = 1054 
XML_RNGP_NOTALLOWED_NOT_EMPTY = 1055 
XML_RNGP_NSNAME_ATTR_ANCESTOR = 1056 
XML_RNGP_NSNAME_NO_NS = 1057 
XML_RNGP_PARAM_FORBIDDEN = 1058 
XML_RNGP_PARAM_NAME_MISSING = 1059 
XML_RNGP_PARENTREF_CREATE_FAILED = 1060 
XML_RNGP_PARENTREF_NAME_INVALID = 1061 
XML_RNGP_PARENTREF_NO_NAME = 1062 
XML_RNGP_PARENTREF_NO_PARENT = 1063 
XML_RNGP_PARENTREF_NOT_EMPTY = 1064 
XML_RNGP_PARSE_ERROR = 1065 
XML_RNGP_PAT_ANYNAME_EXCEPT_ANYNAME = 1066 
XML_RNGP_PAT_ATTR_ATTR = 1067 
XML_RNGP_PAT_ATTR_ELEM = 1068 
XML_RNGP_PAT_DATA_EXCEPT_ATTR = 1069 
XML_RNGP_PAT_DATA_EXCEPT_ELEM = 1070 
XML_RNGP_PAT_DATA_EXCEPT_EMPTY = 1071 
XML_RNGP_PAT_DATA_EXCEPT_GROUP = 1072 
XML_RNGP_PAT_DATA_EXCEPT_INTERLEAVE = 1073 
XML_RNGP_PAT_DATA_EXCEPT_LIST = 1074 
XML_RNGP_PAT_DATA_EXCEPT_ONEMORE = 1075 
XML_RNGP_PAT_DATA_EXCEPT_REF = 1076 
XML_RNGP_PAT_DATA_EXCEPT_TEXT = 1077 
XML_RNGP_PAT_LIST_ATTR = 1078 
XML_RNGP_PAT_LIST_ELEM = 1079 
XML_RNGP_PAT_LIST_INTERLEAVE = 1080 
XML_RNGP_PAT_LIST_LIST = 1081 
XML_RNGP_PAT_LIST_REF = 1082 
XML_RNGP_PAT_LIST_TEXT = 1083 
XML_RNGP_PAT_NSNAME_EXCEPT_ANYNAME = 1084 
XML_RNGP_PAT_NSNAME_EXCEPT_NSNAME = 1085 
XML_RNGP_PAT_ONEMORE_GROUP_ATTR = 1086 
XML_RNGP_PAT_ONEMORE_INTERLEAVE_ATTR = 1087 
XML_RNGP_PAT_START_ATTR = 1088 
XML_RNGP_PAT_START_DATA = 1089 
XML_RNGP_PAT_START_EMPTY = 1090 
XML_RNGP_PAT_START_GROUP = 1091 
XML_RNGP_PAT_START_INTERLEAVE = 1092 
XML_RNGP_PAT_START_LIST = 1093 
XML_RNGP_PAT_START_ONEMORE = 1094 
XML_RNGP_PAT_START_TEXT = 1095 
XML_RNGP_PAT_START_VALUE = 1096 
XML_RNGP_PREFIX_UNDEFINED = 1097 
XML_RNGP_REF_CREATE_FAILED = 1098 
XML_RNGP_REF_CYCLE = 1099 
XML_RNGP_REF_NAME_INVALID = 1100 
XML_RNGP_REF_NO_DEF = 1101 
XML_RNGP_REF_NO_NAME = 1102 
XML_RNGP_REF_NOT_EMPTY = 1103 
XML_RNGP_START_CHOICE_AND_INTERLEAVE = 1104 
XML_RNGP_START_CONTENT = 1105 
XML_RNGP_START_EMPTY = 1106 
XML_RNGP_START_MISSING = 1107 
XML_RNGP_TEXT_EXPECTED = 1108 
XML_RNGP_TEXT_HAS_CHILD = 1109 
XML_RNGP_TYPE_MISSING = 1110 
XML_RNGP_TYPE_NOT_FOUND = 1111 
XML_RNGP_TYPE_VALUE = 1112 
XML_RNGP_UNKNOWN_ATTRIBUTE = 1113 
XML_RNGP_UNKNOWN_COMBINE = 1114 
XML_RNGP_UNKNOWN_CONSTRUCT = 1115 
XML_RNGP_UNKNOWN_TYPE_LIB = 1116 
XML_RNGP_URI_FRAGMENT = 1117 
XML_RNGP_URI_NOT_ABSOLUTE = 1118 
XML_RNGP_VALUE_EMPTY = 1119 
XML_RNGP_VALUE_NO_CONTENT = 1120 
XML_RNGP_XMLNS_NAME = 1121 
XML_RNGP_XML_NS = 1122 
XML_XPATH_EXPRESSION_OK = 1200 
XML_XPATH_NUMBER_ERROR = 1201 
XML_XPATH_UNFINISHED_LITERAL_ERROR = 1202 
XML_XPATH_START_LITERAL_ERROR = 1203 
XML_XPATH_VARIABLE_REF_ERROR = 1204 
XML_XPATH_UNDEF_VARIABLE_ERROR = 1205 
XML_XPATH_INVALID_PREDICATE_ERROR = 1206 
XML_XPATH_EXPR_ERROR = 1207 
XML_XPATH_UNCLOSED_ERROR = 1208 
XML_XPATH_UNKNOWN_FUNC_ERROR = 1209 
XML_XPATH_INVALID_OPERAND = 1210 
XML_XPATH_INVALID_TYPE = 1211 
XML_XPATH_INVALID_ARITY = 1212 
XML_XPATH_INVALID_CTXT_SIZE = 1213 
XML_XPATH_INVALID_CTXT_POSITION = 1214 
XML_XPATH_MEMORY_ERROR = 1215 
XML_XPTR_SYNTAX_ERROR = 1216 
XML_XPTR_RESOURCE_ERROR = 1217 
XML_XPTR_SUB_RESOURCE_ERROR = 1218 
XML_XPATH_UNDEF_PREFIX_ERROR = 1219 
XML_XPATH_ENCODING_ERROR = 1220 
XML_XPATH_INVALID_CHAR_ERROR = 1221 
XML_TREE_INVALID_HEX = 1300 
XML_TREE_INVALID_DEC = 1301 
XML_TREE_UNTERMINATED_ENTITY = 1302 
XML_TREE_NOT_UTF8 = 1303 
XML_SAVE_NOT_UTF8 = 1400 
XML_SAVE_CHAR_INVALID = 1401 
XML_SAVE_NO_DOCTYPE = 1402 
XML_SAVE_UNKNOWN_ENCODING = 1403 
XML_REGEXP_COMPILE_ERROR = 1450 
XML_IO_UNKNOWN = 1500 
XML_IO_EACCES = 1501 
XML_IO_EAGAIN = 1502 
XML_IO_EBADF = 1503 
XML_IO_EBADMSG = 1504 
XML_IO_EBUSY = 1505 
XML_IO_ECANCELED = 1506 
XML_IO_ECHILD = 1507 
XML_IO_EDEADLK = 1508 
XML_IO_EDOM = 1509 
XML_IO_EEXIST = 1510 
XML_IO_EFAULT = 1511 
XML_IO_EFBIG = 1512 
XML_IO_EINPROGRESS = 1513 
XML_IO_EINTR = 1514 
XML_IO_EINVAL = 1515 
XML_IO_EIO = 1516 
XML_IO_EISDIR = 1517 
XML_IO_EMFILE = 1518 
XML_IO_EMLINK = 1519 
XML_IO_EMSGSIZE = 1520 
XML_IO_ENAMETOOLONG = 1521 
XML_IO_ENFILE = 1522 
XML_IO_ENODEV = 1523 
XML_IO_ENOENT = 1524 
XML_IO_ENOEXEC = 1525 
XML_IO_ENOLCK = 1526 
XML_IO_ENOMEM = 1527 
XML_IO_ENOSPC = 1528 
XML_IO_ENOSYS = 1529 
XML_IO_ENOTDIR = 1530 
XML_IO_ENOTEMPTY = 1531 
XML_IO_ENOTSUP = 1532 
XML_IO_ENOTTY = 1533 
XML_IO_ENXIO = 1534 
XML_IO_EPERM = 1535 
XML_IO_EPIPE = 1536 
XML_IO_ERANGE = 1537 
XML_IO_EROFS = 1538 
XML_IO_ESPIPE = 1539 
XML_IO_ESRCH = 1540 
XML_IO_ETIMEDOUT = 1541 
XML_IO_EXDEV = 1542 
XML_IO_NETWORK_ATTEMPT = 1543 
XML_IO_ENCODER = 1544 
XML_IO_FLUSH = 1545 
XML_IO_WRITE = 1546 
XML_IO_NO_INPUT = 1547 
XML_IO_BUFFER_FULL = 1548 
XML_IO_LOAD_ERROR = 1549 
XML_IO_ENOTSOCK = 1550 
XML_IO_EISCONN = 1551 
XML_IO_ECONNREFUSED = 1552 
XML_IO_ENETUNREACH = 1553 
XML_IO_EADDRINUSE = 1554 
XML_IO_EALREADY = 1555 
XML_IO_EAFNOSUPPORT = 1556 
XML_XINCLUDE_RECURSION = 1600 
XML_XINCLUDE_PARSE_VALUE = 1601 
XML_XINCLUDE_ENTITY_DEF_MISMATCH = 1602 
XML_XINCLUDE_NO_HREF = 1603 
XML_XINCLUDE_NO_FALLBACK = 1604 
XML_XINCLUDE_HREF_URI = 1605 
XML_XINCLUDE_TEXT_FRAGMENT = 1606 
XML_XINCLUDE_TEXT_DOCUMENT = 1607 
XML_XINCLUDE_INVALID_CHAR = 1608 
XML_XINCLUDE_BUILD_FAILED = 1609 
XML_XINCLUDE_UNKNOWN_ENCODING = 1610 
XML_XINCLUDE_MULTIPLE_ROOT = 1611 
XML_XINCLUDE_XPTR_FAILED = 1612 
XML_XINCLUDE_XPTR_RESULT = 1613 
XML_XINCLUDE_INCLUDE_IN_INCLUDE = 1614 
XML_XINCLUDE_FALLBACKS_IN_INCLUDE = 1615 
XML_XINCLUDE_FALLBACK_NOT_IN_INCLUDE = 1616 
XML_XINCLUDE_DEPRECATED_NS = 1617 
XML_XINCLUDE_FRAGMENT_ID = 1618 
XML_CATALOG_MISSING_ATTR = 1650 
XML_CATALOG_ENTRY_BROKEN = 1651 
XML_CATALOG_PREFER_VALUE = 1652 
XML_CATALOG_NOT_CATALOG = 1653 
XML_CATALOG_RECURSION = 1654 
XML_SCHEMAP_PREFIX_UNDEFINED = 1700 
XML_SCHEMAP_ATTRFORMDEFAULT_VALUE = 1701 
XML_SCHEMAP_ATTRGRP_NONAME_NOREF = 1702 
XML_SCHEMAP_ATTR_NONAME_NOREF = 1703 
XML_SCHEMAP_COMPLEXTYPE_NONAME_NOREF = 1704 
XML_SCHEMAP_ELEMFORMDEFAULT_VALUE = 1705 
XML_SCHEMAP_ELEM_NONAME_NOREF = 1706 
XML_SCHEMAP_EXTENSION_NO_BASE = 1707 
XML_SCHEMAP_FACET_NO_VALUE = 1708 
XML_SCHEMAP_FAILED_BUILD_IMPORT = 1709 
XML_SCHEMAP_GROUP_NONAME_NOREF = 1710 
XML_SCHEMAP_IMPORT_NAMESPACE_NOT_URI = 1711 
XML_SCHEMAP_IMPORT_REDEFINE_NSNAME = 1712 
XML_SCHEMAP_IMPORT_SCHEMA_NOT_URI = 1713 
XML_SCHEMAP_INVALID_BOOLEAN = 1714 
XML_SCHEMAP_INVALID_ENUM = 1715 
XML_SCHEMAP_INVALID_FACET = 1716 
XML_SCHEMAP_INVALID_FACET_VALUE = 1717 
XML_SCHEMAP_INVALID_MAXOCCURS = 1718 
XML_SCHEMAP_INVALID_MINOCCURS = 1719 
XML_SCHEMAP_INVALID_REF_AND_SUBTYPE = 1720 
XML_SCHEMAP_INVALID_WHITE_SPACE = 1721 
XML_SCHEMAP_NOATTR_NOREF = 1722 
XML_SCHEMAP_NOTATION_NO_NAME = 1723 
XML_SCHEMAP_NOTYPE_NOREF = 1724 
XML_SCHEMAP_REF_AND_SUBTYPE = 1725 
XML_SCHEMAP_RESTRICTION_NONAME_NOREF = 1726 
XML_SCHEMAP_SIMPLETYPE_NONAME = 1727 
XML_SCHEMAP_TYPE_AND_SUBTYPE = 1728 
XML_SCHEMAP_UNKNOWN_ALL_CHILD = 1729 
XML_SCHEMAP_UNKNOWN_ANYATTRIBUTE_CHILD = 1730 
XML_SCHEMAP_UNKNOWN_ATTR_CHILD = 1731 
XML_SCHEMAP_UNKNOWN_ATTRGRP_CHILD = 1732 
XML_SCHEMAP_UNKNOWN_ATTRIBUTE_GROUP = 1733 
XML_SCHEMAP_UNKNOWN_BASE_TYPE = 1734 
XML_SCHEMAP_UNKNOWN_CHOICE_CHILD = 1735 
XML_SCHEMAP_UNKNOWN_COMPLEXCONTENT_CHILD = 1736 
XML_SCHEMAP_UNKNOWN_COMPLEXTYPE_CHILD = 1737 
XML_SCHEMAP_UNKNOWN_ELEM_CHILD = 1738 
XML_SCHEMAP_UNKNOWN_EXTENSION_CHILD = 1739 
XML_SCHEMAP_UNKNOWN_FACET_CHILD = 1740 
XML_SCHEMAP_UNKNOWN_FACET_TYPE = 1741 
XML_SCHEMAP_UNKNOWN_GROUP_CHILD = 1742 
XML_SCHEMAP_UNKNOWN_IMPORT_CHILD = 1743 
XML_SCHEMAP_UNKNOWN_LIST_CHILD = 1744 
XML_SCHEMAP_UNKNOWN_NOTATION_CHILD = 1745 
XML_SCHEMAP_UNKNOWN_PROCESSCONTENT_CHILD = 1746 
XML_SCHEMAP_UNKNOWN_REF = 1747 
XML_SCHEMAP_UNKNOWN_RESTRICTION_CHILD = 1748 
XML_SCHEMAP_UNKNOWN_SCHEMAS_CHILD = 1749 
XML_SCHEMAP_UNKNOWN_SEQUENCE_CHILD = 1750 
XML_SCHEMAP_UNKNOWN_SIMPLECONTENT_CHILD = 1751 
XML_SCHEMAP_UNKNOWN_SIMPLETYPE_CHILD = 1752 
XML_SCHEMAP_UNKNOWN_TYPE = 1753 
XML_SCHEMAP_UNKNOWN_UNION_CHILD = 1754 
XML_SCHEMAP_ELEM_DEFAULT_FIXED = 1755 
XML_SCHEMAP_REGEXP_INVALID = 1756 
XML_SCHEMAP_FAILED_LOAD = 1757 
XML_SCHEMAP_NOTHING_TO_PARSE = 1758 
XML_SCHEMAP_NOROOT = 1759 
XML_SCHEMAP_REDEFINED_GROUP = 1760 
XML_SCHEMAP_REDEFINED_TYPE = 1761 
XML_SCHEMAP_REDEFINED_ELEMENT = 1762 
XML_SCHEMAP_REDEFINED_ATTRGROUP = 1763 
XML_SCHEMAP_REDEFINED_ATTR = 1764 
XML_SCHEMAP_REDEFINED_NOTATION = 1765 
XML_SCHEMAP_FAILED_PARSE = 1766 
XML_SCHEMAP_UNKNOWN_PREFIX = 1767 
XML_SCHEMAP_DEF_AND_PREFIX = 1768 
XML_SCHEMAP_UNKNOWN_INCLUDE_CHILD = 1769 
XML_SCHEMAP_INCLUDE_SCHEMA_NOT_URI = 1770 
XML_SCHEMAP_INCLUDE_SCHEMA_NO_URI = 1771 
XML_SCHEMAP_NOT_SCHEMA = 1772 
XML_SCHEMAP_UNKNOWN_MEMBER_TYPE = 1773 
XML_SCHEMAP_INVALID_ATTR_USE = 1774 
XML_SCHEMAP_RECURSIVE = 1775 
XML_SCHEMAP_SUPERNUMEROUS_LIST_ITEM_TYPE = 1776 
XML_SCHEMAP_INVALID_ATTR_COMBINATION = 1777 
XML_SCHEMAP_INVALID_ATTR_INLINE_COMBINATION = 1778 
XML_SCHEMAP_MISSING_SIMPLETYPE_CHILD = 1779 
XML_SCHEMAP_INVALID_ATTR_NAME = 1780 
XML_SCHEMAP_REF_AND_CONTENT = 1781 
XML_SCHEMAP_CT_PROPS_CORRECT_1 = 1782 
XML_SCHEMAP_CT_PROPS_CORRECT_2 = 1783 
XML_SCHEMAP_CT_PROPS_CORRECT_3 = 1784 
XML_SCHEMAP_CT_PROPS_CORRECT_4 = 1785 
XML_SCHEMAP_CT_PROPS_CORRECT_5 = 1786 
XML_SCHEMAP_DERIVATION_OK_RESTRICTION_1 = 1787 
XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_1 = 1788 
XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_2 = 1789 
XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_2 = 1790 
XML_SCHEMAP_DERIVATION_OK_RESTRICTION_3 = 1791 
XML_SCHEMAP_WILDCARD_INVALID_NS_MEMBER = 1792 
XML_SCHEMAP_INTERSECTION_NOT_EXPRESSIBLE = 1793 
XML_SCHEMAP_UNION_NOT_EXPRESSIBLE = 1794 
XML_SCHEMAP_SRC_IMPORT_3_1 = 1795 
XML_SCHEMAP_SRC_IMPORT_3_2 = 1796 
XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_1 = 1797 
XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_2 = 1798 
XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_3 = 1799 
XML_SCHEMAP_COS_CT_EXTENDS_1_3 = 1800 
XML_SCHEMAV_NOROOT = 1801 
XML_SCHEMAV_UNDECLAREDELEM = 1802 
XML_SCHEMAV_NOTTOPLEVEL = 1803 
XML_SCHEMAV_MISSING = 1804 
XML_SCHEMAV_WRONGELEM = 1805 
XML_SCHEMAV_NOTYPE = 1806 
XML_SCHEMAV_NOROLLBACK = 1807 
XML_SCHEMAV_ISABSTRACT = 1808 
XML_SCHEMAV_NOTEMPTY = 1809 
XML_SCHEMAV_ELEMCONT = 1810 
XML_SCHEMAV_HAVEDEFAULT = 1811 
XML_SCHEMAV_NOTNILLABLE = 1812 
XML_SCHEMAV_EXTRACONTENT = 1813 
XML_SCHEMAV_INVALIDATTR = 1814 
XML_SCHEMAV_INVALIDELEM = 1815 
XML_SCHEMAV_NOTDETERMINIST = 1816 
XML_SCHEMAV_CONSTRUCT = 1817 
XML_SCHEMAV_INTERNAL = 1818 
XML_SCHEMAV_NOTSIMPLE = 1819 
XML_SCHEMAV_ATTRUNKNOWN = 1820 
XML_SCHEMAV_ATTRINVALID = 1821 
XML_SCHEMAV_VALUE = 1822 
XML_SCHEMAV_FACET = 1823 
XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_1 = 1824 
XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_2 = 1825 
XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_3 = 1826 
XML_SCHEMAV_CVC_TYPE_3_1_1 = 1827 
XML_SCHEMAV_CVC_TYPE_3_1_2 = 1828 
XML_SCHEMAV_CVC_FACET_VALID = 1829 
XML_SCHEMAV_CVC_LENGTH_VALID = 1830 
XML_SCHEMAV_CVC_MINLENGTH_VALID = 1831 
XML_SCHEMAV_CVC_MAXLENGTH_VALID = 1832 
XML_SCHEMAV_CVC_MININCLUSIVE_VALID = 1833 
XML_SCHEMAV_CVC_MAXINCLUSIVE_VALID = 1834 
XML_SCHEMAV_CVC_MINEXCLUSIVE_VALID = 1835 
XML_SCHEMAV_CVC_MAXEXCLUSIVE_VALID = 1836 
XML_SCHEMAV_CVC_TOTALDIGITS_VALID = 1837 
XML_SCHEMAV_CVC_FRACTIONDIGITS_VALID = 1838 
XML_SCHEMAV_CVC_PATTERN_VALID = 1839 
XML_SCHEMAV_CVC_ENUMERATION_VALID = 1840 
XML_SCHEMAV_CVC_COMPLEX_TYPE_2_1 = 1841 
XML_SCHEMAV_CVC_COMPLEX_TYPE_2_2 = 1842 
XML_SCHEMAV_CVC_COMPLEX_TYPE_2_3 = 1843 
XML_SCHEMAV_CVC_COMPLEX_TYPE_2_4 = 1844 
XML_SCHEMAV_CVC_ELT_1 = 1845 
XML_SCHEMAV_CVC_ELT_2 = 1846 
XML_SCHEMAV_CVC_ELT_3_1 = 1847 
XML_SCHEMAV_CVC_ELT_3_2_1 = 1848 
XML_SCHEMAV_CVC_ELT_3_2_2 = 1849 
XML_SCHEMAV_CVC_ELT_4_1 = 1850 
XML_SCHEMAV_CVC_ELT_4_2 = 1851 
XML_SCHEMAV_CVC_ELT_4_3 = 1852 
XML_SCHEMAV_CVC_ELT_5_1_1 = 1853 
XML_SCHEMAV_CVC_ELT_5_1_2 = 1854 
XML_SCHEMAV_CVC_ELT_5_2_1 = 1855 
XML_SCHEMAV_CVC_ELT_5_2_2_1 = 1856 
XML_SCHEMAV_CVC_ELT_5_2_2_2_1 = 1857 
XML_SCHEMAV_CVC_ELT_5_2_2_2_2 = 1858 
XML_SCHEMAV_CVC_ELT_6 = 1859 
XML_SCHEMAV_CVC_ELT_7 = 1860 
XML_SCHEMAV_CVC_ATTRIBUTE_1 = 1861 
XML_SCHEMAV_CVC_ATTRIBUTE_2 = 1862 
XML_SCHEMAV_CVC_ATTRIBUTE_3 = 1863 
XML_SCHEMAV_CVC_ATTRIBUTE_4 = 1864 
XML_SCHEMAV_CVC_COMPLEX_TYPE_3_1 = 1865 
XML_SCHEMAV_CVC_COMPLEX_TYPE_3_2_1 = 1866 
XML_SCHEMAV_CVC_COMPLEX_TYPE_3_2_2 = 1867 
XML_SCHEMAV_CVC_COMPLEX_TYPE_4 = 1868 
XML_SCHEMAV_CVC_COMPLEX_TYPE_5_1 = 1869 
XML_SCHEMAV_CVC_COMPLEX_TYPE_5_2 = 1870 
XML_SCHEMAV_ELEMENT_CONTENT = 1871 
XML_SCHEMAV_DOCUMENT_ELEMENT_MISSING = 1872 
XML_SCHEMAV_CVC_COMPLEX_TYPE_1 = 1873 
XML_SCHEMAV_CVC_AU = 1874 
XML_SCHEMAV_CVC_TYPE_1 = 1875 
XML_SCHEMAV_CVC_TYPE_2 = 1876 
XML_SCHEMAV_CVC_IDC = 1877 
XML_SCHEMAV_CVC_WILDCARD = 1878 
XML_SCHEMAV_MISC = 1879 
XML_XPTR_UNKNOWN_SCHEME = 1900 
XML_XPTR_CHILDSEQ_START = 1901 
XML_XPTR_EVAL_FAILED = 1902 
XML_XPTR_EXTRA_OBJECTS = 1903 
XML_C14N_CREATE_CTXT = 1950 
XML_C14N_REQUIRES_UTF8 = 1951 
XML_C14N_CREATE_STACK = 1952 
XML_C14N_INVALID_NODE = 1953 
XML_C14N_UNKNOW_NODE = 1954 
XML_C14N_RELATIVE_NAMESPACE = 1955 
XML_FTP_PASV_ANSWER = 2000 
XML_FTP_EPSV_ANSWER = 2001 
XML_FTP_ACCNT = 2002 
XML_FTP_URL_SYNTAX = 2003 
XML_HTTP_URL_SYNTAX = 2020 
XML_HTTP_USE_IP = 2021 
XML_HTTP_UNKNOWN_HOST = 2022 
XML_SCHEMAP_SRC_SIMPLE_TYPE_1 = 3000 
XML_SCHEMAP_SRC_SIMPLE_TYPE_2 = 3001 
XML_SCHEMAP_SRC_SIMPLE_TYPE_3 = 3002 
XML_SCHEMAP_SRC_SIMPLE_TYPE_4 = 3003 
XML_SCHEMAP_SRC_RESOLVE = 3004 
XML_SCHEMAP_SRC_RESTRICTION_BASE_OR_SIMPLETYPE = 3005 
XML_SCHEMAP_SRC_LIST_ITEMTYPE_OR_SIMPLETYPE = 3006 
XML_SCHEMAP_SRC_UNION_MEMBERTYPES_OR_SIMPLETYPES = 3007 
XML_SCHEMAP_ST_PROPS_CORRECT_1 = 3008 
XML_SCHEMAP_ST_PROPS_CORRECT_2 = 3009 
XML_SCHEMAP_ST_PROPS_CORRECT_3 = 3010 
XML_SCHEMAP_COS_ST_RESTRICTS_1_1 = 3011 
XML_SCHEMAP_COS_ST_RESTRICTS_1_2 = 3012 
XML_SCHEMAP_COS_ST_RESTRICTS_1_3_1 = 3013 
XML_SCHEMAP_COS_ST_RESTRICTS_1_3_2 = 3014 
XML_SCHEMAP_COS_ST_RESTRICTS_2_1 = 3015 
XML_SCHEMAP_COS_ST_RESTRICTS_2_3_1_1 = 3016 
XML_SCHEMAP_COS_ST_RESTRICTS_2_3_1_2 = 3017 
XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_1 = 3018 
XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_2 = 3019 
XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_3 = 3020 
XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_4 = 3021 
XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_5 = 3022 
XML_SCHEMAP_COS_ST_RESTRICTS_3_1 = 3023 
XML_SCHEMAP_COS_ST_RESTRICTS_3_3_1 = 3024 
XML_SCHEMAP_COS_ST_RESTRICTS_3_3_1_2 = 3025 
XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_2 = 3026 
XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_1 = 3027 
XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_3 = 3028 
XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_4 = 3029 
XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_5 = 3030 
XML_SCHEMAP_COS_ST_DERIVED_OK_2_1 = 3031 
XML_SCHEMAP_COS_ST_DERIVED_OK_2_2 = 3032 
XML_SCHEMAP_S4S_ELEM_NOT_ALLOWED = 3033 
XML_SCHEMAP_S4S_ELEM_MISSING = 3034 
XML_SCHEMAP_S4S_ATTR_NOT_ALLOWED = 3035 
XML_SCHEMAP_S4S_ATTR_MISSING = 3036 
XML_SCHEMAP_S4S_ATTR_INVALID_VALUE = 3037 
XML_SCHEMAP_SRC_ELEMENT_1 = 3038 
XML_SCHEMAP_SRC_ELEMENT_2_1 = 3039 
XML_SCHEMAP_SRC_ELEMENT_2_2 = 3040 
XML_SCHEMAP_SRC_ELEMENT_3 = 3041 
XML_SCHEMAP_P_PROPS_CORRECT_1 = 3042 
XML_SCHEMAP_P_PROPS_CORRECT_2_1 = 3043 
XML_SCHEMAP_P_PROPS_CORRECT_2_2 = 3044 
XML_SCHEMAP_E_PROPS_CORRECT_2 = 3045 
XML_SCHEMAP_E_PROPS_CORRECT_3 = 3046 
XML_SCHEMAP_E_PROPS_CORRECT_4 = 3047 
XML_SCHEMAP_E_PROPS_CORRECT_5 = 3048 
XML_SCHEMAP_E_PROPS_CORRECT_6 = 3049 
XML_SCHEMAP_SRC_INCLUDE = 3050 
XML_SCHEMAP_SRC_ATTRIBUTE_1 = 3051 
XML_SCHEMAP_SRC_ATTRIBUTE_2 = 3052 
XML_SCHEMAP_SRC_ATTRIBUTE_3_1 = 3053 
XML_SCHEMAP_SRC_ATTRIBUTE_3_2 = 3054 
XML_SCHEMAP_SRC_ATTRIBUTE_4 = 3055 
XML_SCHEMAP_NO_XMLNS = 3056 
XML_SCHEMAP_NO_XSI = 3057 
XML_SCHEMAP_COS_VALID_DEFAULT_1 = 3058 
XML_SCHEMAP_COS_VALID_DEFAULT_2_1 = 3059 
XML_SCHEMAP_COS_VALID_DEFAULT_2_2_1 = 3060 
XML_SCHEMAP_COS_VALID_DEFAULT_2_2_2 = 3061 
XML_SCHEMAP_CVC_SIMPLE_TYPE = 3062 
XML_SCHEMAP_COS_CT_EXTENDS_1_1 = 3063 
XML_SCHEMAP_SRC_IMPORT_1_1 = 3064 
XML_SCHEMAP_SRC_IMPORT_1_2 = 3065 
XML_SCHEMAP_SRC_IMPORT_2 = 3066 
XML_SCHEMAP_SRC_IMPORT_2_1 = 3067 
XML_SCHEMAP_SRC_IMPORT_2_2 = 3068 
XML_SCHEMAP_INTERNAL = 3069 
XML_SCHEMAP_NOT_DETERMINISTIC = 3070 
XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_1 = 3071 
XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_2 = 3072 
XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_3 = 3073 
XML_SCHEMAP_MG_PROPS_CORRECT_1 = 3074 
XML_SCHEMAP_MG_PROPS_CORRECT_2 = 3075 
XML_SCHEMAP_SRC_CT_1 = 3076 
XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_3 = 3077 
XML_SCHEMAP_AU_PROPS_CORRECT_2 = 3078 
XML_SCHEMAP_A_PROPS_CORRECT_2 = 3079 
XML_SCHEMAP_C_PROPS_CORRECT = 3080 
XML_SCHEMAP_SRC_REDEFINE = 3081 
XML_SCHEMAP_SRC_IMPORT = 3082 
XML_SCHEMAP_WARN_SKIP_SCHEMA = 3083 
XML_SCHEMAP_WARN_UNLOCATED_SCHEMA = 3084 
XML_SCHEMAP_WARN_ATTR_REDECL_PROH = 3085 
XML_SCHEMAP_WARN_ATTR_POINTLESS_PROH = 3086 
XML_SCHEMAP_AG_PROPS_CORRECT = 3087 
XML_SCHEMAP_COS_CT_EXTENDS_1_2 = 3088 
XML_SCHEMAP_AU_PROPS_CORRECT = 3089 
XML_SCHEMAP_A_PROPS_CORRECT_3 = 3090 
XML_SCHEMAP_COS_ALL_LIMITED = 3091 
XML_SCHEMATRONV_ASSERT = 4000 
XML_SCHEMATRONV_REPORT = 4001 
XML_MODULE_OPEN = 4900 
XML_MODULE_CLOSE = 4901 
XML_CHECK_FOUND_ELEMENT = 5000 
XML_CHECK_FOUND_ATTRIBUTE = 5001 
XML_CHECK_FOUND_TEXT = 5002 
XML_CHECK_FOUND_CDATA = 5003 
XML_CHECK_FOUND_ENTITYREF = 5004 
XML_CHECK_FOUND_ENTITY = 5005 
XML_CHECK_FOUND_PI = 5006 
XML_CHECK_FOUND_COMMENT = 5007 
XML_CHECK_FOUND_DOCTYPE = 5008 
XML_CHECK_FOUND_FRAGMENT = 5009 
XML_CHECK_FOUND_NOTATION = 5010 
XML_CHECK_UNKNOWN_NODE = 5011 
XML_CHECK_ENTITY_TYPE = 5012 
XML_CHECK_NO_PARENT = 5013 
XML_CHECK_NO_DOC = 5014 
XML_CHECK_NO_NAME = 5015 
XML_CHECK_NO_ELEM = 5016 
XML_CHECK_WRONG_DOC = 5017 
XML_CHECK_NO_PREV = 5018 
XML_CHECK_WRONG_PREV = 5019 
XML_CHECK_NO_NEXT = 5020 
XML_CHECK_WRONG_NEXT = 5021 
XML_CHECK_NOT_DTD = 5022 
XML_CHECK_NOT_ATTR = 5023 
XML_CHECK_NOT_ATTR_DECL = 5024 
XML_CHECK_NOT_ELEM_DECL = 5025 
XML_CHECK_NOT_ENTITY_DECL = 5026 
XML_CHECK_NOT_NS_DECL = 5027 
XML_CHECK_NO_HREF = 5028 
XML_CHECK_WRONG_PARENT = 5029 
XML_CHECK_NS_SCOPE = 5030 
XML_CHECK_NS_ANCESTOR = 5031 
XML_CHECK_NOT_UTF8 = 5032 
XML_CHECK_NO_DICT = 5033 
XML_CHECK_NOT_NCNAME = 5034 
XML_CHECK_OUTSIDE_DICT = 5035 
XML_CHECK_WRONG_NAME = 5036 
XML_CHECK_NAME_NOT_NULL = 5037 
XML_I18N_NO_NAME = 6000 
XML_I18N_NO_HANDLER = 6001 
XML_I18N_EXCESS_HANDLER = 6002 
XML_I18N_CONV_FAILED = 6003 
XML_I18N_NO_OUTPUT = 6004 

XML_CHAR_ENCODING_ERROR = -1 
XML_CHAR_ENCODING_NONE = 0 
XML_CHAR_ENCODING_UTF8 = 1 
XML_CHAR_ENCODING_UTF16LE = 2 
XML_CHAR_ENCODING_UTF16BE = 3 
XML_CHAR_ENCODING_UCS4LE = 4 
XML_CHAR_ENCODING_UCS4BE = 5 
XML_CHAR_ENCODING_EBCDIC = 6 
XML_CHAR_ENCODING_UCS4_2143 = 7 
XML_CHAR_ENCODING_UCS4_3412 = 8 
XML_CHAR_ENCODING_UCS2 = 9 
XML_CHAR_ENCODING_8859_1 = 10 
XML_CHAR_ENCODING_8859_2 = 11 
XML_CHAR_ENCODING_8859_3 = 12 
XML_CHAR_ENCODING_8859_4 = 13 
XML_CHAR_ENCODING_8859_5 = 14 
XML_CHAR_ENCODING_8859_6 = 15 
XML_CHAR_ENCODING_8859_7 = 16 
XML_CHAR_ENCODING_8859_8 = 17 
XML_CHAR_ENCODING_8859_9 = 18 
XML_CHAR_ENCODING_2022_JP = 19 
XML_CHAR_ENCODING_SHIFT_JIS = 20 
XML_CHAR_ENCODING_EUC_JP = 21 
XML_CHAR_ENCODING_ASCII = 22 

XML_INTERNAL_GENERAL_ENTITY = 1 
XML_EXTERNAL_GENERAL_PARSED_ENTITY = 2 
XML_EXTERNAL_GENERAL_UNPARSED_ENTITY = 3 
XML_INTERNAL_PARAMETER_ENTITY = 4 
XML_EXTERNAL_PARAMETER_ENTITY = 5 
XML_INTERNAL_PREDEFINED_ENTITY = 6 

XML_PARSER_EOF = -1 
XML_PARSER_START = 0 
XML_PARSER_MISC = 1 
XML_PARSER_PI = 2 
XML_PARSER_DTD = 3 
XML_PARSER_PROLOG = 4 
XML_PARSER_COMMENT = 5 
XML_PARSER_START_TAG = 6 
XML_PARSER_CONTENT = 7 
XML_PARSER_CDATA_SECTION = 8 
XML_PARSER_END_TAG = 9 
XML_PARSER_ENTITY_DECL = 10 
XML_PARSER_ENTITY_VALUE = 11 
XML_PARSER_ATTRIBUTE_VALUE = 12 
XML_PARSER_SYSTEM_LITERAL = 13 
XML_PARSER_EPILOG = 14 
XML_PARSER_IGNORE = 15 
XML_PARSER_PUBLIC_LITERAL = 16 

XML_PARSE_UNKNOWN = 0 
XML_PARSE_DOM = 1 
XML_PARSE_SAX = 2 
XML_PARSE_PUSH_DOM = 3 
XML_PARSE_PUSH_SAX = 4 
XML_PARSE_READER = 5 

XML_PARSE_RECOVER = 1 
XML_PARSE_NOENT = 2 
XML_PARSE_DTDLOAD = 4 
XML_PARSE_DTDATTR = 8 
XML_PARSE_DTDVALID = 16 
XML_PARSE_NOERROR = 32 
XML_PARSE_NOWARNING = 64 
XML_PARSE_PEDANTIC = 128 
XML_PARSE_NOBLANKS = 256 
XML_PARSE_SAX1 = 512 
XML_PARSE_XINCLUDE = 65536 
XML_PARSE_NONET = 131072 
XML_PARSE_NODICT = 262144 
XML_PARSE_NSCLEAN = 524288 
XML_PARSE_NOCDATA = 1048576 
XML_PARSE_NOXINCNODE = 2097152 
XML_PARSE_COMPACT = 4194304 
XML_PARSE_OLD10 = 8388608 
XML_PARSE_NOBASEFIX = 16777216 
XML_PARSE_HUGE = 33554432 
XML_PARSE_OLDSAX = 4294967296 

XML_WITH_THREAD = 1 
XML_WITH_TREE = 2 
XML_WITH_OUTPUT = 3 
XML_WITH_PUSH = 4 
XML_WITH_READER = 5 
XML_WITH_PATTERN = 6 
XML_WITH_WRITER = 7 
XML_WITH_SAX1 = 8 
XML_WITH_FTP = 9 
XML_WITH_HTTP = 10 
XML_WITH_VALID = 11 
XML_WITH_HTML = 12 
XML_WITH_LEGACY = 13 
XML_WITH_C14N = 14 
XML_WITH_CATALOG = 15 
XML_WITH_XPATH = 16 
XML_WITH_XPTR = 17 
XML_WITH_XINCLUDE = 18 
XML_WITH_ICONV = 19 
XML_WITH_ISO8859X = 20 
XML_WITH_UNICODE = 21 
XML_WITH_REGEXP = 22 
XML_WITH_AUTOMATA = 23 
XML_WITH_EXPR = 24 
XML_WITH_SCHEMAS = 25 
XML_WITH_SCHEMATRON = 26 
XML_WITH_MODULES = 27 
XML_WITH_DEBUG = 28 
XML_WITH_DEBUG_MEM = 29 
XML_WITH_DEBUG_RUN = 30 
XML_WITH_ZLIB = 31 
XML_WITH_ICU = 32 
XML_WITH_NONE = 99999 

XLINK_TYPE_NONE = 0 
XLINK_TYPE_SIMPLE = 1 
XLINK_TYPE_EXTENDED = 2 
XLINK_TYPE_EXTENDED_SET = 3 

XLINK_SHOW_NONE = 0 
XLINK_SHOW_NEW = 1 
XLINK_SHOW_EMBED = 2 
XLINK_SHOW_REPLACE = 3 

XLINK_ACTUATE_NONE = 0 
XLINK_ACTUATE_AUTO = 1 
XLINK_ACTUATE_ONREQUEST = 2 

REQUEST_LINK_INFO = 0 
REQUEST_DEEP_COUNT = 1 
REQUEST_DIRECTORY_COUNT = 2 
REQUEST_FILE_INFO = 3 
REQUEST_FILE_LIST = 4 
REQUEST_MIME_LIST = 5 
REQUEST_TOP_LEFT_TEXT = 6 
REQUEST_LARGE_TOP_LEFT_TEXT = 7 
REQUEST_EXTENSION_INFO = 8 
REQUEST_THUMBNAIL = 9 
REQUEST_MOUNT = 10 
REQUEST_FILESYSTEM_INFO = 11 
REQUEST_TYPE_LAST = 12 

NAUTILUS_ICON_DND_GNOME_ICON_LIST = 0 
NAUTILUS_ICON_DND_URI_LIST = 1 
NAUTILUS_ICON_DND_NETSCAPE_URL = 2 
NAUTILUS_ICON_DND_TEXT = 3 
NAUTILUS_ICON_DND_XDNDDIRECTSAVE = 4 
NAUTILUS_ICON_DND_RAW = 5 
NAUTILUS_ICON_DND_ROOTWINDOW_DROP = 6 

NAUTILUS_DND_ACTION_FIRST = 64 
NAUTILUS_DND_ACTION_SET_AS_BACKGROUND = 64 
NAUTILUS_DND_ACTION_SET_AS_FOLDER_BACKGROUND = 128 
NAUTILUS_DND_ACTION_SET_AS_GLOBAL_BACKGROUND = 256 

CONFLICT_RESPONSE_SKIP = 1 
CONFLICT_RESPONSE_REPLACE = 2 
CONFLICT_RESPONSE_RENAME = 3 

NAUTILUS_FILE_UNDO_OP_COPY = 0 
NAUTILUS_FILE_UNDO_OP_DUPLICATE = 1 
NAUTILUS_FILE_UNDO_OP_MOVE = 2 
NAUTILUS_FILE_UNDO_OP_RENAME = 3 
NAUTILUS_FILE_UNDO_OP_CREATE_EMPTY_FILE = 4 
NAUTILUS_FILE_UNDO_OP_CREATE_FILE_FROM_TEMPLATE = 5 
NAUTILUS_FILE_UNDO_OP_CREATE_FOLDER = 6 
NAUTILUS_FILE_UNDO_OP_MOVE_TO_TRASH = 7 
NAUTILUS_FILE_UNDO_OP_RESTORE_FROM_TRASH = 8 
NAUTILUS_FILE_UNDO_OP_CREATE_LINK = 9 
NAUTILUS_FILE_UNDO_OP_RECURSIVE_SET_PERMISSIONS = 10 
NAUTILUS_FILE_UNDO_OP_SET_PERMISSIONS = 11 
NAUTILUS_FILE_UNDO_OP_CHANGE_GROUP = 12 
NAUTILUS_FILE_UNDO_OP_CHANGE_OWNER = 13 
NAUTILUS_FILE_UNDO_OP_NUM_TYPES = 14 

KNOWN = 0 
UNKNOWABLE = 1 
UNKNOWN = 2 

NAUTILUS_FILE_UNDO_MANAGER_STATE_NONE = 0 
NAUTILUS_FILE_UNDO_MANAGER_STATE_UNDO = 1 
NAUTILUS_FILE_UNDO_MANAGER_STATE_REDO = 2 

NAUTILUS_DATE_FORMAT_LOCALE = 0 
NAUTILUS_DATE_FORMAT_ISO = 1 
NAUTILUS_DATE_FORMAT_INFORMAL = 2 

NAUTILUS_NEW_TAB_POSITION_AFTER_CURRENT_TAB = 0 
NAUTILUS_NEW_TAB_POSITION_END = 1 

NAUTILUS_DEFAULT_FOLDER_VIEWER_ICON_VIEW = 0 
NAUTILUS_DEFAULT_FOLDER_VIEWER_LIST_VIEW = 1 
NAUTILUS_DEFAULT_FOLDER_VIEWER_OTHER = 2 

NAUTILUS_CLICK_POLICY_SINGLE = 0 
NAUTILUS_CLICK_POLICY_DOUBLE = 1 

NAUTILUS_EXECUTABLE_TEXT_LAUNCH = 0 
NAUTILUS_EXECUTABLE_TEXT_DISPLAY = 1 
NAUTILUS_EXECUTABLE_TEXT_ASK = 2 

NAUTILUS_SPEED_TRADEOFF_ALWAYS = 0 
NAUTILUS_SPEED_TRADEOFF_LOCAL_ONLY = 1 
NAUTILUS_SPEED_TRADEOFF_NEVER = 2 

NAUTILUS_COMPLEX_SEARCH_BAR = 0 
NAUTILUS_SIMPLE_SEARCH_BAR = 1 

BOUNDS_USAGE_FOR_LAYOUT = 0 
BOUNDS_USAGE_FOR_ENTIRE_ITEM = 1 
BOUNDS_USAGE_FOR_DISPLAY = 2 

DRAG_STATE_INITIAL = 0 
DRAG_STATE_MOVE_OR_COPY = 1 
DRAG_STATE_STRETCH = 2 

AXIS_NONE = 0 
AXIS_HORIZONTAL = 1 
AXIS_VERTICAL = 2 

LABEL_COLOR = 0 
LABEL_COLOR_HIGHLIGHT = 1 
LABEL_COLOR_ACTIVE = 2 
LABEL_COLOR_PRELIGHT = 3 
LABEL_INFO_COLOR = 4 
LABEL_INFO_COLOR_HIGHLIGHT = 5 
LABEL_INFO_COLOR_ACTIVE = 6 
LAST_LABEL_COLOR = 7 

NAUTILUS_LIST_MODEL_FILE_COLUMN = 0 
NAUTILUS_LIST_MODEL_SUBDIRECTORY_COLUMN = 1 
NAUTILUS_LIST_MODEL_SMALLEST_ICON_COLUMN = 2 
NAUTILUS_LIST_MODEL_SMALLER_ICON_COLUMN = 3 
NAUTILUS_LIST_MODEL_SMALL_ICON_COLUMN = 4 
NAUTILUS_LIST_MODEL_STANDARD_ICON_COLUMN = 5 
NAUTILUS_LIST_MODEL_LARGE_ICON_COLUMN = 6 
NAUTILUS_LIST_MODEL_LARGER_ICON_COLUMN = 7 
NAUTILUS_LIST_MODEL_LARGEST_ICON_COLUMN = 8 
NAUTILUS_LIST_MODEL_FILE_NAME_IS_EDITABLE_COLUMN = 9 
NAUTILUS_LIST_MODEL_NUM_COLUMNS = 10 

NAUTILUS_LOCATION_ENTRY_ACTION_GOTO = 0 
NAUTILUS_LOCATION_ENTRY_ACTION_CLEAR = 1 

NAUTILUS_NAVIGATION_DIRECTION_BACK = 0 
NAUTILUS_NAVIGATION_DIRECTION_FORWARD = 1 

NAUTILUS_TOOLBAR_MODE_PATH_BAR = 0 
NAUTILUS_TOOLBAR_MODE_LOCATION_BAR = 1 

## simple enums ##
RPYTHONIC_GLOBAL_ENUMS = { 
 "G_USER_DIRECTORY_DESKTOP" : 0,  "G_USER_DIRECTORY_DOCUMENTS" : 1,  "G_USER_DIRECTORY_DOWNLOAD" : 2,  "G_USER_DIRECTORY_MUSIC" : 3,  "G_USER_DIRECTORY_PICTURES" : 4,  "G_USER_DIRECTORY_PUBLIC_SHARE" : 5,  "G_USER_DIRECTORY_TEMPLATES" : 6,  "G_USER_DIRECTORY_VIDEOS" : 7,  "G_USER_N_DIRECTORIES" : 8, 
 "G_THREAD_ERROR_AGAIN" : 0, 
 "G_THREAD_PRIORITY_LOW" : 0,  "G_THREAD_PRIORITY_NORMAL" : 1,  "G_THREAD_PRIORITY_HIGH" : 2,  "G_THREAD_PRIORITY_URGENT" : 3, 
 "G_ONCE_STATUS_NOTCALLED" : 0,  "G_ONCE_STATUS_PROGRESS" : 1,  "G_ONCE_STATUS_READY" : 2, 
 "FPE_INTDIV" : 1,  "FPE_INTOVF" : 2,  "FPE_FLTDIV" : 3,  "FPE_FLTOVF" : 4,  "FPE_FLTUND" : 5,  "FPE_FLTRES" : 6,  "FPE_FLTINV" : 7,  "FPE_FLTSUB" : 8, 
 "ILL_ILLOPC" : 1,  "ILL_ILLOPN" : 2,  "ILL_ILLADR" : 3,  "ILL_ILLTRP" : 4,  "ILL_PRVOPC" : 5,  "ILL_PRVREG" : 6,  "ILL_COPROC" : 7,  "ILL_BADSTK" : 8, 
 "SI_ASYNCNL" : -60,  "SI_TKILL" : -6,  "SI_SIGIO" : -5,  "SI_ASYNCIO" : -4,  "SI_MESGQ" : -3,  "SI_TIMER" : -2,  "SI_QUEUE" : -1,  "SI_USER" : 0,  "SI_KERNEL" : 128, 
 "SEGV_MAPERR" : 1,  "SEGV_ACCERR" : 2, 
 "BUS_ADRALN" : 1,  "BUS_ADRERR" : 2,  "BUS_OBJERR" : 3, 
 "TRAP_BRKPT" : 1,  "TRAP_TRACE" : 2, 
 "CLD_EXITED" : 1,  "CLD_KILLED" : 2,  "CLD_DUMPED" : 3,  "CLD_TRAPPED" : 4,  "CLD_STOPPED" : 5,  "CLD_CONTINUED" : 6, 
 "POLL_IN" : 1,  "POLL_OUT" : 2,  "POLL_MSG" : 3,  "POLL_ERR" : 4,  "POLL_PRI" : 5,  "POLL_HUP" : 6, 
 "SIGEV_SIGNAL" : 0,  "SIGEV_NONE" : 1,  "SIGEV_THREAD" : 2,  "SIGEV_THREAD_ID" : 4, 
 "SS_ONSTACK" : 1,  "SS_DISABLE" : 2, 
 "G_BOOKMARK_FILE_ERROR_INVALID_URI" : 0,  "G_BOOKMARK_FILE_ERROR_INVALID_VALUE" : 1,  "G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED" : 2,  "G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND" : 3,  "G_BOOKMARK_FILE_ERROR_READ" : 4,  "G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING" : 5,  "G_BOOKMARK_FILE_ERROR_WRITE" : 6,  "G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND" : 7, 
 "G_SLICE_CONFIG_ALWAYS_MALLOC" : 1,  "G_SLICE_CONFIG_BYPASS_MAGAZINES" : 2,  "G_SLICE_CONFIG_WORKING_SET_MSECS" : 3,  "G_SLICE_CONFIG_COLOR_INCREMENT" : 4,  "G_SLICE_CONFIG_CHUNK_SIZES" : 5,  "G_SLICE_CONFIG_CONTENTION_COUNTER" : 6, 
 "G_CHECKSUM_MD5" : 0,  "G_CHECKSUM_SHA1" : 1,  "G_CHECKSUM_SHA256" : 2, 
 "G_CONVERT_ERROR_NO_CONVERSION" : 0,  "G_CONVERT_ERROR_ILLEGAL_SEQUENCE" : 1,  "G_CONVERT_ERROR_FAILED" : 2,  "G_CONVERT_ERROR_PARTIAL_INPUT" : 3,  "G_CONVERT_ERROR_BAD_URI" : 4,  "G_CONVERT_ERROR_NOT_ABSOLUTE_PATH" : 5, 
 "G_DATE_DAY" : 0,  "G_DATE_MONTH" : 1,  "G_DATE_YEAR" : 2, 
 "G_DATE_BAD_WEEKDAY" : 0,  "G_DATE_MONDAY" : 1,  "G_DATE_TUESDAY" : 2,  "G_DATE_WEDNESDAY" : 3,  "G_DATE_THURSDAY" : 4,  "G_DATE_FRIDAY" : 5,  "G_DATE_SATURDAY" : 6,  "G_DATE_SUNDAY" : 7, 
 "G_DATE_BAD_MONTH" : 0,  "G_DATE_JANUARY" : 1,  "G_DATE_FEBRUARY" : 2,  "G_DATE_MARCH" : 3,  "G_DATE_APRIL" : 4,  "G_DATE_MAY" : 5,  "G_DATE_JUNE" : 6,  "G_DATE_JULY" : 7,  "G_DATE_AUGUST" : 8,  "G_DATE_SEPTEMBER" : 9,  "G_DATE_OCTOBER" : 10,  "G_DATE_NOVEMBER" : 11,  "G_DATE_DECEMBER" : 12, 
 "G_TIME_TYPE_STANDARD" : 0,  "G_TIME_TYPE_DAYLIGHT" : 1,  "G_TIME_TYPE_UNIVERSAL" : 2, 
 "G_FILE_ERROR_EXIST" : 0,  "G_FILE_ERROR_ISDIR" : 1,  "G_FILE_ERROR_ACCES" : 2,  "G_FILE_ERROR_NAMETOOLONG" : 3,  "G_FILE_ERROR_NOENT" : 4,  "G_FILE_ERROR_NOTDIR" : 5,  "G_FILE_ERROR_NXIO" : 6,  "G_FILE_ERROR_NODEV" : 7,  "G_FILE_ERROR_ROFS" : 8,  "G_FILE_ERROR_TXTBSY" : 9,  "G_FILE_ERROR_FAULT" : 10,  "G_FILE_ERROR_LOOP" : 11,  "G_FILE_ERROR_NOSPC" : 12,  "G_FILE_ERROR_NOMEM" : 13,  "G_FILE_ERROR_MFILE" : 14,  "G_FILE_ERROR_NFILE" : 15,  "G_FILE_ERROR_BADF" : 16,  "G_FILE_ERROR_INVAL" : 17,  "G_FILE_ERROR_PIPE" : 18,  "G_FILE_ERROR_AGAIN" : 19,  "G_FILE_ERROR_INTR" : 20,  "G_FILE_ERROR_IO" : 21,  "G_FILE_ERROR_PERM" : 22,  "G_FILE_ERROR_NOSYS" : 23,  "G_FILE_ERROR_FAILED" : 24, 
 "G_FILE_TEST_IS_REGULAR" : 1,  "G_FILE_TEST_IS_SYMLINK" : 2,  "G_FILE_TEST_IS_DIR" : 4,  "G_FILE_TEST_IS_EXECUTABLE" : 8,  "G_FILE_TEST_EXISTS" : 16, 
 "G_FORMAT_SIZE_DEFAULT" : 0,  "G_FORMAT_SIZE_LONG_FORMAT" : 1,  "G_FORMAT_SIZE_IEC_UNITS" : 2, 
 "G_HOOK_FLAG_ACTIVE" : 1,  "G_HOOK_FLAG_IN_CALL" : 2,  "G_HOOK_FLAG_MASK" : 15, 
 "G_UNICODE_CONTROL" : 0,  "G_UNICODE_FORMAT" : 1,  "G_UNICODE_UNASSIGNED" : 2,  "G_UNICODE_PRIVATE_USE" : 3,  "G_UNICODE_SURROGATE" : 4,  "G_UNICODE_LOWERCASE_LETTER" : 5,  "G_UNICODE_MODIFIER_LETTER" : 6,  "G_UNICODE_OTHER_LETTER" : 7,  "G_UNICODE_TITLECASE_LETTER" : 8,  "G_UNICODE_UPPERCASE_LETTER" : 9,  "G_UNICODE_SPACING_MARK" : 10,  "G_UNICODE_ENCLOSING_MARK" : 11,  "G_UNICODE_NON_SPACING_MARK" : 12,  "G_UNICODE_DECIMAL_NUMBER" : 13,  "G_UNICODE_LETTER_NUMBER" : 14,  "G_UNICODE_OTHER_NUMBER" : 15,  "G_UNICODE_CONNECT_PUNCTUATION" : 16,  "G_UNICODE_DASH_PUNCTUATION" : 17,  "G_UNICODE_CLOSE_PUNCTUATION" : 18,  "G_UNICODE_FINAL_PUNCTUATION" : 19,  "G_UNICODE_INITIAL_PUNCTUATION" : 20,  "G_UNICODE_OTHER_PUNCTUATION" : 21,  "G_UNICODE_OPEN_PUNCTUATION" : 22,  "G_UNICODE_CURRENCY_SYMBOL" : 23,  "G_UNICODE_MODIFIER_SYMBOL" : 24,  "G_UNICODE_MATH_SYMBOL" : 25,  "G_UNICODE_OTHER_SYMBOL" : 26,  "G_UNICODE_LINE_SEPARATOR" : 27,  "G_UNICODE_PARAGRAPH_SEPARATOR" : 28,  "G_UNICODE_SPACE_SEPARATOR" : 29, 
 "G_UNICODE_BREAK_MANDATORY" : 0,  "G_UNICODE_BREAK_CARRIAGE_RETURN" : 1,  "G_UNICODE_BREAK_LINE_FEED" : 2,  "G_UNICODE_BREAK_COMBINING_MARK" : 3,  "G_UNICODE_BREAK_SURROGATE" : 4,  "G_UNICODE_BREAK_ZERO_WIDTH_SPACE" : 5,  "G_UNICODE_BREAK_INSEPARABLE" : 6,  "G_UNICODE_BREAK_NON_BREAKING_GLUE" : 7,  "G_UNICODE_BREAK_CONTINGENT" : 8,  "G_UNICODE_BREAK_SPACE" : 9,  "G_UNICODE_BREAK_AFTER" : 10,  "G_UNICODE_BREAK_BEFORE" : 11,  "G_UNICODE_BREAK_BEFORE_AND_AFTER" : 12,  "G_UNICODE_BREAK_HYPHEN" : 13,  "G_UNICODE_BREAK_NON_STARTER" : 14,  "G_UNICODE_BREAK_OPEN_PUNCTUATION" : 15,  "G_UNICODE_BREAK_CLOSE_PUNCTUATION" : 16,  "G_UNICODE_BREAK_QUOTATION" : 17,  "G_UNICODE_BREAK_EXCLAMATION" : 18,  "G_UNICODE_BREAK_IDEOGRAPHIC" : 19,  "G_UNICODE_BREAK_NUMERIC" : 20,  "G_UNICODE_BREAK_INFIX_SEPARATOR" : 21,  "G_UNICODE_BREAK_SYMBOL" : 22,  "G_UNICODE_BREAK_ALPHABETIC" : 23,  "G_UNICODE_BREAK_PREFIX" : 24,  "G_UNICODE_BREAK_POSTFIX" : 25,  "G_UNICODE_BREAK_COMPLEX_CONTEXT" : 26,  "G_UNICODE_BREAK_AMBIGUOUS" : 27,  "G_UNICODE_BREAK_UNKNOWN" : 28,  "G_UNICODE_BREAK_NEXT_LINE" : 29,  "G_UNICODE_BREAK_WORD_JOINER" : 30,  "G_UNICODE_BREAK_HANGUL_L_JAMO" : 31,  "G_UNICODE_BREAK_HANGUL_V_JAMO" : 32,  "G_UNICODE_BREAK_HANGUL_T_JAMO" : 33,  "G_UNICODE_BREAK_HANGUL_LV_SYLLABLE" : 34,  "G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE" : 35,  "G_UNICODE_BREAK_CLOSE_PARANTHESIS" : 36, 
 "G_UNICODE_SCRIPT_INVALID_CODE" : -1,  "G_UNICODE_SCRIPT_COMMON" : 0,  "G_UNICODE_SCRIPT_INHERITED" : 1,  "G_UNICODE_SCRIPT_ARABIC" : 2,  "G_UNICODE_SCRIPT_ARMENIAN" : 3,  "G_UNICODE_SCRIPT_BENGALI" : 4,  "G_UNICODE_SCRIPT_BOPOMOFO" : 5,  "G_UNICODE_SCRIPT_CHEROKEE" : 6,  "G_UNICODE_SCRIPT_COPTIC" : 7,  "G_UNICODE_SCRIPT_CYRILLIC" : 8,  "G_UNICODE_SCRIPT_DESERET" : 9,  "G_UNICODE_SCRIPT_DEVANAGARI" : 10,  "G_UNICODE_SCRIPT_ETHIOPIC" : 11,  "G_UNICODE_SCRIPT_GEORGIAN" : 12,  "G_UNICODE_SCRIPT_GOTHIC" : 13,  "G_UNICODE_SCRIPT_GREEK" : 14,  "G_UNICODE_SCRIPT_GUJARATI" : 15,  "G_UNICODE_SCRIPT_GURMUKHI" : 16,  "G_UNICODE_SCRIPT_HAN" : 17,  "G_UNICODE_SCRIPT_HANGUL" : 18,  "G_UNICODE_SCRIPT_HEBREW" : 19,  "G_UNICODE_SCRIPT_HIRAGANA" : 20,  "G_UNICODE_SCRIPT_KANNADA" : 21,  "G_UNICODE_SCRIPT_KATAKANA" : 22,  "G_UNICODE_SCRIPT_KHMER" : 23,  "G_UNICODE_SCRIPT_LAO" : 24,  "G_UNICODE_SCRIPT_LATIN" : 25,  "G_UNICODE_SCRIPT_MALAYALAM" : 26,  "G_UNICODE_SCRIPT_MONGOLIAN" : 27,  "G_UNICODE_SCRIPT_MYANMAR" : 28,  "G_UNICODE_SCRIPT_OGHAM" : 29,  "G_UNICODE_SCRIPT_OLD_ITALIC" : 30,  "G_UNICODE_SCRIPT_ORIYA" : 31,  "G_UNICODE_SCRIPT_RUNIC" : 32,  "G_UNICODE_SCRIPT_SINHALA" : 33,  "G_UNICODE_SCRIPT_SYRIAC" : 34,  "G_UNICODE_SCRIPT_TAMIL" : 35,  "G_UNICODE_SCRIPT_TELUGU" : 36,  "G_UNICODE_SCRIPT_THAANA" : 37,  "G_UNICODE_SCRIPT_THAI" : 38,  "G_UNICODE_SCRIPT_TIBETAN" : 39,  "G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL" : 40,  "G_UNICODE_SCRIPT_YI" : 41,  "G_UNICODE_SCRIPT_TAGALOG" : 42,  "G_UNICODE_SCRIPT_HANUNOO" : 43,  "G_UNICODE_SCRIPT_BUHID" : 44,  "G_UNICODE_SCRIPT_TAGBANWA" : 45,  "G_UNICODE_SCRIPT_BRAILLE" : 46,  "G_UNICODE_SCRIPT_CYPRIOT" : 47,  "G_UNICODE_SCRIPT_LIMBU" : 48,  "G_UNICODE_SCRIPT_OSMANYA" : 49,  "G_UNICODE_SCRIPT_SHAVIAN" : 50,  "G_UNICODE_SCRIPT_LINEAR_B" : 51,  "G_UNICODE_SCRIPT_TAI_LE" : 52,  "G_UNICODE_SCRIPT_UGARITIC" : 53,  "G_UNICODE_SCRIPT_NEW_TAI_LUE" : 54,  "G_UNICODE_SCRIPT_BUGINESE" : 55,  "G_UNICODE_SCRIPT_GLAGOLITIC" : 56,  "G_UNICODE_SCRIPT_TIFINAGH" : 57,  "G_UNICODE_SCRIPT_SYLOTI_NAGRI" : 58,  "G_UNICODE_SCRIPT_OLD_PERSIAN" : 59,  "G_UNICODE_SCRIPT_KHAROSHTHI" : 60,  "G_UNICODE_SCRIPT_UNKNOWN" : 61,  "G_UNICODE_SCRIPT_BALINESE" : 62,  "G_UNICODE_SCRIPT_CUNEIFORM" : 63,  "G_UNICODE_SCRIPT_PHOENICIAN" : 64,  "G_UNICODE_SCRIPT_PHAGS_PA" : 65,  "G_UNICODE_SCRIPT_NKO" : 66,  "G_UNICODE_SCRIPT_KAYAH_LI" : 67,  "G_UNICODE_SCRIPT_LEPCHA" : 68,  "G_UNICODE_SCRIPT_REJANG" : 69,  "G_UNICODE_SCRIPT_SUNDANESE" : 70,  "G_UNICODE_SCRIPT_SAURASHTRA" : 71,  "G_UNICODE_SCRIPT_CHAM" : 72,  "G_UNICODE_SCRIPT_OL_CHIKI" : 73,  "G_UNICODE_SCRIPT_VAI" : 74,  "G_UNICODE_SCRIPT_CARIAN" : 75,  "G_UNICODE_SCRIPT_LYCIAN" : 76,  "G_UNICODE_SCRIPT_LYDIAN" : 77,  "G_UNICODE_SCRIPT_AVESTAN" : 78,  "G_UNICODE_SCRIPT_BAMUM" : 79,  "G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS" : 80,  "G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC" : 81,  "G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI" : 82,  "G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN" : 83,  "G_UNICODE_SCRIPT_JAVANESE" : 84,  "G_UNICODE_SCRIPT_KAITHI" : 85,  "G_UNICODE_SCRIPT_LISU" : 86,  "G_UNICODE_SCRIPT_MEETEI_MAYEK" : 87,  "G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN" : 88,  "G_UNICODE_SCRIPT_OLD_TURKIC" : 89,  "G_UNICODE_SCRIPT_SAMARITAN" : 90,  "G_UNICODE_SCRIPT_TAI_THAM" : 91,  "G_UNICODE_SCRIPT_TAI_VIET" : 92,  "G_UNICODE_SCRIPT_BATAK" : 93,  "G_UNICODE_SCRIPT_BRAHMI" : 94,  "G_UNICODE_SCRIPT_MANDAIC" : 95, 
 "G_NORMALIZE_DEFAULT" : 0,  "G_NORMALIZE_NFD" : 0,  "G_NORMALIZE_DEFAULT_COMPOSE" : 1,  "G_NORMALIZE_NFC" : 1,  "G_NORMALIZE_ALL" : 2,  "G_NORMALIZE_NFKD" : 2,  "G_NORMALIZE_ALL_COMPOSE" : 3,  "G_NORMALIZE_NFKC" : 3, 
 "G_IO_ERROR_NONE" : 0,  "G_IO_ERROR_AGAIN" : 1,  "G_IO_ERROR_INVAL" : 2,  "G_IO_ERROR_UNKNOWN" : 3, 
 "G_IO_CHANNEL_ERROR_FBIG" : 0,  "G_IO_CHANNEL_ERROR_INVAL" : 1,  "G_IO_CHANNEL_ERROR_IO" : 2,  "G_IO_CHANNEL_ERROR_ISDIR" : 3,  "G_IO_CHANNEL_ERROR_NOSPC" : 4,  "G_IO_CHANNEL_ERROR_NXIO" : 5,  "G_IO_CHANNEL_ERROR_OVERFLOW" : 6,  "G_IO_CHANNEL_ERROR_PIPE" : 7,  "G_IO_CHANNEL_ERROR_FAILED" : 8, 
 "G_IO_STATUS_ERROR" : 0,  "G_IO_STATUS_NORMAL" : 1,  "G_IO_STATUS_EOF" : 2,  "G_IO_STATUS_AGAIN" : 3, 
 "G_SEEK_CUR" : 0,  "G_SEEK_SET" : 1,  "G_SEEK_END" : 2, 
 "G_IO_IN" : 1,  "G_IO_OUT" : 4,  "G_IO_PRI" : 2,  "G_IO_ERR" : 8,  "G_IO_HUP" : 16,  "G_IO_NVAL" : 32, 
 "G_IO_FLAG_APPEND" : 1,  "G_IO_FLAG_NONBLOCK" : 2,  "G_IO_FLAG_IS_READABLE" : 4,  "G_IO_FLAG_IS_WRITEABLE" : 8,  "G_IO_FLAG_IS_SEEKABLE" : 16,  "G_IO_FLAG_MASK" : 31,  "G_IO_FLAG_GET_MASK" : 31,  "G_IO_FLAG_SET_MASK" : 3, 
 "G_KEY_FILE_ERROR_UNKNOWN_ENCODING" : 0,  "G_KEY_FILE_ERROR_PARSE" : 1,  "G_KEY_FILE_ERROR_NOT_FOUND" : 2,  "G_KEY_FILE_ERROR_KEY_NOT_FOUND" : 3,  "G_KEY_FILE_ERROR_GROUP_NOT_FOUND" : 4,  "G_KEY_FILE_ERROR_INVALID_VALUE" : 5, 
 "G_KEY_FILE_NONE" : 0,  "G_KEY_FILE_KEEP_COMMENTS" : 1,  "G_KEY_FILE_KEEP_TRANSLATIONS" : 2, 
 "G_MARKUP_ERROR_BAD_UTF8" : 0,  "G_MARKUP_ERROR_EMPTY" : 1,  "G_MARKUP_ERROR_PARSE" : 2,  "G_MARKUP_ERROR_UNKNOWN_ELEMENT" : 3,  "G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE" : 4,  "G_MARKUP_ERROR_INVALID_CONTENT" : 5,  "G_MARKUP_ERROR_MISSING_ATTRIBUTE" : 6, 
 "G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG" : 1,  "G_MARKUP_TREAT_CDATA_AS_TEXT" : 2,  "G_MARKUP_PREFIX_ERROR_POSITION" : 4, 
 "G_MARKUP_COLLECT_INVALID" : 0,  "G_MARKUP_COLLECT_STRING" : 1,  "G_MARKUP_COLLECT_STRDUP" : 2,  "G_MARKUP_COLLECT_BOOLEAN" : 3,  "G_MARKUP_COLLECT_TRISTATE" : 4,  "G_MARKUP_COLLECT_OPTIONAL" : 4194304, 
 "G_LOG_FLAG_RECURSION" : 1,  "G_LOG_FLAG_FATAL" : 2,  "G_LOG_LEVEL_ERROR" : 4,  "G_LOG_LEVEL_CRITICAL" : 8,  "G_LOG_LEVEL_WARNING" : 16,  "G_LOG_LEVEL_MESSAGE" : 32,  "G_LOG_LEVEL_INFO" : 64,  "G_LOG_LEVEL_DEBUG" : 128,  "G_LOG_LEVEL_MASK" : 3, 
 "G_TRAVERSE_LEAVES" : 1,  "G_TRAVERSE_NON_LEAVES" : 2,  "G_TRAVERSE_ALL" : 3,  "G_TRAVERSE_MASK" : 3,  "G_TRAVERSE_LEAFS" : 1,  "G_TRAVERSE_NON_LEAFS" : 2, 
 "G_IN_ORDER" : 0,  "G_PRE_ORDER" : 1,  "G_POST_ORDER" : 2,  "G_LEVEL_ORDER" : 3, 
 "G_OPTION_FLAG_HIDDEN" : 1,  "G_OPTION_FLAG_IN_MAIN" : 2,  "G_OPTION_FLAG_REVERSE" : 4,  "G_OPTION_FLAG_NO_ARG" : 8,  "G_OPTION_FLAG_FILENAME" : 16,  "G_OPTION_FLAG_OPTIONAL_ARG" : 32,  "G_OPTION_FLAG_NOALIAS" : 64, 
 "G_OPTION_ARG_NONE" : 0,  "G_OPTION_ARG_STRING" : 1,  "G_OPTION_ARG_INT" : 2,  "G_OPTION_ARG_CALLBACK" : 3,  "G_OPTION_ARG_FILENAME" : 4,  "G_OPTION_ARG_STRING_ARRAY" : 5,  "G_OPTION_ARG_FILENAME_ARRAY" : 6,  "G_OPTION_ARG_DOUBLE" : 7,  "G_OPTION_ARG_INT64" : 8, 
 "G_OPTION_ERROR_UNKNOWN_OPTION" : 0,  "G_OPTION_ERROR_BAD_VALUE" : 1,  "G_OPTION_ERROR_FAILED" : 2, 
 "G_REGEX_ERROR_COMPILE" : 0,  "G_REGEX_ERROR_OPTIMIZE" : 1,  "G_REGEX_ERROR_REPLACE" : 2,  "G_REGEX_ERROR_MATCH" : 3,  "G_REGEX_ERROR_INTERNAL" : 4,  "G_REGEX_ERROR_STRAY_BACKSLASH" : 101,  "G_REGEX_ERROR_MISSING_CONTROL_CHAR" : 102,  "G_REGEX_ERROR_UNRECOGNIZED_ESCAPE" : 103,  "G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER" : 104,  "G_REGEX_ERROR_QUANTIFIER_TOO_BIG" : 105,  "G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS" : 106,  "G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS" : 107,  "G_REGEX_ERROR_RANGE_OUT_OF_ORDER" : 108,  "G_REGEX_ERROR_NOTHING_TO_REPEAT" : 109,  "G_REGEX_ERROR_UNRECOGNIZED_CHARACTER" : 112,  "G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS" : 113,  "G_REGEX_ERROR_UNMATCHED_PARENTHESIS" : 114,  "G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE" : 115,  "G_REGEX_ERROR_UNTERMINATED_COMMENT" : 118,  "G_REGEX_ERROR_EXPRESSION_TOO_LARGE" : 120,  "G_REGEX_ERROR_MEMORY_ERROR" : 121,  "G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND" : 125,  "G_REGEX_ERROR_MALFORMED_CONDITION" : 126,  "G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES" : 127,  "G_REGEX_ERROR_ASSERTION_EXPECTED" : 128,  "G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME" : 130,  "G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED" : 131,  "G_REGEX_ERROR_HEX_CODE_TOO_LARGE" : 134,  "G_REGEX_ERROR_INVALID_CONDITION" : 135,  "G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND" : 136,  "G_REGEX_ERROR_INFINITE_LOOP" : 140,  "G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR" : 142,  "G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME" : 143,  "G_REGEX_ERROR_MALFORMED_PROPERTY" : 146,  "G_REGEX_ERROR_UNKNOWN_PROPERTY" : 147,  "G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG" : 148,  "G_REGEX_ERROR_TOO_MANY_SUBPATTERNS" : 149,  "G_REGEX_ERROR_INVALID_OCTAL_VALUE" : 151,  "G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE" : 154,  "G_REGEX_ERROR_DEFINE_REPETION" : 155,  "G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS" : 156,  "G_REGEX_ERROR_MISSING_BACK_REFERENCE" : 157, 
 "G_REGEX_MATCH_ANCHORED" : 16,  "G_REGEX_MATCH_NOTBOL" : 128,  "G_REGEX_MATCH_NOTEOL" : 256,  "G_REGEX_MATCH_NOTEMPTY" : 65536,  "G_REGEX_MATCH_PARTIAL" : 2097152,  "G_REGEX_MATCH_NEWLINE_CR" : 4294967296,  "G_REGEX_MATCH_NEWLINE_LF" : 8589934592,  "G_REGEX_MATCH_NEWLINE_CRLF" : 12884901888,  "G_REGEX_MATCH_NEWLINE_ANY" : 17179869184, 
 "G_REGEX_CASELESS" : 1,  "G_REGEX_MULTILINE" : 2,  "G_REGEX_DOTALL" : 4,  "G_REGEX_EXTENDED" : 8,  "G_REGEX_ANCHORED" : 16,  "G_REGEX_DOLLAR_ENDONLY" : 32,  "G_REGEX_UNGREEDY" : 512,  "G_REGEX_RAW" : 131072,  "G_REGEX_NO_AUTO_CAPTURE" : 262144,  "G_REGEX_OPTIMIZE" : 524288,  "G_REGEX_DUPNAMES" : 33554432,  "G_REGEX_NEWLINE_CR" : 4294967296,  "G_REGEX_NEWLINE_LF" : 8589934592,  "G_REGEX_NEWLINE_CRLF" : 12884901888, 
 "G_ERR_UNKNOWN" : 0,  "G_ERR_UNEXP_EOF" : 1,  "G_ERR_UNEXP_EOF_IN_STRING" : 2,  "G_ERR_UNEXP_EOF_IN_COMMENT" : 3,  "G_ERR_NON_DIGIT_IN_CONST" : 4,  "G_ERR_DIGIT_RADIX" : 5,  "G_ERR_FLOAT_RADIX" : 6,  "G_ERR_FLOAT_MALFORMED" : 7, 
 "G_TOKEN_EOF" : 0,  "G_TOKEN_LEFT_PAREN" : "(",  "G_TOKEN_RIGHT_PAREN" : ")",  "G_TOKEN_LEFT_CURLY" : "{",  "G_TOKEN_RIGHT_CURLY" : "}",  "G_TOKEN_LEFT_BRACE" : "[",  "G_TOKEN_RIGHT_BRACE" : "]",  "G_TOKEN_EQUAL_SIGN" : "=",  "G_TOKEN_COMMA" : ",",  "G_TOKEN_NONE" : 256,  "G_TOKEN_ERROR" : 257,  "G_TOKEN_CHAR" : 258,  "G_TOKEN_BINARY" : 259,  "G_TOKEN_OCTAL" : 260,  "G_TOKEN_INT" : 261,  "G_TOKEN_HEX" : 262,  "G_TOKEN_FLOAT" : 263,  "G_TOKEN_STRING" : 264,  "G_TOKEN_SYMBOL" : 265,  "G_TOKEN_IDENTIFIER" : 266,  "G_TOKEN_IDENTIFIER_NULL" : 267,  "G_TOKEN_COMMENT_SINGLE" : 268,  "G_TOKEN_COMMENT_MULTI" : 269,  "G_TOKEN_LAST" : 270, 
 "G_SHELL_ERROR_BAD_QUOTING" : 0,  "G_SHELL_ERROR_EMPTY_STRING" : 1,  "G_SHELL_ERROR_FAILED" : 2, 
 "G_SPAWN_ERROR_FORK" : 0,  "G_SPAWN_ERROR_READ" : 1,  "G_SPAWN_ERROR_CHDIR" : 2,  "G_SPAWN_ERROR_ACCES" : 3,  "G_SPAWN_ERROR_PERM" : 4,  "G_SPAWN_ERROR_2BIG" : 5,  "G_SPAWN_ERROR_NOEXEC" : 6,  "G_SPAWN_ERROR_NAMETOOLONG" : 7,  "G_SPAWN_ERROR_NOENT" : 8,  "G_SPAWN_ERROR_NOMEM" : 9,  "G_SPAWN_ERROR_NOTDIR" : 10,  "G_SPAWN_ERROR_LOOP" : 11,  "G_SPAWN_ERROR_TXTBUSY" : 12,  "G_SPAWN_ERROR_IO" : 13,  "G_SPAWN_ERROR_NFILE" : 14,  "G_SPAWN_ERROR_MFILE" : 15,  "G_SPAWN_ERROR_INVAL" : 16,  "G_SPAWN_ERROR_ISDIR" : 17,  "G_SPAWN_ERROR_LIBBAD" : 18,  "G_SPAWN_ERROR_FAILED" : 19, 
 "G_SPAWN_LEAVE_DESCRIPTORS_OPEN" : 1,  "G_SPAWN_DO_NOT_REAP_CHILD" : 2,  "G_SPAWN_SEARCH_PATH" : 4,  "G_SPAWN_STDOUT_TO_DEV_NULL" : 8,  "G_SPAWN_STDERR_TO_DEV_NULL" : 16,  "G_SPAWN_CHILD_INHERITS_STDIN" : 32,  "G_SPAWN_FILE_AND_ARGV_ZERO" : 64, 
 "G_ASCII_ALNUM" : 1,  "G_ASCII_ALPHA" : 2,  "G_ASCII_CNTRL" : 4,  "G_ASCII_DIGIT" : 8,  "G_ASCII_GRAPH" : 16,  "G_ASCII_LOWER" : 32,  "G_ASCII_PRINT" : 64,  "G_ASCII_PUNCT" : 128,  "G_ASCII_SPACE" : 256,  "G_ASCII_UPPER" : 512,  "G_ASCII_XDIGIT" : 65536, 
 "G_TEST_TRAP_SILENCE_STDOUT" : 128,  "G_TEST_TRAP_SILENCE_STDERR" : 256,  "G_TEST_TRAP_INHERIT_STDIN" : 512, 
 "G_TEST_LOG_NONE" : 0,  "G_TEST_LOG_ERROR" : 1,  "G_TEST_LOG_START_BINARY" : 2,  "G_TEST_LOG_LIST_CASE" : 3,  "G_TEST_LOG_SKIP_CASE" : 4,  "G_TEST_LOG_START_CASE" : 5,  "G_TEST_LOG_STOP_CASE" : 6,  "G_TEST_LOG_MIN_RESULT" : 7,  "G_TEST_LOG_MAX_RESULT" : 8,  "G_TEST_LOG_MESSAGE" : 9, 
 "G_VARIANT_CLASS_BOOLEAN" : "b",  "G_VARIANT_CLASS_BYTE" : "y",  "G_VARIANT_CLASS_INT16" : "n",  "G_VARIANT_CLASS_UINT16" : "q",  "G_VARIANT_CLASS_INT32" : "i",  "G_VARIANT_CLASS_UINT32" : "u",  "G_VARIANT_CLASS_INT64" : "x",  "G_VARIANT_CLASS_UINT64" : "t",  "G_VARIANT_CLASS_HANDLE" : "h",  "G_VARIANT_CLASS_DOUBLE" : "d",  "G_VARIANT_CLASS_STRING" : "s",  "G_VARIANT_CLASS_OBJECT_PATH" : "o",  "G_VARIANT_CLASS_SIGNATURE" : "g",  "G_VARIANT_CLASS_VARIANT" : "v",  "G_VARIANT_CLASS_MAYBE" : "m",  "G_VARIANT_CLASS_ARRAY" : "a",  "G_VARIANT_CLASS_TUPLE" : "(",  "G_VARIANT_CLASS_DICT_ENTRY" : "{", 
 "G_VARIANT_PARSE_ERROR_FAILED" : 0,  "G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED" : 1,  "G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE" : 2,  "G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED" : 3,  "G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END" : 4,  "G_VARIANT_PARSE_ERROR_INVALID_CHARACTER" : 5,  "G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING" : 6,  "G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH" : 7,  "G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE" : 8,  "G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING" : 9,  "G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE" : 10,  "G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE" : 11,  "G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG" : 12,  "G_VARIANT_PARSE_ERROR_TYPE_ERROR" : 13,  "G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN" : 14,  "G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD" : 15,  "G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT" : 16,  "G_VARIANT_PARSE_ERROR_VALUE_EXPECTED" : 17, 
 "G_TYPE_DEBUG_NONE" : 0,  "G_TYPE_DEBUG_OBJECTS" : 1,  "G_TYPE_DEBUG_SIGNALS" : 2,  "G_TYPE_DEBUG_MASK" : 3, 
 "G_TYPE_FLAG_CLASSED" : 1,  "G_TYPE_FLAG_INSTANTIATABLE" : 2,  "G_TYPE_FLAG_DERIVABLE" : 4,  "G_TYPE_FLAG_DEEP_DERIVABLE" : 8, 
 "G_TYPE_FLAG_ABSTRACT" : 16,  "G_TYPE_FLAG_VALUE_ABSTRACT" : 32, 
 "G_PARAM_READABLE" : 1,  "G_PARAM_WRITABLE" : 2,  "G_PARAM_CONSTRUCT" : 4,  "G_PARAM_CONSTRUCT_ONLY" : 8,  "G_PARAM_LAX_VALIDATION" : 16,  "G_PARAM_STATIC_NAME" : 32,  "G_PARAM_PRIVATE" : 32,  "G_PARAM_STATIC_NICK" : 64,  "G_PARAM_STATIC_BLURB" : 128,  "G_PARAM_DEPRECATED" : 562949953421312, 
 "G_SIGNAL_RUN_FIRST" : 1,  "G_SIGNAL_RUN_LAST" : 2,  "G_SIGNAL_RUN_CLEANUP" : 4,  "G_SIGNAL_NO_RECURSE" : 8,  "G_SIGNAL_DETAILED" : 16,  "G_SIGNAL_ACTION" : 32,  "G_SIGNAL_NO_HOOKS" : 64,  "G_SIGNAL_MUST_COLLECT" : 128, 
 "G_SIGNAL_MATCH_ID" : 1,  "G_SIGNAL_MATCH_DETAIL" : 2,  "G_SIGNAL_MATCH_CLOSURE" : 4,  "G_SIGNAL_MATCH_FUNC" : 8,  "G_SIGNAL_MATCH_DATA" : 16,  "G_SIGNAL_MATCH_UNBLOCKED" : 32, 
 "G_CONNECT_AFTER" : 1,  "G_CONNECT_SWAPPED" : 2, 
 "G_BINDING_DEFAULT" : 0,  "G_BINDING_BIDIRECTIONAL" : 1,  "G_BINDING_SYNC_CREATE" : 2,  "G_BINDING_INVERT_BOOLEAN" : 4, 
 "G_APP_INFO_CREATE_NONE" : 0,  "G_APP_INFO_CREATE_NEEDS_TERMINAL" : 1,  "G_APP_INFO_CREATE_SUPPORTS_URIS" : 2,  "G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION" : 4, 
 "G_CONVERTER_ERROR" : 0,  "G_CONVERTER_CONVERTED" : 1,  "G_CONVERTER_FINISHED" : 2,  "G_CONVERTER_FLUSHED" : 3, 
 "G_CONVERTER_NO_FLAGS" : 0,  "G_CONVERTER_INPUT_AT_END" : 1,  "G_CONVERTER_FLUSH" : 2, 
 "G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN" : 0,  "G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN" : 1,  "G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN" : 2, 
 "G_DATA_STREAM_NEWLINE_TYPE_LF" : 0,  "G_DATA_STREAM_NEWLINE_TYPE_CR" : 1,  "G_DATA_STREAM_NEWLINE_TYPE_CR_LF" : 2,  "G_DATA_STREAM_NEWLINE_TYPE_ANY" : 3, 
 "G_FILE_ATTRIBUTE_TYPE_INVALID" : 0,  "G_FILE_ATTRIBUTE_TYPE_STRING" : 1,  "G_FILE_ATTRIBUTE_TYPE_BYTE_STRING" : 2,  "G_FILE_ATTRIBUTE_TYPE_BOOLEAN" : 3,  "G_FILE_ATTRIBUTE_TYPE_UINT32" : 4,  "G_FILE_ATTRIBUTE_TYPE_INT32" : 5,  "G_FILE_ATTRIBUTE_TYPE_UINT64" : 6,  "G_FILE_ATTRIBUTE_TYPE_INT64" : 7,  "G_FILE_ATTRIBUTE_TYPE_OBJECT" : 8,  "G_FILE_ATTRIBUTE_TYPE_STRINGV" : 9, 
 "G_FILE_ATTRIBUTE_INFO_NONE" : 0,  "G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE" : 1,  "G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED" : 2, 
 "G_FILE_ATTRIBUTE_STATUS_UNSET" : 0,  "G_FILE_ATTRIBUTE_STATUS_SET" : 1,  "G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING" : 2, 
 "G_FILE_QUERY_INFO_NONE" : 0,  "G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS" : 1, 
 "G_FILE_CREATE_NONE" : 0,  "G_FILE_CREATE_PRIVATE" : 1,  "G_FILE_CREATE_REPLACE_DESTINATION" : 2, 
 "G_MOUNT_MOUNT_NONE" : 0, 
 "G_MOUNT_UNMOUNT_NONE" : 0,  "G_MOUNT_UNMOUNT_FORCE" : 1, 
 "G_DRIVE_START_STOP_TYPE_UNKNOWN" : 0,  "G_DRIVE_START_STOP_TYPE_SHUTDOWN" : 1,  "G_DRIVE_START_STOP_TYPE_NETWORK" : 2,  "G_DRIVE_START_STOP_TYPE_MULTIDISK" : 3,  "G_DRIVE_START_STOP_TYPE_PASSWORD" : 4, 
 "G_DRIVE_START_NONE" : 0, 
 "G_FILE_COPY_NONE" : 0,  "G_FILE_COPY_OVERWRITE" : 1,  "G_FILE_COPY_BACKUP" : 2,  "G_FILE_COPY_NOFOLLOW_SYMLINKS" : 4,  "G_FILE_COPY_ALL_METADATA" : 8,  "G_FILE_COPY_NO_FALLBACK_FOR_MOVE" : 16,  "G_FILE_COPY_TARGET_DEFAULT_PERMS" : 32, 
 "G_FILE_TYPE_UNKNOWN" : 0,  "G_FILE_TYPE_REGULAR" : 1,  "G_FILE_TYPE_DIRECTORY" : 2,  "G_FILE_TYPE_SYMBOLIC_LINK" : 3,  "G_FILE_TYPE_SPECIAL" : 4,  "G_FILE_TYPE_SHORTCUT" : 5,  "G_FILE_TYPE_MOUNTABLE" : 6, 
 "G_FILE_MONITOR_NONE" : 0,  "G_FILE_MONITOR_WATCH_MOUNTS" : 1,  "G_FILE_MONITOR_SEND_MOVED" : 2, 
 "G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS" : 0,  "G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL" : 1,  "G_FILESYSTEM_PREVIEW_TYPE_NEVER" : 2, 
 "G_FILE_MONITOR_EVENT_CHANGED" : 0,  "G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT" : 1,  "G_FILE_MONITOR_EVENT_DELETED" : 2,  "G_FILE_MONITOR_EVENT_CREATED" : 3,  "G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED" : 4,  "G_FILE_MONITOR_EVENT_PRE_UNMOUNT" : 5,  "G_FILE_MONITOR_EVENT_UNMOUNTED" : 6,  "G_FILE_MONITOR_EVENT_MOVED" : 7, 
 "G_IO_ERROR_FAILED" : 0,  "G_IO_ERROR_NOT_FOUND" : 1,  "G_IO_ERROR_EXISTS" : 2,  "G_IO_ERROR_IS_DIRECTORY" : 3,  "G_IO_ERROR_NOT_DIRECTORY" : 4,  "G_IO_ERROR_NOT_EMPTY" : 5,  "G_IO_ERROR_NOT_REGULAR_FILE" : 6,  "G_IO_ERROR_NOT_SYMBOLIC_LINK" : 7,  "G_IO_ERROR_NOT_MOUNTABLE_FILE" : 8,  "G_IO_ERROR_FILENAME_TOO_LONG" : 9,  "G_IO_ERROR_INVALID_FILENAME" : 10,  "G_IO_ERROR_TOO_MANY_LINKS" : 11,  "G_IO_ERROR_NO_SPACE" : 12,  "G_IO_ERROR_INVALID_ARGUMENT" : 13,  "G_IO_ERROR_PERMISSION_DENIED" : 14,  "G_IO_ERROR_NOT_SUPPORTED" : 15,  "G_IO_ERROR_NOT_MOUNTED" : 16,  "G_IO_ERROR_ALREADY_MOUNTED" : 17,  "G_IO_ERROR_CLOSED" : 18,  "G_IO_ERROR_CANCELLED" : 19,  "G_IO_ERROR_PENDING" : 20,  "G_IO_ERROR_READ_ONLY" : 21,  "G_IO_ERROR_CANT_CREATE_BACKUP" : 22,  "G_IO_ERROR_WRONG_ETAG" : 23,  "G_IO_ERROR_TIMED_OUT" : 24,  "G_IO_ERROR_WOULD_RECURSE" : 25,  "G_IO_ERROR_BUSY" : 26,  "G_IO_ERROR_WOULD_BLOCK" : 27,  "G_IO_ERROR_HOST_NOT_FOUND" : 28,  "G_IO_ERROR_WOULD_MERGE" : 29,  "G_IO_ERROR_FAILED_HANDLED" : 30,  "G_IO_ERROR_TOO_MANY_OPEN_FILES" : 31,  "G_IO_ERROR_NOT_INITIALIZED" : 32,  "G_IO_ERROR_ADDRESS_IN_USE" : 33,  "G_IO_ERROR_PARTIAL_INPUT" : 34,  "G_IO_ERROR_INVALID_DATA" : 35,  "G_IO_ERROR_DBUS_ERROR" : 36,  "G_IO_ERROR_HOST_UNREACHABLE" : 37,  "G_IO_ERROR_NETWORK_UNREACHABLE" : 38,  "G_IO_ERROR_CONNECTION_REFUSED" : 39,  "G_IO_ERROR_PROXY_FAILED" : 40,  "G_IO_ERROR_PROXY_AUTH_FAILED" : 41,  "G_IO_ERROR_PROXY_NEED_AUTH" : 42,  "G_IO_ERROR_PROXY_NOT_ALLOWED" : 43, 
 "G_ASK_PASSWORD_NEED_PASSWORD" : 1,  "G_ASK_PASSWORD_NEED_USERNAME" : 2,  "G_ASK_PASSWORD_NEED_DOMAIN" : 4,  "G_ASK_PASSWORD_SAVING_SUPPORTED" : 8,  "G_ASK_PASSWORD_ANONYMOUS_SUPPORTED" : 16, 
 "G_PASSWORD_SAVE_NEVER" : 0,  "G_PASSWORD_SAVE_FOR_SESSION" : 1,  "G_PASSWORD_SAVE_PERMANENTLY" : 2, 
 "G_MOUNT_OPERATION_HANDLED" : 0,  "G_MOUNT_OPERATION_ABORTED" : 1,  "G_MOUNT_OPERATION_UNHANDLED" : 2, 
 "G_OUTPUT_STREAM_SPLICE_NONE" : 0,  "G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE" : 1,  "G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET" : 2, 
 "G_IO_STREAM_SPLICE_NONE" : 0,  "G_IO_STREAM_SPLICE_CLOSE_STREAM1" : 1,  "G_IO_STREAM_SPLICE_CLOSE_STREAM2" : 2,  "G_IO_STREAM_SPLICE_WAIT_FOR_BOTH" : 4, 
 "G_RESOLVER_ERROR_NOT_FOUND" : 0,  "G_RESOLVER_ERROR_TEMPORARY_FAILURE" : 1,  "G_RESOLVER_ERROR_INTERNAL" : 2, 
 "G_EMBLEM_ORIGIN_UNKNOWN" : 0,  "G_EMBLEM_ORIGIN_DEVICE" : 1,  "G_EMBLEM_ORIGIN_LIVEMETADATA" : 2,  "G_EMBLEM_ORIGIN_TAG" : 3, 
 "G_SOCKET_FAMILY_INVALID" : 0,  "G_SOCKET_FAMILY_UNIX" : 1,  "G_SOCKET_FAMILY_IPV4" : 2,  "G_SOCKET_FAMILY_IPV6" : 10, 
 "G_SOCKET_TYPE_INVALID" : 0,  "G_SOCKET_TYPE_STREAM" : 1,  "G_SOCKET_TYPE_DATAGRAM" : 2,  "G_SOCKET_TYPE_SEQPACKET" : 3, 
 "G_SOCKET_MSG_NONE" : 0,  "G_SOCKET_MSG_OOB" : 1,  "G_SOCKET_MSG_PEEK" : 2,  "G_SOCKET_MSG_DONTROUTE" : 4, 
 "G_SOCKET_PROTOCOL_UNKNOWN" : -1,  "G_SOCKET_PROTOCOL_DEFAULT" : 0,  "G_SOCKET_PROTOCOL_TCP" : 6,  "G_SOCKET_PROTOCOL_UDP" : 17,  "G_SOCKET_PROTOCOL_SCTP" : 132, 
 "G_ZLIB_COMPRESSOR_FORMAT_ZLIB" : 0,  "G_ZLIB_COMPRESSOR_FORMAT_GZIP" : 1,  "G_ZLIB_COMPRESSOR_FORMAT_RAW" : 2, 
 "G_UNIX_SOCKET_ADDRESS_INVALID" : 0,  "G_UNIX_SOCKET_ADDRESS_ANONYMOUS" : 1,  "G_UNIX_SOCKET_ADDRESS_PATH" : 2,  "G_UNIX_SOCKET_ADDRESS_ABSTRACT" : 3,  "G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED" : 4, 
 "G_BUS_TYPE_STARTER" : -1,  "G_BUS_TYPE_NONE" : 0,  "G_BUS_TYPE_SYSTEM" : 1,  "G_BUS_TYPE_SESSION" : 2, 
 "G_BUS_NAME_OWNER_FLAGS_NONE" : 0,  "G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT" : 1,  "G_BUS_NAME_OWNER_FLAGS_REPLACE" : 2, 
 "G_BUS_NAME_WATCHER_FLAGS_NONE" : 0,  "G_BUS_NAME_WATCHER_FLAGS_AUTO_START" : 1, 
 "G_DBUS_PROXY_FLAGS_NONE" : 0,  "G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES" : 1,  "G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS" : 2,  "G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START" : 4, 
 "G_DBUS_ERROR_FAILED" : 0,  "G_DBUS_ERROR_NO_MEMORY" : 1,  "G_DBUS_ERROR_SERVICE_UNKNOWN" : 2,  "G_DBUS_ERROR_NAME_HAS_NO_OWNER" : 3,  "G_DBUS_ERROR_NO_REPLY" : 4,  "G_DBUS_ERROR_IO_ERROR" : 5,  "G_DBUS_ERROR_BAD_ADDRESS" : 6,  "G_DBUS_ERROR_NOT_SUPPORTED" : 7,  "G_DBUS_ERROR_LIMITS_EXCEEDED" : 8,  "G_DBUS_ERROR_ACCESS_DENIED" : 9,  "G_DBUS_ERROR_AUTH_FAILED" : 10,  "G_DBUS_ERROR_NO_SERVER" : 11,  "G_DBUS_ERROR_TIMEOUT" : 12,  "G_DBUS_ERROR_NO_NETWORK" : 13,  "G_DBUS_ERROR_ADDRESS_IN_USE" : 14,  "G_DBUS_ERROR_DISCONNECTED" : 15,  "G_DBUS_ERROR_INVALID_ARGS" : 16,  "G_DBUS_ERROR_FILE_NOT_FOUND" : 17,  "G_DBUS_ERROR_FILE_EXISTS" : 18,  "G_DBUS_ERROR_UNKNOWN_METHOD" : 19,  "G_DBUS_ERROR_TIMED_OUT" : 20,  "G_DBUS_ERROR_MATCH_RULE_NOT_FOUND" : 21,  "G_DBUS_ERROR_MATCH_RULE_INVALID" : 22,  "G_DBUS_ERROR_SPAWN_EXEC_FAILED" : 23,  "G_DBUS_ERROR_SPAWN_FORK_FAILED" : 24,  "G_DBUS_ERROR_SPAWN_CHILD_EXITED" : 25,  "G_DBUS_ERROR_SPAWN_CHILD_SIGNALED" : 26,  "G_DBUS_ERROR_SPAWN_FAILED" : 27,  "G_DBUS_ERROR_SPAWN_SETUP_FAILED" : 28,  "G_DBUS_ERROR_SPAWN_CONFIG_INVALID" : 29,  "G_DBUS_ERROR_SPAWN_SERVICE_INVALID" : 30,  "G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND" : 31,  "G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID" : 32,  "G_DBUS_ERROR_SPAWN_FILE_INVALID" : 33,  "G_DBUS_ERROR_SPAWN_NO_MEMORY" : 34,  "G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN" : 35,  "G_DBUS_ERROR_INVALID_SIGNATURE" : 36,  "G_DBUS_ERROR_INVALID_FILE_CONTENT" : 37,  "G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN" : 38,  "G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN" : 39,  "G_DBUS_ERROR_OBJECT_PATH_IN_USE" : 40, 
 "G_DBUS_CONNECTION_FLAGS_NONE" : 0,  "G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT" : 1,  "G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER" : 2,  "G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS" : 4,  "G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION" : 8,  "G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING" : 16, 
 "G_DBUS_CAPABILITY_FLAGS_NONE" : 0,  "G_DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING" : 1, 
 "G_DBUS_MESSAGE_FLAGS_NONE" : 0,  "G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED" : 1,  "G_DBUS_MESSAGE_FLAGS_NO_AUTO_START" : 2, 
 "G_DBUS_CALL_FLAGS_NONE" : 0,  "G_DBUS_CALL_FLAGS_NO_AUTO_START" : 1, 
 "G_DBUS_MESSAGE_TYPE_INVALID" : 0,  "G_DBUS_MESSAGE_TYPE_METHOD_CALL" : 1,  "G_DBUS_MESSAGE_TYPE_METHOD_RETURN" : 2,  "G_DBUS_MESSAGE_TYPE_ERROR" : 3,  "G_DBUS_MESSAGE_TYPE_SIGNAL" : 4, 
 "G_DBUS_MESSAGE_HEADER_FIELD_INVALID" : 0,  "G_DBUS_MESSAGE_HEADER_FIELD_PATH" : 1,  "G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE" : 2,  "G_DBUS_MESSAGE_HEADER_FIELD_MEMBER" : 3,  "G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME" : 4,  "G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL" : 5,  "G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION" : 6,  "G_DBUS_MESSAGE_HEADER_FIELD_SENDER" : 7,  "G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE" : 8,  "G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS" : 9, 
 "G_DBUS_PROPERTY_INFO_FLAGS_NONE" : 0,  "G_DBUS_PROPERTY_INFO_FLAGS_READABLE" : 1,  "G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE" : 2, 
 "G_DBUS_SUBTREE_FLAGS_NONE" : 0,  "G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES" : 1, 
 "G_DBUS_SIGNAL_FLAGS_NONE" : 0,  "G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE" : 1, 
 "G_DBUS_SERVER_FLAGS_NONE" : 0,  "G_DBUS_SERVER_FLAGS_RUN_IN_THREAD" : 1,  "G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS" : 2, 
 "G_DBUS_SEND_MESSAGE_FLAGS_NONE" : 0,  "G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL" : 1, 
 "G_CREDENTIALS_TYPE_INVALID" : 0,  "G_CREDENTIALS_TYPE_LINUX_UCRED" : 1,  "G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED" : 2,  "G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED" : 3, 
 "G_DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN" : "B",  "G_DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN" : "l", 
 "G_APPLICATION_FLAGS_NONE" : 0,  "G_APPLICATION_IS_SERVICE" : 1,  "G_APPLICATION_IS_LAUNCHER" : 2,  "G_APPLICATION_HANDLES_OPEN" : 4,  "G_APPLICATION_HANDLES_COMMAND_LINE" : 8,  "G_APPLICATION_SEND_ENVIRONMENT" : 16,  "G_APPLICATION_NON_UNIQUE" : 32, 
 "G_TLS_ERROR_UNAVAILABLE" : 0,  "G_TLS_ERROR_MISC" : 1,  "G_TLS_ERROR_BAD_CERTIFICATE" : 2,  "G_TLS_ERROR_NOT_TLS" : 3,  "G_TLS_ERROR_HANDSHAKE" : 4,  "G_TLS_ERROR_CERTIFICATE_REQUIRED" : 5,  "G_TLS_ERROR_EOF" : 6, 
 "G_TLS_CERTIFICATE_UNKNOWN_CA" : 1,  "G_TLS_CERTIFICATE_BAD_IDENTITY" : 2,  "G_TLS_CERTIFICATE_NOT_ACTIVATED" : 4,  "G_TLS_CERTIFICATE_EXPIRED" : 8,  "G_TLS_CERTIFICATE_REVOKED" : 16,  "G_TLS_CERTIFICATE_INSECURE" : 32,  "G_TLS_CERTIFICATE_GENERIC_ERROR" : 64,  "G_TLS_CERTIFICATE_VALIDATE_ALL" : 127, 
 "G_TLS_AUTHENTICATION_NONE" : 0,  "G_TLS_AUTHENTICATION_REQUESTED" : 1,  "G_TLS_AUTHENTICATION_REQUIRED" : 2, 
 "G_TLS_REHANDSHAKE_NEVER" : 0,  "G_TLS_REHANDSHAKE_SAFELY" : 1,  "G_TLS_REHANDSHAKE_UNSAFELY" : 2, 
 "G_TLS_INTERACTION_UNHANDLED" : 0,  "G_TLS_INTERACTION_HANDLED" : 1,  "G_TLS_INTERACTION_FAILED" : 2, 
 "G_DBUS_INTERFACE_SKELETON_FLAGS_NONE" : 0,  "G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD" : 1, 
 "G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE" : 0,  "G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START" : 1, 
 "G_TLS_DATABASE_LOOKUP_NONE" : 0,  "G_TLS_DATABASE_LOOKUP_KEYPAIR" : 1, 
 "G_TLS_DATABASE_VERIFY_NONE" : 0, 
 "G_IO_MODULE_SCOPE_NONE" : 0,  "G_IO_MODULE_SCOPE_BLOCK_DUPLICATES" : 1, 
 "PC_LINK_MAX" : 0,  "PC_MAX_CANON" : 1,  "PC_MAX_INPUT" : 2,  "PC_NAME_MAX" : 3,  "PC_PATH_MAX" : 4,  "PC_PIPE_BUF" : 5,  "PC_CHOWN_RESTRICTED" : 6,  "PC_NO_TRUNC" : 7,  "PC_VDISABLE" : 8,  "PC_SYNC_IO" : 9,  "PC_ASYNC_IO" : 10,  "PC_PRIO_IO" : 11,  "PC_SOCK_MAXBUF" : 12,  "PC_FILESIZEBITS" : 13,  "PC_REC_INCR_XFER_SIZE" : 14,  "PC_REC_MAX_XFER_SIZE" : 15,  "PC_REC_MIN_XFER_SIZE" : 16,  "PC_REC_XFER_ALIGN" : 17,  "PC_ALLOC_SIZE_MIN" : 18,  "PC_SYMLINK_MAX" : 19,  "PC_2_SYMLINKS" : 20, 
 "SC_ARG_MAX" : 0,  "SC_CHILD_MAX" : 1,  "SC_CLK_TCK" : 2,  "SC_NGROUPS_MAX" : 3,  "SC_OPEN_MAX" : 4,  "SC_STREAM_MAX" : 5,  "SC_TZNAME_MAX" : 6,  "SC_JOB_CONTROL" : 7,  "SC_SAVED_IDS" : 8,  "SC_REALTIME_SIGNALS" : 9,  "SC_PRIORITY_SCHEDULING" : 10,  "SC_TIMERS" : 11,  "SC_ASYNCHRONOUS_IO" : 12,  "SC_PRIORITIZED_IO" : 13,  "SC_SYNCHRONIZED_IO" : 14,  "SC_FSYNC" : 15,  "SC_MAPPED_FILES" : 16,  "SC_MEMLOCK" : 17,  "SC_MEMLOCK_RANGE" : 18,  "SC_MEMORY_PROTECTION" : 19,  "SC_MESSAGE_PASSING" : 20,  "SC_SEMAPHORES" : 21,  "SC_SHARED_MEMORY_OBJECTS" : 22,  "SC_AIO_LISTIO_MAX" : 23,  "SC_AIO_MAX" : 24,  "SC_AIO_PRIO_DELTA_MAX" : 25,  "SC_DELAYTIMER_MAX" : 26,  "SC_MQ_OPEN_MAX" : 27,  "SC_MQ_PRIO_MAX" : 28,  "SC_VERSION" : 29,  "SC_PAGESIZE" : 30,  "SC_RTSIG_MAX" : 31,  "SC_SEM_NSEMS_MAX" : 32,  "SC_SEM_VALUE_MAX" : 33,  "SC_SIGQUEUE_MAX" : 34,  "SC_TIMER_MAX" : 35,  "SC_BC_BASE_MAX" : 36,  "SC_BC_DIM_MAX" : 37,  "SC_BC_SCALE_MAX" : 38,  "SC_BC_STRING_MAX" : 39,  "SC_COLL_WEIGHTS_MAX" : 40,  "SC_EQUIV_CLASS_MAX" : 41,  "SC_EXPR_NEST_MAX" : 42,  "SC_LINE_MAX" : 43,  "SC_RE_DUP_MAX" : 44,  "SC_CHARCLASS_NAME_MAX" : 45,  "SC_2_VERSION" : 46,  "SC_2_C_BIND" : 47,  "SC_2_C_DEV" : 48,  "SC_2_FORT_DEV" : 49,  "SC_2_FORT_RUN" : 50,  "SC_2_SW_DEV" : 51,  "SC_2_LOCALEDEF" : 52,  "SC_PII" : 53,  "SC_PII_XTI" : 54,  "SC_PII_SOCKET" : 55,  "SC_PII_INTERNET" : 56,  "SC_PII_OSI" : 57,  "SC_POLL" : 58,  "SC_SELECT" : 59,  "SC_UIO_MAXIOV" : 60,  "SC_IOV_MAX" : 60,  "SC_PII_INTERNET_STREAM" : 61,  "SC_PII_INTERNET_DGRAM" : 62,  "SC_PII_OSI_COTS" : 63,  "SC_PII_OSI_CLTS" : 64,  "SC_PII_OSI_M" : 65,  "SC_T_IOV_MAX" : 66,  "SC_THREADS" : 67,  "SC_THREAD_SAFE_FUNCTIONS" : 68,  "SC_GETGR_R_SIZE_MAX" : 69,  "SC_GETPW_R_SIZE_MAX" : 70,  "SC_LOGIN_NAME_MAX" : 71,  "SC_TTY_NAME_MAX" : 72,  "SC_THREAD_DESTRUCTOR_ITERATIONS" : 73,  "SC_THREAD_KEYS_MAX" : 74,  "SC_THREAD_STACK_MIN" : 75,  "SC_THREAD_THREADS_MAX" : 76,  "SC_THREAD_ATTR_STACKADDR" : 77,  "SC_THREAD_ATTR_STACKSIZE" : 78,  "SC_THREAD_PRIORITY_SCHEDULING" : 79,  "SC_THREAD_PRIO_INHERIT" : 80,  "SC_THREAD_PRIO_PROTECT" : 81,  "SC_THREAD_PROCESS_SHARED" : 82,  "SC_NPROCESSORS_CONF" : 83,  "SC_NPROCESSORS_ONLN" : 84,  "SC_PHYS_PAGES" : 85,  "SC_AVPHYS_PAGES" : 86,  "SC_ATEXIT_MAX" : 87,  "SC_PASS_MAX" : 88,  "SC_XOPEN_VERSION" : 89,  "SC_XOPEN_XCU_VERSION" : 90,  "SC_XOPEN_UNIX" : 91,  "SC_XOPEN_CRYPT" : 92,  "SC_XOPEN_ENH_I18N" : 93,  "SC_XOPEN_SHM" : 94,  "SC_2_CHAR_TERM" : 95,  "SC_2_C_VERSION" : 96,  "SC_2_UPE" : 97,  "SC_XOPEN_XPG2" : 98,  "SC_XOPEN_XPG3" : 99,  "SC_XOPEN_XPG4" : 100,  "SC_CHAR_BIT" : 101,  "SC_CHAR_MAX" : 102,  "SC_CHAR_MIN" : 103,  "SC_INT_MAX" : 104,  "SC_INT_MIN" : 105,  "SC_LONG_BIT" : 106,  "SC_WORD_BIT" : 107,  "SC_MB_LEN_MAX" : 108,  "SC_NZERO" : 109,  "SC_SSIZE_MAX" : 110,  "SC_SCHAR_MAX" : 111,  "SC_SCHAR_MIN" : 112,  "SC_SHRT_MAX" : 113,  "SC_SHRT_MIN" : 114,  "SC_UCHAR_MAX" : 115,  "SC_UINT_MAX" : 116,  "SC_ULONG_MAX" : 117,  "SC_USHRT_MAX" : 118,  "SC_NL_ARGMAX" : 119,  "SC_NL_LANGMAX" : 120,  "SC_NL_MSGMAX" : 121,  "SC_NL_NMAX" : 122,  "SC_NL_SETMAX" : 123,  "SC_NL_TEXTMAX" : 124,  "SC_XBS5_ILP32_OFF32" : 125,  "SC_XBS5_ILP32_OFFBIG" : 126,  "SC_XBS5_LP64_OFF64" : 127,  "SC_XBS5_LPBIG_OFFBIG" : 128,  "SC_XOPEN_LEGACY" : 129,  "SC_XOPEN_REALTIME" : 130,  "SC_XOPEN_REALTIME_THREADS" : 131,  "SC_ADVISORY_INFO" : 132,  "SC_BARRIERS" : 133,  "SC_BASE" : 134,  "SC_C_LANG_SUPPORT" : 135,  "SC_C_LANG_SUPPORT_R" : 136,  "SC_CLOCK_SELECTION" : 137,  "SC_CPUTIME" : 138,  "SC_THREAD_CPUTIME" : 139,  "SC_DEVICE_IO" : 140,  "SC_DEVICE_SPECIFIC" : 141,  "SC_DEVICE_SPECIFIC_R" : 142,  "SC_FD_MGMT" : 143,  "SC_FIFO" : 144,  "SC_PIPE" : 145,  "SC_FILE_ATTRIBUTES" : 146,  "SC_FILE_LOCKING" : 147,  "SC_FILE_SYSTEM" : 148,  "SC_MONOTONIC_CLOCK" : 149,  "SC_MULTI_PROCESS" : 150,  "SC_SINGLE_PROCESS" : 151,  "SC_NETWORKING" : 152,  "SC_READER_WRITER_LOCKS" : 153,  "SC_SPIN_LOCKS" : 154,  "SC_REGEXP" : 155,  "SC_REGEX_VERSION" : 156,  "SC_SHELL" : 157,  "SC_SIGNALS" : 158,  "SC_SPAWN" : 159,  "SC_SPORADIC_SERVER" : 160,  "SC_THREAD_SPORADIC_SERVER" : 161,  "SC_SYSTEM_DATABASE" : 162,  "SC_SYSTEM_DATABASE_R" : 163,  "SC_TIMEOUTS" : 164,  "SC_TYPED_MEMORY_OBJECTS" : 165,  "SC_USER_GROUPS" : 166,  "SC_USER_GROUPS_R" : 167,  "SC_2_PBS" : 168,  "SC_2_PBS_ACCOUNTING" : 169,  "SC_2_PBS_LOCATE" : 170,  "SC_2_PBS_MESSAGE" : 171,  "SC_2_PBS_TRACK" : 172,  "SC_SYMLOOP_MAX" : 173,  "SC_STREAMS" : 174,  "SC_2_PBS_CHECKPOINT" : 175,  "SC_V6_ILP32_OFF32" : 176,  "SC_V6_ILP32_OFFBIG" : 177,  "SC_V6_LP64_OFF64" : 178,  "SC_V6_LPBIG_OFFBIG" : 179,  "SC_HOST_NAME_MAX" : 180,  "SC_TRACE" : 181,  "SC_TRACE_EVENT_FILTER" : 182,  "SC_TRACE_INHERIT" : 183,  "SC_TRACE_LOG" : 184,  "SC_LEVEL1_ICACHE_SIZE" : 185,  "SC_LEVEL1_ICACHE_ASSOC" : 186,  "SC_LEVEL1_ICACHE_LINESIZE" : 187,  "SC_LEVEL1_DCACHE_SIZE" : 188,  "SC_LEVEL1_DCACHE_ASSOC" : 189,  "SC_LEVEL1_DCACHE_LINESIZE" : 190,  "SC_LEVEL2_CACHE_SIZE" : 191,  "SC_LEVEL2_CACHE_ASSOC" : 192,  "SC_LEVEL2_CACHE_LINESIZE" : 193,  "SC_LEVEL3_CACHE_SIZE" : 194,  "SC_LEVEL3_CACHE_ASSOC" : 195,  "SC_LEVEL3_CACHE_LINESIZE" : 196,  "SC_LEVEL4_CACHE_SIZE" : 197,  "SC_LEVEL4_CACHE_ASSOC" : 198,  "SC_LEVEL4_CACHE_LINESIZE" : 199,  "SC_IPV6" : 265,  "SC_RAW_SOCKETS" : 266,  "SC_V7_ILP32_OFF32" : 267,  "SC_V7_ILP32_OFFBIG" : 268,  "SC_V7_LP64_OFF64" : 269,  "SC_V7_LPBIG_OFFBIG" : 270,  "SC_SS_REPL_MAX" : 271,  "SC_TRACE_EVENT_NAME_MAX" : 272,  "SC_TRACE_NAME_MAX" : 273,  "SC_TRACE_SYS_MAX" : 274,  "SC_TRACE_USER_EVENT_MAX" : 275,  "SC_XOPEN_STREAMS" : 276,  "SC_THREAD_ROBUST_PRIO_INHERIT" : 277,  "SC_THREAD_ROBUST_PRIO_PROTECT" : 278, 
 "CS_PATH" : 0,  "CS_V6_WIDTH_RESTRICTED_ENVS" : 1,  "CS_GNU_LIBC_VERSION" : 2,  "CS_GNU_LIBPTHREAD_VERSION" : 3,  "CS_V5_WIDTH_RESTRICTED_ENVS" : 4,  "CS_V7_WIDTH_RESTRICTED_ENVS" : 5,  "CS_LFS_CFLAGS" : 1000,  "CS_LFS_LDFLAGS" : 1001,  "CS_LFS_LIBS" : 1002,  "CS_LFS_LINTFLAGS" : 1003,  "CS_LFS64_CFLAGS" : 1004,  "CS_LFS64_LDFLAGS" : 1005,  "CS_LFS64_LIBS" : 1006,  "CS_LFS64_LINTFLAGS" : 1007,  "CS_XBS5_ILP32_OFF32_CFLAGS" : 1100,  "CS_XBS5_ILP32_OFF32_LDFLAGS" : 1101,  "CS_XBS5_ILP32_OFF32_LIBS" : 1102,  "CS_XBS5_ILP32_OFF32_LINTFLAGS" : 1103,  "CS_XBS5_ILP32_OFFBIG_CFLAGS" : 1104,  "CS_XBS5_ILP32_OFFBIG_LDFLAGS" : 1105,  "CS_XBS5_ILP32_OFFBIG_LIBS" : 1106,  "CS_XBS5_ILP32_OFFBIG_LINTFLAGS" : 1107,  "CS_XBS5_LP64_OFF64_CFLAGS" : 1108,  "CS_XBS5_LP64_OFF64_LDFLAGS" : 1109,  "CS_XBS5_LP64_OFF64_LIBS" : 1110,  "CS_XBS5_LP64_OFF64_LINTFLAGS" : 1111,  "CS_XBS5_LPBIG_OFFBIG_CFLAGS" : 1112,  "CS_XBS5_LPBIG_OFFBIG_LDFLAGS" : 1113,  "CS_XBS5_LPBIG_OFFBIG_LIBS" : 1114,  "CS_XBS5_LPBIG_OFFBIG_LINTFLAGS" : 1115,  "CS_POSIX_V6_ILP32_OFF32_CFLAGS" : 1116,  "CS_POSIX_V6_ILP32_OFF32_LDFLAGS" : 1117,  "CS_POSIX_V6_ILP32_OFF32_LIBS" : 1118,  "CS_POSIX_V6_ILP32_OFF32_LINTFLAGS" : 1119,  "CS_POSIX_V6_ILP32_OFFBIG_CFLAGS" : 1120,  "CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS" : 1121,  "CS_POSIX_V6_ILP32_OFFBIG_LIBS" : 1122,  "CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS" : 1123,  "CS_POSIX_V6_LP64_OFF64_CFLAGS" : 1124,  "CS_POSIX_V6_LP64_OFF64_LDFLAGS" : 1125,  "CS_POSIX_V6_LP64_OFF64_LIBS" : 1126,  "CS_POSIX_V6_LP64_OFF64_LINTFLAGS" : 1127,  "CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS" : 1128,  "CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS" : 1129,  "CS_POSIX_V6_LPBIG_OFFBIG_LIBS" : 1130,  "CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS" : 1131,  "CS_POSIX_V7_ILP32_OFF32_CFLAGS" : 1132,  "CS_POSIX_V7_ILP32_OFF32_LDFLAGS" : 1133,  "CS_POSIX_V7_ILP32_OFF32_LIBS" : 1134,  "CS_POSIX_V7_ILP32_OFF32_LINTFLAGS" : 1135,  "CS_POSIX_V7_ILP32_OFFBIG_CFLAGS" : 1136,  "CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS" : 1137,  "CS_POSIX_V7_ILP32_OFFBIG_LIBS" : 1138,  "CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS" : 1139,  "CS_POSIX_V7_LP64_OFF64_CFLAGS" : 1140,  "CS_POSIX_V7_LP64_OFF64_LDFLAGS" : 1141,  "CS_POSIX_V7_LP64_OFF64_LIBS" : 1142,  "CS_POSIX_V7_LP64_OFF64_LINTFLAGS" : 1143,  "CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS" : 1144,  "CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS" : 1145,  "CS_POSIX_V7_LPBIG_OFFBIG_LIBS" : 1146,  "CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS" : 1147,  "CS_V6_ENV" : 1148,  "CS_V7_ENV" : 1149, 
 "G_MODULE_BIND_LAZY" : 1,  "G_MODULE_BIND_LOCAL" : 2,  "G_MODULE_BIND_MASK" : 3, 
 "G_SETTINGS_BIND_DEFAULT" : 0,  "G_SETTINGS_BIND_GET" : 1,  "G_SETTINGS_BIND_SET" : 2,  "G_SETTINGS_BIND_NO_SENSITIVITY" : 4,  "G_SETTINGS_BIND_GET_NO_CHANGES" : 8,  "G_SETTINGS_BIND_INVERT_BOOLEAN" : 16, 
 "PANGO_COVERAGE_NONE" : 0,  "PANGO_COVERAGE_FALLBACK" : 1,  "PANGO_COVERAGE_APPROXIMATE" : 2,  "PANGO_COVERAGE_EXACT" : 3, 
 "PANGO_GRAVITY_SOUTH" : 0,  "PANGO_GRAVITY_EAST" : 1,  "PANGO_GRAVITY_NORTH" : 2,  "PANGO_GRAVITY_WEST" : 3,  "PANGO_GRAVITY_AUTO" : 4, 
 "PANGO_GRAVITY_HINT_NATURAL" : 0,  "PANGO_GRAVITY_HINT_STRONG" : 1,  "PANGO_GRAVITY_HINT_LINE" : 2, 
 "PANGO_SCRIPT_INVALID_CODE" : -1,  "PANGO_SCRIPT_COMMON" : 0,  "PANGO_SCRIPT_INHERITED" : 1,  "PANGO_SCRIPT_ARABIC" : 2,  "PANGO_SCRIPT_ARMENIAN" : 3,  "PANGO_SCRIPT_BENGALI" : 4,  "PANGO_SCRIPT_BOPOMOFO" : 5,  "PANGO_SCRIPT_CHEROKEE" : 6,  "PANGO_SCRIPT_COPTIC" : 7,  "PANGO_SCRIPT_CYRILLIC" : 8,  "PANGO_SCRIPT_DESERET" : 9,  "PANGO_SCRIPT_DEVANAGARI" : 10,  "PANGO_SCRIPT_ETHIOPIC" : 11,  "PANGO_SCRIPT_GEORGIAN" : 12,  "PANGO_SCRIPT_GOTHIC" : 13,  "PANGO_SCRIPT_GREEK" : 14,  "PANGO_SCRIPT_GUJARATI" : 15,  "PANGO_SCRIPT_GURMUKHI" : 16,  "PANGO_SCRIPT_HAN" : 17,  "PANGO_SCRIPT_HANGUL" : 18,  "PANGO_SCRIPT_HEBREW" : 19,  "PANGO_SCRIPT_HIRAGANA" : 20,  "PANGO_SCRIPT_KANNADA" : 21,  "PANGO_SCRIPT_KATAKANA" : 22,  "PANGO_SCRIPT_KHMER" : 23,  "PANGO_SCRIPT_LAO" : 24,  "PANGO_SCRIPT_LATIN" : 25,  "PANGO_SCRIPT_MALAYALAM" : 26,  "PANGO_SCRIPT_MONGOLIAN" : 27,  "PANGO_SCRIPT_MYANMAR" : 28,  "PANGO_SCRIPT_OGHAM" : 29,  "PANGO_SCRIPT_OLD_ITALIC" : 30,  "PANGO_SCRIPT_ORIYA" : 31,  "PANGO_SCRIPT_RUNIC" : 32,  "PANGO_SCRIPT_SINHALA" : 33,  "PANGO_SCRIPT_SYRIAC" : 34,  "PANGO_SCRIPT_TAMIL" : 35,  "PANGO_SCRIPT_TELUGU" : 36,  "PANGO_SCRIPT_THAANA" : 37,  "PANGO_SCRIPT_THAI" : 38,  "PANGO_SCRIPT_TIBETAN" : 39,  "PANGO_SCRIPT_CANADIAN_ABORIGINAL" : 40,  "PANGO_SCRIPT_YI" : 41,  "PANGO_SCRIPT_TAGALOG" : 42,  "PANGO_SCRIPT_HANUNOO" : 43,  "PANGO_SCRIPT_BUHID" : 44,  "PANGO_SCRIPT_TAGBANWA" : 45,  "PANGO_SCRIPT_BRAILLE" : 46,  "PANGO_SCRIPT_CYPRIOT" : 47,  "PANGO_SCRIPT_LIMBU" : 48,  "PANGO_SCRIPT_OSMANYA" : 49,  "PANGO_SCRIPT_SHAVIAN" : 50,  "PANGO_SCRIPT_LINEAR_B" : 51,  "PANGO_SCRIPT_TAI_LE" : 52,  "PANGO_SCRIPT_UGARITIC" : 53,  "PANGO_SCRIPT_NEW_TAI_LUE" : 54,  "PANGO_SCRIPT_BUGINESE" : 55,  "PANGO_SCRIPT_GLAGOLITIC" : 56,  "PANGO_SCRIPT_TIFINAGH" : 57,  "PANGO_SCRIPT_SYLOTI_NAGRI" : 58,  "PANGO_SCRIPT_OLD_PERSIAN" : 59,  "PANGO_SCRIPT_KHAROSHTHI" : 60,  "PANGO_SCRIPT_UNKNOWN" : 61,  "PANGO_SCRIPT_BALINESE" : 62,  "PANGO_SCRIPT_CUNEIFORM" : 63,  "PANGO_SCRIPT_PHOENICIAN" : 64,  "PANGO_SCRIPT_PHAGS_PA" : 65,  "PANGO_SCRIPT_NKO" : 66,  "PANGO_SCRIPT_KAYAH_LI" : 67,  "PANGO_SCRIPT_LEPCHA" : 68,  "PANGO_SCRIPT_REJANG" : 69,  "PANGO_SCRIPT_SUNDANESE" : 70,  "PANGO_SCRIPT_SAURASHTRA" : 71,  "PANGO_SCRIPT_CHAM" : 72,  "PANGO_SCRIPT_OL_CHIKI" : 73,  "PANGO_SCRIPT_VAI" : 74,  "PANGO_SCRIPT_CARIAN" : 75,  "PANGO_SCRIPT_LYCIAN" : 76,  "PANGO_SCRIPT_LYDIAN" : 77, 
 "PANGO_BIDI_TYPE_L" : 0,  "PANGO_BIDI_TYPE_LRE" : 1,  "PANGO_BIDI_TYPE_LRO" : 2,  "PANGO_BIDI_TYPE_R" : 3,  "PANGO_BIDI_TYPE_AL" : 4,  "PANGO_BIDI_TYPE_RLE" : 5,  "PANGO_BIDI_TYPE_RLO" : 6,  "PANGO_BIDI_TYPE_PDF" : 7,  "PANGO_BIDI_TYPE_EN" : 8,  "PANGO_BIDI_TYPE_ES" : 9,  "PANGO_BIDI_TYPE_ET" : 10,  "PANGO_BIDI_TYPE_AN" : 11,  "PANGO_BIDI_TYPE_CS" : 12,  "PANGO_BIDI_TYPE_NSM" : 13,  "PANGO_BIDI_TYPE_BN" : 14,  "PANGO_BIDI_TYPE_B" : 15,  "PANGO_BIDI_TYPE_S" : 16,  "PANGO_BIDI_TYPE_WS" : 17,  "PANGO_BIDI_TYPE_ON" : 18, 
 "PANGO_DIRECTION_LTR" : 0,  "PANGO_DIRECTION_RTL" : 1,  "PANGO_DIRECTION_TTB_LTR" : 2,  "PANGO_DIRECTION_TTB_RTL" : 3,  "PANGO_DIRECTION_WEAK_LTR" : 4,  "PANGO_DIRECTION_WEAK_RTL" : 5,  "PANGO_DIRECTION_NEUTRAL" : 6, 
 "PANGO_STYLE_NORMAL" : 0,  "PANGO_STYLE_OBLIQUE" : 1,  "PANGO_STYLE_ITALIC" : 2, 
 "PANGO_VARIANT_NORMAL" : 0,  "PANGO_VARIANT_SMALL_CAPS" : 1, 
 "PANGO_WEIGHT_THIN" : 100,  "PANGO_WEIGHT_ULTRALIGHT" : 200,  "PANGO_WEIGHT_LIGHT" : 300,  "PANGO_WEIGHT_BOOK" : 380,  "PANGO_WEIGHT_NORMAL" : 400,  "PANGO_WEIGHT_MEDIUM" : 500,  "PANGO_WEIGHT_SEMIBOLD" : 600,  "PANGO_WEIGHT_BOLD" : 700,  "PANGO_WEIGHT_ULTRABOLD" : 800,  "PANGO_WEIGHT_HEAVY" : 900,  "PANGO_WEIGHT_ULTRAHEAVY" : 1000, 
 "PANGO_STRETCH_ULTRA_CONDENSED" : 0,  "PANGO_STRETCH_EXTRA_CONDENSED" : 1,  "PANGO_STRETCH_CONDENSED" : 2,  "PANGO_STRETCH_SEMI_CONDENSED" : 3,  "PANGO_STRETCH_NORMAL" : 4,  "PANGO_STRETCH_SEMI_EXPANDED" : 5,  "PANGO_STRETCH_EXPANDED" : 6,  "PANGO_STRETCH_EXTRA_EXPANDED" : 7,  "PANGO_STRETCH_ULTRA_EXPANDED" : 8, 
 "PANGO_FONT_MASK_FAMILY" : 1,  "PANGO_FONT_MASK_STYLE" : 2,  "PANGO_FONT_MASK_VARIANT" : 4,  "PANGO_FONT_MASK_WEIGHT" : 8,  "PANGO_FONT_MASK_STRETCH" : 16,  "PANGO_FONT_MASK_SIZE" : 32,  "PANGO_FONT_MASK_GRAVITY" : 64, 
 "PANGO_ATTR_INVALID" : 0,  "PANGO_ATTR_LANGUAGE" : 1,  "PANGO_ATTR_FAMILY" : 2,  "PANGO_ATTR_STYLE" : 3,  "PANGO_ATTR_WEIGHT" : 4,  "PANGO_ATTR_VARIANT" : 5,  "PANGO_ATTR_STRETCH" : 6,  "PANGO_ATTR_SIZE" : 7,  "PANGO_ATTR_FONT_DESC" : 8,  "PANGO_ATTR_FOREGROUND" : 9,  "PANGO_ATTR_BACKGROUND" : 10,  "PANGO_ATTR_UNDERLINE" : 11,  "PANGO_ATTR_STRIKETHROUGH" : 12,  "PANGO_ATTR_RISE" : 13,  "PANGO_ATTR_SHAPE" : 14,  "PANGO_ATTR_SCALE" : 15,  "PANGO_ATTR_FALLBACK" : 16,  "PANGO_ATTR_LETTER_SPACING" : 17,  "PANGO_ATTR_UNDERLINE_COLOR" : 18,  "PANGO_ATTR_STRIKETHROUGH_COLOR" : 19,  "PANGO_ATTR_ABSOLUTE_SIZE" : 20,  "PANGO_ATTR_GRAVITY" : 21,  "PANGO_ATTR_GRAVITY_HINT" : 22, 
 "PANGO_UNDERLINE_NONE" : 0,  "PANGO_UNDERLINE_SINGLE" : 1,  "PANGO_UNDERLINE_DOUBLE" : 2,  "PANGO_UNDERLINE_LOW" : 3,  "PANGO_UNDERLINE_ERROR" : 4, 
 "PANGO_TAB_LEFT" : 0, 
 "PANGO_ALIGN_LEFT" : 0,  "PANGO_ALIGN_CENTER" : 1,  "PANGO_ALIGN_RIGHT" : 2, 
 "PANGO_WRAP_WORD" : 0,  "PANGO_WRAP_CHAR" : 1,  "PANGO_WRAP_WORD_CHAR" : 2, 
 "PANGO_ELLIPSIZE_NONE" : 0,  "PANGO_ELLIPSIZE_START" : 1,  "PANGO_ELLIPSIZE_MIDDLE" : 2,  "PANGO_ELLIPSIZE_END" : 3, 
 "PANGO_RENDER_PART_FOREGROUND" : 0,  "PANGO_RENDER_PART_BACKGROUND" : 1,  "PANGO_RENDER_PART_UNDERLINE" : 2,  "PANGO_RENDER_PART_STRIKETHROUGH" : 3, 
 "GDK_LSB_FIRST" : 0,  "GDK_MSB_FIRST" : 1, 
 "GDK_SHIFT_MASK" : 1,  "GDK_LOCK_MASK" : 2,  "GDK_CONTROL_MASK" : 4,  "GDK_MOD1_MASK" : 8,  "GDK_MOD2_MASK" : 16,  "GDK_MOD3_MASK" : 32,  "GDK_MOD4_MASK" : 64,  "GDK_MOD5_MASK" : 128,  "GDK_BUTTON1_MASK" : 256,  "GDK_BUTTON2_MASK" : 512,  "GDK_BUTTON3_MASK" : 65536,  "GDK_BUTTON4_MASK" : 131072,  "GDK_BUTTON5_MASK" : 262144,  "GDK_MODIFIER_RESERVED_13_MASK" : 524288,  "GDK_MODIFIER_RESERVED_14_MASK" : 1048576,  "GDK_MODIFIER_RESERVED_15_MASK" : 2097152,  "GDK_MODIFIER_RESERVED_16_MASK" : 4194304,  "GDK_MODIFIER_RESERVED_17_MASK" : 8388608,  "GDK_MODIFIER_RESERVED_18_MASK" : 16777216,  "GDK_MODIFIER_RESERVED_19_MASK" : 33554432,  "GDK_MODIFIER_RESERVED_20_MASK" : 4294967296,  "GDK_MODIFIER_RESERVED_21_MASK" : 8589934592,  "GDK_MODIFIER_RESERVED_22_MASK" : 17179869184,  "GDK_MODIFIER_RESERVED_23_MASK" : 34359738368,  "GDK_MODIFIER_RESERVED_24_MASK" : 68719476736,  "GDK_MODIFIER_RESERVED_25_MASK" : 137438953472,  "GDK_SUPER_MASK" : 274877906944,  "GDK_HYPER_MASK" : 549755813888,  "GDK_META_MASK" : 1099511627776,  "GDK_MODIFIER_RESERVED_29_MASK" : 2199023255552,  "GDK_RELEASE_MASK" : 281474976710656,  "GDK_MODIFIER_MASK" : 1543512063, 
 "GDK_OK" : 0,  "GDK_ERROR" : -1,  "GDK_ERROR_PARAM" : -2,  "GDK_ERROR_FILE" : -3,  "GDK_ERROR_MEM" : -4, 
 "GDK_OWNERSHIP_NONE" : 0,  "GDK_OWNERSHIP_WINDOW" : 1,  "GDK_OWNERSHIP_APPLICATION" : 2, 
 "GDK_GRAB_SUCCESS" : 0,  "GDK_GRAB_ALREADY_GRABBED" : 1,  "GDK_GRAB_INVALID_TIME" : 2,  "GDK_GRAB_NOT_VIEWABLE" : 3,  "GDK_GRAB_FROZEN" : 4, 
 "GDK_EXPOSURE_MASK" : 2,  "GDK_POINTER_MOTION_MASK" : 4,  "GDK_POINTER_MOTION_HINT_MASK" : 8,  "GDK_BUTTON_MOTION_MASK" : 16,  "GDK_BUTTON1_MOTION_MASK" : 32,  "GDK_BUTTON2_MOTION_MASK" : 64,  "GDK_BUTTON3_MOTION_MASK" : 128,  "GDK_BUTTON_PRESS_MASK" : 256,  "GDK_BUTTON_RELEASE_MASK" : 512,  "GDK_KEY_PRESS_MASK" : 65536,  "GDK_KEY_RELEASE_MASK" : 131072,  "GDK_ENTER_NOTIFY_MASK" : 262144,  "GDK_LEAVE_NOTIFY_MASK" : 524288,  "GDK_FOCUS_CHANGE_MASK" : 1048576,  "GDK_STRUCTURE_MASK" : 2097152,  "GDK_PROPERTY_CHANGE_MASK" : 4194304,  "GDK_VISIBILITY_NOTIFY_MASK" : 8388608,  "GDK_PROXIMITY_IN_MASK" : 16777216,  "GDK_PROXIMITY_OUT_MASK" : 33554432,  "GDK_SUBSTRUCTURE_MASK" : 4294967296,  "GDK_SCROLL_MASK" : 8589934592,  "GDK_ALL_EVENTS_MASK" : 4194302, 
 "GDK_EXTENSION_EVENTS_NONE" : 0,  "GDK_EXTENSION_EVENTS_ALL" : 1,  "GDK_EXTENSION_EVENTS_CURSOR" : 2, 
 "GDK_SOURCE_MOUSE" : 0,  "GDK_SOURCE_PEN" : 1,  "GDK_SOURCE_ERASER" : 2,  "GDK_SOURCE_CURSOR" : 3,  "GDK_SOURCE_KEYBOARD" : 4, 
 "GDK_MODE_DISABLED" : 0,  "GDK_MODE_SCREEN" : 1,  "GDK_MODE_WINDOW" : 2, 
 "GDK_AXIS_IGNORE" : 0,  "GDK_AXIS_X" : 1,  "GDK_AXIS_Y" : 2,  "GDK_AXIS_PRESSURE" : 3,  "GDK_AXIS_XTILT" : 4,  "GDK_AXIS_YTILT" : 5,  "GDK_AXIS_WHEEL" : 6,  "GDK_AXIS_LAST" : 7, 
 "GDK_DEVICE_TYPE_MASTER" : 0,  "GDK_DEVICE_TYPE_SLAVE" : 1,  "GDK_DEVICE_TYPE_FLOATING" : 2, 
 "GDK_ACTION_DEFAULT" : 1,  "GDK_ACTION_COPY" : 2,  "GDK_ACTION_MOVE" : 4,  "GDK_ACTION_LINK" : 8,  "GDK_ACTION_PRIVATE" : 16,  "GDK_ACTION_ASK" : 32, 
 "GDK_DRAG_PROTO_NONE" : 0,  "GDK_DRAG_PROTO_MOTIF" : 1,  "GDK_DRAG_PROTO_XDND" : 2,  "GDK_DRAG_PROTO_ROOTWIN" : 3,  "GDK_DRAG_PROTO_WIN32_DROPFILES" : 4,  "GDK_DRAG_PROTO_OLE2" : 5,  "GDK_DRAG_PROTO_LOCAL" : 6, 
 "GDK_FILTER_CONTINUE" : 0,  "GDK_FILTER_TRANSLATE" : 1,  "GDK_FILTER_REMOVE" : 2, 
 "GDK_NOTHING" : -1,  "GDK_DELETE" : 0,  "GDK_DESTROY" : 1,  "GDK_EXPOSE" : 2,  "GDK_MOTION_NOTIFY" : 3,  "GDK_BUTTON_PRESS" : 4,  "GDK_2BUTTON_PRESS" : 5,  "GDK_3BUTTON_PRESS" : 6,  "GDK_BUTTON_RELEASE" : 7,  "GDK_KEY_PRESS" : 8,  "GDK_KEY_RELEASE" : 9,  "GDK_ENTER_NOTIFY" : 10,  "GDK_LEAVE_NOTIFY" : 11,  "GDK_FOCUS_CHANGE" : 12,  "GDK_CONFIGURE" : 13,  "GDK_MAP" : 14,  "GDK_UNMAP" : 15,  "GDK_PROPERTY_NOTIFY" : 16,  "GDK_SELECTION_CLEAR" : 17,  "GDK_SELECTION_REQUEST" : 18,  "GDK_SELECTION_NOTIFY" : 19,  "GDK_PROXIMITY_IN" : 20,  "GDK_PROXIMITY_OUT" : 21,  "GDK_DRAG_ENTER" : 22,  "GDK_DRAG_LEAVE" : 23,  "GDK_DRAG_MOTION" : 24,  "GDK_DRAG_STATUS" : 25,  "GDK_DROP_START" : 26,  "GDK_DROP_FINISHED" : 27,  "GDK_CLIENT_EVENT" : 28,  "GDK_VISIBILITY_NOTIFY" : 29,  "GDK_SCROLL" : 31,  "GDK_WINDOW_STATE" : 32,  "GDK_SETTING" : 33,  "GDK_OWNER_CHANGE" : 34,  "GDK_GRAB_BROKEN" : 35,  "GDK_DAMAGE" : 36,  "GDK_EVENT_LAST" : 37, 
 "GDK_VISIBILITY_UNOBSCURED" : 0,  "GDK_VISIBILITY_PARTIAL" : 1,  "GDK_VISIBILITY_FULLY_OBSCURED" : 2, 
 "GDK_SCROLL_UP" : 0,  "GDK_SCROLL_DOWN" : 1,  "GDK_SCROLL_LEFT" : 2,  "GDK_SCROLL_RIGHT" : 3, 
 "GDK_NOTIFY_ANCESTOR" : 0,  "GDK_NOTIFY_VIRTUAL" : 1,  "GDK_NOTIFY_INFERIOR" : 2,  "GDK_NOTIFY_NONLINEAR" : 3,  "GDK_NOTIFY_NONLINEAR_VIRTUAL" : 4,  "GDK_NOTIFY_UNKNOWN" : 5, 
 "GDK_CROSSING_NORMAL" : 0,  "GDK_CROSSING_GRAB" : 1,  "GDK_CROSSING_UNGRAB" : 2,  "GDK_CROSSING_GTK_GRAB" : 3,  "GDK_CROSSING_GTK_UNGRAB" : 4,  "GDK_CROSSING_STATE_CHANGED" : 5, 
 "GDK_PROPERTY_NEW_VALUE" : 0,  "GDK_PROPERTY_DELETE" : 1, 
 "GDK_WINDOW_STATE_WITHDRAWN" : 1,  "GDK_WINDOW_STATE_ICONIFIED" : 2,  "GDK_WINDOW_STATE_MAXIMIZED" : 4,  "GDK_WINDOW_STATE_STICKY" : 8,  "GDK_WINDOW_STATE_FULLSCREEN" : 16,  "GDK_WINDOW_STATE_ABOVE" : 32,  "GDK_WINDOW_STATE_BELOW" : 64, 
 "GDK_SETTING_ACTION_NEW" : 0,  "GDK_SETTING_ACTION_CHANGED" : 1,  "GDK_SETTING_ACTION_DELETED" : 2, 
 "GDK_OWNER_CHANGE_NEW_OWNER" : 0,  "GDK_OWNER_CHANGE_DESTROY" : 1,  "GDK_OWNER_CHANGE_CLOSE" : 2, 
 "GDK_PIXBUF_ALPHA_BILEVEL" : 0,  "GDK_PIXBUF_ALPHA_FULL" : 1, 
 "GDK_COLORSPACE_RGB" : 0, 
 "GDK_PIXBUF_ERROR_CORRUPT_IMAGE" : 0,  "GDK_PIXBUF_ERROR_INSUFFICIENT_MEMORY" : 1,  "GDK_PIXBUF_ERROR_BAD_OPTION" : 2,  "GDK_PIXBUF_ERROR_UNKNOWN_TYPE" : 3,  "GDK_PIXBUF_ERROR_UNSUPPORTED_OPERATION" : 4,  "GDK_PIXBUF_ERROR_FAILED" : 5, 
 "GDK_INTERP_NEAREST" : 0,  "GDK_INTERP_TILES" : 1,  "GDK_INTERP_BILINEAR" : 2,  "GDK_INTERP_HYPER" : 3, 
 "GDK_PIXBUF_ROTATE_NONE" : 0,  "GDK_PIXBUF_ROTATE_COUNTERCLOCKWISE" : 90,  "GDK_PIXBUF_ROTATE_UPSIDEDOWN" : 180,  "GDK_PIXBUF_ROTATE_CLOCKWISE" : 270, 
 "GDK_X_CURSOR" : 0,  "GDK_ARROW" : 2,  "GDK_BASED_ARROW_DOWN" : 4,  "GDK_BASED_ARROW_UP" : 6,  "GDK_BOAT" : 8,  "GDK_BOGOSITY" : 10,  "GDK_BOTTOM_LEFT_CORNER" : 12,  "GDK_BOTTOM_RIGHT_CORNER" : 14,  "GDK_BOTTOM_SIDE" : 16,  "GDK_BOTTOM_TEE" : 18,  "GDK_BOX_SPIRAL" : 20,  "GDK_CENTER_PTR" : 22,  "GDK_CIRCLE" : 24,  "GDK_CLOCK" : 26,  "GDK_COFFEE_MUG" : 28,  "GDK_CROSS" : 30,  "GDK_CROSS_REVERSE" : 32,  "GDK_CROSSHAIR" : 34,  "GDK_DIAMOND_CROSS" : 36,  "GDK_DOT" : 38,  "GDK_DOTBOX" : 40,  "GDK_DOUBLE_ARROW" : 42,  "GDK_DRAFT_LARGE" : 44,  "GDK_DRAFT_SMALL" : 46,  "GDK_DRAPED_BOX" : 48,  "GDK_EXCHANGE" : 50,  "GDK_FLEUR" : 52,  "GDK_GOBBLER" : 54,  "GDK_GUMBY" : 56,  "GDK_HAND1" : 58,  "GDK_HAND2" : 60,  "GDK_HEART" : 62,  "GDK_ICON" : 64,  "GDK_IRON_CROSS" : 66,  "GDK_LEFT_PTR" : 68,  "GDK_LEFT_SIDE" : 70,  "GDK_LEFT_TEE" : 72,  "GDK_LEFTBUTTON" : 74,  "GDK_LL_ANGLE" : 76,  "GDK_LR_ANGLE" : 78,  "GDK_MAN" : 80,  "GDK_MIDDLEBUTTON" : 82,  "GDK_MOUSE" : 84,  "GDK_PENCIL" : 86,  "GDK_PIRATE" : 88,  "GDK_PLUS" : 90,  "GDK_QUESTION_ARROW" : 92,  "GDK_RIGHT_PTR" : 94,  "GDK_RIGHT_SIDE" : 96,  "GDK_RIGHT_TEE" : 98,  "GDK_RIGHTBUTTON" : 100,  "GDK_RTL_LOGO" : 102,  "GDK_SAILBOAT" : 104,  "GDK_SB_DOWN_ARROW" : 106,  "GDK_SB_H_DOUBLE_ARROW" : 108,  "GDK_SB_LEFT_ARROW" : 110,  "GDK_SB_RIGHT_ARROW" : 112,  "GDK_SB_UP_ARROW" : 114,  "GDK_SB_V_DOUBLE_ARROW" : 116,  "GDK_SHUTTLE" : 118,  "GDK_SIZING" : 120,  "GDK_SPIDER" : 122,  "GDK_SPRAYCAN" : 124,  "GDK_STAR" : 126,  "GDK_TARGET" : 128,  "GDK_TCROSS" : 130,  "GDK_TOP_LEFT_ARROW" : 132,  "GDK_TOP_LEFT_CORNER" : 134,  "GDK_TOP_RIGHT_CORNER" : 136,  "GDK_TOP_SIDE" : 138,  "GDK_TOP_TEE" : 140,  "GDK_TREK" : 142,  "GDK_UL_ANGLE" : 144,  "GDK_UMBRELLA" : 146,  "GDK_UR_ANGLE" : 148,  "GDK_WATCH" : 150,  "GDK_XTERM" : 152,  "GDK_LAST_CURSOR" : 153,  "GDK_BLANK_CURSOR" : -2,  "GDK_CURSOR_IS_PIXMAP" : -1, 
 "GDK_PROP_MODE_REPLACE" : 0,  "GDK_PROP_MODE_PREPEND" : 1,  "GDK_PROP_MODE_APPEND" : 2, 
 "GDK_INPUT_OUTPUT" : 0,  "GDK_INPUT_ONLY" : 1, 
 "GDK_WINDOW_ROOT" : 0,  "GDK_WINDOW_TOPLEVEL" : 1,  "GDK_WINDOW_CHILD" : 2,  "GDK_WINDOW_TEMP" : 3,  "GDK_WINDOW_FOREIGN" : 4,  "GDK_WINDOW_OFFSCREEN" : 5, 
 "GDK_WA_TITLE" : 2,  "GDK_WA_X" : 4,  "GDK_WA_Y" : 8,  "GDK_WA_CURSOR" : 16,  "GDK_WA_VISUAL" : 32,  "GDK_WA_WMCLASS" : 64,  "GDK_WA_NOREDIR" : 128,  "GDK_WA_TYPE_HINT" : 256, 
 "GDK_DECOR_ALL" : 1,  "GDK_DECOR_BORDER" : 2,  "GDK_DECOR_RESIZEH" : 4,  "GDK_DECOR_TITLE" : 8,  "GDK_DECOR_MENU" : 16,  "GDK_DECOR_MINIMIZE" : 32,  "GDK_DECOR_MAXIMIZE" : 64, 
 "GDK_HINT_POS" : 1,  "GDK_HINT_MIN_SIZE" : 2,  "GDK_HINT_MAX_SIZE" : 4,  "GDK_HINT_BASE_SIZE" : 8,  "GDK_HINT_ASPECT" : 16,  "GDK_HINT_RESIZE_INC" : 32,  "GDK_HINT_WIN_GRAVITY" : 64,  "GDK_HINT_USER_POS" : 128,  "GDK_HINT_USER_SIZE" : 256, 
 "GDK_WINDOW_TYPE_HINT_NORMAL" : 0,  "GDK_WINDOW_TYPE_HINT_DIALOG" : 1,  "GDK_WINDOW_TYPE_HINT_MENU" : 2,  "GDK_WINDOW_TYPE_HINT_TOOLBAR" : 3,  "GDK_WINDOW_TYPE_HINT_SPLASHSCREEN" : 4,  "GDK_WINDOW_TYPE_HINT_UTILITY" : 5,  "GDK_WINDOW_TYPE_HINT_DOCK" : 6,  "GDK_WINDOW_TYPE_HINT_DESKTOP" : 7,  "GDK_WINDOW_TYPE_HINT_DROPDOWN_MENU" : 8,  "GDK_WINDOW_TYPE_HINT_POPUP_MENU" : 9,  "GDK_WINDOW_TYPE_HINT_TOOLTIP" : 10,  "GDK_WINDOW_TYPE_HINT_NOTIFICATION" : 11,  "GDK_WINDOW_TYPE_HINT_COMBO" : 12,  "GDK_WINDOW_TYPE_HINT_DND" : 13, 
 "GDK_WINDOW_EDGE_NORTH_WEST" : 0,  "GDK_WINDOW_EDGE_NORTH" : 1,  "GDK_WINDOW_EDGE_NORTH_EAST" : 2,  "GDK_WINDOW_EDGE_WEST" : 3,  "GDK_WINDOW_EDGE_EAST" : 4,  "GDK_WINDOW_EDGE_SOUTH_WEST" : 5,  "GDK_WINDOW_EDGE_SOUTH" : 6,  "GDK_WINDOW_EDGE_SOUTH_EAST" : 7, 
 "GDK_FUNC_ALL" : 1,  "GDK_FUNC_RESIZE" : 2,  "GDK_FUNC_MOVE" : 4,  "GDK_FUNC_MINIMIZE" : 8,  "GDK_FUNC_MAXIMIZE" : 16,  "GDK_FUNC_CLOSE" : 32, 
 "GDK_GRAVITY_NORTH_WEST" : 1,  "GDK_GRAVITY_NORTH" : 2,  "GDK_GRAVITY_NORTH_EAST" : 3,  "GDK_GRAVITY_WEST" : 4,  "GDK_GRAVITY_CENTER" : 5,  "GDK_GRAVITY_EAST" : 6,  "GDK_GRAVITY_SOUTH_WEST" : 7,  "GDK_GRAVITY_SOUTH" : 8,  "GDK_GRAVITY_SOUTH_EAST" : 9,  "GDK_GRAVITY_STATIC" : 10, 
 "GDK_VISUAL_STATIC_GRAY" : 0,  "GDK_VISUAL_GRAYSCALE" : 1,  "GDK_VISUAL_STATIC_COLOR" : 2,  "GDK_VISUAL_PSEUDO_COLOR" : 3,  "GDK_VISUAL_TRUE_COLOR" : 4,  "GDK_VISUAL_DIRECT_COLOR" : 5, 
 "GTK_ALIGN_FILL" : 0,  "GTK_ALIGN_START" : 1,  "GTK_ALIGN_END" : 2,  "GTK_ALIGN_CENTER" : 3, 
 "GTK_ARROWS_BOTH" : 0,  "GTK_ARROWS_START" : 1,  "GTK_ARROWS_END" : 2, 
 "GTK_ARROW_UP" : 0,  "GTK_ARROW_DOWN" : 1,  "GTK_ARROW_LEFT" : 2,  "GTK_ARROW_RIGHT" : 3,  "GTK_ARROW_NONE" : 4, 
 "GTK_EXPAND" : 1,  "GTK_SHRINK" : 2,  "GTK_FILL" : 4, 
 "GTK_BUTTONBOX_SPREAD" : 1,  "GTK_BUTTONBOX_EDGE" : 2,  "GTK_BUTTONBOX_START" : 3,  "GTK_BUTTONBOX_END" : 4,  "GTK_BUTTONBOX_CENTER" : 5, 
 "GTK_DELETE_CHARS" : 0,  "GTK_DELETE_WORD_ENDS" : 1,  "GTK_DELETE_WORDS" : 2,  "GTK_DELETE_DISPLAY_LINES" : 3,  "GTK_DELETE_DISPLAY_LINE_ENDS" : 4,  "GTK_DELETE_PARAGRAPH_ENDS" : 5,  "GTK_DELETE_PARAGRAPHS" : 6,  "GTK_DELETE_WHITESPACE" : 7, 
 "GTK_DIR_TAB_FORWARD" : 0,  "GTK_DIR_TAB_BACKWARD" : 1,  "GTK_DIR_UP" : 2,  "GTK_DIR_DOWN" : 3,  "GTK_DIR_LEFT" : 4,  "GTK_DIR_RIGHT" : 5, 
 "GTK_EXPANDER_COLLAPSED" : 0,  "GTK_EXPANDER_SEMI_COLLAPSED" : 1,  "GTK_EXPANDER_SEMI_EXPANDED" : 2,  "GTK_EXPANDER_EXPANDED" : 3, 
 "GTK_ICON_SIZE_INVALID" : 0,  "GTK_ICON_SIZE_MENU" : 1,  "GTK_ICON_SIZE_SMALL_TOOLBAR" : 2,  "GTK_ICON_SIZE_LARGE_TOOLBAR" : 3,  "GTK_ICON_SIZE_BUTTON" : 4,  "GTK_ICON_SIZE_DND" : 5,  "GTK_ICON_SIZE_DIALOG" : 6, 
 "GTK_SENSITIVITY_AUTO" : 0,  "GTK_SENSITIVITY_ON" : 1,  "GTK_SENSITIVITY_OFF" : 2, 
 "GTK_TEXT_DIR_NONE" : 0,  "GTK_TEXT_DIR_LTR" : 1,  "GTK_TEXT_DIR_RTL" : 2, 
 "GTK_JUSTIFY_LEFT" : 0,  "GTK_JUSTIFY_RIGHT" : 1,  "GTK_JUSTIFY_CENTER" : 2,  "GTK_JUSTIFY_FILL" : 3, 
 "GTK_MENU_DIR_PARENT" : 0,  "GTK_MENU_DIR_CHILD" : 1,  "GTK_MENU_DIR_NEXT" : 2,  "GTK_MENU_DIR_PREV" : 3, 
 "GTK_MESSAGE_INFO" : 0,  "GTK_MESSAGE_WARNING" : 1,  "GTK_MESSAGE_QUESTION" : 2,  "GTK_MESSAGE_ERROR" : 3,  "GTK_MESSAGE_OTHER" : 4, 
 "GTK_MOVEMENT_LOGICAL_POSITIONS" : 0,  "GTK_MOVEMENT_VISUAL_POSITIONS" : 1,  "GTK_MOVEMENT_WORDS" : 2,  "GTK_MOVEMENT_DISPLAY_LINES" : 3,  "GTK_MOVEMENT_DISPLAY_LINE_ENDS" : 4,  "GTK_MOVEMENT_PARAGRAPHS" : 5,  "GTK_MOVEMENT_PARAGRAPH_ENDS" : 6,  "GTK_MOVEMENT_PAGES" : 7,  "GTK_MOVEMENT_BUFFER_ENDS" : 8,  "GTK_MOVEMENT_HORIZONTAL_PAGES" : 9, 
 "GTK_SCROLL_STEPS" : 0,  "GTK_SCROLL_PAGES" : 1,  "GTK_SCROLL_ENDS" : 2,  "GTK_SCROLL_HORIZONTAL_STEPS" : 3,  "GTK_SCROLL_HORIZONTAL_PAGES" : 4,  "GTK_SCROLL_HORIZONTAL_ENDS" : 5, 
 "GTK_ORIENTATION_HORIZONTAL" : 0,  "GTK_ORIENTATION_VERTICAL" : 1, 
 "GTK_CORNER_TOP_LEFT" : 0,  "GTK_CORNER_BOTTOM_LEFT" : 1,  "GTK_CORNER_TOP_RIGHT" : 2,  "GTK_CORNER_BOTTOM_RIGHT" : 3, 
 "GTK_PACK_START" : 0,  "GTK_PACK_END" : 1, 
 "GTK_PATH_PRIO_LOWEST" : 0,  "GTK_PATH_PRIO_GTK" : 4,  "GTK_PATH_PRIO_APPLICATION" : 8,  "GTK_PATH_PRIO_THEME" : 10,  "GTK_PATH_PRIO_RC" : 12,  "GTK_PATH_PRIO_HIGHEST" : 15, 
 "GTK_PATH_WIDGET" : 0,  "GTK_PATH_WIDGET_CLASS" : 1,  "GTK_PATH_CLASS" : 2, 
 "GTK_POLICY_ALWAYS" : 0,  "GTK_POLICY_AUTOMATIC" : 1,  "GTK_POLICY_NEVER" : 2, 
 "GTK_POS_LEFT" : 0,  "GTK_POS_RIGHT" : 1,  "GTK_POS_TOP" : 2,  "GTK_POS_BOTTOM" : 3, 
 "GTK_RELIEF_NORMAL" : 0,  "GTK_RELIEF_HALF" : 1,  "GTK_RELIEF_NONE" : 2, 
 "GTK_RESIZE_PARENT" : 0,  "GTK_RESIZE_QUEUE" : 1,  "GTK_RESIZE_IMMEDIATE" : 2, 
 "GTK_SCROLL_NONE" : 0,  "GTK_SCROLL_JUMP" : 1,  "GTK_SCROLL_STEP_BACKWARD" : 2,  "GTK_SCROLL_STEP_FORWARD" : 3,  "GTK_SCROLL_PAGE_BACKWARD" : 4,  "GTK_SCROLL_PAGE_FORWARD" : 5,  "GTK_SCROLL_STEP_UP" : 6,  "GTK_SCROLL_STEP_DOWN" : 7,  "GTK_SCROLL_PAGE_UP" : 8,  "GTK_SCROLL_PAGE_DOWN" : 9,  "GTK_SCROLL_STEP_LEFT" : 10,  "GTK_SCROLL_STEP_RIGHT" : 11,  "GTK_SCROLL_PAGE_LEFT" : 12,  "GTK_SCROLL_PAGE_RIGHT" : 13,  "GTK_SCROLL_START" : 14,  "GTK_SCROLL_END" : 15, 
 "GTK_SELECTION_NONE" : 0,  "GTK_SELECTION_SINGLE" : 1,  "GTK_SELECTION_BROWSE" : 2,  "GTK_SELECTION_MULTIPLE" : 3, 
 "GTK_SHADOW_NONE" : 0,  "GTK_SHADOW_IN" : 1,  "GTK_SHADOW_OUT" : 2,  "GTK_SHADOW_ETCHED_IN" : 3,  "GTK_SHADOW_ETCHED_OUT" : 4, 
 "GTK_STATE_NORMAL" : 0,  "GTK_STATE_ACTIVE" : 1,  "GTK_STATE_PRELIGHT" : 2,  "GTK_STATE_SELECTED" : 3,  "GTK_STATE_INSENSITIVE" : 4,  "GTK_STATE_INCONSISTENT" : 5,  "GTK_STATE_FOCUSED" : 6, 
 "GTK_TOOLBAR_ICONS" : 0,  "GTK_TOOLBAR_TEXT" : 1,  "GTK_TOOLBAR_BOTH" : 2,  "GTK_TOOLBAR_BOTH_HORIZ" : 3, 
 "GTK_WIN_POS_NONE" : 0,  "GTK_WIN_POS_CENTER" : 1,  "GTK_WIN_POS_MOUSE" : 2,  "GTK_WIN_POS_CENTER_ALWAYS" : 3,  "GTK_WIN_POS_CENTER_ON_PARENT" : 4, 
 "GTK_WINDOW_TOPLEVEL" : 0,  "GTK_WINDOW_POPUP" : 1, 
 "GTK_WRAP_NONE" : 0,  "GTK_WRAP_CHAR" : 1,  "GTK_WRAP_WORD" : 2,  "GTK_WRAP_WORD_CHAR" : 3, 
 "GTK_SORT_ASCENDING" : 0,  "GTK_SORT_DESCENDING" : 1, 
 "GTK_IM_PREEDIT_NOTHING" : 0,  "GTK_IM_PREEDIT_CALLBACK" : 1,  "GTK_IM_PREEDIT_NONE" : 2, 
 "GTK_IM_STATUS_NOTHING" : 0,  "GTK_IM_STATUS_CALLBACK" : 1,  "GTK_IM_STATUS_NONE" : 2, 
 "GTK_PACK_DIRECTION_LTR" : 0,  "GTK_PACK_DIRECTION_RTL" : 1,  "GTK_PACK_DIRECTION_TTB" : 2,  "GTK_PACK_DIRECTION_BTT" : 3, 
 "GTK_PRINT_PAGES_ALL" : 0,  "GTK_PRINT_PAGES_CURRENT" : 1,  "GTK_PRINT_PAGES_RANGES" : 2,  "GTK_PRINT_PAGES_SELECTION" : 3, 
 "GTK_PAGE_SET_ALL" : 0,  "GTK_PAGE_SET_EVEN" : 1,  "GTK_PAGE_SET_ODD" : 2, 
 "GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_TOP_TO_BOTTOM" : 0,  "GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_BOTTOM_TO_TOP" : 1,  "GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_TOP_TO_BOTTOM" : 2,  "GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_BOTTOM_TO_TOP" : 3,  "GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_LEFT_TO_RIGHT" : 4,  "GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_RIGHT_TO_LEFT" : 5,  "GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_LEFT_TO_RIGHT" : 6,  "GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_RIGHT_TO_LEFT" : 7, 
 "GTK_PAGE_ORIENTATION_PORTRAIT" : 0,  "GTK_PAGE_ORIENTATION_LANDSCAPE" : 1,  "GTK_PAGE_ORIENTATION_REVERSE_PORTRAIT" : 2,  "GTK_PAGE_ORIENTATION_REVERSE_LANDSCAPE" : 3, 
 "GTK_PRINT_QUALITY_LOW" : 0,  "GTK_PRINT_QUALITY_NORMAL" : 1,  "GTK_PRINT_QUALITY_HIGH" : 2,  "GTK_PRINT_QUALITY_DRAFT" : 3, 
 "GTK_PRINT_DUPLEX_SIMPLEX" : 0,  "GTK_PRINT_DUPLEX_HORIZONTAL" : 1,  "GTK_PRINT_DUPLEX_VERTICAL" : 2, 
 "GTK_UNIT_PIXEL" : 0,  "GTK_UNIT_POINTS" : 1,  "GTK_UNIT_INCH" : 2,  "GTK_UNIT_MM" : 3, 
 "GTK_TREE_VIEW_GRID_LINES_NONE" : 0,  "GTK_TREE_VIEW_GRID_LINES_HORIZONTAL" : 1,  "GTK_TREE_VIEW_GRID_LINES_VERTICAL" : 2,  "GTK_TREE_VIEW_GRID_LINES_BOTH" : 3, 
 "GTK_DRAG_RESULT_SUCCESS" : 0,  "GTK_DRAG_RESULT_NO_TARGET" : 1,  "GTK_DRAG_RESULT_USER_CANCELLED" : 2,  "GTK_DRAG_RESULT_TIMEOUT_EXPIRED" : 3,  "GTK_DRAG_RESULT_GRAB_BROKEN" : 4,  "GTK_DRAG_RESULT_ERROR" : 5, 
 "GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH" : 0,  "GTK_SIZE_REQUEST_WIDTH_FOR_HEIGHT" : 1,  "GTK_SIZE_REQUEST_CONSTANT_SIZE" : 2, 
 "GTK_SCROLL_MINIMUM" : 0,  "GTK_SCROLL_NATURAL" : 1, 
 "GTK_STATE_FLAG_NORMAL" : 0,  "GTK_STATE_FLAG_ACTIVE" : 1,  "GTK_STATE_FLAG_PRELIGHT" : 2,  "GTK_STATE_FLAG_SELECTED" : 4,  "GTK_STATE_FLAG_INSENSITIVE" : 8,  "GTK_STATE_FLAG_INCONSISTENT" : 16,  "GTK_STATE_FLAG_FOCUSED" : 32, 
 "GTK_REGION_EVEN" : 1,  "GTK_REGION_ODD" : 2,  "GTK_REGION_FIRST" : 4,  "GTK_REGION_LAST" : 8,  "GTK_REGION_SORTED" : 32, 
 "GTK_JUNCTION_NONE" : 0,  "GTK_JUNCTION_CORNER_TOPLEFT" : 1,  "GTK_JUNCTION_CORNER_TOPRIGHT" : 2,  "GTK_JUNCTION_CORNER_BOTTOMLEFT" : 4,  "GTK_JUNCTION_CORNER_BOTTOMRIGHT" : 8,  "GTK_JUNCTION_TOP" : 3,  "GTK_JUNCTION_BOTTOM" : 12,  "GTK_JUNCTION_LEFT" : 5,  "GTK_JUNCTION_RIGHT" : 10, 
 "GTK_ACCEL_VISIBLE" : 1,  "GTK_ACCEL_LOCKED" : 2,  "GTK_ACCEL_MASK" : 7, 
 "GTK_BORDER_STYLE_NONE" : 0,  "GTK_BORDER_STYLE_SOLID" : 1,  "GTK_BORDER_STYLE_INSET" : 2,  "GTK_BORDER_STYLE_OUTSET" : 3, 
 "GTK_RC_FG" : 1,  "GTK_RC_BG" : 2,  "GTK_RC_TEXT" : 4,  "GTK_RC_BASE" : 8, 
 "GTK_RC_TOKEN_INVALID" : 270,  "GTK_RC_TOKEN_INCLUDE" : 271,  "GTK_RC_TOKEN_NORMAL" : 272,  "GTK_RC_TOKEN_ACTIVE" : 273,  "GTK_RC_TOKEN_PRELIGHT" : 274,  "GTK_RC_TOKEN_SELECTED" : 275,  "GTK_RC_TOKEN_INSENSITIVE" : 276,  "GTK_RC_TOKEN_FG" : 277,  "GTK_RC_TOKEN_BG" : 278,  "GTK_RC_TOKEN_TEXT" : 279,  "GTK_RC_TOKEN_BASE" : 280,  "GTK_RC_TOKEN_XTHICKNESS" : 281,  "GTK_RC_TOKEN_YTHICKNESS" : 282,  "GTK_RC_TOKEN_FONT" : 283,  "GTK_RC_TOKEN_FONTSET" : 284,  "GTK_RC_TOKEN_FONT_NAME" : 285,  "GTK_RC_TOKEN_BG_PIXMAP" : 286,  "GTK_RC_TOKEN_PIXMAP_PATH" : 287,  "GTK_RC_TOKEN_STYLE" : 288,  "GTK_RC_TOKEN_BINDING" : 289,  "GTK_RC_TOKEN_BIND" : 290,  "GTK_RC_TOKEN_WIDGET" : 291,  "GTK_RC_TOKEN_WIDGET_CLASS" : 292,  "GTK_RC_TOKEN_CLASS" : 293,  "GTK_RC_TOKEN_LOWEST" : 294,  "GTK_RC_TOKEN_GTK" : 295,  "GTK_RC_TOKEN_APPLICATION" : 296,  "GTK_RC_TOKEN_THEME" : 297,  "GTK_RC_TOKEN_RC" : 298,  "GTK_RC_TOKEN_HIGHEST" : 299,  "GTK_RC_TOKEN_ENGINE" : 300,  "GTK_RC_TOKEN_MODULE_PATH" : 301,  "GTK_RC_TOKEN_IM_MODULE_PATH" : 302,  "GTK_RC_TOKEN_IM_MODULE_FILE" : 303,  "GTK_RC_TOKEN_STOCK" : 304,  "GTK_RC_TOKEN_LTR" : 305,  "GTK_RC_TOKEN_RTL" : 306,  "GTK_RC_TOKEN_COLOR" : 307,  "GTK_RC_TOKEN_UNBIND" : 308,  "GTK_RC_TOKEN_LAST" : 309, 
 "ATK_STATE_INVALID" : 0,  "ATK_STATE_ACTIVE" : 1,  "ATK_STATE_ARMED" : 2,  "ATK_STATE_BUSY" : 3,  "ATK_STATE_CHECKED" : 4,  "ATK_STATE_DEFUNCT" : 5,  "ATK_STATE_EDITABLE" : 6,  "ATK_STATE_ENABLED" : 7,  "ATK_STATE_EXPANDABLE" : 8,  "ATK_STATE_EXPANDED" : 9,  "ATK_STATE_FOCUSABLE" : 10,  "ATK_STATE_FOCUSED" : 11,  "ATK_STATE_HORIZONTAL" : 12,  "ATK_STATE_ICONIFIED" : 13,  "ATK_STATE_MODAL" : 14,  "ATK_STATE_MULTI_LINE" : 15,  "ATK_STATE_MULTISELECTABLE" : 16,  "ATK_STATE_OPAQUE" : 17,  "ATK_STATE_PRESSED" : 18,  "ATK_STATE_RESIZABLE" : 19,  "ATK_STATE_SELECTABLE" : 20,  "ATK_STATE_SELECTED" : 21,  "ATK_STATE_SENSITIVE" : 22,  "ATK_STATE_SHOWING" : 23,  "ATK_STATE_SINGLE_LINE" : 24,  "ATK_STATE_STALE" : 25,  "ATK_STATE_TRANSIENT" : 26,  "ATK_STATE_VERTICAL" : 27,  "ATK_STATE_VISIBLE" : 28,  "ATK_STATE_MANAGES_DESCENDANTS" : 29,  "ATK_STATE_INDETERMINATE" : 30,  "ATK_STATE_TRUNCATED" : 31,  "ATK_STATE_REQUIRED" : 32,  "ATK_STATE_INVALID_ENTRY" : 33,  "ATK_STATE_SUPPORTS_AUTOCOMPLETION" : 34,  "ATK_STATE_SELECTABLE_TEXT" : 35,  "ATK_STATE_DEFAULT" : 36,  "ATK_STATE_ANIMATED" : 37,  "ATK_STATE_VISITED" : 38,  "ATK_STATE_LAST_DEFINED" : 39, 
 "ATK_RELATION_NULL" : 0,  "ATK_RELATION_CONTROLLED_BY" : 1,  "ATK_RELATION_CONTROLLER_FOR" : 2,  "ATK_RELATION_LABEL_FOR" : 3,  "ATK_RELATION_LABELLED_BY" : 4,  "ATK_RELATION_MEMBER_OF" : 5,  "ATK_RELATION_NODE_CHILD_OF" : 6,  "ATK_RELATION_FLOWS_TO" : 7,  "ATK_RELATION_FLOWS_FROM" : 8,  "ATK_RELATION_SUBWINDOW_OF" : 9,  "ATK_RELATION_EMBEDS" : 10,  "ATK_RELATION_EMBEDDED_BY" : 11,  "ATK_RELATION_POPUP_FOR" : 12,  "ATK_RELATION_PARENT_WINDOW_OF" : 13,  "ATK_RELATION_DESCRIBED_BY" : 14,  "ATK_RELATION_DESCRIPTION_FOR" : 15,  "ATK_RELATION_NODE_PARENT_OF" : 16,  "ATK_RELATION_LAST_DEFINED" : 17, 
 "ATK_ROLE_INVALID" : 0,  "ATK_ROLE_ACCEL_LABEL" : 1,  "ATK_ROLE_ALERT" : 2,  "ATK_ROLE_ANIMATION" : 3,  "ATK_ROLE_ARROW" : 4,  "ATK_ROLE_CALENDAR" : 5,  "ATK_ROLE_CANVAS" : 6,  "ATK_ROLE_CHECK_BOX" : 7,  "ATK_ROLE_CHECK_MENU_ITEM" : 8,  "ATK_ROLE_COLOR_CHOOSER" : 9,  "ATK_ROLE_COLUMN_HEADER" : 10,  "ATK_ROLE_COMBO_BOX" : 11,  "ATK_ROLE_DATE_EDITOR" : 12,  "ATK_ROLE_DESKTOP_ICON" : 13,  "ATK_ROLE_DESKTOP_FRAME" : 14,  "ATK_ROLE_DIAL" : 15,  "ATK_ROLE_DIALOG" : 16,  "ATK_ROLE_DIRECTORY_PANE" : 17,  "ATK_ROLE_DRAWING_AREA" : 18,  "ATK_ROLE_FILE_CHOOSER" : 19,  "ATK_ROLE_FILLER" : 20,  "ATK_ROLE_FONT_CHOOSER" : 21,  "ATK_ROLE_FRAME" : 22,  "ATK_ROLE_GLASS_PANE" : 23,  "ATK_ROLE_HTML_CONTAINER" : 24,  "ATK_ROLE_ICON" : 25,  "ATK_ROLE_IMAGE" : 26,  "ATK_ROLE_INTERNAL_FRAME" : 27,  "ATK_ROLE_LABEL" : 28,  "ATK_ROLE_LAYERED_PANE" : 29,  "ATK_ROLE_LIST" : 30,  "ATK_ROLE_LIST_ITEM" : 31,  "ATK_ROLE_MENU" : 32,  "ATK_ROLE_MENU_BAR" : 33,  "ATK_ROLE_MENU_ITEM" : 34,  "ATK_ROLE_OPTION_PANE" : 35,  "ATK_ROLE_PAGE_TAB" : 36,  "ATK_ROLE_PAGE_TAB_LIST" : 37,  "ATK_ROLE_PANEL" : 38,  "ATK_ROLE_PASSWORD_TEXT" : 39,  "ATK_ROLE_POPUP_MENU" : 40,  "ATK_ROLE_PROGRESS_BAR" : 41,  "ATK_ROLE_PUSH_BUTTON" : 42,  "ATK_ROLE_RADIO_BUTTON" : 43,  "ATK_ROLE_RADIO_MENU_ITEM" : 44,  "ATK_ROLE_ROOT_PANE" : 45,  "ATK_ROLE_ROW_HEADER" : 46,  "ATK_ROLE_SCROLL_BAR" : 47,  "ATK_ROLE_SCROLL_PANE" : 48,  "ATK_ROLE_SEPARATOR" : 49,  "ATK_ROLE_SLIDER" : 50,  "ATK_ROLE_SPLIT_PANE" : 51,  "ATK_ROLE_SPIN_BUTTON" : 52,  "ATK_ROLE_STATUSBAR" : 53,  "ATK_ROLE_TABLE" : 54,  "ATK_ROLE_TABLE_CELL" : 55,  "ATK_ROLE_TABLE_COLUMN_HEADER" : 56,  "ATK_ROLE_TABLE_ROW_HEADER" : 57,  "ATK_ROLE_TEAR_OFF_MENU_ITEM" : 58,  "ATK_ROLE_TERMINAL" : 59,  "ATK_ROLE_TEXT" : 60,  "ATK_ROLE_TOGGLE_BUTTON" : 61,  "ATK_ROLE_TOOL_BAR" : 62,  "ATK_ROLE_TOOL_TIP" : 63,  "ATK_ROLE_TREE" : 64,  "ATK_ROLE_TREE_TABLE" : 65,  "ATK_ROLE_UNKNOWN" : 66,  "ATK_ROLE_VIEWPORT" : 67,  "ATK_ROLE_WINDOW" : 68,  "ATK_ROLE_HEADER" : 69,  "ATK_ROLE_FOOTER" : 70,  "ATK_ROLE_PARAGRAPH" : 71,  "ATK_ROLE_RULER" : 72,  "ATK_ROLE_APPLICATION" : 73,  "ATK_ROLE_AUTOCOMPLETE" : 74,  "ATK_ROLE_EDITBAR" : 75,  "ATK_ROLE_EMBEDDED" : 76,  "ATK_ROLE_ENTRY" : 77,  "ATK_ROLE_CHART" : 78,  "ATK_ROLE_CAPTION" : 79,  "ATK_ROLE_DOCUMENT_FRAME" : 80,  "ATK_ROLE_HEADING" : 81,  "ATK_ROLE_PAGE" : 82,  "ATK_ROLE_SECTION" : 83,  "ATK_ROLE_REDUNDANT_OBJECT" : 84,  "ATK_ROLE_FORM" : 85,  "ATK_ROLE_LINK" : 86,  "ATK_ROLE_INPUT_METHOD_WINDOW" : 87,  "ATK_ROLE_TABLE_ROW" : 88,  "ATK_ROLE_TREE_ITEM" : 89,  "ATK_ROLE_DOCUMENT_SPREADSHEET" : 90,  "ATK_ROLE_DOCUMENT_PRESENTATION" : 91,  "ATK_ROLE_DOCUMENT_TEXT" : 92,  "ATK_ROLE_DOCUMENT_WEB" : 93,  "ATK_ROLE_DOCUMENT_EMAIL" : 94,  "ATK_ROLE_COMMENT" : 95,  "ATK_ROLE_LIST_BOX" : 96,  "ATK_ROLE_GROUPING" : 97,  "ATK_ROLE_IMAGE_MAP" : 98,  "ATK_ROLE_NOTIFICATION" : 99,  "ATK_ROLE_INFO_BAR" : 100,  "ATK_ROLE_LAST_DEFINED" : 101, 
 "ATK_LAYER_INVALID" : 0,  "ATK_LAYER_BACKGROUND" : 1,  "ATK_LAYER_CANVAS" : 2,  "ATK_LAYER_WIDGET" : 3,  "ATK_LAYER_MDI" : 4,  "ATK_LAYER_POPUP" : 5,  "ATK_LAYER_OVERLAY" : 6,  "ATK_LAYER_WINDOW" : 7, 
 "ATK_KEY_EVENT_PRESS" : 0,  "ATK_KEY_EVENT_RELEASE" : 1,  "ATK_KEY_EVENT_LAST_DEFINED" : 2, 
 "ATK_XY_SCREEN" : 0,  "ATK_XY_WINDOW" : 1, 
 "ATK_TEXT_ATTR_INVALID" : 0,  "ATK_TEXT_ATTR_LEFT_MARGIN" : 1,  "ATK_TEXT_ATTR_RIGHT_MARGIN" : 2,  "ATK_TEXT_ATTR_INDENT" : 3,  "ATK_TEXT_ATTR_INVISIBLE" : 4,  "ATK_TEXT_ATTR_EDITABLE" : 5,  "ATK_TEXT_ATTR_PIXELS_ABOVE_LINES" : 6,  "ATK_TEXT_ATTR_PIXELS_BELOW_LINES" : 7,  "ATK_TEXT_ATTR_PIXELS_INSIDE_WRAP" : 8,  "ATK_TEXT_ATTR_BG_FULL_HEIGHT" : 9,  "ATK_TEXT_ATTR_RISE" : 10,  "ATK_TEXT_ATTR_UNDERLINE" : 11,  "ATK_TEXT_ATTR_STRIKETHROUGH" : 12,  "ATK_TEXT_ATTR_SIZE" : 13,  "ATK_TEXT_ATTR_SCALE" : 14,  "ATK_TEXT_ATTR_WEIGHT" : 15,  "ATK_TEXT_ATTR_LANGUAGE" : 16,  "ATK_TEXT_ATTR_FAMILY_NAME" : 17,  "ATK_TEXT_ATTR_BG_COLOR" : 18,  "ATK_TEXT_ATTR_FG_COLOR" : 19,  "ATK_TEXT_ATTR_BG_STIPPLE" : 20,  "ATK_TEXT_ATTR_FG_STIPPLE" : 21,  "ATK_TEXT_ATTR_WRAP_MODE" : 22,  "ATK_TEXT_ATTR_DIRECTION" : 23,  "ATK_TEXT_ATTR_JUSTIFICATION" : 24,  "ATK_TEXT_ATTR_STRETCH" : 25,  "ATK_TEXT_ATTR_VARIANT" : 26,  "ATK_TEXT_ATTR_STYLE" : 27,  "ATK_TEXT_ATTR_LAST_DEFINED" : 28, 
 "ATK_TEXT_BOUNDARY_CHAR" : 0,  "ATK_TEXT_BOUNDARY_WORD_START" : 1,  "ATK_TEXT_BOUNDARY_WORD_END" : 2,  "ATK_TEXT_BOUNDARY_SENTENCE_START" : 3,  "ATK_TEXT_BOUNDARY_SENTENCE_END" : 4,  "ATK_TEXT_BOUNDARY_LINE_START" : 5,  "ATK_TEXT_BOUNDARY_LINE_END" : 6, 
 "ATK_TEXT_CLIP_NONE" : 0,  "ATK_TEXT_CLIP_MIN" : 1,  "ATK_TEXT_CLIP_MAX" : 2,  "ATK_TEXT_CLIP_BOTH" : 3, 
 "ATK_HYPERLINK_IS_INLINE" : 1, 
 "GTK_WIDGET_HELP_TOOLTIP" : 0,  "GTK_WIDGET_HELP_WHATS_THIS" : 1, 
 "GTK_DIALOG_MODAL" : 1,  "GTK_DIALOG_DESTROY_WITH_PARENT" : 2, 
 "GTK_RESPONSE_NONE" : -1,  "GTK_RESPONSE_REJECT" : -2,  "GTK_RESPONSE_ACCEPT" : -3,  "GTK_RESPONSE_DELETE_EVENT" : -4,  "GTK_RESPONSE_OK" : -5,  "GTK_RESPONSE_CANCEL" : -6,  "GTK_RESPONSE_CLOSE" : -7,  "GTK_RESPONSE_YES" : -8,  "GTK_RESPONSE_NO" : -9,  "GTK_RESPONSE_APPLY" : -10,  "GTK_RESPONSE_HELP" : -11, 
 "GTK_LICENSE_UNKNOWN" : 0,  "GTK_LICENSE_CUSTOM" : 1,  "GTK_LICENSE_GPL_2_0" : 2,  "GTK_LICENSE_GPL_3_0" : 3,  "GTK_LICENSE_LGPL_2_1" : 4,  "GTK_LICENSE_LGPL_3_0" : 5,  "GTK_LICENSE_BSD" : 6,  "GTK_LICENSE_MIT_X11" : 7,  "GTK_LICENSE_ARTISTIC" : 8, 
 "GTK_TREE_MODEL_ITERS_PERSIST" : 1,  "GTK_TREE_MODEL_LIST_ONLY" : 2, 
 "GTK_CELL_RENDERER_SELECTED" : 1,  "GTK_CELL_RENDERER_PRELIT" : 2,  "GTK_CELL_RENDERER_INSENSITIVE" : 4,  "GTK_CELL_RENDERER_SORTED" : 8,  "GTK_CELL_RENDERER_FOCUSED" : 16, 
 "GTK_CELL_RENDERER_MODE_INERT" : 0,  "GTK_CELL_RENDERER_MODE_ACTIVATABLE" : 1,  "GTK_CELL_RENDERER_MODE_EDITABLE" : 2, 
 "GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID" : -1,  "GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID" : -2, 
 "GTK_TREE_VIEW_COLUMN_GROW_ONLY" : 0,  "GTK_TREE_VIEW_COLUMN_AUTOSIZE" : 1,  "GTK_TREE_VIEW_COLUMN_FIXED" : 2, 
 "GTK_TEXT_SEARCH_VISIBLE_ONLY" : 1,  "GTK_TEXT_SEARCH_TEXT_ONLY" : 2,  "GTK_TEXT_SEARCH_CASE_INSENSITIVE" : 4, 
 "GTK_DEST_DEFAULT_MOTION" : 1,  "GTK_DEST_DEFAULT_HIGHLIGHT" : 2,  "GTK_DEST_DEFAULT_DROP" : 4,  "GTK_DEST_DEFAULT_ALL" : 7, 
 "GTK_TARGET_SAME_APP" : 1,  "GTK_TARGET_SAME_WIDGET" : 2,  "GTK_TARGET_OTHER_APP" : 4,  "GTK_TARGET_OTHER_WIDGET" : 8, 
 "GTK_IMAGE_EMPTY" : 0,  "GTK_IMAGE_PIXBUF" : 1,  "GTK_IMAGE_STOCK" : 2,  "GTK_IMAGE_ICON_SET" : 3,  "GTK_IMAGE_ANIMATION" : 4,  "GTK_IMAGE_ICON_NAME" : 5,  "GTK_IMAGE_GICON" : 6, 
 "GTK_ENTRY_ICON_PRIMARY" : 0,  "GTK_ENTRY_ICON_SECONDARY" : 1, 
 "GTK_TREE_VIEW_DROP_BEFORE" : 0,  "GTK_TREE_VIEW_DROP_AFTER" : 1,  "GTK_TREE_VIEW_DROP_INTO_OR_BEFORE" : 2,  "GTK_TREE_VIEW_DROP_INTO_OR_AFTER" : 3, 
 "GTK_ASSISTANT_PAGE_CONTENT" : 0,  "GTK_ASSISTANT_PAGE_INTRO" : 1,  "GTK_ASSISTANT_PAGE_CONFIRM" : 2,  "GTK_ASSISTANT_PAGE_SUMMARY" : 3,  "GTK_ASSISTANT_PAGE_PROGRESS" : 4,  "GTK_ASSISTANT_PAGE_CUSTOM" : 5, 
 "GTK_BUILDER_ERROR_INVALID_TYPE_FUNCTION" : 0,  "GTK_BUILDER_ERROR_UNHANDLED_TAG" : 1,  "GTK_BUILDER_ERROR_MISSING_ATTRIBUTE" : 2,  "GTK_BUILDER_ERROR_INVALID_ATTRIBUTE" : 3,  "GTK_BUILDER_ERROR_INVALID_TAG" : 4,  "GTK_BUILDER_ERROR_MISSING_PROPERTY_VALUE" : 5,  "GTK_BUILDER_ERROR_INVALID_VALUE" : 6,  "GTK_BUILDER_ERROR_VERSION_MISMATCH" : 7,  "GTK_BUILDER_ERROR_DUPLICATE_ID" : 8, 
 "GTK_CALENDAR_SHOW_HEADING" : 1,  "GTK_CALENDAR_SHOW_DAY_NAMES" : 2,  "GTK_CALENDAR_NO_MONTH_CHANGE" : 4,  "GTK_CALENDAR_SHOW_WEEK_NUMBERS" : 8,  "GTK_CALENDAR_SHOW_DETAILS" : 32, 
 "GTK_CELL_RENDERER_ACCEL_MODE_GTK" : 0,  "GTK_CELL_RENDERER_ACCEL_MODE_OTHER" : 1, 
 "GTK_CSS_SECTION_DOCUMENT" : 0,  "GTK_CSS_SECTION_IMPORT" : 1,  "GTK_CSS_SECTION_COLOR_DEFINITION" : 2,  "GTK_CSS_SECTION_BINDING_SET" : 3,  "GTK_CSS_SECTION_RULESET" : 4,  "GTK_CSS_SECTION_SELECTOR" : 5,  "GTK_CSS_SECTION_DECLARATION" : 6,  "GTK_CSS_SECTION_VALUE" : 7, 
 "GTK_CSS_PROVIDER_ERROR_FAILED" : 0,  "GTK_CSS_PROVIDER_ERROR_SYNTAX" : 1,  "GTK_CSS_PROVIDER_ERROR_IMPORT" : 2,  "GTK_CSS_PROVIDER_ERROR_NAME" : 3,  "GTK_CSS_PROVIDER_ERROR_DEPRECATED" : 4,  "GTK_CSS_PROVIDER_ERROR_UNKNOWN_VALUE" : 5, 
 "GTK_DEBUG_MISC" : 1,  "GTK_DEBUG_PLUGSOCKET" : 2,  "GTK_DEBUG_TEXT" : 4,  "GTK_DEBUG_TREE" : 8,  "GTK_DEBUG_UPDATES" : 16,  "GTK_DEBUG_KEYBINDINGS" : 32,  "GTK_DEBUG_MULTIHEAD" : 64,  "GTK_DEBUG_MODULES" : 128,  "GTK_DEBUG_GEOMETRY" : 256,  "GTK_DEBUG_ICONTHEME" : 512,  "GTK_DEBUG_PRINTING" : 65536,  "GTK_DEBUG_BUILDER" : 131072,  "GTK_DEBUG_SIZE_REQUEST" : 262144, 
 "GTK_FILE_FILTER_FILENAME" : 1,  "GTK_FILE_FILTER_URI" : 2,  "GTK_FILE_FILTER_DISPLAY_NAME" : 4,  "GTK_FILE_FILTER_MIME_TYPE" : 8, 
 "GTK_FILE_CHOOSER_ACTION_OPEN" : 0,  "GTK_FILE_CHOOSER_ACTION_SAVE" : 1,  "GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER" : 2,  "GTK_FILE_CHOOSER_ACTION_CREATE_FOLDER" : 3, 
 "GTK_FILE_CHOOSER_CONFIRMATION_CONFIRM" : 0,  "GTK_FILE_CHOOSER_CONFIRMATION_ACCEPT_FILENAME" : 1,  "GTK_FILE_CHOOSER_CONFIRMATION_SELECT_AGAIN" : 2, 
 "GTK_FILE_CHOOSER_ERROR_NONEXISTENT" : 0,  "GTK_FILE_CHOOSER_ERROR_BAD_FILENAME" : 1,  "GTK_FILE_CHOOSER_ERROR_ALREADY_EXISTS" : 2,  "GTK_FILE_CHOOSER_ERROR_INCOMPLETE_HOSTNAME" : 3, 
 "GTK_ICON_LOOKUP_NO_SVG" : 1,  "GTK_ICON_LOOKUP_FORCE_SVG" : 2,  "GTK_ICON_LOOKUP_USE_BUILTIN" : 4,  "GTK_ICON_LOOKUP_GENERIC_FALLBACK" : 8,  "GTK_ICON_LOOKUP_FORCE_SIZE" : 16, 
 "GTK_ICON_THEME_NOT_FOUND" : 0,  "GTK_ICON_THEME_FAILED" : 1, 
 "GTK_ICON_VIEW_NO_DROP" : 0,  "GTK_ICON_VIEW_DROP_INTO" : 1,  "GTK_ICON_VIEW_DROP_LEFT" : 2,  "GTK_ICON_VIEW_DROP_RIGHT" : 3,  "GTK_ICON_VIEW_DROP_ABOVE" : 4,  "GTK_ICON_VIEW_DROP_BELOW" : 5, 
 "GTK_SIZE_GROUP_NONE" : 0,  "GTK_SIZE_GROUP_HORIZONTAL" : 1,  "GTK_SIZE_GROUP_VERTICAL" : 2,  "GTK_SIZE_GROUP_BOTH" : 3, 
 "GTK_BUTTONS_NONE" : 0,  "GTK_BUTTONS_OK" : 1,  "GTK_BUTTONS_CLOSE" : 2,  "GTK_BUTTONS_CANCEL" : 3,  "GTK_BUTTONS_YES_NO" : 4,  "GTK_BUTTONS_OK_CANCEL" : 5, 
 "GTK_NOTEBOOK_TAB_FIRST" : 0,  "GTK_NOTEBOOK_TAB_LAST" : 1, 
 "GTK_PRINT_STATUS_INITIAL" : 0,  "GTK_PRINT_STATUS_PREPARING" : 1,  "GTK_PRINT_STATUS_GENERATING_DATA" : 2,  "GTK_PRINT_STATUS_SENDING_DATA" : 3,  "GTK_PRINT_STATUS_PENDING" : 4,  "GTK_PRINT_STATUS_PENDING_ISSUE" : 5,  "GTK_PRINT_STATUS_PRINTING" : 6,  "GTK_PRINT_STATUS_FINISHED" : 7,  "GTK_PRINT_STATUS_FINISHED_ABORTED" : 8, 
 "GTK_PRINT_OPERATION_RESULT_ERROR" : 0,  "GTK_PRINT_OPERATION_RESULT_APPLY" : 1,  "GTK_PRINT_OPERATION_RESULT_CANCEL" : 2,  "GTK_PRINT_OPERATION_RESULT_IN_PROGRESS" : 3, 
 "GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG" : 0,  "GTK_PRINT_OPERATION_ACTION_PRINT" : 1,  "GTK_PRINT_OPERATION_ACTION_PREVIEW" : 2,  "GTK_PRINT_OPERATION_ACTION_EXPORT" : 3, 
 "GTK_PRINT_ERROR_GENERAL" : 0,  "GTK_PRINT_ERROR_INTERNAL_ERROR" : 1,  "GTK_PRINT_ERROR_NOMEM" : 2,  "GTK_PRINT_ERROR_INVALID_FILE" : 3, 
 "GTK_RECENT_MANAGER_ERROR_NOT_FOUND" : 0,  "GTK_RECENT_MANAGER_ERROR_INVALID_URI" : 1,  "GTK_RECENT_MANAGER_ERROR_INVALID_ENCODING" : 2,  "GTK_RECENT_MANAGER_ERROR_NOT_REGISTERED" : 3,  "GTK_RECENT_MANAGER_ERROR_READ" : 4,  "GTK_RECENT_MANAGER_ERROR_WRITE" : 5,  "GTK_RECENT_MANAGER_ERROR_UNKNOWN" : 6, 
 "GTK_RECENT_FILTER_URI" : 1,  "GTK_RECENT_FILTER_DISPLAY_NAME" : 2,  "GTK_RECENT_FILTER_MIME_TYPE" : 4,  "GTK_RECENT_FILTER_APPLICATION" : 8,  "GTK_RECENT_FILTER_GROUP" : 16,  "GTK_RECENT_FILTER_AGE" : 32, 
 "GTK_RECENT_SORT_NONE" : 0,  "GTK_RECENT_SORT_MRU" : 1,  "GTK_RECENT_SORT_LRU" : 2,  "GTK_RECENT_SORT_CUSTOM" : 3, 
 "GTK_RECENT_CHOOSER_ERROR_NOT_FOUND" : 0,  "GTK_RECENT_CHOOSER_ERROR_INVALID_URI" : 1, 
 "GTK_UPDATE_ALWAYS" : 0,  "GTK_UPDATE_IF_VALID" : 1, 
 "GTK_SPIN_STEP_FORWARD" : 0,  "GTK_SPIN_STEP_BACKWARD" : 1,  "GTK_SPIN_PAGE_FORWARD" : 2,  "GTK_SPIN_PAGE_BACKWARD" : 3,  "GTK_SPIN_HOME" : 4,  "GTK_SPIN_END" : 5,  "GTK_SPIN_USER_DEFINED" : 6, 
 "GTK_TEXT_BUFFER_TARGET_INFO_BUFFER_CONTENTS" : -1,  "GTK_TEXT_BUFFER_TARGET_INFO_RICH_TEXT" : -2,  "GTK_TEXT_BUFFER_TARGET_INFO_TEXT" : -3, 
 "GTK_TEXT_WINDOW_PRIVATE" : 0,  "GTK_TEXT_WINDOW_WIDGET" : 1,  "GTK_TEXT_WINDOW_TEXT" : 2,  "GTK_TEXT_WINDOW_LEFT" : 3,  "GTK_TEXT_WINDOW_RIGHT" : 4,  "GTK_TEXT_WINDOW_TOP" : 5,  "GTK_TEXT_WINDOW_BOTTOM" : 6, 
 "GTK_TOOLBAR_SPACE_EMPTY" : 0,  "GTK_TOOLBAR_SPACE_LINE" : 1, 
 "GTK_TOOL_PALETTE_DRAG_ITEMS" : 1,  "GTK_TOOL_PALETTE_DRAG_GROUPS" : 2, 
 "GTK_UI_MANAGER_AUTO" : 0,  "GTK_UI_MANAGER_MENUBAR" : 1,  "GTK_UI_MANAGER_MENU" : 2,  "GTK_UI_MANAGER_TOOLBAR" : 4,  "GTK_UI_MANAGER_PLACEHOLDER" : 8,  "GTK_UI_MANAGER_POPUP" : 16,  "GTK_UI_MANAGER_MENUITEM" : 32,  "GTK_UI_MANAGER_TOOLITEM" : 64,  "GTK_UI_MANAGER_SEPARATOR" : 128,  "GTK_UI_MANAGER_ACCELERATOR" : 256,  "GTK_UI_MANAGER_POPUP_WITH_ACCELS" : 512, 
 "NAUTILUS_FILE_ATTRIBUTE_INFO" : 1,  "NAUTILUS_FILE_ATTRIBUTE_LINK_INFO" : 2,  "NAUTILUS_FILE_ATTRIBUTE_DEEP_COUNTS" : 4,  "NAUTILUS_FILE_ATTRIBUTE_DIRECTORY_ITEM_COUNT" : 8,  "NAUTILUS_FILE_ATTRIBUTE_DIRECTORY_ITEM_MIME_TYPES" : 16,  "NAUTILUS_FILE_ATTRIBUTE_TOP_LEFT_TEXT" : 32,  "NAUTILUS_FILE_ATTRIBUTE_LARGE_TOP_LEFT_TEXT" : 64,  "NAUTILUS_FILE_ATTRIBUTE_EXTENSION_INFO" : 128,  "NAUTILUS_FILE_ATTRIBUTE_THUMBNAIL" : 256,  "NAUTILUS_FILE_ATTRIBUTE_MOUNT" : 512,  "NAUTILUS_FILE_ATTRIBUTE_FILESYSTEM_INFO" : 65536, 
 "NAUTILUS_ZOOM_LEVEL_SMALLEST" : 0,  "NAUTILUS_ZOOM_LEVEL_SMALLER" : 1,  "NAUTILUS_ZOOM_LEVEL_SMALL" : 2,  "NAUTILUS_ZOOM_LEVEL_STANDARD" : 3,  "NAUTILUS_ZOOM_LEVEL_LARGE" : 4,  "NAUTILUS_ZOOM_LEVEL_LARGER" : 5,  "NAUTILUS_ZOOM_LEVEL_LARGEST" : 6, 
 "NAUTILUS_FILE_SORT_NONE" : 0,  "NAUTILUS_FILE_SORT_BY_DISPLAY_NAME" : 1,  "NAUTILUS_FILE_SORT_BY_SIZE" : 2,  "NAUTILUS_FILE_SORT_BY_TYPE" : 3,  "NAUTILUS_FILE_SORT_BY_MTIME" : 4,  "NAUTILUS_FILE_SORT_BY_ATIME" : 5,  "NAUTILUS_FILE_SORT_BY_TRASHED_TIME" : 6, 
 "NAUTILUS_REQUEST_NOT_STARTED" : 0,  "NAUTILUS_REQUEST_IN_PROGRESS" : 1,  "NAUTILUS_REQUEST_DONE" : 2, 
 "NAUTILUS_FILE_ICON_FLAGS_NONE" : 0,  "NAUTILUS_FILE_ICON_FLAGS_USE_THUMBNAILS" : 1,  "NAUTILUS_FILE_ICON_FLAGS_IGNORE_VISITING" : 2,  "NAUTILUS_FILE_ICON_FLAGS_EMBEDDING_TEXT" : 4,  "NAUTILUS_FILE_ICON_FLAGS_FOR_DRAG_ACCEPT" : 8,  "NAUTILUS_FILE_ICON_FLAGS_FOR_OPEN_FOLDER" : 16,  "NAUTILUS_FILE_ICON_FLAGS_FORCE_THUMBNAIL_SIZE" : 32,  "NAUTILUS_FILE_ICON_FLAGS_USE_MOUNT_ICON" : 64,  "NAUTILUS_FILE_ICON_FLAGS_USE_MOUNT_ICON_AS_EMBLEM" : 128, 
 "NAUTILUS_DATE_TYPE_MODIFIED" : 0,  "NAUTILUS_DATE_TYPE_CHANGED" : 1,  "NAUTILUS_DATE_TYPE_ACCESSED" : 2,  "NAUTILUS_DATE_TYPE_PERMISSIONS_CHANGED" : 3,  "NAUTILUS_DATE_TYPE_TRASHED" : 4, 
 "EEL_CANVAS_ITEM_REALIZED" : 16,  "EEL_CANVAS_ITEM_MAPPED" : 32,  "EEL_CANVAS_ITEM_ALWAYS_REDRAW" : 64,  "EEL_CANVAS_ITEM_VISIBLE" : 128,  "EEL_CANVAS_ITEM_NEED_UPDATE" : 256,  "EEL_CANVAS_ITEM_NEED_DEEP_UPDATE" : 512, 
 "EEL_CANVAS_UPDATE_REQUESTED" : 1,  "EEL_CANVAS_UPDATE_DEEP" : 2, 
 "NAUTILUS_ICON_LAYOUT_L_R_T_B" : 0,  "NAUTILUS_ICON_LAYOUT_R_L_T_B" : 1,  "NAUTILUS_ICON_LAYOUT_T_B_L_R" : 2,  "NAUTILUS_ICON_LAYOUT_T_B_R_L" : 3, 
 "NAUTILUS_ICON_LABEL_POSITION_UNDER" : 0,  "NAUTILUS_ICON_LABEL_POSITION_BESIDE" : 1, 
 "NAUTILUS_WINDOW_OPEN_FLAG_CLOSE_BEHIND" : 1,  "NAUTILUS_WINDOW_OPEN_FLAG_NEW_WINDOW" : 2,  "NAUTILUS_WINDOW_OPEN_FLAG_NEW_TAB" : 4, 
 "NAUTILUS_LOCATION_CHANGE_STANDARD" : 0,  "NAUTILUS_LOCATION_CHANGE_BACK" : 1,  "NAUTILUS_LOCATION_CHANGE_FORWARD" : 2,  "NAUTILUS_LOCATION_CHANGE_RELOAD" : 3, 
 "NAUTILUS_WINDOW_SHOW_HIDDEN_FILES_DEFAULT" : 0,  "NAUTILUS_WINDOW_SHOW_HIDDEN_FILES_ENABLE" : 1,  "NAUTILUS_WINDOW_SHOW_HIDDEN_FILES_DISABLE" : 2, 
 "NAUTILUS_WINDOW_NOT_SHOWN" : 0,  "NAUTILUS_WINDOW_POSITION_SET" : 1,  "NAUTILUS_WINDOW_SHOULD_SHOW" : 2, 
 "NAUTILUS_WINDOW_OPEN_SLOT_NONE" : 0,  "NAUTILUS_WINDOW_OPEN_SLOT_APPEND" : 1, 
 "NAUTILUS_OPERATION_COMPLETE" : 0,  "NAUTILUS_OPERATION_FAILED" : 1,  "NAUTILUS_OPERATION_IN_PROGRESS" : 2, 
 "NAUTILUS_DESKTOP_LINK_HOME" : 0,  "NAUTILUS_DESKTOP_LINK_TRASH" : 1,  "NAUTILUS_DESKTOP_LINK_MOUNT" : 2,  "NAUTILUS_DESKTOP_LINK_NETWORK" : 3, 
 "XML_BUFFER_ALLOC_DOUBLEIT" : 0,  "XML_BUFFER_ALLOC_EXACT" : 1,  "XML_BUFFER_ALLOC_IMMUTABLE" : 2,  "XML_BUFFER_ALLOC_IO" : 3, 
 "XML_ELEMENT_NODE" : 1,  "XML_ATTRIBUTE_NODE" : 2,  "XML_TEXT_NODE" : 3,  "XML_CDATA_SECTION_NODE" : 4,  "XML_ENTITY_REF_NODE" : 5,  "XML_ENTITY_NODE" : 6,  "XML_PI_NODE" : 7,  "XML_COMMENT_NODE" : 8,  "XML_DOCUMENT_NODE" : 9,  "XML_DOCUMENT_TYPE_NODE" : 10,  "XML_DOCUMENT_FRAG_NODE" : 11,  "XML_NOTATION_NODE" : 12,  "XML_HTML_DOCUMENT_NODE" : 13,  "XML_DTD_NODE" : 14,  "XML_ELEMENT_DECL" : 15,  "XML_ATTRIBUTE_DECL" : 16,  "XML_ENTITY_DECL" : 17,  "XML_NAMESPACE_DECL" : 18,  "XML_XINCLUDE_START" : 19,  "XML_XINCLUDE_END" : 20,  "XML_DOCB_DOCUMENT_NODE" : 21, 
 "XML_ATTRIBUTE_CDATA" : 1,  "XML_ATTRIBUTE_ID" : 2,  "XML_ATTRIBUTE_IDREF" : 3,  "XML_ATTRIBUTE_IDREFS" : 4,  "XML_ATTRIBUTE_ENTITY" : 5,  "XML_ATTRIBUTE_ENTITIES" : 6,  "XML_ATTRIBUTE_NMTOKEN" : 7,  "XML_ATTRIBUTE_NMTOKENS" : 8,  "XML_ATTRIBUTE_ENUMERATION" : 9,  "XML_ATTRIBUTE_NOTATION" : 10, 
 "XML_ATTRIBUTE_NONE" : 1,  "XML_ATTRIBUTE_REQUIRED" : 2,  "XML_ATTRIBUTE_IMPLIED" : 3,  "XML_ATTRIBUTE_FIXED" : 4, 
 "XML_ELEMENT_CONTENT_PCDATA" : 1,  "XML_ELEMENT_CONTENT_ELEMENT" : 2,  "XML_ELEMENT_CONTENT_SEQ" : 3,  "XML_ELEMENT_CONTENT_OR" : 4, 
 "XML_ELEMENT_CONTENT_ONCE" : 1,  "XML_ELEMENT_CONTENT_OPT" : 2,  "XML_ELEMENT_CONTENT_MULT" : 3,  "XML_ELEMENT_CONTENT_PLUS" : 4, 
 "XML_ELEMENT_TYPE_UNDEFINED" : 0,  "XML_ELEMENT_TYPE_EMPTY" : 1,  "XML_ELEMENT_TYPE_ANY" : 2,  "XML_ELEMENT_TYPE_MIXED" : 3,  "XML_ELEMENT_TYPE_ELEMENT" : 4, 
 "XML_EXP_EMPTY" : 0,  "XML_EXP_FORBID" : 1,  "XML_EXP_ATOM" : 2,  "XML_EXP_SEQ" : 3,  "XML_EXP_OR" : 4,  "XML_EXP_COUNT" : 5, 
 "XML_DOC_WELLFORMED" : 1,  "XML_DOC_NSVALID" : 2,  "XML_DOC_OLD10" : 4,  "XML_DOC_DTDVALID" : 8,  "XML_DOC_XINCLUDE" : 16,  "XML_DOC_USERBUILT" : 32,  "XML_DOC_INTERNAL" : 64,  "XML_DOC_HTML" : 128, 
 "XML_ERR_NONE" : 0,  "XML_ERR_WARNING" : 1,  "XML_ERR_ERROR" : 2,  "XML_ERR_FATAL" : 3, 
 "XML_FROM_NONE" : 0,  "XML_FROM_PARSER" : 1,  "XML_FROM_TREE" : 2,  "XML_FROM_NAMESPACE" : 3,  "XML_FROM_DTD" : 4,  "XML_FROM_HTML" : 5,  "XML_FROM_MEMORY" : 6,  "XML_FROM_OUTPUT" : 7,  "XML_FROM_IO" : 8,  "XML_FROM_FTP" : 9,  "XML_FROM_HTTP" : 10,  "XML_FROM_XINCLUDE" : 11,  "XML_FROM_XPATH" : 12,  "XML_FROM_XPOINTER" : 13,  "XML_FROM_REGEXP" : 14,  "XML_FROM_DATATYPE" : 15,  "XML_FROM_SCHEMASP" : 16,  "XML_FROM_SCHEMASV" : 17,  "XML_FROM_RELAXNGP" : 18,  "XML_FROM_RELAXNGV" : 19,  "XML_FROM_CATALOG" : 20,  "XML_FROM_C14N" : 21,  "XML_FROM_XSLT" : 22,  "XML_FROM_VALID" : 23,  "XML_FROM_CHECK" : 24,  "XML_FROM_WRITER" : 25,  "XML_FROM_MODULE" : 26,  "XML_FROM_I18N" : 27,  "XML_FROM_SCHEMATRONV" : 28, 
 "XML_ERR_OK" : 0,  "XML_ERR_INTERNAL_ERROR" : 1,  "XML_ERR_NO_MEMORY" : 2,  "XML_ERR_DOCUMENT_START" : 3,  "XML_ERR_DOCUMENT_EMPTY" : 4,  "XML_ERR_DOCUMENT_END" : 5,  "XML_ERR_INVALID_HEX_CHARREF" : 6,  "XML_ERR_INVALID_DEC_CHARREF" : 7,  "XML_ERR_INVALID_CHARREF" : 8,  "XML_ERR_INVALID_CHAR" : 9,  "XML_ERR_CHARREF_AT_EOF" : 10,  "XML_ERR_CHARREF_IN_PROLOG" : 11,  "XML_ERR_CHARREF_IN_EPILOG" : 12,  "XML_ERR_CHARREF_IN_DTD" : 13,  "XML_ERR_ENTITYREF_AT_EOF" : 14,  "XML_ERR_ENTITYREF_IN_PROLOG" : 15,  "XML_ERR_ENTITYREF_IN_EPILOG" : 16,  "XML_ERR_ENTITYREF_IN_DTD" : 17,  "XML_ERR_PEREF_AT_EOF" : 18,  "XML_ERR_PEREF_IN_PROLOG" : 19,  "XML_ERR_PEREF_IN_EPILOG" : 20,  "XML_ERR_PEREF_IN_INT_SUBSET" : 21,  "XML_ERR_ENTITYREF_NO_NAME" : 22,  "XML_ERR_ENTITYREF_SEMICOL_MISSING" : 23,  "XML_ERR_PEREF_NO_NAME" : 24,  "XML_ERR_PEREF_SEMICOL_MISSING" : 25,  "XML_ERR_UNDECLARED_ENTITY" : 26,  "XML_WAR_UNDECLARED_ENTITY" : 27,  "XML_ERR_UNPARSED_ENTITY" : 28,  "XML_ERR_ENTITY_IS_EXTERNAL" : 29,  "XML_ERR_ENTITY_IS_PARAMETER" : 30,  "XML_ERR_UNKNOWN_ENCODING" : 31,  "XML_ERR_UNSUPPORTED_ENCODING" : 32,  "XML_ERR_STRING_NOT_STARTED" : 33,  "XML_ERR_STRING_NOT_CLOSED" : 34,  "XML_ERR_NS_DECL_ERROR" : 35,  "XML_ERR_ENTITY_NOT_STARTED" : 36,  "XML_ERR_ENTITY_NOT_FINISHED" : 37,  "XML_ERR_LT_IN_ATTRIBUTE" : 38,  "XML_ERR_ATTRIBUTE_NOT_STARTED" : 39,  "XML_ERR_ATTRIBUTE_NOT_FINISHED" : 40,  "XML_ERR_ATTRIBUTE_WITHOUT_VALUE" : 41,  "XML_ERR_ATTRIBUTE_REDEFINED" : 42,  "XML_ERR_LITERAL_NOT_STARTED" : 43,  "XML_ERR_LITERAL_NOT_FINISHED" : 44,  "XML_ERR_COMMENT_NOT_FINISHED" : 45,  "XML_ERR_PI_NOT_STARTED" : 46,  "XML_ERR_PI_NOT_FINISHED" : 47,  "XML_ERR_NOTATION_NOT_STARTED" : 48,  "XML_ERR_NOTATION_NOT_FINISHED" : 49,  "XML_ERR_ATTLIST_NOT_STARTED" : 50,  "XML_ERR_ATTLIST_NOT_FINISHED" : 51,  "XML_ERR_MIXED_NOT_STARTED" : 52,  "XML_ERR_MIXED_NOT_FINISHED" : 53,  "XML_ERR_ELEMCONTENT_NOT_STARTED" : 54,  "XML_ERR_ELEMCONTENT_NOT_FINISHED" : 55,  "XML_ERR_XMLDECL_NOT_STARTED" : 56,  "XML_ERR_XMLDECL_NOT_FINISHED" : 57,  "XML_ERR_CONDSEC_NOT_STARTED" : 58,  "XML_ERR_CONDSEC_NOT_FINISHED" : 59,  "XML_ERR_EXT_SUBSET_NOT_FINISHED" : 60,  "XML_ERR_DOCTYPE_NOT_FINISHED" : 61,  "XML_ERR_MISPLACED_CDATA_END" : 62,  "XML_ERR_CDATA_NOT_FINISHED" : 63,  "XML_ERR_RESERVED_XML_NAME" : 64,  "XML_ERR_SPACE_REQUIRED" : 65,  "XML_ERR_SEPARATOR_REQUIRED" : 66,  "XML_ERR_NMTOKEN_REQUIRED" : 67,  "XML_ERR_NAME_REQUIRED" : 68,  "XML_ERR_PCDATA_REQUIRED" : 69,  "XML_ERR_URI_REQUIRED" : 70,  "XML_ERR_PUBID_REQUIRED" : 71,  "XML_ERR_LT_REQUIRED" : 72,  "XML_ERR_GT_REQUIRED" : 73,  "XML_ERR_LTSLASH_REQUIRED" : 74,  "XML_ERR_EQUAL_REQUIRED" : 75,  "XML_ERR_TAG_NAME_MISMATCH" : 76,  "XML_ERR_TAG_NOT_FINISHED" : 77,  "XML_ERR_STANDALONE_VALUE" : 78,  "XML_ERR_ENCODING_NAME" : 79,  "XML_ERR_HYPHEN_IN_COMMENT" : 80,  "XML_ERR_INVALID_ENCODING" : 81,  "XML_ERR_EXT_ENTITY_STANDALONE" : 82,  "XML_ERR_CONDSEC_INVALID" : 83,  "XML_ERR_VALUE_REQUIRED" : 84,  "XML_ERR_NOT_WELL_BALANCED" : 85,  "XML_ERR_EXTRA_CONTENT" : 86,  "XML_ERR_ENTITY_CHAR_ERROR" : 87,  "XML_ERR_ENTITY_PE_INTERNAL" : 88,  "XML_ERR_ENTITY_LOOP" : 89,  "XML_ERR_ENTITY_BOUNDARY" : 90,  "XML_ERR_INVALID_URI" : 91,  "XML_ERR_URI_FRAGMENT" : 92,  "XML_WAR_CATALOG_PI" : 93,  "XML_ERR_NO_DTD" : 94,  "XML_ERR_CONDSEC_INVALID_KEYWORD" : 95,  "XML_ERR_VERSION_MISSING" : 96,  "XML_WAR_UNKNOWN_VERSION" : 97,  "XML_WAR_LANG_VALUE" : 98,  "XML_WAR_NS_URI" : 99,  "XML_WAR_NS_URI_RELATIVE" : 100,  "XML_ERR_MISSING_ENCODING" : 101,  "XML_WAR_SPACE_VALUE" : 102,  "XML_ERR_NOT_STANDALONE" : 103,  "XML_ERR_ENTITY_PROCESSING" : 104,  "XML_ERR_NOTATION_PROCESSING" : 105,  "XML_WAR_NS_COLUMN" : 106,  "XML_WAR_ENTITY_REDEFINED" : 107,  "XML_ERR_UNKNOWN_VERSION" : 108,  "XML_ERR_VERSION_MISMATCH" : 109,  "XML_NS_ERR_XML_NAMESPACE" : 200,  "XML_NS_ERR_UNDEFINED_NAMESPACE" : 201,  "XML_NS_ERR_QNAME" : 202,  "XML_NS_ERR_ATTRIBUTE_REDEFINED" : 203,  "XML_NS_ERR_EMPTY" : 204,  "XML_NS_ERR_COLON" : 205,  "XML_DTD_ATTRIBUTE_DEFAULT" : 500,  "XML_DTD_ATTRIBUTE_REDEFINED" : 501,  "XML_DTD_ATTRIBUTE_VALUE" : 502,  "XML_DTD_CONTENT_ERROR" : 503,  "XML_DTD_CONTENT_MODEL" : 504,  "XML_DTD_CONTENT_NOT_DETERMINIST" : 505,  "XML_DTD_DIFFERENT_PREFIX" : 506,  "XML_DTD_ELEM_DEFAULT_NAMESPACE" : 507,  "XML_DTD_ELEM_NAMESPACE" : 508,  "XML_DTD_ELEM_REDEFINED" : 509,  "XML_DTD_EMPTY_NOTATION" : 510,  "XML_DTD_ENTITY_TYPE" : 511,  "XML_DTD_ID_FIXED" : 512,  "XML_DTD_ID_REDEFINED" : 513,  "XML_DTD_ID_SUBSET" : 514,  "XML_DTD_INVALID_CHILD" : 515,  "XML_DTD_INVALID_DEFAULT" : 516,  "XML_DTD_LOAD_ERROR" : 517,  "XML_DTD_MISSING_ATTRIBUTE" : 518,  "XML_DTD_MIXED_CORRUPT" : 519,  "XML_DTD_MULTIPLE_ID" : 520,  "XML_DTD_NO_DOC" : 521,  "XML_DTD_NO_DTD" : 522,  "XML_DTD_NO_ELEM_NAME" : 523,  "XML_DTD_NO_PREFIX" : 524,  "XML_DTD_NO_ROOT" : 525,  "XML_DTD_NOTATION_REDEFINED" : 526,  "XML_DTD_NOTATION_VALUE" : 527,  "XML_DTD_NOT_EMPTY" : 528,  "XML_DTD_NOT_PCDATA" : 529,  "XML_DTD_NOT_STANDALONE" : 530,  "XML_DTD_ROOT_NAME" : 531,  "XML_DTD_STANDALONE_WHITE_SPACE" : 532,  "XML_DTD_UNKNOWN_ATTRIBUTE" : 533,  "XML_DTD_UNKNOWN_ELEM" : 534,  "XML_DTD_UNKNOWN_ENTITY" : 535,  "XML_DTD_UNKNOWN_ID" : 536,  "XML_DTD_UNKNOWN_NOTATION" : 537,  "XML_DTD_STANDALONE_DEFAULTED" : 538,  "XML_DTD_XMLID_VALUE" : 539,  "XML_DTD_XMLID_TYPE" : 540,  "XML_DTD_DUP_TOKEN" : 541,  "XML_HTML_STRUCURE_ERROR" : 800,  "XML_HTML_UNKNOWN_TAG" : 801,  "XML_RNGP_ANYNAME_ATTR_ANCESTOR" : 1000,  "XML_RNGP_ATTR_CONFLICT" : 1001,  "XML_RNGP_ATTRIBUTE_CHILDREN" : 1002,  "XML_RNGP_ATTRIBUTE_CONTENT" : 1003,  "XML_RNGP_ATTRIBUTE_EMPTY" : 1004,  "XML_RNGP_ATTRIBUTE_NOOP" : 1005,  "XML_RNGP_CHOICE_CONTENT" : 1006,  "XML_RNGP_CHOICE_EMPTY" : 1007,  "XML_RNGP_CREATE_FAILURE" : 1008,  "XML_RNGP_DATA_CONTENT" : 1009,  "XML_RNGP_DEF_CHOICE_AND_INTERLEAVE" : 1010,  "XML_RNGP_DEFINE_CREATE_FAILED" : 1011,  "XML_RNGP_DEFINE_EMPTY" : 1012,  "XML_RNGP_DEFINE_MISSING" : 1013,  "XML_RNGP_DEFINE_NAME_MISSING" : 1014,  "XML_RNGP_ELEM_CONTENT_EMPTY" : 1015,  "XML_RNGP_ELEM_CONTENT_ERROR" : 1016,  "XML_RNGP_ELEMENT_EMPTY" : 1017,  "XML_RNGP_ELEMENT_CONTENT" : 1018,  "XML_RNGP_ELEMENT_NAME" : 1019,  "XML_RNGP_ELEMENT_NO_CONTENT" : 1020,  "XML_RNGP_ELEM_TEXT_CONFLICT" : 1021,  "XML_RNGP_EMPTY" : 1022,  "XML_RNGP_EMPTY_CONSTRUCT" : 1023,  "XML_RNGP_EMPTY_CONTENT" : 1024,  "XML_RNGP_EMPTY_NOT_EMPTY" : 1025,  "XML_RNGP_ERROR_TYPE_LIB" : 1026,  "XML_RNGP_EXCEPT_EMPTY" : 1027,  "XML_RNGP_EXCEPT_MISSING" : 1028,  "XML_RNGP_EXCEPT_MULTIPLE" : 1029,  "XML_RNGP_EXCEPT_NO_CONTENT" : 1030,  "XML_RNGP_EXTERNALREF_EMTPY" : 1031,  "XML_RNGP_EXTERNAL_REF_FAILURE" : 1032,  "XML_RNGP_EXTERNALREF_RECURSE" : 1033,  "XML_RNGP_FORBIDDEN_ATTRIBUTE" : 1034,  "XML_RNGP_FOREIGN_ELEMENT" : 1035,  "XML_RNGP_GRAMMAR_CONTENT" : 1036,  "XML_RNGP_GRAMMAR_EMPTY" : 1037,  "XML_RNGP_GRAMMAR_MISSING" : 1038,  "XML_RNGP_GRAMMAR_NO_START" : 1039,  "XML_RNGP_GROUP_ATTR_CONFLICT" : 1040,  "XML_RNGP_HREF_ERROR" : 1041,  "XML_RNGP_INCLUDE_EMPTY" : 1042,  "XML_RNGP_INCLUDE_FAILURE" : 1043,  "XML_RNGP_INCLUDE_RECURSE" : 1044,  "XML_RNGP_INTERLEAVE_ADD" : 1045,  "XML_RNGP_INTERLEAVE_CREATE_FAILED" : 1046,  "XML_RNGP_INTERLEAVE_EMPTY" : 1047,  "XML_RNGP_INTERLEAVE_NO_CONTENT" : 1048,  "XML_RNGP_INVALID_DEFINE_NAME" : 1049,  "XML_RNGP_INVALID_URI" : 1050,  "XML_RNGP_INVALID_VALUE" : 1051,  "XML_RNGP_MISSING_HREF" : 1052,  "XML_RNGP_NAME_MISSING" : 1053,  "XML_RNGP_NEED_COMBINE" : 1054,  "XML_RNGP_NOTALLOWED_NOT_EMPTY" : 1055,  "XML_RNGP_NSNAME_ATTR_ANCESTOR" : 1056,  "XML_RNGP_NSNAME_NO_NS" : 1057,  "XML_RNGP_PARAM_FORBIDDEN" : 1058,  "XML_RNGP_PARAM_NAME_MISSING" : 1059,  "XML_RNGP_PARENTREF_CREATE_FAILED" : 1060,  "XML_RNGP_PARENTREF_NAME_INVALID" : 1061,  "XML_RNGP_PARENTREF_NO_NAME" : 1062,  "XML_RNGP_PARENTREF_NO_PARENT" : 1063,  "XML_RNGP_PARENTREF_NOT_EMPTY" : 1064,  "XML_RNGP_PARSE_ERROR" : 1065,  "XML_RNGP_PAT_ANYNAME_EXCEPT_ANYNAME" : 1066,  "XML_RNGP_PAT_ATTR_ATTR" : 1067,  "XML_RNGP_PAT_ATTR_ELEM" : 1068,  "XML_RNGP_PAT_DATA_EXCEPT_ATTR" : 1069,  "XML_RNGP_PAT_DATA_EXCEPT_ELEM" : 1070,  "XML_RNGP_PAT_DATA_EXCEPT_EMPTY" : 1071,  "XML_RNGP_PAT_DATA_EXCEPT_GROUP" : 1072,  "XML_RNGP_PAT_DATA_EXCEPT_INTERLEAVE" : 1073,  "XML_RNGP_PAT_DATA_EXCEPT_LIST" : 1074,  "XML_RNGP_PAT_DATA_EXCEPT_ONEMORE" : 1075,  "XML_RNGP_PAT_DATA_EXCEPT_REF" : 1076,  "XML_RNGP_PAT_DATA_EXCEPT_TEXT" : 1077,  "XML_RNGP_PAT_LIST_ATTR" : 1078,  "XML_RNGP_PAT_LIST_ELEM" : 1079,  "XML_RNGP_PAT_LIST_INTERLEAVE" : 1080,  "XML_RNGP_PAT_LIST_LIST" : 1081,  "XML_RNGP_PAT_LIST_REF" : 1082,  "XML_RNGP_PAT_LIST_TEXT" : 1083,  "XML_RNGP_PAT_NSNAME_EXCEPT_ANYNAME" : 1084,  "XML_RNGP_PAT_NSNAME_EXCEPT_NSNAME" : 1085,  "XML_RNGP_PAT_ONEMORE_GROUP_ATTR" : 1086,  "XML_RNGP_PAT_ONEMORE_INTERLEAVE_ATTR" : 1087,  "XML_RNGP_PAT_START_ATTR" : 1088,  "XML_RNGP_PAT_START_DATA" : 1089,  "XML_RNGP_PAT_START_EMPTY" : 1090,  "XML_RNGP_PAT_START_GROUP" : 1091,  "XML_RNGP_PAT_START_INTERLEAVE" : 1092,  "XML_RNGP_PAT_START_LIST" : 1093,  "XML_RNGP_PAT_START_ONEMORE" : 1094,  "XML_RNGP_PAT_START_TEXT" : 1095,  "XML_RNGP_PAT_START_VALUE" : 1096,  "XML_RNGP_PREFIX_UNDEFINED" : 1097,  "XML_RNGP_REF_CREATE_FAILED" : 1098,  "XML_RNGP_REF_CYCLE" : 1099,  "XML_RNGP_REF_NAME_INVALID" : 1100,  "XML_RNGP_REF_NO_DEF" : 1101,  "XML_RNGP_REF_NO_NAME" : 1102,  "XML_RNGP_REF_NOT_EMPTY" : 1103,  "XML_RNGP_START_CHOICE_AND_INTERLEAVE" : 1104,  "XML_RNGP_START_CONTENT" : 1105,  "XML_RNGP_START_EMPTY" : 1106,  "XML_RNGP_START_MISSING" : 1107,  "XML_RNGP_TEXT_EXPECTED" : 1108,  "XML_RNGP_TEXT_HAS_CHILD" : 1109,  "XML_RNGP_TYPE_MISSING" : 1110,  "XML_RNGP_TYPE_NOT_FOUND" : 1111,  "XML_RNGP_TYPE_VALUE" : 1112,  "XML_RNGP_UNKNOWN_ATTRIBUTE" : 1113,  "XML_RNGP_UNKNOWN_COMBINE" : 1114,  "XML_RNGP_UNKNOWN_CONSTRUCT" : 1115,  "XML_RNGP_UNKNOWN_TYPE_LIB" : 1116,  "XML_RNGP_URI_FRAGMENT" : 1117,  "XML_RNGP_URI_NOT_ABSOLUTE" : 1118,  "XML_RNGP_VALUE_EMPTY" : 1119,  "XML_RNGP_VALUE_NO_CONTENT" : 1120,  "XML_RNGP_XMLNS_NAME" : 1121,  "XML_RNGP_XML_NS" : 1122,  "XML_XPATH_EXPRESSION_OK" : 1200,  "XML_XPATH_NUMBER_ERROR" : 1201,  "XML_XPATH_UNFINISHED_LITERAL_ERROR" : 1202,  "XML_XPATH_START_LITERAL_ERROR" : 1203,  "XML_XPATH_VARIABLE_REF_ERROR" : 1204,  "XML_XPATH_UNDEF_VARIABLE_ERROR" : 1205,  "XML_XPATH_INVALID_PREDICATE_ERROR" : 1206,  "XML_XPATH_EXPR_ERROR" : 1207,  "XML_XPATH_UNCLOSED_ERROR" : 1208,  "XML_XPATH_UNKNOWN_FUNC_ERROR" : 1209,  "XML_XPATH_INVALID_OPERAND" : 1210,  "XML_XPATH_INVALID_TYPE" : 1211,  "XML_XPATH_INVALID_ARITY" : 1212,  "XML_XPATH_INVALID_CTXT_SIZE" : 1213,  "XML_XPATH_INVALID_CTXT_POSITION" : 1214,  "XML_XPATH_MEMORY_ERROR" : 1215,  "XML_XPTR_SYNTAX_ERROR" : 1216,  "XML_XPTR_RESOURCE_ERROR" : 1217,  "XML_XPTR_SUB_RESOURCE_ERROR" : 1218,  "XML_XPATH_UNDEF_PREFIX_ERROR" : 1219,  "XML_XPATH_ENCODING_ERROR" : 1220,  "XML_XPATH_INVALID_CHAR_ERROR" : 1221,  "XML_TREE_INVALID_HEX" : 1300,  "XML_TREE_INVALID_DEC" : 1301,  "XML_TREE_UNTERMINATED_ENTITY" : 1302,  "XML_TREE_NOT_UTF8" : 1303,  "XML_SAVE_NOT_UTF8" : 1400,  "XML_SAVE_CHAR_INVALID" : 1401,  "XML_SAVE_NO_DOCTYPE" : 1402,  "XML_SAVE_UNKNOWN_ENCODING" : 1403,  "XML_REGEXP_COMPILE_ERROR" : 1450,  "XML_IO_UNKNOWN" : 1500,  "XML_IO_EACCES" : 1501,  "XML_IO_EAGAIN" : 1502,  "XML_IO_EBADF" : 1503,  "XML_IO_EBADMSG" : 1504,  "XML_IO_EBUSY" : 1505,  "XML_IO_ECANCELED" : 1506,  "XML_IO_ECHILD" : 1507,  "XML_IO_EDEADLK" : 1508,  "XML_IO_EDOM" : 1509,  "XML_IO_EEXIST" : 1510,  "XML_IO_EFAULT" : 1511,  "XML_IO_EFBIG" : 1512,  "XML_IO_EINPROGRESS" : 1513,  "XML_IO_EINTR" : 1514,  "XML_IO_EINVAL" : 1515,  "XML_IO_EIO" : 1516,  "XML_IO_EISDIR" : 1517,  "XML_IO_EMFILE" : 1518,  "XML_IO_EMLINK" : 1519,  "XML_IO_EMSGSIZE" : 1520,  "XML_IO_ENAMETOOLONG" : 1521,  "XML_IO_ENFILE" : 1522,  "XML_IO_ENODEV" : 1523,  "XML_IO_ENOENT" : 1524,  "XML_IO_ENOEXEC" : 1525,  "XML_IO_ENOLCK" : 1526,  "XML_IO_ENOMEM" : 1527,  "XML_IO_ENOSPC" : 1528,  "XML_IO_ENOSYS" : 1529,  "XML_IO_ENOTDIR" : 1530,  "XML_IO_ENOTEMPTY" : 1531,  "XML_IO_ENOTSUP" : 1532,  "XML_IO_ENOTTY" : 1533,  "XML_IO_ENXIO" : 1534,  "XML_IO_EPERM" : 1535,  "XML_IO_EPIPE" : 1536,  "XML_IO_ERANGE" : 1537,  "XML_IO_EROFS" : 1538,  "XML_IO_ESPIPE" : 1539,  "XML_IO_ESRCH" : 1540,  "XML_IO_ETIMEDOUT" : 1541,  "XML_IO_EXDEV" : 1542,  "XML_IO_NETWORK_ATTEMPT" : 1543,  "XML_IO_ENCODER" : 1544,  "XML_IO_FLUSH" : 1545,  "XML_IO_WRITE" : 1546,  "XML_IO_NO_INPUT" : 1547,  "XML_IO_BUFFER_FULL" : 1548,  "XML_IO_LOAD_ERROR" : 1549,  "XML_IO_ENOTSOCK" : 1550,  "XML_IO_EISCONN" : 1551,  "XML_IO_ECONNREFUSED" : 1552,  "XML_IO_ENETUNREACH" : 1553,  "XML_IO_EADDRINUSE" : 1554,  "XML_IO_EALREADY" : 1555,  "XML_IO_EAFNOSUPPORT" : 1556,  "XML_XINCLUDE_RECURSION" : 1600,  "XML_XINCLUDE_PARSE_VALUE" : 1601,  "XML_XINCLUDE_ENTITY_DEF_MISMATCH" : 1602,  "XML_XINCLUDE_NO_HREF" : 1603,  "XML_XINCLUDE_NO_FALLBACK" : 1604,  "XML_XINCLUDE_HREF_URI" : 1605,  "XML_XINCLUDE_TEXT_FRAGMENT" : 1606,  "XML_XINCLUDE_TEXT_DOCUMENT" : 1607,  "XML_XINCLUDE_INVALID_CHAR" : 1608,  "XML_XINCLUDE_BUILD_FAILED" : 1609,  "XML_XINCLUDE_UNKNOWN_ENCODING" : 1610,  "XML_XINCLUDE_MULTIPLE_ROOT" : 1611,  "XML_XINCLUDE_XPTR_FAILED" : 1612,  "XML_XINCLUDE_XPTR_RESULT" : 1613,  "XML_XINCLUDE_INCLUDE_IN_INCLUDE" : 1614,  "XML_XINCLUDE_FALLBACKS_IN_INCLUDE" : 1615,  "XML_XINCLUDE_FALLBACK_NOT_IN_INCLUDE" : 1616,  "XML_XINCLUDE_DEPRECATED_NS" : 1617,  "XML_XINCLUDE_FRAGMENT_ID" : 1618,  "XML_CATALOG_MISSING_ATTR" : 1650,  "XML_CATALOG_ENTRY_BROKEN" : 1651,  "XML_CATALOG_PREFER_VALUE" : 1652,  "XML_CATALOG_NOT_CATALOG" : 1653,  "XML_CATALOG_RECURSION" : 1654,  "XML_SCHEMAP_PREFIX_UNDEFINED" : 1700,  "XML_SCHEMAP_ATTRFORMDEFAULT_VALUE" : 1701,  "XML_SCHEMAP_ATTRGRP_NONAME_NOREF" : 1702,  "XML_SCHEMAP_ATTR_NONAME_NOREF" : 1703,  "XML_SCHEMAP_COMPLEXTYPE_NONAME_NOREF" : 1704,  "XML_SCHEMAP_ELEMFORMDEFAULT_VALUE" : 1705,  "XML_SCHEMAP_ELEM_NONAME_NOREF" : 1706,  "XML_SCHEMAP_EXTENSION_NO_BASE" : 1707,  "XML_SCHEMAP_FACET_NO_VALUE" : 1708,  "XML_SCHEMAP_FAILED_BUILD_IMPORT" : 1709,  "XML_SCHEMAP_GROUP_NONAME_NOREF" : 1710,  "XML_SCHEMAP_IMPORT_NAMESPACE_NOT_URI" : 1711,  "XML_SCHEMAP_IMPORT_REDEFINE_NSNAME" : 1712,  "XML_SCHEMAP_IMPORT_SCHEMA_NOT_URI" : 1713,  "XML_SCHEMAP_INVALID_BOOLEAN" : 1714,  "XML_SCHEMAP_INVALID_ENUM" : 1715,  "XML_SCHEMAP_INVALID_FACET" : 1716,  "XML_SCHEMAP_INVALID_FACET_VALUE" : 1717,  "XML_SCHEMAP_INVALID_MAXOCCURS" : 1718,  "XML_SCHEMAP_INVALID_MINOCCURS" : 1719,  "XML_SCHEMAP_INVALID_REF_AND_SUBTYPE" : 1720,  "XML_SCHEMAP_INVALID_WHITE_SPACE" : 1721,  "XML_SCHEMAP_NOATTR_NOREF" : 1722,  "XML_SCHEMAP_NOTATION_NO_NAME" : 1723,  "XML_SCHEMAP_NOTYPE_NOREF" : 1724,  "XML_SCHEMAP_REF_AND_SUBTYPE" : 1725,  "XML_SCHEMAP_RESTRICTION_NONAME_NOREF" : 1726,  "XML_SCHEMAP_SIMPLETYPE_NONAME" : 1727,  "XML_SCHEMAP_TYPE_AND_SUBTYPE" : 1728,  "XML_SCHEMAP_UNKNOWN_ALL_CHILD" : 1729,  "XML_SCHEMAP_UNKNOWN_ANYATTRIBUTE_CHILD" : 1730,  "XML_SCHEMAP_UNKNOWN_ATTR_CHILD" : 1731,  "XML_SCHEMAP_UNKNOWN_ATTRGRP_CHILD" : 1732,  "XML_SCHEMAP_UNKNOWN_ATTRIBUTE_GROUP" : 1733,  "XML_SCHEMAP_UNKNOWN_BASE_TYPE" : 1734,  "XML_SCHEMAP_UNKNOWN_CHOICE_CHILD" : 1735,  "XML_SCHEMAP_UNKNOWN_COMPLEXCONTENT_CHILD" : 1736,  "XML_SCHEMAP_UNKNOWN_COMPLEXTYPE_CHILD" : 1737,  "XML_SCHEMAP_UNKNOWN_ELEM_CHILD" : 1738,  "XML_SCHEMAP_UNKNOWN_EXTENSION_CHILD" : 1739,  "XML_SCHEMAP_UNKNOWN_FACET_CHILD" : 1740,  "XML_SCHEMAP_UNKNOWN_FACET_TYPE" : 1741,  "XML_SCHEMAP_UNKNOWN_GROUP_CHILD" : 1742,  "XML_SCHEMAP_UNKNOWN_IMPORT_CHILD" : 1743,  "XML_SCHEMAP_UNKNOWN_LIST_CHILD" : 1744,  "XML_SCHEMAP_UNKNOWN_NOTATION_CHILD" : 1745,  "XML_SCHEMAP_UNKNOWN_PROCESSCONTENT_CHILD" : 1746,  "XML_SCHEMAP_UNKNOWN_REF" : 1747,  "XML_SCHEMAP_UNKNOWN_RESTRICTION_CHILD" : 1748,  "XML_SCHEMAP_UNKNOWN_SCHEMAS_CHILD" : 1749,  "XML_SCHEMAP_UNKNOWN_SEQUENCE_CHILD" : 1750,  "XML_SCHEMAP_UNKNOWN_SIMPLECONTENT_CHILD" : 1751,  "XML_SCHEMAP_UNKNOWN_SIMPLETYPE_CHILD" : 1752,  "XML_SCHEMAP_UNKNOWN_TYPE" : 1753,  "XML_SCHEMAP_UNKNOWN_UNION_CHILD" : 1754,  "XML_SCHEMAP_ELEM_DEFAULT_FIXED" : 1755,  "XML_SCHEMAP_REGEXP_INVALID" : 1756,  "XML_SCHEMAP_FAILED_LOAD" : 1757,  "XML_SCHEMAP_NOTHING_TO_PARSE" : 1758,  "XML_SCHEMAP_NOROOT" : 1759,  "XML_SCHEMAP_REDEFINED_GROUP" : 1760,  "XML_SCHEMAP_REDEFINED_TYPE" : 1761,  "XML_SCHEMAP_REDEFINED_ELEMENT" : 1762,  "XML_SCHEMAP_REDEFINED_ATTRGROUP" : 1763,  "XML_SCHEMAP_REDEFINED_ATTR" : 1764,  "XML_SCHEMAP_REDEFINED_NOTATION" : 1765,  "XML_SCHEMAP_FAILED_PARSE" : 1766,  "XML_SCHEMAP_UNKNOWN_PREFIX" : 1767,  "XML_SCHEMAP_DEF_AND_PREFIX" : 1768,  "XML_SCHEMAP_UNKNOWN_INCLUDE_CHILD" : 1769,  "XML_SCHEMAP_INCLUDE_SCHEMA_NOT_URI" : 1770,  "XML_SCHEMAP_INCLUDE_SCHEMA_NO_URI" : 1771,  "XML_SCHEMAP_NOT_SCHEMA" : 1772,  "XML_SCHEMAP_UNKNOWN_MEMBER_TYPE" : 1773,  "XML_SCHEMAP_INVALID_ATTR_USE" : 1774,  "XML_SCHEMAP_RECURSIVE" : 1775,  "XML_SCHEMAP_SUPERNUMEROUS_LIST_ITEM_TYPE" : 1776,  "XML_SCHEMAP_INVALID_ATTR_COMBINATION" : 1777,  "XML_SCHEMAP_INVALID_ATTR_INLINE_COMBINATION" : 1778,  "XML_SCHEMAP_MISSING_SIMPLETYPE_CHILD" : 1779,  "XML_SCHEMAP_INVALID_ATTR_NAME" : 1780,  "XML_SCHEMAP_REF_AND_CONTENT" : 1781,  "XML_SCHEMAP_CT_PROPS_CORRECT_1" : 1782,  "XML_SCHEMAP_CT_PROPS_CORRECT_2" : 1783,  "XML_SCHEMAP_CT_PROPS_CORRECT_3" : 1784,  "XML_SCHEMAP_CT_PROPS_CORRECT_4" : 1785,  "XML_SCHEMAP_CT_PROPS_CORRECT_5" : 1786,  "XML_SCHEMAP_DERIVATION_OK_RESTRICTION_1" : 1787,  "XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_1" : 1788,  "XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_2" : 1789,  "XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_2" : 1790,  "XML_SCHEMAP_DERIVATION_OK_RESTRICTION_3" : 1791,  "XML_SCHEMAP_WILDCARD_INVALID_NS_MEMBER" : 1792,  "XML_SCHEMAP_INTERSECTION_NOT_EXPRESSIBLE" : 1793,  "XML_SCHEMAP_UNION_NOT_EXPRESSIBLE" : 1794,  "XML_SCHEMAP_SRC_IMPORT_3_1" : 1795,  "XML_SCHEMAP_SRC_IMPORT_3_2" : 1796,  "XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_1" : 1797,  "XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_2" : 1798,  "XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_3" : 1799,  "XML_SCHEMAP_COS_CT_EXTENDS_1_3" : 1800,  "XML_SCHEMAV_NOROOT" : 1801,  "XML_SCHEMAV_UNDECLAREDELEM" : 1802,  "XML_SCHEMAV_NOTTOPLEVEL" : 1803,  "XML_SCHEMAV_MISSING" : 1804,  "XML_SCHEMAV_WRONGELEM" : 1805,  "XML_SCHEMAV_NOTYPE" : 1806,  "XML_SCHEMAV_NOROLLBACK" : 1807,  "XML_SCHEMAV_ISABSTRACT" : 1808,  "XML_SCHEMAV_NOTEMPTY" : 1809,  "XML_SCHEMAV_ELEMCONT" : 1810,  "XML_SCHEMAV_HAVEDEFAULT" : 1811,  "XML_SCHEMAV_NOTNILLABLE" : 1812,  "XML_SCHEMAV_EXTRACONTENT" : 1813,  "XML_SCHEMAV_INVALIDATTR" : 1814,  "XML_SCHEMAV_INVALIDELEM" : 1815,  "XML_SCHEMAV_NOTDETERMINIST" : 1816,  "XML_SCHEMAV_CONSTRUCT" : 1817,  "XML_SCHEMAV_INTERNAL" : 1818,  "XML_SCHEMAV_NOTSIMPLE" : 1819,  "XML_SCHEMAV_ATTRUNKNOWN" : 1820,  "XML_SCHEMAV_ATTRINVALID" : 1821,  "XML_SCHEMAV_VALUE" : 1822,  "XML_SCHEMAV_FACET" : 1823,  "XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_1" : 1824,  "XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_2" : 1825,  "XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_3" : 1826,  "XML_SCHEMAV_CVC_TYPE_3_1_1" : 1827,  "XML_SCHEMAV_CVC_TYPE_3_1_2" : 1828,  "XML_SCHEMAV_CVC_FACET_VALID" : 1829,  "XML_SCHEMAV_CVC_LENGTH_VALID" : 1830,  "XML_SCHEMAV_CVC_MINLENGTH_VALID" : 1831,  "XML_SCHEMAV_CVC_MAXLENGTH_VALID" : 1832,  "XML_SCHEMAV_CVC_MININCLUSIVE_VALID" : 1833,  "XML_SCHEMAV_CVC_MAXINCLUSIVE_VALID" : 1834,  "XML_SCHEMAV_CVC_MINEXCLUSIVE_VALID" : 1835,  "XML_SCHEMAV_CVC_MAXEXCLUSIVE_VALID" : 1836,  "XML_SCHEMAV_CVC_TOTALDIGITS_VALID" : 1837,  "XML_SCHEMAV_CVC_FRACTIONDIGITS_VALID" : 1838,  "XML_SCHEMAV_CVC_PATTERN_VALID" : 1839,  "XML_SCHEMAV_CVC_ENUMERATION_VALID" : 1840,  "XML_SCHEMAV_CVC_COMPLEX_TYPE_2_1" : 1841,  "XML_SCHEMAV_CVC_COMPLEX_TYPE_2_2" : 1842,  "XML_SCHEMAV_CVC_COMPLEX_TYPE_2_3" : 1843,  "XML_SCHEMAV_CVC_COMPLEX_TYPE_2_4" : 1844,  "XML_SCHEMAV_CVC_ELT_1" : 1845,  "XML_SCHEMAV_CVC_ELT_2" : 1846,  "XML_SCHEMAV_CVC_ELT_3_1" : 1847,  "XML_SCHEMAV_CVC_ELT_3_2_1" : 1848,  "XML_SCHEMAV_CVC_ELT_3_2_2" : 1849,  "XML_SCHEMAV_CVC_ELT_4_1" : 1850,  "XML_SCHEMAV_CVC_ELT_4_2" : 1851,  "XML_SCHEMAV_CVC_ELT_4_3" : 1852,  "XML_SCHEMAV_CVC_ELT_5_1_1" : 1853,  "XML_SCHEMAV_CVC_ELT_5_1_2" : 1854,  "XML_SCHEMAV_CVC_ELT_5_2_1" : 1855,  "XML_SCHEMAV_CVC_ELT_5_2_2_1" : 1856,  "XML_SCHEMAV_CVC_ELT_5_2_2_2_1" : 1857,  "XML_SCHEMAV_CVC_ELT_5_2_2_2_2" : 1858,  "XML_SCHEMAV_CVC_ELT_6" : 1859,  "XML_SCHEMAV_CVC_ELT_7" : 1860,  "XML_SCHEMAV_CVC_ATTRIBUTE_1" : 1861,  "XML_SCHEMAV_CVC_ATTRIBUTE_2" : 1862,  "XML_SCHEMAV_CVC_ATTRIBUTE_3" : 1863,  "XML_SCHEMAV_CVC_ATTRIBUTE_4" : 1864,  "XML_SCHEMAV_CVC_COMPLEX_TYPE_3_1" : 1865,  "XML_SCHEMAV_CVC_COMPLEX_TYPE_3_2_1" : 1866,  "XML_SCHEMAV_CVC_COMPLEX_TYPE_3_2_2" : 1867,  "XML_SCHEMAV_CVC_COMPLEX_TYPE_4" : 1868,  "XML_SCHEMAV_CVC_COMPLEX_TYPE_5_1" : 1869,  "XML_SCHEMAV_CVC_COMPLEX_TYPE_5_2" : 1870,  "XML_SCHEMAV_ELEMENT_CONTENT" : 1871,  "XML_SCHEMAV_DOCUMENT_ELEMENT_MISSING" : 1872,  "XML_SCHEMAV_CVC_COMPLEX_TYPE_1" : 1873,  "XML_SCHEMAV_CVC_AU" : 1874,  "XML_SCHEMAV_CVC_TYPE_1" : 1875,  "XML_SCHEMAV_CVC_TYPE_2" : 1876,  "XML_SCHEMAV_CVC_IDC" : 1877,  "XML_SCHEMAV_CVC_WILDCARD" : 1878,  "XML_SCHEMAV_MISC" : 1879,  "XML_XPTR_UNKNOWN_SCHEME" : 1900,  "XML_XPTR_CHILDSEQ_START" : 1901,  "XML_XPTR_EVAL_FAILED" : 1902,  "XML_XPTR_EXTRA_OBJECTS" : 1903,  "XML_C14N_CREATE_CTXT" : 1950,  "XML_C14N_REQUIRES_UTF8" : 1951,  "XML_C14N_CREATE_STACK" : 1952,  "XML_C14N_INVALID_NODE" : 1953,  "XML_C14N_UNKNOW_NODE" : 1954,  "XML_C14N_RELATIVE_NAMESPACE" : 1955,  "XML_FTP_PASV_ANSWER" : 2000,  "XML_FTP_EPSV_ANSWER" : 2001,  "XML_FTP_ACCNT" : 2002,  "XML_FTP_URL_SYNTAX" : 2003,  "XML_HTTP_URL_SYNTAX" : 2020,  "XML_HTTP_USE_IP" : 2021,  "XML_HTTP_UNKNOWN_HOST" : 2022,  "XML_SCHEMAP_SRC_SIMPLE_TYPE_1" : 3000,  "XML_SCHEMAP_SRC_SIMPLE_TYPE_2" : 3001,  "XML_SCHEMAP_SRC_SIMPLE_TYPE_3" : 3002,  "XML_SCHEMAP_SRC_SIMPLE_TYPE_4" : 3003,  "XML_SCHEMAP_SRC_RESOLVE" : 3004,  "XML_SCHEMAP_SRC_RESTRICTION_BASE_OR_SIMPLETYPE" : 3005,  "XML_SCHEMAP_SRC_LIST_ITEMTYPE_OR_SIMPLETYPE" : 3006,  "XML_SCHEMAP_SRC_UNION_MEMBERTYPES_OR_SIMPLETYPES" : 3007,  "XML_SCHEMAP_ST_PROPS_CORRECT_1" : 3008,  "XML_SCHEMAP_ST_PROPS_CORRECT_2" : 3009,  "XML_SCHEMAP_ST_PROPS_CORRECT_3" : 3010,  "XML_SCHEMAP_COS_ST_RESTRICTS_1_1" : 3011,  "XML_SCHEMAP_COS_ST_RESTRICTS_1_2" : 3012,  "XML_SCHEMAP_COS_ST_RESTRICTS_1_3_1" : 3013,  "XML_SCHEMAP_COS_ST_RESTRICTS_1_3_2" : 3014,  "XML_SCHEMAP_COS_ST_RESTRICTS_2_1" : 3015,  "XML_SCHEMAP_COS_ST_RESTRICTS_2_3_1_1" : 3016,  "XML_SCHEMAP_COS_ST_RESTRICTS_2_3_1_2" : 3017,  "XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_1" : 3018,  "XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_2" : 3019,  "XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_3" : 3020,  "XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_4" : 3021,  "XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_5" : 3022,  "XML_SCHEMAP_COS_ST_RESTRICTS_3_1" : 3023,  "XML_SCHEMAP_COS_ST_RESTRICTS_3_3_1" : 3024,  "XML_SCHEMAP_COS_ST_RESTRICTS_3_3_1_2" : 3025,  "XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_2" : 3026,  "XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_1" : 3027,  "XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_3" : 3028,  "XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_4" : 3029,  "XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_5" : 3030,  "XML_SCHEMAP_COS_ST_DERIVED_OK_2_1" : 3031,  "XML_SCHEMAP_COS_ST_DERIVED_OK_2_2" : 3032,  "XML_SCHEMAP_S4S_ELEM_NOT_ALLOWED" : 3033,  "XML_SCHEMAP_S4S_ELEM_MISSING" : 3034,  "XML_SCHEMAP_S4S_ATTR_NOT_ALLOWED" : 3035,  "XML_SCHEMAP_S4S_ATTR_MISSING" : 3036,  "XML_SCHEMAP_S4S_ATTR_INVALID_VALUE" : 3037,  "XML_SCHEMAP_SRC_ELEMENT_1" : 3038,  "XML_SCHEMAP_SRC_ELEMENT_2_1" : 3039,  "XML_SCHEMAP_SRC_ELEMENT_2_2" : 3040,  "XML_SCHEMAP_SRC_ELEMENT_3" : 3041,  "XML_SCHEMAP_P_PROPS_CORRECT_1" : 3042,  "XML_SCHEMAP_P_PROPS_CORRECT_2_1" : 3043,  "XML_SCHEMAP_P_PROPS_CORRECT_2_2" : 3044,  "XML_SCHEMAP_E_PROPS_CORRECT_2" : 3045,  "XML_SCHEMAP_E_PROPS_CORRECT_3" : 3046,  "XML_SCHEMAP_E_PROPS_CORRECT_4" : 3047,  "XML_SCHEMAP_E_PROPS_CORRECT_5" : 3048,  "XML_SCHEMAP_E_PROPS_CORRECT_6" : 3049,  "XML_SCHEMAP_SRC_INCLUDE" : 3050,  "XML_SCHEMAP_SRC_ATTRIBUTE_1" : 3051,  "XML_SCHEMAP_SRC_ATTRIBUTE_2" : 3052,  "XML_SCHEMAP_SRC_ATTRIBUTE_3_1" : 3053,  "XML_SCHEMAP_SRC_ATTRIBUTE_3_2" : 3054,  "XML_SCHEMAP_SRC_ATTRIBUTE_4" : 3055,  "XML_SCHEMAP_NO_XMLNS" : 3056,  "XML_SCHEMAP_NO_XSI" : 3057,  "XML_SCHEMAP_COS_VALID_DEFAULT_1" : 3058,  "XML_SCHEMAP_COS_VALID_DEFAULT_2_1" : 3059,  "XML_SCHEMAP_COS_VALID_DEFAULT_2_2_1" : 3060,  "XML_SCHEMAP_COS_VALID_DEFAULT_2_2_2" : 3061,  "XML_SCHEMAP_CVC_SIMPLE_TYPE" : 3062,  "XML_SCHEMAP_COS_CT_EXTENDS_1_1" : 3063,  "XML_SCHEMAP_SRC_IMPORT_1_1" : 3064,  "XML_SCHEMAP_SRC_IMPORT_1_2" : 3065,  "XML_SCHEMAP_SRC_IMPORT_2" : 3066,  "XML_SCHEMAP_SRC_IMPORT_2_1" : 3067,  "XML_SCHEMAP_SRC_IMPORT_2_2" : 3068,  "XML_SCHEMAP_INTERNAL" : 3069,  "XML_SCHEMAP_NOT_DETERMINISTIC" : 3070,  "XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_1" : 3071,  "XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_2" : 3072,  "XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_3" : 3073,  "XML_SCHEMAP_MG_PROPS_CORRECT_1" : 3074,  "XML_SCHEMAP_MG_PROPS_CORRECT_2" : 3075,  "XML_SCHEMAP_SRC_CT_1" : 3076,  "XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_3" : 3077,  "XML_SCHEMAP_AU_PROPS_CORRECT_2" : 3078,  "XML_SCHEMAP_A_PROPS_CORRECT_2" : 3079,  "XML_SCHEMAP_C_PROPS_CORRECT" : 3080,  "XML_SCHEMAP_SRC_REDEFINE" : 3081,  "XML_SCHEMAP_SRC_IMPORT" : 3082,  "XML_SCHEMAP_WARN_SKIP_SCHEMA" : 3083,  "XML_SCHEMAP_WARN_UNLOCATED_SCHEMA" : 3084,  "XML_SCHEMAP_WARN_ATTR_REDECL_PROH" : 3085,  "XML_SCHEMAP_WARN_ATTR_POINTLESS_PROH" : 3086,  "XML_SCHEMAP_AG_PROPS_CORRECT" : 3087,  "XML_SCHEMAP_COS_CT_EXTENDS_1_2" : 3088,  "XML_SCHEMAP_AU_PROPS_CORRECT" : 3089,  "XML_SCHEMAP_A_PROPS_CORRECT_3" : 3090,  "XML_SCHEMAP_COS_ALL_LIMITED" : 3091,  "XML_SCHEMATRONV_ASSERT" : 4000,  "XML_SCHEMATRONV_REPORT" : 4001,  "XML_MODULE_OPEN" : 4900,  "XML_MODULE_CLOSE" : 4901,  "XML_CHECK_FOUND_ELEMENT" : 5000,  "XML_CHECK_FOUND_ATTRIBUTE" : 5001,  "XML_CHECK_FOUND_TEXT" : 5002,  "XML_CHECK_FOUND_CDATA" : 5003,  "XML_CHECK_FOUND_ENTITYREF" : 5004,  "XML_CHECK_FOUND_ENTITY" : 5005,  "XML_CHECK_FOUND_PI" : 5006,  "XML_CHECK_FOUND_COMMENT" : 5007,  "XML_CHECK_FOUND_DOCTYPE" : 5008,  "XML_CHECK_FOUND_FRAGMENT" : 5009,  "XML_CHECK_FOUND_NOTATION" : 5010,  "XML_CHECK_UNKNOWN_NODE" : 5011,  "XML_CHECK_ENTITY_TYPE" : 5012,  "XML_CHECK_NO_PARENT" : 5013,  "XML_CHECK_NO_DOC" : 5014,  "XML_CHECK_NO_NAME" : 5015,  "XML_CHECK_NO_ELEM" : 5016,  "XML_CHECK_WRONG_DOC" : 5017,  "XML_CHECK_NO_PREV" : 5018,  "XML_CHECK_WRONG_PREV" : 5019,  "XML_CHECK_NO_NEXT" : 5020,  "XML_CHECK_WRONG_NEXT" : 5021,  "XML_CHECK_NOT_DTD" : 5022,  "XML_CHECK_NOT_ATTR" : 5023,  "XML_CHECK_NOT_ATTR_DECL" : 5024,  "XML_CHECK_NOT_ELEM_DECL" : 5025,  "XML_CHECK_NOT_ENTITY_DECL" : 5026,  "XML_CHECK_NOT_NS_DECL" : 5027,  "XML_CHECK_NO_HREF" : 5028,  "XML_CHECK_WRONG_PARENT" : 5029,  "XML_CHECK_NS_SCOPE" : 5030,  "XML_CHECK_NS_ANCESTOR" : 5031,  "XML_CHECK_NOT_UTF8" : 5032,  "XML_CHECK_NO_DICT" : 5033,  "XML_CHECK_NOT_NCNAME" : 5034,  "XML_CHECK_OUTSIDE_DICT" : 5035,  "XML_CHECK_WRONG_NAME" : 5036,  "XML_CHECK_NAME_NOT_NULL" : 5037,  "XML_I18N_NO_NAME" : 6000,  "XML_I18N_NO_HANDLER" : 6001,  "XML_I18N_EXCESS_HANDLER" : 6002,  "XML_I18N_CONV_FAILED" : 6003,  "XML_I18N_NO_OUTPUT" : 6004, 
 "XML_CHAR_ENCODING_ERROR" : -1,  "XML_CHAR_ENCODING_NONE" : 0,  "XML_CHAR_ENCODING_UTF8" : 1,  "XML_CHAR_ENCODING_UTF16LE" : 2,  "XML_CHAR_ENCODING_UTF16BE" : 3,  "XML_CHAR_ENCODING_UCS4LE" : 4,  "XML_CHAR_ENCODING_UCS4BE" : 5,  "XML_CHAR_ENCODING_EBCDIC" : 6,  "XML_CHAR_ENCODING_UCS4_2143" : 7,  "XML_CHAR_ENCODING_UCS4_3412" : 8,  "XML_CHAR_ENCODING_UCS2" : 9,  "XML_CHAR_ENCODING_8859_1" : 10,  "XML_CHAR_ENCODING_8859_2" : 11,  "XML_CHAR_ENCODING_8859_3" : 12,  "XML_CHAR_ENCODING_8859_4" : 13,  "XML_CHAR_ENCODING_8859_5" : 14,  "XML_CHAR_ENCODING_8859_6" : 15,  "XML_CHAR_ENCODING_8859_7" : 16,  "XML_CHAR_ENCODING_8859_8" : 17,  "XML_CHAR_ENCODING_8859_9" : 18,  "XML_CHAR_ENCODING_2022_JP" : 19,  "XML_CHAR_ENCODING_SHIFT_JIS" : 20,  "XML_CHAR_ENCODING_EUC_JP" : 21,  "XML_CHAR_ENCODING_ASCII" : 22, 
 "XML_INTERNAL_GENERAL_ENTITY" : 1,  "XML_EXTERNAL_GENERAL_PARSED_ENTITY" : 2,  "XML_EXTERNAL_GENERAL_UNPARSED_ENTITY" : 3,  "XML_INTERNAL_PARAMETER_ENTITY" : 4,  "XML_EXTERNAL_PARAMETER_ENTITY" : 5,  "XML_INTERNAL_PREDEFINED_ENTITY" : 6, 
 "XML_PARSER_EOF" : -1,  "XML_PARSER_START" : 0,  "XML_PARSER_MISC" : 1,  "XML_PARSER_PI" : 2,  "XML_PARSER_DTD" : 3,  "XML_PARSER_PROLOG" : 4,  "XML_PARSER_COMMENT" : 5,  "XML_PARSER_START_TAG" : 6,  "XML_PARSER_CONTENT" : 7,  "XML_PARSER_CDATA_SECTION" : 8,  "XML_PARSER_END_TAG" : 9,  "XML_PARSER_ENTITY_DECL" : 10,  "XML_PARSER_ENTITY_VALUE" : 11,  "XML_PARSER_ATTRIBUTE_VALUE" : 12,  "XML_PARSER_SYSTEM_LITERAL" : 13,  "XML_PARSER_EPILOG" : 14,  "XML_PARSER_IGNORE" : 15,  "XML_PARSER_PUBLIC_LITERAL" : 16, 
 "XML_PARSE_UNKNOWN" : 0,  "XML_PARSE_DOM" : 1,  "XML_PARSE_SAX" : 2,  "XML_PARSE_PUSH_DOM" : 3,  "XML_PARSE_PUSH_SAX" : 4,  "XML_PARSE_READER" : 5, 
 "XML_PARSE_RECOVER" : 1,  "XML_PARSE_NOENT" : 2,  "XML_PARSE_DTDLOAD" : 4,  "XML_PARSE_DTDATTR" : 8,  "XML_PARSE_DTDVALID" : 16,  "XML_PARSE_NOERROR" : 32,  "XML_PARSE_NOWARNING" : 64,  "XML_PARSE_PEDANTIC" : 128,  "XML_PARSE_NOBLANKS" : 256,  "XML_PARSE_SAX1" : 512,  "XML_PARSE_XINCLUDE" : 65536,  "XML_PARSE_NONET" : 131072,  "XML_PARSE_NODICT" : 262144,  "XML_PARSE_NSCLEAN" : 524288,  "XML_PARSE_NOCDATA" : 1048576,  "XML_PARSE_NOXINCNODE" : 2097152,  "XML_PARSE_COMPACT" : 4194304,  "XML_PARSE_OLD10" : 8388608,  "XML_PARSE_NOBASEFIX" : 16777216,  "XML_PARSE_HUGE" : 33554432,  "XML_PARSE_OLDSAX" : 4294967296, 
 "XML_WITH_THREAD" : 1,  "XML_WITH_TREE" : 2,  "XML_WITH_OUTPUT" : 3,  "XML_WITH_PUSH" : 4,  "XML_WITH_READER" : 5,  "XML_WITH_PATTERN" : 6,  "XML_WITH_WRITER" : 7,  "XML_WITH_SAX1" : 8,  "XML_WITH_FTP" : 9,  "XML_WITH_HTTP" : 10,  "XML_WITH_VALID" : 11,  "XML_WITH_HTML" : 12,  "XML_WITH_LEGACY" : 13,  "XML_WITH_C14N" : 14,  "XML_WITH_CATALOG" : 15,  "XML_WITH_XPATH" : 16,  "XML_WITH_XPTR" : 17,  "XML_WITH_XINCLUDE" : 18,  "XML_WITH_ICONV" : 19,  "XML_WITH_ISO8859X" : 20,  "XML_WITH_UNICODE" : 21,  "XML_WITH_REGEXP" : 22,  "XML_WITH_AUTOMATA" : 23,  "XML_WITH_EXPR" : 24,  "XML_WITH_SCHEMAS" : 25,  "XML_WITH_SCHEMATRON" : 26,  "XML_WITH_MODULES" : 27,  "XML_WITH_DEBUG" : 28,  "XML_WITH_DEBUG_MEM" : 29,  "XML_WITH_DEBUG_RUN" : 30,  "XML_WITH_ZLIB" : 31,  "XML_WITH_ICU" : 32,  "XML_WITH_NONE" : 99999, 
 "XLINK_TYPE_NONE" : 0,  "XLINK_TYPE_SIMPLE" : 1,  "XLINK_TYPE_EXTENDED" : 2,  "XLINK_TYPE_EXTENDED_SET" : 3, 
 "XLINK_SHOW_NONE" : 0,  "XLINK_SHOW_NEW" : 1,  "XLINK_SHOW_EMBED" : 2,  "XLINK_SHOW_REPLACE" : 3, 
 "XLINK_ACTUATE_NONE" : 0,  "XLINK_ACTUATE_AUTO" : 1,  "XLINK_ACTUATE_ONREQUEST" : 2, 
 "REQUEST_LINK_INFO" : 0,  "REQUEST_DEEP_COUNT" : 1,  "REQUEST_DIRECTORY_COUNT" : 2,  "REQUEST_FILE_INFO" : 3,  "REQUEST_FILE_LIST" : 4,  "REQUEST_MIME_LIST" : 5,  "REQUEST_TOP_LEFT_TEXT" : 6,  "REQUEST_LARGE_TOP_LEFT_TEXT" : 7,  "REQUEST_EXTENSION_INFO" : 8,  "REQUEST_THUMBNAIL" : 9,  "REQUEST_MOUNT" : 10,  "REQUEST_FILESYSTEM_INFO" : 11,  "REQUEST_TYPE_LAST" : 12, 
 "NAUTILUS_ICON_DND_GNOME_ICON_LIST" : 0,  "NAUTILUS_ICON_DND_URI_LIST" : 1,  "NAUTILUS_ICON_DND_NETSCAPE_URL" : 2,  "NAUTILUS_ICON_DND_TEXT" : 3,  "NAUTILUS_ICON_DND_XDNDDIRECTSAVE" : 4,  "NAUTILUS_ICON_DND_RAW" : 5,  "NAUTILUS_ICON_DND_ROOTWINDOW_DROP" : 6, 
 "NAUTILUS_DND_ACTION_FIRST" : 64,  "NAUTILUS_DND_ACTION_SET_AS_BACKGROUND" : 64,  "NAUTILUS_DND_ACTION_SET_AS_FOLDER_BACKGROUND" : 128,  "NAUTILUS_DND_ACTION_SET_AS_GLOBAL_BACKGROUND" : 256, 
 "CONFLICT_RESPONSE_SKIP" : 1,  "CONFLICT_RESPONSE_REPLACE" : 2,  "CONFLICT_RESPONSE_RENAME" : 3, 
 "NAUTILUS_FILE_UNDO_OP_COPY" : 0,  "NAUTILUS_FILE_UNDO_OP_DUPLICATE" : 1,  "NAUTILUS_FILE_UNDO_OP_MOVE" : 2,  "NAUTILUS_FILE_UNDO_OP_RENAME" : 3,  "NAUTILUS_FILE_UNDO_OP_CREATE_EMPTY_FILE" : 4,  "NAUTILUS_FILE_UNDO_OP_CREATE_FILE_FROM_TEMPLATE" : 5,  "NAUTILUS_FILE_UNDO_OP_CREATE_FOLDER" : 6,  "NAUTILUS_FILE_UNDO_OP_MOVE_TO_TRASH" : 7,  "NAUTILUS_FILE_UNDO_OP_RESTORE_FROM_TRASH" : 8,  "NAUTILUS_FILE_UNDO_OP_CREATE_LINK" : 9,  "NAUTILUS_FILE_UNDO_OP_RECURSIVE_SET_PERMISSIONS" : 10,  "NAUTILUS_FILE_UNDO_OP_SET_PERMISSIONS" : 11,  "NAUTILUS_FILE_UNDO_OP_CHANGE_GROUP" : 12,  "NAUTILUS_FILE_UNDO_OP_CHANGE_OWNER" : 13,  "NAUTILUS_FILE_UNDO_OP_NUM_TYPES" : 14, 
 "KNOWN" : 0,  "UNKNOWABLE" : 1,  "UNKNOWN" : 2, 
 "NAUTILUS_FILE_UNDO_MANAGER_STATE_NONE" : 0,  "NAUTILUS_FILE_UNDO_MANAGER_STATE_UNDO" : 1,  "NAUTILUS_FILE_UNDO_MANAGER_STATE_REDO" : 2, 
 "NAUTILUS_DATE_FORMAT_LOCALE" : 0,  "NAUTILUS_DATE_FORMAT_ISO" : 1,  "NAUTILUS_DATE_FORMAT_INFORMAL" : 2, 
 "NAUTILUS_NEW_TAB_POSITION_AFTER_CURRENT_TAB" : 0,  "NAUTILUS_NEW_TAB_POSITION_END" : 1, 
 "NAUTILUS_DEFAULT_FOLDER_VIEWER_ICON_VIEW" : 0,  "NAUTILUS_DEFAULT_FOLDER_VIEWER_LIST_VIEW" : 1,  "NAUTILUS_DEFAULT_FOLDER_VIEWER_OTHER" : 2, 
 "NAUTILUS_CLICK_POLICY_SINGLE" : 0,  "NAUTILUS_CLICK_POLICY_DOUBLE" : 1, 
 "NAUTILUS_EXECUTABLE_TEXT_LAUNCH" : 0,  "NAUTILUS_EXECUTABLE_TEXT_DISPLAY" : 1,  "NAUTILUS_EXECUTABLE_TEXT_ASK" : 2, 
 "NAUTILUS_SPEED_TRADEOFF_ALWAYS" : 0,  "NAUTILUS_SPEED_TRADEOFF_LOCAL_ONLY" : 1,  "NAUTILUS_SPEED_TRADEOFF_NEVER" : 2, 
 "NAUTILUS_COMPLEX_SEARCH_BAR" : 0,  "NAUTILUS_SIMPLE_SEARCH_BAR" : 1, 
 "BOUNDS_USAGE_FOR_LAYOUT" : 0,  "BOUNDS_USAGE_FOR_ENTIRE_ITEM" : 1,  "BOUNDS_USAGE_FOR_DISPLAY" : 2, 
 "DRAG_STATE_INITIAL" : 0,  "DRAG_STATE_MOVE_OR_COPY" : 1,  "DRAG_STATE_STRETCH" : 2, 
 "AXIS_NONE" : 0,  "AXIS_HORIZONTAL" : 1,  "AXIS_VERTICAL" : 2, 
 "LABEL_COLOR" : 0,  "LABEL_COLOR_HIGHLIGHT" : 1,  "LABEL_COLOR_ACTIVE" : 2,  "LABEL_COLOR_PRELIGHT" : 3,  "LABEL_INFO_COLOR" : 4,  "LABEL_INFO_COLOR_HIGHLIGHT" : 5,  "LABEL_INFO_COLOR_ACTIVE" : 6,  "LAST_LABEL_COLOR" : 7, 
 "NAUTILUS_LIST_MODEL_FILE_COLUMN" : 0,  "NAUTILUS_LIST_MODEL_SUBDIRECTORY_COLUMN" : 1,  "NAUTILUS_LIST_MODEL_SMALLEST_ICON_COLUMN" : 2,  "NAUTILUS_LIST_MODEL_SMALLER_ICON_COLUMN" : 3,  "NAUTILUS_LIST_MODEL_SMALL_ICON_COLUMN" : 4,  "NAUTILUS_LIST_MODEL_STANDARD_ICON_COLUMN" : 5,  "NAUTILUS_LIST_MODEL_LARGE_ICON_COLUMN" : 6,  "NAUTILUS_LIST_MODEL_LARGER_ICON_COLUMN" : 7,  "NAUTILUS_LIST_MODEL_LARGEST_ICON_COLUMN" : 8,  "NAUTILUS_LIST_MODEL_FILE_NAME_IS_EDITABLE_COLUMN" : 9,  "NAUTILUS_LIST_MODEL_NUM_COLUMNS" : 10, 
 "NAUTILUS_LOCATION_ENTRY_ACTION_GOTO" : 0,  "NAUTILUS_LOCATION_ENTRY_ACTION_CLEAR" : 1, 
 "NAUTILUS_NAVIGATION_DIRECTION_BACK" : 0,  "NAUTILUS_NAVIGATION_DIRECTION_FORWARD" : 1, 
 "NAUTILUS_TOOLBAR_MODE_PATH_BAR" : 0,  "NAUTILUS_TOOLBAR_MODE_LOCATION_BAR" : 1, 

}
class _GStaticMutex(_rpythonic_struct_): pass
class _GMutex(_rpythonic_struct_): pass
class static_mutex(ctypes.Union): pass
class _GSystemThread(ctypes.Union): pass
class __fsid_t(_rpythonic_struct_): _array_wrapper_ = True
class timespec(_rpythonic_struct_): pass
class tm(_rpythonic_struct_): pass
class itimerspec(_rpythonic_struct_): pass
class __locale_struct(_rpythonic_struct_): _array_wrapper_ = True
class __locale_data(_rpythonic_struct_): pass
class _GFloatIEEE754(ctypes.Union): pass
class _GDoubleIEEE754(ctypes.Union): pass
class mpn(_rpythonic_struct_): pass
class _GTimeVal(_rpythonic_struct_): pass
class _GArray(_rpythonic_struct_): pass
class _GByteArray(_rpythonic_struct_): pass
class _GPtrArray(_rpythonic_struct_): pass
class _GError(_rpythonic_struct_): pass
class _GDebugKey(_rpythonic_struct_): pass
class _GTrashStack(_rpythonic_struct_): pass
class _GThread(_rpythonic_struct_): pass
class _GCond(_rpythonic_struct_): pass
class _GPrivate(_rpythonic_struct_): pass
class _GThreadFunctions(_rpythonic_struct_): pass
class _GStaticPrivate(_rpythonic_struct_): pass
class _GStaticRecMutex(_rpythonic_struct_): pass
class _GStaticRWLock(_rpythonic_struct_): pass
class _GOnce(_rpythonic_struct_): pass
class _GAsyncQueue(_rpythonic_struct_): pass
class __sigset_t(_rpythonic_struct_): _array_wrapper_ = True
class sigval(ctypes.Union): pass
class siginfo(_rpythonic_struct_): pass
class _sifields(ctypes.Union): pass
class _kill(_rpythonic_struct_): pass
class _timer(_rpythonic_struct_): pass
class _rt(_rpythonic_struct_): pass
class _sigchld(_rpythonic_struct_): pass
class _sigfault(_rpythonic_struct_): pass
class _sigpoll(_rpythonic_struct_): pass
class sigevent(_rpythonic_struct_): pass
class _sigev_un(ctypes.Union): pass
class _sigev_thread(_rpythonic_struct_): pass
class sigaction(_rpythonic_struct_): pass
class __sigaction_handler(ctypes.Union): pass
class sigvec(_rpythonic_struct_): pass
class __kernel_fd_set(_rpythonic_struct_): _array_wrapper_ = True
class __kernel_fsid_t(_rpythonic_struct_): _array_wrapper_ = True
class _fpx_sw_bytes(_rpythonic_struct_): _array_wrapper_ = True
class _fpreg(_rpythonic_struct_): _array_wrapper_ = True
class _fpxreg(_rpythonic_struct_): _array_wrapper_ = True
class _xmmreg(_rpythonic_struct_): _array_wrapper_ = True
class _fpstate(_rpythonic_struct_): _array_wrapper_ = True
class sigcontext(_rpythonic_struct_): pass
class _xsave_hdr(_rpythonic_struct_): _array_wrapper_ = True
class _ymmh_state(_rpythonic_struct_): _array_wrapper_ = True
class _xstate(_rpythonic_struct_): pass
class sigstack(_rpythonic_struct_): pass
class sigaltstack(_rpythonic_struct_): pass
class _libc_fpreg(_rpythonic_struct_): _array_wrapper_ = True
class _libc_fpstate(_rpythonic_struct_): _array_wrapper_ = True
class mcontext_t(_rpythonic_struct_): pass
class ucontext(_rpythonic_struct_): pass
class pthread_attr_t(ctypes.Union): pass
class __pthread_internal_slist(_rpythonic_struct_): pass
class pthread_mutex_t(ctypes.Union): pass
class __pthread_mutex_s(_rpythonic_struct_): pass
class pthread_mutexattr_t(ctypes.Union): pass
class pthread_cond_t(ctypes.Union): pass
class pthread_condattr_t(ctypes.Union): pass
class pthread_rwlock_t(ctypes.Union): pass
class __data(_rpythonic_struct_): pass
class pthread_rwlockattr_t(ctypes.Union): pass
class pthread_barrier_t(ctypes.Union): pass
class pthread_barrierattr_t(ctypes.Union): pass
class _GBookmarkFile(_rpythonic_struct_): pass
class _GMemVTable(_rpythonic_struct_): pass
class _GAllocator(_rpythonic_struct_): pass
class _GMemChunk(_rpythonic_struct_): pass
class _GList(_rpythonic_struct_): pass
class _GCache(_rpythonic_struct_): pass
class _GChecksum(_rpythonic_struct_): pass
class _GCompletion(_rpythonic_struct_): pass
class _GIConv(_rpythonic_struct_): pass
class _GData(_rpythonic_struct_): pass
class _GDate(_rpythonic_struct_): pass
class _GTimeZone(_rpythonic_struct_): pass
class _GDateTime(_rpythonic_struct_): pass
class _GDir(_rpythonic_struct_): pass
class _GHashTable(_rpythonic_struct_): pass
class _GHashTableIter(_rpythonic_struct_): pass
class _GHmac(_rpythonic_struct_): pass
class _GHookList(_rpythonic_struct_): _array_wrapper_ = True
class _GHook(_rpythonic_struct_): pass
class _GPollFD(_rpythonic_struct_): pass
class _GSList(_rpythonic_struct_): pass
class _GMainContext(_rpythonic_struct_): pass
class _GMainLoop(_rpythonic_struct_): pass
class _GSourcePrivate(_rpythonic_struct_): pass
class _GSource(_rpythonic_struct_): pass
class _GSourceCallbackFuncs(_rpythonic_struct_): pass
class _GSourceFuncs(_rpythonic_struct_): pass
class _GStringChunk(_rpythonic_struct_): pass
class _GString(_rpythonic_struct_): pass
class _GIOChannel(_rpythonic_struct_): _array_wrapper_ = True
class _GIOFuncs(_rpythonic_struct_): pass
class _GKeyFile(_rpythonic_struct_): pass
class _GMappedFile(_rpythonic_struct_): pass
class _GMarkupParseContext(_rpythonic_struct_): pass
class _GMarkupParser(_rpythonic_struct_): pass
class _GNode(_rpythonic_struct_): pass
class _GOptionContext(_rpythonic_struct_): pass
class _GOptionGroup(_rpythonic_struct_): pass
class _GOptionEntry(_rpythonic_struct_): pass
class _GPatternSpec(_rpythonic_struct_): pass
class _GQueue(_rpythonic_struct_): pass
class _GRand(_rpythonic_struct_): pass
class _GRelation(_rpythonic_struct_): pass
class _GTuples(_rpythonic_struct_): pass
class _GRegex(_rpythonic_struct_): pass
class _GMatchInfo(_rpythonic_struct_): pass
class _GTokenValue(ctypes.Union): pass
class _GScannerConfig(_rpythonic_struct_): pass
class _GScanner(_rpythonic_struct_): pass
class _GSequence(_rpythonic_struct_): pass
class _GSequenceNode(_rpythonic_struct_): pass
class GTestCase(_rpythonic_struct_): pass
class GTestSuite(_rpythonic_struct_): pass
class GTestConfig(_rpythonic_struct_): pass
class GTestLogMsg(_rpythonic_struct_): pass
class GTestLogBuffer(_rpythonic_struct_): pass
class _GThreadPool(_rpythonic_struct_): pass
class _GTimer(_rpythonic_struct_): pass
class _GTree(_rpythonic_struct_): pass
class _GVariantType(_rpythonic_struct_): pass
class _GVariant(_rpythonic_struct_): pass
class _GVariantIter(_rpythonic_struct_): _array_wrapper_ = True
class _GVariantBuilder(_rpythonic_struct_): _array_wrapper_ = True
class _GTypeCValue(ctypes.Union): pass
class _GTypePlugin(_rpythonic_struct_): pass
class _GTypeClass(_rpythonic_struct_): pass
class _GTypeInstance(_rpythonic_struct_): pass
class _GTypeInterface(_rpythonic_struct_): pass
class _GTypeQuery(_rpythonic_struct_): pass
class _GTypeInfo(_rpythonic_struct_): pass
class _GTypeFundamentalInfo(_rpythonic_struct_): pass
class _GInterfaceInfo(_rpythonic_struct_): pass
class _GTypeValueTable(_rpythonic_struct_): pass
class _GValue(_rpythonic_struct_): _array_wrapper_ = True
class data(ctypes.Union): pass
class _GParamSpecPool(_rpythonic_struct_): pass
class _GParamSpec(_rpythonic_struct_): pass
class _GParamSpecClass(_rpythonic_struct_): _array_wrapper_ = True
class _GParameter(_rpythonic_struct_): pass
class _GParamSpecTypeInfo(_rpythonic_struct_): pass
class _GClosureNotifyData(_rpythonic_struct_): pass
class _GClosure(_rpythonic_struct_): pass
class _GCClosure(_rpythonic_struct_): pass
class _GSignalInvocationHint(_rpythonic_struct_): pass
class _GSignalQuery(_rpythonic_struct_): pass
class _GObject(_rpythonic_struct_): pass
class _GObjectClass(_rpythonic_struct_): _array_wrapper_ = True
class _GObjectConstructParam(_rpythonic_struct_): pass
class _GBinding(_rpythonic_struct_): pass
class _GEnumClass(_rpythonic_struct_): pass
class _GFlagsClass(_rpythonic_struct_): pass
class _GEnumValue(_rpythonic_struct_): pass
class _GFlagsValue(_rpythonic_struct_): pass
class _GParamSpecChar(_rpythonic_struct_): pass
class _GParamSpecUChar(_rpythonic_struct_): pass
class _GParamSpecBoolean(_rpythonic_struct_): pass
class _GParamSpecInt(_rpythonic_struct_): pass
class _GParamSpecUInt(_rpythonic_struct_): pass
class _GParamSpecLong(_rpythonic_struct_): pass
class _GParamSpecULong(_rpythonic_struct_): pass
class _GParamSpecInt64(_rpythonic_struct_): pass
class _GParamSpecUInt64(_rpythonic_struct_): pass
class _GParamSpecUnichar(_rpythonic_struct_): pass
class _GParamSpecEnum(_rpythonic_struct_): pass
class _GParamSpecFlags(_rpythonic_struct_): pass
class _GParamSpecFloat(_rpythonic_struct_): pass
class _GParamSpecDouble(_rpythonic_struct_): pass
class _GParamSpecString(_rpythonic_struct_): pass
class _GParamSpecParam(_rpythonic_struct_): pass
class _GParamSpecBoxed(_rpythonic_struct_): pass
class _GParamSpecPointer(_rpythonic_struct_): pass
class _GParamSpecValueArray(_rpythonic_struct_): pass
class _GParamSpecObject(_rpythonic_struct_): pass
class _GParamSpecOverride(_rpythonic_struct_): pass
class _GParamSpecGType(_rpythonic_struct_): pass
class _GParamSpecVariant(_rpythonic_struct_): _array_wrapper_ = True
class _GTypeModule(_rpythonic_struct_): pass
class _GTypeModuleClass(_rpythonic_struct_): pass
class _GTypePluginClass(_rpythonic_struct_): pass
class _GValueArray(_rpythonic_struct_): pass
class _GAppInfo(_rpythonic_struct_): pass
class _GAsyncResult(_rpythonic_struct_): pass
class _GAsyncInitable(_rpythonic_struct_): pass
class _GCharsetConverter(_rpythonic_struct_): pass
class _GConverter(_rpythonic_struct_): pass
class _GSimplePermission(_rpythonic_struct_): pass
class _GZlibCompressor(_rpythonic_struct_): pass
class _GZlibDecompressor(_rpythonic_struct_): pass
class _GActionGroup(_rpythonic_struct_): pass
class _GSimpleAction(_rpythonic_struct_): pass
class _GAction(_rpythonic_struct_): pass
class _GSettingsBackend(_rpythonic_struct_): pass
class _GDrive(_rpythonic_struct_): pass
class _GFile(_rpythonic_struct_): pass
class _GFileInfo(_rpythonic_struct_): pass
class _GFileAttributeMatcher(_rpythonic_struct_): pass
class _GFileDescriptorBased(_rpythonic_struct_): pass
class _GFileIcon(_rpythonic_struct_): pass
class _GFilenameCompleter(_rpythonic_struct_): pass
class _GIcon(_rpythonic_struct_): pass
class _GInitable(_rpythonic_struct_): pass
class _GIOModule(_rpythonic_struct_): pass
class _GIOExtensionPoint(_rpythonic_struct_): pass
class _GIOExtension(_rpythonic_struct_): pass
class _GIOSchedulerJob(_rpythonic_struct_): pass
class _GIOStreamAdapter(_rpythonic_struct_): pass
class _GLoadableIcon(_rpythonic_struct_): pass
class _GMount(_rpythonic_struct_): pass
class _GPollableInputStream(_rpythonic_struct_): pass
class _GPollableOutputStream(_rpythonic_struct_): pass
class _GSeekable(_rpythonic_struct_): pass
class _GSimpleAsyncResult(_rpythonic_struct_): pass
class _GSocketConnectable(_rpythonic_struct_): pass
class _GSrvTarget(_rpythonic_struct_): pass
class _GThemedIcon(_rpythonic_struct_): pass
class _GTlsClientConnection(_rpythonic_struct_): pass
class _GTlsFileDatabase(_rpythonic_struct_): pass
class _GTlsServerConnection(_rpythonic_struct_): pass
class _GProxyResolver(_rpythonic_struct_): pass
class _GProxy(_rpythonic_struct_): pass
class _GVolume(_rpythonic_struct_): pass
class _GInputVector(_rpythonic_struct_): pass
class _GOutputVector(_rpythonic_struct_): pass
class _GCredentials(_rpythonic_struct_): pass
class _GUnixCredentialsMessage(_rpythonic_struct_): pass
class _GUnixFDList(_rpythonic_struct_): pass
class _GDBusMessage(_rpythonic_struct_): pass
class _GDBusConnection(_rpythonic_struct_): pass
class _GDBusMethodInvocation(_rpythonic_struct_): pass
class _GDBusServer(_rpythonic_struct_): pass
class _GDBusAuthObserver(_rpythonic_struct_): pass
class _GDBusInterface(_rpythonic_struct_): pass
class _GDBusObject(_rpythonic_struct_): pass
class _GDBusObjectManager(_rpythonic_struct_): pass
class _GAppLaunchContextPrivate(_rpythonic_struct_): pass
class _GAppInfoIface(_rpythonic_struct_): pass
class _GAppLaunchContext(_rpythonic_struct_): pass
class _GAppLaunchContextClass(_rpythonic_struct_): pass
class _GActionInterface(_rpythonic_struct_): pass
class _GActionGroupInterface(_rpythonic_struct_): pass
class _GSimpleActionGroupPrivate(_rpythonic_struct_): pass
class _GSimpleActionGroup(_rpythonic_struct_): pass
class _GSimpleActionGroupClass(_rpythonic_struct_): _array_wrapper_ = True
class _GActionEntry(_rpythonic_struct_): _array_wrapper_ = True
class _GApplicationPrivate(_rpythonic_struct_): pass
class _GApplication(_rpythonic_struct_): pass
class _GApplicationClass(_rpythonic_struct_): _array_wrapper_ = True
class _GApplicationCommandLinePrivate(_rpythonic_struct_): pass
class _GApplicationCommandLine(_rpythonic_struct_): pass
class _GApplicationCommandLineClass(_rpythonic_struct_): _array_wrapper_ = True
class _GInitableIface(_rpythonic_struct_): pass
class _GAsyncInitableIface(_rpythonic_struct_): pass
class _GAsyncResultIface(_rpythonic_struct_): pass
class _GInputStreamPrivate(_rpythonic_struct_): pass
class _GInputStream(_rpythonic_struct_): pass
class _GInputStreamClass(_rpythonic_struct_): pass
class _GFilterInputStream(_rpythonic_struct_): pass
class _GFilterInputStreamClass(_rpythonic_struct_): pass
class _GBufferedInputStreamPrivate(_rpythonic_struct_): pass
class _GBufferedInputStream(_rpythonic_struct_): pass
class _GBufferedInputStreamClass(_rpythonic_struct_): pass
class _GOutputStreamPrivate(_rpythonic_struct_): pass
class _GOutputStream(_rpythonic_struct_): pass
class _GOutputStreamClass(_rpythonic_struct_): pass
class _GFilterOutputStream(_rpythonic_struct_): pass
class _GFilterOutputStreamClass(_rpythonic_struct_): pass
class _GBufferedOutputStreamPrivate(_rpythonic_struct_): pass
class _GBufferedOutputStream(_rpythonic_struct_): pass
class _GBufferedOutputStreamClass(_rpythonic_struct_): pass
class _GCancellablePrivate(_rpythonic_struct_): pass
class _GCancellable(_rpythonic_struct_): pass
class _GCancellableClass(_rpythonic_struct_): pass
class _GConverterIface(_rpythonic_struct_): pass
class _GCharsetConverterClass(_rpythonic_struct_): pass
class _GConverterInputStreamPrivate(_rpythonic_struct_): pass
class _GConverterInputStream(_rpythonic_struct_): pass
class _GConverterInputStreamClass(_rpythonic_struct_): pass
class _GConverterOutputStreamPrivate(_rpythonic_struct_): pass
class _GConverterOutputStream(_rpythonic_struct_): pass
class _GConverterOutputStreamClass(_rpythonic_struct_): pass
class timeval(_rpythonic_struct_): pass
class fd_set(_rpythonic_struct_): _array_wrapper_ = True
class _GCredentialsClass(_rpythonic_struct_): pass
class _GDataInputStreamPrivate(_rpythonic_struct_): pass
class _GDataInputStream(_rpythonic_struct_): pass
class _GDataInputStreamClass(_rpythonic_struct_): pass
class _GDataOutputStreamPrivate(_rpythonic_struct_): pass
class _GDataOutputStream(_rpythonic_struct_): pass
class _GDataOutputStreamClass(_rpythonic_struct_): pass
class _GDBusInterfaceVTable(_rpythonic_struct_): _array_wrapper_ = True
class _GDBusSubtreeVTable(_rpythonic_struct_): _array_wrapper_ = True
class _GDBusErrorEntry(_rpythonic_struct_): pass
class _GDBusAnnotationInfo(_rpythonic_struct_): pass
class _GDBusArgInfo(_rpythonic_struct_): pass
class _GDBusMethodInfo(_rpythonic_struct_): pass
class _GDBusSignalInfo(_rpythonic_struct_): pass
class _GDBusPropertyInfo(_rpythonic_struct_): pass
class _GDBusInterfaceInfo(_rpythonic_struct_): pass
class _GDBusNodeInfo(_rpythonic_struct_): pass
class _GDBusProxyPrivate(_rpythonic_struct_): pass
class _GDBusProxy(_rpythonic_struct_): pass
class _GDBusProxyClass(_rpythonic_struct_): _array_wrapper_ = True
class _GDriveIface(_rpythonic_struct_): pass
class _GIconIface(_rpythonic_struct_): pass
class _GEmblem(_rpythonic_struct_): pass
class _GEmblemClass(_rpythonic_struct_): pass
class _GEmblemedIconPrivate(_rpythonic_struct_): pass
class _GEmblemedIcon(_rpythonic_struct_): pass
class _GEmblemedIconClass(_rpythonic_struct_): pass
class _GFileAttributeInfo(_rpythonic_struct_): pass
class _GFileAttributeInfoList(_rpythonic_struct_): pass
class _GFileEnumeratorPrivate(_rpythonic_struct_): pass
class _GFileEnumerator(_rpythonic_struct_): pass
class _GFileEnumeratorClass(_rpythonic_struct_): pass
class _GFileIface(_rpythonic_struct_): pass
class _GFileIconClass(_rpythonic_struct_): pass
class _GFileInfoClass(_rpythonic_struct_): pass
class _GFileInputStreamPrivate(_rpythonic_struct_): pass
class _GFileInputStream(_rpythonic_struct_): pass
class _GFileInputStreamClass(_rpythonic_struct_): pass
class _GIOStreamPrivate(_rpythonic_struct_): pass
class _GIOStream(_rpythonic_struct_): pass
class _GIOStreamClass(_rpythonic_struct_): pass
class _GFileIOStreamPrivate(_rpythonic_struct_): pass
class _GFileIOStream(_rpythonic_struct_): pass
class _GFileIOStreamClass(_rpythonic_struct_): pass
class _GFileMonitorPrivate(_rpythonic_struct_): pass
class _GFileMonitor(_rpythonic_struct_): pass
class _GFileMonitorClass(_rpythonic_struct_): pass
class _GFilenameCompleterClass(_rpythonic_struct_): pass
class _GFileOutputStreamPrivate(_rpythonic_struct_): pass
class _GFileOutputStream(_rpythonic_struct_): pass
class _GFileOutputStreamClass(_rpythonic_struct_): pass
class _GInetAddressPrivate(_rpythonic_struct_): pass
class _GInetAddress(_rpythonic_struct_): pass
class _GInetAddressClass(_rpythonic_struct_): pass
class _GSocketAddress(_rpythonic_struct_): pass
class _GSocketAddressClass(_rpythonic_struct_): pass
class _GInetSocketAddressPrivate(_rpythonic_struct_): pass
class _GInetSocketAddress(_rpythonic_struct_): pass
class _GInetSocketAddressClass(_rpythonic_struct_): pass
class _GModule(_rpythonic_struct_): pass
class _GIOModuleScope(_rpythonic_struct_): pass
class _GIOModuleClass(_rpythonic_struct_): pass
class _GLoadableIconIface(_rpythonic_struct_): pass
class _GMemoryInputStreamPrivate(_rpythonic_struct_): pass
class _GMemoryInputStream(_rpythonic_struct_): pass
class _GMemoryInputStreamClass(_rpythonic_struct_): pass
class _GMemoryOutputStreamPrivate(_rpythonic_struct_): pass
class _GMemoryOutputStream(_rpythonic_struct_): pass
class _GMemoryOutputStreamClass(_rpythonic_struct_): pass
class _GMountIface(_rpythonic_struct_): pass
class _GMountOperationPrivate(_rpythonic_struct_): pass
class _GMountOperation(_rpythonic_struct_): pass
class _GMountOperationClass(_rpythonic_struct_): pass
class _GVolumeMonitor(_rpythonic_struct_): pass
class _GVolumeMonitorClass(_rpythonic_struct_): pass
class _GNativeVolumeMonitor(_rpythonic_struct_): pass
class _GNativeVolumeMonitorClass(_rpythonic_struct_): pass
class _GNetworkAddressPrivate(_rpythonic_struct_): pass
class _GNetworkAddress(_rpythonic_struct_): pass
class _GNetworkAddressClass(_rpythonic_struct_): pass
class _GNetworkServicePrivate(_rpythonic_struct_): pass
class _GNetworkService(_rpythonic_struct_): pass
class _GNetworkServiceClass(_rpythonic_struct_): pass
class _GPermissionPrivate(_rpythonic_struct_): pass
class _GPermission(_rpythonic_struct_): pass
class _GPermissionClass(_rpythonic_struct_): _array_wrapper_ = True
class _GPollableInputStreamInterface(_rpythonic_struct_): pass
class _GPollableOutputStreamInterface(_rpythonic_struct_): pass
class _GProxyInterface(_rpythonic_struct_): pass
class _GProxyAddressPrivate(_rpythonic_struct_): pass
class _GProxyAddress(_rpythonic_struct_): pass
class _GProxyAddressClass(_rpythonic_struct_): pass
class _GSocketAddressEnumerator(_rpythonic_struct_): pass
class _GSocketAddressEnumeratorClass(_rpythonic_struct_): pass
class _GProxyAddressEnumeratorPrivate(_rpythonic_struct_): pass
class _GProxyAddressEnumerator(_rpythonic_struct_): pass
class _GProxyAddressEnumeratorClass(_rpythonic_struct_): pass
class _GProxyResolverInterface(_rpythonic_struct_): pass
class _GResolverPrivate(_rpythonic_struct_): pass
class _GResolver(_rpythonic_struct_): pass
class _GResolverClass(_rpythonic_struct_): pass
class _GSeekableIface(_rpythonic_struct_): pass
class _GSettingsPrivate(_rpythonic_struct_): pass
class _GSettingsClass(_rpythonic_struct_): _array_wrapper_ = True
class _GSettings(_rpythonic_struct_): pass
class _GSimpleAsyncResultClass(_rpythonic_struct_): pass
class _GSocketClientPrivate(_rpythonic_struct_): pass
class _GSocketClientClass(_rpythonic_struct_): pass
class _GSocketClient(_rpythonic_struct_): pass
class _GSocketConnectableIface(_rpythonic_struct_): pass
class _GSocketPrivate(_rpythonic_struct_): pass
class _GSocketClass(_rpythonic_struct_): pass
class _GSocket(_rpythonic_struct_): pass
class _GSocketConnectionPrivate(_rpythonic_struct_): pass
class _GSocketConnectionClass(_rpythonic_struct_): pass
class _GSocketConnection(_rpythonic_struct_): pass
class _GSocketControlMessagePrivate(_rpythonic_struct_): pass
class _GSocketControlMessageClass(_rpythonic_struct_): pass
class _GSocketControlMessage(_rpythonic_struct_): pass
class _GSocketListenerPrivate(_rpythonic_struct_): pass
class _GSocketListenerClass(_rpythonic_struct_): pass
class _GSocketListener(_rpythonic_struct_): pass
class _GSocketServicePrivate(_rpythonic_struct_): pass
class _GSocketServiceClass(_rpythonic_struct_): pass
class _GSocketService(_rpythonic_struct_): pass
class _GTcpConnectionPrivate(_rpythonic_struct_): pass
class _GTcpConnectionClass(_rpythonic_struct_): pass
class _GTcpConnection(_rpythonic_struct_): pass
class _GTcpWrapperConnectionPrivate(_rpythonic_struct_): pass
class _GTcpWrapperConnectionClass(_rpythonic_struct_): pass
class _GTcpWrapperConnection(_rpythonic_struct_): pass
class _GThemedIconClass(_rpythonic_struct_): pass
class _GThreadedSocketServicePrivate(_rpythonic_struct_): pass
class _GThreadedSocketServiceClass(_rpythonic_struct_): pass
class _GThreadedSocketService(_rpythonic_struct_): pass
class _GTlsBackend(_rpythonic_struct_): pass
class _GTlsBackendInterface(_rpythonic_struct_): pass
class _GTlsCertificatePrivate(_rpythonic_struct_): pass
class _GTlsCertificate(_rpythonic_struct_): pass
class _GTlsCertificateClass(_rpythonic_struct_): _array_wrapper_ = True
class _GTlsConnectionPrivate(_rpythonic_struct_): pass
class _GTlsConnection(_rpythonic_struct_): pass
class _GTlsConnectionClass(_rpythonic_struct_): _array_wrapper_ = True
class _GTlsClientConnectionInterface(_rpythonic_struct_): pass
class _GTlsDatabasePrivate(_rpythonic_struct_): pass
class _GTlsDatabase(_rpythonic_struct_): pass
class _GTlsDatabaseClass(_rpythonic_struct_): _array_wrapper_ = True
class _GTlsFileDatabaseInterface(_rpythonic_struct_): _array_wrapper_ = True
class _GTlsInteractionPrivate(_rpythonic_struct_): pass
class _GTlsInteraction(_rpythonic_struct_): pass
class _GTlsInteractionClass(_rpythonic_struct_): _array_wrapper_ = True
class _GTlsServerConnectionInterface(_rpythonic_struct_): pass
class _GTlsPasswordPrivate(_rpythonic_struct_): pass
class _GTlsPassword(_rpythonic_struct_): pass
class _GTlsPasswordClass(_rpythonic_struct_): _array_wrapper_ = True
class _GVfs(_rpythonic_struct_): pass
class _GVfsClass(_rpythonic_struct_): pass
class _GVolumeIface(_rpythonic_struct_): pass
class _GZlibCompressorClass(_rpythonic_struct_): pass
class _GZlibDecompressorClass(_rpythonic_struct_): pass
class _GDBusInterfaceIface(_rpythonic_struct_): pass
class _GDBusInterfaceSkeletonPrivate(_rpythonic_struct_): pass
class _GDBusInterfaceSkeleton(_rpythonic_struct_): pass
class _GDBusInterfaceSkeletonClass(_rpythonic_struct_): _array_wrapper_ = True
class _GDBusObjectIface(_rpythonic_struct_): pass
class _GDBusObjectSkeletonPrivate(_rpythonic_struct_): pass
class _GDBusObjectSkeleton(_rpythonic_struct_): pass
class _GDBusObjectSkeletonClass(_rpythonic_struct_): _array_wrapper_ = True
class _GDBusObjectProxyPrivate(_rpythonic_struct_): pass
class _GDBusObjectProxy(_rpythonic_struct_): pass
class _GDBusObjectProxyClass(_rpythonic_struct_): _array_wrapper_ = True
class _GDBusObjectManagerIface(_rpythonic_struct_): pass
class _GDBusObjectManagerClientPrivate(_rpythonic_struct_): pass
class _GDBusObjectManagerClient(_rpythonic_struct_): pass
class _GDBusObjectManagerClientClass(_rpythonic_struct_): _array_wrapper_ = True
class _GDBusObjectManagerServerPrivate(_rpythonic_struct_): pass
class _GDBusObjectManagerServer(_rpythonic_struct_): pass
class _GDBusObjectManagerServerClass(_rpythonic_struct_): _array_wrapper_ = True
class _PangoCoverage(_rpythonic_struct_): pass
class _PangoEngineLang(_rpythonic_struct_): pass
class _PangoEngineShape(_rpythonic_struct_): pass
class _PangoFont(_rpythonic_struct_): pass
class _PangoFontMap(_rpythonic_struct_): pass
class _PangoRectangle(_rpythonic_struct_): pass
class _PangoMatrix(_rpythonic_struct_): pass
class _PangoScriptIter(_rpythonic_struct_): pass
class _PangoLanguage(_rpythonic_struct_): pass
class _PangoFontDescription(_rpythonic_struct_): pass
class _PangoFontMetrics(_rpythonic_struct_): pass
class _PangoFontFamily(_rpythonic_struct_): pass
class _PangoFontFace(_rpythonic_struct_): pass
class _PangoColor(_rpythonic_struct_): pass
class _PangoAttrList(_rpythonic_struct_): pass
class _PangoAttrIterator(_rpythonic_struct_): pass
class _PangoAttribute(_rpythonic_struct_): pass
class _PangoAttrClass(_rpythonic_struct_): pass
class _PangoAttrString(_rpythonic_struct_): pass
class _PangoAttrLanguage(_rpythonic_struct_): pass
class _PangoAttrInt(_rpythonic_struct_): pass
class _PangoAttrFloat(_rpythonic_struct_): pass
class _PangoAttrColor(_rpythonic_struct_): pass
class _PangoAttrSize(_rpythonic_struct_): pass
class _PangoAttrShape(_rpythonic_struct_): pass
class _PangoAttrFontDesc(_rpythonic_struct_): pass
class _PangoAnalysis(_rpythonic_struct_): pass
class _PangoItem(_rpythonic_struct_): pass
class _PangoLogAttr(_rpythonic_struct_): pass
class _PangoFontset(_rpythonic_struct_): pass
class _PangoContext(_rpythonic_struct_): pass
class _PangoContextClass(_rpythonic_struct_): pass
class _PangoGlyphGeometry(_rpythonic_struct_): pass
class _PangoGlyphVisAttr(_rpythonic_struct_): pass
class _PangoGlyphInfo(_rpythonic_struct_): pass
class _PangoGlyphString(_rpythonic_struct_): pass
class _PangoGlyphItem(_rpythonic_struct_): pass
class _PangoGlyphItemIter(_rpythonic_struct_): pass
class _PangoTabArray(_rpythonic_struct_): pass
class _PangoLayout(_rpythonic_struct_): pass
class _PangoLayoutClass(_rpythonic_struct_): pass
class _PangoLayoutLine(_rpythonic_struct_): pass
class _PangoLayoutIter(_rpythonic_struct_): pass
class _PangoRendererPrivate(_rpythonic_struct_): pass
class _PangoRenderer(_rpythonic_struct_): pass
class _PangoRendererClass(_rpythonic_struct_): pass
class __mbstate_t(_rpythonic_struct_): pass
class __value(ctypes.Union): pass
class _G_fpos_t(_rpythonic_struct_): pass
class _G_fpos64_t(_rpythonic_struct_): pass
class _IO_jump_t(_rpythonic_struct_): pass
class _IO_marker(_rpythonic_struct_): pass
class _IO_FILE(_rpythonic_struct_): _array_wrapper_ = True
class _IO_FILE_plus(_rpythonic_struct_): pass
class _cairo(_rpythonic_struct_): pass
class _cairo_surface(_rpythonic_struct_): pass
class _cairo_device(_rpythonic_struct_): pass
class _cairo_matrix(_rpythonic_struct_): pass
class _cairo_pattern(_rpythonic_struct_): pass
class _cairo_user_data_key(_rpythonic_struct_): pass
class _cairo_rectangle(_rpythonic_struct_): pass
class _cairo_rectangle_list(_rpythonic_struct_): pass
class _cairo_scaled_font(_rpythonic_struct_): pass
class _cairo_font_face(_rpythonic_struct_): pass
class cairo_glyph_t(_rpythonic_struct_): pass
class cairo_text_cluster_t(_rpythonic_struct_): pass
class cairo_text_extents_t(_rpythonic_struct_): pass
class cairo_font_extents_t(_rpythonic_struct_): pass
class _cairo_font_options(_rpythonic_struct_): pass
class _cairo_path_data_t(ctypes.Union): pass
class header(_rpythonic_struct_): pass
class point(_rpythonic_struct_): pass
class cairo_path(_rpythonic_struct_): pass
class _cairo_region(_rpythonic_struct_): pass
class _cairo_rectangle_int(_rpythonic_struct_): pass
class _GdkAtom(_rpythonic_struct_): pass
class _GdkCursor(_rpythonic_struct_): pass
class _GdkVisual(_rpythonic_struct_): pass
class _GdkDevice(_rpythonic_struct_): pass
class _GdkDragContext(_rpythonic_struct_): pass
class _GdkDisplayManager(_rpythonic_struct_): pass
class _GdkDeviceManager(_rpythonic_struct_): pass
class _GdkDisplay(_rpythonic_struct_): pass
class _GdkScreen(_rpythonic_struct_): pass
class _GdkWindow(_rpythonic_struct_): pass
class _GdkKeymap(_rpythonic_struct_): pass
class _GdkAppLaunchContext(_rpythonic_struct_): pass
class _GdkPoint(_rpythonic_struct_): pass
class _GdkColor(_rpythonic_struct_): pass
class _GdkTimeCoord(_rpythonic_struct_): _array_wrapper_ = True
class _GdkEventAny(_rpythonic_struct_): pass
class _GdkEventExpose(_rpythonic_struct_): pass
class _GdkEventVisibility(_rpythonic_struct_): pass
class _GdkEventMotion(_rpythonic_struct_): pass
class _GdkEventButton(_rpythonic_struct_): pass
class _GdkEventScroll(_rpythonic_struct_): pass
class _GdkEventKey(_rpythonic_struct_): pass
class _GdkEventCrossing(_rpythonic_struct_): pass
class _GdkEventFocus(_rpythonic_struct_): pass
class _GdkEventConfigure(_rpythonic_struct_): pass
class _GdkEventProperty(_rpythonic_struct_): pass
class _GdkEventSelection(_rpythonic_struct_): pass
class _GdkEventOwnerChange(_rpythonic_struct_): pass
class _GdkEventProximity(_rpythonic_struct_): pass
class _GdkEventSetting(_rpythonic_struct_): pass
class _GdkEventWindowState(_rpythonic_struct_): pass
class _GdkEventGrabBroken(_rpythonic_struct_): pass
class _GdkEventDND(_rpythonic_struct_): pass
class _GdkEvent(ctypes.Union): pass
class _GdkRGBA(_rpythonic_struct_): pass
class _GdkPixbuf(_rpythonic_struct_): pass
class _GdkPixbufAnimation(_rpythonic_struct_): pass
class _GdkPixbufAnimationIter(_rpythonic_struct_): pass
class _GdkPixbufSimpleAnim(_rpythonic_struct_): pass
class _GdkPixbufSimpleAnimClass(_rpythonic_struct_): pass
class _GdkPixbufFormat(_rpythonic_struct_): pass
class _GdkPixbufLoader(_rpythonic_struct_): pass
class _GdkPixbufLoaderClass(_rpythonic_struct_): pass
class _PangoCairoFont(_rpythonic_struct_): pass
class _PangoCairoFontMap(_rpythonic_struct_): pass
class _GdkKeymapKey(_rpythonic_struct_): pass
class _GdkWindowRedirect(_rpythonic_struct_): pass
class _GdkWindowAttr(_rpythonic_struct_): pass
class _GdkGeometry(_rpythonic_struct_): pass
class _GdkWindowClass(_rpythonic_struct_): pass
class _GtkAccelGroupPrivate(_rpythonic_struct_): pass
class _GtkAccelGroup(_rpythonic_struct_): pass
class _GtkAccelGroupClass(_rpythonic_struct_): pass
class _GtkAccelKey(_rpythonic_struct_): pass
class _GtkAccelGroupEntry(_rpythonic_struct_): pass
class _GtkAdjustmentPrivate(_rpythonic_struct_): pass
class _GtkAdjustment(_rpythonic_struct_): pass
class _GtkAdjustmentClass(_rpythonic_struct_): pass
class _GtkWidgetPath(_rpythonic_struct_): pass
class _GtkThemeEngine(_rpythonic_struct_): pass
class _GtkIconSet(_rpythonic_struct_): pass
class _GtkIconSource(_rpythonic_struct_): pass
class _GtkStyle(_rpythonic_struct_): _array_wrapper_ = True
class _GtkStyleClass(_rpythonic_struct_): pass
class _GtkBorder(_rpythonic_struct_): pass
class _GtkRcContext(_rpythonic_struct_): pass
class _GtkRcStyle(_rpythonic_struct_): _array_wrapper_ = True
class _GtkRcStyleClass(_rpythonic_struct_): pass
class _GtkRcProperty(_rpythonic_struct_): pass
class _GtkSettingsPrivate(_rpythonic_struct_): pass
class _GtkSettings(_rpythonic_struct_): pass
class _GtkSettingsClass(_rpythonic_struct_): pass
class _GtkSettingsValue(_rpythonic_struct_): pass
class _GtkIconFactoryPrivate(_rpythonic_struct_): pass
class _GtkIconFactory(_rpythonic_struct_): pass
class _GtkIconFactoryClass(_rpythonic_struct_): pass
class _GtkSymbolicColor(_rpythonic_struct_): pass
class _GtkGradient(_rpythonic_struct_): pass
class _GtkStyleProperties(_rpythonic_struct_): pass
class _GtkStylePropertiesClass(_rpythonic_struct_): pass
class _GtkStyleProvider(_rpythonic_struct_): pass
class _GtkStyleProviderIface(_rpythonic_struct_): pass
class _AtkAttribute(_rpythonic_struct_): pass
class _AtkImplementor(_rpythonic_struct_): pass
class _AtkPropertyValues(_rpythonic_struct_): pass
class _AtkObject(_rpythonic_struct_): pass
class _AtkObjectClass(_rpythonic_struct_): pass
class _AtkImplementorIface(_rpythonic_struct_): pass
class _AtkAction(_rpythonic_struct_): pass
class _AtkActionIface(_rpythonic_struct_): pass
class _AtkKeyEventStruct(_rpythonic_struct_): pass
class _AtkUtil(_rpythonic_struct_): pass
class _AtkUtilClass(_rpythonic_struct_): pass
class _AtkComponent(_rpythonic_struct_): pass
class _AtkRectangle(_rpythonic_struct_): pass
class _AtkComponentIface(_rpythonic_struct_): pass
class _AtkDocument(_rpythonic_struct_): pass
class _AtkDocumentIface(_rpythonic_struct_): pass
class _AtkText(_rpythonic_struct_): pass
class _AtkTextRectangle(_rpythonic_struct_): pass
class _AtkTextRange(_rpythonic_struct_): pass
class _AtkTextIface(_rpythonic_struct_): pass
class _AtkEditableText(_rpythonic_struct_): pass
class _AtkEditableTextIface(_rpythonic_struct_): pass
class _AtkGObjectAccessible(_rpythonic_struct_): pass
class _AtkGObjectAccessibleClass(_rpythonic_struct_): pass
class _AtkHyperlink(_rpythonic_struct_): pass
class _AtkHyperlinkClass(_rpythonic_struct_): pass
class _AtkHyperlinkImpl(_rpythonic_struct_): pass
class _AtkHyperlinkImplIface(_rpythonic_struct_): pass
class _AtkHypertext(_rpythonic_struct_): pass
class _AtkHypertextIface(_rpythonic_struct_): pass
class _AtkImage(_rpythonic_struct_): pass
class _AtkImageIface(_rpythonic_struct_): pass
class _AtkNoOpObject(_rpythonic_struct_): pass
class _AtkNoOpObjectClass(_rpythonic_struct_): pass
class _AtkObjectFactory(_rpythonic_struct_): pass
class _AtkObjectFactoryClass(_rpythonic_struct_): pass
class _AtkNoOpObjectFactory(_rpythonic_struct_): pass
class _AtkNoOpObjectFactoryClass(_rpythonic_struct_): pass
class _AtkPlug(_rpythonic_struct_): pass
class _AtkPlugClass(_rpythonic_struct_): pass
class _AtkRegistry(_rpythonic_struct_): pass
class _AtkRegistryClass(_rpythonic_struct_): pass
class _AtkRelation(_rpythonic_struct_): pass
class _AtkRelationClass(_rpythonic_struct_): pass
class _AtkRelationSet(_rpythonic_struct_): pass
class _AtkRelationSetClass(_rpythonic_struct_): pass
class _AtkSelection(_rpythonic_struct_): pass
class _AtkSelectionIface(_rpythonic_struct_): pass
class _AtkSocket(_rpythonic_struct_): pass
class _AtkSocketClass(_rpythonic_struct_): pass
class _AtkStateSet(_rpythonic_struct_): pass
class _AtkStateSetClass(_rpythonic_struct_): pass
class _AtkStreamableContent(_rpythonic_struct_): pass
class _AtkStreamableContentIface(_rpythonic_struct_): pass
class _AtkTable(_rpythonic_struct_): pass
class _AtkTableIface(_rpythonic_struct_): pass
class _AtkMisc(_rpythonic_struct_): pass
class _AtkMiscClass(_rpythonic_struct_): _array_wrapper_ = True
class _AtkValue(_rpythonic_struct_): pass
class _AtkValueIface(_rpythonic_struct_): pass
class _AtkWindow(_rpythonic_struct_): pass
class _AtkWindowIface(_rpythonic_struct_): _array_wrapper_ = True
class _GtkStyleContextPrivate(_rpythonic_struct_): pass
class _GtkStyleContext(_rpythonic_struct_): pass
class _GtkStyleContextClass(_rpythonic_struct_): pass
class _GtkSelectionData(_rpythonic_struct_): pass
class _GtkWidgetPrivate(_rpythonic_struct_): pass
class _GtkWidgetClassPrivate(_rpythonic_struct_): pass
class _GtkClipboard(_rpythonic_struct_): pass
class _GtkTooltip(_rpythonic_struct_): pass
class _GtkRequisition(_rpythonic_struct_): pass
class _GtkWidget(_rpythonic_struct_): pass
class _GtkWidgetClass(_rpythonic_struct_): pass
class _GtkWidgetAuxInfo(_rpythonic_struct_): pass
class _GtkActionPrivate(_rpythonic_struct_): pass
class _GtkAction(_rpythonic_struct_): pass
class _GtkActionClass(_rpythonic_struct_): pass
class _GtkStockItem(_rpythonic_struct_): pass
class _GtkActionGroupPrivate(_rpythonic_struct_): pass
class _GtkActionGroup(_rpythonic_struct_): pass
class _GtkActionGroupClass(_rpythonic_struct_): pass
class _GtkActionEntry(_rpythonic_struct_): pass
class _GtkToggleActionEntry(_rpythonic_struct_): pass
class _GtkRadioActionEntry(_rpythonic_struct_): pass
class _GtkApplicationPrivate(_rpythonic_struct_): pass
class _GtkApplication(_rpythonic_struct_): pass
class _GtkApplicationClass(_rpythonic_struct_): _array_wrapper_ = True
class _GtkContainerPrivate(_rpythonic_struct_): pass
class _GtkContainer(_rpythonic_struct_): pass
class _GtkContainerClass(_rpythonic_struct_): pass
class _GtkBinPrivate(_rpythonic_struct_): pass
class _GtkBin(_rpythonic_struct_): pass
class _GtkBinClass(_rpythonic_struct_): pass
class _GtkWindowPrivate(_rpythonic_struct_): pass
class _GtkWindowGeometryInfo(_rpythonic_struct_): pass
class _GtkWindowGroupPrivate(_rpythonic_struct_): pass
class _GtkWindow(_rpythonic_struct_): pass
class _GtkWindowClass(_rpythonic_struct_): pass
class _GtkWindowGroup(_rpythonic_struct_): pass
class _GtkWindowGroupClass(_rpythonic_struct_): pass
class _GtkDialogPrivate(_rpythonic_struct_): pass
class _GtkDialog(_rpythonic_struct_): pass
class _GtkDialogClass(_rpythonic_struct_): pass
class _GtkAboutDialogPrivate(_rpythonic_struct_): pass
class _GtkAboutDialog(_rpythonic_struct_): pass
class _GtkAboutDialogClass(_rpythonic_struct_): pass
class _GtkMiscPrivate(_rpythonic_struct_): pass
class _GtkMisc(_rpythonic_struct_): pass
class _GtkMiscClass(_rpythonic_struct_): pass
class _GtkMenuShellPrivate(_rpythonic_struct_): pass
class _GtkMenuShell(_rpythonic_struct_): pass
class _GtkMenuShellClass(_rpythonic_struct_): pass
class _GtkMenuPrivate(_rpythonic_struct_): pass
class _GtkMenu(_rpythonic_struct_): pass
class _GtkMenuClass(_rpythonic_struct_): pass
class _GtkLabelPrivate(_rpythonic_struct_): pass
class _GtkLabelSelectionInfo(_rpythonic_struct_): pass
class _GtkLabel(_rpythonic_struct_): pass
class _GtkLabelClass(_rpythonic_struct_): pass
class _GtkAccelLabelPrivate(_rpythonic_struct_): pass
class _GtkAccelLabel(_rpythonic_struct_): pass
class _GtkAccelLabelClass(_rpythonic_struct_): pass
class _GtkAccelMap(_rpythonic_struct_): pass
class _GtkAccelMapClass(_rpythonic_struct_): pass
class _GtkAccessiblePrivate(_rpythonic_struct_): pass
class _GtkAccessible(_rpythonic_struct_): pass
class _GtkAccessibleClass(_rpythonic_struct_): pass
class _GtkActivatable(_rpythonic_struct_): pass
class _GtkActivatableIface(_rpythonic_struct_): pass
class _GtkAlignmentPrivate(_rpythonic_struct_): pass
class _GtkAlignment(_rpythonic_struct_): pass
class _GtkAlignmentClass(_rpythonic_struct_): pass
class _GtkAppChooser(_rpythonic_struct_): pass
class _GtkAppChooserDialogPrivate(_rpythonic_struct_): pass
class _GtkAppChooserDialog(_rpythonic_struct_): pass
class _GtkAppChooserDialogClass(_rpythonic_struct_): _array_wrapper_ = True
class _GtkBoxPrivate(_rpythonic_struct_): pass
class _GtkBox(_rpythonic_struct_): pass
class _GtkBoxClass(_rpythonic_struct_): pass
class _GtkAppChooserWidgetPrivate(_rpythonic_struct_): pass
class _GtkAppChooserWidget(_rpythonic_struct_): pass
class _GtkAppChooserWidgetClass(_rpythonic_struct_): _array_wrapper_ = True
class _GtkTreePath(_rpythonic_struct_): pass
class _GtkTreeRowReference(_rpythonic_struct_): pass
class _GtkTreeModel(_rpythonic_struct_): pass
class _GtkTreeIter(_rpythonic_struct_): pass
class _GtkTreeModelIface(_rpythonic_struct_): pass
class _GtkCellEditable(_rpythonic_struct_): pass
class _GtkCellEditableIface(_rpythonic_struct_): pass
class _GtkCellRendererPrivate(_rpythonic_struct_): pass
class _GtkCellRenderer(_rpythonic_struct_): pass
class _GtkCellRendererClass(_rpythonic_struct_): pass
class _GtkTreeSortable(_rpythonic_struct_): pass
class _GtkTreeSortableIface(_rpythonic_struct_): pass
class _GtkCellAreaPrivate(_rpythonic_struct_): pass
class _GtkCellArea(_rpythonic_struct_): pass
class _GtkCellAreaClass(_rpythonic_struct_): pass
class _GtkTreeViewColumnPrivate(_rpythonic_struct_): pass
class _GtkTreeViewColumn(_rpythonic_struct_): pass
class _GtkTreeViewColumnClass(_rpythonic_struct_): pass
class _GtkTextAppearance(_rpythonic_struct_): _array_wrapper_ = True
class _GtkTextAttributes(_rpythonic_struct_): _array_wrapper_ = True
class _GtkTextChildAnchor(_rpythonic_struct_): pass
class _GtkTextChildAnchorClass(_rpythonic_struct_): pass
class _GtkTextTagPrivate(_rpythonic_struct_): pass
class _GtkTextTag(_rpythonic_struct_): pass
class _GtkTextTagClass(_rpythonic_struct_): pass
class _GtkTextIter(_rpythonic_struct_): pass
class _GtkTargetList(_rpythonic_struct_): pass
class _GtkTargetEntry(_rpythonic_struct_): pass
class _GtkEditable(_rpythonic_struct_): pass
class _GtkEditableInterface(_rpythonic_struct_): pass
class _GtkIMContext(_rpythonic_struct_): pass
class _GtkIMContextClass(_rpythonic_struct_): pass
class _GtkEntryBufferPrivate(_rpythonic_struct_): pass
class _GtkEntryBuffer(_rpythonic_struct_): pass
class _GtkEntryBufferClass(_rpythonic_struct_): pass
class _GtkListStorePrivate(_rpythonic_struct_): pass
class _GtkListStore(_rpythonic_struct_): pass
class _GtkListStoreClass(_rpythonic_struct_): pass
class _GtkTreeModelFilterPrivate(_rpythonic_struct_): pass
class _GtkTreeModelFilter(_rpythonic_struct_): pass
class _GtkTreeModelFilterClass(_rpythonic_struct_): pass
class _GtkEntryCompletionPrivate(_rpythonic_struct_): pass
class _GtkEntryCompletion(_rpythonic_struct_): pass
class _GtkEntryCompletionClass(_rpythonic_struct_): pass
class _GtkImagePrivate(_rpythonic_struct_): pass
class _GtkImage(_rpythonic_struct_): pass
class _GtkImageClass(_rpythonic_struct_): pass
class _GtkEntryPrivate(_rpythonic_struct_): pass
class _GtkEntry(_rpythonic_struct_): pass
class _GtkEntryClass(_rpythonic_struct_): pass
class _GtkTreeViewPrivate(_rpythonic_struct_): pass
class _GtkTreeView(_rpythonic_struct_): pass
class _GtkTreeViewClass(_rpythonic_struct_): pass
class _GtkComboBoxPrivate(_rpythonic_struct_): pass
class _GtkComboBox(_rpythonic_struct_): pass
class _GtkComboBoxClass(_rpythonic_struct_): pass
class _GtkAppChooserButtonPrivate(_rpythonic_struct_): pass
class _GtkAppChooserButton(_rpythonic_struct_): pass
class _GtkAppChooserButtonClass(_rpythonic_struct_): _array_wrapper_ = True
class _GtkArrowPrivate(_rpythonic_struct_): pass
class _GtkArrow(_rpythonic_struct_): pass
class _GtkArrowClass(_rpythonic_struct_): pass
class _GtkFramePrivate(_rpythonic_struct_): pass
class _GtkFrame(_rpythonic_struct_): pass
class _GtkFrameClass(_rpythonic_struct_): pass
class _GtkAspectFramePrivate(_rpythonic_struct_): pass
class _GtkAspectFrame(_rpythonic_struct_): pass
class _GtkAspectFrameClass(_rpythonic_struct_): pass
class _GtkAssistantPrivate(_rpythonic_struct_): pass
class _GtkAssistant(_rpythonic_struct_): pass
class _GtkAssistantClass(_rpythonic_struct_): pass
class _GtkButtonBoxPrivate(_rpythonic_struct_): pass
class _GtkButtonBox(_rpythonic_struct_): pass
class _GtkButtonBoxClass(_rpythonic_struct_): pass
class _GtkBindingSet(_rpythonic_struct_): pass
class _GtkBindingEntry(_rpythonic_struct_): pass
class _GtkBindingArg(_rpythonic_struct_): pass
class d(ctypes.Union): pass
class _GtkBindingSignal(_rpythonic_struct_): pass
class _GtkBuilderPrivate(_rpythonic_struct_): pass
class _GtkBuilder(_rpythonic_struct_): pass
class _GtkBuilderClass(_rpythonic_struct_): pass
class _GtkBuildable(_rpythonic_struct_): pass
class _GtkBuildableIface(_rpythonic_struct_): pass
class _GtkButtonPrivate(_rpythonic_struct_): pass
class _GtkButton(_rpythonic_struct_): pass
class _GtkButtonClass(_rpythonic_struct_): pass
class _GtkCalendarPrivate(_rpythonic_struct_): pass
class _GtkCalendar(_rpythonic_struct_): pass
class _GtkCalendarClass(_rpythonic_struct_): pass
class _GtkCellAreaBoxPrivate(_rpythonic_struct_): pass
class _GtkCellAreaBox(_rpythonic_struct_): pass
class _GtkCellAreaBoxClass(_rpythonic_struct_): pass
class _GtkCellAreaContextPrivate(_rpythonic_struct_): pass
class _GtkCellAreaContext(_rpythonic_struct_): pass
class _GtkCellAreaContextClass(_rpythonic_struct_): pass
class _GtkCellLayout(_rpythonic_struct_): pass
class _GtkCellLayoutIface(_rpythonic_struct_): pass
class _GtkCellRendererTextPrivate(_rpythonic_struct_): pass
class _GtkCellRendererText(_rpythonic_struct_): pass
class _GtkCellRendererTextClass(_rpythonic_struct_): pass
class _GtkCellRendererAccelPrivate(_rpythonic_struct_): pass
class _GtkCellRendererAccel(_rpythonic_struct_): pass
class _GtkCellRendererAccelClass(_rpythonic_struct_): pass
class _GtkCellRendererComboPrivate(_rpythonic_struct_): pass
class _GtkCellRendererCombo(_rpythonic_struct_): pass
class _GtkCellRendererComboClass(_rpythonic_struct_): pass
class _GtkCellRendererPixbufPrivate(_rpythonic_struct_): pass
class _GtkCellRendererPixbuf(_rpythonic_struct_): pass
class _GtkCellRendererPixbufClass(_rpythonic_struct_): pass
class _GtkCellRendererProgressPrivate(_rpythonic_struct_): pass
class _GtkCellRendererProgress(_rpythonic_struct_): pass
class _GtkCellRendererProgressClass(_rpythonic_struct_): pass
class _GtkCellRendererSpinPrivate(_rpythonic_struct_): pass
class _GtkCellRendererSpin(_rpythonic_struct_): pass
class _GtkCellRendererSpinClass(_rpythonic_struct_): pass
class _GtkCellRendererSpinnerPrivate(_rpythonic_struct_): pass
class _GtkCellRendererSpinner(_rpythonic_struct_): pass
class _GtkCellRendererSpinnerClass(_rpythonic_struct_): pass
class _GtkCellRendererTogglePrivate(_rpythonic_struct_): pass
class _GtkCellRendererToggle(_rpythonic_struct_): pass
class _GtkCellRendererToggleClass(_rpythonic_struct_): pass
class _GtkCellViewPrivate(_rpythonic_struct_): pass
class _GtkCellView(_rpythonic_struct_): pass
class _GtkCellViewClass(_rpythonic_struct_): pass
class _GtkToggleButtonPrivate(_rpythonic_struct_): pass
class _GtkToggleButton(_rpythonic_struct_): pass
class _GtkToggleButtonClass(_rpythonic_struct_): pass
class _GtkCheckButton(_rpythonic_struct_): pass
class _GtkCheckButtonClass(_rpythonic_struct_): pass
class _GtkMenuItemPrivate(_rpythonic_struct_): pass
class _GtkMenuItem(_rpythonic_struct_): pass
class _GtkMenuItemClass(_rpythonic_struct_): pass
class _GtkCheckMenuItemPrivate(_rpythonic_struct_): pass
class _GtkCheckMenuItem(_rpythonic_struct_): pass
class _GtkCheckMenuItemClass(_rpythonic_struct_): pass
class _GtkColorButtonPrivate(_rpythonic_struct_): pass
class _GtkColorButton(_rpythonic_struct_): pass
class _GtkColorButtonClass(_rpythonic_struct_): pass
class _GtkColorSelectionPrivate(_rpythonic_struct_): pass
class _GtkColorSelection(_rpythonic_struct_): pass
class _GtkColorSelectionClass(_rpythonic_struct_): pass
class _GtkColorSelectionDialogPrivate(_rpythonic_struct_): pass
class _GtkColorSelectionDialog(_rpythonic_struct_): pass
class _GtkColorSelectionDialogClass(_rpythonic_struct_): pass
class _GtkComboBoxTextPrivate(_rpythonic_struct_): pass
class _GtkComboBoxText(_rpythonic_struct_): pass
class _GtkComboBoxTextClass(_rpythonic_struct_): pass
class _GtkCssSection(_rpythonic_struct_): pass
class _GtkCssProviderPrivate(_rpythonic_struct_): pass
class _GtkCssProvider(_rpythonic_struct_): pass
class _GtkCssProviderClass(_rpythonic_struct_): pass
class _GtkDrawingArea(_rpythonic_struct_): pass
class _GtkDrawingAreaClass(_rpythonic_struct_): pass
class _GtkEventBoxPrivate(_rpythonic_struct_): pass
class _GtkEventBox(_rpythonic_struct_): pass
class _GtkEventBoxClass(_rpythonic_struct_): pass
class _GtkExpanderPrivate(_rpythonic_struct_): pass
class _GtkExpander(_rpythonic_struct_): pass
class _GtkExpanderClass(_rpythonic_struct_): pass
class _GtkFixedPrivate(_rpythonic_struct_): pass
class _GtkFixed(_rpythonic_struct_): pass
class _GtkFixedClass(_rpythonic_struct_): pass
class _GtkFixedChild(_rpythonic_struct_): pass
class _GtkFileFilter(_rpythonic_struct_): pass
class _GtkFileFilterInfo(_rpythonic_struct_): pass
class _GtkFileChooser(_rpythonic_struct_): pass
class _GtkFileChooserButtonPrivate(_rpythonic_struct_): pass
class _GtkFileChooserButton(_rpythonic_struct_): pass
class _GtkFileChooserButtonClass(_rpythonic_struct_): pass
class _GtkFileChooserDialogPrivate(_rpythonic_struct_): pass
class _GtkFileChooserDialog(_rpythonic_struct_): pass
class _GtkFileChooserDialogClass(_rpythonic_struct_): pass
class _GtkFileChooserWidgetPrivate(_rpythonic_struct_): pass
class _GtkFileChooserWidget(_rpythonic_struct_): pass
class _GtkFileChooserWidgetClass(_rpythonic_struct_): pass
class _GtkFontButtonPrivate(_rpythonic_struct_): pass
class _GtkFontButton(_rpythonic_struct_): pass
class _GtkFontButtonClass(_rpythonic_struct_): pass
class _GtkFontSelectionPrivate(_rpythonic_struct_): pass
class _GtkFontSelectionDialogPrivate(_rpythonic_struct_): pass
class _GtkFontSelection(_rpythonic_struct_): pass
class _GtkFontSelectionClass(_rpythonic_struct_): pass
class _GtkFontSelectionDialog(_rpythonic_struct_): pass
class _GtkFontSelectionDialogClass(_rpythonic_struct_): pass
class _GtkFontChooser(_rpythonic_struct_): pass
class _GtkFontChooserIface(_rpythonic_struct_): _array_wrapper_ = True
class _GtkFontChooserDialogPrivate(_rpythonic_struct_): pass
class _GtkFontChooserDialog(_rpythonic_struct_): pass
class _GtkFontChooserDialogClass(_rpythonic_struct_): pass
class _GtkFontChooserWidgetPrivate(_rpythonic_struct_): pass
class _GtkFontChooserWidget(_rpythonic_struct_): pass
class _GtkFontChooserWidgetClass(_rpythonic_struct_): pass
class _GtkGridPrivate(_rpythonic_struct_): pass
class _GtkGrid(_rpythonic_struct_): pass
class _GtkGridClass(_rpythonic_struct_): pass
class _GtkHandleBoxPrivate(_rpythonic_struct_): pass
class _GtkHandleBox(_rpythonic_struct_): pass
class _GtkHandleBoxClass(_rpythonic_struct_): pass
class _GtkHButtonBox(_rpythonic_struct_): pass
class _GtkHButtonBoxClass(_rpythonic_struct_): pass
class _GtkHBox(_rpythonic_struct_): pass
class _GtkHBoxClass(_rpythonic_struct_): pass
class _GtkPanedPrivate(_rpythonic_struct_): pass
class _GtkPaned(_rpythonic_struct_): pass
class _GtkPanedClass(_rpythonic_struct_): pass
class _GtkHPaned(_rpythonic_struct_): pass
class _GtkHPanedClass(_rpythonic_struct_): pass
class _GtkRangePrivate(_rpythonic_struct_): pass
class _GtkRange(_rpythonic_struct_): pass
class _GtkRangeClass(_rpythonic_struct_): pass
class _GtkScalePrivate(_rpythonic_struct_): pass
class _GtkScale(_rpythonic_struct_): pass
class _GtkScaleClass(_rpythonic_struct_): pass
class _GtkHScale(_rpythonic_struct_): pass
class _GtkHScaleClass(_rpythonic_struct_): pass
class _GtkScrollbar(_rpythonic_struct_): pass
class _GtkScrollbarClass(_rpythonic_struct_): pass
class _GtkHScrollbar(_rpythonic_struct_): pass
class _GtkHScrollbarClass(_rpythonic_struct_): pass
class _GtkSeparatorPrivate(_rpythonic_struct_): pass
class _GtkSeparator(_rpythonic_struct_): pass
class _GtkSeparatorClass(_rpythonic_struct_): pass
class _GtkHSeparator(_rpythonic_struct_): pass
class _GtkHSeparatorClass(_rpythonic_struct_): pass
class _GtkHSVPrivate(_rpythonic_struct_): pass
class _GtkHSV(_rpythonic_struct_): pass
class _GtkHSVClass(_rpythonic_struct_): pass
class _GtkIconInfo(_rpythonic_struct_): pass
class _GtkIconThemePrivate(_rpythonic_struct_): pass
class _GtkIconTheme(_rpythonic_struct_): pass
class _GtkIconThemeClass(_rpythonic_struct_): pass
class _GtkIconViewPrivate(_rpythonic_struct_): pass
class _GtkIconView(_rpythonic_struct_): pass
class _GtkIconViewClass(_rpythonic_struct_): pass
class _GtkImageMenuItemPrivate(_rpythonic_struct_): pass
class _GtkImageMenuItem(_rpythonic_struct_): pass
class _GtkImageMenuItemClass(_rpythonic_struct_): pass
class _GtkIMContextSimplePrivate(_rpythonic_struct_): pass
class _GtkIMContextSimple(_rpythonic_struct_): pass
class _GtkIMContextSimpleClass(_rpythonic_struct_): pass
class _GtkIMMulticontextPrivate(_rpythonic_struct_): pass
class _GtkIMMulticontext(_rpythonic_struct_): pass
class _GtkIMMulticontextClass(_rpythonic_struct_): pass
class _GtkInfoBarPrivate(_rpythonic_struct_): pass
class _GtkInfoBar(_rpythonic_struct_): pass
class _GtkInfoBarClass(_rpythonic_struct_): pass
class _GtkInvisiblePrivate(_rpythonic_struct_): pass
class _GtkInvisible(_rpythonic_struct_): pass
class _GtkInvisibleClass(_rpythonic_struct_): pass
class _GtkLayoutPrivate(_rpythonic_struct_): pass
class _GtkLayout(_rpythonic_struct_): pass
class _GtkLayoutClass(_rpythonic_struct_): pass
class _GtkLinkButtonPrivate(_rpythonic_struct_): pass
class _GtkLinkButton(_rpythonic_struct_): pass
class _GtkLinkButtonClass(_rpythonic_struct_): pass
class _GtkLockButtonPrivate(_rpythonic_struct_): pass
class _GtkLockButton(_rpythonic_struct_): pass
class _GtkLockButtonClass(_rpythonic_struct_): pass
class _GtkMenuBarPrivate(_rpythonic_struct_): pass
class _GtkMenuBar(_rpythonic_struct_): pass
class _GtkMenuBarClass(_rpythonic_struct_): pass
class _GtkSizeGroupPrivate(_rpythonic_struct_): pass
class _GtkSizeGroup(_rpythonic_struct_): pass
class _GtkSizeGroupClass(_rpythonic_struct_): pass
class _GtkToolItemPrivate(_rpythonic_struct_): pass
class _GtkToolItem(_rpythonic_struct_): pass
class _GtkToolItemClass(_rpythonic_struct_): pass
class _GtkToolButtonPrivate(_rpythonic_struct_): pass
class _GtkToolButton(_rpythonic_struct_): pass
class _GtkToolButtonClass(_rpythonic_struct_): pass
class _GtkMenuToolButtonPrivate(_rpythonic_struct_): pass
class _GtkMenuToolButton(_rpythonic_struct_): pass
class _GtkMenuToolButtonClass(_rpythonic_struct_): pass
class _GtkMessageDialogPrivate(_rpythonic_struct_): pass
class _GtkMessageDialog(_rpythonic_struct_): pass
class _GtkMessageDialogClass(_rpythonic_struct_): pass
class _GtkMountOperationPrivate(_rpythonic_struct_): pass
class _GtkMountOperation(_rpythonic_struct_): pass
class _GtkMountOperationClass(_rpythonic_struct_): pass
class _GtkNotebookPrivate(_rpythonic_struct_): pass
class _GtkNotebook(_rpythonic_struct_): pass
class _GtkNotebookClass(_rpythonic_struct_): pass
class _GtkNumerableIconPrivate(_rpythonic_struct_): pass
class _GtkNumerableIcon(_rpythonic_struct_): pass
class _GtkNumerableIconClass(_rpythonic_struct_): _array_wrapper_ = True
class _GtkOffscreenWindow(_rpythonic_struct_): pass
class _GtkOffscreenWindowClass(_rpythonic_struct_): pass
class _GtkOrientable(_rpythonic_struct_): pass
class _GtkOrientableIface(_rpythonic_struct_): pass
class _GtkOverlayPrivate(_rpythonic_struct_): pass
class _GtkOverlay(_rpythonic_struct_): pass
class _GtkOverlayClass(_rpythonic_struct_): pass
class _GtkPaperSize(_rpythonic_struct_): pass
class _GtkPageSetup(_rpythonic_struct_): pass
class _GtkPrintContext(_rpythonic_struct_): pass
class _GtkPrintSettings(_rpythonic_struct_): pass
class _GtkPageRange(_rpythonic_struct_): pass
class _GtkPrintOperationPreview(_rpythonic_struct_): pass
class _GtkPrintOperationPreviewIface(_rpythonic_struct_): pass
class _GtkPrintOperationPrivate(_rpythonic_struct_): pass
class _GtkPrintOperation(_rpythonic_struct_): pass
class _GtkPrintOperationClass(_rpythonic_struct_): pass
class _GtkProgressBarPrivate(_rpythonic_struct_): pass
class _GtkProgressBar(_rpythonic_struct_): pass
class _GtkProgressBarClass(_rpythonic_struct_): pass
class _GtkToggleActionPrivate(_rpythonic_struct_): pass
class _GtkToggleAction(_rpythonic_struct_): pass
class _GtkToggleActionClass(_rpythonic_struct_): pass
class _GtkRadioActionPrivate(_rpythonic_struct_): pass
class _GtkRadioAction(_rpythonic_struct_): pass
class _GtkRadioActionClass(_rpythonic_struct_): pass
class _GtkRadioButtonPrivate(_rpythonic_struct_): pass
class _GtkRadioButton(_rpythonic_struct_): pass
class _GtkRadioButtonClass(_rpythonic_struct_): pass
class _GtkRadioMenuItemPrivate(_rpythonic_struct_): pass
class _GtkRadioMenuItem(_rpythonic_struct_): pass
class _GtkRadioMenuItemClass(_rpythonic_struct_): pass
class _GtkToggleToolButtonPrivate(_rpythonic_struct_): pass
class _GtkToggleToolButton(_rpythonic_struct_): pass
class _GtkToggleToolButtonClass(_rpythonic_struct_): pass
class _GtkRadioToolButton(_rpythonic_struct_): pass
class _GtkRadioToolButtonClass(_rpythonic_struct_): pass
class _GtkRecentInfo(_rpythonic_struct_): pass
class _GtkRecentManagerPrivate(_rpythonic_struct_): pass
class _GtkRecentData(_rpythonic_struct_): pass
class _GtkRecentManager(_rpythonic_struct_): pass
class _GtkRecentManagerClass(_rpythonic_struct_): pass
class _GtkRecentActionPrivate(_rpythonic_struct_): pass
class _GtkRecentAction(_rpythonic_struct_): pass
class _GtkRecentActionClass(_rpythonic_struct_): pass
class _GtkRecentFilter(_rpythonic_struct_): pass
class _GtkRecentFilterInfo(_rpythonic_struct_): pass
class _GtkRecentChooser(_rpythonic_struct_): pass
class _GtkRecentChooserIface(_rpythonic_struct_): pass
class _GtkRecentChooserDialogPrivate(_rpythonic_struct_): pass
class _GtkRecentChooserDialog(_rpythonic_struct_): pass
class _GtkRecentChooserDialogClass(_rpythonic_struct_): pass
class _GtkRecentChooserMenuPrivate(_rpythonic_struct_): pass
class _GtkRecentChooserMenu(_rpythonic_struct_): pass
class _GtkRecentChooserMenuClass(_rpythonic_struct_): pass
class _GtkRecentChooserWidgetPrivate(_rpythonic_struct_): pass
class _GtkRecentChooserWidget(_rpythonic_struct_): pass
class _GtkRecentChooserWidgetClass(_rpythonic_struct_): pass
class _GtkScaleButtonPrivate(_rpythonic_struct_): pass
class _GtkScaleButton(_rpythonic_struct_): pass
class _GtkScaleButtonClass(_rpythonic_struct_): pass
class _GtkScrollable(_rpythonic_struct_): pass
class _GtkScrollableInterface(_rpythonic_struct_): pass
class _GtkScrolledWindowPrivate(_rpythonic_struct_): pass
class _GtkScrolledWindow(_rpythonic_struct_): pass
class _GtkScrolledWindowClass(_rpythonic_struct_): pass
class _GtkSeparatorMenuItem(_rpythonic_struct_): pass
class _GtkSeparatorMenuItemClass(_rpythonic_struct_): pass
class _GtkSeparatorToolItemPrivate(_rpythonic_struct_): pass
class _GtkSeparatorToolItem(_rpythonic_struct_): pass
class _GtkSeparatorToolItemClass(_rpythonic_struct_): pass
class _GtkRequestedSize(_rpythonic_struct_): pass
class _GtkSpinButtonPrivate(_rpythonic_struct_): pass
class _GtkSpinButton(_rpythonic_struct_): pass
class _GtkSpinButtonClass(_rpythonic_struct_): pass
class _GtkSpinnerPrivate(_rpythonic_struct_): pass
class _GtkSpinner(_rpythonic_struct_): pass
class _GtkSpinnerClass(_rpythonic_struct_): pass
class _GtkStatusbarPrivate(_rpythonic_struct_): pass
class _GtkStatusbar(_rpythonic_struct_): pass
class _GtkStatusbarClass(_rpythonic_struct_): pass
class _GtkStatusIconPrivate(_rpythonic_struct_): pass
class _GtkStatusIcon(_rpythonic_struct_): pass
class _GtkStatusIconClass(_rpythonic_struct_): pass
class _GtkSwitchPrivate(_rpythonic_struct_): pass
class _GtkSwitch(_rpythonic_struct_): pass
class _GtkSwitchClass(_rpythonic_struct_): pass
class _GtkTablePrivate(_rpythonic_struct_): pass
class _GtkTable(_rpythonic_struct_): pass
class _GtkTableClass(_rpythonic_struct_): pass
class _GtkTableChild(_rpythonic_struct_): pass
class _GtkTableRowCol(_rpythonic_struct_): pass
class _GtkTearoffMenuItemPrivate(_rpythonic_struct_): pass
class _GtkTearoffMenuItem(_rpythonic_struct_): pass
class _GtkTearoffMenuItemClass(_rpythonic_struct_): pass
class _GtkTextTagTablePrivate(_rpythonic_struct_): pass
class _GtkTextTagTable(_rpythonic_struct_): pass
class _GtkTextTagTableClass(_rpythonic_struct_): pass
class _GtkTextMark(_rpythonic_struct_): pass
class _GtkTextMarkClass(_rpythonic_struct_): pass
class _GtkTextBTree(_rpythonic_struct_): pass
class _GtkTextBufferPrivate(_rpythonic_struct_): pass
class _GtkTextBuffer(_rpythonic_struct_): pass
class _GtkTextBufferClass(_rpythonic_struct_): pass
class _GtkTextViewPrivate(_rpythonic_struct_): pass
class _GtkTextView(_rpythonic_struct_): pass
class _GtkTextViewClass(_rpythonic_struct_): pass
class GtkThemingEnginePrivate(_rpythonic_struct_): pass
class _GtkThemingEngine(_rpythonic_struct_): pass
class _GtkThemingEngineClass(_rpythonic_struct_): _array_wrapper_ = True
class _GtkToolbarPrivate(_rpythonic_struct_): pass
class _GtkToolbar(_rpythonic_struct_): pass
class _GtkToolbarClass(_rpythonic_struct_): pass
class _GtkToolItemGroupPrivate(_rpythonic_struct_): pass
class _GtkToolItemGroup(_rpythonic_struct_): pass
class _GtkToolItemGroupClass(_rpythonic_struct_): pass
class _GtkToolPalettePrivate(_rpythonic_struct_): pass
class _GtkToolPalette(_rpythonic_struct_): pass
class _GtkToolPaletteClass(_rpythonic_struct_): pass
class _GtkToolShell(_rpythonic_struct_): pass
class _GtkToolShellIface(_rpythonic_struct_): pass
class _GtkTreeDragSource(_rpythonic_struct_): pass
class _GtkTreeDragSourceIface(_rpythonic_struct_): pass
class _GtkTreeDragDest(_rpythonic_struct_): pass
class _GtkTreeDragDestIface(_rpythonic_struct_): pass
class _GtkTreeModelSortPrivate(_rpythonic_struct_): pass
class _GtkTreeModelSort(_rpythonic_struct_): pass
class _GtkTreeModelSortClass(_rpythonic_struct_): pass
class _GtkTreeSelectionPrivate(_rpythonic_struct_): pass
class _GtkTreeSelection(_rpythonic_struct_): pass
class _GtkTreeSelectionClass(_rpythonic_struct_): pass
class _GtkTreeStorePrivate(_rpythonic_struct_): pass
class _GtkTreeStore(_rpythonic_struct_): pass
class _GtkTreeStoreClass(_rpythonic_struct_): pass
class _GtkUIManagerPrivate(_rpythonic_struct_): pass
class _GtkUIManager(_rpythonic_struct_): pass
class _GtkUIManagerClass(_rpythonic_struct_): pass
class _GtkVButtonBox(_rpythonic_struct_): pass
class _GtkVButtonBoxClass(_rpythonic_struct_): pass
class _GtkVBox(_rpythonic_struct_): pass
class _GtkVBoxClass(_rpythonic_struct_): pass
class _GtkViewportPrivate(_rpythonic_struct_): pass
class _GtkViewport(_rpythonic_struct_): pass
class _GtkViewportClass(_rpythonic_struct_): pass
class _GtkVolumeButton(_rpythonic_struct_): pass
class _GtkVolumeButtonClass(_rpythonic_struct_): pass
class _GtkVPaned(_rpythonic_struct_): pass
class _GtkVPanedClass(_rpythonic_struct_): pass
class _GtkVScale(_rpythonic_struct_): pass
class _GtkVScaleClass(_rpythonic_struct_): pass
class _GtkVScrollbar(_rpythonic_struct_): pass
class _GtkVScrollbarClass(_rpythonic_struct_): pass
class _GtkVSeparator(_rpythonic_struct_): pass
class _GtkVSeparatorClass(_rpythonic_struct_): pass
class NautilusBookmarkDetails(_rpythonic_struct_): pass
class NautilusBookmark(_rpythonic_struct_): pass
class NautilusBookmarkClass(_rpythonic_struct_): pass
class NautilusDirectory(_rpythonic_struct_): pass
class NautilusDirectoryClass(_rpythonic_struct_): pass
class NautilusQueryDetails(_rpythonic_struct_): pass
class NautilusQuery(_rpythonic_struct_): pass
class NautilusQueryClass(_rpythonic_struct_): pass
class NautilusSearchDirectoryDetails(_rpythonic_struct_): pass
class NautilusSearchDirectory(_rpythonic_struct_): pass
class NautilusSearchDirectoryClass(_rpythonic_struct_): pass
class _NautilusNavigationStateDetails(_rpythonic_struct_): pass
class _NautilusNavigationState(_rpythonic_struct_): pass
class _NautilusNavigationStateClass(_rpythonic_struct_): pass
class _NautilusIconInfo(_rpythonic_struct_): pass
class _NautilusIconInfoClass(_rpythonic_struct_): pass
class NautilusFile(_rpythonic_struct_): pass
class NautilusFileClass(_rpythonic_struct_): pass
class _EelCanvasItem(_rpythonic_struct_): pass
class _EelCanvasItemClass(_rpythonic_struct_): _array_wrapper_ = True
class _EelCanvasGroup(_rpythonic_struct_): pass
class _EelCanvasGroupClass(_rpythonic_struct_): pass
class _EelCanvas(_rpythonic_struct_): pass
class _EelCanvasClass(_rpythonic_struct_): _array_wrapper_ = True
class _EelCanvasAccessible(_rpythonic_struct_): pass
class _EelCanvasAccessibleClass(_rpythonic_struct_): pass
class _EelCanvasItemAccessible(_rpythonic_struct_): pass
class _EelCanvasItemAccessibleClass(_rpythonic_struct_): pass
class NautilusIconData(_rpythonic_struct_): pass
class NautilusIconPosition(_rpythonic_struct_): pass
class NautilusIconContainer(_rpythonic_struct_): pass
class NautilusIconContainerClass(_rpythonic_struct_): pass
class _NautilusWindowPane(_rpythonic_struct_): pass
class _NautilusWindowPaneClass(_rpythonic_struct_): pass
class NautilusSearchBarDetails(_rpythonic_struct_): pass
class NautilusSearchBar(_rpythonic_struct_): pass
class NautilusSearchBarClass(_rpythonic_struct_): pass
class NautilusQueryEditorDetails(_rpythonic_struct_): pass
class NautilusQueryEditor(_rpythonic_struct_): pass
class NautilusQueryEditorClass(_rpythonic_struct_): pass
class NautilusWindowSlotClass(_rpythonic_struct_): pass
class NautilusWindowSlot(_rpythonic_struct_): pass
class NautilusViewDetails(_rpythonic_struct_): pass
class NautilusView(_rpythonic_struct_): pass
class NautilusViewClass(_rpythonic_struct_): pass
class NautilusWindowClass(_rpythonic_struct_): pass
class NautilusWindow(_rpythonic_struct_): pass
class _NautilusOperationHandle(_rpythonic_struct_): pass
class _NautilusColumnDetails(_rpythonic_struct_): pass
class _NautilusColumn(_rpythonic_struct_): pass
class _NautilusColumnClass(_rpythonic_struct_): pass
class _NautilusColumnProvider(_rpythonic_struct_): pass
class _NautilusColumnProviderIface(_rpythonic_struct_): pass
class _NautilusFileInfoIface(_rpythonic_struct_): pass
class _NautilusInfoProvider(_rpythonic_struct_): pass
class _NautilusInfoProviderIface(_rpythonic_struct_): pass
class _NautilusLocationWidgetProvider(_rpythonic_struct_): pass
class _NautilusLocationWidgetProviderIface(_rpythonic_struct_): pass
class _NautilusMenuPrivate(_rpythonic_struct_): pass
class _NautilusMenuItemDetails(_rpythonic_struct_): pass
class _NautilusMenu(_rpythonic_struct_): pass
class _NautilusMenuClass(_rpythonic_struct_): pass
class _NautilusMenuItem(_rpythonic_struct_): pass
class _NautilusMenuItemClass(_rpythonic_struct_): pass
class _NautilusMenuProvider(_rpythonic_struct_): pass
class _NautilusMenuProviderIface(_rpythonic_struct_): pass
class _NautilusPropertyPageDetails(_rpythonic_struct_): pass
class _NautilusPropertyPage(_rpythonic_struct_): pass
class _NautilusPropertyPageClass(_rpythonic_struct_): pass
class _NautilusPropertyPageProvider(_rpythonic_struct_): pass
class _NautilusPropertyPageProviderIface(_rpythonic_struct_): pass
class _NautilusCellRendererTextEllipsized(_rpythonic_struct_): pass
class _NautilusCellRendererTextEllipsizedClass(_rpythonic_struct_): pass
class NautilusClipboardMonitorDetails(_rpythonic_struct_): pass
class NautilusClipboardMonitor(_rpythonic_struct_): pass
class NautilusClipboardMonitorClass(_rpythonic_struct_): pass
class NautilusClipboardInfo(_rpythonic_struct_): pass
class _NautilusColumnChooserDetails(_rpythonic_struct_): pass
class NautilusColumnChooser(_rpythonic_struct_): pass
class NautilusColumnChooserClass(_rpythonic_struct_): pass
class NautilusDesktopBackgroundDetails(_rpythonic_struct_): pass
class NautilusDesktopBackground(_rpythonic_struct_): pass
class NautilusDesktopBackgroundClass(_rpythonic_struct_): pass
class NautilusDesktopDirectoryFileDetails(_rpythonic_struct_): pass
class NautilusDesktopDirectoryFile(_rpythonic_struct_): pass
class NautilusDesktopDirectoryFileClass(_rpythonic_struct_): pass
class NautilusDesktopDirectoryDetails(_rpythonic_struct_): pass
class NautilusDesktopDirectory(_rpythonic_struct_): pass
class NautilusDesktopDirectoryClass(_rpythonic_struct_): pass
class NautilusDesktopLinkDetails(_rpythonic_struct_): pass
class NautilusDesktopLink(_rpythonic_struct_): pass
class NautilusDesktopLinkClass(_rpythonic_struct_): pass
class NautilusDesktopIconFileDetails(_rpythonic_struct_): pass
class NautilusDesktopIconFile(_rpythonic_struct_): pass
class NautilusDesktopIconFileClass(_rpythonic_struct_): pass
class NautilusDesktopLinkMonitorDetails(_rpythonic_struct_): pass
class NautilusDesktopLinkMonitor(_rpythonic_struct_): pass
class NautilusDesktopLinkMonitorClass(_rpythonic_struct_): pass
class URIPair(_rpythonic_struct_): pass
class GFilePair(_rpythonic_struct_): pass
class NautilusFileChangesQueuePosition(_rpythonic_struct_): pass
class NautilusFileQueue(_rpythonic_struct_): pass
class NautilusMonitor(_rpythonic_struct_): pass
class _xmlBuffer(_rpythonic_struct_): pass
class _xmlNotation(_rpythonic_struct_): pass
class _xmlEnumeration(_rpythonic_struct_): pass
class _xmlAttribute(_rpythonic_struct_): pass
class _xmlElementContent(_rpythonic_struct_): pass
class _xmlRegexp(_rpythonic_struct_): pass
class _xmlRegExecCtxt(_rpythonic_struct_): pass
class _xmlDict(_rpythonic_struct_): pass
class _xmlExpCtxt(_rpythonic_struct_): pass
class _xmlExpNode(_rpythonic_struct_): pass
class _xmlElement(_rpythonic_struct_): pass
class _xmlNs(_rpythonic_struct_): pass
class _xmlDtd(_rpythonic_struct_): pass
class _xmlAttr(_rpythonic_struct_): pass
class _xmlID(_rpythonic_struct_): pass
class _xmlRef(_rpythonic_struct_): pass
class _xmlNode(_rpythonic_struct_): pass
class _xmlDoc(_rpythonic_struct_): pass
class _xmlDOMWrapCtxt(_rpythonic_struct_): pass
class _xmlMutex(_rpythonic_struct_): pass
class _xmlRMutex(_rpythonic_struct_): pass
class _xmlHashTable(_rpythonic_struct_): pass
class _xmlError(_rpythonic_struct_): pass
class _xmlLink(_rpythonic_struct_): pass
class _xmlList(_rpythonic_struct_): pass
class _xmlAutomata(_rpythonic_struct_): pass
class _xmlAutomataState(_rpythonic_struct_): pass
class _xmlValidState(_rpythonic_struct_): pass
class _xmlValidCtxt(_rpythonic_struct_): pass
class _xmlEntity(_rpythonic_struct_): pass
class _xmlParserInput(_rpythonic_struct_): pass
class _xmlParserNodeInfo(_rpythonic_struct_): pass
class _xmlParserNodeInfoSeq(_rpythonic_struct_): pass
class _xmlParserCtxt(_rpythonic_struct_): pass
class _xmlSAXLocator(_rpythonic_struct_): pass
class _xmlSAXHandler(_rpythonic_struct_): pass
class _xmlSAXHandlerV1(_rpythonic_struct_): pass
class _xmlCharEncodingHandler(_rpythonic_struct_): pass
class _xmlParserInputBuffer(_rpythonic_struct_): pass
class _xmlOutputBuffer(_rpythonic_struct_): pass
class wait(ctypes.Union): pass
class __wait_terminated(_rpythonic_struct_): pass
class __wait_stopped(_rpythonic_struct_): pass
class __WAIT_STATUS(ctypes.Union): pass
class div_t(_rpythonic_struct_): pass
class ldiv_t(_rpythonic_struct_): pass
class lldiv_t(_rpythonic_struct_): pass
class random_data(_rpythonic_struct_): pass
class drand48_data(_rpythonic_struct_): _array_wrapper_ = True
class _xlinkHandler(_rpythonic_struct_): pass
class _xmlGlobalState(_rpythonic_struct_): pass
class LinkInfoReadState(_rpythonic_struct_): pass
class TopLeftTextReadState(_rpythonic_struct_): pass
class FileMonitors(_rpythonic_struct_): pass
class DirectoryLoadState(_rpythonic_struct_): pass
class DirectoryCountState(_rpythonic_struct_): pass
class DeepCountState(_rpythonic_struct_): pass
class GetInfoState(_rpythonic_struct_): pass
class NewFilesState(_rpythonic_struct_): pass
class MimeListState(_rpythonic_struct_): pass
class ThumbnailState(_rpythonic_struct_): pass
class MountState(_rpythonic_struct_): pass
class FilesystemInfoState(_rpythonic_struct_): pass
class NautilusDirectoryDetails(_rpythonic_struct_): pass
class NautilusDragSelectionItem(_rpythonic_struct_): pass
class NautilusDragInfo(_rpythonic_struct_): pass
class NautilusEntryDetails(_rpythonic_struct_): pass
class NautilusEntry(_rpythonic_struct_): pass
class NautilusEntryClass(_rpythonic_struct_): pass
class _NautilusFileConflictDialogDetails(_rpythonic_struct_): pass
class _NautilusFileConflictDialog(_rpythonic_struct_): pass
class _NautilusFileConflictDialogClass(_rpythonic_struct_): pass
class _NautilusFileUndoInfoDetails(_rpythonic_struct_): pass
class _NautilusFileUndoInfo(_rpythonic_struct_): pass
class _NautilusFileUndoInfoClass(_rpythonic_struct_): pass
class _NautilusFileUndoInfoExtDetails(_rpythonic_struct_): pass
class _NautilusFileUndoInfoExt(_rpythonic_struct_): pass
class _NautilusFileUndoInfoExtClass(_rpythonic_struct_): pass
class _NautilusFileUndoInfoCreateDetails(_rpythonic_struct_): pass
class _NautilusFileUndoInfoCreate(_rpythonic_struct_): pass
class _NautilusFileUndoInfoCreateClass(_rpythonic_struct_): pass
class _NautilusFileUndoInfoRenameDetails(_rpythonic_struct_): pass
class _NautilusFileUndoInfoRename(_rpythonic_struct_): pass
class _NautilusFileUndoInfoRenameClass(_rpythonic_struct_): pass
class _NautilusFileUndoInfoTrashDetails(_rpythonic_struct_): pass
class _NautilusFileUndoInfoTrash(_rpythonic_struct_): pass
class _NautilusFileUndoInfoTrashClass(_rpythonic_struct_): pass
class _NautilusFileUndoInfoRecPermissionsDetails(_rpythonic_struct_): pass
class _NautilusFileUndoInfoRecPermissions(_rpythonic_struct_): pass
class _NautilusFileUndoInfoRecPermissionsClass(_rpythonic_struct_): pass
class _NautilusFileUndoInfoPermissionsDetails(_rpythonic_struct_): pass
class _NautilusFileUndoInfoPermissions(_rpythonic_struct_): pass
class _NautilusFileUndoInfoPermissionsClass(_rpythonic_struct_): pass
class _NautilusFileUndoInfoOwnershipDetails(_rpythonic_struct_): pass
class _NautilusFileUndoInfoOwnership(_rpythonic_struct_): pass
class _NautilusFileUndoInfoOwnershipClass(_rpythonic_struct_): pass
class EelPrintfHandler(_rpythonic_struct_): pass
class NautilusFileDetails(_rpythonic_struct_): pass
class NautilusFileOperation(_rpythonic_struct_): pass
class _NautilusFileUndoManagerPrivate(_rpythonic_struct_): pass
class _NautilusFileUndoManager(_rpythonic_struct_): pass
class _NautilusFileUndoManagerClass(_rpythonic_struct_): pass
class EelDRect(_rpythonic_struct_): pass
class EelIRect(_rpythonic_struct_): pass
class NautilusIconCanvasItemDetails(_rpythonic_struct_): pass
class NautilusIconCanvasItem(_rpythonic_struct_): pass
class NautilusIconCanvasItemClass(_rpythonic_struct_): pass
class NautilusIconDndInfo(_rpythonic_struct_): pass
class NautilusIcon(_rpythonic_struct_): pass
class NautilusIconRubberbandInfo(_rpythonic_struct_): pass
class StretchState(_rpythonic_struct_): pass
class NautilusIconContainerDetails(_rpythonic_struct_): _array_wrapper_ = True
class NautilusMergedDirectoryDetails(_rpythonic_struct_): pass
class NautilusMergedDirectory(_rpythonic_struct_): pass
class NautilusMergedDirectoryClass(_rpythonic_struct_): pass
class _NautilusMimeApplicationChooserDetails(_rpythonic_struct_): pass
class _NautilusMimeApplicationChooser(_rpythonic_struct_): pass
class _NautilusMimeApplicationChooserClass(_rpythonic_struct_): pass
class _NautilusProgressInfo(_rpythonic_struct_): pass
class _NautilusProgressInfoClass(_rpythonic_struct_): pass
class _NautilusProgressInfoManagerPriv(_rpythonic_struct_): pass
class _NautilusProgressInfoManager(_rpythonic_struct_): pass
class _NautilusProgressInfoManagerClass(_rpythonic_struct_): pass
class NautilusVFSFileDetails(_rpythonic_struct_): pass
class NautilusVFSFile(_rpythonic_struct_): pass
class NautilusVFSFileClass(_rpythonic_struct_): pass
class NautilusSavedSearchFileDetails(_rpythonic_struct_): pass
class NautilusSavedSearchFile(_rpythonic_struct_): pass
class NautilusSavedSearchFileClass(_rpythonic_struct_): pass
class NautilusSearchDirectoryFileDetails(_rpythonic_struct_): pass
class NautilusSearchDirectoryFile(_rpythonic_struct_): pass
class NautilusSearchDirectoryFileClass(_rpythonic_struct_): pass
class NautilusSearchEngineDetails(_rpythonic_struct_): pass
class NautilusSearchEngine(_rpythonic_struct_): pass
class NautilusSearchEngineClass(_rpythonic_struct_): pass
class NautilusSearchEngineSimpleDetails(_rpythonic_struct_): pass
class NautilusSearchEngineSimple(_rpythonic_struct_): pass
class NautilusSearchEngineSimpleClass(_rpythonic_struct_): pass
class NautilusSearchEngineTrackerDetails(_rpythonic_struct_): pass
class NautilusSearchEngineTracker(_rpythonic_struct_): pass
class NautilusSearchEngineTrackerClass(_rpythonic_struct_): pass
class _NautilusSelectionCanvasItemDetails(_rpythonic_struct_): pass
class _NautilusSelectionCanvasItem(_rpythonic_struct_): pass
class _NautilusSelectionCanvasItemClass(_rpythonic_struct_): pass
class NautilusTrashMonitorDetails(_rpythonic_struct_): pass
class NautilusTrashMonitor(_rpythonic_struct_): pass
class NautilusTrashMonitorClass(_rpythonic_struct_): pass
class _NautilusTreeViewDragDestDetails(_rpythonic_struct_): pass
class _NautilusTreeViewDragDest(_rpythonic_struct_): pass
class _NautilusTreeViewDragDestClass(_rpythonic_struct_): pass
class NautilusVFSDirectoryDetails(_rpythonic_struct_): pass
class NautilusVFSDirectory(_rpythonic_struct_): pass
class NautilusVFSDirectoryClass(_rpythonic_struct_): pass
class _NautilusSpatialWindow(_rpythonic_struct_): pass
class _NautilusApplicationPriv(_rpythonic_struct_): pass
class NautilusApplication(_rpythonic_struct_): pass
class NautilusApplicationClass(_rpythonic_struct_): pass
class NautilusBookmarkList(_rpythonic_struct_): pass
class NautilusBookmarkListClass(_rpythonic_struct_): pass
class _NautilusConnectServerDialogDetails(_rpythonic_struct_): pass
class _NautilusConnectServerDialog(_rpythonic_struct_): pass
class _NautilusConnectServerDialogClass(_rpythonic_struct_): pass
class _NautilusConnectServerOperationDetails(_rpythonic_struct_): pass
class NautilusConnectServerOperation(_rpythonic_struct_): pass
class NautilusConnectServerOperationClass(_rpythonic_struct_): pass
class NautilusIconViewDetails(_rpythonic_struct_): pass
class NautilusIconView(_rpythonic_struct_): pass
class NautilusIconViewClass(_rpythonic_struct_): pass
class NautilusDesktopIconViewDetails(_rpythonic_struct_): pass
class NautilusDesktopIconView(_rpythonic_struct_): pass
class NautilusDesktopIconViewClass(_rpythonic_struct_): pass
class NautilusDesktopWindowDetails(_rpythonic_struct_): pass
class NautilusDesktopWindow(_rpythonic_struct_): pass
class NautilusDesktopWindowClass(_rpythonic_struct_): pass
class NautilusEmptyViewDetails(_rpythonic_struct_): pass
class NautilusEmptyView(_rpythonic_struct_): pass
class NautilusEmptyViewClass(_rpythonic_struct_): pass
class _NautilusFloatingBarDetails(_rpythonic_struct_): pass
class _NautilusFloatingBar(_rpythonic_struct_): pass
class _NautilusFloatingBarClass(_rpythonic_struct_): pass
class NautilusIconViewContainerDetails(_rpythonic_struct_): pass
class NautilusIconViewContainer(_rpythonic_struct_): pass
class NautilusIconViewContainerClass(_rpythonic_struct_): pass
class NautilusImagePropertiesPageDetails(_rpythonic_struct_): pass
class NautilusImagePropertiesPage(_rpythonic_struct_): pass
class NautilusImagePropertiesPageClass(_rpythonic_struct_): pass
class NautilusListModelDetails(_rpythonic_struct_): pass
class NautilusListModel(_rpythonic_struct_): pass
class NautilusListModelClass(_rpythonic_struct_): pass
class NautilusListViewDetails(_rpythonic_struct_): pass
class NautilusListView(_rpythonic_struct_): pass
class NautilusListViewClass(_rpythonic_struct_): pass
class NautilusLocationBarDetails(_rpythonic_struct_): pass
class NautilusLocationBar(_rpythonic_struct_): pass
class NautilusLocationBarClass(_rpythonic_struct_): pass
class NautilusLocationEntryDetails(_rpythonic_struct_): pass
class NautilusLocationEntry(_rpythonic_struct_): pass
class NautilusLocationEntryClass(_rpythonic_struct_): pass
class NautilusNavigationActionPrivate(_rpythonic_struct_): pass
class _NautilusNavigationAction(_rpythonic_struct_): pass
class _NautilusNavigationActionClass(_rpythonic_struct_): pass
class _NautilusNotebookPrivate(_rpythonic_struct_): pass
class _NautilusNotebook(_rpythonic_struct_): pass
class _NautilusNotebookClass(_rpythonic_struct_): pass
class _NautilusPathBarDetails(_rpythonic_struct_): pass
class _NautilusPathBar(_rpythonic_struct_): pass
class _NautilusPathBarClass(_rpythonic_struct_): pass
class _NautilusPreviewerPriv(_rpythonic_struct_): pass
class NautilusPreviewer(_rpythonic_struct_): pass
class NautilusPreviewerClass(_rpythonic_struct_): pass
class _NautilusProgressInfoWidgetPriv(_rpythonic_struct_): pass
class NautilusProgressInfoWidget(_rpythonic_struct_): pass
class NautilusProgressInfoWidgetClass(_rpythonic_struct_): pass
class _NautilusProgressUIHandlerPriv(_rpythonic_struct_): pass
class NautilusProgressUIHandler(_rpythonic_struct_): pass
class NautilusProgressUIHandlerClass(_rpythonic_struct_): pass
class NautilusPropertiesWindowDetails(_rpythonic_struct_): pass
class NautilusPropertiesWindow(_rpythonic_struct_): pass
class NautilusPropertiesWindowClass(_rpythonic_struct_): pass
class _NautilusToolbarPriv(_rpythonic_struct_): pass
class _NautilusToolbar(_rpythonic_struct_): pass
class _NautilusToolbarClass(_rpythonic_struct_): pass
class NautilusTrashBarPrivate(_rpythonic_struct_): pass
class NautilusTrashBar(_rpythonic_struct_): pass
class NautilusTrashBarClass(_rpythonic_struct_): pass
class _NautilusViewInfo(_rpythonic_struct_): pass
class NautilusWindowDetails(_rpythonic_struct_): pass
class NautilusXContentBarPrivate(_rpythonic_struct_): pass
class NautilusXContentBar(_rpythonic_struct_): pass
class NautilusXContentBarClass(_rpythonic_struct_): pass
## union and structures ##
__freeze_rpythonic_struct( _GMutex, [
])

__freeze_rpythonic_struct( static_mutex, [
	( "pad", ( ctypes.c_char * 24 ) ),
	( "dummy_double", ctypes.c_double ),
	( "dummy_pointer", ctypes.POINTER(ctypes.c_void_p) ),
	( "dummy_long", ctypes.c_long ),
])

__freeze_rpythonic_struct( _GStaticMutex, [
	( "runtime_mutex", ctypes.POINTER(_GMutex) ),
	( "static_mutex", static_mutex ),
])

__freeze_rpythonic_struct( _GSystemThread, [
	( "data", ( ctypes.c_char * 4 ) ),
	( "dummy_double", ctypes.c_double ),
	( "dummy_pointer", ctypes.POINTER(ctypes.c_void_p) ),
	( "dummy_long", ctypes.c_long ),
])

__freeze_rpythonic_struct( __fsid_t, [
	( "__val", ( ctypes.c_int * 2 ) ),
])

__freeze_rpythonic_struct( timespec, [
	( "tv_sec", ctypes.c_int64 ),
	( "tv_nsec", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( tm, [
	( "tm_sec", ctypes.c_int ),
	( "tm_min", ctypes.c_int ),
	( "tm_hour", ctypes.c_int ),
	( "tm_mday", ctypes.c_int ),
	( "tm_mon", ctypes.c_int ),
	( "tm_year", ctypes.c_int ),
	( "tm_wday", ctypes.c_int ),
	( "tm_yday", ctypes.c_int ),
	( "tm_isdst", ctypes.c_int ),
	( "tm_gmtoff", ctypes.c_int64 ),
	( "tm_zone", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( itimerspec, [
	( "it_interval", timespec ),
	( "it_value", timespec ),
])

__freeze_rpythonic_struct( __locale_data, [
])

__freeze_rpythonic_struct( __locale_struct, [
	( "__locales", ctypes.POINTER(( __locale_data * 13 )) ),
	( "__ctype_b", ctypes.POINTER(ctypes.c_uint16) ),
	( "__ctype_tolower", ctypes.POINTER(ctypes.c_int) ),
	( "__ctype_toupper", ctypes.POINTER(ctypes.c_int) ),
	( "__names", ctypes.POINTER(( ctypes.c_char * 13 )) ),
])

__freeze_rpythonic_struct( mpn, [
	( "mantissa_low", ctypes.c_uint ),
	( "mantissa_high", ctypes.c_uint ),
	( "biased_exponent", ctypes.c_uint ),
	( "sign", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GFloatIEEE754, [
	( "v_float", ctypes.c_float ),
	( "mpn", mpn ),
])

__freeze_rpythonic_struct( _GDoubleIEEE754, [
	( "v_double", ctypes.c_double ),
	( "mpn", mpn ),
])

__freeze_rpythonic_struct( _GTimeVal, [
	( "tv_sec", ctypes.c_long ),
	( "tv_usec", ctypes.c_long ),
])

__freeze_rpythonic_struct( _GArray, [
	( "data", ctypes.POINTER(ctypes.c_char) ),
	( "C_len", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GByteArray, [
	( "data", ctypes.POINTER(ctypes.c_ubyte) ),
	( "C_len", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GPtrArray, [
	( "pdata", ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)) ),
	( "C_len", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GError, [
	( "domain", ctypes.c_uint ),
	( "code", ctypes.c_int ),
	( "message", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( _GDebugKey, [
	( "key", ctypes.POINTER(ctypes.c_char) ),
	( "value", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GTrashStack, [
	( "next", ctypes.POINTER(_GTrashStack) ),
])

__freeze_rpythonic_struct( _GThread, [
	( "func", ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), ) ),
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
	( "joinable", ctypes.c_int ),
	( "priority", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GCond, [
])

__freeze_rpythonic_struct( _GPrivate, [
])

__freeze_rpythonic_struct( _GThreadFunctions, [
	( "mutex_new", ctypes.POINTER(ctypes.c_void_p) ),
	( "mutex_lock", ctypes.c_void_p ),
	( "mutex_trylock", ctypes.c_void_p ),
	( "mutex_unlock", ctypes.c_void_p ),
	( "mutex_free", ctypes.c_void_p ),
	( "cond_new", ctypes.POINTER(ctypes.c_void_p) ),
	( "cond_signal", ctypes.c_void_p ),
	( "cond_broadcast", ctypes.c_void_p ),
	( "cond_wait", ctypes.c_void_p ),
	( "cond_timed_wait", ctypes.c_void_p ),
	( "cond_free", ctypes.c_void_p ),
	( "private_new", ctypes.POINTER(ctypes.c_void_p) ),
	( "private_get", ctypes.POINTER(ctypes.c_void_p) ),
	( "private_set", ctypes.c_void_p ),
	( "thread_create", ctypes.c_void_p ),
	( "thread_yield", ctypes.c_void_p ),
	( "thread_join", ctypes.c_void_p ),
	( "thread_exit", ctypes.c_void_p ),
	( "thread_set_priority", ctypes.c_void_p ),
	( "thread_self", ctypes.c_void_p ),
	( "thread_equal", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GStaticPrivate, [
	( "index", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GStaticRecMutex, [
	( "mutex", _GStaticMutex ),
	( "depth", ctypes.c_uint ),
	( "owner", _GSystemThread ),
])

__freeze_rpythonic_struct( _GStaticRWLock, [
	( "mutex", _GStaticMutex ),
	( "read_cond", ctypes.POINTER(_GCond) ),
	( "write_cond", ctypes.POINTER(_GCond) ),
	( "read_counter", ctypes.c_uint ),
	( "have_writer", ctypes.c_int ),
	( "want_to_read", ctypes.c_uint ),
	( "want_to_write", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GOnce, [
	( "status", ctypes.c_int ),
	( "retval", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GAsyncQueue, [
])

__freeze_rpythonic_struct( __sigset_t, [
	( "__val", ctypes.c_uint64 ),
])

__freeze_rpythonic_struct( sigval, [
	( "sival_int", ctypes.c_int ),
	( "sival_ptr", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _kill, [
	( "si_pid", ctypes.c_int ),
	( "si_uid", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _timer, [
	( "si_tid", ctypes.c_int ),
	( "si_overrun", ctypes.c_int ),
	( "si_sigval", sigval ),
])

__freeze_rpythonic_struct( _rt, [
	( "si_pid", ctypes.c_int ),
	( "si_uid", ctypes.c_uint ),
	( "si_sigval", sigval ),
])

__freeze_rpythonic_struct( _sigchld, [
	( "si_pid", ctypes.c_int ),
	( "si_uid", ctypes.c_uint ),
	( "si_status", ctypes.c_int ),
	( "si_utime", ctypes.c_int64 ),
	( "si_stime", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( _sigfault, [
	( "si_addr", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _sigpoll, [
	( "si_band", ctypes.c_int64 ),
	( "si_fd", ctypes.c_int ),
])

__freeze_rpythonic_struct( _sifields, [
	( "_pad", ctypes.c_int ),
	( "_kill", _kill ),
	( "_timer", _timer ),
	( "_rt", _rt ),
	( "_sigchld", _sigchld ),
	( "_sigfault", _sigfault ),
	( "_sigpoll", _sigpoll ),
])

__freeze_rpythonic_struct( siginfo, [
	( "si_signo", ctypes.c_int ),
	( "si_errno", ctypes.c_int ),
	( "si_code", ctypes.c_int ),
	( "_sifields", _sifields ),
])

__freeze_rpythonic_struct( _sigev_thread, [
	( "_function", ctypes.c_void_p ),
	( "_attribute", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _sigev_un, [
	( "_pad", ctypes.c_int ),
	( "_tid", ctypes.c_int ),
	( "_sigev_thread", _sigev_thread ),
])

__freeze_rpythonic_struct( sigevent, [
	( "sigev_value", sigval ),
	( "sigev_signo", ctypes.c_int ),
	( "sigev_notify", ctypes.c_int ),
	( "_sigev_un", _sigev_un ),
])

__freeze_rpythonic_struct( __sigaction_handler, [
	( "sa_handler", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,) ),
	( "sa_sigaction", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( sigaction, [
	( "__sigaction_handler", __sigaction_handler ),
	( "sa_mask", __sigset_t ),
	( "sa_flags", ctypes.c_int ),
	( "sa_restorer", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( sigvec, [
	( "sv_handler", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,) ),
	( "sv_mask", ctypes.c_int ),
	( "sv_flags", ctypes.c_int ),
])

__freeze_rpythonic_struct( __kernel_fd_set, [
	( "fds_bits", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( __kernel_fsid_t, [
	( "val", ( ctypes.c_int * 2 ) ),
])

__freeze_rpythonic_struct( _fpx_sw_bytes, [
	( "magic1", ctypes.c_uint ),
	( "extended_size", ctypes.c_uint ),
	( "xstate_bv", ctypes.c_ulonglong ),
	( "xstate_size", ctypes.c_uint ),
	( "padding", ( ctypes.c_uint * 7 ) ),
])

__freeze_rpythonic_struct( _fpreg, [
	( "significand", ( ctypes.c_ushort * 4 ) ),
	( "exponent", ctypes.c_ushort ),
])

__freeze_rpythonic_struct( _fpxreg, [
	( "significand", ( ctypes.c_ushort * 4 ) ),
	( "exponent", ctypes.c_ushort ),
	( "padding", ( ctypes.c_ushort * 3 ) ),
])

__freeze_rpythonic_struct( _xmmreg, [
	( "element", ( ctypes.c_ulong * 4 ) ),
])

__freeze_rpythonic_struct( _fpstate, [
	( "cw", ctypes.c_ulong ),
	( "sw", ctypes.c_ulong ),
	( "tag", ctypes.c_ulong ),
	( "ipoff", ctypes.c_ulong ),
	( "cssel", ctypes.c_ulong ),
	( "dataoff", ctypes.c_ulong ),
	( "datasel", ctypes.c_ulong ),
	( "_st", ( _fpreg * 8 ) ),
	( "status", ctypes.c_ushort ),
	( "magic", ctypes.c_ushort ),
	( "_fxsr_env", ( ctypes.c_ulong * 6 ) ),
	( "mxcsr", ctypes.c_ulong ),
	( "reserved", ctypes.c_ulong ),
	( "_fxsr_st", ( _fpxreg * 8 ) ),
	( "_xmm", ( _xmmreg * 8 ) ),
	( "padding1", ( ctypes.c_ulong * 44 ) ),
	#opaque-warning# <rpythonic.rpythonic.SomeThing object at 0xebd940c>
])

__freeze_rpythonic_struct( sigcontext, [
	( "gs", ctypes.c_ushort ),
	( "__gsh", ctypes.c_ushort ),
	( "fs", ctypes.c_ushort ),
	( "__fsh", ctypes.c_ushort ),
	( "es", ctypes.c_ushort ),
	( "__esh", ctypes.c_ushort ),
	( "ds", ctypes.c_ushort ),
	( "__dsh", ctypes.c_ushort ),
	( "edi", ctypes.c_ulong ),
	( "esi", ctypes.c_ulong ),
	( "ebp", ctypes.c_ulong ),
	( "esp", ctypes.c_ulong ),
	( "ebx", ctypes.c_ulong ),
	( "edx", ctypes.c_ulong ),
	( "ecx", ctypes.c_ulong ),
	( "eax", ctypes.c_ulong ),
	( "trapno", ctypes.c_ulong ),
	( "err", ctypes.c_ulong ),
	( "eip", ctypes.c_ulong ),
	( "cs", ctypes.c_ushort ),
	( "__csh", ctypes.c_ushort ),
	( "eflags", ctypes.c_ulong ),
	( "esp_at_signal", ctypes.c_ulong ),
	( "ss", ctypes.c_ushort ),
	( "__ssh", ctypes.c_ushort ),
	( "fpstate", ctypes.POINTER(_fpstate) ),
	( "oldmask", ctypes.c_ulong ),
	( "cr2", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( _xsave_hdr, [
	( "xstate_bv", ctypes.c_ulonglong ),
	( "reserved1", ( ctypes.c_ulonglong * 2 ) ),
	( "reserved2", ( ctypes.c_ulonglong * 5 ) ),
])

__freeze_rpythonic_struct( _ymmh_state, [
	( "ymmh_space", ( ctypes.c_uint * 64 ) ),
])

__freeze_rpythonic_struct( _xstate, [
	( "fpstate", _fpstate ),
	( "xstate_hdr", _xsave_hdr ),
	( "ymmh", _ymmh_state ),
])

__freeze_rpythonic_struct( sigstack, [
	( "ss_sp", ctypes.POINTER(ctypes.c_void_p) ),
	( "ss_onstack", ctypes.c_int ),
])

__freeze_rpythonic_struct( sigaltstack, [
	( "ss_sp", ctypes.POINTER(ctypes.c_void_p) ),
	( "ss_flags", ctypes.c_int ),
	( "ss_size", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _libc_fpreg, [
	( "significand", ( ctypes.c_uint16 * 4 ) ),
	( "exponent", ctypes.c_uint16 ),
])

__freeze_rpythonic_struct( _libc_fpstate, [
	( "cw", ctypes.c_uint64 ),
	( "sw", ctypes.c_uint64 ),
	( "tag", ctypes.c_uint64 ),
	( "ipoff", ctypes.c_uint64 ),
	( "cssel", ctypes.c_uint64 ),
	( "dataoff", ctypes.c_uint64 ),
	( "datasel", ctypes.c_uint64 ),
	( "_st", ( _libc_fpreg * 8 ) ),
	( "status", ctypes.c_uint64 ),
])

__freeze_rpythonic_struct( mcontext_t, [
	( "gregs", ( ctypes.c_int * 19 ) ),
	( "fpregs", ctypes.POINTER(_libc_fpstate) ),
	( "oldmask", ctypes.c_uint64 ),
	( "cr2", ctypes.c_uint64 ),
])

__freeze_rpythonic_struct( ucontext, [
	( "uc_flags", ctypes.c_uint64 ),
	( "uc_link", ctypes.POINTER(ucontext) ),
	( "uc_stack", sigaltstack ),
	( "uc_mcontext", mcontext_t ),
	( "uc_sigmask", __sigset_t ),
	( "__fpregs_mem", _libc_fpstate ),
])

__freeze_rpythonic_struct( pthread_attr_t, [
	( "__size", ( ctypes.c_char * 36 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( __pthread_internal_slist, [
	( "__next", ctypes.POINTER(__pthread_internal_slist) ),
])

__freeze_rpythonic_struct( __pthread_mutex_s, [
	( "__lock", ctypes.c_int ),
	( "__count", ctypes.c_uint ),
	( "__owner", ctypes.c_int ),
	( "__kind", ctypes.c_int ),
	( "__nusers", ctypes.c_uint ),
	#opaque-warning# <rpythonic.rpythonic.SomeThing object at 0xebe842c>
])

__freeze_rpythonic_struct( pthread_mutex_t, [
	( "__data", __pthread_mutex_s ),
	( "__size", ( ctypes.c_char * 24 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_mutexattr_t, [
	( "__size", ( ctypes.c_char * 4 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( __data, [
	( "__lock", ctypes.c_int ),
	( "__nr_readers", ctypes.c_uint ),
	( "__readers_wakeup", ctypes.c_uint ),
	( "__writer_wakeup", ctypes.c_uint ),
	( "__nr_readers_queued", ctypes.c_uint ),
	( "__nr_writers_queued", ctypes.c_uint ),
	( "__flags", ctypes.c_ubyte ),
	( "__shared", ctypes.c_ubyte ),
	( "__pad1", ctypes.c_ubyte ),
	( "__pad2", ctypes.c_ubyte ),
	( "__writer", ctypes.c_int ),
])

__freeze_rpythonic_struct( pthread_cond_t, [
	( "__data", __data ),
	( "__size", ( ctypes.c_char * 48 ) ),
	( "__align", ctypes.c_longlong ),
])

__freeze_rpythonic_struct( pthread_condattr_t, [
	( "__size", ( ctypes.c_char * 4 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_rwlock_t, [
	( "__data", __data ),
	( "__size", ( ctypes.c_char * 32 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_rwlockattr_t, [
	( "__size", ( ctypes.c_char * 8 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_barrier_t, [
	( "__size", ( ctypes.c_char * 20 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_barrierattr_t, [
	( "__size", ( ctypes.c_char * 4 ) ),
	( "__align", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GBookmarkFile, [
])

__freeze_rpythonic_struct( _GMemVTable, [
	( "malloc", ctypes.POINTER(ctypes.c_void_p) ),
	( "realloc", ctypes.POINTER(ctypes.c_void_p) ),
	( "free", ctypes.c_void_p ),
	( "calloc", ctypes.POINTER(ctypes.c_void_p) ),
	( "try_malloc", ctypes.POINTER(ctypes.c_void_p) ),
	( "try_realloc", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GAllocator, [
])

__freeze_rpythonic_struct( _GMemChunk, [
])

__freeze_rpythonic_struct( _GList, [
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
	( "next", ctypes.POINTER(_GList) ),
	( "prev", ctypes.POINTER(_GList) ),
])

__freeze_rpythonic_struct( _GCache, [
])

__freeze_rpythonic_struct( _GChecksum, [
])

__freeze_rpythonic_struct( _GCompletion, [
	( "items", ctypes.POINTER(_GList) ),
	( "func", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_char), )) ),
	( "prefix", ctypes.POINTER(ctypes.c_char) ),
	( "cache", ctypes.POINTER(_GList) ),
	( "strncmp_func", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.c_uint,) ),
])

__freeze_rpythonic_struct( _GIConv, [
])

__freeze_rpythonic_struct( _GData, [
])

__freeze_rpythonic_struct( _GDate, [
	( "julian_days", ctypes.c_uint ),
	( "julian", ctypes.c_uint ),
	( "dmy", ctypes.c_uint ),
	( "day", ctypes.c_uint ),
	( "month", ctypes.c_uint ),
	( "year", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GTimeZone, [
])

__freeze_rpythonic_struct( _GDateTime, [
])

__freeze_rpythonic_struct( _GDir, [
])

__freeze_rpythonic_struct( _GHashTable, [
])

__freeze_rpythonic_struct( _GHashTableIter, [
	( "dummy1", ctypes.POINTER(ctypes.c_void_p) ),
	( "dummy2", ctypes.POINTER(ctypes.c_void_p) ),
	( "dummy3", ctypes.POINTER(ctypes.c_void_p) ),
	( "dummy4", ctypes.c_int ),
	( "dummy5", ctypes.c_int ),
	( "dummy6", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GHmac, [
])

__freeze_rpythonic_struct( _GHook, [
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
	( "next", ctypes.POINTER(_GHook) ),
	( "prev", ctypes.POINTER(_GHook) ),
	( "ref_count", ctypes.c_uint ),
	( "hook_id", ctypes.c_ulong ),
	( "flags", ctypes.c_uint ),
	( "func", ctypes.POINTER(ctypes.c_void_p) ),
	( "destroy", ctypes.CFUNCTYPE(ctypes.c_void_p, ) ),
])

__freeze_rpythonic_struct( _GHookList, [
	( "seq_id", ctypes.c_ulong ),
	( "hook_size", ctypes.c_uint ),
	( "is_setup", ctypes.c_uint ),
	( "hooks", ctypes.POINTER(_GHook) ),
	( "dummy3", ctypes.POINTER(ctypes.c_void_p) ),
	( "finalize_hook", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GHookList),ctypes.POINTER(_GHook),) ),
	( "dummy", ctypes.POINTER(( ctypes.c_void_p * 2 )) ),
])

__freeze_rpythonic_struct( _GPollFD, [
	( "fd", ctypes.c_int ),
	( "events", ctypes.c_ushort ),
	( "revents", ctypes.c_ushort ),
])

__freeze_rpythonic_struct( _GSList, [
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
	( "next", ctypes.POINTER(_GSList) ),
])

__freeze_rpythonic_struct( _GMainContext, [
])

__freeze_rpythonic_struct( _GMainLoop, [
])

__freeze_rpythonic_struct( _GSourcePrivate, [
])

__freeze_rpythonic_struct( _GSourceCallbackFuncs, [
	( "ref", ctypes.c_void_p ),
	( "unref", ctypes.c_void_p ),
	( "get", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GSourceFuncs, [
	( "prepare", ctypes.c_void_p ),
	( "check", ctypes.c_void_p ),
	( "dispatch", ctypes.c_void_p ),
	( "finalize", ctypes.c_void_p ),
	( "closure_callback", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
	( "closure_marshal", ctypes.CFUNCTYPE(ctypes.c_void_p, ) ),
])

__freeze_rpythonic_struct( _GSource, [
	( "callback_data", ctypes.POINTER(ctypes.c_void_p) ),
	( "callback_funcs", ctypes.POINTER(_GSourceCallbackFuncs) ),
	( "source_funcs", ctypes.POINTER(_GSourceFuncs) ),
	( "ref_count", ctypes.c_uint ),
	( "context", ctypes.POINTER(_GMainContext) ),
	( "priority", ctypes.c_int ),
	( "flags", ctypes.c_uint ),
	( "source_id", ctypes.c_uint ),
	( "poll_fds", ctypes.POINTER(_GSList) ),
	( "prev", ctypes.POINTER(_GSource) ),
	( "next", ctypes.POINTER(_GSource) ),
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "priv", ctypes.POINTER(_GSourcePrivate) ),
])

__freeze_rpythonic_struct( _GStringChunk, [
])

__freeze_rpythonic_struct( _GString, [
	( "C_str", ctypes.POINTER(ctypes.c_char) ),
	( "C_len", ctypes.c_uint ),
	( "allocated_len", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GIOFuncs, [
	( "io_read", ctypes.c_void_p ),
	( "io_write", ctypes.c_void_p ),
	( "io_seek", ctypes.c_void_p ),
	( "io_close", ctypes.c_void_p ),
	( "io_create_watch", ctypes.POINTER(ctypes.c_void_p) ),
	( "io_free", ctypes.c_void_p ),
	( "io_set_flags", ctypes.c_void_p ),
	( "io_get_flags", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GIOChannel, [
	( "ref_count", ctypes.c_int ),
	( "funcs", ctypes.POINTER(_GIOFuncs) ),
	( "encoding", ctypes.POINTER(ctypes.c_char) ),
	( "read_cd", ctypes.POINTER(_GIConv) ),
	( "write_cd", ctypes.POINTER(_GIConv) ),
	( "line_term", ctypes.POINTER(ctypes.c_char) ),
	( "line_term_len", ctypes.c_uint ),
	( "buf_size", ctypes.c_uint ),
	( "read_buf", ctypes.POINTER(_GString) ),
	( "encoded_read_buf", ctypes.POINTER(_GString) ),
	( "write_buf", ctypes.POINTER(_GString) ),
	( "partial_write_buf", ( ctypes.c_char * 6 ) ),
	( "use_buffer", ctypes.c_uint ),
	( "do_encode", ctypes.c_uint ),
	( "close_on_unref", ctypes.c_uint ),
	( "is_readable", ctypes.c_uint ),
	( "is_writeable", ctypes.c_uint ),
	( "is_seekable", ctypes.c_uint ),
	( "reserved1", ctypes.POINTER(ctypes.c_void_p) ),
	( "reserved2", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GKeyFile, [
])

__freeze_rpythonic_struct( _GMappedFile, [
])

__freeze_rpythonic_struct( _GMarkupParseContext, [
])

__freeze_rpythonic_struct( _GMarkupParser, [
	( "start_element", ctypes.c_void_p ),
	( "end_element", ctypes.c_void_p ),
	( "text", ctypes.c_void_p ),
	( "passthrough", ctypes.c_void_p ),
	( "error", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GNode, [
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
	( "next", ctypes.POINTER(_GNode) ),
	( "prev", ctypes.POINTER(_GNode) ),
	( "parent", ctypes.POINTER(_GNode) ),
	( "children", ctypes.POINTER(_GNode) ),
])

__freeze_rpythonic_struct( _GOptionContext, [
])

__freeze_rpythonic_struct( _GOptionGroup, [
])

__freeze_rpythonic_struct( _GOptionEntry, [
	( "long_name", ctypes.POINTER(ctypes.c_char) ),
	( "short_name", ctypes.c_char ),
	( "flags", ctypes.c_int ),
	( "arg", ctypes.c_int ),
	( "arg_data", ctypes.POINTER(ctypes.c_void_p) ),
	( "description", ctypes.POINTER(ctypes.c_char) ),
	( "arg_description", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( _GPatternSpec, [
])

__freeze_rpythonic_struct( _GQueue, [
	( "head", ctypes.POINTER(_GList) ),
	( "tail", ctypes.POINTER(_GList) ),
	( "length", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GRand, [
])

__freeze_rpythonic_struct( _GRelation, [
])

__freeze_rpythonic_struct( _GTuples, [
	( "C_len", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GRegex, [
])

__freeze_rpythonic_struct( _GMatchInfo, [
])

__freeze_rpythonic_struct( _GTokenValue, [
	( "v_symbol", ctypes.POINTER(ctypes.c_void_p) ),
	( "v_identifier", ctypes.POINTER(ctypes.c_char) ),
	( "v_binary", ctypes.c_ulong ),
	( "v_octal", ctypes.c_ulong ),
	( "v_int", ctypes.c_ulong ),
	( "v_int64", ctypes.c_ulonglong ),
	( "v_float", ctypes.c_double ),
	( "v_hex", ctypes.c_ulong ),
	( "v_string", ctypes.POINTER(ctypes.c_char) ),
	( "v_comment", ctypes.POINTER(ctypes.c_char) ),
	( "v_char", ctypes.c_ubyte ),
	( "v_error", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GScannerConfig, [
	( "cset_skip_characters", ctypes.POINTER(ctypes.c_char) ),
	( "cset_identifier_first", ctypes.POINTER(ctypes.c_char) ),
	( "cset_identifier_nth", ctypes.POINTER(ctypes.c_char) ),
	( "cpair_comment_single", ctypes.POINTER(ctypes.c_char) ),
	( "case_sensitive", ctypes.c_uint ),
	( "skip_comment_multi", ctypes.c_uint ),
	( "skip_comment_single", ctypes.c_uint ),
	( "scan_comment_multi", ctypes.c_uint ),
	( "scan_identifier", ctypes.c_uint ),
	( "scan_identifier_1char", ctypes.c_uint ),
	( "scan_identifier_NULL", ctypes.c_uint ),
	( "scan_symbols", ctypes.c_uint ),
	( "scan_binary", ctypes.c_uint ),
	( "scan_octal", ctypes.c_uint ),
	( "scan_float", ctypes.c_uint ),
	( "scan_hex", ctypes.c_uint ),
	( "scan_hex_dollar", ctypes.c_uint ),
	( "scan_string_sq", ctypes.c_uint ),
	( "scan_string_dq", ctypes.c_uint ),
	( "numbers_2_int", ctypes.c_uint ),
	( "int_2_float", ctypes.c_uint ),
	( "identifier_2_string", ctypes.c_uint ),
	( "char_2_token", ctypes.c_uint ),
	( "symbol_2_token", ctypes.c_uint ),
	( "scope_0_fallback", ctypes.c_uint ),
	( "store_int64", ctypes.c_uint ),
	( "padding_dummy", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GScanner, [
	( "user_data", ctypes.POINTER(ctypes.c_void_p) ),
	( "max_parse_errors", ctypes.c_uint ),
	( "parse_errors", ctypes.c_uint ),
	( "input_name", ctypes.POINTER(ctypes.c_char) ),
	( "qdata", ctypes.POINTER(_GData) ),
	( "config", ctypes.POINTER(_GScannerConfig) ),
	( "token", ctypes.c_int ),
	( "value", _GTokenValue ),
	( "line", ctypes.c_uint ),
	( "position", ctypes.c_uint ),
	( "next_token", ctypes.c_int ),
	( "next_value", _GTokenValue ),
	( "next_line", ctypes.c_uint ),
	( "next_position", ctypes.c_uint ),
	( "symbol_table", ctypes.POINTER(_GHashTable) ),
	( "input_fd", ctypes.c_int ),
	( "text", ctypes.POINTER(ctypes.c_char) ),
	( "text_end", ctypes.POINTER(ctypes.c_char) ),
	( "buffer", ctypes.POINTER(ctypes.c_char) ),
	( "scope_id", ctypes.c_uint ),
	( "msg_handler", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GScanner),ctypes.POINTER(ctypes.c_char),ctypes.c_int,) ),
])

__freeze_rpythonic_struct( _GSequence, [
])

__freeze_rpythonic_struct( _GSequenceNode, [
])

__freeze_rpythonic_struct( GTestCase, [
])

__freeze_rpythonic_struct( GTestSuite, [
])

__freeze_rpythonic_struct( GTestConfig, [
	( "test_initialized", ctypes.c_int ),
	( "test_quick", ctypes.c_int ),
	( "test_perf", ctypes.c_int ),
	( "test_verbose", ctypes.c_int ),
	( "test_quiet", ctypes.c_int ),
])

__freeze_rpythonic_struct( GTestLogMsg, [
	( "log_type", ctypes.c_int ),
	( "n_strings", ctypes.c_uint ),
	( "strings", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)) ),
	( "n_nums", ctypes.c_uint ),
	( "nums", ctypes.POINTER(ctypes.c_double) ),
])

__freeze_rpythonic_struct( GTestLogBuffer, [
	( "data", ctypes.POINTER(_GString) ),
	( "msgs", ctypes.POINTER(_GSList) ),
])

__freeze_rpythonic_struct( _GThreadPool, [
	( "func", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),) ),
	( "user_data", ctypes.POINTER(ctypes.c_void_p) ),
	( "exclusive", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GTimer, [
])

__freeze_rpythonic_struct( _GTree, [
])

__freeze_rpythonic_struct( _GVariantType, [
])

__freeze_rpythonic_struct( _GVariant, [
])

__freeze_rpythonic_struct( _GVariantIter, [
	( "x", ( ctypes.c_uint * 16 ) ),
])

__freeze_rpythonic_struct( _GVariantBuilder, [
	( "x", ( ctypes.c_uint * 16 ) ),
])

__freeze_rpythonic_struct( _GTypeCValue, [
])

__freeze_rpythonic_struct( _GTypePlugin, [
])

__freeze_rpythonic_struct( _GTypeClass, [
	( "g_type", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GTypeInstance, [
	( "g_class", ctypes.POINTER(_GTypeClass) ),
])

__freeze_rpythonic_struct( _GTypeInterface, [
	( "g_type", ctypes.c_uint ),
	( "g_instance_type", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GTypeQuery, [
	( "C_type", ctypes.c_uint ),
	( "type_name", ctypes.POINTER(ctypes.c_char) ),
	( "class_size", ctypes.c_uint ),
	( "instance_size", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GTypeValueTable, [
	( "value_init", ctypes.c_void_p ),
	( "value_free", ctypes.c_void_p ),
	( "value_copy", ctypes.c_void_p ),
	( "value_peek_pointer", ctypes.POINTER(ctypes.c_void_p) ),
	( "collect_format", ctypes.POINTER(ctypes.c_char) ),
	( "collect_value", ctypes.POINTER(ctypes.c_void_p) ),
	( "lcopy_format", ctypes.POINTER(ctypes.c_char) ),
	( "lcopy_value", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GTypeInfo, [
	( "class_size", ctypes.c_ushort ),
	( "base_init", ctypes.CFUNCTYPE(ctypes.c_void_p, ) ),
	( "base_finalize", ctypes.CFUNCTYPE(ctypes.c_void_p, ) ),
	( "class_init", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),) ),
	( "class_finalize", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),) ),
	( "class_data", ctypes.POINTER(ctypes.c_void_p) ),
	( "instance_size", ctypes.c_ushort ),
	( "n_preallocs", ctypes.c_ushort ),
	( "instance_init", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GTypeInstance),ctypes.POINTER(ctypes.c_void_p),) ),
	( "value_table", ctypes.POINTER(_GTypeValueTable) ),
])

__freeze_rpythonic_struct( _GTypeFundamentalInfo, [
	( "type_flags", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GInterfaceInfo, [
	( "interface_init", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),) ),
	( "interface_finalize", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),) ),
	( "interface_data", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( data, [
	( "v_int", ( ctypes.c_int * 2 ) ),
	( "v_uint", ( ctypes.c_uint * 2 ) ),
	( "v_long", ( ctypes.c_long * 2 ) ),
	( "v_ulong", ( ctypes.c_ulong * 2 ) ),
	( "v_int64", ( ctypes.c_longlong * 2 ) ),
	( "v_uint64", ( ctypes.c_ulonglong * 2 ) ),
	( "v_float", ( ctypes.c_float * 2 ) ),
	( "v_double", ( ctypes.c_double * 2 ) ),
	( "v_pointer", ctypes.POINTER(( ctypes.c_void_p * 2 )) ),
])

__freeze_rpythonic_struct( _GValue, [
	( "g_type", ctypes.c_uint ),
	( "data", ( data * 2 ) ),
])

__freeze_rpythonic_struct( _GParamSpecPool, [
])

__freeze_rpythonic_struct( _GParamSpec, [
	( "g_type_instance", _GTypeInstance ),
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "flags", ctypes.c_int ),
	( "value_type", ctypes.c_uint ),
	( "owner_type", ctypes.c_uint ),
	( "_nick", ctypes.POINTER(ctypes.c_char) ),
	( "_blurb", ctypes.POINTER(ctypes.c_char) ),
	( "qdata", ctypes.POINTER(_GData) ),
	( "ref_count", ctypes.c_uint ),
	( "param_id", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GParamSpecClass, [
	( "g_type_class", _GTypeClass ),
	( "value_type", ctypes.c_uint ),
	( "finalize", ctypes.c_void_p ),
	( "value_set_default", ctypes.c_void_p ),
	( "value_validate", ctypes.c_void_p ),
	( "values_cmp", ctypes.c_void_p ),
	( "dummy", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( _GParameter, [
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "value", _GValue ),
])

__freeze_rpythonic_struct( _GParamSpecTypeInfo, [
	( "instance_size", ctypes.c_ushort ),
	( "n_preallocs", ctypes.c_ushort ),
	( "instance_init", ctypes.c_void_p ),
	( "value_type", ctypes.c_uint ),
	( "finalize", ctypes.c_void_p ),
	( "value_set_default", ctypes.c_void_p ),
	( "value_validate", ctypes.c_void_p ),
	( "values_cmp", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GClosureNotifyData, [
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
	( "notify", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GClosure),) ),
])

__freeze_rpythonic_struct( _GClosure, [
	( "ref_count", ctypes.c_uint ),
	( "meta_marshal", ctypes.c_uint ),
	( "n_guards", ctypes.c_uint ),
	( "n_fnotifiers", ctypes.c_uint ),
	( "n_inotifiers", ctypes.c_uint ),
	( "in_inotify", ctypes.c_uint ),
	( "floating", ctypes.c_uint ),
	( "derivative_flag", ctypes.c_uint ),
	( "in_marshal", ctypes.c_uint ),
	( "is_invalid", ctypes.c_uint ),
	( "marshal", ctypes.c_void_p ),
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
	( "notifiers", ctypes.POINTER(_GClosureNotifyData) ),
])

__freeze_rpythonic_struct( _GCClosure, [
	( "closure", _GClosure ),
	( "callback", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GSignalInvocationHint, [
	( "signal_id", ctypes.c_uint ),
	( "detail", ctypes.c_uint ),
	( "run_type", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GSignalQuery, [
	( "signal_id", ctypes.c_uint ),
	( "signal_name", ctypes.POINTER(ctypes.c_char) ),
	( "itype", ctypes.c_uint ),
	( "signal_flags", ctypes.c_int ),
	( "return_type", ctypes.c_uint ),
	( "n_params", ctypes.c_uint ),
	( "param_types", ctypes.POINTER(ctypes.c_uint) ),
])

__freeze_rpythonic_struct( _GObject, [
	( "g_type_instance", _GTypeInstance ),
	( "ref_count", ctypes.c_uint ),
	( "qdata", ctypes.POINTER(_GData) ),
])

__freeze_rpythonic_struct( _GObjectClass, [
	( "g_type_class", _GTypeClass ),
	( "construct_properties", ctypes.POINTER(_GSList) ),
	( "constructor", ctypes.POINTER(ctypes.c_void_p) ),
	( "set_property", ctypes.c_void_p ),
	( "get_property", ctypes.c_void_p ),
	( "dispose", ctypes.c_void_p ),
	( "finalize", ctypes.c_void_p ),
	( "dispatch_properties_changed", ctypes.c_void_p ),
	( "notify", ctypes.c_void_p ),
	( "constructed", ctypes.c_void_p ),
	( "flags", ctypes.c_uint ),
	( "pdummy", ctypes.POINTER(( ctypes.c_void_p * 6 )) ),
])

__freeze_rpythonic_struct( _GObjectConstructParam, [
	( "pspec", ctypes.POINTER(_GParamSpec) ),
	( "value", ctypes.POINTER(_GValue) ),
])

__freeze_rpythonic_struct( _GBinding, [
])

__freeze_rpythonic_struct( _GEnumValue, [
	( "value", ctypes.c_int ),
	( "value_name", ctypes.POINTER(ctypes.c_char) ),
	( "value_nick", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( _GEnumClass, [
	( "g_type_class", _GTypeClass ),
	( "minimum", ctypes.c_int ),
	( "maximum", ctypes.c_int ),
	( "n_values", ctypes.c_uint ),
	( "values", ctypes.POINTER(_GEnumValue) ),
])

__freeze_rpythonic_struct( _GFlagsValue, [
	( "value", ctypes.c_uint ),
	( "value_name", ctypes.POINTER(ctypes.c_char) ),
	( "value_nick", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( _GFlagsClass, [
	( "g_type_class", _GTypeClass ),
	( "mask", ctypes.c_uint ),
	( "n_values", ctypes.c_uint ),
	( "values", ctypes.POINTER(_GFlagsValue) ),
])

__freeze_rpythonic_struct( _GParamSpecChar, [
	( "parent_instance", _GParamSpec ),
	( "minimum", ctypes.c_char ),
	( "maximum", ctypes.c_char ),
	( "default_value", ctypes.c_char ),
])

__freeze_rpythonic_struct( _GParamSpecUChar, [
	( "parent_instance", _GParamSpec ),
	( "minimum", ctypes.c_ubyte ),
	( "maximum", ctypes.c_ubyte ),
	( "default_value", ctypes.c_ubyte ),
])

__freeze_rpythonic_struct( _GParamSpecBoolean, [
	( "parent_instance", _GParamSpec ),
	( "default_value", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GParamSpecInt, [
	( "parent_instance", _GParamSpec ),
	( "minimum", ctypes.c_int ),
	( "maximum", ctypes.c_int ),
	( "default_value", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GParamSpecUInt, [
	( "parent_instance", _GParamSpec ),
	( "minimum", ctypes.c_uint ),
	( "maximum", ctypes.c_uint ),
	( "default_value", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GParamSpecLong, [
	( "parent_instance", _GParamSpec ),
	( "minimum", ctypes.c_long ),
	( "maximum", ctypes.c_long ),
	( "default_value", ctypes.c_long ),
])

__freeze_rpythonic_struct( _GParamSpecULong, [
	( "parent_instance", _GParamSpec ),
	( "minimum", ctypes.c_ulong ),
	( "maximum", ctypes.c_ulong ),
	( "default_value", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( _GParamSpecInt64, [
	( "parent_instance", _GParamSpec ),
	( "minimum", ctypes.c_longlong ),
	( "maximum", ctypes.c_longlong ),
	( "default_value", ctypes.c_longlong ),
])

__freeze_rpythonic_struct( _GParamSpecUInt64, [
	( "parent_instance", _GParamSpec ),
	( "minimum", ctypes.c_ulonglong ),
	( "maximum", ctypes.c_ulonglong ),
	( "default_value", ctypes.c_ulonglong ),
])

__freeze_rpythonic_struct( _GParamSpecUnichar, [
	( "parent_instance", _GParamSpec ),
	( "default_value", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GParamSpecEnum, [
	( "parent_instance", _GParamSpec ),
	( "enum_class", ctypes.POINTER(_GEnumClass) ),
	( "default_value", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GParamSpecFlags, [
	( "parent_instance", _GParamSpec ),
	( "flags_class", ctypes.POINTER(_GFlagsClass) ),
	( "default_value", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GParamSpecFloat, [
	( "parent_instance", _GParamSpec ),
	( "minimum", ctypes.c_float ),
	( "maximum", ctypes.c_float ),
	( "default_value", ctypes.c_float ),
	( "epsilon", ctypes.c_float ),
])

__freeze_rpythonic_struct( _GParamSpecDouble, [
	( "parent_instance", _GParamSpec ),
	( "minimum", ctypes.c_double ),
	( "maximum", ctypes.c_double ),
	( "default_value", ctypes.c_double ),
	( "epsilon", ctypes.c_double ),
])

__freeze_rpythonic_struct( _GParamSpecString, [
	( "parent_instance", _GParamSpec ),
	( "default_value", ctypes.POINTER(ctypes.c_char) ),
	( "cset_first", ctypes.POINTER(ctypes.c_char) ),
	( "cset_nth", ctypes.POINTER(ctypes.c_char) ),
	( "substitutor", ctypes.c_char ),
	( "null_fold_if_empty", ctypes.c_uint ),
	( "ensure_non_null", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GParamSpecParam, [
	( "parent_instance", _GParamSpec ),
])

__freeze_rpythonic_struct( _GParamSpecBoxed, [
	( "parent_instance", _GParamSpec ),
])

__freeze_rpythonic_struct( _GParamSpecPointer, [
	( "parent_instance", _GParamSpec ),
])

__freeze_rpythonic_struct( _GParamSpecValueArray, [
	( "parent_instance", _GParamSpec ),
	( "element_spec", ctypes.POINTER(_GParamSpec) ),
	( "fixed_n_elements", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GParamSpecObject, [
	( "parent_instance", _GParamSpec ),
])

__freeze_rpythonic_struct( _GParamSpecOverride, [
	( "parent_instance", _GParamSpec ),
	( "overridden", ctypes.POINTER(_GParamSpec) ),
])

__freeze_rpythonic_struct( _GParamSpecGType, [
	( "parent_instance", _GParamSpec ),
	( "is_a_type", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GParamSpecVariant, [
	( "parent_instance", _GParamSpec ),
	( "C_type", ctypes.POINTER(_GVariantType) ),
	( "default_value", ctypes.POINTER(_GVariant) ),
	( "padding", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( _GTypeModule, [
	( "parent_instance", _GObject ),
	( "use_count", ctypes.c_uint ),
	( "type_infos", ctypes.POINTER(_GSList) ),
	( "interface_infos", ctypes.POINTER(_GSList) ),
	( "name", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( _GTypeModuleClass, [
	( "parent_class", _GObjectClass ),
	( "load", ctypes.c_void_p ),
	( "unload", ctypes.c_void_p ),
	( "reserved1", ctypes.c_void_p ),
	( "reserved2", ctypes.c_void_p ),
	( "reserved3", ctypes.c_void_p ),
	( "reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GTypePluginClass, [
	( "base_iface", _GTypeInterface ),
	( "use_plugin", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GTypePlugin),) ),
	( "unuse_plugin", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GTypePlugin),) ),
	( "complete_type_info", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GTypePlugin),ctypes.c_uint,ctypes.POINTER(_GTypeInfo),ctypes.POINTER(_GTypeValueTable),) ),
	( "complete_interface_info", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GTypePlugin),ctypes.c_uint,ctypes.c_uint,ctypes.POINTER(_GInterfaceInfo),) ),
])

__freeze_rpythonic_struct( _GValueArray, [
	( "n_values", ctypes.c_uint ),
	( "values", ctypes.POINTER(_GValue) ),
	( "n_prealloced", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GAppInfo, [
])

__freeze_rpythonic_struct( _GAsyncResult, [
])

__freeze_rpythonic_struct( _GAsyncInitable, [
])

__freeze_rpythonic_struct( _GCharsetConverter, [
])

__freeze_rpythonic_struct( _GConverter, [
])

__freeze_rpythonic_struct( _GSimplePermission, [
])

__freeze_rpythonic_struct( _GZlibCompressor, [
])

__freeze_rpythonic_struct( _GZlibDecompressor, [
])

__freeze_rpythonic_struct( _GActionGroup, [
])

__freeze_rpythonic_struct( _GSimpleAction, [
])

__freeze_rpythonic_struct( _GAction, [
])

__freeze_rpythonic_struct( _GSettingsBackend, [
])

__freeze_rpythonic_struct( _GDrive, [
])

__freeze_rpythonic_struct( _GFile, [
])

__freeze_rpythonic_struct( _GFileInfo, [
])

__freeze_rpythonic_struct( _GFileAttributeMatcher, [
])

__freeze_rpythonic_struct( _GFileDescriptorBased, [
])

__freeze_rpythonic_struct( _GFileIcon, [
])

__freeze_rpythonic_struct( _GFilenameCompleter, [
])

__freeze_rpythonic_struct( _GIcon, [
])

__freeze_rpythonic_struct( _GInitable, [
])

__freeze_rpythonic_struct( _GIOModule, [
])

__freeze_rpythonic_struct( _GIOExtensionPoint, [
])

__freeze_rpythonic_struct( _GIOExtension, [
])

__freeze_rpythonic_struct( _GIOSchedulerJob, [
])

__freeze_rpythonic_struct( _GIOStreamAdapter, [
])

__freeze_rpythonic_struct( _GLoadableIcon, [
])

__freeze_rpythonic_struct( _GMount, [
])

__freeze_rpythonic_struct( _GPollableInputStream, [
])

__freeze_rpythonic_struct( _GPollableOutputStream, [
])

__freeze_rpythonic_struct( _GSeekable, [
])

__freeze_rpythonic_struct( _GSimpleAsyncResult, [
])

__freeze_rpythonic_struct( _GSocketConnectable, [
])

__freeze_rpythonic_struct( _GSrvTarget, [
])

__freeze_rpythonic_struct( _GThemedIcon, [
])

__freeze_rpythonic_struct( _GTlsClientConnection, [
])

__freeze_rpythonic_struct( _GTlsFileDatabase, [
])

__freeze_rpythonic_struct( _GTlsServerConnection, [
])

__freeze_rpythonic_struct( _GProxyResolver, [
])

__freeze_rpythonic_struct( _GProxy, [
])

__freeze_rpythonic_struct( _GVolume, [
])

__freeze_rpythonic_struct( _GInputVector, [
	( "buffer", ctypes.POINTER(ctypes.c_void_p) ),
	( "size", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GOutputVector, [
	( "buffer", ctypes.POINTER(ctypes.c_void_p) ),
	( "size", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GCredentials, [
])

__freeze_rpythonic_struct( _GUnixCredentialsMessage, [
])

__freeze_rpythonic_struct( _GUnixFDList, [
])

__freeze_rpythonic_struct( _GDBusMessage, [
])

__freeze_rpythonic_struct( _GDBusConnection, [
])

__freeze_rpythonic_struct( _GDBusMethodInvocation, [
])

__freeze_rpythonic_struct( _GDBusServer, [
])

__freeze_rpythonic_struct( _GDBusAuthObserver, [
])

__freeze_rpythonic_struct( _GDBusInterface, [
])

__freeze_rpythonic_struct( _GDBusObject, [
])

__freeze_rpythonic_struct( _GDBusObjectManager, [
])

__freeze_rpythonic_struct( _GAppLaunchContextPrivate, [
])

__freeze_rpythonic_struct( _GAppInfoIface, [
	( "g_iface", _GTypeInterface ),
	( "dup", ctypes.POINTER(ctypes.c_void_p) ),
	( "equal", ctypes.c_void_p ),
	( "get_id", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_name", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_description", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_executable", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_icon", ctypes.POINTER(ctypes.c_void_p) ),
	( "launch", ctypes.c_void_p ),
	( "supports_uris", ctypes.c_void_p ),
	( "supports_files", ctypes.c_void_p ),
	( "launch_uris", ctypes.c_void_p ),
	( "should_show", ctypes.c_void_p ),
	( "set_as_default_for_type", ctypes.c_void_p ),
	( "set_as_default_for_extension", ctypes.c_void_p ),
	( "add_supports_type", ctypes.c_void_p ),
	( "can_remove_supports_type", ctypes.c_void_p ),
	( "remove_supports_type", ctypes.c_void_p ),
	( "can_delete", ctypes.c_void_p ),
	( "do_delete", ctypes.c_void_p ),
	( "get_commandline", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_display_name", ctypes.POINTER(ctypes.c_void_p) ),
	( "set_as_last_used_for_type", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GAppLaunchContext, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GAppLaunchContextPrivate) ),
])

__freeze_rpythonic_struct( _GAppLaunchContextClass, [
	( "parent_class", _GObjectClass ),
	( "get_display", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_startup_notify_id", ctypes.POINTER(ctypes.c_void_p) ),
	( "launch_failed", ctypes.c_void_p ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GActionInterface, [
	( "g_iface", _GTypeInterface ),
	( "get_name", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_parameter_type", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_state_type", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_state_hint", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_enabled", ctypes.c_void_p ),
	( "get_state", ctypes.POINTER(ctypes.c_void_p) ),
	( "change_state", ctypes.c_void_p ),
	( "activate", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GActionGroupInterface, [
	( "g_iface", _GTypeInterface ),
	( "has_action", ctypes.c_void_p ),
	( "list_actions", ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)) ),
	( "get_action_enabled", ctypes.c_void_p ),
	( "get_action_parameter_type", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_action_state_type", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_action_state_hint", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_action_state", ctypes.POINTER(ctypes.c_void_p) ),
	( "change_action_state", ctypes.c_void_p ),
	( "activate_action", ctypes.c_void_p ),
	( "action_added", ctypes.c_void_p ),
	( "action_removed", ctypes.c_void_p ),
	( "action_enabled_changed", ctypes.c_void_p ),
	( "action_state_changed", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GSimpleActionGroupPrivate, [
])

__freeze_rpythonic_struct( _GSimpleActionGroup, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GSimpleActionGroupPrivate) ),
])

__freeze_rpythonic_struct( _GSimpleActionGroupClass, [
	( "parent_class", _GObjectClass ),
	( "padding", ctypes.POINTER(( ctypes.c_void_p * 12 )) ),
])

__freeze_rpythonic_struct( _GActionEntry, [
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "activate", ctypes.c_void_p ),
	( "parameter_type", ctypes.POINTER(ctypes.c_char) ),
	( "state", ctypes.POINTER(ctypes.c_char) ),
	( "change_state", ctypes.c_void_p ),
	( "padding", ( ctypes.c_uint * 3 ) ),
])

__freeze_rpythonic_struct( _GApplicationPrivate, [
])

__freeze_rpythonic_struct( _GApplication, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GApplicationPrivate) ),
])

__freeze_rpythonic_struct( _GApplicationClass, [
	( "parent_class", _GObjectClass ),
	( "startup", ctypes.c_void_p ),
	( "activate", ctypes.c_void_p ),
	( "open", ctypes.c_void_p ),
	( "command_line", ctypes.c_void_p ),
	( "local_command_line", ctypes.c_void_p ),
	( "before_emit", ctypes.c_void_p ),
	( "after_emit", ctypes.c_void_p ),
	( "add_platform_data", ctypes.c_void_p ),
	( "quit_mainloop", ctypes.c_void_p ),
	( "run_mainloop", ctypes.c_void_p ),
	( "padding", ctypes.POINTER(( ctypes.c_void_p * 12 )) ),
])

__freeze_rpythonic_struct( _GApplicationCommandLinePrivate, [
])

__freeze_rpythonic_struct( _GApplicationCommandLine, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GApplicationCommandLinePrivate) ),
])

__freeze_rpythonic_struct( _GApplicationCommandLineClass, [
	( "parent_class", _GObjectClass ),
	( "print_literal", ctypes.c_void_p ),
	( "printerr_literal", ctypes.c_void_p ),
	( "padding", ctypes.POINTER(( ctypes.c_void_p * 12 )) ),
])

__freeze_rpythonic_struct( _GInitableIface, [
	( "g_iface", _GTypeInterface ),
	( "init", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GAsyncInitableIface, [
	( "g_iface", _GTypeInterface ),
	( "init_async", ctypes.c_void_p ),
	( "init_finish", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GAsyncResultIface, [
	( "g_iface", _GTypeInterface ),
	( "get_user_data", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_source_object", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GInputStreamPrivate, [
])

__freeze_rpythonic_struct( _GInputStream, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GInputStreamPrivate) ),
])

__freeze_rpythonic_struct( _GInputStreamClass, [
	( "parent_class", _GObjectClass ),
	( "read_fn", ctypes.c_void_p ),
	( "skip", ctypes.c_void_p ),
	( "close_fn", ctypes.c_void_p ),
	( "read_async", ctypes.c_void_p ),
	( "read_finish", ctypes.c_void_p ),
	( "skip_async", ctypes.c_void_p ),
	( "skip_finish", ctypes.c_void_p ),
	( "close_async", ctypes.c_void_p ),
	( "close_finish", ctypes.c_void_p ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GFilterInputStream, [
	( "parent_instance", _GInputStream ),
	( "base_stream", ctypes.POINTER(_GInputStream) ),
])

__freeze_rpythonic_struct( _GFilterInputStreamClass, [
	( "parent_class", _GInputStreamClass ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GBufferedInputStreamPrivate, [
])

__freeze_rpythonic_struct( _GBufferedInputStream, [
	( "parent_instance", _GFilterInputStream ),
	( "priv", ctypes.POINTER(_GBufferedInputStreamPrivate) ),
])

__freeze_rpythonic_struct( _GBufferedInputStreamClass, [
	( "parent_class", _GFilterInputStreamClass ),
	( "fill", ctypes.c_void_p ),
	( "fill_async", ctypes.c_void_p ),
	( "fill_finish", ctypes.c_void_p ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GOutputStreamPrivate, [
])

__freeze_rpythonic_struct( _GOutputStream, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GOutputStreamPrivate) ),
])

__freeze_rpythonic_struct( _GOutputStreamClass, [
	( "parent_class", _GObjectClass ),
	( "write_fn", ctypes.c_void_p ),
	( "splice", ctypes.c_void_p ),
	( "flush", ctypes.c_void_p ),
	( "close_fn", ctypes.c_void_p ),
	( "write_async", ctypes.c_void_p ),
	( "write_finish", ctypes.c_void_p ),
	( "splice_async", ctypes.c_void_p ),
	( "splice_finish", ctypes.c_void_p ),
	( "flush_async", ctypes.c_void_p ),
	( "flush_finish", ctypes.c_void_p ),
	( "close_async", ctypes.c_void_p ),
	( "close_finish", ctypes.c_void_p ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
	( "_g_reserved6", ctypes.c_void_p ),
	( "_g_reserved7", ctypes.c_void_p ),
	( "_g_reserved8", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GFilterOutputStream, [
	( "parent_instance", _GOutputStream ),
	( "base_stream", ctypes.POINTER(_GOutputStream) ),
])

__freeze_rpythonic_struct( _GFilterOutputStreamClass, [
	( "parent_class", _GOutputStreamClass ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GBufferedOutputStreamPrivate, [
])

__freeze_rpythonic_struct( _GBufferedOutputStream, [
	( "parent_instance", _GFilterOutputStream ),
	( "priv", ctypes.POINTER(_GBufferedOutputStreamPrivate) ),
])

__freeze_rpythonic_struct( _GBufferedOutputStreamClass, [
	( "parent_class", _GFilterOutputStreamClass ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GCancellablePrivate, [
])

__freeze_rpythonic_struct( _GCancellable, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GCancellablePrivate) ),
])

__freeze_rpythonic_struct( _GCancellableClass, [
	( "parent_class", _GObjectClass ),
	( "cancelled", ctypes.c_void_p ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GConverterIface, [
	( "g_iface", _GTypeInterface ),
	( "convert", ctypes.c_void_p ),
	( "reset", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GCharsetConverterClass, [
	( "parent_class", _GObjectClass ),
])

__freeze_rpythonic_struct( _GConverterInputStreamPrivate, [
])

__freeze_rpythonic_struct( _GConverterInputStream, [
	( "parent_instance", _GFilterInputStream ),
	( "priv", ctypes.POINTER(_GConverterInputStreamPrivate) ),
])

__freeze_rpythonic_struct( _GConverterInputStreamClass, [
	( "parent_class", _GFilterInputStreamClass ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GConverterOutputStreamPrivate, [
])

__freeze_rpythonic_struct( _GConverterOutputStream, [
	( "parent_instance", _GFilterOutputStream ),
	( "priv", ctypes.POINTER(_GConverterOutputStreamPrivate) ),
])

__freeze_rpythonic_struct( _GConverterOutputStreamClass, [
	( "parent_class", _GFilterOutputStreamClass ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( timeval, [
	( "tv_sec", ctypes.c_int64 ),
	( "tv_usec", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( fd_set, [
	( "__fds_bits", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( _GCredentialsClass, [
])

__freeze_rpythonic_struct( _GDataInputStreamPrivate, [
])

__freeze_rpythonic_struct( _GDataInputStream, [
	( "parent_instance", _GBufferedInputStream ),
	( "priv", ctypes.POINTER(_GDataInputStreamPrivate) ),
])

__freeze_rpythonic_struct( _GDataInputStreamClass, [
	( "parent_class", _GBufferedInputStreamClass ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GDataOutputStreamPrivate, [
])

__freeze_rpythonic_struct( _GDataOutputStream, [
	( "parent_instance", _GFilterOutputStream ),
	( "priv", ctypes.POINTER(_GDataOutputStreamPrivate) ),
])

__freeze_rpythonic_struct( _GDataOutputStreamClass, [
	( "parent_class", _GFilterOutputStreamClass ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GDBusInterfaceVTable, [
	( "method_call", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GDBusConnection),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(_GVariant),ctypes.POINTER(_GDBusMethodInvocation),ctypes.POINTER(ctypes.c_void_p),) ),
	( "get_property", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_GVariant), ctypes.POINTER(_GDBusConnection),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.POINTER(_GError)),ctypes.POINTER(ctypes.c_void_p),)) ),
	( "set_property", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GDBusConnection),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(_GVariant),ctypes.POINTER(ctypes.POINTER(_GError)),ctypes.POINTER(ctypes.c_void_p),) ),
	( "padding", ctypes.POINTER(( ctypes.c_void_p * 8 )) ),
])

__freeze_rpythonic_struct( _GDBusSubtreeVTable, [
	( "C_enumerate", ctypes.POINTER(ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), ctypes.POINTER(_GDBusConnection),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),))) ),
	( "introspect", ctypes.POINTER(ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.POINTER(_GDBusInterfaceInfo)), ctypes.POINTER(_GDBusConnection),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),))) ),
	( "dispatch", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_GDBusInterfaceVTable), ctypes.POINTER(_GDBusConnection),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)),ctypes.POINTER(ctypes.c_void_p),)) ),
	( "padding", ctypes.POINTER(( ctypes.c_void_p * 8 )) ),
])

__freeze_rpythonic_struct( _GDBusErrorEntry, [
	( "error_code", ctypes.c_int ),
	( "dbus_error_name", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( _GDBusAnnotationInfo, [
	( "ref_count", ctypes.c_int ),
	( "key", ctypes.POINTER(ctypes.c_char) ),
	( "value", ctypes.POINTER(ctypes.c_char) ),
	( "annotations", ctypes.POINTER(ctypes.POINTER(_GDBusAnnotationInfo)) ),
])

__freeze_rpythonic_struct( _GDBusArgInfo, [
	( "ref_count", ctypes.c_int ),
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "signature", ctypes.POINTER(ctypes.c_char) ),
	( "annotations", ctypes.POINTER(ctypes.POINTER(_GDBusAnnotationInfo)) ),
])

__freeze_rpythonic_struct( _GDBusMethodInfo, [
	( "ref_count", ctypes.c_int ),
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "in_args", ctypes.POINTER(ctypes.POINTER(_GDBusArgInfo)) ),
	( "out_args", ctypes.POINTER(ctypes.POINTER(_GDBusArgInfo)) ),
	( "annotations", ctypes.POINTER(ctypes.POINTER(_GDBusAnnotationInfo)) ),
])

__freeze_rpythonic_struct( _GDBusSignalInfo, [
	( "ref_count", ctypes.c_int ),
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "args", ctypes.POINTER(ctypes.POINTER(_GDBusArgInfo)) ),
	( "annotations", ctypes.POINTER(ctypes.POINTER(_GDBusAnnotationInfo)) ),
])

__freeze_rpythonic_struct( _GDBusPropertyInfo, [
	( "ref_count", ctypes.c_int ),
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "signature", ctypes.POINTER(ctypes.c_char) ),
	( "flags", ctypes.c_int ),
	( "annotations", ctypes.POINTER(ctypes.POINTER(_GDBusAnnotationInfo)) ),
])

__freeze_rpythonic_struct( _GDBusInterfaceInfo, [
	( "ref_count", ctypes.c_int ),
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "methods", ctypes.POINTER(ctypes.POINTER(_GDBusMethodInfo)) ),
	( "signals", ctypes.POINTER(ctypes.POINTER(_GDBusSignalInfo)) ),
	( "properties", ctypes.POINTER(ctypes.POINTER(_GDBusPropertyInfo)) ),
	( "annotations", ctypes.POINTER(ctypes.POINTER(_GDBusAnnotationInfo)) ),
])

__freeze_rpythonic_struct( _GDBusNodeInfo, [
	( "ref_count", ctypes.c_int ),
	( "path", ctypes.POINTER(ctypes.c_char) ),
	( "interfaces", ctypes.POINTER(ctypes.POINTER(_GDBusInterfaceInfo)) ),
	( "nodes", ctypes.POINTER(ctypes.POINTER(_GDBusNodeInfo)) ),
	( "annotations", ctypes.POINTER(ctypes.POINTER(_GDBusAnnotationInfo)) ),
])

__freeze_rpythonic_struct( _GDBusProxyPrivate, [
])

__freeze_rpythonic_struct( _GDBusProxy, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GDBusProxyPrivate) ),
])

__freeze_rpythonic_struct( _GDBusProxyClass, [
	( "parent_class", _GObjectClass ),
	( "g_properties_changed", ctypes.c_void_p ),
	( "g_signal", ctypes.c_void_p ),
	( "padding", ctypes.POINTER(( ctypes.c_void_p * 32 )) ),
])

__freeze_rpythonic_struct( _GDriveIface, [
	( "g_iface", _GTypeInterface ),
	( "changed", ctypes.c_void_p ),
	( "disconnected", ctypes.c_void_p ),
	( "eject_button", ctypes.c_void_p ),
	( "get_name", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_icon", ctypes.POINTER(ctypes.c_void_p) ),
	( "has_volumes", ctypes.c_void_p ),
	( "get_volumes", ctypes.POINTER(ctypes.c_void_p) ),
	( "is_media_removable", ctypes.c_void_p ),
	( "has_media", ctypes.c_void_p ),
	( "is_media_check_automatic", ctypes.c_void_p ),
	( "can_eject", ctypes.c_void_p ),
	( "can_poll_for_media", ctypes.c_void_p ),
	( "eject", ctypes.c_void_p ),
	( "eject_finish", ctypes.c_void_p ),
	( "poll_for_media", ctypes.c_void_p ),
	( "poll_for_media_finish", ctypes.c_void_p ),
	( "get_identifier", ctypes.POINTER(ctypes.c_void_p) ),
	( "enumerate_identifiers", ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)) ),
	( "get_start_stop_type", ctypes.c_void_p ),
	( "can_start", ctypes.c_void_p ),
	( "can_start_degraded", ctypes.c_void_p ),
	( "start", ctypes.c_void_p ),
	( "start_finish", ctypes.c_void_p ),
	( "can_stop", ctypes.c_void_p ),
	( "stop", ctypes.c_void_p ),
	( "stop_finish", ctypes.c_void_p ),
	( "stop_button", ctypes.c_void_p ),
	( "eject_with_operation", ctypes.c_void_p ),
	( "eject_with_operation_finish", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GIconIface, [
	( "g_iface", _GTypeInterface ),
	( "hash", ctypes.c_void_p ),
	( "equal", ctypes.c_void_p ),
	( "to_tokens", ctypes.c_void_p ),
	( "from_tokens", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GEmblem, [
])

__freeze_rpythonic_struct( _GEmblemClass, [
])

__freeze_rpythonic_struct( _GEmblemedIconPrivate, [
])

__freeze_rpythonic_struct( _GEmblemedIcon, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GEmblemedIconPrivate) ),
])

__freeze_rpythonic_struct( _GEmblemedIconClass, [
	( "parent_class", _GObjectClass ),
])

__freeze_rpythonic_struct( _GFileAttributeInfo, [
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "C_type", ctypes.c_int ),
	( "flags", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GFileAttributeInfoList, [
	( "infos", ctypes.POINTER(_GFileAttributeInfo) ),
	( "n_infos", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GFileEnumeratorPrivate, [
])

__freeze_rpythonic_struct( _GFileEnumerator, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GFileEnumeratorPrivate) ),
])

__freeze_rpythonic_struct( _GFileEnumeratorClass, [
	( "parent_class", _GObjectClass ),
	( "next_file", ctypes.POINTER(ctypes.c_void_p) ),
	( "close_fn", ctypes.c_void_p ),
	( "next_files_async", ctypes.c_void_p ),
	( "next_files_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "close_async", ctypes.c_void_p ),
	( "close_finish", ctypes.c_void_p ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
	( "_g_reserved6", ctypes.c_void_p ),
	( "_g_reserved7", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GFileIface, [
	( "g_iface", _GTypeInterface ),
	( "dup", ctypes.POINTER(ctypes.c_void_p) ),
	( "hash", ctypes.c_void_p ),
	( "equal", ctypes.c_void_p ),
	( "is_native", ctypes.c_void_p ),
	( "has_uri_scheme", ctypes.c_void_p ),
	( "get_uri_scheme", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_basename", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_path", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_uri", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_parse_name", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_parent", ctypes.POINTER(ctypes.c_void_p) ),
	( "prefix_matches", ctypes.c_void_p ),
	( "get_relative_path", ctypes.POINTER(ctypes.c_void_p) ),
	( "resolve_relative_path", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_child_for_display_name", ctypes.POINTER(ctypes.c_void_p) ),
	( "enumerate_children", ctypes.POINTER(ctypes.c_void_p) ),
	( "enumerate_children_async", ctypes.c_void_p ),
	( "enumerate_children_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "query_info", ctypes.POINTER(ctypes.c_void_p) ),
	( "query_info_async", ctypes.c_void_p ),
	( "query_info_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "query_filesystem_info", ctypes.POINTER(ctypes.c_void_p) ),
	( "query_filesystem_info_async", ctypes.c_void_p ),
	( "query_filesystem_info_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "find_enclosing_mount", ctypes.POINTER(ctypes.c_void_p) ),
	( "find_enclosing_mount_async", ctypes.c_void_p ),
	( "find_enclosing_mount_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "set_display_name", ctypes.POINTER(ctypes.c_void_p) ),
	( "set_display_name_async", ctypes.c_void_p ),
	( "set_display_name_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "query_settable_attributes", ctypes.POINTER(ctypes.c_void_p) ),
	( "_query_settable_attributes_async", ctypes.c_void_p ),
	( "_query_settable_attributes_finish", ctypes.c_void_p ),
	( "query_writable_namespaces", ctypes.POINTER(ctypes.c_void_p) ),
	( "_query_writable_namespaces_async", ctypes.c_void_p ),
	( "_query_writable_namespaces_finish", ctypes.c_void_p ),
	( "set_attribute", ctypes.c_void_p ),
	( "set_attributes_from_info", ctypes.c_void_p ),
	( "set_attributes_async", ctypes.c_void_p ),
	( "set_attributes_finish", ctypes.c_void_p ),
	( "read_fn", ctypes.POINTER(ctypes.c_void_p) ),
	( "read_async", ctypes.c_void_p ),
	( "read_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "append_to", ctypes.POINTER(ctypes.c_void_p) ),
	( "append_to_async", ctypes.c_void_p ),
	( "append_to_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "create", ctypes.POINTER(ctypes.c_void_p) ),
	( "create_async", ctypes.c_void_p ),
	( "create_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "replace", ctypes.POINTER(ctypes.c_void_p) ),
	( "replace_async", ctypes.c_void_p ),
	( "replace_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "delete_file", ctypes.c_void_p ),
	( "_delete_file_async", ctypes.c_void_p ),
	( "_delete_file_finish", ctypes.c_void_p ),
	( "trash", ctypes.c_void_p ),
	( "_trash_async", ctypes.c_void_p ),
	( "_trash_finish", ctypes.c_void_p ),
	( "make_directory", ctypes.c_void_p ),
	( "_make_directory_async", ctypes.c_void_p ),
	( "_make_directory_finish", ctypes.c_void_p ),
	( "make_symbolic_link", ctypes.c_void_p ),
	( "_make_symbolic_link_async", ctypes.c_void_p ),
	( "_make_symbolic_link_finish", ctypes.c_void_p ),
	( "copy", ctypes.c_void_p ),
	( "copy_async", ctypes.c_void_p ),
	( "copy_finish", ctypes.c_void_p ),
	( "move", ctypes.c_void_p ),
	( "_move_async", ctypes.c_void_p ),
	( "_move_finish", ctypes.c_void_p ),
	( "mount_mountable", ctypes.c_void_p ),
	( "mount_mountable_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "unmount_mountable", ctypes.c_void_p ),
	( "unmount_mountable_finish", ctypes.c_void_p ),
	( "eject_mountable", ctypes.c_void_p ),
	( "eject_mountable_finish", ctypes.c_void_p ),
	( "mount_enclosing_volume", ctypes.c_void_p ),
	( "mount_enclosing_volume_finish", ctypes.c_void_p ),
	( "monitor_dir", ctypes.POINTER(ctypes.c_void_p) ),
	( "monitor_file", ctypes.POINTER(ctypes.c_void_p) ),
	( "open_readwrite", ctypes.POINTER(ctypes.c_void_p) ),
	( "open_readwrite_async", ctypes.c_void_p ),
	( "open_readwrite_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "create_readwrite", ctypes.POINTER(ctypes.c_void_p) ),
	( "create_readwrite_async", ctypes.c_void_p ),
	( "create_readwrite_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "replace_readwrite", ctypes.POINTER(ctypes.c_void_p) ),
	( "replace_readwrite_async", ctypes.c_void_p ),
	( "replace_readwrite_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "start_mountable", ctypes.c_void_p ),
	( "start_mountable_finish", ctypes.c_void_p ),
	( "stop_mountable", ctypes.c_void_p ),
	( "stop_mountable_finish", ctypes.c_void_p ),
	( "supports_thread_contexts", ctypes.c_int ),
	( "unmount_mountable_with_operation", ctypes.c_void_p ),
	( "unmount_mountable_with_operation_finish", ctypes.c_void_p ),
	( "eject_mountable_with_operation", ctypes.c_void_p ),
	( "eject_mountable_with_operation_finish", ctypes.c_void_p ),
	( "poll_mountable", ctypes.c_void_p ),
	( "poll_mountable_finish", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GFileIconClass, [
])

__freeze_rpythonic_struct( _GFileInfoClass, [
])

__freeze_rpythonic_struct( _GFileInputStreamPrivate, [
])

__freeze_rpythonic_struct( _GFileInputStream, [
	( "parent_instance", _GInputStream ),
	( "priv", ctypes.POINTER(_GFileInputStreamPrivate) ),
])

__freeze_rpythonic_struct( _GFileInputStreamClass, [
	( "parent_class", _GInputStreamClass ),
	( "tell", ctypes.c_void_p ),
	( "can_seek", ctypes.c_void_p ),
	( "seek", ctypes.c_void_p ),
	( "query_info", ctypes.POINTER(ctypes.c_void_p) ),
	( "query_info_async", ctypes.c_void_p ),
	( "query_info_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GIOStreamPrivate, [
])

__freeze_rpythonic_struct( _GIOStream, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GIOStreamPrivate) ),
])

__freeze_rpythonic_struct( _GIOStreamClass, [
	( "parent_class", _GObjectClass ),
	( "get_input_stream", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_output_stream", ctypes.POINTER(ctypes.c_void_p) ),
	( "close_fn", ctypes.c_void_p ),
	( "close_async", ctypes.c_void_p ),
	( "close_finish", ctypes.c_void_p ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
	( "_g_reserved6", ctypes.c_void_p ),
	( "_g_reserved7", ctypes.c_void_p ),
	( "_g_reserved8", ctypes.c_void_p ),
	( "_g_reserved9", ctypes.c_void_p ),
	( "_g_reserved10", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GFileIOStreamPrivate, [
])

__freeze_rpythonic_struct( _GFileIOStream, [
	( "parent_instance", _GIOStream ),
	( "priv", ctypes.POINTER(_GFileIOStreamPrivate) ),
])

__freeze_rpythonic_struct( _GFileIOStreamClass, [
	( "parent_class", _GIOStreamClass ),
	( "tell", ctypes.c_void_p ),
	( "can_seek", ctypes.c_void_p ),
	( "seek", ctypes.c_void_p ),
	( "can_truncate", ctypes.c_void_p ),
	( "truncate_fn", ctypes.c_void_p ),
	( "query_info", ctypes.POINTER(ctypes.c_void_p) ),
	( "query_info_async", ctypes.c_void_p ),
	( "query_info_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_etag", ctypes.POINTER(ctypes.c_void_p) ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GFileMonitorPrivate, [
])

__freeze_rpythonic_struct( _GFileMonitor, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GFileMonitorPrivate) ),
])

__freeze_rpythonic_struct( _GFileMonitorClass, [
	( "parent_class", _GObjectClass ),
	( "changed", ctypes.c_void_p ),
	( "cancel", ctypes.c_void_p ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GFilenameCompleterClass, [
	( "parent_class", _GObjectClass ),
	( "got_completion_data", ctypes.c_void_p ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GFileOutputStreamPrivate, [
])

__freeze_rpythonic_struct( _GFileOutputStream, [
	( "parent_instance", _GOutputStream ),
	( "priv", ctypes.POINTER(_GFileOutputStreamPrivate) ),
])

__freeze_rpythonic_struct( _GFileOutputStreamClass, [
	( "parent_class", _GOutputStreamClass ),
	( "tell", ctypes.c_void_p ),
	( "can_seek", ctypes.c_void_p ),
	( "seek", ctypes.c_void_p ),
	( "can_truncate", ctypes.c_void_p ),
	( "truncate_fn", ctypes.c_void_p ),
	( "query_info", ctypes.POINTER(ctypes.c_void_p) ),
	( "query_info_async", ctypes.c_void_p ),
	( "query_info_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_etag", ctypes.POINTER(ctypes.c_void_p) ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GInetAddressPrivate, [
])

__freeze_rpythonic_struct( _GInetAddress, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GInetAddressPrivate) ),
])

__freeze_rpythonic_struct( _GInetAddressClass, [
	( "parent_class", _GObjectClass ),
	( "to_string", ctypes.POINTER(ctypes.c_void_p) ),
	( "to_bytes", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GSocketAddress, [
	( "parent_instance", _GObject ),
])

__freeze_rpythonic_struct( _GSocketAddressClass, [
	( "parent_class", _GObjectClass ),
	( "get_family", ctypes.c_void_p ),
	( "get_native_size", ctypes.c_void_p ),
	( "to_native", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GInetSocketAddressPrivate, [
])

__freeze_rpythonic_struct( _GInetSocketAddress, [
	( "parent_instance", _GSocketAddress ),
	( "priv", ctypes.POINTER(_GInetSocketAddressPrivate) ),
])

__freeze_rpythonic_struct( _GInetSocketAddressClass, [
	( "parent_class", _GSocketAddressClass ),
])

__freeze_rpythonic_struct( _GModule, [
])

__freeze_rpythonic_struct( _GIOModuleScope, [
])

__freeze_rpythonic_struct( _GIOModuleClass, [
])

__freeze_rpythonic_struct( _GLoadableIconIface, [
	( "g_iface", _GTypeInterface ),
	( "load", ctypes.POINTER(ctypes.c_void_p) ),
	( "load_async", ctypes.c_void_p ),
	( "load_finish", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GMemoryInputStreamPrivate, [
])

__freeze_rpythonic_struct( _GMemoryInputStream, [
	( "parent_instance", _GInputStream ),
	( "priv", ctypes.POINTER(_GMemoryInputStreamPrivate) ),
])

__freeze_rpythonic_struct( _GMemoryInputStreamClass, [
	( "parent_class", _GInputStreamClass ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GMemoryOutputStreamPrivate, [
])

__freeze_rpythonic_struct( _GMemoryOutputStream, [
	( "parent_instance", _GOutputStream ),
	( "priv", ctypes.POINTER(_GMemoryOutputStreamPrivate) ),
])

__freeze_rpythonic_struct( _GMemoryOutputStreamClass, [
	( "parent_class", _GOutputStreamClass ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GMountIface, [
	( "g_iface", _GTypeInterface ),
	( "changed", ctypes.c_void_p ),
	( "unmounted", ctypes.c_void_p ),
	( "get_root", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_name", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_icon", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_uuid", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_volume", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_drive", ctypes.POINTER(ctypes.c_void_p) ),
	( "can_unmount", ctypes.c_void_p ),
	( "can_eject", ctypes.c_void_p ),
	( "unmount", ctypes.c_void_p ),
	( "unmount_finish", ctypes.c_void_p ),
	( "eject", ctypes.c_void_p ),
	( "eject_finish", ctypes.c_void_p ),
	( "remount", ctypes.c_void_p ),
	( "remount_finish", ctypes.c_void_p ),
	( "guess_content_type", ctypes.c_void_p ),
	( "guess_content_type_finish", ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)) ),
	( "guess_content_type_sync", ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)) ),
	( "pre_unmount", ctypes.c_void_p ),
	( "unmount_with_operation", ctypes.c_void_p ),
	( "unmount_with_operation_finish", ctypes.c_void_p ),
	( "eject_with_operation", ctypes.c_void_p ),
	( "eject_with_operation_finish", ctypes.c_void_p ),
	( "get_default_location", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GMountOperationPrivate, [
])

__freeze_rpythonic_struct( _GMountOperation, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GMountOperationPrivate) ),
])

__freeze_rpythonic_struct( _GMountOperationClass, [
	( "parent_class", _GObjectClass ),
	( "ask_password", ctypes.c_void_p ),
	( "ask_question", ctypes.c_void_p ),
	( "reply", ctypes.c_void_p ),
	( "aborted", ctypes.c_void_p ),
	( "show_processes", ctypes.c_void_p ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
	( "_g_reserved6", ctypes.c_void_p ),
	( "_g_reserved7", ctypes.c_void_p ),
	( "_g_reserved8", ctypes.c_void_p ),
	( "_g_reserved9", ctypes.c_void_p ),
	( "_g_reserved10", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GVolumeMonitor, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GVolumeMonitorClass, [
	( "parent_class", _GObjectClass ),
	( "volume_added", ctypes.c_void_p ),
	( "volume_removed", ctypes.c_void_p ),
	( "volume_changed", ctypes.c_void_p ),
	( "mount_added", ctypes.c_void_p ),
	( "mount_removed", ctypes.c_void_p ),
	( "mount_pre_unmount", ctypes.c_void_p ),
	( "mount_changed", ctypes.c_void_p ),
	( "drive_connected", ctypes.c_void_p ),
	( "drive_disconnected", ctypes.c_void_p ),
	( "drive_changed", ctypes.c_void_p ),
	( "is_supported", ctypes.c_void_p ),
	( "get_connected_drives", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_volumes", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_mounts", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_volume_for_uuid", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_mount_for_uuid", ctypes.POINTER(ctypes.c_void_p) ),
	( "adopt_orphan_mount", ctypes.POINTER(ctypes.c_void_p) ),
	( "drive_eject_button", ctypes.c_void_p ),
	( "drive_stop_button", ctypes.c_void_p ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
	( "_g_reserved6", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GNativeVolumeMonitor, [
	( "parent_instance", _GVolumeMonitor ),
])

__freeze_rpythonic_struct( _GNativeVolumeMonitorClass, [
	( "parent_class", _GVolumeMonitorClass ),
	( "get_mount_for_mount_path", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GNetworkAddressPrivate, [
])

__freeze_rpythonic_struct( _GNetworkAddress, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GNetworkAddressPrivate) ),
])

__freeze_rpythonic_struct( _GNetworkAddressClass, [
	( "parent_class", _GObjectClass ),
])

__freeze_rpythonic_struct( _GNetworkServicePrivate, [
])

__freeze_rpythonic_struct( _GNetworkService, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GNetworkServicePrivate) ),
])

__freeze_rpythonic_struct( _GNetworkServiceClass, [
	( "parent_class", _GObjectClass ),
])

__freeze_rpythonic_struct( _GPermissionPrivate, [
])

__freeze_rpythonic_struct( _GPermission, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GPermissionPrivate) ),
])

__freeze_rpythonic_struct( _GPermissionClass, [
	( "parent_class", _GObjectClass ),
	( "acquire", ctypes.c_void_p ),
	( "acquire_async", ctypes.c_void_p ),
	( "acquire_finish", ctypes.c_void_p ),
	( "release", ctypes.c_void_p ),
	( "release_async", ctypes.c_void_p ),
	( "release_finish", ctypes.c_void_p ),
	( "reserved", ctypes.POINTER(( ctypes.c_void_p * 16 )) ),
])

__freeze_rpythonic_struct( _GPollableInputStreamInterface, [
	( "g_iface", _GTypeInterface ),
	( "can_poll", ctypes.c_void_p ),
	( "is_readable", ctypes.c_void_p ),
	( "create_source", ctypes.POINTER(ctypes.c_void_p) ),
	( "read_nonblocking", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GPollableOutputStreamInterface, [
	( "g_iface", _GTypeInterface ),
	( "can_poll", ctypes.c_void_p ),
	( "is_writable", ctypes.c_void_p ),
	( "create_source", ctypes.POINTER(ctypes.c_void_p) ),
	( "write_nonblocking", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GProxyInterface, [
	( "g_iface", _GTypeInterface ),
	( "connect", ctypes.POINTER(ctypes.c_void_p) ),
	( "connect_async", ctypes.c_void_p ),
	( "connect_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "supports_hostname", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GProxyAddressPrivate, [
])

__freeze_rpythonic_struct( _GProxyAddress, [
	( "parent_instance", _GInetSocketAddress ),
	( "priv", ctypes.POINTER(_GProxyAddressPrivate) ),
])

__freeze_rpythonic_struct( _GProxyAddressClass, [
	( "parent_class", _GInetSocketAddressClass ),
])

__freeze_rpythonic_struct( _GSocketAddressEnumerator, [
	( "parent_instance", _GObject ),
])

__freeze_rpythonic_struct( _GSocketAddressEnumeratorClass, [
	( "parent_class", _GObjectClass ),
	( "next", ctypes.POINTER(ctypes.c_void_p) ),
	( "next_async", ctypes.c_void_p ),
	( "next_finish", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GProxyAddressEnumeratorPrivate, [
])

__freeze_rpythonic_struct( _GProxyAddressEnumerator, [
	( "parent_instance", _GSocketAddressEnumerator ),
	( "priv", ctypes.POINTER(_GProxyAddressEnumeratorPrivate) ),
])

__freeze_rpythonic_struct( _GProxyAddressEnumeratorClass, [
	( "parent_class", _GSocketAddressEnumeratorClass ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
	( "_g_reserved6", ctypes.c_void_p ),
	( "_g_reserved7", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GProxyResolverInterface, [
	( "g_iface", _GTypeInterface ),
	( "is_supported", ctypes.c_void_p ),
	( "lookup", ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)) ),
	( "lookup_async", ctypes.c_void_p ),
	( "lookup_finish", ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)) ),
])

__freeze_rpythonic_struct( _GResolverPrivate, [
])

__freeze_rpythonic_struct( _GResolver, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GResolverPrivate) ),
])

__freeze_rpythonic_struct( _GResolverClass, [
	( "parent_class", _GObjectClass ),
	( "reload", ctypes.c_void_p ),
	( "lookup_by_name", ctypes.POINTER(ctypes.c_void_p) ),
	( "lookup_by_name_async", ctypes.c_void_p ),
	( "lookup_by_name_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "lookup_by_address", ctypes.POINTER(ctypes.c_void_p) ),
	( "lookup_by_address_async", ctypes.c_void_p ),
	( "lookup_by_address_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "lookup_service", ctypes.POINTER(ctypes.c_void_p) ),
	( "lookup_service_async", ctypes.c_void_p ),
	( "lookup_service_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
	( "_g_reserved6", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GSeekableIface, [
	( "g_iface", _GTypeInterface ),
	( "tell", ctypes.c_void_p ),
	( "can_seek", ctypes.c_void_p ),
	( "seek", ctypes.c_void_p ),
	( "can_truncate", ctypes.c_void_p ),
	( "truncate_fn", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GSettingsPrivate, [
])

__freeze_rpythonic_struct( _GSettingsClass, [
	( "parent_class", _GObjectClass ),
	( "writable_changed", ctypes.c_void_p ),
	( "changed", ctypes.c_void_p ),
	( "writable_change_event", ctypes.c_void_p ),
	( "change_event", ctypes.c_void_p ),
	( "padding", ctypes.POINTER(( ctypes.c_void_p * 20 )) ),
])

__freeze_rpythonic_struct( _GSettings, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GSettingsPrivate) ),
])

__freeze_rpythonic_struct( _GSimpleAsyncResultClass, [
])

__freeze_rpythonic_struct( _GSocketClientPrivate, [
])

__freeze_rpythonic_struct( _GSocketClientClass, [
	( "parent_class", _GObjectClass ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GSocketClient, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GSocketClientPrivate) ),
])

__freeze_rpythonic_struct( _GSocketConnectableIface, [
	( "g_iface", _GTypeInterface ),
	( "C_enumerate", ctypes.POINTER(ctypes.c_void_p) ),
	( "proxy_enumerate", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GSocketPrivate, [
])

__freeze_rpythonic_struct( _GSocketClass, [
	( "parent_class", _GObjectClass ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
	( "_g_reserved6", ctypes.c_void_p ),
	( "_g_reserved7", ctypes.c_void_p ),
	( "_g_reserved8", ctypes.c_void_p ),
	( "_g_reserved9", ctypes.c_void_p ),
	( "_g_reserved10", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GSocket, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GSocketPrivate) ),
])

__freeze_rpythonic_struct( _GSocketConnectionPrivate, [
])

__freeze_rpythonic_struct( _GSocketConnectionClass, [
	( "parent_class", _GIOStreamClass ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
	( "_g_reserved6", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GSocketConnection, [
	( "parent_instance", _GIOStream ),
	( "priv", ctypes.POINTER(_GSocketConnectionPrivate) ),
])

__freeze_rpythonic_struct( _GSocketControlMessagePrivate, [
])

__freeze_rpythonic_struct( _GSocketControlMessageClass, [
	( "parent_class", _GObjectClass ),
	( "get_size", ctypes.c_void_p ),
	( "get_level", ctypes.c_void_p ),
	( "get_type", ctypes.c_void_p ),
	( "serialize", ctypes.c_void_p ),
	( "deserialize", ctypes.POINTER(ctypes.c_void_p) ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GSocketControlMessage, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GSocketControlMessagePrivate) ),
])

__freeze_rpythonic_struct( _GSocketListenerPrivate, [
])

__freeze_rpythonic_struct( _GSocketListenerClass, [
	( "parent_class", _GObjectClass ),
	( "changed", ctypes.c_void_p ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
	( "_g_reserved6", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GSocketListener, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GSocketListenerPrivate) ),
])

__freeze_rpythonic_struct( _GSocketServicePrivate, [
])

__freeze_rpythonic_struct( _GSocketServiceClass, [
	( "parent_class", _GSocketListenerClass ),
	( "incoming", ctypes.c_void_p ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
	( "_g_reserved6", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GSocketService, [
	( "parent_instance", _GSocketListener ),
	( "priv", ctypes.POINTER(_GSocketServicePrivate) ),
])

__freeze_rpythonic_struct( _GTcpConnectionPrivate, [
])

__freeze_rpythonic_struct( _GTcpConnectionClass, [
	( "parent_class", _GSocketConnectionClass ),
])

__freeze_rpythonic_struct( _GTcpConnection, [
	( "parent_instance", _GSocketConnection ),
	( "priv", ctypes.POINTER(_GTcpConnectionPrivate) ),
])

__freeze_rpythonic_struct( _GTcpWrapperConnectionPrivate, [
])

__freeze_rpythonic_struct( _GTcpWrapperConnectionClass, [
	( "parent_class", _GTcpConnectionClass ),
])

__freeze_rpythonic_struct( _GTcpWrapperConnection, [
	( "parent_instance", _GTcpConnection ),
	( "priv", ctypes.POINTER(_GTcpWrapperConnectionPrivate) ),
])

__freeze_rpythonic_struct( _GThemedIconClass, [
])

__freeze_rpythonic_struct( _GThreadedSocketServicePrivate, [
])

__freeze_rpythonic_struct( _GThreadedSocketServiceClass, [
	( "parent_class", _GSocketServiceClass ),
	( "run", ctypes.c_void_p ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GThreadedSocketService, [
	( "parent_instance", _GSocketService ),
	( "priv", ctypes.POINTER(_GThreadedSocketServicePrivate) ),
])

__freeze_rpythonic_struct( _GTlsBackend, [
])

__freeze_rpythonic_struct( _GTlsBackendInterface, [
	( "g_iface", _GTypeInterface ),
	( "supports_tls", ctypes.c_void_p ),
	( "get_certificate_type", ctypes.c_void_p ),
	( "get_client_connection_type", ctypes.c_void_p ),
	( "get_server_connection_type", ctypes.c_void_p ),
	( "get_file_database_type", ctypes.c_void_p ),
	( "get_default_database", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GTlsCertificatePrivate, [
])

__freeze_rpythonic_struct( _GTlsCertificate, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GTlsCertificatePrivate) ),
])

__freeze_rpythonic_struct( _GTlsCertificateClass, [
	( "parent_class", _GObjectClass ),
	( "verify", ctypes.c_void_p ),
	( "padding", ctypes.POINTER(( ctypes.c_void_p * 8 )) ),
])

__freeze_rpythonic_struct( _GTlsConnectionPrivate, [
])

__freeze_rpythonic_struct( _GTlsConnection, [
	( "parent_instance", _GIOStream ),
	( "priv", ctypes.POINTER(_GTlsConnectionPrivate) ),
])

__freeze_rpythonic_struct( _GTlsConnectionClass, [
	( "parent_class", _GIOStreamClass ),
	( "accept_certificate", ctypes.c_void_p ),
	( "handshake", ctypes.c_void_p ),
	( "handshake_async", ctypes.c_void_p ),
	( "handshake_finish", ctypes.c_void_p ),
	( "padding", ctypes.POINTER(( ctypes.c_void_p * 8 )) ),
])

__freeze_rpythonic_struct( _GTlsClientConnectionInterface, [
	( "g_iface", _GTypeInterface ),
])

__freeze_rpythonic_struct( _GTlsDatabasePrivate, [
])

__freeze_rpythonic_struct( _GTlsDatabase, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GTlsDatabasePrivate) ),
])

__freeze_rpythonic_struct( _GTlsDatabaseClass, [
	( "parent_class", _GObjectClass ),
	( "verify_chain", ctypes.c_void_p ),
	( "verify_chain_async", ctypes.c_void_p ),
	( "verify_chain_finish", ctypes.c_void_p ),
	( "create_certificate_handle", ctypes.POINTER(ctypes.c_void_p) ),
	( "lookup_certificate_for_handle", ctypes.POINTER(ctypes.c_void_p) ),
	( "lookup_certificate_for_handle_async", ctypes.c_void_p ),
	( "lookup_certificate_for_handle_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "lookup_certificate_issuer", ctypes.POINTER(ctypes.c_void_p) ),
	( "lookup_certificate_issuer_async", ctypes.c_void_p ),
	( "lookup_certificate_issuer_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "lookup_certificates_issued_by", ctypes.POINTER(ctypes.c_void_p) ),
	( "lookup_certificates_issued_by_async", ctypes.c_void_p ),
	( "lookup_certificates_issued_by_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "padding", ctypes.POINTER(( ctypes.c_void_p * 16 )) ),
])

__freeze_rpythonic_struct( _GTlsFileDatabaseInterface, [
	( "g_iface", _GTypeInterface ),
	( "padding", ctypes.POINTER(( ctypes.c_void_p * 8 )) ),
])

__freeze_rpythonic_struct( _GTlsInteractionPrivate, [
])

__freeze_rpythonic_struct( _GTlsInteraction, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GTlsInteractionPrivate) ),
])

__freeze_rpythonic_struct( _GTlsInteractionClass, [
	( "parent_class", _GObjectClass ),
	( "ask_password", ctypes.c_void_p ),
	( "ask_password_async", ctypes.c_void_p ),
	( "ask_password_finish", ctypes.c_void_p ),
	( "padding", ctypes.POINTER(( ctypes.c_void_p * 24 )) ),
])

__freeze_rpythonic_struct( _GTlsServerConnectionInterface, [
	( "g_iface", _GTypeInterface ),
])

__freeze_rpythonic_struct( _GTlsPasswordPrivate, [
])

__freeze_rpythonic_struct( _GTlsPassword, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GTlsPasswordPrivate) ),
])

__freeze_rpythonic_struct( _GTlsPasswordClass, [
	( "parent_class", _GObjectClass ),
	( "get_value", ctypes.POINTER(ctypes.c_void_p) ),
	( "set_value", ctypes.c_void_p ),
	( "get_default_warning", ctypes.POINTER(ctypes.c_void_p) ),
	( "padding", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( _GVfs, [
	( "parent_instance", _GObject ),
])

__freeze_rpythonic_struct( _GVfsClass, [
	( "parent_class", _GObjectClass ),
	( "is_active", ctypes.c_void_p ),
	( "get_file_for_path", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_file_for_uri", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_supported_uri_schemes", ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)) ),
	( "parse_name", ctypes.POINTER(ctypes.c_void_p) ),
	( "local_file_add_info", ctypes.c_void_p ),
	( "add_writable_namespaces", ctypes.c_void_p ),
	( "local_file_set_attributes", ctypes.c_void_p ),
	( "local_file_removed", ctypes.c_void_p ),
	( "local_file_moved", ctypes.c_void_p ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
	( "_g_reserved6", ctypes.c_void_p ),
	( "_g_reserved7", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GVolumeIface, [
	( "g_iface", _GTypeInterface ),
	( "changed", ctypes.c_void_p ),
	( "removed", ctypes.c_void_p ),
	( "get_name", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_icon", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_uuid", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_drive", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_mount", ctypes.POINTER(ctypes.c_void_p) ),
	( "can_mount", ctypes.c_void_p ),
	( "can_eject", ctypes.c_void_p ),
	( "mount_fn", ctypes.c_void_p ),
	( "mount_finish", ctypes.c_void_p ),
	( "eject", ctypes.c_void_p ),
	( "eject_finish", ctypes.c_void_p ),
	( "get_identifier", ctypes.POINTER(ctypes.c_void_p) ),
	( "enumerate_identifiers", ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)) ),
	( "should_automount", ctypes.c_void_p ),
	( "get_activation_root", ctypes.POINTER(ctypes.c_void_p) ),
	( "eject_with_operation", ctypes.c_void_p ),
	( "eject_with_operation_finish", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GZlibCompressorClass, [
	( "parent_class", _GObjectClass ),
])

__freeze_rpythonic_struct( _GZlibDecompressorClass, [
	( "parent_class", _GObjectClass ),
])

__freeze_rpythonic_struct( _GDBusInterfaceIface, [
	( "parent_iface", _GTypeInterface ),
	( "get_info", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_object", ctypes.POINTER(ctypes.c_void_p) ),
	( "set_object", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GDBusInterfaceSkeletonPrivate, [
])

__freeze_rpythonic_struct( _GDBusInterfaceSkeleton, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GDBusInterfaceSkeletonPrivate) ),
])

__freeze_rpythonic_struct( _GDBusInterfaceSkeletonClass, [
	( "parent_class", _GObjectClass ),
	( "get_info", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_vtable", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_properties", ctypes.POINTER(ctypes.c_void_p) ),
	( "flush", ctypes.c_void_p ),
	( "vfunc_padding", ctypes.POINTER(( ctypes.c_void_p * 8 )) ),
	( "g_authorize_method", ctypes.c_void_p ),
	( "signal_padding", ctypes.POINTER(( ctypes.c_void_p * 8 )) ),
])

__freeze_rpythonic_struct( _GDBusObjectIface, [
	( "parent_iface", _GTypeInterface ),
	( "get_object_path", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_interfaces", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_interface", ctypes.POINTER(ctypes.c_void_p) ),
	( "interface_added", ctypes.c_void_p ),
	( "interface_removed", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GDBusObjectSkeletonPrivate, [
])

__freeze_rpythonic_struct( _GDBusObjectSkeleton, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GDBusObjectSkeletonPrivate) ),
])

__freeze_rpythonic_struct( _GDBusObjectSkeletonClass, [
	( "parent_class", _GObjectClass ),
	( "authorize_method", ctypes.c_void_p ),
	( "padding", ctypes.POINTER(( ctypes.c_void_p * 8 )) ),
])

__freeze_rpythonic_struct( _GDBusObjectProxyPrivate, [
])

__freeze_rpythonic_struct( _GDBusObjectProxy, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GDBusObjectProxyPrivate) ),
])

__freeze_rpythonic_struct( _GDBusObjectProxyClass, [
	( "parent_class", _GObjectClass ),
	( "padding", ctypes.POINTER(( ctypes.c_void_p * 8 )) ),
])

__freeze_rpythonic_struct( _GDBusObjectManagerIface, [
	( "parent_iface", _GTypeInterface ),
	( "get_object_path", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_objects", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_object", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_interface", ctypes.POINTER(ctypes.c_void_p) ),
	( "object_added", ctypes.c_void_p ),
	( "object_removed", ctypes.c_void_p ),
	( "interface_added", ctypes.c_void_p ),
	( "interface_removed", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GDBusObjectManagerClientPrivate, [
])

__freeze_rpythonic_struct( _GDBusObjectManagerClient, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GDBusObjectManagerClientPrivate) ),
])

__freeze_rpythonic_struct( _GDBusObjectManagerClientClass, [
	( "parent_class", _GObjectClass ),
	( "interface_proxy_signal", ctypes.c_void_p ),
	( "interface_proxy_properties_changed", ctypes.c_void_p ),
	( "padding", ctypes.POINTER(( ctypes.c_void_p * 8 )) ),
])

__freeze_rpythonic_struct( _GDBusObjectManagerServerPrivate, [
])

__freeze_rpythonic_struct( _GDBusObjectManagerServer, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GDBusObjectManagerServerPrivate) ),
])

__freeze_rpythonic_struct( _GDBusObjectManagerServerClass, [
	( "parent_class", _GObjectClass ),
	( "padding", ctypes.POINTER(( ctypes.c_void_p * 8 )) ),
])

__freeze_rpythonic_struct( _PangoCoverage, [
])

__freeze_rpythonic_struct( _PangoEngineLang, [
])

__freeze_rpythonic_struct( _PangoEngineShape, [
])

__freeze_rpythonic_struct( _PangoFont, [
])

__freeze_rpythonic_struct( _PangoFontMap, [
])

__freeze_rpythonic_struct( _PangoRectangle, [
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
	( "width", ctypes.c_int ),
	( "height", ctypes.c_int ),
])

__freeze_rpythonic_struct( _PangoMatrix, [
	( "xx", ctypes.c_double ),
	( "xy", ctypes.c_double ),
	( "yx", ctypes.c_double ),
	( "yy", ctypes.c_double ),
	( "x0", ctypes.c_double ),
	( "y0", ctypes.c_double ),
])

__freeze_rpythonic_struct( _PangoScriptIter, [
])

__freeze_rpythonic_struct( _PangoLanguage, [
])

__freeze_rpythonic_struct( _PangoFontDescription, [
])

__freeze_rpythonic_struct( _PangoFontMetrics, [
])

__freeze_rpythonic_struct( _PangoFontFamily, [
])

__freeze_rpythonic_struct( _PangoFontFace, [
])

__freeze_rpythonic_struct( _PangoColor, [
	( "red", ctypes.c_ushort ),
	( "green", ctypes.c_ushort ),
	( "blue", ctypes.c_ushort ),
])

__freeze_rpythonic_struct( _PangoAttrList, [
])

__freeze_rpythonic_struct( _PangoAttrIterator, [
])

__freeze_rpythonic_struct( _PangoAttrClass, [
	( "C_type", ctypes.c_int ),
	( "copy", ctypes.POINTER(ctypes.c_void_p) ),
	( "destroy", ctypes.c_void_p ),
	( "equal", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _PangoAttribute, [
	( "klass", ctypes.POINTER(_PangoAttrClass) ),
	( "start_index", ctypes.c_uint ),
	( "end_index", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _PangoAttrString, [
	( "attr", _PangoAttribute ),
	( "value", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( _PangoAttrLanguage, [
	( "attr", _PangoAttribute ),
	( "value", ctypes.POINTER(_PangoLanguage) ),
])

__freeze_rpythonic_struct( _PangoAttrInt, [
	( "attr", _PangoAttribute ),
	( "value", ctypes.c_int ),
])

__freeze_rpythonic_struct( _PangoAttrFloat, [
	( "attr", _PangoAttribute ),
	( "value", ctypes.c_double ),
])

__freeze_rpythonic_struct( _PangoAttrColor, [
	( "attr", _PangoAttribute ),
	( "color", _PangoColor ),
])

__freeze_rpythonic_struct( _PangoAttrSize, [
	( "attr", _PangoAttribute ),
	( "size", ctypes.c_int ),
	( "absolute", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _PangoAttrShape, [
	( "attr", _PangoAttribute ),
	( "ink_rect", _PangoRectangle ),
	( "logical_rect", _PangoRectangle ),
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
	( "copy_func", ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), ) ),
	( "destroy_func", ctypes.CFUNCTYPE(ctypes.c_void_p, ) ),
])

__freeze_rpythonic_struct( _PangoAttrFontDesc, [
	( "attr", _PangoAttribute ),
	( "desc", ctypes.POINTER(_PangoFontDescription) ),
])

__freeze_rpythonic_struct( _PangoAnalysis, [
	( "shape_engine", ctypes.POINTER(_PangoEngineShape) ),
	( "lang_engine", ctypes.POINTER(_PangoEngineLang) ),
	( "font", ctypes.POINTER(_PangoFont) ),
	( "level", ctypes.c_ubyte ),
	( "gravity", ctypes.c_ubyte ),
	( "flags", ctypes.c_ubyte ),
	( "script", ctypes.c_ubyte ),
	( "language", ctypes.POINTER(_PangoLanguage) ),
	( "extra_attrs", ctypes.POINTER(_GSList) ),
])

__freeze_rpythonic_struct( _PangoItem, [
	( "offset", ctypes.c_int ),
	( "length", ctypes.c_int ),
	( "num_chars", ctypes.c_int ),
	( "analysis", _PangoAnalysis ),
])

__freeze_rpythonic_struct( _PangoLogAttr, [
	( "is_line_break", ctypes.c_uint ),
	( "is_mandatory_break", ctypes.c_uint ),
	( "is_char_break", ctypes.c_uint ),
	( "is_white", ctypes.c_uint ),
	( "is_cursor_position", ctypes.c_uint ),
	( "is_word_start", ctypes.c_uint ),
	( "is_word_end", ctypes.c_uint ),
	( "is_sentence_boundary", ctypes.c_uint ),
	( "is_sentence_start", ctypes.c_uint ),
	( "is_sentence_end", ctypes.c_uint ),
	( "backspace_deletes_character", ctypes.c_uint ),
	( "is_expandable_space", ctypes.c_uint ),
	( "is_word_boundary", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _PangoFontset, [
])

__freeze_rpythonic_struct( _PangoContext, [
])

__freeze_rpythonic_struct( _PangoContextClass, [
])

__freeze_rpythonic_struct( _PangoGlyphGeometry, [
	( "width", ctypes.c_int ),
	( "x_offset", ctypes.c_int ),
	( "y_offset", ctypes.c_int ),
])

__freeze_rpythonic_struct( _PangoGlyphVisAttr, [
	( "is_cluster_start", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _PangoGlyphInfo, [
	( "glyph", ctypes.c_uint ),
	( "geometry", _PangoGlyphGeometry ),
	( "attr", _PangoGlyphVisAttr ),
])

__freeze_rpythonic_struct( _PangoGlyphString, [
	( "num_glyphs", ctypes.c_int ),
	( "glyphs", ctypes.POINTER(_PangoGlyphInfo) ),
	( "log_clusters", ctypes.POINTER(ctypes.c_int) ),
	( "space", ctypes.c_int ),
])

__freeze_rpythonic_struct( _PangoGlyphItem, [
	( "item", ctypes.POINTER(_PangoItem) ),
	( "glyphs", ctypes.POINTER(_PangoGlyphString) ),
])

__freeze_rpythonic_struct( _PangoGlyphItemIter, [
	( "glyph_item", ctypes.POINTER(_PangoGlyphItem) ),
	( "text", ctypes.POINTER(ctypes.c_char) ),
	( "start_glyph", ctypes.c_int ),
	( "start_index", ctypes.c_int ),
	( "start_char", ctypes.c_int ),
	( "end_glyph", ctypes.c_int ),
	( "end_index", ctypes.c_int ),
	( "end_char", ctypes.c_int ),
])

__freeze_rpythonic_struct( _PangoTabArray, [
])

__freeze_rpythonic_struct( _PangoLayout, [
])

__freeze_rpythonic_struct( _PangoLayoutClass, [
])

__freeze_rpythonic_struct( _PangoLayoutLine, [
	( "layout", ctypes.POINTER(_PangoLayout) ),
	( "start_index", ctypes.c_int ),
	( "length", ctypes.c_int ),
	( "runs", ctypes.POINTER(_GSList) ),
	( "is_paragraph_start", ctypes.c_uint ),
	( "resolved_dir", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _PangoLayoutIter, [
])

__freeze_rpythonic_struct( _PangoRendererPrivate, [
])

__freeze_rpythonic_struct( _PangoRenderer, [
	( "parent_instance", _GObject ),
	( "underline", ctypes.c_int ),
	( "strikethrough", ctypes.c_int ),
	( "active_count", ctypes.c_int ),
	( "matrix", ctypes.POINTER(_PangoMatrix) ),
	( "priv", ctypes.POINTER(_PangoRendererPrivate) ),
])

__freeze_rpythonic_struct( _PangoRendererClass, [
	( "parent_class", _GObjectClass ),
	( "draw_glyphs", ctypes.c_void_p ),
	( "draw_rectangle", ctypes.c_void_p ),
	( "draw_error_underline", ctypes.c_void_p ),
	( "draw_shape", ctypes.c_void_p ),
	( "draw_trapezoid", ctypes.c_void_p ),
	( "draw_glyph", ctypes.c_void_p ),
	( "part_changed", ctypes.c_void_p ),
	( "begin", ctypes.c_void_p ),
	( "end", ctypes.c_void_p ),
	( "prepare_run", ctypes.c_void_p ),
	( "draw_glyph_item", ctypes.c_void_p ),
	( "_pango_reserved2", ctypes.c_void_p ),
	( "_pango_reserved3", ctypes.c_void_p ),
	( "_pango_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( __value, [
	( "__wch", ctypes.c_uint ),
	( "__wchb", ( ctypes.c_char * 4 ) ),
])

__freeze_rpythonic_struct( __mbstate_t, [
	( "__count", ctypes.c_int ),
	( "__value", __value ),
])

__freeze_rpythonic_struct( _G_fpos_t, [
	( "__pos", ctypes.c_int64 ),
	( "__state", __mbstate_t ),
])

__freeze_rpythonic_struct( _G_fpos64_t, [
	( "__pos", ctypes.c_longlong ),
	( "__state", __mbstate_t ),
])

__freeze_rpythonic_struct( _IO_jump_t, [
])

__freeze_rpythonic_struct( _IO_marker, [
	( "_next", ctypes.POINTER(_IO_marker) ),
	( "_sbuf", ctypes.POINTER(_IO_FILE) ),
	( "_pos", ctypes.c_int ),
])

__freeze_rpythonic_struct( _IO_FILE, [
	( "_flags", ctypes.c_int ),
	( "_IO_read_ptr", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_read_end", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_read_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_write_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_write_ptr", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_write_end", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_buf_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_buf_end", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_save_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_backup_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_save_end", ctypes.POINTER(ctypes.c_char) ),
	( "_markers", ctypes.POINTER(_IO_marker) ),
	( "_chain", ctypes.POINTER(_IO_FILE) ),
	( "_fileno", ctypes.c_int ),
	( "_flags2", ctypes.c_int ),
	( "_old_offset", ctypes.c_int64 ),
	( "_cur_column", ctypes.c_ushort ),
	( "_vtable_offset", ctypes.c_char ),
	( "_shortbuf", ( ctypes.c_char * 1 ) ),
	( "_lock", ctypes.POINTER(ctypes.c_void_p) ),
	( "_offset", ctypes.c_longlong ),
	( "__pad1", ctypes.POINTER(ctypes.c_void_p) ),
	( "__pad2", ctypes.POINTER(ctypes.c_void_p) ),
	( "__pad3", ctypes.POINTER(ctypes.c_void_p) ),
	( "__pad4", ctypes.POINTER(ctypes.c_void_p) ),
	( "__pad5", ctypes.c_uint ),
	( "_mode", ctypes.c_int ),
	( "_unused2", ctypes.c_char ),
])

__freeze_rpythonic_struct( _IO_FILE_plus, [
])

__freeze_rpythonic_struct( _cairo, [
])

__freeze_rpythonic_struct( _cairo_surface, [
])

__freeze_rpythonic_struct( _cairo_device, [
])

__freeze_rpythonic_struct( _cairo_matrix, [
	( "xx", ctypes.c_double ),
	( "yx", ctypes.c_double ),
	( "xy", ctypes.c_double ),
	( "yy", ctypes.c_double ),
	( "x0", ctypes.c_double ),
	( "y0", ctypes.c_double ),
])

__freeze_rpythonic_struct( _cairo_pattern, [
])

__freeze_rpythonic_struct( _cairo_user_data_key, [
	( "unused", ctypes.c_int ),
])

__freeze_rpythonic_struct( _cairo_rectangle, [
	( "x", ctypes.c_double ),
	( "y", ctypes.c_double ),
	( "width", ctypes.c_double ),
	( "height", ctypes.c_double ),
])

__freeze_rpythonic_struct( _cairo_rectangle_list, [
	( "status", ctypes.c_int ),
	( "rectangles", ctypes.POINTER(_cairo_rectangle) ),
	( "num_rectangles", ctypes.c_int ),
])

__freeze_rpythonic_struct( _cairo_scaled_font, [
])

__freeze_rpythonic_struct( _cairo_font_face, [
])

__freeze_rpythonic_struct( cairo_glyph_t, [
	( "index", ctypes.c_ulong ),
	( "x", ctypes.c_double ),
	( "y", ctypes.c_double ),
])

__freeze_rpythonic_struct( cairo_text_cluster_t, [
	( "num_bytes", ctypes.c_int ),
	( "num_glyphs", ctypes.c_int ),
])

__freeze_rpythonic_struct( cairo_text_extents_t, [
	( "x_bearing", ctypes.c_double ),
	( "y_bearing", ctypes.c_double ),
	( "width", ctypes.c_double ),
	( "height", ctypes.c_double ),
	( "x_advance", ctypes.c_double ),
	( "y_advance", ctypes.c_double ),
])

__freeze_rpythonic_struct( cairo_font_extents_t, [
	( "ascent", ctypes.c_double ),
	( "descent", ctypes.c_double ),
	( "height", ctypes.c_double ),
	( "max_x_advance", ctypes.c_double ),
	( "max_y_advance", ctypes.c_double ),
])

__freeze_rpythonic_struct( _cairo_font_options, [
])

__freeze_rpythonic_struct( header, [
	( "C_type", ctypes.c_int ),
	( "length", ctypes.c_int ),
])

__freeze_rpythonic_struct( point, [
	( "x", ctypes.c_double ),
	( "y", ctypes.c_double ),
])

__freeze_rpythonic_struct( _cairo_path_data_t, [
	( "header", header ),
	( "point", point ),
])

__freeze_rpythonic_struct( cairo_path, [
	( "status", ctypes.c_int ),
	( "data", ctypes.POINTER(_cairo_path_data_t) ),
	( "num_data", ctypes.c_int ),
])

__freeze_rpythonic_struct( _cairo_region, [
])

__freeze_rpythonic_struct( _cairo_rectangle_int, [
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
	( "width", ctypes.c_int ),
	( "height", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GdkAtom, [
])

__freeze_rpythonic_struct( _GdkCursor, [
])

__freeze_rpythonic_struct( _GdkVisual, [
])

__freeze_rpythonic_struct( _GdkDevice, [
])

__freeze_rpythonic_struct( _GdkDragContext, [
])

__freeze_rpythonic_struct( _GdkDisplayManager, [
])

__freeze_rpythonic_struct( _GdkDeviceManager, [
])

__freeze_rpythonic_struct( _GdkDisplay, [
])

__freeze_rpythonic_struct( _GdkScreen, [
])

__freeze_rpythonic_struct( _GdkWindow, [
])

__freeze_rpythonic_struct( _GdkKeymap, [
])

__freeze_rpythonic_struct( _GdkAppLaunchContext, [
])

__freeze_rpythonic_struct( _GdkPoint, [
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GdkColor, [
	( "pixel", ctypes.c_uint ),
	( "red", ctypes.c_ushort ),
	( "green", ctypes.c_ushort ),
	( "blue", ctypes.c_ushort ),
])

__freeze_rpythonic_struct( _GdkTimeCoord, [
	( "time", ctypes.c_uint ),
	( "axes", ( ctypes.c_double * 128 ) ),
])

__freeze_rpythonic_struct( _GdkEventAny, [
	( "C_type", ctypes.c_int ),
	( "window", ctypes.POINTER(_GdkWindow) ),
	( "send_event", ctypes.c_char ),
])

__freeze_rpythonic_struct( _GdkEventExpose, [
	( "C_type", ctypes.c_int ),
	( "window", ctypes.POINTER(_GdkWindow) ),
	( "send_event", ctypes.c_char ),
	( "area", _cairo_rectangle_int ),
	( "region", ctypes.POINTER(_cairo_region) ),
	( "count", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GdkEventVisibility, [
	( "C_type", ctypes.c_int ),
	( "window", ctypes.POINTER(_GdkWindow) ),
	( "send_event", ctypes.c_char ),
	( "state", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GdkEventMotion, [
	( "C_type", ctypes.c_int ),
	( "window", ctypes.POINTER(_GdkWindow) ),
	( "send_event", ctypes.c_char ),
	( "time", ctypes.c_uint ),
	( "x", ctypes.c_double ),
	( "y", ctypes.c_double ),
	( "axes", ctypes.POINTER(ctypes.c_double) ),
	( "state", ctypes.c_uint ),
	( "is_hint", ctypes.c_short ),
	( "device", ctypes.POINTER(_GdkDevice) ),
	( "x_root", ctypes.c_double ),
	( "y_root", ctypes.c_double ),
])

__freeze_rpythonic_struct( _GdkEventButton, [
	( "C_type", ctypes.c_int ),
	( "window", ctypes.POINTER(_GdkWindow) ),
	( "send_event", ctypes.c_char ),
	( "time", ctypes.c_uint ),
	( "x", ctypes.c_double ),
	( "y", ctypes.c_double ),
	( "axes", ctypes.POINTER(ctypes.c_double) ),
	( "state", ctypes.c_uint ),
	( "button", ctypes.c_uint ),
	( "device", ctypes.POINTER(_GdkDevice) ),
	( "x_root", ctypes.c_double ),
	( "y_root", ctypes.c_double ),
])

__freeze_rpythonic_struct( _GdkEventScroll, [
	( "C_type", ctypes.c_int ),
	( "window", ctypes.POINTER(_GdkWindow) ),
	( "send_event", ctypes.c_char ),
	( "time", ctypes.c_uint ),
	( "x", ctypes.c_double ),
	( "y", ctypes.c_double ),
	( "state", ctypes.c_uint ),
	( "direction", ctypes.c_int ),
	( "device", ctypes.POINTER(_GdkDevice) ),
	( "x_root", ctypes.c_double ),
	( "y_root", ctypes.c_double ),
])

__freeze_rpythonic_struct( _GdkEventKey, [
	( "C_type", ctypes.c_int ),
	( "window", ctypes.POINTER(_GdkWindow) ),
	( "send_event", ctypes.c_char ),
	( "time", ctypes.c_uint ),
	( "state", ctypes.c_uint ),
	( "keyval", ctypes.c_uint ),
	( "length", ctypes.c_int ),
	( "string", ctypes.POINTER(ctypes.c_char) ),
	( "hardware_keycode", ctypes.c_ushort ),
	( "group", ctypes.c_ubyte ),
	( "is_modifier", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GdkEventCrossing, [
	( "C_type", ctypes.c_int ),
	( "window", ctypes.POINTER(_GdkWindow) ),
	( "send_event", ctypes.c_char ),
	( "subwindow", ctypes.POINTER(_GdkWindow) ),
	( "time", ctypes.c_uint ),
	( "x", ctypes.c_double ),
	( "y", ctypes.c_double ),
	( "x_root", ctypes.c_double ),
	( "y_root", ctypes.c_double ),
	( "mode", ctypes.c_int ),
	( "detail", ctypes.c_int ),
	( "focus", ctypes.c_int ),
	( "state", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GdkEventFocus, [
	( "C_type", ctypes.c_int ),
	( "window", ctypes.POINTER(_GdkWindow) ),
	( "send_event", ctypes.c_char ),
	( "C_in", ctypes.c_short ),
])

__freeze_rpythonic_struct( _GdkEventConfigure, [
	( "C_type", ctypes.c_int ),
	( "window", ctypes.POINTER(_GdkWindow) ),
	( "send_event", ctypes.c_char ),
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
	( "width", ctypes.c_int ),
	( "height", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GdkEventProperty, [
	( "C_type", ctypes.c_int ),
	( "window", ctypes.POINTER(_GdkWindow) ),
	( "send_event", ctypes.c_char ),
	( "atom", ctypes.POINTER(_GdkAtom) ),
	( "time", ctypes.c_uint ),
	( "state", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GdkEventSelection, [
	( "C_type", ctypes.c_int ),
	( "window", ctypes.POINTER(_GdkWindow) ),
	( "send_event", ctypes.c_char ),
	( "selection", ctypes.POINTER(_GdkAtom) ),
	( "target", ctypes.POINTER(_GdkAtom) ),
	( "property", ctypes.POINTER(_GdkAtom) ),
	( "time", ctypes.c_uint ),
	( "requestor", ctypes.POINTER(_GdkWindow) ),
])

__freeze_rpythonic_struct( _GdkEventOwnerChange, [
	( "C_type", ctypes.c_int ),
	( "window", ctypes.POINTER(_GdkWindow) ),
	( "send_event", ctypes.c_char ),
	( "owner", ctypes.POINTER(_GdkWindow) ),
	( "reason", ctypes.c_int ),
	( "selection", ctypes.POINTER(_GdkAtom) ),
	( "time", ctypes.c_uint ),
	( "selection_time", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GdkEventProximity, [
	( "C_type", ctypes.c_int ),
	( "window", ctypes.POINTER(_GdkWindow) ),
	( "send_event", ctypes.c_char ),
	( "time", ctypes.c_uint ),
	( "device", ctypes.POINTER(_GdkDevice) ),
])

__freeze_rpythonic_struct( _GdkEventSetting, [
	( "C_type", ctypes.c_int ),
	( "window", ctypes.POINTER(_GdkWindow) ),
	( "send_event", ctypes.c_char ),
	( "action", ctypes.c_int ),
	( "name", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( _GdkEventWindowState, [
	( "C_type", ctypes.c_int ),
	( "window", ctypes.POINTER(_GdkWindow) ),
	( "send_event", ctypes.c_char ),
	( "changed_mask", ctypes.c_int ),
	( "new_window_state", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GdkEventGrabBroken, [
	( "C_type", ctypes.c_int ),
	( "window", ctypes.POINTER(_GdkWindow) ),
	( "send_event", ctypes.c_char ),
	( "keyboard", ctypes.c_int ),
	( "implicit", ctypes.c_int ),
	( "grab_window", ctypes.POINTER(_GdkWindow) ),
])

__freeze_rpythonic_struct( _GdkEventDND, [
	( "C_type", ctypes.c_int ),
	( "window", ctypes.POINTER(_GdkWindow) ),
	( "send_event", ctypes.c_char ),
	( "context", ctypes.POINTER(_GdkDragContext) ),
	( "time", ctypes.c_uint ),
	( "x_root", ctypes.c_short ),
	( "y_root", ctypes.c_short ),
])

__freeze_rpythonic_struct( _GdkEvent, [
	( "C_type", ctypes.c_int ),
	( "any", _GdkEventAny ),
	( "expose", _GdkEventExpose ),
	( "visibility", _GdkEventVisibility ),
	( "motion", _GdkEventMotion ),
	( "button", _GdkEventButton ),
	( "scroll", _GdkEventScroll ),
	( "key", _GdkEventKey ),
	( "crossing", _GdkEventCrossing ),
	( "focus_change", _GdkEventFocus ),
	( "configure", _GdkEventConfigure ),
	( "property", _GdkEventProperty ),
	( "selection", _GdkEventSelection ),
	( "owner_change", _GdkEventOwnerChange ),
	( "proximity", _GdkEventProximity ),
	( "dnd", _GdkEventDND ),
	( "window_state", _GdkEventWindowState ),
	( "setting", _GdkEventSetting ),
	( "grab_broken", _GdkEventGrabBroken ),
])

__freeze_rpythonic_struct( _GdkRGBA, [
	( "red", ctypes.c_double ),
	( "green", ctypes.c_double ),
	( "blue", ctypes.c_double ),
	( "alpha", ctypes.c_double ),
])

__freeze_rpythonic_struct( _GdkPixbuf, [
])

__freeze_rpythonic_struct( _GdkPixbufAnimation, [
])

__freeze_rpythonic_struct( _GdkPixbufAnimationIter, [
])

__freeze_rpythonic_struct( _GdkPixbufSimpleAnim, [
])

__freeze_rpythonic_struct( _GdkPixbufSimpleAnimClass, [
])

__freeze_rpythonic_struct( _GdkPixbufFormat, [
])

__freeze_rpythonic_struct( _GdkPixbufLoader, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GdkPixbufLoaderClass, [
	( "parent_class", _GObjectClass ),
	( "size_prepared", ctypes.c_void_p ),
	( "area_prepared", ctypes.c_void_p ),
	( "area_updated", ctypes.c_void_p ),
	( "closed", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _PangoCairoFont, [
])

__freeze_rpythonic_struct( _PangoCairoFontMap, [
])

__freeze_rpythonic_struct( _GdkKeymapKey, [
	( "keycode", ctypes.c_uint ),
	( "group", ctypes.c_int ),
	( "level", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GdkWindowRedirect, [
])

__freeze_rpythonic_struct( _GdkWindowAttr, [
	( "title", ctypes.POINTER(ctypes.c_char) ),
	( "event_mask", ctypes.c_int ),
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
	( "width", ctypes.c_int ),
	( "height", ctypes.c_int ),
	( "wclass", ctypes.c_int ),
	( "visual", ctypes.POINTER(_GdkVisual) ),
	( "window_type", ctypes.c_int ),
	( "cursor", ctypes.POINTER(_GdkCursor) ),
	( "wmclass_name", ctypes.POINTER(ctypes.c_char) ),
	( "wmclass_class", ctypes.POINTER(ctypes.c_char) ),
	( "override_redirect", ctypes.c_int ),
	( "type_hint", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GdkGeometry, [
	( "min_width", ctypes.c_int ),
	( "min_height", ctypes.c_int ),
	( "max_width", ctypes.c_int ),
	( "max_height", ctypes.c_int ),
	( "base_width", ctypes.c_int ),
	( "base_height", ctypes.c_int ),
	( "width_inc", ctypes.c_int ),
	( "height_inc", ctypes.c_int ),
	( "min_aspect", ctypes.c_double ),
	( "max_aspect", ctypes.c_double ),
	( "win_gravity", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GdkWindowClass, [
	( "parent_class", _GObjectClass ),
	( "pick_embedded_child", ctypes.POINTER(ctypes.c_void_p) ),
	( "to_embedder", ctypes.c_void_p ),
	( "from_embedder", ctypes.c_void_p ),
	( "create_surface", ctypes.POINTER(ctypes.c_void_p) ),
	( "_gdk_reserved1", ctypes.c_void_p ),
	( "_gdk_reserved2", ctypes.c_void_p ),
	( "_gdk_reserved3", ctypes.c_void_p ),
	( "_gdk_reserved4", ctypes.c_void_p ),
	( "_gdk_reserved5", ctypes.c_void_p ),
	( "_gdk_reserved6", ctypes.c_void_p ),
	( "_gdk_reserved7", ctypes.c_void_p ),
	( "_gdk_reserved8", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkAccelGroupPrivate, [
])

__freeze_rpythonic_struct( _GtkAccelGroup, [
	( "parent", _GObject ),
	( "priv", ctypes.POINTER(_GtkAccelGroupPrivate) ),
])

__freeze_rpythonic_struct( _GtkAccelGroupClass, [
	( "parent_class", _GObjectClass ),
	( "accel_changed", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkAccelKey, [
	( "accel_key", ctypes.c_uint ),
	( "accel_mods", ctypes.c_int ),
	( "accel_flags", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GtkAccelGroupEntry, [
	( "key", _GtkAccelKey ),
	( "closure", ctypes.POINTER(_GClosure) ),
	( "accel_path_quark", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GtkAdjustmentPrivate, [
])

__freeze_rpythonic_struct( _GtkAdjustment, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GtkAdjustmentPrivate) ),
])

__freeze_rpythonic_struct( _GtkAdjustmentClass, [
	( "parent_class", _GObjectClass ),
	( "changed", ctypes.c_void_p ),
	( "value_changed", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkWidgetPath, [
])

__freeze_rpythonic_struct( _GtkThemeEngine, [
])

__freeze_rpythonic_struct( _GtkIconSet, [
])

__freeze_rpythonic_struct( _GtkIconSource, [
])

__freeze_rpythonic_struct( _GtkRcStyle, [
	( "parent_instance", _GObject ),
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "bg_pixmap_name", ctypes.POINTER(( ctypes.c_char * 5 )) ),
	( "font_desc", ctypes.POINTER(_PangoFontDescription) ),
	( "color_flags", ( ctypes.c_int * 5 ) ),
	( "fg", ( _GdkColor * 5 ) ),
	( "bg", ( _GdkColor * 5 ) ),
	( "text", ( _GdkColor * 5 ) ),
	( "base", ( _GdkColor * 5 ) ),
	( "xthickness", ctypes.c_int ),
	( "ythickness", ctypes.c_int ),
	( "rc_properties", ctypes.POINTER(_GArray) ),
	( "rc_style_lists", ctypes.POINTER(_GSList) ),
	( "icon_factories", ctypes.POINTER(_GSList) ),
	( "engine_specified", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GtkStyle, [
	( "parent_instance", _GObject ),
	( "fg", ( _GdkColor * 5 ) ),
	( "bg", ( _GdkColor * 5 ) ),
	( "light", ( _GdkColor * 5 ) ),
	( "dark", ( _GdkColor * 5 ) ),
	( "mid", ( _GdkColor * 5 ) ),
	( "text", ( _GdkColor * 5 ) ),
	( "base", ( _GdkColor * 5 ) ),
	( "text_aa", ( _GdkColor * 5 ) ),
	( "black", _GdkColor ),
	( "white", _GdkColor ),
	( "font_desc", ctypes.POINTER(_PangoFontDescription) ),
	( "xthickness", ctypes.c_int ),
	( "ythickness", ctypes.c_int ),
	( "background", ctypes.POINTER(( _cairo_pattern * 5 )) ),
	( "attach_count", ctypes.c_int ),
	( "visual", ctypes.POINTER(_GdkVisual) ),
	( "private_font_desc", ctypes.POINTER(_PangoFontDescription) ),
	( "rc_style", ctypes.POINTER(_GtkRcStyle) ),
	( "styles", ctypes.POINTER(_GSList) ),
	( "property_cache", ctypes.POINTER(_GArray) ),
	( "icon_factories", ctypes.POINTER(_GSList) ),
])

__freeze_rpythonic_struct( _GtkStyleClass, [
	( "parent_class", _GObjectClass ),
	( "realize", ctypes.c_void_p ),
	( "unrealize", ctypes.c_void_p ),
	( "copy", ctypes.c_void_p ),
	( "clone", ctypes.POINTER(ctypes.c_void_p) ),
	( "init_from_rc", ctypes.c_void_p ),
	( "set_background", ctypes.c_void_p ),
	( "render_icon", ctypes.POINTER(ctypes.c_void_p) ),
	( "draw_hline", ctypes.c_void_p ),
	( "draw_vline", ctypes.c_void_p ),
	( "draw_shadow", ctypes.c_void_p ),
	( "draw_arrow", ctypes.c_void_p ),
	( "draw_diamond", ctypes.c_void_p ),
	( "draw_box", ctypes.c_void_p ),
	( "draw_flat_box", ctypes.c_void_p ),
	( "draw_check", ctypes.c_void_p ),
	( "draw_option", ctypes.c_void_p ),
	( "draw_tab", ctypes.c_void_p ),
	( "draw_shadow_gap", ctypes.c_void_p ),
	( "draw_box_gap", ctypes.c_void_p ),
	( "draw_extension", ctypes.c_void_p ),
	( "draw_focus", ctypes.c_void_p ),
	( "draw_slider", ctypes.c_void_p ),
	( "draw_handle", ctypes.c_void_p ),
	( "draw_expander", ctypes.c_void_p ),
	( "draw_layout", ctypes.c_void_p ),
	( "draw_resize_grip", ctypes.c_void_p ),
	( "draw_spinner", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
	( "_gtk_reserved5", ctypes.c_void_p ),
	( "_gtk_reserved6", ctypes.c_void_p ),
	( "_gtk_reserved7", ctypes.c_void_p ),
	( "_gtk_reserved8", ctypes.c_void_p ),
	( "_gtk_reserved9", ctypes.c_void_p ),
	( "_gtk_reserved10", ctypes.c_void_p ),
	( "_gtk_reserved11", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkBorder, [
	( "left", ctypes.c_short ),
	( "right", ctypes.c_short ),
	( "top", ctypes.c_short ),
	( "bottom", ctypes.c_short ),
])

__freeze_rpythonic_struct( _GtkRcContext, [
])

__freeze_rpythonic_struct( _GtkRcStyleClass, [
	( "parent_class", _GObjectClass ),
	( "create_rc_style", ctypes.POINTER(ctypes.c_void_p) ),
	( "parse", ctypes.c_void_p ),
	( "merge", ctypes.c_void_p ),
	( "create_style", ctypes.POINTER(ctypes.c_void_p) ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkRcProperty, [
	( "type_name", ctypes.c_uint ),
	( "property_name", ctypes.c_uint ),
	( "origin", ctypes.POINTER(ctypes.c_char) ),
	( "value", _GValue ),
])

__freeze_rpythonic_struct( _GtkSettingsPrivate, [
])

__freeze_rpythonic_struct( _GtkSettings, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GtkSettingsPrivate) ),
])

__freeze_rpythonic_struct( _GtkSettingsClass, [
	( "parent_class", _GObjectClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkSettingsValue, [
	( "origin", ctypes.POINTER(ctypes.c_char) ),
	( "value", _GValue ),
])

__freeze_rpythonic_struct( _GtkIconFactoryPrivate, [
])

__freeze_rpythonic_struct( _GtkIconFactory, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GtkIconFactoryPrivate) ),
])

__freeze_rpythonic_struct( _GtkIconFactoryClass, [
	( "parent_class", _GObjectClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkSymbolicColor, [
])

__freeze_rpythonic_struct( _GtkGradient, [
])

__freeze_rpythonic_struct( _GtkStyleProperties, [
	( "parent_object", _GObject ),
	( "priv", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GtkStylePropertiesClass, [
	( "parent_class", _GObjectClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkStyleProvider, [
])

__freeze_rpythonic_struct( _GtkStyleProviderIface, [
	( "g_iface", _GTypeInterface ),
	( "get_style", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_style_property", ctypes.c_void_p ),
	( "get_icon_factory", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _AtkAttribute, [
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "value", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( _AtkImplementor, [
])

__freeze_rpythonic_struct( _AtkPropertyValues, [
	( "property_name", ctypes.POINTER(ctypes.c_char) ),
	( "old_value", _GValue ),
	( "new_value", _GValue ),
])

__freeze_rpythonic_struct( _AtkRelationSet, [
	( "parent", _GObject ),
	( "relations", ctypes.POINTER(_GPtrArray) ),
])

__freeze_rpythonic_struct( _AtkObject, [
	( "parent", _GObject ),
	( "description", ctypes.POINTER(ctypes.c_char) ),
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "accessible_parent", ctypes.POINTER(_AtkObject) ),
	( "role", ctypes.c_int ),
	( "relation_set", ctypes.POINTER(_AtkRelationSet) ),
	( "layer", ctypes.c_int ),
])

__freeze_rpythonic_struct( _AtkObjectClass, [
	( "parent", _GObjectClass ),
	( "get_name", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_description", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_parent", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_n_children", ctypes.c_void_p ),
	( "ref_child", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_index_in_parent", ctypes.c_void_p ),
	( "ref_relation_set", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_role", ctypes.c_void_p ),
	( "get_layer", ctypes.c_void_p ),
	( "get_mdi_zorder", ctypes.c_void_p ),
	( "ref_state_set", ctypes.POINTER(ctypes.c_void_p) ),
	( "set_name", ctypes.c_void_p ),
	( "set_description", ctypes.c_void_p ),
	( "set_parent", ctypes.c_void_p ),
	( "set_role", ctypes.c_void_p ),
	( "connect_property_change_handler", ctypes.c_void_p ),
	( "remove_property_change_handler", ctypes.c_void_p ),
	( "initialize", ctypes.c_void_p ),
	( "children_changed", ctypes.c_void_p ),
	( "focus_event", ctypes.c_void_p ),
	( "property_change", ctypes.c_void_p ),
	( "state_change", ctypes.c_void_p ),
	( "visible_data_changed", ctypes.c_void_p ),
	( "active_descendant_changed", ctypes.c_void_p ),
	( "get_attributes", ctypes.POINTER(ctypes.c_void_p) ),
	( "pad1", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
	( "pad2", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
])

__freeze_rpythonic_struct( _AtkImplementorIface, [
	( "parent", _GTypeInterface ),
	( "ref_accessible", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _AtkAction, [
])

__freeze_rpythonic_struct( _AtkActionIface, [
	( "parent", _GTypeInterface ),
	( "do_action", ctypes.c_void_p ),
	( "get_n_actions", ctypes.c_void_p ),
	( "get_description", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_name", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_keybinding", ctypes.POINTER(ctypes.c_void_p) ),
	( "set_description", ctypes.c_void_p ),
	( "get_localized_name", ctypes.POINTER(ctypes.c_void_p) ),
	( "pad2", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
])

__freeze_rpythonic_struct( _AtkKeyEventStruct, [
	( "C_type", ctypes.c_int ),
	( "state", ctypes.c_uint ),
	( "keyval", ctypes.c_uint ),
	( "length", ctypes.c_int ),
	( "string", ctypes.POINTER(ctypes.c_char) ),
	( "keycode", ctypes.c_ushort ),
	( "timestamp", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _AtkUtil, [
	( "parent", _GObject ),
])

__freeze_rpythonic_struct( _AtkUtilClass, [
	( "parent", _GObjectClass ),
	( "add_global_event_listener", ctypes.c_void_p ),
	( "remove_global_event_listener", ctypes.c_void_p ),
	( "add_key_event_listener", ctypes.c_void_p ),
	( "remove_key_event_listener", ctypes.c_void_p ),
	( "get_root", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_toolkit_name", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_toolkit_version", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _AtkComponent, [
])

__freeze_rpythonic_struct( _AtkRectangle, [
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
	( "width", ctypes.c_int ),
	( "height", ctypes.c_int ),
])

__freeze_rpythonic_struct( _AtkComponentIface, [
	( "parent", _GTypeInterface ),
	( "add_focus_handler", ctypes.c_void_p ),
	( "contains", ctypes.c_void_p ),
	( "ref_accessible_at_point", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_extents", ctypes.c_void_p ),
	( "get_position", ctypes.c_void_p ),
	( "get_size", ctypes.c_void_p ),
	( "grab_focus", ctypes.c_void_p ),
	( "remove_focus_handler", ctypes.c_void_p ),
	( "set_extents", ctypes.c_void_p ),
	( "set_position", ctypes.c_void_p ),
	( "set_size", ctypes.c_void_p ),
	( "get_layer", ctypes.c_void_p ),
	( "get_mdi_zorder", ctypes.c_void_p ),
	( "bounds_changed", ctypes.c_void_p ),
	( "get_alpha", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _AtkDocument, [
])

__freeze_rpythonic_struct( _AtkDocumentIface, [
	( "parent", _GTypeInterface ),
	( "get_document_type", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_document", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_document_locale", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_document_attributes", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_document_attribute_value", ctypes.POINTER(ctypes.c_void_p) ),
	( "set_document_attribute", ctypes.c_void_p ),
	( "pad1", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
	( "pad2", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
	( "pad3", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
	( "pad4", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
])

__freeze_rpythonic_struct( _AtkText, [
])

__freeze_rpythonic_struct( _AtkTextRectangle, [
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
	( "width", ctypes.c_int ),
	( "height", ctypes.c_int ),
])

__freeze_rpythonic_struct( _AtkTextRange, [
	( "bounds", _AtkTextRectangle ),
	( "start_offset", ctypes.c_int ),
	( "end_offset", ctypes.c_int ),
	( "content", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( _AtkTextIface, [
	( "parent", _GTypeInterface ),
	( "get_text", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_text_after_offset", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_text_at_offset", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_character_at_offset", ctypes.c_void_p ),
	( "get_text_before_offset", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_caret_offset", ctypes.c_void_p ),
	( "get_run_attributes", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_default_attributes", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_character_extents", ctypes.c_void_p ),
	( "get_character_count", ctypes.c_void_p ),
	( "get_offset_at_point", ctypes.c_void_p ),
	( "get_n_selections", ctypes.c_void_p ),
	( "get_selection", ctypes.POINTER(ctypes.c_void_p) ),
	( "add_selection", ctypes.c_void_p ),
	( "remove_selection", ctypes.c_void_p ),
	( "set_selection", ctypes.c_void_p ),
	( "set_caret_offset", ctypes.c_void_p ),
	( "text_changed", ctypes.c_void_p ),
	( "text_caret_moved", ctypes.c_void_p ),
	( "text_selection_changed", ctypes.c_void_p ),
	( "text_attributes_changed", ctypes.c_void_p ),
	( "get_range_extents", ctypes.c_void_p ),
	( "get_bounded_ranges", ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)) ),
	( "pad4", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
])

__freeze_rpythonic_struct( _AtkEditableText, [
])

__freeze_rpythonic_struct( _AtkEditableTextIface, [
	( "parent_interface", _GTypeInterface ),
	( "set_run_attributes", ctypes.c_void_p ),
	( "set_text_contents", ctypes.c_void_p ),
	( "insert_text", ctypes.c_void_p ),
	( "copy_text", ctypes.c_void_p ),
	( "cut_text", ctypes.c_void_p ),
	( "delete_text", ctypes.c_void_p ),
	( "paste_text", ctypes.c_void_p ),
	( "pad1", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
	( "pad2", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
])

__freeze_rpythonic_struct( _AtkGObjectAccessible, [
	( "parent", _AtkObject ),
])

__freeze_rpythonic_struct( _AtkGObjectAccessibleClass, [
	( "parent_class", _AtkObjectClass ),
	( "pad1", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
	( "pad2", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
])

__freeze_rpythonic_struct( _AtkHyperlink, [
	( "parent", _GObject ),
])

__freeze_rpythonic_struct( _AtkHyperlinkClass, [
	( "parent", _GObjectClass ),
	( "get_uri", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_object", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_end_index", ctypes.c_void_p ),
	( "get_start_index", ctypes.c_void_p ),
	( "is_valid", ctypes.c_void_p ),
	( "get_n_anchors", ctypes.c_void_p ),
	( "link_state", ctypes.c_void_p ),
	( "is_selected_link", ctypes.c_void_p ),
	( "link_activated", ctypes.c_void_p ),
	( "pad1", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
])

__freeze_rpythonic_struct( _AtkHyperlinkImpl, [
])

__freeze_rpythonic_struct( _AtkHyperlinkImplIface, [
	( "parent", _GTypeInterface ),
	( "get_hyperlink", ctypes.POINTER(ctypes.c_void_p) ),
	( "pad1", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
])

__freeze_rpythonic_struct( _AtkHypertext, [
])

__freeze_rpythonic_struct( _AtkHypertextIface, [
	( "parent", _GTypeInterface ),
	( "get_link", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_n_links", ctypes.c_void_p ),
	( "get_link_index", ctypes.c_void_p ),
	( "link_selected", ctypes.c_void_p ),
	( "pad1", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
	( "pad2", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
	( "pad3", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
])

__freeze_rpythonic_struct( _AtkImage, [
])

__freeze_rpythonic_struct( _AtkImageIface, [
	( "parent", _GTypeInterface ),
	( "get_image_position", ctypes.c_void_p ),
	( "get_image_description", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_image_size", ctypes.c_void_p ),
	( "set_image_description", ctypes.c_void_p ),
	( "get_image_locale", ctypes.POINTER(ctypes.c_void_p) ),
	( "pad1", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
])

__freeze_rpythonic_struct( _AtkNoOpObject, [
	( "parent", _AtkObject ),
])

__freeze_rpythonic_struct( _AtkNoOpObjectClass, [
	( "parent_class", _AtkObjectClass ),
])

__freeze_rpythonic_struct( _AtkObjectFactory, [
	( "parent", _GObject ),
])

__freeze_rpythonic_struct( _AtkObjectFactoryClass, [
	( "parent_class", _GObjectClass ),
	( "create_accessible", ctypes.POINTER(ctypes.c_void_p) ),
	( "invalidate", ctypes.c_void_p ),
	( "get_accessible_type", ctypes.c_void_p ),
	( "pad1", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
	( "pad2", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
])

__freeze_rpythonic_struct( _AtkNoOpObjectFactory, [
	( "parent", _AtkObjectFactory ),
])

__freeze_rpythonic_struct( _AtkNoOpObjectFactoryClass, [
	( "parent_class", _AtkObjectFactoryClass ),
])

__freeze_rpythonic_struct( _AtkPlug, [
	( "parent", _AtkObject ),
])

__freeze_rpythonic_struct( _AtkPlugClass, [
	( "parent_class", _AtkObjectClass ),
	( "get_object_id", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _AtkRegistry, [
	( "parent", _GObject ),
	( "factory_type_registry", ctypes.POINTER(_GHashTable) ),
	( "factory_singleton_cache", ctypes.POINTER(_GHashTable) ),
])

__freeze_rpythonic_struct( _AtkRegistryClass, [
	( "parent_class", _GObjectClass ),
])

__freeze_rpythonic_struct( _AtkRelation, [
	( "parent", _GObject ),
	( "target", ctypes.POINTER(_GPtrArray) ),
	( "relationship", ctypes.c_int ),
])

__freeze_rpythonic_struct( _AtkRelationClass, [
	( "parent", _GObjectClass ),
])

__freeze_rpythonic_struct( _AtkRelationSetClass, [
	( "parent", _GObjectClass ),
	( "pad1", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
	( "pad2", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
])

__freeze_rpythonic_struct( _AtkSelection, [
])

__freeze_rpythonic_struct( _AtkSelectionIface, [
	( "parent", _GTypeInterface ),
	( "add_selection", ctypes.c_void_p ),
	( "clear_selection", ctypes.c_void_p ),
	( "ref_selection", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_selection_count", ctypes.c_void_p ),
	( "is_child_selected", ctypes.c_void_p ),
	( "remove_selection", ctypes.c_void_p ),
	( "select_all_selection", ctypes.c_void_p ),
	( "selection_changed", ctypes.c_void_p ),
	( "pad1", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
	( "pad2", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
])

__freeze_rpythonic_struct( _AtkSocket, [
	( "parent", _AtkObject ),
	( "embedded_plug_id", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( _AtkSocketClass, [
	( "parent_class", _AtkObjectClass ),
	( "embed", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _AtkStateSet, [
	( "parent", _GObject ),
])

__freeze_rpythonic_struct( _AtkStateSetClass, [
	( "parent", _GObjectClass ),
])

__freeze_rpythonic_struct( _AtkStreamableContent, [
])

__freeze_rpythonic_struct( _AtkStreamableContentIface, [
	( "parent", _GTypeInterface ),
	( "get_n_mime_types", ctypes.c_void_p ),
	( "get_mime_type", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_stream", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_uri", ctypes.POINTER(ctypes.c_void_p) ),
	( "pad1", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
	( "pad2", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
	( "pad3", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
])

__freeze_rpythonic_struct( _AtkTable, [
])

__freeze_rpythonic_struct( _AtkTableIface, [
	( "parent", _GTypeInterface ),
	( "ref_at", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_index_at", ctypes.c_void_p ),
	( "get_column_at_index", ctypes.c_void_p ),
	( "get_row_at_index", ctypes.c_void_p ),
	( "get_n_columns", ctypes.c_void_p ),
	( "get_n_rows", ctypes.c_void_p ),
	( "get_column_extent_at", ctypes.c_void_p ),
	( "get_row_extent_at", ctypes.c_void_p ),
	( "get_caption", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_column_description", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_column_header", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_row_description", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_row_header", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_summary", ctypes.POINTER(ctypes.c_void_p) ),
	( "set_caption", ctypes.c_void_p ),
	( "set_column_description", ctypes.c_void_p ),
	( "set_column_header", ctypes.c_void_p ),
	( "set_row_description", ctypes.c_void_p ),
	( "set_row_header", ctypes.c_void_p ),
	( "set_summary", ctypes.c_void_p ),
	( "get_selected_columns", ctypes.c_void_p ),
	( "get_selected_rows", ctypes.c_void_p ),
	( "is_column_selected", ctypes.c_void_p ),
	( "is_row_selected", ctypes.c_void_p ),
	( "is_selected", ctypes.c_void_p ),
	( "add_row_selection", ctypes.c_void_p ),
	( "remove_row_selection", ctypes.c_void_p ),
	( "add_column_selection", ctypes.c_void_p ),
	( "remove_column_selection", ctypes.c_void_p ),
	( "row_inserted", ctypes.c_void_p ),
	( "column_inserted", ctypes.c_void_p ),
	( "row_deleted", ctypes.c_void_p ),
	( "column_deleted", ctypes.c_void_p ),
	( "row_reordered", ctypes.c_void_p ),
	( "column_reordered", ctypes.c_void_p ),
	( "model_changed", ctypes.c_void_p ),
	( "pad1", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
	( "pad2", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
	( "pad3", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
	( "pad4", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
])

__freeze_rpythonic_struct( _AtkMisc, [
	( "parent", _GObject ),
])

__freeze_rpythonic_struct( _AtkMiscClass, [
	( "parent", _GObjectClass ),
	( "threads_enter", ctypes.c_void_p ),
	( "threads_leave", ctypes.c_void_p ),
	( "vfuncs", ctypes.POINTER(( ctypes.c_void_p * 32 )) ),
])

__freeze_rpythonic_struct( _AtkValue, [
])

__freeze_rpythonic_struct( _AtkValueIface, [
	( "parent", _GTypeInterface ),
	( "get_current_value", ctypes.c_void_p ),
	( "get_maximum_value", ctypes.c_void_p ),
	( "get_minimum_value", ctypes.c_void_p ),
	( "set_current_value", ctypes.c_void_p ),
	( "get_minimum_increment", ctypes.c_void_p ),
	( "pad1", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
])

__freeze_rpythonic_struct( _AtkWindow, [
])

__freeze_rpythonic_struct( _AtkWindowIface, [
	( "parent", _GTypeInterface ),
	( "_padding_dummy", ctypes.POINTER(( ctypes.c_void_p * 16 )) ),
])

__freeze_rpythonic_struct( _GtkStyleContextPrivate, [
])

__freeze_rpythonic_struct( _GtkStyleContext, [
	( "parent_object", _GObject ),
	( "priv", ctypes.POINTER(_GtkStyleContextPrivate) ),
])

__freeze_rpythonic_struct( _GtkStyleContextClass, [
	( "parent_class", _GObjectClass ),
	( "changed", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkSelectionData, [
])

__freeze_rpythonic_struct( _GtkWidgetPrivate, [
])

__freeze_rpythonic_struct( _GtkWidgetClassPrivate, [
])

__freeze_rpythonic_struct( _GtkClipboard, [
])

__freeze_rpythonic_struct( _GtkTooltip, [
])

__freeze_rpythonic_struct( _GtkRequisition, [
	( "width", ctypes.c_int ),
	( "height", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GtkWidget, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GtkWidgetPrivate) ),
])

__freeze_rpythonic_struct( _GtkWidgetClass, [
	( "parent_class", _GObjectClass ),
	( "activate_signal", ctypes.c_uint ),
	( "dispatch_child_properties_changed", ctypes.c_void_p ),
	( "destroy", ctypes.c_void_p ),
	( "show", ctypes.c_void_p ),
	( "show_all", ctypes.c_void_p ),
	( "hide", ctypes.c_void_p ),
	( "map", ctypes.c_void_p ),
	( "unmap", ctypes.c_void_p ),
	( "realize", ctypes.c_void_p ),
	( "unrealize", ctypes.c_void_p ),
	( "size_allocate", ctypes.c_void_p ),
	( "state_changed", ctypes.c_void_p ),
	( "state_flags_changed", ctypes.c_void_p ),
	( "parent_set", ctypes.c_void_p ),
	( "hierarchy_changed", ctypes.c_void_p ),
	( "style_set", ctypes.c_void_p ),
	( "direction_changed", ctypes.c_void_p ),
	( "grab_notify", ctypes.c_void_p ),
	( "child_notify", ctypes.c_void_p ),
	( "draw", ctypes.c_void_p ),
	( "get_request_mode", ctypes.c_void_p ),
	( "get_preferred_height", ctypes.c_void_p ),
	( "get_preferred_width_for_height", ctypes.c_void_p ),
	( "get_preferred_width", ctypes.c_void_p ),
	( "get_preferred_height_for_width", ctypes.c_void_p ),
	( "mnemonic_activate", ctypes.c_void_p ),
	( "grab_focus", ctypes.c_void_p ),
	( "focus", ctypes.c_void_p ),
	( "move_focus", ctypes.c_void_p ),
	( "keynav_failed", ctypes.c_void_p ),
	( "event", ctypes.c_void_p ),
	( "button_press_event", ctypes.c_void_p ),
	( "button_release_event", ctypes.c_void_p ),
	( "scroll_event", ctypes.c_void_p ),
	( "motion_notify_event", ctypes.c_void_p ),
	( "delete_event", ctypes.c_void_p ),
	( "destroy_event", ctypes.c_void_p ),
	( "key_press_event", ctypes.c_void_p ),
	( "key_release_event", ctypes.c_void_p ),
	( "enter_notify_event", ctypes.c_void_p ),
	( "leave_notify_event", ctypes.c_void_p ),
	( "configure_event", ctypes.c_void_p ),
	( "focus_in_event", ctypes.c_void_p ),
	( "focus_out_event", ctypes.c_void_p ),
	( "map_event", ctypes.c_void_p ),
	( "unmap_event", ctypes.c_void_p ),
	( "property_notify_event", ctypes.c_void_p ),
	( "selection_clear_event", ctypes.c_void_p ),
	( "selection_request_event", ctypes.c_void_p ),
	( "selection_notify_event", ctypes.c_void_p ),
	( "proximity_in_event", ctypes.c_void_p ),
	( "proximity_out_event", ctypes.c_void_p ),
	( "visibility_notify_event", ctypes.c_void_p ),
	( "window_state_event", ctypes.c_void_p ),
	( "damage_event", ctypes.c_void_p ),
	( "grab_broken_event", ctypes.c_void_p ),
	( "selection_get", ctypes.c_void_p ),
	( "selection_received", ctypes.c_void_p ),
	( "drag_begin", ctypes.c_void_p ),
	( "drag_end", ctypes.c_void_p ),
	( "drag_data_get", ctypes.c_void_p ),
	( "drag_data_delete", ctypes.c_void_p ),
	( "drag_leave", ctypes.c_void_p ),
	( "drag_motion", ctypes.c_void_p ),
	( "drag_drop", ctypes.c_void_p ),
	( "drag_data_received", ctypes.c_void_p ),
	( "drag_failed", ctypes.c_void_p ),
	( "popup_menu", ctypes.c_void_p ),
	( "show_help", ctypes.c_void_p ),
	( "get_accessible", ctypes.POINTER(ctypes.c_void_p) ),
	( "screen_changed", ctypes.c_void_p ),
	( "can_activate_accel", ctypes.c_void_p ),
	( "composited_changed", ctypes.c_void_p ),
	( "query_tooltip", ctypes.c_void_p ),
	( "compute_expand", ctypes.c_void_p ),
	( "adjust_size_request", ctypes.c_void_p ),
	( "adjust_size_allocation", ctypes.c_void_p ),
	( "style_updated", ctypes.c_void_p ),
	( "priv", ctypes.POINTER(_GtkWidgetClassPrivate) ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
	( "_gtk_reserved5", ctypes.c_void_p ),
	( "_gtk_reserved6", ctypes.c_void_p ),
	( "_gtk_reserved7", ctypes.c_void_p ),
	( "_gtk_reserved8", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkWidgetAuxInfo, [
	( "width", ctypes.c_int ),
	( "height", ctypes.c_int ),
	( "halign", ctypes.c_uint ),
	( "valign", ctypes.c_uint ),
	( "margin", _GtkBorder ),
])

__freeze_rpythonic_struct( _GtkActionPrivate, [
])

__freeze_rpythonic_struct( _GtkAction, [
	( "C_object", _GObject ),
	( "private_data", ctypes.POINTER(_GtkActionPrivate) ),
])

__freeze_rpythonic_struct( _GtkActionClass, [
	( "parent_class", _GObjectClass ),
	( "activate", ctypes.c_void_p ),
	( "menu_item_type", ctypes.c_uint ),
	( "toolbar_item_type", ctypes.c_uint ),
	( "create_menu_item", ctypes.POINTER(ctypes.c_void_p) ),
	( "create_tool_item", ctypes.POINTER(ctypes.c_void_p) ),
	( "connect_proxy", ctypes.c_void_p ),
	( "disconnect_proxy", ctypes.c_void_p ),
	( "create_menu", ctypes.POINTER(ctypes.c_void_p) ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkStockItem, [
	( "stock_id", ctypes.POINTER(ctypes.c_char) ),
	( "label", ctypes.POINTER(ctypes.c_char) ),
	( "modifier", ctypes.c_int ),
	( "keyval", ctypes.c_uint ),
	( "translation_domain", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( _GtkActionGroupPrivate, [
])

__freeze_rpythonic_struct( _GtkActionGroup, [
	( "parent", _GObject ),
	( "priv", ctypes.POINTER(_GtkActionGroupPrivate) ),
])

__freeze_rpythonic_struct( _GtkActionGroupClass, [
	( "parent_class", _GObjectClass ),
	( "get_action", ctypes.POINTER(ctypes.c_void_p) ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkActionEntry, [
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "stock_id", ctypes.POINTER(ctypes.c_char) ),
	( "label", ctypes.POINTER(ctypes.c_char) ),
	( "accelerator", ctypes.POINTER(ctypes.c_char) ),
	( "tooltip", ctypes.POINTER(ctypes.c_char) ),
	( "callback", ctypes.CFUNCTYPE(ctypes.c_void_p, ) ),
])

__freeze_rpythonic_struct( _GtkToggleActionEntry, [
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "stock_id", ctypes.POINTER(ctypes.c_char) ),
	( "label", ctypes.POINTER(ctypes.c_char) ),
	( "accelerator", ctypes.POINTER(ctypes.c_char) ),
	( "tooltip", ctypes.POINTER(ctypes.c_char) ),
	( "callback", ctypes.CFUNCTYPE(ctypes.c_void_p, ) ),
	( "is_active", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GtkRadioActionEntry, [
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "stock_id", ctypes.POINTER(ctypes.c_char) ),
	( "label", ctypes.POINTER(ctypes.c_char) ),
	( "accelerator", ctypes.POINTER(ctypes.c_char) ),
	( "tooltip", ctypes.POINTER(ctypes.c_char) ),
	( "value", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GtkApplicationPrivate, [
])

__freeze_rpythonic_struct( _GtkApplication, [
	( "parent", _GApplication ),
	( "priv", ctypes.POINTER(_GtkApplicationPrivate) ),
])

__freeze_rpythonic_struct( _GtkApplicationClass, [
	( "parent_class", _GApplicationClass ),
	( "window_added", ctypes.c_void_p ),
	( "window_removed", ctypes.c_void_p ),
	( "padding", ctypes.POINTER(( ctypes.c_void_p * 14 )) ),
])

__freeze_rpythonic_struct( _GtkContainerPrivate, [
])

__freeze_rpythonic_struct( _GtkContainer, [
	( "widget", _GtkWidget ),
	( "priv", ctypes.POINTER(_GtkContainerPrivate) ),
])

__freeze_rpythonic_struct( _GtkContainerClass, [
	( "parent_class", _GtkWidgetClass ),
	( "add", ctypes.c_void_p ),
	( "remove", ctypes.c_void_p ),
	( "check_resize", ctypes.c_void_p ),
	( "forall", ctypes.c_void_p ),
	( "set_focus_child", ctypes.c_void_p ),
	( "child_type", ctypes.c_void_p ),
	( "composite_name", ctypes.POINTER(ctypes.c_void_p) ),
	( "set_child_property", ctypes.c_void_p ),
	( "get_child_property", ctypes.c_void_p ),
	( "get_path_for_child", ctypes.POINTER(ctypes.c_void_p) ),
	( "_handle_border_width", ctypes.c_uint ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
	( "_gtk_reserved5", ctypes.c_void_p ),
	( "_gtk_reserved6", ctypes.c_void_p ),
	( "_gtk_reserved7", ctypes.c_void_p ),
	( "_gtk_reserved8", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkBinPrivate, [
])

__freeze_rpythonic_struct( _GtkBin, [
	( "container", _GtkContainer ),
	( "priv", ctypes.POINTER(_GtkBinPrivate) ),
])

__freeze_rpythonic_struct( _GtkBinClass, [
	( "parent_class", _GtkContainerClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkWindowPrivate, [
])

__freeze_rpythonic_struct( _GtkWindowGeometryInfo, [
])

__freeze_rpythonic_struct( _GtkWindowGroupPrivate, [
])

__freeze_rpythonic_struct( _GtkWindow, [
	( "bin", _GtkBin ),
	( "priv", ctypes.POINTER(_GtkWindowPrivate) ),
])

__freeze_rpythonic_struct( _GtkWindowClass, [
	( "parent_class", _GtkBinClass ),
	( "set_focus", ctypes.c_void_p ),
	( "activate_focus", ctypes.c_void_p ),
	( "activate_default", ctypes.c_void_p ),
	( "keys_changed", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkWindowGroup, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GtkWindowGroupPrivate) ),
])

__freeze_rpythonic_struct( _GtkWindowGroupClass, [
	( "parent_class", _GObjectClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkDialogPrivate, [
])

__freeze_rpythonic_struct( _GtkDialog, [
	( "window", _GtkWindow ),
	( "priv", ctypes.POINTER(_GtkDialogPrivate) ),
])

__freeze_rpythonic_struct( _GtkDialogClass, [
	( "parent_class", _GtkWindowClass ),
	( "response", ctypes.c_void_p ),
	( "close", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkAboutDialogPrivate, [
])

__freeze_rpythonic_struct( _GtkAboutDialog, [
	( "parent_instance", _GtkDialog ),
	( "priv", ctypes.POINTER(_GtkAboutDialogPrivate) ),
])

__freeze_rpythonic_struct( _GtkAboutDialogClass, [
	( "parent_class", _GtkDialogClass ),
	( "activate_link", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkMiscPrivate, [
])

__freeze_rpythonic_struct( _GtkMisc, [
	( "widget", _GtkWidget ),
	( "priv", ctypes.POINTER(_GtkMiscPrivate) ),
])

__freeze_rpythonic_struct( _GtkMiscClass, [
	( "parent_class", _GtkWidgetClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkMenuShellPrivate, [
])

__freeze_rpythonic_struct( _GtkMenuShell, [
	( "container", _GtkContainer ),
	( "priv", ctypes.POINTER(_GtkMenuShellPrivate) ),
])

__freeze_rpythonic_struct( _GtkMenuShellClass, [
	( "parent_class", _GtkContainerClass ),
	( "submenu_placement", ctypes.c_uint ),
	( "deactivate", ctypes.c_void_p ),
	( "selection_done", ctypes.c_void_p ),
	( "move_current", ctypes.c_void_p ),
	( "activate_current", ctypes.c_void_p ),
	( "cancel", ctypes.c_void_p ),
	( "select_item", ctypes.c_void_p ),
	( "insert", ctypes.c_void_p ),
	( "get_popup_delay", ctypes.c_void_p ),
	( "move_selected", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkMenuPrivate, [
])

__freeze_rpythonic_struct( _GtkMenu, [
	( "menu_shell", _GtkMenuShell ),
	( "priv", ctypes.POINTER(_GtkMenuPrivate) ),
])

__freeze_rpythonic_struct( _GtkMenuClass, [
	( "parent_class", _GtkMenuShellClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkLabelPrivate, [
])

__freeze_rpythonic_struct( _GtkLabelSelectionInfo, [
])

__freeze_rpythonic_struct( _GtkLabel, [
	( "misc", _GtkMisc ),
	( "priv", ctypes.POINTER(_GtkLabelPrivate) ),
])

__freeze_rpythonic_struct( _GtkLabelClass, [
	( "parent_class", _GtkMiscClass ),
	( "move_cursor", ctypes.c_void_p ),
	( "copy_clipboard", ctypes.c_void_p ),
	( "populate_popup", ctypes.c_void_p ),
	( "activate_link", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
	( "_gtk_reserved5", ctypes.c_void_p ),
	( "_gtk_reserved6", ctypes.c_void_p ),
	( "_gtk_reserved7", ctypes.c_void_p ),
	( "_gtk_reserved8", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkAccelLabelPrivate, [
])

__freeze_rpythonic_struct( _GtkAccelLabel, [
	( "label", _GtkLabel ),
	( "priv", ctypes.POINTER(_GtkAccelLabelPrivate) ),
])

__freeze_rpythonic_struct( _GtkAccelLabelClass, [
	( "parent_class", _GtkLabelClass ),
	( "signal_quote1", ctypes.POINTER(ctypes.c_char) ),
	( "signal_quote2", ctypes.POINTER(ctypes.c_char) ),
	( "mod_name_shift", ctypes.POINTER(ctypes.c_char) ),
	( "mod_name_control", ctypes.POINTER(ctypes.c_char) ),
	( "mod_name_alt", ctypes.POINTER(ctypes.c_char) ),
	( "mod_separator", ctypes.POINTER(ctypes.c_char) ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkAccelMap, [
])

__freeze_rpythonic_struct( _GtkAccelMapClass, [
])

__freeze_rpythonic_struct( _GtkAccessiblePrivate, [
])

__freeze_rpythonic_struct( _GtkAccessible, [
	( "parent", _AtkObject ),
	( "priv", ctypes.POINTER(_GtkAccessiblePrivate) ),
])

__freeze_rpythonic_struct( _GtkAccessibleClass, [
	( "parent_class", _AtkObjectClass ),
	( "connect_widget_destroyed", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkActivatable, [
])

__freeze_rpythonic_struct( _GtkActivatableIface, [
	( "g_iface", _GTypeInterface ),
	( "update", ctypes.c_void_p ),
	( "sync_action_properties", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkAlignmentPrivate, [
])

__freeze_rpythonic_struct( _GtkAlignment, [
	( "bin", _GtkBin ),
	( "priv", ctypes.POINTER(_GtkAlignmentPrivate) ),
])

__freeze_rpythonic_struct( _GtkAlignmentClass, [
	( "parent_class", _GtkBinClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkAppChooser, [
])

__freeze_rpythonic_struct( _GtkAppChooserDialogPrivate, [
])

__freeze_rpythonic_struct( _GtkAppChooserDialog, [
	( "parent", _GtkDialog ),
	( "priv", ctypes.POINTER(_GtkAppChooserDialogPrivate) ),
])

__freeze_rpythonic_struct( _GtkAppChooserDialogClass, [
	( "parent_class", _GtkDialogClass ),
	( "padding", ctypes.POINTER(( ctypes.c_void_p * 16 )) ),
])

__freeze_rpythonic_struct( _GtkBoxPrivate, [
])

__freeze_rpythonic_struct( _GtkBox, [
	( "container", _GtkContainer ),
	( "priv", ctypes.POINTER(_GtkBoxPrivate) ),
])

__freeze_rpythonic_struct( _GtkBoxClass, [
	( "parent_class", _GtkContainerClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkAppChooserWidgetPrivate, [
])

__freeze_rpythonic_struct( _GtkAppChooserWidget, [
	( "parent", _GtkBox ),
	( "priv", ctypes.POINTER(_GtkAppChooserWidgetPrivate) ),
])

__freeze_rpythonic_struct( _GtkAppChooserWidgetClass, [
	( "parent_class", _GtkBoxClass ),
	( "application_selected", ctypes.c_void_p ),
	( "application_activated", ctypes.c_void_p ),
	( "populate_popup", ctypes.c_void_p ),
	( "padding", ctypes.POINTER(( ctypes.c_void_p * 16 )) ),
])

__freeze_rpythonic_struct( _GtkTreePath, [
])

__freeze_rpythonic_struct( _GtkTreeRowReference, [
])

__freeze_rpythonic_struct( _GtkTreeModel, [
])

__freeze_rpythonic_struct( _GtkTreeIter, [
	( "stamp", ctypes.c_int ),
	( "user_data", ctypes.POINTER(ctypes.c_void_p) ),
	( "user_data2", ctypes.POINTER(ctypes.c_void_p) ),
	( "user_data3", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GtkTreeModelIface, [
	( "g_iface", _GTypeInterface ),
	( "row_changed", ctypes.c_void_p ),
	( "row_inserted", ctypes.c_void_p ),
	( "row_has_child_toggled", ctypes.c_void_p ),
	( "row_deleted", ctypes.c_void_p ),
	( "rows_reordered", ctypes.c_void_p ),
	( "get_flags", ctypes.c_void_p ),
	( "get_n_columns", ctypes.c_void_p ),
	( "get_column_type", ctypes.c_void_p ),
	( "get_iter", ctypes.c_void_p ),
	( "get_path", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_value", ctypes.c_void_p ),
	( "iter_next", ctypes.c_void_p ),
	( "iter_previous", ctypes.c_void_p ),
	( "iter_children", ctypes.c_void_p ),
	( "iter_has_child", ctypes.c_void_p ),
	( "iter_n_children", ctypes.c_void_p ),
	( "iter_nth_child", ctypes.c_void_p ),
	( "iter_parent", ctypes.c_void_p ),
	( "ref_node", ctypes.c_void_p ),
	( "unref_node", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkCellEditable, [
])

__freeze_rpythonic_struct( _GtkCellEditableIface, [
	( "g_iface", _GTypeInterface ),
	( "editing_done", ctypes.c_void_p ),
	( "remove_widget", ctypes.c_void_p ),
	( "start_editing", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkCellRendererPrivate, [
])

__freeze_rpythonic_struct( _GtkCellRenderer, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GtkCellRendererPrivate) ),
])

__freeze_rpythonic_struct( _GtkCellRendererClass, [
	( "parent_class", _GObjectClass ),
	( "get_request_mode", ctypes.c_void_p ),
	( "get_preferred_width", ctypes.c_void_p ),
	( "get_preferred_height_for_width", ctypes.c_void_p ),
	( "get_preferred_height", ctypes.c_void_p ),
	( "get_preferred_width_for_height", ctypes.c_void_p ),
	( "get_aligned_area", ctypes.c_void_p ),
	( "get_size", ctypes.c_void_p ),
	( "render", ctypes.c_void_p ),
	( "activate", ctypes.c_void_p ),
	( "start_editing", ctypes.POINTER(ctypes.c_void_p) ),
	( "editing_canceled", ctypes.c_void_p ),
	( "editing_started", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkTreeSortable, [
])

__freeze_rpythonic_struct( _GtkTreeSortableIface, [
	( "g_iface", _GTypeInterface ),
	( "sort_column_changed", ctypes.c_void_p ),
	( "get_sort_column_id", ctypes.c_void_p ),
	( "set_sort_column_id", ctypes.c_void_p ),
	( "set_sort_func", ctypes.c_void_p ),
	( "set_default_sort_func", ctypes.c_void_p ),
	( "has_default_sort_func", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkCellAreaPrivate, [
])

__freeze_rpythonic_struct( _GtkCellArea, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GtkCellAreaPrivate) ),
])

__freeze_rpythonic_struct( _GtkCellAreaClass, [
	( "parent_class", _GObjectClass ),
	( "add", ctypes.c_void_p ),
	( "remove", ctypes.c_void_p ),
	( "foreach", ctypes.c_void_p ),
	( "foreach_alloc", ctypes.c_void_p ),
	( "event", ctypes.c_void_p ),
	( "render", ctypes.c_void_p ),
	( "apply_attributes", ctypes.c_void_p ),
	( "create_context", ctypes.POINTER(ctypes.c_void_p) ),
	( "copy_context", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_request_mode", ctypes.c_void_p ),
	( "get_preferred_width", ctypes.c_void_p ),
	( "get_preferred_height_for_width", ctypes.c_void_p ),
	( "get_preferred_height", ctypes.c_void_p ),
	( "get_preferred_width_for_height", ctypes.c_void_p ),
	( "set_cell_property", ctypes.c_void_p ),
	( "get_cell_property", ctypes.c_void_p ),
	( "focus", ctypes.c_void_p ),
	( "is_activatable", ctypes.c_void_p ),
	( "activate", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
	( "_gtk_reserved5", ctypes.c_void_p ),
	( "_gtk_reserved6", ctypes.c_void_p ),
	( "_gtk_reserved7", ctypes.c_void_p ),
	( "_gtk_reserved8", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkTreeViewColumnPrivate, [
])

__freeze_rpythonic_struct( _GtkTreeViewColumn, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GtkTreeViewColumnPrivate) ),
])

__freeze_rpythonic_struct( _GtkTreeViewColumnClass, [
	( "parent_class", _GObjectClass ),
	( "clicked", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkTextAppearance, [
	( "bg_color", _GdkColor ),
	( "fg_color", _GdkColor ),
	( "rise", ctypes.c_int ),
	( "underline", ctypes.c_uint ),
	( "strikethrough", ctypes.c_uint ),
	( "draw_bg", ctypes.c_uint ),
	( "inside_selection", ctypes.c_uint ),
	( "is_text", ctypes.c_uint ),
	( "rgba", ctypes.POINTER(( _GdkRGBA * 2 )) ),
	( "padding", ( ctypes.c_uint * 2 ) ),
])

__freeze_rpythonic_struct( _GtkTextAttributes, [
	( "refcount", ctypes.c_uint ),
	( "appearance", _GtkTextAppearance ),
	( "justification", ctypes.c_int ),
	( "direction", ctypes.c_int ),
	( "font", ctypes.POINTER(_PangoFontDescription) ),
	( "font_scale", ctypes.c_double ),
	( "left_margin", ctypes.c_int ),
	( "right_margin", ctypes.c_int ),
	( "indent", ctypes.c_int ),
	( "pixels_above_lines", ctypes.c_int ),
	( "pixels_below_lines", ctypes.c_int ),
	( "pixels_inside_wrap", ctypes.c_int ),
	( "tabs", ctypes.POINTER(_PangoTabArray) ),
	( "wrap_mode", ctypes.c_int ),
	( "language", ctypes.POINTER(_PangoLanguage) ),
	( "pg_bg_color", ctypes.POINTER(_GdkColor) ),
	( "invisible", ctypes.c_uint ),
	( "bg_full_height", ctypes.c_uint ),
	( "editable", ctypes.c_uint ),
	( "pg_bg_rgba", ctypes.POINTER(_GdkRGBA) ),
	( "padding", ( ctypes.c_uint * 3 ) ),
])

__freeze_rpythonic_struct( _GtkTextChildAnchor, [
	( "parent_instance", _GObject ),
	( "segment", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GtkTextChildAnchorClass, [
	( "parent_class", _GObjectClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkTextTagPrivate, [
])

__freeze_rpythonic_struct( _GtkTextTag, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GtkTextTagPrivate) ),
])

__freeze_rpythonic_struct( _GtkTextTagClass, [
	( "parent_class", _GObjectClass ),
	( "event", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkTextIter, [
	( "dummy1", ctypes.POINTER(ctypes.c_void_p) ),
	( "dummy2", ctypes.POINTER(ctypes.c_void_p) ),
	( "dummy3", ctypes.c_int ),
	( "dummy4", ctypes.c_int ),
	( "dummy5", ctypes.c_int ),
	( "dummy6", ctypes.c_int ),
	( "dummy7", ctypes.c_int ),
	( "dummy8", ctypes.c_int ),
	( "dummy9", ctypes.POINTER(ctypes.c_void_p) ),
	( "dummy10", ctypes.POINTER(ctypes.c_void_p) ),
	( "dummy11", ctypes.c_int ),
	( "dummy12", ctypes.c_int ),
	( "dummy13", ctypes.c_int ),
	( "dummy14", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GtkTargetList, [
])

__freeze_rpythonic_struct( _GtkTargetEntry, [
	( "target", ctypes.POINTER(ctypes.c_char) ),
	( "flags", ctypes.c_uint ),
	( "info", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GtkEditable, [
])

__freeze_rpythonic_struct( _GtkEditableInterface, [
	( "base_iface", _GTypeInterface ),
	( "insert_text", ctypes.c_void_p ),
	( "delete_text", ctypes.c_void_p ),
	( "changed", ctypes.c_void_p ),
	( "do_insert_text", ctypes.c_void_p ),
	( "do_delete_text", ctypes.c_void_p ),
	( "get_chars", ctypes.POINTER(ctypes.c_void_p) ),
	( "set_selection_bounds", ctypes.c_void_p ),
	( "get_selection_bounds", ctypes.c_void_p ),
	( "set_position", ctypes.c_void_p ),
	( "get_position", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkIMContext, [
	( "parent_instance", _GObject ),
])

__freeze_rpythonic_struct( _GtkIMContextClass, [
	( "parent_class", _GObjectClass ),
	( "preedit_start", ctypes.c_void_p ),
	( "preedit_end", ctypes.c_void_p ),
	( "preedit_changed", ctypes.c_void_p ),
	( "commit", ctypes.c_void_p ),
	( "retrieve_surrounding", ctypes.c_void_p ),
	( "delete_surrounding", ctypes.c_void_p ),
	( "set_client_window", ctypes.c_void_p ),
	( "get_preedit_string", ctypes.c_void_p ),
	( "filter_keypress", ctypes.c_void_p ),
	( "focus_in", ctypes.c_void_p ),
	( "focus_out", ctypes.c_void_p ),
	( "reset", ctypes.c_void_p ),
	( "set_cursor_location", ctypes.c_void_p ),
	( "set_use_preedit", ctypes.c_void_p ),
	( "set_surrounding", ctypes.c_void_p ),
	( "get_surrounding", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
	( "_gtk_reserved5", ctypes.c_void_p ),
	( "_gtk_reserved6", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkEntryBufferPrivate, [
])

__freeze_rpythonic_struct( _GtkEntryBuffer, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GtkEntryBufferPrivate) ),
])

__freeze_rpythonic_struct( _GtkEntryBufferClass, [
	( "parent_class", _GObjectClass ),
	( "inserted_text", ctypes.c_void_p ),
	( "deleted_text", ctypes.c_void_p ),
	( "get_text", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_length", ctypes.c_void_p ),
	( "insert_text", ctypes.c_void_p ),
	( "delete_text", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
	( "_gtk_reserved5", ctypes.c_void_p ),
	( "_gtk_reserved6", ctypes.c_void_p ),
	( "_gtk_reserved7", ctypes.c_void_p ),
	( "_gtk_reserved8", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkListStorePrivate, [
])

__freeze_rpythonic_struct( _GtkListStore, [
	( "parent", _GObject ),
	( "priv", ctypes.POINTER(_GtkListStorePrivate) ),
])

__freeze_rpythonic_struct( _GtkListStoreClass, [
	( "parent_class", _GObjectClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkTreeModelFilterPrivate, [
])

__freeze_rpythonic_struct( _GtkTreeModelFilter, [
	( "parent", _GObject ),
	( "priv", ctypes.POINTER(_GtkTreeModelFilterPrivate) ),
])

__freeze_rpythonic_struct( _GtkTreeModelFilterClass, [
	( "parent_class", _GObjectClass ),
	( "visible", ctypes.c_void_p ),
	( "modify", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkEntryCompletionPrivate, [
])

__freeze_rpythonic_struct( _GtkEntryCompletion, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GtkEntryCompletionPrivate) ),
])

__freeze_rpythonic_struct( _GtkEntryCompletionClass, [
	( "parent_class", _GObjectClass ),
	( "match_selected", ctypes.c_void_p ),
	( "action_activated", ctypes.c_void_p ),
	( "insert_prefix", ctypes.c_void_p ),
	( "cursor_on_match", ctypes.c_void_p ),
	( "_gtk_reserved0", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkImagePrivate, [
])

__freeze_rpythonic_struct( _GtkImage, [
	( "misc", _GtkMisc ),
	( "priv", ctypes.POINTER(_GtkImagePrivate) ),
])

__freeze_rpythonic_struct( _GtkImageClass, [
	( "parent_class", _GtkMiscClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkEntryPrivate, [
])

__freeze_rpythonic_struct( _GtkEntry, [
	( "parent_instance", _GtkWidget ),
	( "priv", ctypes.POINTER(_GtkEntryPrivate) ),
])

__freeze_rpythonic_struct( _GtkEntryClass, [
	( "parent_class", _GtkWidgetClass ),
	( "populate_popup", ctypes.c_void_p ),
	( "activate", ctypes.c_void_p ),
	( "move_cursor", ctypes.c_void_p ),
	( "insert_at_cursor", ctypes.c_void_p ),
	( "delete_from_cursor", ctypes.c_void_p ),
	( "backspace", ctypes.c_void_p ),
	( "cut_clipboard", ctypes.c_void_p ),
	( "copy_clipboard", ctypes.c_void_p ),
	( "paste_clipboard", ctypes.c_void_p ),
	( "toggle_overwrite", ctypes.c_void_p ),
	( "get_text_area_size", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
	( "_gtk_reserved5", ctypes.c_void_p ),
	( "_gtk_reserved6", ctypes.c_void_p ),
	( "_gtk_reserved7", ctypes.c_void_p ),
	( "_gtk_reserved8", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkTreeViewPrivate, [
])

__freeze_rpythonic_struct( _GtkTreeView, [
	( "parent", _GtkContainer ),
	( "priv", ctypes.POINTER(_GtkTreeViewPrivate) ),
])

__freeze_rpythonic_struct( _GtkTreeViewClass, [
	( "parent_class", _GtkContainerClass ),
	( "row_activated", ctypes.c_void_p ),
	( "test_expand_row", ctypes.c_void_p ),
	( "test_collapse_row", ctypes.c_void_p ),
	( "row_expanded", ctypes.c_void_p ),
	( "row_collapsed", ctypes.c_void_p ),
	( "columns_changed", ctypes.c_void_p ),
	( "cursor_changed", ctypes.c_void_p ),
	( "move_cursor", ctypes.c_void_p ),
	( "select_all", ctypes.c_void_p ),
	( "unselect_all", ctypes.c_void_p ),
	( "select_cursor_row", ctypes.c_void_p ),
	( "toggle_cursor_row", ctypes.c_void_p ),
	( "expand_collapse_cursor_row", ctypes.c_void_p ),
	( "select_cursor_parent", ctypes.c_void_p ),
	( "start_interactive_search", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
	( "_gtk_reserved5", ctypes.c_void_p ),
	( "_gtk_reserved6", ctypes.c_void_p ),
	( "_gtk_reserved7", ctypes.c_void_p ),
	( "_gtk_reserved8", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkComboBoxPrivate, [
])

__freeze_rpythonic_struct( _GtkComboBox, [
	( "parent_instance", _GtkBin ),
	( "priv", ctypes.POINTER(_GtkComboBoxPrivate) ),
])

__freeze_rpythonic_struct( _GtkComboBoxClass, [
	( "parent_class", _GtkBinClass ),
	( "changed", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkAppChooserButtonPrivate, [
])

__freeze_rpythonic_struct( _GtkAppChooserButton, [
	( "parent", _GtkComboBox ),
	( "priv", ctypes.POINTER(_GtkAppChooserButtonPrivate) ),
])

__freeze_rpythonic_struct( _GtkAppChooserButtonClass, [
	( "parent_class", _GtkComboBoxClass ),
	( "custom_item_activated", ctypes.c_void_p ),
	( "padding", ctypes.POINTER(( ctypes.c_void_p * 16 )) ),
])

__freeze_rpythonic_struct( _GtkArrowPrivate, [
])

__freeze_rpythonic_struct( _GtkArrow, [
	( "misc", _GtkMisc ),
	( "priv", ctypes.POINTER(_GtkArrowPrivate) ),
])

__freeze_rpythonic_struct( _GtkArrowClass, [
	( "parent_class", _GtkMiscClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkFramePrivate, [
])

__freeze_rpythonic_struct( _GtkFrame, [
	( "bin", _GtkBin ),
	( "priv", ctypes.POINTER(_GtkFramePrivate) ),
])

__freeze_rpythonic_struct( _GtkFrameClass, [
	( "parent_class", _GtkBinClass ),
	( "compute_child_allocation", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkAspectFramePrivate, [
])

__freeze_rpythonic_struct( _GtkAspectFrame, [
	( "frame", _GtkFrame ),
	( "priv", ctypes.POINTER(_GtkAspectFramePrivate) ),
])

__freeze_rpythonic_struct( _GtkAspectFrameClass, [
	( "parent_class", _GtkFrameClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkAssistantPrivate, [
])

__freeze_rpythonic_struct( _GtkAssistant, [
	( "parent", _GtkWindow ),
	( "priv", ctypes.POINTER(_GtkAssistantPrivate) ),
])

__freeze_rpythonic_struct( _GtkAssistantClass, [
	( "parent_class", _GtkWindowClass ),
	( "prepare", ctypes.c_void_p ),
	( "apply", ctypes.c_void_p ),
	( "close", ctypes.c_void_p ),
	( "cancel", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
	( "_gtk_reserved5", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkButtonBoxPrivate, [
])

__freeze_rpythonic_struct( _GtkButtonBox, [
	( "box", _GtkBox ),
	( "priv", ctypes.POINTER(_GtkButtonBoxPrivate) ),
])

__freeze_rpythonic_struct( _GtkButtonBoxClass, [
	( "parent_class", _GtkBoxClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkBindingSet, [
	( "set_name", ctypes.POINTER(ctypes.c_char) ),
	( "priority", ctypes.c_int ),
	( "widget_path_pspecs", ctypes.POINTER(_GSList) ),
	( "widget_class_pspecs", ctypes.POINTER(_GSList) ),
	( "class_branch_pspecs", ctypes.POINTER(_GSList) ),
	( "entries", ctypes.POINTER(_GtkBindingEntry) ),
	( "current", ctypes.POINTER(_GtkBindingEntry) ),
	( "parsed", ctypes.c_uint ),
])

__freeze_rpythonic_struct( d, [
	( "long_data", ctypes.c_long ),
	( "double_data", ctypes.c_double ),
	( "string_data", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( _GtkBindingArg, [
	( "arg_type", ctypes.c_uint ),
	( "d", d ),
])

__freeze_rpythonic_struct( _GtkBindingSignal, [
	( "next", ctypes.POINTER(_GtkBindingSignal) ),
	( "signal_name", ctypes.POINTER(ctypes.c_char) ),
	( "n_args", ctypes.c_uint ),
	( "args", ctypes.POINTER(_GtkBindingArg) ),
])

__freeze_rpythonic_struct( _GtkBindingEntry, [
	( "keyval", ctypes.c_uint ),
	( "modifiers", ctypes.c_int ),
	( "binding_set", ctypes.POINTER(_GtkBindingSet) ),
	( "destroyed", ctypes.c_uint ),
	( "in_emission", ctypes.c_uint ),
	( "marks_unbound", ctypes.c_uint ),
	( "set_next", ctypes.POINTER(_GtkBindingEntry) ),
	( "hash_next", ctypes.POINTER(_GtkBindingEntry) ),
	( "signals", ctypes.POINTER(_GtkBindingSignal) ),
])

__freeze_rpythonic_struct( _GtkBuilderPrivate, [
])

__freeze_rpythonic_struct( _GtkBuilder, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GtkBuilderPrivate) ),
])

__freeze_rpythonic_struct( _GtkBuilderClass, [
	( "parent_class", _GObjectClass ),
	( "get_type_from_name", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
	( "_gtk_reserved5", ctypes.c_void_p ),
	( "_gtk_reserved6", ctypes.c_void_p ),
	( "_gtk_reserved7", ctypes.c_void_p ),
	( "_gtk_reserved8", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkBuildable, [
])

__freeze_rpythonic_struct( _GtkBuildableIface, [
	( "g_iface", _GTypeInterface ),
	( "set_name", ctypes.c_void_p ),
	( "get_name", ctypes.POINTER(ctypes.c_void_p) ),
	( "add_child", ctypes.c_void_p ),
	( "set_buildable_property", ctypes.c_void_p ),
	( "construct_child", ctypes.POINTER(ctypes.c_void_p) ),
	( "custom_tag_start", ctypes.c_void_p ),
	( "custom_tag_end", ctypes.c_void_p ),
	( "custom_finished", ctypes.c_void_p ),
	( "parser_finished", ctypes.c_void_p ),
	( "get_internal_child", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GtkButtonPrivate, [
])

__freeze_rpythonic_struct( _GtkButton, [
	( "bin", _GtkBin ),
	( "priv", ctypes.POINTER(_GtkButtonPrivate) ),
])

__freeze_rpythonic_struct( _GtkButtonClass, [
	( "parent_class", _GtkBinClass ),
	( "pressed", ctypes.c_void_p ),
	( "released", ctypes.c_void_p ),
	( "clicked", ctypes.c_void_p ),
	( "enter", ctypes.c_void_p ),
	( "leave", ctypes.c_void_p ),
	( "activate", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkCalendarPrivate, [
])

__freeze_rpythonic_struct( _GtkCalendar, [
	( "widget", _GtkWidget ),
	( "priv", ctypes.POINTER(_GtkCalendarPrivate) ),
])

__freeze_rpythonic_struct( _GtkCalendarClass, [
	( "parent_class", _GtkWidgetClass ),
	( "month_changed", ctypes.c_void_p ),
	( "day_selected", ctypes.c_void_p ),
	( "day_selected_double_click", ctypes.c_void_p ),
	( "prev_month", ctypes.c_void_p ),
	( "next_month", ctypes.c_void_p ),
	( "prev_year", ctypes.c_void_p ),
	( "next_year", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkCellAreaBoxPrivate, [
])

__freeze_rpythonic_struct( _GtkCellAreaBox, [
	( "parent_instance", _GtkCellArea ),
	( "priv", ctypes.POINTER(_GtkCellAreaBoxPrivate) ),
])

__freeze_rpythonic_struct( _GtkCellAreaBoxClass, [
	( "parent_class", _GtkCellAreaClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkCellAreaContextPrivate, [
])

__freeze_rpythonic_struct( _GtkCellAreaContext, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GtkCellAreaContextPrivate) ),
])

__freeze_rpythonic_struct( _GtkCellAreaContextClass, [
	( "parent_class", _GObjectClass ),
	( "allocate", ctypes.c_void_p ),
	( "reset", ctypes.c_void_p ),
	( "get_preferred_height_for_width", ctypes.c_void_p ),
	( "get_preferred_width_for_height", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
	( "_gtk_reserved5", ctypes.c_void_p ),
	( "_gtk_reserved6", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkCellLayout, [
])

__freeze_rpythonic_struct( _GtkCellLayoutIface, [
	( "g_iface", _GTypeInterface ),
	( "pack_start", ctypes.c_void_p ),
	( "pack_end", ctypes.c_void_p ),
	( "clear", ctypes.c_void_p ),
	( "add_attribute", ctypes.c_void_p ),
	( "set_cell_data_func", ctypes.c_void_p ),
	( "clear_attributes", ctypes.c_void_p ),
	( "reorder", ctypes.c_void_p ),
	( "get_cells", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_area", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GtkCellRendererTextPrivate, [
])

__freeze_rpythonic_struct( _GtkCellRendererText, [
	( "parent", _GtkCellRenderer ),
	( "priv", ctypes.POINTER(_GtkCellRendererTextPrivate) ),
])

__freeze_rpythonic_struct( _GtkCellRendererTextClass, [
	( "parent_class", _GtkCellRendererClass ),
	( "edited", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkCellRendererAccelPrivate, [
])

__freeze_rpythonic_struct( _GtkCellRendererAccel, [
	( "parent", _GtkCellRendererText ),
	( "priv", ctypes.POINTER(_GtkCellRendererAccelPrivate) ),
])

__freeze_rpythonic_struct( _GtkCellRendererAccelClass, [
	( "parent_class", _GtkCellRendererTextClass ),
	( "accel_edited", ctypes.c_void_p ),
	( "accel_cleared", ctypes.c_void_p ),
	( "_gtk_reserved0", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkCellRendererComboPrivate, [
])

__freeze_rpythonic_struct( _GtkCellRendererCombo, [
	( "parent", _GtkCellRendererText ),
	( "priv", ctypes.POINTER(_GtkCellRendererComboPrivate) ),
])

__freeze_rpythonic_struct( _GtkCellRendererComboClass, [
	( "parent", _GtkCellRendererTextClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkCellRendererPixbufPrivate, [
])

__freeze_rpythonic_struct( _GtkCellRendererPixbuf, [
	( "parent", _GtkCellRenderer ),
	( "priv", ctypes.POINTER(_GtkCellRendererPixbufPrivate) ),
])

__freeze_rpythonic_struct( _GtkCellRendererPixbufClass, [
	( "parent_class", _GtkCellRendererClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkCellRendererProgressPrivate, [
])

__freeze_rpythonic_struct( _GtkCellRendererProgress, [
	( "parent_instance", _GtkCellRenderer ),
	( "priv", ctypes.POINTER(_GtkCellRendererProgressPrivate) ),
])

__freeze_rpythonic_struct( _GtkCellRendererProgressClass, [
	( "parent_class", _GtkCellRendererClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkCellRendererSpinPrivate, [
])

__freeze_rpythonic_struct( _GtkCellRendererSpin, [
	( "parent", _GtkCellRendererText ),
	( "priv", ctypes.POINTER(_GtkCellRendererSpinPrivate) ),
])

__freeze_rpythonic_struct( _GtkCellRendererSpinClass, [
	( "parent", _GtkCellRendererTextClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkCellRendererSpinnerPrivate, [
])

__freeze_rpythonic_struct( _GtkCellRendererSpinner, [
	( "parent", _GtkCellRenderer ),
	( "priv", ctypes.POINTER(_GtkCellRendererSpinnerPrivate) ),
])

__freeze_rpythonic_struct( _GtkCellRendererSpinnerClass, [
	( "parent_class", _GtkCellRendererClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkCellRendererTogglePrivate, [
])

__freeze_rpythonic_struct( _GtkCellRendererToggle, [
	( "parent", _GtkCellRenderer ),
	( "priv", ctypes.POINTER(_GtkCellRendererTogglePrivate) ),
])

__freeze_rpythonic_struct( _GtkCellRendererToggleClass, [
	( "parent_class", _GtkCellRendererClass ),
	( "toggled", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkCellViewPrivate, [
])

__freeze_rpythonic_struct( _GtkCellView, [
	( "parent_instance", _GtkWidget ),
	( "priv", ctypes.POINTER(_GtkCellViewPrivate) ),
])

__freeze_rpythonic_struct( _GtkCellViewClass, [
	( "parent_class", _GtkWidgetClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkToggleButtonPrivate, [
])

__freeze_rpythonic_struct( _GtkToggleButton, [
	( "button", _GtkButton ),
	( "priv", ctypes.POINTER(_GtkToggleButtonPrivate) ),
])

__freeze_rpythonic_struct( _GtkToggleButtonClass, [
	( "parent_class", _GtkButtonClass ),
	( "toggled", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkCheckButton, [
	( "toggle_button", _GtkToggleButton ),
])

__freeze_rpythonic_struct( _GtkCheckButtonClass, [
	( "parent_class", _GtkToggleButtonClass ),
	( "draw_indicator", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkMenuItemPrivate, [
])

__freeze_rpythonic_struct( _GtkMenuItem, [
	( "bin", _GtkBin ),
	( "priv", ctypes.POINTER(_GtkMenuItemPrivate) ),
])

__freeze_rpythonic_struct( _GtkMenuItemClass, [
	( "parent_class", _GtkBinClass ),
	( "hide_on_activate", ctypes.c_uint ),
	( "activate", ctypes.c_void_p ),
	( "activate_item", ctypes.c_void_p ),
	( "toggle_size_request", ctypes.c_void_p ),
	( "toggle_size_allocate", ctypes.c_void_p ),
	( "set_label", ctypes.c_void_p ),
	( "get_label", ctypes.POINTER(ctypes.c_void_p) ),
	( "select", ctypes.c_void_p ),
	( "deselect", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkCheckMenuItemPrivate, [
])

__freeze_rpythonic_struct( _GtkCheckMenuItem, [
	( "menu_item", _GtkMenuItem ),
	( "priv", ctypes.POINTER(_GtkCheckMenuItemPrivate) ),
])

__freeze_rpythonic_struct( _GtkCheckMenuItemClass, [
	( "parent_class", _GtkMenuItemClass ),
	( "toggled", ctypes.c_void_p ),
	( "draw_indicator", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkColorButtonPrivate, [
])

__freeze_rpythonic_struct( _GtkColorButton, [
	( "button", _GtkButton ),
	( "priv", ctypes.POINTER(_GtkColorButtonPrivate) ),
])

__freeze_rpythonic_struct( _GtkColorButtonClass, [
	( "parent_class", _GtkButtonClass ),
	( "color_set", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkColorSelectionPrivate, [
])

__freeze_rpythonic_struct( _GtkColorSelection, [
	( "parent_instance", _GtkBox ),
	( "private_data", ctypes.POINTER(_GtkColorSelectionPrivate) ),
])

__freeze_rpythonic_struct( _GtkColorSelectionClass, [
	( "parent_class", _GtkBoxClass ),
	( "color_changed", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkColorSelectionDialogPrivate, [
])

__freeze_rpythonic_struct( _GtkColorSelectionDialog, [
	( "parent_instance", _GtkDialog ),
	( "priv", ctypes.POINTER(_GtkColorSelectionDialogPrivate) ),
])

__freeze_rpythonic_struct( _GtkColorSelectionDialogClass, [
	( "parent_class", _GtkDialogClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkComboBoxTextPrivate, [
])

__freeze_rpythonic_struct( _GtkComboBoxText, [
	( "parent_instance", _GtkComboBox ),
	( "priv", ctypes.POINTER(_GtkComboBoxTextPrivate) ),
])

__freeze_rpythonic_struct( _GtkComboBoxTextClass, [
	( "parent_class", _GtkComboBoxClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkCssSection, [
])

__freeze_rpythonic_struct( _GtkCssProviderPrivate, [
])

__freeze_rpythonic_struct( _GtkCssProvider, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GtkCssProviderPrivate) ),
])

__freeze_rpythonic_struct( _GtkCssProviderClass, [
	( "parent_class", _GObjectClass ),
	( "parsing_error", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkDrawingArea, [
	( "widget", _GtkWidget ),
	( "dummy", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GtkDrawingAreaClass, [
	( "parent_class", _GtkWidgetClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkEventBoxPrivate, [
])

__freeze_rpythonic_struct( _GtkEventBox, [
	( "bin", _GtkBin ),
	( "priv", ctypes.POINTER(_GtkEventBoxPrivate) ),
])

__freeze_rpythonic_struct( _GtkEventBoxClass, [
	( "parent_class", _GtkBinClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkExpanderPrivate, [
])

__freeze_rpythonic_struct( _GtkExpander, [
	( "bin", _GtkBin ),
	( "priv", ctypes.POINTER(_GtkExpanderPrivate) ),
])

__freeze_rpythonic_struct( _GtkExpanderClass, [
	( "parent_class", _GtkBinClass ),
	( "activate", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkFixedPrivate, [
])

__freeze_rpythonic_struct( _GtkFixed, [
	( "container", _GtkContainer ),
	( "priv", ctypes.POINTER(_GtkFixedPrivate) ),
])

__freeze_rpythonic_struct( _GtkFixedClass, [
	( "parent_class", _GtkContainerClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkFixedChild, [
	( "widget", ctypes.POINTER(_GtkWidget) ),
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GtkFileFilter, [
])

__freeze_rpythonic_struct( _GtkFileFilterInfo, [
	( "contains", ctypes.c_int ),
	( "filename", ctypes.POINTER(ctypes.c_char) ),
	( "uri", ctypes.POINTER(ctypes.c_char) ),
	( "display_name", ctypes.POINTER(ctypes.c_char) ),
	( "mime_type", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( _GtkFileChooser, [
])

__freeze_rpythonic_struct( _GtkFileChooserButtonPrivate, [
])

__freeze_rpythonic_struct( _GtkFileChooserButton, [
	( "parent", _GtkBox ),
	( "priv", ctypes.POINTER(_GtkFileChooserButtonPrivate) ),
])

__freeze_rpythonic_struct( _GtkFileChooserButtonClass, [
	( "parent_class", _GtkBoxClass ),
	( "file_set", ctypes.c_void_p ),
	( "__gtk_reserved1", ctypes.POINTER(ctypes.c_void_p) ),
	( "__gtk_reserved2", ctypes.POINTER(ctypes.c_void_p) ),
	( "__gtk_reserved3", ctypes.POINTER(ctypes.c_void_p) ),
	( "__gtk_reserved4", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GtkFileChooserDialogPrivate, [
])

__freeze_rpythonic_struct( _GtkFileChooserDialog, [
	( "parent_instance", _GtkDialog ),
	( "priv", ctypes.POINTER(_GtkFileChooserDialogPrivate) ),
])

__freeze_rpythonic_struct( _GtkFileChooserDialogClass, [
	( "parent_class", _GtkDialogClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkFileChooserWidgetPrivate, [
])

__freeze_rpythonic_struct( _GtkFileChooserWidget, [
	( "parent_instance", _GtkBox ),
	( "priv", ctypes.POINTER(_GtkFileChooserWidgetPrivate) ),
])

__freeze_rpythonic_struct( _GtkFileChooserWidgetClass, [
	( "parent_class", _GtkBoxClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkFontButtonPrivate, [
])

__freeze_rpythonic_struct( _GtkFontButton, [
	( "button", _GtkButton ),
	( "priv", ctypes.POINTER(_GtkFontButtonPrivate) ),
])

__freeze_rpythonic_struct( _GtkFontButtonClass, [
	( "parent_class", _GtkButtonClass ),
	( "font_set", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkFontSelectionPrivate, [
])

__freeze_rpythonic_struct( _GtkFontSelectionDialogPrivate, [
])

__freeze_rpythonic_struct( _GtkFontSelection, [
	( "parent_instance", _GtkBox ),
	( "priv", ctypes.POINTER(_GtkFontSelectionPrivate) ),
])

__freeze_rpythonic_struct( _GtkFontSelectionClass, [
	( "parent_class", _GtkBoxClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkFontSelectionDialog, [
	( "parent_instance", _GtkDialog ),
	( "priv", ctypes.POINTER(_GtkFontSelectionDialogPrivate) ),
])

__freeze_rpythonic_struct( _GtkFontSelectionDialogClass, [
	( "parent_class", _GtkDialogClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkFontChooser, [
])

__freeze_rpythonic_struct( _GtkFontChooserIface, [
	( "base_iface", _GTypeInterface ),
	( "get_font_family", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_font_face", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_font_size", ctypes.c_void_p ),
	( "set_filter_func", ctypes.c_void_p ),
	( "font_activated", ctypes.c_void_p ),
	( "padding", ctypes.POINTER(( ctypes.c_void_p * 12 )) ),
])

__freeze_rpythonic_struct( _GtkFontChooserDialogPrivate, [
])

__freeze_rpythonic_struct( _GtkFontChooserDialog, [
	( "parent_instance", _GtkDialog ),
	( "priv", ctypes.POINTER(_GtkFontChooserDialogPrivate) ),
])

__freeze_rpythonic_struct( _GtkFontChooserDialogClass, [
	( "parent_class", _GtkDialogClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkFontChooserWidgetPrivate, [
])

__freeze_rpythonic_struct( _GtkFontChooserWidget, [
	( "parent_instance", _GtkBox ),
	( "priv", ctypes.POINTER(_GtkFontChooserWidgetPrivate) ),
])

__freeze_rpythonic_struct( _GtkFontChooserWidgetClass, [
	( "parent_class", _GtkBoxClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
	( "_gtk_reserved5", ctypes.c_void_p ),
	( "_gtk_reserved6", ctypes.c_void_p ),
	( "_gtk_reserved7", ctypes.c_void_p ),
	( "_gtk_reserved8", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkGridPrivate, [
])

__freeze_rpythonic_struct( _GtkGrid, [
	( "container", _GtkContainer ),
	( "priv", ctypes.POINTER(_GtkGridPrivate) ),
])

__freeze_rpythonic_struct( _GtkGridClass, [
	( "parent_class", _GtkContainerClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
	( "_gtk_reserved5", ctypes.c_void_p ),
	( "_gtk_reserved6", ctypes.c_void_p ),
	( "_gtk_reserved7", ctypes.c_void_p ),
	( "_gtk_reserved8", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkHandleBoxPrivate, [
])

__freeze_rpythonic_struct( _GtkHandleBox, [
	( "bin", _GtkBin ),
	( "priv", ctypes.POINTER(_GtkHandleBoxPrivate) ),
])

__freeze_rpythonic_struct( _GtkHandleBoxClass, [
	( "parent_class", _GtkBinClass ),
	( "child_attached", ctypes.c_void_p ),
	( "child_detached", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkHButtonBox, [
	( "button_box", _GtkButtonBox ),
])

__freeze_rpythonic_struct( _GtkHButtonBoxClass, [
	( "parent_class", _GtkButtonBoxClass ),
])

__freeze_rpythonic_struct( _GtkHBox, [
	( "box", _GtkBox ),
])

__freeze_rpythonic_struct( _GtkHBoxClass, [
	( "parent_class", _GtkBoxClass ),
])

__freeze_rpythonic_struct( _GtkPanedPrivate, [
])

__freeze_rpythonic_struct( _GtkPaned, [
	( "container", _GtkContainer ),
	( "priv", ctypes.POINTER(_GtkPanedPrivate) ),
])

__freeze_rpythonic_struct( _GtkPanedClass, [
	( "parent_class", _GtkContainerClass ),
	( "cycle_child_focus", ctypes.c_void_p ),
	( "toggle_handle_focus", ctypes.c_void_p ),
	( "move_handle", ctypes.c_void_p ),
	( "cycle_handle_focus", ctypes.c_void_p ),
	( "accept_position", ctypes.c_void_p ),
	( "cancel_position", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkHPaned, [
	( "paned", _GtkPaned ),
])

__freeze_rpythonic_struct( _GtkHPanedClass, [
	( "parent_class", _GtkPanedClass ),
])

__freeze_rpythonic_struct( _GtkRangePrivate, [
])

__freeze_rpythonic_struct( _GtkRange, [
	( "widget", _GtkWidget ),
	( "priv", ctypes.POINTER(_GtkRangePrivate) ),
])

__freeze_rpythonic_struct( _GtkRangeClass, [
	( "parent_class", _GtkWidgetClass ),
	( "slider_detail", ctypes.POINTER(ctypes.c_char) ),
	( "stepper_detail", ctypes.POINTER(ctypes.c_char) ),
	( "value_changed", ctypes.c_void_p ),
	( "adjust_bounds", ctypes.c_void_p ),
	( "move_slider", ctypes.c_void_p ),
	( "get_range_border", ctypes.c_void_p ),
	( "change_value", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkScalePrivate, [
])

__freeze_rpythonic_struct( _GtkScale, [
	( "C_range", _GtkRange ),
	( "priv", ctypes.POINTER(_GtkScalePrivate) ),
])

__freeze_rpythonic_struct( _GtkScaleClass, [
	( "parent_class", _GtkRangeClass ),
	( "format_value", ctypes.POINTER(ctypes.c_void_p) ),
	( "draw_value", ctypes.c_void_p ),
	( "get_layout_offsets", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkHScale, [
	( "scale", _GtkScale ),
])

__freeze_rpythonic_struct( _GtkHScaleClass, [
	( "parent_class", _GtkScaleClass ),
])

__freeze_rpythonic_struct( _GtkScrollbar, [
	( "C_range", _GtkRange ),
])

__freeze_rpythonic_struct( _GtkScrollbarClass, [
	( "parent_class", _GtkRangeClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkHScrollbar, [
	( "scrollbar", _GtkScrollbar ),
])

__freeze_rpythonic_struct( _GtkHScrollbarClass, [
	( "parent_class", _GtkScrollbarClass ),
])

__freeze_rpythonic_struct( _GtkSeparatorPrivate, [
])

__freeze_rpythonic_struct( _GtkSeparator, [
	( "widget", _GtkWidget ),
	( "priv", ctypes.POINTER(_GtkSeparatorPrivate) ),
])

__freeze_rpythonic_struct( _GtkSeparatorClass, [
	( "parent_class", _GtkWidgetClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkHSeparator, [
	( "separator", _GtkSeparator ),
])

__freeze_rpythonic_struct( _GtkHSeparatorClass, [
	( "parent_class", _GtkSeparatorClass ),
])

__freeze_rpythonic_struct( _GtkHSVPrivate, [
])

__freeze_rpythonic_struct( _GtkHSV, [
	( "parent_instance", _GtkWidget ),
	( "priv", ctypes.POINTER(_GtkHSVPrivate) ),
])

__freeze_rpythonic_struct( _GtkHSVClass, [
	( "parent_class", _GtkWidgetClass ),
	( "changed", ctypes.c_void_p ),
	( "move", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkIconInfo, [
])

__freeze_rpythonic_struct( _GtkIconThemePrivate, [
])

__freeze_rpythonic_struct( _GtkIconTheme, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GtkIconThemePrivate) ),
])

__freeze_rpythonic_struct( _GtkIconThemeClass, [
	( "parent_class", _GObjectClass ),
	( "changed", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkIconViewPrivate, [
])

__freeze_rpythonic_struct( _GtkIconView, [
	( "parent", _GtkContainer ),
	( "priv", ctypes.POINTER(_GtkIconViewPrivate) ),
])

__freeze_rpythonic_struct( _GtkIconViewClass, [
	( "parent_class", _GtkContainerClass ),
	( "item_activated", ctypes.c_void_p ),
	( "selection_changed", ctypes.c_void_p ),
	( "select_all", ctypes.c_void_p ),
	( "unselect_all", ctypes.c_void_p ),
	( "select_cursor_item", ctypes.c_void_p ),
	( "toggle_cursor_item", ctypes.c_void_p ),
	( "move_cursor", ctypes.c_void_p ),
	( "activate_cursor_item", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkImageMenuItemPrivate, [
])

__freeze_rpythonic_struct( _GtkImageMenuItem, [
	( "menu_item", _GtkMenuItem ),
	( "priv", ctypes.POINTER(_GtkImageMenuItemPrivate) ),
])

__freeze_rpythonic_struct( _GtkImageMenuItemClass, [
	( "parent_class", _GtkMenuItemClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkIMContextSimplePrivate, [
])

__freeze_rpythonic_struct( _GtkIMContextSimple, [
	( "C_object", _GtkIMContext ),
	( "priv", ctypes.POINTER(_GtkIMContextSimplePrivate) ),
])

__freeze_rpythonic_struct( _GtkIMContextSimpleClass, [
	( "parent_class", _GtkIMContextClass ),
])

__freeze_rpythonic_struct( _GtkIMMulticontextPrivate, [
])

__freeze_rpythonic_struct( _GtkIMMulticontext, [
	( "C_object", _GtkIMContext ),
	( "priv", ctypes.POINTER(_GtkIMMulticontextPrivate) ),
])

__freeze_rpythonic_struct( _GtkIMMulticontextClass, [
	( "parent_class", _GtkIMContextClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkInfoBarPrivate, [
])

__freeze_rpythonic_struct( _GtkInfoBar, [
	( "parent", _GtkBox ),
	( "priv", ctypes.POINTER(_GtkInfoBarPrivate) ),
])

__freeze_rpythonic_struct( _GtkInfoBarClass, [
	( "parent_class", _GtkBoxClass ),
	( "response", ctypes.c_void_p ),
	( "close", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkInvisiblePrivate, [
])

__freeze_rpythonic_struct( _GtkInvisible, [
	( "widget", _GtkWidget ),
	( "priv", ctypes.POINTER(_GtkInvisiblePrivate) ),
])

__freeze_rpythonic_struct( _GtkInvisibleClass, [
	( "parent_class", _GtkWidgetClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkLayoutPrivate, [
])

__freeze_rpythonic_struct( _GtkLayout, [
	( "container", _GtkContainer ),
	( "priv", ctypes.POINTER(_GtkLayoutPrivate) ),
])

__freeze_rpythonic_struct( _GtkLayoutClass, [
	( "parent_class", _GtkContainerClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkLinkButtonPrivate, [
])

__freeze_rpythonic_struct( _GtkLinkButton, [
	( "parent_instance", _GtkButton ),
	( "priv", ctypes.POINTER(_GtkLinkButtonPrivate) ),
])

__freeze_rpythonic_struct( _GtkLinkButtonClass, [
	( "parent_class", _GtkButtonClass ),
	( "activate_link", ctypes.c_void_p ),
	( "_gtk_padding1", ctypes.c_void_p ),
	( "_gtk_padding2", ctypes.c_void_p ),
	( "_gtk_padding3", ctypes.c_void_p ),
	( "_gtk_padding4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkLockButtonPrivate, [
])

__freeze_rpythonic_struct( _GtkLockButton, [
	( "parent", _GtkButton ),
	( "priv", ctypes.POINTER(_GtkLockButtonPrivate) ),
])

__freeze_rpythonic_struct( _GtkLockButtonClass, [
	( "parent_class", _GtkButtonClass ),
	( "reserved0", ctypes.c_void_p ),
	( "reserved1", ctypes.c_void_p ),
	( "reserved2", ctypes.c_void_p ),
	( "reserved3", ctypes.c_void_p ),
	( "reserved4", ctypes.c_void_p ),
	( "reserved5", ctypes.c_void_p ),
	( "reserved6", ctypes.c_void_p ),
	( "reserved7", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkMenuBarPrivate, [
])

__freeze_rpythonic_struct( _GtkMenuBar, [
	( "menu_shell", _GtkMenuShell ),
	( "priv", ctypes.POINTER(_GtkMenuBarPrivate) ),
])

__freeze_rpythonic_struct( _GtkMenuBarClass, [
	( "parent_class", _GtkMenuShellClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkSizeGroupPrivate, [
])

__freeze_rpythonic_struct( _GtkSizeGroup, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GtkSizeGroupPrivate) ),
])

__freeze_rpythonic_struct( _GtkSizeGroupClass, [
	( "parent_class", _GObjectClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkToolItemPrivate, [
])

__freeze_rpythonic_struct( _GtkToolItem, [
	( "parent", _GtkBin ),
	( "priv", ctypes.POINTER(_GtkToolItemPrivate) ),
])

__freeze_rpythonic_struct( _GtkToolItemClass, [
	( "parent_class", _GtkBinClass ),
	( "create_menu_proxy", ctypes.c_void_p ),
	( "toolbar_reconfigured", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkToolButtonPrivate, [
])

__freeze_rpythonic_struct( _GtkToolButton, [
	( "parent", _GtkToolItem ),
	( "priv", ctypes.POINTER(_GtkToolButtonPrivate) ),
])

__freeze_rpythonic_struct( _GtkToolButtonClass, [
	( "parent_class", _GtkToolItemClass ),
	( "button_type", ctypes.c_uint ),
	( "clicked", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkMenuToolButtonPrivate, [
])

__freeze_rpythonic_struct( _GtkMenuToolButton, [
	( "parent", _GtkToolButton ),
	( "priv", ctypes.POINTER(_GtkMenuToolButtonPrivate) ),
])

__freeze_rpythonic_struct( _GtkMenuToolButtonClass, [
	( "parent_class", _GtkToolButtonClass ),
	( "show_menu", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkMessageDialogPrivate, [
])

__freeze_rpythonic_struct( _GtkMessageDialog, [
	( "parent_instance", _GtkDialog ),
	( "priv", ctypes.POINTER(_GtkMessageDialogPrivate) ),
])

__freeze_rpythonic_struct( _GtkMessageDialogClass, [
	( "parent_class", _GtkDialogClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkMountOperationPrivate, [
])

__freeze_rpythonic_struct( _GtkMountOperation, [
	( "parent_instance", _GMountOperation ),
	( "priv", ctypes.POINTER(_GtkMountOperationPrivate) ),
])

__freeze_rpythonic_struct( _GtkMountOperationClass, [
	( "parent_class", _GMountOperationClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkNotebookPrivate, [
])

__freeze_rpythonic_struct( _GtkNotebook, [
	( "container", _GtkContainer ),
	( "priv", ctypes.POINTER(_GtkNotebookPrivate) ),
])

__freeze_rpythonic_struct( _GtkNotebookClass, [
	( "parent_class", _GtkContainerClass ),
	( "switch_page", ctypes.c_void_p ),
	( "select_page", ctypes.c_void_p ),
	( "focus_tab", ctypes.c_void_p ),
	( "change_current_page", ctypes.c_void_p ),
	( "move_focus_out", ctypes.c_void_p ),
	( "reorder_tab", ctypes.c_void_p ),
	( "insert_page", ctypes.c_void_p ),
	( "create_window", ctypes.POINTER(ctypes.c_void_p) ),
	( "page_reordered", ctypes.c_void_p ),
	( "page_removed", ctypes.c_void_p ),
	( "page_added", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
	( "_gtk_reserved5", ctypes.c_void_p ),
	( "_gtk_reserved6", ctypes.c_void_p ),
	( "_gtk_reserved7", ctypes.c_void_p ),
	( "_gtk_reserved8", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkNumerableIconPrivate, [
])

__freeze_rpythonic_struct( _GtkNumerableIcon, [
	( "parent", _GEmblemedIcon ),
	( "priv", ctypes.POINTER(_GtkNumerableIconPrivate) ),
])

__freeze_rpythonic_struct( _GtkNumerableIconClass, [
	( "parent_class", _GEmblemedIconClass ),
	( "padding", ctypes.POINTER(( ctypes.c_void_p * 16 )) ),
])

__freeze_rpythonic_struct( _GtkOffscreenWindow, [
	( "parent_object", _GtkWindow ),
])

__freeze_rpythonic_struct( _GtkOffscreenWindowClass, [
	( "parent_class", _GtkWindowClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkOrientable, [
])

__freeze_rpythonic_struct( _GtkOrientableIface, [
	( "base_iface", _GTypeInterface ),
])

__freeze_rpythonic_struct( _GtkOverlayPrivate, [
])

__freeze_rpythonic_struct( _GtkOverlay, [
	( "parent", _GtkBin ),
	( "priv", ctypes.POINTER(_GtkOverlayPrivate) ),
])

__freeze_rpythonic_struct( _GtkOverlayClass, [
	( "parent_class", _GtkBinClass ),
	( "get_child_position", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
	( "_gtk_reserved5", ctypes.c_void_p ),
	( "_gtk_reserved6", ctypes.c_void_p ),
	( "_gtk_reserved7", ctypes.c_void_p ),
	( "_gtk_reserved8", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkPaperSize, [
])

__freeze_rpythonic_struct( _GtkPageSetup, [
])

__freeze_rpythonic_struct( _GtkPrintContext, [
])

__freeze_rpythonic_struct( _GtkPrintSettings, [
])

__freeze_rpythonic_struct( _GtkPageRange, [
	( "start", ctypes.c_int ),
	( "end", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GtkPrintOperationPreview, [
])

__freeze_rpythonic_struct( _GtkPrintOperationPreviewIface, [
	( "g_iface", _GTypeInterface ),
	( "ready", ctypes.c_void_p ),
	( "got_page_size", ctypes.c_void_p ),
	( "render_page", ctypes.c_void_p ),
	( "is_selected", ctypes.c_void_p ),
	( "end_preview", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
	( "_gtk_reserved5", ctypes.c_void_p ),
	( "_gtk_reserved6", ctypes.c_void_p ),
	( "_gtk_reserved7", ctypes.c_void_p ),
	( "_gtk_reserved8", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkPrintOperationPrivate, [
])

__freeze_rpythonic_struct( _GtkPrintOperation, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GtkPrintOperationPrivate) ),
])

__freeze_rpythonic_struct( _GtkPrintOperationClass, [
	( "parent_class", _GObjectClass ),
	( "done", ctypes.c_void_p ),
	( "begin_print", ctypes.c_void_p ),
	( "paginate", ctypes.c_void_p ),
	( "request_page_setup", ctypes.c_void_p ),
	( "draw_page", ctypes.c_void_p ),
	( "end_print", ctypes.c_void_p ),
	( "status_changed", ctypes.c_void_p ),
	( "create_custom_widget", ctypes.POINTER(ctypes.c_void_p) ),
	( "custom_widget_apply", ctypes.c_void_p ),
	( "preview", ctypes.c_void_p ),
	( "update_custom_widget", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
	( "_gtk_reserved5", ctypes.c_void_p ),
	( "_gtk_reserved6", ctypes.c_void_p ),
	( "_gtk_reserved7", ctypes.c_void_p ),
	( "_gtk_reserved8", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkProgressBarPrivate, [
])

__freeze_rpythonic_struct( _GtkProgressBar, [
	( "parent", _GtkWidget ),
	( "priv", ctypes.POINTER(_GtkProgressBarPrivate) ),
])

__freeze_rpythonic_struct( _GtkProgressBarClass, [
	( "parent_class", _GtkWidgetClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkToggleActionPrivate, [
])

__freeze_rpythonic_struct( _GtkToggleAction, [
	( "parent", _GtkAction ),
	( "private_data", ctypes.POINTER(_GtkToggleActionPrivate) ),
])

__freeze_rpythonic_struct( _GtkToggleActionClass, [
	( "parent_class", _GtkActionClass ),
	( "toggled", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkRadioActionPrivate, [
])

__freeze_rpythonic_struct( _GtkRadioAction, [
	( "parent", _GtkToggleAction ),
	( "private_data", ctypes.POINTER(_GtkRadioActionPrivate) ),
])

__freeze_rpythonic_struct( _GtkRadioActionClass, [
	( "parent_class", _GtkToggleActionClass ),
	( "changed", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkRadioButtonPrivate, [
])

__freeze_rpythonic_struct( _GtkRadioButton, [
	( "check_button", _GtkCheckButton ),
	( "priv", ctypes.POINTER(_GtkRadioButtonPrivate) ),
])

__freeze_rpythonic_struct( _GtkRadioButtonClass, [
	( "parent_class", _GtkCheckButtonClass ),
	( "group_changed", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkRadioMenuItemPrivate, [
])

__freeze_rpythonic_struct( _GtkRadioMenuItem, [
	( "check_menu_item", _GtkCheckMenuItem ),
	( "priv", ctypes.POINTER(_GtkRadioMenuItemPrivate) ),
])

__freeze_rpythonic_struct( _GtkRadioMenuItemClass, [
	( "parent_class", _GtkCheckMenuItemClass ),
	( "group_changed", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkToggleToolButtonPrivate, [
])

__freeze_rpythonic_struct( _GtkToggleToolButton, [
	( "parent", _GtkToolButton ),
	( "priv", ctypes.POINTER(_GtkToggleToolButtonPrivate) ),
])

__freeze_rpythonic_struct( _GtkToggleToolButtonClass, [
	( "parent_class", _GtkToolButtonClass ),
	( "toggled", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkRadioToolButton, [
	( "parent", _GtkToggleToolButton ),
])

__freeze_rpythonic_struct( _GtkRadioToolButtonClass, [
	( "parent_class", _GtkToggleToolButtonClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkRecentInfo, [
])

__freeze_rpythonic_struct( _GtkRecentManagerPrivate, [
])

__freeze_rpythonic_struct( _GtkRecentData, [
	( "display_name", ctypes.POINTER(ctypes.c_char) ),
	( "description", ctypes.POINTER(ctypes.c_char) ),
	( "mime_type", ctypes.POINTER(ctypes.c_char) ),
	( "app_name", ctypes.POINTER(ctypes.c_char) ),
	( "app_exec", ctypes.POINTER(ctypes.c_char) ),
	( "groups", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)) ),
	( "is_private", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GtkRecentManager, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GtkRecentManagerPrivate) ),
])

__freeze_rpythonic_struct( _GtkRecentManagerClass, [
	( "parent_class", _GObjectClass ),
	( "changed", ctypes.c_void_p ),
	( "_gtk_recent1", ctypes.c_void_p ),
	( "_gtk_recent2", ctypes.c_void_p ),
	( "_gtk_recent3", ctypes.c_void_p ),
	( "_gtk_recent4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkRecentActionPrivate, [
])

__freeze_rpythonic_struct( _GtkRecentAction, [
	( "parent_instance", _GtkAction ),
	( "priv", ctypes.POINTER(_GtkRecentActionPrivate) ),
])

__freeze_rpythonic_struct( _GtkRecentActionClass, [
	( "parent_class", _GtkActionClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkRecentFilter, [
])

__freeze_rpythonic_struct( _GtkRecentFilterInfo, [
	( "contains", ctypes.c_int ),
	( "uri", ctypes.POINTER(ctypes.c_char) ),
	( "display_name", ctypes.POINTER(ctypes.c_char) ),
	( "mime_type", ctypes.POINTER(ctypes.c_char) ),
	( "applications", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)) ),
	( "groups", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)) ),
	( "age", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GtkRecentChooser, [
])

__freeze_rpythonic_struct( _GtkRecentChooserIface, [
	( "base_iface", _GTypeInterface ),
	( "set_current_uri", ctypes.c_void_p ),
	( "get_current_uri", ctypes.POINTER(ctypes.c_void_p) ),
	( "select_uri", ctypes.c_void_p ),
	( "unselect_uri", ctypes.c_void_p ),
	( "select_all", ctypes.c_void_p ),
	( "unselect_all", ctypes.c_void_p ),
	( "get_items", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_recent_manager", ctypes.POINTER(ctypes.c_void_p) ),
	( "add_filter", ctypes.c_void_p ),
	( "remove_filter", ctypes.c_void_p ),
	( "list_filters", ctypes.POINTER(ctypes.c_void_p) ),
	( "set_sort_func", ctypes.c_void_p ),
	( "item_activated", ctypes.c_void_p ),
	( "selection_changed", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkRecentChooserDialogPrivate, [
])

__freeze_rpythonic_struct( _GtkRecentChooserDialog, [
	( "parent_instance", _GtkDialog ),
	( "priv", ctypes.POINTER(_GtkRecentChooserDialogPrivate) ),
])

__freeze_rpythonic_struct( _GtkRecentChooserDialogClass, [
	( "parent_class", _GtkDialogClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkRecentChooserMenuPrivate, [
])

__freeze_rpythonic_struct( _GtkRecentChooserMenu, [
	( "parent_instance", _GtkMenu ),
	( "priv", ctypes.POINTER(_GtkRecentChooserMenuPrivate) ),
])

__freeze_rpythonic_struct( _GtkRecentChooserMenuClass, [
	( "parent_class", _GtkMenuClass ),
	( "gtk_recent1", ctypes.c_void_p ),
	( "gtk_recent2", ctypes.c_void_p ),
	( "gtk_recent3", ctypes.c_void_p ),
	( "gtk_recent4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkRecentChooserWidgetPrivate, [
])

__freeze_rpythonic_struct( _GtkRecentChooserWidget, [
	( "parent_instance", _GtkBox ),
	( "priv", ctypes.POINTER(_GtkRecentChooserWidgetPrivate) ),
])

__freeze_rpythonic_struct( _GtkRecentChooserWidgetClass, [
	( "parent_class", _GtkBoxClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkScaleButtonPrivate, [
])

__freeze_rpythonic_struct( _GtkScaleButton, [
	( "parent", _GtkButton ),
	( "priv", ctypes.POINTER(_GtkScaleButtonPrivate) ),
])

__freeze_rpythonic_struct( _GtkScaleButtonClass, [
	( "parent_class", _GtkButtonClass ),
	( "value_changed", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkScrollable, [
])

__freeze_rpythonic_struct( _GtkScrollableInterface, [
	( "base_iface", _GTypeInterface ),
])

__freeze_rpythonic_struct( _GtkScrolledWindowPrivate, [
])

__freeze_rpythonic_struct( _GtkScrolledWindow, [
	( "container", _GtkBin ),
	( "priv", ctypes.POINTER(_GtkScrolledWindowPrivate) ),
])

__freeze_rpythonic_struct( _GtkScrolledWindowClass, [
	( "parent_class", _GtkBinClass ),
	( "scrollbar_spacing", ctypes.c_int ),
	( "scroll_child", ctypes.c_void_p ),
	( "move_focus_out", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkSeparatorMenuItem, [
	( "menu_item", _GtkMenuItem ),
])

__freeze_rpythonic_struct( _GtkSeparatorMenuItemClass, [
	( "parent_class", _GtkMenuItemClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkSeparatorToolItemPrivate, [
])

__freeze_rpythonic_struct( _GtkSeparatorToolItem, [
	( "parent", _GtkToolItem ),
	( "priv", ctypes.POINTER(_GtkSeparatorToolItemPrivate) ),
])

__freeze_rpythonic_struct( _GtkSeparatorToolItemClass, [
	( "parent_class", _GtkToolItemClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkRequestedSize, [
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
	( "minimum_size", ctypes.c_int ),
	( "natural_size", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GtkSpinButtonPrivate, [
])

__freeze_rpythonic_struct( _GtkSpinButton, [
	( "entry", _GtkEntry ),
	( "priv", ctypes.POINTER(_GtkSpinButtonPrivate) ),
])

__freeze_rpythonic_struct( _GtkSpinButtonClass, [
	( "parent_class", _GtkEntryClass ),
	( "input", ctypes.c_void_p ),
	( "output", ctypes.c_void_p ),
	( "value_changed", ctypes.c_void_p ),
	( "change_value", ctypes.c_void_p ),
	( "wrapped", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkSpinnerPrivate, [
])

__freeze_rpythonic_struct( _GtkSpinner, [
	( "parent", _GtkWidget ),
	( "priv", ctypes.POINTER(_GtkSpinnerPrivate) ),
])

__freeze_rpythonic_struct( _GtkSpinnerClass, [
	( "parent_class", _GtkWidgetClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkStatusbarPrivate, [
])

__freeze_rpythonic_struct( _GtkStatusbar, [
	( "parent_widget", _GtkBox ),
	( "priv", ctypes.POINTER(_GtkStatusbarPrivate) ),
])

__freeze_rpythonic_struct( _GtkStatusbarClass, [
	( "parent_class", _GtkBoxClass ),
	( "reserved", ctypes.POINTER(ctypes.c_void_p) ),
	( "text_pushed", ctypes.c_void_p ),
	( "text_popped", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkStatusIconPrivate, [
])

__freeze_rpythonic_struct( _GtkStatusIcon, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GtkStatusIconPrivate) ),
])

__freeze_rpythonic_struct( _GtkStatusIconClass, [
	( "parent_class", _GObjectClass ),
	( "activate", ctypes.c_void_p ),
	( "popup_menu", ctypes.c_void_p ),
	( "size_changed", ctypes.c_void_p ),
	( "button_press_event", ctypes.c_void_p ),
	( "button_release_event", ctypes.c_void_p ),
	( "scroll_event", ctypes.c_void_p ),
	( "query_tooltip", ctypes.c_void_p ),
	( "__gtk_reserved1", ctypes.POINTER(ctypes.c_void_p) ),
	( "__gtk_reserved2", ctypes.POINTER(ctypes.c_void_p) ),
	( "__gtk_reserved3", ctypes.POINTER(ctypes.c_void_p) ),
	( "__gtk_reserved4", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GtkSwitchPrivate, [
])

__freeze_rpythonic_struct( _GtkSwitch, [
	( "parent_instance", _GtkWidget ),
	( "priv", ctypes.POINTER(_GtkSwitchPrivate) ),
])

__freeze_rpythonic_struct( _GtkSwitchClass, [
	( "parent_class", _GtkWidgetClass ),
	( "activate", ctypes.c_void_p ),
	( "_switch_padding_1", ctypes.c_void_p ),
	( "_switch_padding_2", ctypes.c_void_p ),
	( "_switch_padding_3", ctypes.c_void_p ),
	( "_switch_padding_4", ctypes.c_void_p ),
	( "_switch_padding_5", ctypes.c_void_p ),
	( "_switch_padding_6", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkTablePrivate, [
])

__freeze_rpythonic_struct( _GtkTable, [
	( "container", _GtkContainer ),
	( "priv", ctypes.POINTER(_GtkTablePrivate) ),
])

__freeze_rpythonic_struct( _GtkTableClass, [
	( "parent_class", _GtkContainerClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkTableChild, [
	( "widget", ctypes.POINTER(_GtkWidget) ),
	( "left_attach", ctypes.c_ushort ),
	( "right_attach", ctypes.c_ushort ),
	( "top_attach", ctypes.c_ushort ),
	( "bottom_attach", ctypes.c_ushort ),
	( "xpadding", ctypes.c_ushort ),
	( "ypadding", ctypes.c_ushort ),
	( "xexpand", ctypes.c_uint ),
	( "yexpand", ctypes.c_uint ),
	( "xshrink", ctypes.c_uint ),
	( "yshrink", ctypes.c_uint ),
	( "xfill", ctypes.c_uint ),
	( "yfill", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GtkTableRowCol, [
	( "requisition", ctypes.c_ushort ),
	( "allocation", ctypes.c_ushort ),
	( "spacing", ctypes.c_ushort ),
	( "need_expand", ctypes.c_uint ),
	( "need_shrink", ctypes.c_uint ),
	( "expand", ctypes.c_uint ),
	( "shrink", ctypes.c_uint ),
	( "empty", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GtkTearoffMenuItemPrivate, [
])

__freeze_rpythonic_struct( _GtkTearoffMenuItem, [
	( "menu_item", _GtkMenuItem ),
	( "priv", ctypes.POINTER(_GtkTearoffMenuItemPrivate) ),
])

__freeze_rpythonic_struct( _GtkTearoffMenuItemClass, [
	( "parent_class", _GtkMenuItemClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkTextTagTablePrivate, [
])

__freeze_rpythonic_struct( _GtkTextTagTable, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GtkTextTagTablePrivate) ),
])

__freeze_rpythonic_struct( _GtkTextTagTableClass, [
	( "parent_class", _GObjectClass ),
	( "tag_changed", ctypes.c_void_p ),
	( "tag_added", ctypes.c_void_p ),
	( "tag_removed", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkTextMark, [
	( "parent_instance", _GObject ),
	( "segment", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GtkTextMarkClass, [
	( "parent_class", _GObjectClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkTextBTree, [
])

__freeze_rpythonic_struct( _GtkTextBufferPrivate, [
])

__freeze_rpythonic_struct( _GtkTextBuffer, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GtkTextBufferPrivate) ),
])

__freeze_rpythonic_struct( _GtkTextBufferClass, [
	( "parent_class", _GObjectClass ),
	( "insert_text", ctypes.c_void_p ),
	( "insert_pixbuf", ctypes.c_void_p ),
	( "insert_child_anchor", ctypes.c_void_p ),
	( "delete_range", ctypes.c_void_p ),
	( "changed", ctypes.c_void_p ),
	( "modified_changed", ctypes.c_void_p ),
	( "mark_set", ctypes.c_void_p ),
	( "mark_deleted", ctypes.c_void_p ),
	( "apply_tag", ctypes.c_void_p ),
	( "remove_tag", ctypes.c_void_p ),
	( "begin_user_action", ctypes.c_void_p ),
	( "end_user_action", ctypes.c_void_p ),
	( "paste_done", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkTextViewPrivate, [
])

__freeze_rpythonic_struct( _GtkTextView, [
	( "parent_instance", _GtkContainer ),
	( "priv", ctypes.POINTER(_GtkTextViewPrivate) ),
])

__freeze_rpythonic_struct( _GtkTextViewClass, [
	( "parent_class", _GtkContainerClass ),
	( "populate_popup", ctypes.c_void_p ),
	( "move_cursor", ctypes.c_void_p ),
	( "set_anchor", ctypes.c_void_p ),
	( "insert_at_cursor", ctypes.c_void_p ),
	( "delete_from_cursor", ctypes.c_void_p ),
	( "backspace", ctypes.c_void_p ),
	( "cut_clipboard", ctypes.c_void_p ),
	( "copy_clipboard", ctypes.c_void_p ),
	( "paste_clipboard", ctypes.c_void_p ),
	( "toggle_overwrite", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
	( "_gtk_reserved5", ctypes.c_void_p ),
	( "_gtk_reserved6", ctypes.c_void_p ),
	( "_gtk_reserved7", ctypes.c_void_p ),
	( "_gtk_reserved8", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( GtkThemingEnginePrivate, [
])

__freeze_rpythonic_struct( _GtkThemingEngine, [
	( "parent_object", _GObject ),
	( "priv", ctypes.POINTER(GtkThemingEnginePrivate) ),
])

__freeze_rpythonic_struct( _GtkThemingEngineClass, [
	( "parent_class", _GObjectClass ),
	( "render_line", ctypes.c_void_p ),
	( "render_background", ctypes.c_void_p ),
	( "render_frame", ctypes.c_void_p ),
	( "render_frame_gap", ctypes.c_void_p ),
	( "render_extension", ctypes.c_void_p ),
	( "render_check", ctypes.c_void_p ),
	( "render_option", ctypes.c_void_p ),
	( "render_arrow", ctypes.c_void_p ),
	( "render_expander", ctypes.c_void_p ),
	( "render_focus", ctypes.c_void_p ),
	( "render_layout", ctypes.c_void_p ),
	( "render_slider", ctypes.c_void_p ),
	( "render_handle", ctypes.c_void_p ),
	( "render_activity", ctypes.c_void_p ),
	( "render_icon_pixbuf", ctypes.POINTER(ctypes.c_void_p) ),
	( "render_icon", ctypes.c_void_p ),
	( "padding", ctypes.POINTER(( ctypes.c_void_p * 15 )) ),
])

__freeze_rpythonic_struct( _GtkToolbarPrivate, [
])

__freeze_rpythonic_struct( _GtkToolbar, [
	( "container", _GtkContainer ),
	( "priv", ctypes.POINTER(_GtkToolbarPrivate) ),
])

__freeze_rpythonic_struct( _GtkToolbarClass, [
	( "parent_class", _GtkContainerClass ),
	( "orientation_changed", ctypes.c_void_p ),
	( "style_changed", ctypes.c_void_p ),
	( "popup_context_menu", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkToolItemGroupPrivate, [
])

__freeze_rpythonic_struct( _GtkToolItemGroup, [
	( "parent_instance", _GtkContainer ),
	( "priv", ctypes.POINTER(_GtkToolItemGroupPrivate) ),
])

__freeze_rpythonic_struct( _GtkToolItemGroupClass, [
	( "parent_class", _GtkContainerClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkToolPalettePrivate, [
])

__freeze_rpythonic_struct( _GtkToolPalette, [
	( "parent_instance", _GtkContainer ),
	( "priv", ctypes.POINTER(_GtkToolPalettePrivate) ),
])

__freeze_rpythonic_struct( _GtkToolPaletteClass, [
	( "parent_class", _GtkContainerClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkToolShell, [
])

__freeze_rpythonic_struct( _GtkToolShellIface, [
	( "g_iface", _GTypeInterface ),
	( "get_icon_size", ctypes.c_void_p ),
	( "get_orientation", ctypes.c_void_p ),
	( "get_style", ctypes.c_void_p ),
	( "get_relief_style", ctypes.c_void_p ),
	( "rebuild_menu", ctypes.c_void_p ),
	( "get_text_orientation", ctypes.c_void_p ),
	( "get_text_alignment", ctypes.c_void_p ),
	( "get_ellipsize_mode", ctypes.c_void_p ),
	( "get_text_size_group", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GtkTreeDragSource, [
])

__freeze_rpythonic_struct( _GtkTreeDragSourceIface, [
	( "g_iface", _GTypeInterface ),
	( "row_draggable", ctypes.c_void_p ),
	( "drag_data_get", ctypes.c_void_p ),
	( "drag_data_delete", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkTreeDragDest, [
])

__freeze_rpythonic_struct( _GtkTreeDragDestIface, [
	( "g_iface", _GTypeInterface ),
	( "drag_data_received", ctypes.c_void_p ),
	( "row_drop_possible", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkTreeModelSortPrivate, [
])

__freeze_rpythonic_struct( _GtkTreeModelSort, [
	( "parent", _GObject ),
	( "priv", ctypes.POINTER(_GtkTreeModelSortPrivate) ),
])

__freeze_rpythonic_struct( _GtkTreeModelSortClass, [
	( "parent_class", _GObjectClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkTreeSelectionPrivate, [
])

__freeze_rpythonic_struct( _GtkTreeSelection, [
	( "parent", _GObject ),
	( "priv", ctypes.POINTER(_GtkTreeSelectionPrivate) ),
])

__freeze_rpythonic_struct( _GtkTreeSelectionClass, [
	( "parent_class", _GObjectClass ),
	( "changed", ctypes.c_void_p ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkTreeStorePrivate, [
])

__freeze_rpythonic_struct( _GtkTreeStore, [
	( "parent", _GObject ),
	( "priv", ctypes.POINTER(_GtkTreeStorePrivate) ),
])

__freeze_rpythonic_struct( _GtkTreeStoreClass, [
	( "parent_class", _GObjectClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkUIManagerPrivate, [
])

__freeze_rpythonic_struct( _GtkUIManager, [
	( "parent", _GObject ),
	( "private_data", ctypes.POINTER(_GtkUIManagerPrivate) ),
])

__freeze_rpythonic_struct( _GtkUIManagerClass, [
	( "parent_class", _GObjectClass ),
	( "add_widget", ctypes.c_void_p ),
	( "actions_changed", ctypes.c_void_p ),
	( "connect_proxy", ctypes.c_void_p ),
	( "disconnect_proxy", ctypes.c_void_p ),
	( "pre_activate", ctypes.c_void_p ),
	( "post_activate", ctypes.c_void_p ),
	( "get_widget", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_action", ctypes.POINTER(ctypes.c_void_p) ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkVButtonBox, [
	( "button_box", _GtkButtonBox ),
])

__freeze_rpythonic_struct( _GtkVButtonBoxClass, [
	( "parent_class", _GtkButtonBoxClass ),
])

__freeze_rpythonic_struct( _GtkVBox, [
	( "box", _GtkBox ),
])

__freeze_rpythonic_struct( _GtkVBoxClass, [
	( "parent_class", _GtkBoxClass ),
])

__freeze_rpythonic_struct( _GtkViewportPrivate, [
])

__freeze_rpythonic_struct( _GtkViewport, [
	( "bin", _GtkBin ),
	( "priv", ctypes.POINTER(_GtkViewportPrivate) ),
])

__freeze_rpythonic_struct( _GtkViewportClass, [
	( "parent_class", _GtkBinClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkVolumeButton, [
	( "parent", _GtkScaleButton ),
])

__freeze_rpythonic_struct( _GtkVolumeButtonClass, [
	( "parent_class", _GtkScaleButtonClass ),
	( "_gtk_reserved1", ctypes.c_void_p ),
	( "_gtk_reserved2", ctypes.c_void_p ),
	( "_gtk_reserved3", ctypes.c_void_p ),
	( "_gtk_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GtkVPaned, [
	( "paned", _GtkPaned ),
])

__freeze_rpythonic_struct( _GtkVPanedClass, [
	( "parent_class", _GtkPanedClass ),
])

__freeze_rpythonic_struct( _GtkVScale, [
	( "scale", _GtkScale ),
])

__freeze_rpythonic_struct( _GtkVScaleClass, [
	( "parent_class", _GtkScaleClass ),
])

__freeze_rpythonic_struct( _GtkVScrollbar, [
	( "scrollbar", _GtkScrollbar ),
])

__freeze_rpythonic_struct( _GtkVScrollbarClass, [
	( "parent_class", _GtkScrollbarClass ),
])

__freeze_rpythonic_struct( _GtkVSeparator, [
	( "separator", _GtkSeparator ),
])

__freeze_rpythonic_struct( _GtkVSeparatorClass, [
	( "parent_class", _GtkSeparatorClass ),
])

__freeze_rpythonic_struct( NautilusBookmarkDetails, [
])

__freeze_rpythonic_struct( NautilusBookmark, [
	( "C_object", _GObject ),
	( "details", ctypes.POINTER(NautilusBookmarkDetails) ),
])

__freeze_rpythonic_struct( NautilusBookmarkClass, [
	( "parent_class", _GObjectClass ),
	( "contents_changed", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( NautilusFileDetails, [
	( "directory", ctypes.POINTER(NautilusDirectory) ),
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "C_type", ctypes.c_int ),
	( "display_name", ctypes.POINTER(ctypes.c_char) ),
	( "display_name_collation_key", ctypes.POINTER(ctypes.c_char) ),
	( "edit_name", ctypes.POINTER(ctypes.c_char) ),
	( "size", ctypes.c_longlong ),
	( "sort_order", ctypes.c_int ),
	( "permissions", ctypes.c_uint ),
	( "uid", ctypes.c_int ),
	( "gid", ctypes.c_int ),
	( "owner", ctypes.POINTER(ctypes.c_char) ),
	( "owner_real", ctypes.POINTER(ctypes.c_char) ),
	( "group", ctypes.POINTER(ctypes.c_char) ),
	( "atime", ctypes.c_int64 ),
	( "mtime", ctypes.c_int64 ),
	( "ctime", ctypes.c_int64 ),
	( "symlink_name", ctypes.POINTER(ctypes.c_char) ),
	( "mime_type", ctypes.POINTER(ctypes.c_char) ),
	( "selinux_context", ctypes.POINTER(ctypes.c_char) ),
	( "description", ctypes.POINTER(ctypes.c_char) ),
	( "get_info_error", ctypes.POINTER(_GError) ),
	( "directory_count", ctypes.c_uint ),
	( "deep_directory_count", ctypes.c_uint ),
	( "deep_file_count", ctypes.c_uint ),
	( "deep_unreadable_count", ctypes.c_uint ),
	( "deep_size", ctypes.c_longlong ),
	( "icon", ctypes.POINTER(_GIcon) ),
	( "thumbnail_path", ctypes.POINTER(ctypes.c_char) ),
	( "thumbnail", ctypes.POINTER(_GdkPixbuf) ),
	( "thumbnail_mtime", ctypes.c_int64 ),
	( "mime_list", ctypes.POINTER(_GList) ),
	( "top_left_text", ctypes.POINTER(ctypes.c_char) ),
	( "custom_icon", ctypes.POINTER(_GIcon) ),
	( "activation_uri", ctypes.POINTER(ctypes.c_char) ),
	( "filesystem_id", ctypes.POINTER(ctypes.c_char) ),
	( "trash_orig_path", ctypes.POINTER(ctypes.c_char) ),
	( "operations_in_progress", ctypes.POINTER(_GList) ),
	( "pending_info_providers", ctypes.POINTER(_GList) ),
	( "extension_emblems", ctypes.POINTER(_GList) ),
	( "pending_extension_emblems", ctypes.POINTER(_GList) ),
	( "extension_attributes", ctypes.POINTER(_GHashTable) ),
	( "pending_extension_attributes", ctypes.POINTER(_GHashTable) ),
	( "metadata", ctypes.POINTER(_GHashTable) ),
	( "mount", ctypes.POINTER(_GMount) ),
	( "unconfirmed", ctypes.c_uint ),
	( "is_gone", ctypes.c_uint ),
	( "is_added", ctypes.c_uint ),
	( "loading_directory", ctypes.c_uint ),
	( "got_file_info", ctypes.c_uint ),
	( "get_info_failed", ctypes.c_uint ),
	( "file_info_is_up_to_date", ctypes.c_uint ),
	( "got_directory_count", ctypes.c_uint ),
	( "directory_count_failed", ctypes.c_uint ),
	( "directory_count_is_up_to_date", ctypes.c_uint ),
	( "deep_counts_status", ctypes.c_uint ),
	( "got_mime_list", ctypes.c_uint ),
	( "mime_list_failed", ctypes.c_uint ),
	( "mime_list_is_up_to_date", ctypes.c_uint ),
	( "mount_is_up_to_date", ctypes.c_uint ),
	( "got_top_left_text", ctypes.c_uint ),
	( "got_large_top_left_text", ctypes.c_uint ),
	( "top_left_text_is_up_to_date", ctypes.c_uint ),
	( "got_link_info", ctypes.c_uint ),
	( "link_info_is_up_to_date", ctypes.c_uint ),
	( "got_custom_display_name", ctypes.c_uint ),
	( "got_custom_activation_uri", ctypes.c_uint ),
	( "thumbnail_is_up_to_date", ctypes.c_uint ),
	( "thumbnail_wants_original", ctypes.c_uint ),
	( "thumbnail_tried_original", ctypes.c_uint ),
	( "thumbnailing_failed", ctypes.c_uint ),
	( "is_thumbnailing", ctypes.c_uint ),
	( "has_open_window", ctypes.c_uint ),
	( "is_launcher", ctypes.c_uint ),
	( "is_trusted_link", ctypes.c_uint ),
	( "is_foreign_link", ctypes.c_uint ),
	( "is_symlink", ctypes.c_uint ),
	( "is_mountpoint", ctypes.c_uint ),
	( "is_hidden", ctypes.c_uint ),
	( "has_permissions", ctypes.c_uint ),
	( "can_read", ctypes.c_uint ),
	( "can_write", ctypes.c_uint ),
	( "can_execute", ctypes.c_uint ),
	( "can_delete", ctypes.c_uint ),
	( "can_trash", ctypes.c_uint ),
	( "can_rename", ctypes.c_uint ),
	( "can_mount", ctypes.c_uint ),
	( "can_unmount", ctypes.c_uint ),
	( "can_eject", ctypes.c_uint ),
	( "can_start", ctypes.c_uint ),
	( "can_start_degraded", ctypes.c_uint ),
	( "can_stop", ctypes.c_uint ),
	( "start_stop_type", ctypes.c_uint ),
	( "can_poll_for_media", ctypes.c_uint ),
	( "is_media_check_automatic", ctypes.c_uint ),
	( "filesystem_readonly", ctypes.c_uint ),
	( "filesystem_use_preview", ctypes.c_uint ),
	( "filesystem_info_is_up_to_date", ctypes.c_uint ),
	( "trash_time", ctypes.c_int64 ),
	( "free_space", ctypes.c_ulonglong ),
	( "free_space_read", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( NautilusFile, [
	( "parent_slot", _GObject ),
	( "details", ctypes.POINTER(NautilusFileDetails) ),
])

__freeze_rpythonic_struct( NautilusDirectoryDetails, [
	( "location", ctypes.POINTER(_GFile) ),
	( "as_file", ctypes.POINTER(NautilusFile) ),
	( "file_list", ctypes.POINTER(_GList) ),
	( "file_hash", ctypes.POINTER(_GHashTable) ),
	( "high_priority_queue", ctypes.POINTER(NautilusFileQueue) ),
	( "low_priority_queue", ctypes.POINTER(NautilusFileQueue) ),
	( "extension_queue", ctypes.POINTER(NautilusFileQueue) ),
	( "call_when_ready_list", ctypes.POINTER(_GList) ),
	( "call_when_ready_counters", ( ctypes.c_int * 12 ) ),
	( "monitor_list", ctypes.POINTER(_GList) ),
	( "monitor_counters", ( ctypes.c_int * 12 ) ),
	( "call_ready_idle_id", ctypes.c_uint ),
	( "monitor", ctypes.POINTER(NautilusMonitor) ),
	( "mime_db_monitor", ctypes.c_ulong ),
	( "in_async_service_loop", ctypes.c_int ),
	( "state_changed", ctypes.c_int ),
	( "file_list_monitored", ctypes.c_int ),
	( "directory_loaded", ctypes.c_int ),
	( "directory_loaded_sent_notification", ctypes.c_int ),
	( "directory_load_in_progress", ctypes.POINTER(DirectoryLoadState) ),
	( "pending_file_info", ctypes.POINTER(_GList) ),
	( "confirmed_file_count", ctypes.c_int ),
	( "dequeue_pending_idle_id", ctypes.c_uint ),
	( "new_files_in_progress", ctypes.POINTER(_GList) ),
	( "count_in_progress", ctypes.POINTER(DirectoryCountState) ),
	( "deep_count_file", ctypes.POINTER(NautilusFile) ),
	( "deep_count_in_progress", ctypes.POINTER(DeepCountState) ),
	( "mime_list_in_progress", ctypes.POINTER(MimeListState) ),
	( "get_info_file", ctypes.POINTER(NautilusFile) ),
	( "get_info_in_progress", ctypes.POINTER(GetInfoState) ),
	( "extension_info_file", ctypes.POINTER(NautilusFile) ),
	( "extension_info_provider", ctypes.POINTER(_NautilusInfoProvider) ),
	( "extension_info_in_progress", ctypes.POINTER(_NautilusOperationHandle) ),
	( "extension_info_idle", ctypes.c_uint ),
	( "thumbnail_state", ctypes.POINTER(ThumbnailState) ),
	( "mount_state", ctypes.POINTER(MountState) ),
	( "filesystem_info_state", ctypes.POINTER(FilesystemInfoState) ),
	( "top_left_read_state", ctypes.POINTER(TopLeftTextReadState) ),
	( "link_info_read_state", ctypes.POINTER(LinkInfoReadState) ),
	( "file_operations_in_progress", ctypes.POINTER(_GList) ),
	( "hidden_file_hash", ctypes.POINTER(_GHashTable) ),
])

__freeze_rpythonic_struct( NautilusDirectory, [
	( "C_object", _GObject ),
	( "details", ctypes.POINTER(NautilusDirectoryDetails) ),
])

__freeze_rpythonic_struct( NautilusDirectoryClass, [
	( "parent_class", _GObjectClass ),
	( "files_added", ctypes.c_void_p ),
	( "files_changed", ctypes.c_void_p ),
	( "done_loading", ctypes.c_void_p ),
	( "load_error", ctypes.c_void_p ),
	( "contains_file", ctypes.c_void_p ),
	( "call_when_ready", ctypes.c_void_p ),
	( "cancel_callback", ctypes.c_void_p ),
	( "file_monitor_add", ctypes.c_void_p ),
	( "file_monitor_remove", ctypes.c_void_p ),
	( "force_reload", ctypes.c_void_p ),
	( "are_all_files_seen", ctypes.c_void_p ),
	( "is_not_empty", ctypes.c_void_p ),
	( "get_file_list", ctypes.POINTER(ctypes.c_void_p) ),
	( "is_editable", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( NautilusQueryDetails, [
])

__freeze_rpythonic_struct( NautilusQuery, [
	( "parent", _GObject ),
	( "details", ctypes.POINTER(NautilusQueryDetails) ),
])

__freeze_rpythonic_struct( NautilusQueryClass, [
	( "parent_class", _GObjectClass ),
])

__freeze_rpythonic_struct( NautilusSearchDirectoryDetails, [
])

__freeze_rpythonic_struct( NautilusSearchDirectory, [
	( "parent_slot", NautilusDirectory ),
	( "details", ctypes.POINTER(NautilusSearchDirectoryDetails) ),
])

__freeze_rpythonic_struct( NautilusSearchDirectoryClass, [
	( "parent_slot", NautilusDirectoryClass ),
])

__freeze_rpythonic_struct( _NautilusNavigationStateDetails, [
])

__freeze_rpythonic_struct( _NautilusNavigationState, [
	( "parent", _GObject ),
	( "priv", ctypes.POINTER(_NautilusNavigationStateDetails) ),
])

__freeze_rpythonic_struct( _NautilusNavigationStateClass, [
	( "parent_class", _GObjectClass ),
])

__freeze_rpythonic_struct( _NautilusIconInfo, [
])

__freeze_rpythonic_struct( _NautilusIconInfoClass, [
])

__freeze_rpythonic_struct( NautilusFileClass, [
	( "parent_slot", _GObjectClass ),
	( "default_file_type", ctypes.c_int ),
	( "changed", ctypes.c_void_p ),
	( "updated_deep_count_in_progress", ctypes.c_void_p ),
	( "monitor_add", ctypes.c_void_p ),
	( "monitor_remove", ctypes.c_void_p ),
	( "call_when_ready", ctypes.c_void_p ),
	( "cancel_call_when_ready", ctypes.c_void_p ),
	( "check_if_ready", ctypes.c_void_p ),
	( "get_item_count", ctypes.c_void_p ),
	( "get_deep_counts", ctypes.c_void_p ),
	( "get_date", ctypes.c_void_p ),
	( "get_where_string", ctypes.POINTER(ctypes.c_void_p) ),
	( "set_metadata", ctypes.c_void_p ),
	( "set_metadata_as_list", ctypes.c_void_p ),
	( "mount", ctypes.c_void_p ),
	( "unmount", ctypes.c_void_p ),
	( "eject", ctypes.c_void_p ),
	( "start", ctypes.c_void_p ),
	( "stop", ctypes.c_void_p ),
	( "poll_for_media", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _EelCanvasItem, [
	( "C_object", _GObject ),
	( "canvas", ctypes.POINTER(_EelCanvas) ),
	( "parent", ctypes.POINTER(_EelCanvasItem) ),
	( "x1", ctypes.c_double ),
	( "y1", ctypes.c_double ),
	( "x2", ctypes.c_double ),
	( "y2", ctypes.c_double ),
	( "flags", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _EelCanvasItemClass, [
	( "parent_class", _GObjectClass ),
	( "destroy", ctypes.c_void_p ),
	( "update", ctypes.c_void_p ),
	( "realize", ctypes.c_void_p ),
	( "unrealize", ctypes.c_void_p ),
	( "map", ctypes.c_void_p ),
	( "unmap", ctypes.c_void_p ),
	( "draw", ctypes.c_void_p ),
	( "point", ctypes.c_void_p ),
	( "translate", ctypes.c_void_p ),
	( "bounds", ctypes.c_void_p ),
	( "event", ctypes.c_void_p ),
	( "spare_vmethods", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( _EelCanvasGroup, [
	( "item", _EelCanvasItem ),
	( "xpos", ctypes.c_double ),
	( "ypos", ctypes.c_double ),
	( "item_list", ctypes.POINTER(_GList) ),
	( "item_list_end", ctypes.POINTER(_GList) ),
])

__freeze_rpythonic_struct( _EelCanvasGroupClass, [
	( "parent_class", _EelCanvasItemClass ),
])

__freeze_rpythonic_struct( _EelCanvas, [
	( "layout", _GtkLayout ),
	( "root", ctypes.POINTER(_EelCanvasItem) ),
	( "current_item", ctypes.POINTER(_EelCanvasItem) ),
	( "new_current_item", ctypes.POINTER(_EelCanvasItem) ),
	( "grabbed_item", ctypes.POINTER(_EelCanvasItem) ),
	( "focused_item", ctypes.POINTER(_EelCanvasItem) ),
	( "pick_event", _GdkEvent ),
	( "scroll_x1", ctypes.c_double ),
	( "scroll_y1", ctypes.c_double ),
	( "scroll_x2", ctypes.c_double ),
	( "scroll_y2", ctypes.c_double ),
	( "pixels_per_unit", ctypes.c_double ),
	( "idle_id", ctypes.c_uint ),
	( "root_destroy_id", ctypes.c_uint ),
	( "zoom_xofs", ctypes.c_int ),
	( "zoom_yofs", ctypes.c_int ),
	( "state", ctypes.c_int ),
	( "grabbed_event_mask", ctypes.c_uint ),
	( "close_enough", ctypes.c_int ),
	( "center_scroll_region", ctypes.c_uint ),
	( "need_update", ctypes.c_uint ),
	( "doing_update", ctypes.c_uint ),
	( "need_redraw", ctypes.c_uint ),
	( "need_repick", ctypes.c_uint ),
	( "left_grabbed_item", ctypes.c_uint ),
	( "in_repick", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _EelCanvasClass, [
	( "parent_class", _GtkLayoutClass ),
	( "draw_background", ctypes.c_void_p ),
	( "request_update", ctypes.c_void_p ),
	( "spare_vmethods", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( _EelCanvasAccessible, [
	( "parent", _GtkAccessible ),
])

__freeze_rpythonic_struct( _EelCanvasAccessibleClass, [
	( "parent_class", _GtkAccessibleClass ),
])

__freeze_rpythonic_struct( _EelCanvasItemAccessible, [
	( "parent", _GtkAccessible ),
])

__freeze_rpythonic_struct( _EelCanvasItemAccessibleClass, [
	( "parent_class", _GtkAccessibleClass ),
])

__freeze_rpythonic_struct( NautilusIconData, [
])

__freeze_rpythonic_struct( NautilusIconPosition, [
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
	( "scale", ctypes.c_double ),
])

__freeze_rpythonic_struct( NautilusIconContainer, [
	( "canvas", _EelCanvas ),
	( "details", ctypes.POINTER(NautilusIconContainerDetails) ),
])

__freeze_rpythonic_struct( NautilusIconContainerClass, [
	( "parent_slot", _EelCanvasClass ),
	( "button_press", ctypes.c_void_p ),
	( "context_click_background", ctypes.c_void_p ),
	( "middle_click", ctypes.c_void_p ),
	( "activate", ctypes.c_void_p ),
	( "activate_alternate", ctypes.c_void_p ),
	( "activate_previewer", ctypes.c_void_p ),
	( "context_click_selection", ctypes.c_void_p ),
	( "move_copy_items", ctypes.c_void_p ),
	( "handle_netscape_url", ctypes.c_void_p ),
	( "handle_uri_list", ctypes.c_void_p ),
	( "handle_text", ctypes.c_void_p ),
	( "handle_raw", ctypes.c_void_p ),
	( "get_container_uri", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_icon_images", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_icon_text", ctypes.c_void_p ),
	( "get_icon_description", ctypes.POINTER(ctypes.c_void_p) ),
	( "compare_icons", ctypes.c_void_p ),
	( "compare_icons_by_name", ctypes.c_void_p ),
	( "freeze_updates", ctypes.c_void_p ),
	( "unfreeze_updates", ctypes.c_void_p ),
	( "start_monitor_top_left", ctypes.c_void_p ),
	( "stop_monitor_top_left", ctypes.c_void_p ),
	( "prioritize_thumbnailing", ctypes.c_void_p ),
	( "can_accept_item", ctypes.c_void_p ),
	( "get_stored_icon_position", ctypes.c_void_p ),
	( "get_icon_uri", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_icon_drop_target_uri", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_stored_layout_timestamp", ctypes.c_void_p ),
	( "store_layout_timestamp", ctypes.c_void_p ),
	( "band_select_started", ctypes.c_void_p ),
	( "band_select_ended", ctypes.c_void_p ),
	( "selection_changed", ctypes.c_void_p ),
	( "layout_changed", ctypes.c_void_p ),
	( "icon_position_changed", ctypes.c_void_p ),
	( "icon_rename_started", ctypes.c_void_p ),
	( "icon_rename_ended", ctypes.c_void_p ),
	( "icon_stretch_started", ctypes.c_void_p ),
	( "icon_stretch_ended", ctypes.c_void_p ),
	( "preview", ctypes.c_void_p ),
	( "icon_added", ctypes.c_void_p ),
	( "icon_removed", ctypes.c_void_p ),
	( "cleared", ctypes.c_void_p ),
	( "start_interactive_search", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _NautilusWindowPane, [
])

__freeze_rpythonic_struct( _NautilusWindowPaneClass, [
])

__freeze_rpythonic_struct( NautilusSearchBarDetails, [
])

__freeze_rpythonic_struct( NautilusSearchBar, [
	( "parent", _GtkBox ),
	( "details", ctypes.POINTER(NautilusSearchBarDetails) ),
])

__freeze_rpythonic_struct( NautilusSearchBarClass, [
	( "parent_class", _GtkBoxClass ),
	( "activate", ctypes.c_void_p ),
	( "cancel", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( NautilusQueryEditorDetails, [
])

__freeze_rpythonic_struct( NautilusQueryEditor, [
	( "parent", _GtkBox ),
	( "details", ctypes.POINTER(NautilusQueryEditorDetails) ),
])

__freeze_rpythonic_struct( NautilusQueryEditorClass, [
	( "parent_class", _GtkBoxClass ),
	( "changed", ctypes.c_void_p ),
	( "cancel", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( NautilusWindowSlotClass, [
	( "parent_class", _GtkBoxClass ),
	( "active", ctypes.c_void_p ),
	( "inactive", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( NautilusWindowSlot, [
	( "parent", _GtkBox ),
	( "window", ctypes.POINTER(NautilusWindow) ),
	( "extra_location_widgets", ctypes.POINTER(_GtkWidget) ),
	( "view_overlay", ctypes.POINTER(_GtkWidget) ),
	( "floating_bar", ctypes.POINTER(_GtkWidget) ),
	( "set_status_timeout_id", ctypes.c_uint ),
	( "loading_timeout_id", ctypes.c_uint ),
	( "content_view", ctypes.POINTER(NautilusView) ),
	( "new_content_view", ctypes.POINTER(NautilusView) ),
	( "current_location_bookmark", ctypes.POINTER(NautilusBookmark) ),
	( "last_location_bookmark", ctypes.POINTER(NautilusBookmark) ),
	( "location", ctypes.POINTER(_GFile) ),
	( "title", ctypes.POINTER(ctypes.c_char) ),
	( "status_text", ctypes.POINTER(ctypes.c_char) ),
	( "viewed_file", ctypes.POINTER(NautilusFile) ),
	( "viewed_file_seen", ctypes.c_int ),
	( "viewed_file_in_trash", ctypes.c_int ),
	( "allow_stop", ctypes.c_int ),
	( "query_editor", ctypes.POINTER(NautilusQueryEditor) ),
	( "location_change_type", ctypes.c_int ),
	( "location_change_distance", ctypes.c_uint ),
	( "pending_location", ctypes.POINTER(_GFile) ),
	( "pending_scroll_to", ctypes.POINTER(ctypes.c_char) ),
	( "pending_selection", ctypes.POINTER(_GList) ),
	( "determine_view_file", ctypes.POINTER(NautilusFile) ),
	( "mount_cancellable", ctypes.POINTER(_GCancellable) ),
	( "mount_error", ctypes.POINTER(_GError) ),
	( "tried_mount", ctypes.c_int ),
	( "open_callback", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(NautilusWindow),ctypes.POINTER(_GError),ctypes.POINTER(ctypes.c_void_p),) ),
	( "open_callback_user_data", ctypes.POINTER(ctypes.c_void_p) ),
	( "find_mount_cancellable", ctypes.POINTER(_GCancellable) ),
	( "back_list", ctypes.POINTER(_GList) ),
	( "forward_list", ctypes.POINTER(_GList) ),
])

__freeze_rpythonic_struct( NautilusViewDetails, [
])

__freeze_rpythonic_struct( NautilusView, [
	( "parent", _GtkScrolledWindow ),
	( "details", ctypes.POINTER(NautilusViewDetails) ),
])

__freeze_rpythonic_struct( NautilusViewClass, [
	( "parent_class", _GtkScrolledWindowClass ),
	( "clear", ctypes.c_void_p ),
	( "begin_file_changes", ctypes.c_void_p ),
	( "add_file", ctypes.c_void_p ),
	( "remove_file", ctypes.c_void_p ),
	( "file_changed", ctypes.c_void_p ),
	( "end_file_changes", ctypes.c_void_p ),
	( "begin_loading", ctypes.c_void_p ),
	( "end_loading", ctypes.c_void_p ),
	( "load_error", ctypes.c_void_p ),
	( "reset_to_defaults", ctypes.c_void_p ),
	( "get_backing_uri", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_selection", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_selection_for_file_transfer", ctypes.POINTER(ctypes.c_void_p) ),
	( "select_all", ctypes.c_void_p ),
	( "set_selection", ctypes.c_void_p ),
	( "invert_selection", ctypes.c_void_p ),
	( "get_selected_icon_locations", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_item_count", ctypes.c_void_p ),
	( "bump_zoom_level", ctypes.c_void_p ),
	( "zoom_to_level", ctypes.c_void_p ),
	( "get_zoom_level", ctypes.c_void_p ),
	( "restore_default_zoom_level", ctypes.c_void_p ),
	( "can_zoom_in", ctypes.c_void_p ),
	( "can_zoom_out", ctypes.c_void_p ),
	( "reveal_selection", ctypes.c_void_p ),
	( "merge_menus", ctypes.c_void_p ),
	( "unmerge_menus", ctypes.c_void_p ),
	( "update_menus", ctypes.c_void_p ),
	( "compare_files", ctypes.c_void_p ),
	( "using_manual_layout", ctypes.c_void_p ),
	( "is_read_only", ctypes.c_void_p ),
	( "is_empty", ctypes.c_void_p ),
	( "can_rename_file", ctypes.c_void_p ),
	( "start_renaming_file", ctypes.c_void_p ),
	( "widget_to_file_operation_position", ctypes.c_void_p ),
	( "click_policy_changed", ctypes.c_void_p ),
	( "sort_directories_first_changed", ctypes.c_void_p ),
	( "get_view_id", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_first_visible_file", ctypes.POINTER(ctypes.c_void_p) ),
	( "scroll_to_file", ctypes.c_void_p ),
	( "trash", ctypes.c_void_p ),
	( "delete", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( NautilusWindowClass, [
	( "sync_title", ctypes.c_void_p ),
	( "get_icon", ctypes.POINTER(ctypes.c_void_p) ),
	( "prompt_for_location", ctypes.c_void_p ),
	( "close", ctypes.c_void_p ),
	( "go_up", ctypes.c_void_p ),
	( "reload", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( NautilusWindow, [
	( "details", ctypes.POINTER(NautilusWindowDetails) ),
])

__freeze_rpythonic_struct( _NautilusOperationHandle, [
])

__freeze_rpythonic_struct( _NautilusColumnDetails, [
])

__freeze_rpythonic_struct( _NautilusColumn, [
	( "parent", _GObject ),
	( "details", ctypes.POINTER(_NautilusColumnDetails) ),
])

__freeze_rpythonic_struct( _NautilusColumnClass, [
	( "parent", _GObjectClass ),
])

__freeze_rpythonic_struct( _NautilusColumnProvider, [
])

__freeze_rpythonic_struct( _NautilusColumnProviderIface, [
	( "g_iface", _GTypeInterface ),
	( "get_columns", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _NautilusFileInfoIface, [
	( "g_iface", _GTypeInterface ),
	( "is_gone", ctypes.c_void_p ),
	( "get_name", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_uri", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_parent_uri", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_uri_scheme", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_mime_type", ctypes.POINTER(ctypes.c_void_p) ),
	( "is_mime_type", ctypes.c_void_p ),
	( "is_directory", ctypes.c_void_p ),
	( "add_emblem", ctypes.c_void_p ),
	( "get_string_attribute", ctypes.POINTER(ctypes.c_void_p) ),
	( "add_string_attribute", ctypes.c_void_p ),
	( "invalidate_extension_info", ctypes.c_void_p ),
	( "get_activation_uri", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_file_type", ctypes.c_void_p ),
	( "get_location", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_parent_location", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_parent_info", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_mount", ctypes.POINTER(ctypes.c_void_p) ),
	( "can_write", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _NautilusInfoProvider, [
])

__freeze_rpythonic_struct( _NautilusInfoProviderIface, [
	( "g_iface", _GTypeInterface ),
	( "update_file_info", ctypes.c_void_p ),
	( "cancel_update", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _NautilusLocationWidgetProvider, [
])

__freeze_rpythonic_struct( _NautilusLocationWidgetProviderIface, [
	( "g_iface", _GTypeInterface ),
	( "get_widget", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _NautilusMenuPrivate, [
])

__freeze_rpythonic_struct( _NautilusMenuItemDetails, [
])

__freeze_rpythonic_struct( _NautilusMenu, [
	( "parent", _GObject ),
	( "priv", ctypes.POINTER(_NautilusMenuPrivate) ),
])

__freeze_rpythonic_struct( _NautilusMenuClass, [
	( "parent_class", _GObjectClass ),
])

__freeze_rpythonic_struct( _NautilusMenuItem, [
	( "parent", _GObject ),
	( "details", ctypes.POINTER(_NautilusMenuItemDetails) ),
])

__freeze_rpythonic_struct( _NautilusMenuItemClass, [
	( "parent", _GObjectClass ),
	( "activate", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _NautilusMenuProvider, [
])

__freeze_rpythonic_struct( _NautilusMenuProviderIface, [
	( "g_iface", _GTypeInterface ),
	( "get_file_items", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_background_items", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _NautilusPropertyPageDetails, [
])

__freeze_rpythonic_struct( _NautilusPropertyPage, [
	( "parent", _GObject ),
	( "details", ctypes.POINTER(_NautilusPropertyPageDetails) ),
])

__freeze_rpythonic_struct( _NautilusPropertyPageClass, [
	( "parent", _GObjectClass ),
])

__freeze_rpythonic_struct( _NautilusPropertyPageProvider, [
])

__freeze_rpythonic_struct( _NautilusPropertyPageProviderIface, [
	( "g_iface", _GTypeInterface ),
	( "get_pages", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _NautilusCellRendererTextEllipsized, [
	( "parent", _GtkCellRendererText ),
])

__freeze_rpythonic_struct( _NautilusCellRendererTextEllipsizedClass, [
	( "parent_class", _GtkCellRendererTextClass ),
])

__freeze_rpythonic_struct( NautilusClipboardMonitorDetails, [
])

__freeze_rpythonic_struct( NautilusClipboardMonitor, [
	( "parent_slot", _GObject ),
	( "details", ctypes.POINTER(NautilusClipboardMonitorDetails) ),
])

__freeze_rpythonic_struct( NautilusClipboardMonitorClass, [
	( "parent_slot", _GObjectClass ),
	( "clipboard_changed", ctypes.c_void_p ),
	( "clipboard_info", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( NautilusClipboardInfo, [
	( "files", ctypes.POINTER(_GList) ),
	( "cut", ctypes.c_int ),
])

__freeze_rpythonic_struct( _NautilusColumnChooserDetails, [
])

__freeze_rpythonic_struct( NautilusColumnChooser, [
	( "parent", _GtkBox ),
	( "details", ctypes.POINTER(_NautilusColumnChooserDetails) ),
])

__freeze_rpythonic_struct( NautilusColumnChooserClass, [
	( "parent_slot", _GtkBoxClass ),
	( "changed", ctypes.c_void_p ),
	( "use_default", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( NautilusDesktopBackgroundDetails, [
])

__freeze_rpythonic_struct( NautilusDesktopBackground, [
	( "parent", _GObject ),
	( "details", ctypes.POINTER(NautilusDesktopBackgroundDetails) ),
])

__freeze_rpythonic_struct( NautilusDesktopBackgroundClass, [
	( "parent_class", _GObjectClass ),
])

__freeze_rpythonic_struct( NautilusDesktopDirectoryFileDetails, [
])

__freeze_rpythonic_struct( NautilusDesktopDirectoryFile, [
	( "parent_slot", NautilusFile ),
	( "details", ctypes.POINTER(NautilusDesktopDirectoryFileDetails) ),
])

__freeze_rpythonic_struct( NautilusDesktopDirectoryFileClass, [
	( "parent_slot", NautilusFileClass ),
])

__freeze_rpythonic_struct( NautilusDesktopDirectoryDetails, [
])

__freeze_rpythonic_struct( NautilusDesktopDirectory, [
	( "parent_slot", NautilusDirectory ),
	( "details", ctypes.POINTER(NautilusDesktopDirectoryDetails) ),
])

__freeze_rpythonic_struct( NautilusDesktopDirectoryClass, [
	( "parent_slot", NautilusDirectoryClass ),
])

__freeze_rpythonic_struct( NautilusDesktopLinkDetails, [
])

__freeze_rpythonic_struct( NautilusDesktopLink, [
	( "parent_slot", _GObject ),
	( "details", ctypes.POINTER(NautilusDesktopLinkDetails) ),
])

__freeze_rpythonic_struct( NautilusDesktopLinkClass, [
	( "parent_slot", _GObjectClass ),
])

__freeze_rpythonic_struct( NautilusDesktopIconFileDetails, [
])

__freeze_rpythonic_struct( NautilusDesktopIconFile, [
	( "parent_slot", NautilusFile ),
	( "details", ctypes.POINTER(NautilusDesktopIconFileDetails) ),
])

__freeze_rpythonic_struct( NautilusDesktopIconFileClass, [
	( "parent_slot", NautilusFileClass ),
])

__freeze_rpythonic_struct( NautilusDesktopLinkMonitorDetails, [
])

__freeze_rpythonic_struct( NautilusDesktopLinkMonitor, [
	( "parent_slot", _GObject ),
	( "details", ctypes.POINTER(NautilusDesktopLinkMonitorDetails) ),
])

__freeze_rpythonic_struct( NautilusDesktopLinkMonitorClass, [
	( "parent_slot", _GObjectClass ),
])

__freeze_rpythonic_struct( URIPair, [
	( "from_uri", ctypes.POINTER(ctypes.c_char) ),
	( "to_uri", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( GFilePair, [
	( "from", ctypes.POINTER(_GFile) ),
	( "to", ctypes.POINTER(_GFile) ),
])

__freeze_rpythonic_struct( NautilusFileChangesQueuePosition, [
	( "location", ctypes.POINTER(_GFile) ),
	( "set", ctypes.c_int ),
	( "point", _GdkPoint ),
	( "screen", ctypes.c_int ),
])

__freeze_rpythonic_struct( NautilusFileQueue, [
])

__freeze_rpythonic_struct( NautilusMonitor, [
])

__freeze_rpythonic_struct( _xmlBuffer, [
	( "content", ctypes.POINTER(ctypes.c_ubyte) ),
	( "use", ctypes.c_uint ),
	( "size", ctypes.c_uint ),
	( "alloc", ctypes.c_int ),
	( "contentIO", ctypes.POINTER(ctypes.c_ubyte) ),
])

__freeze_rpythonic_struct( _xmlNotation, [
	( "name", ctypes.POINTER(ctypes.c_ubyte) ),
	( "PublicID", ctypes.POINTER(ctypes.c_ubyte) ),
	( "SystemID", ctypes.POINTER(ctypes.c_ubyte) ),
])

__freeze_rpythonic_struct( _xmlEnumeration, [
	( "next", ctypes.POINTER(_xmlEnumeration) ),
	( "name", ctypes.POINTER(ctypes.c_ubyte) ),
])

__freeze_rpythonic_struct( _xmlAttribute, [
	( "_private", ctypes.POINTER(ctypes.c_void_p) ),
	( "C_type", ctypes.c_int ),
	( "name", ctypes.POINTER(ctypes.c_ubyte) ),
	( "children", ctypes.POINTER(_xmlNode) ),
	( "last", ctypes.POINTER(_xmlNode) ),
	( "parent", ctypes.POINTER(_xmlDtd) ),
	( "next", ctypes.POINTER(_xmlNode) ),
	( "prev", ctypes.POINTER(_xmlNode) ),
	( "doc", ctypes.POINTER(_xmlDoc) ),
	( "nexth", ctypes.POINTER(_xmlAttribute) ),
	( "atype", ctypes.c_int ),
	( "C_def", ctypes.c_int ),
	( "defaultValue", ctypes.POINTER(ctypes.c_ubyte) ),
	( "tree", ctypes.POINTER(_xmlEnumeration) ),
	( "prefix", ctypes.POINTER(ctypes.c_ubyte) ),
	( "elem", ctypes.POINTER(ctypes.c_ubyte) ),
])

__freeze_rpythonic_struct( _xmlElementContent, [
	( "C_type", ctypes.c_int ),
	( "ocur", ctypes.c_int ),
	( "name", ctypes.POINTER(ctypes.c_ubyte) ),
	( "c1", ctypes.POINTER(_xmlElementContent) ),
	( "c2", ctypes.POINTER(_xmlElementContent) ),
	( "parent", ctypes.POINTER(_xmlElementContent) ),
	( "prefix", ctypes.POINTER(ctypes.c_ubyte) ),
])

__freeze_rpythonic_struct( _xmlRegexp, [
])

__freeze_rpythonic_struct( _xmlRegExecCtxt, [
])

__freeze_rpythonic_struct( _xmlDict, [
])

__freeze_rpythonic_struct( _xmlExpCtxt, [
])

__freeze_rpythonic_struct( _xmlExpNode, [
])

__freeze_rpythonic_struct( _xmlElement, [
	( "_private", ctypes.POINTER(ctypes.c_void_p) ),
	( "C_type", ctypes.c_int ),
	( "name", ctypes.POINTER(ctypes.c_ubyte) ),
	( "children", ctypes.POINTER(_xmlNode) ),
	( "last", ctypes.POINTER(_xmlNode) ),
	( "parent", ctypes.POINTER(_xmlDtd) ),
	( "next", ctypes.POINTER(_xmlNode) ),
	( "prev", ctypes.POINTER(_xmlNode) ),
	( "doc", ctypes.POINTER(_xmlDoc) ),
	( "etype", ctypes.c_int ),
	( "content", ctypes.POINTER(_xmlElementContent) ),
	( "attributes", ctypes.POINTER(_xmlAttribute) ),
	( "prefix", ctypes.POINTER(ctypes.c_ubyte) ),
	( "contModel", ctypes.POINTER(_xmlRegexp) ),
])

__freeze_rpythonic_struct( _xmlNs, [
	( "next", ctypes.POINTER(_xmlNs) ),
	( "C_type", ctypes.c_int ),
	( "href", ctypes.POINTER(ctypes.c_ubyte) ),
	( "prefix", ctypes.POINTER(ctypes.c_ubyte) ),
	( "_private", ctypes.POINTER(ctypes.c_void_p) ),
	( "context", ctypes.POINTER(_xmlDoc) ),
])

__freeze_rpythonic_struct( _xmlDtd, [
	( "_private", ctypes.POINTER(ctypes.c_void_p) ),
	( "C_type", ctypes.c_int ),
	( "name", ctypes.POINTER(ctypes.c_ubyte) ),
	( "children", ctypes.POINTER(_xmlNode) ),
	( "last", ctypes.POINTER(_xmlNode) ),
	( "parent", ctypes.POINTER(_xmlDoc) ),
	( "next", ctypes.POINTER(_xmlNode) ),
	( "prev", ctypes.POINTER(_xmlNode) ),
	( "doc", ctypes.POINTER(_xmlDoc) ),
	( "notations", ctypes.POINTER(ctypes.c_void_p) ),
	( "elements", ctypes.POINTER(ctypes.c_void_p) ),
	( "attributes", ctypes.POINTER(ctypes.c_void_p) ),
	( "entities", ctypes.POINTER(ctypes.c_void_p) ),
	( "ExternalID", ctypes.POINTER(ctypes.c_ubyte) ),
	( "SystemID", ctypes.POINTER(ctypes.c_ubyte) ),
	( "pentities", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _xmlAttr, [
	( "_private", ctypes.POINTER(ctypes.c_void_p) ),
	( "C_type", ctypes.c_int ),
	( "name", ctypes.POINTER(ctypes.c_ubyte) ),
	( "children", ctypes.POINTER(_xmlNode) ),
	( "last", ctypes.POINTER(_xmlNode) ),
	( "parent", ctypes.POINTER(_xmlNode) ),
	( "next", ctypes.POINTER(_xmlAttr) ),
	( "prev", ctypes.POINTER(_xmlAttr) ),
	( "doc", ctypes.POINTER(_xmlDoc) ),
	( "ns", ctypes.POINTER(_xmlNs) ),
	( "atype", ctypes.c_int ),
	( "psvi", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _xmlID, [
	( "next", ctypes.POINTER(_xmlID) ),
	( "value", ctypes.POINTER(ctypes.c_ubyte) ),
	( "attr", ctypes.POINTER(_xmlAttr) ),
	( "name", ctypes.POINTER(ctypes.c_ubyte) ),
	( "lineno", ctypes.c_int ),
	( "doc", ctypes.POINTER(_xmlDoc) ),
])

__freeze_rpythonic_struct( _xmlRef, [
	( "next", ctypes.POINTER(_xmlRef) ),
	( "value", ctypes.POINTER(ctypes.c_ubyte) ),
	( "attr", ctypes.POINTER(_xmlAttr) ),
	( "name", ctypes.POINTER(ctypes.c_ubyte) ),
	( "lineno", ctypes.c_int ),
])

__freeze_rpythonic_struct( _xmlNode, [
	( "_private", ctypes.POINTER(ctypes.c_void_p) ),
	( "C_type", ctypes.c_int ),
	( "name", ctypes.POINTER(ctypes.c_ubyte) ),
	( "children", ctypes.POINTER(_xmlNode) ),
	( "last", ctypes.POINTER(_xmlNode) ),
	( "parent", ctypes.POINTER(_xmlNode) ),
	( "next", ctypes.POINTER(_xmlNode) ),
	( "prev", ctypes.POINTER(_xmlNode) ),
	( "doc", ctypes.POINTER(_xmlDoc) ),
	( "ns", ctypes.POINTER(_xmlNs) ),
	( "content", ctypes.POINTER(ctypes.c_ubyte) ),
	( "properties", ctypes.POINTER(_xmlAttr) ),
	( "nsDef", ctypes.POINTER(_xmlNs) ),
	( "psvi", ctypes.POINTER(ctypes.c_void_p) ),
	( "line", ctypes.c_ushort ),
	( "extra", ctypes.c_ushort ),
])

__freeze_rpythonic_struct( _xmlDoc, [
	( "_private", ctypes.POINTER(ctypes.c_void_p) ),
	( "C_type", ctypes.c_int ),
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "children", ctypes.POINTER(_xmlNode) ),
	( "last", ctypes.POINTER(_xmlNode) ),
	( "parent", ctypes.POINTER(_xmlNode) ),
	( "next", ctypes.POINTER(_xmlNode) ),
	( "prev", ctypes.POINTER(_xmlNode) ),
	( "doc", ctypes.POINTER(_xmlDoc) ),
	( "compression", ctypes.c_int ),
	( "standalone", ctypes.c_int ),
	( "intSubset", ctypes.POINTER(_xmlDtd) ),
	( "extSubset", ctypes.POINTER(_xmlDtd) ),
	( "oldNs", ctypes.POINTER(_xmlNs) ),
	( "version", ctypes.POINTER(ctypes.c_ubyte) ),
	( "encoding", ctypes.POINTER(ctypes.c_ubyte) ),
	( "ids", ctypes.POINTER(ctypes.c_void_p) ),
	( "refs", ctypes.POINTER(ctypes.c_void_p) ),
	( "URL", ctypes.POINTER(ctypes.c_ubyte) ),
	( "charset", ctypes.c_int ),
	( "C_dict", ctypes.POINTER(_xmlDict) ),
	( "psvi", ctypes.POINTER(ctypes.c_void_p) ),
	( "parseFlags", ctypes.c_int ),
	( "properties", ctypes.c_int ),
])

__freeze_rpythonic_struct( _xmlDOMWrapCtxt, [
	( "_private", ctypes.POINTER(ctypes.c_void_p) ),
	( "C_type", ctypes.c_int ),
	( "namespaceMap", ctypes.POINTER(ctypes.c_void_p) ),
	( "getNsForNodeFunc", ctypes.CFUNCTYPE(ctypes.POINTER(_xmlNs), ctypes.POINTER(_xmlDOMWrapCtxt),ctypes.POINTER(_xmlNode),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),) ),
])

__freeze_rpythonic_struct( _xmlMutex, [
])

__freeze_rpythonic_struct( _xmlRMutex, [
])

__freeze_rpythonic_struct( _xmlHashTable, [
])

__freeze_rpythonic_struct( _xmlError, [
	( "domain", ctypes.c_int ),
	( "code", ctypes.c_int ),
	( "message", ctypes.POINTER(ctypes.c_char) ),
	( "level", ctypes.c_int ),
	( "file", ctypes.POINTER(ctypes.c_char) ),
	( "line", ctypes.c_int ),
	( "str1", ctypes.POINTER(ctypes.c_char) ),
	( "str2", ctypes.POINTER(ctypes.c_char) ),
	( "str3", ctypes.POINTER(ctypes.c_char) ),
	( "int1", ctypes.c_int ),
	( "int2", ctypes.c_int ),
	( "ctxt", ctypes.POINTER(ctypes.c_void_p) ),
	( "node", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _xmlLink, [
])

__freeze_rpythonic_struct( _xmlList, [
])

__freeze_rpythonic_struct( _xmlAutomata, [
])

__freeze_rpythonic_struct( _xmlAutomataState, [
])

__freeze_rpythonic_struct( _xmlValidState, [
])

__freeze_rpythonic_struct( _xmlValidCtxt, [
	( "userData", ctypes.POINTER(ctypes.c_void_p) ),
	( "error", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),) ),
	( "warning", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),) ),
	( "node", ctypes.POINTER(_xmlNode) ),
	( "nodeNr", ctypes.c_int ),
	( "nodeMax", ctypes.c_int ),
	( "nodeTab", ctypes.POINTER(ctypes.POINTER(_xmlNode)) ),
	( "finishDtd", ctypes.c_uint ),
	( "doc", ctypes.POINTER(_xmlDoc) ),
	( "valid", ctypes.c_int ),
	( "vstate", ctypes.POINTER(_xmlValidState) ),
	( "vstateNr", ctypes.c_int ),
	( "vstateMax", ctypes.c_int ),
	( "vstateTab", ctypes.POINTER(_xmlValidState) ),
	( "am", ctypes.POINTER(_xmlAutomata) ),
	( "state", ctypes.POINTER(_xmlAutomataState) ),
])

__freeze_rpythonic_struct( _xmlEntity, [
	( "_private", ctypes.POINTER(ctypes.c_void_p) ),
	( "C_type", ctypes.c_int ),
	( "name", ctypes.POINTER(ctypes.c_ubyte) ),
	( "children", ctypes.POINTER(_xmlNode) ),
	( "last", ctypes.POINTER(_xmlNode) ),
	( "parent", ctypes.POINTER(_xmlDtd) ),
	( "next", ctypes.POINTER(_xmlNode) ),
	( "prev", ctypes.POINTER(_xmlNode) ),
	( "doc", ctypes.POINTER(_xmlDoc) ),
	( "orig", ctypes.POINTER(ctypes.c_ubyte) ),
	( "content", ctypes.POINTER(ctypes.c_ubyte) ),
	( "length", ctypes.c_int ),
	( "etype", ctypes.c_int ),
	( "ExternalID", ctypes.POINTER(ctypes.c_ubyte) ),
	( "SystemID", ctypes.POINTER(ctypes.c_ubyte) ),
	( "nexte", ctypes.POINTER(_xmlEntity) ),
	( "URI", ctypes.POINTER(ctypes.c_ubyte) ),
	( "owner", ctypes.c_int ),
	( "checked", ctypes.c_int ),
])

__freeze_rpythonic_struct( _xmlParserInput, [
	( "buf", ctypes.POINTER(_xmlParserInputBuffer) ),
	( "filename", ctypes.POINTER(ctypes.c_char) ),
	( "directory", ctypes.POINTER(ctypes.c_char) ),
	( "base", ctypes.POINTER(ctypes.c_ubyte) ),
	( "cur", ctypes.POINTER(ctypes.c_ubyte) ),
	( "end", ctypes.POINTER(ctypes.c_ubyte) ),
	( "length", ctypes.c_int ),
	( "line", ctypes.c_int ),
	( "col", ctypes.c_int ),
	( "consumed", ctypes.c_ulong ),
	( "free", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_ubyte),) ),
	( "encoding", ctypes.POINTER(ctypes.c_ubyte) ),
	( "version", ctypes.POINTER(ctypes.c_ubyte) ),
	( "standalone", ctypes.c_int ),
	( "C_id", ctypes.c_int ),
])

__freeze_rpythonic_struct( _xmlParserNodeInfo, [
	( "node", ctypes.POINTER(_xmlNode) ),
	( "begin_pos", ctypes.c_ulong ),
	( "begin_line", ctypes.c_ulong ),
	( "end_pos", ctypes.c_ulong ),
	( "end_line", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( _xmlParserNodeInfoSeq, [
	( "maximum", ctypes.c_ulong ),
	( "length", ctypes.c_ulong ),
	( "buffer", ctypes.POINTER(_xmlParserNodeInfo) ),
])

__freeze_rpythonic_struct( _xmlParserCtxt, [
	( "sax", ctypes.POINTER(_xmlSAXHandler) ),
	( "userData", ctypes.POINTER(ctypes.c_void_p) ),
	( "myDoc", ctypes.POINTER(_xmlDoc) ),
	( "wellFormed", ctypes.c_int ),
	( "replaceEntities", ctypes.c_int ),
	( "version", ctypes.POINTER(ctypes.c_ubyte) ),
	( "encoding", ctypes.POINTER(ctypes.c_ubyte) ),
	( "standalone", ctypes.c_int ),
	( "html", ctypes.c_int ),
	( "input", ctypes.POINTER(_xmlParserInput) ),
	( "inputNr", ctypes.c_int ),
	( "inputMax", ctypes.c_int ),
	( "inputTab", ctypes.POINTER(ctypes.POINTER(_xmlParserInput)) ),
	( "node", ctypes.POINTER(_xmlNode) ),
	( "nodeNr", ctypes.c_int ),
	( "nodeMax", ctypes.c_int ),
	( "nodeTab", ctypes.POINTER(ctypes.POINTER(_xmlNode)) ),
	( "record_info", ctypes.c_int ),
	( "node_seq", _xmlParserNodeInfoSeq ),
	( "errNo", ctypes.c_int ),
	( "hasExternalSubset", ctypes.c_int ),
	( "hasPErefs", ctypes.c_int ),
	( "external", ctypes.c_int ),
	( "valid", ctypes.c_int ),
	( "validate", ctypes.c_int ),
	( "vctxt", _xmlValidCtxt ),
	( "instate", ctypes.c_int ),
	( "token", ctypes.c_int ),
	( "directory", ctypes.POINTER(ctypes.c_char) ),
	( "name", ctypes.POINTER(ctypes.c_ubyte) ),
	( "nameNr", ctypes.c_int ),
	( "nameMax", ctypes.c_int ),
	( "nameTab", ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)) ),
	( "nbChars", ctypes.c_long ),
	( "checkIndex", ctypes.c_long ),
	( "keepBlanks", ctypes.c_int ),
	( "disableSAX", ctypes.c_int ),
	( "inSubset", ctypes.c_int ),
	( "intSubName", ctypes.POINTER(ctypes.c_ubyte) ),
	( "extSubURI", ctypes.POINTER(ctypes.c_ubyte) ),
	( "extSubSystem", ctypes.POINTER(ctypes.c_ubyte) ),
	( "space", ctypes.POINTER(ctypes.c_int) ),
	( "spaceNr", ctypes.c_int ),
	( "spaceMax", ctypes.c_int ),
	( "spaceTab", ctypes.POINTER(ctypes.c_int) ),
	( "depth", ctypes.c_int ),
	( "entity", ctypes.POINTER(_xmlParserInput) ),
	( "charset", ctypes.c_int ),
	( "nodelen", ctypes.c_int ),
	( "nodemem", ctypes.c_int ),
	( "pedantic", ctypes.c_int ),
	( "_private", ctypes.POINTER(ctypes.c_void_p) ),
	( "loadsubset", ctypes.c_int ),
	( "linenumbers", ctypes.c_int ),
	( "catalogs", ctypes.POINTER(ctypes.c_void_p) ),
	( "recovery", ctypes.c_int ),
	( "progressive", ctypes.c_int ),
	( "C_dict", ctypes.POINTER(_xmlDict) ),
	( "atts", ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)) ),
	( "maxatts", ctypes.c_int ),
	( "docdict", ctypes.c_int ),
	( "str_xml", ctypes.POINTER(ctypes.c_ubyte) ),
	( "str_xmlns", ctypes.POINTER(ctypes.c_ubyte) ),
	( "str_xml_ns", ctypes.POINTER(ctypes.c_ubyte) ),
	( "sax2", ctypes.c_int ),
	( "nsNr", ctypes.c_int ),
	( "nsMax", ctypes.c_int ),
	( "nsTab", ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)) ),
	( "attallocs", ctypes.POINTER(ctypes.c_int) ),
	( "pushTab", ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)) ),
	( "attsDefault", ctypes.POINTER(_xmlHashTable) ),
	( "attsSpecial", ctypes.POINTER(_xmlHashTable) ),
	( "nsWellFormed", ctypes.c_int ),
	( "options", ctypes.c_int ),
	( "dictNames", ctypes.c_int ),
	( "freeElemsNr", ctypes.c_int ),
	( "freeElems", ctypes.POINTER(_xmlNode) ),
	( "freeAttrsNr", ctypes.c_int ),
	( "freeAttrs", ctypes.POINTER(_xmlAttr) ),
	( "lastError", _xmlError ),
	( "parseMode", ctypes.c_int ),
	( "nbentities", ctypes.c_ulong ),
	( "sizeentities", ctypes.c_ulong ),
	( "nodeInfo", ctypes.POINTER(_xmlParserNodeInfo) ),
	( "nodeInfoNr", ctypes.c_int ),
	( "nodeInfoMax", ctypes.c_int ),
	( "nodeInfoTab", ctypes.POINTER(_xmlParserNodeInfo) ),
])

__freeze_rpythonic_struct( _xmlSAXLocator, [
	( "getPublicId", ctypes.POINTER(ctypes.c_void_p) ),
	( "getSystemId", ctypes.POINTER(ctypes.c_void_p) ),
	( "getLineNumber", ctypes.c_void_p ),
	( "getColumnNumber", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _xmlSAXHandler, [
	( "internalSubset", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "isStandalone", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
	( "hasInternalSubset", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
	( "hasExternalSubset", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
	( "resolveEntity", ctypes.CFUNCTYPE(ctypes.POINTER(_xmlParserInput), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "getEntity", ctypes.CFUNCTYPE(ctypes.POINTER(_xmlEntity), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "entityDecl", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.c_int,ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "notationDecl", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "attributeDecl", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),ctypes.c_int,ctypes.c_int,ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(_xmlEnumeration),) ),
	( "elementDecl", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.c_int,ctypes.POINTER(_xmlElementContent),) ),
	( "unparsedEntityDecl", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "setDocumentLocator", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_xmlSAXLocator),) ),
	( "startDocument", ctypes.CFUNCTYPE(ctypes.c_void_p, ) ),
	( "endDocument", ctypes.CFUNCTYPE(ctypes.c_void_p, ) ),
	( "startElement", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)),) ),
	( "endElement", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "reference", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "characters", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.c_int,) ),
	( "ignorableWhitespace", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.c_int,) ),
	( "processingInstruction", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "comment", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "warning", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),) ),
	( "error", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),) ),
	( "fatalError", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),) ),
	( "getParameterEntity", ctypes.CFUNCTYPE(ctypes.POINTER(_xmlEntity), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "cdataBlock", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.c_int,) ),
	( "externalSubset", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "initialized", ctypes.c_uint ),
	( "_private", ctypes.POINTER(ctypes.c_void_p) ),
	( "startElementNs", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),ctypes.c_int,ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)),ctypes.c_int,ctypes.c_int,ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)),) ),
	( "endElementNs", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "serror", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_xmlError),) ),
])

__freeze_rpythonic_struct( _xmlSAXHandlerV1, [
	( "internalSubset", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "isStandalone", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
	( "hasInternalSubset", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
	( "hasExternalSubset", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
	( "resolveEntity", ctypes.CFUNCTYPE(ctypes.POINTER(_xmlParserInput), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "getEntity", ctypes.CFUNCTYPE(ctypes.POINTER(_xmlEntity), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "entityDecl", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.c_int,ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "notationDecl", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "attributeDecl", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),ctypes.c_int,ctypes.c_int,ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(_xmlEnumeration),) ),
	( "elementDecl", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.c_int,ctypes.POINTER(_xmlElementContent),) ),
	( "unparsedEntityDecl", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "setDocumentLocator", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_xmlSAXLocator),) ),
	( "startDocument", ctypes.CFUNCTYPE(ctypes.c_void_p, ) ),
	( "endDocument", ctypes.CFUNCTYPE(ctypes.c_void_p, ) ),
	( "startElement", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)),) ),
	( "endElement", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "reference", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "characters", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.c_int,) ),
	( "ignorableWhitespace", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.c_int,) ),
	( "processingInstruction", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "comment", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "warning", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),) ),
	( "error", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),) ),
	( "fatalError", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),) ),
	( "getParameterEntity", ctypes.CFUNCTYPE(ctypes.POINTER(_xmlEntity), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "cdataBlock", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.c_int,) ),
	( "externalSubset", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "initialized", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _xmlCharEncodingHandler, [
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "input", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_int),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_int),) ),
	( "output", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_int),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_int),) ),
	( "iconv_in", ctypes.POINTER(ctypes.c_void_p) ),
	( "iconv_out", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _xmlParserInputBuffer, [
	( "context", ctypes.POINTER(ctypes.c_void_p) ),
	( "readcallback", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),ctypes.c_int,) ),
	( "closecallback", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
	( "encoder", ctypes.POINTER(_xmlCharEncodingHandler) ),
	( "buffer", ctypes.POINTER(_xmlBuffer) ),
	( "raw", ctypes.POINTER(_xmlBuffer) ),
	( "compressed", ctypes.c_int ),
	( "error", ctypes.c_int ),
	( "rawconsumed", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( _xmlOutputBuffer, [
	( "context", ctypes.POINTER(ctypes.c_void_p) ),
	( "writecallback", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),ctypes.c_int,) ),
	( "closecallback", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
	( "encoder", ctypes.POINTER(_xmlCharEncodingHandler) ),
	( "buffer", ctypes.POINTER(_xmlBuffer) ),
	( "conv", ctypes.POINTER(_xmlBuffer) ),
	( "written", ctypes.c_int ),
	( "error", ctypes.c_int ),
])

__freeze_rpythonic_struct( wait, [
	( "w_status", ctypes.c_int ),
	( "__wait_terminated", __wait_terminated ),
	( "__wait_stopped", __wait_stopped ),
])

__freeze_rpythonic_struct( __wait_terminated, [
	( "__w_termsig", ctypes.c_uint ),
	( "__w_coredump", ctypes.c_uint ),
	( "__w_retcode", ctypes.c_uint ),
	#opaque-warning# <rpythonic.rpythonic.SomeThing object at 0x15468b0c>
])

__freeze_rpythonic_struct( __wait_stopped, [
	( "__w_stopval", ctypes.c_uint ),
	( "__w_stopsig", ctypes.c_uint ),
	#opaque-warning# <rpythonic.rpythonic.SomeThing object at 0x15468cac>
])

__freeze_rpythonic_struct( __WAIT_STATUS, [
	( "__uptr", ctypes.POINTER(wait) ),
	( "__iptr", ctypes.POINTER(ctypes.c_int) ),
])

__freeze_rpythonic_struct( div_t, [
	( "quot", ctypes.c_int ),
	( "rem", ctypes.c_int ),
])

__freeze_rpythonic_struct( ldiv_t, [
	( "quot", ctypes.c_int64 ),
	( "rem", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( lldiv_t, [
	( "quot", ctypes.c_longlong ),
	( "rem", ctypes.c_longlong ),
])

__freeze_rpythonic_struct( random_data, [
	( "fptr", ctypes.POINTER(ctypes.c_int32) ),
	( "rptr", ctypes.POINTER(ctypes.c_int32) ),
	( "state", ctypes.POINTER(ctypes.c_int32) ),
	( "rand_type", ctypes.c_int ),
	( "rand_deg", ctypes.c_int ),
	( "rand_sep", ctypes.c_int ),
	( "end_ptr", ctypes.POINTER(ctypes.c_int32) ),
])

__freeze_rpythonic_struct( drand48_data, [
	( "__x", ( ctypes.c_uint16 * 3 ) ),
	( "__old_x", ( ctypes.c_uint16 * 3 ) ),
	( "__c", ctypes.c_uint16 ),
	( "__init", ctypes.c_uint16 ),
	( "__a", ctypes.c_ulonglong ),
])

__freeze_rpythonic_struct( _xlinkHandler, [
	( "simple", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_xmlNode),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),) ),
	( "extended", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_xmlNode),ctypes.c_int,ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)),ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)),ctypes.c_int,ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)),ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)),ctypes.POINTER(ctypes.c_int),ctypes.POINTER(ctypes.c_int),ctypes.c_int,ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)),ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)),) ),
	( "set", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_xmlNode),ctypes.c_int,ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)),ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)),ctypes.c_int,ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)),ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)),) ),
])

__freeze_rpythonic_struct( _xmlGlobalState, [
	( "xmlParserVersion", ctypes.POINTER(ctypes.c_char) ),
	( "xmlDefaultSAXLocator", _xmlSAXLocator ),
	( "xmlDefaultSAXHandler", _xmlSAXHandlerV1 ),
	( "docbDefaultSAXHandler", _xmlSAXHandlerV1 ),
	( "htmlDefaultSAXHandler", _xmlSAXHandlerV1 ),
	( "xmlFree", ctypes.CFUNCTYPE(ctypes.c_void_p, ) ),
	( "xmlMalloc", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), ctypes.c_uint,)) ),
	( "xmlMemStrdup", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_char),)) ),
	( "xmlRealloc", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), ctypes.POINTER(ctypes.c_void_p),ctypes.c_uint,)) ),
	( "xmlGenericError", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),) ),
	( "xmlStructuredError", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_xmlError),) ),
	( "xmlGenericErrorContext", ctypes.POINTER(ctypes.c_void_p) ),
	( "oldXMLWDcompatibility", ctypes.c_int ),
	( "xmlBufferAllocScheme", ctypes.c_int ),
	( "xmlDefaultBufferSize", ctypes.c_int ),
	( "xmlSubstituteEntitiesDefaultValue", ctypes.c_int ),
	( "xmlDoValidityCheckingDefaultValue", ctypes.c_int ),
	( "xmlGetWarningsDefaultValue", ctypes.c_int ),
	( "xmlKeepBlanksDefaultValue", ctypes.c_int ),
	( "xmlLineNumbersDefaultValue", ctypes.c_int ),
	( "xmlLoadExtDtdDefaultValue", ctypes.c_int ),
	( "xmlParserDebugEntities", ctypes.c_int ),
	( "xmlPedanticParserDefaultValue", ctypes.c_int ),
	( "xmlSaveNoEmptyTags", ctypes.c_int ),
	( "xmlIndentTreeOutput", ctypes.c_int ),
	( "xmlTreeIndentString", ctypes.POINTER(ctypes.c_char) ),
	( "xmlRegisterNodeDefaultValue", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_xmlNode),) ),
	( "xmlDeregisterNodeDefaultValue", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_xmlNode),) ),
	( "xmlMallocAtomic", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), ctypes.c_uint,)) ),
	( "xmlLastError", _xmlError ),
	( "xmlParserInputBufferCreateFilenameValue", ctypes.CFUNCTYPE(ctypes.POINTER(_xmlParserInputBuffer), ctypes.POINTER(ctypes.c_char),ctypes.c_int,) ),
	( "xmlOutputBufferCreateFilenameValue", ctypes.CFUNCTYPE(ctypes.POINTER(_xmlOutputBuffer), ctypes.POINTER(ctypes.c_char),ctypes.POINTER(_xmlCharEncodingHandler),ctypes.c_int,) ),
	( "xmlStructuredErrorContext", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( LinkInfoReadState, [
])

__freeze_rpythonic_struct( TopLeftTextReadState, [
])

__freeze_rpythonic_struct( FileMonitors, [
])

__freeze_rpythonic_struct( DirectoryLoadState, [
])

__freeze_rpythonic_struct( DirectoryCountState, [
])

__freeze_rpythonic_struct( DeepCountState, [
])

__freeze_rpythonic_struct( GetInfoState, [
])

__freeze_rpythonic_struct( NewFilesState, [
])

__freeze_rpythonic_struct( MimeListState, [
])

__freeze_rpythonic_struct( ThumbnailState, [
])

__freeze_rpythonic_struct( MountState, [
])

__freeze_rpythonic_struct( FilesystemInfoState, [
])

__freeze_rpythonic_struct( NautilusDragSelectionItem, [
	( "uri", ctypes.POINTER(ctypes.c_char) ),
	( "got_icon_position", ctypes.c_int ),
	( "icon_x", ctypes.c_int ),
	( "icon_y", ctypes.c_int ),
	( "icon_width", ctypes.c_int ),
	( "icon_height", ctypes.c_int ),
])

__freeze_rpythonic_struct( NautilusDragInfo, [
	( "target_list", ctypes.POINTER(_GtkTargetList) ),
	( "got_drop_data_type", ctypes.c_int ),
	( "data_type", ctypes.c_int ),
	( "selection_data", ctypes.POINTER(_GtkSelectionData) ),
	( "direct_save_uri", ctypes.POINTER(ctypes.c_char) ),
	( "start_x", ctypes.c_int ),
	( "start_y", ctypes.c_int ),
	( "selection_list", ctypes.POINTER(_GList) ),
	( "drop_occured", ctypes.c_int ),
	( "need_to_destroy", ctypes.c_int ),
	( "auto_scroll_timeout_id", ctypes.c_int ),
	( "waiting_to_autoscroll", ctypes.c_int ),
	( "start_auto_scroll_in", ctypes.c_longlong ),
])

__freeze_rpythonic_struct( NautilusEntryDetails, [
])

__freeze_rpythonic_struct( NautilusEntry, [
	( "parent", _GtkEntry ),
	( "details", ctypes.POINTER(NautilusEntryDetails) ),
])

__freeze_rpythonic_struct( NautilusEntryClass, [
	( "parent_class", _GtkEntryClass ),
	( "selection_changed", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _NautilusFileConflictDialogDetails, [
])

__freeze_rpythonic_struct( _NautilusFileConflictDialog, [
	( "parent", _GtkDialog ),
	( "details", ctypes.POINTER(_NautilusFileConflictDialogDetails) ),
])

__freeze_rpythonic_struct( _NautilusFileConflictDialogClass, [
	( "parent_class", _GtkDialogClass ),
])

__freeze_rpythonic_struct( _NautilusFileUndoInfoDetails, [
])

__freeze_rpythonic_struct( _NautilusFileUndoInfo, [
	( "parent", _GObject ),
	( "priv", ctypes.POINTER(_NautilusFileUndoInfoDetails) ),
])

__freeze_rpythonic_struct( _NautilusFileUndoInfoClass, [
	( "parent_class", _GObjectClass ),
	( "undo_func", ctypes.c_void_p ),
	( "redo_func", ctypes.c_void_p ),
	( "strings_func", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _NautilusFileUndoInfoExtDetails, [
])

__freeze_rpythonic_struct( _NautilusFileUndoInfoExt, [
	( "parent", _NautilusFileUndoInfo ),
	( "priv", ctypes.POINTER(_NautilusFileUndoInfoExtDetails) ),
])

__freeze_rpythonic_struct( _NautilusFileUndoInfoExtClass, [
	( "parent_class", _NautilusFileUndoInfoClass ),
])

__freeze_rpythonic_struct( _NautilusFileUndoInfoCreateDetails, [
])

__freeze_rpythonic_struct( _NautilusFileUndoInfoCreate, [
	( "parent", _NautilusFileUndoInfo ),
	( "priv", ctypes.POINTER(_NautilusFileUndoInfoCreateDetails) ),
])

__freeze_rpythonic_struct( _NautilusFileUndoInfoCreateClass, [
	( "parent_class", _NautilusFileUndoInfoClass ),
])

__freeze_rpythonic_struct( _NautilusFileUndoInfoRenameDetails, [
])

__freeze_rpythonic_struct( _NautilusFileUndoInfoRename, [
	( "parent", _NautilusFileUndoInfo ),
	( "priv", ctypes.POINTER(_NautilusFileUndoInfoRenameDetails) ),
])

__freeze_rpythonic_struct( _NautilusFileUndoInfoRenameClass, [
	( "parent_class", _NautilusFileUndoInfoClass ),
])

__freeze_rpythonic_struct( _NautilusFileUndoInfoTrashDetails, [
])

__freeze_rpythonic_struct( _NautilusFileUndoInfoTrash, [
	( "parent", _NautilusFileUndoInfo ),
	( "priv", ctypes.POINTER(_NautilusFileUndoInfoTrashDetails) ),
])

__freeze_rpythonic_struct( _NautilusFileUndoInfoTrashClass, [
	( "parent_class", _NautilusFileUndoInfoClass ),
])

__freeze_rpythonic_struct( _NautilusFileUndoInfoRecPermissionsDetails, [
])

__freeze_rpythonic_struct( _NautilusFileUndoInfoRecPermissions, [
	( "parent", _NautilusFileUndoInfo ),
	( "priv", ctypes.POINTER(_NautilusFileUndoInfoRecPermissionsDetails) ),
])

__freeze_rpythonic_struct( _NautilusFileUndoInfoRecPermissionsClass, [
	( "parent_class", _NautilusFileUndoInfoClass ),
])

__freeze_rpythonic_struct( _NautilusFileUndoInfoPermissionsDetails, [
])

__freeze_rpythonic_struct( _NautilusFileUndoInfoPermissions, [
	( "parent", _NautilusFileUndoInfo ),
	( "priv", ctypes.POINTER(_NautilusFileUndoInfoPermissionsDetails) ),
])

__freeze_rpythonic_struct( _NautilusFileUndoInfoPermissionsClass, [
	( "parent_class", _NautilusFileUndoInfoClass ),
])

__freeze_rpythonic_struct( _NautilusFileUndoInfoOwnershipDetails, [
])

__freeze_rpythonic_struct( _NautilusFileUndoInfoOwnership, [
	( "parent", _NautilusFileUndoInfo ),
	( "priv", ctypes.POINTER(_NautilusFileUndoInfoOwnershipDetails) ),
])

__freeze_rpythonic_struct( _NautilusFileUndoInfoOwnershipClass, [
	( "parent_class", _NautilusFileUndoInfoClass ),
])

__freeze_rpythonic_struct( EelPrintfHandler, [
	( "character", ctypes.c_char ),
	( "to_string", ctypes.POINTER(ctypes.c_void_p) ),
	( "skip", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( NautilusFileOperation, [
	( "file", ctypes.POINTER(NautilusFile) ),
	( "cancellable", ctypes.POINTER(_GCancellable) ),
	( "callback", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(NautilusFile),ctypes.POINTER(_GFile),ctypes.POINTER(_GError),ctypes.POINTER(ctypes.c_void_p),) ),
	( "callback_data", ctypes.POINTER(ctypes.c_void_p) ),
	( "is_rename", ctypes.c_int ),
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
	( "free_data", ctypes.CFUNCTYPE(ctypes.c_void_p, ) ),
	( "undo_info", ctypes.POINTER(_NautilusFileUndoInfo) ),
])

__freeze_rpythonic_struct( _NautilusFileUndoManagerPrivate, [
])

__freeze_rpythonic_struct( _NautilusFileUndoManager, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_NautilusFileUndoManagerPrivate) ),
])

__freeze_rpythonic_struct( _NautilusFileUndoManagerClass, [
	( "parent_class", _GObjectClass ),
])

__freeze_rpythonic_struct( EelDRect, [
	( "x0", ctypes.c_double ),
	( "y0", ctypes.c_double ),
	( "x1", ctypes.c_double ),
	( "y1", ctypes.c_double ),
])

__freeze_rpythonic_struct( EelIRect, [
	( "x0", ctypes.c_int ),
	( "y0", ctypes.c_int ),
	( "x1", ctypes.c_int ),
	( "y1", ctypes.c_int ),
])

__freeze_rpythonic_struct( NautilusIconCanvasItemDetails, [
])

__freeze_rpythonic_struct( NautilusIconCanvasItem, [
	( "item", _EelCanvasItem ),
	( "details", ctypes.POINTER(NautilusIconCanvasItemDetails) ),
	( "user_data", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( NautilusIconCanvasItemClass, [
	( "parent_class", _EelCanvasItemClass ),
])

__freeze_rpythonic_struct( NautilusIconDndInfo, [
	( "drag_info", NautilusDragInfo ),
	( "highlighted", ctypes.c_int ),
	( "shadow", ctypes.POINTER(_EelCanvasItem) ),
])

__freeze_rpythonic_struct( NautilusIcon, [
	( "data", ctypes.POINTER(NautilusIconData) ),
	( "item", ctypes.POINTER(NautilusIconCanvasItem) ),
	( "x", ctypes.c_double ),
	( "y", ctypes.c_double ),
	( "saved_ltr_x", ctypes.c_double ),
	( "scale", ctypes.c_double ),
	( "is_selected", ctypes.c_uint ),
	( "was_selected_before_rubberband", ctypes.c_uint ),
	( "is_visible", ctypes.c_uint ),
	( "is_monitored", ctypes.c_uint ),
	( "has_lazy_position", ctypes.c_uint ),
])

__freeze_rpythonic_struct( NautilusIconRubberbandInfo, [
	( "active", ctypes.c_int ),
	( "start_x", ctypes.c_double ),
	( "start_y", ctypes.c_double ),
	( "selection_rectangle", ctypes.POINTER(_EelCanvasItem) ),
	( "timer_id", ctypes.c_uint ),
	( "prev_x", ctypes.c_uint ),
	( "prev_y", ctypes.c_uint ),
	( "prev_rect", EelDRect ),
	( "last_adj_x", ctypes.c_int ),
	( "last_adj_y", ctypes.c_int ),
])

__freeze_rpythonic_struct( StretchState, [
	( "pointer_x", ctypes.c_int ),
	( "pointer_y", ctypes.c_int ),
	( "icon_x", ctypes.c_int ),
	( "icon_y", ctypes.c_int ),
	( "icon_size", ctypes.c_uint ),
])

__freeze_rpythonic_struct( NautilusIconContainerDetails, [
	( "icons", ctypes.POINTER(_GList) ),
	( "new_icons", ctypes.POINTER(_GList) ),
	( "icon_set", ctypes.POINTER(_GHashTable) ),
	( "keyboard_focus", ctypes.POINTER(NautilusIcon) ),
	( "keyboard_rubberband_start", ctypes.POINTER(NautilusIcon) ),
	( "stretch_icon", ctypes.POINTER(NautilusIcon) ),
	( "stretch_initial_x", ctypes.c_double ),
	( "stretch_initial_y", ctypes.c_double ),
	( "stretch_initial_size", ctypes.c_uint ),
	( "drop_target", ctypes.POINTER(NautilusIcon) ),
	( "rubberband_info", NautilusIconRubberbandInfo ),
	( "keyboard_icon_reveal_timer_id", ctypes.c_uint ),
	( "keyboard_icon_to_reveal", ctypes.POINTER(NautilusIcon) ),
	( "selection_changed_id", ctypes.c_uint ),
	( "pending_icon_to_reveal", ctypes.POINTER(NautilusIcon) ),
	( "pending_icon_to_rename", ctypes.POINTER(NautilusIcon) ),
	( "button_down_time", ctypes.c_uint ),
	( "drag_button", ctypes.c_uint ),
	( "drag_icon", ctypes.POINTER(NautilusIcon) ),
	( "drag_x", ctypes.c_int ),
	( "drag_y", ctypes.c_int ),
	( "drag_state", ctypes.c_int ),
	( "drag_started", ctypes.c_int ),
	( "stretch_start", StretchState ),
	( "drag_allow_moves", ctypes.c_int ),
	( "icon_selected_on_button_down", ctypes.c_int ),
	( "double_click_icon", ctypes.POINTER(( NautilusIcon * 2 )) ),
	( "double_click_button", ( ctypes.c_uint * 2 ) ),
	( "range_selection_base_icon", ctypes.POINTER(NautilusIcon) ),
	( "renaming", ctypes.c_int ),
	( "rename_widget", ctypes.POINTER(_GtkWidget) ),
	( "original_text", ctypes.POINTER(ctypes.c_char) ),
	( "idle_id", ctypes.c_uint ),
	( "stretch_idle_id", ctypes.c_uint ),
	( "align_idle_id", ctypes.c_uint ),
	( "dnd_info", ctypes.POINTER(NautilusIconDndInfo) ),
	( "zoom_level", ctypes.c_int ),
	( "font", ctypes.POINTER(ctypes.c_char) ),
	( "font_size_table", ( ctypes.c_int * 7 ) ),
	( "arrow_key_start_x", ctypes.c_int ),
	( "arrow_key_start_y", ctypes.c_int ),
	( "arrow_key_direction", ctypes.c_int ),
	( "single_click_mode", ctypes.c_int ),
	( "auto_layout", ctypes.c_int ),
	( "layout_mode", ctypes.c_int ),
	( "label_position", ctypes.c_int ),
	( "keep_aligned", ctypes.c_int ),
	( "has_been_allocated", ctypes.c_int ),
	( "size_allocation_count", ctypes.c_int ),
	( "size_allocation_count_id", ctypes.c_uint ),
	( "is_fixed_size", ctypes.c_int ),
	( "is_desktop", ctypes.c_int ),
	( "reset_scroll_region_trigger", ctypes.c_int ),
	( "world_x", ctypes.c_double ),
	( "world_y", ctypes.c_double ),
	( "left_margin", ctypes.c_int ),
	( "right_margin", ctypes.c_int ),
	( "top_margin", ctypes.c_int ),
	( "bottom_margin", ctypes.c_int ),
	( "use_drop_shadows", ctypes.c_int ),
	( "drop_shadows_requested", ctypes.c_int ),
	( "a11y_item_action_idle_handler", ctypes.c_uint ),
	( "a11y_item_action_queue", ctypes.POINTER(_GQueue) ),
	( "is_loading", ctypes.c_uint ),
	( "needs_resort", ctypes.c_uint ),
	( "store_layout_timestamps", ctypes.c_uint ),
	( "store_layout_timestamps_when_finishing_new_icons", ctypes.c_uint ),
	( "layout_timestamp", ctypes.c_int64 ),
	( "imcontext_changed", ctypes.c_int ),
	( "selected_iter", ctypes.c_int ),
	( "search_window", ctypes.POINTER(_GtkWidget) ),
	( "search_entry", ctypes.POINTER(_GtkWidget) ),
	( "search_entry_changed_id", ctypes.c_uint ),
	( "typeselect_flush_timeout", ctypes.c_uint ),
])

__freeze_rpythonic_struct( NautilusMergedDirectoryDetails, [
])

__freeze_rpythonic_struct( NautilusMergedDirectory, [
	( "parent_slot", NautilusDirectory ),
	( "details", ctypes.POINTER(NautilusMergedDirectoryDetails) ),
])

__freeze_rpythonic_struct( NautilusMergedDirectoryClass, [
	( "parent_slot", NautilusDirectoryClass ),
	( "add_real_directory", ctypes.c_void_p ),
	( "remove_real_directory", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _NautilusMimeApplicationChooserDetails, [
])

__freeze_rpythonic_struct( _NautilusMimeApplicationChooser, [
	( "parent", _GtkBox ),
	( "details", ctypes.POINTER(_NautilusMimeApplicationChooserDetails) ),
])

__freeze_rpythonic_struct( _NautilusMimeApplicationChooserClass, [
	( "parent_class", _GtkBoxClass ),
])

__freeze_rpythonic_struct( _NautilusProgressInfo, [
])

__freeze_rpythonic_struct( _NautilusProgressInfoClass, [
])

__freeze_rpythonic_struct( _NautilusProgressInfoManagerPriv, [
])

__freeze_rpythonic_struct( _NautilusProgressInfoManager, [
	( "parent", _GObject ),
	( "priv", ctypes.POINTER(_NautilusProgressInfoManagerPriv) ),
])

__freeze_rpythonic_struct( _NautilusProgressInfoManagerClass, [
	( "parent_class", _GObjectClass ),
])

__freeze_rpythonic_struct( NautilusVFSFileDetails, [
])

__freeze_rpythonic_struct( NautilusVFSFile, [
	( "parent_slot", NautilusFile ),
])

__freeze_rpythonic_struct( NautilusVFSFileClass, [
	( "parent_slot", NautilusFileClass ),
])

__freeze_rpythonic_struct( NautilusSavedSearchFileDetails, [
])

__freeze_rpythonic_struct( NautilusSavedSearchFile, [
	( "parent_slot", NautilusFile ),
])

__freeze_rpythonic_struct( NautilusSavedSearchFileClass, [
	( "parent_slot", NautilusFileClass ),
])

__freeze_rpythonic_struct( NautilusSearchDirectoryFileDetails, [
])

__freeze_rpythonic_struct( NautilusSearchDirectoryFile, [
	( "parent_slot", NautilusFile ),
	( "details", ctypes.POINTER(NautilusSearchDirectoryFileDetails) ),
])

__freeze_rpythonic_struct( NautilusSearchDirectoryFileClass, [
	( "parent_slot", NautilusFileClass ),
])

__freeze_rpythonic_struct( NautilusSearchEngineDetails, [
])

__freeze_rpythonic_struct( NautilusSearchEngine, [
	( "parent", _GObject ),
	( "details", ctypes.POINTER(NautilusSearchEngineDetails) ),
])

__freeze_rpythonic_struct( NautilusSearchEngineClass, [
	( "parent_class", _GObjectClass ),
	( "set_query", ctypes.c_void_p ),
	( "start", ctypes.c_void_p ),
	( "stop", ctypes.c_void_p ),
	( "hits_added", ctypes.c_void_p ),
	( "hits_subtracted", ctypes.c_void_p ),
	( "finished", ctypes.c_void_p ),
	( "error", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( NautilusSearchEngineSimpleDetails, [
])

__freeze_rpythonic_struct( NautilusSearchEngineSimple, [
	( "parent", NautilusSearchEngine ),
	( "details", ctypes.POINTER(NautilusSearchEngineSimpleDetails) ),
])

__freeze_rpythonic_struct( NautilusSearchEngineSimpleClass, [
	( "parent_class", NautilusSearchEngineClass ),
])

__freeze_rpythonic_struct( NautilusSearchEngineTrackerDetails, [
])

__freeze_rpythonic_struct( NautilusSearchEngineTracker, [
	( "parent", NautilusSearchEngine ),
	( "details", ctypes.POINTER(NautilusSearchEngineTrackerDetails) ),
])

__freeze_rpythonic_struct( NautilusSearchEngineTrackerClass, [
	( "parent_class", NautilusSearchEngineClass ),
])

__freeze_rpythonic_struct( _NautilusSelectionCanvasItemDetails, [
])

__freeze_rpythonic_struct( _NautilusSelectionCanvasItem, [
	( "item", _EelCanvasItem ),
	( "priv", ctypes.POINTER(_NautilusSelectionCanvasItemDetails) ),
	( "user_data", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _NautilusSelectionCanvasItemClass, [
	( "parent_class", _EelCanvasItemClass ),
])

__freeze_rpythonic_struct( NautilusTrashMonitorDetails, [
])

__freeze_rpythonic_struct( NautilusTrashMonitor, [
	( "C_object", _GObject ),
	( "details", ctypes.POINTER(NautilusTrashMonitorDetails) ),
])

__freeze_rpythonic_struct( NautilusTrashMonitorClass, [
	( "parent_class", _GObjectClass ),
	( "trash_state_changed", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _NautilusTreeViewDragDestDetails, [
])

__freeze_rpythonic_struct( _NautilusTreeViewDragDest, [
	( "parent", _GObject ),
	( "details", ctypes.POINTER(_NautilusTreeViewDragDestDetails) ),
])

__freeze_rpythonic_struct( _NautilusTreeViewDragDestClass, [
	( "parent", _GObjectClass ),
	( "get_root_uri", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_file_for_path", ctypes.POINTER(ctypes.c_void_p) ),
	( "move_copy_items", ctypes.c_void_p ),
	( "handle_netscape_url", ctypes.c_void_p ),
	( "handle_uri_list", ctypes.c_void_p ),
	( "handle_text", ctypes.c_void_p ),
	( "handle_raw", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( NautilusVFSDirectoryDetails, [
])

__freeze_rpythonic_struct( NautilusVFSDirectory, [
	( "parent_slot", NautilusDirectory ),
])

__freeze_rpythonic_struct( NautilusVFSDirectoryClass, [
	( "parent_slot", NautilusDirectoryClass ),
])

__freeze_rpythonic_struct( _NautilusSpatialWindow, [
])

__freeze_rpythonic_struct( _NautilusApplicationPriv, [
])

__freeze_rpythonic_struct( NautilusApplication, [
	( "parent", _GtkApplication ),
	( "priv", ctypes.POINTER(_NautilusApplicationPriv) ),
])

__freeze_rpythonic_struct( NautilusApplicationClass, [
	( "parent_class", _GtkApplicationClass ),
])

__freeze_rpythonic_struct( NautilusBookmarkList, [
	( "C_object", _GObject ),
	( "C_list", ctypes.POINTER(_GList) ),
	( "monitor", ctypes.POINTER(_GFileMonitor) ),
	( "pending_ops", ctypes.POINTER(_GQueue) ),
])

__freeze_rpythonic_struct( NautilusBookmarkListClass, [
	( "parent_class", _GObjectClass ),
	( "changed", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _NautilusConnectServerDialogDetails, [
])

__freeze_rpythonic_struct( _NautilusConnectServerDialog, [
	( "parent", _GtkDialog ),
	( "details", ctypes.POINTER(_NautilusConnectServerDialogDetails) ),
])

__freeze_rpythonic_struct( _NautilusConnectServerDialogClass, [
	( "parent_class", _GtkDialogClass ),
])

__freeze_rpythonic_struct( _NautilusConnectServerOperationDetails, [
])

__freeze_rpythonic_struct( NautilusConnectServerOperation, [
	( "parent", _GtkMountOperation ),
	( "details", ctypes.POINTER(_NautilusConnectServerOperationDetails) ),
])

__freeze_rpythonic_struct( NautilusConnectServerOperationClass, [
	( "parent_class", _GtkMountOperationClass ),
])

__freeze_rpythonic_struct( NautilusIconViewDetails, [
])

__freeze_rpythonic_struct( NautilusIconView, [
	( "parent", NautilusView ),
	( "details", ctypes.POINTER(NautilusIconViewDetails) ),
])

__freeze_rpythonic_struct( NautilusIconViewClass, [
	( "parent_class", NautilusViewClass ),
])

__freeze_rpythonic_struct( NautilusDesktopIconViewDetails, [
])

__freeze_rpythonic_struct( NautilusDesktopIconView, [
	( "parent", NautilusIconView ),
	( "details", ctypes.POINTER(NautilusDesktopIconViewDetails) ),
])

__freeze_rpythonic_struct( NautilusDesktopIconViewClass, [
	( "parent_class", NautilusIconViewClass ),
])

__freeze_rpythonic_struct( NautilusDesktopWindowDetails, [
])

__freeze_rpythonic_struct( NautilusDesktopWindow, [
	( "parent_spot", NautilusWindow ),
	( "details", ctypes.POINTER(NautilusDesktopWindowDetails) ),
])

__freeze_rpythonic_struct( NautilusDesktopWindowClass, [
	( "parent_spot", NautilusWindowClass ),
])

__freeze_rpythonic_struct( NautilusEmptyViewDetails, [
])

__freeze_rpythonic_struct( NautilusEmptyView, [
	( "parent_instance", NautilusView ),
	( "details", ctypes.POINTER(NautilusEmptyViewDetails) ),
])

__freeze_rpythonic_struct( NautilusEmptyViewClass, [
	( "parent_class", NautilusViewClass ),
])

__freeze_rpythonic_struct( _NautilusFloatingBarDetails, [
])

__freeze_rpythonic_struct( _NautilusFloatingBar, [
	( "parent", _GtkBox ),
	( "priv", ctypes.POINTER(_NautilusFloatingBarDetails) ),
])

__freeze_rpythonic_struct( _NautilusFloatingBarClass, [
	( "parent_class", _GtkBoxClass ),
])

__freeze_rpythonic_struct( NautilusIconViewContainerDetails, [
])

__freeze_rpythonic_struct( NautilusIconViewContainer, [
	( "parent", NautilusIconContainer ),
	( "view", ctypes.POINTER(NautilusIconView) ),
	( "sort_for_desktop", ctypes.c_int ),
])

__freeze_rpythonic_struct( NautilusIconViewContainerClass, [
	( "parent_class", NautilusIconContainerClass ),
])

__freeze_rpythonic_struct( NautilusImagePropertiesPageDetails, [
])

__freeze_rpythonic_struct( NautilusImagePropertiesPage, [
	( "parent", _GtkBox ),
	( "details", ctypes.POINTER(NautilusImagePropertiesPageDetails) ),
])

__freeze_rpythonic_struct( NautilusImagePropertiesPageClass, [
	( "parent", _GtkBoxClass ),
])

__freeze_rpythonic_struct( NautilusListModelDetails, [
])

__freeze_rpythonic_struct( NautilusListModel, [
	( "parent_instance", _GObject ),
	( "details", ctypes.POINTER(NautilusListModelDetails) ),
])

__freeze_rpythonic_struct( NautilusListModelClass, [
	( "parent_class", _GObjectClass ),
	( "subdirectory_unloaded", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( NautilusListViewDetails, [
])

__freeze_rpythonic_struct( NautilusListView, [
	( "parent_instance", NautilusView ),
	( "details", ctypes.POINTER(NautilusListViewDetails) ),
])

__freeze_rpythonic_struct( NautilusListViewClass, [
	( "parent_class", NautilusViewClass ),
])

__freeze_rpythonic_struct( NautilusLocationBarDetails, [
])

__freeze_rpythonic_struct( NautilusLocationBar, [
	( "parent", _GtkBox ),
	( "details", ctypes.POINTER(NautilusLocationBarDetails) ),
])

__freeze_rpythonic_struct( NautilusLocationBarClass, [
	( "parent_class", _GtkBoxClass ),
	( "cancel", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( NautilusLocationEntryDetails, [
])

__freeze_rpythonic_struct( NautilusLocationEntry, [
	( "parent", NautilusEntry ),
	( "details", ctypes.POINTER(NautilusLocationEntryDetails) ),
])

__freeze_rpythonic_struct( NautilusLocationEntryClass, [
	( "parent_class", NautilusEntryClass ),
])

__freeze_rpythonic_struct( NautilusNavigationActionPrivate, [
])

__freeze_rpythonic_struct( _NautilusNavigationAction, [
	( "parent", _GtkAction ),
	( "priv", ctypes.POINTER(NautilusNavigationActionPrivate) ),
])

__freeze_rpythonic_struct( _NautilusNavigationActionClass, [
	( "parent_class", _GtkActionClass ),
])

__freeze_rpythonic_struct( _NautilusNotebookPrivate, [
])

__freeze_rpythonic_struct( _NautilusNotebook, [
	( "parent", _GtkNotebook ),
	( "priv", ctypes.POINTER(_NautilusNotebookPrivate) ),
])

__freeze_rpythonic_struct( _NautilusNotebookClass, [
	( "parent_class", _GtkNotebookClass ),
	( "tab_close_request", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _NautilusPathBarDetails, [
])

__freeze_rpythonic_struct( _NautilusPathBar, [
	( "parent", _GtkContainer ),
	( "priv", ctypes.POINTER(_NautilusPathBarDetails) ),
])

__freeze_rpythonic_struct( _NautilusPathBarClass, [
	( "parent_class", _GtkContainerClass ),
	( "path_clicked", ctypes.c_void_p ),
	( "path_event", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _NautilusPreviewerPriv, [
])

__freeze_rpythonic_struct( NautilusPreviewer, [
	( "parent", _GObject ),
	( "priv", ctypes.POINTER(_NautilusPreviewerPriv) ),
])

__freeze_rpythonic_struct( NautilusPreviewerClass, [
	( "parent_class", _GObjectClass ),
])

__freeze_rpythonic_struct( _NautilusProgressInfoWidgetPriv, [
])

__freeze_rpythonic_struct( NautilusProgressInfoWidget, [
	( "parent", _GtkBox ),
	( "priv", ctypes.POINTER(_NautilusProgressInfoWidgetPriv) ),
])

__freeze_rpythonic_struct( NautilusProgressInfoWidgetClass, [
	( "parent_class", _GtkBoxClass ),
])

__freeze_rpythonic_struct( _NautilusProgressUIHandlerPriv, [
])

__freeze_rpythonic_struct( NautilusProgressUIHandler, [
	( "parent", _GObject ),
	( "priv", ctypes.POINTER(_NautilusProgressUIHandlerPriv) ),
])

__freeze_rpythonic_struct( NautilusProgressUIHandlerClass, [
	( "parent_class", _GObjectClass ),
])

__freeze_rpythonic_struct( NautilusPropertiesWindowDetails, [
])

__freeze_rpythonic_struct( NautilusPropertiesWindow, [
	( "window", _GtkDialog ),
	( "details", ctypes.POINTER(NautilusPropertiesWindowDetails) ),
])

__freeze_rpythonic_struct( NautilusPropertiesWindowClass, [
	( "parent_class", _GtkDialogClass ),
	( "close", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _NautilusToolbarPriv, [
])

__freeze_rpythonic_struct( _NautilusToolbar, [
	( "parent", _GtkBox ),
	( "priv", ctypes.POINTER(_NautilusToolbarPriv) ),
])

__freeze_rpythonic_struct( _NautilusToolbarClass, [
	( "parent_class", _GtkBoxClass ),
])

__freeze_rpythonic_struct( NautilusTrashBarPrivate, [
])

__freeze_rpythonic_struct( NautilusTrashBar, [
	( "parent", _GtkInfoBar ),
	( "priv", ctypes.POINTER(NautilusTrashBarPrivate) ),
])

__freeze_rpythonic_struct( NautilusTrashBarClass, [
	( "parent_class", _GtkInfoBarClass ),
])

__freeze_rpythonic_struct( _NautilusViewInfo, [
	( "C_id", ctypes.POINTER(ctypes.c_char) ),
	( "view_combo_label", ctypes.POINTER(ctypes.c_char) ),
	( "view_menu_label_with_mnemonic", ctypes.POINTER(ctypes.c_char) ),
	( "error_label", ctypes.POINTER(ctypes.c_char) ),
	( "startup_error_label", ctypes.POINTER(ctypes.c_char) ),
	( "display_location_label", ctypes.POINTER(ctypes.c_char) ),
	( "create", ctypes.POINTER(ctypes.c_void_p) ),
	( "supports_uri", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( NautilusWindowDetails, [
	( "menubar", ctypes.POINTER(_GtkWidget) ),
	( "ui_manager", ctypes.POINTER(_GtkUIManager) ),
	( "main_action_group", ctypes.POINTER(_GtkActionGroup) ),
	( "extensions_menu_merge_id", ctypes.c_uint ),
	( "extensions_menu_action_group", ctypes.POINTER(_GtkActionGroup) ),
	( "bookmarks_action_group", ctypes.POINTER(_GtkActionGroup) ),
	( "bookmarks_merge_id", ctypes.c_uint ),
	( "bookmark_list", ctypes.POINTER(NautilusBookmarkList) ),
	( "show_hidden_files_mode", ctypes.c_int ),
	( "short_list_viewers", ctypes.POINTER(_GList) ),
	( "view_as_action_group", ctypes.POINTER(_GtkActionGroup) ),
	( "view_as_radio_action", ctypes.POINTER(_GtkRadioAction) ),
	( "short_list_merge_id", ctypes.c_uint ),
	( "temporarily_ignore_view_signals", ctypes.c_int ),
	( "notebook", ctypes.POINTER(_GtkWidget) ),
	( "slots", ctypes.POINTER(_GList) ),
	( "active_slot", ctypes.POINTER(NautilusWindowSlot) ),
	( "content_paned", ctypes.POINTER(_GtkWidget) ),
	( "nav_state", ctypes.POINTER(_NautilusNavigationState) ),
	( "side_pane_width", ctypes.c_int ),
	( "sidebar", ctypes.POINTER(_GtkWidget) ),
	( "main_view", ctypes.POINTER(_GtkWidget) ),
	( "toolbar", ctypes.POINTER(_GtkWidget) ),
	( "toolbar_action_group", ctypes.POINTER(_GtkActionGroup) ),
	( "temporary_navigation_bar", ctypes.c_int ),
	( "temporary_search_bar", ctypes.c_int ),
	( "last_focus_widget", ctypes.POINTER(_GtkWidget) ),
	( "disable_chrome", ctypes.c_int ),
	( "sidebar_width_handler_id", ctypes.c_uint ),
	( "app_menu_visibility_id", ctypes.c_uint ),
])

__freeze_rpythonic_struct( NautilusXContentBarPrivate, [
])

__freeze_rpythonic_struct( NautilusXContentBar, [
	( "parent", _GtkInfoBar ),
	( "priv", ctypes.POINTER(NautilusXContentBarPrivate) ),
])

__freeze_rpythonic_struct( NautilusXContentBarClass, [
	( "parent_class", _GtkInfoBarClass ),
])

## wrapper functions ##
clock = _rpythonic_function_(		"clock", ctypes.c_int64, [] )

time = _rpythonic_function_(		"time", ctypes.c_int64, [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),] )

difftime = _rpythonic_function_(		"difftime", ctypes.c_double, [
	("__time1",		ctypes.c_int64),
	("__time0",		ctypes.c_int64),] )

mktime = _rpythonic_function_(		"mktime", ctypes.c_int64, [
	("__tp",		ctypes.POINTER(tm)),] )

strftime = _rpythonic_function_(		"strftime", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__maxsize",		ctypes.c_uint),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__tp",		ctypes.POINTER(tm)),] )

strftime_l = _rpythonic_function_(		"strftime_l", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__maxsize",		ctypes.c_uint),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__tp",		ctypes.POINTER(tm)),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

gmtime = _rpythonic_function_(		"gmtime", ctypes.POINTER(tm), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),] )

localtime = _rpythonic_function_(		"localtime", ctypes.POINTER(tm), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),] )

localtime_r = _rpythonic_function_(		"localtime_r", ctypes.POINTER(tm), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),
	("__tp",		ctypes.POINTER(tm)),] )

gmtime_r = _rpythonic_function_(		"gmtime_r", ctypes.POINTER(tm), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),
	("__tp",		ctypes.POINTER(tm)),] )

asctime = _rpythonic_function_(		"asctime", ctypes.POINTER(ctypes.c_char), [
	("__tp",		ctypes.POINTER(tm)),] )

asctime_r = _rpythonic_function_(		"asctime_r", ctypes.POINTER(ctypes.c_char), [
	("__tp",		ctypes.POINTER(tm)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

ctime = _rpythonic_function_(		"ctime", ctypes.POINTER(ctypes.c_char), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),] )

ctime_r = _rpythonic_function_(		"ctime_r", ctypes.POINTER(ctypes.c_char), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

tzset = _rpythonic_function_(		"tzset", ctypes.c_void_p, [] )

stime = _rpythonic_function_(		"stime", ctypes.c_int, [
	("__when",		ctypes.POINTER(ctypes.c_int64)),] )

timegm = _rpythonic_function_(		"timegm", ctypes.c_int64, [
	("__tp",		ctypes.POINTER(tm)),] )

dysize = _rpythonic_function_(		"dysize", ctypes.c_int, [
	("__year",		ctypes.c_int),] )

timelocal = _rpythonic_function_(		"timelocal", ctypes.c_int64, [
	("__tp",		ctypes.POINTER(tm)),] )

nanosleep = _rpythonic_function_(		"nanosleep", ctypes.c_int, [
	("__requested_time",		ctypes.POINTER(timespec)),
	("__remaining",		ctypes.POINTER(timespec)),] )

clock_getres = _rpythonic_function_(		"clock_getres", ctypes.c_int, [
	("__clock_id",		ctypes.c_int),
	("__res",		ctypes.POINTER(timespec)),] )

clock_gettime = _rpythonic_function_(		"clock_gettime", ctypes.c_int, [
	("__clock_id",		ctypes.c_int),
	("__tp",		ctypes.POINTER(timespec)),] )

clock_settime = _rpythonic_function_(		"clock_settime", ctypes.c_int, [
	("__clock_id",		ctypes.c_int),
	("__tp",		ctypes.POINTER(timespec)),] )

clock_nanosleep = _rpythonic_function_(		"clock_nanosleep", ctypes.c_int, [
	("__clock_id",		ctypes.c_int),
	("__flags",		ctypes.c_int),
	("__req",		ctypes.POINTER(timespec)),
	("__rem",		ctypes.POINTER(timespec)),] )

clock_getcpuclockid = _rpythonic_function_(		"clock_getcpuclockid", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__clock_id",		ctypes.POINTER(ctypes.c_int)),] )

timer_create = _rpythonic_function_(		"timer_create", ctypes.c_int, [
	("__clock_id",		ctypes.c_int),
	("__evp",		ctypes.POINTER(sigevent)),
	("__timerid",		ctypes.POINTER(ctypes.c_void_p)),] )

timer_delete = _rpythonic_function_(		"timer_delete", ctypes.c_int, [("__timerid",		ctypes.c_void_p)] )

timer_settime = _rpythonic_function_(		"timer_settime", ctypes.c_int, [
	("__timerid",		ctypes.c_void_p),
	("__flags",		ctypes.c_int),
	("__value",		ctypes.POINTER(itimerspec)),
	("__ovalue",		ctypes.POINTER(itimerspec)),] )

timer_gettime = _rpythonic_function_(		"timer_gettime", ctypes.c_int, [
	("__timerid",		ctypes.c_void_p),
	("__value",		ctypes.POINTER(itimerspec)),] )

timer_getoverrun = _rpythonic_function_(		"timer_getoverrun", ctypes.c_int, [("__timerid",		ctypes.c_void_p)] )

GCompareFunc = _rpythonic_function_(		"GCompareFunc", ctypes.c_int, [
	("a",		ctypes.POINTER(ctypes.c_void_p)),
	("b",		ctypes.POINTER(ctypes.c_void_p)),] )

GCompareDataFunc = _rpythonic_function_(		"GCompareDataFunc", ctypes.c_int, [
	("a",		ctypes.POINTER(ctypes.c_void_p)),
	("b",		ctypes.POINTER(ctypes.c_void_p)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GEqualFunc = _rpythonic_function_(		"GEqualFunc", ctypes.c_int, [
	("a",		ctypes.POINTER(ctypes.c_void_p)),
	("b",		ctypes.POINTER(ctypes.c_void_p)),] )

GDestroyNotify = _rpythonic_function_(		"GDestroyNotify", ctypes.c_void_p, [("data",		ctypes.c_void_p)] )

GFunc = _rpythonic_function_(		"GFunc", ctypes.c_void_p, [
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GHashFunc = _rpythonic_function_(		"GHashFunc", ctypes.c_uint, [("key",		ctypes.c_void_p)] )

GHFunc = _rpythonic_function_(		"GHFunc", ctypes.c_void_p, [
	("key",		ctypes.POINTER(ctypes.c_void_p)),
	("value",		ctypes.POINTER(ctypes.c_void_p)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GFreeFunc = _rpythonic_function_(		"GFreeFunc", ctypes.c_void_p, [("data",		ctypes.c_void_p)] )

GTranslateFunc = _rpythonic_function_(		"GTranslateFunc", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_array_new = _rpythonic_function_(		"g_array_new", ctypes.POINTER(_GArray), [
	("zero_terminated",		ctypes.c_int),
	("clear_",		ctypes.c_int),
	("element_size",		ctypes.c_uint),] )

g_array_sized_new = _rpythonic_function_(		"g_array_sized_new", ctypes.POINTER(_GArray), [
	("zero_terminated",		ctypes.c_int),
	("clear_",		ctypes.c_int),
	("element_size",		ctypes.c_uint),
	("reserved_size",		ctypes.c_uint),] )

g_array_free = _rpythonic_function_(		"g_array_free", ctypes.POINTER(ctypes.c_char), [
	("array",		ctypes.POINTER(_GArray)),
	("free_segment",		ctypes.c_int),] )

g_array_ref = _rpythonic_function_(		"g_array_ref", ctypes.POINTER(_GArray), [
	("array",		ctypes.POINTER(_GArray)),] )

g_array_unref = _rpythonic_function_(		"g_array_unref", ctypes.c_void_p, [
	("array",		ctypes.POINTER(_GArray)),] )

g_array_get_element_size = _rpythonic_function_(		"g_array_get_element_size", ctypes.c_uint, [
	("array",		ctypes.POINTER(_GArray)),] )

g_array_append_vals = _rpythonic_function_(		"g_array_append_vals", ctypes.POINTER(_GArray), [
	("array",		ctypes.POINTER(_GArray)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("C_len",		ctypes.c_uint),] )

g_array_prepend_vals = _rpythonic_function_(		"g_array_prepend_vals", ctypes.POINTER(_GArray), [
	("array",		ctypes.POINTER(_GArray)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("C_len",		ctypes.c_uint),] )

g_array_insert_vals = _rpythonic_function_(		"g_array_insert_vals", ctypes.POINTER(_GArray), [
	("array",		ctypes.POINTER(_GArray)),
	("index_",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("C_len",		ctypes.c_uint),] )

g_array_set_size = _rpythonic_function_(		"g_array_set_size", ctypes.POINTER(_GArray), [
	("array",		ctypes.POINTER(_GArray)),
	("length",		ctypes.c_uint),] )

g_array_remove_index = _rpythonic_function_(		"g_array_remove_index", ctypes.POINTER(_GArray), [
	("array",		ctypes.POINTER(_GArray)),
	("index_",		ctypes.c_uint),] )

g_array_remove_index_fast = _rpythonic_function_(		"g_array_remove_index_fast", ctypes.POINTER(_GArray), [
	("array",		ctypes.POINTER(_GArray)),
	("index_",		ctypes.c_uint),] )

g_array_remove_range = _rpythonic_function_(		"g_array_remove_range", ctypes.POINTER(_GArray), [
	("array",		ctypes.POINTER(_GArray)),
	("index_",		ctypes.c_uint),
	("length",		ctypes.c_uint),] )

g_array_sort = _rpythonic_function_(		"g_array_sort", ctypes.c_void_p, [
	("array",		ctypes.POINTER(_GArray)),
	("compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_array_sort_with_data = _rpythonic_function_(		"g_array_sort_with_data", ctypes.c_void_p, [
	("array",		ctypes.POINTER(_GArray)),
	("compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_ptr_array_new = _rpythonic_function_(		"g_ptr_array_new", ctypes.POINTER(_GPtrArray), [] )

g_ptr_array_new_with_free_func = _rpythonic_function_(		"g_ptr_array_new_with_free_func", ctypes.POINTER(_GPtrArray), [
	("element_free_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_ptr_array_sized_new = _rpythonic_function_(		"g_ptr_array_sized_new", ctypes.POINTER(_GPtrArray), [
	("reserved_size",		ctypes.c_uint),] )

g_ptr_array_new_full = _rpythonic_function_(		"g_ptr_array_new_full", ctypes.POINTER(_GPtrArray), [
	("reserved_size",		ctypes.c_uint),
	("element_free_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_ptr_array_free = _rpythonic_function_(		"g_ptr_array_free", ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)), [
	("array",		ctypes.POINTER(_GPtrArray)),
	("free_seg",		ctypes.c_int),] )

g_ptr_array_ref = _rpythonic_function_(		"g_ptr_array_ref", ctypes.POINTER(_GPtrArray), [
	("array",		ctypes.POINTER(_GPtrArray)),] )

g_ptr_array_unref = _rpythonic_function_(		"g_ptr_array_unref", ctypes.c_void_p, [
	("array",		ctypes.POINTER(_GPtrArray)),] )

g_ptr_array_set_free_func = _rpythonic_function_(		"g_ptr_array_set_free_func", ctypes.c_void_p, [
	("array",		ctypes.POINTER(_GPtrArray)),
	("element_free_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_ptr_array_set_size = _rpythonic_function_(		"g_ptr_array_set_size", ctypes.c_void_p, [
	("array",		ctypes.POINTER(_GPtrArray)),
	("length",		ctypes.c_int),] )

g_ptr_array_remove_index = _rpythonic_function_(		"g_ptr_array_remove_index", ctypes.POINTER(ctypes.c_void_p), [
	("array",		ctypes.POINTER(_GPtrArray)),
	("index_",		ctypes.c_uint),] )

g_ptr_array_remove_index_fast = _rpythonic_function_(		"g_ptr_array_remove_index_fast", ctypes.POINTER(ctypes.c_void_p), [
	("array",		ctypes.POINTER(_GPtrArray)),
	("index_",		ctypes.c_uint),] )

g_ptr_array_remove = _rpythonic_function_(		"g_ptr_array_remove", ctypes.c_int, [
	("array",		ctypes.POINTER(_GPtrArray)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_ptr_array_remove_fast = _rpythonic_function_(		"g_ptr_array_remove_fast", ctypes.c_int, [
	("array",		ctypes.POINTER(_GPtrArray)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_ptr_array_remove_range = _rpythonic_function_(		"g_ptr_array_remove_range", ctypes.c_void_p, [
	("array",		ctypes.POINTER(_GPtrArray)),
	("index_",		ctypes.c_uint),
	("length",		ctypes.c_uint),] )

g_ptr_array_add = _rpythonic_function_(		"g_ptr_array_add", ctypes.c_void_p, [
	("array",		ctypes.POINTER(_GPtrArray)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_ptr_array_sort = _rpythonic_function_(		"g_ptr_array_sort", ctypes.c_void_p, [
	("array",		ctypes.POINTER(_GPtrArray)),
	("compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_ptr_array_sort_with_data = _rpythonic_function_(		"g_ptr_array_sort_with_data", ctypes.c_void_p, [
	("array",		ctypes.POINTER(_GPtrArray)),
	("compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_ptr_array_foreach = _rpythonic_function_(		"g_ptr_array_foreach", ctypes.c_void_p, [
	("array",		ctypes.POINTER(_GPtrArray)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_byte_array_new = _rpythonic_function_(		"g_byte_array_new", ctypes.POINTER(_GByteArray), [] )

g_byte_array_sized_new = _rpythonic_function_(		"g_byte_array_sized_new", ctypes.POINTER(_GByteArray), [
	("reserved_size",		ctypes.c_uint),] )

g_byte_array_free = _rpythonic_function_(		"g_byte_array_free", ctypes.POINTER(ctypes.c_ubyte), [
	("array",		ctypes.POINTER(_GByteArray)),
	("free_segment",		ctypes.c_int),] )

g_byte_array_ref = _rpythonic_function_(		"g_byte_array_ref", ctypes.POINTER(_GByteArray), [
	("array",		ctypes.POINTER(_GByteArray)),] )

g_byte_array_unref = _rpythonic_function_(		"g_byte_array_unref", ctypes.c_void_p, [
	("array",		ctypes.POINTER(_GByteArray)),] )

g_byte_array_append = _rpythonic_function_(		"g_byte_array_append", ctypes.POINTER(_GByteArray), [
	("array",		ctypes.POINTER(_GByteArray)),
	("data",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_uint),] )

g_byte_array_prepend = _rpythonic_function_(		"g_byte_array_prepend", ctypes.POINTER(_GByteArray), [
	("array",		ctypes.POINTER(_GByteArray)),
	("data",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_uint),] )

g_byte_array_set_size = _rpythonic_function_(		"g_byte_array_set_size", ctypes.POINTER(_GByteArray), [
	("array",		ctypes.POINTER(_GByteArray)),
	("length",		ctypes.c_uint),] )

g_byte_array_remove_index = _rpythonic_function_(		"g_byte_array_remove_index", ctypes.POINTER(_GByteArray), [
	("array",		ctypes.POINTER(_GByteArray)),
	("index_",		ctypes.c_uint),] )

g_byte_array_remove_index_fast = _rpythonic_function_(		"g_byte_array_remove_index_fast", ctypes.POINTER(_GByteArray), [
	("array",		ctypes.POINTER(_GByteArray)),
	("index_",		ctypes.c_uint),] )

g_byte_array_remove_range = _rpythonic_function_(		"g_byte_array_remove_range", ctypes.POINTER(_GByteArray), [
	("array",		ctypes.POINTER(_GByteArray)),
	("index_",		ctypes.c_uint),
	("length",		ctypes.c_uint),] )

g_byte_array_sort = _rpythonic_function_(		"g_byte_array_sort", ctypes.c_void_p, [
	("array",		ctypes.POINTER(_GByteArray)),
	("compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_byte_array_sort_with_data = _rpythonic_function_(		"g_byte_array_sort_with_data", ctypes.c_void_p, [
	("array",		ctypes.POINTER(_GByteArray)),
	("compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_quark_try_string = _rpythonic_function_(		"g_quark_try_string", ctypes.c_uint, [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_quark_from_static_string = _rpythonic_function_(		"g_quark_from_static_string", ctypes.c_uint, [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_quark_from_string = _rpythonic_function_(		"g_quark_from_string", ctypes.c_uint, [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_quark_to_string = _rpythonic_function_(		"g_quark_to_string", ctypes.POINTER(ctypes.c_char), [
	("quark",		ctypes.c_uint),] )

g_intern_string = _rpythonic_function_(		"g_intern_string", ctypes.POINTER(ctypes.c_char), [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_intern_static_string = _rpythonic_function_(		"g_intern_static_string", ctypes.POINTER(ctypes.c_char), [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_error_new_literal = _rpythonic_function_(		"g_error_new_literal", ctypes.POINTER(_GError), [
	("domain",		ctypes.c_uint),
	("code",		ctypes.c_int),
	("message",		ctypes.POINTER(ctypes.c_char)),] )

g_error_new_valist = _rpythonic_function_(		"g_error_new_valist", ctypes.POINTER(_GError), [
	("domain",		ctypes.c_uint),
	("code",		ctypes.c_int),
	("format",		ctypes.POINTER(ctypes.c_char)),
	("args",		ctypes.c_char),] )

g_error_free = _rpythonic_function_(		"g_error_free", ctypes.c_void_p, [
	("error",		ctypes.POINTER(_GError)),] )

g_error_copy = _rpythonic_function_(		"g_error_copy", ctypes.POINTER(_GError), [
	("error",		ctypes.POINTER(_GError)),] )

g_error_matches = _rpythonic_function_(		"g_error_matches", ctypes.c_int, [
	("error",		ctypes.POINTER(_GError)),
	("domain",		ctypes.c_uint),
	("code",		ctypes.c_int),] )

g_set_error_literal = _rpythonic_function_(		"g_set_error_literal", ctypes.c_void_p, [
	("err",		ctypes.POINTER(ctypes.POINTER(_GError))),
	("domain",		ctypes.c_uint),
	("code",		ctypes.c_int),
	("message",		ctypes.POINTER(ctypes.c_char)),] )

g_propagate_error = _rpythonic_function_(		"g_propagate_error", ctypes.c_void_p, [
	("dest",		ctypes.POINTER(ctypes.POINTER(_GError))),
	("src",		ctypes.POINTER(_GError)),] )

g_clear_error = _rpythonic_function_(		"g_clear_error", ctypes.c_void_p, [
	("err",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_get_user_name = _rpythonic_function_(		"g_get_user_name", ctypes.POINTER(ctypes.c_char), [] )

g_get_real_name = _rpythonic_function_(		"g_get_real_name", ctypes.POINTER(ctypes.c_char), [] )

g_get_home_dir = _rpythonic_function_(		"g_get_home_dir", ctypes.POINTER(ctypes.c_char), [] )

g_get_tmp_dir = _rpythonic_function_(		"g_get_tmp_dir", ctypes.POINTER(ctypes.c_char), [] )

g_get_host_name = _rpythonic_function_(		"g_get_host_name", ctypes.POINTER(ctypes.c_char), [] )

g_get_prgname = _rpythonic_function_(		"g_get_prgname", ctypes.POINTER(ctypes.c_char), [] )

g_set_prgname = _rpythonic_function_(		"g_set_prgname", ctypes.c_void_p, [
	("prgname",		ctypes.POINTER(ctypes.c_char)),] )

g_get_application_name = _rpythonic_function_(		"g_get_application_name", ctypes.POINTER(ctypes.c_char), [] )

g_set_application_name = _rpythonic_function_(		"g_set_application_name", ctypes.c_void_p, [
	("application_name",		ctypes.POINTER(ctypes.c_char)),] )

g_reload_user_special_dirs_cache = _rpythonic_function_(		"g_reload_user_special_dirs_cache", ctypes.c_void_p, [] )

g_get_user_data_dir = _rpythonic_function_(		"g_get_user_data_dir", ctypes.POINTER(ctypes.c_char), [] )

g_get_user_config_dir = _rpythonic_function_(		"g_get_user_config_dir", ctypes.POINTER(ctypes.c_char), [] )

g_get_user_cache_dir = _rpythonic_function_(		"g_get_user_cache_dir", ctypes.POINTER(ctypes.c_char), [] )

g_get_system_data_dirs = _rpythonic_function_(		"g_get_system_data_dirs", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [] )

g_get_system_config_dirs = _rpythonic_function_(		"g_get_system_config_dirs", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [] )

g_get_user_runtime_dir = _rpythonic_function_(		"g_get_user_runtime_dir", ctypes.POINTER(ctypes.c_char), [] )

g_get_language_names = _rpythonic_function_(		"g_get_language_names", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [] )

g_get_locale_variants = _rpythonic_function_(		"g_get_locale_variants", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("locale",		ctypes.POINTER(ctypes.c_char)),] )

g_get_user_special_dir = _rpythonic_function_(		"g_get_user_special_dir", ctypes.POINTER(ctypes.c_char), [
	("directory",		ctypes.c_int),] )

g_parse_debug_string = _rpythonic_function_(		"g_parse_debug_string", ctypes.c_uint, [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("keys",		ctypes.POINTER(_GDebugKey)),
	("nkeys",		ctypes.c_uint),] )

g_vsnprintf = _rpythonic_function_(		"g_vsnprintf", ctypes.c_int, [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("n",		ctypes.c_ulong),
	("format",		ctypes.POINTER(ctypes.c_char)),
	("args",		ctypes.c_char),] )

g_path_is_absolute = _rpythonic_function_(		"g_path_is_absolute", ctypes.c_int, [
	("file_name",		ctypes.POINTER(ctypes.c_char)),] )

g_path_skip_root = _rpythonic_function_(		"g_path_skip_root", ctypes.POINTER(ctypes.c_char), [
	("file_name",		ctypes.POINTER(ctypes.c_char)),] )

g_basename = _rpythonic_function_(		"g_basename", ctypes.POINTER(ctypes.c_char), [
	("file_name",		ctypes.POINTER(ctypes.c_char)),] )

g_get_current_dir = _rpythonic_function_(		"g_get_current_dir", ctypes.POINTER(ctypes.c_char), [] )

g_path_get_basename = _rpythonic_function_(		"g_path_get_basename", ctypes.POINTER(ctypes.c_char), [
	("file_name",		ctypes.POINTER(ctypes.c_char)),] )

g_path_get_dirname = _rpythonic_function_(		"g_path_get_dirname", ctypes.POINTER(ctypes.c_char), [
	("file_name",		ctypes.POINTER(ctypes.c_char)),] )

g_nullify_pointer = _rpythonic_function_(		"g_nullify_pointer", ctypes.c_void_p, [("nullify_location",		ctypes.c_void_p)] )

g_getenv = _rpythonic_function_(		"g_getenv", ctypes.POINTER(ctypes.c_char), [
	("variable",		ctypes.POINTER(ctypes.c_char)),] )

g_setenv = _rpythonic_function_(		"g_setenv", ctypes.c_int, [
	("variable",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_char)),
	("overwrite",		ctypes.c_int),] )

g_unsetenv = _rpythonic_function_(		"g_unsetenv", ctypes.c_void_p, [
	("variable",		ctypes.POINTER(ctypes.c_char)),] )

g_listenv = _rpythonic_function_(		"g_listenv", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [] )

g_get_environ = _rpythonic_function_(		"g_get_environ", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [] )

_g_getenv_nomalloc = _rpythonic_function_(		"_g_getenv_nomalloc", ctypes.POINTER(ctypes.c_char), [
	("variable",		ctypes.POINTER(ctypes.c_char)),
	("buffer",		( ctypes.c_char * 1024 )),] )

g_atexit = _rpythonic_function_(		"g_atexit", ctypes.c_void_p, [
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

GVoidFunc = _rpythonic_function_(		"GVoidFunc", ctypes.c_void_p, [] )

g_find_program_in_path = _rpythonic_function_(		"g_find_program_in_path", ctypes.POINTER(ctypes.c_char), [
	("program",		ctypes.POINTER(ctypes.c_char)),] )

g_bit_nth_lsf = _rpythonic_function_(		"g_bit_nth_lsf", ctypes.c_int, [
	("mask",		ctypes.c_ulong),
	("nth_bit",		ctypes.c_int),] )

g_bit_nth_msf = _rpythonic_function_(		"g_bit_nth_msf", ctypes.c_int, [
	("mask",		ctypes.c_ulong),
	("nth_bit",		ctypes.c_int),] )

g_bit_storage = _rpythonic_function_(		"g_bit_storage", ctypes.c_uint, [
	("number",		ctypes.c_ulong),] )

g_trash_stack_push = _rpythonic_function_(		"g_trash_stack_push", ctypes.c_void_p, [
	("stack_p",		ctypes.POINTER(ctypes.POINTER(_GTrashStack))),
	("data_p",		ctypes.POINTER(ctypes.c_void_p)),] )

g_trash_stack_pop = _rpythonic_function_(		"g_trash_stack_pop", ctypes.POINTER(ctypes.c_void_p), [
	("stack_p",		ctypes.POINTER(ctypes.POINTER(_GTrashStack))),] )

g_trash_stack_peek = _rpythonic_function_(		"g_trash_stack_peek", ctypes.POINTER(ctypes.c_void_p), [
	("stack_p",		ctypes.POINTER(ctypes.POINTER(_GTrashStack))),] )

g_trash_stack_height = _rpythonic_function_(		"g_trash_stack_height", ctypes.c_uint, [
	("stack_p",		ctypes.POINTER(ctypes.POINTER(_GTrashStack))),] )

glib_check_version = _rpythonic_function_(		"glib_check_version", ctypes.POINTER(ctypes.c_char), [
	("required_major",		ctypes.c_uint),
	("required_minor",		ctypes.c_uint),
	("required_micro",		ctypes.c_uint),] )

g_atomic_int_get = _rpythonic_function_(		"g_atomic_int_get", ctypes.c_int, [
	("atomic",		ctypes.POINTER(ctypes.c_int)),] )

g_atomic_int_set = _rpythonic_function_(		"g_atomic_int_set", ctypes.c_void_p, [
	("atomic",		ctypes.POINTER(ctypes.c_int)),
	("newval",		ctypes.c_int),] )

g_atomic_int_inc = _rpythonic_function_(		"g_atomic_int_inc", ctypes.c_void_p, [
	("atomic",		ctypes.POINTER(ctypes.c_int)),] )

g_atomic_int_dec_and_test = _rpythonic_function_(		"g_atomic_int_dec_and_test", ctypes.c_int, [
	("atomic",		ctypes.POINTER(ctypes.c_int)),] )

g_atomic_int_compare_and_exchange = _rpythonic_function_(		"g_atomic_int_compare_and_exchange", ctypes.c_int, [
	("atomic",		ctypes.POINTER(ctypes.c_int)),
	("oldval",		ctypes.c_int),
	("newval",		ctypes.c_int),] )

g_atomic_int_add = _rpythonic_function_(		"g_atomic_int_add", ctypes.c_int, [
	("atomic",		ctypes.POINTER(ctypes.c_int)),
	("val",		ctypes.c_int),] )

g_atomic_int_and = _rpythonic_function_(		"g_atomic_int_and", ctypes.c_uint, [
	("atomic",		ctypes.POINTER(ctypes.c_uint)),
	("val",		ctypes.c_uint),] )

g_atomic_int_or = _rpythonic_function_(		"g_atomic_int_or", ctypes.c_uint, [
	("atomic",		ctypes.POINTER(ctypes.c_uint)),
	("val",		ctypes.c_uint),] )

g_atomic_int_xor = _rpythonic_function_(		"g_atomic_int_xor", ctypes.c_uint, [
	("atomic",		ctypes.POINTER(ctypes.c_uint)),
	("val",		ctypes.c_uint),] )

g_atomic_pointer_get = _rpythonic_function_(		"g_atomic_pointer_get", ctypes.POINTER(ctypes.c_void_p), [("atomic",		ctypes.c_void_p)] )

g_atomic_pointer_set = _rpythonic_function_(		"g_atomic_pointer_set", ctypes.c_void_p, [
	("atomic",		ctypes.POINTER(ctypes.c_void_p)),
	("newval",		ctypes.POINTER(ctypes.c_void_p)),] )

g_atomic_pointer_compare_and_exchange = _rpythonic_function_(		"g_atomic_pointer_compare_and_exchange", ctypes.c_int, [
	("atomic",		ctypes.POINTER(ctypes.c_void_p)),
	("oldval",		ctypes.POINTER(ctypes.c_void_p)),
	("newval",		ctypes.POINTER(ctypes.c_void_p)),] )

g_atomic_pointer_add = _rpythonic_function_(		"g_atomic_pointer_add", ctypes.c_int, [
	("atomic",		ctypes.POINTER(ctypes.c_void_p)),
	("val",		ctypes.c_int),] )

g_atomic_pointer_and = _rpythonic_function_(		"g_atomic_pointer_and", ctypes.c_uint, [
	("atomic",		ctypes.POINTER(ctypes.c_void_p)),
	("val",		ctypes.c_uint),] )

g_atomic_pointer_or = _rpythonic_function_(		"g_atomic_pointer_or", ctypes.c_uint, [
	("atomic",		ctypes.POINTER(ctypes.c_void_p)),
	("val",		ctypes.c_uint),] )

g_atomic_pointer_xor = _rpythonic_function_(		"g_atomic_pointer_xor", ctypes.c_uint, [
	("atomic",		ctypes.POINTER(ctypes.c_void_p)),
	("val",		ctypes.c_uint),] )

g_atomic_int_exchange_and_add = _rpythonic_function_(		"g_atomic_int_exchange_and_add", ctypes.c_int, [
	("atomic",		ctypes.POINTER(ctypes.c_int)),
	("val",		ctypes.c_int),] )

g_thread_error_quark = _rpythonic_function_(		"g_thread_error_quark", ctypes.c_uint, [] )

GThreadFunc = _rpythonic_function_(		"GThreadFunc", ctypes.POINTER(ctypes.c_void_p), [("data",		ctypes.c_void_p)] )

mutex_new = _rpythonic_function_(		"mutex_new", ctypes.POINTER(_GMutex), [] )

mutex_lock = _rpythonic_function_(		"mutex_lock", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(_GMutex)),] )

mutex_trylock = _rpythonic_function_(		"mutex_trylock", ctypes.c_int, [
	("mutex",		ctypes.POINTER(_GMutex)),] )

mutex_unlock = _rpythonic_function_(		"mutex_unlock", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(_GMutex)),] )

mutex_free = _rpythonic_function_(		"mutex_free", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(_GMutex)),] )

cond_new = _rpythonic_function_(		"cond_new", ctypes.POINTER(_GCond), [] )

cond_signal = _rpythonic_function_(		"cond_signal", ctypes.c_void_p, [
	("cond",		ctypes.POINTER(_GCond)),] )

cond_broadcast = _rpythonic_function_(		"cond_broadcast", ctypes.c_void_p, [
	("cond",		ctypes.POINTER(_GCond)),] )

cond_wait = _rpythonic_function_(		"cond_wait", ctypes.c_void_p, [
	("cond",		ctypes.POINTER(_GCond)),
	("mutex",		ctypes.POINTER(_GMutex)),] )

cond_timed_wait = _rpythonic_function_(		"cond_timed_wait", ctypes.c_int, [
	("cond",		ctypes.POINTER(_GCond)),
	("mutex",		ctypes.POINTER(_GMutex)),
	("end_time",		ctypes.POINTER(_GTimeVal)),] )

cond_free = _rpythonic_function_(		"cond_free", ctypes.c_void_p, [
	("cond",		ctypes.POINTER(_GCond)),] )

private_new = _rpythonic_function_(		"private_new", ctypes.POINTER(_GPrivate), [
	("destructor",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

private_get = _rpythonic_function_(		"private_get", ctypes.POINTER(ctypes.c_void_p), [
	("private_key",		ctypes.POINTER(_GPrivate)),] )

private_set = _rpythonic_function_(		"private_set", ctypes.c_void_p, [
	("private_key",		ctypes.POINTER(_GPrivate)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

thread_create = _rpythonic_function_(		"thread_create", ctypes.c_void_p, [
	("func",		ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("stack_size",		ctypes.c_ulong),
	("joinable",		ctypes.c_int),
	("bound",		ctypes.c_int),
	("priority",		ctypes.c_int),
	("thread",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

thread_yield = _rpythonic_function_(		"thread_yield", ctypes.c_void_p, [] )

thread_join = _rpythonic_function_(		"thread_join", ctypes.c_void_p, [("thread",		ctypes.c_void_p)] )

thread_exit = _rpythonic_function_(		"thread_exit", ctypes.c_void_p, [] )

thread_set_priority = _rpythonic_function_(		"thread_set_priority", ctypes.c_void_p, [
	("thread",		ctypes.POINTER(ctypes.c_void_p)),
	("priority",		ctypes.c_int),] )

thread_self = _rpythonic_function_(		"thread_self", ctypes.c_void_p, [("thread",		ctypes.c_void_p)] )

thread_equal = _rpythonic_function_(		"thread_equal", ctypes.c_int, [
	("thread1",		ctypes.POINTER(ctypes.c_void_p)),
	("thread2",		ctypes.POINTER(ctypes.c_void_p)),] )

g_thread_gettime = _rpythonic_function_(		"g_thread_gettime", ctypes.c_ulonglong, [] )

g_thread_init = _rpythonic_function_(		"g_thread_init", ctypes.c_void_p, [
	("vtable",		ctypes.POINTER(_GThreadFunctions)),] )

g_thread_init_with_errorcheck_mutexes = _rpythonic_function_(		"g_thread_init_with_errorcheck_mutexes", ctypes.c_void_p, [
	("vtable",		ctypes.POINTER(_GThreadFunctions)),] )

g_thread_get_initialized = _rpythonic_function_(		"g_thread_get_initialized", ctypes.c_int, [] )

g_static_mutex_get_mutex_impl = _rpythonic_function_(		"g_static_mutex_get_mutex_impl", ctypes.POINTER(_GMutex), [
	("mutex",		ctypes.POINTER(ctypes.POINTER(_GMutex))),] )

g_thread_create_full = _rpythonic_function_(		"g_thread_create_full", ctypes.POINTER(_GThread), [
	("func",		ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("stack_size",		ctypes.c_ulong),
	("joinable",		ctypes.c_int),
	("bound",		ctypes.c_int),
	("priority",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_thread_self = _rpythonic_function_(		"g_thread_self", ctypes.POINTER(_GThread), [] )

g_thread_exit = _rpythonic_function_(		"g_thread_exit", ctypes.c_void_p, [("retval",		ctypes.c_void_p)] )

g_thread_join = _rpythonic_function_(		"g_thread_join", ctypes.POINTER(ctypes.c_void_p), [
	("thread",		ctypes.POINTER(_GThread)),] )

g_thread_set_priority = _rpythonic_function_(		"g_thread_set_priority", ctypes.c_void_p, [
	("thread",		ctypes.POINTER(_GThread)),
	("priority",		ctypes.c_int),] )

g_static_mutex_init = _rpythonic_function_(		"g_static_mutex_init", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(_GStaticMutex)),] )

g_static_mutex_free = _rpythonic_function_(		"g_static_mutex_free", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(_GStaticMutex)),] )

g_static_private_init = _rpythonic_function_(		"g_static_private_init", ctypes.c_void_p, [
	("private_key",		ctypes.POINTER(_GStaticPrivate)),] )

g_static_private_get = _rpythonic_function_(		"g_static_private_get", ctypes.POINTER(ctypes.c_void_p), [
	("private_key",		ctypes.POINTER(_GStaticPrivate)),] )

g_static_private_set = _rpythonic_function_(		"g_static_private_set", ctypes.c_void_p, [
	("private_key",		ctypes.POINTER(_GStaticPrivate)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_static_private_free = _rpythonic_function_(		"g_static_private_free", ctypes.c_void_p, [
	("private_key",		ctypes.POINTER(_GStaticPrivate)),] )

g_static_rec_mutex_init = _rpythonic_function_(		"g_static_rec_mutex_init", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(_GStaticRecMutex)),] )

g_static_rec_mutex_lock = _rpythonic_function_(		"g_static_rec_mutex_lock", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(_GStaticRecMutex)),] )

g_static_rec_mutex_trylock = _rpythonic_function_(		"g_static_rec_mutex_trylock", ctypes.c_int, [
	("mutex",		ctypes.POINTER(_GStaticRecMutex)),] )

g_static_rec_mutex_unlock = _rpythonic_function_(		"g_static_rec_mutex_unlock", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(_GStaticRecMutex)),] )

g_static_rec_mutex_lock_full = _rpythonic_function_(		"g_static_rec_mutex_lock_full", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(_GStaticRecMutex)),
	("depth",		ctypes.c_uint),] )

g_static_rec_mutex_unlock_full = _rpythonic_function_(		"g_static_rec_mutex_unlock_full", ctypes.c_uint, [
	("mutex",		ctypes.POINTER(_GStaticRecMutex)),] )

g_static_rec_mutex_free = _rpythonic_function_(		"g_static_rec_mutex_free", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(_GStaticRecMutex)),] )

g_static_rw_lock_init = _rpythonic_function_(		"g_static_rw_lock_init", ctypes.c_void_p, [
	("lock",		ctypes.POINTER(_GStaticRWLock)),] )

g_static_rw_lock_reader_lock = _rpythonic_function_(		"g_static_rw_lock_reader_lock", ctypes.c_void_p, [
	("lock",		ctypes.POINTER(_GStaticRWLock)),] )

g_static_rw_lock_reader_trylock = _rpythonic_function_(		"g_static_rw_lock_reader_trylock", ctypes.c_int, [
	("lock",		ctypes.POINTER(_GStaticRWLock)),] )

g_static_rw_lock_reader_unlock = _rpythonic_function_(		"g_static_rw_lock_reader_unlock", ctypes.c_void_p, [
	("lock",		ctypes.POINTER(_GStaticRWLock)),] )

g_static_rw_lock_writer_lock = _rpythonic_function_(		"g_static_rw_lock_writer_lock", ctypes.c_void_p, [
	("lock",		ctypes.POINTER(_GStaticRWLock)),] )

g_static_rw_lock_writer_trylock = _rpythonic_function_(		"g_static_rw_lock_writer_trylock", ctypes.c_int, [
	("lock",		ctypes.POINTER(_GStaticRWLock)),] )

g_static_rw_lock_writer_unlock = _rpythonic_function_(		"g_static_rw_lock_writer_unlock", ctypes.c_void_p, [
	("lock",		ctypes.POINTER(_GStaticRWLock)),] )

g_static_rw_lock_free = _rpythonic_function_(		"g_static_rw_lock_free", ctypes.c_void_p, [
	("lock",		ctypes.POINTER(_GStaticRWLock)),] )

g_thread_foreach = _rpythonic_function_(		"g_thread_foreach", ctypes.c_void_p, [
	("thread_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_once_impl = _rpythonic_function_(		"g_once_impl", ctypes.POINTER(ctypes.c_void_p), [
	("once",		ctypes.POINTER(_GOnce)),
	("func",		ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), )),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),] )

g_once_init_enter = _rpythonic_function_(		"g_once_init_enter", ctypes.c_int, [
	("value_location",		ctypes.POINTER(ctypes.c_uint)),] )

g_once_init_enter_impl = _rpythonic_function_(		"g_once_init_enter_impl", ctypes.c_int, [
	("value_location",		ctypes.POINTER(ctypes.c_uint)),] )

g_once_init_leave = _rpythonic_function_(		"g_once_init_leave", ctypes.c_void_p, [
	("value_location",		ctypes.POINTER(ctypes.c_uint)),
	("initialization_value",		ctypes.c_uint),] )

glib_dummy_decl = _rpythonic_function_(		"glib_dummy_decl", ctypes.c_void_p, [] )

g_async_queue_new = _rpythonic_function_(		"g_async_queue_new", ctypes.POINTER(_GAsyncQueue), [] )

g_async_queue_new_full = _rpythonic_function_(		"g_async_queue_new_full", ctypes.POINTER(_GAsyncQueue), [
	("item_free_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_async_queue_lock = _rpythonic_function_(		"g_async_queue_lock", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GAsyncQueue)),] )

g_async_queue_unlock = _rpythonic_function_(		"g_async_queue_unlock", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GAsyncQueue)),] )

g_async_queue_ref = _rpythonic_function_(		"g_async_queue_ref", ctypes.POINTER(_GAsyncQueue), [
	("queue",		ctypes.POINTER(_GAsyncQueue)),] )

g_async_queue_unref = _rpythonic_function_(		"g_async_queue_unref", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GAsyncQueue)),] )

g_async_queue_ref_unlocked = _rpythonic_function_(		"g_async_queue_ref_unlocked", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GAsyncQueue)),] )

g_async_queue_unref_and_unlock = _rpythonic_function_(		"g_async_queue_unref_and_unlock", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GAsyncQueue)),] )

g_async_queue_push = _rpythonic_function_(		"g_async_queue_push", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GAsyncQueue)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_async_queue_push_unlocked = _rpythonic_function_(		"g_async_queue_push_unlocked", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GAsyncQueue)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_async_queue_push_sorted = _rpythonic_function_(		"g_async_queue_push_sorted", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GAsyncQueue)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_async_queue_push_sorted_unlocked = _rpythonic_function_(		"g_async_queue_push_sorted_unlocked", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GAsyncQueue)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_async_queue_pop = _rpythonic_function_(		"g_async_queue_pop", ctypes.POINTER(ctypes.c_void_p), [
	("queue",		ctypes.POINTER(_GAsyncQueue)),] )

g_async_queue_pop_unlocked = _rpythonic_function_(		"g_async_queue_pop_unlocked", ctypes.POINTER(ctypes.c_void_p), [
	("queue",		ctypes.POINTER(_GAsyncQueue)),] )

g_async_queue_try_pop = _rpythonic_function_(		"g_async_queue_try_pop", ctypes.POINTER(ctypes.c_void_p), [
	("queue",		ctypes.POINTER(_GAsyncQueue)),] )

g_async_queue_try_pop_unlocked = _rpythonic_function_(		"g_async_queue_try_pop_unlocked", ctypes.POINTER(ctypes.c_void_p), [
	("queue",		ctypes.POINTER(_GAsyncQueue)),] )

g_async_queue_timed_pop = _rpythonic_function_(		"g_async_queue_timed_pop", ctypes.POINTER(ctypes.c_void_p), [
	("queue",		ctypes.POINTER(_GAsyncQueue)),
	("end_time",		ctypes.POINTER(_GTimeVal)),] )

g_async_queue_timed_pop_unlocked = _rpythonic_function_(		"g_async_queue_timed_pop_unlocked", ctypes.POINTER(ctypes.c_void_p), [
	("queue",		ctypes.POINTER(_GAsyncQueue)),
	("end_time",		ctypes.POINTER(_GTimeVal)),] )

g_async_queue_length = _rpythonic_function_(		"g_async_queue_length", ctypes.c_int, [
	("queue",		ctypes.POINTER(_GAsyncQueue)),] )

g_async_queue_length_unlocked = _rpythonic_function_(		"g_async_queue_length_unlocked", ctypes.c_int, [
	("queue",		ctypes.POINTER(_GAsyncQueue)),] )

g_async_queue_sort = _rpythonic_function_(		"g_async_queue_sort", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GAsyncQueue)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_async_queue_sort_unlocked = _rpythonic_function_(		"g_async_queue_sort_unlocked", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GAsyncQueue)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

_g_async_queue_get_mutex = _rpythonic_function_(		"_g_async_queue_get_mutex", ctypes.POINTER(_GMutex), [
	("queue",		ctypes.POINTER(_GAsyncQueue)),] )

_function = _rpythonic_function_(		"_function", ctypes.c_void_p, [
	("none",		ctypes.c_void_p),] )

signal = _rpythonic_function_(		"signal", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,), [
	("__sig",		ctypes.c_int),
	("__handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,)),] )

kill = _rpythonic_function_(		"kill", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__sig",		ctypes.c_int),] )

killpg = _rpythonic_function_(		"killpg", ctypes.c_int, [
	("__pgrp",		ctypes.c_int),
	("__sig",		ctypes.c_int),] )

C_raise = _rpythonic_function_(		"C_raise", ctypes.c_int, [
	("__sig",		ctypes.c_int),] )

ssignal = _rpythonic_function_(		"ssignal", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,), [
	("__sig",		ctypes.c_int),
	("__handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,)),] )

gsignal = _rpythonic_function_(		"gsignal", ctypes.c_int, [
	("__sig",		ctypes.c_int),] )

psignal = _rpythonic_function_(		"psignal", ctypes.c_void_p, [
	("__sig",		ctypes.c_int),
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

psiginfo = _rpythonic_function_(		"psiginfo", ctypes.c_void_p, [
	("__pinfo",		ctypes.POINTER(siginfo)),
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

sigblock = _rpythonic_function_(		"sigblock", ctypes.c_int, [
	("__mask",		ctypes.c_int),] )

sigsetmask = _rpythonic_function_(		"sigsetmask", ctypes.c_int, [
	("__mask",		ctypes.c_int),] )

siggetmask = _rpythonic_function_(		"siggetmask", ctypes.c_int, [] )

sigemptyset = _rpythonic_function_(		"sigemptyset", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),] )

sigfillset = _rpythonic_function_(		"sigfillset", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),] )

sigaddset = _rpythonic_function_(		"sigaddset", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),
	("__signo",		ctypes.c_int),] )

sigdelset = _rpythonic_function_(		"sigdelset", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),
	("__signo",		ctypes.c_int),] )

sigismember = _rpythonic_function_(		"sigismember", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),
	("__signo",		ctypes.c_int),] )

sa_sigaction = _rpythonic_function_(		"sa_sigaction", ctypes.c_void_p, [
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

sigprocmask = _rpythonic_function_(		"sigprocmask", ctypes.c_int, [
	("__how",		ctypes.c_int),
	("__set",		ctypes.POINTER(__sigset_t)),
	("__oset",		ctypes.POINTER(__sigset_t)),] )

sa_restorer = _rpythonic_function_(		"sa_restorer", ctypes.c_void_p, [] )

sigsuspend = _rpythonic_function_(		"sigsuspend", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),] )

sigpending = _rpythonic_function_(		"sigpending", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),] )

sigwait = _rpythonic_function_(		"sigwait", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),
	("__sig",		ctypes.POINTER(ctypes.c_int)),] )

sigwaitinfo = _rpythonic_function_(		"sigwaitinfo", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),
	("__info",		ctypes.POINTER(siginfo)),] )

sigtimedwait = _rpythonic_function_(		"sigtimedwait", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),
	("__info",		ctypes.POINTER(siginfo)),
	("__timeout",		ctypes.POINTER(timespec)),] )

sigqueue = _rpythonic_function_(		"sigqueue", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__sig",		ctypes.c_int),
	("__val",		sigval),] )

sigreturn = _rpythonic_function_(		"sigreturn", ctypes.c_int, [
	("__scp",		ctypes.POINTER(sigcontext)),] )

siginterrupt = _rpythonic_function_(		"siginterrupt", ctypes.c_int, [
	("__sig",		ctypes.c_int),
	("__interrupt",		ctypes.c_int),] )

pthread_sigmask = _rpythonic_function_(		"pthread_sigmask", ctypes.c_int, [
	("__how",		ctypes.c_int),
	("__newmask",		ctypes.POINTER(__sigset_t)),
	("__oldmask",		ctypes.POINTER(__sigset_t)),] )

pthread_kill = _rpythonic_function_(		"pthread_kill", ctypes.c_int, [
	("__threadid",		ctypes.c_uint64),
	("__signo",		ctypes.c_int),] )

g_on_error_query = _rpythonic_function_(		"g_on_error_query", ctypes.c_void_p, [
	("prg_name",		ctypes.POINTER(ctypes.c_char)),] )

g_on_error_stack_trace = _rpythonic_function_(		"g_on_error_stack_trace", ctypes.c_void_p, [
	("prg_name",		ctypes.POINTER(ctypes.c_char)),] )

g_base64_encode_step = _rpythonic_function_(		"g_base64_encode_step", ctypes.c_uint, [
	("C_in",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_uint),
	("break_lines",		ctypes.c_int),
	("out",		ctypes.POINTER(ctypes.c_char)),
	("state",		ctypes.POINTER(ctypes.c_int)),
	("save",		ctypes.POINTER(ctypes.c_int)),] )

g_base64_encode_close = _rpythonic_function_(		"g_base64_encode_close", ctypes.c_uint, [
	("break_lines",		ctypes.c_int),
	("out",		ctypes.POINTER(ctypes.c_char)),
	("state",		ctypes.POINTER(ctypes.c_int)),
	("save",		ctypes.POINTER(ctypes.c_int)),] )

g_base64_encode = _rpythonic_function_(		"g_base64_encode", ctypes.POINTER(ctypes.c_char), [
	("data",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_uint),] )

g_base64_decode_step = _rpythonic_function_(		"g_base64_decode_step", ctypes.c_uint, [
	("C_in",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_uint),
	("out",		ctypes.POINTER(ctypes.c_ubyte)),
	("state",		ctypes.POINTER(ctypes.c_int)),
	("save",		ctypes.POINTER(ctypes.c_uint)),] )

g_base64_decode = _rpythonic_function_(		"g_base64_decode", ctypes.POINTER(ctypes.c_ubyte), [
	("text",		ctypes.POINTER(ctypes.c_char)),
	("out_len",		ctypes.POINTER(ctypes.c_uint)),] )

g_base64_decode_inplace = _rpythonic_function_(		"g_base64_decode_inplace", ctypes.POINTER(ctypes.c_ubyte), [
	("text",		ctypes.POINTER(ctypes.c_char)),
	("out_len",		ctypes.POINTER(ctypes.c_uint)),] )

g_bit_lock = _rpythonic_function_(		"g_bit_lock", ctypes.c_void_p, [
	("address",		ctypes.POINTER(ctypes.c_int)),
	("lock_bit",		ctypes.c_int),] )

g_bit_trylock = _rpythonic_function_(		"g_bit_trylock", ctypes.c_int, [
	("address",		ctypes.POINTER(ctypes.c_int)),
	("lock_bit",		ctypes.c_int),] )

g_bit_unlock = _rpythonic_function_(		"g_bit_unlock", ctypes.c_void_p, [
	("address",		ctypes.POINTER(ctypes.c_int)),
	("lock_bit",		ctypes.c_int),] )

g_pointer_bit_lock = _rpythonic_function_(		"g_pointer_bit_lock", ctypes.c_void_p, [
	("address",		ctypes.POINTER(ctypes.c_void_p)),
	("lock_bit",		ctypes.c_int),] )

g_pointer_bit_trylock = _rpythonic_function_(		"g_pointer_bit_trylock", ctypes.c_int, [
	("address",		ctypes.POINTER(ctypes.c_void_p)),
	("lock_bit",		ctypes.c_int),] )

g_pointer_bit_unlock = _rpythonic_function_(		"g_pointer_bit_unlock", ctypes.c_void_p, [
	("address",		ctypes.POINTER(ctypes.c_void_p)),
	("lock_bit",		ctypes.c_int),] )

g_bookmark_file_error_quark = _rpythonic_function_(		"g_bookmark_file_error_quark", ctypes.c_uint, [] )

g_bookmark_file_new = _rpythonic_function_(		"g_bookmark_file_new", ctypes.POINTER(_GBookmarkFile), [] )

g_bookmark_file_free = _rpythonic_function_(		"g_bookmark_file_free", ctypes.c_void_p, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),] )

g_bookmark_file_load_from_file = _rpythonic_function_(		"g_bookmark_file_load_from_file", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_load_from_data = _rpythonic_function_(		"g_bookmark_file_load_from_data", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("data",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_uint),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_load_from_data_dirs = _rpythonic_function_(		"g_bookmark_file_load_from_data_dirs", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("full_path",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_to_data = _rpythonic_function_(		"g_bookmark_file_to_data", ctypes.POINTER(ctypes.c_char), [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("length",		ctypes.POINTER(ctypes.c_uint)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_to_file = _rpythonic_function_(		"g_bookmark_file_to_file", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_set_title = _rpythonic_function_(		"g_bookmark_file_set_title", ctypes.c_void_p, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("title",		ctypes.POINTER(ctypes.c_char)),] )

g_bookmark_file_get_title = _rpythonic_function_(		"g_bookmark_file_get_title", ctypes.POINTER(ctypes.c_char), [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_set_description = _rpythonic_function_(		"g_bookmark_file_set_description", ctypes.c_void_p, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("description",		ctypes.POINTER(ctypes.c_char)),] )

g_bookmark_file_get_description = _rpythonic_function_(		"g_bookmark_file_get_description", ctypes.POINTER(ctypes.c_char), [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_set_mime_type = _rpythonic_function_(		"g_bookmark_file_set_mime_type", ctypes.c_void_p, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("mime_type",		ctypes.POINTER(ctypes.c_char)),] )

g_bookmark_file_get_mime_type = _rpythonic_function_(		"g_bookmark_file_get_mime_type", ctypes.POINTER(ctypes.c_char), [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_set_groups = _rpythonic_function_(		"g_bookmark_file_set_groups", ctypes.c_void_p, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("groups",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("length",		ctypes.c_uint),] )

g_bookmark_file_add_group = _rpythonic_function_(		"g_bookmark_file_add_group", ctypes.c_void_p, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("group",		ctypes.POINTER(ctypes.c_char)),] )

g_bookmark_file_has_group = _rpythonic_function_(		"g_bookmark_file_has_group", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("group",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_get_groups = _rpythonic_function_(		"g_bookmark_file_get_groups", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.POINTER(ctypes.c_uint)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_add_application = _rpythonic_function_(		"g_bookmark_file_add_application", ctypes.c_void_p, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("C_exec",		ctypes.POINTER(ctypes.c_char)),] )

g_bookmark_file_has_application = _rpythonic_function_(		"g_bookmark_file_has_application", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_get_applications = _rpythonic_function_(		"g_bookmark_file_get_applications", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.POINTER(ctypes.c_uint)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_set_app_info = _rpythonic_function_(		"g_bookmark_file_set_app_info", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("C_exec",		ctypes.POINTER(ctypes.c_char)),
	("count",		ctypes.c_int),
	("stamp",		ctypes.c_int64),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_get_app_info = _rpythonic_function_(		"g_bookmark_file_get_app_info", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("C_exec",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("count",		ctypes.POINTER(ctypes.c_uint)),
	("stamp",		ctypes.POINTER(ctypes.c_int64)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_set_is_private = _rpythonic_function_(		"g_bookmark_file_set_is_private", ctypes.c_void_p, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("is_private",		ctypes.c_int),] )

g_bookmark_file_get_is_private = _rpythonic_function_(		"g_bookmark_file_get_is_private", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_set_icon = _rpythonic_function_(		"g_bookmark_file_set_icon", ctypes.c_void_p, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("href",		ctypes.POINTER(ctypes.c_char)),
	("mime_type",		ctypes.POINTER(ctypes.c_char)),] )

g_bookmark_file_get_icon = _rpythonic_function_(		"g_bookmark_file_get_icon", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("href",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("mime_type",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_set_added = _rpythonic_function_(		"g_bookmark_file_set_added", ctypes.c_void_p, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("added",		ctypes.c_int64),] )

g_bookmark_file_get_added = _rpythonic_function_(		"g_bookmark_file_get_added", ctypes.c_int64, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_set_modified = _rpythonic_function_(		"g_bookmark_file_set_modified", ctypes.c_void_p, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("modified",		ctypes.c_int64),] )

g_bookmark_file_get_modified = _rpythonic_function_(		"g_bookmark_file_get_modified", ctypes.c_int64, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_set_visited = _rpythonic_function_(		"g_bookmark_file_set_visited", ctypes.c_void_p, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("visited",		ctypes.c_int64),] )

g_bookmark_file_get_visited = _rpythonic_function_(		"g_bookmark_file_get_visited", ctypes.c_int64, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_has_item = _rpythonic_function_(		"g_bookmark_file_has_item", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

g_bookmark_file_get_size = _rpythonic_function_(		"g_bookmark_file_get_size", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),] )

g_bookmark_file_get_uris = _rpythonic_function_(		"g_bookmark_file_get_uris", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("length",		ctypes.POINTER(ctypes.c_uint)),] )

g_bookmark_file_remove_group = _rpythonic_function_(		"g_bookmark_file_remove_group", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("group",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_remove_application = _rpythonic_function_(		"g_bookmark_file_remove_application", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_remove_item = _rpythonic_function_(		"g_bookmark_file_remove_item", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_move_item = _rpythonic_function_(		"g_bookmark_file_move_item", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("old_uri",		ctypes.POINTER(ctypes.c_char)),
	("new_uri",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_slice_alloc = _rpythonic_function_(		"g_slice_alloc", ctypes.POINTER(ctypes.c_void_p), [
	("block_size",		ctypes.c_uint),] )

g_slice_alloc0 = _rpythonic_function_(		"g_slice_alloc0", ctypes.POINTER(ctypes.c_void_p), [
	("block_size",		ctypes.c_uint),] )

g_slice_copy = _rpythonic_function_(		"g_slice_copy", ctypes.POINTER(ctypes.c_void_p), [
	("block_size",		ctypes.c_uint),
	("mem_block",		ctypes.POINTER(ctypes.c_void_p)),] )

g_slice_free1 = _rpythonic_function_(		"g_slice_free1", ctypes.c_void_p, [
	("block_size",		ctypes.c_uint),
	("mem_block",		ctypes.POINTER(ctypes.c_void_p)),] )

g_slice_free_chain_with_offset = _rpythonic_function_(		"g_slice_free_chain_with_offset", ctypes.c_void_p, [
	("block_size",		ctypes.c_uint),
	("mem_chain",		ctypes.POINTER(ctypes.c_void_p)),
	("next_offset",		ctypes.c_uint),] )

g_slice_set_config = _rpythonic_function_(		"g_slice_set_config", ctypes.c_void_p, [
	("ckey",		ctypes.c_int),
	("value",		ctypes.c_longlong),] )

g_slice_get_config = _rpythonic_function_(		"g_slice_get_config", ctypes.c_longlong, [
	("ckey",		ctypes.c_int),] )

g_slice_get_config_state = _rpythonic_function_(		"g_slice_get_config_state", ctypes.POINTER(ctypes.c_longlong), [
	("ckey",		ctypes.c_int),
	("address",		ctypes.c_longlong),
	("n_values",		ctypes.POINTER(ctypes.c_uint)),] )

g_free = _rpythonic_function_(		"g_free", ctypes.c_void_p, [("mem",		ctypes.c_void_p)] )

g_malloc = _rpythonic_function_(		"g_malloc", ctypes.POINTER(ctypes.c_void_p), [
	("n_bytes",		ctypes.c_uint),] )

g_malloc0 = _rpythonic_function_(		"g_malloc0", ctypes.POINTER(ctypes.c_void_p), [
	("n_bytes",		ctypes.c_uint),] )

g_realloc = _rpythonic_function_(		"g_realloc", ctypes.POINTER(ctypes.c_void_p), [
	("mem",		ctypes.POINTER(ctypes.c_void_p)),
	("n_bytes",		ctypes.c_uint),] )

g_try_malloc = _rpythonic_function_(		"g_try_malloc", ctypes.POINTER(ctypes.c_void_p), [
	("n_bytes",		ctypes.c_uint),] )

g_try_malloc0 = _rpythonic_function_(		"g_try_malloc0", ctypes.POINTER(ctypes.c_void_p), [
	("n_bytes",		ctypes.c_uint),] )

g_try_realloc = _rpythonic_function_(		"g_try_realloc", ctypes.POINTER(ctypes.c_void_p), [
	("mem",		ctypes.POINTER(ctypes.c_void_p)),
	("n_bytes",		ctypes.c_uint),] )

g_malloc_n = _rpythonic_function_(		"g_malloc_n", ctypes.POINTER(ctypes.c_void_p), [
	("n_blocks",		ctypes.c_uint),
	("n_block_bytes",		ctypes.c_uint),] )

g_malloc0_n = _rpythonic_function_(		"g_malloc0_n", ctypes.POINTER(ctypes.c_void_p), [
	("n_blocks",		ctypes.c_uint),
	("n_block_bytes",		ctypes.c_uint),] )

g_realloc_n = _rpythonic_function_(		"g_realloc_n", ctypes.POINTER(ctypes.c_void_p), [
	("mem",		ctypes.POINTER(ctypes.c_void_p)),
	("n_blocks",		ctypes.c_uint),
	("n_block_bytes",		ctypes.c_uint),] )

g_try_malloc_n = _rpythonic_function_(		"g_try_malloc_n", ctypes.POINTER(ctypes.c_void_p), [
	("n_blocks",		ctypes.c_uint),
	("n_block_bytes",		ctypes.c_uint),] )

g_try_malloc0_n = _rpythonic_function_(		"g_try_malloc0_n", ctypes.POINTER(ctypes.c_void_p), [
	("n_blocks",		ctypes.c_uint),
	("n_block_bytes",		ctypes.c_uint),] )

g_try_realloc_n = _rpythonic_function_(		"g_try_realloc_n", ctypes.POINTER(ctypes.c_void_p), [
	("mem",		ctypes.POINTER(ctypes.c_void_p)),
	("n_blocks",		ctypes.c_uint),
	("n_block_bytes",		ctypes.c_uint),] )

malloc = _rpythonic_function_(		"malloc", ctypes.POINTER(ctypes.c_void_p), [
	("n_bytes",		ctypes.c_uint),] )

realloc = _rpythonic_function_(		"realloc", ctypes.POINTER(ctypes.c_void_p), [
	("mem",		ctypes.POINTER(ctypes.c_void_p)),
	("n_bytes",		ctypes.c_uint),] )

free = _rpythonic_function_(		"free", ctypes.c_void_p, [("mem",		ctypes.c_void_p)] )

calloc = _rpythonic_function_(		"calloc", ctypes.POINTER(ctypes.c_void_p), [
	("n_blocks",		ctypes.c_uint),
	("n_block_bytes",		ctypes.c_uint),] )

try_malloc = _rpythonic_function_(		"try_malloc", ctypes.POINTER(ctypes.c_void_p), [
	("n_bytes",		ctypes.c_uint),] )

try_realloc = _rpythonic_function_(		"try_realloc", ctypes.POINTER(ctypes.c_void_p), [
	("mem",		ctypes.POINTER(ctypes.c_void_p)),
	("n_bytes",		ctypes.c_uint),] )

g_mem_set_vtable = _rpythonic_function_(		"g_mem_set_vtable", ctypes.c_void_p, [
	("vtable",		ctypes.POINTER(_GMemVTable)),] )

g_mem_is_system_malloc = _rpythonic_function_(		"g_mem_is_system_malloc", ctypes.c_int, [] )

g_mem_profile = _rpythonic_function_(		"g_mem_profile", ctypes.c_void_p, [] )

g_mem_chunk_new = _rpythonic_function_(		"g_mem_chunk_new", ctypes.POINTER(_GMemChunk), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("atom_size",		ctypes.c_int),
	("area_size",		ctypes.c_uint),
	("C_type",		ctypes.c_int),] )

g_mem_chunk_destroy = _rpythonic_function_(		"g_mem_chunk_destroy", ctypes.c_void_p, [
	("mem_chunk",		ctypes.POINTER(_GMemChunk)),] )

g_mem_chunk_alloc = _rpythonic_function_(		"g_mem_chunk_alloc", ctypes.POINTER(ctypes.c_void_p), [
	("mem_chunk",		ctypes.POINTER(_GMemChunk)),] )

g_mem_chunk_alloc0 = _rpythonic_function_(		"g_mem_chunk_alloc0", ctypes.POINTER(ctypes.c_void_p), [
	("mem_chunk",		ctypes.POINTER(_GMemChunk)),] )

g_mem_chunk_free = _rpythonic_function_(		"g_mem_chunk_free", ctypes.c_void_p, [
	("mem_chunk",		ctypes.POINTER(_GMemChunk)),
	("mem",		ctypes.POINTER(ctypes.c_void_p)),] )

g_mem_chunk_clean = _rpythonic_function_(		"g_mem_chunk_clean", ctypes.c_void_p, [
	("mem_chunk",		ctypes.POINTER(_GMemChunk)),] )

g_mem_chunk_reset = _rpythonic_function_(		"g_mem_chunk_reset", ctypes.c_void_p, [
	("mem_chunk",		ctypes.POINTER(_GMemChunk)),] )

g_mem_chunk_print = _rpythonic_function_(		"g_mem_chunk_print", ctypes.c_void_p, [
	("mem_chunk",		ctypes.POINTER(_GMemChunk)),] )

g_mem_chunk_info = _rpythonic_function_(		"g_mem_chunk_info", ctypes.c_void_p, [] )

g_blow_chunks = _rpythonic_function_(		"g_blow_chunks", ctypes.c_void_p, [] )

g_allocator_new = _rpythonic_function_(		"g_allocator_new", ctypes.POINTER(_GAllocator), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("n_preallocs",		ctypes.c_uint),] )

g_allocator_free = _rpythonic_function_(		"g_allocator_free", ctypes.c_void_p, [
	("allocator",		ctypes.POINTER(_GAllocator)),] )

g_list_alloc = _rpythonic_function_(		"g_list_alloc", ctypes.POINTER(_GList), [] )

g_list_free = _rpythonic_function_(		"g_list_free", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GList)),] )

g_list_free_1 = _rpythonic_function_(		"g_list_free_1", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GList)),] )

g_list_free_full = _rpythonic_function_(		"g_list_free_full", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GList)),
	("free_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_list_append = _rpythonic_function_(		"g_list_append", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_list_prepend = _rpythonic_function_(		"g_list_prepend", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_list_insert = _rpythonic_function_(		"g_list_insert", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("position",		ctypes.c_int),] )

g_list_insert_sorted = _rpythonic_function_(		"g_list_insert_sorted", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_list_insert_sorted_with_data = _rpythonic_function_(		"g_list_insert_sorted_with_data", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_list_insert_before = _rpythonic_function_(		"g_list_insert_before", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("sibling",		ctypes.POINTER(_GList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_list_concat = _rpythonic_function_(		"g_list_concat", ctypes.POINTER(_GList), [
	("list1",		ctypes.POINTER(_GList)),
	("list2",		ctypes.POINTER(_GList)),] )

g_list_remove = _rpythonic_function_(		"g_list_remove", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_list_remove_all = _rpythonic_function_(		"g_list_remove_all", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_list_remove_link = _rpythonic_function_(		"g_list_remove_link", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("llink",		ctypes.POINTER(_GList)),] )

g_list_delete_link = _rpythonic_function_(		"g_list_delete_link", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("link_",		ctypes.POINTER(_GList)),] )

g_list_reverse = _rpythonic_function_(		"g_list_reverse", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),] )

g_list_copy = _rpythonic_function_(		"g_list_copy", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),] )

g_list_nth = _rpythonic_function_(		"g_list_nth", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("n",		ctypes.c_uint),] )

g_list_nth_prev = _rpythonic_function_(		"g_list_nth_prev", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("n",		ctypes.c_uint),] )

g_list_find = _rpythonic_function_(		"g_list_find", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_list_find_custom = _rpythonic_function_(		"g_list_find_custom", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_list_position = _rpythonic_function_(		"g_list_position", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GList)),
	("llink",		ctypes.POINTER(_GList)),] )

g_list_index = _rpythonic_function_(		"g_list_index", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_list_last = _rpythonic_function_(		"g_list_last", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),] )

g_list_first = _rpythonic_function_(		"g_list_first", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),] )

g_list_length = _rpythonic_function_(		"g_list_length", ctypes.c_uint, [
	("C_list",		ctypes.POINTER(_GList)),] )

g_list_foreach = _rpythonic_function_(		"g_list_foreach", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GList)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_list_sort = _rpythonic_function_(		"g_list_sort", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_list_sort_with_data = _rpythonic_function_(		"g_list_sort_with_data", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_list_nth_data = _rpythonic_function_(		"g_list_nth_data", ctypes.POINTER(ctypes.c_void_p), [
	("C_list",		ctypes.POINTER(_GList)),
	("n",		ctypes.c_uint),] )

g_list_push_allocator = _rpythonic_function_(		"g_list_push_allocator", ctypes.c_void_p, [("allocator",		ctypes.c_void_p)] )

g_list_pop_allocator = _rpythonic_function_(		"g_list_pop_allocator", ctypes.c_void_p, [] )

GCacheNewFunc = _rpythonic_function_(		"GCacheNewFunc", ctypes.POINTER(ctypes.c_void_p), [("key",		ctypes.c_void_p)] )

GCacheDupFunc = _rpythonic_function_(		"GCacheDupFunc", ctypes.POINTER(ctypes.c_void_p), [("value",		ctypes.c_void_p)] )

GCacheDestroyFunc = _rpythonic_function_(		"GCacheDestroyFunc", ctypes.c_void_p, [("value",		ctypes.c_void_p)] )

g_cache_new = _rpythonic_function_(		"g_cache_new", ctypes.POINTER(_GCache), [
	("value_new_func",		ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), )),
	("value_destroy_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("key_dup_func",		ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), )),
	("key_destroy_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("hash_key_func",		ctypes.CFUNCTYPE(ctypes.c_uint, )),
	("hash_value_func",		ctypes.CFUNCTYPE(ctypes.c_uint, )),
	("key_equal_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_cache_destroy = _rpythonic_function_(		"g_cache_destroy", ctypes.c_void_p, [
	("cache",		ctypes.POINTER(_GCache)),] )

g_cache_insert = _rpythonic_function_(		"g_cache_insert", ctypes.POINTER(ctypes.c_void_p), [
	("cache",		ctypes.POINTER(_GCache)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cache_remove = _rpythonic_function_(		"g_cache_remove", ctypes.c_void_p, [
	("cache",		ctypes.POINTER(_GCache)),
	("value",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cache_key_foreach = _rpythonic_function_(		"g_cache_key_foreach", ctypes.c_void_p, [
	("cache",		ctypes.POINTER(_GCache)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cache_value_foreach = _rpythonic_function_(		"g_cache_value_foreach", ctypes.c_void_p, [
	("cache",		ctypes.POINTER(_GCache)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_checksum_type_get_length = _rpythonic_function_(		"g_checksum_type_get_length", ctypes.c_int, [
	("checksum_type",		ctypes.c_int),] )

g_checksum_new = _rpythonic_function_(		"g_checksum_new", ctypes.POINTER(_GChecksum), [
	("checksum_type",		ctypes.c_int),] )

g_checksum_reset = _rpythonic_function_(		"g_checksum_reset", ctypes.c_void_p, [
	("checksum",		ctypes.POINTER(_GChecksum)),] )

g_checksum_copy = _rpythonic_function_(		"g_checksum_copy", ctypes.POINTER(_GChecksum), [
	("checksum",		ctypes.POINTER(_GChecksum)),] )

g_checksum_free = _rpythonic_function_(		"g_checksum_free", ctypes.c_void_p, [
	("checksum",		ctypes.POINTER(_GChecksum)),] )

g_checksum_update = _rpythonic_function_(		"g_checksum_update", ctypes.c_void_p, [
	("checksum",		ctypes.POINTER(_GChecksum)),
	("data",		ctypes.POINTER(ctypes.c_ubyte)),
	("length",		ctypes.c_int),] )

g_checksum_get_string = _rpythonic_function_(		"g_checksum_get_string", ctypes.POINTER(ctypes.c_char), [
	("checksum",		ctypes.POINTER(_GChecksum)),] )

g_checksum_get_digest = _rpythonic_function_(		"g_checksum_get_digest", ctypes.c_void_p, [
	("checksum",		ctypes.POINTER(_GChecksum)),
	("buffer",		ctypes.POINTER(ctypes.c_ubyte)),
	("digest_len",		ctypes.POINTER(ctypes.c_uint)),] )

g_compute_checksum_for_data = _rpythonic_function_(		"g_compute_checksum_for_data", ctypes.POINTER(ctypes.c_char), [
	("checksum_type",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_ubyte)),
	("length",		ctypes.c_uint),] )

g_compute_checksum_for_string = _rpythonic_function_(		"g_compute_checksum_for_string", ctypes.POINTER(ctypes.c_char), [
	("checksum_type",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),] )

GCompletionFunc = _rpythonic_function_(		"GCompletionFunc", ctypes.POINTER(ctypes.c_char), [] )

GCompletionStrncmpFunc = _rpythonic_function_(		"GCompletionStrncmpFunc", ctypes.c_int, [
	("s1",		ctypes.POINTER(ctypes.c_char)),
	("s2",		ctypes.POINTER(ctypes.c_char)),
	("n",		ctypes.c_uint),] )

g_completion_new = _rpythonic_function_(		"g_completion_new", ctypes.POINTER(_GCompletion), [
	("func",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_char), ))),] )

g_completion_add_items = _rpythonic_function_(		"g_completion_add_items", ctypes.c_void_p, [
	("cmp",		ctypes.POINTER(_GCompletion)),
	("items",		ctypes.POINTER(_GList)),] )

g_completion_remove_items = _rpythonic_function_(		"g_completion_remove_items", ctypes.c_void_p, [
	("cmp",		ctypes.POINTER(_GCompletion)),
	("items",		ctypes.POINTER(_GList)),] )

g_completion_clear_items = _rpythonic_function_(		"g_completion_clear_items", ctypes.c_void_p, [
	("cmp",		ctypes.POINTER(_GCompletion)),] )

g_completion_complete = _rpythonic_function_(		"g_completion_complete", ctypes.POINTER(_GList), [
	("cmp",		ctypes.POINTER(_GCompletion)),
	("prefix",		ctypes.POINTER(ctypes.c_char)),
	("new_prefix",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_completion_complete_utf8 = _rpythonic_function_(		"g_completion_complete_utf8", ctypes.POINTER(_GList), [
	("cmp",		ctypes.POINTER(_GCompletion)),
	("prefix",		ctypes.POINTER(ctypes.c_char)),
	("new_prefix",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_completion_set_compare = _rpythonic_function_(		"g_completion_set_compare", ctypes.c_void_p, [
	("cmp",		ctypes.POINTER(_GCompletion)),
	("strncmp_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.c_uint,)),] )

g_completion_free = _rpythonic_function_(		"g_completion_free", ctypes.c_void_p, [
	("cmp",		ctypes.POINTER(_GCompletion)),] )

g_convert_error_quark = _rpythonic_function_(		"g_convert_error_quark", ctypes.c_uint, [] )

g_iconv_open = _rpythonic_function_(		"g_iconv_open", ctypes.POINTER(_GIConv), [
	("to_codeset",		ctypes.POINTER(ctypes.c_char)),
	("from_codeset",		ctypes.POINTER(ctypes.c_char)),] )

g_iconv = _rpythonic_function_(		"g_iconv", ctypes.c_uint, [
	("converter",		ctypes.POINTER(_GIConv)),
	("inbuf",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("inbytes_left",		ctypes.POINTER(ctypes.c_uint)),
	("outbuf",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("outbytes_left",		ctypes.POINTER(ctypes.c_uint)),] )

g_iconv_close = _rpythonic_function_(		"g_iconv_close", ctypes.c_int, [
	("converter",		ctypes.POINTER(_GIConv)),] )

g_convert = _rpythonic_function_(		"g_convert", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),
	("to_codeset",		ctypes.POINTER(ctypes.c_char)),
	("from_codeset",		ctypes.POINTER(ctypes.c_char)),
	("bytes_read",		ctypes.POINTER(ctypes.c_uint)),
	("bytes_written",		ctypes.POINTER(ctypes.c_uint)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_convert_with_iconv = _rpythonic_function_(		"g_convert_with_iconv", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),
	("converter",		ctypes.POINTER(_GIConv)),
	("bytes_read",		ctypes.POINTER(ctypes.c_uint)),
	("bytes_written",		ctypes.POINTER(ctypes.c_uint)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_convert_with_fallback = _rpythonic_function_(		"g_convert_with_fallback", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),
	("to_codeset",		ctypes.POINTER(ctypes.c_char)),
	("from_codeset",		ctypes.POINTER(ctypes.c_char)),
	("fallback",		ctypes.POINTER(ctypes.c_char)),
	("bytes_read",		ctypes.POINTER(ctypes.c_uint)),
	("bytes_written",		ctypes.POINTER(ctypes.c_uint)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_locale_to_utf8 = _rpythonic_function_(		"g_locale_to_utf8", ctypes.POINTER(ctypes.c_char), [
	("opsysstring",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),
	("bytes_read",		ctypes.POINTER(ctypes.c_uint)),
	("bytes_written",		ctypes.POINTER(ctypes.c_uint)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_locale_from_utf8 = _rpythonic_function_(		"g_locale_from_utf8", ctypes.POINTER(ctypes.c_char), [
	("utf8string",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),
	("bytes_read",		ctypes.POINTER(ctypes.c_uint)),
	("bytes_written",		ctypes.POINTER(ctypes.c_uint)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_filename_to_utf8 = _rpythonic_function_(		"g_filename_to_utf8", ctypes.POINTER(ctypes.c_char), [
	("opsysstring",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),
	("bytes_read",		ctypes.POINTER(ctypes.c_uint)),
	("bytes_written",		ctypes.POINTER(ctypes.c_uint)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_filename_from_utf8 = _rpythonic_function_(		"g_filename_from_utf8", ctypes.POINTER(ctypes.c_char), [
	("utf8string",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),
	("bytes_read",		ctypes.POINTER(ctypes.c_uint)),
	("bytes_written",		ctypes.POINTER(ctypes.c_uint)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_filename_from_uri = _rpythonic_function_(		"g_filename_from_uri", ctypes.POINTER(ctypes.c_char), [
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("hostname",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_filename_to_uri = _rpythonic_function_(		"g_filename_to_uri", ctypes.POINTER(ctypes.c_char), [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("hostname",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_filename_display_name = _rpythonic_function_(		"g_filename_display_name", ctypes.POINTER(ctypes.c_char), [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

g_get_filename_charsets = _rpythonic_function_(		"g_get_filename_charsets", ctypes.c_int, [
	("charsets",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(ctypes.c_char)))),] )

g_filename_display_basename = _rpythonic_function_(		"g_filename_display_basename", ctypes.POINTER(ctypes.c_char), [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

g_uri_list_extract_uris = _rpythonic_function_(		"g_uri_list_extract_uris", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("uri_list",		ctypes.POINTER(ctypes.c_char)),] )

GDataForeachFunc = _rpythonic_function_(		"GDataForeachFunc", ctypes.c_void_p, [
	("key_id",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_datalist_init = _rpythonic_function_(		"g_datalist_init", ctypes.c_void_p, [
	("datalist",		ctypes.POINTER(ctypes.POINTER(_GData))),] )

g_datalist_clear = _rpythonic_function_(		"g_datalist_clear", ctypes.c_void_p, [
	("datalist",		ctypes.POINTER(ctypes.POINTER(_GData))),] )

g_datalist_id_get_data = _rpythonic_function_(		"g_datalist_id_get_data", ctypes.POINTER(ctypes.c_void_p), [
	("datalist",		ctypes.POINTER(ctypes.POINTER(_GData))),
	("key_id",		ctypes.c_uint),] )

g_datalist_id_set_data_full = _rpythonic_function_(		"g_datalist_id_set_data_full", ctypes.c_void_p, [
	("datalist",		ctypes.POINTER(ctypes.POINTER(_GData))),
	("key_id",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_datalist_id_remove_no_notify = _rpythonic_function_(		"g_datalist_id_remove_no_notify", ctypes.POINTER(ctypes.c_void_p), [
	("datalist",		ctypes.POINTER(ctypes.POINTER(_GData))),
	("key_id",		ctypes.c_uint),] )

g_datalist_foreach = _rpythonic_function_(		"g_datalist_foreach", ctypes.c_void_p, [
	("datalist",		ctypes.POINTER(ctypes.POINTER(_GData))),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_uint,ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_datalist_set_flags = _rpythonic_function_(		"g_datalist_set_flags", ctypes.c_void_p, [
	("datalist",		ctypes.POINTER(ctypes.POINTER(_GData))),
	("flags",		ctypes.c_uint),] )

g_datalist_unset_flags = _rpythonic_function_(		"g_datalist_unset_flags", ctypes.c_void_p, [
	("datalist",		ctypes.POINTER(ctypes.POINTER(_GData))),
	("flags",		ctypes.c_uint),] )

g_datalist_get_flags = _rpythonic_function_(		"g_datalist_get_flags", ctypes.c_uint, [
	("datalist",		ctypes.POINTER(ctypes.POINTER(_GData))),] )

g_dataset_destroy = _rpythonic_function_(		"g_dataset_destroy", ctypes.c_void_p, [("dataset_location",		ctypes.c_void_p)] )

g_dataset_id_get_data = _rpythonic_function_(		"g_dataset_id_get_data", ctypes.POINTER(ctypes.c_void_p), [
	("dataset_location",		ctypes.POINTER(ctypes.c_void_p)),
	("key_id",		ctypes.c_uint),] )

g_datalist_get_data = _rpythonic_function_(		"g_datalist_get_data", ctypes.POINTER(ctypes.c_void_p), [
	("datalist",		ctypes.POINTER(ctypes.POINTER(_GData))),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

g_dataset_id_set_data_full = _rpythonic_function_(		"g_dataset_id_set_data_full", ctypes.c_void_p, [
	("dataset_location",		ctypes.POINTER(ctypes.c_void_p)),
	("key_id",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_dataset_id_remove_no_notify = _rpythonic_function_(		"g_dataset_id_remove_no_notify", ctypes.POINTER(ctypes.c_void_p), [
	("dataset_location",		ctypes.POINTER(ctypes.c_void_p)),
	("key_id",		ctypes.c_uint),] )

g_dataset_foreach = _rpythonic_function_(		"g_dataset_foreach", ctypes.c_void_p, [
	("dataset_location",		ctypes.POINTER(ctypes.c_void_p)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_uint,ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_date_new = _rpythonic_function_(		"g_date_new", ctypes.POINTER(_GDate), [] )

g_date_new_dmy = _rpythonic_function_(		"g_date_new_dmy", ctypes.POINTER(_GDate), [
	("day",		ctypes.c_ubyte),
	("month",		ctypes.c_int),
	("year",		ctypes.c_ushort),] )

g_date_new_julian = _rpythonic_function_(		"g_date_new_julian", ctypes.POINTER(_GDate), [
	("julian_day",		ctypes.c_uint),] )

g_date_free = _rpythonic_function_(		"g_date_free", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),] )

g_date_valid = _rpythonic_function_(		"g_date_valid", ctypes.c_int, [
	("date",		ctypes.POINTER(_GDate)),] )

g_date_valid_day = _rpythonic_function_(		"g_date_valid_day", ctypes.c_int, [
	("day",		ctypes.c_ubyte),] )

g_date_valid_month = _rpythonic_function_(		"g_date_valid_month", ctypes.c_int, [
	("month",		ctypes.c_int),] )

g_date_valid_year = _rpythonic_function_(		"g_date_valid_year", ctypes.c_int, [
	("year",		ctypes.c_ushort),] )

g_date_valid_weekday = _rpythonic_function_(		"g_date_valid_weekday", ctypes.c_int, [
	("weekday",		ctypes.c_int),] )

g_date_valid_julian = _rpythonic_function_(		"g_date_valid_julian", ctypes.c_int, [
	("julian_date",		ctypes.c_uint),] )

g_date_valid_dmy = _rpythonic_function_(		"g_date_valid_dmy", ctypes.c_int, [
	("day",		ctypes.c_ubyte),
	("month",		ctypes.c_int),
	("year",		ctypes.c_ushort),] )

g_date_get_weekday = _rpythonic_function_(		"g_date_get_weekday", ctypes.c_int, [
	("date",		ctypes.POINTER(_GDate)),] )

g_date_get_month = _rpythonic_function_(		"g_date_get_month", ctypes.c_int, [
	("date",		ctypes.POINTER(_GDate)),] )

g_date_get_year = _rpythonic_function_(		"g_date_get_year", ctypes.c_ushort, [
	("date",		ctypes.POINTER(_GDate)),] )

g_date_get_day = _rpythonic_function_(		"g_date_get_day", ctypes.c_ubyte, [
	("date",		ctypes.POINTER(_GDate)),] )

g_date_get_julian = _rpythonic_function_(		"g_date_get_julian", ctypes.c_uint, [
	("date",		ctypes.POINTER(_GDate)),] )

g_date_get_day_of_year = _rpythonic_function_(		"g_date_get_day_of_year", ctypes.c_uint, [
	("date",		ctypes.POINTER(_GDate)),] )

g_date_get_monday_week_of_year = _rpythonic_function_(		"g_date_get_monday_week_of_year", ctypes.c_uint, [
	("date",		ctypes.POINTER(_GDate)),] )

g_date_get_sunday_week_of_year = _rpythonic_function_(		"g_date_get_sunday_week_of_year", ctypes.c_uint, [
	("date",		ctypes.POINTER(_GDate)),] )

g_date_get_iso8601_week_of_year = _rpythonic_function_(		"g_date_get_iso8601_week_of_year", ctypes.c_uint, [
	("date",		ctypes.POINTER(_GDate)),] )

g_date_clear = _rpythonic_function_(		"g_date_clear", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("n_dates",		ctypes.c_uint),] )

g_date_set_parse = _rpythonic_function_(		"g_date_set_parse", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

g_date_set_time_t = _rpythonic_function_(		"g_date_set_time_t", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("timet",		ctypes.c_int64),] )

g_date_set_time_val = _rpythonic_function_(		"g_date_set_time_val", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("timeval",		ctypes.POINTER(_GTimeVal)),] )

g_date_set_time = _rpythonic_function_(		"g_date_set_time", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("time_",		ctypes.c_int),] )

g_date_set_month = _rpythonic_function_(		"g_date_set_month", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("month",		ctypes.c_int),] )

g_date_set_day = _rpythonic_function_(		"g_date_set_day", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("day",		ctypes.c_ubyte),] )

g_date_set_year = _rpythonic_function_(		"g_date_set_year", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("year",		ctypes.c_ushort),] )

g_date_set_dmy = _rpythonic_function_(		"g_date_set_dmy", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("day",		ctypes.c_ubyte),
	("month",		ctypes.c_int),
	("y",		ctypes.c_ushort),] )

g_date_set_julian = _rpythonic_function_(		"g_date_set_julian", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("julian_date",		ctypes.c_uint),] )

g_date_is_first_of_month = _rpythonic_function_(		"g_date_is_first_of_month", ctypes.c_int, [
	("date",		ctypes.POINTER(_GDate)),] )

g_date_is_last_of_month = _rpythonic_function_(		"g_date_is_last_of_month", ctypes.c_int, [
	("date",		ctypes.POINTER(_GDate)),] )

g_date_add_days = _rpythonic_function_(		"g_date_add_days", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("n_days",		ctypes.c_uint),] )

g_date_subtract_days = _rpythonic_function_(		"g_date_subtract_days", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("n_days",		ctypes.c_uint),] )

g_date_add_months = _rpythonic_function_(		"g_date_add_months", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("n_months",		ctypes.c_uint),] )

g_date_subtract_months = _rpythonic_function_(		"g_date_subtract_months", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("n_months",		ctypes.c_uint),] )

g_date_add_years = _rpythonic_function_(		"g_date_add_years", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("n_years",		ctypes.c_uint),] )

g_date_subtract_years = _rpythonic_function_(		"g_date_subtract_years", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("n_years",		ctypes.c_uint),] )

g_date_is_leap_year = _rpythonic_function_(		"g_date_is_leap_year", ctypes.c_int, [
	("year",		ctypes.c_ushort),] )

g_date_get_days_in_month = _rpythonic_function_(		"g_date_get_days_in_month", ctypes.c_ubyte, [
	("month",		ctypes.c_int),
	("year",		ctypes.c_ushort),] )

g_date_get_monday_weeks_in_year = _rpythonic_function_(		"g_date_get_monday_weeks_in_year", ctypes.c_ubyte, [
	("year",		ctypes.c_ushort),] )

g_date_get_sunday_weeks_in_year = _rpythonic_function_(		"g_date_get_sunday_weeks_in_year", ctypes.c_ubyte, [
	("year",		ctypes.c_ushort),] )

g_date_days_between = _rpythonic_function_(		"g_date_days_between", ctypes.c_int, [
	("date1",		ctypes.POINTER(_GDate)),
	("date2",		ctypes.POINTER(_GDate)),] )

g_date_compare = _rpythonic_function_(		"g_date_compare", ctypes.c_int, [
	("lhs",		ctypes.POINTER(_GDate)),
	("rhs",		ctypes.POINTER(_GDate)),] )

g_date_to_struct_tm = _rpythonic_function_(		"g_date_to_struct_tm", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("tm",		ctypes.POINTER(tm)),] )

g_date_clamp = _rpythonic_function_(		"g_date_clamp", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("min_date",		ctypes.POINTER(_GDate)),
	("max_date",		ctypes.POINTER(_GDate)),] )

g_date_order = _rpythonic_function_(		"g_date_order", ctypes.c_void_p, [
	("date1",		ctypes.POINTER(_GDate)),
	("date2",		ctypes.POINTER(_GDate)),] )

g_date_strftime = _rpythonic_function_(		"g_date_strftime", ctypes.c_uint, [
	("s",		ctypes.POINTER(ctypes.c_char)),
	("slen",		ctypes.c_uint),
	("format",		ctypes.POINTER(ctypes.c_char)),
	("date",		ctypes.POINTER(_GDate)),] )

g_time_zone_new = _rpythonic_function_(		"g_time_zone_new", ctypes.POINTER(_GTimeZone), [
	("identifier",		ctypes.POINTER(ctypes.c_char)),] )

g_time_zone_new_utc = _rpythonic_function_(		"g_time_zone_new_utc", ctypes.POINTER(_GTimeZone), [] )

g_time_zone_new_local = _rpythonic_function_(		"g_time_zone_new_local", ctypes.POINTER(_GTimeZone), [] )

g_time_zone_ref = _rpythonic_function_(		"g_time_zone_ref", ctypes.POINTER(_GTimeZone), [
	("tz",		ctypes.POINTER(_GTimeZone)),] )

g_time_zone_unref = _rpythonic_function_(		"g_time_zone_unref", ctypes.c_void_p, [
	("tz",		ctypes.POINTER(_GTimeZone)),] )

g_time_zone_find_interval = _rpythonic_function_(		"g_time_zone_find_interval", ctypes.c_int, [
	("tz",		ctypes.POINTER(_GTimeZone)),
	("C_type",		ctypes.c_int),
	("time_",		ctypes.c_longlong),] )

g_time_zone_adjust_time = _rpythonic_function_(		"g_time_zone_adjust_time", ctypes.c_int, [
	("tz",		ctypes.POINTER(_GTimeZone)),
	("C_type",		ctypes.c_int),
	("time_",		ctypes.POINTER(ctypes.c_longlong)),] )

g_time_zone_get_abbreviation = _rpythonic_function_(		"g_time_zone_get_abbreviation", ctypes.POINTER(ctypes.c_char), [
	("tz",		ctypes.POINTER(_GTimeZone)),
	("interval",		ctypes.c_int),] )

g_time_zone_get_offset = _rpythonic_function_(		"g_time_zone_get_offset", ctypes.c_int, [
	("tz",		ctypes.POINTER(_GTimeZone)),
	("interval",		ctypes.c_int),] )

g_time_zone_is_dst = _rpythonic_function_(		"g_time_zone_is_dst", ctypes.c_int, [
	("tz",		ctypes.POINTER(_GTimeZone)),
	("interval",		ctypes.c_int),] )

g_date_time_unref = _rpythonic_function_(		"g_date_time_unref", ctypes.c_void_p, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_ref = _rpythonic_function_(		"g_date_time_ref", ctypes.POINTER(_GDateTime), [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_new_now = _rpythonic_function_(		"g_date_time_new_now", ctypes.POINTER(_GDateTime), [
	("tz",		ctypes.POINTER(_GTimeZone)),] )

g_date_time_new_now_local = _rpythonic_function_(		"g_date_time_new_now_local", ctypes.POINTER(_GDateTime), [] )

g_date_time_new_now_utc = _rpythonic_function_(		"g_date_time_new_now_utc", ctypes.POINTER(_GDateTime), [] )

g_date_time_new_from_unix_local = _rpythonic_function_(		"g_date_time_new_from_unix_local", ctypes.POINTER(_GDateTime), [
	("t",		ctypes.c_longlong),] )

g_date_time_new_from_unix_utc = _rpythonic_function_(		"g_date_time_new_from_unix_utc", ctypes.POINTER(_GDateTime), [
	("t",		ctypes.c_longlong),] )

g_date_time_new_from_timeval_local = _rpythonic_function_(		"g_date_time_new_from_timeval_local", ctypes.POINTER(_GDateTime), [
	("tv",		ctypes.POINTER(_GTimeVal)),] )

g_date_time_new_from_timeval_utc = _rpythonic_function_(		"g_date_time_new_from_timeval_utc", ctypes.POINTER(_GDateTime), [
	("tv",		ctypes.POINTER(_GTimeVal)),] )

g_date_time_new = _rpythonic_function_(		"g_date_time_new", ctypes.POINTER(_GDateTime), [
	("tz",		ctypes.POINTER(_GTimeZone)),
	("year",		ctypes.c_int),
	("month",		ctypes.c_int),
	("day",		ctypes.c_int),
	("hour",		ctypes.c_int),
	("minute",		ctypes.c_int),
	("seconds",		ctypes.c_double),] )

g_date_time_new_local = _rpythonic_function_(		"g_date_time_new_local", ctypes.POINTER(_GDateTime), [
	("year",		ctypes.c_int),
	("month",		ctypes.c_int),
	("day",		ctypes.c_int),
	("hour",		ctypes.c_int),
	("minute",		ctypes.c_int),
	("seconds",		ctypes.c_double),] )

g_date_time_new_utc = _rpythonic_function_(		"g_date_time_new_utc", ctypes.POINTER(_GDateTime), [
	("year",		ctypes.c_int),
	("month",		ctypes.c_int),
	("day",		ctypes.c_int),
	("hour",		ctypes.c_int),
	("minute",		ctypes.c_int),
	("seconds",		ctypes.c_double),] )

g_date_time_add = _rpythonic_function_(		"g_date_time_add", ctypes.POINTER(_GDateTime), [
	("datetime",		ctypes.POINTER(_GDateTime)),
	("timespan",		ctypes.c_longlong),] )

g_date_time_add_years = _rpythonic_function_(		"g_date_time_add_years", ctypes.POINTER(_GDateTime), [
	("datetime",		ctypes.POINTER(_GDateTime)),
	("years",		ctypes.c_int),] )

g_date_time_add_months = _rpythonic_function_(		"g_date_time_add_months", ctypes.POINTER(_GDateTime), [
	("datetime",		ctypes.POINTER(_GDateTime)),
	("months",		ctypes.c_int),] )

g_date_time_add_weeks = _rpythonic_function_(		"g_date_time_add_weeks", ctypes.POINTER(_GDateTime), [
	("datetime",		ctypes.POINTER(_GDateTime)),
	("weeks",		ctypes.c_int),] )

g_date_time_add_days = _rpythonic_function_(		"g_date_time_add_days", ctypes.POINTER(_GDateTime), [
	("datetime",		ctypes.POINTER(_GDateTime)),
	("days",		ctypes.c_int),] )

g_date_time_add_hours = _rpythonic_function_(		"g_date_time_add_hours", ctypes.POINTER(_GDateTime), [
	("datetime",		ctypes.POINTER(_GDateTime)),
	("hours",		ctypes.c_int),] )

g_date_time_add_minutes = _rpythonic_function_(		"g_date_time_add_minutes", ctypes.POINTER(_GDateTime), [
	("datetime",		ctypes.POINTER(_GDateTime)),
	("minutes",		ctypes.c_int),] )

g_date_time_add_seconds = _rpythonic_function_(		"g_date_time_add_seconds", ctypes.POINTER(_GDateTime), [
	("datetime",		ctypes.POINTER(_GDateTime)),
	("seconds",		ctypes.c_double),] )

g_date_time_add_full = _rpythonic_function_(		"g_date_time_add_full", ctypes.POINTER(_GDateTime), [
	("datetime",		ctypes.POINTER(_GDateTime)),
	("years",		ctypes.c_int),
	("months",		ctypes.c_int),
	("days",		ctypes.c_int),
	("hours",		ctypes.c_int),
	("minutes",		ctypes.c_int),
	("seconds",		ctypes.c_double),] )

g_date_time_difference = _rpythonic_function_(		"g_date_time_difference", ctypes.c_longlong, [
	("end",		ctypes.POINTER(_GDateTime)),
	("begin",		ctypes.POINTER(_GDateTime)),] )

g_date_time_compare = _rpythonic_function_(		"g_date_time_compare", ctypes.c_int, [
	("dt1",		ctypes.POINTER(ctypes.c_void_p)),
	("dt2",		ctypes.POINTER(ctypes.c_void_p)),] )

g_date_time_hash = _rpythonic_function_(		"g_date_time_hash", ctypes.c_uint, [("datetime",		ctypes.c_void_p)] )

g_date_time_equal = _rpythonic_function_(		"g_date_time_equal", ctypes.c_int, [
	("dt1",		ctypes.POINTER(ctypes.c_void_p)),
	("dt2",		ctypes.POINTER(ctypes.c_void_p)),] )

g_date_time_get_ymd = _rpythonic_function_(		"g_date_time_get_ymd", ctypes.c_void_p, [
	("datetime",		ctypes.POINTER(_GDateTime)),
	("year",		ctypes.POINTER(ctypes.c_int)),
	("month",		ctypes.POINTER(ctypes.c_int)),
	("day",		ctypes.POINTER(ctypes.c_int)),] )

g_date_time_get_year = _rpythonic_function_(		"g_date_time_get_year", ctypes.c_int, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_get_month = _rpythonic_function_(		"g_date_time_get_month", ctypes.c_int, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_get_day_of_month = _rpythonic_function_(		"g_date_time_get_day_of_month", ctypes.c_int, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_get_week_numbering_year = _rpythonic_function_(		"g_date_time_get_week_numbering_year", ctypes.c_int, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_get_week_of_year = _rpythonic_function_(		"g_date_time_get_week_of_year", ctypes.c_int, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_get_day_of_week = _rpythonic_function_(		"g_date_time_get_day_of_week", ctypes.c_int, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_get_day_of_year = _rpythonic_function_(		"g_date_time_get_day_of_year", ctypes.c_int, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_get_hour = _rpythonic_function_(		"g_date_time_get_hour", ctypes.c_int, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_get_minute = _rpythonic_function_(		"g_date_time_get_minute", ctypes.c_int, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_get_second = _rpythonic_function_(		"g_date_time_get_second", ctypes.c_int, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_get_microsecond = _rpythonic_function_(		"g_date_time_get_microsecond", ctypes.c_int, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_get_seconds = _rpythonic_function_(		"g_date_time_get_seconds", ctypes.c_double, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_to_unix = _rpythonic_function_(		"g_date_time_to_unix", ctypes.c_longlong, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_to_timeval = _rpythonic_function_(		"g_date_time_to_timeval", ctypes.c_int, [
	("datetime",		ctypes.POINTER(_GDateTime)),
	("tv",		ctypes.POINTER(_GTimeVal)),] )

g_date_time_get_utc_offset = _rpythonic_function_(		"g_date_time_get_utc_offset", ctypes.c_longlong, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_get_timezone_abbreviation = _rpythonic_function_(		"g_date_time_get_timezone_abbreviation", ctypes.POINTER(ctypes.c_char), [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_is_daylight_savings = _rpythonic_function_(		"g_date_time_is_daylight_savings", ctypes.c_int, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_to_timezone = _rpythonic_function_(		"g_date_time_to_timezone", ctypes.POINTER(_GDateTime), [
	("datetime",		ctypes.POINTER(_GDateTime)),
	("tz",		ctypes.POINTER(_GTimeZone)),] )

g_date_time_to_local = _rpythonic_function_(		"g_date_time_to_local", ctypes.POINTER(_GDateTime), [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_to_utc = _rpythonic_function_(		"g_date_time_to_utc", ctypes.POINTER(_GDateTime), [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_format = _rpythonic_function_(		"g_date_time_format", ctypes.POINTER(ctypes.c_char), [
	("datetime",		ctypes.POINTER(_GDateTime)),
	("format",		ctypes.POINTER(ctypes.c_char)),] )

g_dir_open = _rpythonic_function_(		"g_dir_open", ctypes.POINTER(_GDir), [
	("path",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_uint),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dir_read_name = _rpythonic_function_(		"g_dir_read_name", ctypes.POINTER(ctypes.c_char), [
	("dir",		ctypes.POINTER(_GDir)),] )

g_dir_rewind = _rpythonic_function_(		"g_dir_rewind", ctypes.c_void_p, [
	("dir",		ctypes.POINTER(_GDir)),] )

g_dir_close = _rpythonic_function_(		"g_dir_close", ctypes.c_void_p, [
	("dir",		ctypes.POINTER(_GDir)),] )

g_file_error_quark = _rpythonic_function_(		"g_file_error_quark", ctypes.c_uint, [] )

g_file_error_from_errno = _rpythonic_function_(		"g_file_error_from_errno", ctypes.c_int, [
	("err_no",		ctypes.c_int),] )

g_file_test = _rpythonic_function_(		"g_file_test", ctypes.c_int, [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("test",		ctypes.c_int),] )

g_file_get_contents = _rpythonic_function_(		"g_file_get_contents", ctypes.c_int, [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("contents",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("length",		ctypes.POINTER(ctypes.c_uint)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_set_contents = _rpythonic_function_(		"g_file_set_contents", ctypes.c_int, [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("contents",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_read_link = _rpythonic_function_(		"g_file_read_link", ctypes.POINTER(ctypes.c_char), [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_mkdtemp = _rpythonic_function_(		"g_mkdtemp", ctypes.POINTER(ctypes.c_char), [
	("tmpl",		ctypes.POINTER(ctypes.c_char)),] )

g_mkdtemp_full = _rpythonic_function_(		"g_mkdtemp_full", ctypes.POINTER(ctypes.c_char), [
	("tmpl",		ctypes.POINTER(ctypes.c_char)),
	("mode",		ctypes.c_int),] )

g_mkstemp = _rpythonic_function_(		"g_mkstemp", ctypes.c_int, [
	("tmpl",		ctypes.POINTER(ctypes.c_char)),] )

g_mkstemp_full = _rpythonic_function_(		"g_mkstemp_full", ctypes.c_int, [
	("tmpl",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("mode",		ctypes.c_int),] )

g_file_open_tmp = _rpythonic_function_(		"g_file_open_tmp", ctypes.c_int, [
	("tmpl",		ctypes.POINTER(ctypes.c_char)),
	("name_used",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dir_make_tmp = _rpythonic_function_(		"g_dir_make_tmp", ctypes.POINTER(ctypes.c_char), [
	("tmpl",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_format_size_full = _rpythonic_function_(		"g_format_size_full", ctypes.POINTER(ctypes.c_char), [
	("size",		ctypes.c_ulonglong),
	("flags",		ctypes.c_int),] )

g_format_size = _rpythonic_function_(		"g_format_size", ctypes.POINTER(ctypes.c_char), [
	("size",		ctypes.c_ulonglong),] )

g_format_size_for_display = _rpythonic_function_(		"g_format_size_for_display", ctypes.POINTER(ctypes.c_char), [
	("size",		ctypes.c_longlong),] )

g_build_pathv = _rpythonic_function_(		"g_build_pathv", ctypes.POINTER(ctypes.c_char), [
	("separator",		ctypes.POINTER(ctypes.c_char)),
	("args",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_build_filenamev = _rpythonic_function_(		"g_build_filenamev", ctypes.POINTER(ctypes.c_char), [
	("args",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_mkdir_with_parents = _rpythonic_function_(		"g_mkdir_with_parents", ctypes.c_int, [
	("pathname",		ctypes.POINTER(ctypes.c_char)),
	("mode",		ctypes.c_int),] )

GHRFunc = _rpythonic_function_(		"GHRFunc", ctypes.c_int, [
	("key",		ctypes.POINTER(ctypes.c_void_p)),
	("value",		ctypes.POINTER(ctypes.c_void_p)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hash_table_new_full = _rpythonic_function_(		"g_hash_table_new_full", ctypes.POINTER(_GHashTable), [
	("hash_func",		ctypes.CFUNCTYPE(ctypes.c_uint, )),
	("key_equal_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("key_destroy_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("value_destroy_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_hash_table_new = _rpythonic_function_(		"g_hash_table_new", ctypes.POINTER(_GHashTable), [
	("hash_func",		ctypes.CFUNCTYPE(ctypes.c_uint, )),
	("key_equal_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_hash_table_destroy = _rpythonic_function_(		"g_hash_table_destroy", ctypes.c_void_p, [
	("hash_table",		ctypes.POINTER(_GHashTable)),] )

g_hash_table_insert = _rpythonic_function_(		"g_hash_table_insert", ctypes.c_void_p, [
	("hash_table",		ctypes.POINTER(_GHashTable)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),
	("value",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hash_table_replace = _rpythonic_function_(		"g_hash_table_replace", ctypes.c_void_p, [
	("hash_table",		ctypes.POINTER(_GHashTable)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),
	("value",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hash_table_remove = _rpythonic_function_(		"g_hash_table_remove", ctypes.c_int, [
	("hash_table",		ctypes.POINTER(_GHashTable)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hash_table_remove_all = _rpythonic_function_(		"g_hash_table_remove_all", ctypes.c_void_p, [
	("hash_table",		ctypes.POINTER(_GHashTable)),] )

g_hash_table_steal = _rpythonic_function_(		"g_hash_table_steal", ctypes.c_int, [
	("hash_table",		ctypes.POINTER(_GHashTable)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hash_table_steal_all = _rpythonic_function_(		"g_hash_table_steal_all", ctypes.c_void_p, [
	("hash_table",		ctypes.POINTER(_GHashTable)),] )

g_hash_table_lookup = _rpythonic_function_(		"g_hash_table_lookup", ctypes.POINTER(ctypes.c_void_p), [
	("hash_table",		ctypes.POINTER(_GHashTable)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hash_table_lookup_extended = _rpythonic_function_(		"g_hash_table_lookup_extended", ctypes.c_int, [
	("hash_table",		ctypes.POINTER(_GHashTable)),
	("lookup_key",		ctypes.POINTER(ctypes.c_void_p)),
	("orig_key",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("value",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

g_hash_table_foreach = _rpythonic_function_(		"g_hash_table_foreach", ctypes.c_void_p, [
	("hash_table",		ctypes.POINTER(_GHashTable)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hash_table_find = _rpythonic_function_(		"g_hash_table_find", ctypes.POINTER(ctypes.c_void_p), [
	("hash_table",		ctypes.POINTER(_GHashTable)),
	("predicate",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hash_table_foreach_remove = _rpythonic_function_(		"g_hash_table_foreach_remove", ctypes.c_uint, [
	("hash_table",		ctypes.POINTER(_GHashTable)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hash_table_foreach_steal = _rpythonic_function_(		"g_hash_table_foreach_steal", ctypes.c_uint, [
	("hash_table",		ctypes.POINTER(_GHashTable)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hash_table_size = _rpythonic_function_(		"g_hash_table_size", ctypes.c_uint, [
	("hash_table",		ctypes.POINTER(_GHashTable)),] )

g_hash_table_get_keys = _rpythonic_function_(		"g_hash_table_get_keys", ctypes.POINTER(_GList), [
	("hash_table",		ctypes.POINTER(_GHashTable)),] )

g_hash_table_get_values = _rpythonic_function_(		"g_hash_table_get_values", ctypes.POINTER(_GList), [
	("hash_table",		ctypes.POINTER(_GHashTable)),] )

g_hash_table_iter_init = _rpythonic_function_(		"g_hash_table_iter_init", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(_GHashTableIter)),
	("hash_table",		ctypes.POINTER(_GHashTable)),] )

g_hash_table_iter_next = _rpythonic_function_(		"g_hash_table_iter_next", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GHashTableIter)),
	("key",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("value",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

g_hash_table_iter_get_hash_table = _rpythonic_function_(		"g_hash_table_iter_get_hash_table", ctypes.POINTER(_GHashTable), [
	("iter",		ctypes.POINTER(_GHashTableIter)),] )

g_hash_table_iter_remove = _rpythonic_function_(		"g_hash_table_iter_remove", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(_GHashTableIter)),] )

g_hash_table_iter_replace = _rpythonic_function_(		"g_hash_table_iter_replace", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(_GHashTableIter)),
	("value",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hash_table_iter_steal = _rpythonic_function_(		"g_hash_table_iter_steal", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(_GHashTableIter)),] )

g_hash_table_ref = _rpythonic_function_(		"g_hash_table_ref", ctypes.POINTER(_GHashTable), [
	("hash_table",		ctypes.POINTER(_GHashTable)),] )

g_hash_table_unref = _rpythonic_function_(		"g_hash_table_unref", ctypes.c_void_p, [
	("hash_table",		ctypes.POINTER(_GHashTable)),] )

g_str_equal = _rpythonic_function_(		"g_str_equal", ctypes.c_int, [
	("v1",		ctypes.POINTER(ctypes.c_void_p)),
	("v2",		ctypes.POINTER(ctypes.c_void_p)),] )

g_str_hash = _rpythonic_function_(		"g_str_hash", ctypes.c_uint, [("v",		ctypes.c_void_p)] )

g_int_equal = _rpythonic_function_(		"g_int_equal", ctypes.c_int, [
	("v1",		ctypes.POINTER(ctypes.c_void_p)),
	("v2",		ctypes.POINTER(ctypes.c_void_p)),] )

g_int_hash = _rpythonic_function_(		"g_int_hash", ctypes.c_uint, [("v",		ctypes.c_void_p)] )

g_int64_equal = _rpythonic_function_(		"g_int64_equal", ctypes.c_int, [
	("v1",		ctypes.POINTER(ctypes.c_void_p)),
	("v2",		ctypes.POINTER(ctypes.c_void_p)),] )

g_int64_hash = _rpythonic_function_(		"g_int64_hash", ctypes.c_uint, [("v",		ctypes.c_void_p)] )

g_double_equal = _rpythonic_function_(		"g_double_equal", ctypes.c_int, [
	("v1",		ctypes.POINTER(ctypes.c_void_p)),
	("v2",		ctypes.POINTER(ctypes.c_void_p)),] )

g_double_hash = _rpythonic_function_(		"g_double_hash", ctypes.c_uint, [("v",		ctypes.c_void_p)] )

g_direct_hash = _rpythonic_function_(		"g_direct_hash", ctypes.c_uint, [("v",		ctypes.c_void_p)] )

g_direct_equal = _rpythonic_function_(		"g_direct_equal", ctypes.c_int, [
	("v1",		ctypes.POINTER(ctypes.c_void_p)),
	("v2",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hmac_new = _rpythonic_function_(		"g_hmac_new", ctypes.POINTER(_GHmac), [
	("digest_type",		ctypes.c_int),
	("key",		ctypes.POINTER(ctypes.c_ubyte)),
	("key_len",		ctypes.c_uint),] )

g_hmac_copy = _rpythonic_function_(		"g_hmac_copy", ctypes.POINTER(_GHmac), [
	("hmac",		ctypes.POINTER(_GHmac)),] )

g_hmac_ref = _rpythonic_function_(		"g_hmac_ref", ctypes.POINTER(_GHmac), [
	("hmac",		ctypes.POINTER(_GHmac)),] )

g_hmac_unref = _rpythonic_function_(		"g_hmac_unref", ctypes.c_void_p, [
	("hmac",		ctypes.POINTER(_GHmac)),] )

g_hmac_update = _rpythonic_function_(		"g_hmac_update", ctypes.c_void_p, [
	("hmac",		ctypes.POINTER(_GHmac)),
	("data",		ctypes.POINTER(ctypes.c_ubyte)),
	("length",		ctypes.c_int),] )

g_hmac_get_string = _rpythonic_function_(		"g_hmac_get_string", ctypes.POINTER(ctypes.c_char), [
	("hmac",		ctypes.POINTER(_GHmac)),] )

g_hmac_get_digest = _rpythonic_function_(		"g_hmac_get_digest", ctypes.c_void_p, [
	("hmac",		ctypes.POINTER(_GHmac)),
	("buffer",		ctypes.POINTER(ctypes.c_ubyte)),
	("digest_len",		ctypes.POINTER(ctypes.c_uint)),] )

g_compute_hmac_for_data = _rpythonic_function_(		"g_compute_hmac_for_data", ctypes.POINTER(ctypes.c_char), [
	("digest_type",		ctypes.c_int),
	("key",		ctypes.POINTER(ctypes.c_ubyte)),
	("key_len",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_ubyte)),
	("length",		ctypes.c_uint),] )

g_compute_hmac_for_string = _rpythonic_function_(		"g_compute_hmac_for_string", ctypes.POINTER(ctypes.c_char), [
	("digest_type",		ctypes.c_int),
	("key",		ctypes.POINTER(ctypes.c_ubyte)),
	("key_len",		ctypes.c_uint),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),] )

GHookCompareFunc = _rpythonic_function_(		"GHookCompareFunc", ctypes.c_int, [
	("new_hook",		ctypes.POINTER(_GHook)),
	("sibling",		ctypes.POINTER(_GHook)),] )

GHookFindFunc = _rpythonic_function_(		"GHookFindFunc", ctypes.c_int, [
	("hook",		ctypes.POINTER(_GHook)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

GHookMarshaller = _rpythonic_function_(		"GHookMarshaller", ctypes.c_void_p, [
	("hook",		ctypes.POINTER(_GHook)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GHookCheckMarshaller = _rpythonic_function_(		"GHookCheckMarshaller", ctypes.c_int, [
	("hook",		ctypes.POINTER(_GHook)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GHookFunc = _rpythonic_function_(		"GHookFunc", ctypes.c_void_p, [("data",		ctypes.c_void_p)] )

GHookCheckFunc = _rpythonic_function_(		"GHookCheckFunc", ctypes.c_int, [("data",		ctypes.c_void_p)] )

GHookFinalizeFunc = _rpythonic_function_(		"GHookFinalizeFunc", ctypes.c_void_p, [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("hook",		ctypes.POINTER(_GHook)),] )

g_hook_list_init = _rpythonic_function_(		"g_hook_list_init", ctypes.c_void_p, [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("hook_size",		ctypes.c_uint),] )

g_hook_list_clear = _rpythonic_function_(		"g_hook_list_clear", ctypes.c_void_p, [
	("hook_list",		ctypes.POINTER(_GHookList)),] )

g_hook_alloc = _rpythonic_function_(		"g_hook_alloc", ctypes.POINTER(_GHook), [
	("hook_list",		ctypes.POINTER(_GHookList)),] )

g_hook_free = _rpythonic_function_(		"g_hook_free", ctypes.c_void_p, [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("hook",		ctypes.POINTER(_GHook)),] )

g_hook_ref = _rpythonic_function_(		"g_hook_ref", ctypes.POINTER(_GHook), [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("hook",		ctypes.POINTER(_GHook)),] )

g_hook_unref = _rpythonic_function_(		"g_hook_unref", ctypes.c_void_p, [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("hook",		ctypes.POINTER(_GHook)),] )

g_hook_destroy = _rpythonic_function_(		"g_hook_destroy", ctypes.c_int, [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("hook_id",		ctypes.c_ulong),] )

g_hook_destroy_link = _rpythonic_function_(		"g_hook_destroy_link", ctypes.c_void_p, [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("hook",		ctypes.POINTER(_GHook)),] )

g_hook_prepend = _rpythonic_function_(		"g_hook_prepend", ctypes.c_void_p, [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("hook",		ctypes.POINTER(_GHook)),] )

g_hook_insert_before = _rpythonic_function_(		"g_hook_insert_before", ctypes.c_void_p, [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("sibling",		ctypes.POINTER(_GHook)),
	("hook",		ctypes.POINTER(_GHook)),] )

g_hook_insert_sorted = _rpythonic_function_(		"g_hook_insert_sorted", ctypes.c_void_p, [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("hook",		ctypes.POINTER(_GHook)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GHook),ctypes.POINTER(_GHook),)),] )

g_hook_get = _rpythonic_function_(		"g_hook_get", ctypes.POINTER(_GHook), [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("hook_id",		ctypes.c_ulong),] )

g_hook_find = _rpythonic_function_(		"g_hook_find", ctypes.POINTER(_GHook), [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("need_valids",		ctypes.c_int),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GHook),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hook_find_data = _rpythonic_function_(		"g_hook_find_data", ctypes.POINTER(_GHook), [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("need_valids",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hook_find_func = _rpythonic_function_(		"g_hook_find_func", ctypes.POINTER(_GHook), [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("need_valids",		ctypes.c_int),
	("func",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hook_find_func_data = _rpythonic_function_(		"g_hook_find_func_data", ctypes.POINTER(_GHook), [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("need_valids",		ctypes.c_int),
	("func",		ctypes.POINTER(ctypes.c_void_p)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hook_first_valid = _rpythonic_function_(		"g_hook_first_valid", ctypes.POINTER(_GHook), [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("may_be_in_call",		ctypes.c_int),] )

g_hook_next_valid = _rpythonic_function_(		"g_hook_next_valid", ctypes.POINTER(_GHook), [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("hook",		ctypes.POINTER(_GHook)),
	("may_be_in_call",		ctypes.c_int),] )

g_hook_compare_ids = _rpythonic_function_(		"g_hook_compare_ids", ctypes.c_int, [
	("new_hook",		ctypes.POINTER(_GHook)),
	("sibling",		ctypes.POINTER(_GHook)),] )

g_hook_list_invoke = _rpythonic_function_(		"g_hook_list_invoke", ctypes.c_void_p, [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("may_recurse",		ctypes.c_int),] )

g_hook_list_invoke_check = _rpythonic_function_(		"g_hook_list_invoke_check", ctypes.c_void_p, [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("may_recurse",		ctypes.c_int),] )

g_hook_list_marshal = _rpythonic_function_(		"g_hook_list_marshal", ctypes.c_void_p, [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("may_recurse",		ctypes.c_int),
	("marshaller",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GHook),ctypes.POINTER(ctypes.c_void_p),)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hook_list_marshal_check = _rpythonic_function_(		"g_hook_list_marshal_check", ctypes.c_void_p, [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("may_recurse",		ctypes.c_int),
	("marshaller",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GHook),ctypes.POINTER(ctypes.c_void_p),)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hostname_is_non_ascii = _rpythonic_function_(		"g_hostname_is_non_ascii", ctypes.c_int, [
	("hostname",		ctypes.POINTER(ctypes.c_char)),] )

g_hostname_is_ascii_encoded = _rpythonic_function_(		"g_hostname_is_ascii_encoded", ctypes.c_int, [
	("hostname",		ctypes.POINTER(ctypes.c_char)),] )

g_hostname_is_ip_address = _rpythonic_function_(		"g_hostname_is_ip_address", ctypes.c_int, [
	("hostname",		ctypes.POINTER(ctypes.c_char)),] )

g_hostname_to_ascii = _rpythonic_function_(		"g_hostname_to_ascii", ctypes.POINTER(ctypes.c_char), [
	("hostname",		ctypes.POINTER(ctypes.c_char)),] )

g_hostname_to_unicode = _rpythonic_function_(		"g_hostname_to_unicode", ctypes.POINTER(ctypes.c_char), [
	("hostname",		ctypes.POINTER(ctypes.c_char)),] )

GPollFunc = _rpythonic_function_(		"GPollFunc", ctypes.c_int, [
	("ufds",		ctypes.POINTER(_GPollFD)),
	("nfsd",		ctypes.c_uint),
	("timeout_",		ctypes.c_int),] )

g_poll = _rpythonic_function_(		"g_poll", ctypes.c_int, [
	("fds",		ctypes.POINTER(_GPollFD)),
	("nfds",		ctypes.c_uint),
	("timeout",		ctypes.c_int),] )

g_slist_alloc = _rpythonic_function_(		"g_slist_alloc", ctypes.POINTER(_GSList), [] )

g_slist_free = _rpythonic_function_(		"g_slist_free", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GSList)),] )

g_slist_free_1 = _rpythonic_function_(		"g_slist_free_1", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GSList)),] )

g_slist_free_full = _rpythonic_function_(		"g_slist_free_full", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GSList)),
	("free_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_slist_append = _rpythonic_function_(		"g_slist_append", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_slist_prepend = _rpythonic_function_(		"g_slist_prepend", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_slist_insert = _rpythonic_function_(		"g_slist_insert", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("position",		ctypes.c_int),] )

g_slist_insert_sorted = _rpythonic_function_(		"g_slist_insert_sorted", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_slist_insert_sorted_with_data = _rpythonic_function_(		"g_slist_insert_sorted_with_data", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_slist_insert_before = _rpythonic_function_(		"g_slist_insert_before", ctypes.POINTER(_GSList), [
	("slist",		ctypes.POINTER(_GSList)),
	("sibling",		ctypes.POINTER(_GSList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_slist_concat = _rpythonic_function_(		"g_slist_concat", ctypes.POINTER(_GSList), [
	("list1",		ctypes.POINTER(_GSList)),
	("list2",		ctypes.POINTER(_GSList)),] )

g_slist_remove = _rpythonic_function_(		"g_slist_remove", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_slist_remove_all = _rpythonic_function_(		"g_slist_remove_all", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_slist_remove_link = _rpythonic_function_(		"g_slist_remove_link", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),
	("link_",		ctypes.POINTER(_GSList)),] )

g_slist_delete_link = _rpythonic_function_(		"g_slist_delete_link", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),
	("link_",		ctypes.POINTER(_GSList)),] )

g_slist_reverse = _rpythonic_function_(		"g_slist_reverse", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),] )

g_slist_copy = _rpythonic_function_(		"g_slist_copy", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),] )

g_slist_nth = _rpythonic_function_(		"g_slist_nth", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),
	("n",		ctypes.c_uint),] )

g_slist_find = _rpythonic_function_(		"g_slist_find", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_slist_find_custom = _rpythonic_function_(		"g_slist_find_custom", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_slist_position = _rpythonic_function_(		"g_slist_position", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GSList)),
	("llink",		ctypes.POINTER(_GSList)),] )

g_slist_index = _rpythonic_function_(		"g_slist_index", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GSList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_slist_last = _rpythonic_function_(		"g_slist_last", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),] )

g_slist_length = _rpythonic_function_(		"g_slist_length", ctypes.c_uint, [
	("C_list",		ctypes.POINTER(_GSList)),] )

g_slist_foreach = _rpythonic_function_(		"g_slist_foreach", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GSList)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_slist_sort = _rpythonic_function_(		"g_slist_sort", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),
	("compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_slist_sort_with_data = _rpythonic_function_(		"g_slist_sort_with_data", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),
	("compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_slist_nth_data = _rpythonic_function_(		"g_slist_nth_data", ctypes.POINTER(ctypes.c_void_p), [
	("C_list",		ctypes.POINTER(_GSList)),
	("n",		ctypes.c_uint),] )

g_slist_push_allocator = _rpythonic_function_(		"g_slist_push_allocator", ctypes.c_void_p, [("dummy",		ctypes.c_void_p)] )

g_slist_pop_allocator = _rpythonic_function_(		"g_slist_pop_allocator", ctypes.c_void_p, [] )

GSourceFunc = _rpythonic_function_(		"GSourceFunc", ctypes.c_int, [("user_data",		ctypes.c_void_p)] )

GChildWatchFunc = _rpythonic_function_(		"GChildWatchFunc", ctypes.c_void_p, [
	("pid",		ctypes.c_int),
	("status",		ctypes.c_int),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

ref = _rpythonic_function_(		"ref", ctypes.c_void_p, [("cb_data",		ctypes.c_void_p)] )

unref = _rpythonic_function_(		"unref", ctypes.c_void_p, [("cb_data",		ctypes.c_void_p)] )

GSourceDummyMarshal = _rpythonic_function_(		"GSourceDummyMarshal", ctypes.c_void_p, [] )

get = _rpythonic_function_(		"get", ctypes.c_void_p, [
	("cb_data",		ctypes.POINTER(ctypes.c_void_p)),
	("source",		ctypes.POINTER(_GSource)),
	("func",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.c_int, ))),
	("data",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

prepare = _rpythonic_function_(		"prepare", ctypes.c_int, [
	("source",		ctypes.POINTER(_GSource)),
	("timeout_",		ctypes.POINTER(ctypes.c_int)),] )

check = _rpythonic_function_(		"check", ctypes.c_int, [
	("source",		ctypes.POINTER(_GSource)),] )

dispatch = _rpythonic_function_(		"dispatch", ctypes.c_int, [
	("source",		ctypes.POINTER(_GSource)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

finalize = _rpythonic_function_(		"finalize", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),] )

g_main_context_new = _rpythonic_function_(		"g_main_context_new", ctypes.POINTER(_GMainContext), [] )

g_main_context_ref = _rpythonic_function_(		"g_main_context_ref", ctypes.POINTER(_GMainContext), [
	("context",		ctypes.POINTER(_GMainContext)),] )

g_main_context_unref = _rpythonic_function_(		"g_main_context_unref", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMainContext)),] )

g_main_context_default = _rpythonic_function_(		"g_main_context_default", ctypes.POINTER(_GMainContext), [] )

g_main_context_iteration = _rpythonic_function_(		"g_main_context_iteration", ctypes.c_int, [
	("context",		ctypes.POINTER(_GMainContext)),
	("may_block",		ctypes.c_int),] )

g_main_context_pending = _rpythonic_function_(		"g_main_context_pending", ctypes.c_int, [
	("context",		ctypes.POINTER(_GMainContext)),] )

g_main_context_find_source_by_id = _rpythonic_function_(		"g_main_context_find_source_by_id", ctypes.POINTER(_GSource), [
	("context",		ctypes.POINTER(_GMainContext)),
	("source_id",		ctypes.c_uint),] )

g_main_context_find_source_by_user_data = _rpythonic_function_(		"g_main_context_find_source_by_user_data", ctypes.POINTER(_GSource), [
	("context",		ctypes.POINTER(_GMainContext)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_main_context_find_source_by_funcs_user_data = _rpythonic_function_(		"g_main_context_find_source_by_funcs_user_data", ctypes.POINTER(_GSource), [
	("context",		ctypes.POINTER(_GMainContext)),
	("funcs",		ctypes.POINTER(_GSourceFuncs)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_main_context_wakeup = _rpythonic_function_(		"g_main_context_wakeup", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMainContext)),] )

g_main_context_acquire = _rpythonic_function_(		"g_main_context_acquire", ctypes.c_int, [
	("context",		ctypes.POINTER(_GMainContext)),] )

g_main_context_release = _rpythonic_function_(		"g_main_context_release", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMainContext)),] )

g_main_context_is_owner = _rpythonic_function_(		"g_main_context_is_owner", ctypes.c_int, [
	("context",		ctypes.POINTER(_GMainContext)),] )

g_main_context_wait = _rpythonic_function_(		"g_main_context_wait", ctypes.c_int, [
	("context",		ctypes.POINTER(_GMainContext)),
	("cond",		ctypes.POINTER(_GCond)),
	("mutex",		ctypes.POINTER(_GMutex)),] )

g_main_context_prepare = _rpythonic_function_(		"g_main_context_prepare", ctypes.c_int, [
	("context",		ctypes.POINTER(_GMainContext)),
	("priority",		ctypes.POINTER(ctypes.c_int)),] )

g_main_context_query = _rpythonic_function_(		"g_main_context_query", ctypes.c_int, [
	("context",		ctypes.POINTER(_GMainContext)),
	("max_priority",		ctypes.c_int),
	("timeout_",		ctypes.POINTER(ctypes.c_int)),
	("fds",		ctypes.POINTER(_GPollFD)),
	("n_fds",		ctypes.c_int),] )

g_main_context_check = _rpythonic_function_(		"g_main_context_check", ctypes.c_int, [
	("context",		ctypes.POINTER(_GMainContext)),
	("max_priority",		ctypes.c_int),
	("fds",		ctypes.POINTER(_GPollFD)),
	("n_fds",		ctypes.c_int),] )

g_main_context_dispatch = _rpythonic_function_(		"g_main_context_dispatch", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMainContext)),] )

g_main_context_set_poll_func = _rpythonic_function_(		"g_main_context_set_poll_func", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMainContext)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GPollFD),ctypes.c_uint,ctypes.c_int,)),] )

g_main_context_get_poll_func = _rpythonic_function_(		"g_main_context_get_poll_func", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GPollFD),ctypes.c_uint,ctypes.c_int,), [
	("context",		ctypes.POINTER(_GMainContext)),] )

g_main_context_add_poll = _rpythonic_function_(		"g_main_context_add_poll", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMainContext)),
	("fd",		ctypes.POINTER(_GPollFD)),
	("priority",		ctypes.c_int),] )

g_main_context_remove_poll = _rpythonic_function_(		"g_main_context_remove_poll", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMainContext)),
	("fd",		ctypes.POINTER(_GPollFD)),] )

g_main_depth = _rpythonic_function_(		"g_main_depth", ctypes.c_int, [] )

g_main_current_source = _rpythonic_function_(		"g_main_current_source", ctypes.POINTER(_GSource), [] )

g_main_context_push_thread_default = _rpythonic_function_(		"g_main_context_push_thread_default", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMainContext)),] )

g_main_context_pop_thread_default = _rpythonic_function_(		"g_main_context_pop_thread_default", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMainContext)),] )

g_main_context_get_thread_default = _rpythonic_function_(		"g_main_context_get_thread_default", ctypes.POINTER(_GMainContext), [] )

g_main_loop_new = _rpythonic_function_(		"g_main_loop_new", ctypes.POINTER(_GMainLoop), [
	("context",		ctypes.POINTER(_GMainContext)),
	("is_running",		ctypes.c_int),] )

g_main_loop_run = _rpythonic_function_(		"g_main_loop_run", ctypes.c_void_p, [
	("loop",		ctypes.POINTER(_GMainLoop)),] )

g_main_loop_quit = _rpythonic_function_(		"g_main_loop_quit", ctypes.c_void_p, [
	("loop",		ctypes.POINTER(_GMainLoop)),] )

g_main_loop_ref = _rpythonic_function_(		"g_main_loop_ref", ctypes.POINTER(_GMainLoop), [
	("loop",		ctypes.POINTER(_GMainLoop)),] )

g_main_loop_unref = _rpythonic_function_(		"g_main_loop_unref", ctypes.c_void_p, [
	("loop",		ctypes.POINTER(_GMainLoop)),] )

g_main_loop_is_running = _rpythonic_function_(		"g_main_loop_is_running", ctypes.c_int, [
	("loop",		ctypes.POINTER(_GMainLoop)),] )

g_main_loop_get_context = _rpythonic_function_(		"g_main_loop_get_context", ctypes.POINTER(_GMainContext), [
	("loop",		ctypes.POINTER(_GMainLoop)),] )

g_source_new = _rpythonic_function_(		"g_source_new", ctypes.POINTER(_GSource), [
	("source_funcs",		ctypes.POINTER(_GSourceFuncs)),
	("struct_size",		ctypes.c_uint),] )

g_source_ref = _rpythonic_function_(		"g_source_ref", ctypes.POINTER(_GSource), [
	("source",		ctypes.POINTER(_GSource)),] )

g_source_unref = _rpythonic_function_(		"g_source_unref", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),] )

g_source_attach = _rpythonic_function_(		"g_source_attach", ctypes.c_uint, [
	("source",		ctypes.POINTER(_GSource)),
	("context",		ctypes.POINTER(_GMainContext)),] )

g_source_destroy = _rpythonic_function_(		"g_source_destroy", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),] )

g_source_set_priority = _rpythonic_function_(		"g_source_set_priority", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),
	("priority",		ctypes.c_int),] )

g_source_get_priority = _rpythonic_function_(		"g_source_get_priority", ctypes.c_int, [
	("source",		ctypes.POINTER(_GSource)),] )

g_source_set_can_recurse = _rpythonic_function_(		"g_source_set_can_recurse", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),
	("can_recurse",		ctypes.c_int),] )

g_source_get_can_recurse = _rpythonic_function_(		"g_source_get_can_recurse", ctypes.c_int, [
	("source",		ctypes.POINTER(_GSource)),] )

g_source_get_id = _rpythonic_function_(		"g_source_get_id", ctypes.c_uint, [
	("source",		ctypes.POINTER(_GSource)),] )

g_source_get_context = _rpythonic_function_(		"g_source_get_context", ctypes.POINTER(_GMainContext), [
	("source",		ctypes.POINTER(_GSource)),] )

g_source_set_callback = _rpythonic_function_(		"g_source_set_callback", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_source_set_funcs = _rpythonic_function_(		"g_source_set_funcs", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),
	("funcs",		ctypes.POINTER(_GSourceFuncs)),] )

g_source_is_destroyed = _rpythonic_function_(		"g_source_is_destroyed", ctypes.c_int, [
	("source",		ctypes.POINTER(_GSource)),] )

g_source_set_name = _rpythonic_function_(		"g_source_set_name", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_source_get_name = _rpythonic_function_(		"g_source_get_name", ctypes.POINTER(ctypes.c_char), [
	("source",		ctypes.POINTER(_GSource)),] )

g_source_set_name_by_id = _rpythonic_function_(		"g_source_set_name_by_id", ctypes.c_void_p, [
	("tag",		ctypes.c_uint),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_source_set_callback_indirect = _rpythonic_function_(		"g_source_set_callback_indirect", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),
	("callback_funcs",		ctypes.POINTER(_GSourceCallbackFuncs)),] )

g_source_add_poll = _rpythonic_function_(		"g_source_add_poll", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),
	("fd",		ctypes.POINTER(_GPollFD)),] )

g_source_remove_poll = _rpythonic_function_(		"g_source_remove_poll", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),
	("fd",		ctypes.POINTER(_GPollFD)),] )

g_source_add_child_source = _rpythonic_function_(		"g_source_add_child_source", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),
	("child_source",		ctypes.POINTER(_GSource)),] )

g_source_remove_child_source = _rpythonic_function_(		"g_source_remove_child_source", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),
	("child_source",		ctypes.POINTER(_GSource)),] )

g_source_get_current_time = _rpythonic_function_(		"g_source_get_current_time", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),
	("timeval",		ctypes.POINTER(_GTimeVal)),] )

g_source_get_time = _rpythonic_function_(		"g_source_get_time", ctypes.c_longlong, [
	("source",		ctypes.POINTER(_GSource)),] )

g_idle_source_new = _rpythonic_function_(		"g_idle_source_new", ctypes.POINTER(_GSource), [] )

g_child_watch_source_new = _rpythonic_function_(		"g_child_watch_source_new", ctypes.POINTER(_GSource), [
	("pid",		ctypes.c_int),] )

g_timeout_source_new = _rpythonic_function_(		"g_timeout_source_new", ctypes.POINTER(_GSource), [
	("interval",		ctypes.c_uint),] )

g_timeout_source_new_seconds = _rpythonic_function_(		"g_timeout_source_new_seconds", ctypes.POINTER(_GSource), [
	("interval",		ctypes.c_uint),] )

g_get_current_time = _rpythonic_function_(		"g_get_current_time", ctypes.c_void_p, [
	("result",		ctypes.POINTER(_GTimeVal)),] )

g_get_monotonic_time = _rpythonic_function_(		"g_get_monotonic_time", ctypes.c_longlong, [] )

g_get_real_time = _rpythonic_function_(		"g_get_real_time", ctypes.c_longlong, [] )

g_source_remove = _rpythonic_function_(		"g_source_remove", ctypes.c_int, [
	("tag",		ctypes.c_uint),] )

g_source_remove_by_user_data = _rpythonic_function_(		"g_source_remove_by_user_data", ctypes.c_int, [("user_data",		ctypes.c_void_p)] )

g_source_remove_by_funcs_user_data = _rpythonic_function_(		"g_source_remove_by_funcs_user_data", ctypes.c_int, [
	("funcs",		ctypes.POINTER(_GSourceFuncs)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_timeout_add_full = _rpythonic_function_(		"g_timeout_add_full", ctypes.c_uint, [
	("priority",		ctypes.c_int),
	("interval",		ctypes.c_uint),
	("function",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_timeout_add = _rpythonic_function_(		"g_timeout_add", ctypes.c_uint, [
	("interval",		ctypes.c_uint),
	("function",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_timeout_add_seconds_full = _rpythonic_function_(		"g_timeout_add_seconds_full", ctypes.c_uint, [
	("priority",		ctypes.c_int),
	("interval",		ctypes.c_uint),
	("function",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_timeout_add_seconds = _rpythonic_function_(		"g_timeout_add_seconds", ctypes.c_uint, [
	("interval",		ctypes.c_uint),
	("function",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_child_watch_add_full = _rpythonic_function_(		"g_child_watch_add_full", ctypes.c_uint, [
	("priority",		ctypes.c_int),
	("pid",		ctypes.c_int),
	("function",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_child_watch_add = _rpythonic_function_(		"g_child_watch_add", ctypes.c_uint, [
	("pid",		ctypes.c_int),
	("function",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_idle_add = _rpythonic_function_(		"g_idle_add", ctypes.c_uint, [
	("function",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_idle_add_full = _rpythonic_function_(		"g_idle_add_full", ctypes.c_uint, [
	("priority",		ctypes.c_int),
	("function",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_idle_remove_by_data = _rpythonic_function_(		"g_idle_remove_by_data", ctypes.c_int, [("data",		ctypes.c_void_p)] )

g_main_context_invoke_full = _rpythonic_function_(		"g_main_context_invoke_full", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMainContext)),
	("priority",		ctypes.c_int),
	("function",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_main_context_invoke = _rpythonic_function_(		"g_main_context_invoke", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMainContext)),
	("function",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_unicode_script_to_iso15924 = _rpythonic_function_(		"g_unicode_script_to_iso15924", ctypes.c_uint, [
	("script",		ctypes.c_int),] )

g_unicode_script_from_iso15924 = _rpythonic_function_(		"g_unicode_script_from_iso15924", ctypes.c_int, [
	("iso15924",		ctypes.c_uint),] )

g_get_charset = _rpythonic_function_(		"g_get_charset", ctypes.c_int, [
	("charset",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_unichar_isalnum = _rpythonic_function_(		"g_unichar_isalnum", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_isalpha = _rpythonic_function_(		"g_unichar_isalpha", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_iscntrl = _rpythonic_function_(		"g_unichar_iscntrl", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_isdigit = _rpythonic_function_(		"g_unichar_isdigit", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_isgraph = _rpythonic_function_(		"g_unichar_isgraph", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_islower = _rpythonic_function_(		"g_unichar_islower", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_isprint = _rpythonic_function_(		"g_unichar_isprint", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_ispunct = _rpythonic_function_(		"g_unichar_ispunct", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_isspace = _rpythonic_function_(		"g_unichar_isspace", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_isupper = _rpythonic_function_(		"g_unichar_isupper", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_isxdigit = _rpythonic_function_(		"g_unichar_isxdigit", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_istitle = _rpythonic_function_(		"g_unichar_istitle", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_isdefined = _rpythonic_function_(		"g_unichar_isdefined", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_iswide = _rpythonic_function_(		"g_unichar_iswide", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_iswide_cjk = _rpythonic_function_(		"g_unichar_iswide_cjk", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_iszerowidth = _rpythonic_function_(		"g_unichar_iszerowidth", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_ismark = _rpythonic_function_(		"g_unichar_ismark", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_toupper = _rpythonic_function_(		"g_unichar_toupper", ctypes.c_uint, [
	("c",		ctypes.c_uint),] )

g_unichar_tolower = _rpythonic_function_(		"g_unichar_tolower", ctypes.c_uint, [
	("c",		ctypes.c_uint),] )

g_unichar_totitle = _rpythonic_function_(		"g_unichar_totitle", ctypes.c_uint, [
	("c",		ctypes.c_uint),] )

g_unichar_digit_value = _rpythonic_function_(		"g_unichar_digit_value", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_xdigit_value = _rpythonic_function_(		"g_unichar_xdigit_value", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_type = _rpythonic_function_(		"g_unichar_type", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_break_type = _rpythonic_function_(		"g_unichar_break_type", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_combining_class = _rpythonic_function_(		"g_unichar_combining_class", ctypes.c_int, [
	("uc",		ctypes.c_uint),] )

g_unichar_get_mirror_char = _rpythonic_function_(		"g_unichar_get_mirror_char", ctypes.c_int, [
	("ch",		ctypes.c_uint),
	("mirrored_ch",		ctypes.POINTER(ctypes.c_uint)),] )

g_unichar_get_script = _rpythonic_function_(		"g_unichar_get_script", ctypes.c_int, [
	("ch",		ctypes.c_uint),] )

g_unichar_validate = _rpythonic_function_(		"g_unichar_validate", ctypes.c_int, [
	("ch",		ctypes.c_uint),] )

g_unichar_compose = _rpythonic_function_(		"g_unichar_compose", ctypes.c_int, [
	("a",		ctypes.c_uint),
	("b",		ctypes.c_uint),
	("ch",		ctypes.POINTER(ctypes.c_uint)),] )

g_unichar_decompose = _rpythonic_function_(		"g_unichar_decompose", ctypes.c_int, [
	("ch",		ctypes.c_uint),
	("a",		ctypes.POINTER(ctypes.c_uint)),
	("b",		ctypes.POINTER(ctypes.c_uint)),] )

g_unichar_fully_decompose = _rpythonic_function_(		"g_unichar_fully_decompose", ctypes.c_uint, [
	("ch",		ctypes.c_uint),
	("compat",		ctypes.c_int),
	("result",		ctypes.POINTER(ctypes.c_uint)),
	("result_len",		ctypes.c_uint),] )

g_unicode_canonical_ordering = _rpythonic_function_(		"g_unicode_canonical_ordering", ctypes.c_void_p, [
	("string",		ctypes.POINTER(ctypes.c_uint)),
	("C_len",		ctypes.c_uint),] )

g_unicode_canonical_decomposition = _rpythonic_function_(		"g_unicode_canonical_decomposition", ctypes.POINTER(ctypes.c_uint), [
	("ch",		ctypes.c_uint),
	("result_len",		ctypes.POINTER(ctypes.c_uint)),] )

g_utf8_get_char = _rpythonic_function_(		"g_utf8_get_char", ctypes.c_uint, [
	("p",		ctypes.POINTER(ctypes.c_char)),] )

g_utf8_get_char_validated = _rpythonic_function_(		"g_utf8_get_char_validated", ctypes.c_uint, [
	("p",		ctypes.POINTER(ctypes.c_char)),
	("max_len",		ctypes.c_int),] )

g_utf8_offset_to_pointer = _rpythonic_function_(		"g_utf8_offset_to_pointer", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("offset",		ctypes.c_long),] )

g_utf8_pointer_to_offset = _rpythonic_function_(		"g_utf8_pointer_to_offset", ctypes.c_long, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("pos",		ctypes.POINTER(ctypes.c_char)),] )

g_utf8_prev_char = _rpythonic_function_(		"g_utf8_prev_char", ctypes.POINTER(ctypes.c_char), [
	("p",		ctypes.POINTER(ctypes.c_char)),] )

g_utf8_find_next_char = _rpythonic_function_(		"g_utf8_find_next_char", ctypes.POINTER(ctypes.c_char), [
	("p",		ctypes.POINTER(ctypes.c_char)),
	("end",		ctypes.POINTER(ctypes.c_char)),] )

g_utf8_find_prev_char = _rpythonic_function_(		"g_utf8_find_prev_char", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("p",		ctypes.POINTER(ctypes.c_char)),] )

g_utf8_strlen = _rpythonic_function_(		"g_utf8_strlen", ctypes.c_long, [
	("p",		ctypes.POINTER(ctypes.c_char)),
	("max",		ctypes.c_int),] )

g_utf8_substring = _rpythonic_function_(		"g_utf8_substring", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("start_pos",		ctypes.c_long),
	("end_pos",		ctypes.c_long),] )

g_utf8_strncpy = _rpythonic_function_(		"g_utf8_strncpy", ctypes.POINTER(ctypes.c_char), [
	("dest",		ctypes.POINTER(ctypes.c_char)),
	("src",		ctypes.POINTER(ctypes.c_char)),
	("n",		ctypes.c_uint),] )

g_utf8_strchr = _rpythonic_function_(		"g_utf8_strchr", ctypes.POINTER(ctypes.c_char), [
	("p",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),
	("c",		ctypes.c_uint),] )

g_utf8_strrchr = _rpythonic_function_(		"g_utf8_strrchr", ctypes.POINTER(ctypes.c_char), [
	("p",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),
	("c",		ctypes.c_uint),] )

g_utf8_strreverse = _rpythonic_function_(		"g_utf8_strreverse", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

g_utf8_to_utf16 = _rpythonic_function_(		"g_utf8_to_utf16", ctypes.POINTER(ctypes.c_ushort), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),
	("items_read",		ctypes.POINTER(ctypes.c_long)),
	("items_written",		ctypes.POINTER(ctypes.c_long)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_utf8_to_ucs4 = _rpythonic_function_(		"g_utf8_to_ucs4", ctypes.POINTER(ctypes.c_uint), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),
	("items_read",		ctypes.POINTER(ctypes.c_long)),
	("items_written",		ctypes.POINTER(ctypes.c_long)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_utf8_to_ucs4_fast = _rpythonic_function_(		"g_utf8_to_ucs4_fast", ctypes.POINTER(ctypes.c_uint), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),
	("items_written",		ctypes.POINTER(ctypes.c_long)),] )

g_utf16_to_ucs4 = _rpythonic_function_(		"g_utf16_to_ucs4", ctypes.POINTER(ctypes.c_uint), [
	("C_str",		ctypes.POINTER(ctypes.c_ushort)),
	("C_len",		ctypes.c_long),
	("items_read",		ctypes.POINTER(ctypes.c_long)),
	("items_written",		ctypes.POINTER(ctypes.c_long)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_utf16_to_utf8 = _rpythonic_function_(		"g_utf16_to_utf8", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_ushort)),
	("C_len",		ctypes.c_long),
	("items_read",		ctypes.POINTER(ctypes.c_long)),
	("items_written",		ctypes.POINTER(ctypes.c_long)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_ucs4_to_utf16 = _rpythonic_function_(		"g_ucs4_to_utf16", ctypes.POINTER(ctypes.c_ushort), [
	("C_str",		ctypes.POINTER(ctypes.c_uint)),
	("C_len",		ctypes.c_long),
	("items_read",		ctypes.POINTER(ctypes.c_long)),
	("items_written",		ctypes.POINTER(ctypes.c_long)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_ucs4_to_utf8 = _rpythonic_function_(		"g_ucs4_to_utf8", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_uint)),
	("C_len",		ctypes.c_long),
	("items_read",		ctypes.POINTER(ctypes.c_long)),
	("items_written",		ctypes.POINTER(ctypes.c_long)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_unichar_to_utf8 = _rpythonic_function_(		"g_unichar_to_utf8", ctypes.c_int, [
	("c",		ctypes.c_uint),
	("outbuf",		ctypes.POINTER(ctypes.c_char)),] )

g_utf8_validate = _rpythonic_function_(		"g_utf8_validate", ctypes.c_int, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("max_len",		ctypes.c_int),
	("end",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_utf8_strup = _rpythonic_function_(		"g_utf8_strup", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

g_utf8_strdown = _rpythonic_function_(		"g_utf8_strdown", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

g_utf8_casefold = _rpythonic_function_(		"g_utf8_casefold", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

g_utf8_normalize = _rpythonic_function_(		"g_utf8_normalize", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),
	("mode",		ctypes.c_int),] )

g_utf8_collate = _rpythonic_function_(		"g_utf8_collate", ctypes.c_int, [
	("str1",		ctypes.POINTER(ctypes.c_char)),
	("str2",		ctypes.POINTER(ctypes.c_char)),] )

g_utf8_collate_key = _rpythonic_function_(		"g_utf8_collate_key", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

g_utf8_collate_key_for_filename = _rpythonic_function_(		"g_utf8_collate_key_for_filename", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

_g_utf8_make_valid = _rpythonic_function_(		"_g_utf8_make_valid", ctypes.POINTER(ctypes.c_char), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_string_chunk_new = _rpythonic_function_(		"g_string_chunk_new", ctypes.POINTER(_GStringChunk), [
	("size",		ctypes.c_uint),] )

g_string_chunk_free = _rpythonic_function_(		"g_string_chunk_free", ctypes.c_void_p, [
	("chunk",		ctypes.POINTER(_GStringChunk)),] )

g_string_chunk_clear = _rpythonic_function_(		"g_string_chunk_clear", ctypes.c_void_p, [
	("chunk",		ctypes.POINTER(_GStringChunk)),] )

g_string_chunk_insert = _rpythonic_function_(		"g_string_chunk_insert", ctypes.POINTER(ctypes.c_char), [
	("chunk",		ctypes.POINTER(_GStringChunk)),
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_string_chunk_insert_len = _rpythonic_function_(		"g_string_chunk_insert_len", ctypes.POINTER(ctypes.c_char), [
	("chunk",		ctypes.POINTER(_GStringChunk)),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

g_string_chunk_insert_const = _rpythonic_function_(		"g_string_chunk_insert_const", ctypes.POINTER(ctypes.c_char), [
	("chunk",		ctypes.POINTER(_GStringChunk)),
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_string_new = _rpythonic_function_(		"g_string_new", ctypes.POINTER(_GString), [
	("init",		ctypes.POINTER(ctypes.c_char)),] )

g_string_new_len = _rpythonic_function_(		"g_string_new_len", ctypes.POINTER(_GString), [
	("init",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

g_string_sized_new = _rpythonic_function_(		"g_string_sized_new", ctypes.POINTER(_GString), [
	("dfl_size",		ctypes.c_uint),] )

g_string_free = _rpythonic_function_(		"g_string_free", ctypes.POINTER(ctypes.c_char), [
	("string",		ctypes.POINTER(_GString)),
	("free_segment",		ctypes.c_int),] )

g_string_equal = _rpythonic_function_(		"g_string_equal", ctypes.c_int, [
	("v",		ctypes.POINTER(_GString)),
	("v2",		ctypes.POINTER(_GString)),] )

g_string_hash = _rpythonic_function_(		"g_string_hash", ctypes.c_uint, [
	("C_str",		ctypes.POINTER(_GString)),] )

g_string_assign = _rpythonic_function_(		"g_string_assign", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("rval",		ctypes.POINTER(ctypes.c_char)),] )

g_string_truncate = _rpythonic_function_(		"g_string_truncate", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("C_len",		ctypes.c_uint),] )

g_string_set_size = _rpythonic_function_(		"g_string_set_size", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("C_len",		ctypes.c_uint),] )

g_string_insert_len = _rpythonic_function_(		"g_string_insert_len", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("pos",		ctypes.c_int),
	("val",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

g_string_append = _rpythonic_function_(		"g_string_append", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("val",		ctypes.POINTER(ctypes.c_char)),] )

g_string_append_len = _rpythonic_function_(		"g_string_append_len", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("val",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

g_string_append_c = _rpythonic_function_(		"g_string_append_c", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("c",		ctypes.c_char),] )

g_string_append_unichar = _rpythonic_function_(		"g_string_append_unichar", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("wc",		ctypes.c_uint),] )

g_string_prepend = _rpythonic_function_(		"g_string_prepend", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("val",		ctypes.POINTER(ctypes.c_char)),] )

g_string_prepend_c = _rpythonic_function_(		"g_string_prepend_c", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("c",		ctypes.c_char),] )

g_string_prepend_unichar = _rpythonic_function_(		"g_string_prepend_unichar", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("wc",		ctypes.c_uint),] )

g_string_prepend_len = _rpythonic_function_(		"g_string_prepend_len", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("val",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

g_string_insert = _rpythonic_function_(		"g_string_insert", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("pos",		ctypes.c_int),
	("val",		ctypes.POINTER(ctypes.c_char)),] )

g_string_insert_c = _rpythonic_function_(		"g_string_insert_c", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("pos",		ctypes.c_int),
	("c",		ctypes.c_char),] )

g_string_insert_unichar = _rpythonic_function_(		"g_string_insert_unichar", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("pos",		ctypes.c_int),
	("wc",		ctypes.c_uint),] )

g_string_overwrite = _rpythonic_function_(		"g_string_overwrite", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("pos",		ctypes.c_uint),
	("val",		ctypes.POINTER(ctypes.c_char)),] )

g_string_overwrite_len = _rpythonic_function_(		"g_string_overwrite_len", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("pos",		ctypes.c_uint),
	("val",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

g_string_erase = _rpythonic_function_(		"g_string_erase", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("pos",		ctypes.c_int),
	("C_len",		ctypes.c_int),] )

g_string_ascii_down = _rpythonic_function_(		"g_string_ascii_down", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),] )

g_string_ascii_up = _rpythonic_function_(		"g_string_ascii_up", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),] )

g_string_vprintf = _rpythonic_function_(		"g_string_vprintf", ctypes.c_void_p, [
	("string",		ctypes.POINTER(_GString)),
	("format",		ctypes.POINTER(ctypes.c_char)),
	("args",		ctypes.c_char),] )

g_string_append_vprintf = _rpythonic_function_(		"g_string_append_vprintf", ctypes.c_void_p, [
	("string",		ctypes.POINTER(_GString)),
	("format",		ctypes.POINTER(ctypes.c_char)),
	("args",		ctypes.c_char),] )

g_string_append_uri_escaped = _rpythonic_function_(		"g_string_append_uri_escaped", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("unescaped",		ctypes.POINTER(ctypes.c_char)),
	("reserved_chars_allowed",		ctypes.POINTER(ctypes.c_char)),
	("allow_utf8",		ctypes.c_int),] )

g_string_down = _rpythonic_function_(		"g_string_down", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),] )

g_string_up = _rpythonic_function_(		"g_string_up", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),] )

GIOFunc = _rpythonic_function_(		"GIOFunc", ctypes.c_int, [
	("source",		ctypes.POINTER(_GIOChannel)),
	("condition",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

io_read = _rpythonic_function_(		"io_read", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("buf",		ctypes.POINTER(ctypes.c_char)),
	("count",		ctypes.c_uint),
	("bytes_read",		ctypes.POINTER(ctypes.c_uint)),
	("err",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

io_write = _rpythonic_function_(		"io_write", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("buf",		ctypes.POINTER(ctypes.c_char)),
	("count",		ctypes.c_uint),
	("bytes_written",		ctypes.POINTER(ctypes.c_uint)),
	("err",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

io_seek = _rpythonic_function_(		"io_seek", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("offset",		ctypes.c_longlong),
	("C_type",		ctypes.c_int),
	("err",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

io_close = _rpythonic_function_(		"io_close", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("err",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

io_create_watch = _rpythonic_function_(		"io_create_watch", ctypes.POINTER(_GSource), [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("condition",		ctypes.c_int),] )

io_free = _rpythonic_function_(		"io_free", ctypes.c_void_p, [
	("channel",		ctypes.POINTER(_GIOChannel)),] )

io_set_flags = _rpythonic_function_(		"io_set_flags", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("flags",		ctypes.c_int),
	("err",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

io_get_flags = _rpythonic_function_(		"io_get_flags", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),] )

g_io_channel_init = _rpythonic_function_(		"g_io_channel_init", ctypes.c_void_p, [
	("channel",		ctypes.POINTER(_GIOChannel)),] )

g_io_channel_ref = _rpythonic_function_(		"g_io_channel_ref", ctypes.POINTER(_GIOChannel), [
	("channel",		ctypes.POINTER(_GIOChannel)),] )

g_io_channel_unref = _rpythonic_function_(		"g_io_channel_unref", ctypes.c_void_p, [
	("channel",		ctypes.POINTER(_GIOChannel)),] )

g_io_channel_read = _rpythonic_function_(		"g_io_channel_read", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("buf",		ctypes.POINTER(ctypes.c_char)),
	("count",		ctypes.c_uint),
	("bytes_read",		ctypes.POINTER(ctypes.c_uint)),] )

g_io_channel_write = _rpythonic_function_(		"g_io_channel_write", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("buf",		ctypes.POINTER(ctypes.c_char)),
	("count",		ctypes.c_uint),
	("bytes_written",		ctypes.POINTER(ctypes.c_uint)),] )

g_io_channel_seek = _rpythonic_function_(		"g_io_channel_seek", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("offset",		ctypes.c_longlong),
	("C_type",		ctypes.c_int),] )

g_io_channel_close = _rpythonic_function_(		"g_io_channel_close", ctypes.c_void_p, [
	("channel",		ctypes.POINTER(_GIOChannel)),] )

g_io_channel_shutdown = _rpythonic_function_(		"g_io_channel_shutdown", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("flush",		ctypes.c_int),
	("err",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_add_watch_full = _rpythonic_function_(		"g_io_add_watch_full", ctypes.c_uint, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("priority",		ctypes.c_int),
	("condition",		ctypes.c_int),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GIOChannel),ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_io_create_watch = _rpythonic_function_(		"g_io_create_watch", ctypes.POINTER(_GSource), [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("condition",		ctypes.c_int),] )

g_io_add_watch = _rpythonic_function_(		"g_io_add_watch", ctypes.c_uint, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("condition",		ctypes.c_int),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GIOChannel),ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_io_channel_set_buffer_size = _rpythonic_function_(		"g_io_channel_set_buffer_size", ctypes.c_void_p, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("size",		ctypes.c_uint),] )

g_io_channel_get_buffer_size = _rpythonic_function_(		"g_io_channel_get_buffer_size", ctypes.c_uint, [
	("channel",		ctypes.POINTER(_GIOChannel)),] )

g_io_channel_get_buffer_condition = _rpythonic_function_(		"g_io_channel_get_buffer_condition", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),] )

g_io_channel_set_flags = _rpythonic_function_(		"g_io_channel_set_flags", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("flags",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_channel_get_flags = _rpythonic_function_(		"g_io_channel_get_flags", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),] )

g_io_channel_set_line_term = _rpythonic_function_(		"g_io_channel_set_line_term", ctypes.c_void_p, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("line_term",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),] )

g_io_channel_get_line_term = _rpythonic_function_(		"g_io_channel_get_line_term", ctypes.POINTER(ctypes.c_char), [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("length",		ctypes.POINTER(ctypes.c_int)),] )

g_io_channel_set_buffered = _rpythonic_function_(		"g_io_channel_set_buffered", ctypes.c_void_p, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("buffered",		ctypes.c_int),] )

g_io_channel_get_buffered = _rpythonic_function_(		"g_io_channel_get_buffered", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),] )

g_io_channel_set_encoding = _rpythonic_function_(		"g_io_channel_set_encoding", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("encoding",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_channel_get_encoding = _rpythonic_function_(		"g_io_channel_get_encoding", ctypes.POINTER(ctypes.c_char), [
	("channel",		ctypes.POINTER(_GIOChannel)),] )

g_io_channel_set_close_on_unref = _rpythonic_function_(		"g_io_channel_set_close_on_unref", ctypes.c_void_p, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("do_close",		ctypes.c_int),] )

g_io_channel_get_close_on_unref = _rpythonic_function_(		"g_io_channel_get_close_on_unref", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),] )

g_io_channel_flush = _rpythonic_function_(		"g_io_channel_flush", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_channel_read_line = _rpythonic_function_(		"g_io_channel_read_line", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("str_return",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("length",		ctypes.POINTER(ctypes.c_uint)),
	("terminator_pos",		ctypes.POINTER(ctypes.c_uint)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_channel_read_line_string = _rpythonic_function_(		"g_io_channel_read_line_string", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("buffer",		ctypes.POINTER(_GString)),
	("terminator_pos",		ctypes.POINTER(ctypes.c_uint)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_channel_read_to_end = _rpythonic_function_(		"g_io_channel_read_to_end", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("str_return",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("length",		ctypes.POINTER(ctypes.c_uint)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_channel_read_chars = _rpythonic_function_(		"g_io_channel_read_chars", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("buf",		ctypes.POINTER(ctypes.c_char)),
	("count",		ctypes.c_uint),
	("bytes_read",		ctypes.POINTER(ctypes.c_uint)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_channel_read_unichar = _rpythonic_function_(		"g_io_channel_read_unichar", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("thechar",		ctypes.POINTER(ctypes.c_uint)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_channel_write_chars = _rpythonic_function_(		"g_io_channel_write_chars", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("buf",		ctypes.POINTER(ctypes.c_char)),
	("count",		ctypes.c_int),
	("bytes_written",		ctypes.POINTER(ctypes.c_uint)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_channel_write_unichar = _rpythonic_function_(		"g_io_channel_write_unichar", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("thechar",		ctypes.c_uint),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_channel_seek_position = _rpythonic_function_(		"g_io_channel_seek_position", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("offset",		ctypes.c_longlong),
	("C_type",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_channel_new_file = _rpythonic_function_(		"g_io_channel_new_file", ctypes.POINTER(_GIOChannel), [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("mode",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_channel_error_quark = _rpythonic_function_(		"g_io_channel_error_quark", ctypes.c_uint, [] )

g_io_channel_error_from_errno = _rpythonic_function_(		"g_io_channel_error_from_errno", ctypes.c_int, [
	("en",		ctypes.c_int),] )

g_io_channel_unix_new = _rpythonic_function_(		"g_io_channel_unix_new", ctypes.POINTER(_GIOChannel), [
	("fd",		ctypes.c_int),] )

g_io_channel_unix_get_fd = _rpythonic_function_(		"g_io_channel_unix_get_fd", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),] )

g_key_file_error_quark = _rpythonic_function_(		"g_key_file_error_quark", ctypes.c_uint, [] )

g_key_file_new = _rpythonic_function_(		"g_key_file_new", ctypes.POINTER(_GKeyFile), [] )

g_key_file_free = _rpythonic_function_(		"g_key_file_free", ctypes.c_void_p, [
	("key_file",		ctypes.POINTER(_GKeyFile)),] )

g_key_file_set_list_separator = _rpythonic_function_(		"g_key_file_set_list_separator", ctypes.c_void_p, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("separator",		ctypes.c_char),] )

g_key_file_load_from_file = _rpythonic_function_(		"g_key_file_load_from_file", ctypes.c_int, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_load_from_data = _rpythonic_function_(		"g_key_file_load_from_data", ctypes.c_int, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("data",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_uint),
	("flags",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_load_from_dirs = _rpythonic_function_(		"g_key_file_load_from_dirs", ctypes.c_int, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("search_dirs",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("full_path",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("flags",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_load_from_data_dirs = _rpythonic_function_(		"g_key_file_load_from_data_dirs", ctypes.c_int, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("full_path",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("flags",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_to_data = _rpythonic_function_(		"g_key_file_to_data", ctypes.POINTER(ctypes.c_char), [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("length",		ctypes.POINTER(ctypes.c_uint)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_get_start_group = _rpythonic_function_(		"g_key_file_get_start_group", ctypes.POINTER(ctypes.c_char), [
	("key_file",		ctypes.POINTER(_GKeyFile)),] )

g_key_file_get_groups = _rpythonic_function_(		"g_key_file_get_groups", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("length",		ctypes.POINTER(ctypes.c_uint)),] )

g_key_file_get_keys = _rpythonic_function_(		"g_key_file_get_keys", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.POINTER(ctypes.c_uint)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_has_group = _rpythonic_function_(		"g_key_file_has_group", ctypes.c_int, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),] )

g_key_file_has_key = _rpythonic_function_(		"g_key_file_has_key", ctypes.c_int, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_get_value = _rpythonic_function_(		"g_key_file_get_value", ctypes.POINTER(ctypes.c_char), [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_set_value = _rpythonic_function_(		"g_key_file_set_value", ctypes.c_void_p, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

g_key_file_get_string = _rpythonic_function_(		"g_key_file_get_string", ctypes.POINTER(ctypes.c_char), [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_set_string = _rpythonic_function_(		"g_key_file_set_string", ctypes.c_void_p, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_key_file_get_locale_string = _rpythonic_function_(		"g_key_file_get_locale_string", ctypes.POINTER(ctypes.c_char), [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("locale",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_set_locale_string = _rpythonic_function_(		"g_key_file_set_locale_string", ctypes.c_void_p, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("locale",		ctypes.POINTER(ctypes.c_char)),
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_key_file_get_boolean = _rpythonic_function_(		"g_key_file_get_boolean", ctypes.c_int, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_set_boolean = _rpythonic_function_(		"g_key_file_set_boolean", ctypes.c_void_p, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_int),] )

g_key_file_get_integer = _rpythonic_function_(		"g_key_file_get_integer", ctypes.c_int, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_set_integer = _rpythonic_function_(		"g_key_file_set_integer", ctypes.c_void_p, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_int),] )

g_key_file_get_int64 = _rpythonic_function_(		"g_key_file_get_int64", ctypes.c_longlong, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_set_int64 = _rpythonic_function_(		"g_key_file_set_int64", ctypes.c_void_p, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_longlong),] )

g_key_file_get_uint64 = _rpythonic_function_(		"g_key_file_get_uint64", ctypes.c_ulonglong, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_set_uint64 = _rpythonic_function_(		"g_key_file_set_uint64", ctypes.c_void_p, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_ulonglong),] )

g_key_file_get_double = _rpythonic_function_(		"g_key_file_get_double", ctypes.c_double, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_set_double = _rpythonic_function_(		"g_key_file_set_double", ctypes.c_void_p, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_double),] )

g_key_file_get_string_list = _rpythonic_function_(		"g_key_file_get_string_list", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.POINTER(ctypes.c_uint)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_set_string_list = _rpythonic_function_(		"g_key_file_set_string_list", ctypes.c_void_p, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("C_list",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_uint),] )

g_key_file_get_locale_string_list = _rpythonic_function_(		"g_key_file_get_locale_string_list", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("locale",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.POINTER(ctypes.c_uint)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_set_locale_string_list = _rpythonic_function_(		"g_key_file_set_locale_string_list", ctypes.c_void_p, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("locale",		ctypes.POINTER(ctypes.c_char)),
	("C_list",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_uint),] )

g_key_file_get_boolean_list = _rpythonic_function_(		"g_key_file_get_boolean_list", ctypes.POINTER(ctypes.c_int), [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.POINTER(ctypes.c_uint)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_set_boolean_list = _rpythonic_function_(		"g_key_file_set_boolean_list", ctypes.c_void_p, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("C_list",		ctypes.c_int),
	("length",		ctypes.c_uint),] )

g_key_file_get_integer_list = _rpythonic_function_(		"g_key_file_get_integer_list", ctypes.POINTER(ctypes.c_int), [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.POINTER(ctypes.c_uint)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_set_double_list = _rpythonic_function_(		"g_key_file_set_double_list", ctypes.c_void_p, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("C_list",		ctypes.c_double),
	("length",		ctypes.c_uint),] )

g_key_file_get_double_list = _rpythonic_function_(		"g_key_file_get_double_list", ctypes.POINTER(ctypes.c_double), [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.POINTER(ctypes.c_uint)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_set_integer_list = _rpythonic_function_(		"g_key_file_set_integer_list", ctypes.c_void_p, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("C_list",		ctypes.c_int),
	("length",		ctypes.c_uint),] )

g_key_file_set_comment = _rpythonic_function_(		"g_key_file_set_comment", ctypes.c_int, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("comment",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_get_comment = _rpythonic_function_(		"g_key_file_get_comment", ctypes.POINTER(ctypes.c_char), [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_remove_comment = _rpythonic_function_(		"g_key_file_remove_comment", ctypes.c_int, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_remove_key = _rpythonic_function_(		"g_key_file_remove_key", ctypes.c_int, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_remove_group = _rpythonic_function_(		"g_key_file_remove_group", ctypes.c_int, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_mapped_file_new = _rpythonic_function_(		"g_mapped_file_new", ctypes.POINTER(_GMappedFile), [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("writable",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_mapped_file_get_length = _rpythonic_function_(		"g_mapped_file_get_length", ctypes.c_uint, [
	("file",		ctypes.POINTER(_GMappedFile)),] )

g_mapped_file_get_contents = _rpythonic_function_(		"g_mapped_file_get_contents", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(_GMappedFile)),] )

g_mapped_file_ref = _rpythonic_function_(		"g_mapped_file_ref", ctypes.POINTER(_GMappedFile), [
	("file",		ctypes.POINTER(_GMappedFile)),] )

g_mapped_file_unref = _rpythonic_function_(		"g_mapped_file_unref", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GMappedFile)),] )

g_mapped_file_free = _rpythonic_function_(		"g_mapped_file_free", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GMappedFile)),] )

g_markup_error_quark = _rpythonic_function_(		"g_markup_error_quark", ctypes.c_uint, [] )

start_element = _rpythonic_function_(		"start_element", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMarkupParseContext)),
	("element_name",		ctypes.POINTER(ctypes.c_char)),
	("attribute_names",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("attribute_values",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

end_element = _rpythonic_function_(		"end_element", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMarkupParseContext)),
	("element_name",		ctypes.POINTER(ctypes.c_char)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

text = _rpythonic_function_(		"text", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMarkupParseContext)),
	("text",		ctypes.POINTER(ctypes.c_char)),
	("text_len",		ctypes.c_uint),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

passthrough = _rpythonic_function_(		"passthrough", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMarkupParseContext)),
	("passthrough_text",		ctypes.POINTER(ctypes.c_char)),
	("text_len",		ctypes.c_uint),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

error = _rpythonic_function_(		"error", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMarkupParseContext)),
	("error",		ctypes.POINTER(_GError)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_markup_parse_context_new = _rpythonic_function_(		"g_markup_parse_context_new", ctypes.POINTER(_GMarkupParseContext), [
	("parser",		ctypes.POINTER(_GMarkupParser)),
	("flags",		ctypes.c_int),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("user_data_dnotify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_markup_parse_context_free = _rpythonic_function_(		"g_markup_parse_context_free", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMarkupParseContext)),] )

g_markup_parse_context_parse = _rpythonic_function_(		"g_markup_parse_context_parse", ctypes.c_int, [
	("context",		ctypes.POINTER(_GMarkupParseContext)),
	("text",		ctypes.POINTER(ctypes.c_char)),
	("text_len",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_markup_parse_context_push = _rpythonic_function_(		"g_markup_parse_context_push", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMarkupParseContext)),
	("parser",		ctypes.POINTER(_GMarkupParser)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_markup_parse_context_pop = _rpythonic_function_(		"g_markup_parse_context_pop", ctypes.POINTER(ctypes.c_void_p), [
	("context",		ctypes.POINTER(_GMarkupParseContext)),] )

g_markup_parse_context_end_parse = _rpythonic_function_(		"g_markup_parse_context_end_parse", ctypes.c_int, [
	("context",		ctypes.POINTER(_GMarkupParseContext)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_markup_parse_context_get_element = _rpythonic_function_(		"g_markup_parse_context_get_element", ctypes.POINTER(ctypes.c_char), [
	("context",		ctypes.POINTER(_GMarkupParseContext)),] )

g_markup_parse_context_get_element_stack = _rpythonic_function_(		"g_markup_parse_context_get_element_stack", ctypes.POINTER(_GSList), [
	("context",		ctypes.POINTER(_GMarkupParseContext)),] )

g_markup_parse_context_get_position = _rpythonic_function_(		"g_markup_parse_context_get_position", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMarkupParseContext)),
	("line_number",		ctypes.POINTER(ctypes.c_int)),
	("char_number",		ctypes.POINTER(ctypes.c_int)),] )

g_markup_parse_context_get_user_data = _rpythonic_function_(		"g_markup_parse_context_get_user_data", ctypes.POINTER(ctypes.c_void_p), [
	("context",		ctypes.POINTER(_GMarkupParseContext)),] )

g_markup_escape_text = _rpythonic_function_(		"g_markup_escape_text", ctypes.POINTER(ctypes.c_char), [
	("text",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),] )

g_markup_vprintf_escaped = _rpythonic_function_(		"g_markup_vprintf_escaped", ctypes.POINTER(ctypes.c_char), [
	("format",		ctypes.POINTER(ctypes.c_char)),
	("args",		ctypes.c_char),] )

g_printf_string_upper_bound = _rpythonic_function_(		"g_printf_string_upper_bound", ctypes.c_uint, [
	("format",		ctypes.POINTER(ctypes.c_char)),
	("args",		ctypes.c_char),] )

GLogFunc = _rpythonic_function_(		"GLogFunc", ctypes.c_void_p, [
	("log_domain",		ctypes.POINTER(ctypes.c_char)),
	("log_level",		ctypes.c_int),
	("message",		ctypes.POINTER(ctypes.c_char)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_log_set_handler = _rpythonic_function_(		"g_log_set_handler", ctypes.c_uint, [
	("log_domain",		ctypes.POINTER(ctypes.c_char)),
	("log_levels",		ctypes.c_int),
	("log_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_char),ctypes.c_int,ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_log_remove_handler = _rpythonic_function_(		"g_log_remove_handler", ctypes.c_void_p, [
	("log_domain",		ctypes.POINTER(ctypes.c_char)),
	("handler_id",		ctypes.c_uint),] )

g_log_default_handler = _rpythonic_function_(		"g_log_default_handler", ctypes.c_void_p, [
	("log_domain",		ctypes.POINTER(ctypes.c_char)),
	("log_level",		ctypes.c_int),
	("message",		ctypes.POINTER(ctypes.c_char)),
	("unused_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_log_set_default_handler = _rpythonic_function_(		"g_log_set_default_handler", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_char),ctypes.c_int,ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),), [
	("log_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_char),ctypes.c_int,ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_logv = _rpythonic_function_(		"g_logv", ctypes.c_void_p, [
	("log_domain",		ctypes.POINTER(ctypes.c_char)),
	("log_level",		ctypes.c_int),
	("format",		ctypes.POINTER(ctypes.c_char)),
	("args",		ctypes.c_char),] )

g_log_set_fatal_mask = _rpythonic_function_(		"g_log_set_fatal_mask", ctypes.c_int, [
	("log_domain",		ctypes.POINTER(ctypes.c_char)),
	("fatal_mask",		ctypes.c_int),] )

g_log_set_always_fatal = _rpythonic_function_(		"g_log_set_always_fatal", ctypes.c_int, [
	("fatal_mask",		ctypes.c_int),] )

_g_log_fallback_handler = _rpythonic_function_(		"_g_log_fallback_handler", ctypes.c_void_p, [
	("log_domain",		ctypes.POINTER(ctypes.c_char)),
	("log_level",		ctypes.c_int),
	("message",		ctypes.POINTER(ctypes.c_char)),
	("unused_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_return_if_fail_warning = _rpythonic_function_(		"g_return_if_fail_warning", ctypes.c_void_p, [
	("log_domain",		ctypes.POINTER(ctypes.c_char)),
	("pretty_function",		ctypes.POINTER(ctypes.c_char)),
	("expression",		ctypes.POINTER(ctypes.c_char)),] )

g_warn_message = _rpythonic_function_(		"g_warn_message", ctypes.c_void_p, [
	("domain",		ctypes.POINTER(ctypes.c_char)),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("func",		ctypes.POINTER(ctypes.c_char)),
	("warnexpr",		ctypes.POINTER(ctypes.c_char)),] )

g_assert_warning = _rpythonic_function_(		"g_assert_warning", ctypes.c_void_p, [
	("log_domain",		ctypes.POINTER(ctypes.c_char)),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("pretty_function",		ctypes.POINTER(ctypes.c_char)),
	("expression",		ctypes.POINTER(ctypes.c_char)),] )

GPrintFunc = _rpythonic_function_(		"GPrintFunc", ctypes.c_void_p, [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_set_print_handler = _rpythonic_function_(		"g_set_print_handler", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_char),), [
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_char),)),] )

g_set_printerr_handler = _rpythonic_function_(		"g_set_printerr_handler", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_char),), [
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_char),)),] )

GNodeTraverseFunc = _rpythonic_function_(		"GNodeTraverseFunc", ctypes.c_int, [
	("node",		ctypes.POINTER(_GNode)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

GNodeForeachFunc = _rpythonic_function_(		"GNodeForeachFunc", ctypes.c_void_p, [
	("node",		ctypes.POINTER(_GNode)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

GCopyFunc = _rpythonic_function_(		"GCopyFunc", ctypes.POINTER(ctypes.c_void_p), [
	("src",		ctypes.POINTER(ctypes.c_void_p)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_node_new = _rpythonic_function_(		"g_node_new", ctypes.POINTER(_GNode), [("data",		ctypes.c_void_p)] )

g_node_destroy = _rpythonic_function_(		"g_node_destroy", ctypes.c_void_p, [
	("root",		ctypes.POINTER(_GNode)),] )

g_node_unlink = _rpythonic_function_(		"g_node_unlink", ctypes.c_void_p, [
	("node",		ctypes.POINTER(_GNode)),] )

g_node_copy_deep = _rpythonic_function_(		"g_node_copy_deep", ctypes.POINTER(_GNode), [
	("node",		ctypes.POINTER(_GNode)),
	("copy_func",		ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_node_copy = _rpythonic_function_(		"g_node_copy", ctypes.POINTER(_GNode), [
	("node",		ctypes.POINTER(_GNode)),] )

g_node_insert = _rpythonic_function_(		"g_node_insert", ctypes.POINTER(_GNode), [
	("parent",		ctypes.POINTER(_GNode)),
	("position",		ctypes.c_int),
	("node",		ctypes.POINTER(_GNode)),] )

g_node_insert_before = _rpythonic_function_(		"g_node_insert_before", ctypes.POINTER(_GNode), [
	("parent",		ctypes.POINTER(_GNode)),
	("sibling",		ctypes.POINTER(_GNode)),
	("node",		ctypes.POINTER(_GNode)),] )

g_node_insert_after = _rpythonic_function_(		"g_node_insert_after", ctypes.POINTER(_GNode), [
	("parent",		ctypes.POINTER(_GNode)),
	("sibling",		ctypes.POINTER(_GNode)),
	("node",		ctypes.POINTER(_GNode)),] )

g_node_prepend = _rpythonic_function_(		"g_node_prepend", ctypes.POINTER(_GNode), [
	("parent",		ctypes.POINTER(_GNode)),
	("node",		ctypes.POINTER(_GNode)),] )

g_node_n_nodes = _rpythonic_function_(		"g_node_n_nodes", ctypes.c_uint, [
	("root",		ctypes.POINTER(_GNode)),
	("flags",		ctypes.c_int),] )

g_node_get_root = _rpythonic_function_(		"g_node_get_root", ctypes.POINTER(_GNode), [
	("node",		ctypes.POINTER(_GNode)),] )

g_node_is_ancestor = _rpythonic_function_(		"g_node_is_ancestor", ctypes.c_int, [
	("node",		ctypes.POINTER(_GNode)),
	("descendant",		ctypes.POINTER(_GNode)),] )

g_node_depth = _rpythonic_function_(		"g_node_depth", ctypes.c_uint, [
	("node",		ctypes.POINTER(_GNode)),] )

g_node_find = _rpythonic_function_(		"g_node_find", ctypes.POINTER(_GNode), [
	("root",		ctypes.POINTER(_GNode)),
	("order",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_node_traverse = _rpythonic_function_(		"g_node_traverse", ctypes.c_void_p, [
	("root",		ctypes.POINTER(_GNode)),
	("order",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("max_depth",		ctypes.c_int),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GNode),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_node_max_height = _rpythonic_function_(		"g_node_max_height", ctypes.c_uint, [
	("root",		ctypes.POINTER(_GNode)),] )

g_node_children_foreach = _rpythonic_function_(		"g_node_children_foreach", ctypes.c_void_p, [
	("node",		ctypes.POINTER(_GNode)),
	("flags",		ctypes.c_int),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GNode),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_node_reverse_children = _rpythonic_function_(		"g_node_reverse_children", ctypes.c_void_p, [
	("node",		ctypes.POINTER(_GNode)),] )

g_node_n_children = _rpythonic_function_(		"g_node_n_children", ctypes.c_uint, [
	("node",		ctypes.POINTER(_GNode)),] )

g_node_nth_child = _rpythonic_function_(		"g_node_nth_child", ctypes.POINTER(_GNode), [
	("node",		ctypes.POINTER(_GNode)),
	("n",		ctypes.c_uint),] )

g_node_last_child = _rpythonic_function_(		"g_node_last_child", ctypes.POINTER(_GNode), [
	("node",		ctypes.POINTER(_GNode)),] )

g_node_find_child = _rpythonic_function_(		"g_node_find_child", ctypes.POINTER(_GNode), [
	("node",		ctypes.POINTER(_GNode)),
	("flags",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_node_child_position = _rpythonic_function_(		"g_node_child_position", ctypes.c_int, [
	("node",		ctypes.POINTER(_GNode)),
	("child",		ctypes.POINTER(_GNode)),] )

g_node_child_index = _rpythonic_function_(		"g_node_child_index", ctypes.c_int, [
	("node",		ctypes.POINTER(_GNode)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_node_first_sibling = _rpythonic_function_(		"g_node_first_sibling", ctypes.POINTER(_GNode), [
	("node",		ctypes.POINTER(_GNode)),] )

g_node_last_sibling = _rpythonic_function_(		"g_node_last_sibling", ctypes.POINTER(_GNode), [
	("node",		ctypes.POINTER(_GNode)),] )

g_node_push_allocator = _rpythonic_function_(		"g_node_push_allocator", ctypes.c_void_p, [("dummy",		ctypes.c_void_p)] )

g_node_pop_allocator = _rpythonic_function_(		"g_node_pop_allocator", ctypes.c_void_p, [] )

GOptionArgFunc = _rpythonic_function_(		"GOptionArgFunc", ctypes.c_int, [
	("option_name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_char)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

GOptionParseFunc = _rpythonic_function_(		"GOptionParseFunc", ctypes.c_int, [
	("context",		ctypes.POINTER(_GOptionContext)),
	("group",		ctypes.POINTER(_GOptionGroup)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

GOptionErrorFunc = _rpythonic_function_(		"GOptionErrorFunc", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GOptionContext)),
	("group",		ctypes.POINTER(_GOptionGroup)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_option_error_quark = _rpythonic_function_(		"g_option_error_quark", ctypes.c_uint, [] )

g_option_context_set_summary = _rpythonic_function_(		"g_option_context_set_summary", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GOptionContext)),
	("summary",		ctypes.POINTER(ctypes.c_char)),] )

g_option_context_new = _rpythonic_function_(		"g_option_context_new", ctypes.POINTER(_GOptionContext), [
	("parameter_string",		ctypes.POINTER(ctypes.c_char)),] )

g_option_context_get_summary = _rpythonic_function_(		"g_option_context_get_summary", ctypes.POINTER(ctypes.c_char), [
	("context",		ctypes.POINTER(_GOptionContext)),] )

g_option_context_set_description = _rpythonic_function_(		"g_option_context_set_description", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GOptionContext)),
	("description",		ctypes.POINTER(ctypes.c_char)),] )

g_option_context_get_description = _rpythonic_function_(		"g_option_context_get_description", ctypes.POINTER(ctypes.c_char), [
	("context",		ctypes.POINTER(_GOptionContext)),] )

g_option_context_free = _rpythonic_function_(		"g_option_context_free", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GOptionContext)),] )

g_option_context_set_help_enabled = _rpythonic_function_(		"g_option_context_set_help_enabled", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GOptionContext)),
	("help_enabled",		ctypes.c_int),] )

g_option_context_get_help_enabled = _rpythonic_function_(		"g_option_context_get_help_enabled", ctypes.c_int, [
	("context",		ctypes.POINTER(_GOptionContext)),] )

g_option_context_set_ignore_unknown_options = _rpythonic_function_(		"g_option_context_set_ignore_unknown_options", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GOptionContext)),
	("ignore_unknown",		ctypes.c_int),] )

g_option_context_get_ignore_unknown_options = _rpythonic_function_(		"g_option_context_get_ignore_unknown_options", ctypes.c_int, [
	("context",		ctypes.POINTER(_GOptionContext)),] )

g_option_context_add_main_entries = _rpythonic_function_(		"g_option_context_add_main_entries", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GOptionContext)),
	("entries",		ctypes.POINTER(_GOptionEntry)),
	("translation_domain",		ctypes.POINTER(ctypes.c_char)),] )

g_option_context_parse = _rpythonic_function_(		"g_option_context_parse", ctypes.c_int, [
	("context",		ctypes.POINTER(_GOptionContext)),
	("argc",		ctypes.POINTER(ctypes.c_int)),
	("argv",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(ctypes.c_char)))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_option_context_set_translate_func = _rpythonic_function_(		"g_option_context_set_translate_func", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GOptionContext)),
	("func",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),))),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy_notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_option_context_set_translation_domain = _rpythonic_function_(		"g_option_context_set_translation_domain", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GOptionContext)),
	("domain",		ctypes.POINTER(ctypes.c_char)),] )

g_option_context_add_group = _rpythonic_function_(		"g_option_context_add_group", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GOptionContext)),
	("group",		ctypes.POINTER(_GOptionGroup)),] )

g_option_context_set_main_group = _rpythonic_function_(		"g_option_context_set_main_group", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GOptionContext)),
	("group",		ctypes.POINTER(_GOptionGroup)),] )

g_option_context_get_main_group = _rpythonic_function_(		"g_option_context_get_main_group", ctypes.POINTER(_GOptionGroup), [
	("context",		ctypes.POINTER(_GOptionContext)),] )

g_option_context_get_help = _rpythonic_function_(		"g_option_context_get_help", ctypes.POINTER(ctypes.c_char), [
	("context",		ctypes.POINTER(_GOptionContext)),
	("main_help",		ctypes.c_int),
	("group",		ctypes.POINTER(_GOptionGroup)),] )

g_option_group_new = _rpythonic_function_(		"g_option_group_new", ctypes.POINTER(_GOptionGroup), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("description",		ctypes.POINTER(ctypes.c_char)),
	("help_description",		ctypes.POINTER(ctypes.c_char)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_option_group_set_parse_hooks = _rpythonic_function_(		"g_option_group_set_parse_hooks", ctypes.c_void_p, [
	("group",		ctypes.POINTER(_GOptionGroup)),
	("pre_parse_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GOptionContext),ctypes.POINTER(_GOptionGroup),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.POINTER(_GError)),)),
	("post_parse_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GOptionContext),ctypes.POINTER(_GOptionGroup),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.POINTER(_GError)),)),] )

g_option_group_set_error_hook = _rpythonic_function_(		"g_option_group_set_error_hook", ctypes.c_void_p, [
	("group",		ctypes.POINTER(_GOptionGroup)),
	("error_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GOptionContext),ctypes.POINTER(_GOptionGroup),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.POINTER(_GError)),)),] )

g_option_group_free = _rpythonic_function_(		"g_option_group_free", ctypes.c_void_p, [
	("group",		ctypes.POINTER(_GOptionGroup)),] )

g_option_group_add_entries = _rpythonic_function_(		"g_option_group_add_entries", ctypes.c_void_p, [
	("group",		ctypes.POINTER(_GOptionGroup)),
	("entries",		ctypes.POINTER(_GOptionEntry)),] )

g_option_group_set_translate_func = _rpythonic_function_(		"g_option_group_set_translate_func", ctypes.c_void_p, [
	("group",		ctypes.POINTER(_GOptionGroup)),
	("func",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),))),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy_notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_option_group_set_translation_domain = _rpythonic_function_(		"g_option_group_set_translation_domain", ctypes.c_void_p, [
	("group",		ctypes.POINTER(_GOptionGroup)),
	("domain",		ctypes.POINTER(ctypes.c_char)),] )

g_pattern_spec_new = _rpythonic_function_(		"g_pattern_spec_new", ctypes.POINTER(_GPatternSpec), [
	("pattern",		ctypes.POINTER(ctypes.c_char)),] )

g_pattern_spec_free = _rpythonic_function_(		"g_pattern_spec_free", ctypes.c_void_p, [
	("pspec",		ctypes.POINTER(_GPatternSpec)),] )

g_pattern_spec_equal = _rpythonic_function_(		"g_pattern_spec_equal", ctypes.c_int, [
	("pspec1",		ctypes.POINTER(_GPatternSpec)),
	("pspec2",		ctypes.POINTER(_GPatternSpec)),] )

g_pattern_match = _rpythonic_function_(		"g_pattern_match", ctypes.c_int, [
	("pspec",		ctypes.POINTER(_GPatternSpec)),
	("string_length",		ctypes.c_uint),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("string_reversed",		ctypes.POINTER(ctypes.c_char)),] )

g_pattern_match_string = _rpythonic_function_(		"g_pattern_match_string", ctypes.c_int, [
	("pspec",		ctypes.POINTER(_GPatternSpec)),
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_pattern_match_simple = _rpythonic_function_(		"g_pattern_match_simple", ctypes.c_int, [
	("pattern",		ctypes.POINTER(ctypes.c_char)),
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_spaced_primes_closest = _rpythonic_function_(		"g_spaced_primes_closest", ctypes.c_uint, [
	("num",		ctypes.c_uint),] )

g_qsort_with_data = _rpythonic_function_(		"g_qsort_with_data", ctypes.c_void_p, [
	("pbase",		ctypes.POINTER(ctypes.c_void_p)),
	("total_elems",		ctypes.c_int),
	("size",		ctypes.c_uint),
	("compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_queue_new = _rpythonic_function_(		"g_queue_new", ctypes.POINTER(_GQueue), [] )

g_queue_free = _rpythonic_function_(		"g_queue_free", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),] )

g_queue_init = _rpythonic_function_(		"g_queue_init", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),] )

g_queue_clear = _rpythonic_function_(		"g_queue_clear", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),] )

g_queue_is_empty = _rpythonic_function_(		"g_queue_is_empty", ctypes.c_int, [
	("queue",		ctypes.POINTER(_GQueue)),] )

g_queue_get_length = _rpythonic_function_(		"g_queue_get_length", ctypes.c_uint, [
	("queue",		ctypes.POINTER(_GQueue)),] )

g_queue_reverse = _rpythonic_function_(		"g_queue_reverse", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),] )

g_queue_copy = _rpythonic_function_(		"g_queue_copy", ctypes.POINTER(_GQueue), [
	("queue",		ctypes.POINTER(_GQueue)),] )

g_queue_foreach = _rpythonic_function_(		"g_queue_foreach", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_queue_find = _rpythonic_function_(		"g_queue_find", ctypes.POINTER(_GList), [
	("queue",		ctypes.POINTER(_GQueue)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_queue_find_custom = _rpythonic_function_(		"g_queue_find_custom", ctypes.POINTER(_GList), [
	("queue",		ctypes.POINTER(_GQueue)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_queue_sort = _rpythonic_function_(		"g_queue_sort", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),
	("compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_queue_push_head = _rpythonic_function_(		"g_queue_push_head", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_queue_push_tail = _rpythonic_function_(		"g_queue_push_tail", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_queue_push_nth = _rpythonic_function_(		"g_queue_push_nth", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("n",		ctypes.c_int),] )

g_queue_pop_head = _rpythonic_function_(		"g_queue_pop_head", ctypes.POINTER(ctypes.c_void_p), [
	("queue",		ctypes.POINTER(_GQueue)),] )

g_queue_pop_tail = _rpythonic_function_(		"g_queue_pop_tail", ctypes.POINTER(ctypes.c_void_p), [
	("queue",		ctypes.POINTER(_GQueue)),] )

g_queue_pop_nth = _rpythonic_function_(		"g_queue_pop_nth", ctypes.POINTER(ctypes.c_void_p), [
	("queue",		ctypes.POINTER(_GQueue)),
	("n",		ctypes.c_uint),] )

g_queue_peek_head = _rpythonic_function_(		"g_queue_peek_head", ctypes.POINTER(ctypes.c_void_p), [
	("queue",		ctypes.POINTER(_GQueue)),] )

g_queue_peek_tail = _rpythonic_function_(		"g_queue_peek_tail", ctypes.POINTER(ctypes.c_void_p), [
	("queue",		ctypes.POINTER(_GQueue)),] )

g_queue_peek_nth = _rpythonic_function_(		"g_queue_peek_nth", ctypes.POINTER(ctypes.c_void_p), [
	("queue",		ctypes.POINTER(_GQueue)),
	("n",		ctypes.c_uint),] )

g_queue_index = _rpythonic_function_(		"g_queue_index", ctypes.c_int, [
	("queue",		ctypes.POINTER(_GQueue)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_queue_remove = _rpythonic_function_(		"g_queue_remove", ctypes.c_int, [
	("queue",		ctypes.POINTER(_GQueue)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_queue_remove_all = _rpythonic_function_(		"g_queue_remove_all", ctypes.c_uint, [
	("queue",		ctypes.POINTER(_GQueue)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_queue_insert_before = _rpythonic_function_(		"g_queue_insert_before", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),
	("sibling",		ctypes.POINTER(_GList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_queue_insert_after = _rpythonic_function_(		"g_queue_insert_after", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),
	("sibling",		ctypes.POINTER(_GList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_queue_insert_sorted = _rpythonic_function_(		"g_queue_insert_sorted", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_queue_push_head_link = _rpythonic_function_(		"g_queue_push_head_link", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),
	("link_",		ctypes.POINTER(_GList)),] )

g_queue_push_tail_link = _rpythonic_function_(		"g_queue_push_tail_link", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),
	("link_",		ctypes.POINTER(_GList)),] )

g_queue_push_nth_link = _rpythonic_function_(		"g_queue_push_nth_link", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),
	("n",		ctypes.c_int),
	("link_",		ctypes.POINTER(_GList)),] )

g_queue_pop_head_link = _rpythonic_function_(		"g_queue_pop_head_link", ctypes.POINTER(_GList), [
	("queue",		ctypes.POINTER(_GQueue)),] )

g_queue_pop_tail_link = _rpythonic_function_(		"g_queue_pop_tail_link", ctypes.POINTER(_GList), [
	("queue",		ctypes.POINTER(_GQueue)),] )

g_queue_pop_nth_link = _rpythonic_function_(		"g_queue_pop_nth_link", ctypes.POINTER(_GList), [
	("queue",		ctypes.POINTER(_GQueue)),
	("n",		ctypes.c_uint),] )

g_queue_peek_head_link = _rpythonic_function_(		"g_queue_peek_head_link", ctypes.POINTER(_GList), [
	("queue",		ctypes.POINTER(_GQueue)),] )

g_queue_peek_tail_link = _rpythonic_function_(		"g_queue_peek_tail_link", ctypes.POINTER(_GList), [
	("queue",		ctypes.POINTER(_GQueue)),] )

g_queue_peek_nth_link = _rpythonic_function_(		"g_queue_peek_nth_link", ctypes.POINTER(_GList), [
	("queue",		ctypes.POINTER(_GQueue)),
	("n",		ctypes.c_uint),] )

g_queue_link_index = _rpythonic_function_(		"g_queue_link_index", ctypes.c_int, [
	("queue",		ctypes.POINTER(_GQueue)),
	("link_",		ctypes.POINTER(_GList)),] )

g_queue_unlink = _rpythonic_function_(		"g_queue_unlink", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),
	("link_",		ctypes.POINTER(_GList)),] )

g_queue_delete_link = _rpythonic_function_(		"g_queue_delete_link", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),
	("link_",		ctypes.POINTER(_GList)),] )

g_rand_new_with_seed = _rpythonic_function_(		"g_rand_new_with_seed", ctypes.POINTER(_GRand), [
	("seed",		ctypes.c_uint),] )

g_rand_new_with_seed_array = _rpythonic_function_(		"g_rand_new_with_seed_array", ctypes.POINTER(_GRand), [
	("seed",		ctypes.POINTER(ctypes.c_uint)),
	("seed_length",		ctypes.c_uint),] )

g_rand_new = _rpythonic_function_(		"g_rand_new", ctypes.POINTER(_GRand), [] )

g_rand_free = _rpythonic_function_(		"g_rand_free", ctypes.c_void_p, [
	("rand_",		ctypes.POINTER(_GRand)),] )

g_rand_copy = _rpythonic_function_(		"g_rand_copy", ctypes.POINTER(_GRand), [
	("rand_",		ctypes.POINTER(_GRand)),] )

g_rand_set_seed = _rpythonic_function_(		"g_rand_set_seed", ctypes.c_void_p, [
	("rand_",		ctypes.POINTER(_GRand)),
	("seed",		ctypes.c_uint),] )

g_rand_set_seed_array = _rpythonic_function_(		"g_rand_set_seed_array", ctypes.c_void_p, [
	("rand_",		ctypes.POINTER(_GRand)),
	("seed",		ctypes.POINTER(ctypes.c_uint)),
	("seed_length",		ctypes.c_uint),] )

g_rand_int = _rpythonic_function_(		"g_rand_int", ctypes.c_uint, [
	("rand_",		ctypes.POINTER(_GRand)),] )

g_rand_int_range = _rpythonic_function_(		"g_rand_int_range", ctypes.c_int, [
	("rand_",		ctypes.POINTER(_GRand)),
	("begin",		ctypes.c_int),
	("end",		ctypes.c_int),] )

g_rand_double = _rpythonic_function_(		"g_rand_double", ctypes.c_double, [
	("rand_",		ctypes.POINTER(_GRand)),] )

g_rand_double_range = _rpythonic_function_(		"g_rand_double_range", ctypes.c_double, [
	("rand_",		ctypes.POINTER(_GRand)),
	("begin",		ctypes.c_double),
	("end",		ctypes.c_double),] )

g_random_set_seed = _rpythonic_function_(		"g_random_set_seed", ctypes.c_void_p, [
	("seed",		ctypes.c_uint),] )

g_random_int = _rpythonic_function_(		"g_random_int", ctypes.c_uint, [] )

g_random_int_range = _rpythonic_function_(		"g_random_int_range", ctypes.c_int, [
	("begin",		ctypes.c_int),
	("end",		ctypes.c_int),] )

g_random_double = _rpythonic_function_(		"g_random_double", ctypes.c_double, [] )

g_random_double_range = _rpythonic_function_(		"g_random_double_range", ctypes.c_double, [
	("begin",		ctypes.c_double),
	("end",		ctypes.c_double),] )

g_relation_new = _rpythonic_function_(		"g_relation_new", ctypes.POINTER(_GRelation), [
	("fields",		ctypes.c_int),] )

g_relation_destroy = _rpythonic_function_(		"g_relation_destroy", ctypes.c_void_p, [
	("relation",		ctypes.POINTER(_GRelation)),] )

g_relation_index = _rpythonic_function_(		"g_relation_index", ctypes.c_void_p, [
	("relation",		ctypes.POINTER(_GRelation)),
	("field",		ctypes.c_int),
	("hash_func",		ctypes.CFUNCTYPE(ctypes.c_uint, )),
	("key_equal_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_relation_delete = _rpythonic_function_(		"g_relation_delete", ctypes.c_int, [
	("relation",		ctypes.POINTER(_GRelation)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),
	("field",		ctypes.c_int),] )

g_relation_select = _rpythonic_function_(		"g_relation_select", ctypes.POINTER(_GTuples), [
	("relation",		ctypes.POINTER(_GRelation)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),
	("field",		ctypes.c_int),] )

g_relation_count = _rpythonic_function_(		"g_relation_count", ctypes.c_int, [
	("relation",		ctypes.POINTER(_GRelation)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),
	("field",		ctypes.c_int),] )

g_relation_print = _rpythonic_function_(		"g_relation_print", ctypes.c_void_p, [
	("relation",		ctypes.POINTER(_GRelation)),] )

g_tuples_destroy = _rpythonic_function_(		"g_tuples_destroy", ctypes.c_void_p, [
	("tuples",		ctypes.POINTER(_GTuples)),] )

g_tuples_index = _rpythonic_function_(		"g_tuples_index", ctypes.POINTER(ctypes.c_void_p), [
	("tuples",		ctypes.POINTER(_GTuples)),
	("index_",		ctypes.c_int),
	("field",		ctypes.c_int),] )

g_regex_error_quark = _rpythonic_function_(		"g_regex_error_quark", ctypes.c_uint, [] )

GRegexEvalCallback = _rpythonic_function_(		"GRegexEvalCallback", ctypes.c_int, [
	("match_info",		ctypes.POINTER(_GMatchInfo)),
	("result",		ctypes.POINTER(_GString)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_regex_new = _rpythonic_function_(		"g_regex_new", ctypes.POINTER(_GRegex), [
	("pattern",		ctypes.POINTER(ctypes.c_char)),
	("compile_options",		ctypes.c_int),
	("match_options",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_regex_ref = _rpythonic_function_(		"g_regex_ref", ctypes.POINTER(_GRegex), [
	("regex",		ctypes.POINTER(_GRegex)),] )

g_regex_unref = _rpythonic_function_(		"g_regex_unref", ctypes.c_void_p, [
	("regex",		ctypes.POINTER(_GRegex)),] )

g_regex_get_pattern = _rpythonic_function_(		"g_regex_get_pattern", ctypes.POINTER(ctypes.c_char), [
	("regex",		ctypes.POINTER(_GRegex)),] )

g_regex_get_max_backref = _rpythonic_function_(		"g_regex_get_max_backref", ctypes.c_int, [
	("regex",		ctypes.POINTER(_GRegex)),] )

g_regex_get_capture_count = _rpythonic_function_(		"g_regex_get_capture_count", ctypes.c_int, [
	("regex",		ctypes.POINTER(_GRegex)),] )

g_regex_get_string_number = _rpythonic_function_(		"g_regex_get_string_number", ctypes.c_int, [
	("regex",		ctypes.POINTER(_GRegex)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_regex_escape_string = _rpythonic_function_(		"g_regex_escape_string", ctypes.POINTER(ctypes.c_char), [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),] )

g_regex_escape_nul = _rpythonic_function_(		"g_regex_escape_nul", ctypes.POINTER(ctypes.c_char), [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),] )

g_regex_get_compile_flags = _rpythonic_function_(		"g_regex_get_compile_flags", ctypes.c_int, [
	("regex",		ctypes.POINTER(_GRegex)),] )

g_regex_get_match_flags = _rpythonic_function_(		"g_regex_get_match_flags", ctypes.c_int, [
	("regex",		ctypes.POINTER(_GRegex)),] )

g_regex_match_simple = _rpythonic_function_(		"g_regex_match_simple", ctypes.c_int, [
	("pattern",		ctypes.POINTER(ctypes.c_char)),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("compile_options",		ctypes.c_int),
	("match_options",		ctypes.c_int),] )

g_regex_match = _rpythonic_function_(		"g_regex_match", ctypes.c_int, [
	("regex",		ctypes.POINTER(_GRegex)),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("match_options",		ctypes.c_int),
	("match_info",		ctypes.POINTER(ctypes.POINTER(_GMatchInfo))),] )

g_regex_match_full = _rpythonic_function_(		"g_regex_match_full", ctypes.c_int, [
	("regex",		ctypes.POINTER(_GRegex)),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("string_len",		ctypes.c_int),
	("start_position",		ctypes.c_int),
	("match_options",		ctypes.c_int),
	("match_info",		ctypes.POINTER(ctypes.POINTER(_GMatchInfo))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_regex_match_all = _rpythonic_function_(		"g_regex_match_all", ctypes.c_int, [
	("regex",		ctypes.POINTER(_GRegex)),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("match_options",		ctypes.c_int),
	("match_info",		ctypes.POINTER(ctypes.POINTER(_GMatchInfo))),] )

g_regex_match_all_full = _rpythonic_function_(		"g_regex_match_all_full", ctypes.c_int, [
	("regex",		ctypes.POINTER(_GRegex)),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("string_len",		ctypes.c_int),
	("start_position",		ctypes.c_int),
	("match_options",		ctypes.c_int),
	("match_info",		ctypes.POINTER(ctypes.POINTER(_GMatchInfo))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_regex_split_simple = _rpythonic_function_(		"g_regex_split_simple", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("pattern",		ctypes.POINTER(ctypes.c_char)),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("compile_options",		ctypes.c_int),
	("match_options",		ctypes.c_int),] )

g_regex_split = _rpythonic_function_(		"g_regex_split", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("regex",		ctypes.POINTER(_GRegex)),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("match_options",		ctypes.c_int),] )

g_regex_split_full = _rpythonic_function_(		"g_regex_split_full", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("regex",		ctypes.POINTER(_GRegex)),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("string_len",		ctypes.c_int),
	("start_position",		ctypes.c_int),
	("match_options",		ctypes.c_int),
	("max_tokens",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_regex_replace = _rpythonic_function_(		"g_regex_replace", ctypes.POINTER(ctypes.c_char), [
	("regex",		ctypes.POINTER(_GRegex)),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("string_len",		ctypes.c_int),
	("start_position",		ctypes.c_int),
	("replacement",		ctypes.POINTER(ctypes.c_char)),
	("match_options",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_regex_replace_literal = _rpythonic_function_(		"g_regex_replace_literal", ctypes.POINTER(ctypes.c_char), [
	("regex",		ctypes.POINTER(_GRegex)),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("string_len",		ctypes.c_int),
	("start_position",		ctypes.c_int),
	("replacement",		ctypes.POINTER(ctypes.c_char)),
	("match_options",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_regex_replace_eval = _rpythonic_function_(		"g_regex_replace_eval", ctypes.POINTER(ctypes.c_char), [
	("regex",		ctypes.POINTER(_GRegex)),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("string_len",		ctypes.c_int),
	("start_position",		ctypes.c_int),
	("match_options",		ctypes.c_int),
	("C_eval",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GMatchInfo),ctypes.POINTER(_GString),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_regex_check_replacement = _rpythonic_function_(		"g_regex_check_replacement", ctypes.c_int, [
	("replacement",		ctypes.POINTER(ctypes.c_char)),
	("has_references",		ctypes.POINTER(ctypes.c_int)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_match_info_get_regex = _rpythonic_function_(		"g_match_info_get_regex", ctypes.POINTER(_GRegex), [
	("match_info",		ctypes.POINTER(_GMatchInfo)),] )

g_match_info_get_string = _rpythonic_function_(		"g_match_info_get_string", ctypes.POINTER(ctypes.c_char), [
	("match_info",		ctypes.POINTER(_GMatchInfo)),] )

g_match_info_ref = _rpythonic_function_(		"g_match_info_ref", ctypes.POINTER(_GMatchInfo), [
	("match_info",		ctypes.POINTER(_GMatchInfo)),] )

g_match_info_unref = _rpythonic_function_(		"g_match_info_unref", ctypes.c_void_p, [
	("match_info",		ctypes.POINTER(_GMatchInfo)),] )

g_match_info_free = _rpythonic_function_(		"g_match_info_free", ctypes.c_void_p, [
	("match_info",		ctypes.POINTER(_GMatchInfo)),] )

g_match_info_next = _rpythonic_function_(		"g_match_info_next", ctypes.c_int, [
	("match_info",		ctypes.POINTER(_GMatchInfo)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_match_info_matches = _rpythonic_function_(		"g_match_info_matches", ctypes.c_int, [
	("match_info",		ctypes.POINTER(_GMatchInfo)),] )

g_match_info_get_match_count = _rpythonic_function_(		"g_match_info_get_match_count", ctypes.c_int, [
	("match_info",		ctypes.POINTER(_GMatchInfo)),] )

g_match_info_is_partial_match = _rpythonic_function_(		"g_match_info_is_partial_match", ctypes.c_int, [
	("match_info",		ctypes.POINTER(_GMatchInfo)),] )

g_match_info_expand_references = _rpythonic_function_(		"g_match_info_expand_references", ctypes.POINTER(ctypes.c_char), [
	("match_info",		ctypes.POINTER(_GMatchInfo)),
	("string_to_expand",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_match_info_fetch = _rpythonic_function_(		"g_match_info_fetch", ctypes.POINTER(ctypes.c_char), [
	("match_info",		ctypes.POINTER(_GMatchInfo)),
	("match_num",		ctypes.c_int),] )

g_match_info_fetch_pos = _rpythonic_function_(		"g_match_info_fetch_pos", ctypes.c_int, [
	("match_info",		ctypes.POINTER(_GMatchInfo)),
	("match_num",		ctypes.c_int),
	("start_pos",		ctypes.POINTER(ctypes.c_int)),
	("end_pos",		ctypes.POINTER(ctypes.c_int)),] )

g_match_info_fetch_named = _rpythonic_function_(		"g_match_info_fetch_named", ctypes.POINTER(ctypes.c_char), [
	("match_info",		ctypes.POINTER(_GMatchInfo)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_match_info_fetch_named_pos = _rpythonic_function_(		"g_match_info_fetch_named_pos", ctypes.c_int, [
	("match_info",		ctypes.POINTER(_GMatchInfo)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("start_pos",		ctypes.POINTER(ctypes.c_int)),
	("end_pos",		ctypes.POINTER(ctypes.c_int)),] )

g_match_info_fetch_all = _rpythonic_function_(		"g_match_info_fetch_all", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("match_info",		ctypes.POINTER(_GMatchInfo)),] )

GScannerMsgFunc = _rpythonic_function_(		"GScannerMsgFunc", ctypes.c_void_p, [
	("scanner",		ctypes.POINTER(_GScanner)),
	("message",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.c_int),] )

g_scanner_new = _rpythonic_function_(		"g_scanner_new", ctypes.POINTER(_GScanner), [
	("config_templ",		ctypes.POINTER(_GScannerConfig)),] )

g_scanner_destroy = _rpythonic_function_(		"g_scanner_destroy", ctypes.c_void_p, [
	("scanner",		ctypes.POINTER(_GScanner)),] )

g_scanner_input_file = _rpythonic_function_(		"g_scanner_input_file", ctypes.c_void_p, [
	("scanner",		ctypes.POINTER(_GScanner)),
	("input_fd",		ctypes.c_int),] )

g_scanner_sync_file_offset = _rpythonic_function_(		"g_scanner_sync_file_offset", ctypes.c_void_p, [
	("scanner",		ctypes.POINTER(_GScanner)),] )

g_scanner_input_text = _rpythonic_function_(		"g_scanner_input_text", ctypes.c_void_p, [
	("scanner",		ctypes.POINTER(_GScanner)),
	("text",		ctypes.POINTER(ctypes.c_char)),
	("text_len",		ctypes.c_uint),] )

g_scanner_get_next_token = _rpythonic_function_(		"g_scanner_get_next_token", ctypes.c_int, [
	("scanner",		ctypes.POINTER(_GScanner)),] )

g_scanner_peek_next_token = _rpythonic_function_(		"g_scanner_peek_next_token", ctypes.c_int, [
	("scanner",		ctypes.POINTER(_GScanner)),] )

g_scanner_cur_token = _rpythonic_function_(		"g_scanner_cur_token", ctypes.c_int, [
	("scanner",		ctypes.POINTER(_GScanner)),] )

g_scanner_cur_value = _rpythonic_function_(		"g_scanner_cur_value", _GTokenValue, [
	("scanner",		ctypes.POINTER(_GScanner)),] )

g_scanner_cur_line = _rpythonic_function_(		"g_scanner_cur_line", ctypes.c_uint, [
	("scanner",		ctypes.POINTER(_GScanner)),] )

g_scanner_cur_position = _rpythonic_function_(		"g_scanner_cur_position", ctypes.c_uint, [
	("scanner",		ctypes.POINTER(_GScanner)),] )

g_scanner_eof = _rpythonic_function_(		"g_scanner_eof", ctypes.c_int, [
	("scanner",		ctypes.POINTER(_GScanner)),] )

g_scanner_set_scope = _rpythonic_function_(		"g_scanner_set_scope", ctypes.c_uint, [
	("scanner",		ctypes.POINTER(_GScanner)),
	("scope_id",		ctypes.c_uint),] )

g_scanner_scope_add_symbol = _rpythonic_function_(		"g_scanner_scope_add_symbol", ctypes.c_void_p, [
	("scanner",		ctypes.POINTER(_GScanner)),
	("scope_id",		ctypes.c_uint),
	("symbol",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_void_p)),] )

g_scanner_scope_remove_symbol = _rpythonic_function_(		"g_scanner_scope_remove_symbol", ctypes.c_void_p, [
	("scanner",		ctypes.POINTER(_GScanner)),
	("scope_id",		ctypes.c_uint),
	("symbol",		ctypes.POINTER(ctypes.c_char)),] )

g_scanner_scope_lookup_symbol = _rpythonic_function_(		"g_scanner_scope_lookup_symbol", ctypes.POINTER(ctypes.c_void_p), [
	("scanner",		ctypes.POINTER(_GScanner)),
	("scope_id",		ctypes.c_uint),
	("symbol",		ctypes.POINTER(ctypes.c_char)),] )

g_scanner_scope_foreach_symbol = _rpythonic_function_(		"g_scanner_scope_foreach_symbol", ctypes.c_void_p, [
	("scanner",		ctypes.POINTER(_GScanner)),
	("scope_id",		ctypes.c_uint),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_scanner_lookup_symbol = _rpythonic_function_(		"g_scanner_lookup_symbol", ctypes.POINTER(ctypes.c_void_p), [
	("scanner",		ctypes.POINTER(_GScanner)),
	("symbol",		ctypes.POINTER(ctypes.c_char)),] )

g_scanner_unexp_token = _rpythonic_function_(		"g_scanner_unexp_token", ctypes.c_void_p, [
	("scanner",		ctypes.POINTER(_GScanner)),
	("expected_token",		ctypes.c_int),
	("identifier_spec",		ctypes.POINTER(ctypes.c_char)),
	("symbol_spec",		ctypes.POINTER(ctypes.c_char)),
	("symbol_name",		ctypes.POINTER(ctypes.c_char)),
	("message",		ctypes.POINTER(ctypes.c_char)),
	("is_error",		ctypes.c_int),] )

GSequenceIterCompareFunc = _rpythonic_function_(		"GSequenceIterCompareFunc", ctypes.c_int, [
	("a",		ctypes.POINTER(_GSequenceNode)),
	("b",		ctypes.POINTER(_GSequenceNode)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_new = _rpythonic_function_(		"g_sequence_new", ctypes.POINTER(_GSequence), [
	("data_destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_sequence_free = _rpythonic_function_(		"g_sequence_free", ctypes.c_void_p, [
	("seq",		ctypes.POINTER(_GSequence)),] )

g_sequence_get_length = _rpythonic_function_(		"g_sequence_get_length", ctypes.c_int, [
	("seq",		ctypes.POINTER(_GSequence)),] )

g_sequence_foreach = _rpythonic_function_(		"g_sequence_foreach", ctypes.c_void_p, [
	("seq",		ctypes.POINTER(_GSequence)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_foreach_range = _rpythonic_function_(		"g_sequence_foreach_range", ctypes.c_void_p, [
	("begin",		ctypes.POINTER(_GSequenceNode)),
	("end",		ctypes.POINTER(_GSequenceNode)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_sort = _rpythonic_function_(		"g_sequence_sort", ctypes.c_void_p, [
	("seq",		ctypes.POINTER(_GSequence)),
	("cmp_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("cmp_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_sort_iter = _rpythonic_function_(		"g_sequence_sort_iter", ctypes.c_void_p, [
	("seq",		ctypes.POINTER(_GSequence)),
	("cmp_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GSequenceNode),ctypes.POINTER(_GSequenceNode),ctypes.POINTER(ctypes.c_void_p),)),
	("cmp_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_get_begin_iter = _rpythonic_function_(		"g_sequence_get_begin_iter", ctypes.POINTER(_GSequenceNode), [
	("seq",		ctypes.POINTER(_GSequence)),] )

g_sequence_get_end_iter = _rpythonic_function_(		"g_sequence_get_end_iter", ctypes.POINTER(_GSequenceNode), [
	("seq",		ctypes.POINTER(_GSequence)),] )

g_sequence_get_iter_at_pos = _rpythonic_function_(		"g_sequence_get_iter_at_pos", ctypes.POINTER(_GSequenceNode), [
	("seq",		ctypes.POINTER(_GSequence)),
	("pos",		ctypes.c_int),] )

g_sequence_append = _rpythonic_function_(		"g_sequence_append", ctypes.POINTER(_GSequenceNode), [
	("seq",		ctypes.POINTER(_GSequence)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_prepend = _rpythonic_function_(		"g_sequence_prepend", ctypes.POINTER(_GSequenceNode), [
	("seq",		ctypes.POINTER(_GSequence)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_insert_before = _rpythonic_function_(		"g_sequence_insert_before", ctypes.POINTER(_GSequenceNode), [
	("iter",		ctypes.POINTER(_GSequenceNode)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_move = _rpythonic_function_(		"g_sequence_move", ctypes.c_void_p, [
	("src",		ctypes.POINTER(_GSequenceNode)),
	("dest",		ctypes.POINTER(_GSequenceNode)),] )

g_sequence_swap = _rpythonic_function_(		"g_sequence_swap", ctypes.c_void_p, [
	("a",		ctypes.POINTER(_GSequenceNode)),
	("b",		ctypes.POINTER(_GSequenceNode)),] )

g_sequence_insert_sorted = _rpythonic_function_(		"g_sequence_insert_sorted", ctypes.POINTER(_GSequenceNode), [
	("seq",		ctypes.POINTER(_GSequence)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("cmp_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("cmp_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_insert_sorted_iter = _rpythonic_function_(		"g_sequence_insert_sorted_iter", ctypes.POINTER(_GSequenceNode), [
	("seq",		ctypes.POINTER(_GSequence)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("iter_cmp",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GSequenceNode),ctypes.POINTER(_GSequenceNode),ctypes.POINTER(ctypes.c_void_p),)),
	("cmp_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_sort_changed = _rpythonic_function_(		"g_sequence_sort_changed", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(_GSequenceNode)),
	("cmp_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("cmp_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_sort_changed_iter = _rpythonic_function_(		"g_sequence_sort_changed_iter", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(_GSequenceNode)),
	("iter_cmp",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GSequenceNode),ctypes.POINTER(_GSequenceNode),ctypes.POINTER(ctypes.c_void_p),)),
	("cmp_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_remove = _rpythonic_function_(		"g_sequence_remove", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(_GSequenceNode)),] )

g_sequence_remove_range = _rpythonic_function_(		"g_sequence_remove_range", ctypes.c_void_p, [
	("begin",		ctypes.POINTER(_GSequenceNode)),
	("end",		ctypes.POINTER(_GSequenceNode)),] )

g_sequence_move_range = _rpythonic_function_(		"g_sequence_move_range", ctypes.c_void_p, [
	("dest",		ctypes.POINTER(_GSequenceNode)),
	("begin",		ctypes.POINTER(_GSequenceNode)),
	("end",		ctypes.POINTER(_GSequenceNode)),] )

g_sequence_search = _rpythonic_function_(		"g_sequence_search", ctypes.POINTER(_GSequenceNode), [
	("seq",		ctypes.POINTER(_GSequence)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("cmp_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("cmp_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_search_iter = _rpythonic_function_(		"g_sequence_search_iter", ctypes.POINTER(_GSequenceNode), [
	("seq",		ctypes.POINTER(_GSequence)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("iter_cmp",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GSequenceNode),ctypes.POINTER(_GSequenceNode),ctypes.POINTER(ctypes.c_void_p),)),
	("cmp_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_lookup = _rpythonic_function_(		"g_sequence_lookup", ctypes.POINTER(_GSequenceNode), [
	("seq",		ctypes.POINTER(_GSequence)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("cmp_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("cmp_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_lookup_iter = _rpythonic_function_(		"g_sequence_lookup_iter", ctypes.POINTER(_GSequenceNode), [
	("seq",		ctypes.POINTER(_GSequence)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("iter_cmp",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GSequenceNode),ctypes.POINTER(_GSequenceNode),ctypes.POINTER(ctypes.c_void_p),)),
	("cmp_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_get = _rpythonic_function_(		"g_sequence_get", ctypes.POINTER(ctypes.c_void_p), [
	("iter",		ctypes.POINTER(_GSequenceNode)),] )

g_sequence_set = _rpythonic_function_(		"g_sequence_set", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(_GSequenceNode)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_iter_is_begin = _rpythonic_function_(		"g_sequence_iter_is_begin", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GSequenceNode)),] )

g_sequence_iter_is_end = _rpythonic_function_(		"g_sequence_iter_is_end", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GSequenceNode)),] )

g_sequence_iter_next = _rpythonic_function_(		"g_sequence_iter_next", ctypes.POINTER(_GSequenceNode), [
	("iter",		ctypes.POINTER(_GSequenceNode)),] )

g_sequence_iter_prev = _rpythonic_function_(		"g_sequence_iter_prev", ctypes.POINTER(_GSequenceNode), [
	("iter",		ctypes.POINTER(_GSequenceNode)),] )

g_sequence_iter_get_position = _rpythonic_function_(		"g_sequence_iter_get_position", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GSequenceNode)),] )

g_sequence_iter_move = _rpythonic_function_(		"g_sequence_iter_move", ctypes.POINTER(_GSequenceNode), [
	("iter",		ctypes.POINTER(_GSequenceNode)),
	("delta",		ctypes.c_int),] )

g_sequence_iter_get_sequence = _rpythonic_function_(		"g_sequence_iter_get_sequence", ctypes.POINTER(_GSequence), [
	("iter",		ctypes.POINTER(_GSequenceNode)),] )

g_sequence_iter_compare = _rpythonic_function_(		"g_sequence_iter_compare", ctypes.c_int, [
	("a",		ctypes.POINTER(_GSequenceNode)),
	("b",		ctypes.POINTER(_GSequenceNode)),] )

g_sequence_range_get_midpoint = _rpythonic_function_(		"g_sequence_range_get_midpoint", ctypes.POINTER(_GSequenceNode), [
	("begin",		ctypes.POINTER(_GSequenceNode)),
	("end",		ctypes.POINTER(_GSequenceNode)),] )

g_shell_error_quark = _rpythonic_function_(		"g_shell_error_quark", ctypes.c_uint, [] )

g_shell_quote = _rpythonic_function_(		"g_shell_quote", ctypes.POINTER(ctypes.c_char), [
	("unquoted_string",		ctypes.POINTER(ctypes.c_char)),] )

g_shell_unquote = _rpythonic_function_(		"g_shell_unquote", ctypes.POINTER(ctypes.c_char), [
	("quoted_string",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_shell_parse_argv = _rpythonic_function_(		"g_shell_parse_argv", ctypes.c_int, [
	("command_line",		ctypes.POINTER(ctypes.c_char)),
	("argcp",		ctypes.POINTER(ctypes.c_int)),
	("argvp",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(ctypes.c_char)))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

GSpawnChildSetupFunc = _rpythonic_function_(		"GSpawnChildSetupFunc", ctypes.c_void_p, [("user_data",		ctypes.c_void_p)] )

g_spawn_error_quark = _rpythonic_function_(		"g_spawn_error_quark", ctypes.c_uint, [] )

g_spawn_async = _rpythonic_function_(		"g_spawn_async", ctypes.c_int, [
	("working_directory",		ctypes.POINTER(ctypes.c_char)),
	("argv",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("envp",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("flags",		ctypes.c_int),
	("child_setup",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("child_pid",		ctypes.POINTER(ctypes.c_int)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_spawn_async_with_pipes = _rpythonic_function_(		"g_spawn_async_with_pipes", ctypes.c_int, [
	("working_directory",		ctypes.POINTER(ctypes.c_char)),
	("argv",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("envp",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("flags",		ctypes.c_int),
	("child_setup",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("child_pid",		ctypes.POINTER(ctypes.c_int)),
	("standard_input",		ctypes.POINTER(ctypes.c_int)),
	("standard_output",		ctypes.POINTER(ctypes.c_int)),
	("standard_error",		ctypes.POINTER(ctypes.c_int)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_spawn_sync = _rpythonic_function_(		"g_spawn_sync", ctypes.c_int, [
	("working_directory",		ctypes.POINTER(ctypes.c_char)),
	("argv",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("envp",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("flags",		ctypes.c_int),
	("child_setup",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("standard_output",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("standard_error",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("exit_status",		ctypes.POINTER(ctypes.c_int)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_spawn_command_line_sync = _rpythonic_function_(		"g_spawn_command_line_sync", ctypes.c_int, [
	("command_line",		ctypes.POINTER(ctypes.c_char)),
	("standard_output",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("standard_error",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("exit_status",		ctypes.POINTER(ctypes.c_int)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_spawn_command_line_async = _rpythonic_function_(		"g_spawn_command_line_async", ctypes.c_int, [
	("command_line",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_spawn_close_pid = _rpythonic_function_(		"g_spawn_close_pid", ctypes.c_void_p, [
	("pid",		ctypes.c_int),] )

g_ascii_tolower = _rpythonic_function_(		"g_ascii_tolower", ctypes.c_char, [
	("c",		ctypes.c_char),] )

g_ascii_toupper = _rpythonic_function_(		"g_ascii_toupper", ctypes.c_char, [
	("c",		ctypes.c_char),] )

g_ascii_digit_value = _rpythonic_function_(		"g_ascii_digit_value", ctypes.c_int, [
	("c",		ctypes.c_char),] )

g_ascii_xdigit_value = _rpythonic_function_(		"g_ascii_xdigit_value", ctypes.c_int, [
	("c",		ctypes.c_char),] )

g_strdelimit = _rpythonic_function_(		"g_strdelimit", ctypes.POINTER(ctypes.c_char), [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("delimiters",		ctypes.POINTER(ctypes.c_char)),
	("new_delimiter",		ctypes.c_char),] )

g_strcanon = _rpythonic_function_(		"g_strcanon", ctypes.POINTER(ctypes.c_char), [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("valid_chars",		ctypes.POINTER(ctypes.c_char)),
	("substitutor",		ctypes.c_char),] )

g_strerror = _rpythonic_function_(		"g_strerror", ctypes.POINTER(ctypes.c_char), [
	("errnum",		ctypes.c_int),] )

g_strsignal = _rpythonic_function_(		"g_strsignal", ctypes.POINTER(ctypes.c_char), [
	("signum",		ctypes.c_int),] )

g_strreverse = _rpythonic_function_(		"g_strreverse", ctypes.POINTER(ctypes.c_char), [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_strlcpy = _rpythonic_function_(		"g_strlcpy", ctypes.c_uint, [
	("dest",		ctypes.POINTER(ctypes.c_char)),
	("src",		ctypes.POINTER(ctypes.c_char)),
	("dest_size",		ctypes.c_uint),] )

g_strlcat = _rpythonic_function_(		"g_strlcat", ctypes.c_uint, [
	("dest",		ctypes.POINTER(ctypes.c_char)),
	("src",		ctypes.POINTER(ctypes.c_char)),
	("dest_size",		ctypes.c_uint),] )

g_strstr_len = _rpythonic_function_(		"g_strstr_len", ctypes.POINTER(ctypes.c_char), [
	("haystack",		ctypes.POINTER(ctypes.c_char)),
	("haystack_len",		ctypes.c_int),
	("needle",		ctypes.POINTER(ctypes.c_char)),] )

g_strrstr = _rpythonic_function_(		"g_strrstr", ctypes.POINTER(ctypes.c_char), [
	("haystack",		ctypes.POINTER(ctypes.c_char)),
	("needle",		ctypes.POINTER(ctypes.c_char)),] )

g_strrstr_len = _rpythonic_function_(		"g_strrstr_len", ctypes.POINTER(ctypes.c_char), [
	("haystack",		ctypes.POINTER(ctypes.c_char)),
	("haystack_len",		ctypes.c_int),
	("needle",		ctypes.POINTER(ctypes.c_char)),] )

g_str_has_suffix = _rpythonic_function_(		"g_str_has_suffix", ctypes.c_int, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("suffix",		ctypes.POINTER(ctypes.c_char)),] )

g_str_has_prefix = _rpythonic_function_(		"g_str_has_prefix", ctypes.c_int, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("prefix",		ctypes.POINTER(ctypes.c_char)),] )

g_strtod = _rpythonic_function_(		"g_strtod", ctypes.c_double, [
	("nptr",		ctypes.POINTER(ctypes.c_char)),
	("endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_ascii_strtod = _rpythonic_function_(		"g_ascii_strtod", ctypes.c_double, [
	("nptr",		ctypes.POINTER(ctypes.c_char)),
	("endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_ascii_strtoull = _rpythonic_function_(		"g_ascii_strtoull", ctypes.c_ulonglong, [
	("nptr",		ctypes.POINTER(ctypes.c_char)),
	("endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("base",		ctypes.c_uint),] )

g_ascii_strtoll = _rpythonic_function_(		"g_ascii_strtoll", ctypes.c_longlong, [
	("nptr",		ctypes.POINTER(ctypes.c_char)),
	("endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("base",		ctypes.c_uint),] )

g_ascii_dtostr = _rpythonic_function_(		"g_ascii_dtostr", ctypes.POINTER(ctypes.c_char), [
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("buf_len",		ctypes.c_int),
	("d",		ctypes.c_double),] )

g_ascii_formatd = _rpythonic_function_(		"g_ascii_formatd", ctypes.POINTER(ctypes.c_char), [
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("buf_len",		ctypes.c_int),
	("format",		ctypes.POINTER(ctypes.c_char)),
	("d",		ctypes.c_double),] )

g_strchug = _rpythonic_function_(		"g_strchug", ctypes.POINTER(ctypes.c_char), [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_strchomp = _rpythonic_function_(		"g_strchomp", ctypes.POINTER(ctypes.c_char), [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_ascii_strcasecmp = _rpythonic_function_(		"g_ascii_strcasecmp", ctypes.c_int, [
	("s1",		ctypes.POINTER(ctypes.c_char)),
	("s2",		ctypes.POINTER(ctypes.c_char)),] )

g_ascii_strncasecmp = _rpythonic_function_(		"g_ascii_strncasecmp", ctypes.c_int, [
	("s1",		ctypes.POINTER(ctypes.c_char)),
	("s2",		ctypes.POINTER(ctypes.c_char)),
	("n",		ctypes.c_uint),] )

g_ascii_strdown = _rpythonic_function_(		"g_ascii_strdown", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

g_ascii_strup = _rpythonic_function_(		"g_ascii_strup", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

g_strcasecmp = _rpythonic_function_(		"g_strcasecmp", ctypes.c_int, [
	("s1",		ctypes.POINTER(ctypes.c_char)),
	("s2",		ctypes.POINTER(ctypes.c_char)),] )

g_strncasecmp = _rpythonic_function_(		"g_strncasecmp", ctypes.c_int, [
	("s1",		ctypes.POINTER(ctypes.c_char)),
	("s2",		ctypes.POINTER(ctypes.c_char)),
	("n",		ctypes.c_uint),] )

g_strdown = _rpythonic_function_(		"g_strdown", ctypes.POINTER(ctypes.c_char), [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_strup = _rpythonic_function_(		"g_strup", ctypes.POINTER(ctypes.c_char), [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_strdup = _rpythonic_function_(		"g_strdup", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

g_strdup_vprintf = _rpythonic_function_(		"g_strdup_vprintf", ctypes.POINTER(ctypes.c_char), [
	("format",		ctypes.POINTER(ctypes.c_char)),
	("args",		ctypes.c_char),] )

g_strndup = _rpythonic_function_(		"g_strndup", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("n",		ctypes.c_uint),] )

g_strnfill = _rpythonic_function_(		"g_strnfill", ctypes.POINTER(ctypes.c_char), [
	("length",		ctypes.c_uint),
	("fill_char",		ctypes.c_char),] )

g_strcompress = _rpythonic_function_(		"g_strcompress", ctypes.POINTER(ctypes.c_char), [
	("source",		ctypes.POINTER(ctypes.c_char)),] )

g_strescape = _rpythonic_function_(		"g_strescape", ctypes.POINTER(ctypes.c_char), [
	("source",		ctypes.POINTER(ctypes.c_char)),
	("exceptions",		ctypes.POINTER(ctypes.c_char)),] )

g_memdup = _rpythonic_function_(		"g_memdup", ctypes.POINTER(ctypes.c_void_p), [
	("mem",		ctypes.POINTER(ctypes.c_void_p)),
	("byte_size",		ctypes.c_uint),] )

g_strsplit = _rpythonic_function_(		"g_strsplit", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("delimiter",		ctypes.POINTER(ctypes.c_char)),
	("max_tokens",		ctypes.c_int),] )

g_strsplit_set = _rpythonic_function_(		"g_strsplit_set", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("delimiters",		ctypes.POINTER(ctypes.c_char)),
	("max_tokens",		ctypes.c_int),] )

g_strjoinv = _rpythonic_function_(		"g_strjoinv", ctypes.POINTER(ctypes.c_char), [
	("separator",		ctypes.POINTER(ctypes.c_char)),
	("str_array",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_strfreev = _rpythonic_function_(		"g_strfreev", ctypes.c_void_p, [
	("str_array",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_strdupv = _rpythonic_function_(		"g_strdupv", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("str_array",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_strv_length = _rpythonic_function_(		"g_strv_length", ctypes.c_uint, [
	("str_array",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_stpcpy = _rpythonic_function_(		"g_stpcpy", ctypes.POINTER(ctypes.c_char), [
	("dest",		ctypes.POINTER(ctypes.c_char)),
	("src",		ctypes.POINTER(ctypes.c_char)),] )

g_strip_context = _rpythonic_function_(		"g_strip_context", ctypes.POINTER(ctypes.c_char), [
	("msgid",		ctypes.POINTER(ctypes.c_char)),
	("msgval",		ctypes.POINTER(ctypes.c_char)),] )

g_dgettext = _rpythonic_function_(		"g_dgettext", ctypes.POINTER(ctypes.c_char), [
	("domain",		ctypes.POINTER(ctypes.c_char)),
	("msgid",		ctypes.POINTER(ctypes.c_char)),] )

g_dcgettext = _rpythonic_function_(		"g_dcgettext", ctypes.POINTER(ctypes.c_char), [
	("domain",		ctypes.POINTER(ctypes.c_char)),
	("msgid",		ctypes.POINTER(ctypes.c_char)),
	("category",		ctypes.c_int),] )

g_dngettext = _rpythonic_function_(		"g_dngettext", ctypes.POINTER(ctypes.c_char), [
	("domain",		ctypes.POINTER(ctypes.c_char)),
	("msgid",		ctypes.POINTER(ctypes.c_char)),
	("msgid_plural",		ctypes.POINTER(ctypes.c_char)),
	("n",		ctypes.c_ulong),] )

g_dpgettext = _rpythonic_function_(		"g_dpgettext", ctypes.POINTER(ctypes.c_char), [
	("domain",		ctypes.POINTER(ctypes.c_char)),
	("msgctxtid",		ctypes.POINTER(ctypes.c_char)),
	("msgidoffset",		ctypes.c_uint),] )

g_dpgettext2 = _rpythonic_function_(		"g_dpgettext2", ctypes.POINTER(ctypes.c_char), [
	("domain",		ctypes.POINTER(ctypes.c_char)),
	("context",		ctypes.POINTER(ctypes.c_char)),
	("msgid",		ctypes.POINTER(ctypes.c_char)),] )

GTestFunc = _rpythonic_function_(		"GTestFunc", ctypes.c_void_p, [] )

GTestDataFunc = _rpythonic_function_(		"GTestDataFunc", ctypes.c_void_p, [("user_data",		ctypes.c_void_p)] )

GTestFixtureFunc = _rpythonic_function_(		"GTestFixtureFunc", ctypes.c_void_p, [
	("fixture",		ctypes.POINTER(ctypes.c_void_p)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_strcmp0 = _rpythonic_function_(		"g_strcmp0", ctypes.c_int, [
	("str1",		ctypes.POINTER(ctypes.c_char)),
	("str2",		ctypes.POINTER(ctypes.c_char)),] )

g_test_run = _rpythonic_function_(		"g_test_run", ctypes.c_int, [] )

g_test_add_func = _rpythonic_function_(		"g_test_add_func", ctypes.c_void_p, [
	("testpath",		ctypes.POINTER(ctypes.c_char)),
	("test_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_test_add_data_func = _rpythonic_function_(		"g_test_add_data_func", ctypes.c_void_p, [
	("testpath",		ctypes.POINTER(ctypes.c_char)),
	("test_data",		ctypes.POINTER(ctypes.c_void_p)),
	("test_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_test_fail = _rpythonic_function_(		"g_test_fail", ctypes.c_void_p, [] )

g_test_bug_base = _rpythonic_function_(		"g_test_bug_base", ctypes.c_void_p, [
	("uri_pattern",		ctypes.POINTER(ctypes.c_char)),] )

g_test_bug = _rpythonic_function_(		"g_test_bug", ctypes.c_void_p, [
	("bug_uri_snippet",		ctypes.POINTER(ctypes.c_char)),] )

g_test_timer_start = _rpythonic_function_(		"g_test_timer_start", ctypes.c_void_p, [] )

g_test_timer_elapsed = _rpythonic_function_(		"g_test_timer_elapsed", ctypes.c_double, [] )

g_test_timer_last = _rpythonic_function_(		"g_test_timer_last", ctypes.c_double, [] )

g_test_queue_free = _rpythonic_function_(		"g_test_queue_free", ctypes.c_void_p, [("gfree_pointer",		ctypes.c_void_p)] )

g_test_queue_destroy = _rpythonic_function_(		"g_test_queue_destroy", ctypes.c_void_p, [
	("destroy_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("destroy_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_test_trap_fork = _rpythonic_function_(		"g_test_trap_fork", ctypes.c_int, [
	("usec_timeout",		ctypes.c_ulonglong),
	("test_trap_flags",		ctypes.c_int),] )

g_test_trap_has_passed = _rpythonic_function_(		"g_test_trap_has_passed", ctypes.c_int, [] )

g_test_trap_reached_timeout = _rpythonic_function_(		"g_test_trap_reached_timeout", ctypes.c_int, [] )

g_test_rand_int = _rpythonic_function_(		"g_test_rand_int", ctypes.c_int, [] )

g_test_rand_int_range = _rpythonic_function_(		"g_test_rand_int_range", ctypes.c_int, [
	("begin",		ctypes.c_int),
	("end",		ctypes.c_int),] )

g_test_rand_double = _rpythonic_function_(		"g_test_rand_double", ctypes.c_double, [] )

g_test_rand_double_range = _rpythonic_function_(		"g_test_rand_double_range", ctypes.c_double, [
	("range_start",		ctypes.c_double),
	("range_end",		ctypes.c_double),] )

g_test_create_case = _rpythonic_function_(		"g_test_create_case", ctypes.POINTER(GTestCase), [
	("test_name",		ctypes.POINTER(ctypes.c_char)),
	("data_size",		ctypes.c_uint),
	("test_data",		ctypes.POINTER(ctypes.c_void_p)),
	("data_setup",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("data_test",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("data_teardown",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_test_create_suite = _rpythonic_function_(		"g_test_create_suite", ctypes.POINTER(GTestSuite), [
	("suite_name",		ctypes.POINTER(ctypes.c_char)),] )

g_test_get_root = _rpythonic_function_(		"g_test_get_root", ctypes.POINTER(GTestSuite), [] )

g_test_suite_add = _rpythonic_function_(		"g_test_suite_add", ctypes.c_void_p, [
	("suite",		ctypes.POINTER(GTestSuite)),
	("test_case",		ctypes.POINTER(GTestCase)),] )

g_test_suite_add_suite = _rpythonic_function_(		"g_test_suite_add_suite", ctypes.c_void_p, [
	("suite",		ctypes.POINTER(GTestSuite)),
	("nestedsuite",		ctypes.POINTER(GTestSuite)),] )

g_test_run_suite = _rpythonic_function_(		"g_test_run_suite", ctypes.c_int, [
	("suite",		ctypes.POINTER(GTestSuite)),] )

g_test_trap_assertions = _rpythonic_function_(		"g_test_trap_assertions", ctypes.c_void_p, [
	("domain",		ctypes.POINTER(ctypes.c_char)),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("func",		ctypes.POINTER(ctypes.c_char)),
	("assertion_flags",		ctypes.c_ulonglong),
	("pattern",		ctypes.POINTER(ctypes.c_char)),] )

g_assertion_message = _rpythonic_function_(		"g_assertion_message", ctypes.c_void_p, [
	("domain",		ctypes.POINTER(ctypes.c_char)),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("func",		ctypes.POINTER(ctypes.c_char)),
	("message",		ctypes.POINTER(ctypes.c_char)),] )

g_assertion_message_expr = _rpythonic_function_(		"g_assertion_message_expr", ctypes.c_void_p, [
	("domain",		ctypes.POINTER(ctypes.c_char)),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("func",		ctypes.POINTER(ctypes.c_char)),
	("expr",		ctypes.POINTER(ctypes.c_char)),] )

g_assertion_message_cmpstr = _rpythonic_function_(		"g_assertion_message_cmpstr", ctypes.c_void_p, [
	("domain",		ctypes.POINTER(ctypes.c_char)),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("func",		ctypes.POINTER(ctypes.c_char)),
	("expr",		ctypes.POINTER(ctypes.c_char)),
	("arg1",		ctypes.POINTER(ctypes.c_char)),
	("cmp",		ctypes.POINTER(ctypes.c_char)),
	("arg2",		ctypes.POINTER(ctypes.c_char)),] )

g_assertion_message_cmpnum = _rpythonic_function_(		"g_assertion_message_cmpnum", ctypes.c_void_p, [
	("domain",		ctypes.POINTER(ctypes.c_char)),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("func",		ctypes.POINTER(ctypes.c_char)),
	("expr",		ctypes.POINTER(ctypes.c_char)),
	("arg1",		ctypes.c_double),
	("cmp",		ctypes.POINTER(ctypes.c_char)),
	("arg2",		ctypes.c_double),
	("numtype",		ctypes.c_char),] )

g_assertion_message_error = _rpythonic_function_(		"g_assertion_message_error", ctypes.c_void_p, [
	("domain",		ctypes.POINTER(ctypes.c_char)),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("func",		ctypes.POINTER(ctypes.c_char)),
	("expr",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(_GError)),
	("error_domain",		ctypes.c_uint),
	("error_code",		ctypes.c_int),] )

g_test_add_vtable = _rpythonic_function_(		"g_test_add_vtable", ctypes.c_void_p, [
	("testpath",		ctypes.POINTER(ctypes.c_char)),
	("data_size",		ctypes.c_uint),
	("test_data",		ctypes.POINTER(ctypes.c_void_p)),
	("data_setup",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("data_test",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("data_teardown",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_test_log_type_name = _rpythonic_function_(		"g_test_log_type_name", ctypes.POINTER(ctypes.c_char), [
	("log_type",		ctypes.c_int),] )

g_test_log_buffer_new = _rpythonic_function_(		"g_test_log_buffer_new", ctypes.POINTER(GTestLogBuffer), [] )

g_test_log_buffer_free = _rpythonic_function_(		"g_test_log_buffer_free", ctypes.c_void_p, [
	("tbuffer",		ctypes.POINTER(GTestLogBuffer)),] )

g_test_log_buffer_push = _rpythonic_function_(		"g_test_log_buffer_push", ctypes.c_void_p, [
	("tbuffer",		ctypes.POINTER(GTestLogBuffer)),
	("n_bytes",		ctypes.c_uint),
	("bytes",		ctypes.POINTER(ctypes.c_ubyte)),] )

g_test_log_buffer_pop = _rpythonic_function_(		"g_test_log_buffer_pop", ctypes.POINTER(GTestLogMsg), [
	("tbuffer",		ctypes.POINTER(GTestLogBuffer)),] )

g_test_log_msg_free = _rpythonic_function_(		"g_test_log_msg_free", ctypes.c_void_p, [
	("tmsg",		ctypes.POINTER(GTestLogMsg)),] )

GTestLogFatalFunc = _rpythonic_function_(		"GTestLogFatalFunc", ctypes.c_int, [
	("log_domain",		ctypes.POINTER(ctypes.c_char)),
	("log_level",		ctypes.c_int),
	("message",		ctypes.POINTER(ctypes.c_char)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_test_log_set_fatal_handler = _rpythonic_function_(		"g_test_log_set_fatal_handler", ctypes.c_void_p, [
	("log_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_char),ctypes.c_int,ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_thread_pool_new = _rpythonic_function_(		"g_thread_pool_new", ctypes.POINTER(_GThreadPool), [
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("max_threads",		ctypes.c_int),
	("exclusive",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_thread_pool_push = _rpythonic_function_(		"g_thread_pool_push", ctypes.c_void_p, [
	("pool",		ctypes.POINTER(_GThreadPool)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_thread_pool_set_max_threads = _rpythonic_function_(		"g_thread_pool_set_max_threads", ctypes.c_void_p, [
	("pool",		ctypes.POINTER(_GThreadPool)),
	("max_threads",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_thread_pool_get_max_threads = _rpythonic_function_(		"g_thread_pool_get_max_threads", ctypes.c_int, [
	("pool",		ctypes.POINTER(_GThreadPool)),] )

g_thread_pool_get_num_threads = _rpythonic_function_(		"g_thread_pool_get_num_threads", ctypes.c_uint, [
	("pool",		ctypes.POINTER(_GThreadPool)),] )

g_thread_pool_unprocessed = _rpythonic_function_(		"g_thread_pool_unprocessed", ctypes.c_uint, [
	("pool",		ctypes.POINTER(_GThreadPool)),] )

g_thread_pool_free = _rpythonic_function_(		"g_thread_pool_free", ctypes.c_void_p, [
	("pool",		ctypes.POINTER(_GThreadPool)),
	("immediate",		ctypes.c_int),
	("wait_",		ctypes.c_int),] )

g_thread_pool_set_max_unused_threads = _rpythonic_function_(		"g_thread_pool_set_max_unused_threads", ctypes.c_void_p, [
	("max_threads",		ctypes.c_int),] )

g_thread_pool_get_max_unused_threads = _rpythonic_function_(		"g_thread_pool_get_max_unused_threads", ctypes.c_int, [] )

g_thread_pool_get_num_unused_threads = _rpythonic_function_(		"g_thread_pool_get_num_unused_threads", ctypes.c_uint, [] )

g_thread_pool_stop_unused_threads = _rpythonic_function_(		"g_thread_pool_stop_unused_threads", ctypes.c_void_p, [] )

g_thread_pool_set_sort_function = _rpythonic_function_(		"g_thread_pool_set_sort_function", ctypes.c_void_p, [
	("pool",		ctypes.POINTER(_GThreadPool)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_thread_pool_set_max_idle_time = _rpythonic_function_(		"g_thread_pool_set_max_idle_time", ctypes.c_void_p, [
	("interval",		ctypes.c_uint),] )

g_thread_pool_get_max_idle_time = _rpythonic_function_(		"g_thread_pool_get_max_idle_time", ctypes.c_uint, [] )

g_timer_new = _rpythonic_function_(		"g_timer_new", ctypes.POINTER(_GTimer), [] )

g_timer_destroy = _rpythonic_function_(		"g_timer_destroy", ctypes.c_void_p, [
	("timer",		ctypes.POINTER(_GTimer)),] )

g_timer_start = _rpythonic_function_(		"g_timer_start", ctypes.c_void_p, [
	("timer",		ctypes.POINTER(_GTimer)),] )

g_timer_stop = _rpythonic_function_(		"g_timer_stop", ctypes.c_void_p, [
	("timer",		ctypes.POINTER(_GTimer)),] )

g_timer_reset = _rpythonic_function_(		"g_timer_reset", ctypes.c_void_p, [
	("timer",		ctypes.POINTER(_GTimer)),] )

g_timer_continue = _rpythonic_function_(		"g_timer_continue", ctypes.c_void_p, [
	("timer",		ctypes.POINTER(_GTimer)),] )

g_timer_elapsed = _rpythonic_function_(		"g_timer_elapsed", ctypes.c_double, [
	("timer",		ctypes.POINTER(_GTimer)),
	("microseconds",		ctypes.POINTER(ctypes.c_ulong)),] )

g_usleep = _rpythonic_function_(		"g_usleep", ctypes.c_void_p, [
	("microseconds",		ctypes.c_ulong),] )

g_time_val_add = _rpythonic_function_(		"g_time_val_add", ctypes.c_void_p, [
	("time_",		ctypes.POINTER(_GTimeVal)),
	("microseconds",		ctypes.c_long),] )

g_time_val_from_iso8601 = _rpythonic_function_(		"g_time_val_from_iso8601", ctypes.c_int, [
	("iso_date",		ctypes.POINTER(ctypes.c_char)),
	("time_",		ctypes.POINTER(_GTimeVal)),] )

g_time_val_to_iso8601 = _rpythonic_function_(		"g_time_val_to_iso8601", ctypes.POINTER(ctypes.c_char), [
	("time_",		ctypes.POINTER(_GTimeVal)),] )

GTraverseFunc = _rpythonic_function_(		"GTraverseFunc", ctypes.c_int, [
	("key",		ctypes.POINTER(ctypes.c_void_p)),
	("value",		ctypes.POINTER(ctypes.c_void_p)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_tree_new = _rpythonic_function_(		"g_tree_new", ctypes.POINTER(_GTree), [
	("key_compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_tree_new_with_data = _rpythonic_function_(		"g_tree_new_with_data", ctypes.POINTER(_GTree), [
	("key_compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("key_compare_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_tree_new_full = _rpythonic_function_(		"g_tree_new_full", ctypes.POINTER(_GTree), [
	("key_compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("key_compare_data",		ctypes.POINTER(ctypes.c_void_p)),
	("key_destroy_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("value_destroy_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_tree_ref = _rpythonic_function_(		"g_tree_ref", ctypes.POINTER(_GTree), [
	("tree",		ctypes.POINTER(_GTree)),] )

g_tree_unref = _rpythonic_function_(		"g_tree_unref", ctypes.c_void_p, [
	("tree",		ctypes.POINTER(_GTree)),] )

g_tree_destroy = _rpythonic_function_(		"g_tree_destroy", ctypes.c_void_p, [
	("tree",		ctypes.POINTER(_GTree)),] )

g_tree_insert = _rpythonic_function_(		"g_tree_insert", ctypes.c_void_p, [
	("tree",		ctypes.POINTER(_GTree)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),
	("value",		ctypes.POINTER(ctypes.c_void_p)),] )

g_tree_replace = _rpythonic_function_(		"g_tree_replace", ctypes.c_void_p, [
	("tree",		ctypes.POINTER(_GTree)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),
	("value",		ctypes.POINTER(ctypes.c_void_p)),] )

g_tree_remove = _rpythonic_function_(		"g_tree_remove", ctypes.c_int, [
	("tree",		ctypes.POINTER(_GTree)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),] )

g_tree_steal = _rpythonic_function_(		"g_tree_steal", ctypes.c_int, [
	("tree",		ctypes.POINTER(_GTree)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),] )

g_tree_lookup = _rpythonic_function_(		"g_tree_lookup", ctypes.POINTER(ctypes.c_void_p), [
	("tree",		ctypes.POINTER(_GTree)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),] )

g_tree_lookup_extended = _rpythonic_function_(		"g_tree_lookup_extended", ctypes.c_int, [
	("tree",		ctypes.POINTER(_GTree)),
	("lookup_key",		ctypes.POINTER(ctypes.c_void_p)),
	("orig_key",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("value",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

g_tree_foreach = _rpythonic_function_(		"g_tree_foreach", ctypes.c_void_p, [
	("tree",		ctypes.POINTER(_GTree)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_tree_traverse = _rpythonic_function_(		"g_tree_traverse", ctypes.c_void_p, [
	("tree",		ctypes.POINTER(_GTree)),
	("traverse_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("traverse_type",		ctypes.c_int),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_tree_search = _rpythonic_function_(		"g_tree_search", ctypes.POINTER(ctypes.c_void_p), [
	("tree",		ctypes.POINTER(_GTree)),
	("search_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_tree_height = _rpythonic_function_(		"g_tree_height", ctypes.c_int, [
	("tree",		ctypes.POINTER(_GTree)),] )

g_tree_nnodes = _rpythonic_function_(		"g_tree_nnodes", ctypes.c_int, [
	("tree",		ctypes.POINTER(_GTree)),] )

g_uri_unescape_string = _rpythonic_function_(		"g_uri_unescape_string", ctypes.POINTER(ctypes.c_char), [
	("escaped_string",		ctypes.POINTER(ctypes.c_char)),
	("illegal_characters",		ctypes.POINTER(ctypes.c_char)),] )

g_uri_unescape_segment = _rpythonic_function_(		"g_uri_unescape_segment", ctypes.POINTER(ctypes.c_char), [
	("escaped_string",		ctypes.POINTER(ctypes.c_char)),
	("escaped_string_end",		ctypes.POINTER(ctypes.c_char)),
	("illegal_characters",		ctypes.POINTER(ctypes.c_char)),] )

g_uri_parse_scheme = _rpythonic_function_(		"g_uri_parse_scheme", ctypes.POINTER(ctypes.c_char), [
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

g_uri_escape_string = _rpythonic_function_(		"g_uri_escape_string", ctypes.POINTER(ctypes.c_char), [
	("unescaped",		ctypes.POINTER(ctypes.c_char)),
	("reserved_chars_allowed",		ctypes.POINTER(ctypes.c_char)),
	("allow_utf8",		ctypes.c_int),] )

g_variant_type_string_is_valid = _rpythonic_function_(		"g_variant_type_string_is_valid", ctypes.c_int, [
	("type_string",		ctypes.POINTER(ctypes.c_char)),] )

g_variant_type_string_scan = _rpythonic_function_(		"g_variant_type_string_scan", ctypes.c_int, [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("limit",		ctypes.POINTER(ctypes.c_char)),
	("endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_variant_type_free = _rpythonic_function_(		"g_variant_type_free", ctypes.c_void_p, [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_copy = _rpythonic_function_(		"g_variant_type_copy", ctypes.POINTER(_GVariantType), [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_new = _rpythonic_function_(		"g_variant_type_new", ctypes.POINTER(_GVariantType), [
	("type_string",		ctypes.POINTER(ctypes.c_char)),] )

g_variant_type_get_string_length = _rpythonic_function_(		"g_variant_type_get_string_length", ctypes.c_uint, [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_peek_string = _rpythonic_function_(		"g_variant_type_peek_string", ctypes.POINTER(ctypes.c_char), [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_dup_string = _rpythonic_function_(		"g_variant_type_dup_string", ctypes.POINTER(ctypes.c_char), [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_is_definite = _rpythonic_function_(		"g_variant_type_is_definite", ctypes.c_int, [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_is_container = _rpythonic_function_(		"g_variant_type_is_container", ctypes.c_int, [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_is_basic = _rpythonic_function_(		"g_variant_type_is_basic", ctypes.c_int, [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_is_maybe = _rpythonic_function_(		"g_variant_type_is_maybe", ctypes.c_int, [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_is_array = _rpythonic_function_(		"g_variant_type_is_array", ctypes.c_int, [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_is_tuple = _rpythonic_function_(		"g_variant_type_is_tuple", ctypes.c_int, [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_is_dict_entry = _rpythonic_function_(		"g_variant_type_is_dict_entry", ctypes.c_int, [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_is_variant = _rpythonic_function_(		"g_variant_type_is_variant", ctypes.c_int, [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_hash = _rpythonic_function_(		"g_variant_type_hash", ctypes.c_uint, [("C_type",		ctypes.c_void_p)] )

g_variant_type_equal = _rpythonic_function_(		"g_variant_type_equal", ctypes.c_int, [
	("type1",		ctypes.POINTER(ctypes.c_void_p)),
	("type2",		ctypes.POINTER(ctypes.c_void_p)),] )

g_variant_type_is_subtype_of = _rpythonic_function_(		"g_variant_type_is_subtype_of", ctypes.c_int, [
	("C_type",		ctypes.POINTER(_GVariantType)),
	("supertype",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_element = _rpythonic_function_(		"g_variant_type_element", ctypes.POINTER(_GVariantType), [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_first = _rpythonic_function_(		"g_variant_type_first", ctypes.POINTER(_GVariantType), [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_next = _rpythonic_function_(		"g_variant_type_next", ctypes.POINTER(_GVariantType), [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_n_items = _rpythonic_function_(		"g_variant_type_n_items", ctypes.c_uint, [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_key = _rpythonic_function_(		"g_variant_type_key", ctypes.POINTER(_GVariantType), [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_value = _rpythonic_function_(		"g_variant_type_value", ctypes.POINTER(_GVariantType), [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_new_array = _rpythonic_function_(		"g_variant_type_new_array", ctypes.POINTER(_GVariantType), [
	("element",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_new_maybe = _rpythonic_function_(		"g_variant_type_new_maybe", ctypes.POINTER(_GVariantType), [
	("element",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_new_tuple = _rpythonic_function_(		"g_variant_type_new_tuple", ctypes.POINTER(_GVariantType), [
	("items",		ctypes.POINTER(ctypes.POINTER(_GVariantType))),
	("length",		ctypes.c_int),] )

g_variant_type_new_dict_entry = _rpythonic_function_(		"g_variant_type_new_dict_entry", ctypes.POINTER(_GVariantType), [
	("key",		ctypes.POINTER(_GVariantType)),
	("value",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_checked_ = _rpythonic_function_(		"g_variant_type_checked_", ctypes.POINTER(_GVariantType), [
	("none",		ctypes.POINTER(ctypes.c_char)),] )

g_variant_unref = _rpythonic_function_(		"g_variant_unref", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_ref = _rpythonic_function_(		"g_variant_ref", ctypes.POINTER(_GVariant), [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_ref_sink = _rpythonic_function_(		"g_variant_ref_sink", ctypes.POINTER(_GVariant), [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_is_floating = _rpythonic_function_(		"g_variant_is_floating", ctypes.c_int, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_take_ref = _rpythonic_function_(		"g_variant_take_ref", ctypes.POINTER(_GVariant), [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_type = _rpythonic_function_(		"g_variant_get_type", ctypes.POINTER(_GVariantType), [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_type_string = _rpythonic_function_(		"g_variant_get_type_string", ctypes.POINTER(ctypes.c_char), [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_is_of_type = _rpythonic_function_(		"g_variant_is_of_type", ctypes.c_int, [
	("value",		ctypes.POINTER(_GVariant)),
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_is_container = _rpythonic_function_(		"g_variant_is_container", ctypes.c_int, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_classify = _rpythonic_function_(		"g_variant_classify", ctypes.c_int, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_new_boolean = _rpythonic_function_(		"g_variant_new_boolean", ctypes.POINTER(_GVariant), [
	("value",		ctypes.c_int),] )

g_variant_new_byte = _rpythonic_function_(		"g_variant_new_byte", ctypes.POINTER(_GVariant), [
	("value",		ctypes.c_ubyte),] )

g_variant_new_int16 = _rpythonic_function_(		"g_variant_new_int16", ctypes.POINTER(_GVariant), [
	("value",		ctypes.c_short),] )

g_variant_new_uint16 = _rpythonic_function_(		"g_variant_new_uint16", ctypes.POINTER(_GVariant), [
	("value",		ctypes.c_ushort),] )

g_variant_new_int32 = _rpythonic_function_(		"g_variant_new_int32", ctypes.POINTER(_GVariant), [
	("value",		ctypes.c_int),] )

g_variant_new_uint32 = _rpythonic_function_(		"g_variant_new_uint32", ctypes.POINTER(_GVariant), [
	("value",		ctypes.c_uint),] )

g_variant_new_int64 = _rpythonic_function_(		"g_variant_new_int64", ctypes.POINTER(_GVariant), [
	("value",		ctypes.c_longlong),] )

g_variant_new_uint64 = _rpythonic_function_(		"g_variant_new_uint64", ctypes.POINTER(_GVariant), [
	("value",		ctypes.c_ulonglong),] )

g_variant_new_handle = _rpythonic_function_(		"g_variant_new_handle", ctypes.POINTER(_GVariant), [
	("value",		ctypes.c_int),] )

g_variant_new_double = _rpythonic_function_(		"g_variant_new_double", ctypes.POINTER(_GVariant), [
	("value",		ctypes.c_double),] )

g_variant_new_string = _rpythonic_function_(		"g_variant_new_string", ctypes.POINTER(_GVariant), [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_variant_new_object_path = _rpythonic_function_(		"g_variant_new_object_path", ctypes.POINTER(_GVariant), [
	("object_path",		ctypes.POINTER(ctypes.c_char)),] )

g_variant_is_object_path = _rpythonic_function_(		"g_variant_is_object_path", ctypes.c_int, [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_variant_new_signature = _rpythonic_function_(		"g_variant_new_signature", ctypes.POINTER(_GVariant), [
	("signature",		ctypes.POINTER(ctypes.c_char)),] )

g_variant_is_signature = _rpythonic_function_(		"g_variant_is_signature", ctypes.c_int, [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_variant_new_variant = _rpythonic_function_(		"g_variant_new_variant", ctypes.POINTER(_GVariant), [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_new_strv = _rpythonic_function_(		"g_variant_new_strv", ctypes.POINTER(_GVariant), [
	("strv",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("length",		ctypes.c_int),] )

g_variant_new_objv = _rpythonic_function_(		"g_variant_new_objv", ctypes.POINTER(_GVariant), [
	("strv",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("length",		ctypes.c_int),] )

g_variant_new_bytestring = _rpythonic_function_(		"g_variant_new_bytestring", ctypes.POINTER(_GVariant), [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_variant_new_bytestring_array = _rpythonic_function_(		"g_variant_new_bytestring_array", ctypes.POINTER(_GVariant), [
	("strv",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("length",		ctypes.c_int),] )

g_variant_get_boolean = _rpythonic_function_(		"g_variant_get_boolean", ctypes.c_int, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_byte = _rpythonic_function_(		"g_variant_get_byte", ctypes.c_ubyte, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_int16 = _rpythonic_function_(		"g_variant_get_int16", ctypes.c_short, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_uint16 = _rpythonic_function_(		"g_variant_get_uint16", ctypes.c_ushort, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_int32 = _rpythonic_function_(		"g_variant_get_int32", ctypes.c_int, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_uint32 = _rpythonic_function_(		"g_variant_get_uint32", ctypes.c_uint, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_int64 = _rpythonic_function_(		"g_variant_get_int64", ctypes.c_longlong, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_uint64 = _rpythonic_function_(		"g_variant_get_uint64", ctypes.c_ulonglong, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_handle = _rpythonic_function_(		"g_variant_get_handle", ctypes.c_int, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_double = _rpythonic_function_(		"g_variant_get_double", ctypes.c_double, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_variant = _rpythonic_function_(		"g_variant_get_variant", ctypes.POINTER(_GVariant), [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_string = _rpythonic_function_(		"g_variant_get_string", ctypes.POINTER(ctypes.c_char), [
	("value",		ctypes.POINTER(_GVariant)),
	("length",		ctypes.POINTER(ctypes.c_uint)),] )

g_variant_dup_string = _rpythonic_function_(		"g_variant_dup_string", ctypes.POINTER(ctypes.c_char), [
	("value",		ctypes.POINTER(_GVariant)),
	("length",		ctypes.POINTER(ctypes.c_uint)),] )

g_variant_get_strv = _rpythonic_function_(		"g_variant_get_strv", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("value",		ctypes.POINTER(_GVariant)),
	("length",		ctypes.POINTER(ctypes.c_uint)),] )

g_variant_dup_strv = _rpythonic_function_(		"g_variant_dup_strv", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("value",		ctypes.POINTER(_GVariant)),
	("length",		ctypes.POINTER(ctypes.c_uint)),] )

g_variant_get_objv = _rpythonic_function_(		"g_variant_get_objv", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("value",		ctypes.POINTER(_GVariant)),
	("length",		ctypes.POINTER(ctypes.c_uint)),] )

g_variant_dup_objv = _rpythonic_function_(		"g_variant_dup_objv", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("value",		ctypes.POINTER(_GVariant)),
	("length",		ctypes.POINTER(ctypes.c_uint)),] )

g_variant_get_bytestring = _rpythonic_function_(		"g_variant_get_bytestring", ctypes.POINTER(ctypes.c_char), [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_dup_bytestring = _rpythonic_function_(		"g_variant_dup_bytestring", ctypes.POINTER(ctypes.c_char), [
	("value",		ctypes.POINTER(_GVariant)),
	("length",		ctypes.POINTER(ctypes.c_uint)),] )

g_variant_get_bytestring_array = _rpythonic_function_(		"g_variant_get_bytestring_array", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("value",		ctypes.POINTER(_GVariant)),
	("length",		ctypes.POINTER(ctypes.c_uint)),] )

g_variant_dup_bytestring_array = _rpythonic_function_(		"g_variant_dup_bytestring_array", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("value",		ctypes.POINTER(_GVariant)),
	("length",		ctypes.POINTER(ctypes.c_uint)),] )

g_variant_new_maybe = _rpythonic_function_(		"g_variant_new_maybe", ctypes.POINTER(_GVariant), [
	("child_type",		ctypes.POINTER(_GVariantType)),
	("child",		ctypes.POINTER(_GVariant)),] )

g_variant_new_array = _rpythonic_function_(		"g_variant_new_array", ctypes.POINTER(_GVariant), [
	("child_type",		ctypes.POINTER(_GVariantType)),
	("children",		ctypes.POINTER(ctypes.POINTER(_GVariant))),
	("n_children",		ctypes.c_uint),] )

g_variant_new_tuple = _rpythonic_function_(		"g_variant_new_tuple", ctypes.POINTER(_GVariant), [
	("children",		ctypes.POINTER(ctypes.POINTER(_GVariant))),
	("n_children",		ctypes.c_uint),] )

g_variant_new_dict_entry = _rpythonic_function_(		"g_variant_new_dict_entry", ctypes.POINTER(_GVariant), [
	("key",		ctypes.POINTER(_GVariant)),
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_maybe = _rpythonic_function_(		"g_variant_get_maybe", ctypes.POINTER(_GVariant), [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_n_children = _rpythonic_function_(		"g_variant_n_children", ctypes.c_uint, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_child_value = _rpythonic_function_(		"g_variant_get_child_value", ctypes.POINTER(_GVariant), [
	("value",		ctypes.POINTER(_GVariant)),
	("index_",		ctypes.c_uint),] )

g_variant_lookup_value = _rpythonic_function_(		"g_variant_lookup_value", ctypes.POINTER(_GVariant), [
	("dictionary",		ctypes.POINTER(_GVariant)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("expected_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_get_fixed_array = _rpythonic_function_(		"g_variant_get_fixed_array", ctypes.POINTER(ctypes.c_void_p), [
	("value",		ctypes.POINTER(_GVariant)),
	("n_elements",		ctypes.POINTER(ctypes.c_uint)),
	("element_size",		ctypes.c_uint),] )

g_variant_get_size = _rpythonic_function_(		"g_variant_get_size", ctypes.c_uint, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_data = _rpythonic_function_(		"g_variant_get_data", ctypes.POINTER(ctypes.c_void_p), [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_store = _rpythonic_function_(		"g_variant_store", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GVariant)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_variant_print = _rpythonic_function_(		"g_variant_print", ctypes.POINTER(ctypes.c_char), [
	("value",		ctypes.POINTER(_GVariant)),
	("type_annotate",		ctypes.c_int),] )

g_variant_print_string = _rpythonic_function_(		"g_variant_print_string", ctypes.POINTER(_GString), [
	("value",		ctypes.POINTER(_GVariant)),
	("string",		ctypes.POINTER(_GString)),
	("type_annotate",		ctypes.c_int),] )

g_variant_hash = _rpythonic_function_(		"g_variant_hash", ctypes.c_uint, [("value",		ctypes.c_void_p)] )

g_variant_equal = _rpythonic_function_(		"g_variant_equal", ctypes.c_int, [
	("one",		ctypes.POINTER(ctypes.c_void_p)),
	("two",		ctypes.POINTER(ctypes.c_void_p)),] )

g_variant_get_normal_form = _rpythonic_function_(		"g_variant_get_normal_form", ctypes.POINTER(_GVariant), [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_is_normal_form = _rpythonic_function_(		"g_variant_is_normal_form", ctypes.c_int, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_byteswap = _rpythonic_function_(		"g_variant_byteswap", ctypes.POINTER(_GVariant), [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_new_from_data = _rpythonic_function_(		"g_variant_new_from_data", ctypes.POINTER(_GVariant), [
	("C_type",		ctypes.POINTER(_GVariantType)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.c_uint),
	("trusted",		ctypes.c_int),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_variant_iter_new = _rpythonic_function_(		"g_variant_iter_new", ctypes.POINTER(_GVariantIter), [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_iter_init = _rpythonic_function_(		"g_variant_iter_init", ctypes.c_uint, [
	("iter",		ctypes.POINTER(_GVariantIter)),
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_iter_copy = _rpythonic_function_(		"g_variant_iter_copy", ctypes.POINTER(_GVariantIter), [
	("iter",		ctypes.POINTER(_GVariantIter)),] )

g_variant_iter_n_children = _rpythonic_function_(		"g_variant_iter_n_children", ctypes.c_uint, [
	("iter",		ctypes.POINTER(_GVariantIter)),] )

g_variant_iter_free = _rpythonic_function_(		"g_variant_iter_free", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(_GVariantIter)),] )

g_variant_iter_next_value = _rpythonic_function_(		"g_variant_iter_next_value", ctypes.POINTER(_GVariant), [
	("iter",		ctypes.POINTER(_GVariantIter)),] )

g_variant_parser_get_error_quark = _rpythonic_function_(		"g_variant_parser_get_error_quark", ctypes.c_uint, [] )

g_variant_builder_new = _rpythonic_function_(		"g_variant_builder_new", ctypes.POINTER(_GVariantBuilder), [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_builder_unref = _rpythonic_function_(		"g_variant_builder_unref", ctypes.c_void_p, [
	("builder",		ctypes.POINTER(_GVariantBuilder)),] )

g_variant_builder_ref = _rpythonic_function_(		"g_variant_builder_ref", ctypes.POINTER(_GVariantBuilder), [
	("builder",		ctypes.POINTER(_GVariantBuilder)),] )

g_variant_builder_init = _rpythonic_function_(		"g_variant_builder_init", ctypes.c_void_p, [
	("builder",		ctypes.POINTER(_GVariantBuilder)),
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_builder_end = _rpythonic_function_(		"g_variant_builder_end", ctypes.POINTER(_GVariant), [
	("builder",		ctypes.POINTER(_GVariantBuilder)),] )

g_variant_builder_clear = _rpythonic_function_(		"g_variant_builder_clear", ctypes.c_void_p, [
	("builder",		ctypes.POINTER(_GVariantBuilder)),] )

g_variant_builder_open = _rpythonic_function_(		"g_variant_builder_open", ctypes.c_void_p, [
	("builder",		ctypes.POINTER(_GVariantBuilder)),
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_builder_close = _rpythonic_function_(		"g_variant_builder_close", ctypes.c_void_p, [
	("builder",		ctypes.POINTER(_GVariantBuilder)),] )

g_variant_builder_add_value = _rpythonic_function_(		"g_variant_builder_add_value", ctypes.c_void_p, [
	("builder",		ctypes.POINTER(_GVariantBuilder)),
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_new_va = _rpythonic_function_(		"g_variant_new_va", ctypes.POINTER(_GVariant), [
	("format_string",		ctypes.POINTER(ctypes.c_char)),
	("endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("app",		ctypes.POINTER(ctypes.c_char)),] )

g_variant_get_va = _rpythonic_function_(		"g_variant_get_va", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GVariant)),
	("format_string",		ctypes.POINTER(ctypes.c_char)),
	("endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("app",		ctypes.POINTER(ctypes.c_char)),] )

g_variant_parse = _rpythonic_function_(		"g_variant_parse", ctypes.POINTER(_GVariant), [
	("C_type",		ctypes.POINTER(_GVariantType)),
	("text",		ctypes.POINTER(ctypes.c_char)),
	("limit",		ctypes.POINTER(ctypes.c_char)),
	("endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_variant_new_parsed_va = _rpythonic_function_(		"g_variant_new_parsed_va", ctypes.POINTER(_GVariant), [
	("format",		ctypes.POINTER(ctypes.c_char)),
	("app",		ctypes.POINTER(ctypes.c_char)),] )

g_variant_compare = _rpythonic_function_(		"g_variant_compare", ctypes.c_int, [
	("one",		ctypes.POINTER(ctypes.c_void_p)),
	("two",		ctypes.POINTER(ctypes.c_void_p)),] )

g_type_init = _rpythonic_function_(		"g_type_init", ctypes.c_void_p, [] )

g_type_init_with_debug_flags = _rpythonic_function_(		"g_type_init_with_debug_flags", ctypes.c_void_p, [
	("debug_flags",		ctypes.c_int),] )

g_type_name = _rpythonic_function_(		"g_type_name", ctypes.POINTER(ctypes.c_char), [
	("C_type",		ctypes.c_uint),] )

g_type_qname = _rpythonic_function_(		"g_type_qname", ctypes.c_uint, [
	("C_type",		ctypes.c_uint),] )

g_type_from_name = _rpythonic_function_(		"g_type_from_name", ctypes.c_uint, [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_type_parent = _rpythonic_function_(		"g_type_parent", ctypes.c_uint, [
	("C_type",		ctypes.c_uint),] )

g_type_depth = _rpythonic_function_(		"g_type_depth", ctypes.c_uint, [
	("C_type",		ctypes.c_uint),] )

g_type_next_base = _rpythonic_function_(		"g_type_next_base", ctypes.c_uint, [
	("leaf_type",		ctypes.c_uint),
	("root_type",		ctypes.c_uint),] )

g_type_is_a = _rpythonic_function_(		"g_type_is_a", ctypes.c_int, [
	("C_type",		ctypes.c_uint),
	("is_a_type",		ctypes.c_uint),] )

g_type_class_ref = _rpythonic_function_(		"g_type_class_ref", ctypes.POINTER(ctypes.c_void_p), [
	("C_type",		ctypes.c_uint),] )

g_type_class_peek = _rpythonic_function_(		"g_type_class_peek", ctypes.POINTER(ctypes.c_void_p), [
	("C_type",		ctypes.c_uint),] )

g_type_class_peek_static = _rpythonic_function_(		"g_type_class_peek_static", ctypes.POINTER(ctypes.c_void_p), [
	("C_type",		ctypes.c_uint),] )

g_type_class_unref = _rpythonic_function_(		"g_type_class_unref", ctypes.c_void_p, [("g_class",		ctypes.c_void_p)] )

g_type_class_peek_parent = _rpythonic_function_(		"g_type_class_peek_parent", ctypes.POINTER(ctypes.c_void_p), [("g_class",		ctypes.c_void_p)] )

g_type_interface_peek = _rpythonic_function_(		"g_type_interface_peek", ctypes.POINTER(ctypes.c_void_p), [
	("instance_class",		ctypes.POINTER(ctypes.c_void_p)),
	("iface_type",		ctypes.c_uint),] )

g_type_interface_peek_parent = _rpythonic_function_(		"g_type_interface_peek_parent", ctypes.POINTER(ctypes.c_void_p), [("g_iface",		ctypes.c_void_p)] )

g_type_default_interface_ref = _rpythonic_function_(		"g_type_default_interface_ref", ctypes.POINTER(ctypes.c_void_p), [
	("g_type",		ctypes.c_uint),] )

g_type_default_interface_peek = _rpythonic_function_(		"g_type_default_interface_peek", ctypes.POINTER(ctypes.c_void_p), [
	("g_type",		ctypes.c_uint),] )

g_type_default_interface_unref = _rpythonic_function_(		"g_type_default_interface_unref", ctypes.c_void_p, [("g_iface",		ctypes.c_void_p)] )

g_type_children = _rpythonic_function_(		"g_type_children", ctypes.POINTER(ctypes.c_uint), [
	("C_type",		ctypes.c_uint),
	("n_children",		ctypes.POINTER(ctypes.c_uint)),] )

g_type_interfaces = _rpythonic_function_(		"g_type_interfaces", ctypes.POINTER(ctypes.c_uint), [
	("C_type",		ctypes.c_uint),
	("n_interfaces",		ctypes.POINTER(ctypes.c_uint)),] )

g_type_set_qdata = _rpythonic_function_(		"g_type_set_qdata", ctypes.c_void_p, [
	("C_type",		ctypes.c_uint),
	("quark",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_type_get_qdata = _rpythonic_function_(		"g_type_get_qdata", ctypes.POINTER(ctypes.c_void_p), [
	("C_type",		ctypes.c_uint),
	("quark",		ctypes.c_uint),] )

g_type_query = _rpythonic_function_(		"g_type_query", ctypes.c_void_p, [
	("C_type",		ctypes.c_uint),
	("query",		ctypes.POINTER(_GTypeQuery)),] )

GBaseInitFunc = _rpythonic_function_(		"GBaseInitFunc", ctypes.c_void_p, [("g_class",		ctypes.c_void_p)] )

GBaseFinalizeFunc = _rpythonic_function_(		"GBaseFinalizeFunc", ctypes.c_void_p, [("g_class",		ctypes.c_void_p)] )

GClassInitFunc = _rpythonic_function_(		"GClassInitFunc", ctypes.c_void_p, [
	("g_class",		ctypes.POINTER(ctypes.c_void_p)),
	("class_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GClassFinalizeFunc = _rpythonic_function_(		"GClassFinalizeFunc", ctypes.c_void_p, [
	("g_class",		ctypes.POINTER(ctypes.c_void_p)),
	("class_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GInstanceInitFunc = _rpythonic_function_(		"GInstanceInitFunc", ctypes.c_void_p, [
	("instance",		ctypes.POINTER(_GTypeInstance)),
	("g_class",		ctypes.POINTER(ctypes.c_void_p)),] )

GInterfaceInitFunc = _rpythonic_function_(		"GInterfaceInitFunc", ctypes.c_void_p, [
	("g_iface",		ctypes.POINTER(ctypes.c_void_p)),
	("iface_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GInterfaceFinalizeFunc = _rpythonic_function_(		"GInterfaceFinalizeFunc", ctypes.c_void_p, [
	("g_iface",		ctypes.POINTER(ctypes.c_void_p)),
	("iface_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GTypeClassCacheFunc = _rpythonic_function_(		"GTypeClassCacheFunc", ctypes.c_int, [
	("cache_data",		ctypes.POINTER(ctypes.c_void_p)),
	("g_class",		ctypes.POINTER(_GTypeClass)),] )

GTypeInterfaceCheckFunc = _rpythonic_function_(		"GTypeInterfaceCheckFunc", ctypes.c_void_p, [
	("check_data",		ctypes.POINTER(ctypes.c_void_p)),
	("g_iface",		ctypes.POINTER(ctypes.c_void_p)),] )

value_init = _rpythonic_function_(		"value_init", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),] )

value_free = _rpythonic_function_(		"value_free", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),] )

value_copy = _rpythonic_function_(		"value_copy", ctypes.c_void_p, [
	("src_value",		ctypes.POINTER(_GValue)),
	("dest_value",		ctypes.POINTER(_GValue)),] )

value_peek_pointer = _rpythonic_function_(		"value_peek_pointer", ctypes.POINTER(ctypes.c_void_p), [
	("value",		ctypes.POINTER(_GValue)),] )

collect_value = _rpythonic_function_(		"collect_value", ctypes.POINTER(ctypes.c_char), [
	("value",		ctypes.POINTER(_GValue)),
	("n_collect_values",		ctypes.c_uint),
	("collect_values",		ctypes.POINTER(_GTypeCValue)),
	("collect_flags",		ctypes.c_uint),] )

lcopy_value = _rpythonic_function_(		"lcopy_value", ctypes.POINTER(ctypes.c_char), [
	("value",		ctypes.POINTER(_GValue)),
	("n_collect_values",		ctypes.c_uint),
	("collect_values",		ctypes.POINTER(_GTypeCValue)),
	("collect_flags",		ctypes.c_uint),] )

g_type_register_static_simple = _rpythonic_function_(		"g_type_register_static_simple", ctypes.c_uint, [
	("parent_type",		ctypes.c_uint),
	("type_name",		ctypes.POINTER(ctypes.c_char)),
	("class_size",		ctypes.c_uint),
	("class_init",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("instance_size",		ctypes.c_uint),
	("instance_init",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GTypeInstance),ctypes.POINTER(ctypes.c_void_p),)),
	("flags",		ctypes.c_int),] )

g_type_register_static = _rpythonic_function_(		"g_type_register_static", ctypes.c_uint, [
	("parent_type",		ctypes.c_uint),
	("type_name",		ctypes.POINTER(ctypes.c_char)),
	("info",		ctypes.POINTER(_GTypeInfo)),
	("flags",		ctypes.c_int),] )

g_type_register_dynamic = _rpythonic_function_(		"g_type_register_dynamic", ctypes.c_uint, [
	("parent_type",		ctypes.c_uint),
	("type_name",		ctypes.POINTER(ctypes.c_char)),
	("plugin",		ctypes.POINTER(_GTypePlugin)),
	("flags",		ctypes.c_int),] )

g_type_register_fundamental = _rpythonic_function_(		"g_type_register_fundamental", ctypes.c_uint, [
	("type_id",		ctypes.c_uint),
	("type_name",		ctypes.POINTER(ctypes.c_char)),
	("info",		ctypes.POINTER(_GTypeInfo)),
	("finfo",		ctypes.POINTER(_GTypeFundamentalInfo)),
	("flags",		ctypes.c_int),] )

g_type_add_interface_static = _rpythonic_function_(		"g_type_add_interface_static", ctypes.c_void_p, [
	("instance_type",		ctypes.c_uint),
	("interface_type",		ctypes.c_uint),
	("info",		ctypes.POINTER(_GInterfaceInfo)),] )

g_type_add_interface_dynamic = _rpythonic_function_(		"g_type_add_interface_dynamic", ctypes.c_void_p, [
	("instance_type",		ctypes.c_uint),
	("interface_type",		ctypes.c_uint),
	("plugin",		ctypes.POINTER(_GTypePlugin)),] )

g_type_interface_add_prerequisite = _rpythonic_function_(		"g_type_interface_add_prerequisite", ctypes.c_void_p, [
	("interface_type",		ctypes.c_uint),
	("prerequisite_type",		ctypes.c_uint),] )

g_type_interface_prerequisites = _rpythonic_function_(		"g_type_interface_prerequisites", ctypes.POINTER(ctypes.c_uint), [
	("interface_type",		ctypes.c_uint),
	("n_prerequisites",		ctypes.POINTER(ctypes.c_uint)),] )

g_type_class_add_private = _rpythonic_function_(		"g_type_class_add_private", ctypes.c_void_p, [
	("g_class",		ctypes.POINTER(ctypes.c_void_p)),
	("private_size",		ctypes.c_uint),] )

g_type_instance_get_private = _rpythonic_function_(		"g_type_instance_get_private", ctypes.POINTER(ctypes.c_void_p), [
	("instance",		ctypes.POINTER(_GTypeInstance)),
	("private_type",		ctypes.c_uint),] )

g_type_add_class_private = _rpythonic_function_(		"g_type_add_class_private", ctypes.c_void_p, [
	("class_type",		ctypes.c_uint),
	("private_size",		ctypes.c_uint),] )

g_type_class_get_private = _rpythonic_function_(		"g_type_class_get_private", ctypes.POINTER(ctypes.c_void_p), [
	("klass",		ctypes.POINTER(_GTypeClass)),
	("private_type",		ctypes.c_uint),] )

g_type_get_plugin = _rpythonic_function_(		"g_type_get_plugin", ctypes.POINTER(_GTypePlugin), [
	("C_type",		ctypes.c_uint),] )

g_type_interface_get_plugin = _rpythonic_function_(		"g_type_interface_get_plugin", ctypes.POINTER(_GTypePlugin), [
	("instance_type",		ctypes.c_uint),
	("interface_type",		ctypes.c_uint),] )

g_type_fundamental_next = _rpythonic_function_(		"g_type_fundamental_next", ctypes.c_uint, [] )

g_type_fundamental = _rpythonic_function_(		"g_type_fundamental", ctypes.c_uint, [
	("type_id",		ctypes.c_uint),] )

g_type_create_instance = _rpythonic_function_(		"g_type_create_instance", ctypes.POINTER(_GTypeInstance), [
	("C_type",		ctypes.c_uint),] )

g_type_free_instance = _rpythonic_function_(		"g_type_free_instance", ctypes.c_void_p, [
	("instance",		ctypes.POINTER(_GTypeInstance)),] )

g_type_add_class_cache_func = _rpythonic_function_(		"g_type_add_class_cache_func", ctypes.c_void_p, [
	("cache_data",		ctypes.POINTER(ctypes.c_void_p)),
	("cache_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GTypeClass),)),] )

g_type_remove_class_cache_func = _rpythonic_function_(		"g_type_remove_class_cache_func", ctypes.c_void_p, [
	("cache_data",		ctypes.POINTER(ctypes.c_void_p)),
	("cache_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GTypeClass),)),] )

g_type_class_unref_uncached = _rpythonic_function_(		"g_type_class_unref_uncached", ctypes.c_void_p, [("g_class",		ctypes.c_void_p)] )

g_type_add_interface_check = _rpythonic_function_(		"g_type_add_interface_check", ctypes.c_void_p, [
	("check_data",		ctypes.POINTER(ctypes.c_void_p)),
	("check_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_type_remove_interface_check = _rpythonic_function_(		"g_type_remove_interface_check", ctypes.c_void_p, [
	("check_data",		ctypes.POINTER(ctypes.c_void_p)),
	("check_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_type_value_table_peek = _rpythonic_function_(		"g_type_value_table_peek", ctypes.POINTER(_GTypeValueTable), [
	("C_type",		ctypes.c_uint),] )

g_type_check_instance = _rpythonic_function_(		"g_type_check_instance", ctypes.c_int, [
	("instance",		ctypes.POINTER(_GTypeInstance)),] )

g_type_check_instance_cast = _rpythonic_function_(		"g_type_check_instance_cast", ctypes.POINTER(_GTypeInstance), [
	("instance",		ctypes.POINTER(_GTypeInstance)),
	("iface_type",		ctypes.c_uint),] )

g_type_check_instance_is_a = _rpythonic_function_(		"g_type_check_instance_is_a", ctypes.c_int, [
	("instance",		ctypes.POINTER(_GTypeInstance)),
	("iface_type",		ctypes.c_uint),] )

g_type_check_class_cast = _rpythonic_function_(		"g_type_check_class_cast", ctypes.POINTER(_GTypeClass), [
	("g_class",		ctypes.POINTER(_GTypeClass)),
	("is_a_type",		ctypes.c_uint),] )

g_type_check_class_is_a = _rpythonic_function_(		"g_type_check_class_is_a", ctypes.c_int, [
	("g_class",		ctypes.POINTER(_GTypeClass)),
	("is_a_type",		ctypes.c_uint),] )

g_type_check_is_value_type = _rpythonic_function_(		"g_type_check_is_value_type", ctypes.c_int, [
	("C_type",		ctypes.c_uint),] )

g_type_check_value = _rpythonic_function_(		"g_type_check_value", ctypes.c_int, [
	("value",		ctypes.POINTER(_GValue)),] )

g_type_check_value_holds = _rpythonic_function_(		"g_type_check_value_holds", ctypes.c_int, [
	("value",		ctypes.POINTER(_GValue)),
	("C_type",		ctypes.c_uint),] )

g_type_test_flags = _rpythonic_function_(		"g_type_test_flags", ctypes.c_int, [
	("C_type",		ctypes.c_uint),
	("flags",		ctypes.c_uint),] )

g_type_name_from_instance = _rpythonic_function_(		"g_type_name_from_instance", ctypes.POINTER(ctypes.c_char), [
	("instance",		ctypes.POINTER(_GTypeInstance)),] )

g_type_name_from_class = _rpythonic_function_(		"g_type_name_from_class", ctypes.POINTER(ctypes.c_char), [
	("g_class",		ctypes.POINTER(_GTypeClass)),] )

GValueTransform = _rpythonic_function_(		"GValueTransform", ctypes.c_void_p, [
	("src_value",		ctypes.POINTER(_GValue)),
	("dest_value",		ctypes.POINTER(_GValue)),] )

g_value_init = _rpythonic_function_(		"g_value_init", ctypes.POINTER(_GValue), [
	("value",		ctypes.POINTER(_GValue)),
	("g_type",		ctypes.c_uint),] )

g_value_copy = _rpythonic_function_(		"g_value_copy", ctypes.c_void_p, [
	("src_value",		ctypes.POINTER(_GValue)),
	("dest_value",		ctypes.POINTER(_GValue)),] )

g_value_reset = _rpythonic_function_(		"g_value_reset", ctypes.POINTER(_GValue), [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_unset = _rpythonic_function_(		"g_value_unset", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_set_instance = _rpythonic_function_(		"g_value_set_instance", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("instance",		ctypes.POINTER(ctypes.c_void_p)),] )

g_value_fits_pointer = _rpythonic_function_(		"g_value_fits_pointer", ctypes.c_int, [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_peek_pointer = _rpythonic_function_(		"g_value_peek_pointer", ctypes.POINTER(ctypes.c_void_p), [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_type_compatible = _rpythonic_function_(		"g_value_type_compatible", ctypes.c_int, [
	("src_type",		ctypes.c_uint),
	("dest_type",		ctypes.c_uint),] )

g_value_type_transformable = _rpythonic_function_(		"g_value_type_transformable", ctypes.c_int, [
	("src_type",		ctypes.c_uint),
	("dest_type",		ctypes.c_uint),] )

g_value_transform = _rpythonic_function_(		"g_value_transform", ctypes.c_int, [
	("src_value",		ctypes.POINTER(_GValue)),
	("dest_value",		ctypes.POINTER(_GValue)),] )

g_value_register_transform_func = _rpythonic_function_(		"g_value_register_transform_func", ctypes.c_void_p, [
	("src_type",		ctypes.c_uint),
	("dest_type",		ctypes.c_uint),
	("transform_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GValue),ctypes.POINTER(_GValue),)),] )

value_set_default = _rpythonic_function_(		"value_set_default", ctypes.c_void_p, [
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("value",		ctypes.POINTER(_GValue)),] )

value_validate = _rpythonic_function_(		"value_validate", ctypes.c_int, [
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("value",		ctypes.POINTER(_GValue)),] )

values_cmp = _rpythonic_function_(		"values_cmp", ctypes.c_int, [
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("value1",		ctypes.POINTER(_GValue)),
	("value2",		ctypes.POINTER(_GValue)),] )

g_param_spec_unref = _rpythonic_function_(		"g_param_spec_unref", ctypes.c_void_p, [
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

g_param_spec_ref = _rpythonic_function_(		"g_param_spec_ref", ctypes.POINTER(_GParamSpec), [
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

g_param_spec_sink = _rpythonic_function_(		"g_param_spec_sink", ctypes.c_void_p, [
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

g_param_spec_ref_sink = _rpythonic_function_(		"g_param_spec_ref_sink", ctypes.POINTER(_GParamSpec), [
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

g_param_spec_get_qdata = _rpythonic_function_(		"g_param_spec_get_qdata", ctypes.POINTER(ctypes.c_void_p), [
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("quark",		ctypes.c_uint),] )

g_param_spec_set_qdata = _rpythonic_function_(		"g_param_spec_set_qdata", ctypes.c_void_p, [
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("quark",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_param_spec_set_qdata_full = _rpythonic_function_(		"g_param_spec_set_qdata_full", ctypes.c_void_p, [
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("quark",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_param_spec_steal_qdata = _rpythonic_function_(		"g_param_spec_steal_qdata", ctypes.POINTER(ctypes.c_void_p), [
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("quark",		ctypes.c_uint),] )

g_param_spec_get_redirect_target = _rpythonic_function_(		"g_param_spec_get_redirect_target", ctypes.POINTER(_GParamSpec), [
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

g_param_value_set_default = _rpythonic_function_(		"g_param_value_set_default", ctypes.c_void_p, [
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("value",		ctypes.POINTER(_GValue)),] )

g_param_value_defaults = _rpythonic_function_(		"g_param_value_defaults", ctypes.c_int, [
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("value",		ctypes.POINTER(_GValue)),] )

g_param_value_validate = _rpythonic_function_(		"g_param_value_validate", ctypes.c_int, [
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("value",		ctypes.POINTER(_GValue)),] )

g_param_value_convert = _rpythonic_function_(		"g_param_value_convert", ctypes.c_int, [
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("src_value",		ctypes.POINTER(_GValue)),
	("dest_value",		ctypes.POINTER(_GValue)),
	("strict_validation",		ctypes.c_int),] )

g_param_values_cmp = _rpythonic_function_(		"g_param_values_cmp", ctypes.c_int, [
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("value1",		ctypes.POINTER(_GValue)),
	("value2",		ctypes.POINTER(_GValue)),] )

g_param_spec_get_name = _rpythonic_function_(		"g_param_spec_get_name", ctypes.POINTER(ctypes.c_char), [
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

g_param_spec_get_nick = _rpythonic_function_(		"g_param_spec_get_nick", ctypes.POINTER(ctypes.c_char), [
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

g_param_spec_get_blurb = _rpythonic_function_(		"g_param_spec_get_blurb", ctypes.POINTER(ctypes.c_char), [
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

g_value_set_param = _rpythonic_function_(		"g_value_set_param", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("param",		ctypes.POINTER(_GParamSpec)),] )

g_value_get_param = _rpythonic_function_(		"g_value_get_param", ctypes.POINTER(_GParamSpec), [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_dup_param = _rpythonic_function_(		"g_value_dup_param", ctypes.POINTER(_GParamSpec), [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_take_param = _rpythonic_function_(		"g_value_take_param", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("param",		ctypes.POINTER(_GParamSpec)),] )

g_value_set_param_take_ownership = _rpythonic_function_(		"g_value_set_param_take_ownership", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("param",		ctypes.POINTER(_GParamSpec)),] )

instance_init = _rpythonic_function_(		"instance_init", ctypes.c_void_p, [
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

g_param_type_register_static = _rpythonic_function_(		"g_param_type_register_static", ctypes.c_uint, [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("pspec_info",		ctypes.POINTER(_GParamSpecTypeInfo)),] )

_g_param_type_register_static_constant = _rpythonic_function_(		"_g_param_type_register_static_constant", ctypes.c_uint, [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("pspec_info",		ctypes.POINTER(_GParamSpecTypeInfo)),
	("opt_type",		ctypes.c_uint),] )

g_param_spec_internal = _rpythonic_function_(		"g_param_spec_internal", ctypes.POINTER(ctypes.c_void_p), [
	("param_type",		ctypes.c_uint),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),] )

g_param_spec_pool_new = _rpythonic_function_(		"g_param_spec_pool_new", ctypes.POINTER(_GParamSpecPool), [
	("type_prefixing",		ctypes.c_int),] )

g_param_spec_pool_insert = _rpythonic_function_(		"g_param_spec_pool_insert", ctypes.c_void_p, [
	("pool",		ctypes.POINTER(_GParamSpecPool)),
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("owner_type",		ctypes.c_uint),] )

g_param_spec_pool_remove = _rpythonic_function_(		"g_param_spec_pool_remove", ctypes.c_void_p, [
	("pool",		ctypes.POINTER(_GParamSpecPool)),
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

g_param_spec_pool_lookup = _rpythonic_function_(		"g_param_spec_pool_lookup", ctypes.POINTER(_GParamSpec), [
	("pool",		ctypes.POINTER(_GParamSpecPool)),
	("param_name",		ctypes.POINTER(ctypes.c_char)),
	("owner_type",		ctypes.c_uint),
	("walk_ancestors",		ctypes.c_int),] )

g_param_spec_pool_list_owned = _rpythonic_function_(		"g_param_spec_pool_list_owned", ctypes.POINTER(_GList), [
	("pool",		ctypes.POINTER(_GParamSpecPool)),
	("owner_type",		ctypes.c_uint),] )

g_param_spec_pool_list = _rpythonic_function_(		"g_param_spec_pool_list", ctypes.POINTER(ctypes.POINTER(_GParamSpec)), [
	("pool",		ctypes.POINTER(_GParamSpecPool)),
	("owner_type",		ctypes.c_uint),
	("n_pspecs_p",		ctypes.POINTER(ctypes.c_uint)),] )

GCallback = _rpythonic_function_(		"GCallback", ctypes.c_void_p, [] )

GClosureNotify = _rpythonic_function_(		"GClosureNotify", ctypes.c_void_p, [
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("closure",		ctypes.POINTER(_GClosure)),] )

GClosureMarshal = _rpythonic_function_(		"GClosureMarshal", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

marshal = _rpythonic_function_(		"marshal", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_new = _rpythonic_function_(		"g_cclosure_new", ctypes.POINTER(_GClosure), [
	("callback_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy_data",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GClosure),)),] )

g_cclosure_new_swap = _rpythonic_function_(		"g_cclosure_new_swap", ctypes.POINTER(_GClosure), [
	("callback_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy_data",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GClosure),)),] )

g_signal_type_cclosure_new = _rpythonic_function_(		"g_signal_type_cclosure_new", ctypes.POINTER(_GClosure), [
	("itype",		ctypes.c_uint),
	("struct_offset",		ctypes.c_uint),] )

g_closure_ref = _rpythonic_function_(		"g_closure_ref", ctypes.POINTER(_GClosure), [
	("closure",		ctypes.POINTER(_GClosure)),] )

g_closure_sink = _rpythonic_function_(		"g_closure_sink", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),] )

g_closure_unref = _rpythonic_function_(		"g_closure_unref", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),] )

g_closure_new_simple = _rpythonic_function_(		"g_closure_new_simple", ctypes.POINTER(_GClosure), [
	("sizeof_closure",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_closure_add_finalize_notifier = _rpythonic_function_(		"g_closure_add_finalize_notifier", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("notify_data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GClosure),)),] )

g_closure_remove_finalize_notifier = _rpythonic_function_(		"g_closure_remove_finalize_notifier", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("notify_data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GClosure),)),] )

g_closure_add_invalidate_notifier = _rpythonic_function_(		"g_closure_add_invalidate_notifier", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("notify_data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GClosure),)),] )

g_closure_remove_invalidate_notifier = _rpythonic_function_(		"g_closure_remove_invalidate_notifier", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("notify_data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GClosure),)),] )

g_closure_add_marshal_guards = _rpythonic_function_(		"g_closure_add_marshal_guards", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("pre_marshal_data",		ctypes.POINTER(ctypes.c_void_p)),
	("pre_marshal_notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GClosure),)),
	("post_marshal_data",		ctypes.POINTER(ctypes.c_void_p)),
	("post_marshal_notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GClosure),)),] )

g_closure_set_marshal = _rpythonic_function_(		"g_closure_set_marshal", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("marshal",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GClosure),ctypes.POINTER(_GValue),ctypes.c_uint,ctypes.POINTER(_GValue),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_closure_set_meta_marshal = _rpythonic_function_(		"g_closure_set_meta_marshal", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),
	("meta_marshal",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GClosure),ctypes.POINTER(_GValue),ctypes.c_uint,ctypes.POINTER(_GValue),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_closure_invalidate = _rpythonic_function_(		"g_closure_invalidate", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),] )

g_closure_invoke = _rpythonic_function_(		"g_closure_invoke", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_generic = _rpythonic_function_(		"g_cclosure_marshal_generic", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_gvalue",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__VOID = _rpythonic_function_(		"g_cclosure_marshal_VOID__VOID", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__BOOLEAN = _rpythonic_function_(		"g_cclosure_marshal_VOID__BOOLEAN", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__CHAR = _rpythonic_function_(		"g_cclosure_marshal_VOID__CHAR", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__UCHAR = _rpythonic_function_(		"g_cclosure_marshal_VOID__UCHAR", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__INT = _rpythonic_function_(		"g_cclosure_marshal_VOID__INT", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__UINT = _rpythonic_function_(		"g_cclosure_marshal_VOID__UINT", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__LONG = _rpythonic_function_(		"g_cclosure_marshal_VOID__LONG", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__ULONG = _rpythonic_function_(		"g_cclosure_marshal_VOID__ULONG", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__ENUM = _rpythonic_function_(		"g_cclosure_marshal_VOID__ENUM", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__FLAGS = _rpythonic_function_(		"g_cclosure_marshal_VOID__FLAGS", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__FLOAT = _rpythonic_function_(		"g_cclosure_marshal_VOID__FLOAT", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__DOUBLE = _rpythonic_function_(		"g_cclosure_marshal_VOID__DOUBLE", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__STRING = _rpythonic_function_(		"g_cclosure_marshal_VOID__STRING", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__PARAM = _rpythonic_function_(		"g_cclosure_marshal_VOID__PARAM", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__BOXED = _rpythonic_function_(		"g_cclosure_marshal_VOID__BOXED", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__POINTER = _rpythonic_function_(		"g_cclosure_marshal_VOID__POINTER", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__OBJECT = _rpythonic_function_(		"g_cclosure_marshal_VOID__OBJECT", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__VARIANT = _rpythonic_function_(		"g_cclosure_marshal_VOID__VARIANT", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__UINT_POINTER = _rpythonic_function_(		"g_cclosure_marshal_VOID__UINT_POINTER", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_BOOLEAN__FLAGS = _rpythonic_function_(		"g_cclosure_marshal_BOOLEAN__FLAGS", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_BOOLEAN__BOXED_BOXED = _rpythonic_function_(		"g_cclosure_marshal_BOOLEAN__BOXED_BOXED", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_STRING__OBJECT_POINTER = _rpythonic_function_(		"g_cclosure_marshal_STRING__OBJECT_POINTER", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GSignalEmissionHook = _rpythonic_function_(		"GSignalEmissionHook", ctypes.c_int, [
	("ihint",		ctypes.POINTER(_GSignalInvocationHint)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

GSignalAccumulator = _rpythonic_function_(		"GSignalAccumulator", ctypes.c_int, [
	("ihint",		ctypes.POINTER(_GSignalInvocationHint)),
	("return_accu",		ctypes.POINTER(_GValue)),
	("handler_return",		ctypes.POINTER(_GValue)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_signal_newv = _rpythonic_function_(		"g_signal_newv", ctypes.c_uint, [
	("signal_name",		ctypes.POINTER(ctypes.c_char)),
	("itype",		ctypes.c_uint),
	("signal_flags",		ctypes.c_int),
	("class_closure",		ctypes.POINTER(_GClosure)),
	("accumulator",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GSignalInvocationHint),ctypes.POINTER(_GValue),ctypes.POINTER(_GValue),ctypes.POINTER(ctypes.c_void_p),)),
	("accu_data",		ctypes.POINTER(ctypes.c_void_p)),
	("c_marshaller",		ctypes.c_void_p),
	("return_type",		ctypes.c_uint),
	("n_params",		ctypes.c_uint),
	("param_types",		ctypes.POINTER(ctypes.c_uint)),] )

g_signal_new_valist = _rpythonic_function_(		"g_signal_new_valist", ctypes.c_uint, [
	("signal_name",		ctypes.POINTER(ctypes.c_char)),
	("itype",		ctypes.c_uint),
	("signal_flags",		ctypes.c_int),
	("class_closure",		ctypes.POINTER(_GClosure)),
	("accumulator",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GSignalInvocationHint),ctypes.POINTER(_GValue),ctypes.POINTER(_GValue),ctypes.POINTER(ctypes.c_void_p),)),
	("accu_data",		ctypes.POINTER(ctypes.c_void_p)),
	("c_marshaller",		ctypes.c_void_p),
	("return_type",		ctypes.c_uint),
	("n_params",		ctypes.c_uint),
	("args",		ctypes.c_char),] )

g_signal_emitv = _rpythonic_function_(		"g_signal_emitv", ctypes.c_void_p, [
	("instance_and_params",		ctypes.POINTER(_GValue)),
	("signal_id",		ctypes.c_uint),
	("detail",		ctypes.c_uint),
	("return_value",		ctypes.POINTER(_GValue)),] )

g_signal_emit_valist = _rpythonic_function_(		"g_signal_emit_valist", ctypes.c_void_p, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("signal_id",		ctypes.c_uint),
	("detail",		ctypes.c_uint),
	("var_args",		ctypes.c_char),] )

g_signal_lookup = _rpythonic_function_(		"g_signal_lookup", ctypes.c_uint, [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("itype",		ctypes.c_uint),] )

g_signal_name = _rpythonic_function_(		"g_signal_name", ctypes.POINTER(ctypes.c_char), [
	("signal_id",		ctypes.c_uint),] )

g_signal_query = _rpythonic_function_(		"g_signal_query", ctypes.c_void_p, [
	("signal_id",		ctypes.c_uint),
	("query",		ctypes.POINTER(_GSignalQuery)),] )

g_signal_list_ids = _rpythonic_function_(		"g_signal_list_ids", ctypes.POINTER(ctypes.c_uint), [
	("itype",		ctypes.c_uint),
	("n_ids",		ctypes.POINTER(ctypes.c_uint)),] )

g_signal_parse_name = _rpythonic_function_(		"g_signal_parse_name", ctypes.c_int, [
	("detailed_signal",		ctypes.POINTER(ctypes.c_char)),
	("itype",		ctypes.c_uint),
	("signal_id_p",		ctypes.POINTER(ctypes.c_uint)),
	("detail_p",		ctypes.POINTER(ctypes.c_uint)),
	("force_detail_quark",		ctypes.c_int),] )

g_signal_get_invocation_hint = _rpythonic_function_(		"g_signal_get_invocation_hint", ctypes.POINTER(_GSignalInvocationHint), [("instance",		ctypes.c_void_p)] )

g_signal_stop_emission = _rpythonic_function_(		"g_signal_stop_emission", ctypes.c_void_p, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("signal_id",		ctypes.c_uint),
	("detail",		ctypes.c_uint),] )

g_signal_stop_emission_by_name = _rpythonic_function_(		"g_signal_stop_emission_by_name", ctypes.c_void_p, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("detailed_signal",		ctypes.POINTER(ctypes.c_char)),] )

g_signal_add_emission_hook = _rpythonic_function_(		"g_signal_add_emission_hook", ctypes.c_ulong, [
	("signal_id",		ctypes.c_uint),
	("detail",		ctypes.c_uint),
	("hook_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GSignalInvocationHint),ctypes.c_uint,ctypes.POINTER(_GValue),ctypes.POINTER(ctypes.c_void_p),)),
	("hook_data",		ctypes.POINTER(ctypes.c_void_p)),
	("data_destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_signal_remove_emission_hook = _rpythonic_function_(		"g_signal_remove_emission_hook", ctypes.c_void_p, [
	("signal_id",		ctypes.c_uint),
	("hook_id",		ctypes.c_ulong),] )

g_signal_has_handler_pending = _rpythonic_function_(		"g_signal_has_handler_pending", ctypes.c_int, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("signal_id",		ctypes.c_uint),
	("detail",		ctypes.c_uint),
	("may_be_blocked",		ctypes.c_int),] )

g_signal_connect_closure_by_id = _rpythonic_function_(		"g_signal_connect_closure_by_id", ctypes.c_ulong, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("signal_id",		ctypes.c_uint),
	("detail",		ctypes.c_uint),
	("closure",		ctypes.POINTER(_GClosure)),
	("after",		ctypes.c_int),] )

g_signal_connect_closure = _rpythonic_function_(		"g_signal_connect_closure", ctypes.c_ulong, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("detailed_signal",		ctypes.POINTER(ctypes.c_char)),
	("closure",		ctypes.POINTER(_GClosure)),
	("after",		ctypes.c_int),] )

g_signal_connect_data = _rpythonic_function_(		"g_signal_connect_data", ctypes.c_ulong, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("detailed_signal",		ctypes.POINTER(ctypes.c_char)),
	("c_handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy_data",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GClosure),)),
	("connect_flags",		ctypes.c_int),] )

g_signal_handler_block = _rpythonic_function_(		"g_signal_handler_block", ctypes.c_void_p, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("handler_id",		ctypes.c_ulong),] )

g_signal_handler_unblock = _rpythonic_function_(		"g_signal_handler_unblock", ctypes.c_void_p, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("handler_id",		ctypes.c_ulong),] )

g_signal_handler_disconnect = _rpythonic_function_(		"g_signal_handler_disconnect", ctypes.c_void_p, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("handler_id",		ctypes.c_ulong),] )

g_signal_handler_is_connected = _rpythonic_function_(		"g_signal_handler_is_connected", ctypes.c_int, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("handler_id",		ctypes.c_ulong),] )

g_signal_handler_find = _rpythonic_function_(		"g_signal_handler_find", ctypes.c_ulong, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("mask",		ctypes.c_int),
	("signal_id",		ctypes.c_uint),
	("detail",		ctypes.c_uint),
	("closure",		ctypes.POINTER(_GClosure)),
	("func",		ctypes.POINTER(ctypes.c_void_p)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_signal_handlers_block_matched = _rpythonic_function_(		"g_signal_handlers_block_matched", ctypes.c_uint, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("mask",		ctypes.c_int),
	("signal_id",		ctypes.c_uint),
	("detail",		ctypes.c_uint),
	("closure",		ctypes.POINTER(_GClosure)),
	("func",		ctypes.POINTER(ctypes.c_void_p)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_signal_handlers_unblock_matched = _rpythonic_function_(		"g_signal_handlers_unblock_matched", ctypes.c_uint, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("mask",		ctypes.c_int),
	("signal_id",		ctypes.c_uint),
	("detail",		ctypes.c_uint),
	("closure",		ctypes.POINTER(_GClosure)),
	("func",		ctypes.POINTER(ctypes.c_void_p)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_signal_override_class_closure = _rpythonic_function_(		"g_signal_override_class_closure", ctypes.c_void_p, [
	("signal_id",		ctypes.c_uint),
	("instance_type",		ctypes.c_uint),
	("class_closure",		ctypes.POINTER(_GClosure)),] )

g_signal_handlers_disconnect_matched = _rpythonic_function_(		"g_signal_handlers_disconnect_matched", ctypes.c_uint, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("mask",		ctypes.c_int),
	("signal_id",		ctypes.c_uint),
	("detail",		ctypes.c_uint),
	("closure",		ctypes.POINTER(_GClosure)),
	("func",		ctypes.POINTER(ctypes.c_void_p)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_signal_override_class_handler = _rpythonic_function_(		"g_signal_override_class_handler", ctypes.c_void_p, [
	("signal_name",		ctypes.POINTER(ctypes.c_char)),
	("instance_type",		ctypes.c_uint),
	("class_handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_signal_chain_from_overridden = _rpythonic_function_(		"g_signal_chain_from_overridden", ctypes.c_void_p, [
	("instance_and_params",		ctypes.POINTER(_GValue)),
	("return_value",		ctypes.POINTER(_GValue)),] )

g_signal_accumulator_true_handled = _rpythonic_function_(		"g_signal_accumulator_true_handled", ctypes.c_int, [
	("ihint",		ctypes.POINTER(_GSignalInvocationHint)),
	("return_accu",		ctypes.POINTER(_GValue)),
	("handler_return",		ctypes.POINTER(_GValue)),
	("dummy",		ctypes.POINTER(ctypes.c_void_p)),] )

g_signal_accumulator_first_wins = _rpythonic_function_(		"g_signal_accumulator_first_wins", ctypes.c_int, [
	("ihint",		ctypes.POINTER(_GSignalInvocationHint)),
	("return_accu",		ctypes.POINTER(_GValue)),
	("handler_return",		ctypes.POINTER(_GValue)),
	("dummy",		ctypes.POINTER(ctypes.c_void_p)),] )

g_signal_handlers_destroy = _rpythonic_function_(		"g_signal_handlers_destroy", ctypes.c_void_p, [("instance",		ctypes.c_void_p)] )

_g_signals_destroy = _rpythonic_function_(		"_g_signals_destroy", ctypes.c_void_p, [
	("itype",		ctypes.c_uint),] )

GObjectGetPropertyFunc = _rpythonic_function_(		"GObjectGetPropertyFunc", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("property_id",		ctypes.c_uint),
	("value",		ctypes.POINTER(_GValue)),
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

GObjectSetPropertyFunc = _rpythonic_function_(		"GObjectSetPropertyFunc", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("property_id",		ctypes.c_uint),
	("value",		ctypes.POINTER(_GValue)),
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

GObjectFinalizeFunc = _rpythonic_function_(		"GObjectFinalizeFunc", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),] )

GWeakNotify = _rpythonic_function_(		"GWeakNotify", ctypes.c_void_p, [
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("where_the_object_was",		ctypes.POINTER(_GObject)),] )

constructor = _rpythonic_function_(		"constructor", ctypes.POINTER(_GObject), [
	("C_type",		ctypes.c_uint),
	("n_construct_properties",		ctypes.c_uint),
	("construct_properties",		ctypes.POINTER(_GObjectConstructParam)),] )

set_property = _rpythonic_function_(		"set_property", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("property_id",		ctypes.c_uint),
	("value",		ctypes.POINTER(_GValue)),
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

get_property = _rpythonic_function_(		"get_property", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("property_id",		ctypes.c_uint),
	("value",		ctypes.POINTER(_GValue)),
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

dispose = _rpythonic_function_(		"dispose", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),] )

dispatch_properties_changed = _rpythonic_function_(		"dispatch_properties_changed", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("n_pspecs",		ctypes.c_uint),
	("pspecs",		ctypes.POINTER(ctypes.POINTER(_GParamSpec))),] )

notify = _rpythonic_function_(		"notify", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

constructed = _rpythonic_function_(		"constructed", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),] )

g_initially_unowned_get_type = _rpythonic_function_(		"g_initially_unowned_get_type", ctypes.c_uint, [] )

g_object_class_install_property = _rpythonic_function_(		"g_object_class_install_property", ctypes.c_void_p, [
	("oclass",		ctypes.POINTER(_GObjectClass)),
	("property_id",		ctypes.c_uint),
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

g_object_class_find_property = _rpythonic_function_(		"g_object_class_find_property", ctypes.POINTER(_GParamSpec), [
	("oclass",		ctypes.POINTER(_GObjectClass)),
	("property_name",		ctypes.POINTER(ctypes.c_char)),] )

g_object_class_list_properties = _rpythonic_function_(		"g_object_class_list_properties", ctypes.POINTER(ctypes.POINTER(_GParamSpec)), [
	("oclass",		ctypes.POINTER(_GObjectClass)),
	("n_properties",		ctypes.POINTER(ctypes.c_uint)),] )

g_object_class_override_property = _rpythonic_function_(		"g_object_class_override_property", ctypes.c_void_p, [
	("oclass",		ctypes.POINTER(_GObjectClass)),
	("property_id",		ctypes.c_uint),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_object_class_install_properties = _rpythonic_function_(		"g_object_class_install_properties", ctypes.c_void_p, [
	("oclass",		ctypes.POINTER(_GObjectClass)),
	("n_pspecs",		ctypes.c_uint),
	("pspecs",		ctypes.POINTER(ctypes.POINTER(_GParamSpec))),] )

g_object_interface_install_property = _rpythonic_function_(		"g_object_interface_install_property", ctypes.c_void_p, [
	("g_iface",		ctypes.POINTER(ctypes.c_void_p)),
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

g_object_interface_find_property = _rpythonic_function_(		"g_object_interface_find_property", ctypes.POINTER(_GParamSpec), [
	("g_iface",		ctypes.POINTER(ctypes.c_void_p)),
	("property_name",		ctypes.POINTER(ctypes.c_char)),] )

g_object_interface_list_properties = _rpythonic_function_(		"g_object_interface_list_properties", ctypes.POINTER(ctypes.POINTER(_GParamSpec)), [
	("g_iface",		ctypes.POINTER(ctypes.c_void_p)),
	("n_properties_p",		ctypes.POINTER(ctypes.c_uint)),] )

g_object_get_type = _rpythonic_function_(		"g_object_get_type", ctypes.c_uint, [] )

g_object_newv = _rpythonic_function_(		"g_object_newv", ctypes.POINTER(ctypes.c_void_p), [
	("object_type",		ctypes.c_uint),
	("n_parameters",		ctypes.c_uint),
	("parameters",		ctypes.POINTER(_GParameter)),] )

g_object_new_valist = _rpythonic_function_(		"g_object_new_valist", ctypes.POINTER(_GObject), [
	("object_type",		ctypes.c_uint),
	("first_property_name",		ctypes.POINTER(ctypes.c_char)),
	("var_args",		ctypes.c_char),] )

g_object_set_valist = _rpythonic_function_(		"g_object_set_valist", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("first_property_name",		ctypes.POINTER(ctypes.c_char)),
	("var_args",		ctypes.c_char),] )

g_object_get_valist = _rpythonic_function_(		"g_object_get_valist", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("first_property_name",		ctypes.POINTER(ctypes.c_char)),
	("var_args",		ctypes.c_char),] )

g_object_set_property = _rpythonic_function_(		"g_object_set_property", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("property_name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(_GValue)),] )

g_object_get_property = _rpythonic_function_(		"g_object_get_property", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("property_name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(_GValue)),] )

g_object_freeze_notify = _rpythonic_function_(		"g_object_freeze_notify", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),] )

g_object_notify = _rpythonic_function_(		"g_object_notify", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("property_name",		ctypes.POINTER(ctypes.c_char)),] )

g_object_notify_by_pspec = _rpythonic_function_(		"g_object_notify_by_pspec", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

g_object_thaw_notify = _rpythonic_function_(		"g_object_thaw_notify", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),] )

g_object_is_floating = _rpythonic_function_(		"g_object_is_floating", ctypes.c_int, [("C_object",		ctypes.c_void_p)] )

g_object_ref_sink = _rpythonic_function_(		"g_object_ref_sink", ctypes.POINTER(ctypes.c_void_p), [("C_object",		ctypes.c_void_p)] )

g_object_ref = _rpythonic_function_(		"g_object_ref", ctypes.POINTER(ctypes.c_void_p), [("C_object",		ctypes.c_void_p)] )

g_object_unref = _rpythonic_function_(		"g_object_unref", ctypes.c_void_p, [("C_object",		ctypes.c_void_p)] )

g_object_weak_ref = _rpythonic_function_(		"g_object_weak_ref", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GObject),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_object_weak_unref = _rpythonic_function_(		"g_object_weak_unref", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GObject),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_object_add_weak_pointer = _rpythonic_function_(		"g_object_add_weak_pointer", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("weak_pointer_location",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

g_object_remove_weak_pointer = _rpythonic_function_(		"g_object_remove_weak_pointer", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("weak_pointer_location",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

GToggleNotify = _rpythonic_function_(		"GToggleNotify", ctypes.c_void_p, [
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("C_object",		ctypes.POINTER(_GObject)),
	("is_last_ref",		ctypes.c_int),] )

g_object_add_toggle_ref = _rpythonic_function_(		"g_object_add_toggle_ref", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GObject),ctypes.c_int,)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_object_remove_toggle_ref = _rpythonic_function_(		"g_object_remove_toggle_ref", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GObject),ctypes.c_int,)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_object_get_qdata = _rpythonic_function_(		"g_object_get_qdata", ctypes.POINTER(ctypes.c_void_p), [
	("C_object",		ctypes.POINTER(_GObject)),
	("quark",		ctypes.c_uint),] )

g_object_set_qdata = _rpythonic_function_(		"g_object_set_qdata", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("quark",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_object_set_qdata_full = _rpythonic_function_(		"g_object_set_qdata_full", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("quark",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_object_steal_qdata = _rpythonic_function_(		"g_object_steal_qdata", ctypes.POINTER(ctypes.c_void_p), [
	("C_object",		ctypes.POINTER(_GObject)),
	("quark",		ctypes.c_uint),] )

g_object_get_data = _rpythonic_function_(		"g_object_get_data", ctypes.POINTER(ctypes.c_void_p), [
	("C_object",		ctypes.POINTER(_GObject)),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

g_object_set_data = _rpythonic_function_(		"g_object_set_data", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_object_set_data_full = _rpythonic_function_(		"g_object_set_data_full", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_object_steal_data = _rpythonic_function_(		"g_object_steal_data", ctypes.POINTER(ctypes.c_void_p), [
	("C_object",		ctypes.POINTER(_GObject)),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

g_object_watch_closure = _rpythonic_function_(		"g_object_watch_closure", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("closure",		ctypes.POINTER(_GClosure)),] )

g_cclosure_new_object = _rpythonic_function_(		"g_cclosure_new_object", ctypes.POINTER(_GClosure), [
	("callback_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("C_object",		ctypes.POINTER(_GObject)),] )

g_cclosure_new_object_swap = _rpythonic_function_(		"g_cclosure_new_object_swap", ctypes.POINTER(_GClosure), [
	("callback_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("C_object",		ctypes.POINTER(_GObject)),] )

g_closure_new_object = _rpythonic_function_(		"g_closure_new_object", ctypes.POINTER(_GClosure), [
	("sizeof_closure",		ctypes.c_uint),
	("C_object",		ctypes.POINTER(_GObject)),] )

g_value_set_object = _rpythonic_function_(		"g_value_set_object", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_object",		ctypes.POINTER(ctypes.c_void_p)),] )

g_value_get_object = _rpythonic_function_(		"g_value_get_object", ctypes.POINTER(ctypes.c_void_p), [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_dup_object = _rpythonic_function_(		"g_value_dup_object", ctypes.POINTER(ctypes.c_void_p), [
	("value",		ctypes.POINTER(_GValue)),] )

g_signal_connect_object = _rpythonic_function_(		"g_signal_connect_object", ctypes.c_ulong, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("detailed_signal",		ctypes.POINTER(ctypes.c_char)),
	("c_handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("gobject",		ctypes.POINTER(ctypes.c_void_p)),
	("connect_flags",		ctypes.c_int),] )

g_object_force_floating = _rpythonic_function_(		"g_object_force_floating", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),] )

g_object_run_dispose = _rpythonic_function_(		"g_object_run_dispose", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),] )

g_value_take_object = _rpythonic_function_(		"g_value_take_object", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_object",		ctypes.POINTER(ctypes.c_void_p)),] )

g_value_set_object_take_ownership = _rpythonic_function_(		"g_value_set_object_take_ownership", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_object",		ctypes.POINTER(ctypes.c_void_p)),] )

g_object_compat_control = _rpythonic_function_(		"g_object_compat_control", ctypes.c_uint, [
	("what",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_clear_object = _rpythonic_function_(		"g_clear_object", ctypes.c_void_p, [
	("object_ptr",		ctypes.POINTER(ctypes.POINTER(_GObject))),] )

GBindingTransformFunc = _rpythonic_function_(		"GBindingTransformFunc", ctypes.c_int, [
	("binding",		ctypes.POINTER(_GBinding)),
	("source_value",		ctypes.POINTER(_GValue)),
	("target_value",		ctypes.POINTER(_GValue)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_binding_flags_get_type = _rpythonic_function_(		"g_binding_flags_get_type", ctypes.c_uint, [] )

g_binding_get_type = _rpythonic_function_(		"g_binding_get_type", ctypes.c_uint, [] )

g_binding_get_flags = _rpythonic_function_(		"g_binding_get_flags", ctypes.c_int, [
	("binding",		ctypes.POINTER(_GBinding)),] )

g_binding_get_source = _rpythonic_function_(		"g_binding_get_source", ctypes.POINTER(_GObject), [
	("binding",		ctypes.POINTER(_GBinding)),] )

g_binding_get_target = _rpythonic_function_(		"g_binding_get_target", ctypes.POINTER(_GObject), [
	("binding",		ctypes.POINTER(_GBinding)),] )

g_binding_get_source_property = _rpythonic_function_(		"g_binding_get_source_property", ctypes.POINTER(ctypes.c_char), [
	("binding",		ctypes.POINTER(_GBinding)),] )

g_binding_get_target_property = _rpythonic_function_(		"g_binding_get_target_property", ctypes.POINTER(ctypes.c_char), [
	("binding",		ctypes.POINTER(_GBinding)),] )

g_object_bind_property = _rpythonic_function_(		"g_object_bind_property", ctypes.POINTER(_GBinding), [
	("source",		ctypes.POINTER(ctypes.c_void_p)),
	("source_property",		ctypes.POINTER(ctypes.c_char)),
	("target",		ctypes.POINTER(ctypes.c_void_p)),
	("target_property",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),] )

g_object_bind_property_full = _rpythonic_function_(		"g_object_bind_property_full", ctypes.POINTER(_GBinding), [
	("source",		ctypes.POINTER(ctypes.c_void_p)),
	("source_property",		ctypes.POINTER(ctypes.c_char)),
	("target",		ctypes.POINTER(ctypes.c_void_p)),
	("target_property",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("transform_to",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GBinding),ctypes.POINTER(_GValue),ctypes.POINTER(_GValue),ctypes.POINTER(ctypes.c_void_p),)),
	("transform_from",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GBinding),ctypes.POINTER(_GValue),ctypes.POINTER(_GValue),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_object_bind_property_with_closures = _rpythonic_function_(		"g_object_bind_property_with_closures", ctypes.POINTER(_GBinding), [
	("source",		ctypes.POINTER(ctypes.c_void_p)),
	("source_property",		ctypes.POINTER(ctypes.c_char)),
	("target",		ctypes.POINTER(ctypes.c_void_p)),
	("target_property",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("transform_to",		ctypes.POINTER(_GClosure)),
	("transform_from",		ctypes.POINTER(_GClosure)),] )

g_date_get_type = _rpythonic_function_(		"g_date_get_type", ctypes.c_uint, [] )

g_strv_get_type = _rpythonic_function_(		"g_strv_get_type", ctypes.c_uint, [] )

g_gstring_get_type = _rpythonic_function_(		"g_gstring_get_type", ctypes.c_uint, [] )

g_hash_table_get_type = _rpythonic_function_(		"g_hash_table_get_type", ctypes.c_uint, [] )

g_array_get_type = _rpythonic_function_(		"g_array_get_type", ctypes.c_uint, [] )

g_byte_array_get_type = _rpythonic_function_(		"g_byte_array_get_type", ctypes.c_uint, [] )

g_ptr_array_get_type = _rpythonic_function_(		"g_ptr_array_get_type", ctypes.c_uint, [] )

g_variant_type_get_gtype = _rpythonic_function_(		"g_variant_type_get_gtype", ctypes.c_uint, [] )

g_regex_get_type = _rpythonic_function_(		"g_regex_get_type", ctypes.c_uint, [] )

g_match_info_get_type = _rpythonic_function_(		"g_match_info_get_type", ctypes.c_uint, [] )

g_error_get_type = _rpythonic_function_(		"g_error_get_type", ctypes.c_uint, [] )

g_date_time_get_type = _rpythonic_function_(		"g_date_time_get_type", ctypes.c_uint, [] )

g_io_channel_get_type = _rpythonic_function_(		"g_io_channel_get_type", ctypes.c_uint, [] )

g_io_condition_get_type = _rpythonic_function_(		"g_io_condition_get_type", ctypes.c_uint, [] )

g_variant_builder_get_type = _rpythonic_function_(		"g_variant_builder_get_type", ctypes.c_uint, [] )

g_main_loop_get_type = _rpythonic_function_(		"g_main_loop_get_type", ctypes.c_uint, [] )

g_main_context_get_type = _rpythonic_function_(		"g_main_context_get_type", ctypes.c_uint, [] )

g_source_get_type = _rpythonic_function_(		"g_source_get_type", ctypes.c_uint, [] )

g_variant_get_gtype = _rpythonic_function_(		"g_variant_get_gtype", ctypes.c_uint, [] )

GBoxedCopyFunc = _rpythonic_function_(		"GBoxedCopyFunc", ctypes.POINTER(ctypes.c_void_p), [("boxed",		ctypes.c_void_p)] )

GBoxedFreeFunc = _rpythonic_function_(		"GBoxedFreeFunc", ctypes.c_void_p, [("boxed",		ctypes.c_void_p)] )

g_boxed_copy = _rpythonic_function_(		"g_boxed_copy", ctypes.POINTER(ctypes.c_void_p), [
	("boxed_type",		ctypes.c_uint),
	("src_boxed",		ctypes.POINTER(ctypes.c_void_p)),] )

g_boxed_free = _rpythonic_function_(		"g_boxed_free", ctypes.c_void_p, [
	("boxed_type",		ctypes.c_uint),
	("boxed",		ctypes.POINTER(ctypes.c_void_p)),] )

g_value_set_boxed = _rpythonic_function_(		"g_value_set_boxed", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_boxed",		ctypes.POINTER(ctypes.c_void_p)),] )

g_value_set_static_boxed = _rpythonic_function_(		"g_value_set_static_boxed", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_boxed",		ctypes.POINTER(ctypes.c_void_p)),] )

g_value_take_boxed = _rpythonic_function_(		"g_value_take_boxed", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_boxed",		ctypes.POINTER(ctypes.c_void_p)),] )

g_value_set_boxed_take_ownership = _rpythonic_function_(		"g_value_set_boxed_take_ownership", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_boxed",		ctypes.POINTER(ctypes.c_void_p)),] )

g_value_get_boxed = _rpythonic_function_(		"g_value_get_boxed", ctypes.POINTER(ctypes.c_void_p), [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_dup_boxed = _rpythonic_function_(		"g_value_dup_boxed", ctypes.POINTER(ctypes.c_void_p), [
	("value",		ctypes.POINTER(_GValue)),] )

g_boxed_type_register_static = _rpythonic_function_(		"g_boxed_type_register_static", ctypes.c_uint, [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("boxed_copy",		ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), )),
	("boxed_free",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_closure_get_type = _rpythonic_function_(		"g_closure_get_type", ctypes.c_uint, [] )

g_value_get_type = _rpythonic_function_(		"g_value_get_type", ctypes.c_uint, [] )

g_value_array_get_type = _rpythonic_function_(		"g_value_array_get_type", ctypes.c_uint, [] )

g_enum_get_value = _rpythonic_function_(		"g_enum_get_value", ctypes.POINTER(_GEnumValue), [
	("enum_class",		ctypes.POINTER(_GEnumClass)),
	("value",		ctypes.c_int),] )

g_enum_get_value_by_name = _rpythonic_function_(		"g_enum_get_value_by_name", ctypes.POINTER(_GEnumValue), [
	("enum_class",		ctypes.POINTER(_GEnumClass)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_enum_get_value_by_nick = _rpythonic_function_(		"g_enum_get_value_by_nick", ctypes.POINTER(_GEnumValue), [
	("enum_class",		ctypes.POINTER(_GEnumClass)),
	("nick",		ctypes.POINTER(ctypes.c_char)),] )

g_flags_get_first_value = _rpythonic_function_(		"g_flags_get_first_value", ctypes.POINTER(_GFlagsValue), [
	("flags_class",		ctypes.POINTER(_GFlagsClass)),
	("value",		ctypes.c_uint),] )

g_flags_get_value_by_name = _rpythonic_function_(		"g_flags_get_value_by_name", ctypes.POINTER(_GFlagsValue), [
	("flags_class",		ctypes.POINTER(_GFlagsClass)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_flags_get_value_by_nick = _rpythonic_function_(		"g_flags_get_value_by_nick", ctypes.POINTER(_GFlagsValue), [
	("flags_class",		ctypes.POINTER(_GFlagsClass)),
	("nick",		ctypes.POINTER(ctypes.c_char)),] )

g_value_set_enum = _rpythonic_function_(		"g_value_set_enum", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_enum",		ctypes.c_int),] )

g_value_get_enum = _rpythonic_function_(		"g_value_get_enum", ctypes.c_int, [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_set_flags = _rpythonic_function_(		"g_value_set_flags", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_flags",		ctypes.c_uint),] )

g_value_get_flags = _rpythonic_function_(		"g_value_get_flags", ctypes.c_uint, [
	("value",		ctypes.POINTER(_GValue)),] )

g_enum_register_static = _rpythonic_function_(		"g_enum_register_static", ctypes.c_uint, [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("const_static_values",		ctypes.POINTER(_GEnumValue)),] )

g_flags_register_static = _rpythonic_function_(		"g_flags_register_static", ctypes.c_uint, [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("const_static_values",		ctypes.POINTER(_GFlagsValue)),] )

g_enum_complete_type_info = _rpythonic_function_(		"g_enum_complete_type_info", ctypes.c_void_p, [
	("g_enum_type",		ctypes.c_uint),
	("info",		ctypes.POINTER(_GTypeInfo)),
	("const_values",		ctypes.POINTER(_GEnumValue)),] )

g_flags_complete_type_info = _rpythonic_function_(		"g_flags_complete_type_info", ctypes.c_void_p, [
	("g_flags_type",		ctypes.c_uint),
	("info",		ctypes.POINTER(_GTypeInfo)),
	("const_values",		ctypes.POINTER(_GFlagsValue)),] )

g_param_spec_char = _rpythonic_function_(		"g_param_spec_char", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("minimum",		ctypes.c_char),
	("maximum",		ctypes.c_char),
	("default_value",		ctypes.c_char),
	("flags",		ctypes.c_int),] )

g_param_spec_uchar = _rpythonic_function_(		"g_param_spec_uchar", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("minimum",		ctypes.c_ubyte),
	("maximum",		ctypes.c_ubyte),
	("default_value",		ctypes.c_ubyte),
	("flags",		ctypes.c_int),] )

g_param_spec_boolean = _rpythonic_function_(		"g_param_spec_boolean", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("default_value",		ctypes.c_int),
	("flags",		ctypes.c_int),] )

g_param_spec_int = _rpythonic_function_(		"g_param_spec_int", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("minimum",		ctypes.c_int),
	("maximum",		ctypes.c_int),
	("default_value",		ctypes.c_int),
	("flags",		ctypes.c_int),] )

g_param_spec_uint = _rpythonic_function_(		"g_param_spec_uint", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("minimum",		ctypes.c_uint),
	("maximum",		ctypes.c_uint),
	("default_value",		ctypes.c_uint),
	("flags",		ctypes.c_int),] )

g_param_spec_long = _rpythonic_function_(		"g_param_spec_long", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("minimum",		ctypes.c_long),
	("maximum",		ctypes.c_long),
	("default_value",		ctypes.c_long),
	("flags",		ctypes.c_int),] )

g_param_spec_ulong = _rpythonic_function_(		"g_param_spec_ulong", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("minimum",		ctypes.c_ulong),
	("maximum",		ctypes.c_ulong),
	("default_value",		ctypes.c_ulong),
	("flags",		ctypes.c_int),] )

g_param_spec_int64 = _rpythonic_function_(		"g_param_spec_int64", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("minimum",		ctypes.c_longlong),
	("maximum",		ctypes.c_longlong),
	("default_value",		ctypes.c_longlong),
	("flags",		ctypes.c_int),] )

g_param_spec_uint64 = _rpythonic_function_(		"g_param_spec_uint64", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("minimum",		ctypes.c_ulonglong),
	("maximum",		ctypes.c_ulonglong),
	("default_value",		ctypes.c_ulonglong),
	("flags",		ctypes.c_int),] )

g_param_spec_unichar = _rpythonic_function_(		"g_param_spec_unichar", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("default_value",		ctypes.c_uint),
	("flags",		ctypes.c_int),] )

g_param_spec_enum = _rpythonic_function_(		"g_param_spec_enum", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("enum_type",		ctypes.c_uint),
	("default_value",		ctypes.c_int),
	("flags",		ctypes.c_int),] )

g_param_spec_flags = _rpythonic_function_(		"g_param_spec_flags", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("flags_type",		ctypes.c_uint),
	("default_value",		ctypes.c_uint),
	("flags",		ctypes.c_int),] )

g_param_spec_float = _rpythonic_function_(		"g_param_spec_float", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("minimum",		ctypes.c_float),
	("maximum",		ctypes.c_float),
	("default_value",		ctypes.c_float),
	("flags",		ctypes.c_int),] )

g_param_spec_double = _rpythonic_function_(		"g_param_spec_double", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("minimum",		ctypes.c_double),
	("maximum",		ctypes.c_double),
	("default_value",		ctypes.c_double),
	("flags",		ctypes.c_int),] )

g_param_spec_string = _rpythonic_function_(		"g_param_spec_string", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("default_value",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),] )

g_param_spec_param = _rpythonic_function_(		"g_param_spec_param", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("param_type",		ctypes.c_uint),
	("flags",		ctypes.c_int),] )

g_param_spec_boxed = _rpythonic_function_(		"g_param_spec_boxed", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("boxed_type",		ctypes.c_uint),
	("flags",		ctypes.c_int),] )

g_param_spec_pointer = _rpythonic_function_(		"g_param_spec_pointer", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),] )

g_param_spec_value_array = _rpythonic_function_(		"g_param_spec_value_array", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("element_spec",		ctypes.POINTER(_GParamSpec)),
	("flags",		ctypes.c_int),] )

g_param_spec_object = _rpythonic_function_(		"g_param_spec_object", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("object_type",		ctypes.c_uint),
	("flags",		ctypes.c_int),] )

g_param_spec_override = _rpythonic_function_(		"g_param_spec_override", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("overridden",		ctypes.POINTER(_GParamSpec)),] )

g_param_spec_gtype = _rpythonic_function_(		"g_param_spec_gtype", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("is_a_type",		ctypes.c_uint),
	("flags",		ctypes.c_int),] )

g_param_spec_variant = _rpythonic_function_(		"g_param_spec_variant", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("C_type",		ctypes.POINTER(_GVariantType)),
	("default_value",		ctypes.POINTER(_GVariant)),
	("flags",		ctypes.c_int),] )

g_source_set_closure = _rpythonic_function_(		"g_source_set_closure", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),
	("closure",		ctypes.POINTER(_GClosure)),] )

g_source_set_dummy_callback = _rpythonic_function_(		"g_source_set_dummy_callback", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),] )

g_type_module_get_type = _rpythonic_function_(		"g_type_module_get_type", ctypes.c_uint, [] )

load = _rpythonic_function_(		"load", ctypes.c_int, [
	("module",		ctypes.POINTER(_GTypeModule)),] )

unload = _rpythonic_function_(		"unload", ctypes.c_void_p, [
	("module",		ctypes.POINTER(_GTypeModule)),] )

reserved1 = _rpythonic_function_(		"reserved1", ctypes.c_void_p, [] )

reserved2 = _rpythonic_function_(		"reserved2", ctypes.c_void_p, [] )

reserved3 = _rpythonic_function_(		"reserved3", ctypes.c_void_p, [] )

reserved4 = _rpythonic_function_(		"reserved4", ctypes.c_void_p, [] )

g_type_module_use = _rpythonic_function_(		"g_type_module_use", ctypes.c_int, [
	("module",		ctypes.POINTER(_GTypeModule)),] )

g_type_module_unuse = _rpythonic_function_(		"g_type_module_unuse", ctypes.c_void_p, [
	("module",		ctypes.POINTER(_GTypeModule)),] )

g_type_module_set_name = _rpythonic_function_(		"g_type_module_set_name", ctypes.c_void_p, [
	("module",		ctypes.POINTER(_GTypeModule)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_type_module_register_type = _rpythonic_function_(		"g_type_module_register_type", ctypes.c_uint, [
	("module",		ctypes.POINTER(_GTypeModule)),
	("parent_type",		ctypes.c_uint),
	("type_name",		ctypes.POINTER(ctypes.c_char)),
	("type_info",		ctypes.POINTER(_GTypeInfo)),
	("flags",		ctypes.c_int),] )

g_type_module_add_interface = _rpythonic_function_(		"g_type_module_add_interface", ctypes.c_void_p, [
	("module",		ctypes.POINTER(_GTypeModule)),
	("instance_type",		ctypes.c_uint),
	("interface_type",		ctypes.c_uint),
	("interface_info",		ctypes.POINTER(_GInterfaceInfo)),] )

g_type_module_register_enum = _rpythonic_function_(		"g_type_module_register_enum", ctypes.c_uint, [
	("module",		ctypes.POINTER(_GTypeModule)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("const_static_values",		ctypes.POINTER(_GEnumValue)),] )

g_type_module_register_flags = _rpythonic_function_(		"g_type_module_register_flags", ctypes.c_uint, [
	("module",		ctypes.POINTER(_GTypeModule)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("const_static_values",		ctypes.POINTER(_GFlagsValue)),] )

GTypePluginUse = _rpythonic_function_(		"GTypePluginUse", ctypes.c_void_p, [
	("plugin",		ctypes.POINTER(_GTypePlugin)),] )

GTypePluginUnuse = _rpythonic_function_(		"GTypePluginUnuse", ctypes.c_void_p, [
	("plugin",		ctypes.POINTER(_GTypePlugin)),] )

GTypePluginCompleteTypeInfo = _rpythonic_function_(		"GTypePluginCompleteTypeInfo", ctypes.c_void_p, [
	("plugin",		ctypes.POINTER(_GTypePlugin)),
	("g_type",		ctypes.c_uint),
	("info",		ctypes.POINTER(_GTypeInfo)),
	("value_table",		ctypes.POINTER(_GTypeValueTable)),] )

GTypePluginCompleteInterfaceInfo = _rpythonic_function_(		"GTypePluginCompleteInterfaceInfo", ctypes.c_void_p, [
	("plugin",		ctypes.POINTER(_GTypePlugin)),
	("instance_type",		ctypes.c_uint),
	("interface_type",		ctypes.c_uint),
	("info",		ctypes.POINTER(_GInterfaceInfo)),] )

g_type_plugin_get_type = _rpythonic_function_(		"g_type_plugin_get_type", ctypes.c_uint, [] )

g_type_plugin_use = _rpythonic_function_(		"g_type_plugin_use", ctypes.c_void_p, [
	("plugin",		ctypes.POINTER(_GTypePlugin)),] )

g_type_plugin_unuse = _rpythonic_function_(		"g_type_plugin_unuse", ctypes.c_void_p, [
	("plugin",		ctypes.POINTER(_GTypePlugin)),] )

g_type_plugin_complete_type_info = _rpythonic_function_(		"g_type_plugin_complete_type_info", ctypes.c_void_p, [
	("plugin",		ctypes.POINTER(_GTypePlugin)),
	("g_type",		ctypes.c_uint),
	("info",		ctypes.POINTER(_GTypeInfo)),
	("value_table",		ctypes.POINTER(_GTypeValueTable)),] )

g_type_plugin_complete_interface_info = _rpythonic_function_(		"g_type_plugin_complete_interface_info", ctypes.c_void_p, [
	("plugin",		ctypes.POINTER(_GTypePlugin)),
	("instance_type",		ctypes.c_uint),
	("interface_type",		ctypes.c_uint),
	("info",		ctypes.POINTER(_GInterfaceInfo)),] )

g_value_array_get_nth = _rpythonic_function_(		"g_value_array_get_nth", ctypes.POINTER(_GValue), [
	("value_array",		ctypes.POINTER(_GValueArray)),
	("index_",		ctypes.c_uint),] )

g_value_array_new = _rpythonic_function_(		"g_value_array_new", ctypes.POINTER(_GValueArray), [
	("n_prealloced",		ctypes.c_uint),] )

g_value_array_free = _rpythonic_function_(		"g_value_array_free", ctypes.c_void_p, [
	("value_array",		ctypes.POINTER(_GValueArray)),] )

g_value_array_copy = _rpythonic_function_(		"g_value_array_copy", ctypes.POINTER(_GValueArray), [
	("value_array",		ctypes.POINTER(_GValueArray)),] )

g_value_array_prepend = _rpythonic_function_(		"g_value_array_prepend", ctypes.POINTER(_GValueArray), [
	("value_array",		ctypes.POINTER(_GValueArray)),
	("value",		ctypes.POINTER(_GValue)),] )

g_value_array_append = _rpythonic_function_(		"g_value_array_append", ctypes.POINTER(_GValueArray), [
	("value_array",		ctypes.POINTER(_GValueArray)),
	("value",		ctypes.POINTER(_GValue)),] )

g_value_array_insert = _rpythonic_function_(		"g_value_array_insert", ctypes.POINTER(_GValueArray), [
	("value_array",		ctypes.POINTER(_GValueArray)),
	("index_",		ctypes.c_uint),
	("value",		ctypes.POINTER(_GValue)),] )

g_value_array_remove = _rpythonic_function_(		"g_value_array_remove", ctypes.POINTER(_GValueArray), [
	("value_array",		ctypes.POINTER(_GValueArray)),
	("index_",		ctypes.c_uint),] )

g_value_array_sort = _rpythonic_function_(		"g_value_array_sort", ctypes.POINTER(_GValueArray), [
	("value_array",		ctypes.POINTER(_GValueArray)),
	("compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_value_array_sort_with_data = _rpythonic_function_(		"g_value_array_sort_with_data", ctypes.POINTER(_GValueArray), [
	("value_array",		ctypes.POINTER(_GValueArray)),
	("compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_value_set_char = _rpythonic_function_(		"g_value_set_char", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_char",		ctypes.c_char),] )

g_value_get_char = _rpythonic_function_(		"g_value_get_char", ctypes.c_char, [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_set_uchar = _rpythonic_function_(		"g_value_set_uchar", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_uchar",		ctypes.c_ubyte),] )

g_value_get_uchar = _rpythonic_function_(		"g_value_get_uchar", ctypes.c_ubyte, [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_set_boolean = _rpythonic_function_(		"g_value_set_boolean", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_boolean",		ctypes.c_int),] )

g_value_get_boolean = _rpythonic_function_(		"g_value_get_boolean", ctypes.c_int, [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_set_int = _rpythonic_function_(		"g_value_set_int", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_int",		ctypes.c_int),] )

g_value_get_int = _rpythonic_function_(		"g_value_get_int", ctypes.c_int, [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_set_uint = _rpythonic_function_(		"g_value_set_uint", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_uint",		ctypes.c_uint),] )

g_value_get_uint = _rpythonic_function_(		"g_value_get_uint", ctypes.c_uint, [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_set_long = _rpythonic_function_(		"g_value_set_long", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_long",		ctypes.c_long),] )

g_value_get_long = _rpythonic_function_(		"g_value_get_long", ctypes.c_long, [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_set_ulong = _rpythonic_function_(		"g_value_set_ulong", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_ulong",		ctypes.c_ulong),] )

g_value_get_ulong = _rpythonic_function_(		"g_value_get_ulong", ctypes.c_ulong, [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_set_int64 = _rpythonic_function_(		"g_value_set_int64", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_int64",		ctypes.c_longlong),] )

g_value_get_int64 = _rpythonic_function_(		"g_value_get_int64", ctypes.c_longlong, [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_set_uint64 = _rpythonic_function_(		"g_value_set_uint64", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_uint64",		ctypes.c_ulonglong),] )

g_value_get_uint64 = _rpythonic_function_(		"g_value_get_uint64", ctypes.c_ulonglong, [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_set_float = _rpythonic_function_(		"g_value_set_float", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_float",		ctypes.c_float),] )

g_value_get_float = _rpythonic_function_(		"g_value_get_float", ctypes.c_float, [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_set_double = _rpythonic_function_(		"g_value_set_double", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_double",		ctypes.c_double),] )

g_value_get_double = _rpythonic_function_(		"g_value_get_double", ctypes.c_double, [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_set_string = _rpythonic_function_(		"g_value_set_string", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_string",		ctypes.POINTER(ctypes.c_char)),] )

g_value_set_static_string = _rpythonic_function_(		"g_value_set_static_string", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_string",		ctypes.POINTER(ctypes.c_char)),] )

g_value_get_string = _rpythonic_function_(		"g_value_get_string", ctypes.POINTER(ctypes.c_char), [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_dup_string = _rpythonic_function_(		"g_value_dup_string", ctypes.POINTER(ctypes.c_char), [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_set_pointer = _rpythonic_function_(		"g_value_set_pointer", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_pointer",		ctypes.POINTER(ctypes.c_void_p)),] )

g_value_get_pointer = _rpythonic_function_(		"g_value_get_pointer", ctypes.POINTER(ctypes.c_void_p), [
	("value",		ctypes.POINTER(_GValue)),] )

g_gtype_get_type = _rpythonic_function_(		"g_gtype_get_type", ctypes.c_uint, [] )

g_value_set_gtype = _rpythonic_function_(		"g_value_set_gtype", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_gtype",		ctypes.c_uint),] )

g_value_get_gtype = _rpythonic_function_(		"g_value_get_gtype", ctypes.c_uint, [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_set_variant = _rpythonic_function_(		"g_value_set_variant", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("variant",		ctypes.POINTER(_GVariant)),] )

g_value_take_variant = _rpythonic_function_(		"g_value_take_variant", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("variant",		ctypes.POINTER(_GVariant)),] )

g_value_get_variant = _rpythonic_function_(		"g_value_get_variant", ctypes.POINTER(_GVariant), [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_dup_variant = _rpythonic_function_(		"g_value_dup_variant", ctypes.POINTER(_GVariant), [
	("value",		ctypes.POINTER(_GValue)),] )

g_pointer_type_register_static = _rpythonic_function_(		"g_pointer_type_register_static", ctypes.c_uint, [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_strdup_value_contents = _rpythonic_function_(		"g_strdup_value_contents", ctypes.POINTER(ctypes.c_char), [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_take_string = _rpythonic_function_(		"g_value_take_string", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_string",		ctypes.POINTER(ctypes.c_char)),] )

g_value_set_string_take_ownership = _rpythonic_function_(		"g_value_set_string_take_ownership", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_string",		ctypes.POINTER(ctypes.c_char)),] )

GAsyncReadyCallback = _rpythonic_function_(		"GAsyncReadyCallback", ctypes.c_void_p, [
	("source_object",		ctypes.POINTER(_GObject)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GFileProgressCallback = _rpythonic_function_(		"GFileProgressCallback", ctypes.c_void_p, [
	("current_num_bytes",		ctypes.c_longlong),
	("total_num_bytes",		ctypes.c_longlong),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GFileReadMoreCallback = _rpythonic_function_(		"GFileReadMoreCallback", ctypes.c_int, [
	("file_contents",		ctypes.POINTER(ctypes.c_char)),
	("file_size",		ctypes.c_longlong),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GIOSchedulerJobFunc = _rpythonic_function_(		"GIOSchedulerJobFunc", ctypes.c_int, [
	("job",		ctypes.POINTER(_GIOSchedulerJob)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GSimpleAsyncThreadFunc = _rpythonic_function_(		"GSimpleAsyncThreadFunc", ctypes.c_void_p, [
	("res",		ctypes.POINTER(_GSimpleAsyncResult)),
	("C_object",		ctypes.POINTER(_GObject)),
	("cancellable",		ctypes.POINTER(_GCancellable)),] )

GSocketSourceFunc = _rpythonic_function_(		"GSocketSourceFunc", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),
	("condition",		ctypes.c_int),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GCancellableSourceFunc = _rpythonic_function_(		"GCancellableSourceFunc", ctypes.c_int, [
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GPollableSourceFunc = _rpythonic_function_(		"GPollableSourceFunc", ctypes.c_int, [
	("pollable_stream",		ctypes.POINTER(_GObject)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GDBusProxyTypeFunc = _rpythonic_function_(		"GDBusProxyTypeFunc", ctypes.c_uint, [
	("manager",		ctypes.POINTER(_GDBusObjectManagerClient)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("interface_name",		ctypes.POINTER(ctypes.c_char)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

dup = _rpythonic_function_(		"dup", ctypes.POINTER(_GAppInfo), [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

equal = _rpythonic_function_(		"equal", ctypes.c_int, [
	("appinfo1",		ctypes.POINTER(_GAppInfo)),
	("appinfo2",		ctypes.POINTER(_GAppInfo)),] )

get_id = _rpythonic_function_(		"get_id", ctypes.POINTER(ctypes.c_char), [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

get_name = _rpythonic_function_(		"get_name", ctypes.POINTER(ctypes.c_char), [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

get_description = _rpythonic_function_(		"get_description", ctypes.POINTER(ctypes.c_char), [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

get_executable = _rpythonic_function_(		"get_executable", ctypes.POINTER(ctypes.c_char), [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

get_icon = _rpythonic_function_(		"get_icon", ctypes.POINTER(_GIcon), [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

launch = _rpythonic_function_(		"launch", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),
	("files",		ctypes.POINTER(_GList)),
	("launch_context",		ctypes.POINTER(_GAppLaunchContext)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

supports_uris = _rpythonic_function_(		"supports_uris", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

supports_files = _rpythonic_function_(		"supports_files", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

launch_uris = _rpythonic_function_(		"launch_uris", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),
	("uris",		ctypes.POINTER(_GList)),
	("launch_context",		ctypes.POINTER(_GAppLaunchContext)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

should_show = _rpythonic_function_(		"should_show", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

set_as_default_for_type = _rpythonic_function_(		"set_as_default_for_type", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),
	("content_type",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

set_as_default_for_extension = _rpythonic_function_(		"set_as_default_for_extension", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),
	("extension",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

add_supports_type = _rpythonic_function_(		"add_supports_type", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),
	("content_type",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

can_remove_supports_type = _rpythonic_function_(		"can_remove_supports_type", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

remove_supports_type = _rpythonic_function_(		"remove_supports_type", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),
	("content_type",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

can_delete = _rpythonic_function_(		"can_delete", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

do_delete = _rpythonic_function_(		"do_delete", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

get_commandline = _rpythonic_function_(		"get_commandline", ctypes.POINTER(ctypes.c_char), [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

get_display_name = _rpythonic_function_(		"get_display_name", ctypes.POINTER(ctypes.c_char), [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

set_as_last_used_for_type = _rpythonic_function_(		"set_as_last_used_for_type", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),
	("content_type",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_app_info_create_from_commandline = _rpythonic_function_(		"g_app_info_create_from_commandline", ctypes.POINTER(_GAppInfo), [
	("commandline",		ctypes.POINTER(ctypes.c_char)),
	("application_name",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_app_info_dup = _rpythonic_function_(		"g_app_info_dup", ctypes.POINTER(_GAppInfo), [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

g_app_info_get_type = _rpythonic_function_(		"g_app_info_get_type", ctypes.c_uint, [] )

g_app_info_equal = _rpythonic_function_(		"g_app_info_equal", ctypes.c_int, [
	("appinfo1",		ctypes.POINTER(_GAppInfo)),
	("appinfo2",		ctypes.POINTER(_GAppInfo)),] )

g_app_info_get_id = _rpythonic_function_(		"g_app_info_get_id", ctypes.POINTER(ctypes.c_char), [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

g_app_info_get_name = _rpythonic_function_(		"g_app_info_get_name", ctypes.POINTER(ctypes.c_char), [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

g_app_info_get_display_name = _rpythonic_function_(		"g_app_info_get_display_name", ctypes.POINTER(ctypes.c_char), [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

g_app_info_get_description = _rpythonic_function_(		"g_app_info_get_description", ctypes.POINTER(ctypes.c_char), [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

g_app_info_get_executable = _rpythonic_function_(		"g_app_info_get_executable", ctypes.POINTER(ctypes.c_char), [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

g_app_info_get_commandline = _rpythonic_function_(		"g_app_info_get_commandline", ctypes.POINTER(ctypes.c_char), [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

g_app_info_get_icon = _rpythonic_function_(		"g_app_info_get_icon", ctypes.POINTER(_GIcon), [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

g_app_info_launch = _rpythonic_function_(		"g_app_info_launch", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),
	("files",		ctypes.POINTER(_GList)),
	("launch_context",		ctypes.POINTER(_GAppLaunchContext)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_app_info_supports_uris = _rpythonic_function_(		"g_app_info_supports_uris", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

g_app_info_supports_files = _rpythonic_function_(		"g_app_info_supports_files", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

g_app_info_launch_uris = _rpythonic_function_(		"g_app_info_launch_uris", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),
	("uris",		ctypes.POINTER(_GList)),
	("launch_context",		ctypes.POINTER(_GAppLaunchContext)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_app_info_should_show = _rpythonic_function_(		"g_app_info_should_show", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

g_app_info_set_as_default_for_type = _rpythonic_function_(		"g_app_info_set_as_default_for_type", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),
	("content_type",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_app_info_set_as_default_for_extension = _rpythonic_function_(		"g_app_info_set_as_default_for_extension", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),
	("extension",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_app_info_add_supports_type = _rpythonic_function_(		"g_app_info_add_supports_type", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),
	("content_type",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_app_info_can_remove_supports_type = _rpythonic_function_(		"g_app_info_can_remove_supports_type", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

g_app_info_remove_supports_type = _rpythonic_function_(		"g_app_info_remove_supports_type", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),
	("content_type",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_app_info_can_delete = _rpythonic_function_(		"g_app_info_can_delete", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

g_app_info_delete = _rpythonic_function_(		"g_app_info_delete", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

g_app_info_set_as_last_used_for_type = _rpythonic_function_(		"g_app_info_set_as_last_used_for_type", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),
	("content_type",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_app_info_get_all = _rpythonic_function_(		"g_app_info_get_all", ctypes.POINTER(_GList), [] )

g_app_info_get_all_for_type = _rpythonic_function_(		"g_app_info_get_all_for_type", ctypes.POINTER(_GList), [
	("content_type",		ctypes.POINTER(ctypes.c_char)),] )

g_app_info_get_recommended_for_type = _rpythonic_function_(		"g_app_info_get_recommended_for_type", ctypes.POINTER(_GList), [
	("content_type",		ctypes.POINTER(ctypes.c_char)),] )

g_app_info_get_fallback_for_type = _rpythonic_function_(		"g_app_info_get_fallback_for_type", ctypes.POINTER(_GList), [
	("content_type",		ctypes.POINTER(ctypes.c_char)),] )

g_app_info_reset_type_associations = _rpythonic_function_(		"g_app_info_reset_type_associations", ctypes.c_void_p, [
	("content_type",		ctypes.POINTER(ctypes.c_char)),] )

g_app_info_get_default_for_type = _rpythonic_function_(		"g_app_info_get_default_for_type", ctypes.POINTER(_GAppInfo), [
	("content_type",		ctypes.POINTER(ctypes.c_char)),
	("must_support_uris",		ctypes.c_int),] )

g_app_info_get_default_for_uri_scheme = _rpythonic_function_(		"g_app_info_get_default_for_uri_scheme", ctypes.POINTER(_GAppInfo), [
	("uri_scheme",		ctypes.POINTER(ctypes.c_char)),] )

g_app_info_launch_default_for_uri = _rpythonic_function_(		"g_app_info_launch_default_for_uri", ctypes.c_int, [
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("launch_context",		ctypes.POINTER(_GAppLaunchContext)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

get_display = _rpythonic_function_(		"get_display", ctypes.POINTER(ctypes.c_char), [
	("context",		ctypes.POINTER(_GAppLaunchContext)),
	("info",		ctypes.POINTER(_GAppInfo)),
	("files",		ctypes.POINTER(_GList)),] )

get_startup_notify_id = _rpythonic_function_(		"get_startup_notify_id", ctypes.POINTER(ctypes.c_char), [
	("context",		ctypes.POINTER(_GAppLaunchContext)),
	("info",		ctypes.POINTER(_GAppInfo)),
	("files",		ctypes.POINTER(_GList)),] )

launch_failed = _rpythonic_function_(		"launch_failed", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GAppLaunchContext)),
	("startup_notify_id",		ctypes.POINTER(ctypes.c_char)),] )

_g_reserved1 = _rpythonic_function_(		"_g_reserved1", ctypes.c_void_p, [] )

_g_reserved2 = _rpythonic_function_(		"_g_reserved2", ctypes.c_void_p, [] )

_g_reserved3 = _rpythonic_function_(		"_g_reserved3", ctypes.c_void_p, [] )

_g_reserved4 = _rpythonic_function_(		"_g_reserved4", ctypes.c_void_p, [] )

_g_reserved5 = _rpythonic_function_(		"_g_reserved5", ctypes.c_void_p, [] )

g_app_launch_context_get_type = _rpythonic_function_(		"g_app_launch_context_get_type", ctypes.c_uint, [] )

g_app_launch_context_new = _rpythonic_function_(		"g_app_launch_context_new", ctypes.POINTER(_GAppLaunchContext), [] )

g_app_launch_context_get_display = _rpythonic_function_(		"g_app_launch_context_get_display", ctypes.POINTER(ctypes.c_char), [
	("context",		ctypes.POINTER(_GAppLaunchContext)),
	("info",		ctypes.POINTER(_GAppInfo)),
	("files",		ctypes.POINTER(_GList)),] )

g_app_launch_context_get_startup_notify_id = _rpythonic_function_(		"g_app_launch_context_get_startup_notify_id", ctypes.POINTER(ctypes.c_char), [
	("context",		ctypes.POINTER(_GAppLaunchContext)),
	("info",		ctypes.POINTER(_GAppInfo)),
	("files",		ctypes.POINTER(_GList)),] )

g_app_launch_context_launch_failed = _rpythonic_function_(		"g_app_launch_context_launch_failed", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GAppLaunchContext)),
	("startup_notify_id",		ctypes.POINTER(ctypes.c_char)),] )

get_parameter_type = _rpythonic_function_(		"get_parameter_type", ctypes.POINTER(_GVariantType), [
	("action",		ctypes.POINTER(_GAction)),] )

get_state_type = _rpythonic_function_(		"get_state_type", ctypes.POINTER(_GVariantType), [
	("action",		ctypes.POINTER(_GAction)),] )

get_state_hint = _rpythonic_function_(		"get_state_hint", ctypes.POINTER(_GVariant), [
	("action",		ctypes.POINTER(_GAction)),] )

get_enabled = _rpythonic_function_(		"get_enabled", ctypes.c_int, [
	("action",		ctypes.POINTER(_GAction)),] )

get_state = _rpythonic_function_(		"get_state", ctypes.POINTER(_GVariant), [
	("action",		ctypes.POINTER(_GAction)),] )

change_state = _rpythonic_function_(		"change_state", ctypes.c_void_p, [
	("action",		ctypes.POINTER(_GAction)),
	("value",		ctypes.POINTER(_GVariant)),] )

activate = _rpythonic_function_(		"activate", ctypes.c_void_p, [
	("action",		ctypes.POINTER(_GAction)),
	("parameter",		ctypes.POINTER(_GVariant)),] )

g_action_get_type = _rpythonic_function_(		"g_action_get_type", ctypes.c_uint, [] )

g_action_get_name = _rpythonic_function_(		"g_action_get_name", ctypes.POINTER(ctypes.c_char), [
	("action",		ctypes.POINTER(_GAction)),] )

g_action_get_parameter_type = _rpythonic_function_(		"g_action_get_parameter_type", ctypes.POINTER(_GVariantType), [
	("action",		ctypes.POINTER(_GAction)),] )

g_action_get_state_type = _rpythonic_function_(		"g_action_get_state_type", ctypes.POINTER(_GVariantType), [
	("action",		ctypes.POINTER(_GAction)),] )

g_action_get_state_hint = _rpythonic_function_(		"g_action_get_state_hint", ctypes.POINTER(_GVariant), [
	("action",		ctypes.POINTER(_GAction)),] )

g_action_get_enabled = _rpythonic_function_(		"g_action_get_enabled", ctypes.c_int, [
	("action",		ctypes.POINTER(_GAction)),] )

g_action_get_state = _rpythonic_function_(		"g_action_get_state", ctypes.POINTER(_GVariant), [
	("action",		ctypes.POINTER(_GAction)),] )

g_action_change_state = _rpythonic_function_(		"g_action_change_state", ctypes.c_void_p, [
	("action",		ctypes.POINTER(_GAction)),
	("value",		ctypes.POINTER(_GVariant)),] )

g_action_activate = _rpythonic_function_(		"g_action_activate", ctypes.c_void_p, [
	("action",		ctypes.POINTER(_GAction)),
	("parameter",		ctypes.POINTER(_GVariant)),] )

g_simple_action_get_type = _rpythonic_function_(		"g_simple_action_get_type", ctypes.c_uint, [] )

g_simple_action_new = _rpythonic_function_(		"g_simple_action_new", ctypes.POINTER(_GSimpleAction), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("parameter_type",		ctypes.POINTER(_GVariantType)),] )

g_simple_action_new_stateful = _rpythonic_function_(		"g_simple_action_new_stateful", ctypes.POINTER(_GSimpleAction), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("parameter_type",		ctypes.POINTER(_GVariantType)),
	("state",		ctypes.POINTER(_GVariant)),] )

g_simple_action_set_enabled = _rpythonic_function_(		"g_simple_action_set_enabled", ctypes.c_void_p, [
	("simple",		ctypes.POINTER(_GSimpleAction)),
	("enabled",		ctypes.c_int),] )

g_simple_action_set_state = _rpythonic_function_(		"g_simple_action_set_state", ctypes.c_void_p, [
	("simple",		ctypes.POINTER(_GSimpleAction)),
	("value",		ctypes.POINTER(_GVariant)),] )

has_action = _rpythonic_function_(		"has_action", ctypes.c_int, [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),] )

list_actions = _rpythonic_function_(		"list_actions", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("action_group",		ctypes.POINTER(_GActionGroup)),] )

get_action_enabled = _rpythonic_function_(		"get_action_enabled", ctypes.c_int, [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),] )

get_action_parameter_type = _rpythonic_function_(		"get_action_parameter_type", ctypes.POINTER(_GVariantType), [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),] )

get_action_state_type = _rpythonic_function_(		"get_action_state_type", ctypes.POINTER(_GVariantType), [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),] )

get_action_state_hint = _rpythonic_function_(		"get_action_state_hint", ctypes.POINTER(_GVariant), [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),] )

get_action_state = _rpythonic_function_(		"get_action_state", ctypes.POINTER(_GVariant), [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),] )

change_action_state = _rpythonic_function_(		"change_action_state", ctypes.c_void_p, [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(_GVariant)),] )

activate_action = _rpythonic_function_(		"activate_action", ctypes.c_void_p, [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),
	("parameter",		ctypes.POINTER(_GVariant)),] )

action_added = _rpythonic_function_(		"action_added", ctypes.c_void_p, [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),] )

action_removed = _rpythonic_function_(		"action_removed", ctypes.c_void_p, [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),] )

action_enabled_changed = _rpythonic_function_(		"action_enabled_changed", ctypes.c_void_p, [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),
	("enabled",		ctypes.c_int),] )

action_state_changed = _rpythonic_function_(		"action_state_changed", ctypes.c_void_p, [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),
	("state",		ctypes.POINTER(_GVariant)),] )

g_action_group_has_action = _rpythonic_function_(		"g_action_group_has_action", ctypes.c_int, [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),] )

g_action_group_list_actions = _rpythonic_function_(		"g_action_group_list_actions", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("action_group",		ctypes.POINTER(_GActionGroup)),] )

g_action_group_get_type = _rpythonic_function_(		"g_action_group_get_type", ctypes.c_uint, [] )

g_action_group_get_action_parameter_type = _rpythonic_function_(		"g_action_group_get_action_parameter_type", ctypes.POINTER(_GVariantType), [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),] )

g_action_group_get_action_state_type = _rpythonic_function_(		"g_action_group_get_action_state_type", ctypes.POINTER(_GVariantType), [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),] )

g_action_group_get_action_state_hint = _rpythonic_function_(		"g_action_group_get_action_state_hint", ctypes.POINTER(_GVariant), [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),] )

g_action_group_get_action_enabled = _rpythonic_function_(		"g_action_group_get_action_enabled", ctypes.c_int, [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),] )

g_action_group_get_action_state = _rpythonic_function_(		"g_action_group_get_action_state", ctypes.POINTER(_GVariant), [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),] )

g_action_group_change_action_state = _rpythonic_function_(		"g_action_group_change_action_state", ctypes.c_void_p, [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(_GVariant)),] )

g_action_group_activate_action = _rpythonic_function_(		"g_action_group_activate_action", ctypes.c_void_p, [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),
	("parameter",		ctypes.POINTER(_GVariant)),] )

g_action_group_action_added = _rpythonic_function_(		"g_action_group_action_added", ctypes.c_void_p, [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),] )

g_action_group_action_removed = _rpythonic_function_(		"g_action_group_action_removed", ctypes.c_void_p, [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),] )

g_action_group_action_enabled_changed = _rpythonic_function_(		"g_action_group_action_enabled_changed", ctypes.c_void_p, [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),
	("enabled",		ctypes.c_int),] )

g_action_group_action_state_changed = _rpythonic_function_(		"g_action_group_action_state_changed", ctypes.c_void_p, [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),
	("state",		ctypes.POINTER(_GVariant)),] )

g_simple_action_group_get_type = _rpythonic_function_(		"g_simple_action_group_get_type", ctypes.c_uint, [] )

g_simple_action_group_new = _rpythonic_function_(		"g_simple_action_group_new", ctypes.POINTER(_GSimpleActionGroup), [] )

g_simple_action_group_lookup = _rpythonic_function_(		"g_simple_action_group_lookup", ctypes.POINTER(_GAction), [
	("simple",		ctypes.POINTER(_GSimpleActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),] )

g_simple_action_group_insert = _rpythonic_function_(		"g_simple_action_group_insert", ctypes.c_void_p, [
	("simple",		ctypes.POINTER(_GSimpleActionGroup)),
	("action",		ctypes.POINTER(_GAction)),] )

g_simple_action_group_remove = _rpythonic_function_(		"g_simple_action_group_remove", ctypes.c_void_p, [
	("simple",		ctypes.POINTER(_GSimpleActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),] )

g_simple_action_group_add_entries = _rpythonic_function_(		"g_simple_action_group_add_entries", ctypes.c_void_p, [
	("simple",		ctypes.POINTER(_GSimpleActionGroup)),
	("entries",		ctypes.POINTER(_GActionEntry)),
	("n_entries",		ctypes.c_int),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

startup = _rpythonic_function_(		"startup", ctypes.c_void_p, [
	("application",		ctypes.POINTER(_GApplication)),] )

open = _rpythonic_function_(		"open", ctypes.c_void_p, [
	("application",		ctypes.POINTER(_GApplication)),
	("files",		ctypes.POINTER(ctypes.POINTER(_GFile))),
	("n_files",		ctypes.c_int),
	("hint",		ctypes.POINTER(ctypes.c_char)),] )

command_line = _rpythonic_function_(		"command_line", ctypes.c_int, [
	("application",		ctypes.POINTER(_GApplication)),
	("command_line",		ctypes.POINTER(_GApplicationCommandLine)),] )

local_command_line = _rpythonic_function_(		"local_command_line", ctypes.c_int, [
	("application",		ctypes.POINTER(_GApplication)),
	("arguments",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(ctypes.c_char)))),
	("exit_status",		ctypes.POINTER(ctypes.c_int)),] )

before_emit = _rpythonic_function_(		"before_emit", ctypes.c_void_p, [
	("application",		ctypes.POINTER(_GApplication)),
	("platform_data",		ctypes.POINTER(_GVariant)),] )

after_emit = _rpythonic_function_(		"after_emit", ctypes.c_void_p, [
	("application",		ctypes.POINTER(_GApplication)),
	("platform_data",		ctypes.POINTER(_GVariant)),] )

add_platform_data = _rpythonic_function_(		"add_platform_data", ctypes.c_void_p, [
	("application",		ctypes.POINTER(_GApplication)),
	("builder",		ctypes.POINTER(_GVariantBuilder)),] )

quit_mainloop = _rpythonic_function_(		"quit_mainloop", ctypes.c_void_p, [
	("application",		ctypes.POINTER(_GApplication)),] )

run_mainloop = _rpythonic_function_(		"run_mainloop", ctypes.c_void_p, [
	("application",		ctypes.POINTER(_GApplication)),] )

g_application_get_type = _rpythonic_function_(		"g_application_get_type", ctypes.c_uint, [] )

g_application_id_is_valid = _rpythonic_function_(		"g_application_id_is_valid", ctypes.c_int, [
	("application_id",		ctypes.POINTER(ctypes.c_char)),] )

g_application_new = _rpythonic_function_(		"g_application_new", ctypes.POINTER(_GApplication), [
	("application_id",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),] )

g_application_get_application_id = _rpythonic_function_(		"g_application_get_application_id", ctypes.POINTER(ctypes.c_char), [
	("application",		ctypes.POINTER(_GApplication)),] )

g_application_set_application_id = _rpythonic_function_(		"g_application_set_application_id", ctypes.c_void_p, [
	("application",		ctypes.POINTER(_GApplication)),
	("application_id",		ctypes.POINTER(ctypes.c_char)),] )

g_application_get_inactivity_timeout = _rpythonic_function_(		"g_application_get_inactivity_timeout", ctypes.c_uint, [
	("application",		ctypes.POINTER(_GApplication)),] )

g_application_set_inactivity_timeout = _rpythonic_function_(		"g_application_set_inactivity_timeout", ctypes.c_void_p, [
	("application",		ctypes.POINTER(_GApplication)),
	("inactivity_timeout",		ctypes.c_uint),] )

g_application_get_flags = _rpythonic_function_(		"g_application_get_flags", ctypes.c_int, [
	("application",		ctypes.POINTER(_GApplication)),] )

g_application_set_flags = _rpythonic_function_(		"g_application_set_flags", ctypes.c_void_p, [
	("application",		ctypes.POINTER(_GApplication)),
	("flags",		ctypes.c_int),] )

g_application_set_action_group = _rpythonic_function_(		"g_application_set_action_group", ctypes.c_void_p, [
	("application",		ctypes.POINTER(_GApplication)),
	("action_group",		ctypes.POINTER(_GActionGroup)),] )

g_application_get_is_registered = _rpythonic_function_(		"g_application_get_is_registered", ctypes.c_int, [
	("application",		ctypes.POINTER(_GApplication)),] )

g_application_get_is_remote = _rpythonic_function_(		"g_application_get_is_remote", ctypes.c_int, [
	("application",		ctypes.POINTER(_GApplication)),] )

g_application_register = _rpythonic_function_(		"g_application_register", ctypes.c_int, [
	("application",		ctypes.POINTER(_GApplication)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_application_hold = _rpythonic_function_(		"g_application_hold", ctypes.c_void_p, [
	("application",		ctypes.POINTER(_GApplication)),] )

g_application_release = _rpythonic_function_(		"g_application_release", ctypes.c_void_p, [
	("application",		ctypes.POINTER(_GApplication)),] )

g_application_activate = _rpythonic_function_(		"g_application_activate", ctypes.c_void_p, [
	("application",		ctypes.POINTER(_GApplication)),] )

g_application_open = _rpythonic_function_(		"g_application_open", ctypes.c_void_p, [
	("application",		ctypes.POINTER(_GApplication)),
	("files",		ctypes.POINTER(ctypes.POINTER(_GFile))),
	("n_files",		ctypes.c_int),
	("hint",		ctypes.POINTER(ctypes.c_char)),] )

g_application_run = _rpythonic_function_(		"g_application_run", ctypes.c_int, [
	("application",		ctypes.POINTER(_GApplication)),
	("argc",		ctypes.c_int),
	("argv",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

print_literal = _rpythonic_function_(		"print_literal", ctypes.c_void_p, [
	("cmdline",		ctypes.POINTER(_GApplicationCommandLine)),
	("message",		ctypes.POINTER(ctypes.c_char)),] )

printerr_literal = _rpythonic_function_(		"printerr_literal", ctypes.c_void_p, [
	("cmdline",		ctypes.POINTER(_GApplicationCommandLine)),
	("message",		ctypes.POINTER(ctypes.c_char)),] )

g_application_command_line_get_type = _rpythonic_function_(		"g_application_command_line_get_type", ctypes.c_uint, [] )

g_application_command_line_get_arguments = _rpythonic_function_(		"g_application_command_line_get_arguments", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("cmdline",		ctypes.POINTER(_GApplicationCommandLine)),
	("argc",		ctypes.POINTER(ctypes.c_int)),] )

g_application_command_line_get_environ = _rpythonic_function_(		"g_application_command_line_get_environ", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("cmdline",		ctypes.POINTER(_GApplicationCommandLine)),] )

g_application_command_line_getenv = _rpythonic_function_(		"g_application_command_line_getenv", ctypes.POINTER(ctypes.c_char), [
	("cmdline",		ctypes.POINTER(_GApplicationCommandLine)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_application_command_line_get_cwd = _rpythonic_function_(		"g_application_command_line_get_cwd", ctypes.POINTER(ctypes.c_char), [
	("cmdline",		ctypes.POINTER(_GApplicationCommandLine)),] )

g_application_command_line_get_is_remote = _rpythonic_function_(		"g_application_command_line_get_is_remote", ctypes.c_int, [
	("cmdline",		ctypes.POINTER(_GApplicationCommandLine)),] )

g_application_command_line_get_exit_status = _rpythonic_function_(		"g_application_command_line_get_exit_status", ctypes.c_int, [
	("cmdline",		ctypes.POINTER(_GApplicationCommandLine)),] )

g_application_command_line_set_exit_status = _rpythonic_function_(		"g_application_command_line_set_exit_status", ctypes.c_void_p, [
	("cmdline",		ctypes.POINTER(_GApplicationCommandLine)),
	("exit_status",		ctypes.c_int),] )

g_application_command_line_get_platform_data = _rpythonic_function_(		"g_application_command_line_get_platform_data", ctypes.POINTER(_GVariant), [
	("cmdline",		ctypes.POINTER(_GApplicationCommandLine)),] )

g_initable_get_type = _rpythonic_function_(		"g_initable_get_type", ctypes.c_uint, [] )

init = _rpythonic_function_(		"init", ctypes.c_int, [
	("initable",		ctypes.POINTER(_GInitable)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_initable_init = _rpythonic_function_(		"g_initable_init", ctypes.c_int, [
	("initable",		ctypes.POINTER(_GInitable)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_initable_newv = _rpythonic_function_(		"g_initable_newv", ctypes.POINTER(ctypes.c_void_p), [
	("object_type",		ctypes.c_uint),
	("n_parameters",		ctypes.c_uint),
	("parameters",		ctypes.POINTER(_GParameter)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_initable_new_valist = _rpythonic_function_(		"g_initable_new_valist", ctypes.POINTER(_GObject), [
	("object_type",		ctypes.c_uint),
	("first_property_name",		ctypes.POINTER(ctypes.c_char)),
	("var_args",		ctypes.c_char),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_async_initable_get_type = _rpythonic_function_(		"g_async_initable_get_type", ctypes.c_uint, [] )

init_async = _rpythonic_function_(		"init_async", ctypes.c_void_p, [
	("initable",		ctypes.POINTER(_GAsyncInitable)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

init_finish = _rpythonic_function_(		"init_finish", ctypes.c_int, [
	("initable",		ctypes.POINTER(_GAsyncInitable)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_async_initable_init_async = _rpythonic_function_(		"g_async_initable_init_async", ctypes.c_void_p, [
	("initable",		ctypes.POINTER(_GAsyncInitable)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_async_initable_init_finish = _rpythonic_function_(		"g_async_initable_init_finish", ctypes.c_int, [
	("initable",		ctypes.POINTER(_GAsyncInitable)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_async_initable_newv_async = _rpythonic_function_(		"g_async_initable_newv_async", ctypes.c_void_p, [
	("object_type",		ctypes.c_uint),
	("n_parameters",		ctypes.c_uint),
	("parameters",		ctypes.POINTER(_GParameter)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_async_initable_new_valist_async = _rpythonic_function_(		"g_async_initable_new_valist_async", ctypes.c_void_p, [
	("object_type",		ctypes.c_uint),
	("first_property_name",		ctypes.POINTER(ctypes.c_char)),
	("var_args",		ctypes.c_char),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_async_initable_new_finish = _rpythonic_function_(		"g_async_initable_new_finish", ctypes.POINTER(_GObject), [
	("initable",		ctypes.POINTER(_GAsyncInitable)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

get_user_data = _rpythonic_function_(		"get_user_data", ctypes.POINTER(ctypes.c_void_p), [
	("res",		ctypes.POINTER(_GAsyncResult)),] )

g_async_result_get_type = _rpythonic_function_(		"g_async_result_get_type", ctypes.c_uint, [] )

get_source_object = _rpythonic_function_(		"get_source_object", ctypes.POINTER(_GObject), [
	("res",		ctypes.POINTER(_GAsyncResult)),] )

g_async_result_get_user_data = _rpythonic_function_(		"g_async_result_get_user_data", ctypes.POINTER(ctypes.c_void_p), [
	("res",		ctypes.POINTER(_GAsyncResult)),] )

g_async_result_get_source_object = _rpythonic_function_(		"g_async_result_get_source_object", ctypes.POINTER(_GObject), [
	("res",		ctypes.POINTER(_GAsyncResult)),] )

read_fn = _rpythonic_function_(		"read_fn", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GInputStream)),
	("buffer",		ctypes.POINTER(ctypes.c_void_p)),
	("count",		ctypes.c_uint),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

skip = _rpythonic_function_(		"skip", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GInputStream)),
	("count",		ctypes.c_uint),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

close_fn = _rpythonic_function_(		"close_fn", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GInputStream)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

read_async = _rpythonic_function_(		"read_async", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GInputStream)),
	("buffer",		ctypes.POINTER(ctypes.c_void_p)),
	("count",		ctypes.c_uint),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

read_finish = _rpythonic_function_(		"read_finish", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GInputStream)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

skip_async = _rpythonic_function_(		"skip_async", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GInputStream)),
	("count",		ctypes.c_uint),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

skip_finish = _rpythonic_function_(		"skip_finish", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GInputStream)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

close_async = _rpythonic_function_(		"close_async", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GInputStream)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

close_finish = _rpythonic_function_(		"close_finish", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GInputStream)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_input_stream_read = _rpythonic_function_(		"g_input_stream_read", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GInputStream)),
	("buffer",		ctypes.POINTER(ctypes.c_void_p)),
	("count",		ctypes.c_uint),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_input_stream_read_all = _rpythonic_function_(		"g_input_stream_read_all", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GInputStream)),
	("buffer",		ctypes.POINTER(ctypes.c_void_p)),
	("count",		ctypes.c_uint),
	("bytes_read",		ctypes.POINTER(ctypes.c_uint)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_input_stream_get_type = _rpythonic_function_(		"g_input_stream_get_type", ctypes.c_uint, [] )

g_input_stream_skip = _rpythonic_function_(		"g_input_stream_skip", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GInputStream)),
	("count",		ctypes.c_uint),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_input_stream_close = _rpythonic_function_(		"g_input_stream_close", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GInputStream)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_input_stream_read_async = _rpythonic_function_(		"g_input_stream_read_async", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GInputStream)),
	("buffer",		ctypes.POINTER(ctypes.c_void_p)),
	("count",		ctypes.c_uint),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_input_stream_read_finish = _rpythonic_function_(		"g_input_stream_read_finish", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GInputStream)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_input_stream_skip_async = _rpythonic_function_(		"g_input_stream_skip_async", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GInputStream)),
	("count",		ctypes.c_uint),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_input_stream_skip_finish = _rpythonic_function_(		"g_input_stream_skip_finish", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GInputStream)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_input_stream_close_async = _rpythonic_function_(		"g_input_stream_close_async", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GInputStream)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_input_stream_close_finish = _rpythonic_function_(		"g_input_stream_close_finish", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GInputStream)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_input_stream_is_closed = _rpythonic_function_(		"g_input_stream_is_closed", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GInputStream)),] )

g_input_stream_has_pending = _rpythonic_function_(		"g_input_stream_has_pending", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GInputStream)),] )

g_input_stream_set_pending = _rpythonic_function_(		"g_input_stream_set_pending", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GInputStream)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_input_stream_clear_pending = _rpythonic_function_(		"g_input_stream_clear_pending", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GInputStream)),] )

g_filter_input_stream_get_type = _rpythonic_function_(		"g_filter_input_stream_get_type", ctypes.c_uint, [] )

g_filter_input_stream_get_base_stream = _rpythonic_function_(		"g_filter_input_stream_get_base_stream", ctypes.POINTER(_GInputStream), [
	("stream",		ctypes.POINTER(_GFilterInputStream)),] )

g_filter_input_stream_get_close_base_stream = _rpythonic_function_(		"g_filter_input_stream_get_close_base_stream", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GFilterInputStream)),] )

g_filter_input_stream_set_close_base_stream = _rpythonic_function_(		"g_filter_input_stream_set_close_base_stream", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GFilterInputStream)),
	("close_base",		ctypes.c_int),] )

fill = _rpythonic_function_(		"fill", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GBufferedInputStream)),
	("count",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

fill_async = _rpythonic_function_(		"fill_async", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GBufferedInputStream)),
	("count",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

fill_finish = _rpythonic_function_(		"fill_finish", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GBufferedInputStream)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_buffered_input_stream_get_type = _rpythonic_function_(		"g_buffered_input_stream_get_type", ctypes.c_uint, [] )

g_buffered_input_stream_new = _rpythonic_function_(		"g_buffered_input_stream_new", ctypes.POINTER(_GInputStream), [
	("base_stream",		ctypes.POINTER(_GInputStream)),] )

g_buffered_input_stream_new_sized = _rpythonic_function_(		"g_buffered_input_stream_new_sized", ctypes.POINTER(_GInputStream), [
	("base_stream",		ctypes.POINTER(_GInputStream)),
	("size",		ctypes.c_uint),] )

g_buffered_input_stream_get_buffer_size = _rpythonic_function_(		"g_buffered_input_stream_get_buffer_size", ctypes.c_uint, [
	("stream",		ctypes.POINTER(_GBufferedInputStream)),] )

g_buffered_input_stream_set_buffer_size = _rpythonic_function_(		"g_buffered_input_stream_set_buffer_size", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GBufferedInputStream)),
	("size",		ctypes.c_uint),] )

g_buffered_input_stream_get_available = _rpythonic_function_(		"g_buffered_input_stream_get_available", ctypes.c_uint, [
	("stream",		ctypes.POINTER(_GBufferedInputStream)),] )

g_buffered_input_stream_peek = _rpythonic_function_(		"g_buffered_input_stream_peek", ctypes.c_uint, [
	("stream",		ctypes.POINTER(_GBufferedInputStream)),
	("buffer",		ctypes.POINTER(ctypes.c_void_p)),
	("offset",		ctypes.c_uint),
	("count",		ctypes.c_uint),] )

g_buffered_input_stream_peek_buffer = _rpythonic_function_(		"g_buffered_input_stream_peek_buffer", ctypes.POINTER(ctypes.c_void_p), [
	("stream",		ctypes.POINTER(_GBufferedInputStream)),
	("count",		ctypes.POINTER(ctypes.c_uint)),] )

g_buffered_input_stream_fill = _rpythonic_function_(		"g_buffered_input_stream_fill", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GBufferedInputStream)),
	("count",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_buffered_input_stream_fill_async = _rpythonic_function_(		"g_buffered_input_stream_fill_async", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GBufferedInputStream)),
	("count",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_buffered_input_stream_fill_finish = _rpythonic_function_(		"g_buffered_input_stream_fill_finish", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GBufferedInputStream)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_buffered_input_stream_read_byte = _rpythonic_function_(		"g_buffered_input_stream_read_byte", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GBufferedInputStream)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

write_fn = _rpythonic_function_(		"write_fn", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GOutputStream)),
	("buffer",		ctypes.POINTER(ctypes.c_void_p)),
	("count",		ctypes.c_uint),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

splice = _rpythonic_function_(		"splice", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GOutputStream)),
	("source",		ctypes.POINTER(_GInputStream)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

flush = _rpythonic_function_(		"flush", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GOutputStream)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

write_async = _rpythonic_function_(		"write_async", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GOutputStream)),
	("buffer",		ctypes.POINTER(ctypes.c_void_p)),
	("count",		ctypes.c_uint),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

write_finish = _rpythonic_function_(		"write_finish", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GOutputStream)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

splice_async = _rpythonic_function_(		"splice_async", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GOutputStream)),
	("source",		ctypes.POINTER(_GInputStream)),
	("flags",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

splice_finish = _rpythonic_function_(		"splice_finish", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GOutputStream)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

flush_async = _rpythonic_function_(		"flush_async", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GOutputStream)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

flush_finish = _rpythonic_function_(		"flush_finish", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GOutputStream)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

_g_reserved6 = _rpythonic_function_(		"_g_reserved6", ctypes.c_void_p, [] )

_g_reserved7 = _rpythonic_function_(		"_g_reserved7", ctypes.c_void_p, [] )

_g_reserved8 = _rpythonic_function_(		"_g_reserved8", ctypes.c_void_p, [] )

g_output_stream_write = _rpythonic_function_(		"g_output_stream_write", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GOutputStream)),
	("buffer",		ctypes.POINTER(ctypes.c_void_p)),
	("count",		ctypes.c_uint),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_output_stream_write_all = _rpythonic_function_(		"g_output_stream_write_all", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GOutputStream)),
	("buffer",		ctypes.POINTER(ctypes.c_void_p)),
	("count",		ctypes.c_uint),
	("bytes_written",		ctypes.POINTER(ctypes.c_uint)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_output_stream_get_type = _rpythonic_function_(		"g_output_stream_get_type", ctypes.c_uint, [] )

g_output_stream_splice = _rpythonic_function_(		"g_output_stream_splice", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GOutputStream)),
	("source",		ctypes.POINTER(_GInputStream)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_output_stream_flush = _rpythonic_function_(		"g_output_stream_flush", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GOutputStream)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_output_stream_close = _rpythonic_function_(		"g_output_stream_close", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GOutputStream)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_output_stream_write_async = _rpythonic_function_(		"g_output_stream_write_async", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GOutputStream)),
	("buffer",		ctypes.POINTER(ctypes.c_void_p)),
	("count",		ctypes.c_uint),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_output_stream_write_finish = _rpythonic_function_(		"g_output_stream_write_finish", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GOutputStream)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_output_stream_splice_async = _rpythonic_function_(		"g_output_stream_splice_async", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GOutputStream)),
	("source",		ctypes.POINTER(_GInputStream)),
	("flags",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_output_stream_splice_finish = _rpythonic_function_(		"g_output_stream_splice_finish", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GOutputStream)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_output_stream_flush_async = _rpythonic_function_(		"g_output_stream_flush_async", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GOutputStream)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_output_stream_flush_finish = _rpythonic_function_(		"g_output_stream_flush_finish", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GOutputStream)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_output_stream_close_async = _rpythonic_function_(		"g_output_stream_close_async", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GOutputStream)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_output_stream_close_finish = _rpythonic_function_(		"g_output_stream_close_finish", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GOutputStream)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_output_stream_is_closed = _rpythonic_function_(		"g_output_stream_is_closed", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GOutputStream)),] )

g_output_stream_is_closing = _rpythonic_function_(		"g_output_stream_is_closing", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GOutputStream)),] )

g_output_stream_has_pending = _rpythonic_function_(		"g_output_stream_has_pending", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GOutputStream)),] )

g_output_stream_set_pending = _rpythonic_function_(		"g_output_stream_set_pending", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GOutputStream)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_output_stream_clear_pending = _rpythonic_function_(		"g_output_stream_clear_pending", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GOutputStream)),] )

g_filter_output_stream_get_type = _rpythonic_function_(		"g_filter_output_stream_get_type", ctypes.c_uint, [] )

g_filter_output_stream_get_base_stream = _rpythonic_function_(		"g_filter_output_stream_get_base_stream", ctypes.POINTER(_GOutputStream), [
	("stream",		ctypes.POINTER(_GFilterOutputStream)),] )

g_filter_output_stream_get_close_base_stream = _rpythonic_function_(		"g_filter_output_stream_get_close_base_stream", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GFilterOutputStream)),] )

g_filter_output_stream_set_close_base_stream = _rpythonic_function_(		"g_filter_output_stream_set_close_base_stream", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GFilterOutputStream)),
	("close_base",		ctypes.c_int),] )

g_buffered_output_stream_get_type = _rpythonic_function_(		"g_buffered_output_stream_get_type", ctypes.c_uint, [] )

g_buffered_output_stream_new = _rpythonic_function_(		"g_buffered_output_stream_new", ctypes.POINTER(_GOutputStream), [
	("base_stream",		ctypes.POINTER(_GOutputStream)),] )

g_buffered_output_stream_new_sized = _rpythonic_function_(		"g_buffered_output_stream_new_sized", ctypes.POINTER(_GOutputStream), [
	("base_stream",		ctypes.POINTER(_GOutputStream)),
	("size",		ctypes.c_uint),] )

g_buffered_output_stream_get_buffer_size = _rpythonic_function_(		"g_buffered_output_stream_get_buffer_size", ctypes.c_uint, [
	("stream",		ctypes.POINTER(_GBufferedOutputStream)),] )

g_buffered_output_stream_set_buffer_size = _rpythonic_function_(		"g_buffered_output_stream_set_buffer_size", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GBufferedOutputStream)),
	("size",		ctypes.c_uint),] )

g_buffered_output_stream_get_auto_grow = _rpythonic_function_(		"g_buffered_output_stream_get_auto_grow", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GBufferedOutputStream)),] )

g_buffered_output_stream_set_auto_grow = _rpythonic_function_(		"g_buffered_output_stream_set_auto_grow", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GBufferedOutputStream)),
	("auto_grow",		ctypes.c_int),] )

cancelled = _rpythonic_function_(		"cancelled", ctypes.c_void_p, [
	("cancellable",		ctypes.POINTER(_GCancellable)),] )

g_cancellable_get_type = _rpythonic_function_(		"g_cancellable_get_type", ctypes.c_uint, [] )

g_cancellable_new = _rpythonic_function_(		"g_cancellable_new", ctypes.POINTER(_GCancellable), [] )

g_cancellable_is_cancelled = _rpythonic_function_(		"g_cancellable_is_cancelled", ctypes.c_int, [
	("cancellable",		ctypes.POINTER(_GCancellable)),] )

g_cancellable_set_error_if_cancelled = _rpythonic_function_(		"g_cancellable_set_error_if_cancelled", ctypes.c_int, [
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_cancellable_get_fd = _rpythonic_function_(		"g_cancellable_get_fd", ctypes.c_int, [
	("cancellable",		ctypes.POINTER(_GCancellable)),] )

g_cancellable_make_pollfd = _rpythonic_function_(		"g_cancellable_make_pollfd", ctypes.c_int, [
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("pollfd",		ctypes.POINTER(_GPollFD)),] )

g_cancellable_release_fd = _rpythonic_function_(		"g_cancellable_release_fd", ctypes.c_void_p, [
	("cancellable",		ctypes.POINTER(_GCancellable)),] )

g_cancellable_source_new = _rpythonic_function_(		"g_cancellable_source_new", ctypes.POINTER(_GSource), [
	("cancellable",		ctypes.POINTER(_GCancellable)),] )

g_cancellable_get_current = _rpythonic_function_(		"g_cancellable_get_current", ctypes.POINTER(_GCancellable), [] )

g_cancellable_push_current = _rpythonic_function_(		"g_cancellable_push_current", ctypes.c_void_p, [
	("cancellable",		ctypes.POINTER(_GCancellable)),] )

g_cancellable_pop_current = _rpythonic_function_(		"g_cancellable_pop_current", ctypes.c_void_p, [
	("cancellable",		ctypes.POINTER(_GCancellable)),] )

g_cancellable_reset = _rpythonic_function_(		"g_cancellable_reset", ctypes.c_void_p, [
	("cancellable",		ctypes.POINTER(_GCancellable)),] )

g_cancellable_connect = _rpythonic_function_(		"g_cancellable_connect", ctypes.c_ulong, [
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("data_destroy_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_cancellable_disconnect = _rpythonic_function_(		"g_cancellable_disconnect", ctypes.c_void_p, [
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("handler_id",		ctypes.c_ulong),] )

g_cancellable_cancel = _rpythonic_function_(		"g_cancellable_cancel", ctypes.c_void_p, [
	("cancellable",		ctypes.POINTER(_GCancellable)),] )

convert = _rpythonic_function_(		"convert", ctypes.c_int, [
	("converter",		ctypes.POINTER(_GConverter)),
	("inbuf",		ctypes.POINTER(ctypes.c_void_p)),
	("inbuf_size",		ctypes.c_uint),
	("outbuf",		ctypes.POINTER(ctypes.c_void_p)),
	("outbuf_size",		ctypes.c_uint),
	("flags",		ctypes.c_int),
	("bytes_read",		ctypes.POINTER(ctypes.c_uint)),
	("bytes_written",		ctypes.POINTER(ctypes.c_uint)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

reset = _rpythonic_function_(		"reset", ctypes.c_void_p, [
	("converter",		ctypes.POINTER(_GConverter)),] )

g_converter_get_type = _rpythonic_function_(		"g_converter_get_type", ctypes.c_uint, [] )

g_converter_convert = _rpythonic_function_(		"g_converter_convert", ctypes.c_int, [
	("converter",		ctypes.POINTER(_GConverter)),
	("inbuf",		ctypes.POINTER(ctypes.c_void_p)),
	("inbuf_size",		ctypes.c_uint),
	("outbuf",		ctypes.POINTER(ctypes.c_void_p)),
	("outbuf_size",		ctypes.c_uint),
	("flags",		ctypes.c_int),
	("bytes_read",		ctypes.POINTER(ctypes.c_uint)),
	("bytes_written",		ctypes.POINTER(ctypes.c_uint)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_converter_reset = _rpythonic_function_(		"g_converter_reset", ctypes.c_void_p, [
	("converter",		ctypes.POINTER(_GConverter)),] )

g_charset_converter_get_type = _rpythonic_function_(		"g_charset_converter_get_type", ctypes.c_uint, [] )

g_charset_converter_new = _rpythonic_function_(		"g_charset_converter_new", ctypes.POINTER(_GCharsetConverter), [
	("to_charset",		ctypes.POINTER(ctypes.c_char)),
	("from_charset",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_charset_converter_set_use_fallback = _rpythonic_function_(		"g_charset_converter_set_use_fallback", ctypes.c_void_p, [
	("converter",		ctypes.POINTER(_GCharsetConverter)),
	("use_fallback",		ctypes.c_int),] )

g_charset_converter_get_use_fallback = _rpythonic_function_(		"g_charset_converter_get_use_fallback", ctypes.c_int, [
	("converter",		ctypes.POINTER(_GCharsetConverter)),] )

g_charset_converter_get_num_fallbacks = _rpythonic_function_(		"g_charset_converter_get_num_fallbacks", ctypes.c_uint, [
	("converter",		ctypes.POINTER(_GCharsetConverter)),] )

g_content_type_equals = _rpythonic_function_(		"g_content_type_equals", ctypes.c_int, [
	("type1",		ctypes.POINTER(ctypes.c_char)),
	("type2",		ctypes.POINTER(ctypes.c_char)),] )

g_content_type_is_a = _rpythonic_function_(		"g_content_type_is_a", ctypes.c_int, [
	("C_type",		ctypes.POINTER(ctypes.c_char)),
	("supertype",		ctypes.POINTER(ctypes.c_char)),] )

g_content_type_is_unknown = _rpythonic_function_(		"g_content_type_is_unknown", ctypes.c_int, [
	("C_type",		ctypes.POINTER(ctypes.c_char)),] )

g_content_type_get_description = _rpythonic_function_(		"g_content_type_get_description", ctypes.POINTER(ctypes.c_char), [
	("C_type",		ctypes.POINTER(ctypes.c_char)),] )

g_content_type_get_mime_type = _rpythonic_function_(		"g_content_type_get_mime_type", ctypes.POINTER(ctypes.c_char), [
	("C_type",		ctypes.POINTER(ctypes.c_char)),] )

g_content_type_get_icon = _rpythonic_function_(		"g_content_type_get_icon", ctypes.POINTER(_GIcon), [
	("C_type",		ctypes.POINTER(ctypes.c_char)),] )

g_content_type_can_be_executable = _rpythonic_function_(		"g_content_type_can_be_executable", ctypes.c_int, [
	("C_type",		ctypes.POINTER(ctypes.c_char)),] )

g_content_type_from_mime_type = _rpythonic_function_(		"g_content_type_from_mime_type", ctypes.POINTER(ctypes.c_char), [
	("mime_type",		ctypes.POINTER(ctypes.c_char)),] )

g_content_type_guess = _rpythonic_function_(		"g_content_type_guess", ctypes.POINTER(ctypes.c_char), [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("data",		ctypes.POINTER(ctypes.c_ubyte)),
	("data_size",		ctypes.c_uint),
	("result_uncertain",		ctypes.POINTER(ctypes.c_int)),] )

g_content_type_guess_for_tree = _rpythonic_function_(		"g_content_type_guess_for_tree", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("root",		ctypes.POINTER(_GFile)),] )

g_content_types_get_registered = _rpythonic_function_(		"g_content_types_get_registered", ctypes.POINTER(_GList), [] )

g_converter_input_stream_get_type = _rpythonic_function_(		"g_converter_input_stream_get_type", ctypes.c_uint, [] )

g_converter_input_stream_new = _rpythonic_function_(		"g_converter_input_stream_new", ctypes.POINTER(_GInputStream), [
	("base_stream",		ctypes.POINTER(_GInputStream)),
	("converter",		ctypes.POINTER(_GConverter)),] )

g_converter_input_stream_get_converter = _rpythonic_function_(		"g_converter_input_stream_get_converter", ctypes.POINTER(_GConverter), [
	("converter_stream",		ctypes.POINTER(_GConverterInputStream)),] )

g_converter_output_stream_get_type = _rpythonic_function_(		"g_converter_output_stream_get_type", ctypes.c_uint, [] )

g_converter_output_stream_new = _rpythonic_function_(		"g_converter_output_stream_new", ctypes.POINTER(_GOutputStream), [
	("base_stream",		ctypes.POINTER(_GOutputStream)),
	("converter",		ctypes.POINTER(_GConverter)),] )

g_converter_output_stream_get_converter = _rpythonic_function_(		"g_converter_output_stream_get_converter", ctypes.POINTER(_GConverter), [
	("converter_stream",		ctypes.POINTER(_GConverterOutputStream)),] )

access = _rpythonic_function_(		"access", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),
	("__type",		ctypes.c_int),] )

faccessat = _rpythonic_function_(		"faccessat", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__type",		ctypes.c_int),
	("__flag",		ctypes.c_int),] )

lseek = _rpythonic_function_(		"lseek", ctypes.c_int64, [
	("__fd",		ctypes.c_int),
	("__offset",		ctypes.c_int64),
	("__whence",		ctypes.c_int),] )

close = _rpythonic_function_(		"close", ctypes.c_int, [
	("__fd",		ctypes.c_int),] )

read = _rpythonic_function_(		"read", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_void_p)),
	("__nbytes",		ctypes.c_uint),] )

write = _rpythonic_function_(		"write", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),] )

pread = _rpythonic_function_(		"pread", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_void_p)),
	("__nbytes",		ctypes.c_uint),
	("__offset",		ctypes.c_int64),] )

pwrite = _rpythonic_function_(		"pwrite", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),
	("__offset",		ctypes.c_int64),] )

pipe = _rpythonic_function_(		"pipe", ctypes.c_int, [
	("__pipedes",		( ctypes.c_int * 2 )),] )

alarm = _rpythonic_function_(		"alarm", ctypes.c_uint, [
	("__seconds",		ctypes.c_uint),] )

sleep = _rpythonic_function_(		"sleep", ctypes.c_uint, [
	("__seconds",		ctypes.c_uint),] )

ualarm = _rpythonic_function_(		"ualarm", ctypes.c_uint, [
	("__value",		ctypes.c_uint),
	("__interval",		ctypes.c_uint),] )

usleep = _rpythonic_function_(		"usleep", ctypes.c_int, [
	("__useconds",		ctypes.c_uint),] )

pause = _rpythonic_function_(		"pause", ctypes.c_int, [] )

chown = _rpythonic_function_(		"chown", ctypes.c_int, [
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__owner",		ctypes.c_uint),
	("__group",		ctypes.c_uint),] )

fchown = _rpythonic_function_(		"fchown", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__owner",		ctypes.c_uint),
	("__group",		ctypes.c_uint),] )

lchown = _rpythonic_function_(		"lchown", ctypes.c_int, [
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__owner",		ctypes.c_uint),
	("__group",		ctypes.c_uint),] )

fchownat = _rpythonic_function_(		"fchownat", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__owner",		ctypes.c_uint),
	("__group",		ctypes.c_uint),
	("__flag",		ctypes.c_int),] )

chdir = _rpythonic_function_(		"chdir", ctypes.c_int, [
	("__path",		ctypes.POINTER(ctypes.c_char)),] )

fchdir = _rpythonic_function_(		"fchdir", ctypes.c_int, [
	("__fd",		ctypes.c_int),] )

getcwd = _rpythonic_function_(		"getcwd", ctypes.POINTER(ctypes.c_char), [
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__size",		ctypes.c_uint),] )

getwd = _rpythonic_function_(		"getwd", ctypes.POINTER(ctypes.c_char), [
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

dup2 = _rpythonic_function_(		"dup2", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__fd2",		ctypes.c_int),] )

execve = _rpythonic_function_(		"execve", ctypes.c_int, [
	("__path",		ctypes.POINTER(ctypes.c_char)),
	("__argv",		ctypes.c_char),
	("__envp",		ctypes.c_char),] )

fexecve = _rpythonic_function_(		"fexecve", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__argv",		ctypes.c_char),
	("__envp",		ctypes.c_char),] )

execv = _rpythonic_function_(		"execv", ctypes.c_int, [
	("__path",		ctypes.POINTER(ctypes.c_char)),
	("__argv",		ctypes.c_char),] )

execvp = _rpythonic_function_(		"execvp", ctypes.c_int, [
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__argv",		ctypes.c_char),] )

nice = _rpythonic_function_(		"nice", ctypes.c_int, [
	("__inc",		ctypes.c_int),] )

_exit = _rpythonic_function_(		"_exit", ctypes.c_void_p, [
	("__status",		ctypes.c_int),] )

pathconf = _rpythonic_function_(		"pathconf", ctypes.c_int64, [
	("__path",		ctypes.POINTER(ctypes.c_char)),
	("__name",		ctypes.c_int),] )

fpathconf = _rpythonic_function_(		"fpathconf", ctypes.c_int64, [
	("__fd",		ctypes.c_int),
	("__name",		ctypes.c_int),] )

sysconf = _rpythonic_function_(		"sysconf", ctypes.c_int64, [
	("__name",		ctypes.c_int),] )

confstr = _rpythonic_function_(		"confstr", ctypes.c_uint, [
	("__name",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint),] )

getpid = _rpythonic_function_(		"getpid", ctypes.c_int, [] )

getppid = _rpythonic_function_(		"getppid", ctypes.c_int, [] )

getpgrp = _rpythonic_function_(		"getpgrp", ctypes.c_int, [] )

getpgid = _rpythonic_function_(		"getpgid", ctypes.c_int, [
	("__pid",		ctypes.c_int),] )

setpgid = _rpythonic_function_(		"setpgid", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__pgid",		ctypes.c_int),] )

setpgrp = _rpythonic_function_(		"setpgrp", ctypes.c_int, [] )

setsid = _rpythonic_function_(		"setsid", ctypes.c_int, [] )

getsid = _rpythonic_function_(		"getsid", ctypes.c_int, [
	("__pid",		ctypes.c_int),] )

getuid = _rpythonic_function_(		"getuid", ctypes.c_uint, [] )

geteuid = _rpythonic_function_(		"geteuid", ctypes.c_uint, [] )

getgid = _rpythonic_function_(		"getgid", ctypes.c_uint, [] )

getegid = _rpythonic_function_(		"getegid", ctypes.c_uint, [] )

getgroups = _rpythonic_function_(		"getgroups", ctypes.c_int, [
	("__size",		ctypes.c_int),
	("__list",		ctypes.c_uint),] )

setuid = _rpythonic_function_(		"setuid", ctypes.c_int, [
	("__uid",		ctypes.c_uint),] )

setreuid = _rpythonic_function_(		"setreuid", ctypes.c_int, [
	("__ruid",		ctypes.c_uint),
	("__euid",		ctypes.c_uint),] )

seteuid = _rpythonic_function_(		"seteuid", ctypes.c_int, [
	("__uid",		ctypes.c_uint),] )

setgid = _rpythonic_function_(		"setgid", ctypes.c_int, [
	("__gid",		ctypes.c_uint),] )

setregid = _rpythonic_function_(		"setregid", ctypes.c_int, [
	("__rgid",		ctypes.c_uint),
	("__egid",		ctypes.c_uint),] )

setegid = _rpythonic_function_(		"setegid", ctypes.c_int, [
	("__gid",		ctypes.c_uint),] )

fork = _rpythonic_function_(		"fork", ctypes.c_int, [] )

vfork = _rpythonic_function_(		"vfork", ctypes.c_int, [] )

ttyname = _rpythonic_function_(		"ttyname", ctypes.POINTER(ctypes.c_char), [
	("__fd",		ctypes.c_int),] )

ttyname_r = _rpythonic_function_(		"ttyname_r", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__buflen",		ctypes.c_uint),] )

isatty = _rpythonic_function_(		"isatty", ctypes.c_int, [
	("__fd",		ctypes.c_int),] )

ttyslot = _rpythonic_function_(		"ttyslot", ctypes.c_int, [] )

link = _rpythonic_function_(		"link", ctypes.c_int, [
	("__from",		ctypes.POINTER(ctypes.c_char)),
	("__to",		ctypes.POINTER(ctypes.c_char)),] )

linkat = _rpythonic_function_(		"linkat", ctypes.c_int, [
	("__fromfd",		ctypes.c_int),
	("__from",		ctypes.POINTER(ctypes.c_char)),
	("__tofd",		ctypes.c_int),
	("__to",		ctypes.POINTER(ctypes.c_char)),
	("__flags",		ctypes.c_int),] )

symlink = _rpythonic_function_(		"symlink", ctypes.c_int, [
	("__from",		ctypes.POINTER(ctypes.c_char)),
	("__to",		ctypes.POINTER(ctypes.c_char)),] )

readlink = _rpythonic_function_(		"readlink", ctypes.c_int, [
	("__path",		ctypes.POINTER(ctypes.c_char)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint),] )

symlinkat = _rpythonic_function_(		"symlinkat", ctypes.c_int, [
	("__from",		ctypes.POINTER(ctypes.c_char)),
	("__tofd",		ctypes.c_int),
	("__to",		ctypes.POINTER(ctypes.c_char)),] )

readlinkat = _rpythonic_function_(		"readlinkat", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__path",		ctypes.POINTER(ctypes.c_char)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint),] )

unlink = _rpythonic_function_(		"unlink", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),] )

unlinkat = _rpythonic_function_(		"unlinkat", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__name",		ctypes.POINTER(ctypes.c_char)),
	("__flag",		ctypes.c_int),] )

rmdir = _rpythonic_function_(		"rmdir", ctypes.c_int, [
	("__path",		ctypes.POINTER(ctypes.c_char)),] )

tcgetpgrp = _rpythonic_function_(		"tcgetpgrp", ctypes.c_int, [
	("__fd",		ctypes.c_int),] )

tcsetpgrp = _rpythonic_function_(		"tcsetpgrp", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__pgrp_id",		ctypes.c_int),] )

getlogin = _rpythonic_function_(		"getlogin", ctypes.POINTER(ctypes.c_char), [] )

getlogin_r = _rpythonic_function_(		"getlogin_r", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),
	("__name_len",		ctypes.c_uint),] )

setlogin = _rpythonic_function_(		"setlogin", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),] )

getopt = _rpythonic_function_(		"getopt", ctypes.c_int, [
	("___argc",		ctypes.c_int),
	("___argv",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__shortopts",		ctypes.POINTER(ctypes.c_char)),] )

gethostname = _rpythonic_function_(		"gethostname", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint),] )

sethostname = _rpythonic_function_(		"sethostname", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint),] )

sethostid = _rpythonic_function_(		"sethostid", ctypes.c_int, [
	("__id",		ctypes.c_int64),] )

getdomainname = _rpythonic_function_(		"getdomainname", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint),] )

setdomainname = _rpythonic_function_(		"setdomainname", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint),] )

vhangup = _rpythonic_function_(		"vhangup", ctypes.c_int, [] )

revoke = _rpythonic_function_(		"revoke", ctypes.c_int, [
	("__file",		ctypes.POINTER(ctypes.c_char)),] )

profil = _rpythonic_function_(		"profil", ctypes.c_int, [
	("__sample_buffer",		ctypes.POINTER(ctypes.c_uint16)),
	("__size",		ctypes.c_uint),
	("__offset",		ctypes.c_uint),
	("__scale",		ctypes.c_uint),] )

acct = _rpythonic_function_(		"acct", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),] )

getusershell = _rpythonic_function_(		"getusershell", ctypes.POINTER(ctypes.c_char), [] )

endusershell = _rpythonic_function_(		"endusershell", ctypes.c_void_p, [] )

setusershell = _rpythonic_function_(		"setusershell", ctypes.c_void_p, [] )

daemon = _rpythonic_function_(		"daemon", ctypes.c_int, [
	("__nochdir",		ctypes.c_int),
	("__noclose",		ctypes.c_int),] )

chroot = _rpythonic_function_(		"chroot", ctypes.c_int, [
	("__path",		ctypes.POINTER(ctypes.c_char)),] )

getpass = _rpythonic_function_(		"getpass", ctypes.POINTER(ctypes.c_char), [
	("__prompt",		ctypes.POINTER(ctypes.c_char)),] )

fsync = _rpythonic_function_(		"fsync", ctypes.c_int, [
	("__fd",		ctypes.c_int),] )

gethostid = _rpythonic_function_(		"gethostid", ctypes.c_int64, [] )

sync = _rpythonic_function_(		"sync", ctypes.c_void_p, [] )

getpagesize = _rpythonic_function_(		"getpagesize", ctypes.c_int, [] )

getdtablesize = _rpythonic_function_(		"getdtablesize", ctypes.c_int, [] )

truncate = _rpythonic_function_(		"truncate", ctypes.c_int, [
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__length",		ctypes.c_int64),] )

ftruncate = _rpythonic_function_(		"ftruncate", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__length",		ctypes.c_int64),] )

brk = _rpythonic_function_(		"brk", ctypes.c_int, [("__addr",		ctypes.c_void_p)] )

sbrk = _rpythonic_function_(		"sbrk", ctypes.POINTER(ctypes.c_void_p), [
	("__delta",		ctypes.c_int),] )

lockf = _rpythonic_function_(		"lockf", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__cmd",		ctypes.c_int),
	("__len",		ctypes.c_int64),] )

fdatasync = _rpythonic_function_(		"fdatasync", ctypes.c_int, [
	("__fildes",		ctypes.c_int),] )

ctermid = _rpythonic_function_(		"ctermid", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

select = _rpythonic_function_(		"select", ctypes.c_int, [
	("__nfds",		ctypes.c_int),
	("__readfds",		ctypes.POINTER(fd_set)),
	("__writefds",		ctypes.POINTER(fd_set)),
	("__exceptfds",		ctypes.POINTER(fd_set)),
	("__timeout",		ctypes.POINTER(timeval)),] )

pselect = _rpythonic_function_(		"pselect", ctypes.c_int, [
	("__nfds",		ctypes.c_int),
	("__readfds",		ctypes.POINTER(fd_set)),
	("__writefds",		ctypes.POINTER(fd_set)),
	("__exceptfds",		ctypes.POINTER(fd_set)),
	("__timeout",		ctypes.POINTER(timespec)),
	("__sigmask",		ctypes.POINTER(__sigset_t)),] )

gnu_dev_major = _rpythonic_function_(		"gnu_dev_major", ctypes.c_uint, [
	("__dev",		ctypes.c_ulonglong),] )

gnu_dev_minor = _rpythonic_function_(		"gnu_dev_minor", ctypes.c_uint, [
	("__dev",		ctypes.c_ulonglong),] )

gnu_dev_makedev = _rpythonic_function_(		"gnu_dev_makedev", ctypes.c_ulonglong, [
	("__major",		ctypes.c_uint),
	("__minor",		ctypes.c_uint),] )

g_credentials_get_type = _rpythonic_function_(		"g_credentials_get_type", ctypes.c_uint, [] )

g_credentials_new = _rpythonic_function_(		"g_credentials_new", ctypes.POINTER(_GCredentials), [] )

g_credentials_to_string = _rpythonic_function_(		"g_credentials_to_string", ctypes.POINTER(ctypes.c_char), [
	("credentials",		ctypes.POINTER(_GCredentials)),] )

g_credentials_get_native = _rpythonic_function_(		"g_credentials_get_native", ctypes.POINTER(ctypes.c_void_p), [
	("credentials",		ctypes.POINTER(_GCredentials)),
	("native_type",		ctypes.c_int),] )

g_credentials_set_native = _rpythonic_function_(		"g_credentials_set_native", ctypes.c_void_p, [
	("credentials",		ctypes.POINTER(_GCredentials)),
	("native_type",		ctypes.c_int),
	("native",		ctypes.POINTER(ctypes.c_void_p)),] )

g_credentials_is_same_user = _rpythonic_function_(		"g_credentials_is_same_user", ctypes.c_int, [
	("credentials",		ctypes.POINTER(_GCredentials)),
	("other_credentials",		ctypes.POINTER(_GCredentials)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_credentials_get_unix_user = _rpythonic_function_(		"g_credentials_get_unix_user", ctypes.c_uint, [
	("credentials",		ctypes.POINTER(_GCredentials)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_credentials_set_unix_user = _rpythonic_function_(		"g_credentials_set_unix_user", ctypes.c_int, [
	("credentials",		ctypes.POINTER(_GCredentials)),
	("uid",		ctypes.c_uint),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_data_input_stream_get_type = _rpythonic_function_(		"g_data_input_stream_get_type", ctypes.c_uint, [] )

g_data_input_stream_new = _rpythonic_function_(		"g_data_input_stream_new", ctypes.POINTER(_GDataInputStream), [
	("base_stream",		ctypes.POINTER(_GInputStream)),] )

g_data_input_stream_set_byte_order = _rpythonic_function_(		"g_data_input_stream_set_byte_order", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GDataInputStream)),
	("order",		ctypes.c_int),] )

g_data_input_stream_get_byte_order = _rpythonic_function_(		"g_data_input_stream_get_byte_order", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GDataInputStream)),] )

g_data_input_stream_set_newline_type = _rpythonic_function_(		"g_data_input_stream_set_newline_type", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GDataInputStream)),
	("C_type",		ctypes.c_int),] )

g_data_input_stream_get_newline_type = _rpythonic_function_(		"g_data_input_stream_get_newline_type", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GDataInputStream)),] )

g_data_input_stream_read_byte = _rpythonic_function_(		"g_data_input_stream_read_byte", ctypes.c_ubyte, [
	("stream",		ctypes.POINTER(_GDataInputStream)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_data_input_stream_read_int16 = _rpythonic_function_(		"g_data_input_stream_read_int16", ctypes.c_short, [
	("stream",		ctypes.POINTER(_GDataInputStream)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_data_input_stream_read_uint16 = _rpythonic_function_(		"g_data_input_stream_read_uint16", ctypes.c_ushort, [
	("stream",		ctypes.POINTER(_GDataInputStream)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_data_input_stream_read_int32 = _rpythonic_function_(		"g_data_input_stream_read_int32", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GDataInputStream)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_data_input_stream_read_uint32 = _rpythonic_function_(		"g_data_input_stream_read_uint32", ctypes.c_uint, [
	("stream",		ctypes.POINTER(_GDataInputStream)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_data_input_stream_read_int64 = _rpythonic_function_(		"g_data_input_stream_read_int64", ctypes.c_longlong, [
	("stream",		ctypes.POINTER(_GDataInputStream)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_data_input_stream_read_uint64 = _rpythonic_function_(		"g_data_input_stream_read_uint64", ctypes.c_ulonglong, [
	("stream",		ctypes.POINTER(_GDataInputStream)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_data_input_stream_read_line = _rpythonic_function_(		"g_data_input_stream_read_line", ctypes.POINTER(ctypes.c_char), [
	("stream",		ctypes.POINTER(_GDataInputStream)),
	("length",		ctypes.POINTER(ctypes.c_uint)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_data_input_stream_read_line_utf8 = _rpythonic_function_(		"g_data_input_stream_read_line_utf8", ctypes.POINTER(ctypes.c_char), [
	("stream",		ctypes.POINTER(_GDataInputStream)),
	("length",		ctypes.POINTER(ctypes.c_uint)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_data_input_stream_read_line_async = _rpythonic_function_(		"g_data_input_stream_read_line_async", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GDataInputStream)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_data_input_stream_read_line_finish = _rpythonic_function_(		"g_data_input_stream_read_line_finish", ctypes.POINTER(ctypes.c_char), [
	("stream",		ctypes.POINTER(_GDataInputStream)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("length",		ctypes.POINTER(ctypes.c_uint)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_data_input_stream_read_line_finish_utf8 = _rpythonic_function_(		"g_data_input_stream_read_line_finish_utf8", ctypes.POINTER(ctypes.c_char), [
	("stream",		ctypes.POINTER(_GDataInputStream)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("length",		ctypes.POINTER(ctypes.c_uint)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_data_input_stream_read_until = _rpythonic_function_(		"g_data_input_stream_read_until", ctypes.POINTER(ctypes.c_char), [
	("stream",		ctypes.POINTER(_GDataInputStream)),
	("stop_chars",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.POINTER(ctypes.c_uint)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_data_input_stream_read_until_async = _rpythonic_function_(		"g_data_input_stream_read_until_async", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GDataInputStream)),
	("stop_chars",		ctypes.POINTER(ctypes.c_char)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_data_input_stream_read_until_finish = _rpythonic_function_(		"g_data_input_stream_read_until_finish", ctypes.POINTER(ctypes.c_char), [
	("stream",		ctypes.POINTER(_GDataInputStream)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("length",		ctypes.POINTER(ctypes.c_uint)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_data_input_stream_read_upto = _rpythonic_function_(		"g_data_input_stream_read_upto", ctypes.POINTER(ctypes.c_char), [
	("stream",		ctypes.POINTER(_GDataInputStream)),
	("stop_chars",		ctypes.POINTER(ctypes.c_char)),
	("stop_chars_len",		ctypes.c_int),
	("length",		ctypes.POINTER(ctypes.c_uint)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_data_input_stream_read_upto_async = _rpythonic_function_(		"g_data_input_stream_read_upto_async", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GDataInputStream)),
	("stop_chars",		ctypes.POINTER(ctypes.c_char)),
	("stop_chars_len",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_data_input_stream_read_upto_finish = _rpythonic_function_(		"g_data_input_stream_read_upto_finish", ctypes.POINTER(ctypes.c_char), [
	("stream",		ctypes.POINTER(_GDataInputStream)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("length",		ctypes.POINTER(ctypes.c_uint)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_data_output_stream_get_type = _rpythonic_function_(		"g_data_output_stream_get_type", ctypes.c_uint, [] )

g_data_output_stream_new = _rpythonic_function_(		"g_data_output_stream_new", ctypes.POINTER(_GDataOutputStream), [
	("base_stream",		ctypes.POINTER(_GOutputStream)),] )

g_data_output_stream_set_byte_order = _rpythonic_function_(		"g_data_output_stream_set_byte_order", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GDataOutputStream)),
	("order",		ctypes.c_int),] )

g_data_output_stream_get_byte_order = _rpythonic_function_(		"g_data_output_stream_get_byte_order", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GDataOutputStream)),] )

g_data_output_stream_put_byte = _rpythonic_function_(		"g_data_output_stream_put_byte", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GDataOutputStream)),
	("data",		ctypes.c_ubyte),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_data_output_stream_put_int16 = _rpythonic_function_(		"g_data_output_stream_put_int16", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GDataOutputStream)),
	("data",		ctypes.c_short),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_data_output_stream_put_uint16 = _rpythonic_function_(		"g_data_output_stream_put_uint16", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GDataOutputStream)),
	("data",		ctypes.c_ushort),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_data_output_stream_put_int32 = _rpythonic_function_(		"g_data_output_stream_put_int32", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GDataOutputStream)),
	("data",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_data_output_stream_put_uint32 = _rpythonic_function_(		"g_data_output_stream_put_uint32", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GDataOutputStream)),
	("data",		ctypes.c_uint),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_data_output_stream_put_int64 = _rpythonic_function_(		"g_data_output_stream_put_int64", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GDataOutputStream)),
	("data",		ctypes.c_longlong),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_data_output_stream_put_uint64 = _rpythonic_function_(		"g_data_output_stream_put_uint64", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GDataOutputStream)),
	("data",		ctypes.c_ulonglong),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_data_output_stream_put_string = _rpythonic_function_(		"g_data_output_stream_put_string", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GDataOutputStream)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_is_address = _rpythonic_function_(		"g_dbus_is_address", ctypes.c_int, [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_is_supported_address = _rpythonic_function_(		"g_dbus_is_supported_address", ctypes.c_int, [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_address_get_stream = _rpythonic_function_(		"g_dbus_address_get_stream", ctypes.c_void_p, [
	("address",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_dbus_address_get_stream_finish = _rpythonic_function_(		"g_dbus_address_get_stream_finish", ctypes.POINTER(_GIOStream), [
	("res",		ctypes.POINTER(_GAsyncResult)),
	("out_guid",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_address_get_stream_sync = _rpythonic_function_(		"g_dbus_address_get_stream_sync", ctypes.POINTER(_GIOStream), [
	("address",		ctypes.POINTER(ctypes.c_char)),
	("out_guid",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_address_get_for_bus_sync = _rpythonic_function_(		"g_dbus_address_get_for_bus_sync", ctypes.POINTER(ctypes.c_char), [
	("bus_type",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_auth_observer_get_type = _rpythonic_function_(		"g_dbus_auth_observer_get_type", ctypes.c_uint, [] )

g_dbus_auth_observer_new = _rpythonic_function_(		"g_dbus_auth_observer_new", ctypes.POINTER(_GDBusAuthObserver), [] )

g_dbus_auth_observer_authorize_authenticated_peer = _rpythonic_function_(		"g_dbus_auth_observer_authorize_authenticated_peer", ctypes.c_int, [
	("observer",		ctypes.POINTER(_GDBusAuthObserver)),
	("stream",		ctypes.POINTER(_GIOStream)),
	("credentials",		ctypes.POINTER(_GCredentials)),] )

g_dbus_connection_get_type = _rpythonic_function_(		"g_dbus_connection_get_type", ctypes.c_uint, [] )

g_bus_get = _rpythonic_function_(		"g_bus_get", ctypes.c_void_p, [
	("bus_type",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_bus_get_finish = _rpythonic_function_(		"g_bus_get_finish", ctypes.POINTER(_GDBusConnection), [
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bus_get_sync = _rpythonic_function_(		"g_bus_get_sync", ctypes.POINTER(_GDBusConnection), [
	("bus_type",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_connection_new = _rpythonic_function_(		"g_dbus_connection_new", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GIOStream)),
	("guid",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("observer",		ctypes.POINTER(_GDBusAuthObserver)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_dbus_connection_new_finish = _rpythonic_function_(		"g_dbus_connection_new_finish", ctypes.POINTER(_GDBusConnection), [
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_connection_new_sync = _rpythonic_function_(		"g_dbus_connection_new_sync", ctypes.POINTER(_GDBusConnection), [
	("stream",		ctypes.POINTER(_GIOStream)),
	("guid",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("observer",		ctypes.POINTER(_GDBusAuthObserver)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_connection_new_for_address = _rpythonic_function_(		"g_dbus_connection_new_for_address", ctypes.c_void_p, [
	("address",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("observer",		ctypes.POINTER(_GDBusAuthObserver)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_dbus_connection_new_for_address_finish = _rpythonic_function_(		"g_dbus_connection_new_for_address_finish", ctypes.POINTER(_GDBusConnection), [
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_connection_new_for_address_sync = _rpythonic_function_(		"g_dbus_connection_new_for_address_sync", ctypes.POINTER(_GDBusConnection), [
	("address",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("observer",		ctypes.POINTER(_GDBusAuthObserver)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_connection_start_message_processing = _rpythonic_function_(		"g_dbus_connection_start_message_processing", ctypes.c_void_p, [
	("connection",		ctypes.POINTER(_GDBusConnection)),] )

g_dbus_connection_is_closed = _rpythonic_function_(		"g_dbus_connection_is_closed", ctypes.c_int, [
	("connection",		ctypes.POINTER(_GDBusConnection)),] )

g_dbus_connection_get_stream = _rpythonic_function_(		"g_dbus_connection_get_stream", ctypes.POINTER(_GIOStream), [
	("connection",		ctypes.POINTER(_GDBusConnection)),] )

g_dbus_connection_get_guid = _rpythonic_function_(		"g_dbus_connection_get_guid", ctypes.POINTER(ctypes.c_char), [
	("connection",		ctypes.POINTER(_GDBusConnection)),] )

g_dbus_connection_get_unique_name = _rpythonic_function_(		"g_dbus_connection_get_unique_name", ctypes.POINTER(ctypes.c_char), [
	("connection",		ctypes.POINTER(_GDBusConnection)),] )

g_dbus_connection_get_peer_credentials = _rpythonic_function_(		"g_dbus_connection_get_peer_credentials", ctypes.POINTER(_GCredentials), [
	("connection",		ctypes.POINTER(_GDBusConnection)),] )

g_dbus_connection_get_exit_on_close = _rpythonic_function_(		"g_dbus_connection_get_exit_on_close", ctypes.c_int, [
	("connection",		ctypes.POINTER(_GDBusConnection)),] )

g_dbus_connection_set_exit_on_close = _rpythonic_function_(		"g_dbus_connection_set_exit_on_close", ctypes.c_void_p, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("exit_on_close",		ctypes.c_int),] )

g_dbus_connection_get_capabilities = _rpythonic_function_(		"g_dbus_connection_get_capabilities", ctypes.c_int, [
	("connection",		ctypes.POINTER(_GDBusConnection)),] )

g_dbus_connection_close = _rpythonic_function_(		"g_dbus_connection_close", ctypes.c_void_p, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_dbus_connection_close_finish = _rpythonic_function_(		"g_dbus_connection_close_finish", ctypes.c_int, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_connection_close_sync = _rpythonic_function_(		"g_dbus_connection_close_sync", ctypes.c_int, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_connection_flush = _rpythonic_function_(		"g_dbus_connection_flush", ctypes.c_void_p, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_dbus_connection_flush_finish = _rpythonic_function_(		"g_dbus_connection_flush_finish", ctypes.c_int, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_connection_flush_sync = _rpythonic_function_(		"g_dbus_connection_flush_sync", ctypes.c_int, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_connection_send_message = _rpythonic_function_(		"g_dbus_connection_send_message", ctypes.c_int, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("message",		ctypes.POINTER(_GDBusMessage)),
	("flags",		ctypes.c_int),
	("out_serial",		ctypes.POINTER(ctypes.c_uint)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_connection_send_message_with_reply = _rpythonic_function_(		"g_dbus_connection_send_message_with_reply", ctypes.c_void_p, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("message",		ctypes.POINTER(_GDBusMessage)),
	("flags",		ctypes.c_int),
	("timeout_msec",		ctypes.c_int),
	("out_serial",		ctypes.POINTER(ctypes.c_uint)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_dbus_connection_send_message_with_reply_finish = _rpythonic_function_(		"g_dbus_connection_send_message_with_reply_finish", ctypes.POINTER(_GDBusMessage), [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_connection_send_message_with_reply_sync = _rpythonic_function_(		"g_dbus_connection_send_message_with_reply_sync", ctypes.POINTER(_GDBusMessage), [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("message",		ctypes.POINTER(_GDBusMessage)),
	("flags",		ctypes.c_int),
	("timeout_msec",		ctypes.c_int),
	("out_serial",		ctypes.POINTER(ctypes.c_uint)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_connection_emit_signal = _rpythonic_function_(		"g_dbus_connection_emit_signal", ctypes.c_int, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("destination_bus_name",		ctypes.POINTER(ctypes.c_char)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("interface_name",		ctypes.POINTER(ctypes.c_char)),
	("signal_name",		ctypes.POINTER(ctypes.c_char)),
	("parameters",		ctypes.POINTER(_GVariant)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_connection_call = _rpythonic_function_(		"g_dbus_connection_call", ctypes.c_void_p, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("bus_name",		ctypes.POINTER(ctypes.c_char)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("interface_name",		ctypes.POINTER(ctypes.c_char)),
	("method_name",		ctypes.POINTER(ctypes.c_char)),
	("parameters",		ctypes.POINTER(_GVariant)),
	("reply_type",		ctypes.POINTER(_GVariantType)),
	("flags",		ctypes.c_int),
	("timeout_msec",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_dbus_connection_call_finish = _rpythonic_function_(		"g_dbus_connection_call_finish", ctypes.POINTER(_GVariant), [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_connection_call_sync = _rpythonic_function_(		"g_dbus_connection_call_sync", ctypes.POINTER(_GVariant), [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("bus_name",		ctypes.POINTER(ctypes.c_char)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("interface_name",		ctypes.POINTER(ctypes.c_char)),
	("method_name",		ctypes.POINTER(ctypes.c_char)),
	("parameters",		ctypes.POINTER(_GVariant)),
	("reply_type",		ctypes.POINTER(_GVariantType)),
	("flags",		ctypes.c_int),
	("timeout_msec",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_connection_call_with_unix_fd_list = _rpythonic_function_(		"g_dbus_connection_call_with_unix_fd_list", ctypes.c_void_p, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("bus_name",		ctypes.POINTER(ctypes.c_char)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("interface_name",		ctypes.POINTER(ctypes.c_char)),
	("method_name",		ctypes.POINTER(ctypes.c_char)),
	("parameters",		ctypes.POINTER(_GVariant)),
	("reply_type",		ctypes.POINTER(_GVariantType)),
	("flags",		ctypes.c_int),
	("timeout_msec",		ctypes.c_int),
	("fd_list",		ctypes.POINTER(_GUnixFDList)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_dbus_connection_call_with_unix_fd_list_finish = _rpythonic_function_(		"g_dbus_connection_call_with_unix_fd_list_finish", ctypes.POINTER(_GVariant), [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("out_fd_list",		ctypes.POINTER(ctypes.POINTER(_GUnixFDList))),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_connection_call_with_unix_fd_list_sync = _rpythonic_function_(		"g_dbus_connection_call_with_unix_fd_list_sync", ctypes.POINTER(_GVariant), [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("bus_name",		ctypes.POINTER(ctypes.c_char)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("interface_name",		ctypes.POINTER(ctypes.c_char)),
	("method_name",		ctypes.POINTER(ctypes.c_char)),
	("parameters",		ctypes.POINTER(_GVariant)),
	("reply_type",		ctypes.POINTER(_GVariantType)),
	("flags",		ctypes.c_int),
	("timeout_msec",		ctypes.c_int),
	("fd_list",		ctypes.POINTER(_GUnixFDList)),
	("out_fd_list",		ctypes.POINTER(ctypes.POINTER(_GUnixFDList))),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

GDBusInterfaceMethodCallFunc = _rpythonic_function_(		"GDBusInterfaceMethodCallFunc", ctypes.c_void_p, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("sender",		ctypes.POINTER(ctypes.c_char)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("interface_name",		ctypes.POINTER(ctypes.c_char)),
	("method_name",		ctypes.POINTER(ctypes.c_char)),
	("parameters",		ctypes.POINTER(_GVariant)),
	("invocation",		ctypes.POINTER(_GDBusMethodInvocation)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GDBusInterfaceGetPropertyFunc = _rpythonic_function_(		"GDBusInterfaceGetPropertyFunc", ctypes.POINTER(_GVariant), [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("sender",		ctypes.POINTER(ctypes.c_char)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("interface_name",		ctypes.POINTER(ctypes.c_char)),
	("property_name",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GDBusInterfaceSetPropertyFunc = _rpythonic_function_(		"GDBusInterfaceSetPropertyFunc", ctypes.c_int, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("sender",		ctypes.POINTER(ctypes.c_char)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("interface_name",		ctypes.POINTER(ctypes.c_char)),
	("property_name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(_GVariant)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_dbus_connection_register_object = _rpythonic_function_(		"g_dbus_connection_register_object", ctypes.c_uint, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("interface_info",		ctypes.POINTER(_GDBusInterfaceInfo)),
	("vtable",		ctypes.POINTER(_GDBusInterfaceVTable)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("user_data_free_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_connection_unregister_object = _rpythonic_function_(		"g_dbus_connection_unregister_object", ctypes.c_int, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("registration_id",		ctypes.c_uint),] )

GDBusSubtreeEnumerateFunc = _rpythonic_function_(		"GDBusSubtreeEnumerateFunc", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("sender",		ctypes.POINTER(ctypes.c_char)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GDBusSubtreeIntrospectFunc = _rpythonic_function_(		"GDBusSubtreeIntrospectFunc", ctypes.POINTER(ctypes.POINTER(_GDBusInterfaceInfo)), [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("sender",		ctypes.POINTER(ctypes.c_char)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("node",		ctypes.POINTER(ctypes.c_char)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GDBusSubtreeDispatchFunc = _rpythonic_function_(		"GDBusSubtreeDispatchFunc", ctypes.POINTER(_GDBusInterfaceVTable), [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("sender",		ctypes.POINTER(ctypes.c_char)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("interface_name",		ctypes.POINTER(ctypes.c_char)),
	("node",		ctypes.POINTER(ctypes.c_char)),
	("out_user_data",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_dbus_connection_register_subtree = _rpythonic_function_(		"g_dbus_connection_register_subtree", ctypes.c_uint, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("vtable",		ctypes.POINTER(_GDBusSubtreeVTable)),
	("flags",		ctypes.c_int),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("user_data_free_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_connection_unregister_subtree = _rpythonic_function_(		"g_dbus_connection_unregister_subtree", ctypes.c_int, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("registration_id",		ctypes.c_uint),] )

GDBusSignalCallback = _rpythonic_function_(		"GDBusSignalCallback", ctypes.c_void_p, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("sender_name",		ctypes.POINTER(ctypes.c_char)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("interface_name",		ctypes.POINTER(ctypes.c_char)),
	("signal_name",		ctypes.POINTER(ctypes.c_char)),
	("parameters",		ctypes.POINTER(_GVariant)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_dbus_connection_signal_unsubscribe = _rpythonic_function_(		"g_dbus_connection_signal_unsubscribe", ctypes.c_void_p, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("subscription_id",		ctypes.c_uint),] )

g_dbus_connection_signal_subscribe = _rpythonic_function_(		"g_dbus_connection_signal_subscribe", ctypes.c_uint, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("sender",		ctypes.POINTER(ctypes.c_char)),
	("interface_name",		ctypes.POINTER(ctypes.c_char)),
	("member",		ctypes.POINTER(ctypes.c_char)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("arg0",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GDBusConnection),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(_GVariant),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("user_data_free_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

GDBusMessageFilterFunction = _rpythonic_function_(		"GDBusMessageFilterFunction", ctypes.POINTER(_GDBusMessage), [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("message",		ctypes.POINTER(_GDBusMessage)),
	("incoming",		ctypes.c_int),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_dbus_connection_add_filter = _rpythonic_function_(		"g_dbus_connection_add_filter", ctypes.c_uint, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("filter_function",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_GDBusMessage), ctypes.POINTER(_GDBusConnection),ctypes.POINTER(_GDBusMessage),ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),))),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("user_data_free_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_dbus_connection_remove_filter = _rpythonic_function_(		"g_dbus_connection_remove_filter", ctypes.c_void_p, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("filter_id",		ctypes.c_uint),] )

g_dbus_error_quark = _rpythonic_function_(		"g_dbus_error_quark", ctypes.c_uint, [] )

g_dbus_error_is_remote_error = _rpythonic_function_(		"g_dbus_error_is_remote_error", ctypes.c_int, [
	("error",		ctypes.POINTER(_GError)),] )

g_dbus_error_get_remote_error = _rpythonic_function_(		"g_dbus_error_get_remote_error", ctypes.POINTER(ctypes.c_char), [
	("error",		ctypes.POINTER(_GError)),] )

g_dbus_error_strip_remote_error = _rpythonic_function_(		"g_dbus_error_strip_remote_error", ctypes.c_int, [
	("error",		ctypes.POINTER(_GError)),] )

g_dbus_error_register_error = _rpythonic_function_(		"g_dbus_error_register_error", ctypes.c_int, [
	("error_domain",		ctypes.c_uint),
	("error_code",		ctypes.c_int),
	("dbus_error_name",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_error_unregister_error = _rpythonic_function_(		"g_dbus_error_unregister_error", ctypes.c_int, [
	("error_domain",		ctypes.c_uint),
	("error_code",		ctypes.c_int),
	("dbus_error_name",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_error_register_error_domain = _rpythonic_function_(		"g_dbus_error_register_error_domain", ctypes.c_void_p, [
	("error_domain_quark_name",		ctypes.POINTER(ctypes.c_char)),
	("quark_volatile",		ctypes.POINTER(ctypes.c_uint)),
	("entries",		ctypes.POINTER(_GDBusErrorEntry)),
	("num_entries",		ctypes.c_uint),] )

g_dbus_error_new_for_dbus_error = _rpythonic_function_(		"g_dbus_error_new_for_dbus_error", ctypes.POINTER(_GError), [
	("dbus_error_name",		ctypes.POINTER(ctypes.c_char)),
	("dbus_error_message",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_error_set_dbus_error_valist = _rpythonic_function_(		"g_dbus_error_set_dbus_error_valist", ctypes.c_void_p, [
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),
	("dbus_error_name",		ctypes.POINTER(ctypes.c_char)),
	("dbus_error_message",		ctypes.POINTER(ctypes.c_char)),
	("format",		ctypes.POINTER(ctypes.c_char)),
	("var_args",		ctypes.c_char),] )

g_dbus_error_encode_gerror = _rpythonic_function_(		"g_dbus_error_encode_gerror", ctypes.POINTER(ctypes.c_char), [
	("error",		ctypes.POINTER(_GError)),] )

g_dbus_annotation_info_lookup = _rpythonic_function_(		"g_dbus_annotation_info_lookup", ctypes.POINTER(ctypes.c_char), [
	("annotations",		ctypes.POINTER(ctypes.POINTER(_GDBusAnnotationInfo))),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_interface_info_lookup_method = _rpythonic_function_(		"g_dbus_interface_info_lookup_method", ctypes.POINTER(_GDBusMethodInfo), [
	("info",		ctypes.POINTER(_GDBusInterfaceInfo)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_interface_info_lookup_signal = _rpythonic_function_(		"g_dbus_interface_info_lookup_signal", ctypes.POINTER(_GDBusSignalInfo), [
	("info",		ctypes.POINTER(_GDBusInterfaceInfo)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_interface_info_lookup_property = _rpythonic_function_(		"g_dbus_interface_info_lookup_property", ctypes.POINTER(_GDBusPropertyInfo), [
	("info",		ctypes.POINTER(_GDBusInterfaceInfo)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_interface_info_cache_build = _rpythonic_function_(		"g_dbus_interface_info_cache_build", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GDBusInterfaceInfo)),] )

g_dbus_interface_info_cache_release = _rpythonic_function_(		"g_dbus_interface_info_cache_release", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GDBusInterfaceInfo)),] )

g_dbus_interface_info_generate_xml = _rpythonic_function_(		"g_dbus_interface_info_generate_xml", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GDBusInterfaceInfo)),
	("indent",		ctypes.c_uint),
	("string_builder",		ctypes.POINTER(_GString)),] )

g_dbus_node_info_new_for_xml = _rpythonic_function_(		"g_dbus_node_info_new_for_xml", ctypes.POINTER(_GDBusNodeInfo), [
	("xml_data",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_node_info_lookup_interface = _rpythonic_function_(		"g_dbus_node_info_lookup_interface", ctypes.POINTER(_GDBusInterfaceInfo), [
	("info",		ctypes.POINTER(_GDBusNodeInfo)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_node_info_generate_xml = _rpythonic_function_(		"g_dbus_node_info_generate_xml", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GDBusNodeInfo)),
	("indent",		ctypes.c_uint),
	("string_builder",		ctypes.POINTER(_GString)),] )

g_dbus_node_info_ref = _rpythonic_function_(		"g_dbus_node_info_ref", ctypes.POINTER(_GDBusNodeInfo), [
	("info",		ctypes.POINTER(_GDBusNodeInfo)),] )

g_dbus_interface_info_ref = _rpythonic_function_(		"g_dbus_interface_info_ref", ctypes.POINTER(_GDBusInterfaceInfo), [
	("info",		ctypes.POINTER(_GDBusInterfaceInfo)),] )

g_dbus_method_info_ref = _rpythonic_function_(		"g_dbus_method_info_ref", ctypes.POINTER(_GDBusMethodInfo), [
	("info",		ctypes.POINTER(_GDBusMethodInfo)),] )

g_dbus_signal_info_ref = _rpythonic_function_(		"g_dbus_signal_info_ref", ctypes.POINTER(_GDBusSignalInfo), [
	("info",		ctypes.POINTER(_GDBusSignalInfo)),] )

g_dbus_property_info_ref = _rpythonic_function_(		"g_dbus_property_info_ref", ctypes.POINTER(_GDBusPropertyInfo), [
	("info",		ctypes.POINTER(_GDBusPropertyInfo)),] )

g_dbus_arg_info_ref = _rpythonic_function_(		"g_dbus_arg_info_ref", ctypes.POINTER(_GDBusArgInfo), [
	("info",		ctypes.POINTER(_GDBusArgInfo)),] )

g_dbus_annotation_info_ref = _rpythonic_function_(		"g_dbus_annotation_info_ref", ctypes.POINTER(_GDBusAnnotationInfo), [
	("info",		ctypes.POINTER(_GDBusAnnotationInfo)),] )

g_dbus_node_info_unref = _rpythonic_function_(		"g_dbus_node_info_unref", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GDBusNodeInfo)),] )

g_dbus_interface_info_unref = _rpythonic_function_(		"g_dbus_interface_info_unref", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GDBusInterfaceInfo)),] )

g_dbus_method_info_unref = _rpythonic_function_(		"g_dbus_method_info_unref", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GDBusMethodInfo)),] )

g_dbus_signal_info_unref = _rpythonic_function_(		"g_dbus_signal_info_unref", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GDBusSignalInfo)),] )

g_dbus_property_info_unref = _rpythonic_function_(		"g_dbus_property_info_unref", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GDBusPropertyInfo)),] )

g_dbus_arg_info_unref = _rpythonic_function_(		"g_dbus_arg_info_unref", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GDBusArgInfo)),] )

g_dbus_annotation_info_unref = _rpythonic_function_(		"g_dbus_annotation_info_unref", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GDBusAnnotationInfo)),] )

g_dbus_node_info_get_type = _rpythonic_function_(		"g_dbus_node_info_get_type", ctypes.c_uint, [] )

g_dbus_interface_info_get_type = _rpythonic_function_(		"g_dbus_interface_info_get_type", ctypes.c_uint, [] )

g_dbus_method_info_get_type = _rpythonic_function_(		"g_dbus_method_info_get_type", ctypes.c_uint, [] )

g_dbus_signal_info_get_type = _rpythonic_function_(		"g_dbus_signal_info_get_type", ctypes.c_uint, [] )

g_dbus_property_info_get_type = _rpythonic_function_(		"g_dbus_property_info_get_type", ctypes.c_uint, [] )

g_dbus_arg_info_get_type = _rpythonic_function_(		"g_dbus_arg_info_get_type", ctypes.c_uint, [] )

g_dbus_annotation_info_get_type = _rpythonic_function_(		"g_dbus_annotation_info_get_type", ctypes.c_uint, [] )

g_dbus_message_get_type = _rpythonic_function_(		"g_dbus_message_get_type", ctypes.c_uint, [] )

g_dbus_message_new = _rpythonic_function_(		"g_dbus_message_new", ctypes.POINTER(_GDBusMessage), [] )

g_dbus_message_new_signal = _rpythonic_function_(		"g_dbus_message_new_signal", ctypes.POINTER(_GDBusMessage), [
	("path",		ctypes.POINTER(ctypes.c_char)),
	("interface_",		ctypes.POINTER(ctypes.c_char)),
	("signal",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_message_new_method_call = _rpythonic_function_(		"g_dbus_message_new_method_call", ctypes.POINTER(_GDBusMessage), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("path",		ctypes.POINTER(ctypes.c_char)),
	("interface_",		ctypes.POINTER(ctypes.c_char)),
	("method",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_message_new_method_reply = _rpythonic_function_(		"g_dbus_message_new_method_reply", ctypes.POINTER(_GDBusMessage), [
	("method_call_message",		ctypes.POINTER(_GDBusMessage)),] )

g_dbus_message_new_method_error_valist = _rpythonic_function_(		"g_dbus_message_new_method_error_valist", ctypes.POINTER(_GDBusMessage), [
	("method_call_message",		ctypes.POINTER(_GDBusMessage)),
	("error_name",		ctypes.POINTER(ctypes.c_char)),
	("error_message_format",		ctypes.POINTER(ctypes.c_char)),
	("var_args",		ctypes.c_char),] )

g_dbus_message_new_method_error_literal = _rpythonic_function_(		"g_dbus_message_new_method_error_literal", ctypes.POINTER(_GDBusMessage), [
	("method_call_message",		ctypes.POINTER(_GDBusMessage)),
	("error_name",		ctypes.POINTER(ctypes.c_char)),
	("error_message",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_message_print = _rpythonic_function_(		"g_dbus_message_print", ctypes.POINTER(ctypes.c_char), [
	("message",		ctypes.POINTER(_GDBusMessage)),
	("indent",		ctypes.c_uint),] )

g_dbus_message_get_locked = _rpythonic_function_(		"g_dbus_message_get_locked", ctypes.c_int, [
	("message",		ctypes.POINTER(_GDBusMessage)),] )

g_dbus_message_lock = _rpythonic_function_(		"g_dbus_message_lock", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GDBusMessage)),] )

g_dbus_message_copy = _rpythonic_function_(		"g_dbus_message_copy", ctypes.POINTER(_GDBusMessage), [
	("message",		ctypes.POINTER(_GDBusMessage)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_message_get_byte_order = _rpythonic_function_(		"g_dbus_message_get_byte_order", ctypes.c_int, [
	("message",		ctypes.POINTER(_GDBusMessage)),] )

g_dbus_message_set_byte_order = _rpythonic_function_(		"g_dbus_message_set_byte_order", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GDBusMessage)),
	("byte_order",		ctypes.c_int),] )

g_dbus_message_get_message_type = _rpythonic_function_(		"g_dbus_message_get_message_type", ctypes.c_int, [
	("message",		ctypes.POINTER(_GDBusMessage)),] )

g_dbus_message_set_message_type = _rpythonic_function_(		"g_dbus_message_set_message_type", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GDBusMessage)),
	("C_type",		ctypes.c_int),] )

g_dbus_message_get_flags = _rpythonic_function_(		"g_dbus_message_get_flags", ctypes.c_int, [
	("message",		ctypes.POINTER(_GDBusMessage)),] )

g_dbus_message_set_flags = _rpythonic_function_(		"g_dbus_message_set_flags", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GDBusMessage)),
	("flags",		ctypes.c_int),] )

g_dbus_message_get_serial = _rpythonic_function_(		"g_dbus_message_get_serial", ctypes.c_uint, [
	("message",		ctypes.POINTER(_GDBusMessage)),] )

g_dbus_message_set_serial = _rpythonic_function_(		"g_dbus_message_set_serial", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GDBusMessage)),
	("serial",		ctypes.c_uint),] )

g_dbus_message_get_header = _rpythonic_function_(		"g_dbus_message_get_header", ctypes.POINTER(_GVariant), [
	("message",		ctypes.POINTER(_GDBusMessage)),
	("header_field",		ctypes.c_int),] )

g_dbus_message_set_header = _rpythonic_function_(		"g_dbus_message_set_header", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GDBusMessage)),
	("header_field",		ctypes.c_int),
	("value",		ctypes.POINTER(_GVariant)),] )

g_dbus_message_get_header_fields = _rpythonic_function_(		"g_dbus_message_get_header_fields", ctypes.POINTER(ctypes.c_ubyte), [
	("message",		ctypes.POINTER(_GDBusMessage)),] )

g_dbus_message_get_body = _rpythonic_function_(		"g_dbus_message_get_body", ctypes.POINTER(_GVariant), [
	("message",		ctypes.POINTER(_GDBusMessage)),] )

g_dbus_message_set_body = _rpythonic_function_(		"g_dbus_message_set_body", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GDBusMessage)),
	("body",		ctypes.POINTER(_GVariant)),] )

g_dbus_message_get_unix_fd_list = _rpythonic_function_(		"g_dbus_message_get_unix_fd_list", ctypes.POINTER(_GUnixFDList), [
	("message",		ctypes.POINTER(_GDBusMessage)),] )

g_dbus_message_set_unix_fd_list = _rpythonic_function_(		"g_dbus_message_set_unix_fd_list", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GDBusMessage)),
	("fd_list",		ctypes.POINTER(_GUnixFDList)),] )

g_dbus_message_get_reply_serial = _rpythonic_function_(		"g_dbus_message_get_reply_serial", ctypes.c_uint, [
	("message",		ctypes.POINTER(_GDBusMessage)),] )

g_dbus_message_set_reply_serial = _rpythonic_function_(		"g_dbus_message_set_reply_serial", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GDBusMessage)),
	("value",		ctypes.c_uint),] )

g_dbus_message_get_interface = _rpythonic_function_(		"g_dbus_message_get_interface", ctypes.POINTER(ctypes.c_char), [
	("message",		ctypes.POINTER(_GDBusMessage)),] )

g_dbus_message_set_interface = _rpythonic_function_(		"g_dbus_message_set_interface", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GDBusMessage)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_message_get_member = _rpythonic_function_(		"g_dbus_message_get_member", ctypes.POINTER(ctypes.c_char), [
	("message",		ctypes.POINTER(_GDBusMessage)),] )

g_dbus_message_set_member = _rpythonic_function_(		"g_dbus_message_set_member", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GDBusMessage)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_message_get_path = _rpythonic_function_(		"g_dbus_message_get_path", ctypes.POINTER(ctypes.c_char), [
	("message",		ctypes.POINTER(_GDBusMessage)),] )

g_dbus_message_set_path = _rpythonic_function_(		"g_dbus_message_set_path", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GDBusMessage)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_message_get_sender = _rpythonic_function_(		"g_dbus_message_get_sender", ctypes.POINTER(ctypes.c_char), [
	("message",		ctypes.POINTER(_GDBusMessage)),] )

g_dbus_message_set_sender = _rpythonic_function_(		"g_dbus_message_set_sender", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GDBusMessage)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_message_get_destination = _rpythonic_function_(		"g_dbus_message_get_destination", ctypes.POINTER(ctypes.c_char), [
	("message",		ctypes.POINTER(_GDBusMessage)),] )

g_dbus_message_set_destination = _rpythonic_function_(		"g_dbus_message_set_destination", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GDBusMessage)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_message_get_error_name = _rpythonic_function_(		"g_dbus_message_get_error_name", ctypes.POINTER(ctypes.c_char), [
	("message",		ctypes.POINTER(_GDBusMessage)),] )

g_dbus_message_set_error_name = _rpythonic_function_(		"g_dbus_message_set_error_name", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GDBusMessage)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_message_get_signature = _rpythonic_function_(		"g_dbus_message_get_signature", ctypes.POINTER(ctypes.c_char), [
	("message",		ctypes.POINTER(_GDBusMessage)),] )

g_dbus_message_set_signature = _rpythonic_function_(		"g_dbus_message_set_signature", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GDBusMessage)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_message_get_num_unix_fds = _rpythonic_function_(		"g_dbus_message_get_num_unix_fds", ctypes.c_uint, [
	("message",		ctypes.POINTER(_GDBusMessage)),] )

g_dbus_message_set_num_unix_fds = _rpythonic_function_(		"g_dbus_message_set_num_unix_fds", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GDBusMessage)),
	("value",		ctypes.c_uint),] )

g_dbus_message_get_arg0 = _rpythonic_function_(		"g_dbus_message_get_arg0", ctypes.POINTER(ctypes.c_char), [
	("message",		ctypes.POINTER(_GDBusMessage)),] )

g_dbus_message_new_from_blob = _rpythonic_function_(		"g_dbus_message_new_from_blob", ctypes.POINTER(_GDBusMessage), [
	("blob",		ctypes.POINTER(ctypes.c_ubyte)),
	("blob_len",		ctypes.c_uint),
	("capabilities",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_message_bytes_needed = _rpythonic_function_(		"g_dbus_message_bytes_needed", ctypes.c_int, [
	("blob",		ctypes.POINTER(ctypes.c_ubyte)),
	("blob_len",		ctypes.c_uint),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_message_to_blob = _rpythonic_function_(		"g_dbus_message_to_blob", ctypes.POINTER(ctypes.c_ubyte), [
	("message",		ctypes.POINTER(_GDBusMessage)),
	("out_size",		ctypes.POINTER(ctypes.c_uint)),
	("capabilities",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_message_to_gerror = _rpythonic_function_(		"g_dbus_message_to_gerror", ctypes.c_int, [
	("message",		ctypes.POINTER(_GDBusMessage)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_method_invocation_get_type = _rpythonic_function_(		"g_dbus_method_invocation_get_type", ctypes.c_uint, [] )

g_dbus_method_invocation_get_sender = _rpythonic_function_(		"g_dbus_method_invocation_get_sender", ctypes.POINTER(ctypes.c_char), [
	("invocation",		ctypes.POINTER(_GDBusMethodInvocation)),] )

g_dbus_method_invocation_get_object_path = _rpythonic_function_(		"g_dbus_method_invocation_get_object_path", ctypes.POINTER(ctypes.c_char), [
	("invocation",		ctypes.POINTER(_GDBusMethodInvocation)),] )

g_dbus_method_invocation_get_interface_name = _rpythonic_function_(		"g_dbus_method_invocation_get_interface_name", ctypes.POINTER(ctypes.c_char), [
	("invocation",		ctypes.POINTER(_GDBusMethodInvocation)),] )

g_dbus_method_invocation_get_method_name = _rpythonic_function_(		"g_dbus_method_invocation_get_method_name", ctypes.POINTER(ctypes.c_char), [
	("invocation",		ctypes.POINTER(_GDBusMethodInvocation)),] )

g_dbus_method_invocation_get_method_info = _rpythonic_function_(		"g_dbus_method_invocation_get_method_info", ctypes.POINTER(_GDBusMethodInfo), [
	("invocation",		ctypes.POINTER(_GDBusMethodInvocation)),] )

g_dbus_method_invocation_get_connection = _rpythonic_function_(		"g_dbus_method_invocation_get_connection", ctypes.POINTER(_GDBusConnection), [
	("invocation",		ctypes.POINTER(_GDBusMethodInvocation)),] )

g_dbus_method_invocation_get_message = _rpythonic_function_(		"g_dbus_method_invocation_get_message", ctypes.POINTER(_GDBusMessage), [
	("invocation",		ctypes.POINTER(_GDBusMethodInvocation)),] )

g_dbus_method_invocation_get_parameters = _rpythonic_function_(		"g_dbus_method_invocation_get_parameters", ctypes.POINTER(_GVariant), [
	("invocation",		ctypes.POINTER(_GDBusMethodInvocation)),] )

g_dbus_method_invocation_get_user_data = _rpythonic_function_(		"g_dbus_method_invocation_get_user_data", ctypes.POINTER(ctypes.c_void_p), [
	("invocation",		ctypes.POINTER(_GDBusMethodInvocation)),] )

g_dbus_method_invocation_return_value = _rpythonic_function_(		"g_dbus_method_invocation_return_value", ctypes.c_void_p, [
	("invocation",		ctypes.POINTER(_GDBusMethodInvocation)),
	("parameters",		ctypes.POINTER(_GVariant)),] )

g_dbus_method_invocation_return_value_with_unix_fd_list = _rpythonic_function_(		"g_dbus_method_invocation_return_value_with_unix_fd_list", ctypes.c_void_p, [
	("invocation",		ctypes.POINTER(_GDBusMethodInvocation)),
	("parameters",		ctypes.POINTER(_GVariant)),
	("fd_list",		ctypes.POINTER(_GUnixFDList)),] )

g_dbus_method_invocation_return_error_valist = _rpythonic_function_(		"g_dbus_method_invocation_return_error_valist", ctypes.c_void_p, [
	("invocation",		ctypes.POINTER(_GDBusMethodInvocation)),
	("domain",		ctypes.c_uint),
	("code",		ctypes.c_int),
	("format",		ctypes.POINTER(ctypes.c_char)),
	("var_args",		ctypes.c_char),] )

g_dbus_method_invocation_return_error_literal = _rpythonic_function_(		"g_dbus_method_invocation_return_error_literal", ctypes.c_void_p, [
	("invocation",		ctypes.POINTER(_GDBusMethodInvocation)),
	("domain",		ctypes.c_uint),
	("code",		ctypes.c_int),
	("message",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_method_invocation_return_gerror = _rpythonic_function_(		"g_dbus_method_invocation_return_gerror", ctypes.c_void_p, [
	("invocation",		ctypes.POINTER(_GDBusMethodInvocation)),
	("error",		ctypes.POINTER(_GError)),] )

g_dbus_method_invocation_take_error = _rpythonic_function_(		"g_dbus_method_invocation_take_error", ctypes.c_void_p, [
	("invocation",		ctypes.POINTER(_GDBusMethodInvocation)),
	("error",		ctypes.POINTER(_GError)),] )

g_dbus_method_invocation_return_dbus_error = _rpythonic_function_(		"g_dbus_method_invocation_return_dbus_error", ctypes.c_void_p, [
	("invocation",		ctypes.POINTER(_GDBusMethodInvocation)),
	("error_name",		ctypes.POINTER(ctypes.c_char)),
	("error_message",		ctypes.POINTER(ctypes.c_char)),] )

GBusAcquiredCallback = _rpythonic_function_(		"GBusAcquiredCallback", ctypes.c_void_p, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GBusNameAcquiredCallback = _rpythonic_function_(		"GBusNameAcquiredCallback", ctypes.c_void_p, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GBusNameLostCallback = _rpythonic_function_(		"GBusNameLostCallback", ctypes.c_void_p, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_bus_own_name = _rpythonic_function_(		"g_bus_own_name", ctypes.c_uint, [
	("bus_type",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("bus_acquired_handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GDBusConnection),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),)),
	("name_acquired_handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GDBusConnection),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),)),
	("name_lost_handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GDBusConnection),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("user_data_free_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_bus_own_name_on_connection = _rpythonic_function_(		"g_bus_own_name_on_connection", ctypes.c_uint, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("name_acquired_handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GDBusConnection),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),)),
	("name_lost_handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GDBusConnection),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("user_data_free_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_bus_own_name_with_closures = _rpythonic_function_(		"g_bus_own_name_with_closures", ctypes.c_uint, [
	("bus_type",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("bus_acquired_closure",		ctypes.POINTER(_GClosure)),
	("name_acquired_closure",		ctypes.POINTER(_GClosure)),
	("name_lost_closure",		ctypes.POINTER(_GClosure)),] )

g_bus_own_name_on_connection_with_closures = _rpythonic_function_(		"g_bus_own_name_on_connection_with_closures", ctypes.c_uint, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("name_acquired_closure",		ctypes.POINTER(_GClosure)),
	("name_lost_closure",		ctypes.POINTER(_GClosure)),] )

g_bus_unown_name = _rpythonic_function_(		"g_bus_unown_name", ctypes.c_void_p, [
	("owner_id",		ctypes.c_uint),] )

GBusNameAppearedCallback = _rpythonic_function_(		"GBusNameAppearedCallback", ctypes.c_void_p, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("name_owner",		ctypes.POINTER(ctypes.c_char)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GBusNameVanishedCallback = _rpythonic_function_(		"GBusNameVanishedCallback", ctypes.c_void_p, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_bus_watch_name = _rpythonic_function_(		"g_bus_watch_name", ctypes.c_uint, [
	("bus_type",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("name_appeared_handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GDBusConnection),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),)),
	("name_vanished_handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GDBusConnection),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("user_data_free_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_bus_watch_name_on_connection = _rpythonic_function_(		"g_bus_watch_name_on_connection", ctypes.c_uint, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("name_appeared_handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GDBusConnection),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),)),
	("name_vanished_handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GDBusConnection),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("user_data_free_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_bus_watch_name_with_closures = _rpythonic_function_(		"g_bus_watch_name_with_closures", ctypes.c_uint, [
	("bus_type",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("name_appeared_closure",		ctypes.POINTER(_GClosure)),
	("name_vanished_closure",		ctypes.POINTER(_GClosure)),] )

g_bus_watch_name_on_connection_with_closures = _rpythonic_function_(		"g_bus_watch_name_on_connection_with_closures", ctypes.c_uint, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("name_appeared_closure",		ctypes.POINTER(_GClosure)),
	("name_vanished_closure",		ctypes.POINTER(_GClosure)),] )

g_bus_unwatch_name = _rpythonic_function_(		"g_bus_unwatch_name", ctypes.c_void_p, [
	("watcher_id",		ctypes.c_uint),] )

g_properties_changed = _rpythonic_function_(		"g_properties_changed", ctypes.c_void_p, [
	("proxy",		ctypes.POINTER(_GDBusProxy)),
	("changed_properties",		ctypes.POINTER(_GVariant)),
	("invalidated_properties",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_signal = _rpythonic_function_(		"g_signal", ctypes.c_void_p, [
	("proxy",		ctypes.POINTER(_GDBusProxy)),
	("sender_name",		ctypes.POINTER(ctypes.c_char)),
	("signal_name",		ctypes.POINTER(ctypes.c_char)),
	("parameters",		ctypes.POINTER(_GVariant)),] )

g_dbus_proxy_get_type = _rpythonic_function_(		"g_dbus_proxy_get_type", ctypes.c_uint, [] )

g_dbus_proxy_new = _rpythonic_function_(		"g_dbus_proxy_new", ctypes.c_void_p, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("flags",		ctypes.c_int),
	("info",		ctypes.POINTER(_GDBusInterfaceInfo)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("interface_name",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_dbus_proxy_new_finish = _rpythonic_function_(		"g_dbus_proxy_new_finish", ctypes.POINTER(_GDBusProxy), [
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_proxy_new_sync = _rpythonic_function_(		"g_dbus_proxy_new_sync", ctypes.POINTER(_GDBusProxy), [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("flags",		ctypes.c_int),
	("info",		ctypes.POINTER(_GDBusInterfaceInfo)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("interface_name",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_proxy_new_for_bus = _rpythonic_function_(		"g_dbus_proxy_new_for_bus", ctypes.c_void_p, [
	("bus_type",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("info",		ctypes.POINTER(_GDBusInterfaceInfo)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("interface_name",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_dbus_proxy_new_for_bus_finish = _rpythonic_function_(		"g_dbus_proxy_new_for_bus_finish", ctypes.POINTER(_GDBusProxy), [
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_proxy_new_for_bus_sync = _rpythonic_function_(		"g_dbus_proxy_new_for_bus_sync", ctypes.POINTER(_GDBusProxy), [
	("bus_type",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("info",		ctypes.POINTER(_GDBusInterfaceInfo)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("interface_name",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_proxy_get_connection = _rpythonic_function_(		"g_dbus_proxy_get_connection", ctypes.POINTER(_GDBusConnection), [
	("proxy",		ctypes.POINTER(_GDBusProxy)),] )

g_dbus_proxy_get_flags = _rpythonic_function_(		"g_dbus_proxy_get_flags", ctypes.c_int, [
	("proxy",		ctypes.POINTER(_GDBusProxy)),] )

g_dbus_proxy_get_name = _rpythonic_function_(		"g_dbus_proxy_get_name", ctypes.POINTER(ctypes.c_char), [
	("proxy",		ctypes.POINTER(_GDBusProxy)),] )

g_dbus_proxy_get_name_owner = _rpythonic_function_(		"g_dbus_proxy_get_name_owner", ctypes.POINTER(ctypes.c_char), [
	("proxy",		ctypes.POINTER(_GDBusProxy)),] )

g_dbus_proxy_get_object_path = _rpythonic_function_(		"g_dbus_proxy_get_object_path", ctypes.POINTER(ctypes.c_char), [
	("proxy",		ctypes.POINTER(_GDBusProxy)),] )

g_dbus_proxy_get_interface_name = _rpythonic_function_(		"g_dbus_proxy_get_interface_name", ctypes.POINTER(ctypes.c_char), [
	("proxy",		ctypes.POINTER(_GDBusProxy)),] )

g_dbus_proxy_get_default_timeout = _rpythonic_function_(		"g_dbus_proxy_get_default_timeout", ctypes.c_int, [
	("proxy",		ctypes.POINTER(_GDBusProxy)),] )

g_dbus_proxy_set_default_timeout = _rpythonic_function_(		"g_dbus_proxy_set_default_timeout", ctypes.c_void_p, [
	("proxy",		ctypes.POINTER(_GDBusProxy)),
	("timeout_msec",		ctypes.c_int),] )

g_dbus_proxy_get_interface_info = _rpythonic_function_(		"g_dbus_proxy_get_interface_info", ctypes.POINTER(_GDBusInterfaceInfo), [
	("proxy",		ctypes.POINTER(_GDBusProxy)),] )

g_dbus_proxy_set_interface_info = _rpythonic_function_(		"g_dbus_proxy_set_interface_info", ctypes.c_void_p, [
	("proxy",		ctypes.POINTER(_GDBusProxy)),
	("info",		ctypes.POINTER(_GDBusInterfaceInfo)),] )

g_dbus_proxy_get_cached_property = _rpythonic_function_(		"g_dbus_proxy_get_cached_property", ctypes.POINTER(_GVariant), [
	("proxy",		ctypes.POINTER(_GDBusProxy)),
	("property_name",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_proxy_set_cached_property = _rpythonic_function_(		"g_dbus_proxy_set_cached_property", ctypes.c_void_p, [
	("proxy",		ctypes.POINTER(_GDBusProxy)),
	("property_name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(_GVariant)),] )

g_dbus_proxy_get_cached_property_names = _rpythonic_function_(		"g_dbus_proxy_get_cached_property_names", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("proxy",		ctypes.POINTER(_GDBusProxy)),] )

g_dbus_proxy_call = _rpythonic_function_(		"g_dbus_proxy_call", ctypes.c_void_p, [
	("proxy",		ctypes.POINTER(_GDBusProxy)),
	("method_name",		ctypes.POINTER(ctypes.c_char)),
	("parameters",		ctypes.POINTER(_GVariant)),
	("flags",		ctypes.c_int),
	("timeout_msec",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_dbus_proxy_call_finish = _rpythonic_function_(		"g_dbus_proxy_call_finish", ctypes.POINTER(_GVariant), [
	("proxy",		ctypes.POINTER(_GDBusProxy)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_proxy_call_sync = _rpythonic_function_(		"g_dbus_proxy_call_sync", ctypes.POINTER(_GVariant), [
	("proxy",		ctypes.POINTER(_GDBusProxy)),
	("method_name",		ctypes.POINTER(ctypes.c_char)),
	("parameters",		ctypes.POINTER(_GVariant)),
	("flags",		ctypes.c_int),
	("timeout_msec",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_proxy_call_with_unix_fd_list = _rpythonic_function_(		"g_dbus_proxy_call_with_unix_fd_list", ctypes.c_void_p, [
	("proxy",		ctypes.POINTER(_GDBusProxy)),
	("method_name",		ctypes.POINTER(ctypes.c_char)),
	("parameters",		ctypes.POINTER(_GVariant)),
	("flags",		ctypes.c_int),
	("timeout_msec",		ctypes.c_int),
	("fd_list",		ctypes.POINTER(_GUnixFDList)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_dbus_proxy_call_with_unix_fd_list_finish = _rpythonic_function_(		"g_dbus_proxy_call_with_unix_fd_list_finish", ctypes.POINTER(_GVariant), [
	("proxy",		ctypes.POINTER(_GDBusProxy)),
	("out_fd_list",		ctypes.POINTER(ctypes.POINTER(_GUnixFDList))),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_proxy_call_with_unix_fd_list_sync = _rpythonic_function_(		"g_dbus_proxy_call_with_unix_fd_list_sync", ctypes.POINTER(_GVariant), [
	("proxy",		ctypes.POINTER(_GDBusProxy)),
	("method_name",		ctypes.POINTER(ctypes.c_char)),
	("parameters",		ctypes.POINTER(_GVariant)),
	("flags",		ctypes.c_int),
	("timeout_msec",		ctypes.c_int),
	("fd_list",		ctypes.POINTER(_GUnixFDList)),
	("out_fd_list",		ctypes.POINTER(ctypes.POINTER(_GUnixFDList))),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_server_get_type = _rpythonic_function_(		"g_dbus_server_get_type", ctypes.c_uint, [] )

g_dbus_server_new_sync = _rpythonic_function_(		"g_dbus_server_new_sync", ctypes.POINTER(_GDBusServer), [
	("address",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("guid",		ctypes.POINTER(ctypes.c_char)),
	("observer",		ctypes.POINTER(_GDBusAuthObserver)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_server_get_client_address = _rpythonic_function_(		"g_dbus_server_get_client_address", ctypes.POINTER(ctypes.c_char), [
	("server",		ctypes.POINTER(_GDBusServer)),] )

g_dbus_server_get_guid = _rpythonic_function_(		"g_dbus_server_get_guid", ctypes.POINTER(ctypes.c_char), [
	("server",		ctypes.POINTER(_GDBusServer)),] )

g_dbus_server_get_flags = _rpythonic_function_(		"g_dbus_server_get_flags", ctypes.c_int, [
	("server",		ctypes.POINTER(_GDBusServer)),] )

g_dbus_server_start = _rpythonic_function_(		"g_dbus_server_start", ctypes.c_void_p, [
	("server",		ctypes.POINTER(_GDBusServer)),] )

g_dbus_server_stop = _rpythonic_function_(		"g_dbus_server_stop", ctypes.c_void_p, [
	("server",		ctypes.POINTER(_GDBusServer)),] )

g_dbus_server_is_active = _rpythonic_function_(		"g_dbus_server_is_active", ctypes.c_int, [
	("server",		ctypes.POINTER(_GDBusServer)),] )

g_dbus_is_guid = _rpythonic_function_(		"g_dbus_is_guid", ctypes.c_int, [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_generate_guid = _rpythonic_function_(		"g_dbus_generate_guid", ctypes.POINTER(ctypes.c_char), [] )

g_dbus_is_name = _rpythonic_function_(		"g_dbus_is_name", ctypes.c_int, [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_is_unique_name = _rpythonic_function_(		"g_dbus_is_unique_name", ctypes.c_int, [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_is_member_name = _rpythonic_function_(		"g_dbus_is_member_name", ctypes.c_int, [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_is_interface_name = _rpythonic_function_(		"g_dbus_is_interface_name", ctypes.c_int, [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_gvariant_to_gvalue = _rpythonic_function_(		"g_dbus_gvariant_to_gvalue", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GVariant)),
	("out_gvalue",		ctypes.POINTER(_GValue)),] )

g_dbus_gvalue_to_gvariant = _rpythonic_function_(		"g_dbus_gvalue_to_gvariant", ctypes.POINTER(_GVariant), [
	("gvalue",		ctypes.POINTER(_GValue)),
	("C_type",		ctypes.POINTER(_GVariantType)),] )

changed = _rpythonic_function_(		"changed", ctypes.c_void_p, [
	("drive",		ctypes.POINTER(_GDrive)),] )

disconnected = _rpythonic_function_(		"disconnected", ctypes.c_void_p, [
	("drive",		ctypes.POINTER(_GDrive)),] )

eject_button = _rpythonic_function_(		"eject_button", ctypes.c_void_p, [
	("drive",		ctypes.POINTER(_GDrive)),] )

has_volumes = _rpythonic_function_(		"has_volumes", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),] )

get_volumes = _rpythonic_function_(		"get_volumes", ctypes.POINTER(_GList), [
	("drive",		ctypes.POINTER(_GDrive)),] )

is_media_removable = _rpythonic_function_(		"is_media_removable", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),] )

has_media = _rpythonic_function_(		"has_media", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),] )

is_media_check_automatic = _rpythonic_function_(		"is_media_check_automatic", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),] )

can_eject = _rpythonic_function_(		"can_eject", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),] )

can_poll_for_media = _rpythonic_function_(		"can_poll_for_media", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),] )

eject = _rpythonic_function_(		"eject", ctypes.c_void_p, [
	("drive",		ctypes.POINTER(_GDrive)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

eject_finish = _rpythonic_function_(		"eject_finish", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

poll_for_media = _rpythonic_function_(		"poll_for_media", ctypes.c_void_p, [
	("drive",		ctypes.POINTER(_GDrive)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

poll_for_media_finish = _rpythonic_function_(		"poll_for_media_finish", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

get_identifier = _rpythonic_function_(		"get_identifier", ctypes.POINTER(ctypes.c_char), [
	("drive",		ctypes.POINTER(_GDrive)),
	("kind",		ctypes.POINTER(ctypes.c_char)),] )

enumerate_identifiers = _rpythonic_function_(		"enumerate_identifiers", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("drive",		ctypes.POINTER(_GDrive)),] )

get_start_stop_type = _rpythonic_function_(		"get_start_stop_type", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),] )

can_start = _rpythonic_function_(		"can_start", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),] )

can_start_degraded = _rpythonic_function_(		"can_start_degraded", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),] )

start = _rpythonic_function_(		"start", ctypes.c_void_p, [
	("drive",		ctypes.POINTER(_GDrive)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

start_finish = _rpythonic_function_(		"start_finish", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

can_stop = _rpythonic_function_(		"can_stop", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),] )

stop = _rpythonic_function_(		"stop", ctypes.c_void_p, [
	("drive",		ctypes.POINTER(_GDrive)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

stop_finish = _rpythonic_function_(		"stop_finish", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

stop_button = _rpythonic_function_(		"stop_button", ctypes.c_void_p, [
	("drive",		ctypes.POINTER(_GDrive)),] )

eject_with_operation = _rpythonic_function_(		"eject_with_operation", ctypes.c_void_p, [
	("drive",		ctypes.POINTER(_GDrive)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

eject_with_operation_finish = _rpythonic_function_(		"eject_with_operation_finish", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_drive_get_type = _rpythonic_function_(		"g_drive_get_type", ctypes.c_uint, [] )

g_drive_get_name = _rpythonic_function_(		"g_drive_get_name", ctypes.POINTER(ctypes.c_char), [
	("drive",		ctypes.POINTER(_GDrive)),] )

g_drive_get_icon = _rpythonic_function_(		"g_drive_get_icon", ctypes.POINTER(_GIcon), [
	("drive",		ctypes.POINTER(_GDrive)),] )

g_drive_has_volumes = _rpythonic_function_(		"g_drive_has_volumes", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),] )

g_drive_get_volumes = _rpythonic_function_(		"g_drive_get_volumes", ctypes.POINTER(_GList), [
	("drive",		ctypes.POINTER(_GDrive)),] )

g_drive_is_media_removable = _rpythonic_function_(		"g_drive_is_media_removable", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),] )

g_drive_has_media = _rpythonic_function_(		"g_drive_has_media", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),] )

g_drive_is_media_check_automatic = _rpythonic_function_(		"g_drive_is_media_check_automatic", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),] )

g_drive_can_poll_for_media = _rpythonic_function_(		"g_drive_can_poll_for_media", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),] )

g_drive_can_eject = _rpythonic_function_(		"g_drive_can_eject", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),] )

g_drive_eject = _rpythonic_function_(		"g_drive_eject", ctypes.c_void_p, [
	("drive",		ctypes.POINTER(_GDrive)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_drive_eject_finish = _rpythonic_function_(		"g_drive_eject_finish", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_drive_poll_for_media = _rpythonic_function_(		"g_drive_poll_for_media", ctypes.c_void_p, [
	("drive",		ctypes.POINTER(_GDrive)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_drive_poll_for_media_finish = _rpythonic_function_(		"g_drive_poll_for_media_finish", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_drive_get_identifier = _rpythonic_function_(		"g_drive_get_identifier", ctypes.POINTER(ctypes.c_char), [
	("drive",		ctypes.POINTER(_GDrive)),
	("kind",		ctypes.POINTER(ctypes.c_char)),] )

g_drive_enumerate_identifiers = _rpythonic_function_(		"g_drive_enumerate_identifiers", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("drive",		ctypes.POINTER(_GDrive)),] )

g_drive_get_start_stop_type = _rpythonic_function_(		"g_drive_get_start_stop_type", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),] )

g_drive_can_start = _rpythonic_function_(		"g_drive_can_start", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),] )

g_drive_can_start_degraded = _rpythonic_function_(		"g_drive_can_start_degraded", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),] )

g_drive_start = _rpythonic_function_(		"g_drive_start", ctypes.c_void_p, [
	("drive",		ctypes.POINTER(_GDrive)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_drive_start_finish = _rpythonic_function_(		"g_drive_start_finish", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_drive_can_stop = _rpythonic_function_(		"g_drive_can_stop", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),] )

g_drive_stop = _rpythonic_function_(		"g_drive_stop", ctypes.c_void_p, [
	("drive",		ctypes.POINTER(_GDrive)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_drive_stop_finish = _rpythonic_function_(		"g_drive_stop_finish", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_drive_eject_with_operation = _rpythonic_function_(		"g_drive_eject_with_operation", ctypes.c_void_p, [
	("drive",		ctypes.POINTER(_GDrive)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_drive_eject_with_operation_finish = _rpythonic_function_(		"g_drive_eject_with_operation_finish", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_icon_get_type = _rpythonic_function_(		"g_icon_get_type", ctypes.c_uint, [] )

hash = _rpythonic_function_(		"hash", ctypes.c_uint, [
	("icon",		ctypes.POINTER(_GIcon)),] )

to_tokens = _rpythonic_function_(		"to_tokens", ctypes.c_int, [
	("icon",		ctypes.POINTER(_GIcon)),
	("tokens",		ctypes.POINTER(_GPtrArray)),
	("out_version",		ctypes.POINTER(ctypes.c_int)),] )

from_tokens = _rpythonic_function_(		"from_tokens", ctypes.POINTER(_GIcon), [
	("tokens",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("num_tokens",		ctypes.c_int),
	("version",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_icon_hash = _rpythonic_function_(		"g_icon_hash", ctypes.c_uint, [("icon",		ctypes.c_void_p)] )

g_icon_equal = _rpythonic_function_(		"g_icon_equal", ctypes.c_int, [
	("icon1",		ctypes.POINTER(_GIcon)),
	("icon2",		ctypes.POINTER(_GIcon)),] )

g_icon_to_string = _rpythonic_function_(		"g_icon_to_string", ctypes.POINTER(ctypes.c_char), [
	("icon",		ctypes.POINTER(_GIcon)),] )

g_icon_new_for_string = _rpythonic_function_(		"g_icon_new_for_string", ctypes.POINTER(_GIcon), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_emblem_get_type = _rpythonic_function_(		"g_emblem_get_type", ctypes.c_uint, [] )

g_emblem_new = _rpythonic_function_(		"g_emblem_new", ctypes.POINTER(_GEmblem), [
	("icon",		ctypes.POINTER(_GIcon)),] )

g_emblem_new_with_origin = _rpythonic_function_(		"g_emblem_new_with_origin", ctypes.POINTER(_GEmblem), [
	("icon",		ctypes.POINTER(_GIcon)),
	("origin",		ctypes.c_int),] )

g_emblem_get_icon = _rpythonic_function_(		"g_emblem_get_icon", ctypes.POINTER(_GIcon), [
	("emblem",		ctypes.POINTER(_GEmblem)),] )

g_emblem_get_origin = _rpythonic_function_(		"g_emblem_get_origin", ctypes.c_int, [
	("emblem",		ctypes.POINTER(_GEmblem)),] )

g_emblemed_icon_get_type = _rpythonic_function_(		"g_emblemed_icon_get_type", ctypes.c_uint, [] )

g_emblemed_icon_new = _rpythonic_function_(		"g_emblemed_icon_new", ctypes.POINTER(_GIcon), [
	("icon",		ctypes.POINTER(_GIcon)),
	("emblem",		ctypes.POINTER(_GEmblem)),] )

g_emblemed_icon_get_icon = _rpythonic_function_(		"g_emblemed_icon_get_icon", ctypes.POINTER(_GIcon), [
	("emblemed",		ctypes.POINTER(_GEmblemedIcon)),] )

g_emblemed_icon_get_emblems = _rpythonic_function_(		"g_emblemed_icon_get_emblems", ctypes.POINTER(_GList), [
	("emblemed",		ctypes.POINTER(_GEmblemedIcon)),] )

g_emblemed_icon_add_emblem = _rpythonic_function_(		"g_emblemed_icon_add_emblem", ctypes.c_void_p, [
	("emblemed",		ctypes.POINTER(_GEmblemedIcon)),
	("emblem",		ctypes.POINTER(_GEmblem)),] )

g_emblemed_icon_clear_emblems = _rpythonic_function_(		"g_emblemed_icon_clear_emblems", ctypes.c_void_p, [
	("emblemed",		ctypes.POINTER(_GEmblemedIcon)),] )

g_file_attribute_info_list_get_type = _rpythonic_function_(		"g_file_attribute_info_list_get_type", ctypes.c_uint, [] )

g_file_attribute_info_list_new = _rpythonic_function_(		"g_file_attribute_info_list_new", ctypes.POINTER(_GFileAttributeInfoList), [] )

g_file_attribute_info_list_ref = _rpythonic_function_(		"g_file_attribute_info_list_ref", ctypes.POINTER(_GFileAttributeInfoList), [
	("C_list",		ctypes.POINTER(_GFileAttributeInfoList)),] )

g_file_attribute_info_list_unref = _rpythonic_function_(		"g_file_attribute_info_list_unref", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GFileAttributeInfoList)),] )

g_file_attribute_info_list_dup = _rpythonic_function_(		"g_file_attribute_info_list_dup", ctypes.POINTER(_GFileAttributeInfoList), [
	("C_list",		ctypes.POINTER(_GFileAttributeInfoList)),] )

g_file_attribute_info_list_lookup = _rpythonic_function_(		"g_file_attribute_info_list_lookup", ctypes.POINTER(_GFileAttributeInfo), [
	("C_list",		ctypes.POINTER(_GFileAttributeInfoList)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_file_attribute_info_list_add = _rpythonic_function_(		"g_file_attribute_info_list_add", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GFileAttributeInfoList)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("C_type",		ctypes.c_int),
	("flags",		ctypes.c_int),] )

g_file_enumerator_next_file = _rpythonic_function_(		"g_file_enumerator_next_file", ctypes.POINTER(_GFileInfo), [
	("enumerator",		ctypes.POINTER(_GFileEnumerator)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

next_file = _rpythonic_function_(		"next_file", ctypes.POINTER(_GFileInfo), [
	("enumerator",		ctypes.POINTER(_GFileEnumerator)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

next_files_async = _rpythonic_function_(		"next_files_async", ctypes.c_void_p, [
	("enumerator",		ctypes.POINTER(_GFileEnumerator)),
	("num_files",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

next_files_finish = _rpythonic_function_(		"next_files_finish", ctypes.POINTER(_GList), [
	("enumerator",		ctypes.POINTER(_GFileEnumerator)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_enumerator_get_type = _rpythonic_function_(		"g_file_enumerator_get_type", ctypes.c_uint, [] )

g_file_enumerator_close = _rpythonic_function_(		"g_file_enumerator_close", ctypes.c_int, [
	("enumerator",		ctypes.POINTER(_GFileEnumerator)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_enumerator_next_files_async = _rpythonic_function_(		"g_file_enumerator_next_files_async", ctypes.c_void_p, [
	("enumerator",		ctypes.POINTER(_GFileEnumerator)),
	("num_files",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_enumerator_next_files_finish = _rpythonic_function_(		"g_file_enumerator_next_files_finish", ctypes.POINTER(_GList), [
	("enumerator",		ctypes.POINTER(_GFileEnumerator)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_enumerator_close_async = _rpythonic_function_(		"g_file_enumerator_close_async", ctypes.c_void_p, [
	("enumerator",		ctypes.POINTER(_GFileEnumerator)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_enumerator_close_finish = _rpythonic_function_(		"g_file_enumerator_close_finish", ctypes.c_int, [
	("enumerator",		ctypes.POINTER(_GFileEnumerator)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_enumerator_is_closed = _rpythonic_function_(		"g_file_enumerator_is_closed", ctypes.c_int, [
	("enumerator",		ctypes.POINTER(_GFileEnumerator)),] )

g_file_enumerator_has_pending = _rpythonic_function_(		"g_file_enumerator_has_pending", ctypes.c_int, [
	("enumerator",		ctypes.POINTER(_GFileEnumerator)),] )

g_file_enumerator_set_pending = _rpythonic_function_(		"g_file_enumerator_set_pending", ctypes.c_void_p, [
	("enumerator",		ctypes.POINTER(_GFileEnumerator)),
	("pending",		ctypes.c_int),] )

g_file_enumerator_get_container = _rpythonic_function_(		"g_file_enumerator_get_container", ctypes.POINTER(_GFile), [
	("enumerator",		ctypes.POINTER(_GFileEnumerator)),] )

is_native = _rpythonic_function_(		"is_native", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),] )

has_uri_scheme = _rpythonic_function_(		"has_uri_scheme", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("uri_scheme",		ctypes.POINTER(ctypes.c_char)),] )

get_uri_scheme = _rpythonic_function_(		"get_uri_scheme", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(_GFile)),] )

get_basename = _rpythonic_function_(		"get_basename", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(_GFile)),] )

get_path = _rpythonic_function_(		"get_path", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(_GFile)),] )

get_uri = _rpythonic_function_(		"get_uri", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(_GFile)),] )

get_parse_name = _rpythonic_function_(		"get_parse_name", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(_GFile)),] )

get_parent = _rpythonic_function_(		"get_parent", ctypes.POINTER(_GFile), [
	("file",		ctypes.POINTER(_GFile)),] )

prefix_matches = _rpythonic_function_(		"prefix_matches", ctypes.c_int, [
	("prefix",		ctypes.POINTER(_GFile)),
	("file",		ctypes.POINTER(_GFile)),] )

get_relative_path = _rpythonic_function_(		"get_relative_path", ctypes.POINTER(ctypes.c_char), [
	("parent",		ctypes.POINTER(_GFile)),
	("descendant",		ctypes.POINTER(_GFile)),] )

resolve_relative_path = _rpythonic_function_(		"resolve_relative_path", ctypes.POINTER(_GFile), [
	("file",		ctypes.POINTER(_GFile)),
	("relative_path",		ctypes.POINTER(ctypes.c_char)),] )

get_child_for_display_name = _rpythonic_function_(		"get_child_for_display_name", ctypes.POINTER(_GFile), [
	("file",		ctypes.POINTER(_GFile)),
	("display_name",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

enumerate_children = _rpythonic_function_(		"enumerate_children", ctypes.POINTER(_GFileEnumerator), [
	("file",		ctypes.POINTER(_GFile)),
	("attributes",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

enumerate_children_async = _rpythonic_function_(		"enumerate_children_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("attributes",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

enumerate_children_finish = _rpythonic_function_(		"enumerate_children_finish", ctypes.POINTER(_GFileEnumerator), [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

query_info = _rpythonic_function_(		"query_info", ctypes.POINTER(_GFileInfo), [
	("file",		ctypes.POINTER(_GFile)),
	("attributes",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

query_info_async = _rpythonic_function_(		"query_info_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("attributes",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

query_info_finish = _rpythonic_function_(		"query_info_finish", ctypes.POINTER(_GFileInfo), [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

query_filesystem_info = _rpythonic_function_(		"query_filesystem_info", ctypes.POINTER(_GFileInfo), [
	("file",		ctypes.POINTER(_GFile)),
	("attributes",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

query_filesystem_info_async = _rpythonic_function_(		"query_filesystem_info_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("attributes",		ctypes.POINTER(ctypes.c_char)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

query_filesystem_info_finish = _rpythonic_function_(		"query_filesystem_info_finish", ctypes.POINTER(_GFileInfo), [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

find_enclosing_mount = _rpythonic_function_(		"find_enclosing_mount", ctypes.POINTER(_GMount), [
	("file",		ctypes.POINTER(_GFile)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

find_enclosing_mount_async = _rpythonic_function_(		"find_enclosing_mount_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

find_enclosing_mount_finish = _rpythonic_function_(		"find_enclosing_mount_finish", ctypes.POINTER(_GMount), [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

set_display_name = _rpythonic_function_(		"set_display_name", ctypes.POINTER(_GFile), [
	("file",		ctypes.POINTER(_GFile)),
	("display_name",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

set_display_name_async = _rpythonic_function_(		"set_display_name_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("display_name",		ctypes.POINTER(ctypes.c_char)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

set_display_name_finish = _rpythonic_function_(		"set_display_name_finish", ctypes.POINTER(_GFile), [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

query_settable_attributes = _rpythonic_function_(		"query_settable_attributes", ctypes.POINTER(_GFileAttributeInfoList), [
	("file",		ctypes.POINTER(_GFile)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

_query_settable_attributes_async = _rpythonic_function_(		"_query_settable_attributes_async", ctypes.c_void_p, [] )

_query_settable_attributes_finish = _rpythonic_function_(		"_query_settable_attributes_finish", ctypes.c_void_p, [] )

query_writable_namespaces = _rpythonic_function_(		"query_writable_namespaces", ctypes.POINTER(_GFileAttributeInfoList), [
	("file",		ctypes.POINTER(_GFile)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

_query_writable_namespaces_async = _rpythonic_function_(		"_query_writable_namespaces_async", ctypes.c_void_p, [] )

_query_writable_namespaces_finish = _rpythonic_function_(		"_query_writable_namespaces_finish", ctypes.c_void_p, [] )

set_attribute = _rpythonic_function_(		"set_attribute", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("C_type",		ctypes.c_int),
	("value_p",		ctypes.POINTER(ctypes.c_void_p)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

set_attributes_from_info = _rpythonic_function_(		"set_attributes_from_info", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("info",		ctypes.POINTER(_GFileInfo)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

set_attributes_async = _rpythonic_function_(		"set_attributes_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("info",		ctypes.POINTER(_GFileInfo)),
	("flags",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

set_attributes_finish = _rpythonic_function_(		"set_attributes_finish", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("info",		ctypes.POINTER(ctypes.POINTER(_GFileInfo))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

append_to = _rpythonic_function_(		"append_to", ctypes.POINTER(_GFileOutputStream), [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

append_to_async = _rpythonic_function_(		"append_to_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

append_to_finish = _rpythonic_function_(		"append_to_finish", ctypes.POINTER(_GFileOutputStream), [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

create = _rpythonic_function_(		"create", ctypes.POINTER(_GFileOutputStream), [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

create_async = _rpythonic_function_(		"create_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

create_finish = _rpythonic_function_(		"create_finish", ctypes.POINTER(_GFileOutputStream), [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

replace = _rpythonic_function_(		"replace", ctypes.POINTER(_GFileOutputStream), [
	("file",		ctypes.POINTER(_GFile)),
	("etag",		ctypes.POINTER(ctypes.c_char)),
	("make_backup",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

replace_async = _rpythonic_function_(		"replace_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("etag",		ctypes.POINTER(ctypes.c_char)),
	("make_backup",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

replace_finish = _rpythonic_function_(		"replace_finish", ctypes.POINTER(_GFileOutputStream), [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

delete_file = _rpythonic_function_(		"delete_file", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

_delete_file_async = _rpythonic_function_(		"_delete_file_async", ctypes.c_void_p, [] )

_delete_file_finish = _rpythonic_function_(		"_delete_file_finish", ctypes.c_void_p, [] )

trash = _rpythonic_function_(		"trash", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

_trash_async = _rpythonic_function_(		"_trash_async", ctypes.c_void_p, [] )

_trash_finish = _rpythonic_function_(		"_trash_finish", ctypes.c_void_p, [] )

make_directory = _rpythonic_function_(		"make_directory", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

_make_directory_async = _rpythonic_function_(		"_make_directory_async", ctypes.c_void_p, [] )

_make_directory_finish = _rpythonic_function_(		"_make_directory_finish", ctypes.c_void_p, [] )

make_symbolic_link = _rpythonic_function_(		"make_symbolic_link", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("symlink_value",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

_make_symbolic_link_async = _rpythonic_function_(		"_make_symbolic_link_async", ctypes.c_void_p, [] )

_make_symbolic_link_finish = _rpythonic_function_(		"_make_symbolic_link_finish", ctypes.c_void_p, [] )

copy = _rpythonic_function_(		"copy", ctypes.c_int, [
	("source",		ctypes.POINTER(_GFile)),
	("destination",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("progress_callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_longlong,ctypes.c_longlong,ctypes.POINTER(ctypes.c_void_p),)),
	("progress_callback_data",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

copy_async = _rpythonic_function_(		"copy_async", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GFile)),
	("destination",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("progress_callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_longlong,ctypes.c_longlong,ctypes.POINTER(ctypes.c_void_p),)),
	("progress_callback_data",		ctypes.POINTER(ctypes.c_void_p)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

copy_finish = _rpythonic_function_(		"copy_finish", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

move = _rpythonic_function_(		"move", ctypes.c_int, [
	("source",		ctypes.POINTER(_GFile)),
	("destination",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("progress_callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_longlong,ctypes.c_longlong,ctypes.POINTER(ctypes.c_void_p),)),
	("progress_callback_data",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

_move_async = _rpythonic_function_(		"_move_async", ctypes.c_void_p, [] )

_move_finish = _rpythonic_function_(		"_move_finish", ctypes.c_void_p, [] )

mount_mountable = _rpythonic_function_(		"mount_mountable", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

mount_mountable_finish = _rpythonic_function_(		"mount_mountable_finish", ctypes.POINTER(_GFile), [
	("file",		ctypes.POINTER(_GFile)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

unmount_mountable = _rpythonic_function_(		"unmount_mountable", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

unmount_mountable_finish = _rpythonic_function_(		"unmount_mountable_finish", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

eject_mountable = _rpythonic_function_(		"eject_mountable", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

eject_mountable_finish = _rpythonic_function_(		"eject_mountable_finish", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

mount_enclosing_volume = _rpythonic_function_(		"mount_enclosing_volume", ctypes.c_void_p, [
	("location",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

mount_enclosing_volume_finish = _rpythonic_function_(		"mount_enclosing_volume_finish", ctypes.c_int, [
	("location",		ctypes.POINTER(_GFile)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

monitor_dir = _rpythonic_function_(		"monitor_dir", ctypes.POINTER(_GFileMonitor), [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

monitor_file = _rpythonic_function_(		"monitor_file", ctypes.POINTER(_GFileMonitor), [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

open_readwrite = _rpythonic_function_(		"open_readwrite", ctypes.POINTER(_GFileIOStream), [
	("file",		ctypes.POINTER(_GFile)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

open_readwrite_async = _rpythonic_function_(		"open_readwrite_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

open_readwrite_finish = _rpythonic_function_(		"open_readwrite_finish", ctypes.POINTER(_GFileIOStream), [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

create_readwrite = _rpythonic_function_(		"create_readwrite", ctypes.POINTER(_GFileIOStream), [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

create_readwrite_async = _rpythonic_function_(		"create_readwrite_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

create_readwrite_finish = _rpythonic_function_(		"create_readwrite_finish", ctypes.POINTER(_GFileIOStream), [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

replace_readwrite = _rpythonic_function_(		"replace_readwrite", ctypes.POINTER(_GFileIOStream), [
	("file",		ctypes.POINTER(_GFile)),
	("etag",		ctypes.POINTER(ctypes.c_char)),
	("make_backup",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

replace_readwrite_async = _rpythonic_function_(		"replace_readwrite_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("etag",		ctypes.POINTER(ctypes.c_char)),
	("make_backup",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

replace_readwrite_finish = _rpythonic_function_(		"replace_readwrite_finish", ctypes.POINTER(_GFileIOStream), [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

start_mountable = _rpythonic_function_(		"start_mountable", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("start_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

start_mountable_finish = _rpythonic_function_(		"start_mountable_finish", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

stop_mountable = _rpythonic_function_(		"stop_mountable", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

stop_mountable_finish = _rpythonic_function_(		"stop_mountable_finish", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

unmount_mountable_with_operation = _rpythonic_function_(		"unmount_mountable_with_operation", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

unmount_mountable_with_operation_finish = _rpythonic_function_(		"unmount_mountable_with_operation_finish", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

eject_mountable_with_operation = _rpythonic_function_(		"eject_mountable_with_operation", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

eject_mountable_with_operation_finish = _rpythonic_function_(		"eject_mountable_with_operation_finish", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

poll_mountable = _rpythonic_function_(		"poll_mountable", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

poll_mountable_finish = _rpythonic_function_(		"poll_mountable_finish", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_get_type = _rpythonic_function_(		"g_file_get_type", ctypes.c_uint, [] )

g_file_new_for_path = _rpythonic_function_(		"g_file_new_for_path", ctypes.POINTER(_GFile), [
	("path",		ctypes.POINTER(ctypes.c_char)),] )

g_file_new_for_uri = _rpythonic_function_(		"g_file_new_for_uri", ctypes.POINTER(_GFile), [
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

g_file_new_for_commandline_arg = _rpythonic_function_(		"g_file_new_for_commandline_arg", ctypes.POINTER(_GFile), [
	("arg",		ctypes.POINTER(ctypes.c_char)),] )

g_file_parse_name = _rpythonic_function_(		"g_file_parse_name", ctypes.POINTER(_GFile), [
	("parse_name",		ctypes.POINTER(ctypes.c_char)),] )

g_file_dup = _rpythonic_function_(		"g_file_dup", ctypes.POINTER(_GFile), [
	("file",		ctypes.POINTER(_GFile)),] )

g_file_hash = _rpythonic_function_(		"g_file_hash", ctypes.c_uint, [("file",		ctypes.c_void_p)] )

g_file_equal = _rpythonic_function_(		"g_file_equal", ctypes.c_int, [
	("file1",		ctypes.POINTER(_GFile)),
	("file2",		ctypes.POINTER(_GFile)),] )

g_file_get_basename = _rpythonic_function_(		"g_file_get_basename", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(_GFile)),] )

g_file_get_path = _rpythonic_function_(		"g_file_get_path", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(_GFile)),] )

g_file_get_uri = _rpythonic_function_(		"g_file_get_uri", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(_GFile)),] )

g_file_get_parse_name = _rpythonic_function_(		"g_file_get_parse_name", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(_GFile)),] )

g_file_get_parent = _rpythonic_function_(		"g_file_get_parent", ctypes.POINTER(_GFile), [
	("file",		ctypes.POINTER(_GFile)),] )

g_file_has_parent = _rpythonic_function_(		"g_file_has_parent", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("parent",		ctypes.POINTER(_GFile)),] )

g_file_get_child = _rpythonic_function_(		"g_file_get_child", ctypes.POINTER(_GFile), [
	("file",		ctypes.POINTER(_GFile)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_file_get_child_for_display_name = _rpythonic_function_(		"g_file_get_child_for_display_name", ctypes.POINTER(_GFile), [
	("file",		ctypes.POINTER(_GFile)),
	("display_name",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_has_prefix = _rpythonic_function_(		"g_file_has_prefix", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("prefix",		ctypes.POINTER(_GFile)),] )

g_file_get_relative_path = _rpythonic_function_(		"g_file_get_relative_path", ctypes.POINTER(ctypes.c_char), [
	("parent",		ctypes.POINTER(_GFile)),
	("descendant",		ctypes.POINTER(_GFile)),] )

g_file_resolve_relative_path = _rpythonic_function_(		"g_file_resolve_relative_path", ctypes.POINTER(_GFile), [
	("file",		ctypes.POINTER(_GFile)),
	("relative_path",		ctypes.POINTER(ctypes.c_char)),] )

g_file_is_native = _rpythonic_function_(		"g_file_is_native", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),] )

g_file_has_uri_scheme = _rpythonic_function_(		"g_file_has_uri_scheme", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("uri_scheme",		ctypes.POINTER(ctypes.c_char)),] )

g_file_get_uri_scheme = _rpythonic_function_(		"g_file_get_uri_scheme", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(_GFile)),] )

g_file_read = _rpythonic_function_(		"g_file_read", ctypes.POINTER(_GFileInputStream), [
	("file",		ctypes.POINTER(_GFile)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_read_async = _rpythonic_function_(		"g_file_read_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_read_finish = _rpythonic_function_(		"g_file_read_finish", ctypes.POINTER(_GFileInputStream), [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_append_to = _rpythonic_function_(		"g_file_append_to", ctypes.POINTER(_GFileOutputStream), [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_create = _rpythonic_function_(		"g_file_create", ctypes.POINTER(_GFileOutputStream), [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_replace = _rpythonic_function_(		"g_file_replace", ctypes.POINTER(_GFileOutputStream), [
	("file",		ctypes.POINTER(_GFile)),
	("etag",		ctypes.POINTER(ctypes.c_char)),
	("make_backup",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_append_to_async = _rpythonic_function_(		"g_file_append_to_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_append_to_finish = _rpythonic_function_(		"g_file_append_to_finish", ctypes.POINTER(_GFileOutputStream), [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_create_async = _rpythonic_function_(		"g_file_create_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_create_finish = _rpythonic_function_(		"g_file_create_finish", ctypes.POINTER(_GFileOutputStream), [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_replace_async = _rpythonic_function_(		"g_file_replace_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("etag",		ctypes.POINTER(ctypes.c_char)),
	("make_backup",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_replace_finish = _rpythonic_function_(		"g_file_replace_finish", ctypes.POINTER(_GFileOutputStream), [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_open_readwrite = _rpythonic_function_(		"g_file_open_readwrite", ctypes.POINTER(_GFileIOStream), [
	("file",		ctypes.POINTER(_GFile)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_open_readwrite_async = _rpythonic_function_(		"g_file_open_readwrite_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_open_readwrite_finish = _rpythonic_function_(		"g_file_open_readwrite_finish", ctypes.POINTER(_GFileIOStream), [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_create_readwrite = _rpythonic_function_(		"g_file_create_readwrite", ctypes.POINTER(_GFileIOStream), [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_create_readwrite_async = _rpythonic_function_(		"g_file_create_readwrite_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_create_readwrite_finish = _rpythonic_function_(		"g_file_create_readwrite_finish", ctypes.POINTER(_GFileIOStream), [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_replace_readwrite = _rpythonic_function_(		"g_file_replace_readwrite", ctypes.POINTER(_GFileIOStream), [
	("file",		ctypes.POINTER(_GFile)),
	("etag",		ctypes.POINTER(ctypes.c_char)),
	("make_backup",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_replace_readwrite_async = _rpythonic_function_(		"g_file_replace_readwrite_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("etag",		ctypes.POINTER(ctypes.c_char)),
	("make_backup",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_replace_readwrite_finish = _rpythonic_function_(		"g_file_replace_readwrite_finish", ctypes.POINTER(_GFileIOStream), [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_query_exists = _rpythonic_function_(		"g_file_query_exists", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("cancellable",		ctypes.POINTER(_GCancellable)),] )

g_file_query_file_type = _rpythonic_function_(		"g_file_query_file_type", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),] )

g_file_query_info = _rpythonic_function_(		"g_file_query_info", ctypes.POINTER(_GFileInfo), [
	("file",		ctypes.POINTER(_GFile)),
	("attributes",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_query_info_async = _rpythonic_function_(		"g_file_query_info_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("attributes",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_query_info_finish = _rpythonic_function_(		"g_file_query_info_finish", ctypes.POINTER(_GFileInfo), [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_query_filesystem_info = _rpythonic_function_(		"g_file_query_filesystem_info", ctypes.POINTER(_GFileInfo), [
	("file",		ctypes.POINTER(_GFile)),
	("attributes",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_query_filesystem_info_async = _rpythonic_function_(		"g_file_query_filesystem_info_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("attributes",		ctypes.POINTER(ctypes.c_char)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_query_filesystem_info_finish = _rpythonic_function_(		"g_file_query_filesystem_info_finish", ctypes.POINTER(_GFileInfo), [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_find_enclosing_mount = _rpythonic_function_(		"g_file_find_enclosing_mount", ctypes.POINTER(_GMount), [
	("file",		ctypes.POINTER(_GFile)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_find_enclosing_mount_async = _rpythonic_function_(		"g_file_find_enclosing_mount_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_find_enclosing_mount_finish = _rpythonic_function_(		"g_file_find_enclosing_mount_finish", ctypes.POINTER(_GMount), [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_enumerate_children = _rpythonic_function_(		"g_file_enumerate_children", ctypes.POINTER(_GFileEnumerator), [
	("file",		ctypes.POINTER(_GFile)),
	("attributes",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_enumerate_children_async = _rpythonic_function_(		"g_file_enumerate_children_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("attributes",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_enumerate_children_finish = _rpythonic_function_(		"g_file_enumerate_children_finish", ctypes.POINTER(_GFileEnumerator), [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_set_display_name = _rpythonic_function_(		"g_file_set_display_name", ctypes.POINTER(_GFile), [
	("file",		ctypes.POINTER(_GFile)),
	("display_name",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_set_display_name_async = _rpythonic_function_(		"g_file_set_display_name_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("display_name",		ctypes.POINTER(ctypes.c_char)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_set_display_name_finish = _rpythonic_function_(		"g_file_set_display_name_finish", ctypes.POINTER(_GFile), [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_delete = _rpythonic_function_(		"g_file_delete", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_trash = _rpythonic_function_(		"g_file_trash", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_copy = _rpythonic_function_(		"g_file_copy", ctypes.c_int, [
	("source",		ctypes.POINTER(_GFile)),
	("destination",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("progress_callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_longlong,ctypes.c_longlong,ctypes.POINTER(ctypes.c_void_p),)),
	("progress_callback_data",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_copy_async = _rpythonic_function_(		"g_file_copy_async", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GFile)),
	("destination",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("progress_callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_longlong,ctypes.c_longlong,ctypes.POINTER(ctypes.c_void_p),)),
	("progress_callback_data",		ctypes.POINTER(ctypes.c_void_p)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_copy_finish = _rpythonic_function_(		"g_file_copy_finish", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_move = _rpythonic_function_(		"g_file_move", ctypes.c_int, [
	("source",		ctypes.POINTER(_GFile)),
	("destination",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("progress_callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_longlong,ctypes.c_longlong,ctypes.POINTER(ctypes.c_void_p),)),
	("progress_callback_data",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_make_directory = _rpythonic_function_(		"g_file_make_directory", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_make_directory_with_parents = _rpythonic_function_(		"g_file_make_directory_with_parents", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_make_symbolic_link = _rpythonic_function_(		"g_file_make_symbolic_link", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("symlink_value",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_query_settable_attributes = _rpythonic_function_(		"g_file_query_settable_attributes", ctypes.POINTER(_GFileAttributeInfoList), [
	("file",		ctypes.POINTER(_GFile)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_query_writable_namespaces = _rpythonic_function_(		"g_file_query_writable_namespaces", ctypes.POINTER(_GFileAttributeInfoList), [
	("file",		ctypes.POINTER(_GFile)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_set_attribute = _rpythonic_function_(		"g_file_set_attribute", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("C_type",		ctypes.c_int),
	("value_p",		ctypes.POINTER(ctypes.c_void_p)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_set_attributes_from_info = _rpythonic_function_(		"g_file_set_attributes_from_info", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("info",		ctypes.POINTER(_GFileInfo)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_set_attributes_async = _rpythonic_function_(		"g_file_set_attributes_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("info",		ctypes.POINTER(_GFileInfo)),
	("flags",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_set_attributes_finish = _rpythonic_function_(		"g_file_set_attributes_finish", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("info",		ctypes.POINTER(ctypes.POINTER(_GFileInfo))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_set_attribute_string = _rpythonic_function_(		"g_file_set_attribute_string", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_set_attribute_byte_string = _rpythonic_function_(		"g_file_set_attribute_byte_string", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_set_attribute_uint32 = _rpythonic_function_(		"g_file_set_attribute_uint32", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_uint),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_set_attribute_int32 = _rpythonic_function_(		"g_file_set_attribute_int32", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_set_attribute_uint64 = _rpythonic_function_(		"g_file_set_attribute_uint64", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_ulonglong),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_set_attribute_int64 = _rpythonic_function_(		"g_file_set_attribute_int64", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_longlong),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_mount_enclosing_volume = _rpythonic_function_(		"g_file_mount_enclosing_volume", ctypes.c_void_p, [
	("location",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_mount_enclosing_volume_finish = _rpythonic_function_(		"g_file_mount_enclosing_volume_finish", ctypes.c_int, [
	("location",		ctypes.POINTER(_GFile)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_mount_mountable = _rpythonic_function_(		"g_file_mount_mountable", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_mount_mountable_finish = _rpythonic_function_(		"g_file_mount_mountable_finish", ctypes.POINTER(_GFile), [
	("file",		ctypes.POINTER(_GFile)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_unmount_mountable = _rpythonic_function_(		"g_file_unmount_mountable", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_unmount_mountable_finish = _rpythonic_function_(		"g_file_unmount_mountable_finish", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_unmount_mountable_with_operation = _rpythonic_function_(		"g_file_unmount_mountable_with_operation", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_unmount_mountable_with_operation_finish = _rpythonic_function_(		"g_file_unmount_mountable_with_operation_finish", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_eject_mountable = _rpythonic_function_(		"g_file_eject_mountable", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_eject_mountable_finish = _rpythonic_function_(		"g_file_eject_mountable_finish", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_eject_mountable_with_operation = _rpythonic_function_(		"g_file_eject_mountable_with_operation", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_eject_mountable_with_operation_finish = _rpythonic_function_(		"g_file_eject_mountable_with_operation_finish", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_copy_attributes = _rpythonic_function_(		"g_file_copy_attributes", ctypes.c_int, [
	("source",		ctypes.POINTER(_GFile)),
	("destination",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_monitor_directory = _rpythonic_function_(		"g_file_monitor_directory", ctypes.POINTER(_GFileMonitor), [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_monitor_file = _rpythonic_function_(		"g_file_monitor_file", ctypes.POINTER(_GFileMonitor), [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_monitor = _rpythonic_function_(		"g_file_monitor", ctypes.POINTER(_GFileMonitor), [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_start_mountable = _rpythonic_function_(		"g_file_start_mountable", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("start_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_start_mountable_finish = _rpythonic_function_(		"g_file_start_mountable_finish", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_stop_mountable = _rpythonic_function_(		"g_file_stop_mountable", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_stop_mountable_finish = _rpythonic_function_(		"g_file_stop_mountable_finish", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_poll_mountable = _rpythonic_function_(		"g_file_poll_mountable", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_poll_mountable_finish = _rpythonic_function_(		"g_file_poll_mountable_finish", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_query_default_handler = _rpythonic_function_(		"g_file_query_default_handler", ctypes.POINTER(_GAppInfo), [
	("file",		ctypes.POINTER(_GFile)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_load_contents = _rpythonic_function_(		"g_file_load_contents", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("contents",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("length",		ctypes.POINTER(ctypes.c_uint)),
	("etag_out",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_load_contents_async = _rpythonic_function_(		"g_file_load_contents_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_load_contents_finish = _rpythonic_function_(		"g_file_load_contents_finish", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("contents",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("length",		ctypes.POINTER(ctypes.c_uint)),
	("etag_out",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_load_partial_contents_async = _rpythonic_function_(		"g_file_load_partial_contents_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("read_more_callback",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_char),ctypes.c_longlong,ctypes.POINTER(ctypes.c_void_p),)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_load_partial_contents_finish = _rpythonic_function_(		"g_file_load_partial_contents_finish", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("contents",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("length",		ctypes.POINTER(ctypes.c_uint)),
	("etag_out",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_replace_contents = _rpythonic_function_(		"g_file_replace_contents", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("contents",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_uint),
	("etag",		ctypes.POINTER(ctypes.c_char)),
	("make_backup",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("new_etag",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_replace_contents_async = _rpythonic_function_(		"g_file_replace_contents_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("contents",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_uint),
	("etag",		ctypes.POINTER(ctypes.c_char)),
	("make_backup",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_replace_contents_finish = _rpythonic_function_(		"g_file_replace_contents_finish", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("new_etag",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_supports_thread_contexts = _rpythonic_function_(		"g_file_supports_thread_contexts", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),] )

g_file_icon_get_type = _rpythonic_function_(		"g_file_icon_get_type", ctypes.c_uint, [] )

g_file_icon_new = _rpythonic_function_(		"g_file_icon_new", ctypes.POINTER(_GIcon), [
	("file",		ctypes.POINTER(_GFile)),] )

g_file_icon_get_file = _rpythonic_function_(		"g_file_icon_get_file", ctypes.POINTER(_GFile), [
	("icon",		ctypes.POINTER(_GFileIcon)),] )

g_file_info_get_type = _rpythonic_function_(		"g_file_info_get_type", ctypes.c_uint, [] )

g_file_info_new = _rpythonic_function_(		"g_file_info_new", ctypes.POINTER(_GFileInfo), [] )

g_file_info_dup = _rpythonic_function_(		"g_file_info_dup", ctypes.POINTER(_GFileInfo), [
	("other",		ctypes.POINTER(_GFileInfo)),] )

g_file_info_copy_into = _rpythonic_function_(		"g_file_info_copy_into", ctypes.c_void_p, [
	("src_info",		ctypes.POINTER(_GFileInfo)),
	("dest_info",		ctypes.POINTER(_GFileInfo)),] )

g_file_info_has_attribute = _rpythonic_function_(		"g_file_info_has_attribute", ctypes.c_int, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),] )

g_file_info_has_namespace = _rpythonic_function_(		"g_file_info_has_namespace", ctypes.c_int, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("name_space",		ctypes.POINTER(ctypes.c_char)),] )

g_file_info_list_attributes = _rpythonic_function_(		"g_file_info_list_attributes", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("info",		ctypes.POINTER(_GFileInfo)),
	("name_space",		ctypes.POINTER(ctypes.c_char)),] )

g_file_info_get_attribute_data = _rpythonic_function_(		"g_file_info_get_attribute_data", ctypes.c_int, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("C_type",		ctypes.POINTER(ctypes.c_int)),
	("value_pp",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("status",		ctypes.POINTER(ctypes.c_int)),] )

g_file_info_get_attribute_type = _rpythonic_function_(		"g_file_info_get_attribute_type", ctypes.c_int, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),] )

g_file_info_remove_attribute = _rpythonic_function_(		"g_file_info_remove_attribute", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),] )

g_file_info_get_attribute_status = _rpythonic_function_(		"g_file_info_get_attribute_status", ctypes.c_int, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),] )

g_file_info_set_attribute_status = _rpythonic_function_(		"g_file_info_set_attribute_status", ctypes.c_int, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("status",		ctypes.c_int),] )

g_file_info_get_attribute_as_string = _rpythonic_function_(		"g_file_info_get_attribute_as_string", ctypes.POINTER(ctypes.c_char), [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),] )

g_file_info_get_attribute_string = _rpythonic_function_(		"g_file_info_get_attribute_string", ctypes.POINTER(ctypes.c_char), [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),] )

g_file_info_get_attribute_byte_string = _rpythonic_function_(		"g_file_info_get_attribute_byte_string", ctypes.POINTER(ctypes.c_char), [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),] )

g_file_info_get_attribute_boolean = _rpythonic_function_(		"g_file_info_get_attribute_boolean", ctypes.c_int, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),] )

g_file_info_get_attribute_uint32 = _rpythonic_function_(		"g_file_info_get_attribute_uint32", ctypes.c_uint, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),] )

g_file_info_get_attribute_int32 = _rpythonic_function_(		"g_file_info_get_attribute_int32", ctypes.c_int, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),] )

g_file_info_get_attribute_uint64 = _rpythonic_function_(		"g_file_info_get_attribute_uint64", ctypes.c_ulonglong, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),] )

g_file_info_get_attribute_int64 = _rpythonic_function_(		"g_file_info_get_attribute_int64", ctypes.c_longlong, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),] )

g_file_info_get_attribute_object = _rpythonic_function_(		"g_file_info_get_attribute_object", ctypes.POINTER(_GObject), [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),] )

g_file_info_get_attribute_stringv = _rpythonic_function_(		"g_file_info_get_attribute_stringv", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),] )

g_file_info_set_attribute = _rpythonic_function_(		"g_file_info_set_attribute", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("C_type",		ctypes.c_int),
	("value_p",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_info_set_attribute_string = _rpythonic_function_(		"g_file_info_set_attribute_string", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("attr_value",		ctypes.POINTER(ctypes.c_char)),] )

g_file_info_set_attribute_byte_string = _rpythonic_function_(		"g_file_info_set_attribute_byte_string", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("attr_value",		ctypes.POINTER(ctypes.c_char)),] )

g_file_info_set_attribute_boolean = _rpythonic_function_(		"g_file_info_set_attribute_boolean", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("attr_value",		ctypes.c_int),] )

g_file_info_set_attribute_uint32 = _rpythonic_function_(		"g_file_info_set_attribute_uint32", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("attr_value",		ctypes.c_uint),] )

g_file_info_set_attribute_int32 = _rpythonic_function_(		"g_file_info_set_attribute_int32", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("attr_value",		ctypes.c_int),] )

g_file_info_set_attribute_uint64 = _rpythonic_function_(		"g_file_info_set_attribute_uint64", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("attr_value",		ctypes.c_ulonglong),] )

g_file_info_set_attribute_int64 = _rpythonic_function_(		"g_file_info_set_attribute_int64", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("attr_value",		ctypes.c_longlong),] )

g_file_info_set_attribute_object = _rpythonic_function_(		"g_file_info_set_attribute_object", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("attr_value",		ctypes.POINTER(_GObject)),] )

g_file_info_set_attribute_stringv = _rpythonic_function_(		"g_file_info_set_attribute_stringv", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("attr_value",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_file_info_clear_status = _rpythonic_function_(		"g_file_info_clear_status", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),] )

g_file_info_get_file_type = _rpythonic_function_(		"g_file_info_get_file_type", ctypes.c_int, [
	("info",		ctypes.POINTER(_GFileInfo)),] )

g_file_info_get_is_hidden = _rpythonic_function_(		"g_file_info_get_is_hidden", ctypes.c_int, [
	("info",		ctypes.POINTER(_GFileInfo)),] )

g_file_info_get_is_backup = _rpythonic_function_(		"g_file_info_get_is_backup", ctypes.c_int, [
	("info",		ctypes.POINTER(_GFileInfo)),] )

g_file_info_get_is_symlink = _rpythonic_function_(		"g_file_info_get_is_symlink", ctypes.c_int, [
	("info",		ctypes.POINTER(_GFileInfo)),] )

g_file_info_get_name = _rpythonic_function_(		"g_file_info_get_name", ctypes.POINTER(ctypes.c_char), [
	("info",		ctypes.POINTER(_GFileInfo)),] )

g_file_info_get_display_name = _rpythonic_function_(		"g_file_info_get_display_name", ctypes.POINTER(ctypes.c_char), [
	("info",		ctypes.POINTER(_GFileInfo)),] )

g_file_info_get_edit_name = _rpythonic_function_(		"g_file_info_get_edit_name", ctypes.POINTER(ctypes.c_char), [
	("info",		ctypes.POINTER(_GFileInfo)),] )

g_file_info_get_icon = _rpythonic_function_(		"g_file_info_get_icon", ctypes.POINTER(_GIcon), [
	("info",		ctypes.POINTER(_GFileInfo)),] )

g_file_info_get_content_type = _rpythonic_function_(		"g_file_info_get_content_type", ctypes.POINTER(ctypes.c_char), [
	("info",		ctypes.POINTER(_GFileInfo)),] )

g_file_info_get_size = _rpythonic_function_(		"g_file_info_get_size", ctypes.c_longlong, [
	("info",		ctypes.POINTER(_GFileInfo)),] )

g_file_info_get_modification_time = _rpythonic_function_(		"g_file_info_get_modification_time", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("result",		ctypes.POINTER(_GTimeVal)),] )

g_file_info_get_symlink_target = _rpythonic_function_(		"g_file_info_get_symlink_target", ctypes.POINTER(ctypes.c_char), [
	("info",		ctypes.POINTER(_GFileInfo)),] )

g_file_info_get_etag = _rpythonic_function_(		"g_file_info_get_etag", ctypes.POINTER(ctypes.c_char), [
	("info",		ctypes.POINTER(_GFileInfo)),] )

g_file_info_get_sort_order = _rpythonic_function_(		"g_file_info_get_sort_order", ctypes.c_int, [
	("info",		ctypes.POINTER(_GFileInfo)),] )

g_file_info_set_attribute_mask = _rpythonic_function_(		"g_file_info_set_attribute_mask", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("mask",		ctypes.POINTER(_GFileAttributeMatcher)),] )

g_file_info_unset_attribute_mask = _rpythonic_function_(		"g_file_info_unset_attribute_mask", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),] )

g_file_info_set_file_type = _rpythonic_function_(		"g_file_info_set_file_type", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("C_type",		ctypes.c_int),] )

g_file_info_set_is_hidden = _rpythonic_function_(		"g_file_info_set_is_hidden", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("is_hidden",		ctypes.c_int),] )

g_file_info_set_is_symlink = _rpythonic_function_(		"g_file_info_set_is_symlink", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("is_symlink",		ctypes.c_int),] )

g_file_info_set_name = _rpythonic_function_(		"g_file_info_set_name", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_file_info_set_display_name = _rpythonic_function_(		"g_file_info_set_display_name", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("display_name",		ctypes.POINTER(ctypes.c_char)),] )

g_file_info_set_edit_name = _rpythonic_function_(		"g_file_info_set_edit_name", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("edit_name",		ctypes.POINTER(ctypes.c_char)),] )

g_file_info_set_icon = _rpythonic_function_(		"g_file_info_set_icon", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("icon",		ctypes.POINTER(_GIcon)),] )

g_file_info_set_content_type = _rpythonic_function_(		"g_file_info_set_content_type", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("content_type",		ctypes.POINTER(ctypes.c_char)),] )

g_file_info_set_size = _rpythonic_function_(		"g_file_info_set_size", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("size",		ctypes.c_longlong),] )

g_file_info_set_modification_time = _rpythonic_function_(		"g_file_info_set_modification_time", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("mtime",		ctypes.POINTER(_GTimeVal)),] )

g_file_info_set_symlink_target = _rpythonic_function_(		"g_file_info_set_symlink_target", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("symlink_target",		ctypes.POINTER(ctypes.c_char)),] )

g_file_info_set_sort_order = _rpythonic_function_(		"g_file_info_set_sort_order", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("sort_order",		ctypes.c_int),] )

g_file_attribute_matcher_get_type = _rpythonic_function_(		"g_file_attribute_matcher_get_type", ctypes.c_uint, [] )

g_file_attribute_matcher_new = _rpythonic_function_(		"g_file_attribute_matcher_new", ctypes.POINTER(_GFileAttributeMatcher), [
	("attributes",		ctypes.POINTER(ctypes.c_char)),] )

g_file_attribute_matcher_ref = _rpythonic_function_(		"g_file_attribute_matcher_ref", ctypes.POINTER(_GFileAttributeMatcher), [
	("matcher",		ctypes.POINTER(_GFileAttributeMatcher)),] )

g_file_attribute_matcher_unref = _rpythonic_function_(		"g_file_attribute_matcher_unref", ctypes.c_void_p, [
	("matcher",		ctypes.POINTER(_GFileAttributeMatcher)),] )

g_file_attribute_matcher_matches = _rpythonic_function_(		"g_file_attribute_matcher_matches", ctypes.c_int, [
	("matcher",		ctypes.POINTER(_GFileAttributeMatcher)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),] )

g_file_attribute_matcher_matches_only = _rpythonic_function_(		"g_file_attribute_matcher_matches_only", ctypes.c_int, [
	("matcher",		ctypes.POINTER(_GFileAttributeMatcher)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),] )

g_file_attribute_matcher_enumerate_namespace = _rpythonic_function_(		"g_file_attribute_matcher_enumerate_namespace", ctypes.c_int, [
	("matcher",		ctypes.POINTER(_GFileAttributeMatcher)),
	("ns",		ctypes.POINTER(ctypes.c_char)),] )

g_file_attribute_matcher_enumerate_next = _rpythonic_function_(		"g_file_attribute_matcher_enumerate_next", ctypes.POINTER(ctypes.c_char), [
	("matcher",		ctypes.POINTER(_GFileAttributeMatcher)),] )

tell = _rpythonic_function_(		"tell", ctypes.c_longlong, [
	("stream",		ctypes.POINTER(_GFileInputStream)),] )

can_seek = _rpythonic_function_(		"can_seek", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GFileInputStream)),] )

seek = _rpythonic_function_(		"seek", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GFileInputStream)),
	("offset",		ctypes.c_longlong),
	("C_type",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_input_stream_query_info = _rpythonic_function_(		"g_file_input_stream_query_info", ctypes.POINTER(_GFileInfo), [
	("stream",		ctypes.POINTER(_GFileInputStream)),
	("attributes",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_input_stream_get_type = _rpythonic_function_(		"g_file_input_stream_get_type", ctypes.c_uint, [] )

g_file_input_stream_query_info_async = _rpythonic_function_(		"g_file_input_stream_query_info_async", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GFileInputStream)),
	("attributes",		ctypes.POINTER(ctypes.c_char)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_input_stream_query_info_finish = _rpythonic_function_(		"g_file_input_stream_query_info_finish", ctypes.POINTER(_GFileInfo), [
	("stream",		ctypes.POINTER(_GFileInputStream)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_error_quark = _rpythonic_function_(		"g_io_error_quark", ctypes.c_uint, [] )

g_io_error_from_errno = _rpythonic_function_(		"g_io_error_from_errno", ctypes.c_int, [
	("err_no",		ctypes.c_int),] )

get_input_stream = _rpythonic_function_(		"get_input_stream", ctypes.POINTER(_GInputStream), [
	("stream",		ctypes.POINTER(_GIOStream)),] )

get_output_stream = _rpythonic_function_(		"get_output_stream", ctypes.POINTER(_GOutputStream), [
	("stream",		ctypes.POINTER(_GIOStream)),] )

_g_reserved9 = _rpythonic_function_(		"_g_reserved9", ctypes.c_void_p, [] )

_g_reserved10 = _rpythonic_function_(		"_g_reserved10", ctypes.c_void_p, [] )

g_io_stream_get_input_stream = _rpythonic_function_(		"g_io_stream_get_input_stream", ctypes.POINTER(_GInputStream), [
	("stream",		ctypes.POINTER(_GIOStream)),] )

g_io_stream_get_output_stream = _rpythonic_function_(		"g_io_stream_get_output_stream", ctypes.POINTER(_GOutputStream), [
	("stream",		ctypes.POINTER(_GIOStream)),] )

g_io_stream_get_type = _rpythonic_function_(		"g_io_stream_get_type", ctypes.c_uint, [] )

g_io_stream_splice_async = _rpythonic_function_(		"g_io_stream_splice_async", ctypes.c_void_p, [
	("stream1",		ctypes.POINTER(_GIOStream)),
	("stream2",		ctypes.POINTER(_GIOStream)),
	("flags",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_io_stream_splice_finish = _rpythonic_function_(		"g_io_stream_splice_finish", ctypes.c_int, [
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_stream_close = _rpythonic_function_(		"g_io_stream_close", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GIOStream)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_stream_close_async = _rpythonic_function_(		"g_io_stream_close_async", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GIOStream)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_io_stream_close_finish = _rpythonic_function_(		"g_io_stream_close_finish", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GIOStream)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_stream_is_closed = _rpythonic_function_(		"g_io_stream_is_closed", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GIOStream)),] )

g_io_stream_has_pending = _rpythonic_function_(		"g_io_stream_has_pending", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GIOStream)),] )

g_io_stream_set_pending = _rpythonic_function_(		"g_io_stream_set_pending", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GIOStream)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_stream_clear_pending = _rpythonic_function_(		"g_io_stream_clear_pending", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GIOStream)),] )

can_truncate = _rpythonic_function_(		"can_truncate", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GFileIOStream)),] )

truncate_fn = _rpythonic_function_(		"truncate_fn", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GFileIOStream)),
	("size",		ctypes.c_longlong),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

get_etag = _rpythonic_function_(		"get_etag", ctypes.POINTER(ctypes.c_char), [
	("stream",		ctypes.POINTER(_GFileIOStream)),] )

g_file_io_stream_get_type = _rpythonic_function_(		"g_file_io_stream_get_type", ctypes.c_uint, [] )

g_file_io_stream_query_info = _rpythonic_function_(		"g_file_io_stream_query_info", ctypes.POINTER(_GFileInfo), [
	("stream",		ctypes.POINTER(_GFileIOStream)),
	("attributes",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_io_stream_query_info_async = _rpythonic_function_(		"g_file_io_stream_query_info_async", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GFileIOStream)),
	("attributes",		ctypes.POINTER(ctypes.c_char)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_io_stream_query_info_finish = _rpythonic_function_(		"g_file_io_stream_query_info_finish", ctypes.POINTER(_GFileInfo), [
	("stream",		ctypes.POINTER(_GFileIOStream)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_io_stream_get_etag = _rpythonic_function_(		"g_file_io_stream_get_etag", ctypes.POINTER(ctypes.c_char), [
	("stream",		ctypes.POINTER(_GFileIOStream)),] )

cancel = _rpythonic_function_(		"cancel", ctypes.c_int, [
	("monitor",		ctypes.POINTER(_GFileMonitor)),] )

g_file_monitor_get_type = _rpythonic_function_(		"g_file_monitor_get_type", ctypes.c_uint, [] )

g_file_monitor_cancel = _rpythonic_function_(		"g_file_monitor_cancel", ctypes.c_int, [
	("monitor",		ctypes.POINTER(_GFileMonitor)),] )

g_file_monitor_is_cancelled = _rpythonic_function_(		"g_file_monitor_is_cancelled", ctypes.c_int, [
	("monitor",		ctypes.POINTER(_GFileMonitor)),] )

g_file_monitor_set_rate_limit = _rpythonic_function_(		"g_file_monitor_set_rate_limit", ctypes.c_void_p, [
	("monitor",		ctypes.POINTER(_GFileMonitor)),
	("limit_msecs",		ctypes.c_int),] )

g_file_monitor_emit_event = _rpythonic_function_(		"g_file_monitor_emit_event", ctypes.c_void_p, [
	("monitor",		ctypes.POINTER(_GFileMonitor)),
	("child",		ctypes.POINTER(_GFile)),
	("other_file",		ctypes.POINTER(_GFile)),
	("event_type",		ctypes.c_int),] )

got_completion_data = _rpythonic_function_(		"got_completion_data", ctypes.c_void_p, [
	("filename_completer",		ctypes.POINTER(_GFilenameCompleter)),] )

g_filename_completer_get_type = _rpythonic_function_(		"g_filename_completer_get_type", ctypes.c_uint, [] )

g_filename_completer_new = _rpythonic_function_(		"g_filename_completer_new", ctypes.POINTER(_GFilenameCompleter), [] )

g_filename_completer_get_completion_suffix = _rpythonic_function_(		"g_filename_completer_get_completion_suffix", ctypes.POINTER(ctypes.c_char), [
	("completer",		ctypes.POINTER(_GFilenameCompleter)),
	("initial_text",		ctypes.POINTER(ctypes.c_char)),] )

g_filename_completer_get_completions = _rpythonic_function_(		"g_filename_completer_get_completions", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("completer",		ctypes.POINTER(_GFilenameCompleter)),
	("initial_text",		ctypes.POINTER(ctypes.c_char)),] )

g_filename_completer_set_dirs_only = _rpythonic_function_(		"g_filename_completer_set_dirs_only", ctypes.c_void_p, [
	("completer",		ctypes.POINTER(_GFilenameCompleter)),
	("dirs_only",		ctypes.c_int),] )

g_file_output_stream_query_info = _rpythonic_function_(		"g_file_output_stream_query_info", ctypes.POINTER(_GFileInfo), [
	("stream",		ctypes.POINTER(_GFileOutputStream)),
	("attributes",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_output_stream_query_info_async = _rpythonic_function_(		"g_file_output_stream_query_info_async", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GFileOutputStream)),
	("attributes",		ctypes.POINTER(ctypes.c_char)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_output_stream_get_type = _rpythonic_function_(		"g_file_output_stream_get_type", ctypes.c_uint, [] )

g_file_output_stream_query_info_finish = _rpythonic_function_(		"g_file_output_stream_query_info_finish", ctypes.POINTER(_GFileInfo), [
	("stream",		ctypes.POINTER(_GFileOutputStream)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_output_stream_get_etag = _rpythonic_function_(		"g_file_output_stream_get_etag", ctypes.POINTER(ctypes.c_char), [
	("stream",		ctypes.POINTER(_GFileOutputStream)),] )

to_string = _rpythonic_function_(		"to_string", ctypes.POINTER(ctypes.c_char), [
	("address",		ctypes.POINTER(_GInetAddress)),] )

g_inet_address_get_type = _rpythonic_function_(		"g_inet_address_get_type", ctypes.c_uint, [] )

to_bytes = _rpythonic_function_(		"to_bytes", ctypes.POINTER(ctypes.c_ubyte), [
	("address",		ctypes.POINTER(_GInetAddress)),] )

g_inet_address_new_from_string = _rpythonic_function_(		"g_inet_address_new_from_string", ctypes.POINTER(_GInetAddress), [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_inet_address_new_from_bytes = _rpythonic_function_(		"g_inet_address_new_from_bytes", ctypes.POINTER(_GInetAddress), [
	("bytes",		ctypes.POINTER(ctypes.c_ubyte)),
	("family",		ctypes.c_int),] )

g_inet_address_new_loopback = _rpythonic_function_(		"g_inet_address_new_loopback", ctypes.POINTER(_GInetAddress), [
	("family",		ctypes.c_int),] )

g_inet_address_new_any = _rpythonic_function_(		"g_inet_address_new_any", ctypes.POINTER(_GInetAddress), [
	("family",		ctypes.c_int),] )

g_inet_address_equal = _rpythonic_function_(		"g_inet_address_equal", ctypes.c_int, [
	("address",		ctypes.POINTER(_GInetAddress)),
	("other_address",		ctypes.POINTER(_GInetAddress)),] )

g_inet_address_to_string = _rpythonic_function_(		"g_inet_address_to_string", ctypes.POINTER(ctypes.c_char), [
	("address",		ctypes.POINTER(_GInetAddress)),] )

g_inet_address_to_bytes = _rpythonic_function_(		"g_inet_address_to_bytes", ctypes.POINTER(ctypes.c_ubyte), [
	("address",		ctypes.POINTER(_GInetAddress)),] )

g_inet_address_get_native_size = _rpythonic_function_(		"g_inet_address_get_native_size", ctypes.c_uint, [
	("address",		ctypes.POINTER(_GInetAddress)),] )

g_inet_address_get_family = _rpythonic_function_(		"g_inet_address_get_family", ctypes.c_int, [
	("address",		ctypes.POINTER(_GInetAddress)),] )

g_inet_address_get_is_any = _rpythonic_function_(		"g_inet_address_get_is_any", ctypes.c_int, [
	("address",		ctypes.POINTER(_GInetAddress)),] )

g_inet_address_get_is_loopback = _rpythonic_function_(		"g_inet_address_get_is_loopback", ctypes.c_int, [
	("address",		ctypes.POINTER(_GInetAddress)),] )

g_inet_address_get_is_link_local = _rpythonic_function_(		"g_inet_address_get_is_link_local", ctypes.c_int, [
	("address",		ctypes.POINTER(_GInetAddress)),] )

g_inet_address_get_is_site_local = _rpythonic_function_(		"g_inet_address_get_is_site_local", ctypes.c_int, [
	("address",		ctypes.POINTER(_GInetAddress)),] )

g_inet_address_get_is_multicast = _rpythonic_function_(		"g_inet_address_get_is_multicast", ctypes.c_int, [
	("address",		ctypes.POINTER(_GInetAddress)),] )

g_inet_address_get_is_mc_global = _rpythonic_function_(		"g_inet_address_get_is_mc_global", ctypes.c_int, [
	("address",		ctypes.POINTER(_GInetAddress)),] )

g_inet_address_get_is_mc_link_local = _rpythonic_function_(		"g_inet_address_get_is_mc_link_local", ctypes.c_int, [
	("address",		ctypes.POINTER(_GInetAddress)),] )

g_inet_address_get_is_mc_node_local = _rpythonic_function_(		"g_inet_address_get_is_mc_node_local", ctypes.c_int, [
	("address",		ctypes.POINTER(_GInetAddress)),] )

g_inet_address_get_is_mc_org_local = _rpythonic_function_(		"g_inet_address_get_is_mc_org_local", ctypes.c_int, [
	("address",		ctypes.POINTER(_GInetAddress)),] )

g_inet_address_get_is_mc_site_local = _rpythonic_function_(		"g_inet_address_get_is_mc_site_local", ctypes.c_int, [
	("address",		ctypes.POINTER(_GInetAddress)),] )

get_family = _rpythonic_function_(		"get_family", ctypes.c_int, [
	("address",		ctypes.POINTER(_GSocketAddress)),] )

get_native_size = _rpythonic_function_(		"get_native_size", ctypes.c_int, [
	("address",		ctypes.POINTER(_GSocketAddress)),] )

g_socket_address_get_type = _rpythonic_function_(		"g_socket_address_get_type", ctypes.c_uint, [] )

to_native = _rpythonic_function_(		"to_native", ctypes.c_int, [
	("address",		ctypes.POINTER(_GSocketAddress)),
	("dest",		ctypes.POINTER(ctypes.c_void_p)),
	("destlen",		ctypes.c_uint),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_address_get_family = _rpythonic_function_(		"g_socket_address_get_family", ctypes.c_int, [
	("address",		ctypes.POINTER(_GSocketAddress)),] )

g_socket_address_new_from_native = _rpythonic_function_(		"g_socket_address_new_from_native", ctypes.POINTER(_GSocketAddress), [
	("native",		ctypes.POINTER(ctypes.c_void_p)),
	("C_len",		ctypes.c_uint),] )

g_socket_address_to_native = _rpythonic_function_(		"g_socket_address_to_native", ctypes.c_int, [
	("address",		ctypes.POINTER(_GSocketAddress)),
	("dest",		ctypes.POINTER(ctypes.c_void_p)),
	("destlen",		ctypes.c_uint),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_address_get_native_size = _rpythonic_function_(		"g_socket_address_get_native_size", ctypes.c_int, [
	("address",		ctypes.POINTER(_GSocketAddress)),] )

g_inet_socket_address_get_type = _rpythonic_function_(		"g_inet_socket_address_get_type", ctypes.c_uint, [] )

g_inet_socket_address_new = _rpythonic_function_(		"g_inet_socket_address_new", ctypes.POINTER(_GSocketAddress), [
	("address",		ctypes.POINTER(_GInetAddress)),
	("port",		ctypes.c_ushort),] )

g_inet_socket_address_get_address = _rpythonic_function_(		"g_inet_socket_address_get_address", ctypes.POINTER(_GInetAddress), [
	("address",		ctypes.POINTER(_GInetSocketAddress)),] )

g_inet_socket_address_get_port = _rpythonic_function_(		"g_inet_socket_address_get_port", ctypes.c_ushort, [
	("address",		ctypes.POINTER(_GInetSocketAddress)),] )

g_app_info_create_flags_get_type = _rpythonic_function_(		"g_app_info_create_flags_get_type", ctypes.c_uint, [] )

g_converter_flags_get_type = _rpythonic_function_(		"g_converter_flags_get_type", ctypes.c_uint, [] )

g_converter_result_get_type = _rpythonic_function_(		"g_converter_result_get_type", ctypes.c_uint, [] )

g_data_stream_byte_order_get_type = _rpythonic_function_(		"g_data_stream_byte_order_get_type", ctypes.c_uint, [] )

g_data_stream_newline_type_get_type = _rpythonic_function_(		"g_data_stream_newline_type_get_type", ctypes.c_uint, [] )

g_file_attribute_type_get_type = _rpythonic_function_(		"g_file_attribute_type_get_type", ctypes.c_uint, [] )

g_file_attribute_info_flags_get_type = _rpythonic_function_(		"g_file_attribute_info_flags_get_type", ctypes.c_uint, [] )

g_file_attribute_status_get_type = _rpythonic_function_(		"g_file_attribute_status_get_type", ctypes.c_uint, [] )

g_file_query_info_flags_get_type = _rpythonic_function_(		"g_file_query_info_flags_get_type", ctypes.c_uint, [] )

g_file_create_flags_get_type = _rpythonic_function_(		"g_file_create_flags_get_type", ctypes.c_uint, [] )

g_mount_mount_flags_get_type = _rpythonic_function_(		"g_mount_mount_flags_get_type", ctypes.c_uint, [] )

g_mount_unmount_flags_get_type = _rpythonic_function_(		"g_mount_unmount_flags_get_type", ctypes.c_uint, [] )

g_drive_start_flags_get_type = _rpythonic_function_(		"g_drive_start_flags_get_type", ctypes.c_uint, [] )

g_drive_start_stop_type_get_type = _rpythonic_function_(		"g_drive_start_stop_type_get_type", ctypes.c_uint, [] )

g_file_copy_flags_get_type = _rpythonic_function_(		"g_file_copy_flags_get_type", ctypes.c_uint, [] )

g_file_monitor_flags_get_type = _rpythonic_function_(		"g_file_monitor_flags_get_type", ctypes.c_uint, [] )

g_file_type_get_type = _rpythonic_function_(		"g_file_type_get_type", ctypes.c_uint, [] )

g_filesystem_preview_type_get_type = _rpythonic_function_(		"g_filesystem_preview_type_get_type", ctypes.c_uint, [] )

g_file_monitor_event_get_type = _rpythonic_function_(		"g_file_monitor_event_get_type", ctypes.c_uint, [] )

g_io_error_enum_get_type = _rpythonic_function_(		"g_io_error_enum_get_type", ctypes.c_uint, [] )

g_ask_password_flags_get_type = _rpythonic_function_(		"g_ask_password_flags_get_type", ctypes.c_uint, [] )

g_password_save_get_type = _rpythonic_function_(		"g_password_save_get_type", ctypes.c_uint, [] )

g_mount_operation_result_get_type = _rpythonic_function_(		"g_mount_operation_result_get_type", ctypes.c_uint, [] )

g_output_stream_splice_flags_get_type = _rpythonic_function_(		"g_output_stream_splice_flags_get_type", ctypes.c_uint, [] )

g_io_stream_splice_flags_get_type = _rpythonic_function_(		"g_io_stream_splice_flags_get_type", ctypes.c_uint, [] )

g_emblem_origin_get_type = _rpythonic_function_(		"g_emblem_origin_get_type", ctypes.c_uint, [] )

g_resolver_error_get_type = _rpythonic_function_(		"g_resolver_error_get_type", ctypes.c_uint, [] )

g_socket_family_get_type = _rpythonic_function_(		"g_socket_family_get_type", ctypes.c_uint, [] )

g_socket_type_get_type = _rpythonic_function_(		"g_socket_type_get_type", ctypes.c_uint, [] )

g_socket_msg_flags_get_type = _rpythonic_function_(		"g_socket_msg_flags_get_type", ctypes.c_uint, [] )

g_socket_protocol_get_type = _rpythonic_function_(		"g_socket_protocol_get_type", ctypes.c_uint, [] )

g_zlib_compressor_format_get_type = _rpythonic_function_(		"g_zlib_compressor_format_get_type", ctypes.c_uint, [] )

g_unix_socket_address_type_get_type = _rpythonic_function_(		"g_unix_socket_address_type_get_type", ctypes.c_uint, [] )

g_bus_type_get_type = _rpythonic_function_(		"g_bus_type_get_type", ctypes.c_uint, [] )

g_bus_name_owner_flags_get_type = _rpythonic_function_(		"g_bus_name_owner_flags_get_type", ctypes.c_uint, [] )

g_bus_name_watcher_flags_get_type = _rpythonic_function_(		"g_bus_name_watcher_flags_get_type", ctypes.c_uint, [] )

g_dbus_proxy_flags_get_type = _rpythonic_function_(		"g_dbus_proxy_flags_get_type", ctypes.c_uint, [] )

g_dbus_error_get_type = _rpythonic_function_(		"g_dbus_error_get_type", ctypes.c_uint, [] )

g_dbus_connection_flags_get_type = _rpythonic_function_(		"g_dbus_connection_flags_get_type", ctypes.c_uint, [] )

g_dbus_capability_flags_get_type = _rpythonic_function_(		"g_dbus_capability_flags_get_type", ctypes.c_uint, [] )

g_dbus_call_flags_get_type = _rpythonic_function_(		"g_dbus_call_flags_get_type", ctypes.c_uint, [] )

g_dbus_message_type_get_type = _rpythonic_function_(		"g_dbus_message_type_get_type", ctypes.c_uint, [] )

g_dbus_message_flags_get_type = _rpythonic_function_(		"g_dbus_message_flags_get_type", ctypes.c_uint, [] )

g_dbus_message_header_field_get_type = _rpythonic_function_(		"g_dbus_message_header_field_get_type", ctypes.c_uint, [] )

g_dbus_property_info_flags_get_type = _rpythonic_function_(		"g_dbus_property_info_flags_get_type", ctypes.c_uint, [] )

g_dbus_subtree_flags_get_type = _rpythonic_function_(		"g_dbus_subtree_flags_get_type", ctypes.c_uint, [] )

g_dbus_server_flags_get_type = _rpythonic_function_(		"g_dbus_server_flags_get_type", ctypes.c_uint, [] )

g_dbus_signal_flags_get_type = _rpythonic_function_(		"g_dbus_signal_flags_get_type", ctypes.c_uint, [] )

g_dbus_send_message_flags_get_type = _rpythonic_function_(		"g_dbus_send_message_flags_get_type", ctypes.c_uint, [] )

g_credentials_type_get_type = _rpythonic_function_(		"g_credentials_type_get_type", ctypes.c_uint, [] )

g_dbus_message_byte_order_get_type = _rpythonic_function_(		"g_dbus_message_byte_order_get_type", ctypes.c_uint, [] )

g_application_flags_get_type = _rpythonic_function_(		"g_application_flags_get_type", ctypes.c_uint, [] )

g_tls_error_get_type = _rpythonic_function_(		"g_tls_error_get_type", ctypes.c_uint, [] )

g_tls_certificate_flags_get_type = _rpythonic_function_(		"g_tls_certificate_flags_get_type", ctypes.c_uint, [] )

g_tls_authentication_mode_get_type = _rpythonic_function_(		"g_tls_authentication_mode_get_type", ctypes.c_uint, [] )

g_tls_rehandshake_mode_get_type = _rpythonic_function_(		"g_tls_rehandshake_mode_get_type", ctypes.c_uint, [] )

g_tls_password_flags_get_type = _rpythonic_function_(		"g_tls_password_flags_get_type", ctypes.c_uint, [] )

g_tls_interaction_result_get_type = _rpythonic_function_(		"g_tls_interaction_result_get_type", ctypes.c_uint, [] )

g_dbus_interface_skeleton_flags_get_type = _rpythonic_function_(		"g_dbus_interface_skeleton_flags_get_type", ctypes.c_uint, [] )

g_dbus_object_manager_client_flags_get_type = _rpythonic_function_(		"g_dbus_object_manager_client_flags_get_type", ctypes.c_uint, [] )

g_tls_database_verify_flags_get_type = _rpythonic_function_(		"g_tls_database_verify_flags_get_type", ctypes.c_uint, [] )

g_tls_database_lookup_flags_get_type = _rpythonic_function_(		"g_tls_database_lookup_flags_get_type", ctypes.c_uint, [] )

g_io_module_scope_flags_get_type = _rpythonic_function_(		"g_io_module_scope_flags_get_type", ctypes.c_uint, [] )

g_settings_bind_flags_get_type = _rpythonic_function_(		"g_settings_bind_flags_get_type", ctypes.c_uint, [] )

GModuleCheckInit = _rpythonic_function_(		"GModuleCheckInit", ctypes.POINTER(ctypes.c_char), [
	("module",		ctypes.POINTER(_GModule)),] )

GModuleUnload = _rpythonic_function_(		"GModuleUnload", ctypes.c_void_p, [
	("module",		ctypes.POINTER(_GModule)),] )

g_module_supported = _rpythonic_function_(		"g_module_supported", ctypes.c_int, [] )

g_module_open = _rpythonic_function_(		"g_module_open", ctypes.POINTER(_GModule), [
	("file_name",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),] )

g_module_close = _rpythonic_function_(		"g_module_close", ctypes.c_int, [
	("module",		ctypes.POINTER(_GModule)),] )

g_module_make_resident = _rpythonic_function_(		"g_module_make_resident", ctypes.c_void_p, [
	("module",		ctypes.POINTER(_GModule)),] )

g_module_error = _rpythonic_function_(		"g_module_error", ctypes.POINTER(ctypes.c_char), [] )

g_module_symbol = _rpythonic_function_(		"g_module_symbol", ctypes.c_int, [
	("module",		ctypes.POINTER(_GModule)),
	("symbol_name",		ctypes.POINTER(ctypes.c_char)),
	("symbol",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

g_module_name = _rpythonic_function_(		"g_module_name", ctypes.POINTER(ctypes.c_char), [
	("module",		ctypes.POINTER(_GModule)),] )

g_module_build_path = _rpythonic_function_(		"g_module_build_path", ctypes.POINTER(ctypes.c_char), [
	("directory",		ctypes.POINTER(ctypes.c_char)),
	("module_name",		ctypes.POINTER(ctypes.c_char)),] )

g_io_module_scope_new = _rpythonic_function_(		"g_io_module_scope_new", ctypes.POINTER(_GIOModuleScope), [
	("flags",		ctypes.c_int),] )

g_io_module_scope_free = _rpythonic_function_(		"g_io_module_scope_free", ctypes.c_void_p, [
	("scope",		ctypes.POINTER(_GIOModuleScope)),] )

g_io_module_scope_block = _rpythonic_function_(		"g_io_module_scope_block", ctypes.c_void_p, [
	("scope",		ctypes.POINTER(_GIOModuleScope)),
	("basename",		ctypes.POINTER(ctypes.c_char)),] )

g_io_module_get_type = _rpythonic_function_(		"g_io_module_get_type", ctypes.c_uint, [] )

g_io_module_new = _rpythonic_function_(		"g_io_module_new", ctypes.POINTER(_GIOModule), [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

g_io_modules_scan_all_in_directory = _rpythonic_function_(		"g_io_modules_scan_all_in_directory", ctypes.c_void_p, [
	("dirname",		ctypes.POINTER(ctypes.c_char)),] )

g_io_modules_load_all_in_directory = _rpythonic_function_(		"g_io_modules_load_all_in_directory", ctypes.POINTER(_GList), [
	("dirname",		ctypes.POINTER(ctypes.c_char)),] )

g_io_modules_scan_all_in_directory_with_scope = _rpythonic_function_(		"g_io_modules_scan_all_in_directory_with_scope", ctypes.c_void_p, [
	("dirname",		ctypes.POINTER(ctypes.c_char)),
	("scope",		ctypes.POINTER(_GIOModuleScope)),] )

g_io_modules_load_all_in_directory_with_scope = _rpythonic_function_(		"g_io_modules_load_all_in_directory_with_scope", ctypes.POINTER(_GList), [
	("dirname",		ctypes.POINTER(ctypes.c_char)),
	("scope",		ctypes.POINTER(_GIOModuleScope)),] )

g_io_extension_point_register = _rpythonic_function_(		"g_io_extension_point_register", ctypes.POINTER(_GIOExtensionPoint), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_io_extension_point_lookup = _rpythonic_function_(		"g_io_extension_point_lookup", ctypes.POINTER(_GIOExtensionPoint), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_io_extension_point_set_required_type = _rpythonic_function_(		"g_io_extension_point_set_required_type", ctypes.c_void_p, [
	("extension_point",		ctypes.POINTER(_GIOExtensionPoint)),
	("C_type",		ctypes.c_uint),] )

g_io_extension_point_get_required_type = _rpythonic_function_(		"g_io_extension_point_get_required_type", ctypes.c_uint, [
	("extension_point",		ctypes.POINTER(_GIOExtensionPoint)),] )

g_io_extension_point_get_extensions = _rpythonic_function_(		"g_io_extension_point_get_extensions", ctypes.POINTER(_GList), [
	("extension_point",		ctypes.POINTER(_GIOExtensionPoint)),] )

g_io_extension_point_get_extension_by_name = _rpythonic_function_(		"g_io_extension_point_get_extension_by_name", ctypes.POINTER(_GIOExtension), [
	("extension_point",		ctypes.POINTER(_GIOExtensionPoint)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_io_extension_point_implement = _rpythonic_function_(		"g_io_extension_point_implement", ctypes.POINTER(_GIOExtension), [
	("extension_point_name",		ctypes.POINTER(ctypes.c_char)),
	("C_type",		ctypes.c_uint),
	("extension_name",		ctypes.POINTER(ctypes.c_char)),
	("priority",		ctypes.c_int),] )

g_io_extension_get_type = _rpythonic_function_(		"g_io_extension_get_type", ctypes.c_uint, [
	("extension",		ctypes.POINTER(_GIOExtension)),] )

g_io_extension_get_name = _rpythonic_function_(		"g_io_extension_get_name", ctypes.POINTER(ctypes.c_char), [
	("extension",		ctypes.POINTER(_GIOExtension)),] )

g_io_extension_get_priority = _rpythonic_function_(		"g_io_extension_get_priority", ctypes.c_int, [
	("extension",		ctypes.POINTER(_GIOExtension)),] )

g_io_extension_ref_class = _rpythonic_function_(		"g_io_extension_ref_class", ctypes.POINTER(_GTypeClass), [
	("extension",		ctypes.POINTER(_GIOExtension)),] )

g_io_module_load = _rpythonic_function_(		"g_io_module_load", ctypes.c_void_p, [
	("module",		ctypes.POINTER(_GIOModule)),] )

g_io_module_unload = _rpythonic_function_(		"g_io_module_unload", ctypes.c_void_p, [
	("module",		ctypes.POINTER(_GIOModule)),] )

g_io_module_query = _rpythonic_function_(		"g_io_module_query", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [] )

g_io_scheduler_push_job = _rpythonic_function_(		"g_io_scheduler_push_job", ctypes.c_void_p, [
	("job_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GIOSchedulerJob),ctypes.POINTER(_GCancellable),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),] )

g_io_scheduler_cancel_all_jobs = _rpythonic_function_(		"g_io_scheduler_cancel_all_jobs", ctypes.c_void_p, [] )

g_io_scheduler_job_send_to_mainloop = _rpythonic_function_(		"g_io_scheduler_job_send_to_mainloop", ctypes.c_int, [
	("job",		ctypes.POINTER(_GIOSchedulerJob)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_io_scheduler_job_send_to_mainloop_async = _rpythonic_function_(		"g_io_scheduler_job_send_to_mainloop_async", ctypes.c_void_p, [
	("job",		ctypes.POINTER(_GIOSchedulerJob)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

load_async = _rpythonic_function_(		"load_async", ctypes.c_void_p, [
	("icon",		ctypes.POINTER(_GLoadableIcon)),
	("size",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

load_finish = _rpythonic_function_(		"load_finish", ctypes.POINTER(_GInputStream), [
	("icon",		ctypes.POINTER(_GLoadableIcon)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("C_type",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_loadable_icon_get_type = _rpythonic_function_(		"g_loadable_icon_get_type", ctypes.c_uint, [] )

g_loadable_icon_load = _rpythonic_function_(		"g_loadable_icon_load", ctypes.POINTER(_GInputStream), [
	("icon",		ctypes.POINTER(_GLoadableIcon)),
	("size",		ctypes.c_int),
	("C_type",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_loadable_icon_load_async = _rpythonic_function_(		"g_loadable_icon_load_async", ctypes.c_void_p, [
	("icon",		ctypes.POINTER(_GLoadableIcon)),
	("size",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_loadable_icon_load_finish = _rpythonic_function_(		"g_loadable_icon_load_finish", ctypes.POINTER(_GInputStream), [
	("icon",		ctypes.POINTER(_GLoadableIcon)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("C_type",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_memory_input_stream_get_type = _rpythonic_function_(		"g_memory_input_stream_get_type", ctypes.c_uint, [] )

g_memory_input_stream_new = _rpythonic_function_(		"g_memory_input_stream_new", ctypes.POINTER(_GInputStream), [] )

g_memory_input_stream_new_from_data = _rpythonic_function_(		"g_memory_input_stream_new_from_data", ctypes.POINTER(_GInputStream), [
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("C_len",		ctypes.c_int),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_memory_input_stream_add_data = _rpythonic_function_(		"g_memory_input_stream_add_data", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GMemoryInputStream)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("C_len",		ctypes.c_int),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

GReallocFunc = _rpythonic_function_(		"GReallocFunc", ctypes.POINTER(ctypes.c_void_p), [
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.c_uint),] )

g_memory_output_stream_get_type = _rpythonic_function_(		"g_memory_output_stream_get_type", ctypes.c_uint, [] )

g_memory_output_stream_new = _rpythonic_function_(		"g_memory_output_stream_new", ctypes.POINTER(_GOutputStream), [
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.c_uint),
	("realloc_function",		ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), ctypes.POINTER(ctypes.c_void_p),ctypes.c_uint,)),
	("destroy_function",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_memory_output_stream_get_data = _rpythonic_function_(		"g_memory_output_stream_get_data", ctypes.POINTER(ctypes.c_void_p), [
	("ostream",		ctypes.POINTER(_GMemoryOutputStream)),] )

g_memory_output_stream_get_size = _rpythonic_function_(		"g_memory_output_stream_get_size", ctypes.c_uint, [
	("ostream",		ctypes.POINTER(_GMemoryOutputStream)),] )

g_memory_output_stream_get_data_size = _rpythonic_function_(		"g_memory_output_stream_get_data_size", ctypes.c_uint, [
	("ostream",		ctypes.POINTER(_GMemoryOutputStream)),] )

g_memory_output_stream_steal_data = _rpythonic_function_(		"g_memory_output_stream_steal_data", ctypes.POINTER(ctypes.c_void_p), [
	("ostream",		ctypes.POINTER(_GMemoryOutputStream)),] )

unmounted = _rpythonic_function_(		"unmounted", ctypes.c_void_p, [
	("mount",		ctypes.POINTER(_GMount)),] )

get_root = _rpythonic_function_(		"get_root", ctypes.POINTER(_GFile), [
	("mount",		ctypes.POINTER(_GMount)),] )

get_uuid = _rpythonic_function_(		"get_uuid", ctypes.POINTER(ctypes.c_char), [
	("mount",		ctypes.POINTER(_GMount)),] )

get_volume = _rpythonic_function_(		"get_volume", ctypes.POINTER(_GVolume), [
	("mount",		ctypes.POINTER(_GMount)),] )

get_drive = _rpythonic_function_(		"get_drive", ctypes.POINTER(_GDrive), [
	("mount",		ctypes.POINTER(_GMount)),] )

can_unmount = _rpythonic_function_(		"can_unmount", ctypes.c_int, [
	("mount",		ctypes.POINTER(_GMount)),] )

unmount = _rpythonic_function_(		"unmount", ctypes.c_void_p, [
	("mount",		ctypes.POINTER(_GMount)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

unmount_finish = _rpythonic_function_(		"unmount_finish", ctypes.c_int, [
	("mount",		ctypes.POINTER(_GMount)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

remount = _rpythonic_function_(		"remount", ctypes.c_void_p, [
	("mount",		ctypes.POINTER(_GMount)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

remount_finish = _rpythonic_function_(		"remount_finish", ctypes.c_int, [
	("mount",		ctypes.POINTER(_GMount)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

guess_content_type = _rpythonic_function_(		"guess_content_type", ctypes.c_void_p, [
	("mount",		ctypes.POINTER(_GMount)),
	("force_rescan",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

guess_content_type_finish = _rpythonic_function_(		"guess_content_type_finish", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("mount",		ctypes.POINTER(_GMount)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

guess_content_type_sync = _rpythonic_function_(		"guess_content_type_sync", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("mount",		ctypes.POINTER(_GMount)),
	("force_rescan",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

pre_unmount = _rpythonic_function_(		"pre_unmount", ctypes.c_void_p, [
	("mount",		ctypes.POINTER(_GMount)),] )

unmount_with_operation = _rpythonic_function_(		"unmount_with_operation", ctypes.c_void_p, [
	("mount",		ctypes.POINTER(_GMount)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

unmount_with_operation_finish = _rpythonic_function_(		"unmount_with_operation_finish", ctypes.c_int, [
	("mount",		ctypes.POINTER(_GMount)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

get_default_location = _rpythonic_function_(		"get_default_location", ctypes.POINTER(_GFile), [
	("mount",		ctypes.POINTER(_GMount)),] )

g_mount_get_type = _rpythonic_function_(		"g_mount_get_type", ctypes.c_uint, [] )

g_mount_get_root = _rpythonic_function_(		"g_mount_get_root", ctypes.POINTER(_GFile), [
	("mount",		ctypes.POINTER(_GMount)),] )

g_mount_get_default_location = _rpythonic_function_(		"g_mount_get_default_location", ctypes.POINTER(_GFile), [
	("mount",		ctypes.POINTER(_GMount)),] )

g_mount_get_name = _rpythonic_function_(		"g_mount_get_name", ctypes.POINTER(ctypes.c_char), [
	("mount",		ctypes.POINTER(_GMount)),] )

g_mount_get_icon = _rpythonic_function_(		"g_mount_get_icon", ctypes.POINTER(_GIcon), [
	("mount",		ctypes.POINTER(_GMount)),] )

g_mount_get_uuid = _rpythonic_function_(		"g_mount_get_uuid", ctypes.POINTER(ctypes.c_char), [
	("mount",		ctypes.POINTER(_GMount)),] )

g_mount_get_volume = _rpythonic_function_(		"g_mount_get_volume", ctypes.POINTER(_GVolume), [
	("mount",		ctypes.POINTER(_GMount)),] )

g_mount_get_drive = _rpythonic_function_(		"g_mount_get_drive", ctypes.POINTER(_GDrive), [
	("mount",		ctypes.POINTER(_GMount)),] )

g_mount_can_unmount = _rpythonic_function_(		"g_mount_can_unmount", ctypes.c_int, [
	("mount",		ctypes.POINTER(_GMount)),] )

g_mount_can_eject = _rpythonic_function_(		"g_mount_can_eject", ctypes.c_int, [
	("mount",		ctypes.POINTER(_GMount)),] )

g_mount_unmount = _rpythonic_function_(		"g_mount_unmount", ctypes.c_void_p, [
	("mount",		ctypes.POINTER(_GMount)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_mount_unmount_finish = _rpythonic_function_(		"g_mount_unmount_finish", ctypes.c_int, [
	("mount",		ctypes.POINTER(_GMount)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_mount_eject = _rpythonic_function_(		"g_mount_eject", ctypes.c_void_p, [
	("mount",		ctypes.POINTER(_GMount)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_mount_eject_finish = _rpythonic_function_(		"g_mount_eject_finish", ctypes.c_int, [
	("mount",		ctypes.POINTER(_GMount)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_mount_remount = _rpythonic_function_(		"g_mount_remount", ctypes.c_void_p, [
	("mount",		ctypes.POINTER(_GMount)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_mount_remount_finish = _rpythonic_function_(		"g_mount_remount_finish", ctypes.c_int, [
	("mount",		ctypes.POINTER(_GMount)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_mount_guess_content_type = _rpythonic_function_(		"g_mount_guess_content_type", ctypes.c_void_p, [
	("mount",		ctypes.POINTER(_GMount)),
	("force_rescan",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_mount_guess_content_type_finish = _rpythonic_function_(		"g_mount_guess_content_type_finish", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("mount",		ctypes.POINTER(_GMount)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_mount_guess_content_type_sync = _rpythonic_function_(		"g_mount_guess_content_type_sync", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("mount",		ctypes.POINTER(_GMount)),
	("force_rescan",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_mount_is_shadowed = _rpythonic_function_(		"g_mount_is_shadowed", ctypes.c_int, [
	("mount",		ctypes.POINTER(_GMount)),] )

g_mount_shadow = _rpythonic_function_(		"g_mount_shadow", ctypes.c_void_p, [
	("mount",		ctypes.POINTER(_GMount)),] )

g_mount_unshadow = _rpythonic_function_(		"g_mount_unshadow", ctypes.c_void_p, [
	("mount",		ctypes.POINTER(_GMount)),] )

g_mount_unmount_with_operation = _rpythonic_function_(		"g_mount_unmount_with_operation", ctypes.c_void_p, [
	("mount",		ctypes.POINTER(_GMount)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_mount_unmount_with_operation_finish = _rpythonic_function_(		"g_mount_unmount_with_operation_finish", ctypes.c_int, [
	("mount",		ctypes.POINTER(_GMount)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_mount_eject_with_operation = _rpythonic_function_(		"g_mount_eject_with_operation", ctypes.c_void_p, [
	("mount",		ctypes.POINTER(_GMount)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_mount_eject_with_operation_finish = _rpythonic_function_(		"g_mount_eject_with_operation_finish", ctypes.c_int, [
	("mount",		ctypes.POINTER(_GMount)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

ask_password = _rpythonic_function_(		"ask_password", ctypes.c_void_p, [
	("op",		ctypes.POINTER(_GMountOperation)),
	("message",		ctypes.POINTER(ctypes.c_char)),
	("default_user",		ctypes.POINTER(ctypes.c_char)),
	("default_domain",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),] )

ask_question = _rpythonic_function_(		"ask_question", ctypes.c_void_p, [
	("op",		ctypes.POINTER(_GMountOperation)),
	("message",		ctypes.POINTER(ctypes.c_char)),
	("choices",		ctypes.POINTER(ctypes.c_char)),] )

reply = _rpythonic_function_(		"reply", ctypes.c_void_p, [
	("op",		ctypes.POINTER(_GMountOperation)),
	("result",		ctypes.c_int),] )

aborted = _rpythonic_function_(		"aborted", ctypes.c_void_p, [
	("op",		ctypes.POINTER(_GMountOperation)),] )

show_processes = _rpythonic_function_(		"show_processes", ctypes.c_void_p, [
	("op",		ctypes.POINTER(_GMountOperation)),
	("message",		ctypes.POINTER(ctypes.c_char)),
	("processes",		ctypes.POINTER(_GArray)),
	("choices",		ctypes.POINTER(ctypes.c_char)),] )

g_mount_operation_new = _rpythonic_function_(		"g_mount_operation_new", ctypes.POINTER(_GMountOperation), [] )

g_mount_operation_get_type = _rpythonic_function_(		"g_mount_operation_get_type", ctypes.c_uint, [] )

g_mount_operation_get_username = _rpythonic_function_(		"g_mount_operation_get_username", ctypes.POINTER(ctypes.c_char), [
	("op",		ctypes.POINTER(_GMountOperation)),] )

g_mount_operation_set_username = _rpythonic_function_(		"g_mount_operation_set_username", ctypes.c_void_p, [
	("op",		ctypes.POINTER(_GMountOperation)),
	("username",		ctypes.POINTER(ctypes.c_char)),] )

g_mount_operation_get_password = _rpythonic_function_(		"g_mount_operation_get_password", ctypes.POINTER(ctypes.c_char), [
	("op",		ctypes.POINTER(_GMountOperation)),] )

g_mount_operation_set_password = _rpythonic_function_(		"g_mount_operation_set_password", ctypes.c_void_p, [
	("op",		ctypes.POINTER(_GMountOperation)),
	("password",		ctypes.POINTER(ctypes.c_char)),] )

g_mount_operation_get_anonymous = _rpythonic_function_(		"g_mount_operation_get_anonymous", ctypes.c_int, [
	("op",		ctypes.POINTER(_GMountOperation)),] )

g_mount_operation_set_anonymous = _rpythonic_function_(		"g_mount_operation_set_anonymous", ctypes.c_void_p, [
	("op",		ctypes.POINTER(_GMountOperation)),
	("anonymous",		ctypes.c_int),] )

g_mount_operation_get_domain = _rpythonic_function_(		"g_mount_operation_get_domain", ctypes.POINTER(ctypes.c_char), [
	("op",		ctypes.POINTER(_GMountOperation)),] )

g_mount_operation_set_domain = _rpythonic_function_(		"g_mount_operation_set_domain", ctypes.c_void_p, [
	("op",		ctypes.POINTER(_GMountOperation)),
	("domain",		ctypes.POINTER(ctypes.c_char)),] )

g_mount_operation_get_password_save = _rpythonic_function_(		"g_mount_operation_get_password_save", ctypes.c_int, [
	("op",		ctypes.POINTER(_GMountOperation)),] )

g_mount_operation_set_password_save = _rpythonic_function_(		"g_mount_operation_set_password_save", ctypes.c_void_p, [
	("op",		ctypes.POINTER(_GMountOperation)),
	("save",		ctypes.c_int),] )

g_mount_operation_get_choice = _rpythonic_function_(		"g_mount_operation_get_choice", ctypes.c_int, [
	("op",		ctypes.POINTER(_GMountOperation)),] )

g_mount_operation_set_choice = _rpythonic_function_(		"g_mount_operation_set_choice", ctypes.c_void_p, [
	("op",		ctypes.POINTER(_GMountOperation)),
	("choice",		ctypes.c_int),] )

g_mount_operation_reply = _rpythonic_function_(		"g_mount_operation_reply", ctypes.c_void_p, [
	("op",		ctypes.POINTER(_GMountOperation)),
	("result",		ctypes.c_int),] )

volume_added = _rpythonic_function_(		"volume_added", ctypes.c_void_p, [
	("volume_monitor",		ctypes.POINTER(_GVolumeMonitor)),
	("volume",		ctypes.POINTER(_GVolume)),] )

volume_removed = _rpythonic_function_(		"volume_removed", ctypes.c_void_p, [
	("volume_monitor",		ctypes.POINTER(_GVolumeMonitor)),
	("volume",		ctypes.POINTER(_GVolume)),] )

volume_changed = _rpythonic_function_(		"volume_changed", ctypes.c_void_p, [
	("volume_monitor",		ctypes.POINTER(_GVolumeMonitor)),
	("volume",		ctypes.POINTER(_GVolume)),] )

mount_added = _rpythonic_function_(		"mount_added", ctypes.c_void_p, [
	("volume_monitor",		ctypes.POINTER(_GVolumeMonitor)),
	("mount",		ctypes.POINTER(_GMount)),] )

mount_removed = _rpythonic_function_(		"mount_removed", ctypes.c_void_p, [
	("volume_monitor",		ctypes.POINTER(_GVolumeMonitor)),
	("mount",		ctypes.POINTER(_GMount)),] )

mount_pre_unmount = _rpythonic_function_(		"mount_pre_unmount", ctypes.c_void_p, [
	("volume_monitor",		ctypes.POINTER(_GVolumeMonitor)),
	("mount",		ctypes.POINTER(_GMount)),] )

mount_changed = _rpythonic_function_(		"mount_changed", ctypes.c_void_p, [
	("volume_monitor",		ctypes.POINTER(_GVolumeMonitor)),
	("mount",		ctypes.POINTER(_GMount)),] )

drive_connected = _rpythonic_function_(		"drive_connected", ctypes.c_void_p, [
	("volume_monitor",		ctypes.POINTER(_GVolumeMonitor)),
	("drive",		ctypes.POINTER(_GDrive)),] )

drive_disconnected = _rpythonic_function_(		"drive_disconnected", ctypes.c_void_p, [
	("volume_monitor",		ctypes.POINTER(_GVolumeMonitor)),
	("drive",		ctypes.POINTER(_GDrive)),] )

drive_changed = _rpythonic_function_(		"drive_changed", ctypes.c_void_p, [
	("volume_monitor",		ctypes.POINTER(_GVolumeMonitor)),
	("drive",		ctypes.POINTER(_GDrive)),] )

is_supported = _rpythonic_function_(		"is_supported", ctypes.c_int, [] )

get_connected_drives = _rpythonic_function_(		"get_connected_drives", ctypes.POINTER(_GList), [
	("volume_monitor",		ctypes.POINTER(_GVolumeMonitor)),] )

get_mounts = _rpythonic_function_(		"get_mounts", ctypes.POINTER(_GList), [
	("volume_monitor",		ctypes.POINTER(_GVolumeMonitor)),] )

get_volume_for_uuid = _rpythonic_function_(		"get_volume_for_uuid", ctypes.POINTER(_GVolume), [
	("volume_monitor",		ctypes.POINTER(_GVolumeMonitor)),
	("uuid",		ctypes.POINTER(ctypes.c_char)),] )

get_mount_for_uuid = _rpythonic_function_(		"get_mount_for_uuid", ctypes.POINTER(_GMount), [
	("volume_monitor",		ctypes.POINTER(_GVolumeMonitor)),
	("uuid",		ctypes.POINTER(ctypes.c_char)),] )

adopt_orphan_mount = _rpythonic_function_(		"adopt_orphan_mount", ctypes.POINTER(_GVolume), [
	("mount",		ctypes.POINTER(_GMount)),
	("volume_monitor",		ctypes.POINTER(_GVolumeMonitor)),] )

drive_eject_button = _rpythonic_function_(		"drive_eject_button", ctypes.c_void_p, [
	("volume_monitor",		ctypes.POINTER(_GVolumeMonitor)),
	("drive",		ctypes.POINTER(_GDrive)),] )

drive_stop_button = _rpythonic_function_(		"drive_stop_button", ctypes.c_void_p, [
	("volume_monitor",		ctypes.POINTER(_GVolumeMonitor)),
	("drive",		ctypes.POINTER(_GDrive)),] )

g_volume_monitor_get_type = _rpythonic_function_(		"g_volume_monitor_get_type", ctypes.c_uint, [] )

g_volume_monitor_get = _rpythonic_function_(		"g_volume_monitor_get", ctypes.POINTER(_GVolumeMonitor), [] )

g_volume_monitor_get_connected_drives = _rpythonic_function_(		"g_volume_monitor_get_connected_drives", ctypes.POINTER(_GList), [
	("volume_monitor",		ctypes.POINTER(_GVolumeMonitor)),] )

g_volume_monitor_get_volumes = _rpythonic_function_(		"g_volume_monitor_get_volumes", ctypes.POINTER(_GList), [
	("volume_monitor",		ctypes.POINTER(_GVolumeMonitor)),] )

g_volume_monitor_get_mounts = _rpythonic_function_(		"g_volume_monitor_get_mounts", ctypes.POINTER(_GList), [
	("volume_monitor",		ctypes.POINTER(_GVolumeMonitor)),] )

g_volume_monitor_get_volume_for_uuid = _rpythonic_function_(		"g_volume_monitor_get_volume_for_uuid", ctypes.POINTER(_GVolume), [
	("volume_monitor",		ctypes.POINTER(_GVolumeMonitor)),
	("uuid",		ctypes.POINTER(ctypes.c_char)),] )

g_volume_monitor_get_mount_for_uuid = _rpythonic_function_(		"g_volume_monitor_get_mount_for_uuid", ctypes.POINTER(_GMount), [
	("volume_monitor",		ctypes.POINTER(_GVolumeMonitor)),
	("uuid",		ctypes.POINTER(ctypes.c_char)),] )

g_volume_monitor_adopt_orphan_mount = _rpythonic_function_(		"g_volume_monitor_adopt_orphan_mount", ctypes.POINTER(_GVolume), [
	("mount",		ctypes.POINTER(_GMount)),] )

g_native_volume_monitor_get_type = _rpythonic_function_(		"g_native_volume_monitor_get_type", ctypes.c_uint, [] )

get_mount_for_mount_path = _rpythonic_function_(		"get_mount_for_mount_path", ctypes.POINTER(_GMount), [
	("mount_path",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),] )

g_network_address_get_type = _rpythonic_function_(		"g_network_address_get_type", ctypes.c_uint, [] )

g_network_address_new = _rpythonic_function_(		"g_network_address_new", ctypes.POINTER(_GSocketConnectable), [
	("hostname",		ctypes.POINTER(ctypes.c_char)),
	("port",		ctypes.c_ushort),] )

g_network_address_parse = _rpythonic_function_(		"g_network_address_parse", ctypes.POINTER(_GSocketConnectable), [
	("host_and_port",		ctypes.POINTER(ctypes.c_char)),
	("default_port",		ctypes.c_ushort),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_network_address_parse_uri = _rpythonic_function_(		"g_network_address_parse_uri", ctypes.POINTER(_GSocketConnectable), [
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("default_port",		ctypes.c_ushort),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_network_address_get_hostname = _rpythonic_function_(		"g_network_address_get_hostname", ctypes.POINTER(ctypes.c_char), [
	("addr",		ctypes.POINTER(_GNetworkAddress)),] )

g_network_address_get_port = _rpythonic_function_(		"g_network_address_get_port", ctypes.c_ushort, [
	("addr",		ctypes.POINTER(_GNetworkAddress)),] )

g_network_address_get_scheme = _rpythonic_function_(		"g_network_address_get_scheme", ctypes.POINTER(ctypes.c_char), [
	("addr",		ctypes.POINTER(_GNetworkAddress)),] )

g_network_service_get_type = _rpythonic_function_(		"g_network_service_get_type", ctypes.c_uint, [] )

g_network_service_new = _rpythonic_function_(		"g_network_service_new", ctypes.POINTER(_GSocketConnectable), [
	("service",		ctypes.POINTER(ctypes.c_char)),
	("protocol",		ctypes.POINTER(ctypes.c_char)),
	("domain",		ctypes.POINTER(ctypes.c_char)),] )

g_network_service_get_service = _rpythonic_function_(		"g_network_service_get_service", ctypes.POINTER(ctypes.c_char), [
	("srv",		ctypes.POINTER(_GNetworkService)),] )

g_network_service_get_protocol = _rpythonic_function_(		"g_network_service_get_protocol", ctypes.POINTER(ctypes.c_char), [
	("srv",		ctypes.POINTER(_GNetworkService)),] )

g_network_service_get_domain = _rpythonic_function_(		"g_network_service_get_domain", ctypes.POINTER(ctypes.c_char), [
	("srv",		ctypes.POINTER(_GNetworkService)),] )

g_network_service_get_scheme = _rpythonic_function_(		"g_network_service_get_scheme", ctypes.POINTER(ctypes.c_char), [
	("srv",		ctypes.POINTER(_GNetworkService)),] )

g_network_service_set_scheme = _rpythonic_function_(		"g_network_service_set_scheme", ctypes.c_void_p, [
	("srv",		ctypes.POINTER(_GNetworkService)),
	("scheme",		ctypes.POINTER(ctypes.c_char)),] )

acquire = _rpythonic_function_(		"acquire", ctypes.c_int, [
	("permission",		ctypes.POINTER(_GPermission)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

acquire_async = _rpythonic_function_(		"acquire_async", ctypes.c_void_p, [
	("permission",		ctypes.POINTER(_GPermission)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

acquire_finish = _rpythonic_function_(		"acquire_finish", ctypes.c_int, [
	("permission",		ctypes.POINTER(_GPermission)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

release = _rpythonic_function_(		"release", ctypes.c_int, [
	("permission",		ctypes.POINTER(_GPermission)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

release_async = _rpythonic_function_(		"release_async", ctypes.c_void_p, [
	("permission",		ctypes.POINTER(_GPermission)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

release_finish = _rpythonic_function_(		"release_finish", ctypes.c_int, [
	("permission",		ctypes.POINTER(_GPermission)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_permission_get_type = _rpythonic_function_(		"g_permission_get_type", ctypes.c_uint, [] )

g_permission_acquire = _rpythonic_function_(		"g_permission_acquire", ctypes.c_int, [
	("permission",		ctypes.POINTER(_GPermission)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_permission_acquire_async = _rpythonic_function_(		"g_permission_acquire_async", ctypes.c_void_p, [
	("permission",		ctypes.POINTER(_GPermission)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_permission_acquire_finish = _rpythonic_function_(		"g_permission_acquire_finish", ctypes.c_int, [
	("permission",		ctypes.POINTER(_GPermission)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_permission_release = _rpythonic_function_(		"g_permission_release", ctypes.c_int, [
	("permission",		ctypes.POINTER(_GPermission)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_permission_release_async = _rpythonic_function_(		"g_permission_release_async", ctypes.c_void_p, [
	("permission",		ctypes.POINTER(_GPermission)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_permission_release_finish = _rpythonic_function_(		"g_permission_release_finish", ctypes.c_int, [
	("permission",		ctypes.POINTER(_GPermission)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_permission_get_allowed = _rpythonic_function_(		"g_permission_get_allowed", ctypes.c_int, [
	("permission",		ctypes.POINTER(_GPermission)),] )

g_permission_get_can_acquire = _rpythonic_function_(		"g_permission_get_can_acquire", ctypes.c_int, [
	("permission",		ctypes.POINTER(_GPermission)),] )

g_permission_get_can_release = _rpythonic_function_(		"g_permission_get_can_release", ctypes.c_int, [
	("permission",		ctypes.POINTER(_GPermission)),] )

g_permission_impl_update = _rpythonic_function_(		"g_permission_impl_update", ctypes.c_void_p, [
	("permission",		ctypes.POINTER(_GPermission)),
	("allowed",		ctypes.c_int),
	("can_acquire",		ctypes.c_int),
	("can_release",		ctypes.c_int),] )

can_poll = _rpythonic_function_(		"can_poll", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GPollableInputStream)),] )

is_readable = _rpythonic_function_(		"is_readable", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GPollableInputStream)),] )

create_source = _rpythonic_function_(		"create_source", ctypes.POINTER(_GSource), [
	("stream",		ctypes.POINTER(_GPollableInputStream)),
	("cancellable",		ctypes.POINTER(_GCancellable)),] )

read_nonblocking = _rpythonic_function_(		"read_nonblocking", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GPollableInputStream)),
	("buffer",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.c_uint),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_pollable_input_stream_get_type = _rpythonic_function_(		"g_pollable_input_stream_get_type", ctypes.c_uint, [] )

g_pollable_input_stream_can_poll = _rpythonic_function_(		"g_pollable_input_stream_can_poll", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GPollableInputStream)),] )

g_pollable_input_stream_is_readable = _rpythonic_function_(		"g_pollable_input_stream_is_readable", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GPollableInputStream)),] )

g_pollable_input_stream_create_source = _rpythonic_function_(		"g_pollable_input_stream_create_source", ctypes.POINTER(_GSource), [
	("stream",		ctypes.POINTER(_GPollableInputStream)),
	("cancellable",		ctypes.POINTER(_GCancellable)),] )

g_pollable_input_stream_read_nonblocking = _rpythonic_function_(		"g_pollable_input_stream_read_nonblocking", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GPollableInputStream)),
	("buffer",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.c_uint),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_pollable_source_new = _rpythonic_function_(		"g_pollable_source_new", ctypes.POINTER(_GSource), [
	("pollable_stream",		ctypes.POINTER(_GObject)),] )

is_writable = _rpythonic_function_(		"is_writable", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GPollableOutputStream)),] )

g_pollable_output_stream_get_type = _rpythonic_function_(		"g_pollable_output_stream_get_type", ctypes.c_uint, [] )

write_nonblocking = _rpythonic_function_(		"write_nonblocking", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GPollableOutputStream)),
	("buffer",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.c_uint),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_pollable_output_stream_can_poll = _rpythonic_function_(		"g_pollable_output_stream_can_poll", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GPollableOutputStream)),] )

g_pollable_output_stream_is_writable = _rpythonic_function_(		"g_pollable_output_stream_is_writable", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GPollableOutputStream)),] )

g_pollable_output_stream_create_source = _rpythonic_function_(		"g_pollable_output_stream_create_source", ctypes.POINTER(_GSource), [
	("stream",		ctypes.POINTER(_GPollableOutputStream)),
	("cancellable",		ctypes.POINTER(_GCancellable)),] )

g_pollable_output_stream_write_nonblocking = _rpythonic_function_(		"g_pollable_output_stream_write_nonblocking", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GPollableOutputStream)),
	("buffer",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.c_uint),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

connect = _rpythonic_function_(		"connect", ctypes.POINTER(_GIOStream), [
	("proxy",		ctypes.POINTER(_GProxy)),
	("connection",		ctypes.POINTER(_GIOStream)),
	("proxy_address",		ctypes.POINTER(_GProxyAddress)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

connect_async = _rpythonic_function_(		"connect_async", ctypes.c_void_p, [
	("proxy",		ctypes.POINTER(_GProxy)),
	("connection",		ctypes.POINTER(_GIOStream)),
	("proxy_address",		ctypes.POINTER(_GProxyAddress)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

connect_finish = _rpythonic_function_(		"connect_finish", ctypes.POINTER(_GIOStream), [
	("proxy",		ctypes.POINTER(_GProxy)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

supports_hostname = _rpythonic_function_(		"supports_hostname", ctypes.c_int, [
	("proxy",		ctypes.POINTER(_GProxy)),] )

g_proxy_get_type = _rpythonic_function_(		"g_proxy_get_type", ctypes.c_uint, [] )

g_proxy_connect = _rpythonic_function_(		"g_proxy_connect", ctypes.POINTER(_GIOStream), [
	("proxy",		ctypes.POINTER(_GProxy)),
	("connection",		ctypes.POINTER(_GIOStream)),
	("proxy_address",		ctypes.POINTER(_GProxyAddress)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_proxy_get_default_for_protocol = _rpythonic_function_(		"g_proxy_get_default_for_protocol", ctypes.POINTER(_GProxy), [
	("protocol",		ctypes.POINTER(ctypes.c_char)),] )

g_proxy_connect_async = _rpythonic_function_(		"g_proxy_connect_async", ctypes.c_void_p, [
	("proxy",		ctypes.POINTER(_GProxy)),
	("connection",		ctypes.POINTER(_GIOStream)),
	("proxy_address",		ctypes.POINTER(_GProxyAddress)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_proxy_connect_finish = _rpythonic_function_(		"g_proxy_connect_finish", ctypes.POINTER(_GIOStream), [
	("proxy",		ctypes.POINTER(_GProxy)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_proxy_supports_hostname = _rpythonic_function_(		"g_proxy_supports_hostname", ctypes.c_int, [
	("proxy",		ctypes.POINTER(_GProxy)),] )

g_proxy_address_get_type = _rpythonic_function_(		"g_proxy_address_get_type", ctypes.c_uint, [] )

g_proxy_address_new = _rpythonic_function_(		"g_proxy_address_new", ctypes.POINTER(_GSocketAddress), [
	("inetaddr",		ctypes.POINTER(_GInetAddress)),
	("port",		ctypes.c_ushort),
	("protocol",		ctypes.POINTER(ctypes.c_char)),
	("dest_hostname",		ctypes.POINTER(ctypes.c_char)),
	("dest_port",		ctypes.c_ushort),
	("username",		ctypes.POINTER(ctypes.c_char)),
	("password",		ctypes.POINTER(ctypes.c_char)),] )

g_proxy_address_get_protocol = _rpythonic_function_(		"g_proxy_address_get_protocol", ctypes.POINTER(ctypes.c_char), [
	("proxy",		ctypes.POINTER(_GProxyAddress)),] )

g_proxy_address_get_destination_hostname = _rpythonic_function_(		"g_proxy_address_get_destination_hostname", ctypes.POINTER(ctypes.c_char), [
	("proxy",		ctypes.POINTER(_GProxyAddress)),] )

g_proxy_address_get_destination_port = _rpythonic_function_(		"g_proxy_address_get_destination_port", ctypes.c_ushort, [
	("proxy",		ctypes.POINTER(_GProxyAddress)),] )

g_proxy_address_get_username = _rpythonic_function_(		"g_proxy_address_get_username", ctypes.POINTER(ctypes.c_char), [
	("proxy",		ctypes.POINTER(_GProxyAddress)),] )

g_proxy_address_get_password = _rpythonic_function_(		"g_proxy_address_get_password", ctypes.POINTER(ctypes.c_char), [
	("proxy",		ctypes.POINTER(_GProxyAddress)),] )

next = _rpythonic_function_(		"next", ctypes.POINTER(_GSocketAddress), [
	("enumerator",		ctypes.POINTER(_GSocketAddressEnumerator)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

next_async = _rpythonic_function_(		"next_async", ctypes.c_void_p, [
	("enumerator",		ctypes.POINTER(_GSocketAddressEnumerator)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

next_finish = _rpythonic_function_(		"next_finish", ctypes.POINTER(_GSocketAddress), [
	("enumerator",		ctypes.POINTER(_GSocketAddressEnumerator)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_address_enumerator_get_type = _rpythonic_function_(		"g_socket_address_enumerator_get_type", ctypes.c_uint, [] )

g_socket_address_enumerator_next = _rpythonic_function_(		"g_socket_address_enumerator_next", ctypes.POINTER(_GSocketAddress), [
	("enumerator",		ctypes.POINTER(_GSocketAddressEnumerator)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_address_enumerator_next_async = _rpythonic_function_(		"g_socket_address_enumerator_next_async", ctypes.c_void_p, [
	("enumerator",		ctypes.POINTER(_GSocketAddressEnumerator)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_socket_address_enumerator_next_finish = _rpythonic_function_(		"g_socket_address_enumerator_next_finish", ctypes.POINTER(_GSocketAddress), [
	("enumerator",		ctypes.POINTER(_GSocketAddressEnumerator)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_proxy_address_enumerator_get_type = _rpythonic_function_(		"g_proxy_address_enumerator_get_type", ctypes.c_uint, [] )

lookup = _rpythonic_function_(		"lookup", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("resolver",		ctypes.POINTER(_GProxyResolver)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

lookup_async = _rpythonic_function_(		"lookup_async", ctypes.c_void_p, [
	("resolver",		ctypes.POINTER(_GProxyResolver)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

lookup_finish = _rpythonic_function_(		"lookup_finish", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("resolver",		ctypes.POINTER(_GProxyResolver)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_proxy_resolver_get_type = _rpythonic_function_(		"g_proxy_resolver_get_type", ctypes.c_uint, [] )

g_proxy_resolver_get_default = _rpythonic_function_(		"g_proxy_resolver_get_default", ctypes.POINTER(_GProxyResolver), [] )

g_proxy_resolver_is_supported = _rpythonic_function_(		"g_proxy_resolver_is_supported", ctypes.c_int, [
	("resolver",		ctypes.POINTER(_GProxyResolver)),] )

g_proxy_resolver_lookup = _rpythonic_function_(		"g_proxy_resolver_lookup", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("resolver",		ctypes.POINTER(_GProxyResolver)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_proxy_resolver_lookup_async = _rpythonic_function_(		"g_proxy_resolver_lookup_async", ctypes.c_void_p, [
	("resolver",		ctypes.POINTER(_GProxyResolver)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_proxy_resolver_lookup_finish = _rpythonic_function_(		"g_proxy_resolver_lookup_finish", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("resolver",		ctypes.POINTER(_GProxyResolver)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

reload = _rpythonic_function_(		"reload", ctypes.c_void_p, [
	("resolver",		ctypes.POINTER(_GResolver)),] )

lookup_by_name = _rpythonic_function_(		"lookup_by_name", ctypes.POINTER(_GList), [
	("resolver",		ctypes.POINTER(_GResolver)),
	("hostname",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

lookup_by_name_async = _rpythonic_function_(		"lookup_by_name_async", ctypes.c_void_p, [
	("resolver",		ctypes.POINTER(_GResolver)),
	("hostname",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

lookup_by_name_finish = _rpythonic_function_(		"lookup_by_name_finish", ctypes.POINTER(_GList), [
	("resolver",		ctypes.POINTER(_GResolver)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

lookup_by_address = _rpythonic_function_(		"lookup_by_address", ctypes.POINTER(ctypes.c_char), [
	("resolver",		ctypes.POINTER(_GResolver)),
	("address",		ctypes.POINTER(_GInetAddress)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

lookup_by_address_async = _rpythonic_function_(		"lookup_by_address_async", ctypes.c_void_p, [
	("resolver",		ctypes.POINTER(_GResolver)),
	("address",		ctypes.POINTER(_GInetAddress)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

lookup_by_address_finish = _rpythonic_function_(		"lookup_by_address_finish", ctypes.POINTER(ctypes.c_char), [
	("resolver",		ctypes.POINTER(_GResolver)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

lookup_service = _rpythonic_function_(		"lookup_service", ctypes.POINTER(_GList), [
	("resolver",		ctypes.POINTER(_GResolver)),
	("rrname",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

lookup_service_async = _rpythonic_function_(		"lookup_service_async", ctypes.c_void_p, [
	("resolver",		ctypes.POINTER(_GResolver)),
	("rrname",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

lookup_service_finish = _rpythonic_function_(		"lookup_service_finish", ctypes.POINTER(_GList), [
	("resolver",		ctypes.POINTER(_GResolver)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_resolver_get_default = _rpythonic_function_(		"g_resolver_get_default", ctypes.POINTER(_GResolver), [] )

g_resolver_get_type = _rpythonic_function_(		"g_resolver_get_type", ctypes.c_uint, [] )

g_resolver_set_default = _rpythonic_function_(		"g_resolver_set_default", ctypes.c_void_p, [
	("resolver",		ctypes.POINTER(_GResolver)),] )

g_resolver_lookup_by_name = _rpythonic_function_(		"g_resolver_lookup_by_name", ctypes.POINTER(_GList), [
	("resolver",		ctypes.POINTER(_GResolver)),
	("hostname",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_resolver_lookup_by_name_async = _rpythonic_function_(		"g_resolver_lookup_by_name_async", ctypes.c_void_p, [
	("resolver",		ctypes.POINTER(_GResolver)),
	("hostname",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_resolver_lookup_by_name_finish = _rpythonic_function_(		"g_resolver_lookup_by_name_finish", ctypes.POINTER(_GList), [
	("resolver",		ctypes.POINTER(_GResolver)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_resolver_free_addresses = _rpythonic_function_(		"g_resolver_free_addresses", ctypes.c_void_p, [
	("addresses",		ctypes.POINTER(_GList)),] )

g_resolver_lookup_by_address = _rpythonic_function_(		"g_resolver_lookup_by_address", ctypes.POINTER(ctypes.c_char), [
	("resolver",		ctypes.POINTER(_GResolver)),
	("address",		ctypes.POINTER(_GInetAddress)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_resolver_lookup_by_address_async = _rpythonic_function_(		"g_resolver_lookup_by_address_async", ctypes.c_void_p, [
	("resolver",		ctypes.POINTER(_GResolver)),
	("address",		ctypes.POINTER(_GInetAddress)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_resolver_lookup_by_address_finish = _rpythonic_function_(		"g_resolver_lookup_by_address_finish", ctypes.POINTER(ctypes.c_char), [
	("resolver",		ctypes.POINTER(_GResolver)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_resolver_lookup_service = _rpythonic_function_(		"g_resolver_lookup_service", ctypes.POINTER(_GList), [
	("resolver",		ctypes.POINTER(_GResolver)),
	("service",		ctypes.POINTER(ctypes.c_char)),
	("protocol",		ctypes.POINTER(ctypes.c_char)),
	("domain",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_resolver_lookup_service_async = _rpythonic_function_(		"g_resolver_lookup_service_async", ctypes.c_void_p, [
	("resolver",		ctypes.POINTER(_GResolver)),
	("service",		ctypes.POINTER(ctypes.c_char)),
	("protocol",		ctypes.POINTER(ctypes.c_char)),
	("domain",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_resolver_lookup_service_finish = _rpythonic_function_(		"g_resolver_lookup_service_finish", ctypes.POINTER(_GList), [
	("resolver",		ctypes.POINTER(_GResolver)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_resolver_free_targets = _rpythonic_function_(		"g_resolver_free_targets", ctypes.c_void_p, [
	("targets",		ctypes.POINTER(_GList)),] )

g_resolver_error_quark = _rpythonic_function_(		"g_resolver_error_quark", ctypes.c_uint, [] )

g_seekable_get_type = _rpythonic_function_(		"g_seekable_get_type", ctypes.c_uint, [] )

g_seekable_tell = _rpythonic_function_(		"g_seekable_tell", ctypes.c_longlong, [
	("seekable",		ctypes.POINTER(_GSeekable)),] )

g_seekable_can_seek = _rpythonic_function_(		"g_seekable_can_seek", ctypes.c_int, [
	("seekable",		ctypes.POINTER(_GSeekable)),] )

g_seekable_seek = _rpythonic_function_(		"g_seekable_seek", ctypes.c_int, [
	("seekable",		ctypes.POINTER(_GSeekable)),
	("offset",		ctypes.c_longlong),
	("C_type",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_seekable_can_truncate = _rpythonic_function_(		"g_seekable_can_truncate", ctypes.c_int, [
	("seekable",		ctypes.POINTER(_GSeekable)),] )

g_seekable_truncate = _rpythonic_function_(		"g_seekable_truncate", ctypes.c_int, [
	("seekable",		ctypes.POINTER(_GSeekable)),
	("offset",		ctypes.c_longlong),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

writable_changed = _rpythonic_function_(		"writable_changed", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

writable_change_event = _rpythonic_function_(		"writable_change_event", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.c_uint),] )

change_event = _rpythonic_function_(		"change_event", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GSettings)),
	("keys",		ctypes.POINTER(ctypes.c_uint)),
	("n_keys",		ctypes.c_int),] )

g_settings_get_type = _rpythonic_function_(		"g_settings_get_type", ctypes.c_uint, [] )

g_settings_list_schemas = _rpythonic_function_(		"g_settings_list_schemas", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [] )

g_settings_list_relocatable_schemas = _rpythonic_function_(		"g_settings_list_relocatable_schemas", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [] )

g_settings_new = _rpythonic_function_(		"g_settings_new", ctypes.POINTER(_GSettings), [
	("schema",		ctypes.POINTER(ctypes.c_char)),] )

g_settings_new_with_path = _rpythonic_function_(		"g_settings_new_with_path", ctypes.POINTER(_GSettings), [
	("schema",		ctypes.POINTER(ctypes.c_char)),
	("path",		ctypes.POINTER(ctypes.c_char)),] )

g_settings_new_with_backend = _rpythonic_function_(		"g_settings_new_with_backend", ctypes.POINTER(_GSettings), [
	("schema",		ctypes.POINTER(ctypes.c_char)),
	("backend",		ctypes.POINTER(_GSettingsBackend)),] )

g_settings_new_with_backend_and_path = _rpythonic_function_(		"g_settings_new_with_backend_and_path", ctypes.POINTER(_GSettings), [
	("schema",		ctypes.POINTER(ctypes.c_char)),
	("backend",		ctypes.POINTER(_GSettingsBackend)),
	("path",		ctypes.POINTER(ctypes.c_char)),] )

g_settings_list_children = _rpythonic_function_(		"g_settings_list_children", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("settings",		ctypes.POINTER(_GSettings)),] )

g_settings_list_keys = _rpythonic_function_(		"g_settings_list_keys", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("settings",		ctypes.POINTER(_GSettings)),] )

g_settings_get_range = _rpythonic_function_(		"g_settings_get_range", ctypes.POINTER(_GVariant), [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

g_settings_range_check = _rpythonic_function_(		"g_settings_range_check", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(_GVariant)),] )

g_settings_set_value = _rpythonic_function_(		"g_settings_set_value", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(_GVariant)),] )

g_settings_get_value = _rpythonic_function_(		"g_settings_get_value", ctypes.POINTER(_GVariant), [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

g_settings_reset = _rpythonic_function_(		"g_settings_reset", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

g_settings_get_int = _rpythonic_function_(		"g_settings_get_int", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

g_settings_set_int = _rpythonic_function_(		"g_settings_set_int", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_int),] )

g_settings_get_uint = _rpythonic_function_(		"g_settings_get_uint", ctypes.c_uint, [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

g_settings_set_uint = _rpythonic_function_(		"g_settings_set_uint", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_uint),] )

g_settings_get_string = _rpythonic_function_(		"g_settings_get_string", ctypes.POINTER(ctypes.c_char), [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

g_settings_set_string = _rpythonic_function_(		"g_settings_set_string", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

g_settings_get_boolean = _rpythonic_function_(		"g_settings_get_boolean", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

g_settings_set_boolean = _rpythonic_function_(		"g_settings_set_boolean", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_int),] )

g_settings_get_double = _rpythonic_function_(		"g_settings_get_double", ctypes.c_double, [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

g_settings_set_double = _rpythonic_function_(		"g_settings_set_double", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_double),] )

g_settings_get_strv = _rpythonic_function_(		"g_settings_get_strv", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

g_settings_set_strv = _rpythonic_function_(		"g_settings_set_strv", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_settings_get_enum = _rpythonic_function_(		"g_settings_get_enum", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

g_settings_set_enum = _rpythonic_function_(		"g_settings_set_enum", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_int),] )

g_settings_get_flags = _rpythonic_function_(		"g_settings_get_flags", ctypes.c_uint, [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

g_settings_set_flags = _rpythonic_function_(		"g_settings_set_flags", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_uint),] )

g_settings_get_child = _rpythonic_function_(		"g_settings_get_child", ctypes.POINTER(_GSettings), [
	("settings",		ctypes.POINTER(_GSettings)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_settings_is_writable = _rpythonic_function_(		"g_settings_is_writable", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GSettings)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_settings_delay = _rpythonic_function_(		"g_settings_delay", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GSettings)),] )

g_settings_apply = _rpythonic_function_(		"g_settings_apply", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GSettings)),] )

g_settings_revert = _rpythonic_function_(		"g_settings_revert", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GSettings)),] )

g_settings_get_has_unapplied = _rpythonic_function_(		"g_settings_get_has_unapplied", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GSettings)),] )

g_settings_sync = _rpythonic_function_(		"g_settings_sync", ctypes.c_void_p, [] )

GSettingsBindSetMapping = _rpythonic_function_(		"GSettingsBindSetMapping", ctypes.POINTER(_GVariant), [
	("value",		ctypes.POINTER(_GValue)),
	("expected_type",		ctypes.POINTER(_GVariantType)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GSettingsBindGetMapping = _rpythonic_function_(		"GSettingsBindGetMapping", ctypes.c_int, [
	("value",		ctypes.POINTER(_GValue)),
	("variant",		ctypes.POINTER(_GVariant)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GSettingsGetMapping = _rpythonic_function_(		"GSettingsGetMapping", ctypes.c_int, [
	("value",		ctypes.POINTER(_GVariant)),
	("result",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_settings_bind = _rpythonic_function_(		"g_settings_bind", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("C_object",		ctypes.POINTER(ctypes.c_void_p)),
	("property",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),] )

g_settings_bind_with_mapping = _rpythonic_function_(		"g_settings_bind_with_mapping", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("C_object",		ctypes.POINTER(ctypes.c_void_p)),
	("property",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("get_mapping",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GValue),ctypes.POINTER(_GVariant),ctypes.POINTER(ctypes.c_void_p),)),
	("set_mapping",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_GVariant), ctypes.POINTER(_GValue),ctypes.POINTER(_GVariantType),ctypes.POINTER(ctypes.c_void_p),))),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_settings_bind_writable = _rpythonic_function_(		"g_settings_bind_writable", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("C_object",		ctypes.POINTER(ctypes.c_void_p)),
	("property",		ctypes.POINTER(ctypes.c_char)),
	("inverted",		ctypes.c_int),] )

g_settings_unbind = _rpythonic_function_(		"g_settings_unbind", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(ctypes.c_void_p)),
	("property",		ctypes.POINTER(ctypes.c_char)),] )

g_settings_get_mapped = _rpythonic_function_(		"g_settings_get_mapped", ctypes.POINTER(ctypes.c_void_p), [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("mapping",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GVariant),ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_simple_async_result_get_type = _rpythonic_function_(		"g_simple_async_result_get_type", ctypes.c_uint, [] )

g_simple_async_result_new = _rpythonic_function_(		"g_simple_async_result_new", ctypes.POINTER(_GSimpleAsyncResult), [
	("source_object",		ctypes.POINTER(_GObject)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("source_tag",		ctypes.POINTER(ctypes.c_void_p)),] )

g_simple_async_result_new_from_error = _rpythonic_function_(		"g_simple_async_result_new_from_error", ctypes.POINTER(_GSimpleAsyncResult), [
	("source_object",		ctypes.POINTER(_GObject)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(_GError)),] )

g_simple_async_result_new_take_error = _rpythonic_function_(		"g_simple_async_result_new_take_error", ctypes.POINTER(_GSimpleAsyncResult), [
	("source_object",		ctypes.POINTER(_GObject)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(_GError)),] )

g_simple_async_result_set_op_res_gpointer = _rpythonic_function_(		"g_simple_async_result_set_op_res_gpointer", ctypes.c_void_p, [
	("simple",		ctypes.POINTER(_GSimpleAsyncResult)),
	("op_res",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy_op_res",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_simple_async_result_get_op_res_gpointer = _rpythonic_function_(		"g_simple_async_result_get_op_res_gpointer", ctypes.POINTER(ctypes.c_void_p), [
	("simple",		ctypes.POINTER(_GSimpleAsyncResult)),] )

g_simple_async_result_set_op_res_gssize = _rpythonic_function_(		"g_simple_async_result_set_op_res_gssize", ctypes.c_void_p, [
	("simple",		ctypes.POINTER(_GSimpleAsyncResult)),
	("op_res",		ctypes.c_int),] )

g_simple_async_result_get_op_res_gssize = _rpythonic_function_(		"g_simple_async_result_get_op_res_gssize", ctypes.c_int, [
	("simple",		ctypes.POINTER(_GSimpleAsyncResult)),] )

g_simple_async_result_set_op_res_gboolean = _rpythonic_function_(		"g_simple_async_result_set_op_res_gboolean", ctypes.c_void_p, [
	("simple",		ctypes.POINTER(_GSimpleAsyncResult)),
	("op_res",		ctypes.c_int),] )

g_simple_async_result_get_op_res_gboolean = _rpythonic_function_(		"g_simple_async_result_get_op_res_gboolean", ctypes.c_int, [
	("simple",		ctypes.POINTER(_GSimpleAsyncResult)),] )

g_simple_async_result_get_source_tag = _rpythonic_function_(		"g_simple_async_result_get_source_tag", ctypes.POINTER(ctypes.c_void_p), [
	("simple",		ctypes.POINTER(_GSimpleAsyncResult)),] )

g_simple_async_result_set_handle_cancellation = _rpythonic_function_(		"g_simple_async_result_set_handle_cancellation", ctypes.c_void_p, [
	("simple",		ctypes.POINTER(_GSimpleAsyncResult)),
	("handle_cancellation",		ctypes.c_int),] )

g_simple_async_result_complete = _rpythonic_function_(		"g_simple_async_result_complete", ctypes.c_void_p, [
	("simple",		ctypes.POINTER(_GSimpleAsyncResult)),] )

g_simple_async_result_complete_in_idle = _rpythonic_function_(		"g_simple_async_result_complete_in_idle", ctypes.c_void_p, [
	("simple",		ctypes.POINTER(_GSimpleAsyncResult)),] )

g_simple_async_result_run_in_thread = _rpythonic_function_(		"g_simple_async_result_run_in_thread", ctypes.c_void_p, [
	("simple",		ctypes.POINTER(_GSimpleAsyncResult)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GSimpleAsyncResult),ctypes.POINTER(_GObject),ctypes.POINTER(_GCancellable),)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),] )

g_simple_async_result_set_from_error = _rpythonic_function_(		"g_simple_async_result_set_from_error", ctypes.c_void_p, [
	("simple",		ctypes.POINTER(_GSimpleAsyncResult)),
	("error",		ctypes.POINTER(_GError)),] )

g_simple_async_result_take_error = _rpythonic_function_(		"g_simple_async_result_take_error", ctypes.c_void_p, [
	("simple",		ctypes.POINTER(_GSimpleAsyncResult)),
	("error",		ctypes.POINTER(_GError)),] )

g_simple_async_result_propagate_error = _rpythonic_function_(		"g_simple_async_result_propagate_error", ctypes.c_int, [
	("simple",		ctypes.POINTER(_GSimpleAsyncResult)),
	("dest",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_simple_async_result_set_error_va = _rpythonic_function_(		"g_simple_async_result_set_error_va", ctypes.c_void_p, [
	("simple",		ctypes.POINTER(_GSimpleAsyncResult)),
	("domain",		ctypes.c_uint),
	("code",		ctypes.c_int),
	("format",		ctypes.POINTER(ctypes.c_char)),
	("args",		ctypes.c_char),] )

g_simple_async_result_is_valid = _rpythonic_function_(		"g_simple_async_result_is_valid", ctypes.c_int, [
	("result",		ctypes.POINTER(_GAsyncResult)),
	("source",		ctypes.POINTER(_GObject)),
	("source_tag",		ctypes.POINTER(ctypes.c_void_p)),] )

g_simple_async_report_gerror_in_idle = _rpythonic_function_(		"g_simple_async_report_gerror_in_idle", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(_GError)),] )

g_simple_async_report_take_gerror_in_idle = _rpythonic_function_(		"g_simple_async_report_take_gerror_in_idle", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(_GError)),] )

g_simple_permission_get_type = _rpythonic_function_(		"g_simple_permission_get_type", ctypes.c_uint, [] )

g_simple_permission_new = _rpythonic_function_(		"g_simple_permission_new", ctypes.POINTER(_GPermission), [
	("allowed",		ctypes.c_int),] )

g_socket_client_get_type = _rpythonic_function_(		"g_socket_client_get_type", ctypes.c_uint, [] )

g_socket_client_new = _rpythonic_function_(		"g_socket_client_new", ctypes.POINTER(_GSocketClient), [] )

g_socket_client_get_family = _rpythonic_function_(		"g_socket_client_get_family", ctypes.c_int, [
	("client",		ctypes.POINTER(_GSocketClient)),] )

g_socket_client_set_family = _rpythonic_function_(		"g_socket_client_set_family", ctypes.c_void_p, [
	("client",		ctypes.POINTER(_GSocketClient)),
	("family",		ctypes.c_int),] )

g_socket_client_get_socket_type = _rpythonic_function_(		"g_socket_client_get_socket_type", ctypes.c_int, [
	("client",		ctypes.POINTER(_GSocketClient)),] )

g_socket_client_set_socket_type = _rpythonic_function_(		"g_socket_client_set_socket_type", ctypes.c_void_p, [
	("client",		ctypes.POINTER(_GSocketClient)),
	("C_type",		ctypes.c_int),] )

g_socket_client_get_protocol = _rpythonic_function_(		"g_socket_client_get_protocol", ctypes.c_int, [
	("client",		ctypes.POINTER(_GSocketClient)),] )

g_socket_client_set_protocol = _rpythonic_function_(		"g_socket_client_set_protocol", ctypes.c_void_p, [
	("client",		ctypes.POINTER(_GSocketClient)),
	("protocol",		ctypes.c_int),] )

g_socket_client_get_local_address = _rpythonic_function_(		"g_socket_client_get_local_address", ctypes.POINTER(_GSocketAddress), [
	("client",		ctypes.POINTER(_GSocketClient)),] )

g_socket_client_set_local_address = _rpythonic_function_(		"g_socket_client_set_local_address", ctypes.c_void_p, [
	("client",		ctypes.POINTER(_GSocketClient)),
	("address",		ctypes.POINTER(_GSocketAddress)),] )

g_socket_client_get_timeout = _rpythonic_function_(		"g_socket_client_get_timeout", ctypes.c_uint, [
	("client",		ctypes.POINTER(_GSocketClient)),] )

g_socket_client_set_timeout = _rpythonic_function_(		"g_socket_client_set_timeout", ctypes.c_void_p, [
	("client",		ctypes.POINTER(_GSocketClient)),
	("timeout",		ctypes.c_uint),] )

g_socket_client_get_enable_proxy = _rpythonic_function_(		"g_socket_client_get_enable_proxy", ctypes.c_int, [
	("client",		ctypes.POINTER(_GSocketClient)),] )

g_socket_client_set_enable_proxy = _rpythonic_function_(		"g_socket_client_set_enable_proxy", ctypes.c_void_p, [
	("client",		ctypes.POINTER(_GSocketClient)),
	("enable",		ctypes.c_int),] )

g_socket_client_get_tls = _rpythonic_function_(		"g_socket_client_get_tls", ctypes.c_int, [
	("client",		ctypes.POINTER(_GSocketClient)),] )

g_socket_client_set_tls = _rpythonic_function_(		"g_socket_client_set_tls", ctypes.c_void_p, [
	("client",		ctypes.POINTER(_GSocketClient)),
	("tls",		ctypes.c_int),] )

g_socket_client_get_tls_validation_flags = _rpythonic_function_(		"g_socket_client_get_tls_validation_flags", ctypes.c_int, [
	("client",		ctypes.POINTER(_GSocketClient)),] )

g_socket_client_set_tls_validation_flags = _rpythonic_function_(		"g_socket_client_set_tls_validation_flags", ctypes.c_void_p, [
	("client",		ctypes.POINTER(_GSocketClient)),
	("flags",		ctypes.c_int),] )

g_socket_client_connect = _rpythonic_function_(		"g_socket_client_connect", ctypes.POINTER(_GSocketConnection), [
	("client",		ctypes.POINTER(_GSocketClient)),
	("connectable",		ctypes.POINTER(_GSocketConnectable)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_client_connect_to_host = _rpythonic_function_(		"g_socket_client_connect_to_host", ctypes.POINTER(_GSocketConnection), [
	("client",		ctypes.POINTER(_GSocketClient)),
	("host_and_port",		ctypes.POINTER(ctypes.c_char)),
	("default_port",		ctypes.c_ushort),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_client_connect_to_service = _rpythonic_function_(		"g_socket_client_connect_to_service", ctypes.POINTER(_GSocketConnection), [
	("client",		ctypes.POINTER(_GSocketClient)),
	("domain",		ctypes.POINTER(ctypes.c_char)),
	("service",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_client_connect_to_uri = _rpythonic_function_(		"g_socket_client_connect_to_uri", ctypes.POINTER(_GSocketConnection), [
	("client",		ctypes.POINTER(_GSocketClient)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("default_port",		ctypes.c_ushort),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_client_connect_async = _rpythonic_function_(		"g_socket_client_connect_async", ctypes.c_void_p, [
	("client",		ctypes.POINTER(_GSocketClient)),
	("connectable",		ctypes.POINTER(_GSocketConnectable)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_socket_client_connect_finish = _rpythonic_function_(		"g_socket_client_connect_finish", ctypes.POINTER(_GSocketConnection), [
	("client",		ctypes.POINTER(_GSocketClient)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_client_connect_to_host_async = _rpythonic_function_(		"g_socket_client_connect_to_host_async", ctypes.c_void_p, [
	("client",		ctypes.POINTER(_GSocketClient)),
	("host_and_port",		ctypes.POINTER(ctypes.c_char)),
	("default_port",		ctypes.c_ushort),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_socket_client_connect_to_host_finish = _rpythonic_function_(		"g_socket_client_connect_to_host_finish", ctypes.POINTER(_GSocketConnection), [
	("client",		ctypes.POINTER(_GSocketClient)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_client_connect_to_service_async = _rpythonic_function_(		"g_socket_client_connect_to_service_async", ctypes.c_void_p, [
	("client",		ctypes.POINTER(_GSocketClient)),
	("domain",		ctypes.POINTER(ctypes.c_char)),
	("service",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_socket_client_connect_to_service_finish = _rpythonic_function_(		"g_socket_client_connect_to_service_finish", ctypes.POINTER(_GSocketConnection), [
	("client",		ctypes.POINTER(_GSocketClient)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_client_connect_to_uri_async = _rpythonic_function_(		"g_socket_client_connect_to_uri_async", ctypes.c_void_p, [
	("client",		ctypes.POINTER(_GSocketClient)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("default_port",		ctypes.c_ushort),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_socket_client_connect_to_uri_finish = _rpythonic_function_(		"g_socket_client_connect_to_uri_finish", ctypes.POINTER(_GSocketConnection), [
	("client",		ctypes.POINTER(_GSocketClient)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_client_add_application_proxy = _rpythonic_function_(		"g_socket_client_add_application_proxy", ctypes.c_void_p, [
	("client",		ctypes.POINTER(_GSocketClient)),
	("protocol",		ctypes.POINTER(ctypes.c_char)),] )

C_enumerate = _rpythonic_function_(		"C_enumerate", ctypes.POINTER(_GSocketAddressEnumerator), [
	("connectable",		ctypes.POINTER(_GSocketConnectable)),] )

proxy_enumerate = _rpythonic_function_(		"proxy_enumerate", ctypes.POINTER(_GSocketAddressEnumerator), [
	("connectable",		ctypes.POINTER(_GSocketConnectable)),] )

g_socket_connectable_get_type = _rpythonic_function_(		"g_socket_connectable_get_type", ctypes.c_uint, [] )

g_socket_connectable_enumerate = _rpythonic_function_(		"g_socket_connectable_enumerate", ctypes.POINTER(_GSocketAddressEnumerator), [
	("connectable",		ctypes.POINTER(_GSocketConnectable)),] )

g_socket_connectable_proxy_enumerate = _rpythonic_function_(		"g_socket_connectable_proxy_enumerate", ctypes.POINTER(_GSocketAddressEnumerator), [
	("connectable",		ctypes.POINTER(_GSocketConnectable)),] )

g_socket_get_type = _rpythonic_function_(		"g_socket_get_type", ctypes.c_uint, [] )

g_socket_new = _rpythonic_function_(		"g_socket_new", ctypes.POINTER(_GSocket), [
	("family",		ctypes.c_int),
	("C_type",		ctypes.c_int),
	("protocol",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_new_from_fd = _rpythonic_function_(		"g_socket_new_from_fd", ctypes.POINTER(_GSocket), [
	("fd",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_get_fd = _rpythonic_function_(		"g_socket_get_fd", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),] )

g_socket_get_family = _rpythonic_function_(		"g_socket_get_family", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),] )

g_socket_get_socket_type = _rpythonic_function_(		"g_socket_get_socket_type", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),] )

g_socket_get_protocol = _rpythonic_function_(		"g_socket_get_protocol", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),] )

g_socket_get_local_address = _rpythonic_function_(		"g_socket_get_local_address", ctypes.POINTER(_GSocketAddress), [
	("socket",		ctypes.POINTER(_GSocket)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_get_remote_address = _rpythonic_function_(		"g_socket_get_remote_address", ctypes.POINTER(_GSocketAddress), [
	("socket",		ctypes.POINTER(_GSocket)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_set_blocking = _rpythonic_function_(		"g_socket_set_blocking", ctypes.c_void_p, [
	("socket",		ctypes.POINTER(_GSocket)),
	("blocking",		ctypes.c_int),] )

g_socket_get_blocking = _rpythonic_function_(		"g_socket_get_blocking", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),] )

g_socket_set_keepalive = _rpythonic_function_(		"g_socket_set_keepalive", ctypes.c_void_p, [
	("socket",		ctypes.POINTER(_GSocket)),
	("keepalive",		ctypes.c_int),] )

g_socket_get_keepalive = _rpythonic_function_(		"g_socket_get_keepalive", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),] )

g_socket_get_listen_backlog = _rpythonic_function_(		"g_socket_get_listen_backlog", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),] )

g_socket_set_listen_backlog = _rpythonic_function_(		"g_socket_set_listen_backlog", ctypes.c_void_p, [
	("socket",		ctypes.POINTER(_GSocket)),
	("backlog",		ctypes.c_int),] )

g_socket_get_timeout = _rpythonic_function_(		"g_socket_get_timeout", ctypes.c_uint, [
	("socket",		ctypes.POINTER(_GSocket)),] )

g_socket_set_timeout = _rpythonic_function_(		"g_socket_set_timeout", ctypes.c_void_p, [
	("socket",		ctypes.POINTER(_GSocket)),
	("timeout",		ctypes.c_uint),] )

g_socket_is_connected = _rpythonic_function_(		"g_socket_is_connected", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),] )

g_socket_bind = _rpythonic_function_(		"g_socket_bind", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),
	("address",		ctypes.POINTER(_GSocketAddress)),
	("allow_reuse",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_connect = _rpythonic_function_(		"g_socket_connect", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),
	("address",		ctypes.POINTER(_GSocketAddress)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_check_connect_result = _rpythonic_function_(		"g_socket_check_connect_result", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_condition_check = _rpythonic_function_(		"g_socket_condition_check", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),
	("condition",		ctypes.c_int),] )

g_socket_condition_wait = _rpythonic_function_(		"g_socket_condition_wait", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),
	("condition",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_accept = _rpythonic_function_(		"g_socket_accept", ctypes.POINTER(_GSocket), [
	("socket",		ctypes.POINTER(_GSocket)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_listen = _rpythonic_function_(		"g_socket_listen", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_receive = _rpythonic_function_(		"g_socket_receive", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_uint),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_receive_from = _rpythonic_function_(		"g_socket_receive_from", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),
	("address",		ctypes.POINTER(ctypes.POINTER(_GSocketAddress))),
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_uint),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_send = _rpythonic_function_(		"g_socket_send", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_uint),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_send_to = _rpythonic_function_(		"g_socket_send_to", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),
	("address",		ctypes.POINTER(_GSocketAddress)),
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_uint),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_receive_message = _rpythonic_function_(		"g_socket_receive_message", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),
	("address",		ctypes.POINTER(ctypes.POINTER(_GSocketAddress))),
	("vectors",		ctypes.POINTER(_GInputVector)),
	("num_vectors",		ctypes.c_int),
	("messages",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(_GSocketControlMessage)))),
	("num_messages",		ctypes.POINTER(ctypes.c_int)),
	("flags",		ctypes.POINTER(ctypes.c_int)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_send_message = _rpythonic_function_(		"g_socket_send_message", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),
	("address",		ctypes.POINTER(_GSocketAddress)),
	("vectors",		ctypes.POINTER(_GOutputVector)),
	("num_vectors",		ctypes.c_int),
	("messages",		ctypes.POINTER(ctypes.POINTER(_GSocketControlMessage))),
	("num_messages",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_close = _rpythonic_function_(		"g_socket_close", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_shutdown = _rpythonic_function_(		"g_socket_shutdown", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),
	("shutdown_read",		ctypes.c_int),
	("shutdown_write",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_is_closed = _rpythonic_function_(		"g_socket_is_closed", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),] )

g_socket_create_source = _rpythonic_function_(		"g_socket_create_source", ctypes.POINTER(_GSource), [
	("socket",		ctypes.POINTER(_GSocket)),
	("condition",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),] )

g_socket_speaks_ipv4 = _rpythonic_function_(		"g_socket_speaks_ipv4", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),] )

g_socket_get_credentials = _rpythonic_function_(		"g_socket_get_credentials", ctypes.POINTER(_GCredentials), [
	("socket",		ctypes.POINTER(_GSocket)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_receive_with_blocking = _rpythonic_function_(		"g_socket_receive_with_blocking", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_uint),
	("blocking",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_send_with_blocking = _rpythonic_function_(		"g_socket_send_with_blocking", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_uint),
	("blocking",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_connection_get_type = _rpythonic_function_(		"g_socket_connection_get_type", ctypes.c_uint, [] )

g_socket_connection_get_socket = _rpythonic_function_(		"g_socket_connection_get_socket", ctypes.POINTER(_GSocket), [
	("connection",		ctypes.POINTER(_GSocketConnection)),] )

g_socket_connection_get_local_address = _rpythonic_function_(		"g_socket_connection_get_local_address", ctypes.POINTER(_GSocketAddress), [
	("connection",		ctypes.POINTER(_GSocketConnection)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_connection_get_remote_address = _rpythonic_function_(		"g_socket_connection_get_remote_address", ctypes.POINTER(_GSocketAddress), [
	("connection",		ctypes.POINTER(_GSocketConnection)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_connection_factory_register_type = _rpythonic_function_(		"g_socket_connection_factory_register_type", ctypes.c_void_p, [
	("g_type",		ctypes.c_uint),
	("family",		ctypes.c_int),
	("C_type",		ctypes.c_int),
	("protocol",		ctypes.c_int),] )

g_socket_connection_factory_lookup_type = _rpythonic_function_(		"g_socket_connection_factory_lookup_type", ctypes.c_uint, [
	("family",		ctypes.c_int),
	("C_type",		ctypes.c_int),
	("protocol_id",		ctypes.c_int),] )

g_socket_connection_factory_create_connection = _rpythonic_function_(		"g_socket_connection_factory_create_connection", ctypes.POINTER(_GSocketConnection), [
	("socket",		ctypes.POINTER(_GSocket)),] )

get_size = _rpythonic_function_(		"get_size", ctypes.c_uint, [
	("message",		ctypes.POINTER(_GSocketControlMessage)),] )

get_level = _rpythonic_function_(		"get_level", ctypes.c_int, [
	("message",		ctypes.POINTER(_GSocketControlMessage)),] )

get_type = _rpythonic_function_(		"get_type", ctypes.c_int, [
	("message",		ctypes.POINTER(_GSocketControlMessage)),] )

serialize = _rpythonic_function_(		"serialize", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GSocketControlMessage)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

deserialize = _rpythonic_function_(		"deserialize", ctypes.POINTER(_GSocketControlMessage), [
	("level",		ctypes.c_int),
	("C_type",		ctypes.c_int),
	("size",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_socket_control_message_get_type = _rpythonic_function_(		"g_socket_control_message_get_type", ctypes.c_uint, [] )

g_socket_control_message_get_size = _rpythonic_function_(		"g_socket_control_message_get_size", ctypes.c_uint, [
	("message",		ctypes.POINTER(_GSocketControlMessage)),] )

g_socket_control_message_get_level = _rpythonic_function_(		"g_socket_control_message_get_level", ctypes.c_int, [
	("message",		ctypes.POINTER(_GSocketControlMessage)),] )

g_socket_control_message_get_msg_type = _rpythonic_function_(		"g_socket_control_message_get_msg_type", ctypes.c_int, [
	("message",		ctypes.POINTER(_GSocketControlMessage)),] )

g_socket_control_message_serialize = _rpythonic_function_(		"g_socket_control_message_serialize", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GSocketControlMessage)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_socket_control_message_deserialize = _rpythonic_function_(		"g_socket_control_message_deserialize", ctypes.POINTER(_GSocketControlMessage), [
	("level",		ctypes.c_int),
	("C_type",		ctypes.c_int),
	("size",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_socket_listener_get_type = _rpythonic_function_(		"g_socket_listener_get_type", ctypes.c_uint, [] )

g_socket_listener_new = _rpythonic_function_(		"g_socket_listener_new", ctypes.POINTER(_GSocketListener), [] )

g_socket_listener_set_backlog = _rpythonic_function_(		"g_socket_listener_set_backlog", ctypes.c_void_p, [
	("listener",		ctypes.POINTER(_GSocketListener)),
	("listen_backlog",		ctypes.c_int),] )

g_socket_listener_add_socket = _rpythonic_function_(		"g_socket_listener_add_socket", ctypes.c_int, [
	("listener",		ctypes.POINTER(_GSocketListener)),
	("socket",		ctypes.POINTER(_GSocket)),
	("source_object",		ctypes.POINTER(_GObject)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_listener_add_address = _rpythonic_function_(		"g_socket_listener_add_address", ctypes.c_int, [
	("listener",		ctypes.POINTER(_GSocketListener)),
	("address",		ctypes.POINTER(_GSocketAddress)),
	("C_type",		ctypes.c_int),
	("protocol",		ctypes.c_int),
	("source_object",		ctypes.POINTER(_GObject)),
	("effective_address",		ctypes.POINTER(ctypes.POINTER(_GSocketAddress))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_listener_add_inet_port = _rpythonic_function_(		"g_socket_listener_add_inet_port", ctypes.c_int, [
	("listener",		ctypes.POINTER(_GSocketListener)),
	("port",		ctypes.c_ushort),
	("source_object",		ctypes.POINTER(_GObject)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_listener_add_any_inet_port = _rpythonic_function_(		"g_socket_listener_add_any_inet_port", ctypes.c_ushort, [
	("listener",		ctypes.POINTER(_GSocketListener)),
	("source_object",		ctypes.POINTER(_GObject)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_listener_accept_socket = _rpythonic_function_(		"g_socket_listener_accept_socket", ctypes.POINTER(_GSocket), [
	("listener",		ctypes.POINTER(_GSocketListener)),
	("source_object",		ctypes.POINTER(ctypes.POINTER(_GObject))),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_listener_accept_socket_async = _rpythonic_function_(		"g_socket_listener_accept_socket_async", ctypes.c_void_p, [
	("listener",		ctypes.POINTER(_GSocketListener)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_socket_listener_accept_socket_finish = _rpythonic_function_(		"g_socket_listener_accept_socket_finish", ctypes.POINTER(_GSocket), [
	("listener",		ctypes.POINTER(_GSocketListener)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("source_object",		ctypes.POINTER(ctypes.POINTER(_GObject))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_listener_accept = _rpythonic_function_(		"g_socket_listener_accept", ctypes.POINTER(_GSocketConnection), [
	("listener",		ctypes.POINTER(_GSocketListener)),
	("source_object",		ctypes.POINTER(ctypes.POINTER(_GObject))),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_listener_accept_async = _rpythonic_function_(		"g_socket_listener_accept_async", ctypes.c_void_p, [
	("listener",		ctypes.POINTER(_GSocketListener)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_socket_listener_accept_finish = _rpythonic_function_(		"g_socket_listener_accept_finish", ctypes.POINTER(_GSocketConnection), [
	("listener",		ctypes.POINTER(_GSocketListener)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("source_object",		ctypes.POINTER(ctypes.POINTER(_GObject))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_listener_close = _rpythonic_function_(		"g_socket_listener_close", ctypes.c_void_p, [
	("listener",		ctypes.POINTER(_GSocketListener)),] )

incoming = _rpythonic_function_(		"incoming", ctypes.c_int, [
	("service",		ctypes.POINTER(_GSocketService)),
	("connection",		ctypes.POINTER(_GSocketConnection)),
	("source_object",		ctypes.POINTER(_GObject)),] )

g_socket_service_get_type = _rpythonic_function_(		"g_socket_service_get_type", ctypes.c_uint, [] )

g_socket_service_new = _rpythonic_function_(		"g_socket_service_new", ctypes.POINTER(_GSocketService), [] )

g_socket_service_start = _rpythonic_function_(		"g_socket_service_start", ctypes.c_void_p, [
	("service",		ctypes.POINTER(_GSocketService)),] )

g_socket_service_stop = _rpythonic_function_(		"g_socket_service_stop", ctypes.c_void_p, [
	("service",		ctypes.POINTER(_GSocketService)),] )

g_socket_service_is_active = _rpythonic_function_(		"g_socket_service_is_active", ctypes.c_int, [
	("service",		ctypes.POINTER(_GSocketService)),] )

g_srv_target_get_type = _rpythonic_function_(		"g_srv_target_get_type", ctypes.c_uint, [] )

g_srv_target_new = _rpythonic_function_(		"g_srv_target_new", ctypes.POINTER(_GSrvTarget), [
	("hostname",		ctypes.POINTER(ctypes.c_char)),
	("port",		ctypes.c_ushort),
	("priority",		ctypes.c_ushort),
	("weight",		ctypes.c_ushort),] )

g_srv_target_copy = _rpythonic_function_(		"g_srv_target_copy", ctypes.POINTER(_GSrvTarget), [
	("target",		ctypes.POINTER(_GSrvTarget)),] )

g_srv_target_free = _rpythonic_function_(		"g_srv_target_free", ctypes.c_void_p, [
	("target",		ctypes.POINTER(_GSrvTarget)),] )

g_srv_target_get_hostname = _rpythonic_function_(		"g_srv_target_get_hostname", ctypes.POINTER(ctypes.c_char), [
	("target",		ctypes.POINTER(_GSrvTarget)),] )

g_srv_target_get_port = _rpythonic_function_(		"g_srv_target_get_port", ctypes.c_ushort, [
	("target",		ctypes.POINTER(_GSrvTarget)),] )

g_srv_target_get_priority = _rpythonic_function_(		"g_srv_target_get_priority", ctypes.c_ushort, [
	("target",		ctypes.POINTER(_GSrvTarget)),] )

g_srv_target_get_weight = _rpythonic_function_(		"g_srv_target_get_weight", ctypes.c_ushort, [
	("target",		ctypes.POINTER(_GSrvTarget)),] )

g_srv_target_list_sort = _rpythonic_function_(		"g_srv_target_list_sort", ctypes.POINTER(_GList), [
	("targets",		ctypes.POINTER(_GList)),] )

g_tcp_connection_get_type = _rpythonic_function_(		"g_tcp_connection_get_type", ctypes.c_uint, [] )

g_tcp_connection_set_graceful_disconnect = _rpythonic_function_(		"g_tcp_connection_set_graceful_disconnect", ctypes.c_void_p, [
	("connection",		ctypes.POINTER(_GTcpConnection)),
	("graceful_disconnect",		ctypes.c_int),] )

g_tcp_connection_get_graceful_disconnect = _rpythonic_function_(		"g_tcp_connection_get_graceful_disconnect", ctypes.c_int, [
	("connection",		ctypes.POINTER(_GTcpConnection)),] )

g_tcp_wrapper_connection_get_type = _rpythonic_function_(		"g_tcp_wrapper_connection_get_type", ctypes.c_uint, [] )

g_tcp_wrapper_connection_new = _rpythonic_function_(		"g_tcp_wrapper_connection_new", ctypes.POINTER(_GSocketConnection), [
	("base_io_stream",		ctypes.POINTER(_GIOStream)),
	("socket",		ctypes.POINTER(_GSocket)),] )

g_tcp_wrapper_connection_get_base_io_stream = _rpythonic_function_(		"g_tcp_wrapper_connection_get_base_io_stream", ctypes.POINTER(_GIOStream), [
	("conn",		ctypes.POINTER(_GTcpWrapperConnection)),] )

g_themed_icon_get_type = _rpythonic_function_(		"g_themed_icon_get_type", ctypes.c_uint, [] )

g_themed_icon_new = _rpythonic_function_(		"g_themed_icon_new", ctypes.POINTER(_GIcon), [
	("iconname",		ctypes.POINTER(ctypes.c_char)),] )

g_themed_icon_new_with_default_fallbacks = _rpythonic_function_(		"g_themed_icon_new_with_default_fallbacks", ctypes.POINTER(_GIcon), [
	("iconname",		ctypes.POINTER(ctypes.c_char)),] )

g_themed_icon_new_from_names = _rpythonic_function_(		"g_themed_icon_new_from_names", ctypes.POINTER(_GIcon), [
	("iconnames",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("C_len",		ctypes.c_int),] )

g_themed_icon_prepend_name = _rpythonic_function_(		"g_themed_icon_prepend_name", ctypes.c_void_p, [
	("icon",		ctypes.POINTER(_GThemedIcon)),
	("iconname",		ctypes.POINTER(ctypes.c_char)),] )

g_themed_icon_append_name = _rpythonic_function_(		"g_themed_icon_append_name", ctypes.c_void_p, [
	("icon",		ctypes.POINTER(_GThemedIcon)),
	("iconname",		ctypes.POINTER(ctypes.c_char)),] )

g_themed_icon_get_names = _rpythonic_function_(		"g_themed_icon_get_names", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("icon",		ctypes.POINTER(_GThemedIcon)),] )

run = _rpythonic_function_(		"run", ctypes.c_int, [
	("service",		ctypes.POINTER(_GThreadedSocketService)),
	("connection",		ctypes.POINTER(_GSocketConnection)),
	("source_object",		ctypes.POINTER(_GObject)),] )

g_threaded_socket_service_get_type = _rpythonic_function_(		"g_threaded_socket_service_get_type", ctypes.c_uint, [] )

g_threaded_socket_service_new = _rpythonic_function_(		"g_threaded_socket_service_new", ctypes.POINTER(_GSocketService), [
	("max_threads",		ctypes.c_int),] )

supports_tls = _rpythonic_function_(		"supports_tls", ctypes.c_int, [
	("backend",		ctypes.POINTER(_GTlsBackend)),] )

get_certificate_type = _rpythonic_function_(		"get_certificate_type", ctypes.c_uint, [] )

get_client_connection_type = _rpythonic_function_(		"get_client_connection_type", ctypes.c_uint, [] )

get_server_connection_type = _rpythonic_function_(		"get_server_connection_type", ctypes.c_uint, [] )

get_file_database_type = _rpythonic_function_(		"get_file_database_type", ctypes.c_uint, [] )

get_default_database = _rpythonic_function_(		"get_default_database", ctypes.POINTER(_GTlsDatabase), [
	("backend",		ctypes.POINTER(_GTlsBackend)),] )

g_tls_backend_get_type = _rpythonic_function_(		"g_tls_backend_get_type", ctypes.c_uint, [] )

g_tls_backend_get_default = _rpythonic_function_(		"g_tls_backend_get_default", ctypes.POINTER(_GTlsBackend), [] )

g_tls_backend_get_default_database = _rpythonic_function_(		"g_tls_backend_get_default_database", ctypes.POINTER(_GTlsDatabase), [
	("backend",		ctypes.POINTER(_GTlsBackend)),] )

g_tls_backend_supports_tls = _rpythonic_function_(		"g_tls_backend_supports_tls", ctypes.c_int, [
	("backend",		ctypes.POINTER(_GTlsBackend)),] )

g_tls_backend_get_certificate_type = _rpythonic_function_(		"g_tls_backend_get_certificate_type", ctypes.c_uint, [
	("backend",		ctypes.POINTER(_GTlsBackend)),] )

g_tls_backend_get_client_connection_type = _rpythonic_function_(		"g_tls_backend_get_client_connection_type", ctypes.c_uint, [
	("backend",		ctypes.POINTER(_GTlsBackend)),] )

g_tls_backend_get_server_connection_type = _rpythonic_function_(		"g_tls_backend_get_server_connection_type", ctypes.c_uint, [
	("backend",		ctypes.POINTER(_GTlsBackend)),] )

g_tls_backend_get_file_database_type = _rpythonic_function_(		"g_tls_backend_get_file_database_type", ctypes.c_uint, [
	("backend",		ctypes.POINTER(_GTlsBackend)),] )

verify = _rpythonic_function_(		"verify", ctypes.c_int, [
	("cert",		ctypes.POINTER(_GTlsCertificate)),
	("identity",		ctypes.POINTER(_GSocketConnectable)),
	("trusted_ca",		ctypes.POINTER(_GTlsCertificate)),] )

g_tls_certificate_get_type = _rpythonic_function_(		"g_tls_certificate_get_type", ctypes.c_uint, [] )

g_tls_certificate_new_from_pem = _rpythonic_function_(		"g_tls_certificate_new_from_pem", ctypes.POINTER(_GTlsCertificate), [
	("data",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_tls_certificate_new_from_file = _rpythonic_function_(		"g_tls_certificate_new_from_file", ctypes.POINTER(_GTlsCertificate), [
	("file",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_tls_certificate_new_from_files = _rpythonic_function_(		"g_tls_certificate_new_from_files", ctypes.POINTER(_GTlsCertificate), [
	("cert_file",		ctypes.POINTER(ctypes.c_char)),
	("key_file",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_tls_certificate_list_new_from_file = _rpythonic_function_(		"g_tls_certificate_list_new_from_file", ctypes.POINTER(_GList), [
	("file",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_tls_certificate_get_issuer = _rpythonic_function_(		"g_tls_certificate_get_issuer", ctypes.POINTER(_GTlsCertificate), [
	("cert",		ctypes.POINTER(_GTlsCertificate)),] )

g_tls_certificate_verify = _rpythonic_function_(		"g_tls_certificate_verify", ctypes.c_int, [
	("cert",		ctypes.POINTER(_GTlsCertificate)),
	("identity",		ctypes.POINTER(_GSocketConnectable)),
	("trusted_ca",		ctypes.POINTER(_GTlsCertificate)),] )

accept_certificate = _rpythonic_function_(		"accept_certificate", ctypes.c_int, [
	("connection",		ctypes.POINTER(_GTlsConnection)),
	("peer_cert",		ctypes.POINTER(_GTlsCertificate)),
	("errors",		ctypes.c_int),] )

handshake = _rpythonic_function_(		"handshake", ctypes.c_int, [
	("conn",		ctypes.POINTER(_GTlsConnection)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

handshake_async = _rpythonic_function_(		"handshake_async", ctypes.c_void_p, [
	("conn",		ctypes.POINTER(_GTlsConnection)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

handshake_finish = _rpythonic_function_(		"handshake_finish", ctypes.c_int, [
	("conn",		ctypes.POINTER(_GTlsConnection)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_tls_connection_get_type = _rpythonic_function_(		"g_tls_connection_get_type", ctypes.c_uint, [] )

g_tls_connection_set_use_system_certdb = _rpythonic_function_(		"g_tls_connection_set_use_system_certdb", ctypes.c_void_p, [
	("conn",		ctypes.POINTER(_GTlsConnection)),
	("use_system_certdb",		ctypes.c_int),] )

g_tls_connection_get_use_system_certdb = _rpythonic_function_(		"g_tls_connection_get_use_system_certdb", ctypes.c_int, [
	("conn",		ctypes.POINTER(_GTlsConnection)),] )

g_tls_connection_set_database = _rpythonic_function_(		"g_tls_connection_set_database", ctypes.c_void_p, [
	("conn",		ctypes.POINTER(_GTlsConnection)),
	("database",		ctypes.POINTER(_GTlsDatabase)),] )

g_tls_connection_get_database = _rpythonic_function_(		"g_tls_connection_get_database", ctypes.POINTER(_GTlsDatabase), [
	("conn",		ctypes.POINTER(_GTlsConnection)),] )

g_tls_connection_set_certificate = _rpythonic_function_(		"g_tls_connection_set_certificate", ctypes.c_void_p, [
	("conn",		ctypes.POINTER(_GTlsConnection)),
	("certificate",		ctypes.POINTER(_GTlsCertificate)),] )

g_tls_connection_get_certificate = _rpythonic_function_(		"g_tls_connection_get_certificate", ctypes.POINTER(_GTlsCertificate), [
	("conn",		ctypes.POINTER(_GTlsConnection)),] )

g_tls_connection_set_interaction = _rpythonic_function_(		"g_tls_connection_set_interaction", ctypes.c_void_p, [
	("conn",		ctypes.POINTER(_GTlsConnection)),
	("interaction",		ctypes.POINTER(_GTlsInteraction)),] )

g_tls_connection_get_interaction = _rpythonic_function_(		"g_tls_connection_get_interaction", ctypes.POINTER(_GTlsInteraction), [
	("conn",		ctypes.POINTER(_GTlsConnection)),] )

g_tls_connection_get_peer_certificate = _rpythonic_function_(		"g_tls_connection_get_peer_certificate", ctypes.POINTER(_GTlsCertificate), [
	("conn",		ctypes.POINTER(_GTlsConnection)),] )

g_tls_connection_get_peer_certificate_errors = _rpythonic_function_(		"g_tls_connection_get_peer_certificate_errors", ctypes.c_int, [
	("conn",		ctypes.POINTER(_GTlsConnection)),] )

g_tls_connection_set_require_close_notify = _rpythonic_function_(		"g_tls_connection_set_require_close_notify", ctypes.c_void_p, [
	("conn",		ctypes.POINTER(_GTlsConnection)),
	("require_close_notify",		ctypes.c_int),] )

g_tls_connection_get_require_close_notify = _rpythonic_function_(		"g_tls_connection_get_require_close_notify", ctypes.c_int, [
	("conn",		ctypes.POINTER(_GTlsConnection)),] )

g_tls_connection_set_rehandshake_mode = _rpythonic_function_(		"g_tls_connection_set_rehandshake_mode", ctypes.c_void_p, [
	("conn",		ctypes.POINTER(_GTlsConnection)),
	("mode",		ctypes.c_int),] )

g_tls_connection_get_rehandshake_mode = _rpythonic_function_(		"g_tls_connection_get_rehandshake_mode", ctypes.c_int, [
	("conn",		ctypes.POINTER(_GTlsConnection)),] )

g_tls_connection_handshake = _rpythonic_function_(		"g_tls_connection_handshake", ctypes.c_int, [
	("conn",		ctypes.POINTER(_GTlsConnection)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_tls_connection_handshake_async = _rpythonic_function_(		"g_tls_connection_handshake_async", ctypes.c_void_p, [
	("conn",		ctypes.POINTER(_GTlsConnection)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_tls_connection_handshake_finish = _rpythonic_function_(		"g_tls_connection_handshake_finish", ctypes.c_int, [
	("conn",		ctypes.POINTER(_GTlsConnection)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_tls_error_quark = _rpythonic_function_(		"g_tls_error_quark", ctypes.c_uint, [] )

g_tls_connection_emit_accept_certificate = _rpythonic_function_(		"g_tls_connection_emit_accept_certificate", ctypes.c_int, [
	("conn",		ctypes.POINTER(_GTlsConnection)),
	("peer_cert",		ctypes.POINTER(_GTlsCertificate)),
	("errors",		ctypes.c_int),] )

g_tls_client_connection_get_type = _rpythonic_function_(		"g_tls_client_connection_get_type", ctypes.c_uint, [] )

g_tls_client_connection_new = _rpythonic_function_(		"g_tls_client_connection_new", ctypes.POINTER(_GIOStream), [
	("base_io_stream",		ctypes.POINTER(_GIOStream)),
	("server_identity",		ctypes.POINTER(_GSocketConnectable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_tls_client_connection_get_validation_flags = _rpythonic_function_(		"g_tls_client_connection_get_validation_flags", ctypes.c_int, [
	("conn",		ctypes.POINTER(_GTlsClientConnection)),] )

g_tls_client_connection_set_validation_flags = _rpythonic_function_(		"g_tls_client_connection_set_validation_flags", ctypes.c_void_p, [
	("conn",		ctypes.POINTER(_GTlsClientConnection)),
	("flags",		ctypes.c_int),] )

g_tls_client_connection_get_server_identity = _rpythonic_function_(		"g_tls_client_connection_get_server_identity", ctypes.POINTER(_GSocketConnectable), [
	("conn",		ctypes.POINTER(_GTlsClientConnection)),] )

g_tls_client_connection_set_server_identity = _rpythonic_function_(		"g_tls_client_connection_set_server_identity", ctypes.c_void_p, [
	("conn",		ctypes.POINTER(_GTlsClientConnection)),
	("identity",		ctypes.POINTER(_GSocketConnectable)),] )

g_tls_client_connection_get_use_ssl3 = _rpythonic_function_(		"g_tls_client_connection_get_use_ssl3", ctypes.c_int, [
	("conn",		ctypes.POINTER(_GTlsClientConnection)),] )

g_tls_client_connection_set_use_ssl3 = _rpythonic_function_(		"g_tls_client_connection_set_use_ssl3", ctypes.c_void_p, [
	("conn",		ctypes.POINTER(_GTlsClientConnection)),
	("use_ssl3",		ctypes.c_int),] )

g_tls_client_connection_get_accepted_cas = _rpythonic_function_(		"g_tls_client_connection_get_accepted_cas", ctypes.POINTER(_GList), [
	("conn",		ctypes.POINTER(_GTlsClientConnection)),] )

verify_chain = _rpythonic_function_(		"verify_chain", ctypes.c_int, [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("chain",		ctypes.POINTER(_GTlsCertificate)),
	("purpose",		ctypes.POINTER(ctypes.c_char)),
	("identity",		ctypes.POINTER(_GSocketConnectable)),
	("interaction",		ctypes.POINTER(_GTlsInteraction)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

verify_chain_finish = _rpythonic_function_(		"verify_chain_finish", ctypes.c_int, [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

verify_chain_async = _rpythonic_function_(		"verify_chain_async", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("chain",		ctypes.POINTER(_GTlsCertificate)),
	("purpose",		ctypes.POINTER(ctypes.c_char)),
	("identity",		ctypes.POINTER(_GSocketConnectable)),
	("interaction",		ctypes.POINTER(_GTlsInteraction)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

create_certificate_handle = _rpythonic_function_(		"create_certificate_handle", ctypes.POINTER(ctypes.c_char), [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("certificate",		ctypes.POINTER(_GTlsCertificate)),] )

lookup_certificate_for_handle = _rpythonic_function_(		"lookup_certificate_for_handle", ctypes.POINTER(_GTlsCertificate), [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("handle",		ctypes.POINTER(ctypes.c_char)),
	("interaction",		ctypes.POINTER(_GTlsInteraction)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

lookup_certificate_for_handle_async = _rpythonic_function_(		"lookup_certificate_for_handle_async", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("handle",		ctypes.POINTER(ctypes.c_char)),
	("interaction",		ctypes.POINTER(_GTlsInteraction)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

lookup_certificate_for_handle_finish = _rpythonic_function_(		"lookup_certificate_for_handle_finish", ctypes.POINTER(_GTlsCertificate), [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

lookup_certificate_issuer = _rpythonic_function_(		"lookup_certificate_issuer", ctypes.POINTER(_GTlsCertificate), [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("certificate",		ctypes.POINTER(_GTlsCertificate)),
	("interaction",		ctypes.POINTER(_GTlsInteraction)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

lookup_certificate_issuer_async = _rpythonic_function_(		"lookup_certificate_issuer_async", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("certificate",		ctypes.POINTER(_GTlsCertificate)),
	("interaction",		ctypes.POINTER(_GTlsInteraction)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

lookup_certificate_issuer_finish = _rpythonic_function_(		"lookup_certificate_issuer_finish", ctypes.POINTER(_GTlsCertificate), [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

lookup_certificates_issued_by = _rpythonic_function_(		"lookup_certificates_issued_by", ctypes.POINTER(_GList), [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("issuer_raw_dn",		ctypes.POINTER(_GByteArray)),
	("interaction",		ctypes.POINTER(_GTlsInteraction)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

lookup_certificates_issued_by_async = _rpythonic_function_(		"lookup_certificates_issued_by_async", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("issuer_raw_dn",		ctypes.POINTER(_GByteArray)),
	("interaction",		ctypes.POINTER(_GTlsInteraction)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

lookup_certificates_issued_by_finish = _rpythonic_function_(		"lookup_certificates_issued_by_finish", ctypes.POINTER(_GList), [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_tls_database_get_type = _rpythonic_function_(		"g_tls_database_get_type", ctypes.c_uint, [] )

g_tls_database_verify_chain = _rpythonic_function_(		"g_tls_database_verify_chain", ctypes.c_int, [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("chain",		ctypes.POINTER(_GTlsCertificate)),
	("purpose",		ctypes.POINTER(ctypes.c_char)),
	("identity",		ctypes.POINTER(_GSocketConnectable)),
	("interaction",		ctypes.POINTER(_GTlsInteraction)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_tls_database_verify_chain_async = _rpythonic_function_(		"g_tls_database_verify_chain_async", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("chain",		ctypes.POINTER(_GTlsCertificate)),
	("purpose",		ctypes.POINTER(ctypes.c_char)),
	("identity",		ctypes.POINTER(_GSocketConnectable)),
	("interaction",		ctypes.POINTER(_GTlsInteraction)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_tls_database_verify_chain_finish = _rpythonic_function_(		"g_tls_database_verify_chain_finish", ctypes.c_int, [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_tls_database_create_certificate_handle = _rpythonic_function_(		"g_tls_database_create_certificate_handle", ctypes.POINTER(ctypes.c_char), [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("certificate",		ctypes.POINTER(_GTlsCertificate)),] )

g_tls_database_lookup_certificate_for_handle = _rpythonic_function_(		"g_tls_database_lookup_certificate_for_handle", ctypes.POINTER(_GTlsCertificate), [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("handle",		ctypes.POINTER(ctypes.c_char)),
	("interaction",		ctypes.POINTER(_GTlsInteraction)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_tls_database_lookup_certificate_for_handle_async = _rpythonic_function_(		"g_tls_database_lookup_certificate_for_handle_async", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("handle",		ctypes.POINTER(ctypes.c_char)),
	("interaction",		ctypes.POINTER(_GTlsInteraction)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_tls_database_lookup_certificate_for_handle_finish = _rpythonic_function_(		"g_tls_database_lookup_certificate_for_handle_finish", ctypes.POINTER(_GTlsCertificate), [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_tls_database_lookup_certificate_issuer = _rpythonic_function_(		"g_tls_database_lookup_certificate_issuer", ctypes.POINTER(_GTlsCertificate), [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("certificate",		ctypes.POINTER(_GTlsCertificate)),
	("interaction",		ctypes.POINTER(_GTlsInteraction)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_tls_database_lookup_certificate_issuer_async = _rpythonic_function_(		"g_tls_database_lookup_certificate_issuer_async", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("certificate",		ctypes.POINTER(_GTlsCertificate)),
	("interaction",		ctypes.POINTER(_GTlsInteraction)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_tls_database_lookup_certificate_issuer_finish = _rpythonic_function_(		"g_tls_database_lookup_certificate_issuer_finish", ctypes.POINTER(_GTlsCertificate), [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_tls_database_lookup_certificates_issued_by = _rpythonic_function_(		"g_tls_database_lookup_certificates_issued_by", ctypes.POINTER(_GList), [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("issuer_raw_dn",		ctypes.POINTER(_GByteArray)),
	("interaction",		ctypes.POINTER(_GTlsInteraction)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_tls_database_lookup_certificates_issued_by_async = _rpythonic_function_(		"g_tls_database_lookup_certificates_issued_by_async", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("issuer_raw_dn",		ctypes.POINTER(_GByteArray)),
	("interaction",		ctypes.POINTER(_GTlsInteraction)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_tls_database_lookup_certificates_issued_by_finish = _rpythonic_function_(		"g_tls_database_lookup_certificates_issued_by_finish", ctypes.POINTER(_GList), [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_tls_file_database_get_type = _rpythonic_function_(		"g_tls_file_database_get_type", ctypes.c_uint, [] )

g_tls_file_database_new = _rpythonic_function_(		"g_tls_file_database_new", ctypes.POINTER(_GTlsDatabase), [
	("anchors",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

ask_password_async = _rpythonic_function_(		"ask_password_async", ctypes.c_void_p, [
	("interaction",		ctypes.POINTER(_GTlsInteraction)),
	("password",		ctypes.POINTER(_GTlsPassword)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

ask_password_finish = _rpythonic_function_(		"ask_password_finish", ctypes.c_int, [
	("interaction",		ctypes.POINTER(_GTlsInteraction)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_tls_interaction_get_type = _rpythonic_function_(		"g_tls_interaction_get_type", ctypes.c_uint, [] )

g_tls_interaction_invoke_ask_password = _rpythonic_function_(		"g_tls_interaction_invoke_ask_password", ctypes.c_int, [
	("interaction",		ctypes.POINTER(_GTlsInteraction)),
	("password",		ctypes.POINTER(_GTlsPassword)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_tls_interaction_ask_password = _rpythonic_function_(		"g_tls_interaction_ask_password", ctypes.c_int, [
	("interaction",		ctypes.POINTER(_GTlsInteraction)),
	("password",		ctypes.POINTER(_GTlsPassword)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_tls_interaction_ask_password_async = _rpythonic_function_(		"g_tls_interaction_ask_password_async", ctypes.c_void_p, [
	("interaction",		ctypes.POINTER(_GTlsInteraction)),
	("password",		ctypes.POINTER(_GTlsPassword)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_tls_interaction_ask_password_finish = _rpythonic_function_(		"g_tls_interaction_ask_password_finish", ctypes.c_int, [
	("interaction",		ctypes.POINTER(_GTlsInteraction)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_tls_server_connection_get_type = _rpythonic_function_(		"g_tls_server_connection_get_type", ctypes.c_uint, [] )

g_tls_server_connection_new = _rpythonic_function_(		"g_tls_server_connection_new", ctypes.POINTER(_GIOStream), [
	("base_io_stream",		ctypes.POINTER(_GIOStream)),
	("certificate",		ctypes.POINTER(_GTlsCertificate)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

get_value = _rpythonic_function_(		"get_value", ctypes.POINTER(ctypes.c_ubyte), [
	("password",		ctypes.POINTER(_GTlsPassword)),
	("length",		ctypes.POINTER(ctypes.c_uint)),] )

set_value = _rpythonic_function_(		"set_value", ctypes.c_void_p, [
	("password",		ctypes.POINTER(_GTlsPassword)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),
	("length",		ctypes.c_int),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

get_default_warning = _rpythonic_function_(		"get_default_warning", ctypes.POINTER(ctypes.c_char), [
	("password",		ctypes.POINTER(_GTlsPassword)),] )

g_tls_password_get_type = _rpythonic_function_(		"g_tls_password_get_type", ctypes.c_uint, [] )

g_tls_password_new = _rpythonic_function_(		"g_tls_password_new", ctypes.POINTER(_GTlsPassword), [
	("flags",		ctypes.c_int),
	("description",		ctypes.POINTER(ctypes.c_char)),] )

g_tls_password_get_value = _rpythonic_function_(		"g_tls_password_get_value", ctypes.POINTER(ctypes.c_ubyte), [
	("password",		ctypes.POINTER(_GTlsPassword)),
	("length",		ctypes.POINTER(ctypes.c_uint)),] )

g_tls_password_set_value = _rpythonic_function_(		"g_tls_password_set_value", ctypes.c_void_p, [
	("password",		ctypes.POINTER(_GTlsPassword)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),
	("length",		ctypes.c_int),] )

g_tls_password_set_value_full = _rpythonic_function_(		"g_tls_password_set_value_full", ctypes.c_void_p, [
	("password",		ctypes.POINTER(_GTlsPassword)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),
	("length",		ctypes.c_int),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_tls_password_get_flags = _rpythonic_function_(		"g_tls_password_get_flags", ctypes.c_int, [
	("password",		ctypes.POINTER(_GTlsPassword)),] )

g_tls_password_set_flags = _rpythonic_function_(		"g_tls_password_set_flags", ctypes.c_void_p, [
	("password",		ctypes.POINTER(_GTlsPassword)),
	("flags",		ctypes.c_int),] )

g_tls_password_get_description = _rpythonic_function_(		"g_tls_password_get_description", ctypes.POINTER(ctypes.c_char), [
	("password",		ctypes.POINTER(_GTlsPassword)),] )

g_tls_password_set_description = _rpythonic_function_(		"g_tls_password_set_description", ctypes.c_void_p, [
	("password",		ctypes.POINTER(_GTlsPassword)),
	("description",		ctypes.POINTER(ctypes.c_char)),] )

g_tls_password_get_warning = _rpythonic_function_(		"g_tls_password_get_warning", ctypes.POINTER(ctypes.c_char), [
	("password",		ctypes.POINTER(_GTlsPassword)),] )

g_tls_password_set_warning = _rpythonic_function_(		"g_tls_password_set_warning", ctypes.c_void_p, [
	("password",		ctypes.POINTER(_GTlsPassword)),
	("warning",		ctypes.POINTER(ctypes.c_char)),] )

is_active = _rpythonic_function_(		"is_active", ctypes.c_int, [
	("vfs",		ctypes.POINTER(_GVfs)),] )

get_file_for_path = _rpythonic_function_(		"get_file_for_path", ctypes.POINTER(_GFile), [
	("vfs",		ctypes.POINTER(_GVfs)),
	("path",		ctypes.POINTER(ctypes.c_char)),] )

get_file_for_uri = _rpythonic_function_(		"get_file_for_uri", ctypes.POINTER(_GFile), [
	("vfs",		ctypes.POINTER(_GVfs)),
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

get_supported_uri_schemes = _rpythonic_function_(		"get_supported_uri_schemes", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("vfs",		ctypes.POINTER(_GVfs)),] )

parse_name = _rpythonic_function_(		"parse_name", ctypes.POINTER(_GFile), [
	("vfs",		ctypes.POINTER(_GVfs)),
	("parse_name",		ctypes.POINTER(ctypes.c_char)),] )

local_file_add_info = _rpythonic_function_(		"local_file_add_info", ctypes.c_void_p, [
	("vfs",		ctypes.POINTER(_GVfs)),
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("device",		ctypes.c_ulonglong),
	("attribute_matcher",		ctypes.POINTER(_GFileAttributeMatcher)),
	("info",		ctypes.POINTER(_GFileInfo)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("extra_data",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("free_extra_data",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.c_void_p, ))),] )

add_writable_namespaces = _rpythonic_function_(		"add_writable_namespaces", ctypes.c_void_p, [
	("vfs",		ctypes.POINTER(_GVfs)),
	("C_list",		ctypes.POINTER(_GFileAttributeInfoList)),] )

local_file_set_attributes = _rpythonic_function_(		"local_file_set_attributes", ctypes.c_int, [
	("vfs",		ctypes.POINTER(_GVfs)),
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("info",		ctypes.POINTER(_GFileInfo)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

local_file_removed = _rpythonic_function_(		"local_file_removed", ctypes.c_void_p, [
	("vfs",		ctypes.POINTER(_GVfs)),
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

local_file_moved = _rpythonic_function_(		"local_file_moved", ctypes.c_void_p, [
	("vfs",		ctypes.POINTER(_GVfs)),
	("source",		ctypes.POINTER(ctypes.c_char)),
	("dest",		ctypes.POINTER(ctypes.c_char)),] )

g_vfs_is_active = _rpythonic_function_(		"g_vfs_is_active", ctypes.c_int, [
	("vfs",		ctypes.POINTER(_GVfs)),] )

g_vfs_get_type = _rpythonic_function_(		"g_vfs_get_type", ctypes.c_uint, [] )

g_vfs_get_file_for_path = _rpythonic_function_(		"g_vfs_get_file_for_path", ctypes.POINTER(_GFile), [
	("vfs",		ctypes.POINTER(_GVfs)),
	("path",		ctypes.POINTER(ctypes.c_char)),] )

g_vfs_get_file_for_uri = _rpythonic_function_(		"g_vfs_get_file_for_uri", ctypes.POINTER(_GFile), [
	("vfs",		ctypes.POINTER(_GVfs)),
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

g_vfs_get_supported_uri_schemes = _rpythonic_function_(		"g_vfs_get_supported_uri_schemes", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("vfs",		ctypes.POINTER(_GVfs)),] )

g_vfs_parse_name = _rpythonic_function_(		"g_vfs_parse_name", ctypes.POINTER(_GFile), [
	("vfs",		ctypes.POINTER(_GVfs)),
	("parse_name",		ctypes.POINTER(ctypes.c_char)),] )

g_vfs_get_default = _rpythonic_function_(		"g_vfs_get_default", ctypes.POINTER(_GVfs), [] )

g_vfs_get_local = _rpythonic_function_(		"g_vfs_get_local", ctypes.POINTER(_GVfs), [] )

removed = _rpythonic_function_(		"removed", ctypes.c_void_p, [
	("volume",		ctypes.POINTER(_GVolume)),] )

get_mount = _rpythonic_function_(		"get_mount", ctypes.POINTER(_GMount), [
	("volume",		ctypes.POINTER(_GVolume)),] )

can_mount = _rpythonic_function_(		"can_mount", ctypes.c_int, [
	("volume",		ctypes.POINTER(_GVolume)),] )

mount_fn = _rpythonic_function_(		"mount_fn", ctypes.c_void_p, [
	("volume",		ctypes.POINTER(_GVolume)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

mount_finish = _rpythonic_function_(		"mount_finish", ctypes.c_int, [
	("volume",		ctypes.POINTER(_GVolume)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

should_automount = _rpythonic_function_(		"should_automount", ctypes.c_int, [
	("volume",		ctypes.POINTER(_GVolume)),] )

get_activation_root = _rpythonic_function_(		"get_activation_root", ctypes.POINTER(_GFile), [
	("volume",		ctypes.POINTER(_GVolume)),] )

g_volume_get_type = _rpythonic_function_(		"g_volume_get_type", ctypes.c_uint, [] )

g_volume_get_name = _rpythonic_function_(		"g_volume_get_name", ctypes.POINTER(ctypes.c_char), [
	("volume",		ctypes.POINTER(_GVolume)),] )

g_volume_get_icon = _rpythonic_function_(		"g_volume_get_icon", ctypes.POINTER(_GIcon), [
	("volume",		ctypes.POINTER(_GVolume)),] )

g_volume_get_uuid = _rpythonic_function_(		"g_volume_get_uuid", ctypes.POINTER(ctypes.c_char), [
	("volume",		ctypes.POINTER(_GVolume)),] )

g_volume_get_drive = _rpythonic_function_(		"g_volume_get_drive", ctypes.POINTER(_GDrive), [
	("volume",		ctypes.POINTER(_GVolume)),] )

g_volume_get_mount = _rpythonic_function_(		"g_volume_get_mount", ctypes.POINTER(_GMount), [
	("volume",		ctypes.POINTER(_GVolume)),] )

g_volume_can_mount = _rpythonic_function_(		"g_volume_can_mount", ctypes.c_int, [
	("volume",		ctypes.POINTER(_GVolume)),] )

g_volume_can_eject = _rpythonic_function_(		"g_volume_can_eject", ctypes.c_int, [
	("volume",		ctypes.POINTER(_GVolume)),] )

g_volume_should_automount = _rpythonic_function_(		"g_volume_should_automount", ctypes.c_int, [
	("volume",		ctypes.POINTER(_GVolume)),] )

g_volume_mount = _rpythonic_function_(		"g_volume_mount", ctypes.c_void_p, [
	("volume",		ctypes.POINTER(_GVolume)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_volume_mount_finish = _rpythonic_function_(		"g_volume_mount_finish", ctypes.c_int, [
	("volume",		ctypes.POINTER(_GVolume)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_volume_eject = _rpythonic_function_(		"g_volume_eject", ctypes.c_void_p, [
	("volume",		ctypes.POINTER(_GVolume)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_volume_eject_finish = _rpythonic_function_(		"g_volume_eject_finish", ctypes.c_int, [
	("volume",		ctypes.POINTER(_GVolume)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_volume_get_identifier = _rpythonic_function_(		"g_volume_get_identifier", ctypes.POINTER(ctypes.c_char), [
	("volume",		ctypes.POINTER(_GVolume)),
	("kind",		ctypes.POINTER(ctypes.c_char)),] )

g_volume_enumerate_identifiers = _rpythonic_function_(		"g_volume_enumerate_identifiers", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("volume",		ctypes.POINTER(_GVolume)),] )

g_volume_get_activation_root = _rpythonic_function_(		"g_volume_get_activation_root", ctypes.POINTER(_GFile), [
	("volume",		ctypes.POINTER(_GVolume)),] )

g_volume_eject_with_operation = _rpythonic_function_(		"g_volume_eject_with_operation", ctypes.c_void_p, [
	("volume",		ctypes.POINTER(_GVolume)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_volume_eject_with_operation_finish = _rpythonic_function_(		"g_volume_eject_with_operation_finish", ctypes.c_int, [
	("volume",		ctypes.POINTER(_GVolume)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_zlib_compressor_get_type = _rpythonic_function_(		"g_zlib_compressor_get_type", ctypes.c_uint, [] )

g_zlib_compressor_new = _rpythonic_function_(		"g_zlib_compressor_new", ctypes.POINTER(_GZlibCompressor), [
	("format",		ctypes.c_int),
	("level",		ctypes.c_int),] )

g_zlib_compressor_get_file_info = _rpythonic_function_(		"g_zlib_compressor_get_file_info", ctypes.POINTER(_GFileInfo), [
	("compressor",		ctypes.POINTER(_GZlibCompressor)),] )

g_zlib_compressor_set_file_info = _rpythonic_function_(		"g_zlib_compressor_set_file_info", ctypes.c_void_p, [
	("compressor",		ctypes.POINTER(_GZlibCompressor)),
	("file_info",		ctypes.POINTER(_GFileInfo)),] )

g_zlib_decompressor_get_type = _rpythonic_function_(		"g_zlib_decompressor_get_type", ctypes.c_uint, [] )

g_zlib_decompressor_new = _rpythonic_function_(		"g_zlib_decompressor_new", ctypes.POINTER(_GZlibDecompressor), [
	("format",		ctypes.c_int),] )

g_zlib_decompressor_get_file_info = _rpythonic_function_(		"g_zlib_decompressor_get_file_info", ctypes.POINTER(_GFileInfo), [
	("decompressor",		ctypes.POINTER(_GZlibDecompressor)),] )

get_info = _rpythonic_function_(		"get_info", ctypes.POINTER(_GDBusInterfaceInfo), [
	("interface_",		ctypes.POINTER(_GDBusInterface)),] )

get_object = _rpythonic_function_(		"get_object", ctypes.POINTER(_GDBusObject), [
	("interface_",		ctypes.POINTER(_GDBusInterface)),] )

g_dbus_interface_get_type = _rpythonic_function_(		"g_dbus_interface_get_type", ctypes.c_uint, [] )

set_object = _rpythonic_function_(		"set_object", ctypes.c_void_p, [
	("interface_",		ctypes.POINTER(_GDBusInterface)),
	("C_object",		ctypes.POINTER(_GDBusObject)),] )

g_dbus_interface_get_info = _rpythonic_function_(		"g_dbus_interface_get_info", ctypes.POINTER(_GDBusInterfaceInfo), [
	("interface_",		ctypes.POINTER(_GDBusInterface)),] )

g_dbus_interface_get_object = _rpythonic_function_(		"g_dbus_interface_get_object", ctypes.POINTER(_GDBusObject), [
	("interface_",		ctypes.POINTER(_GDBusInterface)),] )

g_dbus_interface_set_object = _rpythonic_function_(		"g_dbus_interface_set_object", ctypes.c_void_p, [
	("interface_",		ctypes.POINTER(_GDBusInterface)),
	("C_object",		ctypes.POINTER(_GDBusObject)),] )

get_vtable = _rpythonic_function_(		"get_vtable", ctypes.POINTER(_GDBusInterfaceVTable), [
	("interface_",		ctypes.POINTER(_GDBusInterfaceSkeleton)),] )

get_properties = _rpythonic_function_(		"get_properties", ctypes.POINTER(_GVariant), [
	("interface_",		ctypes.POINTER(_GDBusInterfaceSkeleton)),] )

g_authorize_method = _rpythonic_function_(		"g_authorize_method", ctypes.c_int, [
	("interface_",		ctypes.POINTER(_GDBusInterfaceSkeleton)),
	("invocation",		ctypes.POINTER(_GDBusMethodInvocation)),] )

g_dbus_interface_skeleton_get_type = _rpythonic_function_(		"g_dbus_interface_skeleton_get_type", ctypes.c_uint, [] )

g_dbus_interface_skeleton_get_flags = _rpythonic_function_(		"g_dbus_interface_skeleton_get_flags", ctypes.c_int, [
	("interface_",		ctypes.POINTER(_GDBusInterfaceSkeleton)),] )

g_dbus_interface_skeleton_set_flags = _rpythonic_function_(		"g_dbus_interface_skeleton_set_flags", ctypes.c_void_p, [
	("interface_",		ctypes.POINTER(_GDBusInterfaceSkeleton)),
	("flags",		ctypes.c_int),] )

g_dbus_interface_skeleton_get_info = _rpythonic_function_(		"g_dbus_interface_skeleton_get_info", ctypes.POINTER(_GDBusInterfaceInfo), [
	("interface_",		ctypes.POINTER(_GDBusInterfaceSkeleton)),] )

g_dbus_interface_skeleton_get_vtable = _rpythonic_function_(		"g_dbus_interface_skeleton_get_vtable", ctypes.POINTER(_GDBusInterfaceVTable), [
	("interface_",		ctypes.POINTER(_GDBusInterfaceSkeleton)),] )

g_dbus_interface_skeleton_get_properties = _rpythonic_function_(		"g_dbus_interface_skeleton_get_properties", ctypes.POINTER(_GVariant), [
	("interface_",		ctypes.POINTER(_GDBusInterfaceSkeleton)),] )

g_dbus_interface_skeleton_flush = _rpythonic_function_(		"g_dbus_interface_skeleton_flush", ctypes.c_void_p, [
	("interface_",		ctypes.POINTER(_GDBusInterfaceSkeleton)),] )

g_dbus_interface_skeleton_export = _rpythonic_function_(		"g_dbus_interface_skeleton_export", ctypes.c_int, [
	("interface_",		ctypes.POINTER(_GDBusInterfaceSkeleton)),
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_interface_skeleton_unexport = _rpythonic_function_(		"g_dbus_interface_skeleton_unexport", ctypes.c_void_p, [
	("interface_",		ctypes.POINTER(_GDBusInterfaceSkeleton)),] )

g_dbus_interface_skeleton_get_connection = _rpythonic_function_(		"g_dbus_interface_skeleton_get_connection", ctypes.POINTER(_GDBusConnection), [
	("interface_",		ctypes.POINTER(_GDBusInterfaceSkeleton)),] )

g_dbus_interface_skeleton_get_object_path = _rpythonic_function_(		"g_dbus_interface_skeleton_get_object_path", ctypes.POINTER(ctypes.c_char), [
	("interface_",		ctypes.POINTER(_GDBusInterfaceSkeleton)),] )

get_object_path = _rpythonic_function_(		"get_object_path", ctypes.POINTER(ctypes.c_char), [
	("C_object",		ctypes.POINTER(_GDBusObject)),] )

get_interfaces = _rpythonic_function_(		"get_interfaces", ctypes.POINTER(_GList), [
	("C_object",		ctypes.POINTER(_GDBusObject)),] )

get_interface = _rpythonic_function_(		"get_interface", ctypes.POINTER(_GDBusInterface), [
	("C_object",		ctypes.POINTER(_GDBusObject)),
	("interface_name",		ctypes.POINTER(ctypes.c_char)),] )

interface_added = _rpythonic_function_(		"interface_added", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GDBusObject)),
	("interface_",		ctypes.POINTER(_GDBusInterface)),] )

g_dbus_object_get_type = _rpythonic_function_(		"g_dbus_object_get_type", ctypes.c_uint, [] )

interface_removed = _rpythonic_function_(		"interface_removed", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GDBusObject)),
	("interface_",		ctypes.POINTER(_GDBusInterface)),] )

g_dbus_object_get_object_path = _rpythonic_function_(		"g_dbus_object_get_object_path", ctypes.POINTER(ctypes.c_char), [
	("C_object",		ctypes.POINTER(_GDBusObject)),] )

g_dbus_object_get_interfaces = _rpythonic_function_(		"g_dbus_object_get_interfaces", ctypes.POINTER(_GList), [
	("C_object",		ctypes.POINTER(_GDBusObject)),] )

g_dbus_object_get_interface = _rpythonic_function_(		"g_dbus_object_get_interface", ctypes.POINTER(_GDBusInterface), [
	("C_object",		ctypes.POINTER(_GDBusObject)),
	("interface_name",		ctypes.POINTER(ctypes.c_char)),] )

authorize_method = _rpythonic_function_(		"authorize_method", ctypes.c_int, [
	("C_object",		ctypes.POINTER(_GDBusObjectSkeleton)),
	("interface_",		ctypes.POINTER(_GDBusInterfaceSkeleton)),
	("invocation",		ctypes.POINTER(_GDBusMethodInvocation)),] )

g_dbus_object_skeleton_get_type = _rpythonic_function_(		"g_dbus_object_skeleton_get_type", ctypes.c_uint, [] )

g_dbus_object_skeleton_new = _rpythonic_function_(		"g_dbus_object_skeleton_new", ctypes.POINTER(_GDBusObjectSkeleton), [
	("object_path",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_object_skeleton_flush = _rpythonic_function_(		"g_dbus_object_skeleton_flush", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GDBusObjectSkeleton)),] )

g_dbus_object_skeleton_add_interface = _rpythonic_function_(		"g_dbus_object_skeleton_add_interface", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GDBusObjectSkeleton)),
	("interface_",		ctypes.POINTER(_GDBusInterfaceSkeleton)),] )

g_dbus_object_skeleton_remove_interface = _rpythonic_function_(		"g_dbus_object_skeleton_remove_interface", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GDBusObjectSkeleton)),
	("interface_",		ctypes.POINTER(_GDBusInterfaceSkeleton)),] )

g_dbus_object_skeleton_remove_interface_by_name = _rpythonic_function_(		"g_dbus_object_skeleton_remove_interface_by_name", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GDBusObjectSkeleton)),
	("interface_name",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_object_skeleton_set_object_path = _rpythonic_function_(		"g_dbus_object_skeleton_set_object_path", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GDBusObjectSkeleton)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_object_proxy_get_type = _rpythonic_function_(		"g_dbus_object_proxy_get_type", ctypes.c_uint, [] )

g_dbus_object_proxy_new = _rpythonic_function_(		"g_dbus_object_proxy_new", ctypes.POINTER(_GDBusObjectProxy), [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_object_proxy_get_connection = _rpythonic_function_(		"g_dbus_object_proxy_get_connection", ctypes.POINTER(_GDBusConnection), [
	("proxy",		ctypes.POINTER(_GDBusObjectProxy)),] )

get_objects = _rpythonic_function_(		"get_objects", ctypes.POINTER(_GList), [
	("manager",		ctypes.POINTER(_GDBusObjectManager)),] )

object_added = _rpythonic_function_(		"object_added", ctypes.c_void_p, [
	("manager",		ctypes.POINTER(_GDBusObjectManager)),
	("C_object",		ctypes.POINTER(_GDBusObject)),] )

object_removed = _rpythonic_function_(		"object_removed", ctypes.c_void_p, [
	("manager",		ctypes.POINTER(_GDBusObjectManager)),
	("C_object",		ctypes.POINTER(_GDBusObject)),] )

g_dbus_object_manager_get_type = _rpythonic_function_(		"g_dbus_object_manager_get_type", ctypes.c_uint, [] )

g_dbus_object_manager_get_object_path = _rpythonic_function_(		"g_dbus_object_manager_get_object_path", ctypes.POINTER(ctypes.c_char), [
	("manager",		ctypes.POINTER(_GDBusObjectManager)),] )

g_dbus_object_manager_get_objects = _rpythonic_function_(		"g_dbus_object_manager_get_objects", ctypes.POINTER(_GList), [
	("manager",		ctypes.POINTER(_GDBusObjectManager)),] )

g_dbus_object_manager_get_object = _rpythonic_function_(		"g_dbus_object_manager_get_object", ctypes.POINTER(_GDBusObject), [
	("manager",		ctypes.POINTER(_GDBusObjectManager)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_object_manager_get_interface = _rpythonic_function_(		"g_dbus_object_manager_get_interface", ctypes.POINTER(_GDBusInterface), [
	("manager",		ctypes.POINTER(_GDBusObjectManager)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("interface_name",		ctypes.POINTER(ctypes.c_char)),] )

interface_proxy_signal = _rpythonic_function_(		"interface_proxy_signal", ctypes.c_void_p, [
	("manager",		ctypes.POINTER(_GDBusObjectManagerClient)),
	("object_proxy",		ctypes.POINTER(_GDBusObjectProxy)),
	("interface_proxy",		ctypes.POINTER(_GDBusProxy)),
	("sender_name",		ctypes.POINTER(ctypes.c_char)),
	("signal_name",		ctypes.POINTER(ctypes.c_char)),
	("parameters",		ctypes.POINTER(_GVariant)),] )

interface_proxy_properties_changed = _rpythonic_function_(		"interface_proxy_properties_changed", ctypes.c_void_p, [
	("manager",		ctypes.POINTER(_GDBusObjectManagerClient)),
	("object_proxy",		ctypes.POINTER(_GDBusObjectProxy)),
	("interface_proxy",		ctypes.POINTER(_GDBusProxy)),
	("changed_properties",		ctypes.POINTER(_GVariant)),
	("invalidated_properties",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_dbus_object_manager_client_get_type = _rpythonic_function_(		"g_dbus_object_manager_client_get_type", ctypes.c_uint, [] )

g_dbus_object_manager_client_new_finish = _rpythonic_function_(		"g_dbus_object_manager_client_new_finish", ctypes.POINTER(_GDBusObjectManager), [
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_object_manager_client_new = _rpythonic_function_(		"g_dbus_object_manager_client_new", ctypes.c_void_p, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("flags",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("get_proxy_type_func",		ctypes.CFUNCTYPE(ctypes.c_uint, ctypes.POINTER(_GDBusObjectManagerClient),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),)),
	("get_proxy_type_user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("get_proxy_type_destroy_notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_dbus_object_manager_client_new_sync = _rpythonic_function_(		"g_dbus_object_manager_client_new_sync", ctypes.POINTER(_GDBusObjectManager), [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("flags",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("get_proxy_type_func",		ctypes.CFUNCTYPE(ctypes.c_uint, ctypes.POINTER(_GDBusObjectManagerClient),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),)),
	("get_proxy_type_user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("get_proxy_type_destroy_notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_object_manager_client_new_for_bus = _rpythonic_function_(		"g_dbus_object_manager_client_new_for_bus", ctypes.c_void_p, [
	("bus_type",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("get_proxy_type_func",		ctypes.CFUNCTYPE(ctypes.c_uint, ctypes.POINTER(_GDBusObjectManagerClient),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),)),
	("get_proxy_type_user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("get_proxy_type_destroy_notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_dbus_object_manager_client_new_for_bus_finish = _rpythonic_function_(		"g_dbus_object_manager_client_new_for_bus_finish", ctypes.POINTER(_GDBusObjectManager), [
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_object_manager_client_new_for_bus_sync = _rpythonic_function_(		"g_dbus_object_manager_client_new_for_bus_sync", ctypes.POINTER(_GDBusObjectManager), [
	("bus_type",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("get_proxy_type_func",		ctypes.CFUNCTYPE(ctypes.c_uint, ctypes.POINTER(_GDBusObjectManagerClient),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),)),
	("get_proxy_type_user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("get_proxy_type_destroy_notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_object_manager_client_get_connection = _rpythonic_function_(		"g_dbus_object_manager_client_get_connection", ctypes.POINTER(_GDBusConnection), [
	("manager",		ctypes.POINTER(_GDBusObjectManagerClient)),] )

g_dbus_object_manager_client_get_flags = _rpythonic_function_(		"g_dbus_object_manager_client_get_flags", ctypes.c_int, [
	("manager",		ctypes.POINTER(_GDBusObjectManagerClient)),] )

g_dbus_object_manager_client_get_name = _rpythonic_function_(		"g_dbus_object_manager_client_get_name", ctypes.POINTER(ctypes.c_char), [
	("manager",		ctypes.POINTER(_GDBusObjectManagerClient)),] )

g_dbus_object_manager_client_get_name_owner = _rpythonic_function_(		"g_dbus_object_manager_client_get_name_owner", ctypes.POINTER(ctypes.c_char), [
	("manager",		ctypes.POINTER(_GDBusObjectManagerClient)),] )

g_dbus_object_manager_server_get_type = _rpythonic_function_(		"g_dbus_object_manager_server_get_type", ctypes.c_uint, [] )

g_dbus_object_manager_server_new = _rpythonic_function_(		"g_dbus_object_manager_server_new", ctypes.POINTER(_GDBusObjectManagerServer), [
	("object_path",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_object_manager_server_get_connection = _rpythonic_function_(		"g_dbus_object_manager_server_get_connection", ctypes.POINTER(_GDBusConnection), [
	("manager",		ctypes.POINTER(_GDBusObjectManagerServer)),] )

g_dbus_object_manager_server_set_connection = _rpythonic_function_(		"g_dbus_object_manager_server_set_connection", ctypes.c_void_p, [
	("manager",		ctypes.POINTER(_GDBusObjectManagerServer)),
	("connection",		ctypes.POINTER(_GDBusConnection)),] )

g_dbus_object_manager_server_export = _rpythonic_function_(		"g_dbus_object_manager_server_export", ctypes.c_void_p, [
	("manager",		ctypes.POINTER(_GDBusObjectManagerServer)),
	("C_object",		ctypes.POINTER(_GDBusObjectSkeleton)),] )

g_dbus_object_manager_server_export_uniquely = _rpythonic_function_(		"g_dbus_object_manager_server_export_uniquely", ctypes.c_void_p, [
	("manager",		ctypes.POINTER(_GDBusObjectManagerServer)),
	("C_object",		ctypes.POINTER(_GDBusObjectSkeleton)),] )

g_dbus_object_manager_server_unexport = _rpythonic_function_(		"g_dbus_object_manager_server_unexport", ctypes.c_int, [
	("manager",		ctypes.POINTER(_GDBusObjectManagerServer)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),] )

pango_coverage_new = _rpythonic_function_(		"pango_coverage_new", ctypes.POINTER(_PangoCoverage), [] )

pango_coverage_ref = _rpythonic_function_(		"pango_coverage_ref", ctypes.POINTER(_PangoCoverage), [
	("coverage",		ctypes.POINTER(_PangoCoverage)),] )

pango_coverage_unref = _rpythonic_function_(		"pango_coverage_unref", ctypes.c_void_p, [
	("coverage",		ctypes.POINTER(_PangoCoverage)),] )

pango_coverage_copy = _rpythonic_function_(		"pango_coverage_copy", ctypes.POINTER(_PangoCoverage), [
	("coverage",		ctypes.POINTER(_PangoCoverage)),] )

pango_coverage_get = _rpythonic_function_(		"pango_coverage_get", ctypes.c_int, [
	("coverage",		ctypes.POINTER(_PangoCoverage)),
	("index_",		ctypes.c_int),] )

pango_coverage_set = _rpythonic_function_(		"pango_coverage_set", ctypes.c_void_p, [
	("coverage",		ctypes.POINTER(_PangoCoverage)),
	("index_",		ctypes.c_int),
	("level",		ctypes.c_int),] )

pango_coverage_max = _rpythonic_function_(		"pango_coverage_max", ctypes.c_void_p, [
	("coverage",		ctypes.POINTER(_PangoCoverage)),
	("other",		ctypes.POINTER(_PangoCoverage)),] )

pango_coverage_to_bytes = _rpythonic_function_(		"pango_coverage_to_bytes", ctypes.c_void_p, [
	("coverage",		ctypes.POINTER(_PangoCoverage)),
	("bytes",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("n_bytes",		ctypes.POINTER(ctypes.c_int)),] )

pango_coverage_from_bytes = _rpythonic_function_(		"pango_coverage_from_bytes", ctypes.POINTER(_PangoCoverage), [
	("bytes",		ctypes.POINTER(ctypes.c_ubyte)),
	("n_bytes",		ctypes.c_int),] )

pango_units_from_double = _rpythonic_function_(		"pango_units_from_double", ctypes.c_int, [
	("d",		ctypes.c_double),] )

pango_units_to_double = _rpythonic_function_(		"pango_units_to_double", ctypes.c_double, [
	("i",		ctypes.c_int),] )

pango_extents_to_pixels = _rpythonic_function_(		"pango_extents_to_pixels", ctypes.c_void_p, [
	("inclusive",		ctypes.POINTER(_PangoRectangle)),
	("nearest",		ctypes.POINTER(_PangoRectangle)),] )

pango_matrix_get_type = _rpythonic_function_(		"pango_matrix_get_type", ctypes.c_uint, [] )

pango_matrix_copy = _rpythonic_function_(		"pango_matrix_copy", ctypes.POINTER(_PangoMatrix), [
	("matrix",		ctypes.POINTER(_PangoMatrix)),] )

pango_matrix_free = _rpythonic_function_(		"pango_matrix_free", ctypes.c_void_p, [
	("matrix",		ctypes.POINTER(_PangoMatrix)),] )

pango_matrix_translate = _rpythonic_function_(		"pango_matrix_translate", ctypes.c_void_p, [
	("matrix",		ctypes.POINTER(_PangoMatrix)),
	("tx",		ctypes.c_double),
	("ty",		ctypes.c_double),] )

pango_matrix_scale = _rpythonic_function_(		"pango_matrix_scale", ctypes.c_void_p, [
	("matrix",		ctypes.POINTER(_PangoMatrix)),
	("scale_x",		ctypes.c_double),
	("scale_y",		ctypes.c_double),] )

pango_matrix_rotate = _rpythonic_function_(		"pango_matrix_rotate", ctypes.c_void_p, [
	("matrix",		ctypes.POINTER(_PangoMatrix)),
	("degrees",		ctypes.c_double),] )

pango_matrix_concat = _rpythonic_function_(		"pango_matrix_concat", ctypes.c_void_p, [
	("matrix",		ctypes.POINTER(_PangoMatrix)),
	("new_matrix",		ctypes.POINTER(_PangoMatrix)),] )

pango_matrix_transform_point = _rpythonic_function_(		"pango_matrix_transform_point", ctypes.c_void_p, [
	("matrix",		ctypes.POINTER(_PangoMatrix)),
	("x",		ctypes.POINTER(ctypes.c_double)),
	("y",		ctypes.POINTER(ctypes.c_double)),] )

pango_matrix_transform_distance = _rpythonic_function_(		"pango_matrix_transform_distance", ctypes.c_void_p, [
	("matrix",		ctypes.POINTER(_PangoMatrix)),
	("dx",		ctypes.POINTER(ctypes.c_double)),
	("dy",		ctypes.POINTER(ctypes.c_double)),] )

pango_matrix_transform_rectangle = _rpythonic_function_(		"pango_matrix_transform_rectangle", ctypes.c_void_p, [
	("matrix",		ctypes.POINTER(_PangoMatrix)),
	("rect",		ctypes.POINTER(_PangoRectangle)),] )

pango_matrix_transform_pixel_rectangle = _rpythonic_function_(		"pango_matrix_transform_pixel_rectangle", ctypes.c_void_p, [
	("matrix",		ctypes.POINTER(_PangoMatrix)),
	("rect",		ctypes.POINTER(_PangoRectangle)),] )

pango_matrix_get_font_scale_factor = _rpythonic_function_(		"pango_matrix_get_font_scale_factor", ctypes.c_double, [
	("matrix",		ctypes.POINTER(_PangoMatrix)),] )

pango_script_for_unichar = _rpythonic_function_(		"pango_script_for_unichar", ctypes.c_int, [
	("ch",		ctypes.c_uint),] )

pango_script_iter_new = _rpythonic_function_(		"pango_script_iter_new", ctypes.POINTER(_PangoScriptIter), [
	("text",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),] )

pango_script_iter_get_range = _rpythonic_function_(		"pango_script_iter_get_range", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(_PangoScriptIter)),
	("start",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("end",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("script",		ctypes.POINTER(ctypes.c_int)),] )

pango_script_iter_next = _rpythonic_function_(		"pango_script_iter_next", ctypes.c_int, [
	("iter",		ctypes.POINTER(_PangoScriptIter)),] )

pango_script_iter_free = _rpythonic_function_(		"pango_script_iter_free", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(_PangoScriptIter)),] )

pango_language_get_type = _rpythonic_function_(		"pango_language_get_type", ctypes.c_uint, [] )

pango_language_from_string = _rpythonic_function_(		"pango_language_from_string", ctypes.POINTER(_PangoLanguage), [
	("language",		ctypes.POINTER(ctypes.c_char)),] )

pango_language_to_string = _rpythonic_function_(		"pango_language_to_string", ctypes.POINTER(ctypes.c_char), [
	("language",		ctypes.POINTER(_PangoLanguage)),] )

pango_language_get_sample_string = _rpythonic_function_(		"pango_language_get_sample_string", ctypes.POINTER(ctypes.c_char), [
	("language",		ctypes.POINTER(_PangoLanguage)),] )

pango_language_get_default = _rpythonic_function_(		"pango_language_get_default", ctypes.POINTER(_PangoLanguage), [] )

pango_language_matches = _rpythonic_function_(		"pango_language_matches", ctypes.c_int, [
	("language",		ctypes.POINTER(_PangoLanguage)),
	("range_list",		ctypes.POINTER(ctypes.c_char)),] )

pango_language_includes_script = _rpythonic_function_(		"pango_language_includes_script", ctypes.c_int, [
	("language",		ctypes.POINTER(_PangoLanguage)),
	("script",		ctypes.c_int),] )

pango_language_get_scripts = _rpythonic_function_(		"pango_language_get_scripts", ctypes.POINTER(ctypes.c_int), [
	("language",		ctypes.POINTER(_PangoLanguage)),
	("num_scripts",		ctypes.POINTER(ctypes.c_int)),] )

pango_script_get_sample_language = _rpythonic_function_(		"pango_script_get_sample_language", ctypes.POINTER(_PangoLanguage), [
	("script",		ctypes.c_int),] )

pango_gravity_to_rotation = _rpythonic_function_(		"pango_gravity_to_rotation", ctypes.c_double, [
	("gravity",		ctypes.c_int),] )

pango_gravity_get_for_matrix = _rpythonic_function_(		"pango_gravity_get_for_matrix", ctypes.c_int, [
	("matrix",		ctypes.POINTER(_PangoMatrix)),] )

pango_gravity_get_for_script = _rpythonic_function_(		"pango_gravity_get_for_script", ctypes.c_int, [
	("script",		ctypes.c_int),
	("base_gravity",		ctypes.c_int),
	("hint",		ctypes.c_int),] )

pango_gravity_get_for_script_and_width = _rpythonic_function_(		"pango_gravity_get_for_script_and_width", ctypes.c_int, [
	("script",		ctypes.c_int),
	("wide",		ctypes.c_int),
	("base_gravity",		ctypes.c_int),
	("hint",		ctypes.c_int),] )

pango_bidi_type_for_unichar = _rpythonic_function_(		"pango_bidi_type_for_unichar", ctypes.c_int, [
	("ch",		ctypes.c_uint),] )

pango_unichar_direction = _rpythonic_function_(		"pango_unichar_direction", ctypes.c_int, [
	("ch",		ctypes.c_uint),] )

pango_find_base_dir = _rpythonic_function_(		"pango_find_base_dir", ctypes.c_int, [
	("text",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),] )

pango_get_mirror_char = _rpythonic_function_(		"pango_get_mirror_char", ctypes.c_int, [
	("ch",		ctypes.c_uint),
	("mirrored_ch",		ctypes.POINTER(ctypes.c_uint)),] )

pango_font_description_get_type = _rpythonic_function_(		"pango_font_description_get_type", ctypes.c_uint, [] )

pango_font_description_new = _rpythonic_function_(		"pango_font_description_new", ctypes.POINTER(_PangoFontDescription), [] )

pango_font_description_copy = _rpythonic_function_(		"pango_font_description_copy", ctypes.POINTER(_PangoFontDescription), [
	("desc",		ctypes.POINTER(_PangoFontDescription)),] )

pango_font_description_copy_static = _rpythonic_function_(		"pango_font_description_copy_static", ctypes.POINTER(_PangoFontDescription), [
	("desc",		ctypes.POINTER(_PangoFontDescription)),] )

pango_font_description_hash = _rpythonic_function_(		"pango_font_description_hash", ctypes.c_uint, [
	("desc",		ctypes.POINTER(_PangoFontDescription)),] )

pango_font_description_equal = _rpythonic_function_(		"pango_font_description_equal", ctypes.c_int, [
	("desc1",		ctypes.POINTER(_PangoFontDescription)),
	("desc2",		ctypes.POINTER(_PangoFontDescription)),] )

pango_font_description_free = _rpythonic_function_(		"pango_font_description_free", ctypes.c_void_p, [
	("desc",		ctypes.POINTER(_PangoFontDescription)),] )

pango_font_descriptions_free = _rpythonic_function_(		"pango_font_descriptions_free", ctypes.c_void_p, [
	("descs",		ctypes.POINTER(ctypes.POINTER(_PangoFontDescription))),
	("n_descs",		ctypes.c_int),] )

pango_font_description_set_family = _rpythonic_function_(		"pango_font_description_set_family", ctypes.c_void_p, [
	("desc",		ctypes.POINTER(_PangoFontDescription)),
	("family",		ctypes.POINTER(ctypes.c_char)),] )

pango_font_description_set_family_static = _rpythonic_function_(		"pango_font_description_set_family_static", ctypes.c_void_p, [
	("desc",		ctypes.POINTER(_PangoFontDescription)),
	("family",		ctypes.POINTER(ctypes.c_char)),] )

pango_font_description_get_family = _rpythonic_function_(		"pango_font_description_get_family", ctypes.POINTER(ctypes.c_char), [
	("desc",		ctypes.POINTER(_PangoFontDescription)),] )

pango_font_description_set_style = _rpythonic_function_(		"pango_font_description_set_style", ctypes.c_void_p, [
	("desc",		ctypes.POINTER(_PangoFontDescription)),
	("style",		ctypes.c_int),] )

pango_font_description_get_style = _rpythonic_function_(		"pango_font_description_get_style", ctypes.c_int, [
	("desc",		ctypes.POINTER(_PangoFontDescription)),] )

pango_font_description_set_variant = _rpythonic_function_(		"pango_font_description_set_variant", ctypes.c_void_p, [
	("desc",		ctypes.POINTER(_PangoFontDescription)),
	("variant",		ctypes.c_int),] )

pango_font_description_get_variant = _rpythonic_function_(		"pango_font_description_get_variant", ctypes.c_int, [
	("desc",		ctypes.POINTER(_PangoFontDescription)),] )

pango_font_description_set_weight = _rpythonic_function_(		"pango_font_description_set_weight", ctypes.c_void_p, [
	("desc",		ctypes.POINTER(_PangoFontDescription)),
	("weight",		ctypes.c_int),] )

pango_font_description_get_weight = _rpythonic_function_(		"pango_font_description_get_weight", ctypes.c_int, [
	("desc",		ctypes.POINTER(_PangoFontDescription)),] )

pango_font_description_set_stretch = _rpythonic_function_(		"pango_font_description_set_stretch", ctypes.c_void_p, [
	("desc",		ctypes.POINTER(_PangoFontDescription)),
	("stretch",		ctypes.c_int),] )

pango_font_description_get_stretch = _rpythonic_function_(		"pango_font_description_get_stretch", ctypes.c_int, [
	("desc",		ctypes.POINTER(_PangoFontDescription)),] )

pango_font_description_set_size = _rpythonic_function_(		"pango_font_description_set_size", ctypes.c_void_p, [
	("desc",		ctypes.POINTER(_PangoFontDescription)),
	("size",		ctypes.c_int),] )

pango_font_description_get_size = _rpythonic_function_(		"pango_font_description_get_size", ctypes.c_int, [
	("desc",		ctypes.POINTER(_PangoFontDescription)),] )

pango_font_description_set_absolute_size = _rpythonic_function_(		"pango_font_description_set_absolute_size", ctypes.c_void_p, [
	("desc",		ctypes.POINTER(_PangoFontDescription)),
	("size",		ctypes.c_double),] )

pango_font_description_get_size_is_absolute = _rpythonic_function_(		"pango_font_description_get_size_is_absolute", ctypes.c_int, [
	("desc",		ctypes.POINTER(_PangoFontDescription)),] )

pango_font_description_set_gravity = _rpythonic_function_(		"pango_font_description_set_gravity", ctypes.c_void_p, [
	("desc",		ctypes.POINTER(_PangoFontDescription)),
	("gravity",		ctypes.c_int),] )

pango_font_description_get_gravity = _rpythonic_function_(		"pango_font_description_get_gravity", ctypes.c_int, [
	("desc",		ctypes.POINTER(_PangoFontDescription)),] )

pango_font_description_get_set_fields = _rpythonic_function_(		"pango_font_description_get_set_fields", ctypes.c_int, [
	("desc",		ctypes.POINTER(_PangoFontDescription)),] )

pango_font_description_unset_fields = _rpythonic_function_(		"pango_font_description_unset_fields", ctypes.c_void_p, [
	("desc",		ctypes.POINTER(_PangoFontDescription)),
	("to_unset",		ctypes.c_int),] )

pango_font_description_merge = _rpythonic_function_(		"pango_font_description_merge", ctypes.c_void_p, [
	("desc",		ctypes.POINTER(_PangoFontDescription)),
	("desc_to_merge",		ctypes.POINTER(_PangoFontDescription)),
	("replace_existing",		ctypes.c_int),] )

pango_font_description_merge_static = _rpythonic_function_(		"pango_font_description_merge_static", ctypes.c_void_p, [
	("desc",		ctypes.POINTER(_PangoFontDescription)),
	("desc_to_merge",		ctypes.POINTER(_PangoFontDescription)),
	("replace_existing",		ctypes.c_int),] )

pango_font_description_better_match = _rpythonic_function_(		"pango_font_description_better_match", ctypes.c_int, [
	("desc",		ctypes.POINTER(_PangoFontDescription)),
	("old_match",		ctypes.POINTER(_PangoFontDescription)),
	("new_match",		ctypes.POINTER(_PangoFontDescription)),] )

pango_font_description_from_string = _rpythonic_function_(		"pango_font_description_from_string", ctypes.POINTER(_PangoFontDescription), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

pango_font_description_to_string = _rpythonic_function_(		"pango_font_description_to_string", ctypes.POINTER(ctypes.c_char), [
	("desc",		ctypes.POINTER(_PangoFontDescription)),] )

pango_font_description_to_filename = _rpythonic_function_(		"pango_font_description_to_filename", ctypes.POINTER(ctypes.c_char), [
	("desc",		ctypes.POINTER(_PangoFontDescription)),] )

pango_font_metrics_get_type = _rpythonic_function_(		"pango_font_metrics_get_type", ctypes.c_uint, [] )

pango_font_metrics_ref = _rpythonic_function_(		"pango_font_metrics_ref", ctypes.POINTER(_PangoFontMetrics), [
	("metrics",		ctypes.POINTER(_PangoFontMetrics)),] )

pango_font_metrics_unref = _rpythonic_function_(		"pango_font_metrics_unref", ctypes.c_void_p, [
	("metrics",		ctypes.POINTER(_PangoFontMetrics)),] )

pango_font_metrics_get_ascent = _rpythonic_function_(		"pango_font_metrics_get_ascent", ctypes.c_int, [
	("metrics",		ctypes.POINTER(_PangoFontMetrics)),] )

pango_font_metrics_get_descent = _rpythonic_function_(		"pango_font_metrics_get_descent", ctypes.c_int, [
	("metrics",		ctypes.POINTER(_PangoFontMetrics)),] )

pango_font_metrics_get_approximate_char_width = _rpythonic_function_(		"pango_font_metrics_get_approximate_char_width", ctypes.c_int, [
	("metrics",		ctypes.POINTER(_PangoFontMetrics)),] )

pango_font_metrics_get_approximate_digit_width = _rpythonic_function_(		"pango_font_metrics_get_approximate_digit_width", ctypes.c_int, [
	("metrics",		ctypes.POINTER(_PangoFontMetrics)),] )

pango_font_metrics_get_underline_position = _rpythonic_function_(		"pango_font_metrics_get_underline_position", ctypes.c_int, [
	("metrics",		ctypes.POINTER(_PangoFontMetrics)),] )

pango_font_metrics_get_underline_thickness = _rpythonic_function_(		"pango_font_metrics_get_underline_thickness", ctypes.c_int, [
	("metrics",		ctypes.POINTER(_PangoFontMetrics)),] )

pango_font_metrics_get_strikethrough_position = _rpythonic_function_(		"pango_font_metrics_get_strikethrough_position", ctypes.c_int, [
	("metrics",		ctypes.POINTER(_PangoFontMetrics)),] )

pango_font_metrics_get_strikethrough_thickness = _rpythonic_function_(		"pango_font_metrics_get_strikethrough_thickness", ctypes.c_int, [
	("metrics",		ctypes.POINTER(_PangoFontMetrics)),] )

pango_font_family_get_type = _rpythonic_function_(		"pango_font_family_get_type", ctypes.c_uint, [] )

pango_font_family_list_faces = _rpythonic_function_(		"pango_font_family_list_faces", ctypes.c_void_p, [
	("family",		ctypes.POINTER(_PangoFontFamily)),
	("faces",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(_PangoFontFace)))),
	("n_faces",		ctypes.POINTER(ctypes.c_int)),] )

pango_font_family_get_name = _rpythonic_function_(		"pango_font_family_get_name", ctypes.POINTER(ctypes.c_char), [
	("family",		ctypes.POINTER(_PangoFontFamily)),] )

pango_font_family_is_monospace = _rpythonic_function_(		"pango_font_family_is_monospace", ctypes.c_int, [
	("family",		ctypes.POINTER(_PangoFontFamily)),] )

pango_font_face_get_type = _rpythonic_function_(		"pango_font_face_get_type", ctypes.c_uint, [] )

pango_font_face_describe = _rpythonic_function_(		"pango_font_face_describe", ctypes.POINTER(_PangoFontDescription), [
	("face",		ctypes.POINTER(_PangoFontFace)),] )

pango_font_face_get_face_name = _rpythonic_function_(		"pango_font_face_get_face_name", ctypes.POINTER(ctypes.c_char), [
	("face",		ctypes.POINTER(_PangoFontFace)),] )

pango_font_face_list_sizes = _rpythonic_function_(		"pango_font_face_list_sizes", ctypes.c_void_p, [
	("face",		ctypes.POINTER(_PangoFontFace)),
	("sizes",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("n_sizes",		ctypes.POINTER(ctypes.c_int)),] )

pango_font_face_is_synthesized = _rpythonic_function_(		"pango_font_face_is_synthesized", ctypes.c_int, [
	("face",		ctypes.POINTER(_PangoFontFace)),] )

pango_font_get_type = _rpythonic_function_(		"pango_font_get_type", ctypes.c_uint, [] )

pango_font_describe = _rpythonic_function_(		"pango_font_describe", ctypes.POINTER(_PangoFontDescription), [
	("font",		ctypes.POINTER(_PangoFont)),] )

pango_font_describe_with_absolute_size = _rpythonic_function_(		"pango_font_describe_with_absolute_size", ctypes.POINTER(_PangoFontDescription), [
	("font",		ctypes.POINTER(_PangoFont)),] )

pango_font_get_coverage = _rpythonic_function_(		"pango_font_get_coverage", ctypes.POINTER(_PangoCoverage), [
	("font",		ctypes.POINTER(_PangoFont)),
	("language",		ctypes.POINTER(_PangoLanguage)),] )

pango_font_find_shaper = _rpythonic_function_(		"pango_font_find_shaper", ctypes.POINTER(_PangoEngineShape), [
	("font",		ctypes.POINTER(_PangoFont)),
	("language",		ctypes.POINTER(_PangoLanguage)),
	("ch",		ctypes.c_uint),] )

pango_font_get_metrics = _rpythonic_function_(		"pango_font_get_metrics", ctypes.POINTER(_PangoFontMetrics), [
	("font",		ctypes.POINTER(_PangoFont)),
	("language",		ctypes.POINTER(_PangoLanguage)),] )

pango_font_get_glyph_extents = _rpythonic_function_(		"pango_font_get_glyph_extents", ctypes.c_void_p, [
	("font",		ctypes.POINTER(_PangoFont)),
	("glyph",		ctypes.c_uint),
	("ink_rect",		ctypes.POINTER(_PangoRectangle)),
	("logical_rect",		ctypes.POINTER(_PangoRectangle)),] )

pango_font_get_font_map = _rpythonic_function_(		"pango_font_get_font_map", ctypes.POINTER(_PangoFontMap), [
	("font",		ctypes.POINTER(_PangoFont)),] )

pango_color_get_type = _rpythonic_function_(		"pango_color_get_type", ctypes.c_uint, [] )

pango_color_copy = _rpythonic_function_(		"pango_color_copy", ctypes.POINTER(_PangoColor), [
	("src",		ctypes.POINTER(_PangoColor)),] )

pango_color_free = _rpythonic_function_(		"pango_color_free", ctypes.c_void_p, [
	("color",		ctypes.POINTER(_PangoColor)),] )

pango_color_parse = _rpythonic_function_(		"pango_color_parse", ctypes.c_int, [
	("color",		ctypes.POINTER(_PangoColor)),
	("spec",		ctypes.POINTER(ctypes.c_char)),] )

pango_color_to_string = _rpythonic_function_(		"pango_color_to_string", ctypes.POINTER(ctypes.c_char), [
	("color",		ctypes.POINTER(_PangoColor)),] )

PangoAttrFilterFunc = _rpythonic_function_(		"PangoAttrFilterFunc", ctypes.c_int, [
	("attribute",		ctypes.POINTER(_PangoAttribute)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

PangoAttrDataCopyFunc = _rpythonic_function_(		"PangoAttrDataCopyFunc", ctypes.POINTER(ctypes.c_void_p), [("data",		ctypes.c_void_p)] )

destroy = _rpythonic_function_(		"destroy", ctypes.c_void_p, [
	("attr",		ctypes.POINTER(_PangoAttribute)),] )

pango_attr_type_register = _rpythonic_function_(		"pango_attr_type_register", ctypes.c_int, [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

pango_attr_type_get_name = _rpythonic_function_(		"pango_attr_type_get_name", ctypes.POINTER(ctypes.c_char), [
	("C_type",		ctypes.c_int),] )

pango_attribute_init = _rpythonic_function_(		"pango_attribute_init", ctypes.c_void_p, [
	("attr",		ctypes.POINTER(_PangoAttribute)),
	("klass",		ctypes.POINTER(_PangoAttrClass)),] )

pango_attribute_copy = _rpythonic_function_(		"pango_attribute_copy", ctypes.POINTER(_PangoAttribute), [
	("attr",		ctypes.POINTER(_PangoAttribute)),] )

pango_attribute_destroy = _rpythonic_function_(		"pango_attribute_destroy", ctypes.c_void_p, [
	("attr",		ctypes.POINTER(_PangoAttribute)),] )

pango_attribute_equal = _rpythonic_function_(		"pango_attribute_equal", ctypes.c_int, [
	("attr1",		ctypes.POINTER(_PangoAttribute)),
	("attr2",		ctypes.POINTER(_PangoAttribute)),] )

pango_attr_language_new = _rpythonic_function_(		"pango_attr_language_new", ctypes.POINTER(_PangoAttribute), [
	("language",		ctypes.POINTER(_PangoLanguage)),] )

pango_attr_family_new = _rpythonic_function_(		"pango_attr_family_new", ctypes.POINTER(_PangoAttribute), [
	("family",		ctypes.POINTER(ctypes.c_char)),] )

pango_attr_foreground_new = _rpythonic_function_(		"pango_attr_foreground_new", ctypes.POINTER(_PangoAttribute), [
	("red",		ctypes.c_ushort),
	("green",		ctypes.c_ushort),
	("blue",		ctypes.c_ushort),] )

pango_attr_background_new = _rpythonic_function_(		"pango_attr_background_new", ctypes.POINTER(_PangoAttribute), [
	("red",		ctypes.c_ushort),
	("green",		ctypes.c_ushort),
	("blue",		ctypes.c_ushort),] )

pango_attr_size_new = _rpythonic_function_(		"pango_attr_size_new", ctypes.POINTER(_PangoAttribute), [
	("size",		ctypes.c_int),] )

pango_attr_size_new_absolute = _rpythonic_function_(		"pango_attr_size_new_absolute", ctypes.POINTER(_PangoAttribute), [
	("size",		ctypes.c_int),] )

pango_attr_style_new = _rpythonic_function_(		"pango_attr_style_new", ctypes.POINTER(_PangoAttribute), [
	("style",		ctypes.c_int),] )

pango_attr_weight_new = _rpythonic_function_(		"pango_attr_weight_new", ctypes.POINTER(_PangoAttribute), [
	("weight",		ctypes.c_int),] )

pango_attr_variant_new = _rpythonic_function_(		"pango_attr_variant_new", ctypes.POINTER(_PangoAttribute), [
	("variant",		ctypes.c_int),] )

pango_attr_stretch_new = _rpythonic_function_(		"pango_attr_stretch_new", ctypes.POINTER(_PangoAttribute), [
	("stretch",		ctypes.c_int),] )

pango_attr_font_desc_new = _rpythonic_function_(		"pango_attr_font_desc_new", ctypes.POINTER(_PangoAttribute), [
	("desc",		ctypes.POINTER(_PangoFontDescription)),] )

pango_attr_underline_new = _rpythonic_function_(		"pango_attr_underline_new", ctypes.POINTER(_PangoAttribute), [
	("underline",		ctypes.c_int),] )

pango_attr_underline_color_new = _rpythonic_function_(		"pango_attr_underline_color_new", ctypes.POINTER(_PangoAttribute), [
	("red",		ctypes.c_ushort),
	("green",		ctypes.c_ushort),
	("blue",		ctypes.c_ushort),] )

pango_attr_strikethrough_new = _rpythonic_function_(		"pango_attr_strikethrough_new", ctypes.POINTER(_PangoAttribute), [
	("strikethrough",		ctypes.c_int),] )

pango_attr_strikethrough_color_new = _rpythonic_function_(		"pango_attr_strikethrough_color_new", ctypes.POINTER(_PangoAttribute), [
	("red",		ctypes.c_ushort),
	("green",		ctypes.c_ushort),
	("blue",		ctypes.c_ushort),] )

pango_attr_rise_new = _rpythonic_function_(		"pango_attr_rise_new", ctypes.POINTER(_PangoAttribute), [
	("rise",		ctypes.c_int),] )

pango_attr_scale_new = _rpythonic_function_(		"pango_attr_scale_new", ctypes.POINTER(_PangoAttribute), [
	("scale_factor",		ctypes.c_double),] )

pango_attr_fallback_new = _rpythonic_function_(		"pango_attr_fallback_new", ctypes.POINTER(_PangoAttribute), [
	("enable_fallback",		ctypes.c_int),] )

pango_attr_letter_spacing_new = _rpythonic_function_(		"pango_attr_letter_spacing_new", ctypes.POINTER(_PangoAttribute), [
	("letter_spacing",		ctypes.c_int),] )

pango_attr_shape_new = _rpythonic_function_(		"pango_attr_shape_new", ctypes.POINTER(_PangoAttribute), [
	("ink_rect",		ctypes.POINTER(_PangoRectangle)),
	("logical_rect",		ctypes.POINTER(_PangoRectangle)),] )

pango_attr_shape_new_with_data = _rpythonic_function_(		"pango_attr_shape_new_with_data", ctypes.POINTER(_PangoAttribute), [
	("ink_rect",		ctypes.POINTER(_PangoRectangle)),
	("logical_rect",		ctypes.POINTER(_PangoRectangle)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("copy_func",		ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), )),
	("destroy_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

pango_attr_gravity_new = _rpythonic_function_(		"pango_attr_gravity_new", ctypes.POINTER(_PangoAttribute), [
	("gravity",		ctypes.c_int),] )

pango_attr_gravity_hint_new = _rpythonic_function_(		"pango_attr_gravity_hint_new", ctypes.POINTER(_PangoAttribute), [
	("hint",		ctypes.c_int),] )

pango_attr_list_get_type = _rpythonic_function_(		"pango_attr_list_get_type", ctypes.c_uint, [] )

pango_attr_list_new = _rpythonic_function_(		"pango_attr_list_new", ctypes.POINTER(_PangoAttrList), [] )

pango_attr_list_ref = _rpythonic_function_(		"pango_attr_list_ref", ctypes.POINTER(_PangoAttrList), [
	("C_list",		ctypes.POINTER(_PangoAttrList)),] )

pango_attr_list_unref = _rpythonic_function_(		"pango_attr_list_unref", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_PangoAttrList)),] )

pango_attr_list_copy = _rpythonic_function_(		"pango_attr_list_copy", ctypes.POINTER(_PangoAttrList), [
	("C_list",		ctypes.POINTER(_PangoAttrList)),] )

pango_attr_list_insert = _rpythonic_function_(		"pango_attr_list_insert", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_PangoAttrList)),
	("attr",		ctypes.POINTER(_PangoAttribute)),] )

pango_attr_list_insert_before = _rpythonic_function_(		"pango_attr_list_insert_before", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_PangoAttrList)),
	("attr",		ctypes.POINTER(_PangoAttribute)),] )

pango_attr_list_change = _rpythonic_function_(		"pango_attr_list_change", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_PangoAttrList)),
	("attr",		ctypes.POINTER(_PangoAttribute)),] )

pango_attr_list_splice = _rpythonic_function_(		"pango_attr_list_splice", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_PangoAttrList)),
	("other",		ctypes.POINTER(_PangoAttrList)),
	("pos",		ctypes.c_int),
	("C_len",		ctypes.c_int),] )

pango_attr_list_filter = _rpythonic_function_(		"pango_attr_list_filter", ctypes.POINTER(_PangoAttrList), [
	("C_list",		ctypes.POINTER(_PangoAttrList)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_PangoAttribute),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

pango_attr_list_get_iterator = _rpythonic_function_(		"pango_attr_list_get_iterator", ctypes.POINTER(_PangoAttrIterator), [
	("C_list",		ctypes.POINTER(_PangoAttrList)),] )

pango_attr_iterator_range = _rpythonic_function_(		"pango_attr_iterator_range", ctypes.c_void_p, [
	("iterator",		ctypes.POINTER(_PangoAttrIterator)),
	("start",		ctypes.POINTER(ctypes.c_int)),
	("end",		ctypes.POINTER(ctypes.c_int)),] )

pango_attr_iterator_next = _rpythonic_function_(		"pango_attr_iterator_next", ctypes.c_int, [
	("iterator",		ctypes.POINTER(_PangoAttrIterator)),] )

pango_attr_iterator_copy = _rpythonic_function_(		"pango_attr_iterator_copy", ctypes.POINTER(_PangoAttrIterator), [
	("iterator",		ctypes.POINTER(_PangoAttrIterator)),] )

pango_attr_iterator_destroy = _rpythonic_function_(		"pango_attr_iterator_destroy", ctypes.c_void_p, [
	("iterator",		ctypes.POINTER(_PangoAttrIterator)),] )

pango_attr_iterator_get = _rpythonic_function_(		"pango_attr_iterator_get", ctypes.POINTER(_PangoAttribute), [
	("iterator",		ctypes.POINTER(_PangoAttrIterator)),
	("C_type",		ctypes.c_int),] )

pango_attr_iterator_get_font = _rpythonic_function_(		"pango_attr_iterator_get_font", ctypes.c_void_p, [
	("iterator",		ctypes.POINTER(_PangoAttrIterator)),
	("desc",		ctypes.POINTER(_PangoFontDescription)),
	("language",		ctypes.POINTER(ctypes.POINTER(_PangoLanguage))),
	("extra_attrs",		ctypes.POINTER(ctypes.POINTER(_GSList))),] )

pango_attr_iterator_get_attrs = _rpythonic_function_(		"pango_attr_iterator_get_attrs", ctypes.POINTER(_GSList), [
	("iterator",		ctypes.POINTER(_PangoAttrIterator)),] )

pango_parse_markup = _rpythonic_function_(		"pango_parse_markup", ctypes.c_int, [
	("markup_text",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),
	("accel_marker",		ctypes.c_uint),
	("attr_list",		ctypes.POINTER(ctypes.POINTER(_PangoAttrList))),
	("text",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("accel_char",		ctypes.POINTER(ctypes.c_uint)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

pango_item_get_type = _rpythonic_function_(		"pango_item_get_type", ctypes.c_uint, [] )

pango_item_new = _rpythonic_function_(		"pango_item_new", ctypes.POINTER(_PangoItem), [] )

pango_item_copy = _rpythonic_function_(		"pango_item_copy", ctypes.POINTER(_PangoItem), [
	("item",		ctypes.POINTER(_PangoItem)),] )

pango_item_free = _rpythonic_function_(		"pango_item_free", ctypes.c_void_p, [
	("item",		ctypes.POINTER(_PangoItem)),] )

pango_item_split = _rpythonic_function_(		"pango_item_split", ctypes.POINTER(_PangoItem), [
	("orig",		ctypes.POINTER(_PangoItem)),
	("split_index",		ctypes.c_int),
	("split_offset",		ctypes.c_int),] )

pango_find_paragraph_boundary = _rpythonic_function_(		"pango_find_paragraph_boundary", ctypes.c_void_p, [
	("text",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),
	("paragraph_delimiter_index",		ctypes.POINTER(ctypes.c_int)),
	("next_paragraph_start",		ctypes.POINTER(ctypes.c_int)),] )

pango_break = _rpythonic_function_(		"pango_break", ctypes.c_void_p, [
	("text",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),
	("analysis",		ctypes.POINTER(_PangoAnalysis)),
	("attrs",		ctypes.POINTER(_PangoLogAttr)),
	("attrs_len",		ctypes.c_int),] )

pango_get_log_attrs = _rpythonic_function_(		"pango_get_log_attrs", ctypes.c_void_p, [
	("text",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),
	("level",		ctypes.c_int),
	("language",		ctypes.POINTER(_PangoLanguage)),
	("log_attrs",		ctypes.POINTER(_PangoLogAttr)),
	("attrs_len",		ctypes.c_int),] )

pango_fontset_get_type = _rpythonic_function_(		"pango_fontset_get_type", ctypes.c_uint, [] )

PangoFontsetForeachFunc = _rpythonic_function_(		"PangoFontsetForeachFunc", ctypes.c_int, [
	("fontset",		ctypes.POINTER(_PangoFontset)),
	("font",		ctypes.POINTER(_PangoFont)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

pango_fontset_get_font = _rpythonic_function_(		"pango_fontset_get_font", ctypes.POINTER(_PangoFont), [
	("fontset",		ctypes.POINTER(_PangoFontset)),
	("wc",		ctypes.c_uint),] )

pango_fontset_get_metrics = _rpythonic_function_(		"pango_fontset_get_metrics", ctypes.POINTER(_PangoFontMetrics), [
	("fontset",		ctypes.POINTER(_PangoFontset)),] )

pango_fontset_foreach = _rpythonic_function_(		"pango_fontset_foreach", ctypes.c_void_p, [
	("fontset",		ctypes.POINTER(_PangoFontset)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_PangoFontset),ctypes.POINTER(_PangoFont),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

pango_font_map_get_type = _rpythonic_function_(		"pango_font_map_get_type", ctypes.c_uint, [] )

pango_font_map_create_context = _rpythonic_function_(		"pango_font_map_create_context", ctypes.POINTER(_PangoContext), [
	("fontmap",		ctypes.POINTER(_PangoFontMap)),] )

pango_font_map_load_font = _rpythonic_function_(		"pango_font_map_load_font", ctypes.POINTER(_PangoFont), [
	("fontmap",		ctypes.POINTER(_PangoFontMap)),
	("context",		ctypes.POINTER(_PangoContext)),
	("desc",		ctypes.POINTER(_PangoFontDescription)),] )

pango_font_map_load_fontset = _rpythonic_function_(		"pango_font_map_load_fontset", ctypes.POINTER(_PangoFontset), [
	("fontmap",		ctypes.POINTER(_PangoFontMap)),
	("context",		ctypes.POINTER(_PangoContext)),
	("desc",		ctypes.POINTER(_PangoFontDescription)),
	("language",		ctypes.POINTER(_PangoLanguage)),] )

pango_font_map_list_families = _rpythonic_function_(		"pango_font_map_list_families", ctypes.c_void_p, [
	("fontmap",		ctypes.POINTER(_PangoFontMap)),
	("families",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(_PangoFontFamily)))),
	("n_families",		ctypes.POINTER(ctypes.c_int)),] )

pango_context_get_type = _rpythonic_function_(		"pango_context_get_type", ctypes.c_uint, [] )

pango_context_new = _rpythonic_function_(		"pango_context_new", ctypes.POINTER(_PangoContext), [] )

pango_context_set_font_map = _rpythonic_function_(		"pango_context_set_font_map", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_PangoContext)),
	("font_map",		ctypes.POINTER(_PangoFontMap)),] )

pango_context_get_font_map = _rpythonic_function_(		"pango_context_get_font_map", ctypes.POINTER(_PangoFontMap), [
	("context",		ctypes.POINTER(_PangoContext)),] )

pango_context_list_families = _rpythonic_function_(		"pango_context_list_families", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_PangoContext)),
	("families",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(_PangoFontFamily)))),
	("n_families",		ctypes.POINTER(ctypes.c_int)),] )

pango_context_load_font = _rpythonic_function_(		"pango_context_load_font", ctypes.POINTER(_PangoFont), [
	("context",		ctypes.POINTER(_PangoContext)),
	("desc",		ctypes.POINTER(_PangoFontDescription)),] )

pango_context_load_fontset = _rpythonic_function_(		"pango_context_load_fontset", ctypes.POINTER(_PangoFontset), [
	("context",		ctypes.POINTER(_PangoContext)),
	("desc",		ctypes.POINTER(_PangoFontDescription)),
	("language",		ctypes.POINTER(_PangoLanguage)),] )

pango_context_get_metrics = _rpythonic_function_(		"pango_context_get_metrics", ctypes.POINTER(_PangoFontMetrics), [
	("context",		ctypes.POINTER(_PangoContext)),
	("desc",		ctypes.POINTER(_PangoFontDescription)),
	("language",		ctypes.POINTER(_PangoLanguage)),] )

pango_context_set_font_description = _rpythonic_function_(		"pango_context_set_font_description", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_PangoContext)),
	("desc",		ctypes.POINTER(_PangoFontDescription)),] )

pango_context_get_font_description = _rpythonic_function_(		"pango_context_get_font_description", ctypes.POINTER(_PangoFontDescription), [
	("context",		ctypes.POINTER(_PangoContext)),] )

pango_context_get_language = _rpythonic_function_(		"pango_context_get_language", ctypes.POINTER(_PangoLanguage), [
	("context",		ctypes.POINTER(_PangoContext)),] )

pango_context_set_language = _rpythonic_function_(		"pango_context_set_language", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_PangoContext)),
	("language",		ctypes.POINTER(_PangoLanguage)),] )

pango_context_set_base_dir = _rpythonic_function_(		"pango_context_set_base_dir", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_PangoContext)),
	("direction",		ctypes.c_int),] )

pango_context_get_base_dir = _rpythonic_function_(		"pango_context_get_base_dir", ctypes.c_int, [
	("context",		ctypes.POINTER(_PangoContext)),] )

pango_context_set_base_gravity = _rpythonic_function_(		"pango_context_set_base_gravity", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_PangoContext)),
	("gravity",		ctypes.c_int),] )

pango_context_get_base_gravity = _rpythonic_function_(		"pango_context_get_base_gravity", ctypes.c_int, [
	("context",		ctypes.POINTER(_PangoContext)),] )

pango_context_get_gravity = _rpythonic_function_(		"pango_context_get_gravity", ctypes.c_int, [
	("context",		ctypes.POINTER(_PangoContext)),] )

pango_context_set_gravity_hint = _rpythonic_function_(		"pango_context_set_gravity_hint", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_PangoContext)),
	("hint",		ctypes.c_int),] )

pango_context_get_gravity_hint = _rpythonic_function_(		"pango_context_get_gravity_hint", ctypes.c_int, [
	("context",		ctypes.POINTER(_PangoContext)),] )

pango_context_set_matrix = _rpythonic_function_(		"pango_context_set_matrix", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_PangoContext)),
	("matrix",		ctypes.POINTER(_PangoMatrix)),] )

pango_context_get_matrix = _rpythonic_function_(		"pango_context_get_matrix", ctypes.POINTER(_PangoMatrix), [
	("context",		ctypes.POINTER(_PangoContext)),] )

pango_itemize = _rpythonic_function_(		"pango_itemize", ctypes.POINTER(_GList), [
	("context",		ctypes.POINTER(_PangoContext)),
	("text",		ctypes.POINTER(ctypes.c_char)),
	("start_index",		ctypes.c_int),
	("length",		ctypes.c_int),
	("attrs",		ctypes.POINTER(_PangoAttrList)),
	("cached_iter",		ctypes.POINTER(_PangoAttrIterator)),] )

pango_itemize_with_base_dir = _rpythonic_function_(		"pango_itemize_with_base_dir", ctypes.POINTER(_GList), [
	("context",		ctypes.POINTER(_PangoContext)),
	("base_dir",		ctypes.c_int),
	("text",		ctypes.POINTER(ctypes.c_char)),
	("start_index",		ctypes.c_int),
	("length",		ctypes.c_int),
	("attrs",		ctypes.POINTER(_PangoAttrList)),
	("cached_iter",		ctypes.POINTER(_PangoAttrIterator)),] )

pango_glyph_string_new = _rpythonic_function_(		"pango_glyph_string_new", ctypes.POINTER(_PangoGlyphString), [] )

pango_glyph_string_set_size = _rpythonic_function_(		"pango_glyph_string_set_size", ctypes.c_void_p, [
	("string",		ctypes.POINTER(_PangoGlyphString)),
	("new_len",		ctypes.c_int),] )

pango_glyph_string_get_type = _rpythonic_function_(		"pango_glyph_string_get_type", ctypes.c_uint, [] )

pango_glyph_string_copy = _rpythonic_function_(		"pango_glyph_string_copy", ctypes.POINTER(_PangoGlyphString), [
	("string",		ctypes.POINTER(_PangoGlyphString)),] )

pango_glyph_string_free = _rpythonic_function_(		"pango_glyph_string_free", ctypes.c_void_p, [
	("string",		ctypes.POINTER(_PangoGlyphString)),] )

pango_glyph_string_extents = _rpythonic_function_(		"pango_glyph_string_extents", ctypes.c_void_p, [
	("glyphs",		ctypes.POINTER(_PangoGlyphString)),
	("font",		ctypes.POINTER(_PangoFont)),
	("ink_rect",		ctypes.POINTER(_PangoRectangle)),
	("logical_rect",		ctypes.POINTER(_PangoRectangle)),] )

pango_glyph_string_get_width = _rpythonic_function_(		"pango_glyph_string_get_width", ctypes.c_int, [
	("glyphs",		ctypes.POINTER(_PangoGlyphString)),] )

pango_glyph_string_extents_range = _rpythonic_function_(		"pango_glyph_string_extents_range", ctypes.c_void_p, [
	("glyphs",		ctypes.POINTER(_PangoGlyphString)),
	("start",		ctypes.c_int),
	("end",		ctypes.c_int),
	("font",		ctypes.POINTER(_PangoFont)),
	("ink_rect",		ctypes.POINTER(_PangoRectangle)),
	("logical_rect",		ctypes.POINTER(_PangoRectangle)),] )

pango_glyph_string_get_logical_widths = _rpythonic_function_(		"pango_glyph_string_get_logical_widths", ctypes.c_void_p, [
	("glyphs",		ctypes.POINTER(_PangoGlyphString)),
	("text",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),
	("embedding_level",		ctypes.c_int),
	("logical_widths",		ctypes.POINTER(ctypes.c_int)),] )

pango_glyph_string_index_to_x = _rpythonic_function_(		"pango_glyph_string_index_to_x", ctypes.c_void_p, [
	("glyphs",		ctypes.POINTER(_PangoGlyphString)),
	("text",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),
	("analysis",		ctypes.POINTER(_PangoAnalysis)),
	("index_",		ctypes.c_int),
	("trailing",		ctypes.c_int),
	("x_pos",		ctypes.POINTER(ctypes.c_int)),] )

pango_glyph_string_x_to_index = _rpythonic_function_(		"pango_glyph_string_x_to_index", ctypes.c_void_p, [
	("glyphs",		ctypes.POINTER(_PangoGlyphString)),
	("text",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),
	("analysis",		ctypes.POINTER(_PangoAnalysis)),
	("x_pos",		ctypes.c_int),
	("index_",		ctypes.POINTER(ctypes.c_int)),
	("trailing",		ctypes.POINTER(ctypes.c_int)),] )

pango_shape = _rpythonic_function_(		"pango_shape", ctypes.c_void_p, [
	("text",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),
	("analysis",		ctypes.POINTER(_PangoAnalysis)),
	("glyphs",		ctypes.POINTER(_PangoGlyphString)),] )

pango_reorder_items = _rpythonic_function_(		"pango_reorder_items", ctypes.POINTER(_GList), [
	("logical_items",		ctypes.POINTER(_GList)),] )

pango_attr_type_get_type = _rpythonic_function_(		"pango_attr_type_get_type", ctypes.c_uint, [] )

pango_underline_get_type = _rpythonic_function_(		"pango_underline_get_type", ctypes.c_uint, [] )

pango_bidi_type_get_type = _rpythonic_function_(		"pango_bidi_type_get_type", ctypes.c_uint, [] )

pango_direction_get_type = _rpythonic_function_(		"pango_direction_get_type", ctypes.c_uint, [] )

pango_coverage_level_get_type = _rpythonic_function_(		"pango_coverage_level_get_type", ctypes.c_uint, [] )

pango_style_get_type = _rpythonic_function_(		"pango_style_get_type", ctypes.c_uint, [] )

pango_variant_get_type = _rpythonic_function_(		"pango_variant_get_type", ctypes.c_uint, [] )

pango_weight_get_type = _rpythonic_function_(		"pango_weight_get_type", ctypes.c_uint, [] )

pango_stretch_get_type = _rpythonic_function_(		"pango_stretch_get_type", ctypes.c_uint, [] )

pango_font_mask_get_type = _rpythonic_function_(		"pango_font_mask_get_type", ctypes.c_uint, [] )

pango_gravity_get_type = _rpythonic_function_(		"pango_gravity_get_type", ctypes.c_uint, [] )

pango_gravity_hint_get_type = _rpythonic_function_(		"pango_gravity_hint_get_type", ctypes.c_uint, [] )

pango_alignment_get_type = _rpythonic_function_(		"pango_alignment_get_type", ctypes.c_uint, [] )

pango_wrap_mode_get_type = _rpythonic_function_(		"pango_wrap_mode_get_type", ctypes.c_uint, [] )

pango_ellipsize_mode_get_type = _rpythonic_function_(		"pango_ellipsize_mode_get_type", ctypes.c_uint, [] )

pango_render_part_get_type = _rpythonic_function_(		"pango_render_part_get_type", ctypes.c_uint, [] )

pango_script_get_type = _rpythonic_function_(		"pango_script_get_type", ctypes.c_uint, [] )

pango_tab_align_get_type = _rpythonic_function_(		"pango_tab_align_get_type", ctypes.c_uint, [] )

pango_glyph_item_get_type = _rpythonic_function_(		"pango_glyph_item_get_type", ctypes.c_uint, [] )

pango_glyph_item_split = _rpythonic_function_(		"pango_glyph_item_split", ctypes.POINTER(_PangoGlyphItem), [
	("orig",		ctypes.POINTER(_PangoGlyphItem)),
	("text",		ctypes.POINTER(ctypes.c_char)),
	("split_index",		ctypes.c_int),] )

pango_glyph_item_copy = _rpythonic_function_(		"pango_glyph_item_copy", ctypes.POINTER(_PangoGlyphItem), [
	("orig",		ctypes.POINTER(_PangoGlyphItem)),] )

pango_glyph_item_free = _rpythonic_function_(		"pango_glyph_item_free", ctypes.c_void_p, [
	("glyph_item",		ctypes.POINTER(_PangoGlyphItem)),] )

pango_glyph_item_apply_attrs = _rpythonic_function_(		"pango_glyph_item_apply_attrs", ctypes.POINTER(_GSList), [
	("glyph_item",		ctypes.POINTER(_PangoGlyphItem)),
	("text",		ctypes.POINTER(ctypes.c_char)),
	("C_list",		ctypes.POINTER(_PangoAttrList)),] )

pango_glyph_item_letter_space = _rpythonic_function_(		"pango_glyph_item_letter_space", ctypes.c_void_p, [
	("glyph_item",		ctypes.POINTER(_PangoGlyphItem)),
	("text",		ctypes.POINTER(ctypes.c_char)),
	("log_attrs",		ctypes.POINTER(_PangoLogAttr)),
	("letter_spacing",		ctypes.c_int),] )

pango_glyph_item_get_logical_widths = _rpythonic_function_(		"pango_glyph_item_get_logical_widths", ctypes.c_void_p, [
	("glyph_item",		ctypes.POINTER(_PangoGlyphItem)),
	("text",		ctypes.POINTER(ctypes.c_char)),
	("logical_widths",		ctypes.POINTER(ctypes.c_int)),] )

pango_glyph_item_iter_get_type = _rpythonic_function_(		"pango_glyph_item_iter_get_type", ctypes.c_uint, [] )

pango_glyph_item_iter_copy = _rpythonic_function_(		"pango_glyph_item_iter_copy", ctypes.POINTER(_PangoGlyphItemIter), [
	("orig",		ctypes.POINTER(_PangoGlyphItemIter)),] )

pango_glyph_item_iter_free = _rpythonic_function_(		"pango_glyph_item_iter_free", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(_PangoGlyphItemIter)),] )

pango_glyph_item_iter_init_start = _rpythonic_function_(		"pango_glyph_item_iter_init_start", ctypes.c_int, [
	("iter",		ctypes.POINTER(_PangoGlyphItemIter)),
	("glyph_item",		ctypes.POINTER(_PangoGlyphItem)),
	("text",		ctypes.POINTER(ctypes.c_char)),] )

pango_glyph_item_iter_init_end = _rpythonic_function_(		"pango_glyph_item_iter_init_end", ctypes.c_int, [
	("iter",		ctypes.POINTER(_PangoGlyphItemIter)),
	("glyph_item",		ctypes.POINTER(_PangoGlyphItem)),
	("text",		ctypes.POINTER(ctypes.c_char)),] )

pango_glyph_item_iter_next_cluster = _rpythonic_function_(		"pango_glyph_item_iter_next_cluster", ctypes.c_int, [
	("iter",		ctypes.POINTER(_PangoGlyphItemIter)),] )

pango_glyph_item_iter_prev_cluster = _rpythonic_function_(		"pango_glyph_item_iter_prev_cluster", ctypes.c_int, [
	("iter",		ctypes.POINTER(_PangoGlyphItemIter)),] )

pango_tab_array_new = _rpythonic_function_(		"pango_tab_array_new", ctypes.POINTER(_PangoTabArray), [
	("initial_size",		ctypes.c_int),
	("positions_in_pixels",		ctypes.c_int),] )

pango_tab_array_get_type = _rpythonic_function_(		"pango_tab_array_get_type", ctypes.c_uint, [] )

pango_tab_array_copy = _rpythonic_function_(		"pango_tab_array_copy", ctypes.POINTER(_PangoTabArray), [
	("src",		ctypes.POINTER(_PangoTabArray)),] )

pango_tab_array_free = _rpythonic_function_(		"pango_tab_array_free", ctypes.c_void_p, [
	("tab_array",		ctypes.POINTER(_PangoTabArray)),] )

pango_tab_array_get_size = _rpythonic_function_(		"pango_tab_array_get_size", ctypes.c_int, [
	("tab_array",		ctypes.POINTER(_PangoTabArray)),] )

pango_tab_array_resize = _rpythonic_function_(		"pango_tab_array_resize", ctypes.c_void_p, [
	("tab_array",		ctypes.POINTER(_PangoTabArray)),
	("new_size",		ctypes.c_int),] )

pango_tab_array_set_tab = _rpythonic_function_(		"pango_tab_array_set_tab", ctypes.c_void_p, [
	("tab_array",		ctypes.POINTER(_PangoTabArray)),
	("tab_index",		ctypes.c_int),
	("alignment",		ctypes.c_int),
	("location",		ctypes.c_int),] )

pango_tab_array_get_tab = _rpythonic_function_(		"pango_tab_array_get_tab", ctypes.c_void_p, [
	("tab_array",		ctypes.POINTER(_PangoTabArray)),
	("tab_index",		ctypes.c_int),
	("alignment",		ctypes.POINTER(ctypes.c_int)),
	("location",		ctypes.POINTER(ctypes.c_int)),] )

pango_tab_array_get_tabs = _rpythonic_function_(		"pango_tab_array_get_tabs", ctypes.c_void_p, [
	("tab_array",		ctypes.POINTER(_PangoTabArray)),
	("alignments",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("locations",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),] )

pango_tab_array_get_positions_in_pixels = _rpythonic_function_(		"pango_tab_array_get_positions_in_pixels", ctypes.c_int, [
	("tab_array",		ctypes.POINTER(_PangoTabArray)),] )

pango_layout_get_type = _rpythonic_function_(		"pango_layout_get_type", ctypes.c_uint, [] )

pango_layout_new = _rpythonic_function_(		"pango_layout_new", ctypes.POINTER(_PangoLayout), [
	("context",		ctypes.POINTER(_PangoContext)),] )

pango_layout_copy = _rpythonic_function_(		"pango_layout_copy", ctypes.POINTER(_PangoLayout), [
	("src",		ctypes.POINTER(_PangoLayout)),] )

pango_layout_get_context = _rpythonic_function_(		"pango_layout_get_context", ctypes.POINTER(_PangoContext), [
	("layout",		ctypes.POINTER(_PangoLayout)),] )

pango_layout_set_attributes = _rpythonic_function_(		"pango_layout_set_attributes", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(_PangoLayout)),
	("attrs",		ctypes.POINTER(_PangoAttrList)),] )

pango_layout_get_attributes = _rpythonic_function_(		"pango_layout_get_attributes", ctypes.POINTER(_PangoAttrList), [
	("layout",		ctypes.POINTER(_PangoLayout)),] )

pango_layout_set_text = _rpythonic_function_(		"pango_layout_set_text", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(_PangoLayout)),
	("text",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),] )

pango_layout_get_text = _rpythonic_function_(		"pango_layout_get_text", ctypes.POINTER(ctypes.c_char), [
	("layout",		ctypes.POINTER(_PangoLayout)),] )

pango_layout_get_character_count = _rpythonic_function_(		"pango_layout_get_character_count", ctypes.c_int, [
	("layout",		ctypes.POINTER(_PangoLayout)),] )

pango_layout_set_markup = _rpythonic_function_(		"pango_layout_set_markup", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(_PangoLayout)),
	("markup",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),] )

pango_layout_set_markup_with_accel = _rpythonic_function_(		"pango_layout_set_markup_with_accel", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(_PangoLayout)),
	("markup",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),
	("accel_marker",		ctypes.c_uint),
	("accel_char",		ctypes.POINTER(ctypes.c_uint)),] )

pango_layout_set_font_description = _rpythonic_function_(		"pango_layout_set_font_description", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(_PangoLayout)),
	("desc",		ctypes.POINTER(_PangoFontDescription)),] )

pango_layout_get_font_description = _rpythonic_function_(		"pango_layout_get_font_description", ctypes.POINTER(_PangoFontDescription), [
	("layout",		ctypes.POINTER(_PangoLayout)),] )

pango_layout_set_width = _rpythonic_function_(		"pango_layout_set_width", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(_PangoLayout)),
	("width",		ctypes.c_int),] )

pango_layout_get_width = _rpythonic_function_(		"pango_layout_get_width", ctypes.c_int, [
	("layout",		ctypes.POINTER(_PangoLayout)),] )

pango_layout_set_height = _rpythonic_function_(		"pango_layout_set_height", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(_PangoLayout)),
	("height",		ctypes.c_int),] )

pango_layout_get_height = _rpythonic_function_(		"pango_layout_get_height", ctypes.c_int, [
	("layout",		ctypes.POINTER(_PangoLayout)),] )

pango_layout_set_wrap = _rpythonic_function_(		"pango_layout_set_wrap", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(_PangoLayout)),
	("wrap",		ctypes.c_int),] )

pango_layout_get_wrap = _rpythonic_function_(		"pango_layout_get_wrap", ctypes.c_int, [
	("layout",		ctypes.POINTER(_PangoLayout)),] )

pango_layout_is_wrapped = _rpythonic_function_(		"pango_layout_is_wrapped", ctypes.c_int, [
	("layout",		ctypes.POINTER(_PangoLayout)),] )

pango_layout_set_indent = _rpythonic_function_(		"pango_layout_set_indent", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(_PangoLayout)),
	("indent",		ctypes.c_int),] )

pango_layout_get_indent = _rpythonic_function_(		"pango_layout_get_indent", ctypes.c_int, [
	("layout",		ctypes.POINTER(_PangoLayout)),] )

pango_layout_set_spacing = _rpythonic_function_(		"pango_layout_set_spacing", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(_PangoLayout)),
	("spacing",		ctypes.c_int),] )

pango_layout_get_spacing = _rpythonic_function_(		"pango_layout_get_spacing", ctypes.c_int, [
	("layout",		ctypes.POINTER(_PangoLayout)),] )

pango_layout_set_justify = _rpythonic_function_(		"pango_layout_set_justify", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(_PangoLayout)),
	("justify",		ctypes.c_int),] )

pango_layout_get_justify = _rpythonic_function_(		"pango_layout_get_justify", ctypes.c_int, [
	("layout",		ctypes.POINTER(_PangoLayout)),] )

pango_layout_set_auto_dir = _rpythonic_function_(		"pango_layout_set_auto_dir", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(_PangoLayout)),
	("auto_dir",		ctypes.c_int),] )

pango_layout_get_auto_dir = _rpythonic_function_(		"pango_layout_get_auto_dir", ctypes.c_int, [
	("layout",		ctypes.POINTER(_PangoLayout)),] )

pango_layout_set_alignment = _rpythonic_function_(		"pango_layout_set_alignment", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(_PangoLayout)),
	("alignment",		ctypes.c_int),] )

pango_layout_get_alignment = _rpythonic_function_(		"pango_layout_get_alignment", ctypes.c_int, [
	("layout",		ctypes.POINTER(_PangoLayout)),] )

pango_layout_set_tabs = _rpythonic_function_(		"pango_layout_set_tabs", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(_PangoLayout)),
	("tabs",		ctypes.POINTER(_PangoTabArray)),] )

pango_layout_get_tabs = _rpythonic_function_(		"pango_layout_get_tabs", ctypes.POINTER(_PangoTabArray), [
	("layout",		ctypes.POINTER(_PangoLayout)),] )

pango_layout_set_single_paragraph_mode = _rpythonic_function_(		"pango_layout_set_single_paragraph_mode", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(_PangoLayout)),
	("setting",		ctypes.c_int),] )

pango_layout_get_single_paragraph_mode = _rpythonic_function_(		"pango_layout_get_single_paragraph_mode", ctypes.c_int, [
	("layout",		ctypes.POINTER(_PangoLayout)),] )

pango_layout_set_ellipsize = _rpythonic_function_(		"pango_layout_set_ellipsize", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(_PangoLayout)),
	("ellipsize",		ctypes.c_int),] )

pango_layout_get_ellipsize = _rpythonic_function_(		"pango_layout_get_ellipsize", ctypes.c_int, [
	("layout",		ctypes.POINTER(_PangoLayout)),] )

pango_layout_is_ellipsized = _rpythonic_function_(		"pango_layout_is_ellipsized", ctypes.c_int, [
	("layout",		ctypes.POINTER(_PangoLayout)),] )

pango_layout_get_unknown_glyphs_count = _rpythonic_function_(		"pango_layout_get_unknown_glyphs_count", ctypes.c_int, [
	("layout",		ctypes.POINTER(_PangoLayout)),] )

pango_layout_context_changed = _rpythonic_function_(		"pango_layout_context_changed", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(_PangoLayout)),] )

pango_layout_get_log_attrs = _rpythonic_function_(		"pango_layout_get_log_attrs", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(_PangoLayout)),
	("attrs",		ctypes.POINTER(ctypes.POINTER(_PangoLogAttr))),
	("n_attrs",		ctypes.POINTER(ctypes.c_int)),] )

pango_layout_get_log_attrs_readonly = _rpythonic_function_(		"pango_layout_get_log_attrs_readonly", ctypes.POINTER(_PangoLogAttr), [
	("layout",		ctypes.POINTER(_PangoLayout)),
	("n_attrs",		ctypes.POINTER(ctypes.c_int)),] )

pango_layout_index_to_pos = _rpythonic_function_(		"pango_layout_index_to_pos", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(_PangoLayout)),
	("index_",		ctypes.c_int),
	("pos",		ctypes.POINTER(_PangoRectangle)),] )

pango_layout_index_to_line_x = _rpythonic_function_(		"pango_layout_index_to_line_x", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(_PangoLayout)),
	("index_",		ctypes.c_int),
	("trailing",		ctypes.c_int),
	("line",		ctypes.POINTER(ctypes.c_int)),
	("x_pos",		ctypes.POINTER(ctypes.c_int)),] )

pango_layout_get_cursor_pos = _rpythonic_function_(		"pango_layout_get_cursor_pos", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(_PangoLayout)),
	("index_",		ctypes.c_int),
	("strong_pos",		ctypes.POINTER(_PangoRectangle)),
	("weak_pos",		ctypes.POINTER(_PangoRectangle)),] )

pango_layout_move_cursor_visually = _rpythonic_function_(		"pango_layout_move_cursor_visually", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(_PangoLayout)),
	("strong",		ctypes.c_int),
	("old_index",		ctypes.c_int),
	("old_trailing",		ctypes.c_int),
	("direction",		ctypes.c_int),
	("new_index",		ctypes.POINTER(ctypes.c_int)),
	("new_trailing",		ctypes.POINTER(ctypes.c_int)),] )

pango_layout_xy_to_index = _rpythonic_function_(		"pango_layout_xy_to_index", ctypes.c_int, [
	("layout",		ctypes.POINTER(_PangoLayout)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("index_",		ctypes.POINTER(ctypes.c_int)),
	("trailing",		ctypes.POINTER(ctypes.c_int)),] )

pango_layout_get_extents = _rpythonic_function_(		"pango_layout_get_extents", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(_PangoLayout)),
	("ink_rect",		ctypes.POINTER(_PangoRectangle)),
	("logical_rect",		ctypes.POINTER(_PangoRectangle)),] )

pango_layout_get_pixel_extents = _rpythonic_function_(		"pango_layout_get_pixel_extents", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(_PangoLayout)),
	("ink_rect",		ctypes.POINTER(_PangoRectangle)),
	("logical_rect",		ctypes.POINTER(_PangoRectangle)),] )

pango_layout_get_size = _rpythonic_function_(		"pango_layout_get_size", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(_PangoLayout)),
	("width",		ctypes.POINTER(ctypes.c_int)),
	("height",		ctypes.POINTER(ctypes.c_int)),] )

pango_layout_get_pixel_size = _rpythonic_function_(		"pango_layout_get_pixel_size", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(_PangoLayout)),
	("width",		ctypes.POINTER(ctypes.c_int)),
	("height",		ctypes.POINTER(ctypes.c_int)),] )

pango_layout_get_baseline = _rpythonic_function_(		"pango_layout_get_baseline", ctypes.c_int, [
	("layout",		ctypes.POINTER(_PangoLayout)),] )

pango_layout_get_line_count = _rpythonic_function_(		"pango_layout_get_line_count", ctypes.c_int, [
	("layout",		ctypes.POINTER(_PangoLayout)),] )

pango_layout_get_line = _rpythonic_function_(		"pango_layout_get_line", ctypes.POINTER(_PangoLayoutLine), [
	("layout",		ctypes.POINTER(_PangoLayout)),
	("line",		ctypes.c_int),] )

pango_layout_get_line_readonly = _rpythonic_function_(		"pango_layout_get_line_readonly", ctypes.POINTER(_PangoLayoutLine), [
	("layout",		ctypes.POINTER(_PangoLayout)),
	("line",		ctypes.c_int),] )

pango_layout_get_lines = _rpythonic_function_(		"pango_layout_get_lines", ctypes.POINTER(_GSList), [
	("layout",		ctypes.POINTER(_PangoLayout)),] )

pango_layout_get_lines_readonly = _rpythonic_function_(		"pango_layout_get_lines_readonly", ctypes.POINTER(_GSList), [
	("layout",		ctypes.POINTER(_PangoLayout)),] )

pango_layout_line_get_type = _rpythonic_function_(		"pango_layout_line_get_type", ctypes.c_uint, [] )

pango_layout_line_ref = _rpythonic_function_(		"pango_layout_line_ref", ctypes.POINTER(_PangoLayoutLine), [
	("line",		ctypes.POINTER(_PangoLayoutLine)),] )

pango_layout_line_unref = _rpythonic_function_(		"pango_layout_line_unref", ctypes.c_void_p, [
	("line",		ctypes.POINTER(_PangoLayoutLine)),] )

pango_layout_line_x_to_index = _rpythonic_function_(		"pango_layout_line_x_to_index", ctypes.c_int, [
	("line",		ctypes.POINTER(_PangoLayoutLine)),
	("x_pos",		ctypes.c_int),
	("index_",		ctypes.POINTER(ctypes.c_int)),
	("trailing",		ctypes.POINTER(ctypes.c_int)),] )

pango_layout_line_index_to_x = _rpythonic_function_(		"pango_layout_line_index_to_x", ctypes.c_void_p, [
	("line",		ctypes.POINTER(_PangoLayoutLine)),
	("index_",		ctypes.c_int),
	("trailing",		ctypes.c_int),
	("x_pos",		ctypes.POINTER(ctypes.c_int)),] )

pango_layout_line_get_x_ranges = _rpythonic_function_(		"pango_layout_line_get_x_ranges", ctypes.c_void_p, [
	("line",		ctypes.POINTER(_PangoLayoutLine)),
	("start_index",		ctypes.c_int),
	("end_index",		ctypes.c_int),
	("ranges",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("n_ranges",		ctypes.POINTER(ctypes.c_int)),] )

pango_layout_line_get_extents = _rpythonic_function_(		"pango_layout_line_get_extents", ctypes.c_void_p, [
	("line",		ctypes.POINTER(_PangoLayoutLine)),
	("ink_rect",		ctypes.POINTER(_PangoRectangle)),
	("logical_rect",		ctypes.POINTER(_PangoRectangle)),] )

pango_layout_line_get_pixel_extents = _rpythonic_function_(		"pango_layout_line_get_pixel_extents", ctypes.c_void_p, [
	("layout_line",		ctypes.POINTER(_PangoLayoutLine)),
	("ink_rect",		ctypes.POINTER(_PangoRectangle)),
	("logical_rect",		ctypes.POINTER(_PangoRectangle)),] )

pango_layout_iter_get_type = _rpythonic_function_(		"pango_layout_iter_get_type", ctypes.c_uint, [] )

pango_layout_get_iter = _rpythonic_function_(		"pango_layout_get_iter", ctypes.POINTER(_PangoLayoutIter), [
	("layout",		ctypes.POINTER(_PangoLayout)),] )

pango_layout_iter_copy = _rpythonic_function_(		"pango_layout_iter_copy", ctypes.POINTER(_PangoLayoutIter), [
	("iter",		ctypes.POINTER(_PangoLayoutIter)),] )

pango_layout_iter_free = _rpythonic_function_(		"pango_layout_iter_free", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(_PangoLayoutIter)),] )

pango_layout_iter_get_index = _rpythonic_function_(		"pango_layout_iter_get_index", ctypes.c_int, [
	("iter",		ctypes.POINTER(_PangoLayoutIter)),] )

pango_layout_iter_get_run = _rpythonic_function_(		"pango_layout_iter_get_run", ctypes.POINTER(_PangoGlyphItem), [
	("iter",		ctypes.POINTER(_PangoLayoutIter)),] )

pango_layout_iter_get_run_readonly = _rpythonic_function_(		"pango_layout_iter_get_run_readonly", ctypes.POINTER(_PangoGlyphItem), [
	("iter",		ctypes.POINTER(_PangoLayoutIter)),] )

pango_layout_iter_get_line = _rpythonic_function_(		"pango_layout_iter_get_line", ctypes.POINTER(_PangoLayoutLine), [
	("iter",		ctypes.POINTER(_PangoLayoutIter)),] )

pango_layout_iter_get_line_readonly = _rpythonic_function_(		"pango_layout_iter_get_line_readonly", ctypes.POINTER(_PangoLayoutLine), [
	("iter",		ctypes.POINTER(_PangoLayoutIter)),] )

pango_layout_iter_at_last_line = _rpythonic_function_(		"pango_layout_iter_at_last_line", ctypes.c_int, [
	("iter",		ctypes.POINTER(_PangoLayoutIter)),] )

pango_layout_iter_get_layout = _rpythonic_function_(		"pango_layout_iter_get_layout", ctypes.POINTER(_PangoLayout), [
	("iter",		ctypes.POINTER(_PangoLayoutIter)),] )

pango_layout_iter_next_char = _rpythonic_function_(		"pango_layout_iter_next_char", ctypes.c_int, [
	("iter",		ctypes.POINTER(_PangoLayoutIter)),] )

pango_layout_iter_next_cluster = _rpythonic_function_(		"pango_layout_iter_next_cluster", ctypes.c_int, [
	("iter",		ctypes.POINTER(_PangoLayoutIter)),] )

pango_layout_iter_next_run = _rpythonic_function_(		"pango_layout_iter_next_run", ctypes.c_int, [
	("iter",		ctypes.POINTER(_PangoLayoutIter)),] )

pango_layout_iter_next_line = _rpythonic_function_(		"pango_layout_iter_next_line", ctypes.c_int, [
	("iter",		ctypes.POINTER(_PangoLayoutIter)),] )

pango_layout_iter_get_char_extents = _rpythonic_function_(		"pango_layout_iter_get_char_extents", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(_PangoLayoutIter)),
	("logical_rect",		ctypes.POINTER(_PangoRectangle)),] )

pango_layout_iter_get_cluster_extents = _rpythonic_function_(		"pango_layout_iter_get_cluster_extents", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(_PangoLayoutIter)),
	("ink_rect",		ctypes.POINTER(_PangoRectangle)),
	("logical_rect",		ctypes.POINTER(_PangoRectangle)),] )

pango_layout_iter_get_run_extents = _rpythonic_function_(		"pango_layout_iter_get_run_extents", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(_PangoLayoutIter)),
	("ink_rect",		ctypes.POINTER(_PangoRectangle)),
	("logical_rect",		ctypes.POINTER(_PangoRectangle)),] )

pango_layout_iter_get_line_extents = _rpythonic_function_(		"pango_layout_iter_get_line_extents", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(_PangoLayoutIter)),
	("ink_rect",		ctypes.POINTER(_PangoRectangle)),
	("logical_rect",		ctypes.POINTER(_PangoRectangle)),] )

pango_layout_iter_get_line_yrange = _rpythonic_function_(		"pango_layout_iter_get_line_yrange", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(_PangoLayoutIter)),
	("y0_",		ctypes.POINTER(ctypes.c_int)),
	("y1_",		ctypes.POINTER(ctypes.c_int)),] )

pango_layout_iter_get_layout_extents = _rpythonic_function_(		"pango_layout_iter_get_layout_extents", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(_PangoLayoutIter)),
	("ink_rect",		ctypes.POINTER(_PangoRectangle)),
	("logical_rect",		ctypes.POINTER(_PangoRectangle)),] )

pango_layout_iter_get_baseline = _rpythonic_function_(		"pango_layout_iter_get_baseline", ctypes.c_int, [
	("iter",		ctypes.POINTER(_PangoLayoutIter)),] )

draw_glyphs = _rpythonic_function_(		"draw_glyphs", ctypes.c_void_p, [
	("renderer",		ctypes.POINTER(_PangoRenderer)),
	("font",		ctypes.POINTER(_PangoFont)),
	("glyphs",		ctypes.POINTER(_PangoGlyphString)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

draw_rectangle = _rpythonic_function_(		"draw_rectangle", ctypes.c_void_p, [
	("renderer",		ctypes.POINTER(_PangoRenderer)),
	("part",		ctypes.c_int),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

draw_error_underline = _rpythonic_function_(		"draw_error_underline", ctypes.c_void_p, [
	("renderer",		ctypes.POINTER(_PangoRenderer)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

draw_shape = _rpythonic_function_(		"draw_shape", ctypes.c_void_p, [
	("renderer",		ctypes.POINTER(_PangoRenderer)),
	("attr",		ctypes.POINTER(_PangoAttrShape)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

draw_trapezoid = _rpythonic_function_(		"draw_trapezoid", ctypes.c_void_p, [
	("renderer",		ctypes.POINTER(_PangoRenderer)),
	("part",		ctypes.c_int),
	("y1_",		ctypes.c_double),
	("x11",		ctypes.c_double),
	("x21",		ctypes.c_double),
	("y2",		ctypes.c_double),
	("x12",		ctypes.c_double),
	("x22",		ctypes.c_double),] )

draw_glyph = _rpythonic_function_(		"draw_glyph", ctypes.c_void_p, [
	("renderer",		ctypes.POINTER(_PangoRenderer)),
	("font",		ctypes.POINTER(_PangoFont)),
	("glyph",		ctypes.c_uint),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),] )

part_changed = _rpythonic_function_(		"part_changed", ctypes.c_void_p, [
	("renderer",		ctypes.POINTER(_PangoRenderer)),
	("part",		ctypes.c_int),] )

begin = _rpythonic_function_(		"begin", ctypes.c_void_p, [
	("renderer",		ctypes.POINTER(_PangoRenderer)),] )

end = _rpythonic_function_(		"end", ctypes.c_void_p, [
	("renderer",		ctypes.POINTER(_PangoRenderer)),] )

prepare_run = _rpythonic_function_(		"prepare_run", ctypes.c_void_p, [
	("renderer",		ctypes.POINTER(_PangoRenderer)),
	("run",		ctypes.POINTER(_PangoGlyphItem)),] )

draw_glyph_item = _rpythonic_function_(		"draw_glyph_item", ctypes.c_void_p, [
	("renderer",		ctypes.POINTER(_PangoRenderer)),
	("text",		ctypes.POINTER(ctypes.c_char)),
	("glyph_item",		ctypes.POINTER(_PangoGlyphItem)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

_pango_reserved2 = _rpythonic_function_(		"_pango_reserved2", ctypes.c_void_p, [] )

_pango_reserved3 = _rpythonic_function_(		"_pango_reserved3", ctypes.c_void_p, [] )

_pango_reserved4 = _rpythonic_function_(		"_pango_reserved4", ctypes.c_void_p, [] )

pango_renderer_draw_layout = _rpythonic_function_(		"pango_renderer_draw_layout", ctypes.c_void_p, [
	("renderer",		ctypes.POINTER(_PangoRenderer)),
	("layout",		ctypes.POINTER(_PangoLayout)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

pango_renderer_draw_layout_line = _rpythonic_function_(		"pango_renderer_draw_layout_line", ctypes.c_void_p, [
	("renderer",		ctypes.POINTER(_PangoRenderer)),
	("line",		ctypes.POINTER(_PangoLayoutLine)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

pango_renderer_get_type = _rpythonic_function_(		"pango_renderer_get_type", ctypes.c_uint, [] )

pango_renderer_draw_glyphs = _rpythonic_function_(		"pango_renderer_draw_glyphs", ctypes.c_void_p, [
	("renderer",		ctypes.POINTER(_PangoRenderer)),
	("font",		ctypes.POINTER(_PangoFont)),
	("glyphs",		ctypes.POINTER(_PangoGlyphString)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

pango_renderer_draw_glyph_item = _rpythonic_function_(		"pango_renderer_draw_glyph_item", ctypes.c_void_p, [
	("renderer",		ctypes.POINTER(_PangoRenderer)),
	("text",		ctypes.POINTER(ctypes.c_char)),
	("glyph_item",		ctypes.POINTER(_PangoGlyphItem)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

pango_renderer_draw_rectangle = _rpythonic_function_(		"pango_renderer_draw_rectangle", ctypes.c_void_p, [
	("renderer",		ctypes.POINTER(_PangoRenderer)),
	("part",		ctypes.c_int),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

pango_renderer_draw_error_underline = _rpythonic_function_(		"pango_renderer_draw_error_underline", ctypes.c_void_p, [
	("renderer",		ctypes.POINTER(_PangoRenderer)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

pango_renderer_draw_trapezoid = _rpythonic_function_(		"pango_renderer_draw_trapezoid", ctypes.c_void_p, [
	("renderer",		ctypes.POINTER(_PangoRenderer)),
	("part",		ctypes.c_int),
	("y1_",		ctypes.c_double),
	("x11",		ctypes.c_double),
	("x21",		ctypes.c_double),
	("y2",		ctypes.c_double),
	("x12",		ctypes.c_double),
	("x22",		ctypes.c_double),] )

pango_renderer_draw_glyph = _rpythonic_function_(		"pango_renderer_draw_glyph", ctypes.c_void_p, [
	("renderer",		ctypes.POINTER(_PangoRenderer)),
	("font",		ctypes.POINTER(_PangoFont)),
	("glyph",		ctypes.c_uint),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),] )

pango_renderer_activate = _rpythonic_function_(		"pango_renderer_activate", ctypes.c_void_p, [
	("renderer",		ctypes.POINTER(_PangoRenderer)),] )

pango_renderer_deactivate = _rpythonic_function_(		"pango_renderer_deactivate", ctypes.c_void_p, [
	("renderer",		ctypes.POINTER(_PangoRenderer)),] )

pango_renderer_part_changed = _rpythonic_function_(		"pango_renderer_part_changed", ctypes.c_void_p, [
	("renderer",		ctypes.POINTER(_PangoRenderer)),
	("part",		ctypes.c_int),] )

pango_renderer_set_color = _rpythonic_function_(		"pango_renderer_set_color", ctypes.c_void_p, [
	("renderer",		ctypes.POINTER(_PangoRenderer)),
	("part",		ctypes.c_int),
	("color",		ctypes.POINTER(_PangoColor)),] )

pango_renderer_get_color = _rpythonic_function_(		"pango_renderer_get_color", ctypes.POINTER(_PangoColor), [
	("renderer",		ctypes.POINTER(_PangoRenderer)),
	("part",		ctypes.c_int),] )

pango_renderer_set_matrix = _rpythonic_function_(		"pango_renderer_set_matrix", ctypes.c_void_p, [
	("renderer",		ctypes.POINTER(_PangoRenderer)),
	("matrix",		ctypes.POINTER(_PangoMatrix)),] )

pango_renderer_get_matrix = _rpythonic_function_(		"pango_renderer_get_matrix", ctypes.POINTER(_PangoMatrix), [
	("renderer",		ctypes.POINTER(_PangoRenderer)),] )

pango_renderer_get_layout = _rpythonic_function_(		"pango_renderer_get_layout", ctypes.POINTER(_PangoLayout), [
	("renderer",		ctypes.POINTER(_PangoRenderer)),] )

pango_renderer_get_layout_line = _rpythonic_function_(		"pango_renderer_get_layout_line", ctypes.POINTER(_PangoLayoutLine), [
	("renderer",		ctypes.POINTER(_PangoRenderer)),] )

_IO_getc = _rpythonic_function_(		"_IO_getc", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_putc = _rpythonic_function_(		"_IO_putc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_feof = _rpythonic_function_(		"_IO_feof", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_ferror = _rpythonic_function_(		"_IO_ferror", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_peekc_locked = _rpythonic_function_(		"_IO_peekc_locked", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_flockfile = _rpythonic_function_(		"_IO_flockfile", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_IO_funlockfile = _rpythonic_function_(		"_IO_funlockfile", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_IO_ftrylockfile = _rpythonic_function_(		"_IO_ftrylockfile", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_IO_vfscanf = _rpythonic_function_(		"_IO_vfscanf", ctypes.c_int, [
	("__restrict",		ctypes.POINTER(_IO_FILE)),
	("__restrict",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_char),
	("__restrict",		ctypes.POINTER(ctypes.c_int)),] )

_IO_vfprintf = _rpythonic_function_(		"_IO_vfprintf", ctypes.c_int, [
	("__restrict",		ctypes.POINTER(_IO_FILE)),
	("__restrict",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_char),] )

_IO_padn = _rpythonic_function_(		"_IO_padn", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

_IO_sgetn = _rpythonic_function_(		"_IO_sgetn", ctypes.c_uint, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_uint),] )

_IO_seekoff = _rpythonic_function_(		"_IO_seekoff", ctypes.c_longlong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_longlong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

_IO_seekpos = _rpythonic_function_(		"_IO_seekpos", ctypes.c_longlong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_longlong),
	("none",		ctypes.c_int),] )

_IO_free_backup_area = _rpythonic_function_(		"_IO_free_backup_area", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

remove = _rpythonic_function_(		"remove", ctypes.c_int, [
	("__filename",		ctypes.POINTER(ctypes.c_char)),] )

rename = _rpythonic_function_(		"rename", ctypes.c_int, [
	("__old",		ctypes.POINTER(ctypes.c_char)),
	("__new",		ctypes.POINTER(ctypes.c_char)),] )

renameat = _rpythonic_function_(		"renameat", ctypes.c_int, [
	("__oldfd",		ctypes.c_int),
	("__old",		ctypes.POINTER(ctypes.c_char)),
	("__newfd",		ctypes.c_int),
	("__new",		ctypes.POINTER(ctypes.c_char)),] )

tmpfile = _rpythonic_function_(		"tmpfile", ctypes.POINTER(_IO_FILE), [] )

tmpnam = _rpythonic_function_(		"tmpnam", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

tmpnam_r = _rpythonic_function_(		"tmpnam_r", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

tempnam = _rpythonic_function_(		"tempnam", ctypes.POINTER(ctypes.c_char), [
	("__dir",		ctypes.POINTER(ctypes.c_char)),
	("__pfx",		ctypes.POINTER(ctypes.c_char)),] )

fclose = _rpythonic_function_(		"fclose", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fflush = _rpythonic_function_(		"fflush", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fflush_unlocked = _rpythonic_function_(		"fflush_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fopen = _rpythonic_function_(		"fopen", ctypes.POINTER(_IO_FILE), [
	("__filename",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

freopen = _rpythonic_function_(		"freopen", ctypes.POINTER(_IO_FILE), [
	("__filename",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.POINTER(ctypes.c_char)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fdopen = _rpythonic_function_(		"fdopen", ctypes.POINTER(_IO_FILE), [
	("__fd",		ctypes.c_int),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

fmemopen = _rpythonic_function_(		"fmemopen", ctypes.POINTER(_IO_FILE), [
	("__s",		ctypes.POINTER(ctypes.c_void_p)),
	("__len",		ctypes.c_uint),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

open_memstream = _rpythonic_function_(		"open_memstream", ctypes.POINTER(_IO_FILE), [
	("__bufloc",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__sizeloc",		ctypes.POINTER(ctypes.c_uint)),] )

setbuf = _rpythonic_function_(		"setbuf", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

setvbuf = _rpythonic_function_(		"setvbuf", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.c_int),
	("__n",		ctypes.c_uint),] )

setbuffer = _rpythonic_function_(		"setbuffer", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__size",		ctypes.c_uint),] )

setlinebuf = _rpythonic_function_(		"setlinebuf", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

vfprintf = _rpythonic_function_(		"vfprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vprintf = _rpythonic_function_(		"vprintf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vsprintf = _rpythonic_function_(		"vsprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vsnprintf = _rpythonic_function_(		"vsnprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__maxlen",		ctypes.c_uint),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vdprintf = _rpythonic_function_(		"vdprintf", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__fmt",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vfscanf = _rpythonic_function_(		"vfscanf", ctypes.c_int, [
	("__s",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vscanf = _rpythonic_function_(		"vscanf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vsscanf = _rpythonic_function_(		"vsscanf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

fgetc = _rpythonic_function_(		"fgetc", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getc = _rpythonic_function_(		"getc", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getchar = _rpythonic_function_(		"getchar", ctypes.c_int, [] )

getc_unlocked = _rpythonic_function_(		"getc_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getchar_unlocked = _rpythonic_function_(		"getchar_unlocked", ctypes.c_int, [] )

fgetc_unlocked = _rpythonic_function_(		"fgetc_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fputc = _rpythonic_function_(		"fputc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putc = _rpythonic_function_(		"putc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putchar = _rpythonic_function_(		"putchar", ctypes.c_int, [
	("__c",		ctypes.c_int),] )

fputc_unlocked = _rpythonic_function_(		"fputc_unlocked", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putc_unlocked = _rpythonic_function_(		"putc_unlocked", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putchar_unlocked = _rpythonic_function_(		"putchar_unlocked", ctypes.c_int, [
	("__c",		ctypes.c_int),] )

getw = _rpythonic_function_(		"getw", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putw = _rpythonic_function_(		"putw", ctypes.c_int, [
	("__w",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fgets = _rpythonic_function_(		"fgets", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

gets = _rpythonic_function_(		"gets", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

getdelim = _rpythonic_function_(		"getdelim", ctypes.c_int, [
	("__lineptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__n",		ctypes.POINTER(ctypes.c_uint)),
	("__delimiter",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getline = _rpythonic_function_(		"getline", ctypes.c_int, [
	("__lineptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__n",		ctypes.POINTER(ctypes.c_uint)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fputs = _rpythonic_function_(		"fputs", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

puts = _rpythonic_function_(		"puts", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

ungetc = _rpythonic_function_(		"ungetc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fread = _rpythonic_function_(		"fread", ctypes.c_uint, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint),
	("__n",		ctypes.c_uint),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fwrite = _rpythonic_function_(		"fwrite", ctypes.c_uint, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint),
	("__n",		ctypes.c_uint),
	("__s",		ctypes.POINTER(_IO_FILE)),] )

fread_unlocked = _rpythonic_function_(		"fread_unlocked", ctypes.c_uint, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint),
	("__n",		ctypes.c_uint),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fwrite_unlocked = _rpythonic_function_(		"fwrite_unlocked", ctypes.c_uint, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint),
	("__n",		ctypes.c_uint),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fseek = _rpythonic_function_(		"fseek", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__off",		ctypes.c_int64),
	("__whence",		ctypes.c_int),] )

ftell = _rpythonic_function_(		"ftell", ctypes.c_int64, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

rewind = _rpythonic_function_(		"rewind", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fseeko = _rpythonic_function_(		"fseeko", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__off",		ctypes.c_int64),
	("__whence",		ctypes.c_int),] )

ftello = _rpythonic_function_(		"ftello", ctypes.c_int64, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fgetpos = _rpythonic_function_(		"fgetpos", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__pos",		ctypes.POINTER(_G_fpos_t)),] )

fsetpos = _rpythonic_function_(		"fsetpos", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__pos",		ctypes.POINTER(_G_fpos_t)),] )

clearerr = _rpythonic_function_(		"clearerr", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

feof = _rpythonic_function_(		"feof", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ferror = _rpythonic_function_(		"ferror", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

clearerr_unlocked = _rpythonic_function_(		"clearerr_unlocked", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

feof_unlocked = _rpythonic_function_(		"feof_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ferror_unlocked = _rpythonic_function_(		"ferror_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

perror = _rpythonic_function_(		"perror", ctypes.c_void_p, [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

fileno = _rpythonic_function_(		"fileno", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fileno_unlocked = _rpythonic_function_(		"fileno_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

popen = _rpythonic_function_(		"popen", ctypes.POINTER(_IO_FILE), [
	("__command",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

pclose = _rpythonic_function_(		"pclose", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

flockfile = _rpythonic_function_(		"flockfile", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ftrylockfile = _rpythonic_function_(		"ftrylockfile", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

funlockfile = _rpythonic_function_(		"funlockfile", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

pango_split_file_list = _rpythonic_function_(		"pango_split_file_list", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

pango_trim_string = _rpythonic_function_(		"pango_trim_string", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

pango_read_line = _rpythonic_function_(		"pango_read_line", ctypes.c_int, [
	("stream",		ctypes.POINTER(_IO_FILE)),
	("C_str",		ctypes.POINTER(_GString)),] )

pango_skip_space = _rpythonic_function_(		"pango_skip_space", ctypes.c_int, [
	("pos",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

pango_scan_word = _rpythonic_function_(		"pango_scan_word", ctypes.c_int, [
	("pos",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("out",		ctypes.POINTER(_GString)),] )

pango_scan_string = _rpythonic_function_(		"pango_scan_string", ctypes.c_int, [
	("pos",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("out",		ctypes.POINTER(_GString)),] )

pango_scan_int = _rpythonic_function_(		"pango_scan_int", ctypes.c_int, [
	("pos",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("out",		ctypes.POINTER(ctypes.c_int)),] )

pango_parse_enum = _rpythonic_function_(		"pango_parse_enum", ctypes.c_int, [
	("C_type",		ctypes.c_uint),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_int)),
	("warn",		ctypes.c_int),
	("possible_values",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

pango_parse_style = _rpythonic_function_(		"pango_parse_style", ctypes.c_int, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("style",		ctypes.POINTER(ctypes.c_int)),
	("warn",		ctypes.c_int),] )

pango_parse_variant = _rpythonic_function_(		"pango_parse_variant", ctypes.c_int, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("variant",		ctypes.POINTER(ctypes.c_int)),
	("warn",		ctypes.c_int),] )

pango_parse_weight = _rpythonic_function_(		"pango_parse_weight", ctypes.c_int, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("weight",		ctypes.POINTER(ctypes.c_int)),
	("warn",		ctypes.c_int),] )

pango_parse_stretch = _rpythonic_function_(		"pango_parse_stretch", ctypes.c_int, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("stretch",		ctypes.POINTER(ctypes.c_int)),
	("warn",		ctypes.c_int),] )

pango_quantize_line_geometry = _rpythonic_function_(		"pango_quantize_line_geometry", ctypes.c_void_p, [
	("thickness",		ctypes.POINTER(ctypes.c_int)),
	("position",		ctypes.POINTER(ctypes.c_int)),] )

pango_log2vis_get_embedding_levels = _rpythonic_function_(		"pango_log2vis_get_embedding_levels", ctypes.POINTER(ctypes.c_ubyte), [
	("text",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),
	("pbase_dir",		ctypes.POINTER(ctypes.c_int)),] )

pango_is_zero_width = _rpythonic_function_(		"pango_is_zero_width", ctypes.c_int, [
	("ch",		ctypes.c_uint),] )

pango_version = _rpythonic_function_(		"pango_version", ctypes.c_int, [] )

pango_version_string = _rpythonic_function_(		"pango_version_string", ctypes.POINTER(ctypes.c_char), [] )

pango_version_check = _rpythonic_function_(		"pango_version_check", ctypes.POINTER(ctypes.c_char), [
	("required_major",		ctypes.c_int),
	("required_minor",		ctypes.c_int),
	("required_micro",		ctypes.c_int),] )

cairo_version = _rpythonic_function_(		"cairo_version", ctypes.c_int, [] )

cairo_version_string = _rpythonic_function_(		"cairo_version_string", ctypes.POINTER(ctypes.c_char), [] )

cairo_destroy_func_t = _rpythonic_function_(		"cairo_destroy_func_t", ctypes.c_void_p, [("data",		ctypes.c_void_p)] )

cairo_write_func_t = _rpythonic_function_(		"cairo_write_func_t", ctypes.c_int, [
	("closure",		ctypes.POINTER(ctypes.c_void_p)),
	("data",		ctypes.POINTER(ctypes.c_ubyte)),
	("length",		ctypes.c_uint),] )

cairo_read_func_t = _rpythonic_function_(		"cairo_read_func_t", ctypes.c_int, [
	("closure",		ctypes.POINTER(ctypes.c_void_p)),
	("data",		ctypes.POINTER(ctypes.c_ubyte)),
	("length",		ctypes.c_uint),] )

cairo_create = _rpythonic_function_(		"cairo_create", ctypes.POINTER(_cairo), [
	("target",		ctypes.POINTER(_cairo_surface)),] )

cairo_reference = _rpythonic_function_(		"cairo_reference", ctypes.POINTER(_cairo), [
	("cr",		ctypes.POINTER(_cairo)),] )

cairo_destroy = _rpythonic_function_(		"cairo_destroy", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),] )

cairo_get_reference_count = _rpythonic_function_(		"cairo_get_reference_count", ctypes.c_uint, [
	("cr",		ctypes.POINTER(_cairo)),] )

cairo_get_user_data = _rpythonic_function_(		"cairo_get_user_data", ctypes.POINTER(ctypes.c_void_p), [
	("cr",		ctypes.POINTER(_cairo)),
	("key",		ctypes.POINTER(_cairo_user_data_key)),] )

cairo_set_user_data = _rpythonic_function_(		"cairo_set_user_data", ctypes.c_int, [
	("cr",		ctypes.POINTER(_cairo)),
	("key",		ctypes.POINTER(_cairo_user_data_key)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

cairo_save = _rpythonic_function_(		"cairo_save", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),] )

cairo_restore = _rpythonic_function_(		"cairo_restore", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),] )

cairo_push_group = _rpythonic_function_(		"cairo_push_group", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),] )

cairo_push_group_with_content = _rpythonic_function_(		"cairo_push_group_with_content", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("content",		ctypes.c_int),] )

cairo_pop_group = _rpythonic_function_(		"cairo_pop_group", ctypes.POINTER(_cairo_pattern), [
	("cr",		ctypes.POINTER(_cairo)),] )

cairo_pop_group_to_source = _rpythonic_function_(		"cairo_pop_group_to_source", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),] )

cairo_set_operator = _rpythonic_function_(		"cairo_set_operator", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("op",		ctypes.c_int),] )

cairo_set_source = _rpythonic_function_(		"cairo_set_source", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("source",		ctypes.POINTER(_cairo_pattern)),] )

cairo_set_source_rgb = _rpythonic_function_(		"cairo_set_source_rgb", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("red",		ctypes.c_double),
	("green",		ctypes.c_double),
	("blue",		ctypes.c_double),] )

cairo_set_source_rgba = _rpythonic_function_(		"cairo_set_source_rgba", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("red",		ctypes.c_double),
	("green",		ctypes.c_double),
	("blue",		ctypes.c_double),
	("alpha",		ctypes.c_double),] )

cairo_set_source_surface = _rpythonic_function_(		"cairo_set_source_surface", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("surface",		ctypes.POINTER(_cairo_surface)),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),] )

cairo_set_tolerance = _rpythonic_function_(		"cairo_set_tolerance", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("tolerance",		ctypes.c_double),] )

cairo_set_antialias = _rpythonic_function_(		"cairo_set_antialias", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("antialias",		ctypes.c_int),] )

cairo_set_fill_rule = _rpythonic_function_(		"cairo_set_fill_rule", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("fill_rule",		ctypes.c_int),] )

cairo_set_line_width = _rpythonic_function_(		"cairo_set_line_width", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("width",		ctypes.c_double),] )

cairo_set_line_cap = _rpythonic_function_(		"cairo_set_line_cap", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("line_cap",		ctypes.c_int),] )

cairo_set_line_join = _rpythonic_function_(		"cairo_set_line_join", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("line_join",		ctypes.c_int),] )

cairo_set_dash = _rpythonic_function_(		"cairo_set_dash", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("dashes",		ctypes.POINTER(ctypes.c_double)),
	("num_dashes",		ctypes.c_int),
	("offset",		ctypes.c_double),] )

cairo_set_miter_limit = _rpythonic_function_(		"cairo_set_miter_limit", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("limit",		ctypes.c_double),] )

cairo_translate = _rpythonic_function_(		"cairo_translate", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("tx",		ctypes.c_double),
	("ty",		ctypes.c_double),] )

cairo_scale = _rpythonic_function_(		"cairo_scale", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("sx",		ctypes.c_double),
	("sy",		ctypes.c_double),] )

cairo_rotate = _rpythonic_function_(		"cairo_rotate", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("angle",		ctypes.c_double),] )

cairo_transform = _rpythonic_function_(		"cairo_transform", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("matrix",		ctypes.POINTER(_cairo_matrix)),] )

cairo_set_matrix = _rpythonic_function_(		"cairo_set_matrix", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("matrix",		ctypes.POINTER(_cairo_matrix)),] )

cairo_identity_matrix = _rpythonic_function_(		"cairo_identity_matrix", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),] )

cairo_user_to_device = _rpythonic_function_(		"cairo_user_to_device", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("x",		ctypes.POINTER(ctypes.c_double)),
	("y",		ctypes.POINTER(ctypes.c_double)),] )

cairo_user_to_device_distance = _rpythonic_function_(		"cairo_user_to_device_distance", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("dx",		ctypes.POINTER(ctypes.c_double)),
	("dy",		ctypes.POINTER(ctypes.c_double)),] )

cairo_device_to_user = _rpythonic_function_(		"cairo_device_to_user", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("x",		ctypes.POINTER(ctypes.c_double)),
	("y",		ctypes.POINTER(ctypes.c_double)),] )

cairo_device_to_user_distance = _rpythonic_function_(		"cairo_device_to_user_distance", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("dx",		ctypes.POINTER(ctypes.c_double)),
	("dy",		ctypes.POINTER(ctypes.c_double)),] )

cairo_new_path = _rpythonic_function_(		"cairo_new_path", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),] )

cairo_move_to = _rpythonic_function_(		"cairo_move_to", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),] )

cairo_new_sub_path = _rpythonic_function_(		"cairo_new_sub_path", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),] )

cairo_line_to = _rpythonic_function_(		"cairo_line_to", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),] )

cairo_curve_to = _rpythonic_function_(		"cairo_curve_to", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("x1",		ctypes.c_double),
	("y1",		ctypes.c_double),
	("x2",		ctypes.c_double),
	("y2",		ctypes.c_double),
	("x3",		ctypes.c_double),
	("y3",		ctypes.c_double),] )

cairo_arc = _rpythonic_function_(		"cairo_arc", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("xc",		ctypes.c_double),
	("yc",		ctypes.c_double),
	("radius",		ctypes.c_double),
	("angle1",		ctypes.c_double),
	("angle2",		ctypes.c_double),] )

cairo_arc_negative = _rpythonic_function_(		"cairo_arc_negative", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("xc",		ctypes.c_double),
	("yc",		ctypes.c_double),
	("radius",		ctypes.c_double),
	("angle1",		ctypes.c_double),
	("angle2",		ctypes.c_double),] )

cairo_rel_move_to = _rpythonic_function_(		"cairo_rel_move_to", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("dx",		ctypes.c_double),
	("dy",		ctypes.c_double),] )

cairo_rel_line_to = _rpythonic_function_(		"cairo_rel_line_to", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("dx",		ctypes.c_double),
	("dy",		ctypes.c_double),] )

cairo_rel_curve_to = _rpythonic_function_(		"cairo_rel_curve_to", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("dx1",		ctypes.c_double),
	("dy1",		ctypes.c_double),
	("dx2",		ctypes.c_double),
	("dy2",		ctypes.c_double),
	("dx3",		ctypes.c_double),
	("dy3",		ctypes.c_double),] )

cairo_rectangle = _rpythonic_function_(		"cairo_rectangle", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("width",		ctypes.c_double),
	("height",		ctypes.c_double),] )

cairo_close_path = _rpythonic_function_(		"cairo_close_path", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),] )

cairo_path_extents = _rpythonic_function_(		"cairo_path_extents", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("x1",		ctypes.POINTER(ctypes.c_double)),
	("y1",		ctypes.POINTER(ctypes.c_double)),
	("x2",		ctypes.POINTER(ctypes.c_double)),
	("y2",		ctypes.POINTER(ctypes.c_double)),] )

cairo_paint = _rpythonic_function_(		"cairo_paint", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),] )

cairo_paint_with_alpha = _rpythonic_function_(		"cairo_paint_with_alpha", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("alpha",		ctypes.c_double),] )

cairo_mask = _rpythonic_function_(		"cairo_mask", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("pattern",		ctypes.POINTER(_cairo_pattern)),] )

cairo_mask_surface = _rpythonic_function_(		"cairo_mask_surface", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("surface",		ctypes.POINTER(_cairo_surface)),
	("surface_x",		ctypes.c_double),
	("surface_y",		ctypes.c_double),] )

cairo_stroke = _rpythonic_function_(		"cairo_stroke", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),] )

cairo_stroke_preserve = _rpythonic_function_(		"cairo_stroke_preserve", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),] )

cairo_fill = _rpythonic_function_(		"cairo_fill", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),] )

cairo_fill_preserve = _rpythonic_function_(		"cairo_fill_preserve", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),] )

cairo_copy_page = _rpythonic_function_(		"cairo_copy_page", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),] )

cairo_show_page = _rpythonic_function_(		"cairo_show_page", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),] )

cairo_in_stroke = _rpythonic_function_(		"cairo_in_stroke", ctypes.c_int, [
	("cr",		ctypes.POINTER(_cairo)),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),] )

cairo_in_fill = _rpythonic_function_(		"cairo_in_fill", ctypes.c_int, [
	("cr",		ctypes.POINTER(_cairo)),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),] )

cairo_in_clip = _rpythonic_function_(		"cairo_in_clip", ctypes.c_int, [
	("cr",		ctypes.POINTER(_cairo)),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),] )

cairo_stroke_extents = _rpythonic_function_(		"cairo_stroke_extents", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("x1",		ctypes.POINTER(ctypes.c_double)),
	("y1",		ctypes.POINTER(ctypes.c_double)),
	("x2",		ctypes.POINTER(ctypes.c_double)),
	("y2",		ctypes.POINTER(ctypes.c_double)),] )

cairo_fill_extents = _rpythonic_function_(		"cairo_fill_extents", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("x1",		ctypes.POINTER(ctypes.c_double)),
	("y1",		ctypes.POINTER(ctypes.c_double)),
	("x2",		ctypes.POINTER(ctypes.c_double)),
	("y2",		ctypes.POINTER(ctypes.c_double)),] )

cairo_reset_clip = _rpythonic_function_(		"cairo_reset_clip", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),] )

cairo_clip = _rpythonic_function_(		"cairo_clip", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),] )

cairo_clip_preserve = _rpythonic_function_(		"cairo_clip_preserve", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),] )

cairo_clip_extents = _rpythonic_function_(		"cairo_clip_extents", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("x1",		ctypes.POINTER(ctypes.c_double)),
	("y1",		ctypes.POINTER(ctypes.c_double)),
	("x2",		ctypes.POINTER(ctypes.c_double)),
	("y2",		ctypes.POINTER(ctypes.c_double)),] )

cairo_copy_clip_rectangle_list = _rpythonic_function_(		"cairo_copy_clip_rectangle_list", ctypes.POINTER(_cairo_rectangle_list), [
	("cr",		ctypes.POINTER(_cairo)),] )

cairo_rectangle_list_destroy = _rpythonic_function_(		"cairo_rectangle_list_destroy", ctypes.c_void_p, [
	("rectangle_list",		ctypes.POINTER(_cairo_rectangle_list)),] )

cairo_glyph_allocate = _rpythonic_function_(		"cairo_glyph_allocate", ctypes.POINTER(cairo_glyph_t), [
	("num_glyphs",		ctypes.c_int),] )

cairo_glyph_free = _rpythonic_function_(		"cairo_glyph_free", ctypes.c_void_p, [
	("glyphs",		ctypes.POINTER(cairo_glyph_t)),] )

cairo_text_cluster_allocate = _rpythonic_function_(		"cairo_text_cluster_allocate", ctypes.POINTER(cairo_text_cluster_t), [
	("num_clusters",		ctypes.c_int),] )

cairo_text_cluster_free = _rpythonic_function_(		"cairo_text_cluster_free", ctypes.c_void_p, [
	("clusters",		ctypes.POINTER(cairo_text_cluster_t)),] )

cairo_font_options_create = _rpythonic_function_(		"cairo_font_options_create", ctypes.POINTER(_cairo_font_options), [] )

cairo_font_options_copy = _rpythonic_function_(		"cairo_font_options_copy", ctypes.POINTER(_cairo_font_options), [
	("original",		ctypes.POINTER(_cairo_font_options)),] )

cairo_font_options_destroy = _rpythonic_function_(		"cairo_font_options_destroy", ctypes.c_void_p, [
	("options",		ctypes.POINTER(_cairo_font_options)),] )

cairo_font_options_status = _rpythonic_function_(		"cairo_font_options_status", ctypes.c_int, [
	("options",		ctypes.POINTER(_cairo_font_options)),] )

cairo_font_options_merge = _rpythonic_function_(		"cairo_font_options_merge", ctypes.c_void_p, [
	("options",		ctypes.POINTER(_cairo_font_options)),
	("other",		ctypes.POINTER(_cairo_font_options)),] )

cairo_font_options_equal = _rpythonic_function_(		"cairo_font_options_equal", ctypes.c_int, [
	("options",		ctypes.POINTER(_cairo_font_options)),
	("other",		ctypes.POINTER(_cairo_font_options)),] )

cairo_font_options_hash = _rpythonic_function_(		"cairo_font_options_hash", ctypes.c_ulong, [
	("options",		ctypes.POINTER(_cairo_font_options)),] )

cairo_font_options_set_antialias = _rpythonic_function_(		"cairo_font_options_set_antialias", ctypes.c_void_p, [
	("options",		ctypes.POINTER(_cairo_font_options)),
	("antialias",		ctypes.c_int),] )

cairo_font_options_get_antialias = _rpythonic_function_(		"cairo_font_options_get_antialias", ctypes.c_int, [
	("options",		ctypes.POINTER(_cairo_font_options)),] )

cairo_font_options_set_subpixel_order = _rpythonic_function_(		"cairo_font_options_set_subpixel_order", ctypes.c_void_p, [
	("options",		ctypes.POINTER(_cairo_font_options)),
	("subpixel_order",		ctypes.c_int),] )

cairo_font_options_get_subpixel_order = _rpythonic_function_(		"cairo_font_options_get_subpixel_order", ctypes.c_int, [
	("options",		ctypes.POINTER(_cairo_font_options)),] )

cairo_font_options_set_hint_style = _rpythonic_function_(		"cairo_font_options_set_hint_style", ctypes.c_void_p, [
	("options",		ctypes.POINTER(_cairo_font_options)),
	("hint_style",		ctypes.c_int),] )

cairo_font_options_get_hint_style = _rpythonic_function_(		"cairo_font_options_get_hint_style", ctypes.c_int, [
	("options",		ctypes.POINTER(_cairo_font_options)),] )

cairo_font_options_set_hint_metrics = _rpythonic_function_(		"cairo_font_options_set_hint_metrics", ctypes.c_void_p, [
	("options",		ctypes.POINTER(_cairo_font_options)),
	("hint_metrics",		ctypes.c_int),] )

cairo_font_options_get_hint_metrics = _rpythonic_function_(		"cairo_font_options_get_hint_metrics", ctypes.c_int, [
	("options",		ctypes.POINTER(_cairo_font_options)),] )

cairo_select_font_face = _rpythonic_function_(		"cairo_select_font_face", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("family",		ctypes.POINTER(ctypes.c_char)),
	("slant",		ctypes.c_int),
	("weight",		ctypes.c_int),] )

cairo_set_font_size = _rpythonic_function_(		"cairo_set_font_size", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("size",		ctypes.c_double),] )

cairo_set_font_matrix = _rpythonic_function_(		"cairo_set_font_matrix", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("matrix",		ctypes.POINTER(_cairo_matrix)),] )

cairo_get_font_matrix = _rpythonic_function_(		"cairo_get_font_matrix", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("matrix",		ctypes.POINTER(_cairo_matrix)),] )

cairo_set_font_options = _rpythonic_function_(		"cairo_set_font_options", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("options",		ctypes.POINTER(_cairo_font_options)),] )

cairo_get_font_options = _rpythonic_function_(		"cairo_get_font_options", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("options",		ctypes.POINTER(_cairo_font_options)),] )

cairo_set_font_face = _rpythonic_function_(		"cairo_set_font_face", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("font_face",		ctypes.POINTER(_cairo_font_face)),] )

cairo_get_font_face = _rpythonic_function_(		"cairo_get_font_face", ctypes.POINTER(_cairo_font_face), [
	("cr",		ctypes.POINTER(_cairo)),] )

cairo_set_scaled_font = _rpythonic_function_(		"cairo_set_scaled_font", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("scaled_font",		ctypes.POINTER(_cairo_scaled_font)),] )

cairo_get_scaled_font = _rpythonic_function_(		"cairo_get_scaled_font", ctypes.POINTER(_cairo_scaled_font), [
	("cr",		ctypes.POINTER(_cairo)),] )

cairo_show_text = _rpythonic_function_(		"cairo_show_text", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("utf8",		ctypes.POINTER(ctypes.c_char)),] )

cairo_show_glyphs = _rpythonic_function_(		"cairo_show_glyphs", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("glyphs",		ctypes.POINTER(cairo_glyph_t)),
	("num_glyphs",		ctypes.c_int),] )

cairo_show_text_glyphs = _rpythonic_function_(		"cairo_show_text_glyphs", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("utf8",		ctypes.POINTER(ctypes.c_char)),
	("utf8_len",		ctypes.c_int),
	("glyphs",		ctypes.POINTER(cairo_glyph_t)),
	("num_glyphs",		ctypes.c_int),
	("clusters",		ctypes.POINTER(cairo_text_cluster_t)),
	("num_clusters",		ctypes.c_int),
	("cluster_flags",		ctypes.c_int),] )

cairo_text_path = _rpythonic_function_(		"cairo_text_path", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("utf8",		ctypes.POINTER(ctypes.c_char)),] )

cairo_glyph_path = _rpythonic_function_(		"cairo_glyph_path", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("glyphs",		ctypes.POINTER(cairo_glyph_t)),
	("num_glyphs",		ctypes.c_int),] )

cairo_text_extents = _rpythonic_function_(		"cairo_text_extents", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("utf8",		ctypes.POINTER(ctypes.c_char)),
	("extents",		ctypes.POINTER(cairo_text_extents_t)),] )

cairo_glyph_extents = _rpythonic_function_(		"cairo_glyph_extents", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("glyphs",		ctypes.POINTER(cairo_glyph_t)),
	("num_glyphs",		ctypes.c_int),
	("extents",		ctypes.POINTER(cairo_text_extents_t)),] )

cairo_font_extents = _rpythonic_function_(		"cairo_font_extents", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("extents",		ctypes.POINTER(cairo_font_extents_t)),] )

cairo_font_face_reference = _rpythonic_function_(		"cairo_font_face_reference", ctypes.POINTER(_cairo_font_face), [
	("font_face",		ctypes.POINTER(_cairo_font_face)),] )

cairo_font_face_destroy = _rpythonic_function_(		"cairo_font_face_destroy", ctypes.c_void_p, [
	("font_face",		ctypes.POINTER(_cairo_font_face)),] )

cairo_font_face_get_reference_count = _rpythonic_function_(		"cairo_font_face_get_reference_count", ctypes.c_uint, [
	("font_face",		ctypes.POINTER(_cairo_font_face)),] )

cairo_font_face_status = _rpythonic_function_(		"cairo_font_face_status", ctypes.c_int, [
	("font_face",		ctypes.POINTER(_cairo_font_face)),] )

cairo_font_face_get_type = _rpythonic_function_(		"cairo_font_face_get_type", ctypes.c_int, [
	("font_face",		ctypes.POINTER(_cairo_font_face)),] )

cairo_font_face_get_user_data = _rpythonic_function_(		"cairo_font_face_get_user_data", ctypes.POINTER(ctypes.c_void_p), [
	("font_face",		ctypes.POINTER(_cairo_font_face)),
	("key",		ctypes.POINTER(_cairo_user_data_key)),] )

cairo_font_face_set_user_data = _rpythonic_function_(		"cairo_font_face_set_user_data", ctypes.c_int, [
	("font_face",		ctypes.POINTER(_cairo_font_face)),
	("key",		ctypes.POINTER(_cairo_user_data_key)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

cairo_scaled_font_create = _rpythonic_function_(		"cairo_scaled_font_create", ctypes.POINTER(_cairo_scaled_font), [
	("font_face",		ctypes.POINTER(_cairo_font_face)),
	("font_matrix",		ctypes.POINTER(_cairo_matrix)),
	("ctm",		ctypes.POINTER(_cairo_matrix)),
	("options",		ctypes.POINTER(_cairo_font_options)),] )

cairo_scaled_font_reference = _rpythonic_function_(		"cairo_scaled_font_reference", ctypes.POINTER(_cairo_scaled_font), [
	("scaled_font",		ctypes.POINTER(_cairo_scaled_font)),] )

cairo_scaled_font_destroy = _rpythonic_function_(		"cairo_scaled_font_destroy", ctypes.c_void_p, [
	("scaled_font",		ctypes.POINTER(_cairo_scaled_font)),] )

cairo_scaled_font_get_reference_count = _rpythonic_function_(		"cairo_scaled_font_get_reference_count", ctypes.c_uint, [
	("scaled_font",		ctypes.POINTER(_cairo_scaled_font)),] )

cairo_scaled_font_status = _rpythonic_function_(		"cairo_scaled_font_status", ctypes.c_int, [
	("scaled_font",		ctypes.POINTER(_cairo_scaled_font)),] )

cairo_scaled_font_get_type = _rpythonic_function_(		"cairo_scaled_font_get_type", ctypes.c_int, [
	("scaled_font",		ctypes.POINTER(_cairo_scaled_font)),] )

cairo_scaled_font_get_user_data = _rpythonic_function_(		"cairo_scaled_font_get_user_data", ctypes.POINTER(ctypes.c_void_p), [
	("scaled_font",		ctypes.POINTER(_cairo_scaled_font)),
	("key",		ctypes.POINTER(_cairo_user_data_key)),] )

cairo_scaled_font_set_user_data = _rpythonic_function_(		"cairo_scaled_font_set_user_data", ctypes.c_int, [
	("scaled_font",		ctypes.POINTER(_cairo_scaled_font)),
	("key",		ctypes.POINTER(_cairo_user_data_key)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

cairo_scaled_font_extents = _rpythonic_function_(		"cairo_scaled_font_extents", ctypes.c_void_p, [
	("scaled_font",		ctypes.POINTER(_cairo_scaled_font)),
	("extents",		ctypes.POINTER(cairo_font_extents_t)),] )

cairo_scaled_font_text_extents = _rpythonic_function_(		"cairo_scaled_font_text_extents", ctypes.c_void_p, [
	("scaled_font",		ctypes.POINTER(_cairo_scaled_font)),
	("utf8",		ctypes.POINTER(ctypes.c_char)),
	("extents",		ctypes.POINTER(cairo_text_extents_t)),] )

cairo_scaled_font_glyph_extents = _rpythonic_function_(		"cairo_scaled_font_glyph_extents", ctypes.c_void_p, [
	("scaled_font",		ctypes.POINTER(_cairo_scaled_font)),
	("glyphs",		ctypes.POINTER(cairo_glyph_t)),
	("num_glyphs",		ctypes.c_int),
	("extents",		ctypes.POINTER(cairo_text_extents_t)),] )

cairo_scaled_font_text_to_glyphs = _rpythonic_function_(		"cairo_scaled_font_text_to_glyphs", ctypes.c_int, [
	("scaled_font",		ctypes.POINTER(_cairo_scaled_font)),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("utf8",		ctypes.POINTER(ctypes.c_char)),
	("utf8_len",		ctypes.c_int),
	("glyphs",		ctypes.POINTER(ctypes.POINTER(cairo_glyph_t))),
	("num_glyphs",		ctypes.POINTER(ctypes.c_int)),
	("clusters",		ctypes.POINTER(ctypes.POINTER(cairo_text_cluster_t))),
	("num_clusters",		ctypes.POINTER(ctypes.c_int)),
	("cluster_flags",		ctypes.POINTER(ctypes.c_int)),] )

cairo_scaled_font_get_font_face = _rpythonic_function_(		"cairo_scaled_font_get_font_face", ctypes.POINTER(_cairo_font_face), [
	("scaled_font",		ctypes.POINTER(_cairo_scaled_font)),] )

cairo_scaled_font_get_font_matrix = _rpythonic_function_(		"cairo_scaled_font_get_font_matrix", ctypes.c_void_p, [
	("scaled_font",		ctypes.POINTER(_cairo_scaled_font)),
	("font_matrix",		ctypes.POINTER(_cairo_matrix)),] )

cairo_scaled_font_get_ctm = _rpythonic_function_(		"cairo_scaled_font_get_ctm", ctypes.c_void_p, [
	("scaled_font",		ctypes.POINTER(_cairo_scaled_font)),
	("ctm",		ctypes.POINTER(_cairo_matrix)),] )

cairo_scaled_font_get_scale_matrix = _rpythonic_function_(		"cairo_scaled_font_get_scale_matrix", ctypes.c_void_p, [
	("scaled_font",		ctypes.POINTER(_cairo_scaled_font)),
	("scale_matrix",		ctypes.POINTER(_cairo_matrix)),] )

cairo_scaled_font_get_font_options = _rpythonic_function_(		"cairo_scaled_font_get_font_options", ctypes.c_void_p, [
	("scaled_font",		ctypes.POINTER(_cairo_scaled_font)),
	("options",		ctypes.POINTER(_cairo_font_options)),] )

cairo_toy_font_face_create = _rpythonic_function_(		"cairo_toy_font_face_create", ctypes.POINTER(_cairo_font_face), [
	("family",		ctypes.POINTER(ctypes.c_char)),
	("slant",		ctypes.c_int),
	("weight",		ctypes.c_int),] )

cairo_toy_font_face_get_family = _rpythonic_function_(		"cairo_toy_font_face_get_family", ctypes.POINTER(ctypes.c_char), [
	("font_face",		ctypes.POINTER(_cairo_font_face)),] )

cairo_toy_font_face_get_slant = _rpythonic_function_(		"cairo_toy_font_face_get_slant", ctypes.c_int, [
	("font_face",		ctypes.POINTER(_cairo_font_face)),] )

cairo_toy_font_face_get_weight = _rpythonic_function_(		"cairo_toy_font_face_get_weight", ctypes.c_int, [
	("font_face",		ctypes.POINTER(_cairo_font_face)),] )

cairo_user_font_face_create = _rpythonic_function_(		"cairo_user_font_face_create", ctypes.POINTER(_cairo_font_face), [] )

cairo_user_scaled_font_init_func_t = _rpythonic_function_(		"cairo_user_scaled_font_init_func_t", ctypes.c_int, [
	("scaled_font",		ctypes.POINTER(_cairo_scaled_font)),
	("cr",		ctypes.POINTER(_cairo)),
	("extents",		ctypes.POINTER(cairo_font_extents_t)),] )

cairo_user_scaled_font_render_glyph_func_t = _rpythonic_function_(		"cairo_user_scaled_font_render_glyph_func_t", ctypes.c_int, [
	("scaled_font",		ctypes.POINTER(_cairo_scaled_font)),
	("glyph",		ctypes.c_ulong),
	("cr",		ctypes.POINTER(_cairo)),
	("extents",		ctypes.POINTER(cairo_text_extents_t)),] )

cairo_user_scaled_font_text_to_glyphs_func_t = _rpythonic_function_(		"cairo_user_scaled_font_text_to_glyphs_func_t", ctypes.c_int, [
	("scaled_font",		ctypes.POINTER(_cairo_scaled_font)),
	("utf8",		ctypes.POINTER(ctypes.c_char)),
	("utf8_len",		ctypes.c_int),
	("glyphs",		ctypes.POINTER(ctypes.POINTER(cairo_glyph_t))),
	("num_glyphs",		ctypes.POINTER(ctypes.c_int)),
	("clusters",		ctypes.POINTER(ctypes.POINTER(cairo_text_cluster_t))),
	("num_clusters",		ctypes.POINTER(ctypes.c_int)),
	("cluster_flags",		ctypes.POINTER(ctypes.c_int)),] )

cairo_user_scaled_font_unicode_to_glyph_func_t = _rpythonic_function_(		"cairo_user_scaled_font_unicode_to_glyph_func_t", ctypes.c_int, [
	("scaled_font",		ctypes.POINTER(_cairo_scaled_font)),
	("unicode",		ctypes.c_ulong),
	("glyph_index",		ctypes.POINTER(ctypes.c_ulong)),] )

cairo_user_font_face_set_init_func = _rpythonic_function_(		"cairo_user_font_face_set_init_func", ctypes.c_void_p, [
	("font_face",		ctypes.POINTER(_cairo_font_face)),
	("init_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_cairo_scaled_font),ctypes.POINTER(_cairo),ctypes.POINTER(cairo_font_extents_t),)),] )

cairo_user_font_face_set_render_glyph_func = _rpythonic_function_(		"cairo_user_font_face_set_render_glyph_func", ctypes.c_void_p, [
	("font_face",		ctypes.POINTER(_cairo_font_face)),
	("render_glyph_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_cairo_scaled_font),ctypes.c_ulong,ctypes.POINTER(_cairo),ctypes.POINTER(cairo_text_extents_t),)),] )

cairo_user_font_face_set_text_to_glyphs_func = _rpythonic_function_(		"cairo_user_font_face_set_text_to_glyphs_func", ctypes.c_void_p, [
	("font_face",		ctypes.POINTER(_cairo_font_face)),
	("text_to_glyphs_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_cairo_scaled_font),ctypes.POINTER(ctypes.c_char),ctypes.c_int,ctypes.POINTER(ctypes.POINTER(cairo_glyph_t)),ctypes.POINTER(ctypes.c_int),ctypes.POINTER(ctypes.POINTER(cairo_text_cluster_t)),ctypes.POINTER(ctypes.c_int),ctypes.POINTER(ctypes.c_int),)),] )

cairo_user_font_face_set_unicode_to_glyph_func = _rpythonic_function_(		"cairo_user_font_face_set_unicode_to_glyph_func", ctypes.c_void_p, [
	("font_face",		ctypes.POINTER(_cairo_font_face)),
	("unicode_to_glyph_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_cairo_scaled_font),ctypes.c_ulong,ctypes.POINTER(ctypes.c_ulong),)),] )

cairo_user_font_face_get_init_func = _rpythonic_function_(		"cairo_user_font_face_get_init_func", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_cairo_scaled_font),ctypes.POINTER(_cairo),ctypes.POINTER(cairo_font_extents_t),), [
	("font_face",		ctypes.POINTER(_cairo_font_face)),] )

cairo_user_font_face_get_render_glyph_func = _rpythonic_function_(		"cairo_user_font_face_get_render_glyph_func", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_cairo_scaled_font),ctypes.c_ulong,ctypes.POINTER(_cairo),ctypes.POINTER(cairo_text_extents_t),), [
	("font_face",		ctypes.POINTER(_cairo_font_face)),] )

cairo_user_font_face_get_text_to_glyphs_func = _rpythonic_function_(		"cairo_user_font_face_get_text_to_glyphs_func", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_cairo_scaled_font),ctypes.POINTER(ctypes.c_char),ctypes.c_int,ctypes.POINTER(ctypes.POINTER(cairo_glyph_t)),ctypes.POINTER(ctypes.c_int),ctypes.POINTER(ctypes.POINTER(cairo_text_cluster_t)),ctypes.POINTER(ctypes.c_int),ctypes.POINTER(ctypes.c_int),), [
	("font_face",		ctypes.POINTER(_cairo_font_face)),] )

cairo_user_font_face_get_unicode_to_glyph_func = _rpythonic_function_(		"cairo_user_font_face_get_unicode_to_glyph_func", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_cairo_scaled_font),ctypes.c_ulong,ctypes.POINTER(ctypes.c_ulong),), [
	("font_face",		ctypes.POINTER(_cairo_font_face)),] )

cairo_get_operator = _rpythonic_function_(		"cairo_get_operator", ctypes.c_int, [
	("cr",		ctypes.POINTER(_cairo)),] )

cairo_get_source = _rpythonic_function_(		"cairo_get_source", ctypes.POINTER(_cairo_pattern), [
	("cr",		ctypes.POINTER(_cairo)),] )

cairo_get_tolerance = _rpythonic_function_(		"cairo_get_tolerance", ctypes.c_double, [
	("cr",		ctypes.POINTER(_cairo)),] )

cairo_get_antialias = _rpythonic_function_(		"cairo_get_antialias", ctypes.c_int, [
	("cr",		ctypes.POINTER(_cairo)),] )

cairo_has_current_point = _rpythonic_function_(		"cairo_has_current_point", ctypes.c_int, [
	("cr",		ctypes.POINTER(_cairo)),] )

cairo_get_current_point = _rpythonic_function_(		"cairo_get_current_point", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("x",		ctypes.POINTER(ctypes.c_double)),
	("y",		ctypes.POINTER(ctypes.c_double)),] )

cairo_get_fill_rule = _rpythonic_function_(		"cairo_get_fill_rule", ctypes.c_int, [
	("cr",		ctypes.POINTER(_cairo)),] )

cairo_get_line_width = _rpythonic_function_(		"cairo_get_line_width", ctypes.c_double, [
	("cr",		ctypes.POINTER(_cairo)),] )

cairo_get_line_cap = _rpythonic_function_(		"cairo_get_line_cap", ctypes.c_int, [
	("cr",		ctypes.POINTER(_cairo)),] )

cairo_get_line_join = _rpythonic_function_(		"cairo_get_line_join", ctypes.c_int, [
	("cr",		ctypes.POINTER(_cairo)),] )

cairo_get_miter_limit = _rpythonic_function_(		"cairo_get_miter_limit", ctypes.c_double, [
	("cr",		ctypes.POINTER(_cairo)),] )

cairo_get_dash_count = _rpythonic_function_(		"cairo_get_dash_count", ctypes.c_int, [
	("cr",		ctypes.POINTER(_cairo)),] )

cairo_get_dash = _rpythonic_function_(		"cairo_get_dash", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("dashes",		ctypes.POINTER(ctypes.c_double)),
	("offset",		ctypes.POINTER(ctypes.c_double)),] )

cairo_get_matrix = _rpythonic_function_(		"cairo_get_matrix", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("matrix",		ctypes.POINTER(_cairo_matrix)),] )

cairo_get_target = _rpythonic_function_(		"cairo_get_target", ctypes.POINTER(_cairo_surface), [
	("cr",		ctypes.POINTER(_cairo)),] )

cairo_get_group_target = _rpythonic_function_(		"cairo_get_group_target", ctypes.POINTER(_cairo_surface), [
	("cr",		ctypes.POINTER(_cairo)),] )

cairo_copy_path = _rpythonic_function_(		"cairo_copy_path", ctypes.POINTER(cairo_path), [
	("cr",		ctypes.POINTER(_cairo)),] )

cairo_copy_path_flat = _rpythonic_function_(		"cairo_copy_path_flat", ctypes.POINTER(cairo_path), [
	("cr",		ctypes.POINTER(_cairo)),] )

cairo_append_path = _rpythonic_function_(		"cairo_append_path", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("path",		ctypes.POINTER(cairo_path)),] )

cairo_path_destroy = _rpythonic_function_(		"cairo_path_destroy", ctypes.c_void_p, [
	("path",		ctypes.POINTER(cairo_path)),] )

cairo_status = _rpythonic_function_(		"cairo_status", ctypes.c_int, [
	("cr",		ctypes.POINTER(_cairo)),] )

cairo_status_to_string = _rpythonic_function_(		"cairo_status_to_string", ctypes.POINTER(ctypes.c_char), [
	("status",		ctypes.c_int),] )

cairo_device_reference = _rpythonic_function_(		"cairo_device_reference", ctypes.POINTER(_cairo_device), [
	("device",		ctypes.POINTER(_cairo_device)),] )

cairo_device_get_type = _rpythonic_function_(		"cairo_device_get_type", ctypes.c_int, [
	("device",		ctypes.POINTER(_cairo_device)),] )

cairo_device_status = _rpythonic_function_(		"cairo_device_status", ctypes.c_int, [
	("device",		ctypes.POINTER(_cairo_device)),] )

cairo_device_acquire = _rpythonic_function_(		"cairo_device_acquire", ctypes.c_int, [
	("device",		ctypes.POINTER(_cairo_device)),] )

cairo_device_release = _rpythonic_function_(		"cairo_device_release", ctypes.c_void_p, [
	("device",		ctypes.POINTER(_cairo_device)),] )

cairo_device_flush = _rpythonic_function_(		"cairo_device_flush", ctypes.c_void_p, [
	("device",		ctypes.POINTER(_cairo_device)),] )

cairo_device_finish = _rpythonic_function_(		"cairo_device_finish", ctypes.c_void_p, [
	("device",		ctypes.POINTER(_cairo_device)),] )

cairo_device_destroy = _rpythonic_function_(		"cairo_device_destroy", ctypes.c_void_p, [
	("device",		ctypes.POINTER(_cairo_device)),] )

cairo_device_get_reference_count = _rpythonic_function_(		"cairo_device_get_reference_count", ctypes.c_uint, [
	("device",		ctypes.POINTER(_cairo_device)),] )

cairo_device_get_user_data = _rpythonic_function_(		"cairo_device_get_user_data", ctypes.POINTER(ctypes.c_void_p), [
	("device",		ctypes.POINTER(_cairo_device)),
	("key",		ctypes.POINTER(_cairo_user_data_key)),] )

cairo_device_set_user_data = _rpythonic_function_(		"cairo_device_set_user_data", ctypes.c_int, [
	("device",		ctypes.POINTER(_cairo_device)),
	("key",		ctypes.POINTER(_cairo_user_data_key)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

cairo_surface_create_similar = _rpythonic_function_(		"cairo_surface_create_similar", ctypes.POINTER(_cairo_surface), [
	("other",		ctypes.POINTER(_cairo_surface)),
	("content",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

cairo_surface_create_for_rectangle = _rpythonic_function_(		"cairo_surface_create_for_rectangle", ctypes.POINTER(_cairo_surface), [
	("target",		ctypes.POINTER(_cairo_surface)),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("width",		ctypes.c_double),
	("height",		ctypes.c_double),] )

cairo_surface_reference = _rpythonic_function_(		"cairo_surface_reference", ctypes.POINTER(_cairo_surface), [
	("surface",		ctypes.POINTER(_cairo_surface)),] )

cairo_surface_finish = _rpythonic_function_(		"cairo_surface_finish", ctypes.c_void_p, [
	("surface",		ctypes.POINTER(_cairo_surface)),] )

cairo_surface_destroy = _rpythonic_function_(		"cairo_surface_destroy", ctypes.c_void_p, [
	("surface",		ctypes.POINTER(_cairo_surface)),] )

cairo_surface_get_device = _rpythonic_function_(		"cairo_surface_get_device", ctypes.POINTER(_cairo_device), [
	("surface",		ctypes.POINTER(_cairo_surface)),] )

cairo_surface_get_reference_count = _rpythonic_function_(		"cairo_surface_get_reference_count", ctypes.c_uint, [
	("surface",		ctypes.POINTER(_cairo_surface)),] )

cairo_surface_status = _rpythonic_function_(		"cairo_surface_status", ctypes.c_int, [
	("surface",		ctypes.POINTER(_cairo_surface)),] )

cairo_surface_get_type = _rpythonic_function_(		"cairo_surface_get_type", ctypes.c_int, [
	("surface",		ctypes.POINTER(_cairo_surface)),] )

cairo_surface_get_content = _rpythonic_function_(		"cairo_surface_get_content", ctypes.c_int, [
	("surface",		ctypes.POINTER(_cairo_surface)),] )

cairo_surface_write_to_png = _rpythonic_function_(		"cairo_surface_write_to_png", ctypes.c_int, [
	("surface",		ctypes.POINTER(_cairo_surface)),
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

cairo_surface_write_to_png_stream = _rpythonic_function_(		"cairo_surface_write_to_png_stream", ctypes.c_int, [
	("surface",		ctypes.POINTER(_cairo_surface)),
	("write_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.c_uint,)),
	("closure",		ctypes.POINTER(ctypes.c_void_p)),] )

cairo_surface_get_user_data = _rpythonic_function_(		"cairo_surface_get_user_data", ctypes.POINTER(ctypes.c_void_p), [
	("surface",		ctypes.POINTER(_cairo_surface)),
	("key",		ctypes.POINTER(_cairo_user_data_key)),] )

cairo_surface_set_user_data = _rpythonic_function_(		"cairo_surface_set_user_data", ctypes.c_int, [
	("surface",		ctypes.POINTER(_cairo_surface)),
	("key",		ctypes.POINTER(_cairo_user_data_key)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

cairo_surface_get_mime_data = _rpythonic_function_(		"cairo_surface_get_mime_data", ctypes.c_void_p, [
	("surface",		ctypes.POINTER(_cairo_surface)),
	("mime_type",		ctypes.POINTER(ctypes.c_char)),
	("data",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("length",		ctypes.POINTER(ctypes.c_ulong)),] )

cairo_surface_set_mime_data = _rpythonic_function_(		"cairo_surface_set_mime_data", ctypes.c_int, [
	("surface",		ctypes.POINTER(_cairo_surface)),
	("mime_type",		ctypes.POINTER(ctypes.c_char)),
	("data",		ctypes.POINTER(ctypes.c_ubyte)),
	("length",		ctypes.c_ulong),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("closure",		ctypes.POINTER(ctypes.c_void_p)),] )

cairo_surface_get_font_options = _rpythonic_function_(		"cairo_surface_get_font_options", ctypes.c_void_p, [
	("surface",		ctypes.POINTER(_cairo_surface)),
	("options",		ctypes.POINTER(_cairo_font_options)),] )

cairo_surface_flush = _rpythonic_function_(		"cairo_surface_flush", ctypes.c_void_p, [
	("surface",		ctypes.POINTER(_cairo_surface)),] )

cairo_surface_mark_dirty = _rpythonic_function_(		"cairo_surface_mark_dirty", ctypes.c_void_p, [
	("surface",		ctypes.POINTER(_cairo_surface)),] )

cairo_surface_mark_dirty_rectangle = _rpythonic_function_(		"cairo_surface_mark_dirty_rectangle", ctypes.c_void_p, [
	("surface",		ctypes.POINTER(_cairo_surface)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

cairo_surface_set_device_offset = _rpythonic_function_(		"cairo_surface_set_device_offset", ctypes.c_void_p, [
	("surface",		ctypes.POINTER(_cairo_surface)),
	("x_offset",		ctypes.c_double),
	("y_offset",		ctypes.c_double),] )

cairo_surface_get_device_offset = _rpythonic_function_(		"cairo_surface_get_device_offset", ctypes.c_void_p, [
	("surface",		ctypes.POINTER(_cairo_surface)),
	("x_offset",		ctypes.POINTER(ctypes.c_double)),
	("y_offset",		ctypes.POINTER(ctypes.c_double)),] )

cairo_surface_set_fallback_resolution = _rpythonic_function_(		"cairo_surface_set_fallback_resolution", ctypes.c_void_p, [
	("surface",		ctypes.POINTER(_cairo_surface)),
	("x_pixels_per_inch",		ctypes.c_double),
	("y_pixels_per_inch",		ctypes.c_double),] )

cairo_surface_get_fallback_resolution = _rpythonic_function_(		"cairo_surface_get_fallback_resolution", ctypes.c_void_p, [
	("surface",		ctypes.POINTER(_cairo_surface)),
	("x_pixels_per_inch",		ctypes.POINTER(ctypes.c_double)),
	("y_pixels_per_inch",		ctypes.POINTER(ctypes.c_double)),] )

cairo_surface_copy_page = _rpythonic_function_(		"cairo_surface_copy_page", ctypes.c_void_p, [
	("surface",		ctypes.POINTER(_cairo_surface)),] )

cairo_surface_show_page = _rpythonic_function_(		"cairo_surface_show_page", ctypes.c_void_p, [
	("surface",		ctypes.POINTER(_cairo_surface)),] )

cairo_surface_has_show_text_glyphs = _rpythonic_function_(		"cairo_surface_has_show_text_glyphs", ctypes.c_int, [
	("surface",		ctypes.POINTER(_cairo_surface)),] )

cairo_image_surface_create = _rpythonic_function_(		"cairo_image_surface_create", ctypes.POINTER(_cairo_surface), [
	("format",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

cairo_format_stride_for_width = _rpythonic_function_(		"cairo_format_stride_for_width", ctypes.c_int, [
	("format",		ctypes.c_int),
	("width",		ctypes.c_int),] )

cairo_image_surface_create_for_data = _rpythonic_function_(		"cairo_image_surface_create_for_data", ctypes.POINTER(_cairo_surface), [
	("data",		ctypes.POINTER(ctypes.c_ubyte)),
	("format",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("stride",		ctypes.c_int),] )

cairo_image_surface_get_data = _rpythonic_function_(		"cairo_image_surface_get_data", ctypes.POINTER(ctypes.c_ubyte), [
	("surface",		ctypes.POINTER(_cairo_surface)),] )

cairo_image_surface_get_format = _rpythonic_function_(		"cairo_image_surface_get_format", ctypes.c_int, [
	("surface",		ctypes.POINTER(_cairo_surface)),] )

cairo_image_surface_get_width = _rpythonic_function_(		"cairo_image_surface_get_width", ctypes.c_int, [
	("surface",		ctypes.POINTER(_cairo_surface)),] )

cairo_image_surface_get_height = _rpythonic_function_(		"cairo_image_surface_get_height", ctypes.c_int, [
	("surface",		ctypes.POINTER(_cairo_surface)),] )

cairo_image_surface_get_stride = _rpythonic_function_(		"cairo_image_surface_get_stride", ctypes.c_int, [
	("surface",		ctypes.POINTER(_cairo_surface)),] )

cairo_image_surface_create_from_png = _rpythonic_function_(		"cairo_image_surface_create_from_png", ctypes.POINTER(_cairo_surface), [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

cairo_image_surface_create_from_png_stream = _rpythonic_function_(		"cairo_image_surface_create_from_png_stream", ctypes.POINTER(_cairo_surface), [
	("read_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.c_uint,)),
	("closure",		ctypes.POINTER(ctypes.c_void_p)),] )

cairo_recording_surface_create = _rpythonic_function_(		"cairo_recording_surface_create", ctypes.POINTER(_cairo_surface), [
	("content",		ctypes.c_int),
	("extents",		ctypes.POINTER(_cairo_rectangle)),] )

cairo_recording_surface_ink_extents = _rpythonic_function_(		"cairo_recording_surface_ink_extents", ctypes.c_void_p, [
	("surface",		ctypes.POINTER(_cairo_surface)),
	("x0",		ctypes.POINTER(ctypes.c_double)),
	("y0",		ctypes.POINTER(ctypes.c_double)),
	("width",		ctypes.POINTER(ctypes.c_double)),
	("height",		ctypes.POINTER(ctypes.c_double)),] )

cairo_pattern_create_rgb = _rpythonic_function_(		"cairo_pattern_create_rgb", ctypes.POINTER(_cairo_pattern), [
	("red",		ctypes.c_double),
	("green",		ctypes.c_double),
	("blue",		ctypes.c_double),] )

cairo_pattern_create_rgba = _rpythonic_function_(		"cairo_pattern_create_rgba", ctypes.POINTER(_cairo_pattern), [
	("red",		ctypes.c_double),
	("green",		ctypes.c_double),
	("blue",		ctypes.c_double),
	("alpha",		ctypes.c_double),] )

cairo_pattern_create_for_surface = _rpythonic_function_(		"cairo_pattern_create_for_surface", ctypes.POINTER(_cairo_pattern), [
	("surface",		ctypes.POINTER(_cairo_surface)),] )

cairo_pattern_create_linear = _rpythonic_function_(		"cairo_pattern_create_linear", ctypes.POINTER(_cairo_pattern), [
	("x0",		ctypes.c_double),
	("y0",		ctypes.c_double),
	("x1",		ctypes.c_double),
	("y1",		ctypes.c_double),] )

cairo_pattern_create_radial = _rpythonic_function_(		"cairo_pattern_create_radial", ctypes.POINTER(_cairo_pattern), [
	("cx0",		ctypes.c_double),
	("cy0",		ctypes.c_double),
	("radius0",		ctypes.c_double),
	("cx1",		ctypes.c_double),
	("cy1",		ctypes.c_double),
	("radius1",		ctypes.c_double),] )

cairo_pattern_reference = _rpythonic_function_(		"cairo_pattern_reference", ctypes.POINTER(_cairo_pattern), [
	("pattern",		ctypes.POINTER(_cairo_pattern)),] )

cairo_pattern_destroy = _rpythonic_function_(		"cairo_pattern_destroy", ctypes.c_void_p, [
	("pattern",		ctypes.POINTER(_cairo_pattern)),] )

cairo_pattern_get_reference_count = _rpythonic_function_(		"cairo_pattern_get_reference_count", ctypes.c_uint, [
	("pattern",		ctypes.POINTER(_cairo_pattern)),] )

cairo_pattern_status = _rpythonic_function_(		"cairo_pattern_status", ctypes.c_int, [
	("pattern",		ctypes.POINTER(_cairo_pattern)),] )

cairo_pattern_get_user_data = _rpythonic_function_(		"cairo_pattern_get_user_data", ctypes.POINTER(ctypes.c_void_p), [
	("pattern",		ctypes.POINTER(_cairo_pattern)),
	("key",		ctypes.POINTER(_cairo_user_data_key)),] )

cairo_pattern_set_user_data = _rpythonic_function_(		"cairo_pattern_set_user_data", ctypes.c_int, [
	("pattern",		ctypes.POINTER(_cairo_pattern)),
	("key",		ctypes.POINTER(_cairo_user_data_key)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

cairo_pattern_get_type = _rpythonic_function_(		"cairo_pattern_get_type", ctypes.c_int, [
	("pattern",		ctypes.POINTER(_cairo_pattern)),] )

cairo_pattern_add_color_stop_rgb = _rpythonic_function_(		"cairo_pattern_add_color_stop_rgb", ctypes.c_void_p, [
	("pattern",		ctypes.POINTER(_cairo_pattern)),
	("offset",		ctypes.c_double),
	("red",		ctypes.c_double),
	("green",		ctypes.c_double),
	("blue",		ctypes.c_double),] )

cairo_pattern_add_color_stop_rgba = _rpythonic_function_(		"cairo_pattern_add_color_stop_rgba", ctypes.c_void_p, [
	("pattern",		ctypes.POINTER(_cairo_pattern)),
	("offset",		ctypes.c_double),
	("red",		ctypes.c_double),
	("green",		ctypes.c_double),
	("blue",		ctypes.c_double),
	("alpha",		ctypes.c_double),] )

cairo_pattern_set_matrix = _rpythonic_function_(		"cairo_pattern_set_matrix", ctypes.c_void_p, [
	("pattern",		ctypes.POINTER(_cairo_pattern)),
	("matrix",		ctypes.POINTER(_cairo_matrix)),] )

cairo_pattern_get_matrix = _rpythonic_function_(		"cairo_pattern_get_matrix", ctypes.c_void_p, [
	("pattern",		ctypes.POINTER(_cairo_pattern)),
	("matrix",		ctypes.POINTER(_cairo_matrix)),] )

cairo_pattern_set_extend = _rpythonic_function_(		"cairo_pattern_set_extend", ctypes.c_void_p, [
	("pattern",		ctypes.POINTER(_cairo_pattern)),
	("extend",		ctypes.c_int),] )

cairo_pattern_get_extend = _rpythonic_function_(		"cairo_pattern_get_extend", ctypes.c_int, [
	("pattern",		ctypes.POINTER(_cairo_pattern)),] )

cairo_pattern_set_filter = _rpythonic_function_(		"cairo_pattern_set_filter", ctypes.c_void_p, [
	("pattern",		ctypes.POINTER(_cairo_pattern)),
	("filter",		ctypes.c_int),] )

cairo_pattern_get_filter = _rpythonic_function_(		"cairo_pattern_get_filter", ctypes.c_int, [
	("pattern",		ctypes.POINTER(_cairo_pattern)),] )

cairo_pattern_get_rgba = _rpythonic_function_(		"cairo_pattern_get_rgba", ctypes.c_int, [
	("pattern",		ctypes.POINTER(_cairo_pattern)),
	("red",		ctypes.POINTER(ctypes.c_double)),
	("green",		ctypes.POINTER(ctypes.c_double)),
	("blue",		ctypes.POINTER(ctypes.c_double)),
	("alpha",		ctypes.POINTER(ctypes.c_double)),] )

cairo_pattern_get_surface = _rpythonic_function_(		"cairo_pattern_get_surface", ctypes.c_int, [
	("pattern",		ctypes.POINTER(_cairo_pattern)),
	("surface",		ctypes.POINTER(ctypes.POINTER(_cairo_surface))),] )

cairo_pattern_get_color_stop_rgba = _rpythonic_function_(		"cairo_pattern_get_color_stop_rgba", ctypes.c_int, [
	("pattern",		ctypes.POINTER(_cairo_pattern)),
	("index",		ctypes.c_int),
	("offset",		ctypes.POINTER(ctypes.c_double)),
	("red",		ctypes.POINTER(ctypes.c_double)),
	("green",		ctypes.POINTER(ctypes.c_double)),
	("blue",		ctypes.POINTER(ctypes.c_double)),
	("alpha",		ctypes.POINTER(ctypes.c_double)),] )

cairo_pattern_get_color_stop_count = _rpythonic_function_(		"cairo_pattern_get_color_stop_count", ctypes.c_int, [
	("pattern",		ctypes.POINTER(_cairo_pattern)),
	("count",		ctypes.POINTER(ctypes.c_int)),] )

cairo_pattern_get_linear_points = _rpythonic_function_(		"cairo_pattern_get_linear_points", ctypes.c_int, [
	("pattern",		ctypes.POINTER(_cairo_pattern)),
	("x0",		ctypes.POINTER(ctypes.c_double)),
	("y0",		ctypes.POINTER(ctypes.c_double)),
	("x1",		ctypes.POINTER(ctypes.c_double)),
	("y1",		ctypes.POINTER(ctypes.c_double)),] )

cairo_pattern_get_radial_circles = _rpythonic_function_(		"cairo_pattern_get_radial_circles", ctypes.c_int, [
	("pattern",		ctypes.POINTER(_cairo_pattern)),
	("x0",		ctypes.POINTER(ctypes.c_double)),
	("y0",		ctypes.POINTER(ctypes.c_double)),
	("r0",		ctypes.POINTER(ctypes.c_double)),
	("x1",		ctypes.POINTER(ctypes.c_double)),
	("y1",		ctypes.POINTER(ctypes.c_double)),
	("r1",		ctypes.POINTER(ctypes.c_double)),] )

cairo_matrix_init_identity = _rpythonic_function_(		"cairo_matrix_init_identity", ctypes.c_void_p, [
	("matrix",		ctypes.POINTER(_cairo_matrix)),] )

cairo_matrix_init = _rpythonic_function_(		"cairo_matrix_init", ctypes.c_void_p, [
	("matrix",		ctypes.POINTER(_cairo_matrix)),
	("xx",		ctypes.c_double),
	("yx",		ctypes.c_double),
	("xy",		ctypes.c_double),
	("yy",		ctypes.c_double),
	("x0",		ctypes.c_double),
	("y0",		ctypes.c_double),] )

cairo_matrix_init_translate = _rpythonic_function_(		"cairo_matrix_init_translate", ctypes.c_void_p, [
	("matrix",		ctypes.POINTER(_cairo_matrix)),
	("tx",		ctypes.c_double),
	("ty",		ctypes.c_double),] )

cairo_matrix_init_scale = _rpythonic_function_(		"cairo_matrix_init_scale", ctypes.c_void_p, [
	("matrix",		ctypes.POINTER(_cairo_matrix)),
	("sx",		ctypes.c_double),
	("sy",		ctypes.c_double),] )

cairo_matrix_init_rotate = _rpythonic_function_(		"cairo_matrix_init_rotate", ctypes.c_void_p, [
	("matrix",		ctypes.POINTER(_cairo_matrix)),
	("radians",		ctypes.c_double),] )

cairo_matrix_translate = _rpythonic_function_(		"cairo_matrix_translate", ctypes.c_void_p, [
	("matrix",		ctypes.POINTER(_cairo_matrix)),
	("tx",		ctypes.c_double),
	("ty",		ctypes.c_double),] )

cairo_matrix_scale = _rpythonic_function_(		"cairo_matrix_scale", ctypes.c_void_p, [
	("matrix",		ctypes.POINTER(_cairo_matrix)),
	("sx",		ctypes.c_double),
	("sy",		ctypes.c_double),] )

cairo_matrix_rotate = _rpythonic_function_(		"cairo_matrix_rotate", ctypes.c_void_p, [
	("matrix",		ctypes.POINTER(_cairo_matrix)),
	("radians",		ctypes.c_double),] )

cairo_matrix_invert = _rpythonic_function_(		"cairo_matrix_invert", ctypes.c_int, [
	("matrix",		ctypes.POINTER(_cairo_matrix)),] )

cairo_matrix_multiply = _rpythonic_function_(		"cairo_matrix_multiply", ctypes.c_void_p, [
	("result",		ctypes.POINTER(_cairo_matrix)),
	("a",		ctypes.POINTER(_cairo_matrix)),
	("b",		ctypes.POINTER(_cairo_matrix)),] )

cairo_matrix_transform_distance = _rpythonic_function_(		"cairo_matrix_transform_distance", ctypes.c_void_p, [
	("matrix",		ctypes.POINTER(_cairo_matrix)),
	("dx",		ctypes.POINTER(ctypes.c_double)),
	("dy",		ctypes.POINTER(ctypes.c_double)),] )

cairo_matrix_transform_point = _rpythonic_function_(		"cairo_matrix_transform_point", ctypes.c_void_p, [
	("matrix",		ctypes.POINTER(_cairo_matrix)),
	("x",		ctypes.POINTER(ctypes.c_double)),
	("y",		ctypes.POINTER(ctypes.c_double)),] )

cairo_region_create = _rpythonic_function_(		"cairo_region_create", ctypes.POINTER(_cairo_region), [] )

cairo_region_create_rectangle = _rpythonic_function_(		"cairo_region_create_rectangle", ctypes.POINTER(_cairo_region), [
	("rectangle",		ctypes.POINTER(_cairo_rectangle_int)),] )

cairo_region_create_rectangles = _rpythonic_function_(		"cairo_region_create_rectangles", ctypes.POINTER(_cairo_region), [
	("rects",		ctypes.POINTER(_cairo_rectangle_int)),
	("count",		ctypes.c_int),] )

cairo_region_copy = _rpythonic_function_(		"cairo_region_copy", ctypes.POINTER(_cairo_region), [
	("original",		ctypes.POINTER(_cairo_region)),] )

cairo_region_reference = _rpythonic_function_(		"cairo_region_reference", ctypes.POINTER(_cairo_region), [
	("region",		ctypes.POINTER(_cairo_region)),] )

cairo_region_destroy = _rpythonic_function_(		"cairo_region_destroy", ctypes.c_void_p, [
	("region",		ctypes.POINTER(_cairo_region)),] )

cairo_region_equal = _rpythonic_function_(		"cairo_region_equal", ctypes.c_int, [
	("a",		ctypes.POINTER(_cairo_region)),
	("b",		ctypes.POINTER(_cairo_region)),] )

cairo_region_status = _rpythonic_function_(		"cairo_region_status", ctypes.c_int, [
	("region",		ctypes.POINTER(_cairo_region)),] )

cairo_region_get_extents = _rpythonic_function_(		"cairo_region_get_extents", ctypes.c_void_p, [
	("region",		ctypes.POINTER(_cairo_region)),
	("extents",		ctypes.POINTER(_cairo_rectangle_int)),] )

cairo_region_num_rectangles = _rpythonic_function_(		"cairo_region_num_rectangles", ctypes.c_int, [
	("region",		ctypes.POINTER(_cairo_region)),] )

cairo_region_get_rectangle = _rpythonic_function_(		"cairo_region_get_rectangle", ctypes.c_void_p, [
	("region",		ctypes.POINTER(_cairo_region)),
	("nth",		ctypes.c_int),
	("rectangle",		ctypes.POINTER(_cairo_rectangle_int)),] )

cairo_region_is_empty = _rpythonic_function_(		"cairo_region_is_empty", ctypes.c_int, [
	("region",		ctypes.POINTER(_cairo_region)),] )

cairo_region_contains_rectangle = _rpythonic_function_(		"cairo_region_contains_rectangle", ctypes.c_int, [
	("region",		ctypes.POINTER(_cairo_region)),
	("rectangle",		ctypes.POINTER(_cairo_rectangle_int)),] )

cairo_region_contains_point = _rpythonic_function_(		"cairo_region_contains_point", ctypes.c_int, [
	("region",		ctypes.POINTER(_cairo_region)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

cairo_region_translate = _rpythonic_function_(		"cairo_region_translate", ctypes.c_void_p, [
	("region",		ctypes.POINTER(_cairo_region)),
	("dx",		ctypes.c_int),
	("dy",		ctypes.c_int),] )

cairo_region_subtract = _rpythonic_function_(		"cairo_region_subtract", ctypes.c_int, [
	("dst",		ctypes.POINTER(_cairo_region)),
	("other",		ctypes.POINTER(_cairo_region)),] )

cairo_region_subtract_rectangle = _rpythonic_function_(		"cairo_region_subtract_rectangle", ctypes.c_int, [
	("dst",		ctypes.POINTER(_cairo_region)),
	("rectangle",		ctypes.POINTER(_cairo_rectangle_int)),] )

cairo_region_intersect = _rpythonic_function_(		"cairo_region_intersect", ctypes.c_int, [
	("dst",		ctypes.POINTER(_cairo_region)),
	("other",		ctypes.POINTER(_cairo_region)),] )

cairo_region_intersect_rectangle = _rpythonic_function_(		"cairo_region_intersect_rectangle", ctypes.c_int, [
	("dst",		ctypes.POINTER(_cairo_region)),
	("rectangle",		ctypes.POINTER(_cairo_rectangle_int)),] )

cairo_region_union = _rpythonic_function_(		"cairo_region_union", ctypes.c_int, [
	("dst",		ctypes.POINTER(_cairo_region)),
	("other",		ctypes.POINTER(_cairo_region)),] )

cairo_region_union_rectangle = _rpythonic_function_(		"cairo_region_union_rectangle", ctypes.c_int, [
	("dst",		ctypes.POINTER(_cairo_region)),
	("rectangle",		ctypes.POINTER(_cairo_rectangle_int)),] )

cairo_region_xor = _rpythonic_function_(		"cairo_region_xor", ctypes.c_int, [
	("dst",		ctypes.POINTER(_cairo_region)),
	("other",		ctypes.POINTER(_cairo_region)),] )

cairo_region_xor_rectangle = _rpythonic_function_(		"cairo_region_xor_rectangle", ctypes.c_int, [
	("dst",		ctypes.POINTER(_cairo_region)),
	("rectangle",		ctypes.POINTER(_cairo_rectangle_int)),] )

cairo_debug_reset_static_data = _rpythonic_function_(		"cairo_debug_reset_static_data", ctypes.c_void_p, [] )

gdk_color_get_type = _rpythonic_function_(		"gdk_color_get_type", ctypes.c_uint, [] )

gdk_color_copy = _rpythonic_function_(		"gdk_color_copy", ctypes.POINTER(_GdkColor), [
	("color",		ctypes.POINTER(_GdkColor)),] )

gdk_color_free = _rpythonic_function_(		"gdk_color_free", ctypes.c_void_p, [
	("color",		ctypes.POINTER(_GdkColor)),] )

gdk_color_hash = _rpythonic_function_(		"gdk_color_hash", ctypes.c_uint, [
	("color",		ctypes.POINTER(_GdkColor)),] )

gdk_color_equal = _rpythonic_function_(		"gdk_color_equal", ctypes.c_int, [
	("colora",		ctypes.POINTER(_GdkColor)),
	("colorb",		ctypes.POINTER(_GdkColor)),] )

gdk_color_parse = _rpythonic_function_(		"gdk_color_parse", ctypes.c_int, [
	("spec",		ctypes.POINTER(ctypes.c_char)),
	("color",		ctypes.POINTER(_GdkColor)),] )

gdk_color_to_string = _rpythonic_function_(		"gdk_color_to_string", ctypes.POINTER(ctypes.c_char), [
	("color",		ctypes.POINTER(_GdkColor)),] )

gdk_device_get_type = _rpythonic_function_(		"gdk_device_get_type", ctypes.c_uint, [] )

gdk_device_get_name = _rpythonic_function_(		"gdk_device_get_name", ctypes.POINTER(ctypes.c_char), [
	("device",		ctypes.POINTER(_GdkDevice)),] )

gdk_device_get_has_cursor = _rpythonic_function_(		"gdk_device_get_has_cursor", ctypes.c_int, [
	("device",		ctypes.POINTER(_GdkDevice)),] )

gdk_device_get_source = _rpythonic_function_(		"gdk_device_get_source", ctypes.c_int, [
	("device",		ctypes.POINTER(_GdkDevice)),] )

gdk_device_get_mode = _rpythonic_function_(		"gdk_device_get_mode", ctypes.c_int, [
	("device",		ctypes.POINTER(_GdkDevice)),] )

gdk_device_set_mode = _rpythonic_function_(		"gdk_device_set_mode", ctypes.c_int, [
	("device",		ctypes.POINTER(_GdkDevice)),
	("mode",		ctypes.c_int),] )

gdk_device_get_n_keys = _rpythonic_function_(		"gdk_device_get_n_keys", ctypes.c_int, [
	("device",		ctypes.POINTER(_GdkDevice)),] )

gdk_device_get_key = _rpythonic_function_(		"gdk_device_get_key", ctypes.c_int, [
	("device",		ctypes.POINTER(_GdkDevice)),
	("index_",		ctypes.c_uint),
	("keyval",		ctypes.POINTER(ctypes.c_uint)),
	("modifiers",		ctypes.POINTER(ctypes.c_int)),] )

gdk_device_set_key = _rpythonic_function_(		"gdk_device_set_key", ctypes.c_void_p, [
	("device",		ctypes.POINTER(_GdkDevice)),
	("index_",		ctypes.c_uint),
	("keyval",		ctypes.c_uint),
	("modifiers",		ctypes.c_int),] )

gdk_device_get_axis_use = _rpythonic_function_(		"gdk_device_get_axis_use", ctypes.c_int, [
	("device",		ctypes.POINTER(_GdkDevice)),
	("index_",		ctypes.c_uint),] )

gdk_device_set_axis_use = _rpythonic_function_(		"gdk_device_set_axis_use", ctypes.c_void_p, [
	("device",		ctypes.POINTER(_GdkDevice)),
	("index_",		ctypes.c_uint),
	("use",		ctypes.c_int),] )

gdk_device_get_state = _rpythonic_function_(		"gdk_device_get_state", ctypes.c_void_p, [
	("device",		ctypes.POINTER(_GdkDevice)),
	("window",		ctypes.POINTER(_GdkWindow)),
	("axes",		ctypes.POINTER(ctypes.c_double)),
	("mask",		ctypes.POINTER(ctypes.c_int)),] )

gdk_device_get_position = _rpythonic_function_(		"gdk_device_get_position", ctypes.c_void_p, [
	("device",		ctypes.POINTER(_GdkDevice)),
	("screen",		ctypes.POINTER(ctypes.POINTER(_GdkScreen))),
	("x",		ctypes.POINTER(ctypes.c_int)),
	("y",		ctypes.POINTER(ctypes.c_int)),] )

gdk_device_get_window_at_position = _rpythonic_function_(		"gdk_device_get_window_at_position", ctypes.POINTER(_GdkWindow), [
	("device",		ctypes.POINTER(_GdkDevice)),
	("win_x",		ctypes.POINTER(ctypes.c_int)),
	("win_y",		ctypes.POINTER(ctypes.c_int)),] )

gdk_device_get_history = _rpythonic_function_(		"gdk_device_get_history", ctypes.c_int, [
	("device",		ctypes.POINTER(_GdkDevice)),
	("window",		ctypes.POINTER(_GdkWindow)),
	("start",		ctypes.c_uint),
	("stop",		ctypes.c_uint),
	("events",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(_GdkTimeCoord)))),
	("n_events",		ctypes.POINTER(ctypes.c_int)),] )

gdk_device_free_history = _rpythonic_function_(		"gdk_device_free_history", ctypes.c_void_p, [
	("events",		ctypes.POINTER(ctypes.POINTER(_GdkTimeCoord))),
	("n_events",		ctypes.c_int),] )

gdk_device_get_n_axes = _rpythonic_function_(		"gdk_device_get_n_axes", ctypes.c_int, [
	("device",		ctypes.POINTER(_GdkDevice)),] )

gdk_device_list_axes = _rpythonic_function_(		"gdk_device_list_axes", ctypes.POINTER(_GList), [
	("device",		ctypes.POINTER(_GdkDevice)),] )

gdk_device_get_axis_value = _rpythonic_function_(		"gdk_device_get_axis_value", ctypes.c_int, [
	("device",		ctypes.POINTER(_GdkDevice)),
	("axes",		ctypes.POINTER(ctypes.c_double)),
	("axis_label",		ctypes.POINTER(_GdkAtom)),
	("value",		ctypes.POINTER(ctypes.c_double)),] )

gdk_device_get_axis = _rpythonic_function_(		"gdk_device_get_axis", ctypes.c_int, [
	("device",		ctypes.POINTER(_GdkDevice)),
	("axes",		ctypes.POINTER(ctypes.c_double)),
	("use",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_double)),] )

gdk_device_get_display = _rpythonic_function_(		"gdk_device_get_display", ctypes.POINTER(_GdkDisplay), [
	("device",		ctypes.POINTER(_GdkDevice)),] )

gdk_device_get_associated_device = _rpythonic_function_(		"gdk_device_get_associated_device", ctypes.POINTER(_GdkDevice), [
	("device",		ctypes.POINTER(_GdkDevice)),] )

gdk_device_list_slave_devices = _rpythonic_function_(		"gdk_device_list_slave_devices", ctypes.POINTER(_GList), [
	("device",		ctypes.POINTER(_GdkDevice)),] )

gdk_device_get_device_type = _rpythonic_function_(		"gdk_device_get_device_type", ctypes.c_int, [
	("device",		ctypes.POINTER(_GdkDevice)),] )

gdk_device_grab = _rpythonic_function_(		"gdk_device_grab", ctypes.c_int, [
	("device",		ctypes.POINTER(_GdkDevice)),
	("window",		ctypes.POINTER(_GdkWindow)),
	("grab_ownership",		ctypes.c_int),
	("owner_events",		ctypes.c_int),
	("event_mask",		ctypes.c_int),
	("cursor",		ctypes.POINTER(_GdkCursor)),
	("time_",		ctypes.c_uint),] )

gdk_device_ungrab = _rpythonic_function_(		"gdk_device_ungrab", ctypes.c_void_p, [
	("device",		ctypes.POINTER(_GdkDevice)),
	("time_",		ctypes.c_uint),] )

gdk_device_warp = _rpythonic_function_(		"gdk_device_warp", ctypes.c_void_p, [
	("device",		ctypes.POINTER(_GdkDevice)),
	("screen",		ctypes.POINTER(_GdkScreen)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

gdk_device_grab_info_libgtk_only = _rpythonic_function_(		"gdk_device_grab_info_libgtk_only", ctypes.c_int, [
	("display",		ctypes.POINTER(_GdkDisplay)),
	("device",		ctypes.POINTER(_GdkDevice)),
	("grab_window",		ctypes.POINTER(ctypes.POINTER(_GdkWindow))),
	("owner_events",		ctypes.POINTER(ctypes.c_int)),] )

gdk_drag_context_get_type = _rpythonic_function_(		"gdk_drag_context_get_type", ctypes.c_uint, [] )

gdk_drag_context_set_device = _rpythonic_function_(		"gdk_drag_context_set_device", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GdkDragContext)),
	("device",		ctypes.POINTER(_GdkDevice)),] )

gdk_drag_context_get_device = _rpythonic_function_(		"gdk_drag_context_get_device", ctypes.POINTER(_GdkDevice), [
	("context",		ctypes.POINTER(_GdkDragContext)),] )

gdk_drag_context_list_targets = _rpythonic_function_(		"gdk_drag_context_list_targets", ctypes.POINTER(_GList), [
	("context",		ctypes.POINTER(_GdkDragContext)),] )

gdk_drag_context_get_actions = _rpythonic_function_(		"gdk_drag_context_get_actions", ctypes.c_int, [
	("context",		ctypes.POINTER(_GdkDragContext)),] )

gdk_drag_context_get_suggested_action = _rpythonic_function_(		"gdk_drag_context_get_suggested_action", ctypes.c_int, [
	("context",		ctypes.POINTER(_GdkDragContext)),] )

gdk_drag_context_get_selected_action = _rpythonic_function_(		"gdk_drag_context_get_selected_action", ctypes.c_int, [
	("context",		ctypes.POINTER(_GdkDragContext)),] )

gdk_drag_context_get_source_window = _rpythonic_function_(		"gdk_drag_context_get_source_window", ctypes.POINTER(_GdkWindow), [
	("context",		ctypes.POINTER(_GdkDragContext)),] )

gdk_drag_context_get_dest_window = _rpythonic_function_(		"gdk_drag_context_get_dest_window", ctypes.POINTER(_GdkWindow), [
	("context",		ctypes.POINTER(_GdkDragContext)),] )

gdk_drag_context_get_protocol = _rpythonic_function_(		"gdk_drag_context_get_protocol", ctypes.c_int, [
	("context",		ctypes.POINTER(_GdkDragContext)),] )

gdk_drag_status = _rpythonic_function_(		"gdk_drag_status", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GdkDragContext)),
	("action",		ctypes.c_int),
	("time_",		ctypes.c_uint),] )

gdk_drop_reply = _rpythonic_function_(		"gdk_drop_reply", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GdkDragContext)),
	("accepted",		ctypes.c_int),
	("time_",		ctypes.c_uint),] )

gdk_drop_finish = _rpythonic_function_(		"gdk_drop_finish", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GdkDragContext)),
	("success",		ctypes.c_int),
	("time_",		ctypes.c_uint),] )

gdk_drag_get_selection = _rpythonic_function_(		"gdk_drag_get_selection", ctypes.POINTER(_GdkAtom), [
	("context",		ctypes.POINTER(_GdkDragContext)),] )

gdk_drag_begin = _rpythonic_function_(		"gdk_drag_begin", ctypes.POINTER(_GdkDragContext), [
	("window",		ctypes.POINTER(_GdkWindow)),
	("targets",		ctypes.POINTER(_GList)),] )

gdk_drag_begin_for_device = _rpythonic_function_(		"gdk_drag_begin_for_device", ctypes.POINTER(_GdkDragContext), [
	("window",		ctypes.POINTER(_GdkWindow)),
	("device",		ctypes.POINTER(_GdkDevice)),
	("targets",		ctypes.POINTER(_GList)),] )

gdk_drag_find_window_for_screen = _rpythonic_function_(		"gdk_drag_find_window_for_screen", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GdkDragContext)),
	("drag_window",		ctypes.POINTER(_GdkWindow)),
	("screen",		ctypes.POINTER(_GdkScreen)),
	("x_root",		ctypes.c_int),
	("y_root",		ctypes.c_int),
	("dest_window",		ctypes.POINTER(ctypes.POINTER(_GdkWindow))),
	("protocol",		ctypes.POINTER(ctypes.c_int)),] )

gdk_drag_motion = _rpythonic_function_(		"gdk_drag_motion", ctypes.c_int, [
	("context",		ctypes.POINTER(_GdkDragContext)),
	("dest_window",		ctypes.POINTER(_GdkWindow)),
	("protocol",		ctypes.c_int),
	("x_root",		ctypes.c_int),
	("y_root",		ctypes.c_int),
	("suggested_action",		ctypes.c_int),
	("possible_actions",		ctypes.c_int),
	("time_",		ctypes.c_uint),] )

gdk_drag_abort = _rpythonic_function_(		"gdk_drag_abort", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GdkDragContext)),
	("time_",		ctypes.c_uint),] )

gdk_drag_drop = _rpythonic_function_(		"gdk_drag_drop", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GdkDragContext)),
	("time_",		ctypes.c_uint),] )

gdk_drag_drop_succeeded = _rpythonic_function_(		"gdk_drag_drop_succeeded", ctypes.c_int, [
	("context",		ctypes.POINTER(_GdkDragContext)),] )

GdkEventFunc = _rpythonic_function_(		"GdkEventFunc", ctypes.c_void_p, [
	("event",		ctypes.POINTER(_GdkEvent)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

GdkFilterFunc = _rpythonic_function_(		"GdkFilterFunc", ctypes.c_int, [
	("xevent",		ctypes.POINTER(ctypes.c_void_p)),
	("event",		ctypes.POINTER(_GdkEvent)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

gdk_events_pending = _rpythonic_function_(		"gdk_events_pending", ctypes.c_int, [] )

gdk_event_get_type = _rpythonic_function_(		"gdk_event_get_type", ctypes.c_uint, [] )

gdk_event_get = _rpythonic_function_(		"gdk_event_get", ctypes.POINTER(_GdkEvent), [] )

gdk_event_peek = _rpythonic_function_(		"gdk_event_peek", ctypes.POINTER(_GdkEvent), [] )

gdk_event_put = _rpythonic_function_(		"gdk_event_put", ctypes.c_void_p, [
	("event",		ctypes.POINTER(_GdkEvent)),] )

gdk_event_new = _rpythonic_function_(		"gdk_event_new", ctypes.POINTER(_GdkEvent), [
	("C_type",		ctypes.c_int),] )

gdk_event_copy = _rpythonic_function_(		"gdk_event_copy", ctypes.POINTER(_GdkEvent), [
	("event",		ctypes.POINTER(_GdkEvent)),] )

gdk_event_free = _rpythonic_function_(		"gdk_event_free", ctypes.c_void_p, [
	("event",		ctypes.POINTER(_GdkEvent)),] )

gdk_event_get_time = _rpythonic_function_(		"gdk_event_get_time", ctypes.c_uint, [
	("event",		ctypes.POINTER(_GdkEvent)),] )

gdk_event_get_state = _rpythonic_function_(		"gdk_event_get_state", ctypes.c_int, [
	("event",		ctypes.POINTER(_GdkEvent)),
	("state",		ctypes.POINTER(ctypes.c_int)),] )

gdk_event_get_coords = _rpythonic_function_(		"gdk_event_get_coords", ctypes.c_int, [
	("event",		ctypes.POINTER(_GdkEvent)),
	("x_win",		ctypes.POINTER(ctypes.c_double)),
	("y_win",		ctypes.POINTER(ctypes.c_double)),] )

gdk_event_get_root_coords = _rpythonic_function_(		"gdk_event_get_root_coords", ctypes.c_int, [
	("event",		ctypes.POINTER(_GdkEvent)),
	("x_root",		ctypes.POINTER(ctypes.c_double)),
	("y_root",		ctypes.POINTER(ctypes.c_double)),] )

gdk_event_get_button = _rpythonic_function_(		"gdk_event_get_button", ctypes.c_int, [
	("event",		ctypes.POINTER(_GdkEvent)),
	("button",		ctypes.POINTER(ctypes.c_uint)),] )

gdk_event_get_click_count = _rpythonic_function_(		"gdk_event_get_click_count", ctypes.c_int, [
	("event",		ctypes.POINTER(_GdkEvent)),
	("click_count",		ctypes.POINTER(ctypes.c_uint)),] )

gdk_event_get_keyval = _rpythonic_function_(		"gdk_event_get_keyval", ctypes.c_int, [
	("event",		ctypes.POINTER(_GdkEvent)),
	("keyval",		ctypes.POINTER(ctypes.c_uint)),] )

gdk_event_get_keycode = _rpythonic_function_(		"gdk_event_get_keycode", ctypes.c_int, [
	("event",		ctypes.POINTER(_GdkEvent)),
	("keycode",		ctypes.POINTER(ctypes.c_ushort)),] )

gdk_event_get_scroll_direction = _rpythonic_function_(		"gdk_event_get_scroll_direction", ctypes.c_int, [
	("event",		ctypes.POINTER(_GdkEvent)),
	("direction",		ctypes.POINTER(ctypes.c_int)),] )

gdk_event_get_axis = _rpythonic_function_(		"gdk_event_get_axis", ctypes.c_int, [
	("event",		ctypes.POINTER(_GdkEvent)),
	("axis_use",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_double)),] )

gdk_event_set_device = _rpythonic_function_(		"gdk_event_set_device", ctypes.c_void_p, [
	("event",		ctypes.POINTER(_GdkEvent)),
	("device",		ctypes.POINTER(_GdkDevice)),] )

gdk_event_get_device = _rpythonic_function_(		"gdk_event_get_device", ctypes.POINTER(_GdkDevice), [
	("event",		ctypes.POINTER(_GdkEvent)),] )

gdk_event_set_source_device = _rpythonic_function_(		"gdk_event_set_source_device", ctypes.c_void_p, [
	("event",		ctypes.POINTER(_GdkEvent)),
	("device",		ctypes.POINTER(_GdkDevice)),] )

gdk_event_get_source_device = _rpythonic_function_(		"gdk_event_get_source_device", ctypes.POINTER(_GdkDevice), [
	("event",		ctypes.POINTER(_GdkEvent)),] )

gdk_event_request_motions = _rpythonic_function_(		"gdk_event_request_motions", ctypes.c_void_p, [
	("event",		ctypes.POINTER(_GdkEventMotion)),] )

gdk_events_get_distance = _rpythonic_function_(		"gdk_events_get_distance", ctypes.c_int, [
	("event1",		ctypes.POINTER(_GdkEvent)),
	("event2",		ctypes.POINTER(_GdkEvent)),
	("distance",		ctypes.POINTER(ctypes.c_double)),] )

gdk_events_get_angle = _rpythonic_function_(		"gdk_events_get_angle", ctypes.c_int, [
	("event1",		ctypes.POINTER(_GdkEvent)),
	("event2",		ctypes.POINTER(_GdkEvent)),
	("angle",		ctypes.POINTER(ctypes.c_double)),] )

gdk_events_get_center = _rpythonic_function_(		"gdk_events_get_center", ctypes.c_int, [
	("event1",		ctypes.POINTER(_GdkEvent)),
	("event2",		ctypes.POINTER(_GdkEvent)),
	("x",		ctypes.POINTER(ctypes.c_double)),
	("y",		ctypes.POINTER(ctypes.c_double)),] )

gdk_event_handler_set = _rpythonic_function_(		"gdk_event_handler_set", ctypes.c_void_p, [
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GdkEvent),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

gdk_event_set_screen = _rpythonic_function_(		"gdk_event_set_screen", ctypes.c_void_p, [
	("event",		ctypes.POINTER(_GdkEvent)),
	("screen",		ctypes.POINTER(_GdkScreen)),] )

gdk_event_get_screen = _rpythonic_function_(		"gdk_event_get_screen", ctypes.POINTER(_GdkScreen), [
	("event",		ctypes.POINTER(_GdkEvent)),] )

gdk_set_show_events = _rpythonic_function_(		"gdk_set_show_events", ctypes.c_void_p, [
	("show_events",		ctypes.c_int),] )

gdk_get_show_events = _rpythonic_function_(		"gdk_get_show_events", ctypes.c_int, [] )

gdk_setting_get = _rpythonic_function_(		"gdk_setting_get", ctypes.c_int, [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(_GValue)),] )

gdk_device_manager_get_type = _rpythonic_function_(		"gdk_device_manager_get_type", ctypes.c_uint, [] )

gdk_device_manager_get_display = _rpythonic_function_(		"gdk_device_manager_get_display", ctypes.POINTER(_GdkDisplay), [
	("device_manager",		ctypes.POINTER(_GdkDeviceManager)),] )

gdk_device_manager_list_devices = _rpythonic_function_(		"gdk_device_manager_list_devices", ctypes.POINTER(_GList), [
	("device_manager",		ctypes.POINTER(_GdkDeviceManager)),
	("C_type",		ctypes.c_int),] )

gdk_device_manager_get_client_pointer = _rpythonic_function_(		"gdk_device_manager_get_client_pointer", ctypes.POINTER(_GdkDevice), [
	("device_manager",		ctypes.POINTER(_GdkDeviceManager)),] )

gdk_display_get_type = _rpythonic_function_(		"gdk_display_get_type", ctypes.c_uint, [] )

gdk_display_open = _rpythonic_function_(		"gdk_display_open", ctypes.POINTER(_GdkDisplay), [
	("display_name",		ctypes.POINTER(ctypes.c_char)),] )

gdk_display_get_name = _rpythonic_function_(		"gdk_display_get_name", ctypes.POINTER(ctypes.c_char), [
	("display",		ctypes.POINTER(_GdkDisplay)),] )

gdk_display_get_n_screens = _rpythonic_function_(		"gdk_display_get_n_screens", ctypes.c_int, [
	("display",		ctypes.POINTER(_GdkDisplay)),] )

gdk_display_get_screen = _rpythonic_function_(		"gdk_display_get_screen", ctypes.POINTER(_GdkScreen), [
	("display",		ctypes.POINTER(_GdkDisplay)),
	("screen_num",		ctypes.c_int),] )

gdk_display_get_default_screen = _rpythonic_function_(		"gdk_display_get_default_screen", ctypes.POINTER(_GdkScreen), [
	("display",		ctypes.POINTER(_GdkDisplay)),] )

gdk_display_pointer_ungrab = _rpythonic_function_(		"gdk_display_pointer_ungrab", ctypes.c_void_p, [
	("display",		ctypes.POINTER(_GdkDisplay)),
	("time_",		ctypes.c_uint),] )

gdk_display_keyboard_ungrab = _rpythonic_function_(		"gdk_display_keyboard_ungrab", ctypes.c_void_p, [
	("display",		ctypes.POINTER(_GdkDisplay)),
	("time_",		ctypes.c_uint),] )

gdk_display_pointer_is_grabbed = _rpythonic_function_(		"gdk_display_pointer_is_grabbed", ctypes.c_int, [
	("display",		ctypes.POINTER(_GdkDisplay)),] )

gdk_display_device_is_grabbed = _rpythonic_function_(		"gdk_display_device_is_grabbed", ctypes.c_int, [
	("display",		ctypes.POINTER(_GdkDisplay)),
	("device",		ctypes.POINTER(_GdkDevice)),] )

gdk_display_beep = _rpythonic_function_(		"gdk_display_beep", ctypes.c_void_p, [
	("display",		ctypes.POINTER(_GdkDisplay)),] )

gdk_display_sync = _rpythonic_function_(		"gdk_display_sync", ctypes.c_void_p, [
	("display",		ctypes.POINTER(_GdkDisplay)),] )

gdk_display_flush = _rpythonic_function_(		"gdk_display_flush", ctypes.c_void_p, [
	("display",		ctypes.POINTER(_GdkDisplay)),] )

gdk_display_close = _rpythonic_function_(		"gdk_display_close", ctypes.c_void_p, [
	("display",		ctypes.POINTER(_GdkDisplay)),] )

gdk_display_is_closed = _rpythonic_function_(		"gdk_display_is_closed", ctypes.c_int, [
	("display",		ctypes.POINTER(_GdkDisplay)),] )

gdk_display_list_devices = _rpythonic_function_(		"gdk_display_list_devices", ctypes.POINTER(_GList), [
	("display",		ctypes.POINTER(_GdkDisplay)),] )

gdk_display_get_event = _rpythonic_function_(		"gdk_display_get_event", ctypes.POINTER(_GdkEvent), [
	("display",		ctypes.POINTER(_GdkDisplay)),] )

gdk_display_peek_event = _rpythonic_function_(		"gdk_display_peek_event", ctypes.POINTER(_GdkEvent), [
	("display",		ctypes.POINTER(_GdkDisplay)),] )

gdk_display_put_event = _rpythonic_function_(		"gdk_display_put_event", ctypes.c_void_p, [
	("display",		ctypes.POINTER(_GdkDisplay)),
	("event",		ctypes.POINTER(_GdkEvent)),] )

gdk_display_has_pending = _rpythonic_function_(		"gdk_display_has_pending", ctypes.c_int, [
	("display",		ctypes.POINTER(_GdkDisplay)),] )

gdk_display_set_double_click_time = _rpythonic_function_(		"gdk_display_set_double_click_time", ctypes.c_void_p, [
	("display",		ctypes.POINTER(_GdkDisplay)),
	("msec",		ctypes.c_uint),] )

gdk_display_set_double_click_distance = _rpythonic_function_(		"gdk_display_set_double_click_distance", ctypes.c_void_p, [
	("display",		ctypes.POINTER(_GdkDisplay)),
	("distance",		ctypes.c_uint),] )

gdk_display_get_default = _rpythonic_function_(		"gdk_display_get_default", ctypes.POINTER(_GdkDisplay), [] )

gdk_display_get_pointer = _rpythonic_function_(		"gdk_display_get_pointer", ctypes.c_void_p, [
	("display",		ctypes.POINTER(_GdkDisplay)),
	("screen",		ctypes.POINTER(ctypes.POINTER(_GdkScreen))),
	("x",		ctypes.POINTER(ctypes.c_int)),
	("y",		ctypes.POINTER(ctypes.c_int)),
	("mask",		ctypes.POINTER(ctypes.c_int)),] )

gdk_display_get_window_at_pointer = _rpythonic_function_(		"gdk_display_get_window_at_pointer", ctypes.POINTER(_GdkWindow), [
	("display",		ctypes.POINTER(_GdkDisplay)),
	("win_x",		ctypes.POINTER(ctypes.c_int)),
	("win_y",		ctypes.POINTER(ctypes.c_int)),] )

gdk_display_warp_pointer = _rpythonic_function_(		"gdk_display_warp_pointer", ctypes.c_void_p, [
	("display",		ctypes.POINTER(_GdkDisplay)),
	("screen",		ctypes.POINTER(_GdkScreen)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

gdk_display_open_default_libgtk_only = _rpythonic_function_(		"gdk_display_open_default_libgtk_only", ctypes.POINTER(_GdkDisplay), [] )

gdk_display_supports_cursor_alpha = _rpythonic_function_(		"gdk_display_supports_cursor_alpha", ctypes.c_int, [
	("display",		ctypes.POINTER(_GdkDisplay)),] )

gdk_display_supports_cursor_color = _rpythonic_function_(		"gdk_display_supports_cursor_color", ctypes.c_int, [
	("display",		ctypes.POINTER(_GdkDisplay)),] )

gdk_display_get_default_cursor_size = _rpythonic_function_(		"gdk_display_get_default_cursor_size", ctypes.c_uint, [
	("display",		ctypes.POINTER(_GdkDisplay)),] )

gdk_display_get_maximal_cursor_size = _rpythonic_function_(		"gdk_display_get_maximal_cursor_size", ctypes.c_void_p, [
	("display",		ctypes.POINTER(_GdkDisplay)),
	("width",		ctypes.POINTER(ctypes.c_uint)),
	("height",		ctypes.POINTER(ctypes.c_uint)),] )

gdk_display_get_default_group = _rpythonic_function_(		"gdk_display_get_default_group", ctypes.POINTER(_GdkWindow), [
	("display",		ctypes.POINTER(_GdkDisplay)),] )

gdk_display_supports_selection_notification = _rpythonic_function_(		"gdk_display_supports_selection_notification", ctypes.c_int, [
	("display",		ctypes.POINTER(_GdkDisplay)),] )

gdk_display_request_selection_notification = _rpythonic_function_(		"gdk_display_request_selection_notification", ctypes.c_int, [
	("display",		ctypes.POINTER(_GdkDisplay)),
	("selection",		ctypes.POINTER(_GdkAtom)),] )

gdk_display_supports_clipboard_persistence = _rpythonic_function_(		"gdk_display_supports_clipboard_persistence", ctypes.c_int, [
	("display",		ctypes.POINTER(_GdkDisplay)),] )

gdk_display_store_clipboard = _rpythonic_function_(		"gdk_display_store_clipboard", ctypes.c_void_p, [
	("display",		ctypes.POINTER(_GdkDisplay)),
	("clipboard_window",		ctypes.POINTER(_GdkWindow)),
	("time_",		ctypes.c_uint),
	("targets",		ctypes.POINTER(ctypes.POINTER(_GdkAtom))),
	("n_targets",		ctypes.c_int),] )

gdk_display_supports_shapes = _rpythonic_function_(		"gdk_display_supports_shapes", ctypes.c_int, [
	("display",		ctypes.POINTER(_GdkDisplay)),] )

gdk_display_supports_input_shapes = _rpythonic_function_(		"gdk_display_supports_input_shapes", ctypes.c_int, [
	("display",		ctypes.POINTER(_GdkDisplay)),] )

gdk_display_supports_composite = _rpythonic_function_(		"gdk_display_supports_composite", ctypes.c_int, [
	("display",		ctypes.POINTER(_GdkDisplay)),] )

gdk_display_notify_startup_complete = _rpythonic_function_(		"gdk_display_notify_startup_complete", ctypes.c_void_p, [
	("display",		ctypes.POINTER(_GdkDisplay)),
	("startup_id",		ctypes.POINTER(ctypes.c_char)),] )

gdk_display_get_device_manager = _rpythonic_function_(		"gdk_display_get_device_manager", ctypes.POINTER(_GdkDeviceManager), [
	("display",		ctypes.POINTER(_GdkDisplay)),] )

gdk_display_get_app_launch_context = _rpythonic_function_(		"gdk_display_get_app_launch_context", ctypes.POINTER(_GdkAppLaunchContext), [
	("display",		ctypes.POINTER(_GdkDisplay)),] )

gdk_screen_get_type = _rpythonic_function_(		"gdk_screen_get_type", ctypes.c_uint, [] )

gdk_screen_get_system_visual = _rpythonic_function_(		"gdk_screen_get_system_visual", ctypes.POINTER(_GdkVisual), [
	("screen",		ctypes.POINTER(_GdkScreen)),] )

gdk_screen_get_rgba_visual = _rpythonic_function_(		"gdk_screen_get_rgba_visual", ctypes.POINTER(_GdkVisual), [
	("screen",		ctypes.POINTER(_GdkScreen)),] )

gdk_screen_is_composited = _rpythonic_function_(		"gdk_screen_is_composited", ctypes.c_int, [
	("screen",		ctypes.POINTER(_GdkScreen)),] )

gdk_screen_get_root_window = _rpythonic_function_(		"gdk_screen_get_root_window", ctypes.POINTER(_GdkWindow), [
	("screen",		ctypes.POINTER(_GdkScreen)),] )

gdk_screen_get_display = _rpythonic_function_(		"gdk_screen_get_display", ctypes.POINTER(_GdkDisplay), [
	("screen",		ctypes.POINTER(_GdkScreen)),] )

gdk_screen_get_number = _rpythonic_function_(		"gdk_screen_get_number", ctypes.c_int, [
	("screen",		ctypes.POINTER(_GdkScreen)),] )

gdk_screen_get_width = _rpythonic_function_(		"gdk_screen_get_width", ctypes.c_int, [
	("screen",		ctypes.POINTER(_GdkScreen)),] )

gdk_screen_get_height = _rpythonic_function_(		"gdk_screen_get_height", ctypes.c_int, [
	("screen",		ctypes.POINTER(_GdkScreen)),] )

gdk_screen_get_width_mm = _rpythonic_function_(		"gdk_screen_get_width_mm", ctypes.c_int, [
	("screen",		ctypes.POINTER(_GdkScreen)),] )

gdk_screen_get_height_mm = _rpythonic_function_(		"gdk_screen_get_height_mm", ctypes.c_int, [
	("screen",		ctypes.POINTER(_GdkScreen)),] )

gdk_screen_list_visuals = _rpythonic_function_(		"gdk_screen_list_visuals", ctypes.POINTER(_GList), [
	("screen",		ctypes.POINTER(_GdkScreen)),] )

gdk_screen_get_toplevel_windows = _rpythonic_function_(		"gdk_screen_get_toplevel_windows", ctypes.POINTER(_GList), [
	("screen",		ctypes.POINTER(_GdkScreen)),] )

gdk_screen_make_display_name = _rpythonic_function_(		"gdk_screen_make_display_name", ctypes.POINTER(ctypes.c_char), [
	("screen",		ctypes.POINTER(_GdkScreen)),] )

gdk_screen_get_n_monitors = _rpythonic_function_(		"gdk_screen_get_n_monitors", ctypes.c_int, [
	("screen",		ctypes.POINTER(_GdkScreen)),] )

gdk_screen_get_primary_monitor = _rpythonic_function_(		"gdk_screen_get_primary_monitor", ctypes.c_int, [
	("screen",		ctypes.POINTER(_GdkScreen)),] )

gdk_screen_get_monitor_geometry = _rpythonic_function_(		"gdk_screen_get_monitor_geometry", ctypes.c_void_p, [
	("screen",		ctypes.POINTER(_GdkScreen)),
	("monitor_num",		ctypes.c_int),
	("dest",		ctypes.POINTER(_cairo_rectangle_int)),] )

gdk_screen_get_monitor_at_point = _rpythonic_function_(		"gdk_screen_get_monitor_at_point", ctypes.c_int, [
	("screen",		ctypes.POINTER(_GdkScreen)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

gdk_screen_get_monitor_at_window = _rpythonic_function_(		"gdk_screen_get_monitor_at_window", ctypes.c_int, [
	("screen",		ctypes.POINTER(_GdkScreen)),
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_screen_get_monitor_width_mm = _rpythonic_function_(		"gdk_screen_get_monitor_width_mm", ctypes.c_int, [
	("screen",		ctypes.POINTER(_GdkScreen)),
	("monitor_num",		ctypes.c_int),] )

gdk_screen_get_monitor_height_mm = _rpythonic_function_(		"gdk_screen_get_monitor_height_mm", ctypes.c_int, [
	("screen",		ctypes.POINTER(_GdkScreen)),
	("monitor_num",		ctypes.c_int),] )

gdk_screen_get_monitor_plug_name = _rpythonic_function_(		"gdk_screen_get_monitor_plug_name", ctypes.POINTER(ctypes.c_char), [
	("screen",		ctypes.POINTER(_GdkScreen)),
	("monitor_num",		ctypes.c_int),] )

gdk_screen_get_default = _rpythonic_function_(		"gdk_screen_get_default", ctypes.POINTER(_GdkScreen), [] )

gdk_screen_get_setting = _rpythonic_function_(		"gdk_screen_get_setting", ctypes.c_int, [
	("screen",		ctypes.POINTER(_GdkScreen)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(_GValue)),] )

gdk_screen_set_font_options = _rpythonic_function_(		"gdk_screen_set_font_options", ctypes.c_void_p, [
	("screen",		ctypes.POINTER(_GdkScreen)),
	("options",		ctypes.POINTER(_cairo_font_options)),] )

gdk_screen_get_font_options = _rpythonic_function_(		"gdk_screen_get_font_options", ctypes.POINTER(_cairo_font_options), [
	("screen",		ctypes.POINTER(_GdkScreen)),] )

gdk_screen_set_resolution = _rpythonic_function_(		"gdk_screen_set_resolution", ctypes.c_void_p, [
	("screen",		ctypes.POINTER(_GdkScreen)),
	("dpi",		ctypes.c_double),] )

gdk_screen_get_resolution = _rpythonic_function_(		"gdk_screen_get_resolution", ctypes.c_double, [
	("screen",		ctypes.POINTER(_GdkScreen)),] )

gdk_screen_get_active_window = _rpythonic_function_(		"gdk_screen_get_active_window", ctypes.POINTER(_GdkWindow), [
	("screen",		ctypes.POINTER(_GdkScreen)),] )

gdk_screen_get_window_stack = _rpythonic_function_(		"gdk_screen_get_window_stack", ctypes.POINTER(_GList), [
	("screen",		ctypes.POINTER(_GdkScreen)),] )

gdk_app_launch_context_get_type = _rpythonic_function_(		"gdk_app_launch_context_get_type", ctypes.c_uint, [] )

gdk_app_launch_context_new = _rpythonic_function_(		"gdk_app_launch_context_new", ctypes.POINTER(_GdkAppLaunchContext), [] )

gdk_app_launch_context_set_display = _rpythonic_function_(		"gdk_app_launch_context_set_display", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GdkAppLaunchContext)),
	("display",		ctypes.POINTER(_GdkDisplay)),] )

gdk_app_launch_context_set_screen = _rpythonic_function_(		"gdk_app_launch_context_set_screen", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GdkAppLaunchContext)),
	("screen",		ctypes.POINTER(_GdkScreen)),] )

gdk_app_launch_context_set_desktop = _rpythonic_function_(		"gdk_app_launch_context_set_desktop", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GdkAppLaunchContext)),
	("desktop",		ctypes.c_int),] )

gdk_app_launch_context_set_timestamp = _rpythonic_function_(		"gdk_app_launch_context_set_timestamp", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GdkAppLaunchContext)),
	("timestamp",		ctypes.c_uint),] )

gdk_app_launch_context_set_icon = _rpythonic_function_(		"gdk_app_launch_context_set_icon", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GdkAppLaunchContext)),
	("icon",		ctypes.POINTER(_GIcon)),] )

gdk_app_launch_context_set_icon_name = _rpythonic_function_(		"gdk_app_launch_context_set_icon_name", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GdkAppLaunchContext)),
	("icon_name",		ctypes.POINTER(ctypes.c_char)),] )

gdk_rgba_get_type = _rpythonic_function_(		"gdk_rgba_get_type", ctypes.c_uint, [] )

gdk_rgba_copy = _rpythonic_function_(		"gdk_rgba_copy", ctypes.POINTER(_GdkRGBA), [
	("rgba",		ctypes.POINTER(_GdkRGBA)),] )

gdk_rgba_free = _rpythonic_function_(		"gdk_rgba_free", ctypes.c_void_p, [
	("rgba",		ctypes.POINTER(_GdkRGBA)),] )

gdk_rgba_hash = _rpythonic_function_(		"gdk_rgba_hash", ctypes.c_uint, [("p",		ctypes.c_void_p)] )

gdk_rgba_equal = _rpythonic_function_(		"gdk_rgba_equal", ctypes.c_int, [
	("p1",		ctypes.POINTER(ctypes.c_void_p)),
	("p2",		ctypes.POINTER(ctypes.c_void_p)),] )

gdk_rgba_parse = _rpythonic_function_(		"gdk_rgba_parse", ctypes.c_int, [
	("rgba",		ctypes.POINTER(_GdkRGBA)),
	("spec",		ctypes.POINTER(ctypes.c_char)),] )

gdk_rgba_to_string = _rpythonic_function_(		"gdk_rgba_to_string", ctypes.POINTER(ctypes.c_char), [
	("rgba",		ctypes.POINTER(_GdkRGBA)),] )

GdkPixbufDestroyNotify = _rpythonic_function_(		"GdkPixbufDestroyNotify", ctypes.c_void_p, [
	("pixels",		ctypes.POINTER(ctypes.c_ubyte)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

gdk_pixbuf_error_quark = _rpythonic_function_(		"gdk_pixbuf_error_quark", ctypes.c_uint, [] )

gdk_pixbuf_get_type = _rpythonic_function_(		"gdk_pixbuf_get_type", ctypes.c_uint, [] )

gdk_pixbuf_ref = _rpythonic_function_(		"gdk_pixbuf_ref", ctypes.POINTER(_GdkPixbuf), [
	("pixbuf",		ctypes.POINTER(_GdkPixbuf)),] )

gdk_pixbuf_unref = _rpythonic_function_(		"gdk_pixbuf_unref", ctypes.c_void_p, [
	("pixbuf",		ctypes.POINTER(_GdkPixbuf)),] )

gdk_pixbuf_get_colorspace = _rpythonic_function_(		"gdk_pixbuf_get_colorspace", ctypes.c_int, [
	("pixbuf",		ctypes.POINTER(_GdkPixbuf)),] )

gdk_pixbuf_get_n_channels = _rpythonic_function_(		"gdk_pixbuf_get_n_channels", ctypes.c_int, [
	("pixbuf",		ctypes.POINTER(_GdkPixbuf)),] )

gdk_pixbuf_get_has_alpha = _rpythonic_function_(		"gdk_pixbuf_get_has_alpha", ctypes.c_int, [
	("pixbuf",		ctypes.POINTER(_GdkPixbuf)),] )

gdk_pixbuf_get_bits_per_sample = _rpythonic_function_(		"gdk_pixbuf_get_bits_per_sample", ctypes.c_int, [
	("pixbuf",		ctypes.POINTER(_GdkPixbuf)),] )

gdk_pixbuf_get_pixels = _rpythonic_function_(		"gdk_pixbuf_get_pixels", ctypes.POINTER(ctypes.c_ubyte), [
	("pixbuf",		ctypes.POINTER(_GdkPixbuf)),] )

gdk_pixbuf_get_width = _rpythonic_function_(		"gdk_pixbuf_get_width", ctypes.c_int, [
	("pixbuf",		ctypes.POINTER(_GdkPixbuf)),] )

gdk_pixbuf_get_height = _rpythonic_function_(		"gdk_pixbuf_get_height", ctypes.c_int, [
	("pixbuf",		ctypes.POINTER(_GdkPixbuf)),] )

gdk_pixbuf_get_rowstride = _rpythonic_function_(		"gdk_pixbuf_get_rowstride", ctypes.c_int, [
	("pixbuf",		ctypes.POINTER(_GdkPixbuf)),] )

gdk_pixbuf_new = _rpythonic_function_(		"gdk_pixbuf_new", ctypes.POINTER(_GdkPixbuf), [
	("colorspace",		ctypes.c_int),
	("has_alpha",		ctypes.c_int),
	("bits_per_sample",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

gdk_pixbuf_copy = _rpythonic_function_(		"gdk_pixbuf_copy", ctypes.POINTER(_GdkPixbuf), [
	("pixbuf",		ctypes.POINTER(_GdkPixbuf)),] )

gdk_pixbuf_new_subpixbuf = _rpythonic_function_(		"gdk_pixbuf_new_subpixbuf", ctypes.POINTER(_GdkPixbuf), [
	("src_pixbuf",		ctypes.POINTER(_GdkPixbuf)),
	("src_x",		ctypes.c_int),
	("src_y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

gdk_pixbuf_new_from_file = _rpythonic_function_(		"gdk_pixbuf_new_from_file", ctypes.POINTER(_GdkPixbuf), [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gdk_pixbuf_new_from_file_at_size = _rpythonic_function_(		"gdk_pixbuf_new_from_file_at_size", ctypes.POINTER(_GdkPixbuf), [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gdk_pixbuf_new_from_file_at_scale = _rpythonic_function_(		"gdk_pixbuf_new_from_file_at_scale", ctypes.POINTER(_GdkPixbuf), [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("preserve_aspect_ratio",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gdk_pixbuf_new_from_data = _rpythonic_function_(		"gdk_pixbuf_new_from_data", ctypes.POINTER(_GdkPixbuf), [
	("data",		ctypes.POINTER(ctypes.c_ubyte)),
	("colorspace",		ctypes.c_int),
	("has_alpha",		ctypes.c_int),
	("bits_per_sample",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("rowstride",		ctypes.c_int),
	("destroy_fn",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_void_p),)),
	("destroy_fn_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gdk_pixbuf_new_from_xpm_data = _rpythonic_function_(		"gdk_pixbuf_new_from_xpm_data", ctypes.POINTER(_GdkPixbuf), [
	("data",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

gdk_pixbuf_new_from_inline = _rpythonic_function_(		"gdk_pixbuf_new_from_inline", ctypes.POINTER(_GdkPixbuf), [
	("data_length",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_ubyte)),
	("copy_pixels",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gdk_pixbuf_fill = _rpythonic_function_(		"gdk_pixbuf_fill", ctypes.c_void_p, [
	("pixbuf",		ctypes.POINTER(_GdkPixbuf)),
	("pixel",		ctypes.c_uint),] )

gdk_pixbuf_savev = _rpythonic_function_(		"gdk_pixbuf_savev", ctypes.c_int, [
	("pixbuf",		ctypes.POINTER(_GdkPixbuf)),
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("C_type",		ctypes.POINTER(ctypes.c_char)),
	("option_keys",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("option_values",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

GdkPixbufSaveFunc = _rpythonic_function_(		"GdkPixbufSaveFunc", ctypes.c_int, [
	("buf",		ctypes.POINTER(ctypes.c_char)),
	("count",		ctypes.c_uint),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

gdk_pixbuf_save_to_callbackv = _rpythonic_function_(		"gdk_pixbuf_save_to_callbackv", ctypes.c_int, [
	("pixbuf",		ctypes.POINTER(_GdkPixbuf)),
	("save_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_char),ctypes.c_uint,ctypes.POINTER(ctypes.POINTER(_GError)),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("C_type",		ctypes.POINTER(ctypes.c_char)),
	("option_keys",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("option_values",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gdk_pixbuf_save_to_bufferv = _rpythonic_function_(		"gdk_pixbuf_save_to_bufferv", ctypes.c_int, [
	("pixbuf",		ctypes.POINTER(_GdkPixbuf)),
	("buffer",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("buffer_size",		ctypes.POINTER(ctypes.c_uint)),
	("C_type",		ctypes.POINTER(ctypes.c_char)),
	("option_keys",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("option_values",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gdk_pixbuf_new_from_stream = _rpythonic_function_(		"gdk_pixbuf_new_from_stream", ctypes.POINTER(_GdkPixbuf), [
	("stream",		ctypes.POINTER(_GInputStream)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gdk_pixbuf_new_from_stream_async = _rpythonic_function_(		"gdk_pixbuf_new_from_stream_async", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GInputStream)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gdk_pixbuf_new_from_stream_finish = _rpythonic_function_(		"gdk_pixbuf_new_from_stream_finish", ctypes.POINTER(_GdkPixbuf), [
	("async_result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gdk_pixbuf_new_from_stream_at_scale = _rpythonic_function_(		"gdk_pixbuf_new_from_stream_at_scale", ctypes.POINTER(_GdkPixbuf), [
	("stream",		ctypes.POINTER(_GInputStream)),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("preserve_aspect_ratio",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gdk_pixbuf_new_from_stream_at_scale_async = _rpythonic_function_(		"gdk_pixbuf_new_from_stream_at_scale_async", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GInputStream)),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("preserve_aspect_ratio",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gdk_pixbuf_save_to_stream_finish = _rpythonic_function_(		"gdk_pixbuf_save_to_stream_finish", ctypes.c_int, [
	("async_result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gdk_pixbuf_add_alpha = _rpythonic_function_(		"gdk_pixbuf_add_alpha", ctypes.POINTER(_GdkPixbuf), [
	("pixbuf",		ctypes.POINTER(_GdkPixbuf)),
	("substitute_color",		ctypes.c_int),
	("r",		ctypes.c_ubyte),
	("g",		ctypes.c_ubyte),
	("b",		ctypes.c_ubyte),] )

gdk_pixbuf_copy_area = _rpythonic_function_(		"gdk_pixbuf_copy_area", ctypes.c_void_p, [
	("src_pixbuf",		ctypes.POINTER(_GdkPixbuf)),
	("src_x",		ctypes.c_int),
	("src_y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("dest_pixbuf",		ctypes.POINTER(_GdkPixbuf)),
	("dest_x",		ctypes.c_int),
	("dest_y",		ctypes.c_int),] )

gdk_pixbuf_saturate_and_pixelate = _rpythonic_function_(		"gdk_pixbuf_saturate_and_pixelate", ctypes.c_void_p, [
	("src",		ctypes.POINTER(_GdkPixbuf)),
	("dest",		ctypes.POINTER(_GdkPixbuf)),
	("saturation",		ctypes.c_float),
	("pixelate",		ctypes.c_int),] )

gdk_pixbuf_apply_embedded_orientation = _rpythonic_function_(		"gdk_pixbuf_apply_embedded_orientation", ctypes.POINTER(_GdkPixbuf), [
	("src",		ctypes.POINTER(_GdkPixbuf)),] )

gdk_pixbuf_get_option = _rpythonic_function_(		"gdk_pixbuf_get_option", ctypes.POINTER(ctypes.c_char), [
	("pixbuf",		ctypes.POINTER(_GdkPixbuf)),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

gdk_pixbuf_scale = _rpythonic_function_(		"gdk_pixbuf_scale", ctypes.c_void_p, [
	("src",		ctypes.POINTER(_GdkPixbuf)),
	("dest",		ctypes.POINTER(_GdkPixbuf)),
	("dest_x",		ctypes.c_int),
	("dest_y",		ctypes.c_int),
	("dest_width",		ctypes.c_int),
	("dest_height",		ctypes.c_int),
	("offset_x",		ctypes.c_double),
	("offset_y",		ctypes.c_double),
	("scale_x",		ctypes.c_double),
	("scale_y",		ctypes.c_double),
	("interp_type",		ctypes.c_int),] )

gdk_pixbuf_composite = _rpythonic_function_(		"gdk_pixbuf_composite", ctypes.c_void_p, [
	("src",		ctypes.POINTER(_GdkPixbuf)),
	("dest",		ctypes.POINTER(_GdkPixbuf)),
	("dest_x",		ctypes.c_int),
	("dest_y",		ctypes.c_int),
	("dest_width",		ctypes.c_int),
	("dest_height",		ctypes.c_int),
	("offset_x",		ctypes.c_double),
	("offset_y",		ctypes.c_double),
	("scale_x",		ctypes.c_double),
	("scale_y",		ctypes.c_double),
	("interp_type",		ctypes.c_int),
	("overall_alpha",		ctypes.c_int),] )

gdk_pixbuf_composite_color = _rpythonic_function_(		"gdk_pixbuf_composite_color", ctypes.c_void_p, [
	("src",		ctypes.POINTER(_GdkPixbuf)),
	("dest",		ctypes.POINTER(_GdkPixbuf)),
	("dest_x",		ctypes.c_int),
	("dest_y",		ctypes.c_int),
	("dest_width",		ctypes.c_int),
	("dest_height",		ctypes.c_int),
	("offset_x",		ctypes.c_double),
	("offset_y",		ctypes.c_double),
	("scale_x",		ctypes.c_double),
	("scale_y",		ctypes.c_double),
	("interp_type",		ctypes.c_int),
	("overall_alpha",		ctypes.c_int),
	("check_x",		ctypes.c_int),
	("check_y",		ctypes.c_int),
	("check_size",		ctypes.c_int),
	("color1",		ctypes.c_uint),
	("color2",		ctypes.c_uint),] )

gdk_pixbuf_scale_simple = _rpythonic_function_(		"gdk_pixbuf_scale_simple", ctypes.POINTER(_GdkPixbuf), [
	("src",		ctypes.POINTER(_GdkPixbuf)),
	("dest_width",		ctypes.c_int),
	("dest_height",		ctypes.c_int),
	("interp_type",		ctypes.c_int),] )

gdk_pixbuf_composite_color_simple = _rpythonic_function_(		"gdk_pixbuf_composite_color_simple", ctypes.POINTER(_GdkPixbuf), [
	("src",		ctypes.POINTER(_GdkPixbuf)),
	("dest_width",		ctypes.c_int),
	("dest_height",		ctypes.c_int),
	("interp_type",		ctypes.c_int),
	("overall_alpha",		ctypes.c_int),
	("check_size",		ctypes.c_int),
	("color1",		ctypes.c_uint),
	("color2",		ctypes.c_uint),] )

gdk_pixbuf_rotate_simple = _rpythonic_function_(		"gdk_pixbuf_rotate_simple", ctypes.POINTER(_GdkPixbuf), [
	("src",		ctypes.POINTER(_GdkPixbuf)),
	("angle",		ctypes.c_int),] )

gdk_pixbuf_flip = _rpythonic_function_(		"gdk_pixbuf_flip", ctypes.POINTER(_GdkPixbuf), [
	("src",		ctypes.POINTER(_GdkPixbuf)),
	("horizontal",		ctypes.c_int),] )

gdk_pixbuf_animation_get_type = _rpythonic_function_(		"gdk_pixbuf_animation_get_type", ctypes.c_uint, [] )

gdk_pixbuf_animation_new_from_file = _rpythonic_function_(		"gdk_pixbuf_animation_new_from_file", ctypes.POINTER(_GdkPixbufAnimation), [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gdk_pixbuf_animation_ref = _rpythonic_function_(		"gdk_pixbuf_animation_ref", ctypes.POINTER(_GdkPixbufAnimation), [
	("animation",		ctypes.POINTER(_GdkPixbufAnimation)),] )

gdk_pixbuf_animation_unref = _rpythonic_function_(		"gdk_pixbuf_animation_unref", ctypes.c_void_p, [
	("animation",		ctypes.POINTER(_GdkPixbufAnimation)),] )

gdk_pixbuf_animation_get_width = _rpythonic_function_(		"gdk_pixbuf_animation_get_width", ctypes.c_int, [
	("animation",		ctypes.POINTER(_GdkPixbufAnimation)),] )

gdk_pixbuf_animation_get_height = _rpythonic_function_(		"gdk_pixbuf_animation_get_height", ctypes.c_int, [
	("animation",		ctypes.POINTER(_GdkPixbufAnimation)),] )

gdk_pixbuf_animation_is_static_image = _rpythonic_function_(		"gdk_pixbuf_animation_is_static_image", ctypes.c_int, [
	("animation",		ctypes.POINTER(_GdkPixbufAnimation)),] )

gdk_pixbuf_animation_get_static_image = _rpythonic_function_(		"gdk_pixbuf_animation_get_static_image", ctypes.POINTER(_GdkPixbuf), [
	("animation",		ctypes.POINTER(_GdkPixbufAnimation)),] )

gdk_pixbuf_animation_get_iter = _rpythonic_function_(		"gdk_pixbuf_animation_get_iter", ctypes.POINTER(_GdkPixbufAnimationIter), [
	("animation",		ctypes.POINTER(_GdkPixbufAnimation)),
	("start_time",		ctypes.POINTER(_GTimeVal)),] )

gdk_pixbuf_animation_iter_get_type = _rpythonic_function_(		"gdk_pixbuf_animation_iter_get_type", ctypes.c_uint, [] )

gdk_pixbuf_animation_iter_get_delay_time = _rpythonic_function_(		"gdk_pixbuf_animation_iter_get_delay_time", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GdkPixbufAnimationIter)),] )

gdk_pixbuf_animation_iter_get_pixbuf = _rpythonic_function_(		"gdk_pixbuf_animation_iter_get_pixbuf", ctypes.POINTER(_GdkPixbuf), [
	("iter",		ctypes.POINTER(_GdkPixbufAnimationIter)),] )

gdk_pixbuf_animation_iter_on_currently_loading_frame = _rpythonic_function_(		"gdk_pixbuf_animation_iter_on_currently_loading_frame", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GdkPixbufAnimationIter)),] )

gdk_pixbuf_animation_iter_advance = _rpythonic_function_(		"gdk_pixbuf_animation_iter_advance", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GdkPixbufAnimationIter)),
	("current_time",		ctypes.POINTER(_GTimeVal)),] )

gdk_pixbuf_simple_anim_get_type = _rpythonic_function_(		"gdk_pixbuf_simple_anim_get_type", ctypes.c_uint, [] )

gdk_pixbuf_simple_anim_iter_get_type = _rpythonic_function_(		"gdk_pixbuf_simple_anim_iter_get_type", ctypes.c_uint, [] )

gdk_pixbuf_simple_anim_new = _rpythonic_function_(		"gdk_pixbuf_simple_anim_new", ctypes.POINTER(_GdkPixbufSimpleAnim), [
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("rate",		ctypes.c_float),] )

gdk_pixbuf_simple_anim_add_frame = _rpythonic_function_(		"gdk_pixbuf_simple_anim_add_frame", ctypes.c_void_p, [
	("animation",		ctypes.POINTER(_GdkPixbufSimpleAnim)),
	("pixbuf",		ctypes.POINTER(_GdkPixbuf)),] )

gdk_pixbuf_simple_anim_set_loop = _rpythonic_function_(		"gdk_pixbuf_simple_anim_set_loop", ctypes.c_void_p, [
	("animation",		ctypes.POINTER(_GdkPixbufSimpleAnim)),
	("loop",		ctypes.c_int),] )

gdk_pixbuf_simple_anim_get_loop = _rpythonic_function_(		"gdk_pixbuf_simple_anim_get_loop", ctypes.c_int, [
	("animation",		ctypes.POINTER(_GdkPixbufSimpleAnim)),] )

gdk_pixbuf_format_get_type = _rpythonic_function_(		"gdk_pixbuf_format_get_type", ctypes.c_uint, [] )

gdk_pixbuf_get_formats = _rpythonic_function_(		"gdk_pixbuf_get_formats", ctypes.POINTER(_GSList), [] )

gdk_pixbuf_format_get_name = _rpythonic_function_(		"gdk_pixbuf_format_get_name", ctypes.POINTER(ctypes.c_char), [
	("format",		ctypes.POINTER(_GdkPixbufFormat)),] )

gdk_pixbuf_format_get_description = _rpythonic_function_(		"gdk_pixbuf_format_get_description", ctypes.POINTER(ctypes.c_char), [
	("format",		ctypes.POINTER(_GdkPixbufFormat)),] )

gdk_pixbuf_format_get_mime_types = _rpythonic_function_(		"gdk_pixbuf_format_get_mime_types", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("format",		ctypes.POINTER(_GdkPixbufFormat)),] )

gdk_pixbuf_format_get_extensions = _rpythonic_function_(		"gdk_pixbuf_format_get_extensions", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("format",		ctypes.POINTER(_GdkPixbufFormat)),] )

gdk_pixbuf_format_is_writable = _rpythonic_function_(		"gdk_pixbuf_format_is_writable", ctypes.c_int, [
	("format",		ctypes.POINTER(_GdkPixbufFormat)),] )

gdk_pixbuf_format_is_scalable = _rpythonic_function_(		"gdk_pixbuf_format_is_scalable", ctypes.c_int, [
	("format",		ctypes.POINTER(_GdkPixbufFormat)),] )

gdk_pixbuf_format_is_disabled = _rpythonic_function_(		"gdk_pixbuf_format_is_disabled", ctypes.c_int, [
	("format",		ctypes.POINTER(_GdkPixbufFormat)),] )

gdk_pixbuf_format_set_disabled = _rpythonic_function_(		"gdk_pixbuf_format_set_disabled", ctypes.c_void_p, [
	("format",		ctypes.POINTER(_GdkPixbufFormat)),
	("disabled",		ctypes.c_int),] )

gdk_pixbuf_format_get_license = _rpythonic_function_(		"gdk_pixbuf_format_get_license", ctypes.POINTER(ctypes.c_char), [
	("format",		ctypes.POINTER(_GdkPixbufFormat)),] )

gdk_pixbuf_get_file_info = _rpythonic_function_(		"gdk_pixbuf_get_file_info", ctypes.POINTER(_GdkPixbufFormat), [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("width",		ctypes.POINTER(ctypes.c_int)),
	("height",		ctypes.POINTER(ctypes.c_int)),] )

gdk_pixbuf_format_copy = _rpythonic_function_(		"gdk_pixbuf_format_copy", ctypes.POINTER(_GdkPixbufFormat), [
	("format",		ctypes.POINTER(_GdkPixbufFormat)),] )

gdk_pixbuf_format_free = _rpythonic_function_(		"gdk_pixbuf_format_free", ctypes.c_void_p, [
	("format",		ctypes.POINTER(_GdkPixbufFormat)),] )

size_prepared = _rpythonic_function_(		"size_prepared", ctypes.c_void_p, [
	("loader",		ctypes.POINTER(_GdkPixbufLoader)),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

area_prepared = _rpythonic_function_(		"area_prepared", ctypes.c_void_p, [
	("loader",		ctypes.POINTER(_GdkPixbufLoader)),] )

area_updated = _rpythonic_function_(		"area_updated", ctypes.c_void_p, [
	("loader",		ctypes.POINTER(_GdkPixbufLoader)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

closed = _rpythonic_function_(		"closed", ctypes.c_void_p, [
	("loader",		ctypes.POINTER(_GdkPixbufLoader)),] )

gdk_pixbuf_loader_get_type = _rpythonic_function_(		"gdk_pixbuf_loader_get_type", ctypes.c_uint, [] )

gdk_pixbuf_loader_new = _rpythonic_function_(		"gdk_pixbuf_loader_new", ctypes.POINTER(_GdkPixbufLoader), [] )

gdk_pixbuf_loader_new_with_type = _rpythonic_function_(		"gdk_pixbuf_loader_new_with_type", ctypes.POINTER(_GdkPixbufLoader), [
	("image_type",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gdk_pixbuf_loader_new_with_mime_type = _rpythonic_function_(		"gdk_pixbuf_loader_new_with_mime_type", ctypes.POINTER(_GdkPixbufLoader), [
	("mime_type",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gdk_pixbuf_loader_set_size = _rpythonic_function_(		"gdk_pixbuf_loader_set_size", ctypes.c_void_p, [
	("loader",		ctypes.POINTER(_GdkPixbufLoader)),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

gdk_pixbuf_loader_write = _rpythonic_function_(		"gdk_pixbuf_loader_write", ctypes.c_int, [
	("loader",		ctypes.POINTER(_GdkPixbufLoader)),
	("buf",		ctypes.POINTER(ctypes.c_ubyte)),
	("count",		ctypes.c_uint),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gdk_pixbuf_loader_get_pixbuf = _rpythonic_function_(		"gdk_pixbuf_loader_get_pixbuf", ctypes.POINTER(_GdkPixbuf), [
	("loader",		ctypes.POINTER(_GdkPixbufLoader)),] )

gdk_pixbuf_loader_get_animation = _rpythonic_function_(		"gdk_pixbuf_loader_get_animation", ctypes.POINTER(_GdkPixbufAnimation), [
	("loader",		ctypes.POINTER(_GdkPixbufLoader)),] )

gdk_pixbuf_loader_close = _rpythonic_function_(		"gdk_pixbuf_loader_close", ctypes.c_int, [
	("loader",		ctypes.POINTER(_GdkPixbufLoader)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gdk_pixbuf_loader_get_format = _rpythonic_function_(		"gdk_pixbuf_loader_get_format", ctypes.POINTER(_GdkPixbufFormat), [
	("loader",		ctypes.POINTER(_GdkPixbufLoader)),] )

gdk_pixbuf_alpha_mode_get_type = _rpythonic_function_(		"gdk_pixbuf_alpha_mode_get_type", ctypes.c_uint, [] )

gdk_colorspace_get_type = _rpythonic_function_(		"gdk_colorspace_get_type", ctypes.c_uint, [] )

gdk_pixbuf_error_get_type = _rpythonic_function_(		"gdk_pixbuf_error_get_type", ctypes.c_uint, [] )

gdk_interp_type_get_type = _rpythonic_function_(		"gdk_interp_type_get_type", ctypes.c_uint, [] )

gdk_pixbuf_rotation_get_type = _rpythonic_function_(		"gdk_pixbuf_rotation_get_type", ctypes.c_uint, [] )

gdk_pixbuf_get_from_window = _rpythonic_function_(		"gdk_pixbuf_get_from_window", ctypes.POINTER(_GdkPixbuf), [
	("window",		ctypes.POINTER(_GdkWindow)),
	("src_x",		ctypes.c_int),
	("src_y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

gdk_pixbuf_get_from_surface = _rpythonic_function_(		"gdk_pixbuf_get_from_surface", ctypes.POINTER(_GdkPixbuf), [
	("surface",		ctypes.POINTER(_cairo_surface)),
	("src_x",		ctypes.c_int),
	("src_y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

PangoCairoShapeRendererFunc = _rpythonic_function_(		"PangoCairoShapeRendererFunc", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("attr",		ctypes.POINTER(_PangoAttrShape)),
	("do_path",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

pango_cairo_font_map_get_type = _rpythonic_function_(		"pango_cairo_font_map_get_type", ctypes.c_uint, [] )

pango_cairo_font_map_new = _rpythonic_function_(		"pango_cairo_font_map_new", ctypes.POINTER(_PangoFontMap), [] )

pango_cairo_font_map_new_for_font_type = _rpythonic_function_(		"pango_cairo_font_map_new_for_font_type", ctypes.POINTER(_PangoFontMap), [
	("fonttype",		ctypes.c_int),] )

pango_cairo_font_map_get_default = _rpythonic_function_(		"pango_cairo_font_map_get_default", ctypes.POINTER(_PangoFontMap), [] )

pango_cairo_font_map_set_default = _rpythonic_function_(		"pango_cairo_font_map_set_default", ctypes.c_void_p, [
	("fontmap",		ctypes.POINTER(_PangoCairoFontMap)),] )

pango_cairo_font_map_get_font_type = _rpythonic_function_(		"pango_cairo_font_map_get_font_type", ctypes.c_int, [
	("fontmap",		ctypes.POINTER(_PangoCairoFontMap)),] )

pango_cairo_font_map_set_resolution = _rpythonic_function_(		"pango_cairo_font_map_set_resolution", ctypes.c_void_p, [
	("fontmap",		ctypes.POINTER(_PangoCairoFontMap)),
	("dpi",		ctypes.c_double),] )

pango_cairo_font_map_get_resolution = _rpythonic_function_(		"pango_cairo_font_map_get_resolution", ctypes.c_double, [
	("fontmap",		ctypes.POINTER(_PangoCairoFontMap)),] )

pango_cairo_font_map_create_context = _rpythonic_function_(		"pango_cairo_font_map_create_context", ctypes.POINTER(_PangoContext), [
	("fontmap",		ctypes.POINTER(_PangoCairoFontMap)),] )

pango_cairo_font_get_type = _rpythonic_function_(		"pango_cairo_font_get_type", ctypes.c_uint, [] )

pango_cairo_font_get_scaled_font = _rpythonic_function_(		"pango_cairo_font_get_scaled_font", ctypes.POINTER(_cairo_scaled_font), [
	("font",		ctypes.POINTER(_PangoCairoFont)),] )

pango_cairo_update_context = _rpythonic_function_(		"pango_cairo_update_context", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("context",		ctypes.POINTER(_PangoContext)),] )

pango_cairo_context_set_font_options = _rpythonic_function_(		"pango_cairo_context_set_font_options", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_PangoContext)),
	("options",		ctypes.POINTER(_cairo_font_options)),] )

pango_cairo_context_get_font_options = _rpythonic_function_(		"pango_cairo_context_get_font_options", ctypes.POINTER(_cairo_font_options), [
	("context",		ctypes.POINTER(_PangoContext)),] )

pango_cairo_context_set_resolution = _rpythonic_function_(		"pango_cairo_context_set_resolution", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_PangoContext)),
	("dpi",		ctypes.c_double),] )

pango_cairo_context_get_resolution = _rpythonic_function_(		"pango_cairo_context_get_resolution", ctypes.c_double, [
	("context",		ctypes.POINTER(_PangoContext)),] )

pango_cairo_context_set_shape_renderer = _rpythonic_function_(		"pango_cairo_context_set_shape_renderer", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_PangoContext)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_cairo),ctypes.POINTER(_PangoAttrShape),ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("dnotify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

pango_cairo_context_get_shape_renderer = _rpythonic_function_(		"pango_cairo_context_get_shape_renderer", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_cairo),ctypes.POINTER(_PangoAttrShape),ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),), [
	("context",		ctypes.POINTER(_PangoContext)),
	("data",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

pango_cairo_create_context = _rpythonic_function_(		"pango_cairo_create_context", ctypes.POINTER(_PangoContext), [
	("cr",		ctypes.POINTER(_cairo)),] )

pango_cairo_create_layout = _rpythonic_function_(		"pango_cairo_create_layout", ctypes.POINTER(_PangoLayout), [
	("cr",		ctypes.POINTER(_cairo)),] )

pango_cairo_update_layout = _rpythonic_function_(		"pango_cairo_update_layout", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("layout",		ctypes.POINTER(_PangoLayout)),] )

pango_cairo_show_glyph_string = _rpythonic_function_(		"pango_cairo_show_glyph_string", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("font",		ctypes.POINTER(_PangoFont)),
	("glyphs",		ctypes.POINTER(_PangoGlyphString)),] )

pango_cairo_show_glyph_item = _rpythonic_function_(		"pango_cairo_show_glyph_item", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("text",		ctypes.POINTER(ctypes.c_char)),
	("glyph_item",		ctypes.POINTER(_PangoGlyphItem)),] )

pango_cairo_show_layout_line = _rpythonic_function_(		"pango_cairo_show_layout_line", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("line",		ctypes.POINTER(_PangoLayoutLine)),] )

pango_cairo_show_layout = _rpythonic_function_(		"pango_cairo_show_layout", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("layout",		ctypes.POINTER(_PangoLayout)),] )

pango_cairo_show_error_underline = _rpythonic_function_(		"pango_cairo_show_error_underline", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("width",		ctypes.c_double),
	("height",		ctypes.c_double),] )

pango_cairo_glyph_string_path = _rpythonic_function_(		"pango_cairo_glyph_string_path", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("font",		ctypes.POINTER(_PangoFont)),
	("glyphs",		ctypes.POINTER(_PangoGlyphString)),] )

pango_cairo_layout_line_path = _rpythonic_function_(		"pango_cairo_layout_line_path", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("line",		ctypes.POINTER(_PangoLayoutLine)),] )

pango_cairo_layout_path = _rpythonic_function_(		"pango_cairo_layout_path", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("layout",		ctypes.POINTER(_PangoLayout)),] )

pango_cairo_error_underline_path = _rpythonic_function_(		"pango_cairo_error_underline_path", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("width",		ctypes.c_double),
	("height",		ctypes.c_double),] )

gdk_cairo_create = _rpythonic_function_(		"gdk_cairo_create", ctypes.POINTER(_cairo), [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_cairo_get_clip_rectangle = _rpythonic_function_(		"gdk_cairo_get_clip_rectangle", ctypes.c_int, [
	("cr",		ctypes.POINTER(_cairo)),
	("rect",		ctypes.POINTER(_cairo_rectangle_int)),] )

gdk_cairo_set_source_color = _rpythonic_function_(		"gdk_cairo_set_source_color", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("color",		ctypes.POINTER(_GdkColor)),] )

gdk_cairo_set_source_rgba = _rpythonic_function_(		"gdk_cairo_set_source_rgba", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("rgba",		ctypes.POINTER(_GdkRGBA)),] )

gdk_cairo_set_source_pixbuf = _rpythonic_function_(		"gdk_cairo_set_source_pixbuf", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("pixbuf",		ctypes.POINTER(_GdkPixbuf)),
	("pixbuf_x",		ctypes.c_double),
	("pixbuf_y",		ctypes.c_double),] )

gdk_cairo_set_source_window = _rpythonic_function_(		"gdk_cairo_set_source_window", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("window",		ctypes.POINTER(_GdkWindow)),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),] )

gdk_cairo_rectangle = _rpythonic_function_(		"gdk_cairo_rectangle", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("rectangle",		ctypes.POINTER(_cairo_rectangle_int)),] )

gdk_cairo_region = _rpythonic_function_(		"gdk_cairo_region", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("region",		ctypes.POINTER(_cairo_region)),] )

gdk_cairo_region_create_from_surface = _rpythonic_function_(		"gdk_cairo_region_create_from_surface", ctypes.POINTER(_cairo_region), [
	("surface",		ctypes.POINTER(_cairo_surface)),] )

gdk_cursor_get_type = _rpythonic_function_(		"gdk_cursor_get_type", ctypes.c_uint, [] )

gdk_cursor_new_for_display = _rpythonic_function_(		"gdk_cursor_new_for_display", ctypes.POINTER(_GdkCursor), [
	("display",		ctypes.POINTER(_GdkDisplay)),
	("cursor_type",		ctypes.c_int),] )

gdk_cursor_new = _rpythonic_function_(		"gdk_cursor_new", ctypes.POINTER(_GdkCursor), [
	("cursor_type",		ctypes.c_int),] )

gdk_cursor_new_from_pixbuf = _rpythonic_function_(		"gdk_cursor_new_from_pixbuf", ctypes.POINTER(_GdkCursor), [
	("display",		ctypes.POINTER(_GdkDisplay)),
	("pixbuf",		ctypes.POINTER(_GdkPixbuf)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

gdk_cursor_new_from_name = _rpythonic_function_(		"gdk_cursor_new_from_name", ctypes.POINTER(_GdkCursor), [
	("display",		ctypes.POINTER(_GdkDisplay)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gdk_cursor_get_display = _rpythonic_function_(		"gdk_cursor_get_display", ctypes.POINTER(_GdkDisplay), [
	("cursor",		ctypes.POINTER(_GdkCursor)),] )

gdk_cursor_ref = _rpythonic_function_(		"gdk_cursor_ref", ctypes.POINTER(_GdkCursor), [
	("cursor",		ctypes.POINTER(_GdkCursor)),] )

gdk_cursor_unref = _rpythonic_function_(		"gdk_cursor_unref", ctypes.c_void_p, [
	("cursor",		ctypes.POINTER(_GdkCursor)),] )

gdk_cursor_get_image = _rpythonic_function_(		"gdk_cursor_get_image", ctypes.POINTER(_GdkPixbuf), [
	("cursor",		ctypes.POINTER(_GdkCursor)),] )

gdk_cursor_get_cursor_type = _rpythonic_function_(		"gdk_cursor_get_cursor_type", ctypes.c_int, [
	("cursor",		ctypes.POINTER(_GdkCursor)),] )

gdk_display_manager_get_type = _rpythonic_function_(		"gdk_display_manager_get_type", ctypes.c_uint, [] )

gdk_display_manager_get = _rpythonic_function_(		"gdk_display_manager_get", ctypes.POINTER(_GdkDisplayManager), [] )

gdk_display_manager_get_default_display = _rpythonic_function_(		"gdk_display_manager_get_default_display", ctypes.POINTER(_GdkDisplay), [
	("manager",		ctypes.POINTER(_GdkDisplayManager)),] )

gdk_display_manager_set_default_display = _rpythonic_function_(		"gdk_display_manager_set_default_display", ctypes.c_void_p, [
	("manager",		ctypes.POINTER(_GdkDisplayManager)),
	("display",		ctypes.POINTER(_GdkDisplay)),] )

gdk_display_manager_list_displays = _rpythonic_function_(		"gdk_display_manager_list_displays", ctypes.POINTER(_GSList), [
	("manager",		ctypes.POINTER(_GdkDisplayManager)),] )

gdk_display_manager_open_display = _rpythonic_function_(		"gdk_display_manager_open_display", ctypes.POINTER(_GdkDisplay), [
	("manager",		ctypes.POINTER(_GdkDisplayManager)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gdk_cursor_type_get_type = _rpythonic_function_(		"gdk_cursor_type_get_type", ctypes.c_uint, [] )

gdk_extension_mode_get_type = _rpythonic_function_(		"gdk_extension_mode_get_type", ctypes.c_uint, [] )

gdk_input_source_get_type = _rpythonic_function_(		"gdk_input_source_get_type", ctypes.c_uint, [] )

gdk_input_mode_get_type = _rpythonic_function_(		"gdk_input_mode_get_type", ctypes.c_uint, [] )

gdk_axis_use_get_type = _rpythonic_function_(		"gdk_axis_use_get_type", ctypes.c_uint, [] )

gdk_device_type_get_type = _rpythonic_function_(		"gdk_device_type_get_type", ctypes.c_uint, [] )

gdk_drag_action_get_type = _rpythonic_function_(		"gdk_drag_action_get_type", ctypes.c_uint, [] )

gdk_drag_protocol_get_type = _rpythonic_function_(		"gdk_drag_protocol_get_type", ctypes.c_uint, [] )

gdk_filter_return_get_type = _rpythonic_function_(		"gdk_filter_return_get_type", ctypes.c_uint, [] )

gdk_event_type_get_type = _rpythonic_function_(		"gdk_event_type_get_type", ctypes.c_uint, [] )

gdk_visibility_state_get_type = _rpythonic_function_(		"gdk_visibility_state_get_type", ctypes.c_uint, [] )

gdk_scroll_direction_get_type = _rpythonic_function_(		"gdk_scroll_direction_get_type", ctypes.c_uint, [] )

gdk_notify_type_get_type = _rpythonic_function_(		"gdk_notify_type_get_type", ctypes.c_uint, [] )

gdk_crossing_mode_get_type = _rpythonic_function_(		"gdk_crossing_mode_get_type", ctypes.c_uint, [] )

gdk_property_state_get_type = _rpythonic_function_(		"gdk_property_state_get_type", ctypes.c_uint, [] )

gdk_window_state_get_type = _rpythonic_function_(		"gdk_window_state_get_type", ctypes.c_uint, [] )

gdk_setting_action_get_type = _rpythonic_function_(		"gdk_setting_action_get_type", ctypes.c_uint, [] )

gdk_owner_change_get_type = _rpythonic_function_(		"gdk_owner_change_get_type", ctypes.c_uint, [] )

gdk_prop_mode_get_type = _rpythonic_function_(		"gdk_prop_mode_get_type", ctypes.c_uint, [] )

gdk_byte_order_get_type = _rpythonic_function_(		"gdk_byte_order_get_type", ctypes.c_uint, [] )

gdk_modifier_type_get_type = _rpythonic_function_(		"gdk_modifier_type_get_type", ctypes.c_uint, [] )

gdk_status_get_type = _rpythonic_function_(		"gdk_status_get_type", ctypes.c_uint, [] )

gdk_grab_status_get_type = _rpythonic_function_(		"gdk_grab_status_get_type", ctypes.c_uint, [] )

gdk_grab_ownership_get_type = _rpythonic_function_(		"gdk_grab_ownership_get_type", ctypes.c_uint, [] )

gdk_event_mask_get_type = _rpythonic_function_(		"gdk_event_mask_get_type", ctypes.c_uint, [] )

gdk_visual_type_get_type = _rpythonic_function_(		"gdk_visual_type_get_type", ctypes.c_uint, [] )

gdk_window_window_class_get_type = _rpythonic_function_(		"gdk_window_window_class_get_type", ctypes.c_uint, [] )

gdk_window_type_get_type = _rpythonic_function_(		"gdk_window_type_get_type", ctypes.c_uint, [] )

gdk_window_attributes_type_get_type = _rpythonic_function_(		"gdk_window_attributes_type_get_type", ctypes.c_uint, [] )

gdk_window_hints_get_type = _rpythonic_function_(		"gdk_window_hints_get_type", ctypes.c_uint, [] )

gdk_window_type_hint_get_type = _rpythonic_function_(		"gdk_window_type_hint_get_type", ctypes.c_uint, [] )

gdk_wm_decoration_get_type = _rpythonic_function_(		"gdk_wm_decoration_get_type", ctypes.c_uint, [] )

gdk_wm_function_get_type = _rpythonic_function_(		"gdk_wm_function_get_type", ctypes.c_uint, [] )

gdk_gravity_get_type = _rpythonic_function_(		"gdk_gravity_get_type", ctypes.c_uint, [] )

gdk_window_edge_get_type = _rpythonic_function_(		"gdk_window_edge_get_type", ctypes.c_uint, [] )

gdk_keymap_get_type = _rpythonic_function_(		"gdk_keymap_get_type", ctypes.c_uint, [] )

gdk_keymap_get_default = _rpythonic_function_(		"gdk_keymap_get_default", ctypes.POINTER(_GdkKeymap), [] )

gdk_keymap_get_for_display = _rpythonic_function_(		"gdk_keymap_get_for_display", ctypes.POINTER(_GdkKeymap), [
	("display",		ctypes.POINTER(_GdkDisplay)),] )

gdk_keymap_lookup_key = _rpythonic_function_(		"gdk_keymap_lookup_key", ctypes.c_uint, [
	("keymap",		ctypes.POINTER(_GdkKeymap)),
	("key",		ctypes.POINTER(_GdkKeymapKey)),] )

gdk_keymap_translate_keyboard_state = _rpythonic_function_(		"gdk_keymap_translate_keyboard_state", ctypes.c_int, [
	("keymap",		ctypes.POINTER(_GdkKeymap)),
	("hardware_keycode",		ctypes.c_uint),
	("state",		ctypes.c_int),
	("group",		ctypes.c_int),
	("keyval",		ctypes.POINTER(ctypes.c_uint)),
	("effective_group",		ctypes.POINTER(ctypes.c_int)),
	("level",		ctypes.POINTER(ctypes.c_int)),
	("consumed_modifiers",		ctypes.POINTER(ctypes.c_int)),] )

gdk_keymap_get_entries_for_keyval = _rpythonic_function_(		"gdk_keymap_get_entries_for_keyval", ctypes.c_int, [
	("keymap",		ctypes.POINTER(_GdkKeymap)),
	("keyval",		ctypes.c_uint),
	("keys",		ctypes.POINTER(ctypes.POINTER(_GdkKeymapKey))),
	("n_keys",		ctypes.POINTER(ctypes.c_int)),] )

gdk_keymap_get_entries_for_keycode = _rpythonic_function_(		"gdk_keymap_get_entries_for_keycode", ctypes.c_int, [
	("keymap",		ctypes.POINTER(_GdkKeymap)),
	("hardware_keycode",		ctypes.c_uint),
	("keys",		ctypes.POINTER(ctypes.POINTER(_GdkKeymapKey))),
	("keyvals",		ctypes.POINTER(ctypes.POINTER(ctypes.c_uint))),
	("n_entries",		ctypes.POINTER(ctypes.c_int)),] )

gdk_keymap_get_direction = _rpythonic_function_(		"gdk_keymap_get_direction", ctypes.c_int, [
	("keymap",		ctypes.POINTER(_GdkKeymap)),] )

gdk_keymap_have_bidi_layouts = _rpythonic_function_(		"gdk_keymap_have_bidi_layouts", ctypes.c_int, [
	("keymap",		ctypes.POINTER(_GdkKeymap)),] )

gdk_keymap_get_caps_lock_state = _rpythonic_function_(		"gdk_keymap_get_caps_lock_state", ctypes.c_int, [
	("keymap",		ctypes.POINTER(_GdkKeymap)),] )

gdk_keymap_get_num_lock_state = _rpythonic_function_(		"gdk_keymap_get_num_lock_state", ctypes.c_int, [
	("keymap",		ctypes.POINTER(_GdkKeymap)),] )

gdk_keymap_add_virtual_modifiers = _rpythonic_function_(		"gdk_keymap_add_virtual_modifiers", ctypes.c_void_p, [
	("keymap",		ctypes.POINTER(_GdkKeymap)),
	("state",		ctypes.POINTER(ctypes.c_int)),] )

gdk_keymap_map_virtual_modifiers = _rpythonic_function_(		"gdk_keymap_map_virtual_modifiers", ctypes.c_int, [
	("keymap",		ctypes.POINTER(_GdkKeymap)),
	("state",		ctypes.POINTER(ctypes.c_int)),] )

gdk_keyval_name = _rpythonic_function_(		"gdk_keyval_name", ctypes.POINTER(ctypes.c_char), [
	("keyval",		ctypes.c_uint),] )

gdk_keyval_from_name = _rpythonic_function_(		"gdk_keyval_from_name", ctypes.c_uint, [
	("keyval_name",		ctypes.POINTER(ctypes.c_char)),] )

gdk_keyval_convert_case = _rpythonic_function_(		"gdk_keyval_convert_case", ctypes.c_void_p, [
	("symbol",		ctypes.c_uint),
	("lower",		ctypes.POINTER(ctypes.c_uint)),
	("upper",		ctypes.POINTER(ctypes.c_uint)),] )

gdk_keyval_to_upper = _rpythonic_function_(		"gdk_keyval_to_upper", ctypes.c_uint, [
	("keyval",		ctypes.c_uint),] )

gdk_keyval_to_lower = _rpythonic_function_(		"gdk_keyval_to_lower", ctypes.c_uint, [
	("keyval",		ctypes.c_uint),] )

gdk_keyval_is_upper = _rpythonic_function_(		"gdk_keyval_is_upper", ctypes.c_int, [
	("keyval",		ctypes.c_uint),] )

gdk_keyval_is_lower = _rpythonic_function_(		"gdk_keyval_is_lower", ctypes.c_int, [
	("keyval",		ctypes.c_uint),] )

gdk_keyval_to_unicode = _rpythonic_function_(		"gdk_keyval_to_unicode", ctypes.c_uint, [
	("keyval",		ctypes.c_uint),] )

gdk_unicode_to_keyval = _rpythonic_function_(		"gdk_unicode_to_keyval", ctypes.c_uint, [
	("wc",		ctypes.c_uint),] )

gdk_parse_args = _rpythonic_function_(		"gdk_parse_args", ctypes.c_void_p, [
	("argc",		ctypes.POINTER(ctypes.c_int)),
	("argv",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(ctypes.c_char)))),] )

gdk_init = _rpythonic_function_(		"gdk_init", ctypes.c_void_p, [
	("argc",		ctypes.POINTER(ctypes.c_int)),
	("argv",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(ctypes.c_char)))),] )

gdk_init_check = _rpythonic_function_(		"gdk_init_check", ctypes.c_int, [
	("argc",		ctypes.POINTER(ctypes.c_int)),
	("argv",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(ctypes.c_char)))),] )

gdk_add_option_entries_libgtk_only = _rpythonic_function_(		"gdk_add_option_entries_libgtk_only", ctypes.c_void_p, [
	("group",		ctypes.POINTER(_GOptionGroup)),] )

gdk_pre_parse_libgtk_only = _rpythonic_function_(		"gdk_pre_parse_libgtk_only", ctypes.c_void_p, [] )

gdk_get_program_class = _rpythonic_function_(		"gdk_get_program_class", ctypes.POINTER(ctypes.c_char), [] )

gdk_set_program_class = _rpythonic_function_(		"gdk_set_program_class", ctypes.c_void_p, [
	("program_class",		ctypes.POINTER(ctypes.c_char)),] )

gdk_notify_startup_complete = _rpythonic_function_(		"gdk_notify_startup_complete", ctypes.c_void_p, [] )

gdk_notify_startup_complete_with_id = _rpythonic_function_(		"gdk_notify_startup_complete_with_id", ctypes.c_void_p, [
	("startup_id",		ctypes.POINTER(ctypes.c_char)),] )

gdk_error_trap_push = _rpythonic_function_(		"gdk_error_trap_push", ctypes.c_void_p, [] )

gdk_error_trap_pop_ignored = _rpythonic_function_(		"gdk_error_trap_pop_ignored", ctypes.c_void_p, [] )

gdk_get_display_arg_name = _rpythonic_function_(		"gdk_get_display_arg_name", ctypes.POINTER(ctypes.c_char), [] )

gdk_get_display = _rpythonic_function_(		"gdk_get_display", ctypes.POINTER(ctypes.c_char), [] )

gdk_pointer_grab = _rpythonic_function_(		"gdk_pointer_grab", ctypes.c_int, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("owner_events",		ctypes.c_int),
	("event_mask",		ctypes.c_int),
	("confine_to",		ctypes.POINTER(_GdkWindow)),
	("cursor",		ctypes.POINTER(_GdkCursor)),
	("time_",		ctypes.c_uint),] )

gdk_keyboard_grab = _rpythonic_function_(		"gdk_keyboard_grab", ctypes.c_int, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("owner_events",		ctypes.c_int),
	("time_",		ctypes.c_uint),] )

gdk_pointer_ungrab = _rpythonic_function_(		"gdk_pointer_ungrab", ctypes.c_void_p, [
	("time_",		ctypes.c_uint),] )

gdk_keyboard_ungrab = _rpythonic_function_(		"gdk_keyboard_ungrab", ctypes.c_void_p, [
	("time_",		ctypes.c_uint),] )

gdk_pointer_is_grabbed = _rpythonic_function_(		"gdk_pointer_is_grabbed", ctypes.c_int, [] )

gdk_screen_width = _rpythonic_function_(		"gdk_screen_width", ctypes.c_int, [] )

gdk_screen_height = _rpythonic_function_(		"gdk_screen_height", ctypes.c_int, [] )

gdk_screen_width_mm = _rpythonic_function_(		"gdk_screen_width_mm", ctypes.c_int, [] )

gdk_screen_height_mm = _rpythonic_function_(		"gdk_screen_height_mm", ctypes.c_int, [] )

gdk_set_double_click_time = _rpythonic_function_(		"gdk_set_double_click_time", ctypes.c_void_p, [
	("msec",		ctypes.c_uint),] )

gdk_beep = _rpythonic_function_(		"gdk_beep", ctypes.c_void_p, [] )

gdk_flush = _rpythonic_function_(		"gdk_flush", ctypes.c_void_p, [] )

gdk_disable_multidevice = _rpythonic_function_(		"gdk_disable_multidevice", ctypes.c_void_p, [] )

gdk_pango_context_get_for_screen = _rpythonic_function_(		"gdk_pango_context_get_for_screen", ctypes.POINTER(_PangoContext), [
	("screen",		ctypes.POINTER(_GdkScreen)),] )

gdk_pango_context_get = _rpythonic_function_(		"gdk_pango_context_get", ctypes.POINTER(_PangoContext), [] )

gdk_pango_layout_line_get_clip_region = _rpythonic_function_(		"gdk_pango_layout_line_get_clip_region", ctypes.POINTER(_cairo_region), [
	("line",		ctypes.POINTER(_PangoLayoutLine)),
	("x_origin",		ctypes.c_int),
	("y_origin",		ctypes.c_int),
	("index_ranges",		ctypes.POINTER(ctypes.c_int)),
	("n_ranges",		ctypes.c_int),] )

gdk_pango_layout_get_clip_region = _rpythonic_function_(		"gdk_pango_layout_get_clip_region", ctypes.POINTER(_cairo_region), [
	("layout",		ctypes.POINTER(_PangoLayout)),
	("x_origin",		ctypes.c_int),
	("y_origin",		ctypes.c_int),
	("index_ranges",		ctypes.POINTER(ctypes.c_int)),
	("n_ranges",		ctypes.c_int),] )

gdk_atom_intern = _rpythonic_function_(		"gdk_atom_intern", ctypes.POINTER(_GdkAtom), [
	("atom_name",		ctypes.POINTER(ctypes.c_char)),
	("only_if_exists",		ctypes.c_int),] )

gdk_atom_intern_static_string = _rpythonic_function_(		"gdk_atom_intern_static_string", ctypes.POINTER(_GdkAtom), [
	("atom_name",		ctypes.POINTER(ctypes.c_char)),] )

gdk_atom_name = _rpythonic_function_(		"gdk_atom_name", ctypes.POINTER(ctypes.c_char), [
	("atom",		ctypes.POINTER(_GdkAtom)),] )

gdk_property_get = _rpythonic_function_(		"gdk_property_get", ctypes.c_int, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("property",		ctypes.POINTER(_GdkAtom)),
	("C_type",		ctypes.POINTER(_GdkAtom)),
	("offset",		ctypes.c_ulong),
	("length",		ctypes.c_ulong),
	("pdelete",		ctypes.c_int),
	("actual_property_type",		ctypes.POINTER(ctypes.POINTER(_GdkAtom))),
	("actual_format",		ctypes.POINTER(ctypes.c_int)),
	("actual_length",		ctypes.POINTER(ctypes.c_int)),
	("data",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),] )

gdk_property_change = _rpythonic_function_(		"gdk_property_change", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("property",		ctypes.POINTER(_GdkAtom)),
	("C_type",		ctypes.POINTER(_GdkAtom)),
	("format",		ctypes.c_int),
	("mode",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_ubyte)),
	("nelements",		ctypes.c_int),] )

gdk_property_delete = _rpythonic_function_(		"gdk_property_delete", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("property",		ctypes.POINTER(_GdkAtom)),] )

gdk_text_property_to_utf8_list_for_display = _rpythonic_function_(		"gdk_text_property_to_utf8_list_for_display", ctypes.c_int, [
	("display",		ctypes.POINTER(_GdkDisplay)),
	("encoding",		ctypes.POINTER(_GdkAtom)),
	("format",		ctypes.c_int),
	("text",		ctypes.POINTER(ctypes.c_ubyte)),
	("length",		ctypes.c_int),
	("C_list",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(ctypes.c_char)))),] )

gdk_utf8_to_string_target = _rpythonic_function_(		"gdk_utf8_to_string_target", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

gdk_rectangle_intersect = _rpythonic_function_(		"gdk_rectangle_intersect", ctypes.c_int, [
	("src1",		ctypes.POINTER(_cairo_rectangle_int)),
	("src2",		ctypes.POINTER(_cairo_rectangle_int)),
	("dest",		ctypes.POINTER(_cairo_rectangle_int)),] )

gdk_rectangle_union = _rpythonic_function_(		"gdk_rectangle_union", ctypes.c_void_p, [
	("src1",		ctypes.POINTER(_cairo_rectangle_int)),
	("src2",		ctypes.POINTER(_cairo_rectangle_int)),
	("dest",		ctypes.POINTER(_cairo_rectangle_int)),] )

gdk_rectangle_get_type = _rpythonic_function_(		"gdk_rectangle_get_type", ctypes.c_uint, [] )

gdk_selection_owner_set = _rpythonic_function_(		"gdk_selection_owner_set", ctypes.c_int, [
	("owner",		ctypes.POINTER(_GdkWindow)),
	("selection",		ctypes.POINTER(_GdkAtom)),
	("time_",		ctypes.c_uint),
	("send_event",		ctypes.c_int),] )

gdk_selection_owner_get = _rpythonic_function_(		"gdk_selection_owner_get", ctypes.POINTER(_GdkWindow), [
	("selection",		ctypes.POINTER(_GdkAtom)),] )

gdk_selection_owner_set_for_display = _rpythonic_function_(		"gdk_selection_owner_set_for_display", ctypes.c_int, [
	("display",		ctypes.POINTER(_GdkDisplay)),
	("owner",		ctypes.POINTER(_GdkWindow)),
	("selection",		ctypes.POINTER(_GdkAtom)),
	("time_",		ctypes.c_uint),
	("send_event",		ctypes.c_int),] )

gdk_selection_owner_get_for_display = _rpythonic_function_(		"gdk_selection_owner_get_for_display", ctypes.POINTER(_GdkWindow), [
	("display",		ctypes.POINTER(_GdkDisplay)),
	("selection",		ctypes.POINTER(_GdkAtom)),] )

gdk_selection_convert = _rpythonic_function_(		"gdk_selection_convert", ctypes.c_void_p, [
	("requestor",		ctypes.POINTER(_GdkWindow)),
	("selection",		ctypes.POINTER(_GdkAtom)),
	("target",		ctypes.POINTER(_GdkAtom)),
	("time_",		ctypes.c_uint),] )

gdk_selection_property_get = _rpythonic_function_(		"gdk_selection_property_get", ctypes.c_int, [
	("requestor",		ctypes.POINTER(_GdkWindow)),
	("data",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("prop_type",		ctypes.POINTER(ctypes.POINTER(_GdkAtom))),
	("prop_format",		ctypes.POINTER(ctypes.c_int)),] )

gdk_selection_send_notify = _rpythonic_function_(		"gdk_selection_send_notify", ctypes.c_void_p, [
	("requestor",		ctypes.POINTER(_GdkWindow)),
	("selection",		ctypes.POINTER(_GdkAtom)),
	("target",		ctypes.POINTER(_GdkAtom)),
	("property",		ctypes.POINTER(_GdkAtom)),
	("time_",		ctypes.c_uint),] )

gdk_selection_send_notify_for_display = _rpythonic_function_(		"gdk_selection_send_notify_for_display", ctypes.c_void_p, [
	("display",		ctypes.POINTER(_GdkDisplay)),
	("requestor",		ctypes.POINTER(_GdkWindow)),
	("selection",		ctypes.POINTER(_GdkAtom)),
	("target",		ctypes.POINTER(_GdkAtom)),
	("property",		ctypes.POINTER(_GdkAtom)),
	("time_",		ctypes.c_uint),] )

pick_embedded_child = _rpythonic_function_(		"pick_embedded_child", ctypes.POINTER(_GdkWindow), [
	("window",		ctypes.POINTER(_GdkWindow)),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),] )

to_embedder = _rpythonic_function_(		"to_embedder", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("offscreen_x",		ctypes.c_double),
	("offscreen_y",		ctypes.c_double),
	("embedder_x",		ctypes.POINTER(ctypes.c_double)),
	("embedder_y",		ctypes.POINTER(ctypes.c_double)),] )

from_embedder = _rpythonic_function_(		"from_embedder", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("embedder_x",		ctypes.c_double),
	("embedder_y",		ctypes.c_double),
	("offscreen_x",		ctypes.POINTER(ctypes.c_double)),
	("offscreen_y",		ctypes.POINTER(ctypes.c_double)),] )

create_surface = _rpythonic_function_(		"create_surface", ctypes.POINTER(_cairo_surface), [
	("window",		ctypes.POINTER(_GdkWindow)),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

_gdk_reserved1 = _rpythonic_function_(		"_gdk_reserved1", ctypes.c_void_p, [] )

_gdk_reserved2 = _rpythonic_function_(		"_gdk_reserved2", ctypes.c_void_p, [] )

_gdk_reserved3 = _rpythonic_function_(		"_gdk_reserved3", ctypes.c_void_p, [] )

_gdk_reserved4 = _rpythonic_function_(		"_gdk_reserved4", ctypes.c_void_p, [] )

_gdk_reserved5 = _rpythonic_function_(		"_gdk_reserved5", ctypes.c_void_p, [] )

_gdk_reserved6 = _rpythonic_function_(		"_gdk_reserved6", ctypes.c_void_p, [] )

_gdk_reserved7 = _rpythonic_function_(		"_gdk_reserved7", ctypes.c_void_p, [] )

_gdk_reserved8 = _rpythonic_function_(		"_gdk_reserved8", ctypes.c_void_p, [] )

gdk_window_new = _rpythonic_function_(		"gdk_window_new", ctypes.POINTER(_GdkWindow), [
	("parent",		ctypes.POINTER(_GdkWindow)),
	("attributes",		ctypes.POINTER(_GdkWindowAttr)),
	("attributes_mask",		ctypes.c_int),] )

gdk_window_get_type = _rpythonic_function_(		"gdk_window_get_type", ctypes.c_uint, [] )

gdk_window_destroy = _rpythonic_function_(		"gdk_window_destroy", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_get_window_type = _rpythonic_function_(		"gdk_window_get_window_type", ctypes.c_int, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_is_destroyed = _rpythonic_function_(		"gdk_window_is_destroyed", ctypes.c_int, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_get_visual = _rpythonic_function_(		"gdk_window_get_visual", ctypes.POINTER(_GdkVisual), [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_get_screen = _rpythonic_function_(		"gdk_window_get_screen", ctypes.POINTER(_GdkScreen), [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_get_display = _rpythonic_function_(		"gdk_window_get_display", ctypes.POINTER(_GdkDisplay), [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_at_pointer = _rpythonic_function_(		"gdk_window_at_pointer", ctypes.POINTER(_GdkWindow), [
	("win_x",		ctypes.POINTER(ctypes.c_int)),
	("win_y",		ctypes.POINTER(ctypes.c_int)),] )

gdk_window_show = _rpythonic_function_(		"gdk_window_show", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_hide = _rpythonic_function_(		"gdk_window_hide", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_withdraw = _rpythonic_function_(		"gdk_window_withdraw", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_show_unraised = _rpythonic_function_(		"gdk_window_show_unraised", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_move = _rpythonic_function_(		"gdk_window_move", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

gdk_window_resize = _rpythonic_function_(		"gdk_window_resize", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

gdk_window_move_resize = _rpythonic_function_(		"gdk_window_move_resize", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

gdk_window_reparent = _rpythonic_function_(		"gdk_window_reparent", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("new_parent",		ctypes.POINTER(_GdkWindow)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

gdk_window_raise = _rpythonic_function_(		"gdk_window_raise", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_lower = _rpythonic_function_(		"gdk_window_lower", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_restack = _rpythonic_function_(		"gdk_window_restack", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("sibling",		ctypes.POINTER(_GdkWindow)),
	("above",		ctypes.c_int),] )

gdk_window_focus = _rpythonic_function_(		"gdk_window_focus", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("timestamp",		ctypes.c_uint),] )

gdk_window_set_user_data = _rpythonic_function_(		"gdk_window_set_user_data", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gdk_window_set_override_redirect = _rpythonic_function_(		"gdk_window_set_override_redirect", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("override_redirect",		ctypes.c_int),] )

gdk_window_get_accept_focus = _rpythonic_function_(		"gdk_window_get_accept_focus", ctypes.c_int, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_set_accept_focus = _rpythonic_function_(		"gdk_window_set_accept_focus", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("accept_focus",		ctypes.c_int),] )

gdk_window_get_focus_on_map = _rpythonic_function_(		"gdk_window_get_focus_on_map", ctypes.c_int, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_set_focus_on_map = _rpythonic_function_(		"gdk_window_set_focus_on_map", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("focus_on_map",		ctypes.c_int),] )

gdk_window_add_filter = _rpythonic_function_(		"gdk_window_add_filter", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("function",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GdkEvent),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

gdk_window_remove_filter = _rpythonic_function_(		"gdk_window_remove_filter", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("function",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GdkEvent),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

gdk_window_scroll = _rpythonic_function_(		"gdk_window_scroll", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("dx",		ctypes.c_int),
	("dy",		ctypes.c_int),] )

gdk_window_move_region = _rpythonic_function_(		"gdk_window_move_region", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("region",		ctypes.POINTER(_cairo_region)),
	("dx",		ctypes.c_int),
	("dy",		ctypes.c_int),] )

gdk_window_ensure_native = _rpythonic_function_(		"gdk_window_ensure_native", ctypes.c_int, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_shape_combine_region = _rpythonic_function_(		"gdk_window_shape_combine_region", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("shape_region",		ctypes.POINTER(_cairo_region)),
	("offset_x",		ctypes.c_int),
	("offset_y",		ctypes.c_int),] )

gdk_window_set_child_shapes = _rpythonic_function_(		"gdk_window_set_child_shapes", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_get_composited = _rpythonic_function_(		"gdk_window_get_composited", ctypes.c_int, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_set_composited = _rpythonic_function_(		"gdk_window_set_composited", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("composited",		ctypes.c_int),] )

gdk_window_merge_child_shapes = _rpythonic_function_(		"gdk_window_merge_child_shapes", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_input_shape_combine_region = _rpythonic_function_(		"gdk_window_input_shape_combine_region", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("shape_region",		ctypes.POINTER(_cairo_region)),
	("offset_x",		ctypes.c_int),
	("offset_y",		ctypes.c_int),] )

gdk_window_set_child_input_shapes = _rpythonic_function_(		"gdk_window_set_child_input_shapes", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_merge_child_input_shapes = _rpythonic_function_(		"gdk_window_merge_child_input_shapes", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_is_visible = _rpythonic_function_(		"gdk_window_is_visible", ctypes.c_int, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_is_viewable = _rpythonic_function_(		"gdk_window_is_viewable", ctypes.c_int, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_is_input_only = _rpythonic_function_(		"gdk_window_is_input_only", ctypes.c_int, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_is_shaped = _rpythonic_function_(		"gdk_window_is_shaped", ctypes.c_int, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_get_state = _rpythonic_function_(		"gdk_window_get_state", ctypes.c_int, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_set_static_gravities = _rpythonic_function_(		"gdk_window_set_static_gravities", ctypes.c_int, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("use_static",		ctypes.c_int),] )

gdk_window_has_native = _rpythonic_function_(		"gdk_window_has_native", ctypes.c_int, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_set_type_hint = _rpythonic_function_(		"gdk_window_set_type_hint", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("hint",		ctypes.c_int),] )

gdk_window_get_type_hint = _rpythonic_function_(		"gdk_window_get_type_hint", ctypes.c_int, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_get_modal_hint = _rpythonic_function_(		"gdk_window_get_modal_hint", ctypes.c_int, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_set_modal_hint = _rpythonic_function_(		"gdk_window_set_modal_hint", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("modal",		ctypes.c_int),] )

gdk_window_set_skip_taskbar_hint = _rpythonic_function_(		"gdk_window_set_skip_taskbar_hint", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("skips_taskbar",		ctypes.c_int),] )

gdk_window_set_skip_pager_hint = _rpythonic_function_(		"gdk_window_set_skip_pager_hint", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("skips_pager",		ctypes.c_int),] )

gdk_window_set_urgency_hint = _rpythonic_function_(		"gdk_window_set_urgency_hint", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("urgent",		ctypes.c_int),] )

gdk_window_set_geometry_hints = _rpythonic_function_(		"gdk_window_set_geometry_hints", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("geometry",		ctypes.POINTER(_GdkGeometry)),
	("geom_mask",		ctypes.c_int),] )

gdk_window_get_clip_region = _rpythonic_function_(		"gdk_window_get_clip_region", ctypes.POINTER(_cairo_region), [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_get_visible_region = _rpythonic_function_(		"gdk_window_get_visible_region", ctypes.POINTER(_cairo_region), [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_begin_paint_rect = _rpythonic_function_(		"gdk_window_begin_paint_rect", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("rectangle",		ctypes.POINTER(_cairo_rectangle_int)),] )

gdk_window_begin_paint_region = _rpythonic_function_(		"gdk_window_begin_paint_region", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("region",		ctypes.POINTER(_cairo_region)),] )

gdk_window_end_paint = _rpythonic_function_(		"gdk_window_end_paint", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_flush = _rpythonic_function_(		"gdk_window_flush", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_set_title = _rpythonic_function_(		"gdk_window_set_title", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("title",		ctypes.POINTER(ctypes.c_char)),] )

gdk_window_set_role = _rpythonic_function_(		"gdk_window_set_role", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("role",		ctypes.POINTER(ctypes.c_char)),] )

gdk_window_set_startup_id = _rpythonic_function_(		"gdk_window_set_startup_id", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("startup_id",		ctypes.POINTER(ctypes.c_char)),] )

gdk_window_set_transient_for = _rpythonic_function_(		"gdk_window_set_transient_for", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("parent",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_set_background = _rpythonic_function_(		"gdk_window_set_background", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("color",		ctypes.POINTER(_GdkColor)),] )

gdk_window_set_background_rgba = _rpythonic_function_(		"gdk_window_set_background_rgba", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("rgba",		ctypes.POINTER(_GdkRGBA)),] )

gdk_window_set_background_pattern = _rpythonic_function_(		"gdk_window_set_background_pattern", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("pattern",		ctypes.POINTER(_cairo_pattern)),] )

gdk_window_get_background_pattern = _rpythonic_function_(		"gdk_window_get_background_pattern", ctypes.POINTER(_cairo_pattern), [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_set_cursor = _rpythonic_function_(		"gdk_window_set_cursor", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("cursor",		ctypes.POINTER(_GdkCursor)),] )

gdk_window_get_cursor = _rpythonic_function_(		"gdk_window_get_cursor", ctypes.POINTER(_GdkCursor), [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_set_device_cursor = _rpythonic_function_(		"gdk_window_set_device_cursor", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("device",		ctypes.POINTER(_GdkDevice)),
	("cursor",		ctypes.POINTER(_GdkCursor)),] )

gdk_window_get_device_cursor = _rpythonic_function_(		"gdk_window_get_device_cursor", ctypes.POINTER(_GdkCursor), [
	("window",		ctypes.POINTER(_GdkWindow)),
	("device",		ctypes.POINTER(_GdkDevice)),] )

gdk_window_get_user_data = _rpythonic_function_(		"gdk_window_get_user_data", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("data",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

gdk_window_get_geometry = _rpythonic_function_(		"gdk_window_get_geometry", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("x",		ctypes.POINTER(ctypes.c_int)),
	("y",		ctypes.POINTER(ctypes.c_int)),
	("width",		ctypes.POINTER(ctypes.c_int)),
	("height",		ctypes.POINTER(ctypes.c_int)),] )

gdk_window_get_width = _rpythonic_function_(		"gdk_window_get_width", ctypes.c_int, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_get_height = _rpythonic_function_(		"gdk_window_get_height", ctypes.c_int, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_get_position = _rpythonic_function_(		"gdk_window_get_position", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("x",		ctypes.POINTER(ctypes.c_int)),
	("y",		ctypes.POINTER(ctypes.c_int)),] )

gdk_window_get_origin = _rpythonic_function_(		"gdk_window_get_origin", ctypes.c_int, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("x",		ctypes.POINTER(ctypes.c_int)),
	("y",		ctypes.POINTER(ctypes.c_int)),] )

gdk_window_get_root_coords = _rpythonic_function_(		"gdk_window_get_root_coords", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("root_x",		ctypes.POINTER(ctypes.c_int)),
	("root_y",		ctypes.POINTER(ctypes.c_int)),] )

gdk_window_coords_to_parent = _rpythonic_function_(		"gdk_window_coords_to_parent", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("parent_x",		ctypes.POINTER(ctypes.c_double)),
	("parent_y",		ctypes.POINTER(ctypes.c_double)),] )

gdk_window_coords_from_parent = _rpythonic_function_(		"gdk_window_coords_from_parent", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("parent_x",		ctypes.c_double),
	("parent_y",		ctypes.c_double),
	("x",		ctypes.POINTER(ctypes.c_double)),
	("y",		ctypes.POINTER(ctypes.c_double)),] )

gdk_window_get_root_origin = _rpythonic_function_(		"gdk_window_get_root_origin", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("x",		ctypes.POINTER(ctypes.c_int)),
	("y",		ctypes.POINTER(ctypes.c_int)),] )

gdk_window_get_frame_extents = _rpythonic_function_(		"gdk_window_get_frame_extents", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("rect",		ctypes.POINTER(_cairo_rectangle_int)),] )

gdk_window_get_pointer = _rpythonic_function_(		"gdk_window_get_pointer", ctypes.POINTER(_GdkWindow), [
	("window",		ctypes.POINTER(_GdkWindow)),
	("x",		ctypes.POINTER(ctypes.c_int)),
	("y",		ctypes.POINTER(ctypes.c_int)),
	("mask",		ctypes.POINTER(ctypes.c_int)),] )

gdk_window_get_device_position = _rpythonic_function_(		"gdk_window_get_device_position", ctypes.POINTER(_GdkWindow), [
	("window",		ctypes.POINTER(_GdkWindow)),
	("device",		ctypes.POINTER(_GdkDevice)),
	("x",		ctypes.POINTER(ctypes.c_int)),
	("y",		ctypes.POINTER(ctypes.c_int)),
	("mask",		ctypes.POINTER(ctypes.c_int)),] )

gdk_window_get_parent = _rpythonic_function_(		"gdk_window_get_parent", ctypes.POINTER(_GdkWindow), [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_get_toplevel = _rpythonic_function_(		"gdk_window_get_toplevel", ctypes.POINTER(_GdkWindow), [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_get_effective_parent = _rpythonic_function_(		"gdk_window_get_effective_parent", ctypes.POINTER(_GdkWindow), [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_get_effective_toplevel = _rpythonic_function_(		"gdk_window_get_effective_toplevel", ctypes.POINTER(_GdkWindow), [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_get_children = _rpythonic_function_(		"gdk_window_get_children", ctypes.POINTER(_GList), [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_peek_children = _rpythonic_function_(		"gdk_window_peek_children", ctypes.POINTER(_GList), [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_get_events = _rpythonic_function_(		"gdk_window_get_events", ctypes.c_int, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_set_events = _rpythonic_function_(		"gdk_window_set_events", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("event_mask",		ctypes.c_int),] )

gdk_window_set_device_events = _rpythonic_function_(		"gdk_window_set_device_events", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("device",		ctypes.POINTER(_GdkDevice)),
	("event_mask",		ctypes.c_int),] )

gdk_window_get_device_events = _rpythonic_function_(		"gdk_window_get_device_events", ctypes.c_int, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("device",		ctypes.POINTER(_GdkDevice)),] )

gdk_window_set_source_events = _rpythonic_function_(		"gdk_window_set_source_events", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("source",		ctypes.c_int),
	("event_mask",		ctypes.c_int),] )

gdk_window_get_source_events = _rpythonic_function_(		"gdk_window_get_source_events", ctypes.c_int, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("source",		ctypes.c_int),] )

gdk_window_set_icon_list = _rpythonic_function_(		"gdk_window_set_icon_list", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("pixbufs",		ctypes.POINTER(_GList)),] )

gdk_window_set_icon_name = _rpythonic_function_(		"gdk_window_set_icon_name", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gdk_window_set_group = _rpythonic_function_(		"gdk_window_set_group", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("leader",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_get_group = _rpythonic_function_(		"gdk_window_get_group", ctypes.POINTER(_GdkWindow), [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_set_decorations = _rpythonic_function_(		"gdk_window_set_decorations", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("decorations",		ctypes.c_int),] )

gdk_window_get_decorations = _rpythonic_function_(		"gdk_window_get_decorations", ctypes.c_int, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("decorations",		ctypes.POINTER(ctypes.c_int)),] )

gdk_window_set_functions = _rpythonic_function_(		"gdk_window_set_functions", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("functions",		ctypes.c_int),] )

gdk_window_create_similar_surface = _rpythonic_function_(		"gdk_window_create_similar_surface", ctypes.POINTER(_cairo_surface), [
	("window",		ctypes.POINTER(_GdkWindow)),
	("content",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

gdk_window_beep = _rpythonic_function_(		"gdk_window_beep", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_iconify = _rpythonic_function_(		"gdk_window_iconify", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_deiconify = _rpythonic_function_(		"gdk_window_deiconify", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_stick = _rpythonic_function_(		"gdk_window_stick", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_unstick = _rpythonic_function_(		"gdk_window_unstick", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_maximize = _rpythonic_function_(		"gdk_window_maximize", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_unmaximize = _rpythonic_function_(		"gdk_window_unmaximize", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_fullscreen = _rpythonic_function_(		"gdk_window_fullscreen", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_unfullscreen = _rpythonic_function_(		"gdk_window_unfullscreen", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_set_keep_above = _rpythonic_function_(		"gdk_window_set_keep_above", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("setting",		ctypes.c_int),] )

gdk_window_set_keep_below = _rpythonic_function_(		"gdk_window_set_keep_below", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("setting",		ctypes.c_int),] )

gdk_window_set_opacity = _rpythonic_function_(		"gdk_window_set_opacity", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("opacity",		ctypes.c_double),] )

gdk_window_register_dnd = _rpythonic_function_(		"gdk_window_register_dnd", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_get_drag_protocol = _rpythonic_function_(		"gdk_window_get_drag_protocol", ctypes.c_int, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("target",		ctypes.POINTER(ctypes.POINTER(_GdkWindow))),] )

gdk_window_begin_resize_drag = _rpythonic_function_(		"gdk_window_begin_resize_drag", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("edge",		ctypes.c_int),
	("button",		ctypes.c_int),
	("root_x",		ctypes.c_int),
	("root_y",		ctypes.c_int),
	("timestamp",		ctypes.c_uint),] )

gdk_window_begin_move_drag = _rpythonic_function_(		"gdk_window_begin_move_drag", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("button",		ctypes.c_int),
	("root_x",		ctypes.c_int),
	("root_y",		ctypes.c_int),
	("timestamp",		ctypes.c_uint),] )

gdk_window_invalidate_rect = _rpythonic_function_(		"gdk_window_invalidate_rect", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("rect",		ctypes.POINTER(_cairo_rectangle_int)),
	("invalidate_children",		ctypes.c_int),] )

gdk_window_invalidate_region = _rpythonic_function_(		"gdk_window_invalidate_region", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("region",		ctypes.POINTER(_cairo_region)),
	("invalidate_children",		ctypes.c_int),] )

GdkWindowChildFunc = _rpythonic_function_(		"GdkWindowChildFunc", ctypes.c_int, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gdk_window_invalidate_maybe_recurse = _rpythonic_function_(		"gdk_window_invalidate_maybe_recurse", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("region",		ctypes.POINTER(_cairo_region)),
	("child_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GdkWindow),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gdk_window_get_update_area = _rpythonic_function_(		"gdk_window_get_update_area", ctypes.POINTER(_cairo_region), [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_freeze_updates = _rpythonic_function_(		"gdk_window_freeze_updates", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_thaw_updates = _rpythonic_function_(		"gdk_window_thaw_updates", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_freeze_toplevel_updates_libgtk_only = _rpythonic_function_(		"gdk_window_freeze_toplevel_updates_libgtk_only", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_thaw_toplevel_updates_libgtk_only = _rpythonic_function_(		"gdk_window_thaw_toplevel_updates_libgtk_only", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_process_all_updates = _rpythonic_function_(		"gdk_window_process_all_updates", ctypes.c_void_p, [] )

gdk_window_process_updates = _rpythonic_function_(		"gdk_window_process_updates", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("update_children",		ctypes.c_int),] )

gdk_window_set_debug_updates = _rpythonic_function_(		"gdk_window_set_debug_updates", ctypes.c_void_p, [
	("setting",		ctypes.c_int),] )

gdk_window_constrain_size = _rpythonic_function_(		"gdk_window_constrain_size", ctypes.c_void_p, [
	("geometry",		ctypes.POINTER(_GdkGeometry)),
	("flags",		ctypes.c_uint),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("new_width",		ctypes.POINTER(ctypes.c_int)),
	("new_height",		ctypes.POINTER(ctypes.c_int)),] )

gdk_window_enable_synchronized_configure = _rpythonic_function_(		"gdk_window_enable_synchronized_configure", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_configure_finished = _rpythonic_function_(		"gdk_window_configure_finished", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_get_default_root_window = _rpythonic_function_(		"gdk_get_default_root_window", ctypes.POINTER(_GdkWindow), [] )

gdk_offscreen_window_get_surface = _rpythonic_function_(		"gdk_offscreen_window_get_surface", ctypes.POINTER(_cairo_surface), [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_offscreen_window_set_embedder = _rpythonic_function_(		"gdk_offscreen_window_set_embedder", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("embedder",		ctypes.POINTER(_GdkWindow)),] )

gdk_offscreen_window_get_embedder = _rpythonic_function_(		"gdk_offscreen_window_get_embedder", ctypes.POINTER(_GdkWindow), [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_geometry_changed = _rpythonic_function_(		"gdk_window_geometry_changed", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_window_set_support_multidevice = _rpythonic_function_(		"gdk_window_set_support_multidevice", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("support_multidevice",		ctypes.c_int),] )

gdk_window_get_support_multidevice = _rpythonic_function_(		"gdk_window_get_support_multidevice", ctypes.c_int, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_test_render_sync = _rpythonic_function_(		"gdk_test_render_sync", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GdkWindow)),] )

gdk_test_simulate_key = _rpythonic_function_(		"gdk_test_simulate_key", ctypes.c_int, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("keyval",		ctypes.c_uint),
	("modifiers",		ctypes.c_int),
	("key_pressrelease",		ctypes.c_int),] )

gdk_test_simulate_button = _rpythonic_function_(		"gdk_test_simulate_button", ctypes.c_int, [
	("window",		ctypes.POINTER(_GdkWindow)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("button",		ctypes.c_uint),
	("modifiers",		ctypes.c_int),
	("button_pressrelease",		ctypes.c_int),] )

gdk_threads_init = _rpythonic_function_(		"gdk_threads_init", ctypes.c_void_p, [] )

gdk_threads_enter = _rpythonic_function_(		"gdk_threads_enter", ctypes.c_void_p, [] )

gdk_threads_leave = _rpythonic_function_(		"gdk_threads_leave", ctypes.c_void_p, [] )

gdk_threads_set_lock_functions = _rpythonic_function_(		"gdk_threads_set_lock_functions", ctypes.c_void_p, [
	("enter_fn",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("leave_fn",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

gdk_threads_add_idle_full = _rpythonic_function_(		"gdk_threads_add_idle_full", ctypes.c_uint, [
	("priority",		ctypes.c_int),
	("function",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

gdk_threads_add_idle = _rpythonic_function_(		"gdk_threads_add_idle", ctypes.c_uint, [
	("function",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

gdk_threads_add_timeout_full = _rpythonic_function_(		"gdk_threads_add_timeout_full", ctypes.c_uint, [
	("priority",		ctypes.c_int),
	("interval",		ctypes.c_uint),
	("function",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

gdk_threads_add_timeout = _rpythonic_function_(		"gdk_threads_add_timeout", ctypes.c_uint, [
	("interval",		ctypes.c_uint),
	("function",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

gdk_threads_add_timeout_seconds_full = _rpythonic_function_(		"gdk_threads_add_timeout_seconds_full", ctypes.c_uint, [
	("priority",		ctypes.c_int),
	("interval",		ctypes.c_uint),
	("function",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

gdk_threads_add_timeout_seconds = _rpythonic_function_(		"gdk_threads_add_timeout_seconds", ctypes.c_uint, [
	("interval",		ctypes.c_uint),
	("function",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

gdk_visual_get_type = _rpythonic_function_(		"gdk_visual_get_type", ctypes.c_uint, [] )

gdk_visual_get_best_depth = _rpythonic_function_(		"gdk_visual_get_best_depth", ctypes.c_int, [] )

gdk_visual_get_best_type = _rpythonic_function_(		"gdk_visual_get_best_type", ctypes.c_int, [] )

gdk_visual_get_system = _rpythonic_function_(		"gdk_visual_get_system", ctypes.POINTER(_GdkVisual), [] )

gdk_visual_get_best = _rpythonic_function_(		"gdk_visual_get_best", ctypes.POINTER(_GdkVisual), [] )

gdk_visual_get_best_with_depth = _rpythonic_function_(		"gdk_visual_get_best_with_depth", ctypes.POINTER(_GdkVisual), [
	("depth",		ctypes.c_int),] )

gdk_visual_get_best_with_type = _rpythonic_function_(		"gdk_visual_get_best_with_type", ctypes.POINTER(_GdkVisual), [
	("visual_type",		ctypes.c_int),] )

gdk_visual_get_best_with_both = _rpythonic_function_(		"gdk_visual_get_best_with_both", ctypes.POINTER(_GdkVisual), [
	("depth",		ctypes.c_int),
	("visual_type",		ctypes.c_int),] )

gdk_query_depths = _rpythonic_function_(		"gdk_query_depths", ctypes.c_void_p, [
	("depths",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("count",		ctypes.POINTER(ctypes.c_int)),] )

gdk_query_visual_types = _rpythonic_function_(		"gdk_query_visual_types", ctypes.c_void_p, [
	("visual_types",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("count",		ctypes.POINTER(ctypes.c_int)),] )

gdk_list_visuals = _rpythonic_function_(		"gdk_list_visuals", ctypes.POINTER(_GList), [] )

gdk_visual_get_screen = _rpythonic_function_(		"gdk_visual_get_screen", ctypes.POINTER(_GdkScreen), [
	("visual",		ctypes.POINTER(_GdkVisual)),] )

gdk_visual_get_visual_type = _rpythonic_function_(		"gdk_visual_get_visual_type", ctypes.c_int, [
	("visual",		ctypes.POINTER(_GdkVisual)),] )

gdk_visual_get_depth = _rpythonic_function_(		"gdk_visual_get_depth", ctypes.c_int, [
	("visual",		ctypes.POINTER(_GdkVisual)),] )

gdk_visual_get_byte_order = _rpythonic_function_(		"gdk_visual_get_byte_order", ctypes.c_int, [
	("visual",		ctypes.POINTER(_GdkVisual)),] )

gdk_visual_get_colormap_size = _rpythonic_function_(		"gdk_visual_get_colormap_size", ctypes.c_int, [
	("visual",		ctypes.POINTER(_GdkVisual)),] )

gdk_visual_get_bits_per_rgb = _rpythonic_function_(		"gdk_visual_get_bits_per_rgb", ctypes.c_int, [
	("visual",		ctypes.POINTER(_GdkVisual)),] )

gdk_visual_get_red_pixel_details = _rpythonic_function_(		"gdk_visual_get_red_pixel_details", ctypes.c_void_p, [
	("visual",		ctypes.POINTER(_GdkVisual)),
	("mask",		ctypes.POINTER(ctypes.c_uint)),
	("shift",		ctypes.POINTER(ctypes.c_int)),
	("precision",		ctypes.POINTER(ctypes.c_int)),] )

gdk_visual_get_green_pixel_details = _rpythonic_function_(		"gdk_visual_get_green_pixel_details", ctypes.c_void_p, [
	("visual",		ctypes.POINTER(_GdkVisual)),
	("mask",		ctypes.POINTER(ctypes.c_uint)),
	("shift",		ctypes.POINTER(ctypes.c_int)),
	("precision",		ctypes.POINTER(ctypes.c_int)),] )

gdk_visual_get_blue_pixel_details = _rpythonic_function_(		"gdk_visual_get_blue_pixel_details", ctypes.c_void_p, [
	("visual",		ctypes.POINTER(_GdkVisual)),
	("mask",		ctypes.POINTER(ctypes.c_uint)),
	("shift",		ctypes.POINTER(ctypes.c_int)),
	("precision",		ctypes.POINTER(ctypes.c_int)),] )

GtkAccelGroupActivate = _rpythonic_function_(		"GtkAccelGroupActivate", ctypes.c_int, [
	("accel_group",		ctypes.POINTER(_GtkAccelGroup)),
	("acceleratable",		ctypes.POINTER(_GObject)),
	("keyval",		ctypes.c_uint),
	("modifier",		ctypes.c_int),] )

GtkAccelGroupFindFunc = _rpythonic_function_(		"GtkAccelGroupFindFunc", ctypes.c_int, [
	("key",		ctypes.POINTER(_GtkAccelKey)),
	("closure",		ctypes.POINTER(_GClosure)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

accel_changed = _rpythonic_function_(		"accel_changed", ctypes.c_void_p, [
	("accel_group",		ctypes.POINTER(_GtkAccelGroup)),
	("keyval",		ctypes.c_uint),
	("modifier",		ctypes.c_int),
	("accel_closure",		ctypes.POINTER(_GClosure)),] )

_gtk_reserved1 = _rpythonic_function_(		"_gtk_reserved1", ctypes.c_void_p, [] )

_gtk_reserved2 = _rpythonic_function_(		"_gtk_reserved2", ctypes.c_void_p, [] )

_gtk_reserved3 = _rpythonic_function_(		"_gtk_reserved3", ctypes.c_void_p, [] )

_gtk_reserved4 = _rpythonic_function_(		"_gtk_reserved4", ctypes.c_void_p, [] )

gtk_accel_group_get_type = _rpythonic_function_(		"gtk_accel_group_get_type", ctypes.c_uint, [] )

gtk_accel_group_new = _rpythonic_function_(		"gtk_accel_group_new", ctypes.POINTER(_GtkAccelGroup), [] )

gtk_accel_group_get_is_locked = _rpythonic_function_(		"gtk_accel_group_get_is_locked", ctypes.c_int, [
	("accel_group",		ctypes.POINTER(_GtkAccelGroup)),] )

gtk_accel_group_get_modifier_mask = _rpythonic_function_(		"gtk_accel_group_get_modifier_mask", ctypes.c_int, [
	("accel_group",		ctypes.POINTER(_GtkAccelGroup)),] )

gtk_accel_group_lock = _rpythonic_function_(		"gtk_accel_group_lock", ctypes.c_void_p, [
	("accel_group",		ctypes.POINTER(_GtkAccelGroup)),] )

gtk_accel_group_unlock = _rpythonic_function_(		"gtk_accel_group_unlock", ctypes.c_void_p, [
	("accel_group",		ctypes.POINTER(_GtkAccelGroup)),] )

gtk_accel_group_connect = _rpythonic_function_(		"gtk_accel_group_connect", ctypes.c_void_p, [
	("accel_group",		ctypes.POINTER(_GtkAccelGroup)),
	("accel_key",		ctypes.c_uint),
	("accel_mods",		ctypes.c_int),
	("accel_flags",		ctypes.c_int),
	("closure",		ctypes.POINTER(_GClosure)),] )

gtk_accel_group_connect_by_path = _rpythonic_function_(		"gtk_accel_group_connect_by_path", ctypes.c_void_p, [
	("accel_group",		ctypes.POINTER(_GtkAccelGroup)),
	("accel_path",		ctypes.POINTER(ctypes.c_char)),
	("closure",		ctypes.POINTER(_GClosure)),] )

gtk_accel_group_disconnect = _rpythonic_function_(		"gtk_accel_group_disconnect", ctypes.c_int, [
	("accel_group",		ctypes.POINTER(_GtkAccelGroup)),
	("closure",		ctypes.POINTER(_GClosure)),] )

gtk_accel_group_disconnect_key = _rpythonic_function_(		"gtk_accel_group_disconnect_key", ctypes.c_int, [
	("accel_group",		ctypes.POINTER(_GtkAccelGroup)),
	("accel_key",		ctypes.c_uint),
	("accel_mods",		ctypes.c_int),] )

gtk_accel_group_activate = _rpythonic_function_(		"gtk_accel_group_activate", ctypes.c_int, [
	("accel_group",		ctypes.POINTER(_GtkAccelGroup)),
	("accel_quark",		ctypes.c_uint),
	("acceleratable",		ctypes.POINTER(_GObject)),
	("accel_key",		ctypes.c_uint),
	("accel_mods",		ctypes.c_int),] )

_gtk_accel_group_attach = _rpythonic_function_(		"_gtk_accel_group_attach", ctypes.c_void_p, [
	("accel_group",		ctypes.POINTER(_GtkAccelGroup)),
	("C_object",		ctypes.POINTER(_GObject)),] )

_gtk_accel_group_detach = _rpythonic_function_(		"_gtk_accel_group_detach", ctypes.c_void_p, [
	("accel_group",		ctypes.POINTER(_GtkAccelGroup)),
	("C_object",		ctypes.POINTER(_GObject)),] )

gtk_accel_groups_activate = _rpythonic_function_(		"gtk_accel_groups_activate", ctypes.c_int, [
	("C_object",		ctypes.POINTER(_GObject)),
	("accel_key",		ctypes.c_uint),
	("accel_mods",		ctypes.c_int),] )

gtk_accel_groups_from_object = _rpythonic_function_(		"gtk_accel_groups_from_object", ctypes.POINTER(_GSList), [
	("C_object",		ctypes.POINTER(_GObject)),] )

gtk_accel_group_find = _rpythonic_function_(		"gtk_accel_group_find", ctypes.POINTER(_GtkAccelKey), [
	("accel_group",		ctypes.POINTER(_GtkAccelGroup)),
	("find_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GtkAccelKey),ctypes.POINTER(_GClosure),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

gtk_accel_group_from_accel_closure = _rpythonic_function_(		"gtk_accel_group_from_accel_closure", ctypes.POINTER(_GtkAccelGroup), [
	("closure",		ctypes.POINTER(_GClosure)),] )

gtk_accelerator_valid = _rpythonic_function_(		"gtk_accelerator_valid", ctypes.c_int, [
	("keyval",		ctypes.c_uint),
	("modifiers",		ctypes.c_int),] )

gtk_accelerator_parse = _rpythonic_function_(		"gtk_accelerator_parse", ctypes.c_void_p, [
	("accelerator",		ctypes.POINTER(ctypes.c_char)),
	("accelerator_key",		ctypes.POINTER(ctypes.c_uint)),
	("accelerator_mods",		ctypes.POINTER(ctypes.c_int)),] )

gtk_accelerator_name = _rpythonic_function_(		"gtk_accelerator_name", ctypes.POINTER(ctypes.c_char), [
	("accelerator_key",		ctypes.c_uint),
	("accelerator_mods",		ctypes.c_int),] )

gtk_accelerator_get_label = _rpythonic_function_(		"gtk_accelerator_get_label", ctypes.POINTER(ctypes.c_char), [
	("accelerator_key",		ctypes.c_uint),
	("accelerator_mods",		ctypes.c_int),] )

gtk_accelerator_set_default_mod_mask = _rpythonic_function_(		"gtk_accelerator_set_default_mod_mask", ctypes.c_void_p, [
	("default_mod_mask",		ctypes.c_int),] )

gtk_accelerator_get_default_mod_mask = _rpythonic_function_(		"gtk_accelerator_get_default_mod_mask", ctypes.c_int, [] )

gtk_accel_group_query = _rpythonic_function_(		"gtk_accel_group_query", ctypes.POINTER(_GtkAccelGroupEntry), [
	("accel_group",		ctypes.POINTER(_GtkAccelGroup)),
	("accel_key",		ctypes.c_uint),
	("accel_mods",		ctypes.c_int),
	("n_entries",		ctypes.POINTER(ctypes.c_uint)),] )

_gtk_accel_group_reconnect = _rpythonic_function_(		"_gtk_accel_group_reconnect", ctypes.c_void_p, [
	("accel_group",		ctypes.POINTER(_GtkAccelGroup)),
	("accel_path_quark",		ctypes.c_uint),] )

_gtk_accel_group_get_accelerables = _rpythonic_function_(		"_gtk_accel_group_get_accelerables", ctypes.POINTER(_GSList), [
	("accel_group",		ctypes.POINTER(_GtkAccelGroup)),] )

value_changed = _rpythonic_function_(		"value_changed", ctypes.c_void_p, [
	("adjustment",		ctypes.POINTER(_GtkAdjustment)),] )

gtk_adjustment_get_type = _rpythonic_function_(		"gtk_adjustment_get_type", ctypes.c_uint, [] )

gtk_adjustment_new = _rpythonic_function_(		"gtk_adjustment_new", ctypes.POINTER(_GtkAdjustment), [
	("value",		ctypes.c_double),
	("lower",		ctypes.c_double),
	("upper",		ctypes.c_double),
	("step_increment",		ctypes.c_double),
	("page_increment",		ctypes.c_double),
	("page_size",		ctypes.c_double),] )

gtk_adjustment_changed = _rpythonic_function_(		"gtk_adjustment_changed", ctypes.c_void_p, [
	("adjustment",		ctypes.POINTER(_GtkAdjustment)),] )

gtk_adjustment_value_changed = _rpythonic_function_(		"gtk_adjustment_value_changed", ctypes.c_void_p, [
	("adjustment",		ctypes.POINTER(_GtkAdjustment)),] )

gtk_adjustment_clamp_page = _rpythonic_function_(		"gtk_adjustment_clamp_page", ctypes.c_void_p, [
	("adjustment",		ctypes.POINTER(_GtkAdjustment)),
	("lower",		ctypes.c_double),
	("upper",		ctypes.c_double),] )

gtk_adjustment_get_value = _rpythonic_function_(		"gtk_adjustment_get_value", ctypes.c_double, [
	("adjustment",		ctypes.POINTER(_GtkAdjustment)),] )

gtk_adjustment_set_value = _rpythonic_function_(		"gtk_adjustment_set_value", ctypes.c_void_p, [
	("adjustment",		ctypes.POINTER(_GtkAdjustment)),
	("value",		ctypes.c_double),] )

gtk_adjustment_get_lower = _rpythonic_function_(		"gtk_adjustment_get_lower", ctypes.c_double, [
	("adjustment",		ctypes.POINTER(_GtkAdjustment)),] )

gtk_adjustment_set_lower = _rpythonic_function_(		"gtk_adjustment_set_lower", ctypes.c_void_p, [
	("adjustment",		ctypes.POINTER(_GtkAdjustment)),
	("lower",		ctypes.c_double),] )

gtk_adjustment_get_upper = _rpythonic_function_(		"gtk_adjustment_get_upper", ctypes.c_double, [
	("adjustment",		ctypes.POINTER(_GtkAdjustment)),] )

gtk_adjustment_set_upper = _rpythonic_function_(		"gtk_adjustment_set_upper", ctypes.c_void_p, [
	("adjustment",		ctypes.POINTER(_GtkAdjustment)),
	("upper",		ctypes.c_double),] )

gtk_adjustment_get_step_increment = _rpythonic_function_(		"gtk_adjustment_get_step_increment", ctypes.c_double, [
	("adjustment",		ctypes.POINTER(_GtkAdjustment)),] )

gtk_adjustment_set_step_increment = _rpythonic_function_(		"gtk_adjustment_set_step_increment", ctypes.c_void_p, [
	("adjustment",		ctypes.POINTER(_GtkAdjustment)),
	("step_increment",		ctypes.c_double),] )

gtk_adjustment_get_page_increment = _rpythonic_function_(		"gtk_adjustment_get_page_increment", ctypes.c_double, [
	("adjustment",		ctypes.POINTER(_GtkAdjustment)),] )

gtk_adjustment_set_page_increment = _rpythonic_function_(		"gtk_adjustment_set_page_increment", ctypes.c_void_p, [
	("adjustment",		ctypes.POINTER(_GtkAdjustment)),
	("page_increment",		ctypes.c_double),] )

gtk_adjustment_get_page_size = _rpythonic_function_(		"gtk_adjustment_get_page_size", ctypes.c_double, [
	("adjustment",		ctypes.POINTER(_GtkAdjustment)),] )

gtk_adjustment_set_page_size = _rpythonic_function_(		"gtk_adjustment_set_page_size", ctypes.c_void_p, [
	("adjustment",		ctypes.POINTER(_GtkAdjustment)),
	("page_size",		ctypes.c_double),] )

gtk_adjustment_configure = _rpythonic_function_(		"gtk_adjustment_configure", ctypes.c_void_p, [
	("adjustment",		ctypes.POINTER(_GtkAdjustment)),
	("value",		ctypes.c_double),
	("lower",		ctypes.c_double),
	("upper",		ctypes.c_double),
	("step_increment",		ctypes.c_double),
	("page_increment",		ctypes.c_double),
	("page_size",		ctypes.c_double),] )

gtk_adjustment_get_minimum_increment = _rpythonic_function_(		"gtk_adjustment_get_minimum_increment", ctypes.c_double, [
	("adjustment",		ctypes.POINTER(_GtkAdjustment)),] )

gtk_widget_path_get_type = _rpythonic_function_(		"gtk_widget_path_get_type", ctypes.c_uint, [] )

gtk_widget_path_new = _rpythonic_function_(		"gtk_widget_path_new", ctypes.POINTER(_GtkWidgetPath), [] )

gtk_widget_path_copy = _rpythonic_function_(		"gtk_widget_path_copy", ctypes.POINTER(_GtkWidgetPath), [
	("path",		ctypes.POINTER(_GtkWidgetPath)),] )

gtk_widget_path_ref = _rpythonic_function_(		"gtk_widget_path_ref", ctypes.POINTER(_GtkWidgetPath), [
	("path",		ctypes.POINTER(_GtkWidgetPath)),] )

gtk_widget_path_unref = _rpythonic_function_(		"gtk_widget_path_unref", ctypes.c_void_p, [
	("path",		ctypes.POINTER(_GtkWidgetPath)),] )

gtk_widget_path_free = _rpythonic_function_(		"gtk_widget_path_free", ctypes.c_void_p, [
	("path",		ctypes.POINTER(_GtkWidgetPath)),] )

gtk_widget_path_to_string = _rpythonic_function_(		"gtk_widget_path_to_string", ctypes.POINTER(ctypes.c_char), [
	("path",		ctypes.POINTER(_GtkWidgetPath)),] )

gtk_widget_path_length = _rpythonic_function_(		"gtk_widget_path_length", ctypes.c_int, [
	("path",		ctypes.POINTER(_GtkWidgetPath)),] )

gtk_widget_path_append_type = _rpythonic_function_(		"gtk_widget_path_append_type", ctypes.c_int, [
	("path",		ctypes.POINTER(_GtkWidgetPath)),
	("C_type",		ctypes.c_uint),] )

gtk_widget_path_prepend_type = _rpythonic_function_(		"gtk_widget_path_prepend_type", ctypes.c_void_p, [
	("path",		ctypes.POINTER(_GtkWidgetPath)),
	("C_type",		ctypes.c_uint),] )

gtk_widget_path_append_with_siblings = _rpythonic_function_(		"gtk_widget_path_append_with_siblings", ctypes.c_int, [
	("path",		ctypes.POINTER(_GtkWidgetPath)),
	("siblings",		ctypes.POINTER(_GtkWidgetPath)),
	("sibling_index",		ctypes.c_uint),] )

gtk_widget_path_append_for_widget = _rpythonic_function_(		"gtk_widget_path_append_for_widget", ctypes.c_int, [
	("path",		ctypes.POINTER(_GtkWidgetPath)),
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_path_iter_get_object_type = _rpythonic_function_(		"gtk_widget_path_iter_get_object_type", ctypes.c_uint, [
	("path",		ctypes.POINTER(_GtkWidgetPath)),
	("pos",		ctypes.c_int),] )

gtk_widget_path_iter_set_object_type = _rpythonic_function_(		"gtk_widget_path_iter_set_object_type", ctypes.c_void_p, [
	("path",		ctypes.POINTER(_GtkWidgetPath)),
	("pos",		ctypes.c_int),
	("C_type",		ctypes.c_uint),] )

gtk_widget_path_iter_get_siblings = _rpythonic_function_(		"gtk_widget_path_iter_get_siblings", ctypes.POINTER(_GtkWidgetPath), [
	("path",		ctypes.POINTER(_GtkWidgetPath)),
	("pos",		ctypes.c_int),] )

gtk_widget_path_iter_get_sibling_index = _rpythonic_function_(		"gtk_widget_path_iter_get_sibling_index", ctypes.c_uint, [
	("path",		ctypes.POINTER(_GtkWidgetPath)),
	("pos",		ctypes.c_int),] )

gtk_widget_path_iter_get_name = _rpythonic_function_(		"gtk_widget_path_iter_get_name", ctypes.POINTER(ctypes.c_char), [
	("path",		ctypes.POINTER(_GtkWidgetPath)),
	("pos",		ctypes.c_int),] )

gtk_widget_path_iter_set_name = _rpythonic_function_(		"gtk_widget_path_iter_set_name", ctypes.c_void_p, [
	("path",		ctypes.POINTER(_GtkWidgetPath)),
	("pos",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_widget_path_iter_has_name = _rpythonic_function_(		"gtk_widget_path_iter_has_name", ctypes.c_int, [
	("path",		ctypes.POINTER(_GtkWidgetPath)),
	("pos",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_widget_path_iter_has_qname = _rpythonic_function_(		"gtk_widget_path_iter_has_qname", ctypes.c_int, [
	("path",		ctypes.POINTER(_GtkWidgetPath)),
	("pos",		ctypes.c_int),
	("qname",		ctypes.c_uint),] )

gtk_widget_path_iter_add_class = _rpythonic_function_(		"gtk_widget_path_iter_add_class", ctypes.c_void_p, [
	("path",		ctypes.POINTER(_GtkWidgetPath)),
	("pos",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_widget_path_iter_remove_class = _rpythonic_function_(		"gtk_widget_path_iter_remove_class", ctypes.c_void_p, [
	("path",		ctypes.POINTER(_GtkWidgetPath)),
	("pos",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_widget_path_iter_clear_classes = _rpythonic_function_(		"gtk_widget_path_iter_clear_classes", ctypes.c_void_p, [
	("path",		ctypes.POINTER(_GtkWidgetPath)),
	("pos",		ctypes.c_int),] )

gtk_widget_path_iter_list_classes = _rpythonic_function_(		"gtk_widget_path_iter_list_classes", ctypes.POINTER(_GSList), [
	("path",		ctypes.POINTER(_GtkWidgetPath)),
	("pos",		ctypes.c_int),] )

gtk_widget_path_iter_has_class = _rpythonic_function_(		"gtk_widget_path_iter_has_class", ctypes.c_int, [
	("path",		ctypes.POINTER(_GtkWidgetPath)),
	("pos",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_widget_path_iter_has_qclass = _rpythonic_function_(		"gtk_widget_path_iter_has_qclass", ctypes.c_int, [
	("path",		ctypes.POINTER(_GtkWidgetPath)),
	("pos",		ctypes.c_int),
	("qname",		ctypes.c_uint),] )

gtk_widget_path_iter_add_region = _rpythonic_function_(		"gtk_widget_path_iter_add_region", ctypes.c_void_p, [
	("path",		ctypes.POINTER(_GtkWidgetPath)),
	("pos",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),] )

gtk_widget_path_iter_remove_region = _rpythonic_function_(		"gtk_widget_path_iter_remove_region", ctypes.c_void_p, [
	("path",		ctypes.POINTER(_GtkWidgetPath)),
	("pos",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_widget_path_iter_clear_regions = _rpythonic_function_(		"gtk_widget_path_iter_clear_regions", ctypes.c_void_p, [
	("path",		ctypes.POINTER(_GtkWidgetPath)),
	("pos",		ctypes.c_int),] )

gtk_widget_path_iter_list_regions = _rpythonic_function_(		"gtk_widget_path_iter_list_regions", ctypes.POINTER(_GSList), [
	("path",		ctypes.POINTER(_GtkWidgetPath)),
	("pos",		ctypes.c_int),] )

gtk_widget_path_iter_has_region = _rpythonic_function_(		"gtk_widget_path_iter_has_region", ctypes.c_int, [
	("path",		ctypes.POINTER(_GtkWidgetPath)),
	("pos",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.POINTER(ctypes.c_int)),] )

gtk_widget_path_iter_has_qregion = _rpythonic_function_(		"gtk_widget_path_iter_has_qregion", ctypes.c_int, [
	("path",		ctypes.POINTER(_GtkWidgetPath)),
	("pos",		ctypes.c_int),
	("qname",		ctypes.c_uint),
	("flags",		ctypes.POINTER(ctypes.c_int)),] )

gtk_widget_path_get_object_type = _rpythonic_function_(		"gtk_widget_path_get_object_type", ctypes.c_uint, [
	("path",		ctypes.POINTER(_GtkWidgetPath)),] )

gtk_widget_path_is_type = _rpythonic_function_(		"gtk_widget_path_is_type", ctypes.c_int, [
	("path",		ctypes.POINTER(_GtkWidgetPath)),
	("C_type",		ctypes.c_uint),] )

gtk_widget_path_has_parent = _rpythonic_function_(		"gtk_widget_path_has_parent", ctypes.c_int, [
	("path",		ctypes.POINTER(_GtkWidgetPath)),
	("C_type",		ctypes.c_uint),] )

GtkRcPropertyParser = _rpythonic_function_(		"GtkRcPropertyParser", ctypes.c_int, [
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("rc_string",		ctypes.POINTER(_GString)),
	("property_value",		ctypes.POINTER(_GValue)),] )

realize = _rpythonic_function_(		"realize", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),] )

unrealize = _rpythonic_function_(		"unrealize", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),] )

clone = _rpythonic_function_(		"clone", ctypes.POINTER(_GtkStyle), [
	("style",		ctypes.POINTER(_GtkStyle)),] )

init_from_rc = _rpythonic_function_(		"init_from_rc", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),
	("rc_style",		ctypes.POINTER(_GtkRcStyle)),] )

set_background = _rpythonic_function_(		"set_background", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),
	("window",		ctypes.POINTER(_GdkWindow)),
	("state_type",		ctypes.c_int),] )

render_icon = _rpythonic_function_(		"render_icon", ctypes.POINTER(_GdkPixbuf), [
	("style",		ctypes.POINTER(_GtkStyle)),
	("source",		ctypes.POINTER(_GtkIconSource)),
	("direction",		ctypes.c_int),
	("state",		ctypes.c_int),
	("size",		ctypes.c_int),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("detail",		ctypes.POINTER(ctypes.c_char)),] )

draw_hline = _rpythonic_function_(		"draw_hline", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),
	("cr",		ctypes.POINTER(_cairo)),
	("state_type",		ctypes.c_int),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("detail",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("x2",		ctypes.c_int),
	("y",		ctypes.c_int),] )

draw_vline = _rpythonic_function_(		"draw_vline", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),
	("cr",		ctypes.POINTER(_cairo)),
	("state_type",		ctypes.c_int),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("detail",		ctypes.POINTER(ctypes.c_char)),
	("y1_",		ctypes.c_int),
	("y2_",		ctypes.c_int),
	("x",		ctypes.c_int),] )

draw_shadow = _rpythonic_function_(		"draw_shadow", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),
	("cr",		ctypes.POINTER(_cairo)),
	("state_type",		ctypes.c_int),
	("shadow_type",		ctypes.c_int),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("detail",		ctypes.POINTER(ctypes.c_char)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

draw_arrow = _rpythonic_function_(		"draw_arrow", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),
	("cr",		ctypes.POINTER(_cairo)),
	("state_type",		ctypes.c_int),
	("shadow_type",		ctypes.c_int),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("detail",		ctypes.POINTER(ctypes.c_char)),
	("arrow_type",		ctypes.c_int),
	("fill",		ctypes.c_int),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

draw_box = _rpythonic_function_(		"draw_box", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),
	("cr",		ctypes.POINTER(_cairo)),
	("state_type",		ctypes.c_int),
	("shadow_type",		ctypes.c_int),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("detail",		ctypes.POINTER(ctypes.c_char)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

draw_diamond = _rpythonic_function_(		"draw_diamond", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),
	("cr",		ctypes.POINTER(_cairo)),
	("state_type",		ctypes.c_int),
	("shadow_type",		ctypes.c_int),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("detail",		ctypes.POINTER(ctypes.c_char)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

draw_flat_box = _rpythonic_function_(		"draw_flat_box", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),
	("cr",		ctypes.POINTER(_cairo)),
	("state_type",		ctypes.c_int),
	("shadow_type",		ctypes.c_int),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("detail",		ctypes.POINTER(ctypes.c_char)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

draw_option = _rpythonic_function_(		"draw_option", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),
	("cr",		ctypes.POINTER(_cairo)),
	("state_type",		ctypes.c_int),
	("shadow_type",		ctypes.c_int),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("detail",		ctypes.POINTER(ctypes.c_char)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

draw_check = _rpythonic_function_(		"draw_check", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),
	("cr",		ctypes.POINTER(_cairo)),
	("state_type",		ctypes.c_int),
	("shadow_type",		ctypes.c_int),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("detail",		ctypes.POINTER(ctypes.c_char)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

draw_tab = _rpythonic_function_(		"draw_tab", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),
	("cr",		ctypes.POINTER(_cairo)),
	("state_type",		ctypes.c_int),
	("shadow_type",		ctypes.c_int),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("detail",		ctypes.POINTER(ctypes.c_char)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

draw_box_gap = _rpythonic_function_(		"draw_box_gap", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),
	("cr",		ctypes.POINTER(_cairo)),
	("state_type",		ctypes.c_int),
	("shadow_type",		ctypes.c_int),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("detail",		ctypes.POINTER(ctypes.c_char)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("gap_side",		ctypes.c_int),
	("gap_x",		ctypes.c_int),
	("gap_width",		ctypes.c_int),] )

draw_shadow_gap = _rpythonic_function_(		"draw_shadow_gap", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),
	("cr",		ctypes.POINTER(_cairo)),
	("state_type",		ctypes.c_int),
	("shadow_type",		ctypes.c_int),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("detail",		ctypes.POINTER(ctypes.c_char)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("gap_side",		ctypes.c_int),
	("gap_x",		ctypes.c_int),
	("gap_width",		ctypes.c_int),] )

draw_extension = _rpythonic_function_(		"draw_extension", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),
	("cr",		ctypes.POINTER(_cairo)),
	("state_type",		ctypes.c_int),
	("shadow_type",		ctypes.c_int),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("detail",		ctypes.POINTER(ctypes.c_char)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("gap_side",		ctypes.c_int),] )

draw_focus = _rpythonic_function_(		"draw_focus", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),
	("cr",		ctypes.POINTER(_cairo)),
	("state_type",		ctypes.c_int),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("detail",		ctypes.POINTER(ctypes.c_char)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

draw_slider = _rpythonic_function_(		"draw_slider", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),
	("cr",		ctypes.POINTER(_cairo)),
	("state_type",		ctypes.c_int),
	("shadow_type",		ctypes.c_int),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("detail",		ctypes.POINTER(ctypes.c_char)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("orientation",		ctypes.c_int),] )

draw_handle = _rpythonic_function_(		"draw_handle", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),
	("cr",		ctypes.POINTER(_cairo)),
	("state_type",		ctypes.c_int),
	("shadow_type",		ctypes.c_int),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("detail",		ctypes.POINTER(ctypes.c_char)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("orientation",		ctypes.c_int),] )

draw_expander = _rpythonic_function_(		"draw_expander", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),
	("cr",		ctypes.POINTER(_cairo)),
	("state_type",		ctypes.c_int),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("detail",		ctypes.POINTER(ctypes.c_char)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("expander_style",		ctypes.c_int),] )

draw_layout = _rpythonic_function_(		"draw_layout", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),
	("cr",		ctypes.POINTER(_cairo)),
	("state_type",		ctypes.c_int),
	("use_text",		ctypes.c_int),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("detail",		ctypes.POINTER(ctypes.c_char)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("layout",		ctypes.POINTER(_PangoLayout)),] )

draw_resize_grip = _rpythonic_function_(		"draw_resize_grip", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),
	("cr",		ctypes.POINTER(_cairo)),
	("state_type",		ctypes.c_int),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("detail",		ctypes.POINTER(ctypes.c_char)),
	("edge",		ctypes.c_int),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

draw_spinner = _rpythonic_function_(		"draw_spinner", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),
	("cr",		ctypes.POINTER(_cairo)),
	("state_type",		ctypes.c_int),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("detail",		ctypes.POINTER(ctypes.c_char)),
	("step",		ctypes.c_uint),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

_gtk_reserved5 = _rpythonic_function_(		"_gtk_reserved5", ctypes.c_void_p, [] )

_gtk_reserved6 = _rpythonic_function_(		"_gtk_reserved6", ctypes.c_void_p, [] )

_gtk_reserved7 = _rpythonic_function_(		"_gtk_reserved7", ctypes.c_void_p, [] )

_gtk_reserved8 = _rpythonic_function_(		"_gtk_reserved8", ctypes.c_void_p, [] )

_gtk_reserved9 = _rpythonic_function_(		"_gtk_reserved9", ctypes.c_void_p, [] )

_gtk_reserved10 = _rpythonic_function_(		"_gtk_reserved10", ctypes.c_void_p, [] )

_gtk_reserved11 = _rpythonic_function_(		"_gtk_reserved11", ctypes.c_void_p, [] )

gtk_style_get_type = _rpythonic_function_(		"gtk_style_get_type", ctypes.c_uint, [] )

gtk_style_new = _rpythonic_function_(		"gtk_style_new", ctypes.POINTER(_GtkStyle), [] )

gtk_style_copy = _rpythonic_function_(		"gtk_style_copy", ctypes.POINTER(_GtkStyle), [
	("style",		ctypes.POINTER(_GtkStyle)),] )

gtk_style_attach = _rpythonic_function_(		"gtk_style_attach", ctypes.POINTER(_GtkStyle), [
	("style",		ctypes.POINTER(_GtkStyle)),
	("window",		ctypes.POINTER(_GdkWindow)),] )

gtk_style_detach = _rpythonic_function_(		"gtk_style_detach", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),] )

gtk_style_set_background = _rpythonic_function_(		"gtk_style_set_background", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),
	("window",		ctypes.POINTER(_GdkWindow)),
	("state_type",		ctypes.c_int),] )

gtk_style_apply_default_background = _rpythonic_function_(		"gtk_style_apply_default_background", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),
	("cr",		ctypes.POINTER(_cairo)),
	("window",		ctypes.POINTER(_GdkWindow)),
	("state_type",		ctypes.c_int),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

gtk_style_lookup_icon_set = _rpythonic_function_(		"gtk_style_lookup_icon_set", ctypes.POINTER(_GtkIconSet), [
	("style",		ctypes.POINTER(_GtkStyle)),
	("stock_id",		ctypes.POINTER(ctypes.c_char)),] )

gtk_style_lookup_color = _rpythonic_function_(		"gtk_style_lookup_color", ctypes.c_int, [
	("style",		ctypes.POINTER(_GtkStyle)),
	("color_name",		ctypes.POINTER(ctypes.c_char)),
	("color",		ctypes.POINTER(_GdkColor)),] )

gtk_style_render_icon = _rpythonic_function_(		"gtk_style_render_icon", ctypes.POINTER(_GdkPixbuf), [
	("style",		ctypes.POINTER(_GtkStyle)),
	("source",		ctypes.POINTER(_GtkIconSource)),
	("direction",		ctypes.c_int),
	("state",		ctypes.c_int),
	("size",		ctypes.c_int),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("detail",		ctypes.POINTER(ctypes.c_char)),] )

gtk_paint_hline = _rpythonic_function_(		"gtk_paint_hline", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),
	("cr",		ctypes.POINTER(_cairo)),
	("state_type",		ctypes.c_int),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("detail",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("x2",		ctypes.c_int),
	("y",		ctypes.c_int),] )

gtk_paint_vline = _rpythonic_function_(		"gtk_paint_vline", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),
	("cr",		ctypes.POINTER(_cairo)),
	("state_type",		ctypes.c_int),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("detail",		ctypes.POINTER(ctypes.c_char)),
	("y1_",		ctypes.c_int),
	("y2_",		ctypes.c_int),
	("x",		ctypes.c_int),] )

gtk_paint_shadow = _rpythonic_function_(		"gtk_paint_shadow", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),
	("cr",		ctypes.POINTER(_cairo)),
	("state_type",		ctypes.c_int),
	("shadow_type",		ctypes.c_int),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("detail",		ctypes.POINTER(ctypes.c_char)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

gtk_paint_arrow = _rpythonic_function_(		"gtk_paint_arrow", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),
	("cr",		ctypes.POINTER(_cairo)),
	("state_type",		ctypes.c_int),
	("shadow_type",		ctypes.c_int),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("detail",		ctypes.POINTER(ctypes.c_char)),
	("arrow_type",		ctypes.c_int),
	("fill",		ctypes.c_int),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

gtk_paint_diamond = _rpythonic_function_(		"gtk_paint_diamond", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),
	("cr",		ctypes.POINTER(_cairo)),
	("state_type",		ctypes.c_int),
	("shadow_type",		ctypes.c_int),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("detail",		ctypes.POINTER(ctypes.c_char)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

gtk_paint_box = _rpythonic_function_(		"gtk_paint_box", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),
	("cr",		ctypes.POINTER(_cairo)),
	("state_type",		ctypes.c_int),
	("shadow_type",		ctypes.c_int),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("detail",		ctypes.POINTER(ctypes.c_char)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

gtk_paint_flat_box = _rpythonic_function_(		"gtk_paint_flat_box", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),
	("cr",		ctypes.POINTER(_cairo)),
	("state_type",		ctypes.c_int),
	("shadow_type",		ctypes.c_int),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("detail",		ctypes.POINTER(ctypes.c_char)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

gtk_paint_check = _rpythonic_function_(		"gtk_paint_check", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),
	("cr",		ctypes.POINTER(_cairo)),
	("state_type",		ctypes.c_int),
	("shadow_type",		ctypes.c_int),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("detail",		ctypes.POINTER(ctypes.c_char)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

gtk_paint_option = _rpythonic_function_(		"gtk_paint_option", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),
	("cr",		ctypes.POINTER(_cairo)),
	("state_type",		ctypes.c_int),
	("shadow_type",		ctypes.c_int),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("detail",		ctypes.POINTER(ctypes.c_char)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

gtk_paint_tab = _rpythonic_function_(		"gtk_paint_tab", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),
	("cr",		ctypes.POINTER(_cairo)),
	("state_type",		ctypes.c_int),
	("shadow_type",		ctypes.c_int),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("detail",		ctypes.POINTER(ctypes.c_char)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

gtk_paint_box_gap = _rpythonic_function_(		"gtk_paint_box_gap", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),
	("cr",		ctypes.POINTER(_cairo)),
	("state_type",		ctypes.c_int),
	("shadow_type",		ctypes.c_int),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("detail",		ctypes.POINTER(ctypes.c_char)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("gap_side",		ctypes.c_int),
	("gap_x",		ctypes.c_int),
	("gap_width",		ctypes.c_int),] )

gtk_paint_shadow_gap = _rpythonic_function_(		"gtk_paint_shadow_gap", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),
	("cr",		ctypes.POINTER(_cairo)),
	("state_type",		ctypes.c_int),
	("shadow_type",		ctypes.c_int),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("detail",		ctypes.POINTER(ctypes.c_char)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("gap_side",		ctypes.c_int),
	("gap_x",		ctypes.c_int),
	("gap_width",		ctypes.c_int),] )

gtk_paint_extension = _rpythonic_function_(		"gtk_paint_extension", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),
	("cr",		ctypes.POINTER(_cairo)),
	("state_type",		ctypes.c_int),
	("shadow_type",		ctypes.c_int),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("detail",		ctypes.POINTER(ctypes.c_char)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("gap_side",		ctypes.c_int),] )

gtk_paint_slider = _rpythonic_function_(		"gtk_paint_slider", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),
	("cr",		ctypes.POINTER(_cairo)),
	("state_type",		ctypes.c_int),
	("shadow_type",		ctypes.c_int),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("detail",		ctypes.POINTER(ctypes.c_char)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("orientation",		ctypes.c_int),] )

gtk_paint_focus = _rpythonic_function_(		"gtk_paint_focus", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),
	("cr",		ctypes.POINTER(_cairo)),
	("state_type",		ctypes.c_int),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("detail",		ctypes.POINTER(ctypes.c_char)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

gtk_paint_handle = _rpythonic_function_(		"gtk_paint_handle", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),
	("cr",		ctypes.POINTER(_cairo)),
	("state_type",		ctypes.c_int),
	("shadow_type",		ctypes.c_int),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("detail",		ctypes.POINTER(ctypes.c_char)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("orientation",		ctypes.c_int),] )

gtk_paint_expander = _rpythonic_function_(		"gtk_paint_expander", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),
	("cr",		ctypes.POINTER(_cairo)),
	("state_type",		ctypes.c_int),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("detail",		ctypes.POINTER(ctypes.c_char)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("expander_style",		ctypes.c_int),] )

gtk_paint_layout = _rpythonic_function_(		"gtk_paint_layout", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),
	("cr",		ctypes.POINTER(_cairo)),
	("state_type",		ctypes.c_int),
	("use_text",		ctypes.c_int),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("detail",		ctypes.POINTER(ctypes.c_char)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("layout",		ctypes.POINTER(_PangoLayout)),] )

gtk_paint_spinner = _rpythonic_function_(		"gtk_paint_spinner", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),
	("cr",		ctypes.POINTER(_cairo)),
	("state_type",		ctypes.c_int),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("detail",		ctypes.POINTER(ctypes.c_char)),
	("step",		ctypes.c_uint),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

gtk_paint_resize_grip = _rpythonic_function_(		"gtk_paint_resize_grip", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),
	("cr",		ctypes.POINTER(_cairo)),
	("state_type",		ctypes.c_int),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("detail",		ctypes.POINTER(ctypes.c_char)),
	("edge",		ctypes.c_int),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

gtk_style_get_style_property = _rpythonic_function_(		"gtk_style_get_style_property", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),
	("widget_type",		ctypes.c_uint),
	("property_name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(_GValue)),] )

gtk_style_get_valist = _rpythonic_function_(		"gtk_style_get_valist", ctypes.c_void_p, [
	("style",		ctypes.POINTER(_GtkStyle)),
	("widget_type",		ctypes.c_uint),
	("first_property_name",		ctypes.POINTER(ctypes.c_char)),
	("var_args",		ctypes.c_char),] )

_gtk_style_new_for_path = _rpythonic_function_(		"_gtk_style_new_for_path", ctypes.POINTER(_GtkStyle), [
	("screen",		ctypes.POINTER(_GdkScreen)),
	("path",		ctypes.POINTER(_GtkWidgetPath)),] )

_gtk_style_shade = _rpythonic_function_(		"_gtk_style_shade", ctypes.c_void_p, [
	("a",		ctypes.POINTER(_GdkColor)),
	("b",		ctypes.POINTER(_GdkColor)),
	("k",		ctypes.c_double),] )

gtk_draw_insertion_cursor = _rpythonic_function_(		"gtk_draw_insertion_cursor", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("cr",		ctypes.POINTER(_cairo)),
	("location",		ctypes.POINTER(_cairo_rectangle_int)),
	("is_primary",		ctypes.c_int),
	("direction",		ctypes.c_int),
	("draw_arrow",		ctypes.c_int),] )

gtk_style_has_context = _rpythonic_function_(		"gtk_style_has_context", ctypes.c_int, [
	("style",		ctypes.POINTER(_GtkStyle)),] )

gtk_border_get_type = _rpythonic_function_(		"gtk_border_get_type", ctypes.c_uint, [] )

gtk_border_new = _rpythonic_function_(		"gtk_border_new", ctypes.POINTER(_GtkBorder), [] )

gtk_border_copy = _rpythonic_function_(		"gtk_border_copy", ctypes.POINTER(_GtkBorder), [
	("border_",		ctypes.POINTER(_GtkBorder)),] )

gtk_border_free = _rpythonic_function_(		"gtk_border_free", ctypes.c_void_p, [
	("border_",		ctypes.POINTER(_GtkBorder)),] )

create_rc_style = _rpythonic_function_(		"create_rc_style", ctypes.POINTER(_GtkRcStyle), [
	("rc_style",		ctypes.POINTER(_GtkRcStyle)),] )

parse = _rpythonic_function_(		"parse", ctypes.c_uint, [
	("rc_style",		ctypes.POINTER(_GtkRcStyle)),
	("settings",		ctypes.POINTER(_GtkSettings)),
	("scanner",		ctypes.POINTER(_GScanner)),] )

merge = _rpythonic_function_(		"merge", ctypes.c_void_p, [
	("dest",		ctypes.POINTER(_GtkRcStyle)),
	("src",		ctypes.POINTER(_GtkRcStyle)),] )

create_style = _rpythonic_function_(		"create_style", ctypes.POINTER(_GtkStyle), [
	("rc_style",		ctypes.POINTER(_GtkRcStyle)),] )

_gtk_rc_parse_widget_class_path = _rpythonic_function_(		"_gtk_rc_parse_widget_class_path", ctypes.POINTER(_GSList), [
	("pattern",		ctypes.POINTER(ctypes.c_char)),] )

_gtk_rc_free_widget_class_path = _rpythonic_function_(		"_gtk_rc_free_widget_class_path", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GSList)),] )

_gtk_rc_match_widget_class = _rpythonic_function_(		"_gtk_rc_match_widget_class", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GSList)),
	("length",		ctypes.c_int),
	("path",		ctypes.POINTER(ctypes.c_char)),
	("path_reversed",		ctypes.POINTER(ctypes.c_char)),] )

gtk_rc_add_default_file = _rpythonic_function_(		"gtk_rc_add_default_file", ctypes.c_void_p, [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

gtk_rc_set_default_files = _rpythonic_function_(		"gtk_rc_set_default_files", ctypes.c_void_p, [
	("filenames",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

gtk_rc_get_default_files = _rpythonic_function_(		"gtk_rc_get_default_files", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [] )

gtk_rc_get_style = _rpythonic_function_(		"gtk_rc_get_style", ctypes.POINTER(_GtkStyle), [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_rc_get_style_by_paths = _rpythonic_function_(		"gtk_rc_get_style_by_paths", ctypes.POINTER(_GtkStyle), [
	("settings",		ctypes.POINTER(_GtkSettings)),
	("widget_path",		ctypes.POINTER(ctypes.c_char)),
	("class_path",		ctypes.POINTER(ctypes.c_char)),
	("C_type",		ctypes.c_uint),] )

gtk_rc_reparse_all_for_settings = _rpythonic_function_(		"gtk_rc_reparse_all_for_settings", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GtkSettings)),
	("force_load",		ctypes.c_int),] )

gtk_rc_reset_styles = _rpythonic_function_(		"gtk_rc_reset_styles", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GtkSettings)),] )

gtk_rc_find_pixmap_in_path = _rpythonic_function_(		"gtk_rc_find_pixmap_in_path", ctypes.POINTER(ctypes.c_char), [
	("settings",		ctypes.POINTER(_GtkSettings)),
	("scanner",		ctypes.POINTER(_GScanner)),
	("pixmap_file",		ctypes.POINTER(ctypes.c_char)),] )

gtk_rc_parse = _rpythonic_function_(		"gtk_rc_parse", ctypes.c_void_p, [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

gtk_rc_parse_string = _rpythonic_function_(		"gtk_rc_parse_string", ctypes.c_void_p, [
	("rc_string",		ctypes.POINTER(ctypes.c_char)),] )

gtk_rc_reparse_all = _rpythonic_function_(		"gtk_rc_reparse_all", ctypes.c_int, [] )

gtk_rc_style_get_type = _rpythonic_function_(		"gtk_rc_style_get_type", ctypes.c_uint, [] )

gtk_rc_style_new = _rpythonic_function_(		"gtk_rc_style_new", ctypes.POINTER(_GtkRcStyle), [] )

gtk_rc_style_copy = _rpythonic_function_(		"gtk_rc_style_copy", ctypes.POINTER(_GtkRcStyle), [
	("orig",		ctypes.POINTER(_GtkRcStyle)),] )

gtk_rc_find_module_in_path = _rpythonic_function_(		"gtk_rc_find_module_in_path", ctypes.POINTER(ctypes.c_char), [
	("module_file",		ctypes.POINTER(ctypes.c_char)),] )

gtk_rc_get_theme_dir = _rpythonic_function_(		"gtk_rc_get_theme_dir", ctypes.POINTER(ctypes.c_char), [] )

gtk_rc_get_module_dir = _rpythonic_function_(		"gtk_rc_get_module_dir", ctypes.POINTER(ctypes.c_char), [] )

gtk_rc_get_im_module_path = _rpythonic_function_(		"gtk_rc_get_im_module_path", ctypes.POINTER(ctypes.c_char), [] )

gtk_rc_scanner_new = _rpythonic_function_(		"gtk_rc_scanner_new", ctypes.POINTER(_GScanner), [] )

gtk_rc_get_im_module_file = _rpythonic_function_(		"gtk_rc_get_im_module_file", ctypes.POINTER(ctypes.c_char), [] )

gtk_rc_parse_color = _rpythonic_function_(		"gtk_rc_parse_color", ctypes.c_uint, [
	("scanner",		ctypes.POINTER(_GScanner)),
	("color",		ctypes.POINTER(_GdkColor)),] )

gtk_rc_parse_color_full = _rpythonic_function_(		"gtk_rc_parse_color_full", ctypes.c_uint, [
	("scanner",		ctypes.POINTER(_GScanner)),
	("style",		ctypes.POINTER(_GtkRcStyle)),
	("color",		ctypes.POINTER(_GdkColor)),] )

gtk_rc_parse_state = _rpythonic_function_(		"gtk_rc_parse_state", ctypes.c_uint, [
	("scanner",		ctypes.POINTER(_GScanner)),
	("state",		ctypes.POINTER(ctypes.c_int)),] )

gtk_rc_parse_priority = _rpythonic_function_(		"gtk_rc_parse_priority", ctypes.c_uint, [
	("scanner",		ctypes.POINTER(_GScanner)),
	("priority",		ctypes.POINTER(ctypes.c_int)),] )

gtk_settings_get_type = _rpythonic_function_(		"gtk_settings_get_type", ctypes.c_uint, [] )

gtk_settings_get_default = _rpythonic_function_(		"gtk_settings_get_default", ctypes.POINTER(_GtkSettings), [] )

gtk_settings_get_for_screen = _rpythonic_function_(		"gtk_settings_get_for_screen", ctypes.POINTER(_GtkSettings), [
	("screen",		ctypes.POINTER(_GdkScreen)),] )

gtk_settings_install_property = _rpythonic_function_(		"gtk_settings_install_property", ctypes.c_void_p, [
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

gtk_settings_install_property_parser = _rpythonic_function_(		"gtk_settings_install_property_parser", ctypes.c_void_p, [
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("parser",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GParamSpec),ctypes.POINTER(_GString),ctypes.POINTER(_GValue),)),] )

gtk_rc_property_parse_color = _rpythonic_function_(		"gtk_rc_property_parse_color", ctypes.c_int, [
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("gstring",		ctypes.POINTER(_GString)),
	("property_value",		ctypes.POINTER(_GValue)),] )

gtk_rc_property_parse_enum = _rpythonic_function_(		"gtk_rc_property_parse_enum", ctypes.c_int, [
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("gstring",		ctypes.POINTER(_GString)),
	("property_value",		ctypes.POINTER(_GValue)),] )

gtk_rc_property_parse_flags = _rpythonic_function_(		"gtk_rc_property_parse_flags", ctypes.c_int, [
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("gstring",		ctypes.POINTER(_GString)),
	("property_value",		ctypes.POINTER(_GValue)),] )

gtk_rc_property_parse_requisition = _rpythonic_function_(		"gtk_rc_property_parse_requisition", ctypes.c_int, [
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("gstring",		ctypes.POINTER(_GString)),
	("property_value",		ctypes.POINTER(_GValue)),] )

gtk_rc_property_parse_border = _rpythonic_function_(		"gtk_rc_property_parse_border", ctypes.c_int, [
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("gstring",		ctypes.POINTER(_GString)),
	("property_value",		ctypes.POINTER(_GValue)),] )

gtk_settings_set_property_value = _rpythonic_function_(		"gtk_settings_set_property_value", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GtkSettings)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("svalue",		ctypes.POINTER(_GtkSettingsValue)),] )

gtk_settings_set_string_property = _rpythonic_function_(		"gtk_settings_set_string_property", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GtkSettings)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("v_string",		ctypes.POINTER(ctypes.c_char)),
	("origin",		ctypes.POINTER(ctypes.c_char)),] )

gtk_settings_set_long_property = _rpythonic_function_(		"gtk_settings_set_long_property", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GtkSettings)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("v_long",		ctypes.c_long),
	("origin",		ctypes.POINTER(ctypes.c_char)),] )

gtk_settings_set_double_property = _rpythonic_function_(		"gtk_settings_set_double_property", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GtkSettings)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("v_double",		ctypes.c_double),
	("origin",		ctypes.POINTER(ctypes.c_char)),] )

gtk_icon_factory_get_type = _rpythonic_function_(		"gtk_icon_factory_get_type", ctypes.c_uint, [] )

gtk_icon_factory_new = _rpythonic_function_(		"gtk_icon_factory_new", ctypes.POINTER(_GtkIconFactory), [] )

gtk_icon_factory_add = _rpythonic_function_(		"gtk_icon_factory_add", ctypes.c_void_p, [
	("factory",		ctypes.POINTER(_GtkIconFactory)),
	("stock_id",		ctypes.POINTER(ctypes.c_char)),
	("icon_set",		ctypes.POINTER(_GtkIconSet)),] )

gtk_icon_factory_lookup = _rpythonic_function_(		"gtk_icon_factory_lookup", ctypes.POINTER(_GtkIconSet), [
	("factory",		ctypes.POINTER(_GtkIconFactory)),
	("stock_id",		ctypes.POINTER(ctypes.c_char)),] )

gtk_icon_factory_add_default = _rpythonic_function_(		"gtk_icon_factory_add_default", ctypes.c_void_p, [
	("factory",		ctypes.POINTER(_GtkIconFactory)),] )

gtk_icon_factory_remove_default = _rpythonic_function_(		"gtk_icon_factory_remove_default", ctypes.c_void_p, [
	("factory",		ctypes.POINTER(_GtkIconFactory)),] )

gtk_icon_factory_lookup_default = _rpythonic_function_(		"gtk_icon_factory_lookup_default", ctypes.POINTER(_GtkIconSet), [
	("stock_id",		ctypes.POINTER(ctypes.c_char)),] )

gtk_icon_size_lookup = _rpythonic_function_(		"gtk_icon_size_lookup", ctypes.c_int, [
	("size",		ctypes.c_int),
	("width",		ctypes.POINTER(ctypes.c_int)),
	("height",		ctypes.POINTER(ctypes.c_int)),] )

gtk_icon_size_lookup_for_settings = _rpythonic_function_(		"gtk_icon_size_lookup_for_settings", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GtkSettings)),
	("size",		ctypes.c_int),
	("width",		ctypes.POINTER(ctypes.c_int)),
	("height",		ctypes.POINTER(ctypes.c_int)),] )

gtk_icon_size_register = _rpythonic_function_(		"gtk_icon_size_register", ctypes.c_int, [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

gtk_icon_size_register_alias = _rpythonic_function_(		"gtk_icon_size_register_alias", ctypes.c_void_p, [
	("alias",		ctypes.POINTER(ctypes.c_char)),
	("target",		ctypes.c_int),] )

gtk_icon_size_from_name = _rpythonic_function_(		"gtk_icon_size_from_name", ctypes.c_int, [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_icon_size_get_name = _rpythonic_function_(		"gtk_icon_size_get_name", ctypes.POINTER(ctypes.c_char), [
	("size",		ctypes.c_int),] )

gtk_icon_set_get_type = _rpythonic_function_(		"gtk_icon_set_get_type", ctypes.c_uint, [] )

gtk_icon_set_new = _rpythonic_function_(		"gtk_icon_set_new", ctypes.POINTER(_GtkIconSet), [] )

gtk_icon_set_new_from_pixbuf = _rpythonic_function_(		"gtk_icon_set_new_from_pixbuf", ctypes.POINTER(_GtkIconSet), [
	("pixbuf",		ctypes.POINTER(_GdkPixbuf)),] )

gtk_icon_set_ref = _rpythonic_function_(		"gtk_icon_set_ref", ctypes.POINTER(_GtkIconSet), [
	("icon_set",		ctypes.POINTER(_GtkIconSet)),] )

gtk_icon_set_unref = _rpythonic_function_(		"gtk_icon_set_unref", ctypes.c_void_p, [
	("icon_set",		ctypes.POINTER(_GtkIconSet)),] )

gtk_icon_set_copy = _rpythonic_function_(		"gtk_icon_set_copy", ctypes.POINTER(_GtkIconSet), [
	("icon_set",		ctypes.POINTER(_GtkIconSet)),] )

gtk_icon_set_render_icon = _rpythonic_function_(		"gtk_icon_set_render_icon", ctypes.POINTER(_GdkPixbuf), [
	("icon_set",		ctypes.POINTER(_GtkIconSet)),
	("style",		ctypes.POINTER(_GtkStyle)),
	("direction",		ctypes.c_int),
	("state",		ctypes.c_int),
	("size",		ctypes.c_int),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("detail",		ctypes.POINTER(ctypes.c_char)),] )

gtk_icon_set_add_source = _rpythonic_function_(		"gtk_icon_set_add_source", ctypes.c_void_p, [
	("icon_set",		ctypes.POINTER(_GtkIconSet)),
	("source",		ctypes.POINTER(_GtkIconSource)),] )

gtk_icon_set_get_sizes = _rpythonic_function_(		"gtk_icon_set_get_sizes", ctypes.c_void_p, [
	("icon_set",		ctypes.POINTER(_GtkIconSet)),
	("sizes",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("n_sizes",		ctypes.POINTER(ctypes.c_int)),] )

gtk_icon_source_get_type = _rpythonic_function_(		"gtk_icon_source_get_type", ctypes.c_uint, [] )

gtk_icon_source_new = _rpythonic_function_(		"gtk_icon_source_new", ctypes.POINTER(_GtkIconSource), [] )

gtk_icon_source_copy = _rpythonic_function_(		"gtk_icon_source_copy", ctypes.POINTER(_GtkIconSource), [
	("source",		ctypes.POINTER(_GtkIconSource)),] )

gtk_icon_source_free = _rpythonic_function_(		"gtk_icon_source_free", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GtkIconSource)),] )

gtk_icon_source_set_filename = _rpythonic_function_(		"gtk_icon_source_set_filename", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GtkIconSource)),
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

gtk_icon_source_set_icon_name = _rpythonic_function_(		"gtk_icon_source_set_icon_name", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GtkIconSource)),
	("icon_name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_icon_source_set_pixbuf = _rpythonic_function_(		"gtk_icon_source_set_pixbuf", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GtkIconSource)),
	("pixbuf",		ctypes.POINTER(_GdkPixbuf)),] )

gtk_icon_source_get_filename = _rpythonic_function_(		"gtk_icon_source_get_filename", ctypes.POINTER(ctypes.c_char), [
	("source",		ctypes.POINTER(_GtkIconSource)),] )

gtk_icon_source_get_icon_name = _rpythonic_function_(		"gtk_icon_source_get_icon_name", ctypes.POINTER(ctypes.c_char), [
	("source",		ctypes.POINTER(_GtkIconSource)),] )

gtk_icon_source_get_pixbuf = _rpythonic_function_(		"gtk_icon_source_get_pixbuf", ctypes.POINTER(_GdkPixbuf), [
	("source",		ctypes.POINTER(_GtkIconSource)),] )

gtk_icon_source_set_direction_wildcarded = _rpythonic_function_(		"gtk_icon_source_set_direction_wildcarded", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GtkIconSource)),
	("setting",		ctypes.c_int),] )

gtk_icon_source_set_state_wildcarded = _rpythonic_function_(		"gtk_icon_source_set_state_wildcarded", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GtkIconSource)),
	("setting",		ctypes.c_int),] )

gtk_icon_source_set_size_wildcarded = _rpythonic_function_(		"gtk_icon_source_set_size_wildcarded", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GtkIconSource)),
	("setting",		ctypes.c_int),] )

gtk_icon_source_get_size_wildcarded = _rpythonic_function_(		"gtk_icon_source_get_size_wildcarded", ctypes.c_int, [
	("source",		ctypes.POINTER(_GtkIconSource)),] )

gtk_icon_source_get_state_wildcarded = _rpythonic_function_(		"gtk_icon_source_get_state_wildcarded", ctypes.c_int, [
	("source",		ctypes.POINTER(_GtkIconSource)),] )

gtk_icon_source_get_direction_wildcarded = _rpythonic_function_(		"gtk_icon_source_get_direction_wildcarded", ctypes.c_int, [
	("source",		ctypes.POINTER(_GtkIconSource)),] )

gtk_icon_source_set_direction = _rpythonic_function_(		"gtk_icon_source_set_direction", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GtkIconSource)),
	("direction",		ctypes.c_int),] )

gtk_icon_source_set_state = _rpythonic_function_(		"gtk_icon_source_set_state", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GtkIconSource)),
	("state",		ctypes.c_int),] )

gtk_icon_source_set_size = _rpythonic_function_(		"gtk_icon_source_set_size", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GtkIconSource)),
	("size",		ctypes.c_int),] )

gtk_icon_source_get_direction = _rpythonic_function_(		"gtk_icon_source_get_direction", ctypes.c_int, [
	("source",		ctypes.POINTER(_GtkIconSource)),] )

gtk_icon_source_get_state = _rpythonic_function_(		"gtk_icon_source_get_state", ctypes.c_int, [
	("source",		ctypes.POINTER(_GtkIconSource)),] )

gtk_icon_source_get_size = _rpythonic_function_(		"gtk_icon_source_get_size", ctypes.c_int, [
	("source",		ctypes.POINTER(_GtkIconSource)),] )

_gtk_icon_set_invalidate_caches = _rpythonic_function_(		"_gtk_icon_set_invalidate_caches", ctypes.c_void_p, [] )

_gtk_icon_factory_list_ids = _rpythonic_function_(		"_gtk_icon_factory_list_ids", ctypes.POINTER(_GList), [] )

_gtk_icon_factory_ensure_default_icons = _rpythonic_function_(		"_gtk_icon_factory_ensure_default_icons", ctypes.c_void_p, [] )

GtkStylePropertyParser = _rpythonic_function_(		"GtkStylePropertyParser", ctypes.c_int, [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(_GValue)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_style_properties_get_type = _rpythonic_function_(		"gtk_style_properties_get_type", ctypes.c_uint, [] )

gtk_style_properties_register_property = _rpythonic_function_(		"gtk_style_properties_register_property", ctypes.c_void_p, [
	("parse_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_char),ctypes.POINTER(_GValue),ctypes.POINTER(ctypes.POINTER(_GError)),)),
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

gtk_style_properties_lookup_property = _rpythonic_function_(		"gtk_style_properties_lookup_property", ctypes.c_int, [
	("property_name",		ctypes.POINTER(ctypes.c_char)),
	("parse_func",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_char),ctypes.POINTER(_GValue),ctypes.POINTER(ctypes.POINTER(_GError)),))),
	("pspec",		ctypes.POINTER(ctypes.POINTER(_GParamSpec))),] )

gtk_style_properties_new = _rpythonic_function_(		"gtk_style_properties_new", ctypes.POINTER(_GtkStyleProperties), [] )

gtk_style_properties_map_color = _rpythonic_function_(		"gtk_style_properties_map_color", ctypes.c_void_p, [
	("props",		ctypes.POINTER(_GtkStyleProperties)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("color",		ctypes.POINTER(_GtkSymbolicColor)),] )

gtk_style_properties_lookup_color = _rpythonic_function_(		"gtk_style_properties_lookup_color", ctypes.POINTER(_GtkSymbolicColor), [
	("props",		ctypes.POINTER(_GtkStyleProperties)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_style_properties_set_property = _rpythonic_function_(		"gtk_style_properties_set_property", ctypes.c_void_p, [
	("props",		ctypes.POINTER(_GtkStyleProperties)),
	("property",		ctypes.POINTER(ctypes.c_char)),
	("state",		ctypes.c_int),
	("value",		ctypes.POINTER(_GValue)),] )

gtk_style_properties_set_valist = _rpythonic_function_(		"gtk_style_properties_set_valist", ctypes.c_void_p, [
	("props",		ctypes.POINTER(_GtkStyleProperties)),
	("state",		ctypes.c_int),
	("args",		ctypes.c_char),] )

gtk_style_properties_get_property = _rpythonic_function_(		"gtk_style_properties_get_property", ctypes.c_int, [
	("props",		ctypes.POINTER(_GtkStyleProperties)),
	("property",		ctypes.POINTER(ctypes.c_char)),
	("state",		ctypes.c_int),
	("value",		ctypes.POINTER(_GValue)),] )

gtk_style_properties_get_valist = _rpythonic_function_(		"gtk_style_properties_get_valist", ctypes.c_void_p, [
	("props",		ctypes.POINTER(_GtkStyleProperties)),
	("state",		ctypes.c_int),
	("args",		ctypes.c_char),] )

gtk_style_properties_unset_property = _rpythonic_function_(		"gtk_style_properties_unset_property", ctypes.c_void_p, [
	("props",		ctypes.POINTER(_GtkStyleProperties)),
	("property",		ctypes.POINTER(ctypes.c_char)),
	("state",		ctypes.c_int),] )

gtk_style_properties_clear = _rpythonic_function_(		"gtk_style_properties_clear", ctypes.c_void_p, [
	("props",		ctypes.POINTER(_GtkStyleProperties)),] )

gtk_style_properties_merge = _rpythonic_function_(		"gtk_style_properties_merge", ctypes.c_void_p, [
	("props",		ctypes.POINTER(_GtkStyleProperties)),
	("props_to_merge",		ctypes.POINTER(_GtkStyleProperties)),
	("replace",		ctypes.c_int),] )

get_style = _rpythonic_function_(		"get_style", ctypes.POINTER(_GtkStyleProperties), [
	("provider",		ctypes.POINTER(_GtkStyleProvider)),
	("path",		ctypes.POINTER(_GtkWidgetPath)),] )

get_style_property = _rpythonic_function_(		"get_style_property", ctypes.c_int, [
	("provider",		ctypes.POINTER(_GtkStyleProvider)),
	("path",		ctypes.POINTER(_GtkWidgetPath)),
	("state",		ctypes.c_int),
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("value",		ctypes.POINTER(_GValue)),] )

get_icon_factory = _rpythonic_function_(		"get_icon_factory", ctypes.POINTER(_GtkIconFactory), [
	("provider",		ctypes.POINTER(_GtkStyleProvider)),
	("path",		ctypes.POINTER(_GtkWidgetPath)),] )

gtk_style_provider_get_type = _rpythonic_function_(		"gtk_style_provider_get_type", ctypes.c_uint, [] )

gtk_style_provider_get_style = _rpythonic_function_(		"gtk_style_provider_get_style", ctypes.POINTER(_GtkStyleProperties), [
	("provider",		ctypes.POINTER(_GtkStyleProvider)),
	("path",		ctypes.POINTER(_GtkWidgetPath)),] )

gtk_style_provider_get_style_property = _rpythonic_function_(		"gtk_style_provider_get_style_property", ctypes.c_int, [
	("provider",		ctypes.POINTER(_GtkStyleProvider)),
	("path",		ctypes.POINTER(_GtkWidgetPath)),
	("state",		ctypes.c_int),
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("value",		ctypes.POINTER(_GValue)),] )

gtk_style_provider_get_icon_factory = _rpythonic_function_(		"gtk_style_provider_get_icon_factory", ctypes.POINTER(_GtkIconFactory), [
	("provider",		ctypes.POINTER(_GtkStyleProvider)),
	("path",		ctypes.POINTER(_GtkWidgetPath)),] )

atk_state_type_register = _rpythonic_function_(		"atk_state_type_register", ctypes.c_int, [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

atk_state_type_get_name = _rpythonic_function_(		"atk_state_type_get_name", ctypes.POINTER(ctypes.c_char), [
	("C_type",		ctypes.c_int),] )

atk_state_type_for_name = _rpythonic_function_(		"atk_state_type_for_name", ctypes.c_int, [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

atk_role_register = _rpythonic_function_(		"atk_role_register", ctypes.c_int, [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

AtkFunction = _rpythonic_function_(		"AtkFunction", ctypes.c_int, [("data",		ctypes.c_void_p)] )

AtkPropertyChangeHandler = _rpythonic_function_(		"AtkPropertyChangeHandler", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

get_n_children = _rpythonic_function_(		"get_n_children", ctypes.c_int, [
	("accessible",		ctypes.POINTER(_AtkObject)),] )

ref_child = _rpythonic_function_(		"ref_child", ctypes.POINTER(_AtkObject), [
	("accessible",		ctypes.POINTER(_AtkObject)),
	("i",		ctypes.c_int),] )

get_index_in_parent = _rpythonic_function_(		"get_index_in_parent", ctypes.c_int, [
	("accessible",		ctypes.POINTER(_AtkObject)),] )

ref_relation_set = _rpythonic_function_(		"ref_relation_set", ctypes.POINTER(_AtkRelationSet), [
	("accessible",		ctypes.POINTER(_AtkObject)),] )

get_role = _rpythonic_function_(		"get_role", ctypes.c_int, [
	("accessible",		ctypes.POINTER(_AtkObject)),] )

get_layer = _rpythonic_function_(		"get_layer", ctypes.c_int, [
	("accessible",		ctypes.POINTER(_AtkObject)),] )

get_mdi_zorder = _rpythonic_function_(		"get_mdi_zorder", ctypes.c_int, [
	("accessible",		ctypes.POINTER(_AtkObject)),] )

ref_state_set = _rpythonic_function_(		"ref_state_set", ctypes.POINTER(_AtkStateSet), [
	("accessible",		ctypes.POINTER(_AtkObject)),] )

set_name = _rpythonic_function_(		"set_name", ctypes.c_void_p, [
	("accessible",		ctypes.POINTER(_AtkObject)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

set_description = _rpythonic_function_(		"set_description", ctypes.c_void_p, [
	("accessible",		ctypes.POINTER(_AtkObject)),
	("description",		ctypes.POINTER(ctypes.c_char)),] )

set_parent = _rpythonic_function_(		"set_parent", ctypes.c_void_p, [
	("accessible",		ctypes.POINTER(_AtkObject)),
	("parent",		ctypes.POINTER(_AtkObject)),] )

set_role = _rpythonic_function_(		"set_role", ctypes.c_void_p, [
	("accessible",		ctypes.POINTER(_AtkObject)),
	("role",		ctypes.c_int),] )

connect_property_change_handler = _rpythonic_function_(		"connect_property_change_handler", ctypes.c_uint, [
	("accessible",		ctypes.POINTER(_AtkObject)),
	("handler",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),))),] )

remove_property_change_handler = _rpythonic_function_(		"remove_property_change_handler", ctypes.c_void_p, [
	("accessible",		ctypes.POINTER(_AtkObject)),
	("handler_id",		ctypes.c_uint),] )

initialize = _rpythonic_function_(		"initialize", ctypes.c_void_p, [
	("accessible",		ctypes.POINTER(_AtkObject)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

children_changed = _rpythonic_function_(		"children_changed", ctypes.c_void_p, [
	("accessible",		ctypes.POINTER(_AtkObject)),
	("change_index",		ctypes.c_uint),
	("changed_child",		ctypes.POINTER(ctypes.c_void_p)),] )

focus_event = _rpythonic_function_(		"focus_event", ctypes.c_void_p, [
	("accessible",		ctypes.POINTER(_AtkObject)),
	("focus_in",		ctypes.c_int),] )

property_change = _rpythonic_function_(		"property_change", ctypes.c_void_p, [
	("accessible",		ctypes.POINTER(_AtkObject)),
	("values",		ctypes.POINTER(_AtkPropertyValues)),] )

state_change = _rpythonic_function_(		"state_change", ctypes.c_void_p, [
	("accessible",		ctypes.POINTER(_AtkObject)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("state_set",		ctypes.c_int),] )

visible_data_changed = _rpythonic_function_(		"visible_data_changed", ctypes.c_void_p, [
	("accessible",		ctypes.POINTER(_AtkObject)),] )

active_descendant_changed = _rpythonic_function_(		"active_descendant_changed", ctypes.c_void_p, [
	("accessible",		ctypes.POINTER(_AtkObject)),
	("child",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

get_attributes = _rpythonic_function_(		"get_attributes", ctypes.POINTER(_GSList), [
	("accessible",		ctypes.POINTER(_AtkObject)),] )

ref_accessible = _rpythonic_function_(		"ref_accessible", ctypes.POINTER(_AtkObject), [
	("implementor",		ctypes.POINTER(_AtkImplementor)),] )

atk_implementor_get_type = _rpythonic_function_(		"atk_implementor_get_type", ctypes.c_uint, [] )

atk_object_get_type = _rpythonic_function_(		"atk_object_get_type", ctypes.c_uint, [] )

atk_implementor_ref_accessible = _rpythonic_function_(		"atk_implementor_ref_accessible", ctypes.POINTER(_AtkObject), [
	("implementor",		ctypes.POINTER(_AtkImplementor)),] )

atk_object_get_name = _rpythonic_function_(		"atk_object_get_name", ctypes.POINTER(ctypes.c_char), [
	("accessible",		ctypes.POINTER(_AtkObject)),] )

atk_object_get_description = _rpythonic_function_(		"atk_object_get_description", ctypes.POINTER(ctypes.c_char), [
	("accessible",		ctypes.POINTER(_AtkObject)),] )

atk_object_get_parent = _rpythonic_function_(		"atk_object_get_parent", ctypes.POINTER(_AtkObject), [
	("accessible",		ctypes.POINTER(_AtkObject)),] )

atk_object_get_n_accessible_children = _rpythonic_function_(		"atk_object_get_n_accessible_children", ctypes.c_int, [
	("accessible",		ctypes.POINTER(_AtkObject)),] )

atk_object_ref_accessible_child = _rpythonic_function_(		"atk_object_ref_accessible_child", ctypes.POINTER(_AtkObject), [
	("accessible",		ctypes.POINTER(_AtkObject)),
	("i",		ctypes.c_int),] )

atk_object_ref_relation_set = _rpythonic_function_(		"atk_object_ref_relation_set", ctypes.POINTER(_AtkRelationSet), [
	("accessible",		ctypes.POINTER(_AtkObject)),] )

atk_object_get_role = _rpythonic_function_(		"atk_object_get_role", ctypes.c_int, [
	("accessible",		ctypes.POINTER(_AtkObject)),] )

atk_object_get_layer = _rpythonic_function_(		"atk_object_get_layer", ctypes.c_int, [
	("accessible",		ctypes.POINTER(_AtkObject)),] )

atk_object_get_mdi_zorder = _rpythonic_function_(		"atk_object_get_mdi_zorder", ctypes.c_int, [
	("accessible",		ctypes.POINTER(_AtkObject)),] )

atk_object_get_attributes = _rpythonic_function_(		"atk_object_get_attributes", ctypes.POINTER(_GSList), [
	("accessible",		ctypes.POINTER(_AtkObject)),] )

atk_object_ref_state_set = _rpythonic_function_(		"atk_object_ref_state_set", ctypes.POINTER(_AtkStateSet), [
	("accessible",		ctypes.POINTER(_AtkObject)),] )

atk_object_get_index_in_parent = _rpythonic_function_(		"atk_object_get_index_in_parent", ctypes.c_int, [
	("accessible",		ctypes.POINTER(_AtkObject)),] )

atk_object_set_name = _rpythonic_function_(		"atk_object_set_name", ctypes.c_void_p, [
	("accessible",		ctypes.POINTER(_AtkObject)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

atk_object_set_description = _rpythonic_function_(		"atk_object_set_description", ctypes.c_void_p, [
	("accessible",		ctypes.POINTER(_AtkObject)),
	("description",		ctypes.POINTER(ctypes.c_char)),] )

atk_object_set_parent = _rpythonic_function_(		"atk_object_set_parent", ctypes.c_void_p, [
	("accessible",		ctypes.POINTER(_AtkObject)),
	("parent",		ctypes.POINTER(_AtkObject)),] )

atk_object_set_role = _rpythonic_function_(		"atk_object_set_role", ctypes.c_void_p, [
	("accessible",		ctypes.POINTER(_AtkObject)),
	("role",		ctypes.c_int),] )

atk_object_connect_property_change_handler = _rpythonic_function_(		"atk_object_connect_property_change_handler", ctypes.c_uint, [
	("accessible",		ctypes.POINTER(_AtkObject)),
	("handler",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),))),] )

atk_object_remove_property_change_handler = _rpythonic_function_(		"atk_object_remove_property_change_handler", ctypes.c_void_p, [
	("accessible",		ctypes.POINTER(_AtkObject)),
	("handler_id",		ctypes.c_uint),] )

atk_object_notify_state_change = _rpythonic_function_(		"atk_object_notify_state_change", ctypes.c_void_p, [
	("accessible",		ctypes.POINTER(_AtkObject)),
	("state",		ctypes.c_ulonglong),
	("value",		ctypes.c_int),] )

atk_object_initialize = _rpythonic_function_(		"atk_object_initialize", ctypes.c_void_p, [
	("accessible",		ctypes.POINTER(_AtkObject)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

atk_role_get_name = _rpythonic_function_(		"atk_role_get_name", ctypes.POINTER(ctypes.c_char), [
	("role",		ctypes.c_int),] )

atk_role_for_name = _rpythonic_function_(		"atk_role_for_name", ctypes.c_int, [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

atk_object_add_relationship = _rpythonic_function_(		"atk_object_add_relationship", ctypes.c_int, [
	("C_object",		ctypes.POINTER(_AtkObject)),
	("relationship",		ctypes.c_int),
	("target",		ctypes.POINTER(_AtkObject)),] )

atk_object_remove_relationship = _rpythonic_function_(		"atk_object_remove_relationship", ctypes.c_int, [
	("C_object",		ctypes.POINTER(_AtkObject)),
	("relationship",		ctypes.c_int),
	("target",		ctypes.POINTER(_AtkObject)),] )

atk_role_get_localized_name = _rpythonic_function_(		"atk_role_get_localized_name", ctypes.POINTER(ctypes.c_char), [
	("role",		ctypes.c_int),] )

do_action = _rpythonic_function_(		"do_action", ctypes.c_int, [
	("action",		ctypes.POINTER(_AtkAction)),
	("i",		ctypes.c_int),] )

get_n_actions = _rpythonic_function_(		"get_n_actions", ctypes.c_int, [
	("action",		ctypes.POINTER(_AtkAction)),] )

get_keybinding = _rpythonic_function_(		"get_keybinding", ctypes.POINTER(ctypes.c_char), [
	("action",		ctypes.POINTER(_AtkAction)),
	("i",		ctypes.c_int),] )

get_localized_name = _rpythonic_function_(		"get_localized_name", ctypes.POINTER(ctypes.c_char), [
	("action",		ctypes.POINTER(_AtkAction)),
	("i",		ctypes.c_int),] )

atk_action_get_type = _rpythonic_function_(		"atk_action_get_type", ctypes.c_uint, [] )

atk_action_do_action = _rpythonic_function_(		"atk_action_do_action", ctypes.c_int, [
	("action",		ctypes.POINTER(_AtkAction)),
	("i",		ctypes.c_int),] )

atk_action_get_n_actions = _rpythonic_function_(		"atk_action_get_n_actions", ctypes.c_int, [
	("action",		ctypes.POINTER(_AtkAction)),] )

atk_action_get_description = _rpythonic_function_(		"atk_action_get_description", ctypes.POINTER(ctypes.c_char), [
	("action",		ctypes.POINTER(_AtkAction)),
	("i",		ctypes.c_int),] )

atk_action_get_name = _rpythonic_function_(		"atk_action_get_name", ctypes.POINTER(ctypes.c_char), [
	("action",		ctypes.POINTER(_AtkAction)),
	("i",		ctypes.c_int),] )

atk_action_get_keybinding = _rpythonic_function_(		"atk_action_get_keybinding", ctypes.POINTER(ctypes.c_char), [
	("action",		ctypes.POINTER(_AtkAction)),
	("i",		ctypes.c_int),] )

atk_action_set_description = _rpythonic_function_(		"atk_action_set_description", ctypes.c_int, [
	("action",		ctypes.POINTER(_AtkAction)),
	("i",		ctypes.c_int),
	("desc",		ctypes.POINTER(ctypes.c_char)),] )

atk_action_get_localized_name = _rpythonic_function_(		"atk_action_get_localized_name", ctypes.POINTER(ctypes.c_char), [
	("action",		ctypes.POINTER(_AtkAction)),
	("i",		ctypes.c_int),] )

AtkEventListener = _rpythonic_function_(		"AtkEventListener", ctypes.c_void_p, [
	("obj",		ctypes.POINTER(_AtkObject)),] )

AtkEventListenerInit = _rpythonic_function_(		"AtkEventListenerInit", ctypes.c_void_p, [] )

AtkKeySnoopFunc = _rpythonic_function_(		"AtkKeySnoopFunc", ctypes.c_int, [
	("event",		ctypes.POINTER(_AtkKeyEventStruct)),
	("func_data",		ctypes.POINTER(ctypes.c_void_p)),] )

add_global_event_listener = _rpythonic_function_(		"add_global_event_listener", ctypes.c_uint, [
	("listener",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GSignalInvocationHint),ctypes.c_uint,ctypes.POINTER(_GValue),ctypes.POINTER(ctypes.c_void_p),)),
	("event_type",		ctypes.POINTER(ctypes.c_char)),] )

remove_global_event_listener = _rpythonic_function_(		"remove_global_event_listener", ctypes.c_void_p, [
	("listener_id",		ctypes.c_uint),] )

add_key_event_listener = _rpythonic_function_(		"add_key_event_listener", ctypes.c_uint, [
	("listener",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_AtkKeyEventStruct),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

remove_key_event_listener = _rpythonic_function_(		"remove_key_event_listener", ctypes.c_void_p, [
	("listener_id",		ctypes.c_uint),] )

get_toolkit_name = _rpythonic_function_(		"get_toolkit_name", ctypes.POINTER(ctypes.c_char), [] )

get_toolkit_version = _rpythonic_function_(		"get_toolkit_version", ctypes.POINTER(ctypes.c_char), [] )

atk_util_get_type = _rpythonic_function_(		"atk_util_get_type", ctypes.c_uint, [] )

atk_add_focus_tracker = _rpythonic_function_(		"atk_add_focus_tracker", ctypes.c_uint, [
	("focus_tracker",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_AtkObject),)),] )

atk_remove_focus_tracker = _rpythonic_function_(		"atk_remove_focus_tracker", ctypes.c_void_p, [
	("tracker_id",		ctypes.c_uint),] )

atk_focus_tracker_init = _rpythonic_function_(		"atk_focus_tracker_init", ctypes.c_void_p, [
	("init",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

atk_focus_tracker_notify = _rpythonic_function_(		"atk_focus_tracker_notify", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_AtkObject)),] )

atk_add_global_event_listener = _rpythonic_function_(		"atk_add_global_event_listener", ctypes.c_uint, [
	("listener",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GSignalInvocationHint),ctypes.c_uint,ctypes.POINTER(_GValue),ctypes.POINTER(ctypes.c_void_p),)),
	("event_type",		ctypes.POINTER(ctypes.c_char)),] )

atk_remove_global_event_listener = _rpythonic_function_(		"atk_remove_global_event_listener", ctypes.c_void_p, [
	("listener_id",		ctypes.c_uint),] )

atk_add_key_event_listener = _rpythonic_function_(		"atk_add_key_event_listener", ctypes.c_uint, [
	("listener",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_AtkKeyEventStruct),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

atk_remove_key_event_listener = _rpythonic_function_(		"atk_remove_key_event_listener", ctypes.c_void_p, [
	("listener_id",		ctypes.c_uint),] )

atk_get_root = _rpythonic_function_(		"atk_get_root", ctypes.POINTER(_AtkObject), [] )

atk_get_focus_object = _rpythonic_function_(		"atk_get_focus_object", ctypes.POINTER(_AtkObject), [] )

atk_get_toolkit_name = _rpythonic_function_(		"atk_get_toolkit_name", ctypes.POINTER(ctypes.c_char), [] )

atk_get_toolkit_version = _rpythonic_function_(		"atk_get_toolkit_version", ctypes.POINTER(ctypes.c_char), [] )

atk_get_version = _rpythonic_function_(		"atk_get_version", ctypes.POINTER(ctypes.c_char), [] )

AtkFocusHandler = _rpythonic_function_(		"AtkFocusHandler", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

atk_rectangle_get_type = _rpythonic_function_(		"atk_rectangle_get_type", ctypes.c_uint, [] )

add_focus_handler = _rpythonic_function_(		"add_focus_handler", ctypes.c_uint, [
	("component",		ctypes.POINTER(_AtkComponent)),
	("handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.c_int,)),] )

contains = _rpythonic_function_(		"contains", ctypes.c_int, [
	("component",		ctypes.POINTER(_AtkComponent)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("coord_type",		ctypes.c_int),] )

ref_accessible_at_point = _rpythonic_function_(		"ref_accessible_at_point", ctypes.POINTER(_AtkObject), [
	("component",		ctypes.POINTER(_AtkComponent)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("coord_type",		ctypes.c_int),] )

get_extents = _rpythonic_function_(		"get_extents", ctypes.c_void_p, [
	("component",		ctypes.POINTER(_AtkComponent)),
	("x",		ctypes.POINTER(ctypes.c_int)),
	("y",		ctypes.POINTER(ctypes.c_int)),
	("width",		ctypes.POINTER(ctypes.c_int)),
	("height",		ctypes.POINTER(ctypes.c_int)),
	("coord_type",		ctypes.c_int),] )

get_position = _rpythonic_function_(		"get_position", ctypes.c_void_p, [
	("component",		ctypes.POINTER(_AtkComponent)),
	("x",		ctypes.POINTER(ctypes.c_int)),
	("y",		ctypes.POINTER(ctypes.c_int)),
	("coord_type",		ctypes.c_int),] )

grab_focus = _rpythonic_function_(		"grab_focus", ctypes.c_int, [
	("component",		ctypes.POINTER(_AtkComponent)),] )

remove_focus_handler = _rpythonic_function_(		"remove_focus_handler", ctypes.c_void_p, [
	("component",		ctypes.POINTER(_AtkComponent)),
	("handler_id",		ctypes.c_uint),] )

set_extents = _rpythonic_function_(		"set_extents", ctypes.c_int, [
	("component",		ctypes.POINTER(_AtkComponent)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("coord_type",		ctypes.c_int),] )

set_position = _rpythonic_function_(		"set_position", ctypes.c_int, [
	("component",		ctypes.POINTER(_AtkComponent)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("coord_type",		ctypes.c_int),] )

set_size = _rpythonic_function_(		"set_size", ctypes.c_int, [
	("component",		ctypes.POINTER(_AtkComponent)),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

bounds_changed = _rpythonic_function_(		"bounds_changed", ctypes.c_void_p, [
	("component",		ctypes.POINTER(_AtkComponent)),
	("bounds",		ctypes.POINTER(_AtkRectangle)),] )

get_alpha = _rpythonic_function_(		"get_alpha", ctypes.c_double, [
	("component",		ctypes.POINTER(_AtkComponent)),] )

atk_component_add_focus_handler = _rpythonic_function_(		"atk_component_add_focus_handler", ctypes.c_uint, [
	("component",		ctypes.POINTER(_AtkComponent)),
	("handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.c_int,)),] )

atk_component_contains = _rpythonic_function_(		"atk_component_contains", ctypes.c_int, [
	("component",		ctypes.POINTER(_AtkComponent)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("coord_type",		ctypes.c_int),] )

atk_component_get_type = _rpythonic_function_(		"atk_component_get_type", ctypes.c_uint, [] )

atk_component_ref_accessible_at_point = _rpythonic_function_(		"atk_component_ref_accessible_at_point", ctypes.POINTER(_AtkObject), [
	("component",		ctypes.POINTER(_AtkComponent)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("coord_type",		ctypes.c_int),] )

atk_component_get_extents = _rpythonic_function_(		"atk_component_get_extents", ctypes.c_void_p, [
	("component",		ctypes.POINTER(_AtkComponent)),
	("x",		ctypes.POINTER(ctypes.c_int)),
	("y",		ctypes.POINTER(ctypes.c_int)),
	("width",		ctypes.POINTER(ctypes.c_int)),
	("height",		ctypes.POINTER(ctypes.c_int)),
	("coord_type",		ctypes.c_int),] )

atk_component_get_position = _rpythonic_function_(		"atk_component_get_position", ctypes.c_void_p, [
	("component",		ctypes.POINTER(_AtkComponent)),
	("x",		ctypes.POINTER(ctypes.c_int)),
	("y",		ctypes.POINTER(ctypes.c_int)),
	("coord_type",		ctypes.c_int),] )

atk_component_get_size = _rpythonic_function_(		"atk_component_get_size", ctypes.c_void_p, [
	("component",		ctypes.POINTER(_AtkComponent)),
	("width",		ctypes.POINTER(ctypes.c_int)),
	("height",		ctypes.POINTER(ctypes.c_int)),] )

atk_component_get_layer = _rpythonic_function_(		"atk_component_get_layer", ctypes.c_int, [
	("component",		ctypes.POINTER(_AtkComponent)),] )

atk_component_get_mdi_zorder = _rpythonic_function_(		"atk_component_get_mdi_zorder", ctypes.c_int, [
	("component",		ctypes.POINTER(_AtkComponent)),] )

atk_component_grab_focus = _rpythonic_function_(		"atk_component_grab_focus", ctypes.c_int, [
	("component",		ctypes.POINTER(_AtkComponent)),] )

atk_component_remove_focus_handler = _rpythonic_function_(		"atk_component_remove_focus_handler", ctypes.c_void_p, [
	("component",		ctypes.POINTER(_AtkComponent)),
	("handler_id",		ctypes.c_uint),] )

atk_component_set_extents = _rpythonic_function_(		"atk_component_set_extents", ctypes.c_int, [
	("component",		ctypes.POINTER(_AtkComponent)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("coord_type",		ctypes.c_int),] )

atk_component_set_position = _rpythonic_function_(		"atk_component_set_position", ctypes.c_int, [
	("component",		ctypes.POINTER(_AtkComponent)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("coord_type",		ctypes.c_int),] )

atk_component_set_size = _rpythonic_function_(		"atk_component_set_size", ctypes.c_int, [
	("component",		ctypes.POINTER(_AtkComponent)),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

atk_component_get_alpha = _rpythonic_function_(		"atk_component_get_alpha", ctypes.c_double, [
	("component",		ctypes.POINTER(_AtkComponent)),] )

get_document_type = _rpythonic_function_(		"get_document_type", ctypes.POINTER(ctypes.c_char), [
	("document",		ctypes.POINTER(_AtkDocument)),] )

get_document = _rpythonic_function_(		"get_document", ctypes.POINTER(ctypes.c_void_p), [
	("document",		ctypes.POINTER(_AtkDocument)),] )

get_document_locale = _rpythonic_function_(		"get_document_locale", ctypes.POINTER(ctypes.c_char), [
	("document",		ctypes.POINTER(_AtkDocument)),] )

get_document_attributes = _rpythonic_function_(		"get_document_attributes", ctypes.POINTER(_GSList), [
	("document",		ctypes.POINTER(_AtkDocument)),] )

get_document_attribute_value = _rpythonic_function_(		"get_document_attribute_value", ctypes.POINTER(ctypes.c_char), [
	("document",		ctypes.POINTER(_AtkDocument)),
	("attribute_name",		ctypes.POINTER(ctypes.c_char)),] )

set_document_attribute = _rpythonic_function_(		"set_document_attribute", ctypes.c_int, [
	("document",		ctypes.POINTER(_AtkDocument)),
	("attribute_name",		ctypes.POINTER(ctypes.c_char)),
	("attribute_value",		ctypes.POINTER(ctypes.c_char)),] )

atk_document_get_document_type = _rpythonic_function_(		"atk_document_get_document_type", ctypes.POINTER(ctypes.c_char), [
	("document",		ctypes.POINTER(_AtkDocument)),] )

atk_document_get_type = _rpythonic_function_(		"atk_document_get_type", ctypes.c_uint, [] )

atk_document_get_document = _rpythonic_function_(		"atk_document_get_document", ctypes.POINTER(ctypes.c_void_p), [
	("document",		ctypes.POINTER(_AtkDocument)),] )

atk_document_get_locale = _rpythonic_function_(		"atk_document_get_locale", ctypes.POINTER(ctypes.c_char), [
	("document",		ctypes.POINTER(_AtkDocument)),] )

atk_document_get_attributes = _rpythonic_function_(		"atk_document_get_attributes", ctypes.POINTER(_GSList), [
	("document",		ctypes.POINTER(_AtkDocument)),] )

atk_document_get_attribute_value = _rpythonic_function_(		"atk_document_get_attribute_value", ctypes.POINTER(ctypes.c_char), [
	("document",		ctypes.POINTER(_AtkDocument)),
	("attribute_name",		ctypes.POINTER(ctypes.c_char)),] )

atk_document_set_attribute_value = _rpythonic_function_(		"atk_document_set_attribute_value", ctypes.c_int, [
	("document",		ctypes.POINTER(_AtkDocument)),
	("attribute_name",		ctypes.POINTER(ctypes.c_char)),
	("attribute_value",		ctypes.POINTER(ctypes.c_char)),] )

atk_text_attribute_register = _rpythonic_function_(		"atk_text_attribute_register", ctypes.c_int, [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

atk_text_range_get_type = _rpythonic_function_(		"atk_text_range_get_type", ctypes.c_uint, [] )

get_text = _rpythonic_function_(		"get_text", ctypes.POINTER(ctypes.c_char), [
	("text",		ctypes.POINTER(_AtkText)),
	("start_offset",		ctypes.c_int),
	("end_offset",		ctypes.c_int),] )

get_text_after_offset = _rpythonic_function_(		"get_text_after_offset", ctypes.POINTER(ctypes.c_char), [
	("text",		ctypes.POINTER(_AtkText)),
	("offset",		ctypes.c_int),
	("boundary_type",		ctypes.c_int),
	("start_offset",		ctypes.POINTER(ctypes.c_int)),
	("end_offset",		ctypes.POINTER(ctypes.c_int)),] )

get_text_at_offset = _rpythonic_function_(		"get_text_at_offset", ctypes.POINTER(ctypes.c_char), [
	("text",		ctypes.POINTER(_AtkText)),
	("offset",		ctypes.c_int),
	("boundary_type",		ctypes.c_int),
	("start_offset",		ctypes.POINTER(ctypes.c_int)),
	("end_offset",		ctypes.POINTER(ctypes.c_int)),] )

get_character_at_offset = _rpythonic_function_(		"get_character_at_offset", ctypes.c_uint, [
	("text",		ctypes.POINTER(_AtkText)),
	("offset",		ctypes.c_int),] )

get_text_before_offset = _rpythonic_function_(		"get_text_before_offset", ctypes.POINTER(ctypes.c_char), [
	("text",		ctypes.POINTER(_AtkText)),
	("offset",		ctypes.c_int),
	("boundary_type",		ctypes.c_int),
	("start_offset",		ctypes.POINTER(ctypes.c_int)),
	("end_offset",		ctypes.POINTER(ctypes.c_int)),] )

get_caret_offset = _rpythonic_function_(		"get_caret_offset", ctypes.c_int, [
	("text",		ctypes.POINTER(_AtkText)),] )

get_run_attributes = _rpythonic_function_(		"get_run_attributes", ctypes.POINTER(_GSList), [
	("text",		ctypes.POINTER(_AtkText)),
	("offset",		ctypes.c_int),
	("start_offset",		ctypes.POINTER(ctypes.c_int)),
	("end_offset",		ctypes.POINTER(ctypes.c_int)),] )

get_default_attributes = _rpythonic_function_(		"get_default_attributes", ctypes.POINTER(_GSList), [
	("text",		ctypes.POINTER(_AtkText)),] )

get_character_extents = _rpythonic_function_(		"get_character_extents", ctypes.c_void_p, [
	("text",		ctypes.POINTER(_AtkText)),
	("offset",		ctypes.c_int),
	("x",		ctypes.POINTER(ctypes.c_int)),
	("y",		ctypes.POINTER(ctypes.c_int)),
	("width",		ctypes.POINTER(ctypes.c_int)),
	("height",		ctypes.POINTER(ctypes.c_int)),
	("coords",		ctypes.c_int),] )

get_character_count = _rpythonic_function_(		"get_character_count", ctypes.c_int, [
	("text",		ctypes.POINTER(_AtkText)),] )

get_offset_at_point = _rpythonic_function_(		"get_offset_at_point", ctypes.c_int, [
	("text",		ctypes.POINTER(_AtkText)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("coords",		ctypes.c_int),] )

get_n_selections = _rpythonic_function_(		"get_n_selections", ctypes.c_int, [
	("text",		ctypes.POINTER(_AtkText)),] )

get_selection = _rpythonic_function_(		"get_selection", ctypes.POINTER(ctypes.c_char), [
	("text",		ctypes.POINTER(_AtkText)),
	("selection_num",		ctypes.c_int),
	("start_offset",		ctypes.POINTER(ctypes.c_int)),
	("end_offset",		ctypes.POINTER(ctypes.c_int)),] )

add_selection = _rpythonic_function_(		"add_selection", ctypes.c_int, [
	("text",		ctypes.POINTER(_AtkText)),
	("start_offset",		ctypes.c_int),
	("end_offset",		ctypes.c_int),] )

remove_selection = _rpythonic_function_(		"remove_selection", ctypes.c_int, [
	("text",		ctypes.POINTER(_AtkText)),
	("selection_num",		ctypes.c_int),] )

set_selection = _rpythonic_function_(		"set_selection", ctypes.c_int, [
	("text",		ctypes.POINTER(_AtkText)),
	("selection_num",		ctypes.c_int),
	("start_offset",		ctypes.c_int),
	("end_offset",		ctypes.c_int),] )

set_caret_offset = _rpythonic_function_(		"set_caret_offset", ctypes.c_int, [
	("text",		ctypes.POINTER(_AtkText)),
	("offset",		ctypes.c_int),] )

text_changed = _rpythonic_function_(		"text_changed", ctypes.c_void_p, [
	("text",		ctypes.POINTER(_AtkText)),
	("position",		ctypes.c_int),
	("length",		ctypes.c_int),] )

text_caret_moved = _rpythonic_function_(		"text_caret_moved", ctypes.c_void_p, [
	("text",		ctypes.POINTER(_AtkText)),
	("location",		ctypes.c_int),] )

text_selection_changed = _rpythonic_function_(		"text_selection_changed", ctypes.c_void_p, [
	("text",		ctypes.POINTER(_AtkText)),] )

text_attributes_changed = _rpythonic_function_(		"text_attributes_changed", ctypes.c_void_p, [
	("text",		ctypes.POINTER(_AtkText)),] )

get_range_extents = _rpythonic_function_(		"get_range_extents", ctypes.c_void_p, [
	("text",		ctypes.POINTER(_AtkText)),
	("start_offset",		ctypes.c_int),
	("end_offset",		ctypes.c_int),
	("coord_type",		ctypes.c_int),
	("rect",		ctypes.POINTER(_AtkTextRectangle)),] )

get_bounded_ranges = _rpythonic_function_(		"get_bounded_ranges", ctypes.POINTER(ctypes.POINTER(_AtkTextRange)), [
	("text",		ctypes.POINTER(_AtkText)),
	("rect",		ctypes.POINTER(_AtkTextRectangle)),
	("coord_type",		ctypes.c_int),
	("x_clip_type",		ctypes.c_int),
	("y_clip_type",		ctypes.c_int),] )

atk_text_get_text = _rpythonic_function_(		"atk_text_get_text", ctypes.POINTER(ctypes.c_char), [
	("text",		ctypes.POINTER(_AtkText)),
	("start_offset",		ctypes.c_int),
	("end_offset",		ctypes.c_int),] )

atk_text_get_character_at_offset = _rpythonic_function_(		"atk_text_get_character_at_offset", ctypes.c_uint, [
	("text",		ctypes.POINTER(_AtkText)),
	("offset",		ctypes.c_int),] )

atk_text_get_type = _rpythonic_function_(		"atk_text_get_type", ctypes.c_uint, [] )

atk_text_get_text_after_offset = _rpythonic_function_(		"atk_text_get_text_after_offset", ctypes.POINTER(ctypes.c_char), [
	("text",		ctypes.POINTER(_AtkText)),
	("offset",		ctypes.c_int),
	("boundary_type",		ctypes.c_int),
	("start_offset",		ctypes.POINTER(ctypes.c_int)),
	("end_offset",		ctypes.POINTER(ctypes.c_int)),] )

atk_text_get_text_at_offset = _rpythonic_function_(		"atk_text_get_text_at_offset", ctypes.POINTER(ctypes.c_char), [
	("text",		ctypes.POINTER(_AtkText)),
	("offset",		ctypes.c_int),
	("boundary_type",		ctypes.c_int),
	("start_offset",		ctypes.POINTER(ctypes.c_int)),
	("end_offset",		ctypes.POINTER(ctypes.c_int)),] )

atk_text_get_text_before_offset = _rpythonic_function_(		"atk_text_get_text_before_offset", ctypes.POINTER(ctypes.c_char), [
	("text",		ctypes.POINTER(_AtkText)),
	("offset",		ctypes.c_int),
	("boundary_type",		ctypes.c_int),
	("start_offset",		ctypes.POINTER(ctypes.c_int)),
	("end_offset",		ctypes.POINTER(ctypes.c_int)),] )

atk_text_get_caret_offset = _rpythonic_function_(		"atk_text_get_caret_offset", ctypes.c_int, [
	("text",		ctypes.POINTER(_AtkText)),] )

atk_text_get_character_extents = _rpythonic_function_(		"atk_text_get_character_extents", ctypes.c_void_p, [
	("text",		ctypes.POINTER(_AtkText)),
	("offset",		ctypes.c_int),
	("x",		ctypes.POINTER(ctypes.c_int)),
	("y",		ctypes.POINTER(ctypes.c_int)),
	("width",		ctypes.POINTER(ctypes.c_int)),
	("height",		ctypes.POINTER(ctypes.c_int)),
	("coords",		ctypes.c_int),] )

atk_text_get_run_attributes = _rpythonic_function_(		"atk_text_get_run_attributes", ctypes.POINTER(_GSList), [
	("text",		ctypes.POINTER(_AtkText)),
	("offset",		ctypes.c_int),
	("start_offset",		ctypes.POINTER(ctypes.c_int)),
	("end_offset",		ctypes.POINTER(ctypes.c_int)),] )

atk_text_get_default_attributes = _rpythonic_function_(		"atk_text_get_default_attributes", ctypes.POINTER(_GSList), [
	("text",		ctypes.POINTER(_AtkText)),] )

atk_text_get_character_count = _rpythonic_function_(		"atk_text_get_character_count", ctypes.c_int, [
	("text",		ctypes.POINTER(_AtkText)),] )

atk_text_get_offset_at_point = _rpythonic_function_(		"atk_text_get_offset_at_point", ctypes.c_int, [
	("text",		ctypes.POINTER(_AtkText)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("coords",		ctypes.c_int),] )

atk_text_get_n_selections = _rpythonic_function_(		"atk_text_get_n_selections", ctypes.c_int, [
	("text",		ctypes.POINTER(_AtkText)),] )

atk_text_get_selection = _rpythonic_function_(		"atk_text_get_selection", ctypes.POINTER(ctypes.c_char), [
	("text",		ctypes.POINTER(_AtkText)),
	("selection_num",		ctypes.c_int),
	("start_offset",		ctypes.POINTER(ctypes.c_int)),
	("end_offset",		ctypes.POINTER(ctypes.c_int)),] )

atk_text_add_selection = _rpythonic_function_(		"atk_text_add_selection", ctypes.c_int, [
	("text",		ctypes.POINTER(_AtkText)),
	("start_offset",		ctypes.c_int),
	("end_offset",		ctypes.c_int),] )

atk_text_remove_selection = _rpythonic_function_(		"atk_text_remove_selection", ctypes.c_int, [
	("text",		ctypes.POINTER(_AtkText)),
	("selection_num",		ctypes.c_int),] )

atk_text_set_selection = _rpythonic_function_(		"atk_text_set_selection", ctypes.c_int, [
	("text",		ctypes.POINTER(_AtkText)),
	("selection_num",		ctypes.c_int),
	("start_offset",		ctypes.c_int),
	("end_offset",		ctypes.c_int),] )

atk_text_set_caret_offset = _rpythonic_function_(		"atk_text_set_caret_offset", ctypes.c_int, [
	("text",		ctypes.POINTER(_AtkText)),
	("offset",		ctypes.c_int),] )

atk_text_get_range_extents = _rpythonic_function_(		"atk_text_get_range_extents", ctypes.c_void_p, [
	("text",		ctypes.POINTER(_AtkText)),
	("start_offset",		ctypes.c_int),
	("end_offset",		ctypes.c_int),
	("coord_type",		ctypes.c_int),
	("rect",		ctypes.POINTER(_AtkTextRectangle)),] )

atk_text_get_bounded_ranges = _rpythonic_function_(		"atk_text_get_bounded_ranges", ctypes.POINTER(ctypes.POINTER(_AtkTextRange)), [
	("text",		ctypes.POINTER(_AtkText)),
	("rect",		ctypes.POINTER(_AtkTextRectangle)),
	("coord_type",		ctypes.c_int),
	("x_clip_type",		ctypes.c_int),
	("y_clip_type",		ctypes.c_int),] )

atk_text_free_ranges = _rpythonic_function_(		"atk_text_free_ranges", ctypes.c_void_p, [
	("ranges",		ctypes.POINTER(ctypes.POINTER(_AtkTextRange))),] )

atk_attribute_set_free = _rpythonic_function_(		"atk_attribute_set_free", ctypes.c_void_p, [
	("attrib_set",		ctypes.POINTER(_GSList)),] )

atk_text_attribute_get_name = _rpythonic_function_(		"atk_text_attribute_get_name", ctypes.POINTER(ctypes.c_char), [
	("attr",		ctypes.c_int),] )

atk_text_attribute_for_name = _rpythonic_function_(		"atk_text_attribute_for_name", ctypes.c_int, [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

atk_text_attribute_get_value = _rpythonic_function_(		"atk_text_attribute_get_value", ctypes.POINTER(ctypes.c_char), [
	("attr",		ctypes.c_int),
	("index_",		ctypes.c_int),] )

set_run_attributes = _rpythonic_function_(		"set_run_attributes", ctypes.c_int, [
	("text",		ctypes.POINTER(_AtkEditableText)),
	("attrib_set",		ctypes.POINTER(_GSList)),
	("start_offset",		ctypes.c_int),
	("end_offset",		ctypes.c_int),] )

set_text_contents = _rpythonic_function_(		"set_text_contents", ctypes.c_void_p, [
	("text",		ctypes.POINTER(_AtkEditableText)),
	("string",		ctypes.POINTER(ctypes.c_char)),] )

insert_text = _rpythonic_function_(		"insert_text", ctypes.c_void_p, [
	("text",		ctypes.POINTER(_AtkEditableText)),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),
	("position",		ctypes.POINTER(ctypes.c_int)),] )

copy_text = _rpythonic_function_(		"copy_text", ctypes.c_void_p, [
	("text",		ctypes.POINTER(_AtkEditableText)),
	("start_pos",		ctypes.c_int),
	("end_pos",		ctypes.c_int),] )

cut_text = _rpythonic_function_(		"cut_text", ctypes.c_void_p, [
	("text",		ctypes.POINTER(_AtkEditableText)),
	("start_pos",		ctypes.c_int),
	("end_pos",		ctypes.c_int),] )

delete_text = _rpythonic_function_(		"delete_text", ctypes.c_void_p, [
	("text",		ctypes.POINTER(_AtkEditableText)),
	("start_pos",		ctypes.c_int),
	("end_pos",		ctypes.c_int),] )

paste_text = _rpythonic_function_(		"paste_text", ctypes.c_void_p, [
	("text",		ctypes.POINTER(_AtkEditableText)),
	("position",		ctypes.c_int),] )

atk_editable_text_set_run_attributes = _rpythonic_function_(		"atk_editable_text_set_run_attributes", ctypes.c_int, [
	("text",		ctypes.POINTER(_AtkEditableText)),
	("attrib_set",		ctypes.POINTER(_GSList)),
	("start_offset",		ctypes.c_int),
	("end_offset",		ctypes.c_int),] )

atk_editable_text_get_type = _rpythonic_function_(		"atk_editable_text_get_type", ctypes.c_uint, [] )

atk_editable_text_set_text_contents = _rpythonic_function_(		"atk_editable_text_set_text_contents", ctypes.c_void_p, [
	("text",		ctypes.POINTER(_AtkEditableText)),
	("string",		ctypes.POINTER(ctypes.c_char)),] )

atk_editable_text_insert_text = _rpythonic_function_(		"atk_editable_text_insert_text", ctypes.c_void_p, [
	("text",		ctypes.POINTER(_AtkEditableText)),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),
	("position",		ctypes.POINTER(ctypes.c_int)),] )

atk_editable_text_copy_text = _rpythonic_function_(		"atk_editable_text_copy_text", ctypes.c_void_p, [
	("text",		ctypes.POINTER(_AtkEditableText)),
	("start_pos",		ctypes.c_int),
	("end_pos",		ctypes.c_int),] )

atk_editable_text_cut_text = _rpythonic_function_(		"atk_editable_text_cut_text", ctypes.c_void_p, [
	("text",		ctypes.POINTER(_AtkEditableText)),
	("start_pos",		ctypes.c_int),
	("end_pos",		ctypes.c_int),] )

atk_editable_text_delete_text = _rpythonic_function_(		"atk_editable_text_delete_text", ctypes.c_void_p, [
	("text",		ctypes.POINTER(_AtkEditableText)),
	("start_pos",		ctypes.c_int),
	("end_pos",		ctypes.c_int),] )

atk_editable_text_paste_text = _rpythonic_function_(		"atk_editable_text_paste_text", ctypes.c_void_p, [
	("text",		ctypes.POINTER(_AtkEditableText)),
	("position",		ctypes.c_int),] )

atk_gobject_accessible_get_type = _rpythonic_function_(		"atk_gobject_accessible_get_type", ctypes.c_uint, [] )

atk_gobject_accessible_for_object = _rpythonic_function_(		"atk_gobject_accessible_for_object", ctypes.POINTER(_AtkObject), [
	("obj",		ctypes.POINTER(_GObject)),] )

atk_gobject_accessible_get_object = _rpythonic_function_(		"atk_gobject_accessible_get_object", ctypes.POINTER(_GObject), [
	("obj",		ctypes.POINTER(_AtkGObjectAccessible)),] )

get_end_index = _rpythonic_function_(		"get_end_index", ctypes.c_int, [
	("link_",		ctypes.POINTER(_AtkHyperlink)),] )

get_start_index = _rpythonic_function_(		"get_start_index", ctypes.c_int, [
	("link_",		ctypes.POINTER(_AtkHyperlink)),] )

is_valid = _rpythonic_function_(		"is_valid", ctypes.c_int, [
	("link_",		ctypes.POINTER(_AtkHyperlink)),] )

get_n_anchors = _rpythonic_function_(		"get_n_anchors", ctypes.c_int, [
	("link_",		ctypes.POINTER(_AtkHyperlink)),] )

link_state = _rpythonic_function_(		"link_state", ctypes.c_uint, [
	("link_",		ctypes.POINTER(_AtkHyperlink)),] )

is_selected_link = _rpythonic_function_(		"is_selected_link", ctypes.c_int, [
	("link_",		ctypes.POINTER(_AtkHyperlink)),] )

link_activated = _rpythonic_function_(		"link_activated", ctypes.c_void_p, [
	("link_",		ctypes.POINTER(_AtkHyperlink)),] )

atk_hyperlink_get_uri = _rpythonic_function_(		"atk_hyperlink_get_uri", ctypes.POINTER(ctypes.c_char), [
	("link_",		ctypes.POINTER(_AtkHyperlink)),
	("i",		ctypes.c_int),] )

atk_hyperlink_get_type = _rpythonic_function_(		"atk_hyperlink_get_type", ctypes.c_uint, [] )

atk_hyperlink_get_object = _rpythonic_function_(		"atk_hyperlink_get_object", ctypes.POINTER(_AtkObject), [
	("link_",		ctypes.POINTER(_AtkHyperlink)),
	("i",		ctypes.c_int),] )

atk_hyperlink_get_end_index = _rpythonic_function_(		"atk_hyperlink_get_end_index", ctypes.c_int, [
	("link_",		ctypes.POINTER(_AtkHyperlink)),] )

atk_hyperlink_get_start_index = _rpythonic_function_(		"atk_hyperlink_get_start_index", ctypes.c_int, [
	("link_",		ctypes.POINTER(_AtkHyperlink)),] )

atk_hyperlink_is_valid = _rpythonic_function_(		"atk_hyperlink_is_valid", ctypes.c_int, [
	("link_",		ctypes.POINTER(_AtkHyperlink)),] )

atk_hyperlink_is_inline = _rpythonic_function_(		"atk_hyperlink_is_inline", ctypes.c_int, [
	("link_",		ctypes.POINTER(_AtkHyperlink)),] )

atk_hyperlink_get_n_anchors = _rpythonic_function_(		"atk_hyperlink_get_n_anchors", ctypes.c_int, [
	("link_",		ctypes.POINTER(_AtkHyperlink)),] )

atk_hyperlink_is_selected_link = _rpythonic_function_(		"atk_hyperlink_is_selected_link", ctypes.c_int, [
	("link_",		ctypes.POINTER(_AtkHyperlink)),] )

get_hyperlink = _rpythonic_function_(		"get_hyperlink", ctypes.POINTER(_AtkHyperlink), [
	("impl",		ctypes.POINTER(_AtkHyperlinkImpl)),] )

atk_hyperlink_impl_get_type = _rpythonic_function_(		"atk_hyperlink_impl_get_type", ctypes.c_uint, [] )

atk_hyperlink_impl_get_hyperlink = _rpythonic_function_(		"atk_hyperlink_impl_get_hyperlink", ctypes.POINTER(_AtkHyperlink), [
	("obj",		ctypes.POINTER(_AtkHyperlinkImpl)),] )

get_link = _rpythonic_function_(		"get_link", ctypes.POINTER(_AtkHyperlink), [
	("hypertext",		ctypes.POINTER(_AtkHypertext)),
	("link_index",		ctypes.c_int),] )

get_n_links = _rpythonic_function_(		"get_n_links", ctypes.c_int, [
	("hypertext",		ctypes.POINTER(_AtkHypertext)),] )

get_link_index = _rpythonic_function_(		"get_link_index", ctypes.c_int, [
	("hypertext",		ctypes.POINTER(_AtkHypertext)),
	("char_index",		ctypes.c_int),] )

link_selected = _rpythonic_function_(		"link_selected", ctypes.c_void_p, [
	("hypertext",		ctypes.POINTER(_AtkHypertext)),
	("link_index",		ctypes.c_int),] )

atk_hypertext_get_type = _rpythonic_function_(		"atk_hypertext_get_type", ctypes.c_uint, [] )

atk_hypertext_get_link = _rpythonic_function_(		"atk_hypertext_get_link", ctypes.POINTER(_AtkHyperlink), [
	("hypertext",		ctypes.POINTER(_AtkHypertext)),
	("link_index",		ctypes.c_int),] )

atk_hypertext_get_n_links = _rpythonic_function_(		"atk_hypertext_get_n_links", ctypes.c_int, [
	("hypertext",		ctypes.POINTER(_AtkHypertext)),] )

atk_hypertext_get_link_index = _rpythonic_function_(		"atk_hypertext_get_link_index", ctypes.c_int, [
	("hypertext",		ctypes.POINTER(_AtkHypertext)),
	("char_index",		ctypes.c_int),] )

get_image_position = _rpythonic_function_(		"get_image_position", ctypes.c_void_p, [
	("image",		ctypes.POINTER(_AtkImage)),
	("x",		ctypes.POINTER(ctypes.c_int)),
	("y",		ctypes.POINTER(ctypes.c_int)),
	("coord_type",		ctypes.c_int),] )

get_image_description = _rpythonic_function_(		"get_image_description", ctypes.POINTER(ctypes.c_char), [
	("image",		ctypes.POINTER(_AtkImage)),] )

get_image_size = _rpythonic_function_(		"get_image_size", ctypes.c_void_p, [
	("image",		ctypes.POINTER(_AtkImage)),
	("width",		ctypes.POINTER(ctypes.c_int)),
	("height",		ctypes.POINTER(ctypes.c_int)),] )

set_image_description = _rpythonic_function_(		"set_image_description", ctypes.c_int, [
	("image",		ctypes.POINTER(_AtkImage)),
	("description",		ctypes.POINTER(ctypes.c_char)),] )

get_image_locale = _rpythonic_function_(		"get_image_locale", ctypes.POINTER(ctypes.c_char), [
	("image",		ctypes.POINTER(_AtkImage)),] )

atk_image_get_type = _rpythonic_function_(		"atk_image_get_type", ctypes.c_uint, [] )

atk_image_get_image_description = _rpythonic_function_(		"atk_image_get_image_description", ctypes.POINTER(ctypes.c_char), [
	("image",		ctypes.POINTER(_AtkImage)),] )

atk_image_get_image_size = _rpythonic_function_(		"atk_image_get_image_size", ctypes.c_void_p, [
	("image",		ctypes.POINTER(_AtkImage)),
	("width",		ctypes.POINTER(ctypes.c_int)),
	("height",		ctypes.POINTER(ctypes.c_int)),] )

atk_image_set_image_description = _rpythonic_function_(		"atk_image_set_image_description", ctypes.c_int, [
	("image",		ctypes.POINTER(_AtkImage)),
	("description",		ctypes.POINTER(ctypes.c_char)),] )

atk_image_get_image_position = _rpythonic_function_(		"atk_image_get_image_position", ctypes.c_void_p, [
	("image",		ctypes.POINTER(_AtkImage)),
	("x",		ctypes.POINTER(ctypes.c_int)),
	("y",		ctypes.POINTER(ctypes.c_int)),
	("coord_type",		ctypes.c_int),] )

atk_image_get_image_locale = _rpythonic_function_(		"atk_image_get_image_locale", ctypes.POINTER(ctypes.c_char), [
	("image",		ctypes.POINTER(_AtkImage)),] )

atk_no_op_object_get_type = _rpythonic_function_(		"atk_no_op_object_get_type", ctypes.c_uint, [] )

atk_no_op_object_new = _rpythonic_function_(		"atk_no_op_object_new", ctypes.POINTER(_AtkObject), [
	("obj",		ctypes.POINTER(_GObject)),] )

create_accessible = _rpythonic_function_(		"create_accessible", ctypes.POINTER(_AtkObject), [
	("obj",		ctypes.POINTER(_GObject)),] )

invalidate = _rpythonic_function_(		"invalidate", ctypes.c_void_p, [
	("factory",		ctypes.POINTER(_AtkObjectFactory)),] )

get_accessible_type = _rpythonic_function_(		"get_accessible_type", ctypes.c_uint, [] )

atk_object_factory_get_type = _rpythonic_function_(		"atk_object_factory_get_type", ctypes.c_uint, [] )

atk_object_factory_create_accessible = _rpythonic_function_(		"atk_object_factory_create_accessible", ctypes.POINTER(_AtkObject), [
	("factory",		ctypes.POINTER(_AtkObjectFactory)),
	("obj",		ctypes.POINTER(_GObject)),] )

atk_object_factory_invalidate = _rpythonic_function_(		"atk_object_factory_invalidate", ctypes.c_void_p, [
	("factory",		ctypes.POINTER(_AtkObjectFactory)),] )

atk_object_factory_get_accessible_type = _rpythonic_function_(		"atk_object_factory_get_accessible_type", ctypes.c_uint, [
	("factory",		ctypes.POINTER(_AtkObjectFactory)),] )

atk_no_op_object_factory_get_type = _rpythonic_function_(		"atk_no_op_object_factory_get_type", ctypes.c_uint, [] )

atk_no_op_object_factory_new = _rpythonic_function_(		"atk_no_op_object_factory_new", ctypes.POINTER(_AtkObjectFactory), [] )

atk_plug_get_type = _rpythonic_function_(		"atk_plug_get_type", ctypes.c_uint, [] )

atk_plug_new = _rpythonic_function_(		"atk_plug_new", ctypes.POINTER(_AtkObject), [] )

get_object_id = _rpythonic_function_(		"get_object_id", ctypes.POINTER(ctypes.c_char), [
	("obj",		ctypes.POINTER(_AtkPlug)),] )

atk_plug_get_id = _rpythonic_function_(		"atk_plug_get_id", ctypes.POINTER(ctypes.c_char), [
	("plug",		ctypes.POINTER(_AtkPlug)),] )

atk_registry_get_type = _rpythonic_function_(		"atk_registry_get_type", ctypes.c_uint, [] )

atk_registry_set_factory_type = _rpythonic_function_(		"atk_registry_set_factory_type", ctypes.c_void_p, [
	("registry",		ctypes.POINTER(_AtkRegistry)),
	("C_type",		ctypes.c_uint),
	("factory_type",		ctypes.c_uint),] )

atk_registry_get_factory_type = _rpythonic_function_(		"atk_registry_get_factory_type", ctypes.c_uint, [
	("registry",		ctypes.POINTER(_AtkRegistry)),
	("C_type",		ctypes.c_uint),] )

atk_registry_get_factory = _rpythonic_function_(		"atk_registry_get_factory", ctypes.POINTER(_AtkObjectFactory), [
	("registry",		ctypes.POINTER(_AtkRegistry)),
	("C_type",		ctypes.c_uint),] )

atk_get_default_registry = _rpythonic_function_(		"atk_get_default_registry", ctypes.POINTER(_AtkRegistry), [] )

atk_relation_get_type = _rpythonic_function_(		"atk_relation_get_type", ctypes.c_uint, [] )

atk_relation_type_register = _rpythonic_function_(		"atk_relation_type_register", ctypes.c_int, [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

atk_relation_type_get_name = _rpythonic_function_(		"atk_relation_type_get_name", ctypes.POINTER(ctypes.c_char), [
	("C_type",		ctypes.c_int),] )

atk_relation_type_for_name = _rpythonic_function_(		"atk_relation_type_for_name", ctypes.c_int, [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

atk_relation_new = _rpythonic_function_(		"atk_relation_new", ctypes.POINTER(_AtkRelation), [
	("targets",		ctypes.POINTER(ctypes.POINTER(_AtkObject))),
	("n_targets",		ctypes.c_int),
	("relationship",		ctypes.c_int),] )

atk_relation_get_relation_type = _rpythonic_function_(		"atk_relation_get_relation_type", ctypes.c_int, [
	("relation",		ctypes.POINTER(_AtkRelation)),] )

atk_relation_get_target = _rpythonic_function_(		"atk_relation_get_target", ctypes.POINTER(_GPtrArray), [
	("relation",		ctypes.POINTER(_AtkRelation)),] )

atk_relation_add_target = _rpythonic_function_(		"atk_relation_add_target", ctypes.c_void_p, [
	("relation",		ctypes.POINTER(_AtkRelation)),
	("target",		ctypes.POINTER(_AtkObject)),] )

atk_relation_remove_target = _rpythonic_function_(		"atk_relation_remove_target", ctypes.c_int, [
	("relation",		ctypes.POINTER(_AtkRelation)),
	("target",		ctypes.POINTER(_AtkObject)),] )

atk_relation_set_get_type = _rpythonic_function_(		"atk_relation_set_get_type", ctypes.c_uint, [] )

atk_relation_set_new = _rpythonic_function_(		"atk_relation_set_new", ctypes.POINTER(_AtkRelationSet), [] )

atk_relation_set_contains = _rpythonic_function_(		"atk_relation_set_contains", ctypes.c_int, [
	("set",		ctypes.POINTER(_AtkRelationSet)),
	("relationship",		ctypes.c_int),] )

atk_relation_set_remove = _rpythonic_function_(		"atk_relation_set_remove", ctypes.c_void_p, [
	("set",		ctypes.POINTER(_AtkRelationSet)),
	("relation",		ctypes.POINTER(_AtkRelation)),] )

atk_relation_set_add = _rpythonic_function_(		"atk_relation_set_add", ctypes.c_void_p, [
	("set",		ctypes.POINTER(_AtkRelationSet)),
	("relation",		ctypes.POINTER(_AtkRelation)),] )

atk_relation_set_get_n_relations = _rpythonic_function_(		"atk_relation_set_get_n_relations", ctypes.c_int, [
	("set",		ctypes.POINTER(_AtkRelationSet)),] )

atk_relation_set_get_relation = _rpythonic_function_(		"atk_relation_set_get_relation", ctypes.POINTER(_AtkRelation), [
	("set",		ctypes.POINTER(_AtkRelationSet)),
	("i",		ctypes.c_int),] )

atk_relation_set_get_relation_by_type = _rpythonic_function_(		"atk_relation_set_get_relation_by_type", ctypes.POINTER(_AtkRelation), [
	("set",		ctypes.POINTER(_AtkRelationSet)),
	("relationship",		ctypes.c_int),] )

atk_relation_set_add_relation_by_type = _rpythonic_function_(		"atk_relation_set_add_relation_by_type", ctypes.c_void_p, [
	("set",		ctypes.POINTER(_AtkRelationSet)),
	("relationship",		ctypes.c_int),
	("target",		ctypes.POINTER(_AtkObject)),] )

clear_selection = _rpythonic_function_(		"clear_selection", ctypes.c_int, [
	("selection",		ctypes.POINTER(_AtkSelection)),] )

ref_selection = _rpythonic_function_(		"ref_selection", ctypes.POINTER(_AtkObject), [
	("selection",		ctypes.POINTER(_AtkSelection)),
	("i",		ctypes.c_int),] )

get_selection_count = _rpythonic_function_(		"get_selection_count", ctypes.c_int, [
	("selection",		ctypes.POINTER(_AtkSelection)),] )

is_child_selected = _rpythonic_function_(		"is_child_selected", ctypes.c_int, [
	("selection",		ctypes.POINTER(_AtkSelection)),
	("i",		ctypes.c_int),] )

select_all_selection = _rpythonic_function_(		"select_all_selection", ctypes.c_int, [
	("selection",		ctypes.POINTER(_AtkSelection)),] )

selection_changed = _rpythonic_function_(		"selection_changed", ctypes.c_void_p, [
	("selection",		ctypes.POINTER(_AtkSelection)),] )

atk_selection_add_selection = _rpythonic_function_(		"atk_selection_add_selection", ctypes.c_int, [
	("selection",		ctypes.POINTER(_AtkSelection)),
	("i",		ctypes.c_int),] )

atk_selection_get_type = _rpythonic_function_(		"atk_selection_get_type", ctypes.c_uint, [] )

atk_selection_clear_selection = _rpythonic_function_(		"atk_selection_clear_selection", ctypes.c_int, [
	("selection",		ctypes.POINTER(_AtkSelection)),] )

atk_selection_ref_selection = _rpythonic_function_(		"atk_selection_ref_selection", ctypes.POINTER(_AtkObject), [
	("selection",		ctypes.POINTER(_AtkSelection)),
	("i",		ctypes.c_int),] )

atk_selection_get_selection_count = _rpythonic_function_(		"atk_selection_get_selection_count", ctypes.c_int, [
	("selection",		ctypes.POINTER(_AtkSelection)),] )

atk_selection_is_child_selected = _rpythonic_function_(		"atk_selection_is_child_selected", ctypes.c_int, [
	("selection",		ctypes.POINTER(_AtkSelection)),
	("i",		ctypes.c_int),] )

atk_selection_remove_selection = _rpythonic_function_(		"atk_selection_remove_selection", ctypes.c_int, [
	("selection",		ctypes.POINTER(_AtkSelection)),
	("i",		ctypes.c_int),] )

atk_selection_select_all_selection = _rpythonic_function_(		"atk_selection_select_all_selection", ctypes.c_int, [
	("selection",		ctypes.POINTER(_AtkSelection)),] )

atk_socket_get_type = _rpythonic_function_(		"atk_socket_get_type", ctypes.c_uint, [] )

atk_socket_new = _rpythonic_function_(		"atk_socket_new", ctypes.POINTER(_AtkObject), [] )

embed = _rpythonic_function_(		"embed", ctypes.c_void_p, [
	("obj",		ctypes.POINTER(_AtkSocket)),
	("plug_id",		ctypes.POINTER(ctypes.c_char)),] )

atk_socket_embed = _rpythonic_function_(		"atk_socket_embed", ctypes.c_void_p, [
	("obj",		ctypes.POINTER(_AtkSocket)),
	("plug_id",		ctypes.POINTER(ctypes.c_char)),] )

atk_socket_is_occupied = _rpythonic_function_(		"atk_socket_is_occupied", ctypes.c_int, [
	("obj",		ctypes.POINTER(_AtkSocket)),] )

atk_state_set_get_type = _rpythonic_function_(		"atk_state_set_get_type", ctypes.c_uint, [] )

atk_state_set_new = _rpythonic_function_(		"atk_state_set_new", ctypes.POINTER(_AtkStateSet), [] )

atk_state_set_is_empty = _rpythonic_function_(		"atk_state_set_is_empty", ctypes.c_int, [
	("set",		ctypes.POINTER(_AtkStateSet)),] )

atk_state_set_add_state = _rpythonic_function_(		"atk_state_set_add_state", ctypes.c_int, [
	("set",		ctypes.POINTER(_AtkStateSet)),
	("C_type",		ctypes.c_int),] )

atk_state_set_add_states = _rpythonic_function_(		"atk_state_set_add_states", ctypes.c_void_p, [
	("set",		ctypes.POINTER(_AtkStateSet)),
	("types",		ctypes.POINTER(ctypes.c_int)),
	("n_types",		ctypes.c_int),] )

atk_state_set_clear_states = _rpythonic_function_(		"atk_state_set_clear_states", ctypes.c_void_p, [
	("set",		ctypes.POINTER(_AtkStateSet)),] )

atk_state_set_contains_state = _rpythonic_function_(		"atk_state_set_contains_state", ctypes.c_int, [
	("set",		ctypes.POINTER(_AtkStateSet)),
	("C_type",		ctypes.c_int),] )

atk_state_set_contains_states = _rpythonic_function_(		"atk_state_set_contains_states", ctypes.c_int, [
	("set",		ctypes.POINTER(_AtkStateSet)),
	("types",		ctypes.POINTER(ctypes.c_int)),
	("n_types",		ctypes.c_int),] )

atk_state_set_remove_state = _rpythonic_function_(		"atk_state_set_remove_state", ctypes.c_int, [
	("set",		ctypes.POINTER(_AtkStateSet)),
	("C_type",		ctypes.c_int),] )

atk_state_set_and_sets = _rpythonic_function_(		"atk_state_set_and_sets", ctypes.POINTER(_AtkStateSet), [
	("set",		ctypes.POINTER(_AtkStateSet)),
	("compare_set",		ctypes.POINTER(_AtkStateSet)),] )

atk_state_set_or_sets = _rpythonic_function_(		"atk_state_set_or_sets", ctypes.POINTER(_AtkStateSet), [
	("set",		ctypes.POINTER(_AtkStateSet)),
	("compare_set",		ctypes.POINTER(_AtkStateSet)),] )

atk_state_set_xor_sets = _rpythonic_function_(		"atk_state_set_xor_sets", ctypes.POINTER(_AtkStateSet), [
	("set",		ctypes.POINTER(_AtkStateSet)),
	("compare_set",		ctypes.POINTER(_AtkStateSet)),] )

get_n_mime_types = _rpythonic_function_(		"get_n_mime_types", ctypes.c_int, [
	("streamable",		ctypes.POINTER(_AtkStreamableContent)),] )

get_mime_type = _rpythonic_function_(		"get_mime_type", ctypes.POINTER(ctypes.c_char), [
	("streamable",		ctypes.POINTER(_AtkStreamableContent)),
	("i",		ctypes.c_int),] )

get_stream = _rpythonic_function_(		"get_stream", ctypes.POINTER(_GIOChannel), [
	("streamable",		ctypes.POINTER(_AtkStreamableContent)),
	("mime_type",		ctypes.POINTER(ctypes.c_char)),] )

atk_streamable_content_get_type = _rpythonic_function_(		"atk_streamable_content_get_type", ctypes.c_uint, [] )

atk_streamable_content_get_n_mime_types = _rpythonic_function_(		"atk_streamable_content_get_n_mime_types", ctypes.c_int, [
	("streamable",		ctypes.POINTER(_AtkStreamableContent)),] )

atk_streamable_content_get_mime_type = _rpythonic_function_(		"atk_streamable_content_get_mime_type", ctypes.POINTER(ctypes.c_char), [
	("streamable",		ctypes.POINTER(_AtkStreamableContent)),
	("i",		ctypes.c_int),] )

atk_streamable_content_get_stream = _rpythonic_function_(		"atk_streamable_content_get_stream", ctypes.POINTER(_GIOChannel), [
	("streamable",		ctypes.POINTER(_AtkStreamableContent)),
	("mime_type",		ctypes.POINTER(ctypes.c_char)),] )

atk_streamable_content_get_uri = _rpythonic_function_(		"atk_streamable_content_get_uri", ctypes.POINTER(ctypes.c_char), [
	("streamable",		ctypes.POINTER(_AtkStreamableContent)),
	("mime_type",		ctypes.POINTER(ctypes.c_char)),] )

ref_at = _rpythonic_function_(		"ref_at", ctypes.POINTER(_AtkObject), [
	("table",		ctypes.POINTER(_AtkTable)),
	("row",		ctypes.c_int),
	("column",		ctypes.c_int),] )

get_index_at = _rpythonic_function_(		"get_index_at", ctypes.c_int, [
	("table",		ctypes.POINTER(_AtkTable)),
	("row",		ctypes.c_int),
	("column",		ctypes.c_int),] )

get_column_at_index = _rpythonic_function_(		"get_column_at_index", ctypes.c_int, [
	("table",		ctypes.POINTER(_AtkTable)),
	("index_",		ctypes.c_int),] )

get_row_at_index = _rpythonic_function_(		"get_row_at_index", ctypes.c_int, [
	("table",		ctypes.POINTER(_AtkTable)),
	("index_",		ctypes.c_int),] )

get_n_columns = _rpythonic_function_(		"get_n_columns", ctypes.c_int, [
	("table",		ctypes.POINTER(_AtkTable)),] )

get_n_rows = _rpythonic_function_(		"get_n_rows", ctypes.c_int, [
	("table",		ctypes.POINTER(_AtkTable)),] )

get_column_extent_at = _rpythonic_function_(		"get_column_extent_at", ctypes.c_int, [
	("table",		ctypes.POINTER(_AtkTable)),
	("row",		ctypes.c_int),
	("column",		ctypes.c_int),] )

get_row_extent_at = _rpythonic_function_(		"get_row_extent_at", ctypes.c_int, [
	("table",		ctypes.POINTER(_AtkTable)),
	("row",		ctypes.c_int),
	("column",		ctypes.c_int),] )

get_caption = _rpythonic_function_(		"get_caption", ctypes.POINTER(_AtkObject), [
	("table",		ctypes.POINTER(_AtkTable)),] )

get_column_description = _rpythonic_function_(		"get_column_description", ctypes.POINTER(ctypes.c_char), [
	("table",		ctypes.POINTER(_AtkTable)),
	("column",		ctypes.c_int),] )

get_column_header = _rpythonic_function_(		"get_column_header", ctypes.POINTER(_AtkObject), [
	("table",		ctypes.POINTER(_AtkTable)),
	("column",		ctypes.c_int),] )

get_row_description = _rpythonic_function_(		"get_row_description", ctypes.POINTER(ctypes.c_char), [
	("table",		ctypes.POINTER(_AtkTable)),
	("row",		ctypes.c_int),] )

get_row_header = _rpythonic_function_(		"get_row_header", ctypes.POINTER(_AtkObject), [
	("table",		ctypes.POINTER(_AtkTable)),
	("row",		ctypes.c_int),] )

get_summary = _rpythonic_function_(		"get_summary", ctypes.POINTER(_AtkObject), [
	("table",		ctypes.POINTER(_AtkTable)),] )

set_caption = _rpythonic_function_(		"set_caption", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_AtkTable)),
	("caption",		ctypes.POINTER(_AtkObject)),] )

set_column_description = _rpythonic_function_(		"set_column_description", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_AtkTable)),
	("column",		ctypes.c_int),
	("description",		ctypes.POINTER(ctypes.c_char)),] )

set_column_header = _rpythonic_function_(		"set_column_header", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_AtkTable)),
	("column",		ctypes.c_int),
	("header",		ctypes.POINTER(_AtkObject)),] )

set_row_description = _rpythonic_function_(		"set_row_description", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_AtkTable)),
	("row",		ctypes.c_int),
	("description",		ctypes.POINTER(ctypes.c_char)),] )

set_row_header = _rpythonic_function_(		"set_row_header", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_AtkTable)),
	("row",		ctypes.c_int),
	("header",		ctypes.POINTER(_AtkObject)),] )

set_summary = _rpythonic_function_(		"set_summary", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_AtkTable)),
	("accessible",		ctypes.POINTER(_AtkObject)),] )

get_selected_columns = _rpythonic_function_(		"get_selected_columns", ctypes.c_int, [
	("table",		ctypes.POINTER(_AtkTable)),
	("selected",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),] )

get_selected_rows = _rpythonic_function_(		"get_selected_rows", ctypes.c_int, [
	("table",		ctypes.POINTER(_AtkTable)),
	("selected",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),] )

is_column_selected = _rpythonic_function_(		"is_column_selected", ctypes.c_int, [
	("table",		ctypes.POINTER(_AtkTable)),
	("column",		ctypes.c_int),] )

is_row_selected = _rpythonic_function_(		"is_row_selected", ctypes.c_int, [
	("table",		ctypes.POINTER(_AtkTable)),
	("row",		ctypes.c_int),] )

is_selected = _rpythonic_function_(		"is_selected", ctypes.c_int, [
	("table",		ctypes.POINTER(_AtkTable)),
	("row",		ctypes.c_int),
	("column",		ctypes.c_int),] )

add_row_selection = _rpythonic_function_(		"add_row_selection", ctypes.c_int, [
	("table",		ctypes.POINTER(_AtkTable)),
	("row",		ctypes.c_int),] )

remove_row_selection = _rpythonic_function_(		"remove_row_selection", ctypes.c_int, [
	("table",		ctypes.POINTER(_AtkTable)),
	("row",		ctypes.c_int),] )

add_column_selection = _rpythonic_function_(		"add_column_selection", ctypes.c_int, [
	("table",		ctypes.POINTER(_AtkTable)),
	("column",		ctypes.c_int),] )

remove_column_selection = _rpythonic_function_(		"remove_column_selection", ctypes.c_int, [
	("table",		ctypes.POINTER(_AtkTable)),
	("column",		ctypes.c_int),] )

row_inserted = _rpythonic_function_(		"row_inserted", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_AtkTable)),
	("row",		ctypes.c_int),
	("num_inserted",		ctypes.c_int),] )

column_inserted = _rpythonic_function_(		"column_inserted", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_AtkTable)),
	("column",		ctypes.c_int),
	("num_inserted",		ctypes.c_int),] )

row_deleted = _rpythonic_function_(		"row_deleted", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_AtkTable)),
	("row",		ctypes.c_int),
	("num_deleted",		ctypes.c_int),] )

column_deleted = _rpythonic_function_(		"column_deleted", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_AtkTable)),
	("column",		ctypes.c_int),
	("num_deleted",		ctypes.c_int),] )

row_reordered = _rpythonic_function_(		"row_reordered", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_AtkTable)),] )

column_reordered = _rpythonic_function_(		"column_reordered", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_AtkTable)),] )

model_changed = _rpythonic_function_(		"model_changed", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_AtkTable)),] )

atk_table_ref_at = _rpythonic_function_(		"atk_table_ref_at", ctypes.POINTER(_AtkObject), [
	("table",		ctypes.POINTER(_AtkTable)),
	("row",		ctypes.c_int),
	("column",		ctypes.c_int),] )

atk_table_get_index_at = _rpythonic_function_(		"atk_table_get_index_at", ctypes.c_int, [
	("table",		ctypes.POINTER(_AtkTable)),
	("row",		ctypes.c_int),
	("column",		ctypes.c_int),] )

atk_table_get_column_at_index = _rpythonic_function_(		"atk_table_get_column_at_index", ctypes.c_int, [
	("table",		ctypes.POINTER(_AtkTable)),
	("index_",		ctypes.c_int),] )

atk_table_get_type = _rpythonic_function_(		"atk_table_get_type", ctypes.c_uint, [] )

atk_table_get_row_at_index = _rpythonic_function_(		"atk_table_get_row_at_index", ctypes.c_int, [
	("table",		ctypes.POINTER(_AtkTable)),
	("index_",		ctypes.c_int),] )

atk_table_get_n_columns = _rpythonic_function_(		"atk_table_get_n_columns", ctypes.c_int, [
	("table",		ctypes.POINTER(_AtkTable)),] )

atk_table_get_n_rows = _rpythonic_function_(		"atk_table_get_n_rows", ctypes.c_int, [
	("table",		ctypes.POINTER(_AtkTable)),] )

atk_table_get_column_extent_at = _rpythonic_function_(		"atk_table_get_column_extent_at", ctypes.c_int, [
	("table",		ctypes.POINTER(_AtkTable)),
	("row",		ctypes.c_int),
	("column",		ctypes.c_int),] )

atk_table_get_row_extent_at = _rpythonic_function_(		"atk_table_get_row_extent_at", ctypes.c_int, [
	("table",		ctypes.POINTER(_AtkTable)),
	("row",		ctypes.c_int),
	("column",		ctypes.c_int),] )

atk_table_get_caption = _rpythonic_function_(		"atk_table_get_caption", ctypes.POINTER(_AtkObject), [
	("table",		ctypes.POINTER(_AtkTable)),] )

atk_table_get_column_description = _rpythonic_function_(		"atk_table_get_column_description", ctypes.POINTER(ctypes.c_char), [
	("table",		ctypes.POINTER(_AtkTable)),
	("column",		ctypes.c_int),] )

atk_table_get_column_header = _rpythonic_function_(		"atk_table_get_column_header", ctypes.POINTER(_AtkObject), [
	("table",		ctypes.POINTER(_AtkTable)),
	("column",		ctypes.c_int),] )

atk_table_get_row_description = _rpythonic_function_(		"atk_table_get_row_description", ctypes.POINTER(ctypes.c_char), [
	("table",		ctypes.POINTER(_AtkTable)),
	("row",		ctypes.c_int),] )

atk_table_get_row_header = _rpythonic_function_(		"atk_table_get_row_header", ctypes.POINTER(_AtkObject), [
	("table",		ctypes.POINTER(_AtkTable)),
	("row",		ctypes.c_int),] )

atk_table_get_summary = _rpythonic_function_(		"atk_table_get_summary", ctypes.POINTER(_AtkObject), [
	("table",		ctypes.POINTER(_AtkTable)),] )

atk_table_set_caption = _rpythonic_function_(		"atk_table_set_caption", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_AtkTable)),
	("caption",		ctypes.POINTER(_AtkObject)),] )

atk_table_set_column_description = _rpythonic_function_(		"atk_table_set_column_description", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_AtkTable)),
	("column",		ctypes.c_int),
	("description",		ctypes.POINTER(ctypes.c_char)),] )

atk_table_set_column_header = _rpythonic_function_(		"atk_table_set_column_header", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_AtkTable)),
	("column",		ctypes.c_int),
	("header",		ctypes.POINTER(_AtkObject)),] )

atk_table_set_row_description = _rpythonic_function_(		"atk_table_set_row_description", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_AtkTable)),
	("row",		ctypes.c_int),
	("description",		ctypes.POINTER(ctypes.c_char)),] )

atk_table_set_row_header = _rpythonic_function_(		"atk_table_set_row_header", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_AtkTable)),
	("row",		ctypes.c_int),
	("header",		ctypes.POINTER(_AtkObject)),] )

atk_table_set_summary = _rpythonic_function_(		"atk_table_set_summary", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_AtkTable)),
	("accessible",		ctypes.POINTER(_AtkObject)),] )

atk_table_get_selected_columns = _rpythonic_function_(		"atk_table_get_selected_columns", ctypes.c_int, [
	("table",		ctypes.POINTER(_AtkTable)),
	("selected",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),] )

atk_table_get_selected_rows = _rpythonic_function_(		"atk_table_get_selected_rows", ctypes.c_int, [
	("table",		ctypes.POINTER(_AtkTable)),
	("selected",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),] )

atk_table_is_column_selected = _rpythonic_function_(		"atk_table_is_column_selected", ctypes.c_int, [
	("table",		ctypes.POINTER(_AtkTable)),
	("column",		ctypes.c_int),] )

atk_table_is_row_selected = _rpythonic_function_(		"atk_table_is_row_selected", ctypes.c_int, [
	("table",		ctypes.POINTER(_AtkTable)),
	("row",		ctypes.c_int),] )

atk_table_is_selected = _rpythonic_function_(		"atk_table_is_selected", ctypes.c_int, [
	("table",		ctypes.POINTER(_AtkTable)),
	("row",		ctypes.c_int),
	("column",		ctypes.c_int),] )

atk_table_add_row_selection = _rpythonic_function_(		"atk_table_add_row_selection", ctypes.c_int, [
	("table",		ctypes.POINTER(_AtkTable)),
	("row",		ctypes.c_int),] )

atk_table_remove_row_selection = _rpythonic_function_(		"atk_table_remove_row_selection", ctypes.c_int, [
	("table",		ctypes.POINTER(_AtkTable)),
	("row",		ctypes.c_int),] )

atk_table_add_column_selection = _rpythonic_function_(		"atk_table_add_column_selection", ctypes.c_int, [
	("table",		ctypes.POINTER(_AtkTable)),
	("column",		ctypes.c_int),] )

atk_table_remove_column_selection = _rpythonic_function_(		"atk_table_remove_column_selection", ctypes.c_int, [
	("table",		ctypes.POINTER(_AtkTable)),
	("column",		ctypes.c_int),] )

threads_enter = _rpythonic_function_(		"threads_enter", ctypes.c_void_p, [
	("misc",		ctypes.POINTER(_AtkMisc)),] )

threads_leave = _rpythonic_function_(		"threads_leave", ctypes.c_void_p, [
	("misc",		ctypes.POINTER(_AtkMisc)),] )

atk_misc_get_type = _rpythonic_function_(		"atk_misc_get_type", ctypes.c_uint, [] )

atk_misc_threads_enter = _rpythonic_function_(		"atk_misc_threads_enter", ctypes.c_void_p, [
	("misc",		ctypes.POINTER(_AtkMisc)),] )

atk_misc_threads_leave = _rpythonic_function_(		"atk_misc_threads_leave", ctypes.c_void_p, [
	("misc",		ctypes.POINTER(_AtkMisc)),] )

atk_misc_get_instance = _rpythonic_function_(		"atk_misc_get_instance", ctypes.POINTER(_AtkMisc), [] )

get_current_value = _rpythonic_function_(		"get_current_value", ctypes.c_void_p, [
	("obj",		ctypes.POINTER(_AtkValue)),
	("value",		ctypes.POINTER(_GValue)),] )

get_maximum_value = _rpythonic_function_(		"get_maximum_value", ctypes.c_void_p, [
	("obj",		ctypes.POINTER(_AtkValue)),
	("value",		ctypes.POINTER(_GValue)),] )

get_minimum_value = _rpythonic_function_(		"get_minimum_value", ctypes.c_void_p, [
	("obj",		ctypes.POINTER(_AtkValue)),
	("value",		ctypes.POINTER(_GValue)),] )

set_current_value = _rpythonic_function_(		"set_current_value", ctypes.c_int, [
	("obj",		ctypes.POINTER(_AtkValue)),
	("value",		ctypes.POINTER(_GValue)),] )

get_minimum_increment = _rpythonic_function_(		"get_minimum_increment", ctypes.c_void_p, [
	("obj",		ctypes.POINTER(_AtkValue)),
	("value",		ctypes.POINTER(_GValue)),] )

atk_value_get_type = _rpythonic_function_(		"atk_value_get_type", ctypes.c_uint, [] )

atk_value_get_current_value = _rpythonic_function_(		"atk_value_get_current_value", ctypes.c_void_p, [
	("obj",		ctypes.POINTER(_AtkValue)),
	("value",		ctypes.POINTER(_GValue)),] )

atk_value_get_maximum_value = _rpythonic_function_(		"atk_value_get_maximum_value", ctypes.c_void_p, [
	("obj",		ctypes.POINTER(_AtkValue)),
	("value",		ctypes.POINTER(_GValue)),] )

atk_value_get_minimum_value = _rpythonic_function_(		"atk_value_get_minimum_value", ctypes.c_void_p, [
	("obj",		ctypes.POINTER(_AtkValue)),
	("value",		ctypes.POINTER(_GValue)),] )

atk_value_set_current_value = _rpythonic_function_(		"atk_value_set_current_value", ctypes.c_int, [
	("obj",		ctypes.POINTER(_AtkValue)),
	("value",		ctypes.POINTER(_GValue)),] )

atk_value_get_minimum_increment = _rpythonic_function_(		"atk_value_get_minimum_increment", ctypes.c_void_p, [
	("obj",		ctypes.POINTER(_AtkValue)),
	("value",		ctypes.POINTER(_GValue)),] )

atk_window_get_type = _rpythonic_function_(		"atk_window_get_type", ctypes.c_uint, [] )

gtk_style_context_get_type = _rpythonic_function_(		"gtk_style_context_get_type", ctypes.c_uint, [] )

gtk_style_context_new = _rpythonic_function_(		"gtk_style_context_new", ctypes.POINTER(_GtkStyleContext), [] )

gtk_style_context_add_provider_for_screen = _rpythonic_function_(		"gtk_style_context_add_provider_for_screen", ctypes.c_void_p, [
	("screen",		ctypes.POINTER(_GdkScreen)),
	("provider",		ctypes.POINTER(_GtkStyleProvider)),
	("priority",		ctypes.c_uint),] )

gtk_style_context_remove_provider_for_screen = _rpythonic_function_(		"gtk_style_context_remove_provider_for_screen", ctypes.c_void_p, [
	("screen",		ctypes.POINTER(_GdkScreen)),
	("provider",		ctypes.POINTER(_GtkStyleProvider)),] )

gtk_style_context_add_provider = _rpythonic_function_(		"gtk_style_context_add_provider", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("provider",		ctypes.POINTER(_GtkStyleProvider)),
	("priority",		ctypes.c_uint),] )

gtk_style_context_remove_provider = _rpythonic_function_(		"gtk_style_context_remove_provider", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("provider",		ctypes.POINTER(_GtkStyleProvider)),] )

gtk_style_context_save = _rpythonic_function_(		"gtk_style_context_save", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkStyleContext)),] )

gtk_style_context_restore = _rpythonic_function_(		"gtk_style_context_restore", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkStyleContext)),] )

gtk_style_context_get_property = _rpythonic_function_(		"gtk_style_context_get_property", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("property",		ctypes.POINTER(ctypes.c_char)),
	("state",		ctypes.c_int),
	("value",		ctypes.POINTER(_GValue)),] )

gtk_style_context_get_valist = _rpythonic_function_(		"gtk_style_context_get_valist", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("state",		ctypes.c_int),
	("args",		ctypes.c_char),] )

gtk_style_context_set_state = _rpythonic_function_(		"gtk_style_context_set_state", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("flags",		ctypes.c_int),] )

gtk_style_context_get_state = _rpythonic_function_(		"gtk_style_context_get_state", ctypes.c_int, [
	("context",		ctypes.POINTER(_GtkStyleContext)),] )

gtk_style_context_state_is_running = _rpythonic_function_(		"gtk_style_context_state_is_running", ctypes.c_int, [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("state",		ctypes.c_int),
	("progress",		ctypes.POINTER(ctypes.c_double)),] )

gtk_style_context_set_path = _rpythonic_function_(		"gtk_style_context_set_path", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("path",		ctypes.POINTER(_GtkWidgetPath)),] )

gtk_style_context_get_path = _rpythonic_function_(		"gtk_style_context_get_path", ctypes.POINTER(_GtkWidgetPath), [
	("context",		ctypes.POINTER(_GtkStyleContext)),] )

gtk_style_context_list_classes = _rpythonic_function_(		"gtk_style_context_list_classes", ctypes.POINTER(_GList), [
	("context",		ctypes.POINTER(_GtkStyleContext)),] )

gtk_style_context_add_class = _rpythonic_function_(		"gtk_style_context_add_class", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("class_name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_style_context_remove_class = _rpythonic_function_(		"gtk_style_context_remove_class", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("class_name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_style_context_has_class = _rpythonic_function_(		"gtk_style_context_has_class", ctypes.c_int, [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("class_name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_style_context_list_regions = _rpythonic_function_(		"gtk_style_context_list_regions", ctypes.POINTER(_GList), [
	("context",		ctypes.POINTER(_GtkStyleContext)),] )

gtk_style_context_add_region = _rpythonic_function_(		"gtk_style_context_add_region", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("region_name",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),] )

gtk_style_context_remove_region = _rpythonic_function_(		"gtk_style_context_remove_region", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("region_name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_style_context_has_region = _rpythonic_function_(		"gtk_style_context_has_region", ctypes.c_int, [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("region_name",		ctypes.POINTER(ctypes.c_char)),
	("flags_return",		ctypes.POINTER(ctypes.c_int)),] )

gtk_style_context_get_style_property = _rpythonic_function_(		"gtk_style_context_get_style_property", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("property_name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(_GValue)),] )

gtk_style_context_get_style_valist = _rpythonic_function_(		"gtk_style_context_get_style_valist", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("args",		ctypes.c_char),] )

gtk_style_context_lookup_icon_set = _rpythonic_function_(		"gtk_style_context_lookup_icon_set", ctypes.POINTER(_GtkIconSet), [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("stock_id",		ctypes.POINTER(ctypes.c_char)),] )

gtk_icon_set_render_icon_pixbuf = _rpythonic_function_(		"gtk_icon_set_render_icon_pixbuf", ctypes.POINTER(_GdkPixbuf), [
	("icon_set",		ctypes.POINTER(_GtkIconSet)),
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("size",		ctypes.c_int),] )

gtk_style_context_set_screen = _rpythonic_function_(		"gtk_style_context_set_screen", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("screen",		ctypes.POINTER(_GdkScreen)),] )

gtk_style_context_get_screen = _rpythonic_function_(		"gtk_style_context_get_screen", ctypes.POINTER(_GdkScreen), [
	("context",		ctypes.POINTER(_GtkStyleContext)),] )

gtk_style_context_set_direction = _rpythonic_function_(		"gtk_style_context_set_direction", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("direction",		ctypes.c_int),] )

gtk_style_context_get_direction = _rpythonic_function_(		"gtk_style_context_get_direction", ctypes.c_int, [
	("context",		ctypes.POINTER(_GtkStyleContext)),] )

gtk_style_context_set_junction_sides = _rpythonic_function_(		"gtk_style_context_set_junction_sides", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("sides",		ctypes.c_int),] )

gtk_style_context_get_junction_sides = _rpythonic_function_(		"gtk_style_context_get_junction_sides", ctypes.c_int, [
	("context",		ctypes.POINTER(_GtkStyleContext)),] )

gtk_style_context_lookup_color = _rpythonic_function_(		"gtk_style_context_lookup_color", ctypes.c_int, [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("color_name",		ctypes.POINTER(ctypes.c_char)),
	("color",		ctypes.POINTER(_GdkRGBA)),] )

gtk_style_context_notify_state_change = _rpythonic_function_(		"gtk_style_context_notify_state_change", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("window",		ctypes.POINTER(_GdkWindow)),
	("region_id",		ctypes.POINTER(ctypes.c_void_p)),
	("state",		ctypes.c_int),
	("state_value",		ctypes.c_int),] )

gtk_style_context_cancel_animations = _rpythonic_function_(		"gtk_style_context_cancel_animations", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("region_id",		ctypes.POINTER(ctypes.c_void_p)),] )

gtk_style_context_scroll_animations = _rpythonic_function_(		"gtk_style_context_scroll_animations", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("window",		ctypes.POINTER(_GdkWindow)),
	("dx",		ctypes.c_int),
	("dy",		ctypes.c_int),] )

gtk_style_context_push_animatable_region = _rpythonic_function_(		"gtk_style_context_push_animatable_region", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("region_id",		ctypes.POINTER(ctypes.c_void_p)),] )

gtk_style_context_pop_animatable_region = _rpythonic_function_(		"gtk_style_context_pop_animatable_region", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkStyleContext)),] )

gtk_style_context_get_color = _rpythonic_function_(		"gtk_style_context_get_color", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("state",		ctypes.c_int),
	("color",		ctypes.POINTER(_GdkRGBA)),] )

gtk_style_context_get_background_color = _rpythonic_function_(		"gtk_style_context_get_background_color", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("state",		ctypes.c_int),
	("color",		ctypes.POINTER(_GdkRGBA)),] )

gtk_style_context_get_border_color = _rpythonic_function_(		"gtk_style_context_get_border_color", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("state",		ctypes.c_int),
	("color",		ctypes.POINTER(_GdkRGBA)),] )

gtk_style_context_get_font = _rpythonic_function_(		"gtk_style_context_get_font", ctypes.POINTER(_PangoFontDescription), [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("state",		ctypes.c_int),] )

gtk_style_context_get_border = _rpythonic_function_(		"gtk_style_context_get_border", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("state",		ctypes.c_int),
	("border",		ctypes.POINTER(_GtkBorder)),] )

gtk_style_context_get_padding = _rpythonic_function_(		"gtk_style_context_get_padding", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("state",		ctypes.c_int),
	("padding",		ctypes.POINTER(_GtkBorder)),] )

gtk_style_context_get_margin = _rpythonic_function_(		"gtk_style_context_get_margin", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("state",		ctypes.c_int),
	("margin",		ctypes.POINTER(_GtkBorder)),] )

gtk_style_context_invalidate = _rpythonic_function_(		"gtk_style_context_invalidate", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkStyleContext)),] )

gtk_style_context_reset_widgets = _rpythonic_function_(		"gtk_style_context_reset_widgets", ctypes.c_void_p, [
	("screen",		ctypes.POINTER(_GdkScreen)),] )

gtk_style_context_set_background = _rpythonic_function_(		"gtk_style_context_set_background", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("window",		ctypes.POINTER(_GdkWindow)),] )

gtk_render_check = _rpythonic_function_(		"gtk_render_check", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("cr",		ctypes.POINTER(_cairo)),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("width",		ctypes.c_double),
	("height",		ctypes.c_double),] )

gtk_render_option = _rpythonic_function_(		"gtk_render_option", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("cr",		ctypes.POINTER(_cairo)),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("width",		ctypes.c_double),
	("height",		ctypes.c_double),] )

gtk_render_arrow = _rpythonic_function_(		"gtk_render_arrow", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("cr",		ctypes.POINTER(_cairo)),
	("angle",		ctypes.c_double),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("size",		ctypes.c_double),] )

gtk_render_background = _rpythonic_function_(		"gtk_render_background", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("cr",		ctypes.POINTER(_cairo)),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("width",		ctypes.c_double),
	("height",		ctypes.c_double),] )

gtk_render_frame = _rpythonic_function_(		"gtk_render_frame", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("cr",		ctypes.POINTER(_cairo)),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("width",		ctypes.c_double),
	("height",		ctypes.c_double),] )

gtk_render_expander = _rpythonic_function_(		"gtk_render_expander", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("cr",		ctypes.POINTER(_cairo)),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("width",		ctypes.c_double),
	("height",		ctypes.c_double),] )

gtk_render_focus = _rpythonic_function_(		"gtk_render_focus", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("cr",		ctypes.POINTER(_cairo)),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("width",		ctypes.c_double),
	("height",		ctypes.c_double),] )

gtk_render_layout = _rpythonic_function_(		"gtk_render_layout", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("cr",		ctypes.POINTER(_cairo)),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("layout",		ctypes.POINTER(_PangoLayout)),] )

gtk_render_line = _rpythonic_function_(		"gtk_render_line", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("cr",		ctypes.POINTER(_cairo)),
	("x0",		ctypes.c_double),
	("y0",		ctypes.c_double),
	("x1",		ctypes.c_double),
	("y1",		ctypes.c_double),] )

gtk_render_slider = _rpythonic_function_(		"gtk_render_slider", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("cr",		ctypes.POINTER(_cairo)),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("width",		ctypes.c_double),
	("height",		ctypes.c_double),
	("orientation",		ctypes.c_int),] )

gtk_render_frame_gap = _rpythonic_function_(		"gtk_render_frame_gap", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("cr",		ctypes.POINTER(_cairo)),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("width",		ctypes.c_double),
	("height",		ctypes.c_double),
	("gap_side",		ctypes.c_int),
	("xy0_gap",		ctypes.c_double),
	("xy1_gap",		ctypes.c_double),] )

gtk_render_extension = _rpythonic_function_(		"gtk_render_extension", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("cr",		ctypes.POINTER(_cairo)),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("width",		ctypes.c_double),
	("height",		ctypes.c_double),
	("gap_side",		ctypes.c_int),] )

gtk_render_handle = _rpythonic_function_(		"gtk_render_handle", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("cr",		ctypes.POINTER(_cairo)),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("width",		ctypes.c_double),
	("height",		ctypes.c_double),] )

gtk_render_activity = _rpythonic_function_(		"gtk_render_activity", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("cr",		ctypes.POINTER(_cairo)),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("width",		ctypes.c_double),
	("height",		ctypes.c_double),] )

gtk_render_icon_pixbuf = _rpythonic_function_(		"gtk_render_icon_pixbuf", ctypes.POINTER(_GdkPixbuf), [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("source",		ctypes.POINTER(_GtkIconSource)),
	("size",		ctypes.c_int),] )

gtk_render_icon = _rpythonic_function_(		"gtk_render_icon", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("cr",		ctypes.POINTER(_cairo)),
	("pixbuf",		ctypes.POINTER(_GdkPixbuf)),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),] )

_gtk_style_context_get_attributes = _rpythonic_function_(		"_gtk_style_context_get_attributes", ctypes.POINTER(_GSList), [
	("attributes",		ctypes.POINTER(_GSList)),
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("flags",		ctypes.c_int),] )

GtkCallback = _rpythonic_function_(		"GtkCallback", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

dispatch_child_properties_changed = _rpythonic_function_(		"dispatch_child_properties_changed", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("n_pspecs",		ctypes.c_uint),
	("pspecs",		ctypes.POINTER(ctypes.POINTER(_GParamSpec))),] )

show = _rpythonic_function_(		"show", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

show_all = _rpythonic_function_(		"show_all", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

hide = _rpythonic_function_(		"hide", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

map = _rpythonic_function_(		"map", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

unmap = _rpythonic_function_(		"unmap", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

size_allocate = _rpythonic_function_(		"size_allocate", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("allocation",		ctypes.POINTER(_cairo_rectangle_int)),] )

state_changed = _rpythonic_function_(		"state_changed", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("previous_state",		ctypes.c_int),] )

state_flags_changed = _rpythonic_function_(		"state_flags_changed", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("previous_state_flags",		ctypes.c_int),] )

parent_set = _rpythonic_function_(		"parent_set", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("previous_parent",		ctypes.POINTER(_GtkWidget)),] )

hierarchy_changed = _rpythonic_function_(		"hierarchy_changed", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("previous_toplevel",		ctypes.POINTER(_GtkWidget)),] )

style_set = _rpythonic_function_(		"style_set", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("previous_style",		ctypes.POINTER(_GtkStyle)),] )

direction_changed = _rpythonic_function_(		"direction_changed", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("previous_direction",		ctypes.c_int),] )

grab_notify = _rpythonic_function_(		"grab_notify", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("was_grabbed",		ctypes.c_int),] )

child_notify = _rpythonic_function_(		"child_notify", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

draw = _rpythonic_function_(		"draw", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("cr",		ctypes.POINTER(_cairo)),] )

get_request_mode = _rpythonic_function_(		"get_request_mode", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

get_preferred_height = _rpythonic_function_(		"get_preferred_height", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("minimum_height",		ctypes.POINTER(ctypes.c_int)),
	("natural_height",		ctypes.POINTER(ctypes.c_int)),] )

get_preferred_width_for_height = _rpythonic_function_(		"get_preferred_width_for_height", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("height",		ctypes.c_int),
	("minimum_width",		ctypes.POINTER(ctypes.c_int)),
	("natural_width",		ctypes.POINTER(ctypes.c_int)),] )

get_preferred_width = _rpythonic_function_(		"get_preferred_width", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("minimum_width",		ctypes.POINTER(ctypes.c_int)),
	("natural_width",		ctypes.POINTER(ctypes.c_int)),] )

get_preferred_height_for_width = _rpythonic_function_(		"get_preferred_height_for_width", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("width",		ctypes.c_int),
	("minimum_height",		ctypes.POINTER(ctypes.c_int)),
	("natural_height",		ctypes.POINTER(ctypes.c_int)),] )

mnemonic_activate = _rpythonic_function_(		"mnemonic_activate", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("group_cycling",		ctypes.c_int),] )

focus = _rpythonic_function_(		"focus", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("direction",		ctypes.c_int),] )

move_focus = _rpythonic_function_(		"move_focus", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("direction",		ctypes.c_int),] )

keynav_failed = _rpythonic_function_(		"keynav_failed", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("direction",		ctypes.c_int),] )

event = _rpythonic_function_(		"event", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("event",		ctypes.POINTER(_GdkEvent)),] )

button_press_event = _rpythonic_function_(		"button_press_event", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("event",		ctypes.POINTER(_GdkEventButton)),] )

button_release_event = _rpythonic_function_(		"button_release_event", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("event",		ctypes.POINTER(_GdkEventButton)),] )

scroll_event = _rpythonic_function_(		"scroll_event", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("event",		ctypes.POINTER(_GdkEventScroll)),] )

motion_notify_event = _rpythonic_function_(		"motion_notify_event", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("event",		ctypes.POINTER(_GdkEventMotion)),] )

delete_event = _rpythonic_function_(		"delete_event", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("event",		ctypes.POINTER(_GdkEventAny)),] )

destroy_event = _rpythonic_function_(		"destroy_event", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("event",		ctypes.POINTER(_GdkEventAny)),] )

key_press_event = _rpythonic_function_(		"key_press_event", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("event",		ctypes.POINTER(_GdkEventKey)),] )

key_release_event = _rpythonic_function_(		"key_release_event", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("event",		ctypes.POINTER(_GdkEventKey)),] )

enter_notify_event = _rpythonic_function_(		"enter_notify_event", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("event",		ctypes.POINTER(_GdkEventCrossing)),] )

leave_notify_event = _rpythonic_function_(		"leave_notify_event", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("event",		ctypes.POINTER(_GdkEventCrossing)),] )

configure_event = _rpythonic_function_(		"configure_event", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("event",		ctypes.POINTER(_GdkEventConfigure)),] )

focus_in_event = _rpythonic_function_(		"focus_in_event", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("event",		ctypes.POINTER(_GdkEventFocus)),] )

focus_out_event = _rpythonic_function_(		"focus_out_event", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("event",		ctypes.POINTER(_GdkEventFocus)),] )

map_event = _rpythonic_function_(		"map_event", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("event",		ctypes.POINTER(_GdkEventAny)),] )

unmap_event = _rpythonic_function_(		"unmap_event", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("event",		ctypes.POINTER(_GdkEventAny)),] )

property_notify_event = _rpythonic_function_(		"property_notify_event", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("event",		ctypes.POINTER(_GdkEventProperty)),] )

selection_clear_event = _rpythonic_function_(		"selection_clear_event", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("event",		ctypes.POINTER(_GdkEventSelection)),] )

selection_request_event = _rpythonic_function_(		"selection_request_event", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("event",		ctypes.POINTER(_GdkEventSelection)),] )

selection_notify_event = _rpythonic_function_(		"selection_notify_event", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("event",		ctypes.POINTER(_GdkEventSelection)),] )

proximity_in_event = _rpythonic_function_(		"proximity_in_event", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("event",		ctypes.POINTER(_GdkEventProximity)),] )

proximity_out_event = _rpythonic_function_(		"proximity_out_event", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("event",		ctypes.POINTER(_GdkEventProximity)),] )

visibility_notify_event = _rpythonic_function_(		"visibility_notify_event", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("event",		ctypes.POINTER(_GdkEventVisibility)),] )

window_state_event = _rpythonic_function_(		"window_state_event", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("event",		ctypes.POINTER(_GdkEventWindowState)),] )

damage_event = _rpythonic_function_(		"damage_event", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("event",		ctypes.POINTER(_GdkEventExpose)),] )

grab_broken_event = _rpythonic_function_(		"grab_broken_event", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("event",		ctypes.POINTER(_GdkEventGrabBroken)),] )

selection_get = _rpythonic_function_(		"selection_get", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("selection_data",		ctypes.POINTER(_GtkSelectionData)),
	("info",		ctypes.c_uint),
	("time_",		ctypes.c_uint),] )

selection_received = _rpythonic_function_(		"selection_received", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("selection_data",		ctypes.POINTER(_GtkSelectionData)),
	("time_",		ctypes.c_uint),] )

drag_begin = _rpythonic_function_(		"drag_begin", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("context",		ctypes.POINTER(_GdkDragContext)),] )

drag_end = _rpythonic_function_(		"drag_end", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("context",		ctypes.POINTER(_GdkDragContext)),] )

drag_data_get = _rpythonic_function_(		"drag_data_get", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("context",		ctypes.POINTER(_GdkDragContext)),
	("selection_data",		ctypes.POINTER(_GtkSelectionData)),
	("info",		ctypes.c_uint),
	("time_",		ctypes.c_uint),] )

drag_data_delete = _rpythonic_function_(		"drag_data_delete", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("context",		ctypes.POINTER(_GdkDragContext)),] )

drag_leave = _rpythonic_function_(		"drag_leave", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("context",		ctypes.POINTER(_GdkDragContext)),
	("time_",		ctypes.c_uint),] )

drag_motion = _rpythonic_function_(		"drag_motion", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("context",		ctypes.POINTER(_GdkDragContext)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("time_",		ctypes.c_uint),] )

drag_drop = _rpythonic_function_(		"drag_drop", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("context",		ctypes.POINTER(_GdkDragContext)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("time_",		ctypes.c_uint),] )

drag_data_received = _rpythonic_function_(		"drag_data_received", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("context",		ctypes.POINTER(_GdkDragContext)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("selection_data",		ctypes.POINTER(_GtkSelectionData)),
	("info",		ctypes.c_uint),
	("time_",		ctypes.c_uint),] )

drag_failed = _rpythonic_function_(		"drag_failed", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("context",		ctypes.POINTER(_GdkDragContext)),
	("result",		ctypes.c_int),] )

popup_menu = _rpythonic_function_(		"popup_menu", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

show_help = _rpythonic_function_(		"show_help", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("help_type",		ctypes.c_int),] )

get_accessible = _rpythonic_function_(		"get_accessible", ctypes.POINTER(_AtkObject), [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

screen_changed = _rpythonic_function_(		"screen_changed", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("previous_screen",		ctypes.POINTER(_GdkScreen)),] )

can_activate_accel = _rpythonic_function_(		"can_activate_accel", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("signal_id",		ctypes.c_uint),] )

composited_changed = _rpythonic_function_(		"composited_changed", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

query_tooltip = _rpythonic_function_(		"query_tooltip", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("keyboard_tooltip",		ctypes.c_int),
	("tooltip",		ctypes.POINTER(_GtkTooltip)),] )

compute_expand = _rpythonic_function_(		"compute_expand", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("hexpand_p",		ctypes.POINTER(ctypes.c_int)),
	("vexpand_p",		ctypes.POINTER(ctypes.c_int)),] )

adjust_size_request = _rpythonic_function_(		"adjust_size_request", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("orientation",		ctypes.c_int),
	("minimum_size",		ctypes.POINTER(ctypes.c_int)),
	("natural_size",		ctypes.POINTER(ctypes.c_int)),] )

adjust_size_allocation = _rpythonic_function_(		"adjust_size_allocation", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("orientation",		ctypes.c_int),
	("minimum_size",		ctypes.POINTER(ctypes.c_int)),
	("natural_size",		ctypes.POINTER(ctypes.c_int)),
	("allocated_pos",		ctypes.POINTER(ctypes.c_int)),
	("allocated_size",		ctypes.POINTER(ctypes.c_int)),] )

style_updated = _rpythonic_function_(		"style_updated", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_get_type = _rpythonic_function_(		"gtk_widget_get_type", ctypes.c_uint, [] )

gtk_widget_destroy = _rpythonic_function_(		"gtk_widget_destroy", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_destroyed = _rpythonic_function_(		"gtk_widget_destroyed", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("widget_pointer",		ctypes.POINTER(ctypes.POINTER(_GtkWidget))),] )

gtk_widget_unparent = _rpythonic_function_(		"gtk_widget_unparent", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_show = _rpythonic_function_(		"gtk_widget_show", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_hide = _rpythonic_function_(		"gtk_widget_hide", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_show_now = _rpythonic_function_(		"gtk_widget_show_now", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_show_all = _rpythonic_function_(		"gtk_widget_show_all", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_set_no_show_all = _rpythonic_function_(		"gtk_widget_set_no_show_all", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("no_show_all",		ctypes.c_int),] )

gtk_widget_get_no_show_all = _rpythonic_function_(		"gtk_widget_get_no_show_all", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_map = _rpythonic_function_(		"gtk_widget_map", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_unmap = _rpythonic_function_(		"gtk_widget_unmap", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_realize = _rpythonic_function_(		"gtk_widget_realize", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_unrealize = _rpythonic_function_(		"gtk_widget_unrealize", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_draw = _rpythonic_function_(		"gtk_widget_draw", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("cr",		ctypes.POINTER(_cairo)),] )

gtk_widget_queue_draw = _rpythonic_function_(		"gtk_widget_queue_draw", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_queue_draw_area = _rpythonic_function_(		"gtk_widget_queue_draw_area", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

gtk_widget_queue_draw_region = _rpythonic_function_(		"gtk_widget_queue_draw_region", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("region",		ctypes.POINTER(_cairo_region)),] )

gtk_widget_queue_resize = _rpythonic_function_(		"gtk_widget_queue_resize", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_queue_resize_no_redraw = _rpythonic_function_(		"gtk_widget_queue_resize_no_redraw", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_size_request = _rpythonic_function_(		"gtk_widget_size_request", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("requisition",		ctypes.POINTER(_GtkRequisition)),] )

gtk_widget_size_allocate = _rpythonic_function_(		"gtk_widget_size_allocate", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("allocation",		ctypes.POINTER(_cairo_rectangle_int)),] )

gtk_widget_get_request_mode = _rpythonic_function_(		"gtk_widget_get_request_mode", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_get_preferred_width = _rpythonic_function_(		"gtk_widget_get_preferred_width", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("minimum_width",		ctypes.POINTER(ctypes.c_int)),
	("natural_width",		ctypes.POINTER(ctypes.c_int)),] )

gtk_widget_get_preferred_height_for_width = _rpythonic_function_(		"gtk_widget_get_preferred_height_for_width", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("width",		ctypes.c_int),
	("minimum_height",		ctypes.POINTER(ctypes.c_int)),
	("natural_height",		ctypes.POINTER(ctypes.c_int)),] )

gtk_widget_get_preferred_height = _rpythonic_function_(		"gtk_widget_get_preferred_height", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("minimum_height",		ctypes.POINTER(ctypes.c_int)),
	("natural_height",		ctypes.POINTER(ctypes.c_int)),] )

gtk_widget_get_preferred_width_for_height = _rpythonic_function_(		"gtk_widget_get_preferred_width_for_height", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("height",		ctypes.c_int),
	("minimum_width",		ctypes.POINTER(ctypes.c_int)),
	("natural_width",		ctypes.POINTER(ctypes.c_int)),] )

gtk_widget_get_preferred_size = _rpythonic_function_(		"gtk_widget_get_preferred_size", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("minimum_size",		ctypes.POINTER(_GtkRequisition)),
	("natural_size",		ctypes.POINTER(_GtkRequisition)),] )

gtk_widget_get_child_requisition = _rpythonic_function_(		"gtk_widget_get_child_requisition", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("requisition",		ctypes.POINTER(_GtkRequisition)),] )

gtk_widget_add_accelerator = _rpythonic_function_(		"gtk_widget_add_accelerator", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("accel_signal",		ctypes.POINTER(ctypes.c_char)),
	("accel_group",		ctypes.POINTER(_GtkAccelGroup)),
	("accel_key",		ctypes.c_uint),
	("accel_mods",		ctypes.c_int),
	("accel_flags",		ctypes.c_int),] )

gtk_widget_remove_accelerator = _rpythonic_function_(		"gtk_widget_remove_accelerator", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("accel_group",		ctypes.POINTER(_GtkAccelGroup)),
	("accel_key",		ctypes.c_uint),
	("accel_mods",		ctypes.c_int),] )

gtk_widget_set_accel_path = _rpythonic_function_(		"gtk_widget_set_accel_path", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("accel_path",		ctypes.POINTER(ctypes.c_char)),
	("accel_group",		ctypes.POINTER(_GtkAccelGroup)),] )

gtk_widget_list_accel_closures = _rpythonic_function_(		"gtk_widget_list_accel_closures", ctypes.POINTER(_GList), [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_can_activate_accel = _rpythonic_function_(		"gtk_widget_can_activate_accel", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("signal_id",		ctypes.c_uint),] )

gtk_widget_mnemonic_activate = _rpythonic_function_(		"gtk_widget_mnemonic_activate", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("group_cycling",		ctypes.c_int),] )

gtk_widget_event = _rpythonic_function_(		"gtk_widget_event", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("event",		ctypes.POINTER(_GdkEvent)),] )

gtk_widget_send_expose = _rpythonic_function_(		"gtk_widget_send_expose", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("event",		ctypes.POINTER(_GdkEvent)),] )

gtk_widget_send_focus_change = _rpythonic_function_(		"gtk_widget_send_focus_change", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("event",		ctypes.POINTER(_GdkEvent)),] )

gtk_widget_activate = _rpythonic_function_(		"gtk_widget_activate", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_reparent = _rpythonic_function_(		"gtk_widget_reparent", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("new_parent",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_intersect = _rpythonic_function_(		"gtk_widget_intersect", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("area",		ctypes.POINTER(_cairo_rectangle_int)),
	("intersection",		ctypes.POINTER(_cairo_rectangle_int)),] )

gtk_widget_region_intersect = _rpythonic_function_(		"gtk_widget_region_intersect", ctypes.POINTER(_cairo_region), [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("region",		ctypes.POINTER(_cairo_region)),] )

gtk_widget_freeze_child_notify = _rpythonic_function_(		"gtk_widget_freeze_child_notify", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_child_notify = _rpythonic_function_(		"gtk_widget_child_notify", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("child_property",		ctypes.POINTER(ctypes.c_char)),] )

gtk_widget_thaw_child_notify = _rpythonic_function_(		"gtk_widget_thaw_child_notify", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_set_can_focus = _rpythonic_function_(		"gtk_widget_set_can_focus", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("can_focus",		ctypes.c_int),] )

gtk_widget_get_can_focus = _rpythonic_function_(		"gtk_widget_get_can_focus", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_has_focus = _rpythonic_function_(		"gtk_widget_has_focus", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_is_focus = _rpythonic_function_(		"gtk_widget_is_focus", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_has_visible_focus = _rpythonic_function_(		"gtk_widget_has_visible_focus", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_grab_focus = _rpythonic_function_(		"gtk_widget_grab_focus", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_set_can_default = _rpythonic_function_(		"gtk_widget_set_can_default", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("can_default",		ctypes.c_int),] )

gtk_widget_get_can_default = _rpythonic_function_(		"gtk_widget_get_can_default", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_has_default = _rpythonic_function_(		"gtk_widget_has_default", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_grab_default = _rpythonic_function_(		"gtk_widget_grab_default", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_set_receives_default = _rpythonic_function_(		"gtk_widget_set_receives_default", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("receives_default",		ctypes.c_int),] )

gtk_widget_get_receives_default = _rpythonic_function_(		"gtk_widget_get_receives_default", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_has_grab = _rpythonic_function_(		"gtk_widget_has_grab", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_device_is_shadowed = _rpythonic_function_(		"gtk_widget_device_is_shadowed", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("device",		ctypes.POINTER(_GdkDevice)),] )

gtk_widget_set_name = _rpythonic_function_(		"gtk_widget_set_name", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_widget_get_name = _rpythonic_function_(		"gtk_widget_get_name", ctypes.POINTER(ctypes.c_char), [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_set_state = _rpythonic_function_(		"gtk_widget_set_state", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("state",		ctypes.c_int),] )

gtk_widget_get_state = _rpythonic_function_(		"gtk_widget_get_state", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_set_state_flags = _rpythonic_function_(		"gtk_widget_set_state_flags", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("flags",		ctypes.c_int),
	("clear",		ctypes.c_int),] )

gtk_widget_unset_state_flags = _rpythonic_function_(		"gtk_widget_unset_state_flags", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("flags",		ctypes.c_int),] )

gtk_widget_get_state_flags = _rpythonic_function_(		"gtk_widget_get_state_flags", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_set_sensitive = _rpythonic_function_(		"gtk_widget_set_sensitive", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("sensitive",		ctypes.c_int),] )

gtk_widget_get_sensitive = _rpythonic_function_(		"gtk_widget_get_sensitive", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_is_sensitive = _rpythonic_function_(		"gtk_widget_is_sensitive", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_set_visible = _rpythonic_function_(		"gtk_widget_set_visible", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("visible",		ctypes.c_int),] )

gtk_widget_get_visible = _rpythonic_function_(		"gtk_widget_get_visible", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_set_has_window = _rpythonic_function_(		"gtk_widget_set_has_window", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("has_window",		ctypes.c_int),] )

gtk_widget_get_has_window = _rpythonic_function_(		"gtk_widget_get_has_window", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_is_toplevel = _rpythonic_function_(		"gtk_widget_is_toplevel", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_is_drawable = _rpythonic_function_(		"gtk_widget_is_drawable", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_set_realized = _rpythonic_function_(		"gtk_widget_set_realized", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("realized",		ctypes.c_int),] )

gtk_widget_get_realized = _rpythonic_function_(		"gtk_widget_get_realized", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_set_mapped = _rpythonic_function_(		"gtk_widget_set_mapped", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("mapped",		ctypes.c_int),] )

gtk_widget_get_mapped = _rpythonic_function_(		"gtk_widget_get_mapped", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_set_app_paintable = _rpythonic_function_(		"gtk_widget_set_app_paintable", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("app_paintable",		ctypes.c_int),] )

gtk_widget_get_app_paintable = _rpythonic_function_(		"gtk_widget_get_app_paintable", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_set_double_buffered = _rpythonic_function_(		"gtk_widget_set_double_buffered", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("double_buffered",		ctypes.c_int),] )

gtk_widget_get_double_buffered = _rpythonic_function_(		"gtk_widget_get_double_buffered", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_set_redraw_on_allocate = _rpythonic_function_(		"gtk_widget_set_redraw_on_allocate", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("redraw_on_allocate",		ctypes.c_int),] )

gtk_widget_set_parent = _rpythonic_function_(		"gtk_widget_set_parent", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("parent",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_get_parent = _rpythonic_function_(		"gtk_widget_get_parent", ctypes.POINTER(_GtkWidget), [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_set_parent_window = _rpythonic_function_(		"gtk_widget_set_parent_window", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("parent_window",		ctypes.POINTER(_GdkWindow)),] )

gtk_widget_get_parent_window = _rpythonic_function_(		"gtk_widget_get_parent_window", ctypes.POINTER(_GdkWindow), [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_set_child_visible = _rpythonic_function_(		"gtk_widget_set_child_visible", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("is_visible",		ctypes.c_int),] )

gtk_widget_get_child_visible = _rpythonic_function_(		"gtk_widget_get_child_visible", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_set_window = _rpythonic_function_(		"gtk_widget_set_window", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("window",		ctypes.POINTER(_GdkWindow)),] )

gtk_widget_get_window = _rpythonic_function_(		"gtk_widget_get_window", ctypes.POINTER(_GdkWindow), [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_get_allocated_width = _rpythonic_function_(		"gtk_widget_get_allocated_width", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_get_allocated_height = _rpythonic_function_(		"gtk_widget_get_allocated_height", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_get_allocation = _rpythonic_function_(		"gtk_widget_get_allocation", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("allocation",		ctypes.POINTER(_cairo_rectangle_int)),] )

gtk_widget_set_allocation = _rpythonic_function_(		"gtk_widget_set_allocation", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("allocation",		ctypes.POINTER(_cairo_rectangle_int)),] )

gtk_widget_get_requisition = _rpythonic_function_(		"gtk_widget_get_requisition", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("requisition",		ctypes.POINTER(_GtkRequisition)),] )

gtk_widget_child_focus = _rpythonic_function_(		"gtk_widget_child_focus", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("direction",		ctypes.c_int),] )

gtk_widget_keynav_failed = _rpythonic_function_(		"gtk_widget_keynav_failed", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("direction",		ctypes.c_int),] )

gtk_widget_error_bell = _rpythonic_function_(		"gtk_widget_error_bell", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_set_size_request = _rpythonic_function_(		"gtk_widget_set_size_request", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

gtk_widget_get_size_request = _rpythonic_function_(		"gtk_widget_get_size_request", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("width",		ctypes.POINTER(ctypes.c_int)),
	("height",		ctypes.POINTER(ctypes.c_int)),] )

gtk_widget_set_events = _rpythonic_function_(		"gtk_widget_set_events", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("events",		ctypes.c_int),] )

gtk_widget_add_events = _rpythonic_function_(		"gtk_widget_add_events", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("events",		ctypes.c_int),] )

gtk_widget_set_device_events = _rpythonic_function_(		"gtk_widget_set_device_events", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("device",		ctypes.POINTER(_GdkDevice)),
	("events",		ctypes.c_int),] )

gtk_widget_add_device_events = _rpythonic_function_(		"gtk_widget_add_device_events", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("device",		ctypes.POINTER(_GdkDevice)),
	("events",		ctypes.c_int),] )

gtk_widget_set_device_enabled = _rpythonic_function_(		"gtk_widget_set_device_enabled", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("device",		ctypes.POINTER(_GdkDevice)),
	("enabled",		ctypes.c_int),] )

gtk_widget_get_device_enabled = _rpythonic_function_(		"gtk_widget_get_device_enabled", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("device",		ctypes.POINTER(_GdkDevice)),] )

gtk_widget_get_toplevel = _rpythonic_function_(		"gtk_widget_get_toplevel", ctypes.POINTER(_GtkWidget), [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_get_ancestor = _rpythonic_function_(		"gtk_widget_get_ancestor", ctypes.POINTER(_GtkWidget), [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("widget_type",		ctypes.c_uint),] )

gtk_widget_get_visual = _rpythonic_function_(		"gtk_widget_get_visual", ctypes.POINTER(_GdkVisual), [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_set_visual = _rpythonic_function_(		"gtk_widget_set_visual", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("visual",		ctypes.POINTER(_GdkVisual)),] )

gtk_widget_get_screen = _rpythonic_function_(		"gtk_widget_get_screen", ctypes.POINTER(_GdkScreen), [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_has_screen = _rpythonic_function_(		"gtk_widget_has_screen", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_get_display = _rpythonic_function_(		"gtk_widget_get_display", ctypes.POINTER(_GdkDisplay), [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_get_root_window = _rpythonic_function_(		"gtk_widget_get_root_window", ctypes.POINTER(_GdkWindow), [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_get_settings = _rpythonic_function_(		"gtk_widget_get_settings", ctypes.POINTER(_GtkSettings), [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_get_clipboard = _rpythonic_function_(		"gtk_widget_get_clipboard", ctypes.POINTER(_GtkClipboard), [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("selection",		ctypes.POINTER(_GdkAtom)),] )

gtk_widget_get_hexpand = _rpythonic_function_(		"gtk_widget_get_hexpand", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_set_hexpand = _rpythonic_function_(		"gtk_widget_set_hexpand", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("expand",		ctypes.c_int),] )

gtk_widget_get_hexpand_set = _rpythonic_function_(		"gtk_widget_get_hexpand_set", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_set_hexpand_set = _rpythonic_function_(		"gtk_widget_set_hexpand_set", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("set",		ctypes.c_int),] )

gtk_widget_get_vexpand = _rpythonic_function_(		"gtk_widget_get_vexpand", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_set_vexpand = _rpythonic_function_(		"gtk_widget_set_vexpand", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("expand",		ctypes.c_int),] )

gtk_widget_get_vexpand_set = _rpythonic_function_(		"gtk_widget_get_vexpand_set", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_set_vexpand_set = _rpythonic_function_(		"gtk_widget_set_vexpand_set", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("set",		ctypes.c_int),] )

gtk_widget_queue_compute_expand = _rpythonic_function_(		"gtk_widget_queue_compute_expand", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_compute_expand = _rpythonic_function_(		"gtk_widget_compute_expand", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("orientation",		ctypes.c_int),] )

gtk_widget_get_support_multidevice = _rpythonic_function_(		"gtk_widget_get_support_multidevice", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_set_support_multidevice = _rpythonic_function_(		"gtk_widget_set_support_multidevice", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("support_multidevice",		ctypes.c_int),] )

gtk_widget_class_set_accessible_type = _rpythonic_function_(		"gtk_widget_class_set_accessible_type", ctypes.c_void_p, [
	("widget_class",		ctypes.POINTER(_GtkWidgetClass)),
	("C_type",		ctypes.c_uint),] )

gtk_widget_class_set_accessible_role = _rpythonic_function_(		"gtk_widget_class_set_accessible_role", ctypes.c_void_p, [
	("widget_class",		ctypes.POINTER(_GtkWidgetClass)),
	("role",		ctypes.c_int),] )

gtk_widget_get_accessible = _rpythonic_function_(		"gtk_widget_get_accessible", ctypes.POINTER(_AtkObject), [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_get_halign = _rpythonic_function_(		"gtk_widget_get_halign", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_set_halign = _rpythonic_function_(		"gtk_widget_set_halign", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("align",		ctypes.c_int),] )

gtk_widget_get_valign = _rpythonic_function_(		"gtk_widget_get_valign", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_set_valign = _rpythonic_function_(		"gtk_widget_set_valign", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("align",		ctypes.c_int),] )

gtk_widget_get_margin_left = _rpythonic_function_(		"gtk_widget_get_margin_left", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_set_margin_left = _rpythonic_function_(		"gtk_widget_set_margin_left", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("margin",		ctypes.c_int),] )

gtk_widget_get_margin_right = _rpythonic_function_(		"gtk_widget_get_margin_right", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_set_margin_right = _rpythonic_function_(		"gtk_widget_set_margin_right", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("margin",		ctypes.c_int),] )

gtk_widget_get_margin_top = _rpythonic_function_(		"gtk_widget_get_margin_top", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_set_margin_top = _rpythonic_function_(		"gtk_widget_set_margin_top", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("margin",		ctypes.c_int),] )

gtk_widget_get_margin_bottom = _rpythonic_function_(		"gtk_widget_get_margin_bottom", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_set_margin_bottom = _rpythonic_function_(		"gtk_widget_set_margin_bottom", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("margin",		ctypes.c_int),] )

gtk_widget_get_events = _rpythonic_function_(		"gtk_widget_get_events", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_get_device_events = _rpythonic_function_(		"gtk_widget_get_device_events", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("device",		ctypes.POINTER(_GdkDevice)),] )

gtk_widget_get_pointer = _rpythonic_function_(		"gtk_widget_get_pointer", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("x",		ctypes.POINTER(ctypes.c_int)),
	("y",		ctypes.POINTER(ctypes.c_int)),] )

gtk_widget_is_ancestor = _rpythonic_function_(		"gtk_widget_is_ancestor", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("ancestor",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_translate_coordinates = _rpythonic_function_(		"gtk_widget_translate_coordinates", ctypes.c_int, [
	("src_widget",		ctypes.POINTER(_GtkWidget)),
	("dest_widget",		ctypes.POINTER(_GtkWidget)),
	("src_x",		ctypes.c_int),
	("src_y",		ctypes.c_int),
	("dest_x",		ctypes.POINTER(ctypes.c_int)),
	("dest_y",		ctypes.POINTER(ctypes.c_int)),] )

gtk_widget_hide_on_delete = _rpythonic_function_(		"gtk_widget_hide_on_delete", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_override_color = _rpythonic_function_(		"gtk_widget_override_color", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("state",		ctypes.c_int),
	("color",		ctypes.POINTER(_GdkRGBA)),] )

gtk_widget_override_background_color = _rpythonic_function_(		"gtk_widget_override_background_color", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("state",		ctypes.c_int),
	("color",		ctypes.POINTER(_GdkRGBA)),] )

gtk_widget_override_font = _rpythonic_function_(		"gtk_widget_override_font", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("font_desc",		ctypes.POINTER(_PangoFontDescription)),] )

gtk_widget_override_symbolic_color = _rpythonic_function_(		"gtk_widget_override_symbolic_color", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("color",		ctypes.POINTER(_GdkRGBA)),] )

gtk_widget_override_cursor = _rpythonic_function_(		"gtk_widget_override_cursor", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("cursor",		ctypes.POINTER(_GdkRGBA)),
	("secondary_cursor",		ctypes.POINTER(_GdkRGBA)),] )

gtk_widget_reset_style = _rpythonic_function_(		"gtk_widget_reset_style", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_style_attach = _rpythonic_function_(		"gtk_widget_style_attach", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_has_rc_style = _rpythonic_function_(		"gtk_widget_has_rc_style", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_set_style = _rpythonic_function_(		"gtk_widget_set_style", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("style",		ctypes.POINTER(_GtkStyle)),] )

gtk_widget_ensure_style = _rpythonic_function_(		"gtk_widget_ensure_style", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_get_style = _rpythonic_function_(		"gtk_widget_get_style", ctypes.POINTER(_GtkStyle), [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_modify_style = _rpythonic_function_(		"gtk_widget_modify_style", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("style",		ctypes.POINTER(_GtkRcStyle)),] )

gtk_widget_get_modifier_style = _rpythonic_function_(		"gtk_widget_get_modifier_style", ctypes.POINTER(_GtkRcStyle), [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_modify_fg = _rpythonic_function_(		"gtk_widget_modify_fg", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("state",		ctypes.c_int),
	("color",		ctypes.POINTER(_GdkColor)),] )

gtk_widget_modify_bg = _rpythonic_function_(		"gtk_widget_modify_bg", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("state",		ctypes.c_int),
	("color",		ctypes.POINTER(_GdkColor)),] )

gtk_widget_modify_text = _rpythonic_function_(		"gtk_widget_modify_text", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("state",		ctypes.c_int),
	("color",		ctypes.POINTER(_GdkColor)),] )

gtk_widget_modify_base = _rpythonic_function_(		"gtk_widget_modify_base", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("state",		ctypes.c_int),
	("color",		ctypes.POINTER(_GdkColor)),] )

gtk_widget_modify_cursor = _rpythonic_function_(		"gtk_widget_modify_cursor", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("primary",		ctypes.POINTER(_GdkColor)),
	("secondary",		ctypes.POINTER(_GdkColor)),] )

gtk_widget_modify_font = _rpythonic_function_(		"gtk_widget_modify_font", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("font_desc",		ctypes.POINTER(_PangoFontDescription)),] )

gtk_widget_reset_rc_styles = _rpythonic_function_(		"gtk_widget_reset_rc_styles", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_get_default_style = _rpythonic_function_(		"gtk_widget_get_default_style", ctypes.POINTER(_GtkStyle), [] )

gtk_widget_path = _rpythonic_function_(		"gtk_widget_path", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("path_length",		ctypes.POINTER(ctypes.c_uint)),
	("path",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("path_reversed",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

gtk_widget_class_path = _rpythonic_function_(		"gtk_widget_class_path", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("path_length",		ctypes.POINTER(ctypes.c_uint)),
	("path",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("path_reversed",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

gtk_widget_render_icon = _rpythonic_function_(		"gtk_widget_render_icon", ctypes.POINTER(_GdkPixbuf), [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("stock_id",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_int),
	("detail",		ctypes.POINTER(ctypes.c_char)),] )

gtk_widget_create_pango_context = _rpythonic_function_(		"gtk_widget_create_pango_context", ctypes.POINTER(_PangoContext), [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_get_pango_context = _rpythonic_function_(		"gtk_widget_get_pango_context", ctypes.POINTER(_PangoContext), [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_create_pango_layout = _rpythonic_function_(		"gtk_widget_create_pango_layout", ctypes.POINTER(_PangoLayout), [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("text",		ctypes.POINTER(ctypes.c_char)),] )

gtk_widget_render_icon_pixbuf = _rpythonic_function_(		"gtk_widget_render_icon_pixbuf", ctypes.POINTER(_GdkPixbuf), [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("stock_id",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_int),] )

gtk_widget_set_composite_name = _rpythonic_function_(		"gtk_widget_set_composite_name", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_widget_get_composite_name = _rpythonic_function_(		"gtk_widget_get_composite_name", ctypes.POINTER(ctypes.c_char), [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_push_composite_child = _rpythonic_function_(		"gtk_widget_push_composite_child", ctypes.c_void_p, [] )

gtk_widget_pop_composite_child = _rpythonic_function_(		"gtk_widget_pop_composite_child", ctypes.c_void_p, [] )

gtk_widget_class_install_style_property = _rpythonic_function_(		"gtk_widget_class_install_style_property", ctypes.c_void_p, [
	("klass",		ctypes.POINTER(_GtkWidgetClass)),
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

gtk_widget_class_install_style_property_parser = _rpythonic_function_(		"gtk_widget_class_install_style_property_parser", ctypes.c_void_p, [
	("klass",		ctypes.POINTER(_GtkWidgetClass)),
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("parser",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GParamSpec),ctypes.POINTER(_GString),ctypes.POINTER(_GValue),)),] )

gtk_widget_class_find_style_property = _rpythonic_function_(		"gtk_widget_class_find_style_property", ctypes.POINTER(_GParamSpec), [
	("klass",		ctypes.POINTER(_GtkWidgetClass)),
	("property_name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_widget_class_list_style_properties = _rpythonic_function_(		"gtk_widget_class_list_style_properties", ctypes.POINTER(ctypes.POINTER(_GParamSpec)), [
	("klass",		ctypes.POINTER(_GtkWidgetClass)),
	("n_properties",		ctypes.POINTER(ctypes.c_uint)),] )

gtk_widget_style_get_property = _rpythonic_function_(		"gtk_widget_style_get_property", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("property_name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(_GValue)),] )

gtk_widget_style_get_valist = _rpythonic_function_(		"gtk_widget_style_get_valist", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("first_property_name",		ctypes.POINTER(ctypes.c_char)),
	("var_args",		ctypes.c_char),] )

gtk_widget_set_direction = _rpythonic_function_(		"gtk_widget_set_direction", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("dir",		ctypes.c_int),] )

gtk_widget_get_direction = _rpythonic_function_(		"gtk_widget_get_direction", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_set_default_direction = _rpythonic_function_(		"gtk_widget_set_default_direction", ctypes.c_void_p, [
	("dir",		ctypes.c_int),] )

gtk_widget_get_default_direction = _rpythonic_function_(		"gtk_widget_get_default_direction", ctypes.c_int, [] )

gtk_widget_is_composited = _rpythonic_function_(		"gtk_widget_is_composited", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_shape_combine_region = _rpythonic_function_(		"gtk_widget_shape_combine_region", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("region",		ctypes.POINTER(_cairo_region)),] )

gtk_widget_input_shape_combine_region = _rpythonic_function_(		"gtk_widget_input_shape_combine_region", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("region",		ctypes.POINTER(_cairo_region)),] )

gtk_widget_list_mnemonic_labels = _rpythonic_function_(		"gtk_widget_list_mnemonic_labels", ctypes.POINTER(_GList), [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_add_mnemonic_label = _rpythonic_function_(		"gtk_widget_add_mnemonic_label", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("label",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_remove_mnemonic_label = _rpythonic_function_(		"gtk_widget_remove_mnemonic_label", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("label",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_set_tooltip_window = _rpythonic_function_(		"gtk_widget_set_tooltip_window", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("custom_window",		ctypes.POINTER(_GtkWindow)),] )

gtk_widget_get_tooltip_window = _rpythonic_function_(		"gtk_widget_get_tooltip_window", ctypes.POINTER(_GtkWindow), [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_trigger_tooltip_query = _rpythonic_function_(		"gtk_widget_trigger_tooltip_query", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_set_tooltip_text = _rpythonic_function_(		"gtk_widget_set_tooltip_text", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("text",		ctypes.POINTER(ctypes.c_char)),] )

gtk_widget_get_tooltip_text = _rpythonic_function_(		"gtk_widget_get_tooltip_text", ctypes.POINTER(ctypes.c_char), [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_set_tooltip_markup = _rpythonic_function_(		"gtk_widget_set_tooltip_markup", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("markup",		ctypes.POINTER(ctypes.c_char)),] )

gtk_widget_get_tooltip_markup = _rpythonic_function_(		"gtk_widget_get_tooltip_markup", ctypes.POINTER(ctypes.c_char), [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_set_has_tooltip = _rpythonic_function_(		"gtk_widget_set_has_tooltip", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("has_tooltip",		ctypes.c_int),] )

gtk_widget_get_has_tooltip = _rpythonic_function_(		"gtk_widget_get_has_tooltip", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_cairo_should_draw_window = _rpythonic_function_(		"gtk_cairo_should_draw_window", ctypes.c_int, [
	("cr",		ctypes.POINTER(_cairo)),
	("window",		ctypes.POINTER(_GdkWindow)),] )

gtk_cairo_transform_to_window = _rpythonic_function_(		"gtk_cairo_transform_to_window", ctypes.c_void_p, [
	("cr",		ctypes.POINTER(_cairo)),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("window",		ctypes.POINTER(_GdkWindow)),] )

gtk_requisition_get_type = _rpythonic_function_(		"gtk_requisition_get_type", ctypes.c_uint, [] )

gtk_requisition_new = _rpythonic_function_(		"gtk_requisition_new", ctypes.POINTER(_GtkRequisition), [] )

gtk_requisition_copy = _rpythonic_function_(		"gtk_requisition_copy", ctypes.POINTER(_GtkRequisition), [
	("requisition",		ctypes.POINTER(_GtkRequisition)),] )

gtk_requisition_free = _rpythonic_function_(		"gtk_requisition_free", ctypes.c_void_p, [
	("requisition",		ctypes.POINTER(_GtkRequisition)),] )

gtk_widget_in_destruction = _rpythonic_function_(		"gtk_widget_in_destruction", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_get_style_context = _rpythonic_function_(		"gtk_widget_get_style_context", ctypes.POINTER(_GtkStyleContext), [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_widget_get_path = _rpythonic_function_(		"gtk_widget_get_path", ctypes.POINTER(_GtkWidgetPath), [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

create_menu_item = _rpythonic_function_(		"create_menu_item", ctypes.POINTER(_GtkWidget), [
	("action",		ctypes.POINTER(_GtkAction)),] )

create_tool_item = _rpythonic_function_(		"create_tool_item", ctypes.POINTER(_GtkWidget), [
	("action",		ctypes.POINTER(_GtkAction)),] )

connect_proxy = _rpythonic_function_(		"connect_proxy", ctypes.c_void_p, [
	("action",		ctypes.POINTER(_GtkAction)),
	("proxy",		ctypes.POINTER(_GtkWidget)),] )

disconnect_proxy = _rpythonic_function_(		"disconnect_proxy", ctypes.c_void_p, [
	("action",		ctypes.POINTER(_GtkAction)),
	("proxy",		ctypes.POINTER(_GtkWidget)),] )

create_menu = _rpythonic_function_(		"create_menu", ctypes.POINTER(_GtkWidget), [
	("action",		ctypes.POINTER(_GtkAction)),] )

gtk_action_new = _rpythonic_function_(		"gtk_action_new", ctypes.POINTER(_GtkAction), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("label",		ctypes.POINTER(ctypes.c_char)),
	("tooltip",		ctypes.POINTER(ctypes.c_char)),
	("stock_id",		ctypes.POINTER(ctypes.c_char)),] )

gtk_action_get_type = _rpythonic_function_(		"gtk_action_get_type", ctypes.c_uint, [] )

gtk_action_get_name = _rpythonic_function_(		"gtk_action_get_name", ctypes.POINTER(ctypes.c_char), [
	("action",		ctypes.POINTER(_GtkAction)),] )

gtk_action_is_sensitive = _rpythonic_function_(		"gtk_action_is_sensitive", ctypes.c_int, [
	("action",		ctypes.POINTER(_GtkAction)),] )

gtk_action_get_sensitive = _rpythonic_function_(		"gtk_action_get_sensitive", ctypes.c_int, [
	("action",		ctypes.POINTER(_GtkAction)),] )

gtk_action_set_sensitive = _rpythonic_function_(		"gtk_action_set_sensitive", ctypes.c_void_p, [
	("action",		ctypes.POINTER(_GtkAction)),
	("sensitive",		ctypes.c_int),] )

gtk_action_is_visible = _rpythonic_function_(		"gtk_action_is_visible", ctypes.c_int, [
	("action",		ctypes.POINTER(_GtkAction)),] )

gtk_action_get_visible = _rpythonic_function_(		"gtk_action_get_visible", ctypes.c_int, [
	("action",		ctypes.POINTER(_GtkAction)),] )

gtk_action_set_visible = _rpythonic_function_(		"gtk_action_set_visible", ctypes.c_void_p, [
	("action",		ctypes.POINTER(_GtkAction)),
	("visible",		ctypes.c_int),] )

gtk_action_activate = _rpythonic_function_(		"gtk_action_activate", ctypes.c_void_p, [
	("action",		ctypes.POINTER(_GtkAction)),] )

gtk_action_create_icon = _rpythonic_function_(		"gtk_action_create_icon", ctypes.POINTER(_GtkWidget), [
	("action",		ctypes.POINTER(_GtkAction)),
	("icon_size",		ctypes.c_int),] )

gtk_action_create_menu_item = _rpythonic_function_(		"gtk_action_create_menu_item", ctypes.POINTER(_GtkWidget), [
	("action",		ctypes.POINTER(_GtkAction)),] )

gtk_action_create_tool_item = _rpythonic_function_(		"gtk_action_create_tool_item", ctypes.POINTER(_GtkWidget), [
	("action",		ctypes.POINTER(_GtkAction)),] )

gtk_action_create_menu = _rpythonic_function_(		"gtk_action_create_menu", ctypes.POINTER(_GtkWidget), [
	("action",		ctypes.POINTER(_GtkAction)),] )

gtk_action_get_proxies = _rpythonic_function_(		"gtk_action_get_proxies", ctypes.POINTER(_GSList), [
	("action",		ctypes.POINTER(_GtkAction)),] )

gtk_action_connect_accelerator = _rpythonic_function_(		"gtk_action_connect_accelerator", ctypes.c_void_p, [
	("action",		ctypes.POINTER(_GtkAction)),] )

gtk_action_disconnect_accelerator = _rpythonic_function_(		"gtk_action_disconnect_accelerator", ctypes.c_void_p, [
	("action",		ctypes.POINTER(_GtkAction)),] )

gtk_action_get_accel_path = _rpythonic_function_(		"gtk_action_get_accel_path", ctypes.POINTER(ctypes.c_char), [
	("action",		ctypes.POINTER(_GtkAction)),] )

gtk_action_get_accel_closure = _rpythonic_function_(		"gtk_action_get_accel_closure", ctypes.POINTER(_GClosure), [
	("action",		ctypes.POINTER(_GtkAction)),] )

gtk_action_block_activate = _rpythonic_function_(		"gtk_action_block_activate", ctypes.c_void_p, [
	("action",		ctypes.POINTER(_GtkAction)),] )

gtk_action_unblock_activate = _rpythonic_function_(		"gtk_action_unblock_activate", ctypes.c_void_p, [
	("action",		ctypes.POINTER(_GtkAction)),] )

_gtk_action_add_to_proxy_list = _rpythonic_function_(		"_gtk_action_add_to_proxy_list", ctypes.c_void_p, [
	("action",		ctypes.POINTER(_GtkAction)),
	("proxy",		ctypes.POINTER(_GtkWidget)),] )

_gtk_action_remove_from_proxy_list = _rpythonic_function_(		"_gtk_action_remove_from_proxy_list", ctypes.c_void_p, [
	("action",		ctypes.POINTER(_GtkAction)),
	("proxy",		ctypes.POINTER(_GtkWidget)),] )

_gtk_action_emit_activate = _rpythonic_function_(		"_gtk_action_emit_activate", ctypes.c_void_p, [
	("action",		ctypes.POINTER(_GtkAction)),] )

gtk_action_set_accel_path = _rpythonic_function_(		"gtk_action_set_accel_path", ctypes.c_void_p, [
	("action",		ctypes.POINTER(_GtkAction)),
	("accel_path",		ctypes.POINTER(ctypes.c_char)),] )

gtk_action_set_accel_group = _rpythonic_function_(		"gtk_action_set_accel_group", ctypes.c_void_p, [
	("action",		ctypes.POINTER(_GtkAction)),
	("accel_group",		ctypes.POINTER(_GtkAccelGroup)),] )

_gtk_action_sync_menu_visible = _rpythonic_function_(		"_gtk_action_sync_menu_visible", ctypes.c_void_p, [
	("action",		ctypes.POINTER(_GtkAction)),
	("proxy",		ctypes.POINTER(_GtkWidget)),
	("empty",		ctypes.c_int),] )

gtk_action_set_label = _rpythonic_function_(		"gtk_action_set_label", ctypes.c_void_p, [
	("action",		ctypes.POINTER(_GtkAction)),
	("label",		ctypes.POINTER(ctypes.c_char)),] )

gtk_action_get_label = _rpythonic_function_(		"gtk_action_get_label", ctypes.POINTER(ctypes.c_char), [
	("action",		ctypes.POINTER(_GtkAction)),] )

gtk_action_set_short_label = _rpythonic_function_(		"gtk_action_set_short_label", ctypes.c_void_p, [
	("action",		ctypes.POINTER(_GtkAction)),
	("short_label",		ctypes.POINTER(ctypes.c_char)),] )

gtk_action_get_short_label = _rpythonic_function_(		"gtk_action_get_short_label", ctypes.POINTER(ctypes.c_char), [
	("action",		ctypes.POINTER(_GtkAction)),] )

gtk_action_set_tooltip = _rpythonic_function_(		"gtk_action_set_tooltip", ctypes.c_void_p, [
	("action",		ctypes.POINTER(_GtkAction)),
	("tooltip",		ctypes.POINTER(ctypes.c_char)),] )

gtk_action_get_tooltip = _rpythonic_function_(		"gtk_action_get_tooltip", ctypes.POINTER(ctypes.c_char), [
	("action",		ctypes.POINTER(_GtkAction)),] )

gtk_action_set_stock_id = _rpythonic_function_(		"gtk_action_set_stock_id", ctypes.c_void_p, [
	("action",		ctypes.POINTER(_GtkAction)),
	("stock_id",		ctypes.POINTER(ctypes.c_char)),] )

gtk_action_get_stock_id = _rpythonic_function_(		"gtk_action_get_stock_id", ctypes.POINTER(ctypes.c_char), [
	("action",		ctypes.POINTER(_GtkAction)),] )

gtk_action_set_gicon = _rpythonic_function_(		"gtk_action_set_gicon", ctypes.c_void_p, [
	("action",		ctypes.POINTER(_GtkAction)),
	("icon",		ctypes.POINTER(_GIcon)),] )

gtk_action_get_gicon = _rpythonic_function_(		"gtk_action_get_gicon", ctypes.POINTER(_GIcon), [
	("action",		ctypes.POINTER(_GtkAction)),] )

gtk_action_set_icon_name = _rpythonic_function_(		"gtk_action_set_icon_name", ctypes.c_void_p, [
	("action",		ctypes.POINTER(_GtkAction)),
	("icon_name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_action_get_icon_name = _rpythonic_function_(		"gtk_action_get_icon_name", ctypes.POINTER(ctypes.c_char), [
	("action",		ctypes.POINTER(_GtkAction)),] )

gtk_action_set_visible_horizontal = _rpythonic_function_(		"gtk_action_set_visible_horizontal", ctypes.c_void_p, [
	("action",		ctypes.POINTER(_GtkAction)),
	("visible_horizontal",		ctypes.c_int),] )

gtk_action_get_visible_horizontal = _rpythonic_function_(		"gtk_action_get_visible_horizontal", ctypes.c_int, [
	("action",		ctypes.POINTER(_GtkAction)),] )

gtk_action_set_visible_vertical = _rpythonic_function_(		"gtk_action_set_visible_vertical", ctypes.c_void_p, [
	("action",		ctypes.POINTER(_GtkAction)),
	("visible_vertical",		ctypes.c_int),] )

gtk_action_get_visible_vertical = _rpythonic_function_(		"gtk_action_get_visible_vertical", ctypes.c_int, [
	("action",		ctypes.POINTER(_GtkAction)),] )

gtk_action_set_is_important = _rpythonic_function_(		"gtk_action_set_is_important", ctypes.c_void_p, [
	("action",		ctypes.POINTER(_GtkAction)),
	("is_important",		ctypes.c_int),] )

gtk_action_get_is_important = _rpythonic_function_(		"gtk_action_get_is_important", ctypes.c_int, [
	("action",		ctypes.POINTER(_GtkAction)),] )

gtk_action_set_always_show_image = _rpythonic_function_(		"gtk_action_set_always_show_image", ctypes.c_void_p, [
	("action",		ctypes.POINTER(_GtkAction)),
	("always_show",		ctypes.c_int),] )

gtk_action_get_always_show_image = _rpythonic_function_(		"gtk_action_get_always_show_image", ctypes.c_int, [
	("action",		ctypes.POINTER(_GtkAction)),] )

GtkTranslateFunc = _rpythonic_function_(		"GtkTranslateFunc", ctypes.POINTER(ctypes.c_char), [
	("path",		ctypes.POINTER(ctypes.c_char)),
	("func_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gtk_stock_add_static = _rpythonic_function_(		"gtk_stock_add_static", ctypes.c_void_p, [
	("items",		ctypes.POINTER(_GtkStockItem)),
	("n_items",		ctypes.c_uint),] )

gtk_stock_add = _rpythonic_function_(		"gtk_stock_add", ctypes.c_void_p, [
	("items",		ctypes.POINTER(_GtkStockItem)),
	("n_items",		ctypes.c_uint),] )

gtk_stock_lookup = _rpythonic_function_(		"gtk_stock_lookup", ctypes.c_int, [
	("stock_id",		ctypes.POINTER(ctypes.c_char)),
	("item",		ctypes.POINTER(_GtkStockItem)),] )

gtk_stock_list_ids = _rpythonic_function_(		"gtk_stock_list_ids", ctypes.POINTER(_GSList), [] )

gtk_stock_item_copy = _rpythonic_function_(		"gtk_stock_item_copy", ctypes.POINTER(_GtkStockItem), [
	("item",		ctypes.POINTER(_GtkStockItem)),] )

gtk_stock_item_free = _rpythonic_function_(		"gtk_stock_item_free", ctypes.c_void_p, [
	("item",		ctypes.POINTER(_GtkStockItem)),] )

gtk_stock_set_translate_func = _rpythonic_function_(		"gtk_stock_set_translate_func", ctypes.c_void_p, [
	("domain",		ctypes.POINTER(ctypes.c_char)),
	("func",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),))),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

get_action = _rpythonic_function_(		"get_action", ctypes.POINTER(_GtkAction), [
	("action_group",		ctypes.POINTER(_GtkActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_action_group_get_type = _rpythonic_function_(		"gtk_action_group_get_type", ctypes.c_uint, [] )

gtk_action_group_new = _rpythonic_function_(		"gtk_action_group_new", ctypes.POINTER(_GtkActionGroup), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_action_group_get_name = _rpythonic_function_(		"gtk_action_group_get_name", ctypes.POINTER(ctypes.c_char), [
	("action_group",		ctypes.POINTER(_GtkActionGroup)),] )

gtk_action_group_get_sensitive = _rpythonic_function_(		"gtk_action_group_get_sensitive", ctypes.c_int, [
	("action_group",		ctypes.POINTER(_GtkActionGroup)),] )

gtk_action_group_set_sensitive = _rpythonic_function_(		"gtk_action_group_set_sensitive", ctypes.c_void_p, [
	("action_group",		ctypes.POINTER(_GtkActionGroup)),
	("sensitive",		ctypes.c_int),] )

gtk_action_group_get_visible = _rpythonic_function_(		"gtk_action_group_get_visible", ctypes.c_int, [
	("action_group",		ctypes.POINTER(_GtkActionGroup)),] )

gtk_action_group_set_visible = _rpythonic_function_(		"gtk_action_group_set_visible", ctypes.c_void_p, [
	("action_group",		ctypes.POINTER(_GtkActionGroup)),
	("visible",		ctypes.c_int),] )

gtk_action_group_get_action = _rpythonic_function_(		"gtk_action_group_get_action", ctypes.POINTER(_GtkAction), [
	("action_group",		ctypes.POINTER(_GtkActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_action_group_list_actions = _rpythonic_function_(		"gtk_action_group_list_actions", ctypes.POINTER(_GList), [
	("action_group",		ctypes.POINTER(_GtkActionGroup)),] )

gtk_action_group_add_action = _rpythonic_function_(		"gtk_action_group_add_action", ctypes.c_void_p, [
	("action_group",		ctypes.POINTER(_GtkActionGroup)),
	("action",		ctypes.POINTER(_GtkAction)),] )

gtk_action_group_add_action_with_accel = _rpythonic_function_(		"gtk_action_group_add_action_with_accel", ctypes.c_void_p, [
	("action_group",		ctypes.POINTER(_GtkActionGroup)),
	("action",		ctypes.POINTER(_GtkAction)),
	("accelerator",		ctypes.POINTER(ctypes.c_char)),] )

gtk_action_group_remove_action = _rpythonic_function_(		"gtk_action_group_remove_action", ctypes.c_void_p, [
	("action_group",		ctypes.POINTER(_GtkActionGroup)),
	("action",		ctypes.POINTER(_GtkAction)),] )

gtk_action_group_add_actions = _rpythonic_function_(		"gtk_action_group_add_actions", ctypes.c_void_p, [
	("action_group",		ctypes.POINTER(_GtkActionGroup)),
	("entries",		ctypes.POINTER(_GtkActionEntry)),
	("n_entries",		ctypes.c_uint),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gtk_action_group_add_toggle_actions = _rpythonic_function_(		"gtk_action_group_add_toggle_actions", ctypes.c_void_p, [
	("action_group",		ctypes.POINTER(_GtkActionGroup)),
	("entries",		ctypes.POINTER(_GtkToggleActionEntry)),
	("n_entries",		ctypes.c_uint),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gtk_action_group_add_radio_actions = _rpythonic_function_(		"gtk_action_group_add_radio_actions", ctypes.c_void_p, [
	("action_group",		ctypes.POINTER(_GtkActionGroup)),
	("entries",		ctypes.POINTER(_GtkRadioActionEntry)),
	("n_entries",		ctypes.c_uint),
	("value",		ctypes.c_int),
	("on_change",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gtk_action_group_add_actions_full = _rpythonic_function_(		"gtk_action_group_add_actions_full", ctypes.c_void_p, [
	("action_group",		ctypes.POINTER(_GtkActionGroup)),
	("entries",		ctypes.POINTER(_GtkActionEntry)),
	("n_entries",		ctypes.c_uint),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

gtk_action_group_add_toggle_actions_full = _rpythonic_function_(		"gtk_action_group_add_toggle_actions_full", ctypes.c_void_p, [
	("action_group",		ctypes.POINTER(_GtkActionGroup)),
	("entries",		ctypes.POINTER(_GtkToggleActionEntry)),
	("n_entries",		ctypes.c_uint),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

gtk_action_group_add_radio_actions_full = _rpythonic_function_(		"gtk_action_group_add_radio_actions_full", ctypes.c_void_p, [
	("action_group",		ctypes.POINTER(_GtkActionGroup)),
	("entries",		ctypes.POINTER(_GtkRadioActionEntry)),
	("n_entries",		ctypes.c_uint),
	("value",		ctypes.c_int),
	("on_change",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

gtk_action_group_set_translate_func = _rpythonic_function_(		"gtk_action_group_set_translate_func", ctypes.c_void_p, [
	("action_group",		ctypes.POINTER(_GtkActionGroup)),
	("func",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),))),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

gtk_action_group_set_translation_domain = _rpythonic_function_(		"gtk_action_group_set_translation_domain", ctypes.c_void_p, [
	("action_group",		ctypes.POINTER(_GtkActionGroup)),
	("domain",		ctypes.POINTER(ctypes.c_char)),] )

gtk_action_group_translate_string = _rpythonic_function_(		"gtk_action_group_translate_string", ctypes.POINTER(ctypes.c_char), [
	("action_group",		ctypes.POINTER(_GtkActionGroup)),
	("string",		ctypes.POINTER(ctypes.c_char)),] )

_gtk_action_group_emit_connect_proxy = _rpythonic_function_(		"_gtk_action_group_emit_connect_proxy", ctypes.c_void_p, [
	("action_group",		ctypes.POINTER(_GtkActionGroup)),
	("action",		ctypes.POINTER(_GtkAction)),
	("proxy",		ctypes.POINTER(_GtkWidget)),] )

_gtk_action_group_emit_disconnect_proxy = _rpythonic_function_(		"_gtk_action_group_emit_disconnect_proxy", ctypes.c_void_p, [
	("action_group",		ctypes.POINTER(_GtkActionGroup)),
	("action",		ctypes.POINTER(_GtkAction)),
	("proxy",		ctypes.POINTER(_GtkWidget)),] )

_gtk_action_group_emit_pre_activate = _rpythonic_function_(		"_gtk_action_group_emit_pre_activate", ctypes.c_void_p, [
	("action_group",		ctypes.POINTER(_GtkActionGroup)),
	("action",		ctypes.POINTER(_GtkAction)),] )

_gtk_action_group_emit_post_activate = _rpythonic_function_(		"_gtk_action_group_emit_post_activate", ctypes.c_void_p, [
	("action_group",		ctypes.POINTER(_GtkActionGroup)),
	("action",		ctypes.POINTER(_GtkAction)),] )

window_added = _rpythonic_function_(		"window_added", ctypes.c_void_p, [
	("application",		ctypes.POINTER(_GtkApplication)),
	("window",		ctypes.POINTER(_GtkWindow)),] )

window_removed = _rpythonic_function_(		"window_removed", ctypes.c_void_p, [
	("application",		ctypes.POINTER(_GtkApplication)),
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_application_get_type = _rpythonic_function_(		"gtk_application_get_type", ctypes.c_uint, [] )

gtk_application_new = _rpythonic_function_(		"gtk_application_new", ctypes.POINTER(_GtkApplication), [
	("application_id",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),] )

gtk_application_add_window = _rpythonic_function_(		"gtk_application_add_window", ctypes.c_void_p, [
	("application",		ctypes.POINTER(_GtkApplication)),
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_application_remove_window = _rpythonic_function_(		"gtk_application_remove_window", ctypes.c_void_p, [
	("application",		ctypes.POINTER(_GtkApplication)),
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_application_get_windows = _rpythonic_function_(		"gtk_application_get_windows", ctypes.POINTER(_GList), [
	("application",		ctypes.POINTER(_GtkApplication)),] )

add = _rpythonic_function_(		"add", ctypes.c_void_p, [
	("container",		ctypes.POINTER(_GtkContainer)),
	("widget",		ctypes.POINTER(_GtkWidget)),] )

check_resize = _rpythonic_function_(		"check_resize", ctypes.c_void_p, [
	("container",		ctypes.POINTER(_GtkContainer)),] )

forall = _rpythonic_function_(		"forall", ctypes.c_void_p, [
	("container",		ctypes.POINTER(_GtkContainer)),
	("include_internals",		ctypes.c_int),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GtkWidget),ctypes.POINTER(ctypes.c_void_p),)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

set_focus_child = _rpythonic_function_(		"set_focus_child", ctypes.c_void_p, [
	("container",		ctypes.POINTER(_GtkContainer)),
	("child",		ctypes.POINTER(_GtkWidget)),] )

child_type = _rpythonic_function_(		"child_type", ctypes.c_uint, [
	("container",		ctypes.POINTER(_GtkContainer)),] )

composite_name = _rpythonic_function_(		"composite_name", ctypes.POINTER(ctypes.c_char), [
	("container",		ctypes.POINTER(_GtkContainer)),
	("child",		ctypes.POINTER(_GtkWidget)),] )

set_child_property = _rpythonic_function_(		"set_child_property", ctypes.c_void_p, [
	("container",		ctypes.POINTER(_GtkContainer)),
	("child",		ctypes.POINTER(_GtkWidget)),
	("property_id",		ctypes.c_uint),
	("value",		ctypes.POINTER(_GValue)),
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

get_child_property = _rpythonic_function_(		"get_child_property", ctypes.c_void_p, [
	("container",		ctypes.POINTER(_GtkContainer)),
	("child",		ctypes.POINTER(_GtkWidget)),
	("property_id",		ctypes.c_uint),
	("value",		ctypes.POINTER(_GValue)),
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

get_path_for_child = _rpythonic_function_(		"get_path_for_child", ctypes.POINTER(_GtkWidgetPath), [
	("container",		ctypes.POINTER(_GtkContainer)),
	("child",		ctypes.POINTER(_GtkWidget)),] )

gtk_container_set_border_width = _rpythonic_function_(		"gtk_container_set_border_width", ctypes.c_void_p, [
	("container",		ctypes.POINTER(_GtkContainer)),
	("border_width",		ctypes.c_uint),] )

gtk_container_get_border_width = _rpythonic_function_(		"gtk_container_get_border_width", ctypes.c_uint, [
	("container",		ctypes.POINTER(_GtkContainer)),] )

gtk_container_get_type = _rpythonic_function_(		"gtk_container_get_type", ctypes.c_uint, [] )

gtk_container_add = _rpythonic_function_(		"gtk_container_add", ctypes.c_void_p, [
	("container",		ctypes.POINTER(_GtkContainer)),
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_container_remove = _rpythonic_function_(		"gtk_container_remove", ctypes.c_void_p, [
	("container",		ctypes.POINTER(_GtkContainer)),
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_container_set_resize_mode = _rpythonic_function_(		"gtk_container_set_resize_mode", ctypes.c_void_p, [
	("container",		ctypes.POINTER(_GtkContainer)),
	("resize_mode",		ctypes.c_int),] )

gtk_container_get_resize_mode = _rpythonic_function_(		"gtk_container_get_resize_mode", ctypes.c_int, [
	("container",		ctypes.POINTER(_GtkContainer)),] )

gtk_container_check_resize = _rpythonic_function_(		"gtk_container_check_resize", ctypes.c_void_p, [
	("container",		ctypes.POINTER(_GtkContainer)),] )

gtk_container_foreach = _rpythonic_function_(		"gtk_container_foreach", ctypes.c_void_p, [
	("container",		ctypes.POINTER(_GtkContainer)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GtkWidget),ctypes.POINTER(ctypes.c_void_p),)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gtk_container_get_children = _rpythonic_function_(		"gtk_container_get_children", ctypes.POINTER(_GList), [
	("container",		ctypes.POINTER(_GtkContainer)),] )

gtk_container_propagate_draw = _rpythonic_function_(		"gtk_container_propagate_draw", ctypes.c_void_p, [
	("container",		ctypes.POINTER(_GtkContainer)),
	("child",		ctypes.POINTER(_GtkWidget)),
	("cr",		ctypes.POINTER(_cairo)),] )

gtk_container_set_focus_chain = _rpythonic_function_(		"gtk_container_set_focus_chain", ctypes.c_void_p, [
	("container",		ctypes.POINTER(_GtkContainer)),
	("focusable_widgets",		ctypes.POINTER(_GList)),] )

gtk_container_get_focus_chain = _rpythonic_function_(		"gtk_container_get_focus_chain", ctypes.c_int, [
	("container",		ctypes.POINTER(_GtkContainer)),
	("focusable_widgets",		ctypes.POINTER(ctypes.POINTER(_GList))),] )

gtk_container_unset_focus_chain = _rpythonic_function_(		"gtk_container_unset_focus_chain", ctypes.c_void_p, [
	("container",		ctypes.POINTER(_GtkContainer)),] )

gtk_container_set_reallocate_redraws = _rpythonic_function_(		"gtk_container_set_reallocate_redraws", ctypes.c_void_p, [
	("container",		ctypes.POINTER(_GtkContainer)),
	("needs_redraws",		ctypes.c_int),] )

gtk_container_set_focus_child = _rpythonic_function_(		"gtk_container_set_focus_child", ctypes.c_void_p, [
	("container",		ctypes.POINTER(_GtkContainer)),
	("child",		ctypes.POINTER(_GtkWidget)),] )

gtk_container_get_focus_child = _rpythonic_function_(		"gtk_container_get_focus_child", ctypes.POINTER(_GtkWidget), [
	("container",		ctypes.POINTER(_GtkContainer)),] )

gtk_container_set_focus_vadjustment = _rpythonic_function_(		"gtk_container_set_focus_vadjustment", ctypes.c_void_p, [
	("container",		ctypes.POINTER(_GtkContainer)),
	("adjustment",		ctypes.POINTER(_GtkAdjustment)),] )

gtk_container_get_focus_vadjustment = _rpythonic_function_(		"gtk_container_get_focus_vadjustment", ctypes.POINTER(_GtkAdjustment), [
	("container",		ctypes.POINTER(_GtkContainer)),] )

gtk_container_set_focus_hadjustment = _rpythonic_function_(		"gtk_container_set_focus_hadjustment", ctypes.c_void_p, [
	("container",		ctypes.POINTER(_GtkContainer)),
	("adjustment",		ctypes.POINTER(_GtkAdjustment)),] )

gtk_container_get_focus_hadjustment = _rpythonic_function_(		"gtk_container_get_focus_hadjustment", ctypes.POINTER(_GtkAdjustment), [
	("container",		ctypes.POINTER(_GtkContainer)),] )

gtk_container_resize_children = _rpythonic_function_(		"gtk_container_resize_children", ctypes.c_void_p, [
	("container",		ctypes.POINTER(_GtkContainer)),] )

gtk_container_child_type = _rpythonic_function_(		"gtk_container_child_type", ctypes.c_uint, [
	("container",		ctypes.POINTER(_GtkContainer)),] )

gtk_container_class_install_child_property = _rpythonic_function_(		"gtk_container_class_install_child_property", ctypes.c_void_p, [
	("cclass",		ctypes.POINTER(_GtkContainerClass)),
	("property_id",		ctypes.c_uint),
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

gtk_container_class_find_child_property = _rpythonic_function_(		"gtk_container_class_find_child_property", ctypes.POINTER(_GParamSpec), [
	("cclass",		ctypes.POINTER(_GObjectClass)),
	("property_name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_container_class_list_child_properties = _rpythonic_function_(		"gtk_container_class_list_child_properties", ctypes.POINTER(ctypes.POINTER(_GParamSpec)), [
	("cclass",		ctypes.POINTER(_GObjectClass)),
	("n_properties",		ctypes.POINTER(ctypes.c_uint)),] )

gtk_container_child_set_valist = _rpythonic_function_(		"gtk_container_child_set_valist", ctypes.c_void_p, [
	("container",		ctypes.POINTER(_GtkContainer)),
	("child",		ctypes.POINTER(_GtkWidget)),
	("first_property_name",		ctypes.POINTER(ctypes.c_char)),
	("var_args",		ctypes.c_char),] )

gtk_container_child_get_valist = _rpythonic_function_(		"gtk_container_child_get_valist", ctypes.c_void_p, [
	("container",		ctypes.POINTER(_GtkContainer)),
	("child",		ctypes.POINTER(_GtkWidget)),
	("first_property_name",		ctypes.POINTER(ctypes.c_char)),
	("var_args",		ctypes.c_char),] )

gtk_container_child_set_property = _rpythonic_function_(		"gtk_container_child_set_property", ctypes.c_void_p, [
	("container",		ctypes.POINTER(_GtkContainer)),
	("child",		ctypes.POINTER(_GtkWidget)),
	("property_name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(_GValue)),] )

gtk_container_child_get_property = _rpythonic_function_(		"gtk_container_child_get_property", ctypes.c_void_p, [
	("container",		ctypes.POINTER(_GtkContainer)),
	("child",		ctypes.POINTER(_GtkWidget)),
	("property_name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(_GValue)),] )

gtk_container_child_notify = _rpythonic_function_(		"gtk_container_child_notify", ctypes.c_void_p, [
	("container",		ctypes.POINTER(_GtkContainer)),
	("child",		ctypes.POINTER(_GtkWidget)),
	("child_property",		ctypes.POINTER(ctypes.c_char)),] )

gtk_container_forall = _rpythonic_function_(		"gtk_container_forall", ctypes.c_void_p, [
	("container",		ctypes.POINTER(_GtkContainer)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GtkWidget),ctypes.POINTER(ctypes.c_void_p),)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gtk_container_class_handle_border_width = _rpythonic_function_(		"gtk_container_class_handle_border_width", ctypes.c_void_p, [
	("klass",		ctypes.POINTER(_GtkContainerClass)),] )

gtk_container_get_path_for_child = _rpythonic_function_(		"gtk_container_get_path_for_child", ctypes.POINTER(_GtkWidgetPath), [
	("container",		ctypes.POINTER(_GtkContainer)),
	("child",		ctypes.POINTER(_GtkWidget)),] )

gtk_bin_get_type = _rpythonic_function_(		"gtk_bin_get_type", ctypes.c_uint, [] )

gtk_bin_get_child = _rpythonic_function_(		"gtk_bin_get_child", ctypes.POINTER(_GtkWidget), [
	("bin",		ctypes.POINTER(_GtkBin)),] )

_gtk_bin_set_child = _rpythonic_function_(		"_gtk_bin_set_child", ctypes.c_void_p, [
	("bin",		ctypes.POINTER(_GtkBin)),
	("widget",		ctypes.POINTER(_GtkWidget)),] )

set_focus = _rpythonic_function_(		"set_focus", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("focus",		ctypes.POINTER(_GtkWidget)),] )

activate_focus = _rpythonic_function_(		"activate_focus", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),] )

activate_default = _rpythonic_function_(		"activate_default", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),] )

keys_changed = _rpythonic_function_(		"keys_changed", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_get_type = _rpythonic_function_(		"gtk_window_get_type", ctypes.c_uint, [] )

gtk_window_new = _rpythonic_function_(		"gtk_window_new", ctypes.POINTER(_GtkWidget), [
	("C_type",		ctypes.c_int),] )

gtk_window_set_title = _rpythonic_function_(		"gtk_window_set_title", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("title",		ctypes.POINTER(ctypes.c_char)),] )

gtk_window_get_title = _rpythonic_function_(		"gtk_window_get_title", ctypes.POINTER(ctypes.c_char), [
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_set_wmclass = _rpythonic_function_(		"gtk_window_set_wmclass", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("wmclass_name",		ctypes.POINTER(ctypes.c_char)),
	("wmclass_class",		ctypes.POINTER(ctypes.c_char)),] )

gtk_window_set_role = _rpythonic_function_(		"gtk_window_set_role", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("role",		ctypes.POINTER(ctypes.c_char)),] )

gtk_window_set_startup_id = _rpythonic_function_(		"gtk_window_set_startup_id", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("startup_id",		ctypes.POINTER(ctypes.c_char)),] )

gtk_window_get_role = _rpythonic_function_(		"gtk_window_get_role", ctypes.POINTER(ctypes.c_char), [
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_add_accel_group = _rpythonic_function_(		"gtk_window_add_accel_group", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("accel_group",		ctypes.POINTER(_GtkAccelGroup)),] )

gtk_window_remove_accel_group = _rpythonic_function_(		"gtk_window_remove_accel_group", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("accel_group",		ctypes.POINTER(_GtkAccelGroup)),] )

gtk_window_set_position = _rpythonic_function_(		"gtk_window_set_position", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("position",		ctypes.c_int),] )

gtk_window_activate_focus = _rpythonic_function_(		"gtk_window_activate_focus", ctypes.c_int, [
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_set_focus = _rpythonic_function_(		"gtk_window_set_focus", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("focus",		ctypes.POINTER(_GtkWidget)),] )

gtk_window_get_focus = _rpythonic_function_(		"gtk_window_get_focus", ctypes.POINTER(_GtkWidget), [
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_set_default = _rpythonic_function_(		"gtk_window_set_default", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("default_widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_window_get_default_widget = _rpythonic_function_(		"gtk_window_get_default_widget", ctypes.POINTER(_GtkWidget), [
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_activate_default = _rpythonic_function_(		"gtk_window_activate_default", ctypes.c_int, [
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_set_transient_for = _rpythonic_function_(		"gtk_window_set_transient_for", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("parent",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_get_transient_for = _rpythonic_function_(		"gtk_window_get_transient_for", ctypes.POINTER(_GtkWindow), [
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_set_opacity = _rpythonic_function_(		"gtk_window_set_opacity", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("opacity",		ctypes.c_double),] )

gtk_window_get_opacity = _rpythonic_function_(		"gtk_window_get_opacity", ctypes.c_double, [
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_set_type_hint = _rpythonic_function_(		"gtk_window_set_type_hint", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("hint",		ctypes.c_int),] )

gtk_window_get_type_hint = _rpythonic_function_(		"gtk_window_get_type_hint", ctypes.c_int, [
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_set_skip_taskbar_hint = _rpythonic_function_(		"gtk_window_set_skip_taskbar_hint", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("setting",		ctypes.c_int),] )

gtk_window_get_skip_taskbar_hint = _rpythonic_function_(		"gtk_window_get_skip_taskbar_hint", ctypes.c_int, [
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_set_skip_pager_hint = _rpythonic_function_(		"gtk_window_set_skip_pager_hint", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("setting",		ctypes.c_int),] )

gtk_window_get_skip_pager_hint = _rpythonic_function_(		"gtk_window_get_skip_pager_hint", ctypes.c_int, [
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_set_urgency_hint = _rpythonic_function_(		"gtk_window_set_urgency_hint", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("setting",		ctypes.c_int),] )

gtk_window_get_urgency_hint = _rpythonic_function_(		"gtk_window_get_urgency_hint", ctypes.c_int, [
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_set_accept_focus = _rpythonic_function_(		"gtk_window_set_accept_focus", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("setting",		ctypes.c_int),] )

gtk_window_get_accept_focus = _rpythonic_function_(		"gtk_window_get_accept_focus", ctypes.c_int, [
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_set_focus_on_map = _rpythonic_function_(		"gtk_window_set_focus_on_map", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("setting",		ctypes.c_int),] )

gtk_window_get_focus_on_map = _rpythonic_function_(		"gtk_window_get_focus_on_map", ctypes.c_int, [
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_set_destroy_with_parent = _rpythonic_function_(		"gtk_window_set_destroy_with_parent", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("setting",		ctypes.c_int),] )

gtk_window_get_destroy_with_parent = _rpythonic_function_(		"gtk_window_get_destroy_with_parent", ctypes.c_int, [
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_set_mnemonics_visible = _rpythonic_function_(		"gtk_window_set_mnemonics_visible", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("setting",		ctypes.c_int),] )

gtk_window_get_mnemonics_visible = _rpythonic_function_(		"gtk_window_get_mnemonics_visible", ctypes.c_int, [
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_set_focus_visible = _rpythonic_function_(		"gtk_window_set_focus_visible", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("setting",		ctypes.c_int),] )

gtk_window_get_focus_visible = _rpythonic_function_(		"gtk_window_get_focus_visible", ctypes.c_int, [
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_set_resizable = _rpythonic_function_(		"gtk_window_set_resizable", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("resizable",		ctypes.c_int),] )

gtk_window_get_resizable = _rpythonic_function_(		"gtk_window_get_resizable", ctypes.c_int, [
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_set_gravity = _rpythonic_function_(		"gtk_window_set_gravity", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("gravity",		ctypes.c_int),] )

gtk_window_get_gravity = _rpythonic_function_(		"gtk_window_get_gravity", ctypes.c_int, [
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_set_geometry_hints = _rpythonic_function_(		"gtk_window_set_geometry_hints", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("geometry_widget",		ctypes.POINTER(_GtkWidget)),
	("geometry",		ctypes.POINTER(_GdkGeometry)),
	("geom_mask",		ctypes.c_int),] )

gtk_window_set_screen = _rpythonic_function_(		"gtk_window_set_screen", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("screen",		ctypes.POINTER(_GdkScreen)),] )

gtk_window_get_screen = _rpythonic_function_(		"gtk_window_get_screen", ctypes.POINTER(_GdkScreen), [
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_is_active = _rpythonic_function_(		"gtk_window_is_active", ctypes.c_int, [
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_has_toplevel_focus = _rpythonic_function_(		"gtk_window_has_toplevel_focus", ctypes.c_int, [
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_set_decorated = _rpythonic_function_(		"gtk_window_set_decorated", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("setting",		ctypes.c_int),] )

gtk_window_get_decorated = _rpythonic_function_(		"gtk_window_get_decorated", ctypes.c_int, [
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_set_deletable = _rpythonic_function_(		"gtk_window_set_deletable", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("setting",		ctypes.c_int),] )

gtk_window_get_deletable = _rpythonic_function_(		"gtk_window_get_deletable", ctypes.c_int, [
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_set_icon_list = _rpythonic_function_(		"gtk_window_set_icon_list", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("C_list",		ctypes.POINTER(_GList)),] )

gtk_window_get_icon_list = _rpythonic_function_(		"gtk_window_get_icon_list", ctypes.POINTER(_GList), [
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_set_icon = _rpythonic_function_(		"gtk_window_set_icon", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("icon",		ctypes.POINTER(_GdkPixbuf)),] )

gtk_window_set_icon_name = _rpythonic_function_(		"gtk_window_set_icon_name", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_window_set_icon_from_file = _rpythonic_function_(		"gtk_window_set_icon_from_file", ctypes.c_int, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("err",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_window_get_icon = _rpythonic_function_(		"gtk_window_get_icon", ctypes.POINTER(_GdkPixbuf), [
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_get_icon_name = _rpythonic_function_(		"gtk_window_get_icon_name", ctypes.POINTER(ctypes.c_char), [
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_set_default_icon_list = _rpythonic_function_(		"gtk_window_set_default_icon_list", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GList)),] )

gtk_window_get_default_icon_list = _rpythonic_function_(		"gtk_window_get_default_icon_list", ctypes.POINTER(_GList), [] )

gtk_window_set_default_icon = _rpythonic_function_(		"gtk_window_set_default_icon", ctypes.c_void_p, [
	("icon",		ctypes.POINTER(_GdkPixbuf)),] )

gtk_window_set_default_icon_name = _rpythonic_function_(		"gtk_window_set_default_icon_name", ctypes.c_void_p, [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_window_get_default_icon_name = _rpythonic_function_(		"gtk_window_get_default_icon_name", ctypes.POINTER(ctypes.c_char), [] )

gtk_window_set_default_icon_from_file = _rpythonic_function_(		"gtk_window_set_default_icon_from_file", ctypes.c_int, [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("err",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_window_set_auto_startup_notification = _rpythonic_function_(		"gtk_window_set_auto_startup_notification", ctypes.c_void_p, [
	("setting",		ctypes.c_int),] )

gtk_window_set_modal = _rpythonic_function_(		"gtk_window_set_modal", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("modal",		ctypes.c_int),] )

gtk_window_get_modal = _rpythonic_function_(		"gtk_window_get_modal", ctypes.c_int, [
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_list_toplevels = _rpythonic_function_(		"gtk_window_list_toplevels", ctypes.POINTER(_GList), [] )

gtk_window_set_has_user_ref_count = _rpythonic_function_(		"gtk_window_set_has_user_ref_count", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("setting",		ctypes.c_int),] )

gtk_window_add_mnemonic = _rpythonic_function_(		"gtk_window_add_mnemonic", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("keyval",		ctypes.c_uint),
	("target",		ctypes.POINTER(_GtkWidget)),] )

gtk_window_remove_mnemonic = _rpythonic_function_(		"gtk_window_remove_mnemonic", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("keyval",		ctypes.c_uint),
	("target",		ctypes.POINTER(_GtkWidget)),] )

gtk_window_mnemonic_activate = _rpythonic_function_(		"gtk_window_mnemonic_activate", ctypes.c_int, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("keyval",		ctypes.c_uint),
	("modifier",		ctypes.c_int),] )

gtk_window_set_mnemonic_modifier = _rpythonic_function_(		"gtk_window_set_mnemonic_modifier", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("modifier",		ctypes.c_int),] )

gtk_window_get_mnemonic_modifier = _rpythonic_function_(		"gtk_window_get_mnemonic_modifier", ctypes.c_int, [
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_activate_key = _rpythonic_function_(		"gtk_window_activate_key", ctypes.c_int, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("event",		ctypes.POINTER(_GdkEventKey)),] )

gtk_window_propagate_key_event = _rpythonic_function_(		"gtk_window_propagate_key_event", ctypes.c_int, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("event",		ctypes.POINTER(_GdkEventKey)),] )

gtk_window_present = _rpythonic_function_(		"gtk_window_present", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_present_with_time = _rpythonic_function_(		"gtk_window_present_with_time", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("timestamp",		ctypes.c_uint),] )

gtk_window_iconify = _rpythonic_function_(		"gtk_window_iconify", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_deiconify = _rpythonic_function_(		"gtk_window_deiconify", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_stick = _rpythonic_function_(		"gtk_window_stick", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_unstick = _rpythonic_function_(		"gtk_window_unstick", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_maximize = _rpythonic_function_(		"gtk_window_maximize", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_unmaximize = _rpythonic_function_(		"gtk_window_unmaximize", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_fullscreen = _rpythonic_function_(		"gtk_window_fullscreen", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_unfullscreen = _rpythonic_function_(		"gtk_window_unfullscreen", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_set_keep_above = _rpythonic_function_(		"gtk_window_set_keep_above", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("setting",		ctypes.c_int),] )

gtk_window_set_keep_below = _rpythonic_function_(		"gtk_window_set_keep_below", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("setting",		ctypes.c_int),] )

gtk_window_begin_resize_drag = _rpythonic_function_(		"gtk_window_begin_resize_drag", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("edge",		ctypes.c_int),
	("button",		ctypes.c_int),
	("root_x",		ctypes.c_int),
	("root_y",		ctypes.c_int),
	("timestamp",		ctypes.c_uint),] )

gtk_window_begin_move_drag = _rpythonic_function_(		"gtk_window_begin_move_drag", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("button",		ctypes.c_int),
	("root_x",		ctypes.c_int),
	("root_y",		ctypes.c_int),
	("timestamp",		ctypes.c_uint),] )

gtk_window_set_default_size = _rpythonic_function_(		"gtk_window_set_default_size", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

gtk_window_get_default_size = _rpythonic_function_(		"gtk_window_get_default_size", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("width",		ctypes.POINTER(ctypes.c_int)),
	("height",		ctypes.POINTER(ctypes.c_int)),] )

gtk_window_resize = _rpythonic_function_(		"gtk_window_resize", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

gtk_window_get_size = _rpythonic_function_(		"gtk_window_get_size", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("width",		ctypes.POINTER(ctypes.c_int)),
	("height",		ctypes.POINTER(ctypes.c_int)),] )

gtk_window_move = _rpythonic_function_(		"gtk_window_move", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

gtk_window_get_position = _rpythonic_function_(		"gtk_window_get_position", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("root_x",		ctypes.POINTER(ctypes.c_int)),
	("root_y",		ctypes.POINTER(ctypes.c_int)),] )

gtk_window_parse_geometry = _rpythonic_function_(		"gtk_window_parse_geometry", ctypes.c_int, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("geometry",		ctypes.POINTER(ctypes.c_char)),] )

gtk_window_set_default_geometry = _rpythonic_function_(		"gtk_window_set_default_geometry", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

gtk_window_resize_to_geometry = _rpythonic_function_(		"gtk_window_resize_to_geometry", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

gtk_window_get_group = _rpythonic_function_(		"gtk_window_get_group", ctypes.POINTER(_GtkWindowGroup), [
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_has_group = _rpythonic_function_(		"gtk_window_has_group", ctypes.c_int, [
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_reshow_with_initial_size = _rpythonic_function_(		"gtk_window_reshow_with_initial_size", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_get_window_type = _rpythonic_function_(		"gtk_window_get_window_type", ctypes.c_int, [
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_group_get_type = _rpythonic_function_(		"gtk_window_group_get_type", ctypes.c_uint, [] )

gtk_window_group_new = _rpythonic_function_(		"gtk_window_group_new", ctypes.POINTER(_GtkWindowGroup), [] )

gtk_window_group_add_window = _rpythonic_function_(		"gtk_window_group_add_window", ctypes.c_void_p, [
	("window_group",		ctypes.POINTER(_GtkWindowGroup)),
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_group_remove_window = _rpythonic_function_(		"gtk_window_group_remove_window", ctypes.c_void_p, [
	("window_group",		ctypes.POINTER(_GtkWindowGroup)),
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_group_list_windows = _rpythonic_function_(		"gtk_window_group_list_windows", ctypes.POINTER(_GList), [
	("window_group",		ctypes.POINTER(_GtkWindowGroup)),] )

gtk_window_group_get_current_grab = _rpythonic_function_(		"gtk_window_group_get_current_grab", ctypes.POINTER(_GtkWidget), [
	("window_group",		ctypes.POINTER(_GtkWindowGroup)),] )

gtk_window_group_get_current_device_grab = _rpythonic_function_(		"gtk_window_group_get_current_device_grab", ctypes.POINTER(_GtkWidget), [
	("window_group",		ctypes.POINTER(_GtkWindowGroup)),
	("device",		ctypes.POINTER(_GdkDevice)),] )

gtk_window_get_application = _rpythonic_function_(		"gtk_window_get_application", ctypes.POINTER(_GtkApplication), [
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_set_application = _rpythonic_function_(		"gtk_window_set_application", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("application",		ctypes.POINTER(_GtkApplication)),] )

gtk_window_set_has_resize_grip = _rpythonic_function_(		"gtk_window_set_has_resize_grip", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("value",		ctypes.c_int),] )

gtk_window_get_has_resize_grip = _rpythonic_function_(		"gtk_window_get_has_resize_grip", ctypes.c_int, [
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_resize_grip_is_visible = _rpythonic_function_(		"gtk_window_resize_grip_is_visible", ctypes.c_int, [
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_window_get_resize_grip_area = _rpythonic_function_(		"gtk_window_get_resize_grip_area", ctypes.c_int, [
	("window",		ctypes.POINTER(_GtkWindow)),
	("rect",		ctypes.POINTER(_cairo_rectangle_int)),] )

response = _rpythonic_function_(		"response", ctypes.c_void_p, [
	("dialog",		ctypes.POINTER(_GtkDialog)),
	("response_id",		ctypes.c_int),] )

gtk_dialog_get_type = _rpythonic_function_(		"gtk_dialog_get_type", ctypes.c_uint, [] )

gtk_dialog_new = _rpythonic_function_(		"gtk_dialog_new", ctypes.POINTER(_GtkWidget), [] )

gtk_dialog_add_action_widget = _rpythonic_function_(		"gtk_dialog_add_action_widget", ctypes.c_void_p, [
	("dialog",		ctypes.POINTER(_GtkDialog)),
	("child",		ctypes.POINTER(_GtkWidget)),
	("response_id",		ctypes.c_int),] )

gtk_dialog_add_button = _rpythonic_function_(		"gtk_dialog_add_button", ctypes.POINTER(_GtkWidget), [
	("dialog",		ctypes.POINTER(_GtkDialog)),
	("button_text",		ctypes.POINTER(ctypes.c_char)),
	("response_id",		ctypes.c_int),] )

gtk_dialog_set_response_sensitive = _rpythonic_function_(		"gtk_dialog_set_response_sensitive", ctypes.c_void_p, [
	("dialog",		ctypes.POINTER(_GtkDialog)),
	("response_id",		ctypes.c_int),
	("setting",		ctypes.c_int),] )

gtk_dialog_set_default_response = _rpythonic_function_(		"gtk_dialog_set_default_response", ctypes.c_void_p, [
	("dialog",		ctypes.POINTER(_GtkDialog)),
	("response_id",		ctypes.c_int),] )

gtk_dialog_get_widget_for_response = _rpythonic_function_(		"gtk_dialog_get_widget_for_response", ctypes.POINTER(_GtkWidget), [
	("dialog",		ctypes.POINTER(_GtkDialog)),
	("response_id",		ctypes.c_int),] )

gtk_dialog_get_response_for_widget = _rpythonic_function_(		"gtk_dialog_get_response_for_widget", ctypes.c_int, [
	("dialog",		ctypes.POINTER(_GtkDialog)),
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_alternative_dialog_button_order = _rpythonic_function_(		"gtk_alternative_dialog_button_order", ctypes.c_int, [
	("screen",		ctypes.POINTER(_GdkScreen)),] )

gtk_dialog_set_alternative_button_order_from_array = _rpythonic_function_(		"gtk_dialog_set_alternative_button_order_from_array", ctypes.c_void_p, [
	("dialog",		ctypes.POINTER(_GtkDialog)),
	("n_params",		ctypes.c_int),
	("new_order",		ctypes.POINTER(ctypes.c_int)),] )

gtk_dialog_response = _rpythonic_function_(		"gtk_dialog_response", ctypes.c_void_p, [
	("dialog",		ctypes.POINTER(_GtkDialog)),
	("response_id",		ctypes.c_int),] )

gtk_dialog_run = _rpythonic_function_(		"gtk_dialog_run", ctypes.c_int, [
	("dialog",		ctypes.POINTER(_GtkDialog)),] )

gtk_dialog_get_action_area = _rpythonic_function_(		"gtk_dialog_get_action_area", ctypes.POINTER(_GtkWidget), [
	("dialog",		ctypes.POINTER(_GtkDialog)),] )

gtk_dialog_get_content_area = _rpythonic_function_(		"gtk_dialog_get_content_area", ctypes.POINTER(_GtkWidget), [
	("dialog",		ctypes.POINTER(_GtkDialog)),] )

activate_link = _rpythonic_function_(		"activate_link", ctypes.c_int, [
	("dialog",		ctypes.POINTER(_GtkAboutDialog)),
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

gtk_about_dialog_get_type = _rpythonic_function_(		"gtk_about_dialog_get_type", ctypes.c_uint, [] )

gtk_about_dialog_new = _rpythonic_function_(		"gtk_about_dialog_new", ctypes.POINTER(_GtkWidget), [] )

gtk_about_dialog_get_program_name = _rpythonic_function_(		"gtk_about_dialog_get_program_name", ctypes.POINTER(ctypes.c_char), [
	("about",		ctypes.POINTER(_GtkAboutDialog)),] )

gtk_about_dialog_set_program_name = _rpythonic_function_(		"gtk_about_dialog_set_program_name", ctypes.c_void_p, [
	("about",		ctypes.POINTER(_GtkAboutDialog)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_about_dialog_get_version = _rpythonic_function_(		"gtk_about_dialog_get_version", ctypes.POINTER(ctypes.c_char), [
	("about",		ctypes.POINTER(_GtkAboutDialog)),] )

gtk_about_dialog_set_version = _rpythonic_function_(		"gtk_about_dialog_set_version", ctypes.c_void_p, [
	("about",		ctypes.POINTER(_GtkAboutDialog)),
	("version",		ctypes.POINTER(ctypes.c_char)),] )

gtk_about_dialog_get_copyright = _rpythonic_function_(		"gtk_about_dialog_get_copyright", ctypes.POINTER(ctypes.c_char), [
	("about",		ctypes.POINTER(_GtkAboutDialog)),] )

gtk_about_dialog_set_copyright = _rpythonic_function_(		"gtk_about_dialog_set_copyright", ctypes.c_void_p, [
	("about",		ctypes.POINTER(_GtkAboutDialog)),
	("copyright",		ctypes.POINTER(ctypes.c_char)),] )

gtk_about_dialog_get_comments = _rpythonic_function_(		"gtk_about_dialog_get_comments", ctypes.POINTER(ctypes.c_char), [
	("about",		ctypes.POINTER(_GtkAboutDialog)),] )

gtk_about_dialog_set_comments = _rpythonic_function_(		"gtk_about_dialog_set_comments", ctypes.c_void_p, [
	("about",		ctypes.POINTER(_GtkAboutDialog)),
	("comments",		ctypes.POINTER(ctypes.c_char)),] )

gtk_about_dialog_get_license = _rpythonic_function_(		"gtk_about_dialog_get_license", ctypes.POINTER(ctypes.c_char), [
	("about",		ctypes.POINTER(_GtkAboutDialog)),] )

gtk_about_dialog_set_license = _rpythonic_function_(		"gtk_about_dialog_set_license", ctypes.c_void_p, [
	("about",		ctypes.POINTER(_GtkAboutDialog)),
	("license",		ctypes.POINTER(ctypes.c_char)),] )

gtk_about_dialog_set_license_type = _rpythonic_function_(		"gtk_about_dialog_set_license_type", ctypes.c_void_p, [
	("about",		ctypes.POINTER(_GtkAboutDialog)),
	("license_type",		ctypes.c_int),] )

gtk_about_dialog_get_license_type = _rpythonic_function_(		"gtk_about_dialog_get_license_type", ctypes.c_int, [
	("about",		ctypes.POINTER(_GtkAboutDialog)),] )

gtk_about_dialog_get_wrap_license = _rpythonic_function_(		"gtk_about_dialog_get_wrap_license", ctypes.c_int, [
	("about",		ctypes.POINTER(_GtkAboutDialog)),] )

gtk_about_dialog_set_wrap_license = _rpythonic_function_(		"gtk_about_dialog_set_wrap_license", ctypes.c_void_p, [
	("about",		ctypes.POINTER(_GtkAboutDialog)),
	("wrap_license",		ctypes.c_int),] )

gtk_about_dialog_get_website = _rpythonic_function_(		"gtk_about_dialog_get_website", ctypes.POINTER(ctypes.c_char), [
	("about",		ctypes.POINTER(_GtkAboutDialog)),] )

gtk_about_dialog_set_website = _rpythonic_function_(		"gtk_about_dialog_set_website", ctypes.c_void_p, [
	("about",		ctypes.POINTER(_GtkAboutDialog)),
	("website",		ctypes.POINTER(ctypes.c_char)),] )

gtk_about_dialog_get_website_label = _rpythonic_function_(		"gtk_about_dialog_get_website_label", ctypes.POINTER(ctypes.c_char), [
	("about",		ctypes.POINTER(_GtkAboutDialog)),] )

gtk_about_dialog_set_website_label = _rpythonic_function_(		"gtk_about_dialog_set_website_label", ctypes.c_void_p, [
	("about",		ctypes.POINTER(_GtkAboutDialog)),
	("website_label",		ctypes.POINTER(ctypes.c_char)),] )

gtk_about_dialog_get_authors = _rpythonic_function_(		"gtk_about_dialog_get_authors", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("about",		ctypes.POINTER(_GtkAboutDialog)),] )

gtk_about_dialog_set_authors = _rpythonic_function_(		"gtk_about_dialog_set_authors", ctypes.c_void_p, [
	("about",		ctypes.POINTER(_GtkAboutDialog)),
	("authors",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

gtk_about_dialog_get_documenters = _rpythonic_function_(		"gtk_about_dialog_get_documenters", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("about",		ctypes.POINTER(_GtkAboutDialog)),] )

gtk_about_dialog_set_documenters = _rpythonic_function_(		"gtk_about_dialog_set_documenters", ctypes.c_void_p, [
	("about",		ctypes.POINTER(_GtkAboutDialog)),
	("documenters",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

gtk_about_dialog_get_artists = _rpythonic_function_(		"gtk_about_dialog_get_artists", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("about",		ctypes.POINTER(_GtkAboutDialog)),] )

gtk_about_dialog_set_artists = _rpythonic_function_(		"gtk_about_dialog_set_artists", ctypes.c_void_p, [
	("about",		ctypes.POINTER(_GtkAboutDialog)),
	("artists",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

gtk_about_dialog_get_translator_credits = _rpythonic_function_(		"gtk_about_dialog_get_translator_credits", ctypes.POINTER(ctypes.c_char), [
	("about",		ctypes.POINTER(_GtkAboutDialog)),] )

gtk_about_dialog_set_translator_credits = _rpythonic_function_(		"gtk_about_dialog_set_translator_credits", ctypes.c_void_p, [
	("about",		ctypes.POINTER(_GtkAboutDialog)),
	("translator_credits",		ctypes.POINTER(ctypes.c_char)),] )

gtk_about_dialog_get_logo = _rpythonic_function_(		"gtk_about_dialog_get_logo", ctypes.POINTER(_GdkPixbuf), [
	("about",		ctypes.POINTER(_GtkAboutDialog)),] )

gtk_about_dialog_set_logo = _rpythonic_function_(		"gtk_about_dialog_set_logo", ctypes.c_void_p, [
	("about",		ctypes.POINTER(_GtkAboutDialog)),
	("logo",		ctypes.POINTER(_GdkPixbuf)),] )

gtk_about_dialog_get_logo_icon_name = _rpythonic_function_(		"gtk_about_dialog_get_logo_icon_name", ctypes.POINTER(ctypes.c_char), [
	("about",		ctypes.POINTER(_GtkAboutDialog)),] )

gtk_about_dialog_set_logo_icon_name = _rpythonic_function_(		"gtk_about_dialog_set_logo_icon_name", ctypes.c_void_p, [
	("about",		ctypes.POINTER(_GtkAboutDialog)),
	("icon_name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_misc_get_type = _rpythonic_function_(		"gtk_misc_get_type", ctypes.c_uint, [] )

gtk_misc_set_alignment = _rpythonic_function_(		"gtk_misc_set_alignment", ctypes.c_void_p, [
	("misc",		ctypes.POINTER(_GtkMisc)),
	("xalign",		ctypes.c_float),
	("yalign",		ctypes.c_float),] )

gtk_misc_get_alignment = _rpythonic_function_(		"gtk_misc_get_alignment", ctypes.c_void_p, [
	("misc",		ctypes.POINTER(_GtkMisc)),
	("xalign",		ctypes.POINTER(ctypes.c_float)),
	("yalign",		ctypes.POINTER(ctypes.c_float)),] )

gtk_misc_set_padding = _rpythonic_function_(		"gtk_misc_set_padding", ctypes.c_void_p, [
	("misc",		ctypes.POINTER(_GtkMisc)),
	("xpad",		ctypes.c_int),
	("ypad",		ctypes.c_int),] )

gtk_misc_get_padding = _rpythonic_function_(		"gtk_misc_get_padding", ctypes.c_void_p, [
	("misc",		ctypes.POINTER(_GtkMisc)),
	("xpad",		ctypes.POINTER(ctypes.c_int)),
	("ypad",		ctypes.POINTER(ctypes.c_int)),] )

deactivate = _rpythonic_function_(		"deactivate", ctypes.c_void_p, [
	("menu_shell",		ctypes.POINTER(_GtkMenuShell)),] )

selection_done = _rpythonic_function_(		"selection_done", ctypes.c_void_p, [
	("menu_shell",		ctypes.POINTER(_GtkMenuShell)),] )

move_current = _rpythonic_function_(		"move_current", ctypes.c_void_p, [
	("menu_shell",		ctypes.POINTER(_GtkMenuShell)),
	("direction",		ctypes.c_int),] )

activate_current = _rpythonic_function_(		"activate_current", ctypes.c_void_p, [
	("menu_shell",		ctypes.POINTER(_GtkMenuShell)),
	("force_hide",		ctypes.c_int),] )

select_item = _rpythonic_function_(		"select_item", ctypes.c_void_p, [
	("menu_shell",		ctypes.POINTER(_GtkMenuShell)),
	("menu_item",		ctypes.POINTER(_GtkWidget)),] )

insert = _rpythonic_function_(		"insert", ctypes.c_void_p, [
	("menu_shell",		ctypes.POINTER(_GtkMenuShell)),
	("child",		ctypes.POINTER(_GtkWidget)),
	("position",		ctypes.c_int),] )

get_popup_delay = _rpythonic_function_(		"get_popup_delay", ctypes.c_int, [
	("menu_shell",		ctypes.POINTER(_GtkMenuShell)),] )

move_selected = _rpythonic_function_(		"move_selected", ctypes.c_int, [
	("menu_shell",		ctypes.POINTER(_GtkMenuShell)),
	("distance",		ctypes.c_int),] )

gtk_menu_shell_get_type = _rpythonic_function_(		"gtk_menu_shell_get_type", ctypes.c_uint, [] )

gtk_menu_shell_append = _rpythonic_function_(		"gtk_menu_shell_append", ctypes.c_void_p, [
	("menu_shell",		ctypes.POINTER(_GtkMenuShell)),
	("child",		ctypes.POINTER(_GtkWidget)),] )

gtk_menu_shell_prepend = _rpythonic_function_(		"gtk_menu_shell_prepend", ctypes.c_void_p, [
	("menu_shell",		ctypes.POINTER(_GtkMenuShell)),
	("child",		ctypes.POINTER(_GtkWidget)),] )

gtk_menu_shell_insert = _rpythonic_function_(		"gtk_menu_shell_insert", ctypes.c_void_p, [
	("menu_shell",		ctypes.POINTER(_GtkMenuShell)),
	("child",		ctypes.POINTER(_GtkWidget)),
	("position",		ctypes.c_int),] )

gtk_menu_shell_deactivate = _rpythonic_function_(		"gtk_menu_shell_deactivate", ctypes.c_void_p, [
	("menu_shell",		ctypes.POINTER(_GtkMenuShell)),] )

gtk_menu_shell_select_item = _rpythonic_function_(		"gtk_menu_shell_select_item", ctypes.c_void_p, [
	("menu_shell",		ctypes.POINTER(_GtkMenuShell)),
	("menu_item",		ctypes.POINTER(_GtkWidget)),] )

gtk_menu_shell_deselect = _rpythonic_function_(		"gtk_menu_shell_deselect", ctypes.c_void_p, [
	("menu_shell",		ctypes.POINTER(_GtkMenuShell)),] )

gtk_menu_shell_activate_item = _rpythonic_function_(		"gtk_menu_shell_activate_item", ctypes.c_void_p, [
	("menu_shell",		ctypes.POINTER(_GtkMenuShell)),
	("menu_item",		ctypes.POINTER(_GtkWidget)),
	("force_deactivate",		ctypes.c_int),] )

gtk_menu_shell_select_first = _rpythonic_function_(		"gtk_menu_shell_select_first", ctypes.c_void_p, [
	("menu_shell",		ctypes.POINTER(_GtkMenuShell)),
	("search_sensitive",		ctypes.c_int),] )

gtk_menu_shell_cancel = _rpythonic_function_(		"gtk_menu_shell_cancel", ctypes.c_void_p, [
	("menu_shell",		ctypes.POINTER(_GtkMenuShell)),] )

gtk_menu_shell_get_take_focus = _rpythonic_function_(		"gtk_menu_shell_get_take_focus", ctypes.c_int, [
	("menu_shell",		ctypes.POINTER(_GtkMenuShell)),] )

gtk_menu_shell_set_take_focus = _rpythonic_function_(		"gtk_menu_shell_set_take_focus", ctypes.c_void_p, [
	("menu_shell",		ctypes.POINTER(_GtkMenuShell)),
	("take_focus",		ctypes.c_int),] )

gtk_menu_shell_get_selected_item = _rpythonic_function_(		"gtk_menu_shell_get_selected_item", ctypes.POINTER(_GtkWidget), [
	("menu_shell",		ctypes.POINTER(_GtkMenuShell)),] )

gtk_menu_shell_get_parent_shell = _rpythonic_function_(		"gtk_menu_shell_get_parent_shell", ctypes.POINTER(_GtkWidget), [
	("menu_shell",		ctypes.POINTER(_GtkMenuShell)),] )

GtkMenuPositionFunc = _rpythonic_function_(		"GtkMenuPositionFunc", ctypes.c_void_p, [
	("menu",		ctypes.POINTER(_GtkMenu)),
	("x",		ctypes.POINTER(ctypes.c_int)),
	("y",		ctypes.POINTER(ctypes.c_int)),
	("push_in",		ctypes.POINTER(ctypes.c_int)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GtkMenuDetachFunc = _rpythonic_function_(		"GtkMenuDetachFunc", ctypes.c_void_p, [
	("attach_widget",		ctypes.POINTER(_GtkWidget)),
	("menu",		ctypes.POINTER(_GtkMenu)),] )

gtk_menu_get_type = _rpythonic_function_(		"gtk_menu_get_type", ctypes.c_uint, [] )

gtk_menu_new = _rpythonic_function_(		"gtk_menu_new", ctypes.POINTER(_GtkWidget), [] )

gtk_menu_popup = _rpythonic_function_(		"gtk_menu_popup", ctypes.c_void_p, [
	("menu",		ctypes.POINTER(_GtkMenu)),
	("parent_menu_shell",		ctypes.POINTER(_GtkWidget)),
	("parent_menu_item",		ctypes.POINTER(_GtkWidget)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GtkMenu),ctypes.POINTER(ctypes.c_int),ctypes.POINTER(ctypes.c_int),ctypes.POINTER(ctypes.c_int),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("button",		ctypes.c_uint),
	("activate_time",		ctypes.c_uint),] )

gtk_menu_popup_for_device = _rpythonic_function_(		"gtk_menu_popup_for_device", ctypes.c_void_p, [
	("menu",		ctypes.POINTER(_GtkMenu)),
	("device",		ctypes.POINTER(_GdkDevice)),
	("parent_menu_shell",		ctypes.POINTER(_GtkWidget)),
	("parent_menu_item",		ctypes.POINTER(_GtkWidget)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GtkMenu),ctypes.POINTER(ctypes.c_int),ctypes.POINTER(ctypes.c_int),ctypes.POINTER(ctypes.c_int),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("button",		ctypes.c_uint),
	("activate_time",		ctypes.c_uint),] )

gtk_menu_reposition = _rpythonic_function_(		"gtk_menu_reposition", ctypes.c_void_p, [
	("menu",		ctypes.POINTER(_GtkMenu)),] )

gtk_menu_popdown = _rpythonic_function_(		"gtk_menu_popdown", ctypes.c_void_p, [
	("menu",		ctypes.POINTER(_GtkMenu)),] )

gtk_menu_get_active = _rpythonic_function_(		"gtk_menu_get_active", ctypes.POINTER(_GtkWidget), [
	("menu",		ctypes.POINTER(_GtkMenu)),] )

gtk_menu_set_active = _rpythonic_function_(		"gtk_menu_set_active", ctypes.c_void_p, [
	("menu",		ctypes.POINTER(_GtkMenu)),
	("index",		ctypes.c_uint),] )

gtk_menu_set_accel_group = _rpythonic_function_(		"gtk_menu_set_accel_group", ctypes.c_void_p, [
	("menu",		ctypes.POINTER(_GtkMenu)),
	("accel_group",		ctypes.POINTER(_GtkAccelGroup)),] )

gtk_menu_get_accel_group = _rpythonic_function_(		"gtk_menu_get_accel_group", ctypes.POINTER(_GtkAccelGroup), [
	("menu",		ctypes.POINTER(_GtkMenu)),] )

gtk_menu_set_accel_path = _rpythonic_function_(		"gtk_menu_set_accel_path", ctypes.c_void_p, [
	("menu",		ctypes.POINTER(_GtkMenu)),
	("accel_path",		ctypes.POINTER(ctypes.c_char)),] )

gtk_menu_get_accel_path = _rpythonic_function_(		"gtk_menu_get_accel_path", ctypes.POINTER(ctypes.c_char), [
	("menu",		ctypes.POINTER(_GtkMenu)),] )

gtk_menu_attach_to_widget = _rpythonic_function_(		"gtk_menu_attach_to_widget", ctypes.c_void_p, [
	("menu",		ctypes.POINTER(_GtkMenu)),
	("attach_widget",		ctypes.POINTER(_GtkWidget)),
	("detacher",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GtkWidget),ctypes.POINTER(_GtkMenu),)),] )

gtk_menu_detach = _rpythonic_function_(		"gtk_menu_detach", ctypes.c_void_p, [
	("menu",		ctypes.POINTER(_GtkMenu)),] )

gtk_menu_get_attach_widget = _rpythonic_function_(		"gtk_menu_get_attach_widget", ctypes.POINTER(_GtkWidget), [
	("menu",		ctypes.POINTER(_GtkMenu)),] )

gtk_menu_set_tearoff_state = _rpythonic_function_(		"gtk_menu_set_tearoff_state", ctypes.c_void_p, [
	("menu",		ctypes.POINTER(_GtkMenu)),
	("torn_off",		ctypes.c_int),] )

gtk_menu_get_tearoff_state = _rpythonic_function_(		"gtk_menu_get_tearoff_state", ctypes.c_int, [
	("menu",		ctypes.POINTER(_GtkMenu)),] )

gtk_menu_set_title = _rpythonic_function_(		"gtk_menu_set_title", ctypes.c_void_p, [
	("menu",		ctypes.POINTER(_GtkMenu)),
	("title",		ctypes.POINTER(ctypes.c_char)),] )

gtk_menu_get_title = _rpythonic_function_(		"gtk_menu_get_title", ctypes.POINTER(ctypes.c_char), [
	("menu",		ctypes.POINTER(_GtkMenu)),] )

gtk_menu_reorder_child = _rpythonic_function_(		"gtk_menu_reorder_child", ctypes.c_void_p, [
	("menu",		ctypes.POINTER(_GtkMenu)),
	("child",		ctypes.POINTER(_GtkWidget)),
	("position",		ctypes.c_int),] )

gtk_menu_set_screen = _rpythonic_function_(		"gtk_menu_set_screen", ctypes.c_void_p, [
	("menu",		ctypes.POINTER(_GtkMenu)),
	("screen",		ctypes.POINTER(_GdkScreen)),] )

gtk_menu_attach = _rpythonic_function_(		"gtk_menu_attach", ctypes.c_void_p, [
	("menu",		ctypes.POINTER(_GtkMenu)),
	("child",		ctypes.POINTER(_GtkWidget)),
	("left_attach",		ctypes.c_uint),
	("right_attach",		ctypes.c_uint),
	("top_attach",		ctypes.c_uint),
	("bottom_attach",		ctypes.c_uint),] )

gtk_menu_set_monitor = _rpythonic_function_(		"gtk_menu_set_monitor", ctypes.c_void_p, [
	("menu",		ctypes.POINTER(_GtkMenu)),
	("monitor_num",		ctypes.c_int),] )

gtk_menu_get_monitor = _rpythonic_function_(		"gtk_menu_get_monitor", ctypes.c_int, [
	("menu",		ctypes.POINTER(_GtkMenu)),] )

gtk_menu_get_for_attach_widget = _rpythonic_function_(		"gtk_menu_get_for_attach_widget", ctypes.POINTER(_GList), [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_menu_set_reserve_toggle_size = _rpythonic_function_(		"gtk_menu_set_reserve_toggle_size", ctypes.c_void_p, [
	("menu",		ctypes.POINTER(_GtkMenu)),
	("reserve_toggle_size",		ctypes.c_int),] )

gtk_menu_get_reserve_toggle_size = _rpythonic_function_(		"gtk_menu_get_reserve_toggle_size", ctypes.c_int, [
	("menu",		ctypes.POINTER(_GtkMenu)),] )

move_cursor = _rpythonic_function_(		"move_cursor", ctypes.c_void_p, [
	("label",		ctypes.POINTER(_GtkLabel)),
	("step",		ctypes.c_int),
	("count",		ctypes.c_int),
	("extend_selection",		ctypes.c_int),] )

copy_clipboard = _rpythonic_function_(		"copy_clipboard", ctypes.c_void_p, [
	("label",		ctypes.POINTER(_GtkLabel)),] )

populate_popup = _rpythonic_function_(		"populate_popup", ctypes.c_void_p, [
	("label",		ctypes.POINTER(_GtkLabel)),
	("menu",		ctypes.POINTER(_GtkMenu)),] )

gtk_label_get_type = _rpythonic_function_(		"gtk_label_get_type", ctypes.c_uint, [] )

gtk_label_new = _rpythonic_function_(		"gtk_label_new", ctypes.POINTER(_GtkWidget), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

gtk_label_new_with_mnemonic = _rpythonic_function_(		"gtk_label_new_with_mnemonic", ctypes.POINTER(_GtkWidget), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

gtk_label_set_text = _rpythonic_function_(		"gtk_label_set_text", ctypes.c_void_p, [
	("label",		ctypes.POINTER(_GtkLabel)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

gtk_label_get_text = _rpythonic_function_(		"gtk_label_get_text", ctypes.POINTER(ctypes.c_char), [
	("label",		ctypes.POINTER(_GtkLabel)),] )

gtk_label_set_attributes = _rpythonic_function_(		"gtk_label_set_attributes", ctypes.c_void_p, [
	("label",		ctypes.POINTER(_GtkLabel)),
	("attrs",		ctypes.POINTER(_PangoAttrList)),] )

gtk_label_get_attributes = _rpythonic_function_(		"gtk_label_get_attributes", ctypes.POINTER(_PangoAttrList), [
	("label",		ctypes.POINTER(_GtkLabel)),] )

gtk_label_set_label = _rpythonic_function_(		"gtk_label_set_label", ctypes.c_void_p, [
	("label",		ctypes.POINTER(_GtkLabel)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

gtk_label_get_label = _rpythonic_function_(		"gtk_label_get_label", ctypes.POINTER(ctypes.c_char), [
	("label",		ctypes.POINTER(_GtkLabel)),] )

gtk_label_set_markup = _rpythonic_function_(		"gtk_label_set_markup", ctypes.c_void_p, [
	("label",		ctypes.POINTER(_GtkLabel)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

gtk_label_set_use_markup = _rpythonic_function_(		"gtk_label_set_use_markup", ctypes.c_void_p, [
	("label",		ctypes.POINTER(_GtkLabel)),
	("setting",		ctypes.c_int),] )

gtk_label_get_use_markup = _rpythonic_function_(		"gtk_label_get_use_markup", ctypes.c_int, [
	("label",		ctypes.POINTER(_GtkLabel)),] )

gtk_label_set_use_underline = _rpythonic_function_(		"gtk_label_set_use_underline", ctypes.c_void_p, [
	("label",		ctypes.POINTER(_GtkLabel)),
	("setting",		ctypes.c_int),] )

gtk_label_get_use_underline = _rpythonic_function_(		"gtk_label_get_use_underline", ctypes.c_int, [
	("label",		ctypes.POINTER(_GtkLabel)),] )

gtk_label_set_markup_with_mnemonic = _rpythonic_function_(		"gtk_label_set_markup_with_mnemonic", ctypes.c_void_p, [
	("label",		ctypes.POINTER(_GtkLabel)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

gtk_label_get_mnemonic_keyval = _rpythonic_function_(		"gtk_label_get_mnemonic_keyval", ctypes.c_uint, [
	("label",		ctypes.POINTER(_GtkLabel)),] )

gtk_label_set_mnemonic_widget = _rpythonic_function_(		"gtk_label_set_mnemonic_widget", ctypes.c_void_p, [
	("label",		ctypes.POINTER(_GtkLabel)),
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_label_get_mnemonic_widget = _rpythonic_function_(		"gtk_label_get_mnemonic_widget", ctypes.POINTER(_GtkWidget), [
	("label",		ctypes.POINTER(_GtkLabel)),] )

gtk_label_set_text_with_mnemonic = _rpythonic_function_(		"gtk_label_set_text_with_mnemonic", ctypes.c_void_p, [
	("label",		ctypes.POINTER(_GtkLabel)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

gtk_label_set_justify = _rpythonic_function_(		"gtk_label_set_justify", ctypes.c_void_p, [
	("label",		ctypes.POINTER(_GtkLabel)),
	("jtype",		ctypes.c_int),] )

gtk_label_get_justify = _rpythonic_function_(		"gtk_label_get_justify", ctypes.c_int, [
	("label",		ctypes.POINTER(_GtkLabel)),] )

gtk_label_set_ellipsize = _rpythonic_function_(		"gtk_label_set_ellipsize", ctypes.c_void_p, [
	("label",		ctypes.POINTER(_GtkLabel)),
	("mode",		ctypes.c_int),] )

gtk_label_get_ellipsize = _rpythonic_function_(		"gtk_label_get_ellipsize", ctypes.c_int, [
	("label",		ctypes.POINTER(_GtkLabel)),] )

gtk_label_set_width_chars = _rpythonic_function_(		"gtk_label_set_width_chars", ctypes.c_void_p, [
	("label",		ctypes.POINTER(_GtkLabel)),
	("n_chars",		ctypes.c_int),] )

gtk_label_get_width_chars = _rpythonic_function_(		"gtk_label_get_width_chars", ctypes.c_int, [
	("label",		ctypes.POINTER(_GtkLabel)),] )

gtk_label_set_max_width_chars = _rpythonic_function_(		"gtk_label_set_max_width_chars", ctypes.c_void_p, [
	("label",		ctypes.POINTER(_GtkLabel)),
	("n_chars",		ctypes.c_int),] )

gtk_label_get_max_width_chars = _rpythonic_function_(		"gtk_label_get_max_width_chars", ctypes.c_int, [
	("label",		ctypes.POINTER(_GtkLabel)),] )

gtk_label_set_pattern = _rpythonic_function_(		"gtk_label_set_pattern", ctypes.c_void_p, [
	("label",		ctypes.POINTER(_GtkLabel)),
	("pattern",		ctypes.POINTER(ctypes.c_char)),] )

gtk_label_set_line_wrap = _rpythonic_function_(		"gtk_label_set_line_wrap", ctypes.c_void_p, [
	("label",		ctypes.POINTER(_GtkLabel)),
	("wrap",		ctypes.c_int),] )

gtk_label_get_line_wrap = _rpythonic_function_(		"gtk_label_get_line_wrap", ctypes.c_int, [
	("label",		ctypes.POINTER(_GtkLabel)),] )

gtk_label_set_line_wrap_mode = _rpythonic_function_(		"gtk_label_set_line_wrap_mode", ctypes.c_void_p, [
	("label",		ctypes.POINTER(_GtkLabel)),
	("wrap_mode",		ctypes.c_int),] )

gtk_label_get_line_wrap_mode = _rpythonic_function_(		"gtk_label_get_line_wrap_mode", ctypes.c_int, [
	("label",		ctypes.POINTER(_GtkLabel)),] )

gtk_label_set_selectable = _rpythonic_function_(		"gtk_label_set_selectable", ctypes.c_void_p, [
	("label",		ctypes.POINTER(_GtkLabel)),
	("setting",		ctypes.c_int),] )

gtk_label_get_selectable = _rpythonic_function_(		"gtk_label_get_selectable", ctypes.c_int, [
	("label",		ctypes.POINTER(_GtkLabel)),] )

gtk_label_set_angle = _rpythonic_function_(		"gtk_label_set_angle", ctypes.c_void_p, [
	("label",		ctypes.POINTER(_GtkLabel)),
	("angle",		ctypes.c_double),] )

gtk_label_get_angle = _rpythonic_function_(		"gtk_label_get_angle", ctypes.c_double, [
	("label",		ctypes.POINTER(_GtkLabel)),] )

gtk_label_select_region = _rpythonic_function_(		"gtk_label_select_region", ctypes.c_void_p, [
	("label",		ctypes.POINTER(_GtkLabel)),
	("start_offset",		ctypes.c_int),
	("end_offset",		ctypes.c_int),] )

gtk_label_get_selection_bounds = _rpythonic_function_(		"gtk_label_get_selection_bounds", ctypes.c_int, [
	("label",		ctypes.POINTER(_GtkLabel)),
	("start",		ctypes.POINTER(ctypes.c_int)),
	("end",		ctypes.POINTER(ctypes.c_int)),] )

gtk_label_get_layout = _rpythonic_function_(		"gtk_label_get_layout", ctypes.POINTER(_PangoLayout), [
	("label",		ctypes.POINTER(_GtkLabel)),] )

gtk_label_get_layout_offsets = _rpythonic_function_(		"gtk_label_get_layout_offsets", ctypes.c_void_p, [
	("label",		ctypes.POINTER(_GtkLabel)),
	("x",		ctypes.POINTER(ctypes.c_int)),
	("y",		ctypes.POINTER(ctypes.c_int)),] )

gtk_label_set_single_line_mode = _rpythonic_function_(		"gtk_label_set_single_line_mode", ctypes.c_void_p, [
	("label",		ctypes.POINTER(_GtkLabel)),
	("single_line_mode",		ctypes.c_int),] )

gtk_label_get_single_line_mode = _rpythonic_function_(		"gtk_label_get_single_line_mode", ctypes.c_int, [
	("label",		ctypes.POINTER(_GtkLabel)),] )

gtk_label_get_current_uri = _rpythonic_function_(		"gtk_label_get_current_uri", ctypes.POINTER(ctypes.c_char), [
	("label",		ctypes.POINTER(_GtkLabel)),] )

gtk_label_set_track_visited_links = _rpythonic_function_(		"gtk_label_set_track_visited_links", ctypes.c_void_p, [
	("label",		ctypes.POINTER(_GtkLabel)),
	("track_links",		ctypes.c_int),] )

gtk_label_get_track_visited_links = _rpythonic_function_(		"gtk_label_get_track_visited_links", ctypes.c_int, [
	("label",		ctypes.POINTER(_GtkLabel)),] )

_gtk_label_mnemonics_visible_apply_recursively = _rpythonic_function_(		"_gtk_label_mnemonics_visible_apply_recursively", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("mnemonics_visible",		ctypes.c_int),] )

_gtk_label_get_cursor_position = _rpythonic_function_(		"_gtk_label_get_cursor_position", ctypes.c_int, [
	("label",		ctypes.POINTER(_GtkLabel)),] )

_gtk_label_get_selection_bound = _rpythonic_function_(		"_gtk_label_get_selection_bound", ctypes.c_int, [
	("label",		ctypes.POINTER(_GtkLabel)),] )

gtk_accel_label_get_type = _rpythonic_function_(		"gtk_accel_label_get_type", ctypes.c_uint, [] )

gtk_accel_label_new = _rpythonic_function_(		"gtk_accel_label_new", ctypes.POINTER(_GtkWidget), [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

gtk_accel_label_get_accel_widget = _rpythonic_function_(		"gtk_accel_label_get_accel_widget", ctypes.POINTER(_GtkWidget), [
	("accel_label",		ctypes.POINTER(_GtkAccelLabel)),] )

gtk_accel_label_get_accel_width = _rpythonic_function_(		"gtk_accel_label_get_accel_width", ctypes.c_uint, [
	("accel_label",		ctypes.POINTER(_GtkAccelLabel)),] )

gtk_accel_label_set_accel_widget = _rpythonic_function_(		"gtk_accel_label_set_accel_widget", ctypes.c_void_p, [
	("accel_label",		ctypes.POINTER(_GtkAccelLabel)),
	("accel_widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_accel_label_set_accel_closure = _rpythonic_function_(		"gtk_accel_label_set_accel_closure", ctypes.c_void_p, [
	("accel_label",		ctypes.POINTER(_GtkAccelLabel)),
	("accel_closure",		ctypes.POINTER(_GClosure)),] )

gtk_accel_label_refetch = _rpythonic_function_(		"gtk_accel_label_refetch", ctypes.c_int, [
	("accel_label",		ctypes.POINTER(_GtkAccelLabel)),] )

_gtk_accel_label_class_get_accelerator_label = _rpythonic_function_(		"_gtk_accel_label_class_get_accelerator_label", ctypes.POINTER(ctypes.c_char), [
	("klass",		ctypes.POINTER(_GtkAccelLabelClass)),
	("accelerator_key",		ctypes.c_uint),
	("accelerator_mods",		ctypes.c_int),] )

GtkAccelMapForeach = _rpythonic_function_(		"GtkAccelMapForeach", ctypes.c_void_p, [
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("accel_path",		ctypes.POINTER(ctypes.c_char)),
	("accel_key",		ctypes.c_uint),
	("accel_mods",		ctypes.c_int),
	("changed",		ctypes.c_int),] )

gtk_accel_map_add_entry = _rpythonic_function_(		"gtk_accel_map_add_entry", ctypes.c_void_p, [
	("accel_path",		ctypes.POINTER(ctypes.c_char)),
	("accel_key",		ctypes.c_uint),
	("accel_mods",		ctypes.c_int),] )

gtk_accel_map_lookup_entry = _rpythonic_function_(		"gtk_accel_map_lookup_entry", ctypes.c_int, [
	("accel_path",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(_GtkAccelKey)),] )

gtk_accel_map_change_entry = _rpythonic_function_(		"gtk_accel_map_change_entry", ctypes.c_int, [
	("accel_path",		ctypes.POINTER(ctypes.c_char)),
	("accel_key",		ctypes.c_uint),
	("accel_mods",		ctypes.c_int),
	("replace",		ctypes.c_int),] )

gtk_accel_map_load = _rpythonic_function_(		"gtk_accel_map_load", ctypes.c_void_p, [
	("file_name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_accel_map_save = _rpythonic_function_(		"gtk_accel_map_save", ctypes.c_void_p, [
	("file_name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_accel_map_foreach = _rpythonic_function_(		"gtk_accel_map_foreach", ctypes.c_void_p, [
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("foreach_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),ctypes.c_uint,ctypes.c_int,ctypes.c_int,)),] )

gtk_accel_map_load_fd = _rpythonic_function_(		"gtk_accel_map_load_fd", ctypes.c_void_p, [
	("fd",		ctypes.c_int),] )

gtk_accel_map_load_scanner = _rpythonic_function_(		"gtk_accel_map_load_scanner", ctypes.c_void_p, [
	("scanner",		ctypes.POINTER(_GScanner)),] )

gtk_accel_map_save_fd = _rpythonic_function_(		"gtk_accel_map_save_fd", ctypes.c_void_p, [
	("fd",		ctypes.c_int),] )

gtk_accel_map_lock_path = _rpythonic_function_(		"gtk_accel_map_lock_path", ctypes.c_void_p, [
	("accel_path",		ctypes.POINTER(ctypes.c_char)),] )

gtk_accel_map_unlock_path = _rpythonic_function_(		"gtk_accel_map_unlock_path", ctypes.c_void_p, [
	("accel_path",		ctypes.POINTER(ctypes.c_char)),] )

gtk_accel_map_add_filter = _rpythonic_function_(		"gtk_accel_map_add_filter", ctypes.c_void_p, [
	("filter_pattern",		ctypes.POINTER(ctypes.c_char)),] )

gtk_accel_map_foreach_unfiltered = _rpythonic_function_(		"gtk_accel_map_foreach_unfiltered", ctypes.c_void_p, [
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("foreach_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),ctypes.c_uint,ctypes.c_int,ctypes.c_int,)),] )

gtk_accel_map_get_type = _rpythonic_function_(		"gtk_accel_map_get_type", ctypes.c_uint, [] )

gtk_accel_map_get = _rpythonic_function_(		"gtk_accel_map_get", ctypes.POINTER(_GtkAccelMap), [] )

_gtk_accel_map_init = _rpythonic_function_(		"_gtk_accel_map_init", ctypes.c_void_p, [] )

_gtk_accel_map_add_group = _rpythonic_function_(		"_gtk_accel_map_add_group", ctypes.c_void_p, [
	("accel_path",		ctypes.POINTER(ctypes.c_char)),
	("accel_group",		ctypes.POINTER(_GtkAccelGroup)),] )

_gtk_accel_map_remove_group = _rpythonic_function_(		"_gtk_accel_map_remove_group", ctypes.c_void_p, [
	("accel_path",		ctypes.POINTER(ctypes.c_char)),
	("accel_group",		ctypes.POINTER(_GtkAccelGroup)),] )

_gtk_accel_path_is_valid = _rpythonic_function_(		"_gtk_accel_path_is_valid", ctypes.c_int, [
	("accel_path",		ctypes.POINTER(ctypes.c_char)),] )

connect_widget_destroyed = _rpythonic_function_(		"connect_widget_destroyed", ctypes.c_void_p, [
	("accessible",		ctypes.POINTER(_GtkAccessible)),] )

gtk_accessible_get_type = _rpythonic_function_(		"gtk_accessible_get_type", ctypes.c_uint, [] )

gtk_accessible_set_widget = _rpythonic_function_(		"gtk_accessible_set_widget", ctypes.c_void_p, [
	("accessible",		ctypes.POINTER(_GtkAccessible)),
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_accessible_get_widget = _rpythonic_function_(		"gtk_accessible_get_widget", ctypes.POINTER(_GtkWidget), [
	("accessible",		ctypes.POINTER(_GtkAccessible)),] )

gtk_accessible_connect_widget_destroyed = _rpythonic_function_(		"gtk_accessible_connect_widget_destroyed", ctypes.c_void_p, [
	("accessible",		ctypes.POINTER(_GtkAccessible)),] )

update = _rpythonic_function_(		"update", ctypes.c_void_p, [
	("activatable",		ctypes.POINTER(_GtkActivatable)),
	("action",		ctypes.POINTER(_GtkAction)),
	("property_name",		ctypes.POINTER(ctypes.c_char)),] )

sync_action_properties = _rpythonic_function_(		"sync_action_properties", ctypes.c_void_p, [
	("activatable",		ctypes.POINTER(_GtkActivatable)),
	("action",		ctypes.POINTER(_GtkAction)),] )

gtk_activatable_get_type = _rpythonic_function_(		"gtk_activatable_get_type", ctypes.c_uint, [] )

gtk_activatable_sync_action_properties = _rpythonic_function_(		"gtk_activatable_sync_action_properties", ctypes.c_void_p, [
	("activatable",		ctypes.POINTER(_GtkActivatable)),
	("action",		ctypes.POINTER(_GtkAction)),] )

gtk_activatable_set_related_action = _rpythonic_function_(		"gtk_activatable_set_related_action", ctypes.c_void_p, [
	("activatable",		ctypes.POINTER(_GtkActivatable)),
	("action",		ctypes.POINTER(_GtkAction)),] )

gtk_activatable_get_related_action = _rpythonic_function_(		"gtk_activatable_get_related_action", ctypes.POINTER(_GtkAction), [
	("activatable",		ctypes.POINTER(_GtkActivatable)),] )

gtk_activatable_set_use_action_appearance = _rpythonic_function_(		"gtk_activatable_set_use_action_appearance", ctypes.c_void_p, [
	("activatable",		ctypes.POINTER(_GtkActivatable)),
	("use_appearance",		ctypes.c_int),] )

gtk_activatable_get_use_action_appearance = _rpythonic_function_(		"gtk_activatable_get_use_action_appearance", ctypes.c_int, [
	("activatable",		ctypes.POINTER(_GtkActivatable)),] )

gtk_activatable_do_set_related_action = _rpythonic_function_(		"gtk_activatable_do_set_related_action", ctypes.c_void_p, [
	("activatable",		ctypes.POINTER(_GtkActivatable)),
	("action",		ctypes.POINTER(_GtkAction)),] )

gtk_alignment_get_type = _rpythonic_function_(		"gtk_alignment_get_type", ctypes.c_uint, [] )

gtk_alignment_new = _rpythonic_function_(		"gtk_alignment_new", ctypes.POINTER(_GtkWidget), [
	("xalign",		ctypes.c_float),
	("yalign",		ctypes.c_float),
	("xscale",		ctypes.c_float),
	("yscale",		ctypes.c_float),] )

gtk_alignment_set = _rpythonic_function_(		"gtk_alignment_set", ctypes.c_void_p, [
	("alignment",		ctypes.POINTER(_GtkAlignment)),
	("xalign",		ctypes.c_float),
	("yalign",		ctypes.c_float),
	("xscale",		ctypes.c_float),
	("yscale",		ctypes.c_float),] )

gtk_alignment_set_padding = _rpythonic_function_(		"gtk_alignment_set_padding", ctypes.c_void_p, [
	("alignment",		ctypes.POINTER(_GtkAlignment)),
	("padding_top",		ctypes.c_uint),
	("padding_bottom",		ctypes.c_uint),
	("padding_left",		ctypes.c_uint),
	("padding_right",		ctypes.c_uint),] )

gtk_alignment_get_padding = _rpythonic_function_(		"gtk_alignment_get_padding", ctypes.c_void_p, [
	("alignment",		ctypes.POINTER(_GtkAlignment)),
	("padding_top",		ctypes.POINTER(ctypes.c_uint)),
	("padding_bottom",		ctypes.POINTER(ctypes.c_uint)),
	("padding_left",		ctypes.POINTER(ctypes.c_uint)),
	("padding_right",		ctypes.POINTER(ctypes.c_uint)),] )

gtk_app_chooser_get_type = _rpythonic_function_(		"gtk_app_chooser_get_type", ctypes.c_uint, [] )

gtk_app_chooser_get_app_info = _rpythonic_function_(		"gtk_app_chooser_get_app_info", ctypes.POINTER(_GAppInfo), [
	("C_self",		ctypes.POINTER(_GtkAppChooser)),] )

gtk_app_chooser_get_content_type = _rpythonic_function_(		"gtk_app_chooser_get_content_type", ctypes.POINTER(ctypes.c_char), [
	("C_self",		ctypes.POINTER(_GtkAppChooser)),] )

gtk_app_chooser_refresh = _rpythonic_function_(		"gtk_app_chooser_refresh", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_GtkAppChooser)),] )

gtk_app_chooser_dialog_get_type = _rpythonic_function_(		"gtk_app_chooser_dialog_get_type", ctypes.c_uint, [] )

gtk_app_chooser_dialog_new = _rpythonic_function_(		"gtk_app_chooser_dialog_new", ctypes.POINTER(_GtkWidget), [
	("parent",		ctypes.POINTER(_GtkWindow)),
	("flags",		ctypes.c_int),
	("file",		ctypes.POINTER(_GFile)),] )

gtk_app_chooser_dialog_new_for_content_type = _rpythonic_function_(		"gtk_app_chooser_dialog_new_for_content_type", ctypes.POINTER(_GtkWidget), [
	("parent",		ctypes.POINTER(_GtkWindow)),
	("flags",		ctypes.c_int),
	("content_type",		ctypes.POINTER(ctypes.c_char)),] )

gtk_app_chooser_dialog_get_widget = _rpythonic_function_(		"gtk_app_chooser_dialog_get_widget", ctypes.POINTER(_GtkWidget), [
	("C_self",		ctypes.POINTER(_GtkAppChooserDialog)),] )

gtk_app_chooser_dialog_set_heading = _rpythonic_function_(		"gtk_app_chooser_dialog_set_heading", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_GtkAppChooserDialog)),
	("heading",		ctypes.POINTER(ctypes.c_char)),] )

gtk_app_chooser_dialog_get_heading = _rpythonic_function_(		"gtk_app_chooser_dialog_get_heading", ctypes.POINTER(ctypes.c_char), [
	("C_self",		ctypes.POINTER(_GtkAppChooserDialog)),] )

gtk_box_get_type = _rpythonic_function_(		"gtk_box_get_type", ctypes.c_uint, [] )

gtk_box_new = _rpythonic_function_(		"gtk_box_new", ctypes.POINTER(_GtkWidget), [
	("orientation",		ctypes.c_int),
	("spacing",		ctypes.c_int),] )

gtk_box_pack_start = _rpythonic_function_(		"gtk_box_pack_start", ctypes.c_void_p, [
	("box",		ctypes.POINTER(_GtkBox)),
	("child",		ctypes.POINTER(_GtkWidget)),
	("expand",		ctypes.c_int),
	("fill",		ctypes.c_int),
	("padding",		ctypes.c_uint),] )

gtk_box_pack_end = _rpythonic_function_(		"gtk_box_pack_end", ctypes.c_void_p, [
	("box",		ctypes.POINTER(_GtkBox)),
	("child",		ctypes.POINTER(_GtkWidget)),
	("expand",		ctypes.c_int),
	("fill",		ctypes.c_int),
	("padding",		ctypes.c_uint),] )

gtk_box_set_homogeneous = _rpythonic_function_(		"gtk_box_set_homogeneous", ctypes.c_void_p, [
	("box",		ctypes.POINTER(_GtkBox)),
	("homogeneous",		ctypes.c_int),] )

gtk_box_get_homogeneous = _rpythonic_function_(		"gtk_box_get_homogeneous", ctypes.c_int, [
	("box",		ctypes.POINTER(_GtkBox)),] )

gtk_box_set_spacing = _rpythonic_function_(		"gtk_box_set_spacing", ctypes.c_void_p, [
	("box",		ctypes.POINTER(_GtkBox)),
	("spacing",		ctypes.c_int),] )

gtk_box_get_spacing = _rpythonic_function_(		"gtk_box_get_spacing", ctypes.c_int, [
	("box",		ctypes.POINTER(_GtkBox)),] )

gtk_box_reorder_child = _rpythonic_function_(		"gtk_box_reorder_child", ctypes.c_void_p, [
	("box",		ctypes.POINTER(_GtkBox)),
	("child",		ctypes.POINTER(_GtkWidget)),
	("position",		ctypes.c_int),] )

gtk_box_query_child_packing = _rpythonic_function_(		"gtk_box_query_child_packing", ctypes.c_void_p, [
	("box",		ctypes.POINTER(_GtkBox)),
	("child",		ctypes.POINTER(_GtkWidget)),
	("expand",		ctypes.POINTER(ctypes.c_int)),
	("fill",		ctypes.POINTER(ctypes.c_int)),
	("padding",		ctypes.POINTER(ctypes.c_uint)),
	("pack_type",		ctypes.POINTER(ctypes.c_int)),] )

gtk_box_set_child_packing = _rpythonic_function_(		"gtk_box_set_child_packing", ctypes.c_void_p, [
	("box",		ctypes.POINTER(_GtkBox)),
	("child",		ctypes.POINTER(_GtkWidget)),
	("expand",		ctypes.c_int),
	("fill",		ctypes.c_int),
	("padding",		ctypes.c_uint),
	("pack_type",		ctypes.c_int),] )

_gtk_box_set_old_defaults = _rpythonic_function_(		"_gtk_box_set_old_defaults", ctypes.c_void_p, [
	("box",		ctypes.POINTER(_GtkBox)),] )

_gtk_box_get_spacing_set = _rpythonic_function_(		"_gtk_box_get_spacing_set", ctypes.c_int, [
	("box",		ctypes.POINTER(_GtkBox)),] )

_gtk_box_set_spacing_set = _rpythonic_function_(		"_gtk_box_set_spacing_set", ctypes.c_void_p, [
	("box",		ctypes.POINTER(_GtkBox)),
	("spacing_set",		ctypes.c_int),] )

_gtk_box_get_children = _rpythonic_function_(		"_gtk_box_get_children", ctypes.POINTER(_GList), [
	("box",		ctypes.POINTER(_GtkBox)),] )

application_selected = _rpythonic_function_(		"application_selected", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_GtkAppChooserWidget)),
	("app_info",		ctypes.POINTER(_GAppInfo)),] )

application_activated = _rpythonic_function_(		"application_activated", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_GtkAppChooserWidget)),
	("app_info",		ctypes.POINTER(_GAppInfo)),] )

gtk_app_chooser_widget_get_type = _rpythonic_function_(		"gtk_app_chooser_widget_get_type", ctypes.c_uint, [] )

gtk_app_chooser_widget_new = _rpythonic_function_(		"gtk_app_chooser_widget_new", ctypes.POINTER(_GtkWidget), [
	("content_type",		ctypes.POINTER(ctypes.c_char)),] )

gtk_app_chooser_widget_set_show_default = _rpythonic_function_(		"gtk_app_chooser_widget_set_show_default", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_GtkAppChooserWidget)),
	("setting",		ctypes.c_int),] )

gtk_app_chooser_widget_get_show_default = _rpythonic_function_(		"gtk_app_chooser_widget_get_show_default", ctypes.c_int, [
	("C_self",		ctypes.POINTER(_GtkAppChooserWidget)),] )

gtk_app_chooser_widget_set_show_recommended = _rpythonic_function_(		"gtk_app_chooser_widget_set_show_recommended", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_GtkAppChooserWidget)),
	("setting",		ctypes.c_int),] )

gtk_app_chooser_widget_get_show_recommended = _rpythonic_function_(		"gtk_app_chooser_widget_get_show_recommended", ctypes.c_int, [
	("C_self",		ctypes.POINTER(_GtkAppChooserWidget)),] )

gtk_app_chooser_widget_set_show_fallback = _rpythonic_function_(		"gtk_app_chooser_widget_set_show_fallback", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_GtkAppChooserWidget)),
	("setting",		ctypes.c_int),] )

gtk_app_chooser_widget_get_show_fallback = _rpythonic_function_(		"gtk_app_chooser_widget_get_show_fallback", ctypes.c_int, [
	("C_self",		ctypes.POINTER(_GtkAppChooserWidget)),] )

gtk_app_chooser_widget_set_show_other = _rpythonic_function_(		"gtk_app_chooser_widget_set_show_other", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_GtkAppChooserWidget)),
	("setting",		ctypes.c_int),] )

gtk_app_chooser_widget_get_show_other = _rpythonic_function_(		"gtk_app_chooser_widget_get_show_other", ctypes.c_int, [
	("C_self",		ctypes.POINTER(_GtkAppChooserWidget)),] )

gtk_app_chooser_widget_set_show_all = _rpythonic_function_(		"gtk_app_chooser_widget_set_show_all", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_GtkAppChooserWidget)),
	("setting",		ctypes.c_int),] )

gtk_app_chooser_widget_get_show_all = _rpythonic_function_(		"gtk_app_chooser_widget_get_show_all", ctypes.c_int, [
	("C_self",		ctypes.POINTER(_GtkAppChooserWidget)),] )

gtk_app_chooser_widget_set_default_text = _rpythonic_function_(		"gtk_app_chooser_widget_set_default_text", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_GtkAppChooserWidget)),
	("text",		ctypes.POINTER(ctypes.c_char)),] )

gtk_app_chooser_widget_get_default_text = _rpythonic_function_(		"gtk_app_chooser_widget_get_default_text", ctypes.POINTER(ctypes.c_char), [
	("C_self",		ctypes.POINTER(_GtkAppChooserWidget)),] )

GtkTreeModelForeachFunc = _rpythonic_function_(		"GtkTreeModelForeachFunc", ctypes.c_int, [
	("model",		ctypes.POINTER(_GtkTreeModel)),
	("path",		ctypes.POINTER(_GtkTreePath)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

row_changed = _rpythonic_function_(		"row_changed", ctypes.c_void_p, [
	("tree_model",		ctypes.POINTER(_GtkTreeModel)),
	("path",		ctypes.POINTER(_GtkTreePath)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),] )

row_has_child_toggled = _rpythonic_function_(		"row_has_child_toggled", ctypes.c_void_p, [
	("tree_model",		ctypes.POINTER(_GtkTreeModel)),
	("path",		ctypes.POINTER(_GtkTreePath)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),] )

rows_reordered = _rpythonic_function_(		"rows_reordered", ctypes.c_void_p, [
	("tree_model",		ctypes.POINTER(_GtkTreeModel)),
	("path",		ctypes.POINTER(_GtkTreePath)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("new_order",		ctypes.POINTER(ctypes.c_int)),] )

get_flags = _rpythonic_function_(		"get_flags", ctypes.c_int, [
	("tree_model",		ctypes.POINTER(_GtkTreeModel)),] )

get_column_type = _rpythonic_function_(		"get_column_type", ctypes.c_uint, [
	("tree_model",		ctypes.POINTER(_GtkTreeModel)),
	("index_",		ctypes.c_int),] )

get_iter = _rpythonic_function_(		"get_iter", ctypes.c_int, [
	("tree_model",		ctypes.POINTER(_GtkTreeModel)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("path",		ctypes.POINTER(_GtkTreePath)),] )

iter_next = _rpythonic_function_(		"iter_next", ctypes.c_int, [
	("tree_model",		ctypes.POINTER(_GtkTreeModel)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),] )

iter_previous = _rpythonic_function_(		"iter_previous", ctypes.c_int, [
	("tree_model",		ctypes.POINTER(_GtkTreeModel)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),] )

iter_children = _rpythonic_function_(		"iter_children", ctypes.c_int, [
	("tree_model",		ctypes.POINTER(_GtkTreeModel)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("parent",		ctypes.POINTER(_GtkTreeIter)),] )

iter_has_child = _rpythonic_function_(		"iter_has_child", ctypes.c_int, [
	("tree_model",		ctypes.POINTER(_GtkTreeModel)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),] )

iter_n_children = _rpythonic_function_(		"iter_n_children", ctypes.c_int, [
	("tree_model",		ctypes.POINTER(_GtkTreeModel)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),] )

iter_nth_child = _rpythonic_function_(		"iter_nth_child", ctypes.c_int, [
	("tree_model",		ctypes.POINTER(_GtkTreeModel)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("parent",		ctypes.POINTER(_GtkTreeIter)),
	("n",		ctypes.c_int),] )

iter_parent = _rpythonic_function_(		"iter_parent", ctypes.c_int, [
	("tree_model",		ctypes.POINTER(_GtkTreeModel)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("child",		ctypes.POINTER(_GtkTreeIter)),] )

ref_node = _rpythonic_function_(		"ref_node", ctypes.c_void_p, [
	("tree_model",		ctypes.POINTER(_GtkTreeModel)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),] )

unref_node = _rpythonic_function_(		"unref_node", ctypes.c_void_p, [
	("tree_model",		ctypes.POINTER(_GtkTreeModel)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_tree_path_new_from_string = _rpythonic_function_(		"gtk_tree_path_new_from_string", ctypes.POINTER(_GtkTreePath), [
	("path",		ctypes.POINTER(ctypes.c_char)),] )

gtk_tree_path_new = _rpythonic_function_(		"gtk_tree_path_new", ctypes.POINTER(_GtkTreePath), [] )

gtk_tree_path_to_string = _rpythonic_function_(		"gtk_tree_path_to_string", ctypes.POINTER(ctypes.c_char), [
	("path",		ctypes.POINTER(_GtkTreePath)),] )

gtk_tree_path_new_first = _rpythonic_function_(		"gtk_tree_path_new_first", ctypes.POINTER(_GtkTreePath), [] )

gtk_tree_path_append_index = _rpythonic_function_(		"gtk_tree_path_append_index", ctypes.c_void_p, [
	("path",		ctypes.POINTER(_GtkTreePath)),
	("index_",		ctypes.c_int),] )

gtk_tree_path_prepend_index = _rpythonic_function_(		"gtk_tree_path_prepend_index", ctypes.c_void_p, [
	("path",		ctypes.POINTER(_GtkTreePath)),
	("index_",		ctypes.c_int),] )

gtk_tree_path_get_depth = _rpythonic_function_(		"gtk_tree_path_get_depth", ctypes.c_int, [
	("path",		ctypes.POINTER(_GtkTreePath)),] )

gtk_tree_path_get_indices = _rpythonic_function_(		"gtk_tree_path_get_indices", ctypes.POINTER(ctypes.c_int), [
	("path",		ctypes.POINTER(_GtkTreePath)),] )

gtk_tree_path_get_indices_with_depth = _rpythonic_function_(		"gtk_tree_path_get_indices_with_depth", ctypes.POINTER(ctypes.c_int), [
	("path",		ctypes.POINTER(_GtkTreePath)),
	("depth",		ctypes.POINTER(ctypes.c_int)),] )

gtk_tree_path_free = _rpythonic_function_(		"gtk_tree_path_free", ctypes.c_void_p, [
	("path",		ctypes.POINTER(_GtkTreePath)),] )

gtk_tree_path_copy = _rpythonic_function_(		"gtk_tree_path_copy", ctypes.POINTER(_GtkTreePath), [
	("path",		ctypes.POINTER(_GtkTreePath)),] )

gtk_tree_path_get_type = _rpythonic_function_(		"gtk_tree_path_get_type", ctypes.c_uint, [] )

gtk_tree_path_compare = _rpythonic_function_(		"gtk_tree_path_compare", ctypes.c_int, [
	("a",		ctypes.POINTER(_GtkTreePath)),
	("b",		ctypes.POINTER(_GtkTreePath)),] )

gtk_tree_path_next = _rpythonic_function_(		"gtk_tree_path_next", ctypes.c_void_p, [
	("path",		ctypes.POINTER(_GtkTreePath)),] )

gtk_tree_path_prev = _rpythonic_function_(		"gtk_tree_path_prev", ctypes.c_int, [
	("path",		ctypes.POINTER(_GtkTreePath)),] )

gtk_tree_path_up = _rpythonic_function_(		"gtk_tree_path_up", ctypes.c_int, [
	("path",		ctypes.POINTER(_GtkTreePath)),] )

gtk_tree_path_down = _rpythonic_function_(		"gtk_tree_path_down", ctypes.c_void_p, [
	("path",		ctypes.POINTER(_GtkTreePath)),] )

gtk_tree_path_is_ancestor = _rpythonic_function_(		"gtk_tree_path_is_ancestor", ctypes.c_int, [
	("path",		ctypes.POINTER(_GtkTreePath)),
	("descendant",		ctypes.POINTER(_GtkTreePath)),] )

gtk_tree_path_is_descendant = _rpythonic_function_(		"gtk_tree_path_is_descendant", ctypes.c_int, [
	("path",		ctypes.POINTER(_GtkTreePath)),
	("ancestor",		ctypes.POINTER(_GtkTreePath)),] )

gtk_tree_row_reference_get_type = _rpythonic_function_(		"gtk_tree_row_reference_get_type", ctypes.c_uint, [] )

gtk_tree_row_reference_new = _rpythonic_function_(		"gtk_tree_row_reference_new", ctypes.POINTER(_GtkTreeRowReference), [
	("model",		ctypes.POINTER(_GtkTreeModel)),
	("path",		ctypes.POINTER(_GtkTreePath)),] )

gtk_tree_row_reference_new_proxy = _rpythonic_function_(		"gtk_tree_row_reference_new_proxy", ctypes.POINTER(_GtkTreeRowReference), [
	("proxy",		ctypes.POINTER(_GObject)),
	("model",		ctypes.POINTER(_GtkTreeModel)),
	("path",		ctypes.POINTER(_GtkTreePath)),] )

gtk_tree_row_reference_get_path = _rpythonic_function_(		"gtk_tree_row_reference_get_path", ctypes.POINTER(_GtkTreePath), [
	("reference",		ctypes.POINTER(_GtkTreeRowReference)),] )

gtk_tree_row_reference_get_model = _rpythonic_function_(		"gtk_tree_row_reference_get_model", ctypes.POINTER(_GtkTreeModel), [
	("reference",		ctypes.POINTER(_GtkTreeRowReference)),] )

gtk_tree_row_reference_valid = _rpythonic_function_(		"gtk_tree_row_reference_valid", ctypes.c_int, [
	("reference",		ctypes.POINTER(_GtkTreeRowReference)),] )

gtk_tree_row_reference_copy = _rpythonic_function_(		"gtk_tree_row_reference_copy", ctypes.POINTER(_GtkTreeRowReference), [
	("reference",		ctypes.POINTER(_GtkTreeRowReference)),] )

gtk_tree_row_reference_free = _rpythonic_function_(		"gtk_tree_row_reference_free", ctypes.c_void_p, [
	("reference",		ctypes.POINTER(_GtkTreeRowReference)),] )

gtk_tree_row_reference_inserted = _rpythonic_function_(		"gtk_tree_row_reference_inserted", ctypes.c_void_p, [
	("proxy",		ctypes.POINTER(_GObject)),
	("path",		ctypes.POINTER(_GtkTreePath)),] )

gtk_tree_row_reference_deleted = _rpythonic_function_(		"gtk_tree_row_reference_deleted", ctypes.c_void_p, [
	("proxy",		ctypes.POINTER(_GObject)),
	("path",		ctypes.POINTER(_GtkTreePath)),] )

gtk_tree_row_reference_reordered = _rpythonic_function_(		"gtk_tree_row_reference_reordered", ctypes.c_void_p, [
	("proxy",		ctypes.POINTER(_GObject)),
	("path",		ctypes.POINTER(_GtkTreePath)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("new_order",		ctypes.POINTER(ctypes.c_int)),] )

gtk_tree_iter_copy = _rpythonic_function_(		"gtk_tree_iter_copy", ctypes.POINTER(_GtkTreeIter), [
	("iter",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_tree_iter_free = _rpythonic_function_(		"gtk_tree_iter_free", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_tree_iter_get_type = _rpythonic_function_(		"gtk_tree_iter_get_type", ctypes.c_uint, [] )

gtk_tree_model_get_type = _rpythonic_function_(		"gtk_tree_model_get_type", ctypes.c_uint, [] )

gtk_tree_model_get_flags = _rpythonic_function_(		"gtk_tree_model_get_flags", ctypes.c_int, [
	("tree_model",		ctypes.POINTER(_GtkTreeModel)),] )

gtk_tree_model_get_n_columns = _rpythonic_function_(		"gtk_tree_model_get_n_columns", ctypes.c_int, [
	("tree_model",		ctypes.POINTER(_GtkTreeModel)),] )

gtk_tree_model_get_column_type = _rpythonic_function_(		"gtk_tree_model_get_column_type", ctypes.c_uint, [
	("tree_model",		ctypes.POINTER(_GtkTreeModel)),
	("index_",		ctypes.c_int),] )

gtk_tree_model_get_iter = _rpythonic_function_(		"gtk_tree_model_get_iter", ctypes.c_int, [
	("tree_model",		ctypes.POINTER(_GtkTreeModel)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("path",		ctypes.POINTER(_GtkTreePath)),] )

gtk_tree_model_get_iter_from_string = _rpythonic_function_(		"gtk_tree_model_get_iter_from_string", ctypes.c_int, [
	("tree_model",		ctypes.POINTER(_GtkTreeModel)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("path_string",		ctypes.POINTER(ctypes.c_char)),] )

gtk_tree_model_get_string_from_iter = _rpythonic_function_(		"gtk_tree_model_get_string_from_iter", ctypes.POINTER(ctypes.c_char), [
	("tree_model",		ctypes.POINTER(_GtkTreeModel)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_tree_model_get_iter_first = _rpythonic_function_(		"gtk_tree_model_get_iter_first", ctypes.c_int, [
	("tree_model",		ctypes.POINTER(_GtkTreeModel)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_tree_model_get_path = _rpythonic_function_(		"gtk_tree_model_get_path", ctypes.POINTER(_GtkTreePath), [
	("tree_model",		ctypes.POINTER(_GtkTreeModel)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_tree_model_get_value = _rpythonic_function_(		"gtk_tree_model_get_value", ctypes.c_void_p, [
	("tree_model",		ctypes.POINTER(_GtkTreeModel)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("column",		ctypes.c_int),
	("value",		ctypes.POINTER(_GValue)),] )

gtk_tree_model_iter_previous = _rpythonic_function_(		"gtk_tree_model_iter_previous", ctypes.c_int, [
	("tree_model",		ctypes.POINTER(_GtkTreeModel)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_tree_model_iter_next = _rpythonic_function_(		"gtk_tree_model_iter_next", ctypes.c_int, [
	("tree_model",		ctypes.POINTER(_GtkTreeModel)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_tree_model_iter_children = _rpythonic_function_(		"gtk_tree_model_iter_children", ctypes.c_int, [
	("tree_model",		ctypes.POINTER(_GtkTreeModel)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("parent",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_tree_model_iter_has_child = _rpythonic_function_(		"gtk_tree_model_iter_has_child", ctypes.c_int, [
	("tree_model",		ctypes.POINTER(_GtkTreeModel)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_tree_model_iter_n_children = _rpythonic_function_(		"gtk_tree_model_iter_n_children", ctypes.c_int, [
	("tree_model",		ctypes.POINTER(_GtkTreeModel)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_tree_model_iter_nth_child = _rpythonic_function_(		"gtk_tree_model_iter_nth_child", ctypes.c_int, [
	("tree_model",		ctypes.POINTER(_GtkTreeModel)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("parent",		ctypes.POINTER(_GtkTreeIter)),
	("n",		ctypes.c_int),] )

gtk_tree_model_iter_parent = _rpythonic_function_(		"gtk_tree_model_iter_parent", ctypes.c_int, [
	("tree_model",		ctypes.POINTER(_GtkTreeModel)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("child",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_tree_model_ref_node = _rpythonic_function_(		"gtk_tree_model_ref_node", ctypes.c_void_p, [
	("tree_model",		ctypes.POINTER(_GtkTreeModel)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_tree_model_unref_node = _rpythonic_function_(		"gtk_tree_model_unref_node", ctypes.c_void_p, [
	("tree_model",		ctypes.POINTER(_GtkTreeModel)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_tree_model_get_valist = _rpythonic_function_(		"gtk_tree_model_get_valist", ctypes.c_void_p, [
	("tree_model",		ctypes.POINTER(_GtkTreeModel)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("var_args",		ctypes.c_char),] )

gtk_tree_model_foreach = _rpythonic_function_(		"gtk_tree_model_foreach", ctypes.c_void_p, [
	("model",		ctypes.POINTER(_GtkTreeModel)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GtkTreeModel),ctypes.POINTER(_GtkTreePath),ctypes.POINTER(_GtkTreeIter),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gtk_tree_model_row_changed = _rpythonic_function_(		"gtk_tree_model_row_changed", ctypes.c_void_p, [
	("tree_model",		ctypes.POINTER(_GtkTreeModel)),
	("path",		ctypes.POINTER(_GtkTreePath)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_tree_model_row_inserted = _rpythonic_function_(		"gtk_tree_model_row_inserted", ctypes.c_void_p, [
	("tree_model",		ctypes.POINTER(_GtkTreeModel)),
	("path",		ctypes.POINTER(_GtkTreePath)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_tree_model_row_has_child_toggled = _rpythonic_function_(		"gtk_tree_model_row_has_child_toggled", ctypes.c_void_p, [
	("tree_model",		ctypes.POINTER(_GtkTreeModel)),
	("path",		ctypes.POINTER(_GtkTreePath)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_tree_model_row_deleted = _rpythonic_function_(		"gtk_tree_model_row_deleted", ctypes.c_void_p, [
	("tree_model",		ctypes.POINTER(_GtkTreeModel)),
	("path",		ctypes.POINTER(_GtkTreePath)),] )

gtk_tree_model_rows_reordered = _rpythonic_function_(		"gtk_tree_model_rows_reordered", ctypes.c_void_p, [
	("tree_model",		ctypes.POINTER(_GtkTreeModel)),
	("path",		ctypes.POINTER(_GtkTreePath)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("new_order",		ctypes.POINTER(ctypes.c_int)),] )

editing_done = _rpythonic_function_(		"editing_done", ctypes.c_void_p, [
	("cell_editable",		ctypes.POINTER(_GtkCellEditable)),] )

remove_widget = _rpythonic_function_(		"remove_widget", ctypes.c_void_p, [
	("cell_editable",		ctypes.POINTER(_GtkCellEditable)),] )

start_editing = _rpythonic_function_(		"start_editing", ctypes.c_void_p, [
	("cell_editable",		ctypes.POINTER(_GtkCellEditable)),
	("event",		ctypes.POINTER(_GdkEvent)),] )

gtk_cell_editable_get_type = _rpythonic_function_(		"gtk_cell_editable_get_type", ctypes.c_uint, [] )

gtk_cell_editable_start_editing = _rpythonic_function_(		"gtk_cell_editable_start_editing", ctypes.c_void_p, [
	("cell_editable",		ctypes.POINTER(_GtkCellEditable)),
	("event",		ctypes.POINTER(_GdkEvent)),] )

gtk_cell_editable_editing_done = _rpythonic_function_(		"gtk_cell_editable_editing_done", ctypes.c_void_p, [
	("cell_editable",		ctypes.POINTER(_GtkCellEditable)),] )

gtk_cell_editable_remove_widget = _rpythonic_function_(		"gtk_cell_editable_remove_widget", ctypes.c_void_p, [
	("cell_editable",		ctypes.POINTER(_GtkCellEditable)),] )

get_aligned_area = _rpythonic_function_(		"get_aligned_area", ctypes.c_void_p, [
	("cell",		ctypes.POINTER(_GtkCellRenderer)),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("flags",		ctypes.c_int),
	("cell_area",		ctypes.POINTER(_cairo_rectangle_int)),
	("aligned_area",		ctypes.POINTER(_cairo_rectangle_int)),] )

render = _rpythonic_function_(		"render", ctypes.c_void_p, [
	("cell",		ctypes.POINTER(_GtkCellRenderer)),
	("cr",		ctypes.POINTER(_cairo)),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("background_area",		ctypes.POINTER(_cairo_rectangle_int)),
	("cell_area",		ctypes.POINTER(_cairo_rectangle_int)),
	("flags",		ctypes.c_int),] )

editing_canceled = _rpythonic_function_(		"editing_canceled", ctypes.c_void_p, [
	("cell",		ctypes.POINTER(_GtkCellRenderer)),] )

editing_started = _rpythonic_function_(		"editing_started", ctypes.c_void_p, [
	("cell",		ctypes.POINTER(_GtkCellRenderer)),
	("editable",		ctypes.POINTER(_GtkCellEditable)),
	("path",		ctypes.POINTER(ctypes.c_char)),] )

gtk_cell_renderer_get_request_mode = _rpythonic_function_(		"gtk_cell_renderer_get_request_mode", ctypes.c_int, [
	("cell",		ctypes.POINTER(_GtkCellRenderer)),] )

gtk_cell_renderer_get_type = _rpythonic_function_(		"gtk_cell_renderer_get_type", ctypes.c_uint, [] )

gtk_cell_renderer_get_preferred_width = _rpythonic_function_(		"gtk_cell_renderer_get_preferred_width", ctypes.c_void_p, [
	("cell",		ctypes.POINTER(_GtkCellRenderer)),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("minimum_size",		ctypes.POINTER(ctypes.c_int)),
	("natural_size",		ctypes.POINTER(ctypes.c_int)),] )

gtk_cell_renderer_get_preferred_height_for_width = _rpythonic_function_(		"gtk_cell_renderer_get_preferred_height_for_width", ctypes.c_void_p, [
	("cell",		ctypes.POINTER(_GtkCellRenderer)),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("width",		ctypes.c_int),
	("minimum_height",		ctypes.POINTER(ctypes.c_int)),
	("natural_height",		ctypes.POINTER(ctypes.c_int)),] )

gtk_cell_renderer_get_preferred_height = _rpythonic_function_(		"gtk_cell_renderer_get_preferred_height", ctypes.c_void_p, [
	("cell",		ctypes.POINTER(_GtkCellRenderer)),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("minimum_size",		ctypes.POINTER(ctypes.c_int)),
	("natural_size",		ctypes.POINTER(ctypes.c_int)),] )

gtk_cell_renderer_get_preferred_width_for_height = _rpythonic_function_(		"gtk_cell_renderer_get_preferred_width_for_height", ctypes.c_void_p, [
	("cell",		ctypes.POINTER(_GtkCellRenderer)),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("height",		ctypes.c_int),
	("minimum_width",		ctypes.POINTER(ctypes.c_int)),
	("natural_width",		ctypes.POINTER(ctypes.c_int)),] )

gtk_cell_renderer_get_preferred_size = _rpythonic_function_(		"gtk_cell_renderer_get_preferred_size", ctypes.c_void_p, [
	("cell",		ctypes.POINTER(_GtkCellRenderer)),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("minimum_size",		ctypes.POINTER(_GtkRequisition)),
	("natural_size",		ctypes.POINTER(_GtkRequisition)),] )

gtk_cell_renderer_get_aligned_area = _rpythonic_function_(		"gtk_cell_renderer_get_aligned_area", ctypes.c_void_p, [
	("cell",		ctypes.POINTER(_GtkCellRenderer)),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("flags",		ctypes.c_int),
	("cell_area",		ctypes.POINTER(_cairo_rectangle_int)),
	("aligned_area",		ctypes.POINTER(_cairo_rectangle_int)),] )

gtk_cell_renderer_get_size = _rpythonic_function_(		"gtk_cell_renderer_get_size", ctypes.c_void_p, [
	("cell",		ctypes.POINTER(_GtkCellRenderer)),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("cell_area",		ctypes.POINTER(_cairo_rectangle_int)),
	("x_offset",		ctypes.POINTER(ctypes.c_int)),
	("y_offset",		ctypes.POINTER(ctypes.c_int)),
	("width",		ctypes.POINTER(ctypes.c_int)),
	("height",		ctypes.POINTER(ctypes.c_int)),] )

gtk_cell_renderer_render = _rpythonic_function_(		"gtk_cell_renderer_render", ctypes.c_void_p, [
	("cell",		ctypes.POINTER(_GtkCellRenderer)),
	("cr",		ctypes.POINTER(_cairo)),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("background_area",		ctypes.POINTER(_cairo_rectangle_int)),
	("cell_area",		ctypes.POINTER(_cairo_rectangle_int)),
	("flags",		ctypes.c_int),] )

gtk_cell_renderer_activate = _rpythonic_function_(		"gtk_cell_renderer_activate", ctypes.c_int, [
	("cell",		ctypes.POINTER(_GtkCellRenderer)),
	("event",		ctypes.POINTER(_GdkEvent)),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("path",		ctypes.POINTER(ctypes.c_char)),
	("background_area",		ctypes.POINTER(_cairo_rectangle_int)),
	("cell_area",		ctypes.POINTER(_cairo_rectangle_int)),
	("flags",		ctypes.c_int),] )

gtk_cell_renderer_start_editing = _rpythonic_function_(		"gtk_cell_renderer_start_editing", ctypes.POINTER(_GtkCellEditable), [
	("cell",		ctypes.POINTER(_GtkCellRenderer)),
	("event",		ctypes.POINTER(_GdkEvent)),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("path",		ctypes.POINTER(ctypes.c_char)),
	("background_area",		ctypes.POINTER(_cairo_rectangle_int)),
	("cell_area",		ctypes.POINTER(_cairo_rectangle_int)),
	("flags",		ctypes.c_int),] )

gtk_cell_renderer_set_fixed_size = _rpythonic_function_(		"gtk_cell_renderer_set_fixed_size", ctypes.c_void_p, [
	("cell",		ctypes.POINTER(_GtkCellRenderer)),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

gtk_cell_renderer_get_fixed_size = _rpythonic_function_(		"gtk_cell_renderer_get_fixed_size", ctypes.c_void_p, [
	("cell",		ctypes.POINTER(_GtkCellRenderer)),
	("width",		ctypes.POINTER(ctypes.c_int)),
	("height",		ctypes.POINTER(ctypes.c_int)),] )

gtk_cell_renderer_set_alignment = _rpythonic_function_(		"gtk_cell_renderer_set_alignment", ctypes.c_void_p, [
	("cell",		ctypes.POINTER(_GtkCellRenderer)),
	("xalign",		ctypes.c_float),
	("yalign",		ctypes.c_float),] )

gtk_cell_renderer_get_alignment = _rpythonic_function_(		"gtk_cell_renderer_get_alignment", ctypes.c_void_p, [
	("cell",		ctypes.POINTER(_GtkCellRenderer)),
	("xalign",		ctypes.POINTER(ctypes.c_float)),
	("yalign",		ctypes.POINTER(ctypes.c_float)),] )

gtk_cell_renderer_set_padding = _rpythonic_function_(		"gtk_cell_renderer_set_padding", ctypes.c_void_p, [
	("cell",		ctypes.POINTER(_GtkCellRenderer)),
	("xpad",		ctypes.c_int),
	("ypad",		ctypes.c_int),] )

gtk_cell_renderer_get_padding = _rpythonic_function_(		"gtk_cell_renderer_get_padding", ctypes.c_void_p, [
	("cell",		ctypes.POINTER(_GtkCellRenderer)),
	("xpad",		ctypes.POINTER(ctypes.c_int)),
	("ypad",		ctypes.POINTER(ctypes.c_int)),] )

gtk_cell_renderer_set_visible = _rpythonic_function_(		"gtk_cell_renderer_set_visible", ctypes.c_void_p, [
	("cell",		ctypes.POINTER(_GtkCellRenderer)),
	("visible",		ctypes.c_int),] )

gtk_cell_renderer_get_visible = _rpythonic_function_(		"gtk_cell_renderer_get_visible", ctypes.c_int, [
	("cell",		ctypes.POINTER(_GtkCellRenderer)),] )

gtk_cell_renderer_set_sensitive = _rpythonic_function_(		"gtk_cell_renderer_set_sensitive", ctypes.c_void_p, [
	("cell",		ctypes.POINTER(_GtkCellRenderer)),
	("sensitive",		ctypes.c_int),] )

gtk_cell_renderer_get_sensitive = _rpythonic_function_(		"gtk_cell_renderer_get_sensitive", ctypes.c_int, [
	("cell",		ctypes.POINTER(_GtkCellRenderer)),] )

gtk_cell_renderer_is_activatable = _rpythonic_function_(		"gtk_cell_renderer_is_activatable", ctypes.c_int, [
	("cell",		ctypes.POINTER(_GtkCellRenderer)),] )

gtk_cell_renderer_stop_editing = _rpythonic_function_(		"gtk_cell_renderer_stop_editing", ctypes.c_void_p, [
	("cell",		ctypes.POINTER(_GtkCellRenderer)),
	("canceled",		ctypes.c_int),] )

_gtk_cell_renderer_calc_offset = _rpythonic_function_(		"_gtk_cell_renderer_calc_offset", ctypes.c_void_p, [
	("cell",		ctypes.POINTER(_GtkCellRenderer)),
	("cell_area",		ctypes.POINTER(_cairo_rectangle_int)),
	("direction",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("x_offset",		ctypes.POINTER(ctypes.c_int)),
	("y_offset",		ctypes.POINTER(ctypes.c_int)),] )

gtk_cell_renderer_get_state = _rpythonic_function_(		"gtk_cell_renderer_get_state", ctypes.c_int, [
	("cell",		ctypes.POINTER(_GtkCellRenderer)),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("cell_state",		ctypes.c_int),] )

GtkTreeIterCompareFunc = _rpythonic_function_(		"GtkTreeIterCompareFunc", ctypes.c_int, [
	("model",		ctypes.POINTER(_GtkTreeModel)),
	("a",		ctypes.POINTER(_GtkTreeIter)),
	("b",		ctypes.POINTER(_GtkTreeIter)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

sort_column_changed = _rpythonic_function_(		"sort_column_changed", ctypes.c_void_p, [
	("sortable",		ctypes.POINTER(_GtkTreeSortable)),] )

get_sort_column_id = _rpythonic_function_(		"get_sort_column_id", ctypes.c_int, [
	("sortable",		ctypes.POINTER(_GtkTreeSortable)),
	("sort_column_id",		ctypes.POINTER(ctypes.c_int)),
	("order",		ctypes.POINTER(ctypes.c_int)),] )

set_sort_column_id = _rpythonic_function_(		"set_sort_column_id", ctypes.c_void_p, [
	("sortable",		ctypes.POINTER(_GtkTreeSortable)),
	("sort_column_id",		ctypes.c_int),
	("order",		ctypes.c_int),] )

set_sort_func = _rpythonic_function_(		"set_sort_func", ctypes.c_void_p, [
	("sortable",		ctypes.POINTER(_GtkTreeSortable)),
	("sort_column_id",		ctypes.c_int),
	("sort_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GtkTreeModel),ctypes.POINTER(_GtkTreeIter),ctypes.POINTER(_GtkTreeIter),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

set_default_sort_func = _rpythonic_function_(		"set_default_sort_func", ctypes.c_void_p, [
	("sortable",		ctypes.POINTER(_GtkTreeSortable)),
	("sort_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GtkTreeModel),ctypes.POINTER(_GtkTreeIter),ctypes.POINTER(_GtkTreeIter),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

has_default_sort_func = _rpythonic_function_(		"has_default_sort_func", ctypes.c_int, [
	("sortable",		ctypes.POINTER(_GtkTreeSortable)),] )

gtk_tree_sortable_get_type = _rpythonic_function_(		"gtk_tree_sortable_get_type", ctypes.c_uint, [] )

gtk_tree_sortable_sort_column_changed = _rpythonic_function_(		"gtk_tree_sortable_sort_column_changed", ctypes.c_void_p, [
	("sortable",		ctypes.POINTER(_GtkTreeSortable)),] )

gtk_tree_sortable_get_sort_column_id = _rpythonic_function_(		"gtk_tree_sortable_get_sort_column_id", ctypes.c_int, [
	("sortable",		ctypes.POINTER(_GtkTreeSortable)),
	("sort_column_id",		ctypes.POINTER(ctypes.c_int)),
	("order",		ctypes.POINTER(ctypes.c_int)),] )

gtk_tree_sortable_set_sort_column_id = _rpythonic_function_(		"gtk_tree_sortable_set_sort_column_id", ctypes.c_void_p, [
	("sortable",		ctypes.POINTER(_GtkTreeSortable)),
	("sort_column_id",		ctypes.c_int),
	("order",		ctypes.c_int),] )

gtk_tree_sortable_set_sort_func = _rpythonic_function_(		"gtk_tree_sortable_set_sort_func", ctypes.c_void_p, [
	("sortable",		ctypes.POINTER(_GtkTreeSortable)),
	("sort_column_id",		ctypes.c_int),
	("sort_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GtkTreeModel),ctypes.POINTER(_GtkTreeIter),ctypes.POINTER(_GtkTreeIter),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

gtk_tree_sortable_set_default_sort_func = _rpythonic_function_(		"gtk_tree_sortable_set_default_sort_func", ctypes.c_void_p, [
	("sortable",		ctypes.POINTER(_GtkTreeSortable)),
	("sort_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GtkTreeModel),ctypes.POINTER(_GtkTreeIter),ctypes.POINTER(_GtkTreeIter),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

gtk_tree_sortable_has_default_sort_func = _rpythonic_function_(		"gtk_tree_sortable_has_default_sort_func", ctypes.c_int, [
	("sortable",		ctypes.POINTER(_GtkTreeSortable)),] )

GtkCellCallback = _rpythonic_function_(		"GtkCellCallback", ctypes.c_int, [
	("renderer",		ctypes.POINTER(_GtkCellRenderer)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

GtkCellAllocCallback = _rpythonic_function_(		"GtkCellAllocCallback", ctypes.c_int, [
	("renderer",		ctypes.POINTER(_GtkCellRenderer)),
	("cell_area",		ctypes.POINTER(_cairo_rectangle_int)),
	("cell_background",		ctypes.POINTER(_cairo_rectangle_int)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

foreach = _rpythonic_function_(		"foreach", ctypes.c_void_p, [
	("area",		ctypes.POINTER(_GtkCellArea)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GtkCellRenderer),ctypes.POINTER(ctypes.c_void_p),)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

foreach_alloc = _rpythonic_function_(		"foreach_alloc", ctypes.c_void_p, [
	("area",		ctypes.POINTER(_GtkCellArea)),
	("context",		ctypes.POINTER(_GtkCellAreaContext)),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("cell_area",		ctypes.POINTER(_cairo_rectangle_int)),
	("background_area",		ctypes.POINTER(_cairo_rectangle_int)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GtkCellRenderer),ctypes.POINTER(_cairo_rectangle_int),ctypes.POINTER(_cairo_rectangle_int),ctypes.POINTER(ctypes.c_void_p),)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

apply_attributes = _rpythonic_function_(		"apply_attributes", ctypes.c_void_p, [
	("area",		ctypes.POINTER(_GtkCellArea)),
	("tree_model",		ctypes.POINTER(_GtkTreeModel)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("is_expander",		ctypes.c_int),
	("is_expanded",		ctypes.c_int),] )

create_context = _rpythonic_function_(		"create_context", ctypes.POINTER(_GtkCellAreaContext), [
	("area",		ctypes.POINTER(_GtkCellArea)),] )

copy_context = _rpythonic_function_(		"copy_context", ctypes.POINTER(_GtkCellAreaContext), [
	("area",		ctypes.POINTER(_GtkCellArea)),
	("context",		ctypes.POINTER(_GtkCellAreaContext)),] )

set_cell_property = _rpythonic_function_(		"set_cell_property", ctypes.c_void_p, [
	("area",		ctypes.POINTER(_GtkCellArea)),
	("renderer",		ctypes.POINTER(_GtkCellRenderer)),
	("property_id",		ctypes.c_uint),
	("value",		ctypes.POINTER(_GValue)),
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

get_cell_property = _rpythonic_function_(		"get_cell_property", ctypes.c_void_p, [
	("area",		ctypes.POINTER(_GtkCellArea)),
	("renderer",		ctypes.POINTER(_GtkCellRenderer)),
	("property_id",		ctypes.c_uint),
	("value",		ctypes.POINTER(_GValue)),
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

is_activatable = _rpythonic_function_(		"is_activatable", ctypes.c_int, [
	("area",		ctypes.POINTER(_GtkCellArea)),] )

gtk_cell_area_add = _rpythonic_function_(		"gtk_cell_area_add", ctypes.c_void_p, [
	("area",		ctypes.POINTER(_GtkCellArea)),
	("renderer",		ctypes.POINTER(_GtkCellRenderer)),] )

gtk_cell_area_remove = _rpythonic_function_(		"gtk_cell_area_remove", ctypes.c_void_p, [
	("area",		ctypes.POINTER(_GtkCellArea)),
	("renderer",		ctypes.POINTER(_GtkCellRenderer)),] )

gtk_cell_area_has_renderer = _rpythonic_function_(		"gtk_cell_area_has_renderer", ctypes.c_int, [
	("area",		ctypes.POINTER(_GtkCellArea)),
	("renderer",		ctypes.POINTER(_GtkCellRenderer)),] )

gtk_cell_area_get_type = _rpythonic_function_(		"gtk_cell_area_get_type", ctypes.c_uint, [] )

gtk_cell_area_foreach = _rpythonic_function_(		"gtk_cell_area_foreach", ctypes.c_void_p, [
	("area",		ctypes.POINTER(_GtkCellArea)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GtkCellRenderer),ctypes.POINTER(ctypes.c_void_p),)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gtk_cell_area_foreach_alloc = _rpythonic_function_(		"gtk_cell_area_foreach_alloc", ctypes.c_void_p, [
	("area",		ctypes.POINTER(_GtkCellArea)),
	("context",		ctypes.POINTER(_GtkCellAreaContext)),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("cell_area",		ctypes.POINTER(_cairo_rectangle_int)),
	("background_area",		ctypes.POINTER(_cairo_rectangle_int)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GtkCellRenderer),ctypes.POINTER(_cairo_rectangle_int),ctypes.POINTER(_cairo_rectangle_int),ctypes.POINTER(ctypes.c_void_p),)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gtk_cell_area_event = _rpythonic_function_(		"gtk_cell_area_event", ctypes.c_int, [
	("area",		ctypes.POINTER(_GtkCellArea)),
	("context",		ctypes.POINTER(_GtkCellAreaContext)),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("event",		ctypes.POINTER(_GdkEvent)),
	("cell_area",		ctypes.POINTER(_cairo_rectangle_int)),
	("flags",		ctypes.c_int),] )

gtk_cell_area_render = _rpythonic_function_(		"gtk_cell_area_render", ctypes.c_void_p, [
	("area",		ctypes.POINTER(_GtkCellArea)),
	("context",		ctypes.POINTER(_GtkCellAreaContext)),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("cr",		ctypes.POINTER(_cairo)),
	("background_area",		ctypes.POINTER(_cairo_rectangle_int)),
	("cell_area",		ctypes.POINTER(_cairo_rectangle_int)),
	("flags",		ctypes.c_int),
	("paint_focus",		ctypes.c_int),] )

gtk_cell_area_get_cell_allocation = _rpythonic_function_(		"gtk_cell_area_get_cell_allocation", ctypes.c_void_p, [
	("area",		ctypes.POINTER(_GtkCellArea)),
	("context",		ctypes.POINTER(_GtkCellAreaContext)),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("renderer",		ctypes.POINTER(_GtkCellRenderer)),
	("cell_area",		ctypes.POINTER(_cairo_rectangle_int)),
	("allocation",		ctypes.POINTER(_cairo_rectangle_int)),] )

gtk_cell_area_get_cell_at_position = _rpythonic_function_(		"gtk_cell_area_get_cell_at_position", ctypes.POINTER(_GtkCellRenderer), [
	("area",		ctypes.POINTER(_GtkCellArea)),
	("context",		ctypes.POINTER(_GtkCellAreaContext)),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("cell_area",		ctypes.POINTER(_cairo_rectangle_int)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("alloc_area",		ctypes.POINTER(_cairo_rectangle_int)),] )

gtk_cell_area_create_context = _rpythonic_function_(		"gtk_cell_area_create_context", ctypes.POINTER(_GtkCellAreaContext), [
	("area",		ctypes.POINTER(_GtkCellArea)),] )

gtk_cell_area_copy_context = _rpythonic_function_(		"gtk_cell_area_copy_context", ctypes.POINTER(_GtkCellAreaContext), [
	("area",		ctypes.POINTER(_GtkCellArea)),
	("context",		ctypes.POINTER(_GtkCellAreaContext)),] )

gtk_cell_area_get_request_mode = _rpythonic_function_(		"gtk_cell_area_get_request_mode", ctypes.c_int, [
	("area",		ctypes.POINTER(_GtkCellArea)),] )

gtk_cell_area_get_preferred_width = _rpythonic_function_(		"gtk_cell_area_get_preferred_width", ctypes.c_void_p, [
	("area",		ctypes.POINTER(_GtkCellArea)),
	("context",		ctypes.POINTER(_GtkCellAreaContext)),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("minimum_width",		ctypes.POINTER(ctypes.c_int)),
	("natural_width",		ctypes.POINTER(ctypes.c_int)),] )

gtk_cell_area_get_preferred_height_for_width = _rpythonic_function_(		"gtk_cell_area_get_preferred_height_for_width", ctypes.c_void_p, [
	("area",		ctypes.POINTER(_GtkCellArea)),
	("context",		ctypes.POINTER(_GtkCellAreaContext)),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("width",		ctypes.c_int),
	("minimum_height",		ctypes.POINTER(ctypes.c_int)),
	("natural_height",		ctypes.POINTER(ctypes.c_int)),] )

gtk_cell_area_get_preferred_height = _rpythonic_function_(		"gtk_cell_area_get_preferred_height", ctypes.c_void_p, [
	("area",		ctypes.POINTER(_GtkCellArea)),
	("context",		ctypes.POINTER(_GtkCellAreaContext)),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("minimum_height",		ctypes.POINTER(ctypes.c_int)),
	("natural_height",		ctypes.POINTER(ctypes.c_int)),] )

gtk_cell_area_get_preferred_width_for_height = _rpythonic_function_(		"gtk_cell_area_get_preferred_width_for_height", ctypes.c_void_p, [
	("area",		ctypes.POINTER(_GtkCellArea)),
	("context",		ctypes.POINTER(_GtkCellAreaContext)),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("height",		ctypes.c_int),
	("minimum_width",		ctypes.POINTER(ctypes.c_int)),
	("natural_width",		ctypes.POINTER(ctypes.c_int)),] )

gtk_cell_area_get_current_path_string = _rpythonic_function_(		"gtk_cell_area_get_current_path_string", ctypes.POINTER(ctypes.c_char), [
	("area",		ctypes.POINTER(_GtkCellArea)),] )

gtk_cell_area_apply_attributes = _rpythonic_function_(		"gtk_cell_area_apply_attributes", ctypes.c_void_p, [
	("area",		ctypes.POINTER(_GtkCellArea)),
	("tree_model",		ctypes.POINTER(_GtkTreeModel)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("is_expander",		ctypes.c_int),
	("is_expanded",		ctypes.c_int),] )

gtk_cell_area_attribute_connect = _rpythonic_function_(		"gtk_cell_area_attribute_connect", ctypes.c_void_p, [
	("area",		ctypes.POINTER(_GtkCellArea)),
	("renderer",		ctypes.POINTER(_GtkCellRenderer)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("column",		ctypes.c_int),] )

gtk_cell_area_attribute_disconnect = _rpythonic_function_(		"gtk_cell_area_attribute_disconnect", ctypes.c_void_p, [
	("area",		ctypes.POINTER(_GtkCellArea)),
	("renderer",		ctypes.POINTER(_GtkCellRenderer)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),] )

gtk_cell_area_class_install_cell_property = _rpythonic_function_(		"gtk_cell_area_class_install_cell_property", ctypes.c_void_p, [
	("aclass",		ctypes.POINTER(_GtkCellAreaClass)),
	("property_id",		ctypes.c_uint),
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

gtk_cell_area_class_find_cell_property = _rpythonic_function_(		"gtk_cell_area_class_find_cell_property", ctypes.POINTER(_GParamSpec), [
	("aclass",		ctypes.POINTER(_GtkCellAreaClass)),
	("property_name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_cell_area_class_list_cell_properties = _rpythonic_function_(		"gtk_cell_area_class_list_cell_properties", ctypes.POINTER(ctypes.POINTER(_GParamSpec)), [
	("aclass",		ctypes.POINTER(_GtkCellAreaClass)),
	("n_properties",		ctypes.POINTER(ctypes.c_uint)),] )

gtk_cell_area_cell_set_valist = _rpythonic_function_(		"gtk_cell_area_cell_set_valist", ctypes.c_void_p, [
	("area",		ctypes.POINTER(_GtkCellArea)),
	("renderer",		ctypes.POINTER(_GtkCellRenderer)),
	("first_property_name",		ctypes.POINTER(ctypes.c_char)),
	("var_args",		ctypes.c_char),] )

gtk_cell_area_cell_get_valist = _rpythonic_function_(		"gtk_cell_area_cell_get_valist", ctypes.c_void_p, [
	("area",		ctypes.POINTER(_GtkCellArea)),
	("renderer",		ctypes.POINTER(_GtkCellRenderer)),
	("first_property_name",		ctypes.POINTER(ctypes.c_char)),
	("var_args",		ctypes.c_char),] )

gtk_cell_area_cell_set_property = _rpythonic_function_(		"gtk_cell_area_cell_set_property", ctypes.c_void_p, [
	("area",		ctypes.POINTER(_GtkCellArea)),
	("renderer",		ctypes.POINTER(_GtkCellRenderer)),
	("property_name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(_GValue)),] )

gtk_cell_area_cell_get_property = _rpythonic_function_(		"gtk_cell_area_cell_get_property", ctypes.c_void_p, [
	("area",		ctypes.POINTER(_GtkCellArea)),
	("renderer",		ctypes.POINTER(_GtkCellRenderer)),
	("property_name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(_GValue)),] )

gtk_cell_area_is_activatable = _rpythonic_function_(		"gtk_cell_area_is_activatable", ctypes.c_int, [
	("area",		ctypes.POINTER(_GtkCellArea)),] )

gtk_cell_area_activate = _rpythonic_function_(		"gtk_cell_area_activate", ctypes.c_int, [
	("area",		ctypes.POINTER(_GtkCellArea)),
	("context",		ctypes.POINTER(_GtkCellAreaContext)),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("cell_area",		ctypes.POINTER(_cairo_rectangle_int)),
	("flags",		ctypes.c_int),
	("edit_only",		ctypes.c_int),] )

gtk_cell_area_focus = _rpythonic_function_(		"gtk_cell_area_focus", ctypes.c_int, [
	("area",		ctypes.POINTER(_GtkCellArea)),
	("direction",		ctypes.c_int),] )

gtk_cell_area_set_focus_cell = _rpythonic_function_(		"gtk_cell_area_set_focus_cell", ctypes.c_void_p, [
	("area",		ctypes.POINTER(_GtkCellArea)),
	("renderer",		ctypes.POINTER(_GtkCellRenderer)),] )

gtk_cell_area_get_focus_cell = _rpythonic_function_(		"gtk_cell_area_get_focus_cell", ctypes.POINTER(_GtkCellRenderer), [
	("area",		ctypes.POINTER(_GtkCellArea)),] )

gtk_cell_area_add_focus_sibling = _rpythonic_function_(		"gtk_cell_area_add_focus_sibling", ctypes.c_void_p, [
	("area",		ctypes.POINTER(_GtkCellArea)),
	("renderer",		ctypes.POINTER(_GtkCellRenderer)),
	("sibling",		ctypes.POINTER(_GtkCellRenderer)),] )

gtk_cell_area_remove_focus_sibling = _rpythonic_function_(		"gtk_cell_area_remove_focus_sibling", ctypes.c_void_p, [
	("area",		ctypes.POINTER(_GtkCellArea)),
	("renderer",		ctypes.POINTER(_GtkCellRenderer)),
	("sibling",		ctypes.POINTER(_GtkCellRenderer)),] )

gtk_cell_area_is_focus_sibling = _rpythonic_function_(		"gtk_cell_area_is_focus_sibling", ctypes.c_int, [
	("area",		ctypes.POINTER(_GtkCellArea)),
	("renderer",		ctypes.POINTER(_GtkCellRenderer)),
	("sibling",		ctypes.POINTER(_GtkCellRenderer)),] )

gtk_cell_area_get_focus_siblings = _rpythonic_function_(		"gtk_cell_area_get_focus_siblings", ctypes.POINTER(_GList), [
	("area",		ctypes.POINTER(_GtkCellArea)),
	("renderer",		ctypes.POINTER(_GtkCellRenderer)),] )

gtk_cell_area_get_focus_from_sibling = _rpythonic_function_(		"gtk_cell_area_get_focus_from_sibling", ctypes.POINTER(_GtkCellRenderer), [
	("area",		ctypes.POINTER(_GtkCellArea)),
	("renderer",		ctypes.POINTER(_GtkCellRenderer)),] )

gtk_cell_area_get_edited_cell = _rpythonic_function_(		"gtk_cell_area_get_edited_cell", ctypes.POINTER(_GtkCellRenderer), [
	("area",		ctypes.POINTER(_GtkCellArea)),] )

gtk_cell_area_get_edit_widget = _rpythonic_function_(		"gtk_cell_area_get_edit_widget", ctypes.POINTER(_GtkCellEditable), [
	("area",		ctypes.POINTER(_GtkCellArea)),] )

gtk_cell_area_activate_cell = _rpythonic_function_(		"gtk_cell_area_activate_cell", ctypes.c_int, [
	("area",		ctypes.POINTER(_GtkCellArea)),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("renderer",		ctypes.POINTER(_GtkCellRenderer)),
	("event",		ctypes.POINTER(_GdkEvent)),
	("cell_area",		ctypes.POINTER(_cairo_rectangle_int)),
	("flags",		ctypes.c_int),] )

gtk_cell_area_stop_editing = _rpythonic_function_(		"gtk_cell_area_stop_editing", ctypes.c_void_p, [
	("area",		ctypes.POINTER(_GtkCellArea)),
	("canceled",		ctypes.c_int),] )

gtk_cell_area_inner_cell_area = _rpythonic_function_(		"gtk_cell_area_inner_cell_area", ctypes.c_void_p, [
	("area",		ctypes.POINTER(_GtkCellArea)),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("cell_area",		ctypes.POINTER(_cairo_rectangle_int)),
	("inner_area",		ctypes.POINTER(_cairo_rectangle_int)),] )

gtk_cell_area_request_renderer = _rpythonic_function_(		"gtk_cell_area_request_renderer", ctypes.c_void_p, [
	("area",		ctypes.POINTER(_GtkCellArea)),
	("renderer",		ctypes.POINTER(_GtkCellRenderer)),
	("orientation",		ctypes.c_int),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("for_size",		ctypes.c_int),
	("minimum_size",		ctypes.POINTER(ctypes.c_int)),
	("natural_size",		ctypes.POINTER(ctypes.c_int)),] )

_gtk_cell_area_set_cell_data_func_with_proxy = _rpythonic_function_(		"_gtk_cell_area_set_cell_data_func_with_proxy", ctypes.c_void_p, [
	("area",		ctypes.POINTER(_GtkCellArea)),
	("cell",		ctypes.POINTER(_GtkCellRenderer)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("func_data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("proxy",		ctypes.POINTER(ctypes.c_void_p)),] )

GtkTreeCellDataFunc = _rpythonic_function_(		"GtkTreeCellDataFunc", ctypes.c_void_p, [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),
	("cell",		ctypes.POINTER(_GtkCellRenderer)),
	("tree_model",		ctypes.POINTER(_GtkTreeModel)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

clicked = _rpythonic_function_(		"clicked", ctypes.c_void_p, [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),] )

gtk_tree_view_column_get_type = _rpythonic_function_(		"gtk_tree_view_column_get_type", ctypes.c_uint, [] )

gtk_tree_view_column_new = _rpythonic_function_(		"gtk_tree_view_column_new", ctypes.POINTER(_GtkTreeViewColumn), [] )

gtk_tree_view_column_new_with_area = _rpythonic_function_(		"gtk_tree_view_column_new_with_area", ctypes.POINTER(_GtkTreeViewColumn), [
	("area",		ctypes.POINTER(_GtkCellArea)),] )

gtk_tree_view_column_pack_start = _rpythonic_function_(		"gtk_tree_view_column_pack_start", ctypes.c_void_p, [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),
	("cell",		ctypes.POINTER(_GtkCellRenderer)),
	("expand",		ctypes.c_int),] )

gtk_tree_view_column_pack_end = _rpythonic_function_(		"gtk_tree_view_column_pack_end", ctypes.c_void_p, [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),
	("cell",		ctypes.POINTER(_GtkCellRenderer)),
	("expand",		ctypes.c_int),] )

gtk_tree_view_column_clear = _rpythonic_function_(		"gtk_tree_view_column_clear", ctypes.c_void_p, [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),] )

gtk_tree_view_column_add_attribute = _rpythonic_function_(		"gtk_tree_view_column_add_attribute", ctypes.c_void_p, [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),
	("cell_renderer",		ctypes.POINTER(_GtkCellRenderer)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("column",		ctypes.c_int),] )

gtk_tree_view_column_set_cell_data_func = _rpythonic_function_(		"gtk_tree_view_column_set_cell_data_func", ctypes.c_void_p, [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),
	("cell_renderer",		ctypes.POINTER(_GtkCellRenderer)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GtkTreeViewColumn),ctypes.POINTER(_GtkCellRenderer),ctypes.POINTER(_GtkTreeModel),ctypes.POINTER(_GtkTreeIter),ctypes.POINTER(ctypes.c_void_p),)),
	("func_data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

gtk_tree_view_column_clear_attributes = _rpythonic_function_(		"gtk_tree_view_column_clear_attributes", ctypes.c_void_p, [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),
	("cell_renderer",		ctypes.POINTER(_GtkCellRenderer)),] )

gtk_tree_view_column_set_spacing = _rpythonic_function_(		"gtk_tree_view_column_set_spacing", ctypes.c_void_p, [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),
	("spacing",		ctypes.c_int),] )

gtk_tree_view_column_get_spacing = _rpythonic_function_(		"gtk_tree_view_column_get_spacing", ctypes.c_int, [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),] )

gtk_tree_view_column_set_visible = _rpythonic_function_(		"gtk_tree_view_column_set_visible", ctypes.c_void_p, [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),
	("visible",		ctypes.c_int),] )

gtk_tree_view_column_get_visible = _rpythonic_function_(		"gtk_tree_view_column_get_visible", ctypes.c_int, [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),] )

gtk_tree_view_column_set_resizable = _rpythonic_function_(		"gtk_tree_view_column_set_resizable", ctypes.c_void_p, [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),
	("resizable",		ctypes.c_int),] )

gtk_tree_view_column_get_resizable = _rpythonic_function_(		"gtk_tree_view_column_get_resizable", ctypes.c_int, [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),] )

gtk_tree_view_column_set_sizing = _rpythonic_function_(		"gtk_tree_view_column_set_sizing", ctypes.c_void_p, [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),
	("C_type",		ctypes.c_int),] )

gtk_tree_view_column_get_sizing = _rpythonic_function_(		"gtk_tree_view_column_get_sizing", ctypes.c_int, [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),] )

gtk_tree_view_column_get_x_offset = _rpythonic_function_(		"gtk_tree_view_column_get_x_offset", ctypes.c_int, [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),] )

gtk_tree_view_column_get_width = _rpythonic_function_(		"gtk_tree_view_column_get_width", ctypes.c_int, [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),] )

gtk_tree_view_column_get_fixed_width = _rpythonic_function_(		"gtk_tree_view_column_get_fixed_width", ctypes.c_int, [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),] )

gtk_tree_view_column_set_fixed_width = _rpythonic_function_(		"gtk_tree_view_column_set_fixed_width", ctypes.c_void_p, [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),
	("fixed_width",		ctypes.c_int),] )

gtk_tree_view_column_set_min_width = _rpythonic_function_(		"gtk_tree_view_column_set_min_width", ctypes.c_void_p, [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),
	("min_width",		ctypes.c_int),] )

gtk_tree_view_column_get_min_width = _rpythonic_function_(		"gtk_tree_view_column_get_min_width", ctypes.c_int, [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),] )

gtk_tree_view_column_set_max_width = _rpythonic_function_(		"gtk_tree_view_column_set_max_width", ctypes.c_void_p, [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),
	("max_width",		ctypes.c_int),] )

gtk_tree_view_column_get_max_width = _rpythonic_function_(		"gtk_tree_view_column_get_max_width", ctypes.c_int, [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),] )

gtk_tree_view_column_clicked = _rpythonic_function_(		"gtk_tree_view_column_clicked", ctypes.c_void_p, [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),] )

gtk_tree_view_column_set_title = _rpythonic_function_(		"gtk_tree_view_column_set_title", ctypes.c_void_p, [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),
	("title",		ctypes.POINTER(ctypes.c_char)),] )

gtk_tree_view_column_get_title = _rpythonic_function_(		"gtk_tree_view_column_get_title", ctypes.POINTER(ctypes.c_char), [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),] )

gtk_tree_view_column_set_expand = _rpythonic_function_(		"gtk_tree_view_column_set_expand", ctypes.c_void_p, [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),
	("expand",		ctypes.c_int),] )

gtk_tree_view_column_get_expand = _rpythonic_function_(		"gtk_tree_view_column_get_expand", ctypes.c_int, [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),] )

gtk_tree_view_column_set_clickable = _rpythonic_function_(		"gtk_tree_view_column_set_clickable", ctypes.c_void_p, [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),
	("clickable",		ctypes.c_int),] )

gtk_tree_view_column_get_clickable = _rpythonic_function_(		"gtk_tree_view_column_get_clickable", ctypes.c_int, [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),] )

gtk_tree_view_column_set_widget = _rpythonic_function_(		"gtk_tree_view_column_set_widget", ctypes.c_void_p, [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_tree_view_column_get_widget = _rpythonic_function_(		"gtk_tree_view_column_get_widget", ctypes.POINTER(_GtkWidget), [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),] )

gtk_tree_view_column_set_alignment = _rpythonic_function_(		"gtk_tree_view_column_set_alignment", ctypes.c_void_p, [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),
	("xalign",		ctypes.c_float),] )

gtk_tree_view_column_get_alignment = _rpythonic_function_(		"gtk_tree_view_column_get_alignment", ctypes.c_float, [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),] )

gtk_tree_view_column_set_reorderable = _rpythonic_function_(		"gtk_tree_view_column_set_reorderable", ctypes.c_void_p, [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),
	("reorderable",		ctypes.c_int),] )

gtk_tree_view_column_get_reorderable = _rpythonic_function_(		"gtk_tree_view_column_get_reorderable", ctypes.c_int, [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),] )

gtk_tree_view_column_set_sort_column_id = _rpythonic_function_(		"gtk_tree_view_column_set_sort_column_id", ctypes.c_void_p, [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),
	("sort_column_id",		ctypes.c_int),] )

gtk_tree_view_column_get_sort_column_id = _rpythonic_function_(		"gtk_tree_view_column_get_sort_column_id", ctypes.c_int, [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),] )

gtk_tree_view_column_set_sort_indicator = _rpythonic_function_(		"gtk_tree_view_column_set_sort_indicator", ctypes.c_void_p, [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),
	("setting",		ctypes.c_int),] )

gtk_tree_view_column_get_sort_indicator = _rpythonic_function_(		"gtk_tree_view_column_get_sort_indicator", ctypes.c_int, [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),] )

gtk_tree_view_column_set_sort_order = _rpythonic_function_(		"gtk_tree_view_column_set_sort_order", ctypes.c_void_p, [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),
	("order",		ctypes.c_int),] )

gtk_tree_view_column_get_sort_order = _rpythonic_function_(		"gtk_tree_view_column_get_sort_order", ctypes.c_int, [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),] )

gtk_tree_view_column_cell_set_cell_data = _rpythonic_function_(		"gtk_tree_view_column_cell_set_cell_data", ctypes.c_void_p, [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),
	("tree_model",		ctypes.POINTER(_GtkTreeModel)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("is_expander",		ctypes.c_int),
	("is_expanded",		ctypes.c_int),] )

gtk_tree_view_column_cell_get_size = _rpythonic_function_(		"gtk_tree_view_column_cell_get_size", ctypes.c_void_p, [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),
	("cell_area",		ctypes.POINTER(_cairo_rectangle_int)),
	("x_offset",		ctypes.POINTER(ctypes.c_int)),
	("y_offset",		ctypes.POINTER(ctypes.c_int)),
	("width",		ctypes.POINTER(ctypes.c_int)),
	("height",		ctypes.POINTER(ctypes.c_int)),] )

gtk_tree_view_column_cell_is_visible = _rpythonic_function_(		"gtk_tree_view_column_cell_is_visible", ctypes.c_int, [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),] )

gtk_tree_view_column_focus_cell = _rpythonic_function_(		"gtk_tree_view_column_focus_cell", ctypes.c_void_p, [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),
	("cell",		ctypes.POINTER(_GtkCellRenderer)),] )

gtk_tree_view_column_cell_get_position = _rpythonic_function_(		"gtk_tree_view_column_cell_get_position", ctypes.c_int, [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),
	("cell_renderer",		ctypes.POINTER(_GtkCellRenderer)),
	("x_offset",		ctypes.POINTER(ctypes.c_int)),
	("width",		ctypes.POINTER(ctypes.c_int)),] )

gtk_tree_view_column_queue_resize = _rpythonic_function_(		"gtk_tree_view_column_queue_resize", ctypes.c_void_p, [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),] )

gtk_tree_view_column_get_tree_view = _rpythonic_function_(		"gtk_tree_view_column_get_tree_view", ctypes.POINTER(_GtkWidget), [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),] )

gtk_tree_view_column_get_button = _rpythonic_function_(		"gtk_tree_view_column_get_button", ctypes.POINTER(_GtkWidget), [
	("tree_column",		ctypes.POINTER(_GtkTreeViewColumn)),] )

gtk_text_attributes_copy = _rpythonic_function_(		"gtk_text_attributes_copy", ctypes.POINTER(_GtkTextAttributes), [
	("src",		ctypes.POINTER(_GtkTextAttributes)),] )

gtk_text_attributes_copy_values = _rpythonic_function_(		"gtk_text_attributes_copy_values", ctypes.c_void_p, [
	("src",		ctypes.POINTER(_GtkTextAttributes)),
	("dest",		ctypes.POINTER(_GtkTextAttributes)),] )

gtk_text_attributes_new = _rpythonic_function_(		"gtk_text_attributes_new", ctypes.POINTER(_GtkTextAttributes), [] )

gtk_text_attributes_unref = _rpythonic_function_(		"gtk_text_attributes_unref", ctypes.c_void_p, [
	("values",		ctypes.POINTER(_GtkTextAttributes)),] )

gtk_text_attributes_ref = _rpythonic_function_(		"gtk_text_attributes_ref", ctypes.POINTER(_GtkTextAttributes), [
	("values",		ctypes.POINTER(_GtkTextAttributes)),] )

gtk_text_attributes_get_type = _rpythonic_function_(		"gtk_text_attributes_get_type", ctypes.c_uint, [] )

gtk_text_child_anchor_get_type = _rpythonic_function_(		"gtk_text_child_anchor_get_type", ctypes.c_uint, [] )

gtk_text_child_anchor_new = _rpythonic_function_(		"gtk_text_child_anchor_new", ctypes.POINTER(_GtkTextChildAnchor), [] )

gtk_text_child_anchor_get_widgets = _rpythonic_function_(		"gtk_text_child_anchor_get_widgets", ctypes.POINTER(_GList), [
	("anchor",		ctypes.POINTER(_GtkTextChildAnchor)),] )

gtk_text_child_anchor_get_deleted = _rpythonic_function_(		"gtk_text_child_anchor_get_deleted", ctypes.c_int, [
	("anchor",		ctypes.POINTER(_GtkTextChildAnchor)),] )

gtk_text_tag_get_type = _rpythonic_function_(		"gtk_text_tag_get_type", ctypes.c_uint, [] )

gtk_text_tag_get_priority = _rpythonic_function_(		"gtk_text_tag_get_priority", ctypes.c_int, [
	("tag",		ctypes.POINTER(_GtkTextTag)),] )

gtk_text_tag_new = _rpythonic_function_(		"gtk_text_tag_new", ctypes.POINTER(_GtkTextTag), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_text_tag_set_priority = _rpythonic_function_(		"gtk_text_tag_set_priority", ctypes.c_void_p, [
	("tag",		ctypes.POINTER(_GtkTextTag)),
	("priority",		ctypes.c_int),] )

gtk_text_tag_event = _rpythonic_function_(		"gtk_text_tag_event", ctypes.c_int, [
	("tag",		ctypes.POINTER(_GtkTextTag)),
	("event_object",		ctypes.POINTER(_GObject)),
	("event",		ctypes.POINTER(_GdkEvent)),
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_get_buffer = _rpythonic_function_(		"gtk_text_iter_get_buffer", ctypes.POINTER(_GtkTextBuffer), [
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_copy = _rpythonic_function_(		"gtk_text_iter_copy", ctypes.POINTER(_GtkTextIter), [
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_free = _rpythonic_function_(		"gtk_text_iter_free", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_assign = _rpythonic_function_(		"gtk_text_iter_assign", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("other",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_get_type = _rpythonic_function_(		"gtk_text_iter_get_type", ctypes.c_uint, [] )

gtk_text_iter_get_offset = _rpythonic_function_(		"gtk_text_iter_get_offset", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_get_line = _rpythonic_function_(		"gtk_text_iter_get_line", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_get_line_offset = _rpythonic_function_(		"gtk_text_iter_get_line_offset", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_get_line_index = _rpythonic_function_(		"gtk_text_iter_get_line_index", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_get_visible_line_offset = _rpythonic_function_(		"gtk_text_iter_get_visible_line_offset", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_get_visible_line_index = _rpythonic_function_(		"gtk_text_iter_get_visible_line_index", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_get_char = _rpythonic_function_(		"gtk_text_iter_get_char", ctypes.c_uint, [
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_get_slice = _rpythonic_function_(		"gtk_text_iter_get_slice", ctypes.POINTER(ctypes.c_char), [
	("start",		ctypes.POINTER(_GtkTextIter)),
	("end",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_get_text = _rpythonic_function_(		"gtk_text_iter_get_text", ctypes.POINTER(ctypes.c_char), [
	("start",		ctypes.POINTER(_GtkTextIter)),
	("end",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_get_visible_slice = _rpythonic_function_(		"gtk_text_iter_get_visible_slice", ctypes.POINTER(ctypes.c_char), [
	("start",		ctypes.POINTER(_GtkTextIter)),
	("end",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_get_visible_text = _rpythonic_function_(		"gtk_text_iter_get_visible_text", ctypes.POINTER(ctypes.c_char), [
	("start",		ctypes.POINTER(_GtkTextIter)),
	("end",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_get_pixbuf = _rpythonic_function_(		"gtk_text_iter_get_pixbuf", ctypes.POINTER(_GdkPixbuf), [
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_get_marks = _rpythonic_function_(		"gtk_text_iter_get_marks", ctypes.POINTER(_GSList), [
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_get_child_anchor = _rpythonic_function_(		"gtk_text_iter_get_child_anchor", ctypes.POINTER(_GtkTextChildAnchor), [
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_get_toggled_tags = _rpythonic_function_(		"gtk_text_iter_get_toggled_tags", ctypes.POINTER(_GSList), [
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("toggled_on",		ctypes.c_int),] )

gtk_text_iter_begins_tag = _rpythonic_function_(		"gtk_text_iter_begins_tag", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("tag",		ctypes.POINTER(_GtkTextTag)),] )

gtk_text_iter_ends_tag = _rpythonic_function_(		"gtk_text_iter_ends_tag", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("tag",		ctypes.POINTER(_GtkTextTag)),] )

gtk_text_iter_toggles_tag = _rpythonic_function_(		"gtk_text_iter_toggles_tag", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("tag",		ctypes.POINTER(_GtkTextTag)),] )

gtk_text_iter_has_tag = _rpythonic_function_(		"gtk_text_iter_has_tag", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("tag",		ctypes.POINTER(_GtkTextTag)),] )

gtk_text_iter_get_tags = _rpythonic_function_(		"gtk_text_iter_get_tags", ctypes.POINTER(_GSList), [
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_editable = _rpythonic_function_(		"gtk_text_iter_editable", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("default_setting",		ctypes.c_int),] )

gtk_text_iter_can_insert = _rpythonic_function_(		"gtk_text_iter_can_insert", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("default_editability",		ctypes.c_int),] )

gtk_text_iter_starts_word = _rpythonic_function_(		"gtk_text_iter_starts_word", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_ends_word = _rpythonic_function_(		"gtk_text_iter_ends_word", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_inside_word = _rpythonic_function_(		"gtk_text_iter_inside_word", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_starts_sentence = _rpythonic_function_(		"gtk_text_iter_starts_sentence", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_ends_sentence = _rpythonic_function_(		"gtk_text_iter_ends_sentence", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_inside_sentence = _rpythonic_function_(		"gtk_text_iter_inside_sentence", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_starts_line = _rpythonic_function_(		"gtk_text_iter_starts_line", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_ends_line = _rpythonic_function_(		"gtk_text_iter_ends_line", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_is_cursor_position = _rpythonic_function_(		"gtk_text_iter_is_cursor_position", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_get_chars_in_line = _rpythonic_function_(		"gtk_text_iter_get_chars_in_line", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_get_bytes_in_line = _rpythonic_function_(		"gtk_text_iter_get_bytes_in_line", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_get_attributes = _rpythonic_function_(		"gtk_text_iter_get_attributes", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("values",		ctypes.POINTER(_GtkTextAttributes)),] )

gtk_text_iter_get_language = _rpythonic_function_(		"gtk_text_iter_get_language", ctypes.POINTER(_PangoLanguage), [
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_is_end = _rpythonic_function_(		"gtk_text_iter_is_end", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_is_start = _rpythonic_function_(		"gtk_text_iter_is_start", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_forward_char = _rpythonic_function_(		"gtk_text_iter_forward_char", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_backward_char = _rpythonic_function_(		"gtk_text_iter_backward_char", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_forward_chars = _rpythonic_function_(		"gtk_text_iter_forward_chars", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("count",		ctypes.c_int),] )

gtk_text_iter_backward_chars = _rpythonic_function_(		"gtk_text_iter_backward_chars", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("count",		ctypes.c_int),] )

gtk_text_iter_forward_line = _rpythonic_function_(		"gtk_text_iter_forward_line", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_backward_line = _rpythonic_function_(		"gtk_text_iter_backward_line", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_forward_lines = _rpythonic_function_(		"gtk_text_iter_forward_lines", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("count",		ctypes.c_int),] )

gtk_text_iter_backward_lines = _rpythonic_function_(		"gtk_text_iter_backward_lines", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("count",		ctypes.c_int),] )

gtk_text_iter_forward_word_end = _rpythonic_function_(		"gtk_text_iter_forward_word_end", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_backward_word_start = _rpythonic_function_(		"gtk_text_iter_backward_word_start", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_forward_word_ends = _rpythonic_function_(		"gtk_text_iter_forward_word_ends", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("count",		ctypes.c_int),] )

gtk_text_iter_backward_word_starts = _rpythonic_function_(		"gtk_text_iter_backward_word_starts", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("count",		ctypes.c_int),] )

gtk_text_iter_forward_visible_line = _rpythonic_function_(		"gtk_text_iter_forward_visible_line", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_backward_visible_line = _rpythonic_function_(		"gtk_text_iter_backward_visible_line", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_forward_visible_lines = _rpythonic_function_(		"gtk_text_iter_forward_visible_lines", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("count",		ctypes.c_int),] )

gtk_text_iter_backward_visible_lines = _rpythonic_function_(		"gtk_text_iter_backward_visible_lines", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("count",		ctypes.c_int),] )

gtk_text_iter_forward_visible_word_end = _rpythonic_function_(		"gtk_text_iter_forward_visible_word_end", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_backward_visible_word_start = _rpythonic_function_(		"gtk_text_iter_backward_visible_word_start", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_forward_visible_word_ends = _rpythonic_function_(		"gtk_text_iter_forward_visible_word_ends", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("count",		ctypes.c_int),] )

gtk_text_iter_backward_visible_word_starts = _rpythonic_function_(		"gtk_text_iter_backward_visible_word_starts", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("count",		ctypes.c_int),] )

gtk_text_iter_forward_sentence_end = _rpythonic_function_(		"gtk_text_iter_forward_sentence_end", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_backward_sentence_start = _rpythonic_function_(		"gtk_text_iter_backward_sentence_start", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_forward_sentence_ends = _rpythonic_function_(		"gtk_text_iter_forward_sentence_ends", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("count",		ctypes.c_int),] )

gtk_text_iter_backward_sentence_starts = _rpythonic_function_(		"gtk_text_iter_backward_sentence_starts", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("count",		ctypes.c_int),] )

gtk_text_iter_forward_cursor_position = _rpythonic_function_(		"gtk_text_iter_forward_cursor_position", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_backward_cursor_position = _rpythonic_function_(		"gtk_text_iter_backward_cursor_position", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_forward_cursor_positions = _rpythonic_function_(		"gtk_text_iter_forward_cursor_positions", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("count",		ctypes.c_int),] )

gtk_text_iter_backward_cursor_positions = _rpythonic_function_(		"gtk_text_iter_backward_cursor_positions", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("count",		ctypes.c_int),] )

gtk_text_iter_forward_visible_cursor_position = _rpythonic_function_(		"gtk_text_iter_forward_visible_cursor_position", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_backward_visible_cursor_position = _rpythonic_function_(		"gtk_text_iter_backward_visible_cursor_position", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_forward_visible_cursor_positions = _rpythonic_function_(		"gtk_text_iter_forward_visible_cursor_positions", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("count",		ctypes.c_int),] )

gtk_text_iter_backward_visible_cursor_positions = _rpythonic_function_(		"gtk_text_iter_backward_visible_cursor_positions", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("count",		ctypes.c_int),] )

gtk_text_iter_set_offset = _rpythonic_function_(		"gtk_text_iter_set_offset", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("char_offset",		ctypes.c_int),] )

gtk_text_iter_set_line = _rpythonic_function_(		"gtk_text_iter_set_line", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("line_number",		ctypes.c_int),] )

gtk_text_iter_set_line_offset = _rpythonic_function_(		"gtk_text_iter_set_line_offset", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("char_on_line",		ctypes.c_int),] )

gtk_text_iter_set_line_index = _rpythonic_function_(		"gtk_text_iter_set_line_index", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("byte_on_line",		ctypes.c_int),] )

gtk_text_iter_forward_to_end = _rpythonic_function_(		"gtk_text_iter_forward_to_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_forward_to_line_end = _rpythonic_function_(		"gtk_text_iter_forward_to_line_end", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_set_visible_line_offset = _rpythonic_function_(		"gtk_text_iter_set_visible_line_offset", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("char_on_line",		ctypes.c_int),] )

gtk_text_iter_set_visible_line_index = _rpythonic_function_(		"gtk_text_iter_set_visible_line_index", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("byte_on_line",		ctypes.c_int),] )

gtk_text_iter_forward_to_tag_toggle = _rpythonic_function_(		"gtk_text_iter_forward_to_tag_toggle", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("tag",		ctypes.POINTER(_GtkTextTag)),] )

gtk_text_iter_backward_to_tag_toggle = _rpythonic_function_(		"gtk_text_iter_backward_to_tag_toggle", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("tag",		ctypes.POINTER(_GtkTextTag)),] )

GtkTextCharPredicate = _rpythonic_function_(		"GtkTextCharPredicate", ctypes.c_int, [
	("ch",		ctypes.c_uint),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gtk_text_iter_forward_find_char = _rpythonic_function_(		"gtk_text_iter_forward_find_char", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("pred",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_uint,ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("limit",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_backward_find_char = _rpythonic_function_(		"gtk_text_iter_backward_find_char", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("pred",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_uint,ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("limit",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_forward_search = _rpythonic_function_(		"gtk_text_iter_forward_search", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("match_start",		ctypes.POINTER(_GtkTextIter)),
	("match_end",		ctypes.POINTER(_GtkTextIter)),
	("limit",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_backward_search = _rpythonic_function_(		"gtk_text_iter_backward_search", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("match_start",		ctypes.POINTER(_GtkTextIter)),
	("match_end",		ctypes.POINTER(_GtkTextIter)),
	("limit",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_equal = _rpythonic_function_(		"gtk_text_iter_equal", ctypes.c_int, [
	("lhs",		ctypes.POINTER(_GtkTextIter)),
	("rhs",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_compare = _rpythonic_function_(		"gtk_text_iter_compare", ctypes.c_int, [
	("lhs",		ctypes.POINTER(_GtkTextIter)),
	("rhs",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_in_range = _rpythonic_function_(		"gtk_text_iter_in_range", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("start",		ctypes.POINTER(_GtkTextIter)),
	("end",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_iter_order = _rpythonic_function_(		"gtk_text_iter_order", ctypes.c_void_p, [
	("first",		ctypes.POINTER(_GtkTextIter)),
	("second",		ctypes.POINTER(_GtkTextIter)),] )

gtk_target_list_get_type = _rpythonic_function_(		"gtk_target_list_get_type", ctypes.c_uint, [] )

gtk_target_list_new = _rpythonic_function_(		"gtk_target_list_new", ctypes.POINTER(_GtkTargetList), [
	("targets",		ctypes.POINTER(_GtkTargetEntry)),
	("ntargets",		ctypes.c_uint),] )

gtk_target_list_ref = _rpythonic_function_(		"gtk_target_list_ref", ctypes.POINTER(_GtkTargetList), [
	("C_list",		ctypes.POINTER(_GtkTargetList)),] )

gtk_target_list_unref = _rpythonic_function_(		"gtk_target_list_unref", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GtkTargetList)),] )

gtk_target_list_add = _rpythonic_function_(		"gtk_target_list_add", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GtkTargetList)),
	("target",		ctypes.POINTER(_GdkAtom)),
	("flags",		ctypes.c_uint),
	("info",		ctypes.c_uint),] )

gtk_target_list_add_text_targets = _rpythonic_function_(		"gtk_target_list_add_text_targets", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GtkTargetList)),
	("info",		ctypes.c_uint),] )

gtk_target_list_add_rich_text_targets = _rpythonic_function_(		"gtk_target_list_add_rich_text_targets", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GtkTargetList)),
	("info",		ctypes.c_uint),
	("deserializable",		ctypes.c_int),
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),] )

gtk_target_list_add_image_targets = _rpythonic_function_(		"gtk_target_list_add_image_targets", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GtkTargetList)),
	("info",		ctypes.c_uint),
	("writable",		ctypes.c_int),] )

gtk_target_list_add_uri_targets = _rpythonic_function_(		"gtk_target_list_add_uri_targets", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GtkTargetList)),
	("info",		ctypes.c_uint),] )

gtk_target_list_add_table = _rpythonic_function_(		"gtk_target_list_add_table", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GtkTargetList)),
	("targets",		ctypes.POINTER(_GtkTargetEntry)),
	("ntargets",		ctypes.c_uint),] )

gtk_target_list_remove = _rpythonic_function_(		"gtk_target_list_remove", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GtkTargetList)),
	("target",		ctypes.POINTER(_GdkAtom)),] )

gtk_target_list_find = _rpythonic_function_(		"gtk_target_list_find", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GtkTargetList)),
	("target",		ctypes.POINTER(_GdkAtom)),
	("info",		ctypes.POINTER(ctypes.c_uint)),] )

gtk_target_table_new_from_list = _rpythonic_function_(		"gtk_target_table_new_from_list", ctypes.POINTER(_GtkTargetEntry), [
	("C_list",		ctypes.POINTER(_GtkTargetList)),
	("n_targets",		ctypes.POINTER(ctypes.c_int)),] )

gtk_target_table_free = _rpythonic_function_(		"gtk_target_table_free", ctypes.c_void_p, [
	("targets",		ctypes.POINTER(_GtkTargetEntry)),
	("n_targets",		ctypes.c_int),] )

gtk_selection_owner_set = _rpythonic_function_(		"gtk_selection_owner_set", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("selection",		ctypes.POINTER(_GdkAtom)),
	("time_",		ctypes.c_uint),] )

gtk_selection_owner_set_for_display = _rpythonic_function_(		"gtk_selection_owner_set_for_display", ctypes.c_int, [
	("display",		ctypes.POINTER(_GdkDisplay)),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("selection",		ctypes.POINTER(_GdkAtom)),
	("time_",		ctypes.c_uint),] )

gtk_selection_add_target = _rpythonic_function_(		"gtk_selection_add_target", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("selection",		ctypes.POINTER(_GdkAtom)),
	("target",		ctypes.POINTER(_GdkAtom)),
	("info",		ctypes.c_uint),] )

gtk_selection_add_targets = _rpythonic_function_(		"gtk_selection_add_targets", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("selection",		ctypes.POINTER(_GdkAtom)),
	("targets",		ctypes.POINTER(_GtkTargetEntry)),
	("ntargets",		ctypes.c_uint),] )

gtk_selection_clear_targets = _rpythonic_function_(		"gtk_selection_clear_targets", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("selection",		ctypes.POINTER(_GdkAtom)),] )

gtk_selection_convert = _rpythonic_function_(		"gtk_selection_convert", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("selection",		ctypes.POINTER(_GdkAtom)),
	("target",		ctypes.POINTER(_GdkAtom)),
	("time_",		ctypes.c_uint),] )

gtk_selection_remove_all = _rpythonic_function_(		"gtk_selection_remove_all", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_selection_data_get_selection = _rpythonic_function_(		"gtk_selection_data_get_selection", ctypes.POINTER(_GdkAtom), [
	("selection_data",		ctypes.POINTER(_GtkSelectionData)),] )

gtk_selection_data_get_target = _rpythonic_function_(		"gtk_selection_data_get_target", ctypes.POINTER(_GdkAtom), [
	("selection_data",		ctypes.POINTER(_GtkSelectionData)),] )

gtk_selection_data_get_data_type = _rpythonic_function_(		"gtk_selection_data_get_data_type", ctypes.POINTER(_GdkAtom), [
	("selection_data",		ctypes.POINTER(_GtkSelectionData)),] )

gtk_selection_data_get_format = _rpythonic_function_(		"gtk_selection_data_get_format", ctypes.c_int, [
	("selection_data",		ctypes.POINTER(_GtkSelectionData)),] )

gtk_selection_data_get_data = _rpythonic_function_(		"gtk_selection_data_get_data", ctypes.POINTER(ctypes.c_ubyte), [
	("selection_data",		ctypes.POINTER(_GtkSelectionData)),] )

gtk_selection_data_get_length = _rpythonic_function_(		"gtk_selection_data_get_length", ctypes.c_int, [
	("selection_data",		ctypes.POINTER(_GtkSelectionData)),] )

gtk_selection_data_get_data_with_length = _rpythonic_function_(		"gtk_selection_data_get_data_with_length", ctypes.POINTER(ctypes.c_ubyte), [
	("selection_data",		ctypes.POINTER(_GtkSelectionData)),
	("length",		ctypes.POINTER(ctypes.c_int)),] )

gtk_selection_data_get_display = _rpythonic_function_(		"gtk_selection_data_get_display", ctypes.POINTER(_GdkDisplay), [
	("selection_data",		ctypes.POINTER(_GtkSelectionData)),] )

gtk_selection_data_set = _rpythonic_function_(		"gtk_selection_data_set", ctypes.c_void_p, [
	("selection_data",		ctypes.POINTER(_GtkSelectionData)),
	("C_type",		ctypes.POINTER(_GdkAtom)),
	("format",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_ubyte)),
	("length",		ctypes.c_int),] )

gtk_selection_data_set_text = _rpythonic_function_(		"gtk_selection_data_set_text", ctypes.c_int, [
	("selection_data",		ctypes.POINTER(_GtkSelectionData)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

gtk_selection_data_get_text = _rpythonic_function_(		"gtk_selection_data_get_text", ctypes.POINTER(ctypes.c_ubyte), [
	("selection_data",		ctypes.POINTER(_GtkSelectionData)),] )

gtk_selection_data_set_pixbuf = _rpythonic_function_(		"gtk_selection_data_set_pixbuf", ctypes.c_int, [
	("selection_data",		ctypes.POINTER(_GtkSelectionData)),
	("pixbuf",		ctypes.POINTER(_GdkPixbuf)),] )

gtk_selection_data_get_pixbuf = _rpythonic_function_(		"gtk_selection_data_get_pixbuf", ctypes.POINTER(_GdkPixbuf), [
	("selection_data",		ctypes.POINTER(_GtkSelectionData)),] )

gtk_selection_data_set_uris = _rpythonic_function_(		"gtk_selection_data_set_uris", ctypes.c_int, [
	("selection_data",		ctypes.POINTER(_GtkSelectionData)),
	("uris",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

gtk_selection_data_get_uris = _rpythonic_function_(		"gtk_selection_data_get_uris", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("selection_data",		ctypes.POINTER(_GtkSelectionData)),] )

gtk_selection_data_get_targets = _rpythonic_function_(		"gtk_selection_data_get_targets", ctypes.c_int, [
	("selection_data",		ctypes.POINTER(_GtkSelectionData)),
	("targets",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(_GdkAtom)))),
	("n_atoms",		ctypes.POINTER(ctypes.c_int)),] )

gtk_selection_data_targets_include_text = _rpythonic_function_(		"gtk_selection_data_targets_include_text", ctypes.c_int, [
	("selection_data",		ctypes.POINTER(_GtkSelectionData)),] )

gtk_selection_data_targets_include_rich_text = _rpythonic_function_(		"gtk_selection_data_targets_include_rich_text", ctypes.c_int, [
	("selection_data",		ctypes.POINTER(_GtkSelectionData)),
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),] )

gtk_selection_data_targets_include_image = _rpythonic_function_(		"gtk_selection_data_targets_include_image", ctypes.c_int, [
	("selection_data",		ctypes.POINTER(_GtkSelectionData)),
	("writable",		ctypes.c_int),] )

gtk_selection_data_targets_include_uri = _rpythonic_function_(		"gtk_selection_data_targets_include_uri", ctypes.c_int, [
	("selection_data",		ctypes.POINTER(_GtkSelectionData)),] )

gtk_targets_include_text = _rpythonic_function_(		"gtk_targets_include_text", ctypes.c_int, [
	("targets",		ctypes.POINTER(ctypes.POINTER(_GdkAtom))),
	("n_targets",		ctypes.c_int),] )

gtk_targets_include_rich_text = _rpythonic_function_(		"gtk_targets_include_rich_text", ctypes.c_int, [
	("targets",		ctypes.POINTER(ctypes.POINTER(_GdkAtom))),
	("n_targets",		ctypes.c_int),
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),] )

gtk_targets_include_image = _rpythonic_function_(		"gtk_targets_include_image", ctypes.c_int, [
	("targets",		ctypes.POINTER(ctypes.POINTER(_GdkAtom))),
	("n_targets",		ctypes.c_int),
	("writable",		ctypes.c_int),] )

gtk_targets_include_uri = _rpythonic_function_(		"gtk_targets_include_uri", ctypes.c_int, [
	("targets",		ctypes.POINTER(ctypes.POINTER(_GdkAtom))),
	("n_targets",		ctypes.c_int),] )

gtk_selection_data_get_type = _rpythonic_function_(		"gtk_selection_data_get_type", ctypes.c_uint, [] )

gtk_selection_data_copy = _rpythonic_function_(		"gtk_selection_data_copy", ctypes.POINTER(_GtkSelectionData), [
	("data",		ctypes.POINTER(_GtkSelectionData)),] )

gtk_selection_data_free = _rpythonic_function_(		"gtk_selection_data_free", ctypes.c_void_p, [
	("data",		ctypes.POINTER(_GtkSelectionData)),] )

gtk_target_entry_get_type = _rpythonic_function_(		"gtk_target_entry_get_type", ctypes.c_uint, [] )

gtk_target_entry_new = _rpythonic_function_(		"gtk_target_entry_new", ctypes.POINTER(_GtkTargetEntry), [
	("target",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_uint),
	("info",		ctypes.c_uint),] )

gtk_target_entry_copy = _rpythonic_function_(		"gtk_target_entry_copy", ctypes.POINTER(_GtkTargetEntry), [
	("data",		ctypes.POINTER(_GtkTargetEntry)),] )

gtk_target_entry_free = _rpythonic_function_(		"gtk_target_entry_free", ctypes.c_void_p, [
	("data",		ctypes.POINTER(_GtkTargetEntry)),] )

gtk_drag_get_data = _rpythonic_function_(		"gtk_drag_get_data", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("context",		ctypes.POINTER(_GdkDragContext)),
	("target",		ctypes.POINTER(_GdkAtom)),
	("time_",		ctypes.c_uint),] )

gtk_drag_finish = _rpythonic_function_(		"gtk_drag_finish", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GdkDragContext)),
	("success",		ctypes.c_int),
	("C_del",		ctypes.c_int),
	("time_",		ctypes.c_uint),] )

gtk_drag_get_source_widget = _rpythonic_function_(		"gtk_drag_get_source_widget", ctypes.POINTER(_GtkWidget), [
	("context",		ctypes.POINTER(_GdkDragContext)),] )

gtk_drag_highlight = _rpythonic_function_(		"gtk_drag_highlight", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_drag_unhighlight = _rpythonic_function_(		"gtk_drag_unhighlight", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_drag_dest_set = _rpythonic_function_(		"gtk_drag_dest_set", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("flags",		ctypes.c_int),
	("targets",		ctypes.POINTER(_GtkTargetEntry)),
	("n_targets",		ctypes.c_int),
	("actions",		ctypes.c_int),] )

gtk_drag_dest_set_proxy = _rpythonic_function_(		"gtk_drag_dest_set_proxy", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("proxy_window",		ctypes.POINTER(_GdkWindow)),
	("protocol",		ctypes.c_int),
	("use_coordinates",		ctypes.c_int),] )

gtk_drag_dest_unset = _rpythonic_function_(		"gtk_drag_dest_unset", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_drag_dest_find_target = _rpythonic_function_(		"gtk_drag_dest_find_target", ctypes.POINTER(_GdkAtom), [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("context",		ctypes.POINTER(_GdkDragContext)),
	("target_list",		ctypes.POINTER(_GtkTargetList)),] )

gtk_drag_dest_get_target_list = _rpythonic_function_(		"gtk_drag_dest_get_target_list", ctypes.POINTER(_GtkTargetList), [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_drag_dest_set_target_list = _rpythonic_function_(		"gtk_drag_dest_set_target_list", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("target_list",		ctypes.POINTER(_GtkTargetList)),] )

gtk_drag_dest_add_text_targets = _rpythonic_function_(		"gtk_drag_dest_add_text_targets", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_drag_dest_add_image_targets = _rpythonic_function_(		"gtk_drag_dest_add_image_targets", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_drag_dest_add_uri_targets = _rpythonic_function_(		"gtk_drag_dest_add_uri_targets", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_drag_dest_set_track_motion = _rpythonic_function_(		"gtk_drag_dest_set_track_motion", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("track_motion",		ctypes.c_int),] )

gtk_drag_dest_get_track_motion = _rpythonic_function_(		"gtk_drag_dest_get_track_motion", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_drag_source_set = _rpythonic_function_(		"gtk_drag_source_set", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("start_button_mask",		ctypes.c_int),
	("targets",		ctypes.POINTER(_GtkTargetEntry)),
	("n_targets",		ctypes.c_int),
	("actions",		ctypes.c_int),] )

gtk_drag_source_unset = _rpythonic_function_(		"gtk_drag_source_unset", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_drag_source_get_target_list = _rpythonic_function_(		"gtk_drag_source_get_target_list", ctypes.POINTER(_GtkTargetList), [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_drag_source_set_target_list = _rpythonic_function_(		"gtk_drag_source_set_target_list", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("target_list",		ctypes.POINTER(_GtkTargetList)),] )

gtk_drag_source_add_text_targets = _rpythonic_function_(		"gtk_drag_source_add_text_targets", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_drag_source_add_image_targets = _rpythonic_function_(		"gtk_drag_source_add_image_targets", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_drag_source_add_uri_targets = _rpythonic_function_(		"gtk_drag_source_add_uri_targets", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_drag_source_set_icon_pixbuf = _rpythonic_function_(		"gtk_drag_source_set_icon_pixbuf", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("pixbuf",		ctypes.POINTER(_GdkPixbuf)),] )

gtk_drag_source_set_icon_stock = _rpythonic_function_(		"gtk_drag_source_set_icon_stock", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("stock_id",		ctypes.POINTER(ctypes.c_char)),] )

gtk_drag_source_set_icon_name = _rpythonic_function_(		"gtk_drag_source_set_icon_name", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("icon_name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_drag_source_set_icon_gicon = _rpythonic_function_(		"gtk_drag_source_set_icon_gicon", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("icon",		ctypes.POINTER(_GIcon)),] )

gtk_drag_begin = _rpythonic_function_(		"gtk_drag_begin", ctypes.POINTER(_GdkDragContext), [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("targets",		ctypes.POINTER(_GtkTargetList)),
	("actions",		ctypes.c_int),
	("button",		ctypes.c_int),
	("event",		ctypes.POINTER(_GdkEvent)),] )

gtk_drag_set_icon_widget = _rpythonic_function_(		"gtk_drag_set_icon_widget", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GdkDragContext)),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("hot_x",		ctypes.c_int),
	("hot_y",		ctypes.c_int),] )

gtk_drag_set_icon_pixbuf = _rpythonic_function_(		"gtk_drag_set_icon_pixbuf", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GdkDragContext)),
	("pixbuf",		ctypes.POINTER(_GdkPixbuf)),
	("hot_x",		ctypes.c_int),
	("hot_y",		ctypes.c_int),] )

gtk_drag_set_icon_stock = _rpythonic_function_(		"gtk_drag_set_icon_stock", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GdkDragContext)),
	("stock_id",		ctypes.POINTER(ctypes.c_char)),
	("hot_x",		ctypes.c_int),
	("hot_y",		ctypes.c_int),] )

gtk_drag_set_icon_surface = _rpythonic_function_(		"gtk_drag_set_icon_surface", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GdkDragContext)),
	("surface",		ctypes.POINTER(_cairo_surface)),] )

gtk_drag_set_icon_name = _rpythonic_function_(		"gtk_drag_set_icon_name", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GdkDragContext)),
	("icon_name",		ctypes.POINTER(ctypes.c_char)),
	("hot_x",		ctypes.c_int),
	("hot_y",		ctypes.c_int),] )

gtk_drag_set_icon_gicon = _rpythonic_function_(		"gtk_drag_set_icon_gicon", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GdkDragContext)),
	("icon",		ctypes.POINTER(_GIcon)),
	("hot_x",		ctypes.c_int),
	("hot_y",		ctypes.c_int),] )

gtk_drag_set_icon_default = _rpythonic_function_(		"gtk_drag_set_icon_default", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GdkDragContext)),] )

gtk_drag_check_threshold = _rpythonic_function_(		"gtk_drag_check_threshold", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("start_x",		ctypes.c_int),
	("start_y",		ctypes.c_int),
	("current_x",		ctypes.c_int),
	("current_y",		ctypes.c_int),] )

_gtk_drag_source_handle_event = _rpythonic_function_(		"_gtk_drag_source_handle_event", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("event",		ctypes.POINTER(_GdkEvent)),] )

_gtk_drag_dest_handle_event = _rpythonic_function_(		"_gtk_drag_dest_handle_event", ctypes.c_void_p, [
	("toplevel",		ctypes.POINTER(_GtkWidget)),
	("event",		ctypes.POINTER(_GdkEvent)),] )

do_insert_text = _rpythonic_function_(		"do_insert_text", ctypes.c_void_p, [
	("editable",		ctypes.POINTER(_GtkEditable)),
	("new_text",		ctypes.POINTER(ctypes.c_char)),
	("new_text_length",		ctypes.c_int),
	("position",		ctypes.POINTER(ctypes.c_int)),] )

do_delete_text = _rpythonic_function_(		"do_delete_text", ctypes.c_void_p, [
	("editable",		ctypes.POINTER(_GtkEditable)),
	("start_pos",		ctypes.c_int),
	("end_pos",		ctypes.c_int),] )

get_chars = _rpythonic_function_(		"get_chars", ctypes.POINTER(ctypes.c_char), [
	("editable",		ctypes.POINTER(_GtkEditable)),
	("start_pos",		ctypes.c_int),
	("end_pos",		ctypes.c_int),] )

set_selection_bounds = _rpythonic_function_(		"set_selection_bounds", ctypes.c_void_p, [
	("editable",		ctypes.POINTER(_GtkEditable)),
	("start_pos",		ctypes.c_int),
	("end_pos",		ctypes.c_int),] )

get_selection_bounds = _rpythonic_function_(		"get_selection_bounds", ctypes.c_int, [
	("editable",		ctypes.POINTER(_GtkEditable)),
	("start_pos",		ctypes.POINTER(ctypes.c_int)),
	("end_pos",		ctypes.POINTER(ctypes.c_int)),] )

gtk_editable_get_type = _rpythonic_function_(		"gtk_editable_get_type", ctypes.c_uint, [] )

gtk_editable_select_region = _rpythonic_function_(		"gtk_editable_select_region", ctypes.c_void_p, [
	("editable",		ctypes.POINTER(_GtkEditable)),
	("start_pos",		ctypes.c_int),
	("end_pos",		ctypes.c_int),] )

gtk_editable_get_selection_bounds = _rpythonic_function_(		"gtk_editable_get_selection_bounds", ctypes.c_int, [
	("editable",		ctypes.POINTER(_GtkEditable)),
	("start_pos",		ctypes.POINTER(ctypes.c_int)),
	("end_pos",		ctypes.POINTER(ctypes.c_int)),] )

gtk_editable_insert_text = _rpythonic_function_(		"gtk_editable_insert_text", ctypes.c_void_p, [
	("editable",		ctypes.POINTER(_GtkEditable)),
	("new_text",		ctypes.POINTER(ctypes.c_char)),
	("new_text_length",		ctypes.c_int),
	("position",		ctypes.POINTER(ctypes.c_int)),] )

gtk_editable_delete_text = _rpythonic_function_(		"gtk_editable_delete_text", ctypes.c_void_p, [
	("editable",		ctypes.POINTER(_GtkEditable)),
	("start_pos",		ctypes.c_int),
	("end_pos",		ctypes.c_int),] )

gtk_editable_get_chars = _rpythonic_function_(		"gtk_editable_get_chars", ctypes.POINTER(ctypes.c_char), [
	("editable",		ctypes.POINTER(_GtkEditable)),
	("start_pos",		ctypes.c_int),
	("end_pos",		ctypes.c_int),] )

gtk_editable_cut_clipboard = _rpythonic_function_(		"gtk_editable_cut_clipboard", ctypes.c_void_p, [
	("editable",		ctypes.POINTER(_GtkEditable)),] )

gtk_editable_copy_clipboard = _rpythonic_function_(		"gtk_editable_copy_clipboard", ctypes.c_void_p, [
	("editable",		ctypes.POINTER(_GtkEditable)),] )

gtk_editable_paste_clipboard = _rpythonic_function_(		"gtk_editable_paste_clipboard", ctypes.c_void_p, [
	("editable",		ctypes.POINTER(_GtkEditable)),] )

gtk_editable_delete_selection = _rpythonic_function_(		"gtk_editable_delete_selection", ctypes.c_void_p, [
	("editable",		ctypes.POINTER(_GtkEditable)),] )

gtk_editable_set_position = _rpythonic_function_(		"gtk_editable_set_position", ctypes.c_void_p, [
	("editable",		ctypes.POINTER(_GtkEditable)),
	("position",		ctypes.c_int),] )

gtk_editable_get_position = _rpythonic_function_(		"gtk_editable_get_position", ctypes.c_int, [
	("editable",		ctypes.POINTER(_GtkEditable)),] )

gtk_editable_set_editable = _rpythonic_function_(		"gtk_editable_set_editable", ctypes.c_void_p, [
	("editable",		ctypes.POINTER(_GtkEditable)),
	("is_editable",		ctypes.c_int),] )

gtk_editable_get_editable = _rpythonic_function_(		"gtk_editable_get_editable", ctypes.c_int, [
	("editable",		ctypes.POINTER(_GtkEditable)),] )

preedit_start = _rpythonic_function_(		"preedit_start", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkIMContext)),] )

preedit_end = _rpythonic_function_(		"preedit_end", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkIMContext)),] )

preedit_changed = _rpythonic_function_(		"preedit_changed", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkIMContext)),] )

commit = _rpythonic_function_(		"commit", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkIMContext)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

retrieve_surrounding = _rpythonic_function_(		"retrieve_surrounding", ctypes.c_int, [
	("context",		ctypes.POINTER(_GtkIMContext)),] )

delete_surrounding = _rpythonic_function_(		"delete_surrounding", ctypes.c_int, [
	("context",		ctypes.POINTER(_GtkIMContext)),
	("offset",		ctypes.c_int),
	("n_chars",		ctypes.c_int),] )

set_client_window = _rpythonic_function_(		"set_client_window", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkIMContext)),
	("window",		ctypes.POINTER(_GdkWindow)),] )

get_preedit_string = _rpythonic_function_(		"get_preedit_string", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkIMContext)),
	("C_str",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("attrs",		ctypes.POINTER(ctypes.POINTER(_PangoAttrList))),
	("cursor_pos",		ctypes.POINTER(ctypes.c_int)),] )

filter_keypress = _rpythonic_function_(		"filter_keypress", ctypes.c_int, [
	("context",		ctypes.POINTER(_GtkIMContext)),
	("event",		ctypes.POINTER(_GdkEventKey)),] )

focus_in = _rpythonic_function_(		"focus_in", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkIMContext)),] )

focus_out = _rpythonic_function_(		"focus_out", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkIMContext)),] )

set_cursor_location = _rpythonic_function_(		"set_cursor_location", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkIMContext)),
	("area",		ctypes.POINTER(_cairo_rectangle_int)),] )

set_use_preedit = _rpythonic_function_(		"set_use_preedit", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkIMContext)),
	("use_preedit",		ctypes.c_int),] )

set_surrounding = _rpythonic_function_(		"set_surrounding", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkIMContext)),
	("text",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),
	("cursor_index",		ctypes.c_int),] )

get_surrounding = _rpythonic_function_(		"get_surrounding", ctypes.c_int, [
	("context",		ctypes.POINTER(_GtkIMContext)),
	("text",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("cursor_index",		ctypes.POINTER(ctypes.c_int)),] )

gtk_im_context_set_client_window = _rpythonic_function_(		"gtk_im_context_set_client_window", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkIMContext)),
	("window",		ctypes.POINTER(_GdkWindow)),] )

gtk_im_context_get_preedit_string = _rpythonic_function_(		"gtk_im_context_get_preedit_string", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkIMContext)),
	("C_str",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("attrs",		ctypes.POINTER(ctypes.POINTER(_PangoAttrList))),
	("cursor_pos",		ctypes.POINTER(ctypes.c_int)),] )

gtk_im_context_get_type = _rpythonic_function_(		"gtk_im_context_get_type", ctypes.c_uint, [] )

gtk_im_context_filter_keypress = _rpythonic_function_(		"gtk_im_context_filter_keypress", ctypes.c_int, [
	("context",		ctypes.POINTER(_GtkIMContext)),
	("event",		ctypes.POINTER(_GdkEventKey)),] )

gtk_im_context_focus_in = _rpythonic_function_(		"gtk_im_context_focus_in", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkIMContext)),] )

gtk_im_context_focus_out = _rpythonic_function_(		"gtk_im_context_focus_out", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkIMContext)),] )

gtk_im_context_reset = _rpythonic_function_(		"gtk_im_context_reset", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkIMContext)),] )

gtk_im_context_set_cursor_location = _rpythonic_function_(		"gtk_im_context_set_cursor_location", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkIMContext)),
	("area",		ctypes.POINTER(_cairo_rectangle_int)),] )

gtk_im_context_set_use_preedit = _rpythonic_function_(		"gtk_im_context_set_use_preedit", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkIMContext)),
	("use_preedit",		ctypes.c_int),] )

gtk_im_context_set_surrounding = _rpythonic_function_(		"gtk_im_context_set_surrounding", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkIMContext)),
	("text",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),
	("cursor_index",		ctypes.c_int),] )

gtk_im_context_get_surrounding = _rpythonic_function_(		"gtk_im_context_get_surrounding", ctypes.c_int, [
	("context",		ctypes.POINTER(_GtkIMContext)),
	("text",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("cursor_index",		ctypes.POINTER(ctypes.c_int)),] )

gtk_im_context_delete_surrounding = _rpythonic_function_(		"gtk_im_context_delete_surrounding", ctypes.c_int, [
	("context",		ctypes.POINTER(_GtkIMContext)),
	("offset",		ctypes.c_int),
	("n_chars",		ctypes.c_int),] )

inserted_text = _rpythonic_function_(		"inserted_text", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkEntryBuffer)),
	("position",		ctypes.c_uint),
	("chars",		ctypes.POINTER(ctypes.c_char)),
	("n_chars",		ctypes.c_uint),] )

deleted_text = _rpythonic_function_(		"deleted_text", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkEntryBuffer)),
	("position",		ctypes.c_uint),
	("n_chars",		ctypes.c_uint),] )

get_length = _rpythonic_function_(		"get_length", ctypes.c_uint, [
	("buffer",		ctypes.POINTER(_GtkEntryBuffer)),] )

gtk_entry_buffer_new = _rpythonic_function_(		"gtk_entry_buffer_new", ctypes.POINTER(_GtkEntryBuffer), [
	("initial_chars",		ctypes.POINTER(ctypes.c_char)),
	("n_initial_chars",		ctypes.c_int),] )

gtk_entry_buffer_get_bytes = _rpythonic_function_(		"gtk_entry_buffer_get_bytes", ctypes.c_uint, [
	("buffer",		ctypes.POINTER(_GtkEntryBuffer)),] )

gtk_entry_buffer_get_type = _rpythonic_function_(		"gtk_entry_buffer_get_type", ctypes.c_uint, [] )

gtk_entry_buffer_get_length = _rpythonic_function_(		"gtk_entry_buffer_get_length", ctypes.c_uint, [
	("buffer",		ctypes.POINTER(_GtkEntryBuffer)),] )

gtk_entry_buffer_get_text = _rpythonic_function_(		"gtk_entry_buffer_get_text", ctypes.POINTER(ctypes.c_char), [
	("buffer",		ctypes.POINTER(_GtkEntryBuffer)),] )

gtk_entry_buffer_set_text = _rpythonic_function_(		"gtk_entry_buffer_set_text", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkEntryBuffer)),
	("chars",		ctypes.POINTER(ctypes.c_char)),
	("n_chars",		ctypes.c_int),] )

gtk_entry_buffer_set_max_length = _rpythonic_function_(		"gtk_entry_buffer_set_max_length", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkEntryBuffer)),
	("max_length",		ctypes.c_int),] )

gtk_entry_buffer_get_max_length = _rpythonic_function_(		"gtk_entry_buffer_get_max_length", ctypes.c_int, [
	("buffer",		ctypes.POINTER(_GtkEntryBuffer)),] )

gtk_entry_buffer_insert_text = _rpythonic_function_(		"gtk_entry_buffer_insert_text", ctypes.c_uint, [
	("buffer",		ctypes.POINTER(_GtkEntryBuffer)),
	("position",		ctypes.c_uint),
	("chars",		ctypes.POINTER(ctypes.c_char)),
	("n_chars",		ctypes.c_int),] )

gtk_entry_buffer_delete_text = _rpythonic_function_(		"gtk_entry_buffer_delete_text", ctypes.c_uint, [
	("buffer",		ctypes.POINTER(_GtkEntryBuffer)),
	("position",		ctypes.c_uint),
	("n_chars",		ctypes.c_int),] )

gtk_entry_buffer_emit_inserted_text = _rpythonic_function_(		"gtk_entry_buffer_emit_inserted_text", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkEntryBuffer)),
	("position",		ctypes.c_uint),
	("chars",		ctypes.POINTER(ctypes.c_char)),
	("n_chars",		ctypes.c_uint),] )

gtk_entry_buffer_emit_deleted_text = _rpythonic_function_(		"gtk_entry_buffer_emit_deleted_text", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkEntryBuffer)),
	("position",		ctypes.c_uint),
	("n_chars",		ctypes.c_uint),] )

gtk_list_store_get_type = _rpythonic_function_(		"gtk_list_store_get_type", ctypes.c_uint, [] )

gtk_list_store_newv = _rpythonic_function_(		"gtk_list_store_newv", ctypes.POINTER(_GtkListStore), [
	("n_columns",		ctypes.c_int),
	("types",		ctypes.POINTER(ctypes.c_uint)),] )

gtk_list_store_set_column_types = _rpythonic_function_(		"gtk_list_store_set_column_types", ctypes.c_void_p, [
	("list_store",		ctypes.POINTER(_GtkListStore)),
	("n_columns",		ctypes.c_int),
	("types",		ctypes.POINTER(ctypes.c_uint)),] )

gtk_list_store_set_value = _rpythonic_function_(		"gtk_list_store_set_value", ctypes.c_void_p, [
	("list_store",		ctypes.POINTER(_GtkListStore)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("column",		ctypes.c_int),
	("value",		ctypes.POINTER(_GValue)),] )

gtk_list_store_set_valuesv = _rpythonic_function_(		"gtk_list_store_set_valuesv", ctypes.c_void_p, [
	("list_store",		ctypes.POINTER(_GtkListStore)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("columns",		ctypes.POINTER(ctypes.c_int)),
	("values",		ctypes.POINTER(_GValue)),
	("n_values",		ctypes.c_int),] )

gtk_list_store_set_valist = _rpythonic_function_(		"gtk_list_store_set_valist", ctypes.c_void_p, [
	("list_store",		ctypes.POINTER(_GtkListStore)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("var_args",		ctypes.c_char),] )

gtk_list_store_remove = _rpythonic_function_(		"gtk_list_store_remove", ctypes.c_int, [
	("list_store",		ctypes.POINTER(_GtkListStore)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_list_store_insert = _rpythonic_function_(		"gtk_list_store_insert", ctypes.c_void_p, [
	("list_store",		ctypes.POINTER(_GtkListStore)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("position",		ctypes.c_int),] )

gtk_list_store_insert_before = _rpythonic_function_(		"gtk_list_store_insert_before", ctypes.c_void_p, [
	("list_store",		ctypes.POINTER(_GtkListStore)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("sibling",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_list_store_insert_after = _rpythonic_function_(		"gtk_list_store_insert_after", ctypes.c_void_p, [
	("list_store",		ctypes.POINTER(_GtkListStore)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("sibling",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_list_store_insert_with_valuesv = _rpythonic_function_(		"gtk_list_store_insert_with_valuesv", ctypes.c_void_p, [
	("list_store",		ctypes.POINTER(_GtkListStore)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("position",		ctypes.c_int),
	("columns",		ctypes.POINTER(ctypes.c_int)),
	("values",		ctypes.POINTER(_GValue)),
	("n_values",		ctypes.c_int),] )

gtk_list_store_prepend = _rpythonic_function_(		"gtk_list_store_prepend", ctypes.c_void_p, [
	("list_store",		ctypes.POINTER(_GtkListStore)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_list_store_append = _rpythonic_function_(		"gtk_list_store_append", ctypes.c_void_p, [
	("list_store",		ctypes.POINTER(_GtkListStore)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_list_store_clear = _rpythonic_function_(		"gtk_list_store_clear", ctypes.c_void_p, [
	("list_store",		ctypes.POINTER(_GtkListStore)),] )

gtk_list_store_iter_is_valid = _rpythonic_function_(		"gtk_list_store_iter_is_valid", ctypes.c_int, [
	("list_store",		ctypes.POINTER(_GtkListStore)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_list_store_reorder = _rpythonic_function_(		"gtk_list_store_reorder", ctypes.c_void_p, [
	("store",		ctypes.POINTER(_GtkListStore)),
	("new_order",		ctypes.POINTER(ctypes.c_int)),] )

gtk_list_store_swap = _rpythonic_function_(		"gtk_list_store_swap", ctypes.c_void_p, [
	("store",		ctypes.POINTER(_GtkListStore)),
	("a",		ctypes.POINTER(_GtkTreeIter)),
	("b",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_list_store_move_after = _rpythonic_function_(		"gtk_list_store_move_after", ctypes.c_void_p, [
	("store",		ctypes.POINTER(_GtkListStore)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("position",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_list_store_move_before = _rpythonic_function_(		"gtk_list_store_move_before", ctypes.c_void_p, [
	("store",		ctypes.POINTER(_GtkListStore)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("position",		ctypes.POINTER(_GtkTreeIter)),] )

GtkTreeModelFilterVisibleFunc = _rpythonic_function_(		"GtkTreeModelFilterVisibleFunc", ctypes.c_int, [
	("model",		ctypes.POINTER(_GtkTreeModel)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

GtkTreeModelFilterModifyFunc = _rpythonic_function_(		"GtkTreeModelFilterModifyFunc", ctypes.c_void_p, [
	("model",		ctypes.POINTER(_GtkTreeModel)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("value",		ctypes.POINTER(_GValue)),
	("column",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

visible = _rpythonic_function_(		"visible", ctypes.c_int, [
	("C_self",		ctypes.POINTER(_GtkTreeModelFilter)),
	("child_model",		ctypes.POINTER(_GtkTreeModel)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),] )

modify = _rpythonic_function_(		"modify", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_GtkTreeModelFilter)),
	("child_model",		ctypes.POINTER(_GtkTreeModel)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("value",		ctypes.POINTER(_GValue)),
	("column",		ctypes.c_int),] )

gtk_tree_model_filter_get_type = _rpythonic_function_(		"gtk_tree_model_filter_get_type", ctypes.c_uint, [] )

gtk_tree_model_filter_new = _rpythonic_function_(		"gtk_tree_model_filter_new", ctypes.POINTER(_GtkTreeModel), [
	("child_model",		ctypes.POINTER(_GtkTreeModel)),
	("root",		ctypes.POINTER(_GtkTreePath)),] )

gtk_tree_model_filter_set_visible_func = _rpythonic_function_(		"gtk_tree_model_filter_set_visible_func", ctypes.c_void_p, [
	("filter",		ctypes.POINTER(_GtkTreeModelFilter)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GtkTreeModel),ctypes.POINTER(_GtkTreeIter),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

gtk_tree_model_filter_set_modify_func = _rpythonic_function_(		"gtk_tree_model_filter_set_modify_func", ctypes.c_void_p, [
	("filter",		ctypes.POINTER(_GtkTreeModelFilter)),
	("n_columns",		ctypes.c_int),
	("types",		ctypes.POINTER(ctypes.c_uint)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GtkTreeModel),ctypes.POINTER(_GtkTreeIter),ctypes.POINTER(_GValue),ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

gtk_tree_model_filter_set_visible_column = _rpythonic_function_(		"gtk_tree_model_filter_set_visible_column", ctypes.c_void_p, [
	("filter",		ctypes.POINTER(_GtkTreeModelFilter)),
	("column",		ctypes.c_int),] )

gtk_tree_model_filter_get_model = _rpythonic_function_(		"gtk_tree_model_filter_get_model", ctypes.POINTER(_GtkTreeModel), [
	("filter",		ctypes.POINTER(_GtkTreeModelFilter)),] )

gtk_tree_model_filter_convert_child_iter_to_iter = _rpythonic_function_(		"gtk_tree_model_filter_convert_child_iter_to_iter", ctypes.c_int, [
	("filter",		ctypes.POINTER(_GtkTreeModelFilter)),
	("filter_iter",		ctypes.POINTER(_GtkTreeIter)),
	("child_iter",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_tree_model_filter_convert_iter_to_child_iter = _rpythonic_function_(		"gtk_tree_model_filter_convert_iter_to_child_iter", ctypes.c_void_p, [
	("filter",		ctypes.POINTER(_GtkTreeModelFilter)),
	("child_iter",		ctypes.POINTER(_GtkTreeIter)),
	("filter_iter",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_tree_model_filter_convert_child_path_to_path = _rpythonic_function_(		"gtk_tree_model_filter_convert_child_path_to_path", ctypes.POINTER(_GtkTreePath), [
	("filter",		ctypes.POINTER(_GtkTreeModelFilter)),
	("child_path",		ctypes.POINTER(_GtkTreePath)),] )

gtk_tree_model_filter_convert_path_to_child_path = _rpythonic_function_(		"gtk_tree_model_filter_convert_path_to_child_path", ctypes.POINTER(_GtkTreePath), [
	("filter",		ctypes.POINTER(_GtkTreeModelFilter)),
	("filter_path",		ctypes.POINTER(_GtkTreePath)),] )

gtk_tree_model_filter_refilter = _rpythonic_function_(		"gtk_tree_model_filter_refilter", ctypes.c_void_p, [
	("filter",		ctypes.POINTER(_GtkTreeModelFilter)),] )

gtk_tree_model_filter_clear_cache = _rpythonic_function_(		"gtk_tree_model_filter_clear_cache", ctypes.c_void_p, [
	("filter",		ctypes.POINTER(_GtkTreeModelFilter)),] )

GtkEntryCompletionMatchFunc = _rpythonic_function_(		"GtkEntryCompletionMatchFunc", ctypes.c_int, [
	("completion",		ctypes.POINTER(_GtkEntryCompletion)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

match_selected = _rpythonic_function_(		"match_selected", ctypes.c_int, [
	("completion",		ctypes.POINTER(_GtkEntryCompletion)),
	("model",		ctypes.POINTER(_GtkTreeModel)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),] )

action_activated = _rpythonic_function_(		"action_activated", ctypes.c_void_p, [
	("completion",		ctypes.POINTER(_GtkEntryCompletion)),
	("index_",		ctypes.c_int),] )

insert_prefix = _rpythonic_function_(		"insert_prefix", ctypes.c_int, [
	("completion",		ctypes.POINTER(_GtkEntryCompletion)),
	("prefix",		ctypes.POINTER(ctypes.c_char)),] )

cursor_on_match = _rpythonic_function_(		"cursor_on_match", ctypes.c_int, [
	("completion",		ctypes.POINTER(_GtkEntryCompletion)),
	("model",		ctypes.POINTER(_GtkTreeModel)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),] )

_gtk_reserved0 = _rpythonic_function_(		"_gtk_reserved0", ctypes.c_void_p, [] )

gtk_entry_completion_get_type = _rpythonic_function_(		"gtk_entry_completion_get_type", ctypes.c_uint, [] )

gtk_entry_completion_new = _rpythonic_function_(		"gtk_entry_completion_new", ctypes.POINTER(_GtkEntryCompletion), [] )

gtk_entry_completion_new_with_area = _rpythonic_function_(		"gtk_entry_completion_new_with_area", ctypes.POINTER(_GtkEntryCompletion), [
	("area",		ctypes.POINTER(_GtkCellArea)),] )

gtk_entry_completion_get_entry = _rpythonic_function_(		"gtk_entry_completion_get_entry", ctypes.POINTER(_GtkWidget), [
	("completion",		ctypes.POINTER(_GtkEntryCompletion)),] )

gtk_entry_completion_set_model = _rpythonic_function_(		"gtk_entry_completion_set_model", ctypes.c_void_p, [
	("completion",		ctypes.POINTER(_GtkEntryCompletion)),
	("model",		ctypes.POINTER(_GtkTreeModel)),] )

gtk_entry_completion_get_model = _rpythonic_function_(		"gtk_entry_completion_get_model", ctypes.POINTER(_GtkTreeModel), [
	("completion",		ctypes.POINTER(_GtkEntryCompletion)),] )

gtk_entry_completion_set_match_func = _rpythonic_function_(		"gtk_entry_completion_set_match_func", ctypes.c_void_p, [
	("completion",		ctypes.POINTER(_GtkEntryCompletion)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GtkEntryCompletion),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(_GtkTreeIter),ctypes.POINTER(ctypes.c_void_p),)),
	("func_data",		ctypes.POINTER(ctypes.c_void_p)),
	("func_notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

gtk_entry_completion_set_minimum_key_length = _rpythonic_function_(		"gtk_entry_completion_set_minimum_key_length", ctypes.c_void_p, [
	("completion",		ctypes.POINTER(_GtkEntryCompletion)),
	("length",		ctypes.c_int),] )

gtk_entry_completion_get_minimum_key_length = _rpythonic_function_(		"gtk_entry_completion_get_minimum_key_length", ctypes.c_int, [
	("completion",		ctypes.POINTER(_GtkEntryCompletion)),] )

gtk_entry_completion_complete = _rpythonic_function_(		"gtk_entry_completion_complete", ctypes.c_void_p, [
	("completion",		ctypes.POINTER(_GtkEntryCompletion)),] )

gtk_entry_completion_insert_prefix = _rpythonic_function_(		"gtk_entry_completion_insert_prefix", ctypes.c_void_p, [
	("completion",		ctypes.POINTER(_GtkEntryCompletion)),] )

gtk_entry_completion_insert_action_text = _rpythonic_function_(		"gtk_entry_completion_insert_action_text", ctypes.c_void_p, [
	("completion",		ctypes.POINTER(_GtkEntryCompletion)),
	("index_",		ctypes.c_int),
	("text",		ctypes.POINTER(ctypes.c_char)),] )

gtk_entry_completion_insert_action_markup = _rpythonic_function_(		"gtk_entry_completion_insert_action_markup", ctypes.c_void_p, [
	("completion",		ctypes.POINTER(_GtkEntryCompletion)),
	("index_",		ctypes.c_int),
	("markup",		ctypes.POINTER(ctypes.c_char)),] )

gtk_entry_completion_delete_action = _rpythonic_function_(		"gtk_entry_completion_delete_action", ctypes.c_void_p, [
	("completion",		ctypes.POINTER(_GtkEntryCompletion)),
	("index_",		ctypes.c_int),] )

gtk_entry_completion_set_inline_completion = _rpythonic_function_(		"gtk_entry_completion_set_inline_completion", ctypes.c_void_p, [
	("completion",		ctypes.POINTER(_GtkEntryCompletion)),
	("inline_completion",		ctypes.c_int),] )

gtk_entry_completion_get_inline_completion = _rpythonic_function_(		"gtk_entry_completion_get_inline_completion", ctypes.c_int, [
	("completion",		ctypes.POINTER(_GtkEntryCompletion)),] )

gtk_entry_completion_set_inline_selection = _rpythonic_function_(		"gtk_entry_completion_set_inline_selection", ctypes.c_void_p, [
	("completion",		ctypes.POINTER(_GtkEntryCompletion)),
	("inline_selection",		ctypes.c_int),] )

gtk_entry_completion_get_inline_selection = _rpythonic_function_(		"gtk_entry_completion_get_inline_selection", ctypes.c_int, [
	("completion",		ctypes.POINTER(_GtkEntryCompletion)),] )

gtk_entry_completion_set_popup_completion = _rpythonic_function_(		"gtk_entry_completion_set_popup_completion", ctypes.c_void_p, [
	("completion",		ctypes.POINTER(_GtkEntryCompletion)),
	("popup_completion",		ctypes.c_int),] )

gtk_entry_completion_get_popup_completion = _rpythonic_function_(		"gtk_entry_completion_get_popup_completion", ctypes.c_int, [
	("completion",		ctypes.POINTER(_GtkEntryCompletion)),] )

gtk_entry_completion_set_popup_set_width = _rpythonic_function_(		"gtk_entry_completion_set_popup_set_width", ctypes.c_void_p, [
	("completion",		ctypes.POINTER(_GtkEntryCompletion)),
	("popup_set_width",		ctypes.c_int),] )

gtk_entry_completion_get_popup_set_width = _rpythonic_function_(		"gtk_entry_completion_get_popup_set_width", ctypes.c_int, [
	("completion",		ctypes.POINTER(_GtkEntryCompletion)),] )

gtk_entry_completion_set_popup_single_match = _rpythonic_function_(		"gtk_entry_completion_set_popup_single_match", ctypes.c_void_p, [
	("completion",		ctypes.POINTER(_GtkEntryCompletion)),
	("popup_single_match",		ctypes.c_int),] )

gtk_entry_completion_get_popup_single_match = _rpythonic_function_(		"gtk_entry_completion_get_popup_single_match", ctypes.c_int, [
	("completion",		ctypes.POINTER(_GtkEntryCompletion)),] )

gtk_entry_completion_get_completion_prefix = _rpythonic_function_(		"gtk_entry_completion_get_completion_prefix", ctypes.POINTER(ctypes.c_char), [
	("completion",		ctypes.POINTER(_GtkEntryCompletion)),] )

gtk_entry_completion_set_text_column = _rpythonic_function_(		"gtk_entry_completion_set_text_column", ctypes.c_void_p, [
	("completion",		ctypes.POINTER(_GtkEntryCompletion)),
	("column",		ctypes.c_int),] )

gtk_entry_completion_get_text_column = _rpythonic_function_(		"gtk_entry_completion_get_text_column", ctypes.c_int, [
	("completion",		ctypes.POINTER(_GtkEntryCompletion)),] )

gtk_image_get_type = _rpythonic_function_(		"gtk_image_get_type", ctypes.c_uint, [] )

gtk_image_new = _rpythonic_function_(		"gtk_image_new", ctypes.POINTER(_GtkWidget), [] )

gtk_image_new_from_file = _rpythonic_function_(		"gtk_image_new_from_file", ctypes.POINTER(_GtkWidget), [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

gtk_image_new_from_pixbuf = _rpythonic_function_(		"gtk_image_new_from_pixbuf", ctypes.POINTER(_GtkWidget), [
	("pixbuf",		ctypes.POINTER(_GdkPixbuf)),] )

gtk_image_new_from_stock = _rpythonic_function_(		"gtk_image_new_from_stock", ctypes.POINTER(_GtkWidget), [
	("stock_id",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_int),] )

gtk_image_new_from_icon_set = _rpythonic_function_(		"gtk_image_new_from_icon_set", ctypes.POINTER(_GtkWidget), [
	("icon_set",		ctypes.POINTER(_GtkIconSet)),
	("size",		ctypes.c_int),] )

gtk_image_new_from_animation = _rpythonic_function_(		"gtk_image_new_from_animation", ctypes.POINTER(_GtkWidget), [
	("animation",		ctypes.POINTER(_GdkPixbufAnimation)),] )

gtk_image_new_from_icon_name = _rpythonic_function_(		"gtk_image_new_from_icon_name", ctypes.POINTER(_GtkWidget), [
	("icon_name",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_int),] )

gtk_image_new_from_gicon = _rpythonic_function_(		"gtk_image_new_from_gicon", ctypes.POINTER(_GtkWidget), [
	("icon",		ctypes.POINTER(_GIcon)),
	("size",		ctypes.c_int),] )

gtk_image_clear = _rpythonic_function_(		"gtk_image_clear", ctypes.c_void_p, [
	("image",		ctypes.POINTER(_GtkImage)),] )

gtk_image_set_from_file = _rpythonic_function_(		"gtk_image_set_from_file", ctypes.c_void_p, [
	("image",		ctypes.POINTER(_GtkImage)),
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

gtk_image_set_from_pixbuf = _rpythonic_function_(		"gtk_image_set_from_pixbuf", ctypes.c_void_p, [
	("image",		ctypes.POINTER(_GtkImage)),
	("pixbuf",		ctypes.POINTER(_GdkPixbuf)),] )

gtk_image_set_from_stock = _rpythonic_function_(		"gtk_image_set_from_stock", ctypes.c_void_p, [
	("image",		ctypes.POINTER(_GtkImage)),
	("stock_id",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_int),] )

gtk_image_set_from_icon_set = _rpythonic_function_(		"gtk_image_set_from_icon_set", ctypes.c_void_p, [
	("image",		ctypes.POINTER(_GtkImage)),
	("icon_set",		ctypes.POINTER(_GtkIconSet)),
	("size",		ctypes.c_int),] )

gtk_image_set_from_animation = _rpythonic_function_(		"gtk_image_set_from_animation", ctypes.c_void_p, [
	("image",		ctypes.POINTER(_GtkImage)),
	("animation",		ctypes.POINTER(_GdkPixbufAnimation)),] )

gtk_image_set_from_icon_name = _rpythonic_function_(		"gtk_image_set_from_icon_name", ctypes.c_void_p, [
	("image",		ctypes.POINTER(_GtkImage)),
	("icon_name",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_int),] )

gtk_image_set_from_gicon = _rpythonic_function_(		"gtk_image_set_from_gicon", ctypes.c_void_p, [
	("image",		ctypes.POINTER(_GtkImage)),
	("icon",		ctypes.POINTER(_GIcon)),
	("size",		ctypes.c_int),] )

gtk_image_set_pixel_size = _rpythonic_function_(		"gtk_image_set_pixel_size", ctypes.c_void_p, [
	("image",		ctypes.POINTER(_GtkImage)),
	("pixel_size",		ctypes.c_int),] )

gtk_image_get_storage_type = _rpythonic_function_(		"gtk_image_get_storage_type", ctypes.c_int, [
	("image",		ctypes.POINTER(_GtkImage)),] )

gtk_image_get_pixbuf = _rpythonic_function_(		"gtk_image_get_pixbuf", ctypes.POINTER(_GdkPixbuf), [
	("image",		ctypes.POINTER(_GtkImage)),] )

gtk_image_get_stock = _rpythonic_function_(		"gtk_image_get_stock", ctypes.c_void_p, [
	("image",		ctypes.POINTER(_GtkImage)),
	("stock_id",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("size",		ctypes.POINTER(ctypes.c_int)),] )

gtk_image_get_icon_set = _rpythonic_function_(		"gtk_image_get_icon_set", ctypes.c_void_p, [
	("image",		ctypes.POINTER(_GtkImage)),
	("icon_set",		ctypes.POINTER(ctypes.POINTER(_GtkIconSet))),
	("size",		ctypes.POINTER(ctypes.c_int)),] )

gtk_image_get_animation = _rpythonic_function_(		"gtk_image_get_animation", ctypes.POINTER(_GdkPixbufAnimation), [
	("image",		ctypes.POINTER(_GtkImage)),] )

gtk_image_get_icon_name = _rpythonic_function_(		"gtk_image_get_icon_name", ctypes.c_void_p, [
	("image",		ctypes.POINTER(_GtkImage)),
	("icon_name",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("size",		ctypes.POINTER(ctypes.c_int)),] )

gtk_image_get_gicon = _rpythonic_function_(		"gtk_image_get_gicon", ctypes.c_void_p, [
	("image",		ctypes.POINTER(_GtkImage)),
	("gicon",		ctypes.POINTER(ctypes.POINTER(_GIcon))),
	("size",		ctypes.POINTER(ctypes.c_int)),] )

gtk_image_get_pixel_size = _rpythonic_function_(		"gtk_image_get_pixel_size", ctypes.c_int, [
	("image",		ctypes.POINTER(_GtkImage)),] )

insert_at_cursor = _rpythonic_function_(		"insert_at_cursor", ctypes.c_void_p, [
	("entry",		ctypes.POINTER(_GtkEntry)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

delete_from_cursor = _rpythonic_function_(		"delete_from_cursor", ctypes.c_void_p, [
	("entry",		ctypes.POINTER(_GtkEntry)),
	("C_type",		ctypes.c_int),
	("count",		ctypes.c_int),] )

backspace = _rpythonic_function_(		"backspace", ctypes.c_void_p, [
	("entry",		ctypes.POINTER(_GtkEntry)),] )

cut_clipboard = _rpythonic_function_(		"cut_clipboard", ctypes.c_void_p, [
	("entry",		ctypes.POINTER(_GtkEntry)),] )

paste_clipboard = _rpythonic_function_(		"paste_clipboard", ctypes.c_void_p, [
	("entry",		ctypes.POINTER(_GtkEntry)),] )

toggle_overwrite = _rpythonic_function_(		"toggle_overwrite", ctypes.c_void_p, [
	("entry",		ctypes.POINTER(_GtkEntry)),] )

get_text_area_size = _rpythonic_function_(		"get_text_area_size", ctypes.c_void_p, [
	("entry",		ctypes.POINTER(_GtkEntry)),
	("x",		ctypes.POINTER(ctypes.c_int)),
	("y",		ctypes.POINTER(ctypes.c_int)),
	("width",		ctypes.POINTER(ctypes.c_int)),
	("height",		ctypes.POINTER(ctypes.c_int)),] )

gtk_entry_new = _rpythonic_function_(		"gtk_entry_new", ctypes.POINTER(_GtkWidget), [] )

gtk_entry_new_with_buffer = _rpythonic_function_(		"gtk_entry_new_with_buffer", ctypes.POINTER(_GtkWidget), [
	("buffer",		ctypes.POINTER(_GtkEntryBuffer)),] )

gtk_entry_get_type = _rpythonic_function_(		"gtk_entry_get_type", ctypes.c_uint, [] )

gtk_entry_get_buffer = _rpythonic_function_(		"gtk_entry_get_buffer", ctypes.POINTER(_GtkEntryBuffer), [
	("entry",		ctypes.POINTER(_GtkEntry)),] )

gtk_entry_set_buffer = _rpythonic_function_(		"gtk_entry_set_buffer", ctypes.c_void_p, [
	("entry",		ctypes.POINTER(_GtkEntry)),
	("buffer",		ctypes.POINTER(_GtkEntryBuffer)),] )

gtk_entry_get_text_area = _rpythonic_function_(		"gtk_entry_get_text_area", ctypes.c_void_p, [
	("entry",		ctypes.POINTER(_GtkEntry)),
	("text_area",		ctypes.POINTER(_cairo_rectangle_int)),] )

gtk_entry_set_visibility = _rpythonic_function_(		"gtk_entry_set_visibility", ctypes.c_void_p, [
	("entry",		ctypes.POINTER(_GtkEntry)),
	("visible",		ctypes.c_int),] )

gtk_entry_get_visibility = _rpythonic_function_(		"gtk_entry_get_visibility", ctypes.c_int, [
	("entry",		ctypes.POINTER(_GtkEntry)),] )

gtk_entry_set_invisible_char = _rpythonic_function_(		"gtk_entry_set_invisible_char", ctypes.c_void_p, [
	("entry",		ctypes.POINTER(_GtkEntry)),
	("ch",		ctypes.c_uint),] )

gtk_entry_get_invisible_char = _rpythonic_function_(		"gtk_entry_get_invisible_char", ctypes.c_uint, [
	("entry",		ctypes.POINTER(_GtkEntry)),] )

gtk_entry_unset_invisible_char = _rpythonic_function_(		"gtk_entry_unset_invisible_char", ctypes.c_void_p, [
	("entry",		ctypes.POINTER(_GtkEntry)),] )

gtk_entry_set_has_frame = _rpythonic_function_(		"gtk_entry_set_has_frame", ctypes.c_void_p, [
	("entry",		ctypes.POINTER(_GtkEntry)),
	("setting",		ctypes.c_int),] )

gtk_entry_get_has_frame = _rpythonic_function_(		"gtk_entry_get_has_frame", ctypes.c_int, [
	("entry",		ctypes.POINTER(_GtkEntry)),] )

gtk_entry_set_inner_border = _rpythonic_function_(		"gtk_entry_set_inner_border", ctypes.c_void_p, [
	("entry",		ctypes.POINTER(_GtkEntry)),
	("border",		ctypes.POINTER(_GtkBorder)),] )

gtk_entry_get_inner_border = _rpythonic_function_(		"gtk_entry_get_inner_border", ctypes.POINTER(_GtkBorder), [
	("entry",		ctypes.POINTER(_GtkEntry)),] )

gtk_entry_set_overwrite_mode = _rpythonic_function_(		"gtk_entry_set_overwrite_mode", ctypes.c_void_p, [
	("entry",		ctypes.POINTER(_GtkEntry)),
	("overwrite",		ctypes.c_int),] )

gtk_entry_get_overwrite_mode = _rpythonic_function_(		"gtk_entry_get_overwrite_mode", ctypes.c_int, [
	("entry",		ctypes.POINTER(_GtkEntry)),] )

gtk_entry_set_max_length = _rpythonic_function_(		"gtk_entry_set_max_length", ctypes.c_void_p, [
	("entry",		ctypes.POINTER(_GtkEntry)),
	("max",		ctypes.c_int),] )

gtk_entry_get_max_length = _rpythonic_function_(		"gtk_entry_get_max_length", ctypes.c_int, [
	("entry",		ctypes.POINTER(_GtkEntry)),] )

gtk_entry_get_text_length = _rpythonic_function_(		"gtk_entry_get_text_length", ctypes.c_ushort, [
	("entry",		ctypes.POINTER(_GtkEntry)),] )

gtk_entry_set_activates_default = _rpythonic_function_(		"gtk_entry_set_activates_default", ctypes.c_void_p, [
	("entry",		ctypes.POINTER(_GtkEntry)),
	("setting",		ctypes.c_int),] )

gtk_entry_get_activates_default = _rpythonic_function_(		"gtk_entry_get_activates_default", ctypes.c_int, [
	("entry",		ctypes.POINTER(_GtkEntry)),] )

gtk_entry_set_width_chars = _rpythonic_function_(		"gtk_entry_set_width_chars", ctypes.c_void_p, [
	("entry",		ctypes.POINTER(_GtkEntry)),
	("n_chars",		ctypes.c_int),] )

gtk_entry_get_width_chars = _rpythonic_function_(		"gtk_entry_get_width_chars", ctypes.c_int, [
	("entry",		ctypes.POINTER(_GtkEntry)),] )

gtk_entry_set_text = _rpythonic_function_(		"gtk_entry_set_text", ctypes.c_void_p, [
	("entry",		ctypes.POINTER(_GtkEntry)),
	("text",		ctypes.POINTER(ctypes.c_char)),] )

gtk_entry_get_text = _rpythonic_function_(		"gtk_entry_get_text", ctypes.POINTER(ctypes.c_char), [
	("entry",		ctypes.POINTER(_GtkEntry)),] )

gtk_entry_get_layout = _rpythonic_function_(		"gtk_entry_get_layout", ctypes.POINTER(_PangoLayout), [
	("entry",		ctypes.POINTER(_GtkEntry)),] )

gtk_entry_get_layout_offsets = _rpythonic_function_(		"gtk_entry_get_layout_offsets", ctypes.c_void_p, [
	("entry",		ctypes.POINTER(_GtkEntry)),
	("x",		ctypes.POINTER(ctypes.c_int)),
	("y",		ctypes.POINTER(ctypes.c_int)),] )

gtk_entry_set_alignment = _rpythonic_function_(		"gtk_entry_set_alignment", ctypes.c_void_p, [
	("entry",		ctypes.POINTER(_GtkEntry)),
	("xalign",		ctypes.c_float),] )

gtk_entry_get_alignment = _rpythonic_function_(		"gtk_entry_get_alignment", ctypes.c_float, [
	("entry",		ctypes.POINTER(_GtkEntry)),] )

gtk_entry_set_completion = _rpythonic_function_(		"gtk_entry_set_completion", ctypes.c_void_p, [
	("entry",		ctypes.POINTER(_GtkEntry)),
	("completion",		ctypes.POINTER(_GtkEntryCompletion)),] )

gtk_entry_get_completion = _rpythonic_function_(		"gtk_entry_get_completion", ctypes.POINTER(_GtkEntryCompletion), [
	("entry",		ctypes.POINTER(_GtkEntry)),] )

gtk_entry_layout_index_to_text_index = _rpythonic_function_(		"gtk_entry_layout_index_to_text_index", ctypes.c_int, [
	("entry",		ctypes.POINTER(_GtkEntry)),
	("layout_index",		ctypes.c_int),] )

gtk_entry_text_index_to_layout_index = _rpythonic_function_(		"gtk_entry_text_index_to_layout_index", ctypes.c_int, [
	("entry",		ctypes.POINTER(_GtkEntry)),
	("text_index",		ctypes.c_int),] )

gtk_entry_set_cursor_hadjustment = _rpythonic_function_(		"gtk_entry_set_cursor_hadjustment", ctypes.c_void_p, [
	("entry",		ctypes.POINTER(_GtkEntry)),
	("adjustment",		ctypes.POINTER(_GtkAdjustment)),] )

gtk_entry_get_cursor_hadjustment = _rpythonic_function_(		"gtk_entry_get_cursor_hadjustment", ctypes.POINTER(_GtkAdjustment), [
	("entry",		ctypes.POINTER(_GtkEntry)),] )

gtk_entry_set_progress_fraction = _rpythonic_function_(		"gtk_entry_set_progress_fraction", ctypes.c_void_p, [
	("entry",		ctypes.POINTER(_GtkEntry)),
	("fraction",		ctypes.c_double),] )

gtk_entry_get_progress_fraction = _rpythonic_function_(		"gtk_entry_get_progress_fraction", ctypes.c_double, [
	("entry",		ctypes.POINTER(_GtkEntry)),] )

gtk_entry_set_progress_pulse_step = _rpythonic_function_(		"gtk_entry_set_progress_pulse_step", ctypes.c_void_p, [
	("entry",		ctypes.POINTER(_GtkEntry)),
	("fraction",		ctypes.c_double),] )

gtk_entry_get_progress_pulse_step = _rpythonic_function_(		"gtk_entry_get_progress_pulse_step", ctypes.c_double, [
	("entry",		ctypes.POINTER(_GtkEntry)),] )

gtk_entry_progress_pulse = _rpythonic_function_(		"gtk_entry_progress_pulse", ctypes.c_void_p, [
	("entry",		ctypes.POINTER(_GtkEntry)),] )

gtk_entry_get_placeholder_text = _rpythonic_function_(		"gtk_entry_get_placeholder_text", ctypes.POINTER(ctypes.c_char), [
	("entry",		ctypes.POINTER(_GtkEntry)),] )

gtk_entry_set_placeholder_text = _rpythonic_function_(		"gtk_entry_set_placeholder_text", ctypes.c_void_p, [
	("entry",		ctypes.POINTER(_GtkEntry)),
	("text",		ctypes.POINTER(ctypes.c_char)),] )

gtk_entry_set_icon_from_pixbuf = _rpythonic_function_(		"gtk_entry_set_icon_from_pixbuf", ctypes.c_void_p, [
	("entry",		ctypes.POINTER(_GtkEntry)),
	("icon_pos",		ctypes.c_int),
	("pixbuf",		ctypes.POINTER(_GdkPixbuf)),] )

gtk_entry_set_icon_from_stock = _rpythonic_function_(		"gtk_entry_set_icon_from_stock", ctypes.c_void_p, [
	("entry",		ctypes.POINTER(_GtkEntry)),
	("icon_pos",		ctypes.c_int),
	("stock_id",		ctypes.POINTER(ctypes.c_char)),] )

gtk_entry_set_icon_from_icon_name = _rpythonic_function_(		"gtk_entry_set_icon_from_icon_name", ctypes.c_void_p, [
	("entry",		ctypes.POINTER(_GtkEntry)),
	("icon_pos",		ctypes.c_int),
	("icon_name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_entry_set_icon_from_gicon = _rpythonic_function_(		"gtk_entry_set_icon_from_gicon", ctypes.c_void_p, [
	("entry",		ctypes.POINTER(_GtkEntry)),
	("icon_pos",		ctypes.c_int),
	("icon",		ctypes.POINTER(_GIcon)),] )

gtk_entry_get_icon_storage_type = _rpythonic_function_(		"gtk_entry_get_icon_storage_type", ctypes.c_int, [
	("entry",		ctypes.POINTER(_GtkEntry)),
	("icon_pos",		ctypes.c_int),] )

gtk_entry_get_icon_pixbuf = _rpythonic_function_(		"gtk_entry_get_icon_pixbuf", ctypes.POINTER(_GdkPixbuf), [
	("entry",		ctypes.POINTER(_GtkEntry)),
	("icon_pos",		ctypes.c_int),] )

gtk_entry_get_icon_stock = _rpythonic_function_(		"gtk_entry_get_icon_stock", ctypes.POINTER(ctypes.c_char), [
	("entry",		ctypes.POINTER(_GtkEntry)),
	("icon_pos",		ctypes.c_int),] )

gtk_entry_get_icon_name = _rpythonic_function_(		"gtk_entry_get_icon_name", ctypes.POINTER(ctypes.c_char), [
	("entry",		ctypes.POINTER(_GtkEntry)),
	("icon_pos",		ctypes.c_int),] )

gtk_entry_get_icon_gicon = _rpythonic_function_(		"gtk_entry_get_icon_gicon", ctypes.POINTER(_GIcon), [
	("entry",		ctypes.POINTER(_GtkEntry)),
	("icon_pos",		ctypes.c_int),] )

gtk_entry_set_icon_activatable = _rpythonic_function_(		"gtk_entry_set_icon_activatable", ctypes.c_void_p, [
	("entry",		ctypes.POINTER(_GtkEntry)),
	("icon_pos",		ctypes.c_int),
	("activatable",		ctypes.c_int),] )

gtk_entry_get_icon_activatable = _rpythonic_function_(		"gtk_entry_get_icon_activatable", ctypes.c_int, [
	("entry",		ctypes.POINTER(_GtkEntry)),
	("icon_pos",		ctypes.c_int),] )

gtk_entry_set_icon_sensitive = _rpythonic_function_(		"gtk_entry_set_icon_sensitive", ctypes.c_void_p, [
	("entry",		ctypes.POINTER(_GtkEntry)),
	("icon_pos",		ctypes.c_int),
	("sensitive",		ctypes.c_int),] )

gtk_entry_get_icon_sensitive = _rpythonic_function_(		"gtk_entry_get_icon_sensitive", ctypes.c_int, [
	("entry",		ctypes.POINTER(_GtkEntry)),
	("icon_pos",		ctypes.c_int),] )

gtk_entry_get_icon_at_pos = _rpythonic_function_(		"gtk_entry_get_icon_at_pos", ctypes.c_int, [
	("entry",		ctypes.POINTER(_GtkEntry)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

gtk_entry_set_icon_tooltip_text = _rpythonic_function_(		"gtk_entry_set_icon_tooltip_text", ctypes.c_void_p, [
	("entry",		ctypes.POINTER(_GtkEntry)),
	("icon_pos",		ctypes.c_int),
	("tooltip",		ctypes.POINTER(ctypes.c_char)),] )

gtk_entry_get_icon_tooltip_text = _rpythonic_function_(		"gtk_entry_get_icon_tooltip_text", ctypes.POINTER(ctypes.c_char), [
	("entry",		ctypes.POINTER(_GtkEntry)),
	("icon_pos",		ctypes.c_int),] )

gtk_entry_set_icon_tooltip_markup = _rpythonic_function_(		"gtk_entry_set_icon_tooltip_markup", ctypes.c_void_p, [
	("entry",		ctypes.POINTER(_GtkEntry)),
	("icon_pos",		ctypes.c_int),
	("tooltip",		ctypes.POINTER(ctypes.c_char)),] )

gtk_entry_get_icon_tooltip_markup = _rpythonic_function_(		"gtk_entry_get_icon_tooltip_markup", ctypes.POINTER(ctypes.c_char), [
	("entry",		ctypes.POINTER(_GtkEntry)),
	("icon_pos",		ctypes.c_int),] )

gtk_entry_set_icon_drag_source = _rpythonic_function_(		"gtk_entry_set_icon_drag_source", ctypes.c_void_p, [
	("entry",		ctypes.POINTER(_GtkEntry)),
	("icon_pos",		ctypes.c_int),
	("target_list",		ctypes.POINTER(_GtkTargetList)),
	("actions",		ctypes.c_int),] )

gtk_entry_get_current_icon_drag_source = _rpythonic_function_(		"gtk_entry_get_current_icon_drag_source", ctypes.c_int, [
	("entry",		ctypes.POINTER(_GtkEntry)),] )

gtk_entry_get_icon_area = _rpythonic_function_(		"gtk_entry_get_icon_area", ctypes.c_void_p, [
	("entry",		ctypes.POINTER(_GtkEntry)),
	("icon_pos",		ctypes.c_int),
	("icon_area",		ctypes.POINTER(_cairo_rectangle_int)),] )

gtk_entry_im_context_filter_keypress = _rpythonic_function_(		"gtk_entry_im_context_filter_keypress", ctypes.c_int, [
	("entry",		ctypes.POINTER(_GtkEntry)),
	("event",		ctypes.POINTER(_GdkEventKey)),] )

gtk_entry_reset_im_context = _rpythonic_function_(		"gtk_entry_reset_im_context", ctypes.c_void_p, [
	("entry",		ctypes.POINTER(_GtkEntry)),] )

row_activated = _rpythonic_function_(		"row_activated", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("path",		ctypes.POINTER(_GtkTreePath)),
	("column",		ctypes.POINTER(_GtkTreeViewColumn)),] )

test_expand_row = _rpythonic_function_(		"test_expand_row", ctypes.c_int, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("path",		ctypes.POINTER(_GtkTreePath)),] )

test_collapse_row = _rpythonic_function_(		"test_collapse_row", ctypes.c_int, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("path",		ctypes.POINTER(_GtkTreePath)),] )

row_expanded = _rpythonic_function_(		"row_expanded", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("path",		ctypes.POINTER(_GtkTreePath)),] )

row_collapsed = _rpythonic_function_(		"row_collapsed", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("path",		ctypes.POINTER(_GtkTreePath)),] )

columns_changed = _rpythonic_function_(		"columns_changed", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),] )

cursor_changed = _rpythonic_function_(		"cursor_changed", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),] )

select_all = _rpythonic_function_(		"select_all", ctypes.c_int, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),] )

unselect_all = _rpythonic_function_(		"unselect_all", ctypes.c_int, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),] )

select_cursor_row = _rpythonic_function_(		"select_cursor_row", ctypes.c_int, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("start_editing",		ctypes.c_int),] )

toggle_cursor_row = _rpythonic_function_(		"toggle_cursor_row", ctypes.c_int, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),] )

expand_collapse_cursor_row = _rpythonic_function_(		"expand_collapse_cursor_row", ctypes.c_int, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("logical",		ctypes.c_int),
	("expand",		ctypes.c_int),
	("open_all",		ctypes.c_int),] )

select_cursor_parent = _rpythonic_function_(		"select_cursor_parent", ctypes.c_int, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),] )

start_interactive_search = _rpythonic_function_(		"start_interactive_search", ctypes.c_int, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),] )

GtkTreeViewColumnDropFunc = _rpythonic_function_(		"GtkTreeViewColumnDropFunc", ctypes.c_int, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("column",		ctypes.POINTER(_GtkTreeViewColumn)),
	("prev_column",		ctypes.POINTER(_GtkTreeViewColumn)),
	("next_column",		ctypes.POINTER(_GtkTreeViewColumn)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

GtkTreeViewMappingFunc = _rpythonic_function_(		"GtkTreeViewMappingFunc", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("path",		ctypes.POINTER(_GtkTreePath)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GtkTreeViewSearchEqualFunc = _rpythonic_function_(		"GtkTreeViewSearchEqualFunc", ctypes.c_int, [
	("model",		ctypes.POINTER(_GtkTreeModel)),
	("column",		ctypes.c_int),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("search_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GtkTreeViewRowSeparatorFunc = _rpythonic_function_(		"GtkTreeViewRowSeparatorFunc", ctypes.c_int, [
	("model",		ctypes.POINTER(_GtkTreeModel)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

GtkTreeViewSearchPositionFunc = _rpythonic_function_(		"GtkTreeViewSearchPositionFunc", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("search_dialog",		ctypes.POINTER(_GtkWidget)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gtk_tree_view_get_type = _rpythonic_function_(		"gtk_tree_view_get_type", ctypes.c_uint, [] )

gtk_tree_view_new = _rpythonic_function_(		"gtk_tree_view_new", ctypes.POINTER(_GtkWidget), [] )

gtk_tree_view_new_with_model = _rpythonic_function_(		"gtk_tree_view_new_with_model", ctypes.POINTER(_GtkWidget), [
	("model",		ctypes.POINTER(_GtkTreeModel)),] )

gtk_tree_view_get_model = _rpythonic_function_(		"gtk_tree_view_get_model", ctypes.POINTER(_GtkTreeModel), [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),] )

gtk_tree_view_set_model = _rpythonic_function_(		"gtk_tree_view_set_model", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("model",		ctypes.POINTER(_GtkTreeModel)),] )

gtk_tree_view_get_selection = _rpythonic_function_(		"gtk_tree_view_get_selection", ctypes.POINTER(_GtkTreeSelection), [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),] )

gtk_tree_view_get_hadjustment = _rpythonic_function_(		"gtk_tree_view_get_hadjustment", ctypes.POINTER(_GtkAdjustment), [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),] )

gtk_tree_view_set_hadjustment = _rpythonic_function_(		"gtk_tree_view_set_hadjustment", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("adjustment",		ctypes.POINTER(_GtkAdjustment)),] )

gtk_tree_view_get_vadjustment = _rpythonic_function_(		"gtk_tree_view_get_vadjustment", ctypes.POINTER(_GtkAdjustment), [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),] )

gtk_tree_view_set_vadjustment = _rpythonic_function_(		"gtk_tree_view_set_vadjustment", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("adjustment",		ctypes.POINTER(_GtkAdjustment)),] )

gtk_tree_view_get_headers_visible = _rpythonic_function_(		"gtk_tree_view_get_headers_visible", ctypes.c_int, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),] )

gtk_tree_view_set_headers_visible = _rpythonic_function_(		"gtk_tree_view_set_headers_visible", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("headers_visible",		ctypes.c_int),] )

gtk_tree_view_columns_autosize = _rpythonic_function_(		"gtk_tree_view_columns_autosize", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),] )

gtk_tree_view_get_headers_clickable = _rpythonic_function_(		"gtk_tree_view_get_headers_clickable", ctypes.c_int, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),] )

gtk_tree_view_set_headers_clickable = _rpythonic_function_(		"gtk_tree_view_set_headers_clickable", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("setting",		ctypes.c_int),] )

gtk_tree_view_set_rules_hint = _rpythonic_function_(		"gtk_tree_view_set_rules_hint", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("setting",		ctypes.c_int),] )

gtk_tree_view_get_rules_hint = _rpythonic_function_(		"gtk_tree_view_get_rules_hint", ctypes.c_int, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),] )

gtk_tree_view_append_column = _rpythonic_function_(		"gtk_tree_view_append_column", ctypes.c_int, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("column",		ctypes.POINTER(_GtkTreeViewColumn)),] )

gtk_tree_view_remove_column = _rpythonic_function_(		"gtk_tree_view_remove_column", ctypes.c_int, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("column",		ctypes.POINTER(_GtkTreeViewColumn)),] )

gtk_tree_view_insert_column = _rpythonic_function_(		"gtk_tree_view_insert_column", ctypes.c_int, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("column",		ctypes.POINTER(_GtkTreeViewColumn)),
	("position",		ctypes.c_int),] )

gtk_tree_view_insert_column_with_data_func = _rpythonic_function_(		"gtk_tree_view_insert_column_with_data_func", ctypes.c_int, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("position",		ctypes.c_int),
	("title",		ctypes.POINTER(ctypes.c_char)),
	("cell",		ctypes.POINTER(_GtkCellRenderer)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GtkTreeViewColumn),ctypes.POINTER(_GtkCellRenderer),ctypes.POINTER(_GtkTreeModel),ctypes.POINTER(_GtkTreeIter),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("dnotify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

gtk_tree_view_get_column = _rpythonic_function_(		"gtk_tree_view_get_column", ctypes.POINTER(_GtkTreeViewColumn), [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("n",		ctypes.c_int),] )

gtk_tree_view_get_columns = _rpythonic_function_(		"gtk_tree_view_get_columns", ctypes.POINTER(_GList), [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),] )

gtk_tree_view_move_column_after = _rpythonic_function_(		"gtk_tree_view_move_column_after", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("column",		ctypes.POINTER(_GtkTreeViewColumn)),
	("base_column",		ctypes.POINTER(_GtkTreeViewColumn)),] )

gtk_tree_view_set_expander_column = _rpythonic_function_(		"gtk_tree_view_set_expander_column", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("column",		ctypes.POINTER(_GtkTreeViewColumn)),] )

gtk_tree_view_get_expander_column = _rpythonic_function_(		"gtk_tree_view_get_expander_column", ctypes.POINTER(_GtkTreeViewColumn), [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),] )

gtk_tree_view_set_column_drag_function = _rpythonic_function_(		"gtk_tree_view_set_column_drag_function", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GtkTreeView),ctypes.POINTER(_GtkTreeViewColumn),ctypes.POINTER(_GtkTreeViewColumn),ctypes.POINTER(_GtkTreeViewColumn),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

gtk_tree_view_scroll_to_point = _rpythonic_function_(		"gtk_tree_view_scroll_to_point", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("tree_x",		ctypes.c_int),
	("tree_y",		ctypes.c_int),] )

gtk_tree_view_scroll_to_cell = _rpythonic_function_(		"gtk_tree_view_scroll_to_cell", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("path",		ctypes.POINTER(_GtkTreePath)),
	("column",		ctypes.POINTER(_GtkTreeViewColumn)),
	("use_align",		ctypes.c_int),
	("row_align",		ctypes.c_float),
	("col_align",		ctypes.c_float),] )

gtk_tree_view_row_activated = _rpythonic_function_(		"gtk_tree_view_row_activated", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("path",		ctypes.POINTER(_GtkTreePath)),
	("column",		ctypes.POINTER(_GtkTreeViewColumn)),] )

gtk_tree_view_expand_all = _rpythonic_function_(		"gtk_tree_view_expand_all", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),] )

gtk_tree_view_collapse_all = _rpythonic_function_(		"gtk_tree_view_collapse_all", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),] )

gtk_tree_view_expand_to_path = _rpythonic_function_(		"gtk_tree_view_expand_to_path", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("path",		ctypes.POINTER(_GtkTreePath)),] )

gtk_tree_view_expand_row = _rpythonic_function_(		"gtk_tree_view_expand_row", ctypes.c_int, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("path",		ctypes.POINTER(_GtkTreePath)),
	("open_all",		ctypes.c_int),] )

gtk_tree_view_collapse_row = _rpythonic_function_(		"gtk_tree_view_collapse_row", ctypes.c_int, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("path",		ctypes.POINTER(_GtkTreePath)),] )

gtk_tree_view_map_expanded_rows = _rpythonic_function_(		"gtk_tree_view_map_expanded_rows", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GtkTreeView),ctypes.POINTER(_GtkTreePath),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

gtk_tree_view_row_expanded = _rpythonic_function_(		"gtk_tree_view_row_expanded", ctypes.c_int, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("path",		ctypes.POINTER(_GtkTreePath)),] )

gtk_tree_view_set_reorderable = _rpythonic_function_(		"gtk_tree_view_set_reorderable", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("reorderable",		ctypes.c_int),] )

gtk_tree_view_get_reorderable = _rpythonic_function_(		"gtk_tree_view_get_reorderable", ctypes.c_int, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),] )

gtk_tree_view_set_cursor = _rpythonic_function_(		"gtk_tree_view_set_cursor", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("path",		ctypes.POINTER(_GtkTreePath)),
	("focus_column",		ctypes.POINTER(_GtkTreeViewColumn)),
	("start_editing",		ctypes.c_int),] )

gtk_tree_view_set_cursor_on_cell = _rpythonic_function_(		"gtk_tree_view_set_cursor_on_cell", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("path",		ctypes.POINTER(_GtkTreePath)),
	("focus_column",		ctypes.POINTER(_GtkTreeViewColumn)),
	("focus_cell",		ctypes.POINTER(_GtkCellRenderer)),
	("start_editing",		ctypes.c_int),] )

gtk_tree_view_get_cursor = _rpythonic_function_(		"gtk_tree_view_get_cursor", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("path",		ctypes.POINTER(ctypes.POINTER(_GtkTreePath))),
	("focus_column",		ctypes.POINTER(ctypes.POINTER(_GtkTreeViewColumn))),] )

gtk_tree_view_get_bin_window = _rpythonic_function_(		"gtk_tree_view_get_bin_window", ctypes.POINTER(_GdkWindow), [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),] )

gtk_tree_view_get_path_at_pos = _rpythonic_function_(		"gtk_tree_view_get_path_at_pos", ctypes.c_int, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("path",		ctypes.POINTER(ctypes.POINTER(_GtkTreePath))),
	("column",		ctypes.POINTER(ctypes.POINTER(_GtkTreeViewColumn))),
	("cell_x",		ctypes.POINTER(ctypes.c_int)),
	("cell_y",		ctypes.POINTER(ctypes.c_int)),] )

gtk_tree_view_get_cell_area = _rpythonic_function_(		"gtk_tree_view_get_cell_area", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("path",		ctypes.POINTER(_GtkTreePath)),
	("column",		ctypes.POINTER(_GtkTreeViewColumn)),
	("rect",		ctypes.POINTER(_cairo_rectangle_int)),] )

gtk_tree_view_get_background_area = _rpythonic_function_(		"gtk_tree_view_get_background_area", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("path",		ctypes.POINTER(_GtkTreePath)),
	("column",		ctypes.POINTER(_GtkTreeViewColumn)),
	("rect",		ctypes.POINTER(_cairo_rectangle_int)),] )

gtk_tree_view_get_visible_rect = _rpythonic_function_(		"gtk_tree_view_get_visible_rect", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("visible_rect",		ctypes.POINTER(_cairo_rectangle_int)),] )

gtk_tree_view_get_visible_range = _rpythonic_function_(		"gtk_tree_view_get_visible_range", ctypes.c_int, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("start_path",		ctypes.POINTER(ctypes.POINTER(_GtkTreePath))),
	("end_path",		ctypes.POINTER(ctypes.POINTER(_GtkTreePath))),] )

gtk_tree_view_is_blank_at_pos = _rpythonic_function_(		"gtk_tree_view_is_blank_at_pos", ctypes.c_int, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("path",		ctypes.POINTER(ctypes.POINTER(_GtkTreePath))),
	("column",		ctypes.POINTER(ctypes.POINTER(_GtkTreeViewColumn))),
	("cell_x",		ctypes.POINTER(ctypes.c_int)),
	("cell_y",		ctypes.POINTER(ctypes.c_int)),] )

gtk_tree_view_enable_model_drag_source = _rpythonic_function_(		"gtk_tree_view_enable_model_drag_source", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("start_button_mask",		ctypes.c_int),
	("targets",		ctypes.POINTER(_GtkTargetEntry)),
	("n_targets",		ctypes.c_int),
	("actions",		ctypes.c_int),] )

gtk_tree_view_enable_model_drag_dest = _rpythonic_function_(		"gtk_tree_view_enable_model_drag_dest", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("targets",		ctypes.POINTER(_GtkTargetEntry)),
	("n_targets",		ctypes.c_int),
	("actions",		ctypes.c_int),] )

gtk_tree_view_unset_rows_drag_source = _rpythonic_function_(		"gtk_tree_view_unset_rows_drag_source", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),] )

gtk_tree_view_unset_rows_drag_dest = _rpythonic_function_(		"gtk_tree_view_unset_rows_drag_dest", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),] )

gtk_tree_view_set_drag_dest_row = _rpythonic_function_(		"gtk_tree_view_set_drag_dest_row", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("path",		ctypes.POINTER(_GtkTreePath)),
	("pos",		ctypes.c_int),] )

gtk_tree_view_get_drag_dest_row = _rpythonic_function_(		"gtk_tree_view_get_drag_dest_row", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("path",		ctypes.POINTER(ctypes.POINTER(_GtkTreePath))),
	("pos",		ctypes.POINTER(ctypes.c_int)),] )

gtk_tree_view_get_dest_row_at_pos = _rpythonic_function_(		"gtk_tree_view_get_dest_row_at_pos", ctypes.c_int, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("drag_x",		ctypes.c_int),
	("drag_y",		ctypes.c_int),
	("path",		ctypes.POINTER(ctypes.POINTER(_GtkTreePath))),
	("pos",		ctypes.POINTER(ctypes.c_int)),] )

gtk_tree_view_create_row_drag_icon = _rpythonic_function_(		"gtk_tree_view_create_row_drag_icon", ctypes.POINTER(_cairo_surface), [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("path",		ctypes.POINTER(_GtkTreePath)),] )

gtk_tree_view_set_enable_search = _rpythonic_function_(		"gtk_tree_view_set_enable_search", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("enable_search",		ctypes.c_int),] )

gtk_tree_view_get_enable_search = _rpythonic_function_(		"gtk_tree_view_get_enable_search", ctypes.c_int, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),] )

gtk_tree_view_get_search_column = _rpythonic_function_(		"gtk_tree_view_get_search_column", ctypes.c_int, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),] )

gtk_tree_view_set_search_column = _rpythonic_function_(		"gtk_tree_view_set_search_column", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("column",		ctypes.c_int),] )

gtk_tree_view_get_search_equal_func = _rpythonic_function_(		"gtk_tree_view_get_search_equal_func", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GtkTreeModel),ctypes.c_int,ctypes.POINTER(ctypes.c_char),ctypes.POINTER(_GtkTreeIter),ctypes.POINTER(ctypes.c_void_p),), [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),] )

gtk_tree_view_set_search_equal_func = _rpythonic_function_(		"gtk_tree_view_set_search_equal_func", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("search_equal_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GtkTreeModel),ctypes.c_int,ctypes.POINTER(ctypes.c_char),ctypes.POINTER(_GtkTreeIter),ctypes.POINTER(ctypes.c_void_p),)),
	("search_user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("search_destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

gtk_tree_view_get_search_entry = _rpythonic_function_(		"gtk_tree_view_get_search_entry", ctypes.POINTER(_GtkEntry), [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),] )

gtk_tree_view_set_search_entry = _rpythonic_function_(		"gtk_tree_view_set_search_entry", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("entry",		ctypes.POINTER(_GtkEntry)),] )

gtk_tree_view_get_search_position_func = _rpythonic_function_(		"gtk_tree_view_get_search_position_func", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GtkTreeView),ctypes.POINTER(_GtkWidget),ctypes.POINTER(ctypes.c_void_p),), [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),] )

gtk_tree_view_set_search_position_func = _rpythonic_function_(		"gtk_tree_view_set_search_position_func", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GtkTreeView),ctypes.POINTER(_GtkWidget),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

gtk_tree_view_convert_widget_to_tree_coords = _rpythonic_function_(		"gtk_tree_view_convert_widget_to_tree_coords", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("wx",		ctypes.c_int),
	("wy",		ctypes.c_int),
	("tx",		ctypes.POINTER(ctypes.c_int)),
	("ty",		ctypes.POINTER(ctypes.c_int)),] )

gtk_tree_view_convert_tree_to_widget_coords = _rpythonic_function_(		"gtk_tree_view_convert_tree_to_widget_coords", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("tx",		ctypes.c_int),
	("ty",		ctypes.c_int),
	("wx",		ctypes.POINTER(ctypes.c_int)),
	("wy",		ctypes.POINTER(ctypes.c_int)),] )

gtk_tree_view_convert_widget_to_bin_window_coords = _rpythonic_function_(		"gtk_tree_view_convert_widget_to_bin_window_coords", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("wx",		ctypes.c_int),
	("wy",		ctypes.c_int),
	("bx",		ctypes.POINTER(ctypes.c_int)),
	("by",		ctypes.POINTER(ctypes.c_int)),] )

gtk_tree_view_convert_bin_window_to_widget_coords = _rpythonic_function_(		"gtk_tree_view_convert_bin_window_to_widget_coords", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("bx",		ctypes.c_int),
	("by",		ctypes.c_int),
	("wx",		ctypes.POINTER(ctypes.c_int)),
	("wy",		ctypes.POINTER(ctypes.c_int)),] )

gtk_tree_view_convert_tree_to_bin_window_coords = _rpythonic_function_(		"gtk_tree_view_convert_tree_to_bin_window_coords", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("tx",		ctypes.c_int),
	("ty",		ctypes.c_int),
	("bx",		ctypes.POINTER(ctypes.c_int)),
	("by",		ctypes.POINTER(ctypes.c_int)),] )

gtk_tree_view_convert_bin_window_to_tree_coords = _rpythonic_function_(		"gtk_tree_view_convert_bin_window_to_tree_coords", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("bx",		ctypes.c_int),
	("by",		ctypes.c_int),
	("tx",		ctypes.POINTER(ctypes.c_int)),
	("ty",		ctypes.POINTER(ctypes.c_int)),] )

GtkTreeDestroyCountFunc = _rpythonic_function_(		"GtkTreeDestroyCountFunc", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("path",		ctypes.POINTER(_GtkTreePath)),
	("children",		ctypes.c_int),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gtk_tree_view_set_destroy_count_func = _rpythonic_function_(		"gtk_tree_view_set_destroy_count_func", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GtkTreeView),ctypes.POINTER(_GtkTreePath),ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

gtk_tree_view_set_fixed_height_mode = _rpythonic_function_(		"gtk_tree_view_set_fixed_height_mode", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("enable",		ctypes.c_int),] )

gtk_tree_view_get_fixed_height_mode = _rpythonic_function_(		"gtk_tree_view_get_fixed_height_mode", ctypes.c_int, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),] )

gtk_tree_view_set_hover_selection = _rpythonic_function_(		"gtk_tree_view_set_hover_selection", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("hover",		ctypes.c_int),] )

gtk_tree_view_get_hover_selection = _rpythonic_function_(		"gtk_tree_view_get_hover_selection", ctypes.c_int, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),] )

gtk_tree_view_set_hover_expand = _rpythonic_function_(		"gtk_tree_view_set_hover_expand", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("expand",		ctypes.c_int),] )

gtk_tree_view_get_hover_expand = _rpythonic_function_(		"gtk_tree_view_get_hover_expand", ctypes.c_int, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),] )

gtk_tree_view_set_rubber_banding = _rpythonic_function_(		"gtk_tree_view_set_rubber_banding", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("enable",		ctypes.c_int),] )

gtk_tree_view_get_rubber_banding = _rpythonic_function_(		"gtk_tree_view_get_rubber_banding", ctypes.c_int, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),] )

gtk_tree_view_is_rubber_banding_active = _rpythonic_function_(		"gtk_tree_view_is_rubber_banding_active", ctypes.c_int, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),] )

gtk_tree_view_get_row_separator_func = _rpythonic_function_(		"gtk_tree_view_get_row_separator_func", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GtkTreeModel),ctypes.POINTER(_GtkTreeIter),ctypes.POINTER(ctypes.c_void_p),), [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),] )

gtk_tree_view_set_row_separator_func = _rpythonic_function_(		"gtk_tree_view_set_row_separator_func", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GtkTreeModel),ctypes.POINTER(_GtkTreeIter),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

gtk_tree_view_get_grid_lines = _rpythonic_function_(		"gtk_tree_view_get_grid_lines", ctypes.c_int, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),] )

gtk_tree_view_set_grid_lines = _rpythonic_function_(		"gtk_tree_view_set_grid_lines", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("grid_lines",		ctypes.c_int),] )

gtk_tree_view_get_enable_tree_lines = _rpythonic_function_(		"gtk_tree_view_get_enable_tree_lines", ctypes.c_int, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),] )

gtk_tree_view_set_enable_tree_lines = _rpythonic_function_(		"gtk_tree_view_set_enable_tree_lines", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("enabled",		ctypes.c_int),] )

gtk_tree_view_set_show_expanders = _rpythonic_function_(		"gtk_tree_view_set_show_expanders", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("enabled",		ctypes.c_int),] )

gtk_tree_view_get_show_expanders = _rpythonic_function_(		"gtk_tree_view_get_show_expanders", ctypes.c_int, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),] )

gtk_tree_view_set_level_indentation = _rpythonic_function_(		"gtk_tree_view_set_level_indentation", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("indentation",		ctypes.c_int),] )

gtk_tree_view_get_level_indentation = _rpythonic_function_(		"gtk_tree_view_get_level_indentation", ctypes.c_int, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),] )

gtk_tree_view_set_tooltip_row = _rpythonic_function_(		"gtk_tree_view_set_tooltip_row", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("tooltip",		ctypes.POINTER(_GtkTooltip)),
	("path",		ctypes.POINTER(_GtkTreePath)),] )

gtk_tree_view_set_tooltip_cell = _rpythonic_function_(		"gtk_tree_view_set_tooltip_cell", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("tooltip",		ctypes.POINTER(_GtkTooltip)),
	("path",		ctypes.POINTER(_GtkTreePath)),
	("column",		ctypes.POINTER(_GtkTreeViewColumn)),
	("cell",		ctypes.POINTER(_GtkCellRenderer)),] )

gtk_tree_view_get_tooltip_context = _rpythonic_function_(		"gtk_tree_view_get_tooltip_context", ctypes.c_int, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("x",		ctypes.POINTER(ctypes.c_int)),
	("y",		ctypes.POINTER(ctypes.c_int)),
	("keyboard_tip",		ctypes.c_int),
	("model",		ctypes.POINTER(ctypes.POINTER(_GtkTreeModel))),
	("path",		ctypes.POINTER(ctypes.POINTER(_GtkTreePath))),
	("iter",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_tree_view_set_tooltip_column = _rpythonic_function_(		"gtk_tree_view_set_tooltip_column", ctypes.c_void_p, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),
	("column",		ctypes.c_int),] )

gtk_tree_view_get_tooltip_column = _rpythonic_function_(		"gtk_tree_view_get_tooltip_column", ctypes.c_int, [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),] )

gtk_combo_box_get_type = _rpythonic_function_(		"gtk_combo_box_get_type", ctypes.c_uint, [] )

gtk_combo_box_new = _rpythonic_function_(		"gtk_combo_box_new", ctypes.POINTER(_GtkWidget), [] )

gtk_combo_box_new_with_area = _rpythonic_function_(		"gtk_combo_box_new_with_area", ctypes.POINTER(_GtkWidget), [
	("area",		ctypes.POINTER(_GtkCellArea)),] )

gtk_combo_box_new_with_area_and_entry = _rpythonic_function_(		"gtk_combo_box_new_with_area_and_entry", ctypes.POINTER(_GtkWidget), [
	("area",		ctypes.POINTER(_GtkCellArea)),] )

gtk_combo_box_new_with_entry = _rpythonic_function_(		"gtk_combo_box_new_with_entry", ctypes.POINTER(_GtkWidget), [] )

gtk_combo_box_new_with_model = _rpythonic_function_(		"gtk_combo_box_new_with_model", ctypes.POINTER(_GtkWidget), [
	("model",		ctypes.POINTER(_GtkTreeModel)),] )

gtk_combo_box_new_with_model_and_entry = _rpythonic_function_(		"gtk_combo_box_new_with_model_and_entry", ctypes.POINTER(_GtkWidget), [
	("model",		ctypes.POINTER(_GtkTreeModel)),] )

gtk_combo_box_get_wrap_width = _rpythonic_function_(		"gtk_combo_box_get_wrap_width", ctypes.c_int, [
	("combo_box",		ctypes.POINTER(_GtkComboBox)),] )

gtk_combo_box_set_wrap_width = _rpythonic_function_(		"gtk_combo_box_set_wrap_width", ctypes.c_void_p, [
	("combo_box",		ctypes.POINTER(_GtkComboBox)),
	("width",		ctypes.c_int),] )

gtk_combo_box_get_row_span_column = _rpythonic_function_(		"gtk_combo_box_get_row_span_column", ctypes.c_int, [
	("combo_box",		ctypes.POINTER(_GtkComboBox)),] )

gtk_combo_box_set_row_span_column = _rpythonic_function_(		"gtk_combo_box_set_row_span_column", ctypes.c_void_p, [
	("combo_box",		ctypes.POINTER(_GtkComboBox)),
	("row_span",		ctypes.c_int),] )

gtk_combo_box_get_column_span_column = _rpythonic_function_(		"gtk_combo_box_get_column_span_column", ctypes.c_int, [
	("combo_box",		ctypes.POINTER(_GtkComboBox)),] )

gtk_combo_box_set_column_span_column = _rpythonic_function_(		"gtk_combo_box_set_column_span_column", ctypes.c_void_p, [
	("combo_box",		ctypes.POINTER(_GtkComboBox)),
	("column_span",		ctypes.c_int),] )

gtk_combo_box_get_add_tearoffs = _rpythonic_function_(		"gtk_combo_box_get_add_tearoffs", ctypes.c_int, [
	("combo_box",		ctypes.POINTER(_GtkComboBox)),] )

gtk_combo_box_set_add_tearoffs = _rpythonic_function_(		"gtk_combo_box_set_add_tearoffs", ctypes.c_void_p, [
	("combo_box",		ctypes.POINTER(_GtkComboBox)),
	("add_tearoffs",		ctypes.c_int),] )

gtk_combo_box_get_title = _rpythonic_function_(		"gtk_combo_box_get_title", ctypes.POINTER(ctypes.c_char), [
	("combo_box",		ctypes.POINTER(_GtkComboBox)),] )

gtk_combo_box_set_title = _rpythonic_function_(		"gtk_combo_box_set_title", ctypes.c_void_p, [
	("combo_box",		ctypes.POINTER(_GtkComboBox)),
	("title",		ctypes.POINTER(ctypes.c_char)),] )

gtk_combo_box_get_focus_on_click = _rpythonic_function_(		"gtk_combo_box_get_focus_on_click", ctypes.c_int, [
	("combo",		ctypes.POINTER(_GtkComboBox)),] )

gtk_combo_box_set_focus_on_click = _rpythonic_function_(		"gtk_combo_box_set_focus_on_click", ctypes.c_void_p, [
	("combo",		ctypes.POINTER(_GtkComboBox)),
	("focus_on_click",		ctypes.c_int),] )

gtk_combo_box_get_active = _rpythonic_function_(		"gtk_combo_box_get_active", ctypes.c_int, [
	("combo_box",		ctypes.POINTER(_GtkComboBox)),] )

gtk_combo_box_set_active = _rpythonic_function_(		"gtk_combo_box_set_active", ctypes.c_void_p, [
	("combo_box",		ctypes.POINTER(_GtkComboBox)),
	("index_",		ctypes.c_int),] )

gtk_combo_box_get_active_iter = _rpythonic_function_(		"gtk_combo_box_get_active_iter", ctypes.c_int, [
	("combo_box",		ctypes.POINTER(_GtkComboBox)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_combo_box_set_active_iter = _rpythonic_function_(		"gtk_combo_box_set_active_iter", ctypes.c_void_p, [
	("combo_box",		ctypes.POINTER(_GtkComboBox)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_combo_box_set_model = _rpythonic_function_(		"gtk_combo_box_set_model", ctypes.c_void_p, [
	("combo_box",		ctypes.POINTER(_GtkComboBox)),
	("model",		ctypes.POINTER(_GtkTreeModel)),] )

gtk_combo_box_get_model = _rpythonic_function_(		"gtk_combo_box_get_model", ctypes.POINTER(_GtkTreeModel), [
	("combo_box",		ctypes.POINTER(_GtkComboBox)),] )

gtk_combo_box_get_row_separator_func = _rpythonic_function_(		"gtk_combo_box_get_row_separator_func", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GtkTreeModel),ctypes.POINTER(_GtkTreeIter),ctypes.POINTER(ctypes.c_void_p),), [
	("combo_box",		ctypes.POINTER(_GtkComboBox)),] )

gtk_combo_box_set_row_separator_func = _rpythonic_function_(		"gtk_combo_box_set_row_separator_func", ctypes.c_void_p, [
	("combo_box",		ctypes.POINTER(_GtkComboBox)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GtkTreeModel),ctypes.POINTER(_GtkTreeIter),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

gtk_combo_box_set_button_sensitivity = _rpythonic_function_(		"gtk_combo_box_set_button_sensitivity", ctypes.c_void_p, [
	("combo_box",		ctypes.POINTER(_GtkComboBox)),
	("sensitivity",		ctypes.c_int),] )

gtk_combo_box_get_button_sensitivity = _rpythonic_function_(		"gtk_combo_box_get_button_sensitivity", ctypes.c_int, [
	("combo_box",		ctypes.POINTER(_GtkComboBox)),] )

gtk_combo_box_get_has_entry = _rpythonic_function_(		"gtk_combo_box_get_has_entry", ctypes.c_int, [
	("combo_box",		ctypes.POINTER(_GtkComboBox)),] )

gtk_combo_box_set_entry_text_column = _rpythonic_function_(		"gtk_combo_box_set_entry_text_column", ctypes.c_void_p, [
	("combo_box",		ctypes.POINTER(_GtkComboBox)),
	("text_column",		ctypes.c_int),] )

gtk_combo_box_get_entry_text_column = _rpythonic_function_(		"gtk_combo_box_get_entry_text_column", ctypes.c_int, [
	("combo_box",		ctypes.POINTER(_GtkComboBox)),] )

gtk_combo_box_set_popup_fixed_width = _rpythonic_function_(		"gtk_combo_box_set_popup_fixed_width", ctypes.c_void_p, [
	("combo_box",		ctypes.POINTER(_GtkComboBox)),
	("fixed",		ctypes.c_int),] )

gtk_combo_box_get_popup_fixed_width = _rpythonic_function_(		"gtk_combo_box_get_popup_fixed_width", ctypes.c_int, [
	("combo_box",		ctypes.POINTER(_GtkComboBox)),] )

gtk_combo_box_popup = _rpythonic_function_(		"gtk_combo_box_popup", ctypes.c_void_p, [
	("combo_box",		ctypes.POINTER(_GtkComboBox)),] )

gtk_combo_box_popup_for_device = _rpythonic_function_(		"gtk_combo_box_popup_for_device", ctypes.c_void_p, [
	("combo_box",		ctypes.POINTER(_GtkComboBox)),
	("device",		ctypes.POINTER(_GdkDevice)),] )

gtk_combo_box_popdown = _rpythonic_function_(		"gtk_combo_box_popdown", ctypes.c_void_p, [
	("combo_box",		ctypes.POINTER(_GtkComboBox)),] )

gtk_combo_box_get_popup_accessible = _rpythonic_function_(		"gtk_combo_box_get_popup_accessible", ctypes.POINTER(_AtkObject), [
	("combo_box",		ctypes.POINTER(_GtkComboBox)),] )

gtk_combo_box_get_id_column = _rpythonic_function_(		"gtk_combo_box_get_id_column", ctypes.c_int, [
	("combo_box",		ctypes.POINTER(_GtkComboBox)),] )

gtk_combo_box_set_id_column = _rpythonic_function_(		"gtk_combo_box_set_id_column", ctypes.c_void_p, [
	("combo_box",		ctypes.POINTER(_GtkComboBox)),
	("id_column",		ctypes.c_int),] )

gtk_combo_box_get_active_id = _rpythonic_function_(		"gtk_combo_box_get_active_id", ctypes.POINTER(ctypes.c_char), [
	("combo_box",		ctypes.POINTER(_GtkComboBox)),] )

gtk_combo_box_set_active_id = _rpythonic_function_(		"gtk_combo_box_set_active_id", ctypes.c_int, [
	("combo_box",		ctypes.POINTER(_GtkComboBox)),
	("active_id",		ctypes.POINTER(ctypes.c_char)),] )

custom_item_activated = _rpythonic_function_(		"custom_item_activated", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_GtkAppChooserButton)),
	("item_name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_app_chooser_button_get_type = _rpythonic_function_(		"gtk_app_chooser_button_get_type", ctypes.c_uint, [] )

gtk_app_chooser_button_new = _rpythonic_function_(		"gtk_app_chooser_button_new", ctypes.POINTER(_GtkWidget), [
	("content_type",		ctypes.POINTER(ctypes.c_char)),] )

gtk_app_chooser_button_append_separator = _rpythonic_function_(		"gtk_app_chooser_button_append_separator", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_GtkAppChooserButton)),] )

gtk_app_chooser_button_append_custom_item = _rpythonic_function_(		"gtk_app_chooser_button_append_custom_item", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_GtkAppChooserButton)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("label",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.POINTER(_GIcon)),] )

gtk_app_chooser_button_set_active_custom_item = _rpythonic_function_(		"gtk_app_chooser_button_set_active_custom_item", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_GtkAppChooserButton)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_app_chooser_button_set_show_dialog_item = _rpythonic_function_(		"gtk_app_chooser_button_set_show_dialog_item", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_GtkAppChooserButton)),
	("setting",		ctypes.c_int),] )

gtk_app_chooser_button_get_show_dialog_item = _rpythonic_function_(		"gtk_app_chooser_button_get_show_dialog_item", ctypes.c_int, [
	("C_self",		ctypes.POINTER(_GtkAppChooserButton)),] )

gtk_app_chooser_button_set_heading = _rpythonic_function_(		"gtk_app_chooser_button_set_heading", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_GtkAppChooserButton)),
	("heading",		ctypes.POINTER(ctypes.c_char)),] )

gtk_app_chooser_button_get_heading = _rpythonic_function_(		"gtk_app_chooser_button_get_heading", ctypes.POINTER(ctypes.c_char), [
	("C_self",		ctypes.POINTER(_GtkAppChooserButton)),] )

gtk_app_chooser_button_set_show_default_item = _rpythonic_function_(		"gtk_app_chooser_button_set_show_default_item", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_GtkAppChooserButton)),
	("setting",		ctypes.c_int),] )

gtk_app_chooser_button_get_show_default_item = _rpythonic_function_(		"gtk_app_chooser_button_get_show_default_item", ctypes.c_int, [
	("C_self",		ctypes.POINTER(_GtkAppChooserButton)),] )

gtk_arrow_get_type = _rpythonic_function_(		"gtk_arrow_get_type", ctypes.c_uint, [] )

gtk_arrow_new = _rpythonic_function_(		"gtk_arrow_new", ctypes.POINTER(_GtkWidget), [
	("arrow_type",		ctypes.c_int),
	("shadow_type",		ctypes.c_int),] )

gtk_arrow_set = _rpythonic_function_(		"gtk_arrow_set", ctypes.c_void_p, [
	("arrow",		ctypes.POINTER(_GtkArrow)),
	("arrow_type",		ctypes.c_int),
	("shadow_type",		ctypes.c_int),] )

compute_child_allocation = _rpythonic_function_(		"compute_child_allocation", ctypes.c_void_p, [
	("frame",		ctypes.POINTER(_GtkFrame)),
	("allocation",		ctypes.POINTER(_cairo_rectangle_int)),] )

gtk_frame_get_type = _rpythonic_function_(		"gtk_frame_get_type", ctypes.c_uint, [] )

gtk_frame_new = _rpythonic_function_(		"gtk_frame_new", ctypes.POINTER(_GtkWidget), [
	("label",		ctypes.POINTER(ctypes.c_char)),] )

gtk_frame_set_label = _rpythonic_function_(		"gtk_frame_set_label", ctypes.c_void_p, [
	("frame",		ctypes.POINTER(_GtkFrame)),
	("label",		ctypes.POINTER(ctypes.c_char)),] )

gtk_frame_get_label = _rpythonic_function_(		"gtk_frame_get_label", ctypes.POINTER(ctypes.c_char), [
	("frame",		ctypes.POINTER(_GtkFrame)),] )

gtk_frame_set_label_widget = _rpythonic_function_(		"gtk_frame_set_label_widget", ctypes.c_void_p, [
	("frame",		ctypes.POINTER(_GtkFrame)),
	("label_widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_frame_get_label_widget = _rpythonic_function_(		"gtk_frame_get_label_widget", ctypes.POINTER(_GtkWidget), [
	("frame",		ctypes.POINTER(_GtkFrame)),] )

gtk_frame_set_label_align = _rpythonic_function_(		"gtk_frame_set_label_align", ctypes.c_void_p, [
	("frame",		ctypes.POINTER(_GtkFrame)),
	("xalign",		ctypes.c_float),
	("yalign",		ctypes.c_float),] )

gtk_frame_get_label_align = _rpythonic_function_(		"gtk_frame_get_label_align", ctypes.c_void_p, [
	("frame",		ctypes.POINTER(_GtkFrame)),
	("xalign",		ctypes.POINTER(ctypes.c_float)),
	("yalign",		ctypes.POINTER(ctypes.c_float)),] )

gtk_frame_set_shadow_type = _rpythonic_function_(		"gtk_frame_set_shadow_type", ctypes.c_void_p, [
	("frame",		ctypes.POINTER(_GtkFrame)),
	("C_type",		ctypes.c_int),] )

gtk_frame_get_shadow_type = _rpythonic_function_(		"gtk_frame_get_shadow_type", ctypes.c_int, [
	("frame",		ctypes.POINTER(_GtkFrame)),] )

gtk_aspect_frame_get_type = _rpythonic_function_(		"gtk_aspect_frame_get_type", ctypes.c_uint, [] )

gtk_aspect_frame_new = _rpythonic_function_(		"gtk_aspect_frame_new", ctypes.POINTER(_GtkWidget), [
	("label",		ctypes.POINTER(ctypes.c_char)),
	("xalign",		ctypes.c_float),
	("yalign",		ctypes.c_float),
	("ratio",		ctypes.c_float),
	("obey_child",		ctypes.c_int),] )

gtk_aspect_frame_set = _rpythonic_function_(		"gtk_aspect_frame_set", ctypes.c_void_p, [
	("aspect_frame",		ctypes.POINTER(_GtkAspectFrame)),
	("xalign",		ctypes.c_float),
	("yalign",		ctypes.c_float),
	("ratio",		ctypes.c_float),
	("obey_child",		ctypes.c_int),] )

GtkAssistantPageFunc = _rpythonic_function_(		"GtkAssistantPageFunc", ctypes.c_int, [
	("current_page",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

apply = _rpythonic_function_(		"apply", ctypes.c_void_p, [
	("assistant",		ctypes.POINTER(_GtkAssistant)),] )

gtk_assistant_get_type = _rpythonic_function_(		"gtk_assistant_get_type", ctypes.c_uint, [] )

gtk_assistant_new = _rpythonic_function_(		"gtk_assistant_new", ctypes.POINTER(_GtkWidget), [] )

gtk_assistant_next_page = _rpythonic_function_(		"gtk_assistant_next_page", ctypes.c_void_p, [
	("assistant",		ctypes.POINTER(_GtkAssistant)),] )

gtk_assistant_previous_page = _rpythonic_function_(		"gtk_assistant_previous_page", ctypes.c_void_p, [
	("assistant",		ctypes.POINTER(_GtkAssistant)),] )

gtk_assistant_get_current_page = _rpythonic_function_(		"gtk_assistant_get_current_page", ctypes.c_int, [
	("assistant",		ctypes.POINTER(_GtkAssistant)),] )

gtk_assistant_set_current_page = _rpythonic_function_(		"gtk_assistant_set_current_page", ctypes.c_void_p, [
	("assistant",		ctypes.POINTER(_GtkAssistant)),
	("page_num",		ctypes.c_int),] )

gtk_assistant_get_n_pages = _rpythonic_function_(		"gtk_assistant_get_n_pages", ctypes.c_int, [
	("assistant",		ctypes.POINTER(_GtkAssistant)),] )

gtk_assistant_get_nth_page = _rpythonic_function_(		"gtk_assistant_get_nth_page", ctypes.POINTER(_GtkWidget), [
	("assistant",		ctypes.POINTER(_GtkAssistant)),
	("page_num",		ctypes.c_int),] )

gtk_assistant_prepend_page = _rpythonic_function_(		"gtk_assistant_prepend_page", ctypes.c_int, [
	("assistant",		ctypes.POINTER(_GtkAssistant)),
	("page",		ctypes.POINTER(_GtkWidget)),] )

gtk_assistant_append_page = _rpythonic_function_(		"gtk_assistant_append_page", ctypes.c_int, [
	("assistant",		ctypes.POINTER(_GtkAssistant)),
	("page",		ctypes.POINTER(_GtkWidget)),] )

gtk_assistant_insert_page = _rpythonic_function_(		"gtk_assistant_insert_page", ctypes.c_int, [
	("assistant",		ctypes.POINTER(_GtkAssistant)),
	("page",		ctypes.POINTER(_GtkWidget)),
	("position",		ctypes.c_int),] )

gtk_assistant_remove_page = _rpythonic_function_(		"gtk_assistant_remove_page", ctypes.c_void_p, [
	("assistant",		ctypes.POINTER(_GtkAssistant)),
	("page_num",		ctypes.c_int),] )

gtk_assistant_set_forward_page_func = _rpythonic_function_(		"gtk_assistant_set_forward_page_func", ctypes.c_void_p, [
	("assistant",		ctypes.POINTER(_GtkAssistant)),
	("page_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

gtk_assistant_set_page_type = _rpythonic_function_(		"gtk_assistant_set_page_type", ctypes.c_void_p, [
	("assistant",		ctypes.POINTER(_GtkAssistant)),
	("page",		ctypes.POINTER(_GtkWidget)),
	("C_type",		ctypes.c_int),] )

gtk_assistant_get_page_type = _rpythonic_function_(		"gtk_assistant_get_page_type", ctypes.c_int, [
	("assistant",		ctypes.POINTER(_GtkAssistant)),
	("page",		ctypes.POINTER(_GtkWidget)),] )

gtk_assistant_set_page_title = _rpythonic_function_(		"gtk_assistant_set_page_title", ctypes.c_void_p, [
	("assistant",		ctypes.POINTER(_GtkAssistant)),
	("page",		ctypes.POINTER(_GtkWidget)),
	("title",		ctypes.POINTER(ctypes.c_char)),] )

gtk_assistant_get_page_title = _rpythonic_function_(		"gtk_assistant_get_page_title", ctypes.POINTER(ctypes.c_char), [
	("assistant",		ctypes.POINTER(_GtkAssistant)),
	("page",		ctypes.POINTER(_GtkWidget)),] )

gtk_assistant_set_page_header_image = _rpythonic_function_(		"gtk_assistant_set_page_header_image", ctypes.c_void_p, [
	("assistant",		ctypes.POINTER(_GtkAssistant)),
	("page",		ctypes.POINTER(_GtkWidget)),
	("pixbuf",		ctypes.POINTER(_GdkPixbuf)),] )

gtk_assistant_get_page_header_image = _rpythonic_function_(		"gtk_assistant_get_page_header_image", ctypes.POINTER(_GdkPixbuf), [
	("assistant",		ctypes.POINTER(_GtkAssistant)),
	("page",		ctypes.POINTER(_GtkWidget)),] )

gtk_assistant_set_page_side_image = _rpythonic_function_(		"gtk_assistant_set_page_side_image", ctypes.c_void_p, [
	("assistant",		ctypes.POINTER(_GtkAssistant)),
	("page",		ctypes.POINTER(_GtkWidget)),
	("pixbuf",		ctypes.POINTER(_GdkPixbuf)),] )

gtk_assistant_get_page_side_image = _rpythonic_function_(		"gtk_assistant_get_page_side_image", ctypes.POINTER(_GdkPixbuf), [
	("assistant",		ctypes.POINTER(_GtkAssistant)),
	("page",		ctypes.POINTER(_GtkWidget)),] )

gtk_assistant_set_page_complete = _rpythonic_function_(		"gtk_assistant_set_page_complete", ctypes.c_void_p, [
	("assistant",		ctypes.POINTER(_GtkAssistant)),
	("page",		ctypes.POINTER(_GtkWidget)),
	("complete",		ctypes.c_int),] )

gtk_assistant_get_page_complete = _rpythonic_function_(		"gtk_assistant_get_page_complete", ctypes.c_int, [
	("assistant",		ctypes.POINTER(_GtkAssistant)),
	("page",		ctypes.POINTER(_GtkWidget)),] )

gtk_assistant_add_action_widget = _rpythonic_function_(		"gtk_assistant_add_action_widget", ctypes.c_void_p, [
	("assistant",		ctypes.POINTER(_GtkAssistant)),
	("child",		ctypes.POINTER(_GtkWidget)),] )

gtk_assistant_remove_action_widget = _rpythonic_function_(		"gtk_assistant_remove_action_widget", ctypes.c_void_p, [
	("assistant",		ctypes.POINTER(_GtkAssistant)),
	("child",		ctypes.POINTER(_GtkWidget)),] )

gtk_assistant_update_buttons_state = _rpythonic_function_(		"gtk_assistant_update_buttons_state", ctypes.c_void_p, [
	("assistant",		ctypes.POINTER(_GtkAssistant)),] )

gtk_assistant_commit = _rpythonic_function_(		"gtk_assistant_commit", ctypes.c_void_p, [
	("assistant",		ctypes.POINTER(_GtkAssistant)),] )

gtk_button_box_get_type = _rpythonic_function_(		"gtk_button_box_get_type", ctypes.c_uint, [] )

gtk_button_box_new = _rpythonic_function_(		"gtk_button_box_new", ctypes.POINTER(_GtkWidget), [
	("orientation",		ctypes.c_int),] )

gtk_button_box_get_layout = _rpythonic_function_(		"gtk_button_box_get_layout", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkButtonBox)),] )

gtk_button_box_set_layout = _rpythonic_function_(		"gtk_button_box_set_layout", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkButtonBox)),
	("layout_style",		ctypes.c_int),] )

gtk_button_box_get_child_secondary = _rpythonic_function_(		"gtk_button_box_get_child_secondary", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkButtonBox)),
	("child",		ctypes.POINTER(_GtkWidget)),] )

gtk_button_box_set_child_secondary = _rpythonic_function_(		"gtk_button_box_set_child_secondary", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkButtonBox)),
	("child",		ctypes.POINTER(_GtkWidget)),
	("is_secondary",		ctypes.c_int),] )

gtk_button_box_get_child_non_homogeneous = _rpythonic_function_(		"gtk_button_box_get_child_non_homogeneous", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkButtonBox)),
	("child",		ctypes.POINTER(_GtkWidget)),] )

gtk_button_box_set_child_non_homogeneous = _rpythonic_function_(		"gtk_button_box_set_child_non_homogeneous", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkButtonBox)),
	("child",		ctypes.POINTER(_GtkWidget)),
	("non_homogeneous",		ctypes.c_int),] )

gtk_binding_set_new = _rpythonic_function_(		"gtk_binding_set_new", ctypes.POINTER(_GtkBindingSet), [
	("set_name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_binding_set_by_class = _rpythonic_function_(		"gtk_binding_set_by_class", ctypes.POINTER(_GtkBindingSet), [("object_class",		ctypes.c_void_p)] )

gtk_binding_set_find = _rpythonic_function_(		"gtk_binding_set_find", ctypes.POINTER(_GtkBindingSet), [
	("set_name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_bindings_activate = _rpythonic_function_(		"gtk_bindings_activate", ctypes.c_int, [
	("C_object",		ctypes.POINTER(_GObject)),
	("keyval",		ctypes.c_uint),
	("modifiers",		ctypes.c_int),] )

gtk_bindings_activate_event = _rpythonic_function_(		"gtk_bindings_activate_event", ctypes.c_int, [
	("C_object",		ctypes.POINTER(_GObject)),
	("event",		ctypes.POINTER(_GdkEventKey)),] )

gtk_binding_set_activate = _rpythonic_function_(		"gtk_binding_set_activate", ctypes.c_int, [
	("binding_set",		ctypes.POINTER(_GtkBindingSet)),
	("keyval",		ctypes.c_uint),
	("modifiers",		ctypes.c_int),
	("C_object",		ctypes.POINTER(_GObject)),] )

gtk_binding_entry_skip = _rpythonic_function_(		"gtk_binding_entry_skip", ctypes.c_void_p, [
	("binding_set",		ctypes.POINTER(_GtkBindingSet)),
	("keyval",		ctypes.c_uint),
	("modifiers",		ctypes.c_int),] )

gtk_binding_entry_add_signall = _rpythonic_function_(		"gtk_binding_entry_add_signall", ctypes.c_void_p, [
	("binding_set",		ctypes.POINTER(_GtkBindingSet)),
	("keyval",		ctypes.c_uint),
	("modifiers",		ctypes.c_int),
	("signal_name",		ctypes.POINTER(ctypes.c_char)),
	("binding_args",		ctypes.POINTER(_GSList)),] )

gtk_binding_entry_add_signal_from_string = _rpythonic_function_(		"gtk_binding_entry_add_signal_from_string", ctypes.c_int, [
	("binding_set",		ctypes.POINTER(_GtkBindingSet)),
	("signal_desc",		ctypes.POINTER(ctypes.c_char)),] )

gtk_binding_entry_remove = _rpythonic_function_(		"gtk_binding_entry_remove", ctypes.c_void_p, [
	("binding_set",		ctypes.POINTER(_GtkBindingSet)),
	("keyval",		ctypes.c_uint),
	("modifiers",		ctypes.c_int),] )

gtk_binding_set_add_path = _rpythonic_function_(		"gtk_binding_set_add_path", ctypes.c_void_p, [
	("binding_set",		ctypes.POINTER(_GtkBindingSet)),
	("path_type",		ctypes.c_int),
	("path_pattern",		ctypes.POINTER(ctypes.c_char)),
	("priority",		ctypes.c_int),] )

gtk_builder_error_quark = _rpythonic_function_(		"gtk_builder_error_quark", ctypes.c_uint, [] )

get_type_from_name = _rpythonic_function_(		"get_type_from_name", ctypes.c_uint, [
	("builder",		ctypes.POINTER(_GtkBuilder)),
	("type_name",		ctypes.POINTER(ctypes.c_char)),] )

GtkBuilderConnectFunc = _rpythonic_function_(		"GtkBuilderConnectFunc", ctypes.c_void_p, [
	("builder",		ctypes.POINTER(_GtkBuilder)),
	("C_object",		ctypes.POINTER(_GObject)),
	("signal_name",		ctypes.POINTER(ctypes.c_char)),
	("handler_name",		ctypes.POINTER(ctypes.c_char)),
	("connect_object",		ctypes.POINTER(_GObject)),
	("flags",		ctypes.c_int),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gtk_builder_get_type = _rpythonic_function_(		"gtk_builder_get_type", ctypes.c_uint, [] )

gtk_builder_new = _rpythonic_function_(		"gtk_builder_new", ctypes.POINTER(_GtkBuilder), [] )

gtk_builder_add_from_file = _rpythonic_function_(		"gtk_builder_add_from_file", ctypes.c_uint, [
	("builder",		ctypes.POINTER(_GtkBuilder)),
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_builder_add_from_string = _rpythonic_function_(		"gtk_builder_add_from_string", ctypes.c_uint, [
	("builder",		ctypes.POINTER(_GtkBuilder)),
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_uint),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_builder_add_objects_from_file = _rpythonic_function_(		"gtk_builder_add_objects_from_file", ctypes.c_uint, [
	("builder",		ctypes.POINTER(_GtkBuilder)),
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("object_ids",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_builder_add_objects_from_string = _rpythonic_function_(		"gtk_builder_add_objects_from_string", ctypes.c_uint, [
	("builder",		ctypes.POINTER(_GtkBuilder)),
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_uint),
	("object_ids",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_builder_get_object = _rpythonic_function_(		"gtk_builder_get_object", ctypes.POINTER(_GObject), [
	("builder",		ctypes.POINTER(_GtkBuilder)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_builder_get_objects = _rpythonic_function_(		"gtk_builder_get_objects", ctypes.POINTER(_GSList), [
	("builder",		ctypes.POINTER(_GtkBuilder)),] )

gtk_builder_connect_signals = _rpythonic_function_(		"gtk_builder_connect_signals", ctypes.c_void_p, [
	("builder",		ctypes.POINTER(_GtkBuilder)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gtk_builder_connect_signals_full = _rpythonic_function_(		"gtk_builder_connect_signals_full", ctypes.c_void_p, [
	("builder",		ctypes.POINTER(_GtkBuilder)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GtkBuilder),ctypes.POINTER(_GObject),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(_GObject),ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gtk_builder_set_translation_domain = _rpythonic_function_(		"gtk_builder_set_translation_domain", ctypes.c_void_p, [
	("builder",		ctypes.POINTER(_GtkBuilder)),
	("domain",		ctypes.POINTER(ctypes.c_char)),] )

gtk_builder_get_translation_domain = _rpythonic_function_(		"gtk_builder_get_translation_domain", ctypes.POINTER(ctypes.c_char), [
	("builder",		ctypes.POINTER(_GtkBuilder)),] )

gtk_builder_get_type_from_name = _rpythonic_function_(		"gtk_builder_get_type_from_name", ctypes.c_uint, [
	("builder",		ctypes.POINTER(_GtkBuilder)),
	("type_name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_builder_value_from_string = _rpythonic_function_(		"gtk_builder_value_from_string", ctypes.c_int, [
	("builder",		ctypes.POINTER(_GtkBuilder)),
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(_GValue)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_builder_value_from_string_type = _rpythonic_function_(		"gtk_builder_value_from_string_type", ctypes.c_int, [
	("builder",		ctypes.POINTER(_GtkBuilder)),
	("C_type",		ctypes.c_uint),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(_GValue)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

add_child = _rpythonic_function_(		"add_child", ctypes.c_void_p, [
	("buildable",		ctypes.POINTER(_GtkBuildable)),
	("builder",		ctypes.POINTER(_GtkBuilder)),
	("child",		ctypes.POINTER(_GObject)),
	("C_type",		ctypes.POINTER(ctypes.c_char)),] )

set_buildable_property = _rpythonic_function_(		"set_buildable_property", ctypes.c_void_p, [
	("buildable",		ctypes.POINTER(_GtkBuildable)),
	("builder",		ctypes.POINTER(_GtkBuilder)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(_GValue)),] )

construct_child = _rpythonic_function_(		"construct_child", ctypes.POINTER(_GObject), [
	("buildable",		ctypes.POINTER(_GtkBuildable)),
	("builder",		ctypes.POINTER(_GtkBuilder)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

custom_tag_start = _rpythonic_function_(		"custom_tag_start", ctypes.c_int, [
	("buildable",		ctypes.POINTER(_GtkBuildable)),
	("builder",		ctypes.POINTER(_GtkBuilder)),
	("child",		ctypes.POINTER(_GObject)),
	("tagname",		ctypes.POINTER(ctypes.c_char)),
	("parser",		ctypes.POINTER(_GMarkupParser)),
	("data",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

custom_tag_end = _rpythonic_function_(		"custom_tag_end", ctypes.c_void_p, [
	("buildable",		ctypes.POINTER(_GtkBuildable)),
	("builder",		ctypes.POINTER(_GtkBuilder)),
	("child",		ctypes.POINTER(_GObject)),
	("tagname",		ctypes.POINTER(ctypes.c_char)),
	("data",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

custom_finished = _rpythonic_function_(		"custom_finished", ctypes.c_void_p, [
	("buildable",		ctypes.POINTER(_GtkBuildable)),
	("builder",		ctypes.POINTER(_GtkBuilder)),
	("child",		ctypes.POINTER(_GObject)),
	("tagname",		ctypes.POINTER(ctypes.c_char)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

parser_finished = _rpythonic_function_(		"parser_finished", ctypes.c_void_p, [
	("buildable",		ctypes.POINTER(_GtkBuildable)),
	("builder",		ctypes.POINTER(_GtkBuilder)),] )

get_internal_child = _rpythonic_function_(		"get_internal_child", ctypes.POINTER(_GObject), [
	("buildable",		ctypes.POINTER(_GtkBuildable)),
	("builder",		ctypes.POINTER(_GtkBuilder)),
	("childname",		ctypes.POINTER(ctypes.c_char)),] )

gtk_buildable_set_name = _rpythonic_function_(		"gtk_buildable_set_name", ctypes.c_void_p, [
	("buildable",		ctypes.POINTER(_GtkBuildable)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_buildable_get_type = _rpythonic_function_(		"gtk_buildable_get_type", ctypes.c_uint, [] )

gtk_buildable_get_name = _rpythonic_function_(		"gtk_buildable_get_name", ctypes.POINTER(ctypes.c_char), [
	("buildable",		ctypes.POINTER(_GtkBuildable)),] )

gtk_buildable_add_child = _rpythonic_function_(		"gtk_buildable_add_child", ctypes.c_void_p, [
	("buildable",		ctypes.POINTER(_GtkBuildable)),
	("builder",		ctypes.POINTER(_GtkBuilder)),
	("child",		ctypes.POINTER(_GObject)),
	("C_type",		ctypes.POINTER(ctypes.c_char)),] )

gtk_buildable_set_buildable_property = _rpythonic_function_(		"gtk_buildable_set_buildable_property", ctypes.c_void_p, [
	("buildable",		ctypes.POINTER(_GtkBuildable)),
	("builder",		ctypes.POINTER(_GtkBuilder)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(_GValue)),] )

gtk_buildable_construct_child = _rpythonic_function_(		"gtk_buildable_construct_child", ctypes.POINTER(_GObject), [
	("buildable",		ctypes.POINTER(_GtkBuildable)),
	("builder",		ctypes.POINTER(_GtkBuilder)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_buildable_custom_tag_start = _rpythonic_function_(		"gtk_buildable_custom_tag_start", ctypes.c_int, [
	("buildable",		ctypes.POINTER(_GtkBuildable)),
	("builder",		ctypes.POINTER(_GtkBuilder)),
	("child",		ctypes.POINTER(_GObject)),
	("tagname",		ctypes.POINTER(ctypes.c_char)),
	("parser",		ctypes.POINTER(_GMarkupParser)),
	("data",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

gtk_buildable_custom_tag_end = _rpythonic_function_(		"gtk_buildable_custom_tag_end", ctypes.c_void_p, [
	("buildable",		ctypes.POINTER(_GtkBuildable)),
	("builder",		ctypes.POINTER(_GtkBuilder)),
	("child",		ctypes.POINTER(_GObject)),
	("tagname",		ctypes.POINTER(ctypes.c_char)),
	("data",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

gtk_buildable_custom_finished = _rpythonic_function_(		"gtk_buildable_custom_finished", ctypes.c_void_p, [
	("buildable",		ctypes.POINTER(_GtkBuildable)),
	("builder",		ctypes.POINTER(_GtkBuilder)),
	("child",		ctypes.POINTER(_GObject)),
	("tagname",		ctypes.POINTER(ctypes.c_char)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

gtk_buildable_parser_finished = _rpythonic_function_(		"gtk_buildable_parser_finished", ctypes.c_void_p, [
	("buildable",		ctypes.POINTER(_GtkBuildable)),
	("builder",		ctypes.POINTER(_GtkBuilder)),] )

gtk_buildable_get_internal_child = _rpythonic_function_(		"gtk_buildable_get_internal_child", ctypes.POINTER(_GObject), [
	("buildable",		ctypes.POINTER(_GtkBuildable)),
	("builder",		ctypes.POINTER(_GtkBuilder)),
	("childname",		ctypes.POINTER(ctypes.c_char)),] )

pressed = _rpythonic_function_(		"pressed", ctypes.c_void_p, [
	("button",		ctypes.POINTER(_GtkButton)),] )

released = _rpythonic_function_(		"released", ctypes.c_void_p, [
	("button",		ctypes.POINTER(_GtkButton)),] )

enter = _rpythonic_function_(		"enter", ctypes.c_void_p, [
	("button",		ctypes.POINTER(_GtkButton)),] )

leave = _rpythonic_function_(		"leave", ctypes.c_void_p, [
	("button",		ctypes.POINTER(_GtkButton)),] )

gtk_button_new = _rpythonic_function_(		"gtk_button_new", ctypes.POINTER(_GtkWidget), [] )

gtk_button_get_type = _rpythonic_function_(		"gtk_button_get_type", ctypes.c_uint, [] )

gtk_button_new_with_label = _rpythonic_function_(		"gtk_button_new_with_label", ctypes.POINTER(_GtkWidget), [
	("label",		ctypes.POINTER(ctypes.c_char)),] )

gtk_button_new_from_stock = _rpythonic_function_(		"gtk_button_new_from_stock", ctypes.POINTER(_GtkWidget), [
	("stock_id",		ctypes.POINTER(ctypes.c_char)),] )

gtk_button_new_with_mnemonic = _rpythonic_function_(		"gtk_button_new_with_mnemonic", ctypes.POINTER(_GtkWidget), [
	("label",		ctypes.POINTER(ctypes.c_char)),] )

gtk_button_pressed = _rpythonic_function_(		"gtk_button_pressed", ctypes.c_void_p, [
	("button",		ctypes.POINTER(_GtkButton)),] )

gtk_button_released = _rpythonic_function_(		"gtk_button_released", ctypes.c_void_p, [
	("button",		ctypes.POINTER(_GtkButton)),] )

gtk_button_clicked = _rpythonic_function_(		"gtk_button_clicked", ctypes.c_void_p, [
	("button",		ctypes.POINTER(_GtkButton)),] )

gtk_button_enter = _rpythonic_function_(		"gtk_button_enter", ctypes.c_void_p, [
	("button",		ctypes.POINTER(_GtkButton)),] )

gtk_button_leave = _rpythonic_function_(		"gtk_button_leave", ctypes.c_void_p, [
	("button",		ctypes.POINTER(_GtkButton)),] )

gtk_button_set_relief = _rpythonic_function_(		"gtk_button_set_relief", ctypes.c_void_p, [
	("button",		ctypes.POINTER(_GtkButton)),
	("newstyle",		ctypes.c_int),] )

gtk_button_get_relief = _rpythonic_function_(		"gtk_button_get_relief", ctypes.c_int, [
	("button",		ctypes.POINTER(_GtkButton)),] )

gtk_button_set_label = _rpythonic_function_(		"gtk_button_set_label", ctypes.c_void_p, [
	("button",		ctypes.POINTER(_GtkButton)),
	("label",		ctypes.POINTER(ctypes.c_char)),] )

gtk_button_get_label = _rpythonic_function_(		"gtk_button_get_label", ctypes.POINTER(ctypes.c_char), [
	("button",		ctypes.POINTER(_GtkButton)),] )

gtk_button_set_use_underline = _rpythonic_function_(		"gtk_button_set_use_underline", ctypes.c_void_p, [
	("button",		ctypes.POINTER(_GtkButton)),
	("use_underline",		ctypes.c_int),] )

gtk_button_get_use_underline = _rpythonic_function_(		"gtk_button_get_use_underline", ctypes.c_int, [
	("button",		ctypes.POINTER(_GtkButton)),] )

gtk_button_set_use_stock = _rpythonic_function_(		"gtk_button_set_use_stock", ctypes.c_void_p, [
	("button",		ctypes.POINTER(_GtkButton)),
	("use_stock",		ctypes.c_int),] )

gtk_button_get_use_stock = _rpythonic_function_(		"gtk_button_get_use_stock", ctypes.c_int, [
	("button",		ctypes.POINTER(_GtkButton)),] )

gtk_button_set_focus_on_click = _rpythonic_function_(		"gtk_button_set_focus_on_click", ctypes.c_void_p, [
	("button",		ctypes.POINTER(_GtkButton)),
	("focus_on_click",		ctypes.c_int),] )

gtk_button_get_focus_on_click = _rpythonic_function_(		"gtk_button_get_focus_on_click", ctypes.c_int, [
	("button",		ctypes.POINTER(_GtkButton)),] )

gtk_button_set_alignment = _rpythonic_function_(		"gtk_button_set_alignment", ctypes.c_void_p, [
	("button",		ctypes.POINTER(_GtkButton)),
	("xalign",		ctypes.c_float),
	("yalign",		ctypes.c_float),] )

gtk_button_get_alignment = _rpythonic_function_(		"gtk_button_get_alignment", ctypes.c_void_p, [
	("button",		ctypes.POINTER(_GtkButton)),
	("xalign",		ctypes.POINTER(ctypes.c_float)),
	("yalign",		ctypes.POINTER(ctypes.c_float)),] )

gtk_button_set_image = _rpythonic_function_(		"gtk_button_set_image", ctypes.c_void_p, [
	("button",		ctypes.POINTER(_GtkButton)),
	("image",		ctypes.POINTER(_GtkWidget)),] )

gtk_button_get_image = _rpythonic_function_(		"gtk_button_get_image", ctypes.POINTER(_GtkWidget), [
	("button",		ctypes.POINTER(_GtkButton)),] )

gtk_button_set_image_position = _rpythonic_function_(		"gtk_button_set_image_position", ctypes.c_void_p, [
	("button",		ctypes.POINTER(_GtkButton)),
	("position",		ctypes.c_int),] )

gtk_button_get_image_position = _rpythonic_function_(		"gtk_button_get_image_position", ctypes.c_int, [
	("button",		ctypes.POINTER(_GtkButton)),] )

gtk_button_get_event_window = _rpythonic_function_(		"gtk_button_get_event_window", ctypes.POINTER(_GdkWindow), [
	("button",		ctypes.POINTER(_GtkButton)),] )

GtkCalendarDetailFunc = _rpythonic_function_(		"GtkCalendarDetailFunc", ctypes.POINTER(ctypes.c_char), [
	("calendar",		ctypes.POINTER(_GtkCalendar)),
	("year",		ctypes.c_uint),
	("month",		ctypes.c_uint),
	("day",		ctypes.c_uint),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

month_changed = _rpythonic_function_(		"month_changed", ctypes.c_void_p, [
	("calendar",		ctypes.POINTER(_GtkCalendar)),] )

day_selected = _rpythonic_function_(		"day_selected", ctypes.c_void_p, [
	("calendar",		ctypes.POINTER(_GtkCalendar)),] )

day_selected_double_click = _rpythonic_function_(		"day_selected_double_click", ctypes.c_void_p, [
	("calendar",		ctypes.POINTER(_GtkCalendar)),] )

prev_month = _rpythonic_function_(		"prev_month", ctypes.c_void_p, [
	("calendar",		ctypes.POINTER(_GtkCalendar)),] )

next_month = _rpythonic_function_(		"next_month", ctypes.c_void_p, [
	("calendar",		ctypes.POINTER(_GtkCalendar)),] )

prev_year = _rpythonic_function_(		"prev_year", ctypes.c_void_p, [
	("calendar",		ctypes.POINTER(_GtkCalendar)),] )

next_year = _rpythonic_function_(		"next_year", ctypes.c_void_p, [
	("calendar",		ctypes.POINTER(_GtkCalendar)),] )

gtk_calendar_get_type = _rpythonic_function_(		"gtk_calendar_get_type", ctypes.c_uint, [] )

gtk_calendar_new = _rpythonic_function_(		"gtk_calendar_new", ctypes.POINTER(_GtkWidget), [] )

gtk_calendar_select_month = _rpythonic_function_(		"gtk_calendar_select_month", ctypes.c_void_p, [
	("calendar",		ctypes.POINTER(_GtkCalendar)),
	("month",		ctypes.c_uint),
	("year",		ctypes.c_uint),] )

gtk_calendar_select_day = _rpythonic_function_(		"gtk_calendar_select_day", ctypes.c_void_p, [
	("calendar",		ctypes.POINTER(_GtkCalendar)),
	("day",		ctypes.c_uint),] )

gtk_calendar_mark_day = _rpythonic_function_(		"gtk_calendar_mark_day", ctypes.c_void_p, [
	("calendar",		ctypes.POINTER(_GtkCalendar)),
	("day",		ctypes.c_uint),] )

gtk_calendar_unmark_day = _rpythonic_function_(		"gtk_calendar_unmark_day", ctypes.c_void_p, [
	("calendar",		ctypes.POINTER(_GtkCalendar)),
	("day",		ctypes.c_uint),] )

gtk_calendar_clear_marks = _rpythonic_function_(		"gtk_calendar_clear_marks", ctypes.c_void_p, [
	("calendar",		ctypes.POINTER(_GtkCalendar)),] )

gtk_calendar_set_display_options = _rpythonic_function_(		"gtk_calendar_set_display_options", ctypes.c_void_p, [
	("calendar",		ctypes.POINTER(_GtkCalendar)),
	("flags",		ctypes.c_int),] )

gtk_calendar_get_display_options = _rpythonic_function_(		"gtk_calendar_get_display_options", ctypes.c_int, [
	("calendar",		ctypes.POINTER(_GtkCalendar)),] )

gtk_calendar_get_date = _rpythonic_function_(		"gtk_calendar_get_date", ctypes.c_void_p, [
	("calendar",		ctypes.POINTER(_GtkCalendar)),
	("year",		ctypes.POINTER(ctypes.c_uint)),
	("month",		ctypes.POINTER(ctypes.c_uint)),
	("day",		ctypes.POINTER(ctypes.c_uint)),] )

gtk_calendar_set_detail_func = _rpythonic_function_(		"gtk_calendar_set_detail_func", ctypes.c_void_p, [
	("calendar",		ctypes.POINTER(_GtkCalendar)),
	("func",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_char), ctypes.POINTER(_GtkCalendar),ctypes.c_uint,ctypes.c_uint,ctypes.c_uint,ctypes.POINTER(ctypes.c_void_p),))),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

gtk_calendar_set_detail_width_chars = _rpythonic_function_(		"gtk_calendar_set_detail_width_chars", ctypes.c_void_p, [
	("calendar",		ctypes.POINTER(_GtkCalendar)),
	("chars",		ctypes.c_int),] )

gtk_calendar_set_detail_height_rows = _rpythonic_function_(		"gtk_calendar_set_detail_height_rows", ctypes.c_void_p, [
	("calendar",		ctypes.POINTER(_GtkCalendar)),
	("rows",		ctypes.c_int),] )

gtk_calendar_get_detail_width_chars = _rpythonic_function_(		"gtk_calendar_get_detail_width_chars", ctypes.c_int, [
	("calendar",		ctypes.POINTER(_GtkCalendar)),] )

gtk_calendar_get_detail_height_rows = _rpythonic_function_(		"gtk_calendar_get_detail_height_rows", ctypes.c_int, [
	("calendar",		ctypes.POINTER(_GtkCalendar)),] )

gtk_calendar_get_day_is_marked = _rpythonic_function_(		"gtk_calendar_get_day_is_marked", ctypes.c_int, [
	("calendar",		ctypes.POINTER(_GtkCalendar)),
	("day",		ctypes.c_uint),] )

gtk_cell_area_box_get_type = _rpythonic_function_(		"gtk_cell_area_box_get_type", ctypes.c_uint, [] )

gtk_cell_area_box_new = _rpythonic_function_(		"gtk_cell_area_box_new", ctypes.POINTER(_GtkCellArea), [] )

gtk_cell_area_box_pack_start = _rpythonic_function_(		"gtk_cell_area_box_pack_start", ctypes.c_void_p, [
	("box",		ctypes.POINTER(_GtkCellAreaBox)),
	("renderer",		ctypes.POINTER(_GtkCellRenderer)),
	("expand",		ctypes.c_int),
	("align",		ctypes.c_int),
	("fixed",		ctypes.c_int),] )

gtk_cell_area_box_pack_end = _rpythonic_function_(		"gtk_cell_area_box_pack_end", ctypes.c_void_p, [
	("box",		ctypes.POINTER(_GtkCellAreaBox)),
	("renderer",		ctypes.POINTER(_GtkCellRenderer)),
	("expand",		ctypes.c_int),
	("align",		ctypes.c_int),
	("fixed",		ctypes.c_int),] )

gtk_cell_area_box_get_spacing = _rpythonic_function_(		"gtk_cell_area_box_get_spacing", ctypes.c_int, [
	("box",		ctypes.POINTER(_GtkCellAreaBox)),] )

gtk_cell_area_box_set_spacing = _rpythonic_function_(		"gtk_cell_area_box_set_spacing", ctypes.c_void_p, [
	("box",		ctypes.POINTER(_GtkCellAreaBox)),
	("spacing",		ctypes.c_int),] )

_gtk_cell_area_box_group_visible = _rpythonic_function_(		"_gtk_cell_area_box_group_visible", ctypes.c_int, [
	("box",		ctypes.POINTER(_GtkCellAreaBox)),
	("group_idx",		ctypes.c_int),] )

allocate = _rpythonic_function_(		"allocate", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkCellAreaContext)),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

gtk_cell_area_context_get_area = _rpythonic_function_(		"gtk_cell_area_context_get_area", ctypes.POINTER(_GtkCellArea), [
	("context",		ctypes.POINTER(_GtkCellAreaContext)),] )

gtk_cell_area_context_get_type = _rpythonic_function_(		"gtk_cell_area_context_get_type", ctypes.c_uint, [] )

gtk_cell_area_context_allocate = _rpythonic_function_(		"gtk_cell_area_context_allocate", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkCellAreaContext)),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

gtk_cell_area_context_reset = _rpythonic_function_(		"gtk_cell_area_context_reset", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkCellAreaContext)),] )

gtk_cell_area_context_get_preferred_width = _rpythonic_function_(		"gtk_cell_area_context_get_preferred_width", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkCellAreaContext)),
	("minimum_width",		ctypes.POINTER(ctypes.c_int)),
	("natural_width",		ctypes.POINTER(ctypes.c_int)),] )

gtk_cell_area_context_get_preferred_height = _rpythonic_function_(		"gtk_cell_area_context_get_preferred_height", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkCellAreaContext)),
	("minimum_height",		ctypes.POINTER(ctypes.c_int)),
	("natural_height",		ctypes.POINTER(ctypes.c_int)),] )

gtk_cell_area_context_get_preferred_height_for_width = _rpythonic_function_(		"gtk_cell_area_context_get_preferred_height_for_width", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkCellAreaContext)),
	("width",		ctypes.c_int),
	("minimum_height",		ctypes.POINTER(ctypes.c_int)),
	("natural_height",		ctypes.POINTER(ctypes.c_int)),] )

gtk_cell_area_context_get_preferred_width_for_height = _rpythonic_function_(		"gtk_cell_area_context_get_preferred_width_for_height", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkCellAreaContext)),
	("height",		ctypes.c_int),
	("minimum_width",		ctypes.POINTER(ctypes.c_int)),
	("natural_width",		ctypes.POINTER(ctypes.c_int)),] )

gtk_cell_area_context_get_allocation = _rpythonic_function_(		"gtk_cell_area_context_get_allocation", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkCellAreaContext)),
	("width",		ctypes.POINTER(ctypes.c_int)),
	("height",		ctypes.POINTER(ctypes.c_int)),] )

gtk_cell_area_context_push_preferred_width = _rpythonic_function_(		"gtk_cell_area_context_push_preferred_width", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkCellAreaContext)),
	("minimum_width",		ctypes.c_int),
	("natural_width",		ctypes.c_int),] )

gtk_cell_area_context_push_preferred_height = _rpythonic_function_(		"gtk_cell_area_context_push_preferred_height", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkCellAreaContext)),
	("minimum_height",		ctypes.c_int),
	("natural_height",		ctypes.c_int),] )

GtkCellLayoutDataFunc = _rpythonic_function_(		"GtkCellLayoutDataFunc", ctypes.c_void_p, [
	("cell_layout",		ctypes.POINTER(_GtkCellLayout)),
	("cell",		ctypes.POINTER(_GtkCellRenderer)),
	("tree_model",		ctypes.POINTER(_GtkTreeModel)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

pack_start = _rpythonic_function_(		"pack_start", ctypes.c_void_p, [
	("cell_layout",		ctypes.POINTER(_GtkCellLayout)),
	("cell",		ctypes.POINTER(_GtkCellRenderer)),
	("expand",		ctypes.c_int),] )

pack_end = _rpythonic_function_(		"pack_end", ctypes.c_void_p, [
	("cell_layout",		ctypes.POINTER(_GtkCellLayout)),
	("cell",		ctypes.POINTER(_GtkCellRenderer)),
	("expand",		ctypes.c_int),] )

clear = _rpythonic_function_(		"clear", ctypes.c_void_p, [
	("cell_layout",		ctypes.POINTER(_GtkCellLayout)),] )

add_attribute = _rpythonic_function_(		"add_attribute", ctypes.c_void_p, [
	("cell_layout",		ctypes.POINTER(_GtkCellLayout)),
	("cell",		ctypes.POINTER(_GtkCellRenderer)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("column",		ctypes.c_int),] )

set_cell_data_func = _rpythonic_function_(		"set_cell_data_func", ctypes.c_void_p, [
	("cell_layout",		ctypes.POINTER(_GtkCellLayout)),
	("cell",		ctypes.POINTER(_GtkCellRenderer)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GtkCellLayout),ctypes.POINTER(_GtkCellRenderer),ctypes.POINTER(_GtkTreeModel),ctypes.POINTER(_GtkTreeIter),ctypes.POINTER(ctypes.c_void_p),)),
	("func_data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

clear_attributes = _rpythonic_function_(		"clear_attributes", ctypes.c_void_p, [
	("cell_layout",		ctypes.POINTER(_GtkCellLayout)),
	("cell",		ctypes.POINTER(_GtkCellRenderer)),] )

reorder = _rpythonic_function_(		"reorder", ctypes.c_void_p, [
	("cell_layout",		ctypes.POINTER(_GtkCellLayout)),
	("cell",		ctypes.POINTER(_GtkCellRenderer)),
	("position",		ctypes.c_int),] )

get_cells = _rpythonic_function_(		"get_cells", ctypes.POINTER(_GList), [
	("cell_layout",		ctypes.POINTER(_GtkCellLayout)),] )

get_area = _rpythonic_function_(		"get_area", ctypes.POINTER(_GtkCellArea), [
	("cell_layout",		ctypes.POINTER(_GtkCellLayout)),] )

gtk_cell_layout_pack_start = _rpythonic_function_(		"gtk_cell_layout_pack_start", ctypes.c_void_p, [
	("cell_layout",		ctypes.POINTER(_GtkCellLayout)),
	("cell",		ctypes.POINTER(_GtkCellRenderer)),
	("expand",		ctypes.c_int),] )

gtk_cell_layout_get_type = _rpythonic_function_(		"gtk_cell_layout_get_type", ctypes.c_uint, [] )

gtk_cell_layout_pack_end = _rpythonic_function_(		"gtk_cell_layout_pack_end", ctypes.c_void_p, [
	("cell_layout",		ctypes.POINTER(_GtkCellLayout)),
	("cell",		ctypes.POINTER(_GtkCellRenderer)),
	("expand",		ctypes.c_int),] )

gtk_cell_layout_get_cells = _rpythonic_function_(		"gtk_cell_layout_get_cells", ctypes.POINTER(_GList), [
	("cell_layout",		ctypes.POINTER(_GtkCellLayout)),] )

gtk_cell_layout_clear = _rpythonic_function_(		"gtk_cell_layout_clear", ctypes.c_void_p, [
	("cell_layout",		ctypes.POINTER(_GtkCellLayout)),] )

gtk_cell_layout_add_attribute = _rpythonic_function_(		"gtk_cell_layout_add_attribute", ctypes.c_void_p, [
	("cell_layout",		ctypes.POINTER(_GtkCellLayout)),
	("cell",		ctypes.POINTER(_GtkCellRenderer)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("column",		ctypes.c_int),] )

gtk_cell_layout_set_cell_data_func = _rpythonic_function_(		"gtk_cell_layout_set_cell_data_func", ctypes.c_void_p, [
	("cell_layout",		ctypes.POINTER(_GtkCellLayout)),
	("cell",		ctypes.POINTER(_GtkCellRenderer)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GtkCellLayout),ctypes.POINTER(_GtkCellRenderer),ctypes.POINTER(_GtkTreeModel),ctypes.POINTER(_GtkTreeIter),ctypes.POINTER(ctypes.c_void_p),)),
	("func_data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

gtk_cell_layout_clear_attributes = _rpythonic_function_(		"gtk_cell_layout_clear_attributes", ctypes.c_void_p, [
	("cell_layout",		ctypes.POINTER(_GtkCellLayout)),
	("cell",		ctypes.POINTER(_GtkCellRenderer)),] )

gtk_cell_layout_reorder = _rpythonic_function_(		"gtk_cell_layout_reorder", ctypes.c_void_p, [
	("cell_layout",		ctypes.POINTER(_GtkCellLayout)),
	("cell",		ctypes.POINTER(_GtkCellRenderer)),
	("position",		ctypes.c_int),] )

gtk_cell_layout_get_area = _rpythonic_function_(		"gtk_cell_layout_get_area", ctypes.POINTER(_GtkCellArea), [
	("cell_layout",		ctypes.POINTER(_GtkCellLayout)),] )

_gtk_cell_layout_buildable_custom_tag_start = _rpythonic_function_(		"_gtk_cell_layout_buildable_custom_tag_start", ctypes.c_int, [
	("buildable",		ctypes.POINTER(_GtkBuildable)),
	("builder",		ctypes.POINTER(_GtkBuilder)),
	("child",		ctypes.POINTER(_GObject)),
	("tagname",		ctypes.POINTER(ctypes.c_char)),
	("parser",		ctypes.POINTER(_GMarkupParser)),
	("data",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

_gtk_cell_layout_buildable_custom_tag_end = _rpythonic_function_(		"_gtk_cell_layout_buildable_custom_tag_end", ctypes.c_int, [
	("buildable",		ctypes.POINTER(_GtkBuildable)),
	("builder",		ctypes.POINTER(_GtkBuilder)),
	("child",		ctypes.POINTER(_GObject)),
	("tagname",		ctypes.POINTER(ctypes.c_char)),
	("data",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

_gtk_cell_layout_buildable_add_child = _rpythonic_function_(		"_gtk_cell_layout_buildable_add_child", ctypes.c_void_p, [
	("buildable",		ctypes.POINTER(_GtkBuildable)),
	("builder",		ctypes.POINTER(_GtkBuilder)),
	("child",		ctypes.POINTER(_GObject)),
	("C_type",		ctypes.POINTER(ctypes.c_char)),] )

edited = _rpythonic_function_(		"edited", ctypes.c_void_p, [
	("cell_renderer_text",		ctypes.POINTER(_GtkCellRendererText)),
	("path",		ctypes.POINTER(ctypes.c_char)),
	("new_text",		ctypes.POINTER(ctypes.c_char)),] )

gtk_cell_renderer_text_get_type = _rpythonic_function_(		"gtk_cell_renderer_text_get_type", ctypes.c_uint, [] )

gtk_cell_renderer_text_new = _rpythonic_function_(		"gtk_cell_renderer_text_new", ctypes.POINTER(_GtkCellRenderer), [] )

gtk_cell_renderer_text_set_fixed_height_from_font = _rpythonic_function_(		"gtk_cell_renderer_text_set_fixed_height_from_font", ctypes.c_void_p, [
	("renderer",		ctypes.POINTER(_GtkCellRendererText)),
	("number_of_rows",		ctypes.c_int),] )

accel_edited = _rpythonic_function_(		"accel_edited", ctypes.c_void_p, [
	("accel",		ctypes.POINTER(_GtkCellRendererAccel)),
	("path_string",		ctypes.POINTER(ctypes.c_char)),
	("accel_key",		ctypes.c_uint),
	("accel_mods",		ctypes.c_int),
	("hardware_keycode",		ctypes.c_uint),] )

accel_cleared = _rpythonic_function_(		"accel_cleared", ctypes.c_void_p, [
	("accel",		ctypes.POINTER(_GtkCellRendererAccel)),
	("path_string",		ctypes.POINTER(ctypes.c_char)),] )

gtk_cell_renderer_accel_get_type = _rpythonic_function_(		"gtk_cell_renderer_accel_get_type", ctypes.c_uint, [] )

gtk_cell_renderer_accel_new = _rpythonic_function_(		"gtk_cell_renderer_accel_new", ctypes.POINTER(_GtkCellRenderer), [] )

gtk_cell_renderer_combo_get_type = _rpythonic_function_(		"gtk_cell_renderer_combo_get_type", ctypes.c_uint, [] )

gtk_cell_renderer_combo_new = _rpythonic_function_(		"gtk_cell_renderer_combo_new", ctypes.POINTER(_GtkCellRenderer), [] )

gtk_cell_renderer_pixbuf_get_type = _rpythonic_function_(		"gtk_cell_renderer_pixbuf_get_type", ctypes.c_uint, [] )

gtk_cell_renderer_pixbuf_new = _rpythonic_function_(		"gtk_cell_renderer_pixbuf_new", ctypes.POINTER(_GtkCellRenderer), [] )

gtk_cell_renderer_progress_get_type = _rpythonic_function_(		"gtk_cell_renderer_progress_get_type", ctypes.c_uint, [] )

gtk_cell_renderer_progress_new = _rpythonic_function_(		"gtk_cell_renderer_progress_new", ctypes.POINTER(_GtkCellRenderer), [] )

gtk_cell_renderer_spin_get_type = _rpythonic_function_(		"gtk_cell_renderer_spin_get_type", ctypes.c_uint, [] )

gtk_cell_renderer_spin_new = _rpythonic_function_(		"gtk_cell_renderer_spin_new", ctypes.POINTER(_GtkCellRenderer), [] )

gtk_cell_renderer_spinner_get_type = _rpythonic_function_(		"gtk_cell_renderer_spinner_get_type", ctypes.c_uint, [] )

gtk_cell_renderer_spinner_new = _rpythonic_function_(		"gtk_cell_renderer_spinner_new", ctypes.POINTER(_GtkCellRenderer), [] )

toggled = _rpythonic_function_(		"toggled", ctypes.c_void_p, [
	("cell_renderer_toggle",		ctypes.POINTER(_GtkCellRendererToggle)),
	("path",		ctypes.POINTER(ctypes.c_char)),] )

gtk_cell_renderer_toggle_get_type = _rpythonic_function_(		"gtk_cell_renderer_toggle_get_type", ctypes.c_uint, [] )

gtk_cell_renderer_toggle_new = _rpythonic_function_(		"gtk_cell_renderer_toggle_new", ctypes.POINTER(_GtkCellRenderer), [] )

gtk_cell_renderer_toggle_get_radio = _rpythonic_function_(		"gtk_cell_renderer_toggle_get_radio", ctypes.c_int, [
	("toggle",		ctypes.POINTER(_GtkCellRendererToggle)),] )

gtk_cell_renderer_toggle_set_radio = _rpythonic_function_(		"gtk_cell_renderer_toggle_set_radio", ctypes.c_void_p, [
	("toggle",		ctypes.POINTER(_GtkCellRendererToggle)),
	("radio",		ctypes.c_int),] )

gtk_cell_renderer_toggle_get_active = _rpythonic_function_(		"gtk_cell_renderer_toggle_get_active", ctypes.c_int, [
	("toggle",		ctypes.POINTER(_GtkCellRendererToggle)),] )

gtk_cell_renderer_toggle_set_active = _rpythonic_function_(		"gtk_cell_renderer_toggle_set_active", ctypes.c_void_p, [
	("toggle",		ctypes.POINTER(_GtkCellRendererToggle)),
	("setting",		ctypes.c_int),] )

gtk_cell_renderer_toggle_get_activatable = _rpythonic_function_(		"gtk_cell_renderer_toggle_get_activatable", ctypes.c_int, [
	("toggle",		ctypes.POINTER(_GtkCellRendererToggle)),] )

gtk_cell_renderer_toggle_set_activatable = _rpythonic_function_(		"gtk_cell_renderer_toggle_set_activatable", ctypes.c_void_p, [
	("toggle",		ctypes.POINTER(_GtkCellRendererToggle)),
	("setting",		ctypes.c_int),] )

gtk_cell_view_get_type = _rpythonic_function_(		"gtk_cell_view_get_type", ctypes.c_uint, [] )

gtk_cell_view_new = _rpythonic_function_(		"gtk_cell_view_new", ctypes.POINTER(_GtkWidget), [] )

gtk_cell_view_new_with_context = _rpythonic_function_(		"gtk_cell_view_new_with_context", ctypes.POINTER(_GtkWidget), [
	("area",		ctypes.POINTER(_GtkCellArea)),
	("context",		ctypes.POINTER(_GtkCellAreaContext)),] )

gtk_cell_view_new_with_text = _rpythonic_function_(		"gtk_cell_view_new_with_text", ctypes.POINTER(_GtkWidget), [
	("text",		ctypes.POINTER(ctypes.c_char)),] )

gtk_cell_view_new_with_markup = _rpythonic_function_(		"gtk_cell_view_new_with_markup", ctypes.POINTER(_GtkWidget), [
	("markup",		ctypes.POINTER(ctypes.c_char)),] )

gtk_cell_view_new_with_pixbuf = _rpythonic_function_(		"gtk_cell_view_new_with_pixbuf", ctypes.POINTER(_GtkWidget), [
	("pixbuf",		ctypes.POINTER(_GdkPixbuf)),] )

gtk_cell_view_set_model = _rpythonic_function_(		"gtk_cell_view_set_model", ctypes.c_void_p, [
	("cell_view",		ctypes.POINTER(_GtkCellView)),
	("model",		ctypes.POINTER(_GtkTreeModel)),] )

gtk_cell_view_get_model = _rpythonic_function_(		"gtk_cell_view_get_model", ctypes.POINTER(_GtkTreeModel), [
	("cell_view",		ctypes.POINTER(_GtkCellView)),] )

gtk_cell_view_set_displayed_row = _rpythonic_function_(		"gtk_cell_view_set_displayed_row", ctypes.c_void_p, [
	("cell_view",		ctypes.POINTER(_GtkCellView)),
	("path",		ctypes.POINTER(_GtkTreePath)),] )

gtk_cell_view_get_displayed_row = _rpythonic_function_(		"gtk_cell_view_get_displayed_row", ctypes.POINTER(_GtkTreePath), [
	("cell_view",		ctypes.POINTER(_GtkCellView)),] )

gtk_cell_view_set_background_color = _rpythonic_function_(		"gtk_cell_view_set_background_color", ctypes.c_void_p, [
	("cell_view",		ctypes.POINTER(_GtkCellView)),
	("color",		ctypes.POINTER(_GdkColor)),] )

gtk_cell_view_set_background_rgba = _rpythonic_function_(		"gtk_cell_view_set_background_rgba", ctypes.c_void_p, [
	("cell_view",		ctypes.POINTER(_GtkCellView)),
	("rgba",		ctypes.POINTER(_GdkRGBA)),] )

gtk_cell_view_get_draw_sensitive = _rpythonic_function_(		"gtk_cell_view_get_draw_sensitive", ctypes.c_int, [
	("cell_view",		ctypes.POINTER(_GtkCellView)),] )

gtk_cell_view_set_draw_sensitive = _rpythonic_function_(		"gtk_cell_view_set_draw_sensitive", ctypes.c_void_p, [
	("cell_view",		ctypes.POINTER(_GtkCellView)),
	("draw_sensitive",		ctypes.c_int),] )

gtk_cell_view_get_fit_model = _rpythonic_function_(		"gtk_cell_view_get_fit_model", ctypes.c_int, [
	("cell_view",		ctypes.POINTER(_GtkCellView)),] )

gtk_cell_view_set_fit_model = _rpythonic_function_(		"gtk_cell_view_set_fit_model", ctypes.c_void_p, [
	("cell_view",		ctypes.POINTER(_GtkCellView)),
	("fit_model",		ctypes.c_int),] )

gtk_cell_view_get_size_of_row = _rpythonic_function_(		"gtk_cell_view_get_size_of_row", ctypes.c_int, [
	("cell_view",		ctypes.POINTER(_GtkCellView)),
	("path",		ctypes.POINTER(_GtkTreePath)),
	("requisition",		ctypes.POINTER(_GtkRequisition)),] )

gtk_toggle_button_get_type = _rpythonic_function_(		"gtk_toggle_button_get_type", ctypes.c_uint, [] )

gtk_toggle_button_new = _rpythonic_function_(		"gtk_toggle_button_new", ctypes.POINTER(_GtkWidget), [] )

gtk_toggle_button_new_with_label = _rpythonic_function_(		"gtk_toggle_button_new_with_label", ctypes.POINTER(_GtkWidget), [
	("label",		ctypes.POINTER(ctypes.c_char)),] )

gtk_toggle_button_new_with_mnemonic = _rpythonic_function_(		"gtk_toggle_button_new_with_mnemonic", ctypes.POINTER(_GtkWidget), [
	("label",		ctypes.POINTER(ctypes.c_char)),] )

gtk_toggle_button_set_mode = _rpythonic_function_(		"gtk_toggle_button_set_mode", ctypes.c_void_p, [
	("toggle_button",		ctypes.POINTER(_GtkToggleButton)),
	("draw_indicator",		ctypes.c_int),] )

gtk_toggle_button_get_mode = _rpythonic_function_(		"gtk_toggle_button_get_mode", ctypes.c_int, [
	("toggle_button",		ctypes.POINTER(_GtkToggleButton)),] )

gtk_toggle_button_set_active = _rpythonic_function_(		"gtk_toggle_button_set_active", ctypes.c_void_p, [
	("toggle_button",		ctypes.POINTER(_GtkToggleButton)),
	("is_active",		ctypes.c_int),] )

gtk_toggle_button_get_active = _rpythonic_function_(		"gtk_toggle_button_get_active", ctypes.c_int, [
	("toggle_button",		ctypes.POINTER(_GtkToggleButton)),] )

gtk_toggle_button_toggled = _rpythonic_function_(		"gtk_toggle_button_toggled", ctypes.c_void_p, [
	("toggle_button",		ctypes.POINTER(_GtkToggleButton)),] )

gtk_toggle_button_set_inconsistent = _rpythonic_function_(		"gtk_toggle_button_set_inconsistent", ctypes.c_void_p, [
	("toggle_button",		ctypes.POINTER(_GtkToggleButton)),
	("setting",		ctypes.c_int),] )

gtk_toggle_button_get_inconsistent = _rpythonic_function_(		"gtk_toggle_button_get_inconsistent", ctypes.c_int, [
	("toggle_button",		ctypes.POINTER(_GtkToggleButton)),] )

_gtk_toggle_button_set_active = _rpythonic_function_(		"_gtk_toggle_button_set_active", ctypes.c_void_p, [
	("toggle_button",		ctypes.POINTER(_GtkToggleButton)),
	("is_active",		ctypes.c_int),] )

draw_indicator = _rpythonic_function_(		"draw_indicator", ctypes.c_void_p, [
	("check_button",		ctypes.POINTER(_GtkCheckButton)),
	("cr",		ctypes.POINTER(_cairo)),] )

gtk_check_button_get_type = _rpythonic_function_(		"gtk_check_button_get_type", ctypes.c_uint, [] )

gtk_check_button_new = _rpythonic_function_(		"gtk_check_button_new", ctypes.POINTER(_GtkWidget), [] )

gtk_check_button_new_with_label = _rpythonic_function_(		"gtk_check_button_new_with_label", ctypes.POINTER(_GtkWidget), [
	("label",		ctypes.POINTER(ctypes.c_char)),] )

gtk_check_button_new_with_mnemonic = _rpythonic_function_(		"gtk_check_button_new_with_mnemonic", ctypes.POINTER(_GtkWidget), [
	("label",		ctypes.POINTER(ctypes.c_char)),] )

_gtk_check_button_get_props = _rpythonic_function_(		"_gtk_check_button_get_props", ctypes.c_void_p, [
	("check_button",		ctypes.POINTER(_GtkCheckButton)),
	("indicator_size",		ctypes.POINTER(ctypes.c_int)),
	("indicator_spacing",		ctypes.POINTER(ctypes.c_int)),] )

activate_item = _rpythonic_function_(		"activate_item", ctypes.c_void_p, [
	("menu_item",		ctypes.POINTER(_GtkMenuItem)),] )

toggle_size_request = _rpythonic_function_(		"toggle_size_request", ctypes.c_void_p, [
	("menu_item",		ctypes.POINTER(_GtkMenuItem)),
	("requisition",		ctypes.POINTER(ctypes.c_int)),] )

toggle_size_allocate = _rpythonic_function_(		"toggle_size_allocate", ctypes.c_void_p, [
	("menu_item",		ctypes.POINTER(_GtkMenuItem)),
	("allocation",		ctypes.c_int),] )

set_label = _rpythonic_function_(		"set_label", ctypes.c_void_p, [
	("menu_item",		ctypes.POINTER(_GtkMenuItem)),
	("label",		ctypes.POINTER(ctypes.c_char)),] )

get_label = _rpythonic_function_(		"get_label", ctypes.POINTER(ctypes.c_char), [
	("menu_item",		ctypes.POINTER(_GtkMenuItem)),] )

deselect = _rpythonic_function_(		"deselect", ctypes.c_void_p, [
	("menu_item",		ctypes.POINTER(_GtkMenuItem)),] )

gtk_menu_item_new = _rpythonic_function_(		"gtk_menu_item_new", ctypes.POINTER(_GtkWidget), [] )

gtk_menu_item_get_type = _rpythonic_function_(		"gtk_menu_item_get_type", ctypes.c_uint, [] )

gtk_menu_item_new_with_label = _rpythonic_function_(		"gtk_menu_item_new_with_label", ctypes.POINTER(_GtkWidget), [
	("label",		ctypes.POINTER(ctypes.c_char)),] )

gtk_menu_item_new_with_mnemonic = _rpythonic_function_(		"gtk_menu_item_new_with_mnemonic", ctypes.POINTER(_GtkWidget), [
	("label",		ctypes.POINTER(ctypes.c_char)),] )

gtk_menu_item_set_submenu = _rpythonic_function_(		"gtk_menu_item_set_submenu", ctypes.c_void_p, [
	("menu_item",		ctypes.POINTER(_GtkMenuItem)),
	("submenu",		ctypes.POINTER(_GtkWidget)),] )

gtk_menu_item_get_submenu = _rpythonic_function_(		"gtk_menu_item_get_submenu", ctypes.POINTER(_GtkWidget), [
	("menu_item",		ctypes.POINTER(_GtkMenuItem)),] )

gtk_menu_item_select = _rpythonic_function_(		"gtk_menu_item_select", ctypes.c_void_p, [
	("menu_item",		ctypes.POINTER(_GtkMenuItem)),] )

gtk_menu_item_deselect = _rpythonic_function_(		"gtk_menu_item_deselect", ctypes.c_void_p, [
	("menu_item",		ctypes.POINTER(_GtkMenuItem)),] )

gtk_menu_item_activate = _rpythonic_function_(		"gtk_menu_item_activate", ctypes.c_void_p, [
	("menu_item",		ctypes.POINTER(_GtkMenuItem)),] )

gtk_menu_item_toggle_size_request = _rpythonic_function_(		"gtk_menu_item_toggle_size_request", ctypes.c_void_p, [
	("menu_item",		ctypes.POINTER(_GtkMenuItem)),
	("requisition",		ctypes.POINTER(ctypes.c_int)),] )

gtk_menu_item_toggle_size_allocate = _rpythonic_function_(		"gtk_menu_item_toggle_size_allocate", ctypes.c_void_p, [
	("menu_item",		ctypes.POINTER(_GtkMenuItem)),
	("allocation",		ctypes.c_int),] )

gtk_menu_item_set_right_justified = _rpythonic_function_(		"gtk_menu_item_set_right_justified", ctypes.c_void_p, [
	("menu_item",		ctypes.POINTER(_GtkMenuItem)),
	("right_justified",		ctypes.c_int),] )

gtk_menu_item_get_right_justified = _rpythonic_function_(		"gtk_menu_item_get_right_justified", ctypes.c_int, [
	("menu_item",		ctypes.POINTER(_GtkMenuItem)),] )

gtk_menu_item_set_accel_path = _rpythonic_function_(		"gtk_menu_item_set_accel_path", ctypes.c_void_p, [
	("menu_item",		ctypes.POINTER(_GtkMenuItem)),
	("accel_path",		ctypes.POINTER(ctypes.c_char)),] )

gtk_menu_item_get_accel_path = _rpythonic_function_(		"gtk_menu_item_get_accel_path", ctypes.POINTER(ctypes.c_char), [
	("menu_item",		ctypes.POINTER(_GtkMenuItem)),] )

gtk_menu_item_set_label = _rpythonic_function_(		"gtk_menu_item_set_label", ctypes.c_void_p, [
	("menu_item",		ctypes.POINTER(_GtkMenuItem)),
	("label",		ctypes.POINTER(ctypes.c_char)),] )

gtk_menu_item_get_label = _rpythonic_function_(		"gtk_menu_item_get_label", ctypes.POINTER(ctypes.c_char), [
	("menu_item",		ctypes.POINTER(_GtkMenuItem)),] )

gtk_menu_item_set_use_underline = _rpythonic_function_(		"gtk_menu_item_set_use_underline", ctypes.c_void_p, [
	("menu_item",		ctypes.POINTER(_GtkMenuItem)),
	("setting",		ctypes.c_int),] )

gtk_menu_item_get_use_underline = _rpythonic_function_(		"gtk_menu_item_get_use_underline", ctypes.c_int, [
	("menu_item",		ctypes.POINTER(_GtkMenuItem)),] )

gtk_menu_item_set_reserve_indicator = _rpythonic_function_(		"gtk_menu_item_set_reserve_indicator", ctypes.c_void_p, [
	("menu_item",		ctypes.POINTER(_GtkMenuItem)),
	("reserve",		ctypes.c_int),] )

gtk_menu_item_get_reserve_indicator = _rpythonic_function_(		"gtk_menu_item_get_reserve_indicator", ctypes.c_int, [
	("menu_item",		ctypes.POINTER(_GtkMenuItem)),] )

gtk_check_menu_item_get_type = _rpythonic_function_(		"gtk_check_menu_item_get_type", ctypes.c_uint, [] )

gtk_check_menu_item_new = _rpythonic_function_(		"gtk_check_menu_item_new", ctypes.POINTER(_GtkWidget), [] )

gtk_check_menu_item_new_with_label = _rpythonic_function_(		"gtk_check_menu_item_new_with_label", ctypes.POINTER(_GtkWidget), [
	("label",		ctypes.POINTER(ctypes.c_char)),] )

gtk_check_menu_item_new_with_mnemonic = _rpythonic_function_(		"gtk_check_menu_item_new_with_mnemonic", ctypes.POINTER(_GtkWidget), [
	("label",		ctypes.POINTER(ctypes.c_char)),] )

gtk_check_menu_item_set_active = _rpythonic_function_(		"gtk_check_menu_item_set_active", ctypes.c_void_p, [
	("check_menu_item",		ctypes.POINTER(_GtkCheckMenuItem)),
	("is_active",		ctypes.c_int),] )

gtk_check_menu_item_get_active = _rpythonic_function_(		"gtk_check_menu_item_get_active", ctypes.c_int, [
	("check_menu_item",		ctypes.POINTER(_GtkCheckMenuItem)),] )

gtk_check_menu_item_toggled = _rpythonic_function_(		"gtk_check_menu_item_toggled", ctypes.c_void_p, [
	("check_menu_item",		ctypes.POINTER(_GtkCheckMenuItem)),] )

gtk_check_menu_item_set_inconsistent = _rpythonic_function_(		"gtk_check_menu_item_set_inconsistent", ctypes.c_void_p, [
	("check_menu_item",		ctypes.POINTER(_GtkCheckMenuItem)),
	("setting",		ctypes.c_int),] )

gtk_check_menu_item_get_inconsistent = _rpythonic_function_(		"gtk_check_menu_item_get_inconsistent", ctypes.c_int, [
	("check_menu_item",		ctypes.POINTER(_GtkCheckMenuItem)),] )

gtk_check_menu_item_set_draw_as_radio = _rpythonic_function_(		"gtk_check_menu_item_set_draw_as_radio", ctypes.c_void_p, [
	("check_menu_item",		ctypes.POINTER(_GtkCheckMenuItem)),
	("draw_as_radio",		ctypes.c_int),] )

gtk_check_menu_item_get_draw_as_radio = _rpythonic_function_(		"gtk_check_menu_item_get_draw_as_radio", ctypes.c_int, [
	("check_menu_item",		ctypes.POINTER(_GtkCheckMenuItem)),] )

_gtk_check_menu_item_set_active = _rpythonic_function_(		"_gtk_check_menu_item_set_active", ctypes.c_void_p, [
	("check_menu_item",		ctypes.POINTER(_GtkCheckMenuItem)),
	("is_active",		ctypes.c_int),] )

GtkClipboardReceivedFunc = _rpythonic_function_(		"GtkClipboardReceivedFunc", ctypes.c_void_p, [
	("clipboard",		ctypes.POINTER(_GtkClipboard)),
	("selection_data",		ctypes.POINTER(_GtkSelectionData)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

GtkClipboardTextReceivedFunc = _rpythonic_function_(		"GtkClipboardTextReceivedFunc", ctypes.c_void_p, [
	("clipboard",		ctypes.POINTER(_GtkClipboard)),
	("text",		ctypes.POINTER(ctypes.c_char)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

GtkClipboardRichTextReceivedFunc = _rpythonic_function_(		"GtkClipboardRichTextReceivedFunc", ctypes.c_void_p, [
	("clipboard",		ctypes.POINTER(_GtkClipboard)),
	("format",		ctypes.POINTER(_GdkAtom)),
	("text",		ctypes.POINTER(ctypes.c_ubyte)),
	("length",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

GtkClipboardImageReceivedFunc = _rpythonic_function_(		"GtkClipboardImageReceivedFunc", ctypes.c_void_p, [
	("clipboard",		ctypes.POINTER(_GtkClipboard)),
	("pixbuf",		ctypes.POINTER(_GdkPixbuf)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

GtkClipboardURIReceivedFunc = _rpythonic_function_(		"GtkClipboardURIReceivedFunc", ctypes.c_void_p, [
	("clipboard",		ctypes.POINTER(_GtkClipboard)),
	("uris",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

GtkClipboardTargetsReceivedFunc = _rpythonic_function_(		"GtkClipboardTargetsReceivedFunc", ctypes.c_void_p, [
	("clipboard",		ctypes.POINTER(_GtkClipboard)),
	("atoms",		ctypes.POINTER(ctypes.POINTER(_GdkAtom))),
	("n_atoms",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

GtkClipboardGetFunc = _rpythonic_function_(		"GtkClipboardGetFunc", ctypes.c_void_p, [
	("clipboard",		ctypes.POINTER(_GtkClipboard)),
	("selection_data",		ctypes.POINTER(_GtkSelectionData)),
	("info",		ctypes.c_uint),
	("user_data_or_owner",		ctypes.POINTER(ctypes.c_void_p)),] )

GtkClipboardClearFunc = _rpythonic_function_(		"GtkClipboardClearFunc", ctypes.c_void_p, [
	("clipboard",		ctypes.POINTER(_GtkClipboard)),
	("user_data_or_owner",		ctypes.POINTER(ctypes.c_void_p)),] )

gtk_clipboard_get_type = _rpythonic_function_(		"gtk_clipboard_get_type", ctypes.c_uint, [] )

gtk_clipboard_get_for_display = _rpythonic_function_(		"gtk_clipboard_get_for_display", ctypes.POINTER(_GtkClipboard), [
	("display",		ctypes.POINTER(_GdkDisplay)),
	("selection",		ctypes.POINTER(_GdkAtom)),] )

gtk_clipboard_get = _rpythonic_function_(		"gtk_clipboard_get", ctypes.POINTER(_GtkClipboard), [
	("selection",		ctypes.POINTER(_GdkAtom)),] )

gtk_clipboard_get_display = _rpythonic_function_(		"gtk_clipboard_get_display", ctypes.POINTER(_GdkDisplay), [
	("clipboard",		ctypes.POINTER(_GtkClipboard)),] )

gtk_clipboard_set_with_data = _rpythonic_function_(		"gtk_clipboard_set_with_data", ctypes.c_int, [
	("clipboard",		ctypes.POINTER(_GtkClipboard)),
	("targets",		ctypes.POINTER(_GtkTargetEntry)),
	("n_targets",		ctypes.c_uint),
	("get_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GtkClipboard),ctypes.POINTER(_GtkSelectionData),ctypes.c_uint,ctypes.POINTER(ctypes.c_void_p),)),
	("clear_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GtkClipboard),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gtk_clipboard_set_with_owner = _rpythonic_function_(		"gtk_clipboard_set_with_owner", ctypes.c_int, [
	("clipboard",		ctypes.POINTER(_GtkClipboard)),
	("targets",		ctypes.POINTER(_GtkTargetEntry)),
	("n_targets",		ctypes.c_uint),
	("get_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GtkClipboard),ctypes.POINTER(_GtkSelectionData),ctypes.c_uint,ctypes.POINTER(ctypes.c_void_p),)),
	("clear_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GtkClipboard),ctypes.POINTER(ctypes.c_void_p),)),
	("owner",		ctypes.POINTER(_GObject)),] )

gtk_clipboard_get_owner = _rpythonic_function_(		"gtk_clipboard_get_owner", ctypes.POINTER(_GObject), [
	("clipboard",		ctypes.POINTER(_GtkClipboard)),] )

gtk_clipboard_clear = _rpythonic_function_(		"gtk_clipboard_clear", ctypes.c_void_p, [
	("clipboard",		ctypes.POINTER(_GtkClipboard)),] )

gtk_clipboard_set_text = _rpythonic_function_(		"gtk_clipboard_set_text", ctypes.c_void_p, [
	("clipboard",		ctypes.POINTER(_GtkClipboard)),
	("text",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

gtk_clipboard_set_image = _rpythonic_function_(		"gtk_clipboard_set_image", ctypes.c_void_p, [
	("clipboard",		ctypes.POINTER(_GtkClipboard)),
	("pixbuf",		ctypes.POINTER(_GdkPixbuf)),] )

gtk_clipboard_request_contents = _rpythonic_function_(		"gtk_clipboard_request_contents", ctypes.c_void_p, [
	("clipboard",		ctypes.POINTER(_GtkClipboard)),
	("target",		ctypes.POINTER(_GdkAtom)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GtkClipboard),ctypes.POINTER(_GtkSelectionData),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gtk_clipboard_request_text = _rpythonic_function_(		"gtk_clipboard_request_text", ctypes.c_void_p, [
	("clipboard",		ctypes.POINTER(_GtkClipboard)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GtkClipboard),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gtk_clipboard_request_rich_text = _rpythonic_function_(		"gtk_clipboard_request_rich_text", ctypes.c_void_p, [
	("clipboard",		ctypes.POINTER(_GtkClipboard)),
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GtkClipboard),ctypes.POINTER(_GdkAtom),ctypes.POINTER(ctypes.c_ubyte),ctypes.c_uint,ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gtk_clipboard_request_image = _rpythonic_function_(		"gtk_clipboard_request_image", ctypes.c_void_p, [
	("clipboard",		ctypes.POINTER(_GtkClipboard)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GtkClipboard),ctypes.POINTER(_GdkPixbuf),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gtk_clipboard_request_uris = _rpythonic_function_(		"gtk_clipboard_request_uris", ctypes.c_void_p, [
	("clipboard",		ctypes.POINTER(_GtkClipboard)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GtkClipboard),ctypes.POINTER(ctypes.POINTER(ctypes.c_char)),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gtk_clipboard_request_targets = _rpythonic_function_(		"gtk_clipboard_request_targets", ctypes.c_void_p, [
	("clipboard",		ctypes.POINTER(_GtkClipboard)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GtkClipboard),ctypes.POINTER(ctypes.POINTER(_GdkAtom)),ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gtk_clipboard_wait_for_contents = _rpythonic_function_(		"gtk_clipboard_wait_for_contents", ctypes.POINTER(_GtkSelectionData), [
	("clipboard",		ctypes.POINTER(_GtkClipboard)),
	("target",		ctypes.POINTER(_GdkAtom)),] )

gtk_clipboard_wait_for_text = _rpythonic_function_(		"gtk_clipboard_wait_for_text", ctypes.POINTER(ctypes.c_char), [
	("clipboard",		ctypes.POINTER(_GtkClipboard)),] )

gtk_clipboard_wait_for_rich_text = _rpythonic_function_(		"gtk_clipboard_wait_for_rich_text", ctypes.POINTER(ctypes.c_ubyte), [
	("clipboard",		ctypes.POINTER(_GtkClipboard)),
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("format",		ctypes.POINTER(ctypes.POINTER(_GdkAtom))),
	("length",		ctypes.POINTER(ctypes.c_uint)),] )

gtk_clipboard_wait_for_image = _rpythonic_function_(		"gtk_clipboard_wait_for_image", ctypes.POINTER(_GdkPixbuf), [
	("clipboard",		ctypes.POINTER(_GtkClipboard)),] )

gtk_clipboard_wait_for_uris = _rpythonic_function_(		"gtk_clipboard_wait_for_uris", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("clipboard",		ctypes.POINTER(_GtkClipboard)),] )

gtk_clipboard_wait_for_targets = _rpythonic_function_(		"gtk_clipboard_wait_for_targets", ctypes.c_int, [
	("clipboard",		ctypes.POINTER(_GtkClipboard)),
	("targets",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(_GdkAtom)))),
	("n_targets",		ctypes.POINTER(ctypes.c_int)),] )

gtk_clipboard_wait_is_text_available = _rpythonic_function_(		"gtk_clipboard_wait_is_text_available", ctypes.c_int, [
	("clipboard",		ctypes.POINTER(_GtkClipboard)),] )

gtk_clipboard_wait_is_rich_text_available = _rpythonic_function_(		"gtk_clipboard_wait_is_rich_text_available", ctypes.c_int, [
	("clipboard",		ctypes.POINTER(_GtkClipboard)),
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),] )

gtk_clipboard_wait_is_image_available = _rpythonic_function_(		"gtk_clipboard_wait_is_image_available", ctypes.c_int, [
	("clipboard",		ctypes.POINTER(_GtkClipboard)),] )

gtk_clipboard_wait_is_uris_available = _rpythonic_function_(		"gtk_clipboard_wait_is_uris_available", ctypes.c_int, [
	("clipboard",		ctypes.POINTER(_GtkClipboard)),] )

gtk_clipboard_wait_is_target_available = _rpythonic_function_(		"gtk_clipboard_wait_is_target_available", ctypes.c_int, [
	("clipboard",		ctypes.POINTER(_GtkClipboard)),
	("target",		ctypes.POINTER(_GdkAtom)),] )

gtk_clipboard_set_can_store = _rpythonic_function_(		"gtk_clipboard_set_can_store", ctypes.c_void_p, [
	("clipboard",		ctypes.POINTER(_GtkClipboard)),
	("targets",		ctypes.POINTER(_GtkTargetEntry)),
	("n_targets",		ctypes.c_int),] )

gtk_clipboard_store = _rpythonic_function_(		"gtk_clipboard_store", ctypes.c_void_p, [
	("clipboard",		ctypes.POINTER(_GtkClipboard)),] )

_gtk_clipboard_handle_event = _rpythonic_function_(		"_gtk_clipboard_handle_event", ctypes.c_void_p, [
	("event",		ctypes.POINTER(_GdkEventOwnerChange)),] )

_gtk_clipboard_store_all = _rpythonic_function_(		"_gtk_clipboard_store_all", ctypes.c_void_p, [] )

color_set = _rpythonic_function_(		"color_set", ctypes.c_void_p, [
	("cp",		ctypes.POINTER(_GtkColorButton)),] )

gtk_color_button_get_type = _rpythonic_function_(		"gtk_color_button_get_type", ctypes.c_uint, [] )

gtk_color_button_new = _rpythonic_function_(		"gtk_color_button_new", ctypes.POINTER(_GtkWidget), [] )

gtk_color_button_new_with_color = _rpythonic_function_(		"gtk_color_button_new_with_color", ctypes.POINTER(_GtkWidget), [
	("color",		ctypes.POINTER(_GdkColor)),] )

gtk_color_button_new_with_rgba = _rpythonic_function_(		"gtk_color_button_new_with_rgba", ctypes.POINTER(_GtkWidget), [
	("rgba",		ctypes.POINTER(_GdkRGBA)),] )

gtk_color_button_set_color = _rpythonic_function_(		"gtk_color_button_set_color", ctypes.c_void_p, [
	("color_button",		ctypes.POINTER(_GtkColorButton)),
	("color",		ctypes.POINTER(_GdkColor)),] )

gtk_color_button_set_alpha = _rpythonic_function_(		"gtk_color_button_set_alpha", ctypes.c_void_p, [
	("color_button",		ctypes.POINTER(_GtkColorButton)),
	("alpha",		ctypes.c_ushort),] )

gtk_color_button_get_color = _rpythonic_function_(		"gtk_color_button_get_color", ctypes.c_void_p, [
	("color_button",		ctypes.POINTER(_GtkColorButton)),
	("color",		ctypes.POINTER(_GdkColor)),] )

gtk_color_button_get_alpha = _rpythonic_function_(		"gtk_color_button_get_alpha", ctypes.c_ushort, [
	("color_button",		ctypes.POINTER(_GtkColorButton)),] )

gtk_color_button_set_use_alpha = _rpythonic_function_(		"gtk_color_button_set_use_alpha", ctypes.c_void_p, [
	("color_button",		ctypes.POINTER(_GtkColorButton)),
	("use_alpha",		ctypes.c_int),] )

gtk_color_button_get_use_alpha = _rpythonic_function_(		"gtk_color_button_get_use_alpha", ctypes.c_int, [
	("color_button",		ctypes.POINTER(_GtkColorButton)),] )

gtk_color_button_set_rgba = _rpythonic_function_(		"gtk_color_button_set_rgba", ctypes.c_void_p, [
	("color_button",		ctypes.POINTER(_GtkColorButton)),
	("rgba",		ctypes.POINTER(_GdkRGBA)),] )

gtk_color_button_get_rgba = _rpythonic_function_(		"gtk_color_button_get_rgba", ctypes.c_void_p, [
	("color_button",		ctypes.POINTER(_GtkColorButton)),
	("rgba",		ctypes.POINTER(_GdkRGBA)),] )

gtk_color_button_set_title = _rpythonic_function_(		"gtk_color_button_set_title", ctypes.c_void_p, [
	("color_button",		ctypes.POINTER(_GtkColorButton)),
	("title",		ctypes.POINTER(ctypes.c_char)),] )

gtk_color_button_get_title = _rpythonic_function_(		"gtk_color_button_get_title", ctypes.POINTER(ctypes.c_char), [
	("color_button",		ctypes.POINTER(_GtkColorButton)),] )

GtkColorSelectionChangePaletteFunc = _rpythonic_function_(		"GtkColorSelectionChangePaletteFunc", ctypes.c_void_p, [
	("colors",		ctypes.POINTER(_GdkColor)),
	("n_colors",		ctypes.c_int),] )

GtkColorSelectionChangePaletteWithScreenFunc = _rpythonic_function_(		"GtkColorSelectionChangePaletteWithScreenFunc", ctypes.c_void_p, [
	("screen",		ctypes.POINTER(_GdkScreen)),
	("colors",		ctypes.POINTER(_GdkColor)),
	("n_colors",		ctypes.c_int),] )

color_changed = _rpythonic_function_(		"color_changed", ctypes.c_void_p, [
	("color_selection",		ctypes.POINTER(_GtkColorSelection)),] )

gtk_color_selection_get_type = _rpythonic_function_(		"gtk_color_selection_get_type", ctypes.c_uint, [] )

gtk_color_selection_new = _rpythonic_function_(		"gtk_color_selection_new", ctypes.POINTER(_GtkWidget), [] )

gtk_color_selection_get_has_opacity_control = _rpythonic_function_(		"gtk_color_selection_get_has_opacity_control", ctypes.c_int, [
	("colorsel",		ctypes.POINTER(_GtkColorSelection)),] )

gtk_color_selection_set_has_opacity_control = _rpythonic_function_(		"gtk_color_selection_set_has_opacity_control", ctypes.c_void_p, [
	("colorsel",		ctypes.POINTER(_GtkColorSelection)),
	("has_opacity",		ctypes.c_int),] )

gtk_color_selection_get_has_palette = _rpythonic_function_(		"gtk_color_selection_get_has_palette", ctypes.c_int, [
	("colorsel",		ctypes.POINTER(_GtkColorSelection)),] )

gtk_color_selection_set_has_palette = _rpythonic_function_(		"gtk_color_selection_set_has_palette", ctypes.c_void_p, [
	("colorsel",		ctypes.POINTER(_GtkColorSelection)),
	("has_palette",		ctypes.c_int),] )

gtk_color_selection_set_current_color = _rpythonic_function_(		"gtk_color_selection_set_current_color", ctypes.c_void_p, [
	("colorsel",		ctypes.POINTER(_GtkColorSelection)),
	("color",		ctypes.POINTER(_GdkColor)),] )

gtk_color_selection_set_current_alpha = _rpythonic_function_(		"gtk_color_selection_set_current_alpha", ctypes.c_void_p, [
	("colorsel",		ctypes.POINTER(_GtkColorSelection)),
	("alpha",		ctypes.c_ushort),] )

gtk_color_selection_get_current_color = _rpythonic_function_(		"gtk_color_selection_get_current_color", ctypes.c_void_p, [
	("colorsel",		ctypes.POINTER(_GtkColorSelection)),
	("color",		ctypes.POINTER(_GdkColor)),] )

gtk_color_selection_get_current_alpha = _rpythonic_function_(		"gtk_color_selection_get_current_alpha", ctypes.c_ushort, [
	("colorsel",		ctypes.POINTER(_GtkColorSelection)),] )

gtk_color_selection_set_previous_color = _rpythonic_function_(		"gtk_color_selection_set_previous_color", ctypes.c_void_p, [
	("colorsel",		ctypes.POINTER(_GtkColorSelection)),
	("color",		ctypes.POINTER(_GdkColor)),] )

gtk_color_selection_set_previous_alpha = _rpythonic_function_(		"gtk_color_selection_set_previous_alpha", ctypes.c_void_p, [
	("colorsel",		ctypes.POINTER(_GtkColorSelection)),
	("alpha",		ctypes.c_ushort),] )

gtk_color_selection_get_previous_color = _rpythonic_function_(		"gtk_color_selection_get_previous_color", ctypes.c_void_p, [
	("colorsel",		ctypes.POINTER(_GtkColorSelection)),
	("color",		ctypes.POINTER(_GdkColor)),] )

gtk_color_selection_get_previous_alpha = _rpythonic_function_(		"gtk_color_selection_get_previous_alpha", ctypes.c_ushort, [
	("colorsel",		ctypes.POINTER(_GtkColorSelection)),] )

gtk_color_selection_set_current_rgba = _rpythonic_function_(		"gtk_color_selection_set_current_rgba", ctypes.c_void_p, [
	("colorsel",		ctypes.POINTER(_GtkColorSelection)),
	("rgba",		ctypes.POINTER(_GdkRGBA)),] )

gtk_color_selection_get_current_rgba = _rpythonic_function_(		"gtk_color_selection_get_current_rgba", ctypes.c_void_p, [
	("colorsel",		ctypes.POINTER(_GtkColorSelection)),
	("rgba",		ctypes.POINTER(_GdkRGBA)),] )

gtk_color_selection_set_previous_rgba = _rpythonic_function_(		"gtk_color_selection_set_previous_rgba", ctypes.c_void_p, [
	("colorsel",		ctypes.POINTER(_GtkColorSelection)),
	("rgba",		ctypes.POINTER(_GdkRGBA)),] )

gtk_color_selection_get_previous_rgba = _rpythonic_function_(		"gtk_color_selection_get_previous_rgba", ctypes.c_void_p, [
	("colorsel",		ctypes.POINTER(_GtkColorSelection)),
	("rgba",		ctypes.POINTER(_GdkRGBA)),] )

gtk_color_selection_is_adjusting = _rpythonic_function_(		"gtk_color_selection_is_adjusting", ctypes.c_int, [
	("colorsel",		ctypes.POINTER(_GtkColorSelection)),] )

gtk_color_selection_palette_from_string = _rpythonic_function_(		"gtk_color_selection_palette_from_string", ctypes.c_int, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("colors",		ctypes.POINTER(ctypes.POINTER(_GdkColor))),
	("n_colors",		ctypes.POINTER(ctypes.c_int)),] )

gtk_color_selection_palette_to_string = _rpythonic_function_(		"gtk_color_selection_palette_to_string", ctypes.POINTER(ctypes.c_char), [
	("colors",		ctypes.POINTER(_GdkColor)),
	("n_colors",		ctypes.c_int),] )

gtk_color_selection_set_change_palette_with_screen_hook = _rpythonic_function_(		"gtk_color_selection_set_change_palette_with_screen_hook", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GdkScreen),ctypes.POINTER(_GdkColor),ctypes.c_int,), [
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GdkScreen),ctypes.POINTER(_GdkColor),ctypes.c_int,)),] )

gtk_color_selection_dialog_get_type = _rpythonic_function_(		"gtk_color_selection_dialog_get_type", ctypes.c_uint, [] )

gtk_color_selection_dialog_new = _rpythonic_function_(		"gtk_color_selection_dialog_new", ctypes.POINTER(_GtkWidget), [
	("title",		ctypes.POINTER(ctypes.c_char)),] )

gtk_color_selection_dialog_get_color_selection = _rpythonic_function_(		"gtk_color_selection_dialog_get_color_selection", ctypes.POINTER(_GtkWidget), [
	("colorsel",		ctypes.POINTER(_GtkColorSelectionDialog)),] )

gtk_combo_box_text_get_type = _rpythonic_function_(		"gtk_combo_box_text_get_type", ctypes.c_uint, [] )

gtk_combo_box_text_new = _rpythonic_function_(		"gtk_combo_box_text_new", ctypes.POINTER(_GtkWidget), [] )

gtk_combo_box_text_new_with_entry = _rpythonic_function_(		"gtk_combo_box_text_new_with_entry", ctypes.POINTER(_GtkWidget), [] )

gtk_combo_box_text_append_text = _rpythonic_function_(		"gtk_combo_box_text_append_text", ctypes.c_void_p, [
	("combo_box",		ctypes.POINTER(_GtkComboBoxText)),
	("text",		ctypes.POINTER(ctypes.c_char)),] )

gtk_combo_box_text_insert_text = _rpythonic_function_(		"gtk_combo_box_text_insert_text", ctypes.c_void_p, [
	("combo_box",		ctypes.POINTER(_GtkComboBoxText)),
	("position",		ctypes.c_int),
	("text",		ctypes.POINTER(ctypes.c_char)),] )

gtk_combo_box_text_prepend_text = _rpythonic_function_(		"gtk_combo_box_text_prepend_text", ctypes.c_void_p, [
	("combo_box",		ctypes.POINTER(_GtkComboBoxText)),
	("text",		ctypes.POINTER(ctypes.c_char)),] )

gtk_combo_box_text_remove = _rpythonic_function_(		"gtk_combo_box_text_remove", ctypes.c_void_p, [
	("combo_box",		ctypes.POINTER(_GtkComboBoxText)),
	("position",		ctypes.c_int),] )

gtk_combo_box_text_remove_all = _rpythonic_function_(		"gtk_combo_box_text_remove_all", ctypes.c_void_p, [
	("combo_box",		ctypes.POINTER(_GtkComboBoxText)),] )

gtk_combo_box_text_get_active_text = _rpythonic_function_(		"gtk_combo_box_text_get_active_text", ctypes.POINTER(ctypes.c_char), [
	("combo_box",		ctypes.POINTER(_GtkComboBoxText)),] )

gtk_combo_box_text_insert = _rpythonic_function_(		"gtk_combo_box_text_insert", ctypes.c_void_p, [
	("combo_box",		ctypes.POINTER(_GtkComboBoxText)),
	("position",		ctypes.c_int),
	("C_id",		ctypes.POINTER(ctypes.c_char)),
	("text",		ctypes.POINTER(ctypes.c_char)),] )

gtk_combo_box_text_append = _rpythonic_function_(		"gtk_combo_box_text_append", ctypes.c_void_p, [
	("combo_box",		ctypes.POINTER(_GtkComboBoxText)),
	("C_id",		ctypes.POINTER(ctypes.c_char)),
	("text",		ctypes.POINTER(ctypes.c_char)),] )

gtk_combo_box_text_prepend = _rpythonic_function_(		"gtk_combo_box_text_prepend", ctypes.c_void_p, [
	("combo_box",		ctypes.POINTER(_GtkComboBoxText)),
	("C_id",		ctypes.POINTER(ctypes.c_char)),
	("text",		ctypes.POINTER(ctypes.c_char)),] )

gtk_css_section_get_type = _rpythonic_function_(		"gtk_css_section_get_type", ctypes.c_uint, [] )

gtk_css_section_ref = _rpythonic_function_(		"gtk_css_section_ref", ctypes.POINTER(_GtkCssSection), [
	("section",		ctypes.POINTER(_GtkCssSection)),] )

gtk_css_section_unref = _rpythonic_function_(		"gtk_css_section_unref", ctypes.c_void_p, [
	("section",		ctypes.POINTER(_GtkCssSection)),] )

gtk_css_section_get_section_type = _rpythonic_function_(		"gtk_css_section_get_section_type", ctypes.c_int, [
	("section",		ctypes.POINTER(_GtkCssSection)),] )

gtk_css_section_get_parent = _rpythonic_function_(		"gtk_css_section_get_parent", ctypes.POINTER(_GtkCssSection), [
	("section",		ctypes.POINTER(_GtkCssSection)),] )

gtk_css_section_get_file = _rpythonic_function_(		"gtk_css_section_get_file", ctypes.POINTER(_GFile), [
	("section",		ctypes.POINTER(_GtkCssSection)),] )

gtk_css_section_get_start_line = _rpythonic_function_(		"gtk_css_section_get_start_line", ctypes.c_uint, [
	("section",		ctypes.POINTER(_GtkCssSection)),] )

gtk_css_section_get_start_position = _rpythonic_function_(		"gtk_css_section_get_start_position", ctypes.c_uint, [
	("section",		ctypes.POINTER(_GtkCssSection)),] )

gtk_css_section_get_end_line = _rpythonic_function_(		"gtk_css_section_get_end_line", ctypes.c_uint, [
	("section",		ctypes.POINTER(_GtkCssSection)),] )

gtk_css_section_get_end_position = _rpythonic_function_(		"gtk_css_section_get_end_position", ctypes.c_uint, [
	("section",		ctypes.POINTER(_GtkCssSection)),] )

gtk_css_provider_error_quark = _rpythonic_function_(		"gtk_css_provider_error_quark", ctypes.c_uint, [] )

parsing_error = _rpythonic_function_(		"parsing_error", ctypes.c_void_p, [
	("provider",		ctypes.POINTER(_GtkCssProvider)),
	("section",		ctypes.POINTER(_GtkCssSection)),
	("error",		ctypes.POINTER(_GError)),] )

gtk_css_provider_get_type = _rpythonic_function_(		"gtk_css_provider_get_type", ctypes.c_uint, [] )

gtk_css_provider_new = _rpythonic_function_(		"gtk_css_provider_new", ctypes.POINTER(_GtkCssProvider), [] )

gtk_css_provider_to_string = _rpythonic_function_(		"gtk_css_provider_to_string", ctypes.POINTER(ctypes.c_char), [
	("provider",		ctypes.POINTER(_GtkCssProvider)),] )

gtk_css_provider_load_from_data = _rpythonic_function_(		"gtk_css_provider_load_from_data", ctypes.c_int, [
	("css_provider",		ctypes.POINTER(_GtkCssProvider)),
	("data",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_css_provider_load_from_file = _rpythonic_function_(		"gtk_css_provider_load_from_file", ctypes.c_int, [
	("css_provider",		ctypes.POINTER(_GtkCssProvider)),
	("file",		ctypes.POINTER(_GFile)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_css_provider_load_from_path = _rpythonic_function_(		"gtk_css_provider_load_from_path", ctypes.c_int, [
	("css_provider",		ctypes.POINTER(_GtkCssProvider)),
	("path",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_css_provider_get_default = _rpythonic_function_(		"gtk_css_provider_get_default", ctypes.POINTER(_GtkCssProvider), [] )

gtk_css_provider_get_named = _rpythonic_function_(		"gtk_css_provider_get_named", ctypes.POINTER(_GtkCssProvider), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("variant",		ctypes.POINTER(ctypes.c_char)),] )

gtk_get_debug_flags = _rpythonic_function_(		"gtk_get_debug_flags", ctypes.c_uint, [] )

gtk_set_debug_flags = _rpythonic_function_(		"gtk_set_debug_flags", ctypes.c_void_p, [
	("flags",		ctypes.c_uint),] )

gtk_drawing_area_get_type = _rpythonic_function_(		"gtk_drawing_area_get_type", ctypes.c_uint, [] )

gtk_drawing_area_new = _rpythonic_function_(		"gtk_drawing_area_new", ctypes.POINTER(_GtkWidget), [] )

gtk_event_box_get_type = _rpythonic_function_(		"gtk_event_box_get_type", ctypes.c_uint, [] )

gtk_event_box_new = _rpythonic_function_(		"gtk_event_box_new", ctypes.POINTER(_GtkWidget), [] )

gtk_event_box_get_visible_window = _rpythonic_function_(		"gtk_event_box_get_visible_window", ctypes.c_int, [
	("event_box",		ctypes.POINTER(_GtkEventBox)),] )

gtk_event_box_set_visible_window = _rpythonic_function_(		"gtk_event_box_set_visible_window", ctypes.c_void_p, [
	("event_box",		ctypes.POINTER(_GtkEventBox)),
	("visible_window",		ctypes.c_int),] )

gtk_event_box_get_above_child = _rpythonic_function_(		"gtk_event_box_get_above_child", ctypes.c_int, [
	("event_box",		ctypes.POINTER(_GtkEventBox)),] )

gtk_event_box_set_above_child = _rpythonic_function_(		"gtk_event_box_set_above_child", ctypes.c_void_p, [
	("event_box",		ctypes.POINTER(_GtkEventBox)),
	("above_child",		ctypes.c_int),] )

gtk_expander_get_type = _rpythonic_function_(		"gtk_expander_get_type", ctypes.c_uint, [] )

gtk_expander_new = _rpythonic_function_(		"gtk_expander_new", ctypes.POINTER(_GtkWidget), [
	("label",		ctypes.POINTER(ctypes.c_char)),] )

gtk_expander_new_with_mnemonic = _rpythonic_function_(		"gtk_expander_new_with_mnemonic", ctypes.POINTER(_GtkWidget), [
	("label",		ctypes.POINTER(ctypes.c_char)),] )

gtk_expander_set_expanded = _rpythonic_function_(		"gtk_expander_set_expanded", ctypes.c_void_p, [
	("expander",		ctypes.POINTER(_GtkExpander)),
	("expanded",		ctypes.c_int),] )

gtk_expander_get_expanded = _rpythonic_function_(		"gtk_expander_get_expanded", ctypes.c_int, [
	("expander",		ctypes.POINTER(_GtkExpander)),] )

gtk_expander_set_spacing = _rpythonic_function_(		"gtk_expander_set_spacing", ctypes.c_void_p, [
	("expander",		ctypes.POINTER(_GtkExpander)),
	("spacing",		ctypes.c_int),] )

gtk_expander_get_spacing = _rpythonic_function_(		"gtk_expander_get_spacing", ctypes.c_int, [
	("expander",		ctypes.POINTER(_GtkExpander)),] )

gtk_expander_set_label = _rpythonic_function_(		"gtk_expander_set_label", ctypes.c_void_p, [
	("expander",		ctypes.POINTER(_GtkExpander)),
	("label",		ctypes.POINTER(ctypes.c_char)),] )

gtk_expander_get_label = _rpythonic_function_(		"gtk_expander_get_label", ctypes.POINTER(ctypes.c_char), [
	("expander",		ctypes.POINTER(_GtkExpander)),] )

gtk_expander_set_use_underline = _rpythonic_function_(		"gtk_expander_set_use_underline", ctypes.c_void_p, [
	("expander",		ctypes.POINTER(_GtkExpander)),
	("use_underline",		ctypes.c_int),] )

gtk_expander_get_use_underline = _rpythonic_function_(		"gtk_expander_get_use_underline", ctypes.c_int, [
	("expander",		ctypes.POINTER(_GtkExpander)),] )

gtk_expander_set_use_markup = _rpythonic_function_(		"gtk_expander_set_use_markup", ctypes.c_void_p, [
	("expander",		ctypes.POINTER(_GtkExpander)),
	("use_markup",		ctypes.c_int),] )

gtk_expander_get_use_markup = _rpythonic_function_(		"gtk_expander_get_use_markup", ctypes.c_int, [
	("expander",		ctypes.POINTER(_GtkExpander)),] )

gtk_expander_set_label_widget = _rpythonic_function_(		"gtk_expander_set_label_widget", ctypes.c_void_p, [
	("expander",		ctypes.POINTER(_GtkExpander)),
	("label_widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_expander_get_label_widget = _rpythonic_function_(		"gtk_expander_get_label_widget", ctypes.POINTER(_GtkWidget), [
	("expander",		ctypes.POINTER(_GtkExpander)),] )

gtk_expander_set_label_fill = _rpythonic_function_(		"gtk_expander_set_label_fill", ctypes.c_void_p, [
	("expander",		ctypes.POINTER(_GtkExpander)),
	("label_fill",		ctypes.c_int),] )

gtk_expander_get_label_fill = _rpythonic_function_(		"gtk_expander_get_label_fill", ctypes.c_int, [
	("expander",		ctypes.POINTER(_GtkExpander)),] )

gtk_expander_set_resize_toplevel = _rpythonic_function_(		"gtk_expander_set_resize_toplevel", ctypes.c_void_p, [
	("expander",		ctypes.POINTER(_GtkExpander)),
	("resize_toplevel",		ctypes.c_int),] )

gtk_expander_get_resize_toplevel = _rpythonic_function_(		"gtk_expander_get_resize_toplevel", ctypes.c_int, [
	("expander",		ctypes.POINTER(_GtkExpander)),] )

gtk_fixed_get_type = _rpythonic_function_(		"gtk_fixed_get_type", ctypes.c_uint, [] )

gtk_fixed_new = _rpythonic_function_(		"gtk_fixed_new", ctypes.POINTER(_GtkWidget), [] )

gtk_fixed_put = _rpythonic_function_(		"gtk_fixed_put", ctypes.c_void_p, [
	("fixed",		ctypes.POINTER(_GtkFixed)),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

gtk_fixed_move = _rpythonic_function_(		"gtk_fixed_move", ctypes.c_void_p, [
	("fixed",		ctypes.POINTER(_GtkFixed)),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

GtkFileFilterFunc = _rpythonic_function_(		"GtkFileFilterFunc", ctypes.c_int, [
	("filter_info",		ctypes.POINTER(_GtkFileFilterInfo)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

gtk_file_filter_get_type = _rpythonic_function_(		"gtk_file_filter_get_type", ctypes.c_uint, [] )

gtk_file_filter_new = _rpythonic_function_(		"gtk_file_filter_new", ctypes.POINTER(_GtkFileFilter), [] )

gtk_file_filter_set_name = _rpythonic_function_(		"gtk_file_filter_set_name", ctypes.c_void_p, [
	("filter",		ctypes.POINTER(_GtkFileFilter)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_file_filter_get_name = _rpythonic_function_(		"gtk_file_filter_get_name", ctypes.POINTER(ctypes.c_char), [
	("filter",		ctypes.POINTER(_GtkFileFilter)),] )

gtk_file_filter_add_mime_type = _rpythonic_function_(		"gtk_file_filter_add_mime_type", ctypes.c_void_p, [
	("filter",		ctypes.POINTER(_GtkFileFilter)),
	("mime_type",		ctypes.POINTER(ctypes.c_char)),] )

gtk_file_filter_add_pattern = _rpythonic_function_(		"gtk_file_filter_add_pattern", ctypes.c_void_p, [
	("filter",		ctypes.POINTER(_GtkFileFilter)),
	("pattern",		ctypes.POINTER(ctypes.c_char)),] )

gtk_file_filter_add_pixbuf_formats = _rpythonic_function_(		"gtk_file_filter_add_pixbuf_formats", ctypes.c_void_p, [
	("filter",		ctypes.POINTER(_GtkFileFilter)),] )

gtk_file_filter_add_custom = _rpythonic_function_(		"gtk_file_filter_add_custom", ctypes.c_void_p, [
	("filter",		ctypes.POINTER(_GtkFileFilter)),
	("needed",		ctypes.c_int),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GtkFileFilterInfo),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

gtk_file_filter_get_needed = _rpythonic_function_(		"gtk_file_filter_get_needed", ctypes.c_int, [
	("filter",		ctypes.POINTER(_GtkFileFilter)),] )

gtk_file_filter_filter = _rpythonic_function_(		"gtk_file_filter_filter", ctypes.c_int, [
	("filter",		ctypes.POINTER(_GtkFileFilter)),
	("filter_info",		ctypes.POINTER(_GtkFileFilterInfo)),] )

gtk_file_chooser_get_type = _rpythonic_function_(		"gtk_file_chooser_get_type", ctypes.c_uint, [] )

gtk_file_chooser_error_quark = _rpythonic_function_(		"gtk_file_chooser_error_quark", ctypes.c_uint, [] )

gtk_file_chooser_set_action = _rpythonic_function_(		"gtk_file_chooser_set_action", ctypes.c_void_p, [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),
	("action",		ctypes.c_int),] )

gtk_file_chooser_get_action = _rpythonic_function_(		"gtk_file_chooser_get_action", ctypes.c_int, [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),] )

gtk_file_chooser_set_local_only = _rpythonic_function_(		"gtk_file_chooser_set_local_only", ctypes.c_void_p, [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),
	("local_only",		ctypes.c_int),] )

gtk_file_chooser_get_local_only = _rpythonic_function_(		"gtk_file_chooser_get_local_only", ctypes.c_int, [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),] )

gtk_file_chooser_set_select_multiple = _rpythonic_function_(		"gtk_file_chooser_set_select_multiple", ctypes.c_void_p, [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),
	("select_multiple",		ctypes.c_int),] )

gtk_file_chooser_get_select_multiple = _rpythonic_function_(		"gtk_file_chooser_get_select_multiple", ctypes.c_int, [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),] )

gtk_file_chooser_set_show_hidden = _rpythonic_function_(		"gtk_file_chooser_set_show_hidden", ctypes.c_void_p, [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),
	("show_hidden",		ctypes.c_int),] )

gtk_file_chooser_get_show_hidden = _rpythonic_function_(		"gtk_file_chooser_get_show_hidden", ctypes.c_int, [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),] )

gtk_file_chooser_set_do_overwrite_confirmation = _rpythonic_function_(		"gtk_file_chooser_set_do_overwrite_confirmation", ctypes.c_void_p, [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),
	("do_overwrite_confirmation",		ctypes.c_int),] )

gtk_file_chooser_get_do_overwrite_confirmation = _rpythonic_function_(		"gtk_file_chooser_get_do_overwrite_confirmation", ctypes.c_int, [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),] )

gtk_file_chooser_set_create_folders = _rpythonic_function_(		"gtk_file_chooser_set_create_folders", ctypes.c_void_p, [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),
	("create_folders",		ctypes.c_int),] )

gtk_file_chooser_get_create_folders = _rpythonic_function_(		"gtk_file_chooser_get_create_folders", ctypes.c_int, [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),] )

gtk_file_chooser_set_current_name = _rpythonic_function_(		"gtk_file_chooser_set_current_name", ctypes.c_void_p, [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_file_chooser_get_filename = _rpythonic_function_(		"gtk_file_chooser_get_filename", ctypes.POINTER(ctypes.c_char), [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),] )

gtk_file_chooser_set_filename = _rpythonic_function_(		"gtk_file_chooser_set_filename", ctypes.c_int, [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

gtk_file_chooser_select_filename = _rpythonic_function_(		"gtk_file_chooser_select_filename", ctypes.c_int, [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

gtk_file_chooser_unselect_filename = _rpythonic_function_(		"gtk_file_chooser_unselect_filename", ctypes.c_void_p, [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

gtk_file_chooser_select_all = _rpythonic_function_(		"gtk_file_chooser_select_all", ctypes.c_void_p, [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),] )

gtk_file_chooser_unselect_all = _rpythonic_function_(		"gtk_file_chooser_unselect_all", ctypes.c_void_p, [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),] )

gtk_file_chooser_get_filenames = _rpythonic_function_(		"gtk_file_chooser_get_filenames", ctypes.POINTER(_GSList), [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),] )

gtk_file_chooser_set_current_folder = _rpythonic_function_(		"gtk_file_chooser_set_current_folder", ctypes.c_int, [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

gtk_file_chooser_get_current_folder = _rpythonic_function_(		"gtk_file_chooser_get_current_folder", ctypes.POINTER(ctypes.c_char), [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),] )

gtk_file_chooser_get_uri = _rpythonic_function_(		"gtk_file_chooser_get_uri", ctypes.POINTER(ctypes.c_char), [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),] )

gtk_file_chooser_set_uri = _rpythonic_function_(		"gtk_file_chooser_set_uri", ctypes.c_int, [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

gtk_file_chooser_select_uri = _rpythonic_function_(		"gtk_file_chooser_select_uri", ctypes.c_int, [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

gtk_file_chooser_unselect_uri = _rpythonic_function_(		"gtk_file_chooser_unselect_uri", ctypes.c_void_p, [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

gtk_file_chooser_get_uris = _rpythonic_function_(		"gtk_file_chooser_get_uris", ctypes.POINTER(_GSList), [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),] )

gtk_file_chooser_set_current_folder_uri = _rpythonic_function_(		"gtk_file_chooser_set_current_folder_uri", ctypes.c_int, [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

gtk_file_chooser_get_current_folder_uri = _rpythonic_function_(		"gtk_file_chooser_get_current_folder_uri", ctypes.POINTER(ctypes.c_char), [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),] )

gtk_file_chooser_get_file = _rpythonic_function_(		"gtk_file_chooser_get_file", ctypes.POINTER(_GFile), [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),] )

gtk_file_chooser_set_file = _rpythonic_function_(		"gtk_file_chooser_set_file", ctypes.c_int, [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),
	("file",		ctypes.POINTER(_GFile)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_file_chooser_select_file = _rpythonic_function_(		"gtk_file_chooser_select_file", ctypes.c_int, [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),
	("file",		ctypes.POINTER(_GFile)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_file_chooser_unselect_file = _rpythonic_function_(		"gtk_file_chooser_unselect_file", ctypes.c_void_p, [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),
	("file",		ctypes.POINTER(_GFile)),] )

gtk_file_chooser_get_files = _rpythonic_function_(		"gtk_file_chooser_get_files", ctypes.POINTER(_GSList), [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),] )

gtk_file_chooser_set_current_folder_file = _rpythonic_function_(		"gtk_file_chooser_set_current_folder_file", ctypes.c_int, [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),
	("file",		ctypes.POINTER(_GFile)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_file_chooser_get_current_folder_file = _rpythonic_function_(		"gtk_file_chooser_get_current_folder_file", ctypes.POINTER(_GFile), [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),] )

gtk_file_chooser_set_preview_widget = _rpythonic_function_(		"gtk_file_chooser_set_preview_widget", ctypes.c_void_p, [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),
	("preview_widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_file_chooser_get_preview_widget = _rpythonic_function_(		"gtk_file_chooser_get_preview_widget", ctypes.POINTER(_GtkWidget), [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),] )

gtk_file_chooser_set_preview_widget_active = _rpythonic_function_(		"gtk_file_chooser_set_preview_widget_active", ctypes.c_void_p, [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),
	("active",		ctypes.c_int),] )

gtk_file_chooser_get_preview_widget_active = _rpythonic_function_(		"gtk_file_chooser_get_preview_widget_active", ctypes.c_int, [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),] )

gtk_file_chooser_set_use_preview_label = _rpythonic_function_(		"gtk_file_chooser_set_use_preview_label", ctypes.c_void_p, [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),
	("use_label",		ctypes.c_int),] )

gtk_file_chooser_get_use_preview_label = _rpythonic_function_(		"gtk_file_chooser_get_use_preview_label", ctypes.c_int, [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),] )

gtk_file_chooser_get_preview_filename = _rpythonic_function_(		"gtk_file_chooser_get_preview_filename", ctypes.POINTER(ctypes.c_char), [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),] )

gtk_file_chooser_get_preview_uri = _rpythonic_function_(		"gtk_file_chooser_get_preview_uri", ctypes.POINTER(ctypes.c_char), [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),] )

gtk_file_chooser_get_preview_file = _rpythonic_function_(		"gtk_file_chooser_get_preview_file", ctypes.POINTER(_GFile), [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),] )

gtk_file_chooser_set_extra_widget = _rpythonic_function_(		"gtk_file_chooser_set_extra_widget", ctypes.c_void_p, [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),
	("extra_widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_file_chooser_get_extra_widget = _rpythonic_function_(		"gtk_file_chooser_get_extra_widget", ctypes.POINTER(_GtkWidget), [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),] )

gtk_file_chooser_add_filter = _rpythonic_function_(		"gtk_file_chooser_add_filter", ctypes.c_void_p, [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),
	("filter",		ctypes.POINTER(_GtkFileFilter)),] )

gtk_file_chooser_remove_filter = _rpythonic_function_(		"gtk_file_chooser_remove_filter", ctypes.c_void_p, [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),
	("filter",		ctypes.POINTER(_GtkFileFilter)),] )

gtk_file_chooser_list_filters = _rpythonic_function_(		"gtk_file_chooser_list_filters", ctypes.POINTER(_GSList), [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),] )

gtk_file_chooser_set_filter = _rpythonic_function_(		"gtk_file_chooser_set_filter", ctypes.c_void_p, [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),
	("filter",		ctypes.POINTER(_GtkFileFilter)),] )

gtk_file_chooser_get_filter = _rpythonic_function_(		"gtk_file_chooser_get_filter", ctypes.POINTER(_GtkFileFilter), [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),] )

gtk_file_chooser_add_shortcut_folder = _rpythonic_function_(		"gtk_file_chooser_add_shortcut_folder", ctypes.c_int, [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),
	("folder",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_file_chooser_remove_shortcut_folder = _rpythonic_function_(		"gtk_file_chooser_remove_shortcut_folder", ctypes.c_int, [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),
	("folder",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_file_chooser_list_shortcut_folders = _rpythonic_function_(		"gtk_file_chooser_list_shortcut_folders", ctypes.POINTER(_GSList), [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),] )

gtk_file_chooser_add_shortcut_folder_uri = _rpythonic_function_(		"gtk_file_chooser_add_shortcut_folder_uri", ctypes.c_int, [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_file_chooser_remove_shortcut_folder_uri = _rpythonic_function_(		"gtk_file_chooser_remove_shortcut_folder_uri", ctypes.c_int, [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_file_chooser_list_shortcut_folder_uris = _rpythonic_function_(		"gtk_file_chooser_list_shortcut_folder_uris", ctypes.POINTER(_GSList), [
	("chooser",		ctypes.POINTER(_GtkFileChooser)),] )

file_set = _rpythonic_function_(		"file_set", ctypes.c_void_p, [
	("fc",		ctypes.POINTER(_GtkFileChooserButton)),] )

gtk_file_chooser_button_get_type = _rpythonic_function_(		"gtk_file_chooser_button_get_type", ctypes.c_uint, [] )

gtk_file_chooser_button_new = _rpythonic_function_(		"gtk_file_chooser_button_new", ctypes.POINTER(_GtkWidget), [
	("title",		ctypes.POINTER(ctypes.c_char)),
	("action",		ctypes.c_int),] )

gtk_file_chooser_button_new_with_dialog = _rpythonic_function_(		"gtk_file_chooser_button_new_with_dialog", ctypes.POINTER(_GtkWidget), [
	("dialog",		ctypes.POINTER(_GtkWidget)),] )

gtk_file_chooser_button_get_title = _rpythonic_function_(		"gtk_file_chooser_button_get_title", ctypes.POINTER(ctypes.c_char), [
	("button",		ctypes.POINTER(_GtkFileChooserButton)),] )

gtk_file_chooser_button_set_title = _rpythonic_function_(		"gtk_file_chooser_button_set_title", ctypes.c_void_p, [
	("button",		ctypes.POINTER(_GtkFileChooserButton)),
	("title",		ctypes.POINTER(ctypes.c_char)),] )

gtk_file_chooser_button_get_width_chars = _rpythonic_function_(		"gtk_file_chooser_button_get_width_chars", ctypes.c_int, [
	("button",		ctypes.POINTER(_GtkFileChooserButton)),] )

gtk_file_chooser_button_set_width_chars = _rpythonic_function_(		"gtk_file_chooser_button_set_width_chars", ctypes.c_void_p, [
	("button",		ctypes.POINTER(_GtkFileChooserButton)),
	("n_chars",		ctypes.c_int),] )

gtk_file_chooser_button_get_focus_on_click = _rpythonic_function_(		"gtk_file_chooser_button_get_focus_on_click", ctypes.c_int, [
	("button",		ctypes.POINTER(_GtkFileChooserButton)),] )

gtk_file_chooser_button_set_focus_on_click = _rpythonic_function_(		"gtk_file_chooser_button_set_focus_on_click", ctypes.c_void_p, [
	("button",		ctypes.POINTER(_GtkFileChooserButton)),
	("focus_on_click",		ctypes.c_int),] )

gtk_file_chooser_dialog_get_type = _rpythonic_function_(		"gtk_file_chooser_dialog_get_type", ctypes.c_uint, [] )

gtk_file_chooser_widget_get_type = _rpythonic_function_(		"gtk_file_chooser_widget_get_type", ctypes.c_uint, [] )

gtk_file_chooser_widget_new = _rpythonic_function_(		"gtk_file_chooser_widget_new", ctypes.POINTER(_GtkWidget), [
	("action",		ctypes.c_int),] )

font_set = _rpythonic_function_(		"font_set", ctypes.c_void_p, [
	("gfp",		ctypes.POINTER(_GtkFontButton)),] )

gtk_font_button_get_type = _rpythonic_function_(		"gtk_font_button_get_type", ctypes.c_uint, [] )

gtk_font_button_new = _rpythonic_function_(		"gtk_font_button_new", ctypes.POINTER(_GtkWidget), [] )

gtk_font_button_new_with_font = _rpythonic_function_(		"gtk_font_button_new_with_font", ctypes.POINTER(_GtkWidget), [
	("fontname",		ctypes.POINTER(ctypes.c_char)),] )

gtk_font_button_get_title = _rpythonic_function_(		"gtk_font_button_get_title", ctypes.POINTER(ctypes.c_char), [
	("font_button",		ctypes.POINTER(_GtkFontButton)),] )

gtk_font_button_set_title = _rpythonic_function_(		"gtk_font_button_set_title", ctypes.c_void_p, [
	("font_button",		ctypes.POINTER(_GtkFontButton)),
	("title",		ctypes.POINTER(ctypes.c_char)),] )

gtk_font_button_get_use_font = _rpythonic_function_(		"gtk_font_button_get_use_font", ctypes.c_int, [
	("font_button",		ctypes.POINTER(_GtkFontButton)),] )

gtk_font_button_set_use_font = _rpythonic_function_(		"gtk_font_button_set_use_font", ctypes.c_void_p, [
	("font_button",		ctypes.POINTER(_GtkFontButton)),
	("use_font",		ctypes.c_int),] )

gtk_font_button_get_use_size = _rpythonic_function_(		"gtk_font_button_get_use_size", ctypes.c_int, [
	("font_button",		ctypes.POINTER(_GtkFontButton)),] )

gtk_font_button_set_use_size = _rpythonic_function_(		"gtk_font_button_set_use_size", ctypes.c_void_p, [
	("font_button",		ctypes.POINTER(_GtkFontButton)),
	("use_size",		ctypes.c_int),] )

gtk_font_button_get_font_name = _rpythonic_function_(		"gtk_font_button_get_font_name", ctypes.POINTER(ctypes.c_char), [
	("font_button",		ctypes.POINTER(_GtkFontButton)),] )

gtk_font_button_set_font_name = _rpythonic_function_(		"gtk_font_button_set_font_name", ctypes.c_int, [
	("font_button",		ctypes.POINTER(_GtkFontButton)),
	("fontname",		ctypes.POINTER(ctypes.c_char)),] )

gtk_font_button_get_show_style = _rpythonic_function_(		"gtk_font_button_get_show_style", ctypes.c_int, [
	("font_button",		ctypes.POINTER(_GtkFontButton)),] )

gtk_font_button_set_show_style = _rpythonic_function_(		"gtk_font_button_set_show_style", ctypes.c_void_p, [
	("font_button",		ctypes.POINTER(_GtkFontButton)),
	("show_style",		ctypes.c_int),] )

gtk_font_button_get_show_size = _rpythonic_function_(		"gtk_font_button_get_show_size", ctypes.c_int, [
	("font_button",		ctypes.POINTER(_GtkFontButton)),] )

gtk_font_button_set_show_size = _rpythonic_function_(		"gtk_font_button_set_show_size", ctypes.c_void_p, [
	("font_button",		ctypes.POINTER(_GtkFontButton)),
	("show_size",		ctypes.c_int),] )

gtk_font_selection_get_type = _rpythonic_function_(		"gtk_font_selection_get_type", ctypes.c_uint, [] )

gtk_font_selection_new = _rpythonic_function_(		"gtk_font_selection_new", ctypes.POINTER(_GtkWidget), [] )

gtk_font_selection_get_family_list = _rpythonic_function_(		"gtk_font_selection_get_family_list", ctypes.POINTER(_GtkWidget), [
	("fontsel",		ctypes.POINTER(_GtkFontSelection)),] )

gtk_font_selection_get_face_list = _rpythonic_function_(		"gtk_font_selection_get_face_list", ctypes.POINTER(_GtkWidget), [
	("fontsel",		ctypes.POINTER(_GtkFontSelection)),] )

gtk_font_selection_get_size_entry = _rpythonic_function_(		"gtk_font_selection_get_size_entry", ctypes.POINTER(_GtkWidget), [
	("fontsel",		ctypes.POINTER(_GtkFontSelection)),] )

gtk_font_selection_get_size_list = _rpythonic_function_(		"gtk_font_selection_get_size_list", ctypes.POINTER(_GtkWidget), [
	("fontsel",		ctypes.POINTER(_GtkFontSelection)),] )

gtk_font_selection_get_preview_entry = _rpythonic_function_(		"gtk_font_selection_get_preview_entry", ctypes.POINTER(_GtkWidget), [
	("fontsel",		ctypes.POINTER(_GtkFontSelection)),] )

gtk_font_selection_get_family = _rpythonic_function_(		"gtk_font_selection_get_family", ctypes.POINTER(_PangoFontFamily), [
	("fontsel",		ctypes.POINTER(_GtkFontSelection)),] )

gtk_font_selection_get_face = _rpythonic_function_(		"gtk_font_selection_get_face", ctypes.POINTER(_PangoFontFace), [
	("fontsel",		ctypes.POINTER(_GtkFontSelection)),] )

gtk_font_selection_get_size = _rpythonic_function_(		"gtk_font_selection_get_size", ctypes.c_int, [
	("fontsel",		ctypes.POINTER(_GtkFontSelection)),] )

gtk_font_selection_get_font_name = _rpythonic_function_(		"gtk_font_selection_get_font_name", ctypes.POINTER(ctypes.c_char), [
	("fontsel",		ctypes.POINTER(_GtkFontSelection)),] )

gtk_font_selection_set_font_name = _rpythonic_function_(		"gtk_font_selection_set_font_name", ctypes.c_int, [
	("fontsel",		ctypes.POINTER(_GtkFontSelection)),
	("fontname",		ctypes.POINTER(ctypes.c_char)),] )

gtk_font_selection_get_preview_text = _rpythonic_function_(		"gtk_font_selection_get_preview_text", ctypes.POINTER(ctypes.c_char), [
	("fontsel",		ctypes.POINTER(_GtkFontSelection)),] )

gtk_font_selection_set_preview_text = _rpythonic_function_(		"gtk_font_selection_set_preview_text", ctypes.c_void_p, [
	("fontsel",		ctypes.POINTER(_GtkFontSelection)),
	("text",		ctypes.POINTER(ctypes.c_char)),] )

gtk_font_selection_dialog_get_type = _rpythonic_function_(		"gtk_font_selection_dialog_get_type", ctypes.c_uint, [] )

gtk_font_selection_dialog_new = _rpythonic_function_(		"gtk_font_selection_dialog_new", ctypes.POINTER(_GtkWidget), [
	("title",		ctypes.POINTER(ctypes.c_char)),] )

gtk_font_selection_dialog_get_ok_button = _rpythonic_function_(		"gtk_font_selection_dialog_get_ok_button", ctypes.POINTER(_GtkWidget), [
	("fsd",		ctypes.POINTER(_GtkFontSelectionDialog)),] )

gtk_font_selection_dialog_get_cancel_button = _rpythonic_function_(		"gtk_font_selection_dialog_get_cancel_button", ctypes.POINTER(_GtkWidget), [
	("fsd",		ctypes.POINTER(_GtkFontSelectionDialog)),] )

gtk_font_selection_dialog_get_font_selection = _rpythonic_function_(		"gtk_font_selection_dialog_get_font_selection", ctypes.POINTER(_GtkWidget), [
	("fsd",		ctypes.POINTER(_GtkFontSelectionDialog)),] )

gtk_font_selection_dialog_get_font_name = _rpythonic_function_(		"gtk_font_selection_dialog_get_font_name", ctypes.POINTER(ctypes.c_char), [
	("fsd",		ctypes.POINTER(_GtkFontSelectionDialog)),] )

gtk_font_selection_dialog_set_font_name = _rpythonic_function_(		"gtk_font_selection_dialog_set_font_name", ctypes.c_int, [
	("fsd",		ctypes.POINTER(_GtkFontSelectionDialog)),
	("fontname",		ctypes.POINTER(ctypes.c_char)),] )

gtk_font_selection_dialog_get_preview_text = _rpythonic_function_(		"gtk_font_selection_dialog_get_preview_text", ctypes.POINTER(ctypes.c_char), [
	("fsd",		ctypes.POINTER(_GtkFontSelectionDialog)),] )

gtk_font_selection_dialog_set_preview_text = _rpythonic_function_(		"gtk_font_selection_dialog_set_preview_text", ctypes.c_void_p, [
	("fsd",		ctypes.POINTER(_GtkFontSelectionDialog)),
	("text",		ctypes.POINTER(ctypes.c_char)),] )

GtkFontFilterFunc = _rpythonic_function_(		"GtkFontFilterFunc", ctypes.c_int, [
	("family",		ctypes.POINTER(_PangoFontFamily)),
	("face",		ctypes.POINTER(_PangoFontFace)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

get_font_family = _rpythonic_function_(		"get_font_family", ctypes.POINTER(_PangoFontFamily), [
	("chooser",		ctypes.POINTER(_GtkFontChooser)),] )

get_font_face = _rpythonic_function_(		"get_font_face", ctypes.POINTER(_PangoFontFace), [
	("chooser",		ctypes.POINTER(_GtkFontChooser)),] )

get_font_size = _rpythonic_function_(		"get_font_size", ctypes.c_int, [
	("chooser",		ctypes.POINTER(_GtkFontChooser)),] )

set_filter_func = _rpythonic_function_(		"set_filter_func", ctypes.c_void_p, [
	("chooser",		ctypes.POINTER(_GtkFontChooser)),
	("filter",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_PangoFontFamily),ctypes.POINTER(_PangoFontFace),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

font_activated = _rpythonic_function_(		"font_activated", ctypes.c_void_p, [
	("chooser",		ctypes.POINTER(_GtkFontChooser)),
	("fontname",		ctypes.POINTER(ctypes.c_char)),] )

gtk_font_chooser_get_type = _rpythonic_function_(		"gtk_font_chooser_get_type", ctypes.c_uint, [] )

gtk_font_chooser_get_font_family = _rpythonic_function_(		"gtk_font_chooser_get_font_family", ctypes.POINTER(_PangoFontFamily), [
	("fontchooser",		ctypes.POINTER(_GtkFontChooser)),] )

gtk_font_chooser_get_font_face = _rpythonic_function_(		"gtk_font_chooser_get_font_face", ctypes.POINTER(_PangoFontFace), [
	("fontchooser",		ctypes.POINTER(_GtkFontChooser)),] )

gtk_font_chooser_get_font_size = _rpythonic_function_(		"gtk_font_chooser_get_font_size", ctypes.c_int, [
	("fontchooser",		ctypes.POINTER(_GtkFontChooser)),] )

gtk_font_chooser_get_font_desc = _rpythonic_function_(		"gtk_font_chooser_get_font_desc", ctypes.POINTER(_PangoFontDescription), [
	("fontchooser",		ctypes.POINTER(_GtkFontChooser)),] )

gtk_font_chooser_set_font_desc = _rpythonic_function_(		"gtk_font_chooser_set_font_desc", ctypes.c_void_p, [
	("fontchooser",		ctypes.POINTER(_GtkFontChooser)),
	("font_desc",		ctypes.POINTER(_PangoFontDescription)),] )

gtk_font_chooser_get_font = _rpythonic_function_(		"gtk_font_chooser_get_font", ctypes.POINTER(ctypes.c_char), [
	("fontchooser",		ctypes.POINTER(_GtkFontChooser)),] )

gtk_font_chooser_set_font = _rpythonic_function_(		"gtk_font_chooser_set_font", ctypes.c_void_p, [
	("fontchooser",		ctypes.POINTER(_GtkFontChooser)),
	("fontname",		ctypes.POINTER(ctypes.c_char)),] )

gtk_font_chooser_get_preview_text = _rpythonic_function_(		"gtk_font_chooser_get_preview_text", ctypes.POINTER(ctypes.c_char), [
	("fontchooser",		ctypes.POINTER(_GtkFontChooser)),] )

gtk_font_chooser_set_preview_text = _rpythonic_function_(		"gtk_font_chooser_set_preview_text", ctypes.c_void_p, [
	("fontchooser",		ctypes.POINTER(_GtkFontChooser)),
	("text",		ctypes.POINTER(ctypes.c_char)),] )

gtk_font_chooser_get_show_preview_entry = _rpythonic_function_(		"gtk_font_chooser_get_show_preview_entry", ctypes.c_int, [
	("fontchooser",		ctypes.POINTER(_GtkFontChooser)),] )

gtk_font_chooser_set_show_preview_entry = _rpythonic_function_(		"gtk_font_chooser_set_show_preview_entry", ctypes.c_void_p, [
	("fontchooser",		ctypes.POINTER(_GtkFontChooser)),
	("show_preview_entry",		ctypes.c_int),] )

gtk_font_chooser_set_filter_func = _rpythonic_function_(		"gtk_font_chooser_set_filter_func", ctypes.c_void_p, [
	("fontchooser",		ctypes.POINTER(_GtkFontChooser)),
	("filter",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_PangoFontFamily),ctypes.POINTER(_PangoFontFace),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

gtk_font_chooser_dialog_get_type = _rpythonic_function_(		"gtk_font_chooser_dialog_get_type", ctypes.c_uint, [] )

gtk_font_chooser_dialog_new = _rpythonic_function_(		"gtk_font_chooser_dialog_new", ctypes.POINTER(_GtkWidget), [
	("title",		ctypes.POINTER(ctypes.c_char)),
	("window",		ctypes.POINTER(_GtkWindow)),] )

gtk_font_chooser_widget_get_type = _rpythonic_function_(		"gtk_font_chooser_widget_get_type", ctypes.c_uint, [] )

gtk_font_chooser_widget_new = _rpythonic_function_(		"gtk_font_chooser_widget_new", ctypes.POINTER(_GtkWidget), [] )

gtk_symbolic_color_get_type = _rpythonic_function_(		"gtk_symbolic_color_get_type", ctypes.c_uint, [] )

gtk_symbolic_color_new_literal = _rpythonic_function_(		"gtk_symbolic_color_new_literal", ctypes.POINTER(_GtkSymbolicColor), [
	("color",		ctypes.POINTER(_GdkRGBA)),] )

gtk_symbolic_color_new_name = _rpythonic_function_(		"gtk_symbolic_color_new_name", ctypes.POINTER(_GtkSymbolicColor), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_symbolic_color_new_shade = _rpythonic_function_(		"gtk_symbolic_color_new_shade", ctypes.POINTER(_GtkSymbolicColor), [
	("color",		ctypes.POINTER(_GtkSymbolicColor)),
	("factor",		ctypes.c_double),] )

gtk_symbolic_color_new_alpha = _rpythonic_function_(		"gtk_symbolic_color_new_alpha", ctypes.POINTER(_GtkSymbolicColor), [
	("color",		ctypes.POINTER(_GtkSymbolicColor)),
	("factor",		ctypes.c_double),] )

gtk_symbolic_color_new_mix = _rpythonic_function_(		"gtk_symbolic_color_new_mix", ctypes.POINTER(_GtkSymbolicColor), [
	("color1",		ctypes.POINTER(_GtkSymbolicColor)),
	("color2",		ctypes.POINTER(_GtkSymbolicColor)),
	("factor",		ctypes.c_double),] )

gtk_symbolic_color_ref = _rpythonic_function_(		"gtk_symbolic_color_ref", ctypes.POINTER(_GtkSymbolicColor), [
	("color",		ctypes.POINTER(_GtkSymbolicColor)),] )

gtk_symbolic_color_unref = _rpythonic_function_(		"gtk_symbolic_color_unref", ctypes.c_void_p, [
	("color",		ctypes.POINTER(_GtkSymbolicColor)),] )

gtk_symbolic_color_to_string = _rpythonic_function_(		"gtk_symbolic_color_to_string", ctypes.POINTER(ctypes.c_char), [
	("color",		ctypes.POINTER(_GtkSymbolicColor)),] )

gtk_symbolic_color_resolve = _rpythonic_function_(		"gtk_symbolic_color_resolve", ctypes.c_int, [
	("color",		ctypes.POINTER(_GtkSymbolicColor)),
	("props",		ctypes.POINTER(_GtkStyleProperties)),
	("resolved_color",		ctypes.POINTER(_GdkRGBA)),] )

gtk_gradient_get_type = _rpythonic_function_(		"gtk_gradient_get_type", ctypes.c_uint, [] )

gtk_gradient_new_linear = _rpythonic_function_(		"gtk_gradient_new_linear", ctypes.POINTER(_GtkGradient), [
	("x0",		ctypes.c_double),
	("y0",		ctypes.c_double),
	("x1",		ctypes.c_double),
	("y1",		ctypes.c_double),] )

gtk_gradient_new_radial = _rpythonic_function_(		"gtk_gradient_new_radial", ctypes.POINTER(_GtkGradient), [
	("x0",		ctypes.c_double),
	("y0",		ctypes.c_double),
	("radius0",		ctypes.c_double),
	("x1",		ctypes.c_double),
	("y1",		ctypes.c_double),
	("radius1",		ctypes.c_double),] )

gtk_gradient_add_color_stop = _rpythonic_function_(		"gtk_gradient_add_color_stop", ctypes.c_void_p, [
	("gradient",		ctypes.POINTER(_GtkGradient)),
	("offset",		ctypes.c_double),
	("color",		ctypes.POINTER(_GtkSymbolicColor)),] )

gtk_gradient_ref = _rpythonic_function_(		"gtk_gradient_ref", ctypes.POINTER(_GtkGradient), [
	("gradient",		ctypes.POINTER(_GtkGradient)),] )

gtk_gradient_unref = _rpythonic_function_(		"gtk_gradient_unref", ctypes.c_void_p, [
	("gradient",		ctypes.POINTER(_GtkGradient)),] )

gtk_gradient_resolve = _rpythonic_function_(		"gtk_gradient_resolve", ctypes.c_int, [
	("gradient",		ctypes.POINTER(_GtkGradient)),
	("props",		ctypes.POINTER(_GtkStyleProperties)),
	("resolved_gradient",		ctypes.POINTER(ctypes.POINTER(_cairo_pattern))),] )

gtk_gradient_to_string = _rpythonic_function_(		"gtk_gradient_to_string", ctypes.POINTER(ctypes.c_char), [
	("gradient",		ctypes.POINTER(_GtkGradient)),] )

gtk_grid_get_type = _rpythonic_function_(		"gtk_grid_get_type", ctypes.c_uint, [] )

gtk_grid_new = _rpythonic_function_(		"gtk_grid_new", ctypes.POINTER(_GtkWidget), [] )

gtk_grid_attach = _rpythonic_function_(		"gtk_grid_attach", ctypes.c_void_p, [
	("grid",		ctypes.POINTER(_GtkGrid)),
	("child",		ctypes.POINTER(_GtkWidget)),
	("left",		ctypes.c_int),
	("top",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

gtk_grid_attach_next_to = _rpythonic_function_(		"gtk_grid_attach_next_to", ctypes.c_void_p, [
	("grid",		ctypes.POINTER(_GtkGrid)),
	("child",		ctypes.POINTER(_GtkWidget)),
	("sibling",		ctypes.POINTER(_GtkWidget)),
	("side",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

gtk_grid_get_child_at = _rpythonic_function_(		"gtk_grid_get_child_at", ctypes.POINTER(_GtkWidget), [
	("grid",		ctypes.POINTER(_GtkGrid)),
	("left",		ctypes.c_int),
	("top",		ctypes.c_int),] )

gtk_grid_insert_row = _rpythonic_function_(		"gtk_grid_insert_row", ctypes.c_void_p, [
	("grid",		ctypes.POINTER(_GtkGrid)),
	("position",		ctypes.c_int),] )

gtk_grid_insert_column = _rpythonic_function_(		"gtk_grid_insert_column", ctypes.c_void_p, [
	("grid",		ctypes.POINTER(_GtkGrid)),
	("position",		ctypes.c_int),] )

gtk_grid_insert_next_to = _rpythonic_function_(		"gtk_grid_insert_next_to", ctypes.c_void_p, [
	("grid",		ctypes.POINTER(_GtkGrid)),
	("sibling",		ctypes.POINTER(_GtkWidget)),
	("side",		ctypes.c_int),] )

gtk_grid_set_row_homogeneous = _rpythonic_function_(		"gtk_grid_set_row_homogeneous", ctypes.c_void_p, [
	("grid",		ctypes.POINTER(_GtkGrid)),
	("homogeneous",		ctypes.c_int),] )

gtk_grid_get_row_homogeneous = _rpythonic_function_(		"gtk_grid_get_row_homogeneous", ctypes.c_int, [
	("grid",		ctypes.POINTER(_GtkGrid)),] )

gtk_grid_set_row_spacing = _rpythonic_function_(		"gtk_grid_set_row_spacing", ctypes.c_void_p, [
	("grid",		ctypes.POINTER(_GtkGrid)),
	("spacing",		ctypes.c_uint),] )

gtk_grid_get_row_spacing = _rpythonic_function_(		"gtk_grid_get_row_spacing", ctypes.c_uint, [
	("grid",		ctypes.POINTER(_GtkGrid)),] )

gtk_grid_set_column_homogeneous = _rpythonic_function_(		"gtk_grid_set_column_homogeneous", ctypes.c_void_p, [
	("grid",		ctypes.POINTER(_GtkGrid)),
	("homogeneous",		ctypes.c_int),] )

gtk_grid_get_column_homogeneous = _rpythonic_function_(		"gtk_grid_get_column_homogeneous", ctypes.c_int, [
	("grid",		ctypes.POINTER(_GtkGrid)),] )

gtk_grid_set_column_spacing = _rpythonic_function_(		"gtk_grid_set_column_spacing", ctypes.c_void_p, [
	("grid",		ctypes.POINTER(_GtkGrid)),
	("spacing",		ctypes.c_uint),] )

gtk_grid_get_column_spacing = _rpythonic_function_(		"gtk_grid_get_column_spacing", ctypes.c_uint, [
	("grid",		ctypes.POINTER(_GtkGrid)),] )

child_attached = _rpythonic_function_(		"child_attached", ctypes.c_void_p, [
	("handle_box",		ctypes.POINTER(_GtkHandleBox)),
	("child",		ctypes.POINTER(_GtkWidget)),] )

child_detached = _rpythonic_function_(		"child_detached", ctypes.c_void_p, [
	("handle_box",		ctypes.POINTER(_GtkHandleBox)),
	("child",		ctypes.POINTER(_GtkWidget)),] )

gtk_handle_box_get_type = _rpythonic_function_(		"gtk_handle_box_get_type", ctypes.c_uint, [] )

gtk_handle_box_new = _rpythonic_function_(		"gtk_handle_box_new", ctypes.POINTER(_GtkWidget), [] )

gtk_handle_box_set_shadow_type = _rpythonic_function_(		"gtk_handle_box_set_shadow_type", ctypes.c_void_p, [
	("handle_box",		ctypes.POINTER(_GtkHandleBox)),
	("C_type",		ctypes.c_int),] )

gtk_handle_box_get_shadow_type = _rpythonic_function_(		"gtk_handle_box_get_shadow_type", ctypes.c_int, [
	("handle_box",		ctypes.POINTER(_GtkHandleBox)),] )

gtk_handle_box_set_handle_position = _rpythonic_function_(		"gtk_handle_box_set_handle_position", ctypes.c_void_p, [
	("handle_box",		ctypes.POINTER(_GtkHandleBox)),
	("position",		ctypes.c_int),] )

gtk_handle_box_get_handle_position = _rpythonic_function_(		"gtk_handle_box_get_handle_position", ctypes.c_int, [
	("handle_box",		ctypes.POINTER(_GtkHandleBox)),] )

gtk_handle_box_set_snap_edge = _rpythonic_function_(		"gtk_handle_box_set_snap_edge", ctypes.c_void_p, [
	("handle_box",		ctypes.POINTER(_GtkHandleBox)),
	("edge",		ctypes.c_int),] )

gtk_handle_box_get_snap_edge = _rpythonic_function_(		"gtk_handle_box_get_snap_edge", ctypes.c_int, [
	("handle_box",		ctypes.POINTER(_GtkHandleBox)),] )

gtk_handle_box_get_child_detached = _rpythonic_function_(		"gtk_handle_box_get_child_detached", ctypes.c_int, [
	("handle_box",		ctypes.POINTER(_GtkHandleBox)),] )

gtk_hbutton_box_get_type = _rpythonic_function_(		"gtk_hbutton_box_get_type", ctypes.c_uint, [] )

gtk_hbutton_box_new = _rpythonic_function_(		"gtk_hbutton_box_new", ctypes.POINTER(_GtkWidget), [] )

gtk_hbox_get_type = _rpythonic_function_(		"gtk_hbox_get_type", ctypes.c_uint, [] )

gtk_hbox_new = _rpythonic_function_(		"gtk_hbox_new", ctypes.POINTER(_GtkWidget), [
	("homogeneous",		ctypes.c_int),
	("spacing",		ctypes.c_int),] )

cycle_child_focus = _rpythonic_function_(		"cycle_child_focus", ctypes.c_int, [
	("paned",		ctypes.POINTER(_GtkPaned)),
	("reverse",		ctypes.c_int),] )

toggle_handle_focus = _rpythonic_function_(		"toggle_handle_focus", ctypes.c_int, [
	("paned",		ctypes.POINTER(_GtkPaned)),] )

move_handle = _rpythonic_function_(		"move_handle", ctypes.c_int, [
	("paned",		ctypes.POINTER(_GtkPaned)),
	("scroll",		ctypes.c_int),] )

cycle_handle_focus = _rpythonic_function_(		"cycle_handle_focus", ctypes.c_int, [
	("paned",		ctypes.POINTER(_GtkPaned)),
	("reverse",		ctypes.c_int),] )

accept_position = _rpythonic_function_(		"accept_position", ctypes.c_int, [
	("paned",		ctypes.POINTER(_GtkPaned)),] )

cancel_position = _rpythonic_function_(		"cancel_position", ctypes.c_int, [
	("paned",		ctypes.POINTER(_GtkPaned)),] )

gtk_paned_new = _rpythonic_function_(		"gtk_paned_new", ctypes.POINTER(_GtkWidget), [
	("orientation",		ctypes.c_int),] )

gtk_paned_get_type = _rpythonic_function_(		"gtk_paned_get_type", ctypes.c_uint, [] )

gtk_paned_add1 = _rpythonic_function_(		"gtk_paned_add1", ctypes.c_void_p, [
	("paned",		ctypes.POINTER(_GtkPaned)),
	("child",		ctypes.POINTER(_GtkWidget)),] )

gtk_paned_add2 = _rpythonic_function_(		"gtk_paned_add2", ctypes.c_void_p, [
	("paned",		ctypes.POINTER(_GtkPaned)),
	("child",		ctypes.POINTER(_GtkWidget)),] )

gtk_paned_pack1 = _rpythonic_function_(		"gtk_paned_pack1", ctypes.c_void_p, [
	("paned",		ctypes.POINTER(_GtkPaned)),
	("child",		ctypes.POINTER(_GtkWidget)),
	("resize",		ctypes.c_int),
	("shrink",		ctypes.c_int),] )

gtk_paned_pack2 = _rpythonic_function_(		"gtk_paned_pack2", ctypes.c_void_p, [
	("paned",		ctypes.POINTER(_GtkPaned)),
	("child",		ctypes.POINTER(_GtkWidget)),
	("resize",		ctypes.c_int),
	("shrink",		ctypes.c_int),] )

gtk_paned_get_position = _rpythonic_function_(		"gtk_paned_get_position", ctypes.c_int, [
	("paned",		ctypes.POINTER(_GtkPaned)),] )

gtk_paned_set_position = _rpythonic_function_(		"gtk_paned_set_position", ctypes.c_void_p, [
	("paned",		ctypes.POINTER(_GtkPaned)),
	("position",		ctypes.c_int),] )

gtk_paned_get_child1 = _rpythonic_function_(		"gtk_paned_get_child1", ctypes.POINTER(_GtkWidget), [
	("paned",		ctypes.POINTER(_GtkPaned)),] )

gtk_paned_get_child2 = _rpythonic_function_(		"gtk_paned_get_child2", ctypes.POINTER(_GtkWidget), [
	("paned",		ctypes.POINTER(_GtkPaned)),] )

gtk_paned_get_handle_window = _rpythonic_function_(		"gtk_paned_get_handle_window", ctypes.POINTER(_GdkWindow), [
	("paned",		ctypes.POINTER(_GtkPaned)),] )

gtk_hpaned_get_type = _rpythonic_function_(		"gtk_hpaned_get_type", ctypes.c_uint, [] )

gtk_hpaned_new = _rpythonic_function_(		"gtk_hpaned_new", ctypes.POINTER(_GtkWidget), [] )

adjust_bounds = _rpythonic_function_(		"adjust_bounds", ctypes.c_void_p, [
	("C_range",		ctypes.POINTER(_GtkRange)),
	("new_value",		ctypes.c_double),] )

move_slider = _rpythonic_function_(		"move_slider", ctypes.c_void_p, [
	("C_range",		ctypes.POINTER(_GtkRange)),
	("scroll",		ctypes.c_int),] )

get_range_border = _rpythonic_function_(		"get_range_border", ctypes.c_void_p, [
	("C_range",		ctypes.POINTER(_GtkRange)),
	("border_",		ctypes.POINTER(_GtkBorder)),] )

change_value = _rpythonic_function_(		"change_value", ctypes.c_int, [
	("C_range",		ctypes.POINTER(_GtkRange)),
	("scroll",		ctypes.c_int),
	("new_value",		ctypes.c_double),] )

gtk_range_set_adjustment = _rpythonic_function_(		"gtk_range_set_adjustment", ctypes.c_void_p, [
	("C_range",		ctypes.POINTER(_GtkRange)),
	("adjustment",		ctypes.POINTER(_GtkAdjustment)),] )

gtk_range_get_type = _rpythonic_function_(		"gtk_range_get_type", ctypes.c_uint, [] )

gtk_range_get_adjustment = _rpythonic_function_(		"gtk_range_get_adjustment", ctypes.POINTER(_GtkAdjustment), [
	("C_range",		ctypes.POINTER(_GtkRange)),] )

gtk_range_set_inverted = _rpythonic_function_(		"gtk_range_set_inverted", ctypes.c_void_p, [
	("C_range",		ctypes.POINTER(_GtkRange)),
	("setting",		ctypes.c_int),] )

gtk_range_get_inverted = _rpythonic_function_(		"gtk_range_get_inverted", ctypes.c_int, [
	("C_range",		ctypes.POINTER(_GtkRange)),] )

gtk_range_set_flippable = _rpythonic_function_(		"gtk_range_set_flippable", ctypes.c_void_p, [
	("C_range",		ctypes.POINTER(_GtkRange)),
	("flippable",		ctypes.c_int),] )

gtk_range_get_flippable = _rpythonic_function_(		"gtk_range_get_flippable", ctypes.c_int, [
	("C_range",		ctypes.POINTER(_GtkRange)),] )

gtk_range_set_slider_size_fixed = _rpythonic_function_(		"gtk_range_set_slider_size_fixed", ctypes.c_void_p, [
	("C_range",		ctypes.POINTER(_GtkRange)),
	("size_fixed",		ctypes.c_int),] )

gtk_range_get_slider_size_fixed = _rpythonic_function_(		"gtk_range_get_slider_size_fixed", ctypes.c_int, [
	("C_range",		ctypes.POINTER(_GtkRange)),] )

gtk_range_set_min_slider_size = _rpythonic_function_(		"gtk_range_set_min_slider_size", ctypes.c_void_p, [
	("C_range",		ctypes.POINTER(_GtkRange)),
	("min_size",		ctypes.c_int),] )

gtk_range_get_min_slider_size = _rpythonic_function_(		"gtk_range_get_min_slider_size", ctypes.c_int, [
	("C_range",		ctypes.POINTER(_GtkRange)),] )

gtk_range_get_range_rect = _rpythonic_function_(		"gtk_range_get_range_rect", ctypes.c_void_p, [
	("C_range",		ctypes.POINTER(_GtkRange)),
	("range_rect",		ctypes.POINTER(_cairo_rectangle_int)),] )

gtk_range_get_slider_range = _rpythonic_function_(		"gtk_range_get_slider_range", ctypes.c_void_p, [
	("C_range",		ctypes.POINTER(_GtkRange)),
	("slider_start",		ctypes.POINTER(ctypes.c_int)),
	("slider_end",		ctypes.POINTER(ctypes.c_int)),] )

gtk_range_set_lower_stepper_sensitivity = _rpythonic_function_(		"gtk_range_set_lower_stepper_sensitivity", ctypes.c_void_p, [
	("C_range",		ctypes.POINTER(_GtkRange)),
	("sensitivity",		ctypes.c_int),] )

gtk_range_get_lower_stepper_sensitivity = _rpythonic_function_(		"gtk_range_get_lower_stepper_sensitivity", ctypes.c_int, [
	("C_range",		ctypes.POINTER(_GtkRange)),] )

gtk_range_set_upper_stepper_sensitivity = _rpythonic_function_(		"gtk_range_set_upper_stepper_sensitivity", ctypes.c_void_p, [
	("C_range",		ctypes.POINTER(_GtkRange)),
	("sensitivity",		ctypes.c_int),] )

gtk_range_get_upper_stepper_sensitivity = _rpythonic_function_(		"gtk_range_get_upper_stepper_sensitivity", ctypes.c_int, [
	("C_range",		ctypes.POINTER(_GtkRange)),] )

gtk_range_set_increments = _rpythonic_function_(		"gtk_range_set_increments", ctypes.c_void_p, [
	("C_range",		ctypes.POINTER(_GtkRange)),
	("step",		ctypes.c_double),
	("page",		ctypes.c_double),] )

gtk_range_set_range = _rpythonic_function_(		"gtk_range_set_range", ctypes.c_void_p, [
	("C_range",		ctypes.POINTER(_GtkRange)),
	("min",		ctypes.c_double),
	("max",		ctypes.c_double),] )

gtk_range_set_value = _rpythonic_function_(		"gtk_range_set_value", ctypes.c_void_p, [
	("C_range",		ctypes.POINTER(_GtkRange)),
	("value",		ctypes.c_double),] )

gtk_range_get_value = _rpythonic_function_(		"gtk_range_get_value", ctypes.c_double, [
	("C_range",		ctypes.POINTER(_GtkRange)),] )

gtk_range_set_show_fill_level = _rpythonic_function_(		"gtk_range_set_show_fill_level", ctypes.c_void_p, [
	("C_range",		ctypes.POINTER(_GtkRange)),
	("show_fill_level",		ctypes.c_int),] )

gtk_range_get_show_fill_level = _rpythonic_function_(		"gtk_range_get_show_fill_level", ctypes.c_int, [
	("C_range",		ctypes.POINTER(_GtkRange)),] )

gtk_range_set_restrict_to_fill_level = _rpythonic_function_(		"gtk_range_set_restrict_to_fill_level", ctypes.c_void_p, [
	("C_range",		ctypes.POINTER(_GtkRange)),
	("restrict_to_fill_level",		ctypes.c_int),] )

gtk_range_get_restrict_to_fill_level = _rpythonic_function_(		"gtk_range_get_restrict_to_fill_level", ctypes.c_int, [
	("C_range",		ctypes.POINTER(_GtkRange)),] )

gtk_range_set_fill_level = _rpythonic_function_(		"gtk_range_set_fill_level", ctypes.c_void_p, [
	("C_range",		ctypes.POINTER(_GtkRange)),
	("fill_level",		ctypes.c_double),] )

gtk_range_get_fill_level = _rpythonic_function_(		"gtk_range_get_fill_level", ctypes.c_double, [
	("C_range",		ctypes.POINTER(_GtkRange)),] )

gtk_range_set_round_digits = _rpythonic_function_(		"gtk_range_set_round_digits", ctypes.c_void_p, [
	("C_range",		ctypes.POINTER(_GtkRange)),
	("round_digits",		ctypes.c_int),] )

gtk_range_get_round_digits = _rpythonic_function_(		"gtk_range_get_round_digits", ctypes.c_int, [
	("C_range",		ctypes.POINTER(_GtkRange)),] )

_gtk_range_get_wheel_delta = _rpythonic_function_(		"_gtk_range_get_wheel_delta", ctypes.c_double, [
	("C_range",		ctypes.POINTER(_GtkRange)),
	("direction",		ctypes.c_int),] )

_gtk_range_set_stop_values = _rpythonic_function_(		"_gtk_range_set_stop_values", ctypes.c_void_p, [
	("C_range",		ctypes.POINTER(_GtkRange)),
	("values",		ctypes.POINTER(ctypes.c_double)),
	("n_values",		ctypes.c_int),] )

_gtk_range_get_stop_positions = _rpythonic_function_(		"_gtk_range_get_stop_positions", ctypes.c_int, [
	("C_range",		ctypes.POINTER(_GtkRange)),
	("values",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),] )

_gtk_range_set_steppers = _rpythonic_function_(		"_gtk_range_set_steppers", ctypes.c_void_p, [
	("C_range",		ctypes.POINTER(_GtkRange)),
	("has_a",		ctypes.c_int),
	("has_b",		ctypes.c_int),
	("has_c",		ctypes.c_int),
	("has_d",		ctypes.c_int),] )

format_value = _rpythonic_function_(		"format_value", ctypes.POINTER(ctypes.c_char), [
	("scale",		ctypes.POINTER(_GtkScale)),
	("value",		ctypes.c_double),] )

draw_value = _rpythonic_function_(		"draw_value", ctypes.c_void_p, [
	("scale",		ctypes.POINTER(_GtkScale)),] )

get_layout_offsets = _rpythonic_function_(		"get_layout_offsets", ctypes.c_void_p, [
	("scale",		ctypes.POINTER(_GtkScale)),
	("x",		ctypes.POINTER(ctypes.c_int)),
	("y",		ctypes.POINTER(ctypes.c_int)),] )

gtk_scale_get_type = _rpythonic_function_(		"gtk_scale_get_type", ctypes.c_uint, [] )

gtk_scale_new = _rpythonic_function_(		"gtk_scale_new", ctypes.POINTER(_GtkWidget), [
	("orientation",		ctypes.c_int),
	("adjustment",		ctypes.POINTER(_GtkAdjustment)),] )

gtk_scale_new_with_range = _rpythonic_function_(		"gtk_scale_new_with_range", ctypes.POINTER(_GtkWidget), [
	("orientation",		ctypes.c_int),
	("min",		ctypes.c_double),
	("max",		ctypes.c_double),
	("step",		ctypes.c_double),] )

gtk_scale_set_digits = _rpythonic_function_(		"gtk_scale_set_digits", ctypes.c_void_p, [
	("scale",		ctypes.POINTER(_GtkScale)),
	("digits",		ctypes.c_int),] )

gtk_scale_get_digits = _rpythonic_function_(		"gtk_scale_get_digits", ctypes.c_int, [
	("scale",		ctypes.POINTER(_GtkScale)),] )

gtk_scale_set_draw_value = _rpythonic_function_(		"gtk_scale_set_draw_value", ctypes.c_void_p, [
	("scale",		ctypes.POINTER(_GtkScale)),
	("draw_value",		ctypes.c_int),] )

gtk_scale_get_draw_value = _rpythonic_function_(		"gtk_scale_get_draw_value", ctypes.c_int, [
	("scale",		ctypes.POINTER(_GtkScale)),] )

gtk_scale_set_value_pos = _rpythonic_function_(		"gtk_scale_set_value_pos", ctypes.c_void_p, [
	("scale",		ctypes.POINTER(_GtkScale)),
	("pos",		ctypes.c_int),] )

gtk_scale_get_value_pos = _rpythonic_function_(		"gtk_scale_get_value_pos", ctypes.c_int, [
	("scale",		ctypes.POINTER(_GtkScale)),] )

gtk_scale_get_layout = _rpythonic_function_(		"gtk_scale_get_layout", ctypes.POINTER(_PangoLayout), [
	("scale",		ctypes.POINTER(_GtkScale)),] )

gtk_scale_get_layout_offsets = _rpythonic_function_(		"gtk_scale_get_layout_offsets", ctypes.c_void_p, [
	("scale",		ctypes.POINTER(_GtkScale)),
	("x",		ctypes.POINTER(ctypes.c_int)),
	("y",		ctypes.POINTER(ctypes.c_int)),] )

gtk_scale_add_mark = _rpythonic_function_(		"gtk_scale_add_mark", ctypes.c_void_p, [
	("scale",		ctypes.POINTER(_GtkScale)),
	("value",		ctypes.c_double),
	("position",		ctypes.c_int),
	("markup",		ctypes.POINTER(ctypes.c_char)),] )

gtk_scale_clear_marks = _rpythonic_function_(		"gtk_scale_clear_marks", ctypes.c_void_p, [
	("scale",		ctypes.POINTER(_GtkScale)),] )

gtk_hscale_get_type = _rpythonic_function_(		"gtk_hscale_get_type", ctypes.c_uint, [] )

gtk_hscale_new = _rpythonic_function_(		"gtk_hscale_new", ctypes.POINTER(_GtkWidget), [
	("adjustment",		ctypes.POINTER(_GtkAdjustment)),] )

gtk_hscale_new_with_range = _rpythonic_function_(		"gtk_hscale_new_with_range", ctypes.POINTER(_GtkWidget), [
	("min",		ctypes.c_double),
	("max",		ctypes.c_double),
	("step",		ctypes.c_double),] )

gtk_scrollbar_get_type = _rpythonic_function_(		"gtk_scrollbar_get_type", ctypes.c_uint, [] )

gtk_scrollbar_new = _rpythonic_function_(		"gtk_scrollbar_new", ctypes.POINTER(_GtkWidget), [
	("orientation",		ctypes.c_int),
	("adjustment",		ctypes.POINTER(_GtkAdjustment)),] )

gtk_hscrollbar_get_type = _rpythonic_function_(		"gtk_hscrollbar_get_type", ctypes.c_uint, [] )

gtk_hscrollbar_new = _rpythonic_function_(		"gtk_hscrollbar_new", ctypes.POINTER(_GtkWidget), [
	("adjustment",		ctypes.POINTER(_GtkAdjustment)),] )

gtk_separator_get_type = _rpythonic_function_(		"gtk_separator_get_type", ctypes.c_uint, [] )

gtk_separator_new = _rpythonic_function_(		"gtk_separator_new", ctypes.POINTER(_GtkWidget), [
	("orientation",		ctypes.c_int),] )

gtk_hseparator_get_type = _rpythonic_function_(		"gtk_hseparator_get_type", ctypes.c_uint, [] )

gtk_hseparator_new = _rpythonic_function_(		"gtk_hseparator_new", ctypes.POINTER(_GtkWidget), [] )

gtk_hsv_get_type = _rpythonic_function_(		"gtk_hsv_get_type", ctypes.c_uint, [] )

gtk_hsv_new = _rpythonic_function_(		"gtk_hsv_new", ctypes.POINTER(_GtkWidget), [] )

gtk_hsv_set_color = _rpythonic_function_(		"gtk_hsv_set_color", ctypes.c_void_p, [
	("hsv",		ctypes.POINTER(_GtkHSV)),
	("h",		ctypes.c_double),
	("s",		ctypes.c_double),
	("v",		ctypes.c_double),] )

gtk_hsv_get_color = _rpythonic_function_(		"gtk_hsv_get_color", ctypes.c_void_p, [
	("hsv",		ctypes.POINTER(_GtkHSV)),
	("h",		ctypes.POINTER(ctypes.c_double)),
	("s",		ctypes.POINTER(ctypes.c_double)),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

gtk_hsv_set_metrics = _rpythonic_function_(		"gtk_hsv_set_metrics", ctypes.c_void_p, [
	("hsv",		ctypes.POINTER(_GtkHSV)),
	("size",		ctypes.c_int),
	("ring_width",		ctypes.c_int),] )

gtk_hsv_get_metrics = _rpythonic_function_(		"gtk_hsv_get_metrics", ctypes.c_void_p, [
	("hsv",		ctypes.POINTER(_GtkHSV)),
	("size",		ctypes.POINTER(ctypes.c_int)),
	("ring_width",		ctypes.POINTER(ctypes.c_int)),] )

gtk_hsv_is_adjusting = _rpythonic_function_(		"gtk_hsv_is_adjusting", ctypes.c_int, [
	("hsv",		ctypes.POINTER(_GtkHSV)),] )

gtk_hsv_to_rgb = _rpythonic_function_(		"gtk_hsv_to_rgb", ctypes.c_void_p, [
	("h",		ctypes.c_double),
	("s",		ctypes.c_double),
	("v",		ctypes.c_double),
	("r",		ctypes.POINTER(ctypes.c_double)),
	("g",		ctypes.POINTER(ctypes.c_double)),
	("b",		ctypes.POINTER(ctypes.c_double)),] )

gtk_rgb_to_hsv = _rpythonic_function_(		"gtk_rgb_to_hsv", ctypes.c_void_p, [
	("r",		ctypes.c_double),
	("g",		ctypes.c_double),
	("b",		ctypes.c_double),
	("h",		ctypes.POINTER(ctypes.c_double)),
	("s",		ctypes.POINTER(ctypes.c_double)),
	("v",		ctypes.POINTER(ctypes.c_double)),] )

gtk_icon_theme_error_quark = _rpythonic_function_(		"gtk_icon_theme_error_quark", ctypes.c_uint, [] )

gtk_icon_theme_get_type = _rpythonic_function_(		"gtk_icon_theme_get_type", ctypes.c_uint, [] )

gtk_icon_theme_new = _rpythonic_function_(		"gtk_icon_theme_new", ctypes.POINTER(_GtkIconTheme), [] )

gtk_icon_theme_get_default = _rpythonic_function_(		"gtk_icon_theme_get_default", ctypes.POINTER(_GtkIconTheme), [] )

gtk_icon_theme_get_for_screen = _rpythonic_function_(		"gtk_icon_theme_get_for_screen", ctypes.POINTER(_GtkIconTheme), [
	("screen",		ctypes.POINTER(_GdkScreen)),] )

gtk_icon_theme_set_screen = _rpythonic_function_(		"gtk_icon_theme_set_screen", ctypes.c_void_p, [
	("icon_theme",		ctypes.POINTER(_GtkIconTheme)),
	("screen",		ctypes.POINTER(_GdkScreen)),] )

gtk_icon_theme_set_search_path = _rpythonic_function_(		"gtk_icon_theme_set_search_path", ctypes.c_void_p, [
	("icon_theme",		ctypes.POINTER(_GtkIconTheme)),
	("path",		ctypes.POINTER(ctypes.c_char)),
	("n_elements",		ctypes.c_int),] )

gtk_icon_theme_get_search_path = _rpythonic_function_(		"gtk_icon_theme_get_search_path", ctypes.c_void_p, [
	("icon_theme",		ctypes.POINTER(_GtkIconTheme)),
	("path",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("n_elements",		ctypes.POINTER(ctypes.c_int)),] )

gtk_icon_theme_append_search_path = _rpythonic_function_(		"gtk_icon_theme_append_search_path", ctypes.c_void_p, [
	("icon_theme",		ctypes.POINTER(_GtkIconTheme)),
	("path",		ctypes.POINTER(ctypes.c_char)),] )

gtk_icon_theme_prepend_search_path = _rpythonic_function_(		"gtk_icon_theme_prepend_search_path", ctypes.c_void_p, [
	("icon_theme",		ctypes.POINTER(_GtkIconTheme)),
	("path",		ctypes.POINTER(ctypes.c_char)),] )

gtk_icon_theme_set_custom_theme = _rpythonic_function_(		"gtk_icon_theme_set_custom_theme", ctypes.c_void_p, [
	("icon_theme",		ctypes.POINTER(_GtkIconTheme)),
	("theme_name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_icon_theme_has_icon = _rpythonic_function_(		"gtk_icon_theme_has_icon", ctypes.c_int, [
	("icon_theme",		ctypes.POINTER(_GtkIconTheme)),
	("icon_name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_icon_theme_get_icon_sizes = _rpythonic_function_(		"gtk_icon_theme_get_icon_sizes", ctypes.POINTER(ctypes.c_int), [
	("icon_theme",		ctypes.POINTER(_GtkIconTheme)),
	("icon_name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_icon_theme_lookup_icon = _rpythonic_function_(		"gtk_icon_theme_lookup_icon", ctypes.POINTER(_GtkIconInfo), [
	("icon_theme",		ctypes.POINTER(_GtkIconTheme)),
	("icon_name",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_int),
	("flags",		ctypes.c_int),] )

gtk_icon_theme_choose_icon = _rpythonic_function_(		"gtk_icon_theme_choose_icon", ctypes.POINTER(_GtkIconInfo), [
	("icon_theme",		ctypes.POINTER(_GtkIconTheme)),
	("icon_names",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_int),
	("flags",		ctypes.c_int),] )

gtk_icon_theme_load_icon = _rpythonic_function_(		"gtk_icon_theme_load_icon", ctypes.POINTER(_GdkPixbuf), [
	("icon_theme",		ctypes.POINTER(_GtkIconTheme)),
	("icon_name",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_icon_theme_lookup_by_gicon = _rpythonic_function_(		"gtk_icon_theme_lookup_by_gicon", ctypes.POINTER(_GtkIconInfo), [
	("icon_theme",		ctypes.POINTER(_GtkIconTheme)),
	("icon",		ctypes.POINTER(_GIcon)),
	("size",		ctypes.c_int),
	("flags",		ctypes.c_int),] )

gtk_icon_theme_list_icons = _rpythonic_function_(		"gtk_icon_theme_list_icons", ctypes.POINTER(_GList), [
	("icon_theme",		ctypes.POINTER(_GtkIconTheme)),
	("context",		ctypes.POINTER(ctypes.c_char)),] )

gtk_icon_theme_list_contexts = _rpythonic_function_(		"gtk_icon_theme_list_contexts", ctypes.POINTER(_GList), [
	("icon_theme",		ctypes.POINTER(_GtkIconTheme)),] )

gtk_icon_theme_get_example_icon_name = _rpythonic_function_(		"gtk_icon_theme_get_example_icon_name", ctypes.POINTER(ctypes.c_char), [
	("icon_theme",		ctypes.POINTER(_GtkIconTheme)),] )

gtk_icon_theme_rescan_if_needed = _rpythonic_function_(		"gtk_icon_theme_rescan_if_needed", ctypes.c_int, [
	("icon_theme",		ctypes.POINTER(_GtkIconTheme)),] )

gtk_icon_theme_add_builtin_icon = _rpythonic_function_(		"gtk_icon_theme_add_builtin_icon", ctypes.c_void_p, [
	("icon_name",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_int),
	("pixbuf",		ctypes.POINTER(_GdkPixbuf)),] )

gtk_icon_info_get_type = _rpythonic_function_(		"gtk_icon_info_get_type", ctypes.c_uint, [] )

gtk_icon_info_copy = _rpythonic_function_(		"gtk_icon_info_copy", ctypes.POINTER(_GtkIconInfo), [
	("icon_info",		ctypes.POINTER(_GtkIconInfo)),] )

gtk_icon_info_free = _rpythonic_function_(		"gtk_icon_info_free", ctypes.c_void_p, [
	("icon_info",		ctypes.POINTER(_GtkIconInfo)),] )

gtk_icon_info_new_for_pixbuf = _rpythonic_function_(		"gtk_icon_info_new_for_pixbuf", ctypes.POINTER(_GtkIconInfo), [
	("icon_theme",		ctypes.POINTER(_GtkIconTheme)),
	("pixbuf",		ctypes.POINTER(_GdkPixbuf)),] )

gtk_icon_info_get_base_size = _rpythonic_function_(		"gtk_icon_info_get_base_size", ctypes.c_int, [
	("icon_info",		ctypes.POINTER(_GtkIconInfo)),] )

gtk_icon_info_get_filename = _rpythonic_function_(		"gtk_icon_info_get_filename", ctypes.POINTER(ctypes.c_char), [
	("icon_info",		ctypes.POINTER(_GtkIconInfo)),] )

gtk_icon_info_get_builtin_pixbuf = _rpythonic_function_(		"gtk_icon_info_get_builtin_pixbuf", ctypes.POINTER(_GdkPixbuf), [
	("icon_info",		ctypes.POINTER(_GtkIconInfo)),] )

gtk_icon_info_load_icon = _rpythonic_function_(		"gtk_icon_info_load_icon", ctypes.POINTER(_GdkPixbuf), [
	("icon_info",		ctypes.POINTER(_GtkIconInfo)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_icon_info_load_symbolic = _rpythonic_function_(		"gtk_icon_info_load_symbolic", ctypes.POINTER(_GdkPixbuf), [
	("icon_info",		ctypes.POINTER(_GtkIconInfo)),
	("fg",		ctypes.POINTER(_GdkRGBA)),
	("success_color",		ctypes.POINTER(_GdkRGBA)),
	("warning_color",		ctypes.POINTER(_GdkRGBA)),
	("error_color",		ctypes.POINTER(_GdkRGBA)),
	("was_symbolic",		ctypes.POINTER(ctypes.c_int)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_icon_info_load_symbolic_for_context = _rpythonic_function_(		"gtk_icon_info_load_symbolic_for_context", ctypes.POINTER(_GdkPixbuf), [
	("icon_info",		ctypes.POINTER(_GtkIconInfo)),
	("context",		ctypes.POINTER(_GtkStyleContext)),
	("was_symbolic",		ctypes.POINTER(ctypes.c_int)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_icon_info_load_symbolic_for_style = _rpythonic_function_(		"gtk_icon_info_load_symbolic_for_style", ctypes.POINTER(_GdkPixbuf), [
	("icon_info",		ctypes.POINTER(_GtkIconInfo)),
	("style",		ctypes.POINTER(_GtkStyle)),
	("state",		ctypes.c_int),
	("was_symbolic",		ctypes.POINTER(ctypes.c_int)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_icon_info_set_raw_coordinates = _rpythonic_function_(		"gtk_icon_info_set_raw_coordinates", ctypes.c_void_p, [
	("icon_info",		ctypes.POINTER(_GtkIconInfo)),
	("raw_coordinates",		ctypes.c_int),] )

gtk_icon_info_get_embedded_rect = _rpythonic_function_(		"gtk_icon_info_get_embedded_rect", ctypes.c_int, [
	("icon_info",		ctypes.POINTER(_GtkIconInfo)),
	("rectangle",		ctypes.POINTER(_cairo_rectangle_int)),] )

gtk_icon_info_get_attach_points = _rpythonic_function_(		"gtk_icon_info_get_attach_points", ctypes.c_int, [
	("icon_info",		ctypes.POINTER(_GtkIconInfo)),
	("points",		ctypes.POINTER(ctypes.POINTER(_GdkPoint))),
	("n_points",		ctypes.POINTER(ctypes.c_int)),] )

gtk_icon_info_get_display_name = _rpythonic_function_(		"gtk_icon_info_get_display_name", ctypes.POINTER(ctypes.c_char), [
	("icon_info",		ctypes.POINTER(_GtkIconInfo)),] )

_gtk_icon_theme_check_reload = _rpythonic_function_(		"_gtk_icon_theme_check_reload", ctypes.c_void_p, [
	("display",		ctypes.POINTER(_GdkDisplay)),] )

_gtk_icon_theme_ensure_builtin_cache = _rpythonic_function_(		"_gtk_icon_theme_ensure_builtin_cache", ctypes.c_void_p, [] )

gtk_tooltip_get_type = _rpythonic_function_(		"gtk_tooltip_get_type", ctypes.c_uint, [] )

gtk_tooltip_set_markup = _rpythonic_function_(		"gtk_tooltip_set_markup", ctypes.c_void_p, [
	("tooltip",		ctypes.POINTER(_GtkTooltip)),
	("markup",		ctypes.POINTER(ctypes.c_char)),] )

gtk_tooltip_set_text = _rpythonic_function_(		"gtk_tooltip_set_text", ctypes.c_void_p, [
	("tooltip",		ctypes.POINTER(_GtkTooltip)),
	("text",		ctypes.POINTER(ctypes.c_char)),] )

gtk_tooltip_set_icon = _rpythonic_function_(		"gtk_tooltip_set_icon", ctypes.c_void_p, [
	("tooltip",		ctypes.POINTER(_GtkTooltip)),
	("pixbuf",		ctypes.POINTER(_GdkPixbuf)),] )

gtk_tooltip_set_icon_from_stock = _rpythonic_function_(		"gtk_tooltip_set_icon_from_stock", ctypes.c_void_p, [
	("tooltip",		ctypes.POINTER(_GtkTooltip)),
	("stock_id",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_int),] )

gtk_tooltip_set_icon_from_icon_name = _rpythonic_function_(		"gtk_tooltip_set_icon_from_icon_name", ctypes.c_void_p, [
	("tooltip",		ctypes.POINTER(_GtkTooltip)),
	("icon_name",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_int),] )

gtk_tooltip_set_icon_from_gicon = _rpythonic_function_(		"gtk_tooltip_set_icon_from_gicon", ctypes.c_void_p, [
	("tooltip",		ctypes.POINTER(_GtkTooltip)),
	("gicon",		ctypes.POINTER(_GIcon)),
	("size",		ctypes.c_int),] )

gtk_tooltip_set_custom = _rpythonic_function_(		"gtk_tooltip_set_custom", ctypes.c_void_p, [
	("tooltip",		ctypes.POINTER(_GtkTooltip)),
	("custom_widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_tooltip_set_tip_area = _rpythonic_function_(		"gtk_tooltip_set_tip_area", ctypes.c_void_p, [
	("tooltip",		ctypes.POINTER(_GtkTooltip)),
	("rect",		ctypes.POINTER(_cairo_rectangle_int)),] )

gtk_tooltip_trigger_tooltip_query = _rpythonic_function_(		"gtk_tooltip_trigger_tooltip_query", ctypes.c_void_p, [
	("display",		ctypes.POINTER(_GdkDisplay)),] )

_gtk_tooltip_focus_in = _rpythonic_function_(		"_gtk_tooltip_focus_in", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

_gtk_tooltip_focus_out = _rpythonic_function_(		"_gtk_tooltip_focus_out", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

_gtk_tooltip_toggle_keyboard_mode = _rpythonic_function_(		"_gtk_tooltip_toggle_keyboard_mode", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

_gtk_tooltip_handle_event = _rpythonic_function_(		"_gtk_tooltip_handle_event", ctypes.c_void_p, [
	("event",		ctypes.POINTER(_GdkEvent)),] )

_gtk_tooltip_hide = _rpythonic_function_(		"_gtk_tooltip_hide", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

_gtk_widget_find_at_coords = _rpythonic_function_(		"_gtk_widget_find_at_coords", ctypes.POINTER(_GtkWidget), [
	("window",		ctypes.POINTER(_GdkWindow)),
	("window_x",		ctypes.c_int),
	("window_y",		ctypes.c_int),
	("widget_x",		ctypes.POINTER(ctypes.c_int)),
	("widget_y",		ctypes.POINTER(ctypes.c_int)),] )

GtkIconViewForeachFunc = _rpythonic_function_(		"GtkIconViewForeachFunc", ctypes.c_void_p, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),
	("path",		ctypes.POINTER(_GtkTreePath)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

item_activated = _rpythonic_function_(		"item_activated", ctypes.c_void_p, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),
	("path",		ctypes.POINTER(_GtkTreePath)),] )

select_cursor_item = _rpythonic_function_(		"select_cursor_item", ctypes.c_void_p, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),] )

toggle_cursor_item = _rpythonic_function_(		"toggle_cursor_item", ctypes.c_void_p, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),] )

activate_cursor_item = _rpythonic_function_(		"activate_cursor_item", ctypes.c_int, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),] )

gtk_icon_view_new = _rpythonic_function_(		"gtk_icon_view_new", ctypes.POINTER(_GtkWidget), [] )

gtk_icon_view_get_type = _rpythonic_function_(		"gtk_icon_view_get_type", ctypes.c_uint, [] )

gtk_icon_view_new_with_area = _rpythonic_function_(		"gtk_icon_view_new_with_area", ctypes.POINTER(_GtkWidget), [
	("area",		ctypes.POINTER(_GtkCellArea)),] )

gtk_icon_view_new_with_model = _rpythonic_function_(		"gtk_icon_view_new_with_model", ctypes.POINTER(_GtkWidget), [
	("model",		ctypes.POINTER(_GtkTreeModel)),] )

gtk_icon_view_set_model = _rpythonic_function_(		"gtk_icon_view_set_model", ctypes.c_void_p, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),
	("model",		ctypes.POINTER(_GtkTreeModel)),] )

gtk_icon_view_get_model = _rpythonic_function_(		"gtk_icon_view_get_model", ctypes.POINTER(_GtkTreeModel), [
	("icon_view",		ctypes.POINTER(_GtkIconView)),] )

gtk_icon_view_set_text_column = _rpythonic_function_(		"gtk_icon_view_set_text_column", ctypes.c_void_p, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),
	("column",		ctypes.c_int),] )

gtk_icon_view_get_text_column = _rpythonic_function_(		"gtk_icon_view_get_text_column", ctypes.c_int, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),] )

gtk_icon_view_set_markup_column = _rpythonic_function_(		"gtk_icon_view_set_markup_column", ctypes.c_void_p, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),
	("column",		ctypes.c_int),] )

gtk_icon_view_get_markup_column = _rpythonic_function_(		"gtk_icon_view_get_markup_column", ctypes.c_int, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),] )

gtk_icon_view_set_pixbuf_column = _rpythonic_function_(		"gtk_icon_view_set_pixbuf_column", ctypes.c_void_p, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),
	("column",		ctypes.c_int),] )

gtk_icon_view_get_pixbuf_column = _rpythonic_function_(		"gtk_icon_view_get_pixbuf_column", ctypes.c_int, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),] )

gtk_icon_view_set_item_orientation = _rpythonic_function_(		"gtk_icon_view_set_item_orientation", ctypes.c_void_p, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),
	("orientation",		ctypes.c_int),] )

gtk_icon_view_get_item_orientation = _rpythonic_function_(		"gtk_icon_view_get_item_orientation", ctypes.c_int, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),] )

gtk_icon_view_set_columns = _rpythonic_function_(		"gtk_icon_view_set_columns", ctypes.c_void_p, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),
	("columns",		ctypes.c_int),] )

gtk_icon_view_get_columns = _rpythonic_function_(		"gtk_icon_view_get_columns", ctypes.c_int, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),] )

gtk_icon_view_set_item_width = _rpythonic_function_(		"gtk_icon_view_set_item_width", ctypes.c_void_p, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),
	("item_width",		ctypes.c_int),] )

gtk_icon_view_get_item_width = _rpythonic_function_(		"gtk_icon_view_get_item_width", ctypes.c_int, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),] )

gtk_icon_view_set_spacing = _rpythonic_function_(		"gtk_icon_view_set_spacing", ctypes.c_void_p, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),
	("spacing",		ctypes.c_int),] )

gtk_icon_view_get_spacing = _rpythonic_function_(		"gtk_icon_view_get_spacing", ctypes.c_int, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),] )

gtk_icon_view_set_row_spacing = _rpythonic_function_(		"gtk_icon_view_set_row_spacing", ctypes.c_void_p, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),
	("row_spacing",		ctypes.c_int),] )

gtk_icon_view_get_row_spacing = _rpythonic_function_(		"gtk_icon_view_get_row_spacing", ctypes.c_int, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),] )

gtk_icon_view_set_column_spacing = _rpythonic_function_(		"gtk_icon_view_set_column_spacing", ctypes.c_void_p, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),
	("column_spacing",		ctypes.c_int),] )

gtk_icon_view_get_column_spacing = _rpythonic_function_(		"gtk_icon_view_get_column_spacing", ctypes.c_int, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),] )

gtk_icon_view_set_margin = _rpythonic_function_(		"gtk_icon_view_set_margin", ctypes.c_void_p, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),
	("margin",		ctypes.c_int),] )

gtk_icon_view_get_margin = _rpythonic_function_(		"gtk_icon_view_get_margin", ctypes.c_int, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),] )

gtk_icon_view_set_item_padding = _rpythonic_function_(		"gtk_icon_view_set_item_padding", ctypes.c_void_p, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),
	("item_padding",		ctypes.c_int),] )

gtk_icon_view_get_item_padding = _rpythonic_function_(		"gtk_icon_view_get_item_padding", ctypes.c_int, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),] )

gtk_icon_view_get_path_at_pos = _rpythonic_function_(		"gtk_icon_view_get_path_at_pos", ctypes.POINTER(_GtkTreePath), [
	("icon_view",		ctypes.POINTER(_GtkIconView)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

gtk_icon_view_get_item_at_pos = _rpythonic_function_(		"gtk_icon_view_get_item_at_pos", ctypes.c_int, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("path",		ctypes.POINTER(ctypes.POINTER(_GtkTreePath))),
	("cell",		ctypes.POINTER(ctypes.POINTER(_GtkCellRenderer))),] )

gtk_icon_view_get_visible_range = _rpythonic_function_(		"gtk_icon_view_get_visible_range", ctypes.c_int, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),
	("start_path",		ctypes.POINTER(ctypes.POINTER(_GtkTreePath))),
	("end_path",		ctypes.POINTER(ctypes.POINTER(_GtkTreePath))),] )

gtk_icon_view_selected_foreach = _rpythonic_function_(		"gtk_icon_view_selected_foreach", ctypes.c_void_p, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GtkIconView),ctypes.POINTER(_GtkTreePath),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

gtk_icon_view_set_selection_mode = _rpythonic_function_(		"gtk_icon_view_set_selection_mode", ctypes.c_void_p, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),
	("mode",		ctypes.c_int),] )

gtk_icon_view_get_selection_mode = _rpythonic_function_(		"gtk_icon_view_get_selection_mode", ctypes.c_int, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),] )

gtk_icon_view_select_path = _rpythonic_function_(		"gtk_icon_view_select_path", ctypes.c_void_p, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),
	("path",		ctypes.POINTER(_GtkTreePath)),] )

gtk_icon_view_unselect_path = _rpythonic_function_(		"gtk_icon_view_unselect_path", ctypes.c_void_p, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),
	("path",		ctypes.POINTER(_GtkTreePath)),] )

gtk_icon_view_path_is_selected = _rpythonic_function_(		"gtk_icon_view_path_is_selected", ctypes.c_int, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),
	("path",		ctypes.POINTER(_GtkTreePath)),] )

gtk_icon_view_get_item_row = _rpythonic_function_(		"gtk_icon_view_get_item_row", ctypes.c_int, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),
	("path",		ctypes.POINTER(_GtkTreePath)),] )

gtk_icon_view_get_item_column = _rpythonic_function_(		"gtk_icon_view_get_item_column", ctypes.c_int, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),
	("path",		ctypes.POINTER(_GtkTreePath)),] )

gtk_icon_view_get_selected_items = _rpythonic_function_(		"gtk_icon_view_get_selected_items", ctypes.POINTER(_GList), [
	("icon_view",		ctypes.POINTER(_GtkIconView)),] )

gtk_icon_view_select_all = _rpythonic_function_(		"gtk_icon_view_select_all", ctypes.c_void_p, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),] )

gtk_icon_view_unselect_all = _rpythonic_function_(		"gtk_icon_view_unselect_all", ctypes.c_void_p, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),] )

gtk_icon_view_item_activated = _rpythonic_function_(		"gtk_icon_view_item_activated", ctypes.c_void_p, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),
	("path",		ctypes.POINTER(_GtkTreePath)),] )

gtk_icon_view_set_cursor = _rpythonic_function_(		"gtk_icon_view_set_cursor", ctypes.c_void_p, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),
	("path",		ctypes.POINTER(_GtkTreePath)),
	("cell",		ctypes.POINTER(_GtkCellRenderer)),
	("start_editing",		ctypes.c_int),] )

gtk_icon_view_get_cursor = _rpythonic_function_(		"gtk_icon_view_get_cursor", ctypes.c_int, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),
	("path",		ctypes.POINTER(ctypes.POINTER(_GtkTreePath))),
	("cell",		ctypes.POINTER(ctypes.POINTER(_GtkCellRenderer))),] )

gtk_icon_view_scroll_to_path = _rpythonic_function_(		"gtk_icon_view_scroll_to_path", ctypes.c_void_p, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),
	("path",		ctypes.POINTER(_GtkTreePath)),
	("use_align",		ctypes.c_int),
	("row_align",		ctypes.c_float),
	("col_align",		ctypes.c_float),] )

gtk_icon_view_enable_model_drag_source = _rpythonic_function_(		"gtk_icon_view_enable_model_drag_source", ctypes.c_void_p, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),
	("start_button_mask",		ctypes.c_int),
	("targets",		ctypes.POINTER(_GtkTargetEntry)),
	("n_targets",		ctypes.c_int),
	("actions",		ctypes.c_int),] )

gtk_icon_view_enable_model_drag_dest = _rpythonic_function_(		"gtk_icon_view_enable_model_drag_dest", ctypes.c_void_p, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),
	("targets",		ctypes.POINTER(_GtkTargetEntry)),
	("n_targets",		ctypes.c_int),
	("actions",		ctypes.c_int),] )

gtk_icon_view_unset_model_drag_source = _rpythonic_function_(		"gtk_icon_view_unset_model_drag_source", ctypes.c_void_p, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),] )

gtk_icon_view_unset_model_drag_dest = _rpythonic_function_(		"gtk_icon_view_unset_model_drag_dest", ctypes.c_void_p, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),] )

gtk_icon_view_set_reorderable = _rpythonic_function_(		"gtk_icon_view_set_reorderable", ctypes.c_void_p, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),
	("reorderable",		ctypes.c_int),] )

gtk_icon_view_get_reorderable = _rpythonic_function_(		"gtk_icon_view_get_reorderable", ctypes.c_int, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),] )

gtk_icon_view_set_drag_dest_item = _rpythonic_function_(		"gtk_icon_view_set_drag_dest_item", ctypes.c_void_p, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),
	("path",		ctypes.POINTER(_GtkTreePath)),
	("pos",		ctypes.c_int),] )

gtk_icon_view_get_drag_dest_item = _rpythonic_function_(		"gtk_icon_view_get_drag_dest_item", ctypes.c_void_p, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),
	("path",		ctypes.POINTER(ctypes.POINTER(_GtkTreePath))),
	("pos",		ctypes.POINTER(ctypes.c_int)),] )

gtk_icon_view_get_dest_item_at_pos = _rpythonic_function_(		"gtk_icon_view_get_dest_item_at_pos", ctypes.c_int, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),
	("drag_x",		ctypes.c_int),
	("drag_y",		ctypes.c_int),
	("path",		ctypes.POINTER(ctypes.POINTER(_GtkTreePath))),
	("pos",		ctypes.POINTER(ctypes.c_int)),] )

gtk_icon_view_create_drag_icon = _rpythonic_function_(		"gtk_icon_view_create_drag_icon", ctypes.POINTER(_cairo_surface), [
	("icon_view",		ctypes.POINTER(_GtkIconView)),
	("path",		ctypes.POINTER(_GtkTreePath)),] )

gtk_icon_view_convert_widget_to_bin_window_coords = _rpythonic_function_(		"gtk_icon_view_convert_widget_to_bin_window_coords", ctypes.c_void_p, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),
	("wx",		ctypes.c_int),
	("wy",		ctypes.c_int),
	("bx",		ctypes.POINTER(ctypes.c_int)),
	("by",		ctypes.POINTER(ctypes.c_int)),] )

gtk_icon_view_set_tooltip_item = _rpythonic_function_(		"gtk_icon_view_set_tooltip_item", ctypes.c_void_p, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),
	("tooltip",		ctypes.POINTER(_GtkTooltip)),
	("path",		ctypes.POINTER(_GtkTreePath)),] )

gtk_icon_view_set_tooltip_cell = _rpythonic_function_(		"gtk_icon_view_set_tooltip_cell", ctypes.c_void_p, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),
	("tooltip",		ctypes.POINTER(_GtkTooltip)),
	("path",		ctypes.POINTER(_GtkTreePath)),
	("cell",		ctypes.POINTER(_GtkCellRenderer)),] )

gtk_icon_view_get_tooltip_context = _rpythonic_function_(		"gtk_icon_view_get_tooltip_context", ctypes.c_int, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),
	("x",		ctypes.POINTER(ctypes.c_int)),
	("y",		ctypes.POINTER(ctypes.c_int)),
	("keyboard_tip",		ctypes.c_int),
	("model",		ctypes.POINTER(ctypes.POINTER(_GtkTreeModel))),
	("path",		ctypes.POINTER(ctypes.POINTER(_GtkTreePath))),
	("iter",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_icon_view_set_tooltip_column = _rpythonic_function_(		"gtk_icon_view_set_tooltip_column", ctypes.c_void_p, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),
	("column",		ctypes.c_int),] )

gtk_icon_view_get_tooltip_column = _rpythonic_function_(		"gtk_icon_view_get_tooltip_column", ctypes.c_int, [
	("icon_view",		ctypes.POINTER(_GtkIconView)),] )

gtk_image_menu_item_get_type = _rpythonic_function_(		"gtk_image_menu_item_get_type", ctypes.c_uint, [] )

gtk_image_menu_item_new = _rpythonic_function_(		"gtk_image_menu_item_new", ctypes.POINTER(_GtkWidget), [] )

gtk_image_menu_item_new_with_label = _rpythonic_function_(		"gtk_image_menu_item_new_with_label", ctypes.POINTER(_GtkWidget), [
	("label",		ctypes.POINTER(ctypes.c_char)),] )

gtk_image_menu_item_new_with_mnemonic = _rpythonic_function_(		"gtk_image_menu_item_new_with_mnemonic", ctypes.POINTER(_GtkWidget), [
	("label",		ctypes.POINTER(ctypes.c_char)),] )

gtk_image_menu_item_new_from_stock = _rpythonic_function_(		"gtk_image_menu_item_new_from_stock", ctypes.POINTER(_GtkWidget), [
	("stock_id",		ctypes.POINTER(ctypes.c_char)),
	("accel_group",		ctypes.POINTER(_GtkAccelGroup)),] )

gtk_image_menu_item_set_always_show_image = _rpythonic_function_(		"gtk_image_menu_item_set_always_show_image", ctypes.c_void_p, [
	("image_menu_item",		ctypes.POINTER(_GtkImageMenuItem)),
	("always_show",		ctypes.c_int),] )

gtk_image_menu_item_get_always_show_image = _rpythonic_function_(		"gtk_image_menu_item_get_always_show_image", ctypes.c_int, [
	("image_menu_item",		ctypes.POINTER(_GtkImageMenuItem)),] )

gtk_image_menu_item_set_image = _rpythonic_function_(		"gtk_image_menu_item_set_image", ctypes.c_void_p, [
	("image_menu_item",		ctypes.POINTER(_GtkImageMenuItem)),
	("image",		ctypes.POINTER(_GtkWidget)),] )

gtk_image_menu_item_get_image = _rpythonic_function_(		"gtk_image_menu_item_get_image", ctypes.POINTER(_GtkWidget), [
	("image_menu_item",		ctypes.POINTER(_GtkImageMenuItem)),] )

gtk_image_menu_item_set_use_stock = _rpythonic_function_(		"gtk_image_menu_item_set_use_stock", ctypes.c_void_p, [
	("image_menu_item",		ctypes.POINTER(_GtkImageMenuItem)),
	("use_stock",		ctypes.c_int),] )

gtk_image_menu_item_get_use_stock = _rpythonic_function_(		"gtk_image_menu_item_get_use_stock", ctypes.c_int, [
	("image_menu_item",		ctypes.POINTER(_GtkImageMenuItem)),] )

gtk_image_menu_item_set_accel_group = _rpythonic_function_(		"gtk_image_menu_item_set_accel_group", ctypes.c_void_p, [
	("image_menu_item",		ctypes.POINTER(_GtkImageMenuItem)),
	("accel_group",		ctypes.POINTER(_GtkAccelGroup)),] )

gtk_im_context_simple_get_type = _rpythonic_function_(		"gtk_im_context_simple_get_type", ctypes.c_uint, [] )

gtk_im_context_simple_new = _rpythonic_function_(		"gtk_im_context_simple_new", ctypes.POINTER(_GtkIMContext), [] )

gtk_im_context_simple_add_table = _rpythonic_function_(		"gtk_im_context_simple_add_table", ctypes.c_void_p, [
	("context_simple",		ctypes.POINTER(_GtkIMContextSimple)),
	("data",		ctypes.POINTER(ctypes.c_ushort)),
	("max_seq_len",		ctypes.c_int),
	("n_seqs",		ctypes.c_int),] )

gtk_im_multicontext_get_type = _rpythonic_function_(		"gtk_im_multicontext_get_type", ctypes.c_uint, [] )

gtk_im_multicontext_new = _rpythonic_function_(		"gtk_im_multicontext_new", ctypes.POINTER(_GtkIMContext), [] )

gtk_im_multicontext_append_menuitems = _rpythonic_function_(		"gtk_im_multicontext_append_menuitems", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkIMMulticontext)),
	("menushell",		ctypes.POINTER(_GtkMenuShell)),] )

gtk_im_multicontext_get_context_id = _rpythonic_function_(		"gtk_im_multicontext_get_context_id", ctypes.POINTER(ctypes.c_char), [
	("context",		ctypes.POINTER(_GtkIMMulticontext)),] )

gtk_im_multicontext_set_context_id = _rpythonic_function_(		"gtk_im_multicontext_set_context_id", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkIMMulticontext)),
	("context_id",		ctypes.POINTER(ctypes.c_char)),] )

gtk_info_bar_get_type = _rpythonic_function_(		"gtk_info_bar_get_type", ctypes.c_uint, [] )

gtk_info_bar_new = _rpythonic_function_(		"gtk_info_bar_new", ctypes.POINTER(_GtkWidget), [] )

gtk_info_bar_get_action_area = _rpythonic_function_(		"gtk_info_bar_get_action_area", ctypes.POINTER(_GtkWidget), [
	("info_bar",		ctypes.POINTER(_GtkInfoBar)),] )

gtk_info_bar_get_content_area = _rpythonic_function_(		"gtk_info_bar_get_content_area", ctypes.POINTER(_GtkWidget), [
	("info_bar",		ctypes.POINTER(_GtkInfoBar)),] )

gtk_info_bar_add_action_widget = _rpythonic_function_(		"gtk_info_bar_add_action_widget", ctypes.c_void_p, [
	("info_bar",		ctypes.POINTER(_GtkInfoBar)),
	("child",		ctypes.POINTER(_GtkWidget)),
	("response_id",		ctypes.c_int),] )

gtk_info_bar_add_button = _rpythonic_function_(		"gtk_info_bar_add_button", ctypes.POINTER(_GtkWidget), [
	("info_bar",		ctypes.POINTER(_GtkInfoBar)),
	("button_text",		ctypes.POINTER(ctypes.c_char)),
	("response_id",		ctypes.c_int),] )

gtk_info_bar_set_response_sensitive = _rpythonic_function_(		"gtk_info_bar_set_response_sensitive", ctypes.c_void_p, [
	("info_bar",		ctypes.POINTER(_GtkInfoBar)),
	("response_id",		ctypes.c_int),
	("setting",		ctypes.c_int),] )

gtk_info_bar_set_default_response = _rpythonic_function_(		"gtk_info_bar_set_default_response", ctypes.c_void_p, [
	("info_bar",		ctypes.POINTER(_GtkInfoBar)),
	("response_id",		ctypes.c_int),] )

gtk_info_bar_response = _rpythonic_function_(		"gtk_info_bar_response", ctypes.c_void_p, [
	("info_bar",		ctypes.POINTER(_GtkInfoBar)),
	("response_id",		ctypes.c_int),] )

gtk_info_bar_set_message_type = _rpythonic_function_(		"gtk_info_bar_set_message_type", ctypes.c_void_p, [
	("info_bar",		ctypes.POINTER(_GtkInfoBar)),
	("message_type",		ctypes.c_int),] )

gtk_info_bar_get_message_type = _rpythonic_function_(		"gtk_info_bar_get_message_type", ctypes.c_int, [
	("info_bar",		ctypes.POINTER(_GtkInfoBar)),] )

gtk_invisible_get_type = _rpythonic_function_(		"gtk_invisible_get_type", ctypes.c_uint, [] )

gtk_invisible_new = _rpythonic_function_(		"gtk_invisible_new", ctypes.POINTER(_GtkWidget), [] )

gtk_invisible_new_for_screen = _rpythonic_function_(		"gtk_invisible_new_for_screen", ctypes.POINTER(_GtkWidget), [
	("screen",		ctypes.POINTER(_GdkScreen)),] )

gtk_invisible_set_screen = _rpythonic_function_(		"gtk_invisible_set_screen", ctypes.c_void_p, [
	("invisible",		ctypes.POINTER(_GtkInvisible)),
	("screen",		ctypes.POINTER(_GdkScreen)),] )

gtk_invisible_get_screen = _rpythonic_function_(		"gtk_invisible_get_screen", ctypes.POINTER(_GdkScreen), [
	("invisible",		ctypes.POINTER(_GtkInvisible)),] )

gtk_layout_get_type = _rpythonic_function_(		"gtk_layout_get_type", ctypes.c_uint, [] )

gtk_layout_new = _rpythonic_function_(		"gtk_layout_new", ctypes.POINTER(_GtkWidget), [
	("hadjustment",		ctypes.POINTER(_GtkAdjustment)),
	("vadjustment",		ctypes.POINTER(_GtkAdjustment)),] )

gtk_layout_get_bin_window = _rpythonic_function_(		"gtk_layout_get_bin_window", ctypes.POINTER(_GdkWindow), [
	("layout",		ctypes.POINTER(_GtkLayout)),] )

gtk_layout_put = _rpythonic_function_(		"gtk_layout_put", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(_GtkLayout)),
	("child_widget",		ctypes.POINTER(_GtkWidget)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

gtk_layout_move = _rpythonic_function_(		"gtk_layout_move", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(_GtkLayout)),
	("child_widget",		ctypes.POINTER(_GtkWidget)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

gtk_layout_set_size = _rpythonic_function_(		"gtk_layout_set_size", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(_GtkLayout)),
	("width",		ctypes.c_uint),
	("height",		ctypes.c_uint),] )

gtk_layout_get_size = _rpythonic_function_(		"gtk_layout_get_size", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(_GtkLayout)),
	("width",		ctypes.POINTER(ctypes.c_uint)),
	("height",		ctypes.POINTER(ctypes.c_uint)),] )

gtk_layout_get_hadjustment = _rpythonic_function_(		"gtk_layout_get_hadjustment", ctypes.POINTER(_GtkAdjustment), [
	("layout",		ctypes.POINTER(_GtkLayout)),] )

gtk_layout_get_vadjustment = _rpythonic_function_(		"gtk_layout_get_vadjustment", ctypes.POINTER(_GtkAdjustment), [
	("layout",		ctypes.POINTER(_GtkLayout)),] )

gtk_layout_set_hadjustment = _rpythonic_function_(		"gtk_layout_set_hadjustment", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(_GtkLayout)),
	("adjustment",		ctypes.POINTER(_GtkAdjustment)),] )

gtk_layout_set_vadjustment = _rpythonic_function_(		"gtk_layout_set_vadjustment", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(_GtkLayout)),
	("adjustment",		ctypes.POINTER(_GtkAdjustment)),] )

_gtk_padding1 = _rpythonic_function_(		"_gtk_padding1", ctypes.c_void_p, [] )

_gtk_padding2 = _rpythonic_function_(		"_gtk_padding2", ctypes.c_void_p, [] )

_gtk_padding3 = _rpythonic_function_(		"_gtk_padding3", ctypes.c_void_p, [] )

_gtk_padding4 = _rpythonic_function_(		"_gtk_padding4", ctypes.c_void_p, [] )

gtk_link_button_get_type = _rpythonic_function_(		"gtk_link_button_get_type", ctypes.c_uint, [] )

gtk_link_button_new = _rpythonic_function_(		"gtk_link_button_new", ctypes.POINTER(_GtkWidget), [
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

gtk_link_button_new_with_label = _rpythonic_function_(		"gtk_link_button_new_with_label", ctypes.POINTER(_GtkWidget), [
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("label",		ctypes.POINTER(ctypes.c_char)),] )

gtk_link_button_get_uri = _rpythonic_function_(		"gtk_link_button_get_uri", ctypes.POINTER(ctypes.c_char), [
	("link_button",		ctypes.POINTER(_GtkLinkButton)),] )

gtk_link_button_set_uri = _rpythonic_function_(		"gtk_link_button_set_uri", ctypes.c_void_p, [
	("link_button",		ctypes.POINTER(_GtkLinkButton)),
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

gtk_link_button_get_visited = _rpythonic_function_(		"gtk_link_button_get_visited", ctypes.c_int, [
	("link_button",		ctypes.POINTER(_GtkLinkButton)),] )

gtk_link_button_set_visited = _rpythonic_function_(		"gtk_link_button_set_visited", ctypes.c_void_p, [
	("link_button",		ctypes.POINTER(_GtkLinkButton)),
	("visited",		ctypes.c_int),] )

reserved0 = _rpythonic_function_(		"reserved0", ctypes.c_void_p, [] )

reserved5 = _rpythonic_function_(		"reserved5", ctypes.c_void_p, [] )

reserved6 = _rpythonic_function_(		"reserved6", ctypes.c_void_p, [] )

reserved7 = _rpythonic_function_(		"reserved7", ctypes.c_void_p, [] )

gtk_lock_button_get_type = _rpythonic_function_(		"gtk_lock_button_get_type", ctypes.c_uint, [] )

gtk_lock_button_new = _rpythonic_function_(		"gtk_lock_button_new", ctypes.POINTER(_GtkWidget), [
	("permission",		ctypes.POINTER(_GPermission)),] )

gtk_lock_button_get_permission = _rpythonic_function_(		"gtk_lock_button_get_permission", ctypes.POINTER(_GPermission), [
	("button",		ctypes.POINTER(_GtkLockButton)),] )

gtk_lock_button_set_permission = _rpythonic_function_(		"gtk_lock_button_set_permission", ctypes.c_void_p, [
	("button",		ctypes.POINTER(_GtkLockButton)),
	("permission",		ctypes.POINTER(_GPermission)),] )

GtkKeySnoopFunc = _rpythonic_function_(		"GtkKeySnoopFunc", ctypes.c_int, [
	("grab_widget",		ctypes.POINTER(_GtkWidget)),
	("event",		ctypes.POINTER(_GdkEventKey)),
	("func_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gtk_get_major_version = _rpythonic_function_(		"gtk_get_major_version", ctypes.c_uint, [] )

gtk_get_minor_version = _rpythonic_function_(		"gtk_get_minor_version", ctypes.c_uint, [] )

gtk_get_micro_version = _rpythonic_function_(		"gtk_get_micro_version", ctypes.c_uint, [] )

gtk_get_binary_age = _rpythonic_function_(		"gtk_get_binary_age", ctypes.c_uint, [] )

gtk_get_interface_age = _rpythonic_function_(		"gtk_get_interface_age", ctypes.c_uint, [] )

gtk_check_version = _rpythonic_function_(		"gtk_check_version", ctypes.POINTER(ctypes.c_char), [
	("required_major",		ctypes.c_uint),
	("required_minor",		ctypes.c_uint),
	("required_micro",		ctypes.c_uint),] )

gtk_parse_args = _rpythonic_function_(		"gtk_parse_args", ctypes.c_int, [
	("argc",		ctypes.POINTER(ctypes.c_int)),
	("argv",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(ctypes.c_char)))),] )

gtk_init = _rpythonic_function_(		"gtk_init", ctypes.c_void_p, [
	("argc",		ctypes.POINTER(ctypes.c_int)),
	("argv",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(ctypes.c_char)))),] )

gtk_init_check = _rpythonic_function_(		"gtk_init_check", ctypes.c_int, [
	("argc",		ctypes.POINTER(ctypes.c_int)),
	("argv",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(ctypes.c_char)))),] )

gtk_init_with_args = _rpythonic_function_(		"gtk_init_with_args", ctypes.c_int, [
	("argc",		ctypes.POINTER(ctypes.c_int)),
	("argv",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(ctypes.c_char)))),
	("parameter_string",		ctypes.POINTER(ctypes.c_char)),
	("entries",		ctypes.POINTER(_GOptionEntry)),
	("translation_domain",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_get_option_group = _rpythonic_function_(		"gtk_get_option_group", ctypes.POINTER(_GOptionGroup), [
	("open_default_display",		ctypes.c_int),] )

gtk_disable_setlocale = _rpythonic_function_(		"gtk_disable_setlocale", ctypes.c_void_p, [] )

gtk_get_default_language = _rpythonic_function_(		"gtk_get_default_language", ctypes.POINTER(_PangoLanguage), [] )

gtk_events_pending = _rpythonic_function_(		"gtk_events_pending", ctypes.c_int, [] )

gtk_main_do_event = _rpythonic_function_(		"gtk_main_do_event", ctypes.c_void_p, [
	("event",		ctypes.POINTER(_GdkEvent)),] )

gtk_main = _rpythonic_function_(		"gtk_main", ctypes.c_void_p, [] )

gtk_main_level = _rpythonic_function_(		"gtk_main_level", ctypes.c_uint, [] )

gtk_main_quit = _rpythonic_function_(		"gtk_main_quit", ctypes.c_void_p, [] )

gtk_main_iteration = _rpythonic_function_(		"gtk_main_iteration", ctypes.c_int, [] )

gtk_main_iteration_do = _rpythonic_function_(		"gtk_main_iteration_do", ctypes.c_int, [
	("blocking",		ctypes.c_int),] )

gtk_true = _rpythonic_function_(		"gtk_true", ctypes.c_int, [] )

gtk_false = _rpythonic_function_(		"gtk_false", ctypes.c_int, [] )

gtk_grab_add = _rpythonic_function_(		"gtk_grab_add", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_grab_get_current = _rpythonic_function_(		"gtk_grab_get_current", ctypes.POINTER(_GtkWidget), [] )

gtk_grab_remove = _rpythonic_function_(		"gtk_grab_remove", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_device_grab_add = _rpythonic_function_(		"gtk_device_grab_add", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("device",		ctypes.POINTER(_GdkDevice)),
	("block_others",		ctypes.c_int),] )

gtk_device_grab_remove = _rpythonic_function_(		"gtk_device_grab_remove", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("device",		ctypes.POINTER(_GdkDevice)),] )

gtk_key_snooper_install = _rpythonic_function_(		"gtk_key_snooper_install", ctypes.c_uint, [
	("snooper",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GtkWidget),ctypes.POINTER(_GdkEventKey),ctypes.POINTER(ctypes.c_void_p),)),
	("func_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gtk_key_snooper_remove = _rpythonic_function_(		"gtk_key_snooper_remove", ctypes.c_void_p, [
	("snooper_handler_id",		ctypes.c_uint),] )

gtk_get_current_event = _rpythonic_function_(		"gtk_get_current_event", ctypes.POINTER(_GdkEvent), [] )

gtk_get_current_event_time = _rpythonic_function_(		"gtk_get_current_event_time", ctypes.c_uint, [] )

gtk_get_current_event_state = _rpythonic_function_(		"gtk_get_current_event_state", ctypes.c_int, [
	("state",		ctypes.POINTER(ctypes.c_int)),] )

gtk_get_current_event_device = _rpythonic_function_(		"gtk_get_current_event_device", ctypes.POINTER(_GdkDevice), [] )

gtk_get_event_widget = _rpythonic_function_(		"gtk_get_event_widget", ctypes.POINTER(_GtkWidget), [
	("event",		ctypes.POINTER(_GdkEvent)),] )

gtk_propagate_event = _rpythonic_function_(		"gtk_propagate_event", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("event",		ctypes.POINTER(_GdkEvent)),] )

gtk_menu_bar_get_type = _rpythonic_function_(		"gtk_menu_bar_get_type", ctypes.c_uint, [] )

gtk_menu_bar_new = _rpythonic_function_(		"gtk_menu_bar_new", ctypes.POINTER(_GtkWidget), [] )

gtk_menu_bar_get_pack_direction = _rpythonic_function_(		"gtk_menu_bar_get_pack_direction", ctypes.c_int, [
	("menubar",		ctypes.POINTER(_GtkMenuBar)),] )

gtk_menu_bar_set_pack_direction = _rpythonic_function_(		"gtk_menu_bar_set_pack_direction", ctypes.c_void_p, [
	("menubar",		ctypes.POINTER(_GtkMenuBar)),
	("pack_dir",		ctypes.c_int),] )

gtk_menu_bar_get_child_pack_direction = _rpythonic_function_(		"gtk_menu_bar_get_child_pack_direction", ctypes.c_int, [
	("menubar",		ctypes.POINTER(_GtkMenuBar)),] )

gtk_menu_bar_set_child_pack_direction = _rpythonic_function_(		"gtk_menu_bar_set_child_pack_direction", ctypes.c_void_p, [
	("menubar",		ctypes.POINTER(_GtkMenuBar)),
	("child_pack_dir",		ctypes.c_int),] )

_gtk_menu_bar_cycle_focus = _rpythonic_function_(		"_gtk_menu_bar_cycle_focus", ctypes.c_void_p, [
	("menubar",		ctypes.POINTER(_GtkMenuBar)),
	("dir",		ctypes.c_int),] )

gtk_size_group_get_type = _rpythonic_function_(		"gtk_size_group_get_type", ctypes.c_uint, [] )

gtk_size_group_new = _rpythonic_function_(		"gtk_size_group_new", ctypes.POINTER(_GtkSizeGroup), [
	("mode",		ctypes.c_int),] )

gtk_size_group_set_mode = _rpythonic_function_(		"gtk_size_group_set_mode", ctypes.c_void_p, [
	("size_group",		ctypes.POINTER(_GtkSizeGroup)),
	("mode",		ctypes.c_int),] )

gtk_size_group_get_mode = _rpythonic_function_(		"gtk_size_group_get_mode", ctypes.c_int, [
	("size_group",		ctypes.POINTER(_GtkSizeGroup)),] )

gtk_size_group_set_ignore_hidden = _rpythonic_function_(		"gtk_size_group_set_ignore_hidden", ctypes.c_void_p, [
	("size_group",		ctypes.POINTER(_GtkSizeGroup)),
	("ignore_hidden",		ctypes.c_int),] )

gtk_size_group_get_ignore_hidden = _rpythonic_function_(		"gtk_size_group_get_ignore_hidden", ctypes.c_int, [
	("size_group",		ctypes.POINTER(_GtkSizeGroup)),] )

gtk_size_group_add_widget = _rpythonic_function_(		"gtk_size_group_add_widget", ctypes.c_void_p, [
	("size_group",		ctypes.POINTER(_GtkSizeGroup)),
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_size_group_remove_widget = _rpythonic_function_(		"gtk_size_group_remove_widget", ctypes.c_void_p, [
	("size_group",		ctypes.POINTER(_GtkSizeGroup)),
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_size_group_get_widgets = _rpythonic_function_(		"gtk_size_group_get_widgets", ctypes.POINTER(_GSList), [
	("size_group",		ctypes.POINTER(_GtkSizeGroup)),] )

create_menu_proxy = _rpythonic_function_(		"create_menu_proxy", ctypes.c_int, [
	("tool_item",		ctypes.POINTER(_GtkToolItem)),] )

toolbar_reconfigured = _rpythonic_function_(		"toolbar_reconfigured", ctypes.c_void_p, [
	("tool_item",		ctypes.POINTER(_GtkToolItem)),] )

gtk_tool_item_get_type = _rpythonic_function_(		"gtk_tool_item_get_type", ctypes.c_uint, [] )

gtk_tool_item_new = _rpythonic_function_(		"gtk_tool_item_new", ctypes.POINTER(_GtkToolItem), [] )

gtk_tool_item_set_homogeneous = _rpythonic_function_(		"gtk_tool_item_set_homogeneous", ctypes.c_void_p, [
	("tool_item",		ctypes.POINTER(_GtkToolItem)),
	("homogeneous",		ctypes.c_int),] )

gtk_tool_item_get_homogeneous = _rpythonic_function_(		"gtk_tool_item_get_homogeneous", ctypes.c_int, [
	("tool_item",		ctypes.POINTER(_GtkToolItem)),] )

gtk_tool_item_set_expand = _rpythonic_function_(		"gtk_tool_item_set_expand", ctypes.c_void_p, [
	("tool_item",		ctypes.POINTER(_GtkToolItem)),
	("expand",		ctypes.c_int),] )

gtk_tool_item_get_expand = _rpythonic_function_(		"gtk_tool_item_get_expand", ctypes.c_int, [
	("tool_item",		ctypes.POINTER(_GtkToolItem)),] )

gtk_tool_item_set_tooltip_text = _rpythonic_function_(		"gtk_tool_item_set_tooltip_text", ctypes.c_void_p, [
	("tool_item",		ctypes.POINTER(_GtkToolItem)),
	("text",		ctypes.POINTER(ctypes.c_char)),] )

gtk_tool_item_set_tooltip_markup = _rpythonic_function_(		"gtk_tool_item_set_tooltip_markup", ctypes.c_void_p, [
	("tool_item",		ctypes.POINTER(_GtkToolItem)),
	("markup",		ctypes.POINTER(ctypes.c_char)),] )

gtk_tool_item_set_use_drag_window = _rpythonic_function_(		"gtk_tool_item_set_use_drag_window", ctypes.c_void_p, [
	("tool_item",		ctypes.POINTER(_GtkToolItem)),
	("use_drag_window",		ctypes.c_int),] )

gtk_tool_item_get_use_drag_window = _rpythonic_function_(		"gtk_tool_item_get_use_drag_window", ctypes.c_int, [
	("tool_item",		ctypes.POINTER(_GtkToolItem)),] )

gtk_tool_item_set_visible_horizontal = _rpythonic_function_(		"gtk_tool_item_set_visible_horizontal", ctypes.c_void_p, [
	("tool_item",		ctypes.POINTER(_GtkToolItem)),
	("visible_horizontal",		ctypes.c_int),] )

gtk_tool_item_get_visible_horizontal = _rpythonic_function_(		"gtk_tool_item_get_visible_horizontal", ctypes.c_int, [
	("tool_item",		ctypes.POINTER(_GtkToolItem)),] )

gtk_tool_item_set_visible_vertical = _rpythonic_function_(		"gtk_tool_item_set_visible_vertical", ctypes.c_void_p, [
	("tool_item",		ctypes.POINTER(_GtkToolItem)),
	("visible_vertical",		ctypes.c_int),] )

gtk_tool_item_get_visible_vertical = _rpythonic_function_(		"gtk_tool_item_get_visible_vertical", ctypes.c_int, [
	("tool_item",		ctypes.POINTER(_GtkToolItem)),] )

gtk_tool_item_get_is_important = _rpythonic_function_(		"gtk_tool_item_get_is_important", ctypes.c_int, [
	("tool_item",		ctypes.POINTER(_GtkToolItem)),] )

gtk_tool_item_set_is_important = _rpythonic_function_(		"gtk_tool_item_set_is_important", ctypes.c_void_p, [
	("tool_item",		ctypes.POINTER(_GtkToolItem)),
	("is_important",		ctypes.c_int),] )

gtk_tool_item_get_ellipsize_mode = _rpythonic_function_(		"gtk_tool_item_get_ellipsize_mode", ctypes.c_int, [
	("tool_item",		ctypes.POINTER(_GtkToolItem)),] )

gtk_tool_item_get_icon_size = _rpythonic_function_(		"gtk_tool_item_get_icon_size", ctypes.c_int, [
	("tool_item",		ctypes.POINTER(_GtkToolItem)),] )

gtk_tool_item_get_orientation = _rpythonic_function_(		"gtk_tool_item_get_orientation", ctypes.c_int, [
	("tool_item",		ctypes.POINTER(_GtkToolItem)),] )

gtk_tool_item_get_toolbar_style = _rpythonic_function_(		"gtk_tool_item_get_toolbar_style", ctypes.c_int, [
	("tool_item",		ctypes.POINTER(_GtkToolItem)),] )

gtk_tool_item_get_relief_style = _rpythonic_function_(		"gtk_tool_item_get_relief_style", ctypes.c_int, [
	("tool_item",		ctypes.POINTER(_GtkToolItem)),] )

gtk_tool_item_get_text_alignment = _rpythonic_function_(		"gtk_tool_item_get_text_alignment", ctypes.c_float, [
	("tool_item",		ctypes.POINTER(_GtkToolItem)),] )

gtk_tool_item_get_text_orientation = _rpythonic_function_(		"gtk_tool_item_get_text_orientation", ctypes.c_int, [
	("tool_item",		ctypes.POINTER(_GtkToolItem)),] )

gtk_tool_item_get_text_size_group = _rpythonic_function_(		"gtk_tool_item_get_text_size_group", ctypes.POINTER(_GtkSizeGroup), [
	("tool_item",		ctypes.POINTER(_GtkToolItem)),] )

gtk_tool_item_retrieve_proxy_menu_item = _rpythonic_function_(		"gtk_tool_item_retrieve_proxy_menu_item", ctypes.POINTER(_GtkWidget), [
	("tool_item",		ctypes.POINTER(_GtkToolItem)),] )

gtk_tool_item_get_proxy_menu_item = _rpythonic_function_(		"gtk_tool_item_get_proxy_menu_item", ctypes.POINTER(_GtkWidget), [
	("tool_item",		ctypes.POINTER(_GtkToolItem)),
	("menu_item_id",		ctypes.POINTER(ctypes.c_char)),] )

gtk_tool_item_set_proxy_menu_item = _rpythonic_function_(		"gtk_tool_item_set_proxy_menu_item", ctypes.c_void_p, [
	("tool_item",		ctypes.POINTER(_GtkToolItem)),
	("menu_item_id",		ctypes.POINTER(ctypes.c_char)),
	("menu_item",		ctypes.POINTER(_GtkWidget)),] )

gtk_tool_item_rebuild_menu = _rpythonic_function_(		"gtk_tool_item_rebuild_menu", ctypes.c_void_p, [
	("tool_item",		ctypes.POINTER(_GtkToolItem)),] )

gtk_tool_item_toolbar_reconfigured = _rpythonic_function_(		"gtk_tool_item_toolbar_reconfigured", ctypes.c_void_p, [
	("tool_item",		ctypes.POINTER(_GtkToolItem)),] )

_gtk_tool_item_create_menu_proxy = _rpythonic_function_(		"_gtk_tool_item_create_menu_proxy", ctypes.c_int, [
	("tool_item",		ctypes.POINTER(_GtkToolItem)),] )

gtk_tool_button_get_type = _rpythonic_function_(		"gtk_tool_button_get_type", ctypes.c_uint, [] )

gtk_tool_button_new = _rpythonic_function_(		"gtk_tool_button_new", ctypes.POINTER(_GtkToolItem), [
	("icon_widget",		ctypes.POINTER(_GtkWidget)),
	("label",		ctypes.POINTER(ctypes.c_char)),] )

gtk_tool_button_new_from_stock = _rpythonic_function_(		"gtk_tool_button_new_from_stock", ctypes.POINTER(_GtkToolItem), [
	("stock_id",		ctypes.POINTER(ctypes.c_char)),] )

gtk_tool_button_set_label = _rpythonic_function_(		"gtk_tool_button_set_label", ctypes.c_void_p, [
	("button",		ctypes.POINTER(_GtkToolButton)),
	("label",		ctypes.POINTER(ctypes.c_char)),] )

gtk_tool_button_get_label = _rpythonic_function_(		"gtk_tool_button_get_label", ctypes.POINTER(ctypes.c_char), [
	("button",		ctypes.POINTER(_GtkToolButton)),] )

gtk_tool_button_set_use_underline = _rpythonic_function_(		"gtk_tool_button_set_use_underline", ctypes.c_void_p, [
	("button",		ctypes.POINTER(_GtkToolButton)),
	("use_underline",		ctypes.c_int),] )

gtk_tool_button_get_use_underline = _rpythonic_function_(		"gtk_tool_button_get_use_underline", ctypes.c_int, [
	("button",		ctypes.POINTER(_GtkToolButton)),] )

gtk_tool_button_set_stock_id = _rpythonic_function_(		"gtk_tool_button_set_stock_id", ctypes.c_void_p, [
	("button",		ctypes.POINTER(_GtkToolButton)),
	("stock_id",		ctypes.POINTER(ctypes.c_char)),] )

gtk_tool_button_get_stock_id = _rpythonic_function_(		"gtk_tool_button_get_stock_id", ctypes.POINTER(ctypes.c_char), [
	("button",		ctypes.POINTER(_GtkToolButton)),] )

gtk_tool_button_set_icon_name = _rpythonic_function_(		"gtk_tool_button_set_icon_name", ctypes.c_void_p, [
	("button",		ctypes.POINTER(_GtkToolButton)),
	("icon_name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_tool_button_get_icon_name = _rpythonic_function_(		"gtk_tool_button_get_icon_name", ctypes.POINTER(ctypes.c_char), [
	("button",		ctypes.POINTER(_GtkToolButton)),] )

gtk_tool_button_set_icon_widget = _rpythonic_function_(		"gtk_tool_button_set_icon_widget", ctypes.c_void_p, [
	("button",		ctypes.POINTER(_GtkToolButton)),
	("icon_widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_tool_button_get_icon_widget = _rpythonic_function_(		"gtk_tool_button_get_icon_widget", ctypes.POINTER(_GtkWidget), [
	("button",		ctypes.POINTER(_GtkToolButton)),] )

gtk_tool_button_set_label_widget = _rpythonic_function_(		"gtk_tool_button_set_label_widget", ctypes.c_void_p, [
	("button",		ctypes.POINTER(_GtkToolButton)),
	("label_widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_tool_button_get_label_widget = _rpythonic_function_(		"gtk_tool_button_get_label_widget", ctypes.POINTER(_GtkWidget), [
	("button",		ctypes.POINTER(_GtkToolButton)),] )

_gtk_tool_button_get_button = _rpythonic_function_(		"_gtk_tool_button_get_button", ctypes.POINTER(_GtkWidget), [
	("button",		ctypes.POINTER(_GtkToolButton)),] )

show_menu = _rpythonic_function_(		"show_menu", ctypes.c_void_p, [
	("button",		ctypes.POINTER(_GtkMenuToolButton)),] )

gtk_menu_tool_button_get_type = _rpythonic_function_(		"gtk_menu_tool_button_get_type", ctypes.c_uint, [] )

gtk_menu_tool_button_new = _rpythonic_function_(		"gtk_menu_tool_button_new", ctypes.POINTER(_GtkToolItem), [
	("icon_widget",		ctypes.POINTER(_GtkWidget)),
	("label",		ctypes.POINTER(ctypes.c_char)),] )

gtk_menu_tool_button_new_from_stock = _rpythonic_function_(		"gtk_menu_tool_button_new_from_stock", ctypes.POINTER(_GtkToolItem), [
	("stock_id",		ctypes.POINTER(ctypes.c_char)),] )

gtk_menu_tool_button_set_menu = _rpythonic_function_(		"gtk_menu_tool_button_set_menu", ctypes.c_void_p, [
	("button",		ctypes.POINTER(_GtkMenuToolButton)),
	("menu",		ctypes.POINTER(_GtkWidget)),] )

gtk_menu_tool_button_get_menu = _rpythonic_function_(		"gtk_menu_tool_button_get_menu", ctypes.POINTER(_GtkWidget), [
	("button",		ctypes.POINTER(_GtkMenuToolButton)),] )

gtk_menu_tool_button_set_arrow_tooltip_text = _rpythonic_function_(		"gtk_menu_tool_button_set_arrow_tooltip_text", ctypes.c_void_p, [
	("button",		ctypes.POINTER(_GtkMenuToolButton)),
	("text",		ctypes.POINTER(ctypes.c_char)),] )

gtk_menu_tool_button_set_arrow_tooltip_markup = _rpythonic_function_(		"gtk_menu_tool_button_set_arrow_tooltip_markup", ctypes.c_void_p, [
	("button",		ctypes.POINTER(_GtkMenuToolButton)),
	("markup",		ctypes.POINTER(ctypes.c_char)),] )

gtk_message_dialog_get_type = _rpythonic_function_(		"gtk_message_dialog_get_type", ctypes.c_uint, [] )

gtk_message_dialog_set_image = _rpythonic_function_(		"gtk_message_dialog_set_image", ctypes.c_void_p, [
	("dialog",		ctypes.POINTER(_GtkMessageDialog)),
	("image",		ctypes.POINTER(_GtkWidget)),] )

gtk_message_dialog_get_image = _rpythonic_function_(		"gtk_message_dialog_get_image", ctypes.POINTER(_GtkWidget), [
	("dialog",		ctypes.POINTER(_GtkMessageDialog)),] )

gtk_message_dialog_set_markup = _rpythonic_function_(		"gtk_message_dialog_set_markup", ctypes.c_void_p, [
	("message_dialog",		ctypes.POINTER(_GtkMessageDialog)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

gtk_message_dialog_get_message_area = _rpythonic_function_(		"gtk_message_dialog_get_message_area", ctypes.POINTER(_GtkWidget), [
	("message_dialog",		ctypes.POINTER(_GtkMessageDialog)),] )

GtkModuleInitFunc = _rpythonic_function_(		"GtkModuleInitFunc", ctypes.c_void_p, [
	("argc",		ctypes.POINTER(ctypes.c_int)),
	("argv",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(ctypes.c_char)))),] )

GtkModuleDisplayInitFunc = _rpythonic_function_(		"GtkModuleDisplayInitFunc", ctypes.c_void_p, [
	("display",		ctypes.POINTER(_GdkDisplay)),] )

gtk_mount_operation_get_type = _rpythonic_function_(		"gtk_mount_operation_get_type", ctypes.c_uint, [] )

gtk_mount_operation_new = _rpythonic_function_(		"gtk_mount_operation_new", ctypes.POINTER(_GMountOperation), [
	("parent",		ctypes.POINTER(_GtkWindow)),] )

gtk_mount_operation_is_showing = _rpythonic_function_(		"gtk_mount_operation_is_showing", ctypes.c_int, [
	("op",		ctypes.POINTER(_GtkMountOperation)),] )

gtk_mount_operation_set_parent = _rpythonic_function_(		"gtk_mount_operation_set_parent", ctypes.c_void_p, [
	("op",		ctypes.POINTER(_GtkMountOperation)),
	("parent",		ctypes.POINTER(_GtkWindow)),] )

gtk_mount_operation_get_parent = _rpythonic_function_(		"gtk_mount_operation_get_parent", ctypes.POINTER(_GtkWindow), [
	("op",		ctypes.POINTER(_GtkMountOperation)),] )

gtk_mount_operation_set_screen = _rpythonic_function_(		"gtk_mount_operation_set_screen", ctypes.c_void_p, [
	("op",		ctypes.POINTER(_GtkMountOperation)),
	("screen",		ctypes.POINTER(_GdkScreen)),] )

gtk_mount_operation_get_screen = _rpythonic_function_(		"gtk_mount_operation_get_screen", ctypes.POINTER(_GdkScreen), [
	("op",		ctypes.POINTER(_GtkMountOperation)),] )

gtk_notebook_get_type = _rpythonic_function_(		"gtk_notebook_get_type", ctypes.c_uint, [] )

switch_page = _rpythonic_function_(		"switch_page", ctypes.c_void_p, [
	("notebook",		ctypes.POINTER(_GtkNotebook)),
	("page",		ctypes.POINTER(_GtkWidget)),
	("page_num",		ctypes.c_uint),] )

select_page = _rpythonic_function_(		"select_page", ctypes.c_int, [
	("notebook",		ctypes.POINTER(_GtkNotebook)),
	("move_focus",		ctypes.c_int),] )

focus_tab = _rpythonic_function_(		"focus_tab", ctypes.c_int, [
	("notebook",		ctypes.POINTER(_GtkNotebook)),
	("C_type",		ctypes.c_int),] )

change_current_page = _rpythonic_function_(		"change_current_page", ctypes.c_int, [
	("notebook",		ctypes.POINTER(_GtkNotebook)),
	("offset",		ctypes.c_int),] )

move_focus_out = _rpythonic_function_(		"move_focus_out", ctypes.c_void_p, [
	("notebook",		ctypes.POINTER(_GtkNotebook)),
	("direction",		ctypes.c_int),] )

reorder_tab = _rpythonic_function_(		"reorder_tab", ctypes.c_int, [
	("notebook",		ctypes.POINTER(_GtkNotebook)),
	("direction",		ctypes.c_int),
	("move_to_last",		ctypes.c_int),] )

insert_page = _rpythonic_function_(		"insert_page", ctypes.c_int, [
	("notebook",		ctypes.POINTER(_GtkNotebook)),
	("child",		ctypes.POINTER(_GtkWidget)),
	("tab_label",		ctypes.POINTER(_GtkWidget)),
	("menu_label",		ctypes.POINTER(_GtkWidget)),
	("position",		ctypes.c_int),] )

create_window = _rpythonic_function_(		"create_window", ctypes.POINTER(_GtkNotebook), [
	("notebook",		ctypes.POINTER(_GtkNotebook)),
	("page",		ctypes.POINTER(_GtkWidget)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

page_reordered = _rpythonic_function_(		"page_reordered", ctypes.c_void_p, [
	("notebook",		ctypes.POINTER(_GtkNotebook)),
	("child",		ctypes.POINTER(_GtkWidget)),
	("page_num",		ctypes.c_uint),] )

page_removed = _rpythonic_function_(		"page_removed", ctypes.c_void_p, [
	("notebook",		ctypes.POINTER(_GtkNotebook)),
	("child",		ctypes.POINTER(_GtkWidget)),
	("page_num",		ctypes.c_uint),] )

page_added = _rpythonic_function_(		"page_added", ctypes.c_void_p, [
	("notebook",		ctypes.POINTER(_GtkNotebook)),
	("child",		ctypes.POINTER(_GtkWidget)),
	("page_num",		ctypes.c_uint),] )

gtk_notebook_new = _rpythonic_function_(		"gtk_notebook_new", ctypes.POINTER(_GtkWidget), [] )

gtk_notebook_append_page = _rpythonic_function_(		"gtk_notebook_append_page", ctypes.c_int, [
	("notebook",		ctypes.POINTER(_GtkNotebook)),
	("child",		ctypes.POINTER(_GtkWidget)),
	("tab_label",		ctypes.POINTER(_GtkWidget)),] )

gtk_notebook_append_page_menu = _rpythonic_function_(		"gtk_notebook_append_page_menu", ctypes.c_int, [
	("notebook",		ctypes.POINTER(_GtkNotebook)),
	("child",		ctypes.POINTER(_GtkWidget)),
	("tab_label",		ctypes.POINTER(_GtkWidget)),
	("menu_label",		ctypes.POINTER(_GtkWidget)),] )

gtk_notebook_prepend_page = _rpythonic_function_(		"gtk_notebook_prepend_page", ctypes.c_int, [
	("notebook",		ctypes.POINTER(_GtkNotebook)),
	("child",		ctypes.POINTER(_GtkWidget)),
	("tab_label",		ctypes.POINTER(_GtkWidget)),] )

gtk_notebook_prepend_page_menu = _rpythonic_function_(		"gtk_notebook_prepend_page_menu", ctypes.c_int, [
	("notebook",		ctypes.POINTER(_GtkNotebook)),
	("child",		ctypes.POINTER(_GtkWidget)),
	("tab_label",		ctypes.POINTER(_GtkWidget)),
	("menu_label",		ctypes.POINTER(_GtkWidget)),] )

gtk_notebook_insert_page = _rpythonic_function_(		"gtk_notebook_insert_page", ctypes.c_int, [
	("notebook",		ctypes.POINTER(_GtkNotebook)),
	("child",		ctypes.POINTER(_GtkWidget)),
	("tab_label",		ctypes.POINTER(_GtkWidget)),
	("position",		ctypes.c_int),] )

gtk_notebook_insert_page_menu = _rpythonic_function_(		"gtk_notebook_insert_page_menu", ctypes.c_int, [
	("notebook",		ctypes.POINTER(_GtkNotebook)),
	("child",		ctypes.POINTER(_GtkWidget)),
	("tab_label",		ctypes.POINTER(_GtkWidget)),
	("menu_label",		ctypes.POINTER(_GtkWidget)),
	("position",		ctypes.c_int),] )

gtk_notebook_remove_page = _rpythonic_function_(		"gtk_notebook_remove_page", ctypes.c_void_p, [
	("notebook",		ctypes.POINTER(_GtkNotebook)),
	("page_num",		ctypes.c_int),] )

gtk_notebook_set_group_name = _rpythonic_function_(		"gtk_notebook_set_group_name", ctypes.c_void_p, [
	("notebook",		ctypes.POINTER(_GtkNotebook)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_notebook_get_group_name = _rpythonic_function_(		"gtk_notebook_get_group_name", ctypes.POINTER(ctypes.c_char), [
	("notebook",		ctypes.POINTER(_GtkNotebook)),] )

gtk_notebook_get_current_page = _rpythonic_function_(		"gtk_notebook_get_current_page", ctypes.c_int, [
	("notebook",		ctypes.POINTER(_GtkNotebook)),] )

gtk_notebook_get_nth_page = _rpythonic_function_(		"gtk_notebook_get_nth_page", ctypes.POINTER(_GtkWidget), [
	("notebook",		ctypes.POINTER(_GtkNotebook)),
	("page_num",		ctypes.c_int),] )

gtk_notebook_get_n_pages = _rpythonic_function_(		"gtk_notebook_get_n_pages", ctypes.c_int, [
	("notebook",		ctypes.POINTER(_GtkNotebook)),] )

gtk_notebook_page_num = _rpythonic_function_(		"gtk_notebook_page_num", ctypes.c_int, [
	("notebook",		ctypes.POINTER(_GtkNotebook)),
	("child",		ctypes.POINTER(_GtkWidget)),] )

gtk_notebook_set_current_page = _rpythonic_function_(		"gtk_notebook_set_current_page", ctypes.c_void_p, [
	("notebook",		ctypes.POINTER(_GtkNotebook)),
	("page_num",		ctypes.c_int),] )

gtk_notebook_next_page = _rpythonic_function_(		"gtk_notebook_next_page", ctypes.c_void_p, [
	("notebook",		ctypes.POINTER(_GtkNotebook)),] )

gtk_notebook_prev_page = _rpythonic_function_(		"gtk_notebook_prev_page", ctypes.c_void_p, [
	("notebook",		ctypes.POINTER(_GtkNotebook)),] )

gtk_notebook_set_show_border = _rpythonic_function_(		"gtk_notebook_set_show_border", ctypes.c_void_p, [
	("notebook",		ctypes.POINTER(_GtkNotebook)),
	("show_border",		ctypes.c_int),] )

gtk_notebook_get_show_border = _rpythonic_function_(		"gtk_notebook_get_show_border", ctypes.c_int, [
	("notebook",		ctypes.POINTER(_GtkNotebook)),] )

gtk_notebook_set_show_tabs = _rpythonic_function_(		"gtk_notebook_set_show_tabs", ctypes.c_void_p, [
	("notebook",		ctypes.POINTER(_GtkNotebook)),
	("show_tabs",		ctypes.c_int),] )

gtk_notebook_get_show_tabs = _rpythonic_function_(		"gtk_notebook_get_show_tabs", ctypes.c_int, [
	("notebook",		ctypes.POINTER(_GtkNotebook)),] )

gtk_notebook_set_tab_pos = _rpythonic_function_(		"gtk_notebook_set_tab_pos", ctypes.c_void_p, [
	("notebook",		ctypes.POINTER(_GtkNotebook)),
	("pos",		ctypes.c_int),] )

gtk_notebook_get_tab_pos = _rpythonic_function_(		"gtk_notebook_get_tab_pos", ctypes.c_int, [
	("notebook",		ctypes.POINTER(_GtkNotebook)),] )

gtk_notebook_set_scrollable = _rpythonic_function_(		"gtk_notebook_set_scrollable", ctypes.c_void_p, [
	("notebook",		ctypes.POINTER(_GtkNotebook)),
	("scrollable",		ctypes.c_int),] )

gtk_notebook_get_scrollable = _rpythonic_function_(		"gtk_notebook_get_scrollable", ctypes.c_int, [
	("notebook",		ctypes.POINTER(_GtkNotebook)),] )

gtk_notebook_get_tab_hborder = _rpythonic_function_(		"gtk_notebook_get_tab_hborder", ctypes.c_ushort, [
	("notebook",		ctypes.POINTER(_GtkNotebook)),] )

gtk_notebook_get_tab_vborder = _rpythonic_function_(		"gtk_notebook_get_tab_vborder", ctypes.c_ushort, [
	("notebook",		ctypes.POINTER(_GtkNotebook)),] )

gtk_notebook_popup_enable = _rpythonic_function_(		"gtk_notebook_popup_enable", ctypes.c_void_p, [
	("notebook",		ctypes.POINTER(_GtkNotebook)),] )

gtk_notebook_popup_disable = _rpythonic_function_(		"gtk_notebook_popup_disable", ctypes.c_void_p, [
	("notebook",		ctypes.POINTER(_GtkNotebook)),] )

gtk_notebook_get_tab_label = _rpythonic_function_(		"gtk_notebook_get_tab_label", ctypes.POINTER(_GtkWidget), [
	("notebook",		ctypes.POINTER(_GtkNotebook)),
	("child",		ctypes.POINTER(_GtkWidget)),] )

gtk_notebook_set_tab_label = _rpythonic_function_(		"gtk_notebook_set_tab_label", ctypes.c_void_p, [
	("notebook",		ctypes.POINTER(_GtkNotebook)),
	("child",		ctypes.POINTER(_GtkWidget)),
	("tab_label",		ctypes.POINTER(_GtkWidget)),] )

gtk_notebook_set_tab_label_text = _rpythonic_function_(		"gtk_notebook_set_tab_label_text", ctypes.c_void_p, [
	("notebook",		ctypes.POINTER(_GtkNotebook)),
	("child",		ctypes.POINTER(_GtkWidget)),
	("tab_text",		ctypes.POINTER(ctypes.c_char)),] )

gtk_notebook_get_tab_label_text = _rpythonic_function_(		"gtk_notebook_get_tab_label_text", ctypes.POINTER(ctypes.c_char), [
	("notebook",		ctypes.POINTER(_GtkNotebook)),
	("child",		ctypes.POINTER(_GtkWidget)),] )

gtk_notebook_get_menu_label = _rpythonic_function_(		"gtk_notebook_get_menu_label", ctypes.POINTER(_GtkWidget), [
	("notebook",		ctypes.POINTER(_GtkNotebook)),
	("child",		ctypes.POINTER(_GtkWidget)),] )

gtk_notebook_set_menu_label = _rpythonic_function_(		"gtk_notebook_set_menu_label", ctypes.c_void_p, [
	("notebook",		ctypes.POINTER(_GtkNotebook)),
	("child",		ctypes.POINTER(_GtkWidget)),
	("menu_label",		ctypes.POINTER(_GtkWidget)),] )

gtk_notebook_set_menu_label_text = _rpythonic_function_(		"gtk_notebook_set_menu_label_text", ctypes.c_void_p, [
	("notebook",		ctypes.POINTER(_GtkNotebook)),
	("child",		ctypes.POINTER(_GtkWidget)),
	("menu_text",		ctypes.POINTER(ctypes.c_char)),] )

gtk_notebook_get_menu_label_text = _rpythonic_function_(		"gtk_notebook_get_menu_label_text", ctypes.POINTER(ctypes.c_char), [
	("notebook",		ctypes.POINTER(_GtkNotebook)),
	("child",		ctypes.POINTER(_GtkWidget)),] )

gtk_notebook_reorder_child = _rpythonic_function_(		"gtk_notebook_reorder_child", ctypes.c_void_p, [
	("notebook",		ctypes.POINTER(_GtkNotebook)),
	("child",		ctypes.POINTER(_GtkWidget)),
	("position",		ctypes.c_int),] )

gtk_notebook_get_tab_reorderable = _rpythonic_function_(		"gtk_notebook_get_tab_reorderable", ctypes.c_int, [
	("notebook",		ctypes.POINTER(_GtkNotebook)),
	("child",		ctypes.POINTER(_GtkWidget)),] )

gtk_notebook_set_tab_reorderable = _rpythonic_function_(		"gtk_notebook_set_tab_reorderable", ctypes.c_void_p, [
	("notebook",		ctypes.POINTER(_GtkNotebook)),
	("child",		ctypes.POINTER(_GtkWidget)),
	("reorderable",		ctypes.c_int),] )

gtk_notebook_get_tab_detachable = _rpythonic_function_(		"gtk_notebook_get_tab_detachable", ctypes.c_int, [
	("notebook",		ctypes.POINTER(_GtkNotebook)),
	("child",		ctypes.POINTER(_GtkWidget)),] )

gtk_notebook_set_tab_detachable = _rpythonic_function_(		"gtk_notebook_set_tab_detachable", ctypes.c_void_p, [
	("notebook",		ctypes.POINTER(_GtkNotebook)),
	("child",		ctypes.POINTER(_GtkWidget)),
	("detachable",		ctypes.c_int),] )

gtk_notebook_get_action_widget = _rpythonic_function_(		"gtk_notebook_get_action_widget", ctypes.POINTER(_GtkWidget), [
	("notebook",		ctypes.POINTER(_GtkNotebook)),
	("pack_type",		ctypes.c_int),] )

gtk_notebook_set_action_widget = _rpythonic_function_(		"gtk_notebook_set_action_widget", ctypes.c_void_p, [
	("notebook",		ctypes.POINTER(_GtkNotebook)),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("pack_type",		ctypes.c_int),] )

gtk_numerable_icon_get_type = _rpythonic_function_(		"gtk_numerable_icon_get_type", ctypes.c_uint, [] )

gtk_numerable_icon_new = _rpythonic_function_(		"gtk_numerable_icon_new", ctypes.POINTER(_GIcon), [
	("base_icon",		ctypes.POINTER(_GIcon)),] )

gtk_numerable_icon_new_with_style_context = _rpythonic_function_(		"gtk_numerable_icon_new_with_style_context", ctypes.POINTER(_GIcon), [
	("base_icon",		ctypes.POINTER(_GIcon)),
	("context",		ctypes.POINTER(_GtkStyleContext)),] )

gtk_numerable_icon_get_style_context = _rpythonic_function_(		"gtk_numerable_icon_get_style_context", ctypes.POINTER(_GtkStyleContext), [
	("C_self",		ctypes.POINTER(_GtkNumerableIcon)),] )

gtk_numerable_icon_set_style_context = _rpythonic_function_(		"gtk_numerable_icon_set_style_context", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_GtkNumerableIcon)),
	("style",		ctypes.POINTER(_GtkStyleContext)),] )

gtk_numerable_icon_get_count = _rpythonic_function_(		"gtk_numerable_icon_get_count", ctypes.c_int, [
	("C_self",		ctypes.POINTER(_GtkNumerableIcon)),] )

gtk_numerable_icon_set_count = _rpythonic_function_(		"gtk_numerable_icon_set_count", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_GtkNumerableIcon)),
	("count",		ctypes.c_int),] )

gtk_numerable_icon_get_label = _rpythonic_function_(		"gtk_numerable_icon_get_label", ctypes.POINTER(ctypes.c_char), [
	("C_self",		ctypes.POINTER(_GtkNumerableIcon)),] )

gtk_numerable_icon_set_label = _rpythonic_function_(		"gtk_numerable_icon_set_label", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_GtkNumerableIcon)),
	("label",		ctypes.POINTER(ctypes.c_char)),] )

gtk_numerable_icon_set_background_gicon = _rpythonic_function_(		"gtk_numerable_icon_set_background_gicon", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_GtkNumerableIcon)),
	("icon",		ctypes.POINTER(_GIcon)),] )

gtk_numerable_icon_get_background_gicon = _rpythonic_function_(		"gtk_numerable_icon_get_background_gicon", ctypes.POINTER(_GIcon), [
	("C_self",		ctypes.POINTER(_GtkNumerableIcon)),] )

gtk_numerable_icon_set_background_icon_name = _rpythonic_function_(		"gtk_numerable_icon_set_background_icon_name", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_GtkNumerableIcon)),
	("icon_name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_numerable_icon_get_background_icon_name = _rpythonic_function_(		"gtk_numerable_icon_get_background_icon_name", ctypes.POINTER(ctypes.c_char), [
	("C_self",		ctypes.POINTER(_GtkNumerableIcon)),] )

gtk_offscreen_window_get_type = _rpythonic_function_(		"gtk_offscreen_window_get_type", ctypes.c_uint, [] )

gtk_offscreen_window_new = _rpythonic_function_(		"gtk_offscreen_window_new", ctypes.POINTER(_GtkWidget), [] )

gtk_offscreen_window_get_surface = _rpythonic_function_(		"gtk_offscreen_window_get_surface", ctypes.POINTER(_cairo_surface), [
	("offscreen",		ctypes.POINTER(_GtkOffscreenWindow)),] )

gtk_offscreen_window_get_pixbuf = _rpythonic_function_(		"gtk_offscreen_window_get_pixbuf", ctypes.POINTER(_GdkPixbuf), [
	("offscreen",		ctypes.POINTER(_GtkOffscreenWindow)),] )

gtk_orientable_get_type = _rpythonic_function_(		"gtk_orientable_get_type", ctypes.c_uint, [] )

gtk_orientable_set_orientation = _rpythonic_function_(		"gtk_orientable_set_orientation", ctypes.c_void_p, [
	("orientable",		ctypes.POINTER(_GtkOrientable)),
	("orientation",		ctypes.c_int),] )

gtk_orientable_get_orientation = _rpythonic_function_(		"gtk_orientable_get_orientation", ctypes.c_int, [
	("orientable",		ctypes.POINTER(_GtkOrientable)),] )

get_child_position = _rpythonic_function_(		"get_child_position", ctypes.c_int, [
	("overlay",		ctypes.POINTER(_GtkOverlay)),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("allocation",		ctypes.POINTER(_cairo_rectangle_int)),] )

gtk_overlay_new = _rpythonic_function_(		"gtk_overlay_new", ctypes.POINTER(_GtkWidget), [] )

gtk_overlay_get_type = _rpythonic_function_(		"gtk_overlay_get_type", ctypes.c_uint, [] )

gtk_overlay_add_overlay = _rpythonic_function_(		"gtk_overlay_add_overlay", ctypes.c_void_p, [
	("overlay",		ctypes.POINTER(_GtkOverlay)),
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_paper_size_get_type = _rpythonic_function_(		"gtk_paper_size_get_type", ctypes.c_uint, [] )

gtk_paper_size_new = _rpythonic_function_(		"gtk_paper_size_new", ctypes.POINTER(_GtkPaperSize), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_paper_size_new_from_ppd = _rpythonic_function_(		"gtk_paper_size_new_from_ppd", ctypes.POINTER(_GtkPaperSize), [
	("ppd_name",		ctypes.POINTER(ctypes.c_char)),
	("ppd_display_name",		ctypes.POINTER(ctypes.c_char)),
	("width",		ctypes.c_double),
	("height",		ctypes.c_double),] )

gtk_paper_size_new_custom = _rpythonic_function_(		"gtk_paper_size_new_custom", ctypes.POINTER(_GtkPaperSize), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("display_name",		ctypes.POINTER(ctypes.c_char)),
	("width",		ctypes.c_double),
	("height",		ctypes.c_double),
	("unit",		ctypes.c_int),] )

gtk_paper_size_copy = _rpythonic_function_(		"gtk_paper_size_copy", ctypes.POINTER(_GtkPaperSize), [
	("other",		ctypes.POINTER(_GtkPaperSize)),] )

gtk_paper_size_free = _rpythonic_function_(		"gtk_paper_size_free", ctypes.c_void_p, [
	("size",		ctypes.POINTER(_GtkPaperSize)),] )

gtk_paper_size_is_equal = _rpythonic_function_(		"gtk_paper_size_is_equal", ctypes.c_int, [
	("size1",		ctypes.POINTER(_GtkPaperSize)),
	("size2",		ctypes.POINTER(_GtkPaperSize)),] )

gtk_paper_size_get_paper_sizes = _rpythonic_function_(		"gtk_paper_size_get_paper_sizes", ctypes.POINTER(_GList), [
	("include_custom",		ctypes.c_int),] )

gtk_paper_size_get_name = _rpythonic_function_(		"gtk_paper_size_get_name", ctypes.POINTER(ctypes.c_char), [
	("size",		ctypes.POINTER(_GtkPaperSize)),] )

gtk_paper_size_get_display_name = _rpythonic_function_(		"gtk_paper_size_get_display_name", ctypes.POINTER(ctypes.c_char), [
	("size",		ctypes.POINTER(_GtkPaperSize)),] )

gtk_paper_size_get_ppd_name = _rpythonic_function_(		"gtk_paper_size_get_ppd_name", ctypes.POINTER(ctypes.c_char), [
	("size",		ctypes.POINTER(_GtkPaperSize)),] )

gtk_paper_size_get_width = _rpythonic_function_(		"gtk_paper_size_get_width", ctypes.c_double, [
	("size",		ctypes.POINTER(_GtkPaperSize)),
	("unit",		ctypes.c_int),] )

gtk_paper_size_get_height = _rpythonic_function_(		"gtk_paper_size_get_height", ctypes.c_double, [
	("size",		ctypes.POINTER(_GtkPaperSize)),
	("unit",		ctypes.c_int),] )

gtk_paper_size_is_custom = _rpythonic_function_(		"gtk_paper_size_is_custom", ctypes.c_int, [
	("size",		ctypes.POINTER(_GtkPaperSize)),] )

gtk_paper_size_set_size = _rpythonic_function_(		"gtk_paper_size_set_size", ctypes.c_void_p, [
	("size",		ctypes.POINTER(_GtkPaperSize)),
	("width",		ctypes.c_double),
	("height",		ctypes.c_double),
	("unit",		ctypes.c_int),] )

gtk_paper_size_get_default_top_margin = _rpythonic_function_(		"gtk_paper_size_get_default_top_margin", ctypes.c_double, [
	("size",		ctypes.POINTER(_GtkPaperSize)),
	("unit",		ctypes.c_int),] )

gtk_paper_size_get_default_bottom_margin = _rpythonic_function_(		"gtk_paper_size_get_default_bottom_margin", ctypes.c_double, [
	("size",		ctypes.POINTER(_GtkPaperSize)),
	("unit",		ctypes.c_int),] )

gtk_paper_size_get_default_left_margin = _rpythonic_function_(		"gtk_paper_size_get_default_left_margin", ctypes.c_double, [
	("size",		ctypes.POINTER(_GtkPaperSize)),
	("unit",		ctypes.c_int),] )

gtk_paper_size_get_default_right_margin = _rpythonic_function_(		"gtk_paper_size_get_default_right_margin", ctypes.c_double, [
	("size",		ctypes.POINTER(_GtkPaperSize)),
	("unit",		ctypes.c_int),] )

gtk_paper_size_get_default = _rpythonic_function_(		"gtk_paper_size_get_default", ctypes.POINTER(ctypes.c_char), [] )

gtk_paper_size_new_from_key_file = _rpythonic_function_(		"gtk_paper_size_new_from_key_file", ctypes.POINTER(_GtkPaperSize), [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_paper_size_to_key_file = _rpythonic_function_(		"gtk_paper_size_to_key_file", ctypes.c_void_p, [
	("size",		ctypes.POINTER(_GtkPaperSize)),
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_page_setup_get_type = _rpythonic_function_(		"gtk_page_setup_get_type", ctypes.c_uint, [] )

gtk_page_setup_new = _rpythonic_function_(		"gtk_page_setup_new", ctypes.POINTER(_GtkPageSetup), [] )

gtk_page_setup_copy = _rpythonic_function_(		"gtk_page_setup_copy", ctypes.POINTER(_GtkPageSetup), [
	("other",		ctypes.POINTER(_GtkPageSetup)),] )

gtk_page_setup_get_orientation = _rpythonic_function_(		"gtk_page_setup_get_orientation", ctypes.c_int, [
	("setup",		ctypes.POINTER(_GtkPageSetup)),] )

gtk_page_setup_set_orientation = _rpythonic_function_(		"gtk_page_setup_set_orientation", ctypes.c_void_p, [
	("setup",		ctypes.POINTER(_GtkPageSetup)),
	("orientation",		ctypes.c_int),] )

gtk_page_setup_get_paper_size = _rpythonic_function_(		"gtk_page_setup_get_paper_size", ctypes.POINTER(_GtkPaperSize), [
	("setup",		ctypes.POINTER(_GtkPageSetup)),] )

gtk_page_setup_set_paper_size = _rpythonic_function_(		"gtk_page_setup_set_paper_size", ctypes.c_void_p, [
	("setup",		ctypes.POINTER(_GtkPageSetup)),
	("size",		ctypes.POINTER(_GtkPaperSize)),] )

gtk_page_setup_get_top_margin = _rpythonic_function_(		"gtk_page_setup_get_top_margin", ctypes.c_double, [
	("setup",		ctypes.POINTER(_GtkPageSetup)),
	("unit",		ctypes.c_int),] )

gtk_page_setup_set_top_margin = _rpythonic_function_(		"gtk_page_setup_set_top_margin", ctypes.c_void_p, [
	("setup",		ctypes.POINTER(_GtkPageSetup)),
	("margin",		ctypes.c_double),
	("unit",		ctypes.c_int),] )

gtk_page_setup_get_bottom_margin = _rpythonic_function_(		"gtk_page_setup_get_bottom_margin", ctypes.c_double, [
	("setup",		ctypes.POINTER(_GtkPageSetup)),
	("unit",		ctypes.c_int),] )

gtk_page_setup_set_bottom_margin = _rpythonic_function_(		"gtk_page_setup_set_bottom_margin", ctypes.c_void_p, [
	("setup",		ctypes.POINTER(_GtkPageSetup)),
	("margin",		ctypes.c_double),
	("unit",		ctypes.c_int),] )

gtk_page_setup_get_left_margin = _rpythonic_function_(		"gtk_page_setup_get_left_margin", ctypes.c_double, [
	("setup",		ctypes.POINTER(_GtkPageSetup)),
	("unit",		ctypes.c_int),] )

gtk_page_setup_set_left_margin = _rpythonic_function_(		"gtk_page_setup_set_left_margin", ctypes.c_void_p, [
	("setup",		ctypes.POINTER(_GtkPageSetup)),
	("margin",		ctypes.c_double),
	("unit",		ctypes.c_int),] )

gtk_page_setup_get_right_margin = _rpythonic_function_(		"gtk_page_setup_get_right_margin", ctypes.c_double, [
	("setup",		ctypes.POINTER(_GtkPageSetup)),
	("unit",		ctypes.c_int),] )

gtk_page_setup_set_right_margin = _rpythonic_function_(		"gtk_page_setup_set_right_margin", ctypes.c_void_p, [
	("setup",		ctypes.POINTER(_GtkPageSetup)),
	("margin",		ctypes.c_double),
	("unit",		ctypes.c_int),] )

gtk_page_setup_set_paper_size_and_default_margins = _rpythonic_function_(		"gtk_page_setup_set_paper_size_and_default_margins", ctypes.c_void_p, [
	("setup",		ctypes.POINTER(_GtkPageSetup)),
	("size",		ctypes.POINTER(_GtkPaperSize)),] )

gtk_page_setup_get_paper_width = _rpythonic_function_(		"gtk_page_setup_get_paper_width", ctypes.c_double, [
	("setup",		ctypes.POINTER(_GtkPageSetup)),
	("unit",		ctypes.c_int),] )

gtk_page_setup_get_paper_height = _rpythonic_function_(		"gtk_page_setup_get_paper_height", ctypes.c_double, [
	("setup",		ctypes.POINTER(_GtkPageSetup)),
	("unit",		ctypes.c_int),] )

gtk_page_setup_get_page_width = _rpythonic_function_(		"gtk_page_setup_get_page_width", ctypes.c_double, [
	("setup",		ctypes.POINTER(_GtkPageSetup)),
	("unit",		ctypes.c_int),] )

gtk_page_setup_get_page_height = _rpythonic_function_(		"gtk_page_setup_get_page_height", ctypes.c_double, [
	("setup",		ctypes.POINTER(_GtkPageSetup)),
	("unit",		ctypes.c_int),] )

gtk_page_setup_new_from_file = _rpythonic_function_(		"gtk_page_setup_new_from_file", ctypes.POINTER(_GtkPageSetup), [
	("file_name",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_page_setup_load_file = _rpythonic_function_(		"gtk_page_setup_load_file", ctypes.c_int, [
	("setup",		ctypes.POINTER(_GtkPageSetup)),
	("file_name",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_page_setup_to_file = _rpythonic_function_(		"gtk_page_setup_to_file", ctypes.c_int, [
	("setup",		ctypes.POINTER(_GtkPageSetup)),
	("file_name",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_page_setup_new_from_key_file = _rpythonic_function_(		"gtk_page_setup_new_from_key_file", ctypes.POINTER(_GtkPageSetup), [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_page_setup_load_key_file = _rpythonic_function_(		"gtk_page_setup_load_key_file", ctypes.c_int, [
	("setup",		ctypes.POINTER(_GtkPageSetup)),
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_page_setup_to_key_file = _rpythonic_function_(		"gtk_page_setup_to_key_file", ctypes.c_void_p, [
	("setup",		ctypes.POINTER(_GtkPageSetup)),
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_print_context_get_type = _rpythonic_function_(		"gtk_print_context_get_type", ctypes.c_uint, [] )

gtk_print_context_get_cairo_context = _rpythonic_function_(		"gtk_print_context_get_cairo_context", ctypes.POINTER(_cairo), [
	("context",		ctypes.POINTER(_GtkPrintContext)),] )

gtk_print_context_get_page_setup = _rpythonic_function_(		"gtk_print_context_get_page_setup", ctypes.POINTER(_GtkPageSetup), [
	("context",		ctypes.POINTER(_GtkPrintContext)),] )

gtk_print_context_get_width = _rpythonic_function_(		"gtk_print_context_get_width", ctypes.c_double, [
	("context",		ctypes.POINTER(_GtkPrintContext)),] )

gtk_print_context_get_height = _rpythonic_function_(		"gtk_print_context_get_height", ctypes.c_double, [
	("context",		ctypes.POINTER(_GtkPrintContext)),] )

gtk_print_context_get_dpi_x = _rpythonic_function_(		"gtk_print_context_get_dpi_x", ctypes.c_double, [
	("context",		ctypes.POINTER(_GtkPrintContext)),] )

gtk_print_context_get_dpi_y = _rpythonic_function_(		"gtk_print_context_get_dpi_y", ctypes.c_double, [
	("context",		ctypes.POINTER(_GtkPrintContext)),] )

gtk_print_context_get_hard_margins = _rpythonic_function_(		"gtk_print_context_get_hard_margins", ctypes.c_int, [
	("context",		ctypes.POINTER(_GtkPrintContext)),
	("top",		ctypes.POINTER(ctypes.c_double)),
	("bottom",		ctypes.POINTER(ctypes.c_double)),
	("left",		ctypes.POINTER(ctypes.c_double)),
	("right",		ctypes.POINTER(ctypes.c_double)),] )

gtk_print_context_get_pango_fontmap = _rpythonic_function_(		"gtk_print_context_get_pango_fontmap", ctypes.POINTER(_PangoFontMap), [
	("context",		ctypes.POINTER(_GtkPrintContext)),] )

gtk_print_context_create_pango_context = _rpythonic_function_(		"gtk_print_context_create_pango_context", ctypes.POINTER(_PangoContext), [
	("context",		ctypes.POINTER(_GtkPrintContext)),] )

gtk_print_context_create_pango_layout = _rpythonic_function_(		"gtk_print_context_create_pango_layout", ctypes.POINTER(_PangoLayout), [
	("context",		ctypes.POINTER(_GtkPrintContext)),] )

gtk_print_context_set_cairo_context = _rpythonic_function_(		"gtk_print_context_set_cairo_context", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GtkPrintContext)),
	("cr",		ctypes.POINTER(_cairo)),
	("dpi_x",		ctypes.c_double),
	("dpi_y",		ctypes.c_double),] )

GtkPrintSettingsFunc = _rpythonic_function_(		"GtkPrintSettingsFunc", ctypes.c_void_p, [
	("key",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_char)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gtk_print_settings_get_type = _rpythonic_function_(		"gtk_print_settings_get_type", ctypes.c_uint, [] )

gtk_print_settings_new = _rpythonic_function_(		"gtk_print_settings_new", ctypes.POINTER(_GtkPrintSettings), [] )

gtk_print_settings_copy = _rpythonic_function_(		"gtk_print_settings_copy", ctypes.POINTER(_GtkPrintSettings), [
	("other",		ctypes.POINTER(_GtkPrintSettings)),] )

gtk_print_settings_new_from_file = _rpythonic_function_(		"gtk_print_settings_new_from_file", ctypes.POINTER(_GtkPrintSettings), [
	("file_name",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_print_settings_load_file = _rpythonic_function_(		"gtk_print_settings_load_file", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("file_name",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_print_settings_to_file = _rpythonic_function_(		"gtk_print_settings_to_file", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("file_name",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_print_settings_new_from_key_file = _rpythonic_function_(		"gtk_print_settings_new_from_key_file", ctypes.POINTER(_GtkPrintSettings), [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_print_settings_load_key_file = _rpythonic_function_(		"gtk_print_settings_load_key_file", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_print_settings_to_key_file = _rpythonic_function_(		"gtk_print_settings_to_key_file", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_print_settings_has_key = _rpythonic_function_(		"gtk_print_settings_has_key", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

gtk_print_settings_get = _rpythonic_function_(		"gtk_print_settings_get", ctypes.POINTER(ctypes.c_char), [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

gtk_print_settings_set = _rpythonic_function_(		"gtk_print_settings_set", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

gtk_print_settings_unset = _rpythonic_function_(		"gtk_print_settings_unset", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

gtk_print_settings_foreach = _rpythonic_function_(		"gtk_print_settings_foreach", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gtk_print_settings_get_bool = _rpythonic_function_(		"gtk_print_settings_get_bool", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

gtk_print_settings_set_bool = _rpythonic_function_(		"gtk_print_settings_set_bool", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_int),] )

gtk_print_settings_get_double = _rpythonic_function_(		"gtk_print_settings_get_double", ctypes.c_double, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

gtk_print_settings_get_double_with_default = _rpythonic_function_(		"gtk_print_settings_get_double_with_default", ctypes.c_double, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("C_def",		ctypes.c_double),] )

gtk_print_settings_set_double = _rpythonic_function_(		"gtk_print_settings_set_double", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_double),] )

gtk_print_settings_get_length = _rpythonic_function_(		"gtk_print_settings_get_length", ctypes.c_double, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("unit",		ctypes.c_int),] )

gtk_print_settings_set_length = _rpythonic_function_(		"gtk_print_settings_set_length", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_double),
	("unit",		ctypes.c_int),] )

gtk_print_settings_get_int = _rpythonic_function_(		"gtk_print_settings_get_int", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

gtk_print_settings_get_int_with_default = _rpythonic_function_(		"gtk_print_settings_get_int_with_default", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("C_def",		ctypes.c_int),] )

gtk_print_settings_set_int = _rpythonic_function_(		"gtk_print_settings_set_int", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_int),] )

gtk_print_settings_get_printer = _rpythonic_function_(		"gtk_print_settings_get_printer", ctypes.POINTER(ctypes.c_char), [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),] )

gtk_print_settings_set_printer = _rpythonic_function_(		"gtk_print_settings_set_printer", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("printer",		ctypes.POINTER(ctypes.c_char)),] )

gtk_print_settings_get_orientation = _rpythonic_function_(		"gtk_print_settings_get_orientation", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),] )

gtk_print_settings_set_orientation = _rpythonic_function_(		"gtk_print_settings_set_orientation", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("orientation",		ctypes.c_int),] )

gtk_print_settings_get_paper_size = _rpythonic_function_(		"gtk_print_settings_get_paper_size", ctypes.POINTER(_GtkPaperSize), [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),] )

gtk_print_settings_set_paper_size = _rpythonic_function_(		"gtk_print_settings_set_paper_size", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("paper_size",		ctypes.POINTER(_GtkPaperSize)),] )

gtk_print_settings_get_paper_width = _rpythonic_function_(		"gtk_print_settings_get_paper_width", ctypes.c_double, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("unit",		ctypes.c_int),] )

gtk_print_settings_set_paper_width = _rpythonic_function_(		"gtk_print_settings_set_paper_width", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("width",		ctypes.c_double),
	("unit",		ctypes.c_int),] )

gtk_print_settings_get_paper_height = _rpythonic_function_(		"gtk_print_settings_get_paper_height", ctypes.c_double, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("unit",		ctypes.c_int),] )

gtk_print_settings_set_paper_height = _rpythonic_function_(		"gtk_print_settings_set_paper_height", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("height",		ctypes.c_double),
	("unit",		ctypes.c_int),] )

gtk_print_settings_get_use_color = _rpythonic_function_(		"gtk_print_settings_get_use_color", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),] )

gtk_print_settings_set_use_color = _rpythonic_function_(		"gtk_print_settings_set_use_color", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("use_color",		ctypes.c_int),] )

gtk_print_settings_get_collate = _rpythonic_function_(		"gtk_print_settings_get_collate", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),] )

gtk_print_settings_set_collate = _rpythonic_function_(		"gtk_print_settings_set_collate", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("collate",		ctypes.c_int),] )

gtk_print_settings_get_reverse = _rpythonic_function_(		"gtk_print_settings_get_reverse", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),] )

gtk_print_settings_set_reverse = _rpythonic_function_(		"gtk_print_settings_set_reverse", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("reverse",		ctypes.c_int),] )

gtk_print_settings_get_duplex = _rpythonic_function_(		"gtk_print_settings_get_duplex", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),] )

gtk_print_settings_set_duplex = _rpythonic_function_(		"gtk_print_settings_set_duplex", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("duplex",		ctypes.c_int),] )

gtk_print_settings_get_quality = _rpythonic_function_(		"gtk_print_settings_get_quality", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),] )

gtk_print_settings_set_quality = _rpythonic_function_(		"gtk_print_settings_set_quality", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("quality",		ctypes.c_int),] )

gtk_print_settings_get_n_copies = _rpythonic_function_(		"gtk_print_settings_get_n_copies", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),] )

gtk_print_settings_set_n_copies = _rpythonic_function_(		"gtk_print_settings_set_n_copies", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("num_copies",		ctypes.c_int),] )

gtk_print_settings_get_number_up = _rpythonic_function_(		"gtk_print_settings_get_number_up", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),] )

gtk_print_settings_set_number_up = _rpythonic_function_(		"gtk_print_settings_set_number_up", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("number_up",		ctypes.c_int),] )

gtk_print_settings_get_number_up_layout = _rpythonic_function_(		"gtk_print_settings_get_number_up_layout", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),] )

gtk_print_settings_set_number_up_layout = _rpythonic_function_(		"gtk_print_settings_set_number_up_layout", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("number_up_layout",		ctypes.c_int),] )

gtk_print_settings_get_resolution = _rpythonic_function_(		"gtk_print_settings_get_resolution", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),] )

gtk_print_settings_set_resolution = _rpythonic_function_(		"gtk_print_settings_set_resolution", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("resolution",		ctypes.c_int),] )

gtk_print_settings_get_resolution_x = _rpythonic_function_(		"gtk_print_settings_get_resolution_x", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),] )

gtk_print_settings_get_resolution_y = _rpythonic_function_(		"gtk_print_settings_get_resolution_y", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),] )

gtk_print_settings_set_resolution_xy = _rpythonic_function_(		"gtk_print_settings_set_resolution_xy", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("resolution_x",		ctypes.c_int),
	("resolution_y",		ctypes.c_int),] )

gtk_print_settings_get_printer_lpi = _rpythonic_function_(		"gtk_print_settings_get_printer_lpi", ctypes.c_double, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),] )

gtk_print_settings_set_printer_lpi = _rpythonic_function_(		"gtk_print_settings_set_printer_lpi", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("lpi",		ctypes.c_double),] )

gtk_print_settings_get_scale = _rpythonic_function_(		"gtk_print_settings_get_scale", ctypes.c_double, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),] )

gtk_print_settings_set_scale = _rpythonic_function_(		"gtk_print_settings_set_scale", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("scale",		ctypes.c_double),] )

gtk_print_settings_get_print_pages = _rpythonic_function_(		"gtk_print_settings_get_print_pages", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),] )

gtk_print_settings_set_print_pages = _rpythonic_function_(		"gtk_print_settings_set_print_pages", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("pages",		ctypes.c_int),] )

gtk_print_settings_get_page_ranges = _rpythonic_function_(		"gtk_print_settings_get_page_ranges", ctypes.POINTER(_GtkPageRange), [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("num_ranges",		ctypes.POINTER(ctypes.c_int)),] )

gtk_print_settings_set_page_ranges = _rpythonic_function_(		"gtk_print_settings_set_page_ranges", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("page_ranges",		ctypes.POINTER(_GtkPageRange)),
	("num_ranges",		ctypes.c_int),] )

gtk_print_settings_get_page_set = _rpythonic_function_(		"gtk_print_settings_get_page_set", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),] )

gtk_print_settings_set_page_set = _rpythonic_function_(		"gtk_print_settings_set_page_set", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("page_set",		ctypes.c_int),] )

gtk_print_settings_get_default_source = _rpythonic_function_(		"gtk_print_settings_get_default_source", ctypes.POINTER(ctypes.c_char), [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),] )

gtk_print_settings_set_default_source = _rpythonic_function_(		"gtk_print_settings_set_default_source", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("default_source",		ctypes.POINTER(ctypes.c_char)),] )

gtk_print_settings_get_media_type = _rpythonic_function_(		"gtk_print_settings_get_media_type", ctypes.POINTER(ctypes.c_char), [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),] )

gtk_print_settings_set_media_type = _rpythonic_function_(		"gtk_print_settings_set_media_type", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("media_type",		ctypes.POINTER(ctypes.c_char)),] )

gtk_print_settings_get_dither = _rpythonic_function_(		"gtk_print_settings_get_dither", ctypes.POINTER(ctypes.c_char), [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),] )

gtk_print_settings_set_dither = _rpythonic_function_(		"gtk_print_settings_set_dither", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("dither",		ctypes.POINTER(ctypes.c_char)),] )

gtk_print_settings_get_finishings = _rpythonic_function_(		"gtk_print_settings_get_finishings", ctypes.POINTER(ctypes.c_char), [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),] )

gtk_print_settings_set_finishings = _rpythonic_function_(		"gtk_print_settings_set_finishings", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("finishings",		ctypes.POINTER(ctypes.c_char)),] )

gtk_print_settings_get_output_bin = _rpythonic_function_(		"gtk_print_settings_get_output_bin", ctypes.POINTER(ctypes.c_char), [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),] )

gtk_print_settings_set_output_bin = _rpythonic_function_(		"gtk_print_settings_set_output_bin", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("output_bin",		ctypes.POINTER(ctypes.c_char)),] )

ready = _rpythonic_function_(		"ready", ctypes.c_void_p, [
	("preview",		ctypes.POINTER(_GtkPrintOperationPreview)),
	("context",		ctypes.POINTER(_GtkPrintContext)),] )

got_page_size = _rpythonic_function_(		"got_page_size", ctypes.c_void_p, [
	("preview",		ctypes.POINTER(_GtkPrintOperationPreview)),
	("context",		ctypes.POINTER(_GtkPrintContext)),
	("page_setup",		ctypes.POINTER(_GtkPageSetup)),] )

render_page = _rpythonic_function_(		"render_page", ctypes.c_void_p, [
	("preview",		ctypes.POINTER(_GtkPrintOperationPreview)),
	("page_nr",		ctypes.c_int),] )

end_preview = _rpythonic_function_(		"end_preview", ctypes.c_void_p, [
	("preview",		ctypes.POINTER(_GtkPrintOperationPreview)),] )

gtk_print_operation_preview_render_page = _rpythonic_function_(		"gtk_print_operation_preview_render_page", ctypes.c_void_p, [
	("preview",		ctypes.POINTER(_GtkPrintOperationPreview)),
	("page_nr",		ctypes.c_int),] )

gtk_print_operation_preview_end_preview = _rpythonic_function_(		"gtk_print_operation_preview_end_preview", ctypes.c_void_p, [
	("preview",		ctypes.POINTER(_GtkPrintOperationPreview)),] )

gtk_print_operation_preview_get_type = _rpythonic_function_(		"gtk_print_operation_preview_get_type", ctypes.c_uint, [] )

gtk_print_operation_preview_is_selected = _rpythonic_function_(		"gtk_print_operation_preview_is_selected", ctypes.c_int, [
	("preview",		ctypes.POINTER(_GtkPrintOperationPreview)),
	("page_nr",		ctypes.c_int),] )

done = _rpythonic_function_(		"done", ctypes.c_void_p, [
	("operation",		ctypes.POINTER(_GtkPrintOperation)),
	("result",		ctypes.c_int),] )

begin_print = _rpythonic_function_(		"begin_print", ctypes.c_void_p, [
	("operation",		ctypes.POINTER(_GtkPrintOperation)),
	("context",		ctypes.POINTER(_GtkPrintContext)),] )

paginate = _rpythonic_function_(		"paginate", ctypes.c_int, [
	("operation",		ctypes.POINTER(_GtkPrintOperation)),
	("context",		ctypes.POINTER(_GtkPrintContext)),] )

request_page_setup = _rpythonic_function_(		"request_page_setup", ctypes.c_void_p, [
	("operation",		ctypes.POINTER(_GtkPrintOperation)),
	("context",		ctypes.POINTER(_GtkPrintContext)),
	("page_nr",		ctypes.c_int),
	("setup",		ctypes.POINTER(_GtkPageSetup)),] )

draw_page = _rpythonic_function_(		"draw_page", ctypes.c_void_p, [
	("operation",		ctypes.POINTER(_GtkPrintOperation)),
	("context",		ctypes.POINTER(_GtkPrintContext)),
	("page_nr",		ctypes.c_int),] )

end_print = _rpythonic_function_(		"end_print", ctypes.c_void_p, [
	("operation",		ctypes.POINTER(_GtkPrintOperation)),
	("context",		ctypes.POINTER(_GtkPrintContext)),] )

status_changed = _rpythonic_function_(		"status_changed", ctypes.c_void_p, [
	("operation",		ctypes.POINTER(_GtkPrintOperation)),] )

create_custom_widget = _rpythonic_function_(		"create_custom_widget", ctypes.POINTER(_GtkWidget), [
	("operation",		ctypes.POINTER(_GtkPrintOperation)),] )

custom_widget_apply = _rpythonic_function_(		"custom_widget_apply", ctypes.c_void_p, [
	("operation",		ctypes.POINTER(_GtkPrintOperation)),
	("widget",		ctypes.POINTER(_GtkWidget)),] )

preview = _rpythonic_function_(		"preview", ctypes.c_int, [
	("operation",		ctypes.POINTER(_GtkPrintOperation)),
	("preview",		ctypes.POINTER(_GtkPrintOperationPreview)),
	("context",		ctypes.POINTER(_GtkPrintContext)),
	("parent",		ctypes.POINTER(_GtkWindow)),] )

update_custom_widget = _rpythonic_function_(		"update_custom_widget", ctypes.c_void_p, [
	("operation",		ctypes.POINTER(_GtkPrintOperation)),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("setup",		ctypes.POINTER(_GtkPageSetup)),
	("settings",		ctypes.POINTER(_GtkPrintSettings)),] )

gtk_print_error_quark = _rpythonic_function_(		"gtk_print_error_quark", ctypes.c_uint, [] )

gtk_print_operation_get_type = _rpythonic_function_(		"gtk_print_operation_get_type", ctypes.c_uint, [] )

gtk_print_operation_new = _rpythonic_function_(		"gtk_print_operation_new", ctypes.POINTER(_GtkPrintOperation), [] )

gtk_print_operation_set_default_page_setup = _rpythonic_function_(		"gtk_print_operation_set_default_page_setup", ctypes.c_void_p, [
	("op",		ctypes.POINTER(_GtkPrintOperation)),
	("default_page_setup",		ctypes.POINTER(_GtkPageSetup)),] )

gtk_print_operation_get_default_page_setup = _rpythonic_function_(		"gtk_print_operation_get_default_page_setup", ctypes.POINTER(_GtkPageSetup), [
	("op",		ctypes.POINTER(_GtkPrintOperation)),] )

gtk_print_operation_set_print_settings = _rpythonic_function_(		"gtk_print_operation_set_print_settings", ctypes.c_void_p, [
	("op",		ctypes.POINTER(_GtkPrintOperation)),
	("print_settings",		ctypes.POINTER(_GtkPrintSettings)),] )

gtk_print_operation_get_print_settings = _rpythonic_function_(		"gtk_print_operation_get_print_settings", ctypes.POINTER(_GtkPrintSettings), [
	("op",		ctypes.POINTER(_GtkPrintOperation)),] )

gtk_print_operation_set_job_name = _rpythonic_function_(		"gtk_print_operation_set_job_name", ctypes.c_void_p, [
	("op",		ctypes.POINTER(_GtkPrintOperation)),
	("job_name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_print_operation_set_n_pages = _rpythonic_function_(		"gtk_print_operation_set_n_pages", ctypes.c_void_p, [
	("op",		ctypes.POINTER(_GtkPrintOperation)),
	("n_pages",		ctypes.c_int),] )

gtk_print_operation_set_current_page = _rpythonic_function_(		"gtk_print_operation_set_current_page", ctypes.c_void_p, [
	("op",		ctypes.POINTER(_GtkPrintOperation)),
	("current_page",		ctypes.c_int),] )

gtk_print_operation_set_use_full_page = _rpythonic_function_(		"gtk_print_operation_set_use_full_page", ctypes.c_void_p, [
	("op",		ctypes.POINTER(_GtkPrintOperation)),
	("full_page",		ctypes.c_int),] )

gtk_print_operation_set_unit = _rpythonic_function_(		"gtk_print_operation_set_unit", ctypes.c_void_p, [
	("op",		ctypes.POINTER(_GtkPrintOperation)),
	("unit",		ctypes.c_int),] )

gtk_print_operation_set_export_filename = _rpythonic_function_(		"gtk_print_operation_set_export_filename", ctypes.c_void_p, [
	("op",		ctypes.POINTER(_GtkPrintOperation)),
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

gtk_print_operation_set_track_print_status = _rpythonic_function_(		"gtk_print_operation_set_track_print_status", ctypes.c_void_p, [
	("op",		ctypes.POINTER(_GtkPrintOperation)),
	("track_status",		ctypes.c_int),] )

gtk_print_operation_set_show_progress = _rpythonic_function_(		"gtk_print_operation_set_show_progress", ctypes.c_void_p, [
	("op",		ctypes.POINTER(_GtkPrintOperation)),
	("show_progress",		ctypes.c_int),] )

gtk_print_operation_set_allow_async = _rpythonic_function_(		"gtk_print_operation_set_allow_async", ctypes.c_void_p, [
	("op",		ctypes.POINTER(_GtkPrintOperation)),
	("allow_async",		ctypes.c_int),] )

gtk_print_operation_set_custom_tab_label = _rpythonic_function_(		"gtk_print_operation_set_custom_tab_label", ctypes.c_void_p, [
	("op",		ctypes.POINTER(_GtkPrintOperation)),
	("label",		ctypes.POINTER(ctypes.c_char)),] )

gtk_print_operation_run = _rpythonic_function_(		"gtk_print_operation_run", ctypes.c_int, [
	("op",		ctypes.POINTER(_GtkPrintOperation)),
	("action",		ctypes.c_int),
	("parent",		ctypes.POINTER(_GtkWindow)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_print_operation_get_error = _rpythonic_function_(		"gtk_print_operation_get_error", ctypes.c_void_p, [
	("op",		ctypes.POINTER(_GtkPrintOperation)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_print_operation_get_status = _rpythonic_function_(		"gtk_print_operation_get_status", ctypes.c_int, [
	("op",		ctypes.POINTER(_GtkPrintOperation)),] )

gtk_print_operation_get_status_string = _rpythonic_function_(		"gtk_print_operation_get_status_string", ctypes.POINTER(ctypes.c_char), [
	("op",		ctypes.POINTER(_GtkPrintOperation)),] )

gtk_print_operation_is_finished = _rpythonic_function_(		"gtk_print_operation_is_finished", ctypes.c_int, [
	("op",		ctypes.POINTER(_GtkPrintOperation)),] )

gtk_print_operation_cancel = _rpythonic_function_(		"gtk_print_operation_cancel", ctypes.c_void_p, [
	("op",		ctypes.POINTER(_GtkPrintOperation)),] )

gtk_print_operation_draw_page_finish = _rpythonic_function_(		"gtk_print_operation_draw_page_finish", ctypes.c_void_p, [
	("op",		ctypes.POINTER(_GtkPrintOperation)),] )

gtk_print_operation_set_defer_drawing = _rpythonic_function_(		"gtk_print_operation_set_defer_drawing", ctypes.c_void_p, [
	("op",		ctypes.POINTER(_GtkPrintOperation)),] )

gtk_print_operation_set_support_selection = _rpythonic_function_(		"gtk_print_operation_set_support_selection", ctypes.c_void_p, [
	("op",		ctypes.POINTER(_GtkPrintOperation)),
	("support_selection",		ctypes.c_int),] )

gtk_print_operation_get_support_selection = _rpythonic_function_(		"gtk_print_operation_get_support_selection", ctypes.c_int, [
	("op",		ctypes.POINTER(_GtkPrintOperation)),] )

gtk_print_operation_set_has_selection = _rpythonic_function_(		"gtk_print_operation_set_has_selection", ctypes.c_void_p, [
	("op",		ctypes.POINTER(_GtkPrintOperation)),
	("has_selection",		ctypes.c_int),] )

gtk_print_operation_get_has_selection = _rpythonic_function_(		"gtk_print_operation_get_has_selection", ctypes.c_int, [
	("op",		ctypes.POINTER(_GtkPrintOperation)),] )

gtk_print_operation_set_embed_page_setup = _rpythonic_function_(		"gtk_print_operation_set_embed_page_setup", ctypes.c_void_p, [
	("op",		ctypes.POINTER(_GtkPrintOperation)),
	("embed",		ctypes.c_int),] )

gtk_print_operation_get_embed_page_setup = _rpythonic_function_(		"gtk_print_operation_get_embed_page_setup", ctypes.c_int, [
	("op",		ctypes.POINTER(_GtkPrintOperation)),] )

gtk_print_operation_get_n_pages_to_print = _rpythonic_function_(		"gtk_print_operation_get_n_pages_to_print", ctypes.c_int, [
	("op",		ctypes.POINTER(_GtkPrintOperation)),] )

gtk_print_run_page_setup_dialog = _rpythonic_function_(		"gtk_print_run_page_setup_dialog", ctypes.POINTER(_GtkPageSetup), [
	("parent",		ctypes.POINTER(_GtkWindow)),
	("page_setup",		ctypes.POINTER(_GtkPageSetup)),
	("settings",		ctypes.POINTER(_GtkPrintSettings)),] )

GtkPageSetupDoneFunc = _rpythonic_function_(		"GtkPageSetupDoneFunc", ctypes.c_void_p, [
	("page_setup",		ctypes.POINTER(_GtkPageSetup)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

gtk_print_run_page_setup_dialog_async = _rpythonic_function_(		"gtk_print_run_page_setup_dialog_async", ctypes.c_void_p, [
	("parent",		ctypes.POINTER(_GtkWindow)),
	("page_setup",		ctypes.POINTER(_GtkPageSetup)),
	("settings",		ctypes.POINTER(_GtkPrintSettings)),
	("done_cb",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GtkPageSetup),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

gtk_progress_bar_get_type = _rpythonic_function_(		"gtk_progress_bar_get_type", ctypes.c_uint, [] )

gtk_progress_bar_new = _rpythonic_function_(		"gtk_progress_bar_new", ctypes.POINTER(_GtkWidget), [] )

gtk_progress_bar_pulse = _rpythonic_function_(		"gtk_progress_bar_pulse", ctypes.c_void_p, [
	("pbar",		ctypes.POINTER(_GtkProgressBar)),] )

gtk_progress_bar_set_text = _rpythonic_function_(		"gtk_progress_bar_set_text", ctypes.c_void_p, [
	("pbar",		ctypes.POINTER(_GtkProgressBar)),
	("text",		ctypes.POINTER(ctypes.c_char)),] )

gtk_progress_bar_set_fraction = _rpythonic_function_(		"gtk_progress_bar_set_fraction", ctypes.c_void_p, [
	("pbar",		ctypes.POINTER(_GtkProgressBar)),
	("fraction",		ctypes.c_double),] )

gtk_progress_bar_set_pulse_step = _rpythonic_function_(		"gtk_progress_bar_set_pulse_step", ctypes.c_void_p, [
	("pbar",		ctypes.POINTER(_GtkProgressBar)),
	("fraction",		ctypes.c_double),] )

gtk_progress_bar_set_inverted = _rpythonic_function_(		"gtk_progress_bar_set_inverted", ctypes.c_void_p, [
	("pbar",		ctypes.POINTER(_GtkProgressBar)),
	("inverted",		ctypes.c_int),] )

gtk_progress_bar_get_text = _rpythonic_function_(		"gtk_progress_bar_get_text", ctypes.POINTER(ctypes.c_char), [
	("pbar",		ctypes.POINTER(_GtkProgressBar)),] )

gtk_progress_bar_get_fraction = _rpythonic_function_(		"gtk_progress_bar_get_fraction", ctypes.c_double, [
	("pbar",		ctypes.POINTER(_GtkProgressBar)),] )

gtk_progress_bar_get_pulse_step = _rpythonic_function_(		"gtk_progress_bar_get_pulse_step", ctypes.c_double, [
	("pbar",		ctypes.POINTER(_GtkProgressBar)),] )

gtk_progress_bar_get_inverted = _rpythonic_function_(		"gtk_progress_bar_get_inverted", ctypes.c_int, [
	("pbar",		ctypes.POINTER(_GtkProgressBar)),] )

gtk_progress_bar_set_ellipsize = _rpythonic_function_(		"gtk_progress_bar_set_ellipsize", ctypes.c_void_p, [
	("pbar",		ctypes.POINTER(_GtkProgressBar)),
	("mode",		ctypes.c_int),] )

gtk_progress_bar_get_ellipsize = _rpythonic_function_(		"gtk_progress_bar_get_ellipsize", ctypes.c_int, [
	("pbar",		ctypes.POINTER(_GtkProgressBar)),] )

gtk_progress_bar_set_show_text = _rpythonic_function_(		"gtk_progress_bar_set_show_text", ctypes.c_void_p, [
	("pbar",		ctypes.POINTER(_GtkProgressBar)),
	("show_text",		ctypes.c_int),] )

gtk_progress_bar_get_show_text = _rpythonic_function_(		"gtk_progress_bar_get_show_text", ctypes.c_int, [
	("pbar",		ctypes.POINTER(_GtkProgressBar)),] )

gtk_toggle_action_get_type = _rpythonic_function_(		"gtk_toggle_action_get_type", ctypes.c_uint, [] )

gtk_toggle_action_new = _rpythonic_function_(		"gtk_toggle_action_new", ctypes.POINTER(_GtkToggleAction), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("label",		ctypes.POINTER(ctypes.c_char)),
	("tooltip",		ctypes.POINTER(ctypes.c_char)),
	("stock_id",		ctypes.POINTER(ctypes.c_char)),] )

gtk_toggle_action_toggled = _rpythonic_function_(		"gtk_toggle_action_toggled", ctypes.c_void_p, [
	("action",		ctypes.POINTER(_GtkToggleAction)),] )

gtk_toggle_action_set_active = _rpythonic_function_(		"gtk_toggle_action_set_active", ctypes.c_void_p, [
	("action",		ctypes.POINTER(_GtkToggleAction)),
	("is_active",		ctypes.c_int),] )

gtk_toggle_action_get_active = _rpythonic_function_(		"gtk_toggle_action_get_active", ctypes.c_int, [
	("action",		ctypes.POINTER(_GtkToggleAction)),] )

gtk_toggle_action_set_draw_as_radio = _rpythonic_function_(		"gtk_toggle_action_set_draw_as_radio", ctypes.c_void_p, [
	("action",		ctypes.POINTER(_GtkToggleAction)),
	("draw_as_radio",		ctypes.c_int),] )

gtk_toggle_action_get_draw_as_radio = _rpythonic_function_(		"gtk_toggle_action_get_draw_as_radio", ctypes.c_int, [
	("action",		ctypes.POINTER(_GtkToggleAction)),] )

_gtk_toggle_action_set_active = _rpythonic_function_(		"_gtk_toggle_action_set_active", ctypes.c_void_p, [
	("toggle_action",		ctypes.POINTER(_GtkToggleAction)),
	("is_active",		ctypes.c_int),] )

gtk_radio_action_get_type = _rpythonic_function_(		"gtk_radio_action_get_type", ctypes.c_uint, [] )

gtk_radio_action_new = _rpythonic_function_(		"gtk_radio_action_new", ctypes.POINTER(_GtkRadioAction), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("label",		ctypes.POINTER(ctypes.c_char)),
	("tooltip",		ctypes.POINTER(ctypes.c_char)),
	("stock_id",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_int),] )

gtk_radio_action_get_group = _rpythonic_function_(		"gtk_radio_action_get_group", ctypes.POINTER(_GSList), [
	("action",		ctypes.POINTER(_GtkRadioAction)),] )

gtk_radio_action_set_group = _rpythonic_function_(		"gtk_radio_action_set_group", ctypes.c_void_p, [
	("action",		ctypes.POINTER(_GtkRadioAction)),
	("group",		ctypes.POINTER(_GSList)),] )

gtk_radio_action_join_group = _rpythonic_function_(		"gtk_radio_action_join_group", ctypes.c_void_p, [
	("action",		ctypes.POINTER(_GtkRadioAction)),
	("group_source",		ctypes.POINTER(_GtkRadioAction)),] )

gtk_radio_action_get_current_value = _rpythonic_function_(		"gtk_radio_action_get_current_value", ctypes.c_int, [
	("action",		ctypes.POINTER(_GtkRadioAction)),] )

gtk_radio_action_set_current_value = _rpythonic_function_(		"gtk_radio_action_set_current_value", ctypes.c_void_p, [
	("action",		ctypes.POINTER(_GtkRadioAction)),
	("current_value",		ctypes.c_int),] )

group_changed = _rpythonic_function_(		"group_changed", ctypes.c_void_p, [
	("radio_button",		ctypes.POINTER(_GtkRadioButton)),] )

gtk_radio_button_get_type = _rpythonic_function_(		"gtk_radio_button_get_type", ctypes.c_uint, [] )

gtk_radio_button_new = _rpythonic_function_(		"gtk_radio_button_new", ctypes.POINTER(_GtkWidget), [
	("group",		ctypes.POINTER(_GSList)),] )

gtk_radio_button_new_from_widget = _rpythonic_function_(		"gtk_radio_button_new_from_widget", ctypes.POINTER(_GtkWidget), [
	("radio_group_member",		ctypes.POINTER(_GtkRadioButton)),] )

gtk_radio_button_new_with_label = _rpythonic_function_(		"gtk_radio_button_new_with_label", ctypes.POINTER(_GtkWidget), [
	("group",		ctypes.POINTER(_GSList)),
	("label",		ctypes.POINTER(ctypes.c_char)),] )

gtk_radio_button_new_with_label_from_widget = _rpythonic_function_(		"gtk_radio_button_new_with_label_from_widget", ctypes.POINTER(_GtkWidget), [
	("radio_group_member",		ctypes.POINTER(_GtkRadioButton)),
	("label",		ctypes.POINTER(ctypes.c_char)),] )

gtk_radio_button_new_with_mnemonic = _rpythonic_function_(		"gtk_radio_button_new_with_mnemonic", ctypes.POINTER(_GtkWidget), [
	("group",		ctypes.POINTER(_GSList)),
	("label",		ctypes.POINTER(ctypes.c_char)),] )

gtk_radio_button_new_with_mnemonic_from_widget = _rpythonic_function_(		"gtk_radio_button_new_with_mnemonic_from_widget", ctypes.POINTER(_GtkWidget), [
	("radio_group_member",		ctypes.POINTER(_GtkRadioButton)),
	("label",		ctypes.POINTER(ctypes.c_char)),] )

gtk_radio_button_get_group = _rpythonic_function_(		"gtk_radio_button_get_group", ctypes.POINTER(_GSList), [
	("radio_button",		ctypes.POINTER(_GtkRadioButton)),] )

gtk_radio_button_set_group = _rpythonic_function_(		"gtk_radio_button_set_group", ctypes.c_void_p, [
	("radio_button",		ctypes.POINTER(_GtkRadioButton)),
	("group",		ctypes.POINTER(_GSList)),] )

gtk_radio_button_join_group = _rpythonic_function_(		"gtk_radio_button_join_group", ctypes.c_void_p, [
	("radio_button",		ctypes.POINTER(_GtkRadioButton)),
	("group_source",		ctypes.POINTER(_GtkRadioButton)),] )

gtk_radio_menu_item_get_type = _rpythonic_function_(		"gtk_radio_menu_item_get_type", ctypes.c_uint, [] )

gtk_radio_menu_item_new = _rpythonic_function_(		"gtk_radio_menu_item_new", ctypes.POINTER(_GtkWidget), [
	("group",		ctypes.POINTER(_GSList)),] )

gtk_radio_menu_item_new_with_label = _rpythonic_function_(		"gtk_radio_menu_item_new_with_label", ctypes.POINTER(_GtkWidget), [
	("group",		ctypes.POINTER(_GSList)),
	("label",		ctypes.POINTER(ctypes.c_char)),] )

gtk_radio_menu_item_new_with_mnemonic = _rpythonic_function_(		"gtk_radio_menu_item_new_with_mnemonic", ctypes.POINTER(_GtkWidget), [
	("group",		ctypes.POINTER(_GSList)),
	("label",		ctypes.POINTER(ctypes.c_char)),] )

gtk_radio_menu_item_new_from_widget = _rpythonic_function_(		"gtk_radio_menu_item_new_from_widget", ctypes.POINTER(_GtkWidget), [
	("group",		ctypes.POINTER(_GtkRadioMenuItem)),] )

gtk_radio_menu_item_new_with_mnemonic_from_widget = _rpythonic_function_(		"gtk_radio_menu_item_new_with_mnemonic_from_widget", ctypes.POINTER(_GtkWidget), [
	("group",		ctypes.POINTER(_GtkRadioMenuItem)),
	("label",		ctypes.POINTER(ctypes.c_char)),] )

gtk_radio_menu_item_new_with_label_from_widget = _rpythonic_function_(		"gtk_radio_menu_item_new_with_label_from_widget", ctypes.POINTER(_GtkWidget), [
	("group",		ctypes.POINTER(_GtkRadioMenuItem)),
	("label",		ctypes.POINTER(ctypes.c_char)),] )

gtk_radio_menu_item_get_group = _rpythonic_function_(		"gtk_radio_menu_item_get_group", ctypes.POINTER(_GSList), [
	("radio_menu_item",		ctypes.POINTER(_GtkRadioMenuItem)),] )

gtk_radio_menu_item_set_group = _rpythonic_function_(		"gtk_radio_menu_item_set_group", ctypes.c_void_p, [
	("radio_menu_item",		ctypes.POINTER(_GtkRadioMenuItem)),
	("group",		ctypes.POINTER(_GSList)),] )

gtk_toggle_tool_button_get_type = _rpythonic_function_(		"gtk_toggle_tool_button_get_type", ctypes.c_uint, [] )

gtk_toggle_tool_button_new = _rpythonic_function_(		"gtk_toggle_tool_button_new", ctypes.POINTER(_GtkToolItem), [] )

gtk_toggle_tool_button_new_from_stock = _rpythonic_function_(		"gtk_toggle_tool_button_new_from_stock", ctypes.POINTER(_GtkToolItem), [
	("stock_id",		ctypes.POINTER(ctypes.c_char)),] )

gtk_toggle_tool_button_set_active = _rpythonic_function_(		"gtk_toggle_tool_button_set_active", ctypes.c_void_p, [
	("button",		ctypes.POINTER(_GtkToggleToolButton)),
	("is_active",		ctypes.c_int),] )

gtk_toggle_tool_button_get_active = _rpythonic_function_(		"gtk_toggle_tool_button_get_active", ctypes.c_int, [
	("button",		ctypes.POINTER(_GtkToggleToolButton)),] )

gtk_radio_tool_button_get_type = _rpythonic_function_(		"gtk_radio_tool_button_get_type", ctypes.c_uint, [] )

gtk_radio_tool_button_new = _rpythonic_function_(		"gtk_radio_tool_button_new", ctypes.POINTER(_GtkToolItem), [
	("group",		ctypes.POINTER(_GSList)),] )

gtk_radio_tool_button_new_from_stock = _rpythonic_function_(		"gtk_radio_tool_button_new_from_stock", ctypes.POINTER(_GtkToolItem), [
	("group",		ctypes.POINTER(_GSList)),
	("stock_id",		ctypes.POINTER(ctypes.c_char)),] )

gtk_radio_tool_button_new_from_widget = _rpythonic_function_(		"gtk_radio_tool_button_new_from_widget", ctypes.POINTER(_GtkToolItem), [
	("group",		ctypes.POINTER(_GtkRadioToolButton)),] )

gtk_radio_tool_button_new_with_stock_from_widget = _rpythonic_function_(		"gtk_radio_tool_button_new_with_stock_from_widget", ctypes.POINTER(_GtkToolItem), [
	("group",		ctypes.POINTER(_GtkRadioToolButton)),
	("stock_id",		ctypes.POINTER(ctypes.c_char)),] )

gtk_radio_tool_button_get_group = _rpythonic_function_(		"gtk_radio_tool_button_get_group", ctypes.POINTER(_GSList), [
	("button",		ctypes.POINTER(_GtkRadioToolButton)),] )

gtk_radio_tool_button_set_group = _rpythonic_function_(		"gtk_radio_tool_button_set_group", ctypes.c_void_p, [
	("button",		ctypes.POINTER(_GtkRadioToolButton)),
	("group",		ctypes.POINTER(_GSList)),] )

_gtk_recent1 = _rpythonic_function_(		"_gtk_recent1", ctypes.c_void_p, [] )

_gtk_recent2 = _rpythonic_function_(		"_gtk_recent2", ctypes.c_void_p, [] )

_gtk_recent3 = _rpythonic_function_(		"_gtk_recent3", ctypes.c_void_p, [] )

_gtk_recent4 = _rpythonic_function_(		"_gtk_recent4", ctypes.c_void_p, [] )

gtk_recent_manager_error_quark = _rpythonic_function_(		"gtk_recent_manager_error_quark", ctypes.c_uint, [] )

gtk_recent_manager_get_type = _rpythonic_function_(		"gtk_recent_manager_get_type", ctypes.c_uint, [] )

gtk_recent_manager_new = _rpythonic_function_(		"gtk_recent_manager_new", ctypes.POINTER(_GtkRecentManager), [] )

gtk_recent_manager_get_default = _rpythonic_function_(		"gtk_recent_manager_get_default", ctypes.POINTER(_GtkRecentManager), [] )

gtk_recent_manager_add_item = _rpythonic_function_(		"gtk_recent_manager_add_item", ctypes.c_int, [
	("manager",		ctypes.POINTER(_GtkRecentManager)),
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

gtk_recent_manager_add_full = _rpythonic_function_(		"gtk_recent_manager_add_full", ctypes.c_int, [
	("manager",		ctypes.POINTER(_GtkRecentManager)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("recent_data",		ctypes.POINTER(_GtkRecentData)),] )

gtk_recent_manager_remove_item = _rpythonic_function_(		"gtk_recent_manager_remove_item", ctypes.c_int, [
	("manager",		ctypes.POINTER(_GtkRecentManager)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_recent_manager_lookup_item = _rpythonic_function_(		"gtk_recent_manager_lookup_item", ctypes.POINTER(_GtkRecentInfo), [
	("manager",		ctypes.POINTER(_GtkRecentManager)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_recent_manager_has_item = _rpythonic_function_(		"gtk_recent_manager_has_item", ctypes.c_int, [
	("manager",		ctypes.POINTER(_GtkRecentManager)),
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

gtk_recent_manager_move_item = _rpythonic_function_(		"gtk_recent_manager_move_item", ctypes.c_int, [
	("manager",		ctypes.POINTER(_GtkRecentManager)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("new_uri",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_recent_manager_get_items = _rpythonic_function_(		"gtk_recent_manager_get_items", ctypes.POINTER(_GList), [
	("manager",		ctypes.POINTER(_GtkRecentManager)),] )

gtk_recent_manager_purge_items = _rpythonic_function_(		"gtk_recent_manager_purge_items", ctypes.c_int, [
	("manager",		ctypes.POINTER(_GtkRecentManager)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_recent_info_get_type = _rpythonic_function_(		"gtk_recent_info_get_type", ctypes.c_uint, [] )

gtk_recent_info_ref = _rpythonic_function_(		"gtk_recent_info_ref", ctypes.POINTER(_GtkRecentInfo), [
	("info",		ctypes.POINTER(_GtkRecentInfo)),] )

gtk_recent_info_unref = _rpythonic_function_(		"gtk_recent_info_unref", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GtkRecentInfo)),] )

gtk_recent_info_get_uri = _rpythonic_function_(		"gtk_recent_info_get_uri", ctypes.POINTER(ctypes.c_char), [
	("info",		ctypes.POINTER(_GtkRecentInfo)),] )

gtk_recent_info_get_display_name = _rpythonic_function_(		"gtk_recent_info_get_display_name", ctypes.POINTER(ctypes.c_char), [
	("info",		ctypes.POINTER(_GtkRecentInfo)),] )

gtk_recent_info_get_description = _rpythonic_function_(		"gtk_recent_info_get_description", ctypes.POINTER(ctypes.c_char), [
	("info",		ctypes.POINTER(_GtkRecentInfo)),] )

gtk_recent_info_get_mime_type = _rpythonic_function_(		"gtk_recent_info_get_mime_type", ctypes.POINTER(ctypes.c_char), [
	("info",		ctypes.POINTER(_GtkRecentInfo)),] )

gtk_recent_info_get_added = _rpythonic_function_(		"gtk_recent_info_get_added", ctypes.c_int64, [
	("info",		ctypes.POINTER(_GtkRecentInfo)),] )

gtk_recent_info_get_modified = _rpythonic_function_(		"gtk_recent_info_get_modified", ctypes.c_int64, [
	("info",		ctypes.POINTER(_GtkRecentInfo)),] )

gtk_recent_info_get_visited = _rpythonic_function_(		"gtk_recent_info_get_visited", ctypes.c_int64, [
	("info",		ctypes.POINTER(_GtkRecentInfo)),] )

gtk_recent_info_get_private_hint = _rpythonic_function_(		"gtk_recent_info_get_private_hint", ctypes.c_int, [
	("info",		ctypes.POINTER(_GtkRecentInfo)),] )

gtk_recent_info_get_application_info = _rpythonic_function_(		"gtk_recent_info_get_application_info", ctypes.c_int, [
	("info",		ctypes.POINTER(_GtkRecentInfo)),
	("app_name",		ctypes.POINTER(ctypes.c_char)),
	("app_exec",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("count",		ctypes.POINTER(ctypes.c_uint)),
	("time_",		ctypes.POINTER(ctypes.c_int64)),] )

gtk_recent_info_create_app_info = _rpythonic_function_(		"gtk_recent_info_create_app_info", ctypes.POINTER(_GAppInfo), [
	("info",		ctypes.POINTER(_GtkRecentInfo)),
	("app_name",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_recent_info_get_applications = _rpythonic_function_(		"gtk_recent_info_get_applications", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("info",		ctypes.POINTER(_GtkRecentInfo)),
	("length",		ctypes.POINTER(ctypes.c_uint)),] )

gtk_recent_info_last_application = _rpythonic_function_(		"gtk_recent_info_last_application", ctypes.POINTER(ctypes.c_char), [
	("info",		ctypes.POINTER(_GtkRecentInfo)),] )

gtk_recent_info_has_application = _rpythonic_function_(		"gtk_recent_info_has_application", ctypes.c_int, [
	("info",		ctypes.POINTER(_GtkRecentInfo)),
	("app_name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_recent_info_get_groups = _rpythonic_function_(		"gtk_recent_info_get_groups", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("info",		ctypes.POINTER(_GtkRecentInfo)),
	("length",		ctypes.POINTER(ctypes.c_uint)),] )

gtk_recent_info_has_group = _rpythonic_function_(		"gtk_recent_info_has_group", ctypes.c_int, [
	("info",		ctypes.POINTER(_GtkRecentInfo)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_recent_info_get_icon = _rpythonic_function_(		"gtk_recent_info_get_icon", ctypes.POINTER(_GdkPixbuf), [
	("info",		ctypes.POINTER(_GtkRecentInfo)),
	("size",		ctypes.c_int),] )

gtk_recent_info_get_gicon = _rpythonic_function_(		"gtk_recent_info_get_gicon", ctypes.POINTER(_GIcon), [
	("info",		ctypes.POINTER(_GtkRecentInfo)),] )

gtk_recent_info_get_short_name = _rpythonic_function_(		"gtk_recent_info_get_short_name", ctypes.POINTER(ctypes.c_char), [
	("info",		ctypes.POINTER(_GtkRecentInfo)),] )

gtk_recent_info_get_uri_display = _rpythonic_function_(		"gtk_recent_info_get_uri_display", ctypes.POINTER(ctypes.c_char), [
	("info",		ctypes.POINTER(_GtkRecentInfo)),] )

gtk_recent_info_get_age = _rpythonic_function_(		"gtk_recent_info_get_age", ctypes.c_int, [
	("info",		ctypes.POINTER(_GtkRecentInfo)),] )

gtk_recent_info_is_local = _rpythonic_function_(		"gtk_recent_info_is_local", ctypes.c_int, [
	("info",		ctypes.POINTER(_GtkRecentInfo)),] )

gtk_recent_info_exists = _rpythonic_function_(		"gtk_recent_info_exists", ctypes.c_int, [
	("info",		ctypes.POINTER(_GtkRecentInfo)),] )

gtk_recent_info_match = _rpythonic_function_(		"gtk_recent_info_match", ctypes.c_int, [
	("info_a",		ctypes.POINTER(_GtkRecentInfo)),
	("info_b",		ctypes.POINTER(_GtkRecentInfo)),] )

_gtk_recent_manager_sync = _rpythonic_function_(		"_gtk_recent_manager_sync", ctypes.c_void_p, [] )

gtk_recent_action_get_type = _rpythonic_function_(		"gtk_recent_action_get_type", ctypes.c_uint, [] )

gtk_recent_action_new = _rpythonic_function_(		"gtk_recent_action_new", ctypes.POINTER(_GtkAction), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("label",		ctypes.POINTER(ctypes.c_char)),
	("tooltip",		ctypes.POINTER(ctypes.c_char)),
	("stock_id",		ctypes.POINTER(ctypes.c_char)),] )

gtk_recent_action_new_for_manager = _rpythonic_function_(		"gtk_recent_action_new_for_manager", ctypes.POINTER(_GtkAction), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("label",		ctypes.POINTER(ctypes.c_char)),
	("tooltip",		ctypes.POINTER(ctypes.c_char)),
	("stock_id",		ctypes.POINTER(ctypes.c_char)),
	("manager",		ctypes.POINTER(_GtkRecentManager)),] )

gtk_recent_action_get_show_numbers = _rpythonic_function_(		"gtk_recent_action_get_show_numbers", ctypes.c_int, [
	("action",		ctypes.POINTER(_GtkRecentAction)),] )

gtk_recent_action_set_show_numbers = _rpythonic_function_(		"gtk_recent_action_set_show_numbers", ctypes.c_void_p, [
	("action",		ctypes.POINTER(_GtkRecentAction)),
	("show_numbers",		ctypes.c_int),] )

GtkRecentFilterFunc = _rpythonic_function_(		"GtkRecentFilterFunc", ctypes.c_int, [
	("filter_info",		ctypes.POINTER(_GtkRecentFilterInfo)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gtk_recent_filter_get_type = _rpythonic_function_(		"gtk_recent_filter_get_type", ctypes.c_uint, [] )

gtk_recent_filter_new = _rpythonic_function_(		"gtk_recent_filter_new", ctypes.POINTER(_GtkRecentFilter), [] )

gtk_recent_filter_set_name = _rpythonic_function_(		"gtk_recent_filter_set_name", ctypes.c_void_p, [
	("filter",		ctypes.POINTER(_GtkRecentFilter)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_recent_filter_get_name = _rpythonic_function_(		"gtk_recent_filter_get_name", ctypes.POINTER(ctypes.c_char), [
	("filter",		ctypes.POINTER(_GtkRecentFilter)),] )

gtk_recent_filter_add_mime_type = _rpythonic_function_(		"gtk_recent_filter_add_mime_type", ctypes.c_void_p, [
	("filter",		ctypes.POINTER(_GtkRecentFilter)),
	("mime_type",		ctypes.POINTER(ctypes.c_char)),] )

gtk_recent_filter_add_pattern = _rpythonic_function_(		"gtk_recent_filter_add_pattern", ctypes.c_void_p, [
	("filter",		ctypes.POINTER(_GtkRecentFilter)),
	("pattern",		ctypes.POINTER(ctypes.c_char)),] )

gtk_recent_filter_add_pixbuf_formats = _rpythonic_function_(		"gtk_recent_filter_add_pixbuf_formats", ctypes.c_void_p, [
	("filter",		ctypes.POINTER(_GtkRecentFilter)),] )

gtk_recent_filter_add_application = _rpythonic_function_(		"gtk_recent_filter_add_application", ctypes.c_void_p, [
	("filter",		ctypes.POINTER(_GtkRecentFilter)),
	("application",		ctypes.POINTER(ctypes.c_char)),] )

gtk_recent_filter_add_group = _rpythonic_function_(		"gtk_recent_filter_add_group", ctypes.c_void_p, [
	("filter",		ctypes.POINTER(_GtkRecentFilter)),
	("group",		ctypes.POINTER(ctypes.c_char)),] )

gtk_recent_filter_add_age = _rpythonic_function_(		"gtk_recent_filter_add_age", ctypes.c_void_p, [
	("filter",		ctypes.POINTER(_GtkRecentFilter)),
	("days",		ctypes.c_int),] )

gtk_recent_filter_add_custom = _rpythonic_function_(		"gtk_recent_filter_add_custom", ctypes.c_void_p, [
	("filter",		ctypes.POINTER(_GtkRecentFilter)),
	("needed",		ctypes.c_int),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GtkRecentFilterInfo),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("data_destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

gtk_recent_filter_get_needed = _rpythonic_function_(		"gtk_recent_filter_get_needed", ctypes.c_int, [
	("filter",		ctypes.POINTER(_GtkRecentFilter)),] )

gtk_recent_filter_filter = _rpythonic_function_(		"gtk_recent_filter_filter", ctypes.c_int, [
	("filter",		ctypes.POINTER(_GtkRecentFilter)),
	("filter_info",		ctypes.POINTER(_GtkRecentFilterInfo)),] )

GtkRecentSortFunc = _rpythonic_function_(		"GtkRecentSortFunc", ctypes.c_int, [
	("a",		ctypes.POINTER(_GtkRecentInfo)),
	("b",		ctypes.POINTER(_GtkRecentInfo)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gtk_recent_chooser_error_quark = _rpythonic_function_(		"gtk_recent_chooser_error_quark", ctypes.c_uint, [] )

set_current_uri = _rpythonic_function_(		"set_current_uri", ctypes.c_int, [
	("chooser",		ctypes.POINTER(_GtkRecentChooser)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

get_current_uri = _rpythonic_function_(		"get_current_uri", ctypes.POINTER(ctypes.c_char), [
	("chooser",		ctypes.POINTER(_GtkRecentChooser)),] )

select_uri = _rpythonic_function_(		"select_uri", ctypes.c_int, [
	("chooser",		ctypes.POINTER(_GtkRecentChooser)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

unselect_uri = _rpythonic_function_(		"unselect_uri", ctypes.c_void_p, [
	("chooser",		ctypes.POINTER(_GtkRecentChooser)),
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

get_items = _rpythonic_function_(		"get_items", ctypes.POINTER(_GList), [
	("chooser",		ctypes.POINTER(_GtkRecentChooser)),] )

get_recent_manager = _rpythonic_function_(		"get_recent_manager", ctypes.POINTER(_GtkRecentManager), [
	("chooser",		ctypes.POINTER(_GtkRecentChooser)),] )

add_filter = _rpythonic_function_(		"add_filter", ctypes.c_void_p, [
	("chooser",		ctypes.POINTER(_GtkRecentChooser)),
	("filter",		ctypes.POINTER(_GtkRecentFilter)),] )

remove_filter = _rpythonic_function_(		"remove_filter", ctypes.c_void_p, [
	("chooser",		ctypes.POINTER(_GtkRecentChooser)),
	("filter",		ctypes.POINTER(_GtkRecentFilter)),] )

list_filters = _rpythonic_function_(		"list_filters", ctypes.POINTER(_GSList), [
	("chooser",		ctypes.POINTER(_GtkRecentChooser)),] )

gtk_recent_chooser_get_type = _rpythonic_function_(		"gtk_recent_chooser_get_type", ctypes.c_uint, [] )

gtk_recent_chooser_set_show_private = _rpythonic_function_(		"gtk_recent_chooser_set_show_private", ctypes.c_void_p, [
	("chooser",		ctypes.POINTER(_GtkRecentChooser)),
	("show_private",		ctypes.c_int),] )

gtk_recent_chooser_get_show_private = _rpythonic_function_(		"gtk_recent_chooser_get_show_private", ctypes.c_int, [
	("chooser",		ctypes.POINTER(_GtkRecentChooser)),] )

gtk_recent_chooser_set_show_not_found = _rpythonic_function_(		"gtk_recent_chooser_set_show_not_found", ctypes.c_void_p, [
	("chooser",		ctypes.POINTER(_GtkRecentChooser)),
	("show_not_found",		ctypes.c_int),] )

gtk_recent_chooser_get_show_not_found = _rpythonic_function_(		"gtk_recent_chooser_get_show_not_found", ctypes.c_int, [
	("chooser",		ctypes.POINTER(_GtkRecentChooser)),] )

gtk_recent_chooser_set_select_multiple = _rpythonic_function_(		"gtk_recent_chooser_set_select_multiple", ctypes.c_void_p, [
	("chooser",		ctypes.POINTER(_GtkRecentChooser)),
	("select_multiple",		ctypes.c_int),] )

gtk_recent_chooser_get_select_multiple = _rpythonic_function_(		"gtk_recent_chooser_get_select_multiple", ctypes.c_int, [
	("chooser",		ctypes.POINTER(_GtkRecentChooser)),] )

gtk_recent_chooser_set_limit = _rpythonic_function_(		"gtk_recent_chooser_set_limit", ctypes.c_void_p, [
	("chooser",		ctypes.POINTER(_GtkRecentChooser)),
	("limit",		ctypes.c_int),] )

gtk_recent_chooser_get_limit = _rpythonic_function_(		"gtk_recent_chooser_get_limit", ctypes.c_int, [
	("chooser",		ctypes.POINTER(_GtkRecentChooser)),] )

gtk_recent_chooser_set_local_only = _rpythonic_function_(		"gtk_recent_chooser_set_local_only", ctypes.c_void_p, [
	("chooser",		ctypes.POINTER(_GtkRecentChooser)),
	("local_only",		ctypes.c_int),] )

gtk_recent_chooser_get_local_only = _rpythonic_function_(		"gtk_recent_chooser_get_local_only", ctypes.c_int, [
	("chooser",		ctypes.POINTER(_GtkRecentChooser)),] )

gtk_recent_chooser_set_show_tips = _rpythonic_function_(		"gtk_recent_chooser_set_show_tips", ctypes.c_void_p, [
	("chooser",		ctypes.POINTER(_GtkRecentChooser)),
	("show_tips",		ctypes.c_int),] )

gtk_recent_chooser_get_show_tips = _rpythonic_function_(		"gtk_recent_chooser_get_show_tips", ctypes.c_int, [
	("chooser",		ctypes.POINTER(_GtkRecentChooser)),] )

gtk_recent_chooser_set_show_icons = _rpythonic_function_(		"gtk_recent_chooser_set_show_icons", ctypes.c_void_p, [
	("chooser",		ctypes.POINTER(_GtkRecentChooser)),
	("show_icons",		ctypes.c_int),] )

gtk_recent_chooser_get_show_icons = _rpythonic_function_(		"gtk_recent_chooser_get_show_icons", ctypes.c_int, [
	("chooser",		ctypes.POINTER(_GtkRecentChooser)),] )

gtk_recent_chooser_set_sort_type = _rpythonic_function_(		"gtk_recent_chooser_set_sort_type", ctypes.c_void_p, [
	("chooser",		ctypes.POINTER(_GtkRecentChooser)),
	("sort_type",		ctypes.c_int),] )

gtk_recent_chooser_get_sort_type = _rpythonic_function_(		"gtk_recent_chooser_get_sort_type", ctypes.c_int, [
	("chooser",		ctypes.POINTER(_GtkRecentChooser)),] )

gtk_recent_chooser_set_sort_func = _rpythonic_function_(		"gtk_recent_chooser_set_sort_func", ctypes.c_void_p, [
	("chooser",		ctypes.POINTER(_GtkRecentChooser)),
	("sort_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GtkRecentInfo),ctypes.POINTER(_GtkRecentInfo),ctypes.POINTER(ctypes.c_void_p),)),
	("sort_data",		ctypes.POINTER(ctypes.c_void_p)),
	("data_destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

gtk_recent_chooser_set_current_uri = _rpythonic_function_(		"gtk_recent_chooser_set_current_uri", ctypes.c_int, [
	("chooser",		ctypes.POINTER(_GtkRecentChooser)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_recent_chooser_get_current_uri = _rpythonic_function_(		"gtk_recent_chooser_get_current_uri", ctypes.POINTER(ctypes.c_char), [
	("chooser",		ctypes.POINTER(_GtkRecentChooser)),] )

gtk_recent_chooser_get_current_item = _rpythonic_function_(		"gtk_recent_chooser_get_current_item", ctypes.POINTER(_GtkRecentInfo), [
	("chooser",		ctypes.POINTER(_GtkRecentChooser)),] )

gtk_recent_chooser_select_uri = _rpythonic_function_(		"gtk_recent_chooser_select_uri", ctypes.c_int, [
	("chooser",		ctypes.POINTER(_GtkRecentChooser)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_recent_chooser_unselect_uri = _rpythonic_function_(		"gtk_recent_chooser_unselect_uri", ctypes.c_void_p, [
	("chooser",		ctypes.POINTER(_GtkRecentChooser)),
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

gtk_recent_chooser_select_all = _rpythonic_function_(		"gtk_recent_chooser_select_all", ctypes.c_void_p, [
	("chooser",		ctypes.POINTER(_GtkRecentChooser)),] )

gtk_recent_chooser_unselect_all = _rpythonic_function_(		"gtk_recent_chooser_unselect_all", ctypes.c_void_p, [
	("chooser",		ctypes.POINTER(_GtkRecentChooser)),] )

gtk_recent_chooser_get_items = _rpythonic_function_(		"gtk_recent_chooser_get_items", ctypes.POINTER(_GList), [
	("chooser",		ctypes.POINTER(_GtkRecentChooser)),] )

gtk_recent_chooser_get_uris = _rpythonic_function_(		"gtk_recent_chooser_get_uris", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("chooser",		ctypes.POINTER(_GtkRecentChooser)),
	("length",		ctypes.POINTER(ctypes.c_uint)),] )

gtk_recent_chooser_add_filter = _rpythonic_function_(		"gtk_recent_chooser_add_filter", ctypes.c_void_p, [
	("chooser",		ctypes.POINTER(_GtkRecentChooser)),
	("filter",		ctypes.POINTER(_GtkRecentFilter)),] )

gtk_recent_chooser_remove_filter = _rpythonic_function_(		"gtk_recent_chooser_remove_filter", ctypes.c_void_p, [
	("chooser",		ctypes.POINTER(_GtkRecentChooser)),
	("filter",		ctypes.POINTER(_GtkRecentFilter)),] )

gtk_recent_chooser_list_filters = _rpythonic_function_(		"gtk_recent_chooser_list_filters", ctypes.POINTER(_GSList), [
	("chooser",		ctypes.POINTER(_GtkRecentChooser)),] )

gtk_recent_chooser_set_filter = _rpythonic_function_(		"gtk_recent_chooser_set_filter", ctypes.c_void_p, [
	("chooser",		ctypes.POINTER(_GtkRecentChooser)),
	("filter",		ctypes.POINTER(_GtkRecentFilter)),] )

gtk_recent_chooser_get_filter = _rpythonic_function_(		"gtk_recent_chooser_get_filter", ctypes.POINTER(_GtkRecentFilter), [
	("chooser",		ctypes.POINTER(_GtkRecentChooser)),] )

gtk_recent_chooser_dialog_get_type = _rpythonic_function_(		"gtk_recent_chooser_dialog_get_type", ctypes.c_uint, [] )

gtk_recent1 = _rpythonic_function_(		"gtk_recent1", ctypes.c_void_p, [] )

gtk_recent2 = _rpythonic_function_(		"gtk_recent2", ctypes.c_void_p, [] )

gtk_recent3 = _rpythonic_function_(		"gtk_recent3", ctypes.c_void_p, [] )

gtk_recent4 = _rpythonic_function_(		"gtk_recent4", ctypes.c_void_p, [] )

gtk_recent_chooser_menu_get_type = _rpythonic_function_(		"gtk_recent_chooser_menu_get_type", ctypes.c_uint, [] )

gtk_recent_chooser_menu_new = _rpythonic_function_(		"gtk_recent_chooser_menu_new", ctypes.POINTER(_GtkWidget), [] )

gtk_recent_chooser_menu_new_for_manager = _rpythonic_function_(		"gtk_recent_chooser_menu_new_for_manager", ctypes.POINTER(_GtkWidget), [
	("manager",		ctypes.POINTER(_GtkRecentManager)),] )

gtk_recent_chooser_menu_get_show_numbers = _rpythonic_function_(		"gtk_recent_chooser_menu_get_show_numbers", ctypes.c_int, [
	("menu",		ctypes.POINTER(_GtkRecentChooserMenu)),] )

gtk_recent_chooser_menu_set_show_numbers = _rpythonic_function_(		"gtk_recent_chooser_menu_set_show_numbers", ctypes.c_void_p, [
	("menu",		ctypes.POINTER(_GtkRecentChooserMenu)),
	("show_numbers",		ctypes.c_int),] )

gtk_recent_chooser_widget_get_type = _rpythonic_function_(		"gtk_recent_chooser_widget_get_type", ctypes.c_uint, [] )

gtk_recent_chooser_widget_new = _rpythonic_function_(		"gtk_recent_chooser_widget_new", ctypes.POINTER(_GtkWidget), [] )

gtk_recent_chooser_widget_new_for_manager = _rpythonic_function_(		"gtk_recent_chooser_widget_new_for_manager", ctypes.POINTER(_GtkWidget), [
	("manager",		ctypes.POINTER(_GtkRecentManager)),] )

gtk_scale_button_get_type = _rpythonic_function_(		"gtk_scale_button_get_type", ctypes.c_uint, [] )

gtk_scale_button_new = _rpythonic_function_(		"gtk_scale_button_new", ctypes.POINTER(_GtkWidget), [
	("size",		ctypes.c_int),
	("min",		ctypes.c_double),
	("max",		ctypes.c_double),
	("step",		ctypes.c_double),
	("icons",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

gtk_scale_button_set_icons = _rpythonic_function_(		"gtk_scale_button_set_icons", ctypes.c_void_p, [
	("button",		ctypes.POINTER(_GtkScaleButton)),
	("icons",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

gtk_scale_button_get_value = _rpythonic_function_(		"gtk_scale_button_get_value", ctypes.c_double, [
	("button",		ctypes.POINTER(_GtkScaleButton)),] )

gtk_scale_button_set_value = _rpythonic_function_(		"gtk_scale_button_set_value", ctypes.c_void_p, [
	("button",		ctypes.POINTER(_GtkScaleButton)),
	("value",		ctypes.c_double),] )

gtk_scale_button_get_adjustment = _rpythonic_function_(		"gtk_scale_button_get_adjustment", ctypes.POINTER(_GtkAdjustment), [
	("button",		ctypes.POINTER(_GtkScaleButton)),] )

gtk_scale_button_set_adjustment = _rpythonic_function_(		"gtk_scale_button_set_adjustment", ctypes.c_void_p, [
	("button",		ctypes.POINTER(_GtkScaleButton)),
	("adjustment",		ctypes.POINTER(_GtkAdjustment)),] )

gtk_scale_button_get_plus_button = _rpythonic_function_(		"gtk_scale_button_get_plus_button", ctypes.POINTER(_GtkWidget), [
	("button",		ctypes.POINTER(_GtkScaleButton)),] )

gtk_scale_button_get_minus_button = _rpythonic_function_(		"gtk_scale_button_get_minus_button", ctypes.POINTER(_GtkWidget), [
	("button",		ctypes.POINTER(_GtkScaleButton)),] )

gtk_scale_button_get_popup = _rpythonic_function_(		"gtk_scale_button_get_popup", ctypes.POINTER(_GtkWidget), [
	("button",		ctypes.POINTER(_GtkScaleButton)),] )

gtk_scrollable_get_type = _rpythonic_function_(		"gtk_scrollable_get_type", ctypes.c_uint, [] )

gtk_scrollable_get_hadjustment = _rpythonic_function_(		"gtk_scrollable_get_hadjustment", ctypes.POINTER(_GtkAdjustment), [
	("scrollable",		ctypes.POINTER(_GtkScrollable)),] )

gtk_scrollable_set_hadjustment = _rpythonic_function_(		"gtk_scrollable_set_hadjustment", ctypes.c_void_p, [
	("scrollable",		ctypes.POINTER(_GtkScrollable)),
	("hadjustment",		ctypes.POINTER(_GtkAdjustment)),] )

gtk_scrollable_get_vadjustment = _rpythonic_function_(		"gtk_scrollable_get_vadjustment", ctypes.POINTER(_GtkAdjustment), [
	("scrollable",		ctypes.POINTER(_GtkScrollable)),] )

gtk_scrollable_set_vadjustment = _rpythonic_function_(		"gtk_scrollable_set_vadjustment", ctypes.c_void_p, [
	("scrollable",		ctypes.POINTER(_GtkScrollable)),
	("vadjustment",		ctypes.POINTER(_GtkAdjustment)),] )

gtk_scrollable_get_hscroll_policy = _rpythonic_function_(		"gtk_scrollable_get_hscroll_policy", ctypes.c_int, [
	("scrollable",		ctypes.POINTER(_GtkScrollable)),] )

gtk_scrollable_set_hscroll_policy = _rpythonic_function_(		"gtk_scrollable_set_hscroll_policy", ctypes.c_void_p, [
	("scrollable",		ctypes.POINTER(_GtkScrollable)),
	("policy",		ctypes.c_int),] )

gtk_scrollable_get_vscroll_policy = _rpythonic_function_(		"gtk_scrollable_get_vscroll_policy", ctypes.c_int, [
	("scrollable",		ctypes.POINTER(_GtkScrollable)),] )

gtk_scrollable_set_vscroll_policy = _rpythonic_function_(		"gtk_scrollable_set_vscroll_policy", ctypes.c_void_p, [
	("scrollable",		ctypes.POINTER(_GtkScrollable)),
	("policy",		ctypes.c_int),] )

scroll_child = _rpythonic_function_(		"scroll_child", ctypes.c_int, [
	("scrolled_window",		ctypes.POINTER(_GtkScrolledWindow)),
	("scroll",		ctypes.c_int),
	("horizontal",		ctypes.c_int),] )

gtk_scrolled_window_get_type = _rpythonic_function_(		"gtk_scrolled_window_get_type", ctypes.c_uint, [] )

gtk_scrolled_window_new = _rpythonic_function_(		"gtk_scrolled_window_new", ctypes.POINTER(_GtkWidget), [
	("hadjustment",		ctypes.POINTER(_GtkAdjustment)),
	("vadjustment",		ctypes.POINTER(_GtkAdjustment)),] )

gtk_scrolled_window_set_hadjustment = _rpythonic_function_(		"gtk_scrolled_window_set_hadjustment", ctypes.c_void_p, [
	("scrolled_window",		ctypes.POINTER(_GtkScrolledWindow)),
	("hadjustment",		ctypes.POINTER(_GtkAdjustment)),] )

gtk_scrolled_window_set_vadjustment = _rpythonic_function_(		"gtk_scrolled_window_set_vadjustment", ctypes.c_void_p, [
	("scrolled_window",		ctypes.POINTER(_GtkScrolledWindow)),
	("vadjustment",		ctypes.POINTER(_GtkAdjustment)),] )

gtk_scrolled_window_get_hadjustment = _rpythonic_function_(		"gtk_scrolled_window_get_hadjustment", ctypes.POINTER(_GtkAdjustment), [
	("scrolled_window",		ctypes.POINTER(_GtkScrolledWindow)),] )

gtk_scrolled_window_get_vadjustment = _rpythonic_function_(		"gtk_scrolled_window_get_vadjustment", ctypes.POINTER(_GtkAdjustment), [
	("scrolled_window",		ctypes.POINTER(_GtkScrolledWindow)),] )

gtk_scrolled_window_get_hscrollbar = _rpythonic_function_(		"gtk_scrolled_window_get_hscrollbar", ctypes.POINTER(_GtkWidget), [
	("scrolled_window",		ctypes.POINTER(_GtkScrolledWindow)),] )

gtk_scrolled_window_get_vscrollbar = _rpythonic_function_(		"gtk_scrolled_window_get_vscrollbar", ctypes.POINTER(_GtkWidget), [
	("scrolled_window",		ctypes.POINTER(_GtkScrolledWindow)),] )

gtk_scrolled_window_set_policy = _rpythonic_function_(		"gtk_scrolled_window_set_policy", ctypes.c_void_p, [
	("scrolled_window",		ctypes.POINTER(_GtkScrolledWindow)),
	("hscrollbar_policy",		ctypes.c_int),
	("vscrollbar_policy",		ctypes.c_int),] )

gtk_scrolled_window_get_policy = _rpythonic_function_(		"gtk_scrolled_window_get_policy", ctypes.c_void_p, [
	("scrolled_window",		ctypes.POINTER(_GtkScrolledWindow)),
	("hscrollbar_policy",		ctypes.POINTER(ctypes.c_int)),
	("vscrollbar_policy",		ctypes.POINTER(ctypes.c_int)),] )

gtk_scrolled_window_set_placement = _rpythonic_function_(		"gtk_scrolled_window_set_placement", ctypes.c_void_p, [
	("scrolled_window",		ctypes.POINTER(_GtkScrolledWindow)),
	("window_placement",		ctypes.c_int),] )

gtk_scrolled_window_unset_placement = _rpythonic_function_(		"gtk_scrolled_window_unset_placement", ctypes.c_void_p, [
	("scrolled_window",		ctypes.POINTER(_GtkScrolledWindow)),] )

gtk_scrolled_window_get_placement = _rpythonic_function_(		"gtk_scrolled_window_get_placement", ctypes.c_int, [
	("scrolled_window",		ctypes.POINTER(_GtkScrolledWindow)),] )

gtk_scrolled_window_set_shadow_type = _rpythonic_function_(		"gtk_scrolled_window_set_shadow_type", ctypes.c_void_p, [
	("scrolled_window",		ctypes.POINTER(_GtkScrolledWindow)),
	("C_type",		ctypes.c_int),] )

gtk_scrolled_window_get_shadow_type = _rpythonic_function_(		"gtk_scrolled_window_get_shadow_type", ctypes.c_int, [
	("scrolled_window",		ctypes.POINTER(_GtkScrolledWindow)),] )

gtk_scrolled_window_add_with_viewport = _rpythonic_function_(		"gtk_scrolled_window_add_with_viewport", ctypes.c_void_p, [
	("scrolled_window",		ctypes.POINTER(_GtkScrolledWindow)),
	("child",		ctypes.POINTER(_GtkWidget)),] )

gtk_scrolled_window_get_min_content_width = _rpythonic_function_(		"gtk_scrolled_window_get_min_content_width", ctypes.c_int, [
	("scrolled_window",		ctypes.POINTER(_GtkScrolledWindow)),] )

gtk_scrolled_window_set_min_content_width = _rpythonic_function_(		"gtk_scrolled_window_set_min_content_width", ctypes.c_void_p, [
	("scrolled_window",		ctypes.POINTER(_GtkScrolledWindow)),
	("width",		ctypes.c_int),] )

gtk_scrolled_window_get_min_content_height = _rpythonic_function_(		"gtk_scrolled_window_get_min_content_height", ctypes.c_int, [
	("scrolled_window",		ctypes.POINTER(_GtkScrolledWindow)),] )

gtk_scrolled_window_set_min_content_height = _rpythonic_function_(		"gtk_scrolled_window_set_min_content_height", ctypes.c_void_p, [
	("scrolled_window",		ctypes.POINTER(_GtkScrolledWindow)),
	("height",		ctypes.c_int),] )

_gtk_scrolled_window_get_scrollbar_spacing = _rpythonic_function_(		"_gtk_scrolled_window_get_scrollbar_spacing", ctypes.c_int, [
	("scrolled_window",		ctypes.POINTER(_GtkScrolledWindow)),] )

gtk_separator_menu_item_get_type = _rpythonic_function_(		"gtk_separator_menu_item_get_type", ctypes.c_uint, [] )

gtk_separator_menu_item_new = _rpythonic_function_(		"gtk_separator_menu_item_new", ctypes.POINTER(_GtkWidget), [] )

gtk_separator_tool_item_get_type = _rpythonic_function_(		"gtk_separator_tool_item_get_type", ctypes.c_uint, [] )

gtk_separator_tool_item_new = _rpythonic_function_(		"gtk_separator_tool_item_new", ctypes.POINTER(_GtkToolItem), [] )

gtk_separator_tool_item_get_draw = _rpythonic_function_(		"gtk_separator_tool_item_get_draw", ctypes.c_int, [
	("item",		ctypes.POINTER(_GtkSeparatorToolItem)),] )

gtk_separator_tool_item_set_draw = _rpythonic_function_(		"gtk_separator_tool_item_set_draw", ctypes.c_void_p, [
	("item",		ctypes.POINTER(_GtkSeparatorToolItem)),
	("draw",		ctypes.c_int),] )

gtk_show_uri = _rpythonic_function_(		"gtk_show_uri", ctypes.c_int, [
	("screen",		ctypes.POINTER(_GdkScreen)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("timestamp",		ctypes.c_uint),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_distribute_natural_allocation = _rpythonic_function_(		"gtk_distribute_natural_allocation", ctypes.c_int, [
	("extra_space",		ctypes.c_int),
	("n_requested_sizes",		ctypes.c_uint),
	("sizes",		ctypes.POINTER(_GtkRequestedSize)),] )

input = _rpythonic_function_(		"input", ctypes.c_int, [
	("spin_button",		ctypes.POINTER(_GtkSpinButton)),
	("new_value",		ctypes.POINTER(ctypes.c_double)),] )

output = _rpythonic_function_(		"output", ctypes.c_int, [
	("spin_button",		ctypes.POINTER(_GtkSpinButton)),] )

wrapped = _rpythonic_function_(		"wrapped", ctypes.c_void_p, [
	("spin_button",		ctypes.POINTER(_GtkSpinButton)),] )

gtk_spin_button_configure = _rpythonic_function_(		"gtk_spin_button_configure", ctypes.c_void_p, [
	("spin_button",		ctypes.POINTER(_GtkSpinButton)),
	("adjustment",		ctypes.POINTER(_GtkAdjustment)),
	("climb_rate",		ctypes.c_double),
	("digits",		ctypes.c_uint),] )

gtk_spin_button_get_type = _rpythonic_function_(		"gtk_spin_button_get_type", ctypes.c_uint, [] )

gtk_spin_button_new = _rpythonic_function_(		"gtk_spin_button_new", ctypes.POINTER(_GtkWidget), [
	("adjustment",		ctypes.POINTER(_GtkAdjustment)),
	("climb_rate",		ctypes.c_double),
	("digits",		ctypes.c_uint),] )

gtk_spin_button_new_with_range = _rpythonic_function_(		"gtk_spin_button_new_with_range", ctypes.POINTER(_GtkWidget), [
	("min",		ctypes.c_double),
	("max",		ctypes.c_double),
	("step",		ctypes.c_double),] )

gtk_spin_button_set_adjustment = _rpythonic_function_(		"gtk_spin_button_set_adjustment", ctypes.c_void_p, [
	("spin_button",		ctypes.POINTER(_GtkSpinButton)),
	("adjustment",		ctypes.POINTER(_GtkAdjustment)),] )

gtk_spin_button_get_adjustment = _rpythonic_function_(		"gtk_spin_button_get_adjustment", ctypes.POINTER(_GtkAdjustment), [
	("spin_button",		ctypes.POINTER(_GtkSpinButton)),] )

gtk_spin_button_set_digits = _rpythonic_function_(		"gtk_spin_button_set_digits", ctypes.c_void_p, [
	("spin_button",		ctypes.POINTER(_GtkSpinButton)),
	("digits",		ctypes.c_uint),] )

gtk_spin_button_get_digits = _rpythonic_function_(		"gtk_spin_button_get_digits", ctypes.c_uint, [
	("spin_button",		ctypes.POINTER(_GtkSpinButton)),] )

gtk_spin_button_set_increments = _rpythonic_function_(		"gtk_spin_button_set_increments", ctypes.c_void_p, [
	("spin_button",		ctypes.POINTER(_GtkSpinButton)),
	("step",		ctypes.c_double),
	("page",		ctypes.c_double),] )

gtk_spin_button_get_increments = _rpythonic_function_(		"gtk_spin_button_get_increments", ctypes.c_void_p, [
	("spin_button",		ctypes.POINTER(_GtkSpinButton)),
	("step",		ctypes.POINTER(ctypes.c_double)),
	("page",		ctypes.POINTER(ctypes.c_double)),] )

gtk_spin_button_set_range = _rpythonic_function_(		"gtk_spin_button_set_range", ctypes.c_void_p, [
	("spin_button",		ctypes.POINTER(_GtkSpinButton)),
	("min",		ctypes.c_double),
	("max",		ctypes.c_double),] )

gtk_spin_button_get_range = _rpythonic_function_(		"gtk_spin_button_get_range", ctypes.c_void_p, [
	("spin_button",		ctypes.POINTER(_GtkSpinButton)),
	("min",		ctypes.POINTER(ctypes.c_double)),
	("max",		ctypes.POINTER(ctypes.c_double)),] )

gtk_spin_button_get_value = _rpythonic_function_(		"gtk_spin_button_get_value", ctypes.c_double, [
	("spin_button",		ctypes.POINTER(_GtkSpinButton)),] )

gtk_spin_button_get_value_as_int = _rpythonic_function_(		"gtk_spin_button_get_value_as_int", ctypes.c_int, [
	("spin_button",		ctypes.POINTER(_GtkSpinButton)),] )

gtk_spin_button_set_value = _rpythonic_function_(		"gtk_spin_button_set_value", ctypes.c_void_p, [
	("spin_button",		ctypes.POINTER(_GtkSpinButton)),
	("value",		ctypes.c_double),] )

gtk_spin_button_set_update_policy = _rpythonic_function_(		"gtk_spin_button_set_update_policy", ctypes.c_void_p, [
	("spin_button",		ctypes.POINTER(_GtkSpinButton)),
	("policy",		ctypes.c_int),] )

gtk_spin_button_get_update_policy = _rpythonic_function_(		"gtk_spin_button_get_update_policy", ctypes.c_int, [
	("spin_button",		ctypes.POINTER(_GtkSpinButton)),] )

gtk_spin_button_set_numeric = _rpythonic_function_(		"gtk_spin_button_set_numeric", ctypes.c_void_p, [
	("spin_button",		ctypes.POINTER(_GtkSpinButton)),
	("numeric",		ctypes.c_int),] )

gtk_spin_button_get_numeric = _rpythonic_function_(		"gtk_spin_button_get_numeric", ctypes.c_int, [
	("spin_button",		ctypes.POINTER(_GtkSpinButton)),] )

gtk_spin_button_spin = _rpythonic_function_(		"gtk_spin_button_spin", ctypes.c_void_p, [
	("spin_button",		ctypes.POINTER(_GtkSpinButton)),
	("direction",		ctypes.c_int),
	("increment",		ctypes.c_double),] )

gtk_spin_button_set_wrap = _rpythonic_function_(		"gtk_spin_button_set_wrap", ctypes.c_void_p, [
	("spin_button",		ctypes.POINTER(_GtkSpinButton)),
	("wrap",		ctypes.c_int),] )

gtk_spin_button_get_wrap = _rpythonic_function_(		"gtk_spin_button_get_wrap", ctypes.c_int, [
	("spin_button",		ctypes.POINTER(_GtkSpinButton)),] )

gtk_spin_button_set_snap_to_ticks = _rpythonic_function_(		"gtk_spin_button_set_snap_to_ticks", ctypes.c_void_p, [
	("spin_button",		ctypes.POINTER(_GtkSpinButton)),
	("snap_to_ticks",		ctypes.c_int),] )

gtk_spin_button_get_snap_to_ticks = _rpythonic_function_(		"gtk_spin_button_get_snap_to_ticks", ctypes.c_int, [
	("spin_button",		ctypes.POINTER(_GtkSpinButton)),] )

gtk_spin_button_update = _rpythonic_function_(		"gtk_spin_button_update", ctypes.c_void_p, [
	("spin_button",		ctypes.POINTER(_GtkSpinButton)),] )

_gtk_spin_button_get_panel = _rpythonic_function_(		"_gtk_spin_button_get_panel", ctypes.POINTER(_GdkWindow), [
	("spin_button",		ctypes.POINTER(_GtkSpinButton)),] )

gtk_spinner_get_type = _rpythonic_function_(		"gtk_spinner_get_type", ctypes.c_uint, [] )

gtk_spinner_new = _rpythonic_function_(		"gtk_spinner_new", ctypes.POINTER(_GtkWidget), [] )

gtk_spinner_start = _rpythonic_function_(		"gtk_spinner_start", ctypes.c_void_p, [
	("spinner",		ctypes.POINTER(_GtkSpinner)),] )

gtk_spinner_stop = _rpythonic_function_(		"gtk_spinner_stop", ctypes.c_void_p, [
	("spinner",		ctypes.POINTER(_GtkSpinner)),] )

text_pushed = _rpythonic_function_(		"text_pushed", ctypes.c_void_p, [
	("statusbar",		ctypes.POINTER(_GtkStatusbar)),
	("context_id",		ctypes.c_uint),
	("text",		ctypes.POINTER(ctypes.c_char)),] )

text_popped = _rpythonic_function_(		"text_popped", ctypes.c_void_p, [
	("statusbar",		ctypes.POINTER(_GtkStatusbar)),
	("context_id",		ctypes.c_uint),
	("text",		ctypes.POINTER(ctypes.c_char)),] )

gtk_statusbar_get_type = _rpythonic_function_(		"gtk_statusbar_get_type", ctypes.c_uint, [] )

gtk_statusbar_new = _rpythonic_function_(		"gtk_statusbar_new", ctypes.POINTER(_GtkWidget), [] )

gtk_statusbar_get_context_id = _rpythonic_function_(		"gtk_statusbar_get_context_id", ctypes.c_uint, [
	("statusbar",		ctypes.POINTER(_GtkStatusbar)),
	("context_description",		ctypes.POINTER(ctypes.c_char)),] )

gtk_statusbar_push = _rpythonic_function_(		"gtk_statusbar_push", ctypes.c_uint, [
	("statusbar",		ctypes.POINTER(_GtkStatusbar)),
	("context_id",		ctypes.c_uint),
	("text",		ctypes.POINTER(ctypes.c_char)),] )

gtk_statusbar_pop = _rpythonic_function_(		"gtk_statusbar_pop", ctypes.c_void_p, [
	("statusbar",		ctypes.POINTER(_GtkStatusbar)),
	("context_id",		ctypes.c_uint),] )

gtk_statusbar_remove = _rpythonic_function_(		"gtk_statusbar_remove", ctypes.c_void_p, [
	("statusbar",		ctypes.POINTER(_GtkStatusbar)),
	("context_id",		ctypes.c_uint),
	("message_id",		ctypes.c_uint),] )

gtk_statusbar_remove_all = _rpythonic_function_(		"gtk_statusbar_remove_all", ctypes.c_void_p, [
	("statusbar",		ctypes.POINTER(_GtkStatusbar)),
	("context_id",		ctypes.c_uint),] )

gtk_statusbar_get_message_area = _rpythonic_function_(		"gtk_statusbar_get_message_area", ctypes.POINTER(_GtkWidget), [
	("statusbar",		ctypes.POINTER(_GtkStatusbar)),] )

size_changed = _rpythonic_function_(		"size_changed", ctypes.c_int, [
	("status_icon",		ctypes.POINTER(_GtkStatusIcon)),
	("size",		ctypes.c_int),] )

gtk_status_icon_new = _rpythonic_function_(		"gtk_status_icon_new", ctypes.POINTER(_GtkStatusIcon), [] )

gtk_status_icon_get_type = _rpythonic_function_(		"gtk_status_icon_get_type", ctypes.c_uint, [] )

gtk_status_icon_new_from_pixbuf = _rpythonic_function_(		"gtk_status_icon_new_from_pixbuf", ctypes.POINTER(_GtkStatusIcon), [
	("pixbuf",		ctypes.POINTER(_GdkPixbuf)),] )

gtk_status_icon_new_from_file = _rpythonic_function_(		"gtk_status_icon_new_from_file", ctypes.POINTER(_GtkStatusIcon), [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

gtk_status_icon_new_from_stock = _rpythonic_function_(		"gtk_status_icon_new_from_stock", ctypes.POINTER(_GtkStatusIcon), [
	("stock_id",		ctypes.POINTER(ctypes.c_char)),] )

gtk_status_icon_new_from_icon_name = _rpythonic_function_(		"gtk_status_icon_new_from_icon_name", ctypes.POINTER(_GtkStatusIcon), [
	("icon_name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_status_icon_new_from_gicon = _rpythonic_function_(		"gtk_status_icon_new_from_gicon", ctypes.POINTER(_GtkStatusIcon), [
	("icon",		ctypes.POINTER(_GIcon)),] )

gtk_status_icon_set_from_pixbuf = _rpythonic_function_(		"gtk_status_icon_set_from_pixbuf", ctypes.c_void_p, [
	("status_icon",		ctypes.POINTER(_GtkStatusIcon)),
	("pixbuf",		ctypes.POINTER(_GdkPixbuf)),] )

gtk_status_icon_set_from_file = _rpythonic_function_(		"gtk_status_icon_set_from_file", ctypes.c_void_p, [
	("status_icon",		ctypes.POINTER(_GtkStatusIcon)),
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

gtk_status_icon_set_from_stock = _rpythonic_function_(		"gtk_status_icon_set_from_stock", ctypes.c_void_p, [
	("status_icon",		ctypes.POINTER(_GtkStatusIcon)),
	("stock_id",		ctypes.POINTER(ctypes.c_char)),] )

gtk_status_icon_set_from_icon_name = _rpythonic_function_(		"gtk_status_icon_set_from_icon_name", ctypes.c_void_p, [
	("status_icon",		ctypes.POINTER(_GtkStatusIcon)),
	("icon_name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_status_icon_set_from_gicon = _rpythonic_function_(		"gtk_status_icon_set_from_gicon", ctypes.c_void_p, [
	("status_icon",		ctypes.POINTER(_GtkStatusIcon)),
	("icon",		ctypes.POINTER(_GIcon)),] )

gtk_status_icon_get_storage_type = _rpythonic_function_(		"gtk_status_icon_get_storage_type", ctypes.c_int, [
	("status_icon",		ctypes.POINTER(_GtkStatusIcon)),] )

gtk_status_icon_get_pixbuf = _rpythonic_function_(		"gtk_status_icon_get_pixbuf", ctypes.POINTER(_GdkPixbuf), [
	("status_icon",		ctypes.POINTER(_GtkStatusIcon)),] )

gtk_status_icon_get_stock = _rpythonic_function_(		"gtk_status_icon_get_stock", ctypes.POINTER(ctypes.c_char), [
	("status_icon",		ctypes.POINTER(_GtkStatusIcon)),] )

gtk_status_icon_get_icon_name = _rpythonic_function_(		"gtk_status_icon_get_icon_name", ctypes.POINTER(ctypes.c_char), [
	("status_icon",		ctypes.POINTER(_GtkStatusIcon)),] )

gtk_status_icon_get_gicon = _rpythonic_function_(		"gtk_status_icon_get_gicon", ctypes.POINTER(_GIcon), [
	("status_icon",		ctypes.POINTER(_GtkStatusIcon)),] )

gtk_status_icon_get_size = _rpythonic_function_(		"gtk_status_icon_get_size", ctypes.c_int, [
	("status_icon",		ctypes.POINTER(_GtkStatusIcon)),] )

gtk_status_icon_set_screen = _rpythonic_function_(		"gtk_status_icon_set_screen", ctypes.c_void_p, [
	("status_icon",		ctypes.POINTER(_GtkStatusIcon)),
	("screen",		ctypes.POINTER(_GdkScreen)),] )

gtk_status_icon_get_screen = _rpythonic_function_(		"gtk_status_icon_get_screen", ctypes.POINTER(_GdkScreen), [
	("status_icon",		ctypes.POINTER(_GtkStatusIcon)),] )

gtk_status_icon_set_has_tooltip = _rpythonic_function_(		"gtk_status_icon_set_has_tooltip", ctypes.c_void_p, [
	("status_icon",		ctypes.POINTER(_GtkStatusIcon)),
	("has_tooltip",		ctypes.c_int),] )

gtk_status_icon_set_tooltip_text = _rpythonic_function_(		"gtk_status_icon_set_tooltip_text", ctypes.c_void_p, [
	("status_icon",		ctypes.POINTER(_GtkStatusIcon)),
	("text",		ctypes.POINTER(ctypes.c_char)),] )

gtk_status_icon_set_tooltip_markup = _rpythonic_function_(		"gtk_status_icon_set_tooltip_markup", ctypes.c_void_p, [
	("status_icon",		ctypes.POINTER(_GtkStatusIcon)),
	("markup",		ctypes.POINTER(ctypes.c_char)),] )

gtk_status_icon_set_title = _rpythonic_function_(		"gtk_status_icon_set_title", ctypes.c_void_p, [
	("status_icon",		ctypes.POINTER(_GtkStatusIcon)),
	("title",		ctypes.POINTER(ctypes.c_char)),] )

gtk_status_icon_get_title = _rpythonic_function_(		"gtk_status_icon_get_title", ctypes.POINTER(ctypes.c_char), [
	("status_icon",		ctypes.POINTER(_GtkStatusIcon)),] )

gtk_status_icon_set_name = _rpythonic_function_(		"gtk_status_icon_set_name", ctypes.c_void_p, [
	("status_icon",		ctypes.POINTER(_GtkStatusIcon)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_status_icon_set_visible = _rpythonic_function_(		"gtk_status_icon_set_visible", ctypes.c_void_p, [
	("status_icon",		ctypes.POINTER(_GtkStatusIcon)),
	("visible",		ctypes.c_int),] )

gtk_status_icon_get_visible = _rpythonic_function_(		"gtk_status_icon_get_visible", ctypes.c_int, [
	("status_icon",		ctypes.POINTER(_GtkStatusIcon)),] )

gtk_status_icon_is_embedded = _rpythonic_function_(		"gtk_status_icon_is_embedded", ctypes.c_int, [
	("status_icon",		ctypes.POINTER(_GtkStatusIcon)),] )

gtk_status_icon_position_menu = _rpythonic_function_(		"gtk_status_icon_position_menu", ctypes.c_void_p, [
	("menu",		ctypes.POINTER(_GtkMenu)),
	("x",		ctypes.POINTER(ctypes.c_int)),
	("y",		ctypes.POINTER(ctypes.c_int)),
	("push_in",		ctypes.POINTER(ctypes.c_int)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

gtk_status_icon_get_geometry = _rpythonic_function_(		"gtk_status_icon_get_geometry", ctypes.c_int, [
	("status_icon",		ctypes.POINTER(_GtkStatusIcon)),
	("screen",		ctypes.POINTER(ctypes.POINTER(_GdkScreen))),
	("area",		ctypes.POINTER(_cairo_rectangle_int)),
	("orientation",		ctypes.POINTER(ctypes.c_int)),] )

gtk_status_icon_get_has_tooltip = _rpythonic_function_(		"gtk_status_icon_get_has_tooltip", ctypes.c_int, [
	("status_icon",		ctypes.POINTER(_GtkStatusIcon)),] )

gtk_status_icon_get_tooltip_text = _rpythonic_function_(		"gtk_status_icon_get_tooltip_text", ctypes.POINTER(ctypes.c_char), [
	("status_icon",		ctypes.POINTER(_GtkStatusIcon)),] )

gtk_status_icon_get_tooltip_markup = _rpythonic_function_(		"gtk_status_icon_get_tooltip_markup", ctypes.POINTER(ctypes.c_char), [
	("status_icon",		ctypes.POINTER(_GtkStatusIcon)),] )

gtk_status_icon_get_x11_window_id = _rpythonic_function_(		"gtk_status_icon_get_x11_window_id", ctypes.c_uint, [
	("status_icon",		ctypes.POINTER(_GtkStatusIcon)),] )

_switch_padding_1 = _rpythonic_function_(		"_switch_padding_1", ctypes.c_void_p, [] )

_switch_padding_2 = _rpythonic_function_(		"_switch_padding_2", ctypes.c_void_p, [] )

_switch_padding_3 = _rpythonic_function_(		"_switch_padding_3", ctypes.c_void_p, [] )

_switch_padding_4 = _rpythonic_function_(		"_switch_padding_4", ctypes.c_void_p, [] )

_switch_padding_5 = _rpythonic_function_(		"_switch_padding_5", ctypes.c_void_p, [] )

_switch_padding_6 = _rpythonic_function_(		"_switch_padding_6", ctypes.c_void_p, [] )

gtk_switch_get_type = _rpythonic_function_(		"gtk_switch_get_type", ctypes.c_uint, [] )

gtk_switch_new = _rpythonic_function_(		"gtk_switch_new", ctypes.POINTER(_GtkWidget), [] )

gtk_switch_set_active = _rpythonic_function_(		"gtk_switch_set_active", ctypes.c_void_p, [
	("sw",		ctypes.POINTER(_GtkSwitch)),
	("is_active",		ctypes.c_int),] )

gtk_switch_get_active = _rpythonic_function_(		"gtk_switch_get_active", ctypes.c_int, [
	("sw",		ctypes.POINTER(_GtkSwitch)),] )

gtk_table_get_type = _rpythonic_function_(		"gtk_table_get_type", ctypes.c_uint, [] )

gtk_table_new = _rpythonic_function_(		"gtk_table_new", ctypes.POINTER(_GtkWidget), [
	("rows",		ctypes.c_uint),
	("columns",		ctypes.c_uint),
	("homogeneous",		ctypes.c_int),] )

gtk_table_resize = _rpythonic_function_(		"gtk_table_resize", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_GtkTable)),
	("rows",		ctypes.c_uint),
	("columns",		ctypes.c_uint),] )

gtk_table_attach = _rpythonic_function_(		"gtk_table_attach", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_GtkTable)),
	("child",		ctypes.POINTER(_GtkWidget)),
	("left_attach",		ctypes.c_uint),
	("right_attach",		ctypes.c_uint),
	("top_attach",		ctypes.c_uint),
	("bottom_attach",		ctypes.c_uint),
	("xoptions",		ctypes.c_int),
	("yoptions",		ctypes.c_int),
	("xpadding",		ctypes.c_uint),
	("ypadding",		ctypes.c_uint),] )

gtk_table_attach_defaults = _rpythonic_function_(		"gtk_table_attach_defaults", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_GtkTable)),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("left_attach",		ctypes.c_uint),
	("right_attach",		ctypes.c_uint),
	("top_attach",		ctypes.c_uint),
	("bottom_attach",		ctypes.c_uint),] )

gtk_table_set_row_spacing = _rpythonic_function_(		"gtk_table_set_row_spacing", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_GtkTable)),
	("row",		ctypes.c_uint),
	("spacing",		ctypes.c_uint),] )

gtk_table_get_row_spacing = _rpythonic_function_(		"gtk_table_get_row_spacing", ctypes.c_uint, [
	("table",		ctypes.POINTER(_GtkTable)),
	("row",		ctypes.c_uint),] )

gtk_table_set_col_spacing = _rpythonic_function_(		"gtk_table_set_col_spacing", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_GtkTable)),
	("column",		ctypes.c_uint),
	("spacing",		ctypes.c_uint),] )

gtk_table_get_col_spacing = _rpythonic_function_(		"gtk_table_get_col_spacing", ctypes.c_uint, [
	("table",		ctypes.POINTER(_GtkTable)),
	("column",		ctypes.c_uint),] )

gtk_table_set_row_spacings = _rpythonic_function_(		"gtk_table_set_row_spacings", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_GtkTable)),
	("spacing",		ctypes.c_uint),] )

gtk_table_get_default_row_spacing = _rpythonic_function_(		"gtk_table_get_default_row_spacing", ctypes.c_uint, [
	("table",		ctypes.POINTER(_GtkTable)),] )

gtk_table_set_col_spacings = _rpythonic_function_(		"gtk_table_set_col_spacings", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_GtkTable)),
	("spacing",		ctypes.c_uint),] )

gtk_table_get_default_col_spacing = _rpythonic_function_(		"gtk_table_get_default_col_spacing", ctypes.c_uint, [
	("table",		ctypes.POINTER(_GtkTable)),] )

gtk_table_set_homogeneous = _rpythonic_function_(		"gtk_table_set_homogeneous", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_GtkTable)),
	("homogeneous",		ctypes.c_int),] )

gtk_table_get_homogeneous = _rpythonic_function_(		"gtk_table_get_homogeneous", ctypes.c_int, [
	("table",		ctypes.POINTER(_GtkTable)),] )

gtk_table_get_size = _rpythonic_function_(		"gtk_table_get_size", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_GtkTable)),
	("rows",		ctypes.POINTER(ctypes.c_uint)),
	("columns",		ctypes.POINTER(ctypes.c_uint)),] )

gtk_tearoff_menu_item_get_type = _rpythonic_function_(		"gtk_tearoff_menu_item_get_type", ctypes.c_uint, [] )

gtk_tearoff_menu_item_new = _rpythonic_function_(		"gtk_tearoff_menu_item_new", ctypes.POINTER(_GtkWidget), [] )

GtkTextTagTableForeach = _rpythonic_function_(		"GtkTextTagTableForeach", ctypes.c_void_p, [
	("tag",		ctypes.POINTER(_GtkTextTag)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

tag_changed = _rpythonic_function_(		"tag_changed", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_GtkTextTagTable)),
	("tag",		ctypes.POINTER(_GtkTextTag)),
	("size_changed",		ctypes.c_int),] )

tag_added = _rpythonic_function_(		"tag_added", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_GtkTextTagTable)),
	("tag",		ctypes.POINTER(_GtkTextTag)),] )

tag_removed = _rpythonic_function_(		"tag_removed", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_GtkTextTagTable)),
	("tag",		ctypes.POINTER(_GtkTextTag)),] )

gtk_text_tag_table_get_type = _rpythonic_function_(		"gtk_text_tag_table_get_type", ctypes.c_uint, [] )

gtk_text_tag_table_new = _rpythonic_function_(		"gtk_text_tag_table_new", ctypes.POINTER(_GtkTextTagTable), [] )

gtk_text_tag_table_add = _rpythonic_function_(		"gtk_text_tag_table_add", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_GtkTextTagTable)),
	("tag",		ctypes.POINTER(_GtkTextTag)),] )

gtk_text_tag_table_remove = _rpythonic_function_(		"gtk_text_tag_table_remove", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_GtkTextTagTable)),
	("tag",		ctypes.POINTER(_GtkTextTag)),] )

gtk_text_tag_table_lookup = _rpythonic_function_(		"gtk_text_tag_table_lookup", ctypes.POINTER(_GtkTextTag), [
	("table",		ctypes.POINTER(_GtkTextTagTable)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_text_tag_table_foreach = _rpythonic_function_(		"gtk_text_tag_table_foreach", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_GtkTextTagTable)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GtkTextTag),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

gtk_text_tag_table_get_size = _rpythonic_function_(		"gtk_text_tag_table_get_size", ctypes.c_int, [
	("table",		ctypes.POINTER(_GtkTextTagTable)),] )

_gtk_text_tag_table_add_buffer = _rpythonic_function_(		"_gtk_text_tag_table_add_buffer", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_GtkTextTagTable)),
	("buffer",		ctypes.POINTER(ctypes.c_void_p)),] )

_gtk_text_tag_table_remove_buffer = _rpythonic_function_(		"_gtk_text_tag_table_remove_buffer", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_GtkTextTagTable)),
	("buffer",		ctypes.POINTER(ctypes.c_void_p)),] )

gtk_text_mark_get_type = _rpythonic_function_(		"gtk_text_mark_get_type", ctypes.c_uint, [] )

gtk_text_mark_new = _rpythonic_function_(		"gtk_text_mark_new", ctypes.POINTER(_GtkTextMark), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("left_gravity",		ctypes.c_int),] )

gtk_text_mark_set_visible = _rpythonic_function_(		"gtk_text_mark_set_visible", ctypes.c_void_p, [
	("mark",		ctypes.POINTER(_GtkTextMark)),
	("setting",		ctypes.c_int),] )

gtk_text_mark_get_visible = _rpythonic_function_(		"gtk_text_mark_get_visible", ctypes.c_int, [
	("mark",		ctypes.POINTER(_GtkTextMark)),] )

gtk_text_mark_get_name = _rpythonic_function_(		"gtk_text_mark_get_name", ctypes.POINTER(ctypes.c_char), [
	("mark",		ctypes.POINTER(_GtkTextMark)),] )

gtk_text_mark_get_deleted = _rpythonic_function_(		"gtk_text_mark_get_deleted", ctypes.c_int, [
	("mark",		ctypes.POINTER(_GtkTextMark)),] )

gtk_text_mark_get_buffer = _rpythonic_function_(		"gtk_text_mark_get_buffer", ctypes.POINTER(_GtkTextBuffer), [
	("mark",		ctypes.POINTER(_GtkTextMark)),] )

gtk_text_mark_get_left_gravity = _rpythonic_function_(		"gtk_text_mark_get_left_gravity", ctypes.c_int, [
	("mark",		ctypes.POINTER(_GtkTextMark)),] )

insert_pixbuf = _rpythonic_function_(		"insert_pixbuf", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("pixbuf",		ctypes.POINTER(_GdkPixbuf)),] )

insert_child_anchor = _rpythonic_function_(		"insert_child_anchor", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("anchor",		ctypes.POINTER(_GtkTextChildAnchor)),] )

delete_range = _rpythonic_function_(		"delete_range", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("start",		ctypes.POINTER(_GtkTextIter)),
	("end",		ctypes.POINTER(_GtkTextIter)),] )

modified_changed = _rpythonic_function_(		"modified_changed", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),] )

mark_set = _rpythonic_function_(		"mark_set", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("location",		ctypes.POINTER(_GtkTextIter)),
	("mark",		ctypes.POINTER(_GtkTextMark)),] )

mark_deleted = _rpythonic_function_(		"mark_deleted", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("mark",		ctypes.POINTER(_GtkTextMark)),] )

apply_tag = _rpythonic_function_(		"apply_tag", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("tag",		ctypes.POINTER(_GtkTextTag)),
	("start",		ctypes.POINTER(_GtkTextIter)),
	("end",		ctypes.POINTER(_GtkTextIter)),] )

remove_tag = _rpythonic_function_(		"remove_tag", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("tag",		ctypes.POINTER(_GtkTextTag)),
	("start",		ctypes.POINTER(_GtkTextIter)),
	("end",		ctypes.POINTER(_GtkTextIter)),] )

begin_user_action = _rpythonic_function_(		"begin_user_action", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),] )

end_user_action = _rpythonic_function_(		"end_user_action", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),] )

paste_done = _rpythonic_function_(		"paste_done", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("clipboard",		ctypes.POINTER(_GtkClipboard)),] )

gtk_text_buffer_new = _rpythonic_function_(		"gtk_text_buffer_new", ctypes.POINTER(_GtkTextBuffer), [
	("table",		ctypes.POINTER(_GtkTextTagTable)),] )

gtk_text_buffer_get_line_count = _rpythonic_function_(		"gtk_text_buffer_get_line_count", ctypes.c_int, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),] )

gtk_text_buffer_get_type = _rpythonic_function_(		"gtk_text_buffer_get_type", ctypes.c_uint, [] )

gtk_text_buffer_get_char_count = _rpythonic_function_(		"gtk_text_buffer_get_char_count", ctypes.c_int, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),] )

gtk_text_buffer_get_tag_table = _rpythonic_function_(		"gtk_text_buffer_get_tag_table", ctypes.POINTER(_GtkTextTagTable), [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),] )

gtk_text_buffer_set_text = _rpythonic_function_(		"gtk_text_buffer_set_text", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("text",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

gtk_text_buffer_insert = _rpythonic_function_(		"gtk_text_buffer_insert", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("text",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

gtk_text_buffer_insert_at_cursor = _rpythonic_function_(		"gtk_text_buffer_insert_at_cursor", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("text",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

gtk_text_buffer_insert_interactive = _rpythonic_function_(		"gtk_text_buffer_insert_interactive", ctypes.c_int, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("text",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),
	("default_editable",		ctypes.c_int),] )

gtk_text_buffer_insert_interactive_at_cursor = _rpythonic_function_(		"gtk_text_buffer_insert_interactive_at_cursor", ctypes.c_int, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("text",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),
	("default_editable",		ctypes.c_int),] )

gtk_text_buffer_insert_range = _rpythonic_function_(		"gtk_text_buffer_insert_range", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("start",		ctypes.POINTER(_GtkTextIter)),
	("end",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_buffer_insert_range_interactive = _rpythonic_function_(		"gtk_text_buffer_insert_range_interactive", ctypes.c_int, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("start",		ctypes.POINTER(_GtkTextIter)),
	("end",		ctypes.POINTER(_GtkTextIter)),
	("default_editable",		ctypes.c_int),] )

gtk_text_buffer_delete = _rpythonic_function_(		"gtk_text_buffer_delete", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("start",		ctypes.POINTER(_GtkTextIter)),
	("end",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_buffer_delete_interactive = _rpythonic_function_(		"gtk_text_buffer_delete_interactive", ctypes.c_int, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("start_iter",		ctypes.POINTER(_GtkTextIter)),
	("end_iter",		ctypes.POINTER(_GtkTextIter)),
	("default_editable",		ctypes.c_int),] )

gtk_text_buffer_backspace = _rpythonic_function_(		"gtk_text_buffer_backspace", ctypes.c_int, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("interactive",		ctypes.c_int),
	("default_editable",		ctypes.c_int),] )

gtk_text_buffer_get_text = _rpythonic_function_(		"gtk_text_buffer_get_text", ctypes.POINTER(ctypes.c_char), [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("start",		ctypes.POINTER(_GtkTextIter)),
	("end",		ctypes.POINTER(_GtkTextIter)),
	("include_hidden_chars",		ctypes.c_int),] )

gtk_text_buffer_get_slice = _rpythonic_function_(		"gtk_text_buffer_get_slice", ctypes.POINTER(ctypes.c_char), [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("start",		ctypes.POINTER(_GtkTextIter)),
	("end",		ctypes.POINTER(_GtkTextIter)),
	("include_hidden_chars",		ctypes.c_int),] )

gtk_text_buffer_insert_pixbuf = _rpythonic_function_(		"gtk_text_buffer_insert_pixbuf", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("pixbuf",		ctypes.POINTER(_GdkPixbuf)),] )

gtk_text_buffer_insert_child_anchor = _rpythonic_function_(		"gtk_text_buffer_insert_child_anchor", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("anchor",		ctypes.POINTER(_GtkTextChildAnchor)),] )

gtk_text_buffer_create_child_anchor = _rpythonic_function_(		"gtk_text_buffer_create_child_anchor", ctypes.POINTER(_GtkTextChildAnchor), [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_buffer_add_mark = _rpythonic_function_(		"gtk_text_buffer_add_mark", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("mark",		ctypes.POINTER(_GtkTextMark)),
	("where",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_buffer_create_mark = _rpythonic_function_(		"gtk_text_buffer_create_mark", ctypes.POINTER(_GtkTextMark), [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("mark_name",		ctypes.POINTER(ctypes.c_char)),
	("where",		ctypes.POINTER(_GtkTextIter)),
	("left_gravity",		ctypes.c_int),] )

gtk_text_buffer_move_mark = _rpythonic_function_(		"gtk_text_buffer_move_mark", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("mark",		ctypes.POINTER(_GtkTextMark)),
	("where",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_buffer_delete_mark = _rpythonic_function_(		"gtk_text_buffer_delete_mark", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("mark",		ctypes.POINTER(_GtkTextMark)),] )

gtk_text_buffer_get_mark = _rpythonic_function_(		"gtk_text_buffer_get_mark", ctypes.POINTER(_GtkTextMark), [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_text_buffer_move_mark_by_name = _rpythonic_function_(		"gtk_text_buffer_move_mark_by_name", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("where",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_buffer_delete_mark_by_name = _rpythonic_function_(		"gtk_text_buffer_delete_mark_by_name", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_text_buffer_get_insert = _rpythonic_function_(		"gtk_text_buffer_get_insert", ctypes.POINTER(_GtkTextMark), [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),] )

gtk_text_buffer_get_selection_bound = _rpythonic_function_(		"gtk_text_buffer_get_selection_bound", ctypes.POINTER(_GtkTextMark), [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),] )

gtk_text_buffer_place_cursor = _rpythonic_function_(		"gtk_text_buffer_place_cursor", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("where",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_buffer_select_range = _rpythonic_function_(		"gtk_text_buffer_select_range", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("ins",		ctypes.POINTER(_GtkTextIter)),
	("bound",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_buffer_apply_tag = _rpythonic_function_(		"gtk_text_buffer_apply_tag", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("tag",		ctypes.POINTER(_GtkTextTag)),
	("start",		ctypes.POINTER(_GtkTextIter)),
	("end",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_buffer_remove_tag = _rpythonic_function_(		"gtk_text_buffer_remove_tag", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("tag",		ctypes.POINTER(_GtkTextTag)),
	("start",		ctypes.POINTER(_GtkTextIter)),
	("end",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_buffer_apply_tag_by_name = _rpythonic_function_(		"gtk_text_buffer_apply_tag_by_name", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("start",		ctypes.POINTER(_GtkTextIter)),
	("end",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_buffer_remove_tag_by_name = _rpythonic_function_(		"gtk_text_buffer_remove_tag_by_name", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("start",		ctypes.POINTER(_GtkTextIter)),
	("end",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_buffer_remove_all_tags = _rpythonic_function_(		"gtk_text_buffer_remove_all_tags", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("start",		ctypes.POINTER(_GtkTextIter)),
	("end",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_buffer_get_iter_at_line_offset = _rpythonic_function_(		"gtk_text_buffer_get_iter_at_line_offset", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("line_number",		ctypes.c_int),
	("char_offset",		ctypes.c_int),] )

gtk_text_buffer_get_iter_at_line_index = _rpythonic_function_(		"gtk_text_buffer_get_iter_at_line_index", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("line_number",		ctypes.c_int),
	("byte_index",		ctypes.c_int),] )

gtk_text_buffer_get_iter_at_offset = _rpythonic_function_(		"gtk_text_buffer_get_iter_at_offset", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("char_offset",		ctypes.c_int),] )

gtk_text_buffer_get_iter_at_line = _rpythonic_function_(		"gtk_text_buffer_get_iter_at_line", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("line_number",		ctypes.c_int),] )

gtk_text_buffer_get_start_iter = _rpythonic_function_(		"gtk_text_buffer_get_start_iter", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_buffer_get_end_iter = _rpythonic_function_(		"gtk_text_buffer_get_end_iter", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_buffer_get_bounds = _rpythonic_function_(		"gtk_text_buffer_get_bounds", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("start",		ctypes.POINTER(_GtkTextIter)),
	("end",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_buffer_get_iter_at_mark = _rpythonic_function_(		"gtk_text_buffer_get_iter_at_mark", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("mark",		ctypes.POINTER(_GtkTextMark)),] )

gtk_text_buffer_get_iter_at_child_anchor = _rpythonic_function_(		"gtk_text_buffer_get_iter_at_child_anchor", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("anchor",		ctypes.POINTER(_GtkTextChildAnchor)),] )

gtk_text_buffer_get_modified = _rpythonic_function_(		"gtk_text_buffer_get_modified", ctypes.c_int, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),] )

gtk_text_buffer_set_modified = _rpythonic_function_(		"gtk_text_buffer_set_modified", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("setting",		ctypes.c_int),] )

gtk_text_buffer_get_has_selection = _rpythonic_function_(		"gtk_text_buffer_get_has_selection", ctypes.c_int, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),] )

gtk_text_buffer_add_selection_clipboard = _rpythonic_function_(		"gtk_text_buffer_add_selection_clipboard", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("clipboard",		ctypes.POINTER(_GtkClipboard)),] )

gtk_text_buffer_remove_selection_clipboard = _rpythonic_function_(		"gtk_text_buffer_remove_selection_clipboard", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("clipboard",		ctypes.POINTER(_GtkClipboard)),] )

gtk_text_buffer_cut_clipboard = _rpythonic_function_(		"gtk_text_buffer_cut_clipboard", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("clipboard",		ctypes.POINTER(_GtkClipboard)),
	("default_editable",		ctypes.c_int),] )

gtk_text_buffer_copy_clipboard = _rpythonic_function_(		"gtk_text_buffer_copy_clipboard", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("clipboard",		ctypes.POINTER(_GtkClipboard)),] )

gtk_text_buffer_paste_clipboard = _rpythonic_function_(		"gtk_text_buffer_paste_clipboard", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("clipboard",		ctypes.POINTER(_GtkClipboard)),
	("override_location",		ctypes.POINTER(_GtkTextIter)),
	("default_editable",		ctypes.c_int),] )

gtk_text_buffer_get_selection_bounds = _rpythonic_function_(		"gtk_text_buffer_get_selection_bounds", ctypes.c_int, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("start",		ctypes.POINTER(_GtkTextIter)),
	("end",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_buffer_delete_selection = _rpythonic_function_(		"gtk_text_buffer_delete_selection", ctypes.c_int, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("interactive",		ctypes.c_int),
	("default_editable",		ctypes.c_int),] )

gtk_text_buffer_begin_user_action = _rpythonic_function_(		"gtk_text_buffer_begin_user_action", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),] )

gtk_text_buffer_end_user_action = _rpythonic_function_(		"gtk_text_buffer_end_user_action", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),] )

gtk_text_buffer_get_copy_target_list = _rpythonic_function_(		"gtk_text_buffer_get_copy_target_list", ctypes.POINTER(_GtkTargetList), [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),] )

gtk_text_buffer_get_paste_target_list = _rpythonic_function_(		"gtk_text_buffer_get_paste_target_list", ctypes.POINTER(_GtkTargetList), [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),] )

_gtk_text_buffer_spew = _rpythonic_function_(		"_gtk_text_buffer_spew", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),] )

_gtk_text_buffer_get_btree = _rpythonic_function_(		"_gtk_text_buffer_get_btree", ctypes.POINTER(_GtkTextBTree), [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),] )

_gtk_text_buffer_get_line_log_attrs = _rpythonic_function_(		"_gtk_text_buffer_get_line_log_attrs", ctypes.POINTER(_PangoLogAttr), [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("anywhere_in_line",		ctypes.POINTER(_GtkTextIter)),
	("char_len",		ctypes.POINTER(ctypes.c_int)),] )

_gtk_text_buffer_notify_will_remove_tag = _rpythonic_function_(		"_gtk_text_buffer_notify_will_remove_tag", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("tag",		ctypes.POINTER(_GtkTextTag)),] )

_gtk_text_buffer_get_text_before = _rpythonic_function_(		"_gtk_text_buffer_get_text_before", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("boundary_type",		ctypes.c_int),
	("position",		ctypes.POINTER(_GtkTextIter)),
	("start",		ctypes.POINTER(_GtkTextIter)),
	("end",		ctypes.POINTER(_GtkTextIter)),] )

_gtk_text_buffer_get_text_at = _rpythonic_function_(		"_gtk_text_buffer_get_text_at", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("boundary_type",		ctypes.c_int),
	("position",		ctypes.POINTER(_GtkTextIter)),
	("start",		ctypes.POINTER(_GtkTextIter)),
	("end",		ctypes.POINTER(_GtkTextIter)),] )

_gtk_text_buffer_get_text_after = _rpythonic_function_(		"_gtk_text_buffer_get_text_after", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("boundary_type",		ctypes.c_int),
	("position",		ctypes.POINTER(_GtkTextIter)),
	("start",		ctypes.POINTER(_GtkTextIter)),
	("end",		ctypes.POINTER(_GtkTextIter)),] )

GtkTextBufferSerializeFunc = _rpythonic_function_(		"GtkTextBufferSerializeFunc", ctypes.POINTER(ctypes.c_ubyte), [
	("register_buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("content_buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("start",		ctypes.POINTER(_GtkTextIter)),
	("end",		ctypes.POINTER(_GtkTextIter)),
	("length",		ctypes.POINTER(ctypes.c_uint)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GtkTextBufferDeserializeFunc = _rpythonic_function_(		"GtkTextBufferDeserializeFunc", ctypes.c_int, [
	("register_buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("content_buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("data",		ctypes.POINTER(ctypes.c_ubyte)),
	("length",		ctypes.c_uint),
	("create_tags",		ctypes.c_int),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_text_buffer_register_serialize_format = _rpythonic_function_(		"gtk_text_buffer_register_serialize_format", ctypes.POINTER(_GdkAtom), [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("mime_type",		ctypes.POINTER(ctypes.c_char)),
	("function",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_ubyte), ctypes.POINTER(_GtkTextBuffer),ctypes.POINTER(_GtkTextBuffer),ctypes.POINTER(_GtkTextIter),ctypes.POINTER(_GtkTextIter),ctypes.POINTER(ctypes.c_uint),ctypes.POINTER(ctypes.c_void_p),))),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("user_data_destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

gtk_text_buffer_register_serialize_tagset = _rpythonic_function_(		"gtk_text_buffer_register_serialize_tagset", ctypes.POINTER(_GdkAtom), [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("tagset_name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_text_buffer_register_deserialize_format = _rpythonic_function_(		"gtk_text_buffer_register_deserialize_format", ctypes.POINTER(_GdkAtom), [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("mime_type",		ctypes.POINTER(ctypes.c_char)),
	("function",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GtkTextBuffer),ctypes.POINTER(_GtkTextBuffer),ctypes.POINTER(_GtkTextIter),ctypes.POINTER(ctypes.c_ubyte),ctypes.c_uint,ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.POINTER(_GError)),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("user_data_destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

gtk_text_buffer_register_deserialize_tagset = _rpythonic_function_(		"gtk_text_buffer_register_deserialize_tagset", ctypes.POINTER(_GdkAtom), [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("tagset_name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_text_buffer_unregister_serialize_format = _rpythonic_function_(		"gtk_text_buffer_unregister_serialize_format", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("format",		ctypes.POINTER(_GdkAtom)),] )

gtk_text_buffer_unregister_deserialize_format = _rpythonic_function_(		"gtk_text_buffer_unregister_deserialize_format", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("format",		ctypes.POINTER(_GdkAtom)),] )

gtk_text_buffer_deserialize_set_can_create_tags = _rpythonic_function_(		"gtk_text_buffer_deserialize_set_can_create_tags", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("format",		ctypes.POINTER(_GdkAtom)),
	("can_create_tags",		ctypes.c_int),] )

gtk_text_buffer_deserialize_get_can_create_tags = _rpythonic_function_(		"gtk_text_buffer_deserialize_get_can_create_tags", ctypes.c_int, [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("format",		ctypes.POINTER(_GdkAtom)),] )

gtk_text_buffer_get_serialize_formats = _rpythonic_function_(		"gtk_text_buffer_get_serialize_formats", ctypes.POINTER(ctypes.POINTER(_GdkAtom)), [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("n_formats",		ctypes.POINTER(ctypes.c_int)),] )

gtk_text_buffer_get_deserialize_formats = _rpythonic_function_(		"gtk_text_buffer_get_deserialize_formats", ctypes.POINTER(ctypes.POINTER(_GdkAtom)), [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("n_formats",		ctypes.POINTER(ctypes.c_int)),] )

gtk_text_buffer_serialize = _rpythonic_function_(		"gtk_text_buffer_serialize", ctypes.POINTER(ctypes.c_ubyte), [
	("register_buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("content_buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("format",		ctypes.POINTER(_GdkAtom)),
	("start",		ctypes.POINTER(_GtkTextIter)),
	("end",		ctypes.POINTER(_GtkTextIter)),
	("length",		ctypes.POINTER(ctypes.c_uint)),] )

gtk_text_buffer_deserialize = _rpythonic_function_(		"gtk_text_buffer_deserialize", ctypes.c_int, [
	("register_buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("content_buffer",		ctypes.POINTER(_GtkTextBuffer)),
	("format",		ctypes.POINTER(_GdkAtom)),
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("data",		ctypes.POINTER(ctypes.c_ubyte)),
	("length",		ctypes.c_uint),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

set_anchor = _rpythonic_function_(		"set_anchor", ctypes.c_void_p, [
	("text_view",		ctypes.POINTER(_GtkTextView)),] )

gtk_text_view_new = _rpythonic_function_(		"gtk_text_view_new", ctypes.POINTER(_GtkWidget), [] )

gtk_text_view_new_with_buffer = _rpythonic_function_(		"gtk_text_view_new_with_buffer", ctypes.POINTER(_GtkWidget), [
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),] )

gtk_text_view_get_type = _rpythonic_function_(		"gtk_text_view_get_type", ctypes.c_uint, [] )

gtk_text_view_set_buffer = _rpythonic_function_(		"gtk_text_view_set_buffer", ctypes.c_void_p, [
	("text_view",		ctypes.POINTER(_GtkTextView)),
	("buffer",		ctypes.POINTER(_GtkTextBuffer)),] )

gtk_text_view_get_buffer = _rpythonic_function_(		"gtk_text_view_get_buffer", ctypes.POINTER(_GtkTextBuffer), [
	("text_view",		ctypes.POINTER(_GtkTextView)),] )

gtk_text_view_scroll_to_iter = _rpythonic_function_(		"gtk_text_view_scroll_to_iter", ctypes.c_int, [
	("text_view",		ctypes.POINTER(_GtkTextView)),
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("within_margin",		ctypes.c_double),
	("use_align",		ctypes.c_int),
	("xalign",		ctypes.c_double),
	("yalign",		ctypes.c_double),] )

gtk_text_view_scroll_to_mark = _rpythonic_function_(		"gtk_text_view_scroll_to_mark", ctypes.c_void_p, [
	("text_view",		ctypes.POINTER(_GtkTextView)),
	("mark",		ctypes.POINTER(_GtkTextMark)),
	("within_margin",		ctypes.c_double),
	("use_align",		ctypes.c_int),
	("xalign",		ctypes.c_double),
	("yalign",		ctypes.c_double),] )

gtk_text_view_scroll_mark_onscreen = _rpythonic_function_(		"gtk_text_view_scroll_mark_onscreen", ctypes.c_void_p, [
	("text_view",		ctypes.POINTER(_GtkTextView)),
	("mark",		ctypes.POINTER(_GtkTextMark)),] )

gtk_text_view_move_mark_onscreen = _rpythonic_function_(		"gtk_text_view_move_mark_onscreen", ctypes.c_int, [
	("text_view",		ctypes.POINTER(_GtkTextView)),
	("mark",		ctypes.POINTER(_GtkTextMark)),] )

gtk_text_view_place_cursor_onscreen = _rpythonic_function_(		"gtk_text_view_place_cursor_onscreen", ctypes.c_int, [
	("text_view",		ctypes.POINTER(_GtkTextView)),] )

gtk_text_view_get_visible_rect = _rpythonic_function_(		"gtk_text_view_get_visible_rect", ctypes.c_void_p, [
	("text_view",		ctypes.POINTER(_GtkTextView)),
	("visible_rect",		ctypes.POINTER(_cairo_rectangle_int)),] )

gtk_text_view_set_cursor_visible = _rpythonic_function_(		"gtk_text_view_set_cursor_visible", ctypes.c_void_p, [
	("text_view",		ctypes.POINTER(_GtkTextView)),
	("setting",		ctypes.c_int),] )

gtk_text_view_get_cursor_visible = _rpythonic_function_(		"gtk_text_view_get_cursor_visible", ctypes.c_int, [
	("text_view",		ctypes.POINTER(_GtkTextView)),] )

gtk_text_view_get_cursor_locations = _rpythonic_function_(		"gtk_text_view_get_cursor_locations", ctypes.c_void_p, [
	("text_view",		ctypes.POINTER(_GtkTextView)),
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("strong",		ctypes.POINTER(_cairo_rectangle_int)),
	("weak",		ctypes.POINTER(_cairo_rectangle_int)),] )

gtk_text_view_get_iter_location = _rpythonic_function_(		"gtk_text_view_get_iter_location", ctypes.c_void_p, [
	("text_view",		ctypes.POINTER(_GtkTextView)),
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("location",		ctypes.POINTER(_cairo_rectangle_int)),] )

gtk_text_view_get_iter_at_location = _rpythonic_function_(		"gtk_text_view_get_iter_at_location", ctypes.c_void_p, [
	("text_view",		ctypes.POINTER(_GtkTextView)),
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

gtk_text_view_get_iter_at_position = _rpythonic_function_(		"gtk_text_view_get_iter_at_position", ctypes.c_void_p, [
	("text_view",		ctypes.POINTER(_GtkTextView)),
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("trailing",		ctypes.POINTER(ctypes.c_int)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

gtk_text_view_get_line_yrange = _rpythonic_function_(		"gtk_text_view_get_line_yrange", ctypes.c_void_p, [
	("text_view",		ctypes.POINTER(_GtkTextView)),
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("y",		ctypes.POINTER(ctypes.c_int)),
	("height",		ctypes.POINTER(ctypes.c_int)),] )

gtk_text_view_get_line_at_y = _rpythonic_function_(		"gtk_text_view_get_line_at_y", ctypes.c_void_p, [
	("text_view",		ctypes.POINTER(_GtkTextView)),
	("target_iter",		ctypes.POINTER(_GtkTextIter)),
	("y",		ctypes.c_int),
	("line_top",		ctypes.POINTER(ctypes.c_int)),] )

gtk_text_view_buffer_to_window_coords = _rpythonic_function_(		"gtk_text_view_buffer_to_window_coords", ctypes.c_void_p, [
	("text_view",		ctypes.POINTER(_GtkTextView)),
	("win",		ctypes.c_int),
	("buffer_x",		ctypes.c_int),
	("buffer_y",		ctypes.c_int),
	("window_x",		ctypes.POINTER(ctypes.c_int)),
	("window_y",		ctypes.POINTER(ctypes.c_int)),] )

gtk_text_view_window_to_buffer_coords = _rpythonic_function_(		"gtk_text_view_window_to_buffer_coords", ctypes.c_void_p, [
	("text_view",		ctypes.POINTER(_GtkTextView)),
	("win",		ctypes.c_int),
	("window_x",		ctypes.c_int),
	("window_y",		ctypes.c_int),
	("buffer_x",		ctypes.POINTER(ctypes.c_int)),
	("buffer_y",		ctypes.POINTER(ctypes.c_int)),] )

gtk_text_view_get_hadjustment = _rpythonic_function_(		"gtk_text_view_get_hadjustment", ctypes.POINTER(_GtkAdjustment), [
	("text_view",		ctypes.POINTER(_GtkTextView)),] )

gtk_text_view_get_vadjustment = _rpythonic_function_(		"gtk_text_view_get_vadjustment", ctypes.POINTER(_GtkAdjustment), [
	("text_view",		ctypes.POINTER(_GtkTextView)),] )

gtk_text_view_get_window = _rpythonic_function_(		"gtk_text_view_get_window", ctypes.POINTER(_GdkWindow), [
	("text_view",		ctypes.POINTER(_GtkTextView)),
	("win",		ctypes.c_int),] )

gtk_text_view_get_window_type = _rpythonic_function_(		"gtk_text_view_get_window_type", ctypes.c_int, [
	("text_view",		ctypes.POINTER(_GtkTextView)),
	("window",		ctypes.POINTER(_GdkWindow)),] )

gtk_text_view_set_border_window_size = _rpythonic_function_(		"gtk_text_view_set_border_window_size", ctypes.c_void_p, [
	("text_view",		ctypes.POINTER(_GtkTextView)),
	("C_type",		ctypes.c_int),
	("size",		ctypes.c_int),] )

gtk_text_view_get_border_window_size = _rpythonic_function_(		"gtk_text_view_get_border_window_size", ctypes.c_int, [
	("text_view",		ctypes.POINTER(_GtkTextView)),
	("C_type",		ctypes.c_int),] )

gtk_text_view_forward_display_line = _rpythonic_function_(		"gtk_text_view_forward_display_line", ctypes.c_int, [
	("text_view",		ctypes.POINTER(_GtkTextView)),
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_view_backward_display_line = _rpythonic_function_(		"gtk_text_view_backward_display_line", ctypes.c_int, [
	("text_view",		ctypes.POINTER(_GtkTextView)),
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_view_forward_display_line_end = _rpythonic_function_(		"gtk_text_view_forward_display_line_end", ctypes.c_int, [
	("text_view",		ctypes.POINTER(_GtkTextView)),
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_view_backward_display_line_start = _rpythonic_function_(		"gtk_text_view_backward_display_line_start", ctypes.c_int, [
	("text_view",		ctypes.POINTER(_GtkTextView)),
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_view_starts_display_line = _rpythonic_function_(		"gtk_text_view_starts_display_line", ctypes.c_int, [
	("text_view",		ctypes.POINTER(_GtkTextView)),
	("iter",		ctypes.POINTER(_GtkTextIter)),] )

gtk_text_view_move_visually = _rpythonic_function_(		"gtk_text_view_move_visually", ctypes.c_int, [
	("text_view",		ctypes.POINTER(_GtkTextView)),
	("iter",		ctypes.POINTER(_GtkTextIter)),
	("count",		ctypes.c_int),] )

gtk_text_view_im_context_filter_keypress = _rpythonic_function_(		"gtk_text_view_im_context_filter_keypress", ctypes.c_int, [
	("text_view",		ctypes.POINTER(_GtkTextView)),
	("event",		ctypes.POINTER(_GdkEventKey)),] )

gtk_text_view_reset_im_context = _rpythonic_function_(		"gtk_text_view_reset_im_context", ctypes.c_void_p, [
	("text_view",		ctypes.POINTER(_GtkTextView)),] )

gtk_text_view_add_child_at_anchor = _rpythonic_function_(		"gtk_text_view_add_child_at_anchor", ctypes.c_void_p, [
	("text_view",		ctypes.POINTER(_GtkTextView)),
	("child",		ctypes.POINTER(_GtkWidget)),
	("anchor",		ctypes.POINTER(_GtkTextChildAnchor)),] )

gtk_text_view_add_child_in_window = _rpythonic_function_(		"gtk_text_view_add_child_in_window", ctypes.c_void_p, [
	("text_view",		ctypes.POINTER(_GtkTextView)),
	("child",		ctypes.POINTER(_GtkWidget)),
	("which_window",		ctypes.c_int),
	("xpos",		ctypes.c_int),
	("ypos",		ctypes.c_int),] )

gtk_text_view_move_child = _rpythonic_function_(		"gtk_text_view_move_child", ctypes.c_void_p, [
	("text_view",		ctypes.POINTER(_GtkTextView)),
	("child",		ctypes.POINTER(_GtkWidget)),
	("xpos",		ctypes.c_int),
	("ypos",		ctypes.c_int),] )

gtk_text_view_set_wrap_mode = _rpythonic_function_(		"gtk_text_view_set_wrap_mode", ctypes.c_void_p, [
	("text_view",		ctypes.POINTER(_GtkTextView)),
	("wrap_mode",		ctypes.c_int),] )

gtk_text_view_get_wrap_mode = _rpythonic_function_(		"gtk_text_view_get_wrap_mode", ctypes.c_int, [
	("text_view",		ctypes.POINTER(_GtkTextView)),] )

gtk_text_view_set_editable = _rpythonic_function_(		"gtk_text_view_set_editable", ctypes.c_void_p, [
	("text_view",		ctypes.POINTER(_GtkTextView)),
	("setting",		ctypes.c_int),] )

gtk_text_view_get_editable = _rpythonic_function_(		"gtk_text_view_get_editable", ctypes.c_int, [
	("text_view",		ctypes.POINTER(_GtkTextView)),] )

gtk_text_view_set_overwrite = _rpythonic_function_(		"gtk_text_view_set_overwrite", ctypes.c_void_p, [
	("text_view",		ctypes.POINTER(_GtkTextView)),
	("overwrite",		ctypes.c_int),] )

gtk_text_view_get_overwrite = _rpythonic_function_(		"gtk_text_view_get_overwrite", ctypes.c_int, [
	("text_view",		ctypes.POINTER(_GtkTextView)),] )

gtk_text_view_set_accepts_tab = _rpythonic_function_(		"gtk_text_view_set_accepts_tab", ctypes.c_void_p, [
	("text_view",		ctypes.POINTER(_GtkTextView)),
	("accepts_tab",		ctypes.c_int),] )

gtk_text_view_get_accepts_tab = _rpythonic_function_(		"gtk_text_view_get_accepts_tab", ctypes.c_int, [
	("text_view",		ctypes.POINTER(_GtkTextView)),] )

gtk_text_view_set_pixels_above_lines = _rpythonic_function_(		"gtk_text_view_set_pixels_above_lines", ctypes.c_void_p, [
	("text_view",		ctypes.POINTER(_GtkTextView)),
	("pixels_above_lines",		ctypes.c_int),] )

gtk_text_view_get_pixels_above_lines = _rpythonic_function_(		"gtk_text_view_get_pixels_above_lines", ctypes.c_int, [
	("text_view",		ctypes.POINTER(_GtkTextView)),] )

gtk_text_view_set_pixels_below_lines = _rpythonic_function_(		"gtk_text_view_set_pixels_below_lines", ctypes.c_void_p, [
	("text_view",		ctypes.POINTER(_GtkTextView)),
	("pixels_below_lines",		ctypes.c_int),] )

gtk_text_view_get_pixels_below_lines = _rpythonic_function_(		"gtk_text_view_get_pixels_below_lines", ctypes.c_int, [
	("text_view",		ctypes.POINTER(_GtkTextView)),] )

gtk_text_view_set_pixels_inside_wrap = _rpythonic_function_(		"gtk_text_view_set_pixels_inside_wrap", ctypes.c_void_p, [
	("text_view",		ctypes.POINTER(_GtkTextView)),
	("pixels_inside_wrap",		ctypes.c_int),] )

gtk_text_view_get_pixels_inside_wrap = _rpythonic_function_(		"gtk_text_view_get_pixels_inside_wrap", ctypes.c_int, [
	("text_view",		ctypes.POINTER(_GtkTextView)),] )

gtk_text_view_set_justification = _rpythonic_function_(		"gtk_text_view_set_justification", ctypes.c_void_p, [
	("text_view",		ctypes.POINTER(_GtkTextView)),
	("justification",		ctypes.c_int),] )

gtk_text_view_get_justification = _rpythonic_function_(		"gtk_text_view_get_justification", ctypes.c_int, [
	("text_view",		ctypes.POINTER(_GtkTextView)),] )

gtk_text_view_set_left_margin = _rpythonic_function_(		"gtk_text_view_set_left_margin", ctypes.c_void_p, [
	("text_view",		ctypes.POINTER(_GtkTextView)),
	("left_margin",		ctypes.c_int),] )

gtk_text_view_get_left_margin = _rpythonic_function_(		"gtk_text_view_get_left_margin", ctypes.c_int, [
	("text_view",		ctypes.POINTER(_GtkTextView)),] )

gtk_text_view_set_right_margin = _rpythonic_function_(		"gtk_text_view_set_right_margin", ctypes.c_void_p, [
	("text_view",		ctypes.POINTER(_GtkTextView)),
	("right_margin",		ctypes.c_int),] )

gtk_text_view_get_right_margin = _rpythonic_function_(		"gtk_text_view_get_right_margin", ctypes.c_int, [
	("text_view",		ctypes.POINTER(_GtkTextView)),] )

gtk_text_view_set_indent = _rpythonic_function_(		"gtk_text_view_set_indent", ctypes.c_void_p, [
	("text_view",		ctypes.POINTER(_GtkTextView)),
	("indent",		ctypes.c_int),] )

gtk_text_view_get_indent = _rpythonic_function_(		"gtk_text_view_get_indent", ctypes.c_int, [
	("text_view",		ctypes.POINTER(_GtkTextView)),] )

gtk_text_view_set_tabs = _rpythonic_function_(		"gtk_text_view_set_tabs", ctypes.c_void_p, [
	("text_view",		ctypes.POINTER(_GtkTextView)),
	("tabs",		ctypes.POINTER(_PangoTabArray)),] )

gtk_text_view_get_tabs = _rpythonic_function_(		"gtk_text_view_get_tabs", ctypes.POINTER(_PangoTabArray), [
	("text_view",		ctypes.POINTER(_GtkTextView)),] )

gtk_text_view_get_default_attributes = _rpythonic_function_(		"gtk_text_view_get_default_attributes", ctypes.POINTER(_GtkTextAttributes), [
	("text_view",		ctypes.POINTER(_GtkTextView)),] )

render_line = _rpythonic_function_(		"render_line", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(_GtkThemingEngine)),
	("cr",		ctypes.POINTER(_cairo)),
	("x0",		ctypes.c_double),
	("y0",		ctypes.c_double),
	("x1",		ctypes.c_double),
	("y1",		ctypes.c_double),] )

render_background = _rpythonic_function_(		"render_background", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(_GtkThemingEngine)),
	("cr",		ctypes.POINTER(_cairo)),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("width",		ctypes.c_double),
	("height",		ctypes.c_double),] )

render_frame = _rpythonic_function_(		"render_frame", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(_GtkThemingEngine)),
	("cr",		ctypes.POINTER(_cairo)),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("width",		ctypes.c_double),
	("height",		ctypes.c_double),] )

render_frame_gap = _rpythonic_function_(		"render_frame_gap", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(_GtkThemingEngine)),
	("cr",		ctypes.POINTER(_cairo)),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("width",		ctypes.c_double),
	("height",		ctypes.c_double),
	("gap_side",		ctypes.c_int),
	("xy0_gap",		ctypes.c_double),
	("xy1_gap",		ctypes.c_double),] )

render_extension = _rpythonic_function_(		"render_extension", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(_GtkThemingEngine)),
	("cr",		ctypes.POINTER(_cairo)),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("width",		ctypes.c_double),
	("height",		ctypes.c_double),
	("gap_side",		ctypes.c_int),] )

render_check = _rpythonic_function_(		"render_check", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(_GtkThemingEngine)),
	("cr",		ctypes.POINTER(_cairo)),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("width",		ctypes.c_double),
	("height",		ctypes.c_double),] )

render_option = _rpythonic_function_(		"render_option", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(_GtkThemingEngine)),
	("cr",		ctypes.POINTER(_cairo)),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("width",		ctypes.c_double),
	("height",		ctypes.c_double),] )

render_arrow = _rpythonic_function_(		"render_arrow", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(_GtkThemingEngine)),
	("cr",		ctypes.POINTER(_cairo)),
	("angle",		ctypes.c_double),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("size",		ctypes.c_double),] )

render_expander = _rpythonic_function_(		"render_expander", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(_GtkThemingEngine)),
	("cr",		ctypes.POINTER(_cairo)),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("width",		ctypes.c_double),
	("height",		ctypes.c_double),] )

render_focus = _rpythonic_function_(		"render_focus", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(_GtkThemingEngine)),
	("cr",		ctypes.POINTER(_cairo)),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("width",		ctypes.c_double),
	("height",		ctypes.c_double),] )

render_layout = _rpythonic_function_(		"render_layout", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(_GtkThemingEngine)),
	("cr",		ctypes.POINTER(_cairo)),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("layout",		ctypes.POINTER(_PangoLayout)),] )

render_slider = _rpythonic_function_(		"render_slider", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(_GtkThemingEngine)),
	("cr",		ctypes.POINTER(_cairo)),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("width",		ctypes.c_double),
	("height",		ctypes.c_double),
	("orientation",		ctypes.c_int),] )

render_handle = _rpythonic_function_(		"render_handle", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(_GtkThemingEngine)),
	("cr",		ctypes.POINTER(_cairo)),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("width",		ctypes.c_double),
	("height",		ctypes.c_double),] )

render_activity = _rpythonic_function_(		"render_activity", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(_GtkThemingEngine)),
	("cr",		ctypes.POINTER(_cairo)),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),
	("width",		ctypes.c_double),
	("height",		ctypes.c_double),] )

render_icon_pixbuf = _rpythonic_function_(		"render_icon_pixbuf", ctypes.POINTER(_GdkPixbuf), [
	("engine",		ctypes.POINTER(_GtkThemingEngine)),
	("source",		ctypes.POINTER(_GtkIconSource)),
	("size",		ctypes.c_int),] )

_gtk_theming_engine_set_context = _rpythonic_function_(		"_gtk_theming_engine_set_context", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(_GtkThemingEngine)),
	("context",		ctypes.POINTER(_GtkStyleContext)),] )

gtk_theming_engine_register_property = _rpythonic_function_(		"gtk_theming_engine_register_property", ctypes.c_void_p, [
	("name_space",		ctypes.POINTER(ctypes.c_char)),
	("parse_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_char),ctypes.POINTER(_GValue),ctypes.POINTER(ctypes.POINTER(_GError)),)),
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

gtk_theming_engine_get_type = _rpythonic_function_(		"gtk_theming_engine_get_type", ctypes.c_uint, [] )

gtk_theming_engine_get_property = _rpythonic_function_(		"gtk_theming_engine_get_property", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(_GtkThemingEngine)),
	("property",		ctypes.POINTER(ctypes.c_char)),
	("state",		ctypes.c_int),
	("value",		ctypes.POINTER(_GValue)),] )

gtk_theming_engine_get_valist = _rpythonic_function_(		"gtk_theming_engine_get_valist", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(_GtkThemingEngine)),
	("state",		ctypes.c_int),
	("args",		ctypes.c_char),] )

gtk_theming_engine_get_style_property = _rpythonic_function_(		"gtk_theming_engine_get_style_property", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(_GtkThemingEngine)),
	("property_name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(_GValue)),] )

gtk_theming_engine_get_style_valist = _rpythonic_function_(		"gtk_theming_engine_get_style_valist", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(_GtkThemingEngine)),
	("args",		ctypes.c_char),] )

gtk_theming_engine_lookup_color = _rpythonic_function_(		"gtk_theming_engine_lookup_color", ctypes.c_int, [
	("engine",		ctypes.POINTER(_GtkThemingEngine)),
	("color_name",		ctypes.POINTER(ctypes.c_char)),
	("color",		ctypes.POINTER(_GdkRGBA)),] )

gtk_theming_engine_get_path = _rpythonic_function_(		"gtk_theming_engine_get_path", ctypes.POINTER(_GtkWidgetPath), [
	("engine",		ctypes.POINTER(_GtkThemingEngine)),] )

gtk_theming_engine_has_class = _rpythonic_function_(		"gtk_theming_engine_has_class", ctypes.c_int, [
	("engine",		ctypes.POINTER(_GtkThemingEngine)),
	("style_class",		ctypes.POINTER(ctypes.c_char)),] )

gtk_theming_engine_has_region = _rpythonic_function_(		"gtk_theming_engine_has_region", ctypes.c_int, [
	("engine",		ctypes.POINTER(_GtkThemingEngine)),
	("style_region",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.POINTER(ctypes.c_int)),] )

gtk_theming_engine_get_state = _rpythonic_function_(		"gtk_theming_engine_get_state", ctypes.c_int, [
	("engine",		ctypes.POINTER(_GtkThemingEngine)),] )

gtk_theming_engine_state_is_running = _rpythonic_function_(		"gtk_theming_engine_state_is_running", ctypes.c_int, [
	("engine",		ctypes.POINTER(_GtkThemingEngine)),
	("state",		ctypes.c_int),
	("progress",		ctypes.POINTER(ctypes.c_double)),] )

gtk_theming_engine_get_direction = _rpythonic_function_(		"gtk_theming_engine_get_direction", ctypes.c_int, [
	("engine",		ctypes.POINTER(_GtkThemingEngine)),] )

gtk_theming_engine_get_junction_sides = _rpythonic_function_(		"gtk_theming_engine_get_junction_sides", ctypes.c_int, [
	("engine",		ctypes.POINTER(_GtkThemingEngine)),] )

gtk_theming_engine_get_color = _rpythonic_function_(		"gtk_theming_engine_get_color", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(_GtkThemingEngine)),
	("state",		ctypes.c_int),
	("color",		ctypes.POINTER(_GdkRGBA)),] )

gtk_theming_engine_get_background_color = _rpythonic_function_(		"gtk_theming_engine_get_background_color", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(_GtkThemingEngine)),
	("state",		ctypes.c_int),
	("color",		ctypes.POINTER(_GdkRGBA)),] )

gtk_theming_engine_get_border_color = _rpythonic_function_(		"gtk_theming_engine_get_border_color", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(_GtkThemingEngine)),
	("state",		ctypes.c_int),
	("color",		ctypes.POINTER(_GdkRGBA)),] )

gtk_theming_engine_get_border = _rpythonic_function_(		"gtk_theming_engine_get_border", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(_GtkThemingEngine)),
	("state",		ctypes.c_int),
	("border",		ctypes.POINTER(_GtkBorder)),] )

gtk_theming_engine_get_padding = _rpythonic_function_(		"gtk_theming_engine_get_padding", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(_GtkThemingEngine)),
	("state",		ctypes.c_int),
	("padding",		ctypes.POINTER(_GtkBorder)),] )

gtk_theming_engine_get_margin = _rpythonic_function_(		"gtk_theming_engine_get_margin", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(_GtkThemingEngine)),
	("state",		ctypes.c_int),
	("margin",		ctypes.POINTER(_GtkBorder)),] )

gtk_theming_engine_get_font = _rpythonic_function_(		"gtk_theming_engine_get_font", ctypes.POINTER(_PangoFontDescription), [
	("engine",		ctypes.POINTER(_GtkThemingEngine)),
	("state",		ctypes.c_int),] )

gtk_theming_engine_load = _rpythonic_function_(		"gtk_theming_engine_load", ctypes.POINTER(_GtkThemingEngine), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

gtk_theming_engine_get_screen = _rpythonic_function_(		"gtk_theming_engine_get_screen", ctypes.POINTER(_GdkScreen), [
	("engine",		ctypes.POINTER(_GtkThemingEngine)),] )

orientation_changed = _rpythonic_function_(		"orientation_changed", ctypes.c_void_p, [
	("toolbar",		ctypes.POINTER(_GtkToolbar)),
	("orientation",		ctypes.c_int),] )

style_changed = _rpythonic_function_(		"style_changed", ctypes.c_void_p, [
	("toolbar",		ctypes.POINTER(_GtkToolbar)),
	("style",		ctypes.c_int),] )

popup_context_menu = _rpythonic_function_(		"popup_context_menu", ctypes.c_int, [
	("toolbar",		ctypes.POINTER(_GtkToolbar)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("button_number",		ctypes.c_int),] )

gtk_toolbar_get_type = _rpythonic_function_(		"gtk_toolbar_get_type", ctypes.c_uint, [] )

gtk_toolbar_new = _rpythonic_function_(		"gtk_toolbar_new", ctypes.POINTER(_GtkWidget), [] )

gtk_toolbar_insert = _rpythonic_function_(		"gtk_toolbar_insert", ctypes.c_void_p, [
	("toolbar",		ctypes.POINTER(_GtkToolbar)),
	("item",		ctypes.POINTER(_GtkToolItem)),
	("pos",		ctypes.c_int),] )

gtk_toolbar_get_item_index = _rpythonic_function_(		"gtk_toolbar_get_item_index", ctypes.c_int, [
	("toolbar",		ctypes.POINTER(_GtkToolbar)),
	("item",		ctypes.POINTER(_GtkToolItem)),] )

gtk_toolbar_get_n_items = _rpythonic_function_(		"gtk_toolbar_get_n_items", ctypes.c_int, [
	("toolbar",		ctypes.POINTER(_GtkToolbar)),] )

gtk_toolbar_get_nth_item = _rpythonic_function_(		"gtk_toolbar_get_nth_item", ctypes.POINTER(_GtkToolItem), [
	("toolbar",		ctypes.POINTER(_GtkToolbar)),
	("n",		ctypes.c_int),] )

gtk_toolbar_get_show_arrow = _rpythonic_function_(		"gtk_toolbar_get_show_arrow", ctypes.c_int, [
	("toolbar",		ctypes.POINTER(_GtkToolbar)),] )

gtk_toolbar_set_show_arrow = _rpythonic_function_(		"gtk_toolbar_set_show_arrow", ctypes.c_void_p, [
	("toolbar",		ctypes.POINTER(_GtkToolbar)),
	("show_arrow",		ctypes.c_int),] )

gtk_toolbar_get_style = _rpythonic_function_(		"gtk_toolbar_get_style", ctypes.c_int, [
	("toolbar",		ctypes.POINTER(_GtkToolbar)),] )

gtk_toolbar_set_style = _rpythonic_function_(		"gtk_toolbar_set_style", ctypes.c_void_p, [
	("toolbar",		ctypes.POINTER(_GtkToolbar)),
	("style",		ctypes.c_int),] )

gtk_toolbar_unset_style = _rpythonic_function_(		"gtk_toolbar_unset_style", ctypes.c_void_p, [
	("toolbar",		ctypes.POINTER(_GtkToolbar)),] )

gtk_toolbar_get_icon_size = _rpythonic_function_(		"gtk_toolbar_get_icon_size", ctypes.c_int, [
	("toolbar",		ctypes.POINTER(_GtkToolbar)),] )

gtk_toolbar_set_icon_size = _rpythonic_function_(		"gtk_toolbar_set_icon_size", ctypes.c_void_p, [
	("toolbar",		ctypes.POINTER(_GtkToolbar)),
	("icon_size",		ctypes.c_int),] )

gtk_toolbar_unset_icon_size = _rpythonic_function_(		"gtk_toolbar_unset_icon_size", ctypes.c_void_p, [
	("toolbar",		ctypes.POINTER(_GtkToolbar)),] )

gtk_toolbar_get_relief_style = _rpythonic_function_(		"gtk_toolbar_get_relief_style", ctypes.c_int, [
	("toolbar",		ctypes.POINTER(_GtkToolbar)),] )

gtk_toolbar_get_drop_index = _rpythonic_function_(		"gtk_toolbar_get_drop_index", ctypes.c_int, [
	("toolbar",		ctypes.POINTER(_GtkToolbar)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

gtk_toolbar_set_drop_highlight_item = _rpythonic_function_(		"gtk_toolbar_set_drop_highlight_item", ctypes.c_void_p, [
	("toolbar",		ctypes.POINTER(_GtkToolbar)),
	("tool_item",		ctypes.POINTER(_GtkToolItem)),
	("index_",		ctypes.c_int),] )

_gtk_toolbar_elide_underscores = _rpythonic_function_(		"_gtk_toolbar_elide_underscores", ctypes.POINTER(ctypes.c_char), [
	("original",		ctypes.POINTER(ctypes.c_char)),] )

_gtk_toolbar_paint_space_line = _rpythonic_function_(		"_gtk_toolbar_paint_space_line", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("toolbar",		ctypes.POINTER(_GtkToolbar)),
	("cr",		ctypes.POINTER(_cairo)),] )

_gtk_toolbar_get_default_space_size = _rpythonic_function_(		"_gtk_toolbar_get_default_space_size", ctypes.c_int, [] )

gtk_tool_item_group_get_type = _rpythonic_function_(		"gtk_tool_item_group_get_type", ctypes.c_uint, [] )

gtk_tool_item_group_new = _rpythonic_function_(		"gtk_tool_item_group_new", ctypes.POINTER(_GtkWidget), [
	("label",		ctypes.POINTER(ctypes.c_char)),] )

gtk_tool_item_group_set_label = _rpythonic_function_(		"gtk_tool_item_group_set_label", ctypes.c_void_p, [
	("group",		ctypes.POINTER(_GtkToolItemGroup)),
	("label",		ctypes.POINTER(ctypes.c_char)),] )

gtk_tool_item_group_set_label_widget = _rpythonic_function_(		"gtk_tool_item_group_set_label_widget", ctypes.c_void_p, [
	("group",		ctypes.POINTER(_GtkToolItemGroup)),
	("label_widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_tool_item_group_set_collapsed = _rpythonic_function_(		"gtk_tool_item_group_set_collapsed", ctypes.c_void_p, [
	("group",		ctypes.POINTER(_GtkToolItemGroup)),
	("collapsed",		ctypes.c_int),] )

gtk_tool_item_group_set_ellipsize = _rpythonic_function_(		"gtk_tool_item_group_set_ellipsize", ctypes.c_void_p, [
	("group",		ctypes.POINTER(_GtkToolItemGroup)),
	("ellipsize",		ctypes.c_int),] )

gtk_tool_item_group_set_header_relief = _rpythonic_function_(		"gtk_tool_item_group_set_header_relief", ctypes.c_void_p, [
	("group",		ctypes.POINTER(_GtkToolItemGroup)),
	("style",		ctypes.c_int),] )

gtk_tool_item_group_get_label = _rpythonic_function_(		"gtk_tool_item_group_get_label", ctypes.POINTER(ctypes.c_char), [
	("group",		ctypes.POINTER(_GtkToolItemGroup)),] )

gtk_tool_item_group_get_label_widget = _rpythonic_function_(		"gtk_tool_item_group_get_label_widget", ctypes.POINTER(_GtkWidget), [
	("group",		ctypes.POINTER(_GtkToolItemGroup)),] )

gtk_tool_item_group_get_collapsed = _rpythonic_function_(		"gtk_tool_item_group_get_collapsed", ctypes.c_int, [
	("group",		ctypes.POINTER(_GtkToolItemGroup)),] )

gtk_tool_item_group_get_ellipsize = _rpythonic_function_(		"gtk_tool_item_group_get_ellipsize", ctypes.c_int, [
	("group",		ctypes.POINTER(_GtkToolItemGroup)),] )

gtk_tool_item_group_get_header_relief = _rpythonic_function_(		"gtk_tool_item_group_get_header_relief", ctypes.c_int, [
	("group",		ctypes.POINTER(_GtkToolItemGroup)),] )

gtk_tool_item_group_insert = _rpythonic_function_(		"gtk_tool_item_group_insert", ctypes.c_void_p, [
	("group",		ctypes.POINTER(_GtkToolItemGroup)),
	("item",		ctypes.POINTER(_GtkToolItem)),
	("position",		ctypes.c_int),] )

gtk_tool_item_group_set_item_position = _rpythonic_function_(		"gtk_tool_item_group_set_item_position", ctypes.c_void_p, [
	("group",		ctypes.POINTER(_GtkToolItemGroup)),
	("item",		ctypes.POINTER(_GtkToolItem)),
	("position",		ctypes.c_int),] )

gtk_tool_item_group_get_item_position = _rpythonic_function_(		"gtk_tool_item_group_get_item_position", ctypes.c_int, [
	("group",		ctypes.POINTER(_GtkToolItemGroup)),
	("item",		ctypes.POINTER(_GtkToolItem)),] )

gtk_tool_item_group_get_n_items = _rpythonic_function_(		"gtk_tool_item_group_get_n_items", ctypes.c_uint, [
	("group",		ctypes.POINTER(_GtkToolItemGroup)),] )

gtk_tool_item_group_get_nth_item = _rpythonic_function_(		"gtk_tool_item_group_get_nth_item", ctypes.POINTER(_GtkToolItem), [
	("group",		ctypes.POINTER(_GtkToolItemGroup)),
	("index",		ctypes.c_uint),] )

gtk_tool_item_group_get_drop_item = _rpythonic_function_(		"gtk_tool_item_group_get_drop_item", ctypes.POINTER(_GtkToolItem), [
	("group",		ctypes.POINTER(_GtkToolItemGroup)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

gtk_tool_palette_get_type = _rpythonic_function_(		"gtk_tool_palette_get_type", ctypes.c_uint, [] )

gtk_tool_palette_new = _rpythonic_function_(		"gtk_tool_palette_new", ctypes.POINTER(_GtkWidget), [] )

gtk_tool_palette_set_group_position = _rpythonic_function_(		"gtk_tool_palette_set_group_position", ctypes.c_void_p, [
	("palette",		ctypes.POINTER(_GtkToolPalette)),
	("group",		ctypes.POINTER(_GtkToolItemGroup)),
	("position",		ctypes.c_int),] )

gtk_tool_palette_set_exclusive = _rpythonic_function_(		"gtk_tool_palette_set_exclusive", ctypes.c_void_p, [
	("palette",		ctypes.POINTER(_GtkToolPalette)),
	("group",		ctypes.POINTER(_GtkToolItemGroup)),
	("exclusive",		ctypes.c_int),] )

gtk_tool_palette_set_expand = _rpythonic_function_(		"gtk_tool_palette_set_expand", ctypes.c_void_p, [
	("palette",		ctypes.POINTER(_GtkToolPalette)),
	("group",		ctypes.POINTER(_GtkToolItemGroup)),
	("expand",		ctypes.c_int),] )

gtk_tool_palette_get_group_position = _rpythonic_function_(		"gtk_tool_palette_get_group_position", ctypes.c_int, [
	("palette",		ctypes.POINTER(_GtkToolPalette)),
	("group",		ctypes.POINTER(_GtkToolItemGroup)),] )

gtk_tool_palette_get_exclusive = _rpythonic_function_(		"gtk_tool_palette_get_exclusive", ctypes.c_int, [
	("palette",		ctypes.POINTER(_GtkToolPalette)),
	("group",		ctypes.POINTER(_GtkToolItemGroup)),] )

gtk_tool_palette_get_expand = _rpythonic_function_(		"gtk_tool_palette_get_expand", ctypes.c_int, [
	("palette",		ctypes.POINTER(_GtkToolPalette)),
	("group",		ctypes.POINTER(_GtkToolItemGroup)),] )

gtk_tool_palette_set_icon_size = _rpythonic_function_(		"gtk_tool_palette_set_icon_size", ctypes.c_void_p, [
	("palette",		ctypes.POINTER(_GtkToolPalette)),
	("icon_size",		ctypes.c_int),] )

gtk_tool_palette_unset_icon_size = _rpythonic_function_(		"gtk_tool_palette_unset_icon_size", ctypes.c_void_p, [
	("palette",		ctypes.POINTER(_GtkToolPalette)),] )

gtk_tool_palette_set_style = _rpythonic_function_(		"gtk_tool_palette_set_style", ctypes.c_void_p, [
	("palette",		ctypes.POINTER(_GtkToolPalette)),
	("style",		ctypes.c_int),] )

gtk_tool_palette_unset_style = _rpythonic_function_(		"gtk_tool_palette_unset_style", ctypes.c_void_p, [
	("palette",		ctypes.POINTER(_GtkToolPalette)),] )

gtk_tool_palette_get_icon_size = _rpythonic_function_(		"gtk_tool_palette_get_icon_size", ctypes.c_int, [
	("palette",		ctypes.POINTER(_GtkToolPalette)),] )

gtk_tool_palette_get_style = _rpythonic_function_(		"gtk_tool_palette_get_style", ctypes.c_int, [
	("palette",		ctypes.POINTER(_GtkToolPalette)),] )

gtk_tool_palette_get_drop_item = _rpythonic_function_(		"gtk_tool_palette_get_drop_item", ctypes.POINTER(_GtkToolItem), [
	("palette",		ctypes.POINTER(_GtkToolPalette)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

gtk_tool_palette_get_drop_group = _rpythonic_function_(		"gtk_tool_palette_get_drop_group", ctypes.POINTER(_GtkToolItemGroup), [
	("palette",		ctypes.POINTER(_GtkToolPalette)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

gtk_tool_palette_get_drag_item = _rpythonic_function_(		"gtk_tool_palette_get_drag_item", ctypes.POINTER(_GtkWidget), [
	("palette",		ctypes.POINTER(_GtkToolPalette)),
	("selection",		ctypes.POINTER(_GtkSelectionData)),] )

gtk_tool_palette_set_drag_source = _rpythonic_function_(		"gtk_tool_palette_set_drag_source", ctypes.c_void_p, [
	("palette",		ctypes.POINTER(_GtkToolPalette)),
	("targets",		ctypes.c_int),] )

gtk_tool_palette_add_drag_dest = _rpythonic_function_(		"gtk_tool_palette_add_drag_dest", ctypes.c_void_p, [
	("palette",		ctypes.POINTER(_GtkToolPalette)),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("flags",		ctypes.c_int),
	("targets",		ctypes.c_int),
	("actions",		ctypes.c_int),] )

gtk_tool_palette_get_hadjustment = _rpythonic_function_(		"gtk_tool_palette_get_hadjustment", ctypes.POINTER(_GtkAdjustment), [
	("palette",		ctypes.POINTER(_GtkToolPalette)),] )

gtk_tool_palette_get_vadjustment = _rpythonic_function_(		"gtk_tool_palette_get_vadjustment", ctypes.POINTER(_GtkAdjustment), [
	("palette",		ctypes.POINTER(_GtkToolPalette)),] )

gtk_tool_palette_get_drag_target_item = _rpythonic_function_(		"gtk_tool_palette_get_drag_target_item", ctypes.POINTER(_GtkTargetEntry), [] )

gtk_tool_palette_get_drag_target_group = _rpythonic_function_(		"gtk_tool_palette_get_drag_target_group", ctypes.POINTER(_GtkTargetEntry), [] )

get_icon_size = _rpythonic_function_(		"get_icon_size", ctypes.c_int, [
	("shell",		ctypes.POINTER(_GtkToolShell)),] )

get_orientation = _rpythonic_function_(		"get_orientation", ctypes.c_int, [
	("shell",		ctypes.POINTER(_GtkToolShell)),] )

get_relief_style = _rpythonic_function_(		"get_relief_style", ctypes.c_int, [
	("shell",		ctypes.POINTER(_GtkToolShell)),] )

rebuild_menu = _rpythonic_function_(		"rebuild_menu", ctypes.c_void_p, [
	("shell",		ctypes.POINTER(_GtkToolShell)),] )

get_text_orientation = _rpythonic_function_(		"get_text_orientation", ctypes.c_int, [
	("shell",		ctypes.POINTER(_GtkToolShell)),] )

get_text_alignment = _rpythonic_function_(		"get_text_alignment", ctypes.c_float, [
	("shell",		ctypes.POINTER(_GtkToolShell)),] )

get_ellipsize_mode = _rpythonic_function_(		"get_ellipsize_mode", ctypes.c_int, [
	("shell",		ctypes.POINTER(_GtkToolShell)),] )

get_text_size_group = _rpythonic_function_(		"get_text_size_group", ctypes.POINTER(_GtkSizeGroup), [
	("shell",		ctypes.POINTER(_GtkToolShell)),] )

gtk_tool_shell_get_icon_size = _rpythonic_function_(		"gtk_tool_shell_get_icon_size", ctypes.c_int, [
	("shell",		ctypes.POINTER(_GtkToolShell)),] )

gtk_tool_shell_get_type = _rpythonic_function_(		"gtk_tool_shell_get_type", ctypes.c_uint, [] )

gtk_tool_shell_get_orientation = _rpythonic_function_(		"gtk_tool_shell_get_orientation", ctypes.c_int, [
	("shell",		ctypes.POINTER(_GtkToolShell)),] )

gtk_tool_shell_get_style = _rpythonic_function_(		"gtk_tool_shell_get_style", ctypes.c_int, [
	("shell",		ctypes.POINTER(_GtkToolShell)),] )

gtk_tool_shell_get_relief_style = _rpythonic_function_(		"gtk_tool_shell_get_relief_style", ctypes.c_int, [
	("shell",		ctypes.POINTER(_GtkToolShell)),] )

gtk_tool_shell_rebuild_menu = _rpythonic_function_(		"gtk_tool_shell_rebuild_menu", ctypes.c_void_p, [
	("shell",		ctypes.POINTER(_GtkToolShell)),] )

gtk_tool_shell_get_text_orientation = _rpythonic_function_(		"gtk_tool_shell_get_text_orientation", ctypes.c_int, [
	("shell",		ctypes.POINTER(_GtkToolShell)),] )

gtk_tool_shell_get_text_alignment = _rpythonic_function_(		"gtk_tool_shell_get_text_alignment", ctypes.c_float, [
	("shell",		ctypes.POINTER(_GtkToolShell)),] )

gtk_tool_shell_get_ellipsize_mode = _rpythonic_function_(		"gtk_tool_shell_get_ellipsize_mode", ctypes.c_int, [
	("shell",		ctypes.POINTER(_GtkToolShell)),] )

gtk_tool_shell_get_text_size_group = _rpythonic_function_(		"gtk_tool_shell_get_text_size_group", ctypes.POINTER(_GtkSizeGroup), [
	("shell",		ctypes.POINTER(_GtkToolShell)),] )

gtk_test_register_all_types = _rpythonic_function_(		"gtk_test_register_all_types", ctypes.c_void_p, [] )

gtk_test_list_all_types = _rpythonic_function_(		"gtk_test_list_all_types", ctypes.POINTER(ctypes.c_uint), [
	("n_types",		ctypes.POINTER(ctypes.c_uint)),] )

gtk_test_find_widget = _rpythonic_function_(		"gtk_test_find_widget", ctypes.POINTER(_GtkWidget), [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("label_pattern",		ctypes.POINTER(ctypes.c_char)),
	("widget_type",		ctypes.c_uint),] )

gtk_test_create_simple_window = _rpythonic_function_(		"gtk_test_create_simple_window", ctypes.POINTER(_GtkWidget), [
	("window_title",		ctypes.POINTER(ctypes.c_char)),
	("dialog_text",		ctypes.POINTER(ctypes.c_char)),] )

gtk_test_slider_set_perc = _rpythonic_function_(		"gtk_test_slider_set_perc", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("percentage",		ctypes.c_double),] )

gtk_test_slider_get_value = _rpythonic_function_(		"gtk_test_slider_get_value", ctypes.c_double, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_test_spin_button_click = _rpythonic_function_(		"gtk_test_spin_button_click", ctypes.c_int, [
	("spinner",		ctypes.POINTER(_GtkSpinButton)),
	("button",		ctypes.c_uint),
	("upwards",		ctypes.c_int),] )

gtk_test_widget_click = _rpythonic_function_(		"gtk_test_widget_click", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("button",		ctypes.c_uint),
	("modifiers",		ctypes.c_int),] )

gtk_test_widget_send_key = _rpythonic_function_(		"gtk_test_widget_send_key", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("keyval",		ctypes.c_uint),
	("modifiers",		ctypes.c_int),] )

gtk_test_text_set = _rpythonic_function_(		"gtk_test_text_set", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("string",		ctypes.POINTER(ctypes.c_char)),] )

gtk_test_text_get = _rpythonic_function_(		"gtk_test_text_get", ctypes.POINTER(ctypes.c_char), [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

gtk_test_find_sibling = _rpythonic_function_(		"gtk_test_find_sibling", ctypes.POINTER(_GtkWidget), [
	("base_widget",		ctypes.POINTER(_GtkWidget)),
	("widget_type",		ctypes.c_uint),] )

gtk_test_find_label = _rpythonic_function_(		"gtk_test_find_label", ctypes.POINTER(_GtkWidget), [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("label_pattern",		ctypes.POINTER(ctypes.c_char)),] )

row_draggable = _rpythonic_function_(		"row_draggable", ctypes.c_int, [
	("drag_source",		ctypes.POINTER(_GtkTreeDragSource)),
	("path",		ctypes.POINTER(_GtkTreePath)),] )

gtk_tree_drag_source_get_type = _rpythonic_function_(		"gtk_tree_drag_source_get_type", ctypes.c_uint, [] )

gtk_tree_drag_source_row_draggable = _rpythonic_function_(		"gtk_tree_drag_source_row_draggable", ctypes.c_int, [
	("drag_source",		ctypes.POINTER(_GtkTreeDragSource)),
	("path",		ctypes.POINTER(_GtkTreePath)),] )

gtk_tree_drag_source_drag_data_delete = _rpythonic_function_(		"gtk_tree_drag_source_drag_data_delete", ctypes.c_int, [
	("drag_source",		ctypes.POINTER(_GtkTreeDragSource)),
	("path",		ctypes.POINTER(_GtkTreePath)),] )

gtk_tree_drag_source_drag_data_get = _rpythonic_function_(		"gtk_tree_drag_source_drag_data_get", ctypes.c_int, [
	("drag_source",		ctypes.POINTER(_GtkTreeDragSource)),
	("path",		ctypes.POINTER(_GtkTreePath)),
	("selection_data",		ctypes.POINTER(_GtkSelectionData)),] )

row_drop_possible = _rpythonic_function_(		"row_drop_possible", ctypes.c_int, [
	("drag_dest",		ctypes.POINTER(_GtkTreeDragDest)),
	("dest_path",		ctypes.POINTER(_GtkTreePath)),
	("selection_data",		ctypes.POINTER(_GtkSelectionData)),] )

gtk_tree_drag_dest_get_type = _rpythonic_function_(		"gtk_tree_drag_dest_get_type", ctypes.c_uint, [] )

gtk_tree_drag_dest_drag_data_received = _rpythonic_function_(		"gtk_tree_drag_dest_drag_data_received", ctypes.c_int, [
	("drag_dest",		ctypes.POINTER(_GtkTreeDragDest)),
	("dest",		ctypes.POINTER(_GtkTreePath)),
	("selection_data",		ctypes.POINTER(_GtkSelectionData)),] )

gtk_tree_drag_dest_row_drop_possible = _rpythonic_function_(		"gtk_tree_drag_dest_row_drop_possible", ctypes.c_int, [
	("drag_dest",		ctypes.POINTER(_GtkTreeDragDest)),
	("dest_path",		ctypes.POINTER(_GtkTreePath)),
	("selection_data",		ctypes.POINTER(_GtkSelectionData)),] )

gtk_tree_set_row_drag_data = _rpythonic_function_(		"gtk_tree_set_row_drag_data", ctypes.c_int, [
	("selection_data",		ctypes.POINTER(_GtkSelectionData)),
	("tree_model",		ctypes.POINTER(_GtkTreeModel)),
	("path",		ctypes.POINTER(_GtkTreePath)),] )

gtk_tree_get_row_drag_data = _rpythonic_function_(		"gtk_tree_get_row_drag_data", ctypes.c_int, [
	("selection_data",		ctypes.POINTER(_GtkSelectionData)),
	("tree_model",		ctypes.POINTER(ctypes.POINTER(_GtkTreeModel))),
	("path",		ctypes.POINTER(ctypes.POINTER(_GtkTreePath))),] )

gtk_tree_model_sort_get_type = _rpythonic_function_(		"gtk_tree_model_sort_get_type", ctypes.c_uint, [] )

gtk_tree_model_sort_new_with_model = _rpythonic_function_(		"gtk_tree_model_sort_new_with_model", ctypes.POINTER(_GtkTreeModel), [
	("child_model",		ctypes.POINTER(_GtkTreeModel)),] )

gtk_tree_model_sort_get_model = _rpythonic_function_(		"gtk_tree_model_sort_get_model", ctypes.POINTER(_GtkTreeModel), [
	("tree_model",		ctypes.POINTER(_GtkTreeModelSort)),] )

gtk_tree_model_sort_convert_child_path_to_path = _rpythonic_function_(		"gtk_tree_model_sort_convert_child_path_to_path", ctypes.POINTER(_GtkTreePath), [
	("tree_model_sort",		ctypes.POINTER(_GtkTreeModelSort)),
	("child_path",		ctypes.POINTER(_GtkTreePath)),] )

gtk_tree_model_sort_convert_child_iter_to_iter = _rpythonic_function_(		"gtk_tree_model_sort_convert_child_iter_to_iter", ctypes.c_int, [
	("tree_model_sort",		ctypes.POINTER(_GtkTreeModelSort)),
	("sort_iter",		ctypes.POINTER(_GtkTreeIter)),
	("child_iter",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_tree_model_sort_convert_path_to_child_path = _rpythonic_function_(		"gtk_tree_model_sort_convert_path_to_child_path", ctypes.POINTER(_GtkTreePath), [
	("tree_model_sort",		ctypes.POINTER(_GtkTreeModelSort)),
	("sorted_path",		ctypes.POINTER(_GtkTreePath)),] )

gtk_tree_model_sort_convert_iter_to_child_iter = _rpythonic_function_(		"gtk_tree_model_sort_convert_iter_to_child_iter", ctypes.c_void_p, [
	("tree_model_sort",		ctypes.POINTER(_GtkTreeModelSort)),
	("child_iter",		ctypes.POINTER(_GtkTreeIter)),
	("sorted_iter",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_tree_model_sort_reset_default_sort_func = _rpythonic_function_(		"gtk_tree_model_sort_reset_default_sort_func", ctypes.c_void_p, [
	("tree_model_sort",		ctypes.POINTER(_GtkTreeModelSort)),] )

gtk_tree_model_sort_clear_cache = _rpythonic_function_(		"gtk_tree_model_sort_clear_cache", ctypes.c_void_p, [
	("tree_model_sort",		ctypes.POINTER(_GtkTreeModelSort)),] )

gtk_tree_model_sort_iter_is_valid = _rpythonic_function_(		"gtk_tree_model_sort_iter_is_valid", ctypes.c_int, [
	("tree_model_sort",		ctypes.POINTER(_GtkTreeModelSort)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),] )

GtkTreeSelectionFunc = _rpythonic_function_(		"GtkTreeSelectionFunc", ctypes.c_int, [
	("selection",		ctypes.POINTER(_GtkTreeSelection)),
	("model",		ctypes.POINTER(_GtkTreeModel)),
	("path",		ctypes.POINTER(_GtkTreePath)),
	("path_currently_selected",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

GtkTreeSelectionForeachFunc = _rpythonic_function_(		"GtkTreeSelectionForeachFunc", ctypes.c_void_p, [
	("model",		ctypes.POINTER(_GtkTreeModel)),
	("path",		ctypes.POINTER(_GtkTreePath)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

gtk_tree_selection_get_type = _rpythonic_function_(		"gtk_tree_selection_get_type", ctypes.c_uint, [] )

gtk_tree_selection_set_mode = _rpythonic_function_(		"gtk_tree_selection_set_mode", ctypes.c_void_p, [
	("selection",		ctypes.POINTER(_GtkTreeSelection)),
	("C_type",		ctypes.c_int),] )

gtk_tree_selection_get_mode = _rpythonic_function_(		"gtk_tree_selection_get_mode", ctypes.c_int, [
	("selection",		ctypes.POINTER(_GtkTreeSelection)),] )

gtk_tree_selection_set_select_function = _rpythonic_function_(		"gtk_tree_selection_set_select_function", ctypes.c_void_p, [
	("selection",		ctypes.POINTER(_GtkTreeSelection)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GtkTreeSelection),ctypes.POINTER(_GtkTreeModel),ctypes.POINTER(_GtkTreePath),ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

gtk_tree_selection_get_user_data = _rpythonic_function_(		"gtk_tree_selection_get_user_data", ctypes.POINTER(ctypes.c_void_p), [
	("selection",		ctypes.POINTER(_GtkTreeSelection)),] )

gtk_tree_selection_get_tree_view = _rpythonic_function_(		"gtk_tree_selection_get_tree_view", ctypes.POINTER(_GtkTreeView), [
	("selection",		ctypes.POINTER(_GtkTreeSelection)),] )

gtk_tree_selection_get_select_function = _rpythonic_function_(		"gtk_tree_selection_get_select_function", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GtkTreeSelection),ctypes.POINTER(_GtkTreeModel),ctypes.POINTER(_GtkTreePath),ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),), [
	("selection",		ctypes.POINTER(_GtkTreeSelection)),] )

gtk_tree_selection_get_selected = _rpythonic_function_(		"gtk_tree_selection_get_selected", ctypes.c_int, [
	("selection",		ctypes.POINTER(_GtkTreeSelection)),
	("model",		ctypes.POINTER(ctypes.POINTER(_GtkTreeModel))),
	("iter",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_tree_selection_get_selected_rows = _rpythonic_function_(		"gtk_tree_selection_get_selected_rows", ctypes.POINTER(_GList), [
	("selection",		ctypes.POINTER(_GtkTreeSelection)),
	("model",		ctypes.POINTER(ctypes.POINTER(_GtkTreeModel))),] )

gtk_tree_selection_count_selected_rows = _rpythonic_function_(		"gtk_tree_selection_count_selected_rows", ctypes.c_int, [
	("selection",		ctypes.POINTER(_GtkTreeSelection)),] )

gtk_tree_selection_selected_foreach = _rpythonic_function_(		"gtk_tree_selection_selected_foreach", ctypes.c_void_p, [
	("selection",		ctypes.POINTER(_GtkTreeSelection)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GtkTreeModel),ctypes.POINTER(_GtkTreePath),ctypes.POINTER(_GtkTreeIter),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

gtk_tree_selection_select_path = _rpythonic_function_(		"gtk_tree_selection_select_path", ctypes.c_void_p, [
	("selection",		ctypes.POINTER(_GtkTreeSelection)),
	("path",		ctypes.POINTER(_GtkTreePath)),] )

gtk_tree_selection_unselect_path = _rpythonic_function_(		"gtk_tree_selection_unselect_path", ctypes.c_void_p, [
	("selection",		ctypes.POINTER(_GtkTreeSelection)),
	("path",		ctypes.POINTER(_GtkTreePath)),] )

gtk_tree_selection_select_iter = _rpythonic_function_(		"gtk_tree_selection_select_iter", ctypes.c_void_p, [
	("selection",		ctypes.POINTER(_GtkTreeSelection)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_tree_selection_unselect_iter = _rpythonic_function_(		"gtk_tree_selection_unselect_iter", ctypes.c_void_p, [
	("selection",		ctypes.POINTER(_GtkTreeSelection)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_tree_selection_path_is_selected = _rpythonic_function_(		"gtk_tree_selection_path_is_selected", ctypes.c_int, [
	("selection",		ctypes.POINTER(_GtkTreeSelection)),
	("path",		ctypes.POINTER(_GtkTreePath)),] )

gtk_tree_selection_iter_is_selected = _rpythonic_function_(		"gtk_tree_selection_iter_is_selected", ctypes.c_int, [
	("selection",		ctypes.POINTER(_GtkTreeSelection)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_tree_selection_select_all = _rpythonic_function_(		"gtk_tree_selection_select_all", ctypes.c_void_p, [
	("selection",		ctypes.POINTER(_GtkTreeSelection)),] )

gtk_tree_selection_unselect_all = _rpythonic_function_(		"gtk_tree_selection_unselect_all", ctypes.c_void_p, [
	("selection",		ctypes.POINTER(_GtkTreeSelection)),] )

gtk_tree_selection_select_range = _rpythonic_function_(		"gtk_tree_selection_select_range", ctypes.c_void_p, [
	("selection",		ctypes.POINTER(_GtkTreeSelection)),
	("start_path",		ctypes.POINTER(_GtkTreePath)),
	("end_path",		ctypes.POINTER(_GtkTreePath)),] )

gtk_tree_selection_unselect_range = _rpythonic_function_(		"gtk_tree_selection_unselect_range", ctypes.c_void_p, [
	("selection",		ctypes.POINTER(_GtkTreeSelection)),
	("start_path",		ctypes.POINTER(_GtkTreePath)),
	("end_path",		ctypes.POINTER(_GtkTreePath)),] )

gtk_tree_store_get_type = _rpythonic_function_(		"gtk_tree_store_get_type", ctypes.c_uint, [] )

gtk_tree_store_newv = _rpythonic_function_(		"gtk_tree_store_newv", ctypes.POINTER(_GtkTreeStore), [
	("n_columns",		ctypes.c_int),
	("types",		ctypes.POINTER(ctypes.c_uint)),] )

gtk_tree_store_set_column_types = _rpythonic_function_(		"gtk_tree_store_set_column_types", ctypes.c_void_p, [
	("tree_store",		ctypes.POINTER(_GtkTreeStore)),
	("n_columns",		ctypes.c_int),
	("types",		ctypes.POINTER(ctypes.c_uint)),] )

gtk_tree_store_set_value = _rpythonic_function_(		"gtk_tree_store_set_value", ctypes.c_void_p, [
	("tree_store",		ctypes.POINTER(_GtkTreeStore)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("column",		ctypes.c_int),
	("value",		ctypes.POINTER(_GValue)),] )

gtk_tree_store_set_valuesv = _rpythonic_function_(		"gtk_tree_store_set_valuesv", ctypes.c_void_p, [
	("tree_store",		ctypes.POINTER(_GtkTreeStore)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("columns",		ctypes.POINTER(ctypes.c_int)),
	("values",		ctypes.POINTER(_GValue)),
	("n_values",		ctypes.c_int),] )

gtk_tree_store_set_valist = _rpythonic_function_(		"gtk_tree_store_set_valist", ctypes.c_void_p, [
	("tree_store",		ctypes.POINTER(_GtkTreeStore)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("var_args",		ctypes.c_char),] )

gtk_tree_store_remove = _rpythonic_function_(		"gtk_tree_store_remove", ctypes.c_int, [
	("tree_store",		ctypes.POINTER(_GtkTreeStore)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_tree_store_insert = _rpythonic_function_(		"gtk_tree_store_insert", ctypes.c_void_p, [
	("tree_store",		ctypes.POINTER(_GtkTreeStore)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("parent",		ctypes.POINTER(_GtkTreeIter)),
	("position",		ctypes.c_int),] )

gtk_tree_store_insert_before = _rpythonic_function_(		"gtk_tree_store_insert_before", ctypes.c_void_p, [
	("tree_store",		ctypes.POINTER(_GtkTreeStore)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("parent",		ctypes.POINTER(_GtkTreeIter)),
	("sibling",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_tree_store_insert_after = _rpythonic_function_(		"gtk_tree_store_insert_after", ctypes.c_void_p, [
	("tree_store",		ctypes.POINTER(_GtkTreeStore)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("parent",		ctypes.POINTER(_GtkTreeIter)),
	("sibling",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_tree_store_insert_with_valuesv = _rpythonic_function_(		"gtk_tree_store_insert_with_valuesv", ctypes.c_void_p, [
	("tree_store",		ctypes.POINTER(_GtkTreeStore)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("parent",		ctypes.POINTER(_GtkTreeIter)),
	("position",		ctypes.c_int),
	("columns",		ctypes.POINTER(ctypes.c_int)),
	("values",		ctypes.POINTER(_GValue)),
	("n_values",		ctypes.c_int),] )

gtk_tree_store_prepend = _rpythonic_function_(		"gtk_tree_store_prepend", ctypes.c_void_p, [
	("tree_store",		ctypes.POINTER(_GtkTreeStore)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("parent",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_tree_store_append = _rpythonic_function_(		"gtk_tree_store_append", ctypes.c_void_p, [
	("tree_store",		ctypes.POINTER(_GtkTreeStore)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("parent",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_tree_store_is_ancestor = _rpythonic_function_(		"gtk_tree_store_is_ancestor", ctypes.c_int, [
	("tree_store",		ctypes.POINTER(_GtkTreeStore)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("descendant",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_tree_store_iter_depth = _rpythonic_function_(		"gtk_tree_store_iter_depth", ctypes.c_int, [
	("tree_store",		ctypes.POINTER(_GtkTreeStore)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_tree_store_clear = _rpythonic_function_(		"gtk_tree_store_clear", ctypes.c_void_p, [
	("tree_store",		ctypes.POINTER(_GtkTreeStore)),] )

gtk_tree_store_iter_is_valid = _rpythonic_function_(		"gtk_tree_store_iter_is_valid", ctypes.c_int, [
	("tree_store",		ctypes.POINTER(_GtkTreeStore)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_tree_store_reorder = _rpythonic_function_(		"gtk_tree_store_reorder", ctypes.c_void_p, [
	("tree_store",		ctypes.POINTER(_GtkTreeStore)),
	("parent",		ctypes.POINTER(_GtkTreeIter)),
	("new_order",		ctypes.POINTER(ctypes.c_int)),] )

gtk_tree_store_swap = _rpythonic_function_(		"gtk_tree_store_swap", ctypes.c_void_p, [
	("tree_store",		ctypes.POINTER(_GtkTreeStore)),
	("a",		ctypes.POINTER(_GtkTreeIter)),
	("b",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_tree_store_move_before = _rpythonic_function_(		"gtk_tree_store_move_before", ctypes.c_void_p, [
	("tree_store",		ctypes.POINTER(_GtkTreeStore)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("position",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_tree_store_move_after = _rpythonic_function_(		"gtk_tree_store_move_after", ctypes.c_void_p, [
	("tree_store",		ctypes.POINTER(_GtkTreeStore)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),
	("position",		ctypes.POINTER(_GtkTreeIter)),] )

gtk_license_get_type = _rpythonic_function_(		"gtk_license_get_type", ctypes.c_uint, [] )

gtk_accel_flags_get_type = _rpythonic_function_(		"gtk_accel_flags_get_type", ctypes.c_uint, [] )

gtk_assistant_page_type_get_type = _rpythonic_function_(		"gtk_assistant_page_type_get_type", ctypes.c_uint, [] )

gtk_builder_error_get_type = _rpythonic_function_(		"gtk_builder_error_get_type", ctypes.c_uint, [] )

gtk_calendar_display_options_get_type = _rpythonic_function_(		"gtk_calendar_display_options_get_type", ctypes.c_uint, [] )

gtk_cell_renderer_state_get_type = _rpythonic_function_(		"gtk_cell_renderer_state_get_type", ctypes.c_uint, [] )

gtk_cell_renderer_mode_get_type = _rpythonic_function_(		"gtk_cell_renderer_mode_get_type", ctypes.c_uint, [] )

gtk_cell_renderer_accel_mode_get_type = _rpythonic_function_(		"gtk_cell_renderer_accel_mode_get_type", ctypes.c_uint, [] )

gtk_css_provider_error_get_type = _rpythonic_function_(		"gtk_css_provider_error_get_type", ctypes.c_uint, [] )

gtk_css_section_type_get_type = _rpythonic_function_(		"gtk_css_section_type_get_type", ctypes.c_uint, [] )

gtk_debug_flag_get_type = _rpythonic_function_(		"gtk_debug_flag_get_type", ctypes.c_uint, [] )

gtk_dialog_flags_get_type = _rpythonic_function_(		"gtk_dialog_flags_get_type", ctypes.c_uint, [] )

gtk_response_type_get_type = _rpythonic_function_(		"gtk_response_type_get_type", ctypes.c_uint, [] )

gtk_dest_defaults_get_type = _rpythonic_function_(		"gtk_dest_defaults_get_type", ctypes.c_uint, [] )

gtk_target_flags_get_type = _rpythonic_function_(		"gtk_target_flags_get_type", ctypes.c_uint, [] )

gtk_entry_icon_position_get_type = _rpythonic_function_(		"gtk_entry_icon_position_get_type", ctypes.c_uint, [] )

gtk_align_get_type = _rpythonic_function_(		"gtk_align_get_type", ctypes.c_uint, [] )

gtk_arrow_placement_get_type = _rpythonic_function_(		"gtk_arrow_placement_get_type", ctypes.c_uint, [] )

gtk_arrow_type_get_type = _rpythonic_function_(		"gtk_arrow_type_get_type", ctypes.c_uint, [] )

gtk_attach_options_get_type = _rpythonic_function_(		"gtk_attach_options_get_type", ctypes.c_uint, [] )

gtk_button_box_style_get_type = _rpythonic_function_(		"gtk_button_box_style_get_type", ctypes.c_uint, [] )

gtk_delete_type_get_type = _rpythonic_function_(		"gtk_delete_type_get_type", ctypes.c_uint, [] )

gtk_direction_type_get_type = _rpythonic_function_(		"gtk_direction_type_get_type", ctypes.c_uint, [] )

gtk_expander_style_get_type = _rpythonic_function_(		"gtk_expander_style_get_type", ctypes.c_uint, [] )

gtk_icon_size_get_type = _rpythonic_function_(		"gtk_icon_size_get_type", ctypes.c_uint, [] )

gtk_sensitivity_type_get_type = _rpythonic_function_(		"gtk_sensitivity_type_get_type", ctypes.c_uint, [] )

gtk_text_direction_get_type = _rpythonic_function_(		"gtk_text_direction_get_type", ctypes.c_uint, [] )

gtk_justification_get_type = _rpythonic_function_(		"gtk_justification_get_type", ctypes.c_uint, [] )

gtk_menu_direction_type_get_type = _rpythonic_function_(		"gtk_menu_direction_type_get_type", ctypes.c_uint, [] )

gtk_message_type_get_type = _rpythonic_function_(		"gtk_message_type_get_type", ctypes.c_uint, [] )

gtk_movement_step_get_type = _rpythonic_function_(		"gtk_movement_step_get_type", ctypes.c_uint, [] )

gtk_scroll_step_get_type = _rpythonic_function_(		"gtk_scroll_step_get_type", ctypes.c_uint, [] )

gtk_orientation_get_type = _rpythonic_function_(		"gtk_orientation_get_type", ctypes.c_uint, [] )

gtk_corner_type_get_type = _rpythonic_function_(		"gtk_corner_type_get_type", ctypes.c_uint, [] )

gtk_pack_type_get_type = _rpythonic_function_(		"gtk_pack_type_get_type", ctypes.c_uint, [] )

gtk_path_priority_type_get_type = _rpythonic_function_(		"gtk_path_priority_type_get_type", ctypes.c_uint, [] )

gtk_path_type_get_type = _rpythonic_function_(		"gtk_path_type_get_type", ctypes.c_uint, [] )

gtk_policy_type_get_type = _rpythonic_function_(		"gtk_policy_type_get_type", ctypes.c_uint, [] )

gtk_position_type_get_type = _rpythonic_function_(		"gtk_position_type_get_type", ctypes.c_uint, [] )

gtk_relief_style_get_type = _rpythonic_function_(		"gtk_relief_style_get_type", ctypes.c_uint, [] )

gtk_resize_mode_get_type = _rpythonic_function_(		"gtk_resize_mode_get_type", ctypes.c_uint, [] )

gtk_scroll_type_get_type = _rpythonic_function_(		"gtk_scroll_type_get_type", ctypes.c_uint, [] )

gtk_selection_mode_get_type = _rpythonic_function_(		"gtk_selection_mode_get_type", ctypes.c_uint, [] )

gtk_shadow_type_get_type = _rpythonic_function_(		"gtk_shadow_type_get_type", ctypes.c_uint, [] )

gtk_state_type_get_type = _rpythonic_function_(		"gtk_state_type_get_type", ctypes.c_uint, [] )

gtk_toolbar_style_get_type = _rpythonic_function_(		"gtk_toolbar_style_get_type", ctypes.c_uint, [] )

gtk_window_position_get_type = _rpythonic_function_(		"gtk_window_position_get_type", ctypes.c_uint, [] )

gtk_window_type_get_type = _rpythonic_function_(		"gtk_window_type_get_type", ctypes.c_uint, [] )

gtk_wrap_mode_get_type = _rpythonic_function_(		"gtk_wrap_mode_get_type", ctypes.c_uint, [] )

gtk_sort_type_get_type = _rpythonic_function_(		"gtk_sort_type_get_type", ctypes.c_uint, [] )

gtk_im_preedit_style_get_type = _rpythonic_function_(		"gtk_im_preedit_style_get_type", ctypes.c_uint, [] )

gtk_im_status_style_get_type = _rpythonic_function_(		"gtk_im_status_style_get_type", ctypes.c_uint, [] )

gtk_pack_direction_get_type = _rpythonic_function_(		"gtk_pack_direction_get_type", ctypes.c_uint, [] )

gtk_print_pages_get_type = _rpythonic_function_(		"gtk_print_pages_get_type", ctypes.c_uint, [] )

gtk_page_set_get_type = _rpythonic_function_(		"gtk_page_set_get_type", ctypes.c_uint, [] )

gtk_number_up_layout_get_type = _rpythonic_function_(		"gtk_number_up_layout_get_type", ctypes.c_uint, [] )

gtk_page_orientation_get_type = _rpythonic_function_(		"gtk_page_orientation_get_type", ctypes.c_uint, [] )

gtk_print_quality_get_type = _rpythonic_function_(		"gtk_print_quality_get_type", ctypes.c_uint, [] )

gtk_print_duplex_get_type = _rpythonic_function_(		"gtk_print_duplex_get_type", ctypes.c_uint, [] )

gtk_unit_get_type = _rpythonic_function_(		"gtk_unit_get_type", ctypes.c_uint, [] )

gtk_tree_view_grid_lines_get_type = _rpythonic_function_(		"gtk_tree_view_grid_lines_get_type", ctypes.c_uint, [] )

gtk_drag_result_get_type = _rpythonic_function_(		"gtk_drag_result_get_type", ctypes.c_uint, [] )

gtk_size_request_mode_get_type = _rpythonic_function_(		"gtk_size_request_mode_get_type", ctypes.c_uint, [] )

gtk_scrollable_policy_get_type = _rpythonic_function_(		"gtk_scrollable_policy_get_type", ctypes.c_uint, [] )

gtk_state_flags_get_type = _rpythonic_function_(		"gtk_state_flags_get_type", ctypes.c_uint, [] )

gtk_region_flags_get_type = _rpythonic_function_(		"gtk_region_flags_get_type", ctypes.c_uint, [] )

gtk_junction_sides_get_type = _rpythonic_function_(		"gtk_junction_sides_get_type", ctypes.c_uint, [] )

gtk_border_style_get_type = _rpythonic_function_(		"gtk_border_style_get_type", ctypes.c_uint, [] )

gtk_file_chooser_action_get_type = _rpythonic_function_(		"gtk_file_chooser_action_get_type", ctypes.c_uint, [] )

gtk_file_chooser_confirmation_get_type = _rpythonic_function_(		"gtk_file_chooser_confirmation_get_type", ctypes.c_uint, [] )

gtk_file_chooser_error_get_type = _rpythonic_function_(		"gtk_file_chooser_error_get_type", ctypes.c_uint, [] )

gtk_file_filter_flags_get_type = _rpythonic_function_(		"gtk_file_filter_flags_get_type", ctypes.c_uint, [] )

gtk_icon_lookup_flags_get_type = _rpythonic_function_(		"gtk_icon_lookup_flags_get_type", ctypes.c_uint, [] )

gtk_icon_theme_error_get_type = _rpythonic_function_(		"gtk_icon_theme_error_get_type", ctypes.c_uint, [] )

gtk_icon_view_drop_position_get_type = _rpythonic_function_(		"gtk_icon_view_drop_position_get_type", ctypes.c_uint, [] )

gtk_image_type_get_type = _rpythonic_function_(		"gtk_image_type_get_type", ctypes.c_uint, [] )

gtk_buttons_type_get_type = _rpythonic_function_(		"gtk_buttons_type_get_type", ctypes.c_uint, [] )

gtk_notebook_tab_get_type = _rpythonic_function_(		"gtk_notebook_tab_get_type", ctypes.c_uint, [] )

gtk_print_status_get_type = _rpythonic_function_(		"gtk_print_status_get_type", ctypes.c_uint, [] )

gtk_print_operation_result_get_type = _rpythonic_function_(		"gtk_print_operation_result_get_type", ctypes.c_uint, [] )

gtk_print_operation_action_get_type = _rpythonic_function_(		"gtk_print_operation_action_get_type", ctypes.c_uint, [] )

gtk_print_error_get_type = _rpythonic_function_(		"gtk_print_error_get_type", ctypes.c_uint, [] )

gtk_rc_flags_get_type = _rpythonic_function_(		"gtk_rc_flags_get_type", ctypes.c_uint, [] )

gtk_rc_token_type_get_type = _rpythonic_function_(		"gtk_rc_token_type_get_type", ctypes.c_uint, [] )

gtk_recent_sort_type_get_type = _rpythonic_function_(		"gtk_recent_sort_type_get_type", ctypes.c_uint, [] )

gtk_recent_chooser_error_get_type = _rpythonic_function_(		"gtk_recent_chooser_error_get_type", ctypes.c_uint, [] )

gtk_recent_filter_flags_get_type = _rpythonic_function_(		"gtk_recent_filter_flags_get_type", ctypes.c_uint, [] )

gtk_recent_manager_error_get_type = _rpythonic_function_(		"gtk_recent_manager_error_get_type", ctypes.c_uint, [] )

gtk_size_group_mode_get_type = _rpythonic_function_(		"gtk_size_group_mode_get_type", ctypes.c_uint, [] )

gtk_spin_button_update_policy_get_type = _rpythonic_function_(		"gtk_spin_button_update_policy_get_type", ctypes.c_uint, [] )

gtk_spin_type_get_type = _rpythonic_function_(		"gtk_spin_type_get_type", ctypes.c_uint, [] )

gtk_text_buffer_target_info_get_type = _rpythonic_function_(		"gtk_text_buffer_target_info_get_type", ctypes.c_uint, [] )

gtk_text_search_flags_get_type = _rpythonic_function_(		"gtk_text_search_flags_get_type", ctypes.c_uint, [] )

gtk_text_window_type_get_type = _rpythonic_function_(		"gtk_text_window_type_get_type", ctypes.c_uint, [] )

gtk_toolbar_space_style_get_type = _rpythonic_function_(		"gtk_toolbar_space_style_get_type", ctypes.c_uint, [] )

gtk_tool_palette_drag_targets_get_type = _rpythonic_function_(		"gtk_tool_palette_drag_targets_get_type", ctypes.c_uint, [] )

gtk_tree_model_flags_get_type = _rpythonic_function_(		"gtk_tree_model_flags_get_type", ctypes.c_uint, [] )

gtk_tree_view_drop_position_get_type = _rpythonic_function_(		"gtk_tree_view_drop_position_get_type", ctypes.c_uint, [] )

gtk_tree_view_column_sizing_get_type = _rpythonic_function_(		"gtk_tree_view_column_sizing_get_type", ctypes.c_uint, [] )

gtk_ui_manager_item_type_get_type = _rpythonic_function_(		"gtk_ui_manager_item_type_get_type", ctypes.c_uint, [] )

gtk_widget_help_type_get_type = _rpythonic_function_(		"gtk_widget_help_type_get_type", ctypes.c_uint, [] )

add_widget = _rpythonic_function_(		"add_widget", ctypes.c_void_p, [
	("manager",		ctypes.POINTER(_GtkUIManager)),
	("widget",		ctypes.POINTER(_GtkWidget)),] )

actions_changed = _rpythonic_function_(		"actions_changed", ctypes.c_void_p, [
	("manager",		ctypes.POINTER(_GtkUIManager)),] )

pre_activate = _rpythonic_function_(		"pre_activate", ctypes.c_void_p, [
	("manager",		ctypes.POINTER(_GtkUIManager)),
	("action",		ctypes.POINTER(_GtkAction)),] )

post_activate = _rpythonic_function_(		"post_activate", ctypes.c_void_p, [
	("manager",		ctypes.POINTER(_GtkUIManager)),
	("action",		ctypes.POINTER(_GtkAction)),] )

get_widget = _rpythonic_function_(		"get_widget", ctypes.POINTER(_GtkWidget), [
	("manager",		ctypes.POINTER(_GtkUIManager)),
	("path",		ctypes.POINTER(ctypes.c_char)),] )

gtk_ui_manager_get_type = _rpythonic_function_(		"gtk_ui_manager_get_type", ctypes.c_uint, [] )

gtk_ui_manager_new = _rpythonic_function_(		"gtk_ui_manager_new", ctypes.POINTER(_GtkUIManager), [] )

gtk_ui_manager_set_add_tearoffs = _rpythonic_function_(		"gtk_ui_manager_set_add_tearoffs", ctypes.c_void_p, [
	("manager",		ctypes.POINTER(_GtkUIManager)),
	("add_tearoffs",		ctypes.c_int),] )

gtk_ui_manager_get_add_tearoffs = _rpythonic_function_(		"gtk_ui_manager_get_add_tearoffs", ctypes.c_int, [
	("manager",		ctypes.POINTER(_GtkUIManager)),] )

gtk_ui_manager_insert_action_group = _rpythonic_function_(		"gtk_ui_manager_insert_action_group", ctypes.c_void_p, [
	("manager",		ctypes.POINTER(_GtkUIManager)),
	("action_group",		ctypes.POINTER(_GtkActionGroup)),
	("pos",		ctypes.c_int),] )

gtk_ui_manager_remove_action_group = _rpythonic_function_(		"gtk_ui_manager_remove_action_group", ctypes.c_void_p, [
	("manager",		ctypes.POINTER(_GtkUIManager)),
	("action_group",		ctypes.POINTER(_GtkActionGroup)),] )

gtk_ui_manager_get_action_groups = _rpythonic_function_(		"gtk_ui_manager_get_action_groups", ctypes.POINTER(_GList), [
	("manager",		ctypes.POINTER(_GtkUIManager)),] )

gtk_ui_manager_get_accel_group = _rpythonic_function_(		"gtk_ui_manager_get_accel_group", ctypes.POINTER(_GtkAccelGroup), [
	("manager",		ctypes.POINTER(_GtkUIManager)),] )

gtk_ui_manager_get_widget = _rpythonic_function_(		"gtk_ui_manager_get_widget", ctypes.POINTER(_GtkWidget), [
	("manager",		ctypes.POINTER(_GtkUIManager)),
	("path",		ctypes.POINTER(ctypes.c_char)),] )

gtk_ui_manager_get_toplevels = _rpythonic_function_(		"gtk_ui_manager_get_toplevels", ctypes.POINTER(_GSList), [
	("manager",		ctypes.POINTER(_GtkUIManager)),
	("types",		ctypes.c_int),] )

gtk_ui_manager_get_action = _rpythonic_function_(		"gtk_ui_manager_get_action", ctypes.POINTER(_GtkAction), [
	("manager",		ctypes.POINTER(_GtkUIManager)),
	("path",		ctypes.POINTER(ctypes.c_char)),] )

gtk_ui_manager_add_ui_from_string = _rpythonic_function_(		"gtk_ui_manager_add_ui_from_string", ctypes.c_uint, [
	("manager",		ctypes.POINTER(_GtkUIManager)),
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_ui_manager_add_ui_from_file = _rpythonic_function_(		"gtk_ui_manager_add_ui_from_file", ctypes.c_uint, [
	("manager",		ctypes.POINTER(_GtkUIManager)),
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

gtk_ui_manager_add_ui = _rpythonic_function_(		"gtk_ui_manager_add_ui", ctypes.c_void_p, [
	("manager",		ctypes.POINTER(_GtkUIManager)),
	("merge_id",		ctypes.c_uint),
	("path",		ctypes.POINTER(ctypes.c_char)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("action",		ctypes.POINTER(ctypes.c_char)),
	("C_type",		ctypes.c_int),
	("top",		ctypes.c_int),] )

gtk_ui_manager_remove_ui = _rpythonic_function_(		"gtk_ui_manager_remove_ui", ctypes.c_void_p, [
	("manager",		ctypes.POINTER(_GtkUIManager)),
	("merge_id",		ctypes.c_uint),] )

gtk_ui_manager_get_ui = _rpythonic_function_(		"gtk_ui_manager_get_ui", ctypes.POINTER(ctypes.c_char), [
	("manager",		ctypes.POINTER(_GtkUIManager)),] )

gtk_ui_manager_ensure_update = _rpythonic_function_(		"gtk_ui_manager_ensure_update", ctypes.c_void_p, [
	("manager",		ctypes.POINTER(_GtkUIManager)),] )

gtk_ui_manager_new_merge_id = _rpythonic_function_(		"gtk_ui_manager_new_merge_id", ctypes.c_uint, [
	("manager",		ctypes.POINTER(_GtkUIManager)),] )

gtk_vbutton_box_get_type = _rpythonic_function_(		"gtk_vbutton_box_get_type", ctypes.c_uint, [] )

gtk_vbutton_box_new = _rpythonic_function_(		"gtk_vbutton_box_new", ctypes.POINTER(_GtkWidget), [] )

gtk_vbox_get_type = _rpythonic_function_(		"gtk_vbox_get_type", ctypes.c_uint, [] )

gtk_vbox_new = _rpythonic_function_(		"gtk_vbox_new", ctypes.POINTER(_GtkWidget), [
	("homogeneous",		ctypes.c_int),
	("spacing",		ctypes.c_int),] )

gtk_viewport_get_type = _rpythonic_function_(		"gtk_viewport_get_type", ctypes.c_uint, [] )

gtk_viewport_new = _rpythonic_function_(		"gtk_viewport_new", ctypes.POINTER(_GtkWidget), [
	("hadjustment",		ctypes.POINTER(_GtkAdjustment)),
	("vadjustment",		ctypes.POINTER(_GtkAdjustment)),] )

gtk_viewport_get_hadjustment = _rpythonic_function_(		"gtk_viewport_get_hadjustment", ctypes.POINTER(_GtkAdjustment), [
	("viewport",		ctypes.POINTER(_GtkViewport)),] )

gtk_viewport_get_vadjustment = _rpythonic_function_(		"gtk_viewport_get_vadjustment", ctypes.POINTER(_GtkAdjustment), [
	("viewport",		ctypes.POINTER(_GtkViewport)),] )

gtk_viewport_set_hadjustment = _rpythonic_function_(		"gtk_viewport_set_hadjustment", ctypes.c_void_p, [
	("viewport",		ctypes.POINTER(_GtkViewport)),
	("adjustment",		ctypes.POINTER(_GtkAdjustment)),] )

gtk_viewport_set_vadjustment = _rpythonic_function_(		"gtk_viewport_set_vadjustment", ctypes.c_void_p, [
	("viewport",		ctypes.POINTER(_GtkViewport)),
	("adjustment",		ctypes.POINTER(_GtkAdjustment)),] )

gtk_viewport_set_shadow_type = _rpythonic_function_(		"gtk_viewport_set_shadow_type", ctypes.c_void_p, [
	("viewport",		ctypes.POINTER(_GtkViewport)),
	("C_type",		ctypes.c_int),] )

gtk_viewport_get_shadow_type = _rpythonic_function_(		"gtk_viewport_get_shadow_type", ctypes.c_int, [
	("viewport",		ctypes.POINTER(_GtkViewport)),] )

gtk_viewport_get_bin_window = _rpythonic_function_(		"gtk_viewport_get_bin_window", ctypes.POINTER(_GdkWindow), [
	("viewport",		ctypes.POINTER(_GtkViewport)),] )

gtk_viewport_get_view_window = _rpythonic_function_(		"gtk_viewport_get_view_window", ctypes.POINTER(_GdkWindow), [
	("viewport",		ctypes.POINTER(_GtkViewport)),] )

gtk_volume_button_get_type = _rpythonic_function_(		"gtk_volume_button_get_type", ctypes.c_uint, [] )

gtk_volume_button_new = _rpythonic_function_(		"gtk_volume_button_new", ctypes.POINTER(_GtkWidget), [] )

gtk_vpaned_get_type = _rpythonic_function_(		"gtk_vpaned_get_type", ctypes.c_uint, [] )

gtk_vpaned_new = _rpythonic_function_(		"gtk_vpaned_new", ctypes.POINTER(_GtkWidget), [] )

gtk_vscale_get_type = _rpythonic_function_(		"gtk_vscale_get_type", ctypes.c_uint, [] )

gtk_vscale_new = _rpythonic_function_(		"gtk_vscale_new", ctypes.POINTER(_GtkWidget), [
	("adjustment",		ctypes.POINTER(_GtkAdjustment)),] )

gtk_vscale_new_with_range = _rpythonic_function_(		"gtk_vscale_new_with_range", ctypes.POINTER(_GtkWidget), [
	("min",		ctypes.c_double),
	("max",		ctypes.c_double),
	("step",		ctypes.c_double),] )

gtk_vscrollbar_get_type = _rpythonic_function_(		"gtk_vscrollbar_get_type", ctypes.c_uint, [] )

gtk_vscrollbar_new = _rpythonic_function_(		"gtk_vscrollbar_new", ctypes.POINTER(_GtkWidget), [
	("adjustment",		ctypes.POINTER(_GtkAdjustment)),] )

gtk_vseparator_get_type = _rpythonic_function_(		"gtk_vseparator_get_type", ctypes.c_uint, [] )

gtk_vseparator_new = _rpythonic_function_(		"gtk_vseparator_new", ctypes.POINTER(_GtkWidget), [] )

EelPredicateFunction = _rpythonic_function_(		"EelPredicateFunction", ctypes.c_int, [
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

eel_g_lists_sort_and_check_for_intersection = _rpythonic_function_(		"eel_g_lists_sort_and_check_for_intersection", ctypes.c_int, [
	("list_a",		ctypes.POINTER(ctypes.POINTER(_GList))),
	("list_b",		ctypes.POINTER(ctypes.POINTER(_GList))),] )

eel_g_list_partition = _rpythonic_function_(		"eel_g_list_partition", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("predicate",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("removed",		ctypes.POINTER(ctypes.POINTER(_GList))),] )

eel_g_str_list_equal = _rpythonic_function_(		"eel_g_str_list_equal", ctypes.c_int, [
	("str_list_a",		ctypes.POINTER(_GList)),
	("str_list_b",		ctypes.POINTER(_GList)),] )

eel_g_str_list_copy = _rpythonic_function_(		"eel_g_str_list_copy", ctypes.POINTER(_GList), [
	("str_list",		ctypes.POINTER(_GList)),] )

eel_g_object_list_copy = _rpythonic_function_(		"eel_g_object_list_copy", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),] )

eel_g_hash_table_safe_for_each = _rpythonic_function_(		"eel_g_hash_table_safe_for_each", ctypes.c_void_p, [
	("hash_table",		ctypes.POINTER(_GHashTable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

eel_g_strv_equal = _rpythonic_function_(		"eel_g_strv_equal", ctypes.c_int, [
	("a",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("b",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

contents_changed = _rpythonic_function_(		"contents_changed", ctypes.c_void_p, [
	("bookmark",		ctypes.POINTER(NautilusBookmark)),] )

nautilus_bookmark_get_type = _rpythonic_function_(		"nautilus_bookmark_get_type", ctypes.c_uint, [] )

nautilus_bookmark_new = _rpythonic_function_(		"nautilus_bookmark_new", ctypes.POINTER(NautilusBookmark), [
	("location",		ctypes.POINTER(_GFile)),
	("custom_name",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.POINTER(_GIcon)),] )

nautilus_bookmark_copy = _rpythonic_function_(		"nautilus_bookmark_copy", ctypes.POINTER(NautilusBookmark), [
	("bookmark",		ctypes.POINTER(NautilusBookmark)),] )

nautilus_bookmark_get_name = _rpythonic_function_(		"nautilus_bookmark_get_name", ctypes.POINTER(ctypes.c_char), [
	("bookmark",		ctypes.POINTER(NautilusBookmark)),] )

nautilus_bookmark_get_location = _rpythonic_function_(		"nautilus_bookmark_get_location", ctypes.POINTER(_GFile), [
	("bookmark",		ctypes.POINTER(NautilusBookmark)),] )

nautilus_bookmark_get_uri = _rpythonic_function_(		"nautilus_bookmark_get_uri", ctypes.POINTER(ctypes.c_char), [
	("bookmark",		ctypes.POINTER(NautilusBookmark)),] )

nautilus_bookmark_get_icon = _rpythonic_function_(		"nautilus_bookmark_get_icon", ctypes.POINTER(_GIcon), [
	("bookmark",		ctypes.POINTER(NautilusBookmark)),] )

nautilus_bookmark_get_has_custom_name = _rpythonic_function_(		"nautilus_bookmark_get_has_custom_name", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(NautilusBookmark)),] )

nautilus_bookmark_set_custom_name = _rpythonic_function_(		"nautilus_bookmark_set_custom_name", ctypes.c_void_p, [
	("bookmark",		ctypes.POINTER(NautilusBookmark)),
	("new_name",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_bookmark_uri_known_not_to_exist = _rpythonic_function_(		"nautilus_bookmark_uri_known_not_to_exist", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(NautilusBookmark)),] )

nautilus_bookmark_compare_with = _rpythonic_function_(		"nautilus_bookmark_compare_with", ctypes.c_int, [
	("a",		ctypes.POINTER(ctypes.c_void_p)),
	("b",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_bookmark_compare_uris = _rpythonic_function_(		"nautilus_bookmark_compare_uris", ctypes.c_int, [
	("a",		ctypes.POINTER(ctypes.c_void_p)),
	("b",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_bookmark_set_scroll_pos = _rpythonic_function_(		"nautilus_bookmark_set_scroll_pos", ctypes.c_void_p, [
	("bookmark",		ctypes.POINTER(NautilusBookmark)),
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_bookmark_get_scroll_pos = _rpythonic_function_(		"nautilus_bookmark_get_scroll_pos", ctypes.POINTER(ctypes.c_char), [
	("bookmark",		ctypes.POINTER(NautilusBookmark)),] )

nautilus_bookmark_menu_item_new = _rpythonic_function_(		"nautilus_bookmark_menu_item_new", ctypes.POINTER(_GtkWidget), [
	("bookmark",		ctypes.POINTER(NautilusBookmark)),] )

NautilusDirectoryCallback = _rpythonic_function_(		"NautilusDirectoryCallback", ctypes.c_void_p, [
	("directory",		ctypes.POINTER(NautilusDirectory)),
	("files",		ctypes.POINTER(_GList)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

files_added = _rpythonic_function_(		"files_added", ctypes.c_void_p, [
	("directory",		ctypes.POINTER(NautilusDirectory)),
	("added_files",		ctypes.POINTER(_GList)),] )

files_changed = _rpythonic_function_(		"files_changed", ctypes.c_void_p, [
	("directory",		ctypes.POINTER(NautilusDirectory)),
	("changed_files",		ctypes.POINTER(_GList)),] )

done_loading = _rpythonic_function_(		"done_loading", ctypes.c_void_p, [
	("directory",		ctypes.POINTER(NautilusDirectory)),] )

load_error = _rpythonic_function_(		"load_error", ctypes.c_void_p, [
	("directory",		ctypes.POINTER(NautilusDirectory)),
	("error",		ctypes.POINTER(_GError)),] )

contains_file = _rpythonic_function_(		"contains_file", ctypes.c_int, [
	("directory",		ctypes.POINTER(NautilusDirectory)),
	("file",		ctypes.POINTER(NautilusFile)),] )

call_when_ready = _rpythonic_function_(		"call_when_ready", ctypes.c_void_p, [
	("directory",		ctypes.POINTER(NautilusDirectory)),
	("file_attributes",		ctypes.c_int),
	("wait_for_file_list",		ctypes.c_int),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(NautilusDirectory),ctypes.POINTER(_GList),ctypes.POINTER(ctypes.c_void_p),)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

cancel_callback = _rpythonic_function_(		"cancel_callback", ctypes.c_void_p, [
	("directory",		ctypes.POINTER(NautilusDirectory)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(NautilusDirectory),ctypes.POINTER(_GList),ctypes.POINTER(ctypes.c_void_p),)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

file_monitor_add = _rpythonic_function_(		"file_monitor_add", ctypes.c_void_p, [
	("directory",		ctypes.POINTER(NautilusDirectory)),
	("client",		ctypes.POINTER(ctypes.c_void_p)),
	("monitor_hidden_files",		ctypes.c_int),
	("monitor_attributes",		ctypes.c_int),
	("initial_files_callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(NautilusDirectory),ctypes.POINTER(_GList),ctypes.POINTER(ctypes.c_void_p),)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

file_monitor_remove = _rpythonic_function_(		"file_monitor_remove", ctypes.c_void_p, [
	("directory",		ctypes.POINTER(NautilusDirectory)),
	("client",		ctypes.POINTER(ctypes.c_void_p)),] )

force_reload = _rpythonic_function_(		"force_reload", ctypes.c_void_p, [
	("directory",		ctypes.POINTER(NautilusDirectory)),] )

are_all_files_seen = _rpythonic_function_(		"are_all_files_seen", ctypes.c_int, [
	("directory",		ctypes.POINTER(NautilusDirectory)),] )

is_not_empty = _rpythonic_function_(		"is_not_empty", ctypes.c_int, [
	("directory",		ctypes.POINTER(NautilusDirectory)),] )

get_file_list = _rpythonic_function_(		"get_file_list", ctypes.POINTER(_GList), [
	("directory",		ctypes.POINTER(NautilusDirectory)),] )

is_editable = _rpythonic_function_(		"is_editable", ctypes.c_int, [
	("directory",		ctypes.POINTER(NautilusDirectory)),] )

nautilus_directory_get_type = _rpythonic_function_(		"nautilus_directory_get_type", ctypes.c_uint, [] )

nautilus_directory_get = _rpythonic_function_(		"nautilus_directory_get", ctypes.POINTER(NautilusDirectory), [
	("location",		ctypes.POINTER(_GFile)),] )

nautilus_directory_get_by_uri = _rpythonic_function_(		"nautilus_directory_get_by_uri", ctypes.POINTER(NautilusDirectory), [
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_directory_get_for_file = _rpythonic_function_(		"nautilus_directory_get_for_file", ctypes.POINTER(NautilusDirectory), [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_directory_ref = _rpythonic_function_(		"nautilus_directory_ref", ctypes.POINTER(NautilusDirectory), [
	("directory",		ctypes.POINTER(NautilusDirectory)),] )

nautilus_directory_unref = _rpythonic_function_(		"nautilus_directory_unref", ctypes.c_void_p, [
	("directory",		ctypes.POINTER(NautilusDirectory)),] )

nautilus_directory_get_uri = _rpythonic_function_(		"nautilus_directory_get_uri", ctypes.POINTER(ctypes.c_char), [
	("directory",		ctypes.POINTER(NautilusDirectory)),] )

nautilus_directory_get_location = _rpythonic_function_(		"nautilus_directory_get_location", ctypes.POINTER(_GFile), [
	("directory",		ctypes.POINTER(NautilusDirectory)),] )

nautilus_directory_contains_file = _rpythonic_function_(		"nautilus_directory_contains_file", ctypes.c_int, [
	("directory",		ctypes.POINTER(NautilusDirectory)),
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_directory_get_file_uri = _rpythonic_function_(		"nautilus_directory_get_file_uri", ctypes.POINTER(ctypes.c_char), [
	("directory",		ctypes.POINTER(NautilusDirectory)),
	("file_name",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_directory_get_corresponding_file = _rpythonic_function_(		"nautilus_directory_get_corresponding_file", ctypes.POINTER(NautilusFile), [
	("directory",		ctypes.POINTER(NautilusDirectory)),] )

nautilus_directory_call_when_ready = _rpythonic_function_(		"nautilus_directory_call_when_ready", ctypes.c_void_p, [
	("directory",		ctypes.POINTER(NautilusDirectory)),
	("file_attributes",		ctypes.c_int),
	("wait_for_all_files",		ctypes.c_int),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(NautilusDirectory),ctypes.POINTER(_GList),ctypes.POINTER(ctypes.c_void_p),)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_directory_cancel_callback = _rpythonic_function_(		"nautilus_directory_cancel_callback", ctypes.c_void_p, [
	("directory",		ctypes.POINTER(NautilusDirectory)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(NautilusDirectory),ctypes.POINTER(_GList),ctypes.POINTER(ctypes.c_void_p),)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_directory_file_monitor_add = _rpythonic_function_(		"nautilus_directory_file_monitor_add", ctypes.c_void_p, [
	("directory",		ctypes.POINTER(NautilusDirectory)),
	("client",		ctypes.POINTER(ctypes.c_void_p)),
	("monitor_hidden_files",		ctypes.c_int),
	("attributes",		ctypes.c_int),
	("initial_files_callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(NautilusDirectory),ctypes.POINTER(_GList),ctypes.POINTER(ctypes.c_void_p),)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_directory_file_monitor_remove = _rpythonic_function_(		"nautilus_directory_file_monitor_remove", ctypes.c_void_p, [
	("directory",		ctypes.POINTER(NautilusDirectory)),
	("client",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_directory_force_reload = _rpythonic_function_(		"nautilus_directory_force_reload", ctypes.c_void_p, [
	("directory",		ctypes.POINTER(NautilusDirectory)),] )

nautilus_directory_get_file_list = _rpythonic_function_(		"nautilus_directory_get_file_list", ctypes.POINTER(_GList), [
	("directory",		ctypes.POINTER(NautilusDirectory)),] )

nautilus_directory_match_pattern = _rpythonic_function_(		"nautilus_directory_match_pattern", ctypes.POINTER(_GList), [
	("directory",		ctypes.POINTER(NautilusDirectory)),
	("glob",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_directory_are_all_files_seen = _rpythonic_function_(		"nautilus_directory_are_all_files_seen", ctypes.c_int, [
	("directory",		ctypes.POINTER(NautilusDirectory)),] )

nautilus_directory_is_local = _rpythonic_function_(		"nautilus_directory_is_local", ctypes.c_int, [
	("directory",		ctypes.POINTER(NautilusDirectory)),] )

nautilus_directory_is_in_trash = _rpythonic_function_(		"nautilus_directory_is_in_trash", ctypes.c_int, [
	("directory",		ctypes.POINTER(NautilusDirectory)),] )

nautilus_directory_is_not_empty = _rpythonic_function_(		"nautilus_directory_is_not_empty", ctypes.c_int, [
	("directory",		ctypes.POINTER(NautilusDirectory)),] )

nautilus_directory_list_ref = _rpythonic_function_(		"nautilus_directory_list_ref", ctypes.POINTER(_GList), [
	("directory_list",		ctypes.POINTER(_GList)),] )

nautilus_directory_list_unref = _rpythonic_function_(		"nautilus_directory_list_unref", ctypes.c_void_p, [
	("directory_list",		ctypes.POINTER(_GList)),] )

nautilus_directory_list_free = _rpythonic_function_(		"nautilus_directory_list_free", ctypes.c_void_p, [
	("directory_list",		ctypes.POINTER(_GList)),] )

nautilus_directory_list_copy = _rpythonic_function_(		"nautilus_directory_list_copy", ctypes.POINTER(_GList), [
	("directory_list",		ctypes.POINTER(_GList)),] )

nautilus_directory_list_sort_by_uri = _rpythonic_function_(		"nautilus_directory_list_sort_by_uri", ctypes.POINTER(_GList), [
	("directory_list",		ctypes.POINTER(_GList)),] )

nautilus_directory_is_desktop_directory = _rpythonic_function_(		"nautilus_directory_is_desktop_directory", ctypes.c_int, [
	("directory",		ctypes.POINTER(NautilusDirectory)),] )

nautilus_directory_is_editable = _rpythonic_function_(		"nautilus_directory_is_editable", ctypes.c_int, [
	("directory",		ctypes.POINTER(NautilusDirectory)),] )

nautilus_query_get_type = _rpythonic_function_(		"nautilus_query_get_type", ctypes.c_uint, [] )

nautilus_query_enabled = _rpythonic_function_(		"nautilus_query_enabled", ctypes.c_int, [] )

nautilus_query_new = _rpythonic_function_(		"nautilus_query_new", ctypes.POINTER(NautilusQuery), [] )

nautilus_query_get_text = _rpythonic_function_(		"nautilus_query_get_text", ctypes.POINTER(ctypes.c_char), [
	("query",		ctypes.POINTER(NautilusQuery)),] )

nautilus_query_set_text = _rpythonic_function_(		"nautilus_query_set_text", ctypes.c_void_p, [
	("query",		ctypes.POINTER(NautilusQuery)),
	("text",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_query_get_location = _rpythonic_function_(		"nautilus_query_get_location", ctypes.POINTER(ctypes.c_char), [
	("query",		ctypes.POINTER(NautilusQuery)),] )

nautilus_query_set_location = _rpythonic_function_(		"nautilus_query_set_location", ctypes.c_void_p, [
	("query",		ctypes.POINTER(NautilusQuery)),
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_query_get_mime_types = _rpythonic_function_(		"nautilus_query_get_mime_types", ctypes.POINTER(_GList), [
	("query",		ctypes.POINTER(NautilusQuery)),] )

nautilus_query_set_mime_types = _rpythonic_function_(		"nautilus_query_set_mime_types", ctypes.c_void_p, [
	("query",		ctypes.POINTER(NautilusQuery)),
	("mime_types",		ctypes.POINTER(_GList)),] )

nautilus_query_add_mime_type = _rpythonic_function_(		"nautilus_query_add_mime_type", ctypes.c_void_p, [
	("query",		ctypes.POINTER(NautilusQuery)),
	("mime_type",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_query_to_readable_string = _rpythonic_function_(		"nautilus_query_to_readable_string", ctypes.POINTER(ctypes.c_char), [
	("query",		ctypes.POINTER(NautilusQuery)),] )

nautilus_query_load = _rpythonic_function_(		"nautilus_query_load", ctypes.POINTER(NautilusQuery), [
	("file",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_query_save = _rpythonic_function_(		"nautilus_query_save", ctypes.c_int, [
	("query",		ctypes.POINTER(NautilusQuery)),
	("file",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_search_directory_get_type = _rpythonic_function_(		"nautilus_search_directory_get_type", ctypes.c_uint, [] )

nautilus_search_directory_generate_new_uri = _rpythonic_function_(		"nautilus_search_directory_generate_new_uri", ctypes.POINTER(ctypes.c_char), [] )

nautilus_search_directory_new_from_saved_search = _rpythonic_function_(		"nautilus_search_directory_new_from_saved_search", ctypes.POINTER(NautilusSearchDirectory), [
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_search_directory_is_saved_search = _rpythonic_function_(		"nautilus_search_directory_is_saved_search", ctypes.c_int, [
	("search",		ctypes.POINTER(NautilusSearchDirectory)),] )

nautilus_search_directory_is_modified = _rpythonic_function_(		"nautilus_search_directory_is_modified", ctypes.c_int, [
	("search",		ctypes.POINTER(NautilusSearchDirectory)),] )

nautilus_search_directory_save_search = _rpythonic_function_(		"nautilus_search_directory_save_search", ctypes.c_void_p, [
	("search",		ctypes.POINTER(NautilusSearchDirectory)),] )

nautilus_search_directory_save_to_file = _rpythonic_function_(		"nautilus_search_directory_save_to_file", ctypes.c_void_p, [
	("search",		ctypes.POINTER(NautilusSearchDirectory)),
	("save_file_uri",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_search_directory_get_query = _rpythonic_function_(		"nautilus_search_directory_get_query", ctypes.POINTER(NautilusQuery), [
	("search",		ctypes.POINTER(NautilusSearchDirectory)),] )

nautilus_search_directory_set_query = _rpythonic_function_(		"nautilus_search_directory_set_query", ctypes.c_void_p, [
	("search",		ctypes.POINTER(NautilusSearchDirectory)),
	("query",		ctypes.POINTER(NautilusQuery)),] )

nautilus_navigation_state_get_type = _rpythonic_function_(		"nautilus_navigation_state_get_type", ctypes.c_uint, [] )

nautilus_navigation_state_new = _rpythonic_function_(		"nautilus_navigation_state_new", ctypes.POINTER(_NautilusNavigationState), [
	("slave",		ctypes.POINTER(_GtkActionGroup)),
	("action_names",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

nautilus_navigation_state_add_group = _rpythonic_function_(		"nautilus_navigation_state_add_group", ctypes.c_void_p, [
	("state",		ctypes.POINTER(_NautilusNavigationState)),
	("group",		ctypes.POINTER(_GtkActionGroup)),] )

nautilus_navigation_state_set_master = _rpythonic_function_(		"nautilus_navigation_state_set_master", ctypes.c_void_p, [
	("state",		ctypes.POINTER(_NautilusNavigationState)),
	("master",		ctypes.POINTER(_GtkActionGroup)),] )

nautilus_navigation_state_get_master = _rpythonic_function_(		"nautilus_navigation_state_get_master", ctypes.POINTER(_GtkActionGroup), [
	("C_self",		ctypes.POINTER(_NautilusNavigationState)),] )

nautilus_navigation_state_sync_all = _rpythonic_function_(		"nautilus_navigation_state_sync_all", ctypes.c_void_p, [
	("state",		ctypes.POINTER(_NautilusNavigationState)),] )

nautilus_navigation_state_set_boolean = _rpythonic_function_(		"nautilus_navigation_state_set_boolean", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_NautilusNavigationState)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_int),] )

nautilus_icon_info_get_type = _rpythonic_function_(		"nautilus_icon_info_get_type", ctypes.c_uint, [] )

nautilus_icon_info_new_for_pixbuf = _rpythonic_function_(		"nautilus_icon_info_new_for_pixbuf", ctypes.POINTER(_NautilusIconInfo), [
	("pixbuf",		ctypes.POINTER(_GdkPixbuf)),] )

nautilus_icon_info_lookup = _rpythonic_function_(		"nautilus_icon_info_lookup", ctypes.POINTER(_NautilusIconInfo), [
	("icon",		ctypes.POINTER(_GIcon)),
	("size",		ctypes.c_int),] )

nautilus_icon_info_lookup_from_name = _rpythonic_function_(		"nautilus_icon_info_lookup_from_name", ctypes.POINTER(_NautilusIconInfo), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_int),] )

nautilus_icon_info_lookup_from_path = _rpythonic_function_(		"nautilus_icon_info_lookup_from_path", ctypes.POINTER(_NautilusIconInfo), [
	("path",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_int),] )

nautilus_icon_info_is_fallback = _rpythonic_function_(		"nautilus_icon_info_is_fallback", ctypes.c_int, [
	("icon",		ctypes.POINTER(_NautilusIconInfo)),] )

nautilus_icon_info_get_pixbuf = _rpythonic_function_(		"nautilus_icon_info_get_pixbuf", ctypes.POINTER(_GdkPixbuf), [
	("icon",		ctypes.POINTER(_NautilusIconInfo)),] )

nautilus_icon_info_get_pixbuf_nodefault = _rpythonic_function_(		"nautilus_icon_info_get_pixbuf_nodefault", ctypes.POINTER(_GdkPixbuf), [
	("icon",		ctypes.POINTER(_NautilusIconInfo)),] )

nautilus_icon_info_get_pixbuf_nodefault_at_size = _rpythonic_function_(		"nautilus_icon_info_get_pixbuf_nodefault_at_size", ctypes.POINTER(_GdkPixbuf), [
	("icon",		ctypes.POINTER(_NautilusIconInfo)),
	("forced_size",		ctypes.c_uint),] )

nautilus_icon_info_get_pixbuf_at_size = _rpythonic_function_(		"nautilus_icon_info_get_pixbuf_at_size", ctypes.POINTER(_GdkPixbuf), [
	("icon",		ctypes.POINTER(_NautilusIconInfo)),
	("forced_size",		ctypes.c_uint),] )

nautilus_icon_info_get_embedded_rect = _rpythonic_function_(		"nautilus_icon_info_get_embedded_rect", ctypes.c_int, [
	("icon",		ctypes.POINTER(_NautilusIconInfo)),
	("rectangle",		ctypes.POINTER(_cairo_rectangle_int)),] )

nautilus_icon_info_get_attach_points = _rpythonic_function_(		"nautilus_icon_info_get_attach_points", ctypes.c_int, [
	("icon",		ctypes.POINTER(_NautilusIconInfo)),
	("points",		ctypes.POINTER(ctypes.POINTER(_GdkPoint))),
	("n_points",		ctypes.POINTER(ctypes.c_int)),] )

nautilus_icon_info_get_display_name = _rpythonic_function_(		"nautilus_icon_info_get_display_name", ctypes.POINTER(ctypes.c_char), [
	("icon",		ctypes.POINTER(_NautilusIconInfo)),] )

nautilus_icon_info_get_used_name = _rpythonic_function_(		"nautilus_icon_info_get_used_name", ctypes.POINTER(ctypes.c_char), [
	("icon",		ctypes.POINTER(_NautilusIconInfo)),] )

nautilus_icon_info_clear_caches = _rpythonic_function_(		"nautilus_icon_info_clear_caches", ctypes.c_void_p, [] )

nautilus_get_icon_size_for_zoom_level = _rpythonic_function_(		"nautilus_get_icon_size_for_zoom_level", ctypes.c_uint, [
	("zoom_level",		ctypes.c_int),] )

nautilus_get_icon_size_for_stock_size = _rpythonic_function_(		"nautilus_get_icon_size_for_stock_size", ctypes.c_int, [
	("size",		ctypes.c_int),] )

nautilus_icon_get_emblem_size_for_icon_size = _rpythonic_function_(		"nautilus_icon_get_emblem_size_for_icon_size", ctypes.c_uint, [
	("size",		ctypes.c_uint),] )

nautilus_icon_theme_can_render = _rpythonic_function_(		"nautilus_icon_theme_can_render", ctypes.c_int, [
	("icon",		ctypes.POINTER(_GThemedIcon)),] )

nautilus_user_special_directory_get_gicon = _rpythonic_function_(		"nautilus_user_special_directory_get_gicon", ctypes.POINTER(_GIcon), [
	("directory",		ctypes.c_int),] )

NautilusFileCallback = _rpythonic_function_(		"NautilusFileCallback", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

NautilusFileListCallback = _rpythonic_function_(		"NautilusFileListCallback", ctypes.c_void_p, [
	("file_list",		ctypes.POINTER(_GList)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

NautilusFileOperationCallback = _rpythonic_function_(		"NautilusFileOperationCallback", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),
	("result_location",		ctypes.POINTER(_GFile)),
	("error",		ctypes.POINTER(_GError)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

NautilusWidthMeasureCallback = _rpythonic_function_(		"NautilusWidthMeasureCallback", ctypes.c_int, [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("context",		ctypes.POINTER(ctypes.c_void_p)),] )

NautilusTruncateCallback = _rpythonic_function_(		"NautilusTruncateCallback", ctypes.POINTER(ctypes.c_char), [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("width",		ctypes.c_int),
	("context",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_file_get_type = _rpythonic_function_(		"nautilus_file_get_type", ctypes.c_uint, [] )

nautilus_file_get = _rpythonic_function_(		"nautilus_file_get", ctypes.POINTER(NautilusFile), [
	("location",		ctypes.POINTER(_GFile)),] )

nautilus_file_get_by_uri = _rpythonic_function_(		"nautilus_file_get_by_uri", ctypes.POINTER(NautilusFile), [
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_file_get_existing = _rpythonic_function_(		"nautilus_file_get_existing", ctypes.POINTER(NautilusFile), [
	("location",		ctypes.POINTER(_GFile)),] )

nautilus_file_get_existing_by_uri = _rpythonic_function_(		"nautilus_file_get_existing_by_uri", ctypes.POINTER(NautilusFile), [
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_file_ref = _rpythonic_function_(		"nautilus_file_ref", ctypes.POINTER(NautilusFile), [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_unref = _rpythonic_function_(		"nautilus_file_unref", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_monitor_add = _rpythonic_function_(		"nautilus_file_monitor_add", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),
	("client",		ctypes.POINTER(ctypes.c_void_p)),
	("attributes",		ctypes.c_int),] )

nautilus_file_monitor_remove = _rpythonic_function_(		"nautilus_file_monitor_remove", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),
	("client",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_file_call_when_ready = _rpythonic_function_(		"nautilus_file_call_when_ready", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),
	("attributes",		ctypes.c_int),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(NautilusFile),ctypes.POINTER(ctypes.c_void_p),)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_file_cancel_call_when_ready = _rpythonic_function_(		"nautilus_file_cancel_call_when_ready", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(NautilusFile),ctypes.POINTER(ctypes.c_void_p),)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_file_check_if_ready = _rpythonic_function_(		"nautilus_file_check_if_ready", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),
	("attributes",		ctypes.c_int),] )

nautilus_file_invalidate_attributes = _rpythonic_function_(		"nautilus_file_invalidate_attributes", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),
	("attributes",		ctypes.c_int),] )

nautilus_file_invalidate_all_attributes = _rpythonic_function_(		"nautilus_file_invalidate_all_attributes", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_contains_text = _rpythonic_function_(		"nautilus_file_contains_text", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_get_display_name = _rpythonic_function_(		"nautilus_file_get_display_name", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_get_edit_name = _rpythonic_function_(		"nautilus_file_get_edit_name", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_get_name = _rpythonic_function_(		"nautilus_file_get_name", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_get_location = _rpythonic_function_(		"nautilus_file_get_location", ctypes.POINTER(_GFile), [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_get_description = _rpythonic_function_(		"nautilus_file_get_description", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_get_uri = _rpythonic_function_(		"nautilus_file_get_uri", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_get_uri_scheme = _rpythonic_function_(		"nautilus_file_get_uri_scheme", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_get_parent = _rpythonic_function_(		"nautilus_file_get_parent", ctypes.POINTER(NautilusFile), [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_get_parent_location = _rpythonic_function_(		"nautilus_file_get_parent_location", ctypes.POINTER(_GFile), [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_get_parent_uri = _rpythonic_function_(		"nautilus_file_get_parent_uri", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_get_parent_uri_for_display = _rpythonic_function_(		"nautilus_file_get_parent_uri_for_display", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_can_get_size = _rpythonic_function_(		"nautilus_file_can_get_size", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_get_size = _rpythonic_function_(		"nautilus_file_get_size", ctypes.c_longlong, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_get_mtime = _rpythonic_function_(		"nautilus_file_get_mtime", ctypes.c_int64, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_get_file_type = _rpythonic_function_(		"nautilus_file_get_file_type", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_get_mime_type = _rpythonic_function_(		"nautilus_file_get_mime_type", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_is_mime_type = _rpythonic_function_(		"nautilus_file_is_mime_type", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),
	("mime_type",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_file_is_launchable = _rpythonic_function_(		"nautilus_file_is_launchable", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_is_symbolic_link = _rpythonic_function_(		"nautilus_file_is_symbolic_link", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_is_mountpoint = _rpythonic_function_(		"nautilus_file_is_mountpoint", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_get_mount = _rpythonic_function_(		"nautilus_file_get_mount", ctypes.POINTER(_GMount), [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_get_volume_free_space = _rpythonic_function_(		"nautilus_file_get_volume_free_space", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_get_volume_name = _rpythonic_function_(		"nautilus_file_get_volume_name", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_get_symbolic_link_target_path = _rpythonic_function_(		"nautilus_file_get_symbolic_link_target_path", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_get_symbolic_link_target_uri = _rpythonic_function_(		"nautilus_file_get_symbolic_link_target_uri", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_is_broken_symbolic_link = _rpythonic_function_(		"nautilus_file_is_broken_symbolic_link", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_is_nautilus_link = _rpythonic_function_(		"nautilus_file_is_nautilus_link", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_is_executable = _rpythonic_function_(		"nautilus_file_is_executable", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_is_directory = _rpythonic_function_(		"nautilus_file_is_directory", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_is_user_special_directory = _rpythonic_function_(		"nautilus_file_is_user_special_directory", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),
	("special_directory",		ctypes.c_int),] )

nautilus_file_is_archive = _rpythonic_function_(		"nautilus_file_is_archive", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_is_in_trash = _rpythonic_function_(		"nautilus_file_is_in_trash", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_is_in_desktop = _rpythonic_function_(		"nautilus_file_is_in_desktop", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_is_home = _rpythonic_function_(		"nautilus_file_is_home", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_is_desktop_directory = _rpythonic_function_(		"nautilus_file_is_desktop_directory", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_get_file_info_error = _rpythonic_function_(		"nautilus_file_get_file_info_error", ctypes.POINTER(_GError), [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_get_directory_item_count = _rpythonic_function_(		"nautilus_file_get_directory_item_count", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),
	("count",		ctypes.POINTER(ctypes.c_uint)),
	("count_unreadable",		ctypes.POINTER(ctypes.c_int)),] )

nautilus_file_recompute_deep_counts = _rpythonic_function_(		"nautilus_file_recompute_deep_counts", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_get_deep_counts = _rpythonic_function_(		"nautilus_file_get_deep_counts", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),
	("directory_count",		ctypes.POINTER(ctypes.c_uint)),
	("file_count",		ctypes.POINTER(ctypes.c_uint)),
	("unreadable_directory_count",		ctypes.POINTER(ctypes.c_uint)),
	("total_size",		ctypes.POINTER(ctypes.c_longlong)),
	("force",		ctypes.c_int),] )

nautilus_file_should_show_thumbnail = _rpythonic_function_(		"nautilus_file_should_show_thumbnail", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_should_show_directory_item_count = _rpythonic_function_(		"nautilus_file_should_show_directory_item_count", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_should_show_type = _rpythonic_function_(		"nautilus_file_should_show_type", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_get_emblem_icons = _rpythonic_function_(		"nautilus_file_get_emblem_icons", ctypes.POINTER(_GList), [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_get_top_left_text = _rpythonic_function_(		"nautilus_file_get_top_left_text", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_peek_top_left_text = _rpythonic_function_(		"nautilus_file_peek_top_left_text", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(NautilusFile)),
	("need_large_text",		ctypes.c_int),
	("got_top_left_text",		ctypes.POINTER(ctypes.c_int)),] )

nautilus_file_get_directory_item_mime_types = _rpythonic_function_(		"nautilus_file_get_directory_item_mime_types", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),
	("mime_list",		ctypes.POINTER(ctypes.POINTER(_GList))),] )

nautilus_file_set_attributes = _rpythonic_function_(		"nautilus_file_set_attributes", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),
	("attributes",		ctypes.POINTER(_GFileInfo)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(NautilusFile),ctypes.POINTER(_GFile),ctypes.POINTER(_GError),ctypes.POINTER(ctypes.c_void_p),)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_file_get_filesystem_use_preview = _rpythonic_function_(		"nautilus_file_get_filesystem_use_preview", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_get_filesystem_id = _rpythonic_function_(		"nautilus_file_get_filesystem_id", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_get_trash_original_file = _rpythonic_function_(		"nautilus_file_get_trash_original_file", ctypes.POINTER(NautilusFile), [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_can_get_permissions = _rpythonic_function_(		"nautilus_file_can_get_permissions", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_can_set_permissions = _rpythonic_function_(		"nautilus_file_can_set_permissions", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_get_permissions = _rpythonic_function_(		"nautilus_file_get_permissions", ctypes.c_uint, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_can_get_owner = _rpythonic_function_(		"nautilus_file_can_get_owner", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_can_set_owner = _rpythonic_function_(		"nautilus_file_can_set_owner", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_can_get_group = _rpythonic_function_(		"nautilus_file_can_get_group", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_can_set_group = _rpythonic_function_(		"nautilus_file_can_set_group", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_get_owner_name = _rpythonic_function_(		"nautilus_file_get_owner_name", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_get_group_name = _rpythonic_function_(		"nautilus_file_get_group_name", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_get_user_names = _rpythonic_function_(		"nautilus_get_user_names", ctypes.POINTER(_GList), [] )

nautilus_get_all_group_names = _rpythonic_function_(		"nautilus_get_all_group_names", ctypes.POINTER(_GList), [] )

nautilus_file_get_settable_group_names = _rpythonic_function_(		"nautilus_file_get_settable_group_names", ctypes.POINTER(_GList), [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_can_get_selinux_context = _rpythonic_function_(		"nautilus_file_can_get_selinux_context", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_get_selinux_context = _rpythonic_function_(		"nautilus_file_get_selinux_context", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_can_read = _rpythonic_function_(		"nautilus_file_can_read", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_can_write = _rpythonic_function_(		"nautilus_file_can_write", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_can_execute = _rpythonic_function_(		"nautilus_file_can_execute", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_can_rename = _rpythonic_function_(		"nautilus_file_can_rename", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_can_delete = _rpythonic_function_(		"nautilus_file_can_delete", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_can_trash = _rpythonic_function_(		"nautilus_file_can_trash", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_can_mount = _rpythonic_function_(		"nautilus_file_can_mount", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_can_unmount = _rpythonic_function_(		"nautilus_file_can_unmount", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_can_eject = _rpythonic_function_(		"nautilus_file_can_eject", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_can_start = _rpythonic_function_(		"nautilus_file_can_start", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_can_start_degraded = _rpythonic_function_(		"nautilus_file_can_start_degraded", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_can_stop = _rpythonic_function_(		"nautilus_file_can_stop", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_get_start_stop_type = _rpythonic_function_(		"nautilus_file_get_start_stop_type", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_can_poll_for_media = _rpythonic_function_(		"nautilus_file_can_poll_for_media", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_is_media_check_automatic = _rpythonic_function_(		"nautilus_file_is_media_check_automatic", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_mount = _rpythonic_function_(		"nautilus_file_mount", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),
	("mount_op",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(NautilusFile),ctypes.POINTER(_GFile),ctypes.POINTER(_GError),ctypes.POINTER(ctypes.c_void_p),)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_file_unmount = _rpythonic_function_(		"nautilus_file_unmount", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),
	("mount_op",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(NautilusFile),ctypes.POINTER(_GFile),ctypes.POINTER(_GError),ctypes.POINTER(ctypes.c_void_p),)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_file_eject = _rpythonic_function_(		"nautilus_file_eject", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),
	("mount_op",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(NautilusFile),ctypes.POINTER(_GFile),ctypes.POINTER(_GError),ctypes.POINTER(ctypes.c_void_p),)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_file_start = _rpythonic_function_(		"nautilus_file_start", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),
	("start_op",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(NautilusFile),ctypes.POINTER(_GFile),ctypes.POINTER(_GError),ctypes.POINTER(ctypes.c_void_p),)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_file_stop = _rpythonic_function_(		"nautilus_file_stop", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),
	("mount_op",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(NautilusFile),ctypes.POINTER(_GFile),ctypes.POINTER(_GError),ctypes.POINTER(ctypes.c_void_p),)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_file_poll_for_media = _rpythonic_function_(		"nautilus_file_poll_for_media", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_set_owner = _rpythonic_function_(		"nautilus_file_set_owner", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),
	("user_name_or_id",		ctypes.POINTER(ctypes.c_char)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(NautilusFile),ctypes.POINTER(_GFile),ctypes.POINTER(_GError),ctypes.POINTER(ctypes.c_void_p),)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_file_set_group = _rpythonic_function_(		"nautilus_file_set_group", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),
	("group_name_or_id",		ctypes.POINTER(ctypes.c_char)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(NautilusFile),ctypes.POINTER(_GFile),ctypes.POINTER(_GError),ctypes.POINTER(ctypes.c_void_p),)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_file_set_permissions = _rpythonic_function_(		"nautilus_file_set_permissions", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),
	("permissions",		ctypes.c_uint),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(NautilusFile),ctypes.POINTER(_GFile),ctypes.POINTER(_GError),ctypes.POINTER(ctypes.c_void_p),)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_file_rename = _rpythonic_function_(		"nautilus_file_rename", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),
	("new_name",		ctypes.POINTER(ctypes.c_char)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(NautilusFile),ctypes.POINTER(_GFile),ctypes.POINTER(_GError),ctypes.POINTER(ctypes.c_void_p),)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_file_cancel = _rpythonic_function_(		"nautilus_file_cancel", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(NautilusFile),ctypes.POINTER(_GFile),ctypes.POINTER(_GError),ctypes.POINTER(ctypes.c_void_p),)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_file_is_gone = _rpythonic_function_(		"nautilus_file_is_gone", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_is_not_yet_confirmed = _rpythonic_function_(		"nautilus_file_is_not_yet_confirmed", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_get_metadata = _rpythonic_function_(		"nautilus_file_get_metadata", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(NautilusFile)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("default_metadata",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_file_get_metadata_list = _rpythonic_function_(		"nautilus_file_get_metadata_list", ctypes.POINTER(_GList), [
	("file",		ctypes.POINTER(NautilusFile)),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_file_set_metadata = _rpythonic_function_(		"nautilus_file_set_metadata", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("default_metadata",		ctypes.POINTER(ctypes.c_char)),
	("metadata",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_file_set_metadata_list = _rpythonic_function_(		"nautilus_file_set_metadata_list", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("C_list",		ctypes.POINTER(_GList)),] )

nautilus_file_get_boolean_metadata = _rpythonic_function_(		"nautilus_file_get_boolean_metadata", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("default_metadata",		ctypes.c_int),] )

nautilus_file_set_boolean_metadata = _rpythonic_function_(		"nautilus_file_set_boolean_metadata", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("default_metadata",		ctypes.c_int),
	("metadata",		ctypes.c_int),] )

nautilus_file_get_integer_metadata = _rpythonic_function_(		"nautilus_file_get_integer_metadata", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("default_metadata",		ctypes.c_int),] )

nautilus_file_set_integer_metadata = _rpythonic_function_(		"nautilus_file_set_integer_metadata", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("default_metadata",		ctypes.c_int),
	("metadata",		ctypes.c_int),] )

nautilus_file_get_time_metadata = _rpythonic_function_(		"nautilus_file_get_time_metadata", ctypes.c_int64, [
	("file",		ctypes.POINTER(NautilusFile)),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_file_set_time_metadata = _rpythonic_function_(		"nautilus_file_set_time_metadata", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("time",		ctypes.c_int64),] )

nautilus_file_get_string_attribute = _rpythonic_function_(		"nautilus_file_get_string_attribute", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(NautilusFile)),
	("attribute_name",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_file_get_string_attribute_q = _rpythonic_function_(		"nautilus_file_get_string_attribute_q", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(NautilusFile)),
	("attribute_q",		ctypes.c_uint),] )

nautilus_file_get_string_attribute_with_default = _rpythonic_function_(		"nautilus_file_get_string_attribute_with_default", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(NautilusFile)),
	("attribute_name",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_file_get_string_attribute_with_default_q = _rpythonic_function_(		"nautilus_file_get_string_attribute_with_default_q", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(NautilusFile)),
	("attribute_q",		ctypes.c_uint),] )

nautilus_file_fit_modified_date_as_string = _rpythonic_function_(		"nautilus_file_fit_modified_date_as_string", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(NautilusFile)),
	("width",		ctypes.c_int),
	("measure_callback",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),)),
	("truncate_callback",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_char),ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),))),
	("measure_truncate_context",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_file_matches_uri = _rpythonic_function_(		"nautilus_file_matches_uri", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_file_is_local = _rpythonic_function_(		"nautilus_file_is_local", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_get_default_sort_type = _rpythonic_function_(		"nautilus_file_get_default_sort_type", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),
	("reversed",		ctypes.POINTER(ctypes.c_int)),] )

nautilus_file_get_default_sort_attribute = _rpythonic_function_(		"nautilus_file_get_default_sort_attribute", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(NautilusFile)),
	("reversed",		ctypes.POINTER(ctypes.c_int)),] )

nautilus_file_compare_for_sort = _rpythonic_function_(		"nautilus_file_compare_for_sort", ctypes.c_int, [
	("file_1",		ctypes.POINTER(NautilusFile)),
	("file_2",		ctypes.POINTER(NautilusFile)),
	("sort_type",		ctypes.c_int),
	("directories_first",		ctypes.c_int),
	("reversed",		ctypes.c_int),] )

nautilus_file_compare_for_sort_by_attribute = _rpythonic_function_(		"nautilus_file_compare_for_sort_by_attribute", ctypes.c_int, [
	("file_1",		ctypes.POINTER(NautilusFile)),
	("file_2",		ctypes.POINTER(NautilusFile)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("directories_first",		ctypes.c_int),
	("reversed",		ctypes.c_int),] )

nautilus_file_compare_for_sort_by_attribute_q = _rpythonic_function_(		"nautilus_file_compare_for_sort_by_attribute_q", ctypes.c_int, [
	("file_1",		ctypes.POINTER(NautilusFile)),
	("file_2",		ctypes.POINTER(NautilusFile)),
	("attribute",		ctypes.c_uint),
	("directories_first",		ctypes.c_int),
	("reversed",		ctypes.c_int),] )

nautilus_file_is_date_sort_attribute_q = _rpythonic_function_(		"nautilus_file_is_date_sort_attribute_q", ctypes.c_int, [
	("attribute",		ctypes.c_uint),] )

nautilus_file_compare_display_name = _rpythonic_function_(		"nautilus_file_compare_display_name", ctypes.c_int, [
	("file_1",		ctypes.POINTER(NautilusFile)),
	("pattern",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_file_compare_location = _rpythonic_function_(		"nautilus_file_compare_location", ctypes.c_int, [
	("file_1",		ctypes.POINTER(NautilusFile)),
	("file_2",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_is_hidden_file = _rpythonic_function_(		"nautilus_file_is_hidden_file", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_should_show = _rpythonic_function_(		"nautilus_file_should_show", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),
	("show_hidden",		ctypes.c_int),
	("show_foreign",		ctypes.c_int),] )

nautilus_file_list_filter_hidden = _rpythonic_function_(		"nautilus_file_list_filter_hidden", ctypes.POINTER(_GList), [
	("files",		ctypes.POINTER(_GList)),
	("show_hidden",		ctypes.c_int),] )

nautilus_file_is_launcher = _rpythonic_function_(		"nautilus_file_is_launcher", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_is_foreign_link = _rpythonic_function_(		"nautilus_file_is_foreign_link", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_is_trusted_link = _rpythonic_function_(		"nautilus_file_is_trusted_link", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_has_activation_uri = _rpythonic_function_(		"nautilus_file_has_activation_uri", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_get_activation_uri = _rpythonic_function_(		"nautilus_file_get_activation_uri", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_get_activation_location = _rpythonic_function_(		"nautilus_file_get_activation_location", ctypes.POINTER(_GFile), [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_get_drop_target_uri = _rpythonic_function_(		"nautilus_file_get_drop_target_uri", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_get_gicon = _rpythonic_function_(		"nautilus_file_get_gicon", ctypes.POINTER(_GIcon), [
	("file",		ctypes.POINTER(NautilusFile)),
	("flags",		ctypes.c_int),] )

nautilus_file_get_icon = _rpythonic_function_(		"nautilus_file_get_icon", ctypes.POINTER(_NautilusIconInfo), [
	("file",		ctypes.POINTER(NautilusFile)),
	("size",		ctypes.c_int),
	("flags",		ctypes.c_int),] )

nautilus_file_get_icon_pixbuf = _rpythonic_function_(		"nautilus_file_get_icon_pixbuf", ctypes.POINTER(_GdkPixbuf), [
	("file",		ctypes.POINTER(NautilusFile)),
	("size",		ctypes.c_int),
	("force_size",		ctypes.c_int),
	("flags",		ctypes.c_int),] )

nautilus_file_has_open_window = _rpythonic_function_(		"nautilus_file_has_open_window", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_set_has_open_window = _rpythonic_function_(		"nautilus_file_set_has_open_window", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),
	("has_open_window",		ctypes.c_int),] )

nautilus_file_is_thumbnailing = _rpythonic_function_(		"nautilus_file_is_thumbnailing", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_list_ref = _rpythonic_function_(		"nautilus_file_list_ref", ctypes.POINTER(_GList), [
	("file_list",		ctypes.POINTER(_GList)),] )

nautilus_file_list_unref = _rpythonic_function_(		"nautilus_file_list_unref", ctypes.c_void_p, [
	("file_list",		ctypes.POINTER(_GList)),] )

nautilus_file_list_free = _rpythonic_function_(		"nautilus_file_list_free", ctypes.c_void_p, [
	("file_list",		ctypes.POINTER(_GList)),] )

nautilus_file_list_copy = _rpythonic_function_(		"nautilus_file_list_copy", ctypes.POINTER(_GList), [
	("file_list",		ctypes.POINTER(_GList)),] )

nautilus_file_list_from_uris = _rpythonic_function_(		"nautilus_file_list_from_uris", ctypes.POINTER(_GList), [
	("uri_list",		ctypes.POINTER(_GList)),] )

nautilus_file_list_sort_by_display_name = _rpythonic_function_(		"nautilus_file_list_sort_by_display_name", ctypes.POINTER(_GList), [
	("file_list",		ctypes.POINTER(_GList)),] )

nautilus_file_list_call_when_ready = _rpythonic_function_(		"nautilus_file_list_call_when_ready", ctypes.c_void_p, [
	("file_list",		ctypes.POINTER(_GList)),
	("attributes",		ctypes.c_int),
	("handle",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GList),ctypes.POINTER(ctypes.c_void_p),)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_file_list_cancel_call_when_ready = _rpythonic_function_(		"nautilus_file_list_cancel_call_when_ready", ctypes.c_void_p, [("handle",		ctypes.c_void_p)] )

nautilus_file_dump = _rpythonic_function_(		"nautilus_file_dump", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),] )

updated_deep_count_in_progress = _rpythonic_function_(		"updated_deep_count_in_progress", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),] )

monitor_add = _rpythonic_function_(		"monitor_add", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),
	("client",		ctypes.POINTER(ctypes.c_void_p)),
	("attributes",		ctypes.c_int),] )

monitor_remove = _rpythonic_function_(		"monitor_remove", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),
	("client",		ctypes.POINTER(ctypes.c_void_p)),] )

cancel_call_when_ready = _rpythonic_function_(		"cancel_call_when_ready", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(NautilusFile),ctypes.POINTER(ctypes.c_void_p),)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

check_if_ready = _rpythonic_function_(		"check_if_ready", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),
	("attributes",		ctypes.c_int),] )

get_item_count = _rpythonic_function_(		"get_item_count", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),
	("count",		ctypes.POINTER(ctypes.c_uint)),
	("count_unreadable",		ctypes.POINTER(ctypes.c_int)),] )

get_deep_counts = _rpythonic_function_(		"get_deep_counts", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),
	("directory_count",		ctypes.POINTER(ctypes.c_uint)),
	("file_count",		ctypes.POINTER(ctypes.c_uint)),
	("unreadable_directory_count",		ctypes.POINTER(ctypes.c_uint)),
	("total_size",		ctypes.POINTER(ctypes.c_longlong)),] )

get_date = _rpythonic_function_(		"get_date", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),
	("C_type",		ctypes.c_int),
	("date",		ctypes.POINTER(ctypes.c_int64)),] )

get_where_string = _rpythonic_function_(		"get_where_string", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(NautilusFile)),] )

set_metadata = _rpythonic_function_(		"set_metadata", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

set_metadata_as_list = _rpythonic_function_(		"set_metadata_as_list", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

mount = _rpythonic_function_(		"mount", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),
	("mount_op",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(NautilusFile),ctypes.POINTER(_GFile),ctypes.POINTER(_GError),ctypes.POINTER(ctypes.c_void_p),)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

translate = _rpythonic_function_(		"translate", ctypes.c_void_p, [
	("item",		ctypes.POINTER(_EelCanvasItem)),
	("dx",		ctypes.c_double),
	("dy",		ctypes.c_double),] )

bounds = _rpythonic_function_(		"bounds", ctypes.c_void_p, [
	("item",		ctypes.POINTER(_EelCanvasItem)),
	("x1",		ctypes.POINTER(ctypes.c_double)),
	("y1",		ctypes.POINTER(ctypes.c_double)),
	("x2",		ctypes.POINTER(ctypes.c_double)),
	("y2",		ctypes.POINTER(ctypes.c_double)),] )

eel_canvas_item_get_type = _rpythonic_function_(		"eel_canvas_item_get_type", ctypes.c_uint, [] )

eel_canvas_item_destroy = _rpythonic_function_(		"eel_canvas_item_destroy", ctypes.c_void_p, [
	("item",		ctypes.POINTER(_EelCanvasItem)),] )

eel_canvas_item_construct = _rpythonic_function_(		"eel_canvas_item_construct", ctypes.c_void_p, [
	("item",		ctypes.POINTER(_EelCanvasItem)),
	("parent",		ctypes.POINTER(_EelCanvasGroup)),
	("first_arg_name",		ctypes.POINTER(ctypes.c_char)),
	("args",		ctypes.c_char),] )

eel_canvas_item_set_valist = _rpythonic_function_(		"eel_canvas_item_set_valist", ctypes.c_void_p, [
	("item",		ctypes.POINTER(_EelCanvasItem)),
	("first_arg_name",		ctypes.POINTER(ctypes.c_char)),
	("args",		ctypes.c_char),] )

eel_canvas_item_move = _rpythonic_function_(		"eel_canvas_item_move", ctypes.c_void_p, [
	("item",		ctypes.POINTER(_EelCanvasItem)),
	("dx",		ctypes.c_double),
	("dy",		ctypes.c_double),] )

eel_canvas_item_raise = _rpythonic_function_(		"eel_canvas_item_raise", ctypes.c_void_p, [
	("item",		ctypes.POINTER(_EelCanvasItem)),
	("positions",		ctypes.c_int),] )

eel_canvas_item_lower = _rpythonic_function_(		"eel_canvas_item_lower", ctypes.c_void_p, [
	("item",		ctypes.POINTER(_EelCanvasItem)),
	("positions",		ctypes.c_int),] )

eel_canvas_item_raise_to_top = _rpythonic_function_(		"eel_canvas_item_raise_to_top", ctypes.c_void_p, [
	("item",		ctypes.POINTER(_EelCanvasItem)),] )

eel_canvas_item_lower_to_bottom = _rpythonic_function_(		"eel_canvas_item_lower_to_bottom", ctypes.c_void_p, [
	("item",		ctypes.POINTER(_EelCanvasItem)),] )

eel_canvas_item_send_behind = _rpythonic_function_(		"eel_canvas_item_send_behind", ctypes.c_void_p, [
	("item",		ctypes.POINTER(_EelCanvasItem)),
	("behind_item",		ctypes.POINTER(_EelCanvasItem)),] )

eel_canvas_item_show = _rpythonic_function_(		"eel_canvas_item_show", ctypes.c_void_p, [
	("item",		ctypes.POINTER(_EelCanvasItem)),] )

eel_canvas_item_hide = _rpythonic_function_(		"eel_canvas_item_hide", ctypes.c_void_p, [
	("item",		ctypes.POINTER(_EelCanvasItem)),] )

eel_canvas_item_grab = _rpythonic_function_(		"eel_canvas_item_grab", ctypes.c_int, [
	("item",		ctypes.POINTER(_EelCanvasItem)),
	("event_mask",		ctypes.c_int),
	("cursor",		ctypes.POINTER(_GdkCursor)),
	("etime",		ctypes.c_uint),] )

eel_canvas_item_ungrab = _rpythonic_function_(		"eel_canvas_item_ungrab", ctypes.c_void_p, [
	("item",		ctypes.POINTER(_EelCanvasItem)),
	("etime",		ctypes.c_uint),] )

eel_canvas_item_w2i = _rpythonic_function_(		"eel_canvas_item_w2i", ctypes.c_void_p, [
	("item",		ctypes.POINTER(_EelCanvasItem)),
	("x",		ctypes.POINTER(ctypes.c_double)),
	("y",		ctypes.POINTER(ctypes.c_double)),] )

eel_canvas_item_i2w = _rpythonic_function_(		"eel_canvas_item_i2w", ctypes.c_void_p, [
	("item",		ctypes.POINTER(_EelCanvasItem)),
	("x",		ctypes.POINTER(ctypes.c_double)),
	("y",		ctypes.POINTER(ctypes.c_double)),] )

eel_canvas_item_reparent = _rpythonic_function_(		"eel_canvas_item_reparent", ctypes.c_void_p, [
	("item",		ctypes.POINTER(_EelCanvasItem)),
	("new_group",		ctypes.POINTER(_EelCanvasGroup)),] )

eel_canvas_item_grab_focus = _rpythonic_function_(		"eel_canvas_item_grab_focus", ctypes.c_void_p, [
	("item",		ctypes.POINTER(_EelCanvasItem)),] )

eel_canvas_item_get_bounds = _rpythonic_function_(		"eel_canvas_item_get_bounds", ctypes.c_void_p, [
	("item",		ctypes.POINTER(_EelCanvasItem)),
	("x1",		ctypes.POINTER(ctypes.c_double)),
	("y1",		ctypes.POINTER(ctypes.c_double)),
	("x2",		ctypes.POINTER(ctypes.c_double)),
	("y2",		ctypes.POINTER(ctypes.c_double)),] )

eel_canvas_item_request_update = _rpythonic_function_(		"eel_canvas_item_request_update", ctypes.c_void_p, [
	("item",		ctypes.POINTER(_EelCanvasItem)),] )

eel_canvas_item_request_redraw = _rpythonic_function_(		"eel_canvas_item_request_redraw", ctypes.c_void_p, [
	("item",		ctypes.POINTER(_EelCanvasItem)),] )

eel_canvas_group_get_type = _rpythonic_function_(		"eel_canvas_group_get_type", ctypes.c_uint, [] )

draw_background = _rpythonic_function_(		"draw_background", ctypes.c_void_p, [
	("canvas",		ctypes.POINTER(_EelCanvas)),
	("cr",		ctypes.POINTER(_cairo)),] )

request_update = _rpythonic_function_(		"request_update", ctypes.c_void_p, [
	("canvas",		ctypes.POINTER(_EelCanvas)),] )

eel_canvas_get_type = _rpythonic_function_(		"eel_canvas_get_type", ctypes.c_uint, [] )

eel_canvas_new = _rpythonic_function_(		"eel_canvas_new", ctypes.POINTER(_GtkWidget), [] )

eel_canvas_root = _rpythonic_function_(		"eel_canvas_root", ctypes.POINTER(_EelCanvasGroup), [
	("canvas",		ctypes.POINTER(_EelCanvas)),] )

eel_canvas_set_scroll_region = _rpythonic_function_(		"eel_canvas_set_scroll_region", ctypes.c_void_p, [
	("canvas",		ctypes.POINTER(_EelCanvas)),
	("x1",		ctypes.c_double),
	("y1",		ctypes.c_double),
	("x2",		ctypes.c_double),
	("y2",		ctypes.c_double),] )

eel_canvas_get_scroll_region = _rpythonic_function_(		"eel_canvas_get_scroll_region", ctypes.c_void_p, [
	("canvas",		ctypes.POINTER(_EelCanvas)),
	("x1",		ctypes.POINTER(ctypes.c_double)),
	("y1",		ctypes.POINTER(ctypes.c_double)),
	("x2",		ctypes.POINTER(ctypes.c_double)),
	("y2",		ctypes.POINTER(ctypes.c_double)),] )

eel_canvas_set_pixels_per_unit = _rpythonic_function_(		"eel_canvas_set_pixels_per_unit", ctypes.c_void_p, [
	("canvas",		ctypes.POINTER(_EelCanvas)),
	("n",		ctypes.c_double),] )

eel_canvas_set_center_scroll_region = _rpythonic_function_(		"eel_canvas_set_center_scroll_region", ctypes.c_void_p, [
	("canvas",		ctypes.POINTER(_EelCanvas)),
	("center_scroll_region",		ctypes.c_int),] )

eel_canvas_scroll_to = _rpythonic_function_(		"eel_canvas_scroll_to", ctypes.c_void_p, [
	("canvas",		ctypes.POINTER(_EelCanvas)),
	("cx",		ctypes.c_int),
	("cy",		ctypes.c_int),] )

eel_canvas_get_scroll_offsets = _rpythonic_function_(		"eel_canvas_get_scroll_offsets", ctypes.c_void_p, [
	("canvas",		ctypes.POINTER(_EelCanvas)),
	("cx",		ctypes.POINTER(ctypes.c_int)),
	("cy",		ctypes.POINTER(ctypes.c_int)),] )

eel_canvas_update_now = _rpythonic_function_(		"eel_canvas_update_now", ctypes.c_void_p, [
	("canvas",		ctypes.POINTER(_EelCanvas)),] )

eel_canvas_get_item_at = _rpythonic_function_(		"eel_canvas_get_item_at", ctypes.POINTER(_EelCanvasItem), [
	("canvas",		ctypes.POINTER(_EelCanvas)),
	("x",		ctypes.c_double),
	("y",		ctypes.c_double),] )

eel_canvas_request_redraw = _rpythonic_function_(		"eel_canvas_request_redraw", ctypes.c_void_p, [
	("canvas",		ctypes.POINTER(_EelCanvas)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_int),
	("y2",		ctypes.c_int),] )

eel_canvas_w2c_rect_d = _rpythonic_function_(		"eel_canvas_w2c_rect_d", ctypes.c_void_p, [
	("canvas",		ctypes.POINTER(_EelCanvas)),
	("x1",		ctypes.POINTER(ctypes.c_double)),
	("y1",		ctypes.POINTER(ctypes.c_double)),
	("x2",		ctypes.POINTER(ctypes.c_double)),
	("y2",		ctypes.POINTER(ctypes.c_double)),] )

eel_canvas_w2c = _rpythonic_function_(		"eel_canvas_w2c", ctypes.c_void_p, [
	("canvas",		ctypes.POINTER(_EelCanvas)),
	("wx",		ctypes.c_double),
	("wy",		ctypes.c_double),
	("cx",		ctypes.POINTER(ctypes.c_int)),
	("cy",		ctypes.POINTER(ctypes.c_int)),] )

eel_canvas_w2c_d = _rpythonic_function_(		"eel_canvas_w2c_d", ctypes.c_void_p, [
	("canvas",		ctypes.POINTER(_EelCanvas)),
	("wx",		ctypes.c_double),
	("wy",		ctypes.c_double),
	("cx",		ctypes.POINTER(ctypes.c_double)),
	("cy",		ctypes.POINTER(ctypes.c_double)),] )

eel_canvas_c2w = _rpythonic_function_(		"eel_canvas_c2w", ctypes.c_void_p, [
	("canvas",		ctypes.POINTER(_EelCanvas)),
	("cx",		ctypes.c_int),
	("cy",		ctypes.c_int),
	("wx",		ctypes.POINTER(ctypes.c_double)),
	("wy",		ctypes.POINTER(ctypes.c_double)),] )

eel_canvas_window_to_world = _rpythonic_function_(		"eel_canvas_window_to_world", ctypes.c_void_p, [
	("canvas",		ctypes.POINTER(_EelCanvas)),
	("winx",		ctypes.c_double),
	("winy",		ctypes.c_double),
	("worldx",		ctypes.POINTER(ctypes.c_double)),
	("worldy",		ctypes.POINTER(ctypes.c_double)),] )

eel_canvas_world_to_window = _rpythonic_function_(		"eel_canvas_world_to_window", ctypes.c_void_p, [
	("canvas",		ctypes.POINTER(_EelCanvas)),
	("worldx",		ctypes.c_double),
	("worldy",		ctypes.c_double),
	("winx",		ctypes.POINTER(ctypes.c_double)),
	("winy",		ctypes.POINTER(ctypes.c_double)),] )

eel_canvas_accessible_get_type = _rpythonic_function_(		"eel_canvas_accessible_get_type", ctypes.c_uint, [] )

eel_canvas_item_accessible_get_type = _rpythonic_function_(		"eel_canvas_item_accessible_get_type", ctypes.c_uint, [] )

NautilusIconCallback = _rpythonic_function_(		"NautilusIconCallback", ctypes.c_void_p, [
	("icon_data",		ctypes.POINTER(NautilusIconData)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

button_press = _rpythonic_function_(		"button_press", ctypes.c_int, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("event",		ctypes.POINTER(_GdkEventButton)),] )

context_click_background = _rpythonic_function_(		"context_click_background", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("event",		ctypes.POINTER(_GdkEventButton)),] )

middle_click = _rpythonic_function_(		"middle_click", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("event",		ctypes.POINTER(_GdkEventButton)),] )

activate_alternate = _rpythonic_function_(		"activate_alternate", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("data",		ctypes.POINTER(NautilusIconData)),] )

activate_previewer = _rpythonic_function_(		"activate_previewer", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("files",		ctypes.POINTER(_GList)),
	("locations",		ctypes.POINTER(_GArray)),] )

context_click_selection = _rpythonic_function_(		"context_click_selection", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("event",		ctypes.POINTER(_GdkEventButton)),] )

move_copy_items = _rpythonic_function_(		"move_copy_items", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("item_uris",		ctypes.POINTER(_GList)),
	("relative_item_points",		ctypes.POINTER(_GdkPoint)),
	("target_uri",		ctypes.POINTER(ctypes.c_char)),
	("action",		ctypes.c_int),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

handle_netscape_url = _rpythonic_function_(		"handle_netscape_url", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("url",		ctypes.POINTER(ctypes.c_char)),
	("target_uri",		ctypes.POINTER(ctypes.c_char)),
	("action",		ctypes.c_int),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

handle_uri_list = _rpythonic_function_(		"handle_uri_list", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("uri_list",		ctypes.POINTER(ctypes.c_char)),
	("target_uri",		ctypes.POINTER(ctypes.c_char)),
	("action",		ctypes.c_int),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

handle_text = _rpythonic_function_(		"handle_text", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("text",		ctypes.POINTER(ctypes.c_char)),
	("target_uri",		ctypes.POINTER(ctypes.c_char)),
	("action",		ctypes.c_int),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

handle_raw = _rpythonic_function_(		"handle_raw", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("raw_data",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),
	("target_uri",		ctypes.POINTER(ctypes.c_char)),
	("direct_save_uri",		ctypes.POINTER(ctypes.c_char)),
	("action",		ctypes.c_int),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

get_container_uri = _rpythonic_function_(		"get_container_uri", ctypes.POINTER(ctypes.c_char), [
	("container",		ctypes.POINTER(NautilusIconContainer)),] )

get_icon_images = _rpythonic_function_(		"get_icon_images", ctypes.POINTER(_NautilusIconInfo), [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("data",		ctypes.POINTER(NautilusIconData)),
	("icon_size",		ctypes.c_int),
	("embedded_text",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("for_drag_accept",		ctypes.c_int),
	("need_large_embeddded_text",		ctypes.c_int),
	("embedded_text_needs_loading",		ctypes.POINTER(ctypes.c_int)),
	("has_window_open",		ctypes.POINTER(ctypes.c_int)),] )

get_icon_text = _rpythonic_function_(		"get_icon_text", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("data",		ctypes.POINTER(NautilusIconData)),
	("editable_text",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("additional_text",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("include_invisible",		ctypes.c_int),] )

get_icon_description = _rpythonic_function_(		"get_icon_description", ctypes.POINTER(ctypes.c_char), [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("data",		ctypes.POINTER(NautilusIconData)),] )

compare_icons = _rpythonic_function_(		"compare_icons", ctypes.c_int, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("icon_a",		ctypes.POINTER(NautilusIconData)),
	("icon_b",		ctypes.POINTER(NautilusIconData)),] )

compare_icons_by_name = _rpythonic_function_(		"compare_icons_by_name", ctypes.c_int, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("icon_a",		ctypes.POINTER(NautilusIconData)),
	("icon_b",		ctypes.POINTER(NautilusIconData)),] )

freeze_updates = _rpythonic_function_(		"freeze_updates", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),] )

unfreeze_updates = _rpythonic_function_(		"unfreeze_updates", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),] )

start_monitor_top_left = _rpythonic_function_(		"start_monitor_top_left", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("data",		ctypes.POINTER(NautilusIconData)),
	("client",		ctypes.POINTER(ctypes.c_void_p)),
	("large_text",		ctypes.c_int),] )

stop_monitor_top_left = _rpythonic_function_(		"stop_monitor_top_left", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("data",		ctypes.POINTER(NautilusIconData)),
	("client",		ctypes.POINTER(ctypes.c_void_p)),] )

prioritize_thumbnailing = _rpythonic_function_(		"prioritize_thumbnailing", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("data",		ctypes.POINTER(NautilusIconData)),] )

can_accept_item = _rpythonic_function_(		"can_accept_item", ctypes.c_int, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("target",		ctypes.POINTER(NautilusIconData)),
	("item_uri",		ctypes.POINTER(ctypes.c_char)),] )

get_stored_icon_position = _rpythonic_function_(		"get_stored_icon_position", ctypes.c_int, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("data",		ctypes.POINTER(NautilusIconData)),
	("position",		ctypes.POINTER(NautilusIconPosition)),] )

get_icon_uri = _rpythonic_function_(		"get_icon_uri", ctypes.POINTER(ctypes.c_char), [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("data",		ctypes.POINTER(NautilusIconData)),] )

get_icon_drop_target_uri = _rpythonic_function_(		"get_icon_drop_target_uri", ctypes.POINTER(ctypes.c_char), [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("data",		ctypes.POINTER(NautilusIconData)),] )

get_stored_layout_timestamp = _rpythonic_function_(		"get_stored_layout_timestamp", ctypes.c_int, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("data",		ctypes.POINTER(NautilusIconData)),
	("time",		ctypes.POINTER(ctypes.c_int64)),] )

store_layout_timestamp = _rpythonic_function_(		"store_layout_timestamp", ctypes.c_int, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("data",		ctypes.POINTER(NautilusIconData)),
	("time",		ctypes.POINTER(ctypes.c_int64)),] )

band_select_started = _rpythonic_function_(		"band_select_started", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),] )

band_select_ended = _rpythonic_function_(		"band_select_ended", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),] )

layout_changed = _rpythonic_function_(		"layout_changed", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),] )

icon_position_changed = _rpythonic_function_(		"icon_position_changed", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("data",		ctypes.POINTER(NautilusIconData)),
	("position",		ctypes.POINTER(NautilusIconPosition)),] )

icon_rename_started = _rpythonic_function_(		"icon_rename_started", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("renaming_widget",		ctypes.POINTER(_GtkWidget)),] )

icon_rename_ended = _rpythonic_function_(		"icon_rename_ended", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("data",		ctypes.POINTER(NautilusIconData)),
	("text",		ctypes.POINTER(ctypes.c_char)),] )

icon_stretch_started = _rpythonic_function_(		"icon_stretch_started", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("data",		ctypes.POINTER(NautilusIconData)),] )

icon_stretch_ended = _rpythonic_function_(		"icon_stretch_ended", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("data",		ctypes.POINTER(NautilusIconData)),] )

icon_added = _rpythonic_function_(		"icon_added", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("data",		ctypes.POINTER(NautilusIconData)),] )

icon_removed = _rpythonic_function_(		"icon_removed", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("data",		ctypes.POINTER(NautilusIconData)),] )

cleared = _rpythonic_function_(		"cleared", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),] )

nautilus_icon_container_get_type = _rpythonic_function_(		"nautilus_icon_container_get_type", ctypes.c_uint, [] )

nautilus_icon_container_new = _rpythonic_function_(		"nautilus_icon_container_new", ctypes.POINTER(_GtkWidget), [] )

nautilus_icon_container_clear = _rpythonic_function_(		"nautilus_icon_container_clear", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusIconContainer)),] )

nautilus_icon_container_add = _rpythonic_function_(		"nautilus_icon_container_add", ctypes.c_int, [
	("view",		ctypes.POINTER(NautilusIconContainer)),
	("data",		ctypes.POINTER(NautilusIconData)),] )

nautilus_icon_container_layout_now = _rpythonic_function_(		"nautilus_icon_container_layout_now", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),] )

nautilus_icon_container_remove = _rpythonic_function_(		"nautilus_icon_container_remove", ctypes.c_int, [
	("view",		ctypes.POINTER(NautilusIconContainer)),
	("data",		ctypes.POINTER(NautilusIconData)),] )

nautilus_icon_container_for_each = _rpythonic_function_(		"nautilus_icon_container_for_each", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusIconContainer)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(NautilusIconData),ctypes.POINTER(ctypes.c_void_p),)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_icon_container_request_update = _rpythonic_function_(		"nautilus_icon_container_request_update", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusIconContainer)),
	("data",		ctypes.POINTER(NautilusIconData)),] )

nautilus_icon_container_request_update_all = _rpythonic_function_(		"nautilus_icon_container_request_update_all", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),] )

nautilus_icon_container_reveal = _rpythonic_function_(		"nautilus_icon_container_reveal", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("data",		ctypes.POINTER(NautilusIconData)),] )

nautilus_icon_container_is_empty = _rpythonic_function_(		"nautilus_icon_container_is_empty", ctypes.c_int, [
	("container",		ctypes.POINTER(NautilusIconContainer)),] )

nautilus_icon_container_get_first_visible_icon = _rpythonic_function_(		"nautilus_icon_container_get_first_visible_icon", ctypes.POINTER(NautilusIconData), [
	("container",		ctypes.POINTER(NautilusIconContainer)),] )

nautilus_icon_container_scroll_to_icon = _rpythonic_function_(		"nautilus_icon_container_scroll_to_icon", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("data",		ctypes.POINTER(NautilusIconData)),] )

nautilus_icon_container_begin_loading = _rpythonic_function_(		"nautilus_icon_container_begin_loading", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),] )

nautilus_icon_container_end_loading = _rpythonic_function_(		"nautilus_icon_container_end_loading", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("all_icons_added",		ctypes.c_int),] )

nautilus_icon_container_is_auto_layout = _rpythonic_function_(		"nautilus_icon_container_is_auto_layout", ctypes.c_int, [
	("container",		ctypes.POINTER(NautilusIconContainer)),] )

nautilus_icon_container_set_auto_layout = _rpythonic_function_(		"nautilus_icon_container_set_auto_layout", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("auto_layout",		ctypes.c_int),] )

nautilus_icon_container_is_keep_aligned = _rpythonic_function_(		"nautilus_icon_container_is_keep_aligned", ctypes.c_int, [
	("container",		ctypes.POINTER(NautilusIconContainer)),] )

nautilus_icon_container_set_keep_aligned = _rpythonic_function_(		"nautilus_icon_container_set_keep_aligned", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("keep_aligned",		ctypes.c_int),] )

nautilus_icon_container_set_layout_mode = _rpythonic_function_(		"nautilus_icon_container_set_layout_mode", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("mode",		ctypes.c_int),] )

nautilus_icon_container_set_label_position = _rpythonic_function_(		"nautilus_icon_container_set_label_position", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("pos",		ctypes.c_int),] )

nautilus_icon_container_sort = _rpythonic_function_(		"nautilus_icon_container_sort", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),] )

nautilus_icon_container_freeze_icon_positions = _rpythonic_function_(		"nautilus_icon_container_freeze_icon_positions", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),] )

nautilus_icon_container_get_max_layout_lines = _rpythonic_function_(		"nautilus_icon_container_get_max_layout_lines", ctypes.c_int, [
	("container",		ctypes.POINTER(NautilusIconContainer)),] )

nautilus_icon_container_get_max_layout_lines_for_pango = _rpythonic_function_(		"nautilus_icon_container_get_max_layout_lines_for_pango", ctypes.c_int, [
	("container",		ctypes.POINTER(NautilusIconContainer)),] )

nautilus_icon_container_set_highlighted_for_clipboard = _rpythonic_function_(		"nautilus_icon_container_set_highlighted_for_clipboard", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("clipboard_icon_data",		ctypes.POINTER(_GList)),] )

nautilus_icon_container_unselect_all = _rpythonic_function_(		"nautilus_icon_container_unselect_all", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusIconContainer)),] )

nautilus_icon_container_select_all = _rpythonic_function_(		"nautilus_icon_container_select_all", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusIconContainer)),] )

nautilus_icon_container_get_selection = _rpythonic_function_(		"nautilus_icon_container_get_selection", ctypes.POINTER(_GList), [
	("view",		ctypes.POINTER(NautilusIconContainer)),] )

nautilus_icon_container_invert_selection = _rpythonic_function_(		"nautilus_icon_container_invert_selection", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusIconContainer)),] )

nautilus_icon_container_set_selection = _rpythonic_function_(		"nautilus_icon_container_set_selection", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusIconContainer)),
	("selection",		ctypes.POINTER(_GList)),] )

nautilus_icon_container_get_selected_icon_locations = _rpythonic_function_(		"nautilus_icon_container_get_selected_icon_locations", ctypes.POINTER(_GArray), [
	("view",		ctypes.POINTER(NautilusIconContainer)),] )

nautilus_icon_container_has_stretch_handles = _rpythonic_function_(		"nautilus_icon_container_has_stretch_handles", ctypes.c_int, [
	("container",		ctypes.POINTER(NautilusIconContainer)),] )

nautilus_icon_container_is_stretched = _rpythonic_function_(		"nautilus_icon_container_is_stretched", ctypes.c_int, [
	("container",		ctypes.POINTER(NautilusIconContainer)),] )

nautilus_icon_container_show_stretch_handles = _rpythonic_function_(		"nautilus_icon_container_show_stretch_handles", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),] )

nautilus_icon_container_unstretch = _rpythonic_function_(		"nautilus_icon_container_unstretch", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),] )

nautilus_icon_container_start_renaming_selected_item = _rpythonic_function_(		"nautilus_icon_container_start_renaming_selected_item", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("select_all",		ctypes.c_int),] )

nautilus_icon_container_get_zoom_level = _rpythonic_function_(		"nautilus_icon_container_get_zoom_level", ctypes.c_int, [
	("view",		ctypes.POINTER(NautilusIconContainer)),] )

nautilus_icon_container_set_zoom_level = _rpythonic_function_(		"nautilus_icon_container_set_zoom_level", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusIconContainer)),
	("new_zoom_level",		ctypes.c_int),] )

nautilus_icon_container_set_single_click_mode = _rpythonic_function_(		"nautilus_icon_container_set_single_click_mode", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("single_click_mode",		ctypes.c_int),] )

nautilus_icon_container_enable_linger_selection = _rpythonic_function_(		"nautilus_icon_container_enable_linger_selection", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusIconContainer)),
	("enable",		ctypes.c_int),] )

nautilus_icon_container_get_is_fixed_size = _rpythonic_function_(		"nautilus_icon_container_get_is_fixed_size", ctypes.c_int, [
	("container",		ctypes.POINTER(NautilusIconContainer)),] )

nautilus_icon_container_set_is_fixed_size = _rpythonic_function_(		"nautilus_icon_container_set_is_fixed_size", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("is_fixed_size",		ctypes.c_int),] )

nautilus_icon_container_get_is_desktop = _rpythonic_function_(		"nautilus_icon_container_get_is_desktop", ctypes.c_int, [
	("container",		ctypes.POINTER(NautilusIconContainer)),] )

nautilus_icon_container_set_is_desktop = _rpythonic_function_(		"nautilus_icon_container_set_is_desktop", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("is_desktop",		ctypes.c_int),] )

nautilus_icon_container_reset_scroll_region = _rpythonic_function_(		"nautilus_icon_container_reset_scroll_region", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),] )

nautilus_icon_container_set_font = _rpythonic_function_(		"nautilus_icon_container_set_font", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("font",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_icon_container_set_font_size_table = _rpythonic_function_(		"nautilus_icon_container_set_font_size_table", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("font_size_table",		( ctypes.c_int * 7 )),] )

nautilus_icon_container_set_margins = _rpythonic_function_(		"nautilus_icon_container_set_margins", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("left_margin",		ctypes.c_int),
	("right_margin",		ctypes.c_int),
	("top_margin",		ctypes.c_int),
	("bottom_margin",		ctypes.c_int),] )

nautilus_icon_container_set_use_drop_shadows = _rpythonic_function_(		"nautilus_icon_container_set_use_drop_shadows", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("use_drop_shadows",		ctypes.c_int),] )

nautilus_icon_container_get_icon_description = _rpythonic_function_(		"nautilus_icon_container_get_icon_description", ctypes.POINTER(ctypes.c_char), [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("data",		ctypes.POINTER(NautilusIconData)),] )

nautilus_icon_container_get_allow_moves = _rpythonic_function_(		"nautilus_icon_container_get_allow_moves", ctypes.c_int, [
	("container",		ctypes.POINTER(NautilusIconContainer)),] )

nautilus_icon_container_set_allow_moves = _rpythonic_function_(		"nautilus_icon_container_set_allow_moves", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("allow_moves",		ctypes.c_int),] )

nautilus_icon_container_is_layout_rtl = _rpythonic_function_(		"nautilus_icon_container_is_layout_rtl", ctypes.c_int, [
	("container",		ctypes.POINTER(NautilusIconContainer)),] )

nautilus_icon_container_is_layout_vertical = _rpythonic_function_(		"nautilus_icon_container_is_layout_vertical", ctypes.c_int, [
	("container",		ctypes.POINTER(NautilusIconContainer)),] )

nautilus_icon_container_get_store_layout_timestamps = _rpythonic_function_(		"nautilus_icon_container_get_store_layout_timestamps", ctypes.c_int, [
	("container",		ctypes.POINTER(NautilusIconContainer)),] )

nautilus_icon_container_set_store_layout_timestamps = _rpythonic_function_(		"nautilus_icon_container_set_store_layout_timestamps", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("store_layout",		ctypes.c_int),] )

nautilus_icon_container_widget_to_file_operation_position = _rpythonic_function_(		"nautilus_icon_container_widget_to_file_operation_position", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("position",		ctypes.POINTER(_GdkPoint)),] )

nautilus_link_local_create = _rpythonic_function_(		"nautilus_link_local_create", ctypes.c_int, [
	("directory_uri",		ctypes.POINTER(ctypes.c_char)),
	("base_name",		ctypes.POINTER(ctypes.c_char)),
	("display_name",		ctypes.POINTER(ctypes.c_char)),
	("image",		ctypes.POINTER(ctypes.c_char)),
	("target_uri",		ctypes.POINTER(ctypes.c_char)),
	("point",		ctypes.POINTER(_GdkPoint)),
	("screen",		ctypes.c_int),
	("unique_filename",		ctypes.c_int),] )

nautilus_link_local_set_text = _rpythonic_function_(		"nautilus_link_local_set_text", ctypes.c_int, [
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("text",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_link_local_set_icon = _rpythonic_function_(		"nautilus_link_local_set_icon", ctypes.c_int, [
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_link_local_get_text = _rpythonic_function_(		"nautilus_link_local_get_text", ctypes.POINTER(ctypes.c_char), [
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_link_local_get_link_uri = _rpythonic_function_(		"nautilus_link_local_get_link_uri", ctypes.POINTER(ctypes.c_char), [
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_link_get_link_info_given_file_contents = _rpythonic_function_(		"nautilus_link_get_link_info_given_file_contents", ctypes.c_void_p, [
	("file_contents",		ctypes.POINTER(ctypes.c_char)),
	("link_file_size",		ctypes.c_int),
	("file_uri",		ctypes.POINTER(ctypes.c_char)),
	("uri",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("name",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("icon",		ctypes.POINTER(ctypes.POINTER(_GIcon))),
	("is_launcher",		ctypes.POINTER(ctypes.c_int)),
	("is_foreign",		ctypes.POINTER(ctypes.c_int)),] )

NautilusWindowGoToCallback = _rpythonic_function_(		"NautilusWindowGoToCallback", ctypes.c_void_p, [
	("window",		ctypes.POINTER(NautilusWindow)),
	("error",		ctypes.POINTER(_GError)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_search_bar_get_type = _rpythonic_function_(		"nautilus_search_bar_get_type", ctypes.c_uint, [] )

nautilus_search_bar_new = _rpythonic_function_(		"nautilus_search_bar_new", ctypes.POINTER(_GtkWidget), [] )

nautilus_search_bar_borrow_entry = _rpythonic_function_(		"nautilus_search_bar_borrow_entry", ctypes.POINTER(_GtkWidget), [
	("bar",		ctypes.POINTER(NautilusSearchBar)),] )

nautilus_search_bar_return_entry = _rpythonic_function_(		"nautilus_search_bar_return_entry", ctypes.c_void_p, [
	("bar",		ctypes.POINTER(NautilusSearchBar)),] )

nautilus_search_bar_grab_focus = _rpythonic_function_(		"nautilus_search_bar_grab_focus", ctypes.c_void_p, [
	("bar",		ctypes.POINTER(NautilusSearchBar)),] )

nautilus_search_bar_get_query = _rpythonic_function_(		"nautilus_search_bar_get_query", ctypes.POINTER(NautilusQuery), [
	("bar",		ctypes.POINTER(NautilusSearchBar)),] )

nautilus_search_bar_clear = _rpythonic_function_(		"nautilus_search_bar_clear", ctypes.c_void_p, [
	("bar",		ctypes.POINTER(NautilusSearchBar)),] )

nautilus_query_editor_get_type = _rpythonic_function_(		"nautilus_query_editor_get_type", ctypes.c_uint, [] )

nautilus_query_editor_new = _rpythonic_function_(		"nautilus_query_editor_new", ctypes.POINTER(_GtkWidget), [
	("start_hidden",		ctypes.c_int),] )

nautilus_query_editor_new_with_bar = _rpythonic_function_(		"nautilus_query_editor_new_with_bar", ctypes.POINTER(_GtkWidget), [
	("start_hidden",		ctypes.c_int),
	("start_attached",		ctypes.c_int),
	("bar",		ctypes.POINTER(NautilusSearchBar)),
	("slot",		ctypes.POINTER(NautilusWindowSlot)),] )

nautilus_query_editor_set_default_query = _rpythonic_function_(		"nautilus_query_editor_set_default_query", ctypes.c_void_p, [
	("editor",		ctypes.POINTER(NautilusQueryEditor)),] )

nautilus_query_editor_grab_focus = _rpythonic_function_(		"nautilus_query_editor_grab_focus", ctypes.c_void_p, [
	("editor",		ctypes.POINTER(NautilusQueryEditor)),] )

nautilus_query_editor_clear_query = _rpythonic_function_(		"nautilus_query_editor_clear_query", ctypes.c_void_p, [
	("editor",		ctypes.POINTER(NautilusQueryEditor)),] )

nautilus_query_editor_get_query = _rpythonic_function_(		"nautilus_query_editor_get_query", ctypes.POINTER(NautilusQuery), [
	("editor",		ctypes.POINTER(NautilusQueryEditor)),] )

nautilus_query_editor_set_query = _rpythonic_function_(		"nautilus_query_editor_set_query", ctypes.c_void_p, [
	("editor",		ctypes.POINTER(NautilusQueryEditor)),
	("query",		ctypes.POINTER(NautilusQuery)),] )

nautilus_query_editor_set_visible = _rpythonic_function_(		"nautilus_query_editor_set_visible", ctypes.c_void_p, [
	("editor",		ctypes.POINTER(NautilusQueryEditor)),
	("visible",		ctypes.c_int),] )

active = _rpythonic_function_(		"active", ctypes.c_void_p, [
	("slot",		ctypes.POINTER(NautilusWindowSlot)),] )

inactive = _rpythonic_function_(		"inactive", ctypes.c_void_p, [
	("slot",		ctypes.POINTER(NautilusWindowSlot)),] )

nautilus_window_slot_new = _rpythonic_function_(		"nautilus_window_slot_new", ctypes.POINTER(NautilusWindowSlot), [
	("window",		ctypes.POINTER(NautilusWindow)),] )

nautilus_window_slot_update_title = _rpythonic_function_(		"nautilus_window_slot_update_title", ctypes.c_void_p, [
	("slot",		ctypes.POINTER(NautilusWindowSlot)),] )

nautilus_window_slot_update_icon = _rpythonic_function_(		"nautilus_window_slot_update_icon", ctypes.c_void_p, [
	("slot",		ctypes.POINTER(NautilusWindowSlot)),] )

nautilus_window_slot_get_type = _rpythonic_function_(		"nautilus_window_slot_get_type", ctypes.c_uint, [] )

nautilus_window_slot_update_query_editor = _rpythonic_function_(		"nautilus_window_slot_update_query_editor", ctypes.c_void_p, [
	("slot",		ctypes.POINTER(NautilusWindowSlot)),] )

nautilus_window_slot_get_location = _rpythonic_function_(		"nautilus_window_slot_get_location", ctypes.POINTER(_GFile), [
	("slot",		ctypes.POINTER(NautilusWindowSlot)),] )

nautilus_window_slot_get_location_uri = _rpythonic_function_(		"nautilus_window_slot_get_location_uri", ctypes.POINTER(ctypes.c_char), [
	("slot",		ctypes.POINTER(NautilusWindowSlot)),] )

nautilus_window_slot_reload = _rpythonic_function_(		"nautilus_window_slot_reload", ctypes.c_void_p, [
	("slot",		ctypes.POINTER(NautilusWindowSlot)),] )

nautilus_window_slot_open_location_full = _rpythonic_function_(		"nautilus_window_slot_open_location_full", ctypes.c_void_p, [
	("slot",		ctypes.POINTER(NautilusWindowSlot)),
	("location",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("new_selection",		ctypes.POINTER(_GList)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(NautilusWindow),ctypes.POINTER(_GError),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_window_slot_stop_loading = _rpythonic_function_(		"nautilus_window_slot_stop_loading", ctypes.c_void_p, [
	("slot",		ctypes.POINTER(NautilusWindowSlot)),] )

nautilus_window_slot_set_content_view = _rpythonic_function_(		"nautilus_window_slot_set_content_view", ctypes.c_void_p, [
	("slot",		ctypes.POINTER(NautilusWindowSlot)),
	("C_id",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_window_slot_get_content_view_id = _rpythonic_function_(		"nautilus_window_slot_get_content_view_id", ctypes.POINTER(ctypes.c_char), [
	("slot",		ctypes.POINTER(NautilusWindowSlot)),] )

nautilus_window_slot_content_view_matches_iid = _rpythonic_function_(		"nautilus_window_slot_content_view_matches_iid", ctypes.c_int, [
	("slot",		ctypes.POINTER(NautilusWindowSlot)),
	("iid",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_window_slot_go_home = _rpythonic_function_(		"nautilus_window_slot_go_home", ctypes.c_void_p, [
	("slot",		ctypes.POINTER(NautilusWindowSlot)),
	("flags",		ctypes.c_int),] )

nautilus_window_slot_go_up = _rpythonic_function_(		"nautilus_window_slot_go_up", ctypes.c_void_p, [
	("slot",		ctypes.POINTER(NautilusWindowSlot)),
	("flags",		ctypes.c_int),] )

nautilus_window_slot_set_content_view_widget = _rpythonic_function_(		"nautilus_window_slot_set_content_view_widget", ctypes.c_void_p, [
	("slot",		ctypes.POINTER(NautilusWindowSlot)),
	("content_view",		ctypes.POINTER(NautilusView)),] )

nautilus_window_slot_set_viewed_file = _rpythonic_function_(		"nautilus_window_slot_set_viewed_file", ctypes.c_void_p, [
	("slot",		ctypes.POINTER(NautilusWindowSlot)),
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_window_slot_set_allow_stop = _rpythonic_function_(		"nautilus_window_slot_set_allow_stop", ctypes.c_void_p, [
	("slot",		ctypes.POINTER(NautilusWindowSlot)),
	("allow_stop",		ctypes.c_int),] )

nautilus_window_slot_set_status = _rpythonic_function_(		"nautilus_window_slot_set_status", ctypes.c_void_p, [
	("slot",		ctypes.POINTER(NautilusWindowSlot)),
	("status",		ctypes.POINTER(ctypes.c_char)),
	("short_status",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_window_slot_add_extra_location_widget = _rpythonic_function_(		"nautilus_window_slot_add_extra_location_widget", ctypes.c_void_p, [
	("slot",		ctypes.POINTER(NautilusWindowSlot)),
	("widget",		ctypes.POINTER(_GtkWidget)),] )

nautilus_window_slot_remove_extra_location_widgets = _rpythonic_function_(		"nautilus_window_slot_remove_extra_location_widgets", ctypes.c_void_p, [
	("slot",		ctypes.POINTER(NautilusWindowSlot)),] )

nautilus_window_slot_get_current_view = _rpythonic_function_(		"nautilus_window_slot_get_current_view", ctypes.POINTER(NautilusView), [
	("slot",		ctypes.POINTER(NautilusWindowSlot)),] )

nautilus_window_slot_get_current_uri = _rpythonic_function_(		"nautilus_window_slot_get_current_uri", ctypes.POINTER(ctypes.c_char), [
	("slot",		ctypes.POINTER(NautilusWindowSlot)),] )

nautilus_window_slot_get_window = _rpythonic_function_(		"nautilus_window_slot_get_window", ctypes.POINTER(NautilusWindow), [
	("slot",		ctypes.POINTER(NautilusWindowSlot)),] )

nautilus_window_slot_make_hosting_window_active = _rpythonic_function_(		"nautilus_window_slot_make_hosting_window_active", ctypes.c_void_p, [
	("slot",		ctypes.POINTER(NautilusWindowSlot)),] )

nautilus_window_slot_should_close_with_mount = _rpythonic_function_(		"nautilus_window_slot_should_close_with_mount", ctypes.c_int, [
	("slot",		ctypes.POINTER(NautilusWindowSlot)),
	("mount",		ctypes.POINTER(_GMount)),] )

nautilus_window_slot_clear_forward_list = _rpythonic_function_(		"nautilus_window_slot_clear_forward_list", ctypes.c_void_p, [
	("slot",		ctypes.POINTER(NautilusWindowSlot)),] )

nautilus_window_slot_clear_back_list = _rpythonic_function_(		"nautilus_window_slot_clear_back_list", ctypes.c_void_p, [
	("slot",		ctypes.POINTER(NautilusWindowSlot)),] )

begin_file_changes = _rpythonic_function_(		"begin_file_changes", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),] )

add_file = _rpythonic_function_(		"add_file", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),
	("file",		ctypes.POINTER(NautilusFile)),
	("directory",		ctypes.POINTER(NautilusDirectory)),] )

remove_file = _rpythonic_function_(		"remove_file", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),
	("file",		ctypes.POINTER(NautilusFile)),
	("directory",		ctypes.POINTER(NautilusDirectory)),] )

file_changed = _rpythonic_function_(		"file_changed", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),
	("file",		ctypes.POINTER(NautilusFile)),
	("directory",		ctypes.POINTER(NautilusDirectory)),] )

end_file_changes = _rpythonic_function_(		"end_file_changes", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),] )

begin_loading = _rpythonic_function_(		"begin_loading", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),] )

end_loading = _rpythonic_function_(		"end_loading", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),
	("all_files_seen",		ctypes.c_int),] )

reset_to_defaults = _rpythonic_function_(		"reset_to_defaults", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),] )

get_backing_uri = _rpythonic_function_(		"get_backing_uri", ctypes.POINTER(ctypes.c_char), [
	("view",		ctypes.POINTER(NautilusView)),] )

get_selection_for_file_transfer = _rpythonic_function_(		"get_selection_for_file_transfer", ctypes.POINTER(_GList), [
	("view",		ctypes.POINTER(NautilusView)),] )

invert_selection = _rpythonic_function_(		"invert_selection", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),] )

get_selected_icon_locations = _rpythonic_function_(		"get_selected_icon_locations", ctypes.POINTER(_GArray), [
	("view",		ctypes.POINTER(NautilusView)),] )

bump_zoom_level = _rpythonic_function_(		"bump_zoom_level", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),
	("zoom_increment",		ctypes.c_int),] )

zoom_to_level = _rpythonic_function_(		"zoom_to_level", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),
	("level",		ctypes.c_int),] )

get_zoom_level = _rpythonic_function_(		"get_zoom_level", ctypes.c_int, [
	("view",		ctypes.POINTER(NautilusView)),] )

restore_default_zoom_level = _rpythonic_function_(		"restore_default_zoom_level", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),] )

can_zoom_in = _rpythonic_function_(		"can_zoom_in", ctypes.c_int, [
	("view",		ctypes.POINTER(NautilusView)),] )

can_zoom_out = _rpythonic_function_(		"can_zoom_out", ctypes.c_int, [
	("view",		ctypes.POINTER(NautilusView)),] )

reveal_selection = _rpythonic_function_(		"reveal_selection", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),] )

merge_menus = _rpythonic_function_(		"merge_menus", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),] )

unmerge_menus = _rpythonic_function_(		"unmerge_menus", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),] )

update_menus = _rpythonic_function_(		"update_menus", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),] )

compare_files = _rpythonic_function_(		"compare_files", ctypes.c_int, [
	("view",		ctypes.POINTER(NautilusView)),
	("a",		ctypes.POINTER(NautilusFile)),
	("b",		ctypes.POINTER(NautilusFile)),] )

using_manual_layout = _rpythonic_function_(		"using_manual_layout", ctypes.c_int, [
	("view",		ctypes.POINTER(NautilusView)),] )

is_read_only = _rpythonic_function_(		"is_read_only", ctypes.c_int, [
	("view",		ctypes.POINTER(NautilusView)),] )

is_empty = _rpythonic_function_(		"is_empty", ctypes.c_int, [
	("view",		ctypes.POINTER(NautilusView)),] )

can_rename_file = _rpythonic_function_(		"can_rename_file", ctypes.c_int, [
	("view",		ctypes.POINTER(NautilusView)),
	("file",		ctypes.POINTER(NautilusFile)),] )

start_renaming_file = _rpythonic_function_(		"start_renaming_file", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),
	("file",		ctypes.POINTER(NautilusFile)),
	("select_all",		ctypes.c_int),] )

widget_to_file_operation_position = _rpythonic_function_(		"widget_to_file_operation_position", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),
	("position",		ctypes.POINTER(_GdkPoint)),] )

click_policy_changed = _rpythonic_function_(		"click_policy_changed", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),] )

sort_directories_first_changed = _rpythonic_function_(		"sort_directories_first_changed", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),] )

get_view_id = _rpythonic_function_(		"get_view_id", ctypes.POINTER(ctypes.c_char), [
	("view",		ctypes.POINTER(NautilusView)),] )

get_first_visible_file = _rpythonic_function_(		"get_first_visible_file", ctypes.POINTER(ctypes.c_char), [
	("view",		ctypes.POINTER(NautilusView)),] )

scroll_to_file = _rpythonic_function_(		"scroll_to_file", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

delete = _rpythonic_function_(		"delete", ctypes.c_int, [
	("view",		ctypes.POINTER(NautilusView)),] )

nautilus_view_get_type = _rpythonic_function_(		"nautilus_view_get_type", ctypes.c_uint, [] )

nautilus_view_get_nautilus_window = _rpythonic_function_(		"nautilus_view_get_nautilus_window", ctypes.POINTER(NautilusWindow), [
	("view",		ctypes.POINTER(NautilusView)),] )

nautilus_view_get_nautilus_window_slot = _rpythonic_function_(		"nautilus_view_get_nautilus_window_slot", ctypes.POINTER(NautilusWindowSlot), [
	("view",		ctypes.POINTER(NautilusView)),] )

nautilus_view_get_uri = _rpythonic_function_(		"nautilus_view_get_uri", ctypes.POINTER(ctypes.c_char), [
	("view",		ctypes.POINTER(NautilusView)),] )

nautilus_view_display_selection_info = _rpythonic_function_(		"nautilus_view_display_selection_info", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),] )

nautilus_view_get_copied_files_atom = _rpythonic_function_(		"nautilus_view_get_copied_files_atom", ctypes.POINTER(_GdkAtom), [
	("view",		ctypes.POINTER(NautilusView)),] )

nautilus_view_get_active = _rpythonic_function_(		"nautilus_view_get_active", ctypes.c_int, [
	("view",		ctypes.POINTER(NautilusView)),] )

nautilus_view_get_loading = _rpythonic_function_(		"nautilus_view_get_loading", ctypes.c_int, [
	("view",		ctypes.POINTER(NautilusView)),] )

nautilus_view_activate_files = _rpythonic_function_(		"nautilus_view_activate_files", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),
	("files",		ctypes.POINTER(_GList)),
	("flags",		ctypes.c_int),
	("confirm_multiple",		ctypes.c_int),] )

nautilus_view_preview_files = _rpythonic_function_(		"nautilus_view_preview_files", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),
	("files",		ctypes.POINTER(_GList)),
	("locations",		ctypes.POINTER(_GArray)),] )

nautilus_view_start_batching_selection_changes = _rpythonic_function_(		"nautilus_view_start_batching_selection_changes", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),] )

nautilus_view_stop_batching_selection_changes = _rpythonic_function_(		"nautilus_view_stop_batching_selection_changes", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),] )

nautilus_view_notify_selection_changed = _rpythonic_function_(		"nautilus_view_notify_selection_changed", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),] )

nautilus_view_get_ui_manager = _rpythonic_function_(		"nautilus_view_get_ui_manager", ctypes.POINTER(_GtkUIManager), [
	("view",		ctypes.POINTER(NautilusView)),] )

nautilus_view_get_model = _rpythonic_function_(		"nautilus_view_get_model", ctypes.POINTER(NautilusDirectory), [
	("view",		ctypes.POINTER(NautilusView)),] )

nautilus_view_get_directory_as_file = _rpythonic_function_(		"nautilus_view_get_directory_as_file", ctypes.POINTER(NautilusFile), [
	("view",		ctypes.POINTER(NautilusView)),] )

nautilus_view_pop_up_background_context_menu = _rpythonic_function_(		"nautilus_view_pop_up_background_context_menu", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),
	("event",		ctypes.POINTER(_GdkEventButton)),] )

nautilus_view_pop_up_selection_context_menu = _rpythonic_function_(		"nautilus_view_pop_up_selection_context_menu", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),
	("event",		ctypes.POINTER(_GdkEventButton)),] )

nautilus_view_should_show_file = _rpythonic_function_(		"nautilus_view_should_show_file", ctypes.c_int, [
	("view",		ctypes.POINTER(NautilusView)),
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_view_should_sort_directories_first = _rpythonic_function_(		"nautilus_view_should_sort_directories_first", ctypes.c_int, [
	("view",		ctypes.POINTER(NautilusView)),] )

nautilus_view_ignore_hidden_file_preferences = _rpythonic_function_(		"nautilus_view_ignore_hidden_file_preferences", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),] )

nautilus_view_set_show_foreign = _rpythonic_function_(		"nautilus_view_set_show_foreign", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),
	("show_foreign",		ctypes.c_int),] )

nautilus_view_handle_scroll_event = _rpythonic_function_(		"nautilus_view_handle_scroll_event", ctypes.c_int, [
	("view",		ctypes.POINTER(NautilusView)),
	("event",		ctypes.POINTER(_GdkEventScroll)),] )

nautilus_view_freeze_updates = _rpythonic_function_(		"nautilus_view_freeze_updates", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),] )

nautilus_view_unfreeze_updates = _rpythonic_function_(		"nautilus_view_unfreeze_updates", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),] )

nautilus_view_get_is_renaming = _rpythonic_function_(		"nautilus_view_get_is_renaming", ctypes.c_int, [
	("view",		ctypes.POINTER(NautilusView)),] )

nautilus_view_set_is_renaming = _rpythonic_function_(		"nautilus_view_set_is_renaming", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),
	("renaming",		ctypes.c_int),] )

nautilus_view_add_subdirectory = _rpythonic_function_(		"nautilus_view_add_subdirectory", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),
	("directory",		ctypes.POINTER(NautilusDirectory)),] )

nautilus_view_remove_subdirectory = _rpythonic_function_(		"nautilus_view_remove_subdirectory", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),
	("directory",		ctypes.POINTER(NautilusDirectory)),] )

nautilus_view_is_editable = _rpythonic_function_(		"nautilus_view_is_editable", ctypes.c_int, [
	("view",		ctypes.POINTER(NautilusView)),] )

nautilus_view_get_view_id = _rpythonic_function_(		"nautilus_view_get_view_id", ctypes.POINTER(ctypes.c_char), [
	("view",		ctypes.POINTER(NautilusView)),] )

nautilus_view_get_backing_uri = _rpythonic_function_(		"nautilus_view_get_backing_uri", ctypes.POINTER(ctypes.c_char), [
	("view",		ctypes.POINTER(NautilusView)),] )

nautilus_view_move_copy_items = _rpythonic_function_(		"nautilus_view_move_copy_items", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),
	("item_uris",		ctypes.POINTER(_GList)),
	("relative_item_points",		ctypes.POINTER(_GArray)),
	("target_uri",		ctypes.POINTER(ctypes.c_char)),
	("copy_action",		ctypes.c_int),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

nautilus_view_new_file_with_initial_contents = _rpythonic_function_(		"nautilus_view_new_file_with_initial_contents", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),
	("parent_uri",		ctypes.POINTER(ctypes.c_char)),
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("initial_contents",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),
	("pos",		ctypes.POINTER(_GdkPoint)),] )

nautilus_view_get_selection_count = _rpythonic_function_(		"nautilus_view_get_selection_count", ctypes.c_int, [
	("view",		ctypes.POINTER(NautilusView)),] )

nautilus_view_get_selection = _rpythonic_function_(		"nautilus_view_get_selection", ctypes.POINTER(_GList), [
	("view",		ctypes.POINTER(NautilusView)),] )

nautilus_view_set_selection = _rpythonic_function_(		"nautilus_view_set_selection", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),
	("selection",		ctypes.POINTER(_GList)),] )

nautilus_view_load_location = _rpythonic_function_(		"nautilus_view_load_location", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),
	("location",		ctypes.POINTER(_GFile)),] )

nautilus_view_stop_loading = _rpythonic_function_(		"nautilus_view_stop_loading", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),] )

nautilus_view_get_first_visible_file = _rpythonic_function_(		"nautilus_view_get_first_visible_file", ctypes.POINTER(ctypes.c_char), [
	("view",		ctypes.POINTER(NautilusView)),] )

nautilus_view_scroll_to_file = _rpythonic_function_(		"nautilus_view_scroll_to_file", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_view_get_title = _rpythonic_function_(		"nautilus_view_get_title", ctypes.POINTER(ctypes.c_char), [
	("view",		ctypes.POINTER(NautilusView)),] )

nautilus_view_supports_zooming = _rpythonic_function_(		"nautilus_view_supports_zooming", ctypes.c_int, [
	("view",		ctypes.POINTER(NautilusView)),] )

nautilus_view_bump_zoom_level = _rpythonic_function_(		"nautilus_view_bump_zoom_level", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),
	("zoom_increment",		ctypes.c_int),] )

nautilus_view_zoom_to_level = _rpythonic_function_(		"nautilus_view_zoom_to_level", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),
	("level",		ctypes.c_int),] )

nautilus_view_restore_default_zoom_level = _rpythonic_function_(		"nautilus_view_restore_default_zoom_level", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),] )

nautilus_view_can_zoom_in = _rpythonic_function_(		"nautilus_view_can_zoom_in", ctypes.c_int, [
	("view",		ctypes.POINTER(NautilusView)),] )

nautilus_view_can_zoom_out = _rpythonic_function_(		"nautilus_view_can_zoom_out", ctypes.c_int, [
	("view",		ctypes.POINTER(NautilusView)),] )

nautilus_view_get_zoom_level = _rpythonic_function_(		"nautilus_view_get_zoom_level", ctypes.c_int, [
	("view",		ctypes.POINTER(NautilusView)),] )

nautilus_view_pop_up_location_context_menu = _rpythonic_function_(		"nautilus_view_pop_up_location_context_menu", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),
	("event",		ctypes.POINTER(_GdkEventButton)),
	("location",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_view_grab_focus = _rpythonic_function_(		"nautilus_view_grab_focus", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),] )

nautilus_view_update_menus = _rpythonic_function_(		"nautilus_view_update_menus", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),] )

sync_title = _rpythonic_function_(		"sync_title", ctypes.c_void_p, [
	("window",		ctypes.POINTER(NautilusWindow)),
	("slot",		ctypes.POINTER(NautilusWindowSlot)),] )

prompt_for_location = _rpythonic_function_(		"prompt_for_location", ctypes.c_void_p, [
	("window",		ctypes.POINTER(NautilusWindow)),
	("initial",		ctypes.POINTER(ctypes.c_char)),] )

go_up = _rpythonic_function_(		"go_up", ctypes.c_void_p, [
	("window",		ctypes.POINTER(NautilusWindow)),] )

nautilus_window_get_type = _rpythonic_function_(		"nautilus_window_get_type", ctypes.c_uint, [] )

nautilus_window_new = _rpythonic_function_(		"nautilus_window_new", ctypes.POINTER(NautilusWindow), [
	("application",		ctypes.POINTER(_GtkApplication)),
	("screen",		ctypes.POINTER(_GdkScreen)),] )

nautilus_window_close = _rpythonic_function_(		"nautilus_window_close", ctypes.c_void_p, [
	("window",		ctypes.POINTER(NautilusWindow)),] )

nautilus_window_connect_content_view = _rpythonic_function_(		"nautilus_window_connect_content_view", ctypes.c_void_p, [
	("window",		ctypes.POINTER(NautilusWindow)),
	("view",		ctypes.POINTER(NautilusView)),] )

nautilus_window_disconnect_content_view = _rpythonic_function_(		"nautilus_window_disconnect_content_view", ctypes.c_void_p, [
	("window",		ctypes.POINTER(NautilusWindow)),
	("view",		ctypes.POINTER(NautilusView)),] )

nautilus_window_go_to = _rpythonic_function_(		"nautilus_window_go_to", ctypes.c_void_p, [
	("window",		ctypes.POINTER(NautilusWindow)),
	("location",		ctypes.POINTER(_GFile)),] )

nautilus_window_go_to_full = _rpythonic_function_(		"nautilus_window_go_to_full", ctypes.c_void_p, [
	("window",		ctypes.POINTER(NautilusWindow)),
	("location",		ctypes.POINTER(_GFile)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(NautilusWindow),ctypes.POINTER(_GError),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_window_new_tab = _rpythonic_function_(		"nautilus_window_new_tab", ctypes.c_void_p, [
	("window",		ctypes.POINTER(NautilusWindow)),] )

nautilus_window_get_ui_manager = _rpythonic_function_(		"nautilus_window_get_ui_manager", ctypes.POINTER(_GtkUIManager), [
	("window",		ctypes.POINTER(NautilusWindow)),] )

nautilus_window_get_main_action_group = _rpythonic_function_(		"nautilus_window_get_main_action_group", ctypes.POINTER(_GtkActionGroup), [
	("window",		ctypes.POINTER(NautilusWindow)),] )

nautilus_window_get_navigation_state = _rpythonic_function_(		"nautilus_window_get_navigation_state", ctypes.POINTER(_NautilusNavigationState), [
	("window",		ctypes.POINTER(NautilusWindow)),] )

nautilus_window_report_load_complete = _rpythonic_function_(		"nautilus_window_report_load_complete", ctypes.c_void_p, [
	("window",		ctypes.POINTER(NautilusWindow)),
	("view",		ctypes.POINTER(NautilusView)),] )

nautilus_window_get_hidden_files_mode = _rpythonic_function_(		"nautilus_window_get_hidden_files_mode", ctypes.c_int, [
	("window",		ctypes.POINTER(NautilusWindow)),] )

nautilus_window_set_hidden_files_mode = _rpythonic_function_(		"nautilus_window_set_hidden_files_mode", ctypes.c_void_p, [
	("window",		ctypes.POINTER(NautilusWindow)),
	("mode",		ctypes.c_int),] )

nautilus_window_report_load_underway = _rpythonic_function_(		"nautilus_window_report_load_underway", ctypes.c_void_p, [
	("window",		ctypes.POINTER(NautilusWindow)),
	("view",		ctypes.POINTER(NautilusView)),] )

nautilus_window_view_visible = _rpythonic_function_(		"nautilus_window_view_visible", ctypes.c_void_p, [
	("window",		ctypes.POINTER(NautilusWindow)),
	("view",		ctypes.POINTER(NautilusView)),] )

nautilus_window_get_active_slot = _rpythonic_function_(		"nautilus_window_get_active_slot", ctypes.POINTER(NautilusWindowSlot), [
	("window",		ctypes.POINTER(NautilusWindow)),] )

nautilus_window_open_slot = _rpythonic_function_(		"nautilus_window_open_slot", ctypes.POINTER(NautilusWindowSlot), [
	("window",		ctypes.POINTER(NautilusWindow)),
	("flags",		ctypes.c_int),] )

nautilus_window_slot_close = _rpythonic_function_(		"nautilus_window_slot_close", ctypes.c_void_p, [
	("window",		ctypes.POINTER(NautilusWindow)),
	("slot",		ctypes.POINTER(NautilusWindowSlot)),] )

nautilus_window_ensure_location_bar = _rpythonic_function_(		"nautilus_window_ensure_location_bar", ctypes.POINTER(_GtkWidget), [
	("window",		ctypes.POINTER(NautilusWindow)),] )

nautilus_window_sync_location_widgets = _rpythonic_function_(		"nautilus_window_sync_location_widgets", ctypes.c_void_p, [
	("window",		ctypes.POINTER(NautilusWindow)),] )

nautilus_window_sync_search_widgets = _rpythonic_function_(		"nautilus_window_sync_search_widgets", ctypes.c_void_p, [
	("window",		ctypes.POINTER(NautilusWindow)),] )

nautilus_window_grab_focus = _rpythonic_function_(		"nautilus_window_grab_focus", ctypes.c_void_p, [
	("window",		ctypes.POINTER(NautilusWindow)),] )

nautilus_window_hide_sidebar = _rpythonic_function_(		"nautilus_window_hide_sidebar", ctypes.c_void_p, [
	("window",		ctypes.POINTER(NautilusWindow)),] )

nautilus_window_show_sidebar = _rpythonic_function_(		"nautilus_window_show_sidebar", ctypes.c_void_p, [
	("window",		ctypes.POINTER(NautilusWindow)),] )

nautilus_window_back_or_forward = _rpythonic_function_(		"nautilus_window_back_or_forward", ctypes.c_void_p, [
	("window",		ctypes.POINTER(NautilusWindow)),
	("back",		ctypes.c_int),
	("distance",		ctypes.c_uint),
	("flags",		ctypes.c_int),] )

nautilus_window_disable_chrome_mapping = _rpythonic_function_(		"nautilus_window_disable_chrome_mapping", ctypes.c_int, [
	("value",		ctypes.POINTER(_GValue)),
	("variant",		ctypes.POINTER(_GVariant)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_event_get_window_open_flags = _rpythonic_function_(		"nautilus_event_get_window_open_flags", ctypes.c_int, [] )

nautilus_window_show_about_dialog = _rpythonic_function_(		"nautilus_window_show_about_dialog", ctypes.c_void_p, [
	("window",		ctypes.POINTER(NautilusWindow)),] )

nautilus_operation_result_get_type = _rpythonic_function_(		"nautilus_operation_result_get_type", ctypes.c_uint, [] )

nautilus_module_initialize = _rpythonic_function_(		"nautilus_module_initialize", ctypes.c_void_p, [
	("module",		ctypes.POINTER(_GTypeModule)),] )

nautilus_module_shutdown = _rpythonic_function_(		"nautilus_module_shutdown", ctypes.c_void_p, [] )

nautilus_module_list_types = _rpythonic_function_(		"nautilus_module_list_types", ctypes.c_void_p, [
	("types",		ctypes.POINTER(ctypes.POINTER(ctypes.c_uint))),
	("num_types",		ctypes.POINTER(ctypes.c_int)),] )

nautilus_column_get_type = _rpythonic_function_(		"nautilus_column_get_type", ctypes.c_uint, [] )

nautilus_column_new = _rpythonic_function_(		"nautilus_column_new", ctypes.POINTER(_NautilusColumn), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("label",		ctypes.POINTER(ctypes.c_char)),
	("description",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_column_provider_get_type = _rpythonic_function_(		"nautilus_column_provider_get_type", ctypes.c_uint, [] )

get_columns = _rpythonic_function_(		"get_columns", ctypes.POINTER(_GList), [
	("provider",		ctypes.POINTER(_NautilusColumnProvider)),] )

nautilus_column_provider_get_columns = _rpythonic_function_(		"nautilus_column_provider_get_columns", ctypes.POINTER(_GList), [
	("provider",		ctypes.POINTER(_NautilusColumnProvider)),] )

is_gone = _rpythonic_function_(		"is_gone", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

get_parent_uri = _rpythonic_function_(		"get_parent_uri", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(NautilusFile)),] )

is_mime_type = _rpythonic_function_(		"is_mime_type", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),
	("mime_Type",		ctypes.POINTER(ctypes.c_char)),] )

is_directory = _rpythonic_function_(		"is_directory", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

add_emblem = _rpythonic_function_(		"add_emblem", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),
	("emblem_name",		ctypes.POINTER(ctypes.c_char)),] )

get_string_attribute = _rpythonic_function_(		"get_string_attribute", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(NautilusFile)),
	("attribute_name",		ctypes.POINTER(ctypes.c_char)),] )

add_string_attribute = _rpythonic_function_(		"add_string_attribute", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),
	("attribute_name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

invalidate_extension_info = _rpythonic_function_(		"invalidate_extension_info", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),] )

get_activation_uri = _rpythonic_function_(		"get_activation_uri", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(NautilusFile)),] )

get_file_type = _rpythonic_function_(		"get_file_type", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

get_location = _rpythonic_function_(		"get_location", ctypes.POINTER(_GFile), [
	("file",		ctypes.POINTER(NautilusFile)),] )

get_parent_location = _rpythonic_function_(		"get_parent_location", ctypes.POINTER(_GFile), [
	("file",		ctypes.POINTER(NautilusFile)),] )

get_parent_info = _rpythonic_function_(		"get_parent_info", ctypes.POINTER(NautilusFile), [
	("file",		ctypes.POINTER(NautilusFile)),] )

can_write = _rpythonic_function_(		"can_write", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_info_list_free = _rpythonic_function_(		"nautilus_file_info_list_free", ctypes.c_void_p, [
	("files",		ctypes.POINTER(_GList)),] )

nautilus_file_info_list_copy = _rpythonic_function_(		"nautilus_file_info_list_copy", ctypes.POINTER(_GList), [
	("files",		ctypes.POINTER(_GList)),] )

nautilus_file_info_get_type = _rpythonic_function_(		"nautilus_file_info_get_type", ctypes.c_uint, [] )

nautilus_file_info_is_gone = _rpythonic_function_(		"nautilus_file_info_is_gone", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_info_get_file_type = _rpythonic_function_(		"nautilus_file_info_get_file_type", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_info_get_location = _rpythonic_function_(		"nautilus_file_info_get_location", ctypes.POINTER(_GFile), [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_info_get_name = _rpythonic_function_(		"nautilus_file_info_get_name", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_info_get_uri = _rpythonic_function_(		"nautilus_file_info_get_uri", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_info_get_activation_uri = _rpythonic_function_(		"nautilus_file_info_get_activation_uri", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_info_get_parent_location = _rpythonic_function_(		"nautilus_file_info_get_parent_location", ctypes.POINTER(_GFile), [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_info_get_parent_uri = _rpythonic_function_(		"nautilus_file_info_get_parent_uri", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_info_get_mount = _rpythonic_function_(		"nautilus_file_info_get_mount", ctypes.POINTER(_GMount), [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_info_get_uri_scheme = _rpythonic_function_(		"nautilus_file_info_get_uri_scheme", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_info_get_parent_info = _rpythonic_function_(		"nautilus_file_info_get_parent_info", ctypes.POINTER(NautilusFile), [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_info_get_mime_type = _rpythonic_function_(		"nautilus_file_info_get_mime_type", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_info_is_mime_type = _rpythonic_function_(		"nautilus_file_info_is_mime_type", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),
	("mime_type",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_file_info_is_directory = _rpythonic_function_(		"nautilus_file_info_is_directory", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_info_can_write = _rpythonic_function_(		"nautilus_file_info_can_write", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_info_add_emblem = _rpythonic_function_(		"nautilus_file_info_add_emblem", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),
	("emblem_name",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_file_info_get_string_attribute = _rpythonic_function_(		"nautilus_file_info_get_string_attribute", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(NautilusFile)),
	("attribute_name",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_file_info_add_string_attribute = _rpythonic_function_(		"nautilus_file_info_add_string_attribute", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),
	("attribute_name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_file_info_invalidate_extension_info = _rpythonic_function_(		"nautilus_file_info_invalidate_extension_info", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_info_lookup = _rpythonic_function_(		"nautilus_file_info_lookup", ctypes.POINTER(NautilusFile), [
	("location",		ctypes.POINTER(_GFile)),] )

nautilus_file_info_create = _rpythonic_function_(		"nautilus_file_info_create", ctypes.POINTER(NautilusFile), [
	("location",		ctypes.POINTER(_GFile)),] )

nautilus_file_info_lookup_for_uri = _rpythonic_function_(		"nautilus_file_info_lookup_for_uri", ctypes.POINTER(NautilusFile), [
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_file_info_create_for_uri = _rpythonic_function_(		"nautilus_file_info_create_for_uri", ctypes.POINTER(NautilusFile), [
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_file_info_getter = _rpythonic_function_(		"nautilus_file_info_getter", ctypes.POINTER(NautilusFile), [
	("location",		ctypes.POINTER(_GFile)),
	("create",		ctypes.c_int),] )

NautilusInfoProviderUpdateComplete = _rpythonic_function_(		"NautilusInfoProviderUpdateComplete", ctypes.c_void_p, [
	("provider",		ctypes.POINTER(_NautilusInfoProvider)),
	("handle",		ctypes.POINTER(_NautilusOperationHandle)),
	("result",		ctypes.c_int),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

update_file_info = _rpythonic_function_(		"update_file_info", ctypes.c_int, [
	("provider",		ctypes.POINTER(_NautilusInfoProvider)),
	("file",		ctypes.POINTER(NautilusFile)),
	("update_complete",		ctypes.POINTER(_GClosure)),
	("handle",		ctypes.POINTER(ctypes.POINTER(_NautilusOperationHandle))),] )

cancel_update = _rpythonic_function_(		"cancel_update", ctypes.c_void_p, [
	("provider",		ctypes.POINTER(_NautilusInfoProvider)),
	("handle",		ctypes.POINTER(_NautilusOperationHandle)),] )

nautilus_info_provider_get_type = _rpythonic_function_(		"nautilus_info_provider_get_type", ctypes.c_uint, [] )

nautilus_info_provider_update_file_info = _rpythonic_function_(		"nautilus_info_provider_update_file_info", ctypes.c_int, [
	("provider",		ctypes.POINTER(_NautilusInfoProvider)),
	("file",		ctypes.POINTER(NautilusFile)),
	("update_complete",		ctypes.POINTER(_GClosure)),
	("handle",		ctypes.POINTER(ctypes.POINTER(_NautilusOperationHandle))),] )

nautilus_info_provider_cancel_update = _rpythonic_function_(		"nautilus_info_provider_cancel_update", ctypes.c_void_p, [
	("provider",		ctypes.POINTER(_NautilusInfoProvider)),
	("handle",		ctypes.POINTER(_NautilusOperationHandle)),] )

nautilus_info_provider_update_complete_invoke = _rpythonic_function_(		"nautilus_info_provider_update_complete_invoke", ctypes.c_void_p, [
	("update_complete",		ctypes.POINTER(_GClosure)),
	("provider",		ctypes.POINTER(_NautilusInfoProvider)),
	("handle",		ctypes.POINTER(_NautilusOperationHandle)),
	("result",		ctypes.c_int),] )

nautilus_location_widget_provider_get_type = _rpythonic_function_(		"nautilus_location_widget_provider_get_type", ctypes.c_uint, [] )

nautilus_location_widget_provider_get_widget = _rpythonic_function_(		"nautilus_location_widget_provider_get_widget", ctypes.POINTER(_GtkWidget), [
	("provider",		ctypes.POINTER(_NautilusLocationWidgetProvider)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("window",		ctypes.POINTER(_GtkWidget)),] )

nautilus_menu_get_type = _rpythonic_function_(		"nautilus_menu_get_type", ctypes.c_uint, [] )

nautilus_menu_new = _rpythonic_function_(		"nautilus_menu_new", ctypes.POINTER(_NautilusMenu), [] )

nautilus_menu_append_item = _rpythonic_function_(		"nautilus_menu_append_item", ctypes.c_void_p, [
	("menu",		ctypes.POINTER(_NautilusMenu)),
	("item",		ctypes.POINTER(_NautilusMenuItem)),] )

nautilus_menu_get_items = _rpythonic_function_(		"nautilus_menu_get_items", ctypes.POINTER(_GList), [
	("menu",		ctypes.POINTER(_NautilusMenu)),] )

nautilus_menu_item_list_free = _rpythonic_function_(		"nautilus_menu_item_list_free", ctypes.c_void_p, [
	("item_list",		ctypes.POINTER(_GList)),] )

nautilus_menu_item_get_type = _rpythonic_function_(		"nautilus_menu_item_get_type", ctypes.c_uint, [] )

nautilus_menu_item_new = _rpythonic_function_(		"nautilus_menu_item_new", ctypes.POINTER(_NautilusMenuItem), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("label",		ctypes.POINTER(ctypes.c_char)),
	("tip",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_menu_item_activate = _rpythonic_function_(		"nautilus_menu_item_activate", ctypes.c_void_p, [
	("item",		ctypes.POINTER(_NautilusMenuItem)),] )

nautilus_menu_item_set_submenu = _rpythonic_function_(		"nautilus_menu_item_set_submenu", ctypes.c_void_p, [
	("item",		ctypes.POINTER(_NautilusMenuItem)),
	("menu",		ctypes.POINTER(_NautilusMenu)),] )

get_file_items = _rpythonic_function_(		"get_file_items", ctypes.POINTER(_GList), [
	("provider",		ctypes.POINTER(_NautilusMenuProvider)),
	("window",		ctypes.POINTER(_GtkWidget)),
	("files",		ctypes.POINTER(_GList)),] )

get_background_items = _rpythonic_function_(		"get_background_items", ctypes.POINTER(_GList), [
	("provider",		ctypes.POINTER(_NautilusMenuProvider)),
	("window",		ctypes.POINTER(_GtkWidget)),
	("current_folder",		ctypes.POINTER(NautilusFile)),] )

nautilus_menu_provider_get_type = _rpythonic_function_(		"nautilus_menu_provider_get_type", ctypes.c_uint, [] )

nautilus_menu_provider_get_file_items = _rpythonic_function_(		"nautilus_menu_provider_get_file_items", ctypes.POINTER(_GList), [
	("provider",		ctypes.POINTER(_NautilusMenuProvider)),
	("window",		ctypes.POINTER(_GtkWidget)),
	("files",		ctypes.POINTER(_GList)),] )

nautilus_menu_provider_get_background_items = _rpythonic_function_(		"nautilus_menu_provider_get_background_items", ctypes.POINTER(_GList), [
	("provider",		ctypes.POINTER(_NautilusMenuProvider)),
	("window",		ctypes.POINTER(_GtkWidget)),
	("current_folder",		ctypes.POINTER(NautilusFile)),] )

nautilus_menu_provider_emit_items_updated_signal = _rpythonic_function_(		"nautilus_menu_provider_emit_items_updated_signal", ctypes.c_void_p, [
	("provider",		ctypes.POINTER(_NautilusMenuProvider)),] )

nautilus_property_page_get_type = _rpythonic_function_(		"nautilus_property_page_get_type", ctypes.c_uint, [] )

nautilus_property_page_new = _rpythonic_function_(		"nautilus_property_page_new", ctypes.POINTER(_NautilusPropertyPage), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("label",		ctypes.POINTER(_GtkWidget)),
	("page",		ctypes.POINTER(_GtkWidget)),] )

nautilus_property_page_provider_get_type = _rpythonic_function_(		"nautilus_property_page_provider_get_type", ctypes.c_uint, [] )

get_pages = _rpythonic_function_(		"get_pages", ctypes.POINTER(_GList), [
	("provider",		ctypes.POINTER(_NautilusPropertyPageProvider)),
	("files",		ctypes.POINTER(_GList)),] )

nautilus_property_page_provider_get_pages = _rpythonic_function_(		"nautilus_property_page_provider_get_pages", ctypes.POINTER(_GList), [
	("provider",		ctypes.POINTER(_NautilusPropertyPageProvider)),
	("files",		ctypes.POINTER(_GList)),] )

nautilus_cell_renderer_text_ellipsized_get_type = _rpythonic_function_(		"nautilus_cell_renderer_text_ellipsized_get_type", ctypes.c_uint, [] )

nautilus_cell_renderer_text_ellipsized_new = _rpythonic_function_(		"nautilus_cell_renderer_text_ellipsized_new", ctypes.POINTER(_GtkCellRenderer), [] )

clipboard_changed = _rpythonic_function_(		"clipboard_changed", ctypes.c_void_p, [
	("monitor",		ctypes.POINTER(NautilusClipboardMonitor)),] )

clipboard_info = _rpythonic_function_(		"clipboard_info", ctypes.c_void_p, [
	("monitor",		ctypes.POINTER(NautilusClipboardMonitor)),
	("info",		ctypes.POINTER(NautilusClipboardInfo)),] )

nautilus_clipboard_monitor_get_type = _rpythonic_function_(		"nautilus_clipboard_monitor_get_type", ctypes.c_uint, [] )

nautilus_clipboard_monitor_get = _rpythonic_function_(		"nautilus_clipboard_monitor_get", ctypes.POINTER(NautilusClipboardMonitor), [] )

nautilus_clipboard_monitor_set_clipboard_info = _rpythonic_function_(		"nautilus_clipboard_monitor_set_clipboard_info", ctypes.c_void_p, [
	("monitor",		ctypes.POINTER(NautilusClipboardMonitor)),
	("info",		ctypes.POINTER(NautilusClipboardInfo)),] )

nautilus_clipboard_monitor_get_clipboard_info = _rpythonic_function_(		"nautilus_clipboard_monitor_get_clipboard_info", ctypes.POINTER(NautilusClipboardInfo), [
	("monitor",		ctypes.POINTER(NautilusClipboardMonitor)),] )

nautilus_clipboard_monitor_emit_changed = _rpythonic_function_(		"nautilus_clipboard_monitor_emit_changed", ctypes.c_void_p, [] )

nautilus_clear_clipboard_callback = _rpythonic_function_(		"nautilus_clear_clipboard_callback", ctypes.c_void_p, [
	("clipboard",		ctypes.POINTER(_GtkClipboard)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_get_clipboard_callback = _rpythonic_function_(		"nautilus_get_clipboard_callback", ctypes.c_void_p, [
	("clipboard",		ctypes.POINTER(_GtkClipboard)),
	("selection_data",		ctypes.POINTER(_GtkSelectionData)),
	("info",		ctypes.c_uint),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_clipboard_set_up_editable = _rpythonic_function_(		"nautilus_clipboard_set_up_editable", ctypes.c_void_p, [
	("target",		ctypes.POINTER(_GtkEditable)),
	("ui_manager",		ctypes.POINTER(_GtkUIManager)),
	("shares_selection_changes",		ctypes.c_int),] )

nautilus_clipboard_clear_if_colliding_uris = _rpythonic_function_(		"nautilus_clipboard_clear_if_colliding_uris", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("item_uris",		ctypes.POINTER(_GList)),
	("copied_files_atom",		ctypes.POINTER(_GdkAtom)),] )

nautilus_clipboard_get = _rpythonic_function_(		"nautilus_clipboard_get", ctypes.POINTER(_GtkClipboard), [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

nautilus_clipboard_get_uri_list_from_selection_data = _rpythonic_function_(		"nautilus_clipboard_get_uri_list_from_selection_data", ctypes.POINTER(_GList), [
	("selection_data",		ctypes.POINTER(_GtkSelectionData)),
	("cut",		ctypes.POINTER(ctypes.c_int)),
	("copied_files_atom",		ctypes.POINTER(_GdkAtom)),] )

nautilus_column_chooser_get_type = _rpythonic_function_(		"nautilus_column_chooser_get_type", ctypes.c_uint, [] )

use_default = _rpythonic_function_(		"use_default", ctypes.c_void_p, [
	("chooser",		ctypes.POINTER(NautilusColumnChooser)),] )

nautilus_column_chooser_new = _rpythonic_function_(		"nautilus_column_chooser_new", ctypes.POINTER(_GtkWidget), [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_column_chooser_set_settings = _rpythonic_function_(		"nautilus_column_chooser_set_settings", ctypes.c_void_p, [
	("chooser",		ctypes.POINTER(NautilusColumnChooser)),
	("visible_columns",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("column_order",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

nautilus_column_chooser_get_settings = _rpythonic_function_(		"nautilus_column_chooser_get_settings", ctypes.c_void_p, [
	("chooser",		ctypes.POINTER(NautilusColumnChooser)),
	("visible_columns",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(ctypes.c_char)))),
	("column_order",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(ctypes.c_char)))),] )

nautilus_get_all_columns = _rpythonic_function_(		"nautilus_get_all_columns", ctypes.POINTER(_GList), [] )

nautilus_get_common_columns = _rpythonic_function_(		"nautilus_get_common_columns", ctypes.POINTER(_GList), [] )

nautilus_get_columns_for_file = _rpythonic_function_(		"nautilus_get_columns_for_file", ctypes.POINTER(_GList), [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_column_list_copy = _rpythonic_function_(		"nautilus_column_list_copy", ctypes.POINTER(_GList), [
	("columns",		ctypes.POINTER(_GList)),] )

nautilus_column_list_free = _rpythonic_function_(		"nautilus_column_list_free", ctypes.c_void_p, [
	("columns",		ctypes.POINTER(_GList)),] )

nautilus_sort_columns = _rpythonic_function_(		"nautilus_sort_columns", ctypes.POINTER(_GList), [
	("columns",		ctypes.POINTER(_GList)),
	("column_order",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

nautilus_dbus_manager_start = _rpythonic_function_(		"nautilus_dbus_manager_start", ctypes.c_void_p, [
	("application",		ctypes.POINTER(_GApplication)),] )

nautilus_dbus_manager_stop = _rpythonic_function_(		"nautilus_dbus_manager_stop", ctypes.c_void_p, [] )

nautilus_desktop_background_get_type = _rpythonic_function_(		"nautilus_desktop_background_get_type", ctypes.c_uint, [] )

nautilus_desktop_background_new = _rpythonic_function_(		"nautilus_desktop_background_new", ctypes.POINTER(NautilusDesktopBackground), [
	("container",		ctypes.POINTER(NautilusIconContainer)),] )

nautilus_desktop_background_receive_dropped_background_image = _rpythonic_function_(		"nautilus_desktop_background_receive_dropped_background_image", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(NautilusDesktopBackground)),
	("image_uri",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_desktop_directory_file_get_type = _rpythonic_function_(		"nautilus_desktop_directory_file_get_type", ctypes.c_uint, [] )

nautilus_desktop_directory_get_type = _rpythonic_function_(		"nautilus_desktop_directory_get_type", ctypes.c_uint, [] )

nautilus_desktop_directory_get_real_directory = _rpythonic_function_(		"nautilus_desktop_directory_get_real_directory", ctypes.POINTER(NautilusDirectory), [
	("desktop_directory",		ctypes.POINTER(NautilusDesktopDirectory)),] )

nautilus_desktop_link_get_type = _rpythonic_function_(		"nautilus_desktop_link_get_type", ctypes.c_uint, [] )

nautilus_desktop_link_new = _rpythonic_function_(		"nautilus_desktop_link_new", ctypes.POINTER(NautilusDesktopLink), [
	("C_type",		ctypes.c_int),] )

nautilus_desktop_link_new_from_mount = _rpythonic_function_(		"nautilus_desktop_link_new_from_mount", ctypes.POINTER(NautilusDesktopLink), [
	("mount",		ctypes.POINTER(_GMount)),] )

nautilus_desktop_link_get_link_type = _rpythonic_function_(		"nautilus_desktop_link_get_link_type", ctypes.c_int, [
	("link",		ctypes.POINTER(NautilusDesktopLink)),] )

nautilus_desktop_link_get_file_name = _rpythonic_function_(		"nautilus_desktop_link_get_file_name", ctypes.POINTER(ctypes.c_char), [
	("link",		ctypes.POINTER(NautilusDesktopLink)),] )

nautilus_desktop_link_get_display_name = _rpythonic_function_(		"nautilus_desktop_link_get_display_name", ctypes.POINTER(ctypes.c_char), [
	("link",		ctypes.POINTER(NautilusDesktopLink)),] )

nautilus_desktop_link_get_icon = _rpythonic_function_(		"nautilus_desktop_link_get_icon", ctypes.POINTER(_GIcon), [
	("link",		ctypes.POINTER(NautilusDesktopLink)),] )

nautilus_desktop_link_get_activation_location = _rpythonic_function_(		"nautilus_desktop_link_get_activation_location", ctypes.POINTER(_GFile), [
	("link",		ctypes.POINTER(NautilusDesktopLink)),] )

nautilus_desktop_link_get_activation_uri = _rpythonic_function_(		"nautilus_desktop_link_get_activation_uri", ctypes.POINTER(ctypes.c_char), [
	("link",		ctypes.POINTER(NautilusDesktopLink)),] )

nautilus_desktop_link_get_date = _rpythonic_function_(		"nautilus_desktop_link_get_date", ctypes.c_int, [
	("link",		ctypes.POINTER(NautilusDesktopLink)),
	("date_type",		ctypes.c_int),
	("date",		ctypes.POINTER(ctypes.c_int64)),] )

nautilus_desktop_link_get_mount = _rpythonic_function_(		"nautilus_desktop_link_get_mount", ctypes.POINTER(_GMount), [
	("link",		ctypes.POINTER(NautilusDesktopLink)),] )

nautilus_desktop_link_can_rename = _rpythonic_function_(		"nautilus_desktop_link_can_rename", ctypes.c_int, [
	("link",		ctypes.POINTER(NautilusDesktopLink)),] )

nautilus_desktop_link_rename = _rpythonic_function_(		"nautilus_desktop_link_rename", ctypes.c_int, [
	("link",		ctypes.POINTER(NautilusDesktopLink)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_desktop_icon_file_get_type = _rpythonic_function_(		"nautilus_desktop_icon_file_get_type", ctypes.c_uint, [] )

nautilus_desktop_icon_file_new = _rpythonic_function_(		"nautilus_desktop_icon_file_new", ctypes.POINTER(NautilusDesktopIconFile), [
	("link",		ctypes.POINTER(NautilusDesktopLink)),] )

nautilus_desktop_icon_file_update = _rpythonic_function_(		"nautilus_desktop_icon_file_update", ctypes.c_void_p, [
	("icon_file",		ctypes.POINTER(NautilusDesktopIconFile)),] )

nautilus_desktop_icon_file_remove = _rpythonic_function_(		"nautilus_desktop_icon_file_remove", ctypes.c_void_p, [
	("icon_file",		ctypes.POINTER(NautilusDesktopIconFile)),] )

nautilus_desktop_icon_file_get_link = _rpythonic_function_(		"nautilus_desktop_icon_file_get_link", ctypes.POINTER(NautilusDesktopLink), [
	("icon_file",		ctypes.POINTER(NautilusDesktopIconFile)),] )

nautilus_desktop_link_monitor_get_type = _rpythonic_function_(		"nautilus_desktop_link_monitor_get_type", ctypes.c_uint, [] )

nautilus_desktop_link_monitor_get = _rpythonic_function_(		"nautilus_desktop_link_monitor_get", ctypes.POINTER(NautilusDesktopLinkMonitor), [] )

nautilus_desktop_link_monitor_delete_link = _rpythonic_function_(		"nautilus_desktop_link_monitor_delete_link", ctypes.c_void_p, [
	("monitor",		ctypes.POINTER(NautilusDesktopLinkMonitor)),
	("link",		ctypes.POINTER(NautilusDesktopLink)),
	("parent_view",		ctypes.POINTER(_GtkWidget)),] )

nautilus_desktop_link_monitor_make_filename_unique = _rpythonic_function_(		"nautilus_desktop_link_monitor_make_filename_unique", ctypes.POINTER(ctypes.c_char), [
	("monitor",		ctypes.POINTER(NautilusDesktopLinkMonitor)),
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_desktop_set_metadata_string = _rpythonic_function_(		"nautilus_desktop_set_metadata_string", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("string",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_desktop_set_metadata_stringv = _rpythonic_function_(		"nautilus_desktop_set_metadata_stringv", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("stringv",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

nautilus_desktop_update_metadata_from_keyfile = _rpythonic_function_(		"nautilus_desktop_update_metadata_from_keyfile", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_directory_notify_files_added = _rpythonic_function_(		"nautilus_directory_notify_files_added", ctypes.c_void_p, [
	("files",		ctypes.POINTER(_GList)),] )

nautilus_directory_notify_files_moved = _rpythonic_function_(		"nautilus_directory_notify_files_moved", ctypes.c_void_p, [
	("file_pairs",		ctypes.POINTER(_GList)),] )

nautilus_directory_notify_files_changed = _rpythonic_function_(		"nautilus_directory_notify_files_changed", ctypes.c_void_p, [
	("files",		ctypes.POINTER(_GList)),] )

nautilus_directory_notify_files_removed = _rpythonic_function_(		"nautilus_directory_notify_files_removed", ctypes.c_void_p, [
	("files",		ctypes.POINTER(_GList)),] )

nautilus_directory_schedule_metadata_copy = _rpythonic_function_(		"nautilus_directory_schedule_metadata_copy", ctypes.c_void_p, [
	("file_pairs",		ctypes.POINTER(_GList)),] )

nautilus_directory_schedule_metadata_move = _rpythonic_function_(		"nautilus_directory_schedule_metadata_move", ctypes.c_void_p, [
	("file_pairs",		ctypes.POINTER(_GList)),] )

nautilus_directory_schedule_metadata_remove = _rpythonic_function_(		"nautilus_directory_schedule_metadata_remove", ctypes.c_void_p, [
	("files",		ctypes.POINTER(_GList)),] )

nautilus_directory_notify_files_added_by_uri = _rpythonic_function_(		"nautilus_directory_notify_files_added_by_uri", ctypes.c_void_p, [
	("uris",		ctypes.POINTER(_GList)),] )

nautilus_directory_notify_files_changed_by_uri = _rpythonic_function_(		"nautilus_directory_notify_files_changed_by_uri", ctypes.c_void_p, [
	("uris",		ctypes.POINTER(_GList)),] )

nautilus_directory_notify_files_moved_by_uri = _rpythonic_function_(		"nautilus_directory_notify_files_moved_by_uri", ctypes.c_void_p, [
	("uri_pairs",		ctypes.POINTER(_GList)),] )

nautilus_directory_notify_files_removed_by_uri = _rpythonic_function_(		"nautilus_directory_notify_files_removed_by_uri", ctypes.c_void_p, [
	("uris",		ctypes.POINTER(_GList)),] )

nautilus_directory_schedule_metadata_copy_by_uri = _rpythonic_function_(		"nautilus_directory_schedule_metadata_copy_by_uri", ctypes.c_void_p, [
	("uri_pairs",		ctypes.POINTER(_GList)),] )

nautilus_directory_schedule_metadata_move_by_uri = _rpythonic_function_(		"nautilus_directory_schedule_metadata_move_by_uri", ctypes.c_void_p, [
	("uri_pairs",		ctypes.POINTER(_GList)),] )

nautilus_directory_schedule_metadata_remove_by_uri = _rpythonic_function_(		"nautilus_directory_schedule_metadata_remove_by_uri", ctypes.c_void_p, [
	("uris",		ctypes.POINTER(_GList)),] )

nautilus_directory_schedule_position_set = _rpythonic_function_(		"nautilus_directory_schedule_position_set", ctypes.c_void_p, [
	("position_setting_list",		ctypes.POINTER(_GList)),] )

nautilus_file_changed = _rpythonic_function_(		"nautilus_file_changed", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),] )

eel_uri_is_trash = _rpythonic_function_(		"eel_uri_is_trash", ctypes.c_int, [
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

eel_uri_is_trash_folder = _rpythonic_function_(		"eel_uri_is_trash_folder", ctypes.c_int, [
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

eel_uri_is_in_trash = _rpythonic_function_(		"eel_uri_is_in_trash", ctypes.c_int, [
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

eel_uri_is_desktop = _rpythonic_function_(		"eel_uri_is_desktop", ctypes.c_int, [
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

eel_uri_is_search = _rpythonic_function_(		"eel_uri_is_search", ctypes.c_int, [
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

eel_make_valid_utf8 = _rpythonic_function_(		"eel_make_valid_utf8", ctypes.POINTER(ctypes.c_char), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

eel_filename_strip_extension = _rpythonic_function_(		"eel_filename_strip_extension", ctypes.POINTER(ctypes.c_char), [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

eel_filename_get_rename_region = _rpythonic_function_(		"eel_filename_get_rename_region", ctypes.c_void_p, [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("start_offset",		ctypes.POINTER(ctypes.c_int)),
	("end_offset",		ctypes.POINTER(ctypes.c_int)),] )

eel_filename_get_extension_offset = _rpythonic_function_(		"eel_filename_get_extension_offset", ctypes.POINTER(ctypes.c_char), [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_file_queue_new = _rpythonic_function_(		"nautilus_file_queue_new", ctypes.POINTER(NautilusFileQueue), [] )

nautilus_file_queue_destroy = _rpythonic_function_(		"nautilus_file_queue_destroy", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(NautilusFileQueue)),] )

nautilus_file_queue_enqueue = _rpythonic_function_(		"nautilus_file_queue_enqueue", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(NautilusFileQueue)),
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_queue_dequeue = _rpythonic_function_(		"nautilus_file_queue_dequeue", ctypes.POINTER(NautilusFile), [
	("queue",		ctypes.POINTER(NautilusFileQueue)),] )

nautilus_file_queue_remove = _rpythonic_function_(		"nautilus_file_queue_remove", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(NautilusFileQueue)),
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_queue_head = _rpythonic_function_(		"nautilus_file_queue_head", ctypes.POINTER(NautilusFile), [
	("queue",		ctypes.POINTER(NautilusFileQueue)),] )

nautilus_file_queue_is_empty = _rpythonic_function_(		"nautilus_file_queue_is_empty", ctypes.c_int, [
	("queue",		ctypes.POINTER(NautilusFileQueue)),] )

nautilus_monitor_active = _rpythonic_function_(		"nautilus_monitor_active", ctypes.c_int, [] )

nautilus_monitor_directory = _rpythonic_function_(		"nautilus_monitor_directory", ctypes.POINTER(NautilusMonitor), [
	("location",		ctypes.POINTER(_GFile)),] )

nautilus_monitor_cancel = _rpythonic_function_(		"nautilus_monitor_cancel", ctypes.c_void_p, [
	("monitor",		ctypes.POINTER(NautilusMonitor)),] )

xmlCheckVersion = _rpythonic_function_(		"xmlCheckVersion", ctypes.c_void_p, [
	("version",		ctypes.c_int),] )

xmlStrdup = _rpythonic_function_(		"xmlStrdup", ctypes.POINTER(ctypes.c_ubyte), [
	("cur",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlStrndup = _rpythonic_function_(		"xmlStrndup", ctypes.POINTER(ctypes.c_ubyte), [
	("cur",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlCharStrndup = _rpythonic_function_(		"xmlCharStrndup", ctypes.POINTER(ctypes.c_ubyte), [
	("cur",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

xmlCharStrdup = _rpythonic_function_(		"xmlCharStrdup", ctypes.POINTER(ctypes.c_ubyte), [
	("cur",		ctypes.POINTER(ctypes.c_char)),] )

xmlStrsub = _rpythonic_function_(		"xmlStrsub", ctypes.POINTER(ctypes.c_ubyte), [
	("C_str",		ctypes.POINTER(ctypes.c_ubyte)),
	("start",		ctypes.c_int),
	("C_len",		ctypes.c_int),] )

xmlStrchr = _rpythonic_function_(		"xmlStrchr", ctypes.POINTER(ctypes.c_ubyte), [
	("C_str",		ctypes.POINTER(ctypes.c_ubyte)),
	("val",		ctypes.c_ubyte),] )

xmlStrstr = _rpythonic_function_(		"xmlStrstr", ctypes.POINTER(ctypes.c_ubyte), [
	("C_str",		ctypes.POINTER(ctypes.c_ubyte)),
	("val",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlStrcasestr = _rpythonic_function_(		"xmlStrcasestr", ctypes.POINTER(ctypes.c_ubyte), [
	("C_str",		ctypes.POINTER(ctypes.c_ubyte)),
	("val",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlStrcmp = _rpythonic_function_(		"xmlStrcmp", ctypes.c_int, [
	("str1",		ctypes.POINTER(ctypes.c_ubyte)),
	("str2",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlStrncmp = _rpythonic_function_(		"xmlStrncmp", ctypes.c_int, [
	("str1",		ctypes.POINTER(ctypes.c_ubyte)),
	("str2",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlStrcasecmp = _rpythonic_function_(		"xmlStrcasecmp", ctypes.c_int, [
	("str1",		ctypes.POINTER(ctypes.c_ubyte)),
	("str2",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlStrncasecmp = _rpythonic_function_(		"xmlStrncasecmp", ctypes.c_int, [
	("str1",		ctypes.POINTER(ctypes.c_ubyte)),
	("str2",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlStrEqual = _rpythonic_function_(		"xmlStrEqual", ctypes.c_int, [
	("str1",		ctypes.POINTER(ctypes.c_ubyte)),
	("str2",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlStrQEqual = _rpythonic_function_(		"xmlStrQEqual", ctypes.c_int, [
	("pref",		ctypes.POINTER(ctypes.c_ubyte)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_str",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlStrlen = _rpythonic_function_(		"xmlStrlen", ctypes.c_int, [
	("C_str",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlStrcat = _rpythonic_function_(		"xmlStrcat", ctypes.POINTER(ctypes.c_ubyte), [
	("cur",		ctypes.POINTER(ctypes.c_ubyte)),
	("add",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlStrncat = _rpythonic_function_(		"xmlStrncat", ctypes.POINTER(ctypes.c_ubyte), [
	("cur",		ctypes.POINTER(ctypes.c_ubyte)),
	("add",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlStrncatNew = _rpythonic_function_(		"xmlStrncatNew", ctypes.POINTER(ctypes.c_ubyte), [
	("str1",		ctypes.POINTER(ctypes.c_ubyte)),
	("str2",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlStrVPrintf = _rpythonic_function_(		"xmlStrVPrintf", ctypes.c_int, [
	("buf",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),
	("msg",		ctypes.POINTER(ctypes.c_ubyte)),
	("ap",		ctypes.c_char),] )

xmlGetUTF8Char = _rpythonic_function_(		"xmlGetUTF8Char", ctypes.c_int, [
	("utf",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.POINTER(ctypes.c_int)),] )

xmlCheckUTF8 = _rpythonic_function_(		"xmlCheckUTF8", ctypes.c_int, [
	("utf",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlUTF8Strsize = _rpythonic_function_(		"xmlUTF8Strsize", ctypes.c_int, [
	("utf",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlUTF8Strndup = _rpythonic_function_(		"xmlUTF8Strndup", ctypes.POINTER(ctypes.c_ubyte), [
	("utf",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlUTF8Strpos = _rpythonic_function_(		"xmlUTF8Strpos", ctypes.POINTER(ctypes.c_ubyte), [
	("utf",		ctypes.POINTER(ctypes.c_ubyte)),
	("pos",		ctypes.c_int),] )

xmlUTF8Strloc = _rpythonic_function_(		"xmlUTF8Strloc", ctypes.c_int, [
	("utf",		ctypes.POINTER(ctypes.c_ubyte)),
	("utfchar",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlUTF8Strsub = _rpythonic_function_(		"xmlUTF8Strsub", ctypes.POINTER(ctypes.c_ubyte), [
	("utf",		ctypes.POINTER(ctypes.c_ubyte)),
	("start",		ctypes.c_int),
	("C_len",		ctypes.c_int),] )

xmlUTF8Strlen = _rpythonic_function_(		"xmlUTF8Strlen", ctypes.c_int, [
	("utf",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlUTF8Size = _rpythonic_function_(		"xmlUTF8Size", ctypes.c_int, [
	("utf",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlUTF8Charcmp = _rpythonic_function_(		"xmlUTF8Charcmp", ctypes.c_int, [
	("utf1",		ctypes.POINTER(ctypes.c_ubyte)),
	("utf2",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlDictCreate = _rpythonic_function_(		"xmlDictCreate", ctypes.POINTER(_xmlDict), [] )

xmlDictCreateSub = _rpythonic_function_(		"xmlDictCreateSub", ctypes.POINTER(_xmlDict), [
	("sub",		ctypes.POINTER(_xmlDict)),] )

xmlDictReference = _rpythonic_function_(		"xmlDictReference", ctypes.c_int, [
	("C_dict",		ctypes.POINTER(_xmlDict)),] )

xmlDictFree = _rpythonic_function_(		"xmlDictFree", ctypes.c_void_p, [
	("C_dict",		ctypes.POINTER(_xmlDict)),] )

xmlDictLookup = _rpythonic_function_(		"xmlDictLookup", ctypes.POINTER(ctypes.c_ubyte), [
	("C_dict",		ctypes.POINTER(_xmlDict)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlDictExists = _rpythonic_function_(		"xmlDictExists", ctypes.POINTER(ctypes.c_ubyte), [
	("C_dict",		ctypes.POINTER(_xmlDict)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlDictQLookup = _rpythonic_function_(		"xmlDictQLookup", ctypes.POINTER(ctypes.c_ubyte), [
	("C_dict",		ctypes.POINTER(_xmlDict)),
	("prefix",		ctypes.POINTER(ctypes.c_ubyte)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlDictOwns = _rpythonic_function_(		"xmlDictOwns", ctypes.c_int, [
	("C_dict",		ctypes.POINTER(_xmlDict)),
	("C_str",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlDictSize = _rpythonic_function_(		"xmlDictSize", ctypes.c_int, [
	("C_dict",		ctypes.POINTER(_xmlDict)),] )

xmlDictCleanup = _rpythonic_function_(		"xmlDictCleanup", ctypes.c_void_p, [] )

xmlRegexpCompile = _rpythonic_function_(		"xmlRegexpCompile", ctypes.POINTER(_xmlRegexp), [
	("regexp",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlRegFreeRegexp = _rpythonic_function_(		"xmlRegFreeRegexp", ctypes.c_void_p, [
	("regexp",		ctypes.POINTER(_xmlRegexp)),] )

xmlRegexpExec = _rpythonic_function_(		"xmlRegexpExec", ctypes.c_int, [
	("comp",		ctypes.POINTER(_xmlRegexp)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlRegexpPrint = _rpythonic_function_(		"xmlRegexpPrint", ctypes.c_void_p, [
	("output",		ctypes.POINTER(_IO_FILE)),
	("regexp",		ctypes.POINTER(_xmlRegexp)),] )

xmlRegexpIsDeterminist = _rpythonic_function_(		"xmlRegexpIsDeterminist", ctypes.c_int, [
	("comp",		ctypes.POINTER(_xmlRegexp)),] )

xmlRegExecCallbacks = _rpythonic_function_(		"xmlRegExecCallbacks", ctypes.c_void_p, [
	("C_exec",		ctypes.POINTER(_xmlRegExecCtxt)),
	("token",		ctypes.POINTER(ctypes.c_ubyte)),
	("transdata",		ctypes.POINTER(ctypes.c_void_p)),
	("inputdata",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlRegNewExecCtxt = _rpythonic_function_(		"xmlRegNewExecCtxt", ctypes.POINTER(_xmlRegExecCtxt), [
	("comp",		ctypes.POINTER(_xmlRegexp)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_xmlRegExecCtxt),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlRegFreeExecCtxt = _rpythonic_function_(		"xmlRegFreeExecCtxt", ctypes.c_void_p, [
	("C_exec",		ctypes.POINTER(_xmlRegExecCtxt)),] )

xmlRegExecPushString = _rpythonic_function_(		"xmlRegExecPushString", ctypes.c_int, [
	("C_exec",		ctypes.POINTER(_xmlRegExecCtxt)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlRegExecPushString2 = _rpythonic_function_(		"xmlRegExecPushString2", ctypes.c_int, [
	("C_exec",		ctypes.POINTER(_xmlRegExecCtxt)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),
	("value2",		ctypes.POINTER(ctypes.c_ubyte)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlRegExecNextValues = _rpythonic_function_(		"xmlRegExecNextValues", ctypes.c_int, [
	("C_exec",		ctypes.POINTER(_xmlRegExecCtxt)),
	("nbval",		ctypes.POINTER(ctypes.c_int)),
	("nbneg",		ctypes.POINTER(ctypes.c_int)),
	("values",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("terminal",		ctypes.POINTER(ctypes.c_int)),] )

xmlRegExecErrInfo = _rpythonic_function_(		"xmlRegExecErrInfo", ctypes.c_int, [
	("C_exec",		ctypes.POINTER(_xmlRegExecCtxt)),
	("string",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("nbval",		ctypes.POINTER(ctypes.c_int)),
	("nbneg",		ctypes.POINTER(ctypes.c_int)),
	("values",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("terminal",		ctypes.POINTER(ctypes.c_int)),] )

xmlExpFreeCtxt = _rpythonic_function_(		"xmlExpFreeCtxt", ctypes.c_void_p, [
	("ctxt",		ctypes.POINTER(_xmlExpCtxt)),] )

xmlExpNewCtxt = _rpythonic_function_(		"xmlExpNewCtxt", ctypes.POINTER(_xmlExpCtxt), [
	("maxNodes",		ctypes.c_int),
	("C_dict",		ctypes.POINTER(_xmlDict)),] )

xmlExpCtxtNbNodes = _rpythonic_function_(		"xmlExpCtxtNbNodes", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlExpCtxt)),] )

xmlExpCtxtNbCons = _rpythonic_function_(		"xmlExpCtxtNbCons", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlExpCtxt)),] )

xmlExpFree = _rpythonic_function_(		"xmlExpFree", ctypes.c_void_p, [
	("ctxt",		ctypes.POINTER(_xmlExpCtxt)),
	("expr",		ctypes.POINTER(_xmlExpNode)),] )

xmlExpRef = _rpythonic_function_(		"xmlExpRef", ctypes.c_void_p, [
	("expr",		ctypes.POINTER(_xmlExpNode)),] )

xmlExpParse = _rpythonic_function_(		"xmlExpParse", ctypes.POINTER(_xmlExpNode), [
	("ctxt",		ctypes.POINTER(_xmlExpCtxt)),
	("expr",		ctypes.POINTER(ctypes.c_char)),] )

xmlExpNewAtom = _rpythonic_function_(		"xmlExpNewAtom", ctypes.POINTER(_xmlExpNode), [
	("ctxt",		ctypes.POINTER(_xmlExpCtxt)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlExpNewOr = _rpythonic_function_(		"xmlExpNewOr", ctypes.POINTER(_xmlExpNode), [
	("ctxt",		ctypes.POINTER(_xmlExpCtxt)),
	("left",		ctypes.POINTER(_xmlExpNode)),
	("right",		ctypes.POINTER(_xmlExpNode)),] )

xmlExpNewSeq = _rpythonic_function_(		"xmlExpNewSeq", ctypes.POINTER(_xmlExpNode), [
	("ctxt",		ctypes.POINTER(_xmlExpCtxt)),
	("left",		ctypes.POINTER(_xmlExpNode)),
	("right",		ctypes.POINTER(_xmlExpNode)),] )

xmlExpNewRange = _rpythonic_function_(		"xmlExpNewRange", ctypes.POINTER(_xmlExpNode), [
	("ctxt",		ctypes.POINTER(_xmlExpCtxt)),
	("subset",		ctypes.POINTER(_xmlExpNode)),
	("min",		ctypes.c_int),
	("max",		ctypes.c_int),] )

xmlExpIsNillable = _rpythonic_function_(		"xmlExpIsNillable", ctypes.c_int, [
	("expr",		ctypes.POINTER(_xmlExpNode)),] )

xmlExpMaxToken = _rpythonic_function_(		"xmlExpMaxToken", ctypes.c_int, [
	("expr",		ctypes.POINTER(_xmlExpNode)),] )

xmlExpGetLanguage = _rpythonic_function_(		"xmlExpGetLanguage", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlExpCtxt)),
	("expr",		ctypes.POINTER(_xmlExpNode)),
	("langList",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("C_len",		ctypes.c_int),] )

xmlExpGetStart = _rpythonic_function_(		"xmlExpGetStart", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlExpCtxt)),
	("expr",		ctypes.POINTER(_xmlExpNode)),
	("tokList",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("C_len",		ctypes.c_int),] )

xmlExpStringDerive = _rpythonic_function_(		"xmlExpStringDerive", ctypes.POINTER(_xmlExpNode), [
	("ctxt",		ctypes.POINTER(_xmlExpCtxt)),
	("expr",		ctypes.POINTER(_xmlExpNode)),
	("C_str",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlExpExpDerive = _rpythonic_function_(		"xmlExpExpDerive", ctypes.POINTER(_xmlExpNode), [
	("ctxt",		ctypes.POINTER(_xmlExpCtxt)),
	("expr",		ctypes.POINTER(_xmlExpNode)),
	("sub",		ctypes.POINTER(_xmlExpNode)),] )

xmlExpSubsume = _rpythonic_function_(		"xmlExpSubsume", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlExpCtxt)),
	("expr",		ctypes.POINTER(_xmlExpNode)),
	("sub",		ctypes.POINTER(_xmlExpNode)),] )

xmlExpDump = _rpythonic_function_(		"xmlExpDump", ctypes.c_void_p, [
	("buf",		ctypes.POINTER(_xmlBuffer)),
	("expr",		ctypes.POINTER(_xmlExpNode)),] )

xmlDOMWrapAcquireNsFunction = _rpythonic_function_(		"xmlDOMWrapAcquireNsFunction", ctypes.POINTER(_xmlNs), [
	("ctxt",		ctypes.POINTER(_xmlDOMWrapCtxt)),
	("node",		ctypes.POINTER(_xmlNode)),
	("nsName",		ctypes.POINTER(ctypes.c_ubyte)),
	("nsPrefix",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlValidateNCName = _rpythonic_function_(		"xmlValidateNCName", ctypes.c_int, [
	("value",		ctypes.POINTER(ctypes.c_ubyte)),
	("space",		ctypes.c_int),] )

xmlValidateQName = _rpythonic_function_(		"xmlValidateQName", ctypes.c_int, [
	("value",		ctypes.POINTER(ctypes.c_ubyte)),
	("space",		ctypes.c_int),] )

xmlValidateName = _rpythonic_function_(		"xmlValidateName", ctypes.c_int, [
	("value",		ctypes.POINTER(ctypes.c_ubyte)),
	("space",		ctypes.c_int),] )

xmlValidateNMToken = _rpythonic_function_(		"xmlValidateNMToken", ctypes.c_int, [
	("value",		ctypes.POINTER(ctypes.c_ubyte)),
	("space",		ctypes.c_int),] )

xmlBuildQName = _rpythonic_function_(		"xmlBuildQName", ctypes.POINTER(ctypes.c_ubyte), [
	("ncname",		ctypes.POINTER(ctypes.c_ubyte)),
	("prefix",		ctypes.POINTER(ctypes.c_ubyte)),
	("memory",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlSplitQName2 = _rpythonic_function_(		"xmlSplitQName2", ctypes.POINTER(ctypes.c_ubyte), [
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("prefix",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),] )

xmlSplitQName3 = _rpythonic_function_(		"xmlSplitQName3", ctypes.POINTER(ctypes.c_ubyte), [
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.POINTER(ctypes.c_int)),] )

xmlSetBufferAllocationScheme = _rpythonic_function_(		"xmlSetBufferAllocationScheme", ctypes.c_void_p, [
	("scheme",		ctypes.c_int),] )

xmlGetBufferAllocationScheme = _rpythonic_function_(		"xmlGetBufferAllocationScheme", ctypes.c_int, [] )

xmlBufferCreate = _rpythonic_function_(		"xmlBufferCreate", ctypes.POINTER(_xmlBuffer), [] )

xmlBufferCreateSize = _rpythonic_function_(		"xmlBufferCreateSize", ctypes.POINTER(_xmlBuffer), [
	("size",		ctypes.c_uint),] )

xmlBufferCreateStatic = _rpythonic_function_(		"xmlBufferCreateStatic", ctypes.POINTER(_xmlBuffer), [
	("mem",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.c_uint),] )

xmlBufferResize = _rpythonic_function_(		"xmlBufferResize", ctypes.c_int, [
	("buf",		ctypes.POINTER(_xmlBuffer)),
	("size",		ctypes.c_uint),] )

xmlBufferFree = _rpythonic_function_(		"xmlBufferFree", ctypes.c_void_p, [
	("buf",		ctypes.POINTER(_xmlBuffer)),] )

xmlBufferDump = _rpythonic_function_(		"xmlBufferDump", ctypes.c_int, [
	("file",		ctypes.POINTER(_IO_FILE)),
	("buf",		ctypes.POINTER(_xmlBuffer)),] )

xmlBufferAdd = _rpythonic_function_(		"xmlBufferAdd", ctypes.c_int, [
	("buf",		ctypes.POINTER(_xmlBuffer)),
	("C_str",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlBufferAddHead = _rpythonic_function_(		"xmlBufferAddHead", ctypes.c_int, [
	("buf",		ctypes.POINTER(_xmlBuffer)),
	("C_str",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlBufferCat = _rpythonic_function_(		"xmlBufferCat", ctypes.c_int, [
	("buf",		ctypes.POINTER(_xmlBuffer)),
	("C_str",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlBufferCCat = _rpythonic_function_(		"xmlBufferCCat", ctypes.c_int, [
	("buf",		ctypes.POINTER(_xmlBuffer)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

xmlBufferShrink = _rpythonic_function_(		"xmlBufferShrink", ctypes.c_int, [
	("buf",		ctypes.POINTER(_xmlBuffer)),
	("C_len",		ctypes.c_uint),] )

xmlBufferGrow = _rpythonic_function_(		"xmlBufferGrow", ctypes.c_int, [
	("buf",		ctypes.POINTER(_xmlBuffer)),
	("C_len",		ctypes.c_uint),] )

xmlBufferEmpty = _rpythonic_function_(		"xmlBufferEmpty", ctypes.c_void_p, [
	("buf",		ctypes.POINTER(_xmlBuffer)),] )

xmlBufferContent = _rpythonic_function_(		"xmlBufferContent", ctypes.POINTER(ctypes.c_ubyte), [
	("buf",		ctypes.POINTER(_xmlBuffer)),] )

xmlBufferSetAllocationScheme = _rpythonic_function_(		"xmlBufferSetAllocationScheme", ctypes.c_void_p, [
	("buf",		ctypes.POINTER(_xmlBuffer)),
	("scheme",		ctypes.c_int),] )

xmlBufferLength = _rpythonic_function_(		"xmlBufferLength", ctypes.c_int, [
	("buf",		ctypes.POINTER(_xmlBuffer)),] )

xmlCreateIntSubset = _rpythonic_function_(		"xmlCreateIntSubset", ctypes.POINTER(_xmlDtd), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("ExternalID",		ctypes.POINTER(ctypes.c_ubyte)),
	("SystemID",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlNewDtd = _rpythonic_function_(		"xmlNewDtd", ctypes.POINTER(_xmlDtd), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("ExternalID",		ctypes.POINTER(ctypes.c_ubyte)),
	("SystemID",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlGetIntSubset = _rpythonic_function_(		"xmlGetIntSubset", ctypes.POINTER(_xmlDtd), [
	("doc",		ctypes.POINTER(_xmlDoc)),] )

xmlFreeDtd = _rpythonic_function_(		"xmlFreeDtd", ctypes.c_void_p, [
	("cur",		ctypes.POINTER(_xmlDtd)),] )

xmlNewGlobalNs = _rpythonic_function_(		"xmlNewGlobalNs", ctypes.POINTER(_xmlNs), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("href",		ctypes.POINTER(ctypes.c_ubyte)),
	("prefix",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlNewNs = _rpythonic_function_(		"xmlNewNs", ctypes.POINTER(_xmlNs), [
	("node",		ctypes.POINTER(_xmlNode)),
	("href",		ctypes.POINTER(ctypes.c_ubyte)),
	("prefix",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlFreeNs = _rpythonic_function_(		"xmlFreeNs", ctypes.c_void_p, [
	("cur",		ctypes.POINTER(_xmlNs)),] )

xmlFreeNsList = _rpythonic_function_(		"xmlFreeNsList", ctypes.c_void_p, [
	("cur",		ctypes.POINTER(_xmlNs)),] )

xmlNewDoc = _rpythonic_function_(		"xmlNewDoc", ctypes.POINTER(_xmlDoc), [
	("version",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlFreeDoc = _rpythonic_function_(		"xmlFreeDoc", ctypes.c_void_p, [
	("cur",		ctypes.POINTER(_xmlDoc)),] )

xmlNewDocProp = _rpythonic_function_(		"xmlNewDocProp", ctypes.POINTER(_xmlAttr), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlNewProp = _rpythonic_function_(		"xmlNewProp", ctypes.POINTER(_xmlAttr), [
	("node",		ctypes.POINTER(_xmlNode)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlNewNsProp = _rpythonic_function_(		"xmlNewNsProp", ctypes.POINTER(_xmlAttr), [
	("node",		ctypes.POINTER(_xmlNode)),
	("ns",		ctypes.POINTER(_xmlNs)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlNewNsPropEatName = _rpythonic_function_(		"xmlNewNsPropEatName", ctypes.POINTER(_xmlAttr), [
	("node",		ctypes.POINTER(_xmlNode)),
	("ns",		ctypes.POINTER(_xmlNs)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlFreePropList = _rpythonic_function_(		"xmlFreePropList", ctypes.c_void_p, [
	("cur",		ctypes.POINTER(_xmlAttr)),] )

xmlFreeProp = _rpythonic_function_(		"xmlFreeProp", ctypes.c_void_p, [
	("cur",		ctypes.POINTER(_xmlAttr)),] )

xmlCopyProp = _rpythonic_function_(		"xmlCopyProp", ctypes.POINTER(_xmlAttr), [
	("target",		ctypes.POINTER(_xmlNode)),
	("cur",		ctypes.POINTER(_xmlAttr)),] )

xmlCopyPropList = _rpythonic_function_(		"xmlCopyPropList", ctypes.POINTER(_xmlAttr), [
	("target",		ctypes.POINTER(_xmlNode)),
	("cur",		ctypes.POINTER(_xmlAttr)),] )

xmlCopyDtd = _rpythonic_function_(		"xmlCopyDtd", ctypes.POINTER(_xmlDtd), [
	("dtd",		ctypes.POINTER(_xmlDtd)),] )

xmlCopyDoc = _rpythonic_function_(		"xmlCopyDoc", ctypes.POINTER(_xmlDoc), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("recursive",		ctypes.c_int),] )

xmlNewDocNode = _rpythonic_function_(		"xmlNewDocNode", ctypes.POINTER(_xmlNode), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("ns",		ctypes.POINTER(_xmlNs)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("content",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlNewDocNodeEatName = _rpythonic_function_(		"xmlNewDocNodeEatName", ctypes.POINTER(_xmlNode), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("ns",		ctypes.POINTER(_xmlNs)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("content",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlNewNode = _rpythonic_function_(		"xmlNewNode", ctypes.POINTER(_xmlNode), [
	("ns",		ctypes.POINTER(_xmlNs)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlNewNodeEatName = _rpythonic_function_(		"xmlNewNodeEatName", ctypes.POINTER(_xmlNode), [
	("ns",		ctypes.POINTER(_xmlNs)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlNewChild = _rpythonic_function_(		"xmlNewChild", ctypes.POINTER(_xmlNode), [
	("parent",		ctypes.POINTER(_xmlNode)),
	("ns",		ctypes.POINTER(_xmlNs)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("content",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlNewDocText = _rpythonic_function_(		"xmlNewDocText", ctypes.POINTER(_xmlNode), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("content",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlNewText = _rpythonic_function_(		"xmlNewText", ctypes.POINTER(_xmlNode), [
	("content",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlNewDocPI = _rpythonic_function_(		"xmlNewDocPI", ctypes.POINTER(_xmlNode), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("content",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlNewPI = _rpythonic_function_(		"xmlNewPI", ctypes.POINTER(_xmlNode), [
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("content",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlNewDocTextLen = _rpythonic_function_(		"xmlNewDocTextLen", ctypes.POINTER(_xmlNode), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("content",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlNewTextLen = _rpythonic_function_(		"xmlNewTextLen", ctypes.POINTER(_xmlNode), [
	("content",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlNewDocComment = _rpythonic_function_(		"xmlNewDocComment", ctypes.POINTER(_xmlNode), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("content",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlNewComment = _rpythonic_function_(		"xmlNewComment", ctypes.POINTER(_xmlNode), [
	("content",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlNewCDataBlock = _rpythonic_function_(		"xmlNewCDataBlock", ctypes.POINTER(_xmlNode), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("content",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlNewCharRef = _rpythonic_function_(		"xmlNewCharRef", ctypes.POINTER(_xmlNode), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlNewReference = _rpythonic_function_(		"xmlNewReference", ctypes.POINTER(_xmlNode), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlCopyNode = _rpythonic_function_(		"xmlCopyNode", ctypes.POINTER(_xmlNode), [
	("node",		ctypes.POINTER(_xmlNode)),
	("recursive",		ctypes.c_int),] )

xmlDocCopyNode = _rpythonic_function_(		"xmlDocCopyNode", ctypes.POINTER(_xmlNode), [
	("node",		ctypes.POINTER(_xmlNode)),
	("doc",		ctypes.POINTER(_xmlDoc)),
	("recursive",		ctypes.c_int),] )

xmlDocCopyNodeList = _rpythonic_function_(		"xmlDocCopyNodeList", ctypes.POINTER(_xmlNode), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("node",		ctypes.POINTER(_xmlNode)),] )

xmlCopyNodeList = _rpythonic_function_(		"xmlCopyNodeList", ctypes.POINTER(_xmlNode), [
	("node",		ctypes.POINTER(_xmlNode)),] )

xmlNewTextChild = _rpythonic_function_(		"xmlNewTextChild", ctypes.POINTER(_xmlNode), [
	("parent",		ctypes.POINTER(_xmlNode)),
	("ns",		ctypes.POINTER(_xmlNs)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("content",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlNewDocRawNode = _rpythonic_function_(		"xmlNewDocRawNode", ctypes.POINTER(_xmlNode), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("ns",		ctypes.POINTER(_xmlNs)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("content",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlNewDocFragment = _rpythonic_function_(		"xmlNewDocFragment", ctypes.POINTER(_xmlNode), [
	("doc",		ctypes.POINTER(_xmlDoc)),] )

xmlGetLineNo = _rpythonic_function_(		"xmlGetLineNo", ctypes.c_long, [
	("node",		ctypes.POINTER(_xmlNode)),] )

xmlGetNodePath = _rpythonic_function_(		"xmlGetNodePath", ctypes.POINTER(ctypes.c_ubyte), [
	("node",		ctypes.POINTER(_xmlNode)),] )

xmlDocGetRootElement = _rpythonic_function_(		"xmlDocGetRootElement", ctypes.POINTER(_xmlNode), [
	("doc",		ctypes.POINTER(_xmlDoc)),] )

xmlGetLastChild = _rpythonic_function_(		"xmlGetLastChild", ctypes.POINTER(_xmlNode), [
	("parent",		ctypes.POINTER(_xmlNode)),] )

xmlNodeIsText = _rpythonic_function_(		"xmlNodeIsText", ctypes.c_int, [
	("node",		ctypes.POINTER(_xmlNode)),] )

xmlIsBlankNode = _rpythonic_function_(		"xmlIsBlankNode", ctypes.c_int, [
	("node",		ctypes.POINTER(_xmlNode)),] )

xmlDocSetRootElement = _rpythonic_function_(		"xmlDocSetRootElement", ctypes.POINTER(_xmlNode), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("root",		ctypes.POINTER(_xmlNode)),] )

xmlNodeSetName = _rpythonic_function_(		"xmlNodeSetName", ctypes.c_void_p, [
	("cur",		ctypes.POINTER(_xmlNode)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlAddChild = _rpythonic_function_(		"xmlAddChild", ctypes.POINTER(_xmlNode), [
	("parent",		ctypes.POINTER(_xmlNode)),
	("cur",		ctypes.POINTER(_xmlNode)),] )

xmlAddChildList = _rpythonic_function_(		"xmlAddChildList", ctypes.POINTER(_xmlNode), [
	("parent",		ctypes.POINTER(_xmlNode)),
	("cur",		ctypes.POINTER(_xmlNode)),] )

xmlReplaceNode = _rpythonic_function_(		"xmlReplaceNode", ctypes.POINTER(_xmlNode), [
	("old",		ctypes.POINTER(_xmlNode)),
	("cur",		ctypes.POINTER(_xmlNode)),] )

xmlAddPrevSibling = _rpythonic_function_(		"xmlAddPrevSibling", ctypes.POINTER(_xmlNode), [
	("cur",		ctypes.POINTER(_xmlNode)),
	("elem",		ctypes.POINTER(_xmlNode)),] )

xmlAddSibling = _rpythonic_function_(		"xmlAddSibling", ctypes.POINTER(_xmlNode), [
	("cur",		ctypes.POINTER(_xmlNode)),
	("elem",		ctypes.POINTER(_xmlNode)),] )

xmlAddNextSibling = _rpythonic_function_(		"xmlAddNextSibling", ctypes.POINTER(_xmlNode), [
	("cur",		ctypes.POINTER(_xmlNode)),
	("elem",		ctypes.POINTER(_xmlNode)),] )

xmlUnlinkNode = _rpythonic_function_(		"xmlUnlinkNode", ctypes.c_void_p, [
	("cur",		ctypes.POINTER(_xmlNode)),] )

xmlTextMerge = _rpythonic_function_(		"xmlTextMerge", ctypes.POINTER(_xmlNode), [
	("first",		ctypes.POINTER(_xmlNode)),
	("second",		ctypes.POINTER(_xmlNode)),] )

xmlTextConcat = _rpythonic_function_(		"xmlTextConcat", ctypes.c_int, [
	("node",		ctypes.POINTER(_xmlNode)),
	("content",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlFreeNodeList = _rpythonic_function_(		"xmlFreeNodeList", ctypes.c_void_p, [
	("cur",		ctypes.POINTER(_xmlNode)),] )

xmlFreeNode = _rpythonic_function_(		"xmlFreeNode", ctypes.c_void_p, [
	("cur",		ctypes.POINTER(_xmlNode)),] )

xmlSetTreeDoc = _rpythonic_function_(		"xmlSetTreeDoc", ctypes.c_void_p, [
	("tree",		ctypes.POINTER(_xmlNode)),
	("doc",		ctypes.POINTER(_xmlDoc)),] )

xmlSetListDoc = _rpythonic_function_(		"xmlSetListDoc", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_xmlNode)),
	("doc",		ctypes.POINTER(_xmlDoc)),] )

xmlSearchNs = _rpythonic_function_(		"xmlSearchNs", ctypes.POINTER(_xmlNs), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("node",		ctypes.POINTER(_xmlNode)),
	("nameSpace",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlSearchNsByHref = _rpythonic_function_(		"xmlSearchNsByHref", ctypes.POINTER(_xmlNs), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("node",		ctypes.POINTER(_xmlNode)),
	("href",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlGetNsList = _rpythonic_function_(		"xmlGetNsList", ctypes.POINTER(ctypes.POINTER(_xmlNs)), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("node",		ctypes.POINTER(_xmlNode)),] )

xmlSetNs = _rpythonic_function_(		"xmlSetNs", ctypes.c_void_p, [
	("node",		ctypes.POINTER(_xmlNode)),
	("ns",		ctypes.POINTER(_xmlNs)),] )

xmlCopyNamespace = _rpythonic_function_(		"xmlCopyNamespace", ctypes.POINTER(_xmlNs), [
	("cur",		ctypes.POINTER(_xmlNs)),] )

xmlCopyNamespaceList = _rpythonic_function_(		"xmlCopyNamespaceList", ctypes.POINTER(_xmlNs), [
	("cur",		ctypes.POINTER(_xmlNs)),] )

xmlSetProp = _rpythonic_function_(		"xmlSetProp", ctypes.POINTER(_xmlAttr), [
	("node",		ctypes.POINTER(_xmlNode)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlSetNsProp = _rpythonic_function_(		"xmlSetNsProp", ctypes.POINTER(_xmlAttr), [
	("node",		ctypes.POINTER(_xmlNode)),
	("ns",		ctypes.POINTER(_xmlNs)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlGetNoNsProp = _rpythonic_function_(		"xmlGetNoNsProp", ctypes.POINTER(ctypes.c_ubyte), [
	("node",		ctypes.POINTER(_xmlNode)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlGetProp = _rpythonic_function_(		"xmlGetProp", ctypes.POINTER(ctypes.c_ubyte), [
	("node",		ctypes.POINTER(_xmlNode)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlHasProp = _rpythonic_function_(		"xmlHasProp", ctypes.POINTER(_xmlAttr), [
	("node",		ctypes.POINTER(_xmlNode)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlHasNsProp = _rpythonic_function_(		"xmlHasNsProp", ctypes.POINTER(_xmlAttr), [
	("node",		ctypes.POINTER(_xmlNode)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("nameSpace",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlGetNsProp = _rpythonic_function_(		"xmlGetNsProp", ctypes.POINTER(ctypes.c_ubyte), [
	("node",		ctypes.POINTER(_xmlNode)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("nameSpace",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlStringGetNodeList = _rpythonic_function_(		"xmlStringGetNodeList", ctypes.POINTER(_xmlNode), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlStringLenGetNodeList = _rpythonic_function_(		"xmlStringLenGetNodeList", ctypes.POINTER(_xmlNode), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlNodeListGetString = _rpythonic_function_(		"xmlNodeListGetString", ctypes.POINTER(ctypes.c_ubyte), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("C_list",		ctypes.POINTER(_xmlNode)),
	("inLine",		ctypes.c_int),] )

xmlNodeListGetRawString = _rpythonic_function_(		"xmlNodeListGetRawString", ctypes.POINTER(ctypes.c_ubyte), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("C_list",		ctypes.POINTER(_xmlNode)),
	("inLine",		ctypes.c_int),] )

xmlNodeSetContent = _rpythonic_function_(		"xmlNodeSetContent", ctypes.c_void_p, [
	("cur",		ctypes.POINTER(_xmlNode)),
	("content",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlNodeSetContentLen = _rpythonic_function_(		"xmlNodeSetContentLen", ctypes.c_void_p, [
	("cur",		ctypes.POINTER(_xmlNode)),
	("content",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlNodeAddContent = _rpythonic_function_(		"xmlNodeAddContent", ctypes.c_void_p, [
	("cur",		ctypes.POINTER(_xmlNode)),
	("content",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlNodeAddContentLen = _rpythonic_function_(		"xmlNodeAddContentLen", ctypes.c_void_p, [
	("cur",		ctypes.POINTER(_xmlNode)),
	("content",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlNodeGetContent = _rpythonic_function_(		"xmlNodeGetContent", ctypes.POINTER(ctypes.c_ubyte), [
	("cur",		ctypes.POINTER(_xmlNode)),] )

xmlNodeBufGetContent = _rpythonic_function_(		"xmlNodeBufGetContent", ctypes.c_int, [
	("buffer",		ctypes.POINTER(_xmlBuffer)),
	("cur",		ctypes.POINTER(_xmlNode)),] )

xmlNodeGetLang = _rpythonic_function_(		"xmlNodeGetLang", ctypes.POINTER(ctypes.c_ubyte), [
	("cur",		ctypes.POINTER(_xmlNode)),] )

xmlNodeGetSpacePreserve = _rpythonic_function_(		"xmlNodeGetSpacePreserve", ctypes.c_int, [
	("cur",		ctypes.POINTER(_xmlNode)),] )

xmlNodeSetLang = _rpythonic_function_(		"xmlNodeSetLang", ctypes.c_void_p, [
	("cur",		ctypes.POINTER(_xmlNode)),
	("lang",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlNodeSetSpacePreserve = _rpythonic_function_(		"xmlNodeSetSpacePreserve", ctypes.c_void_p, [
	("cur",		ctypes.POINTER(_xmlNode)),
	("val",		ctypes.c_int),] )

xmlNodeGetBase = _rpythonic_function_(		"xmlNodeGetBase", ctypes.POINTER(ctypes.c_ubyte), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("cur",		ctypes.POINTER(_xmlNode)),] )

xmlNodeSetBase = _rpythonic_function_(		"xmlNodeSetBase", ctypes.c_void_p, [
	("cur",		ctypes.POINTER(_xmlNode)),
	("uri",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlRemoveProp = _rpythonic_function_(		"xmlRemoveProp", ctypes.c_int, [
	("cur",		ctypes.POINTER(_xmlAttr)),] )

xmlUnsetNsProp = _rpythonic_function_(		"xmlUnsetNsProp", ctypes.c_int, [
	("node",		ctypes.POINTER(_xmlNode)),
	("ns",		ctypes.POINTER(_xmlNs)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlUnsetProp = _rpythonic_function_(		"xmlUnsetProp", ctypes.c_int, [
	("node",		ctypes.POINTER(_xmlNode)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlBufferWriteCHAR = _rpythonic_function_(		"xmlBufferWriteCHAR", ctypes.c_void_p, [
	("buf",		ctypes.POINTER(_xmlBuffer)),
	("string",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlBufferWriteChar = _rpythonic_function_(		"xmlBufferWriteChar", ctypes.c_void_p, [
	("buf",		ctypes.POINTER(_xmlBuffer)),
	("string",		ctypes.POINTER(ctypes.c_char)),] )

xmlBufferWriteQuotedString = _rpythonic_function_(		"xmlBufferWriteQuotedString", ctypes.c_void_p, [
	("buf",		ctypes.POINTER(_xmlBuffer)),
	("string",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlAttrSerializeTxtContent = _rpythonic_function_(		"xmlAttrSerializeTxtContent", ctypes.c_void_p, [
	("buf",		ctypes.POINTER(_xmlBuffer)),
	("doc",		ctypes.POINTER(_xmlDoc)),
	("attr",		ctypes.POINTER(_xmlAttr)),
	("string",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlReconciliateNs = _rpythonic_function_(		"xmlReconciliateNs", ctypes.c_int, [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("tree",		ctypes.POINTER(_xmlNode)),] )

xmlDocDumpFormatMemory = _rpythonic_function_(		"xmlDocDumpFormatMemory", ctypes.c_void_p, [
	("cur",		ctypes.POINTER(_xmlDoc)),
	("mem",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("size",		ctypes.POINTER(ctypes.c_int)),
	("format",		ctypes.c_int),] )

xmlDocDumpMemory = _rpythonic_function_(		"xmlDocDumpMemory", ctypes.c_void_p, [
	("cur",		ctypes.POINTER(_xmlDoc)),
	("mem",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("size",		ctypes.POINTER(ctypes.c_int)),] )

xmlDocDumpMemoryEnc = _rpythonic_function_(		"xmlDocDumpMemoryEnc", ctypes.c_void_p, [
	("out_doc",		ctypes.POINTER(_xmlDoc)),
	("doc_txt_ptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("doc_txt_len",		ctypes.POINTER(ctypes.c_int)),
	("txt_encoding",		ctypes.POINTER(ctypes.c_char)),] )

xmlDocDumpFormatMemoryEnc = _rpythonic_function_(		"xmlDocDumpFormatMemoryEnc", ctypes.c_void_p, [
	("out_doc",		ctypes.POINTER(_xmlDoc)),
	("doc_txt_ptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("doc_txt_len",		ctypes.POINTER(ctypes.c_int)),
	("txt_encoding",		ctypes.POINTER(ctypes.c_char)),
	("format",		ctypes.c_int),] )

xmlDocFormatDump = _rpythonic_function_(		"xmlDocFormatDump", ctypes.c_int, [
	("f",		ctypes.POINTER(_IO_FILE)),
	("cur",		ctypes.POINTER(_xmlDoc)),
	("format",		ctypes.c_int),] )

xmlDocDump = _rpythonic_function_(		"xmlDocDump", ctypes.c_int, [
	("f",		ctypes.POINTER(_IO_FILE)),
	("cur",		ctypes.POINTER(_xmlDoc)),] )

xmlElemDump = _rpythonic_function_(		"xmlElemDump", ctypes.c_void_p, [
	("f",		ctypes.POINTER(_IO_FILE)),
	("doc",		ctypes.POINTER(_xmlDoc)),
	("cur",		ctypes.POINTER(_xmlNode)),] )

xmlSaveFile = _rpythonic_function_(		"xmlSaveFile", ctypes.c_int, [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("cur",		ctypes.POINTER(_xmlDoc)),] )

xmlSaveFormatFile = _rpythonic_function_(		"xmlSaveFormatFile", ctypes.c_int, [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("cur",		ctypes.POINTER(_xmlDoc)),
	("format",		ctypes.c_int),] )

xmlNodeDump = _rpythonic_function_(		"xmlNodeDump", ctypes.c_int, [
	("buf",		ctypes.POINTER(_xmlBuffer)),
	("doc",		ctypes.POINTER(_xmlDoc)),
	("cur",		ctypes.POINTER(_xmlNode)),
	("level",		ctypes.c_int),
	("format",		ctypes.c_int),] )

xmlSaveFileTo = _rpythonic_function_(		"xmlSaveFileTo", ctypes.c_int, [
	("buf",		ctypes.POINTER(_xmlOutputBuffer)),
	("cur",		ctypes.POINTER(_xmlDoc)),
	("encoding",		ctypes.POINTER(ctypes.c_char)),] )

xmlSaveFormatFileTo = _rpythonic_function_(		"xmlSaveFormatFileTo", ctypes.c_int, [
	("buf",		ctypes.POINTER(_xmlOutputBuffer)),
	("cur",		ctypes.POINTER(_xmlDoc)),
	("encoding",		ctypes.POINTER(ctypes.c_char)),
	("format",		ctypes.c_int),] )

xmlNodeDumpOutput = _rpythonic_function_(		"xmlNodeDumpOutput", ctypes.c_void_p, [
	("buf",		ctypes.POINTER(_xmlOutputBuffer)),
	("doc",		ctypes.POINTER(_xmlDoc)),
	("cur",		ctypes.POINTER(_xmlNode)),
	("level",		ctypes.c_int),
	("format",		ctypes.c_int),
	("encoding",		ctypes.POINTER(ctypes.c_char)),] )

xmlSaveFormatFileEnc = _rpythonic_function_(		"xmlSaveFormatFileEnc", ctypes.c_int, [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("cur",		ctypes.POINTER(_xmlDoc)),
	("encoding",		ctypes.POINTER(ctypes.c_char)),
	("format",		ctypes.c_int),] )

xmlSaveFileEnc = _rpythonic_function_(		"xmlSaveFileEnc", ctypes.c_int, [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("cur",		ctypes.POINTER(_xmlDoc)),
	("encoding",		ctypes.POINTER(ctypes.c_char)),] )

xmlIsXHTML = _rpythonic_function_(		"xmlIsXHTML", ctypes.c_int, [
	("systemID",		ctypes.POINTER(ctypes.c_ubyte)),
	("publicID",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlGetDocCompressMode = _rpythonic_function_(		"xmlGetDocCompressMode", ctypes.c_int, [
	("doc",		ctypes.POINTER(_xmlDoc)),] )

xmlSetDocCompressMode = _rpythonic_function_(		"xmlSetDocCompressMode", ctypes.c_void_p, [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("mode",		ctypes.c_int),] )

xmlGetCompressMode = _rpythonic_function_(		"xmlGetCompressMode", ctypes.c_int, [] )

xmlSetCompressMode = _rpythonic_function_(		"xmlSetCompressMode", ctypes.c_void_p, [
	("mode",		ctypes.c_int),] )

xmlDOMWrapNewCtxt = _rpythonic_function_(		"xmlDOMWrapNewCtxt", ctypes.POINTER(_xmlDOMWrapCtxt), [] )

xmlDOMWrapFreeCtxt = _rpythonic_function_(		"xmlDOMWrapFreeCtxt", ctypes.c_void_p, [
	("ctxt",		ctypes.POINTER(_xmlDOMWrapCtxt)),] )

xmlDOMWrapReconcileNamespaces = _rpythonic_function_(		"xmlDOMWrapReconcileNamespaces", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlDOMWrapCtxt)),
	("elem",		ctypes.POINTER(_xmlNode)),
	("options",		ctypes.c_int),] )

xmlDOMWrapAdoptNode = _rpythonic_function_(		"xmlDOMWrapAdoptNode", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlDOMWrapCtxt)),
	("sourceDoc",		ctypes.POINTER(_xmlDoc)),
	("node",		ctypes.POINTER(_xmlNode)),
	("destDoc",		ctypes.POINTER(_xmlDoc)),
	("destParent",		ctypes.POINTER(_xmlNode)),
	("options",		ctypes.c_int),] )

xmlDOMWrapRemoveNode = _rpythonic_function_(		"xmlDOMWrapRemoveNode", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlDOMWrapCtxt)),
	("doc",		ctypes.POINTER(_xmlDoc)),
	("node",		ctypes.POINTER(_xmlNode)),
	("options",		ctypes.c_int),] )

xmlDOMWrapCloneNode = _rpythonic_function_(		"xmlDOMWrapCloneNode", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlDOMWrapCtxt)),
	("sourceDoc",		ctypes.POINTER(_xmlDoc)),
	("node",		ctypes.POINTER(_xmlNode)),
	("clonedNode",		ctypes.POINTER(ctypes.POINTER(_xmlNode))),
	("destDoc",		ctypes.POINTER(_xmlDoc)),
	("destParent",		ctypes.POINTER(_xmlNode)),
	("deep",		ctypes.c_int),
	("options",		ctypes.c_int),] )

xmlChildElementCount = _rpythonic_function_(		"xmlChildElementCount", ctypes.c_ulong, [
	("parent",		ctypes.POINTER(_xmlNode)),] )

xmlNextElementSibling = _rpythonic_function_(		"xmlNextElementSibling", ctypes.POINTER(_xmlNode), [
	("node",		ctypes.POINTER(_xmlNode)),] )

xmlFirstElementChild = _rpythonic_function_(		"xmlFirstElementChild", ctypes.POINTER(_xmlNode), [
	("parent",		ctypes.POINTER(_xmlNode)),] )

xmlLastElementChild = _rpythonic_function_(		"xmlLastElementChild", ctypes.POINTER(_xmlNode), [
	("parent",		ctypes.POINTER(_xmlNode)),] )

xmlPreviousElementSibling = _rpythonic_function_(		"xmlPreviousElementSibling", ctypes.POINTER(_xmlNode), [
	("node",		ctypes.POINTER(_xmlNode)),] )

xmlFreeFunc = _rpythonic_function_(		"xmlFreeFunc", ctypes.c_void_p, [("mem",		ctypes.c_void_p)] )

xmlMallocFunc = _rpythonic_function_(		"xmlMallocFunc", ctypes.POINTER(ctypes.c_void_p), [
	("size",		ctypes.c_uint),] )

xmlReallocFunc = _rpythonic_function_(		"xmlReallocFunc", ctypes.POINTER(ctypes.c_void_p), [
	("mem",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.c_uint),] )

xmlStrdupFunc = _rpythonic_function_(		"xmlStrdupFunc", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

xmlMemSetup = _rpythonic_function_(		"xmlMemSetup", ctypes.c_int, [
	("freeFunc",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("mallocFunc",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), ctypes.c_uint,))),
	("reallocFunc",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), ctypes.POINTER(ctypes.c_void_p),ctypes.c_uint,))),
	("strdupFunc",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_char),))),] )

xmlMemGet = _rpythonic_function_(		"xmlMemGet", ctypes.c_int, [
	("freeFunc",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.c_void_p, ))),
	("mallocFunc",		ctypes.POINTER(ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), ctypes.c_uint,)))),
	("reallocFunc",		ctypes.POINTER(ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), ctypes.POINTER(ctypes.c_void_p),ctypes.c_uint,)))),
	("strdupFunc",		ctypes.POINTER(ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_char),)))),] )

xmlGcMemSetup = _rpythonic_function_(		"xmlGcMemSetup", ctypes.c_int, [
	("freeFunc",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("mallocFunc",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), ctypes.c_uint,))),
	("mallocAtomicFunc",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), ctypes.c_uint,))),
	("reallocFunc",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), ctypes.POINTER(ctypes.c_void_p),ctypes.c_uint,))),
	("strdupFunc",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_char),))),] )

xmlGcMemGet = _rpythonic_function_(		"xmlGcMemGet", ctypes.c_int, [
	("freeFunc",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.c_void_p, ))),
	("mallocFunc",		ctypes.POINTER(ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), ctypes.c_uint,)))),
	("mallocAtomicFunc",		ctypes.POINTER(ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), ctypes.c_uint,)))),
	("reallocFunc",		ctypes.POINTER(ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), ctypes.POINTER(ctypes.c_void_p),ctypes.c_uint,)))),
	("strdupFunc",		ctypes.POINTER(ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_char),)))),] )

xmlInitMemory = _rpythonic_function_(		"xmlInitMemory", ctypes.c_int, [] )

xmlCleanupMemory = _rpythonic_function_(		"xmlCleanupMemory", ctypes.c_void_p, [] )

xmlMemUsed = _rpythonic_function_(		"xmlMemUsed", ctypes.c_int, [] )

xmlMemBlocks = _rpythonic_function_(		"xmlMemBlocks", ctypes.c_int, [] )

xmlMemDisplay = _rpythonic_function_(		"xmlMemDisplay", ctypes.c_void_p, [
	("fp",		ctypes.POINTER(_IO_FILE)),] )

xmlMemDisplayLast = _rpythonic_function_(		"xmlMemDisplayLast", ctypes.c_void_p, [
	("fp",		ctypes.POINTER(_IO_FILE)),
	("nbBytes",		ctypes.c_long),] )

xmlMemShow = _rpythonic_function_(		"xmlMemShow", ctypes.c_void_p, [
	("fp",		ctypes.POINTER(_IO_FILE)),
	("nr",		ctypes.c_int),] )

xmlMemoryDump = _rpythonic_function_(		"xmlMemoryDump", ctypes.c_void_p, [] )

xmlMemMalloc = _rpythonic_function_(		"xmlMemMalloc", ctypes.POINTER(ctypes.c_void_p), [
	("size",		ctypes.c_uint),] )

xmlMemRealloc = _rpythonic_function_(		"xmlMemRealloc", ctypes.POINTER(ctypes.c_void_p), [
	("ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.c_uint),] )

xmlMemFree = _rpythonic_function_(		"xmlMemFree", ctypes.c_void_p, [("ptr",		ctypes.c_void_p)] )

xmlMemoryStrdup = _rpythonic_function_(		"xmlMemoryStrdup", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

xmlMallocLoc = _rpythonic_function_(		"xmlMallocLoc", ctypes.POINTER(ctypes.c_void_p), [
	("size",		ctypes.c_uint),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),] )

xmlReallocLoc = _rpythonic_function_(		"xmlReallocLoc", ctypes.POINTER(ctypes.c_void_p), [
	("ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.c_uint),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),] )

xmlMallocAtomicLoc = _rpythonic_function_(		"xmlMallocAtomicLoc", ctypes.POINTER(ctypes.c_void_p), [
	("size",		ctypes.c_uint),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),] )

xmlMemStrdupLoc = _rpythonic_function_(		"xmlMemStrdupLoc", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),] )

xmlHashDeallocator = _rpythonic_function_(		"xmlHashDeallocator", ctypes.c_void_p, [
	("payload",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlHashCopier = _rpythonic_function_(		"xmlHashCopier", ctypes.POINTER(ctypes.c_void_p), [
	("payload",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlHashScanner = _rpythonic_function_(		"xmlHashScanner", ctypes.c_void_p, [
	("payload",		ctypes.POINTER(ctypes.c_void_p)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlHashScannerFull = _rpythonic_function_(		"xmlHashScannerFull", ctypes.c_void_p, [
	("payload",		ctypes.POINTER(ctypes.c_void_p)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("name2",		ctypes.POINTER(ctypes.c_ubyte)),
	("name3",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlHashCreate = _rpythonic_function_(		"xmlHashCreate", ctypes.POINTER(_xmlHashTable), [
	("size",		ctypes.c_int),] )

xmlHashCreateDict = _rpythonic_function_(		"xmlHashCreateDict", ctypes.POINTER(_xmlHashTable), [
	("size",		ctypes.c_int),
	("C_dict",		ctypes.POINTER(_xmlDict)),] )

xmlHashFree = _rpythonic_function_(		"xmlHashFree", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_xmlHashTable)),
	("f",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),)),] )

xmlHashAddEntry = _rpythonic_function_(		"xmlHashAddEntry", ctypes.c_int, [
	("table",		ctypes.POINTER(_xmlHashTable)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("userdata",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlHashUpdateEntry = _rpythonic_function_(		"xmlHashUpdateEntry", ctypes.c_int, [
	("table",		ctypes.POINTER(_xmlHashTable)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("userdata",		ctypes.POINTER(ctypes.c_void_p)),
	("f",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),)),] )

xmlHashAddEntry2 = _rpythonic_function_(		"xmlHashAddEntry2", ctypes.c_int, [
	("table",		ctypes.POINTER(_xmlHashTable)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("name2",		ctypes.POINTER(ctypes.c_ubyte)),
	("userdata",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlHashUpdateEntry2 = _rpythonic_function_(		"xmlHashUpdateEntry2", ctypes.c_int, [
	("table",		ctypes.POINTER(_xmlHashTable)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("name2",		ctypes.POINTER(ctypes.c_ubyte)),
	("userdata",		ctypes.POINTER(ctypes.c_void_p)),
	("f",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),)),] )

xmlHashAddEntry3 = _rpythonic_function_(		"xmlHashAddEntry3", ctypes.c_int, [
	("table",		ctypes.POINTER(_xmlHashTable)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("name2",		ctypes.POINTER(ctypes.c_ubyte)),
	("name3",		ctypes.POINTER(ctypes.c_ubyte)),
	("userdata",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlHashUpdateEntry3 = _rpythonic_function_(		"xmlHashUpdateEntry3", ctypes.c_int, [
	("table",		ctypes.POINTER(_xmlHashTable)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("name2",		ctypes.POINTER(ctypes.c_ubyte)),
	("name3",		ctypes.POINTER(ctypes.c_ubyte)),
	("userdata",		ctypes.POINTER(ctypes.c_void_p)),
	("f",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),)),] )

xmlHashRemoveEntry = _rpythonic_function_(		"xmlHashRemoveEntry", ctypes.c_int, [
	("table",		ctypes.POINTER(_xmlHashTable)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("f",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),)),] )

xmlHashRemoveEntry2 = _rpythonic_function_(		"xmlHashRemoveEntry2", ctypes.c_int, [
	("table",		ctypes.POINTER(_xmlHashTable)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("name2",		ctypes.POINTER(ctypes.c_ubyte)),
	("f",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),)),] )

xmlHashRemoveEntry3 = _rpythonic_function_(		"xmlHashRemoveEntry3", ctypes.c_int, [
	("table",		ctypes.POINTER(_xmlHashTable)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("name2",		ctypes.POINTER(ctypes.c_ubyte)),
	("name3",		ctypes.POINTER(ctypes.c_ubyte)),
	("f",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),)),] )

xmlHashLookup = _rpythonic_function_(		"xmlHashLookup", ctypes.POINTER(ctypes.c_void_p), [
	("table",		ctypes.POINTER(_xmlHashTable)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlHashLookup2 = _rpythonic_function_(		"xmlHashLookup2", ctypes.POINTER(ctypes.c_void_p), [
	("table",		ctypes.POINTER(_xmlHashTable)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("name2",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlHashLookup3 = _rpythonic_function_(		"xmlHashLookup3", ctypes.POINTER(ctypes.c_void_p), [
	("table",		ctypes.POINTER(_xmlHashTable)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("name2",		ctypes.POINTER(ctypes.c_ubyte)),
	("name3",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlHashQLookup = _rpythonic_function_(		"xmlHashQLookup", ctypes.POINTER(ctypes.c_void_p), [
	("table",		ctypes.POINTER(_xmlHashTable)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("prefix",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlHashQLookup2 = _rpythonic_function_(		"xmlHashQLookup2", ctypes.POINTER(ctypes.c_void_p), [
	("table",		ctypes.POINTER(_xmlHashTable)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("prefix",		ctypes.POINTER(ctypes.c_ubyte)),
	("name2",		ctypes.POINTER(ctypes.c_ubyte)),
	("prefix2",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlHashQLookup3 = _rpythonic_function_(		"xmlHashQLookup3", ctypes.POINTER(ctypes.c_void_p), [
	("table",		ctypes.POINTER(_xmlHashTable)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("prefix",		ctypes.POINTER(ctypes.c_ubyte)),
	("name2",		ctypes.POINTER(ctypes.c_ubyte)),
	("prefix2",		ctypes.POINTER(ctypes.c_ubyte)),
	("name3",		ctypes.POINTER(ctypes.c_ubyte)),
	("prefix3",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlHashCopy = _rpythonic_function_(		"xmlHashCopy", ctypes.POINTER(_xmlHashTable), [
	("table",		ctypes.POINTER(_xmlHashTable)),
	("f",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),))),] )

xmlHashSize = _rpythonic_function_(		"xmlHashSize", ctypes.c_int, [
	("table",		ctypes.POINTER(_xmlHashTable)),] )

xmlHashScan = _rpythonic_function_(		"xmlHashScan", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_xmlHashTable)),
	("f",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlHashScan3 = _rpythonic_function_(		"xmlHashScan3", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_xmlHashTable)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("name2",		ctypes.POINTER(ctypes.c_ubyte)),
	("name3",		ctypes.POINTER(ctypes.c_ubyte)),
	("f",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlHashScanFull = _rpythonic_function_(		"xmlHashScanFull", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_xmlHashTable)),
	("f",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlHashScanFull3 = _rpythonic_function_(		"xmlHashScanFull3", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_xmlHashTable)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("name2",		ctypes.POINTER(ctypes.c_ubyte)),
	("name3",		ctypes.POINTER(ctypes.c_ubyte)),
	("f",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_ubyte),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlStructuredErrorFunc = _rpythonic_function_(		"xmlStructuredErrorFunc", ctypes.c_void_p, [
	("userData",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(_xmlError)),] )

xmlSetGenericErrorFunc = _rpythonic_function_(		"xmlSetGenericErrorFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),)),] )

initGenericErrorDefaultFunc = _rpythonic_function_(		"initGenericErrorDefaultFunc", ctypes.c_void_p, [
	("handler",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),))),] )

xmlSetStructuredErrorFunc = _rpythonic_function_(		"xmlSetStructuredErrorFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_xmlError),)),] )

xmlParserPrintFileInfo = _rpythonic_function_(		"xmlParserPrintFileInfo", ctypes.c_void_p, [
	("input",		ctypes.POINTER(_xmlParserInput)),] )

xmlCharEncodingOutputFunc = _rpythonic_function_(		"xmlCharEncodingOutputFunc", ctypes.c_int, [
	("out",		ctypes.POINTER(ctypes.c_ubyte)),
	("outlen",		ctypes.POINTER(ctypes.c_int)),
	("C_in",		ctypes.POINTER(ctypes.c_ubyte)),
	("inlen",		ctypes.POINTER(ctypes.c_int)),] )

xmlCharEncodingInputFunc = _rpythonic_function_(		"xmlCharEncodingInputFunc", ctypes.c_int, [
	("out",		ctypes.POINTER(ctypes.c_ubyte)),
	("outlen",		ctypes.POINTER(ctypes.c_int)),
	("C_in",		ctypes.POINTER(ctypes.c_ubyte)),
	("inlen",		ctypes.POINTER(ctypes.c_int)),] )

iconv_close = _rpythonic_function_(		"iconv_close", ctypes.c_int, [("__cd",		ctypes.c_void_p)] )

xmlParserPrintFileContext = _rpythonic_function_(		"xmlParserPrintFileContext", ctypes.c_void_p, [
	("input",		ctypes.POINTER(_xmlParserInput)),] )

xmlGetLastError = _rpythonic_function_(		"xmlGetLastError", ctypes.POINTER(_xmlError), [] )

xmlResetLastError = _rpythonic_function_(		"xmlResetLastError", ctypes.c_void_p, [] )

xmlCtxtGetLastError = _rpythonic_function_(		"xmlCtxtGetLastError", ctypes.POINTER(_xmlError), [("ctx",		ctypes.c_void_p)] )

xmlCtxtResetLastError = _rpythonic_function_(		"xmlCtxtResetLastError", ctypes.c_void_p, [("ctx",		ctypes.c_void_p)] )

xmlResetError = _rpythonic_function_(		"xmlResetError", ctypes.c_void_p, [
	("err",		ctypes.POINTER(_xmlError)),] )

xmlCopyError = _rpythonic_function_(		"xmlCopyError", ctypes.c_int, [
	("from",		ctypes.POINTER(_xmlError)),
	("to",		ctypes.POINTER(_xmlError)),] )

xmlListDeallocator = _rpythonic_function_(		"xmlListDeallocator", ctypes.c_void_p, [
	("lk",		ctypes.POINTER(_xmlLink)),] )

xmlListDataCompare = _rpythonic_function_(		"xmlListDataCompare", ctypes.c_int, [
	("data0",		ctypes.POINTER(ctypes.c_void_p)),
	("data1",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlListWalker = _rpythonic_function_(		"xmlListWalker", ctypes.c_int, [
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("user",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlListCreate = _rpythonic_function_(		"xmlListCreate", ctypes.POINTER(_xmlList), [
	("deallocator",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_xmlLink),)),
	("compare",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

xmlListDelete = _rpythonic_function_(		"xmlListDelete", ctypes.c_void_p, [
	("l",		ctypes.POINTER(_xmlList)),] )

xmlListSearch = _rpythonic_function_(		"xmlListSearch", ctypes.POINTER(ctypes.c_void_p), [
	("l",		ctypes.POINTER(_xmlList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlListReverseSearch = _rpythonic_function_(		"xmlListReverseSearch", ctypes.POINTER(ctypes.c_void_p), [
	("l",		ctypes.POINTER(_xmlList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlListInsert = _rpythonic_function_(		"xmlListInsert", ctypes.c_int, [
	("l",		ctypes.POINTER(_xmlList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlListAppend = _rpythonic_function_(		"xmlListAppend", ctypes.c_int, [
	("l",		ctypes.POINTER(_xmlList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlListRemoveFirst = _rpythonic_function_(		"xmlListRemoveFirst", ctypes.c_int, [
	("l",		ctypes.POINTER(_xmlList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlListRemoveLast = _rpythonic_function_(		"xmlListRemoveLast", ctypes.c_int, [
	("l",		ctypes.POINTER(_xmlList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlListRemoveAll = _rpythonic_function_(		"xmlListRemoveAll", ctypes.c_int, [
	("l",		ctypes.POINTER(_xmlList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlListClear = _rpythonic_function_(		"xmlListClear", ctypes.c_void_p, [
	("l",		ctypes.POINTER(_xmlList)),] )

xmlListEmpty = _rpythonic_function_(		"xmlListEmpty", ctypes.c_int, [
	("l",		ctypes.POINTER(_xmlList)),] )

xmlListFront = _rpythonic_function_(		"xmlListFront", ctypes.POINTER(_xmlLink), [
	("l",		ctypes.POINTER(_xmlList)),] )

xmlListEnd = _rpythonic_function_(		"xmlListEnd", ctypes.POINTER(_xmlLink), [
	("l",		ctypes.POINTER(_xmlList)),] )

xmlListSize = _rpythonic_function_(		"xmlListSize", ctypes.c_int, [
	("l",		ctypes.POINTER(_xmlList)),] )

xmlListPopFront = _rpythonic_function_(		"xmlListPopFront", ctypes.c_void_p, [
	("l",		ctypes.POINTER(_xmlList)),] )

xmlListPopBack = _rpythonic_function_(		"xmlListPopBack", ctypes.c_void_p, [
	("l",		ctypes.POINTER(_xmlList)),] )

xmlListPushFront = _rpythonic_function_(		"xmlListPushFront", ctypes.c_int, [
	("l",		ctypes.POINTER(_xmlList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlListPushBack = _rpythonic_function_(		"xmlListPushBack", ctypes.c_int, [
	("l",		ctypes.POINTER(_xmlList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlListReverse = _rpythonic_function_(		"xmlListReverse", ctypes.c_void_p, [
	("l",		ctypes.POINTER(_xmlList)),] )

xmlListSort = _rpythonic_function_(		"xmlListSort", ctypes.c_void_p, [
	("l",		ctypes.POINTER(_xmlList)),] )

xmlListWalk = _rpythonic_function_(		"xmlListWalk", ctypes.c_void_p, [
	("l",		ctypes.POINTER(_xmlList)),
	("walker",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlListReverseWalk = _rpythonic_function_(		"xmlListReverseWalk", ctypes.c_void_p, [
	("l",		ctypes.POINTER(_xmlList)),
	("walker",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlListMerge = _rpythonic_function_(		"xmlListMerge", ctypes.c_void_p, [
	("l1",		ctypes.POINTER(_xmlList)),
	("l2",		ctypes.POINTER(_xmlList)),] )

xmlListDup = _rpythonic_function_(		"xmlListDup", ctypes.POINTER(_xmlList), [
	("old",		ctypes.POINTER(_xmlList)),] )

xmlListCopy = _rpythonic_function_(		"xmlListCopy", ctypes.c_int, [
	("cur",		ctypes.POINTER(_xmlList)),
	("old",		ctypes.POINTER(_xmlList)),] )

xmlLinkGetData = _rpythonic_function_(		"xmlLinkGetData", ctypes.POINTER(ctypes.c_void_p), [
	("lk",		ctypes.POINTER(_xmlLink)),] )

xmlNewAutomata = _rpythonic_function_(		"xmlNewAutomata", ctypes.POINTER(_xmlAutomata), [] )

xmlFreeAutomata = _rpythonic_function_(		"xmlFreeAutomata", ctypes.c_void_p, [
	("am",		ctypes.POINTER(_xmlAutomata)),] )

xmlAutomataGetInitState = _rpythonic_function_(		"xmlAutomataGetInitState", ctypes.POINTER(_xmlAutomataState), [
	("am",		ctypes.POINTER(_xmlAutomata)),] )

xmlAutomataSetFinalState = _rpythonic_function_(		"xmlAutomataSetFinalState", ctypes.c_int, [
	("am",		ctypes.POINTER(_xmlAutomata)),
	("state",		ctypes.POINTER(_xmlAutomataState)),] )

xmlAutomataNewState = _rpythonic_function_(		"xmlAutomataNewState", ctypes.POINTER(_xmlAutomataState), [
	("am",		ctypes.POINTER(_xmlAutomata)),] )

xmlAutomataNewTransition = _rpythonic_function_(		"xmlAutomataNewTransition", ctypes.POINTER(_xmlAutomataState), [
	("am",		ctypes.POINTER(_xmlAutomata)),
	("from",		ctypes.POINTER(_xmlAutomataState)),
	("to",		ctypes.POINTER(_xmlAutomataState)),
	("token",		ctypes.POINTER(ctypes.c_ubyte)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlAutomataNewTransition2 = _rpythonic_function_(		"xmlAutomataNewTransition2", ctypes.POINTER(_xmlAutomataState), [
	("am",		ctypes.POINTER(_xmlAutomata)),
	("from",		ctypes.POINTER(_xmlAutomataState)),
	("to",		ctypes.POINTER(_xmlAutomataState)),
	("token",		ctypes.POINTER(ctypes.c_ubyte)),
	("token2",		ctypes.POINTER(ctypes.c_ubyte)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlAutomataNewNegTrans = _rpythonic_function_(		"xmlAutomataNewNegTrans", ctypes.POINTER(_xmlAutomataState), [
	("am",		ctypes.POINTER(_xmlAutomata)),
	("from",		ctypes.POINTER(_xmlAutomataState)),
	("to",		ctypes.POINTER(_xmlAutomataState)),
	("token",		ctypes.POINTER(ctypes.c_ubyte)),
	("token2",		ctypes.POINTER(ctypes.c_ubyte)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlAutomataNewCountTrans = _rpythonic_function_(		"xmlAutomataNewCountTrans", ctypes.POINTER(_xmlAutomataState), [
	("am",		ctypes.POINTER(_xmlAutomata)),
	("from",		ctypes.POINTER(_xmlAutomataState)),
	("to",		ctypes.POINTER(_xmlAutomataState)),
	("token",		ctypes.POINTER(ctypes.c_ubyte)),
	("min",		ctypes.c_int),
	("max",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlAutomataNewCountTrans2 = _rpythonic_function_(		"xmlAutomataNewCountTrans2", ctypes.POINTER(_xmlAutomataState), [
	("am",		ctypes.POINTER(_xmlAutomata)),
	("from",		ctypes.POINTER(_xmlAutomataState)),
	("to",		ctypes.POINTER(_xmlAutomataState)),
	("token",		ctypes.POINTER(ctypes.c_ubyte)),
	("token2",		ctypes.POINTER(ctypes.c_ubyte)),
	("min",		ctypes.c_int),
	("max",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlAutomataNewOnceTrans2 = _rpythonic_function_(		"xmlAutomataNewOnceTrans2", ctypes.POINTER(_xmlAutomataState), [
	("am",		ctypes.POINTER(_xmlAutomata)),
	("from",		ctypes.POINTER(_xmlAutomataState)),
	("to",		ctypes.POINTER(_xmlAutomataState)),
	("token",		ctypes.POINTER(ctypes.c_ubyte)),
	("token2",		ctypes.POINTER(ctypes.c_ubyte)),
	("min",		ctypes.c_int),
	("max",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlAutomataNewOnceTrans = _rpythonic_function_(		"xmlAutomataNewOnceTrans", ctypes.POINTER(_xmlAutomataState), [
	("am",		ctypes.POINTER(_xmlAutomata)),
	("from",		ctypes.POINTER(_xmlAutomataState)),
	("to",		ctypes.POINTER(_xmlAutomataState)),
	("token",		ctypes.POINTER(ctypes.c_ubyte)),
	("min",		ctypes.c_int),
	("max",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlAutomataNewAllTrans = _rpythonic_function_(		"xmlAutomataNewAllTrans", ctypes.POINTER(_xmlAutomataState), [
	("am",		ctypes.POINTER(_xmlAutomata)),
	("from",		ctypes.POINTER(_xmlAutomataState)),
	("to",		ctypes.POINTER(_xmlAutomataState)),
	("lax",		ctypes.c_int),] )

xmlAutomataNewEpsilon = _rpythonic_function_(		"xmlAutomataNewEpsilon", ctypes.POINTER(_xmlAutomataState), [
	("am",		ctypes.POINTER(_xmlAutomata)),
	("from",		ctypes.POINTER(_xmlAutomataState)),
	("to",		ctypes.POINTER(_xmlAutomataState)),] )

xmlAutomataNewCountedTrans = _rpythonic_function_(		"xmlAutomataNewCountedTrans", ctypes.POINTER(_xmlAutomataState), [
	("am",		ctypes.POINTER(_xmlAutomata)),
	("from",		ctypes.POINTER(_xmlAutomataState)),
	("to",		ctypes.POINTER(_xmlAutomataState)),
	("counter",		ctypes.c_int),] )

xmlAutomataNewCounterTrans = _rpythonic_function_(		"xmlAutomataNewCounterTrans", ctypes.POINTER(_xmlAutomataState), [
	("am",		ctypes.POINTER(_xmlAutomata)),
	("from",		ctypes.POINTER(_xmlAutomataState)),
	("to",		ctypes.POINTER(_xmlAutomataState)),
	("counter",		ctypes.c_int),] )

xmlAutomataNewCounter = _rpythonic_function_(		"xmlAutomataNewCounter", ctypes.c_int, [
	("am",		ctypes.POINTER(_xmlAutomata)),
	("min",		ctypes.c_int),
	("max",		ctypes.c_int),] )

xmlAutomataCompile = _rpythonic_function_(		"xmlAutomataCompile", ctypes.POINTER(_xmlRegexp), [
	("am",		ctypes.POINTER(_xmlAutomata)),] )

xmlAutomataIsDeterminist = _rpythonic_function_(		"xmlAutomataIsDeterminist", ctypes.c_int, [
	("am",		ctypes.POINTER(_xmlAutomata)),] )

xmlAddNotationDecl = _rpythonic_function_(		"xmlAddNotationDecl", ctypes.POINTER(_xmlNotation), [
	("ctxt",		ctypes.POINTER(_xmlValidCtxt)),
	("dtd",		ctypes.POINTER(_xmlDtd)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("PublicID",		ctypes.POINTER(ctypes.c_ubyte)),
	("SystemID",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlCopyNotationTable = _rpythonic_function_(		"xmlCopyNotationTable", ctypes.POINTER(_xmlHashTable), [
	("table",		ctypes.POINTER(_xmlHashTable)),] )

xmlFreeNotationTable = _rpythonic_function_(		"xmlFreeNotationTable", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_xmlHashTable)),] )

xmlDumpNotationDecl = _rpythonic_function_(		"xmlDumpNotationDecl", ctypes.c_void_p, [
	("buf",		ctypes.POINTER(_xmlBuffer)),
	("nota",		ctypes.POINTER(_xmlNotation)),] )

xmlDumpNotationTable = _rpythonic_function_(		"xmlDumpNotationTable", ctypes.c_void_p, [
	("buf",		ctypes.POINTER(_xmlBuffer)),
	("table",		ctypes.POINTER(_xmlHashTable)),] )

xmlNewElementContent = _rpythonic_function_(		"xmlNewElementContent", ctypes.POINTER(_xmlElementContent), [
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_type",		ctypes.c_int),] )

xmlCopyElementContent = _rpythonic_function_(		"xmlCopyElementContent", ctypes.POINTER(_xmlElementContent), [
	("content",		ctypes.POINTER(_xmlElementContent)),] )

xmlFreeElementContent = _rpythonic_function_(		"xmlFreeElementContent", ctypes.c_void_p, [
	("cur",		ctypes.POINTER(_xmlElementContent)),] )

xmlNewDocElementContent = _rpythonic_function_(		"xmlNewDocElementContent", ctypes.POINTER(_xmlElementContent), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_type",		ctypes.c_int),] )

xmlCopyDocElementContent = _rpythonic_function_(		"xmlCopyDocElementContent", ctypes.POINTER(_xmlElementContent), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("content",		ctypes.POINTER(_xmlElementContent)),] )

xmlFreeDocElementContent = _rpythonic_function_(		"xmlFreeDocElementContent", ctypes.c_void_p, [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("cur",		ctypes.POINTER(_xmlElementContent)),] )

xmlSnprintfElementContent = _rpythonic_function_(		"xmlSnprintfElementContent", ctypes.c_void_p, [
	("buf",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_int),
	("content",		ctypes.POINTER(_xmlElementContent)),
	("englob",		ctypes.c_int),] )

xmlSprintfElementContent = _rpythonic_function_(		"xmlSprintfElementContent", ctypes.c_void_p, [
	("buf",		ctypes.POINTER(ctypes.c_char)),
	("content",		ctypes.POINTER(_xmlElementContent)),
	("englob",		ctypes.c_int),] )

xmlAddElementDecl = _rpythonic_function_(		"xmlAddElementDecl", ctypes.POINTER(_xmlElement), [
	("ctxt",		ctypes.POINTER(_xmlValidCtxt)),
	("dtd",		ctypes.POINTER(_xmlDtd)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_type",		ctypes.c_int),
	("content",		ctypes.POINTER(_xmlElementContent)),] )

xmlCopyElementTable = _rpythonic_function_(		"xmlCopyElementTable", ctypes.POINTER(_xmlHashTable), [
	("table",		ctypes.POINTER(_xmlHashTable)),] )

xmlFreeElementTable = _rpythonic_function_(		"xmlFreeElementTable", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_xmlHashTable)),] )

xmlDumpElementTable = _rpythonic_function_(		"xmlDumpElementTable", ctypes.c_void_p, [
	("buf",		ctypes.POINTER(_xmlBuffer)),
	("table",		ctypes.POINTER(_xmlHashTable)),] )

xmlDumpElementDecl = _rpythonic_function_(		"xmlDumpElementDecl", ctypes.c_void_p, [
	("buf",		ctypes.POINTER(_xmlBuffer)),
	("elem",		ctypes.POINTER(_xmlElement)),] )

xmlCreateEnumeration = _rpythonic_function_(		"xmlCreateEnumeration", ctypes.POINTER(_xmlEnumeration), [
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlFreeEnumeration = _rpythonic_function_(		"xmlFreeEnumeration", ctypes.c_void_p, [
	("cur",		ctypes.POINTER(_xmlEnumeration)),] )

xmlCopyEnumeration = _rpythonic_function_(		"xmlCopyEnumeration", ctypes.POINTER(_xmlEnumeration), [
	("cur",		ctypes.POINTER(_xmlEnumeration)),] )

xmlAddAttributeDecl = _rpythonic_function_(		"xmlAddAttributeDecl", ctypes.POINTER(_xmlAttribute), [
	("ctxt",		ctypes.POINTER(_xmlValidCtxt)),
	("dtd",		ctypes.POINTER(_xmlDtd)),
	("elem",		ctypes.POINTER(ctypes.c_ubyte)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("ns",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_type",		ctypes.c_int),
	("C_def",		ctypes.c_int),
	("defaultValue",		ctypes.POINTER(ctypes.c_ubyte)),
	("tree",		ctypes.POINTER(_xmlEnumeration)),] )

xmlCopyAttributeTable = _rpythonic_function_(		"xmlCopyAttributeTable", ctypes.POINTER(_xmlHashTable), [
	("table",		ctypes.POINTER(_xmlHashTable)),] )

xmlFreeAttributeTable = _rpythonic_function_(		"xmlFreeAttributeTable", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_xmlHashTable)),] )

xmlDumpAttributeTable = _rpythonic_function_(		"xmlDumpAttributeTable", ctypes.c_void_p, [
	("buf",		ctypes.POINTER(_xmlBuffer)),
	("table",		ctypes.POINTER(_xmlHashTable)),] )

xmlDumpAttributeDecl = _rpythonic_function_(		"xmlDumpAttributeDecl", ctypes.c_void_p, [
	("buf",		ctypes.POINTER(_xmlBuffer)),
	("attr",		ctypes.POINTER(_xmlAttribute)),] )

xmlAddID = _rpythonic_function_(		"xmlAddID", ctypes.POINTER(_xmlID), [
	("ctxt",		ctypes.POINTER(_xmlValidCtxt)),
	("doc",		ctypes.POINTER(_xmlDoc)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),
	("attr",		ctypes.POINTER(_xmlAttr)),] )

xmlFreeIDTable = _rpythonic_function_(		"xmlFreeIDTable", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_xmlHashTable)),] )

xmlGetID = _rpythonic_function_(		"xmlGetID", ctypes.POINTER(_xmlAttr), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("ID",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlIsID = _rpythonic_function_(		"xmlIsID", ctypes.c_int, [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("elem",		ctypes.POINTER(_xmlNode)),
	("attr",		ctypes.POINTER(_xmlAttr)),] )

xmlRemoveID = _rpythonic_function_(		"xmlRemoveID", ctypes.c_int, [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("attr",		ctypes.POINTER(_xmlAttr)),] )

xmlAddRef = _rpythonic_function_(		"xmlAddRef", ctypes.POINTER(_xmlRef), [
	("ctxt",		ctypes.POINTER(_xmlValidCtxt)),
	("doc",		ctypes.POINTER(_xmlDoc)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),
	("attr",		ctypes.POINTER(_xmlAttr)),] )

xmlFreeRefTable = _rpythonic_function_(		"xmlFreeRefTable", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_xmlHashTable)),] )

xmlIsRef = _rpythonic_function_(		"xmlIsRef", ctypes.c_int, [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("elem",		ctypes.POINTER(_xmlNode)),
	("attr",		ctypes.POINTER(_xmlAttr)),] )

xmlRemoveRef = _rpythonic_function_(		"xmlRemoveRef", ctypes.c_int, [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("attr",		ctypes.POINTER(_xmlAttr)),] )

xmlGetRefs = _rpythonic_function_(		"xmlGetRefs", ctypes.POINTER(_xmlList), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("ID",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlNewValidCtxt = _rpythonic_function_(		"xmlNewValidCtxt", ctypes.POINTER(_xmlValidCtxt), [] )

xmlFreeValidCtxt = _rpythonic_function_(		"xmlFreeValidCtxt", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlValidateRoot = _rpythonic_function_(		"xmlValidateRoot", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlValidCtxt)),
	("doc",		ctypes.POINTER(_xmlDoc)),] )

xmlValidateElementDecl = _rpythonic_function_(		"xmlValidateElementDecl", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlValidCtxt)),
	("doc",		ctypes.POINTER(_xmlDoc)),
	("elem",		ctypes.POINTER(_xmlElement)),] )

xmlValidNormalizeAttributeValue = _rpythonic_function_(		"xmlValidNormalizeAttributeValue", ctypes.POINTER(ctypes.c_ubyte), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("elem",		ctypes.POINTER(_xmlNode)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlValidCtxtNormalizeAttributeValue = _rpythonic_function_(		"xmlValidCtxtNormalizeAttributeValue", ctypes.POINTER(ctypes.c_ubyte), [
	("ctxt",		ctypes.POINTER(_xmlValidCtxt)),
	("doc",		ctypes.POINTER(_xmlDoc)),
	("elem",		ctypes.POINTER(_xmlNode)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlValidateAttributeDecl = _rpythonic_function_(		"xmlValidateAttributeDecl", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlValidCtxt)),
	("doc",		ctypes.POINTER(_xmlDoc)),
	("attr",		ctypes.POINTER(_xmlAttribute)),] )

xmlValidateAttributeValue = _rpythonic_function_(		"xmlValidateAttributeValue", ctypes.c_int, [
	("C_type",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlValidateNotationDecl = _rpythonic_function_(		"xmlValidateNotationDecl", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlValidCtxt)),
	("doc",		ctypes.POINTER(_xmlDoc)),
	("nota",		ctypes.POINTER(_xmlNotation)),] )

xmlValidateDtd = _rpythonic_function_(		"xmlValidateDtd", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlValidCtxt)),
	("doc",		ctypes.POINTER(_xmlDoc)),
	("dtd",		ctypes.POINTER(_xmlDtd)),] )

xmlValidateDtdFinal = _rpythonic_function_(		"xmlValidateDtdFinal", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlValidCtxt)),
	("doc",		ctypes.POINTER(_xmlDoc)),] )

xmlValidateDocument = _rpythonic_function_(		"xmlValidateDocument", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlValidCtxt)),
	("doc",		ctypes.POINTER(_xmlDoc)),] )

xmlValidateElement = _rpythonic_function_(		"xmlValidateElement", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlValidCtxt)),
	("doc",		ctypes.POINTER(_xmlDoc)),
	("elem",		ctypes.POINTER(_xmlNode)),] )

xmlValidateOneElement = _rpythonic_function_(		"xmlValidateOneElement", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlValidCtxt)),
	("doc",		ctypes.POINTER(_xmlDoc)),
	("elem",		ctypes.POINTER(_xmlNode)),] )

xmlValidateOneAttribute = _rpythonic_function_(		"xmlValidateOneAttribute", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlValidCtxt)),
	("doc",		ctypes.POINTER(_xmlDoc)),
	("elem",		ctypes.POINTER(_xmlNode)),
	("attr",		ctypes.POINTER(_xmlAttr)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlValidateOneNamespace = _rpythonic_function_(		"xmlValidateOneNamespace", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlValidCtxt)),
	("doc",		ctypes.POINTER(_xmlDoc)),
	("elem",		ctypes.POINTER(_xmlNode)),
	("prefix",		ctypes.POINTER(ctypes.c_ubyte)),
	("ns",		ctypes.POINTER(_xmlNs)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlValidateDocumentFinal = _rpythonic_function_(		"xmlValidateDocumentFinal", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlValidCtxt)),
	("doc",		ctypes.POINTER(_xmlDoc)),] )

xmlValidateNotationUse = _rpythonic_function_(		"xmlValidateNotationUse", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlValidCtxt)),
	("doc",		ctypes.POINTER(_xmlDoc)),
	("notationName",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlIsMixedElement = _rpythonic_function_(		"xmlIsMixedElement", ctypes.c_int, [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlGetDtdAttrDesc = _rpythonic_function_(		"xmlGetDtdAttrDesc", ctypes.POINTER(_xmlAttribute), [
	("dtd",		ctypes.POINTER(_xmlDtd)),
	("elem",		ctypes.POINTER(ctypes.c_ubyte)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlGetDtdQAttrDesc = _rpythonic_function_(		"xmlGetDtdQAttrDesc", ctypes.POINTER(_xmlAttribute), [
	("dtd",		ctypes.POINTER(_xmlDtd)),
	("elem",		ctypes.POINTER(ctypes.c_ubyte)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("prefix",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlGetDtdNotationDesc = _rpythonic_function_(		"xmlGetDtdNotationDesc", ctypes.POINTER(_xmlNotation), [
	("dtd",		ctypes.POINTER(_xmlDtd)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlGetDtdQElementDesc = _rpythonic_function_(		"xmlGetDtdQElementDesc", ctypes.POINTER(_xmlElement), [
	("dtd",		ctypes.POINTER(_xmlDtd)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("prefix",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlGetDtdElementDesc = _rpythonic_function_(		"xmlGetDtdElementDesc", ctypes.POINTER(_xmlElement), [
	("dtd",		ctypes.POINTER(_xmlDtd)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlValidGetPotentialChildren = _rpythonic_function_(		"xmlValidGetPotentialChildren", ctypes.c_int, [
	("ctree",		ctypes.POINTER(_xmlElementContent)),
	("names",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("C_len",		ctypes.POINTER(ctypes.c_int)),
	("max",		ctypes.c_int),] )

xmlValidGetValidElements = _rpythonic_function_(		"xmlValidGetValidElements", ctypes.c_int, [
	("prev",		ctypes.POINTER(_xmlNode)),
	("next",		ctypes.POINTER(_xmlNode)),
	("names",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("max",		ctypes.c_int),] )

xmlValidateNameValue = _rpythonic_function_(		"xmlValidateNameValue", ctypes.c_int, [
	("value",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlValidateNamesValue = _rpythonic_function_(		"xmlValidateNamesValue", ctypes.c_int, [
	("value",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlValidateNmtokenValue = _rpythonic_function_(		"xmlValidateNmtokenValue", ctypes.c_int, [
	("value",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlValidateNmtokensValue = _rpythonic_function_(		"xmlValidateNmtokensValue", ctypes.c_int, [
	("value",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlValidBuildContentModel = _rpythonic_function_(		"xmlValidBuildContentModel", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlValidCtxt)),
	("elem",		ctypes.POINTER(_xmlElement)),] )

xmlValidatePushElement = _rpythonic_function_(		"xmlValidatePushElement", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlValidCtxt)),
	("doc",		ctypes.POINTER(_xmlDoc)),
	("elem",		ctypes.POINTER(_xmlNode)),
	("qname",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlValidatePushCData = _rpythonic_function_(		"xmlValidatePushCData", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlValidCtxt)),
	("data",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlValidatePopElement = _rpythonic_function_(		"xmlValidatePopElement", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlValidCtxt)),
	("doc",		ctypes.POINTER(_xmlDoc)),
	("elem",		ctypes.POINTER(_xmlNode)),
	("qname",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlInitializePredefinedEntities = _rpythonic_function_(		"xmlInitializePredefinedEntities", ctypes.c_void_p, [] )

xmlNewEntity = _rpythonic_function_(		"xmlNewEntity", ctypes.POINTER(_xmlEntity), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_type",		ctypes.c_int),
	("ExternalID",		ctypes.POINTER(ctypes.c_ubyte)),
	("SystemID",		ctypes.POINTER(ctypes.c_ubyte)),
	("content",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlAddDocEntity = _rpythonic_function_(		"xmlAddDocEntity", ctypes.POINTER(_xmlEntity), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_type",		ctypes.c_int),
	("ExternalID",		ctypes.POINTER(ctypes.c_ubyte)),
	("SystemID",		ctypes.POINTER(ctypes.c_ubyte)),
	("content",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlAddDtdEntity = _rpythonic_function_(		"xmlAddDtdEntity", ctypes.POINTER(_xmlEntity), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_type",		ctypes.c_int),
	("ExternalID",		ctypes.POINTER(ctypes.c_ubyte)),
	("SystemID",		ctypes.POINTER(ctypes.c_ubyte)),
	("content",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlGetPredefinedEntity = _rpythonic_function_(		"xmlGetPredefinedEntity", ctypes.POINTER(_xmlEntity), [
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlGetDocEntity = _rpythonic_function_(		"xmlGetDocEntity", ctypes.POINTER(_xmlEntity), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlGetDtdEntity = _rpythonic_function_(		"xmlGetDtdEntity", ctypes.POINTER(_xmlEntity), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlGetParameterEntity = _rpythonic_function_(		"xmlGetParameterEntity", ctypes.POINTER(_xmlEntity), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlEncodeEntities = _rpythonic_function_(		"xmlEncodeEntities", ctypes.POINTER(ctypes.c_ubyte), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("input",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlEncodeEntitiesReentrant = _rpythonic_function_(		"xmlEncodeEntitiesReentrant", ctypes.POINTER(ctypes.c_ubyte), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("input",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlEncodeSpecialChars = _rpythonic_function_(		"xmlEncodeSpecialChars", ctypes.POINTER(ctypes.c_ubyte), [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("input",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlCreateEntitiesTable = _rpythonic_function_(		"xmlCreateEntitiesTable", ctypes.POINTER(_xmlHashTable), [] )

xmlCopyEntitiesTable = _rpythonic_function_(		"xmlCopyEntitiesTable", ctypes.POINTER(_xmlHashTable), [
	("table",		ctypes.POINTER(_xmlHashTable)),] )

xmlFreeEntitiesTable = _rpythonic_function_(		"xmlFreeEntitiesTable", ctypes.c_void_p, [
	("table",		ctypes.POINTER(_xmlHashTable)),] )

xmlDumpEntitiesTable = _rpythonic_function_(		"xmlDumpEntitiesTable", ctypes.c_void_p, [
	("buf",		ctypes.POINTER(_xmlBuffer)),
	("table",		ctypes.POINTER(_xmlHashTable)),] )

xmlDumpEntityDecl = _rpythonic_function_(		"xmlDumpEntityDecl", ctypes.c_void_p, [
	("buf",		ctypes.POINTER(_xmlBuffer)),
	("ent",		ctypes.POINTER(_xmlEntity)),] )

xmlCleanupPredefinedEntities = _rpythonic_function_(		"xmlCleanupPredefinedEntities", ctypes.c_void_p, [] )

xmlParserInputDeallocate = _rpythonic_function_(		"xmlParserInputDeallocate", ctypes.c_void_p, [
	("C_str",		ctypes.POINTER(ctypes.c_ubyte)),] )

getPublicId = _rpythonic_function_(		"getPublicId", ctypes.POINTER(ctypes.c_ubyte), [("ctx",		ctypes.c_void_p)] )

getSystemId = _rpythonic_function_(		"getSystemId", ctypes.POINTER(ctypes.c_ubyte), [("ctx",		ctypes.c_void_p)] )

getLineNumber = _rpythonic_function_(		"getLineNumber", ctypes.c_int, [("ctx",		ctypes.c_void_p)] )

getColumnNumber = _rpythonic_function_(		"getColumnNumber", ctypes.c_int, [("ctx",		ctypes.c_void_p)] )

resolveEntitySAXFunc = _rpythonic_function_(		"resolveEntitySAXFunc", ctypes.POINTER(_xmlParserInput), [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("publicId",		ctypes.POINTER(ctypes.c_ubyte)),
	("systemId",		ctypes.POINTER(ctypes.c_ubyte)),] )

internalSubsetSAXFunc = _rpythonic_function_(		"internalSubsetSAXFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("ExternalID",		ctypes.POINTER(ctypes.c_ubyte)),
	("SystemID",		ctypes.POINTER(ctypes.c_ubyte)),] )

externalSubsetSAXFunc = _rpythonic_function_(		"externalSubsetSAXFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("ExternalID",		ctypes.POINTER(ctypes.c_ubyte)),
	("SystemID",		ctypes.POINTER(ctypes.c_ubyte)),] )

getEntitySAXFunc = _rpythonic_function_(		"getEntitySAXFunc", ctypes.POINTER(_xmlEntity), [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

getParameterEntitySAXFunc = _rpythonic_function_(		"getParameterEntitySAXFunc", ctypes.POINTER(_xmlEntity), [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

entityDeclSAXFunc = _rpythonic_function_(		"entityDeclSAXFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_type",		ctypes.c_int),
	("publicId",		ctypes.POINTER(ctypes.c_ubyte)),
	("systemId",		ctypes.POINTER(ctypes.c_ubyte)),
	("content",		ctypes.POINTER(ctypes.c_ubyte)),] )

notationDeclSAXFunc = _rpythonic_function_(		"notationDeclSAXFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("publicId",		ctypes.POINTER(ctypes.c_ubyte)),
	("systemId",		ctypes.POINTER(ctypes.c_ubyte)),] )

attributeDeclSAXFunc = _rpythonic_function_(		"attributeDeclSAXFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("elem",		ctypes.POINTER(ctypes.c_ubyte)),
	("fullname",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_type",		ctypes.c_int),
	("C_def",		ctypes.c_int),
	("defaultValue",		ctypes.POINTER(ctypes.c_ubyte)),
	("tree",		ctypes.POINTER(_xmlEnumeration)),] )

elementDeclSAXFunc = _rpythonic_function_(		"elementDeclSAXFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_type",		ctypes.c_int),
	("content",		ctypes.POINTER(_xmlElementContent)),] )

unparsedEntityDeclSAXFunc = _rpythonic_function_(		"unparsedEntityDeclSAXFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("publicId",		ctypes.POINTER(ctypes.c_ubyte)),
	("systemId",		ctypes.POINTER(ctypes.c_ubyte)),
	("notationName",		ctypes.POINTER(ctypes.c_ubyte)),] )

setDocumentLocatorSAXFunc = _rpythonic_function_(		"setDocumentLocatorSAXFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("loc",		ctypes.POINTER(_xmlSAXLocator)),] )

startDocumentSAXFunc = _rpythonic_function_(		"startDocumentSAXFunc", ctypes.c_void_p, [("ctx",		ctypes.c_void_p)] )

endDocumentSAXFunc = _rpythonic_function_(		"endDocumentSAXFunc", ctypes.c_void_p, [("ctx",		ctypes.c_void_p)] )

startElementSAXFunc = _rpythonic_function_(		"startElementSAXFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("atts",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),] )

endElementSAXFunc = _rpythonic_function_(		"endElementSAXFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

attributeSAXFunc = _rpythonic_function_(		"attributeSAXFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),] )

referenceSAXFunc = _rpythonic_function_(		"referenceSAXFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

charactersSAXFunc = _rpythonic_function_(		"charactersSAXFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("ch",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

ignorableWhitespaceSAXFunc = _rpythonic_function_(		"ignorableWhitespaceSAXFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("ch",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

processingInstructionSAXFunc = _rpythonic_function_(		"processingInstructionSAXFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("target",		ctypes.POINTER(ctypes.c_ubyte)),
	("data",		ctypes.POINTER(ctypes.c_ubyte)),] )

commentSAXFunc = _rpythonic_function_(		"commentSAXFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),] )

cdataBlockSAXFunc = _rpythonic_function_(		"cdataBlockSAXFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

isStandaloneSAXFunc = _rpythonic_function_(		"isStandaloneSAXFunc", ctypes.c_int, [("ctx",		ctypes.c_void_p)] )

hasInternalSubsetSAXFunc = _rpythonic_function_(		"hasInternalSubsetSAXFunc", ctypes.c_int, [("ctx",		ctypes.c_void_p)] )

hasExternalSubsetSAXFunc = _rpythonic_function_(		"hasExternalSubsetSAXFunc", ctypes.c_int, [("ctx",		ctypes.c_void_p)] )

startElementNsSAX2Func = _rpythonic_function_(		"startElementNsSAX2Func", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("localname",		ctypes.POINTER(ctypes.c_ubyte)),
	("prefix",		ctypes.POINTER(ctypes.c_ubyte)),
	("URI",		ctypes.POINTER(ctypes.c_ubyte)),
	("nb_namespaces",		ctypes.c_int),
	("namespaces",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("nb_attributes",		ctypes.c_int),
	("nb_defaulted",		ctypes.c_int),
	("attributes",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),] )

endElementNsSAX2Func = _rpythonic_function_(		"endElementNsSAX2Func", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("localname",		ctypes.POINTER(ctypes.c_ubyte)),
	("prefix",		ctypes.POINTER(ctypes.c_ubyte)),
	("URI",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlExternalEntityLoader = _rpythonic_function_(		"xmlExternalEntityLoader", ctypes.POINTER(_xmlParserInput), [
	("URL",		ctypes.POINTER(ctypes.c_char)),
	("ID",		ctypes.POINTER(ctypes.c_char)),
	("context",		ctypes.POINTER(_xmlParserCtxt)),] )

iconv_open = _rpythonic_function_(		"iconv_open", ctypes.POINTER(ctypes.c_void_p), [
	("__tocode",		ctypes.POINTER(ctypes.c_char)),
	("__fromcode",		ctypes.POINTER(ctypes.c_char)),] )

iconv = _rpythonic_function_(		"iconv", ctypes.c_uint, [
	("__cd",		ctypes.POINTER(ctypes.c_void_p)),
	("__inbuf",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__inbytesleft",		ctypes.POINTER(ctypes.c_uint)),
	("__outbuf",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__outbytesleft",		ctypes.POINTER(ctypes.c_uint)),] )

xmlInitCharEncodingHandlers = _rpythonic_function_(		"xmlInitCharEncodingHandlers", ctypes.c_void_p, [] )

xmlCleanupCharEncodingHandlers = _rpythonic_function_(		"xmlCleanupCharEncodingHandlers", ctypes.c_void_p, [] )

xmlRegisterCharEncodingHandler = _rpythonic_function_(		"xmlRegisterCharEncodingHandler", ctypes.c_void_p, [
	("handler",		ctypes.POINTER(_xmlCharEncodingHandler)),] )

xmlGetCharEncodingHandler = _rpythonic_function_(		"xmlGetCharEncodingHandler", ctypes.POINTER(_xmlCharEncodingHandler), [
	("enc",		ctypes.c_int),] )

xmlFindCharEncodingHandler = _rpythonic_function_(		"xmlFindCharEncodingHandler", ctypes.POINTER(_xmlCharEncodingHandler), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

xmlNewCharEncodingHandler = _rpythonic_function_(		"xmlNewCharEncodingHandler", ctypes.POINTER(_xmlCharEncodingHandler), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("input",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_int),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_int),)),
	("output",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_int),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_int),)),] )

xmlAddEncodingAlias = _rpythonic_function_(		"xmlAddEncodingAlias", ctypes.c_int, [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("alias",		ctypes.POINTER(ctypes.c_char)),] )

xmlDelEncodingAlias = _rpythonic_function_(		"xmlDelEncodingAlias", ctypes.c_int, [
	("alias",		ctypes.POINTER(ctypes.c_char)),] )

xmlGetEncodingAlias = _rpythonic_function_(		"xmlGetEncodingAlias", ctypes.POINTER(ctypes.c_char), [
	("alias",		ctypes.POINTER(ctypes.c_char)),] )

xmlCleanupEncodingAliases = _rpythonic_function_(		"xmlCleanupEncodingAliases", ctypes.c_void_p, [] )

xmlParseCharEncoding = _rpythonic_function_(		"xmlParseCharEncoding", ctypes.c_int, [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

xmlGetCharEncodingName = _rpythonic_function_(		"xmlGetCharEncodingName", ctypes.POINTER(ctypes.c_char), [
	("enc",		ctypes.c_int),] )

xmlDetectCharEncoding = _rpythonic_function_(		"xmlDetectCharEncoding", ctypes.c_int, [
	("C_in",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlCharEncOutFunc = _rpythonic_function_(		"xmlCharEncOutFunc", ctypes.c_int, [
	("handler",		ctypes.POINTER(_xmlCharEncodingHandler)),
	("out",		ctypes.POINTER(_xmlBuffer)),
	("C_in",		ctypes.POINTER(_xmlBuffer)),] )

xmlCharEncInFunc = _rpythonic_function_(		"xmlCharEncInFunc", ctypes.c_int, [
	("handler",		ctypes.POINTER(_xmlCharEncodingHandler)),
	("out",		ctypes.POINTER(_xmlBuffer)),
	("C_in",		ctypes.POINTER(_xmlBuffer)),] )

xmlCharEncFirstLine = _rpythonic_function_(		"xmlCharEncFirstLine", ctypes.c_int, [
	("handler",		ctypes.POINTER(_xmlCharEncodingHandler)),
	("out",		ctypes.POINTER(_xmlBuffer)),
	("C_in",		ctypes.POINTER(_xmlBuffer)),] )

xmlCharEncCloseFunc = _rpythonic_function_(		"xmlCharEncCloseFunc", ctypes.c_int, [
	("handler",		ctypes.POINTER(_xmlCharEncodingHandler)),] )

UTF8Toisolat1 = _rpythonic_function_(		"UTF8Toisolat1", ctypes.c_int, [
	("out",		ctypes.POINTER(ctypes.c_ubyte)),
	("outlen",		ctypes.POINTER(ctypes.c_int)),
	("C_in",		ctypes.POINTER(ctypes.c_ubyte)),
	("inlen",		ctypes.POINTER(ctypes.c_int)),] )

isolat1ToUTF8 = _rpythonic_function_(		"isolat1ToUTF8", ctypes.c_int, [
	("out",		ctypes.POINTER(ctypes.c_ubyte)),
	("outlen",		ctypes.POINTER(ctypes.c_int)),
	("C_in",		ctypes.POINTER(ctypes.c_ubyte)),
	("inlen",		ctypes.POINTER(ctypes.c_int)),] )

xmlInputMatchCallback = _rpythonic_function_(		"xmlInputMatchCallback", ctypes.c_int, [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

xmlInputOpenCallback = _rpythonic_function_(		"xmlInputOpenCallback", ctypes.POINTER(ctypes.c_void_p), [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

xmlInputReadCallback = _rpythonic_function_(		"xmlInputReadCallback", ctypes.c_int, [
	("context",		ctypes.POINTER(ctypes.c_void_p)),
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

xmlInputCloseCallback = _rpythonic_function_(		"xmlInputCloseCallback", ctypes.c_int, [("context",		ctypes.c_void_p)] )

xmlOutputMatchCallback = _rpythonic_function_(		"xmlOutputMatchCallback", ctypes.c_int, [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

xmlOutputOpenCallback = _rpythonic_function_(		"xmlOutputOpenCallback", ctypes.POINTER(ctypes.c_void_p), [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

xmlOutputWriteCallback = _rpythonic_function_(		"xmlOutputWriteCallback", ctypes.c_int, [
	("context",		ctypes.POINTER(ctypes.c_void_p)),
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

xmlOutputCloseCallback = _rpythonic_function_(		"xmlOutputCloseCallback", ctypes.c_int, [("context",		ctypes.c_void_p)] )

xmlCleanupInputCallbacks = _rpythonic_function_(		"xmlCleanupInputCallbacks", ctypes.c_void_p, [] )

xmlPopInputCallbacks = _rpythonic_function_(		"xmlPopInputCallbacks", ctypes.c_int, [] )

xmlRegisterDefaultInputCallbacks = _rpythonic_function_(		"xmlRegisterDefaultInputCallbacks", ctypes.c_void_p, [] )

xmlAllocParserInputBuffer = _rpythonic_function_(		"xmlAllocParserInputBuffer", ctypes.POINTER(_xmlParserInputBuffer), [
	("enc",		ctypes.c_int),] )

xmlParserInputBufferCreateFilename = _rpythonic_function_(		"xmlParserInputBufferCreateFilename", ctypes.POINTER(_xmlParserInputBuffer), [
	("URI",		ctypes.POINTER(ctypes.c_char)),
	("enc",		ctypes.c_int),] )

xmlParserInputBufferCreateFile = _rpythonic_function_(		"xmlParserInputBufferCreateFile", ctypes.POINTER(_xmlParserInputBuffer), [
	("file",		ctypes.POINTER(_IO_FILE)),
	("enc",		ctypes.c_int),] )

xmlParserInputBufferCreateFd = _rpythonic_function_(		"xmlParserInputBufferCreateFd", ctypes.POINTER(_xmlParserInputBuffer), [
	("fd",		ctypes.c_int),
	("enc",		ctypes.c_int),] )

xmlParserInputBufferCreateMem = _rpythonic_function_(		"xmlParserInputBufferCreateMem", ctypes.POINTER(_xmlParserInputBuffer), [
	("mem",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_int),
	("enc",		ctypes.c_int),] )

xmlParserInputBufferCreateStatic = _rpythonic_function_(		"xmlParserInputBufferCreateStatic", ctypes.POINTER(_xmlParserInputBuffer), [
	("mem",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_int),
	("enc",		ctypes.c_int),] )

xmlParserInputBufferCreateIO = _rpythonic_function_(		"xmlParserInputBufferCreateIO", ctypes.POINTER(_xmlParserInputBuffer), [
	("ioread",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),ctypes.c_int,)),
	("ioclose",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("ioctx",		ctypes.POINTER(ctypes.c_void_p)),
	("enc",		ctypes.c_int),] )

xmlParserInputBufferRead = _rpythonic_function_(		"xmlParserInputBufferRead", ctypes.c_int, [
	("C_in",		ctypes.POINTER(_xmlParserInputBuffer)),
	("C_len",		ctypes.c_int),] )

xmlParserInputBufferGrow = _rpythonic_function_(		"xmlParserInputBufferGrow", ctypes.c_int, [
	("C_in",		ctypes.POINTER(_xmlParserInputBuffer)),
	("C_len",		ctypes.c_int),] )

xmlParserInputBufferPush = _rpythonic_function_(		"xmlParserInputBufferPush", ctypes.c_int, [
	("C_in",		ctypes.POINTER(_xmlParserInputBuffer)),
	("C_len",		ctypes.c_int),
	("buf",		ctypes.POINTER(ctypes.c_char)),] )

xmlFreeParserInputBuffer = _rpythonic_function_(		"xmlFreeParserInputBuffer", ctypes.c_void_p, [
	("C_in",		ctypes.POINTER(_xmlParserInputBuffer)),] )

xmlParserGetDirectory = _rpythonic_function_(		"xmlParserGetDirectory", ctypes.POINTER(ctypes.c_char), [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

xmlRegisterInputCallbacks = _rpythonic_function_(		"xmlRegisterInputCallbacks", ctypes.c_int, [
	("matchFunc",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_char),)),
	("openFunc",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), ctypes.POINTER(ctypes.c_char),))),
	("readFunc",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),ctypes.c_int,)),
	("closeFunc",		ctypes.CFUNCTYPE(ctypes.c_int, )),] )

xmlCleanupOutputCallbacks = _rpythonic_function_(		"xmlCleanupOutputCallbacks", ctypes.c_void_p, [] )

xmlRegisterDefaultOutputCallbacks = _rpythonic_function_(		"xmlRegisterDefaultOutputCallbacks", ctypes.c_void_p, [] )

xmlAllocOutputBuffer = _rpythonic_function_(		"xmlAllocOutputBuffer", ctypes.POINTER(_xmlOutputBuffer), [
	("encoder",		ctypes.POINTER(_xmlCharEncodingHandler)),] )

xmlOutputBufferCreateFilename = _rpythonic_function_(		"xmlOutputBufferCreateFilename", ctypes.POINTER(_xmlOutputBuffer), [
	("URI",		ctypes.POINTER(ctypes.c_char)),
	("encoder",		ctypes.POINTER(_xmlCharEncodingHandler)),
	("compression",		ctypes.c_int),] )

xmlOutputBufferCreateFile = _rpythonic_function_(		"xmlOutputBufferCreateFile", ctypes.POINTER(_xmlOutputBuffer), [
	("file",		ctypes.POINTER(_IO_FILE)),
	("encoder",		ctypes.POINTER(_xmlCharEncodingHandler)),] )

xmlOutputBufferCreateBuffer = _rpythonic_function_(		"xmlOutputBufferCreateBuffer", ctypes.POINTER(_xmlOutputBuffer), [
	("buffer",		ctypes.POINTER(_xmlBuffer)),
	("encoder",		ctypes.POINTER(_xmlCharEncodingHandler)),] )

xmlOutputBufferCreateFd = _rpythonic_function_(		"xmlOutputBufferCreateFd", ctypes.POINTER(_xmlOutputBuffer), [
	("fd",		ctypes.c_int),
	("encoder",		ctypes.POINTER(_xmlCharEncodingHandler)),] )

xmlOutputBufferCreateIO = _rpythonic_function_(		"xmlOutputBufferCreateIO", ctypes.POINTER(_xmlOutputBuffer), [
	("iowrite",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),ctypes.c_int,)),
	("ioclose",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("ioctx",		ctypes.POINTER(ctypes.c_void_p)),
	("encoder",		ctypes.POINTER(_xmlCharEncodingHandler)),] )

xmlOutputBufferWrite = _rpythonic_function_(		"xmlOutputBufferWrite", ctypes.c_int, [
	("out",		ctypes.POINTER(_xmlOutputBuffer)),
	("C_len",		ctypes.c_int),
	("buf",		ctypes.POINTER(ctypes.c_char)),] )

xmlOutputBufferWriteString = _rpythonic_function_(		"xmlOutputBufferWriteString", ctypes.c_int, [
	("out",		ctypes.POINTER(_xmlOutputBuffer)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

xmlOutputBufferWriteEscape = _rpythonic_function_(		"xmlOutputBufferWriteEscape", ctypes.c_int, [
	("out",		ctypes.POINTER(_xmlOutputBuffer)),
	("C_str",		ctypes.POINTER(ctypes.c_ubyte)),
	("escaping",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_int),ctypes.POINTER(ctypes.c_ubyte),ctypes.POINTER(ctypes.c_int),)),] )

xmlOutputBufferFlush = _rpythonic_function_(		"xmlOutputBufferFlush", ctypes.c_int, [
	("out",		ctypes.POINTER(_xmlOutputBuffer)),] )

xmlOutputBufferClose = _rpythonic_function_(		"xmlOutputBufferClose", ctypes.c_int, [
	("out",		ctypes.POINTER(_xmlOutputBuffer)),] )

xmlRegisterOutputCallbacks = _rpythonic_function_(		"xmlRegisterOutputCallbacks", ctypes.c_int, [
	("matchFunc",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_char),)),
	("openFunc",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), ctypes.POINTER(ctypes.c_char),))),
	("writeFunc",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),ctypes.c_int,)),
	("closeFunc",		ctypes.CFUNCTYPE(ctypes.c_int, )),] )

xmlRegisterHTTPPostCallbacks = _rpythonic_function_(		"xmlRegisterHTTPPostCallbacks", ctypes.c_void_p, [] )

xmlCheckHTTPInput = _rpythonic_function_(		"xmlCheckHTTPInput", ctypes.POINTER(_xmlParserInput), [
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),
	("ret",		ctypes.POINTER(_xmlParserInput)),] )

xmlNoNetExternalEntityLoader = _rpythonic_function_(		"xmlNoNetExternalEntityLoader", ctypes.POINTER(_xmlParserInput), [
	("URL",		ctypes.POINTER(ctypes.c_char)),
	("ID",		ctypes.POINTER(ctypes.c_char)),
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),] )

xmlNormalizeWindowsPath = _rpythonic_function_(		"xmlNormalizeWindowsPath", ctypes.POINTER(ctypes.c_ubyte), [
	("path",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlCheckFilename = _rpythonic_function_(		"xmlCheckFilename", ctypes.c_int, [
	("path",		ctypes.POINTER(ctypes.c_char)),] )

xmlFileMatch = _rpythonic_function_(		"xmlFileMatch", ctypes.c_int, [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

xmlFileOpen = _rpythonic_function_(		"xmlFileOpen", ctypes.POINTER(ctypes.c_void_p), [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

xmlFileRead = _rpythonic_function_(		"xmlFileRead", ctypes.c_int, [
	("context",		ctypes.POINTER(ctypes.c_void_p)),
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

xmlFileClose = _rpythonic_function_(		"xmlFileClose", ctypes.c_int, [("context",		ctypes.c_void_p)] )

xmlIOHTTPMatch = _rpythonic_function_(		"xmlIOHTTPMatch", ctypes.c_int, [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

xmlIOHTTPOpen = _rpythonic_function_(		"xmlIOHTTPOpen", ctypes.POINTER(ctypes.c_void_p), [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

xmlIOHTTPOpenW = _rpythonic_function_(		"xmlIOHTTPOpenW", ctypes.POINTER(ctypes.c_void_p), [
	("post_uri",		ctypes.POINTER(ctypes.c_char)),
	("compression",		ctypes.c_int),] )

xmlIOHTTPRead = _rpythonic_function_(		"xmlIOHTTPRead", ctypes.c_int, [
	("context",		ctypes.POINTER(ctypes.c_void_p)),
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

xmlIOHTTPClose = _rpythonic_function_(		"xmlIOHTTPClose", ctypes.c_int, [("context",		ctypes.c_void_p)] )

xmlIOFTPMatch = _rpythonic_function_(		"xmlIOFTPMatch", ctypes.c_int, [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

xmlIOFTPOpen = _rpythonic_function_(		"xmlIOFTPOpen", ctypes.POINTER(ctypes.c_void_p), [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

xmlIOFTPRead = _rpythonic_function_(		"xmlIOFTPRead", ctypes.c_int, [
	("context",		ctypes.POINTER(ctypes.c_void_p)),
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

xmlIOFTPClose = _rpythonic_function_(		"xmlIOFTPClose", ctypes.c_int, [("context",		ctypes.c_void_p)] )

xmlInitParser = _rpythonic_function_(		"xmlInitParser", ctypes.c_void_p, [] )

xmlCleanupParser = _rpythonic_function_(		"xmlCleanupParser", ctypes.c_void_p, [] )

xmlParserInputRead = _rpythonic_function_(		"xmlParserInputRead", ctypes.c_int, [
	("C_in",		ctypes.POINTER(_xmlParserInput)),
	("C_len",		ctypes.c_int),] )

xmlParserInputGrow = _rpythonic_function_(		"xmlParserInputGrow", ctypes.c_int, [
	("C_in",		ctypes.POINTER(_xmlParserInput)),
	("C_len",		ctypes.c_int),] )

xmlParseDoc = _rpythonic_function_(		"xmlParseDoc", ctypes.POINTER(_xmlDoc), [
	("cur",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlParseFile = _rpythonic_function_(		"xmlParseFile", ctypes.POINTER(_xmlDoc), [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

xmlParseMemory = _rpythonic_function_(		"xmlParseMemory", ctypes.POINTER(_xmlDoc), [
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_int),] )

xmlSubstituteEntitiesDefault = _rpythonic_function_(		"xmlSubstituteEntitiesDefault", ctypes.c_int, [
	("val",		ctypes.c_int),] )

xmlKeepBlanksDefault = _rpythonic_function_(		"xmlKeepBlanksDefault", ctypes.c_int, [
	("val",		ctypes.c_int),] )

xmlStopParser = _rpythonic_function_(		"xmlStopParser", ctypes.c_void_p, [
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),] )

xmlPedanticParserDefault = _rpythonic_function_(		"xmlPedanticParserDefault", ctypes.c_int, [
	("val",		ctypes.c_int),] )

xmlLineNumbersDefault = _rpythonic_function_(		"xmlLineNumbersDefault", ctypes.c_int, [
	("val",		ctypes.c_int),] )

xmlRecoverDoc = _rpythonic_function_(		"xmlRecoverDoc", ctypes.POINTER(_xmlDoc), [
	("cur",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlRecoverMemory = _rpythonic_function_(		"xmlRecoverMemory", ctypes.POINTER(_xmlDoc), [
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_int),] )

xmlRecoverFile = _rpythonic_function_(		"xmlRecoverFile", ctypes.POINTER(_xmlDoc), [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

xmlParseDocument = _rpythonic_function_(		"xmlParseDocument", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),] )

xmlParseExtParsedEnt = _rpythonic_function_(		"xmlParseExtParsedEnt", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),] )

xmlSAXUserParseFile = _rpythonic_function_(		"xmlSAXUserParseFile", ctypes.c_int, [
	("sax",		ctypes.POINTER(_xmlSAXHandler)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

xmlSAXUserParseMemory = _rpythonic_function_(		"xmlSAXUserParseMemory", ctypes.c_int, [
	("sax",		ctypes.POINTER(_xmlSAXHandler)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_int),] )

xmlSAXParseDoc = _rpythonic_function_(		"xmlSAXParseDoc", ctypes.POINTER(_xmlDoc), [
	("sax",		ctypes.POINTER(_xmlSAXHandler)),
	("cur",		ctypes.POINTER(ctypes.c_ubyte)),
	("recovery",		ctypes.c_int),] )

xmlSAXParseMemory = _rpythonic_function_(		"xmlSAXParseMemory", ctypes.POINTER(_xmlDoc), [
	("sax",		ctypes.POINTER(_xmlSAXHandler)),
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_int),
	("recovery",		ctypes.c_int),] )

xmlSAXParseMemoryWithData = _rpythonic_function_(		"xmlSAXParseMemoryWithData", ctypes.POINTER(_xmlDoc), [
	("sax",		ctypes.POINTER(_xmlSAXHandler)),
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_int),
	("recovery",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlSAXParseFile = _rpythonic_function_(		"xmlSAXParseFile", ctypes.POINTER(_xmlDoc), [
	("sax",		ctypes.POINTER(_xmlSAXHandler)),
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("recovery",		ctypes.c_int),] )

xmlSAXParseFileWithData = _rpythonic_function_(		"xmlSAXParseFileWithData", ctypes.POINTER(_xmlDoc), [
	("sax",		ctypes.POINTER(_xmlSAXHandler)),
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("recovery",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlSAXParseEntity = _rpythonic_function_(		"xmlSAXParseEntity", ctypes.POINTER(_xmlDoc), [
	("sax",		ctypes.POINTER(_xmlSAXHandler)),
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

xmlParseEntity = _rpythonic_function_(		"xmlParseEntity", ctypes.POINTER(_xmlDoc), [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

xmlSAXParseDTD = _rpythonic_function_(		"xmlSAXParseDTD", ctypes.POINTER(_xmlDtd), [
	("sax",		ctypes.POINTER(_xmlSAXHandler)),
	("ExternalID",		ctypes.POINTER(ctypes.c_ubyte)),
	("SystemID",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlParseDTD = _rpythonic_function_(		"xmlParseDTD", ctypes.POINTER(_xmlDtd), [
	("ExternalID",		ctypes.POINTER(ctypes.c_ubyte)),
	("SystemID",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlIOParseDTD = _rpythonic_function_(		"xmlIOParseDTD", ctypes.POINTER(_xmlDtd), [
	("sax",		ctypes.POINTER(_xmlSAXHandler)),
	("input",		ctypes.POINTER(_xmlParserInputBuffer)),
	("enc",		ctypes.c_int),] )

xmlParseBalancedChunkMemory = _rpythonic_function_(		"xmlParseBalancedChunkMemory", ctypes.c_int, [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("sax",		ctypes.POINTER(_xmlSAXHandler)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("depth",		ctypes.c_int),
	("string",		ctypes.POINTER(ctypes.c_ubyte)),
	("lst",		ctypes.POINTER(ctypes.POINTER(_xmlNode))),] )

xmlParseInNodeContext = _rpythonic_function_(		"xmlParseInNodeContext", ctypes.c_int, [
	("node",		ctypes.POINTER(_xmlNode)),
	("data",		ctypes.POINTER(ctypes.c_char)),
	("datalen",		ctypes.c_int),
	("options",		ctypes.c_int),
	("lst",		ctypes.POINTER(ctypes.POINTER(_xmlNode))),] )

xmlParseBalancedChunkMemoryRecover = _rpythonic_function_(		"xmlParseBalancedChunkMemoryRecover", ctypes.c_int, [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("sax",		ctypes.POINTER(_xmlSAXHandler)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("depth",		ctypes.c_int),
	("string",		ctypes.POINTER(ctypes.c_ubyte)),
	("lst",		ctypes.POINTER(ctypes.POINTER(_xmlNode))),
	("recover",		ctypes.c_int),] )

xmlParseExternalEntity = _rpythonic_function_(		"xmlParseExternalEntity", ctypes.c_int, [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("sax",		ctypes.POINTER(_xmlSAXHandler)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("depth",		ctypes.c_int),
	("URL",		ctypes.POINTER(ctypes.c_ubyte)),
	("ID",		ctypes.POINTER(ctypes.c_ubyte)),
	("lst",		ctypes.POINTER(ctypes.POINTER(_xmlNode))),] )

xmlParseCtxtExternalEntity = _rpythonic_function_(		"xmlParseCtxtExternalEntity", ctypes.c_int, [
	("ctx",		ctypes.POINTER(_xmlParserCtxt)),
	("URL",		ctypes.POINTER(ctypes.c_ubyte)),
	("ID",		ctypes.POINTER(ctypes.c_ubyte)),
	("lst",		ctypes.POINTER(ctypes.POINTER(_xmlNode))),] )

xmlNewParserCtxt = _rpythonic_function_(		"xmlNewParserCtxt", ctypes.POINTER(_xmlParserCtxt), [] )

xmlInitParserCtxt = _rpythonic_function_(		"xmlInitParserCtxt", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),] )

xmlClearParserCtxt = _rpythonic_function_(		"xmlClearParserCtxt", ctypes.c_void_p, [
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),] )

xmlFreeParserCtxt = _rpythonic_function_(		"xmlFreeParserCtxt", ctypes.c_void_p, [
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),] )

xmlSetupParserForBuffer = _rpythonic_function_(		"xmlSetupParserForBuffer", ctypes.c_void_p, [
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),
	("buffer",		ctypes.POINTER(ctypes.c_ubyte)),
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

xmlCreateDocParserCtxt = _rpythonic_function_(		"xmlCreateDocParserCtxt", ctypes.POINTER(_xmlParserCtxt), [
	("cur",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlGetFeaturesList = _rpythonic_function_(		"xmlGetFeaturesList", ctypes.c_int, [
	("C_len",		ctypes.POINTER(ctypes.c_int)),
	("result",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

xmlGetFeature = _rpythonic_function_(		"xmlGetFeature", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("result",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlSetFeature = _rpythonic_function_(		"xmlSetFeature", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_void_p)),] )

xmlCreatePushParserCtxt = _rpythonic_function_(		"xmlCreatePushParserCtxt", ctypes.POINTER(_xmlParserCtxt), [
	("sax",		ctypes.POINTER(_xmlSAXHandler)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("chunk",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_int),
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

xmlParseChunk = _rpythonic_function_(		"xmlParseChunk", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),
	("chunk",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_int),
	("terminate",		ctypes.c_int),] )

xmlCreateIOParserCtxt = _rpythonic_function_(		"xmlCreateIOParserCtxt", ctypes.POINTER(_xmlParserCtxt), [
	("sax",		ctypes.POINTER(_xmlSAXHandler)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("ioread",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),ctypes.c_int,)),
	("ioclose",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("ioctx",		ctypes.POINTER(ctypes.c_void_p)),
	("enc",		ctypes.c_int),] )

xmlNewIOInputStream = _rpythonic_function_(		"xmlNewIOInputStream", ctypes.POINTER(_xmlParserInput), [
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),
	("input",		ctypes.POINTER(_xmlParserInputBuffer)),
	("enc",		ctypes.c_int),] )

xmlParserFindNodeInfo = _rpythonic_function_(		"xmlParserFindNodeInfo", ctypes.POINTER(_xmlParserNodeInfo), [
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),
	("node",		ctypes.POINTER(_xmlNode)),] )

xmlInitNodeInfoSeq = _rpythonic_function_(		"xmlInitNodeInfoSeq", ctypes.c_void_p, [
	("seq",		ctypes.POINTER(_xmlParserNodeInfoSeq)),] )

xmlClearNodeInfoSeq = _rpythonic_function_(		"xmlClearNodeInfoSeq", ctypes.c_void_p, [
	("seq",		ctypes.POINTER(_xmlParserNodeInfoSeq)),] )

xmlParserFindNodeInfoIndex = _rpythonic_function_(		"xmlParserFindNodeInfoIndex", ctypes.c_ulong, [
	("seq",		ctypes.POINTER(_xmlParserNodeInfoSeq)),
	("node",		ctypes.POINTER(_xmlNode)),] )

xmlParserAddNodeInfo = _rpythonic_function_(		"xmlParserAddNodeInfo", ctypes.c_void_p, [
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),
	("info",		ctypes.POINTER(_xmlParserNodeInfo)),] )

xmlSetExternalEntityLoader = _rpythonic_function_(		"xmlSetExternalEntityLoader", ctypes.c_void_p, [
	("f",		ctypes.CFUNCTYPE(ctypes.POINTER(_xmlParserInput), ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(_xmlParserCtxt),)),] )

xmlGetExternalEntityLoader = _rpythonic_function_(		"xmlGetExternalEntityLoader", ctypes.CFUNCTYPE(ctypes.POINTER(_xmlParserInput), ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(_xmlParserCtxt),), [] )

xmlLoadExternalEntity = _rpythonic_function_(		"xmlLoadExternalEntity", ctypes.POINTER(_xmlParserInput), [
	("URL",		ctypes.POINTER(ctypes.c_char)),
	("ID",		ctypes.POINTER(ctypes.c_char)),
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),] )

xmlByteConsumed = _rpythonic_function_(		"xmlByteConsumed", ctypes.c_long, [
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),] )

xmlCtxtReset = _rpythonic_function_(		"xmlCtxtReset", ctypes.c_void_p, [
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),] )

xmlCtxtResetPush = _rpythonic_function_(		"xmlCtxtResetPush", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),
	("chunk",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_int),
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("encoding",		ctypes.POINTER(ctypes.c_char)),] )

xmlCtxtUseOptions = _rpythonic_function_(		"xmlCtxtUseOptions", ctypes.c_int, [
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),
	("options",		ctypes.c_int),] )

xmlReadDoc = _rpythonic_function_(		"xmlReadDoc", ctypes.POINTER(_xmlDoc), [
	("cur",		ctypes.POINTER(ctypes.c_ubyte)),
	("URL",		ctypes.POINTER(ctypes.c_char)),
	("encoding",		ctypes.POINTER(ctypes.c_char)),
	("options",		ctypes.c_int),] )

xmlReadFile = _rpythonic_function_(		"xmlReadFile", ctypes.POINTER(_xmlDoc), [
	("URL",		ctypes.POINTER(ctypes.c_char)),
	("encoding",		ctypes.POINTER(ctypes.c_char)),
	("options",		ctypes.c_int),] )

xmlReadMemory = _rpythonic_function_(		"xmlReadMemory", ctypes.POINTER(_xmlDoc), [
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_int),
	("URL",		ctypes.POINTER(ctypes.c_char)),
	("encoding",		ctypes.POINTER(ctypes.c_char)),
	("options",		ctypes.c_int),] )

xmlReadFd = _rpythonic_function_(		"xmlReadFd", ctypes.POINTER(_xmlDoc), [
	("fd",		ctypes.c_int),
	("URL",		ctypes.POINTER(ctypes.c_char)),
	("encoding",		ctypes.POINTER(ctypes.c_char)),
	("options",		ctypes.c_int),] )

xmlReadIO = _rpythonic_function_(		"xmlReadIO", ctypes.POINTER(_xmlDoc), [
	("ioread",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),ctypes.c_int,)),
	("ioclose",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("ioctx",		ctypes.POINTER(ctypes.c_void_p)),
	("URL",		ctypes.POINTER(ctypes.c_char)),
	("encoding",		ctypes.POINTER(ctypes.c_char)),
	("options",		ctypes.c_int),] )

xmlCtxtReadDoc = _rpythonic_function_(		"xmlCtxtReadDoc", ctypes.POINTER(_xmlDoc), [
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),
	("cur",		ctypes.POINTER(ctypes.c_ubyte)),
	("URL",		ctypes.POINTER(ctypes.c_char)),
	("encoding",		ctypes.POINTER(ctypes.c_char)),
	("options",		ctypes.c_int),] )

xmlCtxtReadFile = _rpythonic_function_(		"xmlCtxtReadFile", ctypes.POINTER(_xmlDoc), [
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("encoding",		ctypes.POINTER(ctypes.c_char)),
	("options",		ctypes.c_int),] )

xmlCtxtReadMemory = _rpythonic_function_(		"xmlCtxtReadMemory", ctypes.POINTER(_xmlDoc), [
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_int),
	("URL",		ctypes.POINTER(ctypes.c_char)),
	("encoding",		ctypes.POINTER(ctypes.c_char)),
	("options",		ctypes.c_int),] )

xmlCtxtReadFd = _rpythonic_function_(		"xmlCtxtReadFd", ctypes.POINTER(_xmlDoc), [
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),
	("fd",		ctypes.c_int),
	("URL",		ctypes.POINTER(ctypes.c_char)),
	("encoding",		ctypes.POINTER(ctypes.c_char)),
	("options",		ctypes.c_int),] )

xmlCtxtReadIO = _rpythonic_function_(		"xmlCtxtReadIO", ctypes.POINTER(_xmlDoc), [
	("ctxt",		ctypes.POINTER(_xmlParserCtxt)),
	("ioread",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),ctypes.c_int,)),
	("ioclose",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("ioctx",		ctypes.POINTER(ctypes.c_void_p)),
	("URL",		ctypes.POINTER(ctypes.c_char)),
	("encoding",		ctypes.POINTER(ctypes.c_char)),
	("options",		ctypes.c_int),] )

xmlHasFeature = _rpythonic_function_(		"xmlHasFeature", ctypes.c_int, [
	("feature",		ctypes.c_int),] )

atof = _rpythonic_function_(		"atof", ctypes.c_double, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),] )

atoi = _rpythonic_function_(		"atoi", ctypes.c_int, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),] )

atol = _rpythonic_function_(		"atol", ctypes.c_int64, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),] )

atoll = _rpythonic_function_(		"atoll", ctypes.c_longlong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),] )

strtod = _rpythonic_function_(		"strtod", ctypes.c_double, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

strtof = _rpythonic_function_(		"strtof", ctypes.c_float, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

strtold = _rpythonic_function_(		"strtold", ctypes.c_double, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

strtol = _rpythonic_function_(		"strtol", ctypes.c_int64, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

strtoul = _rpythonic_function_(		"strtoul", ctypes.c_uint64, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

strtoq = _rpythonic_function_(		"strtoq", ctypes.c_longlong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

strtouq = _rpythonic_function_(		"strtouq", ctypes.c_ulonglong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

strtoll = _rpythonic_function_(		"strtoll", ctypes.c_longlong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

strtoull = _rpythonic_function_(		"strtoull", ctypes.c_ulonglong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

l64a = _rpythonic_function_(		"l64a", ctypes.POINTER(ctypes.c_char), [
	("__n",		ctypes.c_int64),] )

a64l = _rpythonic_function_(		"a64l", ctypes.c_int64, [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

random = _rpythonic_function_(		"random", ctypes.c_int64, [] )

srandom = _rpythonic_function_(		"srandom", ctypes.c_void_p, [
	("__seed",		ctypes.c_uint),] )

initstate = _rpythonic_function_(		"initstate", ctypes.POINTER(ctypes.c_char), [
	("__seed",		ctypes.c_uint),
	("__statebuf",		ctypes.POINTER(ctypes.c_char)),
	("__statelen",		ctypes.c_uint),] )

setstate = _rpythonic_function_(		"setstate", ctypes.POINTER(ctypes.c_char), [
	("__statebuf",		ctypes.POINTER(ctypes.c_char)),] )

random_r = _rpythonic_function_(		"random_r", ctypes.c_int, [
	("__buf",		ctypes.POINTER(random_data)),
	("__result",		ctypes.POINTER(ctypes.c_int32)),] )

srandom_r = _rpythonic_function_(		"srandom_r", ctypes.c_int, [
	("__seed",		ctypes.c_uint),
	("__buf",		ctypes.POINTER(random_data)),] )

initstate_r = _rpythonic_function_(		"initstate_r", ctypes.c_int, [
	("__seed",		ctypes.c_uint),
	("__statebuf",		ctypes.POINTER(ctypes.c_char)),
	("__statelen",		ctypes.c_uint),
	("__buf",		ctypes.POINTER(random_data)),] )

setstate_r = _rpythonic_function_(		"setstate_r", ctypes.c_int, [
	("__statebuf",		ctypes.POINTER(ctypes.c_char)),
	("__buf",		ctypes.POINTER(random_data)),] )

rand = _rpythonic_function_(		"rand", ctypes.c_int, [] )

srand = _rpythonic_function_(		"srand", ctypes.c_void_p, [
	("__seed",		ctypes.c_uint),] )

rand_r = _rpythonic_function_(		"rand_r", ctypes.c_int, [
	("__seed",		ctypes.POINTER(ctypes.c_uint)),] )

drand48 = _rpythonic_function_(		"drand48", ctypes.c_double, [] )

erand48 = _rpythonic_function_(		"erand48", ctypes.c_double, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),] )

lrand48 = _rpythonic_function_(		"lrand48", ctypes.c_int64, [] )

nrand48 = _rpythonic_function_(		"nrand48", ctypes.c_int64, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),] )

mrand48 = _rpythonic_function_(		"mrand48", ctypes.c_int64, [] )

jrand48 = _rpythonic_function_(		"jrand48", ctypes.c_int64, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),] )

srand48 = _rpythonic_function_(		"srand48", ctypes.c_void_p, [
	("__seedval",		ctypes.c_int64),] )

seed48 = _rpythonic_function_(		"seed48", ctypes.POINTER(ctypes.c_uint16), [
	("__seed16v",		( ctypes.c_uint16 * 3 )),] )

lcong48 = _rpythonic_function_(		"lcong48", ctypes.c_void_p, [
	("__param",		( ctypes.c_uint16 * 7 )),] )

drand48_r = _rpythonic_function_(		"drand48_r", ctypes.c_int, [
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_double)),] )

erand48_r = _rpythonic_function_(		"erand48_r", ctypes.c_int, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_double)),] )

lrand48_r = _rpythonic_function_(		"lrand48_r", ctypes.c_int, [
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_int64)),] )

nrand48_r = _rpythonic_function_(		"nrand48_r", ctypes.c_int, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_int64)),] )

mrand48_r = _rpythonic_function_(		"mrand48_r", ctypes.c_int, [
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_int64)),] )

jrand48_r = _rpythonic_function_(		"jrand48_r", ctypes.c_int, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_int64)),] )

srand48_r = _rpythonic_function_(		"srand48_r", ctypes.c_int, [
	("__seedval",		ctypes.c_int64),
	("__buffer",		ctypes.POINTER(drand48_data)),] )

seed48_r = _rpythonic_function_(		"seed48_r", ctypes.c_int, [
	("__seed16v",		( ctypes.c_uint16 * 3 )),
	("__buffer",		ctypes.POINTER(drand48_data)),] )

lcong48_r = _rpythonic_function_(		"lcong48_r", ctypes.c_int, [
	("__param",		( ctypes.c_uint16 * 7 )),
	("__buffer",		ctypes.POINTER(drand48_data)),] )

cfree = _rpythonic_function_(		"cfree", ctypes.c_void_p, [("__ptr",		ctypes.c_void_p)] )

alloca = _rpythonic_function_(		"alloca", ctypes.POINTER(ctypes.c_void_p), [
	("__size",		ctypes.c_uint),] )

valloc = _rpythonic_function_(		"valloc", ctypes.POINTER(ctypes.c_void_p), [
	("__size",		ctypes.c_uint),] )

posix_memalign = _rpythonic_function_(		"posix_memalign", ctypes.c_int, [
	("__memptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("__alignment",		ctypes.c_uint),
	("__size",		ctypes.c_uint),] )

abort = _rpythonic_function_(		"abort", ctypes.c_void_p, [] )

atexit = _rpythonic_function_(		"atexit", ctypes.c_int, [
	("__func",		ctypes.c_void_p),] )

on_exit = _rpythonic_function_(		"on_exit", ctypes.c_int, [
	("__func",		ctypes.c_void_p),
	("__arg",		ctypes.POINTER(ctypes.c_void_p)),] )

exit = _rpythonic_function_(		"exit", ctypes.c_void_p, [
	("__status",		ctypes.c_int),] )

_Exit = _rpythonic_function_(		"_Exit", ctypes.c_void_p, [
	("__status",		ctypes.c_int),] )

getenv = _rpythonic_function_(		"getenv", ctypes.POINTER(ctypes.c_char), [
	("__name",		ctypes.POINTER(ctypes.c_char)),] )

putenv = _rpythonic_function_(		"putenv", ctypes.c_int, [
	("__string",		ctypes.POINTER(ctypes.c_char)),] )

setenv = _rpythonic_function_(		"setenv", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),
	("__value",		ctypes.POINTER(ctypes.c_char)),
	("__replace",		ctypes.c_int),] )

unsetenv = _rpythonic_function_(		"unsetenv", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),] )

clearenv = _rpythonic_function_(		"clearenv", ctypes.c_int, [] )

mktemp = _rpythonic_function_(		"mktemp", ctypes.POINTER(ctypes.c_char), [
	("__template",		ctypes.POINTER(ctypes.c_char)),] )

mkstemp = _rpythonic_function_(		"mkstemp", ctypes.c_int, [
	("__template",		ctypes.POINTER(ctypes.c_char)),] )

mkstemps = _rpythonic_function_(		"mkstemps", ctypes.c_int, [
	("__template",		ctypes.POINTER(ctypes.c_char)),
	("__suffixlen",		ctypes.c_int),] )

mkdtemp = _rpythonic_function_(		"mkdtemp", ctypes.POINTER(ctypes.c_char), [
	("__template",		ctypes.POINTER(ctypes.c_char)),] )

system = _rpythonic_function_(		"system", ctypes.c_int, [
	("__command",		ctypes.POINTER(ctypes.c_char)),] )

realpath = _rpythonic_function_(		"realpath", ctypes.POINTER(ctypes.c_char), [
	("__name",		ctypes.POINTER(ctypes.c_char)),
	("__resolved",		ctypes.POINTER(ctypes.c_char)),] )

bsearch = _rpythonic_function_(		"bsearch", ctypes.POINTER(ctypes.c_void_p), [
	("__key",		ctypes.POINTER(ctypes.c_void_p)),
	("__base",		ctypes.POINTER(ctypes.c_void_p)),
	("__nmemb",		ctypes.c_uint),
	("__size",		ctypes.c_uint),
	("__compar",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

qsort = _rpythonic_function_(		"qsort", ctypes.c_void_p, [
	("__base",		ctypes.POINTER(ctypes.c_void_p)),
	("__nmemb",		ctypes.c_uint),
	("__size",		ctypes.c_uint),
	("__compar",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

abs = _rpythonic_function_(		"abs", ctypes.c_int, [
	("__x",		ctypes.c_int),] )

labs = _rpythonic_function_(		"labs", ctypes.c_int64, [
	("__x",		ctypes.c_int64),] )

llabs = _rpythonic_function_(		"llabs", ctypes.c_longlong, [
	("__x",		ctypes.c_longlong),] )

div = _rpythonic_function_(		"div", div_t, [
	("__numer",		ctypes.c_int),
	("__denom",		ctypes.c_int),] )

ldiv = _rpythonic_function_(		"ldiv", ldiv_t, [
	("__numer",		ctypes.c_int64),
	("__denom",		ctypes.c_int64),] )

lldiv = _rpythonic_function_(		"lldiv", lldiv_t, [
	("__numer",		ctypes.c_longlong),
	("__denom",		ctypes.c_longlong),] )

ecvt = _rpythonic_function_(		"ecvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),] )

fcvt = _rpythonic_function_(		"fcvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),] )

gcvt = _rpythonic_function_(		"gcvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

qecvt = _rpythonic_function_(		"qecvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),] )

qfcvt = _rpythonic_function_(		"qfcvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),] )

qgcvt = _rpythonic_function_(		"qgcvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

ecvt_r = _rpythonic_function_(		"ecvt_r", ctypes.c_int, [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint),] )

fcvt_r = _rpythonic_function_(		"fcvt_r", ctypes.c_int, [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint),] )

qecvt_r = _rpythonic_function_(		"qecvt_r", ctypes.c_int, [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint),] )

qfcvt_r = _rpythonic_function_(		"qfcvt_r", ctypes.c_int, [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint),] )

mblen = _rpythonic_function_(		"mblen", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

mbtowc = _rpythonic_function_(		"mbtowc", ctypes.c_int, [
	("__pwc",		ctypes.POINTER(ctypes.c_int64)),
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

wctomb = _rpythonic_function_(		"wctomb", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__wchar",		ctypes.c_int64),] )

mbstowcs = _rpythonic_function_(		"mbstowcs", ctypes.c_uint, [
	("__pwcs",		ctypes.POINTER(ctypes.c_int64)),
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

wcstombs = _rpythonic_function_(		"wcstombs", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__pwcs",		ctypes.POINTER(ctypes.c_int64)),
	("__n",		ctypes.c_uint),] )

rpmatch = _rpythonic_function_(		"rpmatch", ctypes.c_int, [
	("__response",		ctypes.POINTER(ctypes.c_char)),] )

getsubopt = _rpythonic_function_(		"getsubopt", ctypes.c_int, [
	("__optionp",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__tokens",		ctypes.POINTER(ctypes.c_char)),
	("__valuep",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

getloadavg = _rpythonic_function_(		"getloadavg", ctypes.c_int, [
	("__loadavg",		ctypes.c_double),
	("__nelem",		ctypes.c_int),] )

xlinkNodeDetectFunc = _rpythonic_function_(		"xlinkNodeDetectFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("node",		ctypes.POINTER(_xmlNode)),] )

xlinkSimpleLinkFunk = _rpythonic_function_(		"xlinkSimpleLinkFunk", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("node",		ctypes.POINTER(_xmlNode)),
	("href",		ctypes.POINTER(ctypes.c_ubyte)),
	("role",		ctypes.POINTER(ctypes.c_ubyte)),
	("title",		ctypes.POINTER(ctypes.c_ubyte)),] )

xlinkExtendedLinkFunk = _rpythonic_function_(		"xlinkExtendedLinkFunk", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("node",		ctypes.POINTER(_xmlNode)),
	("nbLocators",		ctypes.c_int),
	("hrefs",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("roles",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("nbArcs",		ctypes.c_int),
	("from",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("to",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("show",		ctypes.POINTER(ctypes.c_int)),
	("actuate",		ctypes.POINTER(ctypes.c_int)),
	("nbTitles",		ctypes.c_int),
	("titles",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("langs",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),] )

xlinkExtendedLinkSetFunk = _rpythonic_function_(		"xlinkExtendedLinkSetFunk", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("node",		ctypes.POINTER(_xmlNode)),
	("nbLocators",		ctypes.c_int),
	("hrefs",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("roles",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("nbTitles",		ctypes.c_int),
	("titles",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("langs",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),] )

xlinkGetDefaultDetect = _rpythonic_function_(		"xlinkGetDefaultDetect", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_xmlNode),), [] )

xlinkSetDefaultDetect = _rpythonic_function_(		"xlinkSetDefaultDetect", ctypes.c_void_p, [
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_xmlNode),)),] )

xlinkGetDefaultHandler = _rpythonic_function_(		"xlinkGetDefaultHandler", ctypes.POINTER(_xlinkHandler), [] )

xlinkSetDefaultHandler = _rpythonic_function_(		"xlinkSetDefaultHandler", ctypes.c_void_p, [
	("handler",		ctypes.POINTER(_xlinkHandler)),] )

xlinkIsLink = _rpythonic_function_(		"xlinkIsLink", ctypes.c_int, [
	("doc",		ctypes.POINTER(_xmlDoc)),
	("node",		ctypes.POINTER(_xmlNode)),] )

setDocumentLocator = _rpythonic_function_(		"setDocumentLocator", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("loc",		ctypes.POINTER(_xmlSAXLocator)),] )

isStandalone = _rpythonic_function_(		"isStandalone", ctypes.c_int, [("ctx",		ctypes.c_void_p)] )

hasInternalSubset = _rpythonic_function_(		"hasInternalSubset", ctypes.c_int, [("ctx",		ctypes.c_void_p)] )

hasExternalSubset = _rpythonic_function_(		"hasExternalSubset", ctypes.c_int, [("ctx",		ctypes.c_void_p)] )

internalSubset = _rpythonic_function_(		"internalSubset", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("ExternalID",		ctypes.POINTER(ctypes.c_ubyte)),
	("SystemID",		ctypes.POINTER(ctypes.c_ubyte)),] )

externalSubset = _rpythonic_function_(		"externalSubset", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("ExternalID",		ctypes.POINTER(ctypes.c_ubyte)),
	("SystemID",		ctypes.POINTER(ctypes.c_ubyte)),] )

getEntity = _rpythonic_function_(		"getEntity", ctypes.POINTER(_xmlEntity), [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

getParameterEntity = _rpythonic_function_(		"getParameterEntity", ctypes.POINTER(_xmlEntity), [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

resolveEntity = _rpythonic_function_(		"resolveEntity", ctypes.POINTER(_xmlParserInput), [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("publicId",		ctypes.POINTER(ctypes.c_ubyte)),
	("systemId",		ctypes.POINTER(ctypes.c_ubyte)),] )

entityDecl = _rpythonic_function_(		"entityDecl", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_type",		ctypes.c_int),
	("publicId",		ctypes.POINTER(ctypes.c_ubyte)),
	("systemId",		ctypes.POINTER(ctypes.c_ubyte)),
	("content",		ctypes.POINTER(ctypes.c_ubyte)),] )

attributeDecl = _rpythonic_function_(		"attributeDecl", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("elem",		ctypes.POINTER(ctypes.c_ubyte)),
	("fullname",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_type",		ctypes.c_int),
	("C_def",		ctypes.c_int),
	("defaultValue",		ctypes.POINTER(ctypes.c_ubyte)),
	("tree",		ctypes.POINTER(_xmlEnumeration)),] )

elementDecl = _rpythonic_function_(		"elementDecl", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_type",		ctypes.c_int),
	("content",		ctypes.POINTER(_xmlElementContent)),] )

notationDecl = _rpythonic_function_(		"notationDecl", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("publicId",		ctypes.POINTER(ctypes.c_ubyte)),
	("systemId",		ctypes.POINTER(ctypes.c_ubyte)),] )

unparsedEntityDecl = _rpythonic_function_(		"unparsedEntityDecl", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("publicId",		ctypes.POINTER(ctypes.c_ubyte)),
	("systemId",		ctypes.POINTER(ctypes.c_ubyte)),
	("notationName",		ctypes.POINTER(ctypes.c_ubyte)),] )

startDocument = _rpythonic_function_(		"startDocument", ctypes.c_void_p, [("ctx",		ctypes.c_void_p)] )

endDocument = _rpythonic_function_(		"endDocument", ctypes.c_void_p, [("ctx",		ctypes.c_void_p)] )

attribute = _rpythonic_function_(		"attribute", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("fullname",		ctypes.POINTER(ctypes.c_ubyte)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),] )

startElement = _rpythonic_function_(		"startElement", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("fullname",		ctypes.POINTER(ctypes.c_ubyte)),
	("atts",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),] )

endElement = _rpythonic_function_(		"endElement", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

reference = _rpythonic_function_(		"reference", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

characters = _rpythonic_function_(		"characters", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("ch",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

ignorableWhitespace = _rpythonic_function_(		"ignorableWhitespace", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("ch",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

processingInstruction = _rpythonic_function_(		"processingInstruction", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("target",		ctypes.POINTER(ctypes.c_ubyte)),
	("data",		ctypes.POINTER(ctypes.c_ubyte)),] )

globalNamespace = _rpythonic_function_(		"globalNamespace", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("href",		ctypes.POINTER(ctypes.c_ubyte)),
	("prefix",		ctypes.POINTER(ctypes.c_ubyte)),] )

setNamespace = _rpythonic_function_(		"setNamespace", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

getNamespace = _rpythonic_function_(		"getNamespace", ctypes.POINTER(_xmlNs), [("ctx",		ctypes.c_void_p)] )

checkNamespace = _rpythonic_function_(		"checkNamespace", ctypes.c_int, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("nameSpace",		ctypes.POINTER(ctypes.c_ubyte)),] )

namespaceDecl = _rpythonic_function_(		"namespaceDecl", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("href",		ctypes.POINTER(ctypes.c_ubyte)),
	("prefix",		ctypes.POINTER(ctypes.c_ubyte)),] )

comment = _rpythonic_function_(		"comment", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),] )

cdataBlock = _rpythonic_function_(		"cdataBlock", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

initxmlDefaultSAXHandler = _rpythonic_function_(		"initxmlDefaultSAXHandler", ctypes.c_void_p, [
	("hdlr",		ctypes.POINTER(_xmlSAXHandlerV1)),
	("warning",		ctypes.c_int),] )

inithtmlDefaultSAXHandler = _rpythonic_function_(		"inithtmlDefaultSAXHandler", ctypes.c_void_p, [
	("hdlr",		ctypes.POINTER(_xmlSAXHandlerV1)),] )

initdocbDefaultSAXHandler = _rpythonic_function_(		"initdocbDefaultSAXHandler", ctypes.c_void_p, [
	("hdlr",		ctypes.POINTER(_xmlSAXHandlerV1)),] )

xmlSAX2GetPublicId = _rpythonic_function_(		"xmlSAX2GetPublicId", ctypes.POINTER(ctypes.c_ubyte), [("ctx",		ctypes.c_void_p)] )

xmlSAX2GetSystemId = _rpythonic_function_(		"xmlSAX2GetSystemId", ctypes.POINTER(ctypes.c_ubyte), [("ctx",		ctypes.c_void_p)] )

xmlSAX2SetDocumentLocator = _rpythonic_function_(		"xmlSAX2SetDocumentLocator", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("loc",		ctypes.POINTER(_xmlSAXLocator)),] )

xmlSAX2GetLineNumber = _rpythonic_function_(		"xmlSAX2GetLineNumber", ctypes.c_int, [("ctx",		ctypes.c_void_p)] )

xmlSAX2GetColumnNumber = _rpythonic_function_(		"xmlSAX2GetColumnNumber", ctypes.c_int, [("ctx",		ctypes.c_void_p)] )

xmlSAX2IsStandalone = _rpythonic_function_(		"xmlSAX2IsStandalone", ctypes.c_int, [("ctx",		ctypes.c_void_p)] )

xmlSAX2HasInternalSubset = _rpythonic_function_(		"xmlSAX2HasInternalSubset", ctypes.c_int, [("ctx",		ctypes.c_void_p)] )

xmlSAX2HasExternalSubset = _rpythonic_function_(		"xmlSAX2HasExternalSubset", ctypes.c_int, [("ctx",		ctypes.c_void_p)] )

xmlSAX2InternalSubset = _rpythonic_function_(		"xmlSAX2InternalSubset", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("ExternalID",		ctypes.POINTER(ctypes.c_ubyte)),
	("SystemID",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlSAX2ExternalSubset = _rpythonic_function_(		"xmlSAX2ExternalSubset", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("ExternalID",		ctypes.POINTER(ctypes.c_ubyte)),
	("SystemID",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlSAX2GetEntity = _rpythonic_function_(		"xmlSAX2GetEntity", ctypes.POINTER(_xmlEntity), [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlSAX2GetParameterEntity = _rpythonic_function_(		"xmlSAX2GetParameterEntity", ctypes.POINTER(_xmlEntity), [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlSAX2ResolveEntity = _rpythonic_function_(		"xmlSAX2ResolveEntity", ctypes.POINTER(_xmlParserInput), [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("publicId",		ctypes.POINTER(ctypes.c_ubyte)),
	("systemId",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlSAX2EntityDecl = _rpythonic_function_(		"xmlSAX2EntityDecl", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_type",		ctypes.c_int),
	("publicId",		ctypes.POINTER(ctypes.c_ubyte)),
	("systemId",		ctypes.POINTER(ctypes.c_ubyte)),
	("content",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlSAX2AttributeDecl = _rpythonic_function_(		"xmlSAX2AttributeDecl", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("elem",		ctypes.POINTER(ctypes.c_ubyte)),
	("fullname",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_type",		ctypes.c_int),
	("C_def",		ctypes.c_int),
	("defaultValue",		ctypes.POINTER(ctypes.c_ubyte)),
	("tree",		ctypes.POINTER(_xmlEnumeration)),] )

xmlSAX2ElementDecl = _rpythonic_function_(		"xmlSAX2ElementDecl", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_type",		ctypes.c_int),
	("content",		ctypes.POINTER(_xmlElementContent)),] )

xmlSAX2NotationDecl = _rpythonic_function_(		"xmlSAX2NotationDecl", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("publicId",		ctypes.POINTER(ctypes.c_ubyte)),
	("systemId",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlSAX2UnparsedEntityDecl = _rpythonic_function_(		"xmlSAX2UnparsedEntityDecl", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),
	("publicId",		ctypes.POINTER(ctypes.c_ubyte)),
	("systemId",		ctypes.POINTER(ctypes.c_ubyte)),
	("notationName",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlSAX2StartDocument = _rpythonic_function_(		"xmlSAX2StartDocument", ctypes.c_void_p, [("ctx",		ctypes.c_void_p)] )

xmlSAX2EndDocument = _rpythonic_function_(		"xmlSAX2EndDocument", ctypes.c_void_p, [("ctx",		ctypes.c_void_p)] )

xmlSAX2StartElement = _rpythonic_function_(		"xmlSAX2StartElement", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("fullname",		ctypes.POINTER(ctypes.c_ubyte)),
	("atts",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),] )

xmlSAX2EndElement = _rpythonic_function_(		"xmlSAX2EndElement", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlSAX2StartElementNs = _rpythonic_function_(		"xmlSAX2StartElementNs", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("localname",		ctypes.POINTER(ctypes.c_ubyte)),
	("prefix",		ctypes.POINTER(ctypes.c_ubyte)),
	("URI",		ctypes.POINTER(ctypes.c_ubyte)),
	("nb_namespaces",		ctypes.c_int),
	("namespaces",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("nb_attributes",		ctypes.c_int),
	("nb_defaulted",		ctypes.c_int),
	("attributes",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),] )

xmlSAX2EndElementNs = _rpythonic_function_(		"xmlSAX2EndElementNs", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("localname",		ctypes.POINTER(ctypes.c_ubyte)),
	("prefix",		ctypes.POINTER(ctypes.c_ubyte)),
	("URI",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlSAX2Reference = _rpythonic_function_(		"xmlSAX2Reference", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlSAX2Characters = _rpythonic_function_(		"xmlSAX2Characters", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("ch",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlSAX2IgnorableWhitespace = _rpythonic_function_(		"xmlSAX2IgnorableWhitespace", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("ch",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlSAX2ProcessingInstruction = _rpythonic_function_(		"xmlSAX2ProcessingInstruction", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("target",		ctypes.POINTER(ctypes.c_ubyte)),
	("data",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlSAX2Comment = _rpythonic_function_(		"xmlSAX2Comment", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),] )

xmlSAX2CDataBlock = _rpythonic_function_(		"xmlSAX2CDataBlock", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_int),] )

xmlSAXDefaultVersion = _rpythonic_function_(		"xmlSAXDefaultVersion", ctypes.c_int, [
	("version",		ctypes.c_int),] )

xmlSAXVersion = _rpythonic_function_(		"xmlSAXVersion", ctypes.c_int, [
	("hdlr",		ctypes.POINTER(_xmlSAXHandler)),
	("version",		ctypes.c_int),] )

xmlSAX2InitDefaultSAXHandler = _rpythonic_function_(		"xmlSAX2InitDefaultSAXHandler", ctypes.c_void_p, [
	("hdlr",		ctypes.POINTER(_xmlSAXHandler)),
	("warning",		ctypes.c_int),] )

xmlSAX2InitHtmlDefaultSAXHandler = _rpythonic_function_(		"xmlSAX2InitHtmlDefaultSAXHandler", ctypes.c_void_p, [
	("hdlr",		ctypes.POINTER(_xmlSAXHandler)),] )

htmlDefaultSAXHandlerInit = _rpythonic_function_(		"htmlDefaultSAXHandlerInit", ctypes.c_void_p, [] )

xmlSAX2InitDocbDefaultSAXHandler = _rpythonic_function_(		"xmlSAX2InitDocbDefaultSAXHandler", ctypes.c_void_p, [
	("hdlr",		ctypes.POINTER(_xmlSAXHandler)),] )

docbDefaultSAXHandlerInit = _rpythonic_function_(		"docbDefaultSAXHandlerInit", ctypes.c_void_p, [] )

xmlDefaultSAXHandlerInit = _rpythonic_function_(		"xmlDefaultSAXHandlerInit", ctypes.c_void_p, [] )

xmlInitGlobals = _rpythonic_function_(		"xmlInitGlobals", ctypes.c_void_p, [] )

xmlCleanupGlobals = _rpythonic_function_(		"xmlCleanupGlobals", ctypes.c_void_p, [] )

xmlParserInputBufferCreateFilenameFunc = _rpythonic_function_(		"xmlParserInputBufferCreateFilenameFunc", ctypes.POINTER(_xmlParserInputBuffer), [
	("URI",		ctypes.POINTER(ctypes.c_char)),
	("enc",		ctypes.c_int),] )

xmlOutputBufferCreateFilenameFunc = _rpythonic_function_(		"xmlOutputBufferCreateFilenameFunc", ctypes.POINTER(_xmlOutputBuffer), [
	("URI",		ctypes.POINTER(ctypes.c_char)),
	("encoder",		ctypes.POINTER(_xmlCharEncodingHandler)),
	("compression",		ctypes.c_int),] )

xmlParserInputBufferCreateFilenameDefault = _rpythonic_function_(		"xmlParserInputBufferCreateFilenameDefault", ctypes.CFUNCTYPE(ctypes.POINTER(_xmlParserInputBuffer), ctypes.POINTER(ctypes.c_char),ctypes.c_int,), [
	("func",		ctypes.CFUNCTYPE(ctypes.POINTER(_xmlParserInputBuffer), ctypes.POINTER(ctypes.c_char),ctypes.c_int,)),] )

xmlOutputBufferCreateFilenameDefault = _rpythonic_function_(		"xmlOutputBufferCreateFilenameDefault", ctypes.CFUNCTYPE(ctypes.POINTER(_xmlOutputBuffer), ctypes.POINTER(ctypes.c_char),ctypes.POINTER(_xmlCharEncodingHandler),ctypes.c_int,), [
	("func",		ctypes.CFUNCTYPE(ctypes.POINTER(_xmlOutputBuffer), ctypes.POINTER(ctypes.c_char),ctypes.POINTER(_xmlCharEncodingHandler),ctypes.c_int,)),] )

xmlRegisterNodeFunc = _rpythonic_function_(		"xmlRegisterNodeFunc", ctypes.c_void_p, [
	("node",		ctypes.POINTER(_xmlNode)),] )

xmlDeregisterNodeFunc = _rpythonic_function_(		"xmlDeregisterNodeFunc", ctypes.c_void_p, [
	("node",		ctypes.POINTER(_xmlNode)),] )

xmlInitializeGlobalState = _rpythonic_function_(		"xmlInitializeGlobalState", ctypes.c_void_p, [
	("gs",		ctypes.POINTER(_xmlGlobalState)),] )

xmlThrDefSetGenericErrorFunc = _rpythonic_function_(		"xmlThrDefSetGenericErrorFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),)),] )

xmlThrDefSetStructuredErrorFunc = _rpythonic_function_(		"xmlThrDefSetStructuredErrorFunc", ctypes.c_void_p, [
	("ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_xmlError),)),] )

xmlRegisterNodeDefault = _rpythonic_function_(		"xmlRegisterNodeDefault", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_xmlNode),), [
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_xmlNode),)),] )

xmlThrDefRegisterNodeDefault = _rpythonic_function_(		"xmlThrDefRegisterNodeDefault", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_xmlNode),), [
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_xmlNode),)),] )

xmlDeregisterNodeDefault = _rpythonic_function_(		"xmlDeregisterNodeDefault", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_xmlNode),), [
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_xmlNode),)),] )

xmlThrDefDeregisterNodeDefault = _rpythonic_function_(		"xmlThrDefDeregisterNodeDefault", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_xmlNode),), [
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_xmlNode),)),] )

xmlThrDefOutputBufferCreateFilenameDefault = _rpythonic_function_(		"xmlThrDefOutputBufferCreateFilenameDefault", ctypes.CFUNCTYPE(ctypes.POINTER(_xmlOutputBuffer), ctypes.POINTER(ctypes.c_char),ctypes.POINTER(_xmlCharEncodingHandler),ctypes.c_int,), [
	("func",		ctypes.CFUNCTYPE(ctypes.POINTER(_xmlOutputBuffer), ctypes.POINTER(ctypes.c_char),ctypes.POINTER(_xmlCharEncodingHandler),ctypes.c_int,)),] )

xmlThrDefParserInputBufferCreateFilenameDefault = _rpythonic_function_(		"xmlThrDefParserInputBufferCreateFilenameDefault", ctypes.CFUNCTYPE(ctypes.POINTER(_xmlParserInputBuffer), ctypes.POINTER(ctypes.c_char),ctypes.c_int,), [
	("func",		ctypes.CFUNCTYPE(ctypes.POINTER(_xmlParserInputBuffer), ctypes.POINTER(ctypes.c_char),ctypes.c_int,)),] )

xmlThrDefBufferAllocScheme = _rpythonic_function_(		"xmlThrDefBufferAllocScheme", ctypes.c_int, [
	("v",		ctypes.c_int),] )

xmlThrDefDefaultBufferSize = _rpythonic_function_(		"xmlThrDefDefaultBufferSize", ctypes.c_int, [
	("v",		ctypes.c_int),] )

xmlThrDefDoValidityCheckingDefaultValue = _rpythonic_function_(		"xmlThrDefDoValidityCheckingDefaultValue", ctypes.c_int, [
	("v",		ctypes.c_int),] )

xmlThrDefGetWarningsDefaultValue = _rpythonic_function_(		"xmlThrDefGetWarningsDefaultValue", ctypes.c_int, [
	("v",		ctypes.c_int),] )

xmlThrDefIndentTreeOutput = _rpythonic_function_(		"xmlThrDefIndentTreeOutput", ctypes.c_int, [
	("v",		ctypes.c_int),] )

xmlThrDefTreeIndentString = _rpythonic_function_(		"xmlThrDefTreeIndentString", ctypes.POINTER(ctypes.c_char), [
	("v",		ctypes.POINTER(ctypes.c_char)),] )

xmlThrDefKeepBlanksDefaultValue = _rpythonic_function_(		"xmlThrDefKeepBlanksDefaultValue", ctypes.c_int, [
	("v",		ctypes.c_int),] )

xmlThrDefLineNumbersDefaultValue = _rpythonic_function_(		"xmlThrDefLineNumbersDefaultValue", ctypes.c_int, [
	("v",		ctypes.c_int),] )

xmlThrDefLoadExtDtdDefaultValue = _rpythonic_function_(		"xmlThrDefLoadExtDtdDefaultValue", ctypes.c_int, [
	("v",		ctypes.c_int),] )

xmlThrDefParserDebugEntities = _rpythonic_function_(		"xmlThrDefParserDebugEntities", ctypes.c_int, [
	("v",		ctypes.c_int),] )

xmlThrDefPedanticParserDefaultValue = _rpythonic_function_(		"xmlThrDefPedanticParserDefaultValue", ctypes.c_int, [
	("v",		ctypes.c_int),] )

xmlThrDefSaveNoEmptyTags = _rpythonic_function_(		"xmlThrDefSaveNoEmptyTags", ctypes.c_int, [
	("v",		ctypes.c_int),] )

xmlThrDefSubstituteEntitiesDefaultValue = _rpythonic_function_(		"xmlThrDefSubstituteEntitiesDefaultValue", ctypes.c_int, [
	("v",		ctypes.c_int),] )

xmlNewMutex = _rpythonic_function_(		"xmlNewMutex", ctypes.POINTER(_xmlMutex), [] )

xmlMutexLock = _rpythonic_function_(		"xmlMutexLock", ctypes.c_void_p, [
	("tok",		ctypes.POINTER(_xmlMutex)),] )

xmlMutexUnlock = _rpythonic_function_(		"xmlMutexUnlock", ctypes.c_void_p, [
	("tok",		ctypes.POINTER(_xmlMutex)),] )

xmlFreeMutex = _rpythonic_function_(		"xmlFreeMutex", ctypes.c_void_p, [
	("tok",		ctypes.POINTER(_xmlMutex)),] )

xmlNewRMutex = _rpythonic_function_(		"xmlNewRMutex", ctypes.POINTER(_xmlRMutex), [] )

xmlRMutexLock = _rpythonic_function_(		"xmlRMutexLock", ctypes.c_void_p, [
	("tok",		ctypes.POINTER(_xmlRMutex)),] )

xmlRMutexUnlock = _rpythonic_function_(		"xmlRMutexUnlock", ctypes.c_void_p, [
	("tok",		ctypes.POINTER(_xmlRMutex)),] )

xmlFreeRMutex = _rpythonic_function_(		"xmlFreeRMutex", ctypes.c_void_p, [
	("tok",		ctypes.POINTER(_xmlRMutex)),] )

xmlInitThreads = _rpythonic_function_(		"xmlInitThreads", ctypes.c_void_p, [] )

xmlLockLibrary = _rpythonic_function_(		"xmlLockLibrary", ctypes.c_void_p, [] )

xmlUnlockLibrary = _rpythonic_function_(		"xmlUnlockLibrary", ctypes.c_void_p, [] )

xmlGetThreadId = _rpythonic_function_(		"xmlGetThreadId", ctypes.c_int, [] )

xmlIsMainThread = _rpythonic_function_(		"xmlIsMainThread", ctypes.c_int, [] )

xmlCleanupThreads = _rpythonic_function_(		"xmlCleanupThreads", ctypes.c_void_p, [] )

xmlGetGlobalState = _rpythonic_function_(		"xmlGetGlobalState", ctypes.POINTER(_xmlGlobalState), [] )

nautilus_directory_async_state_changed = _rpythonic_function_(		"nautilus_directory_async_state_changed", ctypes.c_void_p, [
	("directory",		ctypes.POINTER(NautilusDirectory)),] )

nautilus_directory_call_when_ready_internal = _rpythonic_function_(		"nautilus_directory_call_when_ready_internal", ctypes.c_void_p, [
	("directory",		ctypes.POINTER(NautilusDirectory)),
	("file",		ctypes.POINTER(NautilusFile)),
	("file_attributes",		ctypes.c_int),
	("wait_for_file_list",		ctypes.c_int),
	("directory_callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(NautilusDirectory),ctypes.POINTER(_GList),ctypes.POINTER(ctypes.c_void_p),)),
	("file_callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(NautilusFile),ctypes.POINTER(ctypes.c_void_p),)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_directory_check_if_ready_internal = _rpythonic_function_(		"nautilus_directory_check_if_ready_internal", ctypes.c_int, [
	("directory",		ctypes.POINTER(NautilusDirectory)),
	("file",		ctypes.POINTER(NautilusFile)),
	("file_attributes",		ctypes.c_int),] )

nautilus_directory_cancel_callback_internal = _rpythonic_function_(		"nautilus_directory_cancel_callback_internal", ctypes.c_void_p, [
	("directory",		ctypes.POINTER(NautilusDirectory)),
	("file",		ctypes.POINTER(NautilusFile)),
	("directory_callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(NautilusDirectory),ctypes.POINTER(_GList),ctypes.POINTER(ctypes.c_void_p),)),
	("file_callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(NautilusFile),ctypes.POINTER(ctypes.c_void_p),)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_directory_get_existing = _rpythonic_function_(		"nautilus_directory_get_existing", ctypes.POINTER(NautilusDirectory), [
	("location",		ctypes.POINTER(_GFile)),] )

nautilus_directory_monitor_add_internal = _rpythonic_function_(		"nautilus_directory_monitor_add_internal", ctypes.c_void_p, [
	("directory",		ctypes.POINTER(NautilusDirectory)),
	("file",		ctypes.POINTER(NautilusFile)),
	("client",		ctypes.POINTER(ctypes.c_void_p)),
	("monitor_hidden_files",		ctypes.c_int),
	("attributes",		ctypes.c_int),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(NautilusDirectory),ctypes.POINTER(_GList),ctypes.POINTER(ctypes.c_void_p),)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_directory_monitor_remove_internal = _rpythonic_function_(		"nautilus_directory_monitor_remove_internal", ctypes.c_void_p, [
	("directory",		ctypes.POINTER(NautilusDirectory)),
	("file",		ctypes.POINTER(NautilusFile)),
	("client",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_directory_get_info_for_new_files = _rpythonic_function_(		"nautilus_directory_get_info_for_new_files", ctypes.c_void_p, [
	("directory",		ctypes.POINTER(NautilusDirectory)),
	("vfs_uris",		ctypes.POINTER(_GList)),] )

nautilus_directory_get_existing_corresponding_file = _rpythonic_function_(		"nautilus_directory_get_existing_corresponding_file", ctypes.POINTER(NautilusFile), [
	("directory",		ctypes.POINTER(NautilusDirectory)),] )

nautilus_directory_invalidate_count_and_mime_list = _rpythonic_function_(		"nautilus_directory_invalidate_count_and_mime_list", ctypes.c_void_p, [
	("directory",		ctypes.POINTER(NautilusDirectory)),] )

nautilus_directory_is_file_list_monitored = _rpythonic_function_(		"nautilus_directory_is_file_list_monitored", ctypes.c_int, [
	("directory",		ctypes.POINTER(NautilusDirectory)),] )

nautilus_directory_is_anyone_monitoring_file_list = _rpythonic_function_(		"nautilus_directory_is_anyone_monitoring_file_list", ctypes.c_int, [
	("directory",		ctypes.POINTER(NautilusDirectory)),] )

nautilus_directory_has_active_request_for_file = _rpythonic_function_(		"nautilus_directory_has_active_request_for_file", ctypes.c_int, [
	("directory",		ctypes.POINTER(NautilusDirectory)),
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_directory_remove_file_monitor_link = _rpythonic_function_(		"nautilus_directory_remove_file_monitor_link", ctypes.c_void_p, [
	("directory",		ctypes.POINTER(NautilusDirectory)),
	("link",		ctypes.POINTER(_GList)),] )

nautilus_directory_schedule_dequeue_pending = _rpythonic_function_(		"nautilus_directory_schedule_dequeue_pending", ctypes.c_void_p, [
	("directory",		ctypes.POINTER(NautilusDirectory)),] )

nautilus_directory_stop_monitoring_file_list = _rpythonic_function_(		"nautilus_directory_stop_monitoring_file_list", ctypes.c_void_p, [
	("directory",		ctypes.POINTER(NautilusDirectory)),] )

nautilus_directory_cancel = _rpythonic_function_(		"nautilus_directory_cancel", ctypes.c_void_p, [
	("directory",		ctypes.POINTER(NautilusDirectory)),] )

nautilus_async_destroying_file = _rpythonic_function_(		"nautilus_async_destroying_file", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_directory_force_reload_internal = _rpythonic_function_(		"nautilus_directory_force_reload_internal", ctypes.c_void_p, [
	("directory",		ctypes.POINTER(NautilusDirectory)),
	("file_attributes",		ctypes.c_int),] )

nautilus_directory_cancel_loading_file_attributes = _rpythonic_function_(		"nautilus_directory_cancel_loading_file_attributes", ctypes.c_void_p, [
	("directory",		ctypes.POINTER(NautilusDirectory)),
	("file",		ctypes.POINTER(NautilusFile)),
	("file_attributes",		ctypes.c_int),] )

nautilus_directory_emit_files_added = _rpythonic_function_(		"nautilus_directory_emit_files_added", ctypes.c_void_p, [
	("directory",		ctypes.POINTER(NautilusDirectory)),
	("added_files",		ctypes.POINTER(_GList)),] )

nautilus_directory_emit_files_changed = _rpythonic_function_(		"nautilus_directory_emit_files_changed", ctypes.c_void_p, [
	("directory",		ctypes.POINTER(NautilusDirectory)),
	("changed_files",		ctypes.POINTER(_GList)),] )

nautilus_directory_emit_change_signals = _rpythonic_function_(		"nautilus_directory_emit_change_signals", ctypes.c_void_p, [
	("directory",		ctypes.POINTER(NautilusDirectory)),
	("changed_files",		ctypes.POINTER(_GList)),] )

emit_change_signals_for_all_files = _rpythonic_function_(		"emit_change_signals_for_all_files", ctypes.c_void_p, [
	("directory",		ctypes.POINTER(NautilusDirectory)),] )

emit_change_signals_for_all_files_in_all_directories = _rpythonic_function_(		"emit_change_signals_for_all_files_in_all_directories", ctypes.c_void_p, [] )

nautilus_directory_emit_done_loading = _rpythonic_function_(		"nautilus_directory_emit_done_loading", ctypes.c_void_p, [
	("directory",		ctypes.POINTER(NautilusDirectory)),] )

nautilus_directory_emit_load_error = _rpythonic_function_(		"nautilus_directory_emit_load_error", ctypes.c_void_p, [
	("directory",		ctypes.POINTER(NautilusDirectory)),
	("error",		ctypes.POINTER(_GError)),] )

nautilus_directory_get_internal = _rpythonic_function_(		"nautilus_directory_get_internal", ctypes.POINTER(NautilusDirectory), [
	("location",		ctypes.POINTER(_GFile)),
	("create",		ctypes.c_int),] )

nautilus_directory_get_name_for_self_as_new_file = _rpythonic_function_(		"nautilus_directory_get_name_for_self_as_new_file", ctypes.POINTER(ctypes.c_char), [
	("directory",		ctypes.POINTER(NautilusDirectory)),] )

nautilus_directory_set_up_request = _rpythonic_function_(		"nautilus_directory_set_up_request", ctypes.c_uint, [
	("file_attributes",		ctypes.c_int),] )

nautilus_directory_find_file_by_name = _rpythonic_function_(		"nautilus_directory_find_file_by_name", ctypes.POINTER(NautilusFile), [
	("directory",		ctypes.POINTER(NautilusDirectory)),
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_directory_find_file_by_internal_filename = _rpythonic_function_(		"nautilus_directory_find_file_by_internal_filename", ctypes.POINTER(NautilusFile), [
	("directory",		ctypes.POINTER(NautilusDirectory)),
	("internal_filename",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_directory_add_file = _rpythonic_function_(		"nautilus_directory_add_file", ctypes.c_void_p, [
	("directory",		ctypes.POINTER(NautilusDirectory)),
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_directory_remove_file = _rpythonic_function_(		"nautilus_directory_remove_file", ctypes.c_void_p, [
	("directory",		ctypes.POINTER(NautilusDirectory)),
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_directory_remove_file_monitors = _rpythonic_function_(		"nautilus_directory_remove_file_monitors", ctypes.POINTER(FileMonitors), [
	("directory",		ctypes.POINTER(NautilusDirectory)),
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_directory_add_file_monitors = _rpythonic_function_(		"nautilus_directory_add_file_monitors", ctypes.c_void_p, [
	("directory",		ctypes.POINTER(NautilusDirectory)),
	("file",		ctypes.POINTER(NautilusFile)),
	("monitors",		ctypes.POINTER(FileMonitors)),] )

nautilus_directory_begin_file_name_change = _rpythonic_function_(		"nautilus_directory_begin_file_name_change", ctypes.POINTER(_GList), [
	("directory",		ctypes.POINTER(NautilusDirectory)),
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_directory_end_file_name_change = _rpythonic_function_(		"nautilus_directory_end_file_name_change", ctypes.c_void_p, [
	("directory",		ctypes.POINTER(NautilusDirectory)),
	("file",		ctypes.POINTER(NautilusFile)),
	("node",		ctypes.POINTER(_GList)),] )

nautilus_directory_moved = _rpythonic_function_(		"nautilus_directory_moved", ctypes.c_void_p, [
	("from_uri",		ctypes.POINTER(ctypes.c_char)),
	("to_uri",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_directory_add_file_to_work_queue = _rpythonic_function_(		"nautilus_directory_add_file_to_work_queue", ctypes.c_void_p, [
	("directory",		ctypes.POINTER(NautilusDirectory)),
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_directory_remove_file_from_work_queue = _rpythonic_function_(		"nautilus_directory_remove_file_from_work_queue", ctypes.c_void_p, [
	("directory",		ctypes.POINTER(NautilusDirectory)),
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_set_kde_trash_name = _rpythonic_function_(		"nautilus_set_kde_trash_name", ctypes.c_void_p, [
	("trash_dir",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_directory_number_outstanding = _rpythonic_function_(		"nautilus_directory_number_outstanding", ctypes.c_int, [] )

NautilusDragEachSelectedItemDataGet = _rpythonic_function_(		"NautilusDragEachSelectedItemDataGet", ctypes.c_void_p, [
	("url",		ctypes.POINTER(ctypes.c_char)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("w",		ctypes.c_int),
	("h",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

NautilusDragEachSelectedItemIterator = _rpythonic_function_(		"NautilusDragEachSelectedItemIterator", ctypes.c_void_p, [
	("iteratee",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_char),ctypes.c_int,ctypes.c_int,ctypes.c_int,ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),)),
	("iterator_context",		ctypes.POINTER(ctypes.c_void_p)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_drag_init = _rpythonic_function_(		"nautilus_drag_init", ctypes.c_void_p, [
	("drag_info",		ctypes.POINTER(NautilusDragInfo)),
	("drag_types",		ctypes.POINTER(_GtkTargetEntry)),
	("drag_type_count",		ctypes.c_int),
	("add_text_targets",		ctypes.c_int),] )

nautilus_drag_finalize = _rpythonic_function_(		"nautilus_drag_finalize", ctypes.c_void_p, [
	("drag_info",		ctypes.POINTER(NautilusDragInfo)),] )

nautilus_drag_selection_item_new = _rpythonic_function_(		"nautilus_drag_selection_item_new", ctypes.POINTER(NautilusDragSelectionItem), [] )

nautilus_drag_destroy_selection_list = _rpythonic_function_(		"nautilus_drag_destroy_selection_list", ctypes.c_void_p, [
	("selection_list",		ctypes.POINTER(_GList)),] )

nautilus_drag_build_selection_list = _rpythonic_function_(		"nautilus_drag_build_selection_list", ctypes.POINTER(_GList), [
	("data",		ctypes.POINTER(_GtkSelectionData)),] )

nautilus_drag_uri_array_from_selection_list = _rpythonic_function_(		"nautilus_drag_uri_array_from_selection_list", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("selection_list",		ctypes.POINTER(_GList)),] )

nautilus_drag_uri_list_from_selection_list = _rpythonic_function_(		"nautilus_drag_uri_list_from_selection_list", ctypes.POINTER(_GList), [
	("selection_list",		ctypes.POINTER(_GList)),] )

nautilus_drag_uri_array_from_list = _rpythonic_function_(		"nautilus_drag_uri_array_from_list", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("uri_list",		ctypes.POINTER(_GList)),] )

nautilus_drag_uri_list_from_array = _rpythonic_function_(		"nautilus_drag_uri_list_from_array", ctypes.POINTER(_GList), [
	("uris",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

nautilus_drag_items_local = _rpythonic_function_(		"nautilus_drag_items_local", ctypes.c_int, [
	("target_uri",		ctypes.POINTER(ctypes.c_char)),
	("selection_list",		ctypes.POINTER(_GList)),] )

nautilus_drag_uris_local = _rpythonic_function_(		"nautilus_drag_uris_local", ctypes.c_int, [
	("target_uri",		ctypes.POINTER(ctypes.c_char)),
	("source_uri_list",		ctypes.POINTER(_GList)),] )

nautilus_drag_items_in_trash = _rpythonic_function_(		"nautilus_drag_items_in_trash", ctypes.c_int, [
	("selection_list",		ctypes.POINTER(_GList)),] )

nautilus_drag_items_on_desktop = _rpythonic_function_(		"nautilus_drag_items_on_desktop", ctypes.c_int, [
	("selection_list",		ctypes.POINTER(_GList)),] )

nautilus_drag_default_drop_action_for_icons = _rpythonic_function_(		"nautilus_drag_default_drop_action_for_icons", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GdkDragContext)),
	("target_uri",		ctypes.POINTER(ctypes.c_char)),
	("items",		ctypes.POINTER(_GList)),
	("action",		ctypes.POINTER(ctypes.c_int)),] )

nautilus_drag_default_drop_action_for_netscape_url = _rpythonic_function_(		"nautilus_drag_default_drop_action_for_netscape_url", ctypes.c_int, [
	("context",		ctypes.POINTER(_GdkDragContext)),] )

nautilus_drag_default_drop_action_for_uri_list = _rpythonic_function_(		"nautilus_drag_default_drop_action_for_uri_list", ctypes.c_int, [
	("context",		ctypes.POINTER(_GdkDragContext)),
	("target_uri_string",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_drag_drag_data_get = _rpythonic_function_(		"nautilus_drag_drag_data_get", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("context",		ctypes.POINTER(_GdkDragContext)),
	("selection_data",		ctypes.POINTER(_GtkSelectionData)),
	("info",		ctypes.c_uint),
	("time",		ctypes.c_uint),
	("container_context",		ctypes.POINTER(ctypes.c_void_p)),
	("each_selected_item_iterator",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_char),ctypes.c_int,ctypes.c_int,ctypes.c_int,ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

nautilus_drag_modifier_based_action = _rpythonic_function_(		"nautilus_drag_modifier_based_action", ctypes.c_int, [
	("default_action",		ctypes.c_int),
	("non_default_action",		ctypes.c_int),] )

nautilus_drag_drop_action_ask = _rpythonic_function_(		"nautilus_drag_drop_action_ask", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("possible_actions",		ctypes.c_int),] )

nautilus_drag_autoscroll_in_scroll_region = _rpythonic_function_(		"nautilus_drag_autoscroll_in_scroll_region", ctypes.c_int, [
	("widget",		ctypes.POINTER(_GtkWidget)),] )

nautilus_drag_autoscroll_calculate_delta = _rpythonic_function_(		"nautilus_drag_autoscroll_calculate_delta", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("x_scroll_delta",		ctypes.POINTER(ctypes.c_float)),
	("y_scroll_delta",		ctypes.POINTER(ctypes.c_float)),] )

nautilus_drag_autoscroll_start = _rpythonic_function_(		"nautilus_drag_autoscroll_start", ctypes.c_void_p, [
	("drag_info",		ctypes.POINTER(NautilusDragInfo)),
	("widget",		ctypes.POINTER(_GtkWidget)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_drag_autoscroll_stop = _rpythonic_function_(		"nautilus_drag_autoscroll_stop", ctypes.c_void_p, [
	("drag_info",		ctypes.POINTER(NautilusDragInfo)),] )

nautilus_drag_selection_includes_special_link = _rpythonic_function_(		"nautilus_drag_selection_includes_special_link", ctypes.c_int, [
	("selection_list",		ctypes.POINTER(_GList)),] )

nautilus_entry_get_type = _rpythonic_function_(		"nautilus_entry_get_type", ctypes.c_uint, [] )

nautilus_entry_new = _rpythonic_function_(		"nautilus_entry_new", ctypes.POINTER(_GtkWidget), [] )

nautilus_entry_new_with_max_length = _rpythonic_function_(		"nautilus_entry_new_with_max_length", ctypes.POINTER(_GtkWidget), [
	("max",		ctypes.c_ushort),] )

nautilus_entry_set_text = _rpythonic_function_(		"nautilus_entry_set_text", ctypes.c_void_p, [
	("entry",		ctypes.POINTER(NautilusEntry)),
	("text",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_entry_select_all = _rpythonic_function_(		"nautilus_entry_select_all", ctypes.c_void_p, [
	("entry",		ctypes.POINTER(NautilusEntry)),] )

nautilus_entry_select_all_at_idle = _rpythonic_function_(		"nautilus_entry_select_all_at_idle", ctypes.c_void_p, [
	("entry",		ctypes.POINTER(NautilusEntry)),] )

nautilus_entry_set_special_tab_handling = _rpythonic_function_(		"nautilus_entry_set_special_tab_handling", ctypes.c_void_p, [
	("entry",		ctypes.POINTER(NautilusEntry)),
	("special_tab_handling",		ctypes.c_int),] )

nautilus_file_changes_queue_file_added = _rpythonic_function_(		"nautilus_file_changes_queue_file_added", ctypes.c_void_p, [
	("location",		ctypes.POINTER(_GFile)),] )

nautilus_file_changes_queue_file_changed = _rpythonic_function_(		"nautilus_file_changes_queue_file_changed", ctypes.c_void_p, [
	("location",		ctypes.POINTER(_GFile)),] )

nautilus_file_changes_queue_file_removed = _rpythonic_function_(		"nautilus_file_changes_queue_file_removed", ctypes.c_void_p, [
	("location",		ctypes.POINTER(_GFile)),] )

nautilus_file_changes_queue_file_moved = _rpythonic_function_(		"nautilus_file_changes_queue_file_moved", ctypes.c_void_p, [
	("from",		ctypes.POINTER(_GFile)),
	("to",		ctypes.POINTER(_GFile)),] )

nautilus_file_changes_queue_schedule_position_set = _rpythonic_function_(		"nautilus_file_changes_queue_schedule_position_set", ctypes.c_void_p, [
	("location",		ctypes.POINTER(_GFile)),
	("point",		_GdkPoint),
	("screen",		ctypes.c_int),] )

nautilus_file_changes_queue_schedule_position_remove = _rpythonic_function_(		"nautilus_file_changes_queue_schedule_position_remove", ctypes.c_void_p, [
	("location",		ctypes.POINTER(_GFile)),] )

nautilus_file_changes_consume_changes = _rpythonic_function_(		"nautilus_file_changes_consume_changes", ctypes.c_void_p, [
	("consume_all",		ctypes.c_int),] )

nautilus_file_conflict_dialog_get_type = _rpythonic_function_(		"nautilus_file_conflict_dialog_get_type", ctypes.c_uint, [] )

nautilus_file_conflict_dialog_new = _rpythonic_function_(		"nautilus_file_conflict_dialog_new", ctypes.POINTER(_GtkWidget), [
	("parent",		ctypes.POINTER(_GtkWindow)),
	("source",		ctypes.POINTER(_GFile)),
	("destination",		ctypes.POINTER(_GFile)),
	("dest_dir",		ctypes.POINTER(_GFile)),] )

nautilus_file_conflict_dialog_get_new_name = _rpythonic_function_(		"nautilus_file_conflict_dialog_get_new_name", ctypes.POINTER(ctypes.c_char), [
	("dialog",		ctypes.POINTER(_NautilusFileConflictDialog)),] )

nautilus_file_conflict_dialog_get_apply_to_all = _rpythonic_function_(		"nautilus_file_conflict_dialog_get_apply_to_all", ctypes.c_int, [
	("dialog",		ctypes.POINTER(_NautilusFileConflictDialog)),] )

nautilus_drag_can_accept_item = _rpythonic_function_(		"nautilus_drag_can_accept_item", ctypes.c_int, [
	("drop_target_item",		ctypes.POINTER(NautilusFile)),
	("item_uri",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_drag_can_accept_items = _rpythonic_function_(		"nautilus_drag_can_accept_items", ctypes.c_int, [
	("drop_target_item",		ctypes.POINTER(NautilusFile)),
	("items",		ctypes.POINTER(_GList)),] )

nautilus_drag_can_accept_info = _rpythonic_function_(		"nautilus_drag_can_accept_info", ctypes.c_int, [
	("drop_target_item",		ctypes.POINTER(NautilusFile)),
	("drag_type",		ctypes.c_int),
	("items",		ctypes.POINTER(_GList)),] )

NautilusCopyCallback = _rpythonic_function_(		"NautilusCopyCallback", ctypes.c_void_p, [
	("debuting_uris",		ctypes.POINTER(_GHashTable)),
	("success",		ctypes.c_int),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

NautilusCreateCallback = _rpythonic_function_(		"NautilusCreateCallback", ctypes.c_void_p, [
	("new_file",		ctypes.POINTER(_GFile)),
	("success",		ctypes.c_int),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

NautilusOpCallback = _rpythonic_function_(		"NautilusOpCallback", ctypes.c_void_p, [
	("success",		ctypes.c_int),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

NautilusDeleteCallback = _rpythonic_function_(		"NautilusDeleteCallback", ctypes.c_void_p, [
	("debuting_uris",		ctypes.POINTER(_GHashTable)),
	("user_cancel",		ctypes.c_int),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

NautilusMountCallback = _rpythonic_function_(		"NautilusMountCallback", ctypes.c_void_p, [
	("volume",		ctypes.POINTER(_GVolume)),
	("success",		ctypes.c_int),
	("callback_data_object",		ctypes.POINTER(_GObject)),] )

NautilusUnmountCallback = _rpythonic_function_(		"NautilusUnmountCallback", ctypes.c_void_p, [("callback_data",		ctypes.c_void_p)] )

nautilus_file_operations_copy_move = _rpythonic_function_(		"nautilus_file_operations_copy_move", ctypes.c_void_p, [
	("item_uris",		ctypes.POINTER(_GList)),
	("relative_item_points",		ctypes.POINTER(_GArray)),
	("target_dir_uri",		ctypes.POINTER(ctypes.c_char)),
	("copy_action",		ctypes.c_int),
	("parent_view",		ctypes.POINTER(_GtkWidget)),
	("done_callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GHashTable),ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),)),
	("done_callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_file_operations_copy_file = _rpythonic_function_(		"nautilus_file_operations_copy_file", ctypes.c_void_p, [
	("source_file",		ctypes.POINTER(_GFile)),
	("target_dir",		ctypes.POINTER(_GFile)),
	("source_display_name",		ctypes.POINTER(ctypes.c_char)),
	("new_name",		ctypes.POINTER(ctypes.c_char)),
	("parent_window",		ctypes.POINTER(_GtkWindow)),
	("done_callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GHashTable),ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),)),
	("done_callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_file_operations_empty_trash = _rpythonic_function_(		"nautilus_file_operations_empty_trash", ctypes.c_void_p, [
	("parent_view",		ctypes.POINTER(_GtkWidget)),] )

nautilus_file_operations_new_folder = _rpythonic_function_(		"nautilus_file_operations_new_folder", ctypes.c_void_p, [
	("parent_view",		ctypes.POINTER(_GtkWidget)),
	("target_point",		ctypes.POINTER(_GdkPoint)),
	("parent_dir_uri",		ctypes.POINTER(ctypes.c_char)),
	("done_callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GFile),ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),)),
	("done_callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_file_operations_new_file = _rpythonic_function_(		"nautilus_file_operations_new_file", ctypes.c_void_p, [
	("parent_view",		ctypes.POINTER(_GtkWidget)),
	("target_point",		ctypes.POINTER(_GdkPoint)),
	("parent_dir",		ctypes.POINTER(ctypes.c_char)),
	("target_filename",		ctypes.POINTER(ctypes.c_char)),
	("initial_contents",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),
	("done_callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GFile),ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_file_operations_new_file_from_template = _rpythonic_function_(		"nautilus_file_operations_new_file_from_template", ctypes.c_void_p, [
	("parent_view",		ctypes.POINTER(_GtkWidget)),
	("target_point",		ctypes.POINTER(_GdkPoint)),
	("parent_dir",		ctypes.POINTER(ctypes.c_char)),
	("target_filename",		ctypes.POINTER(ctypes.c_char)),
	("template_uri",		ctypes.POINTER(ctypes.c_char)),
	("done_callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GFile),ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_file_operations_delete = _rpythonic_function_(		"nautilus_file_operations_delete", ctypes.c_void_p, [
	("files",		ctypes.POINTER(_GList)),
	("parent_window",		ctypes.POINTER(_GtkWindow)),
	("done_callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GHashTable),ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),)),
	("done_callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_file_operations_trash_or_delete = _rpythonic_function_(		"nautilus_file_operations_trash_or_delete", ctypes.c_void_p, [
	("files",		ctypes.POINTER(_GList)),
	("parent_window",		ctypes.POINTER(_GtkWindow)),
	("done_callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GHashTable),ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),)),
	("done_callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_file_set_permissions_recursive = _rpythonic_function_(		"nautilus_file_set_permissions_recursive", ctypes.c_void_p, [
	("directory",		ctypes.POINTER(ctypes.c_char)),
	("file_permissions",		ctypes.c_uint),
	("file_mask",		ctypes.c_uint),
	("folder_permissions",		ctypes.c_uint),
	("folder_mask",		ctypes.c_uint),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_file_operations_unmount_mount = _rpythonic_function_(		"nautilus_file_operations_unmount_mount", ctypes.c_void_p, [
	("parent_window",		ctypes.POINTER(_GtkWindow)),
	("mount",		ctypes.POINTER(_GMount)),
	("eject",		ctypes.c_int),
	("check_trash",		ctypes.c_int),] )

nautilus_file_operations_unmount_mount_full = _rpythonic_function_(		"nautilus_file_operations_unmount_mount_full", ctypes.c_void_p, [
	("parent_window",		ctypes.POINTER(_GtkWindow)),
	("mount",		ctypes.POINTER(_GMount)),
	("eject",		ctypes.c_int),
	("check_trash",		ctypes.c_int),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_file_operations_mount_volume = _rpythonic_function_(		"nautilus_file_operations_mount_volume", ctypes.c_void_p, [
	("parent_window",		ctypes.POINTER(_GtkWindow)),
	("volume",		ctypes.POINTER(_GVolume)),] )

nautilus_file_operations_mount_volume_full = _rpythonic_function_(		"nautilus_file_operations_mount_volume_full", ctypes.c_void_p, [
	("parent_window",		ctypes.POINTER(_GtkWindow)),
	("volume",		ctypes.POINTER(_GVolume)),
	("mount_callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GVolume),ctypes.c_int,ctypes.POINTER(_GObject),)),
	("mount_callback_data_object",		ctypes.POINTER(_GObject)),] )

nautilus_file_operations_copy = _rpythonic_function_(		"nautilus_file_operations_copy", ctypes.c_void_p, [
	("files",		ctypes.POINTER(_GList)),
	("relative_item_points",		ctypes.POINTER(_GArray)),
	("target_dir",		ctypes.POINTER(_GFile)),
	("parent_window",		ctypes.POINTER(_GtkWindow)),
	("done_callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GHashTable),ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),)),
	("done_callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_file_operations_move = _rpythonic_function_(		"nautilus_file_operations_move", ctypes.c_void_p, [
	("files",		ctypes.POINTER(_GList)),
	("relative_item_points",		ctypes.POINTER(_GArray)),
	("target_dir",		ctypes.POINTER(_GFile)),
	("parent_window",		ctypes.POINTER(_GtkWindow)),
	("done_callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GHashTable),ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),)),
	("done_callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_file_operations_duplicate = _rpythonic_function_(		"nautilus_file_operations_duplicate", ctypes.c_void_p, [
	("files",		ctypes.POINTER(_GList)),
	("relative_item_points",		ctypes.POINTER(_GArray)),
	("parent_window",		ctypes.POINTER(_GtkWindow)),
	("done_callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GHashTable),ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),)),
	("done_callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_file_operations_link = _rpythonic_function_(		"nautilus_file_operations_link", ctypes.c_void_p, [
	("files",		ctypes.POINTER(_GList)),
	("relative_item_points",		ctypes.POINTER(_GArray)),
	("target_dir",		ctypes.POINTER(_GFile)),
	("parent_window",		ctypes.POINTER(_GtkWindow)),
	("done_callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GHashTable),ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),)),
	("done_callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_file_mark_desktop_file_trusted = _rpythonic_function_(		"nautilus_file_mark_desktop_file_trusted", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("parent_window",		ctypes.POINTER(_GtkWindow)),
	("interactive",		ctypes.c_int),
	("done_callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),)),
	("done_callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

undo_func = _rpythonic_function_(		"undo_func", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_NautilusFileUndoInfo)),
	("parent_window",		ctypes.POINTER(_GtkWindow)),] )

redo_func = _rpythonic_function_(		"redo_func", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_NautilusFileUndoInfo)),
	("parent_window",		ctypes.POINTER(_GtkWindow)),] )

strings_func = _rpythonic_function_(		"strings_func", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_NautilusFileUndoInfo)),
	("undo_label",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("undo_description",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("redo_label",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("redo_description",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

nautilus_file_undo_info_get_type = _rpythonic_function_(		"nautilus_file_undo_info_get_type", ctypes.c_uint, [] )

nautilus_file_undo_info_apply_async = _rpythonic_function_(		"nautilus_file_undo_info_apply_async", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_NautilusFileUndoInfo)),
	("undo",		ctypes.c_int),
	("parent_window",		ctypes.POINTER(_GtkWindow)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_file_undo_info_apply_finish = _rpythonic_function_(		"nautilus_file_undo_info_apply_finish", ctypes.c_int, [
	("C_self",		ctypes.POINTER(_NautilusFileUndoInfo)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("user_cancel",		ctypes.POINTER(ctypes.c_int)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

nautilus_file_undo_info_get_strings = _rpythonic_function_(		"nautilus_file_undo_info_get_strings", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_NautilusFileUndoInfo)),
	("undo_label",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("undo_description",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("redo_label",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("redo_description",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

nautilus_file_undo_info_ext_get_type = _rpythonic_function_(		"nautilus_file_undo_info_ext_get_type", ctypes.c_uint, [] )

nautilus_file_undo_info_ext_new = _rpythonic_function_(		"nautilus_file_undo_info_ext_new", ctypes.POINTER(_NautilusFileUndoInfo), [
	("op_type",		ctypes.c_int),
	("item_count",		ctypes.c_int),
	("src_dir",		ctypes.POINTER(_GFile)),
	("target_dir",		ctypes.POINTER(_GFile)),] )

nautilus_file_undo_info_ext_add_origin_target_pair = _rpythonic_function_(		"nautilus_file_undo_info_ext_add_origin_target_pair", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_NautilusFileUndoInfoExt)),
	("origin",		ctypes.POINTER(_GFile)),
	("target",		ctypes.POINTER(_GFile)),] )

nautilus_file_undo_info_create_get_type = _rpythonic_function_(		"nautilus_file_undo_info_create_get_type", ctypes.c_uint, [] )

nautilus_file_undo_info_create_new = _rpythonic_function_(		"nautilus_file_undo_info_create_new", ctypes.POINTER(_NautilusFileUndoInfo), [
	("op_type",		ctypes.c_int),] )

nautilus_file_undo_info_create_set_data = _rpythonic_function_(		"nautilus_file_undo_info_create_set_data", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_NautilusFileUndoInfoCreate)),
	("file",		ctypes.POINTER(_GFile)),
	("template",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),] )

nautilus_file_undo_info_rename_get_type = _rpythonic_function_(		"nautilus_file_undo_info_rename_get_type", ctypes.c_uint, [] )

nautilus_file_undo_info_rename_new = _rpythonic_function_(		"nautilus_file_undo_info_rename_new", ctypes.POINTER(_NautilusFileUndoInfo), [] )

nautilus_file_undo_info_rename_set_data = _rpythonic_function_(		"nautilus_file_undo_info_rename_set_data", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_NautilusFileUndoInfoRename)),
	("old_file",		ctypes.POINTER(_GFile)),
	("new_file",		ctypes.POINTER(_GFile)),] )

nautilus_file_undo_info_trash_get_type = _rpythonic_function_(		"nautilus_file_undo_info_trash_get_type", ctypes.c_uint, [] )

nautilus_file_undo_info_trash_new = _rpythonic_function_(		"nautilus_file_undo_info_trash_new", ctypes.POINTER(_NautilusFileUndoInfo), [
	("item_count",		ctypes.c_int),] )

nautilus_file_undo_info_trash_add_file = _rpythonic_function_(		"nautilus_file_undo_info_trash_add_file", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_NautilusFileUndoInfoTrash)),
	("file",		ctypes.POINTER(_GFile)),] )

nautilus_file_undo_info_rec_permissions_get_type = _rpythonic_function_(		"nautilus_file_undo_info_rec_permissions_get_type", ctypes.c_uint, [] )

nautilus_file_undo_info_rec_permissions_new = _rpythonic_function_(		"nautilus_file_undo_info_rec_permissions_new", ctypes.POINTER(_NautilusFileUndoInfo), [
	("dest",		ctypes.POINTER(_GFile)),
	("file_permissions",		ctypes.c_uint),
	("file_mask",		ctypes.c_uint),
	("dir_permissions",		ctypes.c_uint),
	("dir_mask",		ctypes.c_uint),] )

nautilus_file_undo_info_rec_permissions_add_file = _rpythonic_function_(		"nautilus_file_undo_info_rec_permissions_add_file", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_NautilusFileUndoInfoRecPermissions)),
	("file",		ctypes.POINTER(_GFile)),
	("permission",		ctypes.c_uint),] )

nautilus_file_undo_info_permissions_get_type = _rpythonic_function_(		"nautilus_file_undo_info_permissions_get_type", ctypes.c_uint, [] )

nautilus_file_undo_info_permissions_new = _rpythonic_function_(		"nautilus_file_undo_info_permissions_new", ctypes.POINTER(_NautilusFileUndoInfo), [
	("file",		ctypes.POINTER(_GFile)),
	("current_permissions",		ctypes.c_uint),
	("new_permissions",		ctypes.c_uint),] )

nautilus_file_undo_info_ownership_get_type = _rpythonic_function_(		"nautilus_file_undo_info_ownership_get_type", ctypes.c_uint, [] )

nautilus_file_undo_info_ownership_new = _rpythonic_function_(		"nautilus_file_undo_info_ownership_new", ctypes.POINTER(_NautilusFileUndoInfo), [
	("op_type",		ctypes.c_int),
	("file",		ctypes.POINTER(_GFile)),
	("current_data",		ctypes.POINTER(ctypes.c_char)),
	("new_data",		ctypes.POINTER(ctypes.c_char)),] )

memcpy = _rpythonic_function_(		"memcpy", ctypes.POINTER(ctypes.c_void_p), [
	("__dest",		ctypes.POINTER(ctypes.c_void_p)),
	("__src",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),] )

memmove = _rpythonic_function_(		"memmove", ctypes.POINTER(ctypes.c_void_p), [
	("__dest",		ctypes.POINTER(ctypes.c_void_p)),
	("__src",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),] )

memccpy = _rpythonic_function_(		"memccpy", ctypes.POINTER(ctypes.c_void_p), [
	("__dest",		ctypes.POINTER(ctypes.c_void_p)),
	("__src",		ctypes.POINTER(ctypes.c_void_p)),
	("__c",		ctypes.c_int),
	("__n",		ctypes.c_uint),] )

memset = _rpythonic_function_(		"memset", ctypes.POINTER(ctypes.c_void_p), [
	("__s",		ctypes.POINTER(ctypes.c_void_p)),
	("__c",		ctypes.c_int),
	("__n",		ctypes.c_uint),] )

memcmp = _rpythonic_function_(		"memcmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_void_p)),
	("__s2",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),] )

memchr = _rpythonic_function_(		"memchr", ctypes.POINTER(ctypes.c_void_p), [
	("__s",		ctypes.POINTER(ctypes.c_void_p)),
	("__c",		ctypes.c_int),
	("__n",		ctypes.c_uint),] )

strcpy = _rpythonic_function_(		"strcpy", ctypes.POINTER(ctypes.c_char), [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),] )

strncpy = _rpythonic_function_(		"strncpy", ctypes.POINTER(ctypes.c_char), [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

strcat = _rpythonic_function_(		"strcat", ctypes.POINTER(ctypes.c_char), [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),] )

strncat = _rpythonic_function_(		"strncat", ctypes.POINTER(ctypes.c_char), [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

strcmp = _rpythonic_function_(		"strcmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),] )

strncmp = _rpythonic_function_(		"strncmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

strcoll = _rpythonic_function_(		"strcoll", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),] )

strxfrm = _rpythonic_function_(		"strxfrm", ctypes.c_uint, [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

strcoll_l = _rpythonic_function_(		"strcoll_l", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),
	("__l",		ctypes.POINTER(__locale_struct)),] )

strxfrm_l = _rpythonic_function_(		"strxfrm_l", ctypes.c_uint, [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),
	("__l",		ctypes.POINTER(__locale_struct)),] )

strdup = _rpythonic_function_(		"strdup", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

strndup = _rpythonic_function_(		"strndup", ctypes.POINTER(ctypes.c_char), [
	("__string",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

strchr = _rpythonic_function_(		"strchr", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__c",		ctypes.c_int),] )

strrchr = _rpythonic_function_(		"strrchr", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__c",		ctypes.c_int),] )

strcspn = _rpythonic_function_(		"strcspn", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__reject",		ctypes.POINTER(ctypes.c_char)),] )

strspn = _rpythonic_function_(		"strspn", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__accept",		ctypes.POINTER(ctypes.c_char)),] )

strpbrk = _rpythonic_function_(		"strpbrk", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__accept",		ctypes.POINTER(ctypes.c_char)),] )

strstr = _rpythonic_function_(		"strstr", ctypes.POINTER(ctypes.c_char), [
	("__haystack",		ctypes.POINTER(ctypes.c_char)),
	("__needle",		ctypes.POINTER(ctypes.c_char)),] )

strtok = _rpythonic_function_(		"strtok", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__delim",		ctypes.POINTER(ctypes.c_char)),] )

strtok_r = _rpythonic_function_(		"strtok_r", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__delim",		ctypes.POINTER(ctypes.c_char)),
	("__save_ptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

strlen = _rpythonic_function_(		"strlen", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

strnlen = _rpythonic_function_(		"strnlen", ctypes.c_uint, [
	("__string",		ctypes.POINTER(ctypes.c_char)),
	("__maxlen",		ctypes.c_uint),] )

strerror = _rpythonic_function_(		"strerror", ctypes.POINTER(ctypes.c_char), [
	("__errnum",		ctypes.c_int),] )

strerror_r = _rpythonic_function_(		"strerror_r", ctypes.c_int, [
	("__errnum",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__buflen",		ctypes.c_uint),] )

strerror_l = _rpythonic_function_(		"strerror_l", ctypes.POINTER(ctypes.c_char), [
	("__errnum",		ctypes.c_int),
	("__l",		ctypes.POINTER(__locale_struct)),] )

bcopy = _rpythonic_function_(		"bcopy", ctypes.c_void_p, [
	("__src",		ctypes.POINTER(ctypes.c_void_p)),
	("__dest",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),] )

bzero = _rpythonic_function_(		"bzero", ctypes.c_void_p, [
	("__s",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),] )

bcmp = _rpythonic_function_(		"bcmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_void_p)),
	("__s2",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),] )

index = _rpythonic_function_(		"index", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__c",		ctypes.c_int),] )

rindex = _rpythonic_function_(		"rindex", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__c",		ctypes.c_int),] )

ffs = _rpythonic_function_(		"ffs", ctypes.c_int, [
	("__i",		ctypes.c_int),] )

strcasecmp = _rpythonic_function_(		"strcasecmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),] )

strncasecmp = _rpythonic_function_(		"strncasecmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

strsep = _rpythonic_function_(		"strsep", ctypes.POINTER(ctypes.c_char), [
	("__stringp",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__delim",		ctypes.POINTER(ctypes.c_char)),] )

strsignal = _rpythonic_function_(		"strsignal", ctypes.POINTER(ctypes.c_char), [
	("__sig",		ctypes.c_int),] )

stpcpy = _rpythonic_function_(		"stpcpy", ctypes.POINTER(ctypes.c_char), [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),] )

stpncpy = _rpythonic_function_(		"stpncpy", ctypes.POINTER(ctypes.c_char), [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

eel_str_double_underscores = _rpythonic_function_(		"eel_str_double_underscores", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

eel_str_capitalize = _rpythonic_function_(		"eel_str_capitalize", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

eel_str_middle_truncate = _rpythonic_function_(		"eel_str_middle_truncate", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("truncate_length",		ctypes.c_uint),] )

eel_str_strip_substring_and_after = _rpythonic_function_(		"eel_str_strip_substring_and_after", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("substring",		ctypes.POINTER(ctypes.c_char)),] )

eel_str_replace_substring = _rpythonic_function_(		"eel_str_replace_substring", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("substring",		ctypes.POINTER(ctypes.c_char)),
	("replacement",		ctypes.POINTER(ctypes.c_char)),] )

eel_ref_str_new = _rpythonic_function_(		"eel_ref_str_new", ctypes.POINTER(ctypes.c_char), [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

eel_ref_str_get_unique = _rpythonic_function_(		"eel_ref_str_get_unique", ctypes.POINTER(ctypes.c_char), [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

eel_ref_str_ref = _rpythonic_function_(		"eel_ref_str_ref", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

eel_ref_str_unref = _rpythonic_function_(		"eel_ref_str_unref", ctypes.c_void_p, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

eel_strdup_vprintf_with_custom = _rpythonic_function_(		"eel_strdup_vprintf_with_custom", ctypes.POINTER(ctypes.c_char), [
	("custom",		ctypes.POINTER(EelPrintfHandler)),
	("format",		ctypes.POINTER(ctypes.c_char)),
	("va",		ctypes.c_char),] )

nautilus_file_new_from_info = _rpythonic_function_(		"nautilus_file_new_from_info", ctypes.POINTER(NautilusFile), [
	("directory",		ctypes.POINTER(NautilusDirectory)),
	("info",		ctypes.POINTER(_GFileInfo)),] )

nautilus_file_emit_changed = _rpythonic_function_(		"nautilus_file_emit_changed", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_mark_gone = _rpythonic_function_(		"nautilus_file_mark_gone", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_extract_top_left_text = _rpythonic_function_(		"nautilus_extract_top_left_text", ctypes.POINTER(ctypes.c_char), [
	("text",		ctypes.POINTER(ctypes.c_char)),
	("large",		ctypes.c_int),
	("length",		ctypes.c_int),] )

nautilus_file_set_directory = _rpythonic_function_(		"nautilus_file_set_directory", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),
	("directory",		ctypes.POINTER(NautilusDirectory)),] )

nautilus_file_get_date = _rpythonic_function_(		"nautilus_file_get_date", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),
	("date_type",		ctypes.c_int),
	("date",		ctypes.POINTER(ctypes.c_int64)),] )

nautilus_file_updated_deep_count_in_progress = _rpythonic_function_(		"nautilus_file_updated_deep_count_in_progress", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_clear_info = _rpythonic_function_(		"nautilus_file_clear_info", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_update_info = _rpythonic_function_(		"nautilus_file_update_info", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),
	("info",		ctypes.POINTER(_GFileInfo)),] )

nautilus_file_update_name = _rpythonic_function_(		"nautilus_file_update_name", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_file_update_metadata_from_info = _rpythonic_function_(		"nautilus_file_update_metadata_from_info", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),
	("info",		ctypes.POINTER(_GFileInfo)),] )

nautilus_file_update_name_and_directory = _rpythonic_function_(		"nautilus_file_update_name_and_directory", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("directory",		ctypes.POINTER(NautilusDirectory)),] )

nautilus_file_set_display_name = _rpythonic_function_(		"nautilus_file_set_display_name", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),
	("display_name",		ctypes.POINTER(ctypes.c_char)),
	("edit_name",		ctypes.POINTER(ctypes.c_char)),
	("custom",		ctypes.c_int),] )

nautilus_file_set_mount = _rpythonic_function_(		"nautilus_file_set_mount", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),
	("mount",		ctypes.POINTER(_GMount)),] )

nautilus_file_should_get_top_left_text = _rpythonic_function_(		"nautilus_file_should_get_top_left_text", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_invalidate_attributes_internal = _rpythonic_function_(		"nautilus_file_invalidate_attributes_internal", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),
	("file_attributes",		ctypes.c_int),] )

nautilus_file_get_all_attributes = _rpythonic_function_(		"nautilus_file_get_all_attributes", ctypes.c_int, [] )

nautilus_file_is_self_owned = _rpythonic_function_(		"nautilus_file_is_self_owned", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_invalidate_count_and_mime_list = _rpythonic_function_(		"nautilus_file_invalidate_count_and_mime_list", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_rename_in_progress = _rpythonic_function_(		"nautilus_file_rename_in_progress", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_invalidate_extension_info_internal = _rpythonic_function_(		"nautilus_file_invalidate_extension_info_internal", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_info_providers_done = _rpythonic_function_(		"nautilus_file_info_providers_done", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_file_set_is_thumbnailing = _rpythonic_function_(		"nautilus_file_set_is_thumbnailing", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),
	("is_thumbnailing",		ctypes.c_int),] )

nautilus_file_operation_new = _rpythonic_function_(		"nautilus_file_operation_new", ctypes.POINTER(NautilusFileOperation), [
	("file",		ctypes.POINTER(NautilusFile)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(NautilusFile),ctypes.POINTER(_GFile),ctypes.POINTER(_GError),ctypes.POINTER(ctypes.c_void_p),)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_file_operation_free = _rpythonic_function_(		"nautilus_file_operation_free", ctypes.c_void_p, [
	("op",		ctypes.POINTER(NautilusFileOperation)),] )

nautilus_file_operation_complete = _rpythonic_function_(		"nautilus_file_operation_complete", ctypes.c_void_p, [
	("op",		ctypes.POINTER(NautilusFileOperation)),
	("result_location",		ctypes.POINTER(_GFile)),
	("error",		ctypes.POINTER(_GError)),] )

nautilus_file_operation_cancel = _rpythonic_function_(		"nautilus_file_operation_cancel", ctypes.c_void_p, [
	("op",		ctypes.POINTER(NautilusFileOperation)),] )

nautilus_file_undo_manager_get_type = _rpythonic_function_(		"nautilus_file_undo_manager_get_type", ctypes.c_uint, [] )

nautilus_file_undo_manager_get = _rpythonic_function_(		"nautilus_file_undo_manager_get", ctypes.POINTER(_NautilusFileUndoManager), [] )

nautilus_file_undo_manager_set_action = _rpythonic_function_(		"nautilus_file_undo_manager_set_action", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_NautilusFileUndoInfo)),] )

nautilus_file_undo_manager_get_action = _rpythonic_function_(		"nautilus_file_undo_manager_get_action", ctypes.POINTER(_NautilusFileUndoInfo), [] )

nautilus_file_undo_manager_get_state = _rpythonic_function_(		"nautilus_file_undo_manager_get_state", ctypes.c_int, [] )

nautilus_file_undo_manager_undo = _rpythonic_function_(		"nautilus_file_undo_manager_undo", ctypes.c_void_p, [
	("parent_window",		ctypes.POINTER(_GtkWindow)),] )

nautilus_file_undo_manager_redo = _rpythonic_function_(		"nautilus_file_undo_manager_redo", ctypes.c_void_p, [
	("parent_window",		ctypes.POINTER(_GtkWindow)),] )

nautilus_file_undo_manager_push_flag = _rpythonic_function_(		"nautilus_file_undo_manager_push_flag", ctypes.c_void_p, [] )

nautilus_file_undo_manager_pop_flag = _rpythonic_function_(		"nautilus_file_undo_manager_pop_flag", ctypes.c_int, [] )

nautilus_get_xdg_dir = _rpythonic_function_(		"nautilus_get_xdg_dir", ctypes.POINTER(ctypes.c_char), [
	("C_type",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_get_user_directory = _rpythonic_function_(		"nautilus_get_user_directory", ctypes.POINTER(ctypes.c_char), [] )

nautilus_get_desktop_directory = _rpythonic_function_(		"nautilus_get_desktop_directory", ctypes.POINTER(ctypes.c_char), [] )

nautilus_get_desktop_location = _rpythonic_function_(		"nautilus_get_desktop_location", ctypes.POINTER(_GFile), [] )

nautilus_get_desktop_directory_uri = _rpythonic_function_(		"nautilus_get_desktop_directory_uri", ctypes.POINTER(ctypes.c_char), [] )

nautilus_get_home_directory_uri = _rpythonic_function_(		"nautilus_get_home_directory_uri", ctypes.POINTER(ctypes.c_char), [] )

nautilus_is_desktop_directory_file = _rpythonic_function_(		"nautilus_is_desktop_directory_file", ctypes.c_int, [
	("dir",		ctypes.POINTER(_GFile)),
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_is_root_directory = _rpythonic_function_(		"nautilus_is_root_directory", ctypes.c_int, [
	("dir",		ctypes.POINTER(_GFile)),] )

nautilus_is_desktop_directory = _rpythonic_function_(		"nautilus_is_desktop_directory", ctypes.c_int, [
	("dir",		ctypes.POINTER(_GFile)),] )

nautilus_is_home_directory = _rpythonic_function_(		"nautilus_is_home_directory", ctypes.c_int, [
	("dir",		ctypes.POINTER(_GFile)),] )

nautilus_is_home_directory_file = _rpythonic_function_(		"nautilus_is_home_directory_file", ctypes.c_int, [
	("dir",		ctypes.POINTER(_GFile)),
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_is_in_system_dir = _rpythonic_function_(		"nautilus_is_in_system_dir", ctypes.c_int, [
	("location",		ctypes.POINTER(_GFile)),] )

nautilus_should_use_templates_directory = _rpythonic_function_(		"nautilus_should_use_templates_directory", ctypes.c_int, [] )

nautilus_get_templates_directory = _rpythonic_function_(		"nautilus_get_templates_directory", ctypes.POINTER(ctypes.c_char), [] )

nautilus_get_templates_directory_uri = _rpythonic_function_(		"nautilus_get_templates_directory_uri", ctypes.POINTER(ctypes.c_char), [] )

nautilus_create_templates_directory = _rpythonic_function_(		"nautilus_create_templates_directory", ctypes.c_void_p, [] )

nautilus_get_searches_directory = _rpythonic_function_(		"nautilus_get_searches_directory", ctypes.POINTER(ctypes.c_char), [] )

nautilus_compute_title_for_location = _rpythonic_function_(		"nautilus_compute_title_for_location", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(_GFile)),] )

nautilus_is_file_roller_installed = _rpythonic_function_(		"nautilus_is_file_roller_installed", ctypes.c_int, [] )

nautilus_ensure_unique_file_name = _rpythonic_function_(		"nautilus_ensure_unique_file_name", ctypes.POINTER(ctypes.c_char), [
	("directory_uri",		ctypes.POINTER(ctypes.c_char)),
	("base_name",		ctypes.POINTER(ctypes.c_char)),
	("extension",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_find_existing_uri_in_hierarchy = _rpythonic_function_(		"nautilus_find_existing_uri_in_hierarchy", ctypes.POINTER(_GFile), [
	("location",		ctypes.POINTER(_GFile)),] )

nautilus_get_accel_map_file = _rpythonic_function_(		"nautilus_get_accel_map_file", ctypes.POINTER(ctypes.c_char), [] )

nautilus_get_scripts_directory_path = _rpythonic_function_(		"nautilus_get_scripts_directory_path", ctypes.POINTER(ctypes.c_char), [] )

nautilus_trashed_files_get_original_directories = _rpythonic_function_(		"nautilus_trashed_files_get_original_directories", ctypes.POINTER(_GHashTable), [
	("files",		ctypes.POINTER(_GList)),
	("unhandled_files",		ctypes.POINTER(ctypes.POINTER(_GList))),] )

nautilus_restore_files_from_trash = _rpythonic_function_(		"nautilus_restore_files_from_trash", ctypes.c_void_p, [
	("files",		ctypes.POINTER(_GList)),
	("parent_window",		ctypes.POINTER(_GtkWindow)),] )

NautilusMountGetContent = _rpythonic_function_(		"NautilusMountGetContent", ctypes.c_void_p, [
	("content",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_get_cached_x_content_types_for_mount = _rpythonic_function_(		"nautilus_get_cached_x_content_types_for_mount", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("mount",		ctypes.POINTER(_GMount)),] )

nautilus_get_x_content_types_for_mount_async = _rpythonic_function_(		"nautilus_get_x_content_types_for_mount_async", ctypes.c_void_p, [
	("mount",		ctypes.POINTER(_GMount)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.POINTER(ctypes.c_char)),ctypes.POINTER(ctypes.c_void_p),)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_global_preferences_init = _rpythonic_function_(		"nautilus_global_preferences_init", ctypes.c_void_p, [] )

nautilus_global_preferences_get_default_folder_viewer_preference_as_iid = _rpythonic_function_(		"nautilus_global_preferences_get_default_folder_viewer_preference_as_iid", ctypes.POINTER(ctypes.c_char), [] )

eel_irect_copy = _rpythonic_function_(		"eel_irect_copy", ctypes.c_void_p, [
	("dest",		ctypes.POINTER(EelIRect)),
	("src",		ctypes.POINTER(EelIRect)),] )

eel_irect_union = _rpythonic_function_(		"eel_irect_union", ctypes.c_void_p, [
	("dest",		ctypes.POINTER(EelIRect)),
	("src1",		ctypes.POINTER(EelIRect)),
	("src2",		ctypes.POINTER(EelIRect)),] )

eel_irect_intersect = _rpythonic_function_(		"eel_irect_intersect", ctypes.c_void_p, [
	("dest",		ctypes.POINTER(EelIRect)),
	("src1",		ctypes.POINTER(EelIRect)),
	("src2",		ctypes.POINTER(EelIRect)),] )

eel_irect_equal = _rpythonic_function_(		"eel_irect_equal", ctypes.c_int, [
	("rectangle_a",		EelIRect),
	("rectangle_b",		EelIRect),] )

eel_irect_hits_irect = _rpythonic_function_(		"eel_irect_hits_irect", ctypes.c_int, [
	("rectangle_a",		EelIRect),
	("rectangle_b",		EelIRect),] )

eel_irect_offset_by = _rpythonic_function_(		"eel_irect_offset_by", EelIRect, [
	("rectangle",		EelIRect),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

eel_irect_scale_by = _rpythonic_function_(		"eel_irect_scale_by", EelIRect, [
	("rectangle",		EelIRect),
	("scale",		ctypes.c_double),] )

eel_irect_is_empty = _rpythonic_function_(		"eel_irect_is_empty", ctypes.c_int, [
	("rectangle",		ctypes.POINTER(EelIRect)),] )

eel_irect_contains_point = _rpythonic_function_(		"eel_irect_contains_point", ctypes.c_int, [
	("outer_rectangle",		EelIRect),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

eel_irect_get_width = _rpythonic_function_(		"eel_irect_get_width", ctypes.c_int, [
	("rectangle",		EelIRect),] )

eel_irect_get_height = _rpythonic_function_(		"eel_irect_get_height", ctypes.c_int, [
	("rectangle",		EelIRect),] )

eel_drect_union = _rpythonic_function_(		"eel_drect_union", ctypes.c_void_p, [
	("dest",		ctypes.POINTER(EelDRect)),
	("src1",		ctypes.POINTER(EelDRect)),
	("src2",		ctypes.POINTER(EelDRect)),] )

nautilus_icon_canvas_item_get_type = _rpythonic_function_(		"nautilus_icon_canvas_item_get_type", ctypes.c_uint, [] )

nautilus_icon_canvas_item_set_image = _rpythonic_function_(		"nautilus_icon_canvas_item_set_image", ctypes.c_void_p, [
	("item",		ctypes.POINTER(NautilusIconCanvasItem)),
	("image",		ctypes.POINTER(_GdkPixbuf)),] )

nautilus_icon_canvas_item_get_drag_surface = _rpythonic_function_(		"nautilus_icon_canvas_item_get_drag_surface", ctypes.POINTER(_cairo_surface), [
	("item",		ctypes.POINTER(NautilusIconCanvasItem)),] )

nautilus_icon_canvas_item_set_emblems = _rpythonic_function_(		"nautilus_icon_canvas_item_set_emblems", ctypes.c_void_p, [
	("item",		ctypes.POINTER(NautilusIconCanvasItem)),
	("emblem_pixbufs",		ctypes.POINTER(_GList)),] )

nautilus_icon_canvas_item_set_show_stretch_handles = _rpythonic_function_(		"nautilus_icon_canvas_item_set_show_stretch_handles", ctypes.c_void_p, [
	("item",		ctypes.POINTER(NautilusIconCanvasItem)),
	("show_stretch_handles",		ctypes.c_int),] )

nautilus_icon_canvas_item_set_attach_points = _rpythonic_function_(		"nautilus_icon_canvas_item_set_attach_points", ctypes.c_void_p, [
	("item",		ctypes.POINTER(NautilusIconCanvasItem)),
	("attach_points",		ctypes.POINTER(_GdkPoint)),
	("n_attach_points",		ctypes.c_int),] )

nautilus_icon_canvas_item_set_embedded_text_rect = _rpythonic_function_(		"nautilus_icon_canvas_item_set_embedded_text_rect", ctypes.c_void_p, [
	("item",		ctypes.POINTER(NautilusIconCanvasItem)),
	("text_rect",		ctypes.POINTER(_cairo_rectangle_int)),] )

nautilus_icon_canvas_item_set_embedded_text = _rpythonic_function_(		"nautilus_icon_canvas_item_set_embedded_text", ctypes.c_void_p, [
	("item",		ctypes.POINTER(NautilusIconCanvasItem)),
	("text",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_icon_canvas_item_get_max_text_width = _rpythonic_function_(		"nautilus_icon_canvas_item_get_max_text_width", ctypes.c_double, [
	("item",		ctypes.POINTER(NautilusIconCanvasItem)),] )

nautilus_icon_canvas_item_get_editable_text = _rpythonic_function_(		"nautilus_icon_canvas_item_get_editable_text", ctypes.POINTER(ctypes.c_char), [
	("icon_item",		ctypes.POINTER(NautilusIconCanvasItem)),] )

nautilus_icon_canvas_item_set_renaming = _rpythonic_function_(		"nautilus_icon_canvas_item_set_renaming", ctypes.c_void_p, [
	("icon_item",		ctypes.POINTER(NautilusIconCanvasItem)),
	("state",		ctypes.c_int),] )

nautilus_icon_canvas_item_hit_test_rectangle = _rpythonic_function_(		"nautilus_icon_canvas_item_hit_test_rectangle", ctypes.c_int, [
	("item",		ctypes.POINTER(NautilusIconCanvasItem)),
	("canvas_rect",		EelIRect),] )

nautilus_icon_canvas_item_hit_test_stretch_handles = _rpythonic_function_(		"nautilus_icon_canvas_item_hit_test_stretch_handles", ctypes.c_int, [
	("item",		ctypes.POINTER(NautilusIconCanvasItem)),
	("world_x",		ctypes.c_double),
	("world_y",		ctypes.c_double),
	("corner",		ctypes.POINTER(ctypes.c_int)),] )

nautilus_icon_canvas_item_invalidate_label = _rpythonic_function_(		"nautilus_icon_canvas_item_invalidate_label", ctypes.c_void_p, [
	("item",		ctypes.POINTER(NautilusIconCanvasItem)),] )

nautilus_icon_canvas_item_invalidate_label_size = _rpythonic_function_(		"nautilus_icon_canvas_item_invalidate_label_size", ctypes.c_void_p, [
	("item",		ctypes.POINTER(NautilusIconCanvasItem)),] )

nautilus_icon_canvas_item_get_icon_rectangle = _rpythonic_function_(		"nautilus_icon_canvas_item_get_icon_rectangle", EelDRect, [
	("item",		ctypes.POINTER(NautilusIconCanvasItem)),] )

nautilus_icon_canvas_item_get_text_rectangle = _rpythonic_function_(		"nautilus_icon_canvas_item_get_text_rectangle", EelDRect, [
	("item",		ctypes.POINTER(NautilusIconCanvasItem)),
	("for_layout",		ctypes.c_int),] )

nautilus_icon_canvas_item_get_bounds_for_layout = _rpythonic_function_(		"nautilus_icon_canvas_item_get_bounds_for_layout", ctypes.c_void_p, [
	("item",		ctypes.POINTER(NautilusIconCanvasItem)),
	("x1",		ctypes.POINTER(ctypes.c_double)),
	("y1",		ctypes.POINTER(ctypes.c_double)),
	("x2",		ctypes.POINTER(ctypes.c_double)),
	("y2",		ctypes.POINTER(ctypes.c_double)),] )

nautilus_icon_canvas_item_get_bounds_for_entire_item = _rpythonic_function_(		"nautilus_icon_canvas_item_get_bounds_for_entire_item", ctypes.c_void_p, [
	("item",		ctypes.POINTER(NautilusIconCanvasItem)),
	("x1",		ctypes.POINTER(ctypes.c_double)),
	("y1",		ctypes.POINTER(ctypes.c_double)),
	("x2",		ctypes.POINTER(ctypes.c_double)),
	("y2",		ctypes.POINTER(ctypes.c_double)),] )

nautilus_icon_canvas_item_update_bounds = _rpythonic_function_(		"nautilus_icon_canvas_item_update_bounds", ctypes.c_void_p, [
	("item",		ctypes.POINTER(NautilusIconCanvasItem)),
	("i2w_dx",		ctypes.c_double),
	("i2w_dy",		ctypes.c_double),] )

nautilus_icon_canvas_item_set_is_visible = _rpythonic_function_(		"nautilus_icon_canvas_item_set_is_visible", ctypes.c_void_p, [
	("item",		ctypes.POINTER(NautilusIconCanvasItem)),
	("visible",		ctypes.c_int),] )

nautilus_icon_canvas_item_set_entire_text = _rpythonic_function_(		"nautilus_icon_canvas_item_set_entire_text", ctypes.c_void_p, [
	("icon_item",		ctypes.POINTER(NautilusIconCanvasItem)),
	("entire_text",		ctypes.c_int),] )

nautilus_icon_dnd_init = _rpythonic_function_(		"nautilus_icon_dnd_init", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),] )

nautilus_icon_dnd_fini = _rpythonic_function_(		"nautilus_icon_dnd_fini", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),] )

nautilus_icon_dnd_begin_drag = _rpythonic_function_(		"nautilus_icon_dnd_begin_drag", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("actions",		ctypes.c_int),
	("button",		ctypes.c_int),
	("event",		ctypes.POINTER(_GdkEventMotion)),
	("start_x",		ctypes.c_int),
	("start_y",		ctypes.c_int),] )

nautilus_icon_dnd_end_drag = _rpythonic_function_(		"nautilus_icon_dnd_end_drag", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),] )

nautilus_icon_container_get_icon_by_uri = _rpythonic_function_(		"nautilus_icon_container_get_icon_by_uri", ctypes.POINTER(NautilusIcon), [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_icon_container_move_icon = _rpythonic_function_(		"nautilus_icon_container_move_icon", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("icon",		ctypes.POINTER(NautilusIcon)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("scale",		ctypes.c_double),
	("C_raise",		ctypes.c_int),
	("snap",		ctypes.c_int),
	("update_position",		ctypes.c_int),] )

nautilus_icon_container_select_list_unselect_others = _rpythonic_function_(		"nautilus_icon_container_select_list_unselect_others", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("icons",		ctypes.POINTER(_GList)),] )

nautilus_icon_container_get_icon_uri = _rpythonic_function_(		"nautilus_icon_container_get_icon_uri", ctypes.POINTER(ctypes.c_char), [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("icon",		ctypes.POINTER(NautilusIcon)),] )

nautilus_icon_container_get_icon_drop_target_uri = _rpythonic_function_(		"nautilus_icon_container_get_icon_drop_target_uri", ctypes.POINTER(ctypes.c_char), [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("icon",		ctypes.POINTER(NautilusIcon)),] )

nautilus_icon_container_update_icon = _rpythonic_function_(		"nautilus_icon_container_update_icon", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("icon",		ctypes.POINTER(NautilusIcon)),] )

nautilus_icon_container_has_stored_icon_positions = _rpythonic_function_(		"nautilus_icon_container_has_stored_icon_positions", ctypes.c_int, [
	("container",		ctypes.POINTER(NautilusIconContainer)),] )

nautilus_icon_container_scroll = _rpythonic_function_(		"nautilus_icon_container_scroll", ctypes.c_int, [
	("container",		ctypes.POINTER(NautilusIconContainer)),
	("delta_x",		ctypes.c_int),
	("delta_y",		ctypes.c_int),] )

nautilus_icon_container_update_scroll_region = _rpythonic_function_(		"nautilus_icon_container_update_scroll_region", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconContainer)),] )

eel_exit_if_self_checks_failed = _rpythonic_function_(		"eel_exit_if_self_checks_failed", ctypes.c_void_p, [] )

eel_before_check_function = _rpythonic_function_(		"eel_before_check_function", ctypes.c_void_p, [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

eel_after_check_function = _rpythonic_function_(		"eel_after_check_function", ctypes.c_void_p, [] )

eel_before_check = _rpythonic_function_(		"eel_before_check", ctypes.c_void_p, [
	("expression",		ctypes.POINTER(ctypes.c_char)),
	("file_name",		ctypes.POINTER(ctypes.c_char)),
	("line_number",		ctypes.c_int),] )

eel_after_check = _rpythonic_function_(		"eel_after_check", ctypes.c_void_p, [] )

eel_report_check_failure = _rpythonic_function_(		"eel_report_check_failure", ctypes.c_void_p, [
	("result",		ctypes.POINTER(ctypes.c_char)),
	("expected",		ctypes.POINTER(ctypes.c_char)),] )

eel_check_boolean_result = _rpythonic_function_(		"eel_check_boolean_result", ctypes.c_void_p, [
	("result",		ctypes.c_int),
	("expected_value",		ctypes.c_int),] )

eel_check_integer_result = _rpythonic_function_(		"eel_check_integer_result", ctypes.c_void_p, [
	("result",		ctypes.c_long),
	("expected_value",		ctypes.c_long),] )

eel_check_double_result = _rpythonic_function_(		"eel_check_double_result", ctypes.c_void_p, [
	("result",		ctypes.c_double),
	("expected_value",		ctypes.c_double),] )

eel_check_rectangle_result = _rpythonic_function_(		"eel_check_rectangle_result", ctypes.c_void_p, [
	("result",		EelIRect),
	("expected_x0",		ctypes.c_int),
	("expected_y0",		ctypes.c_int),
	("expected_x1",		ctypes.c_int),
	("expected_y1",		ctypes.c_int),] )

eel_check_string_result = _rpythonic_function_(		"eel_check_string_result", ctypes.c_void_p, [
	("result",		ctypes.POINTER(ctypes.c_char)),
	("expected_value",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_run_lib_self_checks = _rpythonic_function_(		"nautilus_run_lib_self_checks", ctypes.c_void_p, [] )

nautilus_self_check_file_utilities = _rpythonic_function_(		"nautilus_self_check_file_utilities", ctypes.c_void_p, [] )

nautilus_self_check_file_operations = _rpythonic_function_(		"nautilus_self_check_file_operations", ctypes.c_void_p, [] )

nautilus_self_check_directory = _rpythonic_function_(		"nautilus_self_check_directory", ctypes.c_void_p, [] )

nautilus_self_check_file = _rpythonic_function_(		"nautilus_self_check_file", ctypes.c_void_p, [] )

nautilus_self_check_icon_container = _rpythonic_function_(		"nautilus_self_check_icon_container", ctypes.c_void_p, [] )

add_real_directory = _rpythonic_function_(		"add_real_directory", ctypes.c_void_p, [
	("merged_directory",		ctypes.POINTER(NautilusMergedDirectory)),
	("real_directory",		ctypes.POINTER(NautilusDirectory)),] )

nautilus_merged_directory_get_type = _rpythonic_function_(		"nautilus_merged_directory_get_type", ctypes.c_uint, [] )

remove_real_directory = _rpythonic_function_(		"remove_real_directory", ctypes.c_void_p, [
	("merged_directory",		ctypes.POINTER(NautilusMergedDirectory)),
	("real_directory",		ctypes.POINTER(NautilusDirectory)),] )

nautilus_merged_directory_add_real_directory = _rpythonic_function_(		"nautilus_merged_directory_add_real_directory", ctypes.c_void_p, [
	("merged_directory",		ctypes.POINTER(NautilusMergedDirectory)),
	("real_directory",		ctypes.POINTER(NautilusDirectory)),] )

nautilus_merged_directory_remove_real_directory = _rpythonic_function_(		"nautilus_merged_directory_remove_real_directory", ctypes.c_void_p, [
	("merged_directory",		ctypes.POINTER(NautilusMergedDirectory)),
	("real_directory",		ctypes.POINTER(NautilusDirectory)),] )

nautilus_merged_directory_get_real_directories = _rpythonic_function_(		"nautilus_merged_directory_get_real_directories", ctypes.POINTER(_GList), [
	("merged_directory",		ctypes.POINTER(NautilusMergedDirectory)),] )

nautilus_metadata_get_id = _rpythonic_function_(		"nautilus_metadata_get_id", ctypes.c_uint, [
	("metadata",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_mime_application_chooser_get_type = _rpythonic_function_(		"nautilus_mime_application_chooser_get_type", ctypes.c_uint, [] )

nautilus_mime_application_chooser_new = _rpythonic_function_(		"nautilus_mime_application_chooser_new", ctypes.POINTER(_GtkWidget), [
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("files",		ctypes.POINTER(_GList)),
	("mime_type",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_module_setup = _rpythonic_function_(		"nautilus_module_setup", ctypes.c_void_p, [] )

nautilus_module_get_extensions_for_type = _rpythonic_function_(		"nautilus_module_get_extensions_for_type", ctypes.POINTER(_GList), [
	("C_type",		ctypes.c_uint),] )

nautilus_module_extension_list_free = _rpythonic_function_(		"nautilus_module_extension_list_free", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GList)),] )

nautilus_module_add_type = _rpythonic_function_(		"nautilus_module_add_type", ctypes.c_void_p, [
	("C_type",		ctypes.c_uint),] )

NautilusApplicationChoiceCallback = _rpythonic_function_(		"NautilusApplicationChoiceCallback", ctypes.c_void_p, [
	("application",		ctypes.POINTER(_GAppInfo)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_launch_application = _rpythonic_function_(		"nautilus_launch_application", ctypes.c_void_p, [
	("application",		ctypes.POINTER(_GAppInfo)),
	("files",		ctypes.POINTER(_GList)),
	("parent_window",		ctypes.POINTER(_GtkWindow)),] )

nautilus_launch_application_by_uri = _rpythonic_function_(		"nautilus_launch_application_by_uri", ctypes.c_void_p, [
	("application",		ctypes.POINTER(_GAppInfo)),
	("uris",		ctypes.POINTER(_GList)),
	("parent_window",		ctypes.POINTER(_GtkWindow)),] )

nautilus_launch_application_for_mount = _rpythonic_function_(		"nautilus_launch_application_for_mount", ctypes.c_void_p, [
	("app_info",		ctypes.POINTER(_GAppInfo)),
	("mount",		ctypes.POINTER(_GMount)),
	("parent_window",		ctypes.POINTER(_GtkWindow)),] )

nautilus_launch_application_from_command_array = _rpythonic_function_(		"nautilus_launch_application_from_command_array", ctypes.c_void_p, [
	("screen",		ctypes.POINTER(_GdkScreen)),
	("command_string",		ctypes.POINTER(ctypes.c_char)),
	("use_terminal",		ctypes.c_int),
	("parameters",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

nautilus_launch_desktop_file = _rpythonic_function_(		"nautilus_launch_desktop_file", ctypes.c_void_p, [
	("screen",		ctypes.POINTER(_GdkScreen)),
	("desktop_file_uri",		ctypes.POINTER(ctypes.c_char)),
	("parameter_uris",		ctypes.POINTER(_GList)),
	("parent_window",		ctypes.POINTER(_GtkWindow)),] )

nautilus_progress_info_get_type = _rpythonic_function_(		"nautilus_progress_info_get_type", ctypes.c_uint, [] )

nautilus_progress_info_new = _rpythonic_function_(		"nautilus_progress_info_new", ctypes.POINTER(_NautilusProgressInfo), [] )

nautilus_get_all_progress_info = _rpythonic_function_(		"nautilus_get_all_progress_info", ctypes.POINTER(_GList), [] )

nautilus_progress_info_get_status = _rpythonic_function_(		"nautilus_progress_info_get_status", ctypes.POINTER(ctypes.c_char), [
	("info",		ctypes.POINTER(_NautilusProgressInfo)),] )

nautilus_progress_info_get_details = _rpythonic_function_(		"nautilus_progress_info_get_details", ctypes.POINTER(ctypes.c_char), [
	("info",		ctypes.POINTER(_NautilusProgressInfo)),] )

nautilus_progress_info_get_progress = _rpythonic_function_(		"nautilus_progress_info_get_progress", ctypes.c_double, [
	("info",		ctypes.POINTER(_NautilusProgressInfo)),] )

nautilus_progress_info_get_cancellable = _rpythonic_function_(		"nautilus_progress_info_get_cancellable", ctypes.POINTER(_GCancellable), [
	("info",		ctypes.POINTER(_NautilusProgressInfo)),] )

nautilus_progress_info_cancel = _rpythonic_function_(		"nautilus_progress_info_cancel", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_NautilusProgressInfo)),] )

nautilus_progress_info_get_is_started = _rpythonic_function_(		"nautilus_progress_info_get_is_started", ctypes.c_int, [
	("info",		ctypes.POINTER(_NautilusProgressInfo)),] )

nautilus_progress_info_get_is_finished = _rpythonic_function_(		"nautilus_progress_info_get_is_finished", ctypes.c_int, [
	("info",		ctypes.POINTER(_NautilusProgressInfo)),] )

nautilus_progress_info_get_is_paused = _rpythonic_function_(		"nautilus_progress_info_get_is_paused", ctypes.c_int, [
	("info",		ctypes.POINTER(_NautilusProgressInfo)),] )

nautilus_progress_info_start = _rpythonic_function_(		"nautilus_progress_info_start", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_NautilusProgressInfo)),] )

nautilus_progress_info_finish = _rpythonic_function_(		"nautilus_progress_info_finish", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_NautilusProgressInfo)),] )

nautilus_progress_info_pause = _rpythonic_function_(		"nautilus_progress_info_pause", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_NautilusProgressInfo)),] )

nautilus_progress_info_resume = _rpythonic_function_(		"nautilus_progress_info_resume", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_NautilusProgressInfo)),] )

nautilus_progress_info_set_status = _rpythonic_function_(		"nautilus_progress_info_set_status", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_NautilusProgressInfo)),
	("status",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_progress_info_take_status = _rpythonic_function_(		"nautilus_progress_info_take_status", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_NautilusProgressInfo)),
	("status",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_progress_info_set_details = _rpythonic_function_(		"nautilus_progress_info_set_details", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_NautilusProgressInfo)),
	("details",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_progress_info_take_details = _rpythonic_function_(		"nautilus_progress_info_take_details", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_NautilusProgressInfo)),
	("details",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_progress_info_set_progress = _rpythonic_function_(		"nautilus_progress_info_set_progress", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_NautilusProgressInfo)),
	("current",		ctypes.c_double),
	("total",		ctypes.c_double),] )

nautilus_progress_info_pulse_progress = _rpythonic_function_(		"nautilus_progress_info_pulse_progress", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_NautilusProgressInfo)),] )

nautilus_progress_info_manager_get_type = _rpythonic_function_(		"nautilus_progress_info_manager_get_type", ctypes.c_uint, [] )

nautilus_progress_info_manager_new = _rpythonic_function_(		"nautilus_progress_info_manager_new", ctypes.POINTER(_NautilusProgressInfoManager), [] )

nautilus_progress_info_manager_add_new_info = _rpythonic_function_(		"nautilus_progress_info_manager_add_new_info", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_NautilusProgressInfoManager)),
	("info",		ctypes.POINTER(_NautilusProgressInfo)),] )

nautilus_progress_info_manager_get_all_infos = _rpythonic_function_(		"nautilus_progress_info_manager_get_all_infos", ctypes.POINTER(_GList), [
	("C_self",		ctypes.POINTER(_NautilusProgressInfoManager)),] )

nautilus_recent_add_file = _rpythonic_function_(		"nautilus_recent_add_file", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),
	("application",		ctypes.POINTER(_GAppInfo)),] )

nautilus_vfs_file_get_type = _rpythonic_function_(		"nautilus_vfs_file_get_type", ctypes.c_uint, [] )

nautilus_saved_search_file_get_type = _rpythonic_function_(		"nautilus_saved_search_file_get_type", ctypes.c_uint, [] )

nautilus_search_directory_file_get_type = _rpythonic_function_(		"nautilus_search_directory_file_get_type", ctypes.c_uint, [] )

nautilus_search_directory_file_update_display_name = _rpythonic_function_(		"nautilus_search_directory_file_update_display_name", ctypes.c_void_p, [
	("search_file",		ctypes.POINTER(NautilusSearchDirectoryFile)),] )

set_query = _rpythonic_function_(		"set_query", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(NautilusSearchEngine)),
	("query",		ctypes.POINTER(NautilusQuery)),] )

hits_added = _rpythonic_function_(		"hits_added", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(NautilusSearchEngine)),
	("hits",		ctypes.POINTER(_GList)),] )

hits_subtracted = _rpythonic_function_(		"hits_subtracted", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(NautilusSearchEngine)),
	("hits",		ctypes.POINTER(_GList)),] )

finished = _rpythonic_function_(		"finished", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(NautilusSearchEngine)),] )

nautilus_search_engine_get_type = _rpythonic_function_(		"nautilus_search_engine_get_type", ctypes.c_uint, [] )

nautilus_search_engine_enabled = _rpythonic_function_(		"nautilus_search_engine_enabled", ctypes.c_int, [] )

nautilus_search_engine_new = _rpythonic_function_(		"nautilus_search_engine_new", ctypes.POINTER(NautilusSearchEngine), [] )

nautilus_search_engine_set_query = _rpythonic_function_(		"nautilus_search_engine_set_query", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(NautilusSearchEngine)),
	("query",		ctypes.POINTER(NautilusQuery)),] )

nautilus_search_engine_start = _rpythonic_function_(		"nautilus_search_engine_start", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(NautilusSearchEngine)),] )

nautilus_search_engine_stop = _rpythonic_function_(		"nautilus_search_engine_stop", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(NautilusSearchEngine)),] )

nautilus_search_engine_hits_added = _rpythonic_function_(		"nautilus_search_engine_hits_added", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(NautilusSearchEngine)),
	("hits",		ctypes.POINTER(_GList)),] )

nautilus_search_engine_hits_subtracted = _rpythonic_function_(		"nautilus_search_engine_hits_subtracted", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(NautilusSearchEngine)),
	("hits",		ctypes.POINTER(_GList)),] )

nautilus_search_engine_finished = _rpythonic_function_(		"nautilus_search_engine_finished", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(NautilusSearchEngine)),] )

nautilus_search_engine_error = _rpythonic_function_(		"nautilus_search_engine_error", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(NautilusSearchEngine)),
	("error_message",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_search_engine_simple_get_type = _rpythonic_function_(		"nautilus_search_engine_simple_get_type", ctypes.c_uint, [] )

nautilus_search_engine_simple_new = _rpythonic_function_(		"nautilus_search_engine_simple_new", ctypes.POINTER(NautilusSearchEngine), [] )

nautilus_search_engine_tracker_get_type = _rpythonic_function_(		"nautilus_search_engine_tracker_get_type", ctypes.c_uint, [] )

nautilus_search_engine_tracker_new = _rpythonic_function_(		"nautilus_search_engine_tracker_new", ctypes.POINTER(NautilusSearchEngine), [] )

nautilus_selection_canvas_item_get_type = _rpythonic_function_(		"nautilus_selection_canvas_item_get_type", ctypes.c_uint, [] )

nautilus_selection_canvas_item_fade_out = _rpythonic_function_(		"nautilus_selection_canvas_item_fade_out", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_NautilusSelectionCanvasItem)),
	("transition_time",		ctypes.c_uint),] )

nautilus_signaller_get_current = _rpythonic_function_(		"nautilus_signaller_get_current", ctypes.POINTER(_GObject), [] )

nautilus_create_thumbnail = _rpythonic_function_(		"nautilus_create_thumbnail", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_can_thumbnail = _rpythonic_function_(		"nautilus_can_thumbnail", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_can_thumbnail_internally = _rpythonic_function_(		"nautilus_can_thumbnail_internally", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_thumbnail_is_mimetype_limited_by_size = _rpythonic_function_(		"nautilus_thumbnail_is_mimetype_limited_by_size", ctypes.c_int, [
	("mime_type",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_thumbnail_frame_image = _rpythonic_function_(		"nautilus_thumbnail_frame_image", ctypes.c_void_p, [
	("pixbuf",		ctypes.POINTER(ctypes.POINTER(_GdkPixbuf))),] )

nautilus_thumbnail_remove_from_queue = _rpythonic_function_(		"nautilus_thumbnail_remove_from_queue", ctypes.c_void_p, [
	("file_uri",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_thumbnail_prioritize = _rpythonic_function_(		"nautilus_thumbnail_prioritize", ctypes.c_void_p, [
	("file_uri",		ctypes.POINTER(ctypes.c_char)),] )

trash_state_changed = _rpythonic_function_(		"trash_state_changed", ctypes.c_void_p, [
	("trash_monitor",		ctypes.POINTER(NautilusTrashMonitor)),
	("new_state",		ctypes.c_int),] )

nautilus_trash_monitor_get_type = _rpythonic_function_(		"nautilus_trash_monitor_get_type", ctypes.c_uint, [] )

nautilus_trash_monitor_get = _rpythonic_function_(		"nautilus_trash_monitor_get", ctypes.POINTER(NautilusTrashMonitor), [] )

nautilus_trash_monitor_is_empty = _rpythonic_function_(		"nautilus_trash_monitor_is_empty", ctypes.c_int, [] )

nautilus_trash_monitor_get_icon = _rpythonic_function_(		"nautilus_trash_monitor_get_icon", ctypes.POINTER(_GIcon), [] )

nautilus_trash_monitor_add_new_trash_directories = _rpythonic_function_(		"nautilus_trash_monitor_add_new_trash_directories", ctypes.c_void_p, [] )

get_root_uri = _rpythonic_function_(		"get_root_uri", ctypes.POINTER(ctypes.c_char), [
	("dest",		ctypes.POINTER(_NautilusTreeViewDragDest)),] )

nautilus_tree_view_drag_dest_get_type = _rpythonic_function_(		"nautilus_tree_view_drag_dest_get_type", ctypes.c_uint, [] )

nautilus_tree_view_drag_dest_new = _rpythonic_function_(		"nautilus_tree_view_drag_dest_new", ctypes.POINTER(_NautilusTreeViewDragDest), [
	("tree_view",		ctypes.POINTER(_GtkTreeView)),] )

nautilus_ui_unmerge_ui = _rpythonic_function_(		"nautilus_ui_unmerge_ui", ctypes.c_void_p, [
	("ui_manager",		ctypes.POINTER(_GtkUIManager)),
	("merge_id",		ctypes.POINTER(ctypes.c_uint)),
	("action_group",		ctypes.POINTER(ctypes.POINTER(_GtkActionGroup))),] )

nautilus_ui_prepare_merge_ui = _rpythonic_function_(		"nautilus_ui_prepare_merge_ui", ctypes.c_void_p, [
	("ui_manager",		ctypes.POINTER(_GtkUIManager)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("merge_id",		ctypes.POINTER(ctypes.c_uint)),
	("action_group",		ctypes.POINTER(ctypes.POINTER(_GtkActionGroup))),] )

nautilus_action_from_menu_item = _rpythonic_function_(		"nautilus_action_from_menu_item", ctypes.POINTER(_GtkAction), [
	("item",		ctypes.POINTER(_NautilusMenuItem)),] )

nautilus_ui_get_menu_icon = _rpythonic_function_(		"nautilus_ui_get_menu_icon", ctypes.POINTER(_GdkPixbuf), [
	("icon_name",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_escape_action_name = _rpythonic_function_(		"nautilus_escape_action_name", ctypes.POINTER(ctypes.c_char), [
	("action_name",		ctypes.POINTER(ctypes.c_char)),
	("prefix",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_vfs_directory_get_type = _rpythonic_function_(		"nautilus_vfs_directory_get_type", ctypes.c_uint, [] )

nautilus_application_get_type = _rpythonic_function_(		"nautilus_application_get_type", ctypes.c_uint, [] )

nautilus_application_create_window = _rpythonic_function_(		"nautilus_application_create_window", ctypes.POINTER(NautilusWindow), [
	("application",		ctypes.POINTER(NautilusApplication)),
	("screen",		ctypes.POINTER(_GdkScreen)),] )

nautilus_application_open_location = _rpythonic_function_(		"nautilus_application_open_location", ctypes.c_void_p, [
	("application",		ctypes.POINTER(NautilusApplication)),
	("location",		ctypes.POINTER(_GFile)),
	("selection",		ctypes.POINTER(_GFile)),
	("startup_id",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_bookmark_list_get_type = _rpythonic_function_(		"nautilus_bookmark_list_get_type", ctypes.c_uint, [] )

nautilus_bookmark_list_new = _rpythonic_function_(		"nautilus_bookmark_list_new", ctypes.POINTER(NautilusBookmarkList), [] )

nautilus_bookmark_list_append = _rpythonic_function_(		"nautilus_bookmark_list_append", ctypes.c_void_p, [
	("bookmarks",		ctypes.POINTER(NautilusBookmarkList)),
	("bookmark",		ctypes.POINTER(NautilusBookmark)),] )

nautilus_bookmark_list_contains = _rpythonic_function_(		"nautilus_bookmark_list_contains", ctypes.c_int, [
	("bookmarks",		ctypes.POINTER(NautilusBookmarkList)),
	("bookmark",		ctypes.POINTER(NautilusBookmark)),] )

nautilus_bookmark_list_delete_item_at = _rpythonic_function_(		"nautilus_bookmark_list_delete_item_at", ctypes.c_void_p, [
	("bookmarks",		ctypes.POINTER(NautilusBookmarkList)),
	("index",		ctypes.c_uint),] )

nautilus_bookmark_list_delete_items_with_uri = _rpythonic_function_(		"nautilus_bookmark_list_delete_items_with_uri", ctypes.c_void_p, [
	("bookmarks",		ctypes.POINTER(NautilusBookmarkList)),
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_bookmark_list_insert_item = _rpythonic_function_(		"nautilus_bookmark_list_insert_item", ctypes.c_void_p, [
	("bookmarks",		ctypes.POINTER(NautilusBookmarkList)),
	("bookmark",		ctypes.POINTER(NautilusBookmark)),
	("index",		ctypes.c_uint),] )

nautilus_bookmark_list_length = _rpythonic_function_(		"nautilus_bookmark_list_length", ctypes.c_uint, [
	("bookmarks",		ctypes.POINTER(NautilusBookmarkList)),] )

nautilus_bookmark_list_item_at = _rpythonic_function_(		"nautilus_bookmark_list_item_at", ctypes.POINTER(NautilusBookmark), [
	("bookmarks",		ctypes.POINTER(NautilusBookmarkList)),
	("index",		ctypes.c_uint),] )

nautilus_bookmark_list_move_item = _rpythonic_function_(		"nautilus_bookmark_list_move_item", ctypes.c_void_p, [
	("bookmarks",		ctypes.POINTER(NautilusBookmarkList)),
	("index",		ctypes.c_uint),
	("destination",		ctypes.c_uint),] )

nautilus_bookmarks_window_new = _rpythonic_function_(		"nautilus_bookmarks_window_new", ctypes.POINTER(_GtkWindow), [
	("parent_window",		ctypes.POINTER(NautilusWindow)),
	("bookmarks",		ctypes.POINTER(NautilusBookmarkList)),] )

nautilus_connect_server_dialog_get_type = _rpythonic_function_(		"nautilus_connect_server_dialog_get_type", ctypes.c_uint, [] )

nautilus_connect_server_dialog_new = _rpythonic_function_(		"nautilus_connect_server_dialog_new", ctypes.POINTER(_GtkWidget), [
	("window",		ctypes.POINTER(NautilusWindow)),] )

nautilus_connect_server_dialog_display_location_async = _rpythonic_function_(		"nautilus_connect_server_dialog_display_location_async", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_NautilusConnectServerDialog)),
	("location",		ctypes.POINTER(_GFile)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_connect_server_dialog_display_location_finish = _rpythonic_function_(		"nautilus_connect_server_dialog_display_location_finish", ctypes.c_int, [
	("C_self",		ctypes.POINTER(_NautilusConnectServerDialog)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

nautilus_connect_server_dialog_fill_details_async = _rpythonic_function_(		"nautilus_connect_server_dialog_fill_details_async", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_NautilusConnectServerDialog)),
	("operation",		ctypes.POINTER(_GMountOperation)),
	("default_user",		ctypes.POINTER(ctypes.c_char)),
	("default_domain",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_connect_server_dialog_fill_details_finish = _rpythonic_function_(		"nautilus_connect_server_dialog_fill_details_finish", ctypes.c_int, [
	("C_self",		ctypes.POINTER(_NautilusConnectServerDialog)),
	("result",		ctypes.POINTER(_GAsyncResult)),] )

nautilus_connect_server_operation_get_type = _rpythonic_function_(		"nautilus_connect_server_operation_get_type", ctypes.c_uint, [] )

nautilus_connect_server_operation_new = _rpythonic_function_(		"nautilus_connect_server_operation_new", ctypes.POINTER(_GMountOperation), [
	("dialog",		ctypes.POINTER(_NautilusConnectServerDialog)),] )

nautilus_icon_view_get_type = _rpythonic_function_(		"nautilus_icon_view_get_type", ctypes.c_uint, [] )

nautilus_icon_view_compare_files = _rpythonic_function_(		"nautilus_icon_view_compare_files", ctypes.c_int, [
	("icon_view",		ctypes.POINTER(NautilusIconView)),
	("a",		ctypes.POINTER(NautilusFile)),
	("b",		ctypes.POINTER(NautilusFile)),] )

nautilus_icon_view_filter_by_screen = _rpythonic_function_(		"nautilus_icon_view_filter_by_screen", ctypes.c_void_p, [
	("icon_view",		ctypes.POINTER(NautilusIconView)),
	("filter",		ctypes.c_int),] )

nautilus_icon_view_register = _rpythonic_function_(		"nautilus_icon_view_register", ctypes.c_void_p, [] )

nautilus_icon_view_get_icon_container = _rpythonic_function_(		"nautilus_icon_view_get_icon_container", ctypes.POINTER(NautilusIconContainer), [
	("view",		ctypes.POINTER(NautilusIconView)),] )

nautilus_desktop_icon_view_get_type = _rpythonic_function_(		"nautilus_desktop_icon_view_get_type", ctypes.c_uint, [] )

nautilus_desktop_icon_view_register = _rpythonic_function_(		"nautilus_desktop_icon_view_register", ctypes.c_void_p, [] )

nautilus_desktop_item_properties_make_box = _rpythonic_function_(		"nautilus_desktop_item_properties_make_box", ctypes.POINTER(_GtkWidget), [
	("label_size_group",		ctypes.POINTER(_GtkSizeGroup)),
	("files",		ctypes.POINTER(_GList)),] )

nautilus_desktop_item_properties_should_show = _rpythonic_function_(		"nautilus_desktop_item_properties_should_show", ctypes.c_int, [
	("files",		ctypes.POINTER(_GList)),] )

nautilus_desktop_window_get_type = _rpythonic_function_(		"nautilus_desktop_window_get_type", ctypes.c_uint, [] )

nautilus_desktop_window_new = _rpythonic_function_(		"nautilus_desktop_window_new", ctypes.POINTER(NautilusDesktopWindow), [
	("application",		ctypes.POINTER(_GtkApplication)),
	("screen",		ctypes.POINTER(_GdkScreen)),] )

nautilus_desktop_window_loaded = _rpythonic_function_(		"nautilus_desktop_window_loaded", ctypes.c_int, [
	("window",		ctypes.POINTER(NautilusDesktopWindow)),] )

nautilus_empty_view_get_type = _rpythonic_function_(		"nautilus_empty_view_get_type", ctypes.c_uint, [] )

nautilus_empty_view_register = _rpythonic_function_(		"nautilus_empty_view_register", ctypes.c_void_p, [] )

nautilus_report_error_loading_directory = _rpythonic_function_(		"nautilus_report_error_loading_directory", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),
	("error",		ctypes.POINTER(_GError)),
	("parent_window",		ctypes.POINTER(_GtkWindow)),] )

nautilus_report_error_renaming_file = _rpythonic_function_(		"nautilus_report_error_renaming_file", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),
	("new_name",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(_GError)),
	("parent_window",		ctypes.POINTER(_GtkWindow)),] )

nautilus_report_error_setting_permissions = _rpythonic_function_(		"nautilus_report_error_setting_permissions", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),
	("error",		ctypes.POINTER(_GError)),
	("parent_window",		ctypes.POINTER(_GtkWindow)),] )

nautilus_report_error_setting_owner = _rpythonic_function_(		"nautilus_report_error_setting_owner", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),
	("error",		ctypes.POINTER(_GError)),
	("parent_window",		ctypes.POINTER(_GtkWindow)),] )

nautilus_report_error_setting_group = _rpythonic_function_(		"nautilus_report_error_setting_group", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),
	("error",		ctypes.POINTER(_GError)),
	("parent_window",		ctypes.POINTER(_GtkWindow)),] )

nautilus_rename_file = _rpythonic_function_(		"nautilus_rename_file", ctypes.c_void_p, [
	("file",		ctypes.POINTER(NautilusFile)),
	("new_name",		ctypes.POINTER(ctypes.c_char)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(NautilusFile),ctypes.POINTER(_GFile),ctypes.POINTER(_GError),ctypes.POINTER(ctypes.c_void_p),)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

nautilus_file_management_properties_dialog_show = _rpythonic_function_(		"nautilus_file_management_properties_dialog_show", ctypes.c_void_p, [
	("window",		ctypes.POINTER(_GtkWindow)),] )

nautilus_floating_bar_get_type = _rpythonic_function_(		"nautilus_floating_bar_get_type", ctypes.c_uint, [] )

nautilus_floating_bar_new = _rpythonic_function_(		"nautilus_floating_bar_new", ctypes.POINTER(_GtkWidget), [
	("label",		ctypes.POINTER(ctypes.c_char)),
	("show_spinner",		ctypes.c_int),] )

nautilus_floating_bar_set_label = _rpythonic_function_(		"nautilus_floating_bar_set_label", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_NautilusFloatingBar)),
	("label",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_floating_bar_set_show_spinner = _rpythonic_function_(		"nautilus_floating_bar_set_show_spinner", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_NautilusFloatingBar)),
	("show_spinner",		ctypes.c_int),] )

nautilus_floating_bar_add_action = _rpythonic_function_(		"nautilus_floating_bar_add_action", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_NautilusFloatingBar)),
	("stock_id",		ctypes.POINTER(ctypes.c_char)),
	("action_id",		ctypes.c_int),] )

nautilus_floating_bar_cleanup_actions = _rpythonic_function_(		"nautilus_floating_bar_cleanup_actions", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_NautilusFloatingBar)),] )

nautilus_freedesktop_dbus_start = _rpythonic_function_(		"nautilus_freedesktop_dbus_start", ctypes.c_void_p, [
	("app",		ctypes.POINTER(NautilusApplication)),] )

nautilus_freedesktop_dbus_stop = _rpythonic_function_(		"nautilus_freedesktop_dbus_stop", ctypes.c_void_p, [] )

nautilus_icon_view_container_get_type = _rpythonic_function_(		"nautilus_icon_view_container_get_type", ctypes.c_uint, [] )

nautilus_icon_view_container_construct = _rpythonic_function_(		"nautilus_icon_view_container_construct", ctypes.POINTER(NautilusIconContainer), [
	("icon_container",		ctypes.POINTER(NautilusIconViewContainer)),
	("view",		ctypes.POINTER(NautilusIconView)),] )

nautilus_icon_view_container_new = _rpythonic_function_(		"nautilus_icon_view_container_new", ctypes.POINTER(NautilusIconContainer), [
	("view",		ctypes.POINTER(NautilusIconView)),] )

nautilus_icon_view_container_set_sort_desktop = _rpythonic_function_(		"nautilus_icon_view_container_set_sort_desktop", ctypes.c_void_p, [
	("container",		ctypes.POINTER(NautilusIconViewContainer)),
	("desktop",		ctypes.c_int),] )

nautilus_image_properties_page_get_type = _rpythonic_function_(		"nautilus_image_properties_page_get_type", ctypes.c_uint, [] )

nautilus_image_properties_page_register = _rpythonic_function_(		"nautilus_image_properties_page_register", ctypes.c_void_p, [] )

nautilus_list_model_get_type = _rpythonic_function_(		"nautilus_list_model_get_type", ctypes.c_uint, [] )

subdirectory_unloaded = _rpythonic_function_(		"subdirectory_unloaded", ctypes.c_void_p, [
	("model",		ctypes.POINTER(NautilusListModel)),
	("subdirectory",		ctypes.POINTER(NautilusDirectory)),] )

nautilus_list_model_add_file = _rpythonic_function_(		"nautilus_list_model_add_file", ctypes.c_int, [
	("model",		ctypes.POINTER(NautilusListModel)),
	("file",		ctypes.POINTER(NautilusFile)),
	("directory",		ctypes.POINTER(NautilusDirectory)),] )

nautilus_list_model_file_changed = _rpythonic_function_(		"nautilus_list_model_file_changed", ctypes.c_void_p, [
	("model",		ctypes.POINTER(NautilusListModel)),
	("file",		ctypes.POINTER(NautilusFile)),
	("directory",		ctypes.POINTER(NautilusDirectory)),] )

nautilus_list_model_is_empty = _rpythonic_function_(		"nautilus_list_model_is_empty", ctypes.c_int, [
	("model",		ctypes.POINTER(NautilusListModel)),] )

nautilus_list_model_get_length = _rpythonic_function_(		"nautilus_list_model_get_length", ctypes.c_uint, [
	("model",		ctypes.POINTER(NautilusListModel)),] )

nautilus_list_model_remove_file = _rpythonic_function_(		"nautilus_list_model_remove_file", ctypes.c_void_p, [
	("model",		ctypes.POINTER(NautilusListModel)),
	("file",		ctypes.POINTER(NautilusFile)),
	("directory",		ctypes.POINTER(NautilusDirectory)),] )

nautilus_list_model_clear = _rpythonic_function_(		"nautilus_list_model_clear", ctypes.c_void_p, [
	("model",		ctypes.POINTER(NautilusListModel)),] )

nautilus_list_model_get_tree_iter_from_file = _rpythonic_function_(		"nautilus_list_model_get_tree_iter_from_file", ctypes.c_int, [
	("model",		ctypes.POINTER(NautilusListModel)),
	("file",		ctypes.POINTER(NautilusFile)),
	("directory",		ctypes.POINTER(NautilusDirectory)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),] )

nautilus_list_model_get_all_iters_for_file = _rpythonic_function_(		"nautilus_list_model_get_all_iters_for_file", ctypes.POINTER(_GList), [
	("model",		ctypes.POINTER(NautilusListModel)),
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_list_model_get_first_iter_for_file = _rpythonic_function_(		"nautilus_list_model_get_first_iter_for_file", ctypes.c_int, [
	("model",		ctypes.POINTER(NautilusListModel)),
	("file",		ctypes.POINTER(NautilusFile)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),] )

nautilus_list_model_set_should_sort_directories_first = _rpythonic_function_(		"nautilus_list_model_set_should_sort_directories_first", ctypes.c_void_p, [
	("model",		ctypes.POINTER(NautilusListModel)),
	("sort_directories_first",		ctypes.c_int),] )

nautilus_list_model_get_sort_column_id_from_attribute = _rpythonic_function_(		"nautilus_list_model_get_sort_column_id_from_attribute", ctypes.c_int, [
	("model",		ctypes.POINTER(NautilusListModel)),
	("attribute",		ctypes.c_uint),] )

nautilus_list_model_get_attribute_from_sort_column_id = _rpythonic_function_(		"nautilus_list_model_get_attribute_from_sort_column_id", ctypes.c_uint, [
	("model",		ctypes.POINTER(NautilusListModel)),
	("sort_column_id",		ctypes.c_int),] )

nautilus_list_model_sort_files = _rpythonic_function_(		"nautilus_list_model_sort_files", ctypes.c_void_p, [
	("model",		ctypes.POINTER(NautilusListModel)),
	("files",		ctypes.POINTER(ctypes.POINTER(_GList))),] )

nautilus_list_model_get_zoom_level_from_column_id = _rpythonic_function_(		"nautilus_list_model_get_zoom_level_from_column_id", ctypes.c_int, [
	("column",		ctypes.c_int),] )

nautilus_list_model_get_column_id_from_zoom_level = _rpythonic_function_(		"nautilus_list_model_get_column_id_from_zoom_level", ctypes.c_int, [
	("zoom_level",		ctypes.c_int),] )

nautilus_list_model_file_for_path = _rpythonic_function_(		"nautilus_list_model_file_for_path", ctypes.POINTER(NautilusFile), [
	("model",		ctypes.POINTER(NautilusListModel)),
	("path",		ctypes.POINTER(_GtkTreePath)),] )

nautilus_list_model_load_subdirectory = _rpythonic_function_(		"nautilus_list_model_load_subdirectory", ctypes.c_int, [
	("model",		ctypes.POINTER(NautilusListModel)),
	("path",		ctypes.POINTER(_GtkTreePath)),
	("directory",		ctypes.POINTER(ctypes.POINTER(NautilusDirectory))),] )

nautilus_list_model_unload_subdirectory = _rpythonic_function_(		"nautilus_list_model_unload_subdirectory", ctypes.c_void_p, [
	("model",		ctypes.POINTER(NautilusListModel)),
	("iter",		ctypes.POINTER(_GtkTreeIter)),] )

nautilus_list_model_set_drag_view = _rpythonic_function_(		"nautilus_list_model_set_drag_view", ctypes.c_void_p, [
	("model",		ctypes.POINTER(NautilusListModel)),
	("view",		ctypes.POINTER(_GtkTreeView)),
	("begin_x",		ctypes.c_int),
	("begin_y",		ctypes.c_int),] )

nautilus_list_model_get_drag_target_list = _rpythonic_function_(		"nautilus_list_model_get_drag_target_list", ctypes.POINTER(_GtkTargetList), [] )

nautilus_list_model_compare_func = _rpythonic_function_(		"nautilus_list_model_compare_func", ctypes.c_int, [
	("model",		ctypes.POINTER(NautilusListModel)),
	("file1",		ctypes.POINTER(NautilusFile)),
	("file2",		ctypes.POINTER(NautilusFile)),] )

nautilus_list_model_add_column = _rpythonic_function_(		"nautilus_list_model_add_column", ctypes.c_int, [
	("model",		ctypes.POINTER(NautilusListModel)),
	("column",		ctypes.POINTER(_NautilusColumn)),] )

nautilus_list_model_get_column_number = _rpythonic_function_(		"nautilus_list_model_get_column_number", ctypes.c_int, [
	("model",		ctypes.POINTER(NautilusListModel)),
	("column_name",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_list_model_subdirectory_done_loading = _rpythonic_function_(		"nautilus_list_model_subdirectory_done_loading", ctypes.c_void_p, [
	("model",		ctypes.POINTER(NautilusListModel)),
	("directory",		ctypes.POINTER(NautilusDirectory)),] )

nautilus_list_model_set_highlight_for_files = _rpythonic_function_(		"nautilus_list_model_set_highlight_for_files", ctypes.c_void_p, [
	("model",		ctypes.POINTER(NautilusListModel)),
	("files",		ctypes.POINTER(_GList)),] )

nautilus_list_view_get_type = _rpythonic_function_(		"nautilus_list_view_get_type", ctypes.c_uint, [] )

nautilus_list_view_register = _rpythonic_function_(		"nautilus_list_view_register", ctypes.c_void_p, [] )

nautilus_list_view_get_tree_view = _rpythonic_function_(		"nautilus_list_view_get_tree_view", ctypes.POINTER(_GtkTreeView), [
	("list_view",		ctypes.POINTER(NautilusListView)),] )

nautilus_location_bar_get_type = _rpythonic_function_(		"nautilus_location_bar_get_type", ctypes.c_uint, [] )

nautilus_location_bar_new = _rpythonic_function_(		"nautilus_location_bar_new", ctypes.POINTER(_GtkWidget), [] )

nautilus_location_bar_get_entry = _rpythonic_function_(		"nautilus_location_bar_get_entry", ctypes.POINTER(NautilusEntry), [
	("location_bar",		ctypes.POINTER(NautilusLocationBar)),] )

nautilus_location_bar_activate = _rpythonic_function_(		"nautilus_location_bar_activate", ctypes.c_void_p, [
	("bar",		ctypes.POINTER(NautilusLocationBar)),] )

nautilus_location_bar_set_location = _rpythonic_function_(		"nautilus_location_bar_set_location", ctypes.c_void_p, [
	("bar",		ctypes.POINTER(NautilusLocationBar)),
	("location",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_location_entry_get_type = _rpythonic_function_(		"nautilus_location_entry_get_type", ctypes.c_uint, [] )

nautilus_location_entry_new = _rpythonic_function_(		"nautilus_location_entry_new", ctypes.POINTER(_GtkWidget), [] )

nautilus_location_entry_set_special_text = _rpythonic_function_(		"nautilus_location_entry_set_special_text", ctypes.c_void_p, [
	("entry",		ctypes.POINTER(NautilusLocationEntry)),
	("special_text",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_location_entry_set_secondary_action = _rpythonic_function_(		"nautilus_location_entry_set_secondary_action", ctypes.c_void_p, [
	("entry",		ctypes.POINTER(NautilusLocationEntry)),
	("secondary_action",		ctypes.c_int),] )

nautilus_location_entry_update_current_location = _rpythonic_function_(		"nautilus_location_entry_update_current_location", ctypes.c_void_p, [
	("entry",		ctypes.POINTER(NautilusLocationEntry)),
	("path",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_mime_actions_get_required_file_attributes = _rpythonic_function_(		"nautilus_mime_actions_get_required_file_attributes", ctypes.c_int, [] )

nautilus_mime_get_default_application_for_file = _rpythonic_function_(		"nautilus_mime_get_default_application_for_file", ctypes.POINTER(_GAppInfo), [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_mime_get_applications_for_file = _rpythonic_function_(		"nautilus_mime_get_applications_for_file", ctypes.POINTER(_GList), [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_mime_get_default_application_for_files = _rpythonic_function_(		"nautilus_mime_get_default_application_for_files", ctypes.POINTER(_GAppInfo), [
	("files",		ctypes.POINTER(_GList)),] )

nautilus_mime_get_applications_for_files = _rpythonic_function_(		"nautilus_mime_get_applications_for_files", ctypes.POINTER(_GList), [
	("file",		ctypes.POINTER(_GList)),] )

nautilus_mime_file_opens_in_view = _rpythonic_function_(		"nautilus_mime_file_opens_in_view", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_mime_file_opens_in_external_app = _rpythonic_function_(		"nautilus_mime_file_opens_in_external_app", ctypes.c_int, [
	("file",		ctypes.POINTER(NautilusFile)),] )

nautilus_mime_activate_files = _rpythonic_function_(		"nautilus_mime_activate_files", ctypes.c_void_p, [
	("parent_window",		ctypes.POINTER(_GtkWindow)),
	("slot",		ctypes.POINTER(NautilusWindowSlot)),
	("files",		ctypes.POINTER(_GList)),
	("launch_directory",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("user_confirmation",		ctypes.c_int),] )

nautilus_mime_activate_file = _rpythonic_function_(		"nautilus_mime_activate_file", ctypes.c_void_p, [
	("parent_window",		ctypes.POINTER(_GtkWindow)),
	("slot_info",		ctypes.POINTER(NautilusWindowSlot)),
	("file",		ctypes.POINTER(NautilusFile)),
	("launch_directory",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),] )

nautilus_navigation_action_get_type = _rpythonic_function_(		"nautilus_navigation_action_get_type", ctypes.c_uint, [] )

nautilus_notebook_get_type = _rpythonic_function_(		"nautilus_notebook_get_type", ctypes.c_uint, [] )

tab_close_request = _rpythonic_function_(		"tab_close_request", ctypes.c_void_p, [
	("notebook",		ctypes.POINTER(_NautilusNotebook)),
	("slot",		ctypes.POINTER(NautilusWindowSlot)),] )

nautilus_notebook_add_tab = _rpythonic_function_(		"nautilus_notebook_add_tab", ctypes.c_int, [
	("nb",		ctypes.POINTER(_NautilusNotebook)),
	("slot",		ctypes.POINTER(NautilusWindowSlot)),
	("position",		ctypes.c_int),
	("jump_to",		ctypes.c_int),] )

nautilus_notebook_set_show_tabs = _rpythonic_function_(		"nautilus_notebook_set_show_tabs", ctypes.c_void_p, [
	("nb",		ctypes.POINTER(_NautilusNotebook)),
	("show_tabs",		ctypes.c_int),] )

nautilus_notebook_set_dnd_enabled = _rpythonic_function_(		"nautilus_notebook_set_dnd_enabled", ctypes.c_void_p, [
	("nb",		ctypes.POINTER(_NautilusNotebook)),
	("enabled",		ctypes.c_int),] )

nautilus_notebook_sync_tab_label = _rpythonic_function_(		"nautilus_notebook_sync_tab_label", ctypes.c_void_p, [
	("nb",		ctypes.POINTER(_NautilusNotebook)),
	("slot",		ctypes.POINTER(NautilusWindowSlot)),] )

nautilus_notebook_sync_loading = _rpythonic_function_(		"nautilus_notebook_sync_loading", ctypes.c_void_p, [
	("nb",		ctypes.POINTER(_NautilusNotebook)),
	("slot",		ctypes.POINTER(NautilusWindowSlot)),] )

nautilus_notebook_reorder_current_child_relative = _rpythonic_function_(		"nautilus_notebook_reorder_current_child_relative", ctypes.c_void_p, [
	("notebook",		ctypes.POINTER(_NautilusNotebook)),
	("offset",		ctypes.c_int),] )

nautilus_notebook_set_current_page_relative = _rpythonic_function_(		"nautilus_notebook_set_current_page_relative", ctypes.c_void_p, [
	("notebook",		ctypes.POINTER(_NautilusNotebook)),
	("offset",		ctypes.c_int),] )

nautilus_notebook_can_reorder_current_child_relative = _rpythonic_function_(		"nautilus_notebook_can_reorder_current_child_relative", ctypes.c_int, [
	("notebook",		ctypes.POINTER(_NautilusNotebook)),
	("offset",		ctypes.c_int),] )

nautilus_notebook_can_set_current_page_relative = _rpythonic_function_(		"nautilus_notebook_can_set_current_page_relative", ctypes.c_int, [
	("notebook",		ctypes.POINTER(_NautilusNotebook)),
	("offset",		ctypes.c_int),] )

path_clicked = _rpythonic_function_(		"path_clicked", ctypes.c_void_p, [
	("path_bar",		ctypes.POINTER(_NautilusPathBar)),
	("location",		ctypes.POINTER(_GFile)),] )

nautilus_path_bar_get_type = _rpythonic_function_(		"nautilus_path_bar_get_type", ctypes.c_uint, [] )

path_event = _rpythonic_function_(		"path_event", ctypes.c_void_p, [
	("path_bar",		ctypes.POINTER(_NautilusPathBar)),
	("event",		ctypes.POINTER(_GdkEventButton)),
	("location",		ctypes.POINTER(_GFile)),] )

nautilus_path_bar_set_path = _rpythonic_function_(		"nautilus_path_bar_set_path", ctypes.c_void_p, [
	("path_bar",		ctypes.POINTER(_NautilusPathBar)),
	("file",		ctypes.POINTER(_GFile)),] )

nautilus_path_bar_clear_buttons = _rpythonic_function_(		"nautilus_path_bar_clear_buttons", ctypes.c_void_p, [
	("path_bar",		ctypes.POINTER(_NautilusPathBar)),] )

nautilus_places_sidebar_get_type = _rpythonic_function_(		"nautilus_places_sidebar_get_type", ctypes.c_uint, [] )

nautilus_places_sidebar_new = _rpythonic_function_(		"nautilus_places_sidebar_new", ctypes.POINTER(_GtkWidget), [
	("window",		ctypes.POINTER(NautilusWindow)),] )

nautilus_previewer_get_type = _rpythonic_function_(		"nautilus_previewer_get_type", ctypes.c_uint, [] )

nautilus_previewer_get_singleton = _rpythonic_function_(		"nautilus_previewer_get_singleton", ctypes.POINTER(NautilusPreviewer), [] )

nautilus_previewer_call_show_file = _rpythonic_function_(		"nautilus_previewer_call_show_file", ctypes.c_void_p, [
	("previewer",		ctypes.POINTER(NautilusPreviewer)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("xid",		ctypes.c_uint),
	("close_if_already_visible",		ctypes.c_int),] )

nautilus_previewer_call_close = _rpythonic_function_(		"nautilus_previewer_call_close", ctypes.c_void_p, [
	("previewer",		ctypes.POINTER(NautilusPreviewer)),] )

nautilus_progress_info_widget_get_type = _rpythonic_function_(		"nautilus_progress_info_widget_get_type", ctypes.c_uint, [] )

nautilus_progress_info_widget_new = _rpythonic_function_(		"nautilus_progress_info_widget_new", ctypes.POINTER(_GtkWidget), [
	("info",		ctypes.POINTER(_NautilusProgressInfo)),] )

nautilus_progress_ui_handler_get_type = _rpythonic_function_(		"nautilus_progress_ui_handler_get_type", ctypes.c_uint, [] )

nautilus_progress_ui_handler_new = _rpythonic_function_(		"nautilus_progress_ui_handler_new", ctypes.POINTER(NautilusProgressUIHandler), [] )

nautilus_properties_window_get_type = _rpythonic_function_(		"nautilus_properties_window_get_type", ctypes.c_uint, [] )

nautilus_properties_window_present = _rpythonic_function_(		"nautilus_properties_window_present", ctypes.c_void_p, [
	("files",		ctypes.POINTER(_GList)),
	("parent_widget",		ctypes.POINTER(_GtkWidget)),
	("startup_id",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_run_self_checks = _rpythonic_function_(		"nautilus_run_self_checks", ctypes.c_void_p, [] )

nautilus_toolbar_get_type = _rpythonic_function_(		"nautilus_toolbar_get_type", ctypes.c_uint, [] )

nautilus_toolbar_new = _rpythonic_function_(		"nautilus_toolbar_new", ctypes.POINTER(_GtkWidget), [
	("action_group",		ctypes.POINTER(_GtkActionGroup)),] )

nautilus_toolbar_get_path_bar = _rpythonic_function_(		"nautilus_toolbar_get_path_bar", ctypes.POINTER(_GtkWidget), [
	("C_self",		ctypes.POINTER(_NautilusToolbar)),] )

nautilus_toolbar_get_location_bar = _rpythonic_function_(		"nautilus_toolbar_get_location_bar", ctypes.POINTER(_GtkWidget), [
	("C_self",		ctypes.POINTER(_NautilusToolbar)),] )

nautilus_toolbar_get_search_bar = _rpythonic_function_(		"nautilus_toolbar_get_search_bar", ctypes.POINTER(_GtkWidget), [
	("C_self",		ctypes.POINTER(_NautilusToolbar)),] )

nautilus_toolbar_set_show_main_bar = _rpythonic_function_(		"nautilus_toolbar_set_show_main_bar", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_NautilusToolbar)),
	("show_main_bar",		ctypes.c_int),] )

nautilus_toolbar_set_show_location_entry = _rpythonic_function_(		"nautilus_toolbar_set_show_location_entry", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_NautilusToolbar)),
	("show_location_entry",		ctypes.c_int),] )

nautilus_toolbar_set_show_search_bar = _rpythonic_function_(		"nautilus_toolbar_set_show_search_bar", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_NautilusToolbar)),
	("show_search_bar",		ctypes.c_int),] )

nautilus_trash_bar_get_type = _rpythonic_function_(		"nautilus_trash_bar_get_type", ctypes.c_uint, [] )

nautilus_trash_bar_new = _rpythonic_function_(		"nautilus_trash_bar_new", ctypes.POINTER(_GtkWidget), [
	("view",		ctypes.POINTER(NautilusView)),] )

nautilus_view_handle_netscape_url_drop = _rpythonic_function_(		"nautilus_view_handle_netscape_url_drop", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),
	("encoded_url",		ctypes.POINTER(ctypes.c_char)),
	("target_uri",		ctypes.POINTER(ctypes.c_char)),
	("action",		ctypes.c_int),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

nautilus_view_handle_uri_list_drop = _rpythonic_function_(		"nautilus_view_handle_uri_list_drop", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),
	("item_uris",		ctypes.POINTER(ctypes.c_char)),
	("target_uri",		ctypes.POINTER(ctypes.c_char)),
	("action",		ctypes.c_int),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

nautilus_view_handle_text_drop = _rpythonic_function_(		"nautilus_view_handle_text_drop", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),
	("text",		ctypes.POINTER(ctypes.c_char)),
	("target_uri",		ctypes.POINTER(ctypes.c_char)),
	("action",		ctypes.c_int),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

nautilus_view_handle_raw_drop = _rpythonic_function_(		"nautilus_view_handle_raw_drop", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),
	("raw_data",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),
	("target_uri",		ctypes.POINTER(ctypes.c_char)),
	("direct_save_uri",		ctypes.POINTER(ctypes.c_char)),
	("action",		ctypes.c_int),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

nautilus_view_drop_proxy_received_uris = _rpythonic_function_(		"nautilus_view_drop_proxy_received_uris", ctypes.c_void_p, [
	("view",		ctypes.POINTER(NautilusView)),
	("uris",		ctypes.POINTER(_GList)),
	("target_location",		ctypes.POINTER(ctypes.c_char)),
	("action",		ctypes.c_int),] )

supports_uri = _rpythonic_function_(		"supports_uri", ctypes.c_int, [
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("file_type",		ctypes.c_int),
	("mime_type",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_view_factory_register = _rpythonic_function_(		"nautilus_view_factory_register", ctypes.c_void_p, [
	("view_info",		ctypes.POINTER(_NautilusViewInfo)),] )

nautilus_view_factory_lookup = _rpythonic_function_(		"nautilus_view_factory_lookup", ctypes.POINTER(_NautilusViewInfo), [
	("C_id",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_view_factory_create = _rpythonic_function_(		"nautilus_view_factory_create", ctypes.POINTER(NautilusView), [
	("C_id",		ctypes.POINTER(ctypes.c_char)),
	("slot",		ctypes.POINTER(NautilusWindowSlot)),] )

nautilus_view_factory_view_supports_uri = _rpythonic_function_(		"nautilus_view_factory_view_supports_uri", ctypes.c_int, [
	("C_id",		ctypes.POINTER(ctypes.c_char)),
	("location",		ctypes.POINTER(_GFile)),
	("file_type",		ctypes.c_int),
	("mime_type",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_view_factory_get_views_for_uri = _rpythonic_function_(		"nautilus_view_factory_get_views_for_uri", ctypes.POINTER(_GList), [
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("file_type",		ctypes.c_int),
	("mime_type",		ctypes.POINTER(ctypes.c_char)),] )

nautilus_window_add_bookmark_for_current_location = _rpythonic_function_(		"nautilus_window_add_bookmark_for_current_location", ctypes.c_void_p, [
	("window",		ctypes.POINTER(NautilusWindow)),] )

nautilus_window_edit_bookmarks = _rpythonic_function_(		"nautilus_window_edit_bookmarks", ctypes.c_void_p, [
	("window",		ctypes.POINTER(NautilusWindow)),] )

nautilus_window_initialize_bookmarks_menu = _rpythonic_function_(		"nautilus_window_initialize_bookmarks_menu", ctypes.c_void_p, [
	("window",		ctypes.POINTER(NautilusWindow)),] )

nautilus_window_manage_views_close_slot = _rpythonic_function_(		"nautilus_window_manage_views_close_slot", ctypes.c_void_p, [
	("slot",		ctypes.POINTER(NautilusWindowSlot)),] )

nautilus_window_report_location_change = _rpythonic_function_(		"nautilus_window_report_location_change", ctypes.c_void_p, [
	("window",		ctypes.POINTER(NautilusWindow)),] )

NautilusBookmarkFailedCallback = _rpythonic_function_(		"NautilusBookmarkFailedCallback", ctypes.c_void_p, [
	("window",		ctypes.POINTER(NautilusWindow)),
	("bookmark",		ctypes.POINTER(NautilusBookmark)),] )

nautilus_window_load_view_as_menus = _rpythonic_function_(		"nautilus_window_load_view_as_menus", ctypes.c_void_p, [
	("window",		ctypes.POINTER(NautilusWindow)),] )

nautilus_window_load_extension_menus = _rpythonic_function_(		"nautilus_window_load_extension_menus", ctypes.c_void_p, [
	("window",		ctypes.POINTER(NautilusWindow)),] )

nautilus_window_get_slot_for_view = _rpythonic_function_(		"nautilus_window_get_slot_for_view", ctypes.POINTER(NautilusWindowSlot), [
	("window",		ctypes.POINTER(NautilusWindow)),
	("view",		ctypes.POINTER(NautilusView)),] )

nautilus_window_set_active_slot = _rpythonic_function_(		"nautilus_window_set_active_slot", ctypes.c_void_p, [
	("window",		ctypes.POINTER(NautilusWindow)),
	("slot",		ctypes.POINTER(NautilusWindowSlot)),] )

nautilus_window_sync_allow_stop = _rpythonic_function_(		"nautilus_window_sync_allow_stop", ctypes.c_void_p, [
	("window",		ctypes.POINTER(NautilusWindow)),
	("slot",		ctypes.POINTER(NautilusWindowSlot)),] )

nautilus_window_sync_title = _rpythonic_function_(		"nautilus_window_sync_title", ctypes.c_void_p, [
	("window",		ctypes.POINTER(NautilusWindow)),
	("slot",		ctypes.POINTER(NautilusWindowSlot)),] )

nautilus_window_sync_zoom_widgets = _rpythonic_function_(		"nautilus_window_sync_zoom_widgets", ctypes.c_void_p, [
	("window",		ctypes.POINTER(NautilusWindow)),] )

nautilus_window_sync_up_button = _rpythonic_function_(		"nautilus_window_sync_up_button", ctypes.c_void_p, [
	("window",		ctypes.POINTER(NautilusWindow)),] )

nautilus_window_create_toolbar_action_group = _rpythonic_function_(		"nautilus_window_create_toolbar_action_group", ctypes.POINTER(_GtkActionGroup), [
	("window",		ctypes.POINTER(NautilusWindow)),] )

nautilus_window_initialize_actions = _rpythonic_function_(		"nautilus_window_initialize_actions", ctypes.c_void_p, [
	("window",		ctypes.POINTER(NautilusWindow)),] )

nautilus_window_initialize_menus = _rpythonic_function_(		"nautilus_window_initialize_menus", ctypes.c_void_p, [
	("window",		ctypes.POINTER(NautilusWindow)),] )

nautilus_window_finalize_menus = _rpythonic_function_(		"nautilus_window_finalize_menus", ctypes.c_void_p, [
	("window",		ctypes.POINTER(NautilusWindow)),] )

nautilus_window_update_show_hide_menu_items = _rpythonic_function_(		"nautilus_window_update_show_hide_menu_items", ctypes.c_void_p, [
	("window",		ctypes.POINTER(NautilusWindow)),] )

nautilus_drag_slot_proxy_init = _rpythonic_function_(		"nautilus_drag_slot_proxy_init", ctypes.c_void_p, [
	("widget",		ctypes.POINTER(_GtkWidget)),
	("target_file",		ctypes.POINTER(NautilusFile)),
	("target_slot",		ctypes.POINTER(NautilusWindowSlot)),] )

nautilus_x_content_bar_get_type = _rpythonic_function_(		"nautilus_x_content_bar_get_type", ctypes.c_uint, [] )

nautilus_x_content_bar_new = _rpythonic_function_(		"nautilus_x_content_bar_new", ctypes.POINTER(_GtkWidget), [
	("mount",		ctypes.POINTER(_GMount)),
	("x_content_types",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )


_rpythonic_convert_structs_to_objects()

class _nice_callback_args_container_(object):
	'''	(required for pypy)
	wraps args in an object because pypy ctypes creates a weakref to wrap pyobject
	'''
	def __init__(self,args): self.args = args

class _nice_callback_(object):
	def __del__(self): pass		# for some reason this holds a reference to self
	def __init__(self, widget, func, args):
		import inspect
		self.widget = widget
		self.function = func
		self.args = args
		argspec = inspect.getargspec( func )
		self.num_c_args = len(argspec.args)
		self.num_user_args = len(args)

		n = len(argspec.args) - len(args)
		if not inspect.ismethod( func ): n += 1		# if not a bound-method
		self.cfunc_prototype = ctypes.CFUNCTYPE( ctypes.c_void_p, *([ctypes.c_void_p]*n) )
		g_signal_connect_data.change_argument_type( 'c_handler', self.cfunc_prototype )	# ugly workaround

		self.cfunc = self.cfunc_prototype( self.call )

		self.wrapped_args = _nice_callback_args_container_( args )
		userdata = ctypes.pointer( ctypes.py_object(self.wrapped_args) )
		self.userdata = userdata


	def call(self, *args):
		a = [ self.widget ]	# the first argument is always the widget the signal is attached to
		for i,arg in enumerate(args):
			if i == len(args)-1:
				ptr = ctypes.cast( arg, ctypes.POINTER(ctypes.py_object) )
				w = ptr.contents.value
				a += list(w.args)
			elif i:
				a.append( arg )
		self.function( *a )
		return 0	# pypy complains if None is returned


def connect( ptr, name, func, *args ):
	wrapper = _nice_callback_( ptr.pyobject, func, args )
	return g_signal_connect_data( ptr, name, wrapper.cfunc, wrapper.userdata )


cairo_rectangle_int = _cairo_rectangle_int

gtk_window_new.defaults[0] = GTK_WINDOW_TOPLEVEL

gtk_box_pack_start.defaults[2] = True		# expand
gtk_box_pack_start.defaults[3] = True		# fill
gtk_box_pack_end.defaults[2] = True		# expand
gtk_box_pack_end.defaults[3] = True		# fill

_RETURNS_CHARP_ = (
	gtk_accelerator_get_label,
	gtk_widget_path_iter_get_name,

	gtk_rc_get_theme_dir,
	gtk_rc_get_module_dir,
	gtk_rc_get_im_module_path,
	gtk_rc_get_im_module_file,

	gtk_icon_size_get_name,

	gtk_icon_source_get_filename,

	gtk_icon_source_get_icon_name,

	gtk_widget_get_name,

	gtk_widget_get_composite_name,

	gtk_widget_get_tooltip_text,
	gtk_widget_get_tooltip_markup,

	gtk_menu_get_accel_path,
	gtk_menu_get_title,


	gtk_action_get_name,
	gtk_action_get_accel_path,
	gtk_action_get_label,
	gtk_action_get_tooltip,
	gtk_action_group_get_name,
	gtk_action_group_translate_string,

	gtk_window_get_title,

	gtk_label_get_text,
	gtk_label_get_label,

	gtk_app_chooser_get_content_type,
	gtk_app_chooser_dialog_get_heading,

	gtk_tree_path_to_string,

	gtk_tree_model_get_string_from_iter,
	gtk_cell_area_get_current_path_string,

	gtk_tree_view_column_get_title,

	gtk_text_iter_get_slice,
	gtk_text_iter_get_text,
	gtk_text_iter_get_visible_slice,
	gtk_text_iter_get_visible_text,

	gtk_editable_get_chars,

	gtk_entry_buffer_get_text,

	gtk_combo_box_get_title,
	gtk_combo_box_text_get_active_text,
	gtk_entry_get_text,
	gtk_entry_get_icon_name,
	gtk_entry_get_icon_tooltip_text,
	gtk_entry_get_icon_tooltip_markup,

	gtk_app_chooser_button_get_heading,

	gtk_frame_get_label,

	gtk_assistant_get_page_title,

	gtk_builder_get_translation_domain,

	gtk_buildable_get_name,

	gtk_button_get_label,

	gtk_menu_item_get_accel_path,

	gtk_clipboard_wait_for_text,

	gtk_color_button_get_title,

	gtk_color_selection_palette_to_string,

	gtk_expander_get_label,

	gtk_file_filter_get_name,
	gtk_file_chooser_get_filename,
	gtk_file_chooser_get_uri,
	gtk_file_chooser_get_current_folder_uri,

	gtk_file_chooser_get_preview_filename,
	gtk_file_chooser_get_preview_uri,
	gtk_file_chooser_button_get_title,

	gtk_font_button_get_title,

	gtk_font_button_get_font_name,
	gtk_font_selection_get_font_name,
	gtk_font_selection_get_preview_text,

	gtk_font_selection_dialog_get_font_name,
	gtk_font_selection_dialog_get_preview_text,

	gtk_icon_theme_get_example_icon_name,

	gtk_icon_info_get_filename,
	gtk_icon_info_get_display_name,

	gtk_link_button_get_uri,

	gtk_tool_button_get_label,
	gtk_tool_button_get_icon_name,

	gtk_notebook_get_group_name,
	gtk_notebook_get_tab_label_text,
	gtk_notebook_get_menu_label_text,

	gtk_numerable_icon_get_label,
	gtk_numerable_icon_get_background_icon_name,

	gtk_paper_size_get_name,
	gtk_paper_size_get_ppd_name,

	gtk_print_settings_get_printer,
	gtk_print_settings_get_media_type,
	gtk_print_operation_get_status_string,

	gtk_progress_bar_get_text,

	gtk_recent_info_get_uri,
	gtk_recent_info_get_description,
	gtk_recent_info_get_mime_type,
	gtk_recent_info_last_application,
	gtk_recent_info_get_short_name,
	gtk_recent_info_get_uri_display,

	gtk_recent_filter_get_name,
	gtk_recent_chooser_get_current_uri,
	gtk_status_icon_get_icon_name,

	gtk_status_icon_get_title,
	gtk_status_icon_get_tooltip_text,

	gtk_text_mark_get_name,

	gtk_text_buffer_get_text,
	gtk_text_buffer_get_slice,

	gtk_tool_item_group_get_label,

	gdk_display_get_name,
	gdk_rgba_to_string,
	gdk_pixbuf_format_get_name,
	gdk_keyval_name,
)

for func in _RETURNS_CHARP_:
	func.return_wrapper = lambda pointer=None: _CHARP2STRING(pointer)





for o in (GtkVBox, GtkHBox): o._rpythonic_parent_classes_.append( GtkBox )
for o in (GtkCheckButton,): o._rpythonic_parent_classes_.append( GtkToggleButton )
for o in (GtkHScale, GtkVScale): o._rpythonic_parent_classes_.append( GtkScale )
for o in (GtkCheckButton,GtkToggleButton, GtkColorButton): o._rpythonic_parent_classes_.append( GtkButton )
for o in (GtkVPaned, GtkHPaned): o._rpythonic_parent_classes_.append( GtkPaned )

GTK_WIDGET_CLASSES = {
	GtkButton : gtk_button_new_with_label,
	GtkAdjustment : gtk_adjustment_new,
	GtkHScale : gtk_hscale_new,
	GtkVScale : gtk_vscale_new,
	GtkEntry : gtk_entry_new,
	GtkLabel : gtk_label_new,

	GtkToggleButton : gtk_toggle_button_new_with_label,
	GtkCheckButton : gtk_check_button_new_with_label,
	GtkSwitch : gtk_switch_new,

	GtkComboBox : gtk_combo_box_new,
	GtkComboBoxText : gtk_combo_box_text_new,

	GtkSpinButton : gtk_spin_button_new,

	GtkSeparator : gtk_separator_new,
	GtkHSeparator : gtk_hseparator_new,
	GtkVSeparator : gtk_vseparator_new,

	GtkVolumeButton : gtk_volume_button_new,
	GtkToolPalette : gtk_tool_palette_new,
	GtkToolItemGroup : gtk_tool_item_group_new,
	GtkTextView : gtk_text_view_new,
	GtkTable : gtk_table_new,
	GtkStatusbar : gtk_statusbar_new,
	GtkSpinner : gtk_spinner_new,

	GtkViewport : gtk_viewport_new,
	GtkScaleButton : gtk_scale_button_new,
	GtkRadioToolButton : gtk_radio_tool_button_new,
	GtkToggleToolButton : gtk_toggle_tool_button_new,
	GtkRadioButton : gtk_radio_button_new,

	GtkProgressBar : gtk_progress_bar_new,

	GtkMenuToolButton : gtk_menu_tool_button_new,
	GtkToolButton : gtk_tool_button_new,
	GtkLinkButton : gtk_link_button_new,

	GtkScrollbar : gtk_scrollbar_new,
	GtkScale : gtk_scale_new,
	GtkFontButton : gtk_font_button_new,

	GtkFileChooserButton : gtk_file_chooser_button_new,
	GtkColorSelection : gtk_color_selection_new,
	GtkColorButton : gtk_color_button_new_with_color,
	GtkHSV : gtk_hsv_new,

	GtkCalendar : gtk_calendar_new,
	GtkArrow : gtk_arrow_new,
}

GTK_CONTAINER_CLASSES = {
	GtkEventBox : gtk_event_box_new,
	GtkExpander : gtk_expander_new,
	GtkFixed : gtk_fixed_new,
	GtkFrame : gtk_frame_new,
	GtkWindow : gtk_window_new,
	GtkVBox : gtk_vbox_new,
	GtkHBox : gtk_hbox_new,
	GtkNotebook : gtk_notebook_new,
	GtkScrolledWindow : gtk_scrolled_window_new,

	GtkTreeView : gtk_tree_view_new,
	GtkDrawingArea : gtk_drawing_area_new,

	GtkVPaned : gtk_vpaned_new,
	GtkHPaned : gtk_hpaned_new,

	GtkGrid : gtk_grid_new,
	GtkOffscreenWindow : gtk_offscreen_window_new,

	GtkToolbar : gtk_toolbar_new,
	GtkMenuBar : gtk_menu_bar_new,

}
if 'GtkSocket' in globals():	# this is missing with Clutter
	GTK_WIDGET_CLASSES[ GtkSocket ] = gtk_socket_new

if 'ClutterActor' in globals():
	def _clutter_actor_animate_helper(self, atype, ms, **kw):
		anims = {}
		for prop in kw:
			val = GValue()
			gtype = g_type_from_name('gdouble')	# TODO other types
			assert gtype
			val = g_value_init( val, gtype )
			val.set_double( kw[prop] )

			if _ISPYTHON2: gprop = ctypes.pointer(ctypes.c_char_p(prop))
			else: gprop = ctypes.pointer(ctypes.c_char_p(prop.encode('utf-8')))

			anims[prop] = self.animatev(
				atype, ms,
				1, #num properties
				prop, val,
			)
		return anims
	ClutterActor.animate = _clutter_actor_animate_helper

	def _get_(self):
		x = ctypes.pointer( ctypes.c_double() )
		y = ctypes.pointer( ctypes.c_double() )
		self.clutter_actor_get_scale( x, y )
		return x.contents.value, y.contents.value
	ClutterActor.get_scale = _get_
	def _get_(self):
		x = ctypes.pointer( ctypes.c_double() )
		y = ctypes.pointer( ctypes.c_double() )
		self.clutter_actor_get_size( x, y )
		return x.contents.value, y.contents.value
	ClutterActor.get_size = _get_

for d in (GTK_WIDGET_CLASSES, GTK_CONTAINER_CLASSES):
	for o in d:
		o._rpythonic_parent_classes_.append( GtkWidget )
		o._rpythonic_parent_classes_.append( GtkContainer )
		d[ o ].return_wrapper = o
		s = "lambda *args, **kw: %s(*args, **kw)"%d[o].name
		globals()[ o.__name__[3:] ] = eval(s)


def rgb2hsv( r,g,b ):
	h = ctypes.pointer( ctypes.c_double() )
	s = ctypes.pointer( ctypes.c_double() )
	v = ctypes.pointer( ctypes.c_double() )
	gtk_rgb_to_hsv( r,g,b, h,s,v )
	return h.contents.value, s.contents.value, v.contents.value

def hsv2rgb( h,s,v ):
	r = ctypes.pointer( ctypes.c_double() )
	g = ctypes.pointer( ctypes.c_double() )
	b = ctypes.pointer( ctypes.c_double() )
	gtk_hsv_to_rgb( h,s,v, r,g,b )
	return r.contents.value, g.contents.value, b.contents.value

def rgb2gdk( r, g, b ): return GdkColor(0,int(r*65535),int(g*65535),int(b*65535))
def gdk2rgb( c ): return (c.red/65536.0, c.green/65536.0, c.blue/65536.0)


_rpythonic_setup_return_wrappers()
_rpythonic_make_nice_global_enums_()
_rpythonic_clean_up_missing_functions_()
_rpythonic_strip_prefixes_(['GTK_', 'gtk_'])
