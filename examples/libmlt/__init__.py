## generated by RPythonic 0.4.4e
## http://code.google.com/p/rpythonic/
import os, sys, ctypes, inspect
__os = os
__sys = sys
__inspect = inspect

PYTHON_RESERVED_KEYWORDS = 'for while in as global with try except lambda return raise if else elif eval exec and not or break continue finally print yield del def class assert from is pass'.split()


IS32BIT = (ctypes.sizeof(ctypes.c_void_p)==4)

_ISPYTHON2 = sys.version_info[0] == 2
if _ISPYTHON2: _NULLBYTE = '\0'
else: _NULLBYTE = bytes( chr(0), 'ascii' )

def _CHARP2STRING( charp, encoding='utf-8' ):
	b = bytes()
	i = 0
	while True:
		char = charp[ i ]
		if char == _NULLBYTE: break
		else:
			b += char
			i += 1
	return b.decode( encoding )

## try to load precompiled c-libraries from this directory, if the library is not there try to load from the system.
_clibs_dir = os.path.dirname(os.path.abspath(__file__))

def _load_ctypes_lib( name ):
	if __os.name == 'posix':
		if __sys.platform=='linux2':
			if not name.endswith('.so'): name += '.so'
			if not name.startswith('lib'): name = 'lib' + name

			if IS32BIT: 	path = __os.path.join(_clibs_dir,'linux32')
			else: 		path = __os.path.join(_clibs_dir,'linux64')
			url = __os.path.join( path, name )
			if __os.path.isfile( url ): return ctypes.CDLL(url)
			elif __os.path.isfile( '/usr/local/lib/%s'%name ): return ctypes.CDLL('/usr/local/lib/%s'%name)
			elif __os.path.isfile( '/usr/local/lib64/%s'%name ) and not IS32BIT: return ctypes.CDLL('/usr/local/lib64/%s'%name)
			elif __os.path.isfile( '/usr/lib/%s'%name ): return ctypes.CDLL('/usr/lib/%s'%name)
			elif __os.path.isfile( './%s'%name ): return ctypes.CDLL('./%s'%name)
			else:	# fallback
				try: return ctypes.CDLL(name)
				except: return ctypes.CDLL('')

		elif sys.platform == 'darwin':
			name += '.dylib'
			if IS32BIT: 	path = os.path.join(_clibs_dir,'osx32')
			else: 		path = os.path.join(_clibs_dir,'osx64')
			url = os.path.join( path, name )
			if os.path.isfile( url ): return ctypes.CDLL(url)
			else: return ctypes.CDLL(name) #fallback

	elif os.name == 'nt':
		name += '.dll'
		if IS32BIT: 	path = os.path.join(_clibs_dir,'win32')
		else: 		path = os.path.join(_clibs_dir,'win64')
		url = os.path.join( path, name )
		if os.path.isfile( url ): return ctypes.CDLL(url)
		else: return ctypes.CDLL(name) #fallback

RPYTHONIC_WRAPPER_FUNCTIONS = {}
RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES = []
RPYTHONIC_AUTOPREFIX_IGNORE = []

## ctypes does not clearly expose these types ##
PyCFuncPtrType = type(ctypes.CFUNCTYPE(ctypes.c_void_p))
PyCArrayType = type( ctypes.c_int * 2 )
PyCPointerType = type( ctypes.POINTER(ctypes.c_int) )
PyCStructType = type( ctypes.Structure )
CArgObject = type( ctypes.byref(ctypes.c_int()) )

class _rpythonic_meta_(object):
	'''
	Reserved Attributes:
		POINTER
		CSTRUCT
		CAST
	'''
	_rpythonic_ = True		# workaround for now, must have a way to know if object is a meta from another module, isinstance(o,_rpythonic_meta_) will fail in those cases. another workaround could be check sys.modules for other rpythonic modules and fetch _rpythonic_meta_ from there.
	def __init__(self, *args, **kw ):							# cheap trick, abuse **kw, and look for "pointer", "cast"
		if kw and 'pointer' not in kw: raise SyntaxError	# sorry, you can not init with keywords
		elif kw and 'pointer' in kw:
			if 'cast' in kw and kw['cast']:
				self.POINTER = ctypes.cast( kw['pointer'], ctypes.POINTER(self.CSTRUCT) )
			else: self.POINTER = kw['pointer']
		else: self.POINTER = ctypes.pointer( self.CSTRUCT(*args) )
		self.POINTER.pyobject = self	# .pyobject is local to this pointer "object"

	def __getattr__(self,name):
		if hasattr( self.POINTER.contents, name ):
			return getattr( self.POINTER.contents, name )

		else:	# when rpythonic failed to generate good bindings - these lookups should be cached
			for parent in self._rpythonic_parent_classes_:
				if hasattr( parent, name ):
					method = getattr( parent, name )	# should check if it really is an unbound method
					func = parent._rpythonic_unbound_lookup_[ method ]
					n = func.name
					if len(func.argnames) > 1:
						argnames = func.argnames[ 1 : ]
						a = ',' + '=None,'.join( argnames ) + '=None'
						b = ','.join( argnames )
					else: a = b = ''
					lamb = eval( 'lambda self %s: %s( self.POINTER, %s )' %(a,n,b) )
					setattr( self.__class__, name, lamb )
					#return lamb	# this would return the unbound lambda, must call getattr again
					return getattr( self, name )

			## last resort, load from global name space ##
			G = globals()
			if name in G: return lambda *args: G[name](self.POINTER, *args)
			else:
				for prefix in self._autoprefix_:
					n = prefix + name
					if n in G: return lambda *args: G[n](self.POINTER, *args)
				print( 'possible auto-prefixes available', self._autoprefix_ )
				raise AttributeError

	def __call__(self, type=False):
		print('calling object is DEPRECATED - use ob.POINTER or ob.CSTRUCT')
		if type: return self.CSTRUCT
		else: return self.POINTER


def _rpythonic_generate_subclass_( name, struct, functions ):
	head = 'class %s( _rpythonic_meta_ ):' %name
	body = [ 
		'_rpythonic_parent_classes_ = []' ,
		'_rpythonic_unbound_lookup_ = {}' 
	]

	names = [ func.name for func in functions ]

	possibles = {}
	rank = []		# rank by longest name
	if len(names) > 3000: print('too many functions to use this hack')
	else:
		for n1 in names:
			prefix = ''
			for i,char in enumerate(n1):
				prefix += char
				if prefix not in possibles:
					possibles[ prefix ] = 0
					for n2 in names:
						if n2.startswith( prefix ):
							possibles[ prefix ] += 1

					if not rank or len(prefix) > len(rank[-1]) and possibles[prefix] > len(names)/4:
						rank.append( prefix )

	top = []
	while rank:
		best = rank.pop()
		if possibles[best] > len(functions)/2 and best not in names:
			if best.endswith('_set_') or best.endswith('_get_'): best = best[ : -4 ]
			elif best.endswith('Set') or best.endswith('Get'): best = best[ : -3 ]

			rem = []
			for other in rank:
				if best.startswith(other): rem.append( other )
			for r in rem: rank.remove( r )

			if best not in top: top.append( best )

		if len(top) > 3: break

	for n in names:		# find shortest prefixes #
		prefix = ''
		for i,char in enumerate(n):		# cammelCase
			if i==0: prefix += char; continue
			if char.isupper() and len(prefix) >= 2: break
			prefix += char
		if prefix and prefix != n and len(prefix) >= 2:
			hits = 0
			for other in names:
				if other.startswith( prefix ): hits += 1
			if hits >= 2 and prefix not in top:
				top.append( prefix )
				if len(top) >= 6: break

	## setup full names
	for func in functions:
		n = func.name
		if len(func.argnames) > 1:
			argnames = func.argnames[ 1 : ]
			a = ',' + '=None,'.join( argnames ) + '=None'
			b = ','.join( argnames )
		else: a = b = ''

		fhead = 'def %s( self %s ):' %(n,a)
		fbody = ['return %s(self.POINTER, %s)' %(func.name,b)]
		g = fhead + '\n\t\t' + '\n\t\t'.join( fbody )
		body.append( g )
		#body.append( '%s._rpythonic_function_ = %s' %(func.name, func.name) )

	## setup short names ##
	for n in names:
		for prefix in top:
			if n.startswith(prefix) and n[len(prefix):] not in names:
				alt = n[ len(prefix) : ]
				if alt and alt != n and alt not in PYTHON_RESERVED_KEYWORDS and not alt.isdigit() and not alt[0].isdigit():
					body.append( '%s = %s' %(alt,n) )
					names.append( alt )

	gen = head + '\n\t' + '\n\t'.join( body )
	try: exec( gen )
	except:
		print( gen )
		raise SyntaxError

	klass = locals()[name]
	klass.CSTRUCT = struct	# ctypes struct class

	klass._autoprefix_ = top
	for func in functions:
		unbound = getattr( klass, func.name )
		klass._rpythonic_unbound_lookup_[ unbound ] = func
		# klass.longname is klass.shortname = False
		# klass.longname == klass.shortname = True
	return klass

def _rpythonic_convert_structs_to_objects():
	G = globals()
	for klass in _OOAPI_:
		altname = name = klass.__name__
		prefix = ''
		for i,char in enumerate(name):
			if i==0: prefix += char; continue
			if char.isupper(): break
			prefix += char
		if prefix and prefix != name:
			hits = 0
			for other in _OOAPI_:
				if other is not klass:
					if other.__name__.startswith( prefix ): hits += 1
			if hits >= 2:
				altname = name[ len(prefix) : ]

		funcs = _OOAPI_[ klass ]
		newklass = _rpythonic_generate_subclass_( altname, klass, funcs )
		klass._rpythonic_wrapper_class_ = newklass
		G[ name ] = newklass	# replace struct with wrapper
		if altname not in G: G[ altname ] = newklass	# safely define with nicer name
		elif altname != name: # odd cases, maybe a function that returns the object, almost never happens.
			print('WARN - not replacing something with struct wrapper:', G[altname] )


def _rpythonic_setup_return_wrappers():
	R = _rpythonic_function_
	for klass in _OOAPI_:
		if klass in _OOAPI_RETURNS_OBJECT_:
			for f in _OOAPI_RETURNS_OBJECT_[klass]:
				f.object_oriented = True
				if not f.return_wrapper:	# just in case the ctypes footer had already defined it, do not overwrite
					f.return_wrapper = klass._rpythonic_wrapper_class_

def _rpythonic_function_( name, result=ctypes.c_void_p, args=[]):
	mname = '_metafunc_%s' %name
	exec( 'class %s( _rpythonic_metafunc_ ): pass' %mname )
	k = locals()[mname]
	return k( name, result, args )

_OOAPI_ = {}
_OOAPI_RETURNS_OBJECT_ = {}

class _rpythonic_metafunc_(object):
	def __init__(self, name, result=ctypes.c_void_p, args=[]):
		self.name = name
		self.result = result
		self.argtypes = []		# can dynamically change CFUNCTYPE trick
		self.argnames = []
		self.argtypestypes = []
		for i,arg in enumerate(args):
			n,t = arg
			if n in PYTHON_RESERVED_KEYWORDS: n = 'C_'+n
			if n in self.argnames: n = '%s%s' %(n,i)
			self.argnames.append( n )
			self.argtypes.append( t )
			self.argtypestypes.append( type(t) )		# precomputed for speed

		self.argnames = tuple( self.argnames )				# should never change
		self.numargs = len( self.argtypes )
		self.callbacks = [None] * self.numargs
		self.return_wrapper = None
		self.object_oriented = False
		self.function = None
		try:
			func = self.function = getattr(CTYPES_DLL, self.name )
			RPYTHONIC_WRAPPER_FUNCTIONS[ name ] = self
		except:
			RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES.append( name )
		if self.function: self.reset()

	def change_argument_type( self, name, t ):
		idx = self.argnames.index( name )
		self.argtypes[ idx ] = t
		self.argtypestypes[ idx ] = type(t)
		self.function.argtypes = self.argtypes

	def reset(self):
		if self.argnames:
			a = ',' + '=None,'.join( self.argnames ) + '=None'
			b = ','.join( self.argnames )
		else: a = b = ''

		callmeth = eval( 'lambda self %s: self._call_( %s )' %(a,b) )
		setattr( self.__class__, '__call__', callmeth )

		self.function.restype = self.result
		self.function.argtypes = self.argtypes

		if type( self.result ) is PyCPointerType and type(self.result._type_) is PyCStructType:
			klass = self.result._type_
			if klass not in _OOAPI_RETURNS_OBJECT_: _OOAPI_RETURNS_OBJECT_[klass] = []
			_OOAPI_RETURNS_OBJECT_[klass].append( self )

		self.defaults = []
		for i in range( self.numargs ):
			T = self.argtypes[ i ]
			if type(T) is PyCFuncPtrType:
				p = T()	# func pointers can not be None
				self.defaults.append( p )
				self.callbacks[ i ] = p					# save reference
			elif T in (ctypes.c_int, ctypes.c_uint, ctypes.c_long, ctypes.c_ulong):
				self.defaults.append( 0 )
			elif T in (ctypes.c_float, ctypes.c_double):
				self.defaults.append( .0 )
			else: self.defaults.append( None )	# None is allowed for all other types

			## generate OO API ##
			if i == 0 and type(T) is PyCPointerType and type(T._type_) is PyCStructType:
				klass = T._type_
				if klass not in _OOAPI_: _OOAPI_[ klass ] = []
				_OOAPI_[ klass ].append( self )

	def _call_( self, *args ):			# allow flexible calling types
		cargs = list( self.defaults )
		for i,arg in enumerate(args):
			if isinstance( arg, _rpythonic_meta_ ): arg = arg.POINTER
			elif hasattr( arg, '_rpythonic_' ): arg = arg.POINTER		# workaround - instance from another module

			t = type(arg)
			k = self.argtypes[ i ]
			kt = self.argtypestypes[ i ]
			if arg is None and cargs[i] is not None:	# use user defaults, very rare cases
				continue

			elif t is bool and k is ctypes.c_int:
				if arg: cargs[i] = 1	#ctypes.c_int(1)
				else: cargs[i] = 0	#ctypes.c_int(0)

			elif t in (list,tuple):				# convert lists and tuples into array
				if kt is PyCArrayType:
					cargs[ i ] = k(*arg)
				elif kt is PyCStructType:
					if k._array_wrapper_: cargs[ i ] = k(arg)	# allow easy array init
					else: cargs[ i ] = k(*arg)							# allow multiple args
				elif kt is PyCPointerType:
					cargs[ i ] = _convert_nested_list_to_pointer( k, arg )
				else: assert 0

			elif isinstance( arg, ctypes._Pointer ) and t is not k and kt is PyCPointerType:
				cargs[ i ] = ctypes.cast( arg, k )		# generic's that need to be cast

			elif kt is PyCStructType and isinstance( arg, ctypes._Pointer ):
				cargs[ i ] = arg.contents	# fixed may25

			elif kt is PyCPointerType and not isinstance( arg, (ctypes._Pointer,CArgObject) ):
				if t in (int,float,bool): ptr = k( k._type_(arg) )
				elif t is str:
					arg = arg.encode('utf-8')
					#ptr = k( k._type_() )								# not k() otherwise null pointer error
					#for j, char in enumerate(arg): ptr[ j ] = char		# not correct - missing null byte?
					ptr = ctypes.create_string_buffer(arg)				# correct and pypy compatible
				elif t in (PyCStructType, PyCArrayType):
					ptr = ctypes.cast( ctypes.pointer( arg ), k )
				else:
					ptr = arg	# TODO print warning?
				cargs[ i ] = ptr

			elif kt is PyCFuncPtrType:
				if t.__name__ == 'CFunctionType': cargs[ i ] = arg		# assume outside holds pointer
				else:													# this is not safe #
					cargs[ i ] = self.callbacks[ i ] = k( arg )				# assume arg is a callable
			else:
				cargs[ i ] = arg		# directly pass

		## if you define your own return_wrapper, it must take keyword "pointer"
		if self.return_wrapper: return self.return_wrapper( pointer=self.function( *cargs ) )
		else: return self.function( *cargs )



def _convert_nested_list_to_pointer( k, arg ):
	depth = 0; s = k
	while True:
		if type(s) is PyCPointerType:
			s = getattr( s, '_type_' )
			depth += 1
		else: break
	assert depth and depth <= 2
	if depth == 1:
		T = k._type_
		ptr = k( k._type_() )
		for i in range( len(arg) ):
			ptr[ i ] = T( *arg[i] )
	elif depth == 2:
		T = k._type_._type_
		_ptr = k._type_( k._type_._type_() )
		for i in range(len( arg )):
			for j in range( len(arg[i]) ):
				_ptr[ j ] = T( *arg[ i ][ j ] )
		ptr = k( _ptr )
	return ptr


def __freeze_rpythonic_struct( cls, fields ):
	if cls not in _OOAPI_: _OOAPI_[ cls ] = []	# wrap all structs
	try: setattr( cls, '_fields_', fields )
	except:
		print( 'WARN - bad order struct freeze', cls )
		#cls._fields_ = []

class _rpythonic_struct_( ctypes.Structure ):
	_array_wrapper_ = False
	_fields_ = []
	_methods_ = {}
	#def __call__(self): return self
	def __init__(self, *args, **kw ):
		cargs = []
		argtypes = []
		for a in self._fields_: argtypes.append( a[1] )
		if len(args) > len(argtypes): args = [args]	# allow both calling conventions
		for i,arg in enumerate( args ):
			if isinstance( arg, _rpythonic_meta_ ): arg = arg.POINTER

			t = type(arg)
			k = argtypes[ i ]
			if t in (list,tuple):
				if k.__class__.__name__	== 'PyCArrayType':
					cargs.append( k(*arg) )
				elif k.__class__.__name__ == 'PyCStructType':
					if k._array_wrapper_: cargs.append( k(arg) )	# allow easy array init
					else: cargs.append( k(*arg) )							# allow multiple args
			elif isinstance( arg, ctypes._Pointer ) and t is not k:
				cargs[ i ] = ctypes.cast( arg, k )	# generic's that need to be cast
			elif k.__class__.__name__ == 'PyCArrayType' and t in (float,int,bool):
				cargs.append( k(arg) )		# support init array from single value
			else:
				cargs.append( arg )		# directly pass

		ctypes.Structure.__init__(self, *cargs, **kw)


def _rpythonic_make_nice_global_enums_():
	G = globals()
	for name in RPYTHONIC_GLOBAL_ENUMS:
		if '_' in name and name.index('_') <= 4:
			altname = name[ name.index('_') + 1 : ]
			if altname not in G:
				G[altname] = RPYTHONIC_GLOBAL_ENUMS[ name ]

def _rpythonic_clean_up_missing_functions_():
	G = globals()
	for f in RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES:
		G.pop( f )
	print( "C functions loaded: %s" %len(RPYTHONIC_WRAPPER_FUNCTIONS) )
	print( "C functions failed: %s" %len(RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES) )



###### NEW API #########
CTYPES_DLL = None

class _VOID_POINTER_CONTAINER_(object):
	def __init__(self, ptr, name=None):
		self._pointer_ = ptr
		self.name = name
NULL = _VOID_POINTER_CONTAINER_(None,'<null pointer>')


class meta:	# NEW API - allow run time switch from ctypes to rffi
	'''
	Methods:
		RPython will not allow object wrapper around a method (__call__ not allowed)
		keep C function names in list "__cfunctions__"
		rpythonic.enable_rffi( classA, classB )	
		can take advantage of methods in object-method-wrapper,
		generate rffi wrapper and set method on classA, etc.
		replaces object-method-wrapper with rffi-method

	Properties:
		CPython: obj.x=1
		RPython: obj.set_x(1)	
	'''
	METAS = []
	def __init__(self, constructors=[], methods={}, properties={}):
		global CTYPES_DLL
		if not CTYPES_DLL:
			CTYPES_DLL = _load_ctypes_lib( _clib_name_ )

		self.constructors = constructors
		self.methods = methods
		self.properties = properties
		self.METAS.append( self )



	def __call__(self, cls ):
		print('@meta', cls )

		if not self.constructors:
			lamb = lambda s, _explicit_pointer_=None: setattr(s,'_pointer_',getattr(_explicit_pointer_,'_pointer_')) if hasattr(_explicit_pointer_,'_pointer_') else setattr(s,'_pointer_',_explicit_pointer_)
			lamb._debug = '(no constructor)'
			setattr( cls, '__init__', lamb )
		else:
			con = self._find_best_function( self.constructors )
			cfunc = self._build_cfunc( con )
			setattr( cls, '_%s'%con['name'], cfunc )
			g = self._gen_init( con )
			setattr( cls, '__init__', g )
		
		## set methods ##
		for name in self.methods:
			meth = self.methods[ name ]
			cfuncs = []
			for m in meth['functions']:
				cfunc = self._build_cfunc( m, method=True, static=meth['static'] )
				self._setup_return( cfunc, meth )
				setattr( cls, '_%s'%m['name'], cfunc )
				cfuncs.append( cfunc )

			f = self._find_best_function( meth['functions'] )
			g = self._gen_method( meth, f )
			g._cfuncs = cfuncs
			if meth['static']: g = classmethod( g )
			setattr( cls, name, g )

		for name in self.properties:
			print( 'property:', name )
			p = []
			for f in self.properties[name]:
				cfunc = self._build_cfunc( f )
				setattr( cls, '_%s'%f['name'], cfunc )
				g = self._gen_method( f, f )
				p.append( g )

			setattr( cls, name, property(*p) )

		return cls


	@staticmethod
	def _build_cfunc( info, method=False, static=False ):
		cfunc = getattr(CTYPES_DLL, info['name'])
		if method and not static: argtypes = [ ctypes.c_void_p ]
		else: argtypes = []
		for p in info['parameters']: argtypes.append( eval(p['ctypes_type']) )
		cfunc.argtypes = argtypes
		return cfunc

	@staticmethod
	def _setup_return( cfunc, info ):
		if not info['returns_fundamental']:
			cfunc.restype = ctypes.c_void_p
		elif info['returns_fundamental']:
			cfunc.restype = eval( info['returns_ctypes'] )
		else:
			cfunc.restype = ctypes.c_void_p

	@staticmethod
	def _gen_prepare_args( m ):
		a = []; b = []
		for i,p in enumerate(m['parameters']):
			if 'name' in p: n = p['name']
			else: n = '_unnamed_%s' %i
			if '<' in n: n = '_TODOfixme_%s' %i
			if n in PYTHON_RESERVED_KEYWORDS: n += str(i)
			if p['fundamental']:
				b.append( n )
				s = p['raw_type'].split()
				if 'default' in p:
					d = p['default']
					if p['raw_type'] in ('float', 'double'):
						if d.endswith('f'): d = d[:-1]
						d = d.replace(' ', '.')
						if 'e' in d: d = 0.0
						try: d = float(d)
						except: d = 0.0
					elif ('int' in s or 'size_t' in s) and not d.isdigit(): d = 0
					elif 'char' in s and '"' not in d: d = '""'
					elif d.lower() == 'false': d = False
					elif d.lower() == 'true': d = True
				elif 'char' in s: d = '""'
				elif 'float' in s or 'double' in s: d = 0.0
				elif 'size_t' in s or 'int' in s or 'long' in s or 'short' in s: d = 0
				elif p['raw_type'] == 'bool': d = False
				elif p['raw_type'] in ('void', '(template)'): d = 'NULL'
				else: print( p )
				a.append( n+'=%s' %d )

			else:
				b.append( '%s._pointer_'%n )
				a.append( n+'=NULL' )
		return a, b

	@staticmethod
	def _gen_init( m ):
		a, b = meta._gen_prepare_args( m )
		if a: e = 'lambda _py_self_, %s, _explicit_pointer_=None: ' %(','.join(a))
		else: e = 'lambda _py_self_, _explicit_pointer_=None: '
		e += 'setattr(_py_self_, "_pointer_", _py_self_._%s(%s))' %( m['name'], ','.join(b) )
		e += ' if not _explicit_pointer_ else '
		e += 'setattr(_py_self_, "_pointer_", _explicit_pointer_)'
		print( e )
		lamb = eval( e ); lamb._debug = e; lamb._introspect = m
		return lamb

	@staticmethod
	def _find_best_function( funcs ):
		best = funcs[0]
		score = -1
		if len(funcs) > 1:
			for f in funcs:
				hits = 0
				for p in f['parameters']:
					if p['fundamental']: hits += 1
				if hits and hits == len( f['parameters'] ):
					if hits > score:
						score = hits
						best = f
		return best

	@staticmethod
	def _gen_method( m, f ):
		a, b = meta._gen_prepare_args( f )
		if a: e = 'lambda _py_self_, %s: ' %(','.join(a))
		else: e = 'lambda _py_self_: '

		if 'static' in m and m['static']:	# static in c++ is like a classmethod
			c = '_py_self_._%s( %s )' %( f['name'], ','.join(b) )
		else:
			c = '_py_self_._%s( _py_self_._pointer_, %s )' %( f['name'], ','.join(b) )

		if not m['returns_fundamental']:
			if 'returns_unknown' in m or '<' in m['returns']: c = '_VOID_POINTER_CONTAINER_( %s, name="%s" )' %(c,m['returns'])
			else:
				something = m['returns'].replace('::', '.')
				c = '%s( _explicit_pointer_=%s )' %(something, c)

		e += c; lamb = eval( e )
		lamb._debug = e; lamb._introspect = f
		return lamb


	META_FUNCTIONS = []
	@classmethod
	def function( self, info ):
		print('@meta.function', info['name'] )
		global CTYPES_DLL
		if not CTYPES_DLL:
			CTYPES_DLL = _load_ctypes_lib( _clib_name_ )

		cfunc = self._build_cfunc( info, method=False, static=True )
		setattr( meta, '_%s'%info['name'], cfunc )
		self._setup_return( cfunc, info )
		a, b = meta._gen_prepare_args( info )
		e = 'lambda %s: ' %(','.join(a))
		c = 'meta._%s( %s )' %( info['name'], ','.join(b) )

		if not info['returns_fundamental']:
			if 'returns_unknown' in info or '<' in info['returns']:
				c = '_VOID_POINTER_CONTAINER_( %s, name="%s" )' %(c,info['returns'])
			else:
				something = info['returns'].replace('::', '.')
				c = '%s( _explicit_pointer_=%s )' %(something, c)
		e += c
		lamb = eval( e )
		lamb._debug = e
		lamb._introspect = info
		return lamb



def _rpythonic_strip_prefixes_( prefixes ):
	G = globals()
	names = list(G.keys())	# ensure list in py3
	for name in names:
		for prefix in prefixes:
			if name.startswith( prefix ):
				newname = name[ len(prefix) : ]
				if newname and newname not in G:
					G[ newname ] = G[ name ]






_clib_name_ = 'libmlt'
print('loading lib', _clib_name_)
print( os.path.abspath( os.path.curdir ) )
CTYPES_DLL = _load_ctypes_lib( _clib_name_ )
assert CTYPES_DLL
print( CTYPES_DLL._name )

## macro globals ##
## enums ##
mlt_image_none = 0 
mlt_image_rgb24 = 1 
mlt_image_rgb24a = 2 
mlt_image_yuv422 = 3 
mlt_image_yuv420p = 4 
mlt_image_opengl = 5 

mlt_audio_none = 0 
mlt_audio_pcm = 1 
mlt_audio_s16 = 1 
mlt_audio_s32 = 2 
mlt_audio_float = 3 

mlt_whence_relative_start = 0 
mlt_whence_relative_current = 1 
mlt_whence_relative_end = 2 

invalid_type = 0 
unknown_type = 1 
producer_type = 2 
tractor_type = 3 
playlist_type = 4 
multitrack_type = 5 
filter_type = 6 
transition_type = 7 
consumer_type = 8 
field_type = 9 

_codecvt_result = { 
	"__codecvt_ok" : 0, 
	"__codecvt_partial" : 1, 
	"__codecvt_error" : 2, 
	"__codecvt_noconv" : 3, 
}

PTHREAD_CREATE_JOINABLE = 0 
PTHREAD_CREATE_DETACHED = 1 

PTHREAD_MUTEX_TIMED_NP = 0 
PTHREAD_MUTEX_RECURSIVE_NP = 1 
PTHREAD_MUTEX_ERRORCHECK_NP = 2 
PTHREAD_MUTEX_ADAPTIVE_NP = 3 
PTHREAD_MUTEX_NORMAL = 0 
PTHREAD_MUTEX_RECURSIVE = 1 
PTHREAD_MUTEX_ERRORCHECK = 2 
PTHREAD_MUTEX_DEFAULT = 0 

PTHREAD_MUTEX_STALLED = 0 
PTHREAD_MUTEX_STALLED_NP = 0 
PTHREAD_MUTEX_ROBUST = 1 
PTHREAD_MUTEX_ROBUST_NP = 1 

PTHREAD_RWLOCK_PREFER_READER_NP = 0 
PTHREAD_RWLOCK_PREFER_WRITER_NP = 1 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = 2 
PTHREAD_RWLOCK_DEFAULT_NP = 0 

PTHREAD_INHERIT_SCHED = 0 
PTHREAD_EXPLICIT_SCHED = 1 

PTHREAD_SCOPE_SYSTEM = 0 
PTHREAD_SCOPE_PROCESS = 1 

PTHREAD_PROCESS_PRIVATE = 0 
PTHREAD_PROCESS_SHARED = 1 

PTHREAD_CANCEL_ENABLE = 0 
PTHREAD_CANCEL_DISABLE = 1 

PTHREAD_CANCEL_DEFERRED = 0 
PTHREAD_CANCEL_ASYNCHRONOUS = 1 

## simple enums ##
RPYTHONIC_GLOBAL_ENUMS = { 
 "mlt_image_none" : 0,  "mlt_image_rgb24" : 1,  "mlt_image_rgb24a" : 2,  "mlt_image_yuv422" : 3,  "mlt_image_yuv420p" : 4,  "mlt_image_opengl" : 5, 
 "mlt_audio_none" : 0,  "mlt_audio_pcm" : 1,  "mlt_audio_s16" : 1,  "mlt_audio_s32" : 2,  "mlt_audio_float" : 3, 
 "mlt_whence_relative_start" : 0,  "mlt_whence_relative_current" : 1,  "mlt_whence_relative_end" : 2, 
 "invalid_type" : 0,  "unknown_type" : 1,  "producer_type" : 2,  "tractor_type" : 3,  "playlist_type" : 4,  "multitrack_type" : 5,  "filter_type" : 6,  "transition_type" : 7,  "consumer_type" : 8,  "field_type" : 9, 
 "PTHREAD_CREATE_JOINABLE" : 0,  "PTHREAD_CREATE_DETACHED" : 1, 
 "PTHREAD_MUTEX_TIMED_NP" : 0,  "PTHREAD_MUTEX_RECURSIVE_NP" : 1,  "PTHREAD_MUTEX_ERRORCHECK_NP" : 2,  "PTHREAD_MUTEX_ADAPTIVE_NP" : 3,  "PTHREAD_MUTEX_NORMAL" : 0,  "PTHREAD_MUTEX_RECURSIVE" : 1,  "PTHREAD_MUTEX_ERRORCHECK" : 2,  "PTHREAD_MUTEX_DEFAULT" : 0, 
 "PTHREAD_MUTEX_STALLED" : 0,  "PTHREAD_MUTEX_STALLED_NP" : 0,  "PTHREAD_MUTEX_ROBUST" : 1,  "PTHREAD_MUTEX_ROBUST_NP" : 1, 
 "PTHREAD_RWLOCK_PREFER_READER_NP" : 0,  "PTHREAD_RWLOCK_PREFER_WRITER_NP" : 1,  "PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP" : 2,  "PTHREAD_RWLOCK_DEFAULT_NP" : 0, 
 "PTHREAD_INHERIT_SCHED" : 0,  "PTHREAD_EXPLICIT_SCHED" : 1, 
 "PTHREAD_SCOPE_SYSTEM" : 0,  "PTHREAD_SCOPE_PROCESS" : 1, 
 "PTHREAD_PROCESS_PRIVATE" : 0,  "PTHREAD_PROCESS_SHARED" : 1, 
 "PTHREAD_CANCEL_ENABLE" : 0,  "PTHREAD_CANCEL_DISABLE" : 1, 
 "PTHREAD_CANCEL_DEFERRED" : 0,  "PTHREAD_CANCEL_ASYNCHRONOUS" : 1, 

}
class mlt_property_s(_rpythonic_struct_): pass
class mlt_event_struct(_rpythonic_struct_): pass
class mlt_field_s(_rpythonic_struct_): pass
class mlt_deque_s(_rpythonic_struct_): pass
class mlt_repository_s(_rpythonic_struct_): pass
class mlt_cache_s(_rpythonic_struct_): pass
class mlt_cache_item_s(_rpythonic_struct_): pass
class mlt_profile_s(_rpythonic_struct_): pass
class __fsid_t(_rpythonic_struct_): _array_wrapper_ = True
class __mbstate_t(_rpythonic_struct_): pass
class __value(ctypes.Union): pass
class _G_fpos_t(_rpythonic_struct_): pass
class _G_fpos64_t(_rpythonic_struct_): pass
class _IO_jump_t(_rpythonic_struct_): pass
class _IO_marker(_rpythonic_struct_): pass
class _IO_FILE(_rpythonic_struct_): _array_wrapper_ = True
class _IO_FILE_plus(_rpythonic_struct_): pass
class mlt_properties_s(_rpythonic_struct_): pass
class mlt_service_s(_rpythonic_struct_): pass
class mlt_frame_s(_rpythonic_struct_): pass
class mlt_filter_s(_rpythonic_struct_): pass
class mlt_producer_s(_rpythonic_struct_): pass
class mlt_track_s(_rpythonic_struct_): pass
class mlt_multitrack_s(_rpythonic_struct_): pass
class mlt_transition_s(_rpythonic_struct_): pass
class timespec(_rpythonic_struct_): pass
class sched_param(_rpythonic_struct_): pass
class __sched_param(_rpythonic_struct_): pass
class cpu_set_t(_rpythonic_struct_): _array_wrapper_ = True
class tm(_rpythonic_struct_): pass
class itimerspec(_rpythonic_struct_): pass
class sigevent(_rpythonic_struct_): pass
class __locale_struct(_rpythonic_struct_): _array_wrapper_ = True
class __locale_data(_rpythonic_struct_): pass
class pthread_attr_t(ctypes.Union): pass
class __pthread_internal_slist(_rpythonic_struct_): pass
class pthread_mutex_t(ctypes.Union): pass
class __pthread_mutex_s(_rpythonic_struct_): pass
class pthread_mutexattr_t(ctypes.Union): pass
class pthread_cond_t(ctypes.Union): pass
class pthread_condattr_t(ctypes.Union): pass
class pthread_rwlock_t(ctypes.Union): pass
class __data(_rpythonic_struct_): pass
class pthread_rwlockattr_t(ctypes.Union): pass
class pthread_barrier_t(ctypes.Union): pass
class pthread_barrierattr_t(ctypes.Union): pass
class _pthread_cleanup_buffer(_rpythonic_struct_): pass
class __pthread_unwind_buf_t(_rpythonic_struct_): _array_wrapper_ = True
class __cancel_jmp_buf(_rpythonic_struct_): _array_wrapper_ = True
class __pthread_cleanup_frame(_rpythonic_struct_): pass
class __jmp_buf_tag(_rpythonic_struct_): pass
class mlt_consumer_s(_rpythonic_struct_): pass
class mlt_playlist_clip_info(_rpythonic_struct_): pass
class playlist_entry_s(_rpythonic_struct_): pass
class mlt_playlist_s(_rpythonic_struct_): pass
class mlt_tractor_s(_rpythonic_struct_): pass
class mlt_tokeniser(_rpythonic_struct_): pass
class mlt_tokeniser_t(_rpythonic_struct_): pass
class mlt_parser_s(_rpythonic_struct_): pass
class mlt_geometry_item_s(_rpythonic_struct_): _array_wrapper_ = True
class mlt_geometry_s(_rpythonic_struct_): pass
## union and structures ##
__freeze_rpythonic_struct( mlt_property_s, [
])

__freeze_rpythonic_struct( mlt_event_struct, [
])

__freeze_rpythonic_struct( mlt_field_s, [
])

__freeze_rpythonic_struct( mlt_deque_s, [
])

__freeze_rpythonic_struct( mlt_repository_s, [
])

__freeze_rpythonic_struct( mlt_cache_s, [
])

__freeze_rpythonic_struct( mlt_cache_item_s, [
])

__freeze_rpythonic_struct( mlt_profile_s, [
	( "description", ctypes.POINTER(ctypes.c_char) ),
	( "frame_rate_num", ctypes.c_int ),
	( "frame_rate_den", ctypes.c_int ),
	( "width", ctypes.c_int ),
	( "height", ctypes.c_int ),
	( "progressive", ctypes.c_int ),
	( "sample_aspect_num", ctypes.c_int ),
	( "sample_aspect_den", ctypes.c_int ),
	( "display_aspect_num", ctypes.c_int ),
	( "display_aspect_den", ctypes.c_int ),
	( "colorspace", ctypes.c_int ),
	( "is_explicit", ctypes.c_int ),
])

__freeze_rpythonic_struct( __fsid_t, [
	( "__val", ( ctypes.c_int * 2 ) ),
])

__freeze_rpythonic_struct( __value, [
	( "__wch", ctypes.c_uint ),
	( "__wchb", ( ctypes.c_char * 4 ) ),
])

__freeze_rpythonic_struct( __mbstate_t, [
	( "__count", ctypes.c_int ),
	( "__value", __value ),
])

__freeze_rpythonic_struct( _G_fpos_t, [
	( "__pos", ctypes.c_int64 ),
	( "__state", __mbstate_t ),
])

__freeze_rpythonic_struct( _G_fpos64_t, [
	( "__pos", ctypes.c_longlong ),
	( "__state", __mbstate_t ),
])

__freeze_rpythonic_struct( _IO_jump_t, [
])

__freeze_rpythonic_struct( _IO_marker, [
	( "_next", ctypes.POINTER(_IO_marker) ),
	( "_sbuf", ctypes.POINTER(_IO_FILE) ),
	( "_pos", ctypes.c_int ),
])

__freeze_rpythonic_struct( _IO_FILE, [
	( "_flags", ctypes.c_int ),
	( "_IO_read_ptr", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_read_end", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_read_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_write_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_write_ptr", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_write_end", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_buf_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_buf_end", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_save_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_backup_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_save_end", ctypes.POINTER(ctypes.c_char) ),
	( "_markers", ctypes.POINTER(_IO_marker) ),
	( "_chain", ctypes.POINTER(_IO_FILE) ),
	( "_fileno", ctypes.c_int ),
	( "_flags2", ctypes.c_int ),
	( "_old_offset", ctypes.c_int64 ),
	( "_cur_column", ctypes.c_ushort ),
	( "_vtable_offset", ctypes.c_char ),
	( "_shortbuf", ( ctypes.c_char * 1 ) ),
	( "_lock", ctypes.POINTER(ctypes.c_void_p) ),
	( "_offset", ctypes.c_longlong ),
	( "__pad1", ctypes.POINTER(ctypes.c_void_p) ),
	( "__pad2", ctypes.POINTER(ctypes.c_void_p) ),
	( "__pad3", ctypes.POINTER(ctypes.c_void_p) ),
	( "__pad4", ctypes.POINTER(ctypes.c_void_p) ),
	( "__pad5", ctypes.c_uint ),
	( "_mode", ctypes.c_int ),
	( "_unused2", ctypes.c_char ),
])

__freeze_rpythonic_struct( _IO_FILE_plus, [
])

__freeze_rpythonic_struct( mlt_properties_s, [
	( "child", ctypes.POINTER(ctypes.c_void_p) ),
	( "local", ctypes.POINTER(ctypes.c_void_p) ),
	( "close", ctypes.CFUNCTYPE(ctypes.c_void_p, ) ),
	( "close_object", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( mlt_service_s, [
	( "parent", mlt_properties_s ),
	( "get_frame", ctypes.c_void_p ),
	( "close", ctypes.CFUNCTYPE(ctypes.c_void_p, ) ),
	( "close_object", ctypes.POINTER(ctypes.c_void_p) ),
	( "local", ctypes.POINTER(ctypes.c_void_p) ),
	( "child", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( mlt_frame_s, [
	( "parent", mlt_properties_s ),
	( "get_alpha_mask", ctypes.POINTER(ctypes.c_void_p) ),
	( "convert_image", ctypes.c_void_p ),
	( "convert_audio", ctypes.c_void_p ),
	( "stack_image", ctypes.POINTER(mlt_deque_s) ),
	( "stack_audio", ctypes.POINTER(mlt_deque_s) ),
	( "stack_service", ctypes.POINTER(mlt_deque_s) ),
])

__freeze_rpythonic_struct( mlt_filter_s, [
	( "parent", mlt_service_s ),
	( "close", ctypes.c_void_p ),
	( "process", ctypes.POINTER(ctypes.c_void_p) ),
	( "child", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( mlt_producer_s, [
	( "parent", mlt_service_s ),
	( "get_frame", ctypes.c_void_p ),
	( "close", ctypes.CFUNCTYPE(ctypes.c_void_p, ) ),
	( "close_object", ctypes.POINTER(ctypes.c_void_p) ),
	( "local", ctypes.POINTER(ctypes.c_void_p) ),
	( "child", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( mlt_track_s, [
	( "producer", ctypes.POINTER(mlt_producer_s) ),
	( "event", ctypes.POINTER(mlt_event_struct) ),
])

__freeze_rpythonic_struct( mlt_multitrack_s, [
	( "parent", mlt_producer_s ),
	( "C_list", ctypes.POINTER(ctypes.POINTER(mlt_track_s)) ),
	( "size", ctypes.c_int ),
	( "count", ctypes.c_int ),
])

__freeze_rpythonic_struct( mlt_transition_s, [
	( "parent", mlt_service_s ),
	( "close", ctypes.c_void_p ),
	( "process", ctypes.POINTER(ctypes.c_void_p) ),
	( "child", ctypes.POINTER(ctypes.c_void_p) ),
	( "producer", ctypes.POINTER(mlt_service_s) ),
	( "frames", ctypes.POINTER(ctypes.POINTER(mlt_frame_s)) ),
	( "held", ctypes.c_int ),
])

__freeze_rpythonic_struct( timespec, [
	( "tv_sec", ctypes.c_int64 ),
	( "tv_nsec", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( sched_param, [
	( "__sched_priority", ctypes.c_int ),
])

__freeze_rpythonic_struct( __sched_param, [
	( "__sched_priority", ctypes.c_int ),
])

__freeze_rpythonic_struct( cpu_set_t, [
	( "__bits", ctypes.c_uint64 ),
])

__freeze_rpythonic_struct( tm, [
	( "tm_sec", ctypes.c_int ),
	( "tm_min", ctypes.c_int ),
	( "tm_hour", ctypes.c_int ),
	( "tm_mday", ctypes.c_int ),
	( "tm_mon", ctypes.c_int ),
	( "tm_year", ctypes.c_int ),
	( "tm_wday", ctypes.c_int ),
	( "tm_yday", ctypes.c_int ),
	( "tm_isdst", ctypes.c_int ),
	( "tm_gmtoff", ctypes.c_int64 ),
	( "tm_zone", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( itimerspec, [
	( "it_interval", timespec ),
	( "it_value", timespec ),
])

__freeze_rpythonic_struct( sigevent, [
])

__freeze_rpythonic_struct( __locale_data, [
])

__freeze_rpythonic_struct( __locale_struct, [
	( "__locales", ctypes.POINTER(( __locale_data * 13 )) ),
	( "__ctype_b", ctypes.POINTER(ctypes.c_uint16) ),
	( "__ctype_tolower", ctypes.POINTER(ctypes.c_int) ),
	( "__ctype_toupper", ctypes.POINTER(ctypes.c_int) ),
	( "__names", ctypes.POINTER(( ctypes.c_char * 13 )) ),
])

__freeze_rpythonic_struct( pthread_attr_t, [
	( "__size", ( ctypes.c_char * 36 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( __pthread_internal_slist, [
	( "__next", ctypes.POINTER(__pthread_internal_slist) ),
])

__freeze_rpythonic_struct( __pthread_mutex_s, [
	( "__lock", ctypes.c_int ),
	( "__count", ctypes.c_uint ),
	( "__owner", ctypes.c_int ),
	( "__kind", ctypes.c_int ),
	( "__nusers", ctypes.c_uint ),
	#opaque-warning# <rpythonic.rpythonic.SomeThing object at 0xa97c36c>
])

__freeze_rpythonic_struct( pthread_mutex_t, [
	( "__data", __pthread_mutex_s ),
	( "__size", ( ctypes.c_char * 24 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_mutexattr_t, [
	( "__size", ( ctypes.c_char * 4 ) ),
	( "__align", ctypes.c_int ),
])

__freeze_rpythonic_struct( __data, [
	( "__lock", ctypes.c_int ),
	( "__nr_readers", ctypes.c_uint ),
	( "__readers_wakeup", ctypes.c_uint ),
	( "__writer_wakeup", ctypes.c_uint ),
	( "__nr_readers_queued", ctypes.c_uint ),
	( "__nr_writers_queued", ctypes.c_uint ),
	( "__flags", ctypes.c_ubyte ),
	( "__shared", ctypes.c_ubyte ),
	( "__pad1", ctypes.c_ubyte ),
	( "__pad2", ctypes.c_ubyte ),
	( "__writer", ctypes.c_int ),
])

__freeze_rpythonic_struct( pthread_cond_t, [
	( "__data", __data ),
	( "__size", ( ctypes.c_char * 48 ) ),
	( "__align", ctypes.c_longlong ),
])

__freeze_rpythonic_struct( pthread_condattr_t, [
	( "__size", ( ctypes.c_char * 4 ) ),
	( "__align", ctypes.c_int ),
])

__freeze_rpythonic_struct( pthread_rwlock_t, [
	( "__data", __data ),
	( "__size", ( ctypes.c_char * 32 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_rwlockattr_t, [
	( "__size", ( ctypes.c_char * 8 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_barrier_t, [
	( "__size", ( ctypes.c_char * 20 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_barrierattr_t, [
	( "__size", ( ctypes.c_char * 4 ) ),
	( "__align", ctypes.c_int ),
])

__freeze_rpythonic_struct( _pthread_cleanup_buffer, [
	( "__routine", ctypes.c_void_p ),
	( "__arg", ctypes.POINTER(ctypes.c_void_p) ),
	( "__canceltype", ctypes.c_int ),
	( "__prev", ctypes.POINTER(_pthread_cleanup_buffer) ),
])

__freeze_rpythonic_struct( __cancel_jmp_buf, [
	( "__cancel_jmp_buf", ( ctypes.c_int * 7 ) ),
	( "__mask_was_saved", ( ctypes.c_int * 1 ) ),
])

__freeze_rpythonic_struct( __pthread_unwind_buf_t, [
	( "__cancel_jmp_buf", ( __cancel_jmp_buf * 1 ) ),
	( "__pad", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( __pthread_cleanup_frame, [
	( "__cancel_routine", ctypes.c_void_p ),
	( "__cancel_arg", ctypes.POINTER(ctypes.c_void_p) ),
	( "__do_it", ctypes.c_int ),
	( "__cancel_type", ctypes.c_int ),
])

__freeze_rpythonic_struct( __jmp_buf_tag, [
])

__freeze_rpythonic_struct( mlt_consumer_s, [
	( "parent", mlt_service_s ),
	( "start", ctypes.c_void_p ),
	( "stop", ctypes.c_void_p ),
	( "is_stopped", ctypes.c_void_p ),
	( "close", ctypes.c_void_p ),
	( "local", ctypes.POINTER(ctypes.c_void_p) ),
	( "child", ctypes.POINTER(ctypes.c_void_p) ),
	( "real_time", ctypes.c_int ),
	( "ahead", ctypes.c_int ),
	( "format", ctypes.c_int ),
	( "queue", ctypes.POINTER(mlt_deque_s) ),
	( "ahead_thread", ctypes.c_uint64 ),
	( "mutex", pthread_mutex_t ),
	( "cond", pthread_cond_t ),
	( "put_mutex", pthread_mutex_t ),
	( "put_cond", pthread_cond_t ),
	( "put", ctypes.POINTER(mlt_frame_s) ),
	( "put_active", ctypes.c_int ),
	( "event_listener", ctypes.POINTER(mlt_event_struct) ),
	( "position", ctypes.c_int32 ),
])

__freeze_rpythonic_struct( mlt_playlist_clip_info, [
	( "clip", ctypes.c_int ),
	( "producer", ctypes.POINTER(mlt_producer_s) ),
	( "cut", ctypes.POINTER(mlt_producer_s) ),
	( "start", ctypes.c_int32 ),
	( "resource", ctypes.POINTER(ctypes.c_char) ),
	( "frame_in", ctypes.c_int32 ),
	( "frame_out", ctypes.c_int32 ),
	( "frame_count", ctypes.c_int32 ),
	( "length", ctypes.c_int32 ),
	( "fps", ctypes.c_float ),
	( "repeat", ctypes.c_int ),
])

__freeze_rpythonic_struct( playlist_entry_s, [
])

__freeze_rpythonic_struct( mlt_playlist_s, [
	( "parent", mlt_producer_s ),
	( "blank", mlt_producer_s ),
	( "size", ctypes.c_int ),
	( "count", ctypes.c_int ),
	( "C_list", ctypes.POINTER(ctypes.POINTER(playlist_entry_s)) ),
])

__freeze_rpythonic_struct( mlt_tractor_s, [
	( "parent", mlt_producer_s ),
	( "producer", ctypes.POINTER(mlt_service_s) ),
])

__freeze_rpythonic_struct( mlt_tokeniser, [
	( "input", ctypes.POINTER(ctypes.c_char) ),
	( "tokens", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)) ),
	( "count", ctypes.c_int ),
	( "size", ctypes.c_int ),
])

__freeze_rpythonic_struct( mlt_tokeniser_t, [
	( "input", ctypes.POINTER(ctypes.c_char) ),
	( "tokens", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)) ),
	( "count", ctypes.c_int ),
	( "size", ctypes.c_int ),
])

__freeze_rpythonic_struct( mlt_parser_s, [
	( "parent", mlt_properties_s ),
	( "on_invalid", ctypes.c_void_p ),
	( "on_unknown", ctypes.c_void_p ),
	( "on_start_producer", ctypes.c_void_p ),
	( "on_end_producer", ctypes.c_void_p ),
	( "on_start_playlist", ctypes.c_void_p ),
	( "on_end_playlist", ctypes.c_void_p ),
	( "on_start_tractor", ctypes.c_void_p ),
	( "on_end_tractor", ctypes.c_void_p ),
	( "on_start_multitrack", ctypes.c_void_p ),
	( "on_end_multitrack", ctypes.c_void_p ),
	( "on_start_track", ctypes.c_void_p ),
	( "on_end_track", ctypes.c_void_p ),
	( "on_start_filter", ctypes.c_void_p ),
	( "on_end_filter", ctypes.c_void_p ),
	( "on_start_transition", ctypes.c_void_p ),
	( "on_end_transition", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( mlt_geometry_item_s, [
	( "key", ctypes.c_int ),
	( "frame", ctypes.c_int ),
	( "distort", ctypes.c_int ),
	( "x", ctypes.c_float ),
	( "y", ctypes.c_float ),
	( "w", ctypes.c_float ),
	( "h", ctypes.c_float ),
	( "mix", ctypes.c_float ),
	( "f", ( ctypes.c_int * 5 ) ),
])

__freeze_rpythonic_struct( mlt_geometry_s, [
	( "local", ctypes.POINTER(ctypes.c_void_p) ),
])

## wrapper functions ##
mlt_pool_init = _rpythonic_function_(		"mlt_pool_init", ctypes.c_void_p, [] )

mlt_pool_alloc = _rpythonic_function_(		"mlt_pool_alloc", ctypes.POINTER(ctypes.c_void_p), [
	("size",		ctypes.c_int),] )

mlt_pool_realloc = _rpythonic_function_(		"mlt_pool_realloc", ctypes.POINTER(ctypes.c_void_p), [
	("ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.c_int),] )

mlt_pool_release = _rpythonic_function_(		"mlt_pool_release", ctypes.c_void_p, [("release",		ctypes.c_void_p)] )

mlt_pool_purge = _rpythonic_function_(		"mlt_pool_purge", ctypes.c_void_p, [] )

mlt_pool_close = _rpythonic_function_(		"mlt_pool_close", ctypes.c_void_p, [] )

mlt_destructor = _rpythonic_function_(		"mlt_destructor", ctypes.c_void_p, [] )

mlt_serialiser = _rpythonic_function_(		"mlt_serialiser", ctypes.POINTER(ctypes.c_char), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("length",		ctypes.c_int),] )

mlt_profile_init = _rpythonic_function_(		"mlt_profile_init", ctypes.POINTER(mlt_profile_s), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

mlt_profile_load_file = _rpythonic_function_(		"mlt_profile_load_file", ctypes.POINTER(mlt_profile_s), [
	("file",		ctypes.POINTER(ctypes.c_char)),] )

mlt_profile_load_properties = _rpythonic_function_(		"mlt_profile_load_properties", ctypes.POINTER(mlt_profile_s), [
	("properties",		ctypes.POINTER(mlt_properties_s)),] )

mlt_profile_load_string = _rpythonic_function_(		"mlt_profile_load_string", ctypes.POINTER(mlt_profile_s), [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

mlt_profile_fps = _rpythonic_function_(		"mlt_profile_fps", ctypes.c_double, [
	("profile",		ctypes.POINTER(mlt_profile_s)),] )

mlt_profile_sar = _rpythonic_function_(		"mlt_profile_sar", ctypes.c_double, [
	("profile",		ctypes.POINTER(mlt_profile_s)),] )

mlt_profile_dar = _rpythonic_function_(		"mlt_profile_dar", ctypes.c_double, [
	("profile",		ctypes.POINTER(mlt_profile_s)),] )

mlt_profile_close = _rpythonic_function_(		"mlt_profile_close", ctypes.c_void_p, [
	("profile",		ctypes.POINTER(mlt_profile_s)),] )

mlt_profile_clone = _rpythonic_function_(		"mlt_profile_clone", ctypes.POINTER(mlt_profile_s), [
	("profile",		ctypes.POINTER(mlt_profile_s)),] )

mlt_repository_callback = _rpythonic_function_(		"mlt_repository_callback", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

mlt_register_callback = _rpythonic_function_(		"mlt_register_callback", ctypes.POINTER(ctypes.c_void_p), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

mlt_metadata_callback = _rpythonic_function_(		"mlt_metadata_callback", ctypes.POINTER(mlt_properties_s), [
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

mlt_repository_init = _rpythonic_function_(		"mlt_repository_init", ctypes.POINTER(mlt_repository_s), [
	("directory",		ctypes.POINTER(ctypes.c_char)),] )

mlt_repository_register = _rpythonic_function_(		"mlt_repository_register", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_repository_s)),
	("service_type",		ctypes.c_int),
	("service",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), ctypes.POINTER(ctypes.c_void_p),ctypes.c_int,ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),))),] )

mlt_repository_create = _rpythonic_function_(		"mlt_repository_create", ctypes.POINTER(ctypes.c_void_p), [
	("C_self",		ctypes.POINTER(mlt_repository_s)),
	("profile",		ctypes.POINTER(mlt_profile_s)),
	("C_type",		ctypes.c_int),
	("service",		ctypes.POINTER(ctypes.c_char)),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),] )

mlt_repository_close = _rpythonic_function_(		"mlt_repository_close", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_repository_s)),] )

mlt_repository_consumers = _rpythonic_function_(		"mlt_repository_consumers", ctypes.POINTER(mlt_properties_s), [
	("C_self",		ctypes.POINTER(mlt_repository_s)),] )

mlt_repository_filters = _rpythonic_function_(		"mlt_repository_filters", ctypes.POINTER(mlt_properties_s), [
	("C_self",		ctypes.POINTER(mlt_repository_s)),] )

mlt_repository_producers = _rpythonic_function_(		"mlt_repository_producers", ctypes.POINTER(mlt_properties_s), [
	("C_self",		ctypes.POINTER(mlt_repository_s)),] )

mlt_repository_transitions = _rpythonic_function_(		"mlt_repository_transitions", ctypes.POINTER(mlt_properties_s), [
	("C_self",		ctypes.POINTER(mlt_repository_s)),] )

mlt_repository_register_metadata = _rpythonic_function_(		"mlt_repository_register_metadata", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_repository_s)),
	("C_type",		ctypes.c_int),
	("service",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.CFUNCTYPE(ctypes.POINTER(mlt_properties_s), ctypes.c_int,ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

mlt_repository_metadata = _rpythonic_function_(		"mlt_repository_metadata", ctypes.POINTER(mlt_properties_s), [
	("C_self",		ctypes.POINTER(mlt_repository_s)),
	("C_type",		ctypes.c_int),
	("service",		ctypes.POINTER(ctypes.c_char)),] )

mlt_repository_languages = _rpythonic_function_(		"mlt_repository_languages", ctypes.POINTER(mlt_properties_s), [
	("C_self",		ctypes.POINTER(mlt_repository_s)),] )

mlt_factory_init = _rpythonic_function_(		"mlt_factory_init", ctypes.POINTER(mlt_repository_s), [
	("directory",		ctypes.POINTER(ctypes.c_char)),] )

mlt_factory_directory = _rpythonic_function_(		"mlt_factory_directory", ctypes.POINTER(ctypes.c_char), [] )

mlt_environment = _rpythonic_function_(		"mlt_environment", ctypes.POINTER(ctypes.c_char), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

mlt_environment_set = _rpythonic_function_(		"mlt_environment_set", ctypes.c_int, [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

mlt_factory_event_object = _rpythonic_function_(		"mlt_factory_event_object", ctypes.POINTER(mlt_properties_s), [] )

mlt_factory_producer = _rpythonic_function_(		"mlt_factory_producer", ctypes.POINTER(mlt_producer_s), [
	("profile",		ctypes.POINTER(mlt_profile_s)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("input",		ctypes.POINTER(ctypes.c_void_p)),] )

mlt_factory_filter = _rpythonic_function_(		"mlt_factory_filter", ctypes.POINTER(mlt_filter_s), [
	("profile",		ctypes.POINTER(mlt_profile_s)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("input",		ctypes.POINTER(ctypes.c_void_p)),] )

mlt_factory_transition = _rpythonic_function_(		"mlt_factory_transition", ctypes.POINTER(mlt_transition_s), [
	("profile",		ctypes.POINTER(mlt_profile_s)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("input",		ctypes.POINTER(ctypes.c_void_p)),] )

mlt_factory_consumer = _rpythonic_function_(		"mlt_factory_consumer", ctypes.POINTER(mlt_consumer_s), [
	("profile",		ctypes.POINTER(mlt_profile_s)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("input",		ctypes.POINTER(ctypes.c_void_p)),] )

mlt_factory_register_for_clean_up = _rpythonic_function_(		"mlt_factory_register_for_clean_up", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("destructor",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

mlt_factory_close = _rpythonic_function_(		"mlt_factory_close", ctypes.c_void_p, [] )

mlt_global_properties = _rpythonic_function_(		"mlt_global_properties", ctypes.POINTER(mlt_properties_s), [] )

mlt_transmitter = _rpythonic_function_(		"mlt_transmitter", ctypes.c_void_p, [] )

mlt_listener = _rpythonic_function_(		"mlt_listener", ctypes.c_void_p, [] )

mlt_events_init = _rpythonic_function_(		"mlt_events_init", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_properties_s)),] )

mlt_events_register = _rpythonic_function_(		"mlt_events_register", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_properties_s)),
	("C_id",		ctypes.POINTER(ctypes.c_char)),
	("transmitter",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

mlt_events_fire = _rpythonic_function_(		"mlt_events_fire", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_properties_s)),
	("C_id",		ctypes.POINTER(ctypes.c_char)),] )

mlt_events_listen = _rpythonic_function_(		"mlt_events_listen", ctypes.POINTER(mlt_event_struct), [
	("C_self",		ctypes.POINTER(mlt_properties_s)),
	("service",		ctypes.POINTER(ctypes.c_void_p)),
	("C_id",		ctypes.POINTER(ctypes.c_char)),
	("listener",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

mlt_events_block = _rpythonic_function_(		"mlt_events_block", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_properties_s)),
	("service",		ctypes.POINTER(ctypes.c_void_p)),] )

mlt_events_unblock = _rpythonic_function_(		"mlt_events_unblock", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_properties_s)),
	("service",		ctypes.POINTER(ctypes.c_void_p)),] )

mlt_events_disconnect = _rpythonic_function_(		"mlt_events_disconnect", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_properties_s)),
	("service",		ctypes.POINTER(ctypes.c_void_p)),] )

mlt_events_setup_wait_for = _rpythonic_function_(		"mlt_events_setup_wait_for", ctypes.POINTER(mlt_event_struct), [
	("C_self",		ctypes.POINTER(mlt_properties_s)),
	("C_id",		ctypes.POINTER(ctypes.c_char)),] )

mlt_events_wait_for = _rpythonic_function_(		"mlt_events_wait_for", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_properties_s)),
	("event",		ctypes.POINTER(mlt_event_struct)),] )

mlt_events_close_wait_for = _rpythonic_function_(		"mlt_events_close_wait_for", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_properties_s)),
	("event",		ctypes.POINTER(mlt_event_struct)),] )

mlt_event_inc_ref = _rpythonic_function_(		"mlt_event_inc_ref", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_event_struct)),] )

mlt_event_block = _rpythonic_function_(		"mlt_event_block", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_event_struct)),] )

mlt_event_unblock = _rpythonic_function_(		"mlt_event_unblock", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_event_struct)),] )

mlt_event_close = _rpythonic_function_(		"mlt_event_close", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_event_struct)),] )

_IO_getc = _rpythonic_function_(		"_IO_getc", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_putc = _rpythonic_function_(		"_IO_putc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_feof = _rpythonic_function_(		"_IO_feof", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_ferror = _rpythonic_function_(		"_IO_ferror", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_peekc_locked = _rpythonic_function_(		"_IO_peekc_locked", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_flockfile = _rpythonic_function_(		"_IO_flockfile", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_IO_funlockfile = _rpythonic_function_(		"_IO_funlockfile", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_IO_ftrylockfile = _rpythonic_function_(		"_IO_ftrylockfile", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_IO_vfscanf = _rpythonic_function_(		"_IO_vfscanf", ctypes.c_int, [
	("__restrict",		ctypes.POINTER(_IO_FILE)),
	("__restrict",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_char),
	("__restrict",		ctypes.POINTER(ctypes.c_int)),] )

_IO_vfprintf = _rpythonic_function_(		"_IO_vfprintf", ctypes.c_int, [
	("__restrict",		ctypes.POINTER(_IO_FILE)),
	("__restrict",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_char),] )

_IO_padn = _rpythonic_function_(		"_IO_padn", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

_IO_sgetn = _rpythonic_function_(		"_IO_sgetn", ctypes.c_uint, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_uint),] )

_IO_seekoff = _rpythonic_function_(		"_IO_seekoff", ctypes.c_longlong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_longlong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

_IO_seekpos = _rpythonic_function_(		"_IO_seekpos", ctypes.c_longlong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_longlong),
	("none",		ctypes.c_int),] )

_IO_free_backup_area = _rpythonic_function_(		"_IO_free_backup_area", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

remove = _rpythonic_function_(		"remove", ctypes.c_int, [
	("__filename",		ctypes.POINTER(ctypes.c_char)),] )

rename = _rpythonic_function_(		"rename", ctypes.c_int, [
	("__old",		ctypes.POINTER(ctypes.c_char)),
	("__new",		ctypes.POINTER(ctypes.c_char)),] )

renameat = _rpythonic_function_(		"renameat", ctypes.c_int, [
	("__oldfd",		ctypes.c_int),
	("__old",		ctypes.POINTER(ctypes.c_char)),
	("__newfd",		ctypes.c_int),
	("__new",		ctypes.POINTER(ctypes.c_char)),] )

tmpfile = _rpythonic_function_(		"tmpfile", ctypes.POINTER(_IO_FILE), [] )

tmpnam = _rpythonic_function_(		"tmpnam", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

tmpnam_r = _rpythonic_function_(		"tmpnam_r", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

tempnam = _rpythonic_function_(		"tempnam", ctypes.POINTER(ctypes.c_char), [
	("__dir",		ctypes.POINTER(ctypes.c_char)),
	("__pfx",		ctypes.POINTER(ctypes.c_char)),] )

fclose = _rpythonic_function_(		"fclose", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fflush = _rpythonic_function_(		"fflush", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fflush_unlocked = _rpythonic_function_(		"fflush_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fopen = _rpythonic_function_(		"fopen", ctypes.POINTER(_IO_FILE), [
	("__filename",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

freopen = _rpythonic_function_(		"freopen", ctypes.POINTER(_IO_FILE), [
	("__filename",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.POINTER(ctypes.c_char)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fdopen = _rpythonic_function_(		"fdopen", ctypes.POINTER(_IO_FILE), [
	("__fd",		ctypes.c_int),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

fmemopen = _rpythonic_function_(		"fmemopen", ctypes.POINTER(_IO_FILE), [
	("__s",		ctypes.POINTER(ctypes.c_void_p)),
	("__len",		ctypes.c_uint),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

open_memstream = _rpythonic_function_(		"open_memstream", ctypes.POINTER(_IO_FILE), [
	("__bufloc",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__sizeloc",		ctypes.POINTER(ctypes.c_uint)),] )

setbuf = _rpythonic_function_(		"setbuf", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

setvbuf = _rpythonic_function_(		"setvbuf", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.c_int),
	("__n",		ctypes.c_uint),] )

setbuffer = _rpythonic_function_(		"setbuffer", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__size",		ctypes.c_uint),] )

setlinebuf = _rpythonic_function_(		"setlinebuf", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fprintf = _rpythonic_function_(		"fprintf", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

printf = _rpythonic_function_(		"printf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

sprintf = _rpythonic_function_(		"sprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

vfprintf = _rpythonic_function_(		"vfprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vprintf = _rpythonic_function_(		"vprintf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vsprintf = _rpythonic_function_(		"vsprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

snprintf = _rpythonic_function_(		"snprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__maxlen",		ctypes.c_uint),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

vsnprintf = _rpythonic_function_(		"vsnprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__maxlen",		ctypes.c_uint),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vdprintf = _rpythonic_function_(		"vdprintf", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__fmt",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

dprintf = _rpythonic_function_(		"dprintf", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__fmt",		ctypes.POINTER(ctypes.c_char)),] )

fscanf = _rpythonic_function_(		"fscanf", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

scanf = _rpythonic_function_(		"scanf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

sscanf = _rpythonic_function_(		"sscanf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

vfscanf = _rpythonic_function_(		"vfscanf", ctypes.c_int, [
	("__s",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vscanf = _rpythonic_function_(		"vscanf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vsscanf = _rpythonic_function_(		"vsscanf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

fgetc = _rpythonic_function_(		"fgetc", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getc = _rpythonic_function_(		"getc", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getchar = _rpythonic_function_(		"getchar", ctypes.c_int, [] )

getc_unlocked = _rpythonic_function_(		"getc_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getchar_unlocked = _rpythonic_function_(		"getchar_unlocked", ctypes.c_int, [] )

fgetc_unlocked = _rpythonic_function_(		"fgetc_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fputc = _rpythonic_function_(		"fputc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putc = _rpythonic_function_(		"putc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putchar = _rpythonic_function_(		"putchar", ctypes.c_int, [
	("__c",		ctypes.c_int),] )

fputc_unlocked = _rpythonic_function_(		"fputc_unlocked", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putc_unlocked = _rpythonic_function_(		"putc_unlocked", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putchar_unlocked = _rpythonic_function_(		"putchar_unlocked", ctypes.c_int, [
	("__c",		ctypes.c_int),] )

getw = _rpythonic_function_(		"getw", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putw = _rpythonic_function_(		"putw", ctypes.c_int, [
	("__w",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fgets = _rpythonic_function_(		"fgets", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

gets = _rpythonic_function_(		"gets", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

getdelim = _rpythonic_function_(		"getdelim", ctypes.c_int, [
	("__lineptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__n",		ctypes.POINTER(ctypes.c_uint)),
	("__delimiter",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getline = _rpythonic_function_(		"getline", ctypes.c_int, [
	("__lineptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__n",		ctypes.POINTER(ctypes.c_uint)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fputs = _rpythonic_function_(		"fputs", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

puts = _rpythonic_function_(		"puts", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

ungetc = _rpythonic_function_(		"ungetc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fread = _rpythonic_function_(		"fread", ctypes.c_uint, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint),
	("__n",		ctypes.c_uint),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fwrite = _rpythonic_function_(		"fwrite", ctypes.c_uint, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint),
	("__n",		ctypes.c_uint),
	("__s",		ctypes.POINTER(_IO_FILE)),] )

fread_unlocked = _rpythonic_function_(		"fread_unlocked", ctypes.c_uint, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint),
	("__n",		ctypes.c_uint),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fwrite_unlocked = _rpythonic_function_(		"fwrite_unlocked", ctypes.c_uint, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint),
	("__n",		ctypes.c_uint),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fseek = _rpythonic_function_(		"fseek", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__off",		ctypes.c_int64),
	("__whence",		ctypes.c_int),] )

ftell = _rpythonic_function_(		"ftell", ctypes.c_int64, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

rewind = _rpythonic_function_(		"rewind", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fseeko = _rpythonic_function_(		"fseeko", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__off",		ctypes.c_int64),
	("__whence",		ctypes.c_int),] )

ftello = _rpythonic_function_(		"ftello", ctypes.c_int64, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fgetpos = _rpythonic_function_(		"fgetpos", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__pos",		ctypes.POINTER(_G_fpos_t)),] )

fsetpos = _rpythonic_function_(		"fsetpos", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__pos",		ctypes.POINTER(_G_fpos_t)),] )

clearerr = _rpythonic_function_(		"clearerr", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

feof = _rpythonic_function_(		"feof", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ferror = _rpythonic_function_(		"ferror", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

clearerr_unlocked = _rpythonic_function_(		"clearerr_unlocked", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

feof_unlocked = _rpythonic_function_(		"feof_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ferror_unlocked = _rpythonic_function_(		"ferror_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

perror = _rpythonic_function_(		"perror", ctypes.c_void_p, [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

fileno = _rpythonic_function_(		"fileno", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fileno_unlocked = _rpythonic_function_(		"fileno_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

popen = _rpythonic_function_(		"popen", ctypes.POINTER(_IO_FILE), [
	("__command",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

pclose = _rpythonic_function_(		"pclose", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ctermid = _rpythonic_function_(		"ctermid", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

flockfile = _rpythonic_function_(		"flockfile", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ftrylockfile = _rpythonic_function_(		"ftrylockfile", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

funlockfile = _rpythonic_function_(		"funlockfile", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

mlt_properties_init = _rpythonic_function_(		"mlt_properties_init", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("child",		ctypes.POINTER(ctypes.c_void_p)),] )

mlt_properties_new = _rpythonic_function_(		"mlt_properties_new", ctypes.POINTER(mlt_properties_s), [] )

mlt_properties_load = _rpythonic_function_(		"mlt_properties_load", ctypes.POINTER(mlt_properties_s), [
	("file",		ctypes.POINTER(ctypes.c_char)),] )

mlt_properties_inc_ref = _rpythonic_function_(		"mlt_properties_inc_ref", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_properties_s)),] )

mlt_properties_dec_ref = _rpythonic_function_(		"mlt_properties_dec_ref", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_properties_s)),] )

mlt_properties_ref_count = _rpythonic_function_(		"mlt_properties_ref_count", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_properties_s)),] )

mlt_properties_mirror = _rpythonic_function_(		"mlt_properties_mirror", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_properties_s)),
	("that",		ctypes.POINTER(mlt_properties_s)),] )

mlt_properties_inherit = _rpythonic_function_(		"mlt_properties_inherit", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_properties_s)),
	("that",		ctypes.POINTER(mlt_properties_s)),] )

mlt_properties_pass = _rpythonic_function_(		"mlt_properties_pass", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_properties_s)),
	("that",		ctypes.POINTER(mlt_properties_s)),
	("prefix",		ctypes.POINTER(ctypes.c_char)),] )

mlt_properties_pass_property = _rpythonic_function_(		"mlt_properties_pass_property", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_properties_s)),
	("that",		ctypes.POINTER(mlt_properties_s)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

mlt_properties_pass_list = _rpythonic_function_(		"mlt_properties_pass_list", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_properties_s)),
	("that",		ctypes.POINTER(mlt_properties_s)),
	("C_list",		ctypes.POINTER(ctypes.c_char)),] )

mlt_properties_set = _rpythonic_function_(		"mlt_properties_set", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_properties_s)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

mlt_properties_set_or_default = _rpythonic_function_(		"mlt_properties_set_or_default", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_properties_s)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_char)),
	("C_def",		ctypes.POINTER(ctypes.c_char)),] )

mlt_properties_parse = _rpythonic_function_(		"mlt_properties_parse", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_properties_s)),
	("namevalue",		ctypes.POINTER(ctypes.c_char)),] )

mlt_properties_get = _rpythonic_function_(		"mlt_properties_get", ctypes.POINTER(ctypes.c_char), [
	("C_self",		ctypes.POINTER(mlt_properties_s)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

mlt_properties_get_name = _rpythonic_function_(		"mlt_properties_get_name", ctypes.POINTER(ctypes.c_char), [
	("C_self",		ctypes.POINTER(mlt_properties_s)),
	("index",		ctypes.c_int),] )

mlt_properties_get_value = _rpythonic_function_(		"mlt_properties_get_value", ctypes.POINTER(ctypes.c_char), [
	("C_self",		ctypes.POINTER(mlt_properties_s)),
	("index",		ctypes.c_int),] )

mlt_properties_get_data_at = _rpythonic_function_(		"mlt_properties_get_data_at", ctypes.POINTER(ctypes.c_void_p), [
	("C_self",		ctypes.POINTER(mlt_properties_s)),
	("index",		ctypes.c_int),
	("size",		ctypes.POINTER(ctypes.c_int)),] )

mlt_properties_get_int = _rpythonic_function_(		"mlt_properties_get_int", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_properties_s)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

mlt_properties_set_int = _rpythonic_function_(		"mlt_properties_set_int", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_properties_s)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_int),] )

mlt_properties_get_int64 = _rpythonic_function_(		"mlt_properties_get_int64", ctypes.c_int64, [
	("C_self",		ctypes.POINTER(mlt_properties_s)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

mlt_properties_set_int64 = _rpythonic_function_(		"mlt_properties_set_int64", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_properties_s)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_int64),] )

mlt_properties_get_double = _rpythonic_function_(		"mlt_properties_get_double", ctypes.c_double, [
	("C_self",		ctypes.POINTER(mlt_properties_s)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

mlt_properties_set_double = _rpythonic_function_(		"mlt_properties_set_double", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_properties_s)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_double),] )

mlt_properties_get_position = _rpythonic_function_(		"mlt_properties_get_position", ctypes.c_int32, [
	("C_self",		ctypes.POINTER(mlt_properties_s)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

mlt_properties_set_position = _rpythonic_function_(		"mlt_properties_set_position", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_properties_s)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_int32),] )

mlt_properties_set_data = _rpythonic_function_(		"mlt_properties_set_data", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_properties_s)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_void_p)),
	("length",		ctypes.c_int),
	("none",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("none",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_void_p),ctypes.c_int,))),] )

mlt_properties_get_data = _rpythonic_function_(		"mlt_properties_get_data", ctypes.POINTER(ctypes.c_void_p), [
	("C_self",		ctypes.POINTER(mlt_properties_s)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.POINTER(ctypes.c_int)),] )

mlt_properties_rename = _rpythonic_function_(		"mlt_properties_rename", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_properties_s)),
	("source",		ctypes.POINTER(ctypes.c_char)),
	("dest",		ctypes.POINTER(ctypes.c_char)),] )

mlt_properties_count = _rpythonic_function_(		"mlt_properties_count", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_properties_s)),] )

mlt_properties_dump = _rpythonic_function_(		"mlt_properties_dump", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_properties_s)),
	("output",		ctypes.POINTER(_IO_FILE)),] )

mlt_properties_debug = _rpythonic_function_(		"mlt_properties_debug", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_properties_s)),
	("title",		ctypes.POINTER(ctypes.c_char)),
	("output",		ctypes.POINTER(_IO_FILE)),] )

mlt_properties_save = _rpythonic_function_(		"mlt_properties_save", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

mlt_properties_dir_list = _rpythonic_function_(		"mlt_properties_dir_list", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),] )

mlt_properties_close = _rpythonic_function_(		"mlt_properties_close", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_properties_s)),] )

mlt_properties_is_sequence = _rpythonic_function_(		"mlt_properties_is_sequence", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_properties_s)),] )

mlt_properties_parse_yaml = _rpythonic_function_(		"mlt_properties_parse_yaml", ctypes.POINTER(mlt_properties_s), [
	("file",		ctypes.POINTER(ctypes.c_char)),] )

mlt_properties_serialise_yaml = _rpythonic_function_(		"mlt_properties_serialise_yaml", ctypes.POINTER(ctypes.c_char), [
	("C_self",		ctypes.POINTER(mlt_properties_s)),] )

mlt_deque_init = _rpythonic_function_(		"mlt_deque_init", ctypes.POINTER(mlt_deque_s), [] )

mlt_deque_count = _rpythonic_function_(		"mlt_deque_count", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_deque_s)),] )

mlt_deque_push_back = _rpythonic_function_(		"mlt_deque_push_back", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_deque_s)),
	("item",		ctypes.POINTER(ctypes.c_void_p)),] )

mlt_deque_pop_back = _rpythonic_function_(		"mlt_deque_pop_back", ctypes.POINTER(ctypes.c_void_p), [
	("C_self",		ctypes.POINTER(mlt_deque_s)),] )

mlt_deque_push_front = _rpythonic_function_(		"mlt_deque_push_front", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_deque_s)),
	("item",		ctypes.POINTER(ctypes.c_void_p)),] )

mlt_deque_pop_front = _rpythonic_function_(		"mlt_deque_pop_front", ctypes.POINTER(ctypes.c_void_p), [
	("C_self",		ctypes.POINTER(mlt_deque_s)),] )

mlt_deque_peek_back = _rpythonic_function_(		"mlt_deque_peek_back", ctypes.POINTER(ctypes.c_void_p), [
	("C_self",		ctypes.POINTER(mlt_deque_s)),] )

mlt_deque_peek_front = _rpythonic_function_(		"mlt_deque_peek_front", ctypes.POINTER(ctypes.c_void_p), [
	("C_self",		ctypes.POINTER(mlt_deque_s)),] )

mlt_deque_push_back_int = _rpythonic_function_(		"mlt_deque_push_back_int", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_deque_s)),
	("item",		ctypes.c_int),] )

mlt_deque_pop_back_int = _rpythonic_function_(		"mlt_deque_pop_back_int", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_deque_s)),] )

mlt_deque_push_front_int = _rpythonic_function_(		"mlt_deque_push_front_int", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_deque_s)),
	("item",		ctypes.c_int),] )

mlt_deque_pop_front_int = _rpythonic_function_(		"mlt_deque_pop_front_int", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_deque_s)),] )

mlt_deque_peek_back_int = _rpythonic_function_(		"mlt_deque_peek_back_int", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_deque_s)),] )

mlt_deque_peek_front_int = _rpythonic_function_(		"mlt_deque_peek_front_int", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_deque_s)),] )

mlt_deque_push_back_double = _rpythonic_function_(		"mlt_deque_push_back_double", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_deque_s)),
	("item",		ctypes.c_double),] )

mlt_deque_pop_back_double = _rpythonic_function_(		"mlt_deque_pop_back_double", ctypes.c_double, [
	("C_self",		ctypes.POINTER(mlt_deque_s)),] )

mlt_deque_push_front_double = _rpythonic_function_(		"mlt_deque_push_front_double", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_deque_s)),
	("item",		ctypes.c_double),] )

mlt_deque_pop_front_double = _rpythonic_function_(		"mlt_deque_pop_front_double", ctypes.c_double, [
	("C_self",		ctypes.POINTER(mlt_deque_s)),] )

mlt_deque_peek_back_double = _rpythonic_function_(		"mlt_deque_peek_back_double", ctypes.c_double, [
	("C_self",		ctypes.POINTER(mlt_deque_s)),] )

mlt_deque_peek_front_double = _rpythonic_function_(		"mlt_deque_peek_front_double", ctypes.c_double, [
	("C_self",		ctypes.POINTER(mlt_deque_s)),] )

mlt_deque_close = _rpythonic_function_(		"mlt_deque_close", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_deque_s)),] )

get_frame = _rpythonic_function_(		"get_frame", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_service_s)),
	("frame",		ctypes.POINTER(ctypes.POINTER(mlt_frame_s))),
	("index",		ctypes.c_int),] )

mlt_service_init = _rpythonic_function_(		"mlt_service_init", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_service_s)),
	("child",		ctypes.POINTER(ctypes.c_void_p)),] )

mlt_service_lock = _rpythonic_function_(		"mlt_service_lock", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_service_s)),] )

mlt_service_unlock = _rpythonic_function_(		"mlt_service_unlock", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_service_s)),] )

mlt_service_identify = _rpythonic_function_(		"mlt_service_identify", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_service_s)),] )

mlt_service_connect_producer = _rpythonic_function_(		"mlt_service_connect_producer", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_service_s)),
	("producer",		ctypes.POINTER(mlt_service_s)),
	("index",		ctypes.c_int),] )

mlt_service_get_producer = _rpythonic_function_(		"mlt_service_get_producer", ctypes.POINTER(mlt_service_s), [
	("C_self",		ctypes.POINTER(mlt_service_s)),] )

mlt_service_get_frame = _rpythonic_function_(		"mlt_service_get_frame", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_service_s)),
	("frame",		ctypes.POINTER(ctypes.POINTER(mlt_frame_s))),
	("index",		ctypes.c_int),] )

mlt_service_properties = _rpythonic_function_(		"mlt_service_properties", ctypes.POINTER(mlt_properties_s), [
	("C_self",		ctypes.POINTER(mlt_service_s)),] )

mlt_service_consumer = _rpythonic_function_(		"mlt_service_consumer", ctypes.POINTER(mlt_service_s), [
	("C_self",		ctypes.POINTER(mlt_service_s)),] )

mlt_service_producer = _rpythonic_function_(		"mlt_service_producer", ctypes.POINTER(mlt_service_s), [
	("C_self",		ctypes.POINTER(mlt_service_s)),] )

mlt_service_attach = _rpythonic_function_(		"mlt_service_attach", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_service_s)),
	("filter",		ctypes.POINTER(mlt_filter_s)),] )

mlt_service_detach = _rpythonic_function_(		"mlt_service_detach", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_service_s)),
	("filter",		ctypes.POINTER(mlt_filter_s)),] )

mlt_service_apply_filters = _rpythonic_function_(		"mlt_service_apply_filters", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_service_s)),
	("frame",		ctypes.POINTER(mlt_frame_s)),
	("index",		ctypes.c_int),] )

mlt_service_filter = _rpythonic_function_(		"mlt_service_filter", ctypes.POINTER(mlt_filter_s), [
	("C_self",		ctypes.POINTER(mlt_service_s)),
	("index",		ctypes.c_int),] )

mlt_service_profile = _rpythonic_function_(		"mlt_service_profile", ctypes.POINTER(mlt_profile_s), [
	("C_self",		ctypes.POINTER(mlt_service_s)),] )

mlt_service_close = _rpythonic_function_(		"mlt_service_close", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_service_s)),] )

mlt_service_cache_put = _rpythonic_function_(		"mlt_service_cache_put", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_service_s)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.c_int),
	("destructor",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

mlt_service_cache_get = _rpythonic_function_(		"mlt_service_cache_get", ctypes.POINTER(mlt_cache_item_s), [
	("C_self",		ctypes.POINTER(mlt_service_s)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

mlt_service_cache_set_size = _rpythonic_function_(		"mlt_service_cache_set_size", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_service_s)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_int),] )

mlt_service_cache_purge = _rpythonic_function_(		"mlt_service_cache_purge", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_service_s)),] )

mlt_get_image = _rpythonic_function_(		"mlt_get_image", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_frame_s)),
	("buffer",		ctypes.POINTER(ctypes.POINTER(ctypes.c_uint8))),
	("format",		ctypes.POINTER(ctypes.c_int)),
	("width",		ctypes.POINTER(ctypes.c_int)),
	("height",		ctypes.POINTER(ctypes.c_int)),
	("writable",		ctypes.c_int),] )

mlt_get_audio = _rpythonic_function_(		"mlt_get_audio", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_frame_s)),
	("buffer",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("format",		ctypes.POINTER(ctypes.c_int)),
	("frequency",		ctypes.POINTER(ctypes.c_int)),
	("channels",		ctypes.POINTER(ctypes.c_int)),
	("samples",		ctypes.POINTER(ctypes.c_int)),] )

get_alpha_mask = _rpythonic_function_(		"get_alpha_mask", ctypes.POINTER(ctypes.c_uint8), [
	("C_self",		ctypes.POINTER(mlt_frame_s)),] )

convert_image = _rpythonic_function_(		"convert_image", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_frame_s)),
	("image",		ctypes.POINTER(ctypes.POINTER(ctypes.c_uint8))),
	("input",		ctypes.POINTER(ctypes.c_int)),
	("output",		ctypes.c_int),] )

convert_audio = _rpythonic_function_(		"convert_audio", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_frame_s)),
	("audio",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("input",		ctypes.POINTER(ctypes.c_int)),
	("output",		ctypes.c_int),] )

mlt_frame_init = _rpythonic_function_(		"mlt_frame_init", ctypes.POINTER(mlt_frame_s), [
	("service",		ctypes.POINTER(mlt_service_s)),] )

mlt_frame_properties = _rpythonic_function_(		"mlt_frame_properties", ctypes.POINTER(mlt_properties_s), [
	("C_self",		ctypes.POINTER(mlt_frame_s)),] )

mlt_frame_is_test_card = _rpythonic_function_(		"mlt_frame_is_test_card", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_frame_s)),] )

mlt_frame_is_test_audio = _rpythonic_function_(		"mlt_frame_is_test_audio", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_frame_s)),] )

mlt_frame_get_aspect_ratio = _rpythonic_function_(		"mlt_frame_get_aspect_ratio", ctypes.c_double, [
	("C_self",		ctypes.POINTER(mlt_frame_s)),] )

mlt_frame_set_aspect_ratio = _rpythonic_function_(		"mlt_frame_set_aspect_ratio", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_frame_s)),
	("value",		ctypes.c_double),] )

mlt_frame_get_position = _rpythonic_function_(		"mlt_frame_get_position", ctypes.c_int32, [
	("C_self",		ctypes.POINTER(mlt_frame_s)),] )

mlt_frame_set_position = _rpythonic_function_(		"mlt_frame_set_position", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_frame_s)),
	("value",		ctypes.c_int32),] )

mlt_frame_replace_image = _rpythonic_function_(		"mlt_frame_replace_image", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_frame_s)),
	("image",		ctypes.POINTER(ctypes.c_uint8)),
	("format",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

mlt_frame_get_image = _rpythonic_function_(		"mlt_frame_get_image", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_frame_s)),
	("buffer",		ctypes.POINTER(ctypes.POINTER(ctypes.c_uint8))),
	("format",		ctypes.POINTER(ctypes.c_int)),
	("width",		ctypes.POINTER(ctypes.c_int)),
	("height",		ctypes.POINTER(ctypes.c_int)),
	("writable",		ctypes.c_int),] )

mlt_frame_get_alpha_mask = _rpythonic_function_(		"mlt_frame_get_alpha_mask", ctypes.POINTER(ctypes.c_uint8), [
	("C_self",		ctypes.POINTER(mlt_frame_s)),] )

mlt_frame_get_audio = _rpythonic_function_(		"mlt_frame_get_audio", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_frame_s)),
	("buffer",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("format",		ctypes.POINTER(ctypes.c_int)),
	("frequency",		ctypes.POINTER(ctypes.c_int)),
	("channels",		ctypes.POINTER(ctypes.c_int)),
	("samples",		ctypes.POINTER(ctypes.c_int)),] )

mlt_frame_set_audio = _rpythonic_function_(		"mlt_frame_set_audio", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_frame_s)),
	("buffer",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("size",		ctypes.c_int),
	("none",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

mlt_frame_get_waveform = _rpythonic_function_(		"mlt_frame_get_waveform", ctypes.POINTER(ctypes.c_ubyte), [
	("C_self",		ctypes.POINTER(mlt_frame_s)),
	("w",		ctypes.c_int),
	("h",		ctypes.c_int),] )

mlt_frame_push_get_image = _rpythonic_function_(		"mlt_frame_push_get_image", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_frame_s)),
	("get_image",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(mlt_frame_s),ctypes.POINTER(ctypes.POINTER(ctypes.c_uint8)),ctypes.POINTER(ctypes.c_int),ctypes.POINTER(ctypes.c_int),ctypes.POINTER(ctypes.c_int),ctypes.c_int,)),] )

mlt_frame_pop_get_image = _rpythonic_function_(		"mlt_frame_pop_get_image", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(mlt_frame_s),ctypes.POINTER(ctypes.POINTER(ctypes.c_uint8)),ctypes.POINTER(ctypes.c_int),ctypes.POINTER(ctypes.c_int),ctypes.POINTER(ctypes.c_int),ctypes.c_int,), [
	("C_self",		ctypes.POINTER(mlt_frame_s)),] )

mlt_frame_push_frame = _rpythonic_function_(		"mlt_frame_push_frame", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_frame_s)),
	("that",		ctypes.POINTER(mlt_frame_s)),] )

mlt_frame_pop_frame = _rpythonic_function_(		"mlt_frame_pop_frame", ctypes.POINTER(mlt_frame_s), [
	("C_self",		ctypes.POINTER(mlt_frame_s)),] )

mlt_frame_push_service = _rpythonic_function_(		"mlt_frame_push_service", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_frame_s)),
	("that",		ctypes.POINTER(ctypes.c_void_p)),] )

mlt_frame_pop_service = _rpythonic_function_(		"mlt_frame_pop_service", ctypes.POINTER(ctypes.c_void_p), [
	("C_self",		ctypes.POINTER(mlt_frame_s)),] )

mlt_frame_push_service_int = _rpythonic_function_(		"mlt_frame_push_service_int", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_frame_s)),
	("that",		ctypes.c_int),] )

mlt_frame_pop_service_int = _rpythonic_function_(		"mlt_frame_pop_service_int", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_frame_s)),] )

mlt_frame_push_audio = _rpythonic_function_(		"mlt_frame_push_audio", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_frame_s)),
	("that",		ctypes.POINTER(ctypes.c_void_p)),] )

mlt_frame_pop_audio = _rpythonic_function_(		"mlt_frame_pop_audio", ctypes.POINTER(ctypes.c_void_p), [
	("C_self",		ctypes.POINTER(mlt_frame_s)),] )

mlt_frame_service_stack = _rpythonic_function_(		"mlt_frame_service_stack", ctypes.POINTER(mlt_deque_s), [
	("C_self",		ctypes.POINTER(mlt_frame_s)),] )

mlt_frame_get_original_producer = _rpythonic_function_(		"mlt_frame_get_original_producer", ctypes.POINTER(mlt_producer_s), [
	("C_self",		ctypes.POINTER(mlt_frame_s)),] )

mlt_frame_close = _rpythonic_function_(		"mlt_frame_close", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_frame_s)),] )

mlt_sample_calculator = _rpythonic_function_(		"mlt_sample_calculator", ctypes.c_int, [
	("fps",		ctypes.c_float),
	("frequency",		ctypes.c_int),
	("position",		ctypes.c_int64),] )

mlt_sample_calculator_to_now = _rpythonic_function_(		"mlt_sample_calculator_to_now", ctypes.c_int64, [
	("fps",		ctypes.c_float),
	("frequency",		ctypes.c_int),
	("position",		ctypes.c_int64),] )

mlt_image_format_name = _rpythonic_function_(		"mlt_image_format_name", ctypes.POINTER(ctypes.c_char), [
	("format",		ctypes.c_int),] )

mlt_audio_format_name = _rpythonic_function_(		"mlt_audio_format_name", ctypes.POINTER(ctypes.c_char), [
	("format",		ctypes.c_int),] )

mlt_frame_write_ppm = _rpythonic_function_(		"mlt_frame_write_ppm", ctypes.c_void_p, [
	("frame",		ctypes.POINTER(mlt_frame_s)),] )

close = _rpythonic_function_(		"close", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

process = _rpythonic_function_(		"process", ctypes.POINTER(mlt_frame_s), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

mlt_filter_init = _rpythonic_function_(		"mlt_filter_init", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_filter_s)),
	("child",		ctypes.POINTER(ctypes.c_void_p)),] )

mlt_filter_new = _rpythonic_function_(		"mlt_filter_new", ctypes.POINTER(mlt_filter_s), [] )

mlt_filter_service = _rpythonic_function_(		"mlt_filter_service", ctypes.POINTER(mlt_service_s), [
	("C_self",		ctypes.POINTER(mlt_filter_s)),] )

mlt_filter_properties = _rpythonic_function_(		"mlt_filter_properties", ctypes.POINTER(mlt_properties_s), [
	("C_self",		ctypes.POINTER(mlt_filter_s)),] )

mlt_filter_process = _rpythonic_function_(		"mlt_filter_process", ctypes.POINTER(mlt_frame_s), [
	("C_self",		ctypes.POINTER(mlt_filter_s)),
	("that",		ctypes.POINTER(mlt_frame_s)),] )

mlt_filter_connect = _rpythonic_function_(		"mlt_filter_connect", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_filter_s)),
	("producer",		ctypes.POINTER(mlt_service_s)),
	("index",		ctypes.c_int),] )

mlt_filter_set_in_and_out = _rpythonic_function_(		"mlt_filter_set_in_and_out", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_filter_s)),
	("C_in",		ctypes.c_int32),
	("out",		ctypes.c_int32),] )

mlt_filter_get_track = _rpythonic_function_(		"mlt_filter_get_track", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_filter_s)),] )

mlt_filter_get_in = _rpythonic_function_(		"mlt_filter_get_in", ctypes.c_int32, [
	("C_self",		ctypes.POINTER(mlt_filter_s)),] )

mlt_filter_get_out = _rpythonic_function_(		"mlt_filter_get_out", ctypes.c_int32, [
	("C_self",		ctypes.POINTER(mlt_filter_s)),] )

mlt_filter_close = _rpythonic_function_(		"mlt_filter_close", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

mlt_producer_init = _rpythonic_function_(		"mlt_producer_init", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_producer_s)),
	("child",		ctypes.POINTER(ctypes.c_void_p)),] )

mlt_producer_new = _rpythonic_function_(		"mlt_producer_new", ctypes.POINTER(mlt_producer_s), [] )

mlt_producer_service = _rpythonic_function_(		"mlt_producer_service", ctypes.POINTER(mlt_service_s), [
	("C_self",		ctypes.POINTER(mlt_producer_s)),] )

mlt_producer_properties = _rpythonic_function_(		"mlt_producer_properties", ctypes.POINTER(mlt_properties_s), [
	("C_self",		ctypes.POINTER(mlt_producer_s)),] )

mlt_producer_seek = _rpythonic_function_(		"mlt_producer_seek", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_producer_s)),
	("position",		ctypes.c_int32),] )

mlt_producer_position = _rpythonic_function_(		"mlt_producer_position", ctypes.c_int32, [
	("C_self",		ctypes.POINTER(mlt_producer_s)),] )

mlt_producer_frame = _rpythonic_function_(		"mlt_producer_frame", ctypes.c_int32, [
	("C_self",		ctypes.POINTER(mlt_producer_s)),] )

mlt_producer_set_speed = _rpythonic_function_(		"mlt_producer_set_speed", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_producer_s)),
	("speed",		ctypes.c_double),] )

mlt_producer_get_speed = _rpythonic_function_(		"mlt_producer_get_speed", ctypes.c_double, [
	("C_self",		ctypes.POINTER(mlt_producer_s)),] )

mlt_producer_get_fps = _rpythonic_function_(		"mlt_producer_get_fps", ctypes.c_double, [
	("C_self",		ctypes.POINTER(mlt_producer_s)),] )

mlt_producer_set_in_and_out = _rpythonic_function_(		"mlt_producer_set_in_and_out", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_producer_s)),
	("C_in",		ctypes.c_int32),
	("out",		ctypes.c_int32),] )

mlt_producer_clear = _rpythonic_function_(		"mlt_producer_clear", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_producer_s)),] )

mlt_producer_get_in = _rpythonic_function_(		"mlt_producer_get_in", ctypes.c_int32, [
	("C_self",		ctypes.POINTER(mlt_producer_s)),] )

mlt_producer_get_out = _rpythonic_function_(		"mlt_producer_get_out", ctypes.c_int32, [
	("C_self",		ctypes.POINTER(mlt_producer_s)),] )

mlt_producer_get_playtime = _rpythonic_function_(		"mlt_producer_get_playtime", ctypes.c_int32, [
	("C_self",		ctypes.POINTER(mlt_producer_s)),] )

mlt_producer_get_length = _rpythonic_function_(		"mlt_producer_get_length", ctypes.c_int32, [
	("C_self",		ctypes.POINTER(mlt_producer_s)),] )

mlt_producer_prepare_next = _rpythonic_function_(		"mlt_producer_prepare_next", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_producer_s)),] )

mlt_producer_attach = _rpythonic_function_(		"mlt_producer_attach", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_producer_s)),
	("filter",		ctypes.POINTER(mlt_filter_s)),] )

mlt_producer_detach = _rpythonic_function_(		"mlt_producer_detach", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_producer_s)),
	("filter",		ctypes.POINTER(mlt_filter_s)),] )

mlt_producer_filter = _rpythonic_function_(		"mlt_producer_filter", ctypes.POINTER(mlt_filter_s), [
	("C_self",		ctypes.POINTER(mlt_producer_s)),
	("index",		ctypes.c_int),] )

mlt_producer_cut = _rpythonic_function_(		"mlt_producer_cut", ctypes.POINTER(mlt_producer_s), [
	("C_self",		ctypes.POINTER(mlt_producer_s)),
	("C_in",		ctypes.c_int),
	("out",		ctypes.c_int),] )

mlt_producer_is_cut = _rpythonic_function_(		"mlt_producer_is_cut", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_producer_s)),] )

mlt_producer_is_mix = _rpythonic_function_(		"mlt_producer_is_mix", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_producer_s)),] )

mlt_producer_is_blank = _rpythonic_function_(		"mlt_producer_is_blank", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_producer_s)),] )

mlt_producer_cut_parent = _rpythonic_function_(		"mlt_producer_cut_parent", ctypes.POINTER(mlt_producer_s), [
	("C_self",		ctypes.POINTER(mlt_producer_s)),] )

mlt_producer_optimise = _rpythonic_function_(		"mlt_producer_optimise", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_producer_s)),] )

mlt_producer_close = _rpythonic_function_(		"mlt_producer_close", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_producer_s)),] )

mlt_multitrack_init = _rpythonic_function_(		"mlt_multitrack_init", ctypes.POINTER(mlt_multitrack_s), [] )

mlt_multitrack_producer = _rpythonic_function_(		"mlt_multitrack_producer", ctypes.POINTER(mlt_producer_s), [
	("C_self",		ctypes.POINTER(mlt_multitrack_s)),] )

mlt_multitrack_service = _rpythonic_function_(		"mlt_multitrack_service", ctypes.POINTER(mlt_service_s), [
	("C_self",		ctypes.POINTER(mlt_multitrack_s)),] )

mlt_multitrack_properties = _rpythonic_function_(		"mlt_multitrack_properties", ctypes.POINTER(mlt_properties_s), [
	("C_self",		ctypes.POINTER(mlt_multitrack_s)),] )

mlt_multitrack_connect = _rpythonic_function_(		"mlt_multitrack_connect", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_multitrack_s)),
	("producer",		ctypes.POINTER(mlt_producer_s)),
	("track",		ctypes.c_int),] )

mlt_multitrack_clip = _rpythonic_function_(		"mlt_multitrack_clip", ctypes.c_int32, [
	("C_self",		ctypes.POINTER(mlt_multitrack_s)),
	("whence",		ctypes.c_int),
	("index",		ctypes.c_int),] )

mlt_multitrack_close = _rpythonic_function_(		"mlt_multitrack_close", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_multitrack_s)),] )

mlt_multitrack_count = _rpythonic_function_(		"mlt_multitrack_count", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_multitrack_s)),] )

mlt_multitrack_refresh = _rpythonic_function_(		"mlt_multitrack_refresh", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_multitrack_s)),] )

mlt_multitrack_track = _rpythonic_function_(		"mlt_multitrack_track", ctypes.POINTER(mlt_producer_s), [
	("C_self",		ctypes.POINTER(mlt_multitrack_s)),
	("track",		ctypes.c_int),] )

mlt_transition_init = _rpythonic_function_(		"mlt_transition_init", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_transition_s)),
	("child",		ctypes.POINTER(ctypes.c_void_p)),] )

mlt_transition_new = _rpythonic_function_(		"mlt_transition_new", ctypes.POINTER(mlt_transition_s), [] )

mlt_transition_service = _rpythonic_function_(		"mlt_transition_service", ctypes.POINTER(mlt_service_s), [
	("C_self",		ctypes.POINTER(mlt_transition_s)),] )

mlt_transition_properties = _rpythonic_function_(		"mlt_transition_properties", ctypes.POINTER(mlt_properties_s), [
	("C_self",		ctypes.POINTER(mlt_transition_s)),] )

mlt_transition_connect = _rpythonic_function_(		"mlt_transition_connect", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_transition_s)),
	("producer",		ctypes.POINTER(mlt_service_s)),
	("a_track",		ctypes.c_int),
	("b_track",		ctypes.c_int),] )

mlt_transition_set_in_and_out = _rpythonic_function_(		"mlt_transition_set_in_and_out", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_transition_s)),
	("C_in",		ctypes.c_int32),
	("out",		ctypes.c_int32),] )

mlt_transition_get_a_track = _rpythonic_function_(		"mlt_transition_get_a_track", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_transition_s)),] )

mlt_transition_get_b_track = _rpythonic_function_(		"mlt_transition_get_b_track", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_transition_s)),] )

mlt_transition_get_in = _rpythonic_function_(		"mlt_transition_get_in", ctypes.c_int32, [
	("C_self",		ctypes.POINTER(mlt_transition_s)),] )

mlt_transition_get_out = _rpythonic_function_(		"mlt_transition_get_out", ctypes.c_int32, [
	("C_self",		ctypes.POINTER(mlt_transition_s)),] )

mlt_transition_process = _rpythonic_function_(		"mlt_transition_process", ctypes.POINTER(mlt_frame_s), [
	("C_self",		ctypes.POINTER(mlt_transition_s)),
	("a_frame",		ctypes.POINTER(mlt_frame_s)),
	("b_frame",		ctypes.POINTER(mlt_frame_s)),] )

mlt_transition_close = _rpythonic_function_(		"mlt_transition_close", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_transition_s)),] )

clone = _rpythonic_function_(		"clone", ctypes.c_int, [
	("__fn",		ctypes.c_void_p),
	("__child_stack",		ctypes.POINTER(ctypes.c_void_p)),
	("__flags",		ctypes.c_int),
	("__arg",		ctypes.POINTER(ctypes.c_void_p)),] )

unshare = _rpythonic_function_(		"unshare", ctypes.c_int, [
	("__flags",		ctypes.c_int),] )

sched_getcpu = _rpythonic_function_(		"sched_getcpu", ctypes.c_int, [] )

sched_setparam = _rpythonic_function_(		"sched_setparam", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__param",		ctypes.POINTER(sched_param)),] )

sched_getparam = _rpythonic_function_(		"sched_getparam", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__param",		ctypes.POINTER(sched_param)),] )

sched_setscheduler = _rpythonic_function_(		"sched_setscheduler", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__policy",		ctypes.c_int),
	("__param",		ctypes.POINTER(sched_param)),] )

sched_getscheduler = _rpythonic_function_(		"sched_getscheduler", ctypes.c_int, [
	("__pid",		ctypes.c_int),] )

sched_yield = _rpythonic_function_(		"sched_yield", ctypes.c_int, [] )

sched_get_priority_max = _rpythonic_function_(		"sched_get_priority_max", ctypes.c_int, [
	("__algorithm",		ctypes.c_int),] )

sched_get_priority_min = _rpythonic_function_(		"sched_get_priority_min", ctypes.c_int, [
	("__algorithm",		ctypes.c_int),] )

sched_rr_get_interval = _rpythonic_function_(		"sched_rr_get_interval", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__t",		ctypes.POINTER(timespec)),] )

clock = _rpythonic_function_(		"clock", ctypes.c_int64, [] )

time = _rpythonic_function_(		"time", ctypes.c_int64, [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),] )

difftime = _rpythonic_function_(		"difftime", ctypes.c_double, [
	("__time1",		ctypes.c_int64),
	("__time0",		ctypes.c_int64),] )

mktime = _rpythonic_function_(		"mktime", ctypes.c_int64, [
	("__tp",		ctypes.POINTER(tm)),] )

strftime = _rpythonic_function_(		"strftime", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__maxsize",		ctypes.c_uint),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__tp",		ctypes.POINTER(tm)),] )

strftime_l = _rpythonic_function_(		"strftime_l", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__maxsize",		ctypes.c_uint),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__tp",		ctypes.POINTER(tm)),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

gmtime = _rpythonic_function_(		"gmtime", ctypes.POINTER(tm), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),] )

localtime = _rpythonic_function_(		"localtime", ctypes.POINTER(tm), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),] )

gmtime_r = _rpythonic_function_(		"gmtime_r", ctypes.POINTER(tm), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),
	("__tp",		ctypes.POINTER(tm)),] )

localtime_r = _rpythonic_function_(		"localtime_r", ctypes.POINTER(tm), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),
	("__tp",		ctypes.POINTER(tm)),] )

asctime = _rpythonic_function_(		"asctime", ctypes.POINTER(ctypes.c_char), [
	("__tp",		ctypes.POINTER(tm)),] )

ctime = _rpythonic_function_(		"ctime", ctypes.POINTER(ctypes.c_char), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),] )

asctime_r = _rpythonic_function_(		"asctime_r", ctypes.POINTER(ctypes.c_char), [
	("__tp",		ctypes.POINTER(tm)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

ctime_r = _rpythonic_function_(		"ctime_r", ctypes.POINTER(ctypes.c_char), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

tzset = _rpythonic_function_(		"tzset", ctypes.c_void_p, [] )

stime = _rpythonic_function_(		"stime", ctypes.c_int, [
	("__when",		ctypes.POINTER(ctypes.c_int64)),] )

timegm = _rpythonic_function_(		"timegm", ctypes.c_int64, [
	("__tp",		ctypes.POINTER(tm)),] )

timelocal = _rpythonic_function_(		"timelocal", ctypes.c_int64, [
	("__tp",		ctypes.POINTER(tm)),] )

dysize = _rpythonic_function_(		"dysize", ctypes.c_int, [
	("__year",		ctypes.c_int),] )

nanosleep = _rpythonic_function_(		"nanosleep", ctypes.c_int, [
	("__requested_time",		ctypes.POINTER(timespec)),
	("__remaining",		ctypes.POINTER(timespec)),] )

clock_getres = _rpythonic_function_(		"clock_getres", ctypes.c_int, [
	("__clock_id",		ctypes.c_int),
	("__res",		ctypes.POINTER(timespec)),] )

clock_gettime = _rpythonic_function_(		"clock_gettime", ctypes.c_int, [
	("__clock_id",		ctypes.c_int),
	("__tp",		ctypes.POINTER(timespec)),] )

clock_settime = _rpythonic_function_(		"clock_settime", ctypes.c_int, [
	("__clock_id",		ctypes.c_int),
	("__tp",		ctypes.POINTER(timespec)),] )

clock_nanosleep = _rpythonic_function_(		"clock_nanosleep", ctypes.c_int, [
	("__clock_id",		ctypes.c_int),
	("__flags",		ctypes.c_int),
	("__req",		ctypes.POINTER(timespec)),
	("__rem",		ctypes.POINTER(timespec)),] )

clock_getcpuclockid = _rpythonic_function_(		"clock_getcpuclockid", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__clock_id",		ctypes.POINTER(ctypes.c_int)),] )

timer_create = _rpythonic_function_(		"timer_create", ctypes.c_int, [
	("__clock_id",		ctypes.c_int),
	("__evp",		ctypes.POINTER(sigevent)),
	("__timerid",		ctypes.POINTER(ctypes.c_void_p)),] )

timer_delete = _rpythonic_function_(		"timer_delete", ctypes.c_int, [("__timerid",		ctypes.c_void_p)] )

timer_settime = _rpythonic_function_(		"timer_settime", ctypes.c_int, [
	("__timerid",		ctypes.c_void_p),
	("__flags",		ctypes.c_int),
	("__value",		ctypes.POINTER(itimerspec)),
	("__ovalue",		ctypes.POINTER(itimerspec)),] )

timer_gettime = _rpythonic_function_(		"timer_gettime", ctypes.c_int, [
	("__timerid",		ctypes.c_void_p),
	("__value",		ctypes.POINTER(itimerspec)),] )

timer_getoverrun = _rpythonic_function_(		"timer_getoverrun", ctypes.c_int, [("__timerid",		ctypes.c_void_p)] )

pthread_create = _rpythonic_function_(		"pthread_create", ctypes.c_int, [
	("__newthread",		ctypes.POINTER(ctypes.c_uint64)),
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__start_routine",		ctypes.POINTER(ctypes.c_void_p)),
	("__arg",		ctypes.POINTER(ctypes.c_void_p)),] )

pthread_exit = _rpythonic_function_(		"pthread_exit", ctypes.c_void_p, [("__retval",		ctypes.c_void_p)] )

pthread_join = _rpythonic_function_(		"pthread_join", ctypes.c_int, [
	("__th",		ctypes.c_uint64),
	("__thread_return",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

pthread_detach = _rpythonic_function_(		"pthread_detach", ctypes.c_int, [
	("__th",		ctypes.c_uint64),] )

pthread_self = _rpythonic_function_(		"pthread_self", ctypes.c_uint64, [] )

pthread_equal = _rpythonic_function_(		"pthread_equal", ctypes.c_int, [
	("__thread1",		ctypes.c_uint64),
	("__thread2",		ctypes.c_uint64),] )

pthread_attr_init = _rpythonic_function_(		"pthread_attr_init", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),] )

pthread_attr_destroy = _rpythonic_function_(		"pthread_attr_destroy", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),] )

pthread_attr_getdetachstate = _rpythonic_function_(		"pthread_attr_getdetachstate", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__detachstate",		ctypes.POINTER(ctypes.c_int)),] )

pthread_attr_setdetachstate = _rpythonic_function_(		"pthread_attr_setdetachstate", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__detachstate",		ctypes.c_int),] )

pthread_attr_getguardsize = _rpythonic_function_(		"pthread_attr_getguardsize", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__guardsize",		ctypes.POINTER(ctypes.c_uint)),] )

pthread_attr_setguardsize = _rpythonic_function_(		"pthread_attr_setguardsize", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__guardsize",		ctypes.c_uint),] )

pthread_attr_getschedparam = _rpythonic_function_(		"pthread_attr_getschedparam", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__param",		ctypes.POINTER(sched_param)),] )

pthread_attr_setschedparam = _rpythonic_function_(		"pthread_attr_setschedparam", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__param",		ctypes.POINTER(sched_param)),] )

pthread_attr_getschedpolicy = _rpythonic_function_(		"pthread_attr_getschedpolicy", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__policy",		ctypes.POINTER(ctypes.c_int)),] )

pthread_attr_setschedpolicy = _rpythonic_function_(		"pthread_attr_setschedpolicy", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__policy",		ctypes.c_int),] )

pthread_attr_getinheritsched = _rpythonic_function_(		"pthread_attr_getinheritsched", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__inherit",		ctypes.POINTER(ctypes.c_int)),] )

pthread_attr_setinheritsched = _rpythonic_function_(		"pthread_attr_setinheritsched", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__inherit",		ctypes.c_int),] )

pthread_attr_getscope = _rpythonic_function_(		"pthread_attr_getscope", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__scope",		ctypes.POINTER(ctypes.c_int)),] )

pthread_attr_setscope = _rpythonic_function_(		"pthread_attr_setscope", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__scope",		ctypes.c_int),] )

pthread_attr_getstackaddr = _rpythonic_function_(		"pthread_attr_getstackaddr", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__stackaddr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

pthread_attr_setstackaddr = _rpythonic_function_(		"pthread_attr_setstackaddr", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__stackaddr",		ctypes.POINTER(ctypes.c_void_p)),] )

pthread_attr_getstacksize = _rpythonic_function_(		"pthread_attr_getstacksize", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__stacksize",		ctypes.POINTER(ctypes.c_uint)),] )

pthread_attr_setstacksize = _rpythonic_function_(		"pthread_attr_setstacksize", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__stacksize",		ctypes.c_uint),] )

pthread_attr_getstack = _rpythonic_function_(		"pthread_attr_getstack", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__stackaddr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("__stacksize",		ctypes.POINTER(ctypes.c_uint)),] )

pthread_attr_setstack = _rpythonic_function_(		"pthread_attr_setstack", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__stackaddr",		ctypes.POINTER(ctypes.c_void_p)),
	("__stacksize",		ctypes.c_uint),] )

pthread_setschedparam = _rpythonic_function_(		"pthread_setschedparam", ctypes.c_int, [
	("__target_thread",		ctypes.c_uint64),
	("__policy",		ctypes.c_int),
	("__param",		ctypes.POINTER(sched_param)),] )

pthread_getschedparam = _rpythonic_function_(		"pthread_getschedparam", ctypes.c_int, [
	("__target_thread",		ctypes.c_uint64),
	("__policy",		ctypes.POINTER(ctypes.c_int)),
	("__param",		ctypes.POINTER(sched_param)),] )

pthread_setschedprio = _rpythonic_function_(		"pthread_setschedprio", ctypes.c_int, [
	("__target_thread",		ctypes.c_uint64),
	("__prio",		ctypes.c_int),] )

pthread_once = _rpythonic_function_(		"pthread_once", ctypes.c_int, [
	("__once_control",		ctypes.POINTER(ctypes.c_int)),
	("__init_routine",		ctypes.c_void_p),] )

pthread_setcancelstate = _rpythonic_function_(		"pthread_setcancelstate", ctypes.c_int, [
	("__state",		ctypes.c_int),
	("__oldstate",		ctypes.POINTER(ctypes.c_int)),] )

pthread_setcanceltype = _rpythonic_function_(		"pthread_setcanceltype", ctypes.c_int, [
	("__type",		ctypes.c_int),
	("__oldtype",		ctypes.POINTER(ctypes.c_int)),] )

pthread_cancel = _rpythonic_function_(		"pthread_cancel", ctypes.c_int, [
	("__th",		ctypes.c_uint64),] )

pthread_testcancel = _rpythonic_function_(		"pthread_testcancel", ctypes.c_void_p, [] )

pthread_mutex_init = _rpythonic_function_(		"pthread_mutex_init", ctypes.c_int, [
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),
	("__mutexattr",		ctypes.POINTER(pthread_mutexattr_t)),] )

pthread_mutex_destroy = _rpythonic_function_(		"pthread_mutex_destroy", ctypes.c_int, [
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),] )

pthread_mutex_trylock = _rpythonic_function_(		"pthread_mutex_trylock", ctypes.c_int, [
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),] )

pthread_mutex_lock = _rpythonic_function_(		"pthread_mutex_lock", ctypes.c_int, [
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),] )

pthread_mutex_timedlock = _rpythonic_function_(		"pthread_mutex_timedlock", ctypes.c_int, [
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),
	("__abstime",		ctypes.POINTER(timespec)),] )

pthread_mutex_unlock = _rpythonic_function_(		"pthread_mutex_unlock", ctypes.c_int, [
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),] )

pthread_mutex_getprioceiling = _rpythonic_function_(		"pthread_mutex_getprioceiling", ctypes.c_int, [
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),
	("__prioceiling",		ctypes.POINTER(ctypes.c_int)),] )

pthread_mutex_setprioceiling = _rpythonic_function_(		"pthread_mutex_setprioceiling", ctypes.c_int, [
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),
	("__prioceiling",		ctypes.c_int),
	("__old_ceiling",		ctypes.POINTER(ctypes.c_int)),] )

pthread_mutex_consistent = _rpythonic_function_(		"pthread_mutex_consistent", ctypes.c_int, [
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),] )

pthread_mutexattr_init = _rpythonic_function_(		"pthread_mutexattr_init", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),] )

pthread_mutexattr_destroy = _rpythonic_function_(		"pthread_mutexattr_destroy", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),] )

pthread_mutexattr_getpshared = _rpythonic_function_(		"pthread_mutexattr_getpshared", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__pshared",		ctypes.POINTER(ctypes.c_int)),] )

pthread_mutexattr_setpshared = _rpythonic_function_(		"pthread_mutexattr_setpshared", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__pshared",		ctypes.c_int),] )

pthread_mutexattr_gettype = _rpythonic_function_(		"pthread_mutexattr_gettype", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__kind",		ctypes.POINTER(ctypes.c_int)),] )

pthread_mutexattr_settype = _rpythonic_function_(		"pthread_mutexattr_settype", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__kind",		ctypes.c_int),] )

pthread_mutexattr_getprotocol = _rpythonic_function_(		"pthread_mutexattr_getprotocol", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__protocol",		ctypes.POINTER(ctypes.c_int)),] )

pthread_mutexattr_setprotocol = _rpythonic_function_(		"pthread_mutexattr_setprotocol", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__protocol",		ctypes.c_int),] )

pthread_mutexattr_getprioceiling = _rpythonic_function_(		"pthread_mutexattr_getprioceiling", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__prioceiling",		ctypes.POINTER(ctypes.c_int)),] )

pthread_mutexattr_setprioceiling = _rpythonic_function_(		"pthread_mutexattr_setprioceiling", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__prioceiling",		ctypes.c_int),] )

pthread_mutexattr_getrobust = _rpythonic_function_(		"pthread_mutexattr_getrobust", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__robustness",		ctypes.POINTER(ctypes.c_int)),] )

pthread_mutexattr_setrobust = _rpythonic_function_(		"pthread_mutexattr_setrobust", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__robustness",		ctypes.c_int),] )

pthread_rwlock_init = _rpythonic_function_(		"pthread_rwlock_init", ctypes.c_int, [
	("__rwlock",		ctypes.POINTER(pthread_rwlock_t)),
	("__attr",		ctypes.POINTER(pthread_rwlockattr_t)),] )

pthread_rwlock_destroy = _rpythonic_function_(		"pthread_rwlock_destroy", ctypes.c_int, [
	("__rwlock",		ctypes.POINTER(pthread_rwlock_t)),] )

pthread_rwlock_rdlock = _rpythonic_function_(		"pthread_rwlock_rdlock", ctypes.c_int, [
	("__rwlock",		ctypes.POINTER(pthread_rwlock_t)),] )

pthread_rwlock_tryrdlock = _rpythonic_function_(		"pthread_rwlock_tryrdlock", ctypes.c_int, [
	("__rwlock",		ctypes.POINTER(pthread_rwlock_t)),] )

pthread_rwlock_timedrdlock = _rpythonic_function_(		"pthread_rwlock_timedrdlock", ctypes.c_int, [
	("__rwlock",		ctypes.POINTER(pthread_rwlock_t)),
	("__abstime",		ctypes.POINTER(timespec)),] )

pthread_rwlock_wrlock = _rpythonic_function_(		"pthread_rwlock_wrlock", ctypes.c_int, [
	("__rwlock",		ctypes.POINTER(pthread_rwlock_t)),] )

pthread_rwlock_trywrlock = _rpythonic_function_(		"pthread_rwlock_trywrlock", ctypes.c_int, [
	("__rwlock",		ctypes.POINTER(pthread_rwlock_t)),] )

pthread_rwlock_timedwrlock = _rpythonic_function_(		"pthread_rwlock_timedwrlock", ctypes.c_int, [
	("__rwlock",		ctypes.POINTER(pthread_rwlock_t)),
	("__abstime",		ctypes.POINTER(timespec)),] )

pthread_rwlock_unlock = _rpythonic_function_(		"pthread_rwlock_unlock", ctypes.c_int, [
	("__rwlock",		ctypes.POINTER(pthread_rwlock_t)),] )

pthread_rwlockattr_init = _rpythonic_function_(		"pthread_rwlockattr_init", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_rwlockattr_t)),] )

pthread_rwlockattr_destroy = _rpythonic_function_(		"pthread_rwlockattr_destroy", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_rwlockattr_t)),] )

pthread_rwlockattr_getpshared = _rpythonic_function_(		"pthread_rwlockattr_getpshared", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_rwlockattr_t)),
	("__pshared",		ctypes.POINTER(ctypes.c_int)),] )

pthread_rwlockattr_setpshared = _rpythonic_function_(		"pthread_rwlockattr_setpshared", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_rwlockattr_t)),
	("__pshared",		ctypes.c_int),] )

pthread_rwlockattr_getkind_np = _rpythonic_function_(		"pthread_rwlockattr_getkind_np", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_rwlockattr_t)),
	("__pref",		ctypes.POINTER(ctypes.c_int)),] )

pthread_rwlockattr_setkind_np = _rpythonic_function_(		"pthread_rwlockattr_setkind_np", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_rwlockattr_t)),
	("__pref",		ctypes.c_int),] )

pthread_cond_init = _rpythonic_function_(		"pthread_cond_init", ctypes.c_int, [
	("__cond",		ctypes.POINTER(pthread_cond_t)),
	("__cond_attr",		ctypes.POINTER(pthread_condattr_t)),] )

pthread_cond_destroy = _rpythonic_function_(		"pthread_cond_destroy", ctypes.c_int, [
	("__cond",		ctypes.POINTER(pthread_cond_t)),] )

pthread_cond_signal = _rpythonic_function_(		"pthread_cond_signal", ctypes.c_int, [
	("__cond",		ctypes.POINTER(pthread_cond_t)),] )

pthread_cond_broadcast = _rpythonic_function_(		"pthread_cond_broadcast", ctypes.c_int, [
	("__cond",		ctypes.POINTER(pthread_cond_t)),] )

pthread_cond_wait = _rpythonic_function_(		"pthread_cond_wait", ctypes.c_int, [
	("__cond",		ctypes.POINTER(pthread_cond_t)),
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),] )

pthread_cond_timedwait = _rpythonic_function_(		"pthread_cond_timedwait", ctypes.c_int, [
	("__cond",		ctypes.POINTER(pthread_cond_t)),
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),
	("__abstime",		ctypes.POINTER(timespec)),] )

pthread_condattr_init = _rpythonic_function_(		"pthread_condattr_init", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_condattr_t)),] )

pthread_condattr_destroy = _rpythonic_function_(		"pthread_condattr_destroy", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_condattr_t)),] )

pthread_condattr_getpshared = _rpythonic_function_(		"pthread_condattr_getpshared", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_condattr_t)),
	("__pshared",		ctypes.POINTER(ctypes.c_int)),] )

pthread_condattr_setpshared = _rpythonic_function_(		"pthread_condattr_setpshared", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_condattr_t)),
	("__pshared",		ctypes.c_int),] )

pthread_condattr_getclock = _rpythonic_function_(		"pthread_condattr_getclock", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_condattr_t)),
	("__clock_id",		ctypes.POINTER(ctypes.c_int)),] )

pthread_condattr_setclock = _rpythonic_function_(		"pthread_condattr_setclock", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_condattr_t)),
	("__clock_id",		ctypes.c_int),] )

pthread_spin_init = _rpythonic_function_(		"pthread_spin_init", ctypes.c_int, [
	("__lock",		ctypes.POINTER(ctypes.c_int)),
	("__pshared",		ctypes.c_int),] )

pthread_spin_destroy = _rpythonic_function_(		"pthread_spin_destroy", ctypes.c_int, [
	("__lock",		ctypes.POINTER(ctypes.c_int)),] )

pthread_spin_lock = _rpythonic_function_(		"pthread_spin_lock", ctypes.c_int, [
	("__lock",		ctypes.POINTER(ctypes.c_int)),] )

pthread_spin_trylock = _rpythonic_function_(		"pthread_spin_trylock", ctypes.c_int, [
	("__lock",		ctypes.POINTER(ctypes.c_int)),] )

pthread_spin_unlock = _rpythonic_function_(		"pthread_spin_unlock", ctypes.c_int, [
	("__lock",		ctypes.POINTER(ctypes.c_int)),] )

pthread_barrier_init = _rpythonic_function_(		"pthread_barrier_init", ctypes.c_int, [
	("__barrier",		ctypes.POINTER(pthread_barrier_t)),
	("__attr",		ctypes.POINTER(pthread_barrierattr_t)),
	("__count",		ctypes.c_uint),] )

pthread_barrier_destroy = _rpythonic_function_(		"pthread_barrier_destroy", ctypes.c_int, [
	("__barrier",		ctypes.POINTER(pthread_barrier_t)),] )

pthread_barrier_wait = _rpythonic_function_(		"pthread_barrier_wait", ctypes.c_int, [
	("__barrier",		ctypes.POINTER(pthread_barrier_t)),] )

pthread_barrierattr_init = _rpythonic_function_(		"pthread_barrierattr_init", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_barrierattr_t)),] )

pthread_barrierattr_destroy = _rpythonic_function_(		"pthread_barrierattr_destroy", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_barrierattr_t)),] )

pthread_barrierattr_getpshared = _rpythonic_function_(		"pthread_barrierattr_getpshared", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_barrierattr_t)),
	("__pshared",		ctypes.POINTER(ctypes.c_int)),] )

pthread_barrierattr_setpshared = _rpythonic_function_(		"pthread_barrierattr_setpshared", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_barrierattr_t)),
	("__pshared",		ctypes.c_int),] )

pthread_key_create = _rpythonic_function_(		"pthread_key_create", ctypes.c_int, [
	("__key",		ctypes.POINTER(ctypes.c_uint)),
	("__destr_function",		ctypes.c_void_p),] )

pthread_key_delete = _rpythonic_function_(		"pthread_key_delete", ctypes.c_int, [
	("__key",		ctypes.c_uint),] )

pthread_getspecific = _rpythonic_function_(		"pthread_getspecific", ctypes.POINTER(ctypes.c_void_p), [
	("__key",		ctypes.c_uint),] )

pthread_setspecific = _rpythonic_function_(		"pthread_setspecific", ctypes.c_int, [
	("__key",		ctypes.c_uint),
	("__pointer",		ctypes.POINTER(ctypes.c_void_p)),] )

pthread_getcpuclockid = _rpythonic_function_(		"pthread_getcpuclockid", ctypes.c_int, [
	("__thread_id",		ctypes.c_uint64),
	("__clock_id",		ctypes.POINTER(ctypes.c_int)),] )

pthread_atfork = _rpythonic_function_(		"pthread_atfork", ctypes.c_int, [
	("__prepare",		ctypes.c_void_p),
	("__parent",		ctypes.c_void_p),
	("__child",		ctypes.c_void_p),] )

start = _rpythonic_function_(		"start", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

stop = _rpythonic_function_(		"stop", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

is_stopped = _rpythonic_function_(		"is_stopped", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

mlt_consumer_init = _rpythonic_function_(		"mlt_consumer_init", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_consumer_s)),
	("child",		ctypes.POINTER(ctypes.c_void_p)),
	("profile",		ctypes.POINTER(mlt_profile_s)),] )

mlt_consumer_new = _rpythonic_function_(		"mlt_consumer_new", ctypes.POINTER(mlt_consumer_s), [
	("profile",		ctypes.POINTER(mlt_profile_s)),] )

mlt_consumer_service = _rpythonic_function_(		"mlt_consumer_service", ctypes.POINTER(mlt_service_s), [
	("C_self",		ctypes.POINTER(mlt_consumer_s)),] )

mlt_consumer_properties = _rpythonic_function_(		"mlt_consumer_properties", ctypes.POINTER(mlt_properties_s), [
	("C_self",		ctypes.POINTER(mlt_consumer_s)),] )

mlt_consumer_connect = _rpythonic_function_(		"mlt_consumer_connect", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_consumer_s)),
	("producer",		ctypes.POINTER(mlt_service_s)),] )

mlt_consumer_start = _rpythonic_function_(		"mlt_consumer_start", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_consumer_s)),] )

mlt_consumer_purge = _rpythonic_function_(		"mlt_consumer_purge", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_consumer_s)),] )

mlt_consumer_put_frame = _rpythonic_function_(		"mlt_consumer_put_frame", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_consumer_s)),
	("frame",		ctypes.POINTER(mlt_frame_s)),] )

mlt_consumer_get_frame = _rpythonic_function_(		"mlt_consumer_get_frame", ctypes.POINTER(mlt_frame_s), [
	("C_self",		ctypes.POINTER(mlt_consumer_s)),] )

mlt_consumer_rt_frame = _rpythonic_function_(		"mlt_consumer_rt_frame", ctypes.POINTER(mlt_frame_s), [
	("C_self",		ctypes.POINTER(mlt_consumer_s)),] )

mlt_consumer_stop = _rpythonic_function_(		"mlt_consumer_stop", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_consumer_s)),] )

mlt_consumer_is_stopped = _rpythonic_function_(		"mlt_consumer_is_stopped", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_consumer_s)),] )

mlt_consumer_stopped = _rpythonic_function_(		"mlt_consumer_stopped", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_consumer_s)),] )

mlt_consumer_close = _rpythonic_function_(		"mlt_consumer_close", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

mlt_consumer_position = _rpythonic_function_(		"mlt_consumer_position", ctypes.c_int32, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

mlt_playlist_init = _rpythonic_function_(		"mlt_playlist_init", ctypes.POINTER(mlt_playlist_s), [] )

mlt_playlist_producer = _rpythonic_function_(		"mlt_playlist_producer", ctypes.POINTER(mlt_producer_s), [
	("C_self",		ctypes.POINTER(mlt_playlist_s)),] )

mlt_playlist_service = _rpythonic_function_(		"mlt_playlist_service", ctypes.POINTER(mlt_service_s), [
	("C_self",		ctypes.POINTER(mlt_playlist_s)),] )

mlt_playlist_properties = _rpythonic_function_(		"mlt_playlist_properties", ctypes.POINTER(mlt_properties_s), [
	("C_self",		ctypes.POINTER(mlt_playlist_s)),] )

mlt_playlist_count = _rpythonic_function_(		"mlt_playlist_count", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_playlist_s)),] )

mlt_playlist_clear = _rpythonic_function_(		"mlt_playlist_clear", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_playlist_s)),] )

mlt_playlist_append = _rpythonic_function_(		"mlt_playlist_append", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_playlist_s)),
	("producer",		ctypes.POINTER(mlt_producer_s)),] )

mlt_playlist_append_io = _rpythonic_function_(		"mlt_playlist_append_io", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_playlist_s)),
	("producer",		ctypes.POINTER(mlt_producer_s)),
	("C_in",		ctypes.c_int32),
	("out",		ctypes.c_int32),] )

mlt_playlist_blank = _rpythonic_function_(		"mlt_playlist_blank", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_playlist_s)),
	("length",		ctypes.c_int32),] )

mlt_playlist_clip = _rpythonic_function_(		"mlt_playlist_clip", ctypes.c_int32, [
	("C_self",		ctypes.POINTER(mlt_playlist_s)),
	("whence",		ctypes.c_int),
	("index",		ctypes.c_int),] )

mlt_playlist_current_clip = _rpythonic_function_(		"mlt_playlist_current_clip", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_playlist_s)),] )

mlt_playlist_current = _rpythonic_function_(		"mlt_playlist_current", ctypes.POINTER(mlt_producer_s), [
	("C_self",		ctypes.POINTER(mlt_playlist_s)),] )

mlt_playlist_get_clip_info = _rpythonic_function_(		"mlt_playlist_get_clip_info", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_playlist_s)),
	("info",		ctypes.POINTER(mlt_playlist_clip_info)),
	("index",		ctypes.c_int),] )

mlt_playlist_insert = _rpythonic_function_(		"mlt_playlist_insert", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_playlist_s)),
	("producer",		ctypes.POINTER(mlt_producer_s)),
	("where",		ctypes.c_int),
	("C_in",		ctypes.c_int32),
	("out",		ctypes.c_int32),] )

mlt_playlist_remove = _rpythonic_function_(		"mlt_playlist_remove", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_playlist_s)),
	("where",		ctypes.c_int),] )

mlt_playlist_move = _rpythonic_function_(		"mlt_playlist_move", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_playlist_s)),
	("from",		ctypes.c_int),
	("to",		ctypes.c_int),] )

mlt_playlist_resize_clip = _rpythonic_function_(		"mlt_playlist_resize_clip", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_playlist_s)),
	("clip",		ctypes.c_int),
	("C_in",		ctypes.c_int32),
	("out",		ctypes.c_int32),] )

mlt_playlist_repeat_clip = _rpythonic_function_(		"mlt_playlist_repeat_clip", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_playlist_s)),
	("clip",		ctypes.c_int),
	("repeat",		ctypes.c_int),] )

mlt_playlist_split = _rpythonic_function_(		"mlt_playlist_split", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_playlist_s)),
	("clip",		ctypes.c_int),
	("position",		ctypes.c_int32),] )

mlt_playlist_split_at = _rpythonic_function_(		"mlt_playlist_split_at", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_playlist_s)),
	("position",		ctypes.c_int32),
	("left",		ctypes.c_int),] )

mlt_playlist_join = _rpythonic_function_(		"mlt_playlist_join", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_playlist_s)),
	("clip",		ctypes.c_int),
	("count",		ctypes.c_int),
	("merge",		ctypes.c_int),] )

mlt_playlist_mix = _rpythonic_function_(		"mlt_playlist_mix", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_playlist_s)),
	("clip",		ctypes.c_int),
	("length",		ctypes.c_int),
	("transition",		ctypes.POINTER(mlt_transition_s)),] )

mlt_playlist_mix_add = _rpythonic_function_(		"mlt_playlist_mix_add", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_playlist_s)),
	("clip",		ctypes.c_int),
	("transition",		ctypes.POINTER(mlt_transition_s)),] )

mlt_playlist_get_clip = _rpythonic_function_(		"mlt_playlist_get_clip", ctypes.POINTER(mlt_producer_s), [
	("C_self",		ctypes.POINTER(mlt_playlist_s)),
	("clip",		ctypes.c_int),] )

mlt_playlist_get_clip_at = _rpythonic_function_(		"mlt_playlist_get_clip_at", ctypes.POINTER(mlt_producer_s), [
	("C_self",		ctypes.POINTER(mlt_playlist_s)),
	("position",		ctypes.c_int32),] )

mlt_playlist_get_clip_index_at = _rpythonic_function_(		"mlt_playlist_get_clip_index_at", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_playlist_s)),
	("position",		ctypes.c_int32),] )

mlt_playlist_clip_is_mix = _rpythonic_function_(		"mlt_playlist_clip_is_mix", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_playlist_s)),
	("clip",		ctypes.c_int),] )

mlt_playlist_consolidate_blanks = _rpythonic_function_(		"mlt_playlist_consolidate_blanks", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_playlist_s)),
	("keep_length",		ctypes.c_int),] )

mlt_playlist_is_blank = _rpythonic_function_(		"mlt_playlist_is_blank", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_playlist_s)),
	("clip",		ctypes.c_int),] )

mlt_playlist_is_blank_at = _rpythonic_function_(		"mlt_playlist_is_blank_at", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_playlist_s)),
	("position",		ctypes.c_int32),] )

mlt_playlist_insert_blank = _rpythonic_function_(		"mlt_playlist_insert_blank", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_playlist_s)),
	("clip",		ctypes.c_int),
	("length",		ctypes.c_int),] )

mlt_playlist_pad_blanks = _rpythonic_function_(		"mlt_playlist_pad_blanks", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_playlist_s)),
	("position",		ctypes.c_int32),
	("length",		ctypes.c_int),
	("find",		ctypes.c_int),] )

mlt_playlist_replace_with_blank = _rpythonic_function_(		"mlt_playlist_replace_with_blank", ctypes.POINTER(mlt_producer_s), [
	("C_self",		ctypes.POINTER(mlt_playlist_s)),
	("clip",		ctypes.c_int),] )

mlt_playlist_insert_at = _rpythonic_function_(		"mlt_playlist_insert_at", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_playlist_s)),
	("position",		ctypes.c_int32),
	("producer",		ctypes.POINTER(mlt_producer_s)),
	("mode",		ctypes.c_int),] )

mlt_playlist_clip_start = _rpythonic_function_(		"mlt_playlist_clip_start", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_playlist_s)),
	("clip",		ctypes.c_int),] )

mlt_playlist_clip_length = _rpythonic_function_(		"mlt_playlist_clip_length", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_playlist_s)),
	("clip",		ctypes.c_int),] )

mlt_playlist_blanks_from = _rpythonic_function_(		"mlt_playlist_blanks_from", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_playlist_s)),
	("clip",		ctypes.c_int),
	("bounded",		ctypes.c_int),] )

mlt_playlist_remove_region = _rpythonic_function_(		"mlt_playlist_remove_region", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_playlist_s)),
	("position",		ctypes.c_int32),
	("length",		ctypes.c_int),] )

mlt_playlist_move_region = _rpythonic_function_(		"mlt_playlist_move_region", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_playlist_s)),
	("position",		ctypes.c_int32),
	("length",		ctypes.c_int),
	("new_position",		ctypes.c_int),] )

mlt_playlist_close = _rpythonic_function_(		"mlt_playlist_close", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_playlist_s)),] )

mlt_field_init = _rpythonic_function_(		"mlt_field_init", ctypes.POINTER(mlt_field_s), [] )

mlt_field_new = _rpythonic_function_(		"mlt_field_new", ctypes.POINTER(mlt_field_s), [
	("multitrack",		ctypes.POINTER(mlt_multitrack_s)),
	("tractor",		ctypes.POINTER(mlt_tractor_s)),] )

mlt_field_service = _rpythonic_function_(		"mlt_field_service", ctypes.POINTER(mlt_service_s), [
	("C_self",		ctypes.POINTER(mlt_field_s)),] )

mlt_field_tractor = _rpythonic_function_(		"mlt_field_tractor", ctypes.POINTER(mlt_tractor_s), [
	("C_self",		ctypes.POINTER(mlt_field_s)),] )

mlt_field_multitrack = _rpythonic_function_(		"mlt_field_multitrack", ctypes.POINTER(mlt_multitrack_s), [
	("C_self",		ctypes.POINTER(mlt_field_s)),] )

mlt_field_properties = _rpythonic_function_(		"mlt_field_properties", ctypes.POINTER(mlt_properties_s), [
	("C_self",		ctypes.POINTER(mlt_field_s)),] )

mlt_field_plant_filter = _rpythonic_function_(		"mlt_field_plant_filter", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_field_s)),
	("that",		ctypes.POINTER(mlt_filter_s)),
	("track",		ctypes.c_int),] )

mlt_field_plant_transition = _rpythonic_function_(		"mlt_field_plant_transition", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_field_s)),
	("that",		ctypes.POINTER(mlt_transition_s)),
	("a_track",		ctypes.c_int),
	("b_track",		ctypes.c_int),] )

mlt_field_close = _rpythonic_function_(		"mlt_field_close", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_field_s)),] )

mlt_field_disconnect_service = _rpythonic_function_(		"mlt_field_disconnect_service", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_field_s)),
	("service",		ctypes.POINTER(mlt_service_s)),] )

mlt_tractor_init = _rpythonic_function_(		"mlt_tractor_init", ctypes.POINTER(mlt_tractor_s), [] )

mlt_tractor_new = _rpythonic_function_(		"mlt_tractor_new", ctypes.POINTER(mlt_tractor_s), [] )

mlt_tractor_service = _rpythonic_function_(		"mlt_tractor_service", ctypes.POINTER(mlt_service_s), [
	("C_self",		ctypes.POINTER(mlt_tractor_s)),] )

mlt_tractor_producer = _rpythonic_function_(		"mlt_tractor_producer", ctypes.POINTER(mlt_producer_s), [
	("C_self",		ctypes.POINTER(mlt_tractor_s)),] )

mlt_tractor_properties = _rpythonic_function_(		"mlt_tractor_properties", ctypes.POINTER(mlt_properties_s), [
	("C_self",		ctypes.POINTER(mlt_tractor_s)),] )

mlt_tractor_field = _rpythonic_function_(		"mlt_tractor_field", ctypes.POINTER(mlt_field_s), [
	("C_self",		ctypes.POINTER(mlt_tractor_s)),] )

mlt_tractor_multitrack = _rpythonic_function_(		"mlt_tractor_multitrack", ctypes.POINTER(mlt_multitrack_s), [
	("C_self",		ctypes.POINTER(mlt_tractor_s)),] )

mlt_tractor_connect = _rpythonic_function_(		"mlt_tractor_connect", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_tractor_s)),
	("service",		ctypes.POINTER(mlt_service_s)),] )

mlt_tractor_refresh = _rpythonic_function_(		"mlt_tractor_refresh", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_tractor_s)),] )

mlt_tractor_set_track = _rpythonic_function_(		"mlt_tractor_set_track", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_tractor_s)),
	("producer",		ctypes.POINTER(mlt_producer_s)),
	("index",		ctypes.c_int),] )

mlt_tractor_get_track = _rpythonic_function_(		"mlt_tractor_get_track", ctypes.POINTER(mlt_producer_s), [
	("C_self",		ctypes.POINTER(mlt_tractor_s)),
	("index",		ctypes.c_int),] )

mlt_tractor_close = _rpythonic_function_(		"mlt_tractor_close", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_tractor_s)),] )

mlt_tokeniser_init = _rpythonic_function_(		"mlt_tokeniser_init", ctypes.POINTER(mlt_tokeniser), [] )

mlt_tokeniser_parse_new = _rpythonic_function_(		"mlt_tokeniser_parse_new", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_tokeniser)),
	("text",		ctypes.POINTER(ctypes.c_char)),
	("delimiter",		ctypes.POINTER(ctypes.c_char)),] )

mlt_tokeniser_get_input = _rpythonic_function_(		"mlt_tokeniser_get_input", ctypes.POINTER(ctypes.c_char), [
	("C_self",		ctypes.POINTER(mlt_tokeniser)),] )

mlt_tokeniser_count = _rpythonic_function_(		"mlt_tokeniser_count", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_tokeniser)),] )

mlt_tokeniser_get_string = _rpythonic_function_(		"mlt_tokeniser_get_string", ctypes.POINTER(ctypes.c_char), [
	("C_self",		ctypes.POINTER(mlt_tokeniser)),
	("index",		ctypes.c_int),] )

mlt_tokeniser_close = _rpythonic_function_(		"mlt_tokeniser_close", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_tokeniser)),] )

on_invalid = _rpythonic_function_(		"on_invalid", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_parser_s)),
	("C_object",		ctypes.POINTER(mlt_service_s)),] )

on_unknown = _rpythonic_function_(		"on_unknown", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_parser_s)),
	("C_object",		ctypes.POINTER(mlt_service_s)),] )

on_start_producer = _rpythonic_function_(		"on_start_producer", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_parser_s)),
	("C_object",		ctypes.POINTER(mlt_producer_s)),] )

on_end_producer = _rpythonic_function_(		"on_end_producer", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_parser_s)),
	("C_object",		ctypes.POINTER(mlt_producer_s)),] )

on_start_playlist = _rpythonic_function_(		"on_start_playlist", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_parser_s)),
	("C_object",		ctypes.POINTER(mlt_playlist_s)),] )

on_end_playlist = _rpythonic_function_(		"on_end_playlist", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_parser_s)),
	("C_object",		ctypes.POINTER(mlt_playlist_s)),] )

on_start_tractor = _rpythonic_function_(		"on_start_tractor", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_parser_s)),
	("C_object",		ctypes.POINTER(mlt_tractor_s)),] )

on_end_tractor = _rpythonic_function_(		"on_end_tractor", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_parser_s)),
	("C_object",		ctypes.POINTER(mlt_tractor_s)),] )

on_start_multitrack = _rpythonic_function_(		"on_start_multitrack", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_parser_s)),
	("C_object",		ctypes.POINTER(mlt_multitrack_s)),] )

on_end_multitrack = _rpythonic_function_(		"on_end_multitrack", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_parser_s)),
	("C_object",		ctypes.POINTER(mlt_multitrack_s)),] )

on_start_track = _rpythonic_function_(		"on_start_track", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_parser_s)),] )

on_end_track = _rpythonic_function_(		"on_end_track", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_parser_s)),] )

on_start_filter = _rpythonic_function_(		"on_start_filter", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_parser_s)),
	("C_object",		ctypes.POINTER(mlt_filter_s)),] )

on_end_filter = _rpythonic_function_(		"on_end_filter", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_parser_s)),
	("C_object",		ctypes.POINTER(mlt_filter_s)),] )

on_start_transition = _rpythonic_function_(		"on_start_transition", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_parser_s)),
	("C_object",		ctypes.POINTER(mlt_transition_s)),] )

mlt_parser_new = _rpythonic_function_(		"mlt_parser_new", ctypes.POINTER(mlt_parser_s), [] )

on_end_transition = _rpythonic_function_(		"on_end_transition", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_parser_s)),
	("C_object",		ctypes.POINTER(mlt_transition_s)),] )

mlt_parser_properties = _rpythonic_function_(		"mlt_parser_properties", ctypes.POINTER(mlt_properties_s), [
	("C_self",		ctypes.POINTER(mlt_parser_s)),] )

mlt_parser_start = _rpythonic_function_(		"mlt_parser_start", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_parser_s)),
	("C_object",		ctypes.POINTER(mlt_service_s)),] )

mlt_parser_close = _rpythonic_function_(		"mlt_parser_close", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_parser_s)),] )

mlt_geometry_init = _rpythonic_function_(		"mlt_geometry_init", ctypes.POINTER(mlt_geometry_s), [] )

mlt_geometry_parse = _rpythonic_function_(		"mlt_geometry_parse", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_geometry_s)),
	("data",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),
	("nw",		ctypes.c_int),
	("nh",		ctypes.c_int),] )

mlt_geometry_refresh = _rpythonic_function_(		"mlt_geometry_refresh", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_geometry_s)),
	("data",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),
	("nw",		ctypes.c_int),
	("nh",		ctypes.c_int),] )

mlt_geometry_get_length = _rpythonic_function_(		"mlt_geometry_get_length", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_geometry_s)),] )

mlt_geometry_set_length = _rpythonic_function_(		"mlt_geometry_set_length", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_geometry_s)),
	("length",		ctypes.c_int),] )

mlt_geometry_parse_item = _rpythonic_function_(		"mlt_geometry_parse_item", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_geometry_s)),
	("item",		ctypes.POINTER(mlt_geometry_item_s)),
	("data",		ctypes.POINTER(ctypes.c_char)),] )

mlt_geometry_fetch = _rpythonic_function_(		"mlt_geometry_fetch", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_geometry_s)),
	("item",		ctypes.POINTER(mlt_geometry_item_s)),
	("position",		ctypes.c_float),] )

mlt_geometry_insert = _rpythonic_function_(		"mlt_geometry_insert", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_geometry_s)),
	("item",		ctypes.POINTER(mlt_geometry_item_s)),] )

mlt_geometry_remove = _rpythonic_function_(		"mlt_geometry_remove", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_geometry_s)),
	("position",		ctypes.c_int),] )

mlt_geometry_next_key = _rpythonic_function_(		"mlt_geometry_next_key", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_geometry_s)),
	("item",		ctypes.POINTER(mlt_geometry_item_s)),
	("position",		ctypes.c_int),] )

mlt_geometry_prev_key = _rpythonic_function_(		"mlt_geometry_prev_key", ctypes.c_int, [
	("C_self",		ctypes.POINTER(mlt_geometry_s)),
	("item",		ctypes.POINTER(mlt_geometry_item_s)),
	("position",		ctypes.c_int),] )

mlt_geometry_serialise_cut = _rpythonic_function_(		"mlt_geometry_serialise_cut", ctypes.POINTER(ctypes.c_char), [
	("C_self",		ctypes.POINTER(mlt_geometry_s)),
	("C_in",		ctypes.c_int),
	("out",		ctypes.c_int),] )

mlt_geometry_serialise = _rpythonic_function_(		"mlt_geometry_serialise", ctypes.POINTER(ctypes.c_char), [
	("C_self",		ctypes.POINTER(mlt_geometry_s)),] )

mlt_geometry_close = _rpythonic_function_(		"mlt_geometry_close", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(mlt_geometry_s)),] )

mlt_log = _rpythonic_function_(		"mlt_log", ctypes.c_void_p, [
	("service",		ctypes.POINTER(ctypes.c_void_p)),
	("level",		ctypes.c_int),
	("fmt",		ctypes.POINTER(ctypes.c_char)),] )

mlt_vlog = _rpythonic_function_(		"mlt_vlog", ctypes.c_void_p, [
	("service",		ctypes.POINTER(ctypes.c_void_p)),
	("level",		ctypes.c_int),
	("fmt",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_char),] )

mlt_log_get_level = _rpythonic_function_(		"mlt_log_get_level", ctypes.c_int, [] )

mlt_log_set_level = _rpythonic_function_(		"mlt_log_set_level", ctypes.c_void_p, [
	("none",		ctypes.c_int),] )

mlt_log_set_callback = _rpythonic_function_(		"mlt_log_set_callback", ctypes.c_void_p, [
	("none",		ctypes.c_void_p),] )

mlt_cache_item_data = _rpythonic_function_(		"mlt_cache_item_data", ctypes.POINTER(ctypes.c_void_p), [
	("item",		ctypes.POINTER(mlt_cache_item_s)),
	("size",		ctypes.POINTER(ctypes.c_int)),] )

mlt_cache_item_close = _rpythonic_function_(		"mlt_cache_item_close", ctypes.c_void_p, [
	("item",		ctypes.POINTER(mlt_cache_item_s)),] )

mlt_cache_init = _rpythonic_function_(		"mlt_cache_init", ctypes.POINTER(mlt_cache_s), [] )

mlt_cache_set_size = _rpythonic_function_(		"mlt_cache_set_size", ctypes.c_void_p, [
	("cache",		ctypes.POINTER(mlt_cache_s)),
	("size",		ctypes.c_int),] )

mlt_cache_close = _rpythonic_function_(		"mlt_cache_close", ctypes.c_void_p, [
	("cache",		ctypes.POINTER(mlt_cache_s)),] )

mlt_cache_purge = _rpythonic_function_(		"mlt_cache_purge", ctypes.c_void_p, [
	("cache",		ctypes.POINTER(mlt_cache_s)),
	("C_object",		ctypes.POINTER(ctypes.c_void_p)),] )

mlt_cache_put = _rpythonic_function_(		"mlt_cache_put", ctypes.c_void_p, [
	("cache",		ctypes.POINTER(mlt_cache_s)),
	("C_object",		ctypes.POINTER(ctypes.c_void_p)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.c_int),
	("destructor",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

mlt_cache_get = _rpythonic_function_(		"mlt_cache_get", ctypes.POINTER(mlt_cache_item_s), [
	("cache",		ctypes.POINTER(mlt_cache_s)),
	("C_object",		ctypes.POINTER(ctypes.c_void_p)),] )

mlt_version_get_int = _rpythonic_function_(		"mlt_version_get_int", ctypes.c_int, [] )

mlt_version_get_major = _rpythonic_function_(		"mlt_version_get_major", ctypes.c_int, [] )

mlt_version_get_minor = _rpythonic_function_(		"mlt_version_get_minor", ctypes.c_int, [] )

mlt_version_get_revision = _rpythonic_function_(		"mlt_version_get_revision", ctypes.c_int, [] )

mlt_version_get_string = _rpythonic_function_(		"mlt_version_get_string", ctypes.POINTER(ctypes.c_char), [] )


_rpythonic_convert_structs_to_objects()

_rpythonic_setup_return_wrappers()
_rpythonic_make_nice_global_enums_()
_rpythonic_clean_up_missing_functions_()
_rpythonic_strip_prefixes_(['mlt_'])