## generated by RPythonic 0.4.8d	| host-type:32bits=True
## http://code.google.com/p/rpythonic/
import os, sys, ctypes, inspect
__os = os
__sys = sys
__inspect = inspect
_CTYPES_CDLLS = []	# support loading functions from multiple libraries


PYTHON_RESERVED_KEYWORDS = 'for while in as global with try except lambda return raise if else elif eval exec and not or break continue finally print yield del def class assert from is pass'.split()


IS32BIT = (ctypes.sizeof(ctypes.c_void_p)==4)

_ISPYTHON2 = sys.version_info[0] == 2
if _ISPYTHON2: _NULLBYTE = '\0'
else: _NULLBYTE = bytes( chr(0), 'ascii' )

def _CHARP2STRING( charp, encoding='utf-8' ):
	b = bytes()
	i = 0
	while True:
		char = charp[ i ]
		if char == _NULLBYTE: break
		else:
			b += char
			i += 1
	return b.decode( encoding )

## try to load precompiled c-libraries from this directory, if the library is not there try to load from the system.
_clibs_dir = os.path.dirname(os.path.abspath(__file__))

def _load_ctypes_lib( name ):
	if __os.name == 'posix':
		if __sys.platform.startswith('linux'):
			if not name.endswith('.so'): name += '.so'
			if not name.startswith('lib'): name = 'lib' + name

			if IS32BIT: 	path = __os.path.join(_clibs_dir,'linux32')
			else: 		path = __os.path.join(_clibs_dir,'linux64')
			url = __os.path.join( path, name )
			if __os.path.isfile( url ): return ctypes.CDLL(url)
			elif __os.path.isfile( '/usr/local/lib/%s'%name ): return ctypes.CDLL('/usr/local/lib/%s'%name)
			elif __os.path.isfile( '/usr/local/lib64/%s'%name ) and not IS32BIT: return ctypes.CDLL('/usr/local/lib64/%s'%name)
			elif __os.path.isfile( '/usr/lib/%s'%name ): return ctypes.CDLL('/usr/lib/%s'%name)
			elif __os.path.isfile( './%s'%name ): return ctypes.CDLL('./%s'%name)
			
			elif __os.path.isfile( '/usr/lib/%s.0'%name ):	# Fedora style
				return ctypes.CDLL('/usr/lib/%s.0'%name )
			elif __os.path.isfile( '/usr/lib64/%s.0'%name ):	# Fedora style
				return ctypes.CDLL('/usr/lib64/%s.0'%name )

			else:	# fallback
				print('[ falling back to loading from current process ]')
				try: return ctypes.CDLL(name)
				except: return ctypes.CDLL('')

		elif sys.platform == 'darwin':
			name += '.dylib'
			if IS32BIT: 	path = os.path.join(_clibs_dir,'osx32')
			else: 		path = os.path.join(_clibs_dir,'osx64')
			url = os.path.join( path, name )
			if os.path.isfile( url ): return ctypes.CDLL(url)
			else: return ctypes.CDLL(name) #fallback

	elif os.name == 'nt':
		name += '.dll'
		if IS32BIT: 	path = os.path.join(_clibs_dir,'win32')
		else: 		path = os.path.join(_clibs_dir,'win64')
		url = os.path.join( path, name )
		if os.path.isfile( url ): return ctypes.CDLL(url)
		else: return ctypes.CDLL(name) #fallback

RPYTHONIC_WRAPPER_FUNCTIONS = {}
RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES = []
RPYTHONIC_AUTOPREFIX_IGNORE = []

## ctypes does not clearly expose these types ##
PyCFuncPtrType = type(ctypes.CFUNCTYPE(ctypes.c_void_p))
PyCArrayType = type( ctypes.c_int * 2 )
PyCPointerType = type( ctypes.POINTER(ctypes.c_int) )
PyCStructType = type( ctypes.Structure )
CArgObject = type( ctypes.byref(ctypes.c_int()) )

class _rpythonic_meta_(object):
	'''
	Reserved Attributes:
		POINTER
		CSTRUCT
		CAST
	'''
	_rpythonic_ = True		# workaround for now, must have a way to know if object is a meta from another module, isinstance(o,_rpythonic_meta_) will fail in those cases. another workaround could be check sys.modules for other rpythonic modules and fetch _rpythonic_meta_ from there.
	def __init__(self, *args, **kw ):							# cheap trick, abuse **kw, and look for "pointer", "cast"
		if kw and 'pointer' not in kw: raise SyntaxError	# sorry, you can not init with keywords
		elif kw and 'pointer' in kw:
			if 'cast' in kw and kw['cast']:
				self.POINTER = ctypes.cast( kw['pointer'], ctypes.POINTER(self.CSTRUCT) )
			else: self.POINTER = kw['pointer']
		else: self.POINTER = ctypes.pointer( self.CSTRUCT(*args) )
		self.POINTER.pyobject = self	# .pyobject is local to this pointer "object"

	def __getattr__(self,name):
		if hasattr( self.POINTER.contents, name ):
			return getattr( self.POINTER.contents, name )

		else:	# when rpythonic failed to generate good bindings - these lookups should be cached
			for parent in self._rpythonic_parent_classes_:
				if hasattr( parent, name ):
					method = getattr( parent, name )	# should check if it really is an unbound method
					if method in parent._rpythonic_unbound_lookup_:
						func = parent._rpythonic_unbound_lookup_[ method ]
						n = func.name
						if len(func.argnames) > 1:
							argnames = func.argnames[ 1 : ]
							a = ',' + '=None,'.join( argnames ) + '=None'
							b = ','.join( argnames )
						else: a = b = ''
						lamb = eval( 'lambda self %s: %s( self.POINTER, %s )' %(a,n,b) )
						setattr( self.__class__, name, lamb )
						#return lamb	# this would return the unbound lambda, must call getattr again
						return getattr( self, name )
					else:
						# this can happen if self also inherits from the same parent class,
						# assume that by continuing this reaches that shared parent class,
						# and the lambda above is created as normal.
						continue
			## last resort, load from global name space ##
			G = globals()
			if name in G: return lambda *args: G[name](self.POINTER, *args)
			else:
				for prefix in self._autoprefix_:
					n = prefix + name
					if n in G: return lambda *args: G[n](self.POINTER, *args)
				print( 'possible auto-prefixes available', self._autoprefix_ )
				raise AttributeError

	def __call__(self, type=False):
		print('calling object is DEPRECATED - use ob.POINTER or ob.CSTRUCT')
		if type: return self.CSTRUCT
		else: return self.POINTER


def _rpythonic_generate_subclass_( name, struct, functions ):
	head = 'class %s( _rpythonic_meta_ ):' %name
	body = [ 
		'_rpythonic_parent_classes_ = []' ,
		'_rpythonic_unbound_lookup_ = {}' 
	]

	names = [ func.name for func in functions ]

	possibles = {}
	rank = []		# rank by longest name
	if len(names) > 3000: print('too many functions to use this hack')
	else:
		for n1 in names:
			prefix = ''
			for i,char in enumerate(n1):
				prefix += char
				if prefix not in possibles:
					possibles[ prefix ] = 0
					for n2 in names:
						if n2.startswith( prefix ):
							possibles[ prefix ] += 1

					if not rank or len(prefix) > len(rank[-1]) and possibles[prefix] > len(names)/4:
						rank.append( prefix )

	top = []
	while rank:
		best = rank.pop()
		if possibles[best] > len(functions)/2 and best not in names:
			if best.endswith('_set_') or best.endswith('_get_'): best = best[ : -4 ]
			elif best.endswith('Set') or best.endswith('Get'): best = best[ : -3 ]

			rem = []
			for other in rank:
				if best.startswith(other): rem.append( other )
			for r in rem: rank.remove( r )

			if best not in top: top.append( best )

		if len(top) > 3: break

	for n in names:		# find shortest prefixes #
		prefix = ''
		for i,char in enumerate(n):		# cammelCase
			if i==0: prefix += char; continue
			if char.isupper() and len(prefix) >= 2: break
			prefix += char
		if prefix and prefix != n and len(prefix) >= 2:
			hits = 0
			for other in names:
				if other.startswith( prefix ): hits += 1
			if hits >= 2 and prefix not in top:
				top.append( prefix )
				if len(top) >= 6: break

	## setup full names
	for func in functions:
		n = func.name
		if len(func.argnames) > 1:
			argnames = func.argnames[ 1 : ]
			a = ',' + '=None,'.join( argnames ) + '=None'
			b = ','.join( argnames )
		else: a = b = ''

		fhead = 'def %s( self %s ):' %(n,a)
		fbody = ['return %s(self.POINTER, %s)' %(func.name,b)]
		g = fhead + '\n\t\t' + '\n\t\t'.join( fbody )
		body.append( g )
		#body.append( '%s._rpythonic_function_ = %s' %(func.name, func.name) )

	## setup short names ##
	for n in names:
		for prefix in top:
			if n.startswith(prefix) and n[len(prefix):] not in names:
				alt = n[ len(prefix) : ]
				if alt and alt != n and alt not in PYTHON_RESERVED_KEYWORDS and not alt.isdigit() and not alt[0].isdigit():
					body.append( '%s = %s' %(alt,n) )
					names.append( alt )

	gen = head + '\n\t' + '\n\t'.join( body )
	try: exec( gen )
	except:
		print( gen )
		raise SyntaxError

	klass = locals()[name]
	klass.CSTRUCT = struct	# ctypes struct class

	klass._autoprefix_ = top
	for func in functions:
		unbound = getattr( klass, func.name )
		klass._rpythonic_unbound_lookup_[ unbound ] = func
		# klass.longname is klass.shortname = False
		# klass.longname == klass.shortname = True
	return klass

def _rpythonic_convert_structs_to_objects():
	G = globals()
	for klass in _OOAPI_:
		altname = name = klass.__name__
		prefix = ''
		for i,char in enumerate(name):
			if i==0: prefix += char; continue
			if char.isupper(): break
			prefix += char
		if prefix and prefix != name:
			hits = 0
			for other in _OOAPI_:
				if other is not klass:
					if other.__name__.startswith( prefix ): hits += 1
			if hits >= 2:
				altname = name[ len(prefix) : ]

		funcs = _OOAPI_[ klass ]
		newklass = _rpythonic_generate_subclass_( altname, klass, funcs )
		klass._rpythonic_wrapper_class_ = newklass
		G[ name ] = newklass	# replace struct with wrapper
		if altname not in G: G[ altname ] = newklass	# safely define with nicer name
		elif altname != name: # odd cases, maybe a function that returns the object, almost never happens.
			print('WARN - not replacing something with struct wrapper:', G[altname] )


def _rpythonic_setup_return_wrappers():
	R = _rpythonic_function_
	for klass in _OOAPI_:
		if klass in _OOAPI_RETURNS_OBJECT_:
			for f in _OOAPI_RETURNS_OBJECT_[klass]:
				f.object_oriented = True
				if not f.return_wrapper:	# just in case the ctypes footer had already defined it, do not overwrite
					f.return_wrapper = klass._rpythonic_wrapper_class_


###############################################################
##						OLD META FUNC						##
###############################################################
def _rpythonic_function_( name, result=ctypes.c_void_p, args=[]):
	mname = '_metafunc_%s' %name
	exec( 'class %s( _rpythonic_metafunc_ ): pass' %mname )
	k = locals()[mname]
	return k( name, result, args )
_OOAPI_ = {}
_OOAPI_RETURNS_OBJECT_ = {}
class _rpythonic_metafunc_(object):
	def __init__(self, name, result=ctypes.c_void_p, args=[]):
		self.name = name
		self.result = result
		self.argtypes = []		# can dynamically change CFUNCTYPE trick
		self.argnames = []
		self.argtypestypes = []
		for i,arg in enumerate(args):
			n,t = arg
			if n in PYTHON_RESERVED_KEYWORDS: n = 'C_'+n
			if n in self.argnames: n = '%s%s' %(n,i)
			self.argnames.append( n )
			self.argtypes.append( t )
			self.argtypestypes.append( type(t) )		# precomputed for speed

		self.argnames = tuple( self.argnames )				# should never change
		self.numargs = len( self.argtypes )
		self.callbacks = [None] * self.numargs
		self.return_wrapper = None
		self.object_oriented = False
		self.function = None
		for cdll in _CTYPES_CDLLS:	# functions could be multiple libraries
			if hasattr(cdll, self.name):
				func = self.function = getattr(cdll, self.name )
				RPYTHONIC_WRAPPER_FUNCTIONS[ name ] = self
				break
		if not self.function:
			RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES.append( name )

		if self.function: self.reset()

	def change_argument_type( self, name, t ):
		idx = self.argnames.index( name )
		self.argtypes[ idx ] = t
		self.argtypestypes[ idx ] = type(t)
		self.function.argtypes = self.argtypes

	def reset(self):
		if self.argnames:
			a = ',' + '=None,'.join( self.argnames ) + '=None'
			b = ','.join( self.argnames )
		else: a = b = ''

		callmeth = eval( 'lambda self %s: self._call_( %s )' %(a,b) )
		setattr( self.__class__, '__call__', callmeth )

		self.function.restype = self.result
		self.function.argtypes = self.argtypes

		if type( self.result ) is PyCPointerType and type(self.result._type_) is PyCStructType:
			klass = self.result._type_
			if klass not in _OOAPI_RETURNS_OBJECT_: _OOAPI_RETURNS_OBJECT_[klass] = []
			_OOAPI_RETURNS_OBJECT_[klass].append( self )

		self.defaults = []
		for i in range( self.numargs ):
			T = self.argtypes[ i ]
			if type(T) is PyCFuncPtrType:
				p = T()	# func pointers can not be None
				self.defaults.append( p )
				self.callbacks[ i ] = p					# save reference
			elif T in (ctypes.c_int, ctypes.c_uint, ctypes.c_long, ctypes.c_ulong):
				self.defaults.append( 0 )
			elif T in (ctypes.c_float, ctypes.c_double):
				self.defaults.append( .0 )
			else: self.defaults.append( None )	# None is allowed for all other types

			## generate OO API ##
			if i == 0 and type(T) is PyCPointerType and type(T._type_) is PyCStructType:
				klass = T._type_
				if klass not in _OOAPI_: _OOAPI_[ klass ] = []
				_OOAPI_[ klass ].append( self )

	def _call_( self, *args ):			# allow flexible calling types
		cargs = list( self.defaults )
		for i,arg in enumerate(args):
			if isinstance( arg, _rpythonic_meta_ ): arg = arg.POINTER
			elif hasattr( arg, '_rpythonic_' ): arg = arg.POINTER		# workaround - instance from another module

			t = type(arg)
			k = self.argtypes[ i ]
			kt = self.argtypestypes[ i ]
			if arg is None and cargs[i] is not None:	# use user defaults, very rare cases
				continue

			elif t is bool and k is ctypes.c_int:
				if arg: cargs[i] = 1	#ctypes.c_int(1)
				else: cargs[i] = 0	#ctypes.c_int(0)

			elif t in (list,tuple):				# convert lists and tuples into array
				if kt is PyCArrayType:
					cargs[ i ] = k(*arg)
				elif kt is PyCStructType:
					if k._array_wrapper_: cargs[ i ] = k(arg)	# allow easy array init
					else: cargs[ i ] = k(*arg)							# allow multiple args
				elif kt is PyCPointerType:
					cargs[ i ] = _convert_nested_list_to_pointer( k, arg )
				else: assert 0

			elif isinstance( arg, ctypes._Pointer ) and t is not k and kt is PyCPointerType:
				cargs[ i ] = ctypes.cast( arg, k )		# generic's that need to be cast

			elif kt is PyCStructType and isinstance( arg, ctypes._Pointer ):
				cargs[ i ] = arg.contents	# fixed may25

			elif kt is PyCPointerType and not isinstance( arg, (ctypes._Pointer,CArgObject) ):
				if t in (int,float,bool): ptr = k( k._type_(arg) )
				elif t is str:
					if not _ISPYTHON2: arg = arg.encode('utf-8')	# encode to ascii in python3
					ptr = ctypes.create_string_buffer(arg)				# correct and pypy compatible
				elif t in (PyCStructType, PyCArrayType):
					ptr = ctypes.cast( ctypes.pointer( arg ), k )
				else:
					ptr = arg	# TODO print warning?
				cargs[ i ] = ptr

			elif kt is PyCFuncPtrType:
				if t.__name__ == 'CFunctionType': cargs[ i ] = arg		# assume outside holds pointer
				else:													# this is not safe #
					cargs[ i ] = self.callbacks[ i ] = k( arg )				# assume arg is a callable
			else:
				cargs[ i ] = arg		# directly pass

		## if you define your own return_wrapper, it must take keyword "pointer"
		if self.return_wrapper: return self.return_wrapper( pointer=self.function( *cargs ) )
		else: return self.function( *cargs )



def _convert_nested_list_to_pointer( k, arg ):
	depth = 0; s = k
	while True:
		if type(s) is PyCPointerType:
			s = getattr( s, '_type_' )
			depth += 1
		else: break
	assert depth and depth <= 2
	if depth == 1:
		T = k._type_
		ptr = k( k._type_() )
		for i in range( len(arg) ):
			ptr[ i ] = T( *arg[i] )
	elif depth == 2:
		T = k._type_._type_
		_ptr = k._type_( k._type_._type_() )
		for i in range(len( arg )):
			for j in range( len(arg[i]) ):
				_ptr[ j ] = T( *arg[ i ][ j ] )
		ptr = k( _ptr )
	return ptr


def __freeze_rpythonic_struct( cls, fields ):
	if cls not in _OOAPI_: _OOAPI_[ cls ] = []	# wrap all structs
	try: setattr( cls, '_fields_', fields )
	except:
		print( 'WARN - bad order struct freeze', cls )
		#cls._fields_ = []

class _rpythonic_struct_( ctypes.Structure ):
	_array_wrapper_ = False
	_fields_ = []
	_methods_ = {}
	#def __call__(self): return self
	def __init__(self, *args, **kw ):
		cargs = []
		argtypes = []
		for a in self._fields_: argtypes.append( a[1] )
		if len(args) > len(argtypes): args = [args]	# allow both calling conventions
		for i,arg in enumerate( args ):
			if isinstance( arg, _rpythonic_meta_ ): arg = arg.POINTER

			t = type(arg)
			k = argtypes[ i ]
			if t in (list,tuple):
				if k.__class__.__name__	== 'PyCArrayType':
					cargs.append( k(*arg) )
				elif k.__class__.__name__ == 'PyCStructType':
					if k._array_wrapper_: cargs.append( k(arg) )	# allow easy array init
					else: cargs.append( k(*arg) )							# allow multiple args
			elif isinstance( arg, ctypes._Pointer ) and t is not k:
				cargs[ i ] = ctypes.cast( arg, k )	# generic's that need to be cast
			elif k.__class__.__name__ == 'PyCArrayType' and t in (float,int,bool):
				cargs.append( k(arg) )		# support init array from single value
			else:
				cargs.append( arg )		# directly pass

		ctypes.Structure.__init__(self, *cargs, **kw)


def _rpythonic_make_nice_global_enums_():
	G = globals()
	for name in RPYTHONIC_GLOBAL_ENUMS:
		if '_' in name and name.index('_') <= 4:
			altname = name[ name.index('_') + 1 : ]
			if altname not in G:
				G[altname] = RPYTHONIC_GLOBAL_ENUMS[ name ]

def _rpythonic_clean_up_missing_functions_():
	G = globals()
	for f in RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES:
		G.pop( f )
	print( "C functions loaded: %s" %len(RPYTHONIC_WRAPPER_FUNCTIONS) )
	print( "C functions failed: %s" %len(RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES) )



###### NEW API #########
CTYPES_DLL = None

class _VOID_POINTER_CONTAINER_(object):
	def __init__(self, ptr, name=None):
		self._pointer_ = ptr
		self.name = name
NULL = _VOID_POINTER_CONTAINER_(None,'<null pointer>')


class meta:	# NEW API - allow run time switch from ctypes to rffi
	'''
	Methods:
		RPython will not allow object wrapper around a method (__call__ not allowed)
		keep C function names in list "__cfunctions__"
		rpythonic.enable_rffi( classA, classB )	
		can take advantage of methods in object-method-wrapper,
		generate rffi wrapper and set method on classA, etc.
		replaces object-method-wrapper with rffi-method

	Properties:
		CPython: obj.x=1
		RPython: obj.set_x(1)	
	'''
	METAS = []
	def __init__(self, constructors=[], methods={}, properties={}):
		#global CTYPES_DLL	# TODO update me to using _CTYPES_CDLLS
		#if not CTYPES_DLL:
		#	CTYPES_DLL = _load_ctypes_lib( _clib_name_ )

		self.constructors = constructors
		self.methods = methods
		self.properties = properties
		self.METAS.append( self )



	def __call__(self, cls ):
		print('@meta', cls )

		if not self.constructors:
			lamb = lambda s, _explicit_pointer_=None: setattr(s,'_pointer_',getattr(_explicit_pointer_,'_pointer_')) if hasattr(_explicit_pointer_,'_pointer_') else setattr(s,'_pointer_',_explicit_pointer_)
			lamb._debug = '(no constructor)'
			setattr( cls, '__init__', lamb )
		else:
			con = self._find_best_function( self.constructors )
			cfunc = self._build_cfunc( con )
			setattr( cls, '_%s'%con['name'], cfunc )
			g = self._gen_init( con )
			setattr( cls, '__init__', g )
		
		## set methods ##
		for name in self.methods:
			meth = self.methods[ name ]
			cfuncs = []
			for m in meth['functions']:
				cfunc = self._build_cfunc( m, method=True, static=meth['static'] )
				self._setup_return( cfunc, meth )
				setattr( cls, '_%s'%m['name'], cfunc )
				cfuncs.append( cfunc )

			f = self._find_best_function( meth['functions'] )
			g = self._gen_method( meth, f )
			g._cfuncs = cfuncs
			if meth['static']: g = classmethod( g )
			setattr( cls, name, g )

		for name in self.properties:
			print( 'property:', name )
			p = []
			for f in self.properties[name]:
				cfunc = self._build_cfunc( f )
				setattr( cls, '_%s'%f['name'], cfunc )
				g = self._gen_method( f, f )
				p.append( g )

			setattr( cls, name, property(*p) )

		return cls


	@staticmethod
	def _build_cfunc( info, method=False, static=False ):
		cfunc = getattr(CTYPES_DLL, info['name'])
		if method and not static: argtypes = [ ctypes.c_void_p ]
		else: argtypes = []
		for p in info['parameters']: argtypes.append( eval(p['ctypes_type']) )
		cfunc.argtypes = argtypes
		return cfunc

	@staticmethod
	def _setup_return( cfunc, info ):
		if not info['returns_fundamental']:
			cfunc.restype = ctypes.c_void_p
		elif info['returns_fundamental']:
			cfunc.restype = eval( info['returns_ctypes'] )
		else:
			cfunc.restype = ctypes.c_void_p

	@staticmethod
	def _gen_prepare_args( m ):
		a = []; b = []
		for i,p in enumerate(m['parameters']):
			if 'name' in p: n = p['name']
			else: n = '_unnamed_%s' %i
			if '<' in n: n = '_TODOfixme_%s' %i
			if n in PYTHON_RESERVED_KEYWORDS: n += str(i)
			if p['fundamental']:
				b.append( n )
				s = p['raw_type'].split()
				if 'default' in p:
					d = p['default']
					if p['raw_type'] in ('float', 'double'):
						if d.endswith('f'): d = d[:-1]
						d = d.replace(' ', '.')
						if 'e' in d: d = 0.0
						try: d = float(d)
						except: d = 0.0
					elif ('int' in s or 'size_t' in s) and not d.isdigit(): d = 0
					elif 'char' in s and '"' not in d: d = '""'
					elif d.lower() == 'false': d = False
					elif d.lower() == 'true': d = True
				elif 'char' in s: d = '""'
				elif 'float' in s or 'double' in s: d = 0.0
				elif 'size_t' in s or 'int' in s or 'long' in s or 'short' in s: d = 0
				elif p['raw_type'] == 'bool': d = False
				elif p['raw_type'] in ('void', '(template)'): d = 'NULL'
				else: print( p )
				a.append( n+'=%s' %d )

			else:
				b.append( '%s._pointer_'%n )
				a.append( n+'=NULL' )
		return a, b

	@staticmethod
	def _gen_init( m ):
		a, b = meta._gen_prepare_args( m )
		if a: e = 'lambda _py_self_, %s, _explicit_pointer_=None: ' %(','.join(a))
		else: e = 'lambda _py_self_, _explicit_pointer_=None: '
		e += 'setattr(_py_self_, "_pointer_", _py_self_._%s(%s))' %( m['name'], ','.join(b) )
		e += ' if not _explicit_pointer_ else '
		e += 'setattr(_py_self_, "_pointer_", _explicit_pointer_)'
		print( e )
		lamb = eval( e ); lamb._debug = e; lamb._introspect = m
		return lamb

	@staticmethod
	def _find_best_function( funcs ):
		best = funcs[0]
		score = -1
		if len(funcs) > 1:
			for f in funcs:
				hits = 0
				for p in f['parameters']:
					if p['fundamental']: hits += 1
				if hits and hits == len( f['parameters'] ):
					if hits > score:
						score = hits
						best = f
		return best

	@staticmethod
	def _gen_method( m, f ):
		a, b = meta._gen_prepare_args( f )
		if a: e = 'lambda _py_self_, %s: ' %(','.join(a))
		else: e = 'lambda _py_self_: '

		if 'static' in m and m['static']:	# static in c++ is like a classmethod
			c = '_py_self_._%s( %s )' %( f['name'], ','.join(b) )
		else:
			c = '_py_self_._%s( _py_self_._pointer_, %s )' %( f['name'], ','.join(b) )

		if not m['returns_fundamental']:
			if 'returns_unknown' in m or '<' in m['returns']: c = '_VOID_POINTER_CONTAINER_( %s, name="%s" )' %(c,m['returns'])
			else:
				something = m['returns'].replace('::', '.')
				c = '%s( _explicit_pointer_=%s )' %(something, c)

		e += c; lamb = eval( e )
		lamb._debug = e; lamb._introspect = f
		return lamb


	META_FUNCTIONS = []
	@classmethod
	def function( self, info ):
		print('@meta.function', info['name'] )
		#global CTYPES_DLL
		#if not CTYPES_DLL:
		#	CTYPES_DLL = _load_ctypes_lib( _clib_name_ )

		cfunc = self._build_cfunc( info, method=False, static=True )
		setattr( meta, '_%s'%info['name'], cfunc )
		self._setup_return( cfunc, info )
		a, b = meta._gen_prepare_args( info )
		e = 'lambda %s: ' %(','.join(a))
		c = 'meta._%s( %s )' %( info['name'], ','.join(b) )

		if not info['returns_fundamental']:
			if 'returns_unknown' in info or '<' in info['returns']:
				c = '_VOID_POINTER_CONTAINER_( %s, name="%s" )' %(c,info['returns'])
			else:
				something = info['returns'].replace('::', '.')
				c = '%s( _explicit_pointer_=%s )' %(something, c)
		e += c
		lamb = eval( e )
		lamb._debug = e
		lamb._introspect = info
		return lamb



def _rpythonic_strip_prefixes_( prefixes ):
	G = globals()
	names = list(G.keys())	# ensure list in py3
	for name in names:
		for prefix in prefixes:
			if name.startswith( prefix ):
				newname = name[ len(prefix) : ]
				if newname and newname not in G:
					G[ newname ] = G[ name ]


########################################################
##				Load Dynamic Libaries					##
def _rpythonic_load_dynamic_libraries(names):
	global _CTYPES_CDLLS
	for name in names:
		cdll = _load_ctypes_lib( name )
		if cdll:
			print('[[dynamic library loaded: %s]]' %name)
			_CTYPES_CDLLS.append( cdll )
#----------------------------------------------------------#
print( os.path.abspath( os.path.curdir ) )



_rpythonic_load_dynamic_libraries( ['libX11'] )

## macro globals ##
XlibSpecificationRelease = 6
X_HAVE_UTF8_STRING = 1
Bool = 0
Status = 0
True = 1
False = 0
QueuedAlready = 0
QueuedAfterReading = 1
QueuedAfterFlush = 2
XNRequiredCharSet = "requiredCharSet"
XNQueryOrientation = "queryOrientation"
XNBaseFontName = "baseFontName"
XNOMAutomatic = "omAutomatic"
XNMissingCharSet = "missingCharSet"
XNDefaultString = "defaultString"
XNOrientation = "orientation"
XNDirectionalDependentDrawing = "directionalDependentDrawing"
XNContextualDrawing = "contextualDrawing"
XNFontInfo = "fontInfo"
XIMPreeditArea = 1
XIMPreeditCallbacks = 2
XIMPreeditPosition = 4
XIMPreeditNothing = 8
XIMPreeditNone = 16
XIMStatusArea = 256
XIMStatusCallbacks = 512
XIMStatusNothing = 1024
XIMStatusNone = 2048
XNVaNestedList = "XNVaNestedList"
XNQueryInputStyle = "queryInputStyle"
XNClientWindow = "clientWindow"
XNInputStyle = "inputStyle"
XNFocusWindow = "focusWindow"
XNResourceName = "resourceName"
XNResourceClass = "resourceClass"
XNGeometryCallback = "geometryCallback"
XNDestroyCallback = "destroyCallback"
XNFilterEvents = "filterEvents"
XNPreeditStartCallback = "preeditStartCallback"
XNPreeditDoneCallback = "preeditDoneCallback"
XNPreeditDrawCallback = "preeditDrawCallback"
XNPreeditCaretCallback = "preeditCaretCallback"
XNPreeditStateNotifyCallback = "preeditStateNotifyCallback"
XNPreeditAttributes = "preeditAttributes"
XNStatusStartCallback = "statusStartCallback"
XNStatusDoneCallback = "statusDoneCallback"
XNStatusDrawCallback = "statusDrawCallback"
XNStatusAttributes = "statusAttributes"
XNArea = "area"
XNAreaNeeded = "areaNeeded"
XNSpotLocation = "spotLocation"
XNColormap = "colorMap"
XNStdColormap = "stdColorMap"
XNForeground = "foreground"
XNBackground = "background"
XNBackgroundPixmap = "backgroundPixmap"
XNFontSet = "fontSet"
XNLineSpace = "lineSpace"
XNCursor = "cursor"
XNQueryIMValuesList = "queryIMValuesList"
XNQueryICValuesList = "queryICValuesList"
XNVisiblePosition = "visiblePosition"
XNR6PreeditCallback = "r6PreeditCallback"
XNStringConversionCallback = "stringConversionCallback"
XNStringConversion = "stringConversion"
XNResetState = "resetState"
XNHotKey = "hotKey"
XNHotKeyState = "hotKeyState"
XNPreeditState = "preeditState"
XNSeparatorofNestedList = "separatorofNestedList"
XBufferOverflow = -1
XLookupNone = 1
XLookupChars = 2
XLookupKeySym = 3
XLookupBoth = 4
XIMReverse = 1
XIMUnderline = 2
XIMHighlight = 4
XIMPrimary = 32
XIMSecondary = 64
XIMTertiary = 128
XIMVisibleToForward = 256
XIMVisibleToBackword = 512
XIMVisibleToCenter = 1024
XIMPreeditUnKnown = 0
XIMPreeditEnable = 1
XIMPreeditDisable = 2
XIMInitialState = 1
XIMPreserveState = 2
XIMStringConversionLeftEdge = 1
XIMStringConversionRightEdge = 2
XIMStringConversionTopEdge = 4
XIMStringConversionBottomEdge = 8
XIMStringConversionConcealed = 16
XIMStringConversionWrapped = 32
XIMStringConversionBuffer = 1
XIMStringConversionLine = 2
XIMStringConversionWord = 3
XIMStringConversionChar = 4
XIMStringConversionSubstitution = 1
XIMStringConversionRetrieval = 2
XIMHotKeyStateON = 1
XIMHotKeyStateOFF = 2
## enums ##
XOMOrientation_LTR_TTB = 0 
XOMOrientation_RTL_TTB = 1 
XOMOrientation_TTB_LTR = 2 
XOMOrientation_TTB_RTL = 3 
XOMOrientation_Context = 4 

XIMForwardChar = 0 
XIMBackwardChar = 1 
XIMForwardWord = 2 
XIMBackwardWord = 3 
XIMCaretUp = 4 
XIMCaretDown = 5 
XIMNextLine = 6 
XIMPreviousLine = 7 
XIMLineStart = 8 
XIMLineEnd = 9 
XIMAbsolutePosition = 10 
XIMDontChange = 11 

XIMIsInvisible = 0 
XIMIsPrimary = 1 
XIMIsSecondary = 2 

XIMTextType = 0 
XIMBitmapType = 1 

## simple enums ##
RPYTHONIC_GLOBAL_ENUMS = { 
 "XOMOrientation_LTR_TTB" : 0,  "XOMOrientation_RTL_TTB" : 1,  "XOMOrientation_TTB_LTR" : 2,  "XOMOrientation_TTB_RTL" : 3,  "XOMOrientation_Context" : 4, 
 "XIMForwardChar" : 0,  "XIMBackwardChar" : 1,  "XIMForwardWord" : 2,  "XIMBackwardWord" : 3,  "XIMCaretUp" : 4,  "XIMCaretDown" : 5,  "XIMNextLine" : 6,  "XIMPreviousLine" : 7,  "XIMLineStart" : 8,  "XIMLineEnd" : 9,  "XIMAbsolutePosition" : 10,  "XIMDontChange" : 11, 
 "XIMIsInvisible" : 0,  "XIMIsPrimary" : 1,  "XIMIsSecondary" : 2, 
 "XIMTextType" : 0,  "XIMBitmapType" : 1, 

}
class __fsid_t(_rpythonic_struct_): _array_wrapper_ = True
class __sigset_t(_rpythonic_struct_): _array_wrapper_ = True
class timespec(_rpythonic_struct_): pass
class timeval(_rpythonic_struct_): pass
class fd_set(_rpythonic_struct_): _array_wrapper_ = True
class pthread_attr_t(ctypes.Union): pass
class __pthread_internal_slist(_rpythonic_struct_): pass
class pthread_mutex_t(ctypes.Union): pass
class __pthread_mutex_s(_rpythonic_struct_): pass
class pthread_mutexattr_t(ctypes.Union): pass
class pthread_cond_t(ctypes.Union): pass
class pthread_condattr_t(ctypes.Union): pass
class pthread_rwlock_t(ctypes.Union): pass
class __data(_rpythonic_struct_): pass
class pthread_rwlockattr_t(ctypes.Union): pass
class pthread_barrier_t(ctypes.Union): pass
class pthread_barrierattr_t(ctypes.Union): pass
class _XExtData(_rpythonic_struct_): pass
class XExtCodes(_rpythonic_struct_): pass
class XPixmapFormatValues(_rpythonic_struct_): pass
class XGCValues(_rpythonic_struct_): pass
class _XGC(_rpythonic_struct_): pass
class Visual(_rpythonic_struct_): pass
class Depth(_rpythonic_struct_): pass
class _XDisplay(_rpythonic_struct_): pass
class Screen(_rpythonic_struct_): pass
class ScreenFormat(_rpythonic_struct_): pass
class XSetWindowAttributes(_rpythonic_struct_): pass
class XWindowAttributes(_rpythonic_struct_): pass
class XHostAddress(_rpythonic_struct_): pass
class XServerInterpretedAddress(_rpythonic_struct_): pass
class _XImage(_rpythonic_struct_): pass
class funcs(_rpythonic_struct_): pass
class XWindowChanges(_rpythonic_struct_): pass
class XColor(_rpythonic_struct_): pass
class XSegment(_rpythonic_struct_): pass
class XPoint(_rpythonic_struct_): pass
class XRectangle(_rpythonic_struct_): pass
class XArc(_rpythonic_struct_): pass
class XKeyboardControl(_rpythonic_struct_): pass
class XKeyboardState(_rpythonic_struct_): _array_wrapper_ = True
class XTimeCoord(_rpythonic_struct_): pass
class XModifierKeymap(_rpythonic_struct_): pass
class _XPrivate(_rpythonic_struct_): pass
class _XrmHashBucketRec(_rpythonic_struct_): pass
class _XPrivDisplay(_rpythonic_struct_): pass
class XKeyEvent(_rpythonic_struct_): pass
class XButtonEvent(_rpythonic_struct_): pass
class XMotionEvent(_rpythonic_struct_): pass
class XCrossingEvent(_rpythonic_struct_): pass
class XFocusChangeEvent(_rpythonic_struct_): pass
class XKeymapEvent(_rpythonic_struct_): _array_wrapper_ = True
class XExposeEvent(_rpythonic_struct_): pass
class XGraphicsExposeEvent(_rpythonic_struct_): pass
class XNoExposeEvent(_rpythonic_struct_): pass
class XVisibilityEvent(_rpythonic_struct_): pass
class XCreateWindowEvent(_rpythonic_struct_): pass
class XDestroyWindowEvent(_rpythonic_struct_): pass
class XUnmapEvent(_rpythonic_struct_): pass
class XMapEvent(_rpythonic_struct_): pass
class XMapRequestEvent(_rpythonic_struct_): pass
class XReparentEvent(_rpythonic_struct_): pass
class XConfigureEvent(_rpythonic_struct_): pass
class XGravityEvent(_rpythonic_struct_): pass
class XResizeRequestEvent(_rpythonic_struct_): pass
class XConfigureRequestEvent(_rpythonic_struct_): pass
class XCirculateEvent(_rpythonic_struct_): pass
class XCirculateRequestEvent(_rpythonic_struct_): pass
class XPropertyEvent(_rpythonic_struct_): pass
class XSelectionClearEvent(_rpythonic_struct_): pass
class XSelectionRequestEvent(_rpythonic_struct_): pass
class XSelectionEvent(_rpythonic_struct_): pass
class XColormapEvent(_rpythonic_struct_): pass
class XClientMessageEvent(_rpythonic_struct_): pass
class data(ctypes.Union): pass
class XMappingEvent(_rpythonic_struct_): pass
class XErrorEvent(_rpythonic_struct_): pass
class XAnyEvent(_rpythonic_struct_): pass
class XGenericEvent(_rpythonic_struct_): pass
class XGenericEventCookie(_rpythonic_struct_): pass
class _XEvent(ctypes.Union): pass
class XCharStruct(_rpythonic_struct_): pass
class XFontProp(_rpythonic_struct_): pass
class XFontStruct(_rpythonic_struct_): pass
class XTextItem(_rpythonic_struct_): pass
class XChar2b(_rpythonic_struct_): pass
class XTextItem16(_rpythonic_struct_): pass
class XEDataObject(ctypes.Union): pass
class XFontSetExtents(_rpythonic_struct_): pass
class _XOM(_rpythonic_struct_): pass
class _XOC(_rpythonic_struct_): pass
class XmbTextItem(_rpythonic_struct_): pass
class XwcTextItem(_rpythonic_struct_): pass
class XOMCharSetList(_rpythonic_struct_): pass
class XOMOrientation(_rpythonic_struct_): pass
class XOMFontInfo(_rpythonic_struct_): pass
class _XIM(_rpythonic_struct_): pass
class _XIC(_rpythonic_struct_): pass
class XIMStyles(_rpythonic_struct_): pass
class XIMCallback(_rpythonic_struct_): pass
class XICCallback(_rpythonic_struct_): pass
class _XIMText(_rpythonic_struct_): pass
class string(ctypes.Union): pass
class _XIMPreeditStateNotifyCallbackStruct(_rpythonic_struct_): pass
class _XIMStringConversionText(_rpythonic_struct_): pass
class _XIMStringConversionCallbackStruct(_rpythonic_struct_): pass
class _XIMPreeditDrawCallbackStruct(_rpythonic_struct_): pass
class _XIMPreeditCaretCallbackStruct(_rpythonic_struct_): pass
class _XIMStatusDrawCallbackStruct(_rpythonic_struct_): pass
class _XIMHotKeyTrigger(_rpythonic_struct_): pass
class _XIMHotKeyTriggers(_rpythonic_struct_): pass
class XIMValuesList(_rpythonic_struct_): pass
## union and structures ##
__freeze_rpythonic_struct( __fsid_t, [
	( "__val", ( ctypes.c_int * 2 ) ),
])

__freeze_rpythonic_struct( __sigset_t, [
	( "__val", ctypes.c_uint64 ),
])

__freeze_rpythonic_struct( timespec, [
	( "tv_sec", ctypes.c_int64 ),
	( "tv_nsec", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( timeval, [
	( "tv_sec", ctypes.c_int64 ),
	( "tv_usec", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( fd_set, [
	( "__fds_bits", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_attr_t, [
	( "__size", ( ctypes.c_char * 36 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( __pthread_internal_slist, [
	( "__next", ctypes.POINTER(__pthread_internal_slist) ),
])

__freeze_rpythonic_struct( __pthread_mutex_s, [
	( "__lock", ctypes.c_int ),
	( "__count", ctypes.c_uint ),
	( "__owner", ctypes.c_int ),
	( "__kind", ctypes.c_int ),
	( "__nusers", ctypes.c_uint ),
	#opaque-warning# <rpythonic.rpythonic.SomeThing object at 0x9eb94ac>
])

__freeze_rpythonic_struct( pthread_mutex_t, [
	( "__data", __pthread_mutex_s ),
	( "__size", ( ctypes.c_char * 24 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_mutexattr_t, [
	( "__size", ( ctypes.c_char * 4 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( __data, [
	( "__lock", ctypes.c_int ),
	( "__nr_readers", ctypes.c_uint ),
	( "__readers_wakeup", ctypes.c_uint ),
	( "__writer_wakeup", ctypes.c_uint ),
	( "__nr_readers_queued", ctypes.c_uint ),
	( "__nr_writers_queued", ctypes.c_uint ),
	( "__flags", ctypes.c_ubyte ),
	( "__shared", ctypes.c_ubyte ),
	( "__pad1", ctypes.c_ubyte ),
	( "__pad2", ctypes.c_ubyte ),
	( "__writer", ctypes.c_int ),
])

__freeze_rpythonic_struct( pthread_cond_t, [
	( "__data", __data ),
	( "__size", ( ctypes.c_char * 48 ) ),
	( "__align", ctypes.c_longlong ),
])

__freeze_rpythonic_struct( pthread_condattr_t, [
	( "__size", ( ctypes.c_char * 4 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_rwlock_t, [
	( "__data", __data ),
	( "__size", ( ctypes.c_char * 32 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_rwlockattr_t, [
	( "__size", ( ctypes.c_char * 8 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_barrier_t, [
	( "__size", ( ctypes.c_char * 20 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_barrierattr_t, [
	( "__size", ( ctypes.c_char * 4 ) ),
	( "__align", ctypes.c_int ),
])

__freeze_rpythonic_struct( _XExtData, [
	( "number", ctypes.c_int ),
	( "next", ctypes.POINTER(_XExtData) ),
	( "free_private", ctypes.c_void_p ),
	( "private_data", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( XExtCodes, [
	( "extension", ctypes.c_int ),
	( "major_opcode", ctypes.c_int ),
	( "first_event", ctypes.c_int ),
	( "first_error", ctypes.c_int ),
])

__freeze_rpythonic_struct( XPixmapFormatValues, [
	( "depth", ctypes.c_int ),
	( "bits_per_pixel", ctypes.c_int ),
	( "scanline_pad", ctypes.c_int ),
])

__freeze_rpythonic_struct( XGCValues, [
	( "function", ctypes.c_int ),
	( "plane_mask", ctypes.c_ulong ),
	( "foreground", ctypes.c_ulong ),
	( "background", ctypes.c_ulong ),
	( "line_width", ctypes.c_int ),
	( "line_style", ctypes.c_int ),
	( "cap_style", ctypes.c_int ),
	( "join_style", ctypes.c_int ),
	( "fill_style", ctypes.c_int ),
	( "fill_rule", ctypes.c_int ),
	( "arc_mode", ctypes.c_int ),
	( "tile", ctypes.c_ulong ),
	( "stipple", ctypes.c_ulong ),
	( "ts_x_origin", ctypes.c_int ),
	( "ts_y_origin", ctypes.c_int ),
	( "font", ctypes.c_ulong ),
	( "subwindow_mode", ctypes.c_int ),
	( "graphics_exposures", ctypes.c_int ),
	( "clip_x_origin", ctypes.c_int ),
	( "clip_y_origin", ctypes.c_int ),
	( "clip_mask", ctypes.c_ulong ),
	( "dash_offset", ctypes.c_int ),
	( "dashes", ctypes.c_char ),
])

__freeze_rpythonic_struct( _XGC, [
])

__freeze_rpythonic_struct( Visual, [
	( "ext_data", ctypes.POINTER(_XExtData) ),
	( "visualid", ctypes.c_ulong ),
	( "C_class", ctypes.c_int ),
	( "red_mask", ctypes.c_ulong ),
	( "green_mask", ctypes.c_ulong ),
	( "blue_mask", ctypes.c_ulong ),
	( "bits_per_rgb", ctypes.c_int ),
	( "map_entries", ctypes.c_int ),
])

__freeze_rpythonic_struct( Depth, [
	( "depth", ctypes.c_int ),
	( "nvisuals", ctypes.c_int ),
	( "visuals", ctypes.POINTER(Visual) ),
])

__freeze_rpythonic_struct( _XDisplay, [
])

__freeze_rpythonic_struct( Screen, [
	( "ext_data", ctypes.POINTER(_XExtData) ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "root", ctypes.c_ulong ),
	( "width", ctypes.c_int ),
	( "height", ctypes.c_int ),
	( "mwidth", ctypes.c_int ),
	( "mheight", ctypes.c_int ),
	( "ndepths", ctypes.c_int ),
	( "depths", ctypes.POINTER(Depth) ),
	( "root_depth", ctypes.c_int ),
	( "root_visual", ctypes.POINTER(Visual) ),
	( "default_gc", ctypes.POINTER(_XGC) ),
	( "cmap", ctypes.c_ulong ),
	( "white_pixel", ctypes.c_ulong ),
	( "black_pixel", ctypes.c_ulong ),
	( "max_maps", ctypes.c_int ),
	( "min_maps", ctypes.c_int ),
	( "backing_store", ctypes.c_int ),
	( "save_unders", ctypes.c_int ),
	( "root_input_mask", ctypes.c_long ),
])

__freeze_rpythonic_struct( ScreenFormat, [
	( "ext_data", ctypes.POINTER(_XExtData) ),
	( "depth", ctypes.c_int ),
	( "bits_per_pixel", ctypes.c_int ),
	( "scanline_pad", ctypes.c_int ),
])

__freeze_rpythonic_struct( XSetWindowAttributes, [
	( "background_pixmap", ctypes.c_ulong ),
	( "background_pixel", ctypes.c_ulong ),
	( "border_pixmap", ctypes.c_ulong ),
	( "border_pixel", ctypes.c_ulong ),
	( "bit_gravity", ctypes.c_int ),
	( "win_gravity", ctypes.c_int ),
	( "backing_store", ctypes.c_int ),
	( "backing_planes", ctypes.c_ulong ),
	( "backing_pixel", ctypes.c_ulong ),
	( "save_under", ctypes.c_int ),
	( "event_mask", ctypes.c_long ),
	( "do_not_propagate_mask", ctypes.c_long ),
	( "override_redirect", ctypes.c_int ),
	( "colormap", ctypes.c_ulong ),
	( "cursor", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( XWindowAttributes, [
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
	( "width", ctypes.c_int ),
	( "height", ctypes.c_int ),
	( "border_width", ctypes.c_int ),
	( "depth", ctypes.c_int ),
	( "visual", ctypes.POINTER(Visual) ),
	( "root", ctypes.c_ulong ),
	( "C_class", ctypes.c_int ),
	( "bit_gravity", ctypes.c_int ),
	( "win_gravity", ctypes.c_int ),
	( "backing_store", ctypes.c_int ),
	( "backing_planes", ctypes.c_ulong ),
	( "backing_pixel", ctypes.c_ulong ),
	( "save_under", ctypes.c_int ),
	( "colormap", ctypes.c_ulong ),
	( "map_installed", ctypes.c_int ),
	( "map_state", ctypes.c_int ),
	( "all_event_masks", ctypes.c_long ),
	( "your_event_mask", ctypes.c_long ),
	( "do_not_propagate_mask", ctypes.c_long ),
	( "override_redirect", ctypes.c_int ),
	( "screen", ctypes.POINTER(Screen) ),
])

__freeze_rpythonic_struct( XHostAddress, [
	( "family", ctypes.c_int ),
	( "length", ctypes.c_int ),
	( "address", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( XServerInterpretedAddress, [
	( "typelength", ctypes.c_int ),
	( "valuelength", ctypes.c_int ),
	( "C_type", ctypes.POINTER(ctypes.c_char) ),
	( "value", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( funcs, [
	( "create_image", ctypes.POINTER(ctypes.c_void_p) ),
	( "destroy_image", ctypes.c_void_p ),
	( "get_pixel", ctypes.c_void_p ),
	( "put_pixel", ctypes.c_void_p ),
	( "sub_image", ctypes.POINTER(ctypes.c_void_p) ),
	( "add_pixel", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _XImage, [
	( "width", ctypes.c_int ),
	( "height", ctypes.c_int ),
	( "xoffset", ctypes.c_int ),
	( "format", ctypes.c_int ),
	( "data", ctypes.POINTER(ctypes.c_char) ),
	( "byte_order", ctypes.c_int ),
	( "bitmap_unit", ctypes.c_int ),
	( "bitmap_bit_order", ctypes.c_int ),
	( "bitmap_pad", ctypes.c_int ),
	( "depth", ctypes.c_int ),
	( "bytes_per_line", ctypes.c_int ),
	( "bits_per_pixel", ctypes.c_int ),
	( "red_mask", ctypes.c_ulong ),
	( "green_mask", ctypes.c_ulong ),
	( "blue_mask", ctypes.c_ulong ),
	( "obdata", ctypes.POINTER(ctypes.c_char) ),
	( "f", funcs ),
])

__freeze_rpythonic_struct( XWindowChanges, [
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
	( "width", ctypes.c_int ),
	( "height", ctypes.c_int ),
	( "border_width", ctypes.c_int ),
	( "sibling", ctypes.c_ulong ),
	( "stack_mode", ctypes.c_int ),
])

__freeze_rpythonic_struct( XColor, [
	( "pixel", ctypes.c_ulong ),
	( "red", ctypes.c_ushort ),
	( "green", ctypes.c_ushort ),
	( "blue", ctypes.c_ushort ),
	( "flags", ctypes.c_char ),
	( "pad", ctypes.c_char ),
])

__freeze_rpythonic_struct( XSegment, [
	( "x1", ctypes.c_short ),
	( "y1", ctypes.c_short ),
	( "x2", ctypes.c_short ),
	( "y2", ctypes.c_short ),
])

__freeze_rpythonic_struct( XPoint, [
	( "x", ctypes.c_short ),
	( "y", ctypes.c_short ),
])

__freeze_rpythonic_struct( XRectangle, [
	( "x", ctypes.c_short ),
	( "y", ctypes.c_short ),
	( "width", ctypes.c_ushort ),
	( "height", ctypes.c_ushort ),
])

__freeze_rpythonic_struct( XArc, [
	( "x", ctypes.c_short ),
	( "y", ctypes.c_short ),
	( "width", ctypes.c_ushort ),
	( "height", ctypes.c_ushort ),
	( "angle1", ctypes.c_short ),
	( "angle2", ctypes.c_short ),
])

__freeze_rpythonic_struct( XKeyboardControl, [
	( "key_click_percent", ctypes.c_int ),
	( "bell_percent", ctypes.c_int ),
	( "bell_pitch", ctypes.c_int ),
	( "bell_duration", ctypes.c_int ),
	( "led", ctypes.c_int ),
	( "led_mode", ctypes.c_int ),
	( "key", ctypes.c_int ),
	( "auto_repeat_mode", ctypes.c_int ),
])

__freeze_rpythonic_struct( XKeyboardState, [
	( "key_click_percent", ctypes.c_int ),
	( "bell_percent", ctypes.c_int ),
	( "bell_pitch", ctypes.c_uint ),
	( "bell_duration", ctypes.c_uint ),
	( "led_mask", ctypes.c_ulong ),
	( "global_auto_repeat", ctypes.c_int ),
	( "auto_repeats", ( ctypes.c_char * 32 ) ),
])

__freeze_rpythonic_struct( XTimeCoord, [
	( "time", ctypes.c_ulong ),
	( "x", ctypes.c_short ),
	( "y", ctypes.c_short ),
])

__freeze_rpythonic_struct( XModifierKeymap, [
	( "max_keypermod", ctypes.c_int ),
	( "modifiermap", ctypes.POINTER(ctypes.c_ubyte) ),
])

__freeze_rpythonic_struct( _XPrivate, [
])

__freeze_rpythonic_struct( _XrmHashBucketRec, [
])

__freeze_rpythonic_struct( _XPrivDisplay, [
	( "ext_data", ctypes.POINTER(_XExtData) ),
	( "private1", ctypes.POINTER(_XPrivate) ),
	( "fd", ctypes.c_int ),
	( "private2", ctypes.c_int ),
	( "proto_major_version", ctypes.c_int ),
	( "proto_minor_version", ctypes.c_int ),
	( "vendor", ctypes.POINTER(ctypes.c_char) ),
	( "private3", ctypes.c_ulong ),
	( "private4", ctypes.c_ulong ),
	( "private5", ctypes.c_ulong ),
	( "private6", ctypes.c_int ),
	( "resource_alloc", ctypes.c_void_p ),
	( "byte_order", ctypes.c_int ),
	( "bitmap_unit", ctypes.c_int ),
	( "bitmap_pad", ctypes.c_int ),
	( "bitmap_bit_order", ctypes.c_int ),
	( "nformats", ctypes.c_int ),
	( "pixmap_format", ctypes.POINTER(ScreenFormat) ),
	( "private8", ctypes.c_int ),
	( "release", ctypes.c_int ),
	( "private9", ctypes.POINTER(_XPrivate) ),
	( "private10", ctypes.POINTER(_XPrivate) ),
	( "qlen", ctypes.c_int ),
	( "last_request_read", ctypes.c_ulong ),
	( "request", ctypes.c_ulong ),
	( "private11", ctypes.POINTER(ctypes.c_char) ),
	( "private12", ctypes.POINTER(ctypes.c_char) ),
	( "private13", ctypes.POINTER(ctypes.c_char) ),
	( "private14", ctypes.POINTER(ctypes.c_char) ),
	( "max_request_size", ctypes.c_void_p ),
	( "db", ctypes.POINTER(_XrmHashBucketRec) ),
	( "private15", ctypes.c_void_p ),
	( "display_name", ctypes.POINTER(ctypes.c_char) ),
	( "default_screen", ctypes.c_int ),
	( "nscreens", ctypes.c_int ),
	( "screens", ctypes.POINTER(Screen) ),
	( "motion_buffer", ctypes.c_ulong ),
	( "private16", ctypes.c_ulong ),
	( "min_keycode", ctypes.c_int ),
	( "max_keycode", ctypes.c_int ),
	( "private17", ctypes.POINTER(ctypes.c_char) ),
	( "private18", ctypes.POINTER(ctypes.c_char) ),
	( "private19", ctypes.c_int ),
	( "xdefaults", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( XKeyEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "window", ctypes.c_ulong ),
	( "root", ctypes.c_ulong ),
	( "subwindow", ctypes.c_ulong ),
	( "time", ctypes.c_ulong ),
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
	( "x_root", ctypes.c_int ),
	( "y_root", ctypes.c_int ),
	( "state", ctypes.c_uint ),
	( "keycode", ctypes.c_uint ),
	( "same_screen", ctypes.c_int ),
])

__freeze_rpythonic_struct( XButtonEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "window", ctypes.c_ulong ),
	( "root", ctypes.c_ulong ),
	( "subwindow", ctypes.c_ulong ),
	( "time", ctypes.c_ulong ),
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
	( "x_root", ctypes.c_int ),
	( "y_root", ctypes.c_int ),
	( "state", ctypes.c_uint ),
	( "button", ctypes.c_uint ),
	( "same_screen", ctypes.c_int ),
])

__freeze_rpythonic_struct( XMotionEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "window", ctypes.c_ulong ),
	( "root", ctypes.c_ulong ),
	( "subwindow", ctypes.c_ulong ),
	( "time", ctypes.c_ulong ),
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
	( "x_root", ctypes.c_int ),
	( "y_root", ctypes.c_int ),
	( "state", ctypes.c_uint ),
	( "is_hint", ctypes.c_char ),
	( "same_screen", ctypes.c_int ),
])

__freeze_rpythonic_struct( XCrossingEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "window", ctypes.c_ulong ),
	( "root", ctypes.c_ulong ),
	( "subwindow", ctypes.c_ulong ),
	( "time", ctypes.c_ulong ),
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
	( "x_root", ctypes.c_int ),
	( "y_root", ctypes.c_int ),
	( "mode", ctypes.c_int ),
	( "detail", ctypes.c_int ),
	( "same_screen", ctypes.c_int ),
	( "focus", ctypes.c_int ),
	( "state", ctypes.c_uint ),
])

__freeze_rpythonic_struct( XFocusChangeEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "window", ctypes.c_ulong ),
	( "mode", ctypes.c_int ),
	( "detail", ctypes.c_int ),
])

__freeze_rpythonic_struct( XKeymapEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "window", ctypes.c_ulong ),
	( "key_vector", ( ctypes.c_char * 32 ) ),
])

__freeze_rpythonic_struct( XExposeEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "window", ctypes.c_ulong ),
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
	( "width", ctypes.c_int ),
	( "height", ctypes.c_int ),
	( "count", ctypes.c_int ),
])

__freeze_rpythonic_struct( XGraphicsExposeEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "drawable", ctypes.c_ulong ),
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
	( "width", ctypes.c_int ),
	( "height", ctypes.c_int ),
	( "count", ctypes.c_int ),
	( "major_code", ctypes.c_int ),
	( "minor_code", ctypes.c_int ),
])

__freeze_rpythonic_struct( XNoExposeEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "drawable", ctypes.c_ulong ),
	( "major_code", ctypes.c_int ),
	( "minor_code", ctypes.c_int ),
])

__freeze_rpythonic_struct( XVisibilityEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "window", ctypes.c_ulong ),
	( "state", ctypes.c_int ),
])

__freeze_rpythonic_struct( XCreateWindowEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "parent", ctypes.c_ulong ),
	( "window", ctypes.c_ulong ),
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
	( "width", ctypes.c_int ),
	( "height", ctypes.c_int ),
	( "border_width", ctypes.c_int ),
	( "override_redirect", ctypes.c_int ),
])

__freeze_rpythonic_struct( XDestroyWindowEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "event", ctypes.c_ulong ),
	( "window", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( XUnmapEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "event", ctypes.c_ulong ),
	( "window", ctypes.c_ulong ),
	( "from_configure", ctypes.c_int ),
])

__freeze_rpythonic_struct( XMapEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "event", ctypes.c_ulong ),
	( "window", ctypes.c_ulong ),
	( "override_redirect", ctypes.c_int ),
])

__freeze_rpythonic_struct( XMapRequestEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "parent", ctypes.c_ulong ),
	( "window", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( XReparentEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "event", ctypes.c_ulong ),
	( "window", ctypes.c_ulong ),
	( "parent", ctypes.c_ulong ),
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
	( "override_redirect", ctypes.c_int ),
])

__freeze_rpythonic_struct( XConfigureEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "event", ctypes.c_ulong ),
	( "window", ctypes.c_ulong ),
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
	( "width", ctypes.c_int ),
	( "height", ctypes.c_int ),
	( "border_width", ctypes.c_int ),
	( "above", ctypes.c_ulong ),
	( "override_redirect", ctypes.c_int ),
])

__freeze_rpythonic_struct( XGravityEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "event", ctypes.c_ulong ),
	( "window", ctypes.c_ulong ),
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
])

__freeze_rpythonic_struct( XResizeRequestEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "window", ctypes.c_ulong ),
	( "width", ctypes.c_int ),
	( "height", ctypes.c_int ),
])

__freeze_rpythonic_struct( XConfigureRequestEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "parent", ctypes.c_ulong ),
	( "window", ctypes.c_ulong ),
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
	( "width", ctypes.c_int ),
	( "height", ctypes.c_int ),
	( "border_width", ctypes.c_int ),
	( "above", ctypes.c_ulong ),
	( "detail", ctypes.c_int ),
	( "value_mask", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( XCirculateEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "event", ctypes.c_ulong ),
	( "window", ctypes.c_ulong ),
	( "place", ctypes.c_int ),
])

__freeze_rpythonic_struct( XCirculateRequestEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "parent", ctypes.c_ulong ),
	( "window", ctypes.c_ulong ),
	( "place", ctypes.c_int ),
])

__freeze_rpythonic_struct( XPropertyEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "window", ctypes.c_ulong ),
	( "atom", ctypes.c_ulong ),
	( "time", ctypes.c_ulong ),
	( "state", ctypes.c_int ),
])

__freeze_rpythonic_struct( XSelectionClearEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "window", ctypes.c_ulong ),
	( "selection", ctypes.c_ulong ),
	( "time", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( XSelectionRequestEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "owner", ctypes.c_ulong ),
	( "requestor", ctypes.c_ulong ),
	( "selection", ctypes.c_ulong ),
	( "target", ctypes.c_ulong ),
	( "property", ctypes.c_ulong ),
	( "time", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( XSelectionEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "requestor", ctypes.c_ulong ),
	( "selection", ctypes.c_ulong ),
	( "target", ctypes.c_ulong ),
	( "property", ctypes.c_ulong ),
	( "time", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( XColormapEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "window", ctypes.c_ulong ),
	( "colormap", ctypes.c_ulong ),
	( "new", ctypes.c_int ),
	( "state", ctypes.c_int ),
])

__freeze_rpythonic_struct( data, [
	( "b", ( ctypes.c_char * 20 ) ),
	( "s", ( ctypes.c_short * 10 ) ),
	( "l", ( ctypes.c_long * 5 ) ),
])

__freeze_rpythonic_struct( XClientMessageEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "window", ctypes.c_ulong ),
	( "message_type", ctypes.c_ulong ),
	( "format", ctypes.c_int ),
	( "data", data ),
])

__freeze_rpythonic_struct( XMappingEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "window", ctypes.c_ulong ),
	( "request", ctypes.c_int ),
	( "first_keycode", ctypes.c_int ),
	( "count", ctypes.c_int ),
])

__freeze_rpythonic_struct( XErrorEvent, [
	( "C_type", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "resourceid", ctypes.c_ulong ),
	( "serial", ctypes.c_ulong ),
	( "error_code", ctypes.c_ubyte ),
	( "request_code", ctypes.c_ubyte ),
	( "minor_code", ctypes.c_ubyte ),
])

__freeze_rpythonic_struct( XAnyEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "window", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( XGenericEvent, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "extension", ctypes.c_int ),
	( "evtype", ctypes.c_int ),
])

__freeze_rpythonic_struct( XGenericEventCookie, [
	( "C_type", ctypes.c_int ),
	( "serial", ctypes.c_ulong ),
	( "send_event", ctypes.c_int ),
	( "display", ctypes.POINTER(_XDisplay) ),
	( "extension", ctypes.c_int ),
	( "evtype", ctypes.c_int ),
	( "cookie", ctypes.c_uint ),
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _XEvent, [
	( "C_type", ctypes.c_int ),
	( "xany", XAnyEvent ),
	( "xkey", XKeyEvent ),
	( "xbutton", XButtonEvent ),
	( "xmotion", XMotionEvent ),
	( "xcrossing", XCrossingEvent ),
	( "xfocus", XFocusChangeEvent ),
	( "xexpose", XExposeEvent ),
	( "xgraphicsexpose", XGraphicsExposeEvent ),
	( "xnoexpose", XNoExposeEvent ),
	( "xvisibility", XVisibilityEvent ),
	( "xcreatewindow", XCreateWindowEvent ),
	( "xdestroywindow", XDestroyWindowEvent ),
	( "xunmap", XUnmapEvent ),
	( "xmap", XMapEvent ),
	( "xmaprequest", XMapRequestEvent ),
	( "xreparent", XReparentEvent ),
	( "xconfigure", XConfigureEvent ),
	( "xgravity", XGravityEvent ),
	( "xresizerequest", XResizeRequestEvent ),
	( "xconfigurerequest", XConfigureRequestEvent ),
	( "xcirculate", XCirculateEvent ),
	( "xcirculaterequest", XCirculateRequestEvent ),
	( "xproperty", XPropertyEvent ),
	( "xselectionclear", XSelectionClearEvent ),
	( "xselectionrequest", XSelectionRequestEvent ),
	( "xselection", XSelectionEvent ),
	( "xcolormap", XColormapEvent ),
	( "xclient", XClientMessageEvent ),
	( "xmapping", XMappingEvent ),
	( "xerror", XErrorEvent ),
	( "xkeymap", XKeymapEvent ),
	( "xgeneric", XGenericEvent ),
	( "xcookie", XGenericEventCookie ),
	( "pad", ( ctypes.c_long * 24 ) ),
])

__freeze_rpythonic_struct( XCharStruct, [
	( "lbearing", ctypes.c_short ),
	( "rbearing", ctypes.c_short ),
	( "width", ctypes.c_short ),
	( "ascent", ctypes.c_short ),
	( "descent", ctypes.c_short ),
	( "attributes", ctypes.c_ushort ),
])

__freeze_rpythonic_struct( XFontProp, [
	( "name", ctypes.c_ulong ),
	( "card32", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( XFontStruct, [
	( "ext_data", ctypes.POINTER(_XExtData) ),
	( "fid", ctypes.c_ulong ),
	( "direction", ctypes.c_void_p ),
	( "min_char_or_byte2", ctypes.c_void_p ),
	( "max_char_or_byte2", ctypes.c_void_p ),
	( "min_byte1", ctypes.c_void_p ),
	( "max_byte1", ctypes.c_void_p ),
	( "all_chars_exist", ctypes.c_int ),
	( "default_char", ctypes.c_void_p ),
	( "n_properties", ctypes.c_int ),
	( "properties", ctypes.POINTER(XFontProp) ),
	( "min_bounds", XCharStruct ),
	( "max_bounds", XCharStruct ),
	( "per_char", ctypes.POINTER(XCharStruct) ),
	( "ascent", ctypes.c_int ),
	( "descent", ctypes.c_int ),
])

__freeze_rpythonic_struct( XTextItem, [
	( "chars", ctypes.POINTER(ctypes.c_char) ),
	( "nchars", ctypes.c_int ),
	( "delta", ctypes.c_int ),
	( "font", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( XChar2b, [
	( "byte1", ctypes.c_ubyte ),
	( "byte2", ctypes.c_ubyte ),
])

__freeze_rpythonic_struct( XTextItem16, [
	( "chars", ctypes.POINTER(XChar2b) ),
	( "nchars", ctypes.c_int ),
	( "delta", ctypes.c_int ),
	( "font", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( XEDataObject, [
	( "display", ctypes.POINTER(_XDisplay) ),
	( "gc", ctypes.POINTER(_XGC) ),
	( "visual", ctypes.POINTER(Visual) ),
	( "screen", ctypes.POINTER(Screen) ),
	( "pixmap_format", ctypes.POINTER(ScreenFormat) ),
	( "font", ctypes.POINTER(XFontStruct) ),
])

__freeze_rpythonic_struct( XFontSetExtents, [
	( "max_ink_extent", XRectangle ),
	( "max_logical_extent", XRectangle ),
])

__freeze_rpythonic_struct( _XOM, [
])

__freeze_rpythonic_struct( _XOC, [
])

__freeze_rpythonic_struct( XmbTextItem, [
	( "chars", ctypes.POINTER(ctypes.c_char) ),
	( "nchars", ctypes.c_int ),
	( "delta", ctypes.c_int ),
	( "font_set", ctypes.POINTER(_XOC) ),
])

__freeze_rpythonic_struct( XwcTextItem, [
	( "chars", ctypes.POINTER(ctypes.c_int64) ),
	( "nchars", ctypes.c_int ),
	( "delta", ctypes.c_int ),
	( "font_set", ctypes.POINTER(_XOC) ),
])

__freeze_rpythonic_struct( XOMCharSetList, [
	( "charset_count", ctypes.c_int ),
	( "charset_list", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)) ),
])

__freeze_rpythonic_struct( XOMOrientation, [
	( "num_orientation", ctypes.c_int ),
	( "orientation", ctypes.POINTER(ctypes.c_int) ),
])

__freeze_rpythonic_struct( XOMFontInfo, [
	( "num_font", ctypes.c_int ),
	( "font_struct_list", ctypes.POINTER(ctypes.POINTER(XFontStruct)) ),
	( "font_name_list", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)) ),
])

__freeze_rpythonic_struct( _XIM, [
])

__freeze_rpythonic_struct( _XIC, [
])

__freeze_rpythonic_struct( XIMStyles, [
	( "count_styles", ctypes.c_ushort ),
	( "supported_styles", ctypes.POINTER(ctypes.c_ulong) ),
])

__freeze_rpythonic_struct( XIMCallback, [
	( "client_data", ctypes.POINTER(ctypes.c_char) ),
	( "callback", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),) ),
])

__freeze_rpythonic_struct( XICCallback, [
	( "client_data", ctypes.POINTER(ctypes.c_char) ),
	( "callback", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),) ),
])

__freeze_rpythonic_struct( string, [
	( "multi_byte", ctypes.POINTER(ctypes.c_char) ),
	( "wide_char", ctypes.POINTER(ctypes.c_int64) ),
])

__freeze_rpythonic_struct( _XIMText, [
	( "length", ctypes.c_ushort ),
	( "feedback", ctypes.POINTER(ctypes.c_ulong) ),
	( "encoding_is_wchar", ctypes.c_int ),
	( "string", string ),
])

__freeze_rpythonic_struct( _XIMPreeditStateNotifyCallbackStruct, [
	( "state", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( _XIMStringConversionText, [
	( "length", ctypes.c_ushort ),
	( "feedback", ctypes.POINTER(ctypes.c_ulong) ),
	( "encoding_is_wchar", ctypes.c_int ),
	( "string", string ),
])

__freeze_rpythonic_struct( _XIMStringConversionCallbackStruct, [
	( "position", ctypes.c_ushort ),
	( "direction", ctypes.c_int ),
	( "operation", ctypes.c_ushort ),
	( "factor", ctypes.c_ushort ),
	( "text", ctypes.POINTER(_XIMStringConversionText) ),
])

__freeze_rpythonic_struct( _XIMPreeditDrawCallbackStruct, [
	( "caret", ctypes.c_int ),
	( "chg_first", ctypes.c_int ),
	( "chg_length", ctypes.c_int ),
	( "text", ctypes.POINTER(_XIMText) ),
])

__freeze_rpythonic_struct( _XIMPreeditCaretCallbackStruct, [
	( "position", ctypes.c_int ),
	( "direction", ctypes.c_int ),
	( "style", ctypes.c_int ),
])

__freeze_rpythonic_struct( _XIMStatusDrawCallbackStruct, [
	( "C_type", ctypes.c_int ),
	( "data", data ),
])

__freeze_rpythonic_struct( _XIMHotKeyTrigger, [
	( "keysym", ctypes.c_ulong ),
	( "modifier", ctypes.c_int ),
	( "modifier_mask", ctypes.c_int ),
])

__freeze_rpythonic_struct( _XIMHotKeyTriggers, [
	( "num_hot_key", ctypes.c_int ),
	( "key", ctypes.POINTER(_XIMHotKeyTrigger) ),
])

__freeze_rpythonic_struct( XIMValuesList, [
	( "count_values", ctypes.c_ushort ),
	( "supported_values", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)) ),
])

## wrapper functions ##
select = _rpythonic_function_(		"select", ctypes.c_int, [
	("__nfds",		ctypes.c_int),
	("__readfds",		ctypes.POINTER(fd_set)),
	("__writefds",		ctypes.POINTER(fd_set)),
	("__exceptfds",		ctypes.POINTER(fd_set)),
	("__timeout",		ctypes.POINTER(timeval)),] )

pselect = _rpythonic_function_(		"pselect", ctypes.c_int, [
	("__nfds",		ctypes.c_int),
	("__readfds",		ctypes.POINTER(fd_set)),
	("__writefds",		ctypes.POINTER(fd_set)),
	("__exceptfds",		ctypes.POINTER(fd_set)),
	("__timeout",		ctypes.POINTER(timespec)),
	("__sigmask",		ctypes.POINTER(__sigset_t)),] )

gnu_dev_major = _rpythonic_function_(		"gnu_dev_major", ctypes.c_uint, [
	("__dev",		ctypes.c_ulonglong),] )

gnu_dev_minor = _rpythonic_function_(		"gnu_dev_minor", ctypes.c_uint, [
	("__dev",		ctypes.c_ulonglong),] )

gnu_dev_makedev = _rpythonic_function_(		"gnu_dev_makedev", ctypes.c_ulonglong, [
	("__major",		ctypes.c_uint),
	("__minor",		ctypes.c_uint),] )

_Xmblen = _rpythonic_function_(		"_Xmblen", ctypes.c_int, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

free_private = _rpythonic_function_(		"free_private", ctypes.c_int, [
	("extension",		ctypes.POINTER(_XExtData)),] )

create_image = _rpythonic_function_(		"create_image", ctypes.POINTER(_XImage), [
	("_XDisplay",		ctypes.POINTER(_XDisplay)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

destroy_image = _rpythonic_function_(		"destroy_image", ctypes.c_int, [
	("_XImage",		ctypes.POINTER(_XImage)),] )

get_pixel = _rpythonic_function_(		"get_pixel", ctypes.c_ulong, [
	("_XImage",		ctypes.POINTER(_XImage)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

put_pixel = _rpythonic_function_(		"put_pixel", ctypes.c_int, [
	("_XImage",		ctypes.POINTER(_XImage)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_ulong),] )

sub_image = _rpythonic_function_(		"sub_image", ctypes.POINTER(_XImage), [
	("_XImage",		ctypes.POINTER(_XImage)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),] )

add_pixel = _rpythonic_function_(		"add_pixel", ctypes.c_int, [
	("_XImage",		ctypes.POINTER(_XImage)),
	("none",		ctypes.c_long),] )

resource_alloc = _rpythonic_function_(		"resource_alloc", ctypes.c_ulong, [
	("_XDisplay",		ctypes.POINTER(_XDisplay)),] )

private15 = _rpythonic_function_(		"private15", ctypes.c_int, [
	("_XDisplay",		ctypes.POINTER(_XDisplay)),] )

XIMProc = _rpythonic_function_(		"XIMProc", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

XICProc = _rpythonic_function_(		"XICProc", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

XIDProc = _rpythonic_function_(		"XIDProc", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

XLoadQueryFont = _rpythonic_function_(		"XLoadQueryFont", ctypes.POINTER(XFontStruct), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

XQueryFont = _rpythonic_function_(		"XQueryFont", ctypes.POINTER(XFontStruct), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XGetMotionEvents = _rpythonic_function_(		"XGetMotionEvents", ctypes.POINTER(XTimeCoord), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XDeleteModifiermapEntry = _rpythonic_function_(		"XDeleteModifiermapEntry", ctypes.POINTER(XModifierKeymap), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ubyte),
	("none",		ctypes.c_int),] )

XGetModifierMapping = _rpythonic_function_(		"XGetModifierMapping", ctypes.POINTER(XModifierKeymap), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XInsertModifiermapEntry = _rpythonic_function_(		"XInsertModifiermapEntry", ctypes.POINTER(XModifierKeymap), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ubyte),
	("none",		ctypes.c_int),] )

XNewModifiermap = _rpythonic_function_(		"XNewModifiermap", ctypes.POINTER(XModifierKeymap), [
	("none",		ctypes.c_int),] )

XCreateImage = _rpythonic_function_(		"XCreateImage", ctypes.POINTER(_XImage), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XInitImage = _rpythonic_function_(		"XInitImage", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XGetImage = _rpythonic_function_(		"XGetImage", ctypes.POINTER(_XImage), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),] )

XGetSubImage = _rpythonic_function_(		"XGetSubImage", ctypes.POINTER(_XImage), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XOpenDisplay = _rpythonic_function_(		"XOpenDisplay", ctypes.POINTER(_XDisplay), [
	("none",		ctypes.POINTER(ctypes.c_char)),] )

XrmInitialize = _rpythonic_function_(		"XrmInitialize", ctypes.c_void_p, [] )

XFetchBytes = _rpythonic_function_(		"XFetchBytes", ctypes.POINTER(ctypes.c_char), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XFetchBuffer = _rpythonic_function_(		"XFetchBuffer", ctypes.POINTER(ctypes.c_char), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.c_int),] )

XGetAtomName = _rpythonic_function_(		"XGetAtomName", ctypes.POINTER(ctypes.c_char), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XGetAtomNames = _rpythonic_function_(		"XGetAtomNames", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

XGetDefault = _rpythonic_function_(		"XGetDefault", ctypes.POINTER(ctypes.c_char), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

XDisplayName = _rpythonic_function_(		"XDisplayName", ctypes.POINTER(ctypes.c_char), [
	("none",		ctypes.POINTER(ctypes.c_char)),] )

XKeysymToString = _rpythonic_function_(		"XKeysymToString", ctypes.POINTER(ctypes.c_char), [
	("none",		ctypes.c_ulong),] )

XSynchronize = _rpythonic_function_(		"XSynchronize", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XSetAfterFunction = _rpythonic_function_(		"XSetAfterFunction", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XInternAtom = _rpythonic_function_(		"XInternAtom", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),] )

XInternAtoms = _rpythonic_function_(		"XInternAtoms", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_ulong)),] )

XCopyColormapAndFree = _rpythonic_function_(		"XCopyColormapAndFree", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XCreateColormap = _rpythonic_function_(		"XCreateColormap", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XCreatePixmapCursor = _rpythonic_function_(		"XCreatePixmapCursor", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),] )

XCreateGlyphCursor = _rpythonic_function_(		"XCreateGlyphCursor", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XCreateFontCursor = _rpythonic_function_(		"XCreateFontCursor", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_uint),] )

XLoadFont = _rpythonic_function_(		"XLoadFont", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

XCreateGC = _rpythonic_function_(		"XCreateGC", ctypes.POINTER(_XGC), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XGContextFromGC = _rpythonic_function_(		"XGContextFromGC", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XFlushGC = _rpythonic_function_(		"XFlushGC", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XCreatePixmap = _rpythonic_function_(		"XCreatePixmap", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),] )

XCreateBitmapFromData = _rpythonic_function_(		"XCreateBitmapFromData", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),] )

XCreatePixmapFromBitmapData = _rpythonic_function_(		"XCreatePixmapFromBitmapData", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_uint),] )

XCreateSimpleWindow = _rpythonic_function_(		"XCreateSimpleWindow", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),] )

XGetSelectionOwner = _rpythonic_function_(		"XGetSelectionOwner", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XCreateWindow = _rpythonic_function_(		"XCreateWindow", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_int),
	("none",		ctypes.c_uint),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XListInstalledColormaps = _rpythonic_function_(		"XListInstalledColormaps", ctypes.POINTER(ctypes.c_ulong), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XListFonts = _rpythonic_function_(		"XListFonts", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XListFontsWithInfo = _rpythonic_function_(		"XListFontsWithInfo", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

XGetFontPath = _rpythonic_function_(		"XGetFontPath", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XListExtensions = _rpythonic_function_(		"XListExtensions", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XListProperties = _rpythonic_function_(		"XListProperties", ctypes.POINTER(ctypes.c_ulong), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XListHosts = _rpythonic_function_(		"XListHosts", ctypes.POINTER(XHostAddress), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XKeycodeToKeysym = _rpythonic_function_(		"XKeycodeToKeysym", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ubyte),
	("none",		ctypes.c_int),] )

XLookupKeysym = _rpythonic_function_(		"XLookupKeysym", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XGetKeyboardMapping = _rpythonic_function_(		"XGetKeyboardMapping", ctypes.POINTER(ctypes.c_ulong), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ubyte),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XStringToKeysym = _rpythonic_function_(		"XStringToKeysym", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_char)),] )

XMaxRequestSize = _rpythonic_function_(		"XMaxRequestSize", ctypes.c_long, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XExtendedMaxRequestSize = _rpythonic_function_(		"XExtendedMaxRequestSize", ctypes.c_long, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XResourceManagerString = _rpythonic_function_(		"XResourceManagerString", ctypes.POINTER(ctypes.c_char), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XScreenResourceString = _rpythonic_function_(		"XScreenResourceString", ctypes.POINTER(ctypes.c_char), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XDisplayMotionBufferSize = _rpythonic_function_(		"XDisplayMotionBufferSize", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XVisualIDFromVisual = _rpythonic_function_(		"XVisualIDFromVisual", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XInitThreads = _rpythonic_function_(		"XInitThreads", ctypes.c_int, [] )

XLockDisplay = _rpythonic_function_(		"XLockDisplay", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XUnlockDisplay = _rpythonic_function_(		"XUnlockDisplay", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XInitExtension = _rpythonic_function_(		"XInitExtension", ctypes.POINTER(XExtCodes), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

XAddExtension = _rpythonic_function_(		"XAddExtension", ctypes.POINTER(XExtCodes), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XFindOnExtensionList = _rpythonic_function_(		"XFindOnExtensionList", ctypes.POINTER(_XExtData), [
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("none",		ctypes.c_int),] )

XEHeadOfExtensionList = _rpythonic_function_(		"XEHeadOfExtensionList", ctypes.POINTER(ctypes.POINTER(_XExtData)), [
	("none",		ctypes.c_void_p),] )

XRootWindow = _rpythonic_function_(		"XRootWindow", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XDefaultRootWindow = _rpythonic_function_(		"XDefaultRootWindow", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XRootWindowOfScreen = _rpythonic_function_(		"XRootWindowOfScreen", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XDefaultVisual = _rpythonic_function_(		"XDefaultVisual", ctypes.POINTER(Visual), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XDefaultVisualOfScreen = _rpythonic_function_(		"XDefaultVisualOfScreen", ctypes.POINTER(Visual), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XDefaultGC = _rpythonic_function_(		"XDefaultGC", ctypes.POINTER(_XGC), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XDefaultGCOfScreen = _rpythonic_function_(		"XDefaultGCOfScreen", ctypes.POINTER(_XGC), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XBlackPixel = _rpythonic_function_(		"XBlackPixel", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XWhitePixel = _rpythonic_function_(		"XWhitePixel", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XAllPlanes = _rpythonic_function_(		"XAllPlanes", ctypes.c_ulong, [] )

XBlackPixelOfScreen = _rpythonic_function_(		"XBlackPixelOfScreen", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XWhitePixelOfScreen = _rpythonic_function_(		"XWhitePixelOfScreen", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XNextRequest = _rpythonic_function_(		"XNextRequest", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XLastKnownRequestProcessed = _rpythonic_function_(		"XLastKnownRequestProcessed", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XServerVendor = _rpythonic_function_(		"XServerVendor", ctypes.POINTER(ctypes.c_char), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XDisplayString = _rpythonic_function_(		"XDisplayString", ctypes.POINTER(ctypes.c_char), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XDefaultColormap = _rpythonic_function_(		"XDefaultColormap", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XDefaultColormapOfScreen = _rpythonic_function_(		"XDefaultColormapOfScreen", ctypes.c_ulong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XDisplayOfScreen = _rpythonic_function_(		"XDisplayOfScreen", ctypes.POINTER(_XDisplay), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XScreenOfDisplay = _rpythonic_function_(		"XScreenOfDisplay", ctypes.POINTER(Screen), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XDefaultScreenOfDisplay = _rpythonic_function_(		"XDefaultScreenOfDisplay", ctypes.POINTER(Screen), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XEventMaskOfScreen = _rpythonic_function_(		"XEventMaskOfScreen", ctypes.c_long, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XScreenNumberOfScreen = _rpythonic_function_(		"XScreenNumberOfScreen", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XErrorHandler = _rpythonic_function_(		"XErrorHandler", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XSetErrorHandler = _rpythonic_function_(		"XSetErrorHandler", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),), [
	("none",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

XIOErrorHandler = _rpythonic_function_(		"XIOErrorHandler", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XSetIOErrorHandler = _rpythonic_function_(		"XSetIOErrorHandler", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),), [
	("none",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),)),] )

XListPixmapFormats = _rpythonic_function_(		"XListPixmapFormats", ctypes.POINTER(XPixmapFormatValues), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XListDepths = _rpythonic_function_(		"XListDepths", ctypes.POINTER(ctypes.c_int), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XReconfigureWMWindow = _rpythonic_function_(		"XReconfigureWMWindow", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_uint),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XGetWMProtocols = _rpythonic_function_(		"XGetWMProtocols", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ulong))),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XSetWMProtocols = _rpythonic_function_(		"XSetWMProtocols", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.c_int),] )

XIconifyWindow = _rpythonic_function_(		"XIconifyWindow", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),] )

XWithdrawWindow = _rpythonic_function_(		"XWithdrawWindow", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),] )

XGetCommand = _rpythonic_function_(		"XGetCommand", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(ctypes.c_char)))),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XGetWMColormapWindows = _rpythonic_function_(		"XGetWMColormapWindows", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ulong))),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XSetWMColormapWindows = _rpythonic_function_(		"XSetWMColormapWindows", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.c_int),] )

XFreeStringList = _rpythonic_function_(		"XFreeStringList", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

XSetTransientForHint = _rpythonic_function_(		"XSetTransientForHint", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),] )

XActivateScreenSaver = _rpythonic_function_(		"XActivateScreenSaver", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XAddHost = _rpythonic_function_(		"XAddHost", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XAddHosts = _rpythonic_function_(		"XAddHosts", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XAddToExtensionList = _rpythonic_function_(		"XAddToExtensionList", ctypes.c_int, [
	("_XExtData",		ctypes.POINTER(ctypes.POINTER(_XExtData))),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XAddToSaveSet = _rpythonic_function_(		"XAddToSaveSet", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XAllocColor = _rpythonic_function_(		"XAllocColor", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XAllocColorCells = _rpythonic_function_(		"XAllocColorCells", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.c_uint),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.c_uint),] )

XAllocColorPlanes = _rpythonic_function_(		"XAllocColorPlanes", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.POINTER(ctypes.c_ulong)),] )

XAllocNamedColor = _rpythonic_function_(		"XAllocNamedColor", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XAllowEvents = _rpythonic_function_(		"XAllowEvents", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_ulong),] )

XAutoRepeatOff = _rpythonic_function_(		"XAutoRepeatOff", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XAutoRepeatOn = _rpythonic_function_(		"XAutoRepeatOn", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XBell = _rpythonic_function_(		"XBell", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XBitmapBitOrder = _rpythonic_function_(		"XBitmapBitOrder", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XBitmapPad = _rpythonic_function_(		"XBitmapPad", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XBitmapUnit = _rpythonic_function_(		"XBitmapUnit", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XCellsOfScreen = _rpythonic_function_(		"XCellsOfScreen", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XChangeActivePointerGrab = _rpythonic_function_(		"XChangeActivePointerGrab", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),] )

XChangeGC = _rpythonic_function_(		"XChangeGC", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XChangeKeyboardControl = _rpythonic_function_(		"XChangeKeyboardControl", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XChangeKeyboardMapping = _rpythonic_function_(		"XChangeKeyboardMapping", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.c_int),] )

XChangePointerControl = _rpythonic_function_(		"XChangePointerControl", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XChangeProperty = _rpythonic_function_(		"XChangeProperty", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_ubyte)),
	("none",		ctypes.c_int),] )

XChangeSaveSet = _rpythonic_function_(		"XChangeSaveSet", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),] )

XChangeWindowAttributes = _rpythonic_function_(		"XChangeWindowAttributes", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XCheckIfEvent = _rpythonic_function_(		"XCheckIfEvent", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_void_p),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

XCheckMaskEvent = _rpythonic_function_(		"XCheckMaskEvent", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_long),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XCheckTypedEvent = _rpythonic_function_(		"XCheckTypedEvent", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XCheckTypedWindowEvent = _rpythonic_function_(		"XCheckTypedWindowEvent", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XCheckWindowEvent = _rpythonic_function_(		"XCheckWindowEvent", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_long),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XCirculateSubwindows = _rpythonic_function_(		"XCirculateSubwindows", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),] )

XCirculateSubwindowsDown = _rpythonic_function_(		"XCirculateSubwindowsDown", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XCirculateSubwindowsUp = _rpythonic_function_(		"XCirculateSubwindowsUp", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XClearArea = _rpythonic_function_(		"XClearArea", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_int),] )

XClearWindow = _rpythonic_function_(		"XClearWindow", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XCloseDisplay = _rpythonic_function_(		"XCloseDisplay", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XConfigureWindow = _rpythonic_function_(		"XConfigureWindow", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_uint),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XConnectionNumber = _rpythonic_function_(		"XConnectionNumber", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XConvertSelection = _rpythonic_function_(		"XConvertSelection", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),] )

XCopyArea = _rpythonic_function_(		"XCopyArea", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XCopyGC = _rpythonic_function_(		"XCopyGC", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XCopyPlane = _rpythonic_function_(		"XCopyPlane", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_ulong),] )

XDefaultDepth = _rpythonic_function_(		"XDefaultDepth", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XDefaultDepthOfScreen = _rpythonic_function_(		"XDefaultDepthOfScreen", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XDefaultScreen = _rpythonic_function_(		"XDefaultScreen", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XDefineCursor = _rpythonic_function_(		"XDefineCursor", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),] )

XDeleteProperty = _rpythonic_function_(		"XDeleteProperty", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),] )

XDestroyWindow = _rpythonic_function_(		"XDestroyWindow", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XDestroySubwindows = _rpythonic_function_(		"XDestroySubwindows", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XDoesBackingStore = _rpythonic_function_(		"XDoesBackingStore", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XDoesSaveUnders = _rpythonic_function_(		"XDoesSaveUnders", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XDisableAccessControl = _rpythonic_function_(		"XDisableAccessControl", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XDisplayCells = _rpythonic_function_(		"XDisplayCells", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XDisplayHeight = _rpythonic_function_(		"XDisplayHeight", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XDisplayHeightMM = _rpythonic_function_(		"XDisplayHeightMM", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XDisplayKeycodes = _rpythonic_function_(		"XDisplayKeycodes", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XDisplayPlanes = _rpythonic_function_(		"XDisplayPlanes", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XDisplayWidth = _rpythonic_function_(		"XDisplayWidth", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XDisplayWidthMM = _rpythonic_function_(		"XDisplayWidthMM", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XDrawArc = _rpythonic_function_(		"XDrawArc", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XDrawArcs = _rpythonic_function_(		"XDrawArcs", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XDrawImageString = _rpythonic_function_(		"XDrawImageString", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),] )

XDrawImageString16 = _rpythonic_function_(		"XDrawImageString16", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XDrawLine = _rpythonic_function_(		"XDrawLine", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XDrawPoint = _rpythonic_function_(		"XDrawPoint", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XDrawLines = _rpythonic_function_(		"XDrawLines", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XDrawPoints = _rpythonic_function_(		"XDrawPoints", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XDrawRectangle = _rpythonic_function_(		"XDrawRectangle", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),] )

XDrawRectangles = _rpythonic_function_(		"XDrawRectangles", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XDrawSegments = _rpythonic_function_(		"XDrawSegments", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XDrawString = _rpythonic_function_(		"XDrawString", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),] )

XDrawString16 = _rpythonic_function_(		"XDrawString16", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XDrawText = _rpythonic_function_(		"XDrawText", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XDrawText16 = _rpythonic_function_(		"XDrawText16", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XEnableAccessControl = _rpythonic_function_(		"XEnableAccessControl", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XEventsQueued = _rpythonic_function_(		"XEventsQueued", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XFetchName = _rpythonic_function_(		"XFetchName", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

XFillArc = _rpythonic_function_(		"XFillArc", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XFillArcs = _rpythonic_function_(		"XFillArcs", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XFillPolygon = _rpythonic_function_(		"XFillPolygon", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XFillRectangle = _rpythonic_function_(		"XFillRectangle", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),] )

XFillRectangles = _rpythonic_function_(		"XFillRectangles", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XFlush = _rpythonic_function_(		"XFlush", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XForceScreenSaver = _rpythonic_function_(		"XForceScreenSaver", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XFree = _rpythonic_function_(		"XFree", ctypes.c_int, [] )

XFreeColormap = _rpythonic_function_(		"XFreeColormap", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XFreeColors = _rpythonic_function_(		"XFreeColors", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_ulong),] )

XFreeCursor = _rpythonic_function_(		"XFreeCursor", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XFreeExtensionList = _rpythonic_function_(		"XFreeExtensionList", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

XFreeFont = _rpythonic_function_(		"XFreeFont", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XFreeFontInfo = _rpythonic_function_(		"XFreeFontInfo", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XFreeFontNames = _rpythonic_function_(		"XFreeFontNames", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

XFreeFontPath = _rpythonic_function_(		"XFreeFontPath", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

XFreeGC = _rpythonic_function_(		"XFreeGC", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XFreeModifiermap = _rpythonic_function_(		"XFreeModifiermap", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XFreePixmap = _rpythonic_function_(		"XFreePixmap", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XGeometry = _rpythonic_function_(		"XGeometry", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XGetErrorDatabaseText = _rpythonic_function_(		"XGetErrorDatabaseText", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),] )

XGetErrorText = _rpythonic_function_(		"XGetErrorText", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),] )

XGetFontProperty = _rpythonic_function_(		"XGetFontProperty", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_ulong)),] )

XGetGCValues = _rpythonic_function_(		"XGetGCValues", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XGetGeometry = _rpythonic_function_(		"XGetGeometry", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_uint)),
	("none",		ctypes.POINTER(ctypes.c_uint)),
	("none",		ctypes.POINTER(ctypes.c_uint)),
	("none",		ctypes.POINTER(ctypes.c_uint)),] )

XGetIconName = _rpythonic_function_(		"XGetIconName", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

XGetInputFocus = _rpythonic_function_(		"XGetInputFocus", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XGetKeyboardControl = _rpythonic_function_(		"XGetKeyboardControl", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XGetPointerControl = _rpythonic_function_(		"XGetPointerControl", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XGetPointerMapping = _rpythonic_function_(		"XGetPointerMapping", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_ubyte)),
	("none",		ctypes.c_int),] )

XGetScreenSaver = _rpythonic_function_(		"XGetScreenSaver", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XGetTransientForHint = _rpythonic_function_(		"XGetTransientForHint", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_ulong)),] )

XGetWindowProperty = _rpythonic_function_(		"XGetWindowProperty", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_long),
	("none",		ctypes.c_long),
	("none",		ctypes.c_int),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),] )

XGetWindowAttributes = _rpythonic_function_(		"XGetWindowAttributes", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XGrabButton = _rpythonic_function_(		"XGrabButton", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),] )

XGrabKey = _rpythonic_function_(		"XGrabKey", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XGrabKeyboard = _rpythonic_function_(		"XGrabKeyboard", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_ulong),] )

XGrabServer = _rpythonic_function_(		"XGrabServer", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XGrabPointer = _rpythonic_function_(		"XGrabPointer", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),] )

XHeightMMOfScreen = _rpythonic_function_(		"XHeightMMOfScreen", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XHeightOfScreen = _rpythonic_function_(		"XHeightOfScreen", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XIfEvent = _rpythonic_function_(		"XIfEvent", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_void_p),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

XImageByteOrder = _rpythonic_function_(		"XImageByteOrder", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XInstallColormap = _rpythonic_function_(		"XInstallColormap", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XKeysymToKeycode = _rpythonic_function_(		"XKeysymToKeycode", ctypes.c_ubyte, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XKillClient = _rpythonic_function_(		"XKillClient", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XLookupColor = _rpythonic_function_(		"XLookupColor", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XLowerWindow = _rpythonic_function_(		"XLowerWindow", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XMapRaised = _rpythonic_function_(		"XMapRaised", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XMapSubwindows = _rpythonic_function_(		"XMapSubwindows", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XMapWindow = _rpythonic_function_(		"XMapWindow", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XMaskEvent = _rpythonic_function_(		"XMaskEvent", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_long),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XMaxCmapsOfScreen = _rpythonic_function_(		"XMaxCmapsOfScreen", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XMinCmapsOfScreen = _rpythonic_function_(		"XMinCmapsOfScreen", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XMoveResizeWindow = _rpythonic_function_(		"XMoveResizeWindow", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),] )

XMoveWindow = _rpythonic_function_(		"XMoveWindow", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XNextEvent = _rpythonic_function_(		"XNextEvent", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XNoOp = _rpythonic_function_(		"XNoOp", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XParseColor = _rpythonic_function_(		"XParseColor", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XParseGeometry = _rpythonic_function_(		"XParseGeometry", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_uint)),
	("none",		ctypes.POINTER(ctypes.c_uint)),] )

XPeekEvent = _rpythonic_function_(		"XPeekEvent", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XPeekIfEvent = _rpythonic_function_(		"XPeekIfEvent", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_void_p),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

XPending = _rpythonic_function_(		"XPending", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XPlanesOfScreen = _rpythonic_function_(		"XPlanesOfScreen", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XProtocolRevision = _rpythonic_function_(		"XProtocolRevision", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XProtocolVersion = _rpythonic_function_(		"XProtocolVersion", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XPutBackEvent = _rpythonic_function_(		"XPutBackEvent", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XPutImage = _rpythonic_function_(		"XPutImage", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),] )

XQLength = _rpythonic_function_(		"XQLength", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XQueryBestCursor = _rpythonic_function_(		"XQueryBestCursor", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.POINTER(ctypes.c_uint)),
	("none",		ctypes.POINTER(ctypes.c_uint)),] )

XQueryBestSize = _rpythonic_function_(		"XQueryBestSize", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.POINTER(ctypes.c_uint)),
	("none",		ctypes.POINTER(ctypes.c_uint)),] )

XQueryBestStipple = _rpythonic_function_(		"XQueryBestStipple", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.POINTER(ctypes.c_uint)),
	("none",		ctypes.POINTER(ctypes.c_uint)),] )

XQueryColor = _rpythonic_function_(		"XQueryColor", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XQueryBestTile = _rpythonic_function_(		"XQueryBestTile", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.POINTER(ctypes.c_uint)),
	("none",		ctypes.POINTER(ctypes.c_uint)),] )

XQueryColors = _rpythonic_function_(		"XQueryColors", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XQueryExtension = _rpythonic_function_(		"XQueryExtension", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XQueryKeymap = _rpythonic_function_(		"XQueryKeymap", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_char),] )

XQueryPointer = _rpythonic_function_(		"XQueryPointer", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_uint)),] )

XQueryTextExtents = _rpythonic_function_(		"XQueryTextExtents", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XQueryTextExtents16 = _rpythonic_function_(		"XQueryTextExtents16", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XQueryTree = _rpythonic_function_(		"XQueryTree", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ulong))),
	("none",		ctypes.POINTER(ctypes.c_uint)),] )

XReadBitmapFile = _rpythonic_function_(		"XReadBitmapFile", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_uint)),
	("none",		ctypes.POINTER(ctypes.c_uint)),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XRaiseWindow = _rpythonic_function_(		"XRaiseWindow", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XReadBitmapFileData = _rpythonic_function_(		"XReadBitmapFileData", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_uint)),
	("none",		ctypes.POINTER(ctypes.c_uint)),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XRebindKeysym = _rpythonic_function_(		"XRebindKeysym", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_ubyte)),
	("none",		ctypes.c_int),] )

XRecolorCursor = _rpythonic_function_(		"XRecolorCursor", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XRefreshKeyboardMapping = _rpythonic_function_(		"XRefreshKeyboardMapping", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XRemoveFromSaveSet = _rpythonic_function_(		"XRemoveFromSaveSet", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XRemoveHost = _rpythonic_function_(		"XRemoveHost", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XRemoveHosts = _rpythonic_function_(		"XRemoveHosts", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XReparentWindow = _rpythonic_function_(		"XReparentWindow", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XResetScreenSaver = _rpythonic_function_(		"XResetScreenSaver", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XResizeWindow = _rpythonic_function_(		"XResizeWindow", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),] )

XRestackWindows = _rpythonic_function_(		"XRestackWindows", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.c_int),] )

XRotateBuffers = _rpythonic_function_(		"XRotateBuffers", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XRotateWindowProperties = _rpythonic_function_(		"XRotateWindowProperties", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XScreenCount = _rpythonic_function_(		"XScreenCount", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XSelectInput = _rpythonic_function_(		"XSelectInput", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_long),] )

XSendEvent = _rpythonic_function_(		"XSendEvent", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_long),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XSetAccessControl = _rpythonic_function_(		"XSetAccessControl", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XSetArcMode = _rpythonic_function_(		"XSetArcMode", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XSetBackground = _rpythonic_function_(		"XSetBackground", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XSetClipMask = _rpythonic_function_(		"XSetClipMask", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XSetClipOrigin = _rpythonic_function_(		"XSetClipOrigin", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XSetClipRectangles = _rpythonic_function_(		"XSetClipRectangles", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XSetCloseDownMode = _rpythonic_function_(		"XSetCloseDownMode", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XSetCommand = _rpythonic_function_(		"XSetCommand", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("none",		ctypes.c_int),] )

XSetDashes = _rpythonic_function_(		"XSetDashes", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),] )

XSetFillRule = _rpythonic_function_(		"XSetFillRule", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XSetFillStyle = _rpythonic_function_(		"XSetFillStyle", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XSetFont = _rpythonic_function_(		"XSetFont", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XSetFontPath = _rpythonic_function_(		"XSetFontPath", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("none",		ctypes.c_int),] )

XSetForeground = _rpythonic_function_(		"XSetForeground", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XSetFunction = _rpythonic_function_(		"XSetFunction", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XSetGraphicsExposures = _rpythonic_function_(		"XSetGraphicsExposures", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XSetIconName = _rpythonic_function_(		"XSetIconName", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

XSetInputFocus = _rpythonic_function_(		"XSetInputFocus", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_ulong),] )

XSetLineAttributes = _rpythonic_function_(		"XSetLineAttributes", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XSetModifierMapping = _rpythonic_function_(		"XSetModifierMapping", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XSetPlaneMask = _rpythonic_function_(		"XSetPlaneMask", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XSetPointerMapping = _rpythonic_function_(		"XSetPointerMapping", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_ubyte)),
	("none",		ctypes.c_int),] )

XSetScreenSaver = _rpythonic_function_(		"XSetScreenSaver", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XSetSelectionOwner = _rpythonic_function_(		"XSetSelectionOwner", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),] )

XSetState = _rpythonic_function_(		"XSetState", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_ulong),] )

XSetStipple = _rpythonic_function_(		"XSetStipple", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XSetSubwindowMode = _rpythonic_function_(		"XSetSubwindowMode", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XSetTSOrigin = _rpythonic_function_(		"XSetTSOrigin", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XSetTile = _rpythonic_function_(		"XSetTile", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XSetWindowBackground = _rpythonic_function_(		"XSetWindowBackground", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),] )

XSetWindowBackgroundPixmap = _rpythonic_function_(		"XSetWindowBackgroundPixmap", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),] )

XSetWindowBorder = _rpythonic_function_(		"XSetWindowBorder", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),] )

XSetWindowBorderPixmap = _rpythonic_function_(		"XSetWindowBorderPixmap", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),] )

XSetWindowBorderWidth = _rpythonic_function_(		"XSetWindowBorderWidth", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_uint),] )

XSetWindowColormap = _rpythonic_function_(		"XSetWindowColormap", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),] )

XStoreBuffer = _rpythonic_function_(		"XStoreBuffer", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XStoreBytes = _rpythonic_function_(		"XStoreBytes", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),] )

XStoreColor = _rpythonic_function_(		"XStoreColor", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XStoreColors = _rpythonic_function_(		"XStoreColors", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XStoreName = _rpythonic_function_(		"XStoreName", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

XStoreNamedColor = _rpythonic_function_(		"XStoreNamedColor", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),] )

XSync = _rpythonic_function_(		"XSync", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XTextExtents = _rpythonic_function_(		"XTextExtents", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XTextExtents16 = _rpythonic_function_(		"XTextExtents16", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XTextWidth = _rpythonic_function_(		"XTextWidth", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),] )

XTextWidth16 = _rpythonic_function_(		"XTextWidth16", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XTranslateCoordinates = _rpythonic_function_(		"XTranslateCoordinates", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_ulong)),] )

XUndefineCursor = _rpythonic_function_(		"XUndefineCursor", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XUngrabButton = _rpythonic_function_(		"XUngrabButton", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_ulong),] )

XUngrabKey = _rpythonic_function_(		"XUngrabKey", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_ulong),] )

XUngrabKeyboard = _rpythonic_function_(		"XUngrabKeyboard", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XUngrabPointer = _rpythonic_function_(		"XUngrabPointer", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XUngrabServer = _rpythonic_function_(		"XUngrabServer", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XUninstallColormap = _rpythonic_function_(		"XUninstallColormap", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XUnloadFont = _rpythonic_function_(		"XUnloadFont", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XUnmapSubwindows = _rpythonic_function_(		"XUnmapSubwindows", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XUnmapWindow = _rpythonic_function_(		"XUnmapWindow", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XVendorRelease = _rpythonic_function_(		"XVendorRelease", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XWarpPointer = _rpythonic_function_(		"XWarpPointer", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XWidthMMOfScreen = _rpythonic_function_(		"XWidthMMOfScreen", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XWidthOfScreen = _rpythonic_function_(		"XWidthOfScreen", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XWindowEvent = _rpythonic_function_(		"XWindowEvent", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_long),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XWriteBitmapFile = _rpythonic_function_(		"XWriteBitmapFile", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_uint),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

XSupportsLocale = _rpythonic_function_(		"XSupportsLocale", ctypes.c_int, [] )

XSetLocaleModifiers = _rpythonic_function_(		"XSetLocaleModifiers", ctypes.POINTER(ctypes.c_char), [
	("none",		ctypes.POINTER(ctypes.c_char)),] )

XOpenOM = _rpythonic_function_(		"XOpenOM", ctypes.POINTER(_XOM), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("_XrmHashBucketRec",		ctypes.POINTER(_XrmHashBucketRec)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

XCloseOM = _rpythonic_function_(		"XCloseOM", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XDisplayOfOM = _rpythonic_function_(		"XDisplayOfOM", ctypes.POINTER(_XDisplay), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XLocaleOfOM = _rpythonic_function_(		"XLocaleOfOM", ctypes.POINTER(ctypes.c_char), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XDestroyOC = _rpythonic_function_(		"XDestroyOC", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XOMOfOC = _rpythonic_function_(		"XOMOfOC", ctypes.POINTER(_XOM), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XCreateFontSet = _rpythonic_function_(		"XCreateFontSet", ctypes.POINTER(_XOC), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(ctypes.c_char)))),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

XFreeFontSet = _rpythonic_function_(		"XFreeFontSet", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XFontsOfFontSet = _rpythonic_function_(		"XFontsOfFontSet", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)))),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(ctypes.c_char)))),] )

XBaseFontNameListOfFontSet = _rpythonic_function_(		"XBaseFontNameListOfFontSet", ctypes.POINTER(ctypes.c_char), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XLocaleOfFontSet = _rpythonic_function_(		"XLocaleOfFontSet", ctypes.POINTER(ctypes.c_char), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XContextDependentDrawing = _rpythonic_function_(		"XContextDependentDrawing", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XDirectionalDependentDrawing = _rpythonic_function_(		"XDirectionalDependentDrawing", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XContextualDrawing = _rpythonic_function_(		"XContextualDrawing", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XExtentsOfFontSet = _rpythonic_function_(		"XExtentsOfFontSet", ctypes.POINTER(XFontSetExtents), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XmbTextEscapement = _rpythonic_function_(		"XmbTextEscapement", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),] )

XwcTextEscapement = _rpythonic_function_(		"XwcTextEscapement", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_int64)),
	("none",		ctypes.c_int),] )

Xutf8TextEscapement = _rpythonic_function_(		"Xutf8TextEscapement", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),] )

XmbTextExtents = _rpythonic_function_(		"XmbTextExtents", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XwcTextExtents = _rpythonic_function_(		"XwcTextExtents", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_int64)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

Xutf8TextExtents = _rpythonic_function_(		"Xutf8TextExtents", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XmbTextPerCharExtents = _rpythonic_function_(		"XmbTextPerCharExtents", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XwcTextPerCharExtents = _rpythonic_function_(		"XwcTextPerCharExtents", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_int64)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

Xutf8TextPerCharExtents = _rpythonic_function_(		"Xutf8TextPerCharExtents", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_int)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XmbDrawText = _rpythonic_function_(		"XmbDrawText", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XwcDrawText = _rpythonic_function_(		"XwcDrawText", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XmbDrawString = _rpythonic_function_(		"XmbDrawString", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),] )

Xutf8DrawText = _rpythonic_function_(		"Xutf8DrawText", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XwcDrawString = _rpythonic_function_(		"XwcDrawString", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_int64)),
	("none",		ctypes.c_int),] )

Xutf8DrawString = _rpythonic_function_(		"Xutf8DrawString", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),] )

XwcDrawImageString = _rpythonic_function_(		"XwcDrawImageString", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_int64)),
	("none",		ctypes.c_int),] )

XmbDrawImageString = _rpythonic_function_(		"XmbDrawImageString", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),] )

Xutf8DrawImageString = _rpythonic_function_(		"Xutf8DrawImageString", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),] )

XOpenIM = _rpythonic_function_(		"XOpenIM", ctypes.POINTER(_XIM), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("_XrmHashBucketRec",		ctypes.POINTER(_XrmHashBucketRec)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

XCloseIM = _rpythonic_function_(		"XCloseIM", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XDisplayOfIM = _rpythonic_function_(		"XDisplayOfIM", ctypes.POINTER(_XDisplay), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XLocaleOfIM = _rpythonic_function_(		"XLocaleOfIM", ctypes.POINTER(ctypes.c_char), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XDestroyIC = _rpythonic_function_(		"XDestroyIC", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XSetICFocus = _rpythonic_function_(		"XSetICFocus", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XUnsetICFocus = _rpythonic_function_(		"XUnsetICFocus", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XwcResetIC = _rpythonic_function_(		"XwcResetIC", ctypes.POINTER(ctypes.c_int64), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XmbResetIC = _rpythonic_function_(		"XmbResetIC", ctypes.POINTER(ctypes.c_char), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

Xutf8ResetIC = _rpythonic_function_(		"Xutf8ResetIC", ctypes.POINTER(ctypes.c_char), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XIMOfIC = _rpythonic_function_(		"XIMOfIC", ctypes.POINTER(_XIM), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XFilterEvent = _rpythonic_function_(		"XFilterEvent", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_ulong),] )

XmbLookupString = _rpythonic_function_(		"XmbLookupString", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XwcLookupString = _rpythonic_function_(		"XwcLookupString", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_int64)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

Xutf8LookupString = _rpythonic_function_(		"Xutf8LookupString", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_ulong)),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XRegisterIMInstantiateCallback = _rpythonic_function_(		"XRegisterIMInstantiateCallback", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("_XrmHashBucketRec",		ctypes.POINTER(_XrmHashBucketRec)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),)),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

XUnregisterIMInstantiateCallback = _rpythonic_function_(		"XUnregisterIMInstantiateCallback", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("_XrmHashBucketRec",		ctypes.POINTER(_XrmHashBucketRec)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),)),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

XConnectionWatchProc = _rpythonic_function_(		"XConnectionWatchProc", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

XInternalConnectionNumbers = _rpythonic_function_(		"XInternalConnectionNumbers", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("none",		ctypes.POINTER(ctypes.c_int)),] )

XProcessInternalConnection = _rpythonic_function_(		"XProcessInternalConnection", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

XAddConnectionWatch = _rpythonic_function_(		"XAddConnectionWatch", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),ctypes.c_int,ctypes.c_int,ctypes.POINTER(ctypes.POINTER(ctypes.c_char)),)),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

XRemoveConnectionWatch = _rpythonic_function_(		"XRemoveConnectionWatch", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),ctypes.c_int,ctypes.c_int,ctypes.POINTER(ctypes.POINTER(ctypes.c_char)),)),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

XSetAuthorization = _rpythonic_function_(		"XSetAuthorization", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),] )

_Xmbtowc = _rpythonic_function_(		"_Xmbtowc", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_int64)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int),] )

_Xwctomb = _rpythonic_function_(		"_Xwctomb", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_int64),] )

XGetEventData = _rpythonic_function_(		"XGetEventData", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

XFreeEventData = _rpythonic_function_(		"XFreeEventData", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )


_rpythonic_convert_structs_to_objects()

_rpythonic_setup_return_wrappers()
_rpythonic_make_nice_global_enums_()
_rpythonic_clean_up_missing_functions_()
_rpythonic_strip_prefixes_(['X'])