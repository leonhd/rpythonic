## generated by RPythonic 0.4.8h	| host: 64bits
## http://code.google.com/p/rpythonic/
import os, sys, ctypes, inspect
__os = os
__sys = sys
__inspect = inspect
_CTYPES_CDLLS = []	# support loading functions from multiple libraries


PYTHON_RESERVED_KEYWORDS = 'for while in as global with try except lambda return raise if else elif eval exec and not or break continue finally print yield del def class assert from is pass'.split()


IS32BIT = (ctypes.sizeof(ctypes.c_void_p)==4)

_ISPYTHON2 = sys.version_info[0] == 2
if _ISPYTHON2: _NULLBYTE = '\0'
else: _NULLBYTE = bytes( chr(0), 'ascii' )

def _CHARP2STRING( charp, encoding='utf-8' ):
	b = bytes()
	i = 0
	while True:
		char = charp[ i ]
		if char == _NULLBYTE: break
		else:
			b += char
			i += 1
	return b.decode( encoding )

## try to load precompiled c-libraries from this directory, if the library is not there try to load from the system.
_clibs_dir = os.path.dirname(os.path.abspath(__file__))

def _load_ctypes_lib( name ):
	if name.startswith('/'):		# if a full path is given bypass all the loading logic and try to load it
		if __os.path.isfile( name ): return ctypes.CDLL( name )
	elif __os.name == 'posix':
		if __sys.platform.startswith('linux'):
			if not name.endswith('.so'): name += '.so'
			if not name.startswith('lib'): name = 'lib' + name

			if IS32BIT: 	path = __os.path.join(_clibs_dir,'linux32')
			else: 		path = __os.path.join(_clibs_dir,'linux64')
			url = __os.path.join( path, name )
			if __os.path.isfile( url ): return ctypes.CDLL(url)
			elif __os.path.isfile( '/usr/local/lib/%s'%name ): return ctypes.CDLL('/usr/local/lib/%s'%name)
			elif __os.path.isfile( '/usr/local/lib64/%s'%name ) and not IS32BIT: return ctypes.CDLL('/usr/local/lib64/%s'%name)
			elif __os.path.isfile( '/usr/lib/%s'%name ): return ctypes.CDLL('/usr/lib/%s'%name)
			elif __os.path.isfile( './%s'%name ): return ctypes.CDLL('./%s'%name)
			
			elif __os.path.isfile( '/usr/lib/%s.0'%name ):	# Fedora style
				return ctypes.CDLL('/usr/lib/%s.0'%name )
			elif __os.path.isfile( '/usr/lib64/%s.0'%name ):	# Fedora style
				return ctypes.CDLL('/usr/lib64/%s.0'%name )

			else:	# fallback
				print('[ falling back to loading from current process ]')
				try: return ctypes.CDLL(name)
				except: return ctypes.CDLL('')

		elif sys.platform == 'darwin':
			name += '.dylib'
			if IS32BIT: 	path = os.path.join(_clibs_dir,'osx32')
			else: 		path = os.path.join(_clibs_dir,'osx64')
			url = os.path.join( path, name )
			if os.path.isfile( url ): return ctypes.CDLL(url)
			else: return ctypes.CDLL(name) #fallback

	elif os.name == 'nt':
		name += '.dll'
		if IS32BIT: 	path = os.path.join(_clibs_dir,'win32')
		else: 		path = os.path.join(_clibs_dir,'win64')
		url = os.path.join( path, name )
		if os.path.isfile( url ): return ctypes.CDLL(url)
		else: return ctypes.CDLL(name) #fallback

RPYTHONIC_WRAPPER_FUNCTIONS = {}
RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES = []
RPYTHONIC_AUTOPREFIX_IGNORE = []

## ctypes does not clearly expose these types ##
PyCFuncPtrType = type(ctypes.CFUNCTYPE(ctypes.c_void_p))
PyCArrayType = type( ctypes.c_int * 2 )
PyCPointerType = type( ctypes.POINTER(ctypes.c_int) )
PyCStructType = type( ctypes.Structure )
CArgObject = type( ctypes.byref(ctypes.c_int()) )

class _rpythonic_meta_(object):
	'''
	Reserved Attributes:
		POINTER
		CSTRUCT
		CAST
	'''
	_rpythonic_ = True		# workaround for now, must have a way to know if object is a meta from another module, isinstance(o,_rpythonic_meta_) will fail in those cases. another workaround could be check sys.modules for other rpythonic modules and fetch _rpythonic_meta_ from there.
	def __init__(self, *args, **kw ):							# cheap trick, abuse **kw, and look for "pointer", "cast"
		if kw and 'pointer' not in kw: raise SyntaxError	# sorry, you can not init with keywords
		elif kw and 'pointer' in kw:
			if 'cast' in kw and kw['cast']:
				self.POINTER = ctypes.cast( kw['pointer'], ctypes.POINTER(self.CSTRUCT) )
			else: self.POINTER = kw['pointer']
		else: self.POINTER = ctypes.pointer( self.CSTRUCT(*args) )
		self.POINTER.pyobject = self	# .pyobject is local to this pointer "object"

	def __getattr__(self,name):
		if hasattr( self.POINTER.contents, name ):
			return getattr( self.POINTER.contents, name )

		else:	# when rpythonic failed to generate good bindings - these lookups should be cached
			for parent in self._rpythonic_parent_classes_:
				if hasattr( parent, name ):
					method = getattr( parent, name )	# should check if it really is an unbound method
					if method in parent._rpythonic_unbound_lookup_:
						func = parent._rpythonic_unbound_lookup_[ method ]
						n = func.name
						if len(func.argnames) > 1:
							argnames = func.argnames[ 1 : ]
							a = ',' + '=None,'.join( argnames ) + '=None'
							b = ','.join( argnames )
						else: a = b = ''
						lamb = eval( 'lambda self %s: %s( self.POINTER, %s )' %(a,n,b) )
						setattr( self.__class__, name, lamb )
						#return lamb	# this would return the unbound lambda, must call getattr again
						return getattr( self, name )
					else:
						# this can happen if self also inherits from the same parent class,
						# assume that by continuing this reaches that shared parent class,
						# and the lambda above is created as normal.
						continue
			## last resort, load from global name space ##
			G = globals()
			if name in G: return lambda *args: G[name](self.POINTER, *args)
			else:
				for prefix in self._autoprefix_:
					n = prefix + name
					if n in G: return lambda *args: G[n](self.POINTER, *args)
				print( 'possible auto-prefixes available', self._autoprefix_ )
				raise AttributeError

	def __call__(self, type=False):
		print('calling object is DEPRECATED - use ob.POINTER or ob.CSTRUCT')
		if type: return self.CSTRUCT
		else: return self.POINTER


def _rpythonic_generate_subclass_( name, struct, functions ):
	head = 'class %s( _rpythonic_meta_ ):' %name
	body = [ 
		'_rpythonic_parent_classes_ = []' ,
		'_rpythonic_unbound_lookup_ = {}' 
	]

	names = [ func.name for func in functions ]

	possibles = {}
	rank = []		# rank by longest name
	if len(names) > 3000: print('too many functions to use this hack')
	else:
		for n1 in names:
			prefix = ''
			for i,char in enumerate(n1):
				prefix += char
				if prefix not in possibles:
					possibles[ prefix ] = 0
					for n2 in names:
						if n2.startswith( prefix ):
							possibles[ prefix ] += 1

					if not rank or len(prefix) > len(rank[-1]) and possibles[prefix] > len(names)/4:
						rank.append( prefix )

	top = []
	while rank:
		best = rank.pop()
		if possibles[best] > len(functions)/2 and best not in names:
			if best.endswith('_set_') or best.endswith('_get_'): best = best[ : -4 ]
			elif best.endswith('Set') or best.endswith('Get'): best = best[ : -3 ]

			rem = []
			for other in rank:
				if best.startswith(other): rem.append( other )
			for r in rem: rank.remove( r )

			if best not in top: top.append( best )

		if len(top) > 3: break

	for n in names:		# find shortest prefixes #
		prefix = ''
		for i,char in enumerate(n):		# cammelCase
			if i==0: prefix += char; continue
			if char.isupper() and len(prefix) >= 2: break
			prefix += char
		if prefix and prefix != n and len(prefix) >= 2:
			hits = 0
			for other in names:
				if other.startswith( prefix ): hits += 1
			if hits >= 2 and prefix not in top:
				top.append( prefix )
				if len(top) >= 6: break

	## setup full names
	for func in functions:
		n = func.name
		if len(func.argnames) > 1:
			argnames = func.argnames[ 1 : ]
			a = ',' + '=None,'.join( argnames ) + '=None'
			b = ','.join( argnames )
		else: a = b = ''

		fhead = 'def %s( self %s ):' %(n,a)
		fbody = ['return %s(self.POINTER, %s)' %(func.name,b)]
		g = fhead + '\n\t\t' + '\n\t\t'.join( fbody )
		body.append( g )
		#body.append( '%s._rpythonic_function_ = %s' %(func.name, func.name) )

	## setup short names ##
	for n in names:
		for prefix in top:
			if n.startswith(prefix) and n[len(prefix):] not in names:
				alt = n[ len(prefix) : ]
				if alt and alt != n and alt not in PYTHON_RESERVED_KEYWORDS and not alt.isdigit() and not alt[0].isdigit():
					body.append( '%s = %s' %(alt,n) )
					names.append( alt )

	gen = head + '\n\t' + '\n\t'.join( body )
	try: exec( gen )
	except:
		print( gen )
		raise SyntaxError

	klass = locals()[name]
	klass.CSTRUCT = struct	# ctypes struct class

	klass._autoprefix_ = top
	for func in functions:
		unbound = getattr( klass, func.name )
		klass._rpythonic_unbound_lookup_[ unbound ] = func
		# klass.longname is klass.shortname = False
		# klass.longname == klass.shortname = True
	return klass

def _rpythonic_convert_structs_to_objects():
	G = globals()
	for klass in _OOAPI_:
		altname = name = klass.__name__
		prefix = ''
		for i,char in enumerate(name):
			if i==0: prefix += char; continue
			if char.isupper(): break
			prefix += char
		if prefix and prefix != name:
			hits = 0
			for other in _OOAPI_:
				if other is not klass:
					if other.__name__.startswith( prefix ): hits += 1
			if hits >= 2:
				altname = name[ len(prefix) : ]

		funcs = _OOAPI_[ klass ]
		newklass = _rpythonic_generate_subclass_( altname, klass, funcs )
		klass._rpythonic_wrapper_class_ = newklass
		G[ name ] = newklass	# replace struct with wrapper
		if altname not in G: G[ altname ] = newklass	# safely define with nicer name
		elif altname != name: # odd cases, maybe a function that returns the object, almost never happens.
			print('WARN - not replacing something with struct wrapper:', G[altname] )


def _rpythonic_setup_return_wrappers():
	R = _rpythonic_function_
	for klass in _OOAPI_:
		if klass in _OOAPI_RETURNS_OBJECT_:
			for f in _OOAPI_RETURNS_OBJECT_[klass]:
				f.object_oriented = True
				if not f.return_wrapper:	# just in case the ctypes footer had already defined it, do not overwrite
					f.return_wrapper = klass._rpythonic_wrapper_class_


###############################################################
##						OLD META FUNC						##
###############################################################
def _rpythonic_function_( name, result=ctypes.c_void_p, args=[]):
	mname = '_metafunc_%s' %name
	exec( 'class %s( _rpythonic_metafunc_ ): pass' %mname )
	k = locals()[mname]
	return k( name, result, args )
_OOAPI_ = {}
_OOAPI_RETURNS_OBJECT_ = {}
class _rpythonic_metafunc_(object):
	def __init__(self, name, result=ctypes.c_void_p, args=[]):
		self.name = name
		self.result = result
		self.argtypes = []		# can dynamically change CFUNCTYPE trick
		self.argnames = []
		self.argtypestypes = []
		for i,arg in enumerate(args):
			n,t = arg
			if n in PYTHON_RESERVED_KEYWORDS: n = 'C_'+n
			if n in self.argnames: n = '%s%s' %(n,i)
			self.argnames.append( n )
			self.argtypes.append( t )
			self.argtypestypes.append( type(t) )		# precomputed for speed

		self.argnames = tuple( self.argnames )				# should never change
		self.numargs = len( self.argtypes )
		self.callbacks = [None] * self.numargs
		self.return_wrapper = None
		self.object_oriented = False
		self.function = None
		for cdll in _CTYPES_CDLLS:	# functions could be multiple libraries
			if hasattr(cdll, self.name):
				func = self.function = getattr(cdll, self.name )
				RPYTHONIC_WRAPPER_FUNCTIONS[ name ] = self
				break
		if not self.function:
			RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES.append( name )

		if self.function: self.reset()

	def change_argument_type( self, name, t ):
		idx = self.argnames.index( name )
		self.argtypes[ idx ] = t
		self.argtypestypes[ idx ] = type(t)
		self.function.argtypes = self.argtypes

	def reset(self):
		if self.argnames:
			a = ',' + '=None,'.join( self.argnames ) + '=None'
			b = ','.join( self.argnames )
		else: a = b = ''

		callmeth = eval( 'lambda self %s: self._call_( %s )' %(a,b) )
		setattr( self.__class__, '__call__', callmeth )

		self.function.restype = self.result
		self.function.argtypes = self.argtypes

		if type( self.result ) is PyCPointerType and type(self.result._type_) is PyCStructType:
			klass = self.result._type_
			if klass not in _OOAPI_RETURNS_OBJECT_: _OOAPI_RETURNS_OBJECT_[klass] = []
			_OOAPI_RETURNS_OBJECT_[klass].append( self )

		self.defaults = []
		for i in range( self.numargs ):
			T = self.argtypes[ i ]
			if type(T) is PyCFuncPtrType:
				p = T()	# func pointers can not be None
				self.defaults.append( p )
				self.callbacks[ i ] = p					# save reference
			elif T in (ctypes.c_int, ctypes.c_uint, ctypes.c_long, ctypes.c_ulong):
				self.defaults.append( 0 )
			elif T in (ctypes.c_float, ctypes.c_double):
				self.defaults.append( .0 )
			else: self.defaults.append( None )	# None is allowed for all other types

			## generate OO API ##
			if i == 0 and type(T) is PyCPointerType and type(T._type_) is PyCStructType:
				klass = T._type_
				if klass not in _OOAPI_: _OOAPI_[ klass ] = []
				_OOAPI_[ klass ].append( self )

	def _call_( self, *args ):			# allow flexible calling types
		cargs = list( self.defaults )
		for i,arg in enumerate(args):
			if isinstance( arg, _rpythonic_meta_ ): arg = arg.POINTER
			elif hasattr( arg, '_rpythonic_' ): arg = arg.POINTER		# workaround - instance from another module

			t = type(arg)
			k = self.argtypes[ i ]
			kt = self.argtypestypes[ i ]
			if arg is None and cargs[i] is not None:	# use user defaults, very rare cases
				continue

			elif t is bool and k is ctypes.c_int:
				if arg: cargs[i] = 1	#ctypes.c_int(1)
				else: cargs[i] = 0	#ctypes.c_int(0)

			elif t in (list,tuple):				# convert lists and tuples into array
				if kt is PyCArrayType:
					cargs[ i ] = k(*arg)
				elif kt is PyCStructType:
					if k._array_wrapper_: cargs[ i ] = k(arg)	# allow easy array init
					else: cargs[ i ] = k(*arg)							# allow multiple args
				elif kt is PyCPointerType:
					cargs[ i ] = _convert_nested_list_to_pointer( k, arg )
				else: assert 0

			elif isinstance( arg, ctypes._Pointer ) and t is not k and kt is PyCPointerType:
				cargs[ i ] = ctypes.cast( arg, k )		# generic's that need to be cast

			elif kt is PyCStructType and isinstance( arg, ctypes._Pointer ):
				cargs[ i ] = arg.contents	# fixed may25

			elif kt is PyCPointerType and not isinstance( arg, (ctypes._Pointer,CArgObject) ):
				if t in (int,float,bool): ptr = k( k._type_(arg) )
				elif t is str:
					if not _ISPYTHON2: arg = arg.encode('utf-8')	# encode to ascii in python3
					ptr = ctypes.create_string_buffer(arg)				# correct and pypy compatible
				elif t in (PyCStructType, PyCArrayType):
					ptr = ctypes.cast( ctypes.pointer( arg ), k )
				else:
					ptr = arg	# TODO print warning?
				cargs[ i ] = ptr

			elif kt is PyCFuncPtrType:
				if t.__name__ == 'CFunctionType': cargs[ i ] = arg		# assume outside holds pointer
				else:													# this is not safe #
					cargs[ i ] = self.callbacks[ i ] = k( arg )				# assume arg is a callable
			else:
				cargs[ i ] = arg		# directly pass

		## if you define your own return_wrapper, it must take keyword "pointer"
		if self.return_wrapper: return self.return_wrapper( pointer=self.function( *cargs ) )
		else: return self.function( *cargs )



def _convert_nested_list_to_pointer( k, arg ):
	depth = 0; s = k
	while True:
		if type(s) is PyCPointerType:
			s = getattr( s, '_type_' )
			depth += 1
		else: break
	assert depth and depth <= 2
	if depth == 1:
		T = k._type_
		ptr = k( k._type_() )
		for i in range( len(arg) ):
			ptr[ i ] = T( *arg[i] )
	elif depth == 2:
		T = k._type_._type_
		_ptr = k._type_( k._type_._type_() )
		for i in range(len( arg )):
			for j in range( len(arg[i]) ):
				_ptr[ j ] = T( *arg[ i ][ j ] )
		ptr = k( _ptr )
	return ptr


def __freeze_rpythonic_struct( cls, fields ):
	if cls not in _OOAPI_: _OOAPI_[ cls ] = []	# wrap all structs
	try: setattr( cls, '_fields_', fields )
	except:
		print( 'WARN - bad order struct freeze', cls )
		#cls._fields_ = []

class _rpythonic_struct_( ctypes.Structure ):
	_array_wrapper_ = False
	_fields_ = []
	_methods_ = {}
	#def __call__(self): return self
	def __init__(self, *args, **kw ):
		cargs = []
		argtypes = []
		for a in self._fields_: argtypes.append( a[1] )
		if len(args) > len(argtypes): args = [args]	# allow both calling conventions
		for i,arg in enumerate( args ):
			if isinstance( arg, _rpythonic_meta_ ): arg = arg.POINTER

			t = type(arg)
			k = argtypes[ i ]
			if t in (list,tuple):
				if k.__class__.__name__	== 'PyCArrayType':
					cargs.append( k(*arg) )
				elif k.__class__.__name__ == 'PyCStructType':
					if k._array_wrapper_: cargs.append( k(arg) )	# allow easy array init
					else: cargs.append( k(*arg) )							# allow multiple args
			elif isinstance( arg, ctypes._Pointer ) and t is not k:
				cargs[ i ] = ctypes.cast( arg, k )	# generic's that need to be cast
			elif k.__class__.__name__ == 'PyCArrayType' and t in (float,int,bool):
				cargs.append( k(arg) )		# support init array from single value
			else:
				cargs.append( arg )		# directly pass

		ctypes.Structure.__init__(self, *cargs, **kw)


def _rpythonic_make_nice_global_enums_():
	G = globals()
	for name in RPYTHONIC_GLOBAL_ENUMS:
		if '_' in name and name.index('_') <= 4:
			altname = name[ name.index('_') + 1 : ]
			if altname not in G:
				G[altname] = RPYTHONIC_GLOBAL_ENUMS[ name ]

def _rpythonic_clean_up_missing_functions_():
	G = globals()
	for f in RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES:
		G.pop( f )
	print( "C functions loaded: %s" %len(RPYTHONIC_WRAPPER_FUNCTIONS) )
	print( "C functions failed: %s" %len(RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES) )



###### NEW API #########
CTYPES_DLL = None

class _VOID_POINTER_CONTAINER_(object):
	def __init__(self, ptr, name=None):
		self._pointer_ = ptr
		self.name = name
NULL = _VOID_POINTER_CONTAINER_(None,'<null pointer>')


class meta:	# NEW API - allow run time switch from ctypes to rffi
	'''
	Methods:
		RPython will not allow object wrapper around a method (__call__ not allowed)
		keep C function names in list "__cfunctions__"
		rpythonic.enable_rffi( classA, classB )	
		can take advantage of methods in object-method-wrapper,
		generate rffi wrapper and set method on classA, etc.
		replaces object-method-wrapper with rffi-method

	Properties:
		CPython: obj.x=1
		RPython: obj.set_x(1)	
	'''
	METAS = []
	def __init__(self, constructors=[], methods={}, properties={}):
		#global CTYPES_DLL	# TODO update me to using _CTYPES_CDLLS
		#if not CTYPES_DLL:
		#	CTYPES_DLL = _load_ctypes_lib( _clib_name_ )

		self.constructors = constructors
		self.methods = methods
		self.properties = properties
		self.METAS.append( self )



	def __call__(self, cls ):
		print('@meta', cls )

		if not self.constructors:
			lamb = lambda s, _explicit_pointer_=None: setattr(s,'_pointer_',getattr(_explicit_pointer_,'_pointer_')) if hasattr(_explicit_pointer_,'_pointer_') else setattr(s,'_pointer_',_explicit_pointer_)
			lamb._debug = '(no constructor)'
			setattr( cls, '__init__', lamb )
		else:
			con = self._find_best_function( self.constructors )
			cfunc = self._build_cfunc( con )
			setattr( cls, '_%s'%con['name'], cfunc )
			g = self._gen_init( con )
			setattr( cls, '__init__', g )
		
		## set methods ##
		for name in self.methods:
			meth = self.methods[ name ]
			cfuncs = []
			for m in meth['functions']:
				cfunc = self._build_cfunc( m, method=True, static=meth['static'] )
				self._setup_return( cfunc, meth )
				setattr( cls, '_%s'%m['name'], cfunc )
				cfuncs.append( cfunc )

			f = self._find_best_function( meth['functions'] )
			g = self._gen_method( meth, f )
			g._cfuncs = cfuncs
			if meth['static']: g = classmethod( g )
			setattr( cls, name, g )

		for name in self.properties:
			print( 'property:', name )
			p = []
			for f in self.properties[name]:
				cfunc = self._build_cfunc( f )
				setattr( cls, '_%s'%f['name'], cfunc )
				g = self._gen_method( f, f )
				p.append( g )

			setattr( cls, name, property(*p) )

		return cls


	@staticmethod
	def _build_cfunc( info, method=False, static=False ):
		cfunc = getattr(CTYPES_DLL, info['name'])
		if method and not static: argtypes = [ ctypes.c_void_p ]
		else: argtypes = []
		for p in info['parameters']: argtypes.append( eval(p['ctypes_type']) )
		cfunc.argtypes = argtypes
		return cfunc

	@staticmethod
	def _setup_return( cfunc, info ):
		if not info['returns_fundamental']:
			cfunc.restype = ctypes.c_void_p
		elif info['returns_fundamental']:
			cfunc.restype = eval( info['returns_ctypes'] )
		else:
			cfunc.restype = ctypes.c_void_p

	@staticmethod
	def _gen_prepare_args( m ):
		a = []; b = []
		for i,p in enumerate(m['parameters']):
			if 'name' in p: n = p['name']
			else: n = '_unnamed_%s' %i
			if '<' in n: n = '_TODOfixme_%s' %i
			if n in PYTHON_RESERVED_KEYWORDS: n += str(i)
			if p['fundamental']:
				b.append( n )
				s = p['raw_type'].split()
				if 'default' in p:
					d = p['default']
					if p['raw_type'] in ('float', 'double'):
						if d.endswith('f'): d = d[:-1]
						d = d.replace(' ', '.')
						if 'e' in d: d = 0.0
						try: d = float(d)
						except: d = 0.0
					elif ('int' in s or 'size_t' in s) and not d.isdigit(): d = 0
					elif 'char' in s and '"' not in d: d = '""'
					elif d.lower() == 'false': d = False
					elif d.lower() == 'true': d = True
				elif 'char' in s: d = '""'
				elif 'float' in s or 'double' in s: d = 0.0
				elif 'size_t' in s or 'int' in s or 'long' in s or 'short' in s: d = 0
				elif p['raw_type'] == 'bool': d = False
				elif p['raw_type'] in ('void', '(template)'): d = 'NULL'
				else: print( p )
				a.append( n+'=%s' %d )

			else:
				b.append( '%s._pointer_'%n )
				a.append( n+'=NULL' )
		return a, b

	@staticmethod
	def _gen_init( m ):
		a, b = meta._gen_prepare_args( m )
		if a: e = 'lambda _py_self_, %s, _explicit_pointer_=None: ' %(','.join(a))
		else: e = 'lambda _py_self_, _explicit_pointer_=None: '
		e += 'setattr(_py_self_, "_pointer_", _py_self_._%s(%s))' %( m['name'], ','.join(b) )
		e += ' if not _explicit_pointer_ else '
		e += 'setattr(_py_self_, "_pointer_", _explicit_pointer_)'
		print( e )
		lamb = eval( e ); lamb._debug = e; lamb._introspect = m
		return lamb

	@staticmethod
	def _find_best_function( funcs ):
		best = funcs[0]
		score = -1
		if len(funcs) > 1:
			for f in funcs:
				hits = 0
				for p in f['parameters']:
					if p['fundamental']: hits += 1
				if hits and hits == len( f['parameters'] ):
					if hits > score:
						score = hits
						best = f
		return best

	@staticmethod
	def _gen_method( m, f ):
		a, b = meta._gen_prepare_args( f )
		if a: e = 'lambda _py_self_, %s: ' %(','.join(a))
		else: e = 'lambda _py_self_: '

		if 'static' in m and m['static']:	# static in c++ is like a classmethod
			c = '_py_self_._%s( %s )' %( f['name'], ','.join(b) )
		else:
			c = '_py_self_._%s( _py_self_._pointer_, %s )' %( f['name'], ','.join(b) )

		if not m['returns_fundamental']:
			if 'returns_unknown' in m or '<' in m['returns']: c = '_VOID_POINTER_CONTAINER_( %s, name="%s" )' %(c,m['returns'])
			else:
				something = m['returns'].replace('::', '.')
				c = '%s( _explicit_pointer_=%s )' %(something, c)

		e += c; lamb = eval( e )
		lamb._debug = e; lamb._introspect = f
		return lamb


	META_FUNCTIONS = []
	@classmethod
	def function( self, info ):
		print('@meta.function', info['name'] )
		#global CTYPES_DLL
		#if not CTYPES_DLL:
		#	CTYPES_DLL = _load_ctypes_lib( _clib_name_ )

		cfunc = self._build_cfunc( info, method=False, static=True )
		setattr( meta, '_%s'%info['name'], cfunc )
		self._setup_return( cfunc, info )
		a, b = meta._gen_prepare_args( info )
		e = 'lambda %s: ' %(','.join(a))
		c = 'meta._%s( %s )' %( info['name'], ','.join(b) )

		if not info['returns_fundamental']:
			if 'returns_unknown' in info or '<' in info['returns']:
				c = '_VOID_POINTER_CONTAINER_( %s, name="%s" )' %(c,info['returns'])
			else:
				something = info['returns'].replace('::', '.')
				c = '%s( _explicit_pointer_=%s )' %(something, c)
		e += c
		lamb = eval( e )
		lamb._debug = e
		lamb._introspect = info
		return lamb



def _rpythonic_strip_prefixes_( prefixes ):
	G = globals()
	names = list(G.keys())	# ensure list in py3
	for name in names:
		for prefix in prefixes:
			if name.startswith( prefix ):
				newname = name[ len(prefix) : ]
				if newname and newname not in G:
					G[ newname ] = G[ name ]


########################################################
##				Load Dynamic Libaries					##
def _rpythonic_load_dynamic_libraries(names):
	global _CTYPES_CDLLS
	for name in names:
		cdll = _load_ctypes_lib( name )
		if cdll:
			print('[[dynamic library loaded: %s]]' %name)
			_CTYPES_CDLLS.append( cdll )
#----------------------------------------------------------#
print( os.path.abspath( os.path.curdir ) )



_rpythonic_load_dynamic_libraries( ['/usr/lib/x86_64-linux-gnu/libgio-2.0.so', '/usr/lib/i386-linux-gnu/libgio-2.0.so'] )

## macro globals ##
## enums ##
G_THREAD_ERROR_AGAIN = 0 

G_ONCE_STATUS_NOTCALLED = 0 
G_ONCE_STATUS_PROGRESS = 1 
G_ONCE_STATUS_READY = 2 

SI_ASYNCNL = -60 
SI_TKILL = -6 
SI_SIGIO = -5 
SI_ASYNCIO = -4 
SI_MESGQ = -3 
SI_TIMER = -2 
SI_QUEUE = -1 
SI_USER = 0 
SI_KERNEL = 128 

ILL_ILLOPC = 1 
ILL_ILLOPN = 2 
ILL_ILLADR = 3 
ILL_ILLTRP = 4 
ILL_PRVOPC = 5 
ILL_PRVREG = 6 
ILL_COPROC = 7 
ILL_BADSTK = 8 

FPE_INTDIV = 1 
FPE_INTOVF = 2 
FPE_FLTDIV = 3 
FPE_FLTOVF = 4 
FPE_FLTUND = 5 
FPE_FLTRES = 6 
FPE_FLTINV = 7 
FPE_FLTSUB = 8 

SEGV_MAPERR = 1 
SEGV_ACCERR = 2 

BUS_ADRALN = 1 
BUS_ADRERR = 2 
BUS_OBJERR = 3 

TRAP_BRKPT = 1 
TRAP_TRACE = 2 

CLD_EXITED = 1 
CLD_KILLED = 2 
CLD_DUMPED = 3 
CLD_TRAPPED = 4 
CLD_STOPPED = 5 
CLD_CONTINUED = 6 

POLL_IN = 1 
POLL_OUT = 2 
POLL_MSG = 3 
POLL_ERR = 4 
POLL_PRI = 5 
POLL_HUP = 6 

SIGEV_SIGNAL = 0 
SIGEV_NONE = 1 
SIGEV_THREAD = 2 
SIGEV_THREAD_ID = 4 

SS_ONSTACK = 1 
SS_DISABLE = 2 

G_BOOKMARK_FILE_ERROR_INVALID_URI = 0 
G_BOOKMARK_FILE_ERROR_INVALID_VALUE = 1 
G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED = 2 
G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND = 3 
G_BOOKMARK_FILE_ERROR_READ = 4 
G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING = 5 
G_BOOKMARK_FILE_ERROR_WRITE = 6 
G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND = 7 

G_CHECKSUM_MD5 = 0 
G_CHECKSUM_SHA1 = 1 
G_CHECKSUM_SHA256 = 2 

G_CONVERT_ERROR_NO_CONVERSION = 0 
G_CONVERT_ERROR_ILLEGAL_SEQUENCE = 1 
G_CONVERT_ERROR_FAILED = 2 
G_CONVERT_ERROR_PARTIAL_INPUT = 3 
G_CONVERT_ERROR_BAD_URI = 4 
G_CONVERT_ERROR_NOT_ABSOLUTE_PATH = 5 

G_DATE_DAY = 0 
G_DATE_MONTH = 1 
G_DATE_YEAR = 2 

G_DATE_BAD_WEEKDAY = 0 
G_DATE_MONDAY = 1 
G_DATE_TUESDAY = 2 
G_DATE_WEDNESDAY = 3 
G_DATE_THURSDAY = 4 
G_DATE_FRIDAY = 5 
G_DATE_SATURDAY = 6 
G_DATE_SUNDAY = 7 

G_DATE_BAD_MONTH = 0 
G_DATE_JANUARY = 1 
G_DATE_FEBRUARY = 2 
G_DATE_MARCH = 3 
G_DATE_APRIL = 4 
G_DATE_MAY = 5 
G_DATE_JUNE = 6 
G_DATE_JULY = 7 
G_DATE_AUGUST = 8 
G_DATE_SEPTEMBER = 9 
G_DATE_OCTOBER = 10 
G_DATE_NOVEMBER = 11 
G_DATE_DECEMBER = 12 

G_TIME_TYPE_STANDARD = 0 
G_TIME_TYPE_DAYLIGHT = 1 
G_TIME_TYPE_UNIVERSAL = 2 

G_FILE_ERROR_EXIST = 0 
G_FILE_ERROR_ISDIR = 1 
G_FILE_ERROR_ACCES = 2 
G_FILE_ERROR_NAMETOOLONG = 3 
G_FILE_ERROR_NOENT = 4 
G_FILE_ERROR_NOTDIR = 5 
G_FILE_ERROR_NXIO = 6 
G_FILE_ERROR_NODEV = 7 
G_FILE_ERROR_ROFS = 8 
G_FILE_ERROR_TXTBSY = 9 
G_FILE_ERROR_FAULT = 10 
G_FILE_ERROR_LOOP = 11 
G_FILE_ERROR_NOSPC = 12 
G_FILE_ERROR_NOMEM = 13 
G_FILE_ERROR_MFILE = 14 
G_FILE_ERROR_NFILE = 15 
G_FILE_ERROR_BADF = 16 
G_FILE_ERROR_INVAL = 17 
G_FILE_ERROR_PIPE = 18 
G_FILE_ERROR_AGAIN = 19 
G_FILE_ERROR_INTR = 20 
G_FILE_ERROR_IO = 21 
G_FILE_ERROR_PERM = 22 
G_FILE_ERROR_NOSYS = 23 
G_FILE_ERROR_FAILED = 24 

G_FILE_TEST_IS_REGULAR = 1 
G_FILE_TEST_IS_SYMLINK = 2 
G_FILE_TEST_IS_DIR = 4 
G_FILE_TEST_IS_EXECUTABLE = 8 
G_FILE_TEST_EXISTS = 16 

G_HOOK_FLAG_ACTIVE = 1 
G_HOOK_FLAG_IN_CALL = 2 
G_HOOK_FLAG_MASK = 15 

G_UNICODE_CONTROL = 0 
G_UNICODE_FORMAT = 1 
G_UNICODE_UNASSIGNED = 2 
G_UNICODE_PRIVATE_USE = 3 
G_UNICODE_SURROGATE = 4 
G_UNICODE_LOWERCASE_LETTER = 5 
G_UNICODE_MODIFIER_LETTER = 6 
G_UNICODE_OTHER_LETTER = 7 
G_UNICODE_TITLECASE_LETTER = 8 
G_UNICODE_UPPERCASE_LETTER = 9 
G_UNICODE_SPACING_MARK = 10 
G_UNICODE_ENCLOSING_MARK = 11 
G_UNICODE_NON_SPACING_MARK = 12 
G_UNICODE_DECIMAL_NUMBER = 13 
G_UNICODE_LETTER_NUMBER = 14 
G_UNICODE_OTHER_NUMBER = 15 
G_UNICODE_CONNECT_PUNCTUATION = 16 
G_UNICODE_DASH_PUNCTUATION = 17 
G_UNICODE_CLOSE_PUNCTUATION = 18 
G_UNICODE_FINAL_PUNCTUATION = 19 
G_UNICODE_INITIAL_PUNCTUATION = 20 
G_UNICODE_OTHER_PUNCTUATION = 21 
G_UNICODE_OPEN_PUNCTUATION = 22 
G_UNICODE_CURRENCY_SYMBOL = 23 
G_UNICODE_MODIFIER_SYMBOL = 24 
G_UNICODE_MATH_SYMBOL = 25 
G_UNICODE_OTHER_SYMBOL = 26 
G_UNICODE_LINE_SEPARATOR = 27 
G_UNICODE_PARAGRAPH_SEPARATOR = 28 
G_UNICODE_SPACE_SEPARATOR = 29 

G_UNICODE_BREAK_MANDATORY = 0 
G_UNICODE_BREAK_CARRIAGE_RETURN = 1 
G_UNICODE_BREAK_LINE_FEED = 2 
G_UNICODE_BREAK_COMBINING_MARK = 3 
G_UNICODE_BREAK_SURROGATE = 4 
G_UNICODE_BREAK_ZERO_WIDTH_SPACE = 5 
G_UNICODE_BREAK_INSEPARABLE = 6 
G_UNICODE_BREAK_NON_BREAKING_GLUE = 7 
G_UNICODE_BREAK_CONTINGENT = 8 
G_UNICODE_BREAK_SPACE = 9 
G_UNICODE_BREAK_AFTER = 10 
G_UNICODE_BREAK_BEFORE = 11 
G_UNICODE_BREAK_BEFORE_AND_AFTER = 12 
G_UNICODE_BREAK_HYPHEN = 13 
G_UNICODE_BREAK_NON_STARTER = 14 
G_UNICODE_BREAK_OPEN_PUNCTUATION = 15 
G_UNICODE_BREAK_CLOSE_PUNCTUATION = 16 
G_UNICODE_BREAK_QUOTATION = 17 
G_UNICODE_BREAK_EXCLAMATION = 18 
G_UNICODE_BREAK_IDEOGRAPHIC = 19 
G_UNICODE_BREAK_NUMERIC = 20 
G_UNICODE_BREAK_INFIX_SEPARATOR = 21 
G_UNICODE_BREAK_SYMBOL = 22 
G_UNICODE_BREAK_ALPHABETIC = 23 
G_UNICODE_BREAK_PREFIX = 24 
G_UNICODE_BREAK_POSTFIX = 25 
G_UNICODE_BREAK_COMPLEX_CONTEXT = 26 
G_UNICODE_BREAK_AMBIGUOUS = 27 
G_UNICODE_BREAK_UNKNOWN = 28 
G_UNICODE_BREAK_NEXT_LINE = 29 
G_UNICODE_BREAK_WORD_JOINER = 30 
G_UNICODE_BREAK_HANGUL_L_JAMO = 31 
G_UNICODE_BREAK_HANGUL_V_JAMO = 32 
G_UNICODE_BREAK_HANGUL_T_JAMO = 33 
G_UNICODE_BREAK_HANGUL_LV_SYLLABLE = 34 
G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE = 35 
G_UNICODE_BREAK_CLOSE_PARANTHESIS = 36 
G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER = 37 
G_UNICODE_BREAK_HEBREW_LETTER = 38 

G_UNICODE_SCRIPT_INVALID_CODE = -1 
G_UNICODE_SCRIPT_COMMON = 0 
G_UNICODE_SCRIPT_INHERITED = 1 
G_UNICODE_SCRIPT_ARABIC = 2 
G_UNICODE_SCRIPT_ARMENIAN = 3 
G_UNICODE_SCRIPT_BENGALI = 4 
G_UNICODE_SCRIPT_BOPOMOFO = 5 
G_UNICODE_SCRIPT_CHEROKEE = 6 
G_UNICODE_SCRIPT_COPTIC = 7 
G_UNICODE_SCRIPT_CYRILLIC = 8 
G_UNICODE_SCRIPT_DESERET = 9 
G_UNICODE_SCRIPT_DEVANAGARI = 10 
G_UNICODE_SCRIPT_ETHIOPIC = 11 
G_UNICODE_SCRIPT_GEORGIAN = 12 
G_UNICODE_SCRIPT_GOTHIC = 13 
G_UNICODE_SCRIPT_GREEK = 14 
G_UNICODE_SCRIPT_GUJARATI = 15 
G_UNICODE_SCRIPT_GURMUKHI = 16 
G_UNICODE_SCRIPT_HAN = 17 
G_UNICODE_SCRIPT_HANGUL = 18 
G_UNICODE_SCRIPT_HEBREW = 19 
G_UNICODE_SCRIPT_HIRAGANA = 20 
G_UNICODE_SCRIPT_KANNADA = 21 
G_UNICODE_SCRIPT_KATAKANA = 22 
G_UNICODE_SCRIPT_KHMER = 23 
G_UNICODE_SCRIPT_LAO = 24 
G_UNICODE_SCRIPT_LATIN = 25 
G_UNICODE_SCRIPT_MALAYALAM = 26 
G_UNICODE_SCRIPT_MONGOLIAN = 27 
G_UNICODE_SCRIPT_MYANMAR = 28 
G_UNICODE_SCRIPT_OGHAM = 29 
G_UNICODE_SCRIPT_OLD_ITALIC = 30 
G_UNICODE_SCRIPT_ORIYA = 31 
G_UNICODE_SCRIPT_RUNIC = 32 
G_UNICODE_SCRIPT_SINHALA = 33 
G_UNICODE_SCRIPT_SYRIAC = 34 
G_UNICODE_SCRIPT_TAMIL = 35 
G_UNICODE_SCRIPT_TELUGU = 36 
G_UNICODE_SCRIPT_THAANA = 37 
G_UNICODE_SCRIPT_THAI = 38 
G_UNICODE_SCRIPT_TIBETAN = 39 
G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL = 40 
G_UNICODE_SCRIPT_YI = 41 
G_UNICODE_SCRIPT_TAGALOG = 42 
G_UNICODE_SCRIPT_HANUNOO = 43 
G_UNICODE_SCRIPT_BUHID = 44 
G_UNICODE_SCRIPT_TAGBANWA = 45 
G_UNICODE_SCRIPT_BRAILLE = 46 
G_UNICODE_SCRIPT_CYPRIOT = 47 
G_UNICODE_SCRIPT_LIMBU = 48 
G_UNICODE_SCRIPT_OSMANYA = 49 
G_UNICODE_SCRIPT_SHAVIAN = 50 
G_UNICODE_SCRIPT_LINEAR_B = 51 
G_UNICODE_SCRIPT_TAI_LE = 52 
G_UNICODE_SCRIPT_UGARITIC = 53 
G_UNICODE_SCRIPT_NEW_TAI_LUE = 54 
G_UNICODE_SCRIPT_BUGINESE = 55 
G_UNICODE_SCRIPT_GLAGOLITIC = 56 
G_UNICODE_SCRIPT_TIFINAGH = 57 
G_UNICODE_SCRIPT_SYLOTI_NAGRI = 58 
G_UNICODE_SCRIPT_OLD_PERSIAN = 59 
G_UNICODE_SCRIPT_KHAROSHTHI = 60 
G_UNICODE_SCRIPT_UNKNOWN = 61 
G_UNICODE_SCRIPT_BALINESE = 62 
G_UNICODE_SCRIPT_CUNEIFORM = 63 
G_UNICODE_SCRIPT_PHOENICIAN = 64 
G_UNICODE_SCRIPT_PHAGS_PA = 65 
G_UNICODE_SCRIPT_NKO = 66 
G_UNICODE_SCRIPT_KAYAH_LI = 67 
G_UNICODE_SCRIPT_LEPCHA = 68 
G_UNICODE_SCRIPT_REJANG = 69 
G_UNICODE_SCRIPT_SUNDANESE = 70 
G_UNICODE_SCRIPT_SAURASHTRA = 71 
G_UNICODE_SCRIPT_CHAM = 72 
G_UNICODE_SCRIPT_OL_CHIKI = 73 
G_UNICODE_SCRIPT_VAI = 74 
G_UNICODE_SCRIPT_CARIAN = 75 
G_UNICODE_SCRIPT_LYCIAN = 76 
G_UNICODE_SCRIPT_LYDIAN = 77 
G_UNICODE_SCRIPT_AVESTAN = 78 
G_UNICODE_SCRIPT_BAMUM = 79 
G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS = 80 
G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC = 81 
G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI = 82 
G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN = 83 
G_UNICODE_SCRIPT_JAVANESE = 84 
G_UNICODE_SCRIPT_KAITHI = 85 
G_UNICODE_SCRIPT_LISU = 86 
G_UNICODE_SCRIPT_MEETEI_MAYEK = 87 
G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN = 88 
G_UNICODE_SCRIPT_OLD_TURKIC = 89 
G_UNICODE_SCRIPT_SAMARITAN = 90 
G_UNICODE_SCRIPT_TAI_THAM = 91 
G_UNICODE_SCRIPT_TAI_VIET = 92 
G_UNICODE_SCRIPT_BATAK = 93 
G_UNICODE_SCRIPT_BRAHMI = 94 
G_UNICODE_SCRIPT_MANDAIC = 95 
G_UNICODE_SCRIPT_CHAKMA = 96 
G_UNICODE_SCRIPT_MEROITIC_CURSIVE = 97 
G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS = 98 
G_UNICODE_SCRIPT_MIAO = 99 
G_UNICODE_SCRIPT_SHARADA = 100 
G_UNICODE_SCRIPT_SORA_SOMPENG = 101 
G_UNICODE_SCRIPT_TAKRI = 102 

G_NORMALIZE_DEFAULT = 0 
G_NORMALIZE_NFD = 0 
G_NORMALIZE_DEFAULT_COMPOSE = 1 
G_NORMALIZE_NFC = 1 
G_NORMALIZE_ALL = 2 
G_NORMALIZE_NFKD = 2 
G_NORMALIZE_ALL_COMPOSE = 3 
G_NORMALIZE_NFKC = 3 

G_USER_DIRECTORY_DESKTOP = 0 
G_USER_DIRECTORY_DOCUMENTS = 1 
G_USER_DIRECTORY_DOWNLOAD = 2 
G_USER_DIRECTORY_MUSIC = 3 
G_USER_DIRECTORY_PICTURES = 4 
G_USER_DIRECTORY_PUBLIC_SHARE = 5 
G_USER_DIRECTORY_TEMPLATES = 6 
G_USER_DIRECTORY_VIDEOS = 7 
G_USER_N_DIRECTORIES = 8 

G_FORMAT_SIZE_DEFAULT = 0 
G_FORMAT_SIZE_LONG_FORMAT = 1 
G_FORMAT_SIZE_IEC_UNITS = 2 

G_IO_ERROR_NONE = 0 
G_IO_ERROR_AGAIN = 1 
G_IO_ERROR_INVAL = 2 
G_IO_ERROR_UNKNOWN = 3 

G_IO_CHANNEL_ERROR_FBIG = 0 
G_IO_CHANNEL_ERROR_INVAL = 1 
G_IO_CHANNEL_ERROR_IO = 2 
G_IO_CHANNEL_ERROR_ISDIR = 3 
G_IO_CHANNEL_ERROR_NOSPC = 4 
G_IO_CHANNEL_ERROR_NXIO = 5 
G_IO_CHANNEL_ERROR_OVERFLOW = 6 
G_IO_CHANNEL_ERROR_PIPE = 7 
G_IO_CHANNEL_ERROR_FAILED = 8 

G_IO_STATUS_ERROR = 0 
G_IO_STATUS_NORMAL = 1 
G_IO_STATUS_EOF = 2 
G_IO_STATUS_AGAIN = 3 

G_SEEK_CUR = 0 
G_SEEK_SET = 1 
G_SEEK_END = 2 

G_IO_IN = 1 
G_IO_OUT = 4 
G_IO_PRI = 2 
G_IO_ERR = 8 
G_IO_HUP = 16 
G_IO_NVAL = 32 

G_IO_FLAG_APPEND = 1 
G_IO_FLAG_NONBLOCK = 2 
G_IO_FLAG_IS_READABLE = 4 
G_IO_FLAG_IS_WRITABLE = 8 
G_IO_FLAG_IS_SEEKABLE = 16 
G_IO_FLAG_MASK = 31 
G_IO_FLAG_GET_MASK = 31 
G_IO_FLAG_SET_MASK = 3 

G_KEY_FILE_ERROR_UNKNOWN_ENCODING = 0 
G_KEY_FILE_ERROR_PARSE = 1 
G_KEY_FILE_ERROR_NOT_FOUND = 2 
G_KEY_FILE_ERROR_KEY_NOT_FOUND = 3 
G_KEY_FILE_ERROR_GROUP_NOT_FOUND = 4 
G_KEY_FILE_ERROR_INVALID_VALUE = 5 

G_KEY_FILE_NONE = 0 
G_KEY_FILE_KEEP_COMMENTS = 1 
G_KEY_FILE_KEEP_TRANSLATIONS = 2 

G_MARKUP_ERROR_BAD_UTF8 = 0 
G_MARKUP_ERROR_EMPTY = 1 
G_MARKUP_ERROR_PARSE = 2 
G_MARKUP_ERROR_UNKNOWN_ELEMENT = 3 
G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE = 4 
G_MARKUP_ERROR_INVALID_CONTENT = 5 
G_MARKUP_ERROR_MISSING_ATTRIBUTE = 6 

G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG = 1 
G_MARKUP_TREAT_CDATA_AS_TEXT = 2 
G_MARKUP_PREFIX_ERROR_POSITION = 4 

G_MARKUP_COLLECT_INVALID = 0 
G_MARKUP_COLLECT_STRING = 1 
G_MARKUP_COLLECT_STRDUP = 2 
G_MARKUP_COLLECT_BOOLEAN = 3 
G_MARKUP_COLLECT_TRISTATE = 4 
G_MARKUP_COLLECT_OPTIONAL = 4194304 

G_LOG_FLAG_RECURSION = 1 
G_LOG_FLAG_FATAL = 2 
G_LOG_LEVEL_ERROR = 4 
G_LOG_LEVEL_CRITICAL = 8 
G_LOG_LEVEL_WARNING = 16 
G_LOG_LEVEL_MESSAGE = 32 
G_LOG_LEVEL_INFO = 64 
G_LOG_LEVEL_DEBUG = 128 
G_LOG_LEVEL_MASK = 3 

G_TRAVERSE_LEAVES = 1 
G_TRAVERSE_NON_LEAVES = 2 
G_TRAVERSE_ALL = 3 
G_TRAVERSE_MASK = 3 
G_TRAVERSE_LEAFS = 1 
G_TRAVERSE_NON_LEAFS = 2 

G_IN_ORDER = 0 
G_PRE_ORDER = 1 
G_POST_ORDER = 2 
G_LEVEL_ORDER = 3 

G_OPTION_FLAG_HIDDEN = 1 
G_OPTION_FLAG_IN_MAIN = 2 
G_OPTION_FLAG_REVERSE = 4 
G_OPTION_FLAG_NO_ARG = 8 
G_OPTION_FLAG_FILENAME = 16 
G_OPTION_FLAG_OPTIONAL_ARG = 32 
G_OPTION_FLAG_NOALIAS = 64 

G_OPTION_ARG_NONE = 0 
G_OPTION_ARG_STRING = 1 
G_OPTION_ARG_INT = 2 
G_OPTION_ARG_CALLBACK = 3 
G_OPTION_ARG_FILENAME = 4 
G_OPTION_ARG_STRING_ARRAY = 5 
G_OPTION_ARG_FILENAME_ARRAY = 6 
G_OPTION_ARG_DOUBLE = 7 
G_OPTION_ARG_INT64 = 8 

G_OPTION_ERROR_UNKNOWN_OPTION = 0 
G_OPTION_ERROR_BAD_VALUE = 1 
G_OPTION_ERROR_FAILED = 2 

G_REGEX_ERROR_COMPILE = 0 
G_REGEX_ERROR_OPTIMIZE = 1 
G_REGEX_ERROR_REPLACE = 2 
G_REGEX_ERROR_MATCH = 3 
G_REGEX_ERROR_INTERNAL = 4 
G_REGEX_ERROR_STRAY_BACKSLASH = 101 
G_REGEX_ERROR_MISSING_CONTROL_CHAR = 102 
G_REGEX_ERROR_UNRECOGNIZED_ESCAPE = 103 
G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER = 104 
G_REGEX_ERROR_QUANTIFIER_TOO_BIG = 105 
G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS = 106 
G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS = 107 
G_REGEX_ERROR_RANGE_OUT_OF_ORDER = 108 
G_REGEX_ERROR_NOTHING_TO_REPEAT = 109 
G_REGEX_ERROR_UNRECOGNIZED_CHARACTER = 112 
G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS = 113 
G_REGEX_ERROR_UNMATCHED_PARENTHESIS = 114 
G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE = 115 
G_REGEX_ERROR_UNTERMINATED_COMMENT = 118 
G_REGEX_ERROR_EXPRESSION_TOO_LARGE = 120 
G_REGEX_ERROR_MEMORY_ERROR = 121 
G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND = 125 
G_REGEX_ERROR_MALFORMED_CONDITION = 126 
G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES = 127 
G_REGEX_ERROR_ASSERTION_EXPECTED = 128 
G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME = 130 
G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED = 131 
G_REGEX_ERROR_HEX_CODE_TOO_LARGE = 134 
G_REGEX_ERROR_INVALID_CONDITION = 135 
G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND = 136 
G_REGEX_ERROR_INFINITE_LOOP = 140 
G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR = 142 
G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME = 143 
G_REGEX_ERROR_MALFORMED_PROPERTY = 146 
G_REGEX_ERROR_UNKNOWN_PROPERTY = 147 
G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG = 148 
G_REGEX_ERROR_TOO_MANY_SUBPATTERNS = 149 
G_REGEX_ERROR_INVALID_OCTAL_VALUE = 151 
G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE = 154 
G_REGEX_ERROR_DEFINE_REPETION = 155 
G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS = 156 
G_REGEX_ERROR_MISSING_BACK_REFERENCE = 157 

G_REGEX_CASELESS = 1 
G_REGEX_MULTILINE = 2 
G_REGEX_DOTALL = 4 
G_REGEX_EXTENDED = 8 
G_REGEX_ANCHORED = 16 
G_REGEX_DOLLAR_ENDONLY = 32 
G_REGEX_UNGREEDY = 512 
G_REGEX_RAW = 131072 
G_REGEX_NO_AUTO_CAPTURE = 262144 
G_REGEX_OPTIMIZE = 524288 
G_REGEX_DUPNAMES = 33554432 
G_REGEX_NEWLINE_CR = 4294967296 
G_REGEX_NEWLINE_LF = 8589934592 
G_REGEX_NEWLINE_CRLF = 12884901888 

G_REGEX_MATCH_ANCHORED = 16 
G_REGEX_MATCH_NOTBOL = 128 
G_REGEX_MATCH_NOTEOL = 256 
G_REGEX_MATCH_NOTEMPTY = 65536 
G_REGEX_MATCH_PARTIAL = 2097152 
G_REGEX_MATCH_NEWLINE_CR = 4294967296 
G_REGEX_MATCH_NEWLINE_LF = 8589934592 
G_REGEX_MATCH_NEWLINE_CRLF = 12884901888 
G_REGEX_MATCH_NEWLINE_ANY = 17179869184 

G_ERR_UNKNOWN = 0 
G_ERR_UNEXP_EOF = 1 
G_ERR_UNEXP_EOF_IN_STRING = 2 
G_ERR_UNEXP_EOF_IN_COMMENT = 3 
G_ERR_NON_DIGIT_IN_CONST = 4 
G_ERR_DIGIT_RADIX = 5 
G_ERR_FLOAT_RADIX = 6 
G_ERR_FLOAT_MALFORMED = 7 

G_TOKEN_EOF = 0 
G_TOKEN_LEFT_PAREN = "(" 
G_TOKEN_RIGHT_PAREN = ")" 
G_TOKEN_LEFT_CURLY = "{" 
G_TOKEN_RIGHT_CURLY = "}" 
G_TOKEN_LEFT_BRACE = "[" 
G_TOKEN_RIGHT_BRACE = "]" 
G_TOKEN_EQUAL_SIGN = "=" 
G_TOKEN_COMMA = "," 
G_TOKEN_NONE = 256 
G_TOKEN_ERROR = 257 
G_TOKEN_CHAR = 258 
G_TOKEN_BINARY = 259 
G_TOKEN_OCTAL = 260 
G_TOKEN_INT = 261 
G_TOKEN_HEX = 262 
G_TOKEN_FLOAT = 263 
G_TOKEN_STRING = 264 
G_TOKEN_SYMBOL = 265 
G_TOKEN_IDENTIFIER = 266 
G_TOKEN_IDENTIFIER_NULL = 267 
G_TOKEN_COMMENT_SINGLE = 268 
G_TOKEN_COMMENT_MULTI = 269 
G_TOKEN_LAST = 270 

G_SHELL_ERROR_BAD_QUOTING = 0 
G_SHELL_ERROR_EMPTY_STRING = 1 
G_SHELL_ERROR_FAILED = 2 

G_SLICE_CONFIG_ALWAYS_MALLOC = 1 
G_SLICE_CONFIG_BYPASS_MAGAZINES = 2 
G_SLICE_CONFIG_WORKING_SET_MSECS = 3 
G_SLICE_CONFIG_COLOR_INCREMENT = 4 
G_SLICE_CONFIG_CHUNK_SIZES = 5 
G_SLICE_CONFIG_CONTENTION_COUNTER = 6 

G_SPAWN_ERROR_FORK = 0 
G_SPAWN_ERROR_READ = 1 
G_SPAWN_ERROR_CHDIR = 2 
G_SPAWN_ERROR_ACCES = 3 
G_SPAWN_ERROR_PERM = 4 
G_SPAWN_ERROR_TOO_BIG = 5 
G_SPAWN_ERROR_2BIG = 5 
G_SPAWN_ERROR_NOEXEC = 6 
G_SPAWN_ERROR_NAMETOOLONG = 7 
G_SPAWN_ERROR_NOENT = 8 
G_SPAWN_ERROR_NOMEM = 9 
G_SPAWN_ERROR_NOTDIR = 10 
G_SPAWN_ERROR_LOOP = 11 
G_SPAWN_ERROR_TXTBUSY = 12 
G_SPAWN_ERROR_IO = 13 
G_SPAWN_ERROR_NFILE = 14 
G_SPAWN_ERROR_MFILE = 15 
G_SPAWN_ERROR_INVAL = 16 
G_SPAWN_ERROR_ISDIR = 17 
G_SPAWN_ERROR_LIBBAD = 18 
G_SPAWN_ERROR_FAILED = 19 

G_SPAWN_LEAVE_DESCRIPTORS_OPEN = 1 
G_SPAWN_DO_NOT_REAP_CHILD = 2 
G_SPAWN_SEARCH_PATH = 4 
G_SPAWN_STDOUT_TO_DEV_NULL = 8 
G_SPAWN_STDERR_TO_DEV_NULL = 16 
G_SPAWN_CHILD_INHERITS_STDIN = 32 
G_SPAWN_FILE_AND_ARGV_ZERO = 64 

G_ASCII_ALNUM = 1 
G_ASCII_ALPHA = 2 
G_ASCII_CNTRL = 4 
G_ASCII_DIGIT = 8 
G_ASCII_GRAPH = 16 
G_ASCII_LOWER = 32 
G_ASCII_PRINT = 64 
G_ASCII_PUNCT = 128 
G_ASCII_SPACE = 256 
G_ASCII_UPPER = 512 
G_ASCII_XDIGIT = 65536 

G_TEST_TRAP_SILENCE_STDOUT = 128 
G_TEST_TRAP_SILENCE_STDERR = 256 
G_TEST_TRAP_INHERIT_STDIN = 512 

G_TEST_LOG_NONE = 0 
G_TEST_LOG_ERROR = 1 
G_TEST_LOG_START_BINARY = 2 
G_TEST_LOG_LIST_CASE = 3 
G_TEST_LOG_SKIP_CASE = 4 
G_TEST_LOG_START_CASE = 5 
G_TEST_LOG_STOP_CASE = 6 
G_TEST_LOG_MIN_RESULT = 7 
G_TEST_LOG_MAX_RESULT = 8 
G_TEST_LOG_MESSAGE = 9 

G_VARIANT_CLASS_BOOLEAN = "b" 
G_VARIANT_CLASS_BYTE = "y" 
G_VARIANT_CLASS_INT16 = "n" 
G_VARIANT_CLASS_UINT16 = "q" 
G_VARIANT_CLASS_INT32 = "i" 
G_VARIANT_CLASS_UINT32 = "u" 
G_VARIANT_CLASS_INT64 = "x" 
G_VARIANT_CLASS_UINT64 = "t" 
G_VARIANT_CLASS_HANDLE = "h" 
G_VARIANT_CLASS_DOUBLE = "d" 
G_VARIANT_CLASS_STRING = "s" 
G_VARIANT_CLASS_OBJECT_PATH = "o" 
G_VARIANT_CLASS_SIGNATURE = "g" 
G_VARIANT_CLASS_VARIANT = "v" 
G_VARIANT_CLASS_MAYBE = "m" 
G_VARIANT_CLASS_ARRAY = "a" 
G_VARIANT_CLASS_TUPLE = "(" 
G_VARIANT_CLASS_DICT_ENTRY = "{" 

G_VARIANT_PARSE_ERROR_FAILED = 0 
G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED = 1 
G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE = 2 
G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED = 3 
G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END = 4 
G_VARIANT_PARSE_ERROR_INVALID_CHARACTER = 5 
G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING = 6 
G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH = 7 
G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE = 8 
G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING = 9 
G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE = 10 
G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE = 11 
G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG = 12 
G_VARIANT_PARSE_ERROR_TYPE_ERROR = 13 
G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN = 14 
G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD = 15 
G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT = 16 
G_VARIANT_PARSE_ERROR_VALUE_EXPECTED = 17 

G_THREAD_PRIORITY_LOW = 0 
G_THREAD_PRIORITY_NORMAL = 1 
G_THREAD_PRIORITY_HIGH = 2 
G_THREAD_PRIORITY_URGENT = 3 

PTHREAD_CREATE_JOINABLE = 0 
PTHREAD_CREATE_DETACHED = 1 

PTHREAD_MUTEX_TIMED_NP = 0 
PTHREAD_MUTEX_RECURSIVE_NP = 1 
PTHREAD_MUTEX_ERRORCHECK_NP = 2 
PTHREAD_MUTEX_ADAPTIVE_NP = 3 
PTHREAD_MUTEX_NORMAL = 0 
PTHREAD_MUTEX_RECURSIVE = 1 
PTHREAD_MUTEX_ERRORCHECK = 2 
PTHREAD_MUTEX_DEFAULT = 0 

PTHREAD_MUTEX_STALLED = 0 
PTHREAD_MUTEX_STALLED_NP = 0 
PTHREAD_MUTEX_ROBUST = 1 
PTHREAD_MUTEX_ROBUST_NP = 1 

PTHREAD_RWLOCK_PREFER_READER_NP = 0 
PTHREAD_RWLOCK_PREFER_WRITER_NP = 1 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = 2 
PTHREAD_RWLOCK_DEFAULT_NP = 0 

PTHREAD_INHERIT_SCHED = 0 
PTHREAD_EXPLICIT_SCHED = 1 

PTHREAD_SCOPE_SYSTEM = 0 
PTHREAD_SCOPE_PROCESS = 1 

PTHREAD_PROCESS_PRIVATE = 0 
PTHREAD_PROCESS_SHARED = 1 

PTHREAD_CANCEL_ENABLE = 0 
PTHREAD_CANCEL_DISABLE = 1 

PTHREAD_CANCEL_DEFERRED = 0 
PTHREAD_CANCEL_ASYNCHRONOUS = 1 

G_TYPE_DEBUG_NONE = 0 
G_TYPE_DEBUG_OBJECTS = 1 
G_TYPE_DEBUG_SIGNALS = 2 
G_TYPE_DEBUG_MASK = 3 

G_TYPE_FLAG_CLASSED = 1 
G_TYPE_FLAG_INSTANTIATABLE = 2 
G_TYPE_FLAG_DERIVABLE = 4 
G_TYPE_FLAG_DEEP_DERIVABLE = 8 

G_TYPE_FLAG_ABSTRACT = 16 
G_TYPE_FLAG_VALUE_ABSTRACT = 32 

G_PARAM_READABLE = 1 
G_PARAM_WRITABLE = 2 
G_PARAM_CONSTRUCT = 4 
G_PARAM_CONSTRUCT_ONLY = 8 
G_PARAM_LAX_VALIDATION = 16 
G_PARAM_STATIC_NAME = 32 
G_PARAM_PRIVATE = 32 
G_PARAM_STATIC_NICK = 64 
G_PARAM_STATIC_BLURB = 128 
G_PARAM_DEPRECATED = 562949953421312 

G_SIGNAL_RUN_FIRST = 1 
G_SIGNAL_RUN_LAST = 2 
G_SIGNAL_RUN_CLEANUP = 4 
G_SIGNAL_NO_RECURSE = 8 
G_SIGNAL_DETAILED = 16 
G_SIGNAL_ACTION = 32 
G_SIGNAL_NO_HOOKS = 64 
G_SIGNAL_MUST_COLLECT = 128 
G_SIGNAL_DEPRECATED = 256 

G_CONNECT_AFTER = 1 
G_CONNECT_SWAPPED = 2 

G_SIGNAL_MATCH_ID = 1 
G_SIGNAL_MATCH_DETAIL = 2 
G_SIGNAL_MATCH_CLOSURE = 4 
G_SIGNAL_MATCH_FUNC = 8 
G_SIGNAL_MATCH_DATA = 16 
G_SIGNAL_MATCH_UNBLOCKED = 32 

G_BINDING_DEFAULT = 0 
G_BINDING_BIDIRECTIONAL = 1 
G_BINDING_SYNC_CREATE = 2 
G_BINDING_INVERT_BOOLEAN = 4 

G_APP_INFO_CREATE_NONE = 0 
G_APP_INFO_CREATE_NEEDS_TERMINAL = 1 
G_APP_INFO_CREATE_SUPPORTS_URIS = 2 
G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION = 4 

G_CONVERTER_NO_FLAGS = 0 
G_CONVERTER_INPUT_AT_END = 1 
G_CONVERTER_FLUSH = 2 

G_CONVERTER_ERROR = 0 
G_CONVERTER_CONVERTED = 1 
G_CONVERTER_FINISHED = 2 
G_CONVERTER_FLUSHED = 3 

G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN = 0 
G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN = 1 
G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN = 2 

G_DATA_STREAM_NEWLINE_TYPE_LF = 0 
G_DATA_STREAM_NEWLINE_TYPE_CR = 1 
G_DATA_STREAM_NEWLINE_TYPE_CR_LF = 2 
G_DATA_STREAM_NEWLINE_TYPE_ANY = 3 

G_FILE_ATTRIBUTE_TYPE_INVALID = 0 
G_FILE_ATTRIBUTE_TYPE_STRING = 1 
G_FILE_ATTRIBUTE_TYPE_BYTE_STRING = 2 
G_FILE_ATTRIBUTE_TYPE_BOOLEAN = 3 
G_FILE_ATTRIBUTE_TYPE_UINT32 = 4 
G_FILE_ATTRIBUTE_TYPE_INT32 = 5 
G_FILE_ATTRIBUTE_TYPE_UINT64 = 6 
G_FILE_ATTRIBUTE_TYPE_INT64 = 7 
G_FILE_ATTRIBUTE_TYPE_OBJECT = 8 
G_FILE_ATTRIBUTE_TYPE_STRINGV = 9 

G_FILE_ATTRIBUTE_INFO_NONE = 0 
G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE = 1 
G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED = 2 

G_FILE_ATTRIBUTE_STATUS_UNSET = 0 
G_FILE_ATTRIBUTE_STATUS_SET = 1 
G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING = 2 

G_FILE_QUERY_INFO_NONE = 0 
G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS = 1 

G_FILE_CREATE_NONE = 0 
G_FILE_CREATE_PRIVATE = 1 
G_FILE_CREATE_REPLACE_DESTINATION = 2 

G_MOUNT_MOUNT_NONE = 0 

G_MOUNT_UNMOUNT_NONE = 0 
G_MOUNT_UNMOUNT_FORCE = 1 

G_DRIVE_START_NONE = 0 

G_DRIVE_START_STOP_TYPE_UNKNOWN = 0 
G_DRIVE_START_STOP_TYPE_SHUTDOWN = 1 
G_DRIVE_START_STOP_TYPE_NETWORK = 2 
G_DRIVE_START_STOP_TYPE_MULTIDISK = 3 
G_DRIVE_START_STOP_TYPE_PASSWORD = 4 

G_FILE_COPY_NONE = 0 
G_FILE_COPY_OVERWRITE = 1 
G_FILE_COPY_BACKUP = 2 
G_FILE_COPY_NOFOLLOW_SYMLINKS = 4 
G_FILE_COPY_ALL_METADATA = 8 
G_FILE_COPY_NO_FALLBACK_FOR_MOVE = 16 
G_FILE_COPY_TARGET_DEFAULT_PERMS = 32 

G_FILE_MONITOR_NONE = 0 
G_FILE_MONITOR_WATCH_MOUNTS = 1 
G_FILE_MONITOR_SEND_MOVED = 2 

G_FILE_TYPE_UNKNOWN = 0 
G_FILE_TYPE_REGULAR = 1 
G_FILE_TYPE_DIRECTORY = 2 
G_FILE_TYPE_SYMBOLIC_LINK = 3 
G_FILE_TYPE_SPECIAL = 4 
G_FILE_TYPE_SHORTCUT = 5 
G_FILE_TYPE_MOUNTABLE = 6 

G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS = 0 
G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL = 1 
G_FILESYSTEM_PREVIEW_TYPE_NEVER = 2 

G_FILE_MONITOR_EVENT_CHANGED = 0 
G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT = 1 
G_FILE_MONITOR_EVENT_DELETED = 2 
G_FILE_MONITOR_EVENT_CREATED = 3 
G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED = 4 
G_FILE_MONITOR_EVENT_PRE_UNMOUNT = 5 
G_FILE_MONITOR_EVENT_UNMOUNTED = 6 
G_FILE_MONITOR_EVENT_MOVED = 7 

G_IO_ERROR_FAILED = 0 
G_IO_ERROR_NOT_FOUND = 1 
G_IO_ERROR_EXISTS = 2 
G_IO_ERROR_IS_DIRECTORY = 3 
G_IO_ERROR_NOT_DIRECTORY = 4 
G_IO_ERROR_NOT_EMPTY = 5 
G_IO_ERROR_NOT_REGULAR_FILE = 6 
G_IO_ERROR_NOT_SYMBOLIC_LINK = 7 
G_IO_ERROR_NOT_MOUNTABLE_FILE = 8 
G_IO_ERROR_FILENAME_TOO_LONG = 9 
G_IO_ERROR_INVALID_FILENAME = 10 
G_IO_ERROR_TOO_MANY_LINKS = 11 
G_IO_ERROR_NO_SPACE = 12 
G_IO_ERROR_INVALID_ARGUMENT = 13 
G_IO_ERROR_PERMISSION_DENIED = 14 
G_IO_ERROR_NOT_SUPPORTED = 15 
G_IO_ERROR_NOT_MOUNTED = 16 
G_IO_ERROR_ALREADY_MOUNTED = 17 
G_IO_ERROR_CLOSED = 18 
G_IO_ERROR_CANCELLED = 19 
G_IO_ERROR_PENDING = 20 
G_IO_ERROR_READ_ONLY = 21 
G_IO_ERROR_CANT_CREATE_BACKUP = 22 
G_IO_ERROR_WRONG_ETAG = 23 
G_IO_ERROR_TIMED_OUT = 24 
G_IO_ERROR_WOULD_RECURSE = 25 
G_IO_ERROR_BUSY = 26 
G_IO_ERROR_WOULD_BLOCK = 27 
G_IO_ERROR_HOST_NOT_FOUND = 28 
G_IO_ERROR_WOULD_MERGE = 29 
G_IO_ERROR_FAILED_HANDLED = 30 
G_IO_ERROR_TOO_MANY_OPEN_FILES = 31 
G_IO_ERROR_NOT_INITIALIZED = 32 
G_IO_ERROR_ADDRESS_IN_USE = 33 
G_IO_ERROR_PARTIAL_INPUT = 34 
G_IO_ERROR_INVALID_DATA = 35 
G_IO_ERROR_DBUS_ERROR = 36 
G_IO_ERROR_HOST_UNREACHABLE = 37 
G_IO_ERROR_NETWORK_UNREACHABLE = 38 
G_IO_ERROR_CONNECTION_REFUSED = 39 
G_IO_ERROR_PROXY_FAILED = 40 
G_IO_ERROR_PROXY_AUTH_FAILED = 41 
G_IO_ERROR_PROXY_NEED_AUTH = 42 
G_IO_ERROR_PROXY_NOT_ALLOWED = 43 

G_ASK_PASSWORD_NEED_PASSWORD = 1 
G_ASK_PASSWORD_NEED_USERNAME = 2 
G_ASK_PASSWORD_NEED_DOMAIN = 4 
G_ASK_PASSWORD_SAVING_SUPPORTED = 8 
G_ASK_PASSWORD_ANONYMOUS_SUPPORTED = 16 

G_PASSWORD_SAVE_NEVER = 0 
G_PASSWORD_SAVE_FOR_SESSION = 1 
G_PASSWORD_SAVE_PERMANENTLY = 2 

G_MOUNT_OPERATION_HANDLED = 0 
G_MOUNT_OPERATION_ABORTED = 1 
G_MOUNT_OPERATION_UNHANDLED = 2 

G_OUTPUT_STREAM_SPLICE_NONE = 0 
G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE = 1 
G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET = 2 

G_IO_STREAM_SPLICE_NONE = 0 
G_IO_STREAM_SPLICE_CLOSE_STREAM1 = 1 
G_IO_STREAM_SPLICE_CLOSE_STREAM2 = 2 
G_IO_STREAM_SPLICE_WAIT_FOR_BOTH = 4 

G_EMBLEM_ORIGIN_UNKNOWN = 0 
G_EMBLEM_ORIGIN_DEVICE = 1 
G_EMBLEM_ORIGIN_LIVEMETADATA = 2 
G_EMBLEM_ORIGIN_TAG = 3 

G_RESOLVER_ERROR_NOT_FOUND = 0 
G_RESOLVER_ERROR_TEMPORARY_FAILURE = 1 
G_RESOLVER_ERROR_INTERNAL = 2 

G_RESOURCE_ERROR_NOT_FOUND = 0 
G_RESOURCE_ERROR_INTERNAL = 1 

G_RESOURCE_FLAGS_NONE = 0 
G_RESOURCE_FLAGS_COMPRESSED = 1 

G_RESOURCE_LOOKUP_FLAGS_NONE = 0 

G_SOCKET_FAMILY_INVALID = 0 
G_SOCKET_FAMILY_UNIX = 1 
G_SOCKET_FAMILY_IPV4 = 2 
G_SOCKET_FAMILY_IPV6 = 10 

G_SOCKET_TYPE_INVALID = 0 
G_SOCKET_TYPE_STREAM = 1 
G_SOCKET_TYPE_DATAGRAM = 2 
G_SOCKET_TYPE_SEQPACKET = 3 

G_SOCKET_MSG_NONE = 0 
G_SOCKET_MSG_OOB = 1 
G_SOCKET_MSG_PEEK = 2 
G_SOCKET_MSG_DONTROUTE = 4 

G_SOCKET_PROTOCOL_UNKNOWN = -1 
G_SOCKET_PROTOCOL_DEFAULT = 0 
G_SOCKET_PROTOCOL_TCP = 6 
G_SOCKET_PROTOCOL_UDP = 17 
G_SOCKET_PROTOCOL_SCTP = 132 

G_ZLIB_COMPRESSOR_FORMAT_ZLIB = 0 
G_ZLIB_COMPRESSOR_FORMAT_GZIP = 1 
G_ZLIB_COMPRESSOR_FORMAT_RAW = 2 

G_UNIX_SOCKET_ADDRESS_INVALID = 0 
G_UNIX_SOCKET_ADDRESS_ANONYMOUS = 1 
G_UNIX_SOCKET_ADDRESS_PATH = 2 
G_UNIX_SOCKET_ADDRESS_ABSTRACT = 3 
G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED = 4 

G_BUS_TYPE_STARTER = -1 
G_BUS_TYPE_NONE = 0 
G_BUS_TYPE_SYSTEM = 1 
G_BUS_TYPE_SESSION = 2 

G_BUS_NAME_OWNER_FLAGS_NONE = 0 
G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT = 1 
G_BUS_NAME_OWNER_FLAGS_REPLACE = 2 

G_BUS_NAME_WATCHER_FLAGS_NONE = 0 
G_BUS_NAME_WATCHER_FLAGS_AUTO_START = 1 

G_DBUS_PROXY_FLAGS_NONE = 0 
G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES = 1 
G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS = 2 
G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START = 4 
G_DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES = 8 

G_DBUS_ERROR_FAILED = 0 
G_DBUS_ERROR_NO_MEMORY = 1 
G_DBUS_ERROR_SERVICE_UNKNOWN = 2 
G_DBUS_ERROR_NAME_HAS_NO_OWNER = 3 
G_DBUS_ERROR_NO_REPLY = 4 
G_DBUS_ERROR_IO_ERROR = 5 
G_DBUS_ERROR_BAD_ADDRESS = 6 
G_DBUS_ERROR_NOT_SUPPORTED = 7 
G_DBUS_ERROR_LIMITS_EXCEEDED = 8 
G_DBUS_ERROR_ACCESS_DENIED = 9 
G_DBUS_ERROR_AUTH_FAILED = 10 
G_DBUS_ERROR_NO_SERVER = 11 
G_DBUS_ERROR_TIMEOUT = 12 
G_DBUS_ERROR_NO_NETWORK = 13 
G_DBUS_ERROR_ADDRESS_IN_USE = 14 
G_DBUS_ERROR_DISCONNECTED = 15 
G_DBUS_ERROR_INVALID_ARGS = 16 
G_DBUS_ERROR_FILE_NOT_FOUND = 17 
G_DBUS_ERROR_FILE_EXISTS = 18 
G_DBUS_ERROR_UNKNOWN_METHOD = 19 
G_DBUS_ERROR_TIMED_OUT = 20 
G_DBUS_ERROR_MATCH_RULE_NOT_FOUND = 21 
G_DBUS_ERROR_MATCH_RULE_INVALID = 22 
G_DBUS_ERROR_SPAWN_EXEC_FAILED = 23 
G_DBUS_ERROR_SPAWN_FORK_FAILED = 24 
G_DBUS_ERROR_SPAWN_CHILD_EXITED = 25 
G_DBUS_ERROR_SPAWN_CHILD_SIGNALED = 26 
G_DBUS_ERROR_SPAWN_FAILED = 27 
G_DBUS_ERROR_SPAWN_SETUP_FAILED = 28 
G_DBUS_ERROR_SPAWN_CONFIG_INVALID = 29 
G_DBUS_ERROR_SPAWN_SERVICE_INVALID = 30 
G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND = 31 
G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID = 32 
G_DBUS_ERROR_SPAWN_FILE_INVALID = 33 
G_DBUS_ERROR_SPAWN_NO_MEMORY = 34 
G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN = 35 
G_DBUS_ERROR_INVALID_SIGNATURE = 36 
G_DBUS_ERROR_INVALID_FILE_CONTENT = 37 
G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN = 38 
G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN = 39 
G_DBUS_ERROR_OBJECT_PATH_IN_USE = 40 

G_DBUS_CONNECTION_FLAGS_NONE = 0 
G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT = 1 
G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER = 2 
G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = 4 
G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION = 8 
G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING = 16 

G_DBUS_CAPABILITY_FLAGS_NONE = 0 
G_DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING = 1 

G_DBUS_CALL_FLAGS_NONE = 0 
G_DBUS_CALL_FLAGS_NO_AUTO_START = 1 

G_DBUS_MESSAGE_TYPE_INVALID = 0 
G_DBUS_MESSAGE_TYPE_METHOD_CALL = 1 
G_DBUS_MESSAGE_TYPE_METHOD_RETURN = 2 
G_DBUS_MESSAGE_TYPE_ERROR = 3 
G_DBUS_MESSAGE_TYPE_SIGNAL = 4 

G_DBUS_MESSAGE_FLAGS_NONE = 0 
G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED = 1 
G_DBUS_MESSAGE_FLAGS_NO_AUTO_START = 2 

G_DBUS_MESSAGE_HEADER_FIELD_INVALID = 0 
G_DBUS_MESSAGE_HEADER_FIELD_PATH = 1 
G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE = 2 
G_DBUS_MESSAGE_HEADER_FIELD_MEMBER = 3 
G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME = 4 
G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL = 5 
G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION = 6 
G_DBUS_MESSAGE_HEADER_FIELD_SENDER = 7 
G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE = 8 
G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS = 9 

G_DBUS_PROPERTY_INFO_FLAGS_NONE = 0 
G_DBUS_PROPERTY_INFO_FLAGS_READABLE = 1 
G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE = 2 

G_DBUS_SUBTREE_FLAGS_NONE = 0 
G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES = 1 

G_DBUS_SERVER_FLAGS_NONE = 0 
G_DBUS_SERVER_FLAGS_RUN_IN_THREAD = 1 
G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = 2 

G_DBUS_SIGNAL_FLAGS_NONE = 0 
G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE = 1 

G_DBUS_SEND_MESSAGE_FLAGS_NONE = 0 
G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL = 1 

G_CREDENTIALS_TYPE_INVALID = 0 
G_CREDENTIALS_TYPE_LINUX_UCRED = 1 
G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED = 2 
G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED = 3 

G_DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN = "B" 
G_DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN = "l" 

G_APPLICATION_FLAGS_NONE = 0 
G_APPLICATION_IS_SERVICE = 1 
G_APPLICATION_IS_LAUNCHER = 2 
G_APPLICATION_HANDLES_OPEN = 4 
G_APPLICATION_HANDLES_COMMAND_LINE = 8 
G_APPLICATION_SEND_ENVIRONMENT = 16 
G_APPLICATION_NON_UNIQUE = 32 

G_TLS_ERROR_UNAVAILABLE = 0 
G_TLS_ERROR_MISC = 1 
G_TLS_ERROR_BAD_CERTIFICATE = 2 
G_TLS_ERROR_NOT_TLS = 3 
G_TLS_ERROR_HANDSHAKE = 4 
G_TLS_ERROR_CERTIFICATE_REQUIRED = 5 
G_TLS_ERROR_EOF = 6 

G_TLS_CERTIFICATE_UNKNOWN_CA = 1 
G_TLS_CERTIFICATE_BAD_IDENTITY = 2 
G_TLS_CERTIFICATE_NOT_ACTIVATED = 4 
G_TLS_CERTIFICATE_EXPIRED = 8 
G_TLS_CERTIFICATE_REVOKED = 16 
G_TLS_CERTIFICATE_INSECURE = 32 
G_TLS_CERTIFICATE_GENERIC_ERROR = 64 
G_TLS_CERTIFICATE_VALIDATE_ALL = 127 

G_TLS_AUTHENTICATION_NONE = 0 
G_TLS_AUTHENTICATION_REQUESTED = 1 
G_TLS_AUTHENTICATION_REQUIRED = 2 

G_TLS_REHANDSHAKE_NEVER = 0 
G_TLS_REHANDSHAKE_SAFELY = 1 
G_TLS_REHANDSHAKE_UNSAFELY = 2 

GTlsPasswordFlags = { 
	"G_TLS_PASSWORD_NONE" : 0, 
	"G_TLS_PASSWORD_RETRY" : 2, 
	"G_TLS_PASSWORD_MANY_TRIES" : 4, 
	"G_TLS_PASSWORD_FINAL_TRY" : 8, 
}

G_TLS_INTERACTION_UNHANDLED = 0 
G_TLS_INTERACTION_HANDLED = 1 
G_TLS_INTERACTION_FAILED = 2 

G_DBUS_INTERFACE_SKELETON_FLAGS_NONE = 0 
G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD = 1 

G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE = 0 
G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START = 1 

G_TLS_DATABASE_VERIFY_NONE = 0 

G_TLS_DATABASE_LOOKUP_NONE = 0 
G_TLS_DATABASE_LOOKUP_KEYPAIR = 1 

G_IO_MODULE_SCOPE_NONE = 0 
G_IO_MODULE_SCOPE_BLOCK_DUPLICATES = 1 

G_SOCKET_CLIENT_RESOLVING = 0 
G_SOCKET_CLIENT_RESOLVED = 1 
G_SOCKET_CLIENT_CONNECTING = 2 
G_SOCKET_CLIENT_CONNECTED = 3 
G_SOCKET_CLIENT_PROXY_NEGOTIATING = 4 
G_SOCKET_CLIENT_PROXY_NEGOTIATED = 5 
G_SOCKET_CLIENT_TLS_HANDSHAKING = 6 
G_SOCKET_CLIENT_TLS_HANDSHAKED = 7 
G_SOCKET_CLIENT_COMPLETE = 8 

PC_LINK_MAX = 0 
PC_MAX_CANON = 1 
PC_MAX_INPUT = 2 
PC_NAME_MAX = 3 
PC_PATH_MAX = 4 
PC_PIPE_BUF = 5 
PC_CHOWN_RESTRICTED = 6 
PC_NO_TRUNC = 7 
PC_VDISABLE = 8 
PC_SYNC_IO = 9 
PC_ASYNC_IO = 10 
PC_PRIO_IO = 11 
PC_SOCK_MAXBUF = 12 
PC_FILESIZEBITS = 13 
PC_REC_INCR_XFER_SIZE = 14 
PC_REC_MAX_XFER_SIZE = 15 
PC_REC_MIN_XFER_SIZE = 16 
PC_REC_XFER_ALIGN = 17 
PC_ALLOC_SIZE_MIN = 18 
PC_SYMLINK_MAX = 19 
PC_2_SYMLINKS = 20 

SC_ARG_MAX = 0 
SC_CHILD_MAX = 1 
SC_CLK_TCK = 2 
SC_NGROUPS_MAX = 3 
SC_OPEN_MAX = 4 
SC_STREAM_MAX = 5 
SC_TZNAME_MAX = 6 
SC_JOB_CONTROL = 7 
SC_SAVED_IDS = 8 
SC_REALTIME_SIGNALS = 9 
SC_PRIORITY_SCHEDULING = 10 
SC_TIMERS = 11 
SC_ASYNCHRONOUS_IO = 12 
SC_PRIORITIZED_IO = 13 
SC_SYNCHRONIZED_IO = 14 
SC_FSYNC = 15 
SC_MAPPED_FILES = 16 
SC_MEMLOCK = 17 
SC_MEMLOCK_RANGE = 18 
SC_MEMORY_PROTECTION = 19 
SC_MESSAGE_PASSING = 20 
SC_SEMAPHORES = 21 
SC_SHARED_MEMORY_OBJECTS = 22 
SC_AIO_LISTIO_MAX = 23 
SC_AIO_MAX = 24 
SC_AIO_PRIO_DELTA_MAX = 25 
SC_DELAYTIMER_MAX = 26 
SC_MQ_OPEN_MAX = 27 
SC_MQ_PRIO_MAX = 28 
SC_VERSION = 29 
SC_PAGESIZE = 30 
SC_RTSIG_MAX = 31 
SC_SEM_NSEMS_MAX = 32 
SC_SEM_VALUE_MAX = 33 
SC_SIGQUEUE_MAX = 34 
SC_TIMER_MAX = 35 
SC_BC_BASE_MAX = 36 
SC_BC_DIM_MAX = 37 
SC_BC_SCALE_MAX = 38 
SC_BC_STRING_MAX = 39 
SC_COLL_WEIGHTS_MAX = 40 
SC_EQUIV_CLASS_MAX = 41 
SC_EXPR_NEST_MAX = 42 
SC_LINE_MAX = 43 
SC_RE_DUP_MAX = 44 
SC_CHARCLASS_NAME_MAX = 45 
SC_2_VERSION = 46 
SC_2_C_BIND = 47 
SC_2_C_DEV = 48 
SC_2_FORT_DEV = 49 
SC_2_FORT_RUN = 50 
SC_2_SW_DEV = 51 
SC_2_LOCALEDEF = 52 
SC_PII = 53 
SC_PII_XTI = 54 
SC_PII_SOCKET = 55 
SC_PII_INTERNET = 56 
SC_PII_OSI = 57 
SC_POLL = 58 
SC_SELECT = 59 
SC_UIO_MAXIOV = 60 
SC_IOV_MAX = 60 
SC_PII_INTERNET_STREAM = 61 
SC_PII_INTERNET_DGRAM = 62 
SC_PII_OSI_COTS = 63 
SC_PII_OSI_CLTS = 64 
SC_PII_OSI_M = 65 
SC_T_IOV_MAX = 66 
SC_THREADS = 67 
SC_THREAD_SAFE_FUNCTIONS = 68 
SC_GETGR_R_SIZE_MAX = 69 
SC_GETPW_R_SIZE_MAX = 70 
SC_LOGIN_NAME_MAX = 71 
SC_TTY_NAME_MAX = 72 
SC_THREAD_DESTRUCTOR_ITERATIONS = 73 
SC_THREAD_KEYS_MAX = 74 
SC_THREAD_STACK_MIN = 75 
SC_THREAD_THREADS_MAX = 76 
SC_THREAD_ATTR_STACKADDR = 77 
SC_THREAD_ATTR_STACKSIZE = 78 
SC_THREAD_PRIORITY_SCHEDULING = 79 
SC_THREAD_PRIO_INHERIT = 80 
SC_THREAD_PRIO_PROTECT = 81 
SC_THREAD_PROCESS_SHARED = 82 
SC_NPROCESSORS_CONF = 83 
SC_NPROCESSORS_ONLN = 84 
SC_PHYS_PAGES = 85 
SC_AVPHYS_PAGES = 86 
SC_ATEXIT_MAX = 87 
SC_PASS_MAX = 88 
SC_XOPEN_VERSION = 89 
SC_XOPEN_XCU_VERSION = 90 
SC_XOPEN_UNIX = 91 
SC_XOPEN_CRYPT = 92 
SC_XOPEN_ENH_I18N = 93 
SC_XOPEN_SHM = 94 
SC_2_CHAR_TERM = 95 
SC_2_C_VERSION = 96 
SC_2_UPE = 97 
SC_XOPEN_XPG2 = 98 
SC_XOPEN_XPG3 = 99 
SC_XOPEN_XPG4 = 100 
SC_CHAR_BIT = 101 
SC_CHAR_MAX = 102 
SC_CHAR_MIN = 103 
SC_INT_MAX = 104 
SC_INT_MIN = 105 
SC_LONG_BIT = 106 
SC_WORD_BIT = 107 
SC_MB_LEN_MAX = 108 
SC_NZERO = 109 
SC_SSIZE_MAX = 110 
SC_SCHAR_MAX = 111 
SC_SCHAR_MIN = 112 
SC_SHRT_MAX = 113 
SC_SHRT_MIN = 114 
SC_UCHAR_MAX = 115 
SC_UINT_MAX = 116 
SC_ULONG_MAX = 117 
SC_USHRT_MAX = 118 
SC_NL_ARGMAX = 119 
SC_NL_LANGMAX = 120 
SC_NL_MSGMAX = 121 
SC_NL_NMAX = 122 
SC_NL_SETMAX = 123 
SC_NL_TEXTMAX = 124 
SC_XBS5_ILP32_OFF32 = 125 
SC_XBS5_ILP32_OFFBIG = 126 
SC_XBS5_LP64_OFF64 = 127 
SC_XBS5_LPBIG_OFFBIG = 128 
SC_XOPEN_LEGACY = 129 
SC_XOPEN_REALTIME = 130 
SC_XOPEN_REALTIME_THREADS = 131 
SC_ADVISORY_INFO = 132 
SC_BARRIERS = 133 
SC_BASE = 134 
SC_C_LANG_SUPPORT = 135 
SC_C_LANG_SUPPORT_R = 136 
SC_CLOCK_SELECTION = 137 
SC_CPUTIME = 138 
SC_THREAD_CPUTIME = 139 
SC_DEVICE_IO = 140 
SC_DEVICE_SPECIFIC = 141 
SC_DEVICE_SPECIFIC_R = 142 
SC_FD_MGMT = 143 
SC_FIFO = 144 
SC_PIPE = 145 
SC_FILE_ATTRIBUTES = 146 
SC_FILE_LOCKING = 147 
SC_FILE_SYSTEM = 148 
SC_MONOTONIC_CLOCK = 149 
SC_MULTI_PROCESS = 150 
SC_SINGLE_PROCESS = 151 
SC_NETWORKING = 152 
SC_READER_WRITER_LOCKS = 153 
SC_SPIN_LOCKS = 154 
SC_REGEXP = 155 
SC_REGEX_VERSION = 156 
SC_SHELL = 157 
SC_SIGNALS = 158 
SC_SPAWN = 159 
SC_SPORADIC_SERVER = 160 
SC_THREAD_SPORADIC_SERVER = 161 
SC_SYSTEM_DATABASE = 162 
SC_SYSTEM_DATABASE_R = 163 
SC_TIMEOUTS = 164 
SC_TYPED_MEMORY_OBJECTS = 165 
SC_USER_GROUPS = 166 
SC_USER_GROUPS_R = 167 
SC_2_PBS = 168 
SC_2_PBS_ACCOUNTING = 169 
SC_2_PBS_LOCATE = 170 
SC_2_PBS_MESSAGE = 171 
SC_2_PBS_TRACK = 172 
SC_SYMLOOP_MAX = 173 
SC_STREAMS = 174 
SC_2_PBS_CHECKPOINT = 175 
SC_V6_ILP32_OFF32 = 176 
SC_V6_ILP32_OFFBIG = 177 
SC_V6_LP64_OFF64 = 178 
SC_V6_LPBIG_OFFBIG = 179 
SC_HOST_NAME_MAX = 180 
SC_TRACE = 181 
SC_TRACE_EVENT_FILTER = 182 
SC_TRACE_INHERIT = 183 
SC_TRACE_LOG = 184 
SC_LEVEL1_ICACHE_SIZE = 185 
SC_LEVEL1_ICACHE_ASSOC = 186 
SC_LEVEL1_ICACHE_LINESIZE = 187 
SC_LEVEL1_DCACHE_SIZE = 188 
SC_LEVEL1_DCACHE_ASSOC = 189 
SC_LEVEL1_DCACHE_LINESIZE = 190 
SC_LEVEL2_CACHE_SIZE = 191 
SC_LEVEL2_CACHE_ASSOC = 192 
SC_LEVEL2_CACHE_LINESIZE = 193 
SC_LEVEL3_CACHE_SIZE = 194 
SC_LEVEL3_CACHE_ASSOC = 195 
SC_LEVEL3_CACHE_LINESIZE = 196 
SC_LEVEL4_CACHE_SIZE = 197 
SC_LEVEL4_CACHE_ASSOC = 198 
SC_LEVEL4_CACHE_LINESIZE = 199 
SC_IPV6 = 265 
SC_RAW_SOCKETS = 266 
SC_V7_ILP32_OFF32 = 267 
SC_V7_ILP32_OFFBIG = 268 
SC_V7_LP64_OFF64 = 269 
SC_V7_LPBIG_OFFBIG = 270 
SC_SS_REPL_MAX = 271 
SC_TRACE_EVENT_NAME_MAX = 272 
SC_TRACE_NAME_MAX = 273 
SC_TRACE_SYS_MAX = 274 
SC_TRACE_USER_EVENT_MAX = 275 
SC_XOPEN_STREAMS = 276 
SC_THREAD_ROBUST_PRIO_INHERIT = 277 
SC_THREAD_ROBUST_PRIO_PROTECT = 278 

CS_PATH = 0 
CS_V6_WIDTH_RESTRICTED_ENVS = 1 
CS_GNU_LIBC_VERSION = 2 
CS_GNU_LIBPTHREAD_VERSION = 3 
CS_V5_WIDTH_RESTRICTED_ENVS = 4 
CS_V7_WIDTH_RESTRICTED_ENVS = 5 
CS_LFS_CFLAGS = 1000 
CS_LFS_LDFLAGS = 1001 
CS_LFS_LIBS = 1002 
CS_LFS_LINTFLAGS = 1003 
CS_LFS64_CFLAGS = 1004 
CS_LFS64_LDFLAGS = 1005 
CS_LFS64_LIBS = 1006 
CS_LFS64_LINTFLAGS = 1007 
CS_XBS5_ILP32_OFF32_CFLAGS = 1100 
CS_XBS5_ILP32_OFF32_LDFLAGS = 1101 
CS_XBS5_ILP32_OFF32_LIBS = 1102 
CS_XBS5_ILP32_OFF32_LINTFLAGS = 1103 
CS_XBS5_ILP32_OFFBIG_CFLAGS = 1104 
CS_XBS5_ILP32_OFFBIG_LDFLAGS = 1105 
CS_XBS5_ILP32_OFFBIG_LIBS = 1106 
CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 1107 
CS_XBS5_LP64_OFF64_CFLAGS = 1108 
CS_XBS5_LP64_OFF64_LDFLAGS = 1109 
CS_XBS5_LP64_OFF64_LIBS = 1110 
CS_XBS5_LP64_OFF64_LINTFLAGS = 1111 
CS_XBS5_LPBIG_OFFBIG_CFLAGS = 1112 
CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 1113 
CS_XBS5_LPBIG_OFFBIG_LIBS = 1114 
CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 1115 
CS_POSIX_V6_ILP32_OFF32_CFLAGS = 1116 
CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 1117 
CS_POSIX_V6_ILP32_OFF32_LIBS = 1118 
CS_POSIX_V6_ILP32_OFF32_LINTFLAGS = 1119 
CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 1120 
CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 1121 
CS_POSIX_V6_ILP32_OFFBIG_LIBS = 1122 
CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS = 1123 
CS_POSIX_V6_LP64_OFF64_CFLAGS = 1124 
CS_POSIX_V6_LP64_OFF64_LDFLAGS = 1125 
CS_POSIX_V6_LP64_OFF64_LIBS = 1126 
CS_POSIX_V6_LP64_OFF64_LINTFLAGS = 1127 
CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 1128 
CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 1129 
CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 1130 
CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS = 1131 
CS_POSIX_V7_ILP32_OFF32_CFLAGS = 1132 
CS_POSIX_V7_ILP32_OFF32_LDFLAGS = 1133 
CS_POSIX_V7_ILP32_OFF32_LIBS = 1134 
CS_POSIX_V7_ILP32_OFF32_LINTFLAGS = 1135 
CS_POSIX_V7_ILP32_OFFBIG_CFLAGS = 1136 
CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS = 1137 
CS_POSIX_V7_ILP32_OFFBIG_LIBS = 1138 
CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS = 1139 
CS_POSIX_V7_LP64_OFF64_CFLAGS = 1140 
CS_POSIX_V7_LP64_OFF64_LDFLAGS = 1141 
CS_POSIX_V7_LP64_OFF64_LIBS = 1142 
CS_POSIX_V7_LP64_OFF64_LINTFLAGS = 1143 
CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS = 1144 
CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS = 1145 
CS_POSIX_V7_LPBIG_OFFBIG_LIBS = 1146 
CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS = 1147 
CS_V6_ENV = 1148 
CS_V7_ENV = 1149 

G_MODULE_BIND_LAZY = 1 
G_MODULE_BIND_LOCAL = 2 
G_MODULE_BIND_MASK = 3 

G_SETTINGS_BIND_DEFAULT = 0 
G_SETTINGS_BIND_GET = 1 
G_SETTINGS_BIND_SET = 2 
G_SETTINGS_BIND_NO_SENSITIVITY = 4 
G_SETTINGS_BIND_GET_NO_CHANGES = 8 
G_SETTINGS_BIND_INVERT_BOOLEAN = 16 

## simple enums ##
RPYTHONIC_GLOBAL_ENUMS = { 
 "G_THREAD_ERROR_AGAIN" : 0, 
 "G_ONCE_STATUS_NOTCALLED" : 0,  "G_ONCE_STATUS_PROGRESS" : 1,  "G_ONCE_STATUS_READY" : 2, 
 "SI_ASYNCNL" : -60,  "SI_TKILL" : -6,  "SI_SIGIO" : -5,  "SI_ASYNCIO" : -4,  "SI_MESGQ" : -3,  "SI_TIMER" : -2,  "SI_QUEUE" : -1,  "SI_USER" : 0,  "SI_KERNEL" : 128, 
 "ILL_ILLOPC" : 1,  "ILL_ILLOPN" : 2,  "ILL_ILLADR" : 3,  "ILL_ILLTRP" : 4,  "ILL_PRVOPC" : 5,  "ILL_PRVREG" : 6,  "ILL_COPROC" : 7,  "ILL_BADSTK" : 8, 
 "FPE_INTDIV" : 1,  "FPE_INTOVF" : 2,  "FPE_FLTDIV" : 3,  "FPE_FLTOVF" : 4,  "FPE_FLTUND" : 5,  "FPE_FLTRES" : 6,  "FPE_FLTINV" : 7,  "FPE_FLTSUB" : 8, 
 "SEGV_MAPERR" : 1,  "SEGV_ACCERR" : 2, 
 "BUS_ADRALN" : 1,  "BUS_ADRERR" : 2,  "BUS_OBJERR" : 3, 
 "TRAP_BRKPT" : 1,  "TRAP_TRACE" : 2, 
 "CLD_EXITED" : 1,  "CLD_KILLED" : 2,  "CLD_DUMPED" : 3,  "CLD_TRAPPED" : 4,  "CLD_STOPPED" : 5,  "CLD_CONTINUED" : 6, 
 "POLL_IN" : 1,  "POLL_OUT" : 2,  "POLL_MSG" : 3,  "POLL_ERR" : 4,  "POLL_PRI" : 5,  "POLL_HUP" : 6, 
 "SIGEV_SIGNAL" : 0,  "SIGEV_NONE" : 1,  "SIGEV_THREAD" : 2,  "SIGEV_THREAD_ID" : 4, 
 "SS_ONSTACK" : 1,  "SS_DISABLE" : 2, 
 "G_BOOKMARK_FILE_ERROR_INVALID_URI" : 0,  "G_BOOKMARK_FILE_ERROR_INVALID_VALUE" : 1,  "G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED" : 2,  "G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND" : 3,  "G_BOOKMARK_FILE_ERROR_READ" : 4,  "G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING" : 5,  "G_BOOKMARK_FILE_ERROR_WRITE" : 6,  "G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND" : 7, 
 "G_CHECKSUM_MD5" : 0,  "G_CHECKSUM_SHA1" : 1,  "G_CHECKSUM_SHA256" : 2, 
 "G_CONVERT_ERROR_NO_CONVERSION" : 0,  "G_CONVERT_ERROR_ILLEGAL_SEQUENCE" : 1,  "G_CONVERT_ERROR_FAILED" : 2,  "G_CONVERT_ERROR_PARTIAL_INPUT" : 3,  "G_CONVERT_ERROR_BAD_URI" : 4,  "G_CONVERT_ERROR_NOT_ABSOLUTE_PATH" : 5, 
 "G_DATE_DAY" : 0,  "G_DATE_MONTH" : 1,  "G_DATE_YEAR" : 2, 
 "G_DATE_BAD_WEEKDAY" : 0,  "G_DATE_MONDAY" : 1,  "G_DATE_TUESDAY" : 2,  "G_DATE_WEDNESDAY" : 3,  "G_DATE_THURSDAY" : 4,  "G_DATE_FRIDAY" : 5,  "G_DATE_SATURDAY" : 6,  "G_DATE_SUNDAY" : 7, 
 "G_DATE_BAD_MONTH" : 0,  "G_DATE_JANUARY" : 1,  "G_DATE_FEBRUARY" : 2,  "G_DATE_MARCH" : 3,  "G_DATE_APRIL" : 4,  "G_DATE_MAY" : 5,  "G_DATE_JUNE" : 6,  "G_DATE_JULY" : 7,  "G_DATE_AUGUST" : 8,  "G_DATE_SEPTEMBER" : 9,  "G_DATE_OCTOBER" : 10,  "G_DATE_NOVEMBER" : 11,  "G_DATE_DECEMBER" : 12, 
 "G_TIME_TYPE_STANDARD" : 0,  "G_TIME_TYPE_DAYLIGHT" : 1,  "G_TIME_TYPE_UNIVERSAL" : 2, 
 "G_FILE_ERROR_EXIST" : 0,  "G_FILE_ERROR_ISDIR" : 1,  "G_FILE_ERROR_ACCES" : 2,  "G_FILE_ERROR_NAMETOOLONG" : 3,  "G_FILE_ERROR_NOENT" : 4,  "G_FILE_ERROR_NOTDIR" : 5,  "G_FILE_ERROR_NXIO" : 6,  "G_FILE_ERROR_NODEV" : 7,  "G_FILE_ERROR_ROFS" : 8,  "G_FILE_ERROR_TXTBSY" : 9,  "G_FILE_ERROR_FAULT" : 10,  "G_FILE_ERROR_LOOP" : 11,  "G_FILE_ERROR_NOSPC" : 12,  "G_FILE_ERROR_NOMEM" : 13,  "G_FILE_ERROR_MFILE" : 14,  "G_FILE_ERROR_NFILE" : 15,  "G_FILE_ERROR_BADF" : 16,  "G_FILE_ERROR_INVAL" : 17,  "G_FILE_ERROR_PIPE" : 18,  "G_FILE_ERROR_AGAIN" : 19,  "G_FILE_ERROR_INTR" : 20,  "G_FILE_ERROR_IO" : 21,  "G_FILE_ERROR_PERM" : 22,  "G_FILE_ERROR_NOSYS" : 23,  "G_FILE_ERROR_FAILED" : 24, 
 "G_FILE_TEST_IS_REGULAR" : 1,  "G_FILE_TEST_IS_SYMLINK" : 2,  "G_FILE_TEST_IS_DIR" : 4,  "G_FILE_TEST_IS_EXECUTABLE" : 8,  "G_FILE_TEST_EXISTS" : 16, 
 "G_HOOK_FLAG_ACTIVE" : 1,  "G_HOOK_FLAG_IN_CALL" : 2,  "G_HOOK_FLAG_MASK" : 15, 
 "G_UNICODE_CONTROL" : 0,  "G_UNICODE_FORMAT" : 1,  "G_UNICODE_UNASSIGNED" : 2,  "G_UNICODE_PRIVATE_USE" : 3,  "G_UNICODE_SURROGATE" : 4,  "G_UNICODE_LOWERCASE_LETTER" : 5,  "G_UNICODE_MODIFIER_LETTER" : 6,  "G_UNICODE_OTHER_LETTER" : 7,  "G_UNICODE_TITLECASE_LETTER" : 8,  "G_UNICODE_UPPERCASE_LETTER" : 9,  "G_UNICODE_SPACING_MARK" : 10,  "G_UNICODE_ENCLOSING_MARK" : 11,  "G_UNICODE_NON_SPACING_MARK" : 12,  "G_UNICODE_DECIMAL_NUMBER" : 13,  "G_UNICODE_LETTER_NUMBER" : 14,  "G_UNICODE_OTHER_NUMBER" : 15,  "G_UNICODE_CONNECT_PUNCTUATION" : 16,  "G_UNICODE_DASH_PUNCTUATION" : 17,  "G_UNICODE_CLOSE_PUNCTUATION" : 18,  "G_UNICODE_FINAL_PUNCTUATION" : 19,  "G_UNICODE_INITIAL_PUNCTUATION" : 20,  "G_UNICODE_OTHER_PUNCTUATION" : 21,  "G_UNICODE_OPEN_PUNCTUATION" : 22,  "G_UNICODE_CURRENCY_SYMBOL" : 23,  "G_UNICODE_MODIFIER_SYMBOL" : 24,  "G_UNICODE_MATH_SYMBOL" : 25,  "G_UNICODE_OTHER_SYMBOL" : 26,  "G_UNICODE_LINE_SEPARATOR" : 27,  "G_UNICODE_PARAGRAPH_SEPARATOR" : 28,  "G_UNICODE_SPACE_SEPARATOR" : 29, 
 "G_UNICODE_BREAK_MANDATORY" : 0,  "G_UNICODE_BREAK_CARRIAGE_RETURN" : 1,  "G_UNICODE_BREAK_LINE_FEED" : 2,  "G_UNICODE_BREAK_COMBINING_MARK" : 3,  "G_UNICODE_BREAK_SURROGATE" : 4,  "G_UNICODE_BREAK_ZERO_WIDTH_SPACE" : 5,  "G_UNICODE_BREAK_INSEPARABLE" : 6,  "G_UNICODE_BREAK_NON_BREAKING_GLUE" : 7,  "G_UNICODE_BREAK_CONTINGENT" : 8,  "G_UNICODE_BREAK_SPACE" : 9,  "G_UNICODE_BREAK_AFTER" : 10,  "G_UNICODE_BREAK_BEFORE" : 11,  "G_UNICODE_BREAK_BEFORE_AND_AFTER" : 12,  "G_UNICODE_BREAK_HYPHEN" : 13,  "G_UNICODE_BREAK_NON_STARTER" : 14,  "G_UNICODE_BREAK_OPEN_PUNCTUATION" : 15,  "G_UNICODE_BREAK_CLOSE_PUNCTUATION" : 16,  "G_UNICODE_BREAK_QUOTATION" : 17,  "G_UNICODE_BREAK_EXCLAMATION" : 18,  "G_UNICODE_BREAK_IDEOGRAPHIC" : 19,  "G_UNICODE_BREAK_NUMERIC" : 20,  "G_UNICODE_BREAK_INFIX_SEPARATOR" : 21,  "G_UNICODE_BREAK_SYMBOL" : 22,  "G_UNICODE_BREAK_ALPHABETIC" : 23,  "G_UNICODE_BREAK_PREFIX" : 24,  "G_UNICODE_BREAK_POSTFIX" : 25,  "G_UNICODE_BREAK_COMPLEX_CONTEXT" : 26,  "G_UNICODE_BREAK_AMBIGUOUS" : 27,  "G_UNICODE_BREAK_UNKNOWN" : 28,  "G_UNICODE_BREAK_NEXT_LINE" : 29,  "G_UNICODE_BREAK_WORD_JOINER" : 30,  "G_UNICODE_BREAK_HANGUL_L_JAMO" : 31,  "G_UNICODE_BREAK_HANGUL_V_JAMO" : 32,  "G_UNICODE_BREAK_HANGUL_T_JAMO" : 33,  "G_UNICODE_BREAK_HANGUL_LV_SYLLABLE" : 34,  "G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE" : 35,  "G_UNICODE_BREAK_CLOSE_PARANTHESIS" : 36,  "G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER" : 37,  "G_UNICODE_BREAK_HEBREW_LETTER" : 38, 
 "G_UNICODE_SCRIPT_INVALID_CODE" : -1,  "G_UNICODE_SCRIPT_COMMON" : 0,  "G_UNICODE_SCRIPT_INHERITED" : 1,  "G_UNICODE_SCRIPT_ARABIC" : 2,  "G_UNICODE_SCRIPT_ARMENIAN" : 3,  "G_UNICODE_SCRIPT_BENGALI" : 4,  "G_UNICODE_SCRIPT_BOPOMOFO" : 5,  "G_UNICODE_SCRIPT_CHEROKEE" : 6,  "G_UNICODE_SCRIPT_COPTIC" : 7,  "G_UNICODE_SCRIPT_CYRILLIC" : 8,  "G_UNICODE_SCRIPT_DESERET" : 9,  "G_UNICODE_SCRIPT_DEVANAGARI" : 10,  "G_UNICODE_SCRIPT_ETHIOPIC" : 11,  "G_UNICODE_SCRIPT_GEORGIAN" : 12,  "G_UNICODE_SCRIPT_GOTHIC" : 13,  "G_UNICODE_SCRIPT_GREEK" : 14,  "G_UNICODE_SCRIPT_GUJARATI" : 15,  "G_UNICODE_SCRIPT_GURMUKHI" : 16,  "G_UNICODE_SCRIPT_HAN" : 17,  "G_UNICODE_SCRIPT_HANGUL" : 18,  "G_UNICODE_SCRIPT_HEBREW" : 19,  "G_UNICODE_SCRIPT_HIRAGANA" : 20,  "G_UNICODE_SCRIPT_KANNADA" : 21,  "G_UNICODE_SCRIPT_KATAKANA" : 22,  "G_UNICODE_SCRIPT_KHMER" : 23,  "G_UNICODE_SCRIPT_LAO" : 24,  "G_UNICODE_SCRIPT_LATIN" : 25,  "G_UNICODE_SCRIPT_MALAYALAM" : 26,  "G_UNICODE_SCRIPT_MONGOLIAN" : 27,  "G_UNICODE_SCRIPT_MYANMAR" : 28,  "G_UNICODE_SCRIPT_OGHAM" : 29,  "G_UNICODE_SCRIPT_OLD_ITALIC" : 30,  "G_UNICODE_SCRIPT_ORIYA" : 31,  "G_UNICODE_SCRIPT_RUNIC" : 32,  "G_UNICODE_SCRIPT_SINHALA" : 33,  "G_UNICODE_SCRIPT_SYRIAC" : 34,  "G_UNICODE_SCRIPT_TAMIL" : 35,  "G_UNICODE_SCRIPT_TELUGU" : 36,  "G_UNICODE_SCRIPT_THAANA" : 37,  "G_UNICODE_SCRIPT_THAI" : 38,  "G_UNICODE_SCRIPT_TIBETAN" : 39,  "G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL" : 40,  "G_UNICODE_SCRIPT_YI" : 41,  "G_UNICODE_SCRIPT_TAGALOG" : 42,  "G_UNICODE_SCRIPT_HANUNOO" : 43,  "G_UNICODE_SCRIPT_BUHID" : 44,  "G_UNICODE_SCRIPT_TAGBANWA" : 45,  "G_UNICODE_SCRIPT_BRAILLE" : 46,  "G_UNICODE_SCRIPT_CYPRIOT" : 47,  "G_UNICODE_SCRIPT_LIMBU" : 48,  "G_UNICODE_SCRIPT_OSMANYA" : 49,  "G_UNICODE_SCRIPT_SHAVIAN" : 50,  "G_UNICODE_SCRIPT_LINEAR_B" : 51,  "G_UNICODE_SCRIPT_TAI_LE" : 52,  "G_UNICODE_SCRIPT_UGARITIC" : 53,  "G_UNICODE_SCRIPT_NEW_TAI_LUE" : 54,  "G_UNICODE_SCRIPT_BUGINESE" : 55,  "G_UNICODE_SCRIPT_GLAGOLITIC" : 56,  "G_UNICODE_SCRIPT_TIFINAGH" : 57,  "G_UNICODE_SCRIPT_SYLOTI_NAGRI" : 58,  "G_UNICODE_SCRIPT_OLD_PERSIAN" : 59,  "G_UNICODE_SCRIPT_KHAROSHTHI" : 60,  "G_UNICODE_SCRIPT_UNKNOWN" : 61,  "G_UNICODE_SCRIPT_BALINESE" : 62,  "G_UNICODE_SCRIPT_CUNEIFORM" : 63,  "G_UNICODE_SCRIPT_PHOENICIAN" : 64,  "G_UNICODE_SCRIPT_PHAGS_PA" : 65,  "G_UNICODE_SCRIPT_NKO" : 66,  "G_UNICODE_SCRIPT_KAYAH_LI" : 67,  "G_UNICODE_SCRIPT_LEPCHA" : 68,  "G_UNICODE_SCRIPT_REJANG" : 69,  "G_UNICODE_SCRIPT_SUNDANESE" : 70,  "G_UNICODE_SCRIPT_SAURASHTRA" : 71,  "G_UNICODE_SCRIPT_CHAM" : 72,  "G_UNICODE_SCRIPT_OL_CHIKI" : 73,  "G_UNICODE_SCRIPT_VAI" : 74,  "G_UNICODE_SCRIPT_CARIAN" : 75,  "G_UNICODE_SCRIPT_LYCIAN" : 76,  "G_UNICODE_SCRIPT_LYDIAN" : 77,  "G_UNICODE_SCRIPT_AVESTAN" : 78,  "G_UNICODE_SCRIPT_BAMUM" : 79,  "G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS" : 80,  "G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC" : 81,  "G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI" : 82,  "G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN" : 83,  "G_UNICODE_SCRIPT_JAVANESE" : 84,  "G_UNICODE_SCRIPT_KAITHI" : 85,  "G_UNICODE_SCRIPT_LISU" : 86,  "G_UNICODE_SCRIPT_MEETEI_MAYEK" : 87,  "G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN" : 88,  "G_UNICODE_SCRIPT_OLD_TURKIC" : 89,  "G_UNICODE_SCRIPT_SAMARITAN" : 90,  "G_UNICODE_SCRIPT_TAI_THAM" : 91,  "G_UNICODE_SCRIPT_TAI_VIET" : 92,  "G_UNICODE_SCRIPT_BATAK" : 93,  "G_UNICODE_SCRIPT_BRAHMI" : 94,  "G_UNICODE_SCRIPT_MANDAIC" : 95,  "G_UNICODE_SCRIPT_CHAKMA" : 96,  "G_UNICODE_SCRIPT_MEROITIC_CURSIVE" : 97,  "G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS" : 98,  "G_UNICODE_SCRIPT_MIAO" : 99,  "G_UNICODE_SCRIPT_SHARADA" : 100,  "G_UNICODE_SCRIPT_SORA_SOMPENG" : 101,  "G_UNICODE_SCRIPT_TAKRI" : 102, 
 "G_NORMALIZE_DEFAULT" : 0,  "G_NORMALIZE_NFD" : 0,  "G_NORMALIZE_DEFAULT_COMPOSE" : 1,  "G_NORMALIZE_NFC" : 1,  "G_NORMALIZE_ALL" : 2,  "G_NORMALIZE_NFKD" : 2,  "G_NORMALIZE_ALL_COMPOSE" : 3,  "G_NORMALIZE_NFKC" : 3, 
 "G_USER_DIRECTORY_DESKTOP" : 0,  "G_USER_DIRECTORY_DOCUMENTS" : 1,  "G_USER_DIRECTORY_DOWNLOAD" : 2,  "G_USER_DIRECTORY_MUSIC" : 3,  "G_USER_DIRECTORY_PICTURES" : 4,  "G_USER_DIRECTORY_PUBLIC_SHARE" : 5,  "G_USER_DIRECTORY_TEMPLATES" : 6,  "G_USER_DIRECTORY_VIDEOS" : 7,  "G_USER_N_DIRECTORIES" : 8, 
 "G_FORMAT_SIZE_DEFAULT" : 0,  "G_FORMAT_SIZE_LONG_FORMAT" : 1,  "G_FORMAT_SIZE_IEC_UNITS" : 2, 
 "G_IO_ERROR_NONE" : 0,  "G_IO_ERROR_AGAIN" : 1,  "G_IO_ERROR_INVAL" : 2,  "G_IO_ERROR_UNKNOWN" : 3, 
 "G_IO_CHANNEL_ERROR_FBIG" : 0,  "G_IO_CHANNEL_ERROR_INVAL" : 1,  "G_IO_CHANNEL_ERROR_IO" : 2,  "G_IO_CHANNEL_ERROR_ISDIR" : 3,  "G_IO_CHANNEL_ERROR_NOSPC" : 4,  "G_IO_CHANNEL_ERROR_NXIO" : 5,  "G_IO_CHANNEL_ERROR_OVERFLOW" : 6,  "G_IO_CHANNEL_ERROR_PIPE" : 7,  "G_IO_CHANNEL_ERROR_FAILED" : 8, 
 "G_IO_STATUS_ERROR" : 0,  "G_IO_STATUS_NORMAL" : 1,  "G_IO_STATUS_EOF" : 2,  "G_IO_STATUS_AGAIN" : 3, 
 "G_SEEK_CUR" : 0,  "G_SEEK_SET" : 1,  "G_SEEK_END" : 2, 
 "G_IO_IN" : 1,  "G_IO_OUT" : 4,  "G_IO_PRI" : 2,  "G_IO_ERR" : 8,  "G_IO_HUP" : 16,  "G_IO_NVAL" : 32, 
 "G_IO_FLAG_APPEND" : 1,  "G_IO_FLAG_NONBLOCK" : 2,  "G_IO_FLAG_IS_READABLE" : 4,  "G_IO_FLAG_IS_WRITABLE" : 8,  "G_IO_FLAG_IS_SEEKABLE" : 16,  "G_IO_FLAG_MASK" : 31,  "G_IO_FLAG_GET_MASK" : 31,  "G_IO_FLAG_SET_MASK" : 3, 
 "G_KEY_FILE_ERROR_UNKNOWN_ENCODING" : 0,  "G_KEY_FILE_ERROR_PARSE" : 1,  "G_KEY_FILE_ERROR_NOT_FOUND" : 2,  "G_KEY_FILE_ERROR_KEY_NOT_FOUND" : 3,  "G_KEY_FILE_ERROR_GROUP_NOT_FOUND" : 4,  "G_KEY_FILE_ERROR_INVALID_VALUE" : 5, 
 "G_KEY_FILE_NONE" : 0,  "G_KEY_FILE_KEEP_COMMENTS" : 1,  "G_KEY_FILE_KEEP_TRANSLATIONS" : 2, 
 "G_MARKUP_ERROR_BAD_UTF8" : 0,  "G_MARKUP_ERROR_EMPTY" : 1,  "G_MARKUP_ERROR_PARSE" : 2,  "G_MARKUP_ERROR_UNKNOWN_ELEMENT" : 3,  "G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE" : 4,  "G_MARKUP_ERROR_INVALID_CONTENT" : 5,  "G_MARKUP_ERROR_MISSING_ATTRIBUTE" : 6, 
 "G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG" : 1,  "G_MARKUP_TREAT_CDATA_AS_TEXT" : 2,  "G_MARKUP_PREFIX_ERROR_POSITION" : 4, 
 "G_MARKUP_COLLECT_INVALID" : 0,  "G_MARKUP_COLLECT_STRING" : 1,  "G_MARKUP_COLLECT_STRDUP" : 2,  "G_MARKUP_COLLECT_BOOLEAN" : 3,  "G_MARKUP_COLLECT_TRISTATE" : 4,  "G_MARKUP_COLLECT_OPTIONAL" : 4194304, 
 "G_LOG_FLAG_RECURSION" : 1,  "G_LOG_FLAG_FATAL" : 2,  "G_LOG_LEVEL_ERROR" : 4,  "G_LOG_LEVEL_CRITICAL" : 8,  "G_LOG_LEVEL_WARNING" : 16,  "G_LOG_LEVEL_MESSAGE" : 32,  "G_LOG_LEVEL_INFO" : 64,  "G_LOG_LEVEL_DEBUG" : 128,  "G_LOG_LEVEL_MASK" : 3, 
 "G_TRAVERSE_LEAVES" : 1,  "G_TRAVERSE_NON_LEAVES" : 2,  "G_TRAVERSE_ALL" : 3,  "G_TRAVERSE_MASK" : 3,  "G_TRAVERSE_LEAFS" : 1,  "G_TRAVERSE_NON_LEAFS" : 2, 
 "G_IN_ORDER" : 0,  "G_PRE_ORDER" : 1,  "G_POST_ORDER" : 2,  "G_LEVEL_ORDER" : 3, 
 "G_OPTION_FLAG_HIDDEN" : 1,  "G_OPTION_FLAG_IN_MAIN" : 2,  "G_OPTION_FLAG_REVERSE" : 4,  "G_OPTION_FLAG_NO_ARG" : 8,  "G_OPTION_FLAG_FILENAME" : 16,  "G_OPTION_FLAG_OPTIONAL_ARG" : 32,  "G_OPTION_FLAG_NOALIAS" : 64, 
 "G_OPTION_ARG_NONE" : 0,  "G_OPTION_ARG_STRING" : 1,  "G_OPTION_ARG_INT" : 2,  "G_OPTION_ARG_CALLBACK" : 3,  "G_OPTION_ARG_FILENAME" : 4,  "G_OPTION_ARG_STRING_ARRAY" : 5,  "G_OPTION_ARG_FILENAME_ARRAY" : 6,  "G_OPTION_ARG_DOUBLE" : 7,  "G_OPTION_ARG_INT64" : 8, 
 "G_OPTION_ERROR_UNKNOWN_OPTION" : 0,  "G_OPTION_ERROR_BAD_VALUE" : 1,  "G_OPTION_ERROR_FAILED" : 2, 
 "G_REGEX_ERROR_COMPILE" : 0,  "G_REGEX_ERROR_OPTIMIZE" : 1,  "G_REGEX_ERROR_REPLACE" : 2,  "G_REGEX_ERROR_MATCH" : 3,  "G_REGEX_ERROR_INTERNAL" : 4,  "G_REGEX_ERROR_STRAY_BACKSLASH" : 101,  "G_REGEX_ERROR_MISSING_CONTROL_CHAR" : 102,  "G_REGEX_ERROR_UNRECOGNIZED_ESCAPE" : 103,  "G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER" : 104,  "G_REGEX_ERROR_QUANTIFIER_TOO_BIG" : 105,  "G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS" : 106,  "G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS" : 107,  "G_REGEX_ERROR_RANGE_OUT_OF_ORDER" : 108,  "G_REGEX_ERROR_NOTHING_TO_REPEAT" : 109,  "G_REGEX_ERROR_UNRECOGNIZED_CHARACTER" : 112,  "G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS" : 113,  "G_REGEX_ERROR_UNMATCHED_PARENTHESIS" : 114,  "G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE" : 115,  "G_REGEX_ERROR_UNTERMINATED_COMMENT" : 118,  "G_REGEX_ERROR_EXPRESSION_TOO_LARGE" : 120,  "G_REGEX_ERROR_MEMORY_ERROR" : 121,  "G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND" : 125,  "G_REGEX_ERROR_MALFORMED_CONDITION" : 126,  "G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES" : 127,  "G_REGEX_ERROR_ASSERTION_EXPECTED" : 128,  "G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME" : 130,  "G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED" : 131,  "G_REGEX_ERROR_HEX_CODE_TOO_LARGE" : 134,  "G_REGEX_ERROR_INVALID_CONDITION" : 135,  "G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND" : 136,  "G_REGEX_ERROR_INFINITE_LOOP" : 140,  "G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR" : 142,  "G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME" : 143,  "G_REGEX_ERROR_MALFORMED_PROPERTY" : 146,  "G_REGEX_ERROR_UNKNOWN_PROPERTY" : 147,  "G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG" : 148,  "G_REGEX_ERROR_TOO_MANY_SUBPATTERNS" : 149,  "G_REGEX_ERROR_INVALID_OCTAL_VALUE" : 151,  "G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE" : 154,  "G_REGEX_ERROR_DEFINE_REPETION" : 155,  "G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS" : 156,  "G_REGEX_ERROR_MISSING_BACK_REFERENCE" : 157, 
 "G_REGEX_CASELESS" : 1,  "G_REGEX_MULTILINE" : 2,  "G_REGEX_DOTALL" : 4,  "G_REGEX_EXTENDED" : 8,  "G_REGEX_ANCHORED" : 16,  "G_REGEX_DOLLAR_ENDONLY" : 32,  "G_REGEX_UNGREEDY" : 512,  "G_REGEX_RAW" : 131072,  "G_REGEX_NO_AUTO_CAPTURE" : 262144,  "G_REGEX_OPTIMIZE" : 524288,  "G_REGEX_DUPNAMES" : 33554432,  "G_REGEX_NEWLINE_CR" : 4294967296,  "G_REGEX_NEWLINE_LF" : 8589934592,  "G_REGEX_NEWLINE_CRLF" : 12884901888, 
 "G_REGEX_MATCH_ANCHORED" : 16,  "G_REGEX_MATCH_NOTBOL" : 128,  "G_REGEX_MATCH_NOTEOL" : 256,  "G_REGEX_MATCH_NOTEMPTY" : 65536,  "G_REGEX_MATCH_PARTIAL" : 2097152,  "G_REGEX_MATCH_NEWLINE_CR" : 4294967296,  "G_REGEX_MATCH_NEWLINE_LF" : 8589934592,  "G_REGEX_MATCH_NEWLINE_CRLF" : 12884901888,  "G_REGEX_MATCH_NEWLINE_ANY" : 17179869184, 
 "G_ERR_UNKNOWN" : 0,  "G_ERR_UNEXP_EOF" : 1,  "G_ERR_UNEXP_EOF_IN_STRING" : 2,  "G_ERR_UNEXP_EOF_IN_COMMENT" : 3,  "G_ERR_NON_DIGIT_IN_CONST" : 4,  "G_ERR_DIGIT_RADIX" : 5,  "G_ERR_FLOAT_RADIX" : 6,  "G_ERR_FLOAT_MALFORMED" : 7, 
 "G_TOKEN_EOF" : 0,  "G_TOKEN_LEFT_PAREN" : "(",  "G_TOKEN_RIGHT_PAREN" : ")",  "G_TOKEN_LEFT_CURLY" : "{",  "G_TOKEN_RIGHT_CURLY" : "}",  "G_TOKEN_LEFT_BRACE" : "[",  "G_TOKEN_RIGHT_BRACE" : "]",  "G_TOKEN_EQUAL_SIGN" : "=",  "G_TOKEN_COMMA" : ",",  "G_TOKEN_NONE" : 256,  "G_TOKEN_ERROR" : 257,  "G_TOKEN_CHAR" : 258,  "G_TOKEN_BINARY" : 259,  "G_TOKEN_OCTAL" : 260,  "G_TOKEN_INT" : 261,  "G_TOKEN_HEX" : 262,  "G_TOKEN_FLOAT" : 263,  "G_TOKEN_STRING" : 264,  "G_TOKEN_SYMBOL" : 265,  "G_TOKEN_IDENTIFIER" : 266,  "G_TOKEN_IDENTIFIER_NULL" : 267,  "G_TOKEN_COMMENT_SINGLE" : 268,  "G_TOKEN_COMMENT_MULTI" : 269,  "G_TOKEN_LAST" : 270, 
 "G_SHELL_ERROR_BAD_QUOTING" : 0,  "G_SHELL_ERROR_EMPTY_STRING" : 1,  "G_SHELL_ERROR_FAILED" : 2, 
 "G_SLICE_CONFIG_ALWAYS_MALLOC" : 1,  "G_SLICE_CONFIG_BYPASS_MAGAZINES" : 2,  "G_SLICE_CONFIG_WORKING_SET_MSECS" : 3,  "G_SLICE_CONFIG_COLOR_INCREMENT" : 4,  "G_SLICE_CONFIG_CHUNK_SIZES" : 5,  "G_SLICE_CONFIG_CONTENTION_COUNTER" : 6, 
 "G_SPAWN_ERROR_FORK" : 0,  "G_SPAWN_ERROR_READ" : 1,  "G_SPAWN_ERROR_CHDIR" : 2,  "G_SPAWN_ERROR_ACCES" : 3,  "G_SPAWN_ERROR_PERM" : 4,  "G_SPAWN_ERROR_TOO_BIG" : 5,  "G_SPAWN_ERROR_2BIG" : 5,  "G_SPAWN_ERROR_NOEXEC" : 6,  "G_SPAWN_ERROR_NAMETOOLONG" : 7,  "G_SPAWN_ERROR_NOENT" : 8,  "G_SPAWN_ERROR_NOMEM" : 9,  "G_SPAWN_ERROR_NOTDIR" : 10,  "G_SPAWN_ERROR_LOOP" : 11,  "G_SPAWN_ERROR_TXTBUSY" : 12,  "G_SPAWN_ERROR_IO" : 13,  "G_SPAWN_ERROR_NFILE" : 14,  "G_SPAWN_ERROR_MFILE" : 15,  "G_SPAWN_ERROR_INVAL" : 16,  "G_SPAWN_ERROR_ISDIR" : 17,  "G_SPAWN_ERROR_LIBBAD" : 18,  "G_SPAWN_ERROR_FAILED" : 19, 
 "G_SPAWN_LEAVE_DESCRIPTORS_OPEN" : 1,  "G_SPAWN_DO_NOT_REAP_CHILD" : 2,  "G_SPAWN_SEARCH_PATH" : 4,  "G_SPAWN_STDOUT_TO_DEV_NULL" : 8,  "G_SPAWN_STDERR_TO_DEV_NULL" : 16,  "G_SPAWN_CHILD_INHERITS_STDIN" : 32,  "G_SPAWN_FILE_AND_ARGV_ZERO" : 64, 
 "G_ASCII_ALNUM" : 1,  "G_ASCII_ALPHA" : 2,  "G_ASCII_CNTRL" : 4,  "G_ASCII_DIGIT" : 8,  "G_ASCII_GRAPH" : 16,  "G_ASCII_LOWER" : 32,  "G_ASCII_PRINT" : 64,  "G_ASCII_PUNCT" : 128,  "G_ASCII_SPACE" : 256,  "G_ASCII_UPPER" : 512,  "G_ASCII_XDIGIT" : 65536, 
 "G_TEST_TRAP_SILENCE_STDOUT" : 128,  "G_TEST_TRAP_SILENCE_STDERR" : 256,  "G_TEST_TRAP_INHERIT_STDIN" : 512, 
 "G_TEST_LOG_NONE" : 0,  "G_TEST_LOG_ERROR" : 1,  "G_TEST_LOG_START_BINARY" : 2,  "G_TEST_LOG_LIST_CASE" : 3,  "G_TEST_LOG_SKIP_CASE" : 4,  "G_TEST_LOG_START_CASE" : 5,  "G_TEST_LOG_STOP_CASE" : 6,  "G_TEST_LOG_MIN_RESULT" : 7,  "G_TEST_LOG_MAX_RESULT" : 8,  "G_TEST_LOG_MESSAGE" : 9, 
 "G_VARIANT_CLASS_BOOLEAN" : "b",  "G_VARIANT_CLASS_BYTE" : "y",  "G_VARIANT_CLASS_INT16" : "n",  "G_VARIANT_CLASS_UINT16" : "q",  "G_VARIANT_CLASS_INT32" : "i",  "G_VARIANT_CLASS_UINT32" : "u",  "G_VARIANT_CLASS_INT64" : "x",  "G_VARIANT_CLASS_UINT64" : "t",  "G_VARIANT_CLASS_HANDLE" : "h",  "G_VARIANT_CLASS_DOUBLE" : "d",  "G_VARIANT_CLASS_STRING" : "s",  "G_VARIANT_CLASS_OBJECT_PATH" : "o",  "G_VARIANT_CLASS_SIGNATURE" : "g",  "G_VARIANT_CLASS_VARIANT" : "v",  "G_VARIANT_CLASS_MAYBE" : "m",  "G_VARIANT_CLASS_ARRAY" : "a",  "G_VARIANT_CLASS_TUPLE" : "(",  "G_VARIANT_CLASS_DICT_ENTRY" : "{", 
 "G_VARIANT_PARSE_ERROR_FAILED" : 0,  "G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED" : 1,  "G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE" : 2,  "G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED" : 3,  "G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END" : 4,  "G_VARIANT_PARSE_ERROR_INVALID_CHARACTER" : 5,  "G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING" : 6,  "G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH" : 7,  "G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE" : 8,  "G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING" : 9,  "G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE" : 10,  "G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE" : 11,  "G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG" : 12,  "G_VARIANT_PARSE_ERROR_TYPE_ERROR" : 13,  "G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN" : 14,  "G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD" : 15,  "G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT" : 16,  "G_VARIANT_PARSE_ERROR_VALUE_EXPECTED" : 17, 
 "G_THREAD_PRIORITY_LOW" : 0,  "G_THREAD_PRIORITY_NORMAL" : 1,  "G_THREAD_PRIORITY_HIGH" : 2,  "G_THREAD_PRIORITY_URGENT" : 3, 
 "PTHREAD_CREATE_JOINABLE" : 0,  "PTHREAD_CREATE_DETACHED" : 1, 
 "PTHREAD_MUTEX_TIMED_NP" : 0,  "PTHREAD_MUTEX_RECURSIVE_NP" : 1,  "PTHREAD_MUTEX_ERRORCHECK_NP" : 2,  "PTHREAD_MUTEX_ADAPTIVE_NP" : 3,  "PTHREAD_MUTEX_NORMAL" : 0,  "PTHREAD_MUTEX_RECURSIVE" : 1,  "PTHREAD_MUTEX_ERRORCHECK" : 2,  "PTHREAD_MUTEX_DEFAULT" : 0, 
 "PTHREAD_MUTEX_STALLED" : 0,  "PTHREAD_MUTEX_STALLED_NP" : 0,  "PTHREAD_MUTEX_ROBUST" : 1,  "PTHREAD_MUTEX_ROBUST_NP" : 1, 
 "PTHREAD_RWLOCK_PREFER_READER_NP" : 0,  "PTHREAD_RWLOCK_PREFER_WRITER_NP" : 1,  "PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP" : 2,  "PTHREAD_RWLOCK_DEFAULT_NP" : 0, 
 "PTHREAD_INHERIT_SCHED" : 0,  "PTHREAD_EXPLICIT_SCHED" : 1, 
 "PTHREAD_SCOPE_SYSTEM" : 0,  "PTHREAD_SCOPE_PROCESS" : 1, 
 "PTHREAD_PROCESS_PRIVATE" : 0,  "PTHREAD_PROCESS_SHARED" : 1, 
 "PTHREAD_CANCEL_ENABLE" : 0,  "PTHREAD_CANCEL_DISABLE" : 1, 
 "PTHREAD_CANCEL_DEFERRED" : 0,  "PTHREAD_CANCEL_ASYNCHRONOUS" : 1, 
 "G_TYPE_DEBUG_NONE" : 0,  "G_TYPE_DEBUG_OBJECTS" : 1,  "G_TYPE_DEBUG_SIGNALS" : 2,  "G_TYPE_DEBUG_MASK" : 3, 
 "G_TYPE_FLAG_CLASSED" : 1,  "G_TYPE_FLAG_INSTANTIATABLE" : 2,  "G_TYPE_FLAG_DERIVABLE" : 4,  "G_TYPE_FLAG_DEEP_DERIVABLE" : 8, 
 "G_TYPE_FLAG_ABSTRACT" : 16,  "G_TYPE_FLAG_VALUE_ABSTRACT" : 32, 
 "G_PARAM_READABLE" : 1,  "G_PARAM_WRITABLE" : 2,  "G_PARAM_CONSTRUCT" : 4,  "G_PARAM_CONSTRUCT_ONLY" : 8,  "G_PARAM_LAX_VALIDATION" : 16,  "G_PARAM_STATIC_NAME" : 32,  "G_PARAM_PRIVATE" : 32,  "G_PARAM_STATIC_NICK" : 64,  "G_PARAM_STATIC_BLURB" : 128,  "G_PARAM_DEPRECATED" : 562949953421312, 
 "G_SIGNAL_RUN_FIRST" : 1,  "G_SIGNAL_RUN_LAST" : 2,  "G_SIGNAL_RUN_CLEANUP" : 4,  "G_SIGNAL_NO_RECURSE" : 8,  "G_SIGNAL_DETAILED" : 16,  "G_SIGNAL_ACTION" : 32,  "G_SIGNAL_NO_HOOKS" : 64,  "G_SIGNAL_MUST_COLLECT" : 128,  "G_SIGNAL_DEPRECATED" : 256, 
 "G_CONNECT_AFTER" : 1,  "G_CONNECT_SWAPPED" : 2, 
 "G_SIGNAL_MATCH_ID" : 1,  "G_SIGNAL_MATCH_DETAIL" : 2,  "G_SIGNAL_MATCH_CLOSURE" : 4,  "G_SIGNAL_MATCH_FUNC" : 8,  "G_SIGNAL_MATCH_DATA" : 16,  "G_SIGNAL_MATCH_UNBLOCKED" : 32, 
 "G_BINDING_DEFAULT" : 0,  "G_BINDING_BIDIRECTIONAL" : 1,  "G_BINDING_SYNC_CREATE" : 2,  "G_BINDING_INVERT_BOOLEAN" : 4, 
 "G_APP_INFO_CREATE_NONE" : 0,  "G_APP_INFO_CREATE_NEEDS_TERMINAL" : 1,  "G_APP_INFO_CREATE_SUPPORTS_URIS" : 2,  "G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION" : 4, 
 "G_CONVERTER_NO_FLAGS" : 0,  "G_CONVERTER_INPUT_AT_END" : 1,  "G_CONVERTER_FLUSH" : 2, 
 "G_CONVERTER_ERROR" : 0,  "G_CONVERTER_CONVERTED" : 1,  "G_CONVERTER_FINISHED" : 2,  "G_CONVERTER_FLUSHED" : 3, 
 "G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN" : 0,  "G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN" : 1,  "G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN" : 2, 
 "G_DATA_STREAM_NEWLINE_TYPE_LF" : 0,  "G_DATA_STREAM_NEWLINE_TYPE_CR" : 1,  "G_DATA_STREAM_NEWLINE_TYPE_CR_LF" : 2,  "G_DATA_STREAM_NEWLINE_TYPE_ANY" : 3, 
 "G_FILE_ATTRIBUTE_TYPE_INVALID" : 0,  "G_FILE_ATTRIBUTE_TYPE_STRING" : 1,  "G_FILE_ATTRIBUTE_TYPE_BYTE_STRING" : 2,  "G_FILE_ATTRIBUTE_TYPE_BOOLEAN" : 3,  "G_FILE_ATTRIBUTE_TYPE_UINT32" : 4,  "G_FILE_ATTRIBUTE_TYPE_INT32" : 5,  "G_FILE_ATTRIBUTE_TYPE_UINT64" : 6,  "G_FILE_ATTRIBUTE_TYPE_INT64" : 7,  "G_FILE_ATTRIBUTE_TYPE_OBJECT" : 8,  "G_FILE_ATTRIBUTE_TYPE_STRINGV" : 9, 
 "G_FILE_ATTRIBUTE_INFO_NONE" : 0,  "G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE" : 1,  "G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED" : 2, 
 "G_FILE_ATTRIBUTE_STATUS_UNSET" : 0,  "G_FILE_ATTRIBUTE_STATUS_SET" : 1,  "G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING" : 2, 
 "G_FILE_QUERY_INFO_NONE" : 0,  "G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS" : 1, 
 "G_FILE_CREATE_NONE" : 0,  "G_FILE_CREATE_PRIVATE" : 1,  "G_FILE_CREATE_REPLACE_DESTINATION" : 2, 
 "G_MOUNT_MOUNT_NONE" : 0, 
 "G_MOUNT_UNMOUNT_NONE" : 0,  "G_MOUNT_UNMOUNT_FORCE" : 1, 
 "G_DRIVE_START_NONE" : 0, 
 "G_DRIVE_START_STOP_TYPE_UNKNOWN" : 0,  "G_DRIVE_START_STOP_TYPE_SHUTDOWN" : 1,  "G_DRIVE_START_STOP_TYPE_NETWORK" : 2,  "G_DRIVE_START_STOP_TYPE_MULTIDISK" : 3,  "G_DRIVE_START_STOP_TYPE_PASSWORD" : 4, 
 "G_FILE_COPY_NONE" : 0,  "G_FILE_COPY_OVERWRITE" : 1,  "G_FILE_COPY_BACKUP" : 2,  "G_FILE_COPY_NOFOLLOW_SYMLINKS" : 4,  "G_FILE_COPY_ALL_METADATA" : 8,  "G_FILE_COPY_NO_FALLBACK_FOR_MOVE" : 16,  "G_FILE_COPY_TARGET_DEFAULT_PERMS" : 32, 
 "G_FILE_MONITOR_NONE" : 0,  "G_FILE_MONITOR_WATCH_MOUNTS" : 1,  "G_FILE_MONITOR_SEND_MOVED" : 2, 
 "G_FILE_TYPE_UNKNOWN" : 0,  "G_FILE_TYPE_REGULAR" : 1,  "G_FILE_TYPE_DIRECTORY" : 2,  "G_FILE_TYPE_SYMBOLIC_LINK" : 3,  "G_FILE_TYPE_SPECIAL" : 4,  "G_FILE_TYPE_SHORTCUT" : 5,  "G_FILE_TYPE_MOUNTABLE" : 6, 
 "G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS" : 0,  "G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL" : 1,  "G_FILESYSTEM_PREVIEW_TYPE_NEVER" : 2, 
 "G_FILE_MONITOR_EVENT_CHANGED" : 0,  "G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT" : 1,  "G_FILE_MONITOR_EVENT_DELETED" : 2,  "G_FILE_MONITOR_EVENT_CREATED" : 3,  "G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED" : 4,  "G_FILE_MONITOR_EVENT_PRE_UNMOUNT" : 5,  "G_FILE_MONITOR_EVENT_UNMOUNTED" : 6,  "G_FILE_MONITOR_EVENT_MOVED" : 7, 
 "G_IO_ERROR_FAILED" : 0,  "G_IO_ERROR_NOT_FOUND" : 1,  "G_IO_ERROR_EXISTS" : 2,  "G_IO_ERROR_IS_DIRECTORY" : 3,  "G_IO_ERROR_NOT_DIRECTORY" : 4,  "G_IO_ERROR_NOT_EMPTY" : 5,  "G_IO_ERROR_NOT_REGULAR_FILE" : 6,  "G_IO_ERROR_NOT_SYMBOLIC_LINK" : 7,  "G_IO_ERROR_NOT_MOUNTABLE_FILE" : 8,  "G_IO_ERROR_FILENAME_TOO_LONG" : 9,  "G_IO_ERROR_INVALID_FILENAME" : 10,  "G_IO_ERROR_TOO_MANY_LINKS" : 11,  "G_IO_ERROR_NO_SPACE" : 12,  "G_IO_ERROR_INVALID_ARGUMENT" : 13,  "G_IO_ERROR_PERMISSION_DENIED" : 14,  "G_IO_ERROR_NOT_SUPPORTED" : 15,  "G_IO_ERROR_NOT_MOUNTED" : 16,  "G_IO_ERROR_ALREADY_MOUNTED" : 17,  "G_IO_ERROR_CLOSED" : 18,  "G_IO_ERROR_CANCELLED" : 19,  "G_IO_ERROR_PENDING" : 20,  "G_IO_ERROR_READ_ONLY" : 21,  "G_IO_ERROR_CANT_CREATE_BACKUP" : 22,  "G_IO_ERROR_WRONG_ETAG" : 23,  "G_IO_ERROR_TIMED_OUT" : 24,  "G_IO_ERROR_WOULD_RECURSE" : 25,  "G_IO_ERROR_BUSY" : 26,  "G_IO_ERROR_WOULD_BLOCK" : 27,  "G_IO_ERROR_HOST_NOT_FOUND" : 28,  "G_IO_ERROR_WOULD_MERGE" : 29,  "G_IO_ERROR_FAILED_HANDLED" : 30,  "G_IO_ERROR_TOO_MANY_OPEN_FILES" : 31,  "G_IO_ERROR_NOT_INITIALIZED" : 32,  "G_IO_ERROR_ADDRESS_IN_USE" : 33,  "G_IO_ERROR_PARTIAL_INPUT" : 34,  "G_IO_ERROR_INVALID_DATA" : 35,  "G_IO_ERROR_DBUS_ERROR" : 36,  "G_IO_ERROR_HOST_UNREACHABLE" : 37,  "G_IO_ERROR_NETWORK_UNREACHABLE" : 38,  "G_IO_ERROR_CONNECTION_REFUSED" : 39,  "G_IO_ERROR_PROXY_FAILED" : 40,  "G_IO_ERROR_PROXY_AUTH_FAILED" : 41,  "G_IO_ERROR_PROXY_NEED_AUTH" : 42,  "G_IO_ERROR_PROXY_NOT_ALLOWED" : 43, 
 "G_ASK_PASSWORD_NEED_PASSWORD" : 1,  "G_ASK_PASSWORD_NEED_USERNAME" : 2,  "G_ASK_PASSWORD_NEED_DOMAIN" : 4,  "G_ASK_PASSWORD_SAVING_SUPPORTED" : 8,  "G_ASK_PASSWORD_ANONYMOUS_SUPPORTED" : 16, 
 "G_PASSWORD_SAVE_NEVER" : 0,  "G_PASSWORD_SAVE_FOR_SESSION" : 1,  "G_PASSWORD_SAVE_PERMANENTLY" : 2, 
 "G_MOUNT_OPERATION_HANDLED" : 0,  "G_MOUNT_OPERATION_ABORTED" : 1,  "G_MOUNT_OPERATION_UNHANDLED" : 2, 
 "G_OUTPUT_STREAM_SPLICE_NONE" : 0,  "G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE" : 1,  "G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET" : 2, 
 "G_IO_STREAM_SPLICE_NONE" : 0,  "G_IO_STREAM_SPLICE_CLOSE_STREAM1" : 1,  "G_IO_STREAM_SPLICE_CLOSE_STREAM2" : 2,  "G_IO_STREAM_SPLICE_WAIT_FOR_BOTH" : 4, 
 "G_EMBLEM_ORIGIN_UNKNOWN" : 0,  "G_EMBLEM_ORIGIN_DEVICE" : 1,  "G_EMBLEM_ORIGIN_LIVEMETADATA" : 2,  "G_EMBLEM_ORIGIN_TAG" : 3, 
 "G_RESOLVER_ERROR_NOT_FOUND" : 0,  "G_RESOLVER_ERROR_TEMPORARY_FAILURE" : 1,  "G_RESOLVER_ERROR_INTERNAL" : 2, 
 "G_RESOURCE_ERROR_NOT_FOUND" : 0,  "G_RESOURCE_ERROR_INTERNAL" : 1, 
 "G_RESOURCE_FLAGS_NONE" : 0,  "G_RESOURCE_FLAGS_COMPRESSED" : 1, 
 "G_RESOURCE_LOOKUP_FLAGS_NONE" : 0, 
 "G_SOCKET_FAMILY_INVALID" : 0,  "G_SOCKET_FAMILY_UNIX" : 1,  "G_SOCKET_FAMILY_IPV4" : 2,  "G_SOCKET_FAMILY_IPV6" : 10, 
 "G_SOCKET_TYPE_INVALID" : 0,  "G_SOCKET_TYPE_STREAM" : 1,  "G_SOCKET_TYPE_DATAGRAM" : 2,  "G_SOCKET_TYPE_SEQPACKET" : 3, 
 "G_SOCKET_MSG_NONE" : 0,  "G_SOCKET_MSG_OOB" : 1,  "G_SOCKET_MSG_PEEK" : 2,  "G_SOCKET_MSG_DONTROUTE" : 4, 
 "G_SOCKET_PROTOCOL_UNKNOWN" : -1,  "G_SOCKET_PROTOCOL_DEFAULT" : 0,  "G_SOCKET_PROTOCOL_TCP" : 6,  "G_SOCKET_PROTOCOL_UDP" : 17,  "G_SOCKET_PROTOCOL_SCTP" : 132, 
 "G_ZLIB_COMPRESSOR_FORMAT_ZLIB" : 0,  "G_ZLIB_COMPRESSOR_FORMAT_GZIP" : 1,  "G_ZLIB_COMPRESSOR_FORMAT_RAW" : 2, 
 "G_UNIX_SOCKET_ADDRESS_INVALID" : 0,  "G_UNIX_SOCKET_ADDRESS_ANONYMOUS" : 1,  "G_UNIX_SOCKET_ADDRESS_PATH" : 2,  "G_UNIX_SOCKET_ADDRESS_ABSTRACT" : 3,  "G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED" : 4, 
 "G_BUS_TYPE_STARTER" : -1,  "G_BUS_TYPE_NONE" : 0,  "G_BUS_TYPE_SYSTEM" : 1,  "G_BUS_TYPE_SESSION" : 2, 
 "G_BUS_NAME_OWNER_FLAGS_NONE" : 0,  "G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT" : 1,  "G_BUS_NAME_OWNER_FLAGS_REPLACE" : 2, 
 "G_BUS_NAME_WATCHER_FLAGS_NONE" : 0,  "G_BUS_NAME_WATCHER_FLAGS_AUTO_START" : 1, 
 "G_DBUS_PROXY_FLAGS_NONE" : 0,  "G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES" : 1,  "G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS" : 2,  "G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START" : 4,  "G_DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES" : 8, 
 "G_DBUS_ERROR_FAILED" : 0,  "G_DBUS_ERROR_NO_MEMORY" : 1,  "G_DBUS_ERROR_SERVICE_UNKNOWN" : 2,  "G_DBUS_ERROR_NAME_HAS_NO_OWNER" : 3,  "G_DBUS_ERROR_NO_REPLY" : 4,  "G_DBUS_ERROR_IO_ERROR" : 5,  "G_DBUS_ERROR_BAD_ADDRESS" : 6,  "G_DBUS_ERROR_NOT_SUPPORTED" : 7,  "G_DBUS_ERROR_LIMITS_EXCEEDED" : 8,  "G_DBUS_ERROR_ACCESS_DENIED" : 9,  "G_DBUS_ERROR_AUTH_FAILED" : 10,  "G_DBUS_ERROR_NO_SERVER" : 11,  "G_DBUS_ERROR_TIMEOUT" : 12,  "G_DBUS_ERROR_NO_NETWORK" : 13,  "G_DBUS_ERROR_ADDRESS_IN_USE" : 14,  "G_DBUS_ERROR_DISCONNECTED" : 15,  "G_DBUS_ERROR_INVALID_ARGS" : 16,  "G_DBUS_ERROR_FILE_NOT_FOUND" : 17,  "G_DBUS_ERROR_FILE_EXISTS" : 18,  "G_DBUS_ERROR_UNKNOWN_METHOD" : 19,  "G_DBUS_ERROR_TIMED_OUT" : 20,  "G_DBUS_ERROR_MATCH_RULE_NOT_FOUND" : 21,  "G_DBUS_ERROR_MATCH_RULE_INVALID" : 22,  "G_DBUS_ERROR_SPAWN_EXEC_FAILED" : 23,  "G_DBUS_ERROR_SPAWN_FORK_FAILED" : 24,  "G_DBUS_ERROR_SPAWN_CHILD_EXITED" : 25,  "G_DBUS_ERROR_SPAWN_CHILD_SIGNALED" : 26,  "G_DBUS_ERROR_SPAWN_FAILED" : 27,  "G_DBUS_ERROR_SPAWN_SETUP_FAILED" : 28,  "G_DBUS_ERROR_SPAWN_CONFIG_INVALID" : 29,  "G_DBUS_ERROR_SPAWN_SERVICE_INVALID" : 30,  "G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND" : 31,  "G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID" : 32,  "G_DBUS_ERROR_SPAWN_FILE_INVALID" : 33,  "G_DBUS_ERROR_SPAWN_NO_MEMORY" : 34,  "G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN" : 35,  "G_DBUS_ERROR_INVALID_SIGNATURE" : 36,  "G_DBUS_ERROR_INVALID_FILE_CONTENT" : 37,  "G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN" : 38,  "G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN" : 39,  "G_DBUS_ERROR_OBJECT_PATH_IN_USE" : 40, 
 "G_DBUS_CONNECTION_FLAGS_NONE" : 0,  "G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT" : 1,  "G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER" : 2,  "G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS" : 4,  "G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION" : 8,  "G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING" : 16, 
 "G_DBUS_CAPABILITY_FLAGS_NONE" : 0,  "G_DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING" : 1, 
 "G_DBUS_CALL_FLAGS_NONE" : 0,  "G_DBUS_CALL_FLAGS_NO_AUTO_START" : 1, 
 "G_DBUS_MESSAGE_TYPE_INVALID" : 0,  "G_DBUS_MESSAGE_TYPE_METHOD_CALL" : 1,  "G_DBUS_MESSAGE_TYPE_METHOD_RETURN" : 2,  "G_DBUS_MESSAGE_TYPE_ERROR" : 3,  "G_DBUS_MESSAGE_TYPE_SIGNAL" : 4, 
 "G_DBUS_MESSAGE_FLAGS_NONE" : 0,  "G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED" : 1,  "G_DBUS_MESSAGE_FLAGS_NO_AUTO_START" : 2, 
 "G_DBUS_MESSAGE_HEADER_FIELD_INVALID" : 0,  "G_DBUS_MESSAGE_HEADER_FIELD_PATH" : 1,  "G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE" : 2,  "G_DBUS_MESSAGE_HEADER_FIELD_MEMBER" : 3,  "G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME" : 4,  "G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL" : 5,  "G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION" : 6,  "G_DBUS_MESSAGE_HEADER_FIELD_SENDER" : 7,  "G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE" : 8,  "G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS" : 9, 
 "G_DBUS_PROPERTY_INFO_FLAGS_NONE" : 0,  "G_DBUS_PROPERTY_INFO_FLAGS_READABLE" : 1,  "G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE" : 2, 
 "G_DBUS_SUBTREE_FLAGS_NONE" : 0,  "G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES" : 1, 
 "G_DBUS_SERVER_FLAGS_NONE" : 0,  "G_DBUS_SERVER_FLAGS_RUN_IN_THREAD" : 1,  "G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS" : 2, 
 "G_DBUS_SIGNAL_FLAGS_NONE" : 0,  "G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE" : 1, 
 "G_DBUS_SEND_MESSAGE_FLAGS_NONE" : 0,  "G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL" : 1, 
 "G_CREDENTIALS_TYPE_INVALID" : 0,  "G_CREDENTIALS_TYPE_LINUX_UCRED" : 1,  "G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED" : 2,  "G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED" : 3, 
 "G_DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN" : "B",  "G_DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN" : "l", 
 "G_APPLICATION_FLAGS_NONE" : 0,  "G_APPLICATION_IS_SERVICE" : 1,  "G_APPLICATION_IS_LAUNCHER" : 2,  "G_APPLICATION_HANDLES_OPEN" : 4,  "G_APPLICATION_HANDLES_COMMAND_LINE" : 8,  "G_APPLICATION_SEND_ENVIRONMENT" : 16,  "G_APPLICATION_NON_UNIQUE" : 32, 
 "G_TLS_ERROR_UNAVAILABLE" : 0,  "G_TLS_ERROR_MISC" : 1,  "G_TLS_ERROR_BAD_CERTIFICATE" : 2,  "G_TLS_ERROR_NOT_TLS" : 3,  "G_TLS_ERROR_HANDSHAKE" : 4,  "G_TLS_ERROR_CERTIFICATE_REQUIRED" : 5,  "G_TLS_ERROR_EOF" : 6, 
 "G_TLS_CERTIFICATE_UNKNOWN_CA" : 1,  "G_TLS_CERTIFICATE_BAD_IDENTITY" : 2,  "G_TLS_CERTIFICATE_NOT_ACTIVATED" : 4,  "G_TLS_CERTIFICATE_EXPIRED" : 8,  "G_TLS_CERTIFICATE_REVOKED" : 16,  "G_TLS_CERTIFICATE_INSECURE" : 32,  "G_TLS_CERTIFICATE_GENERIC_ERROR" : 64,  "G_TLS_CERTIFICATE_VALIDATE_ALL" : 127, 
 "G_TLS_AUTHENTICATION_NONE" : 0,  "G_TLS_AUTHENTICATION_REQUESTED" : 1,  "G_TLS_AUTHENTICATION_REQUIRED" : 2, 
 "G_TLS_REHANDSHAKE_NEVER" : 0,  "G_TLS_REHANDSHAKE_SAFELY" : 1,  "G_TLS_REHANDSHAKE_UNSAFELY" : 2, 
 "G_TLS_INTERACTION_UNHANDLED" : 0,  "G_TLS_INTERACTION_HANDLED" : 1,  "G_TLS_INTERACTION_FAILED" : 2, 
 "G_DBUS_INTERFACE_SKELETON_FLAGS_NONE" : 0,  "G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD" : 1, 
 "G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE" : 0,  "G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START" : 1, 
 "G_TLS_DATABASE_VERIFY_NONE" : 0, 
 "G_TLS_DATABASE_LOOKUP_NONE" : 0,  "G_TLS_DATABASE_LOOKUP_KEYPAIR" : 1, 
 "G_IO_MODULE_SCOPE_NONE" : 0,  "G_IO_MODULE_SCOPE_BLOCK_DUPLICATES" : 1, 
 "G_SOCKET_CLIENT_RESOLVING" : 0,  "G_SOCKET_CLIENT_RESOLVED" : 1,  "G_SOCKET_CLIENT_CONNECTING" : 2,  "G_SOCKET_CLIENT_CONNECTED" : 3,  "G_SOCKET_CLIENT_PROXY_NEGOTIATING" : 4,  "G_SOCKET_CLIENT_PROXY_NEGOTIATED" : 5,  "G_SOCKET_CLIENT_TLS_HANDSHAKING" : 6,  "G_SOCKET_CLIENT_TLS_HANDSHAKED" : 7,  "G_SOCKET_CLIENT_COMPLETE" : 8, 
 "PC_LINK_MAX" : 0,  "PC_MAX_CANON" : 1,  "PC_MAX_INPUT" : 2,  "PC_NAME_MAX" : 3,  "PC_PATH_MAX" : 4,  "PC_PIPE_BUF" : 5,  "PC_CHOWN_RESTRICTED" : 6,  "PC_NO_TRUNC" : 7,  "PC_VDISABLE" : 8,  "PC_SYNC_IO" : 9,  "PC_ASYNC_IO" : 10,  "PC_PRIO_IO" : 11,  "PC_SOCK_MAXBUF" : 12,  "PC_FILESIZEBITS" : 13,  "PC_REC_INCR_XFER_SIZE" : 14,  "PC_REC_MAX_XFER_SIZE" : 15,  "PC_REC_MIN_XFER_SIZE" : 16,  "PC_REC_XFER_ALIGN" : 17,  "PC_ALLOC_SIZE_MIN" : 18,  "PC_SYMLINK_MAX" : 19,  "PC_2_SYMLINKS" : 20, 
 "SC_ARG_MAX" : 0,  "SC_CHILD_MAX" : 1,  "SC_CLK_TCK" : 2,  "SC_NGROUPS_MAX" : 3,  "SC_OPEN_MAX" : 4,  "SC_STREAM_MAX" : 5,  "SC_TZNAME_MAX" : 6,  "SC_JOB_CONTROL" : 7,  "SC_SAVED_IDS" : 8,  "SC_REALTIME_SIGNALS" : 9,  "SC_PRIORITY_SCHEDULING" : 10,  "SC_TIMERS" : 11,  "SC_ASYNCHRONOUS_IO" : 12,  "SC_PRIORITIZED_IO" : 13,  "SC_SYNCHRONIZED_IO" : 14,  "SC_FSYNC" : 15,  "SC_MAPPED_FILES" : 16,  "SC_MEMLOCK" : 17,  "SC_MEMLOCK_RANGE" : 18,  "SC_MEMORY_PROTECTION" : 19,  "SC_MESSAGE_PASSING" : 20,  "SC_SEMAPHORES" : 21,  "SC_SHARED_MEMORY_OBJECTS" : 22,  "SC_AIO_LISTIO_MAX" : 23,  "SC_AIO_MAX" : 24,  "SC_AIO_PRIO_DELTA_MAX" : 25,  "SC_DELAYTIMER_MAX" : 26,  "SC_MQ_OPEN_MAX" : 27,  "SC_MQ_PRIO_MAX" : 28,  "SC_VERSION" : 29,  "SC_PAGESIZE" : 30,  "SC_RTSIG_MAX" : 31,  "SC_SEM_NSEMS_MAX" : 32,  "SC_SEM_VALUE_MAX" : 33,  "SC_SIGQUEUE_MAX" : 34,  "SC_TIMER_MAX" : 35,  "SC_BC_BASE_MAX" : 36,  "SC_BC_DIM_MAX" : 37,  "SC_BC_SCALE_MAX" : 38,  "SC_BC_STRING_MAX" : 39,  "SC_COLL_WEIGHTS_MAX" : 40,  "SC_EQUIV_CLASS_MAX" : 41,  "SC_EXPR_NEST_MAX" : 42,  "SC_LINE_MAX" : 43,  "SC_RE_DUP_MAX" : 44,  "SC_CHARCLASS_NAME_MAX" : 45,  "SC_2_VERSION" : 46,  "SC_2_C_BIND" : 47,  "SC_2_C_DEV" : 48,  "SC_2_FORT_DEV" : 49,  "SC_2_FORT_RUN" : 50,  "SC_2_SW_DEV" : 51,  "SC_2_LOCALEDEF" : 52,  "SC_PII" : 53,  "SC_PII_XTI" : 54,  "SC_PII_SOCKET" : 55,  "SC_PII_INTERNET" : 56,  "SC_PII_OSI" : 57,  "SC_POLL" : 58,  "SC_SELECT" : 59,  "SC_UIO_MAXIOV" : 60,  "SC_IOV_MAX" : 60,  "SC_PII_INTERNET_STREAM" : 61,  "SC_PII_INTERNET_DGRAM" : 62,  "SC_PII_OSI_COTS" : 63,  "SC_PII_OSI_CLTS" : 64,  "SC_PII_OSI_M" : 65,  "SC_T_IOV_MAX" : 66,  "SC_THREADS" : 67,  "SC_THREAD_SAFE_FUNCTIONS" : 68,  "SC_GETGR_R_SIZE_MAX" : 69,  "SC_GETPW_R_SIZE_MAX" : 70,  "SC_LOGIN_NAME_MAX" : 71,  "SC_TTY_NAME_MAX" : 72,  "SC_THREAD_DESTRUCTOR_ITERATIONS" : 73,  "SC_THREAD_KEYS_MAX" : 74,  "SC_THREAD_STACK_MIN" : 75,  "SC_THREAD_THREADS_MAX" : 76,  "SC_THREAD_ATTR_STACKADDR" : 77,  "SC_THREAD_ATTR_STACKSIZE" : 78,  "SC_THREAD_PRIORITY_SCHEDULING" : 79,  "SC_THREAD_PRIO_INHERIT" : 80,  "SC_THREAD_PRIO_PROTECT" : 81,  "SC_THREAD_PROCESS_SHARED" : 82,  "SC_NPROCESSORS_CONF" : 83,  "SC_NPROCESSORS_ONLN" : 84,  "SC_PHYS_PAGES" : 85,  "SC_AVPHYS_PAGES" : 86,  "SC_ATEXIT_MAX" : 87,  "SC_PASS_MAX" : 88,  "SC_XOPEN_VERSION" : 89,  "SC_XOPEN_XCU_VERSION" : 90,  "SC_XOPEN_UNIX" : 91,  "SC_XOPEN_CRYPT" : 92,  "SC_XOPEN_ENH_I18N" : 93,  "SC_XOPEN_SHM" : 94,  "SC_2_CHAR_TERM" : 95,  "SC_2_C_VERSION" : 96,  "SC_2_UPE" : 97,  "SC_XOPEN_XPG2" : 98,  "SC_XOPEN_XPG3" : 99,  "SC_XOPEN_XPG4" : 100,  "SC_CHAR_BIT" : 101,  "SC_CHAR_MAX" : 102,  "SC_CHAR_MIN" : 103,  "SC_INT_MAX" : 104,  "SC_INT_MIN" : 105,  "SC_LONG_BIT" : 106,  "SC_WORD_BIT" : 107,  "SC_MB_LEN_MAX" : 108,  "SC_NZERO" : 109,  "SC_SSIZE_MAX" : 110,  "SC_SCHAR_MAX" : 111,  "SC_SCHAR_MIN" : 112,  "SC_SHRT_MAX" : 113,  "SC_SHRT_MIN" : 114,  "SC_UCHAR_MAX" : 115,  "SC_UINT_MAX" : 116,  "SC_ULONG_MAX" : 117,  "SC_USHRT_MAX" : 118,  "SC_NL_ARGMAX" : 119,  "SC_NL_LANGMAX" : 120,  "SC_NL_MSGMAX" : 121,  "SC_NL_NMAX" : 122,  "SC_NL_SETMAX" : 123,  "SC_NL_TEXTMAX" : 124,  "SC_XBS5_ILP32_OFF32" : 125,  "SC_XBS5_ILP32_OFFBIG" : 126,  "SC_XBS5_LP64_OFF64" : 127,  "SC_XBS5_LPBIG_OFFBIG" : 128,  "SC_XOPEN_LEGACY" : 129,  "SC_XOPEN_REALTIME" : 130,  "SC_XOPEN_REALTIME_THREADS" : 131,  "SC_ADVISORY_INFO" : 132,  "SC_BARRIERS" : 133,  "SC_BASE" : 134,  "SC_C_LANG_SUPPORT" : 135,  "SC_C_LANG_SUPPORT_R" : 136,  "SC_CLOCK_SELECTION" : 137,  "SC_CPUTIME" : 138,  "SC_THREAD_CPUTIME" : 139,  "SC_DEVICE_IO" : 140,  "SC_DEVICE_SPECIFIC" : 141,  "SC_DEVICE_SPECIFIC_R" : 142,  "SC_FD_MGMT" : 143,  "SC_FIFO" : 144,  "SC_PIPE" : 145,  "SC_FILE_ATTRIBUTES" : 146,  "SC_FILE_LOCKING" : 147,  "SC_FILE_SYSTEM" : 148,  "SC_MONOTONIC_CLOCK" : 149,  "SC_MULTI_PROCESS" : 150,  "SC_SINGLE_PROCESS" : 151,  "SC_NETWORKING" : 152,  "SC_READER_WRITER_LOCKS" : 153,  "SC_SPIN_LOCKS" : 154,  "SC_REGEXP" : 155,  "SC_REGEX_VERSION" : 156,  "SC_SHELL" : 157,  "SC_SIGNALS" : 158,  "SC_SPAWN" : 159,  "SC_SPORADIC_SERVER" : 160,  "SC_THREAD_SPORADIC_SERVER" : 161,  "SC_SYSTEM_DATABASE" : 162,  "SC_SYSTEM_DATABASE_R" : 163,  "SC_TIMEOUTS" : 164,  "SC_TYPED_MEMORY_OBJECTS" : 165,  "SC_USER_GROUPS" : 166,  "SC_USER_GROUPS_R" : 167,  "SC_2_PBS" : 168,  "SC_2_PBS_ACCOUNTING" : 169,  "SC_2_PBS_LOCATE" : 170,  "SC_2_PBS_MESSAGE" : 171,  "SC_2_PBS_TRACK" : 172,  "SC_SYMLOOP_MAX" : 173,  "SC_STREAMS" : 174,  "SC_2_PBS_CHECKPOINT" : 175,  "SC_V6_ILP32_OFF32" : 176,  "SC_V6_ILP32_OFFBIG" : 177,  "SC_V6_LP64_OFF64" : 178,  "SC_V6_LPBIG_OFFBIG" : 179,  "SC_HOST_NAME_MAX" : 180,  "SC_TRACE" : 181,  "SC_TRACE_EVENT_FILTER" : 182,  "SC_TRACE_INHERIT" : 183,  "SC_TRACE_LOG" : 184,  "SC_LEVEL1_ICACHE_SIZE" : 185,  "SC_LEVEL1_ICACHE_ASSOC" : 186,  "SC_LEVEL1_ICACHE_LINESIZE" : 187,  "SC_LEVEL1_DCACHE_SIZE" : 188,  "SC_LEVEL1_DCACHE_ASSOC" : 189,  "SC_LEVEL1_DCACHE_LINESIZE" : 190,  "SC_LEVEL2_CACHE_SIZE" : 191,  "SC_LEVEL2_CACHE_ASSOC" : 192,  "SC_LEVEL2_CACHE_LINESIZE" : 193,  "SC_LEVEL3_CACHE_SIZE" : 194,  "SC_LEVEL3_CACHE_ASSOC" : 195,  "SC_LEVEL3_CACHE_LINESIZE" : 196,  "SC_LEVEL4_CACHE_SIZE" : 197,  "SC_LEVEL4_CACHE_ASSOC" : 198,  "SC_LEVEL4_CACHE_LINESIZE" : 199,  "SC_IPV6" : 265,  "SC_RAW_SOCKETS" : 266,  "SC_V7_ILP32_OFF32" : 267,  "SC_V7_ILP32_OFFBIG" : 268,  "SC_V7_LP64_OFF64" : 269,  "SC_V7_LPBIG_OFFBIG" : 270,  "SC_SS_REPL_MAX" : 271,  "SC_TRACE_EVENT_NAME_MAX" : 272,  "SC_TRACE_NAME_MAX" : 273,  "SC_TRACE_SYS_MAX" : 274,  "SC_TRACE_USER_EVENT_MAX" : 275,  "SC_XOPEN_STREAMS" : 276,  "SC_THREAD_ROBUST_PRIO_INHERIT" : 277,  "SC_THREAD_ROBUST_PRIO_PROTECT" : 278, 
 "CS_PATH" : 0,  "CS_V6_WIDTH_RESTRICTED_ENVS" : 1,  "CS_GNU_LIBC_VERSION" : 2,  "CS_GNU_LIBPTHREAD_VERSION" : 3,  "CS_V5_WIDTH_RESTRICTED_ENVS" : 4,  "CS_V7_WIDTH_RESTRICTED_ENVS" : 5,  "CS_LFS_CFLAGS" : 1000,  "CS_LFS_LDFLAGS" : 1001,  "CS_LFS_LIBS" : 1002,  "CS_LFS_LINTFLAGS" : 1003,  "CS_LFS64_CFLAGS" : 1004,  "CS_LFS64_LDFLAGS" : 1005,  "CS_LFS64_LIBS" : 1006,  "CS_LFS64_LINTFLAGS" : 1007,  "CS_XBS5_ILP32_OFF32_CFLAGS" : 1100,  "CS_XBS5_ILP32_OFF32_LDFLAGS" : 1101,  "CS_XBS5_ILP32_OFF32_LIBS" : 1102,  "CS_XBS5_ILP32_OFF32_LINTFLAGS" : 1103,  "CS_XBS5_ILP32_OFFBIG_CFLAGS" : 1104,  "CS_XBS5_ILP32_OFFBIG_LDFLAGS" : 1105,  "CS_XBS5_ILP32_OFFBIG_LIBS" : 1106,  "CS_XBS5_ILP32_OFFBIG_LINTFLAGS" : 1107,  "CS_XBS5_LP64_OFF64_CFLAGS" : 1108,  "CS_XBS5_LP64_OFF64_LDFLAGS" : 1109,  "CS_XBS5_LP64_OFF64_LIBS" : 1110,  "CS_XBS5_LP64_OFF64_LINTFLAGS" : 1111,  "CS_XBS5_LPBIG_OFFBIG_CFLAGS" : 1112,  "CS_XBS5_LPBIG_OFFBIG_LDFLAGS" : 1113,  "CS_XBS5_LPBIG_OFFBIG_LIBS" : 1114,  "CS_XBS5_LPBIG_OFFBIG_LINTFLAGS" : 1115,  "CS_POSIX_V6_ILP32_OFF32_CFLAGS" : 1116,  "CS_POSIX_V6_ILP32_OFF32_LDFLAGS" : 1117,  "CS_POSIX_V6_ILP32_OFF32_LIBS" : 1118,  "CS_POSIX_V6_ILP32_OFF32_LINTFLAGS" : 1119,  "CS_POSIX_V6_ILP32_OFFBIG_CFLAGS" : 1120,  "CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS" : 1121,  "CS_POSIX_V6_ILP32_OFFBIG_LIBS" : 1122,  "CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS" : 1123,  "CS_POSIX_V6_LP64_OFF64_CFLAGS" : 1124,  "CS_POSIX_V6_LP64_OFF64_LDFLAGS" : 1125,  "CS_POSIX_V6_LP64_OFF64_LIBS" : 1126,  "CS_POSIX_V6_LP64_OFF64_LINTFLAGS" : 1127,  "CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS" : 1128,  "CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS" : 1129,  "CS_POSIX_V6_LPBIG_OFFBIG_LIBS" : 1130,  "CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS" : 1131,  "CS_POSIX_V7_ILP32_OFF32_CFLAGS" : 1132,  "CS_POSIX_V7_ILP32_OFF32_LDFLAGS" : 1133,  "CS_POSIX_V7_ILP32_OFF32_LIBS" : 1134,  "CS_POSIX_V7_ILP32_OFF32_LINTFLAGS" : 1135,  "CS_POSIX_V7_ILP32_OFFBIG_CFLAGS" : 1136,  "CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS" : 1137,  "CS_POSIX_V7_ILP32_OFFBIG_LIBS" : 1138,  "CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS" : 1139,  "CS_POSIX_V7_LP64_OFF64_CFLAGS" : 1140,  "CS_POSIX_V7_LP64_OFF64_LDFLAGS" : 1141,  "CS_POSIX_V7_LP64_OFF64_LIBS" : 1142,  "CS_POSIX_V7_LP64_OFF64_LINTFLAGS" : 1143,  "CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS" : 1144,  "CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS" : 1145,  "CS_POSIX_V7_LPBIG_OFFBIG_LIBS" : 1146,  "CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS" : 1147,  "CS_V6_ENV" : 1148,  "CS_V7_ENV" : 1149, 
 "G_MODULE_BIND_LAZY" : 1,  "G_MODULE_BIND_LOCAL" : 2,  "G_MODULE_BIND_MASK" : 3, 
 "G_SETTINGS_BIND_DEFAULT" : 0,  "G_SETTINGS_BIND_GET" : 1,  "G_SETTINGS_BIND_SET" : 2,  "G_SETTINGS_BIND_NO_SENSITIVITY" : 4,  "G_SETTINGS_BIND_GET_NO_CHANGES" : 8,  "G_SETTINGS_BIND_INVERT_BOOLEAN" : 16, 

}
class __fsid_t(_rpythonic_struct_): _array_wrapper_ = True
class timespec(_rpythonic_struct_): pass
class tm(_rpythonic_struct_): pass
class itimerspec(_rpythonic_struct_): pass
class __locale_struct(_rpythonic_struct_): _array_wrapper_ = True
class __locale_data(_rpythonic_struct_): pass
class _GFloatIEEE754(ctypes.Union): pass
class _GDoubleIEEE754(ctypes.Union): pass
class mpn(_rpythonic_struct_): pass
class _GTimeVal(_rpythonic_struct_): pass
class _GBytes(_rpythonic_struct_): pass
class _GArray(_rpythonic_struct_): pass
class _GByteArray(_rpythonic_struct_): pass
class _GPtrArray(_rpythonic_struct_): pass
class _GError(_rpythonic_struct_): pass
class _GMutex(ctypes.Union): pass
class _GRWLock(_rpythonic_struct_): _array_wrapper_ = True
class _GCond(_rpythonic_struct_): _array_wrapper_ = True
class _GRecMutex(_rpythonic_struct_): _array_wrapper_ = True
class _GPrivate(_rpythonic_struct_): _array_wrapper_ = True
class _GOnce(_rpythonic_struct_): pass
class _GAsyncQueue(_rpythonic_struct_): pass
class __sigset_t(_rpythonic_struct_): _array_wrapper_ = True
class sigval(ctypes.Union): pass
class siginfo(_rpythonic_struct_): pass
class _sifields(ctypes.Union): pass
class _kill(_rpythonic_struct_): pass
class _timer(_rpythonic_struct_): pass
class _rt(_rpythonic_struct_): pass
class _sigchld(_rpythonic_struct_): pass
class _sigfault(_rpythonic_struct_): pass
class _sigpoll(_rpythonic_struct_): pass
class sigevent(_rpythonic_struct_): pass
class _sigev_un(ctypes.Union): pass
class _sigev_thread(_rpythonic_struct_): pass
class sigaction(_rpythonic_struct_): pass
class __sigaction_handler(ctypes.Union): pass
class sigvec(_rpythonic_struct_): pass
class _fpreg(_rpythonic_struct_): _array_wrapper_ = True
class _fpxreg(_rpythonic_struct_): _array_wrapper_ = True
class _xmmreg(_rpythonic_struct_): _array_wrapper_ = True
class _fpstate(_rpythonic_struct_): _array_wrapper_ = True
class sigcontext(_rpythonic_struct_): _array_wrapper_ = True
class sigstack(_rpythonic_struct_): pass
class sigaltstack(_rpythonic_struct_): pass
class _libc_fpxreg(_rpythonic_struct_): _array_wrapper_ = True
class _libc_xmmreg(_rpythonic_struct_): _array_wrapper_ = True
class _libc_fpstate(_rpythonic_struct_): _array_wrapper_ = True
class mcontext_t(_rpythonic_struct_): _array_wrapper_ = True
class ucontext(_rpythonic_struct_): pass
class pthread_attr_t(ctypes.Union): pass
class __pthread_internal_list(_rpythonic_struct_): pass
class pthread_mutex_t(ctypes.Union): pass
class __pthread_mutex_s(_rpythonic_struct_): pass
class pthread_mutexattr_t(ctypes.Union): pass
class pthread_cond_t(ctypes.Union): pass
class pthread_condattr_t(ctypes.Union): pass
class pthread_rwlock_t(ctypes.Union): pass
class __data(_rpythonic_struct_): pass
class pthread_rwlockattr_t(ctypes.Union): pass
class pthread_barrier_t(ctypes.Union): pass
class pthread_barrierattr_t(ctypes.Union): pass
class _GBookmarkFile(_rpythonic_struct_): pass
class _GChecksum(_rpythonic_struct_): pass
class _GIConv(_rpythonic_struct_): pass
class _GData(_rpythonic_struct_): pass
class _GDate(_rpythonic_struct_): pass
class _GTimeZone(_rpythonic_struct_): pass
class _GDateTime(_rpythonic_struct_): pass
class _GDir(_rpythonic_struct_): pass
class _GMemVTable(_rpythonic_struct_): pass
class _GList(_rpythonic_struct_): pass
class _GHashTable(_rpythonic_struct_): pass
class _GHashTableIter(_rpythonic_struct_): pass
class _GHmac(_rpythonic_struct_): pass
class _GHookList(_rpythonic_struct_): _array_wrapper_ = True
class _GHook(_rpythonic_struct_): pass
class _GPollFD(_rpythonic_struct_): pass
class _GSList(_rpythonic_struct_): pass
class _GMainContext(_rpythonic_struct_): pass
class _GMainLoop(_rpythonic_struct_): pass
class _GSourcePrivate(_rpythonic_struct_): pass
class _GSource(_rpythonic_struct_): pass
class _GSourceCallbackFuncs(_rpythonic_struct_): pass
class _GSourceFuncs(_rpythonic_struct_): pass
class _GDebugKey(_rpythonic_struct_): pass
class _GString(_rpythonic_struct_): pass
class _GIOChannel(_rpythonic_struct_): _array_wrapper_ = True
class _GIOFuncs(_rpythonic_struct_): pass
class _GKeyFile(_rpythonic_struct_): pass
class _GMappedFile(_rpythonic_struct_): pass
class _GMarkupParseContext(_rpythonic_struct_): pass
class _GMarkupParser(_rpythonic_struct_): pass
class _GNode(_rpythonic_struct_): pass
class _GOptionContext(_rpythonic_struct_): pass
class _GOptionGroup(_rpythonic_struct_): pass
class _GOptionEntry(_rpythonic_struct_): pass
class _GPatternSpec(_rpythonic_struct_): pass
class _GQueue(_rpythonic_struct_): pass
class _GRand(_rpythonic_struct_): pass
class _GRegex(_rpythonic_struct_): pass
class _GMatchInfo(_rpythonic_struct_): pass
class _GTokenValue(ctypes.Union): pass
class _GScannerConfig(_rpythonic_struct_): pass
class _GScanner(_rpythonic_struct_): pass
class _GSequence(_rpythonic_struct_): pass
class _GSequenceNode(_rpythonic_struct_): pass
class _GStringChunk(_rpythonic_struct_): pass
class GTestCase(_rpythonic_struct_): pass
class GTestSuite(_rpythonic_struct_): pass
class GTestConfig(_rpythonic_struct_): pass
class GTestLogMsg(_rpythonic_struct_): pass
class GTestLogBuffer(_rpythonic_struct_): pass
class _GThreadPool(_rpythonic_struct_): pass
class _GTimer(_rpythonic_struct_): pass
class _GTrashStack(_rpythonic_struct_): pass
class _GTree(_rpythonic_struct_): pass
class _GVariantType(_rpythonic_struct_): pass
class _GVariant(_rpythonic_struct_): pass
class _GVariantIter(_rpythonic_struct_): _array_wrapper_ = True
class _GVariantBuilder(_rpythonic_struct_): _array_wrapper_ = True
class _GAllocator(_rpythonic_struct_): pass
class _GMemChunk(_rpythonic_struct_): pass
class _GCache(_rpythonic_struct_): pass
class _GCompletion(_rpythonic_struct_): pass
class _GRelation(_rpythonic_struct_): pass
class _GTuples(_rpythonic_struct_): pass
class _GThread(_rpythonic_struct_): pass
class _GThreadFunctions(_rpythonic_struct_): pass
class sched_param(_rpythonic_struct_): pass
class __sched_param(_rpythonic_struct_): pass
class cpu_set_t(_rpythonic_struct_): _array_wrapper_ = True
class _pthread_cleanup_buffer(_rpythonic_struct_): pass
class __pthread_unwind_buf_t(_rpythonic_struct_): _array_wrapper_ = True
class __cancel_jmp_buf(_rpythonic_struct_): _array_wrapper_ = True
class __pthread_cleanup_frame(_rpythonic_struct_): pass
class __jmp_buf_tag(_rpythonic_struct_): pass
class GStaticMutex(_rpythonic_struct_): pass
class _GStaticRecMutex(_rpythonic_struct_): pass
class unused(ctypes.Union): pass
class _GStaticRWLock(_rpythonic_struct_): pass
class _GStaticPrivate(_rpythonic_struct_): pass
class _GTypeCValue(ctypes.Union): pass
class _GTypePlugin(_rpythonic_struct_): pass
class _GTypeClass(_rpythonic_struct_): pass
class _GTypeInstance(_rpythonic_struct_): pass
class _GTypeInterface(_rpythonic_struct_): pass
class _GTypeQuery(_rpythonic_struct_): pass
class _GTypeInfo(_rpythonic_struct_): pass
class _GTypeFundamentalInfo(_rpythonic_struct_): pass
class _GInterfaceInfo(_rpythonic_struct_): pass
class _GTypeValueTable(_rpythonic_struct_): pass
class _GValue(_rpythonic_struct_): _array_wrapper_ = True
class data(ctypes.Union): pass
class _GParamSpecPool(_rpythonic_struct_): pass
class _GParamSpec(_rpythonic_struct_): pass
class _GParamSpecClass(_rpythonic_struct_): _array_wrapper_ = True
class _GParameter(_rpythonic_struct_): pass
class _GParamSpecTypeInfo(_rpythonic_struct_): pass
class _GClosureNotifyData(_rpythonic_struct_): pass
class _GClosure(_rpythonic_struct_): pass
class _GCClosure(_rpythonic_struct_): pass
class _GSignalInvocationHint(_rpythonic_struct_): pass
class _GSignalQuery(_rpythonic_struct_): pass
class _GObject(_rpythonic_struct_): pass
class _GObjectClass(_rpythonic_struct_): _array_wrapper_ = True
class _GObjectConstructParam(_rpythonic_struct_): pass
class GWeakRef(_rpythonic_struct_): pass
class priv(ctypes.Union): pass
class _GBinding(_rpythonic_struct_): pass
class _GEnumClass(_rpythonic_struct_): pass
class _GFlagsClass(_rpythonic_struct_): pass
class _GEnumValue(_rpythonic_struct_): pass
class _GFlagsValue(_rpythonic_struct_): pass
class _GParamSpecChar(_rpythonic_struct_): pass
class _GParamSpecUChar(_rpythonic_struct_): pass
class _GParamSpecBoolean(_rpythonic_struct_): pass
class _GParamSpecInt(_rpythonic_struct_): pass
class _GParamSpecUInt(_rpythonic_struct_): pass
class _GParamSpecLong(_rpythonic_struct_): pass
class _GParamSpecULong(_rpythonic_struct_): pass
class _GParamSpecInt64(_rpythonic_struct_): pass
class _GParamSpecUInt64(_rpythonic_struct_): pass
class _GParamSpecUnichar(_rpythonic_struct_): pass
class _GParamSpecEnum(_rpythonic_struct_): pass
class _GParamSpecFlags(_rpythonic_struct_): pass
class _GParamSpecFloat(_rpythonic_struct_): pass
class _GParamSpecDouble(_rpythonic_struct_): pass
class _GParamSpecString(_rpythonic_struct_): pass
class _GParamSpecParam(_rpythonic_struct_): pass
class _GParamSpecBoxed(_rpythonic_struct_): pass
class _GParamSpecPointer(_rpythonic_struct_): pass
class _GParamSpecValueArray(_rpythonic_struct_): pass
class _GParamSpecObject(_rpythonic_struct_): pass
class _GParamSpecOverride(_rpythonic_struct_): pass
class _GParamSpecGType(_rpythonic_struct_): pass
class _GParamSpecVariant(_rpythonic_struct_): _array_wrapper_ = True
class _GTypeModule(_rpythonic_struct_): pass
class _GTypeModuleClass(_rpythonic_struct_): pass
class _GTypePluginClass(_rpythonic_struct_): pass
class _GValueArray(_rpythonic_struct_): pass
class _GAppInfo(_rpythonic_struct_): pass
class _GAsyncResult(_rpythonic_struct_): pass
class _GAsyncInitable(_rpythonic_struct_): pass
class _GCharsetConverter(_rpythonic_struct_): pass
class _GConverter(_rpythonic_struct_): pass
class _GSimplePermission(_rpythonic_struct_): pass
class _GZlibCompressor(_rpythonic_struct_): pass
class _GZlibDecompressor(_rpythonic_struct_): pass
class _GRemoteActionGroup(_rpythonic_struct_): pass
class _GDBusActionGroup(_rpythonic_struct_): pass
class _GActionMap(_rpythonic_struct_): pass
class _GActionGroup(_rpythonic_struct_): pass
class _GSimpleAction(_rpythonic_struct_): pass
class _GAction(_rpythonic_struct_): pass
class _GSettingsBackend(_rpythonic_struct_): pass
class _GDrive(_rpythonic_struct_): pass
class _GFile(_rpythonic_struct_): pass
class _GFileInfo(_rpythonic_struct_): pass
class _GFileAttributeMatcher(_rpythonic_struct_): pass
class _GFileDescriptorBased(_rpythonic_struct_): pass
class _GFileIcon(_rpythonic_struct_): pass
class _GFilenameCompleter(_rpythonic_struct_): pass
class _GIcon(_rpythonic_struct_): pass
class _GInitable(_rpythonic_struct_): pass
class _GIOModule(_rpythonic_struct_): pass
class _GIOExtensionPoint(_rpythonic_struct_): pass
class _GIOExtension(_rpythonic_struct_): pass
class _GIOSchedulerJob(_rpythonic_struct_): pass
class _GIOStreamAdapter(_rpythonic_struct_): pass
class _GLoadableIcon(_rpythonic_struct_): pass
class _GMount(_rpythonic_struct_): pass
class _GNetworkMonitor(_rpythonic_struct_): pass
class _GPollableInputStream(_rpythonic_struct_): pass
class _GPollableOutputStream(_rpythonic_struct_): pass
class _GResource(_rpythonic_struct_): pass
class _GSeekable(_rpythonic_struct_): pass
class _GSimpleAsyncResult(_rpythonic_struct_): pass
class _GSocketConnectable(_rpythonic_struct_): pass
class _GSrvTarget(_rpythonic_struct_): pass
class _GThemedIcon(_rpythonic_struct_): pass
class _GTlsClientConnection(_rpythonic_struct_): pass
class _GTlsFileDatabase(_rpythonic_struct_): pass
class _GTlsServerConnection(_rpythonic_struct_): pass
class _GProxyResolver(_rpythonic_struct_): pass
class _GProxy(_rpythonic_struct_): pass
class _GVolume(_rpythonic_struct_): pass
class _GInputVector(_rpythonic_struct_): pass
class _GOutputVector(_rpythonic_struct_): pass
class _GCredentials(_rpythonic_struct_): pass
class _GUnixCredentialsMessage(_rpythonic_struct_): pass
class _GUnixFDList(_rpythonic_struct_): pass
class _GDBusMessage(_rpythonic_struct_): pass
class _GDBusConnection(_rpythonic_struct_): pass
class _GDBusMethodInvocation(_rpythonic_struct_): pass
class _GDBusServer(_rpythonic_struct_): pass
class _GDBusAuthObserver(_rpythonic_struct_): pass
class _GDBusInterface(_rpythonic_struct_): pass
class _GDBusObject(_rpythonic_struct_): pass
class _GDBusObjectManager(_rpythonic_struct_): pass
class _GActionInterface(_rpythonic_struct_): pass
class _GActionGroupInterface(_rpythonic_struct_): pass
class _GActionMapInterface(_rpythonic_struct_): pass
class _GActionEntry(_rpythonic_struct_): _array_wrapper_ = True
class _GAppLaunchContextPrivate(_rpythonic_struct_): pass
class _GAppInfoIface(_rpythonic_struct_): pass
class _GAppLaunchContext(_rpythonic_struct_): pass
class _GAppLaunchContextClass(_rpythonic_struct_): pass
class _GApplicationPrivate(_rpythonic_struct_): pass
class _GApplication(_rpythonic_struct_): pass
class _GApplicationClass(_rpythonic_struct_): _array_wrapper_ = True
class _GApplicationCommandLinePrivate(_rpythonic_struct_): pass
class _GApplicationCommandLine(_rpythonic_struct_): pass
class _GApplicationCommandLineClass(_rpythonic_struct_): _array_wrapper_ = True
class _GInitableIface(_rpythonic_struct_): pass
class _GAsyncInitableIface(_rpythonic_struct_): pass
class _GAsyncResultIface(_rpythonic_struct_): pass
class _GInputStreamPrivate(_rpythonic_struct_): pass
class _GInputStream(_rpythonic_struct_): pass
class _GInputStreamClass(_rpythonic_struct_): pass
class _GFilterInputStream(_rpythonic_struct_): pass
class _GFilterInputStreamClass(_rpythonic_struct_): pass
class _GBufferedInputStreamPrivate(_rpythonic_struct_): pass
class _GBufferedInputStream(_rpythonic_struct_): pass
class _GBufferedInputStreamClass(_rpythonic_struct_): pass
class _GOutputStreamPrivate(_rpythonic_struct_): pass
class _GOutputStream(_rpythonic_struct_): pass
class _GOutputStreamClass(_rpythonic_struct_): pass
class _GFilterOutputStream(_rpythonic_struct_): pass
class _GFilterOutputStreamClass(_rpythonic_struct_): pass
class _GBufferedOutputStreamPrivate(_rpythonic_struct_): pass
class _GBufferedOutputStream(_rpythonic_struct_): pass
class _GBufferedOutputStreamClass(_rpythonic_struct_): pass
class _GCancellablePrivate(_rpythonic_struct_): pass
class _GCancellable(_rpythonic_struct_): pass
class _GCancellableClass(_rpythonic_struct_): pass
class _GConverterIface(_rpythonic_struct_): pass
class _GCharsetConverterClass(_rpythonic_struct_): pass
class _GConverterInputStreamPrivate(_rpythonic_struct_): pass
class _GConverterInputStream(_rpythonic_struct_): pass
class _GConverterInputStreamClass(_rpythonic_struct_): pass
class _GConverterOutputStreamPrivate(_rpythonic_struct_): pass
class _GConverterOutputStream(_rpythonic_struct_): pass
class _GConverterOutputStreamClass(_rpythonic_struct_): pass
class timeval(_rpythonic_struct_): pass
class fd_set(_rpythonic_struct_): _array_wrapper_ = True
class _GCredentialsClass(_rpythonic_struct_): pass
class _GDataInputStreamPrivate(_rpythonic_struct_): pass
class _GDataInputStream(_rpythonic_struct_): pass
class _GDataInputStreamClass(_rpythonic_struct_): pass
class _GDataOutputStreamPrivate(_rpythonic_struct_): pass
class _GDataOutputStream(_rpythonic_struct_): pass
class _GDataOutputStreamClass(_rpythonic_struct_): pass
class _GDBusInterfaceVTable(_rpythonic_struct_): _array_wrapper_ = True
class _GDBusSubtreeVTable(_rpythonic_struct_): _array_wrapper_ = True
class _GDBusErrorEntry(_rpythonic_struct_): pass
class _GDBusAnnotationInfo(_rpythonic_struct_): pass
class _GDBusArgInfo(_rpythonic_struct_): pass
class _GDBusMethodInfo(_rpythonic_struct_): pass
class _GDBusSignalInfo(_rpythonic_struct_): pass
class _GDBusPropertyInfo(_rpythonic_struct_): pass
class _GDBusInterfaceInfo(_rpythonic_struct_): pass
class _GDBusNodeInfo(_rpythonic_struct_): pass
class _GDBusProxyPrivate(_rpythonic_struct_): pass
class _GDBusProxy(_rpythonic_struct_): pass
class _GDBusProxyClass(_rpythonic_struct_): _array_wrapper_ = True
class _GDriveIface(_rpythonic_struct_): pass
class _GIconIface(_rpythonic_struct_): pass
class _GEmblem(_rpythonic_struct_): pass
class _GEmblemClass(_rpythonic_struct_): pass
class _GEmblemedIconPrivate(_rpythonic_struct_): pass
class _GEmblemedIcon(_rpythonic_struct_): pass
class _GEmblemedIconClass(_rpythonic_struct_): pass
class _GFileAttributeInfo(_rpythonic_struct_): pass
class _GFileAttributeInfoList(_rpythonic_struct_): pass
class _GFileEnumeratorPrivate(_rpythonic_struct_): pass
class _GFileEnumerator(_rpythonic_struct_): pass
class _GFileEnumeratorClass(_rpythonic_struct_): pass
class _GFileIface(_rpythonic_struct_): pass
class _GFileIconClass(_rpythonic_struct_): pass
class _GFileInfoClass(_rpythonic_struct_): pass
class _GFileInputStreamPrivate(_rpythonic_struct_): pass
class _GFileInputStream(_rpythonic_struct_): pass
class _GFileInputStreamClass(_rpythonic_struct_): pass
class _GIOStreamPrivate(_rpythonic_struct_): pass
class _GIOStream(_rpythonic_struct_): pass
class _GIOStreamClass(_rpythonic_struct_): pass
class _GFileIOStreamPrivate(_rpythonic_struct_): pass
class _GFileIOStream(_rpythonic_struct_): pass
class _GFileIOStreamClass(_rpythonic_struct_): pass
class _GFileMonitorPrivate(_rpythonic_struct_): pass
class _GFileMonitor(_rpythonic_struct_): pass
class _GFileMonitorClass(_rpythonic_struct_): pass
class _GFilenameCompleterClass(_rpythonic_struct_): pass
class _GFileOutputStreamPrivate(_rpythonic_struct_): pass
class _GFileOutputStream(_rpythonic_struct_): pass
class _GFileOutputStreamClass(_rpythonic_struct_): pass
class _GInetAddressPrivate(_rpythonic_struct_): pass
class _GInetAddress(_rpythonic_struct_): pass
class _GInetAddressClass(_rpythonic_struct_): pass
class _GInetAddressMaskPrivate(_rpythonic_struct_): pass
class _GInetAddressMask(_rpythonic_struct_): pass
class _GInetAddressMaskClass(_rpythonic_struct_): pass
class _GSocketAddress(_rpythonic_struct_): pass
class _GSocketAddressClass(_rpythonic_struct_): pass
class _GInetSocketAddressPrivate(_rpythonic_struct_): pass
class _GInetSocketAddress(_rpythonic_struct_): pass
class _GInetSocketAddressClass(_rpythonic_struct_): pass
class _GModule(_rpythonic_struct_): pass
class _GIOModuleScope(_rpythonic_struct_): pass
class _GIOModuleClass(_rpythonic_struct_): pass
class _GLoadableIconIface(_rpythonic_struct_): pass
class _GMemoryInputStreamPrivate(_rpythonic_struct_): pass
class _GMemoryInputStream(_rpythonic_struct_): pass
class _GMemoryInputStreamClass(_rpythonic_struct_): pass
class _GMemoryOutputStreamPrivate(_rpythonic_struct_): pass
class _GMemoryOutputStream(_rpythonic_struct_): pass
class _GMemoryOutputStreamClass(_rpythonic_struct_): pass
class _GMountIface(_rpythonic_struct_): pass
class _GMountOperationPrivate(_rpythonic_struct_): pass
class _GMountOperation(_rpythonic_struct_): pass
class _GMountOperationClass(_rpythonic_struct_): pass
class _GVolumeMonitor(_rpythonic_struct_): pass
class _GVolumeMonitorClass(_rpythonic_struct_): pass
class _GNativeVolumeMonitor(_rpythonic_struct_): pass
class _GNativeVolumeMonitorClass(_rpythonic_struct_): pass
class _GNetworkAddressPrivate(_rpythonic_struct_): pass
class _GNetworkAddress(_rpythonic_struct_): pass
class _GNetworkAddressClass(_rpythonic_struct_): pass
class _GNetworkMonitorInterface(_rpythonic_struct_): pass
class _GNetworkServicePrivate(_rpythonic_struct_): pass
class _GNetworkService(_rpythonic_struct_): pass
class _GNetworkServiceClass(_rpythonic_struct_): pass
class _GPermissionPrivate(_rpythonic_struct_): pass
class _GPermission(_rpythonic_struct_): pass
class _GPermissionClass(_rpythonic_struct_): _array_wrapper_ = True
class _GPollableInputStreamInterface(_rpythonic_struct_): pass
class _GPollableOutputStreamInterface(_rpythonic_struct_): pass
class _GProxyInterface(_rpythonic_struct_): pass
class _GProxyAddressPrivate(_rpythonic_struct_): pass
class _GProxyAddress(_rpythonic_struct_): pass
class _GProxyAddressClass(_rpythonic_struct_): pass
class _GSocketAddressEnumerator(_rpythonic_struct_): pass
class _GSocketAddressEnumeratorClass(_rpythonic_struct_): pass
class _GProxyAddressEnumeratorPrivate(_rpythonic_struct_): pass
class _GProxyAddressEnumerator(_rpythonic_struct_): pass
class _GProxyAddressEnumeratorClass(_rpythonic_struct_): pass
class _GProxyResolverInterface(_rpythonic_struct_): pass
class _GResolverPrivate(_rpythonic_struct_): pass
class _GResolver(_rpythonic_struct_): pass
class _GResolverClass(_rpythonic_struct_): pass
class _GStaticResource(_rpythonic_struct_): pass
class _GSeekableIface(_rpythonic_struct_): pass
class _GSettingsSchemaSource(_rpythonic_struct_): pass
class _GSettingsSchema(_rpythonic_struct_): pass
class _GSettingsPrivate(_rpythonic_struct_): pass
class _GSettingsClass(_rpythonic_struct_): _array_wrapper_ = True
class _GSettings(_rpythonic_struct_): pass
class _GSimpleActionGroupPrivate(_rpythonic_struct_): pass
class _GSimpleActionGroup(_rpythonic_struct_): pass
class _GSimpleActionGroupClass(_rpythonic_struct_): _array_wrapper_ = True
class _GSimpleAsyncResultClass(_rpythonic_struct_): pass
class _GSocketClientPrivate(_rpythonic_struct_): pass
class _GSocketClientClass(_rpythonic_struct_): pass
class _GSocketClient(_rpythonic_struct_): pass
class _GSocketConnectableIface(_rpythonic_struct_): pass
class _GSocketPrivate(_rpythonic_struct_): pass
class _GSocketClass(_rpythonic_struct_): pass
class _GSocket(_rpythonic_struct_): pass
class _GSocketConnectionPrivate(_rpythonic_struct_): pass
class _GSocketConnectionClass(_rpythonic_struct_): pass
class _GSocketConnection(_rpythonic_struct_): pass
class _GSocketControlMessagePrivate(_rpythonic_struct_): pass
class _GSocketControlMessageClass(_rpythonic_struct_): pass
class _GSocketControlMessage(_rpythonic_struct_): pass
class _GSocketListenerPrivate(_rpythonic_struct_): pass
class _GSocketListenerClass(_rpythonic_struct_): pass
class _GSocketListener(_rpythonic_struct_): pass
class _GSocketServicePrivate(_rpythonic_struct_): pass
class _GSocketServiceClass(_rpythonic_struct_): pass
class _GSocketService(_rpythonic_struct_): pass
class _GTcpConnectionPrivate(_rpythonic_struct_): pass
class _GTcpConnectionClass(_rpythonic_struct_): pass
class _GTcpConnection(_rpythonic_struct_): pass
class _GTcpWrapperConnectionPrivate(_rpythonic_struct_): pass
class _GTcpWrapperConnectionClass(_rpythonic_struct_): pass
class _GTcpWrapperConnection(_rpythonic_struct_): pass
class _GThemedIconClass(_rpythonic_struct_): pass
class _GThreadedSocketServicePrivate(_rpythonic_struct_): pass
class _GThreadedSocketServiceClass(_rpythonic_struct_): pass
class _GThreadedSocketService(_rpythonic_struct_): pass
class _GTlsBackend(_rpythonic_struct_): pass
class _GTlsBackendInterface(_rpythonic_struct_): pass
class _GTlsCertificatePrivate(_rpythonic_struct_): pass
class _GTlsCertificate(_rpythonic_struct_): pass
class _GTlsCertificateClass(_rpythonic_struct_): _array_wrapper_ = True
class _GTlsConnectionPrivate(_rpythonic_struct_): pass
class _GTlsConnection(_rpythonic_struct_): pass
class _GTlsConnectionClass(_rpythonic_struct_): _array_wrapper_ = True
class _GTlsClientConnectionInterface(_rpythonic_struct_): pass
class _GTlsDatabasePrivate(_rpythonic_struct_): pass
class _GTlsDatabase(_rpythonic_struct_): pass
class _GTlsDatabaseClass(_rpythonic_struct_): _array_wrapper_ = True
class _GTlsFileDatabaseInterface(_rpythonic_struct_): _array_wrapper_ = True
class _GTlsInteractionPrivate(_rpythonic_struct_): pass
class _GTlsInteraction(_rpythonic_struct_): pass
class _GTlsInteractionClass(_rpythonic_struct_): _array_wrapper_ = True
class _GTlsServerConnectionInterface(_rpythonic_struct_): pass
class _GTlsPasswordPrivate(_rpythonic_struct_): pass
class _GTlsPassword(_rpythonic_struct_): pass
class _GTlsPasswordClass(_rpythonic_struct_): _array_wrapper_ = True
class _GVfs(_rpythonic_struct_): pass
class _GVfsClass(_rpythonic_struct_): pass
class _GVolumeIface(_rpythonic_struct_): pass
class _GZlibCompressorClass(_rpythonic_struct_): pass
class _GZlibDecompressorClass(_rpythonic_struct_): pass
class _GDBusInterfaceIface(_rpythonic_struct_): pass
class _GDBusInterfaceSkeletonPrivate(_rpythonic_struct_): pass
class _GDBusInterfaceSkeleton(_rpythonic_struct_): pass
class _GDBusInterfaceSkeletonClass(_rpythonic_struct_): _array_wrapper_ = True
class _GDBusObjectIface(_rpythonic_struct_): pass
class _GDBusObjectSkeletonPrivate(_rpythonic_struct_): pass
class _GDBusObjectSkeleton(_rpythonic_struct_): pass
class _GDBusObjectSkeletonClass(_rpythonic_struct_): _array_wrapper_ = True
class _GDBusObjectProxyPrivate(_rpythonic_struct_): pass
class _GDBusObjectProxy(_rpythonic_struct_): pass
class _GDBusObjectProxyClass(_rpythonic_struct_): _array_wrapper_ = True
class _GDBusObjectManagerIface(_rpythonic_struct_): pass
class _GDBusObjectManagerClientPrivate(_rpythonic_struct_): pass
class _GDBusObjectManagerClient(_rpythonic_struct_): pass
class _GDBusObjectManagerClientClass(_rpythonic_struct_): _array_wrapper_ = True
class _GDBusObjectManagerServerPrivate(_rpythonic_struct_): pass
class _GDBusObjectManagerServer(_rpythonic_struct_): pass
class _GDBusObjectManagerServerClass(_rpythonic_struct_): _array_wrapper_ = True
class _GRemoteActionGroupInterface(_rpythonic_struct_): pass
class _GMenuModelPrivate(_rpythonic_struct_): pass
class _GMenuAttributeIterPrivate(_rpythonic_struct_): pass
class _GMenuLinkIterPrivate(_rpythonic_struct_): pass
class _GMenuModel(_rpythonic_struct_): pass
class _GMenuModelClass(_rpythonic_struct_): pass
class _GMenuAttributeIter(_rpythonic_struct_): pass
class _GMenuAttributeIterClass(_rpythonic_struct_): pass
class _GMenuLinkIter(_rpythonic_struct_): pass
class _GMenuLinkIterClass(_rpythonic_struct_): pass
class _GMenuItem(_rpythonic_struct_): pass
class _GMenu(_rpythonic_struct_): pass
class _GDBusMenuModel(_rpythonic_struct_): pass
## union and structures ##
__freeze_rpythonic_struct( __fsid_t, [
	( "__val", ( ctypes.c_int * 2 ) ),
])

__freeze_rpythonic_struct( timespec, [
	( "tv_sec", ctypes.c_int64 ),
	( "tv_nsec", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( tm, [
	( "tm_sec", ctypes.c_int ),
	( "tm_min", ctypes.c_int ),
	( "tm_hour", ctypes.c_int ),
	( "tm_mday", ctypes.c_int ),
	( "tm_mon", ctypes.c_int ),
	( "tm_year", ctypes.c_int ),
	( "tm_wday", ctypes.c_int ),
	( "tm_yday", ctypes.c_int ),
	( "tm_isdst", ctypes.c_int ),
	( "tm_gmtoff", ctypes.c_int64 ),
	( "tm_zone", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( itimerspec, [
	( "it_interval", timespec ),
	( "it_value", timespec ),
])

__freeze_rpythonic_struct( __locale_data, [
])

__freeze_rpythonic_struct( __locale_struct, [
	( "__locales", ctypes.POINTER(( __locale_data * 13 )) ),
	( "__ctype_b", ctypes.POINTER(ctypes.c_uint16) ),
	( "__ctype_tolower", ctypes.POINTER(ctypes.c_int) ),
	( "__ctype_toupper", ctypes.POINTER(ctypes.c_int) ),
	( "__names", ctypes.POINTER(( ctypes.c_char * 13 )) ),
])

__freeze_rpythonic_struct( mpn, [
	( "mantissa_low", ctypes.c_uint ),
	( "mantissa_high", ctypes.c_uint ),
	( "biased_exponent", ctypes.c_uint ),
	( "sign", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GFloatIEEE754, [
	( "v_float", ctypes.c_float ),
	( "mpn", mpn ),
])

__freeze_rpythonic_struct( _GDoubleIEEE754, [
	( "v_double", ctypes.c_double ),
	( "mpn", mpn ),
])

__freeze_rpythonic_struct( _GTimeVal, [
	( "tv_sec", ctypes.c_long ),
	( "tv_usec", ctypes.c_long ),
])

__freeze_rpythonic_struct( _GBytes, [
])

__freeze_rpythonic_struct( _GArray, [
	( "data", ctypes.POINTER(ctypes.c_char) ),
	( "C_len", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GByteArray, [
	( "data", ctypes.POINTER(ctypes.c_ubyte) ),
	( "C_len", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GPtrArray, [
	( "pdata", ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)) ),
	( "C_len", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GError, [
	( "domain", ctypes.c_uint ),
	( "code", ctypes.c_int ),
	( "message", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( _GMutex, [
	( "p", ctypes.POINTER(ctypes.c_void_p) ),
	( "i", ( ctypes.c_uint * 2 ) ),
])

__freeze_rpythonic_struct( _GRWLock, [
	( "p", ctypes.POINTER(ctypes.c_void_p) ),
	( "i", ( ctypes.c_uint * 2 ) ),
])

__freeze_rpythonic_struct( _GCond, [
	( "p", ctypes.POINTER(ctypes.c_void_p) ),
	( "i", ( ctypes.c_uint * 2 ) ),
])

__freeze_rpythonic_struct( _GRecMutex, [
	( "p", ctypes.POINTER(ctypes.c_void_p) ),
	( "i", ( ctypes.c_uint * 2 ) ),
])

__freeze_rpythonic_struct( _GPrivate, [
	( "p", ctypes.POINTER(ctypes.c_void_p) ),
	( "notify", ctypes.CFUNCTYPE(ctypes.c_void_p, ) ),
	( "future", ctypes.POINTER(( ctypes.c_void_p * 2 )) ),
])

__freeze_rpythonic_struct( _GOnce, [
	( "status", ctypes.c_int ),
	( "retval", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GAsyncQueue, [
])

__freeze_rpythonic_struct( __sigset_t, [
	( "__val", ctypes.c_uint64 ),
])

__freeze_rpythonic_struct( sigval, [
	( "sival_int", ctypes.c_int ),
	( "sival_ptr", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _kill, [
	( "si_pid", ctypes.c_int ),
	( "si_uid", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _timer, [
	( "si_tid", ctypes.c_int ),
	( "si_overrun", ctypes.c_int ),
	( "si_sigval", sigval ),
])

__freeze_rpythonic_struct( _rt, [
	( "si_pid", ctypes.c_int ),
	( "si_uid", ctypes.c_uint ),
	( "si_sigval", sigval ),
])

__freeze_rpythonic_struct( _sigchld, [
	( "si_pid", ctypes.c_int ),
	( "si_uid", ctypes.c_uint ),
	( "si_status", ctypes.c_int ),
	( "si_utime", ctypes.c_int64 ),
	( "si_stime", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( _sigfault, [
	( "si_addr", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _sigpoll, [
	( "si_band", ctypes.c_int64 ),
	( "si_fd", ctypes.c_int ),
])

__freeze_rpythonic_struct( _sifields, [
	( "_pad", ctypes.c_int ),
	( "_kill", _kill ),
	( "_timer", _timer ),
	( "_rt", _rt ),
	( "_sigchld", _sigchld ),
	( "_sigfault", _sigfault ),
	( "_sigpoll", _sigpoll ),
])

__freeze_rpythonic_struct( siginfo, [
	( "si_signo", ctypes.c_int ),
	( "si_errno", ctypes.c_int ),
	( "si_code", ctypes.c_int ),
	( "_sifields", _sifields ),
])

__freeze_rpythonic_struct( _sigev_thread, [
	( "_function", ctypes.c_void_p ),
	( "_attribute", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _sigev_un, [
	( "_pad", ctypes.c_int ),
	( "_tid", ctypes.c_int ),
	( "_sigev_thread", _sigev_thread ),
])

__freeze_rpythonic_struct( sigevent, [
	( "sigev_value", sigval ),
	( "sigev_signo", ctypes.c_int ),
	( "sigev_notify", ctypes.c_int ),
	( "_sigev_un", _sigev_un ),
])

__freeze_rpythonic_struct( __sigaction_handler, [
	( "sa_handler", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,) ),
	( "sa_sigaction", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( sigaction, [
	( "__sigaction_handler", __sigaction_handler ),
	( "sa_mask", __sigset_t ),
	( "sa_flags", ctypes.c_int ),
	( "sa_restorer", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( sigvec, [
	( "sv_handler", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,) ),
	( "sv_mask", ctypes.c_int ),
	( "sv_flags", ctypes.c_int ),
])

__freeze_rpythonic_struct( _fpreg, [
	( "significand", ( ctypes.c_ushort * 4 ) ),
	( "exponent", ctypes.c_ushort ),
])

__freeze_rpythonic_struct( _fpxreg, [
	( "significand", ( ctypes.c_ushort * 4 ) ),
	( "exponent", ctypes.c_ushort ),
	( "padding", ( ctypes.c_ushort * 3 ) ),
])

__freeze_rpythonic_struct( _xmmreg, [
	( "element", ( ctypes.c_uint * 4 ) ),
])

__freeze_rpythonic_struct( _fpstate, [
	( "cwd", ctypes.c_uint16 ),
	( "swd", ctypes.c_uint16 ),
	( "ftw", ctypes.c_uint16 ),
	( "fop", ctypes.c_uint16 ),
	( "rip", ctypes.c_uint64 ),
	( "rdp", ctypes.c_uint64 ),
	( "mxcsr", ctypes.c_uint ),
	( "mxcr_mask", ctypes.c_uint ),
	( "_st", ( _fpxreg * 8 ) ),
	( "_xmm", ( _xmmreg * 16 ) ),
	( "padding", ( ctypes.c_uint * 24 ) ),
])

__freeze_rpythonic_struct( sigcontext, [
	( "r8", ctypes.c_ulong ),
	( "r9", ctypes.c_ulong ),
	( "r10", ctypes.c_ulong ),
	( "r11", ctypes.c_ulong ),
	( "r12", ctypes.c_ulong ),
	( "r13", ctypes.c_ulong ),
	( "r14", ctypes.c_ulong ),
	( "r15", ctypes.c_ulong ),
	( "rdi", ctypes.c_ulong ),
	( "rsi", ctypes.c_ulong ),
	( "rbp", ctypes.c_ulong ),
	( "rbx", ctypes.c_ulong ),
	( "rdx", ctypes.c_ulong ),
	( "rax", ctypes.c_ulong ),
	( "rcx", ctypes.c_ulong ),
	( "rsp", ctypes.c_ulong ),
	( "rip", ctypes.c_ulong ),
	( "eflags", ctypes.c_ulong ),
	( "cs", ctypes.c_ushort ),
	( "gs", ctypes.c_ushort ),
	( "fs", ctypes.c_ushort ),
	( "__pad0", ctypes.c_ushort ),
	( "err", ctypes.c_ulong ),
	( "trapno", ctypes.c_ulong ),
	( "oldmask", ctypes.c_ulong ),
	( "cr2", ctypes.c_ulong ),
	( "fpstate", ctypes.POINTER(_fpstate) ),
	( "__reserved1", ( ctypes.c_ulong * 8 ) ),
])

__freeze_rpythonic_struct( sigstack, [
	( "ss_sp", ctypes.POINTER(ctypes.c_void_p) ),
	( "ss_onstack", ctypes.c_int ),
])

__freeze_rpythonic_struct( sigaltstack, [
	( "ss_sp", ctypes.POINTER(ctypes.c_void_p) ),
	( "ss_flags", ctypes.c_int ),
	( "ss_size", ctypes.c_uint64 ),
])

__freeze_rpythonic_struct( _libc_fpxreg, [
	( "significand", ( ctypes.c_uint16 * 4 ) ),
	( "exponent", ctypes.c_uint16 ),
	( "padding", ( ctypes.c_uint16 * 3 ) ),
])

__freeze_rpythonic_struct( _libc_xmmreg, [
	( "element", ( ctypes.c_uint * 4 ) ),
])

__freeze_rpythonic_struct( _libc_fpstate, [
	( "cwd", ctypes.c_uint16 ),
	( "swd", ctypes.c_uint16 ),
	( "ftw", ctypes.c_uint16 ),
	( "fop", ctypes.c_uint16 ),
	( "rip", ctypes.c_uint64 ),
	( "rdp", ctypes.c_uint64 ),
	( "mxcsr", ctypes.c_uint ),
	( "mxcr_mask", ctypes.c_uint ),
	( "_st", ( _libc_fpxreg * 8 ) ),
	( "_xmm", ( _libc_xmmreg * 16 ) ),
	( "padding", ( ctypes.c_uint * 24 ) ),
])

__freeze_rpythonic_struct( mcontext_t, [
	( "gregs", ( ctypes.c_int64 * 23 ) ),
	( "fpregs", ctypes.POINTER(_libc_fpstate) ),
	( "__reserved1", ( ctypes.c_ulong * 8 ) ),
])

__freeze_rpythonic_struct( ucontext, [
	( "uc_flags", ctypes.c_uint64 ),
	( "uc_link", ctypes.POINTER(ucontext) ),
	( "uc_stack", sigaltstack ),
	( "uc_mcontext", mcontext_t ),
	( "uc_sigmask", __sigset_t ),
	( "__fpregs_mem", _libc_fpstate ),
])

__freeze_rpythonic_struct( pthread_attr_t, [
	( "__size", ( ctypes.c_char * 56 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( __pthread_internal_list, [
	( "__prev", ctypes.POINTER(__pthread_internal_list) ),
	( "__next", ctypes.POINTER(__pthread_internal_list) ),
])

__freeze_rpythonic_struct( __pthread_mutex_s, [
	( "__lock", ctypes.c_int ),
	( "__count", ctypes.c_uint ),
	( "__owner", ctypes.c_int ),
	( "__nusers", ctypes.c_uint ),
	( "__kind", ctypes.c_int ),
	( "__spins", ctypes.c_int ),
	( "__list", __pthread_internal_list ),
])

__freeze_rpythonic_struct( pthread_mutex_t, [
	( "__data", __pthread_mutex_s ),
	( "__size", ( ctypes.c_char * 40 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_mutexattr_t, [
	( "__size", ( ctypes.c_char * 4 ) ),
	( "__align", ctypes.c_int ),
])

__freeze_rpythonic_struct( __data, [
	( "__lock", ctypes.c_int ),
	( "__nr_readers", ctypes.c_uint ),
	( "__readers_wakeup", ctypes.c_uint ),
	( "__writer_wakeup", ctypes.c_uint ),
	( "__nr_readers_queued", ctypes.c_uint ),
	( "__nr_writers_queued", ctypes.c_uint ),
	( "__writer", ctypes.c_int ),
	( "__shared", ctypes.c_int ),
	( "__pad1", ctypes.c_uint64 ),
	( "__pad2", ctypes.c_uint64 ),
	( "__flags", ctypes.c_uint ),
])

__freeze_rpythonic_struct( pthread_cond_t, [
	( "__data", __data ),
	( "__size", ( ctypes.c_char * 48 ) ),
	( "__align", ctypes.c_longlong ),
])

__freeze_rpythonic_struct( pthread_condattr_t, [
	( "__size", ( ctypes.c_char * 4 ) ),
	( "__align", ctypes.c_int ),
])

__freeze_rpythonic_struct( pthread_rwlock_t, [
	( "__data", __data ),
	( "__size", ( ctypes.c_char * 56 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_rwlockattr_t, [
	( "__size", ( ctypes.c_char * 8 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_barrier_t, [
	( "__size", ( ctypes.c_char * 32 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_barrierattr_t, [
	( "__size", ( ctypes.c_char * 4 ) ),
	( "__align", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GBookmarkFile, [
])

__freeze_rpythonic_struct( _GChecksum, [
])

__freeze_rpythonic_struct( _GIConv, [
])

__freeze_rpythonic_struct( _GData, [
])

__freeze_rpythonic_struct( _GDate, [
	( "julian_days", ctypes.c_uint ),
	( "julian", ctypes.c_uint ),
	( "dmy", ctypes.c_uint ),
	( "day", ctypes.c_uint ),
	( "month", ctypes.c_uint ),
	( "year", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GTimeZone, [
])

__freeze_rpythonic_struct( _GDateTime, [
])

__freeze_rpythonic_struct( _GDir, [
])

__freeze_rpythonic_struct( _GMemVTable, [
	( "malloc", ctypes.POINTER(ctypes.c_void_p) ),
	( "realloc", ctypes.POINTER(ctypes.c_void_p) ),
	( "free", ctypes.c_void_p ),
	( "calloc", ctypes.POINTER(ctypes.c_void_p) ),
	( "try_malloc", ctypes.POINTER(ctypes.c_void_p) ),
	( "try_realloc", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GList, [
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
	( "next", ctypes.POINTER(_GList) ),
	( "prev", ctypes.POINTER(_GList) ),
])

__freeze_rpythonic_struct( _GHashTable, [
])

__freeze_rpythonic_struct( _GHashTableIter, [
	( "dummy1", ctypes.POINTER(ctypes.c_void_p) ),
	( "dummy2", ctypes.POINTER(ctypes.c_void_p) ),
	( "dummy3", ctypes.POINTER(ctypes.c_void_p) ),
	( "dummy4", ctypes.c_int ),
	( "dummy5", ctypes.c_int ),
	( "dummy6", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GHmac, [
])

__freeze_rpythonic_struct( _GHook, [
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
	( "next", ctypes.POINTER(_GHook) ),
	( "prev", ctypes.POINTER(_GHook) ),
	( "ref_count", ctypes.c_uint ),
	( "hook_id", ctypes.c_ulong ),
	( "flags", ctypes.c_uint ),
	( "func", ctypes.POINTER(ctypes.c_void_p) ),
	( "destroy", ctypes.CFUNCTYPE(ctypes.c_void_p, ) ),
])

__freeze_rpythonic_struct( _GHookList, [
	( "seq_id", ctypes.c_ulong ),
	( "hook_size", ctypes.c_uint ),
	( "is_setup", ctypes.c_uint ),
	( "hooks", ctypes.POINTER(_GHook) ),
	( "dummy3", ctypes.POINTER(ctypes.c_void_p) ),
	( "finalize_hook", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GHookList),ctypes.POINTER(_GHook),) ),
	( "dummy", ctypes.POINTER(( ctypes.c_void_p * 2 )) ),
])

__freeze_rpythonic_struct( _GPollFD, [
	( "fd", ctypes.c_int ),
	( "events", ctypes.c_ushort ),
	( "revents", ctypes.c_ushort ),
])

__freeze_rpythonic_struct( _GSList, [
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
	( "next", ctypes.POINTER(_GSList) ),
])

__freeze_rpythonic_struct( _GMainContext, [
])

__freeze_rpythonic_struct( _GMainLoop, [
])

__freeze_rpythonic_struct( _GSourcePrivate, [
])

__freeze_rpythonic_struct( _GSourceCallbackFuncs, [
	( "ref", ctypes.c_void_p ),
	( "unref", ctypes.c_void_p ),
	( "get", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GSourceFuncs, [
	( "prepare", ctypes.c_void_p ),
	( "check", ctypes.c_void_p ),
	( "dispatch", ctypes.c_void_p ),
	( "finalize", ctypes.c_void_p ),
	( "closure_callback", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
	( "closure_marshal", ctypes.CFUNCTYPE(ctypes.c_void_p, ) ),
])

__freeze_rpythonic_struct( _GSource, [
	( "callback_data", ctypes.POINTER(ctypes.c_void_p) ),
	( "callback_funcs", ctypes.POINTER(_GSourceCallbackFuncs) ),
	( "source_funcs", ctypes.POINTER(_GSourceFuncs) ),
	( "ref_count", ctypes.c_uint ),
	( "context", ctypes.POINTER(_GMainContext) ),
	( "priority", ctypes.c_int ),
	( "flags", ctypes.c_uint ),
	( "source_id", ctypes.c_uint ),
	( "poll_fds", ctypes.POINTER(_GSList) ),
	( "prev", ctypes.POINTER(_GSource) ),
	( "next", ctypes.POINTER(_GSource) ),
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "priv", ctypes.POINTER(_GSourcePrivate) ),
])

__freeze_rpythonic_struct( _GDebugKey, [
	( "key", ctypes.POINTER(ctypes.c_char) ),
	( "value", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GString, [
	( "C_str", ctypes.POINTER(ctypes.c_char) ),
	( "C_len", ctypes.c_ulong ),
	( "allocated_len", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( _GIOFuncs, [
	( "io_read", ctypes.c_void_p ),
	( "io_write", ctypes.c_void_p ),
	( "io_seek", ctypes.c_void_p ),
	( "io_close", ctypes.c_void_p ),
	( "io_create_watch", ctypes.POINTER(ctypes.c_void_p) ),
	( "io_free", ctypes.c_void_p ),
	( "io_set_flags", ctypes.c_void_p ),
	( "io_get_flags", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GIOChannel, [
	( "ref_count", ctypes.c_int ),
	( "funcs", ctypes.POINTER(_GIOFuncs) ),
	( "encoding", ctypes.POINTER(ctypes.c_char) ),
	( "read_cd", ctypes.POINTER(_GIConv) ),
	( "write_cd", ctypes.POINTER(_GIConv) ),
	( "line_term", ctypes.POINTER(ctypes.c_char) ),
	( "line_term_len", ctypes.c_uint ),
	( "buf_size", ctypes.c_ulong ),
	( "read_buf", ctypes.POINTER(_GString) ),
	( "encoded_read_buf", ctypes.POINTER(_GString) ),
	( "write_buf", ctypes.POINTER(_GString) ),
	( "partial_write_buf", ( ctypes.c_char * 6 ) ),
	( "use_buffer", ctypes.c_uint ),
	( "do_encode", ctypes.c_uint ),
	( "close_on_unref", ctypes.c_uint ),
	( "is_readable", ctypes.c_uint ),
	( "is_writeable", ctypes.c_uint ),
	( "is_seekable", ctypes.c_uint ),
	( "reserved1", ctypes.POINTER(ctypes.c_void_p) ),
	( "reserved2", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GKeyFile, [
])

__freeze_rpythonic_struct( _GMappedFile, [
])

__freeze_rpythonic_struct( _GMarkupParseContext, [
])

__freeze_rpythonic_struct( _GMarkupParser, [
	( "start_element", ctypes.c_void_p ),
	( "end_element", ctypes.c_void_p ),
	( "text", ctypes.c_void_p ),
	( "passthrough", ctypes.c_void_p ),
	( "error", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GNode, [
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
	( "next", ctypes.POINTER(_GNode) ),
	( "prev", ctypes.POINTER(_GNode) ),
	( "parent", ctypes.POINTER(_GNode) ),
	( "children", ctypes.POINTER(_GNode) ),
])

__freeze_rpythonic_struct( _GOptionContext, [
])

__freeze_rpythonic_struct( _GOptionGroup, [
])

__freeze_rpythonic_struct( _GOptionEntry, [
	( "long_name", ctypes.POINTER(ctypes.c_char) ),
	( "short_name", ctypes.c_char ),
	( "flags", ctypes.c_int ),
	( "arg", ctypes.c_int ),
	( "arg_data", ctypes.POINTER(ctypes.c_void_p) ),
	( "description", ctypes.POINTER(ctypes.c_char) ),
	( "arg_description", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( _GPatternSpec, [
])

__freeze_rpythonic_struct( _GQueue, [
	( "head", ctypes.POINTER(_GList) ),
	( "tail", ctypes.POINTER(_GList) ),
	( "length", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GRand, [
])

__freeze_rpythonic_struct( _GRegex, [
])

__freeze_rpythonic_struct( _GMatchInfo, [
])

__freeze_rpythonic_struct( _GTokenValue, [
	( "v_symbol", ctypes.POINTER(ctypes.c_void_p) ),
	( "v_identifier", ctypes.POINTER(ctypes.c_char) ),
	( "v_binary", ctypes.c_ulong ),
	( "v_octal", ctypes.c_ulong ),
	( "v_int", ctypes.c_ulong ),
	( "v_int64", ctypes.c_ulong ),
	( "v_float", ctypes.c_double ),
	( "v_hex", ctypes.c_ulong ),
	( "v_string", ctypes.POINTER(ctypes.c_char) ),
	( "v_comment", ctypes.POINTER(ctypes.c_char) ),
	( "v_char", ctypes.c_ubyte ),
	( "v_error", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GScannerConfig, [
	( "cset_skip_characters", ctypes.POINTER(ctypes.c_char) ),
	( "cset_identifier_first", ctypes.POINTER(ctypes.c_char) ),
	( "cset_identifier_nth", ctypes.POINTER(ctypes.c_char) ),
	( "cpair_comment_single", ctypes.POINTER(ctypes.c_char) ),
	( "case_sensitive", ctypes.c_uint ),
	( "skip_comment_multi", ctypes.c_uint ),
	( "skip_comment_single", ctypes.c_uint ),
	( "scan_comment_multi", ctypes.c_uint ),
	( "scan_identifier", ctypes.c_uint ),
	( "scan_identifier_1char", ctypes.c_uint ),
	( "scan_identifier_NULL", ctypes.c_uint ),
	( "scan_symbols", ctypes.c_uint ),
	( "scan_binary", ctypes.c_uint ),
	( "scan_octal", ctypes.c_uint ),
	( "scan_float", ctypes.c_uint ),
	( "scan_hex", ctypes.c_uint ),
	( "scan_hex_dollar", ctypes.c_uint ),
	( "scan_string_sq", ctypes.c_uint ),
	( "scan_string_dq", ctypes.c_uint ),
	( "numbers_2_int", ctypes.c_uint ),
	( "int_2_float", ctypes.c_uint ),
	( "identifier_2_string", ctypes.c_uint ),
	( "char_2_token", ctypes.c_uint ),
	( "symbol_2_token", ctypes.c_uint ),
	( "scope_0_fallback", ctypes.c_uint ),
	( "store_int64", ctypes.c_uint ),
	( "padding_dummy", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GScanner, [
	( "user_data", ctypes.POINTER(ctypes.c_void_p) ),
	( "max_parse_errors", ctypes.c_uint ),
	( "parse_errors", ctypes.c_uint ),
	( "input_name", ctypes.POINTER(ctypes.c_char) ),
	( "qdata", ctypes.POINTER(_GData) ),
	( "config", ctypes.POINTER(_GScannerConfig) ),
	( "token", ctypes.c_int ),
	( "value", _GTokenValue ),
	( "line", ctypes.c_uint ),
	( "position", ctypes.c_uint ),
	( "next_token", ctypes.c_int ),
	( "next_value", _GTokenValue ),
	( "next_line", ctypes.c_uint ),
	( "next_position", ctypes.c_uint ),
	( "symbol_table", ctypes.POINTER(_GHashTable) ),
	( "input_fd", ctypes.c_int ),
	( "text", ctypes.POINTER(ctypes.c_char) ),
	( "text_end", ctypes.POINTER(ctypes.c_char) ),
	( "buffer", ctypes.POINTER(ctypes.c_char) ),
	( "scope_id", ctypes.c_uint ),
	( "msg_handler", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GScanner),ctypes.POINTER(ctypes.c_char),ctypes.c_int,) ),
])

__freeze_rpythonic_struct( _GSequence, [
])

__freeze_rpythonic_struct( _GSequenceNode, [
])

__freeze_rpythonic_struct( _GStringChunk, [
])

__freeze_rpythonic_struct( GTestCase, [
])

__freeze_rpythonic_struct( GTestSuite, [
])

__freeze_rpythonic_struct( GTestConfig, [
	( "test_initialized", ctypes.c_int ),
	( "test_quick", ctypes.c_int ),
	( "test_perf", ctypes.c_int ),
	( "test_verbose", ctypes.c_int ),
	( "test_quiet", ctypes.c_int ),
	( "test_undefined", ctypes.c_int ),
])

__freeze_rpythonic_struct( GTestLogMsg, [
	( "log_type", ctypes.c_int ),
	( "n_strings", ctypes.c_uint ),
	( "strings", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)) ),
	( "n_nums", ctypes.c_uint ),
	( "nums", ctypes.POINTER(ctypes.c_double) ),
])

__freeze_rpythonic_struct( GTestLogBuffer, [
	( "data", ctypes.POINTER(_GString) ),
	( "msgs", ctypes.POINTER(_GSList) ),
])

__freeze_rpythonic_struct( _GThreadPool, [
	( "func", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),) ),
	( "user_data", ctypes.POINTER(ctypes.c_void_p) ),
	( "exclusive", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GTimer, [
])

__freeze_rpythonic_struct( _GTrashStack, [
	( "next", ctypes.POINTER(_GTrashStack) ),
])

__freeze_rpythonic_struct( _GTree, [
])

__freeze_rpythonic_struct( _GVariantType, [
])

__freeze_rpythonic_struct( _GVariant, [
])

__freeze_rpythonic_struct( _GVariantIter, [
	( "x", ( ctypes.c_ulong * 16 ) ),
])

__freeze_rpythonic_struct( _GVariantBuilder, [
	( "x", ( ctypes.c_ulong * 16 ) ),
])

__freeze_rpythonic_struct( _GAllocator, [
])

__freeze_rpythonic_struct( _GMemChunk, [
])

__freeze_rpythonic_struct( _GCache, [
])

__freeze_rpythonic_struct( _GCompletion, [
	( "items", ctypes.POINTER(_GList) ),
	( "func", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_char), )) ),
	( "prefix", ctypes.POINTER(ctypes.c_char) ),
	( "cache", ctypes.POINTER(_GList) ),
	( "strncmp_func", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.c_ulong,) ),
])

__freeze_rpythonic_struct( _GRelation, [
])

__freeze_rpythonic_struct( _GTuples, [
	( "C_len", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GThread, [
	( "func", ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), ) ),
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
	( "joinable", ctypes.c_int ),
	( "priority", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GThreadFunctions, [
	( "mutex_new", ctypes.POINTER(ctypes.c_void_p) ),
	( "mutex_lock", ctypes.c_void_p ),
	( "mutex_trylock", ctypes.c_void_p ),
	( "mutex_unlock", ctypes.c_void_p ),
	( "mutex_free", ctypes.c_void_p ),
	( "cond_new", ctypes.POINTER(ctypes.c_void_p) ),
	( "cond_signal", ctypes.c_void_p ),
	( "cond_broadcast", ctypes.c_void_p ),
	( "cond_wait", ctypes.c_void_p ),
	( "cond_timed_wait", ctypes.c_void_p ),
	( "cond_free", ctypes.c_void_p ),
	( "private_new", ctypes.POINTER(ctypes.c_void_p) ),
	( "private_get", ctypes.POINTER(ctypes.c_void_p) ),
	( "private_set", ctypes.c_void_p ),
	( "thread_create", ctypes.c_void_p ),
	( "thread_yield", ctypes.c_void_p ),
	( "thread_join", ctypes.c_void_p ),
	( "thread_exit", ctypes.c_void_p ),
	( "thread_set_priority", ctypes.c_void_p ),
	( "thread_self", ctypes.c_void_p ),
	( "thread_equal", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( sched_param, [
	( "__sched_priority", ctypes.c_int ),
])

__freeze_rpythonic_struct( __sched_param, [
	( "__sched_priority", ctypes.c_int ),
])

__freeze_rpythonic_struct( cpu_set_t, [
	( "__bits", ctypes.c_uint64 ),
])

__freeze_rpythonic_struct( _pthread_cleanup_buffer, [
	( "__routine", ctypes.c_void_p ),
	( "__arg", ctypes.POINTER(ctypes.c_void_p) ),
	( "__canceltype", ctypes.c_int ),
	( "__prev", ctypes.POINTER(_pthread_cleanup_buffer) ),
])

__freeze_rpythonic_struct( __cancel_jmp_buf, [
	( "__cancel_jmp_buf", ( ctypes.c_int64 * 9 ) ),
	( "__mask_was_saved", ( ctypes.c_int * 1 ) ),
])

__freeze_rpythonic_struct( __pthread_unwind_buf_t, [
	( "__cancel_jmp_buf", ( __cancel_jmp_buf * 1 ) ),
	( "__pad", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( __pthread_cleanup_frame, [
	( "__cancel_routine", ctypes.c_void_p ),
	( "__cancel_arg", ctypes.POINTER(ctypes.c_void_p) ),
	( "__do_it", ctypes.c_int ),
	( "__cancel_type", ctypes.c_int ),
])

__freeze_rpythonic_struct( __jmp_buf_tag, [
])

__freeze_rpythonic_struct( GStaticMutex, [
	( "mutex", ctypes.POINTER(_GMutex) ),
	( "unused", pthread_mutex_t ),
])

__freeze_rpythonic_struct( unused, [
	( "owner", ctypes.c_uint64 ),
	( "dummy", ctypes.c_double ),
])

__freeze_rpythonic_struct( _GStaticRecMutex, [
	( "mutex", GStaticMutex ),
	( "depth", ctypes.c_uint ),
	( "unused", unused ),
])

__freeze_rpythonic_struct( _GStaticRWLock, [
	( "mutex", GStaticMutex ),
	( "read_cond", ctypes.POINTER(_GCond) ),
	( "write_cond", ctypes.POINTER(_GCond) ),
	( "read_counter", ctypes.c_uint ),
	( "have_writer", ctypes.c_int ),
	( "want_to_read", ctypes.c_uint ),
	( "want_to_write", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GStaticPrivate, [
	( "index", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GTypeCValue, [
])

__freeze_rpythonic_struct( _GTypePlugin, [
])

__freeze_rpythonic_struct( _GTypeClass, [
	( "g_type", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( _GTypeInstance, [
	( "g_class", ctypes.POINTER(_GTypeClass) ),
])

__freeze_rpythonic_struct( _GTypeInterface, [
	( "g_type", ctypes.c_ulong ),
	( "g_instance_type", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( _GTypeQuery, [
	( "C_type", ctypes.c_ulong ),
	( "type_name", ctypes.POINTER(ctypes.c_char) ),
	( "class_size", ctypes.c_uint ),
	( "instance_size", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GTypeValueTable, [
	( "value_init", ctypes.c_void_p ),
	( "value_free", ctypes.c_void_p ),
	( "value_copy", ctypes.c_void_p ),
	( "value_peek_pointer", ctypes.POINTER(ctypes.c_void_p) ),
	( "collect_format", ctypes.POINTER(ctypes.c_char) ),
	( "collect_value", ctypes.POINTER(ctypes.c_void_p) ),
	( "lcopy_format", ctypes.POINTER(ctypes.c_char) ),
	( "lcopy_value", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GTypeInfo, [
	( "class_size", ctypes.c_ushort ),
	( "base_init", ctypes.CFUNCTYPE(ctypes.c_void_p, ) ),
	( "base_finalize", ctypes.CFUNCTYPE(ctypes.c_void_p, ) ),
	( "class_init", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),) ),
	( "class_finalize", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),) ),
	( "class_data", ctypes.POINTER(ctypes.c_void_p) ),
	( "instance_size", ctypes.c_ushort ),
	( "n_preallocs", ctypes.c_ushort ),
	( "instance_init", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GTypeInstance),ctypes.POINTER(ctypes.c_void_p),) ),
	( "value_table", ctypes.POINTER(_GTypeValueTable) ),
])

__freeze_rpythonic_struct( _GTypeFundamentalInfo, [
	( "type_flags", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GInterfaceInfo, [
	( "interface_init", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),) ),
	( "interface_finalize", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),) ),
	( "interface_data", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( data, [
	( "v_int", ( ctypes.c_int * 2 ) ),
	( "v_uint", ( ctypes.c_uint * 2 ) ),
	( "v_long", ( ctypes.c_long * 2 ) ),
	( "v_ulong", ( ctypes.c_ulong * 2 ) ),
	( "v_int64", ( ctypes.c_long * 2 ) ),
	( "v_uint64", ( ctypes.c_ulong * 2 ) ),
	( "v_float", ( ctypes.c_float * 2 ) ),
	( "v_double", ( ctypes.c_double * 2 ) ),
	( "v_pointer", ctypes.POINTER(( ctypes.c_void_p * 2 )) ),
])

__freeze_rpythonic_struct( _GValue, [
	( "g_type", ctypes.c_ulong ),
	( "data", ( data * 2 ) ),
])

__freeze_rpythonic_struct( _GParamSpecPool, [
])

__freeze_rpythonic_struct( _GParamSpec, [
	( "g_type_instance", _GTypeInstance ),
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "flags", ctypes.c_int ),
	( "value_type", ctypes.c_ulong ),
	( "owner_type", ctypes.c_ulong ),
	( "_nick", ctypes.POINTER(ctypes.c_char) ),
	( "_blurb", ctypes.POINTER(ctypes.c_char) ),
	( "qdata", ctypes.POINTER(_GData) ),
	( "ref_count", ctypes.c_uint ),
	( "param_id", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GParamSpecClass, [
	( "g_type_class", _GTypeClass ),
	( "value_type", ctypes.c_ulong ),
	( "finalize", ctypes.c_void_p ),
	( "value_set_default", ctypes.c_void_p ),
	( "value_validate", ctypes.c_void_p ),
	( "values_cmp", ctypes.c_void_p ),
	( "dummy", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( _GParameter, [
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "value", _GValue ),
])

__freeze_rpythonic_struct( _GParamSpecTypeInfo, [
	( "instance_size", ctypes.c_ushort ),
	( "n_preallocs", ctypes.c_ushort ),
	( "instance_init", ctypes.c_void_p ),
	( "value_type", ctypes.c_ulong ),
	( "finalize", ctypes.c_void_p ),
	( "value_set_default", ctypes.c_void_p ),
	( "value_validate", ctypes.c_void_p ),
	( "values_cmp", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GClosureNotifyData, [
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
	( "notify", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GClosure),) ),
])

__freeze_rpythonic_struct( _GClosure, [
	( "ref_count", ctypes.c_uint ),
	( "meta_marshal_nouse", ctypes.c_uint ),
	( "n_guards", ctypes.c_uint ),
	( "n_fnotifiers", ctypes.c_uint ),
	( "n_inotifiers", ctypes.c_uint ),
	( "in_inotify", ctypes.c_uint ),
	( "floating", ctypes.c_uint ),
	( "derivative_flag", ctypes.c_uint ),
	( "in_marshal", ctypes.c_uint ),
	( "is_invalid", ctypes.c_uint ),
	( "marshal", ctypes.c_void_p ),
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
	( "notifiers", ctypes.POINTER(_GClosureNotifyData) ),
])

__freeze_rpythonic_struct( _GCClosure, [
	( "closure", _GClosure ),
	( "callback", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GSignalInvocationHint, [
	( "signal_id", ctypes.c_uint ),
	( "detail", ctypes.c_uint ),
	( "run_type", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GSignalQuery, [
	( "signal_id", ctypes.c_uint ),
	( "signal_name", ctypes.POINTER(ctypes.c_char) ),
	( "itype", ctypes.c_ulong ),
	( "signal_flags", ctypes.c_int ),
	( "return_type", ctypes.c_ulong ),
	( "n_params", ctypes.c_uint ),
	( "param_types", ctypes.POINTER(ctypes.c_ulong) ),
])

__freeze_rpythonic_struct( _GObject, [
	( "g_type_instance", _GTypeInstance ),
	( "ref_count", ctypes.c_uint ),
	( "qdata", ctypes.POINTER(_GData) ),
])

__freeze_rpythonic_struct( _GObjectClass, [
	( "g_type_class", _GTypeClass ),
	( "construct_properties", ctypes.POINTER(_GSList) ),
	( "constructor", ctypes.POINTER(ctypes.c_void_p) ),
	( "set_property", ctypes.c_void_p ),
	( "get_property", ctypes.c_void_p ),
	( "dispose", ctypes.c_void_p ),
	( "finalize", ctypes.c_void_p ),
	( "dispatch_properties_changed", ctypes.c_void_p ),
	( "notify", ctypes.c_void_p ),
	( "constructed", ctypes.c_void_p ),
	( "flags", ctypes.c_ulong ),
	( "pdummy", ctypes.POINTER(( ctypes.c_void_p * 6 )) ),
])

__freeze_rpythonic_struct( _GObjectConstructParam, [
	( "pspec", ctypes.POINTER(_GParamSpec) ),
	( "value", ctypes.POINTER(_GValue) ),
])

__freeze_rpythonic_struct( priv, [
	( "p", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( GWeakRef, [
	( "priv", priv ),
])

__freeze_rpythonic_struct( _GBinding, [
])

__freeze_rpythonic_struct( _GEnumValue, [
	( "value", ctypes.c_int ),
	( "value_name", ctypes.POINTER(ctypes.c_char) ),
	( "value_nick", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( _GEnumClass, [
	( "g_type_class", _GTypeClass ),
	( "minimum", ctypes.c_int ),
	( "maximum", ctypes.c_int ),
	( "n_values", ctypes.c_uint ),
	( "values", ctypes.POINTER(_GEnumValue) ),
])

__freeze_rpythonic_struct( _GFlagsValue, [
	( "value", ctypes.c_uint ),
	( "value_name", ctypes.POINTER(ctypes.c_char) ),
	( "value_nick", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( _GFlagsClass, [
	( "g_type_class", _GTypeClass ),
	( "mask", ctypes.c_uint ),
	( "n_values", ctypes.c_uint ),
	( "values", ctypes.POINTER(_GFlagsValue) ),
])

__freeze_rpythonic_struct( _GParamSpecChar, [
	( "parent_instance", _GParamSpec ),
	( "minimum", ctypes.c_char ),
	( "maximum", ctypes.c_char ),
	( "default_value", ctypes.c_char ),
])

__freeze_rpythonic_struct( _GParamSpecUChar, [
	( "parent_instance", _GParamSpec ),
	( "minimum", ctypes.c_ubyte ),
	( "maximum", ctypes.c_ubyte ),
	( "default_value", ctypes.c_ubyte ),
])

__freeze_rpythonic_struct( _GParamSpecBoolean, [
	( "parent_instance", _GParamSpec ),
	( "default_value", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GParamSpecInt, [
	( "parent_instance", _GParamSpec ),
	( "minimum", ctypes.c_int ),
	( "maximum", ctypes.c_int ),
	( "default_value", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GParamSpecUInt, [
	( "parent_instance", _GParamSpec ),
	( "minimum", ctypes.c_uint ),
	( "maximum", ctypes.c_uint ),
	( "default_value", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GParamSpecLong, [
	( "parent_instance", _GParamSpec ),
	( "minimum", ctypes.c_long ),
	( "maximum", ctypes.c_long ),
	( "default_value", ctypes.c_long ),
])

__freeze_rpythonic_struct( _GParamSpecULong, [
	( "parent_instance", _GParamSpec ),
	( "minimum", ctypes.c_ulong ),
	( "maximum", ctypes.c_ulong ),
	( "default_value", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( _GParamSpecInt64, [
	( "parent_instance", _GParamSpec ),
	( "minimum", ctypes.c_long ),
	( "maximum", ctypes.c_long ),
	( "default_value", ctypes.c_long ),
])

__freeze_rpythonic_struct( _GParamSpecUInt64, [
	( "parent_instance", _GParamSpec ),
	( "minimum", ctypes.c_ulong ),
	( "maximum", ctypes.c_ulong ),
	( "default_value", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( _GParamSpecUnichar, [
	( "parent_instance", _GParamSpec ),
	( "default_value", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GParamSpecEnum, [
	( "parent_instance", _GParamSpec ),
	( "enum_class", ctypes.POINTER(_GEnumClass) ),
	( "default_value", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GParamSpecFlags, [
	( "parent_instance", _GParamSpec ),
	( "flags_class", ctypes.POINTER(_GFlagsClass) ),
	( "default_value", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GParamSpecFloat, [
	( "parent_instance", _GParamSpec ),
	( "minimum", ctypes.c_float ),
	( "maximum", ctypes.c_float ),
	( "default_value", ctypes.c_float ),
	( "epsilon", ctypes.c_float ),
])

__freeze_rpythonic_struct( _GParamSpecDouble, [
	( "parent_instance", _GParamSpec ),
	( "minimum", ctypes.c_double ),
	( "maximum", ctypes.c_double ),
	( "default_value", ctypes.c_double ),
	( "epsilon", ctypes.c_double ),
])

__freeze_rpythonic_struct( _GParamSpecString, [
	( "parent_instance", _GParamSpec ),
	( "default_value", ctypes.POINTER(ctypes.c_char) ),
	( "cset_first", ctypes.POINTER(ctypes.c_char) ),
	( "cset_nth", ctypes.POINTER(ctypes.c_char) ),
	( "substitutor", ctypes.c_char ),
	( "null_fold_if_empty", ctypes.c_uint ),
	( "ensure_non_null", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GParamSpecParam, [
	( "parent_instance", _GParamSpec ),
])

__freeze_rpythonic_struct( _GParamSpecBoxed, [
	( "parent_instance", _GParamSpec ),
])

__freeze_rpythonic_struct( _GParamSpecPointer, [
	( "parent_instance", _GParamSpec ),
])

__freeze_rpythonic_struct( _GParamSpecValueArray, [
	( "parent_instance", _GParamSpec ),
	( "element_spec", ctypes.POINTER(_GParamSpec) ),
	( "fixed_n_elements", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GParamSpecObject, [
	( "parent_instance", _GParamSpec ),
])

__freeze_rpythonic_struct( _GParamSpecOverride, [
	( "parent_instance", _GParamSpec ),
	( "overridden", ctypes.POINTER(_GParamSpec) ),
])

__freeze_rpythonic_struct( _GParamSpecGType, [
	( "parent_instance", _GParamSpec ),
	( "is_a_type", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( _GParamSpecVariant, [
	( "parent_instance", _GParamSpec ),
	( "C_type", ctypes.POINTER(_GVariantType) ),
	( "default_value", ctypes.POINTER(_GVariant) ),
	( "padding", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( _GTypeModule, [
	( "parent_instance", _GObject ),
	( "use_count", ctypes.c_uint ),
	( "type_infos", ctypes.POINTER(_GSList) ),
	( "interface_infos", ctypes.POINTER(_GSList) ),
	( "name", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( _GTypeModuleClass, [
	( "parent_class", _GObjectClass ),
	( "load", ctypes.c_void_p ),
	( "unload", ctypes.c_void_p ),
	( "reserved1", ctypes.c_void_p ),
	( "reserved2", ctypes.c_void_p ),
	( "reserved3", ctypes.c_void_p ),
	( "reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GTypePluginClass, [
	( "base_iface", _GTypeInterface ),
	( "use_plugin", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GTypePlugin),) ),
	( "unuse_plugin", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GTypePlugin),) ),
	( "complete_type_info", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GTypePlugin),ctypes.c_ulong,ctypes.POINTER(_GTypeInfo),ctypes.POINTER(_GTypeValueTable),) ),
	( "complete_interface_info", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GTypePlugin),ctypes.c_ulong,ctypes.c_ulong,ctypes.POINTER(_GInterfaceInfo),) ),
])

__freeze_rpythonic_struct( _GValueArray, [
	( "n_values", ctypes.c_uint ),
	( "values", ctypes.POINTER(_GValue) ),
	( "n_prealloced", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _GAppInfo, [
])

__freeze_rpythonic_struct( _GAsyncResult, [
])

__freeze_rpythonic_struct( _GAsyncInitable, [
])

__freeze_rpythonic_struct( _GCharsetConverter, [
])

__freeze_rpythonic_struct( _GConverter, [
])

__freeze_rpythonic_struct( _GSimplePermission, [
])

__freeze_rpythonic_struct( _GZlibCompressor, [
])

__freeze_rpythonic_struct( _GZlibDecompressor, [
])

__freeze_rpythonic_struct( _GRemoteActionGroup, [
])

__freeze_rpythonic_struct( _GDBusActionGroup, [
])

__freeze_rpythonic_struct( _GActionMap, [
])

__freeze_rpythonic_struct( _GActionGroup, [
])

__freeze_rpythonic_struct( _GSimpleAction, [
])

__freeze_rpythonic_struct( _GAction, [
])

__freeze_rpythonic_struct( _GSettingsBackend, [
])

__freeze_rpythonic_struct( _GDrive, [
])

__freeze_rpythonic_struct( _GFile, [
])

__freeze_rpythonic_struct( _GFileInfo, [
])

__freeze_rpythonic_struct( _GFileAttributeMatcher, [
])

__freeze_rpythonic_struct( _GFileDescriptorBased, [
])

__freeze_rpythonic_struct( _GFileIcon, [
])

__freeze_rpythonic_struct( _GFilenameCompleter, [
])

__freeze_rpythonic_struct( _GIcon, [
])

__freeze_rpythonic_struct( _GInitable, [
])

__freeze_rpythonic_struct( _GIOModule, [
])

__freeze_rpythonic_struct( _GIOExtensionPoint, [
])

__freeze_rpythonic_struct( _GIOExtension, [
])

__freeze_rpythonic_struct( _GIOSchedulerJob, [
])

__freeze_rpythonic_struct( _GIOStreamAdapter, [
])

__freeze_rpythonic_struct( _GLoadableIcon, [
])

__freeze_rpythonic_struct( _GMount, [
])

__freeze_rpythonic_struct( _GNetworkMonitor, [
])

__freeze_rpythonic_struct( _GPollableInputStream, [
])

__freeze_rpythonic_struct( _GPollableOutputStream, [
])

__freeze_rpythonic_struct( _GResource, [
])

__freeze_rpythonic_struct( _GSeekable, [
])

__freeze_rpythonic_struct( _GSimpleAsyncResult, [
])

__freeze_rpythonic_struct( _GSocketConnectable, [
])

__freeze_rpythonic_struct( _GSrvTarget, [
])

__freeze_rpythonic_struct( _GThemedIcon, [
])

__freeze_rpythonic_struct( _GTlsClientConnection, [
])

__freeze_rpythonic_struct( _GTlsFileDatabase, [
])

__freeze_rpythonic_struct( _GTlsServerConnection, [
])

__freeze_rpythonic_struct( _GProxyResolver, [
])

__freeze_rpythonic_struct( _GProxy, [
])

__freeze_rpythonic_struct( _GVolume, [
])

__freeze_rpythonic_struct( _GInputVector, [
	( "buffer", ctypes.POINTER(ctypes.c_void_p) ),
	( "size", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( _GOutputVector, [
	( "buffer", ctypes.POINTER(ctypes.c_void_p) ),
	( "size", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( _GCredentials, [
])

__freeze_rpythonic_struct( _GUnixCredentialsMessage, [
])

__freeze_rpythonic_struct( _GUnixFDList, [
])

__freeze_rpythonic_struct( _GDBusMessage, [
])

__freeze_rpythonic_struct( _GDBusConnection, [
])

__freeze_rpythonic_struct( _GDBusMethodInvocation, [
])

__freeze_rpythonic_struct( _GDBusServer, [
])

__freeze_rpythonic_struct( _GDBusAuthObserver, [
])

__freeze_rpythonic_struct( _GDBusInterface, [
])

__freeze_rpythonic_struct( _GDBusObject, [
])

__freeze_rpythonic_struct( _GDBusObjectManager, [
])

__freeze_rpythonic_struct( _GActionInterface, [
	( "g_iface", _GTypeInterface ),
	( "get_name", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_parameter_type", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_state_type", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_state_hint", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_enabled", ctypes.c_void_p ),
	( "get_state", ctypes.POINTER(ctypes.c_void_p) ),
	( "change_state", ctypes.c_void_p ),
	( "activate", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GActionGroupInterface, [
	( "g_iface", _GTypeInterface ),
	( "has_action", ctypes.c_void_p ),
	( "list_actions", ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)) ),
	( "get_action_enabled", ctypes.c_void_p ),
	( "get_action_parameter_type", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_action_state_type", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_action_state_hint", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_action_state", ctypes.POINTER(ctypes.c_void_p) ),
	( "change_action_state", ctypes.c_void_p ),
	( "activate_action", ctypes.c_void_p ),
	( "action_added", ctypes.c_void_p ),
	( "action_removed", ctypes.c_void_p ),
	( "action_enabled_changed", ctypes.c_void_p ),
	( "action_state_changed", ctypes.c_void_p ),
	( "query_action", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GActionMapInterface, [
	( "g_iface", _GTypeInterface ),
	( "lookup_action", ctypes.POINTER(ctypes.c_void_p) ),
	( "add_action", ctypes.c_void_p ),
	( "remove_action", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GActionEntry, [
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "activate", ctypes.c_void_p ),
	( "parameter_type", ctypes.POINTER(ctypes.c_char) ),
	( "state", ctypes.POINTER(ctypes.c_char) ),
	( "change_state", ctypes.c_void_p ),
	( "padding", ( ctypes.c_ulong * 3 ) ),
])

__freeze_rpythonic_struct( _GAppLaunchContextPrivate, [
])

__freeze_rpythonic_struct( _GAppInfoIface, [
	( "g_iface", _GTypeInterface ),
	( "dup", ctypes.POINTER(ctypes.c_void_p) ),
	( "equal", ctypes.c_void_p ),
	( "get_id", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_name", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_description", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_executable", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_icon", ctypes.POINTER(ctypes.c_void_p) ),
	( "launch", ctypes.c_void_p ),
	( "supports_uris", ctypes.c_void_p ),
	( "supports_files", ctypes.c_void_p ),
	( "launch_uris", ctypes.c_void_p ),
	( "should_show", ctypes.c_void_p ),
	( "set_as_default_for_type", ctypes.c_void_p ),
	( "set_as_default_for_extension", ctypes.c_void_p ),
	( "add_supports_type", ctypes.c_void_p ),
	( "can_remove_supports_type", ctypes.c_void_p ),
	( "remove_supports_type", ctypes.c_void_p ),
	( "can_delete", ctypes.c_void_p ),
	( "do_delete", ctypes.c_void_p ),
	( "get_commandline", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_display_name", ctypes.POINTER(ctypes.c_void_p) ),
	( "set_as_last_used_for_type", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GAppLaunchContext, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GAppLaunchContextPrivate) ),
])

__freeze_rpythonic_struct( _GAppLaunchContextClass, [
	( "parent_class", _GObjectClass ),
	( "get_display", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_startup_notify_id", ctypes.POINTER(ctypes.c_void_p) ),
	( "launch_failed", ctypes.c_void_p ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GApplicationPrivate, [
])

__freeze_rpythonic_struct( _GApplication, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GApplicationPrivate) ),
])

__freeze_rpythonic_struct( _GApplicationClass, [
	( "parent_class", _GObjectClass ),
	( "startup", ctypes.c_void_p ),
	( "activate", ctypes.c_void_p ),
	( "open", ctypes.c_void_p ),
	( "command_line", ctypes.c_void_p ),
	( "local_command_line", ctypes.c_void_p ),
	( "before_emit", ctypes.c_void_p ),
	( "after_emit", ctypes.c_void_p ),
	( "add_platform_data", ctypes.c_void_p ),
	( "quit_mainloop", ctypes.c_void_p ),
	( "run_mainloop", ctypes.c_void_p ),
	( "shutdown", ctypes.c_void_p ),
	( "padding", ctypes.POINTER(( ctypes.c_void_p * 11 )) ),
])

__freeze_rpythonic_struct( _GApplicationCommandLinePrivate, [
])

__freeze_rpythonic_struct( _GApplicationCommandLine, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GApplicationCommandLinePrivate) ),
])

__freeze_rpythonic_struct( _GApplicationCommandLineClass, [
	( "parent_class", _GObjectClass ),
	( "print_literal", ctypes.c_void_p ),
	( "printerr_literal", ctypes.c_void_p ),
	( "padding", ctypes.POINTER(( ctypes.c_void_p * 12 )) ),
])

__freeze_rpythonic_struct( _GInitableIface, [
	( "g_iface", _GTypeInterface ),
	( "init", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GAsyncInitableIface, [
	( "g_iface", _GTypeInterface ),
	( "init_async", ctypes.c_void_p ),
	( "init_finish", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GAsyncResultIface, [
	( "g_iface", _GTypeInterface ),
	( "get_user_data", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_source_object", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GInputStreamPrivate, [
])

__freeze_rpythonic_struct( _GInputStream, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GInputStreamPrivate) ),
])

__freeze_rpythonic_struct( _GInputStreamClass, [
	( "parent_class", _GObjectClass ),
	( "read_fn", ctypes.c_void_p ),
	( "skip", ctypes.c_void_p ),
	( "close_fn", ctypes.c_void_p ),
	( "read_async", ctypes.c_void_p ),
	( "read_finish", ctypes.c_void_p ),
	( "skip_async", ctypes.c_void_p ),
	( "skip_finish", ctypes.c_void_p ),
	( "close_async", ctypes.c_void_p ),
	( "close_finish", ctypes.c_void_p ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GFilterInputStream, [
	( "parent_instance", _GInputStream ),
	( "base_stream", ctypes.POINTER(_GInputStream) ),
])

__freeze_rpythonic_struct( _GFilterInputStreamClass, [
	( "parent_class", _GInputStreamClass ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GBufferedInputStreamPrivate, [
])

__freeze_rpythonic_struct( _GBufferedInputStream, [
	( "parent_instance", _GFilterInputStream ),
	( "priv", ctypes.POINTER(_GBufferedInputStreamPrivate) ),
])

__freeze_rpythonic_struct( _GBufferedInputStreamClass, [
	( "parent_class", _GFilterInputStreamClass ),
	( "fill", ctypes.c_void_p ),
	( "fill_async", ctypes.c_void_p ),
	( "fill_finish", ctypes.c_void_p ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GOutputStreamPrivate, [
])

__freeze_rpythonic_struct( _GOutputStream, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GOutputStreamPrivate) ),
])

__freeze_rpythonic_struct( _GOutputStreamClass, [
	( "parent_class", _GObjectClass ),
	( "write_fn", ctypes.c_void_p ),
	( "splice", ctypes.c_void_p ),
	( "flush", ctypes.c_void_p ),
	( "close_fn", ctypes.c_void_p ),
	( "write_async", ctypes.c_void_p ),
	( "write_finish", ctypes.c_void_p ),
	( "splice_async", ctypes.c_void_p ),
	( "splice_finish", ctypes.c_void_p ),
	( "flush_async", ctypes.c_void_p ),
	( "flush_finish", ctypes.c_void_p ),
	( "close_async", ctypes.c_void_p ),
	( "close_finish", ctypes.c_void_p ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
	( "_g_reserved6", ctypes.c_void_p ),
	( "_g_reserved7", ctypes.c_void_p ),
	( "_g_reserved8", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GFilterOutputStream, [
	( "parent_instance", _GOutputStream ),
	( "base_stream", ctypes.POINTER(_GOutputStream) ),
])

__freeze_rpythonic_struct( _GFilterOutputStreamClass, [
	( "parent_class", _GOutputStreamClass ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GBufferedOutputStreamPrivate, [
])

__freeze_rpythonic_struct( _GBufferedOutputStream, [
	( "parent_instance", _GFilterOutputStream ),
	( "priv", ctypes.POINTER(_GBufferedOutputStreamPrivate) ),
])

__freeze_rpythonic_struct( _GBufferedOutputStreamClass, [
	( "parent_class", _GFilterOutputStreamClass ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GCancellablePrivate, [
])

__freeze_rpythonic_struct( _GCancellable, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GCancellablePrivate) ),
])

__freeze_rpythonic_struct( _GCancellableClass, [
	( "parent_class", _GObjectClass ),
	( "cancelled", ctypes.c_void_p ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GConverterIface, [
	( "g_iface", _GTypeInterface ),
	( "convert", ctypes.c_void_p ),
	( "reset", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GCharsetConverterClass, [
	( "parent_class", _GObjectClass ),
])

__freeze_rpythonic_struct( _GConverterInputStreamPrivate, [
])

__freeze_rpythonic_struct( _GConverterInputStream, [
	( "parent_instance", _GFilterInputStream ),
	( "priv", ctypes.POINTER(_GConverterInputStreamPrivate) ),
])

__freeze_rpythonic_struct( _GConverterInputStreamClass, [
	( "parent_class", _GFilterInputStreamClass ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GConverterOutputStreamPrivate, [
])

__freeze_rpythonic_struct( _GConverterOutputStream, [
	( "parent_instance", _GFilterOutputStream ),
	( "priv", ctypes.POINTER(_GConverterOutputStreamPrivate) ),
])

__freeze_rpythonic_struct( _GConverterOutputStreamClass, [
	( "parent_class", _GFilterOutputStreamClass ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( timeval, [
	( "tv_sec", ctypes.c_int64 ),
	( "tv_usec", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( fd_set, [
	( "__fds_bits", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( _GCredentialsClass, [
])

__freeze_rpythonic_struct( _GDataInputStreamPrivate, [
])

__freeze_rpythonic_struct( _GDataInputStream, [
	( "parent_instance", _GBufferedInputStream ),
	( "priv", ctypes.POINTER(_GDataInputStreamPrivate) ),
])

__freeze_rpythonic_struct( _GDataInputStreamClass, [
	( "parent_class", _GBufferedInputStreamClass ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GDataOutputStreamPrivate, [
])

__freeze_rpythonic_struct( _GDataOutputStream, [
	( "parent_instance", _GFilterOutputStream ),
	( "priv", ctypes.POINTER(_GDataOutputStreamPrivate) ),
])

__freeze_rpythonic_struct( _GDataOutputStreamClass, [
	( "parent_class", _GFilterOutputStreamClass ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GDBusInterfaceVTable, [
	( "method_call", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GDBusConnection),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(_GVariant),ctypes.POINTER(_GDBusMethodInvocation),ctypes.POINTER(ctypes.c_void_p),) ),
	( "get_property", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_GVariant), ctypes.POINTER(_GDBusConnection),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.POINTER(_GError)),ctypes.POINTER(ctypes.c_void_p),)) ),
	( "set_property", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GDBusConnection),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(_GVariant),ctypes.POINTER(ctypes.POINTER(_GError)),ctypes.POINTER(ctypes.c_void_p),) ),
	( "padding", ctypes.POINTER(( ctypes.c_void_p * 8 )) ),
])

__freeze_rpythonic_struct( _GDBusSubtreeVTable, [
	( "C_enumerate", ctypes.POINTER(ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), ctypes.POINTER(_GDBusConnection),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),))) ),
	( "introspect", ctypes.POINTER(ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.POINTER(_GDBusInterfaceInfo)), ctypes.POINTER(_GDBusConnection),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),))) ),
	( "dispatch", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_GDBusInterfaceVTable), ctypes.POINTER(_GDBusConnection),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)),ctypes.POINTER(ctypes.c_void_p),)) ),
	( "padding", ctypes.POINTER(( ctypes.c_void_p * 8 )) ),
])

__freeze_rpythonic_struct( _GDBusErrorEntry, [
	( "error_code", ctypes.c_int ),
	( "dbus_error_name", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( _GDBusAnnotationInfo, [
	( "ref_count", ctypes.c_int ),
	( "key", ctypes.POINTER(ctypes.c_char) ),
	( "value", ctypes.POINTER(ctypes.c_char) ),
	( "annotations", ctypes.POINTER(ctypes.POINTER(_GDBusAnnotationInfo)) ),
])

__freeze_rpythonic_struct( _GDBusArgInfo, [
	( "ref_count", ctypes.c_int ),
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "signature", ctypes.POINTER(ctypes.c_char) ),
	( "annotations", ctypes.POINTER(ctypes.POINTER(_GDBusAnnotationInfo)) ),
])

__freeze_rpythonic_struct( _GDBusMethodInfo, [
	( "ref_count", ctypes.c_int ),
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "in_args", ctypes.POINTER(ctypes.POINTER(_GDBusArgInfo)) ),
	( "out_args", ctypes.POINTER(ctypes.POINTER(_GDBusArgInfo)) ),
	( "annotations", ctypes.POINTER(ctypes.POINTER(_GDBusAnnotationInfo)) ),
])

__freeze_rpythonic_struct( _GDBusSignalInfo, [
	( "ref_count", ctypes.c_int ),
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "args", ctypes.POINTER(ctypes.POINTER(_GDBusArgInfo)) ),
	( "annotations", ctypes.POINTER(ctypes.POINTER(_GDBusAnnotationInfo)) ),
])

__freeze_rpythonic_struct( _GDBusPropertyInfo, [
	( "ref_count", ctypes.c_int ),
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "signature", ctypes.POINTER(ctypes.c_char) ),
	( "flags", ctypes.c_int ),
	( "annotations", ctypes.POINTER(ctypes.POINTER(_GDBusAnnotationInfo)) ),
])

__freeze_rpythonic_struct( _GDBusInterfaceInfo, [
	( "ref_count", ctypes.c_int ),
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "methods", ctypes.POINTER(ctypes.POINTER(_GDBusMethodInfo)) ),
	( "signals", ctypes.POINTER(ctypes.POINTER(_GDBusSignalInfo)) ),
	( "properties", ctypes.POINTER(ctypes.POINTER(_GDBusPropertyInfo)) ),
	( "annotations", ctypes.POINTER(ctypes.POINTER(_GDBusAnnotationInfo)) ),
])

__freeze_rpythonic_struct( _GDBusNodeInfo, [
	( "ref_count", ctypes.c_int ),
	( "path", ctypes.POINTER(ctypes.c_char) ),
	( "interfaces", ctypes.POINTER(ctypes.POINTER(_GDBusInterfaceInfo)) ),
	( "nodes", ctypes.POINTER(ctypes.POINTER(_GDBusNodeInfo)) ),
	( "annotations", ctypes.POINTER(ctypes.POINTER(_GDBusAnnotationInfo)) ),
])

__freeze_rpythonic_struct( _GDBusProxyPrivate, [
])

__freeze_rpythonic_struct( _GDBusProxy, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GDBusProxyPrivate) ),
])

__freeze_rpythonic_struct( _GDBusProxyClass, [
	( "parent_class", _GObjectClass ),
	( "g_properties_changed", ctypes.c_void_p ),
	( "g_signal", ctypes.c_void_p ),
	( "padding", ctypes.POINTER(( ctypes.c_void_p * 32 )) ),
])

__freeze_rpythonic_struct( _GDriveIface, [
	( "g_iface", _GTypeInterface ),
	( "changed", ctypes.c_void_p ),
	( "disconnected", ctypes.c_void_p ),
	( "eject_button", ctypes.c_void_p ),
	( "get_name", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_icon", ctypes.POINTER(ctypes.c_void_p) ),
	( "has_volumes", ctypes.c_void_p ),
	( "get_volumes", ctypes.POINTER(ctypes.c_void_p) ),
	( "is_media_removable", ctypes.c_void_p ),
	( "has_media", ctypes.c_void_p ),
	( "is_media_check_automatic", ctypes.c_void_p ),
	( "can_eject", ctypes.c_void_p ),
	( "can_poll_for_media", ctypes.c_void_p ),
	( "eject", ctypes.c_void_p ),
	( "eject_finish", ctypes.c_void_p ),
	( "poll_for_media", ctypes.c_void_p ),
	( "poll_for_media_finish", ctypes.c_void_p ),
	( "get_identifier", ctypes.POINTER(ctypes.c_void_p) ),
	( "enumerate_identifiers", ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)) ),
	( "get_start_stop_type", ctypes.c_void_p ),
	( "can_start", ctypes.c_void_p ),
	( "can_start_degraded", ctypes.c_void_p ),
	( "start", ctypes.c_void_p ),
	( "start_finish", ctypes.c_void_p ),
	( "can_stop", ctypes.c_void_p ),
	( "stop", ctypes.c_void_p ),
	( "stop_finish", ctypes.c_void_p ),
	( "stop_button", ctypes.c_void_p ),
	( "eject_with_operation", ctypes.c_void_p ),
	( "eject_with_operation_finish", ctypes.c_void_p ),
	( "get_sort_key", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GIconIface, [
	( "g_iface", _GTypeInterface ),
	( "hash", ctypes.c_void_p ),
	( "equal", ctypes.c_void_p ),
	( "to_tokens", ctypes.c_void_p ),
	( "from_tokens", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GEmblem, [
])

__freeze_rpythonic_struct( _GEmblemClass, [
])

__freeze_rpythonic_struct( _GEmblemedIconPrivate, [
])

__freeze_rpythonic_struct( _GEmblemedIcon, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GEmblemedIconPrivate) ),
])

__freeze_rpythonic_struct( _GEmblemedIconClass, [
	( "parent_class", _GObjectClass ),
])

__freeze_rpythonic_struct( _GFileAttributeInfo, [
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "C_type", ctypes.c_int ),
	( "flags", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GFileAttributeInfoList, [
	( "infos", ctypes.POINTER(_GFileAttributeInfo) ),
	( "n_infos", ctypes.c_int ),
])

__freeze_rpythonic_struct( _GFileEnumeratorPrivate, [
])

__freeze_rpythonic_struct( _GFileEnumerator, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GFileEnumeratorPrivate) ),
])

__freeze_rpythonic_struct( _GFileEnumeratorClass, [
	( "parent_class", _GObjectClass ),
	( "next_file", ctypes.POINTER(ctypes.c_void_p) ),
	( "close_fn", ctypes.c_void_p ),
	( "next_files_async", ctypes.c_void_p ),
	( "next_files_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "close_async", ctypes.c_void_p ),
	( "close_finish", ctypes.c_void_p ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
	( "_g_reserved6", ctypes.c_void_p ),
	( "_g_reserved7", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GFileIface, [
	( "g_iface", _GTypeInterface ),
	( "dup", ctypes.POINTER(ctypes.c_void_p) ),
	( "hash", ctypes.c_void_p ),
	( "equal", ctypes.c_void_p ),
	( "is_native", ctypes.c_void_p ),
	( "has_uri_scheme", ctypes.c_void_p ),
	( "get_uri_scheme", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_basename", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_path", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_uri", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_parse_name", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_parent", ctypes.POINTER(ctypes.c_void_p) ),
	( "prefix_matches", ctypes.c_void_p ),
	( "get_relative_path", ctypes.POINTER(ctypes.c_void_p) ),
	( "resolve_relative_path", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_child_for_display_name", ctypes.POINTER(ctypes.c_void_p) ),
	( "enumerate_children", ctypes.POINTER(ctypes.c_void_p) ),
	( "enumerate_children_async", ctypes.c_void_p ),
	( "enumerate_children_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "query_info", ctypes.POINTER(ctypes.c_void_p) ),
	( "query_info_async", ctypes.c_void_p ),
	( "query_info_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "query_filesystem_info", ctypes.POINTER(ctypes.c_void_p) ),
	( "query_filesystem_info_async", ctypes.c_void_p ),
	( "query_filesystem_info_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "find_enclosing_mount", ctypes.POINTER(ctypes.c_void_p) ),
	( "find_enclosing_mount_async", ctypes.c_void_p ),
	( "find_enclosing_mount_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "set_display_name", ctypes.POINTER(ctypes.c_void_p) ),
	( "set_display_name_async", ctypes.c_void_p ),
	( "set_display_name_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "query_settable_attributes", ctypes.POINTER(ctypes.c_void_p) ),
	( "_query_settable_attributes_async", ctypes.c_void_p ),
	( "_query_settable_attributes_finish", ctypes.c_void_p ),
	( "query_writable_namespaces", ctypes.POINTER(ctypes.c_void_p) ),
	( "_query_writable_namespaces_async", ctypes.c_void_p ),
	( "_query_writable_namespaces_finish", ctypes.c_void_p ),
	( "set_attribute", ctypes.c_void_p ),
	( "set_attributes_from_info", ctypes.c_void_p ),
	( "set_attributes_async", ctypes.c_void_p ),
	( "set_attributes_finish", ctypes.c_void_p ),
	( "read_fn", ctypes.POINTER(ctypes.c_void_p) ),
	( "read_async", ctypes.c_void_p ),
	( "read_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "append_to", ctypes.POINTER(ctypes.c_void_p) ),
	( "append_to_async", ctypes.c_void_p ),
	( "append_to_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "create", ctypes.POINTER(ctypes.c_void_p) ),
	( "create_async", ctypes.c_void_p ),
	( "create_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "replace", ctypes.POINTER(ctypes.c_void_p) ),
	( "replace_async", ctypes.c_void_p ),
	( "replace_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "delete_file", ctypes.c_void_p ),
	( "_delete_file_async", ctypes.c_void_p ),
	( "_delete_file_finish", ctypes.c_void_p ),
	( "trash", ctypes.c_void_p ),
	( "_trash_async", ctypes.c_void_p ),
	( "_trash_finish", ctypes.c_void_p ),
	( "make_directory", ctypes.c_void_p ),
	( "_make_directory_async", ctypes.c_void_p ),
	( "_make_directory_finish", ctypes.c_void_p ),
	( "make_symbolic_link", ctypes.c_void_p ),
	( "_make_symbolic_link_async", ctypes.c_void_p ),
	( "_make_symbolic_link_finish", ctypes.c_void_p ),
	( "copy", ctypes.c_void_p ),
	( "copy_async", ctypes.c_void_p ),
	( "copy_finish", ctypes.c_void_p ),
	( "move", ctypes.c_void_p ),
	( "_move_async", ctypes.c_void_p ),
	( "_move_finish", ctypes.c_void_p ),
	( "mount_mountable", ctypes.c_void_p ),
	( "mount_mountable_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "unmount_mountable", ctypes.c_void_p ),
	( "unmount_mountable_finish", ctypes.c_void_p ),
	( "eject_mountable", ctypes.c_void_p ),
	( "eject_mountable_finish", ctypes.c_void_p ),
	( "mount_enclosing_volume", ctypes.c_void_p ),
	( "mount_enclosing_volume_finish", ctypes.c_void_p ),
	( "monitor_dir", ctypes.POINTER(ctypes.c_void_p) ),
	( "monitor_file", ctypes.POINTER(ctypes.c_void_p) ),
	( "open_readwrite", ctypes.POINTER(ctypes.c_void_p) ),
	( "open_readwrite_async", ctypes.c_void_p ),
	( "open_readwrite_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "create_readwrite", ctypes.POINTER(ctypes.c_void_p) ),
	( "create_readwrite_async", ctypes.c_void_p ),
	( "create_readwrite_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "replace_readwrite", ctypes.POINTER(ctypes.c_void_p) ),
	( "replace_readwrite_async", ctypes.c_void_p ),
	( "replace_readwrite_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "start_mountable", ctypes.c_void_p ),
	( "start_mountable_finish", ctypes.c_void_p ),
	( "stop_mountable", ctypes.c_void_p ),
	( "stop_mountable_finish", ctypes.c_void_p ),
	( "supports_thread_contexts", ctypes.c_int ),
	( "unmount_mountable_with_operation", ctypes.c_void_p ),
	( "unmount_mountable_with_operation_finish", ctypes.c_void_p ),
	( "eject_mountable_with_operation", ctypes.c_void_p ),
	( "eject_mountable_with_operation_finish", ctypes.c_void_p ),
	( "poll_mountable", ctypes.c_void_p ),
	( "poll_mountable_finish", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GFileIconClass, [
])

__freeze_rpythonic_struct( _GFileInfoClass, [
])

__freeze_rpythonic_struct( _GFileInputStreamPrivate, [
])

__freeze_rpythonic_struct( _GFileInputStream, [
	( "parent_instance", _GInputStream ),
	( "priv", ctypes.POINTER(_GFileInputStreamPrivate) ),
])

__freeze_rpythonic_struct( _GFileInputStreamClass, [
	( "parent_class", _GInputStreamClass ),
	( "tell", ctypes.c_void_p ),
	( "can_seek", ctypes.c_void_p ),
	( "seek", ctypes.c_void_p ),
	( "query_info", ctypes.POINTER(ctypes.c_void_p) ),
	( "query_info_async", ctypes.c_void_p ),
	( "query_info_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GIOStreamPrivate, [
])

__freeze_rpythonic_struct( _GIOStream, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GIOStreamPrivate) ),
])

__freeze_rpythonic_struct( _GIOStreamClass, [
	( "parent_class", _GObjectClass ),
	( "get_input_stream", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_output_stream", ctypes.POINTER(ctypes.c_void_p) ),
	( "close_fn", ctypes.c_void_p ),
	( "close_async", ctypes.c_void_p ),
	( "close_finish", ctypes.c_void_p ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
	( "_g_reserved6", ctypes.c_void_p ),
	( "_g_reserved7", ctypes.c_void_p ),
	( "_g_reserved8", ctypes.c_void_p ),
	( "_g_reserved9", ctypes.c_void_p ),
	( "_g_reserved10", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GFileIOStreamPrivate, [
])

__freeze_rpythonic_struct( _GFileIOStream, [
	( "parent_instance", _GIOStream ),
	( "priv", ctypes.POINTER(_GFileIOStreamPrivate) ),
])

__freeze_rpythonic_struct( _GFileIOStreamClass, [
	( "parent_class", _GIOStreamClass ),
	( "tell", ctypes.c_void_p ),
	( "can_seek", ctypes.c_void_p ),
	( "seek", ctypes.c_void_p ),
	( "can_truncate", ctypes.c_void_p ),
	( "truncate_fn", ctypes.c_void_p ),
	( "query_info", ctypes.POINTER(ctypes.c_void_p) ),
	( "query_info_async", ctypes.c_void_p ),
	( "query_info_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_etag", ctypes.POINTER(ctypes.c_void_p) ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GFileMonitorPrivate, [
])

__freeze_rpythonic_struct( _GFileMonitor, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GFileMonitorPrivate) ),
])

__freeze_rpythonic_struct( _GFileMonitorClass, [
	( "parent_class", _GObjectClass ),
	( "changed", ctypes.c_void_p ),
	( "cancel", ctypes.c_void_p ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GFilenameCompleterClass, [
	( "parent_class", _GObjectClass ),
	( "got_completion_data", ctypes.c_void_p ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GFileOutputStreamPrivate, [
])

__freeze_rpythonic_struct( _GFileOutputStream, [
	( "parent_instance", _GOutputStream ),
	( "priv", ctypes.POINTER(_GFileOutputStreamPrivate) ),
])

__freeze_rpythonic_struct( _GFileOutputStreamClass, [
	( "parent_class", _GOutputStreamClass ),
	( "tell", ctypes.c_void_p ),
	( "can_seek", ctypes.c_void_p ),
	( "seek", ctypes.c_void_p ),
	( "can_truncate", ctypes.c_void_p ),
	( "truncate_fn", ctypes.c_void_p ),
	( "query_info", ctypes.POINTER(ctypes.c_void_p) ),
	( "query_info_async", ctypes.c_void_p ),
	( "query_info_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_etag", ctypes.POINTER(ctypes.c_void_p) ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GInetAddressPrivate, [
])

__freeze_rpythonic_struct( _GInetAddress, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GInetAddressPrivate) ),
])

__freeze_rpythonic_struct( _GInetAddressClass, [
	( "parent_class", _GObjectClass ),
	( "to_string", ctypes.POINTER(ctypes.c_void_p) ),
	( "to_bytes", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GInetAddressMaskPrivate, [
])

__freeze_rpythonic_struct( _GInetAddressMask, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GInetAddressMaskPrivate) ),
])

__freeze_rpythonic_struct( _GInetAddressMaskClass, [
	( "parent_class", _GObjectClass ),
])

__freeze_rpythonic_struct( _GSocketAddress, [
	( "parent_instance", _GObject ),
])

__freeze_rpythonic_struct( _GSocketAddressClass, [
	( "parent_class", _GObjectClass ),
	( "get_family", ctypes.c_void_p ),
	( "get_native_size", ctypes.c_void_p ),
	( "to_native", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GInetSocketAddressPrivate, [
])

__freeze_rpythonic_struct( _GInetSocketAddress, [
	( "parent_instance", _GSocketAddress ),
	( "priv", ctypes.POINTER(_GInetSocketAddressPrivate) ),
])

__freeze_rpythonic_struct( _GInetSocketAddressClass, [
	( "parent_class", _GSocketAddressClass ),
])

__freeze_rpythonic_struct( _GModule, [
])

__freeze_rpythonic_struct( _GIOModuleScope, [
])

__freeze_rpythonic_struct( _GIOModuleClass, [
])

__freeze_rpythonic_struct( _GLoadableIconIface, [
	( "g_iface", _GTypeInterface ),
	( "load", ctypes.POINTER(ctypes.c_void_p) ),
	( "load_async", ctypes.c_void_p ),
	( "load_finish", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GMemoryInputStreamPrivate, [
])

__freeze_rpythonic_struct( _GMemoryInputStream, [
	( "parent_instance", _GInputStream ),
	( "priv", ctypes.POINTER(_GMemoryInputStreamPrivate) ),
])

__freeze_rpythonic_struct( _GMemoryInputStreamClass, [
	( "parent_class", _GInputStreamClass ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GMemoryOutputStreamPrivate, [
])

__freeze_rpythonic_struct( _GMemoryOutputStream, [
	( "parent_instance", _GOutputStream ),
	( "priv", ctypes.POINTER(_GMemoryOutputStreamPrivate) ),
])

__freeze_rpythonic_struct( _GMemoryOutputStreamClass, [
	( "parent_class", _GOutputStreamClass ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GMountIface, [
	( "g_iface", _GTypeInterface ),
	( "changed", ctypes.c_void_p ),
	( "unmounted", ctypes.c_void_p ),
	( "get_root", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_name", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_icon", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_uuid", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_volume", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_drive", ctypes.POINTER(ctypes.c_void_p) ),
	( "can_unmount", ctypes.c_void_p ),
	( "can_eject", ctypes.c_void_p ),
	( "unmount", ctypes.c_void_p ),
	( "unmount_finish", ctypes.c_void_p ),
	( "eject", ctypes.c_void_p ),
	( "eject_finish", ctypes.c_void_p ),
	( "remount", ctypes.c_void_p ),
	( "remount_finish", ctypes.c_void_p ),
	( "guess_content_type", ctypes.c_void_p ),
	( "guess_content_type_finish", ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)) ),
	( "guess_content_type_sync", ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)) ),
	( "pre_unmount", ctypes.c_void_p ),
	( "unmount_with_operation", ctypes.c_void_p ),
	( "unmount_with_operation_finish", ctypes.c_void_p ),
	( "eject_with_operation", ctypes.c_void_p ),
	( "eject_with_operation_finish", ctypes.c_void_p ),
	( "get_default_location", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_sort_key", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GMountOperationPrivate, [
])

__freeze_rpythonic_struct( _GMountOperation, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GMountOperationPrivate) ),
])

__freeze_rpythonic_struct( _GMountOperationClass, [
	( "parent_class", _GObjectClass ),
	( "ask_password", ctypes.c_void_p ),
	( "ask_question", ctypes.c_void_p ),
	( "reply", ctypes.c_void_p ),
	( "aborted", ctypes.c_void_p ),
	( "show_processes", ctypes.c_void_p ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
	( "_g_reserved6", ctypes.c_void_p ),
	( "_g_reserved7", ctypes.c_void_p ),
	( "_g_reserved8", ctypes.c_void_p ),
	( "_g_reserved9", ctypes.c_void_p ),
	( "_g_reserved10", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GVolumeMonitor, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GVolumeMonitorClass, [
	( "parent_class", _GObjectClass ),
	( "volume_added", ctypes.c_void_p ),
	( "volume_removed", ctypes.c_void_p ),
	( "volume_changed", ctypes.c_void_p ),
	( "mount_added", ctypes.c_void_p ),
	( "mount_removed", ctypes.c_void_p ),
	( "mount_pre_unmount", ctypes.c_void_p ),
	( "mount_changed", ctypes.c_void_p ),
	( "drive_connected", ctypes.c_void_p ),
	( "drive_disconnected", ctypes.c_void_p ),
	( "drive_changed", ctypes.c_void_p ),
	( "is_supported", ctypes.c_void_p ),
	( "get_connected_drives", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_volumes", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_mounts", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_volume_for_uuid", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_mount_for_uuid", ctypes.POINTER(ctypes.c_void_p) ),
	( "adopt_orphan_mount", ctypes.POINTER(ctypes.c_void_p) ),
	( "drive_eject_button", ctypes.c_void_p ),
	( "drive_stop_button", ctypes.c_void_p ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
	( "_g_reserved6", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GNativeVolumeMonitor, [
	( "parent_instance", _GVolumeMonitor ),
])

__freeze_rpythonic_struct( _GNativeVolumeMonitorClass, [
	( "parent_class", _GVolumeMonitorClass ),
	( "get_mount_for_mount_path", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GNetworkAddressPrivate, [
])

__freeze_rpythonic_struct( _GNetworkAddress, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GNetworkAddressPrivate) ),
])

__freeze_rpythonic_struct( _GNetworkAddressClass, [
	( "parent_class", _GObjectClass ),
])

__freeze_rpythonic_struct( _GNetworkMonitorInterface, [
	( "g_iface", _GTypeInterface ),
	( "network_changed", ctypes.c_void_p ),
	( "can_reach", ctypes.c_void_p ),
	( "can_reach_async", ctypes.c_void_p ),
	( "can_reach_finish", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GNetworkServicePrivate, [
])

__freeze_rpythonic_struct( _GNetworkService, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GNetworkServicePrivate) ),
])

__freeze_rpythonic_struct( _GNetworkServiceClass, [
	( "parent_class", _GObjectClass ),
])

__freeze_rpythonic_struct( _GPermissionPrivate, [
])

__freeze_rpythonic_struct( _GPermission, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GPermissionPrivate) ),
])

__freeze_rpythonic_struct( _GPermissionClass, [
	( "parent_class", _GObjectClass ),
	( "acquire", ctypes.c_void_p ),
	( "acquire_async", ctypes.c_void_p ),
	( "acquire_finish", ctypes.c_void_p ),
	( "release", ctypes.c_void_p ),
	( "release_async", ctypes.c_void_p ),
	( "release_finish", ctypes.c_void_p ),
	( "reserved", ctypes.POINTER(( ctypes.c_void_p * 16 )) ),
])

__freeze_rpythonic_struct( _GPollableInputStreamInterface, [
	( "g_iface", _GTypeInterface ),
	( "can_poll", ctypes.c_void_p ),
	( "is_readable", ctypes.c_void_p ),
	( "create_source", ctypes.POINTER(ctypes.c_void_p) ),
	( "read_nonblocking", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GPollableOutputStreamInterface, [
	( "g_iface", _GTypeInterface ),
	( "can_poll", ctypes.c_void_p ),
	( "is_writable", ctypes.c_void_p ),
	( "create_source", ctypes.POINTER(ctypes.c_void_p) ),
	( "write_nonblocking", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GProxyInterface, [
	( "g_iface", _GTypeInterface ),
	( "connect", ctypes.POINTER(ctypes.c_void_p) ),
	( "connect_async", ctypes.c_void_p ),
	( "connect_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "supports_hostname", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GProxyAddressPrivate, [
])

__freeze_rpythonic_struct( _GProxyAddress, [
	( "parent_instance", _GInetSocketAddress ),
	( "priv", ctypes.POINTER(_GProxyAddressPrivate) ),
])

__freeze_rpythonic_struct( _GProxyAddressClass, [
	( "parent_class", _GInetSocketAddressClass ),
])

__freeze_rpythonic_struct( _GSocketAddressEnumerator, [
	( "parent_instance", _GObject ),
])

__freeze_rpythonic_struct( _GSocketAddressEnumeratorClass, [
	( "parent_class", _GObjectClass ),
	( "next", ctypes.POINTER(ctypes.c_void_p) ),
	( "next_async", ctypes.c_void_p ),
	( "next_finish", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GProxyAddressEnumeratorPrivate, [
])

__freeze_rpythonic_struct( _GProxyAddressEnumerator, [
	( "parent_instance", _GSocketAddressEnumerator ),
	( "priv", ctypes.POINTER(_GProxyAddressEnumeratorPrivate) ),
])

__freeze_rpythonic_struct( _GProxyAddressEnumeratorClass, [
	( "parent_class", _GSocketAddressEnumeratorClass ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
	( "_g_reserved6", ctypes.c_void_p ),
	( "_g_reserved7", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GProxyResolverInterface, [
	( "g_iface", _GTypeInterface ),
	( "is_supported", ctypes.c_void_p ),
	( "lookup", ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)) ),
	( "lookup_async", ctypes.c_void_p ),
	( "lookup_finish", ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)) ),
])

__freeze_rpythonic_struct( _GResolverPrivate, [
])

__freeze_rpythonic_struct( _GResolver, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GResolverPrivate) ),
])

__freeze_rpythonic_struct( _GResolverClass, [
	( "parent_class", _GObjectClass ),
	( "reload", ctypes.c_void_p ),
	( "lookup_by_name", ctypes.POINTER(ctypes.c_void_p) ),
	( "lookup_by_name_async", ctypes.c_void_p ),
	( "lookup_by_name_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "lookup_by_address", ctypes.POINTER(ctypes.c_void_p) ),
	( "lookup_by_address_async", ctypes.c_void_p ),
	( "lookup_by_address_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "lookup_service", ctypes.POINTER(ctypes.c_void_p) ),
	( "lookup_service_async", ctypes.c_void_p ),
	( "lookup_service_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
	( "_g_reserved6", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GStaticResource, [
	( "data", ctypes.POINTER(ctypes.c_ubyte) ),
	( "data_len", ctypes.c_ulong ),
	( "resource", ctypes.POINTER(_GResource) ),
	( "next", ctypes.POINTER(_GStaticResource) ),
	( "padding", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GSeekableIface, [
	( "g_iface", _GTypeInterface ),
	( "tell", ctypes.c_void_p ),
	( "can_seek", ctypes.c_void_p ),
	( "seek", ctypes.c_void_p ),
	( "can_truncate", ctypes.c_void_p ),
	( "truncate_fn", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GSettingsSchemaSource, [
])

__freeze_rpythonic_struct( _GSettingsSchema, [
])

__freeze_rpythonic_struct( _GSettingsPrivate, [
])

__freeze_rpythonic_struct( _GSettingsClass, [
	( "parent_class", _GObjectClass ),
	( "writable_changed", ctypes.c_void_p ),
	( "changed", ctypes.c_void_p ),
	( "writable_change_event", ctypes.c_void_p ),
	( "change_event", ctypes.c_void_p ),
	( "padding", ctypes.POINTER(( ctypes.c_void_p * 20 )) ),
])

__freeze_rpythonic_struct( _GSettings, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GSettingsPrivate) ),
])

__freeze_rpythonic_struct( _GSimpleActionGroupPrivate, [
])

__freeze_rpythonic_struct( _GSimpleActionGroup, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GSimpleActionGroupPrivate) ),
])

__freeze_rpythonic_struct( _GSimpleActionGroupClass, [
	( "parent_class", _GObjectClass ),
	( "padding", ctypes.POINTER(( ctypes.c_void_p * 12 )) ),
])

__freeze_rpythonic_struct( _GSimpleAsyncResultClass, [
])

__freeze_rpythonic_struct( _GSocketClientPrivate, [
])

__freeze_rpythonic_struct( _GSocketClientClass, [
	( "parent_class", _GObjectClass ),
	( "event", ctypes.c_void_p ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GSocketClient, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GSocketClientPrivate) ),
])

__freeze_rpythonic_struct( _GSocketConnectableIface, [
	( "g_iface", _GTypeInterface ),
	( "C_enumerate", ctypes.POINTER(ctypes.c_void_p) ),
	( "proxy_enumerate", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GSocketPrivate, [
])

__freeze_rpythonic_struct( _GSocketClass, [
	( "parent_class", _GObjectClass ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
	( "_g_reserved6", ctypes.c_void_p ),
	( "_g_reserved7", ctypes.c_void_p ),
	( "_g_reserved8", ctypes.c_void_p ),
	( "_g_reserved9", ctypes.c_void_p ),
	( "_g_reserved10", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GSocket, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GSocketPrivate) ),
])

__freeze_rpythonic_struct( _GSocketConnectionPrivate, [
])

__freeze_rpythonic_struct( _GSocketConnectionClass, [
	( "parent_class", _GIOStreamClass ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
	( "_g_reserved6", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GSocketConnection, [
	( "parent_instance", _GIOStream ),
	( "priv", ctypes.POINTER(_GSocketConnectionPrivate) ),
])

__freeze_rpythonic_struct( _GSocketControlMessagePrivate, [
])

__freeze_rpythonic_struct( _GSocketControlMessageClass, [
	( "parent_class", _GObjectClass ),
	( "get_size", ctypes.c_void_p ),
	( "get_level", ctypes.c_void_p ),
	( "get_type", ctypes.c_void_p ),
	( "serialize", ctypes.c_void_p ),
	( "deserialize", ctypes.POINTER(ctypes.c_void_p) ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GSocketControlMessage, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GSocketControlMessagePrivate) ),
])

__freeze_rpythonic_struct( _GSocketListenerPrivate, [
])

__freeze_rpythonic_struct( _GSocketListenerClass, [
	( "parent_class", _GObjectClass ),
	( "changed", ctypes.c_void_p ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
	( "_g_reserved6", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GSocketListener, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GSocketListenerPrivate) ),
])

__freeze_rpythonic_struct( _GSocketServicePrivate, [
])

__freeze_rpythonic_struct( _GSocketServiceClass, [
	( "parent_class", _GSocketListenerClass ),
	( "incoming", ctypes.c_void_p ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
	( "_g_reserved6", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GSocketService, [
	( "parent_instance", _GSocketListener ),
	( "priv", ctypes.POINTER(_GSocketServicePrivate) ),
])

__freeze_rpythonic_struct( _GTcpConnectionPrivate, [
])

__freeze_rpythonic_struct( _GTcpConnectionClass, [
	( "parent_class", _GSocketConnectionClass ),
])

__freeze_rpythonic_struct( _GTcpConnection, [
	( "parent_instance", _GSocketConnection ),
	( "priv", ctypes.POINTER(_GTcpConnectionPrivate) ),
])

__freeze_rpythonic_struct( _GTcpWrapperConnectionPrivate, [
])

__freeze_rpythonic_struct( _GTcpWrapperConnectionClass, [
	( "parent_class", _GTcpConnectionClass ),
])

__freeze_rpythonic_struct( _GTcpWrapperConnection, [
	( "parent_instance", _GTcpConnection ),
	( "priv", ctypes.POINTER(_GTcpWrapperConnectionPrivate) ),
])

__freeze_rpythonic_struct( _GThemedIconClass, [
])

__freeze_rpythonic_struct( _GThreadedSocketServicePrivate, [
])

__freeze_rpythonic_struct( _GThreadedSocketServiceClass, [
	( "parent_class", _GSocketServiceClass ),
	( "run", ctypes.c_void_p ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GThreadedSocketService, [
	( "parent_instance", _GSocketService ),
	( "priv", ctypes.POINTER(_GThreadedSocketServicePrivate) ),
])

__freeze_rpythonic_struct( _GTlsBackend, [
])

__freeze_rpythonic_struct( _GTlsBackendInterface, [
	( "g_iface", _GTypeInterface ),
	( "supports_tls", ctypes.c_void_p ),
	( "get_certificate_type", ctypes.c_void_p ),
	( "get_client_connection_type", ctypes.c_void_p ),
	( "get_server_connection_type", ctypes.c_void_p ),
	( "get_file_database_type", ctypes.c_void_p ),
	( "get_default_database", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GTlsCertificatePrivate, [
])

__freeze_rpythonic_struct( _GTlsCertificate, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GTlsCertificatePrivate) ),
])

__freeze_rpythonic_struct( _GTlsCertificateClass, [
	( "parent_class", _GObjectClass ),
	( "verify", ctypes.c_void_p ),
	( "padding", ctypes.POINTER(( ctypes.c_void_p * 8 )) ),
])

__freeze_rpythonic_struct( _GTlsConnectionPrivate, [
])

__freeze_rpythonic_struct( _GTlsConnection, [
	( "parent_instance", _GIOStream ),
	( "priv", ctypes.POINTER(_GTlsConnectionPrivate) ),
])

__freeze_rpythonic_struct( _GTlsConnectionClass, [
	( "parent_class", _GIOStreamClass ),
	( "accept_certificate", ctypes.c_void_p ),
	( "handshake", ctypes.c_void_p ),
	( "handshake_async", ctypes.c_void_p ),
	( "handshake_finish", ctypes.c_void_p ),
	( "padding", ctypes.POINTER(( ctypes.c_void_p * 8 )) ),
])

__freeze_rpythonic_struct( _GTlsClientConnectionInterface, [
	( "g_iface", _GTypeInterface ),
])

__freeze_rpythonic_struct( _GTlsDatabasePrivate, [
])

__freeze_rpythonic_struct( _GTlsDatabase, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GTlsDatabasePrivate) ),
])

__freeze_rpythonic_struct( _GTlsDatabaseClass, [
	( "parent_class", _GObjectClass ),
	( "verify_chain", ctypes.c_void_p ),
	( "verify_chain_async", ctypes.c_void_p ),
	( "verify_chain_finish", ctypes.c_void_p ),
	( "create_certificate_handle", ctypes.POINTER(ctypes.c_void_p) ),
	( "lookup_certificate_for_handle", ctypes.POINTER(ctypes.c_void_p) ),
	( "lookup_certificate_for_handle_async", ctypes.c_void_p ),
	( "lookup_certificate_for_handle_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "lookup_certificate_issuer", ctypes.POINTER(ctypes.c_void_p) ),
	( "lookup_certificate_issuer_async", ctypes.c_void_p ),
	( "lookup_certificate_issuer_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "lookup_certificates_issued_by", ctypes.POINTER(ctypes.c_void_p) ),
	( "lookup_certificates_issued_by_async", ctypes.c_void_p ),
	( "lookup_certificates_issued_by_finish", ctypes.POINTER(ctypes.c_void_p) ),
	( "padding", ctypes.POINTER(( ctypes.c_void_p * 16 )) ),
])

__freeze_rpythonic_struct( _GTlsFileDatabaseInterface, [
	( "g_iface", _GTypeInterface ),
	( "padding", ctypes.POINTER(( ctypes.c_void_p * 8 )) ),
])

__freeze_rpythonic_struct( _GTlsInteractionPrivate, [
])

__freeze_rpythonic_struct( _GTlsInteraction, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GTlsInteractionPrivate) ),
])

__freeze_rpythonic_struct( _GTlsInteractionClass, [
	( "parent_class", _GObjectClass ),
	( "ask_password", ctypes.c_void_p ),
	( "ask_password_async", ctypes.c_void_p ),
	( "ask_password_finish", ctypes.c_void_p ),
	( "padding", ctypes.POINTER(( ctypes.c_void_p * 24 )) ),
])

__freeze_rpythonic_struct( _GTlsServerConnectionInterface, [
	( "g_iface", _GTypeInterface ),
])

__freeze_rpythonic_struct( _GTlsPasswordPrivate, [
])

__freeze_rpythonic_struct( _GTlsPassword, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GTlsPasswordPrivate) ),
])

__freeze_rpythonic_struct( _GTlsPasswordClass, [
	( "parent_class", _GObjectClass ),
	( "get_value", ctypes.POINTER(ctypes.c_void_p) ),
	( "set_value", ctypes.c_void_p ),
	( "get_default_warning", ctypes.POINTER(ctypes.c_void_p) ),
	( "padding", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( _GVfs, [
	( "parent_instance", _GObject ),
])

__freeze_rpythonic_struct( _GVfsClass, [
	( "parent_class", _GObjectClass ),
	( "is_active", ctypes.c_void_p ),
	( "get_file_for_path", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_file_for_uri", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_supported_uri_schemes", ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)) ),
	( "parse_name", ctypes.POINTER(ctypes.c_void_p) ),
	( "local_file_add_info", ctypes.c_void_p ),
	( "add_writable_namespaces", ctypes.c_void_p ),
	( "local_file_set_attributes", ctypes.c_void_p ),
	( "local_file_removed", ctypes.c_void_p ),
	( "local_file_moved", ctypes.c_void_p ),
	( "_g_reserved1", ctypes.c_void_p ),
	( "_g_reserved2", ctypes.c_void_p ),
	( "_g_reserved3", ctypes.c_void_p ),
	( "_g_reserved4", ctypes.c_void_p ),
	( "_g_reserved5", ctypes.c_void_p ),
	( "_g_reserved6", ctypes.c_void_p ),
	( "_g_reserved7", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GVolumeIface, [
	( "g_iface", _GTypeInterface ),
	( "changed", ctypes.c_void_p ),
	( "removed", ctypes.c_void_p ),
	( "get_name", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_icon", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_uuid", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_drive", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_mount", ctypes.POINTER(ctypes.c_void_p) ),
	( "can_mount", ctypes.c_void_p ),
	( "can_eject", ctypes.c_void_p ),
	( "mount_fn", ctypes.c_void_p ),
	( "mount_finish", ctypes.c_void_p ),
	( "eject", ctypes.c_void_p ),
	( "eject_finish", ctypes.c_void_p ),
	( "get_identifier", ctypes.POINTER(ctypes.c_void_p) ),
	( "enumerate_identifiers", ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)) ),
	( "should_automount", ctypes.c_void_p ),
	( "get_activation_root", ctypes.POINTER(ctypes.c_void_p) ),
	( "eject_with_operation", ctypes.c_void_p ),
	( "eject_with_operation_finish", ctypes.c_void_p ),
	( "get_sort_key", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GZlibCompressorClass, [
	( "parent_class", _GObjectClass ),
])

__freeze_rpythonic_struct( _GZlibDecompressorClass, [
	( "parent_class", _GObjectClass ),
])

__freeze_rpythonic_struct( _GDBusInterfaceIface, [
	( "parent_iface", _GTypeInterface ),
	( "get_info", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_object", ctypes.POINTER(ctypes.c_void_p) ),
	( "set_object", ctypes.c_void_p ),
	( "dup_object", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GDBusInterfaceSkeletonPrivate, [
])

__freeze_rpythonic_struct( _GDBusInterfaceSkeleton, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GDBusInterfaceSkeletonPrivate) ),
])

__freeze_rpythonic_struct( _GDBusInterfaceSkeletonClass, [
	( "parent_class", _GObjectClass ),
	( "get_info", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_vtable", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_properties", ctypes.POINTER(ctypes.c_void_p) ),
	( "flush", ctypes.c_void_p ),
	( "vfunc_padding", ctypes.POINTER(( ctypes.c_void_p * 8 )) ),
	( "g_authorize_method", ctypes.c_void_p ),
	( "signal_padding", ctypes.POINTER(( ctypes.c_void_p * 8 )) ),
])

__freeze_rpythonic_struct( _GDBusObjectIface, [
	( "parent_iface", _GTypeInterface ),
	( "get_object_path", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_interfaces", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_interface", ctypes.POINTER(ctypes.c_void_p) ),
	( "interface_added", ctypes.c_void_p ),
	( "interface_removed", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GDBusObjectSkeletonPrivate, [
])

__freeze_rpythonic_struct( _GDBusObjectSkeleton, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GDBusObjectSkeletonPrivate) ),
])

__freeze_rpythonic_struct( _GDBusObjectSkeletonClass, [
	( "parent_class", _GObjectClass ),
	( "authorize_method", ctypes.c_void_p ),
	( "padding", ctypes.POINTER(( ctypes.c_void_p * 8 )) ),
])

__freeze_rpythonic_struct( _GDBusObjectProxyPrivate, [
])

__freeze_rpythonic_struct( _GDBusObjectProxy, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GDBusObjectProxyPrivate) ),
])

__freeze_rpythonic_struct( _GDBusObjectProxyClass, [
	( "parent_class", _GObjectClass ),
	( "padding", ctypes.POINTER(( ctypes.c_void_p * 8 )) ),
])

__freeze_rpythonic_struct( _GDBusObjectManagerIface, [
	( "parent_iface", _GTypeInterface ),
	( "get_object_path", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_objects", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_object", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_interface", ctypes.POINTER(ctypes.c_void_p) ),
	( "object_added", ctypes.c_void_p ),
	( "object_removed", ctypes.c_void_p ),
	( "interface_added", ctypes.c_void_p ),
	( "interface_removed", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GDBusObjectManagerClientPrivate, [
])

__freeze_rpythonic_struct( _GDBusObjectManagerClient, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GDBusObjectManagerClientPrivate) ),
])

__freeze_rpythonic_struct( _GDBusObjectManagerClientClass, [
	( "parent_class", _GObjectClass ),
	( "interface_proxy_signal", ctypes.c_void_p ),
	( "interface_proxy_properties_changed", ctypes.c_void_p ),
	( "padding", ctypes.POINTER(( ctypes.c_void_p * 8 )) ),
])

__freeze_rpythonic_struct( _GDBusObjectManagerServerPrivate, [
])

__freeze_rpythonic_struct( _GDBusObjectManagerServer, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GDBusObjectManagerServerPrivate) ),
])

__freeze_rpythonic_struct( _GDBusObjectManagerServerClass, [
	( "parent_class", _GObjectClass ),
	( "padding", ctypes.POINTER(( ctypes.c_void_p * 8 )) ),
])

__freeze_rpythonic_struct( _GRemoteActionGroupInterface, [
	( "g_iface", _GTypeInterface ),
	( "activate_action_full", ctypes.c_void_p ),
	( "change_action_state_full", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GMenuModelPrivate, [
])

__freeze_rpythonic_struct( _GMenuAttributeIterPrivate, [
])

__freeze_rpythonic_struct( _GMenuLinkIterPrivate, [
])

__freeze_rpythonic_struct( _GMenuModel, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GMenuModelPrivate) ),
])

__freeze_rpythonic_struct( _GMenuModelClass, [
	( "parent_class", _GObjectClass ),
	( "is_mutable", ctypes.c_void_p ),
	( "get_n_items", ctypes.c_void_p ),
	( "get_item_attributes", ctypes.c_void_p ),
	( "iterate_item_attributes", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_item_attribute_value", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_item_links", ctypes.c_void_p ),
	( "iterate_item_links", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_item_link", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _GMenuAttributeIter, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GMenuAttributeIterPrivate) ),
])

__freeze_rpythonic_struct( _GMenuAttributeIterClass, [
	( "parent_class", _GObjectClass ),
	( "get_next", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GMenuLinkIter, [
	( "parent_instance", _GObject ),
	( "priv", ctypes.POINTER(_GMenuLinkIterPrivate) ),
])

__freeze_rpythonic_struct( _GMenuLinkIterClass, [
	( "parent_class", _GObjectClass ),
	( "get_next", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _GMenuItem, [
])

__freeze_rpythonic_struct( _GMenu, [
])

__freeze_rpythonic_struct( _GDBusMenuModel, [
])

## wrapper functions ##
clock = _rpythonic_function_(		"clock", ctypes.c_int64, [] )

time = _rpythonic_function_(		"time", ctypes.c_int64, [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),] )

difftime = _rpythonic_function_(		"difftime", ctypes.c_double, [
	("__time1",		ctypes.c_int64),
	("__time0",		ctypes.c_int64),] )

mktime = _rpythonic_function_(		"mktime", ctypes.c_int64, [
	("__tp",		ctypes.POINTER(tm)),] )

strftime = _rpythonic_function_(		"strftime", ctypes.c_uint64, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__maxsize",		ctypes.c_uint64),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__tp",		ctypes.POINTER(tm)),] )

strftime_l = _rpythonic_function_(		"strftime_l", ctypes.c_uint64, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__maxsize",		ctypes.c_uint64),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__tp",		ctypes.POINTER(tm)),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

gmtime = _rpythonic_function_(		"gmtime", ctypes.POINTER(tm), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),] )

localtime = _rpythonic_function_(		"localtime", ctypes.POINTER(tm), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),] )

gmtime_r = _rpythonic_function_(		"gmtime_r", ctypes.POINTER(tm), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),
	("__tp",		ctypes.POINTER(tm)),] )

localtime_r = _rpythonic_function_(		"localtime_r", ctypes.POINTER(tm), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),
	("__tp",		ctypes.POINTER(tm)),] )

asctime = _rpythonic_function_(		"asctime", ctypes.POINTER(ctypes.c_char), [
	("__tp",		ctypes.POINTER(tm)),] )

ctime = _rpythonic_function_(		"ctime", ctypes.POINTER(ctypes.c_char), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),] )

asctime_r = _rpythonic_function_(		"asctime_r", ctypes.POINTER(ctypes.c_char), [
	("__tp",		ctypes.POINTER(tm)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

ctime_r = _rpythonic_function_(		"ctime_r", ctypes.POINTER(ctypes.c_char), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

tzset = _rpythonic_function_(		"tzset", ctypes.c_void_p, [] )

stime = _rpythonic_function_(		"stime", ctypes.c_int, [
	("__when",		ctypes.POINTER(ctypes.c_int64)),] )

timegm = _rpythonic_function_(		"timegm", ctypes.c_int64, [
	("__tp",		ctypes.POINTER(tm)),] )

timelocal = _rpythonic_function_(		"timelocal", ctypes.c_int64, [
	("__tp",		ctypes.POINTER(tm)),] )

dysize = _rpythonic_function_(		"dysize", ctypes.c_int, [
	("__year",		ctypes.c_int),] )

nanosleep = _rpythonic_function_(		"nanosleep", ctypes.c_int, [
	("__requested_time",		ctypes.POINTER(timespec)),
	("__remaining",		ctypes.POINTER(timespec)),] )

clock_getres = _rpythonic_function_(		"clock_getres", ctypes.c_int, [
	("__clock_id",		ctypes.c_int),
	("__res",		ctypes.POINTER(timespec)),] )

clock_gettime = _rpythonic_function_(		"clock_gettime", ctypes.c_int, [
	("__clock_id",		ctypes.c_int),
	("__tp",		ctypes.POINTER(timespec)),] )

clock_settime = _rpythonic_function_(		"clock_settime", ctypes.c_int, [
	("__clock_id",		ctypes.c_int),
	("__tp",		ctypes.POINTER(timespec)),] )

clock_nanosleep = _rpythonic_function_(		"clock_nanosleep", ctypes.c_int, [
	("__clock_id",		ctypes.c_int),
	("__flags",		ctypes.c_int),
	("__req",		ctypes.POINTER(timespec)),
	("__rem",		ctypes.POINTER(timespec)),] )

clock_getcpuclockid = _rpythonic_function_(		"clock_getcpuclockid", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__clock_id",		ctypes.POINTER(ctypes.c_int)),] )

timer_create = _rpythonic_function_(		"timer_create", ctypes.c_int, [
	("__clock_id",		ctypes.c_int),
	("__evp",		ctypes.POINTER(sigevent)),
	("__timerid",		ctypes.POINTER(ctypes.c_void_p)),] )

timer_delete = _rpythonic_function_(		"timer_delete", ctypes.c_int, [("__timerid",		ctypes.c_void_p)] )

timer_settime = _rpythonic_function_(		"timer_settime", ctypes.c_int, [
	("__timerid",		ctypes.c_void_p),
	("__flags",		ctypes.c_int),
	("__value",		ctypes.POINTER(itimerspec)),
	("__ovalue",		ctypes.POINTER(itimerspec)),] )

timer_gettime = _rpythonic_function_(		"timer_gettime", ctypes.c_int, [
	("__timerid",		ctypes.c_void_p),
	("__value",		ctypes.POINTER(itimerspec)),] )

timer_getoverrun = _rpythonic_function_(		"timer_getoverrun", ctypes.c_int, [("__timerid",		ctypes.c_void_p)] )

GCompareFunc = _rpythonic_function_(		"GCompareFunc", ctypes.c_int, [
	("a",		ctypes.POINTER(ctypes.c_void_p)),
	("b",		ctypes.POINTER(ctypes.c_void_p)),] )

GCompareDataFunc = _rpythonic_function_(		"GCompareDataFunc", ctypes.c_int, [
	("a",		ctypes.POINTER(ctypes.c_void_p)),
	("b",		ctypes.POINTER(ctypes.c_void_p)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GEqualFunc = _rpythonic_function_(		"GEqualFunc", ctypes.c_int, [
	("a",		ctypes.POINTER(ctypes.c_void_p)),
	("b",		ctypes.POINTER(ctypes.c_void_p)),] )

GDestroyNotify = _rpythonic_function_(		"GDestroyNotify", ctypes.c_void_p, [("data",		ctypes.c_void_p)] )

GFunc = _rpythonic_function_(		"GFunc", ctypes.c_void_p, [
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GHashFunc = _rpythonic_function_(		"GHashFunc", ctypes.c_uint, [("key",		ctypes.c_void_p)] )

GHFunc = _rpythonic_function_(		"GHFunc", ctypes.c_void_p, [
	("key",		ctypes.POINTER(ctypes.c_void_p)),
	("value",		ctypes.POINTER(ctypes.c_void_p)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GFreeFunc = _rpythonic_function_(		"GFreeFunc", ctypes.c_void_p, [("data",		ctypes.c_void_p)] )

GTranslateFunc = _rpythonic_function_(		"GTranslateFunc", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_array_new = _rpythonic_function_(		"g_array_new", ctypes.POINTER(_GArray), [
	("zero_terminated",		ctypes.c_int),
	("clear_",		ctypes.c_int),
	("element_size",		ctypes.c_uint),] )

g_array_sized_new = _rpythonic_function_(		"g_array_sized_new", ctypes.POINTER(_GArray), [
	("zero_terminated",		ctypes.c_int),
	("clear_",		ctypes.c_int),
	("element_size",		ctypes.c_uint),
	("reserved_size",		ctypes.c_uint),] )

g_array_free = _rpythonic_function_(		"g_array_free", ctypes.POINTER(ctypes.c_char), [
	("array",		ctypes.POINTER(_GArray)),
	("free_segment",		ctypes.c_int),] )

g_array_ref = _rpythonic_function_(		"g_array_ref", ctypes.POINTER(_GArray), [
	("array",		ctypes.POINTER(_GArray)),] )

g_array_unref = _rpythonic_function_(		"g_array_unref", ctypes.c_void_p, [
	("array",		ctypes.POINTER(_GArray)),] )

g_array_get_element_size = _rpythonic_function_(		"g_array_get_element_size", ctypes.c_uint, [
	("array",		ctypes.POINTER(_GArray)),] )

g_array_append_vals = _rpythonic_function_(		"g_array_append_vals", ctypes.POINTER(_GArray), [
	("array",		ctypes.POINTER(_GArray)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("C_len",		ctypes.c_uint),] )

g_array_prepend_vals = _rpythonic_function_(		"g_array_prepend_vals", ctypes.POINTER(_GArray), [
	("array",		ctypes.POINTER(_GArray)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("C_len",		ctypes.c_uint),] )

g_array_insert_vals = _rpythonic_function_(		"g_array_insert_vals", ctypes.POINTER(_GArray), [
	("array",		ctypes.POINTER(_GArray)),
	("index_",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("C_len",		ctypes.c_uint),] )

g_array_set_size = _rpythonic_function_(		"g_array_set_size", ctypes.POINTER(_GArray), [
	("array",		ctypes.POINTER(_GArray)),
	("length",		ctypes.c_uint),] )

g_array_remove_index = _rpythonic_function_(		"g_array_remove_index", ctypes.POINTER(_GArray), [
	("array",		ctypes.POINTER(_GArray)),
	("index_",		ctypes.c_uint),] )

g_array_remove_index_fast = _rpythonic_function_(		"g_array_remove_index_fast", ctypes.POINTER(_GArray), [
	("array",		ctypes.POINTER(_GArray)),
	("index_",		ctypes.c_uint),] )

g_array_remove_range = _rpythonic_function_(		"g_array_remove_range", ctypes.POINTER(_GArray), [
	("array",		ctypes.POINTER(_GArray)),
	("index_",		ctypes.c_uint),
	("length",		ctypes.c_uint),] )

g_array_sort = _rpythonic_function_(		"g_array_sort", ctypes.c_void_p, [
	("array",		ctypes.POINTER(_GArray)),
	("compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_array_sort_with_data = _rpythonic_function_(		"g_array_sort_with_data", ctypes.c_void_p, [
	("array",		ctypes.POINTER(_GArray)),
	("compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_array_set_clear_func = _rpythonic_function_(		"g_array_set_clear_func", ctypes.c_void_p, [
	("array",		ctypes.POINTER(_GArray)),
	("clear_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_ptr_array_new = _rpythonic_function_(		"g_ptr_array_new", ctypes.POINTER(_GPtrArray), [] )

g_ptr_array_new_with_free_func = _rpythonic_function_(		"g_ptr_array_new_with_free_func", ctypes.POINTER(_GPtrArray), [
	("element_free_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_ptr_array_sized_new = _rpythonic_function_(		"g_ptr_array_sized_new", ctypes.POINTER(_GPtrArray), [
	("reserved_size",		ctypes.c_uint),] )

g_ptr_array_new_full = _rpythonic_function_(		"g_ptr_array_new_full", ctypes.POINTER(_GPtrArray), [
	("reserved_size",		ctypes.c_uint),
	("element_free_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_ptr_array_free = _rpythonic_function_(		"g_ptr_array_free", ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)), [
	("array",		ctypes.POINTER(_GPtrArray)),
	("free_seg",		ctypes.c_int),] )

g_ptr_array_ref = _rpythonic_function_(		"g_ptr_array_ref", ctypes.POINTER(_GPtrArray), [
	("array",		ctypes.POINTER(_GPtrArray)),] )

g_ptr_array_unref = _rpythonic_function_(		"g_ptr_array_unref", ctypes.c_void_p, [
	("array",		ctypes.POINTER(_GPtrArray)),] )

g_ptr_array_set_free_func = _rpythonic_function_(		"g_ptr_array_set_free_func", ctypes.c_void_p, [
	("array",		ctypes.POINTER(_GPtrArray)),
	("element_free_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_ptr_array_set_size = _rpythonic_function_(		"g_ptr_array_set_size", ctypes.c_void_p, [
	("array",		ctypes.POINTER(_GPtrArray)),
	("length",		ctypes.c_int),] )

g_ptr_array_remove_index = _rpythonic_function_(		"g_ptr_array_remove_index", ctypes.POINTER(ctypes.c_void_p), [
	("array",		ctypes.POINTER(_GPtrArray)),
	("index_",		ctypes.c_uint),] )

g_ptr_array_remove_index_fast = _rpythonic_function_(		"g_ptr_array_remove_index_fast", ctypes.POINTER(ctypes.c_void_p), [
	("array",		ctypes.POINTER(_GPtrArray)),
	("index_",		ctypes.c_uint),] )

g_ptr_array_remove = _rpythonic_function_(		"g_ptr_array_remove", ctypes.c_int, [
	("array",		ctypes.POINTER(_GPtrArray)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_ptr_array_remove_fast = _rpythonic_function_(		"g_ptr_array_remove_fast", ctypes.c_int, [
	("array",		ctypes.POINTER(_GPtrArray)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_ptr_array_remove_range = _rpythonic_function_(		"g_ptr_array_remove_range", ctypes.c_void_p, [
	("array",		ctypes.POINTER(_GPtrArray)),
	("index_",		ctypes.c_uint),
	("length",		ctypes.c_uint),] )

g_ptr_array_add = _rpythonic_function_(		"g_ptr_array_add", ctypes.c_void_p, [
	("array",		ctypes.POINTER(_GPtrArray)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_ptr_array_sort = _rpythonic_function_(		"g_ptr_array_sort", ctypes.c_void_p, [
	("array",		ctypes.POINTER(_GPtrArray)),
	("compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_ptr_array_sort_with_data = _rpythonic_function_(		"g_ptr_array_sort_with_data", ctypes.c_void_p, [
	("array",		ctypes.POINTER(_GPtrArray)),
	("compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_ptr_array_foreach = _rpythonic_function_(		"g_ptr_array_foreach", ctypes.c_void_p, [
	("array",		ctypes.POINTER(_GPtrArray)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_byte_array_new = _rpythonic_function_(		"g_byte_array_new", ctypes.POINTER(_GByteArray), [] )

g_byte_array_new_take = _rpythonic_function_(		"g_byte_array_new_take", ctypes.POINTER(_GByteArray), [
	("data",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_ulong),] )

g_byte_array_sized_new = _rpythonic_function_(		"g_byte_array_sized_new", ctypes.POINTER(_GByteArray), [
	("reserved_size",		ctypes.c_uint),] )

g_byte_array_free = _rpythonic_function_(		"g_byte_array_free", ctypes.POINTER(ctypes.c_ubyte), [
	("array",		ctypes.POINTER(_GByteArray)),
	("free_segment",		ctypes.c_int),] )

g_byte_array_free_to_bytes = _rpythonic_function_(		"g_byte_array_free_to_bytes", ctypes.POINTER(_GBytes), [
	("array",		ctypes.POINTER(_GByteArray)),] )

g_byte_array_ref = _rpythonic_function_(		"g_byte_array_ref", ctypes.POINTER(_GByteArray), [
	("array",		ctypes.POINTER(_GByteArray)),] )

g_byte_array_unref = _rpythonic_function_(		"g_byte_array_unref", ctypes.c_void_p, [
	("array",		ctypes.POINTER(_GByteArray)),] )

g_byte_array_append = _rpythonic_function_(		"g_byte_array_append", ctypes.POINTER(_GByteArray), [
	("array",		ctypes.POINTER(_GByteArray)),
	("data",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_uint),] )

g_byte_array_prepend = _rpythonic_function_(		"g_byte_array_prepend", ctypes.POINTER(_GByteArray), [
	("array",		ctypes.POINTER(_GByteArray)),
	("data",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_uint),] )

g_byte_array_set_size = _rpythonic_function_(		"g_byte_array_set_size", ctypes.POINTER(_GByteArray), [
	("array",		ctypes.POINTER(_GByteArray)),
	("length",		ctypes.c_uint),] )

g_byte_array_remove_index = _rpythonic_function_(		"g_byte_array_remove_index", ctypes.POINTER(_GByteArray), [
	("array",		ctypes.POINTER(_GByteArray)),
	("index_",		ctypes.c_uint),] )

g_byte_array_remove_index_fast = _rpythonic_function_(		"g_byte_array_remove_index_fast", ctypes.POINTER(_GByteArray), [
	("array",		ctypes.POINTER(_GByteArray)),
	("index_",		ctypes.c_uint),] )

g_byte_array_remove_range = _rpythonic_function_(		"g_byte_array_remove_range", ctypes.POINTER(_GByteArray), [
	("array",		ctypes.POINTER(_GByteArray)),
	("index_",		ctypes.c_uint),
	("length",		ctypes.c_uint),] )

g_byte_array_sort = _rpythonic_function_(		"g_byte_array_sort", ctypes.c_void_p, [
	("array",		ctypes.POINTER(_GByteArray)),
	("compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_byte_array_sort_with_data = _rpythonic_function_(		"g_byte_array_sort_with_data", ctypes.c_void_p, [
	("array",		ctypes.POINTER(_GByteArray)),
	("compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_atomic_int_get = _rpythonic_function_(		"g_atomic_int_get", ctypes.c_int, [
	("atomic",		ctypes.POINTER(ctypes.c_int)),] )

g_atomic_int_set = _rpythonic_function_(		"g_atomic_int_set", ctypes.c_void_p, [
	("atomic",		ctypes.POINTER(ctypes.c_int)),
	("newval",		ctypes.c_int),] )

g_atomic_int_inc = _rpythonic_function_(		"g_atomic_int_inc", ctypes.c_void_p, [
	("atomic",		ctypes.POINTER(ctypes.c_int)),] )

g_atomic_int_dec_and_test = _rpythonic_function_(		"g_atomic_int_dec_and_test", ctypes.c_int, [
	("atomic",		ctypes.POINTER(ctypes.c_int)),] )

g_atomic_int_compare_and_exchange = _rpythonic_function_(		"g_atomic_int_compare_and_exchange", ctypes.c_int, [
	("atomic",		ctypes.POINTER(ctypes.c_int)),
	("oldval",		ctypes.c_int),
	("newval",		ctypes.c_int),] )

g_atomic_int_add = _rpythonic_function_(		"g_atomic_int_add", ctypes.c_int, [
	("atomic",		ctypes.POINTER(ctypes.c_int)),
	("val",		ctypes.c_int),] )

g_atomic_int_and = _rpythonic_function_(		"g_atomic_int_and", ctypes.c_uint, [
	("atomic",		ctypes.POINTER(ctypes.c_uint)),
	("val",		ctypes.c_uint),] )

g_atomic_int_or = _rpythonic_function_(		"g_atomic_int_or", ctypes.c_uint, [
	("atomic",		ctypes.POINTER(ctypes.c_uint)),
	("val",		ctypes.c_uint),] )

g_atomic_int_xor = _rpythonic_function_(		"g_atomic_int_xor", ctypes.c_uint, [
	("atomic",		ctypes.POINTER(ctypes.c_uint)),
	("val",		ctypes.c_uint),] )

g_atomic_pointer_get = _rpythonic_function_(		"g_atomic_pointer_get", ctypes.POINTER(ctypes.c_void_p), [("atomic",		ctypes.c_void_p)] )

g_atomic_pointer_set = _rpythonic_function_(		"g_atomic_pointer_set", ctypes.c_void_p, [
	("atomic",		ctypes.POINTER(ctypes.c_void_p)),
	("newval",		ctypes.POINTER(ctypes.c_void_p)),] )

g_atomic_pointer_compare_and_exchange = _rpythonic_function_(		"g_atomic_pointer_compare_and_exchange", ctypes.c_int, [
	("atomic",		ctypes.POINTER(ctypes.c_void_p)),
	("oldval",		ctypes.POINTER(ctypes.c_void_p)),
	("newval",		ctypes.POINTER(ctypes.c_void_p)),] )

g_atomic_pointer_add = _rpythonic_function_(		"g_atomic_pointer_add", ctypes.c_long, [
	("atomic",		ctypes.POINTER(ctypes.c_void_p)),
	("val",		ctypes.c_long),] )

g_atomic_pointer_and = _rpythonic_function_(		"g_atomic_pointer_and", ctypes.c_ulong, [
	("atomic",		ctypes.POINTER(ctypes.c_void_p)),
	("val",		ctypes.c_ulong),] )

g_atomic_pointer_or = _rpythonic_function_(		"g_atomic_pointer_or", ctypes.c_ulong, [
	("atomic",		ctypes.POINTER(ctypes.c_void_p)),
	("val",		ctypes.c_ulong),] )

g_atomic_pointer_xor = _rpythonic_function_(		"g_atomic_pointer_xor", ctypes.c_ulong, [
	("atomic",		ctypes.POINTER(ctypes.c_void_p)),
	("val",		ctypes.c_ulong),] )

g_atomic_int_exchange_and_add = _rpythonic_function_(		"g_atomic_int_exchange_and_add", ctypes.c_int, [
	("atomic",		ctypes.POINTER(ctypes.c_int)),
	("val",		ctypes.c_int),] )

g_quark_try_string = _rpythonic_function_(		"g_quark_try_string", ctypes.c_uint, [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_quark_from_static_string = _rpythonic_function_(		"g_quark_from_static_string", ctypes.c_uint, [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_quark_from_string = _rpythonic_function_(		"g_quark_from_string", ctypes.c_uint, [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_quark_to_string = _rpythonic_function_(		"g_quark_to_string", ctypes.POINTER(ctypes.c_char), [
	("quark",		ctypes.c_uint),] )

g_intern_string = _rpythonic_function_(		"g_intern_string", ctypes.POINTER(ctypes.c_char), [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_intern_static_string = _rpythonic_function_(		"g_intern_static_string", ctypes.POINTER(ctypes.c_char), [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_error_new_literal = _rpythonic_function_(		"g_error_new_literal", ctypes.POINTER(_GError), [
	("domain",		ctypes.c_uint),
	("code",		ctypes.c_int),
	("message",		ctypes.POINTER(ctypes.c_char)),] )

g_error_new_valist = _rpythonic_function_(		"g_error_new_valist", ctypes.POINTER(_GError), [
	("domain",		ctypes.c_uint),
	("code",		ctypes.c_int),
	("format",		ctypes.POINTER(ctypes.c_char)),
	("args",		ctypes.c_char),] )

g_error_free = _rpythonic_function_(		"g_error_free", ctypes.c_void_p, [
	("error",		ctypes.POINTER(_GError)),] )

g_error_copy = _rpythonic_function_(		"g_error_copy", ctypes.POINTER(_GError), [
	("error",		ctypes.POINTER(_GError)),] )

g_error_matches = _rpythonic_function_(		"g_error_matches", ctypes.c_int, [
	("error",		ctypes.POINTER(_GError)),
	("domain",		ctypes.c_uint),
	("code",		ctypes.c_int),] )

g_set_error_literal = _rpythonic_function_(		"g_set_error_literal", ctypes.c_void_p, [
	("err",		ctypes.POINTER(ctypes.POINTER(_GError))),
	("domain",		ctypes.c_uint),
	("code",		ctypes.c_int),
	("message",		ctypes.POINTER(ctypes.c_char)),] )

g_propagate_error = _rpythonic_function_(		"g_propagate_error", ctypes.c_void_p, [
	("dest",		ctypes.POINTER(ctypes.POINTER(_GError))),
	("src",		ctypes.POINTER(_GError)),] )

g_clear_error = _rpythonic_function_(		"g_clear_error", ctypes.c_void_p, [
	("err",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_thread_error_quark = _rpythonic_function_(		"g_thread_error_quark", ctypes.c_uint, [] )

GThreadFunc = _rpythonic_function_(		"GThreadFunc", ctypes.POINTER(ctypes.c_void_p), [("data",		ctypes.c_void_p)] )

g_thread_ref = _rpythonic_function_(		"g_thread_ref", ctypes.POINTER(_GThread), [
	("thread",		ctypes.POINTER(_GThread)),] )

g_thread_unref = _rpythonic_function_(		"g_thread_unref", ctypes.c_void_p, [
	("thread",		ctypes.POINTER(_GThread)),] )

g_thread_new = _rpythonic_function_(		"g_thread_new", ctypes.POINTER(_GThread), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("func",		ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_thread_try_new = _rpythonic_function_(		"g_thread_try_new", ctypes.POINTER(_GThread), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("func",		ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_thread_self = _rpythonic_function_(		"g_thread_self", ctypes.POINTER(_GThread), [] )

g_thread_exit = _rpythonic_function_(		"g_thread_exit", ctypes.c_void_p, [("retval",		ctypes.c_void_p)] )

g_thread_join = _rpythonic_function_(		"g_thread_join", ctypes.POINTER(ctypes.c_void_p), [
	("thread",		ctypes.POINTER(_GThread)),] )

g_thread_yield = _rpythonic_function_(		"g_thread_yield", ctypes.c_void_p, [] )

g_mutex_init = _rpythonic_function_(		"g_mutex_init", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(_GMutex)),] )

g_mutex_clear = _rpythonic_function_(		"g_mutex_clear", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(_GMutex)),] )

g_mutex_lock = _rpythonic_function_(		"g_mutex_lock", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(_GMutex)),] )

g_mutex_trylock = _rpythonic_function_(		"g_mutex_trylock", ctypes.c_int, [
	("mutex",		ctypes.POINTER(_GMutex)),] )

g_mutex_unlock = _rpythonic_function_(		"g_mutex_unlock", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(_GMutex)),] )

g_rw_lock_init = _rpythonic_function_(		"g_rw_lock_init", ctypes.c_void_p, [
	("rw_lock",		ctypes.POINTER(_GRWLock)),] )

g_rw_lock_clear = _rpythonic_function_(		"g_rw_lock_clear", ctypes.c_void_p, [
	("rw_lock",		ctypes.POINTER(_GRWLock)),] )

g_rw_lock_writer_lock = _rpythonic_function_(		"g_rw_lock_writer_lock", ctypes.c_void_p, [
	("rw_lock",		ctypes.POINTER(_GRWLock)),] )

g_rw_lock_writer_trylock = _rpythonic_function_(		"g_rw_lock_writer_trylock", ctypes.c_int, [
	("rw_lock",		ctypes.POINTER(_GRWLock)),] )

g_rw_lock_writer_unlock = _rpythonic_function_(		"g_rw_lock_writer_unlock", ctypes.c_void_p, [
	("rw_lock",		ctypes.POINTER(_GRWLock)),] )

g_rw_lock_reader_lock = _rpythonic_function_(		"g_rw_lock_reader_lock", ctypes.c_void_p, [
	("rw_lock",		ctypes.POINTER(_GRWLock)),] )

g_rw_lock_reader_trylock = _rpythonic_function_(		"g_rw_lock_reader_trylock", ctypes.c_int, [
	("rw_lock",		ctypes.POINTER(_GRWLock)),] )

g_rw_lock_reader_unlock = _rpythonic_function_(		"g_rw_lock_reader_unlock", ctypes.c_void_p, [
	("rw_lock",		ctypes.POINTER(_GRWLock)),] )

g_rec_mutex_init = _rpythonic_function_(		"g_rec_mutex_init", ctypes.c_void_p, [
	("rec_mutex",		ctypes.POINTER(_GRecMutex)),] )

g_rec_mutex_clear = _rpythonic_function_(		"g_rec_mutex_clear", ctypes.c_void_p, [
	("rec_mutex",		ctypes.POINTER(_GRecMutex)),] )

g_rec_mutex_lock = _rpythonic_function_(		"g_rec_mutex_lock", ctypes.c_void_p, [
	("rec_mutex",		ctypes.POINTER(_GRecMutex)),] )

g_rec_mutex_trylock = _rpythonic_function_(		"g_rec_mutex_trylock", ctypes.c_int, [
	("rec_mutex",		ctypes.POINTER(_GRecMutex)),] )

g_rec_mutex_unlock = _rpythonic_function_(		"g_rec_mutex_unlock", ctypes.c_void_p, [
	("rec_mutex",		ctypes.POINTER(_GRecMutex)),] )

g_cond_init = _rpythonic_function_(		"g_cond_init", ctypes.c_void_p, [
	("cond",		ctypes.POINTER(_GCond)),] )

g_cond_clear = _rpythonic_function_(		"g_cond_clear", ctypes.c_void_p, [
	("cond",		ctypes.POINTER(_GCond)),] )

g_cond_wait = _rpythonic_function_(		"g_cond_wait", ctypes.c_void_p, [
	("cond",		ctypes.POINTER(_GCond)),
	("mutex",		ctypes.POINTER(_GMutex)),] )

g_cond_signal = _rpythonic_function_(		"g_cond_signal", ctypes.c_void_p, [
	("cond",		ctypes.POINTER(_GCond)),] )

g_cond_broadcast = _rpythonic_function_(		"g_cond_broadcast", ctypes.c_void_p, [
	("cond",		ctypes.POINTER(_GCond)),] )

g_cond_wait_until = _rpythonic_function_(		"g_cond_wait_until", ctypes.c_int, [
	("cond",		ctypes.POINTER(_GCond)),
	("mutex",		ctypes.POINTER(_GMutex)),
	("end_time",		ctypes.c_long),] )

g_private_get = _rpythonic_function_(		"g_private_get", ctypes.POINTER(ctypes.c_void_p), [
	("key",		ctypes.POINTER(_GPrivate)),] )

g_private_set = _rpythonic_function_(		"g_private_set", ctypes.c_void_p, [
	("key",		ctypes.POINTER(_GPrivate)),
	("value",		ctypes.POINTER(ctypes.c_void_p)),] )

g_private_replace = _rpythonic_function_(		"g_private_replace", ctypes.c_void_p, [
	("key",		ctypes.POINTER(_GPrivate)),
	("value",		ctypes.POINTER(ctypes.c_void_p)),] )

g_once_impl = _rpythonic_function_(		"g_once_impl", ctypes.POINTER(ctypes.c_void_p), [
	("once",		ctypes.POINTER(_GOnce)),
	("func",		ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), )),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),] )

g_once_init_enter = _rpythonic_function_(		"g_once_init_enter", ctypes.c_int, [("location",		ctypes.c_void_p)] )

g_once_init_leave = _rpythonic_function_(		"g_once_init_leave", ctypes.c_void_p, [
	("location",		ctypes.POINTER(ctypes.c_void_p)),
	("result",		ctypes.c_ulong),] )

g_async_queue_new = _rpythonic_function_(		"g_async_queue_new", ctypes.POINTER(_GAsyncQueue), [] )

g_async_queue_new_full = _rpythonic_function_(		"g_async_queue_new_full", ctypes.POINTER(_GAsyncQueue), [
	("item_free_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_async_queue_lock = _rpythonic_function_(		"g_async_queue_lock", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GAsyncQueue)),] )

g_async_queue_unlock = _rpythonic_function_(		"g_async_queue_unlock", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GAsyncQueue)),] )

g_async_queue_ref = _rpythonic_function_(		"g_async_queue_ref", ctypes.POINTER(_GAsyncQueue), [
	("queue",		ctypes.POINTER(_GAsyncQueue)),] )

g_async_queue_unref = _rpythonic_function_(		"g_async_queue_unref", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GAsyncQueue)),] )

g_async_queue_ref_unlocked = _rpythonic_function_(		"g_async_queue_ref_unlocked", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GAsyncQueue)),] )

g_async_queue_unref_and_unlock = _rpythonic_function_(		"g_async_queue_unref_and_unlock", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GAsyncQueue)),] )

g_async_queue_push = _rpythonic_function_(		"g_async_queue_push", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GAsyncQueue)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_async_queue_push_unlocked = _rpythonic_function_(		"g_async_queue_push_unlocked", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GAsyncQueue)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_async_queue_push_sorted = _rpythonic_function_(		"g_async_queue_push_sorted", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GAsyncQueue)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_async_queue_push_sorted_unlocked = _rpythonic_function_(		"g_async_queue_push_sorted_unlocked", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GAsyncQueue)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_async_queue_pop = _rpythonic_function_(		"g_async_queue_pop", ctypes.POINTER(ctypes.c_void_p), [
	("queue",		ctypes.POINTER(_GAsyncQueue)),] )

g_async_queue_pop_unlocked = _rpythonic_function_(		"g_async_queue_pop_unlocked", ctypes.POINTER(ctypes.c_void_p), [
	("queue",		ctypes.POINTER(_GAsyncQueue)),] )

g_async_queue_try_pop = _rpythonic_function_(		"g_async_queue_try_pop", ctypes.POINTER(ctypes.c_void_p), [
	("queue",		ctypes.POINTER(_GAsyncQueue)),] )

g_async_queue_try_pop_unlocked = _rpythonic_function_(		"g_async_queue_try_pop_unlocked", ctypes.POINTER(ctypes.c_void_p), [
	("queue",		ctypes.POINTER(_GAsyncQueue)),] )

g_async_queue_timeout_pop = _rpythonic_function_(		"g_async_queue_timeout_pop", ctypes.POINTER(ctypes.c_void_p), [
	("queue",		ctypes.POINTER(_GAsyncQueue)),
	("timeout",		ctypes.c_ulong),] )

g_async_queue_timeout_pop_unlocked = _rpythonic_function_(		"g_async_queue_timeout_pop_unlocked", ctypes.POINTER(ctypes.c_void_p), [
	("queue",		ctypes.POINTER(_GAsyncQueue)),
	("timeout",		ctypes.c_ulong),] )

g_async_queue_length = _rpythonic_function_(		"g_async_queue_length", ctypes.c_int, [
	("queue",		ctypes.POINTER(_GAsyncQueue)),] )

g_async_queue_length_unlocked = _rpythonic_function_(		"g_async_queue_length_unlocked", ctypes.c_int, [
	("queue",		ctypes.POINTER(_GAsyncQueue)),] )

g_async_queue_sort = _rpythonic_function_(		"g_async_queue_sort", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GAsyncQueue)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_async_queue_sort_unlocked = _rpythonic_function_(		"g_async_queue_sort_unlocked", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GAsyncQueue)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_async_queue_timed_pop = _rpythonic_function_(		"g_async_queue_timed_pop", ctypes.POINTER(ctypes.c_void_p), [
	("queue",		ctypes.POINTER(_GAsyncQueue)),
	("end_time",		ctypes.POINTER(_GTimeVal)),] )

g_async_queue_timed_pop_unlocked = _rpythonic_function_(		"g_async_queue_timed_pop_unlocked", ctypes.POINTER(ctypes.c_void_p), [
	("queue",		ctypes.POINTER(_GAsyncQueue)),
	("end_time",		ctypes.POINTER(_GTimeVal)),] )

_function = _rpythonic_function_(		"_function", ctypes.c_void_p, [
	("none",		ctypes.c_void_p),] )

signal = _rpythonic_function_(		"signal", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,), [
	("__sig",		ctypes.c_int),
	("__handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,)),] )

kill = _rpythonic_function_(		"kill", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__sig",		ctypes.c_int),] )

killpg = _rpythonic_function_(		"killpg", ctypes.c_int, [
	("__pgrp",		ctypes.c_int),
	("__sig",		ctypes.c_int),] )

C_raise = _rpythonic_function_(		"C_raise", ctypes.c_int, [
	("__sig",		ctypes.c_int),] )

ssignal = _rpythonic_function_(		"ssignal", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,), [
	("__sig",		ctypes.c_int),
	("__handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,)),] )

gsignal = _rpythonic_function_(		"gsignal", ctypes.c_int, [
	("__sig",		ctypes.c_int),] )

psignal = _rpythonic_function_(		"psignal", ctypes.c_void_p, [
	("__sig",		ctypes.c_int),
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

psiginfo = _rpythonic_function_(		"psiginfo", ctypes.c_void_p, [
	("__pinfo",		ctypes.POINTER(siginfo)),
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

sigblock = _rpythonic_function_(		"sigblock", ctypes.c_int, [
	("__mask",		ctypes.c_int),] )

sigsetmask = _rpythonic_function_(		"sigsetmask", ctypes.c_int, [
	("__mask",		ctypes.c_int),] )

siggetmask = _rpythonic_function_(		"siggetmask", ctypes.c_int, [] )

sigemptyset = _rpythonic_function_(		"sigemptyset", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),] )

sigfillset = _rpythonic_function_(		"sigfillset", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),] )

sigaddset = _rpythonic_function_(		"sigaddset", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),
	("__signo",		ctypes.c_int),] )

sigdelset = _rpythonic_function_(		"sigdelset", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),
	("__signo",		ctypes.c_int),] )

sigismember = _rpythonic_function_(		"sigismember", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),
	("__signo",		ctypes.c_int),] )

sa_sigaction = _rpythonic_function_(		"sa_sigaction", ctypes.c_void_p, [
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

sa_restorer = _rpythonic_function_(		"sa_restorer", ctypes.c_void_p, [] )

sigprocmask = _rpythonic_function_(		"sigprocmask", ctypes.c_int, [
	("__how",		ctypes.c_int),
	("__set",		ctypes.POINTER(__sigset_t)),
	("__oset",		ctypes.POINTER(__sigset_t)),] )

sigsuspend = _rpythonic_function_(		"sigsuspend", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),] )

sigpending = _rpythonic_function_(		"sigpending", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),] )

sigwait = _rpythonic_function_(		"sigwait", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),
	("__sig",		ctypes.POINTER(ctypes.c_int)),] )

sigwaitinfo = _rpythonic_function_(		"sigwaitinfo", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),
	("__info",		ctypes.POINTER(siginfo)),] )

sigtimedwait = _rpythonic_function_(		"sigtimedwait", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),
	("__info",		ctypes.POINTER(siginfo)),
	("__timeout",		ctypes.POINTER(timespec)),] )

sigqueue = _rpythonic_function_(		"sigqueue", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__sig",		ctypes.c_int),
	("__val",		sigval),] )

sigreturn = _rpythonic_function_(		"sigreturn", ctypes.c_int, [
	("__scp",		ctypes.POINTER(sigcontext)),] )

siginterrupt = _rpythonic_function_(		"siginterrupt", ctypes.c_int, [
	("__sig",		ctypes.c_int),
	("__interrupt",		ctypes.c_int),] )

g_dbus_message_get_sender = _rpythonic_function_(		"g_dbus_message_get_sender", ctypes.POINTER(ctypes.c_char), [
	("message",		ctypes.POINTER(_GDBusMessage)),] )

g_dbus_message_set_sender = _rpythonic_function_(		"g_dbus_message_set_sender", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GDBusMessage)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_message_get_destination = _rpythonic_function_(		"g_dbus_message_get_destination", ctypes.POINTER(ctypes.c_char), [
	("message",		ctypes.POINTER(_GDBusMessage)),] )

g_dbus_message_set_destination = _rpythonic_function_(		"g_dbus_message_set_destination", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GDBusMessage)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_message_get_error_name = _rpythonic_function_(		"g_dbus_message_get_error_name", ctypes.POINTER(ctypes.c_char), [
	("message",		ctypes.POINTER(_GDBusMessage)),] )

pthread_sigmask = _rpythonic_function_(		"pthread_sigmask", ctypes.c_int, [
	("__how",		ctypes.c_int),
	("__newmask",		ctypes.POINTER(__sigset_t)),
	("__oldmask",		ctypes.POINTER(__sigset_t)),] )

pthread_kill = _rpythonic_function_(		"pthread_kill", ctypes.c_int, [
	("__threadid",		ctypes.c_uint64),
	("__signo",		ctypes.c_int),] )

g_on_error_query = _rpythonic_function_(		"g_on_error_query", ctypes.c_void_p, [
	("prg_name",		ctypes.POINTER(ctypes.c_char)),] )

g_on_error_stack_trace = _rpythonic_function_(		"g_on_error_stack_trace", ctypes.c_void_p, [
	("prg_name",		ctypes.POINTER(ctypes.c_char)),] )

g_base64_encode_step = _rpythonic_function_(		"g_base64_encode_step", ctypes.c_ulong, [
	("C_in",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_ulong),
	("break_lines",		ctypes.c_int),
	("out",		ctypes.POINTER(ctypes.c_char)),
	("state",		ctypes.POINTER(ctypes.c_int)),
	("save",		ctypes.POINTER(ctypes.c_int)),] )

g_base64_encode_close = _rpythonic_function_(		"g_base64_encode_close", ctypes.c_ulong, [
	("break_lines",		ctypes.c_int),
	("out",		ctypes.POINTER(ctypes.c_char)),
	("state",		ctypes.POINTER(ctypes.c_int)),
	("save",		ctypes.POINTER(ctypes.c_int)),] )

g_base64_encode = _rpythonic_function_(		"g_base64_encode", ctypes.POINTER(ctypes.c_char), [
	("data",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_ulong),] )

g_base64_decode_step = _rpythonic_function_(		"g_base64_decode_step", ctypes.c_ulong, [
	("C_in",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_ulong),
	("out",		ctypes.POINTER(ctypes.c_ubyte)),
	("state",		ctypes.POINTER(ctypes.c_int)),
	("save",		ctypes.POINTER(ctypes.c_uint)),] )

g_base64_decode = _rpythonic_function_(		"g_base64_decode", ctypes.POINTER(ctypes.c_ubyte), [
	("text",		ctypes.POINTER(ctypes.c_char)),
	("out_len",		ctypes.POINTER(ctypes.c_ulong)),] )

g_base64_decode_inplace = _rpythonic_function_(		"g_base64_decode_inplace", ctypes.POINTER(ctypes.c_ubyte), [
	("text",		ctypes.POINTER(ctypes.c_char)),
	("out_len",		ctypes.POINTER(ctypes.c_ulong)),] )

g_bit_lock = _rpythonic_function_(		"g_bit_lock", ctypes.c_void_p, [
	("address",		ctypes.POINTER(ctypes.c_int)),
	("lock_bit",		ctypes.c_int),] )

g_bit_trylock = _rpythonic_function_(		"g_bit_trylock", ctypes.c_int, [
	("address",		ctypes.POINTER(ctypes.c_int)),
	("lock_bit",		ctypes.c_int),] )

g_bit_unlock = _rpythonic_function_(		"g_bit_unlock", ctypes.c_void_p, [
	("address",		ctypes.POINTER(ctypes.c_int)),
	("lock_bit",		ctypes.c_int),] )

g_pointer_bit_lock = _rpythonic_function_(		"g_pointer_bit_lock", ctypes.c_void_p, [
	("address",		ctypes.POINTER(ctypes.c_void_p)),
	("lock_bit",		ctypes.c_int),] )

g_pointer_bit_trylock = _rpythonic_function_(		"g_pointer_bit_trylock", ctypes.c_int, [
	("address",		ctypes.POINTER(ctypes.c_void_p)),
	("lock_bit",		ctypes.c_int),] )

g_pointer_bit_unlock = _rpythonic_function_(		"g_pointer_bit_unlock", ctypes.c_void_p, [
	("address",		ctypes.POINTER(ctypes.c_void_p)),
	("lock_bit",		ctypes.c_int),] )

g_bookmark_file_error_quark = _rpythonic_function_(		"g_bookmark_file_error_quark", ctypes.c_uint, [] )

g_bookmark_file_new = _rpythonic_function_(		"g_bookmark_file_new", ctypes.POINTER(_GBookmarkFile), [] )

g_bookmark_file_free = _rpythonic_function_(		"g_bookmark_file_free", ctypes.c_void_p, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),] )

g_bookmark_file_load_from_file = _rpythonic_function_(		"g_bookmark_file_load_from_file", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_load_from_data = _rpythonic_function_(		"g_bookmark_file_load_from_data", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("data",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_ulong),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_load_from_data_dirs = _rpythonic_function_(		"g_bookmark_file_load_from_data_dirs", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("full_path",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_to_data = _rpythonic_function_(		"g_bookmark_file_to_data", ctypes.POINTER(ctypes.c_char), [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_to_file = _rpythonic_function_(		"g_bookmark_file_to_file", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_set_title = _rpythonic_function_(		"g_bookmark_file_set_title", ctypes.c_void_p, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("title",		ctypes.POINTER(ctypes.c_char)),] )

g_bookmark_file_get_title = _rpythonic_function_(		"g_bookmark_file_get_title", ctypes.POINTER(ctypes.c_char), [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_set_description = _rpythonic_function_(		"g_bookmark_file_set_description", ctypes.c_void_p, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("description",		ctypes.POINTER(ctypes.c_char)),] )

g_bookmark_file_get_description = _rpythonic_function_(		"g_bookmark_file_get_description", ctypes.POINTER(ctypes.c_char), [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_set_mime_type = _rpythonic_function_(		"g_bookmark_file_set_mime_type", ctypes.c_void_p, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("mime_type",		ctypes.POINTER(ctypes.c_char)),] )

g_bookmark_file_get_mime_type = _rpythonic_function_(		"g_bookmark_file_get_mime_type", ctypes.POINTER(ctypes.c_char), [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_set_groups = _rpythonic_function_(		"g_bookmark_file_set_groups", ctypes.c_void_p, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("groups",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("length",		ctypes.c_ulong),] )

g_bookmark_file_add_group = _rpythonic_function_(		"g_bookmark_file_add_group", ctypes.c_void_p, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("group",		ctypes.POINTER(ctypes.c_char)),] )

g_bookmark_file_has_group = _rpythonic_function_(		"g_bookmark_file_has_group", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("group",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_get_groups = _rpythonic_function_(		"g_bookmark_file_get_groups", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_add_application = _rpythonic_function_(		"g_bookmark_file_add_application", ctypes.c_void_p, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("C_exec",		ctypes.POINTER(ctypes.c_char)),] )

g_bookmark_file_has_application = _rpythonic_function_(		"g_bookmark_file_has_application", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_get_applications = _rpythonic_function_(		"g_bookmark_file_get_applications", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_set_app_info = _rpythonic_function_(		"g_bookmark_file_set_app_info", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("C_exec",		ctypes.POINTER(ctypes.c_char)),
	("count",		ctypes.c_int),
	("stamp",		ctypes.c_int64),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_get_app_info = _rpythonic_function_(		"g_bookmark_file_get_app_info", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("C_exec",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("count",		ctypes.POINTER(ctypes.c_uint)),
	("stamp",		ctypes.POINTER(ctypes.c_int64)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_set_is_private = _rpythonic_function_(		"g_bookmark_file_set_is_private", ctypes.c_void_p, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("is_private",		ctypes.c_int),] )

g_bookmark_file_get_is_private = _rpythonic_function_(		"g_bookmark_file_get_is_private", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_set_icon = _rpythonic_function_(		"g_bookmark_file_set_icon", ctypes.c_void_p, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("href",		ctypes.POINTER(ctypes.c_char)),
	("mime_type",		ctypes.POINTER(ctypes.c_char)),] )

g_bookmark_file_get_icon = _rpythonic_function_(		"g_bookmark_file_get_icon", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("href",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("mime_type",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_set_added = _rpythonic_function_(		"g_bookmark_file_set_added", ctypes.c_void_p, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("added",		ctypes.c_int64),] )

g_bookmark_file_get_added = _rpythonic_function_(		"g_bookmark_file_get_added", ctypes.c_int64, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_set_modified = _rpythonic_function_(		"g_bookmark_file_set_modified", ctypes.c_void_p, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("modified",		ctypes.c_int64),] )

g_bookmark_file_get_modified = _rpythonic_function_(		"g_bookmark_file_get_modified", ctypes.c_int64, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_set_visited = _rpythonic_function_(		"g_bookmark_file_set_visited", ctypes.c_void_p, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("visited",		ctypes.c_int64),] )

g_bookmark_file_get_visited = _rpythonic_function_(		"g_bookmark_file_get_visited", ctypes.c_int64, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_has_item = _rpythonic_function_(		"g_bookmark_file_has_item", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

g_bookmark_file_get_size = _rpythonic_function_(		"g_bookmark_file_get_size", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),] )

g_bookmark_file_get_uris = _rpythonic_function_(		"g_bookmark_file_get_uris", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),] )

g_bookmark_file_remove_group = _rpythonic_function_(		"g_bookmark_file_remove_group", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("group",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_remove_application = _rpythonic_function_(		"g_bookmark_file_remove_application", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_remove_item = _rpythonic_function_(		"g_bookmark_file_remove_item", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bookmark_file_move_item = _rpythonic_function_(		"g_bookmark_file_move_item", ctypes.c_int, [
	("bookmark",		ctypes.POINTER(_GBookmarkFile)),
	("old_uri",		ctypes.POINTER(ctypes.c_char)),
	("new_uri",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bytes_new = _rpythonic_function_(		"g_bytes_new", ctypes.POINTER(_GBytes), [
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.c_ulong),] )

g_bytes_new_take = _rpythonic_function_(		"g_bytes_new_take", ctypes.POINTER(_GBytes), [
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.c_ulong),] )

g_bytes_new_static = _rpythonic_function_(		"g_bytes_new_static", ctypes.POINTER(_GBytes), [
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.c_ulong),] )

g_bytes_new_with_free_func = _rpythonic_function_(		"g_bytes_new_with_free_func", ctypes.POINTER(_GBytes), [
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.c_ulong),
	("free_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_bytes_new_from_bytes = _rpythonic_function_(		"g_bytes_new_from_bytes", ctypes.POINTER(_GBytes), [
	("bytes",		ctypes.POINTER(_GBytes)),
	("offset",		ctypes.c_ulong),
	("length",		ctypes.c_ulong),] )

g_bytes_get_data = _rpythonic_function_(		"g_bytes_get_data", ctypes.POINTER(ctypes.c_void_p), [
	("bytes",		ctypes.POINTER(_GBytes)),
	("size",		ctypes.POINTER(ctypes.c_ulong)),] )

g_bytes_get_size = _rpythonic_function_(		"g_bytes_get_size", ctypes.c_ulong, [
	("bytes",		ctypes.POINTER(_GBytes)),] )

g_bytes_ref = _rpythonic_function_(		"g_bytes_ref", ctypes.POINTER(_GBytes), [
	("bytes",		ctypes.POINTER(_GBytes)),] )

g_bytes_unref = _rpythonic_function_(		"g_bytes_unref", ctypes.c_void_p, [
	("bytes",		ctypes.POINTER(_GBytes)),] )

g_bytes_unref_to_data = _rpythonic_function_(		"g_bytes_unref_to_data", ctypes.POINTER(ctypes.c_void_p), [
	("bytes",		ctypes.POINTER(_GBytes)),
	("size",		ctypes.POINTER(ctypes.c_ulong)),] )

g_bytes_unref_to_array = _rpythonic_function_(		"g_bytes_unref_to_array", ctypes.POINTER(_GByteArray), [
	("bytes",		ctypes.POINTER(_GBytes)),] )

g_bytes_hash = _rpythonic_function_(		"g_bytes_hash", ctypes.c_uint, [("bytes",		ctypes.c_void_p)] )

g_bytes_equal = _rpythonic_function_(		"g_bytes_equal", ctypes.c_int, [
	("bytes1",		ctypes.POINTER(ctypes.c_void_p)),
	("bytes2",		ctypes.POINTER(ctypes.c_void_p)),] )

g_bytes_compare = _rpythonic_function_(		"g_bytes_compare", ctypes.c_int, [
	("bytes1",		ctypes.POINTER(ctypes.c_void_p)),
	("bytes2",		ctypes.POINTER(ctypes.c_void_p)),] )

g_get_charset = _rpythonic_function_(		"g_get_charset", ctypes.c_int, [
	("charset",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_get_codeset = _rpythonic_function_(		"g_get_codeset", ctypes.POINTER(ctypes.c_char), [] )

g_get_language_names = _rpythonic_function_(		"g_get_language_names", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [] )

g_get_locale_variants = _rpythonic_function_(		"g_get_locale_variants", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("locale",		ctypes.POINTER(ctypes.c_char)),] )

g_checksum_type_get_length = _rpythonic_function_(		"g_checksum_type_get_length", ctypes.c_long, [
	("checksum_type",		ctypes.c_int),] )

g_checksum_new = _rpythonic_function_(		"g_checksum_new", ctypes.POINTER(_GChecksum), [
	("checksum_type",		ctypes.c_int),] )

g_checksum_reset = _rpythonic_function_(		"g_checksum_reset", ctypes.c_void_p, [
	("checksum",		ctypes.POINTER(_GChecksum)),] )

g_checksum_copy = _rpythonic_function_(		"g_checksum_copy", ctypes.POINTER(_GChecksum), [
	("checksum",		ctypes.POINTER(_GChecksum)),] )

g_checksum_free = _rpythonic_function_(		"g_checksum_free", ctypes.c_void_p, [
	("checksum",		ctypes.POINTER(_GChecksum)),] )

g_checksum_update = _rpythonic_function_(		"g_checksum_update", ctypes.c_void_p, [
	("checksum",		ctypes.POINTER(_GChecksum)),
	("data",		ctypes.POINTER(ctypes.c_ubyte)),
	("length",		ctypes.c_long),] )

g_checksum_get_string = _rpythonic_function_(		"g_checksum_get_string", ctypes.POINTER(ctypes.c_char), [
	("checksum",		ctypes.POINTER(_GChecksum)),] )

g_checksum_get_digest = _rpythonic_function_(		"g_checksum_get_digest", ctypes.c_void_p, [
	("checksum",		ctypes.POINTER(_GChecksum)),
	("buffer",		ctypes.POINTER(ctypes.c_ubyte)),
	("digest_len",		ctypes.POINTER(ctypes.c_ulong)),] )

g_compute_checksum_for_data = _rpythonic_function_(		"g_compute_checksum_for_data", ctypes.POINTER(ctypes.c_char), [
	("checksum_type",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_ubyte)),
	("length",		ctypes.c_ulong),] )

g_compute_checksum_for_string = _rpythonic_function_(		"g_compute_checksum_for_string", ctypes.POINTER(ctypes.c_char), [
	("checksum_type",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_long),] )

g_convert_error_quark = _rpythonic_function_(		"g_convert_error_quark", ctypes.c_uint, [] )

g_iconv_open = _rpythonic_function_(		"g_iconv_open", ctypes.POINTER(_GIConv), [
	("to_codeset",		ctypes.POINTER(ctypes.c_char)),
	("from_codeset",		ctypes.POINTER(ctypes.c_char)),] )

g_iconv = _rpythonic_function_(		"g_iconv", ctypes.c_ulong, [
	("converter",		ctypes.POINTER(_GIConv)),
	("inbuf",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("inbytes_left",		ctypes.POINTER(ctypes.c_ulong)),
	("outbuf",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("outbytes_left",		ctypes.POINTER(ctypes.c_ulong)),] )

g_iconv_close = _rpythonic_function_(		"g_iconv_close", ctypes.c_int, [
	("converter",		ctypes.POINTER(_GIConv)),] )

g_convert = _rpythonic_function_(		"g_convert", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),
	("to_codeset",		ctypes.POINTER(ctypes.c_char)),
	("from_codeset",		ctypes.POINTER(ctypes.c_char)),
	("bytes_read",		ctypes.POINTER(ctypes.c_ulong)),
	("bytes_written",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_convert_with_iconv = _rpythonic_function_(		"g_convert_with_iconv", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),
	("converter",		ctypes.POINTER(_GIConv)),
	("bytes_read",		ctypes.POINTER(ctypes.c_ulong)),
	("bytes_written",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_convert_with_fallback = _rpythonic_function_(		"g_convert_with_fallback", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),
	("to_codeset",		ctypes.POINTER(ctypes.c_char)),
	("from_codeset",		ctypes.POINTER(ctypes.c_char)),
	("fallback",		ctypes.POINTER(ctypes.c_char)),
	("bytes_read",		ctypes.POINTER(ctypes.c_ulong)),
	("bytes_written",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_locale_to_utf8 = _rpythonic_function_(		"g_locale_to_utf8", ctypes.POINTER(ctypes.c_char), [
	("opsysstring",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),
	("bytes_read",		ctypes.POINTER(ctypes.c_ulong)),
	("bytes_written",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_locale_from_utf8 = _rpythonic_function_(		"g_locale_from_utf8", ctypes.POINTER(ctypes.c_char), [
	("utf8string",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),
	("bytes_read",		ctypes.POINTER(ctypes.c_ulong)),
	("bytes_written",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_filename_to_utf8 = _rpythonic_function_(		"g_filename_to_utf8", ctypes.POINTER(ctypes.c_char), [
	("opsysstring",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),
	("bytes_read",		ctypes.POINTER(ctypes.c_ulong)),
	("bytes_written",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_filename_from_utf8 = _rpythonic_function_(		"g_filename_from_utf8", ctypes.POINTER(ctypes.c_char), [
	("utf8string",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),
	("bytes_read",		ctypes.POINTER(ctypes.c_ulong)),
	("bytes_written",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_filename_from_uri = _rpythonic_function_(		"g_filename_from_uri", ctypes.POINTER(ctypes.c_char), [
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("hostname",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_filename_to_uri = _rpythonic_function_(		"g_filename_to_uri", ctypes.POINTER(ctypes.c_char), [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("hostname",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_filename_display_name = _rpythonic_function_(		"g_filename_display_name", ctypes.POINTER(ctypes.c_char), [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

g_get_filename_charsets = _rpythonic_function_(		"g_get_filename_charsets", ctypes.c_int, [
	("charsets",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(ctypes.c_char)))),] )

g_filename_display_basename = _rpythonic_function_(		"g_filename_display_basename", ctypes.POINTER(ctypes.c_char), [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

g_uri_list_extract_uris = _rpythonic_function_(		"g_uri_list_extract_uris", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("uri_list",		ctypes.POINTER(ctypes.c_char)),] )

GDataForeachFunc = _rpythonic_function_(		"GDataForeachFunc", ctypes.c_void_p, [
	("key_id",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_datalist_init = _rpythonic_function_(		"g_datalist_init", ctypes.c_void_p, [
	("datalist",		ctypes.POINTER(ctypes.POINTER(_GData))),] )

g_datalist_clear = _rpythonic_function_(		"g_datalist_clear", ctypes.c_void_p, [
	("datalist",		ctypes.POINTER(ctypes.POINTER(_GData))),] )

g_datalist_id_get_data = _rpythonic_function_(		"g_datalist_id_get_data", ctypes.POINTER(ctypes.c_void_p), [
	("datalist",		ctypes.POINTER(ctypes.POINTER(_GData))),
	("key_id",		ctypes.c_uint),] )

g_datalist_id_set_data_full = _rpythonic_function_(		"g_datalist_id_set_data_full", ctypes.c_void_p, [
	("datalist",		ctypes.POINTER(ctypes.POINTER(_GData))),
	("key_id",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_datalist_id_remove_no_notify = _rpythonic_function_(		"g_datalist_id_remove_no_notify", ctypes.POINTER(ctypes.c_void_p), [
	("datalist",		ctypes.POINTER(ctypes.POINTER(_GData))),
	("key_id",		ctypes.c_uint),] )

g_datalist_foreach = _rpythonic_function_(		"g_datalist_foreach", ctypes.c_void_p, [
	("datalist",		ctypes.POINTER(ctypes.POINTER(_GData))),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_uint,ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_datalist_set_flags = _rpythonic_function_(		"g_datalist_set_flags", ctypes.c_void_p, [
	("datalist",		ctypes.POINTER(ctypes.POINTER(_GData))),
	("flags",		ctypes.c_uint),] )

g_datalist_unset_flags = _rpythonic_function_(		"g_datalist_unset_flags", ctypes.c_void_p, [
	("datalist",		ctypes.POINTER(ctypes.POINTER(_GData))),
	("flags",		ctypes.c_uint),] )

g_datalist_get_flags = _rpythonic_function_(		"g_datalist_get_flags", ctypes.c_uint, [
	("datalist",		ctypes.POINTER(ctypes.POINTER(_GData))),] )

g_dataset_destroy = _rpythonic_function_(		"g_dataset_destroy", ctypes.c_void_p, [("dataset_location",		ctypes.c_void_p)] )

g_dataset_id_get_data = _rpythonic_function_(		"g_dataset_id_get_data", ctypes.POINTER(ctypes.c_void_p), [
	("dataset_location",		ctypes.POINTER(ctypes.c_void_p)),
	("key_id",		ctypes.c_uint),] )

g_datalist_get_data = _rpythonic_function_(		"g_datalist_get_data", ctypes.POINTER(ctypes.c_void_p), [
	("datalist",		ctypes.POINTER(ctypes.POINTER(_GData))),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

g_dataset_id_set_data_full = _rpythonic_function_(		"g_dataset_id_set_data_full", ctypes.c_void_p, [
	("dataset_location",		ctypes.POINTER(ctypes.c_void_p)),
	("key_id",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_dataset_id_remove_no_notify = _rpythonic_function_(		"g_dataset_id_remove_no_notify", ctypes.POINTER(ctypes.c_void_p), [
	("dataset_location",		ctypes.POINTER(ctypes.c_void_p)),
	("key_id",		ctypes.c_uint),] )

g_dataset_foreach = _rpythonic_function_(		"g_dataset_foreach", ctypes.c_void_p, [
	("dataset_location",		ctypes.POINTER(ctypes.c_void_p)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_uint,ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_date_new = _rpythonic_function_(		"g_date_new", ctypes.POINTER(_GDate), [] )

g_date_new_dmy = _rpythonic_function_(		"g_date_new_dmy", ctypes.POINTER(_GDate), [
	("day",		ctypes.c_ubyte),
	("month",		ctypes.c_int),
	("year",		ctypes.c_ushort),] )

g_date_new_julian = _rpythonic_function_(		"g_date_new_julian", ctypes.POINTER(_GDate), [
	("julian_day",		ctypes.c_uint),] )

g_date_free = _rpythonic_function_(		"g_date_free", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),] )

g_date_valid = _rpythonic_function_(		"g_date_valid", ctypes.c_int, [
	("date",		ctypes.POINTER(_GDate)),] )

g_date_valid_day = _rpythonic_function_(		"g_date_valid_day", ctypes.c_int, [
	("day",		ctypes.c_ubyte),] )

g_date_valid_month = _rpythonic_function_(		"g_date_valid_month", ctypes.c_int, [
	("month",		ctypes.c_int),] )

g_date_valid_year = _rpythonic_function_(		"g_date_valid_year", ctypes.c_int, [
	("year",		ctypes.c_ushort),] )

g_date_valid_weekday = _rpythonic_function_(		"g_date_valid_weekday", ctypes.c_int, [
	("weekday",		ctypes.c_int),] )

g_date_valid_julian = _rpythonic_function_(		"g_date_valid_julian", ctypes.c_int, [
	("julian_date",		ctypes.c_uint),] )

g_date_valid_dmy = _rpythonic_function_(		"g_date_valid_dmy", ctypes.c_int, [
	("day",		ctypes.c_ubyte),
	("month",		ctypes.c_int),
	("year",		ctypes.c_ushort),] )

g_date_get_weekday = _rpythonic_function_(		"g_date_get_weekday", ctypes.c_int, [
	("date",		ctypes.POINTER(_GDate)),] )

g_date_get_month = _rpythonic_function_(		"g_date_get_month", ctypes.c_int, [
	("date",		ctypes.POINTER(_GDate)),] )

g_date_get_year = _rpythonic_function_(		"g_date_get_year", ctypes.c_ushort, [
	("date",		ctypes.POINTER(_GDate)),] )

g_date_get_day = _rpythonic_function_(		"g_date_get_day", ctypes.c_ubyte, [
	("date",		ctypes.POINTER(_GDate)),] )

g_date_get_julian = _rpythonic_function_(		"g_date_get_julian", ctypes.c_uint, [
	("date",		ctypes.POINTER(_GDate)),] )

g_date_get_day_of_year = _rpythonic_function_(		"g_date_get_day_of_year", ctypes.c_uint, [
	("date",		ctypes.POINTER(_GDate)),] )

g_date_get_monday_week_of_year = _rpythonic_function_(		"g_date_get_monday_week_of_year", ctypes.c_uint, [
	("date",		ctypes.POINTER(_GDate)),] )

g_date_get_sunday_week_of_year = _rpythonic_function_(		"g_date_get_sunday_week_of_year", ctypes.c_uint, [
	("date",		ctypes.POINTER(_GDate)),] )

g_date_get_iso8601_week_of_year = _rpythonic_function_(		"g_date_get_iso8601_week_of_year", ctypes.c_uint, [
	("date",		ctypes.POINTER(_GDate)),] )

g_date_clear = _rpythonic_function_(		"g_date_clear", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("n_dates",		ctypes.c_uint),] )

g_date_set_parse = _rpythonic_function_(		"g_date_set_parse", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

g_date_set_time_t = _rpythonic_function_(		"g_date_set_time_t", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("timet",		ctypes.c_int64),] )

g_date_set_time_val = _rpythonic_function_(		"g_date_set_time_val", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("timeval",		ctypes.POINTER(_GTimeVal)),] )

g_date_set_time = _rpythonic_function_(		"g_date_set_time", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("time_",		ctypes.c_int),] )

g_date_set_month = _rpythonic_function_(		"g_date_set_month", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("month",		ctypes.c_int),] )

g_date_set_day = _rpythonic_function_(		"g_date_set_day", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("day",		ctypes.c_ubyte),] )

g_date_set_year = _rpythonic_function_(		"g_date_set_year", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("year",		ctypes.c_ushort),] )

g_date_set_dmy = _rpythonic_function_(		"g_date_set_dmy", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("day",		ctypes.c_ubyte),
	("month",		ctypes.c_int),
	("y",		ctypes.c_ushort),] )

g_date_set_julian = _rpythonic_function_(		"g_date_set_julian", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("julian_date",		ctypes.c_uint),] )

g_date_is_first_of_month = _rpythonic_function_(		"g_date_is_first_of_month", ctypes.c_int, [
	("date",		ctypes.POINTER(_GDate)),] )

g_date_is_last_of_month = _rpythonic_function_(		"g_date_is_last_of_month", ctypes.c_int, [
	("date",		ctypes.POINTER(_GDate)),] )

g_date_add_days = _rpythonic_function_(		"g_date_add_days", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("n_days",		ctypes.c_uint),] )

g_date_subtract_days = _rpythonic_function_(		"g_date_subtract_days", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("n_days",		ctypes.c_uint),] )

g_date_add_months = _rpythonic_function_(		"g_date_add_months", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("n_months",		ctypes.c_uint),] )

g_date_subtract_months = _rpythonic_function_(		"g_date_subtract_months", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("n_months",		ctypes.c_uint),] )

g_date_add_years = _rpythonic_function_(		"g_date_add_years", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("n_years",		ctypes.c_uint),] )

g_date_subtract_years = _rpythonic_function_(		"g_date_subtract_years", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("n_years",		ctypes.c_uint),] )

g_date_is_leap_year = _rpythonic_function_(		"g_date_is_leap_year", ctypes.c_int, [
	("year",		ctypes.c_ushort),] )

g_date_get_days_in_month = _rpythonic_function_(		"g_date_get_days_in_month", ctypes.c_ubyte, [
	("month",		ctypes.c_int),
	("year",		ctypes.c_ushort),] )

g_date_get_monday_weeks_in_year = _rpythonic_function_(		"g_date_get_monday_weeks_in_year", ctypes.c_ubyte, [
	("year",		ctypes.c_ushort),] )

g_date_get_sunday_weeks_in_year = _rpythonic_function_(		"g_date_get_sunday_weeks_in_year", ctypes.c_ubyte, [
	("year",		ctypes.c_ushort),] )

g_date_days_between = _rpythonic_function_(		"g_date_days_between", ctypes.c_int, [
	("date1",		ctypes.POINTER(_GDate)),
	("date2",		ctypes.POINTER(_GDate)),] )

g_date_compare = _rpythonic_function_(		"g_date_compare", ctypes.c_int, [
	("lhs",		ctypes.POINTER(_GDate)),
	("rhs",		ctypes.POINTER(_GDate)),] )

g_date_to_struct_tm = _rpythonic_function_(		"g_date_to_struct_tm", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("tm",		ctypes.POINTER(tm)),] )

g_date_clamp = _rpythonic_function_(		"g_date_clamp", ctypes.c_void_p, [
	("date",		ctypes.POINTER(_GDate)),
	("min_date",		ctypes.POINTER(_GDate)),
	("max_date",		ctypes.POINTER(_GDate)),] )

g_date_order = _rpythonic_function_(		"g_date_order", ctypes.c_void_p, [
	("date1",		ctypes.POINTER(_GDate)),
	("date2",		ctypes.POINTER(_GDate)),] )

g_date_strftime = _rpythonic_function_(		"g_date_strftime", ctypes.c_ulong, [
	("s",		ctypes.POINTER(ctypes.c_char)),
	("slen",		ctypes.c_ulong),
	("format",		ctypes.POINTER(ctypes.c_char)),
	("date",		ctypes.POINTER(_GDate)),] )

g_time_zone_adjust_time = _rpythonic_function_(		"g_time_zone_adjust_time", ctypes.c_int, [
	("tz",		ctypes.POINTER(_GTimeZone)),
	("C_type",		ctypes.c_int),
	("time_",		ctypes.POINTER(ctypes.c_long)),] )

g_time_zone_get_abbreviation = _rpythonic_function_(		"g_time_zone_get_abbreviation", ctypes.POINTER(ctypes.c_char), [
	("tz",		ctypes.POINTER(_GTimeZone)),
	("interval",		ctypes.c_int),] )

g_time_zone_get_offset = _rpythonic_function_(		"g_time_zone_get_offset", ctypes.c_int, [
	("tz",		ctypes.POINTER(_GTimeZone)),
	("interval",		ctypes.c_int),] )

g_time_zone_is_dst = _rpythonic_function_(		"g_time_zone_is_dst", ctypes.c_int, [
	("tz",		ctypes.POINTER(_GTimeZone)),
	("interval",		ctypes.c_int),] )

g_time_zone_new = _rpythonic_function_(		"g_time_zone_new", ctypes.POINTER(_GTimeZone), [
	("identifier",		ctypes.POINTER(ctypes.c_char)),] )

g_time_zone_new_utc = _rpythonic_function_(		"g_time_zone_new_utc", ctypes.POINTER(_GTimeZone), [] )

g_time_zone_new_local = _rpythonic_function_(		"g_time_zone_new_local", ctypes.POINTER(_GTimeZone), [] )

g_time_zone_ref = _rpythonic_function_(		"g_time_zone_ref", ctypes.POINTER(_GTimeZone), [
	("tz",		ctypes.POINTER(_GTimeZone)),] )

g_time_zone_unref = _rpythonic_function_(		"g_time_zone_unref", ctypes.c_void_p, [
	("tz",		ctypes.POINTER(_GTimeZone)),] )

g_time_zone_find_interval = _rpythonic_function_(		"g_time_zone_find_interval", ctypes.c_int, [
	("tz",		ctypes.POINTER(_GTimeZone)),
	("C_type",		ctypes.c_int),
	("time_",		ctypes.c_long),] )

g_date_time_unref = _rpythonic_function_(		"g_date_time_unref", ctypes.c_void_p, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_ref = _rpythonic_function_(		"g_date_time_ref", ctypes.POINTER(_GDateTime), [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_new_now = _rpythonic_function_(		"g_date_time_new_now", ctypes.POINTER(_GDateTime), [
	("tz",		ctypes.POINTER(_GTimeZone)),] )

g_date_time_new_now_local = _rpythonic_function_(		"g_date_time_new_now_local", ctypes.POINTER(_GDateTime), [] )

g_date_time_new_now_utc = _rpythonic_function_(		"g_date_time_new_now_utc", ctypes.POINTER(_GDateTime), [] )

g_date_time_new_from_unix_local = _rpythonic_function_(		"g_date_time_new_from_unix_local", ctypes.POINTER(_GDateTime), [
	("t",		ctypes.c_long),] )

g_date_time_new_from_unix_utc = _rpythonic_function_(		"g_date_time_new_from_unix_utc", ctypes.POINTER(_GDateTime), [
	("t",		ctypes.c_long),] )

g_date_time_new_from_timeval_local = _rpythonic_function_(		"g_date_time_new_from_timeval_local", ctypes.POINTER(_GDateTime), [
	("tv",		ctypes.POINTER(_GTimeVal)),] )

g_date_time_new_from_timeval_utc = _rpythonic_function_(		"g_date_time_new_from_timeval_utc", ctypes.POINTER(_GDateTime), [
	("tv",		ctypes.POINTER(_GTimeVal)),] )

g_date_time_new = _rpythonic_function_(		"g_date_time_new", ctypes.POINTER(_GDateTime), [
	("tz",		ctypes.POINTER(_GTimeZone)),
	("year",		ctypes.c_int),
	("month",		ctypes.c_int),
	("day",		ctypes.c_int),
	("hour",		ctypes.c_int),
	("minute",		ctypes.c_int),
	("seconds",		ctypes.c_double),] )

g_date_time_new_local = _rpythonic_function_(		"g_date_time_new_local", ctypes.POINTER(_GDateTime), [
	("year",		ctypes.c_int),
	("month",		ctypes.c_int),
	("day",		ctypes.c_int),
	("hour",		ctypes.c_int),
	("minute",		ctypes.c_int),
	("seconds",		ctypes.c_double),] )

g_date_time_new_utc = _rpythonic_function_(		"g_date_time_new_utc", ctypes.POINTER(_GDateTime), [
	("year",		ctypes.c_int),
	("month",		ctypes.c_int),
	("day",		ctypes.c_int),
	("hour",		ctypes.c_int),
	("minute",		ctypes.c_int),
	("seconds",		ctypes.c_double),] )

g_date_time_add = _rpythonic_function_(		"g_date_time_add", ctypes.POINTER(_GDateTime), [
	("datetime",		ctypes.POINTER(_GDateTime)),
	("timespan",		ctypes.c_long),] )

g_date_time_add_years = _rpythonic_function_(		"g_date_time_add_years", ctypes.POINTER(_GDateTime), [
	("datetime",		ctypes.POINTER(_GDateTime)),
	("years",		ctypes.c_int),] )

g_date_time_add_months = _rpythonic_function_(		"g_date_time_add_months", ctypes.POINTER(_GDateTime), [
	("datetime",		ctypes.POINTER(_GDateTime)),
	("months",		ctypes.c_int),] )

g_date_time_add_weeks = _rpythonic_function_(		"g_date_time_add_weeks", ctypes.POINTER(_GDateTime), [
	("datetime",		ctypes.POINTER(_GDateTime)),
	("weeks",		ctypes.c_int),] )

g_date_time_add_days = _rpythonic_function_(		"g_date_time_add_days", ctypes.POINTER(_GDateTime), [
	("datetime",		ctypes.POINTER(_GDateTime)),
	("days",		ctypes.c_int),] )

g_date_time_add_hours = _rpythonic_function_(		"g_date_time_add_hours", ctypes.POINTER(_GDateTime), [
	("datetime",		ctypes.POINTER(_GDateTime)),
	("hours",		ctypes.c_int),] )

g_date_time_add_minutes = _rpythonic_function_(		"g_date_time_add_minutes", ctypes.POINTER(_GDateTime), [
	("datetime",		ctypes.POINTER(_GDateTime)),
	("minutes",		ctypes.c_int),] )

g_date_time_add_seconds = _rpythonic_function_(		"g_date_time_add_seconds", ctypes.POINTER(_GDateTime), [
	("datetime",		ctypes.POINTER(_GDateTime)),
	("seconds",		ctypes.c_double),] )

g_date_time_add_full = _rpythonic_function_(		"g_date_time_add_full", ctypes.POINTER(_GDateTime), [
	("datetime",		ctypes.POINTER(_GDateTime)),
	("years",		ctypes.c_int),
	("months",		ctypes.c_int),
	("days",		ctypes.c_int),
	("hours",		ctypes.c_int),
	("minutes",		ctypes.c_int),
	("seconds",		ctypes.c_double),] )

g_date_time_compare = _rpythonic_function_(		"g_date_time_compare", ctypes.c_int, [
	("dt1",		ctypes.POINTER(ctypes.c_void_p)),
	("dt2",		ctypes.POINTER(ctypes.c_void_p)),] )

g_date_time_difference = _rpythonic_function_(		"g_date_time_difference", ctypes.c_long, [
	("end",		ctypes.POINTER(_GDateTime)),
	("begin",		ctypes.POINTER(_GDateTime)),] )

g_date_time_hash = _rpythonic_function_(		"g_date_time_hash", ctypes.c_uint, [("datetime",		ctypes.c_void_p)] )

g_date_time_equal = _rpythonic_function_(		"g_date_time_equal", ctypes.c_int, [
	("dt1",		ctypes.POINTER(ctypes.c_void_p)),
	("dt2",		ctypes.POINTER(ctypes.c_void_p)),] )

g_date_time_get_ymd = _rpythonic_function_(		"g_date_time_get_ymd", ctypes.c_void_p, [
	("datetime",		ctypes.POINTER(_GDateTime)),
	("year",		ctypes.POINTER(ctypes.c_int)),
	("month",		ctypes.POINTER(ctypes.c_int)),
	("day",		ctypes.POINTER(ctypes.c_int)),] )

g_date_time_get_year = _rpythonic_function_(		"g_date_time_get_year", ctypes.c_int, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_get_month = _rpythonic_function_(		"g_date_time_get_month", ctypes.c_int, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_get_day_of_month = _rpythonic_function_(		"g_date_time_get_day_of_month", ctypes.c_int, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_get_week_numbering_year = _rpythonic_function_(		"g_date_time_get_week_numbering_year", ctypes.c_int, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_get_week_of_year = _rpythonic_function_(		"g_date_time_get_week_of_year", ctypes.c_int, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_get_day_of_week = _rpythonic_function_(		"g_date_time_get_day_of_week", ctypes.c_int, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_get_day_of_year = _rpythonic_function_(		"g_date_time_get_day_of_year", ctypes.c_int, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_get_hour = _rpythonic_function_(		"g_date_time_get_hour", ctypes.c_int, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_get_minute = _rpythonic_function_(		"g_date_time_get_minute", ctypes.c_int, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_get_second = _rpythonic_function_(		"g_date_time_get_second", ctypes.c_int, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_get_microsecond = _rpythonic_function_(		"g_date_time_get_microsecond", ctypes.c_int, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_get_seconds = _rpythonic_function_(		"g_date_time_get_seconds", ctypes.c_double, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_to_unix = _rpythonic_function_(		"g_date_time_to_unix", ctypes.c_long, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_to_timeval = _rpythonic_function_(		"g_date_time_to_timeval", ctypes.c_int, [
	("datetime",		ctypes.POINTER(_GDateTime)),
	("tv",		ctypes.POINTER(_GTimeVal)),] )

g_date_time_get_utc_offset = _rpythonic_function_(		"g_date_time_get_utc_offset", ctypes.c_long, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_get_timezone_abbreviation = _rpythonic_function_(		"g_date_time_get_timezone_abbreviation", ctypes.POINTER(ctypes.c_char), [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_is_daylight_savings = _rpythonic_function_(		"g_date_time_is_daylight_savings", ctypes.c_int, [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_to_timezone = _rpythonic_function_(		"g_date_time_to_timezone", ctypes.POINTER(_GDateTime), [
	("datetime",		ctypes.POINTER(_GDateTime)),
	("tz",		ctypes.POINTER(_GTimeZone)),] )

g_date_time_to_local = _rpythonic_function_(		"g_date_time_to_local", ctypes.POINTER(_GDateTime), [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_to_utc = _rpythonic_function_(		"g_date_time_to_utc", ctypes.POINTER(_GDateTime), [
	("datetime",		ctypes.POINTER(_GDateTime)),] )

g_date_time_format = _rpythonic_function_(		"g_date_time_format", ctypes.POINTER(ctypes.c_char), [
	("datetime",		ctypes.POINTER(_GDateTime)),
	("format",		ctypes.POINTER(ctypes.c_char)),] )

g_dir_open = _rpythonic_function_(		"g_dir_open", ctypes.POINTER(_GDir), [
	("path",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_uint),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dir_read_name = _rpythonic_function_(		"g_dir_read_name", ctypes.POINTER(ctypes.c_char), [
	("dir",		ctypes.POINTER(_GDir)),] )

g_dir_rewind = _rpythonic_function_(		"g_dir_rewind", ctypes.c_void_p, [
	("dir",		ctypes.POINTER(_GDir)),] )

g_dir_close = _rpythonic_function_(		"g_dir_close", ctypes.c_void_p, [
	("dir",		ctypes.POINTER(_GDir)),] )

g_getenv = _rpythonic_function_(		"g_getenv", ctypes.POINTER(ctypes.c_char), [
	("variable",		ctypes.POINTER(ctypes.c_char)),] )

g_setenv = _rpythonic_function_(		"g_setenv", ctypes.c_int, [
	("variable",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_char)),
	("overwrite",		ctypes.c_int),] )

g_unsetenv = _rpythonic_function_(		"g_unsetenv", ctypes.c_void_p, [
	("variable",		ctypes.POINTER(ctypes.c_char)),] )

g_listenv = _rpythonic_function_(		"g_listenv", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [] )

g_get_environ = _rpythonic_function_(		"g_get_environ", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [] )

g_environ_getenv = _rpythonic_function_(		"g_environ_getenv", ctypes.POINTER(ctypes.c_char), [
	("envp",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("variable",		ctypes.POINTER(ctypes.c_char)),] )

g_environ_setenv = _rpythonic_function_(		"g_environ_setenv", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("envp",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("variable",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_char)),
	("overwrite",		ctypes.c_int),] )

g_environ_unsetenv = _rpythonic_function_(		"g_environ_unsetenv", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("envp",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("variable",		ctypes.POINTER(ctypes.c_char)),] )

g_file_error_quark = _rpythonic_function_(		"g_file_error_quark", ctypes.c_uint, [] )

g_file_error_from_errno = _rpythonic_function_(		"g_file_error_from_errno", ctypes.c_int, [
	("err_no",		ctypes.c_int),] )

g_file_test = _rpythonic_function_(		"g_file_test", ctypes.c_int, [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("test",		ctypes.c_int),] )

g_file_get_contents = _rpythonic_function_(		"g_file_get_contents", ctypes.c_int, [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("contents",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("length",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_set_contents = _rpythonic_function_(		"g_file_set_contents", ctypes.c_int, [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("contents",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_long),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_read_link = _rpythonic_function_(		"g_file_read_link", ctypes.POINTER(ctypes.c_char), [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_mkdtemp = _rpythonic_function_(		"g_mkdtemp", ctypes.POINTER(ctypes.c_char), [
	("tmpl",		ctypes.POINTER(ctypes.c_char)),] )

g_mkdtemp_full = _rpythonic_function_(		"g_mkdtemp_full", ctypes.POINTER(ctypes.c_char), [
	("tmpl",		ctypes.POINTER(ctypes.c_char)),
	("mode",		ctypes.c_int),] )

g_mkstemp = _rpythonic_function_(		"g_mkstemp", ctypes.c_int, [
	("tmpl",		ctypes.POINTER(ctypes.c_char)),] )

g_mkstemp_full = _rpythonic_function_(		"g_mkstemp_full", ctypes.c_int, [
	("tmpl",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("mode",		ctypes.c_int),] )

g_file_open_tmp = _rpythonic_function_(		"g_file_open_tmp", ctypes.c_int, [
	("tmpl",		ctypes.POINTER(ctypes.c_char)),
	("name_used",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dir_make_tmp = _rpythonic_function_(		"g_dir_make_tmp", ctypes.POINTER(ctypes.c_char), [
	("tmpl",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_build_pathv = _rpythonic_function_(		"g_build_pathv", ctypes.POINTER(ctypes.c_char), [
	("separator",		ctypes.POINTER(ctypes.c_char)),
	("args",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_build_filenamev = _rpythonic_function_(		"g_build_filenamev", ctypes.POINTER(ctypes.c_char), [
	("args",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_mkdir_with_parents = _rpythonic_function_(		"g_mkdir_with_parents", ctypes.c_int, [
	("pathname",		ctypes.POINTER(ctypes.c_char)),
	("mode",		ctypes.c_int),] )

g_path_is_absolute = _rpythonic_function_(		"g_path_is_absolute", ctypes.c_int, [
	("file_name",		ctypes.POINTER(ctypes.c_char)),] )

g_path_skip_root = _rpythonic_function_(		"g_path_skip_root", ctypes.POINTER(ctypes.c_char), [
	("file_name",		ctypes.POINTER(ctypes.c_char)),] )

g_basename = _rpythonic_function_(		"g_basename", ctypes.POINTER(ctypes.c_char), [
	("file_name",		ctypes.POINTER(ctypes.c_char)),] )

g_get_current_dir = _rpythonic_function_(		"g_get_current_dir", ctypes.POINTER(ctypes.c_char), [] )

g_path_get_basename = _rpythonic_function_(		"g_path_get_basename", ctypes.POINTER(ctypes.c_char), [
	("file_name",		ctypes.POINTER(ctypes.c_char)),] )

g_path_get_dirname = _rpythonic_function_(		"g_path_get_dirname", ctypes.POINTER(ctypes.c_char), [
	("file_name",		ctypes.POINTER(ctypes.c_char)),] )

g_strip_context = _rpythonic_function_(		"g_strip_context", ctypes.POINTER(ctypes.c_char), [
	("msgid",		ctypes.POINTER(ctypes.c_char)),
	("msgval",		ctypes.POINTER(ctypes.c_char)),] )

g_dgettext = _rpythonic_function_(		"g_dgettext", ctypes.POINTER(ctypes.c_char), [
	("domain",		ctypes.POINTER(ctypes.c_char)),
	("msgid",		ctypes.POINTER(ctypes.c_char)),] )

g_dcgettext = _rpythonic_function_(		"g_dcgettext", ctypes.POINTER(ctypes.c_char), [
	("domain",		ctypes.POINTER(ctypes.c_char)),
	("msgid",		ctypes.POINTER(ctypes.c_char)),
	("category",		ctypes.c_int),] )

g_dngettext = _rpythonic_function_(		"g_dngettext", ctypes.POINTER(ctypes.c_char), [
	("domain",		ctypes.POINTER(ctypes.c_char)),
	("msgid",		ctypes.POINTER(ctypes.c_char)),
	("msgid_plural",		ctypes.POINTER(ctypes.c_char)),
	("n",		ctypes.c_ulong),] )

g_dpgettext = _rpythonic_function_(		"g_dpgettext", ctypes.POINTER(ctypes.c_char), [
	("domain",		ctypes.POINTER(ctypes.c_char)),
	("msgctxtid",		ctypes.POINTER(ctypes.c_char)),
	("msgidoffset",		ctypes.c_ulong),] )

g_dpgettext2 = _rpythonic_function_(		"g_dpgettext2", ctypes.POINTER(ctypes.c_char), [
	("domain",		ctypes.POINTER(ctypes.c_char)),
	("context",		ctypes.POINTER(ctypes.c_char)),
	("msgid",		ctypes.POINTER(ctypes.c_char)),] )

g_free = _rpythonic_function_(		"g_free", ctypes.c_void_p, [("mem",		ctypes.c_void_p)] )

g_malloc = _rpythonic_function_(		"g_malloc", ctypes.POINTER(ctypes.c_void_p), [
	("n_bytes",		ctypes.c_ulong),] )

g_malloc0 = _rpythonic_function_(		"g_malloc0", ctypes.POINTER(ctypes.c_void_p), [
	("n_bytes",		ctypes.c_ulong),] )

g_realloc = _rpythonic_function_(		"g_realloc", ctypes.POINTER(ctypes.c_void_p), [
	("mem",		ctypes.POINTER(ctypes.c_void_p)),
	("n_bytes",		ctypes.c_ulong),] )

g_try_malloc = _rpythonic_function_(		"g_try_malloc", ctypes.POINTER(ctypes.c_void_p), [
	("n_bytes",		ctypes.c_ulong),] )

g_try_malloc0 = _rpythonic_function_(		"g_try_malloc0", ctypes.POINTER(ctypes.c_void_p), [
	("n_bytes",		ctypes.c_ulong),] )

g_try_realloc = _rpythonic_function_(		"g_try_realloc", ctypes.POINTER(ctypes.c_void_p), [
	("mem",		ctypes.POINTER(ctypes.c_void_p)),
	("n_bytes",		ctypes.c_ulong),] )

g_malloc_n = _rpythonic_function_(		"g_malloc_n", ctypes.POINTER(ctypes.c_void_p), [
	("n_blocks",		ctypes.c_ulong),
	("n_block_bytes",		ctypes.c_ulong),] )

g_malloc0_n = _rpythonic_function_(		"g_malloc0_n", ctypes.POINTER(ctypes.c_void_p), [
	("n_blocks",		ctypes.c_ulong),
	("n_block_bytes",		ctypes.c_ulong),] )

g_realloc_n = _rpythonic_function_(		"g_realloc_n", ctypes.POINTER(ctypes.c_void_p), [
	("mem",		ctypes.POINTER(ctypes.c_void_p)),
	("n_blocks",		ctypes.c_ulong),
	("n_block_bytes",		ctypes.c_ulong),] )

g_try_malloc_n = _rpythonic_function_(		"g_try_malloc_n", ctypes.POINTER(ctypes.c_void_p), [
	("n_blocks",		ctypes.c_ulong),
	("n_block_bytes",		ctypes.c_ulong),] )

g_try_malloc0_n = _rpythonic_function_(		"g_try_malloc0_n", ctypes.POINTER(ctypes.c_void_p), [
	("n_blocks",		ctypes.c_ulong),
	("n_block_bytes",		ctypes.c_ulong),] )

g_try_realloc_n = _rpythonic_function_(		"g_try_realloc_n", ctypes.POINTER(ctypes.c_void_p), [
	("mem",		ctypes.POINTER(ctypes.c_void_p)),
	("n_blocks",		ctypes.c_ulong),
	("n_block_bytes",		ctypes.c_ulong),] )

malloc = _rpythonic_function_(		"malloc", ctypes.POINTER(ctypes.c_void_p), [
	("n_bytes",		ctypes.c_ulong),] )

realloc = _rpythonic_function_(		"realloc", ctypes.POINTER(ctypes.c_void_p), [
	("mem",		ctypes.POINTER(ctypes.c_void_p)),
	("n_bytes",		ctypes.c_ulong),] )

free = _rpythonic_function_(		"free", ctypes.c_void_p, [("mem",		ctypes.c_void_p)] )

calloc = _rpythonic_function_(		"calloc", ctypes.POINTER(ctypes.c_void_p), [
	("n_blocks",		ctypes.c_ulong),
	("n_block_bytes",		ctypes.c_ulong),] )

try_malloc = _rpythonic_function_(		"try_malloc", ctypes.POINTER(ctypes.c_void_p), [
	("n_bytes",		ctypes.c_ulong),] )

try_realloc = _rpythonic_function_(		"try_realloc", ctypes.POINTER(ctypes.c_void_p), [
	("mem",		ctypes.POINTER(ctypes.c_void_p)),
	("n_bytes",		ctypes.c_ulong),] )

g_mem_set_vtable = _rpythonic_function_(		"g_mem_set_vtable", ctypes.c_void_p, [
	("vtable",		ctypes.POINTER(_GMemVTable)),] )

g_mem_is_system_malloc = _rpythonic_function_(		"g_mem_is_system_malloc", ctypes.c_int, [] )

g_mem_profile = _rpythonic_function_(		"g_mem_profile", ctypes.c_void_p, [] )

g_list_alloc = _rpythonic_function_(		"g_list_alloc", ctypes.POINTER(_GList), [] )

g_list_free = _rpythonic_function_(		"g_list_free", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GList)),] )

g_list_free_1 = _rpythonic_function_(		"g_list_free_1", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GList)),] )

g_list_free_full = _rpythonic_function_(		"g_list_free_full", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GList)),
	("free_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_list_append = _rpythonic_function_(		"g_list_append", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_list_prepend = _rpythonic_function_(		"g_list_prepend", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_list_insert = _rpythonic_function_(		"g_list_insert", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("position",		ctypes.c_int),] )

g_list_insert_sorted = _rpythonic_function_(		"g_list_insert_sorted", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_list_insert_sorted_with_data = _rpythonic_function_(		"g_list_insert_sorted_with_data", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_list_insert_before = _rpythonic_function_(		"g_list_insert_before", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("sibling",		ctypes.POINTER(_GList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_list_concat = _rpythonic_function_(		"g_list_concat", ctypes.POINTER(_GList), [
	("list1",		ctypes.POINTER(_GList)),
	("list2",		ctypes.POINTER(_GList)),] )

g_list_remove = _rpythonic_function_(		"g_list_remove", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_list_remove_all = _rpythonic_function_(		"g_list_remove_all", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_list_remove_link = _rpythonic_function_(		"g_list_remove_link", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("llink",		ctypes.POINTER(_GList)),] )

g_list_delete_link = _rpythonic_function_(		"g_list_delete_link", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("link_",		ctypes.POINTER(_GList)),] )

g_list_reverse = _rpythonic_function_(		"g_list_reverse", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),] )

g_list_copy = _rpythonic_function_(		"g_list_copy", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),] )

g_list_nth = _rpythonic_function_(		"g_list_nth", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("n",		ctypes.c_uint),] )

g_list_nth_prev = _rpythonic_function_(		"g_list_nth_prev", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("n",		ctypes.c_uint),] )

g_list_find = _rpythonic_function_(		"g_list_find", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_list_find_custom = _rpythonic_function_(		"g_list_find_custom", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_list_position = _rpythonic_function_(		"g_list_position", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GList)),
	("llink",		ctypes.POINTER(_GList)),] )

g_list_index = _rpythonic_function_(		"g_list_index", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_list_last = _rpythonic_function_(		"g_list_last", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),] )

g_list_first = _rpythonic_function_(		"g_list_first", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),] )

g_list_length = _rpythonic_function_(		"g_list_length", ctypes.c_uint, [
	("C_list",		ctypes.POINTER(_GList)),] )

g_list_foreach = _rpythonic_function_(		"g_list_foreach", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GList)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_list_sort = _rpythonic_function_(		"g_list_sort", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_list_sort_with_data = _rpythonic_function_(		"g_list_sort_with_data", ctypes.POINTER(_GList), [
	("C_list",		ctypes.POINTER(_GList)),
	("compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_list_nth_data = _rpythonic_function_(		"g_list_nth_data", ctypes.POINTER(ctypes.c_void_p), [
	("C_list",		ctypes.POINTER(_GList)),
	("n",		ctypes.c_uint),] )

GHRFunc = _rpythonic_function_(		"GHRFunc", ctypes.c_int, [
	("key",		ctypes.POINTER(ctypes.c_void_p)),
	("value",		ctypes.POINTER(ctypes.c_void_p)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hash_table_new = _rpythonic_function_(		"g_hash_table_new", ctypes.POINTER(_GHashTable), [
	("hash_func",		ctypes.CFUNCTYPE(ctypes.c_uint, )),
	("key_equal_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_hash_table_new_full = _rpythonic_function_(		"g_hash_table_new_full", ctypes.POINTER(_GHashTable), [
	("hash_func",		ctypes.CFUNCTYPE(ctypes.c_uint, )),
	("key_equal_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("key_destroy_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("value_destroy_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_hash_table_destroy = _rpythonic_function_(		"g_hash_table_destroy", ctypes.c_void_p, [
	("hash_table",		ctypes.POINTER(_GHashTable)),] )

g_hash_table_insert = _rpythonic_function_(		"g_hash_table_insert", ctypes.c_void_p, [
	("hash_table",		ctypes.POINTER(_GHashTable)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),
	("value",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hash_table_replace = _rpythonic_function_(		"g_hash_table_replace", ctypes.c_void_p, [
	("hash_table",		ctypes.POINTER(_GHashTable)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),
	("value",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hash_table_add = _rpythonic_function_(		"g_hash_table_add", ctypes.c_void_p, [
	("hash_table",		ctypes.POINTER(_GHashTable)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hash_table_remove = _rpythonic_function_(		"g_hash_table_remove", ctypes.c_int, [
	("hash_table",		ctypes.POINTER(_GHashTable)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hash_table_remove_all = _rpythonic_function_(		"g_hash_table_remove_all", ctypes.c_void_p, [
	("hash_table",		ctypes.POINTER(_GHashTable)),] )

g_hash_table_steal = _rpythonic_function_(		"g_hash_table_steal", ctypes.c_int, [
	("hash_table",		ctypes.POINTER(_GHashTable)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hash_table_steal_all = _rpythonic_function_(		"g_hash_table_steal_all", ctypes.c_void_p, [
	("hash_table",		ctypes.POINTER(_GHashTable)),] )

g_hash_table_lookup = _rpythonic_function_(		"g_hash_table_lookup", ctypes.POINTER(ctypes.c_void_p), [
	("hash_table",		ctypes.POINTER(_GHashTable)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hash_table_contains = _rpythonic_function_(		"g_hash_table_contains", ctypes.c_int, [
	("hash_table",		ctypes.POINTER(_GHashTable)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hash_table_lookup_extended = _rpythonic_function_(		"g_hash_table_lookup_extended", ctypes.c_int, [
	("hash_table",		ctypes.POINTER(_GHashTable)),
	("lookup_key",		ctypes.POINTER(ctypes.c_void_p)),
	("orig_key",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("value",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

g_hash_table_foreach = _rpythonic_function_(		"g_hash_table_foreach", ctypes.c_void_p, [
	("hash_table",		ctypes.POINTER(_GHashTable)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hash_table_find = _rpythonic_function_(		"g_hash_table_find", ctypes.POINTER(ctypes.c_void_p), [
	("hash_table",		ctypes.POINTER(_GHashTable)),
	("predicate",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hash_table_foreach_remove = _rpythonic_function_(		"g_hash_table_foreach_remove", ctypes.c_uint, [
	("hash_table",		ctypes.POINTER(_GHashTable)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hash_table_foreach_steal = _rpythonic_function_(		"g_hash_table_foreach_steal", ctypes.c_uint, [
	("hash_table",		ctypes.POINTER(_GHashTable)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hash_table_size = _rpythonic_function_(		"g_hash_table_size", ctypes.c_uint, [
	("hash_table",		ctypes.POINTER(_GHashTable)),] )

g_hash_table_get_keys = _rpythonic_function_(		"g_hash_table_get_keys", ctypes.POINTER(_GList), [
	("hash_table",		ctypes.POINTER(_GHashTable)),] )

g_hash_table_get_values = _rpythonic_function_(		"g_hash_table_get_values", ctypes.POINTER(_GList), [
	("hash_table",		ctypes.POINTER(_GHashTable)),] )

g_hash_table_iter_init = _rpythonic_function_(		"g_hash_table_iter_init", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(_GHashTableIter)),
	("hash_table",		ctypes.POINTER(_GHashTable)),] )

g_hash_table_iter_next = _rpythonic_function_(		"g_hash_table_iter_next", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GHashTableIter)),
	("key",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("value",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

g_hash_table_iter_get_hash_table = _rpythonic_function_(		"g_hash_table_iter_get_hash_table", ctypes.POINTER(_GHashTable), [
	("iter",		ctypes.POINTER(_GHashTableIter)),] )

g_hash_table_iter_remove = _rpythonic_function_(		"g_hash_table_iter_remove", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(_GHashTableIter)),] )

g_hash_table_iter_replace = _rpythonic_function_(		"g_hash_table_iter_replace", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(_GHashTableIter)),
	("value",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hash_table_iter_steal = _rpythonic_function_(		"g_hash_table_iter_steal", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(_GHashTableIter)),] )

g_hash_table_ref = _rpythonic_function_(		"g_hash_table_ref", ctypes.POINTER(_GHashTable), [
	("hash_table",		ctypes.POINTER(_GHashTable)),] )

g_hash_table_unref = _rpythonic_function_(		"g_hash_table_unref", ctypes.c_void_p, [
	("hash_table",		ctypes.POINTER(_GHashTable)),] )

g_str_equal = _rpythonic_function_(		"g_str_equal", ctypes.c_int, [
	("v1",		ctypes.POINTER(ctypes.c_void_p)),
	("v2",		ctypes.POINTER(ctypes.c_void_p)),] )

g_str_hash = _rpythonic_function_(		"g_str_hash", ctypes.c_uint, [("v",		ctypes.c_void_p)] )

g_int_equal = _rpythonic_function_(		"g_int_equal", ctypes.c_int, [
	("v1",		ctypes.POINTER(ctypes.c_void_p)),
	("v2",		ctypes.POINTER(ctypes.c_void_p)),] )

g_int_hash = _rpythonic_function_(		"g_int_hash", ctypes.c_uint, [("v",		ctypes.c_void_p)] )

g_int64_equal = _rpythonic_function_(		"g_int64_equal", ctypes.c_int, [
	("v1",		ctypes.POINTER(ctypes.c_void_p)),
	("v2",		ctypes.POINTER(ctypes.c_void_p)),] )

g_int64_hash = _rpythonic_function_(		"g_int64_hash", ctypes.c_uint, [("v",		ctypes.c_void_p)] )

g_double_equal = _rpythonic_function_(		"g_double_equal", ctypes.c_int, [
	("v1",		ctypes.POINTER(ctypes.c_void_p)),
	("v2",		ctypes.POINTER(ctypes.c_void_p)),] )

g_double_hash = _rpythonic_function_(		"g_double_hash", ctypes.c_uint, [("v",		ctypes.c_void_p)] )

g_direct_hash = _rpythonic_function_(		"g_direct_hash", ctypes.c_uint, [("v",		ctypes.c_void_p)] )

g_direct_equal = _rpythonic_function_(		"g_direct_equal", ctypes.c_int, [
	("v1",		ctypes.POINTER(ctypes.c_void_p)),
	("v2",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hmac_new = _rpythonic_function_(		"g_hmac_new", ctypes.POINTER(_GHmac), [
	("digest_type",		ctypes.c_int),
	("key",		ctypes.POINTER(ctypes.c_ubyte)),
	("key_len",		ctypes.c_ulong),] )

g_hmac_copy = _rpythonic_function_(		"g_hmac_copy", ctypes.POINTER(_GHmac), [
	("hmac",		ctypes.POINTER(_GHmac)),] )

g_hmac_ref = _rpythonic_function_(		"g_hmac_ref", ctypes.POINTER(_GHmac), [
	("hmac",		ctypes.POINTER(_GHmac)),] )

g_hmac_unref = _rpythonic_function_(		"g_hmac_unref", ctypes.c_void_p, [
	("hmac",		ctypes.POINTER(_GHmac)),] )

g_hmac_update = _rpythonic_function_(		"g_hmac_update", ctypes.c_void_p, [
	("hmac",		ctypes.POINTER(_GHmac)),
	("data",		ctypes.POINTER(ctypes.c_ubyte)),
	("length",		ctypes.c_long),] )

g_hmac_get_string = _rpythonic_function_(		"g_hmac_get_string", ctypes.POINTER(ctypes.c_char), [
	("hmac",		ctypes.POINTER(_GHmac)),] )

g_hmac_get_digest = _rpythonic_function_(		"g_hmac_get_digest", ctypes.c_void_p, [
	("hmac",		ctypes.POINTER(_GHmac)),
	("buffer",		ctypes.POINTER(ctypes.c_ubyte)),
	("digest_len",		ctypes.POINTER(ctypes.c_ulong)),] )

g_compute_hmac_for_data = _rpythonic_function_(		"g_compute_hmac_for_data", ctypes.POINTER(ctypes.c_char), [
	("digest_type",		ctypes.c_int),
	("key",		ctypes.POINTER(ctypes.c_ubyte)),
	("key_len",		ctypes.c_ulong),
	("data",		ctypes.POINTER(ctypes.c_ubyte)),
	("length",		ctypes.c_ulong),] )

g_compute_hmac_for_string = _rpythonic_function_(		"g_compute_hmac_for_string", ctypes.POINTER(ctypes.c_char), [
	("digest_type",		ctypes.c_int),
	("key",		ctypes.POINTER(ctypes.c_ubyte)),
	("key_len",		ctypes.c_ulong),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_long),] )

GHookCompareFunc = _rpythonic_function_(		"GHookCompareFunc", ctypes.c_int, [
	("new_hook",		ctypes.POINTER(_GHook)),
	("sibling",		ctypes.POINTER(_GHook)),] )

GHookFindFunc = _rpythonic_function_(		"GHookFindFunc", ctypes.c_int, [
	("hook",		ctypes.POINTER(_GHook)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

GHookMarshaller = _rpythonic_function_(		"GHookMarshaller", ctypes.c_void_p, [
	("hook",		ctypes.POINTER(_GHook)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GHookCheckMarshaller = _rpythonic_function_(		"GHookCheckMarshaller", ctypes.c_int, [
	("hook",		ctypes.POINTER(_GHook)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GHookFunc = _rpythonic_function_(		"GHookFunc", ctypes.c_void_p, [("data",		ctypes.c_void_p)] )

GHookCheckFunc = _rpythonic_function_(		"GHookCheckFunc", ctypes.c_int, [("data",		ctypes.c_void_p)] )

GHookFinalizeFunc = _rpythonic_function_(		"GHookFinalizeFunc", ctypes.c_void_p, [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("hook",		ctypes.POINTER(_GHook)),] )

g_hook_list_init = _rpythonic_function_(		"g_hook_list_init", ctypes.c_void_p, [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("hook_size",		ctypes.c_uint),] )

g_hook_list_clear = _rpythonic_function_(		"g_hook_list_clear", ctypes.c_void_p, [
	("hook_list",		ctypes.POINTER(_GHookList)),] )

g_hook_alloc = _rpythonic_function_(		"g_hook_alloc", ctypes.POINTER(_GHook), [
	("hook_list",		ctypes.POINTER(_GHookList)),] )

g_hook_free = _rpythonic_function_(		"g_hook_free", ctypes.c_void_p, [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("hook",		ctypes.POINTER(_GHook)),] )

g_hook_ref = _rpythonic_function_(		"g_hook_ref", ctypes.POINTER(_GHook), [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("hook",		ctypes.POINTER(_GHook)),] )

g_hook_unref = _rpythonic_function_(		"g_hook_unref", ctypes.c_void_p, [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("hook",		ctypes.POINTER(_GHook)),] )

g_hook_destroy = _rpythonic_function_(		"g_hook_destroy", ctypes.c_int, [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("hook_id",		ctypes.c_ulong),] )

g_hook_destroy_link = _rpythonic_function_(		"g_hook_destroy_link", ctypes.c_void_p, [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("hook",		ctypes.POINTER(_GHook)),] )

g_hook_prepend = _rpythonic_function_(		"g_hook_prepend", ctypes.c_void_p, [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("hook",		ctypes.POINTER(_GHook)),] )

g_hook_insert_before = _rpythonic_function_(		"g_hook_insert_before", ctypes.c_void_p, [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("sibling",		ctypes.POINTER(_GHook)),
	("hook",		ctypes.POINTER(_GHook)),] )

g_hook_insert_sorted = _rpythonic_function_(		"g_hook_insert_sorted", ctypes.c_void_p, [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("hook",		ctypes.POINTER(_GHook)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GHook),ctypes.POINTER(_GHook),)),] )

g_hook_get = _rpythonic_function_(		"g_hook_get", ctypes.POINTER(_GHook), [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("hook_id",		ctypes.c_ulong),] )

g_hook_find = _rpythonic_function_(		"g_hook_find", ctypes.POINTER(_GHook), [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("need_valids",		ctypes.c_int),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GHook),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hook_find_data = _rpythonic_function_(		"g_hook_find_data", ctypes.POINTER(_GHook), [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("need_valids",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hook_find_func = _rpythonic_function_(		"g_hook_find_func", ctypes.POINTER(_GHook), [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("need_valids",		ctypes.c_int),
	("func",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hook_find_func_data = _rpythonic_function_(		"g_hook_find_func_data", ctypes.POINTER(_GHook), [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("need_valids",		ctypes.c_int),
	("func",		ctypes.POINTER(ctypes.c_void_p)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hook_first_valid = _rpythonic_function_(		"g_hook_first_valid", ctypes.POINTER(_GHook), [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("may_be_in_call",		ctypes.c_int),] )

g_hook_next_valid = _rpythonic_function_(		"g_hook_next_valid", ctypes.POINTER(_GHook), [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("hook",		ctypes.POINTER(_GHook)),
	("may_be_in_call",		ctypes.c_int),] )

g_hook_compare_ids = _rpythonic_function_(		"g_hook_compare_ids", ctypes.c_int, [
	("new_hook",		ctypes.POINTER(_GHook)),
	("sibling",		ctypes.POINTER(_GHook)),] )

g_hook_list_invoke = _rpythonic_function_(		"g_hook_list_invoke", ctypes.c_void_p, [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("may_recurse",		ctypes.c_int),] )

g_hook_list_invoke_check = _rpythonic_function_(		"g_hook_list_invoke_check", ctypes.c_void_p, [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("may_recurse",		ctypes.c_int),] )

g_hook_list_marshal = _rpythonic_function_(		"g_hook_list_marshal", ctypes.c_void_p, [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("may_recurse",		ctypes.c_int),
	("marshaller",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GHook),ctypes.POINTER(ctypes.c_void_p),)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hook_list_marshal_check = _rpythonic_function_(		"g_hook_list_marshal_check", ctypes.c_void_p, [
	("hook_list",		ctypes.POINTER(_GHookList)),
	("may_recurse",		ctypes.c_int),
	("marshaller",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GHook),ctypes.POINTER(ctypes.c_void_p),)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_hostname_is_non_ascii = _rpythonic_function_(		"g_hostname_is_non_ascii", ctypes.c_int, [
	("hostname",		ctypes.POINTER(ctypes.c_char)),] )

g_hostname_is_ascii_encoded = _rpythonic_function_(		"g_hostname_is_ascii_encoded", ctypes.c_int, [
	("hostname",		ctypes.POINTER(ctypes.c_char)),] )

g_hostname_is_ip_address = _rpythonic_function_(		"g_hostname_is_ip_address", ctypes.c_int, [
	("hostname",		ctypes.POINTER(ctypes.c_char)),] )

g_hostname_to_ascii = _rpythonic_function_(		"g_hostname_to_ascii", ctypes.POINTER(ctypes.c_char), [
	("hostname",		ctypes.POINTER(ctypes.c_char)),] )

g_hostname_to_unicode = _rpythonic_function_(		"g_hostname_to_unicode", ctypes.POINTER(ctypes.c_char), [
	("hostname",		ctypes.POINTER(ctypes.c_char)),] )

GPollFunc = _rpythonic_function_(		"GPollFunc", ctypes.c_int, [
	("ufds",		ctypes.POINTER(_GPollFD)),
	("nfsd",		ctypes.c_uint),
	("timeout_",		ctypes.c_int),] )

g_poll = _rpythonic_function_(		"g_poll", ctypes.c_int, [
	("fds",		ctypes.POINTER(_GPollFD)),
	("nfds",		ctypes.c_uint),
	("timeout",		ctypes.c_int),] )

g_slist_alloc = _rpythonic_function_(		"g_slist_alloc", ctypes.POINTER(_GSList), [] )

g_slist_free = _rpythonic_function_(		"g_slist_free", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GSList)),] )

g_slist_free_1 = _rpythonic_function_(		"g_slist_free_1", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GSList)),] )

g_slist_free_full = _rpythonic_function_(		"g_slist_free_full", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GSList)),
	("free_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_slist_append = _rpythonic_function_(		"g_slist_append", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_slist_prepend = _rpythonic_function_(		"g_slist_prepend", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_slist_insert = _rpythonic_function_(		"g_slist_insert", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("position",		ctypes.c_int),] )

g_slist_insert_sorted = _rpythonic_function_(		"g_slist_insert_sorted", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_slist_insert_sorted_with_data = _rpythonic_function_(		"g_slist_insert_sorted_with_data", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_slist_insert_before = _rpythonic_function_(		"g_slist_insert_before", ctypes.POINTER(_GSList), [
	("slist",		ctypes.POINTER(_GSList)),
	("sibling",		ctypes.POINTER(_GSList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_slist_concat = _rpythonic_function_(		"g_slist_concat", ctypes.POINTER(_GSList), [
	("list1",		ctypes.POINTER(_GSList)),
	("list2",		ctypes.POINTER(_GSList)),] )

g_slist_remove = _rpythonic_function_(		"g_slist_remove", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_slist_remove_all = _rpythonic_function_(		"g_slist_remove_all", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_slist_remove_link = _rpythonic_function_(		"g_slist_remove_link", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),
	("link_",		ctypes.POINTER(_GSList)),] )

g_slist_delete_link = _rpythonic_function_(		"g_slist_delete_link", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),
	("link_",		ctypes.POINTER(_GSList)),] )

g_slist_reverse = _rpythonic_function_(		"g_slist_reverse", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),] )

g_slist_copy = _rpythonic_function_(		"g_slist_copy", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),] )

g_slist_nth = _rpythonic_function_(		"g_slist_nth", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),
	("n",		ctypes.c_uint),] )

g_slist_find = _rpythonic_function_(		"g_slist_find", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_slist_find_custom = _rpythonic_function_(		"g_slist_find_custom", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_slist_position = _rpythonic_function_(		"g_slist_position", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GSList)),
	("llink",		ctypes.POINTER(_GSList)),] )

g_slist_index = _rpythonic_function_(		"g_slist_index", ctypes.c_int, [
	("C_list",		ctypes.POINTER(_GSList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_slist_last = _rpythonic_function_(		"g_slist_last", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),] )

g_slist_length = _rpythonic_function_(		"g_slist_length", ctypes.c_uint, [
	("C_list",		ctypes.POINTER(_GSList)),] )

g_slist_foreach = _rpythonic_function_(		"g_slist_foreach", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GSList)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_slist_sort = _rpythonic_function_(		"g_slist_sort", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),
	("compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_slist_sort_with_data = _rpythonic_function_(		"g_slist_sort_with_data", ctypes.POINTER(_GSList), [
	("C_list",		ctypes.POINTER(_GSList)),
	("compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_slist_nth_data = _rpythonic_function_(		"g_slist_nth_data", ctypes.POINTER(ctypes.c_void_p), [
	("C_list",		ctypes.POINTER(_GSList)),
	("n",		ctypes.c_uint),] )

GSourceFunc = _rpythonic_function_(		"GSourceFunc", ctypes.c_int, [("user_data",		ctypes.c_void_p)] )

GChildWatchFunc = _rpythonic_function_(		"GChildWatchFunc", ctypes.c_void_p, [
	("pid",		ctypes.c_int),
	("status",		ctypes.c_int),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

ref = _rpythonic_function_(		"ref", ctypes.c_void_p, [("cb_data",		ctypes.c_void_p)] )

unref = _rpythonic_function_(		"unref", ctypes.c_void_p, [("cb_data",		ctypes.c_void_p)] )

get = _rpythonic_function_(		"get", ctypes.c_void_p, [
	("cb_data",		ctypes.POINTER(ctypes.c_void_p)),
	("source",		ctypes.POINTER(_GSource)),
	("func",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.c_int, ))),
	("data",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

GSourceDummyMarshal = _rpythonic_function_(		"GSourceDummyMarshal", ctypes.c_void_p, [] )

prepare = _rpythonic_function_(		"prepare", ctypes.c_int, [
	("source",		ctypes.POINTER(_GSource)),
	("timeout_",		ctypes.POINTER(ctypes.c_int)),] )

check = _rpythonic_function_(		"check", ctypes.c_int, [
	("source",		ctypes.POINTER(_GSource)),] )

dispatch = _rpythonic_function_(		"dispatch", ctypes.c_int, [
	("source",		ctypes.POINTER(_GSource)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

finalize = _rpythonic_function_(		"finalize", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),] )

g_main_context_new = _rpythonic_function_(		"g_main_context_new", ctypes.POINTER(_GMainContext), [] )

g_main_context_ref = _rpythonic_function_(		"g_main_context_ref", ctypes.POINTER(_GMainContext), [
	("context",		ctypes.POINTER(_GMainContext)),] )

g_main_context_unref = _rpythonic_function_(		"g_main_context_unref", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMainContext)),] )

g_main_context_default = _rpythonic_function_(		"g_main_context_default", ctypes.POINTER(_GMainContext), [] )

g_main_context_iteration = _rpythonic_function_(		"g_main_context_iteration", ctypes.c_int, [
	("context",		ctypes.POINTER(_GMainContext)),
	("may_block",		ctypes.c_int),] )

g_main_context_pending = _rpythonic_function_(		"g_main_context_pending", ctypes.c_int, [
	("context",		ctypes.POINTER(_GMainContext)),] )

g_main_context_find_source_by_id = _rpythonic_function_(		"g_main_context_find_source_by_id", ctypes.POINTER(_GSource), [
	("context",		ctypes.POINTER(_GMainContext)),
	("source_id",		ctypes.c_uint),] )

g_main_context_find_source_by_user_data = _rpythonic_function_(		"g_main_context_find_source_by_user_data", ctypes.POINTER(_GSource), [
	("context",		ctypes.POINTER(_GMainContext)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_main_context_find_source_by_funcs_user_data = _rpythonic_function_(		"g_main_context_find_source_by_funcs_user_data", ctypes.POINTER(_GSource), [
	("context",		ctypes.POINTER(_GMainContext)),
	("funcs",		ctypes.POINTER(_GSourceFuncs)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_main_context_wakeup = _rpythonic_function_(		"g_main_context_wakeup", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMainContext)),] )

g_main_context_acquire = _rpythonic_function_(		"g_main_context_acquire", ctypes.c_int, [
	("context",		ctypes.POINTER(_GMainContext)),] )

g_main_context_release = _rpythonic_function_(		"g_main_context_release", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMainContext)),] )

g_main_context_is_owner = _rpythonic_function_(		"g_main_context_is_owner", ctypes.c_int, [
	("context",		ctypes.POINTER(_GMainContext)),] )

g_main_context_wait = _rpythonic_function_(		"g_main_context_wait", ctypes.c_int, [
	("context",		ctypes.POINTER(_GMainContext)),
	("cond",		ctypes.POINTER(_GCond)),
	("mutex",		ctypes.POINTER(_GMutex)),] )

g_main_context_prepare = _rpythonic_function_(		"g_main_context_prepare", ctypes.c_int, [
	("context",		ctypes.POINTER(_GMainContext)),
	("priority",		ctypes.POINTER(ctypes.c_int)),] )

g_main_context_query = _rpythonic_function_(		"g_main_context_query", ctypes.c_int, [
	("context",		ctypes.POINTER(_GMainContext)),
	("max_priority",		ctypes.c_int),
	("timeout_",		ctypes.POINTER(ctypes.c_int)),
	("fds",		ctypes.POINTER(_GPollFD)),
	("n_fds",		ctypes.c_int),] )

g_main_context_check = _rpythonic_function_(		"g_main_context_check", ctypes.c_int, [
	("context",		ctypes.POINTER(_GMainContext)),
	("max_priority",		ctypes.c_int),
	("fds",		ctypes.POINTER(_GPollFD)),
	("n_fds",		ctypes.c_int),] )

g_main_context_dispatch = _rpythonic_function_(		"g_main_context_dispatch", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMainContext)),] )

g_main_context_set_poll_func = _rpythonic_function_(		"g_main_context_set_poll_func", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMainContext)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GPollFD),ctypes.c_uint,ctypes.c_int,)),] )

g_main_context_get_poll_func = _rpythonic_function_(		"g_main_context_get_poll_func", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GPollFD),ctypes.c_uint,ctypes.c_int,), [
	("context",		ctypes.POINTER(_GMainContext)),] )

g_main_context_add_poll = _rpythonic_function_(		"g_main_context_add_poll", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMainContext)),
	("fd",		ctypes.POINTER(_GPollFD)),
	("priority",		ctypes.c_int),] )

g_main_context_remove_poll = _rpythonic_function_(		"g_main_context_remove_poll", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMainContext)),
	("fd",		ctypes.POINTER(_GPollFD)),] )

g_main_depth = _rpythonic_function_(		"g_main_depth", ctypes.c_int, [] )

g_main_current_source = _rpythonic_function_(		"g_main_current_source", ctypes.POINTER(_GSource), [] )

g_main_context_push_thread_default = _rpythonic_function_(		"g_main_context_push_thread_default", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMainContext)),] )

g_main_context_pop_thread_default = _rpythonic_function_(		"g_main_context_pop_thread_default", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMainContext)),] )

g_main_context_get_thread_default = _rpythonic_function_(		"g_main_context_get_thread_default", ctypes.POINTER(_GMainContext), [] )

g_main_context_ref_thread_default = _rpythonic_function_(		"g_main_context_ref_thread_default", ctypes.POINTER(_GMainContext), [] )

g_main_loop_new = _rpythonic_function_(		"g_main_loop_new", ctypes.POINTER(_GMainLoop), [
	("context",		ctypes.POINTER(_GMainContext)),
	("is_running",		ctypes.c_int),] )

g_main_loop_run = _rpythonic_function_(		"g_main_loop_run", ctypes.c_void_p, [
	("loop",		ctypes.POINTER(_GMainLoop)),] )

g_main_loop_quit = _rpythonic_function_(		"g_main_loop_quit", ctypes.c_void_p, [
	("loop",		ctypes.POINTER(_GMainLoop)),] )

g_main_loop_ref = _rpythonic_function_(		"g_main_loop_ref", ctypes.POINTER(_GMainLoop), [
	("loop",		ctypes.POINTER(_GMainLoop)),] )

g_main_loop_unref = _rpythonic_function_(		"g_main_loop_unref", ctypes.c_void_p, [
	("loop",		ctypes.POINTER(_GMainLoop)),] )

g_main_loop_is_running = _rpythonic_function_(		"g_main_loop_is_running", ctypes.c_int, [
	("loop",		ctypes.POINTER(_GMainLoop)),] )

g_main_loop_get_context = _rpythonic_function_(		"g_main_loop_get_context", ctypes.POINTER(_GMainContext), [
	("loop",		ctypes.POINTER(_GMainLoop)),] )

g_source_new = _rpythonic_function_(		"g_source_new", ctypes.POINTER(_GSource), [
	("source_funcs",		ctypes.POINTER(_GSourceFuncs)),
	("struct_size",		ctypes.c_uint),] )

g_source_ref = _rpythonic_function_(		"g_source_ref", ctypes.POINTER(_GSource), [
	("source",		ctypes.POINTER(_GSource)),] )

g_source_unref = _rpythonic_function_(		"g_source_unref", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),] )

g_source_attach = _rpythonic_function_(		"g_source_attach", ctypes.c_uint, [
	("source",		ctypes.POINTER(_GSource)),
	("context",		ctypes.POINTER(_GMainContext)),] )

g_source_destroy = _rpythonic_function_(		"g_source_destroy", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),] )

g_source_set_priority = _rpythonic_function_(		"g_source_set_priority", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),
	("priority",		ctypes.c_int),] )

g_source_get_priority = _rpythonic_function_(		"g_source_get_priority", ctypes.c_int, [
	("source",		ctypes.POINTER(_GSource)),] )

g_source_set_can_recurse = _rpythonic_function_(		"g_source_set_can_recurse", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),
	("can_recurse",		ctypes.c_int),] )

g_source_get_can_recurse = _rpythonic_function_(		"g_source_get_can_recurse", ctypes.c_int, [
	("source",		ctypes.POINTER(_GSource)),] )

g_source_get_id = _rpythonic_function_(		"g_source_get_id", ctypes.c_uint, [
	("source",		ctypes.POINTER(_GSource)),] )

g_source_get_context = _rpythonic_function_(		"g_source_get_context", ctypes.POINTER(_GMainContext), [
	("source",		ctypes.POINTER(_GSource)),] )

g_source_set_callback = _rpythonic_function_(		"g_source_set_callback", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_source_set_funcs = _rpythonic_function_(		"g_source_set_funcs", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),
	("funcs",		ctypes.POINTER(_GSourceFuncs)),] )

g_source_is_destroyed = _rpythonic_function_(		"g_source_is_destroyed", ctypes.c_int, [
	("source",		ctypes.POINTER(_GSource)),] )

g_source_set_name = _rpythonic_function_(		"g_source_set_name", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_source_get_name = _rpythonic_function_(		"g_source_get_name", ctypes.POINTER(ctypes.c_char), [
	("source",		ctypes.POINTER(_GSource)),] )

g_source_set_name_by_id = _rpythonic_function_(		"g_source_set_name_by_id", ctypes.c_void_p, [
	("tag",		ctypes.c_uint),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_source_set_callback_indirect = _rpythonic_function_(		"g_source_set_callback_indirect", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),
	("callback_funcs",		ctypes.POINTER(_GSourceCallbackFuncs)),] )

g_source_add_poll = _rpythonic_function_(		"g_source_add_poll", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),
	("fd",		ctypes.POINTER(_GPollFD)),] )

g_source_remove_poll = _rpythonic_function_(		"g_source_remove_poll", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),
	("fd",		ctypes.POINTER(_GPollFD)),] )

g_source_add_child_source = _rpythonic_function_(		"g_source_add_child_source", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),
	("child_source",		ctypes.POINTER(_GSource)),] )

g_source_remove_child_source = _rpythonic_function_(		"g_source_remove_child_source", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),
	("child_source",		ctypes.POINTER(_GSource)),] )

g_source_get_current_time = _rpythonic_function_(		"g_source_get_current_time", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),
	("timeval",		ctypes.POINTER(_GTimeVal)),] )

g_source_get_time = _rpythonic_function_(		"g_source_get_time", ctypes.c_long, [
	("source",		ctypes.POINTER(_GSource)),] )

g_idle_source_new = _rpythonic_function_(		"g_idle_source_new", ctypes.POINTER(_GSource), [] )

g_child_watch_source_new = _rpythonic_function_(		"g_child_watch_source_new", ctypes.POINTER(_GSource), [
	("pid",		ctypes.c_int),] )

g_timeout_source_new = _rpythonic_function_(		"g_timeout_source_new", ctypes.POINTER(_GSource), [
	("interval",		ctypes.c_uint),] )

g_timeout_source_new_seconds = _rpythonic_function_(		"g_timeout_source_new_seconds", ctypes.POINTER(_GSource), [
	("interval",		ctypes.c_uint),] )

g_get_current_time = _rpythonic_function_(		"g_get_current_time", ctypes.c_void_p, [
	("result",		ctypes.POINTER(_GTimeVal)),] )

g_get_monotonic_time = _rpythonic_function_(		"g_get_monotonic_time", ctypes.c_long, [] )

g_get_real_time = _rpythonic_function_(		"g_get_real_time", ctypes.c_long, [] )

g_source_remove = _rpythonic_function_(		"g_source_remove", ctypes.c_int, [
	("tag",		ctypes.c_uint),] )

g_source_remove_by_user_data = _rpythonic_function_(		"g_source_remove_by_user_data", ctypes.c_int, [("user_data",		ctypes.c_void_p)] )

g_source_remove_by_funcs_user_data = _rpythonic_function_(		"g_source_remove_by_funcs_user_data", ctypes.c_int, [
	("funcs",		ctypes.POINTER(_GSourceFuncs)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_timeout_add_full = _rpythonic_function_(		"g_timeout_add_full", ctypes.c_uint, [
	("priority",		ctypes.c_int),
	("interval",		ctypes.c_uint),
	("function",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_timeout_add = _rpythonic_function_(		"g_timeout_add", ctypes.c_uint, [
	("interval",		ctypes.c_uint),
	("function",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_timeout_add_seconds_full = _rpythonic_function_(		"g_timeout_add_seconds_full", ctypes.c_uint, [
	("priority",		ctypes.c_int),
	("interval",		ctypes.c_uint),
	("function",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_timeout_add_seconds = _rpythonic_function_(		"g_timeout_add_seconds", ctypes.c_uint, [
	("interval",		ctypes.c_uint),
	("function",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_child_watch_add_full = _rpythonic_function_(		"g_child_watch_add_full", ctypes.c_uint, [
	("priority",		ctypes.c_int),
	("pid",		ctypes.c_int),
	("function",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_child_watch_add = _rpythonic_function_(		"g_child_watch_add", ctypes.c_uint, [
	("pid",		ctypes.c_int),
	("function",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_idle_add = _rpythonic_function_(		"g_idle_add", ctypes.c_uint, [
	("function",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_idle_add_full = _rpythonic_function_(		"g_idle_add_full", ctypes.c_uint, [
	("priority",		ctypes.c_int),
	("function",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_idle_remove_by_data = _rpythonic_function_(		"g_idle_remove_by_data", ctypes.c_int, [("data",		ctypes.c_void_p)] )

g_main_context_invoke_full = _rpythonic_function_(		"g_main_context_invoke_full", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMainContext)),
	("priority",		ctypes.c_int),
	("function",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_main_context_invoke = _rpythonic_function_(		"g_main_context_invoke", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMainContext)),
	("function",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_unicode_script_to_iso15924 = _rpythonic_function_(		"g_unicode_script_to_iso15924", ctypes.c_uint, [
	("script",		ctypes.c_int),] )

g_unicode_script_from_iso15924 = _rpythonic_function_(		"g_unicode_script_from_iso15924", ctypes.c_int, [
	("iso15924",		ctypes.c_uint),] )

g_unichar_isalnum = _rpythonic_function_(		"g_unichar_isalnum", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_isalpha = _rpythonic_function_(		"g_unichar_isalpha", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_iscntrl = _rpythonic_function_(		"g_unichar_iscntrl", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_isdigit = _rpythonic_function_(		"g_unichar_isdigit", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_isgraph = _rpythonic_function_(		"g_unichar_isgraph", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_islower = _rpythonic_function_(		"g_unichar_islower", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_isprint = _rpythonic_function_(		"g_unichar_isprint", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_ispunct = _rpythonic_function_(		"g_unichar_ispunct", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_isspace = _rpythonic_function_(		"g_unichar_isspace", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_isupper = _rpythonic_function_(		"g_unichar_isupper", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_isxdigit = _rpythonic_function_(		"g_unichar_isxdigit", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_istitle = _rpythonic_function_(		"g_unichar_istitle", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_isdefined = _rpythonic_function_(		"g_unichar_isdefined", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_iswide = _rpythonic_function_(		"g_unichar_iswide", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_iswide_cjk = _rpythonic_function_(		"g_unichar_iswide_cjk", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_iszerowidth = _rpythonic_function_(		"g_unichar_iszerowidth", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_ismark = _rpythonic_function_(		"g_unichar_ismark", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_toupper = _rpythonic_function_(		"g_unichar_toupper", ctypes.c_uint, [
	("c",		ctypes.c_uint),] )

g_unichar_tolower = _rpythonic_function_(		"g_unichar_tolower", ctypes.c_uint, [
	("c",		ctypes.c_uint),] )

g_unichar_totitle = _rpythonic_function_(		"g_unichar_totitle", ctypes.c_uint, [
	("c",		ctypes.c_uint),] )

g_unichar_digit_value = _rpythonic_function_(		"g_unichar_digit_value", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_xdigit_value = _rpythonic_function_(		"g_unichar_xdigit_value", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_type = _rpythonic_function_(		"g_unichar_type", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_break_type = _rpythonic_function_(		"g_unichar_break_type", ctypes.c_int, [
	("c",		ctypes.c_uint),] )

g_unichar_combining_class = _rpythonic_function_(		"g_unichar_combining_class", ctypes.c_int, [
	("uc",		ctypes.c_uint),] )

g_unichar_get_mirror_char = _rpythonic_function_(		"g_unichar_get_mirror_char", ctypes.c_int, [
	("ch",		ctypes.c_uint),
	("mirrored_ch",		ctypes.POINTER(ctypes.c_uint)),] )

g_unichar_get_script = _rpythonic_function_(		"g_unichar_get_script", ctypes.c_int, [
	("ch",		ctypes.c_uint),] )

g_unichar_validate = _rpythonic_function_(		"g_unichar_validate", ctypes.c_int, [
	("ch",		ctypes.c_uint),] )

g_unichar_compose = _rpythonic_function_(		"g_unichar_compose", ctypes.c_int, [
	("a",		ctypes.c_uint),
	("b",		ctypes.c_uint),
	("ch",		ctypes.POINTER(ctypes.c_uint)),] )

g_unichar_decompose = _rpythonic_function_(		"g_unichar_decompose", ctypes.c_int, [
	("ch",		ctypes.c_uint),
	("a",		ctypes.POINTER(ctypes.c_uint)),
	("b",		ctypes.POINTER(ctypes.c_uint)),] )

g_unichar_fully_decompose = _rpythonic_function_(		"g_unichar_fully_decompose", ctypes.c_ulong, [
	("ch",		ctypes.c_uint),
	("compat",		ctypes.c_int),
	("result",		ctypes.POINTER(ctypes.c_uint)),
	("result_len",		ctypes.c_ulong),] )

g_unicode_canonical_ordering = _rpythonic_function_(		"g_unicode_canonical_ordering", ctypes.c_void_p, [
	("string",		ctypes.POINTER(ctypes.c_uint)),
	("C_len",		ctypes.c_ulong),] )

g_unicode_canonical_decomposition = _rpythonic_function_(		"g_unicode_canonical_decomposition", ctypes.POINTER(ctypes.c_uint), [
	("ch",		ctypes.c_uint),
	("result_len",		ctypes.POINTER(ctypes.c_ulong)),] )

g_utf8_get_char = _rpythonic_function_(		"g_utf8_get_char", ctypes.c_uint, [
	("p",		ctypes.POINTER(ctypes.c_char)),] )

g_utf8_get_char_validated = _rpythonic_function_(		"g_utf8_get_char_validated", ctypes.c_uint, [
	("p",		ctypes.POINTER(ctypes.c_char)),
	("max_len",		ctypes.c_long),] )

g_utf8_offset_to_pointer = _rpythonic_function_(		"g_utf8_offset_to_pointer", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("offset",		ctypes.c_long),] )

g_utf8_pointer_to_offset = _rpythonic_function_(		"g_utf8_pointer_to_offset", ctypes.c_long, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("pos",		ctypes.POINTER(ctypes.c_char)),] )

g_utf8_prev_char = _rpythonic_function_(		"g_utf8_prev_char", ctypes.POINTER(ctypes.c_char), [
	("p",		ctypes.POINTER(ctypes.c_char)),] )

g_utf8_find_next_char = _rpythonic_function_(		"g_utf8_find_next_char", ctypes.POINTER(ctypes.c_char), [
	("p",		ctypes.POINTER(ctypes.c_char)),
	("end",		ctypes.POINTER(ctypes.c_char)),] )

g_utf8_find_prev_char = _rpythonic_function_(		"g_utf8_find_prev_char", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("p",		ctypes.POINTER(ctypes.c_char)),] )

g_utf8_strlen = _rpythonic_function_(		"g_utf8_strlen", ctypes.c_long, [
	("p",		ctypes.POINTER(ctypes.c_char)),
	("max",		ctypes.c_long),] )

g_utf8_substring = _rpythonic_function_(		"g_utf8_substring", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("start_pos",		ctypes.c_long),
	("end_pos",		ctypes.c_long),] )

g_utf8_strncpy = _rpythonic_function_(		"g_utf8_strncpy", ctypes.POINTER(ctypes.c_char), [
	("dest",		ctypes.POINTER(ctypes.c_char)),
	("src",		ctypes.POINTER(ctypes.c_char)),
	("n",		ctypes.c_ulong),] )

g_utf8_strchr = _rpythonic_function_(		"g_utf8_strchr", ctypes.POINTER(ctypes.c_char), [
	("p",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),
	("c",		ctypes.c_uint),] )

g_utf8_strrchr = _rpythonic_function_(		"g_utf8_strrchr", ctypes.POINTER(ctypes.c_char), [
	("p",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),
	("c",		ctypes.c_uint),] )

g_utf8_strreverse = _rpythonic_function_(		"g_utf8_strreverse", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),] )

g_utf8_to_utf16 = _rpythonic_function_(		"g_utf8_to_utf16", ctypes.POINTER(ctypes.c_ushort), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),
	("items_read",		ctypes.POINTER(ctypes.c_long)),
	("items_written",		ctypes.POINTER(ctypes.c_long)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_utf8_to_ucs4 = _rpythonic_function_(		"g_utf8_to_ucs4", ctypes.POINTER(ctypes.c_uint), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),
	("items_read",		ctypes.POINTER(ctypes.c_long)),
	("items_written",		ctypes.POINTER(ctypes.c_long)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_utf8_to_ucs4_fast = _rpythonic_function_(		"g_utf8_to_ucs4_fast", ctypes.POINTER(ctypes.c_uint), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),
	("items_written",		ctypes.POINTER(ctypes.c_long)),] )

g_utf16_to_ucs4 = _rpythonic_function_(		"g_utf16_to_ucs4", ctypes.POINTER(ctypes.c_uint), [
	("C_str",		ctypes.POINTER(ctypes.c_ushort)),
	("C_len",		ctypes.c_long),
	("items_read",		ctypes.POINTER(ctypes.c_long)),
	("items_written",		ctypes.POINTER(ctypes.c_long)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_utf16_to_utf8 = _rpythonic_function_(		"g_utf16_to_utf8", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_ushort)),
	("C_len",		ctypes.c_long),
	("items_read",		ctypes.POINTER(ctypes.c_long)),
	("items_written",		ctypes.POINTER(ctypes.c_long)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_ucs4_to_utf16 = _rpythonic_function_(		"g_ucs4_to_utf16", ctypes.POINTER(ctypes.c_ushort), [
	("C_str",		ctypes.POINTER(ctypes.c_uint)),
	("C_len",		ctypes.c_long),
	("items_read",		ctypes.POINTER(ctypes.c_long)),
	("items_written",		ctypes.POINTER(ctypes.c_long)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_ucs4_to_utf8 = _rpythonic_function_(		"g_ucs4_to_utf8", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_uint)),
	("C_len",		ctypes.c_long),
	("items_read",		ctypes.POINTER(ctypes.c_long)),
	("items_written",		ctypes.POINTER(ctypes.c_long)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_unichar_to_utf8 = _rpythonic_function_(		"g_unichar_to_utf8", ctypes.c_int, [
	("c",		ctypes.c_uint),
	("outbuf",		ctypes.POINTER(ctypes.c_char)),] )

g_utf8_validate = _rpythonic_function_(		"g_utf8_validate", ctypes.c_int, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("max_len",		ctypes.c_long),
	("end",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_utf8_strup = _rpythonic_function_(		"g_utf8_strup", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),] )

g_utf8_strdown = _rpythonic_function_(		"g_utf8_strdown", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),] )

g_utf8_casefold = _rpythonic_function_(		"g_utf8_casefold", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),] )

g_utf8_normalize = _rpythonic_function_(		"g_utf8_normalize", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),
	("mode",		ctypes.c_int),] )

g_utf8_collate = _rpythonic_function_(		"g_utf8_collate", ctypes.c_int, [
	("str1",		ctypes.POINTER(ctypes.c_char)),
	("str2",		ctypes.POINTER(ctypes.c_char)),] )

g_utf8_collate_key = _rpythonic_function_(		"g_utf8_collate_key", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),] )

g_utf8_collate_key_for_filename = _rpythonic_function_(		"g_utf8_collate_key_for_filename", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),] )

_g_utf8_make_valid = _rpythonic_function_(		"_g_utf8_make_valid", ctypes.POINTER(ctypes.c_char), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_get_user_name = _rpythonic_function_(		"g_get_user_name", ctypes.POINTER(ctypes.c_char), [] )

g_get_real_name = _rpythonic_function_(		"g_get_real_name", ctypes.POINTER(ctypes.c_char), [] )

g_get_home_dir = _rpythonic_function_(		"g_get_home_dir", ctypes.POINTER(ctypes.c_char), [] )

g_get_tmp_dir = _rpythonic_function_(		"g_get_tmp_dir", ctypes.POINTER(ctypes.c_char), [] )

g_get_host_name = _rpythonic_function_(		"g_get_host_name", ctypes.POINTER(ctypes.c_char), [] )

g_get_prgname = _rpythonic_function_(		"g_get_prgname", ctypes.POINTER(ctypes.c_char), [] )

g_set_prgname = _rpythonic_function_(		"g_set_prgname", ctypes.c_void_p, [
	("prgname",		ctypes.POINTER(ctypes.c_char)),] )

g_get_application_name = _rpythonic_function_(		"g_get_application_name", ctypes.POINTER(ctypes.c_char), [] )

g_set_application_name = _rpythonic_function_(		"g_set_application_name", ctypes.c_void_p, [
	("application_name",		ctypes.POINTER(ctypes.c_char)),] )

g_reload_user_special_dirs_cache = _rpythonic_function_(		"g_reload_user_special_dirs_cache", ctypes.c_void_p, [] )

g_get_user_data_dir = _rpythonic_function_(		"g_get_user_data_dir", ctypes.POINTER(ctypes.c_char), [] )

g_get_user_config_dir = _rpythonic_function_(		"g_get_user_config_dir", ctypes.POINTER(ctypes.c_char), [] )

g_get_user_cache_dir = _rpythonic_function_(		"g_get_user_cache_dir", ctypes.POINTER(ctypes.c_char), [] )

g_get_system_data_dirs = _rpythonic_function_(		"g_get_system_data_dirs", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [] )

g_get_system_config_dirs = _rpythonic_function_(		"g_get_system_config_dirs", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [] )

g_get_user_runtime_dir = _rpythonic_function_(		"g_get_user_runtime_dir", ctypes.POINTER(ctypes.c_char), [] )

g_get_user_special_dir = _rpythonic_function_(		"g_get_user_special_dir", ctypes.POINTER(ctypes.c_char), [
	("directory",		ctypes.c_int),] )

g_parse_debug_string = _rpythonic_function_(		"g_parse_debug_string", ctypes.c_uint, [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("keys",		ctypes.POINTER(_GDebugKey)),
	("nkeys",		ctypes.c_uint),] )

g_vsnprintf = _rpythonic_function_(		"g_vsnprintf", ctypes.c_int, [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("n",		ctypes.c_ulong),
	("format",		ctypes.POINTER(ctypes.c_char)),
	("args",		ctypes.c_char),] )

g_nullify_pointer = _rpythonic_function_(		"g_nullify_pointer", ctypes.c_void_p, [("nullify_location",		ctypes.c_void_p)] )

g_format_size_full = _rpythonic_function_(		"g_format_size_full", ctypes.POINTER(ctypes.c_char), [
	("size",		ctypes.c_ulong),
	("flags",		ctypes.c_int),] )

g_format_size = _rpythonic_function_(		"g_format_size", ctypes.POINTER(ctypes.c_char), [
	("size",		ctypes.c_ulong),] )

g_format_size_for_display = _rpythonic_function_(		"g_format_size_for_display", ctypes.POINTER(ctypes.c_char), [
	("size",		ctypes.c_long),] )

GVoidFunc = _rpythonic_function_(		"GVoidFunc", ctypes.c_void_p, [] )

g_atexit = _rpythonic_function_(		"g_atexit", ctypes.c_void_p, [
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_find_program_in_path = _rpythonic_function_(		"g_find_program_in_path", ctypes.POINTER(ctypes.c_char), [
	("program",		ctypes.POINTER(ctypes.c_char)),] )

g_bit_nth_lsf = _rpythonic_function_(		"g_bit_nth_lsf", ctypes.c_int, [
	("mask",		ctypes.c_ulong),
	("nth_bit",		ctypes.c_int),] )

g_bit_nth_msf = _rpythonic_function_(		"g_bit_nth_msf", ctypes.c_int, [
	("mask",		ctypes.c_ulong),
	("nth_bit",		ctypes.c_int),] )

g_bit_storage = _rpythonic_function_(		"g_bit_storage", ctypes.c_uint, [
	("number",		ctypes.c_ulong),] )

g_string_new = _rpythonic_function_(		"g_string_new", ctypes.POINTER(_GString), [
	("init",		ctypes.POINTER(ctypes.c_char)),] )

g_string_new_len = _rpythonic_function_(		"g_string_new_len", ctypes.POINTER(_GString), [
	("init",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),] )

g_string_sized_new = _rpythonic_function_(		"g_string_sized_new", ctypes.POINTER(_GString), [
	("dfl_size",		ctypes.c_ulong),] )

g_string_free = _rpythonic_function_(		"g_string_free", ctypes.POINTER(ctypes.c_char), [
	("string",		ctypes.POINTER(_GString)),
	("free_segment",		ctypes.c_int),] )

g_string_equal = _rpythonic_function_(		"g_string_equal", ctypes.c_int, [
	("v",		ctypes.POINTER(_GString)),
	("v2",		ctypes.POINTER(_GString)),] )

g_string_hash = _rpythonic_function_(		"g_string_hash", ctypes.c_uint, [
	("C_str",		ctypes.POINTER(_GString)),] )

g_string_assign = _rpythonic_function_(		"g_string_assign", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("rval",		ctypes.POINTER(ctypes.c_char)),] )

g_string_truncate = _rpythonic_function_(		"g_string_truncate", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("C_len",		ctypes.c_ulong),] )

g_string_set_size = _rpythonic_function_(		"g_string_set_size", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("C_len",		ctypes.c_ulong),] )

g_string_insert_len = _rpythonic_function_(		"g_string_insert_len", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("pos",		ctypes.c_long),
	("val",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),] )

g_string_append = _rpythonic_function_(		"g_string_append", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("val",		ctypes.POINTER(ctypes.c_char)),] )

g_string_append_len = _rpythonic_function_(		"g_string_append_len", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("val",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),] )

g_string_append_c = _rpythonic_function_(		"g_string_append_c", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("c",		ctypes.c_char),] )

g_string_append_unichar = _rpythonic_function_(		"g_string_append_unichar", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("wc",		ctypes.c_uint),] )

g_string_prepend = _rpythonic_function_(		"g_string_prepend", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("val",		ctypes.POINTER(ctypes.c_char)),] )

g_string_prepend_c = _rpythonic_function_(		"g_string_prepend_c", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("c",		ctypes.c_char),] )

g_string_prepend_unichar = _rpythonic_function_(		"g_string_prepend_unichar", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("wc",		ctypes.c_uint),] )

g_string_prepend_len = _rpythonic_function_(		"g_string_prepend_len", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("val",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),] )

g_string_insert = _rpythonic_function_(		"g_string_insert", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("pos",		ctypes.c_long),
	("val",		ctypes.POINTER(ctypes.c_char)),] )

g_string_insert_c = _rpythonic_function_(		"g_string_insert_c", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("pos",		ctypes.c_long),
	("c",		ctypes.c_char),] )

g_string_insert_unichar = _rpythonic_function_(		"g_string_insert_unichar", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("pos",		ctypes.c_long),
	("wc",		ctypes.c_uint),] )

g_string_overwrite = _rpythonic_function_(		"g_string_overwrite", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("pos",		ctypes.c_ulong),
	("val",		ctypes.POINTER(ctypes.c_char)),] )

g_string_overwrite_len = _rpythonic_function_(		"g_string_overwrite_len", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("pos",		ctypes.c_ulong),
	("val",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),] )

g_string_erase = _rpythonic_function_(		"g_string_erase", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("pos",		ctypes.c_long),
	("C_len",		ctypes.c_long),] )

g_string_ascii_down = _rpythonic_function_(		"g_string_ascii_down", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),] )

g_string_ascii_up = _rpythonic_function_(		"g_string_ascii_up", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),] )

g_string_vprintf = _rpythonic_function_(		"g_string_vprintf", ctypes.c_void_p, [
	("string",		ctypes.POINTER(_GString)),
	("format",		ctypes.POINTER(ctypes.c_char)),
	("args",		ctypes.c_char),] )

g_string_append_vprintf = _rpythonic_function_(		"g_string_append_vprintf", ctypes.c_void_p, [
	("string",		ctypes.POINTER(_GString)),
	("format",		ctypes.POINTER(ctypes.c_char)),
	("args",		ctypes.c_char),] )

g_string_append_uri_escaped = _rpythonic_function_(		"g_string_append_uri_escaped", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),
	("unescaped",		ctypes.POINTER(ctypes.c_char)),
	("reserved_chars_allowed",		ctypes.POINTER(ctypes.c_char)),
	("allow_utf8",		ctypes.c_int),] )

g_string_down = _rpythonic_function_(		"g_string_down", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),] )

g_string_up = _rpythonic_function_(		"g_string_up", ctypes.POINTER(_GString), [
	("string",		ctypes.POINTER(_GString)),] )

GIOFunc = _rpythonic_function_(		"GIOFunc", ctypes.c_int, [
	("source",		ctypes.POINTER(_GIOChannel)),
	("condition",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

io_read = _rpythonic_function_(		"io_read", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("buf",		ctypes.POINTER(ctypes.c_char)),
	("count",		ctypes.c_ulong),
	("bytes_read",		ctypes.POINTER(ctypes.c_ulong)),
	("err",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

io_write = _rpythonic_function_(		"io_write", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("buf",		ctypes.POINTER(ctypes.c_char)),
	("count",		ctypes.c_ulong),
	("bytes_written",		ctypes.POINTER(ctypes.c_ulong)),
	("err",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

io_seek = _rpythonic_function_(		"io_seek", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("offset",		ctypes.c_long),
	("C_type",		ctypes.c_int),
	("err",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

io_close = _rpythonic_function_(		"io_close", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("err",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

io_create_watch = _rpythonic_function_(		"io_create_watch", ctypes.POINTER(_GSource), [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("condition",		ctypes.c_int),] )

io_free = _rpythonic_function_(		"io_free", ctypes.c_void_p, [
	("channel",		ctypes.POINTER(_GIOChannel)),] )

io_set_flags = _rpythonic_function_(		"io_set_flags", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("flags",		ctypes.c_int),
	("err",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

io_get_flags = _rpythonic_function_(		"io_get_flags", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),] )

g_io_channel_init = _rpythonic_function_(		"g_io_channel_init", ctypes.c_void_p, [
	("channel",		ctypes.POINTER(_GIOChannel)),] )

g_io_channel_ref = _rpythonic_function_(		"g_io_channel_ref", ctypes.POINTER(_GIOChannel), [
	("channel",		ctypes.POINTER(_GIOChannel)),] )

g_io_channel_unref = _rpythonic_function_(		"g_io_channel_unref", ctypes.c_void_p, [
	("channel",		ctypes.POINTER(_GIOChannel)),] )

g_io_channel_read = _rpythonic_function_(		"g_io_channel_read", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("buf",		ctypes.POINTER(ctypes.c_char)),
	("count",		ctypes.c_ulong),
	("bytes_read",		ctypes.POINTER(ctypes.c_ulong)),] )

g_io_channel_write = _rpythonic_function_(		"g_io_channel_write", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("buf",		ctypes.POINTER(ctypes.c_char)),
	("count",		ctypes.c_ulong),
	("bytes_written",		ctypes.POINTER(ctypes.c_ulong)),] )

g_io_channel_seek = _rpythonic_function_(		"g_io_channel_seek", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("offset",		ctypes.c_long),
	("C_type",		ctypes.c_int),] )

g_io_channel_close = _rpythonic_function_(		"g_io_channel_close", ctypes.c_void_p, [
	("channel",		ctypes.POINTER(_GIOChannel)),] )

g_io_channel_shutdown = _rpythonic_function_(		"g_io_channel_shutdown", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("flush",		ctypes.c_int),
	("err",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_add_watch_full = _rpythonic_function_(		"g_io_add_watch_full", ctypes.c_uint, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("priority",		ctypes.c_int),
	("condition",		ctypes.c_int),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GIOChannel),ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_io_create_watch = _rpythonic_function_(		"g_io_create_watch", ctypes.POINTER(_GSource), [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("condition",		ctypes.c_int),] )

g_io_add_watch = _rpythonic_function_(		"g_io_add_watch", ctypes.c_uint, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("condition",		ctypes.c_int),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GIOChannel),ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_io_channel_set_buffer_size = _rpythonic_function_(		"g_io_channel_set_buffer_size", ctypes.c_void_p, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("size",		ctypes.c_ulong),] )

g_io_channel_get_buffer_size = _rpythonic_function_(		"g_io_channel_get_buffer_size", ctypes.c_ulong, [
	("channel",		ctypes.POINTER(_GIOChannel)),] )

g_io_channel_get_buffer_condition = _rpythonic_function_(		"g_io_channel_get_buffer_condition", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),] )

g_io_channel_set_flags = _rpythonic_function_(		"g_io_channel_set_flags", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("flags",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_channel_get_flags = _rpythonic_function_(		"g_io_channel_get_flags", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),] )

g_io_channel_set_line_term = _rpythonic_function_(		"g_io_channel_set_line_term", ctypes.c_void_p, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("line_term",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),] )

g_io_channel_get_line_term = _rpythonic_function_(		"g_io_channel_get_line_term", ctypes.POINTER(ctypes.c_char), [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("length",		ctypes.POINTER(ctypes.c_int)),] )

g_io_channel_set_buffered = _rpythonic_function_(		"g_io_channel_set_buffered", ctypes.c_void_p, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("buffered",		ctypes.c_int),] )

g_io_channel_get_buffered = _rpythonic_function_(		"g_io_channel_get_buffered", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),] )

g_io_channel_set_encoding = _rpythonic_function_(		"g_io_channel_set_encoding", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("encoding",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_channel_get_encoding = _rpythonic_function_(		"g_io_channel_get_encoding", ctypes.POINTER(ctypes.c_char), [
	("channel",		ctypes.POINTER(_GIOChannel)),] )

g_io_channel_set_close_on_unref = _rpythonic_function_(		"g_io_channel_set_close_on_unref", ctypes.c_void_p, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("do_close",		ctypes.c_int),] )

g_io_channel_get_close_on_unref = _rpythonic_function_(		"g_io_channel_get_close_on_unref", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),] )

g_io_channel_flush = _rpythonic_function_(		"g_io_channel_flush", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_channel_read_line = _rpythonic_function_(		"g_io_channel_read_line", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("str_return",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("length",		ctypes.POINTER(ctypes.c_ulong)),
	("terminator_pos",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_channel_read_line_string = _rpythonic_function_(		"g_io_channel_read_line_string", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("buffer",		ctypes.POINTER(_GString)),
	("terminator_pos",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_channel_read_to_end = _rpythonic_function_(		"g_io_channel_read_to_end", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("str_return",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("length",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_channel_read_chars = _rpythonic_function_(		"g_io_channel_read_chars", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("buf",		ctypes.POINTER(ctypes.c_char)),
	("count",		ctypes.c_ulong),
	("bytes_read",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_channel_read_unichar = _rpythonic_function_(		"g_io_channel_read_unichar", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("thechar",		ctypes.POINTER(ctypes.c_uint)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_channel_write_chars = _rpythonic_function_(		"g_io_channel_write_chars", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("buf",		ctypes.POINTER(ctypes.c_char)),
	("count",		ctypes.c_long),
	("bytes_written",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_channel_write_unichar = _rpythonic_function_(		"g_io_channel_write_unichar", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("thechar",		ctypes.c_uint),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_channel_seek_position = _rpythonic_function_(		"g_io_channel_seek_position", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),
	("offset",		ctypes.c_long),
	("C_type",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_channel_new_file = _rpythonic_function_(		"g_io_channel_new_file", ctypes.POINTER(_GIOChannel), [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("mode",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_channel_error_quark = _rpythonic_function_(		"g_io_channel_error_quark", ctypes.c_uint, [] )

g_io_channel_error_from_errno = _rpythonic_function_(		"g_io_channel_error_from_errno", ctypes.c_int, [
	("en",		ctypes.c_int),] )

g_io_channel_unix_new = _rpythonic_function_(		"g_io_channel_unix_new", ctypes.POINTER(_GIOChannel), [
	("fd",		ctypes.c_int),] )

g_io_channel_unix_get_fd = _rpythonic_function_(		"g_io_channel_unix_get_fd", ctypes.c_int, [
	("channel",		ctypes.POINTER(_GIOChannel)),] )

g_key_file_error_quark = _rpythonic_function_(		"g_key_file_error_quark", ctypes.c_uint, [] )

g_key_file_new = _rpythonic_function_(		"g_key_file_new", ctypes.POINTER(_GKeyFile), [] )

g_key_file_ref = _rpythonic_function_(		"g_key_file_ref", ctypes.POINTER(_GKeyFile), [
	("key_file",		ctypes.POINTER(_GKeyFile)),] )

g_key_file_unref = _rpythonic_function_(		"g_key_file_unref", ctypes.c_void_p, [
	("key_file",		ctypes.POINTER(_GKeyFile)),] )

g_key_file_free = _rpythonic_function_(		"g_key_file_free", ctypes.c_void_p, [
	("key_file",		ctypes.POINTER(_GKeyFile)),] )

g_key_file_set_list_separator = _rpythonic_function_(		"g_key_file_set_list_separator", ctypes.c_void_p, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("separator",		ctypes.c_char),] )

g_key_file_load_from_file = _rpythonic_function_(		"g_key_file_load_from_file", ctypes.c_int, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_load_from_data = _rpythonic_function_(		"g_key_file_load_from_data", ctypes.c_int, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("data",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_ulong),
	("flags",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_load_from_dirs = _rpythonic_function_(		"g_key_file_load_from_dirs", ctypes.c_int, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("search_dirs",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("full_path",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("flags",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_load_from_data_dirs = _rpythonic_function_(		"g_key_file_load_from_data_dirs", ctypes.c_int, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("full_path",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("flags",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_to_data = _rpythonic_function_(		"g_key_file_to_data", ctypes.POINTER(ctypes.c_char), [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_get_start_group = _rpythonic_function_(		"g_key_file_get_start_group", ctypes.POINTER(ctypes.c_char), [
	("key_file",		ctypes.POINTER(_GKeyFile)),] )

g_key_file_get_groups = _rpythonic_function_(		"g_key_file_get_groups", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),] )

g_key_file_get_keys = _rpythonic_function_(		"g_key_file_get_keys", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_has_group = _rpythonic_function_(		"g_key_file_has_group", ctypes.c_int, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),] )

g_key_file_has_key = _rpythonic_function_(		"g_key_file_has_key", ctypes.c_int, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_get_value = _rpythonic_function_(		"g_key_file_get_value", ctypes.POINTER(ctypes.c_char), [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_set_value = _rpythonic_function_(		"g_key_file_set_value", ctypes.c_void_p, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

g_key_file_get_string = _rpythonic_function_(		"g_key_file_get_string", ctypes.POINTER(ctypes.c_char), [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_set_string = _rpythonic_function_(		"g_key_file_set_string", ctypes.c_void_p, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_key_file_get_locale_string = _rpythonic_function_(		"g_key_file_get_locale_string", ctypes.POINTER(ctypes.c_char), [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("locale",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_set_locale_string = _rpythonic_function_(		"g_key_file_set_locale_string", ctypes.c_void_p, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("locale",		ctypes.POINTER(ctypes.c_char)),
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_key_file_get_boolean = _rpythonic_function_(		"g_key_file_get_boolean", ctypes.c_int, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_set_boolean = _rpythonic_function_(		"g_key_file_set_boolean", ctypes.c_void_p, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_int),] )

g_key_file_get_integer = _rpythonic_function_(		"g_key_file_get_integer", ctypes.c_int, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_set_integer = _rpythonic_function_(		"g_key_file_set_integer", ctypes.c_void_p, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_int),] )

g_key_file_get_int64 = _rpythonic_function_(		"g_key_file_get_int64", ctypes.c_long, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_set_int64 = _rpythonic_function_(		"g_key_file_set_int64", ctypes.c_void_p, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_long),] )

g_key_file_get_uint64 = _rpythonic_function_(		"g_key_file_get_uint64", ctypes.c_ulong, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_set_uint64 = _rpythonic_function_(		"g_key_file_set_uint64", ctypes.c_void_p, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_ulong),] )

g_key_file_get_double = _rpythonic_function_(		"g_key_file_get_double", ctypes.c_double, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_set_double = _rpythonic_function_(		"g_key_file_set_double", ctypes.c_void_p, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_double),] )

g_key_file_get_string_list = _rpythonic_function_(		"g_key_file_get_string_list", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_set_string_list = _rpythonic_function_(		"g_key_file_set_string_list", ctypes.c_void_p, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("C_list",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_ulong),] )

g_key_file_get_locale_string_list = _rpythonic_function_(		"g_key_file_get_locale_string_list", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("locale",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_set_locale_string_list = _rpythonic_function_(		"g_key_file_set_locale_string_list", ctypes.c_void_p, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("locale",		ctypes.POINTER(ctypes.c_char)),
	("C_list",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_ulong),] )

g_key_file_get_boolean_list = _rpythonic_function_(		"g_key_file_get_boolean_list", ctypes.POINTER(ctypes.c_int), [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_set_boolean_list = _rpythonic_function_(		"g_key_file_set_boolean_list", ctypes.c_void_p, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("C_list",		ctypes.c_int),
	("length",		ctypes.c_ulong),] )

g_key_file_get_integer_list = _rpythonic_function_(		"g_key_file_get_integer_list", ctypes.POINTER(ctypes.c_int), [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_set_double_list = _rpythonic_function_(		"g_key_file_set_double_list", ctypes.c_void_p, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("C_list",		ctypes.c_double),
	("length",		ctypes.c_ulong),] )

g_key_file_get_double_list = _rpythonic_function_(		"g_key_file_get_double_list", ctypes.POINTER(ctypes.c_double), [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_set_integer_list = _rpythonic_function_(		"g_key_file_set_integer_list", ctypes.c_void_p, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("C_list",		ctypes.c_int),
	("length",		ctypes.c_ulong),] )

g_key_file_set_comment = _rpythonic_function_(		"g_key_file_set_comment", ctypes.c_int, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("comment",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_get_comment = _rpythonic_function_(		"g_key_file_get_comment", ctypes.POINTER(ctypes.c_char), [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_remove_comment = _rpythonic_function_(		"g_key_file_remove_comment", ctypes.c_int, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_remove_key = _rpythonic_function_(		"g_key_file_remove_key", ctypes.c_int, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_key_file_remove_group = _rpythonic_function_(		"g_key_file_remove_group", ctypes.c_int, [
	("key_file",		ctypes.POINTER(_GKeyFile)),
	("group_name",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_mapped_file_new = _rpythonic_function_(		"g_mapped_file_new", ctypes.POINTER(_GMappedFile), [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("writable",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_mapped_file_new_from_fd = _rpythonic_function_(		"g_mapped_file_new_from_fd", ctypes.POINTER(_GMappedFile), [
	("fd",		ctypes.c_int),
	("writable",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_mapped_file_get_length = _rpythonic_function_(		"g_mapped_file_get_length", ctypes.c_ulong, [
	("file",		ctypes.POINTER(_GMappedFile)),] )

g_mapped_file_get_contents = _rpythonic_function_(		"g_mapped_file_get_contents", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(_GMappedFile)),] )

g_mapped_file_ref = _rpythonic_function_(		"g_mapped_file_ref", ctypes.POINTER(_GMappedFile), [
	("file",		ctypes.POINTER(_GMappedFile)),] )

g_mapped_file_unref = _rpythonic_function_(		"g_mapped_file_unref", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GMappedFile)),] )

g_mapped_file_free = _rpythonic_function_(		"g_mapped_file_free", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GMappedFile)),] )

g_markup_error_quark = _rpythonic_function_(		"g_markup_error_quark", ctypes.c_uint, [] )

start_element = _rpythonic_function_(		"start_element", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMarkupParseContext)),
	("element_name",		ctypes.POINTER(ctypes.c_char)),
	("attribute_names",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("attribute_values",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

end_element = _rpythonic_function_(		"end_element", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMarkupParseContext)),
	("element_name",		ctypes.POINTER(ctypes.c_char)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

text = _rpythonic_function_(		"text", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMarkupParseContext)),
	("text",		ctypes.POINTER(ctypes.c_char)),
	("text_len",		ctypes.c_ulong),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

passthrough = _rpythonic_function_(		"passthrough", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMarkupParseContext)),
	("passthrough_text",		ctypes.POINTER(ctypes.c_char)),
	("text_len",		ctypes.c_ulong),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

error = _rpythonic_function_(		"error", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMarkupParseContext)),
	("error",		ctypes.POINTER(_GError)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_markup_parse_context_new = _rpythonic_function_(		"g_markup_parse_context_new", ctypes.POINTER(_GMarkupParseContext), [
	("parser",		ctypes.POINTER(_GMarkupParser)),
	("flags",		ctypes.c_int),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("user_data_dnotify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_markup_parse_context_free = _rpythonic_function_(		"g_markup_parse_context_free", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMarkupParseContext)),] )

g_markup_parse_context_parse = _rpythonic_function_(		"g_markup_parse_context_parse", ctypes.c_int, [
	("context",		ctypes.POINTER(_GMarkupParseContext)),
	("text",		ctypes.POINTER(ctypes.c_char)),
	("text_len",		ctypes.c_long),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_markup_parse_context_push = _rpythonic_function_(		"g_markup_parse_context_push", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMarkupParseContext)),
	("parser",		ctypes.POINTER(_GMarkupParser)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_markup_parse_context_pop = _rpythonic_function_(		"g_markup_parse_context_pop", ctypes.POINTER(ctypes.c_void_p), [
	("context",		ctypes.POINTER(_GMarkupParseContext)),] )

g_markup_parse_context_end_parse = _rpythonic_function_(		"g_markup_parse_context_end_parse", ctypes.c_int, [
	("context",		ctypes.POINTER(_GMarkupParseContext)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_markup_parse_context_get_element = _rpythonic_function_(		"g_markup_parse_context_get_element", ctypes.POINTER(ctypes.c_char), [
	("context",		ctypes.POINTER(_GMarkupParseContext)),] )

g_markup_parse_context_get_element_stack = _rpythonic_function_(		"g_markup_parse_context_get_element_stack", ctypes.POINTER(_GSList), [
	("context",		ctypes.POINTER(_GMarkupParseContext)),] )

g_markup_parse_context_get_position = _rpythonic_function_(		"g_markup_parse_context_get_position", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GMarkupParseContext)),
	("line_number",		ctypes.POINTER(ctypes.c_int)),
	("char_number",		ctypes.POINTER(ctypes.c_int)),] )

g_markup_parse_context_get_user_data = _rpythonic_function_(		"g_markup_parse_context_get_user_data", ctypes.POINTER(ctypes.c_void_p), [
	("context",		ctypes.POINTER(_GMarkupParseContext)),] )

g_markup_escape_text = _rpythonic_function_(		"g_markup_escape_text", ctypes.POINTER(ctypes.c_char), [
	("text",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_long),] )

g_markup_vprintf_escaped = _rpythonic_function_(		"g_markup_vprintf_escaped", ctypes.POINTER(ctypes.c_char), [
	("format",		ctypes.POINTER(ctypes.c_char)),
	("args",		ctypes.c_char),] )

g_printf_string_upper_bound = _rpythonic_function_(		"g_printf_string_upper_bound", ctypes.c_ulong, [
	("format",		ctypes.POINTER(ctypes.c_char)),
	("args",		ctypes.c_char),] )

GLogFunc = _rpythonic_function_(		"GLogFunc", ctypes.c_void_p, [
	("log_domain",		ctypes.POINTER(ctypes.c_char)),
	("log_level",		ctypes.c_int),
	("message",		ctypes.POINTER(ctypes.c_char)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_log_set_handler = _rpythonic_function_(		"g_log_set_handler", ctypes.c_uint, [
	("log_domain",		ctypes.POINTER(ctypes.c_char)),
	("log_levels",		ctypes.c_int),
	("log_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_char),ctypes.c_int,ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_log_remove_handler = _rpythonic_function_(		"g_log_remove_handler", ctypes.c_void_p, [
	("log_domain",		ctypes.POINTER(ctypes.c_char)),
	("handler_id",		ctypes.c_uint),] )

g_log_default_handler = _rpythonic_function_(		"g_log_default_handler", ctypes.c_void_p, [
	("log_domain",		ctypes.POINTER(ctypes.c_char)),
	("log_level",		ctypes.c_int),
	("message",		ctypes.POINTER(ctypes.c_char)),
	("unused_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_log_set_default_handler = _rpythonic_function_(		"g_log_set_default_handler", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_char),ctypes.c_int,ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),), [
	("log_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_char),ctypes.c_int,ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_logv = _rpythonic_function_(		"g_logv", ctypes.c_void_p, [
	("log_domain",		ctypes.POINTER(ctypes.c_char)),
	("log_level",		ctypes.c_int),
	("format",		ctypes.POINTER(ctypes.c_char)),
	("args",		ctypes.c_char),] )

g_log_set_fatal_mask = _rpythonic_function_(		"g_log_set_fatal_mask", ctypes.c_int, [
	("log_domain",		ctypes.POINTER(ctypes.c_char)),
	("fatal_mask",		ctypes.c_int),] )

g_log_set_always_fatal = _rpythonic_function_(		"g_log_set_always_fatal", ctypes.c_int, [
	("fatal_mask",		ctypes.c_int),] )

_g_log_fallback_handler = _rpythonic_function_(		"_g_log_fallback_handler", ctypes.c_void_p, [
	("log_domain",		ctypes.POINTER(ctypes.c_char)),
	("log_level",		ctypes.c_int),
	("message",		ctypes.POINTER(ctypes.c_char)),
	("unused_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_return_if_fail_warning = _rpythonic_function_(		"g_return_if_fail_warning", ctypes.c_void_p, [
	("log_domain",		ctypes.POINTER(ctypes.c_char)),
	("pretty_function",		ctypes.POINTER(ctypes.c_char)),
	("expression",		ctypes.POINTER(ctypes.c_char)),] )

g_warn_message = _rpythonic_function_(		"g_warn_message", ctypes.c_void_p, [
	("domain",		ctypes.POINTER(ctypes.c_char)),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("func",		ctypes.POINTER(ctypes.c_char)),
	("warnexpr",		ctypes.POINTER(ctypes.c_char)),] )

g_assert_warning = _rpythonic_function_(		"g_assert_warning", ctypes.c_void_p, [
	("log_domain",		ctypes.POINTER(ctypes.c_char)),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("pretty_function",		ctypes.POINTER(ctypes.c_char)),
	("expression",		ctypes.POINTER(ctypes.c_char)),] )

GPrintFunc = _rpythonic_function_(		"GPrintFunc", ctypes.c_void_p, [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_set_print_handler = _rpythonic_function_(		"g_set_print_handler", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_char),), [
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_char),)),] )

g_set_printerr_handler = _rpythonic_function_(		"g_set_printerr_handler", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_char),), [
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_char),)),] )

GNodeTraverseFunc = _rpythonic_function_(		"GNodeTraverseFunc", ctypes.c_int, [
	("node",		ctypes.POINTER(_GNode)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

GNodeForeachFunc = _rpythonic_function_(		"GNodeForeachFunc", ctypes.c_void_p, [
	("node",		ctypes.POINTER(_GNode)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

GCopyFunc = _rpythonic_function_(		"GCopyFunc", ctypes.POINTER(ctypes.c_void_p), [
	("src",		ctypes.POINTER(ctypes.c_void_p)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_node_new = _rpythonic_function_(		"g_node_new", ctypes.POINTER(_GNode), [("data",		ctypes.c_void_p)] )

g_node_destroy = _rpythonic_function_(		"g_node_destroy", ctypes.c_void_p, [
	("root",		ctypes.POINTER(_GNode)),] )

g_node_unlink = _rpythonic_function_(		"g_node_unlink", ctypes.c_void_p, [
	("node",		ctypes.POINTER(_GNode)),] )

g_node_copy_deep = _rpythonic_function_(		"g_node_copy_deep", ctypes.POINTER(_GNode), [
	("node",		ctypes.POINTER(_GNode)),
	("copy_func",		ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_node_copy = _rpythonic_function_(		"g_node_copy", ctypes.POINTER(_GNode), [
	("node",		ctypes.POINTER(_GNode)),] )

g_node_insert = _rpythonic_function_(		"g_node_insert", ctypes.POINTER(_GNode), [
	("parent",		ctypes.POINTER(_GNode)),
	("position",		ctypes.c_int),
	("node",		ctypes.POINTER(_GNode)),] )

g_node_insert_before = _rpythonic_function_(		"g_node_insert_before", ctypes.POINTER(_GNode), [
	("parent",		ctypes.POINTER(_GNode)),
	("sibling",		ctypes.POINTER(_GNode)),
	("node",		ctypes.POINTER(_GNode)),] )

g_node_insert_after = _rpythonic_function_(		"g_node_insert_after", ctypes.POINTER(_GNode), [
	("parent",		ctypes.POINTER(_GNode)),
	("sibling",		ctypes.POINTER(_GNode)),
	("node",		ctypes.POINTER(_GNode)),] )

g_node_prepend = _rpythonic_function_(		"g_node_prepend", ctypes.POINTER(_GNode), [
	("parent",		ctypes.POINTER(_GNode)),
	("node",		ctypes.POINTER(_GNode)),] )

g_node_n_nodes = _rpythonic_function_(		"g_node_n_nodes", ctypes.c_uint, [
	("root",		ctypes.POINTER(_GNode)),
	("flags",		ctypes.c_int),] )

g_node_get_root = _rpythonic_function_(		"g_node_get_root", ctypes.POINTER(_GNode), [
	("node",		ctypes.POINTER(_GNode)),] )

g_node_is_ancestor = _rpythonic_function_(		"g_node_is_ancestor", ctypes.c_int, [
	("node",		ctypes.POINTER(_GNode)),
	("descendant",		ctypes.POINTER(_GNode)),] )

g_node_depth = _rpythonic_function_(		"g_node_depth", ctypes.c_uint, [
	("node",		ctypes.POINTER(_GNode)),] )

g_node_find = _rpythonic_function_(		"g_node_find", ctypes.POINTER(_GNode), [
	("root",		ctypes.POINTER(_GNode)),
	("order",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_node_traverse = _rpythonic_function_(		"g_node_traverse", ctypes.c_void_p, [
	("root",		ctypes.POINTER(_GNode)),
	("order",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("max_depth",		ctypes.c_int),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GNode),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_node_max_height = _rpythonic_function_(		"g_node_max_height", ctypes.c_uint, [
	("root",		ctypes.POINTER(_GNode)),] )

g_node_children_foreach = _rpythonic_function_(		"g_node_children_foreach", ctypes.c_void_p, [
	("node",		ctypes.POINTER(_GNode)),
	("flags",		ctypes.c_int),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GNode),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_node_reverse_children = _rpythonic_function_(		"g_node_reverse_children", ctypes.c_void_p, [
	("node",		ctypes.POINTER(_GNode)),] )

g_node_n_children = _rpythonic_function_(		"g_node_n_children", ctypes.c_uint, [
	("node",		ctypes.POINTER(_GNode)),] )

g_node_nth_child = _rpythonic_function_(		"g_node_nth_child", ctypes.POINTER(_GNode), [
	("node",		ctypes.POINTER(_GNode)),
	("n",		ctypes.c_uint),] )

g_node_last_child = _rpythonic_function_(		"g_node_last_child", ctypes.POINTER(_GNode), [
	("node",		ctypes.POINTER(_GNode)),] )

g_node_find_child = _rpythonic_function_(		"g_node_find_child", ctypes.POINTER(_GNode), [
	("node",		ctypes.POINTER(_GNode)),
	("flags",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_node_child_position = _rpythonic_function_(		"g_node_child_position", ctypes.c_int, [
	("node",		ctypes.POINTER(_GNode)),
	("child",		ctypes.POINTER(_GNode)),] )

g_node_child_index = _rpythonic_function_(		"g_node_child_index", ctypes.c_int, [
	("node",		ctypes.POINTER(_GNode)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_node_first_sibling = _rpythonic_function_(		"g_node_first_sibling", ctypes.POINTER(_GNode), [
	("node",		ctypes.POINTER(_GNode)),] )

g_node_last_sibling = _rpythonic_function_(		"g_node_last_sibling", ctypes.POINTER(_GNode), [
	("node",		ctypes.POINTER(_GNode)),] )

GOptionArgFunc = _rpythonic_function_(		"GOptionArgFunc", ctypes.c_int, [
	("option_name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_char)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

GOptionParseFunc = _rpythonic_function_(		"GOptionParseFunc", ctypes.c_int, [
	("context",		ctypes.POINTER(_GOptionContext)),
	("group",		ctypes.POINTER(_GOptionGroup)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

GOptionErrorFunc = _rpythonic_function_(		"GOptionErrorFunc", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GOptionContext)),
	("group",		ctypes.POINTER(_GOptionGroup)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_option_error_quark = _rpythonic_function_(		"g_option_error_quark", ctypes.c_uint, [] )

g_option_context_new = _rpythonic_function_(		"g_option_context_new", ctypes.POINTER(_GOptionContext), [
	("parameter_string",		ctypes.POINTER(ctypes.c_char)),] )

g_option_context_set_summary = _rpythonic_function_(		"g_option_context_set_summary", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GOptionContext)),
	("summary",		ctypes.POINTER(ctypes.c_char)),] )

g_option_context_get_summary = _rpythonic_function_(		"g_option_context_get_summary", ctypes.POINTER(ctypes.c_char), [
	("context",		ctypes.POINTER(_GOptionContext)),] )

g_option_context_set_description = _rpythonic_function_(		"g_option_context_set_description", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GOptionContext)),
	("description",		ctypes.POINTER(ctypes.c_char)),] )

g_option_context_get_description = _rpythonic_function_(		"g_option_context_get_description", ctypes.POINTER(ctypes.c_char), [
	("context",		ctypes.POINTER(_GOptionContext)),] )

g_option_context_free = _rpythonic_function_(		"g_option_context_free", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GOptionContext)),] )

g_option_context_set_help_enabled = _rpythonic_function_(		"g_option_context_set_help_enabled", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GOptionContext)),
	("help_enabled",		ctypes.c_int),] )

g_option_context_get_help_enabled = _rpythonic_function_(		"g_option_context_get_help_enabled", ctypes.c_int, [
	("context",		ctypes.POINTER(_GOptionContext)),] )

g_option_context_set_ignore_unknown_options = _rpythonic_function_(		"g_option_context_set_ignore_unknown_options", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GOptionContext)),
	("ignore_unknown",		ctypes.c_int),] )

g_option_context_get_ignore_unknown_options = _rpythonic_function_(		"g_option_context_get_ignore_unknown_options", ctypes.c_int, [
	("context",		ctypes.POINTER(_GOptionContext)),] )

g_option_context_add_main_entries = _rpythonic_function_(		"g_option_context_add_main_entries", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GOptionContext)),
	("entries",		ctypes.POINTER(_GOptionEntry)),
	("translation_domain",		ctypes.POINTER(ctypes.c_char)),] )

g_option_context_parse = _rpythonic_function_(		"g_option_context_parse", ctypes.c_int, [
	("context",		ctypes.POINTER(_GOptionContext)),
	("argc",		ctypes.POINTER(ctypes.c_int)),
	("argv",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(ctypes.c_char)))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_option_context_set_translate_func = _rpythonic_function_(		"g_option_context_set_translate_func", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GOptionContext)),
	("func",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),))),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy_notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_option_context_set_translation_domain = _rpythonic_function_(		"g_option_context_set_translation_domain", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GOptionContext)),
	("domain",		ctypes.POINTER(ctypes.c_char)),] )

g_option_context_add_group = _rpythonic_function_(		"g_option_context_add_group", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GOptionContext)),
	("group",		ctypes.POINTER(_GOptionGroup)),] )

g_option_context_set_main_group = _rpythonic_function_(		"g_option_context_set_main_group", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GOptionContext)),
	("group",		ctypes.POINTER(_GOptionGroup)),] )

g_option_context_get_main_group = _rpythonic_function_(		"g_option_context_get_main_group", ctypes.POINTER(_GOptionGroup), [
	("context",		ctypes.POINTER(_GOptionContext)),] )

g_option_context_get_help = _rpythonic_function_(		"g_option_context_get_help", ctypes.POINTER(ctypes.c_char), [
	("context",		ctypes.POINTER(_GOptionContext)),
	("main_help",		ctypes.c_int),
	("group",		ctypes.POINTER(_GOptionGroup)),] )

g_option_group_new = _rpythonic_function_(		"g_option_group_new", ctypes.POINTER(_GOptionGroup), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("description",		ctypes.POINTER(ctypes.c_char)),
	("help_description",		ctypes.POINTER(ctypes.c_char)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_option_group_set_parse_hooks = _rpythonic_function_(		"g_option_group_set_parse_hooks", ctypes.c_void_p, [
	("group",		ctypes.POINTER(_GOptionGroup)),
	("pre_parse_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GOptionContext),ctypes.POINTER(_GOptionGroup),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.POINTER(_GError)),)),
	("post_parse_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GOptionContext),ctypes.POINTER(_GOptionGroup),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.POINTER(_GError)),)),] )

g_option_group_set_error_hook = _rpythonic_function_(		"g_option_group_set_error_hook", ctypes.c_void_p, [
	("group",		ctypes.POINTER(_GOptionGroup)),
	("error_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GOptionContext),ctypes.POINTER(_GOptionGroup),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.POINTER(_GError)),)),] )

g_option_group_free = _rpythonic_function_(		"g_option_group_free", ctypes.c_void_p, [
	("group",		ctypes.POINTER(_GOptionGroup)),] )

g_option_group_add_entries = _rpythonic_function_(		"g_option_group_add_entries", ctypes.c_void_p, [
	("group",		ctypes.POINTER(_GOptionGroup)),
	("entries",		ctypes.POINTER(_GOptionEntry)),] )

g_option_group_set_translate_func = _rpythonic_function_(		"g_option_group_set_translate_func", ctypes.c_void_p, [
	("group",		ctypes.POINTER(_GOptionGroup)),
	("func",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),))),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy_notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_option_group_set_translation_domain = _rpythonic_function_(		"g_option_group_set_translation_domain", ctypes.c_void_p, [
	("group",		ctypes.POINTER(_GOptionGroup)),
	("domain",		ctypes.POINTER(ctypes.c_char)),] )

g_pattern_spec_new = _rpythonic_function_(		"g_pattern_spec_new", ctypes.POINTER(_GPatternSpec), [
	("pattern",		ctypes.POINTER(ctypes.c_char)),] )

g_pattern_spec_free = _rpythonic_function_(		"g_pattern_spec_free", ctypes.c_void_p, [
	("pspec",		ctypes.POINTER(_GPatternSpec)),] )

g_pattern_spec_equal = _rpythonic_function_(		"g_pattern_spec_equal", ctypes.c_int, [
	("pspec1",		ctypes.POINTER(_GPatternSpec)),
	("pspec2",		ctypes.POINTER(_GPatternSpec)),] )

g_pattern_match = _rpythonic_function_(		"g_pattern_match", ctypes.c_int, [
	("pspec",		ctypes.POINTER(_GPatternSpec)),
	("string_length",		ctypes.c_uint),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("string_reversed",		ctypes.POINTER(ctypes.c_char)),] )

g_pattern_match_string = _rpythonic_function_(		"g_pattern_match_string", ctypes.c_int, [
	("pspec",		ctypes.POINTER(_GPatternSpec)),
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_pattern_match_simple = _rpythonic_function_(		"g_pattern_match_simple", ctypes.c_int, [
	("pattern",		ctypes.POINTER(ctypes.c_char)),
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_spaced_primes_closest = _rpythonic_function_(		"g_spaced_primes_closest", ctypes.c_uint, [
	("num",		ctypes.c_uint),] )

g_qsort_with_data = _rpythonic_function_(		"g_qsort_with_data", ctypes.c_void_p, [
	("pbase",		ctypes.POINTER(ctypes.c_void_p)),
	("total_elems",		ctypes.c_int),
	("size",		ctypes.c_ulong),
	("compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_queue_new = _rpythonic_function_(		"g_queue_new", ctypes.POINTER(_GQueue), [] )

g_queue_free = _rpythonic_function_(		"g_queue_free", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),] )

g_queue_free_full = _rpythonic_function_(		"g_queue_free_full", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),
	("free_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_queue_init = _rpythonic_function_(		"g_queue_init", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),] )

g_queue_clear = _rpythonic_function_(		"g_queue_clear", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),] )

g_queue_is_empty = _rpythonic_function_(		"g_queue_is_empty", ctypes.c_int, [
	("queue",		ctypes.POINTER(_GQueue)),] )

g_queue_get_length = _rpythonic_function_(		"g_queue_get_length", ctypes.c_uint, [
	("queue",		ctypes.POINTER(_GQueue)),] )

g_queue_reverse = _rpythonic_function_(		"g_queue_reverse", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),] )

g_queue_copy = _rpythonic_function_(		"g_queue_copy", ctypes.POINTER(_GQueue), [
	("queue",		ctypes.POINTER(_GQueue)),] )

g_queue_foreach = _rpythonic_function_(		"g_queue_foreach", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_queue_find = _rpythonic_function_(		"g_queue_find", ctypes.POINTER(_GList), [
	("queue",		ctypes.POINTER(_GQueue)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_queue_find_custom = _rpythonic_function_(		"g_queue_find_custom", ctypes.POINTER(_GList), [
	("queue",		ctypes.POINTER(_GQueue)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_queue_sort = _rpythonic_function_(		"g_queue_sort", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),
	("compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_queue_push_head = _rpythonic_function_(		"g_queue_push_head", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_queue_push_tail = _rpythonic_function_(		"g_queue_push_tail", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_queue_push_nth = _rpythonic_function_(		"g_queue_push_nth", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("n",		ctypes.c_int),] )

g_queue_pop_head = _rpythonic_function_(		"g_queue_pop_head", ctypes.POINTER(ctypes.c_void_p), [
	("queue",		ctypes.POINTER(_GQueue)),] )

g_queue_pop_tail = _rpythonic_function_(		"g_queue_pop_tail", ctypes.POINTER(ctypes.c_void_p), [
	("queue",		ctypes.POINTER(_GQueue)),] )

g_queue_pop_nth = _rpythonic_function_(		"g_queue_pop_nth", ctypes.POINTER(ctypes.c_void_p), [
	("queue",		ctypes.POINTER(_GQueue)),
	("n",		ctypes.c_uint),] )

g_queue_peek_head = _rpythonic_function_(		"g_queue_peek_head", ctypes.POINTER(ctypes.c_void_p), [
	("queue",		ctypes.POINTER(_GQueue)),] )

g_queue_peek_tail = _rpythonic_function_(		"g_queue_peek_tail", ctypes.POINTER(ctypes.c_void_p), [
	("queue",		ctypes.POINTER(_GQueue)),] )

g_queue_peek_nth = _rpythonic_function_(		"g_queue_peek_nth", ctypes.POINTER(ctypes.c_void_p), [
	("queue",		ctypes.POINTER(_GQueue)),
	("n",		ctypes.c_uint),] )

g_queue_index = _rpythonic_function_(		"g_queue_index", ctypes.c_int, [
	("queue",		ctypes.POINTER(_GQueue)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_queue_remove = _rpythonic_function_(		"g_queue_remove", ctypes.c_int, [
	("queue",		ctypes.POINTER(_GQueue)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_queue_remove_all = _rpythonic_function_(		"g_queue_remove_all", ctypes.c_uint, [
	("queue",		ctypes.POINTER(_GQueue)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_queue_insert_before = _rpythonic_function_(		"g_queue_insert_before", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),
	("sibling",		ctypes.POINTER(_GList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_queue_insert_after = _rpythonic_function_(		"g_queue_insert_after", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),
	("sibling",		ctypes.POINTER(_GList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_queue_insert_sorted = _rpythonic_function_(		"g_queue_insert_sorted", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_queue_push_head_link = _rpythonic_function_(		"g_queue_push_head_link", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),
	("link_",		ctypes.POINTER(_GList)),] )

g_queue_push_tail_link = _rpythonic_function_(		"g_queue_push_tail_link", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),
	("link_",		ctypes.POINTER(_GList)),] )

g_queue_push_nth_link = _rpythonic_function_(		"g_queue_push_nth_link", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),
	("n",		ctypes.c_int),
	("link_",		ctypes.POINTER(_GList)),] )

g_queue_pop_head_link = _rpythonic_function_(		"g_queue_pop_head_link", ctypes.POINTER(_GList), [
	("queue",		ctypes.POINTER(_GQueue)),] )

g_queue_pop_tail_link = _rpythonic_function_(		"g_queue_pop_tail_link", ctypes.POINTER(_GList), [
	("queue",		ctypes.POINTER(_GQueue)),] )

g_queue_pop_nth_link = _rpythonic_function_(		"g_queue_pop_nth_link", ctypes.POINTER(_GList), [
	("queue",		ctypes.POINTER(_GQueue)),
	("n",		ctypes.c_uint),] )

g_queue_peek_head_link = _rpythonic_function_(		"g_queue_peek_head_link", ctypes.POINTER(_GList), [
	("queue",		ctypes.POINTER(_GQueue)),] )

g_queue_peek_tail_link = _rpythonic_function_(		"g_queue_peek_tail_link", ctypes.POINTER(_GList), [
	("queue",		ctypes.POINTER(_GQueue)),] )

g_queue_peek_nth_link = _rpythonic_function_(		"g_queue_peek_nth_link", ctypes.POINTER(_GList), [
	("queue",		ctypes.POINTER(_GQueue)),
	("n",		ctypes.c_uint),] )

g_queue_link_index = _rpythonic_function_(		"g_queue_link_index", ctypes.c_int, [
	("queue",		ctypes.POINTER(_GQueue)),
	("link_",		ctypes.POINTER(_GList)),] )

g_queue_unlink = _rpythonic_function_(		"g_queue_unlink", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),
	("link_",		ctypes.POINTER(_GList)),] )

g_queue_delete_link = _rpythonic_function_(		"g_queue_delete_link", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(_GQueue)),
	("link_",		ctypes.POINTER(_GList)),] )

g_rand_new_with_seed = _rpythonic_function_(		"g_rand_new_with_seed", ctypes.POINTER(_GRand), [
	("seed",		ctypes.c_uint),] )

g_rand_new_with_seed_array = _rpythonic_function_(		"g_rand_new_with_seed_array", ctypes.POINTER(_GRand), [
	("seed",		ctypes.POINTER(ctypes.c_uint)),
	("seed_length",		ctypes.c_uint),] )

g_rand_new = _rpythonic_function_(		"g_rand_new", ctypes.POINTER(_GRand), [] )

g_rand_free = _rpythonic_function_(		"g_rand_free", ctypes.c_void_p, [
	("rand_",		ctypes.POINTER(_GRand)),] )

g_rand_copy = _rpythonic_function_(		"g_rand_copy", ctypes.POINTER(_GRand), [
	("rand_",		ctypes.POINTER(_GRand)),] )

g_rand_set_seed = _rpythonic_function_(		"g_rand_set_seed", ctypes.c_void_p, [
	("rand_",		ctypes.POINTER(_GRand)),
	("seed",		ctypes.c_uint),] )

g_rand_set_seed_array = _rpythonic_function_(		"g_rand_set_seed_array", ctypes.c_void_p, [
	("rand_",		ctypes.POINTER(_GRand)),
	("seed",		ctypes.POINTER(ctypes.c_uint)),
	("seed_length",		ctypes.c_uint),] )

g_rand_int = _rpythonic_function_(		"g_rand_int", ctypes.c_uint, [
	("rand_",		ctypes.POINTER(_GRand)),] )

g_rand_int_range = _rpythonic_function_(		"g_rand_int_range", ctypes.c_int, [
	("rand_",		ctypes.POINTER(_GRand)),
	("begin",		ctypes.c_int),
	("end",		ctypes.c_int),] )

g_rand_double = _rpythonic_function_(		"g_rand_double", ctypes.c_double, [
	("rand_",		ctypes.POINTER(_GRand)),] )

g_rand_double_range = _rpythonic_function_(		"g_rand_double_range", ctypes.c_double, [
	("rand_",		ctypes.POINTER(_GRand)),
	("begin",		ctypes.c_double),
	("end",		ctypes.c_double),] )

g_random_set_seed = _rpythonic_function_(		"g_random_set_seed", ctypes.c_void_p, [
	("seed",		ctypes.c_uint),] )

g_random_int = _rpythonic_function_(		"g_random_int", ctypes.c_uint, [] )

g_random_int_range = _rpythonic_function_(		"g_random_int_range", ctypes.c_int, [
	("begin",		ctypes.c_int),
	("end",		ctypes.c_int),] )

g_random_double = _rpythonic_function_(		"g_random_double", ctypes.c_double, [] )

g_random_double_range = _rpythonic_function_(		"g_random_double_range", ctypes.c_double, [
	("begin",		ctypes.c_double),
	("end",		ctypes.c_double),] )

g_regex_error_quark = _rpythonic_function_(		"g_regex_error_quark", ctypes.c_uint, [] )

GRegexEvalCallback = _rpythonic_function_(		"GRegexEvalCallback", ctypes.c_int, [
	("match_info",		ctypes.POINTER(_GMatchInfo)),
	("result",		ctypes.POINTER(_GString)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_regex_new = _rpythonic_function_(		"g_regex_new", ctypes.POINTER(_GRegex), [
	("pattern",		ctypes.POINTER(ctypes.c_char)),
	("compile_options",		ctypes.c_int),
	("match_options",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_regex_ref = _rpythonic_function_(		"g_regex_ref", ctypes.POINTER(_GRegex), [
	("regex",		ctypes.POINTER(_GRegex)),] )

g_regex_unref = _rpythonic_function_(		"g_regex_unref", ctypes.c_void_p, [
	("regex",		ctypes.POINTER(_GRegex)),] )

g_regex_get_pattern = _rpythonic_function_(		"g_regex_get_pattern", ctypes.POINTER(ctypes.c_char), [
	("regex",		ctypes.POINTER(_GRegex)),] )

g_regex_get_max_backref = _rpythonic_function_(		"g_regex_get_max_backref", ctypes.c_int, [
	("regex",		ctypes.POINTER(_GRegex)),] )

g_regex_get_capture_count = _rpythonic_function_(		"g_regex_get_capture_count", ctypes.c_int, [
	("regex",		ctypes.POINTER(_GRegex)),] )

g_regex_get_string_number = _rpythonic_function_(		"g_regex_get_string_number", ctypes.c_int, [
	("regex",		ctypes.POINTER(_GRegex)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_regex_escape_string = _rpythonic_function_(		"g_regex_escape_string", ctypes.POINTER(ctypes.c_char), [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),] )

g_regex_escape_nul = _rpythonic_function_(		"g_regex_escape_nul", ctypes.POINTER(ctypes.c_char), [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),] )

g_regex_get_compile_flags = _rpythonic_function_(		"g_regex_get_compile_flags", ctypes.c_int, [
	("regex",		ctypes.POINTER(_GRegex)),] )

g_regex_get_match_flags = _rpythonic_function_(		"g_regex_get_match_flags", ctypes.c_int, [
	("regex",		ctypes.POINTER(_GRegex)),] )

g_regex_match_simple = _rpythonic_function_(		"g_regex_match_simple", ctypes.c_int, [
	("pattern",		ctypes.POINTER(ctypes.c_char)),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("compile_options",		ctypes.c_int),
	("match_options",		ctypes.c_int),] )

g_regex_match = _rpythonic_function_(		"g_regex_match", ctypes.c_int, [
	("regex",		ctypes.POINTER(_GRegex)),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("match_options",		ctypes.c_int),
	("match_info",		ctypes.POINTER(ctypes.POINTER(_GMatchInfo))),] )

g_regex_match_full = _rpythonic_function_(		"g_regex_match_full", ctypes.c_int, [
	("regex",		ctypes.POINTER(_GRegex)),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("string_len",		ctypes.c_long),
	("start_position",		ctypes.c_int),
	("match_options",		ctypes.c_int),
	("match_info",		ctypes.POINTER(ctypes.POINTER(_GMatchInfo))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_regex_match_all = _rpythonic_function_(		"g_regex_match_all", ctypes.c_int, [
	("regex",		ctypes.POINTER(_GRegex)),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("match_options",		ctypes.c_int),
	("match_info",		ctypes.POINTER(ctypes.POINTER(_GMatchInfo))),] )

g_regex_match_all_full = _rpythonic_function_(		"g_regex_match_all_full", ctypes.c_int, [
	("regex",		ctypes.POINTER(_GRegex)),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("string_len",		ctypes.c_long),
	("start_position",		ctypes.c_int),
	("match_options",		ctypes.c_int),
	("match_info",		ctypes.POINTER(ctypes.POINTER(_GMatchInfo))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_regex_split_simple = _rpythonic_function_(		"g_regex_split_simple", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("pattern",		ctypes.POINTER(ctypes.c_char)),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("compile_options",		ctypes.c_int),
	("match_options",		ctypes.c_int),] )

g_regex_split = _rpythonic_function_(		"g_regex_split", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("regex",		ctypes.POINTER(_GRegex)),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("match_options",		ctypes.c_int),] )

g_regex_split_full = _rpythonic_function_(		"g_regex_split_full", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("regex",		ctypes.POINTER(_GRegex)),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("string_len",		ctypes.c_long),
	("start_position",		ctypes.c_int),
	("match_options",		ctypes.c_int),
	("max_tokens",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_regex_replace = _rpythonic_function_(		"g_regex_replace", ctypes.POINTER(ctypes.c_char), [
	("regex",		ctypes.POINTER(_GRegex)),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("string_len",		ctypes.c_long),
	("start_position",		ctypes.c_int),
	("replacement",		ctypes.POINTER(ctypes.c_char)),
	("match_options",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_regex_replace_literal = _rpythonic_function_(		"g_regex_replace_literal", ctypes.POINTER(ctypes.c_char), [
	("regex",		ctypes.POINTER(_GRegex)),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("string_len",		ctypes.c_long),
	("start_position",		ctypes.c_int),
	("replacement",		ctypes.POINTER(ctypes.c_char)),
	("match_options",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_regex_replace_eval = _rpythonic_function_(		"g_regex_replace_eval", ctypes.POINTER(ctypes.c_char), [
	("regex",		ctypes.POINTER(_GRegex)),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("string_len",		ctypes.c_long),
	("start_position",		ctypes.c_int),
	("match_options",		ctypes.c_int),
	("C_eval",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GMatchInfo),ctypes.POINTER(_GString),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_regex_check_replacement = _rpythonic_function_(		"g_regex_check_replacement", ctypes.c_int, [
	("replacement",		ctypes.POINTER(ctypes.c_char)),
	("has_references",		ctypes.POINTER(ctypes.c_int)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_match_info_get_regex = _rpythonic_function_(		"g_match_info_get_regex", ctypes.POINTER(_GRegex), [
	("match_info",		ctypes.POINTER(_GMatchInfo)),] )

g_match_info_get_string = _rpythonic_function_(		"g_match_info_get_string", ctypes.POINTER(ctypes.c_char), [
	("match_info",		ctypes.POINTER(_GMatchInfo)),] )

g_match_info_ref = _rpythonic_function_(		"g_match_info_ref", ctypes.POINTER(_GMatchInfo), [
	("match_info",		ctypes.POINTER(_GMatchInfo)),] )

g_match_info_unref = _rpythonic_function_(		"g_match_info_unref", ctypes.c_void_p, [
	("match_info",		ctypes.POINTER(_GMatchInfo)),] )

g_match_info_free = _rpythonic_function_(		"g_match_info_free", ctypes.c_void_p, [
	("match_info",		ctypes.POINTER(_GMatchInfo)),] )

g_match_info_next = _rpythonic_function_(		"g_match_info_next", ctypes.c_int, [
	("match_info",		ctypes.POINTER(_GMatchInfo)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_match_info_matches = _rpythonic_function_(		"g_match_info_matches", ctypes.c_int, [
	("match_info",		ctypes.POINTER(_GMatchInfo)),] )

g_match_info_get_match_count = _rpythonic_function_(		"g_match_info_get_match_count", ctypes.c_int, [
	("match_info",		ctypes.POINTER(_GMatchInfo)),] )

g_match_info_is_partial_match = _rpythonic_function_(		"g_match_info_is_partial_match", ctypes.c_int, [
	("match_info",		ctypes.POINTER(_GMatchInfo)),] )

g_match_info_expand_references = _rpythonic_function_(		"g_match_info_expand_references", ctypes.POINTER(ctypes.c_char), [
	("match_info",		ctypes.POINTER(_GMatchInfo)),
	("string_to_expand",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_match_info_fetch = _rpythonic_function_(		"g_match_info_fetch", ctypes.POINTER(ctypes.c_char), [
	("match_info",		ctypes.POINTER(_GMatchInfo)),
	("match_num",		ctypes.c_int),] )

g_match_info_fetch_pos = _rpythonic_function_(		"g_match_info_fetch_pos", ctypes.c_int, [
	("match_info",		ctypes.POINTER(_GMatchInfo)),
	("match_num",		ctypes.c_int),
	("start_pos",		ctypes.POINTER(ctypes.c_int)),
	("end_pos",		ctypes.POINTER(ctypes.c_int)),] )

g_match_info_fetch_named = _rpythonic_function_(		"g_match_info_fetch_named", ctypes.POINTER(ctypes.c_char), [
	("match_info",		ctypes.POINTER(_GMatchInfo)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_match_info_fetch_named_pos = _rpythonic_function_(		"g_match_info_fetch_named_pos", ctypes.c_int, [
	("match_info",		ctypes.POINTER(_GMatchInfo)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("start_pos",		ctypes.POINTER(ctypes.c_int)),
	("end_pos",		ctypes.POINTER(ctypes.c_int)),] )

g_match_info_fetch_all = _rpythonic_function_(		"g_match_info_fetch_all", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("match_info",		ctypes.POINTER(_GMatchInfo)),] )

GScannerMsgFunc = _rpythonic_function_(		"GScannerMsgFunc", ctypes.c_void_p, [
	("scanner",		ctypes.POINTER(_GScanner)),
	("message",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.c_int),] )

g_scanner_new = _rpythonic_function_(		"g_scanner_new", ctypes.POINTER(_GScanner), [
	("config_templ",		ctypes.POINTER(_GScannerConfig)),] )

g_scanner_destroy = _rpythonic_function_(		"g_scanner_destroy", ctypes.c_void_p, [
	("scanner",		ctypes.POINTER(_GScanner)),] )

g_scanner_input_file = _rpythonic_function_(		"g_scanner_input_file", ctypes.c_void_p, [
	("scanner",		ctypes.POINTER(_GScanner)),
	("input_fd",		ctypes.c_int),] )

g_scanner_sync_file_offset = _rpythonic_function_(		"g_scanner_sync_file_offset", ctypes.c_void_p, [
	("scanner",		ctypes.POINTER(_GScanner)),] )

g_scanner_input_text = _rpythonic_function_(		"g_scanner_input_text", ctypes.c_void_p, [
	("scanner",		ctypes.POINTER(_GScanner)),
	("text",		ctypes.POINTER(ctypes.c_char)),
	("text_len",		ctypes.c_uint),] )

g_scanner_get_next_token = _rpythonic_function_(		"g_scanner_get_next_token", ctypes.c_int, [
	("scanner",		ctypes.POINTER(_GScanner)),] )

g_scanner_peek_next_token = _rpythonic_function_(		"g_scanner_peek_next_token", ctypes.c_int, [
	("scanner",		ctypes.POINTER(_GScanner)),] )

g_scanner_cur_token = _rpythonic_function_(		"g_scanner_cur_token", ctypes.c_int, [
	("scanner",		ctypes.POINTER(_GScanner)),] )

g_scanner_cur_value = _rpythonic_function_(		"g_scanner_cur_value", _GTokenValue, [
	("scanner",		ctypes.POINTER(_GScanner)),] )

g_scanner_cur_line = _rpythonic_function_(		"g_scanner_cur_line", ctypes.c_uint, [
	("scanner",		ctypes.POINTER(_GScanner)),] )

g_scanner_cur_position = _rpythonic_function_(		"g_scanner_cur_position", ctypes.c_uint, [
	("scanner",		ctypes.POINTER(_GScanner)),] )

g_scanner_eof = _rpythonic_function_(		"g_scanner_eof", ctypes.c_int, [
	("scanner",		ctypes.POINTER(_GScanner)),] )

g_scanner_set_scope = _rpythonic_function_(		"g_scanner_set_scope", ctypes.c_uint, [
	("scanner",		ctypes.POINTER(_GScanner)),
	("scope_id",		ctypes.c_uint),] )

g_scanner_scope_add_symbol = _rpythonic_function_(		"g_scanner_scope_add_symbol", ctypes.c_void_p, [
	("scanner",		ctypes.POINTER(_GScanner)),
	("scope_id",		ctypes.c_uint),
	("symbol",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_void_p)),] )

g_scanner_scope_remove_symbol = _rpythonic_function_(		"g_scanner_scope_remove_symbol", ctypes.c_void_p, [
	("scanner",		ctypes.POINTER(_GScanner)),
	("scope_id",		ctypes.c_uint),
	("symbol",		ctypes.POINTER(ctypes.c_char)),] )

g_scanner_scope_lookup_symbol = _rpythonic_function_(		"g_scanner_scope_lookup_symbol", ctypes.POINTER(ctypes.c_void_p), [
	("scanner",		ctypes.POINTER(_GScanner)),
	("scope_id",		ctypes.c_uint),
	("symbol",		ctypes.POINTER(ctypes.c_char)),] )

g_scanner_scope_foreach_symbol = _rpythonic_function_(		"g_scanner_scope_foreach_symbol", ctypes.c_void_p, [
	("scanner",		ctypes.POINTER(_GScanner)),
	("scope_id",		ctypes.c_uint),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_scanner_lookup_symbol = _rpythonic_function_(		"g_scanner_lookup_symbol", ctypes.POINTER(ctypes.c_void_p), [
	("scanner",		ctypes.POINTER(_GScanner)),
	("symbol",		ctypes.POINTER(ctypes.c_char)),] )

g_scanner_unexp_token = _rpythonic_function_(		"g_scanner_unexp_token", ctypes.c_void_p, [
	("scanner",		ctypes.POINTER(_GScanner)),
	("expected_token",		ctypes.c_int),
	("identifier_spec",		ctypes.POINTER(ctypes.c_char)),
	("symbol_spec",		ctypes.POINTER(ctypes.c_char)),
	("symbol_name",		ctypes.POINTER(ctypes.c_char)),
	("message",		ctypes.POINTER(ctypes.c_char)),
	("is_error",		ctypes.c_int),] )

GSequenceIterCompareFunc = _rpythonic_function_(		"GSequenceIterCompareFunc", ctypes.c_int, [
	("a",		ctypes.POINTER(_GSequenceNode)),
	("b",		ctypes.POINTER(_GSequenceNode)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_new = _rpythonic_function_(		"g_sequence_new", ctypes.POINTER(_GSequence), [
	("data_destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_sequence_free = _rpythonic_function_(		"g_sequence_free", ctypes.c_void_p, [
	("seq",		ctypes.POINTER(_GSequence)),] )

g_sequence_get_length = _rpythonic_function_(		"g_sequence_get_length", ctypes.c_int, [
	("seq",		ctypes.POINTER(_GSequence)),] )

g_sequence_foreach = _rpythonic_function_(		"g_sequence_foreach", ctypes.c_void_p, [
	("seq",		ctypes.POINTER(_GSequence)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_foreach_range = _rpythonic_function_(		"g_sequence_foreach_range", ctypes.c_void_p, [
	("begin",		ctypes.POINTER(_GSequenceNode)),
	("end",		ctypes.POINTER(_GSequenceNode)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_sort = _rpythonic_function_(		"g_sequence_sort", ctypes.c_void_p, [
	("seq",		ctypes.POINTER(_GSequence)),
	("cmp_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("cmp_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_sort_iter = _rpythonic_function_(		"g_sequence_sort_iter", ctypes.c_void_p, [
	("seq",		ctypes.POINTER(_GSequence)),
	("cmp_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GSequenceNode),ctypes.POINTER(_GSequenceNode),ctypes.POINTER(ctypes.c_void_p),)),
	("cmp_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_get_begin_iter = _rpythonic_function_(		"g_sequence_get_begin_iter", ctypes.POINTER(_GSequenceNode), [
	("seq",		ctypes.POINTER(_GSequence)),] )

g_sequence_get_end_iter = _rpythonic_function_(		"g_sequence_get_end_iter", ctypes.POINTER(_GSequenceNode), [
	("seq",		ctypes.POINTER(_GSequence)),] )

g_sequence_get_iter_at_pos = _rpythonic_function_(		"g_sequence_get_iter_at_pos", ctypes.POINTER(_GSequenceNode), [
	("seq",		ctypes.POINTER(_GSequence)),
	("pos",		ctypes.c_int),] )

g_sequence_append = _rpythonic_function_(		"g_sequence_append", ctypes.POINTER(_GSequenceNode), [
	("seq",		ctypes.POINTER(_GSequence)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_prepend = _rpythonic_function_(		"g_sequence_prepend", ctypes.POINTER(_GSequenceNode), [
	("seq",		ctypes.POINTER(_GSequence)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_insert_before = _rpythonic_function_(		"g_sequence_insert_before", ctypes.POINTER(_GSequenceNode), [
	("iter",		ctypes.POINTER(_GSequenceNode)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_move = _rpythonic_function_(		"g_sequence_move", ctypes.c_void_p, [
	("src",		ctypes.POINTER(_GSequenceNode)),
	("dest",		ctypes.POINTER(_GSequenceNode)),] )

g_sequence_swap = _rpythonic_function_(		"g_sequence_swap", ctypes.c_void_p, [
	("a",		ctypes.POINTER(_GSequenceNode)),
	("b",		ctypes.POINTER(_GSequenceNode)),] )

g_sequence_insert_sorted = _rpythonic_function_(		"g_sequence_insert_sorted", ctypes.POINTER(_GSequenceNode), [
	("seq",		ctypes.POINTER(_GSequence)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("cmp_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("cmp_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_insert_sorted_iter = _rpythonic_function_(		"g_sequence_insert_sorted_iter", ctypes.POINTER(_GSequenceNode), [
	("seq",		ctypes.POINTER(_GSequence)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("iter_cmp",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GSequenceNode),ctypes.POINTER(_GSequenceNode),ctypes.POINTER(ctypes.c_void_p),)),
	("cmp_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_sort_changed = _rpythonic_function_(		"g_sequence_sort_changed", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(_GSequenceNode)),
	("cmp_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("cmp_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_sort_changed_iter = _rpythonic_function_(		"g_sequence_sort_changed_iter", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(_GSequenceNode)),
	("iter_cmp",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GSequenceNode),ctypes.POINTER(_GSequenceNode),ctypes.POINTER(ctypes.c_void_p),)),
	("cmp_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_remove = _rpythonic_function_(		"g_sequence_remove", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(_GSequenceNode)),] )

g_sequence_remove_range = _rpythonic_function_(		"g_sequence_remove_range", ctypes.c_void_p, [
	("begin",		ctypes.POINTER(_GSequenceNode)),
	("end",		ctypes.POINTER(_GSequenceNode)),] )

g_sequence_move_range = _rpythonic_function_(		"g_sequence_move_range", ctypes.c_void_p, [
	("dest",		ctypes.POINTER(_GSequenceNode)),
	("begin",		ctypes.POINTER(_GSequenceNode)),
	("end",		ctypes.POINTER(_GSequenceNode)),] )

g_sequence_search = _rpythonic_function_(		"g_sequence_search", ctypes.POINTER(_GSequenceNode), [
	("seq",		ctypes.POINTER(_GSequence)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("cmp_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("cmp_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_search_iter = _rpythonic_function_(		"g_sequence_search_iter", ctypes.POINTER(_GSequenceNode), [
	("seq",		ctypes.POINTER(_GSequence)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("iter_cmp",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GSequenceNode),ctypes.POINTER(_GSequenceNode),ctypes.POINTER(ctypes.c_void_p),)),
	("cmp_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_lookup = _rpythonic_function_(		"g_sequence_lookup", ctypes.POINTER(_GSequenceNode), [
	("seq",		ctypes.POINTER(_GSequence)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("cmp_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("cmp_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_lookup_iter = _rpythonic_function_(		"g_sequence_lookup_iter", ctypes.POINTER(_GSequenceNode), [
	("seq",		ctypes.POINTER(_GSequence)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("iter_cmp",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GSequenceNode),ctypes.POINTER(_GSequenceNode),ctypes.POINTER(ctypes.c_void_p),)),
	("cmp_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_get = _rpythonic_function_(		"g_sequence_get", ctypes.POINTER(ctypes.c_void_p), [
	("iter",		ctypes.POINTER(_GSequenceNode)),] )

g_sequence_set = _rpythonic_function_(		"g_sequence_set", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(_GSequenceNode)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_sequence_iter_is_begin = _rpythonic_function_(		"g_sequence_iter_is_begin", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GSequenceNode)),] )

g_sequence_iter_is_end = _rpythonic_function_(		"g_sequence_iter_is_end", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GSequenceNode)),] )

g_sequence_iter_next = _rpythonic_function_(		"g_sequence_iter_next", ctypes.POINTER(_GSequenceNode), [
	("iter",		ctypes.POINTER(_GSequenceNode)),] )

g_sequence_iter_prev = _rpythonic_function_(		"g_sequence_iter_prev", ctypes.POINTER(_GSequenceNode), [
	("iter",		ctypes.POINTER(_GSequenceNode)),] )

g_sequence_iter_get_position = _rpythonic_function_(		"g_sequence_iter_get_position", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GSequenceNode)),] )

g_sequence_iter_move = _rpythonic_function_(		"g_sequence_iter_move", ctypes.POINTER(_GSequenceNode), [
	("iter",		ctypes.POINTER(_GSequenceNode)),
	("delta",		ctypes.c_int),] )

g_sequence_iter_get_sequence = _rpythonic_function_(		"g_sequence_iter_get_sequence", ctypes.POINTER(_GSequence), [
	("iter",		ctypes.POINTER(_GSequenceNode)),] )

g_sequence_iter_compare = _rpythonic_function_(		"g_sequence_iter_compare", ctypes.c_int, [
	("a",		ctypes.POINTER(_GSequenceNode)),
	("b",		ctypes.POINTER(_GSequenceNode)),] )

g_sequence_range_get_midpoint = _rpythonic_function_(		"g_sequence_range_get_midpoint", ctypes.POINTER(_GSequenceNode), [
	("begin",		ctypes.POINTER(_GSequenceNode)),
	("end",		ctypes.POINTER(_GSequenceNode)),] )

g_shell_error_quark = _rpythonic_function_(		"g_shell_error_quark", ctypes.c_uint, [] )

g_shell_quote = _rpythonic_function_(		"g_shell_quote", ctypes.POINTER(ctypes.c_char), [
	("unquoted_string",		ctypes.POINTER(ctypes.c_char)),] )

g_shell_unquote = _rpythonic_function_(		"g_shell_unquote", ctypes.POINTER(ctypes.c_char), [
	("quoted_string",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_shell_parse_argv = _rpythonic_function_(		"g_shell_parse_argv", ctypes.c_int, [
	("command_line",		ctypes.POINTER(ctypes.c_char)),
	("argcp",		ctypes.POINTER(ctypes.c_int)),
	("argvp",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(ctypes.c_char)))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_slice_alloc = _rpythonic_function_(		"g_slice_alloc", ctypes.POINTER(ctypes.c_void_p), [
	("block_size",		ctypes.c_ulong),] )

g_slice_alloc0 = _rpythonic_function_(		"g_slice_alloc0", ctypes.POINTER(ctypes.c_void_p), [
	("block_size",		ctypes.c_ulong),] )

g_slice_copy = _rpythonic_function_(		"g_slice_copy", ctypes.POINTER(ctypes.c_void_p), [
	("block_size",		ctypes.c_ulong),
	("mem_block",		ctypes.POINTER(ctypes.c_void_p)),] )

g_slice_free1 = _rpythonic_function_(		"g_slice_free1", ctypes.c_void_p, [
	("block_size",		ctypes.c_ulong),
	("mem_block",		ctypes.POINTER(ctypes.c_void_p)),] )

g_slice_free_chain_with_offset = _rpythonic_function_(		"g_slice_free_chain_with_offset", ctypes.c_void_p, [
	("block_size",		ctypes.c_ulong),
	("mem_chain",		ctypes.POINTER(ctypes.c_void_p)),
	("next_offset",		ctypes.c_ulong),] )

g_slice_set_config = _rpythonic_function_(		"g_slice_set_config", ctypes.c_void_p, [
	("ckey",		ctypes.c_int),
	("value",		ctypes.c_long),] )

g_slice_get_config = _rpythonic_function_(		"g_slice_get_config", ctypes.c_long, [
	("ckey",		ctypes.c_int),] )

g_slice_get_config_state = _rpythonic_function_(		"g_slice_get_config_state", ctypes.POINTER(ctypes.c_long), [
	("ckey",		ctypes.c_int),
	("address",		ctypes.c_long),
	("n_values",		ctypes.POINTER(ctypes.c_uint)),] )

GSpawnChildSetupFunc = _rpythonic_function_(		"GSpawnChildSetupFunc", ctypes.c_void_p, [("user_data",		ctypes.c_void_p)] )

g_spawn_sync = _rpythonic_function_(		"g_spawn_sync", ctypes.c_int, [
	("working_directory",		ctypes.POINTER(ctypes.c_char)),
	("argv",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("envp",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("flags",		ctypes.c_int),
	("child_setup",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("standard_output",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("standard_error",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("exit_status",		ctypes.POINTER(ctypes.c_int)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_spawn_error_quark = _rpythonic_function_(		"g_spawn_error_quark", ctypes.c_uint, [] )

g_spawn_async = _rpythonic_function_(		"g_spawn_async", ctypes.c_int, [
	("working_directory",		ctypes.POINTER(ctypes.c_char)),
	("argv",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("envp",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("flags",		ctypes.c_int),
	("child_setup",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("child_pid",		ctypes.POINTER(ctypes.c_int)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_spawn_async_with_pipes = _rpythonic_function_(		"g_spawn_async_with_pipes", ctypes.c_int, [
	("working_directory",		ctypes.POINTER(ctypes.c_char)),
	("argv",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("envp",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("flags",		ctypes.c_int),
	("child_setup",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("child_pid",		ctypes.POINTER(ctypes.c_int)),
	("standard_input",		ctypes.POINTER(ctypes.c_int)),
	("standard_output",		ctypes.POINTER(ctypes.c_int)),
	("standard_error",		ctypes.POINTER(ctypes.c_int)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_spawn_command_line_sync = _rpythonic_function_(		"g_spawn_command_line_sync", ctypes.c_int, [
	("command_line",		ctypes.POINTER(ctypes.c_char)),
	("standard_output",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("standard_error",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("exit_status",		ctypes.POINTER(ctypes.c_int)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_spawn_command_line_async = _rpythonic_function_(		"g_spawn_command_line_async", ctypes.c_int, [
	("command_line",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_spawn_close_pid = _rpythonic_function_(		"g_spawn_close_pid", ctypes.c_void_p, [
	("pid",		ctypes.c_int),] )

g_ascii_tolower = _rpythonic_function_(		"g_ascii_tolower", ctypes.c_char, [
	("c",		ctypes.c_char),] )

g_ascii_toupper = _rpythonic_function_(		"g_ascii_toupper", ctypes.c_char, [
	("c",		ctypes.c_char),] )

g_ascii_digit_value = _rpythonic_function_(		"g_ascii_digit_value", ctypes.c_int, [
	("c",		ctypes.c_char),] )

g_ascii_xdigit_value = _rpythonic_function_(		"g_ascii_xdigit_value", ctypes.c_int, [
	("c",		ctypes.c_char),] )

g_strdelimit = _rpythonic_function_(		"g_strdelimit", ctypes.POINTER(ctypes.c_char), [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("delimiters",		ctypes.POINTER(ctypes.c_char)),
	("new_delimiter",		ctypes.c_char),] )

g_strcanon = _rpythonic_function_(		"g_strcanon", ctypes.POINTER(ctypes.c_char), [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("valid_chars",		ctypes.POINTER(ctypes.c_char)),
	("substitutor",		ctypes.c_char),] )

g_strerror = _rpythonic_function_(		"g_strerror", ctypes.POINTER(ctypes.c_char), [
	("errnum",		ctypes.c_int),] )

g_strsignal = _rpythonic_function_(		"g_strsignal", ctypes.POINTER(ctypes.c_char), [
	("signum",		ctypes.c_int),] )

g_strreverse = _rpythonic_function_(		"g_strreverse", ctypes.POINTER(ctypes.c_char), [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_strlcpy = _rpythonic_function_(		"g_strlcpy", ctypes.c_ulong, [
	("dest",		ctypes.POINTER(ctypes.c_char)),
	("src",		ctypes.POINTER(ctypes.c_char)),
	("dest_size",		ctypes.c_ulong),] )

g_strlcat = _rpythonic_function_(		"g_strlcat", ctypes.c_ulong, [
	("dest",		ctypes.POINTER(ctypes.c_char)),
	("src",		ctypes.POINTER(ctypes.c_char)),
	("dest_size",		ctypes.c_ulong),] )

g_strstr_len = _rpythonic_function_(		"g_strstr_len", ctypes.POINTER(ctypes.c_char), [
	("haystack",		ctypes.POINTER(ctypes.c_char)),
	("haystack_len",		ctypes.c_long),
	("needle",		ctypes.POINTER(ctypes.c_char)),] )

g_strrstr = _rpythonic_function_(		"g_strrstr", ctypes.POINTER(ctypes.c_char), [
	("haystack",		ctypes.POINTER(ctypes.c_char)),
	("needle",		ctypes.POINTER(ctypes.c_char)),] )

g_strrstr_len = _rpythonic_function_(		"g_strrstr_len", ctypes.POINTER(ctypes.c_char), [
	("haystack",		ctypes.POINTER(ctypes.c_char)),
	("haystack_len",		ctypes.c_long),
	("needle",		ctypes.POINTER(ctypes.c_char)),] )

g_str_has_suffix = _rpythonic_function_(		"g_str_has_suffix", ctypes.c_int, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("suffix",		ctypes.POINTER(ctypes.c_char)),] )

g_str_has_prefix = _rpythonic_function_(		"g_str_has_prefix", ctypes.c_int, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("prefix",		ctypes.POINTER(ctypes.c_char)),] )

g_strtod = _rpythonic_function_(		"g_strtod", ctypes.c_double, [
	("nptr",		ctypes.POINTER(ctypes.c_char)),
	("endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_ascii_strtod = _rpythonic_function_(		"g_ascii_strtod", ctypes.c_double, [
	("nptr",		ctypes.POINTER(ctypes.c_char)),
	("endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_ascii_strtoull = _rpythonic_function_(		"g_ascii_strtoull", ctypes.c_ulong, [
	("nptr",		ctypes.POINTER(ctypes.c_char)),
	("endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("base",		ctypes.c_uint),] )

g_ascii_strtoll = _rpythonic_function_(		"g_ascii_strtoll", ctypes.c_long, [
	("nptr",		ctypes.POINTER(ctypes.c_char)),
	("endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("base",		ctypes.c_uint),] )

g_ascii_dtostr = _rpythonic_function_(		"g_ascii_dtostr", ctypes.POINTER(ctypes.c_char), [
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("buf_len",		ctypes.c_int),
	("d",		ctypes.c_double),] )

g_ascii_formatd = _rpythonic_function_(		"g_ascii_formatd", ctypes.POINTER(ctypes.c_char), [
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("buf_len",		ctypes.c_int),
	("format",		ctypes.POINTER(ctypes.c_char)),
	("d",		ctypes.c_double),] )

g_strchug = _rpythonic_function_(		"g_strchug", ctypes.POINTER(ctypes.c_char), [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_strchomp = _rpythonic_function_(		"g_strchomp", ctypes.POINTER(ctypes.c_char), [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_ascii_strcasecmp = _rpythonic_function_(		"g_ascii_strcasecmp", ctypes.c_int, [
	("s1",		ctypes.POINTER(ctypes.c_char)),
	("s2",		ctypes.POINTER(ctypes.c_char)),] )

g_ascii_strncasecmp = _rpythonic_function_(		"g_ascii_strncasecmp", ctypes.c_int, [
	("s1",		ctypes.POINTER(ctypes.c_char)),
	("s2",		ctypes.POINTER(ctypes.c_char)),
	("n",		ctypes.c_ulong),] )

g_ascii_strdown = _rpythonic_function_(		"g_ascii_strdown", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),] )

g_ascii_strup = _rpythonic_function_(		"g_ascii_strup", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),] )

g_strcasecmp = _rpythonic_function_(		"g_strcasecmp", ctypes.c_int, [
	("s1",		ctypes.POINTER(ctypes.c_char)),
	("s2",		ctypes.POINTER(ctypes.c_char)),] )

g_strncasecmp = _rpythonic_function_(		"g_strncasecmp", ctypes.c_int, [
	("s1",		ctypes.POINTER(ctypes.c_char)),
	("s2",		ctypes.POINTER(ctypes.c_char)),
	("n",		ctypes.c_uint),] )

g_strdown = _rpythonic_function_(		"g_strdown", ctypes.POINTER(ctypes.c_char), [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_strup = _rpythonic_function_(		"g_strup", ctypes.POINTER(ctypes.c_char), [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_strdup = _rpythonic_function_(		"g_strdup", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

g_strdup_vprintf = _rpythonic_function_(		"g_strdup_vprintf", ctypes.POINTER(ctypes.c_char), [
	("format",		ctypes.POINTER(ctypes.c_char)),
	("args",		ctypes.c_char),] )

g_strndup = _rpythonic_function_(		"g_strndup", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("n",		ctypes.c_ulong),] )

g_strnfill = _rpythonic_function_(		"g_strnfill", ctypes.POINTER(ctypes.c_char), [
	("length",		ctypes.c_ulong),
	("fill_char",		ctypes.c_char),] )

g_strcompress = _rpythonic_function_(		"g_strcompress", ctypes.POINTER(ctypes.c_char), [
	("source",		ctypes.POINTER(ctypes.c_char)),] )

g_strescape = _rpythonic_function_(		"g_strescape", ctypes.POINTER(ctypes.c_char), [
	("source",		ctypes.POINTER(ctypes.c_char)),
	("exceptions",		ctypes.POINTER(ctypes.c_char)),] )

g_memdup = _rpythonic_function_(		"g_memdup", ctypes.POINTER(ctypes.c_void_p), [
	("mem",		ctypes.POINTER(ctypes.c_void_p)),
	("byte_size",		ctypes.c_uint),] )

g_strsplit = _rpythonic_function_(		"g_strsplit", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("delimiter",		ctypes.POINTER(ctypes.c_char)),
	("max_tokens",		ctypes.c_int),] )

g_strsplit_set = _rpythonic_function_(		"g_strsplit_set", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("delimiters",		ctypes.POINTER(ctypes.c_char)),
	("max_tokens",		ctypes.c_int),] )

g_strjoinv = _rpythonic_function_(		"g_strjoinv", ctypes.POINTER(ctypes.c_char), [
	("separator",		ctypes.POINTER(ctypes.c_char)),
	("str_array",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_strfreev = _rpythonic_function_(		"g_strfreev", ctypes.c_void_p, [
	("str_array",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_strdupv = _rpythonic_function_(		"g_strdupv", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("str_array",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_strv_length = _rpythonic_function_(		"g_strv_length", ctypes.c_uint, [
	("str_array",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_stpcpy = _rpythonic_function_(		"g_stpcpy", ctypes.POINTER(ctypes.c_char), [
	("dest",		ctypes.POINTER(ctypes.c_char)),
	("src",		ctypes.POINTER(ctypes.c_char)),] )

g_string_chunk_new = _rpythonic_function_(		"g_string_chunk_new", ctypes.POINTER(_GStringChunk), [
	("size",		ctypes.c_ulong),] )

g_string_chunk_free = _rpythonic_function_(		"g_string_chunk_free", ctypes.c_void_p, [
	("chunk",		ctypes.POINTER(_GStringChunk)),] )

g_string_chunk_clear = _rpythonic_function_(		"g_string_chunk_clear", ctypes.c_void_p, [
	("chunk",		ctypes.POINTER(_GStringChunk)),] )

g_string_chunk_insert = _rpythonic_function_(		"g_string_chunk_insert", ctypes.POINTER(ctypes.c_char), [
	("chunk",		ctypes.POINTER(_GStringChunk)),
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_string_chunk_insert_len = _rpythonic_function_(		"g_string_chunk_insert_len", ctypes.POINTER(ctypes.c_char), [
	("chunk",		ctypes.POINTER(_GStringChunk)),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_long),] )

g_string_chunk_insert_const = _rpythonic_function_(		"g_string_chunk_insert_const", ctypes.POINTER(ctypes.c_char), [
	("chunk",		ctypes.POINTER(_GStringChunk)),
	("string",		ctypes.POINTER(ctypes.c_char)),] )

GTestFunc = _rpythonic_function_(		"GTestFunc", ctypes.c_void_p, [] )

GTestDataFunc = _rpythonic_function_(		"GTestDataFunc", ctypes.c_void_p, [("user_data",		ctypes.c_void_p)] )

GTestFixtureFunc = _rpythonic_function_(		"GTestFixtureFunc", ctypes.c_void_p, [
	("fixture",		ctypes.POINTER(ctypes.c_void_p)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_strcmp0 = _rpythonic_function_(		"g_strcmp0", ctypes.c_int, [
	("str1",		ctypes.POINTER(ctypes.c_char)),
	("str2",		ctypes.POINTER(ctypes.c_char)),] )

g_test_run = _rpythonic_function_(		"g_test_run", ctypes.c_int, [] )

g_test_add_func = _rpythonic_function_(		"g_test_add_func", ctypes.c_void_p, [
	("testpath",		ctypes.POINTER(ctypes.c_char)),
	("test_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_test_add_data_func = _rpythonic_function_(		"g_test_add_data_func", ctypes.c_void_p, [
	("testpath",		ctypes.POINTER(ctypes.c_char)),
	("test_data",		ctypes.POINTER(ctypes.c_void_p)),
	("test_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_test_fail = _rpythonic_function_(		"g_test_fail", ctypes.c_void_p, [] )

g_test_bug_base = _rpythonic_function_(		"g_test_bug_base", ctypes.c_void_p, [
	("uri_pattern",		ctypes.POINTER(ctypes.c_char)),] )

g_test_bug = _rpythonic_function_(		"g_test_bug", ctypes.c_void_p, [
	("bug_uri_snippet",		ctypes.POINTER(ctypes.c_char)),] )

g_test_timer_start = _rpythonic_function_(		"g_test_timer_start", ctypes.c_void_p, [] )

g_test_timer_elapsed = _rpythonic_function_(		"g_test_timer_elapsed", ctypes.c_double, [] )

g_test_timer_last = _rpythonic_function_(		"g_test_timer_last", ctypes.c_double, [] )

g_test_queue_free = _rpythonic_function_(		"g_test_queue_free", ctypes.c_void_p, [("gfree_pointer",		ctypes.c_void_p)] )

g_test_queue_destroy = _rpythonic_function_(		"g_test_queue_destroy", ctypes.c_void_p, [
	("destroy_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("destroy_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_test_trap_fork = _rpythonic_function_(		"g_test_trap_fork", ctypes.c_int, [
	("usec_timeout",		ctypes.c_ulong),
	("test_trap_flags",		ctypes.c_int),] )

g_test_trap_has_passed = _rpythonic_function_(		"g_test_trap_has_passed", ctypes.c_int, [] )

g_test_trap_reached_timeout = _rpythonic_function_(		"g_test_trap_reached_timeout", ctypes.c_int, [] )

g_test_rand_int = _rpythonic_function_(		"g_test_rand_int", ctypes.c_int, [] )

g_test_rand_int_range = _rpythonic_function_(		"g_test_rand_int_range", ctypes.c_int, [
	("begin",		ctypes.c_int),
	("end",		ctypes.c_int),] )

g_test_rand_double = _rpythonic_function_(		"g_test_rand_double", ctypes.c_double, [] )

g_test_rand_double_range = _rpythonic_function_(		"g_test_rand_double_range", ctypes.c_double, [
	("range_start",		ctypes.c_double),
	("range_end",		ctypes.c_double),] )

g_test_create_case = _rpythonic_function_(		"g_test_create_case", ctypes.POINTER(GTestCase), [
	("test_name",		ctypes.POINTER(ctypes.c_char)),
	("data_size",		ctypes.c_ulong),
	("test_data",		ctypes.POINTER(ctypes.c_void_p)),
	("data_setup",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("data_test",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("data_teardown",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_test_create_suite = _rpythonic_function_(		"g_test_create_suite", ctypes.POINTER(GTestSuite), [
	("suite_name",		ctypes.POINTER(ctypes.c_char)),] )

g_test_get_root = _rpythonic_function_(		"g_test_get_root", ctypes.POINTER(GTestSuite), [] )

g_test_suite_add = _rpythonic_function_(		"g_test_suite_add", ctypes.c_void_p, [
	("suite",		ctypes.POINTER(GTestSuite)),
	("test_case",		ctypes.POINTER(GTestCase)),] )

g_test_suite_add_suite = _rpythonic_function_(		"g_test_suite_add_suite", ctypes.c_void_p, [
	("suite",		ctypes.POINTER(GTestSuite)),
	("nestedsuite",		ctypes.POINTER(GTestSuite)),] )

g_test_run_suite = _rpythonic_function_(		"g_test_run_suite", ctypes.c_int, [
	("suite",		ctypes.POINTER(GTestSuite)),] )

g_test_trap_assertions = _rpythonic_function_(		"g_test_trap_assertions", ctypes.c_void_p, [
	("domain",		ctypes.POINTER(ctypes.c_char)),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("func",		ctypes.POINTER(ctypes.c_char)),
	("assertion_flags",		ctypes.c_ulong),
	("pattern",		ctypes.POINTER(ctypes.c_char)),] )

g_assertion_message = _rpythonic_function_(		"g_assertion_message", ctypes.c_void_p, [
	("domain",		ctypes.POINTER(ctypes.c_char)),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("func",		ctypes.POINTER(ctypes.c_char)),
	("message",		ctypes.POINTER(ctypes.c_char)),] )

g_assertion_message_expr = _rpythonic_function_(		"g_assertion_message_expr", ctypes.c_void_p, [
	("domain",		ctypes.POINTER(ctypes.c_char)),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("func",		ctypes.POINTER(ctypes.c_char)),
	("expr",		ctypes.POINTER(ctypes.c_char)),] )

g_assertion_message_cmpstr = _rpythonic_function_(		"g_assertion_message_cmpstr", ctypes.c_void_p, [
	("domain",		ctypes.POINTER(ctypes.c_char)),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("func",		ctypes.POINTER(ctypes.c_char)),
	("expr",		ctypes.POINTER(ctypes.c_char)),
	("arg1",		ctypes.POINTER(ctypes.c_char)),
	("cmp",		ctypes.POINTER(ctypes.c_char)),
	("arg2",		ctypes.POINTER(ctypes.c_char)),] )

g_assertion_message_cmpnum = _rpythonic_function_(		"g_assertion_message_cmpnum", ctypes.c_void_p, [
	("domain",		ctypes.POINTER(ctypes.c_char)),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("func",		ctypes.POINTER(ctypes.c_char)),
	("expr",		ctypes.POINTER(ctypes.c_char)),
	("arg1",		ctypes.c_double),
	("cmp",		ctypes.POINTER(ctypes.c_char)),
	("arg2",		ctypes.c_double),
	("numtype",		ctypes.c_char),] )

g_assertion_message_error = _rpythonic_function_(		"g_assertion_message_error", ctypes.c_void_p, [
	("domain",		ctypes.POINTER(ctypes.c_char)),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("line",		ctypes.c_int),
	("func",		ctypes.POINTER(ctypes.c_char)),
	("expr",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(_GError)),
	("error_domain",		ctypes.c_uint),
	("error_code",		ctypes.c_int),] )

g_test_add_vtable = _rpythonic_function_(		"g_test_add_vtable", ctypes.c_void_p, [
	("testpath",		ctypes.POINTER(ctypes.c_char)),
	("data_size",		ctypes.c_ulong),
	("test_data",		ctypes.POINTER(ctypes.c_void_p)),
	("data_setup",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("data_test",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("data_teardown",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_test_log_type_name = _rpythonic_function_(		"g_test_log_type_name", ctypes.POINTER(ctypes.c_char), [
	("log_type",		ctypes.c_int),] )

g_test_log_buffer_new = _rpythonic_function_(		"g_test_log_buffer_new", ctypes.POINTER(GTestLogBuffer), [] )

g_test_log_buffer_free = _rpythonic_function_(		"g_test_log_buffer_free", ctypes.c_void_p, [
	("tbuffer",		ctypes.POINTER(GTestLogBuffer)),] )

g_test_log_buffer_push = _rpythonic_function_(		"g_test_log_buffer_push", ctypes.c_void_p, [
	("tbuffer",		ctypes.POINTER(GTestLogBuffer)),
	("n_bytes",		ctypes.c_uint),
	("bytes",		ctypes.POINTER(ctypes.c_ubyte)),] )

g_test_log_buffer_pop = _rpythonic_function_(		"g_test_log_buffer_pop", ctypes.POINTER(GTestLogMsg), [
	("tbuffer",		ctypes.POINTER(GTestLogBuffer)),] )

g_test_log_msg_free = _rpythonic_function_(		"g_test_log_msg_free", ctypes.c_void_p, [
	("tmsg",		ctypes.POINTER(GTestLogMsg)),] )

GTestLogFatalFunc = _rpythonic_function_(		"GTestLogFatalFunc", ctypes.c_int, [
	("log_domain",		ctypes.POINTER(ctypes.c_char)),
	("log_level",		ctypes.c_int),
	("message",		ctypes.POINTER(ctypes.c_char)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_test_log_set_fatal_handler = _rpythonic_function_(		"g_test_log_set_fatal_handler", ctypes.c_void_p, [
	("log_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_char),ctypes.c_int,ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_thread_pool_new = _rpythonic_function_(		"g_thread_pool_new", ctypes.POINTER(_GThreadPool), [
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("max_threads",		ctypes.c_int),
	("exclusive",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_thread_pool_free = _rpythonic_function_(		"g_thread_pool_free", ctypes.c_void_p, [
	("pool",		ctypes.POINTER(_GThreadPool)),
	("immediate",		ctypes.c_int),
	("wait_",		ctypes.c_int),] )

g_thread_pool_push = _rpythonic_function_(		"g_thread_pool_push", ctypes.c_int, [
	("pool",		ctypes.POINTER(_GThreadPool)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_thread_pool_unprocessed = _rpythonic_function_(		"g_thread_pool_unprocessed", ctypes.c_uint, [
	("pool",		ctypes.POINTER(_GThreadPool)),] )

g_thread_pool_set_sort_function = _rpythonic_function_(		"g_thread_pool_set_sort_function", ctypes.c_void_p, [
	("pool",		ctypes.POINTER(_GThreadPool)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_thread_pool_set_max_threads = _rpythonic_function_(		"g_thread_pool_set_max_threads", ctypes.c_int, [
	("pool",		ctypes.POINTER(_GThreadPool)),
	("max_threads",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_thread_pool_get_max_threads = _rpythonic_function_(		"g_thread_pool_get_max_threads", ctypes.c_int, [
	("pool",		ctypes.POINTER(_GThreadPool)),] )

g_thread_pool_get_num_threads = _rpythonic_function_(		"g_thread_pool_get_num_threads", ctypes.c_uint, [
	("pool",		ctypes.POINTER(_GThreadPool)),] )

g_thread_pool_set_max_unused_threads = _rpythonic_function_(		"g_thread_pool_set_max_unused_threads", ctypes.c_void_p, [
	("max_threads",		ctypes.c_int),] )

g_thread_pool_get_max_unused_threads = _rpythonic_function_(		"g_thread_pool_get_max_unused_threads", ctypes.c_int, [] )

g_thread_pool_get_num_unused_threads = _rpythonic_function_(		"g_thread_pool_get_num_unused_threads", ctypes.c_uint, [] )

g_thread_pool_stop_unused_threads = _rpythonic_function_(		"g_thread_pool_stop_unused_threads", ctypes.c_void_p, [] )

g_thread_pool_set_max_idle_time = _rpythonic_function_(		"g_thread_pool_set_max_idle_time", ctypes.c_void_p, [
	("interval",		ctypes.c_uint),] )

g_thread_pool_get_max_idle_time = _rpythonic_function_(		"g_thread_pool_get_max_idle_time", ctypes.c_uint, [] )

g_timer_new = _rpythonic_function_(		"g_timer_new", ctypes.POINTER(_GTimer), [] )

g_timer_destroy = _rpythonic_function_(		"g_timer_destroy", ctypes.c_void_p, [
	("timer",		ctypes.POINTER(_GTimer)),] )

g_timer_start = _rpythonic_function_(		"g_timer_start", ctypes.c_void_p, [
	("timer",		ctypes.POINTER(_GTimer)),] )

g_timer_stop = _rpythonic_function_(		"g_timer_stop", ctypes.c_void_p, [
	("timer",		ctypes.POINTER(_GTimer)),] )

g_timer_reset = _rpythonic_function_(		"g_timer_reset", ctypes.c_void_p, [
	("timer",		ctypes.POINTER(_GTimer)),] )

g_timer_continue = _rpythonic_function_(		"g_timer_continue", ctypes.c_void_p, [
	("timer",		ctypes.POINTER(_GTimer)),] )

g_timer_elapsed = _rpythonic_function_(		"g_timer_elapsed", ctypes.c_double, [
	("timer",		ctypes.POINTER(_GTimer)),
	("microseconds",		ctypes.POINTER(ctypes.c_ulong)),] )

g_usleep = _rpythonic_function_(		"g_usleep", ctypes.c_void_p, [
	("microseconds",		ctypes.c_ulong),] )

g_time_val_add = _rpythonic_function_(		"g_time_val_add", ctypes.c_void_p, [
	("time_",		ctypes.POINTER(_GTimeVal)),
	("microseconds",		ctypes.c_long),] )

g_time_val_from_iso8601 = _rpythonic_function_(		"g_time_val_from_iso8601", ctypes.c_int, [
	("iso_date",		ctypes.POINTER(ctypes.c_char)),
	("time_",		ctypes.POINTER(_GTimeVal)),] )

g_time_val_to_iso8601 = _rpythonic_function_(		"g_time_val_to_iso8601", ctypes.POINTER(ctypes.c_char), [
	("time_",		ctypes.POINTER(_GTimeVal)),] )

g_trash_stack_push = _rpythonic_function_(		"g_trash_stack_push", ctypes.c_void_p, [
	("stack_p",		ctypes.POINTER(ctypes.POINTER(_GTrashStack))),
	("data_p",		ctypes.POINTER(ctypes.c_void_p)),] )

g_trash_stack_pop = _rpythonic_function_(		"g_trash_stack_pop", ctypes.POINTER(ctypes.c_void_p), [
	("stack_p",		ctypes.POINTER(ctypes.POINTER(_GTrashStack))),] )

g_trash_stack_peek = _rpythonic_function_(		"g_trash_stack_peek", ctypes.POINTER(ctypes.c_void_p), [
	("stack_p",		ctypes.POINTER(ctypes.POINTER(_GTrashStack))),] )

g_trash_stack_height = _rpythonic_function_(		"g_trash_stack_height", ctypes.c_uint, [
	("stack_p",		ctypes.POINTER(ctypes.POINTER(_GTrashStack))),] )

GTraverseFunc = _rpythonic_function_(		"GTraverseFunc", ctypes.c_int, [
	("key",		ctypes.POINTER(ctypes.c_void_p)),
	("value",		ctypes.POINTER(ctypes.c_void_p)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_tree_new = _rpythonic_function_(		"g_tree_new", ctypes.POINTER(_GTree), [
	("key_compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_tree_new_with_data = _rpythonic_function_(		"g_tree_new_with_data", ctypes.POINTER(_GTree), [
	("key_compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("key_compare_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_tree_new_full = _rpythonic_function_(		"g_tree_new_full", ctypes.POINTER(_GTree), [
	("key_compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("key_compare_data",		ctypes.POINTER(ctypes.c_void_p)),
	("key_destroy_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("value_destroy_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_tree_ref = _rpythonic_function_(		"g_tree_ref", ctypes.POINTER(_GTree), [
	("tree",		ctypes.POINTER(_GTree)),] )

g_tree_unref = _rpythonic_function_(		"g_tree_unref", ctypes.c_void_p, [
	("tree",		ctypes.POINTER(_GTree)),] )

g_tree_destroy = _rpythonic_function_(		"g_tree_destroy", ctypes.c_void_p, [
	("tree",		ctypes.POINTER(_GTree)),] )

g_tree_insert = _rpythonic_function_(		"g_tree_insert", ctypes.c_void_p, [
	("tree",		ctypes.POINTER(_GTree)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),
	("value",		ctypes.POINTER(ctypes.c_void_p)),] )

g_tree_replace = _rpythonic_function_(		"g_tree_replace", ctypes.c_void_p, [
	("tree",		ctypes.POINTER(_GTree)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),
	("value",		ctypes.POINTER(ctypes.c_void_p)),] )

g_tree_remove = _rpythonic_function_(		"g_tree_remove", ctypes.c_int, [
	("tree",		ctypes.POINTER(_GTree)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),] )

g_tree_steal = _rpythonic_function_(		"g_tree_steal", ctypes.c_int, [
	("tree",		ctypes.POINTER(_GTree)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),] )

g_tree_lookup = _rpythonic_function_(		"g_tree_lookup", ctypes.POINTER(ctypes.c_void_p), [
	("tree",		ctypes.POINTER(_GTree)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),] )

g_tree_lookup_extended = _rpythonic_function_(		"g_tree_lookup_extended", ctypes.c_int, [
	("tree",		ctypes.POINTER(_GTree)),
	("lookup_key",		ctypes.POINTER(ctypes.c_void_p)),
	("orig_key",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("value",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

g_tree_foreach = _rpythonic_function_(		"g_tree_foreach", ctypes.c_void_p, [
	("tree",		ctypes.POINTER(_GTree)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_tree_traverse = _rpythonic_function_(		"g_tree_traverse", ctypes.c_void_p, [
	("tree",		ctypes.POINTER(_GTree)),
	("traverse_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("traverse_type",		ctypes.c_int),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_tree_search = _rpythonic_function_(		"g_tree_search", ctypes.POINTER(ctypes.c_void_p), [
	("tree",		ctypes.POINTER(_GTree)),
	("search_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_tree_height = _rpythonic_function_(		"g_tree_height", ctypes.c_int, [
	("tree",		ctypes.POINTER(_GTree)),] )

g_tree_nnodes = _rpythonic_function_(		"g_tree_nnodes", ctypes.c_int, [
	("tree",		ctypes.POINTER(_GTree)),] )

g_uri_unescape_string = _rpythonic_function_(		"g_uri_unescape_string", ctypes.POINTER(ctypes.c_char), [
	("escaped_string",		ctypes.POINTER(ctypes.c_char)),
	("illegal_characters",		ctypes.POINTER(ctypes.c_char)),] )

g_uri_unescape_segment = _rpythonic_function_(		"g_uri_unescape_segment", ctypes.POINTER(ctypes.c_char), [
	("escaped_string",		ctypes.POINTER(ctypes.c_char)),
	("escaped_string_end",		ctypes.POINTER(ctypes.c_char)),
	("illegal_characters",		ctypes.POINTER(ctypes.c_char)),] )

g_uri_parse_scheme = _rpythonic_function_(		"g_uri_parse_scheme", ctypes.POINTER(ctypes.c_char), [
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

g_uri_escape_string = _rpythonic_function_(		"g_uri_escape_string", ctypes.POINTER(ctypes.c_char), [
	("unescaped",		ctypes.POINTER(ctypes.c_char)),
	("reserved_chars_allowed",		ctypes.POINTER(ctypes.c_char)),
	("allow_utf8",		ctypes.c_int),] )

g_variant_type_string_is_valid = _rpythonic_function_(		"g_variant_type_string_is_valid", ctypes.c_int, [
	("type_string",		ctypes.POINTER(ctypes.c_char)),] )

g_variant_type_string_scan = _rpythonic_function_(		"g_variant_type_string_scan", ctypes.c_int, [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("limit",		ctypes.POINTER(ctypes.c_char)),
	("endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_variant_type_free = _rpythonic_function_(		"g_variant_type_free", ctypes.c_void_p, [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_copy = _rpythonic_function_(		"g_variant_type_copy", ctypes.POINTER(_GVariantType), [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_new = _rpythonic_function_(		"g_variant_type_new", ctypes.POINTER(_GVariantType), [
	("type_string",		ctypes.POINTER(ctypes.c_char)),] )

g_variant_type_get_string_length = _rpythonic_function_(		"g_variant_type_get_string_length", ctypes.c_ulong, [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_peek_string = _rpythonic_function_(		"g_variant_type_peek_string", ctypes.POINTER(ctypes.c_char), [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_dup_string = _rpythonic_function_(		"g_variant_type_dup_string", ctypes.POINTER(ctypes.c_char), [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_is_definite = _rpythonic_function_(		"g_variant_type_is_definite", ctypes.c_int, [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_is_container = _rpythonic_function_(		"g_variant_type_is_container", ctypes.c_int, [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_is_basic = _rpythonic_function_(		"g_variant_type_is_basic", ctypes.c_int, [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_is_maybe = _rpythonic_function_(		"g_variant_type_is_maybe", ctypes.c_int, [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_is_array = _rpythonic_function_(		"g_variant_type_is_array", ctypes.c_int, [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_is_tuple = _rpythonic_function_(		"g_variant_type_is_tuple", ctypes.c_int, [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_is_dict_entry = _rpythonic_function_(		"g_variant_type_is_dict_entry", ctypes.c_int, [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_is_variant = _rpythonic_function_(		"g_variant_type_is_variant", ctypes.c_int, [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_hash = _rpythonic_function_(		"g_variant_type_hash", ctypes.c_uint, [("C_type",		ctypes.c_void_p)] )

g_variant_type_equal = _rpythonic_function_(		"g_variant_type_equal", ctypes.c_int, [
	("type1",		ctypes.POINTER(ctypes.c_void_p)),
	("type2",		ctypes.POINTER(ctypes.c_void_p)),] )

g_variant_type_is_subtype_of = _rpythonic_function_(		"g_variant_type_is_subtype_of", ctypes.c_int, [
	("C_type",		ctypes.POINTER(_GVariantType)),
	("supertype",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_element = _rpythonic_function_(		"g_variant_type_element", ctypes.POINTER(_GVariantType), [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_first = _rpythonic_function_(		"g_variant_type_first", ctypes.POINTER(_GVariantType), [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_next = _rpythonic_function_(		"g_variant_type_next", ctypes.POINTER(_GVariantType), [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_n_items = _rpythonic_function_(		"g_variant_type_n_items", ctypes.c_ulong, [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_key = _rpythonic_function_(		"g_variant_type_key", ctypes.POINTER(_GVariantType), [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_value = _rpythonic_function_(		"g_variant_type_value", ctypes.POINTER(_GVariantType), [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_new_array = _rpythonic_function_(		"g_variant_type_new_array", ctypes.POINTER(_GVariantType), [
	("element",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_new_maybe = _rpythonic_function_(		"g_variant_type_new_maybe", ctypes.POINTER(_GVariantType), [
	("element",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_new_tuple = _rpythonic_function_(		"g_variant_type_new_tuple", ctypes.POINTER(_GVariantType), [
	("items",		ctypes.POINTER(ctypes.POINTER(_GVariantType))),
	("length",		ctypes.c_int),] )

g_variant_type_new_dict_entry = _rpythonic_function_(		"g_variant_type_new_dict_entry", ctypes.POINTER(_GVariantType), [
	("key",		ctypes.POINTER(_GVariantType)),
	("value",		ctypes.POINTER(_GVariantType)),] )

g_variant_type_checked_ = _rpythonic_function_(		"g_variant_type_checked_", ctypes.POINTER(_GVariantType), [
	("none",		ctypes.POINTER(ctypes.c_char)),] )

g_variant_unref = _rpythonic_function_(		"g_variant_unref", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_ref = _rpythonic_function_(		"g_variant_ref", ctypes.POINTER(_GVariant), [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_ref_sink = _rpythonic_function_(		"g_variant_ref_sink", ctypes.POINTER(_GVariant), [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_is_floating = _rpythonic_function_(		"g_variant_is_floating", ctypes.c_int, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_take_ref = _rpythonic_function_(		"g_variant_take_ref", ctypes.POINTER(_GVariant), [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_type = _rpythonic_function_(		"g_variant_get_type", ctypes.POINTER(_GVariantType), [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_type_string = _rpythonic_function_(		"g_variant_get_type_string", ctypes.POINTER(ctypes.c_char), [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_is_of_type = _rpythonic_function_(		"g_variant_is_of_type", ctypes.c_int, [
	("value",		ctypes.POINTER(_GVariant)),
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_is_container = _rpythonic_function_(		"g_variant_is_container", ctypes.c_int, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_classify = _rpythonic_function_(		"g_variant_classify", ctypes.c_int, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_new_boolean = _rpythonic_function_(		"g_variant_new_boolean", ctypes.POINTER(_GVariant), [
	("value",		ctypes.c_int),] )

g_variant_new_byte = _rpythonic_function_(		"g_variant_new_byte", ctypes.POINTER(_GVariant), [
	("value",		ctypes.c_ubyte),] )

g_variant_new_int16 = _rpythonic_function_(		"g_variant_new_int16", ctypes.POINTER(_GVariant), [
	("value",		ctypes.c_short),] )

g_variant_new_uint16 = _rpythonic_function_(		"g_variant_new_uint16", ctypes.POINTER(_GVariant), [
	("value",		ctypes.c_ushort),] )

g_variant_new_int32 = _rpythonic_function_(		"g_variant_new_int32", ctypes.POINTER(_GVariant), [
	("value",		ctypes.c_int),] )

g_variant_new_uint32 = _rpythonic_function_(		"g_variant_new_uint32", ctypes.POINTER(_GVariant), [
	("value",		ctypes.c_uint),] )

g_variant_new_int64 = _rpythonic_function_(		"g_variant_new_int64", ctypes.POINTER(_GVariant), [
	("value",		ctypes.c_long),] )

g_variant_new_uint64 = _rpythonic_function_(		"g_variant_new_uint64", ctypes.POINTER(_GVariant), [
	("value",		ctypes.c_ulong),] )

g_variant_new_handle = _rpythonic_function_(		"g_variant_new_handle", ctypes.POINTER(_GVariant), [
	("value",		ctypes.c_int),] )

g_variant_new_double = _rpythonic_function_(		"g_variant_new_double", ctypes.POINTER(_GVariant), [
	("value",		ctypes.c_double),] )

g_variant_new_string = _rpythonic_function_(		"g_variant_new_string", ctypes.POINTER(_GVariant), [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_variant_new_object_path = _rpythonic_function_(		"g_variant_new_object_path", ctypes.POINTER(_GVariant), [
	("object_path",		ctypes.POINTER(ctypes.c_char)),] )

g_variant_is_object_path = _rpythonic_function_(		"g_variant_is_object_path", ctypes.c_int, [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_variant_new_signature = _rpythonic_function_(		"g_variant_new_signature", ctypes.POINTER(_GVariant), [
	("signature",		ctypes.POINTER(ctypes.c_char)),] )

g_variant_is_signature = _rpythonic_function_(		"g_variant_is_signature", ctypes.c_int, [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_variant_new_variant = _rpythonic_function_(		"g_variant_new_variant", ctypes.POINTER(_GVariant), [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_new_strv = _rpythonic_function_(		"g_variant_new_strv", ctypes.POINTER(_GVariant), [
	("strv",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("length",		ctypes.c_long),] )

g_variant_new_objv = _rpythonic_function_(		"g_variant_new_objv", ctypes.POINTER(_GVariant), [
	("strv",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("length",		ctypes.c_long),] )

g_variant_new_bytestring = _rpythonic_function_(		"g_variant_new_bytestring", ctypes.POINTER(_GVariant), [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_variant_new_bytestring_array = _rpythonic_function_(		"g_variant_new_bytestring_array", ctypes.POINTER(_GVariant), [
	("strv",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("length",		ctypes.c_long),] )

g_variant_new_fixed_array = _rpythonic_function_(		"g_variant_new_fixed_array", ctypes.POINTER(_GVariant), [
	("element_type",		ctypes.POINTER(_GVariantType)),
	("elements",		ctypes.POINTER(ctypes.c_void_p)),
	("n_elements",		ctypes.c_ulong),
	("element_size",		ctypes.c_ulong),] )

g_variant_get_boolean = _rpythonic_function_(		"g_variant_get_boolean", ctypes.c_int, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_byte = _rpythonic_function_(		"g_variant_get_byte", ctypes.c_ubyte, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_int16 = _rpythonic_function_(		"g_variant_get_int16", ctypes.c_short, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_uint16 = _rpythonic_function_(		"g_variant_get_uint16", ctypes.c_ushort, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_int32 = _rpythonic_function_(		"g_variant_get_int32", ctypes.c_int, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_uint32 = _rpythonic_function_(		"g_variant_get_uint32", ctypes.c_uint, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_int64 = _rpythonic_function_(		"g_variant_get_int64", ctypes.c_long, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_uint64 = _rpythonic_function_(		"g_variant_get_uint64", ctypes.c_ulong, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_handle = _rpythonic_function_(		"g_variant_get_handle", ctypes.c_int, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_double = _rpythonic_function_(		"g_variant_get_double", ctypes.c_double, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_variant = _rpythonic_function_(		"g_variant_get_variant", ctypes.POINTER(_GVariant), [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_string = _rpythonic_function_(		"g_variant_get_string", ctypes.POINTER(ctypes.c_char), [
	("value",		ctypes.POINTER(_GVariant)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),] )

g_variant_dup_string = _rpythonic_function_(		"g_variant_dup_string", ctypes.POINTER(ctypes.c_char), [
	("value",		ctypes.POINTER(_GVariant)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),] )

g_variant_get_strv = _rpythonic_function_(		"g_variant_get_strv", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("value",		ctypes.POINTER(_GVariant)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),] )

g_variant_dup_strv = _rpythonic_function_(		"g_variant_dup_strv", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("value",		ctypes.POINTER(_GVariant)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),] )

g_variant_get_objv = _rpythonic_function_(		"g_variant_get_objv", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("value",		ctypes.POINTER(_GVariant)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),] )

g_variant_dup_objv = _rpythonic_function_(		"g_variant_dup_objv", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("value",		ctypes.POINTER(_GVariant)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),] )

g_variant_get_bytestring = _rpythonic_function_(		"g_variant_get_bytestring", ctypes.POINTER(ctypes.c_char), [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_dup_bytestring = _rpythonic_function_(		"g_variant_dup_bytestring", ctypes.POINTER(ctypes.c_char), [
	("value",		ctypes.POINTER(_GVariant)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),] )

g_variant_get_bytestring_array = _rpythonic_function_(		"g_variant_get_bytestring_array", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("value",		ctypes.POINTER(_GVariant)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),] )

g_variant_dup_bytestring_array = _rpythonic_function_(		"g_variant_dup_bytestring_array", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("value",		ctypes.POINTER(_GVariant)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),] )

g_variant_new_maybe = _rpythonic_function_(		"g_variant_new_maybe", ctypes.POINTER(_GVariant), [
	("child_type",		ctypes.POINTER(_GVariantType)),
	("child",		ctypes.POINTER(_GVariant)),] )

g_variant_new_array = _rpythonic_function_(		"g_variant_new_array", ctypes.POINTER(_GVariant), [
	("child_type",		ctypes.POINTER(_GVariantType)),
	("children",		ctypes.POINTER(ctypes.POINTER(_GVariant))),
	("n_children",		ctypes.c_ulong),] )

g_variant_new_tuple = _rpythonic_function_(		"g_variant_new_tuple", ctypes.POINTER(_GVariant), [
	("children",		ctypes.POINTER(ctypes.POINTER(_GVariant))),
	("n_children",		ctypes.c_ulong),] )

g_variant_new_dict_entry = _rpythonic_function_(		"g_variant_new_dict_entry", ctypes.POINTER(_GVariant), [
	("key",		ctypes.POINTER(_GVariant)),
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_maybe = _rpythonic_function_(		"g_variant_get_maybe", ctypes.POINTER(_GVariant), [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_n_children = _rpythonic_function_(		"g_variant_n_children", ctypes.c_ulong, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_child_value = _rpythonic_function_(		"g_variant_get_child_value", ctypes.POINTER(_GVariant), [
	("value",		ctypes.POINTER(_GVariant)),
	("index_",		ctypes.c_ulong),] )

g_variant_lookup_value = _rpythonic_function_(		"g_variant_lookup_value", ctypes.POINTER(_GVariant), [
	("dictionary",		ctypes.POINTER(_GVariant)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("expected_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_get_fixed_array = _rpythonic_function_(		"g_variant_get_fixed_array", ctypes.POINTER(ctypes.c_void_p), [
	("value",		ctypes.POINTER(_GVariant)),
	("n_elements",		ctypes.POINTER(ctypes.c_ulong)),
	("element_size",		ctypes.c_ulong),] )

g_variant_get_size = _rpythonic_function_(		"g_variant_get_size", ctypes.c_ulong, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_get_data = _rpythonic_function_(		"g_variant_get_data", ctypes.POINTER(ctypes.c_void_p), [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_store = _rpythonic_function_(		"g_variant_store", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GVariant)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_variant_print = _rpythonic_function_(		"g_variant_print", ctypes.POINTER(ctypes.c_char), [
	("value",		ctypes.POINTER(_GVariant)),
	("type_annotate",		ctypes.c_int),] )

g_variant_print_string = _rpythonic_function_(		"g_variant_print_string", ctypes.POINTER(_GString), [
	("value",		ctypes.POINTER(_GVariant)),
	("string",		ctypes.POINTER(_GString)),
	("type_annotate",		ctypes.c_int),] )

g_variant_hash = _rpythonic_function_(		"g_variant_hash", ctypes.c_uint, [("value",		ctypes.c_void_p)] )

g_variant_equal = _rpythonic_function_(		"g_variant_equal", ctypes.c_int, [
	("one",		ctypes.POINTER(ctypes.c_void_p)),
	("two",		ctypes.POINTER(ctypes.c_void_p)),] )

g_variant_get_normal_form = _rpythonic_function_(		"g_variant_get_normal_form", ctypes.POINTER(_GVariant), [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_is_normal_form = _rpythonic_function_(		"g_variant_is_normal_form", ctypes.c_int, [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_byteswap = _rpythonic_function_(		"g_variant_byteswap", ctypes.POINTER(_GVariant), [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_new_from_data = _rpythonic_function_(		"g_variant_new_from_data", ctypes.POINTER(_GVariant), [
	("C_type",		ctypes.POINTER(_GVariantType)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.c_ulong),
	("trusted",		ctypes.c_int),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_variant_iter_new = _rpythonic_function_(		"g_variant_iter_new", ctypes.POINTER(_GVariantIter), [
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_iter_init = _rpythonic_function_(		"g_variant_iter_init", ctypes.c_ulong, [
	("iter",		ctypes.POINTER(_GVariantIter)),
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_iter_copy = _rpythonic_function_(		"g_variant_iter_copy", ctypes.POINTER(_GVariantIter), [
	("iter",		ctypes.POINTER(_GVariantIter)),] )

g_variant_iter_n_children = _rpythonic_function_(		"g_variant_iter_n_children", ctypes.c_ulong, [
	("iter",		ctypes.POINTER(_GVariantIter)),] )

g_variant_iter_free = _rpythonic_function_(		"g_variant_iter_free", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(_GVariantIter)),] )

g_variant_iter_next_value = _rpythonic_function_(		"g_variant_iter_next_value", ctypes.POINTER(_GVariant), [
	("iter",		ctypes.POINTER(_GVariantIter)),] )

g_variant_parser_get_error_quark = _rpythonic_function_(		"g_variant_parser_get_error_quark", ctypes.c_uint, [] )

g_variant_builder_new = _rpythonic_function_(		"g_variant_builder_new", ctypes.POINTER(_GVariantBuilder), [
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_builder_unref = _rpythonic_function_(		"g_variant_builder_unref", ctypes.c_void_p, [
	("builder",		ctypes.POINTER(_GVariantBuilder)),] )

g_variant_builder_ref = _rpythonic_function_(		"g_variant_builder_ref", ctypes.POINTER(_GVariantBuilder), [
	("builder",		ctypes.POINTER(_GVariantBuilder)),] )

g_variant_builder_init = _rpythonic_function_(		"g_variant_builder_init", ctypes.c_void_p, [
	("builder",		ctypes.POINTER(_GVariantBuilder)),
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_builder_end = _rpythonic_function_(		"g_variant_builder_end", ctypes.POINTER(_GVariant), [
	("builder",		ctypes.POINTER(_GVariantBuilder)),] )

g_variant_builder_clear = _rpythonic_function_(		"g_variant_builder_clear", ctypes.c_void_p, [
	("builder",		ctypes.POINTER(_GVariantBuilder)),] )

g_variant_builder_open = _rpythonic_function_(		"g_variant_builder_open", ctypes.c_void_p, [
	("builder",		ctypes.POINTER(_GVariantBuilder)),
	("C_type",		ctypes.POINTER(_GVariantType)),] )

g_variant_builder_close = _rpythonic_function_(		"g_variant_builder_close", ctypes.c_void_p, [
	("builder",		ctypes.POINTER(_GVariantBuilder)),] )

g_variant_builder_add_value = _rpythonic_function_(		"g_variant_builder_add_value", ctypes.c_void_p, [
	("builder",		ctypes.POINTER(_GVariantBuilder)),
	("value",		ctypes.POINTER(_GVariant)),] )

g_variant_new_va = _rpythonic_function_(		"g_variant_new_va", ctypes.POINTER(_GVariant), [
	("format_string",		ctypes.POINTER(ctypes.c_char)),
	("endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("app",		ctypes.POINTER(ctypes.c_char)),] )

g_variant_get_va = _rpythonic_function_(		"g_variant_get_va", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GVariant)),
	("format_string",		ctypes.POINTER(ctypes.c_char)),
	("endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("app",		ctypes.POINTER(ctypes.c_char)),] )

g_variant_parse = _rpythonic_function_(		"g_variant_parse", ctypes.POINTER(_GVariant), [
	("C_type",		ctypes.POINTER(_GVariantType)),
	("text",		ctypes.POINTER(ctypes.c_char)),
	("limit",		ctypes.POINTER(ctypes.c_char)),
	("endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_variant_new_parsed_va = _rpythonic_function_(		"g_variant_new_parsed_va", ctypes.POINTER(_GVariant), [
	("format",		ctypes.POINTER(ctypes.c_char)),
	("app",		ctypes.POINTER(ctypes.c_char)),] )

g_variant_compare = _rpythonic_function_(		"g_variant_compare", ctypes.c_int, [
	("one",		ctypes.POINTER(ctypes.c_void_p)),
	("two",		ctypes.POINTER(ctypes.c_void_p)),] )

glib_check_version = _rpythonic_function_(		"glib_check_version", ctypes.POINTER(ctypes.c_char), [
	("required_major",		ctypes.c_uint),
	("required_minor",		ctypes.c_uint),
	("required_micro",		ctypes.c_uint),] )

g_mem_chunk_new = _rpythonic_function_(		"g_mem_chunk_new", ctypes.POINTER(_GMemChunk), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("atom_size",		ctypes.c_int),
	("area_size",		ctypes.c_ulong),
	("C_type",		ctypes.c_int),] )

g_mem_chunk_destroy = _rpythonic_function_(		"g_mem_chunk_destroy", ctypes.c_void_p, [
	("mem_chunk",		ctypes.POINTER(_GMemChunk)),] )

g_mem_chunk_alloc = _rpythonic_function_(		"g_mem_chunk_alloc", ctypes.POINTER(ctypes.c_void_p), [
	("mem_chunk",		ctypes.POINTER(_GMemChunk)),] )

g_mem_chunk_alloc0 = _rpythonic_function_(		"g_mem_chunk_alloc0", ctypes.POINTER(ctypes.c_void_p), [
	("mem_chunk",		ctypes.POINTER(_GMemChunk)),] )

g_mem_chunk_free = _rpythonic_function_(		"g_mem_chunk_free", ctypes.c_void_p, [
	("mem_chunk",		ctypes.POINTER(_GMemChunk)),
	("mem",		ctypes.POINTER(ctypes.c_void_p)),] )

g_mem_chunk_clean = _rpythonic_function_(		"g_mem_chunk_clean", ctypes.c_void_p, [
	("mem_chunk",		ctypes.POINTER(_GMemChunk)),] )

g_mem_chunk_reset = _rpythonic_function_(		"g_mem_chunk_reset", ctypes.c_void_p, [
	("mem_chunk",		ctypes.POINTER(_GMemChunk)),] )

g_mem_chunk_print = _rpythonic_function_(		"g_mem_chunk_print", ctypes.c_void_p, [
	("mem_chunk",		ctypes.POINTER(_GMemChunk)),] )

g_mem_chunk_info = _rpythonic_function_(		"g_mem_chunk_info", ctypes.c_void_p, [] )

g_blow_chunks = _rpythonic_function_(		"g_blow_chunks", ctypes.c_void_p, [] )

g_allocator_new = _rpythonic_function_(		"g_allocator_new", ctypes.POINTER(_GAllocator), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("n_preallocs",		ctypes.c_uint),] )

g_allocator_free = _rpythonic_function_(		"g_allocator_free", ctypes.c_void_p, [
	("allocator",		ctypes.POINTER(_GAllocator)),] )

g_list_push_allocator = _rpythonic_function_(		"g_list_push_allocator", ctypes.c_void_p, [
	("allocator",		ctypes.POINTER(_GAllocator)),] )

g_list_pop_allocator = _rpythonic_function_(		"g_list_pop_allocator", ctypes.c_void_p, [] )

g_slist_push_allocator = _rpythonic_function_(		"g_slist_push_allocator", ctypes.c_void_p, [
	("allocator",		ctypes.POINTER(_GAllocator)),] )

g_slist_pop_allocator = _rpythonic_function_(		"g_slist_pop_allocator", ctypes.c_void_p, [] )

g_node_push_allocator = _rpythonic_function_(		"g_node_push_allocator", ctypes.c_void_p, [
	("allocator",		ctypes.POINTER(_GAllocator)),] )

g_node_pop_allocator = _rpythonic_function_(		"g_node_pop_allocator", ctypes.c_void_p, [] )

GCacheNewFunc = _rpythonic_function_(		"GCacheNewFunc", ctypes.POINTER(ctypes.c_void_p), [("key",		ctypes.c_void_p)] )

GCacheDupFunc = _rpythonic_function_(		"GCacheDupFunc", ctypes.POINTER(ctypes.c_void_p), [("value",		ctypes.c_void_p)] )

GCacheDestroyFunc = _rpythonic_function_(		"GCacheDestroyFunc", ctypes.c_void_p, [("value",		ctypes.c_void_p)] )

g_cache_new = _rpythonic_function_(		"g_cache_new", ctypes.POINTER(_GCache), [
	("value_new_func",		ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), )),
	("value_destroy_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("key_dup_func",		ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), )),
	("key_destroy_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("hash_key_func",		ctypes.CFUNCTYPE(ctypes.c_uint, )),
	("hash_value_func",		ctypes.CFUNCTYPE(ctypes.c_uint, )),
	("key_equal_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_cache_destroy = _rpythonic_function_(		"g_cache_destroy", ctypes.c_void_p, [
	("cache",		ctypes.POINTER(_GCache)),] )

g_cache_insert = _rpythonic_function_(		"g_cache_insert", ctypes.POINTER(ctypes.c_void_p), [
	("cache",		ctypes.POINTER(_GCache)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cache_remove = _rpythonic_function_(		"g_cache_remove", ctypes.c_void_p, [
	("cache",		ctypes.POINTER(_GCache)),
	("value",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cache_key_foreach = _rpythonic_function_(		"g_cache_key_foreach", ctypes.c_void_p, [
	("cache",		ctypes.POINTER(_GCache)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cache_value_foreach = _rpythonic_function_(		"g_cache_value_foreach", ctypes.c_void_p, [
	("cache",		ctypes.POINTER(_GCache)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GCompletionFunc = _rpythonic_function_(		"GCompletionFunc", ctypes.POINTER(ctypes.c_char), [] )

GCompletionStrncmpFunc = _rpythonic_function_(		"GCompletionStrncmpFunc", ctypes.c_int, [
	("s1",		ctypes.POINTER(ctypes.c_char)),
	("s2",		ctypes.POINTER(ctypes.c_char)),
	("n",		ctypes.c_ulong),] )

g_completion_new = _rpythonic_function_(		"g_completion_new", ctypes.POINTER(_GCompletion), [
	("func",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_char), ))),] )

g_completion_add_items = _rpythonic_function_(		"g_completion_add_items", ctypes.c_void_p, [
	("cmp",		ctypes.POINTER(_GCompletion)),
	("items",		ctypes.POINTER(_GList)),] )

g_completion_remove_items = _rpythonic_function_(		"g_completion_remove_items", ctypes.c_void_p, [
	("cmp",		ctypes.POINTER(_GCompletion)),
	("items",		ctypes.POINTER(_GList)),] )

g_completion_clear_items = _rpythonic_function_(		"g_completion_clear_items", ctypes.c_void_p, [
	("cmp",		ctypes.POINTER(_GCompletion)),] )

g_completion_complete = _rpythonic_function_(		"g_completion_complete", ctypes.POINTER(_GList), [
	("cmp",		ctypes.POINTER(_GCompletion)),
	("prefix",		ctypes.POINTER(ctypes.c_char)),
	("new_prefix",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_completion_complete_utf8 = _rpythonic_function_(		"g_completion_complete_utf8", ctypes.POINTER(_GList), [
	("cmp",		ctypes.POINTER(_GCompletion)),
	("prefix",		ctypes.POINTER(ctypes.c_char)),
	("new_prefix",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_completion_set_compare = _rpythonic_function_(		"g_completion_set_compare", ctypes.c_void_p, [
	("cmp",		ctypes.POINTER(_GCompletion)),
	("strncmp_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.c_ulong,)),] )

g_completion_free = _rpythonic_function_(		"g_completion_free", ctypes.c_void_p, [
	("cmp",		ctypes.POINTER(_GCompletion)),] )

g_relation_new = _rpythonic_function_(		"g_relation_new", ctypes.POINTER(_GRelation), [
	("fields",		ctypes.c_int),] )

g_relation_destroy = _rpythonic_function_(		"g_relation_destroy", ctypes.c_void_p, [
	("relation",		ctypes.POINTER(_GRelation)),] )

g_relation_index = _rpythonic_function_(		"g_relation_index", ctypes.c_void_p, [
	("relation",		ctypes.POINTER(_GRelation)),
	("field",		ctypes.c_int),
	("hash_func",		ctypes.CFUNCTYPE(ctypes.c_uint, )),
	("key_equal_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_relation_delete = _rpythonic_function_(		"g_relation_delete", ctypes.c_int, [
	("relation",		ctypes.POINTER(_GRelation)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),
	("field",		ctypes.c_int),] )

g_relation_select = _rpythonic_function_(		"g_relation_select", ctypes.POINTER(_GTuples), [
	("relation",		ctypes.POINTER(_GRelation)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),
	("field",		ctypes.c_int),] )

g_relation_count = _rpythonic_function_(		"g_relation_count", ctypes.c_int, [
	("relation",		ctypes.POINTER(_GRelation)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),
	("field",		ctypes.c_int),] )

g_relation_print = _rpythonic_function_(		"g_relation_print", ctypes.c_void_p, [
	("relation",		ctypes.POINTER(_GRelation)),] )

g_tuples_destroy = _rpythonic_function_(		"g_tuples_destroy", ctypes.c_void_p, [
	("tuples",		ctypes.POINTER(_GTuples)),] )

g_tuples_index = _rpythonic_function_(		"g_tuples_index", ctypes.POINTER(ctypes.c_void_p), [
	("tuples",		ctypes.POINTER(_GTuples)),
	("index_",		ctypes.c_int),
	("field",		ctypes.c_int),] )

mutex_new = _rpythonic_function_(		"mutex_new", ctypes.POINTER(_GMutex), [] )

mutex_lock = _rpythonic_function_(		"mutex_lock", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(_GMutex)),] )

mutex_trylock = _rpythonic_function_(		"mutex_trylock", ctypes.c_int, [
	("mutex",		ctypes.POINTER(_GMutex)),] )

mutex_unlock = _rpythonic_function_(		"mutex_unlock", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(_GMutex)),] )

mutex_free = _rpythonic_function_(		"mutex_free", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(_GMutex)),] )

cond_new = _rpythonic_function_(		"cond_new", ctypes.POINTER(_GCond), [] )

cond_signal = _rpythonic_function_(		"cond_signal", ctypes.c_void_p, [
	("cond",		ctypes.POINTER(_GCond)),] )

cond_broadcast = _rpythonic_function_(		"cond_broadcast", ctypes.c_void_p, [
	("cond",		ctypes.POINTER(_GCond)),] )

cond_wait = _rpythonic_function_(		"cond_wait", ctypes.c_void_p, [
	("cond",		ctypes.POINTER(_GCond)),
	("mutex",		ctypes.POINTER(_GMutex)),] )

cond_timed_wait = _rpythonic_function_(		"cond_timed_wait", ctypes.c_int, [
	("cond",		ctypes.POINTER(_GCond)),
	("mutex",		ctypes.POINTER(_GMutex)),
	("end_time",		ctypes.POINTER(_GTimeVal)),] )

cond_free = _rpythonic_function_(		"cond_free", ctypes.c_void_p, [
	("cond",		ctypes.POINTER(_GCond)),] )

private_new = _rpythonic_function_(		"private_new", ctypes.POINTER(_GPrivate), [
	("destructor",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

private_get = _rpythonic_function_(		"private_get", ctypes.POINTER(ctypes.c_void_p), [
	("private_key",		ctypes.POINTER(_GPrivate)),] )

private_set = _rpythonic_function_(		"private_set", ctypes.c_void_p, [
	("private_key",		ctypes.POINTER(_GPrivate)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

thread_create = _rpythonic_function_(		"thread_create", ctypes.c_void_p, [
	("func",		ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("stack_size",		ctypes.c_ulong),
	("joinable",		ctypes.c_int),
	("bound",		ctypes.c_int),
	("priority",		ctypes.c_int),
	("thread",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

thread_yield = _rpythonic_function_(		"thread_yield", ctypes.c_void_p, [] )

thread_join = _rpythonic_function_(		"thread_join", ctypes.c_void_p, [("thread",		ctypes.c_void_p)] )

thread_exit = _rpythonic_function_(		"thread_exit", ctypes.c_void_p, [] )

thread_set_priority = _rpythonic_function_(		"thread_set_priority", ctypes.c_void_p, [
	("thread",		ctypes.POINTER(ctypes.c_void_p)),
	("priority",		ctypes.c_int),] )

thread_self = _rpythonic_function_(		"thread_self", ctypes.c_void_p, [("thread",		ctypes.c_void_p)] )

thread_equal = _rpythonic_function_(		"thread_equal", ctypes.c_int, [
	("thread1",		ctypes.POINTER(ctypes.c_void_p)),
	("thread2",		ctypes.POINTER(ctypes.c_void_p)),] )

g_thread_gettime = _rpythonic_function_(		"g_thread_gettime", ctypes.c_ulong, [] )

g_thread_create = _rpythonic_function_(		"g_thread_create", ctypes.POINTER(_GThread), [
	("func",		ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("joinable",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_thread_create_full = _rpythonic_function_(		"g_thread_create_full", ctypes.POINTER(_GThread), [
	("func",		ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("stack_size",		ctypes.c_ulong),
	("joinable",		ctypes.c_int),
	("bound",		ctypes.c_int),
	("priority",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_thread_set_priority = _rpythonic_function_(		"g_thread_set_priority", ctypes.c_void_p, [
	("thread",		ctypes.POINTER(_GThread)),
	("priority",		ctypes.c_int),] )

g_thread_foreach = _rpythonic_function_(		"g_thread_foreach", ctypes.c_void_p, [
	("thread_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

sched_setparam = _rpythonic_function_(		"sched_setparam", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__param",		ctypes.POINTER(sched_param)),] )

sched_getparam = _rpythonic_function_(		"sched_getparam", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__param",		ctypes.POINTER(sched_param)),] )

sched_setscheduler = _rpythonic_function_(		"sched_setscheduler", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__policy",		ctypes.c_int),
	("__param",		ctypes.POINTER(sched_param)),] )

sched_getscheduler = _rpythonic_function_(		"sched_getscheduler", ctypes.c_int, [
	("__pid",		ctypes.c_int),] )

sched_yield = _rpythonic_function_(		"sched_yield", ctypes.c_int, [] )

sched_get_priority_max = _rpythonic_function_(		"sched_get_priority_max", ctypes.c_int, [
	("__algorithm",		ctypes.c_int),] )

sched_get_priority_min = _rpythonic_function_(		"sched_get_priority_min", ctypes.c_int, [
	("__algorithm",		ctypes.c_int),] )

sched_rr_get_interval = _rpythonic_function_(		"sched_rr_get_interval", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__t",		ctypes.POINTER(timespec)),] )

pthread_create = _rpythonic_function_(		"pthread_create", ctypes.c_int, [
	("__newthread",		ctypes.POINTER(ctypes.c_uint64)),
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__start_routine",		ctypes.POINTER(ctypes.c_void_p)),
	("__arg",		ctypes.POINTER(ctypes.c_void_p)),] )

pthread_exit = _rpythonic_function_(		"pthread_exit", ctypes.c_void_p, [("__retval",		ctypes.c_void_p)] )

pthread_join = _rpythonic_function_(		"pthread_join", ctypes.c_int, [
	("__th",		ctypes.c_uint64),
	("__thread_return",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

pthread_detach = _rpythonic_function_(		"pthread_detach", ctypes.c_int, [
	("__th",		ctypes.c_uint64),] )

pthread_self = _rpythonic_function_(		"pthread_self", ctypes.c_uint64, [] )

pthread_equal = _rpythonic_function_(		"pthread_equal", ctypes.c_int, [
	("__thread1",		ctypes.c_uint64),
	("__thread2",		ctypes.c_uint64),] )

pthread_attr_init = _rpythonic_function_(		"pthread_attr_init", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),] )

pthread_attr_destroy = _rpythonic_function_(		"pthread_attr_destroy", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),] )

pthread_attr_getdetachstate = _rpythonic_function_(		"pthread_attr_getdetachstate", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__detachstate",		ctypes.POINTER(ctypes.c_int)),] )

pthread_attr_setdetachstate = _rpythonic_function_(		"pthread_attr_setdetachstate", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__detachstate",		ctypes.c_int),] )

pthread_attr_getguardsize = _rpythonic_function_(		"pthread_attr_getguardsize", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__guardsize",		ctypes.POINTER(ctypes.c_uint64)),] )

pthread_attr_setguardsize = _rpythonic_function_(		"pthread_attr_setguardsize", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__guardsize",		ctypes.c_uint64),] )

pthread_attr_getschedparam = _rpythonic_function_(		"pthread_attr_getschedparam", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__param",		ctypes.POINTER(sched_param)),] )

pthread_attr_setschedparam = _rpythonic_function_(		"pthread_attr_setschedparam", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__param",		ctypes.POINTER(sched_param)),] )

pthread_attr_getschedpolicy = _rpythonic_function_(		"pthread_attr_getschedpolicy", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__policy",		ctypes.POINTER(ctypes.c_int)),] )

pthread_attr_setschedpolicy = _rpythonic_function_(		"pthread_attr_setschedpolicy", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__policy",		ctypes.c_int),] )

pthread_attr_getinheritsched = _rpythonic_function_(		"pthread_attr_getinheritsched", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__inherit",		ctypes.POINTER(ctypes.c_int)),] )

pthread_attr_setinheritsched = _rpythonic_function_(		"pthread_attr_setinheritsched", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__inherit",		ctypes.c_int),] )

pthread_attr_getscope = _rpythonic_function_(		"pthread_attr_getscope", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__scope",		ctypes.POINTER(ctypes.c_int)),] )

pthread_attr_setscope = _rpythonic_function_(		"pthread_attr_setscope", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__scope",		ctypes.c_int),] )

pthread_attr_getstackaddr = _rpythonic_function_(		"pthread_attr_getstackaddr", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__stackaddr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

pthread_attr_setstackaddr = _rpythonic_function_(		"pthread_attr_setstackaddr", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__stackaddr",		ctypes.POINTER(ctypes.c_void_p)),] )

pthread_attr_getstacksize = _rpythonic_function_(		"pthread_attr_getstacksize", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__stacksize",		ctypes.POINTER(ctypes.c_uint64)),] )

pthread_attr_setstacksize = _rpythonic_function_(		"pthread_attr_setstacksize", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__stacksize",		ctypes.c_uint64),] )

pthread_attr_getstack = _rpythonic_function_(		"pthread_attr_getstack", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__stackaddr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("__stacksize",		ctypes.POINTER(ctypes.c_uint64)),] )

pthread_attr_setstack = _rpythonic_function_(		"pthread_attr_setstack", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__stackaddr",		ctypes.POINTER(ctypes.c_void_p)),
	("__stacksize",		ctypes.c_uint64),] )

pthread_setschedparam = _rpythonic_function_(		"pthread_setschedparam", ctypes.c_int, [
	("__target_thread",		ctypes.c_uint64),
	("__policy",		ctypes.c_int),
	("__param",		ctypes.POINTER(sched_param)),] )

pthread_getschedparam = _rpythonic_function_(		"pthread_getschedparam", ctypes.c_int, [
	("__target_thread",		ctypes.c_uint64),
	("__policy",		ctypes.POINTER(ctypes.c_int)),
	("__param",		ctypes.POINTER(sched_param)),] )

pthread_setschedprio = _rpythonic_function_(		"pthread_setschedprio", ctypes.c_int, [
	("__target_thread",		ctypes.c_uint64),
	("__prio",		ctypes.c_int),] )

pthread_once = _rpythonic_function_(		"pthread_once", ctypes.c_int, [
	("__once_control",		ctypes.POINTER(ctypes.c_int)),
	("__init_routine",		ctypes.c_void_p),] )

pthread_setcancelstate = _rpythonic_function_(		"pthread_setcancelstate", ctypes.c_int, [
	("__state",		ctypes.c_int),
	("__oldstate",		ctypes.POINTER(ctypes.c_int)),] )

pthread_setcanceltype = _rpythonic_function_(		"pthread_setcanceltype", ctypes.c_int, [
	("__type",		ctypes.c_int),
	("__oldtype",		ctypes.POINTER(ctypes.c_int)),] )

pthread_cancel = _rpythonic_function_(		"pthread_cancel", ctypes.c_int, [
	("__th",		ctypes.c_uint64),] )

pthread_testcancel = _rpythonic_function_(		"pthread_testcancel", ctypes.c_void_p, [] )

pthread_mutex_init = _rpythonic_function_(		"pthread_mutex_init", ctypes.c_int, [
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),
	("__mutexattr",		ctypes.POINTER(pthread_mutexattr_t)),] )

pthread_mutex_destroy = _rpythonic_function_(		"pthread_mutex_destroy", ctypes.c_int, [
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),] )

pthread_mutex_trylock = _rpythonic_function_(		"pthread_mutex_trylock", ctypes.c_int, [
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),] )

pthread_mutex_lock = _rpythonic_function_(		"pthread_mutex_lock", ctypes.c_int, [
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),] )

pthread_mutex_timedlock = _rpythonic_function_(		"pthread_mutex_timedlock", ctypes.c_int, [
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),
	("__abstime",		ctypes.POINTER(timespec)),] )

pthread_mutex_unlock = _rpythonic_function_(		"pthread_mutex_unlock", ctypes.c_int, [
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),] )

pthread_mutex_getprioceiling = _rpythonic_function_(		"pthread_mutex_getprioceiling", ctypes.c_int, [
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),
	("__prioceiling",		ctypes.POINTER(ctypes.c_int)),] )

pthread_mutex_setprioceiling = _rpythonic_function_(		"pthread_mutex_setprioceiling", ctypes.c_int, [
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),
	("__prioceiling",		ctypes.c_int),
	("__old_ceiling",		ctypes.POINTER(ctypes.c_int)),] )

pthread_mutex_consistent = _rpythonic_function_(		"pthread_mutex_consistent", ctypes.c_int, [
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),] )

pthread_mutexattr_init = _rpythonic_function_(		"pthread_mutexattr_init", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),] )

pthread_mutexattr_destroy = _rpythonic_function_(		"pthread_mutexattr_destroy", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),] )

pthread_mutexattr_getpshared = _rpythonic_function_(		"pthread_mutexattr_getpshared", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__pshared",		ctypes.POINTER(ctypes.c_int)),] )

pthread_mutexattr_setpshared = _rpythonic_function_(		"pthread_mutexattr_setpshared", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__pshared",		ctypes.c_int),] )

pthread_mutexattr_gettype = _rpythonic_function_(		"pthread_mutexattr_gettype", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__kind",		ctypes.POINTER(ctypes.c_int)),] )

pthread_mutexattr_settype = _rpythonic_function_(		"pthread_mutexattr_settype", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__kind",		ctypes.c_int),] )

pthread_mutexattr_getprotocol = _rpythonic_function_(		"pthread_mutexattr_getprotocol", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__protocol",		ctypes.POINTER(ctypes.c_int)),] )

pthread_mutexattr_setprotocol = _rpythonic_function_(		"pthread_mutexattr_setprotocol", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__protocol",		ctypes.c_int),] )

pthread_mutexattr_getprioceiling = _rpythonic_function_(		"pthread_mutexattr_getprioceiling", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__prioceiling",		ctypes.POINTER(ctypes.c_int)),] )

pthread_mutexattr_setprioceiling = _rpythonic_function_(		"pthread_mutexattr_setprioceiling", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__prioceiling",		ctypes.c_int),] )

pthread_mutexattr_getrobust = _rpythonic_function_(		"pthread_mutexattr_getrobust", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__robustness",		ctypes.POINTER(ctypes.c_int)),] )

pthread_mutexattr_setrobust = _rpythonic_function_(		"pthread_mutexattr_setrobust", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__robustness",		ctypes.c_int),] )

pthread_rwlock_init = _rpythonic_function_(		"pthread_rwlock_init", ctypes.c_int, [
	("__rwlock",		ctypes.POINTER(pthread_rwlock_t)),
	("__attr",		ctypes.POINTER(pthread_rwlockattr_t)),] )

pthread_rwlock_destroy = _rpythonic_function_(		"pthread_rwlock_destroy", ctypes.c_int, [
	("__rwlock",		ctypes.POINTER(pthread_rwlock_t)),] )

pthread_rwlock_rdlock = _rpythonic_function_(		"pthread_rwlock_rdlock", ctypes.c_int, [
	("__rwlock",		ctypes.POINTER(pthread_rwlock_t)),] )

pthread_rwlock_tryrdlock = _rpythonic_function_(		"pthread_rwlock_tryrdlock", ctypes.c_int, [
	("__rwlock",		ctypes.POINTER(pthread_rwlock_t)),] )

pthread_rwlock_timedrdlock = _rpythonic_function_(		"pthread_rwlock_timedrdlock", ctypes.c_int, [
	("__rwlock",		ctypes.POINTER(pthread_rwlock_t)),
	("__abstime",		ctypes.POINTER(timespec)),] )

pthread_rwlock_wrlock = _rpythonic_function_(		"pthread_rwlock_wrlock", ctypes.c_int, [
	("__rwlock",		ctypes.POINTER(pthread_rwlock_t)),] )

pthread_rwlock_trywrlock = _rpythonic_function_(		"pthread_rwlock_trywrlock", ctypes.c_int, [
	("__rwlock",		ctypes.POINTER(pthread_rwlock_t)),] )

pthread_rwlock_timedwrlock = _rpythonic_function_(		"pthread_rwlock_timedwrlock", ctypes.c_int, [
	("__rwlock",		ctypes.POINTER(pthread_rwlock_t)),
	("__abstime",		ctypes.POINTER(timespec)),] )

pthread_rwlock_unlock = _rpythonic_function_(		"pthread_rwlock_unlock", ctypes.c_int, [
	("__rwlock",		ctypes.POINTER(pthread_rwlock_t)),] )

pthread_rwlockattr_init = _rpythonic_function_(		"pthread_rwlockattr_init", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_rwlockattr_t)),] )

pthread_rwlockattr_destroy = _rpythonic_function_(		"pthread_rwlockattr_destroy", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_rwlockattr_t)),] )

pthread_rwlockattr_getpshared = _rpythonic_function_(		"pthread_rwlockattr_getpshared", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_rwlockattr_t)),
	("__pshared",		ctypes.POINTER(ctypes.c_int)),] )

pthread_rwlockattr_setpshared = _rpythonic_function_(		"pthread_rwlockattr_setpshared", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_rwlockattr_t)),
	("__pshared",		ctypes.c_int),] )

pthread_rwlockattr_getkind_np = _rpythonic_function_(		"pthread_rwlockattr_getkind_np", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_rwlockattr_t)),
	("__pref",		ctypes.POINTER(ctypes.c_int)),] )

pthread_rwlockattr_setkind_np = _rpythonic_function_(		"pthread_rwlockattr_setkind_np", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_rwlockattr_t)),
	("__pref",		ctypes.c_int),] )

pthread_cond_init = _rpythonic_function_(		"pthread_cond_init", ctypes.c_int, [
	("__cond",		ctypes.POINTER(pthread_cond_t)),
	("__cond_attr",		ctypes.POINTER(pthread_condattr_t)),] )

pthread_cond_destroy = _rpythonic_function_(		"pthread_cond_destroy", ctypes.c_int, [
	("__cond",		ctypes.POINTER(pthread_cond_t)),] )

pthread_cond_signal = _rpythonic_function_(		"pthread_cond_signal", ctypes.c_int, [
	("__cond",		ctypes.POINTER(pthread_cond_t)),] )

pthread_cond_broadcast = _rpythonic_function_(		"pthread_cond_broadcast", ctypes.c_int, [
	("__cond",		ctypes.POINTER(pthread_cond_t)),] )

pthread_cond_wait = _rpythonic_function_(		"pthread_cond_wait", ctypes.c_int, [
	("__cond",		ctypes.POINTER(pthread_cond_t)),
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),] )

pthread_cond_timedwait = _rpythonic_function_(		"pthread_cond_timedwait", ctypes.c_int, [
	("__cond",		ctypes.POINTER(pthread_cond_t)),
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),
	("__abstime",		ctypes.POINTER(timespec)),] )

pthread_condattr_init = _rpythonic_function_(		"pthread_condattr_init", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_condattr_t)),] )

pthread_condattr_destroy = _rpythonic_function_(		"pthread_condattr_destroy", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_condattr_t)),] )

pthread_condattr_getpshared = _rpythonic_function_(		"pthread_condattr_getpshared", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_condattr_t)),
	("__pshared",		ctypes.POINTER(ctypes.c_int)),] )

pthread_condattr_setpshared = _rpythonic_function_(		"pthread_condattr_setpshared", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_condattr_t)),
	("__pshared",		ctypes.c_int),] )

pthread_condattr_getclock = _rpythonic_function_(		"pthread_condattr_getclock", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_condattr_t)),
	("__clock_id",		ctypes.POINTER(ctypes.c_int)),] )

pthread_condattr_setclock = _rpythonic_function_(		"pthread_condattr_setclock", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_condattr_t)),
	("__clock_id",		ctypes.c_int),] )

pthread_spin_init = _rpythonic_function_(		"pthread_spin_init", ctypes.c_int, [
	("__lock",		ctypes.POINTER(ctypes.c_int)),
	("__pshared",		ctypes.c_int),] )

pthread_spin_destroy = _rpythonic_function_(		"pthread_spin_destroy", ctypes.c_int, [
	("__lock",		ctypes.POINTER(ctypes.c_int)),] )

pthread_spin_lock = _rpythonic_function_(		"pthread_spin_lock", ctypes.c_int, [
	("__lock",		ctypes.POINTER(ctypes.c_int)),] )

pthread_spin_trylock = _rpythonic_function_(		"pthread_spin_trylock", ctypes.c_int, [
	("__lock",		ctypes.POINTER(ctypes.c_int)),] )

pthread_spin_unlock = _rpythonic_function_(		"pthread_spin_unlock", ctypes.c_int, [
	("__lock",		ctypes.POINTER(ctypes.c_int)),] )

pthread_barrier_init = _rpythonic_function_(		"pthread_barrier_init", ctypes.c_int, [
	("__barrier",		ctypes.POINTER(pthread_barrier_t)),
	("__attr",		ctypes.POINTER(pthread_barrierattr_t)),
	("__count",		ctypes.c_uint),] )

pthread_barrier_destroy = _rpythonic_function_(		"pthread_barrier_destroy", ctypes.c_int, [
	("__barrier",		ctypes.POINTER(pthread_barrier_t)),] )

pthread_barrier_wait = _rpythonic_function_(		"pthread_barrier_wait", ctypes.c_int, [
	("__barrier",		ctypes.POINTER(pthread_barrier_t)),] )

pthread_barrierattr_init = _rpythonic_function_(		"pthread_barrierattr_init", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_barrierattr_t)),] )

pthread_barrierattr_destroy = _rpythonic_function_(		"pthread_barrierattr_destroy", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_barrierattr_t)),] )

pthread_barrierattr_getpshared = _rpythonic_function_(		"pthread_barrierattr_getpshared", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_barrierattr_t)),
	("__pshared",		ctypes.POINTER(ctypes.c_int)),] )

pthread_barrierattr_setpshared = _rpythonic_function_(		"pthread_barrierattr_setpshared", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_barrierattr_t)),
	("__pshared",		ctypes.c_int),] )

pthread_key_create = _rpythonic_function_(		"pthread_key_create", ctypes.c_int, [
	("__key",		ctypes.POINTER(ctypes.c_uint)),
	("__destr_function",		ctypes.c_void_p),] )

pthread_key_delete = _rpythonic_function_(		"pthread_key_delete", ctypes.c_int, [
	("__key",		ctypes.c_uint),] )

pthread_getspecific = _rpythonic_function_(		"pthread_getspecific", ctypes.POINTER(ctypes.c_void_p), [
	("__key",		ctypes.c_uint),] )

pthread_setspecific = _rpythonic_function_(		"pthread_setspecific", ctypes.c_int, [
	("__key",		ctypes.c_uint),
	("__pointer",		ctypes.POINTER(ctypes.c_void_p)),] )

pthread_getcpuclockid = _rpythonic_function_(		"pthread_getcpuclockid", ctypes.c_int, [
	("__thread_id",		ctypes.c_uint64),
	("__clock_id",		ctypes.POINTER(ctypes.c_int)),] )

pthread_atfork = _rpythonic_function_(		"pthread_atfork", ctypes.c_int, [
	("__prepare",		ctypes.c_void_p),
	("__parent",		ctypes.c_void_p),
	("__child",		ctypes.c_void_p),] )

g_static_mutex_init = _rpythonic_function_(		"g_static_mutex_init", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(GStaticMutex)),] )

g_static_mutex_free = _rpythonic_function_(		"g_static_mutex_free", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(GStaticMutex)),] )

g_static_mutex_get_mutex_impl = _rpythonic_function_(		"g_static_mutex_get_mutex_impl", ctypes.POINTER(_GMutex), [
	("mutex",		ctypes.POINTER(GStaticMutex)),] )

g_static_rec_mutex_init = _rpythonic_function_(		"g_static_rec_mutex_init", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(_GStaticRecMutex)),] )

g_static_rec_mutex_lock = _rpythonic_function_(		"g_static_rec_mutex_lock", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(_GStaticRecMutex)),] )

g_static_rec_mutex_trylock = _rpythonic_function_(		"g_static_rec_mutex_trylock", ctypes.c_int, [
	("mutex",		ctypes.POINTER(_GStaticRecMutex)),] )

g_static_rec_mutex_unlock = _rpythonic_function_(		"g_static_rec_mutex_unlock", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(_GStaticRecMutex)),] )

g_static_rec_mutex_lock_full = _rpythonic_function_(		"g_static_rec_mutex_lock_full", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(_GStaticRecMutex)),
	("depth",		ctypes.c_uint),] )

g_static_rec_mutex_unlock_full = _rpythonic_function_(		"g_static_rec_mutex_unlock_full", ctypes.c_uint, [
	("mutex",		ctypes.POINTER(_GStaticRecMutex)),] )

g_static_rec_mutex_free = _rpythonic_function_(		"g_static_rec_mutex_free", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(_GStaticRecMutex)),] )

g_static_rw_lock_init = _rpythonic_function_(		"g_static_rw_lock_init", ctypes.c_void_p, [
	("lock",		ctypes.POINTER(_GStaticRWLock)),] )

g_static_rw_lock_reader_lock = _rpythonic_function_(		"g_static_rw_lock_reader_lock", ctypes.c_void_p, [
	("lock",		ctypes.POINTER(_GStaticRWLock)),] )

g_static_rw_lock_reader_trylock = _rpythonic_function_(		"g_static_rw_lock_reader_trylock", ctypes.c_int, [
	("lock",		ctypes.POINTER(_GStaticRWLock)),] )

g_static_rw_lock_reader_unlock = _rpythonic_function_(		"g_static_rw_lock_reader_unlock", ctypes.c_void_p, [
	("lock",		ctypes.POINTER(_GStaticRWLock)),] )

g_static_rw_lock_writer_lock = _rpythonic_function_(		"g_static_rw_lock_writer_lock", ctypes.c_void_p, [
	("lock",		ctypes.POINTER(_GStaticRWLock)),] )

g_static_rw_lock_writer_trylock = _rpythonic_function_(		"g_static_rw_lock_writer_trylock", ctypes.c_int, [
	("lock",		ctypes.POINTER(_GStaticRWLock)),] )

g_static_rw_lock_writer_unlock = _rpythonic_function_(		"g_static_rw_lock_writer_unlock", ctypes.c_void_p, [
	("lock",		ctypes.POINTER(_GStaticRWLock)),] )

g_static_rw_lock_free = _rpythonic_function_(		"g_static_rw_lock_free", ctypes.c_void_p, [
	("lock",		ctypes.POINTER(_GStaticRWLock)),] )

g_private_new = _rpythonic_function_(		"g_private_new", ctypes.POINTER(_GPrivate), [
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_static_private_init = _rpythonic_function_(		"g_static_private_init", ctypes.c_void_p, [
	("private_key",		ctypes.POINTER(_GStaticPrivate)),] )

g_static_private_get = _rpythonic_function_(		"g_static_private_get", ctypes.POINTER(ctypes.c_void_p), [
	("private_key",		ctypes.POINTER(_GStaticPrivate)),] )

g_static_private_set = _rpythonic_function_(		"g_static_private_set", ctypes.c_void_p, [
	("private_key",		ctypes.POINTER(_GStaticPrivate)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_static_private_free = _rpythonic_function_(		"g_static_private_free", ctypes.c_void_p, [
	("private_key",		ctypes.POINTER(_GStaticPrivate)),] )

g_once_init_enter_impl = _rpythonic_function_(		"g_once_init_enter_impl", ctypes.c_int, [
	("location",		ctypes.POINTER(ctypes.c_ulong)),] )

g_thread_init = _rpythonic_function_(		"g_thread_init", ctypes.c_void_p, [("vtable",		ctypes.c_void_p)] )

g_thread_init_with_errorcheck_mutexes = _rpythonic_function_(		"g_thread_init_with_errorcheck_mutexes", ctypes.c_void_p, [("vtable",		ctypes.c_void_p)] )

g_thread_get_initialized = _rpythonic_function_(		"g_thread_get_initialized", ctypes.c_int, [] )

g_mutex_new = _rpythonic_function_(		"g_mutex_new", ctypes.POINTER(_GMutex), [] )

g_mutex_free = _rpythonic_function_(		"g_mutex_free", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(_GMutex)),] )

g_cond_new = _rpythonic_function_(		"g_cond_new", ctypes.POINTER(_GCond), [] )

g_cond_free = _rpythonic_function_(		"g_cond_free", ctypes.c_void_p, [
	("cond",		ctypes.POINTER(_GCond)),] )

g_cond_timed_wait = _rpythonic_function_(		"g_cond_timed_wait", ctypes.c_int, [
	("cond",		ctypes.POINTER(_GCond)),
	("mutex",		ctypes.POINTER(_GMutex)),
	("timeval",		ctypes.POINTER(_GTimeVal)),] )

g_type_init = _rpythonic_function_(		"g_type_init", ctypes.c_void_p, [] )

g_type_init_with_debug_flags = _rpythonic_function_(		"g_type_init_with_debug_flags", ctypes.c_void_p, [
	("debug_flags",		ctypes.c_int),] )

g_type_name = _rpythonic_function_(		"g_type_name", ctypes.POINTER(ctypes.c_char), [
	("C_type",		ctypes.c_ulong),] )

g_type_qname = _rpythonic_function_(		"g_type_qname", ctypes.c_uint, [
	("C_type",		ctypes.c_ulong),] )

g_type_from_name = _rpythonic_function_(		"g_type_from_name", ctypes.c_ulong, [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_type_parent = _rpythonic_function_(		"g_type_parent", ctypes.c_ulong, [
	("C_type",		ctypes.c_ulong),] )

g_type_depth = _rpythonic_function_(		"g_type_depth", ctypes.c_uint, [
	("C_type",		ctypes.c_ulong),] )

g_type_next_base = _rpythonic_function_(		"g_type_next_base", ctypes.c_ulong, [
	("leaf_type",		ctypes.c_ulong),
	("root_type",		ctypes.c_ulong),] )

g_type_is_a = _rpythonic_function_(		"g_type_is_a", ctypes.c_int, [
	("C_type",		ctypes.c_ulong),
	("is_a_type",		ctypes.c_ulong),] )

g_type_class_ref = _rpythonic_function_(		"g_type_class_ref", ctypes.POINTER(ctypes.c_void_p), [
	("C_type",		ctypes.c_ulong),] )

g_type_class_peek = _rpythonic_function_(		"g_type_class_peek", ctypes.POINTER(ctypes.c_void_p), [
	("C_type",		ctypes.c_ulong),] )

g_type_class_peek_static = _rpythonic_function_(		"g_type_class_peek_static", ctypes.POINTER(ctypes.c_void_p), [
	("C_type",		ctypes.c_ulong),] )

g_type_class_unref = _rpythonic_function_(		"g_type_class_unref", ctypes.c_void_p, [("g_class",		ctypes.c_void_p)] )

g_type_class_peek_parent = _rpythonic_function_(		"g_type_class_peek_parent", ctypes.POINTER(ctypes.c_void_p), [("g_class",		ctypes.c_void_p)] )

g_type_interface_peek = _rpythonic_function_(		"g_type_interface_peek", ctypes.POINTER(ctypes.c_void_p), [
	("instance_class",		ctypes.POINTER(ctypes.c_void_p)),
	("iface_type",		ctypes.c_ulong),] )

g_type_interface_peek_parent = _rpythonic_function_(		"g_type_interface_peek_parent", ctypes.POINTER(ctypes.c_void_p), [("g_iface",		ctypes.c_void_p)] )

g_type_default_interface_ref = _rpythonic_function_(		"g_type_default_interface_ref", ctypes.POINTER(ctypes.c_void_p), [
	("g_type",		ctypes.c_ulong),] )

g_type_default_interface_peek = _rpythonic_function_(		"g_type_default_interface_peek", ctypes.POINTER(ctypes.c_void_p), [
	("g_type",		ctypes.c_ulong),] )

g_type_default_interface_unref = _rpythonic_function_(		"g_type_default_interface_unref", ctypes.c_void_p, [("g_iface",		ctypes.c_void_p)] )

g_type_children = _rpythonic_function_(		"g_type_children", ctypes.POINTER(ctypes.c_ulong), [
	("C_type",		ctypes.c_ulong),
	("n_children",		ctypes.POINTER(ctypes.c_uint)),] )

g_type_interfaces = _rpythonic_function_(		"g_type_interfaces", ctypes.POINTER(ctypes.c_ulong), [
	("C_type",		ctypes.c_ulong),
	("n_interfaces",		ctypes.POINTER(ctypes.c_uint)),] )

g_type_set_qdata = _rpythonic_function_(		"g_type_set_qdata", ctypes.c_void_p, [
	("C_type",		ctypes.c_ulong),
	("quark",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_type_get_qdata = _rpythonic_function_(		"g_type_get_qdata", ctypes.POINTER(ctypes.c_void_p), [
	("C_type",		ctypes.c_ulong),
	("quark",		ctypes.c_uint),] )

g_type_query = _rpythonic_function_(		"g_type_query", ctypes.c_void_p, [
	("C_type",		ctypes.c_ulong),
	("query",		ctypes.POINTER(_GTypeQuery)),] )

GBaseInitFunc = _rpythonic_function_(		"GBaseInitFunc", ctypes.c_void_p, [("g_class",		ctypes.c_void_p)] )

GBaseFinalizeFunc = _rpythonic_function_(		"GBaseFinalizeFunc", ctypes.c_void_p, [("g_class",		ctypes.c_void_p)] )

GClassInitFunc = _rpythonic_function_(		"GClassInitFunc", ctypes.c_void_p, [
	("g_class",		ctypes.POINTER(ctypes.c_void_p)),
	("class_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GClassFinalizeFunc = _rpythonic_function_(		"GClassFinalizeFunc", ctypes.c_void_p, [
	("g_class",		ctypes.POINTER(ctypes.c_void_p)),
	("class_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GInstanceInitFunc = _rpythonic_function_(		"GInstanceInitFunc", ctypes.c_void_p, [
	("instance",		ctypes.POINTER(_GTypeInstance)),
	("g_class",		ctypes.POINTER(ctypes.c_void_p)),] )

GInterfaceInitFunc = _rpythonic_function_(		"GInterfaceInitFunc", ctypes.c_void_p, [
	("g_iface",		ctypes.POINTER(ctypes.c_void_p)),
	("iface_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GInterfaceFinalizeFunc = _rpythonic_function_(		"GInterfaceFinalizeFunc", ctypes.c_void_p, [
	("g_iface",		ctypes.POINTER(ctypes.c_void_p)),
	("iface_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GTypeClassCacheFunc = _rpythonic_function_(		"GTypeClassCacheFunc", ctypes.c_int, [
	("cache_data",		ctypes.POINTER(ctypes.c_void_p)),
	("g_class",		ctypes.POINTER(_GTypeClass)),] )

GTypeInterfaceCheckFunc = _rpythonic_function_(		"GTypeInterfaceCheckFunc", ctypes.c_void_p, [
	("check_data",		ctypes.POINTER(ctypes.c_void_p)),
	("g_iface",		ctypes.POINTER(ctypes.c_void_p)),] )

value_init = _rpythonic_function_(		"value_init", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),] )

value_free = _rpythonic_function_(		"value_free", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),] )

value_copy = _rpythonic_function_(		"value_copy", ctypes.c_void_p, [
	("src_value",		ctypes.POINTER(_GValue)),
	("dest_value",		ctypes.POINTER(_GValue)),] )

value_peek_pointer = _rpythonic_function_(		"value_peek_pointer", ctypes.POINTER(ctypes.c_void_p), [
	("value",		ctypes.POINTER(_GValue)),] )

collect_value = _rpythonic_function_(		"collect_value", ctypes.POINTER(ctypes.c_char), [
	("value",		ctypes.POINTER(_GValue)),
	("n_collect_values",		ctypes.c_uint),
	("collect_values",		ctypes.POINTER(_GTypeCValue)),
	("collect_flags",		ctypes.c_uint),] )

lcopy_value = _rpythonic_function_(		"lcopy_value", ctypes.POINTER(ctypes.c_char), [
	("value",		ctypes.POINTER(_GValue)),
	("n_collect_values",		ctypes.c_uint),
	("collect_values",		ctypes.POINTER(_GTypeCValue)),
	("collect_flags",		ctypes.c_uint),] )

g_type_register_static = _rpythonic_function_(		"g_type_register_static", ctypes.c_ulong, [
	("parent_type",		ctypes.c_ulong),
	("type_name",		ctypes.POINTER(ctypes.c_char)),
	("info",		ctypes.POINTER(_GTypeInfo)),
	("flags",		ctypes.c_int),] )

g_type_register_static_simple = _rpythonic_function_(		"g_type_register_static_simple", ctypes.c_ulong, [
	("parent_type",		ctypes.c_ulong),
	("type_name",		ctypes.POINTER(ctypes.c_char)),
	("class_size",		ctypes.c_uint),
	("class_init",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("instance_size",		ctypes.c_uint),
	("instance_init",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GTypeInstance),ctypes.POINTER(ctypes.c_void_p),)),
	("flags",		ctypes.c_int),] )

g_type_register_dynamic = _rpythonic_function_(		"g_type_register_dynamic", ctypes.c_ulong, [
	("parent_type",		ctypes.c_ulong),
	("type_name",		ctypes.POINTER(ctypes.c_char)),
	("plugin",		ctypes.POINTER(_GTypePlugin)),
	("flags",		ctypes.c_int),] )

g_type_register_fundamental = _rpythonic_function_(		"g_type_register_fundamental", ctypes.c_ulong, [
	("type_id",		ctypes.c_ulong),
	("type_name",		ctypes.POINTER(ctypes.c_char)),
	("info",		ctypes.POINTER(_GTypeInfo)),
	("finfo",		ctypes.POINTER(_GTypeFundamentalInfo)),
	("flags",		ctypes.c_int),] )

g_type_add_interface_static = _rpythonic_function_(		"g_type_add_interface_static", ctypes.c_void_p, [
	("instance_type",		ctypes.c_ulong),
	("interface_type",		ctypes.c_ulong),
	("info",		ctypes.POINTER(_GInterfaceInfo)),] )

g_type_add_interface_dynamic = _rpythonic_function_(		"g_type_add_interface_dynamic", ctypes.c_void_p, [
	("instance_type",		ctypes.c_ulong),
	("interface_type",		ctypes.c_ulong),
	("plugin",		ctypes.POINTER(_GTypePlugin)),] )

g_type_interface_add_prerequisite = _rpythonic_function_(		"g_type_interface_add_prerequisite", ctypes.c_void_p, [
	("interface_type",		ctypes.c_ulong),
	("prerequisite_type",		ctypes.c_ulong),] )

g_type_interface_prerequisites = _rpythonic_function_(		"g_type_interface_prerequisites", ctypes.POINTER(ctypes.c_ulong), [
	("interface_type",		ctypes.c_ulong),
	("n_prerequisites",		ctypes.POINTER(ctypes.c_uint)),] )

g_type_class_add_private = _rpythonic_function_(		"g_type_class_add_private", ctypes.c_void_p, [
	("g_class",		ctypes.POINTER(ctypes.c_void_p)),
	("private_size",		ctypes.c_ulong),] )

g_type_instance_get_private = _rpythonic_function_(		"g_type_instance_get_private", ctypes.POINTER(ctypes.c_void_p), [
	("instance",		ctypes.POINTER(_GTypeInstance)),
	("private_type",		ctypes.c_ulong),] )

g_type_add_class_private = _rpythonic_function_(		"g_type_add_class_private", ctypes.c_void_p, [
	("class_type",		ctypes.c_ulong),
	("private_size",		ctypes.c_ulong),] )

g_type_class_get_private = _rpythonic_function_(		"g_type_class_get_private", ctypes.POINTER(ctypes.c_void_p), [
	("klass",		ctypes.POINTER(_GTypeClass)),
	("private_type",		ctypes.c_ulong),] )

g_type_get_plugin = _rpythonic_function_(		"g_type_get_plugin", ctypes.POINTER(_GTypePlugin), [
	("C_type",		ctypes.c_ulong),] )

g_type_interface_get_plugin = _rpythonic_function_(		"g_type_interface_get_plugin", ctypes.POINTER(_GTypePlugin), [
	("instance_type",		ctypes.c_ulong),
	("interface_type",		ctypes.c_ulong),] )

g_type_fundamental_next = _rpythonic_function_(		"g_type_fundamental_next", ctypes.c_ulong, [] )

g_type_fundamental = _rpythonic_function_(		"g_type_fundamental", ctypes.c_ulong, [
	("type_id",		ctypes.c_ulong),] )

g_type_create_instance = _rpythonic_function_(		"g_type_create_instance", ctypes.POINTER(_GTypeInstance), [
	("C_type",		ctypes.c_ulong),] )

g_type_free_instance = _rpythonic_function_(		"g_type_free_instance", ctypes.c_void_p, [
	("instance",		ctypes.POINTER(_GTypeInstance)),] )

g_type_add_class_cache_func = _rpythonic_function_(		"g_type_add_class_cache_func", ctypes.c_void_p, [
	("cache_data",		ctypes.POINTER(ctypes.c_void_p)),
	("cache_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GTypeClass),)),] )

g_type_remove_class_cache_func = _rpythonic_function_(		"g_type_remove_class_cache_func", ctypes.c_void_p, [
	("cache_data",		ctypes.POINTER(ctypes.c_void_p)),
	("cache_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GTypeClass),)),] )

g_type_class_unref_uncached = _rpythonic_function_(		"g_type_class_unref_uncached", ctypes.c_void_p, [("g_class",		ctypes.c_void_p)] )

g_type_add_interface_check = _rpythonic_function_(		"g_type_add_interface_check", ctypes.c_void_p, [
	("check_data",		ctypes.POINTER(ctypes.c_void_p)),
	("check_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_type_remove_interface_check = _rpythonic_function_(		"g_type_remove_interface_check", ctypes.c_void_p, [
	("check_data",		ctypes.POINTER(ctypes.c_void_p)),
	("check_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_type_value_table_peek = _rpythonic_function_(		"g_type_value_table_peek", ctypes.POINTER(_GTypeValueTable), [
	("C_type",		ctypes.c_ulong),] )

g_type_check_instance = _rpythonic_function_(		"g_type_check_instance", ctypes.c_int, [
	("instance",		ctypes.POINTER(_GTypeInstance)),] )

g_type_check_instance_cast = _rpythonic_function_(		"g_type_check_instance_cast", ctypes.POINTER(_GTypeInstance), [
	("instance",		ctypes.POINTER(_GTypeInstance)),
	("iface_type",		ctypes.c_ulong),] )

g_type_check_instance_is_a = _rpythonic_function_(		"g_type_check_instance_is_a", ctypes.c_int, [
	("instance",		ctypes.POINTER(_GTypeInstance)),
	("iface_type",		ctypes.c_ulong),] )

g_type_check_class_cast = _rpythonic_function_(		"g_type_check_class_cast", ctypes.POINTER(_GTypeClass), [
	("g_class",		ctypes.POINTER(_GTypeClass)),
	("is_a_type",		ctypes.c_ulong),] )

g_type_check_class_is_a = _rpythonic_function_(		"g_type_check_class_is_a", ctypes.c_int, [
	("g_class",		ctypes.POINTER(_GTypeClass)),
	("is_a_type",		ctypes.c_ulong),] )

g_type_check_is_value_type = _rpythonic_function_(		"g_type_check_is_value_type", ctypes.c_int, [
	("C_type",		ctypes.c_ulong),] )

g_type_check_value = _rpythonic_function_(		"g_type_check_value", ctypes.c_int, [
	("value",		ctypes.POINTER(_GValue)),] )

g_type_check_value_holds = _rpythonic_function_(		"g_type_check_value_holds", ctypes.c_int, [
	("value",		ctypes.POINTER(_GValue)),
	("C_type",		ctypes.c_ulong),] )

g_type_test_flags = _rpythonic_function_(		"g_type_test_flags", ctypes.c_int, [
	("C_type",		ctypes.c_ulong),
	("flags",		ctypes.c_uint),] )

g_type_name_from_instance = _rpythonic_function_(		"g_type_name_from_instance", ctypes.POINTER(ctypes.c_char), [
	("instance",		ctypes.POINTER(_GTypeInstance)),] )

g_type_name_from_class = _rpythonic_function_(		"g_type_name_from_class", ctypes.POINTER(ctypes.c_char), [
	("g_class",		ctypes.POINTER(_GTypeClass)),] )

GValueTransform = _rpythonic_function_(		"GValueTransform", ctypes.c_void_p, [
	("src_value",		ctypes.POINTER(_GValue)),
	("dest_value",		ctypes.POINTER(_GValue)),] )

g_value_init = _rpythonic_function_(		"g_value_init", ctypes.POINTER(_GValue), [
	("value",		ctypes.POINTER(_GValue)),
	("g_type",		ctypes.c_ulong),] )

g_value_copy = _rpythonic_function_(		"g_value_copy", ctypes.c_void_p, [
	("src_value",		ctypes.POINTER(_GValue)),
	("dest_value",		ctypes.POINTER(_GValue)),] )

g_value_reset = _rpythonic_function_(		"g_value_reset", ctypes.POINTER(_GValue), [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_unset = _rpythonic_function_(		"g_value_unset", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_set_instance = _rpythonic_function_(		"g_value_set_instance", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("instance",		ctypes.POINTER(ctypes.c_void_p)),] )

g_value_fits_pointer = _rpythonic_function_(		"g_value_fits_pointer", ctypes.c_int, [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_peek_pointer = _rpythonic_function_(		"g_value_peek_pointer", ctypes.POINTER(ctypes.c_void_p), [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_type_compatible = _rpythonic_function_(		"g_value_type_compatible", ctypes.c_int, [
	("src_type",		ctypes.c_ulong),
	("dest_type",		ctypes.c_ulong),] )

g_value_type_transformable = _rpythonic_function_(		"g_value_type_transformable", ctypes.c_int, [
	("src_type",		ctypes.c_ulong),
	("dest_type",		ctypes.c_ulong),] )

g_value_transform = _rpythonic_function_(		"g_value_transform", ctypes.c_int, [
	("src_value",		ctypes.POINTER(_GValue)),
	("dest_value",		ctypes.POINTER(_GValue)),] )

g_value_register_transform_func = _rpythonic_function_(		"g_value_register_transform_func", ctypes.c_void_p, [
	("src_type",		ctypes.c_ulong),
	("dest_type",		ctypes.c_ulong),
	("transform_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GValue),ctypes.POINTER(_GValue),)),] )

value_set_default = _rpythonic_function_(		"value_set_default", ctypes.c_void_p, [
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("value",		ctypes.POINTER(_GValue)),] )

value_validate = _rpythonic_function_(		"value_validate", ctypes.c_int, [
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("value",		ctypes.POINTER(_GValue)),] )

values_cmp = _rpythonic_function_(		"values_cmp", ctypes.c_int, [
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("value1",		ctypes.POINTER(_GValue)),
	("value2",		ctypes.POINTER(_GValue)),] )

g_param_spec_ref = _rpythonic_function_(		"g_param_spec_ref", ctypes.POINTER(_GParamSpec), [
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

g_param_spec_unref = _rpythonic_function_(		"g_param_spec_unref", ctypes.c_void_p, [
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

g_param_spec_sink = _rpythonic_function_(		"g_param_spec_sink", ctypes.c_void_p, [
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

g_param_spec_ref_sink = _rpythonic_function_(		"g_param_spec_ref_sink", ctypes.POINTER(_GParamSpec), [
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

g_param_spec_get_qdata = _rpythonic_function_(		"g_param_spec_get_qdata", ctypes.POINTER(ctypes.c_void_p), [
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("quark",		ctypes.c_uint),] )

g_param_spec_set_qdata = _rpythonic_function_(		"g_param_spec_set_qdata", ctypes.c_void_p, [
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("quark",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_param_spec_set_qdata_full = _rpythonic_function_(		"g_param_spec_set_qdata_full", ctypes.c_void_p, [
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("quark",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_param_spec_steal_qdata = _rpythonic_function_(		"g_param_spec_steal_qdata", ctypes.POINTER(ctypes.c_void_p), [
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("quark",		ctypes.c_uint),] )

g_param_spec_get_redirect_target = _rpythonic_function_(		"g_param_spec_get_redirect_target", ctypes.POINTER(_GParamSpec), [
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

g_param_value_set_default = _rpythonic_function_(		"g_param_value_set_default", ctypes.c_void_p, [
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("value",		ctypes.POINTER(_GValue)),] )

g_param_value_defaults = _rpythonic_function_(		"g_param_value_defaults", ctypes.c_int, [
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("value",		ctypes.POINTER(_GValue)),] )

g_param_value_validate = _rpythonic_function_(		"g_param_value_validate", ctypes.c_int, [
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("value",		ctypes.POINTER(_GValue)),] )

g_param_value_convert = _rpythonic_function_(		"g_param_value_convert", ctypes.c_int, [
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("src_value",		ctypes.POINTER(_GValue)),
	("dest_value",		ctypes.POINTER(_GValue)),
	("strict_validation",		ctypes.c_int),] )

g_param_values_cmp = _rpythonic_function_(		"g_param_values_cmp", ctypes.c_int, [
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("value1",		ctypes.POINTER(_GValue)),
	("value2",		ctypes.POINTER(_GValue)),] )

g_param_spec_get_name = _rpythonic_function_(		"g_param_spec_get_name", ctypes.POINTER(ctypes.c_char), [
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

g_param_spec_get_nick = _rpythonic_function_(		"g_param_spec_get_nick", ctypes.POINTER(ctypes.c_char), [
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

g_param_spec_get_blurb = _rpythonic_function_(		"g_param_spec_get_blurb", ctypes.POINTER(ctypes.c_char), [
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

g_value_set_param = _rpythonic_function_(		"g_value_set_param", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("param",		ctypes.POINTER(_GParamSpec)),] )

g_value_get_param = _rpythonic_function_(		"g_value_get_param", ctypes.POINTER(_GParamSpec), [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_dup_param = _rpythonic_function_(		"g_value_dup_param", ctypes.POINTER(_GParamSpec), [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_take_param = _rpythonic_function_(		"g_value_take_param", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("param",		ctypes.POINTER(_GParamSpec)),] )

g_value_set_param_take_ownership = _rpythonic_function_(		"g_value_set_param_take_ownership", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("param",		ctypes.POINTER(_GParamSpec)),] )

instance_init = _rpythonic_function_(		"instance_init", ctypes.c_void_p, [
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

g_param_type_register_static = _rpythonic_function_(		"g_param_type_register_static", ctypes.c_ulong, [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("pspec_info",		ctypes.POINTER(_GParamSpecTypeInfo)),] )

_g_param_type_register_static_constant = _rpythonic_function_(		"_g_param_type_register_static_constant", ctypes.c_ulong, [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("pspec_info",		ctypes.POINTER(_GParamSpecTypeInfo)),
	("opt_type",		ctypes.c_ulong),] )

g_param_spec_internal = _rpythonic_function_(		"g_param_spec_internal", ctypes.POINTER(ctypes.c_void_p), [
	("param_type",		ctypes.c_ulong),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),] )

g_param_spec_pool_new = _rpythonic_function_(		"g_param_spec_pool_new", ctypes.POINTER(_GParamSpecPool), [
	("type_prefixing",		ctypes.c_int),] )

g_param_spec_pool_insert = _rpythonic_function_(		"g_param_spec_pool_insert", ctypes.c_void_p, [
	("pool",		ctypes.POINTER(_GParamSpecPool)),
	("pspec",		ctypes.POINTER(_GParamSpec)),
	("owner_type",		ctypes.c_ulong),] )

g_param_spec_pool_remove = _rpythonic_function_(		"g_param_spec_pool_remove", ctypes.c_void_p, [
	("pool",		ctypes.POINTER(_GParamSpecPool)),
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

g_param_spec_pool_lookup = _rpythonic_function_(		"g_param_spec_pool_lookup", ctypes.POINTER(_GParamSpec), [
	("pool",		ctypes.POINTER(_GParamSpecPool)),
	("param_name",		ctypes.POINTER(ctypes.c_char)),
	("owner_type",		ctypes.c_ulong),
	("walk_ancestors",		ctypes.c_int),] )

g_param_spec_pool_list_owned = _rpythonic_function_(		"g_param_spec_pool_list_owned", ctypes.POINTER(_GList), [
	("pool",		ctypes.POINTER(_GParamSpecPool)),
	("owner_type",		ctypes.c_ulong),] )

g_param_spec_pool_list = _rpythonic_function_(		"g_param_spec_pool_list", ctypes.POINTER(ctypes.POINTER(_GParamSpec)), [
	("pool",		ctypes.POINTER(_GParamSpecPool)),
	("owner_type",		ctypes.c_ulong),
	("n_pspecs_p",		ctypes.POINTER(ctypes.c_uint)),] )

GCallback = _rpythonic_function_(		"GCallback", ctypes.c_void_p, [] )

GClosureNotify = _rpythonic_function_(		"GClosureNotify", ctypes.c_void_p, [
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("closure",		ctypes.POINTER(_GClosure)),] )

GClosureMarshal = _rpythonic_function_(		"GClosureMarshal", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GVaClosureMarshal = _rpythonic_function_(		"GVaClosureMarshal", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("args",		ctypes.c_char),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),
	("n_params",		ctypes.c_int),
	("param_types",		ctypes.POINTER(ctypes.c_ulong)),] )

marshal = _rpythonic_function_(		"marshal", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_new = _rpythonic_function_(		"g_cclosure_new", ctypes.POINTER(_GClosure), [
	("callback_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy_data",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GClosure),)),] )

g_cclosure_new_swap = _rpythonic_function_(		"g_cclosure_new_swap", ctypes.POINTER(_GClosure), [
	("callback_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy_data",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GClosure),)),] )

g_signal_type_cclosure_new = _rpythonic_function_(		"g_signal_type_cclosure_new", ctypes.POINTER(_GClosure), [
	("itype",		ctypes.c_ulong),
	("struct_offset",		ctypes.c_uint),] )

g_closure_ref = _rpythonic_function_(		"g_closure_ref", ctypes.POINTER(_GClosure), [
	("closure",		ctypes.POINTER(_GClosure)),] )

g_closure_sink = _rpythonic_function_(		"g_closure_sink", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),] )

g_closure_unref = _rpythonic_function_(		"g_closure_unref", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),] )

g_closure_new_simple = _rpythonic_function_(		"g_closure_new_simple", ctypes.POINTER(_GClosure), [
	("sizeof_closure",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_closure_add_finalize_notifier = _rpythonic_function_(		"g_closure_add_finalize_notifier", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("notify_data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GClosure),)),] )

g_closure_remove_finalize_notifier = _rpythonic_function_(		"g_closure_remove_finalize_notifier", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("notify_data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GClosure),)),] )

g_closure_add_invalidate_notifier = _rpythonic_function_(		"g_closure_add_invalidate_notifier", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("notify_data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GClosure),)),] )

g_closure_remove_invalidate_notifier = _rpythonic_function_(		"g_closure_remove_invalidate_notifier", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("notify_data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GClosure),)),] )

g_closure_add_marshal_guards = _rpythonic_function_(		"g_closure_add_marshal_guards", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("pre_marshal_data",		ctypes.POINTER(ctypes.c_void_p)),
	("pre_marshal_notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GClosure),)),
	("post_marshal_data",		ctypes.POINTER(ctypes.c_void_p)),
	("post_marshal_notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GClosure),)),] )

g_closure_set_marshal = _rpythonic_function_(		"g_closure_set_marshal", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("marshal",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GClosure),ctypes.POINTER(_GValue),ctypes.c_uint,ctypes.POINTER(_GValue),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_closure_set_meta_marshal = _rpythonic_function_(		"g_closure_set_meta_marshal", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),
	("meta_marshal",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GClosure),ctypes.POINTER(_GValue),ctypes.c_uint,ctypes.POINTER(_GValue),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_closure_invalidate = _rpythonic_function_(		"g_closure_invalidate", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),] )

g_closure_invoke = _rpythonic_function_(		"g_closure_invoke", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_generic = _rpythonic_function_(		"g_cclosure_marshal_generic", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_gvalue",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_generic_va = _rpythonic_function_(		"g_cclosure_marshal_generic_va", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("args_list",		ctypes.c_char),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),
	("n_params",		ctypes.c_int),
	("param_types",		ctypes.POINTER(ctypes.c_ulong)),] )

g_cclosure_marshal_VOID__VOID = _rpythonic_function_(		"g_cclosure_marshal_VOID__VOID", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__VOIDv = _rpythonic_function_(		"g_cclosure_marshal_VOID__VOIDv", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("args",		ctypes.c_char),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),
	("n_params",		ctypes.c_int),
	("param_types",		ctypes.POINTER(ctypes.c_ulong)),] )

g_cclosure_marshal_VOID__BOOLEAN = _rpythonic_function_(		"g_cclosure_marshal_VOID__BOOLEAN", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__BOOLEANv = _rpythonic_function_(		"g_cclosure_marshal_VOID__BOOLEANv", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("args",		ctypes.c_char),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),
	("n_params",		ctypes.c_int),
	("param_types",		ctypes.POINTER(ctypes.c_ulong)),] )

g_cclosure_marshal_VOID__CHAR = _rpythonic_function_(		"g_cclosure_marshal_VOID__CHAR", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__CHARv = _rpythonic_function_(		"g_cclosure_marshal_VOID__CHARv", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("args",		ctypes.c_char),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),
	("n_params",		ctypes.c_int),
	("param_types",		ctypes.POINTER(ctypes.c_ulong)),] )

g_cclosure_marshal_VOID__UCHAR = _rpythonic_function_(		"g_cclosure_marshal_VOID__UCHAR", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__UCHARv = _rpythonic_function_(		"g_cclosure_marshal_VOID__UCHARv", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("args",		ctypes.c_char),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),
	("n_params",		ctypes.c_int),
	("param_types",		ctypes.POINTER(ctypes.c_ulong)),] )

g_cclosure_marshal_VOID__INT = _rpythonic_function_(		"g_cclosure_marshal_VOID__INT", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__INTv = _rpythonic_function_(		"g_cclosure_marshal_VOID__INTv", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("args",		ctypes.c_char),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),
	("n_params",		ctypes.c_int),
	("param_types",		ctypes.POINTER(ctypes.c_ulong)),] )

g_cclosure_marshal_VOID__UINT = _rpythonic_function_(		"g_cclosure_marshal_VOID__UINT", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__UINTv = _rpythonic_function_(		"g_cclosure_marshal_VOID__UINTv", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("args",		ctypes.c_char),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),
	("n_params",		ctypes.c_int),
	("param_types",		ctypes.POINTER(ctypes.c_ulong)),] )

g_cclosure_marshal_VOID__LONG = _rpythonic_function_(		"g_cclosure_marshal_VOID__LONG", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__LONGv = _rpythonic_function_(		"g_cclosure_marshal_VOID__LONGv", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("args",		ctypes.c_char),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),
	("n_params",		ctypes.c_int),
	("param_types",		ctypes.POINTER(ctypes.c_ulong)),] )

g_cclosure_marshal_VOID__ULONG = _rpythonic_function_(		"g_cclosure_marshal_VOID__ULONG", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__ULONGv = _rpythonic_function_(		"g_cclosure_marshal_VOID__ULONGv", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("args",		ctypes.c_char),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),
	("n_params",		ctypes.c_int),
	("param_types",		ctypes.POINTER(ctypes.c_ulong)),] )

g_cclosure_marshal_VOID__ENUM = _rpythonic_function_(		"g_cclosure_marshal_VOID__ENUM", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__ENUMv = _rpythonic_function_(		"g_cclosure_marshal_VOID__ENUMv", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("args",		ctypes.c_char),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),
	("n_params",		ctypes.c_int),
	("param_types",		ctypes.POINTER(ctypes.c_ulong)),] )

g_cclosure_marshal_VOID__FLAGS = _rpythonic_function_(		"g_cclosure_marshal_VOID__FLAGS", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__FLAGSv = _rpythonic_function_(		"g_cclosure_marshal_VOID__FLAGSv", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("args",		ctypes.c_char),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),
	("n_params",		ctypes.c_int),
	("param_types",		ctypes.POINTER(ctypes.c_ulong)),] )

g_cclosure_marshal_VOID__FLOAT = _rpythonic_function_(		"g_cclosure_marshal_VOID__FLOAT", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__FLOATv = _rpythonic_function_(		"g_cclosure_marshal_VOID__FLOATv", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("args",		ctypes.c_char),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),
	("n_params",		ctypes.c_int),
	("param_types",		ctypes.POINTER(ctypes.c_ulong)),] )

g_cclosure_marshal_VOID__DOUBLE = _rpythonic_function_(		"g_cclosure_marshal_VOID__DOUBLE", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__DOUBLEv = _rpythonic_function_(		"g_cclosure_marshal_VOID__DOUBLEv", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("args",		ctypes.c_char),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),
	("n_params",		ctypes.c_int),
	("param_types",		ctypes.POINTER(ctypes.c_ulong)),] )

g_cclosure_marshal_VOID__STRING = _rpythonic_function_(		"g_cclosure_marshal_VOID__STRING", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__STRINGv = _rpythonic_function_(		"g_cclosure_marshal_VOID__STRINGv", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("args",		ctypes.c_char),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),
	("n_params",		ctypes.c_int),
	("param_types",		ctypes.POINTER(ctypes.c_ulong)),] )

g_cclosure_marshal_VOID__PARAM = _rpythonic_function_(		"g_cclosure_marshal_VOID__PARAM", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__PARAMv = _rpythonic_function_(		"g_cclosure_marshal_VOID__PARAMv", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("args",		ctypes.c_char),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),
	("n_params",		ctypes.c_int),
	("param_types",		ctypes.POINTER(ctypes.c_ulong)),] )

g_cclosure_marshal_VOID__BOXED = _rpythonic_function_(		"g_cclosure_marshal_VOID__BOXED", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__BOXEDv = _rpythonic_function_(		"g_cclosure_marshal_VOID__BOXEDv", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("args",		ctypes.c_char),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),
	("n_params",		ctypes.c_int),
	("param_types",		ctypes.POINTER(ctypes.c_ulong)),] )

g_cclosure_marshal_VOID__POINTER = _rpythonic_function_(		"g_cclosure_marshal_VOID__POINTER", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__POINTERv = _rpythonic_function_(		"g_cclosure_marshal_VOID__POINTERv", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("args",		ctypes.c_char),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),
	("n_params",		ctypes.c_int),
	("param_types",		ctypes.POINTER(ctypes.c_ulong)),] )

g_cclosure_marshal_VOID__OBJECT = _rpythonic_function_(		"g_cclosure_marshal_VOID__OBJECT", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__OBJECTv = _rpythonic_function_(		"g_cclosure_marshal_VOID__OBJECTv", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("args",		ctypes.c_char),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),
	("n_params",		ctypes.c_int),
	("param_types",		ctypes.POINTER(ctypes.c_ulong)),] )

g_cclosure_marshal_VOID__VARIANT = _rpythonic_function_(		"g_cclosure_marshal_VOID__VARIANT", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__VARIANTv = _rpythonic_function_(		"g_cclosure_marshal_VOID__VARIANTv", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("args",		ctypes.c_char),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),
	("n_params",		ctypes.c_int),
	("param_types",		ctypes.POINTER(ctypes.c_ulong)),] )

g_cclosure_marshal_VOID__UINT_POINTER = _rpythonic_function_(		"g_cclosure_marshal_VOID__UINT_POINTER", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_VOID__UINT_POINTERv = _rpythonic_function_(		"g_cclosure_marshal_VOID__UINT_POINTERv", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("args",		ctypes.c_char),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),
	("n_params",		ctypes.c_int),
	("param_types",		ctypes.POINTER(ctypes.c_ulong)),] )

g_cclosure_marshal_BOOLEAN__FLAGS = _rpythonic_function_(		"g_cclosure_marshal_BOOLEAN__FLAGS", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_BOOLEAN__FLAGSv = _rpythonic_function_(		"g_cclosure_marshal_BOOLEAN__FLAGSv", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("args",		ctypes.c_char),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),
	("n_params",		ctypes.c_int),
	("param_types",		ctypes.POINTER(ctypes.c_ulong)),] )

g_cclosure_marshal_STRING__OBJECT_POINTER = _rpythonic_function_(		"g_cclosure_marshal_STRING__OBJECT_POINTER", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_STRING__OBJECT_POINTERv = _rpythonic_function_(		"g_cclosure_marshal_STRING__OBJECT_POINTERv", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("args",		ctypes.c_char),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),
	("n_params",		ctypes.c_int),
	("param_types",		ctypes.POINTER(ctypes.c_ulong)),] )

g_cclosure_marshal_BOOLEAN__BOXED_BOXED = _rpythonic_function_(		"g_cclosure_marshal_BOOLEAN__BOXED_BOXED", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("invocation_hint",		ctypes.POINTER(ctypes.c_void_p)),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv = _rpythonic_function_(		"g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv", ctypes.c_void_p, [
	("closure",		ctypes.POINTER(_GClosure)),
	("return_value",		ctypes.POINTER(_GValue)),
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("args",		ctypes.c_char),
	("marshal_data",		ctypes.POINTER(ctypes.c_void_p)),
	("n_params",		ctypes.c_int),
	("param_types",		ctypes.POINTER(ctypes.c_ulong)),] )

GSignalEmissionHook = _rpythonic_function_(		"GSignalEmissionHook", ctypes.c_int, [
	("ihint",		ctypes.POINTER(_GSignalInvocationHint)),
	("n_param_values",		ctypes.c_uint),
	("param_values",		ctypes.POINTER(_GValue)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

GSignalAccumulator = _rpythonic_function_(		"GSignalAccumulator", ctypes.c_int, [
	("ihint",		ctypes.POINTER(_GSignalInvocationHint)),
	("return_accu",		ctypes.POINTER(_GValue)),
	("handler_return",		ctypes.POINTER(_GValue)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_signal_newv = _rpythonic_function_(		"g_signal_newv", ctypes.c_uint, [
	("signal_name",		ctypes.POINTER(ctypes.c_char)),
	("itype",		ctypes.c_ulong),
	("signal_flags",		ctypes.c_int),
	("class_closure",		ctypes.POINTER(_GClosure)),
	("accumulator",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GSignalInvocationHint),ctypes.POINTER(_GValue),ctypes.POINTER(_GValue),ctypes.POINTER(ctypes.c_void_p),)),
	("accu_data",		ctypes.POINTER(ctypes.c_void_p)),
	("c_marshaller",		ctypes.c_void_p),
	("return_type",		ctypes.c_ulong),
	("n_params",		ctypes.c_uint),
	("param_types",		ctypes.POINTER(ctypes.c_ulong)),] )

g_signal_new_valist = _rpythonic_function_(		"g_signal_new_valist", ctypes.c_uint, [
	("signal_name",		ctypes.POINTER(ctypes.c_char)),
	("itype",		ctypes.c_ulong),
	("signal_flags",		ctypes.c_int),
	("class_closure",		ctypes.POINTER(_GClosure)),
	("accumulator",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GSignalInvocationHint),ctypes.POINTER(_GValue),ctypes.POINTER(_GValue),ctypes.POINTER(ctypes.c_void_p),)),
	("accu_data",		ctypes.POINTER(ctypes.c_void_p)),
	("c_marshaller",		ctypes.c_void_p),
	("return_type",		ctypes.c_ulong),
	("n_params",		ctypes.c_uint),
	("args",		ctypes.c_char),] )

g_signal_set_va_marshaller = _rpythonic_function_(		"g_signal_set_va_marshaller", ctypes.c_void_p, [
	("signal_id",		ctypes.c_uint),
	("instance_type",		ctypes.c_ulong),
	("va_marshaller",		ctypes.c_void_p),] )

g_signal_emitv = _rpythonic_function_(		"g_signal_emitv", ctypes.c_void_p, [
	("instance_and_params",		ctypes.POINTER(_GValue)),
	("signal_id",		ctypes.c_uint),
	("detail",		ctypes.c_uint),
	("return_value",		ctypes.POINTER(_GValue)),] )

g_signal_emit_valist = _rpythonic_function_(		"g_signal_emit_valist", ctypes.c_void_p, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("signal_id",		ctypes.c_uint),
	("detail",		ctypes.c_uint),
	("var_args",		ctypes.c_char),] )

g_signal_lookup = _rpythonic_function_(		"g_signal_lookup", ctypes.c_uint, [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("itype",		ctypes.c_ulong),] )

g_signal_name = _rpythonic_function_(		"g_signal_name", ctypes.POINTER(ctypes.c_char), [
	("signal_id",		ctypes.c_uint),] )

g_signal_query = _rpythonic_function_(		"g_signal_query", ctypes.c_void_p, [
	("signal_id",		ctypes.c_uint),
	("query",		ctypes.POINTER(_GSignalQuery)),] )

g_signal_list_ids = _rpythonic_function_(		"g_signal_list_ids", ctypes.POINTER(ctypes.c_uint), [
	("itype",		ctypes.c_ulong),
	("n_ids",		ctypes.POINTER(ctypes.c_uint)),] )

g_signal_parse_name = _rpythonic_function_(		"g_signal_parse_name", ctypes.c_int, [
	("detailed_signal",		ctypes.POINTER(ctypes.c_char)),
	("itype",		ctypes.c_ulong),
	("signal_id_p",		ctypes.POINTER(ctypes.c_uint)),
	("detail_p",		ctypes.POINTER(ctypes.c_uint)),
	("force_detail_quark",		ctypes.c_int),] )

g_signal_get_invocation_hint = _rpythonic_function_(		"g_signal_get_invocation_hint", ctypes.POINTER(_GSignalInvocationHint), [("instance",		ctypes.c_void_p)] )

g_signal_stop_emission = _rpythonic_function_(		"g_signal_stop_emission", ctypes.c_void_p, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("signal_id",		ctypes.c_uint),
	("detail",		ctypes.c_uint),] )

g_signal_stop_emission_by_name = _rpythonic_function_(		"g_signal_stop_emission_by_name", ctypes.c_void_p, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("detailed_signal",		ctypes.POINTER(ctypes.c_char)),] )

g_signal_add_emission_hook = _rpythonic_function_(		"g_signal_add_emission_hook", ctypes.c_ulong, [
	("signal_id",		ctypes.c_uint),
	("detail",		ctypes.c_uint),
	("hook_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GSignalInvocationHint),ctypes.c_uint,ctypes.POINTER(_GValue),ctypes.POINTER(ctypes.c_void_p),)),
	("hook_data",		ctypes.POINTER(ctypes.c_void_p)),
	("data_destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_signal_remove_emission_hook = _rpythonic_function_(		"g_signal_remove_emission_hook", ctypes.c_void_p, [
	("signal_id",		ctypes.c_uint),
	("hook_id",		ctypes.c_ulong),] )

g_signal_has_handler_pending = _rpythonic_function_(		"g_signal_has_handler_pending", ctypes.c_int, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("signal_id",		ctypes.c_uint),
	("detail",		ctypes.c_uint),
	("may_be_blocked",		ctypes.c_int),] )

g_signal_connect_closure_by_id = _rpythonic_function_(		"g_signal_connect_closure_by_id", ctypes.c_ulong, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("signal_id",		ctypes.c_uint),
	("detail",		ctypes.c_uint),
	("closure",		ctypes.POINTER(_GClosure)),
	("after",		ctypes.c_int),] )

g_signal_connect_closure = _rpythonic_function_(		"g_signal_connect_closure", ctypes.c_ulong, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("detailed_signal",		ctypes.POINTER(ctypes.c_char)),
	("closure",		ctypes.POINTER(_GClosure)),
	("after",		ctypes.c_int),] )

g_signal_connect_data = _rpythonic_function_(		"g_signal_connect_data", ctypes.c_ulong, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("detailed_signal",		ctypes.POINTER(ctypes.c_char)),
	("c_handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy_data",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GClosure),)),
	("connect_flags",		ctypes.c_int),] )

g_signal_handler_block = _rpythonic_function_(		"g_signal_handler_block", ctypes.c_void_p, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("handler_id",		ctypes.c_ulong),] )

g_signal_handler_unblock = _rpythonic_function_(		"g_signal_handler_unblock", ctypes.c_void_p, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("handler_id",		ctypes.c_ulong),] )

g_signal_handler_disconnect = _rpythonic_function_(		"g_signal_handler_disconnect", ctypes.c_void_p, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("handler_id",		ctypes.c_ulong),] )

g_signal_handler_is_connected = _rpythonic_function_(		"g_signal_handler_is_connected", ctypes.c_int, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("handler_id",		ctypes.c_ulong),] )

g_signal_handler_find = _rpythonic_function_(		"g_signal_handler_find", ctypes.c_ulong, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("mask",		ctypes.c_int),
	("signal_id",		ctypes.c_uint),
	("detail",		ctypes.c_uint),
	("closure",		ctypes.POINTER(_GClosure)),
	("func",		ctypes.POINTER(ctypes.c_void_p)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_signal_handlers_block_matched = _rpythonic_function_(		"g_signal_handlers_block_matched", ctypes.c_uint, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("mask",		ctypes.c_int),
	("signal_id",		ctypes.c_uint),
	("detail",		ctypes.c_uint),
	("closure",		ctypes.POINTER(_GClosure)),
	("func",		ctypes.POINTER(ctypes.c_void_p)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_signal_handlers_unblock_matched = _rpythonic_function_(		"g_signal_handlers_unblock_matched", ctypes.c_uint, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("mask",		ctypes.c_int),
	("signal_id",		ctypes.c_uint),
	("detail",		ctypes.c_uint),
	("closure",		ctypes.POINTER(_GClosure)),
	("func",		ctypes.POINTER(ctypes.c_void_p)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_signal_handlers_disconnect_matched = _rpythonic_function_(		"g_signal_handlers_disconnect_matched", ctypes.c_uint, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("mask",		ctypes.c_int),
	("signal_id",		ctypes.c_uint),
	("detail",		ctypes.c_uint),
	("closure",		ctypes.POINTER(_GClosure)),
	("func",		ctypes.POINTER(ctypes.c_void_p)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_signal_override_class_closure = _rpythonic_function_(		"g_signal_override_class_closure", ctypes.c_void_p, [
	("signal_id",		ctypes.c_uint),
	("instance_type",		ctypes.c_ulong),
	("class_closure",		ctypes.POINTER(_GClosure)),] )

g_signal_override_class_handler = _rpythonic_function_(		"g_signal_override_class_handler", ctypes.c_void_p, [
	("signal_name",		ctypes.POINTER(ctypes.c_char)),
	("instance_type",		ctypes.c_ulong),
	("class_handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_signal_chain_from_overridden = _rpythonic_function_(		"g_signal_chain_from_overridden", ctypes.c_void_p, [
	("instance_and_params",		ctypes.POINTER(_GValue)),
	("return_value",		ctypes.POINTER(_GValue)),] )

g_signal_accumulator_true_handled = _rpythonic_function_(		"g_signal_accumulator_true_handled", ctypes.c_int, [
	("ihint",		ctypes.POINTER(_GSignalInvocationHint)),
	("return_accu",		ctypes.POINTER(_GValue)),
	("handler_return",		ctypes.POINTER(_GValue)),
	("dummy",		ctypes.POINTER(ctypes.c_void_p)),] )

g_signal_accumulator_first_wins = _rpythonic_function_(		"g_signal_accumulator_first_wins", ctypes.c_int, [
	("ihint",		ctypes.POINTER(_GSignalInvocationHint)),
	("return_accu",		ctypes.POINTER(_GValue)),
	("handler_return",		ctypes.POINTER(_GValue)),
	("dummy",		ctypes.POINTER(ctypes.c_void_p)),] )

g_signal_handlers_destroy = _rpythonic_function_(		"g_signal_handlers_destroy", ctypes.c_void_p, [("instance",		ctypes.c_void_p)] )

_g_signals_destroy = _rpythonic_function_(		"_g_signals_destroy", ctypes.c_void_p, [
	("itype",		ctypes.c_ulong),] )

GObjectGetPropertyFunc = _rpythonic_function_(		"GObjectGetPropertyFunc", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("property_id",		ctypes.c_uint),
	("value",		ctypes.POINTER(_GValue)),
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

GObjectSetPropertyFunc = _rpythonic_function_(		"GObjectSetPropertyFunc", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("property_id",		ctypes.c_uint),
	("value",		ctypes.POINTER(_GValue)),
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

GObjectFinalizeFunc = _rpythonic_function_(		"GObjectFinalizeFunc", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),] )

GWeakNotify = _rpythonic_function_(		"GWeakNotify", ctypes.c_void_p, [
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("where_the_object_was",		ctypes.POINTER(_GObject)),] )

constructor = _rpythonic_function_(		"constructor", ctypes.POINTER(_GObject), [
	("C_type",		ctypes.c_ulong),
	("n_construct_properties",		ctypes.c_uint),
	("construct_properties",		ctypes.POINTER(_GObjectConstructParam)),] )

set_property = _rpythonic_function_(		"set_property", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("property_id",		ctypes.c_uint),
	("value",		ctypes.POINTER(_GValue)),
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

get_property = _rpythonic_function_(		"get_property", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("property_id",		ctypes.c_uint),
	("value",		ctypes.POINTER(_GValue)),
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

dispose = _rpythonic_function_(		"dispose", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),] )

dispatch_properties_changed = _rpythonic_function_(		"dispatch_properties_changed", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("n_pspecs",		ctypes.c_uint),
	("pspecs",		ctypes.POINTER(ctypes.POINTER(_GParamSpec))),] )

notify = _rpythonic_function_(		"notify", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

constructed = _rpythonic_function_(		"constructed", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),] )

g_initially_unowned_get_type = _rpythonic_function_(		"g_initially_unowned_get_type", ctypes.c_ulong, [] )

g_object_class_install_property = _rpythonic_function_(		"g_object_class_install_property", ctypes.c_void_p, [
	("oclass",		ctypes.POINTER(_GObjectClass)),
	("property_id",		ctypes.c_uint),
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

g_object_class_find_property = _rpythonic_function_(		"g_object_class_find_property", ctypes.POINTER(_GParamSpec), [
	("oclass",		ctypes.POINTER(_GObjectClass)),
	("property_name",		ctypes.POINTER(ctypes.c_char)),] )

g_object_class_list_properties = _rpythonic_function_(		"g_object_class_list_properties", ctypes.POINTER(ctypes.POINTER(_GParamSpec)), [
	("oclass",		ctypes.POINTER(_GObjectClass)),
	("n_properties",		ctypes.POINTER(ctypes.c_uint)),] )

g_object_class_override_property = _rpythonic_function_(		"g_object_class_override_property", ctypes.c_void_p, [
	("oclass",		ctypes.POINTER(_GObjectClass)),
	("property_id",		ctypes.c_uint),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_object_class_install_properties = _rpythonic_function_(		"g_object_class_install_properties", ctypes.c_void_p, [
	("oclass",		ctypes.POINTER(_GObjectClass)),
	("n_pspecs",		ctypes.c_uint),
	("pspecs",		ctypes.POINTER(ctypes.POINTER(_GParamSpec))),] )

g_object_interface_install_property = _rpythonic_function_(		"g_object_interface_install_property", ctypes.c_void_p, [
	("g_iface",		ctypes.POINTER(ctypes.c_void_p)),
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

g_object_interface_find_property = _rpythonic_function_(		"g_object_interface_find_property", ctypes.POINTER(_GParamSpec), [
	("g_iface",		ctypes.POINTER(ctypes.c_void_p)),
	("property_name",		ctypes.POINTER(ctypes.c_char)),] )

g_object_interface_list_properties = _rpythonic_function_(		"g_object_interface_list_properties", ctypes.POINTER(ctypes.POINTER(_GParamSpec)), [
	("g_iface",		ctypes.POINTER(ctypes.c_void_p)),
	("n_properties_p",		ctypes.POINTER(ctypes.c_uint)),] )

g_object_get_type = _rpythonic_function_(		"g_object_get_type", ctypes.c_ulong, [] )

g_object_newv = _rpythonic_function_(		"g_object_newv", ctypes.POINTER(ctypes.c_void_p), [
	("object_type",		ctypes.c_ulong),
	("n_parameters",		ctypes.c_uint),
	("parameters",		ctypes.POINTER(_GParameter)),] )

g_object_new_valist = _rpythonic_function_(		"g_object_new_valist", ctypes.POINTER(_GObject), [
	("object_type",		ctypes.c_ulong),
	("first_property_name",		ctypes.POINTER(ctypes.c_char)),
	("var_args",		ctypes.c_char),] )

g_object_set_valist = _rpythonic_function_(		"g_object_set_valist", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("first_property_name",		ctypes.POINTER(ctypes.c_char)),
	("var_args",		ctypes.c_char),] )

g_object_get_valist = _rpythonic_function_(		"g_object_get_valist", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("first_property_name",		ctypes.POINTER(ctypes.c_char)),
	("var_args",		ctypes.c_char),] )

g_object_set_property = _rpythonic_function_(		"g_object_set_property", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("property_name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(_GValue)),] )

g_object_get_property = _rpythonic_function_(		"g_object_get_property", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("property_name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(_GValue)),] )

g_object_freeze_notify = _rpythonic_function_(		"g_object_freeze_notify", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),] )

g_object_notify = _rpythonic_function_(		"g_object_notify", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("property_name",		ctypes.POINTER(ctypes.c_char)),] )

g_object_notify_by_pspec = _rpythonic_function_(		"g_object_notify_by_pspec", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("pspec",		ctypes.POINTER(_GParamSpec)),] )

g_object_thaw_notify = _rpythonic_function_(		"g_object_thaw_notify", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),] )

g_object_is_floating = _rpythonic_function_(		"g_object_is_floating", ctypes.c_int, [("C_object",		ctypes.c_void_p)] )

g_object_ref_sink = _rpythonic_function_(		"g_object_ref_sink", ctypes.POINTER(ctypes.c_void_p), [("C_object",		ctypes.c_void_p)] )

g_object_ref = _rpythonic_function_(		"g_object_ref", ctypes.POINTER(ctypes.c_void_p), [("C_object",		ctypes.c_void_p)] )

g_object_unref = _rpythonic_function_(		"g_object_unref", ctypes.c_void_p, [("C_object",		ctypes.c_void_p)] )

g_object_weak_ref = _rpythonic_function_(		"g_object_weak_ref", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GObject),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_object_weak_unref = _rpythonic_function_(		"g_object_weak_unref", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GObject),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_object_add_weak_pointer = _rpythonic_function_(		"g_object_add_weak_pointer", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("weak_pointer_location",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

g_object_remove_weak_pointer = _rpythonic_function_(		"g_object_remove_weak_pointer", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("weak_pointer_location",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

GToggleNotify = _rpythonic_function_(		"GToggleNotify", ctypes.c_void_p, [
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("C_object",		ctypes.POINTER(_GObject)),
	("is_last_ref",		ctypes.c_int),] )

g_object_add_toggle_ref = _rpythonic_function_(		"g_object_add_toggle_ref", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GObject),ctypes.c_int,)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_object_remove_toggle_ref = _rpythonic_function_(		"g_object_remove_toggle_ref", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_GObject),ctypes.c_int,)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_object_get_qdata = _rpythonic_function_(		"g_object_get_qdata", ctypes.POINTER(ctypes.c_void_p), [
	("C_object",		ctypes.POINTER(_GObject)),
	("quark",		ctypes.c_uint),] )

g_object_set_qdata = _rpythonic_function_(		"g_object_set_qdata", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("quark",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_object_set_qdata_full = _rpythonic_function_(		"g_object_set_qdata_full", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("quark",		ctypes.c_uint),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_object_steal_qdata = _rpythonic_function_(		"g_object_steal_qdata", ctypes.POINTER(ctypes.c_void_p), [
	("C_object",		ctypes.POINTER(_GObject)),
	("quark",		ctypes.c_uint),] )

g_object_get_data = _rpythonic_function_(		"g_object_get_data", ctypes.POINTER(ctypes.c_void_p), [
	("C_object",		ctypes.POINTER(_GObject)),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

g_object_set_data = _rpythonic_function_(		"g_object_set_data", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_object_set_data_full = _rpythonic_function_(		"g_object_set_data_full", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_object_steal_data = _rpythonic_function_(		"g_object_steal_data", ctypes.POINTER(ctypes.c_void_p), [
	("C_object",		ctypes.POINTER(_GObject)),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

g_object_watch_closure = _rpythonic_function_(		"g_object_watch_closure", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("closure",		ctypes.POINTER(_GClosure)),] )

g_cclosure_new_object = _rpythonic_function_(		"g_cclosure_new_object", ctypes.POINTER(_GClosure), [
	("callback_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("C_object",		ctypes.POINTER(_GObject)),] )

g_cclosure_new_object_swap = _rpythonic_function_(		"g_cclosure_new_object_swap", ctypes.POINTER(_GClosure), [
	("callback_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("C_object",		ctypes.POINTER(_GObject)),] )

g_closure_new_object = _rpythonic_function_(		"g_closure_new_object", ctypes.POINTER(_GClosure), [
	("sizeof_closure",		ctypes.c_uint),
	("C_object",		ctypes.POINTER(_GObject)),] )

g_value_set_object = _rpythonic_function_(		"g_value_set_object", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_object",		ctypes.POINTER(ctypes.c_void_p)),] )

g_value_get_object = _rpythonic_function_(		"g_value_get_object", ctypes.POINTER(ctypes.c_void_p), [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_dup_object = _rpythonic_function_(		"g_value_dup_object", ctypes.POINTER(ctypes.c_void_p), [
	("value",		ctypes.POINTER(_GValue)),] )

g_signal_connect_object = _rpythonic_function_(		"g_signal_connect_object", ctypes.c_ulong, [
	("instance",		ctypes.POINTER(ctypes.c_void_p)),
	("detailed_signal",		ctypes.POINTER(ctypes.c_char)),
	("c_handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("gobject",		ctypes.POINTER(ctypes.c_void_p)),
	("connect_flags",		ctypes.c_int),] )

g_object_force_floating = _rpythonic_function_(		"g_object_force_floating", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),] )

g_object_run_dispose = _rpythonic_function_(		"g_object_run_dispose", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),] )

g_value_take_object = _rpythonic_function_(		"g_value_take_object", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_object",		ctypes.POINTER(ctypes.c_void_p)),] )

g_value_set_object_take_ownership = _rpythonic_function_(		"g_value_set_object_take_ownership", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_object",		ctypes.POINTER(ctypes.c_void_p)),] )

g_object_compat_control = _rpythonic_function_(		"g_object_compat_control", ctypes.c_ulong, [
	("what",		ctypes.c_ulong),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_clear_object = _rpythonic_function_(		"g_clear_object", ctypes.c_void_p, [
	("object_ptr",		ctypes.POINTER(ctypes.POINTER(_GObject))),] )

g_weak_ref_init = _rpythonic_function_(		"g_weak_ref_init", ctypes.c_void_p, [
	("weak_ref",		ctypes.POINTER(GWeakRef)),
	("C_object",		ctypes.POINTER(ctypes.c_void_p)),] )

g_weak_ref_clear = _rpythonic_function_(		"g_weak_ref_clear", ctypes.c_void_p, [
	("weak_ref",		ctypes.POINTER(GWeakRef)),] )

g_weak_ref_get = _rpythonic_function_(		"g_weak_ref_get", ctypes.POINTER(ctypes.c_void_p), [
	("weak_ref",		ctypes.POINTER(GWeakRef)),] )

g_weak_ref_set = _rpythonic_function_(		"g_weak_ref_set", ctypes.c_void_p, [
	("weak_ref",		ctypes.POINTER(GWeakRef)),
	("C_object",		ctypes.POINTER(ctypes.c_void_p)),] )

GBindingTransformFunc = _rpythonic_function_(		"GBindingTransformFunc", ctypes.c_int, [
	("binding",		ctypes.POINTER(_GBinding)),
	("source_value",		ctypes.POINTER(_GValue)),
	("target_value",		ctypes.POINTER(_GValue)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_binding_flags_get_type = _rpythonic_function_(		"g_binding_flags_get_type", ctypes.c_ulong, [] )

g_binding_get_type = _rpythonic_function_(		"g_binding_get_type", ctypes.c_ulong, [] )

g_binding_get_flags = _rpythonic_function_(		"g_binding_get_flags", ctypes.c_int, [
	("binding",		ctypes.POINTER(_GBinding)),] )

g_binding_get_source = _rpythonic_function_(		"g_binding_get_source", ctypes.POINTER(_GObject), [
	("binding",		ctypes.POINTER(_GBinding)),] )

g_binding_get_target = _rpythonic_function_(		"g_binding_get_target", ctypes.POINTER(_GObject), [
	("binding",		ctypes.POINTER(_GBinding)),] )

g_binding_get_source_property = _rpythonic_function_(		"g_binding_get_source_property", ctypes.POINTER(ctypes.c_char), [
	("binding",		ctypes.POINTER(_GBinding)),] )

g_binding_get_target_property = _rpythonic_function_(		"g_binding_get_target_property", ctypes.POINTER(ctypes.c_char), [
	("binding",		ctypes.POINTER(_GBinding)),] )

g_object_bind_property = _rpythonic_function_(		"g_object_bind_property", ctypes.POINTER(_GBinding), [
	("source",		ctypes.POINTER(ctypes.c_void_p)),
	("source_property",		ctypes.POINTER(ctypes.c_char)),
	("target",		ctypes.POINTER(ctypes.c_void_p)),
	("target_property",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),] )

g_object_bind_property_full = _rpythonic_function_(		"g_object_bind_property_full", ctypes.POINTER(_GBinding), [
	("source",		ctypes.POINTER(ctypes.c_void_p)),
	("source_property",		ctypes.POINTER(ctypes.c_char)),
	("target",		ctypes.POINTER(ctypes.c_void_p)),
	("target_property",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("transform_to",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GBinding),ctypes.POINTER(_GValue),ctypes.POINTER(_GValue),ctypes.POINTER(ctypes.c_void_p),)),
	("transform_from",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GBinding),ctypes.POINTER(_GValue),ctypes.POINTER(_GValue),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_object_bind_property_with_closures = _rpythonic_function_(		"g_object_bind_property_with_closures", ctypes.POINTER(_GBinding), [
	("source",		ctypes.POINTER(ctypes.c_void_p)),
	("source_property",		ctypes.POINTER(ctypes.c_char)),
	("target",		ctypes.POINTER(ctypes.c_void_p)),
	("target_property",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("transform_to",		ctypes.POINTER(_GClosure)),
	("transform_from",		ctypes.POINTER(_GClosure)),] )

g_date_get_type = _rpythonic_function_(		"g_date_get_type", ctypes.c_ulong, [] )

g_strv_get_type = _rpythonic_function_(		"g_strv_get_type", ctypes.c_ulong, [] )

g_gstring_get_type = _rpythonic_function_(		"g_gstring_get_type", ctypes.c_ulong, [] )

g_hash_table_get_type = _rpythonic_function_(		"g_hash_table_get_type", ctypes.c_ulong, [] )

g_array_get_type = _rpythonic_function_(		"g_array_get_type", ctypes.c_ulong, [] )

g_byte_array_get_type = _rpythonic_function_(		"g_byte_array_get_type", ctypes.c_ulong, [] )

g_ptr_array_get_type = _rpythonic_function_(		"g_ptr_array_get_type", ctypes.c_ulong, [] )

g_bytes_get_type = _rpythonic_function_(		"g_bytes_get_type", ctypes.c_ulong, [] )

g_variant_type_get_gtype = _rpythonic_function_(		"g_variant_type_get_gtype", ctypes.c_ulong, [] )

g_regex_get_type = _rpythonic_function_(		"g_regex_get_type", ctypes.c_ulong, [] )

g_match_info_get_type = _rpythonic_function_(		"g_match_info_get_type", ctypes.c_ulong, [] )

g_error_get_type = _rpythonic_function_(		"g_error_get_type", ctypes.c_ulong, [] )

g_date_time_get_type = _rpythonic_function_(		"g_date_time_get_type", ctypes.c_ulong, [] )

g_io_channel_get_type = _rpythonic_function_(		"g_io_channel_get_type", ctypes.c_ulong, [] )

g_io_condition_get_type = _rpythonic_function_(		"g_io_condition_get_type", ctypes.c_ulong, [] )

g_variant_builder_get_type = _rpythonic_function_(		"g_variant_builder_get_type", ctypes.c_ulong, [] )

g_key_file_get_type = _rpythonic_function_(		"g_key_file_get_type", ctypes.c_ulong, [] )

g_main_loop_get_type = _rpythonic_function_(		"g_main_loop_get_type", ctypes.c_ulong, [] )

g_main_context_get_type = _rpythonic_function_(		"g_main_context_get_type", ctypes.c_ulong, [] )

g_source_get_type = _rpythonic_function_(		"g_source_get_type", ctypes.c_ulong, [] )

g_variant_get_gtype = _rpythonic_function_(		"g_variant_get_gtype", ctypes.c_ulong, [] )

GBoxedCopyFunc = _rpythonic_function_(		"GBoxedCopyFunc", ctypes.POINTER(ctypes.c_void_p), [("boxed",		ctypes.c_void_p)] )

GBoxedFreeFunc = _rpythonic_function_(		"GBoxedFreeFunc", ctypes.c_void_p, [("boxed",		ctypes.c_void_p)] )

g_boxed_copy = _rpythonic_function_(		"g_boxed_copy", ctypes.POINTER(ctypes.c_void_p), [
	("boxed_type",		ctypes.c_ulong),
	("src_boxed",		ctypes.POINTER(ctypes.c_void_p)),] )

g_boxed_free = _rpythonic_function_(		"g_boxed_free", ctypes.c_void_p, [
	("boxed_type",		ctypes.c_ulong),
	("boxed",		ctypes.POINTER(ctypes.c_void_p)),] )

g_value_set_boxed = _rpythonic_function_(		"g_value_set_boxed", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_boxed",		ctypes.POINTER(ctypes.c_void_p)),] )

g_value_set_static_boxed = _rpythonic_function_(		"g_value_set_static_boxed", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_boxed",		ctypes.POINTER(ctypes.c_void_p)),] )

g_value_take_boxed = _rpythonic_function_(		"g_value_take_boxed", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_boxed",		ctypes.POINTER(ctypes.c_void_p)),] )

g_value_set_boxed_take_ownership = _rpythonic_function_(		"g_value_set_boxed_take_ownership", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_boxed",		ctypes.POINTER(ctypes.c_void_p)),] )

g_value_get_boxed = _rpythonic_function_(		"g_value_get_boxed", ctypes.POINTER(ctypes.c_void_p), [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_dup_boxed = _rpythonic_function_(		"g_value_dup_boxed", ctypes.POINTER(ctypes.c_void_p), [
	("value",		ctypes.POINTER(_GValue)),] )

g_boxed_type_register_static = _rpythonic_function_(		"g_boxed_type_register_static", ctypes.c_ulong, [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("boxed_copy",		ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), )),
	("boxed_free",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_closure_get_type = _rpythonic_function_(		"g_closure_get_type", ctypes.c_ulong, [] )

g_value_get_type = _rpythonic_function_(		"g_value_get_type", ctypes.c_ulong, [] )

g_enum_get_value = _rpythonic_function_(		"g_enum_get_value", ctypes.POINTER(_GEnumValue), [
	("enum_class",		ctypes.POINTER(_GEnumClass)),
	("value",		ctypes.c_int),] )

g_enum_get_value_by_name = _rpythonic_function_(		"g_enum_get_value_by_name", ctypes.POINTER(_GEnumValue), [
	("enum_class",		ctypes.POINTER(_GEnumClass)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_enum_get_value_by_nick = _rpythonic_function_(		"g_enum_get_value_by_nick", ctypes.POINTER(_GEnumValue), [
	("enum_class",		ctypes.POINTER(_GEnumClass)),
	("nick",		ctypes.POINTER(ctypes.c_char)),] )

g_flags_get_first_value = _rpythonic_function_(		"g_flags_get_first_value", ctypes.POINTER(_GFlagsValue), [
	("flags_class",		ctypes.POINTER(_GFlagsClass)),
	("value",		ctypes.c_uint),] )

g_flags_get_value_by_name = _rpythonic_function_(		"g_flags_get_value_by_name", ctypes.POINTER(_GFlagsValue), [
	("flags_class",		ctypes.POINTER(_GFlagsClass)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_flags_get_value_by_nick = _rpythonic_function_(		"g_flags_get_value_by_nick", ctypes.POINTER(_GFlagsValue), [
	("flags_class",		ctypes.POINTER(_GFlagsClass)),
	("nick",		ctypes.POINTER(ctypes.c_char)),] )

g_value_set_enum = _rpythonic_function_(		"g_value_set_enum", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_enum",		ctypes.c_int),] )

g_value_get_enum = _rpythonic_function_(		"g_value_get_enum", ctypes.c_int, [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_set_flags = _rpythonic_function_(		"g_value_set_flags", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_flags",		ctypes.c_uint),] )

g_value_get_flags = _rpythonic_function_(		"g_value_get_flags", ctypes.c_uint, [
	("value",		ctypes.POINTER(_GValue)),] )

g_enum_register_static = _rpythonic_function_(		"g_enum_register_static", ctypes.c_ulong, [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("const_static_values",		ctypes.POINTER(_GEnumValue)),] )

g_flags_register_static = _rpythonic_function_(		"g_flags_register_static", ctypes.c_ulong, [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("const_static_values",		ctypes.POINTER(_GFlagsValue)),] )

g_enum_complete_type_info = _rpythonic_function_(		"g_enum_complete_type_info", ctypes.c_void_p, [
	("g_enum_type",		ctypes.c_ulong),
	("info",		ctypes.POINTER(_GTypeInfo)),
	("const_values",		ctypes.POINTER(_GEnumValue)),] )

g_flags_complete_type_info = _rpythonic_function_(		"g_flags_complete_type_info", ctypes.c_void_p, [
	("g_flags_type",		ctypes.c_ulong),
	("info",		ctypes.POINTER(_GTypeInfo)),
	("const_values",		ctypes.POINTER(_GFlagsValue)),] )

g_param_spec_char = _rpythonic_function_(		"g_param_spec_char", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("minimum",		ctypes.c_char),
	("maximum",		ctypes.c_char),
	("default_value",		ctypes.c_char),
	("flags",		ctypes.c_int),] )

g_param_spec_uchar = _rpythonic_function_(		"g_param_spec_uchar", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("minimum",		ctypes.c_ubyte),
	("maximum",		ctypes.c_ubyte),
	("default_value",		ctypes.c_ubyte),
	("flags",		ctypes.c_int),] )

g_param_spec_boolean = _rpythonic_function_(		"g_param_spec_boolean", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("default_value",		ctypes.c_int),
	("flags",		ctypes.c_int),] )

g_param_spec_int = _rpythonic_function_(		"g_param_spec_int", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("minimum",		ctypes.c_int),
	("maximum",		ctypes.c_int),
	("default_value",		ctypes.c_int),
	("flags",		ctypes.c_int),] )

g_param_spec_uint = _rpythonic_function_(		"g_param_spec_uint", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("minimum",		ctypes.c_uint),
	("maximum",		ctypes.c_uint),
	("default_value",		ctypes.c_uint),
	("flags",		ctypes.c_int),] )

g_param_spec_long = _rpythonic_function_(		"g_param_spec_long", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("minimum",		ctypes.c_long),
	("maximum",		ctypes.c_long),
	("default_value",		ctypes.c_long),
	("flags",		ctypes.c_int),] )

g_param_spec_ulong = _rpythonic_function_(		"g_param_spec_ulong", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("minimum",		ctypes.c_ulong),
	("maximum",		ctypes.c_ulong),
	("default_value",		ctypes.c_ulong),
	("flags",		ctypes.c_int),] )

g_param_spec_int64 = _rpythonic_function_(		"g_param_spec_int64", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("minimum",		ctypes.c_long),
	("maximum",		ctypes.c_long),
	("default_value",		ctypes.c_long),
	("flags",		ctypes.c_int),] )

g_param_spec_uint64 = _rpythonic_function_(		"g_param_spec_uint64", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("minimum",		ctypes.c_ulong),
	("maximum",		ctypes.c_ulong),
	("default_value",		ctypes.c_ulong),
	("flags",		ctypes.c_int),] )

g_param_spec_unichar = _rpythonic_function_(		"g_param_spec_unichar", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("default_value",		ctypes.c_uint),
	("flags",		ctypes.c_int),] )

g_param_spec_enum = _rpythonic_function_(		"g_param_spec_enum", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("enum_type",		ctypes.c_ulong),
	("default_value",		ctypes.c_int),
	("flags",		ctypes.c_int),] )

g_param_spec_flags = _rpythonic_function_(		"g_param_spec_flags", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("flags_type",		ctypes.c_ulong),
	("default_value",		ctypes.c_uint),
	("flags",		ctypes.c_int),] )

g_param_spec_float = _rpythonic_function_(		"g_param_spec_float", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("minimum",		ctypes.c_float),
	("maximum",		ctypes.c_float),
	("default_value",		ctypes.c_float),
	("flags",		ctypes.c_int),] )

g_param_spec_double = _rpythonic_function_(		"g_param_spec_double", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("minimum",		ctypes.c_double),
	("maximum",		ctypes.c_double),
	("default_value",		ctypes.c_double),
	("flags",		ctypes.c_int),] )

g_param_spec_string = _rpythonic_function_(		"g_param_spec_string", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("default_value",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),] )

g_param_spec_param = _rpythonic_function_(		"g_param_spec_param", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("param_type",		ctypes.c_ulong),
	("flags",		ctypes.c_int),] )

g_param_spec_boxed = _rpythonic_function_(		"g_param_spec_boxed", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("boxed_type",		ctypes.c_ulong),
	("flags",		ctypes.c_int),] )

g_param_spec_pointer = _rpythonic_function_(		"g_param_spec_pointer", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),] )

g_param_spec_value_array = _rpythonic_function_(		"g_param_spec_value_array", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("element_spec",		ctypes.POINTER(_GParamSpec)),
	("flags",		ctypes.c_int),] )

g_param_spec_object = _rpythonic_function_(		"g_param_spec_object", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("object_type",		ctypes.c_ulong),
	("flags",		ctypes.c_int),] )

g_param_spec_override = _rpythonic_function_(		"g_param_spec_override", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("overridden",		ctypes.POINTER(_GParamSpec)),] )

g_param_spec_gtype = _rpythonic_function_(		"g_param_spec_gtype", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("is_a_type",		ctypes.c_ulong),
	("flags",		ctypes.c_int),] )

g_param_spec_variant = _rpythonic_function_(		"g_param_spec_variant", ctypes.POINTER(_GParamSpec), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nick",		ctypes.POINTER(ctypes.c_char)),
	("blurb",		ctypes.POINTER(ctypes.c_char)),
	("C_type",		ctypes.POINTER(_GVariantType)),
	("default_value",		ctypes.POINTER(_GVariant)),
	("flags",		ctypes.c_int),] )

g_source_set_closure = _rpythonic_function_(		"g_source_set_closure", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),
	("closure",		ctypes.POINTER(_GClosure)),] )

g_source_set_dummy_callback = _rpythonic_function_(		"g_source_set_dummy_callback", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSource)),] )

load = _rpythonic_function_(		"load", ctypes.c_int, [
	("module",		ctypes.POINTER(_GTypeModule)),] )

unload = _rpythonic_function_(		"unload", ctypes.c_void_p, [
	("module",		ctypes.POINTER(_GTypeModule)),] )

reserved1 = _rpythonic_function_(		"reserved1", ctypes.c_void_p, [] )

reserved2 = _rpythonic_function_(		"reserved2", ctypes.c_void_p, [] )

reserved3 = _rpythonic_function_(		"reserved3", ctypes.c_void_p, [] )

reserved4 = _rpythonic_function_(		"reserved4", ctypes.c_void_p, [] )

g_type_module_get_type = _rpythonic_function_(		"g_type_module_get_type", ctypes.c_ulong, [] )

g_type_module_use = _rpythonic_function_(		"g_type_module_use", ctypes.c_int, [
	("module",		ctypes.POINTER(_GTypeModule)),] )

g_type_module_unuse = _rpythonic_function_(		"g_type_module_unuse", ctypes.c_void_p, [
	("module",		ctypes.POINTER(_GTypeModule)),] )

g_type_module_set_name = _rpythonic_function_(		"g_type_module_set_name", ctypes.c_void_p, [
	("module",		ctypes.POINTER(_GTypeModule)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_type_module_register_type = _rpythonic_function_(		"g_type_module_register_type", ctypes.c_ulong, [
	("module",		ctypes.POINTER(_GTypeModule)),
	("parent_type",		ctypes.c_ulong),
	("type_name",		ctypes.POINTER(ctypes.c_char)),
	("type_info",		ctypes.POINTER(_GTypeInfo)),
	("flags",		ctypes.c_int),] )

g_type_module_add_interface = _rpythonic_function_(		"g_type_module_add_interface", ctypes.c_void_p, [
	("module",		ctypes.POINTER(_GTypeModule)),
	("instance_type",		ctypes.c_ulong),
	("interface_type",		ctypes.c_ulong),
	("interface_info",		ctypes.POINTER(_GInterfaceInfo)),] )

g_type_module_register_enum = _rpythonic_function_(		"g_type_module_register_enum", ctypes.c_ulong, [
	("module",		ctypes.POINTER(_GTypeModule)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("const_static_values",		ctypes.POINTER(_GEnumValue)),] )

g_type_module_register_flags = _rpythonic_function_(		"g_type_module_register_flags", ctypes.c_ulong, [
	("module",		ctypes.POINTER(_GTypeModule)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("const_static_values",		ctypes.POINTER(_GFlagsValue)),] )

GTypePluginUse = _rpythonic_function_(		"GTypePluginUse", ctypes.c_void_p, [
	("plugin",		ctypes.POINTER(_GTypePlugin)),] )

GTypePluginUnuse = _rpythonic_function_(		"GTypePluginUnuse", ctypes.c_void_p, [
	("plugin",		ctypes.POINTER(_GTypePlugin)),] )

GTypePluginCompleteTypeInfo = _rpythonic_function_(		"GTypePluginCompleteTypeInfo", ctypes.c_void_p, [
	("plugin",		ctypes.POINTER(_GTypePlugin)),
	("g_type",		ctypes.c_ulong),
	("info",		ctypes.POINTER(_GTypeInfo)),
	("value_table",		ctypes.POINTER(_GTypeValueTable)),] )

GTypePluginCompleteInterfaceInfo = _rpythonic_function_(		"GTypePluginCompleteInterfaceInfo", ctypes.c_void_p, [
	("plugin",		ctypes.POINTER(_GTypePlugin)),
	("instance_type",		ctypes.c_ulong),
	("interface_type",		ctypes.c_ulong),
	("info",		ctypes.POINTER(_GInterfaceInfo)),] )

g_type_plugin_get_type = _rpythonic_function_(		"g_type_plugin_get_type", ctypes.c_ulong, [] )

g_type_plugin_use = _rpythonic_function_(		"g_type_plugin_use", ctypes.c_void_p, [
	("plugin",		ctypes.POINTER(_GTypePlugin)),] )

g_type_plugin_unuse = _rpythonic_function_(		"g_type_plugin_unuse", ctypes.c_void_p, [
	("plugin",		ctypes.POINTER(_GTypePlugin)),] )

g_type_plugin_complete_type_info = _rpythonic_function_(		"g_type_plugin_complete_type_info", ctypes.c_void_p, [
	("plugin",		ctypes.POINTER(_GTypePlugin)),
	("g_type",		ctypes.c_ulong),
	("info",		ctypes.POINTER(_GTypeInfo)),
	("value_table",		ctypes.POINTER(_GTypeValueTable)),] )

g_type_plugin_complete_interface_info = _rpythonic_function_(		"g_type_plugin_complete_interface_info", ctypes.c_void_p, [
	("plugin",		ctypes.POINTER(_GTypePlugin)),
	("instance_type",		ctypes.c_ulong),
	("interface_type",		ctypes.c_ulong),
	("info",		ctypes.POINTER(_GInterfaceInfo)),] )

g_value_array_get_type = _rpythonic_function_(		"g_value_array_get_type", ctypes.c_ulong, [] )

g_value_array_get_nth = _rpythonic_function_(		"g_value_array_get_nth", ctypes.POINTER(_GValue), [
	("value_array",		ctypes.POINTER(_GValueArray)),
	("index_",		ctypes.c_uint),] )

g_value_array_new = _rpythonic_function_(		"g_value_array_new", ctypes.POINTER(_GValueArray), [
	("n_prealloced",		ctypes.c_uint),] )

g_value_array_free = _rpythonic_function_(		"g_value_array_free", ctypes.c_void_p, [
	("value_array",		ctypes.POINTER(_GValueArray)),] )

g_value_array_copy = _rpythonic_function_(		"g_value_array_copy", ctypes.POINTER(_GValueArray), [
	("value_array",		ctypes.POINTER(_GValueArray)),] )

g_value_array_prepend = _rpythonic_function_(		"g_value_array_prepend", ctypes.POINTER(_GValueArray), [
	("value_array",		ctypes.POINTER(_GValueArray)),
	("value",		ctypes.POINTER(_GValue)),] )

g_value_array_append = _rpythonic_function_(		"g_value_array_append", ctypes.POINTER(_GValueArray), [
	("value_array",		ctypes.POINTER(_GValueArray)),
	("value",		ctypes.POINTER(_GValue)),] )

g_value_array_insert = _rpythonic_function_(		"g_value_array_insert", ctypes.POINTER(_GValueArray), [
	("value_array",		ctypes.POINTER(_GValueArray)),
	("index_",		ctypes.c_uint),
	("value",		ctypes.POINTER(_GValue)),] )

g_value_array_remove = _rpythonic_function_(		"g_value_array_remove", ctypes.POINTER(_GValueArray), [
	("value_array",		ctypes.POINTER(_GValueArray)),
	("index_",		ctypes.c_uint),] )

g_value_array_sort = _rpythonic_function_(		"g_value_array_sort", ctypes.POINTER(_GValueArray), [
	("value_array",		ctypes.POINTER(_GValueArray)),
	("compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

g_value_array_sort_with_data = _rpythonic_function_(		"g_value_array_sort_with_data", ctypes.POINTER(_GValueArray), [
	("value_array",		ctypes.POINTER(_GValueArray)),
	("compare_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_value_set_char = _rpythonic_function_(		"g_value_set_char", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_char",		ctypes.c_char),] )

g_value_get_char = _rpythonic_function_(		"g_value_get_char", ctypes.c_char, [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_set_schar = _rpythonic_function_(		"g_value_set_schar", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_char",		ctypes.c_char),] )

g_value_get_schar = _rpythonic_function_(		"g_value_get_schar", ctypes.c_char, [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_set_uchar = _rpythonic_function_(		"g_value_set_uchar", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_uchar",		ctypes.c_ubyte),] )

g_value_get_uchar = _rpythonic_function_(		"g_value_get_uchar", ctypes.c_ubyte, [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_set_boolean = _rpythonic_function_(		"g_value_set_boolean", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_boolean",		ctypes.c_int),] )

g_value_get_boolean = _rpythonic_function_(		"g_value_get_boolean", ctypes.c_int, [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_set_int = _rpythonic_function_(		"g_value_set_int", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_int",		ctypes.c_int),] )

g_value_get_int = _rpythonic_function_(		"g_value_get_int", ctypes.c_int, [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_set_uint = _rpythonic_function_(		"g_value_set_uint", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_uint",		ctypes.c_uint),] )

g_value_get_uint = _rpythonic_function_(		"g_value_get_uint", ctypes.c_uint, [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_set_long = _rpythonic_function_(		"g_value_set_long", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_long",		ctypes.c_long),] )

g_value_get_long = _rpythonic_function_(		"g_value_get_long", ctypes.c_long, [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_set_ulong = _rpythonic_function_(		"g_value_set_ulong", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_ulong",		ctypes.c_ulong),] )

g_value_get_ulong = _rpythonic_function_(		"g_value_get_ulong", ctypes.c_ulong, [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_set_int64 = _rpythonic_function_(		"g_value_set_int64", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_int64",		ctypes.c_long),] )

g_value_get_int64 = _rpythonic_function_(		"g_value_get_int64", ctypes.c_long, [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_set_uint64 = _rpythonic_function_(		"g_value_set_uint64", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_uint64",		ctypes.c_ulong),] )

g_value_get_uint64 = _rpythonic_function_(		"g_value_get_uint64", ctypes.c_ulong, [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_set_float = _rpythonic_function_(		"g_value_set_float", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_float",		ctypes.c_float),] )

g_value_get_float = _rpythonic_function_(		"g_value_get_float", ctypes.c_float, [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_set_double = _rpythonic_function_(		"g_value_set_double", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_double",		ctypes.c_double),] )

g_value_get_double = _rpythonic_function_(		"g_value_get_double", ctypes.c_double, [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_set_string = _rpythonic_function_(		"g_value_set_string", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_string",		ctypes.POINTER(ctypes.c_char)),] )

g_value_set_static_string = _rpythonic_function_(		"g_value_set_static_string", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_string",		ctypes.POINTER(ctypes.c_char)),] )

g_value_get_string = _rpythonic_function_(		"g_value_get_string", ctypes.POINTER(ctypes.c_char), [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_dup_string = _rpythonic_function_(		"g_value_dup_string", ctypes.POINTER(ctypes.c_char), [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_set_pointer = _rpythonic_function_(		"g_value_set_pointer", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_pointer",		ctypes.POINTER(ctypes.c_void_p)),] )

g_value_get_pointer = _rpythonic_function_(		"g_value_get_pointer", ctypes.POINTER(ctypes.c_void_p), [
	("value",		ctypes.POINTER(_GValue)),] )

g_gtype_get_type = _rpythonic_function_(		"g_gtype_get_type", ctypes.c_ulong, [] )

g_value_set_gtype = _rpythonic_function_(		"g_value_set_gtype", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_gtype",		ctypes.c_ulong),] )

g_value_get_gtype = _rpythonic_function_(		"g_value_get_gtype", ctypes.c_ulong, [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_set_variant = _rpythonic_function_(		"g_value_set_variant", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("variant",		ctypes.POINTER(_GVariant)),] )

g_value_take_variant = _rpythonic_function_(		"g_value_take_variant", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("variant",		ctypes.POINTER(_GVariant)),] )

g_value_get_variant = _rpythonic_function_(		"g_value_get_variant", ctypes.POINTER(_GVariant), [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_dup_variant = _rpythonic_function_(		"g_value_dup_variant", ctypes.POINTER(_GVariant), [
	("value",		ctypes.POINTER(_GValue)),] )

g_pointer_type_register_static = _rpythonic_function_(		"g_pointer_type_register_static", ctypes.c_ulong, [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_strdup_value_contents = _rpythonic_function_(		"g_strdup_value_contents", ctypes.POINTER(ctypes.c_char), [
	("value",		ctypes.POINTER(_GValue)),] )

g_value_take_string = _rpythonic_function_(		"g_value_take_string", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_string",		ctypes.POINTER(ctypes.c_char)),] )

g_value_set_string_take_ownership = _rpythonic_function_(		"g_value_set_string_take_ownership", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GValue)),
	("v_string",		ctypes.POINTER(ctypes.c_char)),] )

GAsyncReadyCallback = _rpythonic_function_(		"GAsyncReadyCallback", ctypes.c_void_p, [
	("source_object",		ctypes.POINTER(_GObject)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GFileProgressCallback = _rpythonic_function_(		"GFileProgressCallback", ctypes.c_void_p, [
	("current_num_bytes",		ctypes.c_long),
	("total_num_bytes",		ctypes.c_long),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GFileReadMoreCallback = _rpythonic_function_(		"GFileReadMoreCallback", ctypes.c_int, [
	("file_contents",		ctypes.POINTER(ctypes.c_char)),
	("file_size",		ctypes.c_long),
	("callback_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GIOSchedulerJobFunc = _rpythonic_function_(		"GIOSchedulerJobFunc", ctypes.c_int, [
	("job",		ctypes.POINTER(_GIOSchedulerJob)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GSimpleAsyncThreadFunc = _rpythonic_function_(		"GSimpleAsyncThreadFunc", ctypes.c_void_p, [
	("res",		ctypes.POINTER(_GSimpleAsyncResult)),
	("C_object",		ctypes.POINTER(_GObject)),
	("cancellable",		ctypes.POINTER(_GCancellable)),] )

GSocketSourceFunc = _rpythonic_function_(		"GSocketSourceFunc", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),
	("condition",		ctypes.c_int),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GCancellableSourceFunc = _rpythonic_function_(		"GCancellableSourceFunc", ctypes.c_int, [
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GPollableSourceFunc = _rpythonic_function_(		"GPollableSourceFunc", ctypes.c_int, [
	("pollable_stream",		ctypes.POINTER(_GObject)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GDBusProxyTypeFunc = _rpythonic_function_(		"GDBusProxyTypeFunc", ctypes.c_ulong, [
	("manager",		ctypes.POINTER(_GDBusObjectManagerClient)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("interface_name",		ctypes.POINTER(ctypes.c_char)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

get_name = _rpythonic_function_(		"get_name", ctypes.POINTER(ctypes.c_char), [
	("action",		ctypes.POINTER(_GAction)),] )

get_parameter_type = _rpythonic_function_(		"get_parameter_type", ctypes.POINTER(_GVariantType), [
	("action",		ctypes.POINTER(_GAction)),] )

get_state_type = _rpythonic_function_(		"get_state_type", ctypes.POINTER(_GVariantType), [
	("action",		ctypes.POINTER(_GAction)),] )

get_state_hint = _rpythonic_function_(		"get_state_hint", ctypes.POINTER(_GVariant), [
	("action",		ctypes.POINTER(_GAction)),] )

get_enabled = _rpythonic_function_(		"get_enabled", ctypes.c_int, [
	("action",		ctypes.POINTER(_GAction)),] )

get_state = _rpythonic_function_(		"get_state", ctypes.POINTER(_GVariant), [
	("action",		ctypes.POINTER(_GAction)),] )

change_state = _rpythonic_function_(		"change_state", ctypes.c_void_p, [
	("action",		ctypes.POINTER(_GAction)),
	("value",		ctypes.POINTER(_GVariant)),] )

activate = _rpythonic_function_(		"activate", ctypes.c_void_p, [
	("action",		ctypes.POINTER(_GAction)),
	("parameter",		ctypes.POINTER(_GVariant)),] )

g_action_get_type = _rpythonic_function_(		"g_action_get_type", ctypes.c_ulong, [] )

g_action_get_name = _rpythonic_function_(		"g_action_get_name", ctypes.POINTER(ctypes.c_char), [
	("action",		ctypes.POINTER(_GAction)),] )

g_action_get_parameter_type = _rpythonic_function_(		"g_action_get_parameter_type", ctypes.POINTER(_GVariantType), [
	("action",		ctypes.POINTER(_GAction)),] )

g_action_get_state_type = _rpythonic_function_(		"g_action_get_state_type", ctypes.POINTER(_GVariantType), [
	("action",		ctypes.POINTER(_GAction)),] )

g_action_get_state_hint = _rpythonic_function_(		"g_action_get_state_hint", ctypes.POINTER(_GVariant), [
	("action",		ctypes.POINTER(_GAction)),] )

g_action_get_enabled = _rpythonic_function_(		"g_action_get_enabled", ctypes.c_int, [
	("action",		ctypes.POINTER(_GAction)),] )

g_action_get_state = _rpythonic_function_(		"g_action_get_state", ctypes.POINTER(_GVariant), [
	("action",		ctypes.POINTER(_GAction)),] )

g_action_change_state = _rpythonic_function_(		"g_action_change_state", ctypes.c_void_p, [
	("action",		ctypes.POINTER(_GAction)),
	("value",		ctypes.POINTER(_GVariant)),] )

g_action_activate = _rpythonic_function_(		"g_action_activate", ctypes.c_void_p, [
	("action",		ctypes.POINTER(_GAction)),
	("parameter",		ctypes.POINTER(_GVariant)),] )

has_action = _rpythonic_function_(		"has_action", ctypes.c_int, [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),] )

list_actions = _rpythonic_function_(		"list_actions", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("action_group",		ctypes.POINTER(_GActionGroup)),] )

get_action_enabled = _rpythonic_function_(		"get_action_enabled", ctypes.c_int, [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),] )

get_action_parameter_type = _rpythonic_function_(		"get_action_parameter_type", ctypes.POINTER(_GVariantType), [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),] )

get_action_state_type = _rpythonic_function_(		"get_action_state_type", ctypes.POINTER(_GVariantType), [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),] )

get_action_state_hint = _rpythonic_function_(		"get_action_state_hint", ctypes.POINTER(_GVariant), [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),] )

get_action_state = _rpythonic_function_(		"get_action_state", ctypes.POINTER(_GVariant), [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),] )

change_action_state = _rpythonic_function_(		"change_action_state", ctypes.c_void_p, [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(_GVariant)),] )

activate_action = _rpythonic_function_(		"activate_action", ctypes.c_void_p, [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),
	("parameter",		ctypes.POINTER(_GVariant)),] )

action_added = _rpythonic_function_(		"action_added", ctypes.c_void_p, [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),] )

action_removed = _rpythonic_function_(		"action_removed", ctypes.c_void_p, [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),] )

action_enabled_changed = _rpythonic_function_(		"action_enabled_changed", ctypes.c_void_p, [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),
	("enabled",		ctypes.c_int),] )

action_state_changed = _rpythonic_function_(		"action_state_changed", ctypes.c_void_p, [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),
	("state",		ctypes.POINTER(_GVariant)),] )

query_action = _rpythonic_function_(		"query_action", ctypes.c_int, [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),
	("enabled",		ctypes.POINTER(ctypes.c_int)),
	("parameter_type",		ctypes.POINTER(ctypes.POINTER(_GVariantType))),
	("state_type",		ctypes.POINTER(ctypes.POINTER(_GVariantType))),
	("state_hint",		ctypes.POINTER(ctypes.POINTER(_GVariant))),
	("state",		ctypes.POINTER(ctypes.POINTER(_GVariant))),] )

g_action_group_get_type = _rpythonic_function_(		"g_action_group_get_type", ctypes.c_ulong, [] )

g_action_group_has_action = _rpythonic_function_(		"g_action_group_has_action", ctypes.c_int, [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),] )

g_action_group_list_actions = _rpythonic_function_(		"g_action_group_list_actions", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("action_group",		ctypes.POINTER(_GActionGroup)),] )

g_action_group_get_action_parameter_type = _rpythonic_function_(		"g_action_group_get_action_parameter_type", ctypes.POINTER(_GVariantType), [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),] )

g_action_group_get_action_state_type = _rpythonic_function_(		"g_action_group_get_action_state_type", ctypes.POINTER(_GVariantType), [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),] )

g_action_group_get_action_state_hint = _rpythonic_function_(		"g_action_group_get_action_state_hint", ctypes.POINTER(_GVariant), [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),] )

g_action_group_get_action_enabled = _rpythonic_function_(		"g_action_group_get_action_enabled", ctypes.c_int, [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),] )

g_action_group_get_action_state = _rpythonic_function_(		"g_action_group_get_action_state", ctypes.POINTER(_GVariant), [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),] )

g_action_group_change_action_state = _rpythonic_function_(		"g_action_group_change_action_state", ctypes.c_void_p, [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(_GVariant)),] )

g_action_group_activate_action = _rpythonic_function_(		"g_action_group_activate_action", ctypes.c_void_p, [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),
	("parameter",		ctypes.POINTER(_GVariant)),] )

g_action_group_action_added = _rpythonic_function_(		"g_action_group_action_added", ctypes.c_void_p, [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),] )

g_action_group_action_removed = _rpythonic_function_(		"g_action_group_action_removed", ctypes.c_void_p, [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),] )

g_action_group_action_enabled_changed = _rpythonic_function_(		"g_action_group_action_enabled_changed", ctypes.c_void_p, [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),
	("enabled",		ctypes.c_int),] )

g_action_group_action_state_changed = _rpythonic_function_(		"g_action_group_action_state_changed", ctypes.c_void_p, [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),
	("state",		ctypes.POINTER(_GVariant)),] )

g_action_group_query_action = _rpythonic_function_(		"g_action_group_query_action", ctypes.c_int, [
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),
	("enabled",		ctypes.POINTER(ctypes.c_int)),
	("parameter_type",		ctypes.POINTER(ctypes.POINTER(_GVariantType))),
	("state_type",		ctypes.POINTER(ctypes.POINTER(_GVariantType))),
	("state_hint",		ctypes.POINTER(ctypes.POINTER(_GVariant))),
	("state",		ctypes.POINTER(ctypes.POINTER(_GVariant))),] )

g_dbus_connection_export_action_group = _rpythonic_function_(		"g_dbus_connection_export_action_group", ctypes.c_uint, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("action_group",		ctypes.POINTER(_GActionGroup)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_connection_unexport_action_group = _rpythonic_function_(		"g_dbus_connection_unexport_action_group", ctypes.c_void_p, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("export_id",		ctypes.c_uint),] )

lookup_action = _rpythonic_function_(		"lookup_action", ctypes.POINTER(_GAction), [
	("action_map",		ctypes.POINTER(_GActionMap)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),] )

add_action = _rpythonic_function_(		"add_action", ctypes.c_void_p, [
	("action_map",		ctypes.POINTER(_GActionMap)),
	("action",		ctypes.POINTER(_GAction)),] )

remove_action = _rpythonic_function_(		"remove_action", ctypes.c_void_p, [
	("action_map",		ctypes.POINTER(_GActionMap)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),] )

g_action_map_get_type = _rpythonic_function_(		"g_action_map_get_type", ctypes.c_ulong, [] )

g_action_map_lookup_action = _rpythonic_function_(		"g_action_map_lookup_action", ctypes.POINTER(_GAction), [
	("action_map",		ctypes.POINTER(_GActionMap)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),] )

g_action_map_add_action = _rpythonic_function_(		"g_action_map_add_action", ctypes.c_void_p, [
	("action_map",		ctypes.POINTER(_GActionMap)),
	("action",		ctypes.POINTER(_GAction)),] )

g_action_map_remove_action = _rpythonic_function_(		"g_action_map_remove_action", ctypes.c_void_p, [
	("action_map",		ctypes.POINTER(_GActionMap)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),] )

g_action_map_add_action_entries = _rpythonic_function_(		"g_action_map_add_action_entries", ctypes.c_void_p, [
	("action_map",		ctypes.POINTER(_GActionMap)),
	("entries",		ctypes.POINTER(_GActionEntry)),
	("n_entries",		ctypes.c_int),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

dup = _rpythonic_function_(		"dup", ctypes.POINTER(_GAppInfo), [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

equal = _rpythonic_function_(		"equal", ctypes.c_int, [
	("appinfo1",		ctypes.POINTER(_GAppInfo)),
	("appinfo2",		ctypes.POINTER(_GAppInfo)),] )

get_id = _rpythonic_function_(		"get_id", ctypes.POINTER(ctypes.c_char), [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

get_description = _rpythonic_function_(		"get_description", ctypes.POINTER(ctypes.c_char), [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

get_executable = _rpythonic_function_(		"get_executable", ctypes.POINTER(ctypes.c_char), [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

get_icon = _rpythonic_function_(		"get_icon", ctypes.POINTER(_GIcon), [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

launch = _rpythonic_function_(		"launch", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),
	("files",		ctypes.POINTER(_GList)),
	("launch_context",		ctypes.POINTER(_GAppLaunchContext)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

supports_uris = _rpythonic_function_(		"supports_uris", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

supports_files = _rpythonic_function_(		"supports_files", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

launch_uris = _rpythonic_function_(		"launch_uris", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),
	("uris",		ctypes.POINTER(_GList)),
	("launch_context",		ctypes.POINTER(_GAppLaunchContext)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

should_show = _rpythonic_function_(		"should_show", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

set_as_default_for_type = _rpythonic_function_(		"set_as_default_for_type", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),
	("content_type",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

set_as_default_for_extension = _rpythonic_function_(		"set_as_default_for_extension", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),
	("extension",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

add_supports_type = _rpythonic_function_(		"add_supports_type", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),
	("content_type",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

can_remove_supports_type = _rpythonic_function_(		"can_remove_supports_type", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

remove_supports_type = _rpythonic_function_(		"remove_supports_type", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),
	("content_type",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

can_delete = _rpythonic_function_(		"can_delete", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

do_delete = _rpythonic_function_(		"do_delete", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

get_commandline = _rpythonic_function_(		"get_commandline", ctypes.POINTER(ctypes.c_char), [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

get_display_name = _rpythonic_function_(		"get_display_name", ctypes.POINTER(ctypes.c_char), [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

set_as_last_used_for_type = _rpythonic_function_(		"set_as_last_used_for_type", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),
	("content_type",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_app_info_get_type = _rpythonic_function_(		"g_app_info_get_type", ctypes.c_ulong, [] )

g_app_info_create_from_commandline = _rpythonic_function_(		"g_app_info_create_from_commandline", ctypes.POINTER(_GAppInfo), [
	("commandline",		ctypes.POINTER(ctypes.c_char)),
	("application_name",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_app_info_dup = _rpythonic_function_(		"g_app_info_dup", ctypes.POINTER(_GAppInfo), [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

g_app_info_equal = _rpythonic_function_(		"g_app_info_equal", ctypes.c_int, [
	("appinfo1",		ctypes.POINTER(_GAppInfo)),
	("appinfo2",		ctypes.POINTER(_GAppInfo)),] )

g_app_info_get_id = _rpythonic_function_(		"g_app_info_get_id", ctypes.POINTER(ctypes.c_char), [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

g_app_info_get_name = _rpythonic_function_(		"g_app_info_get_name", ctypes.POINTER(ctypes.c_char), [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

g_app_info_get_display_name = _rpythonic_function_(		"g_app_info_get_display_name", ctypes.POINTER(ctypes.c_char), [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

g_app_info_get_description = _rpythonic_function_(		"g_app_info_get_description", ctypes.POINTER(ctypes.c_char), [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

g_app_info_get_executable = _rpythonic_function_(		"g_app_info_get_executable", ctypes.POINTER(ctypes.c_char), [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

g_app_info_get_commandline = _rpythonic_function_(		"g_app_info_get_commandline", ctypes.POINTER(ctypes.c_char), [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

g_app_info_get_icon = _rpythonic_function_(		"g_app_info_get_icon", ctypes.POINTER(_GIcon), [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

g_app_info_launch = _rpythonic_function_(		"g_app_info_launch", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),
	("files",		ctypes.POINTER(_GList)),
	("launch_context",		ctypes.POINTER(_GAppLaunchContext)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_app_info_supports_uris = _rpythonic_function_(		"g_app_info_supports_uris", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

g_app_info_supports_files = _rpythonic_function_(		"g_app_info_supports_files", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

g_app_info_launch_uris = _rpythonic_function_(		"g_app_info_launch_uris", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),
	("uris",		ctypes.POINTER(_GList)),
	("launch_context",		ctypes.POINTER(_GAppLaunchContext)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_app_info_should_show = _rpythonic_function_(		"g_app_info_should_show", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

g_app_info_set_as_default_for_type = _rpythonic_function_(		"g_app_info_set_as_default_for_type", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),
	("content_type",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_app_info_set_as_default_for_extension = _rpythonic_function_(		"g_app_info_set_as_default_for_extension", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),
	("extension",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_app_info_add_supports_type = _rpythonic_function_(		"g_app_info_add_supports_type", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),
	("content_type",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_app_info_can_remove_supports_type = _rpythonic_function_(		"g_app_info_can_remove_supports_type", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

g_app_info_remove_supports_type = _rpythonic_function_(		"g_app_info_remove_supports_type", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),
	("content_type",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_app_info_can_delete = _rpythonic_function_(		"g_app_info_can_delete", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

g_app_info_delete = _rpythonic_function_(		"g_app_info_delete", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),] )

g_app_info_set_as_last_used_for_type = _rpythonic_function_(		"g_app_info_set_as_last_used_for_type", ctypes.c_int, [
	("appinfo",		ctypes.POINTER(_GAppInfo)),
	("content_type",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_app_info_get_all = _rpythonic_function_(		"g_app_info_get_all", ctypes.POINTER(_GList), [] )

g_app_info_get_all_for_type = _rpythonic_function_(		"g_app_info_get_all_for_type", ctypes.POINTER(_GList), [
	("content_type",		ctypes.POINTER(ctypes.c_char)),] )

g_app_info_get_recommended_for_type = _rpythonic_function_(		"g_app_info_get_recommended_for_type", ctypes.POINTER(_GList), [
	("content_type",		ctypes.POINTER(ctypes.c_char)),] )

g_app_info_get_fallback_for_type = _rpythonic_function_(		"g_app_info_get_fallback_for_type", ctypes.POINTER(_GList), [
	("content_type",		ctypes.POINTER(ctypes.c_char)),] )

g_app_info_reset_type_associations = _rpythonic_function_(		"g_app_info_reset_type_associations", ctypes.c_void_p, [
	("content_type",		ctypes.POINTER(ctypes.c_char)),] )

g_app_info_get_default_for_type = _rpythonic_function_(		"g_app_info_get_default_for_type", ctypes.POINTER(_GAppInfo), [
	("content_type",		ctypes.POINTER(ctypes.c_char)),
	("must_support_uris",		ctypes.c_int),] )

g_app_info_get_default_for_uri_scheme = _rpythonic_function_(		"g_app_info_get_default_for_uri_scheme", ctypes.POINTER(_GAppInfo), [
	("uri_scheme",		ctypes.POINTER(ctypes.c_char)),] )

g_app_info_launch_default_for_uri = _rpythonic_function_(		"g_app_info_launch_default_for_uri", ctypes.c_int, [
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("launch_context",		ctypes.POINTER(_GAppLaunchContext)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

get_display = _rpythonic_function_(		"get_display", ctypes.POINTER(ctypes.c_char), [
	("context",		ctypes.POINTER(_GAppLaunchContext)),
	("info",		ctypes.POINTER(_GAppInfo)),
	("files",		ctypes.POINTER(_GList)),] )

get_startup_notify_id = _rpythonic_function_(		"get_startup_notify_id", ctypes.POINTER(ctypes.c_char), [
	("context",		ctypes.POINTER(_GAppLaunchContext)),
	("info",		ctypes.POINTER(_GAppInfo)),
	("files",		ctypes.POINTER(_GList)),] )

launch_failed = _rpythonic_function_(		"launch_failed", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GAppLaunchContext)),
	("startup_notify_id",		ctypes.POINTER(ctypes.c_char)),] )

_g_reserved1 = _rpythonic_function_(		"_g_reserved1", ctypes.c_void_p, [] )

_g_reserved2 = _rpythonic_function_(		"_g_reserved2", ctypes.c_void_p, [] )

_g_reserved3 = _rpythonic_function_(		"_g_reserved3", ctypes.c_void_p, [] )

_g_reserved4 = _rpythonic_function_(		"_g_reserved4", ctypes.c_void_p, [] )

_g_reserved5 = _rpythonic_function_(		"_g_reserved5", ctypes.c_void_p, [] )

g_app_launch_context_get_type = _rpythonic_function_(		"g_app_launch_context_get_type", ctypes.c_ulong, [] )

g_app_launch_context_new = _rpythonic_function_(		"g_app_launch_context_new", ctypes.POINTER(_GAppLaunchContext), [] )

g_app_launch_context_setenv = _rpythonic_function_(		"g_app_launch_context_setenv", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GAppLaunchContext)),
	("variable",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

g_app_launch_context_unsetenv = _rpythonic_function_(		"g_app_launch_context_unsetenv", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GAppLaunchContext)),
	("variable",		ctypes.POINTER(ctypes.c_char)),] )

g_app_launch_context_get_environment = _rpythonic_function_(		"g_app_launch_context_get_environment", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("context",		ctypes.POINTER(_GAppLaunchContext)),] )

g_app_launch_context_get_display = _rpythonic_function_(		"g_app_launch_context_get_display", ctypes.POINTER(ctypes.c_char), [
	("context",		ctypes.POINTER(_GAppLaunchContext)),
	("info",		ctypes.POINTER(_GAppInfo)),
	("files",		ctypes.POINTER(_GList)),] )

g_app_launch_context_get_startup_notify_id = _rpythonic_function_(		"g_app_launch_context_get_startup_notify_id", ctypes.POINTER(ctypes.c_char), [
	("context",		ctypes.POINTER(_GAppLaunchContext)),
	("info",		ctypes.POINTER(_GAppInfo)),
	("files",		ctypes.POINTER(_GList)),] )

g_app_launch_context_launch_failed = _rpythonic_function_(		"g_app_launch_context_launch_failed", ctypes.c_void_p, [
	("context",		ctypes.POINTER(_GAppLaunchContext)),
	("startup_notify_id",		ctypes.POINTER(ctypes.c_char)),] )

startup = _rpythonic_function_(		"startup", ctypes.c_void_p, [
	("application",		ctypes.POINTER(_GApplication)),] )

open = _rpythonic_function_(		"open", ctypes.c_void_p, [
	("application",		ctypes.POINTER(_GApplication)),
	("files",		ctypes.POINTER(ctypes.POINTER(_GFile))),
	("n_files",		ctypes.c_int),
	("hint",		ctypes.POINTER(ctypes.c_char)),] )

command_line = _rpythonic_function_(		"command_line", ctypes.c_int, [
	("application",		ctypes.POINTER(_GApplication)),
	("command_line",		ctypes.POINTER(_GApplicationCommandLine)),] )

local_command_line = _rpythonic_function_(		"local_command_line", ctypes.c_int, [
	("application",		ctypes.POINTER(_GApplication)),
	("arguments",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(ctypes.c_char)))),
	("exit_status",		ctypes.POINTER(ctypes.c_int)),] )

before_emit = _rpythonic_function_(		"before_emit", ctypes.c_void_p, [
	("application",		ctypes.POINTER(_GApplication)),
	("platform_data",		ctypes.POINTER(_GVariant)),] )

after_emit = _rpythonic_function_(		"after_emit", ctypes.c_void_p, [
	("application",		ctypes.POINTER(_GApplication)),
	("platform_data",		ctypes.POINTER(_GVariant)),] )

add_platform_data = _rpythonic_function_(		"add_platform_data", ctypes.c_void_p, [
	("application",		ctypes.POINTER(_GApplication)),
	("builder",		ctypes.POINTER(_GVariantBuilder)),] )

quit_mainloop = _rpythonic_function_(		"quit_mainloop", ctypes.c_void_p, [
	("application",		ctypes.POINTER(_GApplication)),] )

run_mainloop = _rpythonic_function_(		"run_mainloop", ctypes.c_void_p, [
	("application",		ctypes.POINTER(_GApplication)),] )

shutdown = _rpythonic_function_(		"shutdown", ctypes.c_void_p, [
	("application",		ctypes.POINTER(_GApplication)),] )

g_application_get_type = _rpythonic_function_(		"g_application_get_type", ctypes.c_ulong, [] )

g_application_id_is_valid = _rpythonic_function_(		"g_application_id_is_valid", ctypes.c_int, [
	("application_id",		ctypes.POINTER(ctypes.c_char)),] )

g_application_new = _rpythonic_function_(		"g_application_new", ctypes.POINTER(_GApplication), [
	("application_id",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),] )

g_application_get_application_id = _rpythonic_function_(		"g_application_get_application_id", ctypes.POINTER(ctypes.c_char), [
	("application",		ctypes.POINTER(_GApplication)),] )

g_application_set_application_id = _rpythonic_function_(		"g_application_set_application_id", ctypes.c_void_p, [
	("application",		ctypes.POINTER(_GApplication)),
	("application_id",		ctypes.POINTER(ctypes.c_char)),] )

g_application_get_inactivity_timeout = _rpythonic_function_(		"g_application_get_inactivity_timeout", ctypes.c_uint, [
	("application",		ctypes.POINTER(_GApplication)),] )

g_application_set_inactivity_timeout = _rpythonic_function_(		"g_application_set_inactivity_timeout", ctypes.c_void_p, [
	("application",		ctypes.POINTER(_GApplication)),
	("inactivity_timeout",		ctypes.c_uint),] )

g_application_get_flags = _rpythonic_function_(		"g_application_get_flags", ctypes.c_int, [
	("application",		ctypes.POINTER(_GApplication)),] )

g_application_set_flags = _rpythonic_function_(		"g_application_set_flags", ctypes.c_void_p, [
	("application",		ctypes.POINTER(_GApplication)),
	("flags",		ctypes.c_int),] )

g_application_set_action_group = _rpythonic_function_(		"g_application_set_action_group", ctypes.c_void_p, [
	("application",		ctypes.POINTER(_GApplication)),
	("action_group",		ctypes.POINTER(_GActionGroup)),] )

g_application_get_is_registered = _rpythonic_function_(		"g_application_get_is_registered", ctypes.c_int, [
	("application",		ctypes.POINTER(_GApplication)),] )

g_application_get_is_remote = _rpythonic_function_(		"g_application_get_is_remote", ctypes.c_int, [
	("application",		ctypes.POINTER(_GApplication)),] )

g_application_register = _rpythonic_function_(		"g_application_register", ctypes.c_int, [
	("application",		ctypes.POINTER(_GApplication)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_application_hold = _rpythonic_function_(		"g_application_hold", ctypes.c_void_p, [
	("application",		ctypes.POINTER(_GApplication)),] )

g_application_release = _rpythonic_function_(		"g_application_release", ctypes.c_void_p, [
	("application",		ctypes.POINTER(_GApplication)),] )

g_application_activate = _rpythonic_function_(		"g_application_activate", ctypes.c_void_p, [
	("application",		ctypes.POINTER(_GApplication)),] )

g_application_open = _rpythonic_function_(		"g_application_open", ctypes.c_void_p, [
	("application",		ctypes.POINTER(_GApplication)),
	("files",		ctypes.POINTER(ctypes.POINTER(_GFile))),
	("n_files",		ctypes.c_int),
	("hint",		ctypes.POINTER(ctypes.c_char)),] )

g_application_run = _rpythonic_function_(		"g_application_run", ctypes.c_int, [
	("application",		ctypes.POINTER(_GApplication)),
	("argc",		ctypes.c_int),
	("argv",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_application_quit = _rpythonic_function_(		"g_application_quit", ctypes.c_void_p, [
	("application",		ctypes.POINTER(_GApplication)),] )

g_application_get_default = _rpythonic_function_(		"g_application_get_default", ctypes.POINTER(_GApplication), [] )

g_application_set_default = _rpythonic_function_(		"g_application_set_default", ctypes.c_void_p, [
	("application",		ctypes.POINTER(_GApplication)),] )

print_literal = _rpythonic_function_(		"print_literal", ctypes.c_void_p, [
	("cmdline",		ctypes.POINTER(_GApplicationCommandLine)),
	("message",		ctypes.POINTER(ctypes.c_char)),] )

printerr_literal = _rpythonic_function_(		"printerr_literal", ctypes.c_void_p, [
	("cmdline",		ctypes.POINTER(_GApplicationCommandLine)),
	("message",		ctypes.POINTER(ctypes.c_char)),] )

g_application_command_line_get_type = _rpythonic_function_(		"g_application_command_line_get_type", ctypes.c_ulong, [] )

g_application_command_line_get_arguments = _rpythonic_function_(		"g_application_command_line_get_arguments", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("cmdline",		ctypes.POINTER(_GApplicationCommandLine)),
	("argc",		ctypes.POINTER(ctypes.c_int)),] )

g_application_command_line_get_environ = _rpythonic_function_(		"g_application_command_line_get_environ", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("cmdline",		ctypes.POINTER(_GApplicationCommandLine)),] )

g_application_command_line_getenv = _rpythonic_function_(		"g_application_command_line_getenv", ctypes.POINTER(ctypes.c_char), [
	("cmdline",		ctypes.POINTER(_GApplicationCommandLine)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_application_command_line_get_cwd = _rpythonic_function_(		"g_application_command_line_get_cwd", ctypes.POINTER(ctypes.c_char), [
	("cmdline",		ctypes.POINTER(_GApplicationCommandLine)),] )

g_application_command_line_get_is_remote = _rpythonic_function_(		"g_application_command_line_get_is_remote", ctypes.c_int, [
	("cmdline",		ctypes.POINTER(_GApplicationCommandLine)),] )

g_application_command_line_get_exit_status = _rpythonic_function_(		"g_application_command_line_get_exit_status", ctypes.c_int, [
	("cmdline",		ctypes.POINTER(_GApplicationCommandLine)),] )

g_application_command_line_set_exit_status = _rpythonic_function_(		"g_application_command_line_set_exit_status", ctypes.c_void_p, [
	("cmdline",		ctypes.POINTER(_GApplicationCommandLine)),
	("exit_status",		ctypes.c_int),] )

g_application_command_line_get_platform_data = _rpythonic_function_(		"g_application_command_line_get_platform_data", ctypes.POINTER(_GVariant), [
	("cmdline",		ctypes.POINTER(_GApplicationCommandLine)),] )

init = _rpythonic_function_(		"init", ctypes.c_int, [
	("initable",		ctypes.POINTER(_GInitable)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_initable_get_type = _rpythonic_function_(		"g_initable_get_type", ctypes.c_ulong, [] )

g_initable_init = _rpythonic_function_(		"g_initable_init", ctypes.c_int, [
	("initable",		ctypes.POINTER(_GInitable)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_initable_newv = _rpythonic_function_(		"g_initable_newv", ctypes.POINTER(ctypes.c_void_p), [
	("object_type",		ctypes.c_ulong),
	("n_parameters",		ctypes.c_uint),
	("parameters",		ctypes.POINTER(_GParameter)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_initable_new_valist = _rpythonic_function_(		"g_initable_new_valist", ctypes.POINTER(_GObject), [
	("object_type",		ctypes.c_ulong),
	("first_property_name",		ctypes.POINTER(ctypes.c_char)),
	("var_args",		ctypes.c_char),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

init_async = _rpythonic_function_(		"init_async", ctypes.c_void_p, [
	("initable",		ctypes.POINTER(_GAsyncInitable)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

init_finish = _rpythonic_function_(		"init_finish", ctypes.c_int, [
	("initable",		ctypes.POINTER(_GAsyncInitable)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_async_initable_get_type = _rpythonic_function_(		"g_async_initable_get_type", ctypes.c_ulong, [] )

g_async_initable_init_async = _rpythonic_function_(		"g_async_initable_init_async", ctypes.c_void_p, [
	("initable",		ctypes.POINTER(_GAsyncInitable)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_async_initable_init_finish = _rpythonic_function_(		"g_async_initable_init_finish", ctypes.c_int, [
	("initable",		ctypes.POINTER(_GAsyncInitable)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_async_initable_newv_async = _rpythonic_function_(		"g_async_initable_newv_async", ctypes.c_void_p, [
	("object_type",		ctypes.c_ulong),
	("n_parameters",		ctypes.c_uint),
	("parameters",		ctypes.POINTER(_GParameter)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_async_initable_new_valist_async = _rpythonic_function_(		"g_async_initable_new_valist_async", ctypes.c_void_p, [
	("object_type",		ctypes.c_ulong),
	("first_property_name",		ctypes.POINTER(ctypes.c_char)),
	("var_args",		ctypes.c_char),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_async_initable_new_finish = _rpythonic_function_(		"g_async_initable_new_finish", ctypes.POINTER(_GObject), [
	("initable",		ctypes.POINTER(_GAsyncInitable)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

get_user_data = _rpythonic_function_(		"get_user_data", ctypes.POINTER(ctypes.c_void_p), [
	("res",		ctypes.POINTER(_GAsyncResult)),] )

get_source_object = _rpythonic_function_(		"get_source_object", ctypes.POINTER(_GObject), [
	("res",		ctypes.POINTER(_GAsyncResult)),] )

g_async_result_get_type = _rpythonic_function_(		"g_async_result_get_type", ctypes.c_ulong, [] )

g_async_result_get_user_data = _rpythonic_function_(		"g_async_result_get_user_data", ctypes.POINTER(ctypes.c_void_p), [
	("res",		ctypes.POINTER(_GAsyncResult)),] )

g_async_result_get_source_object = _rpythonic_function_(		"g_async_result_get_source_object", ctypes.POINTER(_GObject), [
	("res",		ctypes.POINTER(_GAsyncResult)),] )

read_fn = _rpythonic_function_(		"read_fn", ctypes.c_long, [
	("stream",		ctypes.POINTER(_GInputStream)),
	("buffer",		ctypes.POINTER(ctypes.c_void_p)),
	("count",		ctypes.c_ulong),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

skip = _rpythonic_function_(		"skip", ctypes.c_long, [
	("stream",		ctypes.POINTER(_GInputStream)),
	("count",		ctypes.c_ulong),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

close_fn = _rpythonic_function_(		"close_fn", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GInputStream)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

read_async = _rpythonic_function_(		"read_async", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GInputStream)),
	("buffer",		ctypes.POINTER(ctypes.c_void_p)),
	("count",		ctypes.c_ulong),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

read_finish = _rpythonic_function_(		"read_finish", ctypes.c_long, [
	("stream",		ctypes.POINTER(_GInputStream)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

skip_async = _rpythonic_function_(		"skip_async", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GInputStream)),
	("count",		ctypes.c_ulong),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

skip_finish = _rpythonic_function_(		"skip_finish", ctypes.c_long, [
	("stream",		ctypes.POINTER(_GInputStream)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

close_async = _rpythonic_function_(		"close_async", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GInputStream)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

close_finish = _rpythonic_function_(		"close_finish", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GInputStream)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_input_stream_get_type = _rpythonic_function_(		"g_input_stream_get_type", ctypes.c_ulong, [] )

g_input_stream_read = _rpythonic_function_(		"g_input_stream_read", ctypes.c_long, [
	("stream",		ctypes.POINTER(_GInputStream)),
	("buffer",		ctypes.POINTER(ctypes.c_void_p)),
	("count",		ctypes.c_ulong),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_input_stream_read_all = _rpythonic_function_(		"g_input_stream_read_all", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GInputStream)),
	("buffer",		ctypes.POINTER(ctypes.c_void_p)),
	("count",		ctypes.c_ulong),
	("bytes_read",		ctypes.POINTER(ctypes.c_ulong)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_input_stream_skip = _rpythonic_function_(		"g_input_stream_skip", ctypes.c_long, [
	("stream",		ctypes.POINTER(_GInputStream)),
	("count",		ctypes.c_ulong),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_input_stream_close = _rpythonic_function_(		"g_input_stream_close", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GInputStream)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_input_stream_read_async = _rpythonic_function_(		"g_input_stream_read_async", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GInputStream)),
	("buffer",		ctypes.POINTER(ctypes.c_void_p)),
	("count",		ctypes.c_ulong),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_input_stream_read_finish = _rpythonic_function_(		"g_input_stream_read_finish", ctypes.c_long, [
	("stream",		ctypes.POINTER(_GInputStream)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_input_stream_skip_async = _rpythonic_function_(		"g_input_stream_skip_async", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GInputStream)),
	("count",		ctypes.c_ulong),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_input_stream_skip_finish = _rpythonic_function_(		"g_input_stream_skip_finish", ctypes.c_long, [
	("stream",		ctypes.POINTER(_GInputStream)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_input_stream_close_async = _rpythonic_function_(		"g_input_stream_close_async", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GInputStream)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_input_stream_close_finish = _rpythonic_function_(		"g_input_stream_close_finish", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GInputStream)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_input_stream_is_closed = _rpythonic_function_(		"g_input_stream_is_closed", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GInputStream)),] )

g_input_stream_has_pending = _rpythonic_function_(		"g_input_stream_has_pending", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GInputStream)),] )

g_input_stream_set_pending = _rpythonic_function_(		"g_input_stream_set_pending", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GInputStream)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_input_stream_clear_pending = _rpythonic_function_(		"g_input_stream_clear_pending", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GInputStream)),] )

g_filter_input_stream_get_type = _rpythonic_function_(		"g_filter_input_stream_get_type", ctypes.c_ulong, [] )

g_filter_input_stream_get_base_stream = _rpythonic_function_(		"g_filter_input_stream_get_base_stream", ctypes.POINTER(_GInputStream), [
	("stream",		ctypes.POINTER(_GFilterInputStream)),] )

g_filter_input_stream_get_close_base_stream = _rpythonic_function_(		"g_filter_input_stream_get_close_base_stream", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GFilterInputStream)),] )

g_filter_input_stream_set_close_base_stream = _rpythonic_function_(		"g_filter_input_stream_set_close_base_stream", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GFilterInputStream)),
	("close_base",		ctypes.c_int),] )

fill = _rpythonic_function_(		"fill", ctypes.c_long, [
	("stream",		ctypes.POINTER(_GBufferedInputStream)),
	("count",		ctypes.c_long),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

fill_async = _rpythonic_function_(		"fill_async", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GBufferedInputStream)),
	("count",		ctypes.c_long),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

fill_finish = _rpythonic_function_(		"fill_finish", ctypes.c_long, [
	("stream",		ctypes.POINTER(_GBufferedInputStream)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_buffered_input_stream_get_type = _rpythonic_function_(		"g_buffered_input_stream_get_type", ctypes.c_ulong, [] )

g_buffered_input_stream_new = _rpythonic_function_(		"g_buffered_input_stream_new", ctypes.POINTER(_GInputStream), [
	("base_stream",		ctypes.POINTER(_GInputStream)),] )

g_buffered_input_stream_new_sized = _rpythonic_function_(		"g_buffered_input_stream_new_sized", ctypes.POINTER(_GInputStream), [
	("base_stream",		ctypes.POINTER(_GInputStream)),
	("size",		ctypes.c_ulong),] )

g_buffered_input_stream_get_buffer_size = _rpythonic_function_(		"g_buffered_input_stream_get_buffer_size", ctypes.c_ulong, [
	("stream",		ctypes.POINTER(_GBufferedInputStream)),] )

g_buffered_input_stream_set_buffer_size = _rpythonic_function_(		"g_buffered_input_stream_set_buffer_size", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GBufferedInputStream)),
	("size",		ctypes.c_ulong),] )

g_buffered_input_stream_get_available = _rpythonic_function_(		"g_buffered_input_stream_get_available", ctypes.c_ulong, [
	("stream",		ctypes.POINTER(_GBufferedInputStream)),] )

g_buffered_input_stream_peek = _rpythonic_function_(		"g_buffered_input_stream_peek", ctypes.c_ulong, [
	("stream",		ctypes.POINTER(_GBufferedInputStream)),
	("buffer",		ctypes.POINTER(ctypes.c_void_p)),
	("offset",		ctypes.c_ulong),
	("count",		ctypes.c_ulong),] )

g_buffered_input_stream_peek_buffer = _rpythonic_function_(		"g_buffered_input_stream_peek_buffer", ctypes.POINTER(ctypes.c_void_p), [
	("stream",		ctypes.POINTER(_GBufferedInputStream)),
	("count",		ctypes.POINTER(ctypes.c_ulong)),] )

g_buffered_input_stream_fill = _rpythonic_function_(		"g_buffered_input_stream_fill", ctypes.c_long, [
	("stream",		ctypes.POINTER(_GBufferedInputStream)),
	("count",		ctypes.c_long),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_buffered_input_stream_fill_async = _rpythonic_function_(		"g_buffered_input_stream_fill_async", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GBufferedInputStream)),
	("count",		ctypes.c_long),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_buffered_input_stream_fill_finish = _rpythonic_function_(		"g_buffered_input_stream_fill_finish", ctypes.c_long, [
	("stream",		ctypes.POINTER(_GBufferedInputStream)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_buffered_input_stream_read_byte = _rpythonic_function_(		"g_buffered_input_stream_read_byte", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GBufferedInputStream)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

write_fn = _rpythonic_function_(		"write_fn", ctypes.c_long, [
	("stream",		ctypes.POINTER(_GOutputStream)),
	("buffer",		ctypes.POINTER(ctypes.c_void_p)),
	("count",		ctypes.c_ulong),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

splice = _rpythonic_function_(		"splice", ctypes.c_long, [
	("stream",		ctypes.POINTER(_GOutputStream)),
	("source",		ctypes.POINTER(_GInputStream)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

flush = _rpythonic_function_(		"flush", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GOutputStream)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

write_async = _rpythonic_function_(		"write_async", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GOutputStream)),
	("buffer",		ctypes.POINTER(ctypes.c_void_p)),
	("count",		ctypes.c_ulong),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

write_finish = _rpythonic_function_(		"write_finish", ctypes.c_long, [
	("stream",		ctypes.POINTER(_GOutputStream)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

splice_async = _rpythonic_function_(		"splice_async", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GOutputStream)),
	("source",		ctypes.POINTER(_GInputStream)),
	("flags",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

splice_finish = _rpythonic_function_(		"splice_finish", ctypes.c_long, [
	("stream",		ctypes.POINTER(_GOutputStream)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

flush_async = _rpythonic_function_(		"flush_async", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GOutputStream)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

flush_finish = _rpythonic_function_(		"flush_finish", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GOutputStream)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

_g_reserved6 = _rpythonic_function_(		"_g_reserved6", ctypes.c_void_p, [] )

_g_reserved7 = _rpythonic_function_(		"_g_reserved7", ctypes.c_void_p, [] )

_g_reserved8 = _rpythonic_function_(		"_g_reserved8", ctypes.c_void_p, [] )

g_output_stream_get_type = _rpythonic_function_(		"g_output_stream_get_type", ctypes.c_ulong, [] )

g_output_stream_write = _rpythonic_function_(		"g_output_stream_write", ctypes.c_long, [
	("stream",		ctypes.POINTER(_GOutputStream)),
	("buffer",		ctypes.POINTER(ctypes.c_void_p)),
	("count",		ctypes.c_ulong),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_output_stream_write_all = _rpythonic_function_(		"g_output_stream_write_all", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GOutputStream)),
	("buffer",		ctypes.POINTER(ctypes.c_void_p)),
	("count",		ctypes.c_ulong),
	("bytes_written",		ctypes.POINTER(ctypes.c_ulong)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_output_stream_splice = _rpythonic_function_(		"g_output_stream_splice", ctypes.c_long, [
	("stream",		ctypes.POINTER(_GOutputStream)),
	("source",		ctypes.POINTER(_GInputStream)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_output_stream_flush = _rpythonic_function_(		"g_output_stream_flush", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GOutputStream)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_output_stream_close = _rpythonic_function_(		"g_output_stream_close", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GOutputStream)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_output_stream_write_async = _rpythonic_function_(		"g_output_stream_write_async", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GOutputStream)),
	("buffer",		ctypes.POINTER(ctypes.c_void_p)),
	("count",		ctypes.c_ulong),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_output_stream_write_finish = _rpythonic_function_(		"g_output_stream_write_finish", ctypes.c_long, [
	("stream",		ctypes.POINTER(_GOutputStream)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_output_stream_splice_async = _rpythonic_function_(		"g_output_stream_splice_async", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GOutputStream)),
	("source",		ctypes.POINTER(_GInputStream)),
	("flags",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_output_stream_splice_finish = _rpythonic_function_(		"g_output_stream_splice_finish", ctypes.c_long, [
	("stream",		ctypes.POINTER(_GOutputStream)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_output_stream_flush_async = _rpythonic_function_(		"g_output_stream_flush_async", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GOutputStream)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_output_stream_flush_finish = _rpythonic_function_(		"g_output_stream_flush_finish", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GOutputStream)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_output_stream_close_async = _rpythonic_function_(		"g_output_stream_close_async", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GOutputStream)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_output_stream_close_finish = _rpythonic_function_(		"g_output_stream_close_finish", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GOutputStream)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_output_stream_is_closed = _rpythonic_function_(		"g_output_stream_is_closed", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GOutputStream)),] )

g_output_stream_is_closing = _rpythonic_function_(		"g_output_stream_is_closing", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GOutputStream)),] )

g_output_stream_has_pending = _rpythonic_function_(		"g_output_stream_has_pending", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GOutputStream)),] )

g_output_stream_set_pending = _rpythonic_function_(		"g_output_stream_set_pending", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GOutputStream)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_output_stream_clear_pending = _rpythonic_function_(		"g_output_stream_clear_pending", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GOutputStream)),] )

g_filter_output_stream_get_type = _rpythonic_function_(		"g_filter_output_stream_get_type", ctypes.c_ulong, [] )

g_filter_output_stream_get_base_stream = _rpythonic_function_(		"g_filter_output_stream_get_base_stream", ctypes.POINTER(_GOutputStream), [
	("stream",		ctypes.POINTER(_GFilterOutputStream)),] )

g_filter_output_stream_get_close_base_stream = _rpythonic_function_(		"g_filter_output_stream_get_close_base_stream", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GFilterOutputStream)),] )

g_filter_output_stream_set_close_base_stream = _rpythonic_function_(		"g_filter_output_stream_set_close_base_stream", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GFilterOutputStream)),
	("close_base",		ctypes.c_int),] )

g_buffered_output_stream_get_type = _rpythonic_function_(		"g_buffered_output_stream_get_type", ctypes.c_ulong, [] )

g_buffered_output_stream_new = _rpythonic_function_(		"g_buffered_output_stream_new", ctypes.POINTER(_GOutputStream), [
	("base_stream",		ctypes.POINTER(_GOutputStream)),] )

g_buffered_output_stream_new_sized = _rpythonic_function_(		"g_buffered_output_stream_new_sized", ctypes.POINTER(_GOutputStream), [
	("base_stream",		ctypes.POINTER(_GOutputStream)),
	("size",		ctypes.c_ulong),] )

g_buffered_output_stream_get_buffer_size = _rpythonic_function_(		"g_buffered_output_stream_get_buffer_size", ctypes.c_ulong, [
	("stream",		ctypes.POINTER(_GBufferedOutputStream)),] )

g_buffered_output_stream_set_buffer_size = _rpythonic_function_(		"g_buffered_output_stream_set_buffer_size", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GBufferedOutputStream)),
	("size",		ctypes.c_ulong),] )

g_buffered_output_stream_get_auto_grow = _rpythonic_function_(		"g_buffered_output_stream_get_auto_grow", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GBufferedOutputStream)),] )

g_buffered_output_stream_set_auto_grow = _rpythonic_function_(		"g_buffered_output_stream_set_auto_grow", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GBufferedOutputStream)),
	("auto_grow",		ctypes.c_int),] )

cancelled = _rpythonic_function_(		"cancelled", ctypes.c_void_p, [
	("cancellable",		ctypes.POINTER(_GCancellable)),] )

g_cancellable_get_type = _rpythonic_function_(		"g_cancellable_get_type", ctypes.c_ulong, [] )

g_cancellable_new = _rpythonic_function_(		"g_cancellable_new", ctypes.POINTER(_GCancellable), [] )

g_cancellable_is_cancelled = _rpythonic_function_(		"g_cancellable_is_cancelled", ctypes.c_int, [
	("cancellable",		ctypes.POINTER(_GCancellable)),] )

g_cancellable_set_error_if_cancelled = _rpythonic_function_(		"g_cancellable_set_error_if_cancelled", ctypes.c_int, [
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_cancellable_get_fd = _rpythonic_function_(		"g_cancellable_get_fd", ctypes.c_int, [
	("cancellable",		ctypes.POINTER(_GCancellable)),] )

g_cancellable_make_pollfd = _rpythonic_function_(		"g_cancellable_make_pollfd", ctypes.c_int, [
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("pollfd",		ctypes.POINTER(_GPollFD)),] )

g_cancellable_release_fd = _rpythonic_function_(		"g_cancellable_release_fd", ctypes.c_void_p, [
	("cancellable",		ctypes.POINTER(_GCancellable)),] )

g_cancellable_source_new = _rpythonic_function_(		"g_cancellable_source_new", ctypes.POINTER(_GSource), [
	("cancellable",		ctypes.POINTER(_GCancellable)),] )

g_cancellable_get_current = _rpythonic_function_(		"g_cancellable_get_current", ctypes.POINTER(_GCancellable), [] )

g_cancellable_push_current = _rpythonic_function_(		"g_cancellable_push_current", ctypes.c_void_p, [
	("cancellable",		ctypes.POINTER(_GCancellable)),] )

g_cancellable_pop_current = _rpythonic_function_(		"g_cancellable_pop_current", ctypes.c_void_p, [
	("cancellable",		ctypes.POINTER(_GCancellable)),] )

g_cancellable_reset = _rpythonic_function_(		"g_cancellable_reset", ctypes.c_void_p, [
	("cancellable",		ctypes.POINTER(_GCancellable)),] )

g_cancellable_connect = _rpythonic_function_(		"g_cancellable_connect", ctypes.c_ulong, [
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("data_destroy_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_cancellable_disconnect = _rpythonic_function_(		"g_cancellable_disconnect", ctypes.c_void_p, [
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("handler_id",		ctypes.c_ulong),] )

g_cancellable_cancel = _rpythonic_function_(		"g_cancellable_cancel", ctypes.c_void_p, [
	("cancellable",		ctypes.POINTER(_GCancellable)),] )

convert = _rpythonic_function_(		"convert", ctypes.c_int, [
	("converter",		ctypes.POINTER(_GConverter)),
	("inbuf",		ctypes.POINTER(ctypes.c_void_p)),
	("inbuf_size",		ctypes.c_ulong),
	("outbuf",		ctypes.POINTER(ctypes.c_void_p)),
	("outbuf_size",		ctypes.c_ulong),
	("flags",		ctypes.c_int),
	("bytes_read",		ctypes.POINTER(ctypes.c_ulong)),
	("bytes_written",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

reset = _rpythonic_function_(		"reset", ctypes.c_void_p, [
	("converter",		ctypes.POINTER(_GConverter)),] )

g_converter_get_type = _rpythonic_function_(		"g_converter_get_type", ctypes.c_ulong, [] )

g_converter_convert = _rpythonic_function_(		"g_converter_convert", ctypes.c_int, [
	("converter",		ctypes.POINTER(_GConverter)),
	("inbuf",		ctypes.POINTER(ctypes.c_void_p)),
	("inbuf_size",		ctypes.c_ulong),
	("outbuf",		ctypes.POINTER(ctypes.c_void_p)),
	("outbuf_size",		ctypes.c_ulong),
	("flags",		ctypes.c_int),
	("bytes_read",		ctypes.POINTER(ctypes.c_ulong)),
	("bytes_written",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_converter_reset = _rpythonic_function_(		"g_converter_reset", ctypes.c_void_p, [
	("converter",		ctypes.POINTER(_GConverter)),] )

g_charset_converter_get_type = _rpythonic_function_(		"g_charset_converter_get_type", ctypes.c_ulong, [] )

g_charset_converter_new = _rpythonic_function_(		"g_charset_converter_new", ctypes.POINTER(_GCharsetConverter), [
	("to_charset",		ctypes.POINTER(ctypes.c_char)),
	("from_charset",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_charset_converter_set_use_fallback = _rpythonic_function_(		"g_charset_converter_set_use_fallback", ctypes.c_void_p, [
	("converter",		ctypes.POINTER(_GCharsetConverter)),
	("use_fallback",		ctypes.c_int),] )

g_charset_converter_get_use_fallback = _rpythonic_function_(		"g_charset_converter_get_use_fallback", ctypes.c_int, [
	("converter",		ctypes.POINTER(_GCharsetConverter)),] )

g_charset_converter_get_num_fallbacks = _rpythonic_function_(		"g_charset_converter_get_num_fallbacks", ctypes.c_uint, [
	("converter",		ctypes.POINTER(_GCharsetConverter)),] )

g_content_type_equals = _rpythonic_function_(		"g_content_type_equals", ctypes.c_int, [
	("type1",		ctypes.POINTER(ctypes.c_char)),
	("type2",		ctypes.POINTER(ctypes.c_char)),] )

g_content_type_is_a = _rpythonic_function_(		"g_content_type_is_a", ctypes.c_int, [
	("C_type",		ctypes.POINTER(ctypes.c_char)),
	("supertype",		ctypes.POINTER(ctypes.c_char)),] )

g_content_type_is_unknown = _rpythonic_function_(		"g_content_type_is_unknown", ctypes.c_int, [
	("C_type",		ctypes.POINTER(ctypes.c_char)),] )

g_content_type_get_description = _rpythonic_function_(		"g_content_type_get_description", ctypes.POINTER(ctypes.c_char), [
	("C_type",		ctypes.POINTER(ctypes.c_char)),] )

g_content_type_get_mime_type = _rpythonic_function_(		"g_content_type_get_mime_type", ctypes.POINTER(ctypes.c_char), [
	("C_type",		ctypes.POINTER(ctypes.c_char)),] )

g_content_type_get_icon = _rpythonic_function_(		"g_content_type_get_icon", ctypes.POINTER(_GIcon), [
	("C_type",		ctypes.POINTER(ctypes.c_char)),] )

g_content_type_can_be_executable = _rpythonic_function_(		"g_content_type_can_be_executable", ctypes.c_int, [
	("C_type",		ctypes.POINTER(ctypes.c_char)),] )

g_content_type_from_mime_type = _rpythonic_function_(		"g_content_type_from_mime_type", ctypes.POINTER(ctypes.c_char), [
	("mime_type",		ctypes.POINTER(ctypes.c_char)),] )

g_content_type_guess = _rpythonic_function_(		"g_content_type_guess", ctypes.POINTER(ctypes.c_char), [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("data",		ctypes.POINTER(ctypes.c_ubyte)),
	("data_size",		ctypes.c_ulong),
	("result_uncertain",		ctypes.POINTER(ctypes.c_int)),] )

g_content_type_guess_for_tree = _rpythonic_function_(		"g_content_type_guess_for_tree", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("root",		ctypes.POINTER(_GFile)),] )

g_content_types_get_registered = _rpythonic_function_(		"g_content_types_get_registered", ctypes.POINTER(_GList), [] )

g_converter_input_stream_get_type = _rpythonic_function_(		"g_converter_input_stream_get_type", ctypes.c_ulong, [] )

g_converter_input_stream_new = _rpythonic_function_(		"g_converter_input_stream_new", ctypes.POINTER(_GInputStream), [
	("base_stream",		ctypes.POINTER(_GInputStream)),
	("converter",		ctypes.POINTER(_GConverter)),] )

g_converter_input_stream_get_converter = _rpythonic_function_(		"g_converter_input_stream_get_converter", ctypes.POINTER(_GConverter), [
	("converter_stream",		ctypes.POINTER(_GConverterInputStream)),] )

g_converter_output_stream_get_type = _rpythonic_function_(		"g_converter_output_stream_get_type", ctypes.c_ulong, [] )

g_converter_output_stream_new = _rpythonic_function_(		"g_converter_output_stream_new", ctypes.POINTER(_GOutputStream), [
	("base_stream",		ctypes.POINTER(_GOutputStream)),
	("converter",		ctypes.POINTER(_GConverter)),] )

g_converter_output_stream_get_converter = _rpythonic_function_(		"g_converter_output_stream_get_converter", ctypes.POINTER(_GConverter), [
	("converter_stream",		ctypes.POINTER(_GConverterOutputStream)),] )

access = _rpythonic_function_(		"access", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),
	("__type",		ctypes.c_int),] )

faccessat = _rpythonic_function_(		"faccessat", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__type",		ctypes.c_int),
	("__flag",		ctypes.c_int),] )

lseek = _rpythonic_function_(		"lseek", ctypes.c_int64, [
	("__fd",		ctypes.c_int),
	("__offset",		ctypes.c_int64),
	("__whence",		ctypes.c_int),] )

close = _rpythonic_function_(		"close", ctypes.c_int, [
	("__fd",		ctypes.c_int),] )

read = _rpythonic_function_(		"read", ctypes.c_int64, [
	("__fd",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_void_p)),
	("__nbytes",		ctypes.c_uint64),] )

write = _rpythonic_function_(		"write", ctypes.c_int64, [
	("__fd",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint64),] )

pread = _rpythonic_function_(		"pread", ctypes.c_int64, [
	("__fd",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_void_p)),
	("__nbytes",		ctypes.c_uint64),
	("__offset",		ctypes.c_int64),] )

pwrite = _rpythonic_function_(		"pwrite", ctypes.c_int64, [
	("__fd",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint64),
	("__offset",		ctypes.c_int64),] )

pipe = _rpythonic_function_(		"pipe", ctypes.c_int, [
	("__pipedes",		( ctypes.c_int * 2 )),] )

alarm = _rpythonic_function_(		"alarm", ctypes.c_uint, [
	("__seconds",		ctypes.c_uint),] )

sleep = _rpythonic_function_(		"sleep", ctypes.c_uint, [
	("__seconds",		ctypes.c_uint),] )

ualarm = _rpythonic_function_(		"ualarm", ctypes.c_uint, [
	("__value",		ctypes.c_uint),
	("__interval",		ctypes.c_uint),] )

usleep = _rpythonic_function_(		"usleep", ctypes.c_int, [
	("__useconds",		ctypes.c_uint),] )

pause = _rpythonic_function_(		"pause", ctypes.c_int, [] )

chown = _rpythonic_function_(		"chown", ctypes.c_int, [
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__owner",		ctypes.c_uint),
	("__group",		ctypes.c_uint),] )

fchown = _rpythonic_function_(		"fchown", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__owner",		ctypes.c_uint),
	("__group",		ctypes.c_uint),] )

lchown = _rpythonic_function_(		"lchown", ctypes.c_int, [
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__owner",		ctypes.c_uint),
	("__group",		ctypes.c_uint),] )

fchownat = _rpythonic_function_(		"fchownat", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__owner",		ctypes.c_uint),
	("__group",		ctypes.c_uint),
	("__flag",		ctypes.c_int),] )

chdir = _rpythonic_function_(		"chdir", ctypes.c_int, [
	("__path",		ctypes.POINTER(ctypes.c_char)),] )

fchdir = _rpythonic_function_(		"fchdir", ctypes.c_int, [
	("__fd",		ctypes.c_int),] )

getcwd = _rpythonic_function_(		"getcwd", ctypes.POINTER(ctypes.c_char), [
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__size",		ctypes.c_uint64),] )

getwd = _rpythonic_function_(		"getwd", ctypes.POINTER(ctypes.c_char), [
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

dup2 = _rpythonic_function_(		"dup2", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__fd2",		ctypes.c_int),] )

execve = _rpythonic_function_(		"execve", ctypes.c_int, [
	("__path",		ctypes.POINTER(ctypes.c_char)),
	("__argv",		ctypes.c_char),
	("__envp",		ctypes.c_char),] )

fexecve = _rpythonic_function_(		"fexecve", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__argv",		ctypes.c_char),
	("__envp",		ctypes.c_char),] )

execv = _rpythonic_function_(		"execv", ctypes.c_int, [
	("__path",		ctypes.POINTER(ctypes.c_char)),
	("__argv",		ctypes.c_char),] )

execvp = _rpythonic_function_(		"execvp", ctypes.c_int, [
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__argv",		ctypes.c_char),] )

nice = _rpythonic_function_(		"nice", ctypes.c_int, [
	("__inc",		ctypes.c_int),] )

_exit = _rpythonic_function_(		"_exit", ctypes.c_void_p, [
	("__status",		ctypes.c_int),] )

pathconf = _rpythonic_function_(		"pathconf", ctypes.c_int64, [
	("__path",		ctypes.POINTER(ctypes.c_char)),
	("__name",		ctypes.c_int),] )

fpathconf = _rpythonic_function_(		"fpathconf", ctypes.c_int64, [
	("__fd",		ctypes.c_int),
	("__name",		ctypes.c_int),] )

sysconf = _rpythonic_function_(		"sysconf", ctypes.c_int64, [
	("__name",		ctypes.c_int),] )

confstr = _rpythonic_function_(		"confstr", ctypes.c_uint64, [
	("__name",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint64),] )

getpid = _rpythonic_function_(		"getpid", ctypes.c_int, [] )

getsid = _rpythonic_function_(		"getsid", ctypes.c_int, [
	("__pid",		ctypes.c_int),] )

getuid = _rpythonic_function_(		"getuid", ctypes.c_uint, [] )

geteuid = _rpythonic_function_(		"geteuid", ctypes.c_uint, [] )

getgid = _rpythonic_function_(		"getgid", ctypes.c_uint, [] )

getegid = _rpythonic_function_(		"getegid", ctypes.c_uint, [] )

getgroups = _rpythonic_function_(		"getgroups", ctypes.c_int, [
	("__size",		ctypes.c_int),
	("__list",		ctypes.c_uint),] )

getppid = _rpythonic_function_(		"getppid", ctypes.c_int, [] )

getpgrp = _rpythonic_function_(		"getpgrp", ctypes.c_int, [] )

getpgid = _rpythonic_function_(		"getpgid", ctypes.c_int, [
	("__pid",		ctypes.c_int),] )

setpgid = _rpythonic_function_(		"setpgid", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__pgid",		ctypes.c_int),] )

setpgrp = _rpythonic_function_(		"setpgrp", ctypes.c_int, [] )

setsid = _rpythonic_function_(		"setsid", ctypes.c_int, [] )

setuid = _rpythonic_function_(		"setuid", ctypes.c_int, [
	("__uid",		ctypes.c_uint),] )

setreuid = _rpythonic_function_(		"setreuid", ctypes.c_int, [
	("__ruid",		ctypes.c_uint),
	("__euid",		ctypes.c_uint),] )

seteuid = _rpythonic_function_(		"seteuid", ctypes.c_int, [
	("__uid",		ctypes.c_uint),] )

setgid = _rpythonic_function_(		"setgid", ctypes.c_int, [
	("__gid",		ctypes.c_uint),] )

setregid = _rpythonic_function_(		"setregid", ctypes.c_int, [
	("__rgid",		ctypes.c_uint),
	("__egid",		ctypes.c_uint),] )

setegid = _rpythonic_function_(		"setegid", ctypes.c_int, [
	("__gid",		ctypes.c_uint),] )

fork = _rpythonic_function_(		"fork", ctypes.c_int, [] )

vfork = _rpythonic_function_(		"vfork", ctypes.c_int, [] )

ttyname = _rpythonic_function_(		"ttyname", ctypes.POINTER(ctypes.c_char), [
	("__fd",		ctypes.c_int),] )

ttyname_r = _rpythonic_function_(		"ttyname_r", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__buflen",		ctypes.c_uint64),] )

isatty = _rpythonic_function_(		"isatty", ctypes.c_int, [
	("__fd",		ctypes.c_int),] )

ttyslot = _rpythonic_function_(		"ttyslot", ctypes.c_int, [] )

link = _rpythonic_function_(		"link", ctypes.c_int, [
	("__from",		ctypes.POINTER(ctypes.c_char)),
	("__to",		ctypes.POINTER(ctypes.c_char)),] )

linkat = _rpythonic_function_(		"linkat", ctypes.c_int, [
	("__fromfd",		ctypes.c_int),
	("__from",		ctypes.POINTER(ctypes.c_char)),
	("__tofd",		ctypes.c_int),
	("__to",		ctypes.POINTER(ctypes.c_char)),
	("__flags",		ctypes.c_int),] )

symlink = _rpythonic_function_(		"symlink", ctypes.c_int, [
	("__from",		ctypes.POINTER(ctypes.c_char)),
	("__to",		ctypes.POINTER(ctypes.c_char)),] )

readlink = _rpythonic_function_(		"readlink", ctypes.c_int64, [
	("__path",		ctypes.POINTER(ctypes.c_char)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint64),] )

symlinkat = _rpythonic_function_(		"symlinkat", ctypes.c_int, [
	("__from",		ctypes.POINTER(ctypes.c_char)),
	("__tofd",		ctypes.c_int),
	("__to",		ctypes.POINTER(ctypes.c_char)),] )

readlinkat = _rpythonic_function_(		"readlinkat", ctypes.c_int64, [
	("__fd",		ctypes.c_int),
	("__path",		ctypes.POINTER(ctypes.c_char)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint64),] )

unlink = _rpythonic_function_(		"unlink", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),] )

unlinkat = _rpythonic_function_(		"unlinkat", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__name",		ctypes.POINTER(ctypes.c_char)),
	("__flag",		ctypes.c_int),] )

rmdir = _rpythonic_function_(		"rmdir", ctypes.c_int, [
	("__path",		ctypes.POINTER(ctypes.c_char)),] )

tcgetpgrp = _rpythonic_function_(		"tcgetpgrp", ctypes.c_int, [
	("__fd",		ctypes.c_int),] )

tcsetpgrp = _rpythonic_function_(		"tcsetpgrp", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__pgrp_id",		ctypes.c_int),] )

getlogin = _rpythonic_function_(		"getlogin", ctypes.POINTER(ctypes.c_char), [] )

getlogin_r = _rpythonic_function_(		"getlogin_r", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),
	("__name_len",		ctypes.c_uint64),] )

setlogin = _rpythonic_function_(		"setlogin", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),] )

getopt = _rpythonic_function_(		"getopt", ctypes.c_int, [
	("___argc",		ctypes.c_int),
	("___argv",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__shortopts",		ctypes.POINTER(ctypes.c_char)),] )

gethostname = _rpythonic_function_(		"gethostname", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint64),] )

sethostname = _rpythonic_function_(		"sethostname", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint64),] )

sethostid = _rpythonic_function_(		"sethostid", ctypes.c_int, [
	("__id",		ctypes.c_int64),] )

getdomainname = _rpythonic_function_(		"getdomainname", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint64),] )

setdomainname = _rpythonic_function_(		"setdomainname", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint64),] )

vhangup = _rpythonic_function_(		"vhangup", ctypes.c_int, [] )

revoke = _rpythonic_function_(		"revoke", ctypes.c_int, [
	("__file",		ctypes.POINTER(ctypes.c_char)),] )

profil = _rpythonic_function_(		"profil", ctypes.c_int, [
	("__sample_buffer",		ctypes.POINTER(ctypes.c_uint16)),
	("__size",		ctypes.c_uint64),
	("__offset",		ctypes.c_uint64),
	("__scale",		ctypes.c_uint),] )

acct = _rpythonic_function_(		"acct", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),] )

getusershell = _rpythonic_function_(		"getusershell", ctypes.POINTER(ctypes.c_char), [] )

endusershell = _rpythonic_function_(		"endusershell", ctypes.c_void_p, [] )

setusershell = _rpythonic_function_(		"setusershell", ctypes.c_void_p, [] )

daemon = _rpythonic_function_(		"daemon", ctypes.c_int, [
	("__nochdir",		ctypes.c_int),
	("__noclose",		ctypes.c_int),] )

chroot = _rpythonic_function_(		"chroot", ctypes.c_int, [
	("__path",		ctypes.POINTER(ctypes.c_char)),] )

getpass = _rpythonic_function_(		"getpass", ctypes.POINTER(ctypes.c_char), [
	("__prompt",		ctypes.POINTER(ctypes.c_char)),] )

fsync = _rpythonic_function_(		"fsync", ctypes.c_int, [
	("__fd",		ctypes.c_int),] )

gethostid = _rpythonic_function_(		"gethostid", ctypes.c_int64, [] )

sync = _rpythonic_function_(		"sync", ctypes.c_void_p, [] )

getpagesize = _rpythonic_function_(		"getpagesize", ctypes.c_int, [] )

getdtablesize = _rpythonic_function_(		"getdtablesize", ctypes.c_int, [] )

truncate = _rpythonic_function_(		"truncate", ctypes.c_int, [
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__length",		ctypes.c_int64),] )

ftruncate = _rpythonic_function_(		"ftruncate", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__length",		ctypes.c_int64),] )

brk = _rpythonic_function_(		"brk", ctypes.c_int, [("__addr",		ctypes.c_void_p)] )

sbrk = _rpythonic_function_(		"sbrk", ctypes.POINTER(ctypes.c_void_p), [
	("__delta",		ctypes.c_int64),] )

lockf = _rpythonic_function_(		"lockf", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__cmd",		ctypes.c_int),
	("__len",		ctypes.c_int64),] )

fdatasync = _rpythonic_function_(		"fdatasync", ctypes.c_int, [
	("__fildes",		ctypes.c_int),] )

ctermid = _rpythonic_function_(		"ctermid", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

select = _rpythonic_function_(		"select", ctypes.c_int, [
	("__nfds",		ctypes.c_int),
	("__readfds",		ctypes.POINTER(fd_set)),
	("__writefds",		ctypes.POINTER(fd_set)),
	("__exceptfds",		ctypes.POINTER(fd_set)),
	("__timeout",		ctypes.POINTER(timeval)),] )

pselect = _rpythonic_function_(		"pselect", ctypes.c_int, [
	("__nfds",		ctypes.c_int),
	("__readfds",		ctypes.POINTER(fd_set)),
	("__writefds",		ctypes.POINTER(fd_set)),
	("__exceptfds",		ctypes.POINTER(fd_set)),
	("__timeout",		ctypes.POINTER(timespec)),
	("__sigmask",		ctypes.POINTER(__sigset_t)),] )

gnu_dev_major = _rpythonic_function_(		"gnu_dev_major", ctypes.c_uint, [
	("__dev",		ctypes.c_ulonglong),] )

gnu_dev_minor = _rpythonic_function_(		"gnu_dev_minor", ctypes.c_uint, [
	("__dev",		ctypes.c_ulonglong),] )

gnu_dev_makedev = _rpythonic_function_(		"gnu_dev_makedev", ctypes.c_ulonglong, [
	("__major",		ctypes.c_uint),
	("__minor",		ctypes.c_uint),] )

g_credentials_get_type = _rpythonic_function_(		"g_credentials_get_type", ctypes.c_ulong, [] )

g_credentials_new = _rpythonic_function_(		"g_credentials_new", ctypes.POINTER(_GCredentials), [] )

g_credentials_to_string = _rpythonic_function_(		"g_credentials_to_string", ctypes.POINTER(ctypes.c_char), [
	("credentials",		ctypes.POINTER(_GCredentials)),] )

g_credentials_get_native = _rpythonic_function_(		"g_credentials_get_native", ctypes.POINTER(ctypes.c_void_p), [
	("credentials",		ctypes.POINTER(_GCredentials)),
	("native_type",		ctypes.c_int),] )

g_credentials_set_native = _rpythonic_function_(		"g_credentials_set_native", ctypes.c_void_p, [
	("credentials",		ctypes.POINTER(_GCredentials)),
	("native_type",		ctypes.c_int),
	("native",		ctypes.POINTER(ctypes.c_void_p)),] )

g_credentials_is_same_user = _rpythonic_function_(		"g_credentials_is_same_user", ctypes.c_int, [
	("credentials",		ctypes.POINTER(_GCredentials)),
	("other_credentials",		ctypes.POINTER(_GCredentials)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_credentials_get_unix_user = _rpythonic_function_(		"g_credentials_get_unix_user", ctypes.c_uint, [
	("credentials",		ctypes.POINTER(_GCredentials)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_credentials_set_unix_user = _rpythonic_function_(		"g_credentials_set_unix_user", ctypes.c_int, [
	("credentials",		ctypes.POINTER(_GCredentials)),
	("uid",		ctypes.c_uint),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_data_input_stream_get_type = _rpythonic_function_(		"g_data_input_stream_get_type", ctypes.c_ulong, [] )

g_data_input_stream_new = _rpythonic_function_(		"g_data_input_stream_new", ctypes.POINTER(_GDataInputStream), [
	("base_stream",		ctypes.POINTER(_GInputStream)),] )

g_data_input_stream_set_byte_order = _rpythonic_function_(		"g_data_input_stream_set_byte_order", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GDataInputStream)),
	("order",		ctypes.c_int),] )

g_data_input_stream_get_byte_order = _rpythonic_function_(		"g_data_input_stream_get_byte_order", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GDataInputStream)),] )

g_data_input_stream_set_newline_type = _rpythonic_function_(		"g_data_input_stream_set_newline_type", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GDataInputStream)),
	("C_type",		ctypes.c_int),] )

g_data_input_stream_get_newline_type = _rpythonic_function_(		"g_data_input_stream_get_newline_type", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GDataInputStream)),] )

g_data_input_stream_read_byte = _rpythonic_function_(		"g_data_input_stream_read_byte", ctypes.c_ubyte, [
	("stream",		ctypes.POINTER(_GDataInputStream)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_data_input_stream_read_int16 = _rpythonic_function_(		"g_data_input_stream_read_int16", ctypes.c_short, [
	("stream",		ctypes.POINTER(_GDataInputStream)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_data_input_stream_read_uint16 = _rpythonic_function_(		"g_data_input_stream_read_uint16", ctypes.c_ushort, [
	("stream",		ctypes.POINTER(_GDataInputStream)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_data_input_stream_read_int32 = _rpythonic_function_(		"g_data_input_stream_read_int32", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GDataInputStream)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_data_input_stream_read_uint32 = _rpythonic_function_(		"g_data_input_stream_read_uint32", ctypes.c_uint, [
	("stream",		ctypes.POINTER(_GDataInputStream)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_data_input_stream_read_int64 = _rpythonic_function_(		"g_data_input_stream_read_int64", ctypes.c_long, [
	("stream",		ctypes.POINTER(_GDataInputStream)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_data_input_stream_read_uint64 = _rpythonic_function_(		"g_data_input_stream_read_uint64", ctypes.c_ulong, [
	("stream",		ctypes.POINTER(_GDataInputStream)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_data_input_stream_read_line = _rpythonic_function_(		"g_data_input_stream_read_line", ctypes.POINTER(ctypes.c_char), [
	("stream",		ctypes.POINTER(_GDataInputStream)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_data_input_stream_read_line_utf8 = _rpythonic_function_(		"g_data_input_stream_read_line_utf8", ctypes.POINTER(ctypes.c_char), [
	("stream",		ctypes.POINTER(_GDataInputStream)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_data_input_stream_read_line_async = _rpythonic_function_(		"g_data_input_stream_read_line_async", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GDataInputStream)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_data_input_stream_read_line_finish = _rpythonic_function_(		"g_data_input_stream_read_line_finish", ctypes.POINTER(ctypes.c_char), [
	("stream",		ctypes.POINTER(_GDataInputStream)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_data_input_stream_read_line_finish_utf8 = _rpythonic_function_(		"g_data_input_stream_read_line_finish_utf8", ctypes.POINTER(ctypes.c_char), [
	("stream",		ctypes.POINTER(_GDataInputStream)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_data_input_stream_read_until = _rpythonic_function_(		"g_data_input_stream_read_until", ctypes.POINTER(ctypes.c_char), [
	("stream",		ctypes.POINTER(_GDataInputStream)),
	("stop_chars",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_data_input_stream_read_until_async = _rpythonic_function_(		"g_data_input_stream_read_until_async", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GDataInputStream)),
	("stop_chars",		ctypes.POINTER(ctypes.c_char)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_data_input_stream_read_until_finish = _rpythonic_function_(		"g_data_input_stream_read_until_finish", ctypes.POINTER(ctypes.c_char), [
	("stream",		ctypes.POINTER(_GDataInputStream)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_data_input_stream_read_upto = _rpythonic_function_(		"g_data_input_stream_read_upto", ctypes.POINTER(ctypes.c_char), [
	("stream",		ctypes.POINTER(_GDataInputStream)),
	("stop_chars",		ctypes.POINTER(ctypes.c_char)),
	("stop_chars_len",		ctypes.c_long),
	("length",		ctypes.POINTER(ctypes.c_ulong)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_data_input_stream_read_upto_async = _rpythonic_function_(		"g_data_input_stream_read_upto_async", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GDataInputStream)),
	("stop_chars",		ctypes.POINTER(ctypes.c_char)),
	("stop_chars_len",		ctypes.c_long),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_data_input_stream_read_upto_finish = _rpythonic_function_(		"g_data_input_stream_read_upto_finish", ctypes.POINTER(ctypes.c_char), [
	("stream",		ctypes.POINTER(_GDataInputStream)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_data_output_stream_get_type = _rpythonic_function_(		"g_data_output_stream_get_type", ctypes.c_ulong, [] )

g_data_output_stream_new = _rpythonic_function_(		"g_data_output_stream_new", ctypes.POINTER(_GDataOutputStream), [
	("base_stream",		ctypes.POINTER(_GOutputStream)),] )

g_data_output_stream_set_byte_order = _rpythonic_function_(		"g_data_output_stream_set_byte_order", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GDataOutputStream)),
	("order",		ctypes.c_int),] )

g_data_output_stream_get_byte_order = _rpythonic_function_(		"g_data_output_stream_get_byte_order", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GDataOutputStream)),] )

g_data_output_stream_put_byte = _rpythonic_function_(		"g_data_output_stream_put_byte", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GDataOutputStream)),
	("data",		ctypes.c_ubyte),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_data_output_stream_put_int16 = _rpythonic_function_(		"g_data_output_stream_put_int16", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GDataOutputStream)),
	("data",		ctypes.c_short),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_data_output_stream_put_uint16 = _rpythonic_function_(		"g_data_output_stream_put_uint16", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GDataOutputStream)),
	("data",		ctypes.c_ushort),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_data_output_stream_put_int32 = _rpythonic_function_(		"g_data_output_stream_put_int32", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GDataOutputStream)),
	("data",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_data_output_stream_put_uint32 = _rpythonic_function_(		"g_data_output_stream_put_uint32", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GDataOutputStream)),
	("data",		ctypes.c_uint),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_data_output_stream_put_int64 = _rpythonic_function_(		"g_data_output_stream_put_int64", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GDataOutputStream)),
	("data",		ctypes.c_long),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_data_output_stream_put_uint64 = _rpythonic_function_(		"g_data_output_stream_put_uint64", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GDataOutputStream)),
	("data",		ctypes.c_ulong),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_data_output_stream_put_string = _rpythonic_function_(		"g_data_output_stream_put_string", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GDataOutputStream)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_is_address = _rpythonic_function_(		"g_dbus_is_address", ctypes.c_int, [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_is_supported_address = _rpythonic_function_(		"g_dbus_is_supported_address", ctypes.c_int, [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_address_get_stream = _rpythonic_function_(		"g_dbus_address_get_stream", ctypes.c_void_p, [
	("address",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_dbus_address_get_stream_finish = _rpythonic_function_(		"g_dbus_address_get_stream_finish", ctypes.POINTER(_GIOStream), [
	("res",		ctypes.POINTER(_GAsyncResult)),
	("out_guid",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_address_get_stream_sync = _rpythonic_function_(		"g_dbus_address_get_stream_sync", ctypes.POINTER(_GIOStream), [
	("address",		ctypes.POINTER(ctypes.c_char)),
	("out_guid",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_address_get_for_bus_sync = _rpythonic_function_(		"g_dbus_address_get_for_bus_sync", ctypes.POINTER(ctypes.c_char), [
	("bus_type",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_auth_observer_get_type = _rpythonic_function_(		"g_dbus_auth_observer_get_type", ctypes.c_ulong, [] )

g_dbus_auth_observer_new = _rpythonic_function_(		"g_dbus_auth_observer_new", ctypes.POINTER(_GDBusAuthObserver), [] )

g_dbus_auth_observer_authorize_authenticated_peer = _rpythonic_function_(		"g_dbus_auth_observer_authorize_authenticated_peer", ctypes.c_int, [
	("observer",		ctypes.POINTER(_GDBusAuthObserver)),
	("stream",		ctypes.POINTER(_GIOStream)),
	("credentials",		ctypes.POINTER(_GCredentials)),] )

g_dbus_connection_get_type = _rpythonic_function_(		"g_dbus_connection_get_type", ctypes.c_ulong, [] )

g_bus_get = _rpythonic_function_(		"g_bus_get", ctypes.c_void_p, [
	("bus_type",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_bus_get_finish = _rpythonic_function_(		"g_bus_get_finish", ctypes.POINTER(_GDBusConnection), [
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_bus_get_sync = _rpythonic_function_(		"g_bus_get_sync", ctypes.POINTER(_GDBusConnection), [
	("bus_type",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_connection_new = _rpythonic_function_(		"g_dbus_connection_new", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GIOStream)),
	("guid",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("observer",		ctypes.POINTER(_GDBusAuthObserver)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_dbus_connection_new_finish = _rpythonic_function_(		"g_dbus_connection_new_finish", ctypes.POINTER(_GDBusConnection), [
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_connection_new_sync = _rpythonic_function_(		"g_dbus_connection_new_sync", ctypes.POINTER(_GDBusConnection), [
	("stream",		ctypes.POINTER(_GIOStream)),
	("guid",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("observer",		ctypes.POINTER(_GDBusAuthObserver)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_connection_new_for_address = _rpythonic_function_(		"g_dbus_connection_new_for_address", ctypes.c_void_p, [
	("address",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("observer",		ctypes.POINTER(_GDBusAuthObserver)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_dbus_connection_new_for_address_finish = _rpythonic_function_(		"g_dbus_connection_new_for_address_finish", ctypes.POINTER(_GDBusConnection), [
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_connection_new_for_address_sync = _rpythonic_function_(		"g_dbus_connection_new_for_address_sync", ctypes.POINTER(_GDBusConnection), [
	("address",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("observer",		ctypes.POINTER(_GDBusAuthObserver)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_connection_start_message_processing = _rpythonic_function_(		"g_dbus_connection_start_message_processing", ctypes.c_void_p, [
	("connection",		ctypes.POINTER(_GDBusConnection)),] )

g_dbus_connection_is_closed = _rpythonic_function_(		"g_dbus_connection_is_closed", ctypes.c_int, [
	("connection",		ctypes.POINTER(_GDBusConnection)),] )

g_dbus_connection_get_stream = _rpythonic_function_(		"g_dbus_connection_get_stream", ctypes.POINTER(_GIOStream), [
	("connection",		ctypes.POINTER(_GDBusConnection)),] )

g_dbus_connection_get_guid = _rpythonic_function_(		"g_dbus_connection_get_guid", ctypes.POINTER(ctypes.c_char), [
	("connection",		ctypes.POINTER(_GDBusConnection)),] )

g_dbus_connection_get_unique_name = _rpythonic_function_(		"g_dbus_connection_get_unique_name", ctypes.POINTER(ctypes.c_char), [
	("connection",		ctypes.POINTER(_GDBusConnection)),] )

g_dbus_connection_get_peer_credentials = _rpythonic_function_(		"g_dbus_connection_get_peer_credentials", ctypes.POINTER(_GCredentials), [
	("connection",		ctypes.POINTER(_GDBusConnection)),] )

g_dbus_connection_get_exit_on_close = _rpythonic_function_(		"g_dbus_connection_get_exit_on_close", ctypes.c_int, [
	("connection",		ctypes.POINTER(_GDBusConnection)),] )

g_dbus_connection_set_exit_on_close = _rpythonic_function_(		"g_dbus_connection_set_exit_on_close", ctypes.c_void_p, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("exit_on_close",		ctypes.c_int),] )

g_dbus_connection_get_capabilities = _rpythonic_function_(		"g_dbus_connection_get_capabilities", ctypes.c_int, [
	("connection",		ctypes.POINTER(_GDBusConnection)),] )

g_dbus_connection_close = _rpythonic_function_(		"g_dbus_connection_close", ctypes.c_void_p, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_dbus_connection_close_finish = _rpythonic_function_(		"g_dbus_connection_close_finish", ctypes.c_int, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_connection_close_sync = _rpythonic_function_(		"g_dbus_connection_close_sync", ctypes.c_int, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_connection_flush = _rpythonic_function_(		"g_dbus_connection_flush", ctypes.c_void_p, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_dbus_connection_flush_finish = _rpythonic_function_(		"g_dbus_connection_flush_finish", ctypes.c_int, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_connection_flush_sync = _rpythonic_function_(		"g_dbus_connection_flush_sync", ctypes.c_int, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_connection_send_message = _rpythonic_function_(		"g_dbus_connection_send_message", ctypes.c_int, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("message",		ctypes.POINTER(_GDBusMessage)),
	("flags",		ctypes.c_int),
	("out_serial",		ctypes.POINTER(ctypes.c_uint)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_connection_send_message_with_reply = _rpythonic_function_(		"g_dbus_connection_send_message_with_reply", ctypes.c_void_p, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("message",		ctypes.POINTER(_GDBusMessage)),
	("flags",		ctypes.c_int),
	("timeout_msec",		ctypes.c_int),
	("out_serial",		ctypes.POINTER(ctypes.c_uint)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_dbus_connection_send_message_with_reply_finish = _rpythonic_function_(		"g_dbus_connection_send_message_with_reply_finish", ctypes.POINTER(_GDBusMessage), [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_connection_send_message_with_reply_sync = _rpythonic_function_(		"g_dbus_connection_send_message_with_reply_sync", ctypes.POINTER(_GDBusMessage), [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("message",		ctypes.POINTER(_GDBusMessage)),
	("flags",		ctypes.c_int),
	("timeout_msec",		ctypes.c_int),
	("out_serial",		ctypes.POINTER(ctypes.c_uint)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_connection_emit_signal = _rpythonic_function_(		"g_dbus_connection_emit_signal", ctypes.c_int, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("destination_bus_name",		ctypes.POINTER(ctypes.c_char)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("interface_name",		ctypes.POINTER(ctypes.c_char)),
	("signal_name",		ctypes.POINTER(ctypes.c_char)),
	("parameters",		ctypes.POINTER(_GVariant)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_connection_call = _rpythonic_function_(		"g_dbus_connection_call", ctypes.c_void_p, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("bus_name",		ctypes.POINTER(ctypes.c_char)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("interface_name",		ctypes.POINTER(ctypes.c_char)),
	("method_name",		ctypes.POINTER(ctypes.c_char)),
	("parameters",		ctypes.POINTER(_GVariant)),
	("reply_type",		ctypes.POINTER(_GVariantType)),
	("flags",		ctypes.c_int),
	("timeout_msec",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_dbus_connection_call_finish = _rpythonic_function_(		"g_dbus_connection_call_finish", ctypes.POINTER(_GVariant), [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_connection_call_sync = _rpythonic_function_(		"g_dbus_connection_call_sync", ctypes.POINTER(_GVariant), [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("bus_name",		ctypes.POINTER(ctypes.c_char)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("interface_name",		ctypes.POINTER(ctypes.c_char)),
	("method_name",		ctypes.POINTER(ctypes.c_char)),
	("parameters",		ctypes.POINTER(_GVariant)),
	("reply_type",		ctypes.POINTER(_GVariantType)),
	("flags",		ctypes.c_int),
	("timeout_msec",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_connection_call_with_unix_fd_list = _rpythonic_function_(		"g_dbus_connection_call_with_unix_fd_list", ctypes.c_void_p, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("bus_name",		ctypes.POINTER(ctypes.c_char)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("interface_name",		ctypes.POINTER(ctypes.c_char)),
	("method_name",		ctypes.POINTER(ctypes.c_char)),
	("parameters",		ctypes.POINTER(_GVariant)),
	("reply_type",		ctypes.POINTER(_GVariantType)),
	("flags",		ctypes.c_int),
	("timeout_msec",		ctypes.c_int),
	("fd_list",		ctypes.POINTER(_GUnixFDList)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_dbus_connection_call_with_unix_fd_list_finish = _rpythonic_function_(		"g_dbus_connection_call_with_unix_fd_list_finish", ctypes.POINTER(_GVariant), [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("out_fd_list",		ctypes.POINTER(ctypes.POINTER(_GUnixFDList))),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_connection_call_with_unix_fd_list_sync = _rpythonic_function_(		"g_dbus_connection_call_with_unix_fd_list_sync", ctypes.POINTER(_GVariant), [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("bus_name",		ctypes.POINTER(ctypes.c_char)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("interface_name",		ctypes.POINTER(ctypes.c_char)),
	("method_name",		ctypes.POINTER(ctypes.c_char)),
	("parameters",		ctypes.POINTER(_GVariant)),
	("reply_type",		ctypes.POINTER(_GVariantType)),
	("flags",		ctypes.c_int),
	("timeout_msec",		ctypes.c_int),
	("fd_list",		ctypes.POINTER(_GUnixFDList)),
	("out_fd_list",		ctypes.POINTER(ctypes.POINTER(_GUnixFDList))),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

GDBusInterfaceMethodCallFunc = _rpythonic_function_(		"GDBusInterfaceMethodCallFunc", ctypes.c_void_p, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("sender",		ctypes.POINTER(ctypes.c_char)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("interface_name",		ctypes.POINTER(ctypes.c_char)),
	("method_name",		ctypes.POINTER(ctypes.c_char)),
	("parameters",		ctypes.POINTER(_GVariant)),
	("invocation",		ctypes.POINTER(_GDBusMethodInvocation)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GDBusInterfaceGetPropertyFunc = _rpythonic_function_(		"GDBusInterfaceGetPropertyFunc", ctypes.POINTER(_GVariant), [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("sender",		ctypes.POINTER(ctypes.c_char)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("interface_name",		ctypes.POINTER(ctypes.c_char)),
	("property_name",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GDBusInterfaceSetPropertyFunc = _rpythonic_function_(		"GDBusInterfaceSetPropertyFunc", ctypes.c_int, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("sender",		ctypes.POINTER(ctypes.c_char)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("interface_name",		ctypes.POINTER(ctypes.c_char)),
	("property_name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(_GVariant)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_dbus_connection_register_object = _rpythonic_function_(		"g_dbus_connection_register_object", ctypes.c_uint, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("interface_info",		ctypes.POINTER(_GDBusInterfaceInfo)),
	("vtable",		ctypes.POINTER(_GDBusInterfaceVTable)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("user_data_free_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_connection_unregister_object = _rpythonic_function_(		"g_dbus_connection_unregister_object", ctypes.c_int, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("registration_id",		ctypes.c_uint),] )

GDBusSubtreeEnumerateFunc = _rpythonic_function_(		"GDBusSubtreeEnumerateFunc", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("sender",		ctypes.POINTER(ctypes.c_char)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GDBusSubtreeIntrospectFunc = _rpythonic_function_(		"GDBusSubtreeIntrospectFunc", ctypes.POINTER(ctypes.POINTER(_GDBusInterfaceInfo)), [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("sender",		ctypes.POINTER(ctypes.c_char)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("node",		ctypes.POINTER(ctypes.c_char)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GDBusSubtreeDispatchFunc = _rpythonic_function_(		"GDBusSubtreeDispatchFunc", ctypes.POINTER(_GDBusInterfaceVTable), [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("sender",		ctypes.POINTER(ctypes.c_char)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("interface_name",		ctypes.POINTER(ctypes.c_char)),
	("node",		ctypes.POINTER(ctypes.c_char)),
	("out_user_data",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_dbus_connection_register_subtree = _rpythonic_function_(		"g_dbus_connection_register_subtree", ctypes.c_uint, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("vtable",		ctypes.POINTER(_GDBusSubtreeVTable)),
	("flags",		ctypes.c_int),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("user_data_free_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_connection_unregister_subtree = _rpythonic_function_(		"g_dbus_connection_unregister_subtree", ctypes.c_int, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("registration_id",		ctypes.c_uint),] )

GDBusSignalCallback = _rpythonic_function_(		"GDBusSignalCallback", ctypes.c_void_p, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("sender_name",		ctypes.POINTER(ctypes.c_char)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("interface_name",		ctypes.POINTER(ctypes.c_char)),
	("signal_name",		ctypes.POINTER(ctypes.c_char)),
	("parameters",		ctypes.POINTER(_GVariant)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_dbus_connection_signal_subscribe = _rpythonic_function_(		"g_dbus_connection_signal_subscribe", ctypes.c_uint, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("sender",		ctypes.POINTER(ctypes.c_char)),
	("interface_name",		ctypes.POINTER(ctypes.c_char)),
	("member",		ctypes.POINTER(ctypes.c_char)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("arg0",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GDBusConnection),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(_GVariant),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("user_data_free_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_dbus_connection_signal_unsubscribe = _rpythonic_function_(		"g_dbus_connection_signal_unsubscribe", ctypes.c_void_p, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("subscription_id",		ctypes.c_uint),] )

GDBusMessageFilterFunction = _rpythonic_function_(		"GDBusMessageFilterFunction", ctypes.POINTER(_GDBusMessage), [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("message",		ctypes.POINTER(_GDBusMessage)),
	("incoming",		ctypes.c_int),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_dbus_connection_add_filter = _rpythonic_function_(		"g_dbus_connection_add_filter", ctypes.c_uint, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("filter_function",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_GDBusMessage), ctypes.POINTER(_GDBusConnection),ctypes.POINTER(_GDBusMessage),ctypes.c_int,ctypes.POINTER(ctypes.c_void_p),))),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("user_data_free_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_dbus_connection_remove_filter = _rpythonic_function_(		"g_dbus_connection_remove_filter", ctypes.c_void_p, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("filter_id",		ctypes.c_uint),] )

g_dbus_error_quark = _rpythonic_function_(		"g_dbus_error_quark", ctypes.c_uint, [] )

g_dbus_error_is_remote_error = _rpythonic_function_(		"g_dbus_error_is_remote_error", ctypes.c_int, [
	("error",		ctypes.POINTER(_GError)),] )

g_dbus_error_get_remote_error = _rpythonic_function_(		"g_dbus_error_get_remote_error", ctypes.POINTER(ctypes.c_char), [
	("error",		ctypes.POINTER(_GError)),] )

g_dbus_error_strip_remote_error = _rpythonic_function_(		"g_dbus_error_strip_remote_error", ctypes.c_int, [
	("error",		ctypes.POINTER(_GError)),] )

g_dbus_error_register_error = _rpythonic_function_(		"g_dbus_error_register_error", ctypes.c_int, [
	("error_domain",		ctypes.c_uint),
	("error_code",		ctypes.c_int),
	("dbus_error_name",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_error_unregister_error = _rpythonic_function_(		"g_dbus_error_unregister_error", ctypes.c_int, [
	("error_domain",		ctypes.c_uint),
	("error_code",		ctypes.c_int),
	("dbus_error_name",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_error_register_error_domain = _rpythonic_function_(		"g_dbus_error_register_error_domain", ctypes.c_void_p, [
	("error_domain_quark_name",		ctypes.POINTER(ctypes.c_char)),
	("quark_volatile",		ctypes.POINTER(ctypes.c_ulong)),
	("entries",		ctypes.POINTER(_GDBusErrorEntry)),
	("num_entries",		ctypes.c_uint),] )

g_dbus_error_new_for_dbus_error = _rpythonic_function_(		"g_dbus_error_new_for_dbus_error", ctypes.POINTER(_GError), [
	("dbus_error_name",		ctypes.POINTER(ctypes.c_char)),
	("dbus_error_message",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_error_set_dbus_error_valist = _rpythonic_function_(		"g_dbus_error_set_dbus_error_valist", ctypes.c_void_p, [
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),
	("dbus_error_name",		ctypes.POINTER(ctypes.c_char)),
	("dbus_error_message",		ctypes.POINTER(ctypes.c_char)),
	("format",		ctypes.POINTER(ctypes.c_char)),
	("var_args",		ctypes.c_char),] )

g_dbus_error_encode_gerror = _rpythonic_function_(		"g_dbus_error_encode_gerror", ctypes.POINTER(ctypes.c_char), [
	("error",		ctypes.POINTER(_GError)),] )

g_dbus_annotation_info_lookup = _rpythonic_function_(		"g_dbus_annotation_info_lookup", ctypes.POINTER(ctypes.c_char), [
	("annotations",		ctypes.POINTER(ctypes.POINTER(_GDBusAnnotationInfo))),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_interface_info_lookup_method = _rpythonic_function_(		"g_dbus_interface_info_lookup_method", ctypes.POINTER(_GDBusMethodInfo), [
	("info",		ctypes.POINTER(_GDBusInterfaceInfo)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_interface_info_lookup_signal = _rpythonic_function_(		"g_dbus_interface_info_lookup_signal", ctypes.POINTER(_GDBusSignalInfo), [
	("info",		ctypes.POINTER(_GDBusInterfaceInfo)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_interface_info_lookup_property = _rpythonic_function_(		"g_dbus_interface_info_lookup_property", ctypes.POINTER(_GDBusPropertyInfo), [
	("info",		ctypes.POINTER(_GDBusInterfaceInfo)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_interface_info_cache_build = _rpythonic_function_(		"g_dbus_interface_info_cache_build", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GDBusInterfaceInfo)),] )

g_dbus_interface_info_cache_release = _rpythonic_function_(		"g_dbus_interface_info_cache_release", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GDBusInterfaceInfo)),] )

g_dbus_interface_info_generate_xml = _rpythonic_function_(		"g_dbus_interface_info_generate_xml", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GDBusInterfaceInfo)),
	("indent",		ctypes.c_uint),
	("string_builder",		ctypes.POINTER(_GString)),] )

g_dbus_node_info_new_for_xml = _rpythonic_function_(		"g_dbus_node_info_new_for_xml", ctypes.POINTER(_GDBusNodeInfo), [
	("xml_data",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_node_info_lookup_interface = _rpythonic_function_(		"g_dbus_node_info_lookup_interface", ctypes.POINTER(_GDBusInterfaceInfo), [
	("info",		ctypes.POINTER(_GDBusNodeInfo)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_node_info_generate_xml = _rpythonic_function_(		"g_dbus_node_info_generate_xml", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GDBusNodeInfo)),
	("indent",		ctypes.c_uint),
	("string_builder",		ctypes.POINTER(_GString)),] )

g_dbus_node_info_ref = _rpythonic_function_(		"g_dbus_node_info_ref", ctypes.POINTER(_GDBusNodeInfo), [
	("info",		ctypes.POINTER(_GDBusNodeInfo)),] )

g_dbus_interface_info_ref = _rpythonic_function_(		"g_dbus_interface_info_ref", ctypes.POINTER(_GDBusInterfaceInfo), [
	("info",		ctypes.POINTER(_GDBusInterfaceInfo)),] )

g_dbus_method_info_ref = _rpythonic_function_(		"g_dbus_method_info_ref", ctypes.POINTER(_GDBusMethodInfo), [
	("info",		ctypes.POINTER(_GDBusMethodInfo)),] )

g_dbus_signal_info_ref = _rpythonic_function_(		"g_dbus_signal_info_ref", ctypes.POINTER(_GDBusSignalInfo), [
	("info",		ctypes.POINTER(_GDBusSignalInfo)),] )

g_dbus_property_info_ref = _rpythonic_function_(		"g_dbus_property_info_ref", ctypes.POINTER(_GDBusPropertyInfo), [
	("info",		ctypes.POINTER(_GDBusPropertyInfo)),] )

g_dbus_arg_info_ref = _rpythonic_function_(		"g_dbus_arg_info_ref", ctypes.POINTER(_GDBusArgInfo), [
	("info",		ctypes.POINTER(_GDBusArgInfo)),] )

g_dbus_annotation_info_ref = _rpythonic_function_(		"g_dbus_annotation_info_ref", ctypes.POINTER(_GDBusAnnotationInfo), [
	("info",		ctypes.POINTER(_GDBusAnnotationInfo)),] )

g_dbus_node_info_unref = _rpythonic_function_(		"g_dbus_node_info_unref", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GDBusNodeInfo)),] )

g_dbus_interface_info_unref = _rpythonic_function_(		"g_dbus_interface_info_unref", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GDBusInterfaceInfo)),] )

g_dbus_method_info_unref = _rpythonic_function_(		"g_dbus_method_info_unref", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GDBusMethodInfo)),] )

g_dbus_signal_info_unref = _rpythonic_function_(		"g_dbus_signal_info_unref", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GDBusSignalInfo)),] )

g_dbus_property_info_unref = _rpythonic_function_(		"g_dbus_property_info_unref", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GDBusPropertyInfo)),] )

g_dbus_arg_info_unref = _rpythonic_function_(		"g_dbus_arg_info_unref", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GDBusArgInfo)),] )

g_dbus_annotation_info_unref = _rpythonic_function_(		"g_dbus_annotation_info_unref", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GDBusAnnotationInfo)),] )

g_dbus_node_info_get_type = _rpythonic_function_(		"g_dbus_node_info_get_type", ctypes.c_ulong, [] )

g_dbus_interface_info_get_type = _rpythonic_function_(		"g_dbus_interface_info_get_type", ctypes.c_ulong, [] )

g_dbus_method_info_get_type = _rpythonic_function_(		"g_dbus_method_info_get_type", ctypes.c_ulong, [] )

g_dbus_signal_info_get_type = _rpythonic_function_(		"g_dbus_signal_info_get_type", ctypes.c_ulong, [] )

g_dbus_property_info_get_type = _rpythonic_function_(		"g_dbus_property_info_get_type", ctypes.c_ulong, [] )

g_dbus_arg_info_get_type = _rpythonic_function_(		"g_dbus_arg_info_get_type", ctypes.c_ulong, [] )

g_dbus_annotation_info_get_type = _rpythonic_function_(		"g_dbus_annotation_info_get_type", ctypes.c_ulong, [] )

g_dbus_message_get_type = _rpythonic_function_(		"g_dbus_message_get_type", ctypes.c_ulong, [] )

g_dbus_message_new = _rpythonic_function_(		"g_dbus_message_new", ctypes.POINTER(_GDBusMessage), [] )

g_dbus_message_new_signal = _rpythonic_function_(		"g_dbus_message_new_signal", ctypes.POINTER(_GDBusMessage), [
	("path",		ctypes.POINTER(ctypes.c_char)),
	("interface_",		ctypes.POINTER(ctypes.c_char)),
	("signal",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_message_new_method_call = _rpythonic_function_(		"g_dbus_message_new_method_call", ctypes.POINTER(_GDBusMessage), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("path",		ctypes.POINTER(ctypes.c_char)),
	("interface_",		ctypes.POINTER(ctypes.c_char)),
	("method",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_message_new_method_reply = _rpythonic_function_(		"g_dbus_message_new_method_reply", ctypes.POINTER(_GDBusMessage), [
	("method_call_message",		ctypes.POINTER(_GDBusMessage)),] )

g_dbus_message_new_method_error_valist = _rpythonic_function_(		"g_dbus_message_new_method_error_valist", ctypes.POINTER(_GDBusMessage), [
	("method_call_message",		ctypes.POINTER(_GDBusMessage)),
	("error_name",		ctypes.POINTER(ctypes.c_char)),
	("error_message_format",		ctypes.POINTER(ctypes.c_char)),
	("var_args",		ctypes.c_char),] )

g_dbus_message_new_method_error_literal = _rpythonic_function_(		"g_dbus_message_new_method_error_literal", ctypes.POINTER(_GDBusMessage), [
	("method_call_message",		ctypes.POINTER(_GDBusMessage)),
	("error_name",		ctypes.POINTER(ctypes.c_char)),
	("error_message",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_message_print = _rpythonic_function_(		"g_dbus_message_print", ctypes.POINTER(ctypes.c_char), [
	("message",		ctypes.POINTER(_GDBusMessage)),
	("indent",		ctypes.c_uint),] )

g_dbus_message_get_locked = _rpythonic_function_(		"g_dbus_message_get_locked", ctypes.c_int, [
	("message",		ctypes.POINTER(_GDBusMessage)),] )

g_dbus_message_lock = _rpythonic_function_(		"g_dbus_message_lock", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GDBusMessage)),] )

g_dbus_message_copy = _rpythonic_function_(		"g_dbus_message_copy", ctypes.POINTER(_GDBusMessage), [
	("message",		ctypes.POINTER(_GDBusMessage)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_message_get_byte_order = _rpythonic_function_(		"g_dbus_message_get_byte_order", ctypes.c_int, [
	("message",		ctypes.POINTER(_GDBusMessage)),] )

g_dbus_message_set_byte_order = _rpythonic_function_(		"g_dbus_message_set_byte_order", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GDBusMessage)),
	("byte_order",		ctypes.c_int),] )

g_dbus_message_get_message_type = _rpythonic_function_(		"g_dbus_message_get_message_type", ctypes.c_int, [
	("message",		ctypes.POINTER(_GDBusMessage)),] )

g_dbus_message_set_message_type = _rpythonic_function_(		"g_dbus_message_set_message_type", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GDBusMessage)),
	("C_type",		ctypes.c_int),] )

g_dbus_message_get_flags = _rpythonic_function_(		"g_dbus_message_get_flags", ctypes.c_int, [
	("message",		ctypes.POINTER(_GDBusMessage)),] )

g_dbus_message_set_flags = _rpythonic_function_(		"g_dbus_message_set_flags", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GDBusMessage)),
	("flags",		ctypes.c_int),] )

g_dbus_message_get_serial = _rpythonic_function_(		"g_dbus_message_get_serial", ctypes.c_uint, [
	("message",		ctypes.POINTER(_GDBusMessage)),] )

g_dbus_message_set_serial = _rpythonic_function_(		"g_dbus_message_set_serial", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GDBusMessage)),
	("serial",		ctypes.c_uint),] )

g_dbus_message_get_header = _rpythonic_function_(		"g_dbus_message_get_header", ctypes.POINTER(_GVariant), [
	("message",		ctypes.POINTER(_GDBusMessage)),
	("header_field",		ctypes.c_int),] )

g_dbus_message_set_header = _rpythonic_function_(		"g_dbus_message_set_header", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GDBusMessage)),
	("header_field",		ctypes.c_int),
	("value",		ctypes.POINTER(_GVariant)),] )

g_dbus_message_get_header_fields = _rpythonic_function_(		"g_dbus_message_get_header_fields", ctypes.POINTER(ctypes.c_ubyte), [
	("message",		ctypes.POINTER(_GDBusMessage)),] )

g_dbus_message_get_body = _rpythonic_function_(		"g_dbus_message_get_body", ctypes.POINTER(_GVariant), [
	("message",		ctypes.POINTER(_GDBusMessage)),] )

g_dbus_message_set_body = _rpythonic_function_(		"g_dbus_message_set_body", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GDBusMessage)),
	("body",		ctypes.POINTER(_GVariant)),] )

g_dbus_message_get_unix_fd_list = _rpythonic_function_(		"g_dbus_message_get_unix_fd_list", ctypes.POINTER(_GUnixFDList), [
	("message",		ctypes.POINTER(_GDBusMessage)),] )

g_dbus_message_set_unix_fd_list = _rpythonic_function_(		"g_dbus_message_set_unix_fd_list", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GDBusMessage)),
	("fd_list",		ctypes.POINTER(_GUnixFDList)),] )

g_dbus_message_get_reply_serial = _rpythonic_function_(		"g_dbus_message_get_reply_serial", ctypes.c_uint, [
	("message",		ctypes.POINTER(_GDBusMessage)),] )

g_dbus_message_set_reply_serial = _rpythonic_function_(		"g_dbus_message_set_reply_serial", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GDBusMessage)),
	("value",		ctypes.c_uint),] )

g_dbus_message_get_interface = _rpythonic_function_(		"g_dbus_message_get_interface", ctypes.POINTER(ctypes.c_char), [
	("message",		ctypes.POINTER(_GDBusMessage)),] )

g_dbus_message_set_interface = _rpythonic_function_(		"g_dbus_message_set_interface", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GDBusMessage)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_message_get_member = _rpythonic_function_(		"g_dbus_message_get_member", ctypes.POINTER(ctypes.c_char), [
	("message",		ctypes.POINTER(_GDBusMessage)),] )

g_dbus_message_set_member = _rpythonic_function_(		"g_dbus_message_set_member", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GDBusMessage)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_message_get_path = _rpythonic_function_(		"g_dbus_message_get_path", ctypes.POINTER(ctypes.c_char), [
	("message",		ctypes.POINTER(_GDBusMessage)),] )

g_dbus_message_set_path = _rpythonic_function_(		"g_dbus_message_set_path", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GDBusMessage)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_message_set_error_name = _rpythonic_function_(		"g_dbus_message_set_error_name", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GDBusMessage)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_message_get_signature = _rpythonic_function_(		"g_dbus_message_get_signature", ctypes.POINTER(ctypes.c_char), [
	("message",		ctypes.POINTER(_GDBusMessage)),] )

g_dbus_message_set_signature = _rpythonic_function_(		"g_dbus_message_set_signature", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GDBusMessage)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_message_get_num_unix_fds = _rpythonic_function_(		"g_dbus_message_get_num_unix_fds", ctypes.c_uint, [
	("message",		ctypes.POINTER(_GDBusMessage)),] )

g_dbus_message_set_num_unix_fds = _rpythonic_function_(		"g_dbus_message_set_num_unix_fds", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GDBusMessage)),
	("value",		ctypes.c_uint),] )

g_dbus_message_get_arg0 = _rpythonic_function_(		"g_dbus_message_get_arg0", ctypes.POINTER(ctypes.c_char), [
	("message",		ctypes.POINTER(_GDBusMessage)),] )

g_dbus_message_new_from_blob = _rpythonic_function_(		"g_dbus_message_new_from_blob", ctypes.POINTER(_GDBusMessage), [
	("blob",		ctypes.POINTER(ctypes.c_ubyte)),
	("blob_len",		ctypes.c_ulong),
	("capabilities",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_message_bytes_needed = _rpythonic_function_(		"g_dbus_message_bytes_needed", ctypes.c_long, [
	("blob",		ctypes.POINTER(ctypes.c_ubyte)),
	("blob_len",		ctypes.c_ulong),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_message_to_blob = _rpythonic_function_(		"g_dbus_message_to_blob", ctypes.POINTER(ctypes.c_ubyte), [
	("message",		ctypes.POINTER(_GDBusMessage)),
	("out_size",		ctypes.POINTER(ctypes.c_ulong)),
	("capabilities",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_message_to_gerror = _rpythonic_function_(		"g_dbus_message_to_gerror", ctypes.c_int, [
	("message",		ctypes.POINTER(_GDBusMessage)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_method_invocation_get_type = _rpythonic_function_(		"g_dbus_method_invocation_get_type", ctypes.c_ulong, [] )

g_dbus_method_invocation_get_sender = _rpythonic_function_(		"g_dbus_method_invocation_get_sender", ctypes.POINTER(ctypes.c_char), [
	("invocation",		ctypes.POINTER(_GDBusMethodInvocation)),] )

g_dbus_method_invocation_get_object_path = _rpythonic_function_(		"g_dbus_method_invocation_get_object_path", ctypes.POINTER(ctypes.c_char), [
	("invocation",		ctypes.POINTER(_GDBusMethodInvocation)),] )

g_dbus_method_invocation_get_interface_name = _rpythonic_function_(		"g_dbus_method_invocation_get_interface_name", ctypes.POINTER(ctypes.c_char), [
	("invocation",		ctypes.POINTER(_GDBusMethodInvocation)),] )

g_dbus_method_invocation_get_method_name = _rpythonic_function_(		"g_dbus_method_invocation_get_method_name", ctypes.POINTER(ctypes.c_char), [
	("invocation",		ctypes.POINTER(_GDBusMethodInvocation)),] )

g_dbus_method_invocation_get_method_info = _rpythonic_function_(		"g_dbus_method_invocation_get_method_info", ctypes.POINTER(_GDBusMethodInfo), [
	("invocation",		ctypes.POINTER(_GDBusMethodInvocation)),] )

g_dbus_method_invocation_get_connection = _rpythonic_function_(		"g_dbus_method_invocation_get_connection", ctypes.POINTER(_GDBusConnection), [
	("invocation",		ctypes.POINTER(_GDBusMethodInvocation)),] )

g_dbus_method_invocation_get_message = _rpythonic_function_(		"g_dbus_method_invocation_get_message", ctypes.POINTER(_GDBusMessage), [
	("invocation",		ctypes.POINTER(_GDBusMethodInvocation)),] )

g_dbus_method_invocation_get_parameters = _rpythonic_function_(		"g_dbus_method_invocation_get_parameters", ctypes.POINTER(_GVariant), [
	("invocation",		ctypes.POINTER(_GDBusMethodInvocation)),] )

g_dbus_method_invocation_get_user_data = _rpythonic_function_(		"g_dbus_method_invocation_get_user_data", ctypes.POINTER(ctypes.c_void_p), [
	("invocation",		ctypes.POINTER(_GDBusMethodInvocation)),] )

g_dbus_method_invocation_return_value = _rpythonic_function_(		"g_dbus_method_invocation_return_value", ctypes.c_void_p, [
	("invocation",		ctypes.POINTER(_GDBusMethodInvocation)),
	("parameters",		ctypes.POINTER(_GVariant)),] )

g_dbus_method_invocation_return_value_with_unix_fd_list = _rpythonic_function_(		"g_dbus_method_invocation_return_value_with_unix_fd_list", ctypes.c_void_p, [
	("invocation",		ctypes.POINTER(_GDBusMethodInvocation)),
	("parameters",		ctypes.POINTER(_GVariant)),
	("fd_list",		ctypes.POINTER(_GUnixFDList)),] )

g_dbus_method_invocation_return_error_valist = _rpythonic_function_(		"g_dbus_method_invocation_return_error_valist", ctypes.c_void_p, [
	("invocation",		ctypes.POINTER(_GDBusMethodInvocation)),
	("domain",		ctypes.c_uint),
	("code",		ctypes.c_int),
	("format",		ctypes.POINTER(ctypes.c_char)),
	("var_args",		ctypes.c_char),] )

g_dbus_method_invocation_return_error_literal = _rpythonic_function_(		"g_dbus_method_invocation_return_error_literal", ctypes.c_void_p, [
	("invocation",		ctypes.POINTER(_GDBusMethodInvocation)),
	("domain",		ctypes.c_uint),
	("code",		ctypes.c_int),
	("message",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_method_invocation_return_gerror = _rpythonic_function_(		"g_dbus_method_invocation_return_gerror", ctypes.c_void_p, [
	("invocation",		ctypes.POINTER(_GDBusMethodInvocation)),
	("error",		ctypes.POINTER(_GError)),] )

g_dbus_method_invocation_take_error = _rpythonic_function_(		"g_dbus_method_invocation_take_error", ctypes.c_void_p, [
	("invocation",		ctypes.POINTER(_GDBusMethodInvocation)),
	("error",		ctypes.POINTER(_GError)),] )

g_dbus_method_invocation_return_dbus_error = _rpythonic_function_(		"g_dbus_method_invocation_return_dbus_error", ctypes.c_void_p, [
	("invocation",		ctypes.POINTER(_GDBusMethodInvocation)),
	("error_name",		ctypes.POINTER(ctypes.c_char)),
	("error_message",		ctypes.POINTER(ctypes.c_char)),] )

GBusAcquiredCallback = _rpythonic_function_(		"GBusAcquiredCallback", ctypes.c_void_p, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GBusNameAcquiredCallback = _rpythonic_function_(		"GBusNameAcquiredCallback", ctypes.c_void_p, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GBusNameLostCallback = _rpythonic_function_(		"GBusNameLostCallback", ctypes.c_void_p, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_bus_own_name = _rpythonic_function_(		"g_bus_own_name", ctypes.c_uint, [
	("bus_type",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("bus_acquired_handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GDBusConnection),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),)),
	("name_acquired_handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GDBusConnection),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),)),
	("name_lost_handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GDBusConnection),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("user_data_free_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_bus_own_name_on_connection = _rpythonic_function_(		"g_bus_own_name_on_connection", ctypes.c_uint, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("name_acquired_handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GDBusConnection),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),)),
	("name_lost_handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GDBusConnection),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("user_data_free_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_bus_own_name_with_closures = _rpythonic_function_(		"g_bus_own_name_with_closures", ctypes.c_uint, [
	("bus_type",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("bus_acquired_closure",		ctypes.POINTER(_GClosure)),
	("name_acquired_closure",		ctypes.POINTER(_GClosure)),
	("name_lost_closure",		ctypes.POINTER(_GClosure)),] )

g_bus_own_name_on_connection_with_closures = _rpythonic_function_(		"g_bus_own_name_on_connection_with_closures", ctypes.c_uint, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("name_acquired_closure",		ctypes.POINTER(_GClosure)),
	("name_lost_closure",		ctypes.POINTER(_GClosure)),] )

g_bus_unown_name = _rpythonic_function_(		"g_bus_unown_name", ctypes.c_void_p, [
	("owner_id",		ctypes.c_uint),] )

GBusNameAppearedCallback = _rpythonic_function_(		"GBusNameAppearedCallback", ctypes.c_void_p, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("name_owner",		ctypes.POINTER(ctypes.c_char)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GBusNameVanishedCallback = _rpythonic_function_(		"GBusNameVanishedCallback", ctypes.c_void_p, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_bus_watch_name = _rpythonic_function_(		"g_bus_watch_name", ctypes.c_uint, [
	("bus_type",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("name_appeared_handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GDBusConnection),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),)),
	("name_vanished_handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GDBusConnection),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("user_data_free_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_bus_watch_name_on_connection = _rpythonic_function_(		"g_bus_watch_name_on_connection", ctypes.c_uint, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("name_appeared_handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GDBusConnection),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),)),
	("name_vanished_handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GDBusConnection),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("user_data_free_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_bus_watch_name_with_closures = _rpythonic_function_(		"g_bus_watch_name_with_closures", ctypes.c_uint, [
	("bus_type",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("name_appeared_closure",		ctypes.POINTER(_GClosure)),
	("name_vanished_closure",		ctypes.POINTER(_GClosure)),] )

g_bus_watch_name_on_connection_with_closures = _rpythonic_function_(		"g_bus_watch_name_on_connection_with_closures", ctypes.c_uint, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("name_appeared_closure",		ctypes.POINTER(_GClosure)),
	("name_vanished_closure",		ctypes.POINTER(_GClosure)),] )

g_bus_unwatch_name = _rpythonic_function_(		"g_bus_unwatch_name", ctypes.c_void_p, [
	("watcher_id",		ctypes.c_uint),] )

g_properties_changed = _rpythonic_function_(		"g_properties_changed", ctypes.c_void_p, [
	("proxy",		ctypes.POINTER(_GDBusProxy)),
	("changed_properties",		ctypes.POINTER(_GVariant)),
	("invalidated_properties",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_signal = _rpythonic_function_(		"g_signal", ctypes.c_void_p, [
	("proxy",		ctypes.POINTER(_GDBusProxy)),
	("sender_name",		ctypes.POINTER(ctypes.c_char)),
	("signal_name",		ctypes.POINTER(ctypes.c_char)),
	("parameters",		ctypes.POINTER(_GVariant)),] )

g_dbus_proxy_get_type = _rpythonic_function_(		"g_dbus_proxy_get_type", ctypes.c_ulong, [] )

g_dbus_proxy_new = _rpythonic_function_(		"g_dbus_proxy_new", ctypes.c_void_p, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("flags",		ctypes.c_int),
	("info",		ctypes.POINTER(_GDBusInterfaceInfo)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("interface_name",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_dbus_proxy_new_finish = _rpythonic_function_(		"g_dbus_proxy_new_finish", ctypes.POINTER(_GDBusProxy), [
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_proxy_new_sync = _rpythonic_function_(		"g_dbus_proxy_new_sync", ctypes.POINTER(_GDBusProxy), [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("flags",		ctypes.c_int),
	("info",		ctypes.POINTER(_GDBusInterfaceInfo)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("interface_name",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_proxy_new_for_bus = _rpythonic_function_(		"g_dbus_proxy_new_for_bus", ctypes.c_void_p, [
	("bus_type",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("info",		ctypes.POINTER(_GDBusInterfaceInfo)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("interface_name",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_dbus_proxy_new_for_bus_finish = _rpythonic_function_(		"g_dbus_proxy_new_for_bus_finish", ctypes.POINTER(_GDBusProxy), [
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_proxy_new_for_bus_sync = _rpythonic_function_(		"g_dbus_proxy_new_for_bus_sync", ctypes.POINTER(_GDBusProxy), [
	("bus_type",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("info",		ctypes.POINTER(_GDBusInterfaceInfo)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("interface_name",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_proxy_get_connection = _rpythonic_function_(		"g_dbus_proxy_get_connection", ctypes.POINTER(_GDBusConnection), [
	("proxy",		ctypes.POINTER(_GDBusProxy)),] )

g_dbus_proxy_get_flags = _rpythonic_function_(		"g_dbus_proxy_get_flags", ctypes.c_int, [
	("proxy",		ctypes.POINTER(_GDBusProxy)),] )

g_dbus_proxy_get_name = _rpythonic_function_(		"g_dbus_proxy_get_name", ctypes.POINTER(ctypes.c_char), [
	("proxy",		ctypes.POINTER(_GDBusProxy)),] )

g_dbus_proxy_get_name_owner = _rpythonic_function_(		"g_dbus_proxy_get_name_owner", ctypes.POINTER(ctypes.c_char), [
	("proxy",		ctypes.POINTER(_GDBusProxy)),] )

g_dbus_proxy_get_object_path = _rpythonic_function_(		"g_dbus_proxy_get_object_path", ctypes.POINTER(ctypes.c_char), [
	("proxy",		ctypes.POINTER(_GDBusProxy)),] )

g_dbus_proxy_get_interface_name = _rpythonic_function_(		"g_dbus_proxy_get_interface_name", ctypes.POINTER(ctypes.c_char), [
	("proxy",		ctypes.POINTER(_GDBusProxy)),] )

g_dbus_proxy_get_default_timeout = _rpythonic_function_(		"g_dbus_proxy_get_default_timeout", ctypes.c_int, [
	("proxy",		ctypes.POINTER(_GDBusProxy)),] )

g_dbus_proxy_set_default_timeout = _rpythonic_function_(		"g_dbus_proxy_set_default_timeout", ctypes.c_void_p, [
	("proxy",		ctypes.POINTER(_GDBusProxy)),
	("timeout_msec",		ctypes.c_int),] )

g_dbus_proxy_get_interface_info = _rpythonic_function_(		"g_dbus_proxy_get_interface_info", ctypes.POINTER(_GDBusInterfaceInfo), [
	("proxy",		ctypes.POINTER(_GDBusProxy)),] )

g_dbus_proxy_set_interface_info = _rpythonic_function_(		"g_dbus_proxy_set_interface_info", ctypes.c_void_p, [
	("proxy",		ctypes.POINTER(_GDBusProxy)),
	("info",		ctypes.POINTER(_GDBusInterfaceInfo)),] )

g_dbus_proxy_get_cached_property = _rpythonic_function_(		"g_dbus_proxy_get_cached_property", ctypes.POINTER(_GVariant), [
	("proxy",		ctypes.POINTER(_GDBusProxy)),
	("property_name",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_proxy_set_cached_property = _rpythonic_function_(		"g_dbus_proxy_set_cached_property", ctypes.c_void_p, [
	("proxy",		ctypes.POINTER(_GDBusProxy)),
	("property_name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(_GVariant)),] )

g_dbus_proxy_get_cached_property_names = _rpythonic_function_(		"g_dbus_proxy_get_cached_property_names", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("proxy",		ctypes.POINTER(_GDBusProxy)),] )

g_dbus_proxy_call = _rpythonic_function_(		"g_dbus_proxy_call", ctypes.c_void_p, [
	("proxy",		ctypes.POINTER(_GDBusProxy)),
	("method_name",		ctypes.POINTER(ctypes.c_char)),
	("parameters",		ctypes.POINTER(_GVariant)),
	("flags",		ctypes.c_int),
	("timeout_msec",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_dbus_proxy_call_finish = _rpythonic_function_(		"g_dbus_proxy_call_finish", ctypes.POINTER(_GVariant), [
	("proxy",		ctypes.POINTER(_GDBusProxy)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_proxy_call_sync = _rpythonic_function_(		"g_dbus_proxy_call_sync", ctypes.POINTER(_GVariant), [
	("proxy",		ctypes.POINTER(_GDBusProxy)),
	("method_name",		ctypes.POINTER(ctypes.c_char)),
	("parameters",		ctypes.POINTER(_GVariant)),
	("flags",		ctypes.c_int),
	("timeout_msec",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_proxy_call_with_unix_fd_list = _rpythonic_function_(		"g_dbus_proxy_call_with_unix_fd_list", ctypes.c_void_p, [
	("proxy",		ctypes.POINTER(_GDBusProxy)),
	("method_name",		ctypes.POINTER(ctypes.c_char)),
	("parameters",		ctypes.POINTER(_GVariant)),
	("flags",		ctypes.c_int),
	("timeout_msec",		ctypes.c_int),
	("fd_list",		ctypes.POINTER(_GUnixFDList)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_dbus_proxy_call_with_unix_fd_list_finish = _rpythonic_function_(		"g_dbus_proxy_call_with_unix_fd_list_finish", ctypes.POINTER(_GVariant), [
	("proxy",		ctypes.POINTER(_GDBusProxy)),
	("out_fd_list",		ctypes.POINTER(ctypes.POINTER(_GUnixFDList))),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_proxy_call_with_unix_fd_list_sync = _rpythonic_function_(		"g_dbus_proxy_call_with_unix_fd_list_sync", ctypes.POINTER(_GVariant), [
	("proxy",		ctypes.POINTER(_GDBusProxy)),
	("method_name",		ctypes.POINTER(ctypes.c_char)),
	("parameters",		ctypes.POINTER(_GVariant)),
	("flags",		ctypes.c_int),
	("timeout_msec",		ctypes.c_int),
	("fd_list",		ctypes.POINTER(_GUnixFDList)),
	("out_fd_list",		ctypes.POINTER(ctypes.POINTER(_GUnixFDList))),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_server_get_type = _rpythonic_function_(		"g_dbus_server_get_type", ctypes.c_ulong, [] )

g_dbus_server_new_sync = _rpythonic_function_(		"g_dbus_server_new_sync", ctypes.POINTER(_GDBusServer), [
	("address",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("guid",		ctypes.POINTER(ctypes.c_char)),
	("observer",		ctypes.POINTER(_GDBusAuthObserver)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_server_get_client_address = _rpythonic_function_(		"g_dbus_server_get_client_address", ctypes.POINTER(ctypes.c_char), [
	("server",		ctypes.POINTER(_GDBusServer)),] )

g_dbus_server_get_guid = _rpythonic_function_(		"g_dbus_server_get_guid", ctypes.POINTER(ctypes.c_char), [
	("server",		ctypes.POINTER(_GDBusServer)),] )

g_dbus_server_get_flags = _rpythonic_function_(		"g_dbus_server_get_flags", ctypes.c_int, [
	("server",		ctypes.POINTER(_GDBusServer)),] )

g_dbus_server_start = _rpythonic_function_(		"g_dbus_server_start", ctypes.c_void_p, [
	("server",		ctypes.POINTER(_GDBusServer)),] )

g_dbus_server_stop = _rpythonic_function_(		"g_dbus_server_stop", ctypes.c_void_p, [
	("server",		ctypes.POINTER(_GDBusServer)),] )

g_dbus_server_is_active = _rpythonic_function_(		"g_dbus_server_is_active", ctypes.c_int, [
	("server",		ctypes.POINTER(_GDBusServer)),] )

g_dbus_is_guid = _rpythonic_function_(		"g_dbus_is_guid", ctypes.c_int, [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_generate_guid = _rpythonic_function_(		"g_dbus_generate_guid", ctypes.POINTER(ctypes.c_char), [] )

g_dbus_is_name = _rpythonic_function_(		"g_dbus_is_name", ctypes.c_int, [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_is_unique_name = _rpythonic_function_(		"g_dbus_is_unique_name", ctypes.c_int, [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_is_member_name = _rpythonic_function_(		"g_dbus_is_member_name", ctypes.c_int, [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_is_interface_name = _rpythonic_function_(		"g_dbus_is_interface_name", ctypes.c_int, [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_gvariant_to_gvalue = _rpythonic_function_(		"g_dbus_gvariant_to_gvalue", ctypes.c_void_p, [
	("value",		ctypes.POINTER(_GVariant)),
	("out_gvalue",		ctypes.POINTER(_GValue)),] )

g_dbus_gvalue_to_gvariant = _rpythonic_function_(		"g_dbus_gvalue_to_gvariant", ctypes.POINTER(_GVariant), [
	("gvalue",		ctypes.POINTER(_GValue)),
	("C_type",		ctypes.POINTER(_GVariantType)),] )

changed = _rpythonic_function_(		"changed", ctypes.c_void_p, [
	("drive",		ctypes.POINTER(_GDrive)),] )

disconnected = _rpythonic_function_(		"disconnected", ctypes.c_void_p, [
	("drive",		ctypes.POINTER(_GDrive)),] )

eject_button = _rpythonic_function_(		"eject_button", ctypes.c_void_p, [
	("drive",		ctypes.POINTER(_GDrive)),] )

has_volumes = _rpythonic_function_(		"has_volumes", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),] )

get_volumes = _rpythonic_function_(		"get_volumes", ctypes.POINTER(_GList), [
	("drive",		ctypes.POINTER(_GDrive)),] )

is_media_removable = _rpythonic_function_(		"is_media_removable", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),] )

has_media = _rpythonic_function_(		"has_media", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),] )

is_media_check_automatic = _rpythonic_function_(		"is_media_check_automatic", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),] )

can_eject = _rpythonic_function_(		"can_eject", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),] )

can_poll_for_media = _rpythonic_function_(		"can_poll_for_media", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),] )

eject = _rpythonic_function_(		"eject", ctypes.c_void_p, [
	("drive",		ctypes.POINTER(_GDrive)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

eject_finish = _rpythonic_function_(		"eject_finish", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

poll_for_media = _rpythonic_function_(		"poll_for_media", ctypes.c_void_p, [
	("drive",		ctypes.POINTER(_GDrive)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

poll_for_media_finish = _rpythonic_function_(		"poll_for_media_finish", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

get_identifier = _rpythonic_function_(		"get_identifier", ctypes.POINTER(ctypes.c_char), [
	("drive",		ctypes.POINTER(_GDrive)),
	("kind",		ctypes.POINTER(ctypes.c_char)),] )

enumerate_identifiers = _rpythonic_function_(		"enumerate_identifiers", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("drive",		ctypes.POINTER(_GDrive)),] )

get_start_stop_type = _rpythonic_function_(		"get_start_stop_type", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),] )

can_start = _rpythonic_function_(		"can_start", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),] )

can_start_degraded = _rpythonic_function_(		"can_start_degraded", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),] )

start = _rpythonic_function_(		"start", ctypes.c_void_p, [
	("drive",		ctypes.POINTER(_GDrive)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

start_finish = _rpythonic_function_(		"start_finish", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

can_stop = _rpythonic_function_(		"can_stop", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),] )

stop = _rpythonic_function_(		"stop", ctypes.c_void_p, [
	("drive",		ctypes.POINTER(_GDrive)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

stop_finish = _rpythonic_function_(		"stop_finish", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

stop_button = _rpythonic_function_(		"stop_button", ctypes.c_void_p, [
	("drive",		ctypes.POINTER(_GDrive)),] )

eject_with_operation = _rpythonic_function_(		"eject_with_operation", ctypes.c_void_p, [
	("drive",		ctypes.POINTER(_GDrive)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

eject_with_operation_finish = _rpythonic_function_(		"eject_with_operation_finish", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

get_sort_key = _rpythonic_function_(		"get_sort_key", ctypes.POINTER(ctypes.c_char), [
	("drive",		ctypes.POINTER(_GDrive)),] )

g_drive_get_type = _rpythonic_function_(		"g_drive_get_type", ctypes.c_ulong, [] )

g_drive_get_name = _rpythonic_function_(		"g_drive_get_name", ctypes.POINTER(ctypes.c_char), [
	("drive",		ctypes.POINTER(_GDrive)),] )

g_drive_get_icon = _rpythonic_function_(		"g_drive_get_icon", ctypes.POINTER(_GIcon), [
	("drive",		ctypes.POINTER(_GDrive)),] )

g_drive_has_volumes = _rpythonic_function_(		"g_drive_has_volumes", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),] )

g_drive_get_volumes = _rpythonic_function_(		"g_drive_get_volumes", ctypes.POINTER(_GList), [
	("drive",		ctypes.POINTER(_GDrive)),] )

g_drive_is_media_removable = _rpythonic_function_(		"g_drive_is_media_removable", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),] )

g_drive_has_media = _rpythonic_function_(		"g_drive_has_media", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),] )

g_drive_is_media_check_automatic = _rpythonic_function_(		"g_drive_is_media_check_automatic", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),] )

g_drive_can_poll_for_media = _rpythonic_function_(		"g_drive_can_poll_for_media", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),] )

g_drive_can_eject = _rpythonic_function_(		"g_drive_can_eject", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),] )

g_drive_eject = _rpythonic_function_(		"g_drive_eject", ctypes.c_void_p, [
	("drive",		ctypes.POINTER(_GDrive)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_drive_eject_finish = _rpythonic_function_(		"g_drive_eject_finish", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_drive_poll_for_media = _rpythonic_function_(		"g_drive_poll_for_media", ctypes.c_void_p, [
	("drive",		ctypes.POINTER(_GDrive)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_drive_poll_for_media_finish = _rpythonic_function_(		"g_drive_poll_for_media_finish", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_drive_get_identifier = _rpythonic_function_(		"g_drive_get_identifier", ctypes.POINTER(ctypes.c_char), [
	("drive",		ctypes.POINTER(_GDrive)),
	("kind",		ctypes.POINTER(ctypes.c_char)),] )

g_drive_enumerate_identifiers = _rpythonic_function_(		"g_drive_enumerate_identifiers", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("drive",		ctypes.POINTER(_GDrive)),] )

g_drive_get_start_stop_type = _rpythonic_function_(		"g_drive_get_start_stop_type", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),] )

g_drive_can_start = _rpythonic_function_(		"g_drive_can_start", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),] )

g_drive_can_start_degraded = _rpythonic_function_(		"g_drive_can_start_degraded", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),] )

g_drive_start = _rpythonic_function_(		"g_drive_start", ctypes.c_void_p, [
	("drive",		ctypes.POINTER(_GDrive)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_drive_start_finish = _rpythonic_function_(		"g_drive_start_finish", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_drive_can_stop = _rpythonic_function_(		"g_drive_can_stop", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),] )

g_drive_stop = _rpythonic_function_(		"g_drive_stop", ctypes.c_void_p, [
	("drive",		ctypes.POINTER(_GDrive)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_drive_stop_finish = _rpythonic_function_(		"g_drive_stop_finish", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_drive_eject_with_operation = _rpythonic_function_(		"g_drive_eject_with_operation", ctypes.c_void_p, [
	("drive",		ctypes.POINTER(_GDrive)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_drive_eject_with_operation_finish = _rpythonic_function_(		"g_drive_eject_with_operation_finish", ctypes.c_int, [
	("drive",		ctypes.POINTER(_GDrive)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_drive_get_sort_key = _rpythonic_function_(		"g_drive_get_sort_key", ctypes.POINTER(ctypes.c_char), [
	("drive",		ctypes.POINTER(_GDrive)),] )

hash = _rpythonic_function_(		"hash", ctypes.c_uint, [
	("icon",		ctypes.POINTER(_GIcon)),] )

to_tokens = _rpythonic_function_(		"to_tokens", ctypes.c_int, [
	("icon",		ctypes.POINTER(_GIcon)),
	("tokens",		ctypes.POINTER(_GPtrArray)),
	("out_version",		ctypes.POINTER(ctypes.c_int)),] )

from_tokens = _rpythonic_function_(		"from_tokens", ctypes.POINTER(_GIcon), [
	("tokens",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("num_tokens",		ctypes.c_int),
	("version",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_icon_get_type = _rpythonic_function_(		"g_icon_get_type", ctypes.c_ulong, [] )

g_icon_hash = _rpythonic_function_(		"g_icon_hash", ctypes.c_uint, [("icon",		ctypes.c_void_p)] )

g_icon_equal = _rpythonic_function_(		"g_icon_equal", ctypes.c_int, [
	("icon1",		ctypes.POINTER(_GIcon)),
	("icon2",		ctypes.POINTER(_GIcon)),] )

g_icon_to_string = _rpythonic_function_(		"g_icon_to_string", ctypes.POINTER(ctypes.c_char), [
	("icon",		ctypes.POINTER(_GIcon)),] )

g_icon_new_for_string = _rpythonic_function_(		"g_icon_new_for_string", ctypes.POINTER(_GIcon), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_emblem_get_type = _rpythonic_function_(		"g_emblem_get_type", ctypes.c_ulong, [] )

g_emblem_new = _rpythonic_function_(		"g_emblem_new", ctypes.POINTER(_GEmblem), [
	("icon",		ctypes.POINTER(_GIcon)),] )

g_emblem_new_with_origin = _rpythonic_function_(		"g_emblem_new_with_origin", ctypes.POINTER(_GEmblem), [
	("icon",		ctypes.POINTER(_GIcon)),
	("origin",		ctypes.c_int),] )

g_emblem_get_icon = _rpythonic_function_(		"g_emblem_get_icon", ctypes.POINTER(_GIcon), [
	("emblem",		ctypes.POINTER(_GEmblem)),] )

g_emblem_get_origin = _rpythonic_function_(		"g_emblem_get_origin", ctypes.c_int, [
	("emblem",		ctypes.POINTER(_GEmblem)),] )

g_emblemed_icon_get_type = _rpythonic_function_(		"g_emblemed_icon_get_type", ctypes.c_ulong, [] )

g_emblemed_icon_new = _rpythonic_function_(		"g_emblemed_icon_new", ctypes.POINTER(_GIcon), [
	("icon",		ctypes.POINTER(_GIcon)),
	("emblem",		ctypes.POINTER(_GEmblem)),] )

g_emblemed_icon_get_icon = _rpythonic_function_(		"g_emblemed_icon_get_icon", ctypes.POINTER(_GIcon), [
	("emblemed",		ctypes.POINTER(_GEmblemedIcon)),] )

g_emblemed_icon_get_emblems = _rpythonic_function_(		"g_emblemed_icon_get_emblems", ctypes.POINTER(_GList), [
	("emblemed",		ctypes.POINTER(_GEmblemedIcon)),] )

g_emblemed_icon_add_emblem = _rpythonic_function_(		"g_emblemed_icon_add_emblem", ctypes.c_void_p, [
	("emblemed",		ctypes.POINTER(_GEmblemedIcon)),
	("emblem",		ctypes.POINTER(_GEmblem)),] )

g_emblemed_icon_clear_emblems = _rpythonic_function_(		"g_emblemed_icon_clear_emblems", ctypes.c_void_p, [
	("emblemed",		ctypes.POINTER(_GEmblemedIcon)),] )

g_file_attribute_info_list_get_type = _rpythonic_function_(		"g_file_attribute_info_list_get_type", ctypes.c_ulong, [] )

g_file_attribute_info_list_new = _rpythonic_function_(		"g_file_attribute_info_list_new", ctypes.POINTER(_GFileAttributeInfoList), [] )

g_file_attribute_info_list_ref = _rpythonic_function_(		"g_file_attribute_info_list_ref", ctypes.POINTER(_GFileAttributeInfoList), [
	("C_list",		ctypes.POINTER(_GFileAttributeInfoList)),] )

g_file_attribute_info_list_unref = _rpythonic_function_(		"g_file_attribute_info_list_unref", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GFileAttributeInfoList)),] )

g_file_attribute_info_list_dup = _rpythonic_function_(		"g_file_attribute_info_list_dup", ctypes.POINTER(_GFileAttributeInfoList), [
	("C_list",		ctypes.POINTER(_GFileAttributeInfoList)),] )

g_file_attribute_info_list_lookup = _rpythonic_function_(		"g_file_attribute_info_list_lookup", ctypes.POINTER(_GFileAttributeInfo), [
	("C_list",		ctypes.POINTER(_GFileAttributeInfoList)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_file_attribute_info_list_add = _rpythonic_function_(		"g_file_attribute_info_list_add", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(_GFileAttributeInfoList)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("C_type",		ctypes.c_int),
	("flags",		ctypes.c_int),] )

next_file = _rpythonic_function_(		"next_file", ctypes.POINTER(_GFileInfo), [
	("enumerator",		ctypes.POINTER(_GFileEnumerator)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

next_files_async = _rpythonic_function_(		"next_files_async", ctypes.c_void_p, [
	("enumerator",		ctypes.POINTER(_GFileEnumerator)),
	("num_files",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

next_files_finish = _rpythonic_function_(		"next_files_finish", ctypes.POINTER(_GList), [
	("enumerator",		ctypes.POINTER(_GFileEnumerator)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_enumerator_get_type = _rpythonic_function_(		"g_file_enumerator_get_type", ctypes.c_ulong, [] )

g_file_enumerator_next_file = _rpythonic_function_(		"g_file_enumerator_next_file", ctypes.POINTER(_GFileInfo), [
	("enumerator",		ctypes.POINTER(_GFileEnumerator)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_enumerator_close = _rpythonic_function_(		"g_file_enumerator_close", ctypes.c_int, [
	("enumerator",		ctypes.POINTER(_GFileEnumerator)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_enumerator_next_files_async = _rpythonic_function_(		"g_file_enumerator_next_files_async", ctypes.c_void_p, [
	("enumerator",		ctypes.POINTER(_GFileEnumerator)),
	("num_files",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_enumerator_next_files_finish = _rpythonic_function_(		"g_file_enumerator_next_files_finish", ctypes.POINTER(_GList), [
	("enumerator",		ctypes.POINTER(_GFileEnumerator)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_enumerator_close_async = _rpythonic_function_(		"g_file_enumerator_close_async", ctypes.c_void_p, [
	("enumerator",		ctypes.POINTER(_GFileEnumerator)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_enumerator_close_finish = _rpythonic_function_(		"g_file_enumerator_close_finish", ctypes.c_int, [
	("enumerator",		ctypes.POINTER(_GFileEnumerator)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_enumerator_is_closed = _rpythonic_function_(		"g_file_enumerator_is_closed", ctypes.c_int, [
	("enumerator",		ctypes.POINTER(_GFileEnumerator)),] )

g_file_enumerator_has_pending = _rpythonic_function_(		"g_file_enumerator_has_pending", ctypes.c_int, [
	("enumerator",		ctypes.POINTER(_GFileEnumerator)),] )

g_file_enumerator_set_pending = _rpythonic_function_(		"g_file_enumerator_set_pending", ctypes.c_void_p, [
	("enumerator",		ctypes.POINTER(_GFileEnumerator)),
	("pending",		ctypes.c_int),] )

g_file_enumerator_get_container = _rpythonic_function_(		"g_file_enumerator_get_container", ctypes.POINTER(_GFile), [
	("enumerator",		ctypes.POINTER(_GFileEnumerator)),] )

is_native = _rpythonic_function_(		"is_native", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),] )

has_uri_scheme = _rpythonic_function_(		"has_uri_scheme", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("uri_scheme",		ctypes.POINTER(ctypes.c_char)),] )

get_uri_scheme = _rpythonic_function_(		"get_uri_scheme", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(_GFile)),] )

get_basename = _rpythonic_function_(		"get_basename", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(_GFile)),] )

get_path = _rpythonic_function_(		"get_path", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(_GFile)),] )

get_uri = _rpythonic_function_(		"get_uri", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(_GFile)),] )

get_parse_name = _rpythonic_function_(		"get_parse_name", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(_GFile)),] )

get_parent = _rpythonic_function_(		"get_parent", ctypes.POINTER(_GFile), [
	("file",		ctypes.POINTER(_GFile)),] )

prefix_matches = _rpythonic_function_(		"prefix_matches", ctypes.c_int, [
	("prefix",		ctypes.POINTER(_GFile)),
	("file",		ctypes.POINTER(_GFile)),] )

get_relative_path = _rpythonic_function_(		"get_relative_path", ctypes.POINTER(ctypes.c_char), [
	("parent",		ctypes.POINTER(_GFile)),
	("descendant",		ctypes.POINTER(_GFile)),] )

resolve_relative_path = _rpythonic_function_(		"resolve_relative_path", ctypes.POINTER(_GFile), [
	("file",		ctypes.POINTER(_GFile)),
	("relative_path",		ctypes.POINTER(ctypes.c_char)),] )

get_child_for_display_name = _rpythonic_function_(		"get_child_for_display_name", ctypes.POINTER(_GFile), [
	("file",		ctypes.POINTER(_GFile)),
	("display_name",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

enumerate_children = _rpythonic_function_(		"enumerate_children", ctypes.POINTER(_GFileEnumerator), [
	("file",		ctypes.POINTER(_GFile)),
	("attributes",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

enumerate_children_async = _rpythonic_function_(		"enumerate_children_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("attributes",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

enumerate_children_finish = _rpythonic_function_(		"enumerate_children_finish", ctypes.POINTER(_GFileEnumerator), [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

query_info = _rpythonic_function_(		"query_info", ctypes.POINTER(_GFileInfo), [
	("file",		ctypes.POINTER(_GFile)),
	("attributes",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

query_info_async = _rpythonic_function_(		"query_info_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("attributes",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

query_info_finish = _rpythonic_function_(		"query_info_finish", ctypes.POINTER(_GFileInfo), [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

query_filesystem_info = _rpythonic_function_(		"query_filesystem_info", ctypes.POINTER(_GFileInfo), [
	("file",		ctypes.POINTER(_GFile)),
	("attributes",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

query_filesystem_info_async = _rpythonic_function_(		"query_filesystem_info_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("attributes",		ctypes.POINTER(ctypes.c_char)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

query_filesystem_info_finish = _rpythonic_function_(		"query_filesystem_info_finish", ctypes.POINTER(_GFileInfo), [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

find_enclosing_mount = _rpythonic_function_(		"find_enclosing_mount", ctypes.POINTER(_GMount), [
	("file",		ctypes.POINTER(_GFile)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

find_enclosing_mount_async = _rpythonic_function_(		"find_enclosing_mount_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

find_enclosing_mount_finish = _rpythonic_function_(		"find_enclosing_mount_finish", ctypes.POINTER(_GMount), [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

set_display_name = _rpythonic_function_(		"set_display_name", ctypes.POINTER(_GFile), [
	("file",		ctypes.POINTER(_GFile)),
	("display_name",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

set_display_name_async = _rpythonic_function_(		"set_display_name_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("display_name",		ctypes.POINTER(ctypes.c_char)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

set_display_name_finish = _rpythonic_function_(		"set_display_name_finish", ctypes.POINTER(_GFile), [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

query_settable_attributes = _rpythonic_function_(		"query_settable_attributes", ctypes.POINTER(_GFileAttributeInfoList), [
	("file",		ctypes.POINTER(_GFile)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

_query_settable_attributes_async = _rpythonic_function_(		"_query_settable_attributes_async", ctypes.c_void_p, [] )

_query_settable_attributes_finish = _rpythonic_function_(		"_query_settable_attributes_finish", ctypes.c_void_p, [] )

query_writable_namespaces = _rpythonic_function_(		"query_writable_namespaces", ctypes.POINTER(_GFileAttributeInfoList), [
	("file",		ctypes.POINTER(_GFile)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

_query_writable_namespaces_async = _rpythonic_function_(		"_query_writable_namespaces_async", ctypes.c_void_p, [] )

_query_writable_namespaces_finish = _rpythonic_function_(		"_query_writable_namespaces_finish", ctypes.c_void_p, [] )

set_attribute = _rpythonic_function_(		"set_attribute", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("C_type",		ctypes.c_int),
	("value_p",		ctypes.POINTER(ctypes.c_void_p)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

set_attributes_from_info = _rpythonic_function_(		"set_attributes_from_info", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("info",		ctypes.POINTER(_GFileInfo)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

set_attributes_async = _rpythonic_function_(		"set_attributes_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("info",		ctypes.POINTER(_GFileInfo)),
	("flags",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

set_attributes_finish = _rpythonic_function_(		"set_attributes_finish", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("info",		ctypes.POINTER(ctypes.POINTER(_GFileInfo))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

append_to = _rpythonic_function_(		"append_to", ctypes.POINTER(_GFileOutputStream), [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

append_to_async = _rpythonic_function_(		"append_to_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

append_to_finish = _rpythonic_function_(		"append_to_finish", ctypes.POINTER(_GFileOutputStream), [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

create = _rpythonic_function_(		"create", ctypes.POINTER(_GFileOutputStream), [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

create_async = _rpythonic_function_(		"create_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

create_finish = _rpythonic_function_(		"create_finish", ctypes.POINTER(_GFileOutputStream), [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

replace = _rpythonic_function_(		"replace", ctypes.POINTER(_GFileOutputStream), [
	("file",		ctypes.POINTER(_GFile)),
	("etag",		ctypes.POINTER(ctypes.c_char)),
	("make_backup",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

replace_async = _rpythonic_function_(		"replace_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("etag",		ctypes.POINTER(ctypes.c_char)),
	("make_backup",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

replace_finish = _rpythonic_function_(		"replace_finish", ctypes.POINTER(_GFileOutputStream), [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

delete_file = _rpythonic_function_(		"delete_file", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

_delete_file_async = _rpythonic_function_(		"_delete_file_async", ctypes.c_void_p, [] )

_delete_file_finish = _rpythonic_function_(		"_delete_file_finish", ctypes.c_void_p, [] )

trash = _rpythonic_function_(		"trash", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

_trash_async = _rpythonic_function_(		"_trash_async", ctypes.c_void_p, [] )

_trash_finish = _rpythonic_function_(		"_trash_finish", ctypes.c_void_p, [] )

make_directory = _rpythonic_function_(		"make_directory", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

_make_directory_async = _rpythonic_function_(		"_make_directory_async", ctypes.c_void_p, [] )

_make_directory_finish = _rpythonic_function_(		"_make_directory_finish", ctypes.c_void_p, [] )

make_symbolic_link = _rpythonic_function_(		"make_symbolic_link", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("symlink_value",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

_make_symbolic_link_async = _rpythonic_function_(		"_make_symbolic_link_async", ctypes.c_void_p, [] )

_make_symbolic_link_finish = _rpythonic_function_(		"_make_symbolic_link_finish", ctypes.c_void_p, [] )

copy = _rpythonic_function_(		"copy", ctypes.c_int, [
	("source",		ctypes.POINTER(_GFile)),
	("destination",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("progress_callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_long,ctypes.c_long,ctypes.POINTER(ctypes.c_void_p),)),
	("progress_callback_data",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

copy_async = _rpythonic_function_(		"copy_async", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GFile)),
	("destination",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("progress_callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_long,ctypes.c_long,ctypes.POINTER(ctypes.c_void_p),)),
	("progress_callback_data",		ctypes.POINTER(ctypes.c_void_p)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

copy_finish = _rpythonic_function_(		"copy_finish", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

move = _rpythonic_function_(		"move", ctypes.c_int, [
	("source",		ctypes.POINTER(_GFile)),
	("destination",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("progress_callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_long,ctypes.c_long,ctypes.POINTER(ctypes.c_void_p),)),
	("progress_callback_data",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

_move_async = _rpythonic_function_(		"_move_async", ctypes.c_void_p, [] )

_move_finish = _rpythonic_function_(		"_move_finish", ctypes.c_void_p, [] )

mount_mountable = _rpythonic_function_(		"mount_mountable", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

mount_mountable_finish = _rpythonic_function_(		"mount_mountable_finish", ctypes.POINTER(_GFile), [
	("file",		ctypes.POINTER(_GFile)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

unmount_mountable = _rpythonic_function_(		"unmount_mountable", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

unmount_mountable_finish = _rpythonic_function_(		"unmount_mountable_finish", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

eject_mountable = _rpythonic_function_(		"eject_mountable", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

eject_mountable_finish = _rpythonic_function_(		"eject_mountable_finish", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

mount_enclosing_volume = _rpythonic_function_(		"mount_enclosing_volume", ctypes.c_void_p, [
	("location",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

mount_enclosing_volume_finish = _rpythonic_function_(		"mount_enclosing_volume_finish", ctypes.c_int, [
	("location",		ctypes.POINTER(_GFile)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

monitor_dir = _rpythonic_function_(		"monitor_dir", ctypes.POINTER(_GFileMonitor), [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

monitor_file = _rpythonic_function_(		"monitor_file", ctypes.POINTER(_GFileMonitor), [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

open_readwrite = _rpythonic_function_(		"open_readwrite", ctypes.POINTER(_GFileIOStream), [
	("file",		ctypes.POINTER(_GFile)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

open_readwrite_async = _rpythonic_function_(		"open_readwrite_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

open_readwrite_finish = _rpythonic_function_(		"open_readwrite_finish", ctypes.POINTER(_GFileIOStream), [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

create_readwrite = _rpythonic_function_(		"create_readwrite", ctypes.POINTER(_GFileIOStream), [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

create_readwrite_async = _rpythonic_function_(		"create_readwrite_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

create_readwrite_finish = _rpythonic_function_(		"create_readwrite_finish", ctypes.POINTER(_GFileIOStream), [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

replace_readwrite = _rpythonic_function_(		"replace_readwrite", ctypes.POINTER(_GFileIOStream), [
	("file",		ctypes.POINTER(_GFile)),
	("etag",		ctypes.POINTER(ctypes.c_char)),
	("make_backup",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

replace_readwrite_async = _rpythonic_function_(		"replace_readwrite_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("etag",		ctypes.POINTER(ctypes.c_char)),
	("make_backup",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

replace_readwrite_finish = _rpythonic_function_(		"replace_readwrite_finish", ctypes.POINTER(_GFileIOStream), [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

start_mountable = _rpythonic_function_(		"start_mountable", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("start_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

start_mountable_finish = _rpythonic_function_(		"start_mountable_finish", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

stop_mountable = _rpythonic_function_(		"stop_mountable", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

stop_mountable_finish = _rpythonic_function_(		"stop_mountable_finish", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

unmount_mountable_with_operation = _rpythonic_function_(		"unmount_mountable_with_operation", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

unmount_mountable_with_operation_finish = _rpythonic_function_(		"unmount_mountable_with_operation_finish", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

eject_mountable_with_operation = _rpythonic_function_(		"eject_mountable_with_operation", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

eject_mountable_with_operation_finish = _rpythonic_function_(		"eject_mountable_with_operation_finish", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

poll_mountable = _rpythonic_function_(		"poll_mountable", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

poll_mountable_finish = _rpythonic_function_(		"poll_mountable_finish", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_get_type = _rpythonic_function_(		"g_file_get_type", ctypes.c_ulong, [] )

g_file_new_for_path = _rpythonic_function_(		"g_file_new_for_path", ctypes.POINTER(_GFile), [
	("path",		ctypes.POINTER(ctypes.c_char)),] )

g_file_new_for_uri = _rpythonic_function_(		"g_file_new_for_uri", ctypes.POINTER(_GFile), [
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

g_file_new_for_commandline_arg = _rpythonic_function_(		"g_file_new_for_commandline_arg", ctypes.POINTER(_GFile), [
	("arg",		ctypes.POINTER(ctypes.c_char)),] )

g_file_new_tmp = _rpythonic_function_(		"g_file_new_tmp", ctypes.POINTER(_GFile), [
	("tmpl",		ctypes.POINTER(ctypes.c_char)),
	("iostream",		ctypes.POINTER(ctypes.POINTER(_GFileIOStream))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_parse_name = _rpythonic_function_(		"g_file_parse_name", ctypes.POINTER(_GFile), [
	("parse_name",		ctypes.POINTER(ctypes.c_char)),] )

g_file_dup = _rpythonic_function_(		"g_file_dup", ctypes.POINTER(_GFile), [
	("file",		ctypes.POINTER(_GFile)),] )

g_file_hash = _rpythonic_function_(		"g_file_hash", ctypes.c_uint, [("file",		ctypes.c_void_p)] )

g_file_equal = _rpythonic_function_(		"g_file_equal", ctypes.c_int, [
	("file1",		ctypes.POINTER(_GFile)),
	("file2",		ctypes.POINTER(_GFile)),] )

g_file_get_basename = _rpythonic_function_(		"g_file_get_basename", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(_GFile)),] )

g_file_get_path = _rpythonic_function_(		"g_file_get_path", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(_GFile)),] )

g_file_get_uri = _rpythonic_function_(		"g_file_get_uri", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(_GFile)),] )

g_file_get_parse_name = _rpythonic_function_(		"g_file_get_parse_name", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(_GFile)),] )

g_file_get_parent = _rpythonic_function_(		"g_file_get_parent", ctypes.POINTER(_GFile), [
	("file",		ctypes.POINTER(_GFile)),] )

g_file_has_parent = _rpythonic_function_(		"g_file_has_parent", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("parent",		ctypes.POINTER(_GFile)),] )

g_file_get_child = _rpythonic_function_(		"g_file_get_child", ctypes.POINTER(_GFile), [
	("file",		ctypes.POINTER(_GFile)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_file_get_child_for_display_name = _rpythonic_function_(		"g_file_get_child_for_display_name", ctypes.POINTER(_GFile), [
	("file",		ctypes.POINTER(_GFile)),
	("display_name",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_has_prefix = _rpythonic_function_(		"g_file_has_prefix", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("prefix",		ctypes.POINTER(_GFile)),] )

g_file_get_relative_path = _rpythonic_function_(		"g_file_get_relative_path", ctypes.POINTER(ctypes.c_char), [
	("parent",		ctypes.POINTER(_GFile)),
	("descendant",		ctypes.POINTER(_GFile)),] )

g_file_resolve_relative_path = _rpythonic_function_(		"g_file_resolve_relative_path", ctypes.POINTER(_GFile), [
	("file",		ctypes.POINTER(_GFile)),
	("relative_path",		ctypes.POINTER(ctypes.c_char)),] )

g_file_is_native = _rpythonic_function_(		"g_file_is_native", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),] )

g_file_has_uri_scheme = _rpythonic_function_(		"g_file_has_uri_scheme", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("uri_scheme",		ctypes.POINTER(ctypes.c_char)),] )

g_file_get_uri_scheme = _rpythonic_function_(		"g_file_get_uri_scheme", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.POINTER(_GFile)),] )

g_file_read = _rpythonic_function_(		"g_file_read", ctypes.POINTER(_GFileInputStream), [
	("file",		ctypes.POINTER(_GFile)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_read_async = _rpythonic_function_(		"g_file_read_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_read_finish = _rpythonic_function_(		"g_file_read_finish", ctypes.POINTER(_GFileInputStream), [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_append_to = _rpythonic_function_(		"g_file_append_to", ctypes.POINTER(_GFileOutputStream), [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_create = _rpythonic_function_(		"g_file_create", ctypes.POINTER(_GFileOutputStream), [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_replace = _rpythonic_function_(		"g_file_replace", ctypes.POINTER(_GFileOutputStream), [
	("file",		ctypes.POINTER(_GFile)),
	("etag",		ctypes.POINTER(ctypes.c_char)),
	("make_backup",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_append_to_async = _rpythonic_function_(		"g_file_append_to_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_append_to_finish = _rpythonic_function_(		"g_file_append_to_finish", ctypes.POINTER(_GFileOutputStream), [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_create_async = _rpythonic_function_(		"g_file_create_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_create_finish = _rpythonic_function_(		"g_file_create_finish", ctypes.POINTER(_GFileOutputStream), [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_replace_async = _rpythonic_function_(		"g_file_replace_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("etag",		ctypes.POINTER(ctypes.c_char)),
	("make_backup",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_replace_finish = _rpythonic_function_(		"g_file_replace_finish", ctypes.POINTER(_GFileOutputStream), [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_open_readwrite = _rpythonic_function_(		"g_file_open_readwrite", ctypes.POINTER(_GFileIOStream), [
	("file",		ctypes.POINTER(_GFile)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_open_readwrite_async = _rpythonic_function_(		"g_file_open_readwrite_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_open_readwrite_finish = _rpythonic_function_(		"g_file_open_readwrite_finish", ctypes.POINTER(_GFileIOStream), [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_create_readwrite = _rpythonic_function_(		"g_file_create_readwrite", ctypes.POINTER(_GFileIOStream), [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_create_readwrite_async = _rpythonic_function_(		"g_file_create_readwrite_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_create_readwrite_finish = _rpythonic_function_(		"g_file_create_readwrite_finish", ctypes.POINTER(_GFileIOStream), [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_replace_readwrite = _rpythonic_function_(		"g_file_replace_readwrite", ctypes.POINTER(_GFileIOStream), [
	("file",		ctypes.POINTER(_GFile)),
	("etag",		ctypes.POINTER(ctypes.c_char)),
	("make_backup",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_replace_readwrite_async = _rpythonic_function_(		"g_file_replace_readwrite_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("etag",		ctypes.POINTER(ctypes.c_char)),
	("make_backup",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_replace_readwrite_finish = _rpythonic_function_(		"g_file_replace_readwrite_finish", ctypes.POINTER(_GFileIOStream), [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_query_exists = _rpythonic_function_(		"g_file_query_exists", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("cancellable",		ctypes.POINTER(_GCancellable)),] )

g_file_query_file_type = _rpythonic_function_(		"g_file_query_file_type", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),] )

g_file_query_info = _rpythonic_function_(		"g_file_query_info", ctypes.POINTER(_GFileInfo), [
	("file",		ctypes.POINTER(_GFile)),
	("attributes",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_query_info_async = _rpythonic_function_(		"g_file_query_info_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("attributes",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_query_info_finish = _rpythonic_function_(		"g_file_query_info_finish", ctypes.POINTER(_GFileInfo), [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_query_filesystem_info = _rpythonic_function_(		"g_file_query_filesystem_info", ctypes.POINTER(_GFileInfo), [
	("file",		ctypes.POINTER(_GFile)),
	("attributes",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_query_filesystem_info_async = _rpythonic_function_(		"g_file_query_filesystem_info_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("attributes",		ctypes.POINTER(ctypes.c_char)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_query_filesystem_info_finish = _rpythonic_function_(		"g_file_query_filesystem_info_finish", ctypes.POINTER(_GFileInfo), [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_find_enclosing_mount = _rpythonic_function_(		"g_file_find_enclosing_mount", ctypes.POINTER(_GMount), [
	("file",		ctypes.POINTER(_GFile)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_find_enclosing_mount_async = _rpythonic_function_(		"g_file_find_enclosing_mount_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_find_enclosing_mount_finish = _rpythonic_function_(		"g_file_find_enclosing_mount_finish", ctypes.POINTER(_GMount), [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_enumerate_children = _rpythonic_function_(		"g_file_enumerate_children", ctypes.POINTER(_GFileEnumerator), [
	("file",		ctypes.POINTER(_GFile)),
	("attributes",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_enumerate_children_async = _rpythonic_function_(		"g_file_enumerate_children_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("attributes",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_enumerate_children_finish = _rpythonic_function_(		"g_file_enumerate_children_finish", ctypes.POINTER(_GFileEnumerator), [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_set_display_name = _rpythonic_function_(		"g_file_set_display_name", ctypes.POINTER(_GFile), [
	("file",		ctypes.POINTER(_GFile)),
	("display_name",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_set_display_name_async = _rpythonic_function_(		"g_file_set_display_name_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("display_name",		ctypes.POINTER(ctypes.c_char)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_set_display_name_finish = _rpythonic_function_(		"g_file_set_display_name_finish", ctypes.POINTER(_GFile), [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_delete = _rpythonic_function_(		"g_file_delete", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_trash = _rpythonic_function_(		"g_file_trash", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_copy = _rpythonic_function_(		"g_file_copy", ctypes.c_int, [
	("source",		ctypes.POINTER(_GFile)),
	("destination",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("progress_callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_long,ctypes.c_long,ctypes.POINTER(ctypes.c_void_p),)),
	("progress_callback_data",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_copy_async = _rpythonic_function_(		"g_file_copy_async", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GFile)),
	("destination",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("progress_callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_long,ctypes.c_long,ctypes.POINTER(ctypes.c_void_p),)),
	("progress_callback_data",		ctypes.POINTER(ctypes.c_void_p)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_copy_finish = _rpythonic_function_(		"g_file_copy_finish", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_move = _rpythonic_function_(		"g_file_move", ctypes.c_int, [
	("source",		ctypes.POINTER(_GFile)),
	("destination",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("progress_callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_long,ctypes.c_long,ctypes.POINTER(ctypes.c_void_p),)),
	("progress_callback_data",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_make_directory = _rpythonic_function_(		"g_file_make_directory", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_make_directory_with_parents = _rpythonic_function_(		"g_file_make_directory_with_parents", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_make_symbolic_link = _rpythonic_function_(		"g_file_make_symbolic_link", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("symlink_value",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_query_settable_attributes = _rpythonic_function_(		"g_file_query_settable_attributes", ctypes.POINTER(_GFileAttributeInfoList), [
	("file",		ctypes.POINTER(_GFile)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_query_writable_namespaces = _rpythonic_function_(		"g_file_query_writable_namespaces", ctypes.POINTER(_GFileAttributeInfoList), [
	("file",		ctypes.POINTER(_GFile)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_set_attribute = _rpythonic_function_(		"g_file_set_attribute", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("C_type",		ctypes.c_int),
	("value_p",		ctypes.POINTER(ctypes.c_void_p)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_set_attributes_from_info = _rpythonic_function_(		"g_file_set_attributes_from_info", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("info",		ctypes.POINTER(_GFileInfo)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_set_attributes_async = _rpythonic_function_(		"g_file_set_attributes_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("info",		ctypes.POINTER(_GFileInfo)),
	("flags",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_set_attributes_finish = _rpythonic_function_(		"g_file_set_attributes_finish", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("info",		ctypes.POINTER(ctypes.POINTER(_GFileInfo))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_set_attribute_string = _rpythonic_function_(		"g_file_set_attribute_string", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_set_attribute_byte_string = _rpythonic_function_(		"g_file_set_attribute_byte_string", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_set_attribute_uint32 = _rpythonic_function_(		"g_file_set_attribute_uint32", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_uint),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_set_attribute_int32 = _rpythonic_function_(		"g_file_set_attribute_int32", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_set_attribute_uint64 = _rpythonic_function_(		"g_file_set_attribute_uint64", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_ulong),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_set_attribute_int64 = _rpythonic_function_(		"g_file_set_attribute_int64", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_long),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_mount_enclosing_volume = _rpythonic_function_(		"g_file_mount_enclosing_volume", ctypes.c_void_p, [
	("location",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_mount_enclosing_volume_finish = _rpythonic_function_(		"g_file_mount_enclosing_volume_finish", ctypes.c_int, [
	("location",		ctypes.POINTER(_GFile)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_mount_mountable = _rpythonic_function_(		"g_file_mount_mountable", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_mount_mountable_finish = _rpythonic_function_(		"g_file_mount_mountable_finish", ctypes.POINTER(_GFile), [
	("file",		ctypes.POINTER(_GFile)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_unmount_mountable = _rpythonic_function_(		"g_file_unmount_mountable", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_unmount_mountable_finish = _rpythonic_function_(		"g_file_unmount_mountable_finish", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_unmount_mountable_with_operation = _rpythonic_function_(		"g_file_unmount_mountable_with_operation", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_unmount_mountable_with_operation_finish = _rpythonic_function_(		"g_file_unmount_mountable_with_operation_finish", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_eject_mountable = _rpythonic_function_(		"g_file_eject_mountable", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_eject_mountable_finish = _rpythonic_function_(		"g_file_eject_mountable_finish", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_eject_mountable_with_operation = _rpythonic_function_(		"g_file_eject_mountable_with_operation", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_eject_mountable_with_operation_finish = _rpythonic_function_(		"g_file_eject_mountable_with_operation_finish", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_copy_attributes = _rpythonic_function_(		"g_file_copy_attributes", ctypes.c_int, [
	("source",		ctypes.POINTER(_GFile)),
	("destination",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_monitor_directory = _rpythonic_function_(		"g_file_monitor_directory", ctypes.POINTER(_GFileMonitor), [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_monitor_file = _rpythonic_function_(		"g_file_monitor_file", ctypes.POINTER(_GFileMonitor), [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_monitor = _rpythonic_function_(		"g_file_monitor", ctypes.POINTER(_GFileMonitor), [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_start_mountable = _rpythonic_function_(		"g_file_start_mountable", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("start_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_start_mountable_finish = _rpythonic_function_(		"g_file_start_mountable_finish", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_stop_mountable = _rpythonic_function_(		"g_file_stop_mountable", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_stop_mountable_finish = _rpythonic_function_(		"g_file_stop_mountable_finish", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_poll_mountable = _rpythonic_function_(		"g_file_poll_mountable", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_poll_mountable_finish = _rpythonic_function_(		"g_file_poll_mountable_finish", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_query_default_handler = _rpythonic_function_(		"g_file_query_default_handler", ctypes.POINTER(_GAppInfo), [
	("file",		ctypes.POINTER(_GFile)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_load_contents = _rpythonic_function_(		"g_file_load_contents", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("contents",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("length",		ctypes.POINTER(ctypes.c_ulong)),
	("etag_out",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_load_contents_async = _rpythonic_function_(		"g_file_load_contents_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_load_contents_finish = _rpythonic_function_(		"g_file_load_contents_finish", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("contents",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("length",		ctypes.POINTER(ctypes.c_ulong)),
	("etag_out",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_load_partial_contents_async = _rpythonic_function_(		"g_file_load_partial_contents_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("read_more_callback",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_char),ctypes.c_long,ctypes.POINTER(ctypes.c_void_p),)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_load_partial_contents_finish = _rpythonic_function_(		"g_file_load_partial_contents_finish", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("contents",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("length",		ctypes.POINTER(ctypes.c_ulong)),
	("etag_out",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_replace_contents = _rpythonic_function_(		"g_file_replace_contents", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("contents",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_ulong),
	("etag",		ctypes.POINTER(ctypes.c_char)),
	("make_backup",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("new_etag",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_replace_contents_async = _rpythonic_function_(		"g_file_replace_contents_async", ctypes.c_void_p, [
	("file",		ctypes.POINTER(_GFile)),
	("contents",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_ulong),
	("etag",		ctypes.POINTER(ctypes.c_char)),
	("make_backup",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_replace_contents_finish = _rpythonic_function_(		"g_file_replace_contents_finish", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("new_etag",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_supports_thread_contexts = _rpythonic_function_(		"g_file_supports_thread_contexts", ctypes.c_int, [
	("file",		ctypes.POINTER(_GFile)),] )

g_file_icon_get_type = _rpythonic_function_(		"g_file_icon_get_type", ctypes.c_ulong, [] )

g_file_icon_new = _rpythonic_function_(		"g_file_icon_new", ctypes.POINTER(_GIcon), [
	("file",		ctypes.POINTER(_GFile)),] )

g_file_icon_get_file = _rpythonic_function_(		"g_file_icon_get_file", ctypes.POINTER(_GFile), [
	("icon",		ctypes.POINTER(_GFileIcon)),] )

g_file_info_get_type = _rpythonic_function_(		"g_file_info_get_type", ctypes.c_ulong, [] )

g_file_info_new = _rpythonic_function_(		"g_file_info_new", ctypes.POINTER(_GFileInfo), [] )

g_file_info_dup = _rpythonic_function_(		"g_file_info_dup", ctypes.POINTER(_GFileInfo), [
	("other",		ctypes.POINTER(_GFileInfo)),] )

g_file_info_copy_into = _rpythonic_function_(		"g_file_info_copy_into", ctypes.c_void_p, [
	("src_info",		ctypes.POINTER(_GFileInfo)),
	("dest_info",		ctypes.POINTER(_GFileInfo)),] )

g_file_info_has_attribute = _rpythonic_function_(		"g_file_info_has_attribute", ctypes.c_int, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),] )

g_file_info_has_namespace = _rpythonic_function_(		"g_file_info_has_namespace", ctypes.c_int, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("name_space",		ctypes.POINTER(ctypes.c_char)),] )

g_file_info_list_attributes = _rpythonic_function_(		"g_file_info_list_attributes", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("info",		ctypes.POINTER(_GFileInfo)),
	("name_space",		ctypes.POINTER(ctypes.c_char)),] )

g_file_info_get_attribute_data = _rpythonic_function_(		"g_file_info_get_attribute_data", ctypes.c_int, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("C_type",		ctypes.POINTER(ctypes.c_int)),
	("value_pp",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("status",		ctypes.POINTER(ctypes.c_int)),] )

g_file_info_get_attribute_type = _rpythonic_function_(		"g_file_info_get_attribute_type", ctypes.c_int, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),] )

g_file_info_remove_attribute = _rpythonic_function_(		"g_file_info_remove_attribute", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),] )

g_file_info_get_attribute_status = _rpythonic_function_(		"g_file_info_get_attribute_status", ctypes.c_int, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),] )

g_file_info_set_attribute_status = _rpythonic_function_(		"g_file_info_set_attribute_status", ctypes.c_int, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("status",		ctypes.c_int),] )

g_file_info_get_attribute_as_string = _rpythonic_function_(		"g_file_info_get_attribute_as_string", ctypes.POINTER(ctypes.c_char), [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),] )

g_file_info_get_attribute_string = _rpythonic_function_(		"g_file_info_get_attribute_string", ctypes.POINTER(ctypes.c_char), [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),] )

g_file_info_get_attribute_byte_string = _rpythonic_function_(		"g_file_info_get_attribute_byte_string", ctypes.POINTER(ctypes.c_char), [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),] )

g_file_info_get_attribute_boolean = _rpythonic_function_(		"g_file_info_get_attribute_boolean", ctypes.c_int, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),] )

g_file_info_get_attribute_uint32 = _rpythonic_function_(		"g_file_info_get_attribute_uint32", ctypes.c_uint, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),] )

g_file_info_get_attribute_int32 = _rpythonic_function_(		"g_file_info_get_attribute_int32", ctypes.c_int, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),] )

g_file_info_get_attribute_uint64 = _rpythonic_function_(		"g_file_info_get_attribute_uint64", ctypes.c_ulong, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),] )

g_file_info_get_attribute_int64 = _rpythonic_function_(		"g_file_info_get_attribute_int64", ctypes.c_long, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),] )

g_file_info_get_attribute_object = _rpythonic_function_(		"g_file_info_get_attribute_object", ctypes.POINTER(_GObject), [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),] )

g_file_info_get_attribute_stringv = _rpythonic_function_(		"g_file_info_get_attribute_stringv", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),] )

g_file_info_set_attribute = _rpythonic_function_(		"g_file_info_set_attribute", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("C_type",		ctypes.c_int),
	("value_p",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_info_set_attribute_string = _rpythonic_function_(		"g_file_info_set_attribute_string", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("attr_value",		ctypes.POINTER(ctypes.c_char)),] )

g_file_info_set_attribute_byte_string = _rpythonic_function_(		"g_file_info_set_attribute_byte_string", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("attr_value",		ctypes.POINTER(ctypes.c_char)),] )

g_file_info_set_attribute_boolean = _rpythonic_function_(		"g_file_info_set_attribute_boolean", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("attr_value",		ctypes.c_int),] )

g_file_info_set_attribute_uint32 = _rpythonic_function_(		"g_file_info_set_attribute_uint32", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("attr_value",		ctypes.c_uint),] )

g_file_info_set_attribute_int32 = _rpythonic_function_(		"g_file_info_set_attribute_int32", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("attr_value",		ctypes.c_int),] )

g_file_info_set_attribute_uint64 = _rpythonic_function_(		"g_file_info_set_attribute_uint64", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("attr_value",		ctypes.c_ulong),] )

g_file_info_set_attribute_int64 = _rpythonic_function_(		"g_file_info_set_attribute_int64", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("attr_value",		ctypes.c_long),] )

g_file_info_set_attribute_object = _rpythonic_function_(		"g_file_info_set_attribute_object", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("attr_value",		ctypes.POINTER(_GObject)),] )

g_file_info_set_attribute_stringv = _rpythonic_function_(		"g_file_info_set_attribute_stringv", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("attr_value",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_file_info_clear_status = _rpythonic_function_(		"g_file_info_clear_status", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),] )

g_file_info_get_file_type = _rpythonic_function_(		"g_file_info_get_file_type", ctypes.c_int, [
	("info",		ctypes.POINTER(_GFileInfo)),] )

g_file_info_get_is_hidden = _rpythonic_function_(		"g_file_info_get_is_hidden", ctypes.c_int, [
	("info",		ctypes.POINTER(_GFileInfo)),] )

g_file_info_get_is_backup = _rpythonic_function_(		"g_file_info_get_is_backup", ctypes.c_int, [
	("info",		ctypes.POINTER(_GFileInfo)),] )

g_file_info_get_is_symlink = _rpythonic_function_(		"g_file_info_get_is_symlink", ctypes.c_int, [
	("info",		ctypes.POINTER(_GFileInfo)),] )

g_file_info_get_name = _rpythonic_function_(		"g_file_info_get_name", ctypes.POINTER(ctypes.c_char), [
	("info",		ctypes.POINTER(_GFileInfo)),] )

g_file_info_get_display_name = _rpythonic_function_(		"g_file_info_get_display_name", ctypes.POINTER(ctypes.c_char), [
	("info",		ctypes.POINTER(_GFileInfo)),] )

g_file_info_get_edit_name = _rpythonic_function_(		"g_file_info_get_edit_name", ctypes.POINTER(ctypes.c_char), [
	("info",		ctypes.POINTER(_GFileInfo)),] )

g_file_info_get_icon = _rpythonic_function_(		"g_file_info_get_icon", ctypes.POINTER(_GIcon), [
	("info",		ctypes.POINTER(_GFileInfo)),] )

g_file_info_get_content_type = _rpythonic_function_(		"g_file_info_get_content_type", ctypes.POINTER(ctypes.c_char), [
	("info",		ctypes.POINTER(_GFileInfo)),] )

g_file_info_get_size = _rpythonic_function_(		"g_file_info_get_size", ctypes.c_long, [
	("info",		ctypes.POINTER(_GFileInfo)),] )

g_file_info_get_modification_time = _rpythonic_function_(		"g_file_info_get_modification_time", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("result",		ctypes.POINTER(_GTimeVal)),] )

g_file_info_get_symlink_target = _rpythonic_function_(		"g_file_info_get_symlink_target", ctypes.POINTER(ctypes.c_char), [
	("info",		ctypes.POINTER(_GFileInfo)),] )

g_file_info_get_etag = _rpythonic_function_(		"g_file_info_get_etag", ctypes.POINTER(ctypes.c_char), [
	("info",		ctypes.POINTER(_GFileInfo)),] )

g_file_info_get_sort_order = _rpythonic_function_(		"g_file_info_get_sort_order", ctypes.c_int, [
	("info",		ctypes.POINTER(_GFileInfo)),] )

g_file_info_set_attribute_mask = _rpythonic_function_(		"g_file_info_set_attribute_mask", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("mask",		ctypes.POINTER(_GFileAttributeMatcher)),] )

g_file_info_unset_attribute_mask = _rpythonic_function_(		"g_file_info_unset_attribute_mask", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),] )

g_file_info_set_file_type = _rpythonic_function_(		"g_file_info_set_file_type", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("C_type",		ctypes.c_int),] )

g_file_info_set_is_hidden = _rpythonic_function_(		"g_file_info_set_is_hidden", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("is_hidden",		ctypes.c_int),] )

g_file_info_set_is_symlink = _rpythonic_function_(		"g_file_info_set_is_symlink", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("is_symlink",		ctypes.c_int),] )

g_file_info_set_name = _rpythonic_function_(		"g_file_info_set_name", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_file_info_set_display_name = _rpythonic_function_(		"g_file_info_set_display_name", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("display_name",		ctypes.POINTER(ctypes.c_char)),] )

g_file_info_set_edit_name = _rpythonic_function_(		"g_file_info_set_edit_name", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("edit_name",		ctypes.POINTER(ctypes.c_char)),] )

g_file_info_set_icon = _rpythonic_function_(		"g_file_info_set_icon", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("icon",		ctypes.POINTER(_GIcon)),] )

g_file_info_set_content_type = _rpythonic_function_(		"g_file_info_set_content_type", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("content_type",		ctypes.POINTER(ctypes.c_char)),] )

g_file_info_set_size = _rpythonic_function_(		"g_file_info_set_size", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("size",		ctypes.c_long),] )

g_file_info_set_modification_time = _rpythonic_function_(		"g_file_info_set_modification_time", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("mtime",		ctypes.POINTER(_GTimeVal)),] )

g_file_info_set_symlink_target = _rpythonic_function_(		"g_file_info_set_symlink_target", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("symlink_target",		ctypes.POINTER(ctypes.c_char)),] )

g_file_info_set_sort_order = _rpythonic_function_(		"g_file_info_set_sort_order", ctypes.c_void_p, [
	("info",		ctypes.POINTER(_GFileInfo)),
	("sort_order",		ctypes.c_int),] )

g_file_attribute_matcher_get_type = _rpythonic_function_(		"g_file_attribute_matcher_get_type", ctypes.c_ulong, [] )

g_file_attribute_matcher_new = _rpythonic_function_(		"g_file_attribute_matcher_new", ctypes.POINTER(_GFileAttributeMatcher), [
	("attributes",		ctypes.POINTER(ctypes.c_char)),] )

g_file_attribute_matcher_ref = _rpythonic_function_(		"g_file_attribute_matcher_ref", ctypes.POINTER(_GFileAttributeMatcher), [
	("matcher",		ctypes.POINTER(_GFileAttributeMatcher)),] )

g_file_attribute_matcher_unref = _rpythonic_function_(		"g_file_attribute_matcher_unref", ctypes.c_void_p, [
	("matcher",		ctypes.POINTER(_GFileAttributeMatcher)),] )

g_file_attribute_matcher_subtract = _rpythonic_function_(		"g_file_attribute_matcher_subtract", ctypes.POINTER(_GFileAttributeMatcher), [
	("matcher",		ctypes.POINTER(_GFileAttributeMatcher)),
	("subtract",		ctypes.POINTER(_GFileAttributeMatcher)),] )

g_file_attribute_matcher_matches = _rpythonic_function_(		"g_file_attribute_matcher_matches", ctypes.c_int, [
	("matcher",		ctypes.POINTER(_GFileAttributeMatcher)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),] )

g_file_attribute_matcher_matches_only = _rpythonic_function_(		"g_file_attribute_matcher_matches_only", ctypes.c_int, [
	("matcher",		ctypes.POINTER(_GFileAttributeMatcher)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),] )

g_file_attribute_matcher_enumerate_namespace = _rpythonic_function_(		"g_file_attribute_matcher_enumerate_namespace", ctypes.c_int, [
	("matcher",		ctypes.POINTER(_GFileAttributeMatcher)),
	("ns",		ctypes.POINTER(ctypes.c_char)),] )

g_file_attribute_matcher_enumerate_next = _rpythonic_function_(		"g_file_attribute_matcher_enumerate_next", ctypes.POINTER(ctypes.c_char), [
	("matcher",		ctypes.POINTER(_GFileAttributeMatcher)),] )

g_file_attribute_matcher_to_string = _rpythonic_function_(		"g_file_attribute_matcher_to_string", ctypes.POINTER(ctypes.c_char), [
	("matcher",		ctypes.POINTER(_GFileAttributeMatcher)),] )

tell = _rpythonic_function_(		"tell", ctypes.c_long, [
	("stream",		ctypes.POINTER(_GFileInputStream)),] )

can_seek = _rpythonic_function_(		"can_seek", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GFileInputStream)),] )

seek = _rpythonic_function_(		"seek", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GFileInputStream)),
	("offset",		ctypes.c_long),
	("C_type",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_input_stream_get_type = _rpythonic_function_(		"g_file_input_stream_get_type", ctypes.c_ulong, [] )

g_file_input_stream_query_info = _rpythonic_function_(		"g_file_input_stream_query_info", ctypes.POINTER(_GFileInfo), [
	("stream",		ctypes.POINTER(_GFileInputStream)),
	("attributes",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_input_stream_query_info_async = _rpythonic_function_(		"g_file_input_stream_query_info_async", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GFileInputStream)),
	("attributes",		ctypes.POINTER(ctypes.c_char)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_input_stream_query_info_finish = _rpythonic_function_(		"g_file_input_stream_query_info_finish", ctypes.POINTER(_GFileInfo), [
	("stream",		ctypes.POINTER(_GFileInputStream)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_error_quark = _rpythonic_function_(		"g_io_error_quark", ctypes.c_uint, [] )

g_io_error_from_errno = _rpythonic_function_(		"g_io_error_from_errno", ctypes.c_int, [
	("err_no",		ctypes.c_int),] )

get_input_stream = _rpythonic_function_(		"get_input_stream", ctypes.POINTER(_GInputStream), [
	("stream",		ctypes.POINTER(_GIOStream)),] )

get_output_stream = _rpythonic_function_(		"get_output_stream", ctypes.POINTER(_GOutputStream), [
	("stream",		ctypes.POINTER(_GIOStream)),] )

_g_reserved9 = _rpythonic_function_(		"_g_reserved9", ctypes.c_void_p, [] )

_g_reserved10 = _rpythonic_function_(		"_g_reserved10", ctypes.c_void_p, [] )

g_io_stream_get_type = _rpythonic_function_(		"g_io_stream_get_type", ctypes.c_ulong, [] )

g_io_stream_get_input_stream = _rpythonic_function_(		"g_io_stream_get_input_stream", ctypes.POINTER(_GInputStream), [
	("stream",		ctypes.POINTER(_GIOStream)),] )

g_io_stream_get_output_stream = _rpythonic_function_(		"g_io_stream_get_output_stream", ctypes.POINTER(_GOutputStream), [
	("stream",		ctypes.POINTER(_GIOStream)),] )

g_io_stream_splice_async = _rpythonic_function_(		"g_io_stream_splice_async", ctypes.c_void_p, [
	("stream1",		ctypes.POINTER(_GIOStream)),
	("stream2",		ctypes.POINTER(_GIOStream)),
	("flags",		ctypes.c_int),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_io_stream_splice_finish = _rpythonic_function_(		"g_io_stream_splice_finish", ctypes.c_int, [
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_stream_close = _rpythonic_function_(		"g_io_stream_close", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GIOStream)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_stream_close_async = _rpythonic_function_(		"g_io_stream_close_async", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GIOStream)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_io_stream_close_finish = _rpythonic_function_(		"g_io_stream_close_finish", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GIOStream)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_stream_is_closed = _rpythonic_function_(		"g_io_stream_is_closed", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GIOStream)),] )

g_io_stream_has_pending = _rpythonic_function_(		"g_io_stream_has_pending", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GIOStream)),] )

g_io_stream_set_pending = _rpythonic_function_(		"g_io_stream_set_pending", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GIOStream)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_io_stream_clear_pending = _rpythonic_function_(		"g_io_stream_clear_pending", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GIOStream)),] )

can_truncate = _rpythonic_function_(		"can_truncate", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GFileIOStream)),] )

truncate_fn = _rpythonic_function_(		"truncate_fn", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GFileIOStream)),
	("size",		ctypes.c_long),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

get_etag = _rpythonic_function_(		"get_etag", ctypes.POINTER(ctypes.c_char), [
	("stream",		ctypes.POINTER(_GFileIOStream)),] )

g_file_io_stream_get_type = _rpythonic_function_(		"g_file_io_stream_get_type", ctypes.c_ulong, [] )

g_file_io_stream_query_info = _rpythonic_function_(		"g_file_io_stream_query_info", ctypes.POINTER(_GFileInfo), [
	("stream",		ctypes.POINTER(_GFileIOStream)),
	("attributes",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_io_stream_query_info_async = _rpythonic_function_(		"g_file_io_stream_query_info_async", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GFileIOStream)),
	("attributes",		ctypes.POINTER(ctypes.c_char)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_io_stream_query_info_finish = _rpythonic_function_(		"g_file_io_stream_query_info_finish", ctypes.POINTER(_GFileInfo), [
	("stream",		ctypes.POINTER(_GFileIOStream)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_io_stream_get_etag = _rpythonic_function_(		"g_file_io_stream_get_etag", ctypes.POINTER(ctypes.c_char), [
	("stream",		ctypes.POINTER(_GFileIOStream)),] )

cancel = _rpythonic_function_(		"cancel", ctypes.c_int, [
	("monitor",		ctypes.POINTER(_GFileMonitor)),] )

g_file_monitor_get_type = _rpythonic_function_(		"g_file_monitor_get_type", ctypes.c_ulong, [] )

g_file_monitor_cancel = _rpythonic_function_(		"g_file_monitor_cancel", ctypes.c_int, [
	("monitor",		ctypes.POINTER(_GFileMonitor)),] )

g_file_monitor_is_cancelled = _rpythonic_function_(		"g_file_monitor_is_cancelled", ctypes.c_int, [
	("monitor",		ctypes.POINTER(_GFileMonitor)),] )

g_file_monitor_set_rate_limit = _rpythonic_function_(		"g_file_monitor_set_rate_limit", ctypes.c_void_p, [
	("monitor",		ctypes.POINTER(_GFileMonitor)),
	("limit_msecs",		ctypes.c_int),] )

g_file_monitor_emit_event = _rpythonic_function_(		"g_file_monitor_emit_event", ctypes.c_void_p, [
	("monitor",		ctypes.POINTER(_GFileMonitor)),
	("child",		ctypes.POINTER(_GFile)),
	("other_file",		ctypes.POINTER(_GFile)),
	("event_type",		ctypes.c_int),] )

got_completion_data = _rpythonic_function_(		"got_completion_data", ctypes.c_void_p, [
	("filename_completer",		ctypes.POINTER(_GFilenameCompleter)),] )

g_filename_completer_get_type = _rpythonic_function_(		"g_filename_completer_get_type", ctypes.c_ulong, [] )

g_filename_completer_new = _rpythonic_function_(		"g_filename_completer_new", ctypes.POINTER(_GFilenameCompleter), [] )

g_filename_completer_get_completion_suffix = _rpythonic_function_(		"g_filename_completer_get_completion_suffix", ctypes.POINTER(ctypes.c_char), [
	("completer",		ctypes.POINTER(_GFilenameCompleter)),
	("initial_text",		ctypes.POINTER(ctypes.c_char)),] )

g_filename_completer_get_completions = _rpythonic_function_(		"g_filename_completer_get_completions", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("completer",		ctypes.POINTER(_GFilenameCompleter)),
	("initial_text",		ctypes.POINTER(ctypes.c_char)),] )

g_filename_completer_set_dirs_only = _rpythonic_function_(		"g_filename_completer_set_dirs_only", ctypes.c_void_p, [
	("completer",		ctypes.POINTER(_GFilenameCompleter)),
	("dirs_only",		ctypes.c_int),] )

g_file_output_stream_get_type = _rpythonic_function_(		"g_file_output_stream_get_type", ctypes.c_ulong, [] )

g_file_output_stream_query_info = _rpythonic_function_(		"g_file_output_stream_query_info", ctypes.POINTER(_GFileInfo), [
	("stream",		ctypes.POINTER(_GFileOutputStream)),
	("attributes",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_output_stream_query_info_async = _rpythonic_function_(		"g_file_output_stream_query_info_async", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GFileOutputStream)),
	("attributes",		ctypes.POINTER(ctypes.c_char)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_file_output_stream_query_info_finish = _rpythonic_function_(		"g_file_output_stream_query_info_finish", ctypes.POINTER(_GFileInfo), [
	("stream",		ctypes.POINTER(_GFileOutputStream)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_file_output_stream_get_etag = _rpythonic_function_(		"g_file_output_stream_get_etag", ctypes.POINTER(ctypes.c_char), [
	("stream",		ctypes.POINTER(_GFileOutputStream)),] )

to_string = _rpythonic_function_(		"to_string", ctypes.POINTER(ctypes.c_char), [
	("address",		ctypes.POINTER(_GInetAddress)),] )

to_bytes = _rpythonic_function_(		"to_bytes", ctypes.POINTER(ctypes.c_ubyte), [
	("address",		ctypes.POINTER(_GInetAddress)),] )

g_inet_address_get_type = _rpythonic_function_(		"g_inet_address_get_type", ctypes.c_ulong, [] )

g_inet_address_new_from_string = _rpythonic_function_(		"g_inet_address_new_from_string", ctypes.POINTER(_GInetAddress), [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

g_inet_address_new_from_bytes = _rpythonic_function_(		"g_inet_address_new_from_bytes", ctypes.POINTER(_GInetAddress), [
	("bytes",		ctypes.POINTER(ctypes.c_ubyte)),
	("family",		ctypes.c_int),] )

g_inet_address_new_loopback = _rpythonic_function_(		"g_inet_address_new_loopback", ctypes.POINTER(_GInetAddress), [
	("family",		ctypes.c_int),] )

g_inet_address_new_any = _rpythonic_function_(		"g_inet_address_new_any", ctypes.POINTER(_GInetAddress), [
	("family",		ctypes.c_int),] )

g_inet_address_equal = _rpythonic_function_(		"g_inet_address_equal", ctypes.c_int, [
	("address",		ctypes.POINTER(_GInetAddress)),
	("other_address",		ctypes.POINTER(_GInetAddress)),] )

g_inet_address_to_string = _rpythonic_function_(		"g_inet_address_to_string", ctypes.POINTER(ctypes.c_char), [
	("address",		ctypes.POINTER(_GInetAddress)),] )

g_inet_address_to_bytes = _rpythonic_function_(		"g_inet_address_to_bytes", ctypes.POINTER(ctypes.c_ubyte), [
	("address",		ctypes.POINTER(_GInetAddress)),] )

g_inet_address_get_native_size = _rpythonic_function_(		"g_inet_address_get_native_size", ctypes.c_ulong, [
	("address",		ctypes.POINTER(_GInetAddress)),] )

g_inet_address_get_family = _rpythonic_function_(		"g_inet_address_get_family", ctypes.c_int, [
	("address",		ctypes.POINTER(_GInetAddress)),] )

g_inet_address_get_is_any = _rpythonic_function_(		"g_inet_address_get_is_any", ctypes.c_int, [
	("address",		ctypes.POINTER(_GInetAddress)),] )

g_inet_address_get_is_loopback = _rpythonic_function_(		"g_inet_address_get_is_loopback", ctypes.c_int, [
	("address",		ctypes.POINTER(_GInetAddress)),] )

g_inet_address_get_is_link_local = _rpythonic_function_(		"g_inet_address_get_is_link_local", ctypes.c_int, [
	("address",		ctypes.POINTER(_GInetAddress)),] )

g_inet_address_get_is_site_local = _rpythonic_function_(		"g_inet_address_get_is_site_local", ctypes.c_int, [
	("address",		ctypes.POINTER(_GInetAddress)),] )

g_inet_address_get_is_multicast = _rpythonic_function_(		"g_inet_address_get_is_multicast", ctypes.c_int, [
	("address",		ctypes.POINTER(_GInetAddress)),] )

g_inet_address_get_is_mc_global = _rpythonic_function_(		"g_inet_address_get_is_mc_global", ctypes.c_int, [
	("address",		ctypes.POINTER(_GInetAddress)),] )

g_inet_address_get_is_mc_link_local = _rpythonic_function_(		"g_inet_address_get_is_mc_link_local", ctypes.c_int, [
	("address",		ctypes.POINTER(_GInetAddress)),] )

g_inet_address_get_is_mc_node_local = _rpythonic_function_(		"g_inet_address_get_is_mc_node_local", ctypes.c_int, [
	("address",		ctypes.POINTER(_GInetAddress)),] )

g_inet_address_get_is_mc_org_local = _rpythonic_function_(		"g_inet_address_get_is_mc_org_local", ctypes.c_int, [
	("address",		ctypes.POINTER(_GInetAddress)),] )

g_inet_address_get_is_mc_site_local = _rpythonic_function_(		"g_inet_address_get_is_mc_site_local", ctypes.c_int, [
	("address",		ctypes.POINTER(_GInetAddress)),] )

g_inet_address_mask_get_type = _rpythonic_function_(		"g_inet_address_mask_get_type", ctypes.c_ulong, [] )

g_inet_address_mask_new = _rpythonic_function_(		"g_inet_address_mask_new", ctypes.POINTER(_GInetAddressMask), [
	("addr",		ctypes.POINTER(_GInetAddress)),
	("length",		ctypes.c_uint),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_inet_address_mask_new_from_string = _rpythonic_function_(		"g_inet_address_mask_new_from_string", ctypes.POINTER(_GInetAddressMask), [
	("mask_string",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_inet_address_mask_to_string = _rpythonic_function_(		"g_inet_address_mask_to_string", ctypes.POINTER(ctypes.c_char), [
	("mask",		ctypes.POINTER(_GInetAddressMask)),] )

g_inet_address_mask_get_family = _rpythonic_function_(		"g_inet_address_mask_get_family", ctypes.c_int, [
	("mask",		ctypes.POINTER(_GInetAddressMask)),] )

g_inet_address_mask_get_address = _rpythonic_function_(		"g_inet_address_mask_get_address", ctypes.POINTER(_GInetAddress), [
	("mask",		ctypes.POINTER(_GInetAddressMask)),] )

g_inet_address_mask_get_length = _rpythonic_function_(		"g_inet_address_mask_get_length", ctypes.c_uint, [
	("mask",		ctypes.POINTER(_GInetAddressMask)),] )

g_inet_address_mask_matches = _rpythonic_function_(		"g_inet_address_mask_matches", ctypes.c_int, [
	("mask",		ctypes.POINTER(_GInetAddressMask)),
	("address",		ctypes.POINTER(_GInetAddress)),] )

g_inet_address_mask_equal = _rpythonic_function_(		"g_inet_address_mask_equal", ctypes.c_int, [
	("mask",		ctypes.POINTER(_GInetAddressMask)),
	("mask2",		ctypes.POINTER(_GInetAddressMask)),] )

get_family = _rpythonic_function_(		"get_family", ctypes.c_int, [
	("address",		ctypes.POINTER(_GSocketAddress)),] )

get_native_size = _rpythonic_function_(		"get_native_size", ctypes.c_long, [
	("address",		ctypes.POINTER(_GSocketAddress)),] )

to_native = _rpythonic_function_(		"to_native", ctypes.c_int, [
	("address",		ctypes.POINTER(_GSocketAddress)),
	("dest",		ctypes.POINTER(ctypes.c_void_p)),
	("destlen",		ctypes.c_ulong),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_address_get_type = _rpythonic_function_(		"g_socket_address_get_type", ctypes.c_ulong, [] )

g_socket_address_get_family = _rpythonic_function_(		"g_socket_address_get_family", ctypes.c_int, [
	("address",		ctypes.POINTER(_GSocketAddress)),] )

g_socket_address_new_from_native = _rpythonic_function_(		"g_socket_address_new_from_native", ctypes.POINTER(_GSocketAddress), [
	("native",		ctypes.POINTER(ctypes.c_void_p)),
	("C_len",		ctypes.c_ulong),] )

g_socket_address_to_native = _rpythonic_function_(		"g_socket_address_to_native", ctypes.c_int, [
	("address",		ctypes.POINTER(_GSocketAddress)),
	("dest",		ctypes.POINTER(ctypes.c_void_p)),
	("destlen",		ctypes.c_ulong),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_address_get_native_size = _rpythonic_function_(		"g_socket_address_get_native_size", ctypes.c_long, [
	("address",		ctypes.POINTER(_GSocketAddress)),] )

g_inet_socket_address_get_type = _rpythonic_function_(		"g_inet_socket_address_get_type", ctypes.c_ulong, [] )

g_inet_socket_address_new = _rpythonic_function_(		"g_inet_socket_address_new", ctypes.POINTER(_GSocketAddress), [
	("address",		ctypes.POINTER(_GInetAddress)),
	("port",		ctypes.c_ushort),] )

g_inet_socket_address_get_address = _rpythonic_function_(		"g_inet_socket_address_get_address", ctypes.POINTER(_GInetAddress), [
	("address",		ctypes.POINTER(_GInetSocketAddress)),] )

g_inet_socket_address_get_port = _rpythonic_function_(		"g_inet_socket_address_get_port", ctypes.c_ushort, [
	("address",		ctypes.POINTER(_GInetSocketAddress)),] )

g_inet_socket_address_get_flowinfo = _rpythonic_function_(		"g_inet_socket_address_get_flowinfo", ctypes.c_uint, [
	("address",		ctypes.POINTER(_GInetSocketAddress)),] )

g_inet_socket_address_get_scope_id = _rpythonic_function_(		"g_inet_socket_address_get_scope_id", ctypes.c_uint, [
	("address",		ctypes.POINTER(_GInetSocketAddress)),] )

g_app_info_create_flags_get_type = _rpythonic_function_(		"g_app_info_create_flags_get_type", ctypes.c_ulong, [] )

g_converter_flags_get_type = _rpythonic_function_(		"g_converter_flags_get_type", ctypes.c_ulong, [] )

g_converter_result_get_type = _rpythonic_function_(		"g_converter_result_get_type", ctypes.c_ulong, [] )

g_data_stream_byte_order_get_type = _rpythonic_function_(		"g_data_stream_byte_order_get_type", ctypes.c_ulong, [] )

g_data_stream_newline_type_get_type = _rpythonic_function_(		"g_data_stream_newline_type_get_type", ctypes.c_ulong, [] )

g_file_attribute_type_get_type = _rpythonic_function_(		"g_file_attribute_type_get_type", ctypes.c_ulong, [] )

g_file_attribute_info_flags_get_type = _rpythonic_function_(		"g_file_attribute_info_flags_get_type", ctypes.c_ulong, [] )

g_file_attribute_status_get_type = _rpythonic_function_(		"g_file_attribute_status_get_type", ctypes.c_ulong, [] )

g_file_query_info_flags_get_type = _rpythonic_function_(		"g_file_query_info_flags_get_type", ctypes.c_ulong, [] )

g_file_create_flags_get_type = _rpythonic_function_(		"g_file_create_flags_get_type", ctypes.c_ulong, [] )

g_mount_mount_flags_get_type = _rpythonic_function_(		"g_mount_mount_flags_get_type", ctypes.c_ulong, [] )

g_mount_unmount_flags_get_type = _rpythonic_function_(		"g_mount_unmount_flags_get_type", ctypes.c_ulong, [] )

g_drive_start_flags_get_type = _rpythonic_function_(		"g_drive_start_flags_get_type", ctypes.c_ulong, [] )

g_drive_start_stop_type_get_type = _rpythonic_function_(		"g_drive_start_stop_type_get_type", ctypes.c_ulong, [] )

g_file_copy_flags_get_type = _rpythonic_function_(		"g_file_copy_flags_get_type", ctypes.c_ulong, [] )

g_file_monitor_flags_get_type = _rpythonic_function_(		"g_file_monitor_flags_get_type", ctypes.c_ulong, [] )

g_file_type_get_type = _rpythonic_function_(		"g_file_type_get_type", ctypes.c_ulong, [] )

g_filesystem_preview_type_get_type = _rpythonic_function_(		"g_filesystem_preview_type_get_type", ctypes.c_ulong, [] )

g_file_monitor_event_get_type = _rpythonic_function_(		"g_file_monitor_event_get_type", ctypes.c_ulong, [] )

g_io_error_enum_get_type = _rpythonic_function_(		"g_io_error_enum_get_type", ctypes.c_ulong, [] )

g_ask_password_flags_get_type = _rpythonic_function_(		"g_ask_password_flags_get_type", ctypes.c_ulong, [] )

g_password_save_get_type = _rpythonic_function_(		"g_password_save_get_type", ctypes.c_ulong, [] )

g_mount_operation_result_get_type = _rpythonic_function_(		"g_mount_operation_result_get_type", ctypes.c_ulong, [] )

g_output_stream_splice_flags_get_type = _rpythonic_function_(		"g_output_stream_splice_flags_get_type", ctypes.c_ulong, [] )

g_io_stream_splice_flags_get_type = _rpythonic_function_(		"g_io_stream_splice_flags_get_type", ctypes.c_ulong, [] )

g_emblem_origin_get_type = _rpythonic_function_(		"g_emblem_origin_get_type", ctypes.c_ulong, [] )

g_resolver_error_get_type = _rpythonic_function_(		"g_resolver_error_get_type", ctypes.c_ulong, [] )

g_resource_error_get_type = _rpythonic_function_(		"g_resource_error_get_type", ctypes.c_ulong, [] )

g_resource_flags_get_type = _rpythonic_function_(		"g_resource_flags_get_type", ctypes.c_ulong, [] )

g_resource_lookup_flags_get_type = _rpythonic_function_(		"g_resource_lookup_flags_get_type", ctypes.c_ulong, [] )

g_socket_family_get_type = _rpythonic_function_(		"g_socket_family_get_type", ctypes.c_ulong, [] )

g_socket_type_get_type = _rpythonic_function_(		"g_socket_type_get_type", ctypes.c_ulong, [] )

g_socket_msg_flags_get_type = _rpythonic_function_(		"g_socket_msg_flags_get_type", ctypes.c_ulong, [] )

g_socket_protocol_get_type = _rpythonic_function_(		"g_socket_protocol_get_type", ctypes.c_ulong, [] )

g_zlib_compressor_format_get_type = _rpythonic_function_(		"g_zlib_compressor_format_get_type", ctypes.c_ulong, [] )

g_unix_socket_address_type_get_type = _rpythonic_function_(		"g_unix_socket_address_type_get_type", ctypes.c_ulong, [] )

g_bus_type_get_type = _rpythonic_function_(		"g_bus_type_get_type", ctypes.c_ulong, [] )

g_bus_name_owner_flags_get_type = _rpythonic_function_(		"g_bus_name_owner_flags_get_type", ctypes.c_ulong, [] )

g_bus_name_watcher_flags_get_type = _rpythonic_function_(		"g_bus_name_watcher_flags_get_type", ctypes.c_ulong, [] )

g_dbus_proxy_flags_get_type = _rpythonic_function_(		"g_dbus_proxy_flags_get_type", ctypes.c_ulong, [] )

g_dbus_error_get_type = _rpythonic_function_(		"g_dbus_error_get_type", ctypes.c_ulong, [] )

g_dbus_connection_flags_get_type = _rpythonic_function_(		"g_dbus_connection_flags_get_type", ctypes.c_ulong, [] )

g_dbus_capability_flags_get_type = _rpythonic_function_(		"g_dbus_capability_flags_get_type", ctypes.c_ulong, [] )

g_dbus_call_flags_get_type = _rpythonic_function_(		"g_dbus_call_flags_get_type", ctypes.c_ulong, [] )

g_dbus_message_type_get_type = _rpythonic_function_(		"g_dbus_message_type_get_type", ctypes.c_ulong, [] )

g_dbus_message_flags_get_type = _rpythonic_function_(		"g_dbus_message_flags_get_type", ctypes.c_ulong, [] )

g_dbus_message_header_field_get_type = _rpythonic_function_(		"g_dbus_message_header_field_get_type", ctypes.c_ulong, [] )

g_dbus_property_info_flags_get_type = _rpythonic_function_(		"g_dbus_property_info_flags_get_type", ctypes.c_ulong, [] )

g_dbus_subtree_flags_get_type = _rpythonic_function_(		"g_dbus_subtree_flags_get_type", ctypes.c_ulong, [] )

g_dbus_server_flags_get_type = _rpythonic_function_(		"g_dbus_server_flags_get_type", ctypes.c_ulong, [] )

g_dbus_signal_flags_get_type = _rpythonic_function_(		"g_dbus_signal_flags_get_type", ctypes.c_ulong, [] )

g_dbus_send_message_flags_get_type = _rpythonic_function_(		"g_dbus_send_message_flags_get_type", ctypes.c_ulong, [] )

g_credentials_type_get_type = _rpythonic_function_(		"g_credentials_type_get_type", ctypes.c_ulong, [] )

g_dbus_message_byte_order_get_type = _rpythonic_function_(		"g_dbus_message_byte_order_get_type", ctypes.c_ulong, [] )

g_application_flags_get_type = _rpythonic_function_(		"g_application_flags_get_type", ctypes.c_ulong, [] )

g_tls_error_get_type = _rpythonic_function_(		"g_tls_error_get_type", ctypes.c_ulong, [] )

g_tls_certificate_flags_get_type = _rpythonic_function_(		"g_tls_certificate_flags_get_type", ctypes.c_ulong, [] )

g_tls_authentication_mode_get_type = _rpythonic_function_(		"g_tls_authentication_mode_get_type", ctypes.c_ulong, [] )

g_tls_rehandshake_mode_get_type = _rpythonic_function_(		"g_tls_rehandshake_mode_get_type", ctypes.c_ulong, [] )

g_tls_password_flags_get_type = _rpythonic_function_(		"g_tls_password_flags_get_type", ctypes.c_ulong, [] )

g_tls_interaction_result_get_type = _rpythonic_function_(		"g_tls_interaction_result_get_type", ctypes.c_ulong, [] )

g_dbus_interface_skeleton_flags_get_type = _rpythonic_function_(		"g_dbus_interface_skeleton_flags_get_type", ctypes.c_ulong, [] )

g_dbus_object_manager_client_flags_get_type = _rpythonic_function_(		"g_dbus_object_manager_client_flags_get_type", ctypes.c_ulong, [] )

g_tls_database_verify_flags_get_type = _rpythonic_function_(		"g_tls_database_verify_flags_get_type", ctypes.c_ulong, [] )

g_tls_database_lookup_flags_get_type = _rpythonic_function_(		"g_tls_database_lookup_flags_get_type", ctypes.c_ulong, [] )

g_io_module_scope_flags_get_type = _rpythonic_function_(		"g_io_module_scope_flags_get_type", ctypes.c_ulong, [] )

g_socket_client_event_get_type = _rpythonic_function_(		"g_socket_client_event_get_type", ctypes.c_ulong, [] )

g_settings_bind_flags_get_type = _rpythonic_function_(		"g_settings_bind_flags_get_type", ctypes.c_ulong, [] )

GModuleCheckInit = _rpythonic_function_(		"GModuleCheckInit", ctypes.POINTER(ctypes.c_char), [
	("module",		ctypes.POINTER(_GModule)),] )

GModuleUnload = _rpythonic_function_(		"GModuleUnload", ctypes.c_void_p, [
	("module",		ctypes.POINTER(_GModule)),] )

g_module_supported = _rpythonic_function_(		"g_module_supported", ctypes.c_int, [] )

g_module_open = _rpythonic_function_(		"g_module_open", ctypes.POINTER(_GModule), [
	("file_name",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),] )

g_module_close = _rpythonic_function_(		"g_module_close", ctypes.c_int, [
	("module",		ctypes.POINTER(_GModule)),] )

g_module_make_resident = _rpythonic_function_(		"g_module_make_resident", ctypes.c_void_p, [
	("module",		ctypes.POINTER(_GModule)),] )

g_module_error = _rpythonic_function_(		"g_module_error", ctypes.POINTER(ctypes.c_char), [] )

g_module_symbol = _rpythonic_function_(		"g_module_symbol", ctypes.c_int, [
	("module",		ctypes.POINTER(_GModule)),
	("symbol_name",		ctypes.POINTER(ctypes.c_char)),
	("symbol",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

g_module_name = _rpythonic_function_(		"g_module_name", ctypes.POINTER(ctypes.c_char), [
	("module",		ctypes.POINTER(_GModule)),] )

g_module_build_path = _rpythonic_function_(		"g_module_build_path", ctypes.POINTER(ctypes.c_char), [
	("directory",		ctypes.POINTER(ctypes.c_char)),
	("module_name",		ctypes.POINTER(ctypes.c_char)),] )

g_io_module_scope_new = _rpythonic_function_(		"g_io_module_scope_new", ctypes.POINTER(_GIOModuleScope), [
	("flags",		ctypes.c_int),] )

g_io_module_scope_free = _rpythonic_function_(		"g_io_module_scope_free", ctypes.c_void_p, [
	("scope",		ctypes.POINTER(_GIOModuleScope)),] )

g_io_module_scope_block = _rpythonic_function_(		"g_io_module_scope_block", ctypes.c_void_p, [
	("scope",		ctypes.POINTER(_GIOModuleScope)),
	("basename",		ctypes.POINTER(ctypes.c_char)),] )

g_io_module_get_type = _rpythonic_function_(		"g_io_module_get_type", ctypes.c_ulong, [] )

g_io_module_new = _rpythonic_function_(		"g_io_module_new", ctypes.POINTER(_GIOModule), [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

g_io_modules_scan_all_in_directory = _rpythonic_function_(		"g_io_modules_scan_all_in_directory", ctypes.c_void_p, [
	("dirname",		ctypes.POINTER(ctypes.c_char)),] )

g_io_modules_load_all_in_directory = _rpythonic_function_(		"g_io_modules_load_all_in_directory", ctypes.POINTER(_GList), [
	("dirname",		ctypes.POINTER(ctypes.c_char)),] )

g_io_modules_scan_all_in_directory_with_scope = _rpythonic_function_(		"g_io_modules_scan_all_in_directory_with_scope", ctypes.c_void_p, [
	("dirname",		ctypes.POINTER(ctypes.c_char)),
	("scope",		ctypes.POINTER(_GIOModuleScope)),] )

g_io_modules_load_all_in_directory_with_scope = _rpythonic_function_(		"g_io_modules_load_all_in_directory_with_scope", ctypes.POINTER(_GList), [
	("dirname",		ctypes.POINTER(ctypes.c_char)),
	("scope",		ctypes.POINTER(_GIOModuleScope)),] )

g_io_extension_point_register = _rpythonic_function_(		"g_io_extension_point_register", ctypes.POINTER(_GIOExtensionPoint), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_io_extension_point_lookup = _rpythonic_function_(		"g_io_extension_point_lookup", ctypes.POINTER(_GIOExtensionPoint), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_io_extension_point_set_required_type = _rpythonic_function_(		"g_io_extension_point_set_required_type", ctypes.c_void_p, [
	("extension_point",		ctypes.POINTER(_GIOExtensionPoint)),
	("C_type",		ctypes.c_ulong),] )

g_io_extension_point_get_required_type = _rpythonic_function_(		"g_io_extension_point_get_required_type", ctypes.c_ulong, [
	("extension_point",		ctypes.POINTER(_GIOExtensionPoint)),] )

g_io_extension_point_get_extensions = _rpythonic_function_(		"g_io_extension_point_get_extensions", ctypes.POINTER(_GList), [
	("extension_point",		ctypes.POINTER(_GIOExtensionPoint)),] )

g_io_extension_point_get_extension_by_name = _rpythonic_function_(		"g_io_extension_point_get_extension_by_name", ctypes.POINTER(_GIOExtension), [
	("extension_point",		ctypes.POINTER(_GIOExtensionPoint)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_io_extension_point_implement = _rpythonic_function_(		"g_io_extension_point_implement", ctypes.POINTER(_GIOExtension), [
	("extension_point_name",		ctypes.POINTER(ctypes.c_char)),
	("C_type",		ctypes.c_ulong),
	("extension_name",		ctypes.POINTER(ctypes.c_char)),
	("priority",		ctypes.c_int),] )

g_io_extension_get_type = _rpythonic_function_(		"g_io_extension_get_type", ctypes.c_ulong, [
	("extension",		ctypes.POINTER(_GIOExtension)),] )

g_io_extension_get_name = _rpythonic_function_(		"g_io_extension_get_name", ctypes.POINTER(ctypes.c_char), [
	("extension",		ctypes.POINTER(_GIOExtension)),] )

g_io_extension_get_priority = _rpythonic_function_(		"g_io_extension_get_priority", ctypes.c_int, [
	("extension",		ctypes.POINTER(_GIOExtension)),] )

g_io_extension_ref_class = _rpythonic_function_(		"g_io_extension_ref_class", ctypes.POINTER(_GTypeClass), [
	("extension",		ctypes.POINTER(_GIOExtension)),] )

g_io_module_load = _rpythonic_function_(		"g_io_module_load", ctypes.c_void_p, [
	("module",		ctypes.POINTER(_GIOModule)),] )

g_io_module_unload = _rpythonic_function_(		"g_io_module_unload", ctypes.c_void_p, [
	("module",		ctypes.POINTER(_GIOModule)),] )

g_io_module_query = _rpythonic_function_(		"g_io_module_query", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [] )

g_io_scheduler_push_job = _rpythonic_function_(		"g_io_scheduler_push_job", ctypes.c_void_p, [
	("job_func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GIOSchedulerJob),ctypes.POINTER(_GCancellable),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),] )

g_io_scheduler_cancel_all_jobs = _rpythonic_function_(		"g_io_scheduler_cancel_all_jobs", ctypes.c_void_p, [] )

g_io_scheduler_job_send_to_mainloop = _rpythonic_function_(		"g_io_scheduler_job_send_to_mainloop", ctypes.c_int, [
	("job",		ctypes.POINTER(_GIOSchedulerJob)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_io_scheduler_job_send_to_mainloop_async = _rpythonic_function_(		"g_io_scheduler_job_send_to_mainloop_async", ctypes.c_void_p, [
	("job",		ctypes.POINTER(_GIOSchedulerJob)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, )),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

load_async = _rpythonic_function_(		"load_async", ctypes.c_void_p, [
	("icon",		ctypes.POINTER(_GLoadableIcon)),
	("size",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

load_finish = _rpythonic_function_(		"load_finish", ctypes.POINTER(_GInputStream), [
	("icon",		ctypes.POINTER(_GLoadableIcon)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("C_type",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_loadable_icon_get_type = _rpythonic_function_(		"g_loadable_icon_get_type", ctypes.c_ulong, [] )

g_loadable_icon_load = _rpythonic_function_(		"g_loadable_icon_load", ctypes.POINTER(_GInputStream), [
	("icon",		ctypes.POINTER(_GLoadableIcon)),
	("size",		ctypes.c_int),
	("C_type",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_loadable_icon_load_async = _rpythonic_function_(		"g_loadable_icon_load_async", ctypes.c_void_p, [
	("icon",		ctypes.POINTER(_GLoadableIcon)),
	("size",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_loadable_icon_load_finish = _rpythonic_function_(		"g_loadable_icon_load_finish", ctypes.POINTER(_GInputStream), [
	("icon",		ctypes.POINTER(_GLoadableIcon)),
	("res",		ctypes.POINTER(_GAsyncResult)),
	("C_type",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_memory_input_stream_get_type = _rpythonic_function_(		"g_memory_input_stream_get_type", ctypes.c_ulong, [] )

g_memory_input_stream_new = _rpythonic_function_(		"g_memory_input_stream_new", ctypes.POINTER(_GInputStream), [] )

g_memory_input_stream_new_from_data = _rpythonic_function_(		"g_memory_input_stream_new_from_data", ctypes.POINTER(_GInputStream), [
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("C_len",		ctypes.c_long),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_memory_input_stream_add_data = _rpythonic_function_(		"g_memory_input_stream_add_data", ctypes.c_void_p, [
	("stream",		ctypes.POINTER(_GMemoryInputStream)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("C_len",		ctypes.c_long),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

GReallocFunc = _rpythonic_function_(		"GReallocFunc", ctypes.POINTER(ctypes.c_void_p), [
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.c_ulong),] )

g_memory_output_stream_get_type = _rpythonic_function_(		"g_memory_output_stream_get_type", ctypes.c_ulong, [] )

g_memory_output_stream_new = _rpythonic_function_(		"g_memory_output_stream_new", ctypes.POINTER(_GOutputStream), [
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.c_ulong),
	("realloc_function",		ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), ctypes.POINTER(ctypes.c_void_p),ctypes.c_ulong,)),
	("destroy_function",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_memory_output_stream_get_data = _rpythonic_function_(		"g_memory_output_stream_get_data", ctypes.POINTER(ctypes.c_void_p), [
	("ostream",		ctypes.POINTER(_GMemoryOutputStream)),] )

g_memory_output_stream_get_size = _rpythonic_function_(		"g_memory_output_stream_get_size", ctypes.c_ulong, [
	("ostream",		ctypes.POINTER(_GMemoryOutputStream)),] )

g_memory_output_stream_get_data_size = _rpythonic_function_(		"g_memory_output_stream_get_data_size", ctypes.c_ulong, [
	("ostream",		ctypes.POINTER(_GMemoryOutputStream)),] )

g_memory_output_stream_steal_data = _rpythonic_function_(		"g_memory_output_stream_steal_data", ctypes.POINTER(ctypes.c_void_p), [
	("ostream",		ctypes.POINTER(_GMemoryOutputStream)),] )

unmounted = _rpythonic_function_(		"unmounted", ctypes.c_void_p, [
	("mount",		ctypes.POINTER(_GMount)),] )

get_root = _rpythonic_function_(		"get_root", ctypes.POINTER(_GFile), [
	("mount",		ctypes.POINTER(_GMount)),] )

get_uuid = _rpythonic_function_(		"get_uuid", ctypes.POINTER(ctypes.c_char), [
	("mount",		ctypes.POINTER(_GMount)),] )

get_volume = _rpythonic_function_(		"get_volume", ctypes.POINTER(_GVolume), [
	("mount",		ctypes.POINTER(_GMount)),] )

get_drive = _rpythonic_function_(		"get_drive", ctypes.POINTER(_GDrive), [
	("mount",		ctypes.POINTER(_GMount)),] )

can_unmount = _rpythonic_function_(		"can_unmount", ctypes.c_int, [
	("mount",		ctypes.POINTER(_GMount)),] )

unmount = _rpythonic_function_(		"unmount", ctypes.c_void_p, [
	("mount",		ctypes.POINTER(_GMount)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

unmount_finish = _rpythonic_function_(		"unmount_finish", ctypes.c_int, [
	("mount",		ctypes.POINTER(_GMount)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

remount = _rpythonic_function_(		"remount", ctypes.c_void_p, [
	("mount",		ctypes.POINTER(_GMount)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

remount_finish = _rpythonic_function_(		"remount_finish", ctypes.c_int, [
	("mount",		ctypes.POINTER(_GMount)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

guess_content_type = _rpythonic_function_(		"guess_content_type", ctypes.c_void_p, [
	("mount",		ctypes.POINTER(_GMount)),
	("force_rescan",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

guess_content_type_finish = _rpythonic_function_(		"guess_content_type_finish", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("mount",		ctypes.POINTER(_GMount)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

guess_content_type_sync = _rpythonic_function_(		"guess_content_type_sync", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("mount",		ctypes.POINTER(_GMount)),
	("force_rescan",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

pre_unmount = _rpythonic_function_(		"pre_unmount", ctypes.c_void_p, [
	("mount",		ctypes.POINTER(_GMount)),] )

unmount_with_operation = _rpythonic_function_(		"unmount_with_operation", ctypes.c_void_p, [
	("mount",		ctypes.POINTER(_GMount)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

unmount_with_operation_finish = _rpythonic_function_(		"unmount_with_operation_finish", ctypes.c_int, [
	("mount",		ctypes.POINTER(_GMount)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

get_default_location = _rpythonic_function_(		"get_default_location", ctypes.POINTER(_GFile), [
	("mount",		ctypes.POINTER(_GMount)),] )

g_mount_get_type = _rpythonic_function_(		"g_mount_get_type", ctypes.c_ulong, [] )

g_mount_get_root = _rpythonic_function_(		"g_mount_get_root", ctypes.POINTER(_GFile), [
	("mount",		ctypes.POINTER(_GMount)),] )

g_mount_get_default_location = _rpythonic_function_(		"g_mount_get_default_location", ctypes.POINTER(_GFile), [
	("mount",		ctypes.POINTER(_GMount)),] )

g_mount_get_name = _rpythonic_function_(		"g_mount_get_name", ctypes.POINTER(ctypes.c_char), [
	("mount",		ctypes.POINTER(_GMount)),] )

g_mount_get_icon = _rpythonic_function_(		"g_mount_get_icon", ctypes.POINTER(_GIcon), [
	("mount",		ctypes.POINTER(_GMount)),] )

g_mount_get_uuid = _rpythonic_function_(		"g_mount_get_uuid", ctypes.POINTER(ctypes.c_char), [
	("mount",		ctypes.POINTER(_GMount)),] )

g_mount_get_volume = _rpythonic_function_(		"g_mount_get_volume", ctypes.POINTER(_GVolume), [
	("mount",		ctypes.POINTER(_GMount)),] )

g_mount_get_drive = _rpythonic_function_(		"g_mount_get_drive", ctypes.POINTER(_GDrive), [
	("mount",		ctypes.POINTER(_GMount)),] )

g_mount_can_unmount = _rpythonic_function_(		"g_mount_can_unmount", ctypes.c_int, [
	("mount",		ctypes.POINTER(_GMount)),] )

g_mount_can_eject = _rpythonic_function_(		"g_mount_can_eject", ctypes.c_int, [
	("mount",		ctypes.POINTER(_GMount)),] )

g_mount_unmount = _rpythonic_function_(		"g_mount_unmount", ctypes.c_void_p, [
	("mount",		ctypes.POINTER(_GMount)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_mount_unmount_finish = _rpythonic_function_(		"g_mount_unmount_finish", ctypes.c_int, [
	("mount",		ctypes.POINTER(_GMount)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_mount_eject = _rpythonic_function_(		"g_mount_eject", ctypes.c_void_p, [
	("mount",		ctypes.POINTER(_GMount)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_mount_eject_finish = _rpythonic_function_(		"g_mount_eject_finish", ctypes.c_int, [
	("mount",		ctypes.POINTER(_GMount)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_mount_remount = _rpythonic_function_(		"g_mount_remount", ctypes.c_void_p, [
	("mount",		ctypes.POINTER(_GMount)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_mount_remount_finish = _rpythonic_function_(		"g_mount_remount_finish", ctypes.c_int, [
	("mount",		ctypes.POINTER(_GMount)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_mount_guess_content_type = _rpythonic_function_(		"g_mount_guess_content_type", ctypes.c_void_p, [
	("mount",		ctypes.POINTER(_GMount)),
	("force_rescan",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_mount_guess_content_type_finish = _rpythonic_function_(		"g_mount_guess_content_type_finish", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("mount",		ctypes.POINTER(_GMount)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_mount_guess_content_type_sync = _rpythonic_function_(		"g_mount_guess_content_type_sync", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("mount",		ctypes.POINTER(_GMount)),
	("force_rescan",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_mount_is_shadowed = _rpythonic_function_(		"g_mount_is_shadowed", ctypes.c_int, [
	("mount",		ctypes.POINTER(_GMount)),] )

g_mount_shadow = _rpythonic_function_(		"g_mount_shadow", ctypes.c_void_p, [
	("mount",		ctypes.POINTER(_GMount)),] )

g_mount_unshadow = _rpythonic_function_(		"g_mount_unshadow", ctypes.c_void_p, [
	("mount",		ctypes.POINTER(_GMount)),] )

g_mount_unmount_with_operation = _rpythonic_function_(		"g_mount_unmount_with_operation", ctypes.c_void_p, [
	("mount",		ctypes.POINTER(_GMount)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_mount_unmount_with_operation_finish = _rpythonic_function_(		"g_mount_unmount_with_operation_finish", ctypes.c_int, [
	("mount",		ctypes.POINTER(_GMount)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_mount_eject_with_operation = _rpythonic_function_(		"g_mount_eject_with_operation", ctypes.c_void_p, [
	("mount",		ctypes.POINTER(_GMount)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_mount_eject_with_operation_finish = _rpythonic_function_(		"g_mount_eject_with_operation_finish", ctypes.c_int, [
	("mount",		ctypes.POINTER(_GMount)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_mount_get_sort_key = _rpythonic_function_(		"g_mount_get_sort_key", ctypes.POINTER(ctypes.c_char), [
	("mount",		ctypes.POINTER(_GMount)),] )

ask_password = _rpythonic_function_(		"ask_password", ctypes.c_void_p, [
	("op",		ctypes.POINTER(_GMountOperation)),
	("message",		ctypes.POINTER(ctypes.c_char)),
	("default_user",		ctypes.POINTER(ctypes.c_char)),
	("default_domain",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),] )

ask_question = _rpythonic_function_(		"ask_question", ctypes.c_void_p, [
	("op",		ctypes.POINTER(_GMountOperation)),
	("message",		ctypes.POINTER(ctypes.c_char)),
	("choices",		ctypes.POINTER(ctypes.c_char)),] )

reply = _rpythonic_function_(		"reply", ctypes.c_void_p, [
	("op",		ctypes.POINTER(_GMountOperation)),
	("result",		ctypes.c_int),] )

aborted = _rpythonic_function_(		"aborted", ctypes.c_void_p, [
	("op",		ctypes.POINTER(_GMountOperation)),] )

show_processes = _rpythonic_function_(		"show_processes", ctypes.c_void_p, [
	("op",		ctypes.POINTER(_GMountOperation)),
	("message",		ctypes.POINTER(ctypes.c_char)),
	("processes",		ctypes.POINTER(_GArray)),
	("choices",		ctypes.POINTER(ctypes.c_char)),] )

g_mount_operation_get_type = _rpythonic_function_(		"g_mount_operation_get_type", ctypes.c_ulong, [] )

g_mount_operation_new = _rpythonic_function_(		"g_mount_operation_new", ctypes.POINTER(_GMountOperation), [] )

g_mount_operation_get_username = _rpythonic_function_(		"g_mount_operation_get_username", ctypes.POINTER(ctypes.c_char), [
	("op",		ctypes.POINTER(_GMountOperation)),] )

g_mount_operation_set_username = _rpythonic_function_(		"g_mount_operation_set_username", ctypes.c_void_p, [
	("op",		ctypes.POINTER(_GMountOperation)),
	("username",		ctypes.POINTER(ctypes.c_char)),] )

g_mount_operation_get_password = _rpythonic_function_(		"g_mount_operation_get_password", ctypes.POINTER(ctypes.c_char), [
	("op",		ctypes.POINTER(_GMountOperation)),] )

g_mount_operation_set_password = _rpythonic_function_(		"g_mount_operation_set_password", ctypes.c_void_p, [
	("op",		ctypes.POINTER(_GMountOperation)),
	("password",		ctypes.POINTER(ctypes.c_char)),] )

g_mount_operation_get_anonymous = _rpythonic_function_(		"g_mount_operation_get_anonymous", ctypes.c_int, [
	("op",		ctypes.POINTER(_GMountOperation)),] )

g_mount_operation_set_anonymous = _rpythonic_function_(		"g_mount_operation_set_anonymous", ctypes.c_void_p, [
	("op",		ctypes.POINTER(_GMountOperation)),
	("anonymous",		ctypes.c_int),] )

g_mount_operation_get_domain = _rpythonic_function_(		"g_mount_operation_get_domain", ctypes.POINTER(ctypes.c_char), [
	("op",		ctypes.POINTER(_GMountOperation)),] )

g_mount_operation_set_domain = _rpythonic_function_(		"g_mount_operation_set_domain", ctypes.c_void_p, [
	("op",		ctypes.POINTER(_GMountOperation)),
	("domain",		ctypes.POINTER(ctypes.c_char)),] )

g_mount_operation_get_password_save = _rpythonic_function_(		"g_mount_operation_get_password_save", ctypes.c_int, [
	("op",		ctypes.POINTER(_GMountOperation)),] )

g_mount_operation_set_password_save = _rpythonic_function_(		"g_mount_operation_set_password_save", ctypes.c_void_p, [
	("op",		ctypes.POINTER(_GMountOperation)),
	("save",		ctypes.c_int),] )

g_mount_operation_get_choice = _rpythonic_function_(		"g_mount_operation_get_choice", ctypes.c_int, [
	("op",		ctypes.POINTER(_GMountOperation)),] )

g_mount_operation_set_choice = _rpythonic_function_(		"g_mount_operation_set_choice", ctypes.c_void_p, [
	("op",		ctypes.POINTER(_GMountOperation)),
	("choice",		ctypes.c_int),] )

g_mount_operation_reply = _rpythonic_function_(		"g_mount_operation_reply", ctypes.c_void_p, [
	("op",		ctypes.POINTER(_GMountOperation)),
	("result",		ctypes.c_int),] )

volume_added = _rpythonic_function_(		"volume_added", ctypes.c_void_p, [
	("volume_monitor",		ctypes.POINTER(_GVolumeMonitor)),
	("volume",		ctypes.POINTER(_GVolume)),] )

volume_removed = _rpythonic_function_(		"volume_removed", ctypes.c_void_p, [
	("volume_monitor",		ctypes.POINTER(_GVolumeMonitor)),
	("volume",		ctypes.POINTER(_GVolume)),] )

volume_changed = _rpythonic_function_(		"volume_changed", ctypes.c_void_p, [
	("volume_monitor",		ctypes.POINTER(_GVolumeMonitor)),
	("volume",		ctypes.POINTER(_GVolume)),] )

mount_added = _rpythonic_function_(		"mount_added", ctypes.c_void_p, [
	("volume_monitor",		ctypes.POINTER(_GVolumeMonitor)),
	("mount",		ctypes.POINTER(_GMount)),] )

mount_removed = _rpythonic_function_(		"mount_removed", ctypes.c_void_p, [
	("volume_monitor",		ctypes.POINTER(_GVolumeMonitor)),
	("mount",		ctypes.POINTER(_GMount)),] )

mount_pre_unmount = _rpythonic_function_(		"mount_pre_unmount", ctypes.c_void_p, [
	("volume_monitor",		ctypes.POINTER(_GVolumeMonitor)),
	("mount",		ctypes.POINTER(_GMount)),] )

mount_changed = _rpythonic_function_(		"mount_changed", ctypes.c_void_p, [
	("volume_monitor",		ctypes.POINTER(_GVolumeMonitor)),
	("mount",		ctypes.POINTER(_GMount)),] )

drive_connected = _rpythonic_function_(		"drive_connected", ctypes.c_void_p, [
	("volume_monitor",		ctypes.POINTER(_GVolumeMonitor)),
	("drive",		ctypes.POINTER(_GDrive)),] )

drive_disconnected = _rpythonic_function_(		"drive_disconnected", ctypes.c_void_p, [
	("volume_monitor",		ctypes.POINTER(_GVolumeMonitor)),
	("drive",		ctypes.POINTER(_GDrive)),] )

drive_changed = _rpythonic_function_(		"drive_changed", ctypes.c_void_p, [
	("volume_monitor",		ctypes.POINTER(_GVolumeMonitor)),
	("drive",		ctypes.POINTER(_GDrive)),] )

is_supported = _rpythonic_function_(		"is_supported", ctypes.c_int, [] )

get_connected_drives = _rpythonic_function_(		"get_connected_drives", ctypes.POINTER(_GList), [
	("volume_monitor",		ctypes.POINTER(_GVolumeMonitor)),] )

get_mounts = _rpythonic_function_(		"get_mounts", ctypes.POINTER(_GList), [
	("volume_monitor",		ctypes.POINTER(_GVolumeMonitor)),] )

get_volume_for_uuid = _rpythonic_function_(		"get_volume_for_uuid", ctypes.POINTER(_GVolume), [
	("volume_monitor",		ctypes.POINTER(_GVolumeMonitor)),
	("uuid",		ctypes.POINTER(ctypes.c_char)),] )

get_mount_for_uuid = _rpythonic_function_(		"get_mount_for_uuid", ctypes.POINTER(_GMount), [
	("volume_monitor",		ctypes.POINTER(_GVolumeMonitor)),
	("uuid",		ctypes.POINTER(ctypes.c_char)),] )

adopt_orphan_mount = _rpythonic_function_(		"adopt_orphan_mount", ctypes.POINTER(_GVolume), [
	("mount",		ctypes.POINTER(_GMount)),
	("volume_monitor",		ctypes.POINTER(_GVolumeMonitor)),] )

drive_eject_button = _rpythonic_function_(		"drive_eject_button", ctypes.c_void_p, [
	("volume_monitor",		ctypes.POINTER(_GVolumeMonitor)),
	("drive",		ctypes.POINTER(_GDrive)),] )

drive_stop_button = _rpythonic_function_(		"drive_stop_button", ctypes.c_void_p, [
	("volume_monitor",		ctypes.POINTER(_GVolumeMonitor)),
	("drive",		ctypes.POINTER(_GDrive)),] )

g_volume_monitor_get_type = _rpythonic_function_(		"g_volume_monitor_get_type", ctypes.c_ulong, [] )

g_volume_monitor_get = _rpythonic_function_(		"g_volume_monitor_get", ctypes.POINTER(_GVolumeMonitor), [] )

g_volume_monitor_get_connected_drives = _rpythonic_function_(		"g_volume_monitor_get_connected_drives", ctypes.POINTER(_GList), [
	("volume_monitor",		ctypes.POINTER(_GVolumeMonitor)),] )

g_volume_monitor_get_volumes = _rpythonic_function_(		"g_volume_monitor_get_volumes", ctypes.POINTER(_GList), [
	("volume_monitor",		ctypes.POINTER(_GVolumeMonitor)),] )

g_volume_monitor_get_mounts = _rpythonic_function_(		"g_volume_monitor_get_mounts", ctypes.POINTER(_GList), [
	("volume_monitor",		ctypes.POINTER(_GVolumeMonitor)),] )

g_volume_monitor_get_volume_for_uuid = _rpythonic_function_(		"g_volume_monitor_get_volume_for_uuid", ctypes.POINTER(_GVolume), [
	("volume_monitor",		ctypes.POINTER(_GVolumeMonitor)),
	("uuid",		ctypes.POINTER(ctypes.c_char)),] )

g_volume_monitor_get_mount_for_uuid = _rpythonic_function_(		"g_volume_monitor_get_mount_for_uuid", ctypes.POINTER(_GMount), [
	("volume_monitor",		ctypes.POINTER(_GVolumeMonitor)),
	("uuid",		ctypes.POINTER(ctypes.c_char)),] )

g_volume_monitor_adopt_orphan_mount = _rpythonic_function_(		"g_volume_monitor_adopt_orphan_mount", ctypes.POINTER(_GVolume), [
	("mount",		ctypes.POINTER(_GMount)),] )

get_mount_for_mount_path = _rpythonic_function_(		"get_mount_for_mount_path", ctypes.POINTER(_GMount), [
	("mount_path",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),] )

g_native_volume_monitor_get_type = _rpythonic_function_(		"g_native_volume_monitor_get_type", ctypes.c_ulong, [] )

g_network_address_get_type = _rpythonic_function_(		"g_network_address_get_type", ctypes.c_ulong, [] )

g_network_address_new = _rpythonic_function_(		"g_network_address_new", ctypes.POINTER(_GSocketConnectable), [
	("hostname",		ctypes.POINTER(ctypes.c_char)),
	("port",		ctypes.c_ushort),] )

g_network_address_parse = _rpythonic_function_(		"g_network_address_parse", ctypes.POINTER(_GSocketConnectable), [
	("host_and_port",		ctypes.POINTER(ctypes.c_char)),
	("default_port",		ctypes.c_ushort),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_network_address_parse_uri = _rpythonic_function_(		"g_network_address_parse_uri", ctypes.POINTER(_GSocketConnectable), [
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("default_port",		ctypes.c_ushort),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_network_address_get_hostname = _rpythonic_function_(		"g_network_address_get_hostname", ctypes.POINTER(ctypes.c_char), [
	("addr",		ctypes.POINTER(_GNetworkAddress)),] )

g_network_address_get_port = _rpythonic_function_(		"g_network_address_get_port", ctypes.c_ushort, [
	("addr",		ctypes.POINTER(_GNetworkAddress)),] )

g_network_address_get_scheme = _rpythonic_function_(		"g_network_address_get_scheme", ctypes.POINTER(ctypes.c_char), [
	("addr",		ctypes.POINTER(_GNetworkAddress)),] )

network_changed = _rpythonic_function_(		"network_changed", ctypes.c_void_p, [
	("monitor",		ctypes.POINTER(_GNetworkMonitor)),
	("available",		ctypes.c_int),] )

can_reach = _rpythonic_function_(		"can_reach", ctypes.c_int, [
	("monitor",		ctypes.POINTER(_GNetworkMonitor)),
	("connectable",		ctypes.POINTER(_GSocketConnectable)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

can_reach_async = _rpythonic_function_(		"can_reach_async", ctypes.c_void_p, [
	("monitor",		ctypes.POINTER(_GNetworkMonitor)),
	("connectable",		ctypes.POINTER(_GSocketConnectable)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

can_reach_finish = _rpythonic_function_(		"can_reach_finish", ctypes.c_int, [
	("monitor",		ctypes.POINTER(_GNetworkMonitor)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_network_monitor_get_type = _rpythonic_function_(		"g_network_monitor_get_type", ctypes.c_ulong, [] )

g_network_monitor_get_default = _rpythonic_function_(		"g_network_monitor_get_default", ctypes.POINTER(_GNetworkMonitor), [] )

g_network_monitor_get_network_available = _rpythonic_function_(		"g_network_monitor_get_network_available", ctypes.c_int, [
	("monitor",		ctypes.POINTER(_GNetworkMonitor)),] )

g_network_monitor_can_reach = _rpythonic_function_(		"g_network_monitor_can_reach", ctypes.c_int, [
	("monitor",		ctypes.POINTER(_GNetworkMonitor)),
	("connectable",		ctypes.POINTER(_GSocketConnectable)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_network_monitor_can_reach_async = _rpythonic_function_(		"g_network_monitor_can_reach_async", ctypes.c_void_p, [
	("monitor",		ctypes.POINTER(_GNetworkMonitor)),
	("connectable",		ctypes.POINTER(_GSocketConnectable)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_network_monitor_can_reach_finish = _rpythonic_function_(		"g_network_monitor_can_reach_finish", ctypes.c_int, [
	("monitor",		ctypes.POINTER(_GNetworkMonitor)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_network_service_get_type = _rpythonic_function_(		"g_network_service_get_type", ctypes.c_ulong, [] )

g_network_service_new = _rpythonic_function_(		"g_network_service_new", ctypes.POINTER(_GSocketConnectable), [
	("service",		ctypes.POINTER(ctypes.c_char)),
	("protocol",		ctypes.POINTER(ctypes.c_char)),
	("domain",		ctypes.POINTER(ctypes.c_char)),] )

g_network_service_get_service = _rpythonic_function_(		"g_network_service_get_service", ctypes.POINTER(ctypes.c_char), [
	("srv",		ctypes.POINTER(_GNetworkService)),] )

g_network_service_get_protocol = _rpythonic_function_(		"g_network_service_get_protocol", ctypes.POINTER(ctypes.c_char), [
	("srv",		ctypes.POINTER(_GNetworkService)),] )

g_network_service_get_domain = _rpythonic_function_(		"g_network_service_get_domain", ctypes.POINTER(ctypes.c_char), [
	("srv",		ctypes.POINTER(_GNetworkService)),] )

g_network_service_get_scheme = _rpythonic_function_(		"g_network_service_get_scheme", ctypes.POINTER(ctypes.c_char), [
	("srv",		ctypes.POINTER(_GNetworkService)),] )

g_network_service_set_scheme = _rpythonic_function_(		"g_network_service_set_scheme", ctypes.c_void_p, [
	("srv",		ctypes.POINTER(_GNetworkService)),
	("scheme",		ctypes.POINTER(ctypes.c_char)),] )

acquire = _rpythonic_function_(		"acquire", ctypes.c_int, [
	("permission",		ctypes.POINTER(_GPermission)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

acquire_async = _rpythonic_function_(		"acquire_async", ctypes.c_void_p, [
	("permission",		ctypes.POINTER(_GPermission)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

acquire_finish = _rpythonic_function_(		"acquire_finish", ctypes.c_int, [
	("permission",		ctypes.POINTER(_GPermission)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

release = _rpythonic_function_(		"release", ctypes.c_int, [
	("permission",		ctypes.POINTER(_GPermission)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

release_async = _rpythonic_function_(		"release_async", ctypes.c_void_p, [
	("permission",		ctypes.POINTER(_GPermission)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

release_finish = _rpythonic_function_(		"release_finish", ctypes.c_int, [
	("permission",		ctypes.POINTER(_GPermission)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_permission_get_type = _rpythonic_function_(		"g_permission_get_type", ctypes.c_ulong, [] )

g_permission_acquire = _rpythonic_function_(		"g_permission_acquire", ctypes.c_int, [
	("permission",		ctypes.POINTER(_GPermission)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_permission_acquire_async = _rpythonic_function_(		"g_permission_acquire_async", ctypes.c_void_p, [
	("permission",		ctypes.POINTER(_GPermission)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_permission_acquire_finish = _rpythonic_function_(		"g_permission_acquire_finish", ctypes.c_int, [
	("permission",		ctypes.POINTER(_GPermission)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_permission_release = _rpythonic_function_(		"g_permission_release", ctypes.c_int, [
	("permission",		ctypes.POINTER(_GPermission)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_permission_release_async = _rpythonic_function_(		"g_permission_release_async", ctypes.c_void_p, [
	("permission",		ctypes.POINTER(_GPermission)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_permission_release_finish = _rpythonic_function_(		"g_permission_release_finish", ctypes.c_int, [
	("permission",		ctypes.POINTER(_GPermission)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_permission_get_allowed = _rpythonic_function_(		"g_permission_get_allowed", ctypes.c_int, [
	("permission",		ctypes.POINTER(_GPermission)),] )

g_permission_get_can_acquire = _rpythonic_function_(		"g_permission_get_can_acquire", ctypes.c_int, [
	("permission",		ctypes.POINTER(_GPermission)),] )

g_permission_get_can_release = _rpythonic_function_(		"g_permission_get_can_release", ctypes.c_int, [
	("permission",		ctypes.POINTER(_GPermission)),] )

g_permission_impl_update = _rpythonic_function_(		"g_permission_impl_update", ctypes.c_void_p, [
	("permission",		ctypes.POINTER(_GPermission)),
	("allowed",		ctypes.c_int),
	("can_acquire",		ctypes.c_int),
	("can_release",		ctypes.c_int),] )

can_poll = _rpythonic_function_(		"can_poll", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GPollableInputStream)),] )

is_readable = _rpythonic_function_(		"is_readable", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GPollableInputStream)),] )

create_source = _rpythonic_function_(		"create_source", ctypes.POINTER(_GSource), [
	("stream",		ctypes.POINTER(_GPollableInputStream)),
	("cancellable",		ctypes.POINTER(_GCancellable)),] )

read_nonblocking = _rpythonic_function_(		"read_nonblocking", ctypes.c_long, [
	("stream",		ctypes.POINTER(_GPollableInputStream)),
	("buffer",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.c_ulong),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_pollable_input_stream_get_type = _rpythonic_function_(		"g_pollable_input_stream_get_type", ctypes.c_ulong, [] )

g_pollable_input_stream_can_poll = _rpythonic_function_(		"g_pollable_input_stream_can_poll", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GPollableInputStream)),] )

g_pollable_input_stream_is_readable = _rpythonic_function_(		"g_pollable_input_stream_is_readable", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GPollableInputStream)),] )

g_pollable_input_stream_create_source = _rpythonic_function_(		"g_pollable_input_stream_create_source", ctypes.POINTER(_GSource), [
	("stream",		ctypes.POINTER(_GPollableInputStream)),
	("cancellable",		ctypes.POINTER(_GCancellable)),] )

g_pollable_input_stream_read_nonblocking = _rpythonic_function_(		"g_pollable_input_stream_read_nonblocking", ctypes.c_long, [
	("stream",		ctypes.POINTER(_GPollableInputStream)),
	("buffer",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.c_ulong),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_pollable_source_new = _rpythonic_function_(		"g_pollable_source_new", ctypes.POINTER(_GSource), [
	("pollable_stream",		ctypes.POINTER(_GObject)),] )

is_writable = _rpythonic_function_(		"is_writable", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GPollableOutputStream)),] )

write_nonblocking = _rpythonic_function_(		"write_nonblocking", ctypes.c_long, [
	("stream",		ctypes.POINTER(_GPollableOutputStream)),
	("buffer",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.c_ulong),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_pollable_output_stream_get_type = _rpythonic_function_(		"g_pollable_output_stream_get_type", ctypes.c_ulong, [] )

g_pollable_output_stream_can_poll = _rpythonic_function_(		"g_pollable_output_stream_can_poll", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GPollableOutputStream)),] )

g_pollable_output_stream_is_writable = _rpythonic_function_(		"g_pollable_output_stream_is_writable", ctypes.c_int, [
	("stream",		ctypes.POINTER(_GPollableOutputStream)),] )

g_pollable_output_stream_create_source = _rpythonic_function_(		"g_pollable_output_stream_create_source", ctypes.POINTER(_GSource), [
	("stream",		ctypes.POINTER(_GPollableOutputStream)),
	("cancellable",		ctypes.POINTER(_GCancellable)),] )

g_pollable_output_stream_write_nonblocking = _rpythonic_function_(		"g_pollable_output_stream_write_nonblocking", ctypes.c_long, [
	("stream",		ctypes.POINTER(_GPollableOutputStream)),
	("buffer",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.c_ulong),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

connect = _rpythonic_function_(		"connect", ctypes.POINTER(_GIOStream), [
	("proxy",		ctypes.POINTER(_GProxy)),
	("connection",		ctypes.POINTER(_GIOStream)),
	("proxy_address",		ctypes.POINTER(_GProxyAddress)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

connect_async = _rpythonic_function_(		"connect_async", ctypes.c_void_p, [
	("proxy",		ctypes.POINTER(_GProxy)),
	("connection",		ctypes.POINTER(_GIOStream)),
	("proxy_address",		ctypes.POINTER(_GProxyAddress)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

connect_finish = _rpythonic_function_(		"connect_finish", ctypes.POINTER(_GIOStream), [
	("proxy",		ctypes.POINTER(_GProxy)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

supports_hostname = _rpythonic_function_(		"supports_hostname", ctypes.c_int, [
	("proxy",		ctypes.POINTER(_GProxy)),] )

g_proxy_get_type = _rpythonic_function_(		"g_proxy_get_type", ctypes.c_ulong, [] )

g_proxy_get_default_for_protocol = _rpythonic_function_(		"g_proxy_get_default_for_protocol", ctypes.POINTER(_GProxy), [
	("protocol",		ctypes.POINTER(ctypes.c_char)),] )

g_proxy_connect = _rpythonic_function_(		"g_proxy_connect", ctypes.POINTER(_GIOStream), [
	("proxy",		ctypes.POINTER(_GProxy)),
	("connection",		ctypes.POINTER(_GIOStream)),
	("proxy_address",		ctypes.POINTER(_GProxyAddress)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_proxy_connect_async = _rpythonic_function_(		"g_proxy_connect_async", ctypes.c_void_p, [
	("proxy",		ctypes.POINTER(_GProxy)),
	("connection",		ctypes.POINTER(_GIOStream)),
	("proxy_address",		ctypes.POINTER(_GProxyAddress)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_proxy_connect_finish = _rpythonic_function_(		"g_proxy_connect_finish", ctypes.POINTER(_GIOStream), [
	("proxy",		ctypes.POINTER(_GProxy)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_proxy_supports_hostname = _rpythonic_function_(		"g_proxy_supports_hostname", ctypes.c_int, [
	("proxy",		ctypes.POINTER(_GProxy)),] )

g_proxy_address_get_type = _rpythonic_function_(		"g_proxy_address_get_type", ctypes.c_ulong, [] )

g_proxy_address_new = _rpythonic_function_(		"g_proxy_address_new", ctypes.POINTER(_GSocketAddress), [
	("inetaddr",		ctypes.POINTER(_GInetAddress)),
	("port",		ctypes.c_ushort),
	("protocol",		ctypes.POINTER(ctypes.c_char)),
	("dest_hostname",		ctypes.POINTER(ctypes.c_char)),
	("dest_port",		ctypes.c_ushort),
	("username",		ctypes.POINTER(ctypes.c_char)),
	("password",		ctypes.POINTER(ctypes.c_char)),] )

g_proxy_address_get_protocol = _rpythonic_function_(		"g_proxy_address_get_protocol", ctypes.POINTER(ctypes.c_char), [
	("proxy",		ctypes.POINTER(_GProxyAddress)),] )

g_proxy_address_get_destination_hostname = _rpythonic_function_(		"g_proxy_address_get_destination_hostname", ctypes.POINTER(ctypes.c_char), [
	("proxy",		ctypes.POINTER(_GProxyAddress)),] )

g_proxy_address_get_destination_port = _rpythonic_function_(		"g_proxy_address_get_destination_port", ctypes.c_ushort, [
	("proxy",		ctypes.POINTER(_GProxyAddress)),] )

g_proxy_address_get_username = _rpythonic_function_(		"g_proxy_address_get_username", ctypes.POINTER(ctypes.c_char), [
	("proxy",		ctypes.POINTER(_GProxyAddress)),] )

g_proxy_address_get_password = _rpythonic_function_(		"g_proxy_address_get_password", ctypes.POINTER(ctypes.c_char), [
	("proxy",		ctypes.POINTER(_GProxyAddress)),] )

next = _rpythonic_function_(		"next", ctypes.POINTER(_GSocketAddress), [
	("enumerator",		ctypes.POINTER(_GSocketAddressEnumerator)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

next_async = _rpythonic_function_(		"next_async", ctypes.c_void_p, [
	("enumerator",		ctypes.POINTER(_GSocketAddressEnumerator)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

next_finish = _rpythonic_function_(		"next_finish", ctypes.POINTER(_GSocketAddress), [
	("enumerator",		ctypes.POINTER(_GSocketAddressEnumerator)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_address_enumerator_get_type = _rpythonic_function_(		"g_socket_address_enumerator_get_type", ctypes.c_ulong, [] )

g_socket_address_enumerator_next = _rpythonic_function_(		"g_socket_address_enumerator_next", ctypes.POINTER(_GSocketAddress), [
	("enumerator",		ctypes.POINTER(_GSocketAddressEnumerator)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_address_enumerator_next_async = _rpythonic_function_(		"g_socket_address_enumerator_next_async", ctypes.c_void_p, [
	("enumerator",		ctypes.POINTER(_GSocketAddressEnumerator)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_socket_address_enumerator_next_finish = _rpythonic_function_(		"g_socket_address_enumerator_next_finish", ctypes.POINTER(_GSocketAddress), [
	("enumerator",		ctypes.POINTER(_GSocketAddressEnumerator)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_proxy_address_enumerator_get_type = _rpythonic_function_(		"g_proxy_address_enumerator_get_type", ctypes.c_ulong, [] )

lookup = _rpythonic_function_(		"lookup", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("resolver",		ctypes.POINTER(_GProxyResolver)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

lookup_async = _rpythonic_function_(		"lookup_async", ctypes.c_void_p, [
	("resolver",		ctypes.POINTER(_GProxyResolver)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

lookup_finish = _rpythonic_function_(		"lookup_finish", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("resolver",		ctypes.POINTER(_GProxyResolver)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_proxy_resolver_get_type = _rpythonic_function_(		"g_proxy_resolver_get_type", ctypes.c_ulong, [] )

g_proxy_resolver_get_default = _rpythonic_function_(		"g_proxy_resolver_get_default", ctypes.POINTER(_GProxyResolver), [] )

g_proxy_resolver_is_supported = _rpythonic_function_(		"g_proxy_resolver_is_supported", ctypes.c_int, [
	("resolver",		ctypes.POINTER(_GProxyResolver)),] )

g_proxy_resolver_lookup = _rpythonic_function_(		"g_proxy_resolver_lookup", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("resolver",		ctypes.POINTER(_GProxyResolver)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_proxy_resolver_lookup_async = _rpythonic_function_(		"g_proxy_resolver_lookup_async", ctypes.c_void_p, [
	("resolver",		ctypes.POINTER(_GProxyResolver)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_proxy_resolver_lookup_finish = _rpythonic_function_(		"g_proxy_resolver_lookup_finish", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("resolver",		ctypes.POINTER(_GProxyResolver)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

reload = _rpythonic_function_(		"reload", ctypes.c_void_p, [
	("resolver",		ctypes.POINTER(_GResolver)),] )

lookup_by_name = _rpythonic_function_(		"lookup_by_name", ctypes.POINTER(_GList), [
	("resolver",		ctypes.POINTER(_GResolver)),
	("hostname",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

lookup_by_name_async = _rpythonic_function_(		"lookup_by_name_async", ctypes.c_void_p, [
	("resolver",		ctypes.POINTER(_GResolver)),
	("hostname",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

lookup_by_name_finish = _rpythonic_function_(		"lookup_by_name_finish", ctypes.POINTER(_GList), [
	("resolver",		ctypes.POINTER(_GResolver)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

lookup_by_address = _rpythonic_function_(		"lookup_by_address", ctypes.POINTER(ctypes.c_char), [
	("resolver",		ctypes.POINTER(_GResolver)),
	("address",		ctypes.POINTER(_GInetAddress)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

lookup_by_address_async = _rpythonic_function_(		"lookup_by_address_async", ctypes.c_void_p, [
	("resolver",		ctypes.POINTER(_GResolver)),
	("address",		ctypes.POINTER(_GInetAddress)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

lookup_by_address_finish = _rpythonic_function_(		"lookup_by_address_finish", ctypes.POINTER(ctypes.c_char), [
	("resolver",		ctypes.POINTER(_GResolver)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

lookup_service = _rpythonic_function_(		"lookup_service", ctypes.POINTER(_GList), [
	("resolver",		ctypes.POINTER(_GResolver)),
	("rrname",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

lookup_service_async = _rpythonic_function_(		"lookup_service_async", ctypes.c_void_p, [
	("resolver",		ctypes.POINTER(_GResolver)),
	("rrname",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

lookup_service_finish = _rpythonic_function_(		"lookup_service_finish", ctypes.POINTER(_GList), [
	("resolver",		ctypes.POINTER(_GResolver)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_resolver_get_type = _rpythonic_function_(		"g_resolver_get_type", ctypes.c_ulong, [] )

g_resolver_get_default = _rpythonic_function_(		"g_resolver_get_default", ctypes.POINTER(_GResolver), [] )

g_resolver_set_default = _rpythonic_function_(		"g_resolver_set_default", ctypes.c_void_p, [
	("resolver",		ctypes.POINTER(_GResolver)),] )

g_resolver_lookup_by_name = _rpythonic_function_(		"g_resolver_lookup_by_name", ctypes.POINTER(_GList), [
	("resolver",		ctypes.POINTER(_GResolver)),
	("hostname",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_resolver_lookup_by_name_async = _rpythonic_function_(		"g_resolver_lookup_by_name_async", ctypes.c_void_p, [
	("resolver",		ctypes.POINTER(_GResolver)),
	("hostname",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_resolver_lookup_by_name_finish = _rpythonic_function_(		"g_resolver_lookup_by_name_finish", ctypes.POINTER(_GList), [
	("resolver",		ctypes.POINTER(_GResolver)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_resolver_free_addresses = _rpythonic_function_(		"g_resolver_free_addresses", ctypes.c_void_p, [
	("addresses",		ctypes.POINTER(_GList)),] )

g_resolver_lookup_by_address = _rpythonic_function_(		"g_resolver_lookup_by_address", ctypes.POINTER(ctypes.c_char), [
	("resolver",		ctypes.POINTER(_GResolver)),
	("address",		ctypes.POINTER(_GInetAddress)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_resolver_lookup_by_address_async = _rpythonic_function_(		"g_resolver_lookup_by_address_async", ctypes.c_void_p, [
	("resolver",		ctypes.POINTER(_GResolver)),
	("address",		ctypes.POINTER(_GInetAddress)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_resolver_lookup_by_address_finish = _rpythonic_function_(		"g_resolver_lookup_by_address_finish", ctypes.POINTER(ctypes.c_char), [
	("resolver",		ctypes.POINTER(_GResolver)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_resolver_lookup_service = _rpythonic_function_(		"g_resolver_lookup_service", ctypes.POINTER(_GList), [
	("resolver",		ctypes.POINTER(_GResolver)),
	("service",		ctypes.POINTER(ctypes.c_char)),
	("protocol",		ctypes.POINTER(ctypes.c_char)),
	("domain",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_resolver_lookup_service_async = _rpythonic_function_(		"g_resolver_lookup_service_async", ctypes.c_void_p, [
	("resolver",		ctypes.POINTER(_GResolver)),
	("service",		ctypes.POINTER(ctypes.c_char)),
	("protocol",		ctypes.POINTER(ctypes.c_char)),
	("domain",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_resolver_lookup_service_finish = _rpythonic_function_(		"g_resolver_lookup_service_finish", ctypes.POINTER(_GList), [
	("resolver",		ctypes.POINTER(_GResolver)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_resolver_free_targets = _rpythonic_function_(		"g_resolver_free_targets", ctypes.c_void_p, [
	("targets",		ctypes.POINTER(_GList)),] )

g_resolver_error_quark = _rpythonic_function_(		"g_resolver_error_quark", ctypes.c_uint, [] )

g_resource_error_quark = _rpythonic_function_(		"g_resource_error_quark", ctypes.c_uint, [] )

g_resource_get_type = _rpythonic_function_(		"g_resource_get_type", ctypes.c_ulong, [] )

g_resource_new_from_data = _rpythonic_function_(		"g_resource_new_from_data", ctypes.POINTER(_GResource), [
	("data",		ctypes.POINTER(_GBytes)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_resource_ref = _rpythonic_function_(		"g_resource_ref", ctypes.POINTER(_GResource), [
	("resource",		ctypes.POINTER(_GResource)),] )

g_resource_unref = _rpythonic_function_(		"g_resource_unref", ctypes.c_void_p, [
	("resource",		ctypes.POINTER(_GResource)),] )

g_resource_load = _rpythonic_function_(		"g_resource_load", ctypes.POINTER(_GResource), [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_resource_open_stream = _rpythonic_function_(		"g_resource_open_stream", ctypes.POINTER(_GInputStream), [
	("resource",		ctypes.POINTER(_GResource)),
	("path",		ctypes.POINTER(ctypes.c_char)),
	("lookup_flags",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_resource_lookup_data = _rpythonic_function_(		"g_resource_lookup_data", ctypes.POINTER(_GBytes), [
	("resource",		ctypes.POINTER(_GResource)),
	("path",		ctypes.POINTER(ctypes.c_char)),
	("lookup_flags",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_resource_enumerate_children = _rpythonic_function_(		"g_resource_enumerate_children", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("resource",		ctypes.POINTER(_GResource)),
	("path",		ctypes.POINTER(ctypes.c_char)),
	("lookup_flags",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_resource_get_info = _rpythonic_function_(		"g_resource_get_info", ctypes.c_int, [
	("resource",		ctypes.POINTER(_GResource)),
	("path",		ctypes.POINTER(ctypes.c_char)),
	("lookup_flags",		ctypes.c_int),
	("size",		ctypes.POINTER(ctypes.c_ulong)),
	("flags",		ctypes.POINTER(ctypes.c_uint)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_resources_register = _rpythonic_function_(		"g_resources_register", ctypes.c_void_p, [
	("resource",		ctypes.POINTER(_GResource)),] )

g_resources_unregister = _rpythonic_function_(		"g_resources_unregister", ctypes.c_void_p, [
	("resource",		ctypes.POINTER(_GResource)),] )

g_resources_open_stream = _rpythonic_function_(		"g_resources_open_stream", ctypes.POINTER(_GInputStream), [
	("path",		ctypes.POINTER(ctypes.c_char)),
	("lookup_flags",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_resources_lookup_data = _rpythonic_function_(		"g_resources_lookup_data", ctypes.POINTER(_GBytes), [
	("path",		ctypes.POINTER(ctypes.c_char)),
	("lookup_flags",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_resources_enumerate_children = _rpythonic_function_(		"g_resources_enumerate_children", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("path",		ctypes.POINTER(ctypes.c_char)),
	("lookup_flags",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_resources_get_info = _rpythonic_function_(		"g_resources_get_info", ctypes.c_int, [
	("path",		ctypes.POINTER(ctypes.c_char)),
	("lookup_flags",		ctypes.c_int),
	("size",		ctypes.POINTER(ctypes.c_ulong)),
	("flags",		ctypes.POINTER(ctypes.c_uint)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_static_resource_init = _rpythonic_function_(		"g_static_resource_init", ctypes.c_void_p, [
	("static_resource",		ctypes.POINTER(_GStaticResource)),] )

g_static_resource_fini = _rpythonic_function_(		"g_static_resource_fini", ctypes.c_void_p, [
	("static_resource",		ctypes.POINTER(_GStaticResource)),] )

g_static_resource_get_resource = _rpythonic_function_(		"g_static_resource_get_resource", ctypes.POINTER(_GResource), [
	("static_resource",		ctypes.POINTER(_GStaticResource)),] )

g_seekable_get_type = _rpythonic_function_(		"g_seekable_get_type", ctypes.c_ulong, [] )

g_seekable_tell = _rpythonic_function_(		"g_seekable_tell", ctypes.c_long, [
	("seekable",		ctypes.POINTER(_GSeekable)),] )

g_seekable_can_seek = _rpythonic_function_(		"g_seekable_can_seek", ctypes.c_int, [
	("seekable",		ctypes.POINTER(_GSeekable)),] )

g_seekable_seek = _rpythonic_function_(		"g_seekable_seek", ctypes.c_int, [
	("seekable",		ctypes.POINTER(_GSeekable)),
	("offset",		ctypes.c_long),
	("C_type",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_seekable_can_truncate = _rpythonic_function_(		"g_seekable_can_truncate", ctypes.c_int, [
	("seekable",		ctypes.POINTER(_GSeekable)),] )

g_seekable_truncate = _rpythonic_function_(		"g_seekable_truncate", ctypes.c_int, [
	("seekable",		ctypes.POINTER(_GSeekable)),
	("offset",		ctypes.c_long),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_settings_schema_source_get_type = _rpythonic_function_(		"g_settings_schema_source_get_type", ctypes.c_ulong, [] )

g_settings_schema_source_get_default = _rpythonic_function_(		"g_settings_schema_source_get_default", ctypes.POINTER(_GSettingsSchemaSource), [] )

g_settings_schema_source_ref = _rpythonic_function_(		"g_settings_schema_source_ref", ctypes.POINTER(_GSettingsSchemaSource), [
	("source",		ctypes.POINTER(_GSettingsSchemaSource)),] )

g_settings_schema_source_unref = _rpythonic_function_(		"g_settings_schema_source_unref", ctypes.c_void_p, [
	("source",		ctypes.POINTER(_GSettingsSchemaSource)),] )

g_settings_schema_source_new_from_directory = _rpythonic_function_(		"g_settings_schema_source_new_from_directory", ctypes.POINTER(_GSettingsSchemaSource), [
	("directory",		ctypes.POINTER(ctypes.c_char)),
	("parent",		ctypes.POINTER(_GSettingsSchemaSource)),
	("trusted",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_settings_schema_source_lookup = _rpythonic_function_(		"g_settings_schema_source_lookup", ctypes.POINTER(_GSettingsSchema), [
	("source",		ctypes.POINTER(_GSettingsSchemaSource)),
	("schema_id",		ctypes.POINTER(ctypes.c_char)),
	("recursive",		ctypes.c_int),] )

g_settings_schema_get_type = _rpythonic_function_(		"g_settings_schema_get_type", ctypes.c_ulong, [] )

g_settings_schema_ref = _rpythonic_function_(		"g_settings_schema_ref", ctypes.POINTER(_GSettingsSchema), [
	("schema",		ctypes.POINTER(_GSettingsSchema)),] )

g_settings_schema_unref = _rpythonic_function_(		"g_settings_schema_unref", ctypes.c_void_p, [
	("schema",		ctypes.POINTER(_GSettingsSchema)),] )

g_settings_schema_get_id = _rpythonic_function_(		"g_settings_schema_get_id", ctypes.POINTER(ctypes.c_char), [
	("schema",		ctypes.POINTER(_GSettingsSchema)),] )

g_settings_schema_get_path = _rpythonic_function_(		"g_settings_schema_get_path", ctypes.POINTER(ctypes.c_char), [
	("schema",		ctypes.POINTER(_GSettingsSchema)),] )

writable_changed = _rpythonic_function_(		"writable_changed", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

writable_change_event = _rpythonic_function_(		"writable_change_event", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.c_uint),] )

change_event = _rpythonic_function_(		"change_event", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GSettings)),
	("keys",		ctypes.POINTER(ctypes.c_uint)),
	("n_keys",		ctypes.c_int),] )

g_settings_get_type = _rpythonic_function_(		"g_settings_get_type", ctypes.c_ulong, [] )

g_settings_list_schemas = _rpythonic_function_(		"g_settings_list_schemas", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [] )

g_settings_list_relocatable_schemas = _rpythonic_function_(		"g_settings_list_relocatable_schemas", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [] )

g_settings_new = _rpythonic_function_(		"g_settings_new", ctypes.POINTER(_GSettings), [
	("schema_id",		ctypes.POINTER(ctypes.c_char)),] )

g_settings_new_with_path = _rpythonic_function_(		"g_settings_new_with_path", ctypes.POINTER(_GSettings), [
	("schema_id",		ctypes.POINTER(ctypes.c_char)),
	("path",		ctypes.POINTER(ctypes.c_char)),] )

g_settings_new_with_backend = _rpythonic_function_(		"g_settings_new_with_backend", ctypes.POINTER(_GSettings), [
	("schema_id",		ctypes.POINTER(ctypes.c_char)),
	("backend",		ctypes.POINTER(_GSettingsBackend)),] )

g_settings_new_with_backend_and_path = _rpythonic_function_(		"g_settings_new_with_backend_and_path", ctypes.POINTER(_GSettings), [
	("schema_id",		ctypes.POINTER(ctypes.c_char)),
	("backend",		ctypes.POINTER(_GSettingsBackend)),
	("path",		ctypes.POINTER(ctypes.c_char)),] )

g_settings_new_full = _rpythonic_function_(		"g_settings_new_full", ctypes.POINTER(_GSettings), [
	("schema",		ctypes.POINTER(_GSettingsSchema)),
	("backend",		ctypes.POINTER(_GSettingsBackend)),
	("path",		ctypes.POINTER(ctypes.c_char)),] )

g_settings_list_children = _rpythonic_function_(		"g_settings_list_children", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("settings",		ctypes.POINTER(_GSettings)),] )

g_settings_list_keys = _rpythonic_function_(		"g_settings_list_keys", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("settings",		ctypes.POINTER(_GSettings)),] )

g_settings_get_range = _rpythonic_function_(		"g_settings_get_range", ctypes.POINTER(_GVariant), [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

g_settings_range_check = _rpythonic_function_(		"g_settings_range_check", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(_GVariant)),] )

g_settings_set_value = _rpythonic_function_(		"g_settings_set_value", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(_GVariant)),] )

g_settings_get_value = _rpythonic_function_(		"g_settings_get_value", ctypes.POINTER(_GVariant), [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

g_settings_reset = _rpythonic_function_(		"g_settings_reset", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

g_settings_get_int = _rpythonic_function_(		"g_settings_get_int", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

g_settings_set_int = _rpythonic_function_(		"g_settings_set_int", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_int),] )

g_settings_get_uint = _rpythonic_function_(		"g_settings_get_uint", ctypes.c_uint, [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

g_settings_set_uint = _rpythonic_function_(		"g_settings_set_uint", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_uint),] )

g_settings_get_string = _rpythonic_function_(		"g_settings_get_string", ctypes.POINTER(ctypes.c_char), [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

g_settings_set_string = _rpythonic_function_(		"g_settings_set_string", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

g_settings_get_boolean = _rpythonic_function_(		"g_settings_get_boolean", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

g_settings_set_boolean = _rpythonic_function_(		"g_settings_set_boolean", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_int),] )

g_settings_get_double = _rpythonic_function_(		"g_settings_get_double", ctypes.c_double, [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

g_settings_set_double = _rpythonic_function_(		"g_settings_set_double", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_double),] )

g_settings_get_strv = _rpythonic_function_(		"g_settings_get_strv", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

g_settings_set_strv = _rpythonic_function_(		"g_settings_set_strv", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_settings_get_enum = _rpythonic_function_(		"g_settings_get_enum", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

g_settings_set_enum = _rpythonic_function_(		"g_settings_set_enum", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_int),] )

g_settings_get_flags = _rpythonic_function_(		"g_settings_get_flags", ctypes.c_uint, [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

g_settings_set_flags = _rpythonic_function_(		"g_settings_set_flags", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_uint),] )

g_settings_get_child = _rpythonic_function_(		"g_settings_get_child", ctypes.POINTER(_GSettings), [
	("settings",		ctypes.POINTER(_GSettings)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_settings_is_writable = _rpythonic_function_(		"g_settings_is_writable", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GSettings)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

g_settings_delay = _rpythonic_function_(		"g_settings_delay", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GSettings)),] )

g_settings_apply = _rpythonic_function_(		"g_settings_apply", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GSettings)),] )

g_settings_revert = _rpythonic_function_(		"g_settings_revert", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GSettings)),] )

g_settings_get_has_unapplied = _rpythonic_function_(		"g_settings_get_has_unapplied", ctypes.c_int, [
	("settings",		ctypes.POINTER(_GSettings)),] )

g_settings_sync = _rpythonic_function_(		"g_settings_sync", ctypes.c_void_p, [] )

GSettingsBindSetMapping = _rpythonic_function_(		"GSettingsBindSetMapping", ctypes.POINTER(_GVariant), [
	("value",		ctypes.POINTER(_GValue)),
	("expected_type",		ctypes.POINTER(_GVariantType)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GSettingsBindGetMapping = _rpythonic_function_(		"GSettingsBindGetMapping", ctypes.c_int, [
	("value",		ctypes.POINTER(_GValue)),
	("variant",		ctypes.POINTER(_GVariant)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

GSettingsGetMapping = _rpythonic_function_(		"GSettingsGetMapping", ctypes.c_int, [
	("value",		ctypes.POINTER(_GVariant)),
	("result",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_settings_bind = _rpythonic_function_(		"g_settings_bind", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("C_object",		ctypes.POINTER(ctypes.c_void_p)),
	("property",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),] )

g_settings_bind_with_mapping = _rpythonic_function_(		"g_settings_bind_with_mapping", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("C_object",		ctypes.POINTER(ctypes.c_void_p)),
	("property",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("get_mapping",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GValue),ctypes.POINTER(_GVariant),ctypes.POINTER(ctypes.c_void_p),)),
	("set_mapping",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_GVariant), ctypes.POINTER(_GValue),ctypes.POINTER(_GVariantType),ctypes.POINTER(ctypes.c_void_p),))),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_settings_bind_writable = _rpythonic_function_(		"g_settings_bind_writable", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("C_object",		ctypes.POINTER(ctypes.c_void_p)),
	("property",		ctypes.POINTER(ctypes.c_char)),
	("inverted",		ctypes.c_int),] )

g_settings_unbind = _rpythonic_function_(		"g_settings_unbind", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(ctypes.c_void_p)),
	("property",		ctypes.POINTER(ctypes.c_char)),] )

g_settings_create_action = _rpythonic_function_(		"g_settings_create_action", ctypes.POINTER(_GAction), [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),] )

g_settings_get_mapped = _rpythonic_function_(		"g_settings_get_mapped", ctypes.POINTER(ctypes.c_void_p), [
	("settings",		ctypes.POINTER(_GSettings)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("mapping",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_GVariant),ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_simple_action_get_type = _rpythonic_function_(		"g_simple_action_get_type", ctypes.c_ulong, [] )

g_simple_action_new = _rpythonic_function_(		"g_simple_action_new", ctypes.POINTER(_GSimpleAction), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("parameter_type",		ctypes.POINTER(_GVariantType)),] )

g_simple_action_new_stateful = _rpythonic_function_(		"g_simple_action_new_stateful", ctypes.POINTER(_GSimpleAction), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("parameter_type",		ctypes.POINTER(_GVariantType)),
	("state",		ctypes.POINTER(_GVariant)),] )

g_simple_action_set_enabled = _rpythonic_function_(		"g_simple_action_set_enabled", ctypes.c_void_p, [
	("simple",		ctypes.POINTER(_GSimpleAction)),
	("enabled",		ctypes.c_int),] )

g_simple_action_set_state = _rpythonic_function_(		"g_simple_action_set_state", ctypes.c_void_p, [
	("simple",		ctypes.POINTER(_GSimpleAction)),
	("value",		ctypes.POINTER(_GVariant)),] )

g_simple_action_group_get_type = _rpythonic_function_(		"g_simple_action_group_get_type", ctypes.c_ulong, [] )

g_simple_action_group_new = _rpythonic_function_(		"g_simple_action_group_new", ctypes.POINTER(_GSimpleActionGroup), [] )

g_simple_action_group_lookup = _rpythonic_function_(		"g_simple_action_group_lookup", ctypes.POINTER(_GAction), [
	("simple",		ctypes.POINTER(_GSimpleActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),] )

g_simple_action_group_insert = _rpythonic_function_(		"g_simple_action_group_insert", ctypes.c_void_p, [
	("simple",		ctypes.POINTER(_GSimpleActionGroup)),
	("action",		ctypes.POINTER(_GAction)),] )

g_simple_action_group_remove = _rpythonic_function_(		"g_simple_action_group_remove", ctypes.c_void_p, [
	("simple",		ctypes.POINTER(_GSimpleActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),] )

g_simple_action_group_add_entries = _rpythonic_function_(		"g_simple_action_group_add_entries", ctypes.c_void_p, [
	("simple",		ctypes.POINTER(_GSimpleActionGroup)),
	("entries",		ctypes.POINTER(_GActionEntry)),
	("n_entries",		ctypes.c_int),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_simple_async_result_get_type = _rpythonic_function_(		"g_simple_async_result_get_type", ctypes.c_ulong, [] )

g_simple_async_result_new = _rpythonic_function_(		"g_simple_async_result_new", ctypes.POINTER(_GSimpleAsyncResult), [
	("source_object",		ctypes.POINTER(_GObject)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("source_tag",		ctypes.POINTER(ctypes.c_void_p)),] )

g_simple_async_result_new_from_error = _rpythonic_function_(		"g_simple_async_result_new_from_error", ctypes.POINTER(_GSimpleAsyncResult), [
	("source_object",		ctypes.POINTER(_GObject)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(_GError)),] )

g_simple_async_result_new_take_error = _rpythonic_function_(		"g_simple_async_result_new_take_error", ctypes.POINTER(_GSimpleAsyncResult), [
	("source_object",		ctypes.POINTER(_GObject)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(_GError)),] )

g_simple_async_result_set_op_res_gpointer = _rpythonic_function_(		"g_simple_async_result_set_op_res_gpointer", ctypes.c_void_p, [
	("simple",		ctypes.POINTER(_GSimpleAsyncResult)),
	("op_res",		ctypes.POINTER(ctypes.c_void_p)),
	("destroy_op_res",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_simple_async_result_get_op_res_gpointer = _rpythonic_function_(		"g_simple_async_result_get_op_res_gpointer", ctypes.POINTER(ctypes.c_void_p), [
	("simple",		ctypes.POINTER(_GSimpleAsyncResult)),] )

g_simple_async_result_set_op_res_gssize = _rpythonic_function_(		"g_simple_async_result_set_op_res_gssize", ctypes.c_void_p, [
	("simple",		ctypes.POINTER(_GSimpleAsyncResult)),
	("op_res",		ctypes.c_long),] )

g_simple_async_result_get_op_res_gssize = _rpythonic_function_(		"g_simple_async_result_get_op_res_gssize", ctypes.c_long, [
	("simple",		ctypes.POINTER(_GSimpleAsyncResult)),] )

g_simple_async_result_set_op_res_gboolean = _rpythonic_function_(		"g_simple_async_result_set_op_res_gboolean", ctypes.c_void_p, [
	("simple",		ctypes.POINTER(_GSimpleAsyncResult)),
	("op_res",		ctypes.c_int),] )

g_simple_async_result_get_op_res_gboolean = _rpythonic_function_(		"g_simple_async_result_get_op_res_gboolean", ctypes.c_int, [
	("simple",		ctypes.POINTER(_GSimpleAsyncResult)),] )

g_simple_async_result_set_check_cancellable = _rpythonic_function_(		"g_simple_async_result_set_check_cancellable", ctypes.c_void_p, [
	("simple",		ctypes.POINTER(_GSimpleAsyncResult)),
	("check_cancellable",		ctypes.POINTER(_GCancellable)),] )

g_simple_async_result_get_source_tag = _rpythonic_function_(		"g_simple_async_result_get_source_tag", ctypes.POINTER(ctypes.c_void_p), [
	("simple",		ctypes.POINTER(_GSimpleAsyncResult)),] )

g_simple_async_result_set_handle_cancellation = _rpythonic_function_(		"g_simple_async_result_set_handle_cancellation", ctypes.c_void_p, [
	("simple",		ctypes.POINTER(_GSimpleAsyncResult)),
	("handle_cancellation",		ctypes.c_int),] )

g_simple_async_result_complete = _rpythonic_function_(		"g_simple_async_result_complete", ctypes.c_void_p, [
	("simple",		ctypes.POINTER(_GSimpleAsyncResult)),] )

g_simple_async_result_complete_in_idle = _rpythonic_function_(		"g_simple_async_result_complete_in_idle", ctypes.c_void_p, [
	("simple",		ctypes.POINTER(_GSimpleAsyncResult)),] )

g_simple_async_result_run_in_thread = _rpythonic_function_(		"g_simple_async_result_run_in_thread", ctypes.c_void_p, [
	("simple",		ctypes.POINTER(_GSimpleAsyncResult)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GSimpleAsyncResult),ctypes.POINTER(_GObject),ctypes.POINTER(_GCancellable),)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),] )

g_simple_async_result_set_from_error = _rpythonic_function_(		"g_simple_async_result_set_from_error", ctypes.c_void_p, [
	("simple",		ctypes.POINTER(_GSimpleAsyncResult)),
	("error",		ctypes.POINTER(_GError)),] )

g_simple_async_result_take_error = _rpythonic_function_(		"g_simple_async_result_take_error", ctypes.c_void_p, [
	("simple",		ctypes.POINTER(_GSimpleAsyncResult)),
	("error",		ctypes.POINTER(_GError)),] )

g_simple_async_result_propagate_error = _rpythonic_function_(		"g_simple_async_result_propagate_error", ctypes.c_int, [
	("simple",		ctypes.POINTER(_GSimpleAsyncResult)),
	("dest",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_simple_async_result_set_error_va = _rpythonic_function_(		"g_simple_async_result_set_error_va", ctypes.c_void_p, [
	("simple",		ctypes.POINTER(_GSimpleAsyncResult)),
	("domain",		ctypes.c_uint),
	("code",		ctypes.c_int),
	("format",		ctypes.POINTER(ctypes.c_char)),
	("args",		ctypes.c_char),] )

g_simple_async_result_is_valid = _rpythonic_function_(		"g_simple_async_result_is_valid", ctypes.c_int, [
	("result",		ctypes.POINTER(_GAsyncResult)),
	("source",		ctypes.POINTER(_GObject)),
	("source_tag",		ctypes.POINTER(ctypes.c_void_p)),] )

g_simple_async_report_gerror_in_idle = _rpythonic_function_(		"g_simple_async_report_gerror_in_idle", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(_GError)),] )

g_simple_async_report_take_gerror_in_idle = _rpythonic_function_(		"g_simple_async_report_take_gerror_in_idle", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GObject)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("error",		ctypes.POINTER(_GError)),] )

g_simple_permission_get_type = _rpythonic_function_(		"g_simple_permission_get_type", ctypes.c_ulong, [] )

g_simple_permission_new = _rpythonic_function_(		"g_simple_permission_new", ctypes.POINTER(_GPermission), [
	("allowed",		ctypes.c_int),] )

event = _rpythonic_function_(		"event", ctypes.c_void_p, [
	("client",		ctypes.POINTER(_GSocketClient)),
	("event",		ctypes.c_int),
	("connectable",		ctypes.POINTER(_GSocketConnectable)),
	("connection",		ctypes.POINTER(_GIOStream)),] )

g_socket_client_get_type = _rpythonic_function_(		"g_socket_client_get_type", ctypes.c_ulong, [] )

g_socket_client_new = _rpythonic_function_(		"g_socket_client_new", ctypes.POINTER(_GSocketClient), [] )

g_socket_client_get_family = _rpythonic_function_(		"g_socket_client_get_family", ctypes.c_int, [
	("client",		ctypes.POINTER(_GSocketClient)),] )

g_socket_client_set_family = _rpythonic_function_(		"g_socket_client_set_family", ctypes.c_void_p, [
	("client",		ctypes.POINTER(_GSocketClient)),
	("family",		ctypes.c_int),] )

g_socket_client_get_socket_type = _rpythonic_function_(		"g_socket_client_get_socket_type", ctypes.c_int, [
	("client",		ctypes.POINTER(_GSocketClient)),] )

g_socket_client_set_socket_type = _rpythonic_function_(		"g_socket_client_set_socket_type", ctypes.c_void_p, [
	("client",		ctypes.POINTER(_GSocketClient)),
	("C_type",		ctypes.c_int),] )

g_socket_client_get_protocol = _rpythonic_function_(		"g_socket_client_get_protocol", ctypes.c_int, [
	("client",		ctypes.POINTER(_GSocketClient)),] )

g_socket_client_set_protocol = _rpythonic_function_(		"g_socket_client_set_protocol", ctypes.c_void_p, [
	("client",		ctypes.POINTER(_GSocketClient)),
	("protocol",		ctypes.c_int),] )

g_socket_client_get_local_address = _rpythonic_function_(		"g_socket_client_get_local_address", ctypes.POINTER(_GSocketAddress), [
	("client",		ctypes.POINTER(_GSocketClient)),] )

g_socket_client_set_local_address = _rpythonic_function_(		"g_socket_client_set_local_address", ctypes.c_void_p, [
	("client",		ctypes.POINTER(_GSocketClient)),
	("address",		ctypes.POINTER(_GSocketAddress)),] )

g_socket_client_get_timeout = _rpythonic_function_(		"g_socket_client_get_timeout", ctypes.c_uint, [
	("client",		ctypes.POINTER(_GSocketClient)),] )

g_socket_client_set_timeout = _rpythonic_function_(		"g_socket_client_set_timeout", ctypes.c_void_p, [
	("client",		ctypes.POINTER(_GSocketClient)),
	("timeout",		ctypes.c_uint),] )

g_socket_client_get_enable_proxy = _rpythonic_function_(		"g_socket_client_get_enable_proxy", ctypes.c_int, [
	("client",		ctypes.POINTER(_GSocketClient)),] )

g_socket_client_set_enable_proxy = _rpythonic_function_(		"g_socket_client_set_enable_proxy", ctypes.c_void_p, [
	("client",		ctypes.POINTER(_GSocketClient)),
	("enable",		ctypes.c_int),] )

g_socket_client_get_tls = _rpythonic_function_(		"g_socket_client_get_tls", ctypes.c_int, [
	("client",		ctypes.POINTER(_GSocketClient)),] )

g_socket_client_set_tls = _rpythonic_function_(		"g_socket_client_set_tls", ctypes.c_void_p, [
	("client",		ctypes.POINTER(_GSocketClient)),
	("tls",		ctypes.c_int),] )

g_socket_client_get_tls_validation_flags = _rpythonic_function_(		"g_socket_client_get_tls_validation_flags", ctypes.c_int, [
	("client",		ctypes.POINTER(_GSocketClient)),] )

g_socket_client_set_tls_validation_flags = _rpythonic_function_(		"g_socket_client_set_tls_validation_flags", ctypes.c_void_p, [
	("client",		ctypes.POINTER(_GSocketClient)),
	("flags",		ctypes.c_int),] )

g_socket_client_connect = _rpythonic_function_(		"g_socket_client_connect", ctypes.POINTER(_GSocketConnection), [
	("client",		ctypes.POINTER(_GSocketClient)),
	("connectable",		ctypes.POINTER(_GSocketConnectable)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_client_connect_to_host = _rpythonic_function_(		"g_socket_client_connect_to_host", ctypes.POINTER(_GSocketConnection), [
	("client",		ctypes.POINTER(_GSocketClient)),
	("host_and_port",		ctypes.POINTER(ctypes.c_char)),
	("default_port",		ctypes.c_ushort),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_client_connect_to_service = _rpythonic_function_(		"g_socket_client_connect_to_service", ctypes.POINTER(_GSocketConnection), [
	("client",		ctypes.POINTER(_GSocketClient)),
	("domain",		ctypes.POINTER(ctypes.c_char)),
	("service",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_client_connect_to_uri = _rpythonic_function_(		"g_socket_client_connect_to_uri", ctypes.POINTER(_GSocketConnection), [
	("client",		ctypes.POINTER(_GSocketClient)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("default_port",		ctypes.c_ushort),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_client_connect_async = _rpythonic_function_(		"g_socket_client_connect_async", ctypes.c_void_p, [
	("client",		ctypes.POINTER(_GSocketClient)),
	("connectable",		ctypes.POINTER(_GSocketConnectable)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_socket_client_connect_finish = _rpythonic_function_(		"g_socket_client_connect_finish", ctypes.POINTER(_GSocketConnection), [
	("client",		ctypes.POINTER(_GSocketClient)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_client_connect_to_host_async = _rpythonic_function_(		"g_socket_client_connect_to_host_async", ctypes.c_void_p, [
	("client",		ctypes.POINTER(_GSocketClient)),
	("host_and_port",		ctypes.POINTER(ctypes.c_char)),
	("default_port",		ctypes.c_ushort),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_socket_client_connect_to_host_finish = _rpythonic_function_(		"g_socket_client_connect_to_host_finish", ctypes.POINTER(_GSocketConnection), [
	("client",		ctypes.POINTER(_GSocketClient)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_client_connect_to_service_async = _rpythonic_function_(		"g_socket_client_connect_to_service_async", ctypes.c_void_p, [
	("client",		ctypes.POINTER(_GSocketClient)),
	("domain",		ctypes.POINTER(ctypes.c_char)),
	("service",		ctypes.POINTER(ctypes.c_char)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_socket_client_connect_to_service_finish = _rpythonic_function_(		"g_socket_client_connect_to_service_finish", ctypes.POINTER(_GSocketConnection), [
	("client",		ctypes.POINTER(_GSocketClient)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_client_connect_to_uri_async = _rpythonic_function_(		"g_socket_client_connect_to_uri_async", ctypes.c_void_p, [
	("client",		ctypes.POINTER(_GSocketClient)),
	("uri",		ctypes.POINTER(ctypes.c_char)),
	("default_port",		ctypes.c_ushort),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_socket_client_connect_to_uri_finish = _rpythonic_function_(		"g_socket_client_connect_to_uri_finish", ctypes.POINTER(_GSocketConnection), [
	("client",		ctypes.POINTER(_GSocketClient)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_client_add_application_proxy = _rpythonic_function_(		"g_socket_client_add_application_proxy", ctypes.c_void_p, [
	("client",		ctypes.POINTER(_GSocketClient)),
	("protocol",		ctypes.POINTER(ctypes.c_char)),] )

C_enumerate = _rpythonic_function_(		"C_enumerate", ctypes.POINTER(_GSocketAddressEnumerator), [
	("connectable",		ctypes.POINTER(_GSocketConnectable)),] )

proxy_enumerate = _rpythonic_function_(		"proxy_enumerate", ctypes.POINTER(_GSocketAddressEnumerator), [
	("connectable",		ctypes.POINTER(_GSocketConnectable)),] )

g_socket_connectable_get_type = _rpythonic_function_(		"g_socket_connectable_get_type", ctypes.c_ulong, [] )

g_socket_connectable_enumerate = _rpythonic_function_(		"g_socket_connectable_enumerate", ctypes.POINTER(_GSocketAddressEnumerator), [
	("connectable",		ctypes.POINTER(_GSocketConnectable)),] )

g_socket_connectable_proxy_enumerate = _rpythonic_function_(		"g_socket_connectable_proxy_enumerate", ctypes.POINTER(_GSocketAddressEnumerator), [
	("connectable",		ctypes.POINTER(_GSocketConnectable)),] )

g_socket_get_type = _rpythonic_function_(		"g_socket_get_type", ctypes.c_ulong, [] )

g_socket_new = _rpythonic_function_(		"g_socket_new", ctypes.POINTER(_GSocket), [
	("family",		ctypes.c_int),
	("C_type",		ctypes.c_int),
	("protocol",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_new_from_fd = _rpythonic_function_(		"g_socket_new_from_fd", ctypes.POINTER(_GSocket), [
	("fd",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_get_fd = _rpythonic_function_(		"g_socket_get_fd", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),] )

g_socket_get_family = _rpythonic_function_(		"g_socket_get_family", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),] )

g_socket_get_socket_type = _rpythonic_function_(		"g_socket_get_socket_type", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),] )

g_socket_get_protocol = _rpythonic_function_(		"g_socket_get_protocol", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),] )

g_socket_get_local_address = _rpythonic_function_(		"g_socket_get_local_address", ctypes.POINTER(_GSocketAddress), [
	("socket",		ctypes.POINTER(_GSocket)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_get_remote_address = _rpythonic_function_(		"g_socket_get_remote_address", ctypes.POINTER(_GSocketAddress), [
	("socket",		ctypes.POINTER(_GSocket)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_set_blocking = _rpythonic_function_(		"g_socket_set_blocking", ctypes.c_void_p, [
	("socket",		ctypes.POINTER(_GSocket)),
	("blocking",		ctypes.c_int),] )

g_socket_get_blocking = _rpythonic_function_(		"g_socket_get_blocking", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),] )

g_socket_set_keepalive = _rpythonic_function_(		"g_socket_set_keepalive", ctypes.c_void_p, [
	("socket",		ctypes.POINTER(_GSocket)),
	("keepalive",		ctypes.c_int),] )

g_socket_get_keepalive = _rpythonic_function_(		"g_socket_get_keepalive", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),] )

g_socket_get_listen_backlog = _rpythonic_function_(		"g_socket_get_listen_backlog", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),] )

g_socket_set_listen_backlog = _rpythonic_function_(		"g_socket_set_listen_backlog", ctypes.c_void_p, [
	("socket",		ctypes.POINTER(_GSocket)),
	("backlog",		ctypes.c_int),] )

g_socket_get_timeout = _rpythonic_function_(		"g_socket_get_timeout", ctypes.c_uint, [
	("socket",		ctypes.POINTER(_GSocket)),] )

g_socket_set_timeout = _rpythonic_function_(		"g_socket_set_timeout", ctypes.c_void_p, [
	("socket",		ctypes.POINTER(_GSocket)),
	("timeout",		ctypes.c_uint),] )

g_socket_get_ttl = _rpythonic_function_(		"g_socket_get_ttl", ctypes.c_uint, [
	("socket",		ctypes.POINTER(_GSocket)),] )

g_socket_set_ttl = _rpythonic_function_(		"g_socket_set_ttl", ctypes.c_void_p, [
	("socket",		ctypes.POINTER(_GSocket)),
	("ttl",		ctypes.c_uint),] )

g_socket_get_broadcast = _rpythonic_function_(		"g_socket_get_broadcast", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),] )

g_socket_set_broadcast = _rpythonic_function_(		"g_socket_set_broadcast", ctypes.c_void_p, [
	("socket",		ctypes.POINTER(_GSocket)),
	("broadcast",		ctypes.c_int),] )

g_socket_get_multicast_loopback = _rpythonic_function_(		"g_socket_get_multicast_loopback", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),] )

g_socket_set_multicast_loopback = _rpythonic_function_(		"g_socket_set_multicast_loopback", ctypes.c_void_p, [
	("socket",		ctypes.POINTER(_GSocket)),
	("loopback",		ctypes.c_int),] )

g_socket_get_multicast_ttl = _rpythonic_function_(		"g_socket_get_multicast_ttl", ctypes.c_uint, [
	("socket",		ctypes.POINTER(_GSocket)),] )

g_socket_set_multicast_ttl = _rpythonic_function_(		"g_socket_set_multicast_ttl", ctypes.c_void_p, [
	("socket",		ctypes.POINTER(_GSocket)),
	("ttl",		ctypes.c_uint),] )

g_socket_is_connected = _rpythonic_function_(		"g_socket_is_connected", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),] )

g_socket_bind = _rpythonic_function_(		"g_socket_bind", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),
	("address",		ctypes.POINTER(_GSocketAddress)),
	("allow_reuse",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_join_multicast_group = _rpythonic_function_(		"g_socket_join_multicast_group", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),
	("group",		ctypes.POINTER(_GInetAddress)),
	("source_specific",		ctypes.c_int),
	("iface",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_leave_multicast_group = _rpythonic_function_(		"g_socket_leave_multicast_group", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),
	("group",		ctypes.POINTER(_GInetAddress)),
	("source_specific",		ctypes.c_int),
	("iface",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_connect = _rpythonic_function_(		"g_socket_connect", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),
	("address",		ctypes.POINTER(_GSocketAddress)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_check_connect_result = _rpythonic_function_(		"g_socket_check_connect_result", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_get_available_bytes = _rpythonic_function_(		"g_socket_get_available_bytes", ctypes.c_long, [
	("socket",		ctypes.POINTER(_GSocket)),] )

g_socket_condition_check = _rpythonic_function_(		"g_socket_condition_check", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),
	("condition",		ctypes.c_int),] )

g_socket_condition_wait = _rpythonic_function_(		"g_socket_condition_wait", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),
	("condition",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_condition_timed_wait = _rpythonic_function_(		"g_socket_condition_timed_wait", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),
	("condition",		ctypes.c_int),
	("timeout",		ctypes.c_long),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_accept = _rpythonic_function_(		"g_socket_accept", ctypes.POINTER(_GSocket), [
	("socket",		ctypes.POINTER(_GSocket)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_listen = _rpythonic_function_(		"g_socket_listen", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_receive = _rpythonic_function_(		"g_socket_receive", ctypes.c_long, [
	("socket",		ctypes.POINTER(_GSocket)),
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_ulong),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_receive_from = _rpythonic_function_(		"g_socket_receive_from", ctypes.c_long, [
	("socket",		ctypes.POINTER(_GSocket)),
	("address",		ctypes.POINTER(ctypes.POINTER(_GSocketAddress))),
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_ulong),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_send = _rpythonic_function_(		"g_socket_send", ctypes.c_long, [
	("socket",		ctypes.POINTER(_GSocket)),
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_ulong),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_send_to = _rpythonic_function_(		"g_socket_send_to", ctypes.c_long, [
	("socket",		ctypes.POINTER(_GSocket)),
	("address",		ctypes.POINTER(_GSocketAddress)),
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_ulong),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_receive_message = _rpythonic_function_(		"g_socket_receive_message", ctypes.c_long, [
	("socket",		ctypes.POINTER(_GSocket)),
	("address",		ctypes.POINTER(ctypes.POINTER(_GSocketAddress))),
	("vectors",		ctypes.POINTER(_GInputVector)),
	("num_vectors",		ctypes.c_int),
	("messages",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(_GSocketControlMessage)))),
	("num_messages",		ctypes.POINTER(ctypes.c_int)),
	("flags",		ctypes.POINTER(ctypes.c_int)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_send_message = _rpythonic_function_(		"g_socket_send_message", ctypes.c_long, [
	("socket",		ctypes.POINTER(_GSocket)),
	("address",		ctypes.POINTER(_GSocketAddress)),
	("vectors",		ctypes.POINTER(_GOutputVector)),
	("num_vectors",		ctypes.c_int),
	("messages",		ctypes.POINTER(ctypes.POINTER(_GSocketControlMessage))),
	("num_messages",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_close = _rpythonic_function_(		"g_socket_close", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_shutdown = _rpythonic_function_(		"g_socket_shutdown", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),
	("shutdown_read",		ctypes.c_int),
	("shutdown_write",		ctypes.c_int),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_is_closed = _rpythonic_function_(		"g_socket_is_closed", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),] )

g_socket_create_source = _rpythonic_function_(		"g_socket_create_source", ctypes.POINTER(_GSource), [
	("socket",		ctypes.POINTER(_GSocket)),
	("condition",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),] )

g_socket_speaks_ipv4 = _rpythonic_function_(		"g_socket_speaks_ipv4", ctypes.c_int, [
	("socket",		ctypes.POINTER(_GSocket)),] )

g_socket_get_credentials = _rpythonic_function_(		"g_socket_get_credentials", ctypes.POINTER(_GCredentials), [
	("socket",		ctypes.POINTER(_GSocket)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_receive_with_blocking = _rpythonic_function_(		"g_socket_receive_with_blocking", ctypes.c_long, [
	("socket",		ctypes.POINTER(_GSocket)),
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_ulong),
	("blocking",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_send_with_blocking = _rpythonic_function_(		"g_socket_send_with_blocking", ctypes.c_long, [
	("socket",		ctypes.POINTER(_GSocket)),
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("size",		ctypes.c_ulong),
	("blocking",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_connection_get_type = _rpythonic_function_(		"g_socket_connection_get_type", ctypes.c_ulong, [] )

g_socket_connection_is_connected = _rpythonic_function_(		"g_socket_connection_is_connected", ctypes.c_int, [
	("connection",		ctypes.POINTER(_GSocketConnection)),] )

g_socket_connection_connect = _rpythonic_function_(		"g_socket_connection_connect", ctypes.c_int, [
	("connection",		ctypes.POINTER(_GSocketConnection)),
	("address",		ctypes.POINTER(_GSocketAddress)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_connection_connect_async = _rpythonic_function_(		"g_socket_connection_connect_async", ctypes.c_void_p, [
	("connection",		ctypes.POINTER(_GSocketConnection)),
	("address",		ctypes.POINTER(_GSocketAddress)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_socket_connection_connect_finish = _rpythonic_function_(		"g_socket_connection_connect_finish", ctypes.c_int, [
	("connection",		ctypes.POINTER(_GSocketConnection)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_connection_get_socket = _rpythonic_function_(		"g_socket_connection_get_socket", ctypes.POINTER(_GSocket), [
	("connection",		ctypes.POINTER(_GSocketConnection)),] )

g_socket_connection_get_local_address = _rpythonic_function_(		"g_socket_connection_get_local_address", ctypes.POINTER(_GSocketAddress), [
	("connection",		ctypes.POINTER(_GSocketConnection)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_connection_get_remote_address = _rpythonic_function_(		"g_socket_connection_get_remote_address", ctypes.POINTER(_GSocketAddress), [
	("connection",		ctypes.POINTER(_GSocketConnection)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_connection_factory_register_type = _rpythonic_function_(		"g_socket_connection_factory_register_type", ctypes.c_void_p, [
	("g_type",		ctypes.c_ulong),
	("family",		ctypes.c_int),
	("C_type",		ctypes.c_int),
	("protocol",		ctypes.c_int),] )

g_socket_connection_factory_lookup_type = _rpythonic_function_(		"g_socket_connection_factory_lookup_type", ctypes.c_ulong, [
	("family",		ctypes.c_int),
	("C_type",		ctypes.c_int),
	("protocol_id",		ctypes.c_int),] )

g_socket_connection_factory_create_connection = _rpythonic_function_(		"g_socket_connection_factory_create_connection", ctypes.POINTER(_GSocketConnection), [
	("socket",		ctypes.POINTER(_GSocket)),] )

get_size = _rpythonic_function_(		"get_size", ctypes.c_ulong, [
	("message",		ctypes.POINTER(_GSocketControlMessage)),] )

get_level = _rpythonic_function_(		"get_level", ctypes.c_int, [
	("message",		ctypes.POINTER(_GSocketControlMessage)),] )

get_type = _rpythonic_function_(		"get_type", ctypes.c_int, [
	("message",		ctypes.POINTER(_GSocketControlMessage)),] )

serialize = _rpythonic_function_(		"serialize", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GSocketControlMessage)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

deserialize = _rpythonic_function_(		"deserialize", ctypes.POINTER(_GSocketControlMessage), [
	("level",		ctypes.c_int),
	("C_type",		ctypes.c_int),
	("size",		ctypes.c_ulong),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_socket_control_message_get_type = _rpythonic_function_(		"g_socket_control_message_get_type", ctypes.c_ulong, [] )

g_socket_control_message_get_size = _rpythonic_function_(		"g_socket_control_message_get_size", ctypes.c_ulong, [
	("message",		ctypes.POINTER(_GSocketControlMessage)),] )

g_socket_control_message_get_level = _rpythonic_function_(		"g_socket_control_message_get_level", ctypes.c_int, [
	("message",		ctypes.POINTER(_GSocketControlMessage)),] )

g_socket_control_message_get_msg_type = _rpythonic_function_(		"g_socket_control_message_get_msg_type", ctypes.c_int, [
	("message",		ctypes.POINTER(_GSocketControlMessage)),] )

g_socket_control_message_serialize = _rpythonic_function_(		"g_socket_control_message_serialize", ctypes.c_void_p, [
	("message",		ctypes.POINTER(_GSocketControlMessage)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_socket_control_message_deserialize = _rpythonic_function_(		"g_socket_control_message_deserialize", ctypes.POINTER(_GSocketControlMessage), [
	("level",		ctypes.c_int),
	("C_type",		ctypes.c_int),
	("size",		ctypes.c_ulong),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_socket_listener_get_type = _rpythonic_function_(		"g_socket_listener_get_type", ctypes.c_ulong, [] )

g_socket_listener_new = _rpythonic_function_(		"g_socket_listener_new", ctypes.POINTER(_GSocketListener), [] )

g_socket_listener_set_backlog = _rpythonic_function_(		"g_socket_listener_set_backlog", ctypes.c_void_p, [
	("listener",		ctypes.POINTER(_GSocketListener)),
	("listen_backlog",		ctypes.c_int),] )

g_socket_listener_add_socket = _rpythonic_function_(		"g_socket_listener_add_socket", ctypes.c_int, [
	("listener",		ctypes.POINTER(_GSocketListener)),
	("socket",		ctypes.POINTER(_GSocket)),
	("source_object",		ctypes.POINTER(_GObject)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_listener_add_address = _rpythonic_function_(		"g_socket_listener_add_address", ctypes.c_int, [
	("listener",		ctypes.POINTER(_GSocketListener)),
	("address",		ctypes.POINTER(_GSocketAddress)),
	("C_type",		ctypes.c_int),
	("protocol",		ctypes.c_int),
	("source_object",		ctypes.POINTER(_GObject)),
	("effective_address",		ctypes.POINTER(ctypes.POINTER(_GSocketAddress))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_listener_add_inet_port = _rpythonic_function_(		"g_socket_listener_add_inet_port", ctypes.c_int, [
	("listener",		ctypes.POINTER(_GSocketListener)),
	("port",		ctypes.c_ushort),
	("source_object",		ctypes.POINTER(_GObject)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_listener_add_any_inet_port = _rpythonic_function_(		"g_socket_listener_add_any_inet_port", ctypes.c_ushort, [
	("listener",		ctypes.POINTER(_GSocketListener)),
	("source_object",		ctypes.POINTER(_GObject)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_listener_accept_socket = _rpythonic_function_(		"g_socket_listener_accept_socket", ctypes.POINTER(_GSocket), [
	("listener",		ctypes.POINTER(_GSocketListener)),
	("source_object",		ctypes.POINTER(ctypes.POINTER(_GObject))),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_listener_accept_socket_async = _rpythonic_function_(		"g_socket_listener_accept_socket_async", ctypes.c_void_p, [
	("listener",		ctypes.POINTER(_GSocketListener)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_socket_listener_accept_socket_finish = _rpythonic_function_(		"g_socket_listener_accept_socket_finish", ctypes.POINTER(_GSocket), [
	("listener",		ctypes.POINTER(_GSocketListener)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("source_object",		ctypes.POINTER(ctypes.POINTER(_GObject))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_listener_accept = _rpythonic_function_(		"g_socket_listener_accept", ctypes.POINTER(_GSocketConnection), [
	("listener",		ctypes.POINTER(_GSocketListener)),
	("source_object",		ctypes.POINTER(ctypes.POINTER(_GObject))),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_listener_accept_async = _rpythonic_function_(		"g_socket_listener_accept_async", ctypes.c_void_p, [
	("listener",		ctypes.POINTER(_GSocketListener)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_socket_listener_accept_finish = _rpythonic_function_(		"g_socket_listener_accept_finish", ctypes.POINTER(_GSocketConnection), [
	("listener",		ctypes.POINTER(_GSocketListener)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("source_object",		ctypes.POINTER(ctypes.POINTER(_GObject))),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_socket_listener_close = _rpythonic_function_(		"g_socket_listener_close", ctypes.c_void_p, [
	("listener",		ctypes.POINTER(_GSocketListener)),] )

incoming = _rpythonic_function_(		"incoming", ctypes.c_int, [
	("service",		ctypes.POINTER(_GSocketService)),
	("connection",		ctypes.POINTER(_GSocketConnection)),
	("source_object",		ctypes.POINTER(_GObject)),] )

g_socket_service_get_type = _rpythonic_function_(		"g_socket_service_get_type", ctypes.c_ulong, [] )

g_socket_service_new = _rpythonic_function_(		"g_socket_service_new", ctypes.POINTER(_GSocketService), [] )

g_socket_service_start = _rpythonic_function_(		"g_socket_service_start", ctypes.c_void_p, [
	("service",		ctypes.POINTER(_GSocketService)),] )

g_socket_service_stop = _rpythonic_function_(		"g_socket_service_stop", ctypes.c_void_p, [
	("service",		ctypes.POINTER(_GSocketService)),] )

g_socket_service_is_active = _rpythonic_function_(		"g_socket_service_is_active", ctypes.c_int, [
	("service",		ctypes.POINTER(_GSocketService)),] )

g_srv_target_get_type = _rpythonic_function_(		"g_srv_target_get_type", ctypes.c_ulong, [] )

g_srv_target_new = _rpythonic_function_(		"g_srv_target_new", ctypes.POINTER(_GSrvTarget), [
	("hostname",		ctypes.POINTER(ctypes.c_char)),
	("port",		ctypes.c_ushort),
	("priority",		ctypes.c_ushort),
	("weight",		ctypes.c_ushort),] )

g_srv_target_copy = _rpythonic_function_(		"g_srv_target_copy", ctypes.POINTER(_GSrvTarget), [
	("target",		ctypes.POINTER(_GSrvTarget)),] )

g_srv_target_free = _rpythonic_function_(		"g_srv_target_free", ctypes.c_void_p, [
	("target",		ctypes.POINTER(_GSrvTarget)),] )

g_srv_target_get_hostname = _rpythonic_function_(		"g_srv_target_get_hostname", ctypes.POINTER(ctypes.c_char), [
	("target",		ctypes.POINTER(_GSrvTarget)),] )

g_srv_target_get_port = _rpythonic_function_(		"g_srv_target_get_port", ctypes.c_ushort, [
	("target",		ctypes.POINTER(_GSrvTarget)),] )

g_srv_target_get_priority = _rpythonic_function_(		"g_srv_target_get_priority", ctypes.c_ushort, [
	("target",		ctypes.POINTER(_GSrvTarget)),] )

g_srv_target_get_weight = _rpythonic_function_(		"g_srv_target_get_weight", ctypes.c_ushort, [
	("target",		ctypes.POINTER(_GSrvTarget)),] )

g_srv_target_list_sort = _rpythonic_function_(		"g_srv_target_list_sort", ctypes.POINTER(_GList), [
	("targets",		ctypes.POINTER(_GList)),] )

g_tcp_connection_get_type = _rpythonic_function_(		"g_tcp_connection_get_type", ctypes.c_ulong, [] )

g_tcp_connection_set_graceful_disconnect = _rpythonic_function_(		"g_tcp_connection_set_graceful_disconnect", ctypes.c_void_p, [
	("connection",		ctypes.POINTER(_GTcpConnection)),
	("graceful_disconnect",		ctypes.c_int),] )

g_tcp_connection_get_graceful_disconnect = _rpythonic_function_(		"g_tcp_connection_get_graceful_disconnect", ctypes.c_int, [
	("connection",		ctypes.POINTER(_GTcpConnection)),] )

g_tcp_wrapper_connection_get_type = _rpythonic_function_(		"g_tcp_wrapper_connection_get_type", ctypes.c_ulong, [] )

g_tcp_wrapper_connection_new = _rpythonic_function_(		"g_tcp_wrapper_connection_new", ctypes.POINTER(_GSocketConnection), [
	("base_io_stream",		ctypes.POINTER(_GIOStream)),
	("socket",		ctypes.POINTER(_GSocket)),] )

g_tcp_wrapper_connection_get_base_io_stream = _rpythonic_function_(		"g_tcp_wrapper_connection_get_base_io_stream", ctypes.POINTER(_GIOStream), [
	("conn",		ctypes.POINTER(_GTcpWrapperConnection)),] )

g_themed_icon_get_type = _rpythonic_function_(		"g_themed_icon_get_type", ctypes.c_ulong, [] )

g_themed_icon_new = _rpythonic_function_(		"g_themed_icon_new", ctypes.POINTER(_GIcon), [
	("iconname",		ctypes.POINTER(ctypes.c_char)),] )

g_themed_icon_new_with_default_fallbacks = _rpythonic_function_(		"g_themed_icon_new_with_default_fallbacks", ctypes.POINTER(_GIcon), [
	("iconname",		ctypes.POINTER(ctypes.c_char)),] )

g_themed_icon_new_from_names = _rpythonic_function_(		"g_themed_icon_new_from_names", ctypes.POINTER(_GIcon), [
	("iconnames",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("C_len",		ctypes.c_int),] )

g_themed_icon_prepend_name = _rpythonic_function_(		"g_themed_icon_prepend_name", ctypes.c_void_p, [
	("icon",		ctypes.POINTER(_GThemedIcon)),
	("iconname",		ctypes.POINTER(ctypes.c_char)),] )

g_themed_icon_append_name = _rpythonic_function_(		"g_themed_icon_append_name", ctypes.c_void_p, [
	("icon",		ctypes.POINTER(_GThemedIcon)),
	("iconname",		ctypes.POINTER(ctypes.c_char)),] )

g_themed_icon_get_names = _rpythonic_function_(		"g_themed_icon_get_names", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("icon",		ctypes.POINTER(_GThemedIcon)),] )

run = _rpythonic_function_(		"run", ctypes.c_int, [
	("service",		ctypes.POINTER(_GThreadedSocketService)),
	("connection",		ctypes.POINTER(_GSocketConnection)),
	("source_object",		ctypes.POINTER(_GObject)),] )

g_threaded_socket_service_get_type = _rpythonic_function_(		"g_threaded_socket_service_get_type", ctypes.c_ulong, [] )

g_threaded_socket_service_new = _rpythonic_function_(		"g_threaded_socket_service_new", ctypes.POINTER(_GSocketService), [
	("max_threads",		ctypes.c_int),] )

supports_tls = _rpythonic_function_(		"supports_tls", ctypes.c_int, [
	("backend",		ctypes.POINTER(_GTlsBackend)),] )

get_certificate_type = _rpythonic_function_(		"get_certificate_type", ctypes.c_ulong, [] )

get_client_connection_type = _rpythonic_function_(		"get_client_connection_type", ctypes.c_ulong, [] )

get_server_connection_type = _rpythonic_function_(		"get_server_connection_type", ctypes.c_ulong, [] )

get_file_database_type = _rpythonic_function_(		"get_file_database_type", ctypes.c_ulong, [] )

get_default_database = _rpythonic_function_(		"get_default_database", ctypes.POINTER(_GTlsDatabase), [
	("backend",		ctypes.POINTER(_GTlsBackend)),] )

g_tls_backend_get_type = _rpythonic_function_(		"g_tls_backend_get_type", ctypes.c_ulong, [] )

g_tls_backend_get_default = _rpythonic_function_(		"g_tls_backend_get_default", ctypes.POINTER(_GTlsBackend), [] )

g_tls_backend_get_default_database = _rpythonic_function_(		"g_tls_backend_get_default_database", ctypes.POINTER(_GTlsDatabase), [
	("backend",		ctypes.POINTER(_GTlsBackend)),] )

g_tls_backend_supports_tls = _rpythonic_function_(		"g_tls_backend_supports_tls", ctypes.c_int, [
	("backend",		ctypes.POINTER(_GTlsBackend)),] )

g_tls_backend_get_certificate_type = _rpythonic_function_(		"g_tls_backend_get_certificate_type", ctypes.c_ulong, [
	("backend",		ctypes.POINTER(_GTlsBackend)),] )

g_tls_backend_get_client_connection_type = _rpythonic_function_(		"g_tls_backend_get_client_connection_type", ctypes.c_ulong, [
	("backend",		ctypes.POINTER(_GTlsBackend)),] )

g_tls_backend_get_server_connection_type = _rpythonic_function_(		"g_tls_backend_get_server_connection_type", ctypes.c_ulong, [
	("backend",		ctypes.POINTER(_GTlsBackend)),] )

g_tls_backend_get_file_database_type = _rpythonic_function_(		"g_tls_backend_get_file_database_type", ctypes.c_ulong, [
	("backend",		ctypes.POINTER(_GTlsBackend)),] )

verify = _rpythonic_function_(		"verify", ctypes.c_int, [
	("cert",		ctypes.POINTER(_GTlsCertificate)),
	("identity",		ctypes.POINTER(_GSocketConnectable)),
	("trusted_ca",		ctypes.POINTER(_GTlsCertificate)),] )

g_tls_certificate_get_type = _rpythonic_function_(		"g_tls_certificate_get_type", ctypes.c_ulong, [] )

g_tls_certificate_new_from_pem = _rpythonic_function_(		"g_tls_certificate_new_from_pem", ctypes.POINTER(_GTlsCertificate), [
	("data",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_long),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_tls_certificate_new_from_file = _rpythonic_function_(		"g_tls_certificate_new_from_file", ctypes.POINTER(_GTlsCertificate), [
	("file",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_tls_certificate_new_from_files = _rpythonic_function_(		"g_tls_certificate_new_from_files", ctypes.POINTER(_GTlsCertificate), [
	("cert_file",		ctypes.POINTER(ctypes.c_char)),
	("key_file",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_tls_certificate_list_new_from_file = _rpythonic_function_(		"g_tls_certificate_list_new_from_file", ctypes.POINTER(_GList), [
	("file",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_tls_certificate_get_issuer = _rpythonic_function_(		"g_tls_certificate_get_issuer", ctypes.POINTER(_GTlsCertificate), [
	("cert",		ctypes.POINTER(_GTlsCertificate)),] )

g_tls_certificate_verify = _rpythonic_function_(		"g_tls_certificate_verify", ctypes.c_int, [
	("cert",		ctypes.POINTER(_GTlsCertificate)),
	("identity",		ctypes.POINTER(_GSocketConnectable)),
	("trusted_ca",		ctypes.POINTER(_GTlsCertificate)),] )

accept_certificate = _rpythonic_function_(		"accept_certificate", ctypes.c_int, [
	("connection",		ctypes.POINTER(_GTlsConnection)),
	("peer_cert",		ctypes.POINTER(_GTlsCertificate)),
	("errors",		ctypes.c_int),] )

handshake = _rpythonic_function_(		"handshake", ctypes.c_int, [
	("conn",		ctypes.POINTER(_GTlsConnection)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

handshake_async = _rpythonic_function_(		"handshake_async", ctypes.c_void_p, [
	("conn",		ctypes.POINTER(_GTlsConnection)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

handshake_finish = _rpythonic_function_(		"handshake_finish", ctypes.c_int, [
	("conn",		ctypes.POINTER(_GTlsConnection)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_tls_connection_get_type = _rpythonic_function_(		"g_tls_connection_get_type", ctypes.c_ulong, [] )

g_tls_connection_set_use_system_certdb = _rpythonic_function_(		"g_tls_connection_set_use_system_certdb", ctypes.c_void_p, [
	("conn",		ctypes.POINTER(_GTlsConnection)),
	("use_system_certdb",		ctypes.c_int),] )

g_tls_connection_get_use_system_certdb = _rpythonic_function_(		"g_tls_connection_get_use_system_certdb", ctypes.c_int, [
	("conn",		ctypes.POINTER(_GTlsConnection)),] )

g_tls_connection_set_database = _rpythonic_function_(		"g_tls_connection_set_database", ctypes.c_void_p, [
	("conn",		ctypes.POINTER(_GTlsConnection)),
	("database",		ctypes.POINTER(_GTlsDatabase)),] )

g_tls_connection_get_database = _rpythonic_function_(		"g_tls_connection_get_database", ctypes.POINTER(_GTlsDatabase), [
	("conn",		ctypes.POINTER(_GTlsConnection)),] )

g_tls_connection_set_certificate = _rpythonic_function_(		"g_tls_connection_set_certificate", ctypes.c_void_p, [
	("conn",		ctypes.POINTER(_GTlsConnection)),
	("certificate",		ctypes.POINTER(_GTlsCertificate)),] )

g_tls_connection_get_certificate = _rpythonic_function_(		"g_tls_connection_get_certificate", ctypes.POINTER(_GTlsCertificate), [
	("conn",		ctypes.POINTER(_GTlsConnection)),] )

g_tls_connection_set_interaction = _rpythonic_function_(		"g_tls_connection_set_interaction", ctypes.c_void_p, [
	("conn",		ctypes.POINTER(_GTlsConnection)),
	("interaction",		ctypes.POINTER(_GTlsInteraction)),] )

g_tls_connection_get_interaction = _rpythonic_function_(		"g_tls_connection_get_interaction", ctypes.POINTER(_GTlsInteraction), [
	("conn",		ctypes.POINTER(_GTlsConnection)),] )

g_tls_connection_get_peer_certificate = _rpythonic_function_(		"g_tls_connection_get_peer_certificate", ctypes.POINTER(_GTlsCertificate), [
	("conn",		ctypes.POINTER(_GTlsConnection)),] )

g_tls_connection_get_peer_certificate_errors = _rpythonic_function_(		"g_tls_connection_get_peer_certificate_errors", ctypes.c_int, [
	("conn",		ctypes.POINTER(_GTlsConnection)),] )

g_tls_connection_set_require_close_notify = _rpythonic_function_(		"g_tls_connection_set_require_close_notify", ctypes.c_void_p, [
	("conn",		ctypes.POINTER(_GTlsConnection)),
	("require_close_notify",		ctypes.c_int),] )

g_tls_connection_get_require_close_notify = _rpythonic_function_(		"g_tls_connection_get_require_close_notify", ctypes.c_int, [
	("conn",		ctypes.POINTER(_GTlsConnection)),] )

g_tls_connection_set_rehandshake_mode = _rpythonic_function_(		"g_tls_connection_set_rehandshake_mode", ctypes.c_void_p, [
	("conn",		ctypes.POINTER(_GTlsConnection)),
	("mode",		ctypes.c_int),] )

g_tls_connection_get_rehandshake_mode = _rpythonic_function_(		"g_tls_connection_get_rehandshake_mode", ctypes.c_int, [
	("conn",		ctypes.POINTER(_GTlsConnection)),] )

g_tls_connection_handshake = _rpythonic_function_(		"g_tls_connection_handshake", ctypes.c_int, [
	("conn",		ctypes.POINTER(_GTlsConnection)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_tls_connection_handshake_async = _rpythonic_function_(		"g_tls_connection_handshake_async", ctypes.c_void_p, [
	("conn",		ctypes.POINTER(_GTlsConnection)),
	("io_priority",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_tls_connection_handshake_finish = _rpythonic_function_(		"g_tls_connection_handshake_finish", ctypes.c_int, [
	("conn",		ctypes.POINTER(_GTlsConnection)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_tls_error_quark = _rpythonic_function_(		"g_tls_error_quark", ctypes.c_uint, [] )

g_tls_connection_emit_accept_certificate = _rpythonic_function_(		"g_tls_connection_emit_accept_certificate", ctypes.c_int, [
	("conn",		ctypes.POINTER(_GTlsConnection)),
	("peer_cert",		ctypes.POINTER(_GTlsCertificate)),
	("errors",		ctypes.c_int),] )

g_tls_client_connection_get_type = _rpythonic_function_(		"g_tls_client_connection_get_type", ctypes.c_ulong, [] )

g_tls_client_connection_new = _rpythonic_function_(		"g_tls_client_connection_new", ctypes.POINTER(_GIOStream), [
	("base_io_stream",		ctypes.POINTER(_GIOStream)),
	("server_identity",		ctypes.POINTER(_GSocketConnectable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_tls_client_connection_get_validation_flags = _rpythonic_function_(		"g_tls_client_connection_get_validation_flags", ctypes.c_int, [
	("conn",		ctypes.POINTER(_GTlsClientConnection)),] )

g_tls_client_connection_set_validation_flags = _rpythonic_function_(		"g_tls_client_connection_set_validation_flags", ctypes.c_void_p, [
	("conn",		ctypes.POINTER(_GTlsClientConnection)),
	("flags",		ctypes.c_int),] )

g_tls_client_connection_get_server_identity = _rpythonic_function_(		"g_tls_client_connection_get_server_identity", ctypes.POINTER(_GSocketConnectable), [
	("conn",		ctypes.POINTER(_GTlsClientConnection)),] )

g_tls_client_connection_set_server_identity = _rpythonic_function_(		"g_tls_client_connection_set_server_identity", ctypes.c_void_p, [
	("conn",		ctypes.POINTER(_GTlsClientConnection)),
	("identity",		ctypes.POINTER(_GSocketConnectable)),] )

g_tls_client_connection_get_use_ssl3 = _rpythonic_function_(		"g_tls_client_connection_get_use_ssl3", ctypes.c_int, [
	("conn",		ctypes.POINTER(_GTlsClientConnection)),] )

g_tls_client_connection_set_use_ssl3 = _rpythonic_function_(		"g_tls_client_connection_set_use_ssl3", ctypes.c_void_p, [
	("conn",		ctypes.POINTER(_GTlsClientConnection)),
	("use_ssl3",		ctypes.c_int),] )

g_tls_client_connection_get_accepted_cas = _rpythonic_function_(		"g_tls_client_connection_get_accepted_cas", ctypes.POINTER(_GList), [
	("conn",		ctypes.POINTER(_GTlsClientConnection)),] )

verify_chain = _rpythonic_function_(		"verify_chain", ctypes.c_int, [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("chain",		ctypes.POINTER(_GTlsCertificate)),
	("purpose",		ctypes.POINTER(ctypes.c_char)),
	("identity",		ctypes.POINTER(_GSocketConnectable)),
	("interaction",		ctypes.POINTER(_GTlsInteraction)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

verify_chain_async = _rpythonic_function_(		"verify_chain_async", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("chain",		ctypes.POINTER(_GTlsCertificate)),
	("purpose",		ctypes.POINTER(ctypes.c_char)),
	("identity",		ctypes.POINTER(_GSocketConnectable)),
	("interaction",		ctypes.POINTER(_GTlsInteraction)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

verify_chain_finish = _rpythonic_function_(		"verify_chain_finish", ctypes.c_int, [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

create_certificate_handle = _rpythonic_function_(		"create_certificate_handle", ctypes.POINTER(ctypes.c_char), [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("certificate",		ctypes.POINTER(_GTlsCertificate)),] )

lookup_certificate_for_handle = _rpythonic_function_(		"lookup_certificate_for_handle", ctypes.POINTER(_GTlsCertificate), [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("handle",		ctypes.POINTER(ctypes.c_char)),
	("interaction",		ctypes.POINTER(_GTlsInteraction)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

lookup_certificate_for_handle_async = _rpythonic_function_(		"lookup_certificate_for_handle_async", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("handle",		ctypes.POINTER(ctypes.c_char)),
	("interaction",		ctypes.POINTER(_GTlsInteraction)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

lookup_certificate_for_handle_finish = _rpythonic_function_(		"lookup_certificate_for_handle_finish", ctypes.POINTER(_GTlsCertificate), [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

lookup_certificate_issuer = _rpythonic_function_(		"lookup_certificate_issuer", ctypes.POINTER(_GTlsCertificate), [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("certificate",		ctypes.POINTER(_GTlsCertificate)),
	("interaction",		ctypes.POINTER(_GTlsInteraction)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

lookup_certificate_issuer_async = _rpythonic_function_(		"lookup_certificate_issuer_async", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("certificate",		ctypes.POINTER(_GTlsCertificate)),
	("interaction",		ctypes.POINTER(_GTlsInteraction)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

lookup_certificate_issuer_finish = _rpythonic_function_(		"lookup_certificate_issuer_finish", ctypes.POINTER(_GTlsCertificate), [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

lookup_certificates_issued_by = _rpythonic_function_(		"lookup_certificates_issued_by", ctypes.POINTER(_GList), [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("issuer_raw_dn",		ctypes.POINTER(_GByteArray)),
	("interaction",		ctypes.POINTER(_GTlsInteraction)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

lookup_certificates_issued_by_async = _rpythonic_function_(		"lookup_certificates_issued_by_async", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("issuer_raw_dn",		ctypes.POINTER(_GByteArray)),
	("interaction",		ctypes.POINTER(_GTlsInteraction)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

lookup_certificates_issued_by_finish = _rpythonic_function_(		"lookup_certificates_issued_by_finish", ctypes.POINTER(_GList), [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_tls_database_get_type = _rpythonic_function_(		"g_tls_database_get_type", ctypes.c_ulong, [] )

g_tls_database_verify_chain = _rpythonic_function_(		"g_tls_database_verify_chain", ctypes.c_int, [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("chain",		ctypes.POINTER(_GTlsCertificate)),
	("purpose",		ctypes.POINTER(ctypes.c_char)),
	("identity",		ctypes.POINTER(_GSocketConnectable)),
	("interaction",		ctypes.POINTER(_GTlsInteraction)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_tls_database_verify_chain_async = _rpythonic_function_(		"g_tls_database_verify_chain_async", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("chain",		ctypes.POINTER(_GTlsCertificate)),
	("purpose",		ctypes.POINTER(ctypes.c_char)),
	("identity",		ctypes.POINTER(_GSocketConnectable)),
	("interaction",		ctypes.POINTER(_GTlsInteraction)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_tls_database_verify_chain_finish = _rpythonic_function_(		"g_tls_database_verify_chain_finish", ctypes.c_int, [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_tls_database_create_certificate_handle = _rpythonic_function_(		"g_tls_database_create_certificate_handle", ctypes.POINTER(ctypes.c_char), [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("certificate",		ctypes.POINTER(_GTlsCertificate)),] )

g_tls_database_lookup_certificate_for_handle = _rpythonic_function_(		"g_tls_database_lookup_certificate_for_handle", ctypes.POINTER(_GTlsCertificate), [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("handle",		ctypes.POINTER(ctypes.c_char)),
	("interaction",		ctypes.POINTER(_GTlsInteraction)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_tls_database_lookup_certificate_for_handle_async = _rpythonic_function_(		"g_tls_database_lookup_certificate_for_handle_async", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("handle",		ctypes.POINTER(ctypes.c_char)),
	("interaction",		ctypes.POINTER(_GTlsInteraction)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_tls_database_lookup_certificate_for_handle_finish = _rpythonic_function_(		"g_tls_database_lookup_certificate_for_handle_finish", ctypes.POINTER(_GTlsCertificate), [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_tls_database_lookup_certificate_issuer = _rpythonic_function_(		"g_tls_database_lookup_certificate_issuer", ctypes.POINTER(_GTlsCertificate), [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("certificate",		ctypes.POINTER(_GTlsCertificate)),
	("interaction",		ctypes.POINTER(_GTlsInteraction)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_tls_database_lookup_certificate_issuer_async = _rpythonic_function_(		"g_tls_database_lookup_certificate_issuer_async", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("certificate",		ctypes.POINTER(_GTlsCertificate)),
	("interaction",		ctypes.POINTER(_GTlsInteraction)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_tls_database_lookup_certificate_issuer_finish = _rpythonic_function_(		"g_tls_database_lookup_certificate_issuer_finish", ctypes.POINTER(_GTlsCertificate), [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_tls_database_lookup_certificates_issued_by = _rpythonic_function_(		"g_tls_database_lookup_certificates_issued_by", ctypes.POINTER(_GList), [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("issuer_raw_dn",		ctypes.POINTER(_GByteArray)),
	("interaction",		ctypes.POINTER(_GTlsInteraction)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_tls_database_lookup_certificates_issued_by_async = _rpythonic_function_(		"g_tls_database_lookup_certificates_issued_by_async", ctypes.c_void_p, [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("issuer_raw_dn",		ctypes.POINTER(_GByteArray)),
	("interaction",		ctypes.POINTER(_GTlsInteraction)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_tls_database_lookup_certificates_issued_by_finish = _rpythonic_function_(		"g_tls_database_lookup_certificates_issued_by_finish", ctypes.POINTER(_GList), [
	("C_self",		ctypes.POINTER(_GTlsDatabase)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_tls_file_database_get_type = _rpythonic_function_(		"g_tls_file_database_get_type", ctypes.c_ulong, [] )

g_tls_file_database_new = _rpythonic_function_(		"g_tls_file_database_new", ctypes.POINTER(_GTlsDatabase), [
	("anchors",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

ask_password_async = _rpythonic_function_(		"ask_password_async", ctypes.c_void_p, [
	("interaction",		ctypes.POINTER(_GTlsInteraction)),
	("password",		ctypes.POINTER(_GTlsPassword)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

ask_password_finish = _rpythonic_function_(		"ask_password_finish", ctypes.c_int, [
	("interaction",		ctypes.POINTER(_GTlsInteraction)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_tls_interaction_get_type = _rpythonic_function_(		"g_tls_interaction_get_type", ctypes.c_ulong, [] )

g_tls_interaction_invoke_ask_password = _rpythonic_function_(		"g_tls_interaction_invoke_ask_password", ctypes.c_int, [
	("interaction",		ctypes.POINTER(_GTlsInteraction)),
	("password",		ctypes.POINTER(_GTlsPassword)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_tls_interaction_ask_password = _rpythonic_function_(		"g_tls_interaction_ask_password", ctypes.c_int, [
	("interaction",		ctypes.POINTER(_GTlsInteraction)),
	("password",		ctypes.POINTER(_GTlsPassword)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_tls_interaction_ask_password_async = _rpythonic_function_(		"g_tls_interaction_ask_password_async", ctypes.c_void_p, [
	("interaction",		ctypes.POINTER(_GTlsInteraction)),
	("password",		ctypes.POINTER(_GTlsPassword)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_tls_interaction_ask_password_finish = _rpythonic_function_(		"g_tls_interaction_ask_password_finish", ctypes.c_int, [
	("interaction",		ctypes.POINTER(_GTlsInteraction)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_tls_server_connection_get_type = _rpythonic_function_(		"g_tls_server_connection_get_type", ctypes.c_ulong, [] )

g_tls_server_connection_new = _rpythonic_function_(		"g_tls_server_connection_new", ctypes.POINTER(_GIOStream), [
	("base_io_stream",		ctypes.POINTER(_GIOStream)),
	("certificate",		ctypes.POINTER(_GTlsCertificate)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

get_value = _rpythonic_function_(		"get_value", ctypes.POINTER(ctypes.c_ubyte), [
	("password",		ctypes.POINTER(_GTlsPassword)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),] )

set_value = _rpythonic_function_(		"set_value", ctypes.c_void_p, [
	("password",		ctypes.POINTER(_GTlsPassword)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),
	("length",		ctypes.c_long),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

get_default_warning = _rpythonic_function_(		"get_default_warning", ctypes.POINTER(ctypes.c_char), [
	("password",		ctypes.POINTER(_GTlsPassword)),] )

g_tls_password_get_type = _rpythonic_function_(		"g_tls_password_get_type", ctypes.c_ulong, [] )

g_tls_password_new = _rpythonic_function_(		"g_tls_password_new", ctypes.POINTER(_GTlsPassword), [
	("flags",		ctypes.c_int),
	("description",		ctypes.POINTER(ctypes.c_char)),] )

g_tls_password_get_value = _rpythonic_function_(		"g_tls_password_get_value", ctypes.POINTER(ctypes.c_ubyte), [
	("password",		ctypes.POINTER(_GTlsPassword)),
	("length",		ctypes.POINTER(ctypes.c_ulong)),] )

g_tls_password_set_value = _rpythonic_function_(		"g_tls_password_set_value", ctypes.c_void_p, [
	("password",		ctypes.POINTER(_GTlsPassword)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),
	("length",		ctypes.c_long),] )

g_tls_password_set_value_full = _rpythonic_function_(		"g_tls_password_set_value_full", ctypes.c_void_p, [
	("password",		ctypes.POINTER(_GTlsPassword)),
	("value",		ctypes.POINTER(ctypes.c_ubyte)),
	("length",		ctypes.c_long),
	("destroy",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

g_tls_password_get_flags = _rpythonic_function_(		"g_tls_password_get_flags", ctypes.c_int, [
	("password",		ctypes.POINTER(_GTlsPassword)),] )

g_tls_password_set_flags = _rpythonic_function_(		"g_tls_password_set_flags", ctypes.c_void_p, [
	("password",		ctypes.POINTER(_GTlsPassword)),
	("flags",		ctypes.c_int),] )

g_tls_password_get_description = _rpythonic_function_(		"g_tls_password_get_description", ctypes.POINTER(ctypes.c_char), [
	("password",		ctypes.POINTER(_GTlsPassword)),] )

g_tls_password_set_description = _rpythonic_function_(		"g_tls_password_set_description", ctypes.c_void_p, [
	("password",		ctypes.POINTER(_GTlsPassword)),
	("description",		ctypes.POINTER(ctypes.c_char)),] )

g_tls_password_get_warning = _rpythonic_function_(		"g_tls_password_get_warning", ctypes.POINTER(ctypes.c_char), [
	("password",		ctypes.POINTER(_GTlsPassword)),] )

g_tls_password_set_warning = _rpythonic_function_(		"g_tls_password_set_warning", ctypes.c_void_p, [
	("password",		ctypes.POINTER(_GTlsPassword)),
	("warning",		ctypes.POINTER(ctypes.c_char)),] )

is_active = _rpythonic_function_(		"is_active", ctypes.c_int, [
	("vfs",		ctypes.POINTER(_GVfs)),] )

get_file_for_path = _rpythonic_function_(		"get_file_for_path", ctypes.POINTER(_GFile), [
	("vfs",		ctypes.POINTER(_GVfs)),
	("path",		ctypes.POINTER(ctypes.c_char)),] )

get_file_for_uri = _rpythonic_function_(		"get_file_for_uri", ctypes.POINTER(_GFile), [
	("vfs",		ctypes.POINTER(_GVfs)),
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

get_supported_uri_schemes = _rpythonic_function_(		"get_supported_uri_schemes", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("vfs",		ctypes.POINTER(_GVfs)),] )

parse_name = _rpythonic_function_(		"parse_name", ctypes.POINTER(_GFile), [
	("vfs",		ctypes.POINTER(_GVfs)),
	("parse_name",		ctypes.POINTER(ctypes.c_char)),] )

local_file_add_info = _rpythonic_function_(		"local_file_add_info", ctypes.c_void_p, [
	("vfs",		ctypes.POINTER(_GVfs)),
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("device",		ctypes.c_ulong),
	("attribute_matcher",		ctypes.POINTER(_GFileAttributeMatcher)),
	("info",		ctypes.POINTER(_GFileInfo)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("extra_data",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("free_extra_data",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.c_void_p, ))),] )

add_writable_namespaces = _rpythonic_function_(		"add_writable_namespaces", ctypes.c_void_p, [
	("vfs",		ctypes.POINTER(_GVfs)),
	("C_list",		ctypes.POINTER(_GFileAttributeInfoList)),] )

local_file_set_attributes = _rpythonic_function_(		"local_file_set_attributes", ctypes.c_int, [
	("vfs",		ctypes.POINTER(_GVfs)),
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("info",		ctypes.POINTER(_GFileInfo)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

local_file_removed = _rpythonic_function_(		"local_file_removed", ctypes.c_void_p, [
	("vfs",		ctypes.POINTER(_GVfs)),
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

local_file_moved = _rpythonic_function_(		"local_file_moved", ctypes.c_void_p, [
	("vfs",		ctypes.POINTER(_GVfs)),
	("source",		ctypes.POINTER(ctypes.c_char)),
	("dest",		ctypes.POINTER(ctypes.c_char)),] )

g_vfs_get_type = _rpythonic_function_(		"g_vfs_get_type", ctypes.c_ulong, [] )

g_vfs_is_active = _rpythonic_function_(		"g_vfs_is_active", ctypes.c_int, [
	("vfs",		ctypes.POINTER(_GVfs)),] )

g_vfs_get_file_for_path = _rpythonic_function_(		"g_vfs_get_file_for_path", ctypes.POINTER(_GFile), [
	("vfs",		ctypes.POINTER(_GVfs)),
	("path",		ctypes.POINTER(ctypes.c_char)),] )

g_vfs_get_file_for_uri = _rpythonic_function_(		"g_vfs_get_file_for_uri", ctypes.POINTER(_GFile), [
	("vfs",		ctypes.POINTER(_GVfs)),
	("uri",		ctypes.POINTER(ctypes.c_char)),] )

g_vfs_get_supported_uri_schemes = _rpythonic_function_(		"g_vfs_get_supported_uri_schemes", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("vfs",		ctypes.POINTER(_GVfs)),] )

g_vfs_parse_name = _rpythonic_function_(		"g_vfs_parse_name", ctypes.POINTER(_GFile), [
	("vfs",		ctypes.POINTER(_GVfs)),
	("parse_name",		ctypes.POINTER(ctypes.c_char)),] )

g_vfs_get_default = _rpythonic_function_(		"g_vfs_get_default", ctypes.POINTER(_GVfs), [] )

g_vfs_get_local = _rpythonic_function_(		"g_vfs_get_local", ctypes.POINTER(_GVfs), [] )

removed = _rpythonic_function_(		"removed", ctypes.c_void_p, [
	("volume",		ctypes.POINTER(_GVolume)),] )

get_mount = _rpythonic_function_(		"get_mount", ctypes.POINTER(_GMount), [
	("volume",		ctypes.POINTER(_GVolume)),] )

can_mount = _rpythonic_function_(		"can_mount", ctypes.c_int, [
	("volume",		ctypes.POINTER(_GVolume)),] )

mount_fn = _rpythonic_function_(		"mount_fn", ctypes.c_void_p, [
	("volume",		ctypes.POINTER(_GVolume)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

mount_finish = _rpythonic_function_(		"mount_finish", ctypes.c_int, [
	("volume",		ctypes.POINTER(_GVolume)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

should_automount = _rpythonic_function_(		"should_automount", ctypes.c_int, [
	("volume",		ctypes.POINTER(_GVolume)),] )

get_activation_root = _rpythonic_function_(		"get_activation_root", ctypes.POINTER(_GFile), [
	("volume",		ctypes.POINTER(_GVolume)),] )

g_volume_get_type = _rpythonic_function_(		"g_volume_get_type", ctypes.c_ulong, [] )

g_volume_get_name = _rpythonic_function_(		"g_volume_get_name", ctypes.POINTER(ctypes.c_char), [
	("volume",		ctypes.POINTER(_GVolume)),] )

g_volume_get_icon = _rpythonic_function_(		"g_volume_get_icon", ctypes.POINTER(_GIcon), [
	("volume",		ctypes.POINTER(_GVolume)),] )

g_volume_get_uuid = _rpythonic_function_(		"g_volume_get_uuid", ctypes.POINTER(ctypes.c_char), [
	("volume",		ctypes.POINTER(_GVolume)),] )

g_volume_get_drive = _rpythonic_function_(		"g_volume_get_drive", ctypes.POINTER(_GDrive), [
	("volume",		ctypes.POINTER(_GVolume)),] )

g_volume_get_mount = _rpythonic_function_(		"g_volume_get_mount", ctypes.POINTER(_GMount), [
	("volume",		ctypes.POINTER(_GVolume)),] )

g_volume_can_mount = _rpythonic_function_(		"g_volume_can_mount", ctypes.c_int, [
	("volume",		ctypes.POINTER(_GVolume)),] )

g_volume_can_eject = _rpythonic_function_(		"g_volume_can_eject", ctypes.c_int, [
	("volume",		ctypes.POINTER(_GVolume)),] )

g_volume_should_automount = _rpythonic_function_(		"g_volume_should_automount", ctypes.c_int, [
	("volume",		ctypes.POINTER(_GVolume)),] )

g_volume_mount = _rpythonic_function_(		"g_volume_mount", ctypes.c_void_p, [
	("volume",		ctypes.POINTER(_GVolume)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_volume_mount_finish = _rpythonic_function_(		"g_volume_mount_finish", ctypes.c_int, [
	("volume",		ctypes.POINTER(_GVolume)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_volume_eject = _rpythonic_function_(		"g_volume_eject", ctypes.c_void_p, [
	("volume",		ctypes.POINTER(_GVolume)),
	("flags",		ctypes.c_int),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_volume_eject_finish = _rpythonic_function_(		"g_volume_eject_finish", ctypes.c_int, [
	("volume",		ctypes.POINTER(_GVolume)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_volume_get_identifier = _rpythonic_function_(		"g_volume_get_identifier", ctypes.POINTER(ctypes.c_char), [
	("volume",		ctypes.POINTER(_GVolume)),
	("kind",		ctypes.POINTER(ctypes.c_char)),] )

g_volume_enumerate_identifiers = _rpythonic_function_(		"g_volume_enumerate_identifiers", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("volume",		ctypes.POINTER(_GVolume)),] )

g_volume_get_activation_root = _rpythonic_function_(		"g_volume_get_activation_root", ctypes.POINTER(_GFile), [
	("volume",		ctypes.POINTER(_GVolume)),] )

g_volume_eject_with_operation = _rpythonic_function_(		"g_volume_eject_with_operation", ctypes.c_void_p, [
	("volume",		ctypes.POINTER(_GVolume)),
	("flags",		ctypes.c_int),
	("mount_operation",		ctypes.POINTER(_GMountOperation)),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_volume_eject_with_operation_finish = _rpythonic_function_(		"g_volume_eject_with_operation_finish", ctypes.c_int, [
	("volume",		ctypes.POINTER(_GVolume)),
	("result",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_volume_get_sort_key = _rpythonic_function_(		"g_volume_get_sort_key", ctypes.POINTER(ctypes.c_char), [
	("volume",		ctypes.POINTER(_GVolume)),] )

g_zlib_compressor_get_type = _rpythonic_function_(		"g_zlib_compressor_get_type", ctypes.c_ulong, [] )

g_zlib_compressor_new = _rpythonic_function_(		"g_zlib_compressor_new", ctypes.POINTER(_GZlibCompressor), [
	("format",		ctypes.c_int),
	("level",		ctypes.c_int),] )

g_zlib_compressor_get_file_info = _rpythonic_function_(		"g_zlib_compressor_get_file_info", ctypes.POINTER(_GFileInfo), [
	("compressor",		ctypes.POINTER(_GZlibCompressor)),] )

g_zlib_compressor_set_file_info = _rpythonic_function_(		"g_zlib_compressor_set_file_info", ctypes.c_void_p, [
	("compressor",		ctypes.POINTER(_GZlibCompressor)),
	("file_info",		ctypes.POINTER(_GFileInfo)),] )

g_zlib_decompressor_get_type = _rpythonic_function_(		"g_zlib_decompressor_get_type", ctypes.c_ulong, [] )

g_zlib_decompressor_new = _rpythonic_function_(		"g_zlib_decompressor_new", ctypes.POINTER(_GZlibDecompressor), [
	("format",		ctypes.c_int),] )

g_zlib_decompressor_get_file_info = _rpythonic_function_(		"g_zlib_decompressor_get_file_info", ctypes.POINTER(_GFileInfo), [
	("decompressor",		ctypes.POINTER(_GZlibDecompressor)),] )

get_info = _rpythonic_function_(		"get_info", ctypes.POINTER(_GDBusInterfaceInfo), [
	("interface_",		ctypes.POINTER(_GDBusInterface)),] )

get_object = _rpythonic_function_(		"get_object", ctypes.POINTER(_GDBusObject), [
	("interface_",		ctypes.POINTER(_GDBusInterface)),] )

set_object = _rpythonic_function_(		"set_object", ctypes.c_void_p, [
	("interface_",		ctypes.POINTER(_GDBusInterface)),
	("C_object",		ctypes.POINTER(_GDBusObject)),] )

dup_object = _rpythonic_function_(		"dup_object", ctypes.POINTER(_GDBusObject), [
	("interface_",		ctypes.POINTER(_GDBusInterface)),] )

g_dbus_interface_get_type = _rpythonic_function_(		"g_dbus_interface_get_type", ctypes.c_ulong, [] )

g_dbus_interface_get_info = _rpythonic_function_(		"g_dbus_interface_get_info", ctypes.POINTER(_GDBusInterfaceInfo), [
	("interface_",		ctypes.POINTER(_GDBusInterface)),] )

g_dbus_interface_get_object = _rpythonic_function_(		"g_dbus_interface_get_object", ctypes.POINTER(_GDBusObject), [
	("interface_",		ctypes.POINTER(_GDBusInterface)),] )

g_dbus_interface_set_object = _rpythonic_function_(		"g_dbus_interface_set_object", ctypes.c_void_p, [
	("interface_",		ctypes.POINTER(_GDBusInterface)),
	("C_object",		ctypes.POINTER(_GDBusObject)),] )

g_dbus_interface_dup_object = _rpythonic_function_(		"g_dbus_interface_dup_object", ctypes.POINTER(_GDBusObject), [
	("interface_",		ctypes.POINTER(_GDBusInterface)),] )

get_vtable = _rpythonic_function_(		"get_vtable", ctypes.POINTER(_GDBusInterfaceVTable), [
	("interface_",		ctypes.POINTER(_GDBusInterfaceSkeleton)),] )

get_properties = _rpythonic_function_(		"get_properties", ctypes.POINTER(_GVariant), [
	("interface_",		ctypes.POINTER(_GDBusInterfaceSkeleton)),] )

g_authorize_method = _rpythonic_function_(		"g_authorize_method", ctypes.c_int, [
	("interface_",		ctypes.POINTER(_GDBusInterfaceSkeleton)),
	("invocation",		ctypes.POINTER(_GDBusMethodInvocation)),] )

g_dbus_interface_skeleton_get_type = _rpythonic_function_(		"g_dbus_interface_skeleton_get_type", ctypes.c_ulong, [] )

g_dbus_interface_skeleton_get_flags = _rpythonic_function_(		"g_dbus_interface_skeleton_get_flags", ctypes.c_int, [
	("interface_",		ctypes.POINTER(_GDBusInterfaceSkeleton)),] )

g_dbus_interface_skeleton_set_flags = _rpythonic_function_(		"g_dbus_interface_skeleton_set_flags", ctypes.c_void_p, [
	("interface_",		ctypes.POINTER(_GDBusInterfaceSkeleton)),
	("flags",		ctypes.c_int),] )

g_dbus_interface_skeleton_get_info = _rpythonic_function_(		"g_dbus_interface_skeleton_get_info", ctypes.POINTER(_GDBusInterfaceInfo), [
	("interface_",		ctypes.POINTER(_GDBusInterfaceSkeleton)),] )

g_dbus_interface_skeleton_get_vtable = _rpythonic_function_(		"g_dbus_interface_skeleton_get_vtable", ctypes.POINTER(_GDBusInterfaceVTable), [
	("interface_",		ctypes.POINTER(_GDBusInterfaceSkeleton)),] )

g_dbus_interface_skeleton_get_properties = _rpythonic_function_(		"g_dbus_interface_skeleton_get_properties", ctypes.POINTER(_GVariant), [
	("interface_",		ctypes.POINTER(_GDBusInterfaceSkeleton)),] )

g_dbus_interface_skeleton_flush = _rpythonic_function_(		"g_dbus_interface_skeleton_flush", ctypes.c_void_p, [
	("interface_",		ctypes.POINTER(_GDBusInterfaceSkeleton)),] )

g_dbus_interface_skeleton_export = _rpythonic_function_(		"g_dbus_interface_skeleton_export", ctypes.c_int, [
	("interface_",		ctypes.POINTER(_GDBusInterfaceSkeleton)),
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_interface_skeleton_unexport = _rpythonic_function_(		"g_dbus_interface_skeleton_unexport", ctypes.c_void_p, [
	("interface_",		ctypes.POINTER(_GDBusInterfaceSkeleton)),] )

g_dbus_interface_skeleton_unexport_from_connection = _rpythonic_function_(		"g_dbus_interface_skeleton_unexport_from_connection", ctypes.c_void_p, [
	("interface_",		ctypes.POINTER(_GDBusInterfaceSkeleton)),
	("connection",		ctypes.POINTER(_GDBusConnection)),] )

g_dbus_interface_skeleton_get_connection = _rpythonic_function_(		"g_dbus_interface_skeleton_get_connection", ctypes.POINTER(_GDBusConnection), [
	("interface_",		ctypes.POINTER(_GDBusInterfaceSkeleton)),] )

g_dbus_interface_skeleton_get_connections = _rpythonic_function_(		"g_dbus_interface_skeleton_get_connections", ctypes.POINTER(_GList), [
	("interface_",		ctypes.POINTER(_GDBusInterfaceSkeleton)),] )

g_dbus_interface_skeleton_has_connection = _rpythonic_function_(		"g_dbus_interface_skeleton_has_connection", ctypes.c_int, [
	("interface_",		ctypes.POINTER(_GDBusInterfaceSkeleton)),
	("connection",		ctypes.POINTER(_GDBusConnection)),] )

g_dbus_interface_skeleton_get_object_path = _rpythonic_function_(		"g_dbus_interface_skeleton_get_object_path", ctypes.POINTER(ctypes.c_char), [
	("interface_",		ctypes.POINTER(_GDBusInterfaceSkeleton)),] )

get_object_path = _rpythonic_function_(		"get_object_path", ctypes.POINTER(ctypes.c_char), [
	("C_object",		ctypes.POINTER(_GDBusObject)),] )

get_interfaces = _rpythonic_function_(		"get_interfaces", ctypes.POINTER(_GList), [
	("C_object",		ctypes.POINTER(_GDBusObject)),] )

get_interface = _rpythonic_function_(		"get_interface", ctypes.POINTER(_GDBusInterface), [
	("C_object",		ctypes.POINTER(_GDBusObject)),
	("interface_name",		ctypes.POINTER(ctypes.c_char)),] )

interface_added = _rpythonic_function_(		"interface_added", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GDBusObject)),
	("interface_",		ctypes.POINTER(_GDBusInterface)),] )

interface_removed = _rpythonic_function_(		"interface_removed", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GDBusObject)),
	("interface_",		ctypes.POINTER(_GDBusInterface)),] )

g_dbus_object_get_type = _rpythonic_function_(		"g_dbus_object_get_type", ctypes.c_ulong, [] )

g_dbus_object_get_object_path = _rpythonic_function_(		"g_dbus_object_get_object_path", ctypes.POINTER(ctypes.c_char), [
	("C_object",		ctypes.POINTER(_GDBusObject)),] )

g_dbus_object_get_interfaces = _rpythonic_function_(		"g_dbus_object_get_interfaces", ctypes.POINTER(_GList), [
	("C_object",		ctypes.POINTER(_GDBusObject)),] )

g_dbus_object_get_interface = _rpythonic_function_(		"g_dbus_object_get_interface", ctypes.POINTER(_GDBusInterface), [
	("C_object",		ctypes.POINTER(_GDBusObject)),
	("interface_name",		ctypes.POINTER(ctypes.c_char)),] )

authorize_method = _rpythonic_function_(		"authorize_method", ctypes.c_int, [
	("C_object",		ctypes.POINTER(_GDBusObjectSkeleton)),
	("interface_",		ctypes.POINTER(_GDBusInterfaceSkeleton)),
	("invocation",		ctypes.POINTER(_GDBusMethodInvocation)),] )

g_dbus_object_skeleton_get_type = _rpythonic_function_(		"g_dbus_object_skeleton_get_type", ctypes.c_ulong, [] )

g_dbus_object_skeleton_new = _rpythonic_function_(		"g_dbus_object_skeleton_new", ctypes.POINTER(_GDBusObjectSkeleton), [
	("object_path",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_object_skeleton_flush = _rpythonic_function_(		"g_dbus_object_skeleton_flush", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GDBusObjectSkeleton)),] )

g_dbus_object_skeleton_add_interface = _rpythonic_function_(		"g_dbus_object_skeleton_add_interface", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GDBusObjectSkeleton)),
	("interface_",		ctypes.POINTER(_GDBusInterfaceSkeleton)),] )

g_dbus_object_skeleton_remove_interface = _rpythonic_function_(		"g_dbus_object_skeleton_remove_interface", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GDBusObjectSkeleton)),
	("interface_",		ctypes.POINTER(_GDBusInterfaceSkeleton)),] )

g_dbus_object_skeleton_remove_interface_by_name = _rpythonic_function_(		"g_dbus_object_skeleton_remove_interface_by_name", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GDBusObjectSkeleton)),
	("interface_name",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_object_skeleton_set_object_path = _rpythonic_function_(		"g_dbus_object_skeleton_set_object_path", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(_GDBusObjectSkeleton)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_object_proxy_get_type = _rpythonic_function_(		"g_dbus_object_proxy_get_type", ctypes.c_ulong, [] )

g_dbus_object_proxy_new = _rpythonic_function_(		"g_dbus_object_proxy_new", ctypes.POINTER(_GDBusObjectProxy), [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_object_proxy_get_connection = _rpythonic_function_(		"g_dbus_object_proxy_get_connection", ctypes.POINTER(_GDBusConnection), [
	("proxy",		ctypes.POINTER(_GDBusObjectProxy)),] )

get_objects = _rpythonic_function_(		"get_objects", ctypes.POINTER(_GList), [
	("manager",		ctypes.POINTER(_GDBusObjectManager)),] )

object_added = _rpythonic_function_(		"object_added", ctypes.c_void_p, [
	("manager",		ctypes.POINTER(_GDBusObjectManager)),
	("C_object",		ctypes.POINTER(_GDBusObject)),] )

object_removed = _rpythonic_function_(		"object_removed", ctypes.c_void_p, [
	("manager",		ctypes.POINTER(_GDBusObjectManager)),
	("C_object",		ctypes.POINTER(_GDBusObject)),] )

g_dbus_object_manager_get_type = _rpythonic_function_(		"g_dbus_object_manager_get_type", ctypes.c_ulong, [] )

g_dbus_object_manager_get_object_path = _rpythonic_function_(		"g_dbus_object_manager_get_object_path", ctypes.POINTER(ctypes.c_char), [
	("manager",		ctypes.POINTER(_GDBusObjectManager)),] )

g_dbus_object_manager_get_objects = _rpythonic_function_(		"g_dbus_object_manager_get_objects", ctypes.POINTER(_GList), [
	("manager",		ctypes.POINTER(_GDBusObjectManager)),] )

g_dbus_object_manager_get_object = _rpythonic_function_(		"g_dbus_object_manager_get_object", ctypes.POINTER(_GDBusObject), [
	("manager",		ctypes.POINTER(_GDBusObjectManager)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_object_manager_get_interface = _rpythonic_function_(		"g_dbus_object_manager_get_interface", ctypes.POINTER(_GDBusInterface), [
	("manager",		ctypes.POINTER(_GDBusObjectManager)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("interface_name",		ctypes.POINTER(ctypes.c_char)),] )

interface_proxy_signal = _rpythonic_function_(		"interface_proxy_signal", ctypes.c_void_p, [
	("manager",		ctypes.POINTER(_GDBusObjectManagerClient)),
	("object_proxy",		ctypes.POINTER(_GDBusObjectProxy)),
	("interface_proxy",		ctypes.POINTER(_GDBusProxy)),
	("sender_name",		ctypes.POINTER(ctypes.c_char)),
	("signal_name",		ctypes.POINTER(ctypes.c_char)),
	("parameters",		ctypes.POINTER(_GVariant)),] )

interface_proxy_properties_changed = _rpythonic_function_(		"interface_proxy_properties_changed", ctypes.c_void_p, [
	("manager",		ctypes.POINTER(_GDBusObjectManagerClient)),
	("object_proxy",		ctypes.POINTER(_GDBusObjectProxy)),
	("interface_proxy",		ctypes.POINTER(_GDBusProxy)),
	("changed_properties",		ctypes.POINTER(_GVariant)),
	("invalidated_properties",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

g_dbus_object_manager_client_get_type = _rpythonic_function_(		"g_dbus_object_manager_client_get_type", ctypes.c_ulong, [] )

g_dbus_object_manager_client_new = _rpythonic_function_(		"g_dbus_object_manager_client_new", ctypes.c_void_p, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("flags",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("get_proxy_type_func",		ctypes.CFUNCTYPE(ctypes.c_ulong, ctypes.POINTER(_GDBusObjectManagerClient),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),)),
	("get_proxy_type_user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("get_proxy_type_destroy_notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_dbus_object_manager_client_new_finish = _rpythonic_function_(		"g_dbus_object_manager_client_new_finish", ctypes.POINTER(_GDBusObjectManager), [
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_object_manager_client_new_sync = _rpythonic_function_(		"g_dbus_object_manager_client_new_sync", ctypes.POINTER(_GDBusObjectManager), [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("flags",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("get_proxy_type_func",		ctypes.CFUNCTYPE(ctypes.c_ulong, ctypes.POINTER(_GDBusObjectManagerClient),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),)),
	("get_proxy_type_user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("get_proxy_type_destroy_notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_object_manager_client_new_for_bus = _rpythonic_function_(		"g_dbus_object_manager_client_new_for_bus", ctypes.c_void_p, [
	("bus_type",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("get_proxy_type_func",		ctypes.CFUNCTYPE(ctypes.c_ulong, ctypes.POINTER(_GDBusObjectManagerClient),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),)),
	("get_proxy_type_user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("get_proxy_type_destroy_notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_GObject),ctypes.POINTER(_GAsyncResult),ctypes.POINTER(ctypes.c_void_p),)),
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),] )

g_dbus_object_manager_client_new_for_bus_finish = _rpythonic_function_(		"g_dbus_object_manager_client_new_for_bus_finish", ctypes.POINTER(_GDBusObjectManager), [
	("res",		ctypes.POINTER(_GAsyncResult)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_object_manager_client_new_for_bus_sync = _rpythonic_function_(		"g_dbus_object_manager_client_new_for_bus_sync", ctypes.POINTER(_GDBusObjectManager), [
	("bus_type",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("get_proxy_type_func",		ctypes.CFUNCTYPE(ctypes.c_ulong, ctypes.POINTER(_GDBusObjectManagerClient),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),)),
	("get_proxy_type_user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("get_proxy_type_destroy_notify",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("cancellable",		ctypes.POINTER(_GCancellable)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_object_manager_client_get_connection = _rpythonic_function_(		"g_dbus_object_manager_client_get_connection", ctypes.POINTER(_GDBusConnection), [
	("manager",		ctypes.POINTER(_GDBusObjectManagerClient)),] )

g_dbus_object_manager_client_get_flags = _rpythonic_function_(		"g_dbus_object_manager_client_get_flags", ctypes.c_int, [
	("manager",		ctypes.POINTER(_GDBusObjectManagerClient)),] )

g_dbus_object_manager_client_get_name = _rpythonic_function_(		"g_dbus_object_manager_client_get_name", ctypes.POINTER(ctypes.c_char), [
	("manager",		ctypes.POINTER(_GDBusObjectManagerClient)),] )

g_dbus_object_manager_client_get_name_owner = _rpythonic_function_(		"g_dbus_object_manager_client_get_name_owner", ctypes.POINTER(ctypes.c_char), [
	("manager",		ctypes.POINTER(_GDBusObjectManagerClient)),] )

g_dbus_object_manager_server_get_type = _rpythonic_function_(		"g_dbus_object_manager_server_get_type", ctypes.c_ulong, [] )

g_dbus_object_manager_server_new = _rpythonic_function_(		"g_dbus_object_manager_server_new", ctypes.POINTER(_GDBusObjectManagerServer), [
	("object_path",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_object_manager_server_get_connection = _rpythonic_function_(		"g_dbus_object_manager_server_get_connection", ctypes.POINTER(_GDBusConnection), [
	("manager",		ctypes.POINTER(_GDBusObjectManagerServer)),] )

g_dbus_object_manager_server_set_connection = _rpythonic_function_(		"g_dbus_object_manager_server_set_connection", ctypes.c_void_p, [
	("manager",		ctypes.POINTER(_GDBusObjectManagerServer)),
	("connection",		ctypes.POINTER(_GDBusConnection)),] )

g_dbus_object_manager_server_export = _rpythonic_function_(		"g_dbus_object_manager_server_export", ctypes.c_void_p, [
	("manager",		ctypes.POINTER(_GDBusObjectManagerServer)),
	("C_object",		ctypes.POINTER(_GDBusObjectSkeleton)),] )

g_dbus_object_manager_server_export_uniquely = _rpythonic_function_(		"g_dbus_object_manager_server_export_uniquely", ctypes.c_void_p, [
	("manager",		ctypes.POINTER(_GDBusObjectManagerServer)),
	("C_object",		ctypes.POINTER(_GDBusObjectSkeleton)),] )

g_dbus_object_manager_server_unexport = _rpythonic_function_(		"g_dbus_object_manager_server_unexport", ctypes.c_int, [
	("manager",		ctypes.POINTER(_GDBusObjectManagerServer)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_action_group_get_type = _rpythonic_function_(		"g_dbus_action_group_get_type", ctypes.c_ulong, [] )

g_dbus_action_group_get = _rpythonic_function_(		"g_dbus_action_group_get", ctypes.POINTER(_GDBusActionGroup), [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("bus_name",		ctypes.POINTER(ctypes.c_char)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),] )

activate_action_full = _rpythonic_function_(		"activate_action_full", ctypes.c_void_p, [
	("remote",		ctypes.POINTER(_GRemoteActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),
	("parameter",		ctypes.POINTER(_GVariant)),
	("platform_data",		ctypes.POINTER(_GVariant)),] )

change_action_state_full = _rpythonic_function_(		"change_action_state_full", ctypes.c_void_p, [
	("remote",		ctypes.POINTER(_GRemoteActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(_GVariant)),
	("platform_data",		ctypes.POINTER(_GVariant)),] )

g_remote_action_group_get_type = _rpythonic_function_(		"g_remote_action_group_get_type", ctypes.c_ulong, [] )

g_remote_action_group_activate_action_full = _rpythonic_function_(		"g_remote_action_group_activate_action_full", ctypes.c_void_p, [
	("remote",		ctypes.POINTER(_GRemoteActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),
	("parameter",		ctypes.POINTER(_GVariant)),
	("platform_data",		ctypes.POINTER(_GVariant)),] )

g_remote_action_group_change_action_state_full = _rpythonic_function_(		"g_remote_action_group_change_action_state_full", ctypes.c_void_p, [
	("remote",		ctypes.POINTER(_GRemoteActionGroup)),
	("action_name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(_GVariant)),
	("platform_data",		ctypes.POINTER(_GVariant)),] )

is_mutable = _rpythonic_function_(		"is_mutable", ctypes.c_int, [
	("model",		ctypes.POINTER(_GMenuModel)),] )

get_n_items = _rpythonic_function_(		"get_n_items", ctypes.c_int, [
	("model",		ctypes.POINTER(_GMenuModel)),] )

get_item_attributes = _rpythonic_function_(		"get_item_attributes", ctypes.c_void_p, [
	("model",		ctypes.POINTER(_GMenuModel)),
	("item_index",		ctypes.c_int),
	("attributes",		ctypes.POINTER(ctypes.POINTER(_GHashTable))),] )

iterate_item_attributes = _rpythonic_function_(		"iterate_item_attributes", ctypes.POINTER(_GMenuAttributeIter), [
	("model",		ctypes.POINTER(_GMenuModel)),
	("item_index",		ctypes.c_int),] )

get_item_attribute_value = _rpythonic_function_(		"get_item_attribute_value", ctypes.POINTER(_GVariant), [
	("model",		ctypes.POINTER(_GMenuModel)),
	("item_index",		ctypes.c_int),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("expected_type",		ctypes.POINTER(_GVariantType)),] )

get_item_links = _rpythonic_function_(		"get_item_links", ctypes.c_void_p, [
	("model",		ctypes.POINTER(_GMenuModel)),
	("item_index",		ctypes.c_int),
	("links",		ctypes.POINTER(ctypes.POINTER(_GHashTable))),] )

iterate_item_links = _rpythonic_function_(		"iterate_item_links", ctypes.POINTER(_GMenuLinkIter), [
	("model",		ctypes.POINTER(_GMenuModel)),
	("item_index",		ctypes.c_int),] )

get_item_link = _rpythonic_function_(		"get_item_link", ctypes.POINTER(_GMenuModel), [
	("model",		ctypes.POINTER(_GMenuModel)),
	("item_index",		ctypes.c_int),
	("link",		ctypes.POINTER(ctypes.c_char)),] )

g_menu_model_get_type = _rpythonic_function_(		"g_menu_model_get_type", ctypes.c_ulong, [] )

g_menu_model_is_mutable = _rpythonic_function_(		"g_menu_model_is_mutable", ctypes.c_int, [
	("model",		ctypes.POINTER(_GMenuModel)),] )

g_menu_model_get_n_items = _rpythonic_function_(		"g_menu_model_get_n_items", ctypes.c_int, [
	("model",		ctypes.POINTER(_GMenuModel)),] )

g_menu_model_iterate_item_attributes = _rpythonic_function_(		"g_menu_model_iterate_item_attributes", ctypes.POINTER(_GMenuAttributeIter), [
	("model",		ctypes.POINTER(_GMenuModel)),
	("item_index",		ctypes.c_int),] )

g_menu_model_get_item_attribute_value = _rpythonic_function_(		"g_menu_model_get_item_attribute_value", ctypes.POINTER(_GVariant), [
	("model",		ctypes.POINTER(_GMenuModel)),
	("item_index",		ctypes.c_int),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("expected_type",		ctypes.POINTER(_GVariantType)),] )

g_menu_model_iterate_item_links = _rpythonic_function_(		"g_menu_model_iterate_item_links", ctypes.POINTER(_GMenuLinkIter), [
	("model",		ctypes.POINTER(_GMenuModel)),
	("item_index",		ctypes.c_int),] )

g_menu_model_get_item_link = _rpythonic_function_(		"g_menu_model_get_item_link", ctypes.POINTER(_GMenuModel), [
	("model",		ctypes.POINTER(_GMenuModel)),
	("item_index",		ctypes.c_int),
	("link",		ctypes.POINTER(ctypes.c_char)),] )

g_menu_model_items_changed = _rpythonic_function_(		"g_menu_model_items_changed", ctypes.c_void_p, [
	("model",		ctypes.POINTER(_GMenuModel)),
	("position",		ctypes.c_int),
	("removed",		ctypes.c_int),
	("added",		ctypes.c_int),] )

get_next = _rpythonic_function_(		"get_next", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GMenuAttributeIter)),
	("out_type",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("value",		ctypes.POINTER(ctypes.POINTER(_GVariant))),] )

g_menu_attribute_iter_get_type = _rpythonic_function_(		"g_menu_attribute_iter_get_type", ctypes.c_ulong, [] )

g_menu_attribute_iter_get_next = _rpythonic_function_(		"g_menu_attribute_iter_get_next", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GMenuAttributeIter)),
	("out_name",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("value",		ctypes.POINTER(ctypes.POINTER(_GVariant))),] )

g_menu_attribute_iter_next = _rpythonic_function_(		"g_menu_attribute_iter_next", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GMenuAttributeIter)),] )

g_menu_attribute_iter_get_name = _rpythonic_function_(		"g_menu_attribute_iter_get_name", ctypes.POINTER(ctypes.c_char), [
	("iter",		ctypes.POINTER(_GMenuAttributeIter)),] )

g_menu_attribute_iter_get_value = _rpythonic_function_(		"g_menu_attribute_iter_get_value", ctypes.POINTER(_GVariant), [
	("iter",		ctypes.POINTER(_GMenuAttributeIter)),] )

g_menu_link_iter_get_type = _rpythonic_function_(		"g_menu_link_iter_get_type", ctypes.c_ulong, [] )

g_menu_link_iter_get_next = _rpythonic_function_(		"g_menu_link_iter_get_next", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GMenuLinkIter)),
	("out_link",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("value",		ctypes.POINTER(ctypes.POINTER(_GMenuModel))),] )

g_menu_link_iter_next = _rpythonic_function_(		"g_menu_link_iter_next", ctypes.c_int, [
	("iter",		ctypes.POINTER(_GMenuLinkIter)),] )

g_menu_link_iter_get_name = _rpythonic_function_(		"g_menu_link_iter_get_name", ctypes.POINTER(ctypes.c_char), [
	("iter",		ctypes.POINTER(_GMenuLinkIter)),] )

g_menu_link_iter_get_value = _rpythonic_function_(		"g_menu_link_iter_get_value", ctypes.POINTER(_GMenuModel), [
	("iter",		ctypes.POINTER(_GMenuLinkIter)),] )

g_menu_get_type = _rpythonic_function_(		"g_menu_get_type", ctypes.c_ulong, [] )

g_menu_new = _rpythonic_function_(		"g_menu_new", ctypes.POINTER(_GMenu), [] )

g_menu_freeze = _rpythonic_function_(		"g_menu_freeze", ctypes.c_void_p, [
	("menu",		ctypes.POINTER(_GMenu)),] )

g_menu_insert_item = _rpythonic_function_(		"g_menu_insert_item", ctypes.c_void_p, [
	("menu",		ctypes.POINTER(_GMenu)),
	("position",		ctypes.c_int),
	("item",		ctypes.POINTER(_GMenuItem)),] )

g_menu_prepend_item = _rpythonic_function_(		"g_menu_prepend_item", ctypes.c_void_p, [
	("menu",		ctypes.POINTER(_GMenu)),
	("item",		ctypes.POINTER(_GMenuItem)),] )

g_menu_append_item = _rpythonic_function_(		"g_menu_append_item", ctypes.c_void_p, [
	("menu",		ctypes.POINTER(_GMenu)),
	("item",		ctypes.POINTER(_GMenuItem)),] )

g_menu_remove = _rpythonic_function_(		"g_menu_remove", ctypes.c_void_p, [
	("menu",		ctypes.POINTER(_GMenu)),
	("position",		ctypes.c_int),] )

g_menu_insert = _rpythonic_function_(		"g_menu_insert", ctypes.c_void_p, [
	("menu",		ctypes.POINTER(_GMenu)),
	("position",		ctypes.c_int),
	("label",		ctypes.POINTER(ctypes.c_char)),
	("detailed_action",		ctypes.POINTER(ctypes.c_char)),] )

g_menu_prepend = _rpythonic_function_(		"g_menu_prepend", ctypes.c_void_p, [
	("menu",		ctypes.POINTER(_GMenu)),
	("label",		ctypes.POINTER(ctypes.c_char)),
	("detailed_action",		ctypes.POINTER(ctypes.c_char)),] )

g_menu_append = _rpythonic_function_(		"g_menu_append", ctypes.c_void_p, [
	("menu",		ctypes.POINTER(_GMenu)),
	("label",		ctypes.POINTER(ctypes.c_char)),
	("detailed_action",		ctypes.POINTER(ctypes.c_char)),] )

g_menu_insert_section = _rpythonic_function_(		"g_menu_insert_section", ctypes.c_void_p, [
	("menu",		ctypes.POINTER(_GMenu)),
	("position",		ctypes.c_int),
	("label",		ctypes.POINTER(ctypes.c_char)),
	("section",		ctypes.POINTER(_GMenuModel)),] )

g_menu_prepend_section = _rpythonic_function_(		"g_menu_prepend_section", ctypes.c_void_p, [
	("menu",		ctypes.POINTER(_GMenu)),
	("label",		ctypes.POINTER(ctypes.c_char)),
	("section",		ctypes.POINTER(_GMenuModel)),] )

g_menu_append_section = _rpythonic_function_(		"g_menu_append_section", ctypes.c_void_p, [
	("menu",		ctypes.POINTER(_GMenu)),
	("label",		ctypes.POINTER(ctypes.c_char)),
	("section",		ctypes.POINTER(_GMenuModel)),] )

g_menu_insert_submenu = _rpythonic_function_(		"g_menu_insert_submenu", ctypes.c_void_p, [
	("menu",		ctypes.POINTER(_GMenu)),
	("position",		ctypes.c_int),
	("label",		ctypes.POINTER(ctypes.c_char)),
	("submenu",		ctypes.POINTER(_GMenuModel)),] )

g_menu_prepend_submenu = _rpythonic_function_(		"g_menu_prepend_submenu", ctypes.c_void_p, [
	("menu",		ctypes.POINTER(_GMenu)),
	("label",		ctypes.POINTER(ctypes.c_char)),
	("submenu",		ctypes.POINTER(_GMenuModel)),] )

g_menu_append_submenu = _rpythonic_function_(		"g_menu_append_submenu", ctypes.c_void_p, [
	("menu",		ctypes.POINTER(_GMenu)),
	("label",		ctypes.POINTER(ctypes.c_char)),
	("submenu",		ctypes.POINTER(_GMenuModel)),] )

g_menu_item_get_type = _rpythonic_function_(		"g_menu_item_get_type", ctypes.c_ulong, [] )

g_menu_item_new = _rpythonic_function_(		"g_menu_item_new", ctypes.POINTER(_GMenuItem), [
	("label",		ctypes.POINTER(ctypes.c_char)),
	("detailed_action",		ctypes.POINTER(ctypes.c_char)),] )

g_menu_item_new_submenu = _rpythonic_function_(		"g_menu_item_new_submenu", ctypes.POINTER(_GMenuItem), [
	("label",		ctypes.POINTER(ctypes.c_char)),
	("submenu",		ctypes.POINTER(_GMenuModel)),] )

g_menu_item_new_section = _rpythonic_function_(		"g_menu_item_new_section", ctypes.POINTER(_GMenuItem), [
	("label",		ctypes.POINTER(ctypes.c_char)),
	("section",		ctypes.POINTER(_GMenuModel)),] )

g_menu_item_set_attribute_value = _rpythonic_function_(		"g_menu_item_set_attribute_value", ctypes.c_void_p, [
	("menu_item",		ctypes.POINTER(_GMenuItem)),
	("attribute",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(_GVariant)),] )

g_menu_item_set_link = _rpythonic_function_(		"g_menu_item_set_link", ctypes.c_void_p, [
	("menu_item",		ctypes.POINTER(_GMenuItem)),
	("link",		ctypes.POINTER(ctypes.c_char)),
	("model",		ctypes.POINTER(_GMenuModel)),] )

g_menu_item_set_label = _rpythonic_function_(		"g_menu_item_set_label", ctypes.c_void_p, [
	("menu_item",		ctypes.POINTER(_GMenuItem)),
	("label",		ctypes.POINTER(ctypes.c_char)),] )

g_menu_item_set_submenu = _rpythonic_function_(		"g_menu_item_set_submenu", ctypes.c_void_p, [
	("menu_item",		ctypes.POINTER(_GMenuItem)),
	("submenu",		ctypes.POINTER(_GMenuModel)),] )

g_menu_item_set_section = _rpythonic_function_(		"g_menu_item_set_section", ctypes.c_void_p, [
	("menu_item",		ctypes.POINTER(_GMenuItem)),
	("section",		ctypes.POINTER(_GMenuModel)),] )

g_menu_item_set_action_and_target_value = _rpythonic_function_(		"g_menu_item_set_action_and_target_value", ctypes.c_void_p, [
	("menu_item",		ctypes.POINTER(_GMenuItem)),
	("action",		ctypes.POINTER(ctypes.c_char)),
	("target_value",		ctypes.POINTER(_GVariant)),] )

g_menu_item_set_detailed_action = _rpythonic_function_(		"g_menu_item_set_detailed_action", ctypes.c_void_p, [
	("menu_item",		ctypes.POINTER(_GMenuItem)),
	("detailed_action",		ctypes.POINTER(ctypes.c_char)),] )

g_dbus_connection_export_menu_model = _rpythonic_function_(		"g_dbus_connection_export_menu_model", ctypes.c_uint, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),
	("menu",		ctypes.POINTER(_GMenuModel)),
	("error",		ctypes.POINTER(ctypes.POINTER(_GError))),] )

g_dbus_connection_unexport_menu_model = _rpythonic_function_(		"g_dbus_connection_unexport_menu_model", ctypes.c_void_p, [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("export_id",		ctypes.c_uint),] )

g_dbus_menu_model_get_type = _rpythonic_function_(		"g_dbus_menu_model_get_type", ctypes.c_ulong, [] )

g_dbus_menu_model_get = _rpythonic_function_(		"g_dbus_menu_model_get", ctypes.POINTER(_GDBusMenuModel), [
	("connection",		ctypes.POINTER(_GDBusConnection)),
	("bus_name",		ctypes.POINTER(ctypes.c_char)),
	("object_path",		ctypes.POINTER(ctypes.c_char)),] )


_rpythonic_convert_structs_to_objects()

class _nice_callback_args_container_(object):
	'''	(required for pypy)
	wraps args in an object because pypy ctypes creates a weakref to wrap pyobject
	'''
	def __init__(self,args): self.args = args

class _nice_callback_(object):
	def __del__(self): pass		# for some reason this holds a reference to self
	def __init__(self, widget, func, args):
		import inspect
		self.widget = widget
		self.function = func
		self.args = args
		argspec = inspect.getargspec( func )
		self.num_c_args = len(argspec.args)
		self.num_user_args = len(args)

		n = len(argspec.args) - len(args)
		if not inspect.ismethod( func ): n += 1		# if not a bound-method
		self.cfunc_prototype = ctypes.CFUNCTYPE( ctypes.c_void_p, *([ctypes.c_void_p]*n) )
		g_signal_connect_data.change_argument_type( 'c_handler', self.cfunc_prototype )	# ugly workaround

		self.cfunc = self.cfunc_prototype( self.call )

		self.wrapped_args = _nice_callback_args_container_( args )
		userdata = ctypes.pointer( ctypes.py_object(self.wrapped_args) )
		self.userdata = userdata


	def call(self, *args):
		a = [ self.widget ]	# the first argument is always the widget the signal is attached to
		for i,arg in enumerate(args):
			if i == len(args)-1:
				ptr = ctypes.cast( arg, ctypes.POINTER(ctypes.py_object) )
				w = ptr.contents.value
				a += list(w.args)
			elif i:
				a.append( arg )
		self.function( *a )
		return 0	# pypy complains if None is returned


def connect( ptr, name, func, *args ):
	wrapper = _nice_callback_( ptr.pyobject, func, args )
	return g_signal_connect_data( ptr, name, wrapper.cfunc, wrapper.userdata )


################## Charp to Python String ###############
_GLIB_RETURNS_CHARP_ = (
	g_variant_type_peek_string,
	g_variant_get_string,
	g_value_get_string,
)

for func in _GLIB_RETURNS_CHARP_:
	func.return_wrapper = lambda pointer=None: _CHARP2STRING(pointer)


_RETURNS_CHARP_ = (
	g_settings_get_string,
	g_checksum_get_string,
	g_hmac_get_string,
	g_key_file_get_string,
	g_match_info_get_string,
	g_param_spec_get_name,

	g_param_spec_get_nick,
	g_param_spec_get_blurb,
	g_action_get_name,
	g_app_info_get_name,
	g_app_info_get_display_name,
	g_app_info_get_description,
	g_app_info_get_executable,
	g_app_info_get_commandline,

	g_dbus_proxy_get_name,
	g_dbus_proxy_get_name_owner,
	g_dbus_proxy_get_object_path,
	g_dbus_proxy_get_interface_name,
	g_drive_get_name,

	g_file_info_get_content_type,
	g_file_info_get_name,
	g_file_info_get_display_name,
	g_file_info_get_edit_name,
	g_io_extension_get_name,
	g_mount_get_name,
	g_volume_get_name,

	g_dbus_object_manager_client_get_name,
	g_dbus_object_manager_client_get_name_owner,

	g_menu_attribute_iter_get_name,
	g_menu_link_iter_get_name,
)

for func in _RETURNS_CHARP_:
	func.return_wrapper = lambda pointer=None: _CHARP2STRING(pointer)


_rpythonic_setup_return_wrappers()
_rpythonic_make_nice_global_enums_()
_rpythonic_clean_up_missing_functions_()
_rpythonic_strip_prefixes_(['g_', 'G_'])