## generated by RPythonic 0.4.4
## http://code.google.com/p/rpythonic/
import os, sys, ctypes, inspect
__os = os
__sys = sys
__inspect = inspect

IS32BIT = (ctypes.sizeof(ctypes.c_void_p)==4)
PYTHON_RESERVED_KEYWORDS = 'for while in as global with try except lambda return raise if else elif eval exec and not or break continue finally print yield del def class assert from is pass'.split()

## try to load precompiled c-libraries from this directory, if the library is not there try to load from the system.
_clibs_dir = os.path.dirname(os.path.abspath(__file__))

def _load_ctypes_lib( name ):
	if __os.name == 'posix':
		if __sys.platform=='linux2':
			if not name.endswith('.so'): name += '.so'
			if not name.startswith('lib'): name = 'lib' + name

			if IS32BIT: 	path = __os.path.join(_clibs_dir,'linux32')
			else: 		path = __os.path.join(_clibs_dir,'linux64')
			url = __os.path.join( path, name )
			if __os.path.isfile( url ): return ctypes.CDLL(url)
			elif __os.path.isfile( '/usr/local/lib/%s'%name ): return ctypes.CDLL('/usr/local/lib/%s'%name)
			elif __os.path.isfile( '/usr/local/lib64/%s'%name ) and not IS32BIT: return ctypes.CDLL('/usr/local/lib64/%s'%name)
			elif __os.path.isfile( '/usr/lib/%s'%name ): return ctypes.CDLL('/usr/lib/%s'%name)
			elif __os.path.isfile( './%s'%name ): return ctypes.CDLL('./%s'%name)
			else:	# fallback
				try: return ctypes.CDLL(name)
				except: return ctypes.CDLL('')

		elif sys.platform == 'darwin':
			name += '.dylib'
			if IS32BIT: 	path = os.path.join(_clibs_dir,'osx32')
			else: 		path = os.path.join(_clibs_dir,'osx64')
			url = os.path.join( path, name )
			if os.path.isfile( url ): return ctypes.CDLL(url)
			else: return ctypes.CDLL(name) #fallback

	elif os.name == 'nt':
		name += '.dll'
		if IS32BIT: 	path = os.path.join(_clibs_dir,'win32')
		else: 		path = os.path.join(_clibs_dir,'win64')
		url = os.path.join( path, name )
		if os.path.isfile( url ): return ctypes.CDLL(url)
		else: return ctypes.CDLL(name) #fallback

RPYTHONIC_WRAPPER_FUNCTIONS = {}
RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES = []
RPYTHONIC_AUTOPREFIX_IGNORE = []

## ctypes does not clearly expose these types ##
PyCFuncPtrType = type(ctypes.CFUNCTYPE(ctypes.c_void_p))
PyCArrayType = type( ctypes.c_int * 2 )
PyCPointerType = type( ctypes.POINTER(ctypes.c_int) )
PyCStructType = type( ctypes.Structure )
CArgObject = type( ctypes.byref(ctypes.c_int()) )

class _rpythonic_meta_(object):
	'''
	Reserved Attributes:
		POINTER
		CSTRUCT
		CAST
	'''
	_rpythonic_ = True		# workaround for now, must have a way to know if object is a meta from another module, isinstance(o,_rpythonic_meta_) will fail in those cases. another workaround could be check sys.modules for other rpythonic modules and fetch _rpythonic_meta_ from there.
	def __init__(self, *args, **kw ):							# cheap trick, abuse **kw, and look for "pointer", "cast"
		if kw and 'pointer' not in kw: raise SyntaxError	# sorry, you can not init with keywords
		elif kw and 'pointer' in kw:
			if 'cast' in kw and kw['cast']:
				self.POINTER = ctypes.cast( kw['pointer'], ctypes.POINTER(self.CSTRUCT) )
			else: self.POINTER = kw['pointer']
		else: self.POINTER = ctypes.pointer( self.CSTRUCT(*args) )
		self.POINTER.pyobject = self	# .pyobject is local to this pointer "object"

	def __getattr__(self,name):
		if hasattr( self.POINTER.contents, name ):
			return getattr( self.POINTER.contents, name )

		else:	# when rpythonic failed to generate good bindings - these lookups should be cached
			for parent in self._rpythonic_parent_classes_:
				if hasattr( parent, name ):
					method = getattr( parent, name )	# should check if it really is an unbound method
					func = parent._rpythonic_unbound_lookup_[ method ]
					n = func.name
					if len(func.argnames) > 1:
						argnames = func.argnames[ 1 : ]
						a = ',' + '=None,'.join( argnames ) + '=None'
						b = ','.join( argnames )
					else: a = b = ''
					lamb = eval( 'lambda self %s: %s( self.POINTER, %s )' %(a,n,b) )
					setattr( self.__class__, name, lamb )
					#return lamb	# this would return the unbound lambda, must call getattr again
					return getattr( self, name )

			## last resort, load from global name space ##
			G = globals()
			if name in G: return lambda *args: G[name](self.POINTER, *args)
			else:
				for prefix in self._autoprefix_:
					n = prefix + name
					if n in G: return lambda *args: G[n](self.POINTER, *args)
				print( 'possible auto-prefixes available', self._autoprefix_ )
				raise AttributeError

	def __call__(self, type=False):
		print('calling object is DEPRECATED - use ob.POINTER or ob.CSTRUCT')
		if type: return self.CSTRUCT
		else: return self.POINTER


def _rpythonic_generate_subclass_( name, struct, functions ):
	head = 'class %s( _rpythonic_meta_ ):' %name
	body = [ 
		'_rpythonic_parent_classes_ = []' ,
		'_rpythonic_unbound_lookup_ = {}' 
	]

	names = [ func.name for func in functions ]

	possibles = {}
	rank = []		# rank by longest name
	if len(names) > 3000: print('too many functions to use this hack')
	else:
		for n1 in names:
			prefix = ''
			for i,char in enumerate(n1):
				prefix += char
				if prefix not in possibles:
					possibles[ prefix ] = 0
					for n2 in names:
						if n2.startswith( prefix ):
							possibles[ prefix ] += 1

					if not rank or len(prefix) > len(rank[-1]) and possibles[prefix] > len(names)/4:
						rank.append( prefix )

	top = []
	while rank:
		best = rank.pop()
		if possibles[best] > len(functions)/2 and best not in names:
			if best.endswith('_set_') or best.endswith('_get_'): best = best[ : -4 ]
			elif best.endswith('Set') or best.endswith('Get'): best = best[ : -3 ]

			rem = []
			for other in rank:
				if best.startswith(other): rem.append( other )
			for r in rem: rank.remove( r )

			if best not in top: top.append( best )

		if len(top) > 3: break

	for n in names:		# find shortest prefixes #
		prefix = ''
		for i,char in enumerate(n):		# cammelCase
			if i==0: prefix += char; continue
			if char.isupper() and len(prefix) >= 2: break
			prefix += char
		if prefix and prefix != n and len(prefix) >= 2:
			hits = 0
			for other in names:
				if other.startswith( prefix ): hits += 1
			if hits >= 2 and prefix not in top:
				top.append( prefix )
				if len(top) >= 6: break

	## setup full names
	for func in functions:
		n = func.name
		if len(func.argnames) > 1:
			argnames = func.argnames[ 1 : ]
			a = ',' + '=None,'.join( argnames ) + '=None'
			b = ','.join( argnames )
		else: a = b = ''

		fhead = 'def %s( self %s ):' %(n,a)
		fbody = ['return %s(self.POINTER, %s)' %(func.name,b)]
		g = fhead + '\n\t\t' + '\n\t\t'.join( fbody )
		body.append( g )
		#body.append( '%s._rpythonic_function_ = %s' %(func.name, func.name) )

	## setup short names ##
	for n in names:
		for prefix in top:
			if n.startswith(prefix) and n[len(prefix):] not in names:
				alt = n[ len(prefix) : ]
				if alt and alt != n and alt not in PYTHON_RESERVED_KEYWORDS and not alt.isdigit() and not alt[0].isdigit():
					body.append( '%s = %s' %(alt,n) )
					names.append( alt )

	gen = head + '\n\t' + '\n\t'.join( body )
	try: exec( gen )
	except:
		print( gen )
		raise SyntaxError

	klass = locals()[name]
	klass.CSTRUCT = struct	# ctypes struct class

	klass._autoprefix_ = top
	for func in functions:
		unbound = getattr( klass, func.name )
		klass._rpythonic_unbound_lookup_[ unbound ] = func
		# klass.longname is klass.shortname = False
		# klass.longname == klass.shortname = True
	return klass

def _rpythonic_convert_structs_to_objects():
	G = globals()
	for klass in _OOAPI_:
		altname = name = klass.__name__
		prefix = ''
		for i,char in enumerate(name):
			if i==0: prefix += char; continue
			if char.isupper(): break
			prefix += char
		if prefix and prefix != name:
			hits = 0
			for other in _OOAPI_:
				if other is not klass:
					if other.__name__.startswith( prefix ): hits += 1
			if hits >= 2:
				altname = name[ len(prefix) : ]

		funcs = _OOAPI_[ klass ]
		newklass = _rpythonic_generate_subclass_( altname, klass, funcs )
		klass._rpythonic_wrapper_class_ = newklass
		G[ name ] = newklass	# replace struct with wrapper
		if altname not in G: G[ altname ] = newklass	# safely define with nicer name
		elif altname != name: # odd cases, maybe a function that returns the object, almost never happens.
			print('WARN - not replacing something with struct wrapper:', G[altname] )


def _rpythonic_setup_return_wrappers():
	R = _rpythonic_function_
	for klass in _OOAPI_:
		if klass in _OOAPI_RETURNS_OBJECT_:
			for f in _OOAPI_RETURNS_OBJECT_[klass]:
				f.object_oriented = True
				if not f.return_wrapper:	# just in case the ctypes footer defines it
					f.return_wrapper = klass._rpythonic_wrapper_class_

def _rpythonic_function_( name, result=ctypes.c_void_p, args=[]):
	mname = '_metafunc_%s' %name
	exec( 'class %s( _rpythonic_metafunc_ ): pass' %mname )
	k = locals()[mname]
	return k( name, result, args )

_OOAPI_ = {}
_OOAPI_RETURNS_OBJECT_ = {}

class _rpythonic_metafunc_(object):
	def __init__(self, name, result=ctypes.c_void_p, args=[]):
		self.name = name
		self.result = result
		self.argtypes = []		# can dynamically change CFUNCTYPE trick
		self.argnames = []
		self.argtypestypes = []
		for i,arg in enumerate(args):
			n,t = arg
			if n in PYTHON_RESERVED_KEYWORDS: n = 'C_'+n
			if n in self.argnames: n = '%s%s' %(n,i)
			self.argnames.append( n )
			self.argtypes.append( t )
			self.argtypestypes.append( type(t) )		# precomputed for speed

		self.argnames = tuple( self.argnames )				# should never change
		self.numargs = len( self.argtypes )
		self.callbacks = [None] * self.numargs
		self.return_wrapper = None
		self.object_oriented = False
		self.function = None
		try:
			func = self.function = getattr(CTYPES_DLL, self.name )
			RPYTHONIC_WRAPPER_FUNCTIONS[ name ] = self
		except:
			RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES.append( name )
		if self.function: self.reset()

	def change_argument_type( self, name, t ):
		idx = self.argnames.index( name )
		self.argtypes[ idx ] = t
		self.argtypestypes[ idx ] = type(t)
		self.function.argtypes = self.argtypes

	def reset(self):
		if self.argnames:
			a = ',' + '=None,'.join( self.argnames ) + '=None'
			b = ','.join( self.argnames )
		else: a = b = ''

		callmeth = eval( 'lambda self %s: self._call_( %s )' %(a,b) )
		setattr( self.__class__, '__call__', callmeth )

		self.function.restype = self.result
		self.function.argtypes = self.argtypes

		if type( self.result ) is PyCPointerType and type(self.result._type_) is PyCStructType:
			klass = self.result._type_
			if klass not in _OOAPI_RETURNS_OBJECT_: _OOAPI_RETURNS_OBJECT_[klass] = []
			_OOAPI_RETURNS_OBJECT_[klass].append( self )

		self.defaults = []
		for i in range( self.numargs ):
			T = self.argtypes[ i ]
			if type(T) is PyCFuncPtrType:
				p = T()	# func pointers can not be None
				self.defaults.append( p )
				self.callbacks[ i ] = p					# save reference
			elif T in (ctypes.c_int, ctypes.c_uint, ctypes.c_long, ctypes.c_ulong):
				self.defaults.append( 0 )
			elif T in (ctypes.c_float, ctypes.c_double):
				self.defaults.append( .0 )
			else: self.defaults.append( None )	# None is allowed for all other types

			## generate OO API ##
			if i == 0 and type(T) is PyCPointerType and type(T._type_) is PyCStructType:
				klass = T._type_
				if klass not in _OOAPI_: _OOAPI_[ klass ] = []
				_OOAPI_[ klass ].append( self )

	def _call_( self, *args ):			# allow flexible calling types
		cargs = list( self.defaults )
		for i,arg in enumerate(args):
			if isinstance( arg, _rpythonic_meta_ ): arg = arg.POINTER
			elif hasattr( arg, '_rpythonic_' ): arg = arg.POINTER		# workaround - instance from another module

			t = type(arg)
			k = self.argtypes[ i ]
			kt = self.argtypestypes[ i ]
			if arg is None and cargs[i] is not None:	# use user defaults, very rare cases
				continue

			elif t is bool and k is ctypes.c_int:
				if arg: cargs[i] = 1	#ctypes.c_int(1)
				else: cargs[i] = 0	#ctypes.c_int(0)

			elif t in (list,tuple):				# convert lists and tuples into array
				if kt is PyCArrayType:
					cargs[ i ] = k(*arg)
				elif kt is PyCStructType:
					if k._array_wrapper_: cargs[ i ] = k(arg)	# allow easy array init
					else: cargs[ i ] = k(*arg)							# allow multiple args
				elif kt is PyCPointerType:
					cargs[ i ] = _convert_nested_list_to_pointer( k, arg )
				else: assert 0

			elif isinstance( arg, ctypes._Pointer ) and t is not k and kt is PyCPointerType:
				cargs[ i ] = ctypes.cast( arg, k )		# generic's that need to be cast

			elif kt is PyCStructType and isinstance( arg, ctypes._Pointer ):
				cargs[ i ] = arg.contents	# fixed may25

			elif kt is PyCPointerType and not isinstance( arg, (ctypes._Pointer,CArgObject) ):
				if t in (int,float,bool): ptr = k( k._type_(arg) )
				elif t is str:
					arg = arg.encode('utf-8')
					#ptr = k( k._type_() )								# not k() otherwise null pointer error
					#for j, char in enumerate(arg): ptr[ j ] = char		# not correct - missing null byte?
					ptr = ctypes.create_string_buffer(arg)				# correct and pypy compatible
				elif t in (PyCStructType, PyCArrayType):
					ptr = ctypes.cast( ctypes.pointer( arg ), k )
				else:
					ptr = arg	# TODO print warning?
				cargs[ i ] = ptr

			elif kt is PyCFuncPtrType:
				if t.__name__ == 'CFunctionType': cargs[ i ] = arg		# assume outside holds pointer
				else:													# this is not safe #
					cargs[ i ] = self.callbacks[ i ] = k( arg )				# assume arg is a callable
			else:
				cargs[ i ] = arg		# directly pass

		## if you define your own return_wrapper, it must take keyword "pointer"
		if self.return_wrapper: return self.return_wrapper( pointer=self.function( *cargs ) )
		else: return self.function( *cargs )



def _convert_nested_list_to_pointer( k, arg ):
	depth = 0; s = k
	while True:
		if type(s) is PyCPointerType:
			s = getattr( s, '_type_' )
			depth += 1
		else: break
	assert depth and depth <= 2
	if depth == 1:
		T = k._type_
		ptr = k( k._type_() )
		for i in range( len(arg) ):
			ptr[ i ] = T( *arg[i] )
	elif depth == 2:
		T = k._type_._type_
		_ptr = k._type_( k._type_._type_() )
		for i in range(len( arg )):
			for j in range( len(arg[i]) ):
				_ptr[ j ] = T( *arg[ i ][ j ] )
		ptr = k( _ptr )
	return ptr


def __freeze_rpythonic_struct( cls, fields ):
	if cls not in _OOAPI_: _OOAPI_[ cls ] = []	# wrap all structs
	try: setattr( cls, '_fields_', fields )
	except:
		print( 'WARN - bad order struct freeze', cls )
		#cls._fields_ = []

class _rpythonic_struct_( ctypes.Structure ):
	_array_wrapper_ = False
	_fields_ = []
	_methods_ = {}
	#def __call__(self): return self
	def __init__(self, *args, **kw ):
		cargs = []
		argtypes = []
		for a in self._fields_: argtypes.append( a[1] )
		if len(args) > len(argtypes): args = [args]	# allow both calling conventions
		for i,arg in enumerate( args ):
			if isinstance( arg, _rpythonic_meta_ ): arg = arg.POINTER

			t = type(arg)
			k = argtypes[ i ]
			if t in (list,tuple):
				if k.__class__.__name__	== 'PyCArrayType':
					cargs.append( k(*arg) )
				elif k.__class__.__name__ == 'PyCStructType':
					if k._array_wrapper_: cargs.append( k(arg) )	# allow easy array init
					else: cargs.append( k(*arg) )							# allow multiple args
			elif isinstance( arg, ctypes._Pointer ) and t is not k:
				cargs[ i ] = ctypes.cast( arg, k )	# generic's that need to be cast
			elif k.__class__.__name__ == 'PyCArrayType' and t in (float,int,bool):
				cargs.append( k(arg) )		# support init array from single value
			else:
				cargs.append( arg )		# directly pass

		ctypes.Structure.__init__(self, *cargs, **kw)


def _rpythonic_make_nice_global_enums_():
	G = globals()
	for name in RPYTHONIC_GLOBAL_ENUMS:
		if '_' in name and name.index('_') <= 4:
			altname = name[ name.index('_') + 1 : ]
			if altname not in G:
				G[altname] = RPYTHONIC_GLOBAL_ENUMS[ name ]

def _rpythonic_clean_up_missing_functions_():
	G = globals()
	for f in RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES:
		G.pop( f )
	print( "C functions loaded: %s" %len(RPYTHONIC_WRAPPER_FUNCTIONS) )
	print( "C functions failed: %s" %len(RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES) )



###### NEW API #########
CTYPES_DLL = None

class _VOID_POINTER_CONTAINER_(object):
	def __init__(self, ptr, name=None):
		self._pointer_ = ptr
		self.name = name
NULL = _VOID_POINTER_CONTAINER_(None,'<null pointer>')


class meta:	# NEW API - allow run time switch from ctypes to rffi
	'''
	Methods:
		RPython will not allow object wrapper around a method (__call__ not allowed)
		keep C function names in list "__cfunctions__"
		rpythonic.enable_rffi( classA, classB )	
		can take advantage of methods in object-method-wrapper,
		generate rffi wrapper and set method on classA, etc.
		replaces object-method-wrapper with rffi-method

	Properties:
		CPython: obj.x=1
		RPython: obj.set_x(1)	
	'''
	METAS = []
	def __init__(self, constructors=[], methods={}, properties={}):
		global CTYPES_DLL
		if not CTYPES_DLL:
			CTYPES_DLL = _load_ctypes_lib( _clib_name_ )

		self.constructors = constructors
		self.methods = methods
		self.properties = properties
		self.METAS.append( self )



	def __call__(self, cls ):
		print('@meta', cls )

		if not self.constructors:
			lamb = lambda s, _explicit_pointer_=None: setattr(s,'_pointer_',getattr(_explicit_pointer_,'_pointer_')) if hasattr(_explicit_pointer_,'_pointer_') else setattr(s,'_pointer_',_explicit_pointer_)
			lamb._debug = '(no constructor)'
			setattr( cls, '__init__', lamb )
		else:
			con = self._find_best_function( self.constructors )
			cfunc = self._build_cfunc( con )
			setattr( cls, '_%s'%con['name'], cfunc )
			g = self._gen_init( con )
			setattr( cls, '__init__', g )
		
		## set methods ##
		for name in self.methods:
			meth = self.methods[ name ]
			cfuncs = []
			for m in meth['functions']:
				cfunc = self._build_cfunc( m, method=True, static=meth['static'] )
				self._setup_return( cfunc, meth )
				setattr( cls, '_%s'%m['name'], cfunc )
				cfuncs.append( cfunc )

			f = self._find_best_function( meth['functions'] )
			g = self._gen_method( meth, f )
			g._cfuncs = cfuncs
			if meth['static']: g = classmethod( g )
			setattr( cls, name, g )

		for name in self.properties:
			print( 'property:', name )
			p = []
			for f in self.properties[name]:
				cfunc = self._build_cfunc( f )
				setattr( cls, '_%s'%f['name'], cfunc )
				g = self._gen_method( f, f )
				p.append( g )

			setattr( cls, name, property(*p) )

		return cls


	@staticmethod
	def _build_cfunc( info, method=False, static=False ):
		cfunc = getattr(CTYPES_DLL, info['name'])
		if method and not static: argtypes = [ ctypes.c_void_p ]
		else: argtypes = []
		for p in info['parameters']: argtypes.append( eval(p['ctypes_type']) )
		cfunc.argtypes = argtypes
		return cfunc

	@staticmethod
	def _setup_return( cfunc, info ):
		if not info['returns_fundamental']:
			cfunc.restype = ctypes.c_void_p
		elif info['returns_fundamental']:
			cfunc.restype = eval( info['returns_ctypes'] )
		else:
			cfunc.restype = ctypes.c_void_p

	@staticmethod
	def _gen_prepare_args( m ):
		a = []; b = []
		for i,p in enumerate(m['parameters']):
			if 'name' in p: n = p['name']
			else: n = '_unnamed_%s' %i
			if '<' in n: n = '_TODOfixme_%s' %i
			if n in PYTHON_RESERVED_KEYWORDS: n += str(i)
			if p['fundamental']:
				b.append( n )
				s = p['raw_type'].split()
				if 'default' in p:
					d = p['default']
					if p['raw_type'] in ('float', 'double'):
						if d.endswith('f'): d = d[:-1]
						d = d.replace(' ', '.')
						if 'e' in d: d = 0.0
						try: d = float(d)
						except: d = 0.0
					elif ('int' in s or 'size_t' in s) and not d.isdigit(): d = 0
					elif 'char' in s and '"' not in d: d = '""'
					elif d.lower() == 'false': d = False
					elif d.lower() == 'true': d = True
				elif 'char' in s: d = '""'
				elif 'float' in s or 'double' in s: d = 0.0
				elif 'size_t' in s or 'int' in s or 'long' in s or 'short' in s: d = 0
				elif p['raw_type'] == 'bool': d = False
				elif p['raw_type'] in ('void', '(template)'): d = 'NULL'
				else: print( p )
				a.append( n+'=%s' %d )

			else:
				b.append( '%s._pointer_'%n )
				a.append( n+'=NULL' )
		return a, b

	@staticmethod
	def _gen_init( m ):
		a, b = meta._gen_prepare_args( m )
		if a: e = 'lambda _py_self_, %s, _explicit_pointer_=None: ' %(','.join(a))
		else: e = 'lambda _py_self_, _explicit_pointer_=None: '
		e += 'setattr(_py_self_, "_pointer_", _py_self_._%s(%s))' %( m['name'], ','.join(b) )
		e += ' if not _explicit_pointer_ else '
		e += 'setattr(_py_self_, "_pointer_", _explicit_pointer_)'
		print( e )
		lamb = eval( e ); lamb._debug = e; lamb._introspect = m
		return lamb

	@staticmethod
	def _find_best_function( funcs ):
		best = funcs[0]
		score = -1
		if len(funcs) > 1:
			for f in funcs:
				hits = 0
				for p in f['parameters']:
					if p['fundamental']: hits += 1
				if hits and hits == len( f['parameters'] ):
					if hits > score:
						score = hits
						best = f
		return best

	@staticmethod
	def _gen_method( m, f ):
		a, b = meta._gen_prepare_args( f )
		if a: e = 'lambda _py_self_, %s: ' %(','.join(a))
		else: e = 'lambda _py_self_: '

		if 'static' in m and m['static']:	# static in c++ is like a classmethod
			c = '_py_self_._%s( %s )' %( f['name'], ','.join(b) )
		else:
			c = '_py_self_._%s( _py_self_._pointer_, %s )' %( f['name'], ','.join(b) )

		if not m['returns_fundamental']:
			if 'returns_unknown' in m or '<' in m['returns']: c = '_VOID_POINTER_CONTAINER_( %s, name="%s" )' %(c,m['returns'])
			else:
				something = m['returns'].replace('::', '.')
				c = '%s( _explicit_pointer_=%s )' %(something, c)

		e += c; lamb = eval( e )
		lamb._debug = e; lamb._introspect = f
		return lamb


	META_FUNCTIONS = []
	@classmethod
	def function( self, info ):
		print('@meta.function', info['name'] )
		global CTYPES_DLL
		if not CTYPES_DLL:
			CTYPES_DLL = _load_ctypes_lib( _clib_name_ )

		cfunc = self._build_cfunc( info, method=False, static=True )
		setattr( meta, '_%s'%info['name'], cfunc )
		self._setup_return( cfunc, info )
		a, b = meta._gen_prepare_args( info )
		e = 'lambda %s: ' %(','.join(a))
		c = 'meta._%s( %s )' %( info['name'], ','.join(b) )

		if not info['returns_fundamental']:
			if 'returns_unknown' in info or '<' in info['returns']:
				c = '_VOID_POINTER_CONTAINER_( %s, name="%s" )' %(c,info['returns'])
			else:
				something = info['returns'].replace('::', '.')
				c = '%s( _explicit_pointer_=%s )' %(something, c)
		e += c
		lamb = eval( e )
		lamb._debug = e
		lamb._introspect = info
		return lamb



def _rpythonic_strip_prefixes_( prefixes ):
	G = globals()
	names = list(G.keys())	# ensure list in py3
	for name in names:
		for prefix in prefixes:
			if name.startswith( prefix ):
				newname = name[ len(prefix) : ]
				if newname and newname not in G:
					G[ newname ] = G[ name ]






_clib_name_ = 'libfluidsynth'
print('loading lib', _clib_name_)
print( os.path.abspath( os.path.curdir ) )
CTYPES_DLL = _load_ctypes_lib( _clib_name_ )
assert CTYPES_DLL
print( CTYPES_DLL._name )

## macro globals ##
## enums ##
fluid_midi_channel_type = { 
	"CHANNEL_TYPE_MELODIC" : 0, 
	"CHANNEL_TYPE_DRUM" : 1, 
}

fluid_types_enum = { 
	"FLUID_NO_TYPE" : -1, 
	"FLUID_NUM_TYPE" : 0, 
	"FLUID_INT_TYPE" : 1, 
	"FLUID_STR_TYPE" : 2, 
	"FLUID_SET_TYPE" : 3, 
}

fluid_chorus_mod = { 
	"FLUID_CHORUS_MOD_SINE" : 0, 
	"FLUID_CHORUS_MOD_TRIANGLE" : 1, 
}

fluid_interp = { 
	"FLUID_INTERP_NONE" : 0, 
	"FLUID_INTERP_LINEAR" : 1, 
	"FLUID_INTERP_4THORDER" : 4, 
	"FLUID_INTERP_7THORDER" : 7, 
}

fluid_seq_event_type = { 
	"FLUID_SEQ_NOTE" : 0, 
	"FLUID_SEQ_NOTEON" : 1, 
	"FLUID_SEQ_NOTEOFF" : 2, 
	"FLUID_SEQ_ALLSOUNDSOFF" : 3, 
	"FLUID_SEQ_ALLNOTESOFF" : 4, 
	"FLUID_SEQ_BANKSELECT" : 5, 
	"FLUID_SEQ_PROGRAMCHANGE" : 6, 
	"FLUID_SEQ_PROGRAMSELECT" : 7, 
	"FLUID_SEQ_PITCHBEND" : 8, 
	"FLUID_SEQ_PITCHWHEELSENS" : 9, 
	"FLUID_SEQ_MODULATION" : 10, 
	"FLUID_SEQ_SUSTAIN" : 11, 
	"FLUID_SEQ_CONTROLCHANGE" : 12, 
	"FLUID_SEQ_PAN" : 13, 
	"FLUID_SEQ_VOLUME" : 14, 
	"FLUID_SEQ_REVERBSEND" : 15, 
	"FLUID_SEQ_CHORUSSEND" : 16, 
	"FLUID_SEQ_TIMER" : 17, 
	"FLUID_SEQ_ANYCONTROLCHANGE" : 18, 
	"FLUID_SEQ_CHANNELPRESSURE" : 19, 
	"FLUID_SEQ_SYSTEMRESET" : 20, 
	"FLUID_SEQ_UNREGISTERING" : 21, 
	"FLUID_SEQ_LASTEVENT" : 22, 
}

FLUID_MIDI_ROUTER_RULE_NOTE = 0 
FLUID_MIDI_ROUTER_RULE_CC = 1 
FLUID_MIDI_ROUTER_RULE_PROG_CHANGE = 2 
FLUID_MIDI_ROUTER_RULE_PITCH_BEND = 3 
FLUID_MIDI_ROUTER_RULE_CHANNEL_PRESSURE = 4 
FLUID_MIDI_ROUTER_RULE_KEY_PRESSURE = 5 
FLUID_MIDI_ROUTER_RULE_COUNT = 6 

FLUID_PRESET_SELECTED = 0 
FLUID_PRESET_UNSELECTED = 1 
FLUID_SAMPLE_DONE = 2 

fluid_mod_flags = { 
	"FLUID_MOD_POSITIVE" : 0, 
	"FLUID_MOD_NEGATIVE" : 1, 
	"FLUID_MOD_UNIPOLAR" : 0, 
	"FLUID_MOD_BIPOLAR" : 2, 
	"FLUID_MOD_LINEAR" : 0, 
	"FLUID_MOD_CONCAVE" : 4, 
	"FLUID_MOD_CONVEX" : 8, 
	"FLUID_MOD_SWITCH" : 12, 
	"FLUID_MOD_GC" : 0, 
	"FLUID_MOD_CC" : 16, 
}

fluid_mod_src = { 
	"FLUID_MOD_NONE" : 0, 
	"FLUID_MOD_VELOCITY" : 2, 
	"FLUID_MOD_KEY" : 3, 
	"FLUID_MOD_KEYPRESSURE" : 10, 
	"FLUID_MOD_CHANNELPRESSURE" : 13, 
	"FLUID_MOD_PITCHWHEEL" : 14, 
	"FLUID_MOD_PITCHWHEELSENS" : 16, 
}

fluid_log_level = { 
	"FLUID_PANIC" : 0, 
	"FLUID_ERR" : 1, 
	"FLUID_WARN" : 2, 
	"FLUID_INFO" : 3, 
	"FLUID_DBG" : 4, 
	"LAST_LOG_LEVEL" : 5, 
}

fluid_player_status = { 
	"FLUID_PLAYER_READY" : 0, 
	"FLUID_PLAYER_PLAYING" : 1, 
	"FLUID_PLAYER_DONE" : 2, 
}

fluid_gen_type = { 
	"GEN_STARTADDROFS" : 0, 
	"GEN_ENDADDROFS" : 1, 
	"GEN_STARTLOOPADDROFS" : 2, 
	"GEN_ENDLOOPADDROFS" : 3, 
	"GEN_STARTADDRCOARSEOFS" : 4, 
	"GEN_MODLFOTOPITCH" : 5, 
	"GEN_VIBLFOTOPITCH" : 6, 
	"GEN_MODENVTOPITCH" : 7, 
	"GEN_FILTERFC" : 8, 
	"GEN_FILTERQ" : 9, 
	"GEN_MODLFOTOFILTERFC" : 10, 
	"GEN_MODENVTOFILTERFC" : 11, 
	"GEN_ENDADDRCOARSEOFS" : 12, 
	"GEN_MODLFOTOVOL" : 13, 
	"GEN_UNUSED1" : 14, 
	"GEN_CHORUSSEND" : 15, 
	"GEN_REVERBSEND" : 16, 
	"GEN_PAN" : 17, 
	"GEN_UNUSED2" : 18, 
	"GEN_UNUSED3" : 19, 
	"GEN_UNUSED4" : 20, 
	"GEN_MODLFODELAY" : 21, 
	"GEN_MODLFOFREQ" : 22, 
	"GEN_VIBLFODELAY" : 23, 
	"GEN_VIBLFOFREQ" : 24, 
	"GEN_MODENVDELAY" : 25, 
	"GEN_MODENVATTACK" : 26, 
	"GEN_MODENVHOLD" : 27, 
	"GEN_MODENVDECAY" : 28, 
	"GEN_MODENVSUSTAIN" : 29, 
	"GEN_MODENVRELEASE" : 30, 
	"GEN_KEYTOMODENVHOLD" : 31, 
	"GEN_KEYTOMODENVDECAY" : 32, 
	"GEN_VOLENVDELAY" : 33, 
	"GEN_VOLENVATTACK" : 34, 
	"GEN_VOLENVHOLD" : 35, 
	"GEN_VOLENVDECAY" : 36, 
	"GEN_VOLENVSUSTAIN" : 37, 
	"GEN_VOLENVRELEASE" : 38, 
	"GEN_KEYTOVOLENVHOLD" : 39, 
	"GEN_KEYTOVOLENVDECAY" : 40, 
	"GEN_INSTRUMENT" : 41, 
	"GEN_RESERVED1" : 42, 
	"GEN_KEYRANGE" : 43, 
	"GEN_VELRANGE" : 44, 
	"GEN_STARTLOOPADDRCOARSEOFS" : 45, 
	"GEN_KEYNUM" : 46, 
	"GEN_VELOCITY" : 47, 
	"GEN_ATTENUATION" : 48, 
	"GEN_RESERVED2" : 49, 
	"GEN_ENDLOOPADDRCOARSEOFS" : 50, 
	"GEN_COARSETUNE" : 51, 
	"GEN_FINETUNE" : 52, 
	"GEN_SAMPLEID" : 53, 
	"GEN_SAMPLEMODE" : 54, 
	"GEN_RESERVED3" : 55, 
	"GEN_SCALETUNE" : 56, 
	"GEN_EXCLUSIVECLASS" : 57, 
	"GEN_OVERRIDEROOTKEY" : 58, 
	"GEN_PITCH" : 59, 
	"GEN_LAST" : 60, 
}

fluid_gen_flags = { 
	"GEN_UNUSED" : 0, 
	"GEN_SET" : 1, 
	"GEN_ABS_NRPN" : 2, 
}

fluid_voice_add_mod = { 
	"FLUID_VOICE_OVERWRITE" : 0, 
	"FLUID_VOICE_ADD" : 1, 
	"FLUID_VOICE_DEFAULT" : 2, 
}

_codecvt_result = { 
	"__codecvt_ok" : 0, 
	"__codecvt_partial" : 1, 
	"__codecvt_error" : 2, 
	"__codecvt_noconv" : 3, 
}

## simple enums ##
RPYTHONIC_GLOBAL_ENUMS = { 
 "FLUID_MIDI_ROUTER_RULE_NOTE" : 0,  "FLUID_MIDI_ROUTER_RULE_CC" : 1,  "FLUID_MIDI_ROUTER_RULE_PROG_CHANGE" : 2,  "FLUID_MIDI_ROUTER_RULE_PITCH_BEND" : 3,  "FLUID_MIDI_ROUTER_RULE_CHANNEL_PRESSURE" : 4,  "FLUID_MIDI_ROUTER_RULE_KEY_PRESSURE" : 5,  "FLUID_MIDI_ROUTER_RULE_COUNT" : 6, 
 "FLUID_PRESET_SELECTED" : 0,  "FLUID_PRESET_UNSELECTED" : 1,  "FLUID_SAMPLE_DONE" : 2, 

}
class __fsid_t(_rpythonic_struct_): _array_wrapper_ = True
class __mbstate_t(_rpythonic_struct_): pass
class __value(ctypes.Union): pass
class _G_fpos_t(_rpythonic_struct_): pass
class _G_fpos64_t(_rpythonic_struct_): pass
class _IO_jump_t(_rpythonic_struct_): pass
class _IO_marker(_rpythonic_struct_): pass
class _IO_FILE(_rpythonic_struct_): _array_wrapper_ = True
class _IO_FILE_plus(_rpythonic_struct_): pass
class _fluid_hashtable_t(_rpythonic_struct_): pass
class _fluid_synth_t(_rpythonic_struct_): pass
class _fluid_voice_t(_rpythonic_struct_): pass
class _fluid_audio_driver_t(_rpythonic_struct_): pass
class _fluid_file_renderer_t(_rpythonic_struct_): pass
class _fluid_player_t(_rpythonic_struct_): pass
class _fluid_midi_event_t(_rpythonic_struct_): pass
class _fluid_midi_driver_t(_rpythonic_struct_): pass
class _fluid_midi_router_t(_rpythonic_struct_): pass
class _fluid_midi_router_rule_t(_rpythonic_struct_): pass
class _fluid_shell_t(_rpythonic_struct_): pass
class _fluid_server_t(_rpythonic_struct_): pass
class _fluid_event_t(_rpythonic_struct_): pass
class _fluid_sequencer_t(_rpythonic_struct_): pass
class _fluid_ramsfont_t(_rpythonic_struct_): pass
class _fluid_rampreset_t(_rpythonic_struct_): pass
class _fluid_synth_channel_info_t(_rpythonic_struct_): _array_wrapper_ = True
class fluid_cmd_t(_rpythonic_struct_): pass
class _fluid_sfloader_t(_rpythonic_struct_): pass
class _fluid_sfont_t(_rpythonic_struct_): pass
class _fluid_preset_t(_rpythonic_struct_): pass
class _fluid_sample_t(_rpythonic_struct_): _array_wrapper_ = True
class _fluid_mod_t(_rpythonic_struct_): pass
class _fluid_gen_t(_rpythonic_struct_): pass
## union and structures ##
__freeze_rpythonic_struct( __fsid_t, [
	( "__val", ( ctypes.c_int * 2 ) ),
])

__freeze_rpythonic_struct( __value, [
	( "__wch", ctypes.c_uint ),
	( "__wchb", ( ctypes.c_char * 4 ) ),
])

__freeze_rpythonic_struct( __mbstate_t, [
	( "__count", ctypes.c_int ),
	( "__value", __value ),
])

__freeze_rpythonic_struct( _G_fpos_t, [
	( "__pos", ctypes.c_int64 ),
	( "__state", __mbstate_t ),
])

__freeze_rpythonic_struct( _G_fpos64_t, [
	( "__pos", ctypes.c_longlong ),
	( "__state", __mbstate_t ),
])

__freeze_rpythonic_struct( _IO_jump_t, [
])

__freeze_rpythonic_struct( _IO_marker, [
	( "_next", ctypes.POINTER(_IO_marker) ),
	( "_sbuf", ctypes.POINTER(_IO_FILE) ),
	( "_pos", ctypes.c_int ),
])

__freeze_rpythonic_struct( _IO_FILE, [
	( "_flags", ctypes.c_int ),
	( "_IO_read_ptr", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_read_end", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_read_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_write_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_write_ptr", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_write_end", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_buf_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_buf_end", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_save_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_backup_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_save_end", ctypes.POINTER(ctypes.c_char) ),
	( "_markers", ctypes.POINTER(_IO_marker) ),
	( "_chain", ctypes.POINTER(_IO_FILE) ),
	( "_fileno", ctypes.c_int ),
	( "_flags2", ctypes.c_int ),
	( "_old_offset", ctypes.c_int64 ),
	( "_cur_column", ctypes.c_ushort ),
	( "_vtable_offset", ctypes.c_char ),
	( "_shortbuf", ( ctypes.c_char * 1 ) ),
	( "_lock", ctypes.POINTER(ctypes.c_void_p) ),
	( "_offset", ctypes.c_longlong ),
	( "__pad1", ctypes.POINTER(ctypes.c_void_p) ),
	( "__pad2", ctypes.POINTER(ctypes.c_void_p) ),
	( "__pad3", ctypes.POINTER(ctypes.c_void_p) ),
	( "__pad4", ctypes.POINTER(ctypes.c_void_p) ),
	( "__pad5", ctypes.c_uint ),
	( "_mode", ctypes.c_int ),
	( "_unused2", ctypes.c_char ),
])

__freeze_rpythonic_struct( _IO_FILE_plus, [
])

__freeze_rpythonic_struct( _fluid_hashtable_t, [
])

__freeze_rpythonic_struct( _fluid_synth_t, [
])

__freeze_rpythonic_struct( _fluid_voice_t, [
])

__freeze_rpythonic_struct( _fluid_audio_driver_t, [
])

__freeze_rpythonic_struct( _fluid_file_renderer_t, [
])

__freeze_rpythonic_struct( _fluid_player_t, [
])

__freeze_rpythonic_struct( _fluid_midi_event_t, [
])

__freeze_rpythonic_struct( _fluid_midi_driver_t, [
])

__freeze_rpythonic_struct( _fluid_midi_router_t, [
])

__freeze_rpythonic_struct( _fluid_midi_router_rule_t, [
])

__freeze_rpythonic_struct( _fluid_shell_t, [
])

__freeze_rpythonic_struct( _fluid_server_t, [
])

__freeze_rpythonic_struct( _fluid_event_t, [
])

__freeze_rpythonic_struct( _fluid_sequencer_t, [
])

__freeze_rpythonic_struct( _fluid_ramsfont_t, [
])

__freeze_rpythonic_struct( _fluid_rampreset_t, [
])

__freeze_rpythonic_struct( _fluid_synth_channel_info_t, [
	( "assigned", ctypes.c_int ),
	( "sfont_id", ctypes.c_int ),
	( "bank", ctypes.c_int ),
	( "program", ctypes.c_int ),
	( "name", ( ctypes.c_char * 32 ) ),
	( "reserved", ( ctypes.c_char * 32 ) ),
])

__freeze_rpythonic_struct( fluid_cmd_t, [
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "topic", ctypes.POINTER(ctypes.c_char) ),
	( "handler", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.c_int,ctypes.POINTER(ctypes.POINTER(ctypes.c_char)),ctypes.c_int,) ),
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
	( "help", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( _fluid_sfloader_t, [
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
	( "free", ctypes.c_void_p ),
	( "load", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _fluid_sfont_t, [
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
	( "C_id", ctypes.c_uint ),
	( "free", ctypes.c_void_p ),
	( "get_name", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_preset", ctypes.POINTER(ctypes.c_void_p) ),
	( "iteration_start", ctypes.c_void_p ),
	( "iteration_next", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _fluid_preset_t, [
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
	( "sfont", ctypes.POINTER(_fluid_sfont_t) ),
	( "free", ctypes.c_void_p ),
	( "get_name", ctypes.POINTER(ctypes.c_void_p) ),
	( "get_banknum", ctypes.c_void_p ),
	( "get_num", ctypes.c_void_p ),
	( "noteon", ctypes.c_void_p ),
	( "notify", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( _fluid_sample_t, [
	( "name", ( ctypes.c_char * 21 ) ),
	( "start", ctypes.c_uint ),
	( "end", ctypes.c_uint ),
	( "loopstart", ctypes.c_uint ),
	( "loopend", ctypes.c_uint ),
	( "samplerate", ctypes.c_uint ),
	( "origpitch", ctypes.c_int ),
	( "pitchadj", ctypes.c_int ),
	( "sampletype", ctypes.c_int ),
	( "valid", ctypes.c_int ),
	( "data", ctypes.POINTER(ctypes.c_short) ),
	( "amplitude_that_reaches_noise_floor_is_valid", ctypes.c_int ),
	( "amplitude_that_reaches_noise_floor", ctypes.c_double ),
	( "refcount", ctypes.c_uint ),
	( "notify", ctypes.c_void_p ),
	( "userdata", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _fluid_mod_t, [
	( "dest", ctypes.c_ubyte ),
	( "src1", ctypes.c_ubyte ),
	( "flags1", ctypes.c_ubyte ),
	( "src2", ctypes.c_ubyte ),
	( "flags2", ctypes.c_ubyte ),
	( "amount", ctypes.c_double ),
	( "next", ctypes.POINTER(_fluid_mod_t) ),
])

__freeze_rpythonic_struct( _fluid_gen_t, [
	( "flags", ctypes.c_ubyte ),
	( "val", ctypes.c_double ),
	( "mod", ctypes.c_double ),
	( "nrpn", ctypes.c_double ),
])

## wrapper functions ##
fluid_synth_cc = _rpythonic_function_(		"fluid_synth_cc", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("chan",		ctypes.c_int),
	("ctrl",		ctypes.c_int),
	("val",		ctypes.c_int),] )

fluid_synth_pitch_bend = _rpythonic_function_(		"fluid_synth_pitch_bend", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("chan",		ctypes.c_int),
	("val",		ctypes.c_int),] )

fluid_synth_noteoff = _rpythonic_function_(		"fluid_synth_noteoff", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("chan",		ctypes.c_int),
	("key",		ctypes.c_int),] )

fluid_synth_sysex = _rpythonic_function_(		"fluid_synth_sysex", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("data",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),
	("response",		ctypes.POINTER(ctypes.c_char)),
	("response_len",		ctypes.POINTER(ctypes.c_int)),
	("handled",		ctypes.POINTER(ctypes.c_int)),
	("dryrun",		ctypes.c_int),] )

fluid_synth_get_pitch_bend = _rpythonic_function_(		"fluid_synth_get_pitch_bend", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("chan",		ctypes.c_int),
	("ppitch_bend",		ctypes.POINTER(ctypes.c_int)),] )

fluid_synth_get_cc = _rpythonic_function_(		"fluid_synth_get_cc", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("chan",		ctypes.c_int),
	("ctrl",		ctypes.c_int),
	("pval",		ctypes.POINTER(ctypes.c_int)),] )

fluid_synth_program_select_by_sfont_name = _rpythonic_function_(		"fluid_synth_program_select_by_sfont_name", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("chan",		ctypes.c_int),
	("sfont_name",		ctypes.POINTER(ctypes.c_char)),
	("bank_num",		ctypes.c_uint),
	("preset_num",		ctypes.c_uint),] )

fluid_synth_get_program = _rpythonic_function_(		"fluid_synth_get_program", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("chan",		ctypes.c_int),
	("sfont_id",		ctypes.POINTER(ctypes.c_uint)),
	("bank_num",		ctypes.POINTER(ctypes.c_uint)),
	("preset_num",		ctypes.POINTER(ctypes.c_uint)),] )

fluid_synth_unset_program = _rpythonic_function_(		"fluid_synth_unset_program", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("chan",		ctypes.c_int),] )

fluid_synth_get_channel_info = _rpythonic_function_(		"fluid_synth_get_channel_info", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("chan",		ctypes.c_int),
	("info",		ctypes.POINTER(_fluid_synth_channel_info_t)),] )

fluid_synth_program_reset = _rpythonic_function_(		"fluid_synth_program_reset", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),] )

fluid_synth_system_reset = _rpythonic_function_(		"fluid_synth_system_reset", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),] )

fluid_synth_all_notes_off = _rpythonic_function_(		"fluid_synth_all_notes_off", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("chan",		ctypes.c_int),] )

fluid_synth_all_sounds_off = _rpythonic_function_(		"fluid_synth_all_sounds_off", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("chan",		ctypes.c_int),] )

fluid_synth_set_channel_type = _rpythonic_function_(		"fluid_synth_set_channel_type", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("chan",		ctypes.c_int),
	("C_type",		ctypes.c_int),] )

fluid_synth_get_channel_preset = _rpythonic_function_(		"fluid_synth_get_channel_preset", ctypes.POINTER(_fluid_preset_t), [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("chan",		ctypes.c_int),] )

fluid_synth_start = _rpythonic_function_(		"fluid_synth_start", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("C_id",		ctypes.c_uint),
	("preset",		ctypes.POINTER(_fluid_preset_t)),
	("audio_chan",		ctypes.c_int),
	("midi_chan",		ctypes.c_int),
	("key",		ctypes.c_int),
	("vel",		ctypes.c_int),] )

fluid_synth_stop = _rpythonic_function_(		"fluid_synth_stop", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("C_id",		ctypes.c_uint),] )

fluid_synth_sfload = _rpythonic_function_(		"fluid_synth_sfload", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("reset_presets",		ctypes.c_int),] )

fluid_synth_sfreload = _rpythonic_function_(		"fluid_synth_sfreload", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("C_id",		ctypes.c_uint),] )

feof_unlocked = _rpythonic_function_(		"feof_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

perror = _rpythonic_function_(		"perror", ctypes.c_void_p, [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

flockfile = _rpythonic_function_(		"flockfile", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

popen = _rpythonic_function_(		"popen", ctypes.POINTER(_IO_FILE), [
	("__command",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

ctermid = _rpythonic_function_(		"ctermid", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

fileno = _rpythonic_function_(		"fileno", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ftrylockfile = _rpythonic_function_(		"ftrylockfile", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ferror_unlocked = _rpythonic_function_(		"ferror_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fileno_unlocked = _rpythonic_function_(		"fileno_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

pclose = _rpythonic_function_(		"pclose", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

new_fluid_settings = _rpythonic_function_(		"new_fluid_settings", ctypes.POINTER(_fluid_hashtable_t), [] )

funlockfile = _rpythonic_function_(		"funlockfile", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fluid_synth_noteon = _rpythonic_function_(		"fluid_synth_noteon", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("chan",		ctypes.c_int),
	("key",		ctypes.c_int),
	("vel",		ctypes.c_int),] )

fluid_synth_get_settings = _rpythonic_function_(		"fluid_synth_get_settings", ctypes.POINTER(_fluid_hashtable_t), [
	("synth",		ctypes.POINTER(_fluid_synth_t)),] )

new_fluid_synth = _rpythonic_function_(		"new_fluid_synth", ctypes.POINTER(_fluid_synth_t), [
	("settings",		ctypes.POINTER(_fluid_hashtable_t)),] )

delete_fluid_synth = _rpythonic_function_(		"delete_fluid_synth", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),] )

fluid_settings_option_concat = _rpythonic_function_(		"fluid_settings_option_concat", ctypes.POINTER(ctypes.c_char), [
	("settings",		ctypes.POINTER(_fluid_hashtable_t)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("separator",		ctypes.POINTER(ctypes.c_char)),] )

fluid_settings_foreach = _rpythonic_function_(		"fluid_settings_foreach", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_fluid_hashtable_t)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),ctypes.c_int,)),] )

fluid_settings_foreach_t = _rpythonic_function_(		"fluid_settings_foreach_t", ctypes.c_void_p, [
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("C_type",		ctypes.c_int),] )

fluid_synth_pitch_wheel_sens = _rpythonic_function_(		"fluid_synth_pitch_wheel_sens", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("chan",		ctypes.c_int),
	("val",		ctypes.c_int),] )

fluid_synth_get_pitch_wheel_sens = _rpythonic_function_(		"fluid_synth_get_pitch_wheel_sens", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("chan",		ctypes.c_int),
	("pval",		ctypes.POINTER(ctypes.c_int)),] )

fluid_synth_program_change = _rpythonic_function_(		"fluid_synth_program_change", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("chan",		ctypes.c_int),
	("program",		ctypes.c_int),] )

fluid_synth_channel_pressure = _rpythonic_function_(		"fluid_synth_channel_pressure", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("chan",		ctypes.c_int),
	("val",		ctypes.c_int),] )

fluid_synth_bank_select = _rpythonic_function_(		"fluid_synth_bank_select", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("chan",		ctypes.c_int),
	("bank",		ctypes.c_uint),] )

fluid_synth_sfont_select = _rpythonic_function_(		"fluid_synth_sfont_select", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("chan",		ctypes.c_int),
	("sfont_id",		ctypes.c_uint),] )

fluid_synth_program_select = _rpythonic_function_(		"fluid_synth_program_select", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("chan",		ctypes.c_int),
	("sfont_id",		ctypes.c_uint),
	("bank_num",		ctypes.c_uint),
	("preset_num",		ctypes.c_uint),] )

clearerr = _rpythonic_function_(		"clearerr", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ftello = _rpythonic_function_(		"ftello", ctypes.c_int64, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fseeko = _rpythonic_function_(		"fseeko", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__off",		ctypes.c_int64),
	("__whence",		ctypes.c_int),] )

feof = _rpythonic_function_(		"feof", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ftell = _rpythonic_function_(		"ftell", ctypes.c_int64, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ferror = _rpythonic_function_(		"ferror", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fsetpos = _rpythonic_function_(		"fsetpos", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__pos",		ctypes.POINTER(_G_fpos_t)),] )

clearerr_unlocked = _rpythonic_function_(		"clearerr_unlocked", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fgetpos = _rpythonic_function_(		"fgetpos", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__pos",		ctypes.POINTER(_G_fpos_t)),] )

rewind = _rpythonic_function_(		"rewind", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fluid_settings_getnum_default = _rpythonic_function_(		"fluid_settings_getnum_default", ctypes.c_double, [
	("settings",		ctypes.POINTER(_fluid_hashtable_t)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

fluid_settings_getnum = _rpythonic_function_(		"fluid_settings_getnum", ctypes.c_int, [
	("settings",		ctypes.POINTER(_fluid_hashtable_t)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("val",		ctypes.POINTER(ctypes.c_double)),] )

fluid_settings_getstr_default = _rpythonic_function_(		"fluid_settings_getstr_default", ctypes.POINTER(ctypes.c_char), [
	("settings",		ctypes.POINTER(_fluid_hashtable_t)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

fluid_settings_str_equal = _rpythonic_function_(		"fluid_settings_str_equal", ctypes.c_int, [
	("settings",		ctypes.POINTER(_fluid_hashtable_t)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

fluid_settings_getnum_range = _rpythonic_function_(		"fluid_settings_getnum_range", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_fluid_hashtable_t)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("min",		ctypes.POINTER(ctypes.c_double)),
	("max",		ctypes.POINTER(ctypes.c_double)),] )

fluid_settings_setnum = _rpythonic_function_(		"fluid_settings_setnum", ctypes.c_int, [
	("settings",		ctypes.POINTER(_fluid_hashtable_t)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("val",		ctypes.c_double),] )

fluid_settings_setint = _rpythonic_function_(		"fluid_settings_setint", ctypes.c_int, [
	("settings",		ctypes.POINTER(_fluid_hashtable_t)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("val",		ctypes.c_int),] )

fluid_settings_foreach_option = _rpythonic_function_(		"fluid_settings_foreach_option", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_fluid_hashtable_t)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),)),] )

fluid_settings_option_count = _rpythonic_function_(		"fluid_settings_option_count", ctypes.c_int, [
	("settings",		ctypes.POINTER(_fluid_hashtable_t)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

fluid_settings_getint_default = _rpythonic_function_(		"fluid_settings_getint_default", ctypes.c_int, [
	("settings",		ctypes.POINTER(_fluid_hashtable_t)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

fluid_settings_foreach_option_t = _rpythonic_function_(		"fluid_settings_foreach_option_t", ctypes.c_void_p, [
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("option",		ctypes.POINTER(ctypes.c_char)),] )

fluid_settings_getint = _rpythonic_function_(		"fluid_settings_getint", ctypes.c_int, [
	("settings",		ctypes.POINTER(_fluid_hashtable_t)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("val",		ctypes.POINTER(ctypes.c_int)),] )

fluid_settings_getint_range = _rpythonic_function_(		"fluid_settings_getint_range", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_fluid_hashtable_t)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("min",		ctypes.POINTER(ctypes.c_int)),
	("max",		ctypes.POINTER(ctypes.c_int)),] )

fread_unlocked = _rpythonic_function_(		"fread_unlocked", ctypes.c_uint, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint),
	("__n",		ctypes.c_uint),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fwrite = _rpythonic_function_(		"fwrite", ctypes.c_uint, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint),
	("__n",		ctypes.c_uint),
	("__s",		ctypes.POINTER(_IO_FILE)),] )

puts = _rpythonic_function_(		"puts", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

fwrite_unlocked = _rpythonic_function_(		"fwrite_unlocked", ctypes.c_uint, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint),
	("__n",		ctypes.c_uint),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fread = _rpythonic_function_(		"fread", ctypes.c_uint, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint),
	("__n",		ctypes.c_uint),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fseek = _rpythonic_function_(		"fseek", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__off",		ctypes.c_int64),
	("__whence",		ctypes.c_int),] )

ungetc = _rpythonic_function_(		"ungetc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fluid_settings_dupstr = _rpythonic_function_(		"fluid_settings_dupstr", ctypes.c_int, [
	("settings",		ctypes.POINTER(_fluid_hashtable_t)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("C_str",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

fluid_settings_setstr = _rpythonic_function_(		"fluid_settings_setstr", ctypes.c_int, [
	("settings",		ctypes.POINTER(_fluid_hashtable_t)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

delete_fluid_settings = _rpythonic_function_(		"delete_fluid_settings", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_fluid_hashtable_t)),] )

fluid_settings_getstr = _rpythonic_function_(		"fluid_settings_getstr", ctypes.c_int, [
	("settings",		ctypes.POINTER(_fluid_hashtable_t)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("C_str",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

fluid_settings_copystr = _rpythonic_function_(		"fluid_settings_copystr", ctypes.c_int, [
	("settings",		ctypes.POINTER(_fluid_hashtable_t)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

fluid_settings_get_hints = _rpythonic_function_(		"fluid_settings_get_hints", ctypes.c_int, [
	("settings",		ctypes.POINTER(_fluid_hashtable_t)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

fluid_settings_get_type = _rpythonic_function_(		"fluid_settings_get_type", ctypes.c_int, [
	("settings",		ctypes.POINTER(_fluid_hashtable_t)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

fluid_settings_is_realtime = _rpythonic_function_(		"fluid_settings_is_realtime", ctypes.c_int, [
	("settings",		ctypes.POINTER(_fluid_hashtable_t)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

fluid_synth_get_reverb_width = _rpythonic_function_(		"fluid_synth_get_reverb_width", ctypes.c_double, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),] )

fluid_synth_set_chorus = _rpythonic_function_(		"fluid_synth_set_chorus", ctypes.c_void_p, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("nr",		ctypes.c_int),
	("level",		ctypes.c_double),
	("speed",		ctypes.c_double),
	("depth_ms",		ctypes.c_double),
	("C_type",		ctypes.c_int),] )

fluid_synth_set_reverb = _rpythonic_function_(		"fluid_synth_set_reverb", ctypes.c_void_p, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("roomsize",		ctypes.c_double),
	("damping",		ctypes.c_double),
	("width",		ctypes.c_double),
	("level",		ctypes.c_double),] )

fluid_synth_get_bank_offset = _rpythonic_function_(		"fluid_synth_get_bank_offset", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("sfont_id",		ctypes.c_int),] )

fluid_synth_set_reverb_on = _rpythonic_function_(		"fluid_synth_set_reverb_on", ctypes.c_void_p, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("on",		ctypes.c_int),] )

fluid_synth_get_reverb_level = _rpythonic_function_(		"fluid_synth_get_reverb_level", ctypes.c_double, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),] )

fluid_synth_get_reverb_damp = _rpythonic_function_(		"fluid_synth_get_reverb_damp", ctypes.c_double, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),] )

fluid_synth_get_reverb_roomsize = _rpythonic_function_(		"fluid_synth_get_reverb_roomsize", ctypes.c_double, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),] )

fluid_synth_start_voice = _rpythonic_function_(		"fluid_synth_start_voice", ctypes.c_void_p, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("voice",		ctypes.POINTER(_fluid_voice_t)),] )

fluid_synth_get_voicelist = _rpythonic_function_(		"fluid_synth_get_voicelist", ctypes.c_void_p, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("buf",		ctypes.POINTER(_fluid_voice_t)),
	("bufsize",		ctypes.c_int),
	("ID",		ctypes.c_int),] )

fluid_synth_handle_midi_event = _rpythonic_function_(		"fluid_synth_handle_midi_event", ctypes.c_int, [
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("event",		ctypes.POINTER(_fluid_midi_event_t)),] )

fluid_synth_set_midi_router = _rpythonic_function_(		"fluid_synth_set_midi_router", ctypes.c_void_p, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("router",		ctypes.POINTER(_fluid_midi_router_t)),] )

fluid_synth_alloc_voice = _rpythonic_function_(		"fluid_synth_alloc_voice", ctypes.POINTER(_fluid_voice_t), [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("sample",		ctypes.POINTER(_fluid_sample_t)),
	("channum",		ctypes.c_int),
	("key",		ctypes.c_int),
	("vel",		ctypes.c_int),] )

fluid_get_stdin = _rpythonic_function_(		"fluid_get_stdin", ctypes.c_int, [] )

fluid_get_stdout = _rpythonic_function_(		"fluid_get_stdout", ctypes.c_int, [] )

fluid_get_userconf = _rpythonic_function_(		"fluid_get_userconf", ctypes.POINTER(ctypes.c_char), [
	("buf",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

fluid_synth_get_polyphony = _rpythonic_function_(		"fluid_synth_get_polyphony", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),] )

fluid_synth_set_polyphony = _rpythonic_function_(		"fluid_synth_set_polyphony", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("polyphony",		ctypes.c_int),] )

fluid_synth_get_gain = _rpythonic_function_(		"fluid_synth_get_gain", ctypes.c_float, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),] )

fluid_synth_set_gen2 = _rpythonic_function_(		"fluid_synth_set_gen2", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("chan",		ctypes.c_int),
	("param",		ctypes.c_int),
	("value",		ctypes.c_float),
	("absolute",		ctypes.c_int),
	("normalized",		ctypes.c_int),] )

fluid_synth_set_gain = _rpythonic_function_(		"fluid_synth_set_gain", ctypes.c_void_p, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("gain",		ctypes.c_float),] )

fluid_synth_get_internal_bufsize = _rpythonic_function_(		"fluid_synth_get_internal_bufsize", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),] )

fluid_synth_get_active_voice_count = _rpythonic_function_(		"fluid_synth_get_active_voice_count", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),] )

fluid_synth_set_interp_method = _rpythonic_function_(		"fluid_synth_set_interp_method", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("chan",		ctypes.c_int),
	("interp_method",		ctypes.c_int),] )

fluid_synth_set_gen = _rpythonic_function_(		"fluid_synth_set_gen", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("chan",		ctypes.c_int),
	("param",		ctypes.c_int),
	("value",		ctypes.c_float),] )

delete_fluid_shell = _rpythonic_function_(		"delete_fluid_shell", ctypes.c_void_p, [
	("shell",		ctypes.POINTER(_fluid_shell_t)),] )

fluid_usershell = _rpythonic_function_(		"fluid_usershell", ctypes.c_void_p, [
	("settings",		ctypes.POINTER(_fluid_hashtable_t)),
	("handler",		ctypes.POINTER(_fluid_hashtable_t)),] )

fluid_source = _rpythonic_function_(		"fluid_source", ctypes.c_int, [
	("handler",		ctypes.POINTER(_fluid_hashtable_t)),
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

fluid_command = _rpythonic_function_(		"fluid_command", ctypes.c_int, [
	("handler",		ctypes.POINTER(_fluid_hashtable_t)),
	("cmd",		ctypes.POINTER(ctypes.c_char)),
	("out",		ctypes.c_int),] )

new_fluid_shell = _rpythonic_function_(		"new_fluid_shell", ctypes.POINTER(_fluid_shell_t), [
	("settings",		ctypes.POINTER(_fluid_hashtable_t)),
	("handler",		ctypes.POINTER(_fluid_hashtable_t)),
	("C_in",		ctypes.c_int),
	("out",		ctypes.c_int),
	("thread",		ctypes.c_int),] )

fluid_server_newclient_func_t = _rpythonic_function_(		"fluid_server_newclient_func_t", ctypes.POINTER(_fluid_hashtable_t), [
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("addr",		ctypes.POINTER(ctypes.c_char)),] )

new_fluid_server = _rpythonic_function_(		"new_fluid_server", ctypes.POINTER(_fluid_server_t), [
	("settings",		ctypes.POINTER(_fluid_hashtable_t)),
	("func",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(_fluid_hashtable_t), ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),))),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

fluid_synth_nwrite_float = _rpythonic_function_(		"fluid_synth_nwrite_float", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("C_len",		ctypes.c_int),
	("left",		ctypes.POINTER(ctypes.POINTER(ctypes.c_float))),
	("right",		ctypes.POINTER(ctypes.POINTER(ctypes.c_float))),
	("fx_left",		ctypes.POINTER(ctypes.POINTER(ctypes.c_float))),
	("fx_right",		ctypes.POINTER(ctypes.POINTER(ctypes.c_float))),] )

fluid_synth_process = _rpythonic_function_(		"fluid_synth_process", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("C_len",		ctypes.c_int),
	("nin",		ctypes.c_int),
	("C_in",		ctypes.POINTER(ctypes.POINTER(ctypes.c_float))),
	("nout",		ctypes.c_int),
	("out",		ctypes.POINTER(ctypes.POINTER(ctypes.c_float))),] )

fluid_audio_callback_t = _rpythonic_function_(		"fluid_audio_callback_t", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("C_len",		ctypes.c_int),
	("out1",		ctypes.POINTER(ctypes.c_void_p)),
	("loff",		ctypes.c_int),
	("lincr",		ctypes.c_int),
	("out2",		ctypes.POINTER(ctypes.c_void_p)),
	("roff",		ctypes.c_int),
	("rincr",		ctypes.c_int),] )

fluid_synth_add_sfloader = _rpythonic_function_(		"fluid_synth_add_sfloader", ctypes.c_void_p, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("loader",		ctypes.POINTER(_fluid_sfloader_t)),] )

fluid_synth_sfcount = _rpythonic_function_(		"fluid_synth_sfcount", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),] )

fluid_synth_sfunload = _rpythonic_function_(		"fluid_synth_sfunload", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("C_id",		ctypes.c_uint),
	("reset_presets",		ctypes.c_int),] )

fluid_synth_remove_sfont = _rpythonic_function_(		"fluid_synth_remove_sfont", ctypes.c_void_p, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("sfont",		ctypes.POINTER(_fluid_sfont_t)),] )

fluid_synth_get_sfont_by_id = _rpythonic_function_(		"fluid_synth_get_sfont_by_id", ctypes.POINTER(_fluid_sfont_t), [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("C_id",		ctypes.c_uint),] )

fluid_synth_get_sfont_by_name = _rpythonic_function_(		"fluid_synth_get_sfont_by_name", ctypes.POINTER(_fluid_sfont_t), [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

fluid_synth_set_bank_offset = _rpythonic_function_(		"fluid_synth_set_bank_offset", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("sfont_id",		ctypes.c_int),
	("offset",		ctypes.c_int),] )

fluid_synth_get_sfont = _rpythonic_function_(		"fluid_synth_get_sfont", ctypes.POINTER(_fluid_sfont_t), [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("num",		ctypes.c_uint),] )

fluid_synth_add_sfont = _rpythonic_function_(		"fluid_synth_add_sfont", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("sfont",		ctypes.POINTER(_fluid_sfont_t)),] )

fluid_synth_tuning_iteration_start = _rpythonic_function_(		"fluid_synth_tuning_iteration_start", ctypes.c_void_p, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),] )

fluid_synth_tuning_iteration_next = _rpythonic_function_(		"fluid_synth_tuning_iteration_next", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("bank",		ctypes.POINTER(ctypes.c_int)),
	("prog",		ctypes.POINTER(ctypes.c_int)),] )

fluid_synth_reset_tuning = _rpythonic_function_(		"fluid_synth_reset_tuning", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("chan",		ctypes.c_int),] )

fluid_synth_select_tuning = _rpythonic_function_(		"fluid_synth_select_tuning", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("chan",		ctypes.c_int),
	("bank",		ctypes.c_int),
	("prog",		ctypes.c_int),] )

fluid_synth_deactivate_tuning = _rpythonic_function_(		"fluid_synth_deactivate_tuning", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("chan",		ctypes.c_int),
	("apply",		ctypes.c_int),] )

fluid_synth_activate_tuning = _rpythonic_function_(		"fluid_synth_activate_tuning", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("chan",		ctypes.c_int),
	("bank",		ctypes.c_int),
	("prog",		ctypes.c_int),
	("apply",		ctypes.c_int),] )

fluid_synth_tune_notes = _rpythonic_function_(		"fluid_synth_tune_notes", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("bank",		ctypes.c_int),
	("prog",		ctypes.c_int),
	("C_len",		ctypes.c_int),
	("keys",		ctypes.POINTER(ctypes.c_int)),
	("pitch",		ctypes.POINTER(ctypes.c_double)),
	("apply",		ctypes.c_int),] )

fluid_synth_get_chorus_nr = _rpythonic_function_(		"fluid_synth_get_chorus_nr", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),] )

fluid_synth_get_chorus_depth_ms = _rpythonic_function_(		"fluid_synth_get_chorus_depth_ms", ctypes.c_double, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),] )

fluid_synth_set_chorus_on = _rpythonic_function_(		"fluid_synth_set_chorus_on", ctypes.c_void_p, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("on",		ctypes.c_int),] )

fluid_synth_get_chorus_speed_Hz = _rpythonic_function_(		"fluid_synth_get_chorus_speed_Hz", ctypes.c_double, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),] )

fluid_synth_count_effects_channels = _rpythonic_function_(		"fluid_synth_count_effects_channels", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),] )

fluid_synth_count_audio_channels = _rpythonic_function_(		"fluid_synth_count_audio_channels", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),] )

fluid_synth_count_audio_groups = _rpythonic_function_(		"fluid_synth_count_audio_groups", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),] )

fluid_synth_get_chorus_type = _rpythonic_function_(		"fluid_synth_get_chorus_type", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),] )

fluid_synth_set_sample_rate = _rpythonic_function_(		"fluid_synth_set_sample_rate", ctypes.c_void_p, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("sample_rate",		ctypes.c_float),] )

fluid_synth_get_chorus_level = _rpythonic_function_(		"fluid_synth_get_chorus_level", ctypes.c_double, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),] )

fluid_synth_count_midi_channels = _rpythonic_function_(		"fluid_synth_count_midi_channels", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),] )

fluid_synth_tuning_dump = _rpythonic_function_(		"fluid_synth_tuning_dump", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("bank",		ctypes.c_int),
	("prog",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),
	("pitch",		ctypes.POINTER(ctypes.c_double)),] )

fluid_synth_get_cpu_load = _rpythonic_function_(		"fluid_synth_get_cpu_load", ctypes.c_double, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),] )

fluid_synth_error = _rpythonic_function_(		"fluid_synth_error", ctypes.POINTER(ctypes.c_char), [
	("synth",		ctypes.POINTER(_fluid_synth_t)),] )

fluid_synth_write_s16 = _rpythonic_function_(		"fluid_synth_write_s16", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("C_len",		ctypes.c_int),
	("lout",		ctypes.POINTER(ctypes.c_void_p)),
	("loff",		ctypes.c_int),
	("lincr",		ctypes.c_int),
	("rout",		ctypes.POINTER(ctypes.c_void_p)),
	("roff",		ctypes.c_int),
	("rincr",		ctypes.c_int),] )

fluid_synth_write_float = _rpythonic_function_(		"fluid_synth_write_float", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("C_len",		ctypes.c_int),
	("lout",		ctypes.POINTER(ctypes.c_void_p)),
	("loff",		ctypes.c_int),
	("lincr",		ctypes.c_int),
	("rout",		ctypes.POINTER(ctypes.c_void_p)),
	("roff",		ctypes.c_int),
	("rincr",		ctypes.c_int),] )

fluid_get_sysconf = _rpythonic_function_(		"fluid_get_sysconf", ctypes.POINTER(ctypes.c_char), [
	("buf",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

fluid_cmd_func_t = _rpythonic_function_(		"fluid_cmd_func_t", ctypes.c_int, [
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("ac",		ctypes.c_int),
	("av",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("out",		ctypes.c_int),] )

new_fluid_cmd_handler = _rpythonic_function_(		"new_fluid_cmd_handler", ctypes.POINTER(_fluid_hashtable_t), [
	("synth",		ctypes.POINTER(_fluid_synth_t)),] )

delete_fluid_cmd_handler = _rpythonic_function_(		"delete_fluid_cmd_handler", ctypes.c_void_p, [
	("handler",		ctypes.POINTER(_fluid_hashtable_t)),] )

fluid_cmd_handler_set_synth = _rpythonic_function_(		"fluid_cmd_handler_set_synth", ctypes.c_void_p, [
	("handler",		ctypes.POINTER(_fluid_hashtable_t)),
	("synth",		ctypes.POINTER(_fluid_synth_t)),] )

fluid_cmd_handler_register = _rpythonic_function_(		"fluid_cmd_handler_register", ctypes.c_int, [
	("handler",		ctypes.POINTER(_fluid_hashtable_t)),
	("cmd",		ctypes.POINTER(fluid_cmd_t)),] )

fluid_cmd_handler_unregister = _rpythonic_function_(		"fluid_cmd_handler_unregister", ctypes.c_int, [
	("handler",		ctypes.POINTER(_fluid_hashtable_t)),
	("cmd",		ctypes.POINTER(ctypes.c_char)),] )

fluid_synth_get_gen = _rpythonic_function_(		"fluid_synth_get_gen", ctypes.c_float, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("chan",		ctypes.c_int),
	("param",		ctypes.c_int),] )

fluid_synth_create_key_tuning = _rpythonic_function_(		"fluid_synth_create_key_tuning", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("bank",		ctypes.c_int),
	("prog",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("pitch",		ctypes.POINTER(ctypes.c_double)),] )

fluid_synth_activate_key_tuning = _rpythonic_function_(		"fluid_synth_activate_key_tuning", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("bank",		ctypes.c_int),
	("prog",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("pitch",		ctypes.POINTER(ctypes.c_double)),
	("apply",		ctypes.c_int),] )

fluid_synth_create_octave_tuning = _rpythonic_function_(		"fluid_synth_create_octave_tuning", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("bank",		ctypes.c_int),
	("prog",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("pitch",		ctypes.POINTER(ctypes.c_double)),] )

fluid_synth_activate_octave_tuning = _rpythonic_function_(		"fluid_synth_activate_octave_tuning", ctypes.c_int, [
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("bank",		ctypes.c_int),
	("prog",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("pitch",		ctypes.POINTER(ctypes.c_double)),
	("apply",		ctypes.c_int),] )

new_fluid_audio_driver2 = _rpythonic_function_(		"new_fluid_audio_driver2", ctypes.POINTER(_fluid_audio_driver_t), [
	("settings",		ctypes.POINTER(_fluid_hashtable_t)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.c_int,ctypes.c_int,ctypes.POINTER(ctypes.POINTER(ctypes.c_float)),ctypes.c_int,ctypes.POINTER(ctypes.POINTER(ctypes.c_float)),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

delete_fluid_audio_driver = _rpythonic_function_(		"delete_fluid_audio_driver", ctypes.c_void_p, [
	("driver",		ctypes.POINTER(_fluid_audio_driver_t)),] )

new_fluid_file_renderer = _rpythonic_function_(		"new_fluid_file_renderer", ctypes.POINTER(_fluid_file_renderer_t), [
	("synth",		ctypes.POINTER(_fluid_synth_t)),] )

fluid_file_renderer_process_block = _rpythonic_function_(		"fluid_file_renderer_process_block", ctypes.c_int, [
	("dev",		ctypes.POINTER(_fluid_file_renderer_t)),] )

new_fluid_audio_driver = _rpythonic_function_(		"new_fluid_audio_driver", ctypes.POINTER(_fluid_audio_driver_t), [
	("settings",		ctypes.POINTER(_fluid_hashtable_t)),
	("synth",		ctypes.POINTER(_fluid_synth_t)),] )

delete_fluid_file_renderer = _rpythonic_function_(		"delete_fluid_file_renderer", ctypes.c_void_p, [
	("dev",		ctypes.POINTER(_fluid_file_renderer_t)),] )

fluid_audio_func_t = _rpythonic_function_(		"fluid_audio_func_t", ctypes.c_int, [
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("C_len",		ctypes.c_int),
	("nin",		ctypes.c_int),
	("C_in",		ctypes.POINTER(ctypes.POINTER(ctypes.c_float))),
	("nout",		ctypes.c_int),
	("out",		ctypes.POINTER(ctypes.POINTER(ctypes.c_float))),] )

new_fluid_event = _rpythonic_function_(		"new_fluid_event", ctypes.POINTER(_fluid_event_t), [] )

new_fluid_midi_router = _rpythonic_function_(		"new_fluid_midi_router", ctypes.POINTER(_fluid_midi_router_t), [
	("settings",		ctypes.POINTER(_fluid_hashtable_t)),
	("handler",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_fluid_midi_event_t),)),
	("event_handler_data",		ctypes.POINTER(ctypes.c_void_p)),] )

fluid_midi_event_set_pitch = _rpythonic_function_(		"fluid_midi_event_set_pitch", ctypes.c_int, [
	("evt",		ctypes.POINTER(_fluid_midi_event_t)),
	("val",		ctypes.c_int),] )

fluid_midi_event_set_sysex = _rpythonic_function_(		"fluid_midi_event_set_sysex", ctypes.c_int, [
	("evt",		ctypes.POINTER(_fluid_midi_event_t)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.c_int),
	("dynamic",		ctypes.c_int),] )

fluid_midi_event_get_pitch = _rpythonic_function_(		"fluid_midi_event_get_pitch", ctypes.c_int, [
	("evt",		ctypes.POINTER(_fluid_midi_event_t)),] )

handle_midi_event_func_t = _rpythonic_function_(		"handle_midi_event_func_t", ctypes.c_int, [
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("event",		ctypes.POINTER(_fluid_midi_event_t)),] )

delete_fluid_midi_router = _rpythonic_function_(		"delete_fluid_midi_router", ctypes.c_int, [
	("handler",		ctypes.POINTER(_fluid_midi_router_t)),] )

fluid_midi_router_set_default_rules = _rpythonic_function_(		"fluid_midi_router_set_default_rules", ctypes.c_int, [
	("router",		ctypes.POINTER(_fluid_midi_router_t)),] )

fluid_midi_router_add_rule = _rpythonic_function_(		"fluid_midi_router_add_rule", ctypes.c_int, [
	("router",		ctypes.POINTER(_fluid_midi_router_t)),
	("rule",		ctypes.POINTER(_fluid_midi_router_rule_t)),
	("C_type",		ctypes.c_int),] )

fluid_midi_router_clear_rules = _rpythonic_function_(		"fluid_midi_router_clear_rules", ctypes.c_int, [
	("router",		ctypes.POINTER(_fluid_midi_router_t)),] )

fluid_midi_event_get_key = _rpythonic_function_(		"fluid_midi_event_get_key", ctypes.c_int, [
	("evt",		ctypes.POINTER(_fluid_midi_event_t)),] )

fluid_midi_event_set_key = _rpythonic_function_(		"fluid_midi_event_set_key", ctypes.c_int, [
	("evt",		ctypes.POINTER(_fluid_midi_event_t)),
	("key",		ctypes.c_int),] )

fluid_midi_event_get_velocity = _rpythonic_function_(		"fluid_midi_event_get_velocity", ctypes.c_int, [
	("evt",		ctypes.POINTER(_fluid_midi_event_t)),] )

fluid_midi_event_set_velocity = _rpythonic_function_(		"fluid_midi_event_set_velocity", ctypes.c_int, [
	("evt",		ctypes.POINTER(_fluid_midi_event_t)),
	("vel",		ctypes.c_int),] )

fluid_midi_event_get_control = _rpythonic_function_(		"fluid_midi_event_get_control", ctypes.c_int, [
	("evt",		ctypes.POINTER(_fluid_midi_event_t)),] )

fluid_midi_event_set_control = _rpythonic_function_(		"fluid_midi_event_set_control", ctypes.c_int, [
	("evt",		ctypes.POINTER(_fluid_midi_event_t)),
	("ctrl",		ctypes.c_int),] )

fluid_midi_event_get_value = _rpythonic_function_(		"fluid_midi_event_get_value", ctypes.c_int, [
	("evt",		ctypes.POINTER(_fluid_midi_event_t)),] )

fluid_midi_event_set_value = _rpythonic_function_(		"fluid_midi_event_set_value", ctypes.c_int, [
	("evt",		ctypes.POINTER(_fluid_midi_event_t)),
	("val",		ctypes.c_int),] )

fluid_midi_event_get_program = _rpythonic_function_(		"fluid_midi_event_get_program", ctypes.c_int, [
	("evt",		ctypes.POINTER(_fluid_midi_event_t)),] )

fluid_midi_event_set_program = _rpythonic_function_(		"fluid_midi_event_set_program", ctypes.c_int, [
	("evt",		ctypes.POINTER(_fluid_midi_event_t)),
	("val",		ctypes.c_int),] )

delete_fluid_server = _rpythonic_function_(		"delete_fluid_server", ctypes.c_void_p, [
	("server",		ctypes.POINTER(_fluid_server_t)),] )

free = _rpythonic_function_(		"free", ctypes.c_int, [
	("loader",		ctypes.POINTER(_fluid_sfloader_t)),] )

fluid_server_join = _rpythonic_function_(		"fluid_server_join", ctypes.c_int, [
	("server",		ctypes.POINTER(_fluid_server_t)),] )

get_preset = _rpythonic_function_(		"get_preset", ctypes.POINTER(_fluid_preset_t), [
	("sfont",		ctypes.POINTER(_fluid_sfont_t)),
	("bank",		ctypes.c_uint),
	("prenum",		ctypes.c_uint),] )

iteration_start = _rpythonic_function_(		"iteration_start", ctypes.c_void_p, [
	("sfont",		ctypes.POINTER(_fluid_sfont_t)),] )

get_name = _rpythonic_function_(		"get_name", ctypes.POINTER(ctypes.c_char), [
	("sfont",		ctypes.POINTER(_fluid_sfont_t)),] )

load = _rpythonic_function_(		"load", ctypes.POINTER(_fluid_sfont_t), [
	("loader",		ctypes.POINTER(_fluid_sfloader_t)),
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

fluid_event_channel_pressure = _rpythonic_function_(		"fluid_event_channel_pressure", ctypes.c_void_p, [
	("evt",		ctypes.POINTER(_fluid_event_t)),
	("channel",		ctypes.c_int),
	("val",		ctypes.c_short),] )

fluid_event_system_reset = _rpythonic_function_(		"fluid_event_system_reset", ctypes.c_void_p, [
	("evt",		ctypes.POINTER(_fluid_event_t)),] )

fluid_event_reverb_send = _rpythonic_function_(		"fluid_event_reverb_send", ctypes.c_void_p, [
	("evt",		ctypes.POINTER(_fluid_event_t)),
	("channel",		ctypes.c_int),
	("val",		ctypes.c_short),] )

fluid_event_sustain = _rpythonic_function_(		"fluid_event_sustain", ctypes.c_void_p, [
	("evt",		ctypes.POINTER(_fluid_event_t)),
	("channel",		ctypes.c_int),
	("val",		ctypes.c_short),] )

fluid_event_volume = _rpythonic_function_(		"fluid_event_volume", ctypes.c_void_p, [
	("evt",		ctypes.POINTER(_fluid_event_t)),
	("channel",		ctypes.c_int),
	("val",		ctypes.c_short),] )

fluid_event_chorus_send = _rpythonic_function_(		"fluid_event_chorus_send", ctypes.c_void_p, [
	("evt",		ctypes.POINTER(_fluid_event_t)),
	("channel",		ctypes.c_int),
	("val",		ctypes.c_short),] )

fluid_event_pan = _rpythonic_function_(		"fluid_event_pan", ctypes.c_void_p, [
	("evt",		ctypes.POINTER(_fluid_event_t)),
	("channel",		ctypes.c_int),
	("val",		ctypes.c_short),] )

fluid_event_modulation = _rpythonic_function_(		"fluid_event_modulation", ctypes.c_void_p, [
	("evt",		ctypes.POINTER(_fluid_event_t)),
	("channel",		ctypes.c_int),
	("val",		ctypes.c_short),] )

fluid_event_unregistering = _rpythonic_function_(		"fluid_event_unregistering", ctypes.c_void_p, [
	("evt",		ctypes.POINTER(_fluid_event_t)),] )

fluid_event_any_control_change = _rpythonic_function_(		"fluid_event_any_control_change", ctypes.c_void_p, [
	("evt",		ctypes.POINTER(_fluid_event_t)),
	("channel",		ctypes.c_int),] )

fluid_event_get_type = _rpythonic_function_(		"fluid_event_get_type", ctypes.c_int, [
	("evt",		ctypes.POINTER(_fluid_event_t)),] )

fluid_event_get_source = _rpythonic_function_(		"fluid_event_get_source", ctypes.c_short, [
	("evt",		ctypes.POINTER(_fluid_event_t)),] )

fluid_event_get_dest = _rpythonic_function_(		"fluid_event_get_dest", ctypes.c_short, [
	("evt",		ctypes.POINTER(_fluid_event_t)),] )

fluid_event_get_channel = _rpythonic_function_(		"fluid_event_get_channel", ctypes.c_int, [
	("evt",		ctypes.POINTER(_fluid_event_t)),] )

fluid_event_get_key = _rpythonic_function_(		"fluid_event_get_key", ctypes.c_short, [
	("evt",		ctypes.POINTER(_fluid_event_t)),] )

fluid_event_get_velocity = _rpythonic_function_(		"fluid_event_get_velocity", ctypes.c_short, [
	("evt",		ctypes.POINTER(_fluid_event_t)),] )

fluid_event_get_control = _rpythonic_function_(		"fluid_event_get_control", ctypes.c_short, [
	("evt",		ctypes.POINTER(_fluid_event_t)),] )

fluid_event_get_value = _rpythonic_function_(		"fluid_event_get_value", ctypes.c_short, [
	("evt",		ctypes.POINTER(_fluid_event_t)),] )

fluid_event_get_program = _rpythonic_function_(		"fluid_event_get_program", ctypes.c_short, [
	("evt",		ctypes.POINTER(_fluid_event_t)),] )

fluid_ramsfont_create_sfont = _rpythonic_function_(		"fluid_ramsfont_create_sfont", ctypes.POINTER(_fluid_sfont_t), [] )

fluid_ramsfont_set_name = _rpythonic_function_(		"fluid_ramsfont_set_name", ctypes.c_int, [
	("sfont",		ctypes.POINTER(_fluid_ramsfont_t)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

fluid_ramsfont_remove_izone = _rpythonic_function_(		"fluid_ramsfont_remove_izone", ctypes.c_int, [
	("sfont",		ctypes.POINTER(_fluid_ramsfont_t)),
	("bank",		ctypes.c_uint),
	("num",		ctypes.c_uint),
	("sample",		ctypes.POINTER(_fluid_sample_t)),] )

fluid_ramsfont_add_izone = _rpythonic_function_(		"fluid_ramsfont_add_izone", ctypes.c_int, [
	("sfont",		ctypes.POINTER(_fluid_ramsfont_t)),
	("bank",		ctypes.c_uint),
	("num",		ctypes.c_uint),
	("sample",		ctypes.POINTER(_fluid_sample_t)),
	("lokey",		ctypes.c_int),
	("hikey",		ctypes.c_int),] )

delete_fluid_ramsample = _rpythonic_function_(		"delete_fluid_ramsample", ctypes.c_int, [
	("sample",		ctypes.POINTER(_fluid_sample_t)),] )

fluid_ramsfont_izone_set_loop = _rpythonic_function_(		"fluid_ramsfont_izone_set_loop", ctypes.c_int, [
	("sfont",		ctypes.POINTER(_fluid_ramsfont_t)),
	("bank",		ctypes.c_uint),
	("num",		ctypes.c_uint),
	("sample",		ctypes.POINTER(_fluid_sample_t)),
	("on",		ctypes.c_int),
	("loopstart",		ctypes.c_float),
	("loopend",		ctypes.c_float),] )

new_fluid_ramsample = _rpythonic_function_(		"new_fluid_ramsample", ctypes.POINTER(_fluid_sample_t), [] )

fluid_ramsfont_izone_set_gen = _rpythonic_function_(		"fluid_ramsfont_izone_set_gen", ctypes.c_int, [
	("sfont",		ctypes.POINTER(_fluid_ramsfont_t)),
	("bank",		ctypes.c_uint),
	("num",		ctypes.c_uint),
	("sample",		ctypes.POINTER(_fluid_sample_t)),
	("gen_type",		ctypes.c_int),
	("value",		ctypes.c_float),] )

fluid_sample_set_name = _rpythonic_function_(		"fluid_sample_set_name", ctypes.c_int, [
	("sample",		ctypes.POINTER(_fluid_sample_t)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

fluid_sample_set_sound_data = _rpythonic_function_(		"fluid_sample_set_sound_data", ctypes.c_int, [
	("sample",		ctypes.POINTER(_fluid_sample_t)),
	("data",		ctypes.POINTER(ctypes.c_short)),
	("nbframes",		ctypes.c_uint),
	("copy_data",		ctypes.c_short),
	("rootkey",		ctypes.c_int),] )

notify = _rpythonic_function_(		"notify", ctypes.c_int, [
	("preset",		ctypes.POINTER(_fluid_preset_t)),
	("reason",		ctypes.c_int),
	("chan",		ctypes.c_int),] )

get_banknum = _rpythonic_function_(		"get_banknum", ctypes.c_int, [
	("preset",		ctypes.POINTER(_fluid_preset_t)),] )

get_num = _rpythonic_function_(		"get_num", ctypes.c_int, [
	("preset",		ctypes.POINTER(_fluid_preset_t)),] )

noteon = _rpythonic_function_(		"noteon", ctypes.c_int, [
	("preset",		ctypes.POINTER(_fluid_preset_t)),
	("synth",		ctypes.POINTER(_fluid_synth_t)),
	("chan",		ctypes.c_int),
	("key",		ctypes.c_int),
	("vel",		ctypes.c_int),] )

iteration_next = _rpythonic_function_(		"iteration_next", ctypes.c_int, [
	("sfont",		ctypes.POINTER(_fluid_sfont_t)),
	("preset",		ctypes.POINTER(_fluid_preset_t)),] )

fluid_event_noteoff = _rpythonic_function_(		"fluid_event_noteoff", ctypes.c_void_p, [
	("evt",		ctypes.POINTER(_fluid_event_t)),
	("channel",		ctypes.c_int),
	("key",		ctypes.c_short),] )

fluid_event_timer = _rpythonic_function_(		"fluid_event_timer", ctypes.c_void_p, [
	("evt",		ctypes.POINTER(_fluid_event_t)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

fluid_event_noteon = _rpythonic_function_(		"fluid_event_noteon", ctypes.c_void_p, [
	("evt",		ctypes.POINTER(_fluid_event_t)),
	("channel",		ctypes.c_int),
	("key",		ctypes.c_short),
	("vel",		ctypes.c_short),] )

fluid_event_all_sounds_off = _rpythonic_function_(		"fluid_event_all_sounds_off", ctypes.c_void_p, [
	("evt",		ctypes.POINTER(_fluid_event_t)),
	("channel",		ctypes.c_int),] )

fluid_event_set_source = _rpythonic_function_(		"fluid_event_set_source", ctypes.c_void_p, [
	("evt",		ctypes.POINTER(_fluid_event_t)),
	("src",		ctypes.c_short),] )

delete_fluid_event = _rpythonic_function_(		"delete_fluid_event", ctypes.c_void_p, [
	("evt",		ctypes.POINTER(_fluid_event_t)),] )

fluid_event_note = _rpythonic_function_(		"fluid_event_note", ctypes.c_void_p, [
	("evt",		ctypes.POINTER(_fluid_event_t)),
	("channel",		ctypes.c_int),
	("key",		ctypes.c_short),
	("vel",		ctypes.c_short),
	("duration",		ctypes.c_uint),] )

fluid_event_set_dest = _rpythonic_function_(		"fluid_event_set_dest", ctypes.c_void_p, [
	("evt",		ctypes.POINTER(_fluid_event_t)),
	("dest",		ctypes.c_short),] )

fluid_event_pitch_wheelsens = _rpythonic_function_(		"fluid_event_pitch_wheelsens", ctypes.c_void_p, [
	("evt",		ctypes.POINTER(_fluid_event_t)),
	("channel",		ctypes.c_int),
	("val",		ctypes.c_short),] )

fluid_event_pitch_bend = _rpythonic_function_(		"fluid_event_pitch_bend", ctypes.c_void_p, [
	("evt",		ctypes.POINTER(_fluid_event_t)),
	("channel",		ctypes.c_int),
	("val",		ctypes.c_int),] )

fluid_event_all_notes_off = _rpythonic_function_(		"fluid_event_all_notes_off", ctypes.c_void_p, [
	("evt",		ctypes.POINTER(_fluid_event_t)),
	("channel",		ctypes.c_int),] )

fluid_event_program_select = _rpythonic_function_(		"fluid_event_program_select", ctypes.c_void_p, [
	("evt",		ctypes.POINTER(_fluid_event_t)),
	("channel",		ctypes.c_int),
	("sfont_id",		ctypes.c_uint),
	("bank_num",		ctypes.c_short),
	("preset_num",		ctypes.c_short),] )

fluid_event_bank_select = _rpythonic_function_(		"fluid_event_bank_select", ctypes.c_void_p, [
	("evt",		ctypes.POINTER(_fluid_event_t)),
	("channel",		ctypes.c_int),
	("bank_num",		ctypes.c_short),] )

fluid_event_control_change = _rpythonic_function_(		"fluid_event_control_change", ctypes.c_void_p, [
	("evt",		ctypes.POINTER(_fluid_event_t)),
	("channel",		ctypes.c_int),
	("control",		ctypes.c_short),
	("val",		ctypes.c_short),] )

fluid_event_program_change = _rpythonic_function_(		"fluid_event_program_change", ctypes.c_void_p, [
	("evt",		ctypes.POINTER(_fluid_event_t)),
	("channel",		ctypes.c_int),
	("preset_num",		ctypes.c_short),] )

fluid_midi_event_get_channel = _rpythonic_function_(		"fluid_midi_event_get_channel", ctypes.c_int, [
	("evt",		ctypes.POINTER(_fluid_midi_event_t)),] )

fluid_midi_event_set_channel = _rpythonic_function_(		"fluid_midi_event_set_channel", ctypes.c_int, [
	("evt",		ctypes.POINTER(_fluid_midi_event_t)),
	("chan",		ctypes.c_int),] )

fluid_midi_event_get_type = _rpythonic_function_(		"fluid_midi_event_get_type", ctypes.c_int, [
	("evt",		ctypes.POINTER(_fluid_midi_event_t)),] )

fluid_midi_event_set_type = _rpythonic_function_(		"fluid_midi_event_set_type", ctypes.c_int, [
	("evt",		ctypes.POINTER(_fluid_midi_event_t)),
	("C_type",		ctypes.c_int),] )

delete_fluid_midi_event = _rpythonic_function_(		"delete_fluid_midi_event", ctypes.c_int, [
	("event",		ctypes.POINTER(_fluid_midi_event_t)),] )

new_fluid_midi_event = _rpythonic_function_(		"new_fluid_midi_event", ctypes.POINTER(_fluid_midi_event_t), [] )

fluid_event_get_sfont_id = _rpythonic_function_(		"fluid_event_get_sfont_id", ctypes.c_uint, [
	("evt",		ctypes.POINTER(_fluid_event_t)),] )

fluid_event_get_pitch = _rpythonic_function_(		"fluid_event_get_pitch", ctypes.c_int, [
	("evt",		ctypes.POINTER(_fluid_event_t)),] )

fluid_event_get_data = _rpythonic_function_(		"fluid_event_get_data", ctypes.POINTER(ctypes.c_void_p), [
	("evt",		ctypes.POINTER(_fluid_event_t)),] )

fluid_event_get_duration = _rpythonic_function_(		"fluid_event_get_duration", ctypes.c_uint, [
	("evt",		ctypes.POINTER(_fluid_event_t)),] )

fluid_event_get_bank = _rpythonic_function_(		"fluid_event_get_bank", ctypes.c_short, [
	("evt",		ctypes.POINTER(_fluid_event_t)),] )

delete_fluid_sequencer = _rpythonic_function_(		"delete_fluid_sequencer", ctypes.c_void_p, [
	("seq",		ctypes.POINTER(_fluid_sequencer_t)),] )

fluid_sequencer_register_client = _rpythonic_function_(		"fluid_sequencer_register_client", ctypes.c_short, [
	("seq",		ctypes.POINTER(_fluid_sequencer_t)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_uint,ctypes.POINTER(_fluid_event_t),ctypes.POINTER(_fluid_sequencer_t),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

fluid_sequencer_process = _rpythonic_function_(		"fluid_sequencer_process", ctypes.c_void_p, [
	("seq",		ctypes.POINTER(_fluid_sequencer_t)),
	("msec",		ctypes.c_uint),] )

new_fluid_sequencer2 = _rpythonic_function_(		"new_fluid_sequencer2", ctypes.POINTER(_fluid_sequencer_t), [
	("use_system_timer",		ctypes.c_int),] )

fluid_sequencer_get_client_name = _rpythonic_function_(		"fluid_sequencer_get_client_name", ctypes.POINTER(ctypes.c_char), [
	("seq",		ctypes.POINTER(_fluid_sequencer_t)),
	("C_id",		ctypes.c_int),] )

fluid_sequencer_client_is_dest = _rpythonic_function_(		"fluid_sequencer_client_is_dest", ctypes.c_int, [
	("seq",		ctypes.POINTER(_fluid_sequencer_t)),
	("C_id",		ctypes.c_int),] )

fluid_sequencer_unregister_client = _rpythonic_function_(		"fluid_sequencer_unregister_client", ctypes.c_void_p, [
	("seq",		ctypes.POINTER(_fluid_sequencer_t)),
	("C_id",		ctypes.c_short),] )

fluid_sequencer_count_clients = _rpythonic_function_(		"fluid_sequencer_count_clients", ctypes.c_int, [
	("seq",		ctypes.POINTER(_fluid_sequencer_t)),] )

fluid_sequencer_get_use_system_timer = _rpythonic_function_(		"fluid_sequencer_get_use_system_timer", ctypes.c_int, [
	("seq",		ctypes.POINTER(_fluid_sequencer_t)),] )

fluid_sequencer_get_client_id = _rpythonic_function_(		"fluid_sequencer_get_client_id", ctypes.c_short, [
	("seq",		ctypes.POINTER(_fluid_sequencer_t)),
	("index",		ctypes.c_int),] )

fluid_mod_set_source1 = _rpythonic_function_(		"fluid_mod_set_source1", ctypes.c_void_p, [
	("mod",		ctypes.POINTER(_fluid_mod_t)),
	("src",		ctypes.c_int),
	("flags",		ctypes.c_int),] )

fluid_mod_set_source2 = _rpythonic_function_(		"fluid_mod_set_source2", ctypes.c_void_p, [
	("mod",		ctypes.POINTER(_fluid_mod_t)),
	("src",		ctypes.c_int),
	("flags",		ctypes.c_int),] )

fluid_mod_set_dest = _rpythonic_function_(		"fluid_mod_set_dest", ctypes.c_void_p, [
	("mod",		ctypes.POINTER(_fluid_mod_t)),
	("dst",		ctypes.c_int),] )

fluid_mod_set_amount = _rpythonic_function_(		"fluid_mod_set_amount", ctypes.c_void_p, [
	("mod",		ctypes.POINTER(_fluid_mod_t)),
	("amount",		ctypes.c_double),] )

fluid_mod_new = _rpythonic_function_(		"fluid_mod_new", ctypes.POINTER(_fluid_mod_t), [] )

fluid_mod_get_flags2 = _rpythonic_function_(		"fluid_mod_get_flags2", ctypes.c_int, [
	("mod",		ctypes.POINTER(_fluid_mod_t)),] )

fluid_mod_get_source1 = _rpythonic_function_(		"fluid_mod_get_source1", ctypes.c_int, [
	("mod",		ctypes.POINTER(_fluid_mod_t)),] )

fluid_mod_get_flags1 = _rpythonic_function_(		"fluid_mod_get_flags1", ctypes.c_int, [
	("mod",		ctypes.POINTER(_fluid_mod_t)),] )

fluid_mod_get_source2 = _rpythonic_function_(		"fluid_mod_get_source2", ctypes.c_int, [
	("mod",		ctypes.POINTER(_fluid_mod_t)),] )

fluid_mod_delete = _rpythonic_function_(		"fluid_mod_delete", ctypes.c_void_p, [
	("mod",		ctypes.POINTER(_fluid_mod_t)),] )

fluid_voice_optimize_sample = _rpythonic_function_(		"fluid_voice_optimize_sample", ctypes.c_int, [
	("s",		ctypes.POINTER(_fluid_sample_t)),] )

fluid_voice_gen_incr = _rpythonic_function_(		"fluid_voice_gen_incr", ctypes.c_void_p, [
	("voice",		ctypes.POINTER(_fluid_voice_t)),
	("gen",		ctypes.c_int),
	("val",		ctypes.c_float),] )

fluid_version = _rpythonic_function_(		"fluid_version", ctypes.c_void_p, [
	("major",		ctypes.POINTER(ctypes.c_int)),
	("minor",		ctypes.POINTER(ctypes.c_int)),
	("micro",		ctypes.POINTER(ctypes.c_int)),] )

fluid_version_str = _rpythonic_function_(		"fluid_version_str", ctypes.POINTER(ctypes.c_char), [] )

fluid_voice_get_id = _rpythonic_function_(		"fluid_voice_get_id", ctypes.c_uint, [
	("voice",		ctypes.POINTER(_fluid_voice_t)),] )

fluid_voice_gen_get = _rpythonic_function_(		"fluid_voice_gen_get", ctypes.c_float, [
	("voice",		ctypes.POINTER(_fluid_voice_t)),
	("gen",		ctypes.c_int),] )

fluid_voice_is_playing = _rpythonic_function_(		"fluid_voice_is_playing", ctypes.c_int, [
	("voice",		ctypes.POINTER(_fluid_voice_t)),] )

fluid_log_function_t = _rpythonic_function_(		"fluid_log_function_t", ctypes.c_void_p, [
	("level",		ctypes.c_int),
	("message",		ctypes.POINTER(ctypes.c_char)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

fluid_set_log_function = _rpythonic_function_(		"fluid_set_log_function", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),), [
	("level",		ctypes.c_int),
	("fun",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

fluid_default_log_function = _rpythonic_function_(		"fluid_default_log_function", ctypes.c_void_p, [
	("level",		ctypes.c_int),
	("message",		ctypes.POINTER(ctypes.c_char)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

fluid_log = _rpythonic_function_(		"fluid_log", ctypes.c_int, [
	("level",		ctypes.c_int),
	("fmt",		ctypes.POINTER(ctypes.c_char)),] )

fluid_is_soundfont = _rpythonic_function_(		"fluid_is_soundfont", ctypes.c_int, [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

fluid_is_midifile = _rpythonic_function_(		"fluid_is_midifile", ctypes.c_int, [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

fluid_midi_router_rule_set_param2 = _rpythonic_function_(		"fluid_midi_router_rule_set_param2", ctypes.c_void_p, [
	("rule",		ctypes.POINTER(_fluid_midi_router_rule_t)),
	("min",		ctypes.c_int),
	("max",		ctypes.c_int),
	("mul",		ctypes.c_float),
	("add",		ctypes.c_int),] )

fluid_midi_router_rule_set_chan = _rpythonic_function_(		"fluid_midi_router_rule_set_chan", ctypes.c_void_p, [
	("rule",		ctypes.POINTER(_fluid_midi_router_rule_t)),
	("min",		ctypes.c_int),
	("max",		ctypes.c_int),
	("mul",		ctypes.c_float),
	("add",		ctypes.c_int),] )

new_fluid_midi_router_rule = _rpythonic_function_(		"new_fluid_midi_router_rule", ctypes.POINTER(_fluid_midi_router_rule_t), [] )

delete_fluid_midi_router_rule = _rpythonic_function_(		"delete_fluid_midi_router_rule", ctypes.c_void_p, [
	("rule",		ctypes.POINTER(_fluid_midi_router_rule_t)),] )

fluid_midi_dump_prerouter = _rpythonic_function_(		"fluid_midi_dump_prerouter", ctypes.c_int, [
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("event",		ctypes.POINTER(_fluid_midi_event_t)),] )

fluid_midi_router_handle_midi_event = _rpythonic_function_(		"fluid_midi_router_handle_midi_event", ctypes.c_int, [
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("event",		ctypes.POINTER(_fluid_midi_event_t)),] )

fluid_midi_router_rule_set_param1 = _rpythonic_function_(		"fluid_midi_router_rule_set_param1", ctypes.c_void_p, [
	("rule",		ctypes.POINTER(_fluid_midi_router_rule_t)),
	("min",		ctypes.c_int),
	("max",		ctypes.c_int),
	("mul",		ctypes.c_float),
	("add",		ctypes.c_int),] )

delete_fluid_player = _rpythonic_function_(		"delete_fluid_player", ctypes.c_int, [
	("player",		ctypes.POINTER(_fluid_player_t)),] )

fluid_midi_dump_postrouter = _rpythonic_function_(		"fluid_midi_dump_postrouter", ctypes.c_int, [
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("event",		ctypes.POINTER(_fluid_midi_event_t)),] )

delete_fluid_midi_driver = _rpythonic_function_(		"delete_fluid_midi_driver", ctypes.c_void_p, [
	("driver",		ctypes.POINTER(_fluid_midi_driver_t)),] )

new_fluid_player = _rpythonic_function_(		"new_fluid_player", ctypes.POINTER(_fluid_player_t), [
	("synth",		ctypes.POINTER(_fluid_synth_t)),] )

new_fluid_midi_driver = _rpythonic_function_(		"new_fluid_midi_driver", ctypes.POINTER(_fluid_midi_driver_t), [
	("settings",		ctypes.POINTER(_fluid_hashtable_t)),
	("handler",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_fluid_midi_event_t),)),
	("event_handler_data",		ctypes.POINTER(ctypes.c_void_p)),] )

fluid_player_add_mem = _rpythonic_function_(		"fluid_player_add_mem", ctypes.c_int, [
	("player",		ctypes.POINTER(_fluid_player_t)),
	("buffer",		ctypes.POINTER(ctypes.c_void_p)),
	("C_len",		ctypes.c_uint),] )

fluid_player_add = _rpythonic_function_(		"fluid_player_add", ctypes.c_int, [
	("player",		ctypes.POINTER(_fluid_player_t)),
	("midifile",		ctypes.POINTER(ctypes.c_char)),] )

fluid_player_stop = _rpythonic_function_(		"fluid_player_stop", ctypes.c_int, [
	("player",		ctypes.POINTER(_fluid_player_t)),] )

fluid_player_play = _rpythonic_function_(		"fluid_player_play", ctypes.c_int, [
	("player",		ctypes.POINTER(_fluid_player_t)),] )

fluid_mod_get_dest = _rpythonic_function_(		"fluid_mod_get_dest", ctypes.c_int, [
	("mod",		ctypes.POINTER(_fluid_mod_t)),] )

fluid_mod_get_amount = _rpythonic_function_(		"fluid_mod_get_amount", ctypes.c_double, [
	("mod",		ctypes.POINTER(_fluid_mod_t)),] )

fluid_mod_test_identity = _rpythonic_function_(		"fluid_mod_test_identity", ctypes.c_int, [
	("mod1",		ctypes.POINTER(_fluid_mod_t)),
	("mod2",		ctypes.POINTER(_fluid_mod_t)),] )

fluid_gen_set_default_values = _rpythonic_function_(		"fluid_gen_set_default_values", ctypes.c_int, [
	("gen",		ctypes.POINTER(_fluid_gen_t)),] )

fluid_voice_update_param = _rpythonic_function_(		"fluid_voice_update_param", ctypes.c_void_p, [
	("voice",		ctypes.POINTER(_fluid_voice_t)),
	("gen",		ctypes.c_int),] )

fluid_voice_add_mod = _rpythonic_function_(		"fluid_voice_add_mod", ctypes.c_void_p, [
	("voice",		ctypes.POINTER(_fluid_voice_t)),
	("mod",		ctypes.POINTER(_fluid_mod_t)),
	("mode",		ctypes.c_int),] )

fluid_voice_gen_set = _rpythonic_function_(		"fluid_voice_gen_set", ctypes.c_void_p, [
	("voice",		ctypes.POINTER(_fluid_voice_t)),
	("gen",		ctypes.c_int),
	("val",		ctypes.c_float),] )

fluid_player_set_playback_callback = _rpythonic_function_(		"fluid_player_set_playback_callback", ctypes.c_int, [
	("player",		ctypes.POINTER(_fluid_player_t)),
	("handler",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(_fluid_midi_event_t),)),
	("handler_data",		ctypes.POINTER(ctypes.c_void_p)),] )

fluid_player_join = _rpythonic_function_(		"fluid_player_join", ctypes.c_int, [
	("player",		ctypes.POINTER(_fluid_player_t)),] )

fluid_player_set_loop = _rpythonic_function_(		"fluid_player_set_loop", ctypes.c_int, [
	("player",		ctypes.POINTER(_fluid_player_t)),
	("loop",		ctypes.c_int),] )

fluid_player_set_midi_tempo = _rpythonic_function_(		"fluid_player_set_midi_tempo", ctypes.c_int, [
	("player",		ctypes.POINTER(_fluid_player_t)),
	("tempo",		ctypes.c_int),] )

fluid_player_set_bpm = _rpythonic_function_(		"fluid_player_set_bpm", ctypes.c_int, [
	("player",		ctypes.POINTER(_fluid_player_t)),
	("bpm",		ctypes.c_int),] )

new_fluid_sequencer = _rpythonic_function_(		"new_fluid_sequencer", ctypes.POINTER(_fluid_sequencer_t), [] )

fluid_player_get_status = _rpythonic_function_(		"fluid_player_get_status", ctypes.c_int, [
	("player",		ctypes.POINTER(_fluid_player_t)),] )

fluid_event_callback_t = _rpythonic_function_(		"fluid_event_callback_t", ctypes.c_void_p, [
	("time",		ctypes.c_uint),
	("event",		ctypes.POINTER(_fluid_event_t)),
	("seq",		ctypes.POINTER(_fluid_sequencer_t)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

fluid_sequencer_send_now = _rpythonic_function_(		"fluid_sequencer_send_now", ctypes.c_void_p, [
	("seq",		ctypes.POINTER(_fluid_sequencer_t)),
	("evt",		ctypes.POINTER(_fluid_event_t)),] )

fluid_sequencer_send_at = _rpythonic_function_(		"fluid_sequencer_send_at", ctypes.c_int, [
	("seq",		ctypes.POINTER(_fluid_sequencer_t)),
	("evt",		ctypes.POINTER(_fluid_event_t)),
	("time",		ctypes.c_uint),
	("absolute",		ctypes.c_int),] )

fluid_sequencer_remove_events = _rpythonic_function_(		"fluid_sequencer_remove_events", ctypes.c_void_p, [
	("seq",		ctypes.POINTER(_fluid_sequencer_t)),
	("source",		ctypes.c_short),
	("dest",		ctypes.c_short),
	("C_type",		ctypes.c_int),] )

fluid_sequencer_get_tick = _rpythonic_function_(		"fluid_sequencer_get_tick", ctypes.c_uint, [
	("seq",		ctypes.POINTER(_fluid_sequencer_t)),] )

fluid_sequencer_set_time_scale = _rpythonic_function_(		"fluid_sequencer_set_time_scale", ctypes.c_void_p, [
	("seq",		ctypes.POINTER(_fluid_sequencer_t)),
	("scale",		ctypes.c_double),] )

fluid_sequencer_get_time_scale = _rpythonic_function_(		"fluid_sequencer_get_time_scale", ctypes.c_double, [
	("seq",		ctypes.POINTER(_fluid_sequencer_t)),] )

fluid_sequencer_register_fluidsynth = _rpythonic_function_(		"fluid_sequencer_register_fluidsynth", ctypes.c_short, [
	("seq",		ctypes.POINTER(_fluid_sequencer_t)),
	("synth",		ctypes.POINTER(_fluid_synth_t)),] )

fluid_sequencer_add_midi_event_to_buffer = _rpythonic_function_(		"fluid_sequencer_add_midi_event_to_buffer", ctypes.c_int, [
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("event",		ctypes.POINTER(_fluid_midi_event_t)),] )

setlinebuf = _rpythonic_function_(		"setlinebuf", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fprintf = _rpythonic_function_(		"fprintf", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

printf = _rpythonic_function_(		"printf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

sprintf = _rpythonic_function_(		"sprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

vfprintf = _rpythonic_function_(		"vfprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vprintf = _rpythonic_function_(		"vprintf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vsprintf = _rpythonic_function_(		"vsprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

snprintf = _rpythonic_function_(		"snprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__maxlen",		ctypes.c_uint),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

freopen = _rpythonic_function_(		"freopen", ctypes.POINTER(_IO_FILE), [
	("__filename",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.POINTER(ctypes.c_char)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fdopen = _rpythonic_function_(		"fdopen", ctypes.POINTER(_IO_FILE), [
	("__fd",		ctypes.c_int),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

fmemopen = _rpythonic_function_(		"fmemopen", ctypes.POINTER(_IO_FILE), [
	("__s",		ctypes.POINTER(ctypes.c_void_p)),
	("__len",		ctypes.c_uint),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

open_memstream = _rpythonic_function_(		"open_memstream", ctypes.POINTER(_IO_FILE), [
	("__bufloc",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__sizeloc",		ctypes.POINTER(ctypes.c_uint)),] )

setbuf = _rpythonic_function_(		"setbuf", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

setvbuf = _rpythonic_function_(		"setvbuf", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.c_int),
	("__n",		ctypes.c_uint),] )

setbuffer = _rpythonic_function_(		"setbuffer", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__size",		ctypes.c_uint),] )

getchar = _rpythonic_function_(		"getchar", ctypes.c_int, [] )

getc_unlocked = _rpythonic_function_(		"getc_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getchar_unlocked = _rpythonic_function_(		"getchar_unlocked", ctypes.c_int, [] )

fgetc_unlocked = _rpythonic_function_(		"fgetc_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fputc = _rpythonic_function_(		"fputc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putc = _rpythonic_function_(		"putc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putchar = _rpythonic_function_(		"putchar", ctypes.c_int, [
	("__c",		ctypes.c_int),] )

fputc_unlocked = _rpythonic_function_(		"fputc_unlocked", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putc_unlocked = _rpythonic_function_(		"putc_unlocked", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putchar_unlocked = _rpythonic_function_(		"putchar_unlocked", ctypes.c_int, [
	("__c",		ctypes.c_int),] )

vsnprintf = _rpythonic_function_(		"vsnprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__maxlen",		ctypes.c_uint),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vdprintf = _rpythonic_function_(		"vdprintf", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__fmt",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

dprintf = _rpythonic_function_(		"dprintf", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__fmt",		ctypes.POINTER(ctypes.c_char)),] )

fscanf = _rpythonic_function_(		"fscanf", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

scanf = _rpythonic_function_(		"scanf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

sscanf = _rpythonic_function_(		"sscanf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

getw = _rpythonic_function_(		"getw", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putw = _rpythonic_function_(		"putw", ctypes.c_int, [
	("__w",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fgets = _rpythonic_function_(		"fgets", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

gets = _rpythonic_function_(		"gets", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

getdelim = _rpythonic_function_(		"getdelim", ctypes.c_int, [
	("__lineptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__n",		ctypes.POINTER(ctypes.c_uint)),
	("__delimiter",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getline = _rpythonic_function_(		"getline", ctypes.c_int, [
	("__lineptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__n",		ctypes.POINTER(ctypes.c_uint)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fputs = _rpythonic_function_(		"fputs", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

_IO_getc = _rpythonic_function_(		"_IO_getc", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_putc = _rpythonic_function_(		"_IO_putc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_feof = _rpythonic_function_(		"_IO_feof", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_ferror = _rpythonic_function_(		"_IO_ferror", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_peekc_locked = _rpythonic_function_(		"_IO_peekc_locked", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_flockfile = _rpythonic_function_(		"_IO_flockfile", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_IO_funlockfile = _rpythonic_function_(		"_IO_funlockfile", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_IO_ftrylockfile = _rpythonic_function_(		"_IO_ftrylockfile", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_IO_vfscanf = _rpythonic_function_(		"_IO_vfscanf", ctypes.c_int, [
	("__restrict",		ctypes.POINTER(_IO_FILE)),
	("__restrict",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_char),
	("__restrict",		ctypes.POINTER(ctypes.c_int)),] )

_IO_vfprintf = _rpythonic_function_(		"_IO_vfprintf", ctypes.c_int, [
	("__restrict",		ctypes.POINTER(_IO_FILE)),
	("__restrict",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_char),] )

rename = _rpythonic_function_(		"rename", ctypes.c_int, [
	("__old",		ctypes.POINTER(ctypes.c_char)),
	("__new",		ctypes.POINTER(ctypes.c_char)),] )

renameat = _rpythonic_function_(		"renameat", ctypes.c_int, [
	("__oldfd",		ctypes.c_int),
	("__old",		ctypes.POINTER(ctypes.c_char)),
	("__newfd",		ctypes.c_int),
	("__new",		ctypes.POINTER(ctypes.c_char)),] )

tmpfile = _rpythonic_function_(		"tmpfile", ctypes.POINTER(_IO_FILE), [] )

tmpnam = _rpythonic_function_(		"tmpnam", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

tmpnam_r = _rpythonic_function_(		"tmpnam_r", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

tempnam = _rpythonic_function_(		"tempnam", ctypes.POINTER(ctypes.c_char), [
	("__dir",		ctypes.POINTER(ctypes.c_char)),
	("__pfx",		ctypes.POINTER(ctypes.c_char)),] )

fclose = _rpythonic_function_(		"fclose", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fflush = _rpythonic_function_(		"fflush", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fflush_unlocked = _rpythonic_function_(		"fflush_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fopen = _rpythonic_function_(		"fopen", ctypes.POINTER(_IO_FILE), [
	("__filename",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

remove = _rpythonic_function_(		"remove", ctypes.c_int, [
	("__filename",		ctypes.POINTER(ctypes.c_char)),] )

_IO_seekpos = _rpythonic_function_(		"_IO_seekpos", ctypes.c_longlong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_longlong),
	("none",		ctypes.c_int),] )

_IO_free_backup_area = _rpythonic_function_(		"_IO_free_backup_area", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_IO_sgetn = _rpythonic_function_(		"_IO_sgetn", ctypes.c_uint, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_uint),] )

_IO_seekoff = _rpythonic_function_(		"_IO_seekoff", ctypes.c_longlong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_longlong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

_IO_padn = _rpythonic_function_(		"_IO_padn", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

fgetc = _rpythonic_function_(		"fgetc", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getc = _rpythonic_function_(		"getc", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

vsscanf = _rpythonic_function_(		"vsscanf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vfscanf = _rpythonic_function_(		"vfscanf", ctypes.c_int, [
	("__s",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vscanf = _rpythonic_function_(		"vscanf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )


_rpythonic_convert_structs_to_objects()

_rpythonic_setup_return_wrappers()
_rpythonic_make_nice_global_enums_()
_rpythonic_clean_up_missing_functions_()

################### Raymond Hettinger's Constant Folding ##################
# Decorator for BindingConstants at compile time
# A recipe by Raymond Hettinger, from Python Cookbook:
# http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/277940
# updated for Python3 and still compatible with Python2 - by Hart, May17th 2011

try: _BUILTINS_DICT_ = vars(__builtins__)
except: _BUILTINS_DICT_ = __builtins__
ISPYTHON2 = sys.version_info[0] == 2
_HETTINGER_FOLDS_ = 0

def _hettinger_make_constants(f, builtin_only=False, stoplist=[], verbose=0):
    from opcode import opmap, HAVE_ARGUMENT, EXTENDED_ARG
    global _HETTINGER_FOLDS_
    try:
        if ISPYTHON2: co = f.func_code; fname = f.func_name
        else: co = f.__code__; fname = f.__name__
    except AttributeError: return f        # Jython doesn't have a func_code attribute.
    if ISPYTHON2: newcode = map(ord, co.co_code)
    else: newcode = list( co.co_code )
    newconsts = list(co.co_consts)
    names = co.co_names
    codelen = len(newcode)
    if ISPYTHON2:
        if verbose >= 2: print( f.func_name )
        func_globals = f.func_globals
    else:
        if verbose >= 2: print( f.__name__ )
        func_globals = f.__globals__

    env = _BUILTINS_DICT_.copy()
    if builtin_only:
        stoplist = dict.fromkeys(stoplist)
        stoplist.update(func_globals)
    else:
        env.update(func_globals)

    # First pass converts global lookups into constants
    i = 0
    while i < codelen:
        opcode = newcode[i]
        if opcode in (EXTENDED_ARG, opmap['STORE_GLOBAL']):
            if verbose >= 1: print('skipping function', fname)
            return f    # for simplicity, only optimize common cases
        if opcode == opmap['LOAD_GLOBAL']:
            oparg = newcode[i+1] + (newcode[i+2] << 8)
            name = co.co_names[oparg]
            if name in env and name not in stoplist:
                value = env[name]
                for pos, v in enumerate(newconsts):
                    if v is value:
                        break
                else:
                    pos = len(newconsts)
                    newconsts.append(value)
                newcode[i] = opmap['LOAD_CONST']
                newcode[i+1] = pos & 0xFF
                newcode[i+2] = pos >> 8
                _HETTINGER_FOLDS_ += 1
                if verbose >= 2:
                    print( "    global constant fold:", name )
        i += 1
        if opcode >= HAVE_ARGUMENT:
            i += 2

    # Second pass folds tuples of constants and constant attribute lookups
    i = 0
    while i < codelen:

        newtuple = []
        while newcode[i] == opmap['LOAD_CONST']:
            oparg = newcode[i+1] + (newcode[i+2] << 8)
            newtuple.append(newconsts[oparg])
            i += 3

        opcode = newcode[i]
        if not newtuple:
            i += 1
            if opcode >= HAVE_ARGUMENT:
                i += 2
            continue

        if opcode == opmap['LOAD_ATTR']:
            obj = newtuple[-1]
            oparg = newcode[i+1] + (newcode[i+2] << 8)
            name = names[oparg]
            try:
                value = getattr(obj, name)
                if verbose >= 2: print( '    folding attribute', name )
            except AttributeError:
                continue
            deletions = 1

        elif opcode == opmap['BUILD_TUPLE']:
            oparg = newcode[i+1] + (newcode[i+2] << 8)
            if oparg != len(newtuple): continue
            deletions = len(newtuple)
            value = tuple(newtuple)

        else: continue

        reljump = deletions * 3
        newcode[i-reljump] = opmap['JUMP_FORWARD']
        newcode[i-reljump+1] = (reljump-3) & 0xFF
        newcode[i-reljump+2] = (reljump-3) >> 8

        n = len(newconsts)
        newconsts.append(value)
        newcode[i] = opmap['LOAD_CONST']
        newcode[i+1] = n & 0xFF
        newcode[i+2] = n >> 8
        i += 3
        _HETTINGER_FOLDS_ += 1
        if verbose >= 2:
            print( "    folded constant:",value )

    if ISPYTHON2:
        codestr = ''.join(map(chr, newcode))
        codeobj = type(co)(co.co_argcount, co.co_nlocals, co.co_stacksize,
                        co.co_flags, codestr, tuple(newconsts), co.co_names,
                        co.co_varnames, co.co_filename, co.co_name,
                        co.co_firstlineno, co.co_lnotab, co.co_freevars,
                        co.co_cellvars)
        return type(f)(codeobj, f.func_globals, f.func_name, f.func_defaults, f.func_closure)
    else:
        codestr = b''
        for s in newcode: codestr += s.to_bytes(1,'little')
        codeobj = type(co)(co.co_argcount, co.co_kwonlyargcount, co.co_nlocals, co.co_stacksize,
                        co.co_flags, codestr, tuple(newconsts), co.co_names,
                        co.co_varnames, co.co_filename, co.co_name,
                        co.co_firstlineno, co.co_lnotab, co.co_freevars,
                        co.co_cellvars)
        return type(f)(codeobj, f.__globals__, f.__name__, f.__defaults__, f.__closure__)


def hettinger_bind_recursive(mc, builtin_only=False, stoplist=[],  verbose=0):
    """Recursively apply constant binding to functions in a module or class.

    Use as the last line of the module (after everything is defined, but
    before test code).  In modules that need modifiable globals, set
    builtin_only to True.

    """
    import types
    try: d = vars(mc)
    except TypeError: return
    if ISPYTHON2: recursivetypes = (type, types.ClassType)
    else: recursivetypes = (type,)
    for k, v in d.items():
        if type(v) is types.FunctionType:
            newv = _hettinger_make_constants(v, builtin_only, stoplist,  verbose)
            setattr(mc, k, newv)
        elif type(v) in recursivetypes:
            hettinger_bind_recursive(v, builtin_only, stoplist, verbose)

def hettinger_transform( module=None ):
    global _HETTINGER_FOLDS_
    _HETTINGER_FOLDS_ = 0
    if not module: module = sys.modules[__name__]
    hettinger_bind_recursive( module, verbose=1 )
    print( 'HETTINGER: constants folded', _HETTINGER_FOLDS_ )

_rpythonic_strip_prefixes_(['fluid_'])