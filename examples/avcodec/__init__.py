## generated by RPythonic 0.4.4d
## http://code.google.com/p/rpythonic/
import os, sys, ctypes, inspect
__os = os
__sys = sys
__inspect = inspect

PYTHON_RESERVED_KEYWORDS = 'for while in as global with try except lambda return raise if else elif eval exec and not or break continue finally print yield del def class assert from is pass'.split()


IS32BIT = (ctypes.sizeof(ctypes.c_void_p)==4)

_ISPYTHON2 = sys.version_info[0] == 2
if _ISPYTHON2: _NULLBYTE = '\0'
else: _NULLBYTE = bytes( chr(0), 'ascii' )

def _CHARP2STRING( charp, encoding='utf-8' ):
	b = bytes()
	i = 0
	while True:
		char = charp[ i ]
		if char == _NULLBYTE: break
		else:
			b += char
			i += 1
	return b.decode( encoding )

## try to load precompiled c-libraries from this directory, if the library is not there try to load from the system.
_clibs_dir = os.path.dirname(os.path.abspath(__file__))

def _load_ctypes_lib( name ):
	if __os.name == 'posix':
		if __sys.platform=='linux2':
			if not name.endswith('.so'): name += '.so'
			if not name.startswith('lib'): name = 'lib' + name

			if IS32BIT: 	path = __os.path.join(_clibs_dir,'linux32')
			else: 		path = __os.path.join(_clibs_dir,'linux64')
			url = __os.path.join( path, name )
			if __os.path.isfile( url ): return ctypes.CDLL(url)
			elif __os.path.isfile( '/usr/local/lib/%s'%name ): return ctypes.CDLL('/usr/local/lib/%s'%name)
			elif __os.path.isfile( '/usr/local/lib64/%s'%name ) and not IS32BIT: return ctypes.CDLL('/usr/local/lib64/%s'%name)
			elif __os.path.isfile( '/usr/lib/%s'%name ): return ctypes.CDLL('/usr/lib/%s'%name)
			elif __os.path.isfile( './%s'%name ): return ctypes.CDLL('./%s'%name)
			else:	# fallback
				try: return ctypes.CDLL(name)
				except: return ctypes.CDLL('')

		elif sys.platform == 'darwin':
			name += '.dylib'
			if IS32BIT: 	path = os.path.join(_clibs_dir,'osx32')
			else: 		path = os.path.join(_clibs_dir,'osx64')
			url = os.path.join( path, name )
			if os.path.isfile( url ): return ctypes.CDLL(url)
			else: return ctypes.CDLL(name) #fallback

	elif os.name == 'nt':
		name += '.dll'
		if IS32BIT: 	path = os.path.join(_clibs_dir,'win32')
		else: 		path = os.path.join(_clibs_dir,'win64')
		url = os.path.join( path, name )
		if os.path.isfile( url ): return ctypes.CDLL(url)
		else: return ctypes.CDLL(name) #fallback

RPYTHONIC_WRAPPER_FUNCTIONS = {}
RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES = []
RPYTHONIC_AUTOPREFIX_IGNORE = []

## ctypes does not clearly expose these types ##
PyCFuncPtrType = type(ctypes.CFUNCTYPE(ctypes.c_void_p))
PyCArrayType = type( ctypes.c_int * 2 )
PyCPointerType = type( ctypes.POINTER(ctypes.c_int) )
PyCStructType = type( ctypes.Structure )
CArgObject = type( ctypes.byref(ctypes.c_int()) )

class _rpythonic_meta_(object):
	'''
	Reserved Attributes:
		POINTER
		CSTRUCT
		CAST
	'''
	_rpythonic_ = True		# workaround for now, must have a way to know if object is a meta from another module, isinstance(o,_rpythonic_meta_) will fail in those cases. another workaround could be check sys.modules for other rpythonic modules and fetch _rpythonic_meta_ from there.
	def __init__(self, *args, **kw ):							# cheap trick, abuse **kw, and look for "pointer", "cast"
		if kw and 'pointer' not in kw: raise SyntaxError	# sorry, you can not init with keywords
		elif kw and 'pointer' in kw:
			if 'cast' in kw and kw['cast']:
				self.POINTER = ctypes.cast( kw['pointer'], ctypes.POINTER(self.CSTRUCT) )
			else: self.POINTER = kw['pointer']
		else: self.POINTER = ctypes.pointer( self.CSTRUCT(*args) )
		self.POINTER.pyobject = self	# .pyobject is local to this pointer "object"

	def __getattr__(self,name):
		if hasattr( self.POINTER.contents, name ):
			return getattr( self.POINTER.contents, name )

		else:	# when rpythonic failed to generate good bindings - these lookups should be cached
			for parent in self._rpythonic_parent_classes_:
				if hasattr( parent, name ):
					method = getattr( parent, name )	# should check if it really is an unbound method
					func = parent._rpythonic_unbound_lookup_[ method ]
					n = func.name
					if len(func.argnames) > 1:
						argnames = func.argnames[ 1 : ]
						a = ',' + '=None,'.join( argnames ) + '=None'
						b = ','.join( argnames )
					else: a = b = ''
					lamb = eval( 'lambda self %s: %s( self.POINTER, %s )' %(a,n,b) )
					setattr( self.__class__, name, lamb )
					#return lamb	# this would return the unbound lambda, must call getattr again
					return getattr( self, name )

			## last resort, load from global name space ##
			G = globals()
			if name in G: return lambda *args: G[name](self.POINTER, *args)
			else:
				for prefix in self._autoprefix_:
					n = prefix + name
					if n in G: return lambda *args: G[n](self.POINTER, *args)
				print( 'possible auto-prefixes available', self._autoprefix_ )
				raise AttributeError

	def __call__(self, type=False):
		print('calling object is DEPRECATED - use ob.POINTER or ob.CSTRUCT')
		if type: return self.CSTRUCT
		else: return self.POINTER


def _rpythonic_generate_subclass_( name, struct, functions ):
	head = 'class %s( _rpythonic_meta_ ):' %name
	body = [ 
		'_rpythonic_parent_classes_ = []' ,
		'_rpythonic_unbound_lookup_ = {}' 
	]

	names = [ func.name for func in functions ]

	possibles = {}
	rank = []		# rank by longest name
	if len(names) > 3000: print('too many functions to use this hack')
	else:
		for n1 in names:
			prefix = ''
			for i,char in enumerate(n1):
				prefix += char
				if prefix not in possibles:
					possibles[ prefix ] = 0
					for n2 in names:
						if n2.startswith( prefix ):
							possibles[ prefix ] += 1

					if not rank or len(prefix) > len(rank[-1]) and possibles[prefix] > len(names)/4:
						rank.append( prefix )

	top = []
	while rank:
		best = rank.pop()
		if possibles[best] > len(functions)/2 and best not in names:
			if best.endswith('_set_') or best.endswith('_get_'): best = best[ : -4 ]
			elif best.endswith('Set') or best.endswith('Get'): best = best[ : -3 ]

			rem = []
			for other in rank:
				if best.startswith(other): rem.append( other )
			for r in rem: rank.remove( r )

			if best not in top: top.append( best )

		if len(top) > 3: break

	for n in names:		# find shortest prefixes #
		prefix = ''
		for i,char in enumerate(n):		# cammelCase
			if i==0: prefix += char; continue
			if char.isupper() and len(prefix) >= 2: break
			prefix += char
		if prefix and prefix != n and len(prefix) >= 2:
			hits = 0
			for other in names:
				if other.startswith( prefix ): hits += 1
			if hits >= 2 and prefix not in top:
				top.append( prefix )
				if len(top) >= 6: break

	## setup full names
	for func in functions:
		n = func.name
		if len(func.argnames) > 1:
			argnames = func.argnames[ 1 : ]
			a = ',' + '=None,'.join( argnames ) + '=None'
			b = ','.join( argnames )
		else: a = b = ''

		fhead = 'def %s( self %s ):' %(n,a)
		fbody = ['return %s(self.POINTER, %s)' %(func.name,b)]
		g = fhead + '\n\t\t' + '\n\t\t'.join( fbody )
		body.append( g )
		#body.append( '%s._rpythonic_function_ = %s' %(func.name, func.name) )

	## setup short names ##
	for n in names:
		for prefix in top:
			if n.startswith(prefix) and n[len(prefix):] not in names:
				alt = n[ len(prefix) : ]
				if alt and alt != n and alt not in PYTHON_RESERVED_KEYWORDS and not alt.isdigit() and not alt[0].isdigit():
					body.append( '%s = %s' %(alt,n) )
					names.append( alt )

	gen = head + '\n\t' + '\n\t'.join( body )
	try: exec( gen )
	except:
		print( gen )
		raise SyntaxError

	klass = locals()[name]
	klass.CSTRUCT = struct	# ctypes struct class

	klass._autoprefix_ = top
	for func in functions:
		unbound = getattr( klass, func.name )
		klass._rpythonic_unbound_lookup_[ unbound ] = func
		# klass.longname is klass.shortname = False
		# klass.longname == klass.shortname = True
	return klass

def _rpythonic_convert_structs_to_objects():
	G = globals()
	for klass in _OOAPI_:
		altname = name = klass.__name__
		prefix = ''
		for i,char in enumerate(name):
			if i==0: prefix += char; continue
			if char.isupper(): break
			prefix += char
		if prefix and prefix != name:
			hits = 0
			for other in _OOAPI_:
				if other is not klass:
					if other.__name__.startswith( prefix ): hits += 1
			if hits >= 2:
				altname = name[ len(prefix) : ]

		funcs = _OOAPI_[ klass ]
		newklass = _rpythonic_generate_subclass_( altname, klass, funcs )
		klass._rpythonic_wrapper_class_ = newklass
		G[ name ] = newklass	# replace struct with wrapper
		if altname not in G: G[ altname ] = newklass	# safely define with nicer name
		elif altname != name: # odd cases, maybe a function that returns the object, almost never happens.
			print('WARN - not replacing something with struct wrapper:', G[altname] )


def _rpythonic_setup_return_wrappers():
	R = _rpythonic_function_
	for klass in _OOAPI_:
		if klass in _OOAPI_RETURNS_OBJECT_:
			for f in _OOAPI_RETURNS_OBJECT_[klass]:
				f.object_oriented = True
				if not f.return_wrapper:	# just in case the ctypes footer had already defined it, do not overwrite
					f.return_wrapper = klass._rpythonic_wrapper_class_

def _rpythonic_function_( name, result=ctypes.c_void_p, args=[]):
	mname = '_metafunc_%s' %name
	exec( 'class %s( _rpythonic_metafunc_ ): pass' %mname )
	k = locals()[mname]
	return k( name, result, args )

_OOAPI_ = {}
_OOAPI_RETURNS_OBJECT_ = {}

class _rpythonic_metafunc_(object):
	def __init__(self, name, result=ctypes.c_void_p, args=[]):
		self.name = name
		self.result = result
		self.argtypes = []		# can dynamically change CFUNCTYPE trick
		self.argnames = []
		self.argtypestypes = []
		for i,arg in enumerate(args):
			n,t = arg
			if n in PYTHON_RESERVED_KEYWORDS: n = 'C_'+n
			if n in self.argnames: n = '%s%s' %(n,i)
			self.argnames.append( n )
			self.argtypes.append( t )
			self.argtypestypes.append( type(t) )		# precomputed for speed

		self.argnames = tuple( self.argnames )				# should never change
		self.numargs = len( self.argtypes )
		self.callbacks = [None] * self.numargs
		self.return_wrapper = None
		self.object_oriented = False
		self.function = None
		try:
			func = self.function = getattr(CTYPES_DLL, self.name )
			RPYTHONIC_WRAPPER_FUNCTIONS[ name ] = self
		except:
			RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES.append( name )
		if self.function: self.reset()

	def change_argument_type( self, name, t ):
		idx = self.argnames.index( name )
		self.argtypes[ idx ] = t
		self.argtypestypes[ idx ] = type(t)
		self.function.argtypes = self.argtypes

	def reset(self):
		if self.argnames:
			a = ',' + '=None,'.join( self.argnames ) + '=None'
			b = ','.join( self.argnames )
		else: a = b = ''

		callmeth = eval( 'lambda self %s: self._call_( %s )' %(a,b) )
		setattr( self.__class__, '__call__', callmeth )

		self.function.restype = self.result
		self.function.argtypes = self.argtypes

		if type( self.result ) is PyCPointerType and type(self.result._type_) is PyCStructType:
			klass = self.result._type_
			if klass not in _OOAPI_RETURNS_OBJECT_: _OOAPI_RETURNS_OBJECT_[klass] = []
			_OOAPI_RETURNS_OBJECT_[klass].append( self )

		self.defaults = []
		for i in range( self.numargs ):
			T = self.argtypes[ i ]
			if type(T) is PyCFuncPtrType:
				p = T()	# func pointers can not be None
				self.defaults.append( p )
				self.callbacks[ i ] = p					# save reference
			elif T in (ctypes.c_int, ctypes.c_uint, ctypes.c_long, ctypes.c_ulong):
				self.defaults.append( 0 )
			elif T in (ctypes.c_float, ctypes.c_double):
				self.defaults.append( .0 )
			else: self.defaults.append( None )	# None is allowed for all other types

			## generate OO API ##
			if i == 0 and type(T) is PyCPointerType and type(T._type_) is PyCStructType:
				klass = T._type_
				if klass not in _OOAPI_: _OOAPI_[ klass ] = []
				_OOAPI_[ klass ].append( self )

	def _call_( self, *args ):			# allow flexible calling types
		cargs = list( self.defaults )
		for i,arg in enumerate(args):
			if isinstance( arg, _rpythonic_meta_ ): arg = arg.POINTER
			elif hasattr( arg, '_rpythonic_' ): arg = arg.POINTER		# workaround - instance from another module

			t = type(arg)
			k = self.argtypes[ i ]
			kt = self.argtypestypes[ i ]
			if arg is None and cargs[i] is not None:	# use user defaults, very rare cases
				continue

			elif t is bool and k is ctypes.c_int:
				if arg: cargs[i] = 1	#ctypes.c_int(1)
				else: cargs[i] = 0	#ctypes.c_int(0)

			elif t in (list,tuple):				# convert lists and tuples into array
				if kt is PyCArrayType:
					cargs[ i ] = k(*arg)
				elif kt is PyCStructType:
					if k._array_wrapper_: cargs[ i ] = k(arg)	# allow easy array init
					else: cargs[ i ] = k(*arg)							# allow multiple args
				elif kt is PyCPointerType:
					cargs[ i ] = _convert_nested_list_to_pointer( k, arg )
				else: assert 0

			elif isinstance( arg, ctypes._Pointer ) and t is not k and kt is PyCPointerType:
				cargs[ i ] = ctypes.cast( arg, k )		# generic's that need to be cast

			elif kt is PyCStructType and isinstance( arg, ctypes._Pointer ):
				cargs[ i ] = arg.contents	# fixed may25

			elif kt is PyCPointerType and not isinstance( arg, (ctypes._Pointer,CArgObject) ):
				if t in (int,float,bool): ptr = k( k._type_(arg) )
				elif t is str:
					arg = arg.encode('utf-8')
					#ptr = k( k._type_() )								# not k() otherwise null pointer error
					#for j, char in enumerate(arg): ptr[ j ] = char		# not correct - missing null byte?
					ptr = ctypes.create_string_buffer(arg)				# correct and pypy compatible
				elif t in (PyCStructType, PyCArrayType):
					ptr = ctypes.cast( ctypes.pointer( arg ), k )
				else:
					ptr = arg	# TODO print warning?
				cargs[ i ] = ptr

			elif kt is PyCFuncPtrType:
				if t.__name__ == 'CFunctionType': cargs[ i ] = arg		# assume outside holds pointer
				else:													# this is not safe #
					cargs[ i ] = self.callbacks[ i ] = k( arg )				# assume arg is a callable
			else:
				cargs[ i ] = arg		# directly pass

		## if you define your own return_wrapper, it must take keyword "pointer"
		if self.return_wrapper: return self.return_wrapper( pointer=self.function( *cargs ) )
		else: return self.function( *cargs )



def _convert_nested_list_to_pointer( k, arg ):
	depth = 0; s = k
	while True:
		if type(s) is PyCPointerType:
			s = getattr( s, '_type_' )
			depth += 1
		else: break
	assert depth and depth <= 2
	if depth == 1:
		T = k._type_
		ptr = k( k._type_() )
		for i in range( len(arg) ):
			ptr[ i ] = T( *arg[i] )
	elif depth == 2:
		T = k._type_._type_
		_ptr = k._type_( k._type_._type_() )
		for i in range(len( arg )):
			for j in range( len(arg[i]) ):
				_ptr[ j ] = T( *arg[ i ][ j ] )
		ptr = k( _ptr )
	return ptr


def __freeze_rpythonic_struct( cls, fields ):
	if cls not in _OOAPI_: _OOAPI_[ cls ] = []	# wrap all structs
	try: setattr( cls, '_fields_', fields )
	except:
		print( 'WARN - bad order struct freeze', cls )
		#cls._fields_ = []

class _rpythonic_struct_( ctypes.Structure ):
	_array_wrapper_ = False
	_fields_ = []
	_methods_ = {}
	#def __call__(self): return self
	def __init__(self, *args, **kw ):
		cargs = []
		argtypes = []
		for a in self._fields_: argtypes.append( a[1] )
		if len(args) > len(argtypes): args = [args]	# allow both calling conventions
		for i,arg in enumerate( args ):
			if isinstance( arg, _rpythonic_meta_ ): arg = arg.POINTER

			t = type(arg)
			k = argtypes[ i ]
			if t in (list,tuple):
				if k.__class__.__name__	== 'PyCArrayType':
					cargs.append( k(*arg) )
				elif k.__class__.__name__ == 'PyCStructType':
					if k._array_wrapper_: cargs.append( k(arg) )	# allow easy array init
					else: cargs.append( k(*arg) )							# allow multiple args
			elif isinstance( arg, ctypes._Pointer ) and t is not k:
				cargs[ i ] = ctypes.cast( arg, k )	# generic's that need to be cast
			elif k.__class__.__name__ == 'PyCArrayType' and t in (float,int,bool):
				cargs.append( k(arg) )		# support init array from single value
			else:
				cargs.append( arg )		# directly pass

		ctypes.Structure.__init__(self, *cargs, **kw)


def _rpythonic_make_nice_global_enums_():
	G = globals()
	for name in RPYTHONIC_GLOBAL_ENUMS:
		if '_' in name and name.index('_') <= 4:
			altname = name[ name.index('_') + 1 : ]
			if altname not in G:
				G[altname] = RPYTHONIC_GLOBAL_ENUMS[ name ]

def _rpythonic_clean_up_missing_functions_():
	G = globals()
	for f in RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES:
		G.pop( f )
	print( "C functions loaded: %s" %len(RPYTHONIC_WRAPPER_FUNCTIONS) )
	print( "C functions failed: %s" %len(RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES) )



###### NEW API #########
CTYPES_DLL = None

class _VOID_POINTER_CONTAINER_(object):
	def __init__(self, ptr, name=None):
		self._pointer_ = ptr
		self.name = name
NULL = _VOID_POINTER_CONTAINER_(None,'<null pointer>')


class meta:	# NEW API - allow run time switch from ctypes to rffi
	'''
	Methods:
		RPython will not allow object wrapper around a method (__call__ not allowed)
		keep C function names in list "__cfunctions__"
		rpythonic.enable_rffi( classA, classB )	
		can take advantage of methods in object-method-wrapper,
		generate rffi wrapper and set method on classA, etc.
		replaces object-method-wrapper with rffi-method

	Properties:
		CPython: obj.x=1
		RPython: obj.set_x(1)	
	'''
	METAS = []
	def __init__(self, constructors=[], methods={}, properties={}):
		global CTYPES_DLL
		if not CTYPES_DLL:
			CTYPES_DLL = _load_ctypes_lib( _clib_name_ )

		self.constructors = constructors
		self.methods = methods
		self.properties = properties
		self.METAS.append( self )



	def __call__(self, cls ):
		print('@meta', cls )

		if not self.constructors:
			lamb = lambda s, _explicit_pointer_=None: setattr(s,'_pointer_',getattr(_explicit_pointer_,'_pointer_')) if hasattr(_explicit_pointer_,'_pointer_') else setattr(s,'_pointer_',_explicit_pointer_)
			lamb._debug = '(no constructor)'
			setattr( cls, '__init__', lamb )
		else:
			con = self._find_best_function( self.constructors )
			cfunc = self._build_cfunc( con )
			setattr( cls, '_%s'%con['name'], cfunc )
			g = self._gen_init( con )
			setattr( cls, '__init__', g )
		
		## set methods ##
		for name in self.methods:
			meth = self.methods[ name ]
			cfuncs = []
			for m in meth['functions']:
				cfunc = self._build_cfunc( m, method=True, static=meth['static'] )
				self._setup_return( cfunc, meth )
				setattr( cls, '_%s'%m['name'], cfunc )
				cfuncs.append( cfunc )

			f = self._find_best_function( meth['functions'] )
			g = self._gen_method( meth, f )
			g._cfuncs = cfuncs
			if meth['static']: g = classmethod( g )
			setattr( cls, name, g )

		for name in self.properties:
			print( 'property:', name )
			p = []
			for f in self.properties[name]:
				cfunc = self._build_cfunc( f )
				setattr( cls, '_%s'%f['name'], cfunc )
				g = self._gen_method( f, f )
				p.append( g )

			setattr( cls, name, property(*p) )

		return cls


	@staticmethod
	def _build_cfunc( info, method=False, static=False ):
		cfunc = getattr(CTYPES_DLL, info['name'])
		if method and not static: argtypes = [ ctypes.c_void_p ]
		else: argtypes = []
		for p in info['parameters']: argtypes.append( eval(p['ctypes_type']) )
		cfunc.argtypes = argtypes
		return cfunc

	@staticmethod
	def _setup_return( cfunc, info ):
		if not info['returns_fundamental']:
			cfunc.restype = ctypes.c_void_p
		elif info['returns_fundamental']:
			cfunc.restype = eval( info['returns_ctypes'] )
		else:
			cfunc.restype = ctypes.c_void_p

	@staticmethod
	def _gen_prepare_args( m ):
		a = []; b = []
		for i,p in enumerate(m['parameters']):
			if 'name' in p: n = p['name']
			else: n = '_unnamed_%s' %i
			if '<' in n: n = '_TODOfixme_%s' %i
			if n in PYTHON_RESERVED_KEYWORDS: n += str(i)
			if p['fundamental']:
				b.append( n )
				s = p['raw_type'].split()
				if 'default' in p:
					d = p['default']
					if p['raw_type'] in ('float', 'double'):
						if d.endswith('f'): d = d[:-1]
						d = d.replace(' ', '.')
						if 'e' in d: d = 0.0
						try: d = float(d)
						except: d = 0.0
					elif ('int' in s or 'size_t' in s) and not d.isdigit(): d = 0
					elif 'char' in s and '"' not in d: d = '""'
					elif d.lower() == 'false': d = False
					elif d.lower() == 'true': d = True
				elif 'char' in s: d = '""'
				elif 'float' in s or 'double' in s: d = 0.0
				elif 'size_t' in s or 'int' in s or 'long' in s or 'short' in s: d = 0
				elif p['raw_type'] == 'bool': d = False
				elif p['raw_type'] in ('void', '(template)'): d = 'NULL'
				else: print( p )
				a.append( n+'=%s' %d )

			else:
				b.append( '%s._pointer_'%n )
				a.append( n+'=NULL' )
		return a, b

	@staticmethod
	def _gen_init( m ):
		a, b = meta._gen_prepare_args( m )
		if a: e = 'lambda _py_self_, %s, _explicit_pointer_=None: ' %(','.join(a))
		else: e = 'lambda _py_self_, _explicit_pointer_=None: '
		e += 'setattr(_py_self_, "_pointer_", _py_self_._%s(%s))' %( m['name'], ','.join(b) )
		e += ' if not _explicit_pointer_ else '
		e += 'setattr(_py_self_, "_pointer_", _explicit_pointer_)'
		print( e )
		lamb = eval( e ); lamb._debug = e; lamb._introspect = m
		return lamb

	@staticmethod
	def _find_best_function( funcs ):
		best = funcs[0]
		score = -1
		if len(funcs) > 1:
			for f in funcs:
				hits = 0
				for p in f['parameters']:
					if p['fundamental']: hits += 1
				if hits and hits == len( f['parameters'] ):
					if hits > score:
						score = hits
						best = f
		return best

	@staticmethod
	def _gen_method( m, f ):
		a, b = meta._gen_prepare_args( f )
		if a: e = 'lambda _py_self_, %s: ' %(','.join(a))
		else: e = 'lambda _py_self_: '

		if 'static' in m and m['static']:	# static in c++ is like a classmethod
			c = '_py_self_._%s( %s )' %( f['name'], ','.join(b) )
		else:
			c = '_py_self_._%s( _py_self_._pointer_, %s )' %( f['name'], ','.join(b) )

		if not m['returns_fundamental']:
			if 'returns_unknown' in m or '<' in m['returns']: c = '_VOID_POINTER_CONTAINER_( %s, name="%s" )' %(c,m['returns'])
			else:
				something = m['returns'].replace('::', '.')
				c = '%s( _explicit_pointer_=%s )' %(something, c)

		e += c; lamb = eval( e )
		lamb._debug = e; lamb._introspect = f
		return lamb


	META_FUNCTIONS = []
	@classmethod
	def function( self, info ):
		print('@meta.function', info['name'] )
		global CTYPES_DLL
		if not CTYPES_DLL:
			CTYPES_DLL = _load_ctypes_lib( _clib_name_ )

		cfunc = self._build_cfunc( info, method=False, static=True )
		setattr( meta, '_%s'%info['name'], cfunc )
		self._setup_return( cfunc, info )
		a, b = meta._gen_prepare_args( info )
		e = 'lambda %s: ' %(','.join(a))
		c = 'meta._%s( %s )' %( info['name'], ','.join(b) )

		if not info['returns_fundamental']:
			if 'returns_unknown' in info or '<' in info['returns']:
				c = '_VOID_POINTER_CONTAINER_( %s, name="%s" )' %(c,info['returns'])
			else:
				something = info['returns'].replace('::', '.')
				c = '%s( _explicit_pointer_=%s )' %(something, c)
		e += c
		lamb = eval( e )
		lamb._debug = e
		lamb._introspect = info
		return lamb



def _rpythonic_strip_prefixes_( prefixes ):
	G = globals()
	names = list(G.keys())	# ensure list in py3
	for name in names:
		for prefix in prefixes:
			if name.startswith( prefix ):
				newname = name[ len(prefix) : ]
				if newname and newname not in G:
					G[ newname ] = G[ name ]






_clib_name_ = 'libavcodec'
print('loading lib', _clib_name_)
print( os.path.abspath( os.path.curdir ) )
CTYPES_DLL = _load_ctypes_lib( _clib_name_ )
assert CTYPES_DLL
print( CTYPES_DLL._name )

## macro globals ##
LIBAVCODEC_VERSION_MAJOR = 52
LIBAVCODEC_VERSION_MINOR = 72
LIBAVCODEC_VERSION_MICRO = 2
AV_NOPTS_VALUE = 9223372036854775808
AV_TIME_BASE = 1000000
CH_FRONT_LEFT = 1
CH_FRONT_RIGHT = 2
CH_FRONT_CENTER = 4
CH_LOW_FREQUENCY = 8
CH_BACK_LEFT = 16
CH_BACK_RIGHT = 32
CH_FRONT_LEFT_OF_CENTER = 64
CH_FRONT_RIGHT_OF_CENTER = 128
CH_BACK_CENTER = 256
CH_SIDE_LEFT = 512
CH_SIDE_RIGHT = 1024
CH_TOP_CENTER = 2048
CH_TOP_FRONT_LEFT = 4096
CH_TOP_FRONT_CENTER = 8192
CH_TOP_FRONT_RIGHT = 16384
CH_TOP_BACK_LEFT = 32768
CH_TOP_BACK_CENTER = 65536
CH_TOP_BACK_RIGHT = 131072
CH_STEREO_LEFT = 536870912
CH_STEREO_RIGHT = 1073741824
CH_LAYOUT_MONO = 4
CH_LAYOUT_STEREO = 3
CH_LAYOUT_2_1 = 259
CH_LAYOUT_SURROUND = 7
CH_LAYOUT_4POINT0 = 263
CH_LAYOUT_2_2 = 1539
CH_LAYOUT_QUAD = 51
CH_LAYOUT_5POINT0 = 1543
CH_LAYOUT_5POINT1 = 1551
CH_LAYOUT_5POINT0_BACK = 55
CH_LAYOUT_5POINT1_BACK = 63
CH_LAYOUT_7POINT0 = 1591
CH_LAYOUT_7POINT1 = 1599
CH_LAYOUT_7POINT1_WIDE = 255
CH_LAYOUT_STEREO_DOWNMIX = 1610612736
AVCODEC_MAX_AUDIO_FRAME_SIZE = 192000
FF_INPUT_BUFFER_PADDING_SIZE = 8
FF_MIN_BUFFER_SIZE = 16384
FF_MAX_B_FRAMES = 16
CODEC_FLAG_QSCALE = 2
CODEC_FLAG_4MV = 4
CODEC_FLAG_QPEL = 16
CODEC_FLAG_GMC = 32
CODEC_FLAG_MV0 = 64
CODEC_FLAG_PART = 128
CODEC_FLAG_INPUT_PRESERVED = 256
CODEC_FLAG_PASS1 = 512
CODEC_FLAG_PASS2 = 1024
CODEC_FLAG_EXTERN_HUFF = 4096
CODEC_FLAG_GRAY = 8192
CODEC_FLAG_EMU_EDGE = 16384
CODEC_FLAG_PSNR = 32768
CODEC_FLAG_TRUNCATED = 65536
CODEC_FLAG_NORMALIZE_AQP = 131072
CODEC_FLAG_INTERLACED_DCT = 262144
CODEC_FLAG_LOW_DELAY = 524288
CODEC_FLAG_ALT_SCAN = 1048576
CODEC_FLAG_GLOBAL_HEADER = 4194304
CODEC_FLAG_BITEXACT = 8388608
CODEC_FLAG_AC_PRED = 16777216
CODEC_FLAG_H263P_UMV = 33554432
CODEC_FLAG_CBP_RD = 67108864
CODEC_FLAG_QP_RD = 134217728
CODEC_FLAG_H263P_AIV = 8
CODEC_FLAG_OBMC = 1
CODEC_FLAG_LOOP_FILTER = 2048
CODEC_FLAG_H263P_SLICE_STRUCT = 268435456
CODEC_FLAG_INTERLACED_ME = 536870912
CODEC_FLAG_SVCD_SCAN_OFFSET = 1073741824
CODEC_FLAG_CLOSED_GOP = 2147483648
CODEC_FLAG2_FAST = 1
CODEC_FLAG2_STRICT_GOP = 2
CODEC_FLAG2_NO_OUTPUT = 4
CODEC_FLAG2_LOCAL_HEADER = 8
CODEC_FLAG2_BPYRAMID = 16
CODEC_FLAG2_WPRED = 32
CODEC_FLAG2_MIXED_REFS = 64
CODEC_FLAG2_8X8DCT = 128
CODEC_FLAG2_FASTPSKIP = 256
CODEC_FLAG2_AUD = 512
CODEC_FLAG2_BRDO = 1024
CODEC_FLAG2_INTRA_VLC = 2048
CODEC_FLAG2_MEMC_ONLY = 4096
CODEC_FLAG2_DROP_FRAME_TIMECODE = 8192
CODEC_FLAG2_SKIP_RD = 16384
CODEC_FLAG2_CHUNKS = 32768
CODEC_FLAG2_NON_LINEAR_QUANT = 65536
CODEC_FLAG2_BIT_RESERVOIR = 131072
CODEC_FLAG2_MBTREE = 262144
CODEC_FLAG2_PSY = 524288
CODEC_FLAG2_SSIM = 1048576
CODEC_CAP_DRAW_HORIZ_BAND = 1
CODEC_CAP_DR1 = 2
CODEC_CAP_PARSE_ONLY = 4
CODEC_CAP_TRUNCATED = 8
CODEC_CAP_HWACCEL = 16
CODEC_CAP_DELAY = 32
CODEC_CAP_SMALL_LAST_FRAME = 64
CODEC_CAP_HWACCEL_VDPAU = 128
CODEC_CAP_SUBFRAMES = 256
CODEC_CAP_EXPERIMENTAL = 512
MB_TYPE_INTRA4x4 = 1
MB_TYPE_INTRA16x16 = 2
MB_TYPE_INTRA_PCM = 4
MB_TYPE_16x16 = 8
MB_TYPE_16x8 = 16
MB_TYPE_8x16 = 32
MB_TYPE_8x8 = 64
MB_TYPE_INTERLACED = 128
MB_TYPE_DIRECT2 = 256
MB_TYPE_ACPRED = 512
MB_TYPE_GMC = 1024
MB_TYPE_SKIP = 2048
MB_TYPE_P0L0 = 4096
MB_TYPE_P1L0 = 8192
MB_TYPE_P0L1 = 16384
MB_TYPE_P1L1 = 32768
MB_TYPE_QUANT = 65536
MB_TYPE_CBP = 131072
FF_QSCALE_TYPE_MPEG1 = 0
FF_QSCALE_TYPE_MPEG2 = 1
FF_QSCALE_TYPE_H264 = 2
FF_QSCALE_TYPE_VP56 = 3
FF_BUFFER_TYPE_INTERNAL = 1
FF_BUFFER_TYPE_USER = 2
FF_BUFFER_TYPE_SHARED = 4
FF_BUFFER_TYPE_COPY = 8
FF_I_TYPE = 1
FF_P_TYPE = 2
FF_B_TYPE = 3
FF_S_TYPE = 4
FF_SI_TYPE = 5
FF_SP_TYPE = 6
FF_BI_TYPE = 7
FF_BUFFER_HINTS_VALID = 1
FF_BUFFER_HINTS_READABLE = 2
FF_BUFFER_HINTS_PRESERVE = 4
FF_BUFFER_HINTS_REUSABLE = 8
AV_PKT_FLAG_KEY = 1
PKT_FLAG_KEY = 1
FF_ASPECT_EXTENDED = 15
FF_RC_STRATEGY_XVID = 1
FF_BUG_AUTODETECT = 1
FF_BUG_OLD_MSMPEG4 = 2
FF_BUG_XVID_ILACE = 4
FF_BUG_UMP4 = 8
FF_BUG_NO_PADDING = 16
FF_BUG_AMV = 32
FF_BUG_AC_VLC = 0
FF_BUG_QPEL_CHROMA = 64
FF_BUG_STD_QPEL = 128
FF_BUG_QPEL_CHROMA2 = 256
FF_BUG_DIRECT_BLOCKSIZE = 512
FF_BUG_EDGE = 1024
FF_BUG_HPEL_CHROMA = 2048
FF_BUG_DC_CLIP = 4096
FF_BUG_MS = 8192
FF_BUG_TRUNCATED = 16384
FF_COMPLIANCE_VERY_STRICT = 2
FF_COMPLIANCE_STRICT = 1
FF_COMPLIANCE_NORMAL = 0
FF_COMPLIANCE_INOFFICIAL = -1
FF_COMPLIANCE_EXPERIMENTAL = -2
FF_ER_CAREFUL = 1
FF_ER_COMPLIANT = 2
FF_ER_AGGRESSIVE = 3
FF_ER_VERY_AGGRESSIVE = 4
FF_DCT_AUTO = 0
FF_DCT_FASTINT = 1
FF_DCT_INT = 2
FF_DCT_MMX = 3
FF_DCT_MLIB = 4
FF_DCT_ALTIVEC = 5
FF_DCT_FAAN = 6
FF_IDCT_AUTO = 0
FF_IDCT_INT = 1
FF_IDCT_SIMPLE = 2
FF_IDCT_SIMPLEMMX = 3
FF_IDCT_LIBMPEG2MMX = 4
FF_IDCT_PS2 = 5
FF_IDCT_MLIB = 6
FF_IDCT_ARM = 7
FF_IDCT_ALTIVEC = 8
FF_IDCT_SH4 = 9
FF_IDCT_SIMPLEARM = 10
FF_IDCT_H264 = 11
FF_IDCT_VP3 = 12
FF_IDCT_IPP = 13
FF_IDCT_XVIDMMX = 14
FF_IDCT_CAVS = 15
FF_IDCT_SIMPLEARMV5TE = 16
FF_IDCT_SIMPLEARMV6 = 17
FF_IDCT_SIMPLEVIS = 18
FF_IDCT_WMV2 = 19
FF_IDCT_FAAN = 20
FF_IDCT_EA = 21
FF_IDCT_SIMPLENEON = 22
FF_IDCT_SIMPLEALPHA = 23
FF_IDCT_BINK = 24
FF_EC_GUESS_MVS = 1
FF_EC_DEBLOCK = 2
FF_MM_FORCE = 2147483648
FF_MM_MMX = 1
FF_MM_3DNOW = 4
FF_MM_MMXEXT = 2
FF_MM_MMX2 = 2
FF_MM_SSE = 8
FF_MM_SSE2 = 16
FF_MM_3DNOWEXT = 32
FF_MM_SSE3 = 64
FF_MM_SSSE3 = 128
FF_MM_SSE4 = 256
FF_MM_SSE42 = 512
FF_MM_IWMMXT = 256
FF_MM_ALTIVEC = 1
FF_PRED_LEFT = 0
FF_PRED_PLANE = 1
FF_PRED_MEDIAN = 2
FF_DEBUG_PICT_INFO = 1
FF_DEBUG_RC = 2
FF_DEBUG_BITSTREAM = 4
FF_DEBUG_MB_TYPE = 8
FF_DEBUG_QP = 16
FF_DEBUG_MV = 32
FF_DEBUG_DCT_COEFF = 64
FF_DEBUG_SKIP = 128
FF_DEBUG_STARTCODE = 256
FF_DEBUG_PTS = 512
FF_DEBUG_ER = 1024
FF_DEBUG_MMCO = 2048
FF_DEBUG_BUGS = 4096
FF_DEBUG_VIS_QP = 8192
FF_DEBUG_VIS_MB_TYPE = 16384
FF_DEBUG_BUFFERS = 32768
FF_DEBUG_VIS_MV_P_FOR = 1
FF_DEBUG_VIS_MV_B_FOR = 2
FF_DEBUG_VIS_MV_B_BACK = 4
FF_CMP_SAD = 0
FF_CMP_SSE = 1
FF_CMP_SATD = 2
FF_CMP_DCT = 3
FF_CMP_PSNR = 4
FF_CMP_BIT = 5
FF_CMP_RD = 6
FF_CMP_ZERO = 7
FF_CMP_VSAD = 8
FF_CMP_VSSE = 9
FF_CMP_NSSE = 10
FF_CMP_W53 = 11
FF_CMP_W97 = 12
FF_CMP_DCTMAX = 13
FF_CMP_DCT264 = 14
FF_CMP_CHROMA = 256
FF_DTG_AFD_SAME = 8
FF_DTG_AFD_4_3 = 9
FF_DTG_AFD_16_9 = 10
FF_DTG_AFD_14_9 = 11
FF_DTG_AFD_4_3_SP_14_9 = 13
FF_DTG_AFD_16_9_SP_14_9 = 14
FF_DTG_AFD_SP_4_3 = 15
FF_DEFAULT_QUANT_BIAS = 999999
FF_LAMBDA_SHIFT = 7
FF_LAMBDA_SCALE = 128
FF_QP2LAMBDA = 118
FF_LAMBDA_MAX = 32767
FF_QUALITY_SCALE = 128
FF_CODER_TYPE_VLC = 0
FF_CODER_TYPE_AC = 1
FF_CODER_TYPE_RAW = 2
FF_CODER_TYPE_RLE = 3
FF_CODER_TYPE_DEFLATE = 4
SLICE_FLAG_CODED_ORDER = 1
SLICE_FLAG_ALLOW_FIELD = 2
SLICE_FLAG_ALLOW_PLANE = 4
FF_MB_DECISION_SIMPLE = 0
FF_MB_DECISION_BITS = 1
FF_MB_DECISION_RD = 2
FF_AA_AUTO = 0
FF_AA_FASTINT = 1
FF_AA_INT = 2
FF_AA_FLOAT = 3
FF_PROFILE_UNKNOWN = -99
FF_PROFILE_AAC_MAIN = 0
FF_PROFILE_AAC_LOW = 1
FF_PROFILE_AAC_SSR = 2
FF_PROFILE_AAC_LTP = 3
FF_PROFILE_H264_BASELINE = 66
FF_PROFILE_H264_MAIN = 77
FF_PROFILE_H264_EXTENDED = 88
FF_PROFILE_H264_HIGH = 100
FF_PROFILE_H264_HIGH_10 = 110
FF_PROFILE_H264_HIGH_422 = 122
FF_PROFILE_H264_HIGH_444 = 244
FF_PROFILE_H264_CAVLC_444 = 44
FF_LEVEL_UNKNOWN = -99
X264_PART_I4X4 = 1
X264_PART_I8X8 = 2
X264_PART_P8X8 = 16
X264_PART_P4X4 = 32
X264_PART_B8X8 = 256
FF_COMPRESSION_DEFAULT = -1
AVPALETTE_SIZE = 1024
AVPALETTE_COUNT = 256
FF_LOSS_RESOLUTION = 1
FF_LOSS_DEPTH = 2
FF_LOSS_COLORSPACE = 4
FF_LOSS_ALPHA = 8
FF_LOSS_COLORQUANT = 16
FF_LOSS_CHROMA = 32
FF_ALPHA_TRANSP = 1
FF_ALPHA_SEMI_TRANSP = 2
AV_PARSER_PTS_NB = 4
PARSER_FLAG_COMPLETE_FRAMES = 1
## enums ##
AVMediaType = { 
	"AVMEDIA_TYPE_UNKNOWN" : -1, 
	"AVMEDIA_TYPE_VIDEO" : 0, 
	"AVMEDIA_TYPE_AUDIO" : 1, 
	"AVMEDIA_TYPE_DATA" : 2, 
	"AVMEDIA_TYPE_SUBTITLE" : 3, 
	"AVMEDIA_TYPE_ATTACHMENT" : 4, 
	"AVMEDIA_TYPE_NB" : 5, 
}

ISupper = 0 
ISlower = 1 
ISalpha = 2 
ISdigit = 3 
ISxdigit = 4 
ISspace = 5 
ISprint = 6 
ISgraph = 7 
ISblank = 8 
IScntrl = 9 
ISpunct = 10 
ISalnum = 11 

FP_NAN = 0 
FP_INFINITE = 1 
FP_ZERO = 2 
FP_SUBNORMAL = 3 
FP_NORMAL = 4 

IEEE_ = -1 
SVID_ = 0 
XOPEN_ = 1 
POSIX_ = 2 
ISOC_ = 3 

_codecvt_result = { 
	"__codecvt_ok" : 0, 
	"__codecvt_partial" : 1, 
	"__codecvt_error" : 2, 
	"__codecvt_noconv" : 3, 
}

AVRounding = { 
	"AV_ROUND_ZERO" : 0, 
	"AV_ROUND_INF" : 1, 
	"AV_ROUND_DOWN" : 2, 
	"AV_ROUND_UP" : 3, 
	"AV_ROUND_NEAR_INF" : 5, 
}

PixelFormat = { 
	"PIX_FMT_NONE" : -1, 
	"PIX_FMT_YUV420P" : 0, 
	"PIX_FMT_YUYV422" : 1, 
	"PIX_FMT_RGB24" : 2, 
	"PIX_FMT_BGR24" : 3, 
	"PIX_FMT_YUV422P" : 4, 
	"PIX_FMT_YUV444P" : 5, 
	"PIX_FMT_YUV410P" : 6, 
	"PIX_FMT_YUV411P" : 7, 
	"PIX_FMT_GRAY8" : 8, 
	"PIX_FMT_MONOWHITE" : 9, 
	"PIX_FMT_MONOBLACK" : 10, 
	"PIX_FMT_PAL8" : 11, 
	"PIX_FMT_YUVJ420P" : 12, 
	"PIX_FMT_YUVJ422P" : 13, 
	"PIX_FMT_YUVJ444P" : 14, 
	"PIX_FMT_XVMC_MPEG2_MC" : 15, 
	"PIX_FMT_XVMC_MPEG2_IDCT" : 16, 
	"PIX_FMT_UYVY422" : 17, 
	"PIX_FMT_UYYVYY411" : 18, 
	"PIX_FMT_BGR8" : 19, 
	"PIX_FMT_BGR4" : 20, 
	"PIX_FMT_BGR4_BYTE" : 21, 
	"PIX_FMT_RGB8" : 22, 
	"PIX_FMT_RGB4" : 23, 
	"PIX_FMT_RGB4_BYTE" : 24, 
	"PIX_FMT_NV12" : 25, 
	"PIX_FMT_NV21" : 26, 
	"PIX_FMT_ARGB" : 27, 
	"PIX_FMT_RGBA" : 28, 
	"PIX_FMT_ABGR" : 29, 
	"PIX_FMT_BGRA" : 30, 
	"PIX_FMT_GRAY16BE" : 31, 
	"PIX_FMT_GRAY16LE" : 32, 
	"PIX_FMT_YUV440P" : 33, 
	"PIX_FMT_YUVJ440P" : 34, 
	"PIX_FMT_YUVA420P" : 35, 
	"PIX_FMT_VDPAU_H264" : 36, 
	"PIX_FMT_VDPAU_MPEG1" : 37, 
	"PIX_FMT_VDPAU_MPEG2" : 38, 
	"PIX_FMT_VDPAU_WMV3" : 39, 
	"PIX_FMT_VDPAU_VC1" : 40, 
	"PIX_FMT_RGB48BE" : 41, 
	"PIX_FMT_RGB48LE" : 42, 
	"PIX_FMT_RGB565BE" : 43, 
	"PIX_FMT_RGB565LE" : 44, 
	"PIX_FMT_RGB555BE" : 45, 
	"PIX_FMT_RGB555LE" : 46, 
	"PIX_FMT_BGR565BE" : 47, 
	"PIX_FMT_BGR565LE" : 48, 
	"PIX_FMT_BGR555BE" : 49, 
	"PIX_FMT_BGR555LE" : 50, 
	"PIX_FMT_VAAPI_MOCO" : 51, 
	"PIX_FMT_VAAPI_IDCT" : 52, 
	"PIX_FMT_VAAPI_VLD" : 53, 
	"PIX_FMT_YUV420P16LE" : 54, 
	"PIX_FMT_YUV420P16BE" : 55, 
	"PIX_FMT_YUV422P16LE" : 56, 
	"PIX_FMT_YUV422P16BE" : 57, 
	"PIX_FMT_YUV444P16LE" : 58, 
	"PIX_FMT_YUV444P16BE" : 59, 
	"PIX_FMT_VDPAU_MPEG4" : 60, 
	"PIX_FMT_DXVA2_VLD" : 61, 
	"PIX_FMT_RGB444BE" : 62, 
	"PIX_FMT_RGB444LE" : 63, 
	"PIX_FMT_BGR444BE" : 64, 
	"PIX_FMT_BGR444LE" : 65, 
	"PIX_FMT_Y400A" : 66, 
	"PIX_FMT_NB" : 67, 
}

CodecID = { 
	"CODEC_ID_NONE" : 0, 
	"CODEC_ID_MPEG1VIDEO" : 1, 
	"CODEC_ID_MPEG2VIDEO" : 2, 
	"CODEC_ID_MPEG2VIDEO_XVMC" : 3, 
	"CODEC_ID_H261" : 4, 
	"CODEC_ID_H263" : 5, 
	"CODEC_ID_RV10" : 6, 
	"CODEC_ID_RV20" : 7, 
	"CODEC_ID_MJPEG" : 8, 
	"CODEC_ID_MJPEGB" : 9, 
	"CODEC_ID_LJPEG" : 10, 
	"CODEC_ID_SP5X" : 11, 
	"CODEC_ID_JPEGLS" : 12, 
	"CODEC_ID_MPEG4" : 13, 
	"CODEC_ID_RAWVIDEO" : 14, 
	"CODEC_ID_MSMPEG4V1" : 15, 
	"CODEC_ID_MSMPEG4V2" : 16, 
	"CODEC_ID_MSMPEG4V3" : 17, 
	"CODEC_ID_WMV1" : 18, 
	"CODEC_ID_WMV2" : 19, 
	"CODEC_ID_H263P" : 20, 
	"CODEC_ID_H263I" : 21, 
	"CODEC_ID_FLV1" : 22, 
	"CODEC_ID_SVQ1" : 23, 
	"CODEC_ID_SVQ3" : 24, 
	"CODEC_ID_DVVIDEO" : 25, 
	"CODEC_ID_HUFFYUV" : 26, 
	"CODEC_ID_CYUV" : 27, 
	"CODEC_ID_H264" : 28, 
	"CODEC_ID_INDEO3" : 29, 
	"CODEC_ID_VP3" : 30, 
	"CODEC_ID_THEORA" : 31, 
	"CODEC_ID_ASV1" : 32, 
	"CODEC_ID_ASV2" : 33, 
	"CODEC_ID_FFV1" : 34, 
	"CODEC_ID_4XM" : 35, 
	"CODEC_ID_VCR1" : 36, 
	"CODEC_ID_CLJR" : 37, 
	"CODEC_ID_MDEC" : 38, 
	"CODEC_ID_ROQ" : 39, 
	"CODEC_ID_INTERPLAY_VIDEO" : 40, 
	"CODEC_ID_XAN_WC3" : 41, 
	"CODEC_ID_XAN_WC4" : 42, 
	"CODEC_ID_RPZA" : 43, 
	"CODEC_ID_CINEPAK" : 44, 
	"CODEC_ID_WS_VQA" : 45, 
	"CODEC_ID_MSRLE" : 46, 
	"CODEC_ID_MSVIDEO1" : 47, 
	"CODEC_ID_IDCIN" : 48, 
	"CODEC_ID_8BPS" : 49, 
	"CODEC_ID_SMC" : 50, 
	"CODEC_ID_FLIC" : 51, 
	"CODEC_ID_TRUEMOTION1" : 52, 
	"CODEC_ID_VMDVIDEO" : 53, 
	"CODEC_ID_MSZH" : 54, 
	"CODEC_ID_ZLIB" : 55, 
	"CODEC_ID_QTRLE" : 56, 
	"CODEC_ID_SNOW" : 57, 
	"CODEC_ID_TSCC" : 58, 
	"CODEC_ID_ULTI" : 59, 
	"CODEC_ID_QDRAW" : 60, 
	"CODEC_ID_VIXL" : 61, 
	"CODEC_ID_QPEG" : 62, 
	"CODEC_ID_XVID" : 63, 
	"CODEC_ID_PNG" : 64, 
	"CODEC_ID_PPM" : 65, 
	"CODEC_ID_PBM" : 66, 
	"CODEC_ID_PGM" : 67, 
	"CODEC_ID_PGMYUV" : 68, 
	"CODEC_ID_PAM" : 69, 
	"CODEC_ID_FFVHUFF" : 70, 
	"CODEC_ID_RV30" : 71, 
	"CODEC_ID_RV40" : 72, 
	"CODEC_ID_VC1" : 73, 
	"CODEC_ID_WMV3" : 74, 
	"CODEC_ID_LOCO" : 75, 
	"CODEC_ID_WNV1" : 76, 
	"CODEC_ID_AASC" : 77, 
	"CODEC_ID_INDEO2" : 78, 
	"CODEC_ID_FRAPS" : 79, 
	"CODEC_ID_TRUEMOTION2" : 80, 
	"CODEC_ID_BMP" : 81, 
	"CODEC_ID_CSCD" : 82, 
	"CODEC_ID_MMVIDEO" : 83, 
	"CODEC_ID_ZMBV" : 84, 
	"CODEC_ID_AVS" : 85, 
	"CODEC_ID_SMACKVIDEO" : 86, 
	"CODEC_ID_NUV" : 87, 
	"CODEC_ID_KMVC" : 88, 
	"CODEC_ID_FLASHSV" : 89, 
	"CODEC_ID_CAVS" : 90, 
	"CODEC_ID_JPEG2000" : 91, 
	"CODEC_ID_VMNC" : 92, 
	"CODEC_ID_VP5" : 93, 
	"CODEC_ID_VP6" : 94, 
	"CODEC_ID_VP6F" : 95, 
	"CODEC_ID_TARGA" : 96, 
	"CODEC_ID_DSICINVIDEO" : 97, 
	"CODEC_ID_TIERTEXSEQVIDEO" : 98, 
	"CODEC_ID_TIFF" : 99, 
	"CODEC_ID_GIF" : 100, 
	"CODEC_ID_FFH264" : 101, 
	"CODEC_ID_DXA" : 102, 
	"CODEC_ID_DNXHD" : 103, 
	"CODEC_ID_THP" : 104, 
	"CODEC_ID_SGI" : 105, 
	"CODEC_ID_C93" : 106, 
	"CODEC_ID_BETHSOFTVID" : 107, 
	"CODEC_ID_PTX" : 108, 
	"CODEC_ID_TXD" : 109, 
	"CODEC_ID_VP6A" : 110, 
	"CODEC_ID_AMV" : 111, 
	"CODEC_ID_VB" : 112, 
	"CODEC_ID_PCX" : 113, 
	"CODEC_ID_SUNRAST" : 114, 
	"CODEC_ID_INDEO4" : 115, 
	"CODEC_ID_INDEO5" : 116, 
	"CODEC_ID_MIMIC" : 117, 
	"CODEC_ID_RL2" : 118, 
	"CODEC_ID_8SVX_EXP" : 119, 
	"CODEC_ID_8SVX_FIB" : 120, 
	"CODEC_ID_ESCAPE124" : 121, 
	"CODEC_ID_DIRAC" : 122, 
	"CODEC_ID_BFI" : 123, 
	"CODEC_ID_CMV" : 124, 
	"CODEC_ID_MOTIONPIXELS" : 125, 
	"CODEC_ID_TGV" : 126, 
	"CODEC_ID_TGQ" : 127, 
	"CODEC_ID_TQI" : 128, 
	"CODEC_ID_AURA" : 129, 
	"CODEC_ID_AURA2" : 130, 
	"CODEC_ID_V210X" : 131, 
	"CODEC_ID_TMV" : 132, 
	"CODEC_ID_V210" : 133, 
	"CODEC_ID_DPX" : 134, 
	"CODEC_ID_MAD" : 135, 
	"CODEC_ID_FRWU" : 136, 
	"CODEC_ID_FLASHSV2" : 137, 
	"CODEC_ID_CDGRAPHICS" : 138, 
	"CODEC_ID_R210" : 139, 
	"CODEC_ID_ANM" : 140, 
	"CODEC_ID_BINKVIDEO" : 141, 
	"CODEC_ID_IFF_ILBM" : 142, 
	"CODEC_ID_IFF_BYTERUN1" : 143, 
	"CODEC_ID_KGV1" : 144, 
	"CODEC_ID_YOP" : 145, 
	"CODEC_ID_VP8" : 146, 
	"CODEC_ID_PCM_S16LE" : 65536, 
	"CODEC_ID_PCM_S16BE" : 65537, 
	"CODEC_ID_PCM_U16LE" : 65538, 
	"CODEC_ID_PCM_U16BE" : 65539, 
	"CODEC_ID_PCM_S8" : 65540, 
	"CODEC_ID_PCM_U8" : 65541, 
	"CODEC_ID_PCM_MULAW" : 65542, 
	"CODEC_ID_PCM_ALAW" : 65543, 
	"CODEC_ID_PCM_S32LE" : 65544, 
	"CODEC_ID_PCM_S32BE" : 65545, 
	"CODEC_ID_PCM_U32LE" : 65546, 
	"CODEC_ID_PCM_U32BE" : 65547, 
	"CODEC_ID_PCM_S24LE" : 65548, 
	"CODEC_ID_PCM_S24BE" : 65549, 
	"CODEC_ID_PCM_U24LE" : 65550, 
	"CODEC_ID_PCM_U24BE" : 65551, 
	"CODEC_ID_PCM_S24DAUD" : 65552, 
	"CODEC_ID_PCM_ZORK" : 65553, 
	"CODEC_ID_PCM_S16LE_PLANAR" : 65554, 
	"CODEC_ID_PCM_DVD" : 65555, 
	"CODEC_ID_PCM_F32BE" : 65556, 
	"CODEC_ID_PCM_F32LE" : 65557, 
	"CODEC_ID_PCM_F64BE" : 65558, 
	"CODEC_ID_PCM_F64LE" : 65559, 
	"CODEC_ID_PCM_BLURAY" : 65560, 
	"CODEC_ID_ADPCM_IMA_QT" : 69632, 
	"CODEC_ID_ADPCM_IMA_WAV" : 69633, 
	"CODEC_ID_ADPCM_IMA_DK3" : 69634, 
	"CODEC_ID_ADPCM_IMA_DK4" : 69635, 
	"CODEC_ID_ADPCM_IMA_WS" : 69636, 
	"CODEC_ID_ADPCM_IMA_SMJPEG" : 69637, 
	"CODEC_ID_ADPCM_MS" : 69638, 
	"CODEC_ID_ADPCM_4XM" : 69639, 
	"CODEC_ID_ADPCM_XA" : 69640, 
	"CODEC_ID_ADPCM_ADX" : 69641, 
	"CODEC_ID_ADPCM_EA" : 69642, 
	"CODEC_ID_ADPCM_G726" : 69643, 
	"CODEC_ID_ADPCM_CT" : 69644, 
	"CODEC_ID_ADPCM_SWF" : 69645, 
	"CODEC_ID_ADPCM_YAMAHA" : 69646, 
	"CODEC_ID_ADPCM_SBPRO_4" : 69647, 
	"CODEC_ID_ADPCM_SBPRO_3" : 69648, 
	"CODEC_ID_ADPCM_SBPRO_2" : 69649, 
	"CODEC_ID_ADPCM_THP" : 69650, 
	"CODEC_ID_ADPCM_IMA_AMV" : 69651, 
	"CODEC_ID_ADPCM_EA_R1" : 69652, 
	"CODEC_ID_ADPCM_EA_R3" : 69653, 
	"CODEC_ID_ADPCM_EA_R2" : 69654, 
	"CODEC_ID_ADPCM_IMA_EA_SEAD" : 69655, 
	"CODEC_ID_ADPCM_IMA_EA_EACS" : 69656, 
	"CODEC_ID_ADPCM_EA_XAS" : 69657, 
	"CODEC_ID_ADPCM_EA_MAXIS_XA" : 69658, 
	"CODEC_ID_ADPCM_IMA_ISS" : 69659, 
	"CODEC_ID_AMR_NB" : 73728, 
	"CODEC_ID_AMR_WB" : 73729, 
	"CODEC_ID_RA_144" : 77824, 
	"CODEC_ID_RA_288" : 77825, 
	"CODEC_ID_ROQ_DPCM" : 81920, 
	"CODEC_ID_INTERPLAY_DPCM" : 81921, 
	"CODEC_ID_XAN_DPCM" : 81922, 
	"CODEC_ID_SOL_DPCM" : 81923, 
	"CODEC_ID_MP2" : 86016, 
	"CODEC_ID_MP3" : 86017, 
	"CODEC_ID_AAC" : 86018, 
	"CODEC_ID_AC3" : 86019, 
	"CODEC_ID_DTS" : 86020, 
	"CODEC_ID_VORBIS" : 86021, 
	"CODEC_ID_DVAUDIO" : 86022, 
	"CODEC_ID_WMAV1" : 86023, 
	"CODEC_ID_WMAV2" : 86024, 
	"CODEC_ID_MACE3" : 86025, 
	"CODEC_ID_MACE6" : 86026, 
	"CODEC_ID_VMDAUDIO" : 86027, 
	"CODEC_ID_SONIC" : 86028, 
	"CODEC_ID_SONIC_LS" : 86029, 
	"CODEC_ID_FLAC" : 86030, 
	"CODEC_ID_MP3ADU" : 86031, 
	"CODEC_ID_MP3ON4" : 86032, 
	"CODEC_ID_SHORTEN" : 86033, 
	"CODEC_ID_ALAC" : 86034, 
	"CODEC_ID_WESTWOOD_SND1" : 86035, 
	"CODEC_ID_GSM" : 86036, 
	"CODEC_ID_QDM2" : 86037, 
	"CODEC_ID_COOK" : 86038, 
	"CODEC_ID_TRUESPEECH" : 86039, 
	"CODEC_ID_TTA" : 86040, 
	"CODEC_ID_SMACKAUDIO" : 86041, 
	"CODEC_ID_QCELP" : 86042, 
	"CODEC_ID_WAVPACK" : 86043, 
	"CODEC_ID_DSICINAUDIO" : 86044, 
	"CODEC_ID_IMC" : 86045, 
	"CODEC_ID_MUSEPACK7" : 86046, 
	"CODEC_ID_MLP" : 86047, 
	"CODEC_ID_GSM_MS" : 86048, 
	"CODEC_ID_ATRAC3" : 86049, 
	"CODEC_ID_VOXWARE" : 86050, 
	"CODEC_ID_APE" : 86051, 
	"CODEC_ID_NELLYMOSER" : 86052, 
	"CODEC_ID_MUSEPACK8" : 86053, 
	"CODEC_ID_SPEEX" : 86054, 
	"CODEC_ID_WMAVOICE" : 86055, 
	"CODEC_ID_WMAPRO" : 86056, 
	"CODEC_ID_WMALOSSLESS" : 86057, 
	"CODEC_ID_ATRAC3P" : 86058, 
	"CODEC_ID_EAC3" : 86059, 
	"CODEC_ID_SIPR" : 86060, 
	"CODEC_ID_MP1" : 86061, 
	"CODEC_ID_TWINVQ" : 86062, 
	"CODEC_ID_TRUEHD" : 86063, 
	"CODEC_ID_MP4ALS" : 86064, 
	"CODEC_ID_ATRAC1" : 86065, 
	"CODEC_ID_BINKAUDIO_RDFT" : 86066, 
	"CODEC_ID_BINKAUDIO_DCT" : 86067, 
	"CODEC_ID_DVD_SUBTITLE" : 94208, 
	"CODEC_ID_DVB_SUBTITLE" : 94209, 
	"CODEC_ID_TEXT" : 94210, 
	"CODEC_ID_XSUB" : 94211, 
	"CODEC_ID_SSA" : 94212, 
	"CODEC_ID_MOV_TEXT" : 94213, 
	"CODEC_ID_HDMV_PGS_SUBTITLE" : 94214, 
	"CODEC_ID_DVB_TELETEXT" : 94215, 
	"CODEC_ID_TTF" : 98304, 
	"CODEC_ID_PROBE" : 102400, 
	"CODEC_ID_MPEG2TS" : 131072, 
}

SampleFormat = { 
	"SAMPLE_FMT_NONE" : -1, 
	"SAMPLE_FMT_U8" : 0, 
	"SAMPLE_FMT_S16" : 1, 
	"SAMPLE_FMT_S32" : 2, 
	"SAMPLE_FMT_FLT" : 3, 
	"SAMPLE_FMT_DBL" : 4, 
	"SAMPLE_FMT_NB" : 5, 
}

Motion_Est_ID = { 
	"ME_ZERO" : 1, 
	"ME_FULL" : 2, 
	"ME_LOG" : 3, 
	"ME_PHODS" : 4, 
	"ME_EPZS" : 5, 
	"ME_X1" : 6, 
	"ME_HEX" : 7, 
	"ME_UMH" : 8, 
	"ME_ITER" : 9, 
	"ME_TESA" : 10, 
}

AVDiscard = { 
	"AVDISCARD_NONE" : -16, 
	"AVDISCARD_DEFAULT" : 0, 
	"AVDISCARD_NONREF" : 8, 
	"AVDISCARD_BIDIR" : 16, 
	"AVDISCARD_NONKEY" : 32, 
	"AVDISCARD_ALL" : 48, 
}

AVColorPrimaries = { 
	"AVCOL_PRI_BT709" : 1, 
	"AVCOL_PRI_UNSPECIFIED" : 2, 
	"AVCOL_PRI_BT470M" : 4, 
	"AVCOL_PRI_BT470BG" : 5, 
	"AVCOL_PRI_SMPTE170M" : 6, 
	"AVCOL_PRI_SMPTE240M" : 7, 
	"AVCOL_PRI_FILM" : 8, 
	"AVCOL_PRI_NB" : 9, 
}

AVColorTransferCharacteristic = { 
	"AVCOL_TRC_BT709" : 1, 
	"AVCOL_TRC_UNSPECIFIED" : 2, 
	"AVCOL_TRC_GAMMA22" : 4, 
	"AVCOL_TRC_GAMMA28" : 5, 
	"AVCOL_TRC_NB" : 6, 
}

AVColorSpace = { 
	"AVCOL_SPC_RGB" : 0, 
	"AVCOL_SPC_BT709" : 1, 
	"AVCOL_SPC_UNSPECIFIED" : 2, 
	"AVCOL_SPC_FCC" : 4, 
	"AVCOL_SPC_BT470BG" : 5, 
	"AVCOL_SPC_SMPTE170M" : 6, 
	"AVCOL_SPC_SMPTE240M" : 7, 
	"AVCOL_SPC_NB" : 8, 
}

AVColorRange = { 
	"AVCOL_RANGE_UNSPECIFIED" : 0, 
	"AVCOL_RANGE_MPEG" : 1, 
	"AVCOL_RANGE_JPEG" : 2, 
	"AVCOL_RANGE_NB" : 3, 
}

AVChromaLocation = { 
	"AVCHROMA_LOC_UNSPECIFIED" : 0, 
	"AVCHROMA_LOC_LEFT" : 1, 
	"AVCHROMA_LOC_CENTER" : 2, 
	"AVCHROMA_LOC_TOPLEFT" : 3, 
	"AVCHROMA_LOC_TOP" : 4, 
	"AVCHROMA_LOC_BOTTOMLEFT" : 5, 
	"AVCHROMA_LOC_BOTTOM" : 6, 
	"AVCHROMA_LOC_NB" : 7, 
}

AVSubtitleType = { 
	"SUBTITLE_NONE" : 0, 
	"SUBTITLE_BITMAP" : 1, 
	"SUBTITLE_TEXT" : 2, 
	"SUBTITLE_ASS" : 3, 
}

AVLockOp = { 
	"AV_LOCK_CREATE" : 0, 
	"AV_LOCK_OBTAIN" : 1, 
	"AV_LOCK_RELEASE" : 2, 
	"AV_LOCK_DESTROY" : 3, 
}

## simple enums ##
RPYTHONIC_GLOBAL_ENUMS = { 
 "ISupper" : 0,  "ISlower" : 1,  "ISalpha" : 2,  "ISdigit" : 3,  "ISxdigit" : 4,  "ISspace" : 5,  "ISprint" : 6,  "ISgraph" : 7,  "ISblank" : 8,  "IScntrl" : 9,  "ISpunct" : 10,  "ISalnum" : 11, 
 "FP_NAN" : 0,  "FP_INFINITE" : 1,  "FP_ZERO" : 2,  "FP_SUBNORMAL" : 3,  "FP_NORMAL" : 4, 
 "IEEE_" : -1,  "SVID_" : 0,  "XOPEN_" : 1,  "POSIX_" : 2,  "ISOC_" : 3, 

}
class __fsid_t(_rpythonic_struct_): _array_wrapper_ = True
class __locale_struct(_rpythonic_struct_): _array_wrapper_ = True
class __locale_data(_rpythonic_struct_): pass
class imaxdiv_t(_rpythonic_struct_): pass
class exception(_rpythonic_struct_): pass
class __mbstate_t(_rpythonic_struct_): pass
class __value(ctypes.Union): pass
class _G_fpos_t(_rpythonic_struct_): pass
class _G_fpos64_t(_rpythonic_struct_): pass
class _IO_jump_t(_rpythonic_struct_): pass
class _IO_marker(_rpythonic_struct_): pass
class _IO_FILE(_rpythonic_struct_): _array_wrapper_ = True
class _IO_FILE_plus(_rpythonic_struct_): pass
class wait(ctypes.Union): pass
class __wait_terminated(_rpythonic_struct_): pass
class __wait_stopped(_rpythonic_struct_): pass
class __WAIT_STATUS(ctypes.Union): pass
class div_t(_rpythonic_struct_): pass
class ldiv_t(_rpythonic_struct_): pass
class lldiv_t(_rpythonic_struct_): pass
class __sigset_t(_rpythonic_struct_): _array_wrapper_ = True
class timespec(_rpythonic_struct_): pass
class timeval(_rpythonic_struct_): pass
class fd_set(_rpythonic_struct_): _array_wrapper_ = True
class pthread_attr_t(ctypes.Union): pass
class __pthread_internal_slist(_rpythonic_struct_): pass
class pthread_mutex_t(ctypes.Union): pass
class __pthread_mutex_s(_rpythonic_struct_): pass
class pthread_mutexattr_t(ctypes.Union): pass
class pthread_cond_t(ctypes.Union): pass
class pthread_condattr_t(ctypes.Union): pass
class pthread_rwlock_t(ctypes.Union): pass
class __data(_rpythonic_struct_): pass
class pthread_rwlockattr_t(ctypes.Union): pass
class pthread_barrier_t(ctypes.Union): pass
class pthread_barrierattr_t(ctypes.Union): pass
class random_data(_rpythonic_struct_): pass
class drand48_data(_rpythonic_struct_): _array_wrapper_ = True
class AVRational(_rpythonic_struct_): pass
class AVExtFloat(_rpythonic_struct_): _array_wrapper_ = True
class AVClass(_rpythonic_struct_): pass
class AVOption(_rpythonic_struct_): pass
class RcOverride(_rpythonic_struct_): pass
class AVPanScan(_rpythonic_struct_): _array_wrapper_ = True
class AVPacket(_rpythonic_struct_): pass
class AVFrame(_rpythonic_struct_): _array_wrapper_ = True
class AVCodecContext(_rpythonic_struct_): _array_wrapper_ = True
class AVCodec(_rpythonic_struct_): pass
class AVHWAccel(_rpythonic_struct_): pass
class AVPicture(_rpythonic_struct_): _array_wrapper_ = True
class AVPaletteControl(_rpythonic_struct_): _array_wrapper_ = True
class AVSubtitleRect(_rpythonic_struct_): pass
class AVSubtitle(_rpythonic_struct_): pass
class ReSampleContext(_rpythonic_struct_): pass
class AVResampleContext(_rpythonic_struct_): pass
class AVCodecParserContext(_rpythonic_struct_): _array_wrapper_ = True
class AVCodecParser(_rpythonic_struct_): _array_wrapper_ = True
class AVBitStreamFilterContext(_rpythonic_struct_): pass
class AVBitStreamFilter(_rpythonic_struct_): pass
## union and structures ##
__freeze_rpythonic_struct( __fsid_t, [
	( "__val", ( ctypes.c_int * 2 ) ),
])

__freeze_rpythonic_struct( __locale_data, [
])

__freeze_rpythonic_struct( __locale_struct, [
	( "__locales", ctypes.POINTER(( __locale_data * 13 )) ),
	( "__ctype_b", ctypes.POINTER(ctypes.c_uint16) ),
	( "__ctype_tolower", ctypes.POINTER(ctypes.c_int) ),
	( "__ctype_toupper", ctypes.POINTER(ctypes.c_int) ),
	( "__names", ctypes.POINTER(( ctypes.c_char * 13 )) ),
])

__freeze_rpythonic_struct( imaxdiv_t, [
	( "quot", ctypes.c_longlong ),
	( "rem", ctypes.c_longlong ),
])

__freeze_rpythonic_struct( exception, [
	( "C_type", ctypes.c_int ),
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "arg1", ctypes.c_double ),
	( "arg2", ctypes.c_double ),
	( "retval", ctypes.c_double ),
])

__freeze_rpythonic_struct( __value, [
	( "__wch", ctypes.c_uint ),
	( "__wchb", ( ctypes.c_char * 4 ) ),
])

__freeze_rpythonic_struct( __mbstate_t, [
	( "__count", ctypes.c_int ),
	( "__value", __value ),
])

__freeze_rpythonic_struct( _G_fpos_t, [
	( "__pos", ctypes.c_int64 ),
	( "__state", __mbstate_t ),
])

__freeze_rpythonic_struct( _G_fpos64_t, [
	( "__pos", ctypes.c_longlong ),
	( "__state", __mbstate_t ),
])

__freeze_rpythonic_struct( _IO_jump_t, [
])

__freeze_rpythonic_struct( _IO_marker, [
	( "_next", ctypes.POINTER(_IO_marker) ),
	( "_sbuf", ctypes.POINTER(_IO_FILE) ),
	( "_pos", ctypes.c_int ),
])

__freeze_rpythonic_struct( _IO_FILE, [
	( "_flags", ctypes.c_int ),
	( "_IO_read_ptr", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_read_end", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_read_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_write_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_write_ptr", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_write_end", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_buf_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_buf_end", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_save_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_backup_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_save_end", ctypes.POINTER(ctypes.c_char) ),
	( "_markers", ctypes.POINTER(_IO_marker) ),
	( "_chain", ctypes.POINTER(_IO_FILE) ),
	( "_fileno", ctypes.c_int ),
	( "_flags2", ctypes.c_int ),
	( "_old_offset", ctypes.c_int64 ),
	( "_cur_column", ctypes.c_ushort ),
	( "_vtable_offset", ctypes.c_char ),
	( "_shortbuf", ( ctypes.c_char * 1 ) ),
	( "_lock", ctypes.POINTER(ctypes.c_void_p) ),
	( "_offset", ctypes.c_longlong ),
	( "__pad1", ctypes.POINTER(ctypes.c_void_p) ),
	( "__pad2", ctypes.POINTER(ctypes.c_void_p) ),
	( "__pad3", ctypes.POINTER(ctypes.c_void_p) ),
	( "__pad4", ctypes.POINTER(ctypes.c_void_p) ),
	( "__pad5", ctypes.c_uint ),
	( "_mode", ctypes.c_int ),
	( "_unused2", ctypes.c_char ),
])

__freeze_rpythonic_struct( _IO_FILE_plus, [
])

__freeze_rpythonic_struct( __wait_terminated, [
	( "__w_termsig", ctypes.c_uint ),
	( "__w_coredump", ctypes.c_uint ),
	( "__w_retcode", ctypes.c_uint ),
	#opaque-warning# <rpythonic.rpythonic.SomeThing object at 0xa2350ac>
])

__freeze_rpythonic_struct( __wait_stopped, [
	( "__w_stopval", ctypes.c_uint ),
	( "__w_stopsig", ctypes.c_uint ),
	#opaque-warning# <rpythonic.rpythonic.SomeThing object at 0xa23524c>
])

__freeze_rpythonic_struct( wait, [
	( "w_status", ctypes.c_int ),
	( "__wait_terminated", __wait_terminated ),
	( "__wait_stopped", __wait_stopped ),
])

__freeze_rpythonic_struct( __WAIT_STATUS, [
	( "__uptr", ctypes.POINTER(wait) ),
	( "__iptr", ctypes.POINTER(ctypes.c_int) ),
])

__freeze_rpythonic_struct( div_t, [
	( "quot", ctypes.c_int ),
	( "rem", ctypes.c_int ),
])

__freeze_rpythonic_struct( ldiv_t, [
	( "quot", ctypes.c_int64 ),
	( "rem", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( lldiv_t, [
	( "quot", ctypes.c_longlong ),
	( "rem", ctypes.c_longlong ),
])

__freeze_rpythonic_struct( __sigset_t, [
	( "__val", ctypes.c_uint64 ),
])

__freeze_rpythonic_struct( timespec, [
	( "tv_sec", ctypes.c_int64 ),
	( "tv_nsec", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( timeval, [
	( "tv_sec", ctypes.c_int64 ),
	( "tv_usec", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( fd_set, [
	( "__fds_bits", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_attr_t, [
	( "__size", ( ctypes.c_char * 36 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( __pthread_internal_slist, [
	( "__next", ctypes.POINTER(__pthread_internal_slist) ),
])

__freeze_rpythonic_struct( __pthread_mutex_s, [
	( "__lock", ctypes.c_int ),
	( "__count", ctypes.c_uint ),
	( "__owner", ctypes.c_int ),
	( "__kind", ctypes.c_int ),
	( "__nusers", ctypes.c_uint ),
	#opaque-warning# <rpythonic.rpythonic.SomeThing object at 0xa249c2c>
])

__freeze_rpythonic_struct( pthread_mutex_t, [
	( "__data", __pthread_mutex_s ),
	( "__size", ( ctypes.c_char * 24 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_mutexattr_t, [
	( "__size", ( ctypes.c_char * 4 ) ),
	( "__align", ctypes.c_int ),
])

__freeze_rpythonic_struct( __data, [
	( "__lock", ctypes.c_int ),
	( "__nr_readers", ctypes.c_uint ),
	( "__readers_wakeup", ctypes.c_uint ),
	( "__writer_wakeup", ctypes.c_uint ),
	( "__nr_readers_queued", ctypes.c_uint ),
	( "__nr_writers_queued", ctypes.c_uint ),
	( "__flags", ctypes.c_ubyte ),
	( "__shared", ctypes.c_ubyte ),
	( "__pad1", ctypes.c_ubyte ),
	( "__pad2", ctypes.c_ubyte ),
	( "__writer", ctypes.c_int ),
])

__freeze_rpythonic_struct( pthread_cond_t, [
	( "__data", __data ),
	( "__size", ( ctypes.c_char * 48 ) ),
	( "__align", ctypes.c_longlong ),
])

__freeze_rpythonic_struct( pthread_condattr_t, [
	( "__size", ( ctypes.c_char * 4 ) ),
	( "__align", ctypes.c_int ),
])

__freeze_rpythonic_struct( pthread_rwlock_t, [
	( "__data", __data ),
	( "__size", ( ctypes.c_char * 32 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_rwlockattr_t, [
	( "__size", ( ctypes.c_char * 8 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_barrier_t, [
	( "__size", ( ctypes.c_char * 20 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_barrierattr_t, [
	( "__size", ( ctypes.c_char * 4 ) ),
	( "__align", ctypes.c_int ),
])

__freeze_rpythonic_struct( random_data, [
	( "fptr", ctypes.POINTER(ctypes.c_int32) ),
	( "rptr", ctypes.POINTER(ctypes.c_int32) ),
	( "state", ctypes.POINTER(ctypes.c_int32) ),
	( "rand_type", ctypes.c_int ),
	( "rand_deg", ctypes.c_int ),
	( "rand_sep", ctypes.c_int ),
	( "end_ptr", ctypes.POINTER(ctypes.c_int32) ),
])

__freeze_rpythonic_struct( drand48_data, [
	( "__x", ( ctypes.c_uint16 * 3 ) ),
	( "__old_x", ( ctypes.c_uint16 * 3 ) ),
	( "__c", ctypes.c_uint16 ),
	( "__init", ctypes.c_uint16 ),
	( "__a", ctypes.c_ulonglong ),
])

__freeze_rpythonic_struct( AVRational, [
	( "num", ctypes.c_int ),
	( "den", ctypes.c_int ),
])

__freeze_rpythonic_struct( AVExtFloat, [
	( "exponent", ( ctypes.c_uint8 * 2 ) ),
	( "mantissa", ( ctypes.c_uint8 * 8 ) ),
])

__freeze_rpythonic_struct( AVOption, [
])

__freeze_rpythonic_struct( AVClass, [
	( "class_name", ctypes.POINTER(ctypes.c_char) ),
	( "item_name", ctypes.POINTER(ctypes.c_void_p) ),
	( "option", ctypes.POINTER(AVOption) ),
	( "version", ctypes.c_int ),
])

__freeze_rpythonic_struct( RcOverride, [
	( "start_frame", ctypes.c_int ),
	( "end_frame", ctypes.c_int ),
	( "qscale", ctypes.c_int ),
	( "quality_factor", ctypes.c_float ),
])

__freeze_rpythonic_struct( AVPanScan, [
	( "C_id", ctypes.c_int ),
	( "width", ctypes.c_int ),
	( "height", ctypes.c_int ),
	( "position", ( ctypes.c_int16 * 3 ) ),
])

__freeze_rpythonic_struct( AVPacket, [
	( "pts", ctypes.c_int64 ),
	( "dts", ctypes.c_int64 ),
	( "data", ctypes.POINTER(ctypes.c_uint8) ),
	( "size", ctypes.c_int ),
	( "stream_index", ctypes.c_int ),
	( "flags", ctypes.c_int ),
	( "duration", ctypes.c_int ),
	( "destruct", ctypes.c_void_p ),
	( "priv", ctypes.POINTER(ctypes.c_void_p) ),
	( "pos", ctypes.c_int64 ),
	( "convergence_duration", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( AVFrame, [
	( "data", ctypes.POINTER(( ctypes.c_uint8 * 4 )) ),
	( "linesize", ( ctypes.c_int * 4 ) ),
	( "base", ctypes.POINTER(( ctypes.c_uint8 * 4 )) ),
	( "key_frame", ctypes.c_int ),
	( "pict_type", ctypes.c_int ),
	( "pts", ctypes.c_int64 ),
	( "coded_picture_number", ctypes.c_int ),
	( "display_picture_number", ctypes.c_int ),
	( "quality", ctypes.c_int ),
	( "age", ctypes.c_int ),
	( "reference", ctypes.c_int ),
	( "qscale_table", ctypes.POINTER(ctypes.c_int8) ),
	( "qstride", ctypes.c_int ),
	( "mbskip_table", ctypes.POINTER(ctypes.c_uint8) ),
	( "motion_val", ctypes.POINTER(( ctypes.c_int16 * 2 )) ),
	( "mb_type", ctypes.POINTER(ctypes.c_uint32) ),
	( "motion_subsample_log2", ctypes.c_uint8 ),
	( "opaque", ctypes.POINTER(ctypes.c_void_p) ),
	( "error", ( ctypes.c_uint64 * 4 ) ),
	( "C_type", ctypes.c_int ),
	( "repeat_pict", ctypes.c_int ),
	( "qscale_type", ctypes.c_int ),
	( "interlaced_frame", ctypes.c_int ),
	( "top_field_first", ctypes.c_int ),
	( "pan_scan", ctypes.POINTER(AVPanScan) ),
	( "palette_has_changed", ctypes.c_int ),
	( "buffer_hints", ctypes.c_int ),
	( "dct_coeff", ctypes.POINTER(ctypes.c_short) ),
	( "ref_index", ctypes.POINTER(( ctypes.c_int8 * 2 )) ),
	( "reordered_opaque", ctypes.c_int64 ),
	( "hwaccel_picture_private", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( AVCodec, [
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "C_type", ctypes.c_int ),
	( "C_id", ctypes.c_int ),
	( "priv_data_size", ctypes.c_int ),
	( "init", ctypes.c_void_p ),
	( "encode", ctypes.c_void_p ),
	( "close", ctypes.c_void_p ),
	( "decode", ctypes.c_void_p ),
	( "capabilities", ctypes.c_int ),
	( "next", ctypes.POINTER(AVCodec) ),
	( "flush", ctypes.c_void_p ),
	( "supported_framerates", ctypes.POINTER(AVRational) ),
	( "pix_fmts", ctypes.POINTER(ctypes.c_int) ),
	( "long_name", ctypes.POINTER(ctypes.c_char) ),
	( "supported_samplerates", ctypes.POINTER(ctypes.c_int) ),
	( "sample_fmts", ctypes.POINTER(ctypes.c_int) ),
	( "channel_layouts", ctypes.POINTER(ctypes.c_int64) ),
])

__freeze_rpythonic_struct( AVPaletteControl, [
	( "palette_changed", ctypes.c_int ),
	( "palette", ( ctypes.c_uint * 256 ) ),
])

__freeze_rpythonic_struct( AVHWAccel, [
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "C_type", ctypes.c_int ),
	( "C_id", ctypes.c_int ),
	( "pix_fmt", ctypes.c_int ),
	( "capabilities", ctypes.c_int ),
	( "next", ctypes.POINTER(AVHWAccel) ),
	( "start_frame", ctypes.c_void_p ),
	( "decode_slice", ctypes.c_void_p ),
	( "end_frame", ctypes.c_void_p ),
	( "priv_data_size", ctypes.c_int ),
])

__freeze_rpythonic_struct( AVCodecContext, [
	( "av_class", ctypes.POINTER(AVClass) ),
	( "bit_rate", ctypes.c_int ),
	( "bit_rate_tolerance", ctypes.c_int ),
	( "flags", ctypes.c_int ),
	( "sub_id", ctypes.c_int ),
	( "me_method", ctypes.c_int ),
	( "extradata", ctypes.POINTER(ctypes.c_uint8) ),
	( "extradata_size", ctypes.c_int ),
	( "time_base", AVRational ),
	( "width", ctypes.c_int ),
	( "height", ctypes.c_int ),
	( "gop_size", ctypes.c_int ),
	( "pix_fmt", ctypes.c_int ),
	( "rate_emu", ctypes.c_int ),
	( "draw_horiz_band", ctypes.c_void_p ),
	( "sample_rate", ctypes.c_int ),
	( "channels", ctypes.c_int ),
	( "sample_fmt", ctypes.c_int ),
	( "frame_size", ctypes.c_int ),
	( "frame_number", ctypes.c_int ),
	( "real_pict_num", ctypes.c_int ),
	( "delay", ctypes.c_int ),
	( "qcompress", ctypes.c_float ),
	( "qblur", ctypes.c_float ),
	( "qmin", ctypes.c_int ),
	( "qmax", ctypes.c_int ),
	( "max_qdiff", ctypes.c_int ),
	( "max_b_frames", ctypes.c_int ),
	( "b_quant_factor", ctypes.c_float ),
	( "rc_strategy", ctypes.c_int ),
	( "b_frame_strategy", ctypes.c_int ),
	( "hurry_up", ctypes.c_int ),
	( "codec", ctypes.POINTER(AVCodec) ),
	( "priv_data", ctypes.POINTER(ctypes.c_void_p) ),
	( "rtp_payload_size", ctypes.c_int ),
	( "rtp_callback", ctypes.c_void_p ),
	( "mv_bits", ctypes.c_int ),
	( "header_bits", ctypes.c_int ),
	( "i_tex_bits", ctypes.c_int ),
	( "p_tex_bits", ctypes.c_int ),
	( "i_count", ctypes.c_int ),
	( "p_count", ctypes.c_int ),
	( "skip_count", ctypes.c_int ),
	( "misc_bits", ctypes.c_int ),
	( "frame_bits", ctypes.c_int ),
	( "opaque", ctypes.POINTER(ctypes.c_void_p) ),
	( "codec_name", ( ctypes.c_char * 32 ) ),
	( "codec_type", ctypes.c_int ),
	( "codec_id", ctypes.c_int ),
	( "codec_tag", ctypes.c_uint ),
	( "workaround_bugs", ctypes.c_int ),
	( "luma_elim_threshold", ctypes.c_int ),
	( "chroma_elim_threshold", ctypes.c_int ),
	( "strict_std_compliance", ctypes.c_int ),
	( "b_quant_offset", ctypes.c_float ),
	( "error_recognition", ctypes.c_int ),
	( "get_buffer", ctypes.c_void_p ),
	( "release_buffer", ctypes.c_void_p ),
	( "has_b_frames", ctypes.c_int ),
	( "block_align", ctypes.c_int ),
	( "parse_only", ctypes.c_int ),
	( "mpeg_quant", ctypes.c_int ),
	( "stats_out", ctypes.POINTER(ctypes.c_char) ),
	( "stats_in", ctypes.POINTER(ctypes.c_char) ),
	( "rc_qsquish", ctypes.c_float ),
	( "rc_qmod_amp", ctypes.c_float ),
	( "rc_qmod_freq", ctypes.c_int ),
	( "rc_override", ctypes.POINTER(RcOverride) ),
	( "rc_override_count", ctypes.c_int ),
	( "rc_eq", ctypes.POINTER(ctypes.c_char) ),
	( "rc_max_rate", ctypes.c_int ),
	( "rc_min_rate", ctypes.c_int ),
	( "rc_buffer_size", ctypes.c_int ),
	( "rc_buffer_aggressivity", ctypes.c_float ),
	( "i_quant_factor", ctypes.c_float ),
	( "i_quant_offset", ctypes.c_float ),
	( "rc_initial_cplx", ctypes.c_float ),
	( "dct_algo", ctypes.c_int ),
	( "lumi_masking", ctypes.c_float ),
	( "temporal_cplx_masking", ctypes.c_float ),
	( "spatial_cplx_masking", ctypes.c_float ),
	( "p_masking", ctypes.c_float ),
	( "dark_masking", ctypes.c_float ),
	( "idct_algo", ctypes.c_int ),
	( "slice_count", ctypes.c_int ),
	( "slice_offset", ctypes.POINTER(ctypes.c_int) ),
	( "error_concealment", ctypes.c_int ),
	( "dsp_mask", ctypes.c_void_p ),
	( "bits_per_coded_sample", ctypes.c_int ),
	( "prediction_method", ctypes.c_int ),
	( "sample_aspect_ratio", AVRational ),
	( "coded_frame", ctypes.POINTER(AVFrame) ),
	( "debug", ctypes.c_int ),
	( "debug_mv", ctypes.c_int ),
	( "error", ( ctypes.c_uint64 * 4 ) ),
	( "mb_qmin", ctypes.c_int ),
	( "mb_qmax", ctypes.c_int ),
	( "me_cmp", ctypes.c_int ),
	( "me_sub_cmp", ctypes.c_int ),
	( "mb_cmp", ctypes.c_int ),
	( "ildct_cmp", ctypes.c_int ),
	( "dia_size", ctypes.c_int ),
	( "last_predictor_count", ctypes.c_int ),
	( "pre_me", ctypes.c_int ),
	( "me_pre_cmp", ctypes.c_int ),
	( "pre_dia_size", ctypes.c_int ),
	( "me_subpel_quality", ctypes.c_int ),
	( "get_format", ctypes.c_void_p ),
	( "dtg_active_format", ctypes.c_int ),
	( "me_range", ctypes.c_int ),
	( "intra_quant_bias", ctypes.c_int ),
	( "inter_quant_bias", ctypes.c_int ),
	( "color_table_id", ctypes.c_int ),
	( "internal_buffer_count", ctypes.c_int ),
	( "internal_buffer", ctypes.POINTER(ctypes.c_void_p) ),
	( "global_quality", ctypes.c_int ),
	( "coder_type", ctypes.c_int ),
	( "context_model", ctypes.c_int ),
	( "slice_flags", ctypes.c_int ),
	( "xvmc_acceleration", ctypes.c_int ),
	( "mb_decision", ctypes.c_int ),
	( "intra_matrix", ctypes.POINTER(ctypes.c_uint16) ),
	( "inter_matrix", ctypes.POINTER(ctypes.c_uint16) ),
	( "stream_codec_tag", ctypes.c_uint ),
	( "scenechange_threshold", ctypes.c_int ),
	( "lmin", ctypes.c_int ),
	( "lmax", ctypes.c_int ),
	( "palctrl", ctypes.POINTER(AVPaletteControl) ),
	( "noise_reduction", ctypes.c_int ),
	( "reget_buffer", ctypes.c_void_p ),
	( "rc_initial_buffer_occupancy", ctypes.c_int ),
	( "inter_threshold", ctypes.c_int ),
	( "flags2", ctypes.c_int ),
	( "error_rate", ctypes.c_int ),
	( "antialias_algo", ctypes.c_int ),
	( "quantizer_noise_shaping", ctypes.c_int ),
	( "thread_count", ctypes.c_int ),
	( "execute", ctypes.c_void_p ),
	( "thread_opaque", ctypes.POINTER(ctypes.c_void_p) ),
	( "me_threshold", ctypes.c_int ),
	( "mb_threshold", ctypes.c_int ),
	( "intra_dc_precision", ctypes.c_int ),
	( "nsse_weight", ctypes.c_int ),
	( "skip_top", ctypes.c_int ),
	( "skip_bottom", ctypes.c_int ),
	( "profile", ctypes.c_int ),
	( "level", ctypes.c_int ),
	( "lowres", ctypes.c_int ),
	( "coded_width", ctypes.c_int ),
	( "coded_height", ctypes.c_int ),
	( "frame_skip_threshold", ctypes.c_int ),
	( "frame_skip_factor", ctypes.c_int ),
	( "frame_skip_exp", ctypes.c_int ),
	( "frame_skip_cmp", ctypes.c_int ),
	( "border_masking", ctypes.c_float ),
	( "mb_lmin", ctypes.c_int ),
	( "mb_lmax", ctypes.c_int ),
	( "me_penalty_compensation", ctypes.c_int ),
	( "skip_loop_filter", ctypes.c_int ),
	( "skip_idct", ctypes.c_int ),
	( "skip_frame", ctypes.c_int ),
	( "bidir_refine", ctypes.c_int ),
	( "brd_scale", ctypes.c_int ),
	( "crf", ctypes.c_float ),
	( "cqp", ctypes.c_int ),
	( "keyint_min", ctypes.c_int ),
	( "refs", ctypes.c_int ),
	( "chromaoffset", ctypes.c_int ),
	( "bframebias", ctypes.c_int ),
	( "trellis", ctypes.c_int ),
	( "complexityblur", ctypes.c_float ),
	( "deblockalpha", ctypes.c_int ),
	( "deblockbeta", ctypes.c_int ),
	( "partitions", ctypes.c_int ),
	( "directpred", ctypes.c_int ),
	( "cutoff", ctypes.c_int ),
	( "scenechange_factor", ctypes.c_int ),
	( "mv0_threshold", ctypes.c_int ),
	( "b_sensitivity", ctypes.c_int ),
	( "compression_level", ctypes.c_int ),
	( "use_lpc", ctypes.c_int ),
	( "lpc_coeff_precision", ctypes.c_int ),
	( "min_prediction_order", ctypes.c_int ),
	( "max_prediction_order", ctypes.c_int ),
	( "prediction_order_method", ctypes.c_int ),
	( "min_partition_order", ctypes.c_int ),
	( "max_partition_order", ctypes.c_int ),
	( "timecode_frame_start", ctypes.c_int64 ),
	( "request_channels", ctypes.c_int ),
	( "drc_scale", ctypes.c_float ),
	( "reordered_opaque", ctypes.c_int64 ),
	( "bits_per_raw_sample", ctypes.c_int ),
	( "channel_layout", ctypes.c_int64 ),
	( "request_channel_layout", ctypes.c_int64 ),
	( "rc_max_available_vbv_use", ctypes.c_float ),
	( "rc_min_vbv_overflow_use", ctypes.c_float ),
	( "hwaccel", ctypes.POINTER(AVHWAccel) ),
	( "ticks_per_frame", ctypes.c_int ),
	( "hwaccel_context", ctypes.POINTER(ctypes.c_void_p) ),
	( "color_primaries", ctypes.c_int ),
	( "color_trc", ctypes.c_int ),
	( "colorspace", ctypes.c_int ),
	( "color_range", ctypes.c_int ),
	( "chroma_sample_location", ctypes.c_int ),
	( "execute2", ctypes.c_void_p ),
	( "weighted_p_pred", ctypes.c_int ),
	( "aq_mode", ctypes.c_int ),
	( "aq_strength", ctypes.c_float ),
	( "psy_rd", ctypes.c_float ),
	( "psy_trellis", ctypes.c_float ),
	( "rc_lookahead", ctypes.c_int ),
])

__freeze_rpythonic_struct( AVPicture, [
	( "data", ctypes.POINTER(( ctypes.c_uint8 * 4 )) ),
	( "linesize", ( ctypes.c_int * 4 ) ),
])

__freeze_rpythonic_struct( AVSubtitleRect, [
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
	( "w", ctypes.c_int ),
	( "h", ctypes.c_int ),
	( "nb_colors", ctypes.c_int ),
	( "pict", AVPicture ),
	( "C_type", ctypes.c_int ),
	( "text", ctypes.POINTER(ctypes.c_char) ),
	( "ass", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( AVSubtitle, [
	( "format", ctypes.c_uint16 ),
	( "start_display_time", ctypes.c_uint32 ),
	( "end_display_time", ctypes.c_uint32 ),
	( "num_rects", ctypes.c_void_p ),
	( "rects", ctypes.POINTER(ctypes.POINTER(AVSubtitleRect)) ),
	( "pts", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( ReSampleContext, [
])

__freeze_rpythonic_struct( AVResampleContext, [
])

__freeze_rpythonic_struct( AVCodecParser, [
	( "codec_ids", ( ctypes.c_int * 5 ) ),
	( "priv_data_size", ctypes.c_int ),
	( "parser_init", ctypes.c_void_p ),
	( "parser_parse", ctypes.c_void_p ),
	( "parser_close", ctypes.c_void_p ),
	( "split", ctypes.c_void_p ),
	( "next", ctypes.POINTER(AVCodecParser) ),
])

__freeze_rpythonic_struct( AVCodecParserContext, [
	( "priv_data", ctypes.POINTER(ctypes.c_void_p) ),
	( "parser", ctypes.POINTER(AVCodecParser) ),
	( "frame_offset", ctypes.c_int64 ),
	( "cur_offset", ctypes.c_int64 ),
	( "next_frame_offset", ctypes.c_int64 ),
	( "pict_type", ctypes.c_int ),
	( "repeat_pict", ctypes.c_int ),
	( "pts", ctypes.c_int64 ),
	( "dts", ctypes.c_int64 ),
	( "last_pts", ctypes.c_int64 ),
	( "last_dts", ctypes.c_int64 ),
	( "fetch_timestamp", ctypes.c_int ),
	( "cur_frame_start_index", ctypes.c_int ),
	( "cur_frame_offset", ( ctypes.c_int64 * 4 ) ),
	( "cur_frame_pts", ( ctypes.c_int64 * 4 ) ),
	( "cur_frame_dts", ( ctypes.c_int64 * 4 ) ),
	( "flags", ctypes.c_int ),
	( "offset", ctypes.c_int64 ),
	( "cur_frame_end", ( ctypes.c_int64 * 4 ) ),
	( "key_frame", ctypes.c_int ),
	( "convergence_duration", ctypes.c_int64 ),
	( "dts_sync_point", ctypes.c_int ),
	( "dts_ref_dts_delta", ctypes.c_int ),
	( "pts_dts_delta", ctypes.c_int ),
	( "cur_frame_pos", ( ctypes.c_int64 * 4 ) ),
	( "pos", ctypes.c_int64 ),
	( "last_pos", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( AVBitStreamFilter, [
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "priv_data_size", ctypes.c_int ),
	( "filter", ctypes.c_void_p ),
	( "close", ctypes.c_void_p ),
	( "next", ctypes.POINTER(AVBitStreamFilter) ),
])

__freeze_rpythonic_struct( AVBitStreamFilterContext, [
	( "priv_data", ctypes.POINTER(ctypes.c_void_p) ),
	( "filter", ctypes.POINTER(AVBitStreamFilter) ),
	( "parser", ctypes.POINTER(AVCodecParserContext) ),
	( "next", ctypes.POINTER(AVBitStreamFilterContext) ),
])

## wrapper functions ##
avutil_version = _rpythonic_function_(		"avutil_version", ctypes.c_void_p, [] )

avutil_configuration = _rpythonic_function_(		"avutil_configuration", ctypes.POINTER(ctypes.c_char), [] )

avutil_license = _rpythonic_function_(		"avutil_license", ctypes.POINTER(ctypes.c_char), [] )

isalnum = _rpythonic_function_(		"isalnum", ctypes.c_int, [
	("none",		ctypes.c_int),] )

isalpha = _rpythonic_function_(		"isalpha", ctypes.c_int, [
	("none",		ctypes.c_int),] )

iscntrl = _rpythonic_function_(		"iscntrl", ctypes.c_int, [
	("none",		ctypes.c_int),] )

isdigit = _rpythonic_function_(		"isdigit", ctypes.c_int, [
	("none",		ctypes.c_int),] )

islower = _rpythonic_function_(		"islower", ctypes.c_int, [
	("none",		ctypes.c_int),] )

isgraph = _rpythonic_function_(		"isgraph", ctypes.c_int, [
	("none",		ctypes.c_int),] )

isprint = _rpythonic_function_(		"isprint", ctypes.c_int, [
	("none",		ctypes.c_int),] )

ispunct = _rpythonic_function_(		"ispunct", ctypes.c_int, [
	("none",		ctypes.c_int),] )

isspace = _rpythonic_function_(		"isspace", ctypes.c_int, [
	("none",		ctypes.c_int),] )

isupper = _rpythonic_function_(		"isupper", ctypes.c_int, [
	("none",		ctypes.c_int),] )

isxdigit = _rpythonic_function_(		"isxdigit", ctypes.c_int, [
	("none",		ctypes.c_int),] )

tolower = _rpythonic_function_(		"tolower", ctypes.c_int, [
	("__c",		ctypes.c_int),] )

toupper = _rpythonic_function_(		"toupper", ctypes.c_int, [
	("__c",		ctypes.c_int),] )

isblank = _rpythonic_function_(		"isblank", ctypes.c_int, [
	("none",		ctypes.c_int),] )

isascii = _rpythonic_function_(		"isascii", ctypes.c_int, [
	("__c",		ctypes.c_int),] )

toascii = _rpythonic_function_(		"toascii", ctypes.c_int, [
	("__c",		ctypes.c_int),] )

_toupper = _rpythonic_function_(		"_toupper", ctypes.c_int, [
	("none",		ctypes.c_int),] )

_tolower = _rpythonic_function_(		"_tolower", ctypes.c_int, [
	("none",		ctypes.c_int),] )

isalnum_l = _rpythonic_function_(		"isalnum_l", ctypes.c_int, [
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

isalpha_l = _rpythonic_function_(		"isalpha_l", ctypes.c_int, [
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

iscntrl_l = _rpythonic_function_(		"iscntrl_l", ctypes.c_int, [
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

isdigit_l = _rpythonic_function_(		"isdigit_l", ctypes.c_int, [
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

islower_l = _rpythonic_function_(		"islower_l", ctypes.c_int, [
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

isgraph_l = _rpythonic_function_(		"isgraph_l", ctypes.c_int, [
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

isprint_l = _rpythonic_function_(		"isprint_l", ctypes.c_int, [
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

ispunct_l = _rpythonic_function_(		"ispunct_l", ctypes.c_int, [
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

isspace_l = _rpythonic_function_(		"isspace_l", ctypes.c_int, [
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

isupper_l = _rpythonic_function_(		"isupper_l", ctypes.c_int, [
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

isxdigit_l = _rpythonic_function_(		"isxdigit_l", ctypes.c_int, [
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

isblank_l = _rpythonic_function_(		"isblank_l", ctypes.c_int, [
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

tolower_l = _rpythonic_function_(		"tolower_l", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__l",		ctypes.POINTER(__locale_struct)),] )

toupper_l = _rpythonic_function_(		"toupper_l", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__l",		ctypes.POINTER(__locale_struct)),] )

imaxabs = _rpythonic_function_(		"imaxabs", ctypes.c_longlong, [
	("__n",		ctypes.c_longlong),] )

imaxdiv = _rpythonic_function_(		"imaxdiv", imaxdiv_t, [
	("__numer",		ctypes.c_longlong),
	("__denom",		ctypes.c_longlong),] )

strtoimax = _rpythonic_function_(		"strtoimax", ctypes.c_longlong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

strtoumax = _rpythonic_function_(		"strtoumax", ctypes.c_ulonglong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

wcstoimax = _rpythonic_function_(		"wcstoimax", ctypes.c_longlong, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__base",		ctypes.c_int),] )

wcstoumax = _rpythonic_function_(		"wcstoumax", ctypes.c_ulonglong, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__base",		ctypes.c_int),] )

acos = _rpythonic_function_(		"acos", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

asin = _rpythonic_function_(		"asin", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

atan = _rpythonic_function_(		"atan", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

atan2 = _rpythonic_function_(		"atan2", ctypes.c_double, [
	("__y",		ctypes.c_double),
	("__x",		ctypes.c_double),] )

cos = _rpythonic_function_(		"cos", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

sin = _rpythonic_function_(		"sin", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

tan = _rpythonic_function_(		"tan", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

cosh = _rpythonic_function_(		"cosh", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

sinh = _rpythonic_function_(		"sinh", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

tanh = _rpythonic_function_(		"tanh", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

acosh = _rpythonic_function_(		"acosh", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

asinh = _rpythonic_function_(		"asinh", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

atanh = _rpythonic_function_(		"atanh", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

exp = _rpythonic_function_(		"exp", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

frexp = _rpythonic_function_(		"frexp", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__exponent",		ctypes.POINTER(ctypes.c_int)),] )

ldexp = _rpythonic_function_(		"ldexp", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__exponent",		ctypes.c_int),] )

log = _rpythonic_function_(		"log", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

log10 = _rpythonic_function_(		"log10", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

modf = _rpythonic_function_(		"modf", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__iptr",		ctypes.POINTER(ctypes.c_double)),] )

expm1 = _rpythonic_function_(		"expm1", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

log1p = _rpythonic_function_(		"log1p", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

logb = _rpythonic_function_(		"logb", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

exp2 = _rpythonic_function_(		"exp2", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

log2 = _rpythonic_function_(		"log2", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

pow = _rpythonic_function_(		"pow", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

sqrt = _rpythonic_function_(		"sqrt", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

hypot = _rpythonic_function_(		"hypot", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

cbrt = _rpythonic_function_(		"cbrt", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

ceil = _rpythonic_function_(		"ceil", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

fabs = _rpythonic_function_(		"fabs", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

floor = _rpythonic_function_(		"floor", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

fmod = _rpythonic_function_(		"fmod", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

isinf = _rpythonic_function_(		"isinf", ctypes.c_int, [
	("__value",		ctypes.c_double),] )

finite = _rpythonic_function_(		"finite", ctypes.c_int, [
	("__value",		ctypes.c_double),] )

drem = _rpythonic_function_(		"drem", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

significand = _rpythonic_function_(		"significand", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

copysign = _rpythonic_function_(		"copysign", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

nan = _rpythonic_function_(		"nan", ctypes.c_double, [
	("__tagb",		ctypes.POINTER(ctypes.c_char)),] )

isnan = _rpythonic_function_(		"isnan", ctypes.c_int, [
	("__value",		ctypes.c_double),] )

j0 = _rpythonic_function_(		"j0", ctypes.c_double, [
	("none",		ctypes.c_double),] )

j1 = _rpythonic_function_(		"j1", ctypes.c_double, [
	("none",		ctypes.c_double),] )

jn = _rpythonic_function_(		"jn", ctypes.c_double, [
	("none",		ctypes.c_int),
	("none",		ctypes.c_double),] )

y0 = _rpythonic_function_(		"y0", ctypes.c_double, [
	("none",		ctypes.c_double),] )

y1 = _rpythonic_function_(		"y1", ctypes.c_double, [
	("none",		ctypes.c_double),] )

yn = _rpythonic_function_(		"yn", ctypes.c_double, [
	("none",		ctypes.c_int),
	("none",		ctypes.c_double),] )

erf = _rpythonic_function_(		"erf", ctypes.c_double, [
	("none",		ctypes.c_double),] )

erfc = _rpythonic_function_(		"erfc", ctypes.c_double, [
	("none",		ctypes.c_double),] )

lgamma = _rpythonic_function_(		"lgamma", ctypes.c_double, [
	("none",		ctypes.c_double),] )

tgamma = _rpythonic_function_(		"tgamma", ctypes.c_double, [
	("none",		ctypes.c_double),] )

gamma = _rpythonic_function_(		"gamma", ctypes.c_double, [
	("none",		ctypes.c_double),] )

lgamma_r = _rpythonic_function_(		"lgamma_r", ctypes.c_double, [
	("none",		ctypes.c_double),
	("__signgamp",		ctypes.POINTER(ctypes.c_int)),] )

rint = _rpythonic_function_(		"rint", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

nextafter = _rpythonic_function_(		"nextafter", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

nexttoward = _rpythonic_function_(		"nexttoward", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

remainder = _rpythonic_function_(		"remainder", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

scalbn = _rpythonic_function_(		"scalbn", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__n",		ctypes.c_int),] )

ilogb = _rpythonic_function_(		"ilogb", ctypes.c_int, [
	("__x",		ctypes.c_double),] )

scalbln = _rpythonic_function_(		"scalbln", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__n",		ctypes.c_int64),] )

nearbyint = _rpythonic_function_(		"nearbyint", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

round = _rpythonic_function_(		"round", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

trunc = _rpythonic_function_(		"trunc", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

remquo = _rpythonic_function_(		"remquo", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),
	("__quo",		ctypes.POINTER(ctypes.c_int)),] )

lrint = _rpythonic_function_(		"lrint", ctypes.c_int64, [
	("__x",		ctypes.c_double),] )

llrint = _rpythonic_function_(		"llrint", ctypes.c_longlong, [
	("__x",		ctypes.c_double),] )

lround = _rpythonic_function_(		"lround", ctypes.c_int64, [
	("__x",		ctypes.c_double),] )

llround = _rpythonic_function_(		"llround", ctypes.c_longlong, [
	("__x",		ctypes.c_double),] )

fdim = _rpythonic_function_(		"fdim", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

fmax = _rpythonic_function_(		"fmax", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

fmin = _rpythonic_function_(		"fmin", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

fma = _rpythonic_function_(		"fma", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),
	("__z",		ctypes.c_double),] )

scalb = _rpythonic_function_(		"scalb", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__n",		ctypes.c_double),] )

acosf = _rpythonic_function_(		"acosf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

asinf = _rpythonic_function_(		"asinf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

atanf = _rpythonic_function_(		"atanf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

atan2f = _rpythonic_function_(		"atan2f", ctypes.c_float, [
	("__y",		ctypes.c_float),
	("__x",		ctypes.c_float),] )

cosf = _rpythonic_function_(		"cosf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

sinf = _rpythonic_function_(		"sinf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

tanf = _rpythonic_function_(		"tanf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

coshf = _rpythonic_function_(		"coshf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

sinhf = _rpythonic_function_(		"sinhf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

tanhf = _rpythonic_function_(		"tanhf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

acoshf = _rpythonic_function_(		"acoshf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

asinhf = _rpythonic_function_(		"asinhf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

atanhf = _rpythonic_function_(		"atanhf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

expf = _rpythonic_function_(		"expf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

frexpf = _rpythonic_function_(		"frexpf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__exponent",		ctypes.POINTER(ctypes.c_int)),] )

ldexpf = _rpythonic_function_(		"ldexpf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__exponent",		ctypes.c_int),] )

logf = _rpythonic_function_(		"logf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

log10f = _rpythonic_function_(		"log10f", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

modff = _rpythonic_function_(		"modff", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__iptr",		ctypes.POINTER(ctypes.c_float)),] )

expm1f = _rpythonic_function_(		"expm1f", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

log1pf = _rpythonic_function_(		"log1pf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

logbf = _rpythonic_function_(		"logbf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

exp2f = _rpythonic_function_(		"exp2f", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

log2f = _rpythonic_function_(		"log2f", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

powf = _rpythonic_function_(		"powf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),] )

sqrtf = _rpythonic_function_(		"sqrtf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

hypotf = _rpythonic_function_(		"hypotf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),] )

cbrtf = _rpythonic_function_(		"cbrtf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

ceilf = _rpythonic_function_(		"ceilf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

fabsf = _rpythonic_function_(		"fabsf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

floorf = _rpythonic_function_(		"floorf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

fmodf = _rpythonic_function_(		"fmodf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),] )

isinff = _rpythonic_function_(		"isinff", ctypes.c_int, [
	("__value",		ctypes.c_float),] )

finitef = _rpythonic_function_(		"finitef", ctypes.c_int, [
	("__value",		ctypes.c_float),] )

dremf = _rpythonic_function_(		"dremf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),] )

significandf = _rpythonic_function_(		"significandf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

copysignf = _rpythonic_function_(		"copysignf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),] )

nanf = _rpythonic_function_(		"nanf", ctypes.c_float, [
	("__tagb",		ctypes.POINTER(ctypes.c_char)),] )

isnanf = _rpythonic_function_(		"isnanf", ctypes.c_int, [
	("__value",		ctypes.c_float),] )

j0f = _rpythonic_function_(		"j0f", ctypes.c_float, [
	("none",		ctypes.c_float),] )

j1f = _rpythonic_function_(		"j1f", ctypes.c_float, [
	("none",		ctypes.c_float),] )

jnf = _rpythonic_function_(		"jnf", ctypes.c_float, [
	("none",		ctypes.c_int),
	("none",		ctypes.c_float),] )

y0f = _rpythonic_function_(		"y0f", ctypes.c_float, [
	("none",		ctypes.c_float),] )

y1f = _rpythonic_function_(		"y1f", ctypes.c_float, [
	("none",		ctypes.c_float),] )

ynf = _rpythonic_function_(		"ynf", ctypes.c_float, [
	("none",		ctypes.c_int),
	("none",		ctypes.c_float),] )

erff = _rpythonic_function_(		"erff", ctypes.c_float, [
	("none",		ctypes.c_float),] )

erfcf = _rpythonic_function_(		"erfcf", ctypes.c_float, [
	("none",		ctypes.c_float),] )

lgammaf = _rpythonic_function_(		"lgammaf", ctypes.c_float, [
	("none",		ctypes.c_float),] )

tgammaf = _rpythonic_function_(		"tgammaf", ctypes.c_float, [
	("none",		ctypes.c_float),] )

gammaf = _rpythonic_function_(		"gammaf", ctypes.c_float, [
	("none",		ctypes.c_float),] )

lgammaf_r = _rpythonic_function_(		"lgammaf_r", ctypes.c_float, [
	("none",		ctypes.c_float),
	("__signgamp",		ctypes.POINTER(ctypes.c_int)),] )

rintf = _rpythonic_function_(		"rintf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

nextafterf = _rpythonic_function_(		"nextafterf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),] )

nexttowardf = _rpythonic_function_(		"nexttowardf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_double),] )

remainderf = _rpythonic_function_(		"remainderf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),] )

scalbnf = _rpythonic_function_(		"scalbnf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__n",		ctypes.c_int),] )

ilogbf = _rpythonic_function_(		"ilogbf", ctypes.c_int, [
	("__x",		ctypes.c_float),] )

scalblnf = _rpythonic_function_(		"scalblnf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__n",		ctypes.c_int64),] )

nearbyintf = _rpythonic_function_(		"nearbyintf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

roundf = _rpythonic_function_(		"roundf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

truncf = _rpythonic_function_(		"truncf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

remquof = _rpythonic_function_(		"remquof", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),
	("__quo",		ctypes.POINTER(ctypes.c_int)),] )

lrintf = _rpythonic_function_(		"lrintf", ctypes.c_int64, [
	("__x",		ctypes.c_float),] )

llrintf = _rpythonic_function_(		"llrintf", ctypes.c_longlong, [
	("__x",		ctypes.c_float),] )

lroundf = _rpythonic_function_(		"lroundf", ctypes.c_int64, [
	("__x",		ctypes.c_float),] )

llroundf = _rpythonic_function_(		"llroundf", ctypes.c_longlong, [
	("__x",		ctypes.c_float),] )

fdimf = _rpythonic_function_(		"fdimf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),] )

fmaxf = _rpythonic_function_(		"fmaxf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),] )

fminf = _rpythonic_function_(		"fminf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),] )

fmaf = _rpythonic_function_(		"fmaf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),
	("__z",		ctypes.c_float),] )

scalbf = _rpythonic_function_(		"scalbf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__n",		ctypes.c_float),] )

acosl = _rpythonic_function_(		"acosl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

asinl = _rpythonic_function_(		"asinl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

atanl = _rpythonic_function_(		"atanl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

atan2l = _rpythonic_function_(		"atan2l", ctypes.c_double, [
	("__y",		ctypes.c_double),
	("__x",		ctypes.c_double),] )

cosl = _rpythonic_function_(		"cosl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

sinl = _rpythonic_function_(		"sinl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

tanl = _rpythonic_function_(		"tanl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

coshl = _rpythonic_function_(		"coshl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

sinhl = _rpythonic_function_(		"sinhl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

tanhl = _rpythonic_function_(		"tanhl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

acoshl = _rpythonic_function_(		"acoshl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

asinhl = _rpythonic_function_(		"asinhl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

atanhl = _rpythonic_function_(		"atanhl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

expl = _rpythonic_function_(		"expl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

frexpl = _rpythonic_function_(		"frexpl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__exponent",		ctypes.POINTER(ctypes.c_int)),] )

ldexpl = _rpythonic_function_(		"ldexpl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__exponent",		ctypes.c_int),] )

logl = _rpythonic_function_(		"logl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

log10l = _rpythonic_function_(		"log10l", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

modfl = _rpythonic_function_(		"modfl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__iptr",		ctypes.POINTER(ctypes.c_double)),] )

expm1l = _rpythonic_function_(		"expm1l", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

log1pl = _rpythonic_function_(		"log1pl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

logbl = _rpythonic_function_(		"logbl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

exp2l = _rpythonic_function_(		"exp2l", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

log2l = _rpythonic_function_(		"log2l", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

powl = _rpythonic_function_(		"powl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

sqrtl = _rpythonic_function_(		"sqrtl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

hypotl = _rpythonic_function_(		"hypotl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

cbrtl = _rpythonic_function_(		"cbrtl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

ceill = _rpythonic_function_(		"ceill", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

fabsl = _rpythonic_function_(		"fabsl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

floorl = _rpythonic_function_(		"floorl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

fmodl = _rpythonic_function_(		"fmodl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

isinfl = _rpythonic_function_(		"isinfl", ctypes.c_int, [
	("__value",		ctypes.c_double),] )

finitel = _rpythonic_function_(		"finitel", ctypes.c_int, [
	("__value",		ctypes.c_double),] )

dreml = _rpythonic_function_(		"dreml", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

significandl = _rpythonic_function_(		"significandl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

copysignl = _rpythonic_function_(		"copysignl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

nanl = _rpythonic_function_(		"nanl", ctypes.c_double, [
	("__tagb",		ctypes.POINTER(ctypes.c_char)),] )

isnanl = _rpythonic_function_(		"isnanl", ctypes.c_int, [
	("__value",		ctypes.c_double),] )

j0l = _rpythonic_function_(		"j0l", ctypes.c_double, [
	("none",		ctypes.c_double),] )

j1l = _rpythonic_function_(		"j1l", ctypes.c_double, [
	("none",		ctypes.c_double),] )

jnl = _rpythonic_function_(		"jnl", ctypes.c_double, [
	("none",		ctypes.c_int),
	("none",		ctypes.c_double),] )

y0l = _rpythonic_function_(		"y0l", ctypes.c_double, [
	("none",		ctypes.c_double),] )

y1l = _rpythonic_function_(		"y1l", ctypes.c_double, [
	("none",		ctypes.c_double),] )

ynl = _rpythonic_function_(		"ynl", ctypes.c_double, [
	("none",		ctypes.c_int),
	("none",		ctypes.c_double),] )

erfl = _rpythonic_function_(		"erfl", ctypes.c_double, [
	("none",		ctypes.c_double),] )

erfcl = _rpythonic_function_(		"erfcl", ctypes.c_double, [
	("none",		ctypes.c_double),] )

lgammal = _rpythonic_function_(		"lgammal", ctypes.c_double, [
	("none",		ctypes.c_double),] )

tgammal = _rpythonic_function_(		"tgammal", ctypes.c_double, [
	("none",		ctypes.c_double),] )

gammal = _rpythonic_function_(		"gammal", ctypes.c_double, [
	("none",		ctypes.c_double),] )

lgammal_r = _rpythonic_function_(		"lgammal_r", ctypes.c_double, [
	("none",		ctypes.c_double),
	("__signgamp",		ctypes.POINTER(ctypes.c_int)),] )

rintl = _rpythonic_function_(		"rintl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

nextafterl = _rpythonic_function_(		"nextafterl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

nexttowardl = _rpythonic_function_(		"nexttowardl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

remainderl = _rpythonic_function_(		"remainderl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

scalbnl = _rpythonic_function_(		"scalbnl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__n",		ctypes.c_int),] )

ilogbl = _rpythonic_function_(		"ilogbl", ctypes.c_int, [
	("__x",		ctypes.c_double),] )

scalblnl = _rpythonic_function_(		"scalblnl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__n",		ctypes.c_int64),] )

nearbyintl = _rpythonic_function_(		"nearbyintl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

roundl = _rpythonic_function_(		"roundl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

truncl = _rpythonic_function_(		"truncl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

remquol = _rpythonic_function_(		"remquol", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),
	("__quo",		ctypes.POINTER(ctypes.c_int)),] )

lrintl = _rpythonic_function_(		"lrintl", ctypes.c_int64, [
	("__x",		ctypes.c_double),] )

llrintl = _rpythonic_function_(		"llrintl", ctypes.c_longlong, [
	("__x",		ctypes.c_double),] )

lroundl = _rpythonic_function_(		"lroundl", ctypes.c_int64, [
	("__x",		ctypes.c_double),] )

llroundl = _rpythonic_function_(		"llroundl", ctypes.c_longlong, [
	("__x",		ctypes.c_double),] )

fdiml = _rpythonic_function_(		"fdiml", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

fmaxl = _rpythonic_function_(		"fmaxl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

fminl = _rpythonic_function_(		"fminl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

fmal = _rpythonic_function_(		"fmal", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),
	("__z",		ctypes.c_double),] )

scalbl = _rpythonic_function_(		"scalbl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__n",		ctypes.c_double),] )

matherr = _rpythonic_function_(		"matherr", ctypes.c_int, [
	("__exc",		ctypes.POINTER(exception)),] )

_IO_getc = _rpythonic_function_(		"_IO_getc", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_putc = _rpythonic_function_(		"_IO_putc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_feof = _rpythonic_function_(		"_IO_feof", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_ferror = _rpythonic_function_(		"_IO_ferror", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_peekc_locked = _rpythonic_function_(		"_IO_peekc_locked", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_flockfile = _rpythonic_function_(		"_IO_flockfile", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_IO_funlockfile = _rpythonic_function_(		"_IO_funlockfile", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_IO_ftrylockfile = _rpythonic_function_(		"_IO_ftrylockfile", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_IO_vfscanf = _rpythonic_function_(		"_IO_vfscanf", ctypes.c_int, [
	("__restrict",		ctypes.POINTER(_IO_FILE)),
	("__restrict",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_char),
	("__restrict",		ctypes.POINTER(ctypes.c_int)),] )

_IO_vfprintf = _rpythonic_function_(		"_IO_vfprintf", ctypes.c_int, [
	("__restrict",		ctypes.POINTER(_IO_FILE)),
	("__restrict",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_char),] )

_IO_padn = _rpythonic_function_(		"_IO_padn", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

_IO_sgetn = _rpythonic_function_(		"_IO_sgetn", ctypes.c_uint, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_uint),] )

_IO_seekoff = _rpythonic_function_(		"_IO_seekoff", ctypes.c_longlong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_longlong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

_IO_seekpos = _rpythonic_function_(		"_IO_seekpos", ctypes.c_longlong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_longlong),
	("none",		ctypes.c_int),] )

_IO_free_backup_area = _rpythonic_function_(		"_IO_free_backup_area", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

remove = _rpythonic_function_(		"remove", ctypes.c_int, [
	("__filename",		ctypes.POINTER(ctypes.c_char)),] )

rename = _rpythonic_function_(		"rename", ctypes.c_int, [
	("__old",		ctypes.POINTER(ctypes.c_char)),
	("__new",		ctypes.POINTER(ctypes.c_char)),] )

renameat = _rpythonic_function_(		"renameat", ctypes.c_int, [
	("__oldfd",		ctypes.c_int),
	("__old",		ctypes.POINTER(ctypes.c_char)),
	("__newfd",		ctypes.c_int),
	("__new",		ctypes.POINTER(ctypes.c_char)),] )

tmpfile = _rpythonic_function_(		"tmpfile", ctypes.POINTER(_IO_FILE), [] )

tmpnam = _rpythonic_function_(		"tmpnam", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

tmpnam_r = _rpythonic_function_(		"tmpnam_r", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

tempnam = _rpythonic_function_(		"tempnam", ctypes.POINTER(ctypes.c_char), [
	("__dir",		ctypes.POINTER(ctypes.c_char)),
	("__pfx",		ctypes.POINTER(ctypes.c_char)),] )

fclose = _rpythonic_function_(		"fclose", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fflush = _rpythonic_function_(		"fflush", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fflush_unlocked = _rpythonic_function_(		"fflush_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fopen = _rpythonic_function_(		"fopen", ctypes.POINTER(_IO_FILE), [
	("__filename",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

freopen = _rpythonic_function_(		"freopen", ctypes.POINTER(_IO_FILE), [
	("__filename",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.POINTER(ctypes.c_char)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fdopen = _rpythonic_function_(		"fdopen", ctypes.POINTER(_IO_FILE), [
	("__fd",		ctypes.c_int),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

fmemopen = _rpythonic_function_(		"fmemopen", ctypes.POINTER(_IO_FILE), [
	("__s",		ctypes.POINTER(ctypes.c_void_p)),
	("__len",		ctypes.c_uint),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

open_memstream = _rpythonic_function_(		"open_memstream", ctypes.POINTER(_IO_FILE), [
	("__bufloc",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__sizeloc",		ctypes.POINTER(ctypes.c_uint)),] )

setbuf = _rpythonic_function_(		"setbuf", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

setvbuf = _rpythonic_function_(		"setvbuf", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.c_int),
	("__n",		ctypes.c_uint),] )

setbuffer = _rpythonic_function_(		"setbuffer", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__size",		ctypes.c_uint),] )

setlinebuf = _rpythonic_function_(		"setlinebuf", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fprintf = _rpythonic_function_(		"fprintf", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

printf = _rpythonic_function_(		"printf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

sprintf = _rpythonic_function_(		"sprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

vfprintf = _rpythonic_function_(		"vfprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vprintf = _rpythonic_function_(		"vprintf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vsprintf = _rpythonic_function_(		"vsprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

snprintf = _rpythonic_function_(		"snprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__maxlen",		ctypes.c_uint),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

vsnprintf = _rpythonic_function_(		"vsnprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__maxlen",		ctypes.c_uint),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vdprintf = _rpythonic_function_(		"vdprintf", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__fmt",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

dprintf = _rpythonic_function_(		"dprintf", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__fmt",		ctypes.POINTER(ctypes.c_char)),] )

fscanf = _rpythonic_function_(		"fscanf", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

scanf = _rpythonic_function_(		"scanf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

sscanf = _rpythonic_function_(		"sscanf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

vfscanf = _rpythonic_function_(		"vfscanf", ctypes.c_int, [
	("__s",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vscanf = _rpythonic_function_(		"vscanf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vsscanf = _rpythonic_function_(		"vsscanf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

fgetc = _rpythonic_function_(		"fgetc", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getc = _rpythonic_function_(		"getc", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getchar = _rpythonic_function_(		"getchar", ctypes.c_int, [] )

getc_unlocked = _rpythonic_function_(		"getc_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getchar_unlocked = _rpythonic_function_(		"getchar_unlocked", ctypes.c_int, [] )

fgetc_unlocked = _rpythonic_function_(		"fgetc_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fputc = _rpythonic_function_(		"fputc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putc = _rpythonic_function_(		"putc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putchar = _rpythonic_function_(		"putchar", ctypes.c_int, [
	("__c",		ctypes.c_int),] )

fputc_unlocked = _rpythonic_function_(		"fputc_unlocked", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putc_unlocked = _rpythonic_function_(		"putc_unlocked", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putchar_unlocked = _rpythonic_function_(		"putchar_unlocked", ctypes.c_int, [
	("__c",		ctypes.c_int),] )

getw = _rpythonic_function_(		"getw", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putw = _rpythonic_function_(		"putw", ctypes.c_int, [
	("__w",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fgets = _rpythonic_function_(		"fgets", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

gets = _rpythonic_function_(		"gets", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

getdelim = _rpythonic_function_(		"getdelim", ctypes.c_int, [
	("__lineptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__n",		ctypes.POINTER(ctypes.c_uint)),
	("__delimiter",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getline = _rpythonic_function_(		"getline", ctypes.c_int, [
	("__lineptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__n",		ctypes.POINTER(ctypes.c_uint)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fputs = _rpythonic_function_(		"fputs", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

puts = _rpythonic_function_(		"puts", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

ungetc = _rpythonic_function_(		"ungetc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fread = _rpythonic_function_(		"fread", ctypes.c_uint, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint),
	("__n",		ctypes.c_uint),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fwrite = _rpythonic_function_(		"fwrite", ctypes.c_uint, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint),
	("__n",		ctypes.c_uint),
	("__s",		ctypes.POINTER(_IO_FILE)),] )

fread_unlocked = _rpythonic_function_(		"fread_unlocked", ctypes.c_uint, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint),
	("__n",		ctypes.c_uint),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fwrite_unlocked = _rpythonic_function_(		"fwrite_unlocked", ctypes.c_uint, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint),
	("__n",		ctypes.c_uint),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fseek = _rpythonic_function_(		"fseek", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__off",		ctypes.c_int64),
	("__whence",		ctypes.c_int),] )

ftell = _rpythonic_function_(		"ftell", ctypes.c_int64, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

rewind = _rpythonic_function_(		"rewind", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fseeko = _rpythonic_function_(		"fseeko", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__off",		ctypes.c_int64),
	("__whence",		ctypes.c_int),] )

ftello = _rpythonic_function_(		"ftello", ctypes.c_int64, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fgetpos = _rpythonic_function_(		"fgetpos", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__pos",		ctypes.POINTER(_G_fpos_t)),] )

fsetpos = _rpythonic_function_(		"fsetpos", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__pos",		ctypes.POINTER(_G_fpos_t)),] )

clearerr = _rpythonic_function_(		"clearerr", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

feof = _rpythonic_function_(		"feof", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ferror = _rpythonic_function_(		"ferror", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

clearerr_unlocked = _rpythonic_function_(		"clearerr_unlocked", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

feof_unlocked = _rpythonic_function_(		"feof_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ferror_unlocked = _rpythonic_function_(		"ferror_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

perror = _rpythonic_function_(		"perror", ctypes.c_void_p, [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

fileno = _rpythonic_function_(		"fileno", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fileno_unlocked = _rpythonic_function_(		"fileno_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

popen = _rpythonic_function_(		"popen", ctypes.POINTER(_IO_FILE), [
	("__command",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

pclose = _rpythonic_function_(		"pclose", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ctermid = _rpythonic_function_(		"ctermid", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

flockfile = _rpythonic_function_(		"flockfile", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ftrylockfile = _rpythonic_function_(		"ftrylockfile", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

funlockfile = _rpythonic_function_(		"funlockfile", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

atof = _rpythonic_function_(		"atof", ctypes.c_double, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),] )

atoi = _rpythonic_function_(		"atoi", ctypes.c_int, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),] )

atol = _rpythonic_function_(		"atol", ctypes.c_int64, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),] )

atoll = _rpythonic_function_(		"atoll", ctypes.c_longlong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),] )

strtod = _rpythonic_function_(		"strtod", ctypes.c_double, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

strtof = _rpythonic_function_(		"strtof", ctypes.c_float, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

strtold = _rpythonic_function_(		"strtold", ctypes.c_double, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

strtol = _rpythonic_function_(		"strtol", ctypes.c_int64, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

strtoul = _rpythonic_function_(		"strtoul", ctypes.c_uint64, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

strtoq = _rpythonic_function_(		"strtoq", ctypes.c_longlong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

strtouq = _rpythonic_function_(		"strtouq", ctypes.c_ulonglong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

strtoll = _rpythonic_function_(		"strtoll", ctypes.c_longlong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

strtoull = _rpythonic_function_(		"strtoull", ctypes.c_ulonglong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

l64a = _rpythonic_function_(		"l64a", ctypes.POINTER(ctypes.c_char), [
	("__n",		ctypes.c_int64),] )

a64l = _rpythonic_function_(		"a64l", ctypes.c_int64, [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

select = _rpythonic_function_(		"select", ctypes.c_int, [
	("__nfds",		ctypes.c_int),
	("__readfds",		ctypes.POINTER(fd_set)),
	("__writefds",		ctypes.POINTER(fd_set)),
	("__exceptfds",		ctypes.POINTER(fd_set)),
	("__timeout",		ctypes.POINTER(timeval)),] )

pselect = _rpythonic_function_(		"pselect", ctypes.c_int, [
	("__nfds",		ctypes.c_int),
	("__readfds",		ctypes.POINTER(fd_set)),
	("__writefds",		ctypes.POINTER(fd_set)),
	("__exceptfds",		ctypes.POINTER(fd_set)),
	("__timeout",		ctypes.POINTER(timespec)),
	("__sigmask",		ctypes.POINTER(__sigset_t)),] )

gnu_dev_major = _rpythonic_function_(		"gnu_dev_major", ctypes.c_uint, [
	("__dev",		ctypes.c_ulonglong),] )

gnu_dev_minor = _rpythonic_function_(		"gnu_dev_minor", ctypes.c_uint, [
	("__dev",		ctypes.c_ulonglong),] )

gnu_dev_makedev = _rpythonic_function_(		"gnu_dev_makedev", ctypes.c_ulonglong, [
	("__major",		ctypes.c_uint),
	("__minor",		ctypes.c_uint),] )

random = _rpythonic_function_(		"random", ctypes.c_int64, [] )

srandom = _rpythonic_function_(		"srandom", ctypes.c_void_p, [
	("__seed",		ctypes.c_uint),] )

initstate = _rpythonic_function_(		"initstate", ctypes.POINTER(ctypes.c_char), [
	("__seed",		ctypes.c_uint),
	("__statebuf",		ctypes.POINTER(ctypes.c_char)),
	("__statelen",		ctypes.c_uint),] )

setstate = _rpythonic_function_(		"setstate", ctypes.POINTER(ctypes.c_char), [
	("__statebuf",		ctypes.POINTER(ctypes.c_char)),] )

random_r = _rpythonic_function_(		"random_r", ctypes.c_int, [
	("__buf",		ctypes.POINTER(random_data)),
	("__result",		ctypes.POINTER(ctypes.c_int32)),] )

srandom_r = _rpythonic_function_(		"srandom_r", ctypes.c_int, [
	("__seed",		ctypes.c_uint),
	("__buf",		ctypes.POINTER(random_data)),] )

initstate_r = _rpythonic_function_(		"initstate_r", ctypes.c_int, [
	("__seed",		ctypes.c_uint),
	("__statebuf",		ctypes.POINTER(ctypes.c_char)),
	("__statelen",		ctypes.c_uint),
	("__buf",		ctypes.POINTER(random_data)),] )

setstate_r = _rpythonic_function_(		"setstate_r", ctypes.c_int, [
	("__statebuf",		ctypes.POINTER(ctypes.c_char)),
	("__buf",		ctypes.POINTER(random_data)),] )

rand = _rpythonic_function_(		"rand", ctypes.c_int, [] )

srand = _rpythonic_function_(		"srand", ctypes.c_void_p, [
	("__seed",		ctypes.c_uint),] )

rand_r = _rpythonic_function_(		"rand_r", ctypes.c_int, [
	("__seed",		ctypes.POINTER(ctypes.c_uint)),] )

drand48 = _rpythonic_function_(		"drand48", ctypes.c_double, [] )

erand48 = _rpythonic_function_(		"erand48", ctypes.c_double, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),] )

lrand48 = _rpythonic_function_(		"lrand48", ctypes.c_int64, [] )

nrand48 = _rpythonic_function_(		"nrand48", ctypes.c_int64, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),] )

mrand48 = _rpythonic_function_(		"mrand48", ctypes.c_int64, [] )

jrand48 = _rpythonic_function_(		"jrand48", ctypes.c_int64, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),] )

srand48 = _rpythonic_function_(		"srand48", ctypes.c_void_p, [
	("__seedval",		ctypes.c_int64),] )

seed48 = _rpythonic_function_(		"seed48", ctypes.POINTER(ctypes.c_uint16), [
	("__seed16v",		( ctypes.c_uint16 * 3 )),] )

lcong48 = _rpythonic_function_(		"lcong48", ctypes.c_void_p, [
	("__param",		( ctypes.c_uint16 * 7 )),] )

drand48_r = _rpythonic_function_(		"drand48_r", ctypes.c_int, [
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_double)),] )

erand48_r = _rpythonic_function_(		"erand48_r", ctypes.c_int, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_double)),] )

lrand48_r = _rpythonic_function_(		"lrand48_r", ctypes.c_int, [
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_int64)),] )

nrand48_r = _rpythonic_function_(		"nrand48_r", ctypes.c_int, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_int64)),] )

mrand48_r = _rpythonic_function_(		"mrand48_r", ctypes.c_int, [
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_int64)),] )

jrand48_r = _rpythonic_function_(		"jrand48_r", ctypes.c_int, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_int64)),] )

srand48_r = _rpythonic_function_(		"srand48_r", ctypes.c_int, [
	("__seedval",		ctypes.c_int64),
	("__buffer",		ctypes.POINTER(drand48_data)),] )

seed48_r = _rpythonic_function_(		"seed48_r", ctypes.c_int, [
	("__seed16v",		( ctypes.c_uint16 * 3 )),
	("__buffer",		ctypes.POINTER(drand48_data)),] )

lcong48_r = _rpythonic_function_(		"lcong48_r", ctypes.c_int, [
	("__param",		( ctypes.c_uint16 * 7 )),
	("__buffer",		ctypes.POINTER(drand48_data)),] )

malloc = _rpythonic_function_(		"malloc", ctypes.POINTER(ctypes.c_void_p), [
	("__size",		ctypes.c_uint),] )

calloc = _rpythonic_function_(		"calloc", ctypes.POINTER(ctypes.c_void_p), [
	("__nmemb",		ctypes.c_uint),
	("__size",		ctypes.c_uint),] )

realloc = _rpythonic_function_(		"realloc", ctypes.POINTER(ctypes.c_void_p), [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint),] )

free = _rpythonic_function_(		"free", ctypes.c_void_p, [("__ptr",		ctypes.c_void_p)] )

cfree = _rpythonic_function_(		"cfree", ctypes.c_void_p, [("__ptr",		ctypes.c_void_p)] )

alloca = _rpythonic_function_(		"alloca", ctypes.POINTER(ctypes.c_void_p), [
	("__size",		ctypes.c_uint),] )

valloc = _rpythonic_function_(		"valloc", ctypes.POINTER(ctypes.c_void_p), [
	("__size",		ctypes.c_uint),] )

posix_memalign = _rpythonic_function_(		"posix_memalign", ctypes.c_int, [
	("__memptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("__alignment",		ctypes.c_uint),
	("__size",		ctypes.c_uint),] )

abort = _rpythonic_function_(		"abort", ctypes.c_void_p, [] )

atexit = _rpythonic_function_(		"atexit", ctypes.c_int, [
	("__func",		ctypes.c_void_p),] )

on_exit = _rpythonic_function_(		"on_exit", ctypes.c_int, [
	("__func",		ctypes.c_void_p),
	("__arg",		ctypes.POINTER(ctypes.c_void_p)),] )

exit = _rpythonic_function_(		"exit", ctypes.c_void_p, [
	("__status",		ctypes.c_int),] )

_Exit = _rpythonic_function_(		"_Exit", ctypes.c_void_p, [
	("__status",		ctypes.c_int),] )

getenv = _rpythonic_function_(		"getenv", ctypes.POINTER(ctypes.c_char), [
	("__name",		ctypes.POINTER(ctypes.c_char)),] )

putenv = _rpythonic_function_(		"putenv", ctypes.c_int, [
	("__string",		ctypes.POINTER(ctypes.c_char)),] )

setenv = _rpythonic_function_(		"setenv", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),
	("__value",		ctypes.POINTER(ctypes.c_char)),
	("__replace",		ctypes.c_int),] )

unsetenv = _rpythonic_function_(		"unsetenv", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),] )

clearenv = _rpythonic_function_(		"clearenv", ctypes.c_int, [] )

mktemp = _rpythonic_function_(		"mktemp", ctypes.POINTER(ctypes.c_char), [
	("__template",		ctypes.POINTER(ctypes.c_char)),] )

mkstemp = _rpythonic_function_(		"mkstemp", ctypes.c_int, [
	("__template",		ctypes.POINTER(ctypes.c_char)),] )

mkstemps = _rpythonic_function_(		"mkstemps", ctypes.c_int, [
	("__template",		ctypes.POINTER(ctypes.c_char)),
	("__suffixlen",		ctypes.c_int),] )

mkdtemp = _rpythonic_function_(		"mkdtemp", ctypes.POINTER(ctypes.c_char), [
	("__template",		ctypes.POINTER(ctypes.c_char)),] )

system = _rpythonic_function_(		"system", ctypes.c_int, [
	("__command",		ctypes.POINTER(ctypes.c_char)),] )

realpath = _rpythonic_function_(		"realpath", ctypes.POINTER(ctypes.c_char), [
	("__name",		ctypes.POINTER(ctypes.c_char)),
	("__resolved",		ctypes.POINTER(ctypes.c_char)),] )

bsearch = _rpythonic_function_(		"bsearch", ctypes.POINTER(ctypes.c_void_p), [
	("__key",		ctypes.POINTER(ctypes.c_void_p)),
	("__base",		ctypes.POINTER(ctypes.c_void_p)),
	("__nmemb",		ctypes.c_uint),
	("__size",		ctypes.c_uint),
	("__compar",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

qsort = _rpythonic_function_(		"qsort", ctypes.c_void_p, [
	("__base",		ctypes.POINTER(ctypes.c_void_p)),
	("__nmemb",		ctypes.c_uint),
	("__size",		ctypes.c_uint),
	("__compar",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

abs = _rpythonic_function_(		"abs", ctypes.c_int, [
	("__x",		ctypes.c_int),] )

labs = _rpythonic_function_(		"labs", ctypes.c_int64, [
	("__x",		ctypes.c_int64),] )

llabs = _rpythonic_function_(		"llabs", ctypes.c_longlong, [
	("__x",		ctypes.c_longlong),] )

div = _rpythonic_function_(		"div", div_t, [
	("__numer",		ctypes.c_int),
	("__denom",		ctypes.c_int),] )

ldiv = _rpythonic_function_(		"ldiv", ldiv_t, [
	("__numer",		ctypes.c_int64),
	("__denom",		ctypes.c_int64),] )

lldiv = _rpythonic_function_(		"lldiv", lldiv_t, [
	("__numer",		ctypes.c_longlong),
	("__denom",		ctypes.c_longlong),] )

ecvt = _rpythonic_function_(		"ecvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),] )

fcvt = _rpythonic_function_(		"fcvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),] )

gcvt = _rpythonic_function_(		"gcvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

qecvt = _rpythonic_function_(		"qecvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),] )

qfcvt = _rpythonic_function_(		"qfcvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),] )

qgcvt = _rpythonic_function_(		"qgcvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

ecvt_r = _rpythonic_function_(		"ecvt_r", ctypes.c_int, [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint),] )

fcvt_r = _rpythonic_function_(		"fcvt_r", ctypes.c_int, [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint),] )

qecvt_r = _rpythonic_function_(		"qecvt_r", ctypes.c_int, [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint),] )

qfcvt_r = _rpythonic_function_(		"qfcvt_r", ctypes.c_int, [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint),] )

mblen = _rpythonic_function_(		"mblen", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

mbtowc = _rpythonic_function_(		"mbtowc", ctypes.c_int, [
	("__pwc",		ctypes.POINTER(ctypes.c_int)),
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

wctomb = _rpythonic_function_(		"wctomb", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__wchar",		ctypes.c_int),] )

mbstowcs = _rpythonic_function_(		"mbstowcs", ctypes.c_uint, [
	("__pwcs",		ctypes.POINTER(ctypes.c_int)),
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

wcstombs = _rpythonic_function_(		"wcstombs", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__pwcs",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),] )

rpmatch = _rpythonic_function_(		"rpmatch", ctypes.c_int, [
	("__response",		ctypes.POINTER(ctypes.c_char)),] )

getsubopt = _rpythonic_function_(		"getsubopt", ctypes.c_int, [
	("__optionp",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__tokens",		ctypes.POINTER(ctypes.c_char)),
	("__valuep",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

getloadavg = _rpythonic_function_(		"getloadavg", ctypes.c_int, [
	("__loadavg",		ctypes.c_double),
	("__nelem",		ctypes.c_int),] )

memcpy = _rpythonic_function_(		"memcpy", ctypes.POINTER(ctypes.c_void_p), [
	("__dest",		ctypes.POINTER(ctypes.c_void_p)),
	("__src",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),] )

memmove = _rpythonic_function_(		"memmove", ctypes.POINTER(ctypes.c_void_p), [
	("__dest",		ctypes.POINTER(ctypes.c_void_p)),
	("__src",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),] )

memccpy = _rpythonic_function_(		"memccpy", ctypes.POINTER(ctypes.c_void_p), [
	("__dest",		ctypes.POINTER(ctypes.c_void_p)),
	("__src",		ctypes.POINTER(ctypes.c_void_p)),
	("__c",		ctypes.c_int),
	("__n",		ctypes.c_uint),] )

memset = _rpythonic_function_(		"memset", ctypes.POINTER(ctypes.c_void_p), [
	("__s",		ctypes.POINTER(ctypes.c_void_p)),
	("__c",		ctypes.c_int),
	("__n",		ctypes.c_uint),] )

memcmp = _rpythonic_function_(		"memcmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_void_p)),
	("__s2",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),] )

memchr = _rpythonic_function_(		"memchr", ctypes.POINTER(ctypes.c_void_p), [
	("__s",		ctypes.POINTER(ctypes.c_void_p)),
	("__c",		ctypes.c_int),
	("__n",		ctypes.c_uint),] )

strcpy = _rpythonic_function_(		"strcpy", ctypes.POINTER(ctypes.c_char), [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),] )

strncpy = _rpythonic_function_(		"strncpy", ctypes.POINTER(ctypes.c_char), [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

strcat = _rpythonic_function_(		"strcat", ctypes.POINTER(ctypes.c_char), [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),] )

strncat = _rpythonic_function_(		"strncat", ctypes.POINTER(ctypes.c_char), [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

strcmp = _rpythonic_function_(		"strcmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),] )

strncmp = _rpythonic_function_(		"strncmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

strcoll = _rpythonic_function_(		"strcoll", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),] )

strxfrm = _rpythonic_function_(		"strxfrm", ctypes.c_uint, [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

strcoll_l = _rpythonic_function_(		"strcoll_l", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),
	("__l",		ctypes.POINTER(__locale_struct)),] )

strxfrm_l = _rpythonic_function_(		"strxfrm_l", ctypes.c_uint, [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),
	("__l",		ctypes.POINTER(__locale_struct)),] )

strdup = _rpythonic_function_(		"strdup", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

strndup = _rpythonic_function_(		"strndup", ctypes.POINTER(ctypes.c_char), [
	("__string",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

strchr = _rpythonic_function_(		"strchr", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__c",		ctypes.c_int),] )

strrchr = _rpythonic_function_(		"strrchr", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__c",		ctypes.c_int),] )

strcspn = _rpythonic_function_(		"strcspn", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__reject",		ctypes.POINTER(ctypes.c_char)),] )

strspn = _rpythonic_function_(		"strspn", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__accept",		ctypes.POINTER(ctypes.c_char)),] )

strpbrk = _rpythonic_function_(		"strpbrk", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__accept",		ctypes.POINTER(ctypes.c_char)),] )

strstr = _rpythonic_function_(		"strstr", ctypes.POINTER(ctypes.c_char), [
	("__haystack",		ctypes.POINTER(ctypes.c_char)),
	("__needle",		ctypes.POINTER(ctypes.c_char)),] )

strtok = _rpythonic_function_(		"strtok", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__delim",		ctypes.POINTER(ctypes.c_char)),] )

strtok_r = _rpythonic_function_(		"strtok_r", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__delim",		ctypes.POINTER(ctypes.c_char)),
	("__save_ptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

strlen = _rpythonic_function_(		"strlen", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

strnlen = _rpythonic_function_(		"strnlen", ctypes.c_uint, [
	("__string",		ctypes.POINTER(ctypes.c_char)),
	("__maxlen",		ctypes.c_uint),] )

strerror = _rpythonic_function_(		"strerror", ctypes.POINTER(ctypes.c_char), [
	("__errnum",		ctypes.c_int),] )

strerror_r = _rpythonic_function_(		"strerror_r", ctypes.c_int, [
	("__errnum",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__buflen",		ctypes.c_uint),] )

strerror_l = _rpythonic_function_(		"strerror_l", ctypes.POINTER(ctypes.c_char), [
	("__errnum",		ctypes.c_int),
	("__l",		ctypes.POINTER(__locale_struct)),] )

bcopy = _rpythonic_function_(		"bcopy", ctypes.c_void_p, [
	("__src",		ctypes.POINTER(ctypes.c_void_p)),
	("__dest",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),] )

bzero = _rpythonic_function_(		"bzero", ctypes.c_void_p, [
	("__s",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),] )

bcmp = _rpythonic_function_(		"bcmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_void_p)),
	("__s2",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),] )

index = _rpythonic_function_(		"index", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__c",		ctypes.c_int),] )

rindex = _rpythonic_function_(		"rindex", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__c",		ctypes.c_int),] )

ffs = _rpythonic_function_(		"ffs", ctypes.c_int, [
	("__i",		ctypes.c_int),] )

strcasecmp = _rpythonic_function_(		"strcasecmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),] )

strncasecmp = _rpythonic_function_(		"strncasecmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

strsep = _rpythonic_function_(		"strsep", ctypes.POINTER(ctypes.c_char), [
	("__stringp",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__delim",		ctypes.POINTER(ctypes.c_char)),] )

strsignal = _rpythonic_function_(		"strsignal", ctypes.POINTER(ctypes.c_char), [
	("__sig",		ctypes.c_int),] )

stpcpy = _rpythonic_function_(		"stpcpy", ctypes.POINTER(ctypes.c_char), [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),] )

stpncpy = _rpythonic_function_(		"stpncpy", ctypes.POINTER(ctypes.c_char), [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

av_malloc = _rpythonic_function_(		"av_malloc", ctypes.POINTER(ctypes.c_void_p), [
	("size",		ctypes.c_uint),] )

av_realloc = _rpythonic_function_(		"av_realloc", ctypes.POINTER(ctypes.c_void_p), [
	("ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.c_uint),] )

av_free = _rpythonic_function_(		"av_free", ctypes.c_void_p, [("ptr",		ctypes.c_void_p)] )

av_mallocz = _rpythonic_function_(		"av_mallocz", ctypes.POINTER(ctypes.c_void_p), [
	("size",		ctypes.c_uint),] )

av_strdup = _rpythonic_function_(		"av_strdup", ctypes.POINTER(ctypes.c_char), [
	("s",		ctypes.POINTER(ctypes.c_char)),] )

av_freep = _rpythonic_function_(		"av_freep", ctypes.c_void_p, [("ptr",		ctypes.c_void_p)] )

av_strerror = _rpythonic_function_(		"av_strerror", ctypes.c_int, [
	("errnum",		ctypes.c_int),
	("errbuf",		ctypes.POINTER(ctypes.c_char)),
	("errbuf_size",		ctypes.c_uint),] )

av_reduce = _rpythonic_function_(		"av_reduce", ctypes.c_int, [
	("dst_num",		ctypes.POINTER(ctypes.c_int)),
	("dst_den",		ctypes.POINTER(ctypes.c_int)),
	("num",		ctypes.c_int64),
	("den",		ctypes.c_int64),
	("max",		ctypes.c_int64),] )

av_mul_q = _rpythonic_function_(		"av_mul_q", AVRational, [
	("b",		AVRational),
	("c",		AVRational),] )

av_div_q = _rpythonic_function_(		"av_div_q", AVRational, [
	("b",		AVRational),
	("c",		AVRational),] )

av_add_q = _rpythonic_function_(		"av_add_q", AVRational, [
	("b",		AVRational),
	("c",		AVRational),] )

av_sub_q = _rpythonic_function_(		"av_sub_q", AVRational, [
	("b",		AVRational),
	("c",		AVRational),] )

av_d2q = _rpythonic_function_(		"av_d2q", AVRational, [
	("d",		ctypes.c_double),
	("max",		ctypes.c_int),] )

av_nearer_q = _rpythonic_function_(		"av_nearer_q", ctypes.c_int, [
	("q",		AVRational),
	("q1",		AVRational),
	("q2",		AVRational),] )

av_find_nearest_q_idx = _rpythonic_function_(		"av_find_nearest_q_idx", ctypes.c_int, [
	("q",		AVRational),
	("q_list",		ctypes.POINTER(AVRational)),] )

av_gcd = _rpythonic_function_(		"av_gcd", ctypes.c_int64, [
	("a",		ctypes.c_int64),
	("b",		ctypes.c_int64),] )

av_rescale = _rpythonic_function_(		"av_rescale", ctypes.c_int64, [
	("a",		ctypes.c_int64),
	("b",		ctypes.c_int64),
	("c",		ctypes.c_int64),] )

av_rescale_rnd = _rpythonic_function_(		"av_rescale_rnd", ctypes.c_int64, [
	("a",		ctypes.c_int64),
	("b",		ctypes.c_int64),
	("c",		ctypes.c_int64),
	("AVRounding",		ctypes.c_int),] )

av_rescale_q = _rpythonic_function_(		"av_rescale_q", ctypes.c_int64, [
	("a",		ctypes.c_int64),
	("bq",		AVRational),
	("cq",		AVRational),] )

av_compare_ts = _rpythonic_function_(		"av_compare_ts", ctypes.c_int, [
	("ts_a",		ctypes.c_int64),
	("tb_a",		AVRational),
	("ts_b",		ctypes.c_int64),
	("tb_b",		AVRational),] )

av_int2dbl = _rpythonic_function_(		"av_int2dbl", ctypes.c_double, [
	("v",		ctypes.c_int64),] )

av_int2flt = _rpythonic_function_(		"av_int2flt", ctypes.c_float, [
	("v",		ctypes.c_int32),] )

av_ext2dbl = _rpythonic_function_(		"av_ext2dbl", ctypes.c_double, [
	("ext",		AVExtFloat),] )

av_dbl2int = _rpythonic_function_(		"av_dbl2int", ctypes.c_int64, [
	("d",		ctypes.c_double),] )

av_flt2int = _rpythonic_function_(		"av_flt2int", ctypes.c_int32, [
	("d",		ctypes.c_float),] )

av_dbl2ext = _rpythonic_function_(		"av_dbl2ext", AVExtFloat, [
	("d",		ctypes.c_double),] )

av_log = _rpythonic_function_(		"av_log", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("level",		ctypes.c_int),
	("fmt",		ctypes.POINTER(ctypes.c_char)),] )

item_name = _rpythonic_function_(		"item_name", ctypes.POINTER(ctypes.c_char), [("ctx",		ctypes.c_void_p)] )

av_vlog = _rpythonic_function_(		"av_vlog", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("level",		ctypes.c_int),
	("fmt",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_char),] )

av_log_get_level = _rpythonic_function_(		"av_log_get_level", ctypes.c_int, [] )

av_log_set_level = _rpythonic_function_(		"av_log_set_level", ctypes.c_void_p, [
	("none",		ctypes.c_int),] )

av_log_set_callback = _rpythonic_function_(		"av_log_set_callback", ctypes.c_void_p, [
	("none",		ctypes.c_void_p),] )

av_log_default_callback = _rpythonic_function_(		"av_log_default_callback", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("level",		ctypes.c_int),
	("fmt",		ctypes.POINTER(ctypes.c_char)),
	("vl",		ctypes.c_char),] )

destruct = _rpythonic_function_(		"destruct", ctypes.c_void_p, [
	("AVPacket",		ctypes.POINTER(AVPacket)),] )

draw_horiz_band = _rpythonic_function_(		"draw_horiz_band", ctypes.c_void_p, [
	("s",		ctypes.POINTER(AVCodecContext)),
	("src",		ctypes.POINTER(AVFrame)),
	("offset",		( ctypes.c_int * 4 )),
	("y",		ctypes.c_int),
	("C_type",		ctypes.c_int),
	("height",		ctypes.c_int),] )

rtp_callback = _rpythonic_function_(		"rtp_callback", ctypes.c_void_p, [
	("avctx",		ctypes.POINTER(AVCodecContext)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.c_int),
	("mb_nb",		ctypes.c_int),] )

get_buffer = _rpythonic_function_(		"get_buffer", ctypes.c_int, [
	("c",		ctypes.POINTER(AVCodecContext)),
	("pic",		ctypes.POINTER(AVFrame)),] )

release_buffer = _rpythonic_function_(		"release_buffer", ctypes.c_void_p, [
	("c",		ctypes.POINTER(AVCodecContext)),
	("pic",		ctypes.POINTER(AVFrame)),] )

get_format = _rpythonic_function_(		"get_format", ctypes.c_int, [
	("s",		ctypes.POINTER(AVCodecContext)),
	("fmt",		ctypes.POINTER(ctypes.c_int)),] )

reget_buffer = _rpythonic_function_(		"reget_buffer", ctypes.c_int, [
	("c",		ctypes.POINTER(AVCodecContext)),
	("pic",		ctypes.POINTER(AVFrame)),] )

execute = _rpythonic_function_(		"execute", ctypes.c_int, [
	("c",		ctypes.POINTER(AVCodecContext)),
	("func",		ctypes.c_void_p),
	("arg2",		ctypes.POINTER(ctypes.c_void_p)),
	("ret",		ctypes.POINTER(ctypes.c_int)),
	("count",		ctypes.c_int),
	("size",		ctypes.c_int),] )

func = _rpythonic_function_(		"func", ctypes.c_int, [
	("c2",		ctypes.POINTER(AVCodecContext)),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),] )

execute2 = _rpythonic_function_(		"execute2", ctypes.c_int, [
	("c",		ctypes.POINTER(AVCodecContext)),
	("func",		ctypes.c_void_p),
	("arg2",		ctypes.POINTER(ctypes.c_void_p)),
	("ret",		ctypes.POINTER(ctypes.c_int)),
	("count",		ctypes.c_int),] )

init = _rpythonic_function_(		"init", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

encode = _rpythonic_function_(		"encode", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("buf",		ctypes.POINTER(ctypes.c_uint8)),
	("buf_size",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

close = _rpythonic_function_(		"close", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

decode = _rpythonic_function_(		"decode", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("outdata",		ctypes.POINTER(ctypes.c_void_p)),
	("outdata_size",		ctypes.POINTER(ctypes.c_int)),
	("avpkt",		ctypes.POINTER(AVPacket)),] )

flush = _rpythonic_function_(		"flush", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

start_frame = _rpythonic_function_(		"start_frame", ctypes.c_int, [
	("avctx",		ctypes.POINTER(AVCodecContext)),
	("buf",		ctypes.POINTER(ctypes.c_uint8)),
	("buf_size",		ctypes.c_uint32),] )

decode_slice = _rpythonic_function_(		"decode_slice", ctypes.c_int, [
	("avctx",		ctypes.POINTER(AVCodecContext)),
	("buf",		ctypes.POINTER(ctypes.c_uint8)),
	("buf_size",		ctypes.c_uint32),] )

end_frame = _rpythonic_function_(		"end_frame", ctypes.c_int, [
	("avctx",		ctypes.POINTER(AVCodecContext)),] )

av_destruct_packet_nofree = _rpythonic_function_(		"av_destruct_packet_nofree", ctypes.c_void_p, [
	("pkt",		ctypes.POINTER(AVPacket)),] )

av_destruct_packet = _rpythonic_function_(		"av_destruct_packet", ctypes.c_void_p, [
	("pkt",		ctypes.POINTER(AVPacket)),] )

av_init_packet = _rpythonic_function_(		"av_init_packet", ctypes.c_void_p, [
	("pkt",		ctypes.POINTER(AVPacket)),] )

av_new_packet = _rpythonic_function_(		"av_new_packet", ctypes.c_int, [
	("pkt",		ctypes.POINTER(AVPacket)),
	("size",		ctypes.c_int),] )

av_shrink_packet = _rpythonic_function_(		"av_shrink_packet", ctypes.c_void_p, [
	("pkt",		ctypes.POINTER(AVPacket)),
	("size",		ctypes.c_int),] )

av_dup_packet = _rpythonic_function_(		"av_dup_packet", ctypes.c_int, [
	("pkt",		ctypes.POINTER(AVPacket)),] )

av_free_packet = _rpythonic_function_(		"av_free_packet", ctypes.c_void_p, [
	("pkt",		ctypes.POINTER(AVPacket)),] )

audio_resample_init = _rpythonic_function_(		"audio_resample_init", ctypes.POINTER(ReSampleContext), [
	("output_channels",		ctypes.c_int),
	("input_channels",		ctypes.c_int),
	("output_rate",		ctypes.c_int),
	("input_rate",		ctypes.c_int),] )

av_audio_resample_init = _rpythonic_function_(		"av_audio_resample_init", ctypes.POINTER(ReSampleContext), [
	("output_channels",		ctypes.c_int),
	("input_channels",		ctypes.c_int),
	("output_rate",		ctypes.c_int),
	("input_rate",		ctypes.c_int),
	("sample_fmt_out",		ctypes.c_int),
	("sample_fmt_in",		ctypes.c_int),
	("filter_length",		ctypes.c_int),
	("log2_phase_count",		ctypes.c_int),
	("linear",		ctypes.c_int),
	("cutoff",		ctypes.c_double),] )

audio_resample = _rpythonic_function_(		"audio_resample", ctypes.c_int, [
	("s",		ctypes.POINTER(ReSampleContext)),
	("output",		ctypes.POINTER(ctypes.c_short)),
	("input",		ctypes.POINTER(ctypes.c_short)),
	("nb_samples",		ctypes.c_int),] )

audio_resample_close = _rpythonic_function_(		"audio_resample_close", ctypes.c_void_p, [
	("s",		ctypes.POINTER(ReSampleContext)),] )

av_resample_init = _rpythonic_function_(		"av_resample_init", ctypes.POINTER(AVResampleContext), [
	("out_rate",		ctypes.c_int),
	("in_rate",		ctypes.c_int),
	("filter_length",		ctypes.c_int),
	("log2_phase_count",		ctypes.c_int),
	("linear",		ctypes.c_int),
	("cutoff",		ctypes.c_double),] )

av_resample = _rpythonic_function_(		"av_resample", ctypes.c_int, [
	("c",		ctypes.POINTER(AVResampleContext)),
	("dst",		ctypes.POINTER(ctypes.c_short)),
	("src",		ctypes.POINTER(ctypes.c_short)),
	("consumed",		ctypes.POINTER(ctypes.c_int)),
	("src_size",		ctypes.c_int),
	("dst_size",		ctypes.c_int),
	("update_ctx",		ctypes.c_int),] )

av_resample_compensate = _rpythonic_function_(		"av_resample_compensate", ctypes.c_void_p, [
	("c",		ctypes.POINTER(AVResampleContext)),
	("sample_delta",		ctypes.c_int),
	("compensation_distance",		ctypes.c_int),] )

av_resample_close = _rpythonic_function_(		"av_resample_close", ctypes.c_void_p, [
	("c",		ctypes.POINTER(AVResampleContext)),] )

avpicture_alloc = _rpythonic_function_(		"avpicture_alloc", ctypes.c_int, [
	("picture",		ctypes.POINTER(AVPicture)),
	("pix_fmt",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

avpicture_free = _rpythonic_function_(		"avpicture_free", ctypes.c_void_p, [
	("picture",		ctypes.POINTER(AVPicture)),] )

avpicture_fill = _rpythonic_function_(		"avpicture_fill", ctypes.c_int, [
	("picture",		ctypes.POINTER(AVPicture)),
	("ptr",		ctypes.POINTER(ctypes.c_uint8)),
	("pix_fmt",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

avpicture_layout = _rpythonic_function_(		"avpicture_layout", ctypes.c_int, [
	("src",		ctypes.POINTER(AVPicture)),
	("pix_fmt",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("dest",		ctypes.POINTER(ctypes.c_ubyte)),
	("dest_size",		ctypes.c_int),] )

avpicture_get_size = _rpythonic_function_(		"avpicture_get_size", ctypes.c_int, [
	("pix_fmt",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

avcodec_get_chroma_sub_sample = _rpythonic_function_(		"avcodec_get_chroma_sub_sample", ctypes.c_void_p, [
	("pix_fmt",		ctypes.c_int),
	("h_shift",		ctypes.POINTER(ctypes.c_int)),
	("v_shift",		ctypes.POINTER(ctypes.c_int)),] )

avcodec_get_pix_fmt_name = _rpythonic_function_(		"avcodec_get_pix_fmt_name", ctypes.POINTER(ctypes.c_char), [
	("pix_fmt",		ctypes.c_int),] )

avcodec_set_dimensions = _rpythonic_function_(		"avcodec_set_dimensions", ctypes.c_void_p, [
	("s",		ctypes.POINTER(AVCodecContext)),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

avcodec_get_pix_fmt = _rpythonic_function_(		"avcodec_get_pix_fmt", ctypes.c_int, [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

avcodec_pix_fmt_to_codec_tag = _rpythonic_function_(		"avcodec_pix_fmt_to_codec_tag", ctypes.c_uint, [
	("pix_fmt",		ctypes.c_int),] )

avcodec_get_pix_fmt_loss = _rpythonic_function_(		"avcodec_get_pix_fmt_loss", ctypes.c_int, [
	("dst_pix_fmt",		ctypes.c_int),
	("src_pix_fmt",		ctypes.c_int),
	("has_alpha",		ctypes.c_int),] )

avcodec_find_best_pix_fmt = _rpythonic_function_(		"avcodec_find_best_pix_fmt", ctypes.c_int, [
	("pix_fmt_mask",		ctypes.c_int64),
	("src_pix_fmt",		ctypes.c_int),
	("has_alpha",		ctypes.c_int),
	("loss_ptr",		ctypes.POINTER(ctypes.c_int)),] )

avcodec_pix_fmt_string = _rpythonic_function_(		"avcodec_pix_fmt_string", ctypes.c_void_p, [
	("buf",		ctypes.POINTER(ctypes.c_char)),
	("buf_size",		ctypes.c_int),
	("pix_fmt",		ctypes.c_int),] )

img_get_alpha_info = _rpythonic_function_(		"img_get_alpha_info", ctypes.c_int, [
	("src",		ctypes.POINTER(AVPicture)),
	("pix_fmt",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

avpicture_deinterlace = _rpythonic_function_(		"avpicture_deinterlace", ctypes.c_int, [
	("dst",		ctypes.POINTER(AVPicture)),
	("src",		ctypes.POINTER(AVPicture)),
	("pix_fmt",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

av_codec_next = _rpythonic_function_(		"av_codec_next", ctypes.POINTER(AVCodec), [
	("c",		ctypes.POINTER(AVCodec)),] )

avcodec_version = _rpythonic_function_(		"avcodec_version", ctypes.c_void_p, [] )

avcodec_configuration = _rpythonic_function_(		"avcodec_configuration", ctypes.POINTER(ctypes.c_char), [] )

avcodec_license = _rpythonic_function_(		"avcodec_license", ctypes.POINTER(ctypes.c_char), [] )

avcodec_init = _rpythonic_function_(		"avcodec_init", ctypes.c_void_p, [] )

register_avcodec = _rpythonic_function_(		"register_avcodec", ctypes.c_void_p, [
	("codec",		ctypes.POINTER(AVCodec)),] )

avcodec_register = _rpythonic_function_(		"avcodec_register", ctypes.c_void_p, [
	("codec",		ctypes.POINTER(AVCodec)),] )

avcodec_find_encoder = _rpythonic_function_(		"avcodec_find_encoder", ctypes.POINTER(AVCodec), [
	("C_id",		ctypes.c_int),] )

avcodec_find_encoder_by_name = _rpythonic_function_(		"avcodec_find_encoder_by_name", ctypes.POINTER(AVCodec), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

avcodec_find_decoder = _rpythonic_function_(		"avcodec_find_decoder", ctypes.POINTER(AVCodec), [
	("C_id",		ctypes.c_int),] )

avcodec_find_decoder_by_name = _rpythonic_function_(		"avcodec_find_decoder_by_name", ctypes.POINTER(AVCodec), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

avcodec_string = _rpythonic_function_(		"avcodec_string", ctypes.c_void_p, [
	("buf",		ctypes.POINTER(ctypes.c_char)),
	("buf_size",		ctypes.c_int),
	("enc",		ctypes.POINTER(AVCodecContext)),
	("encode",		ctypes.c_int),] )

avcodec_get_context_defaults = _rpythonic_function_(		"avcodec_get_context_defaults", ctypes.c_void_p, [
	("s",		ctypes.POINTER(AVCodecContext)),] )

avcodec_get_context_defaults2 = _rpythonic_function_(		"avcodec_get_context_defaults2", ctypes.c_void_p, [
	("s",		ctypes.POINTER(AVCodecContext)),
	("AVMediaType",		ctypes.c_int),] )

avcodec_alloc_context = _rpythonic_function_(		"avcodec_alloc_context", ctypes.POINTER(AVCodecContext), [] )

avcodec_alloc_context2 = _rpythonic_function_(		"avcodec_alloc_context2", ctypes.POINTER(AVCodecContext), [
	("AVMediaType",		ctypes.c_int),] )

avcodec_copy_context = _rpythonic_function_(		"avcodec_copy_context", ctypes.c_int, [
	("dest",		ctypes.POINTER(AVCodecContext)),
	("src",		ctypes.POINTER(AVCodecContext)),] )

avcodec_get_frame_defaults = _rpythonic_function_(		"avcodec_get_frame_defaults", ctypes.c_void_p, [
	("pic",		ctypes.POINTER(AVFrame)),] )

avcodec_alloc_frame = _rpythonic_function_(		"avcodec_alloc_frame", ctypes.POINTER(AVFrame), [] )

avcodec_default_get_buffer = _rpythonic_function_(		"avcodec_default_get_buffer", ctypes.c_int, [
	("s",		ctypes.POINTER(AVCodecContext)),
	("pic",		ctypes.POINTER(AVFrame)),] )

avcodec_default_release_buffer = _rpythonic_function_(		"avcodec_default_release_buffer", ctypes.c_void_p, [
	("s",		ctypes.POINTER(AVCodecContext)),
	("pic",		ctypes.POINTER(AVFrame)),] )

avcodec_default_reget_buffer = _rpythonic_function_(		"avcodec_default_reget_buffer", ctypes.c_int, [
	("s",		ctypes.POINTER(AVCodecContext)),
	("pic",		ctypes.POINTER(AVFrame)),] )

avcodec_get_edge_width = _rpythonic_function_(		"avcodec_get_edge_width", ctypes.c_void_p, [] )

avcodec_align_dimensions = _rpythonic_function_(		"avcodec_align_dimensions", ctypes.c_void_p, [
	("s",		ctypes.POINTER(AVCodecContext)),
	("width",		ctypes.POINTER(ctypes.c_int)),
	("height",		ctypes.POINTER(ctypes.c_int)),] )

avcodec_align_dimensions2 = _rpythonic_function_(		"avcodec_align_dimensions2", ctypes.c_void_p, [
	("s",		ctypes.POINTER(AVCodecContext)),
	("width",		ctypes.POINTER(ctypes.c_int)),
	("height",		ctypes.POINTER(ctypes.c_int)),
	("linesize_align",		( ctypes.c_int * 4 )),] )

avcodec_check_dimensions = _rpythonic_function_(		"avcodec_check_dimensions", ctypes.c_int, [
	("av_log_ctx",		ctypes.POINTER(ctypes.c_void_p)),
	("w",		ctypes.c_uint),
	("h",		ctypes.c_uint),] )

avcodec_default_get_format = _rpythonic_function_(		"avcodec_default_get_format", ctypes.c_int, [
	("s",		ctypes.POINTER(AVCodecContext)),
	("fmt",		ctypes.POINTER(ctypes.c_int)),] )

avcodec_thread_init = _rpythonic_function_(		"avcodec_thread_init", ctypes.c_int, [
	("s",		ctypes.POINTER(AVCodecContext)),
	("thread_count",		ctypes.c_int),] )

avcodec_thread_free = _rpythonic_function_(		"avcodec_thread_free", ctypes.c_void_p, [
	("s",		ctypes.POINTER(AVCodecContext)),] )

avcodec_default_execute = _rpythonic_function_(		"avcodec_default_execute", ctypes.c_int, [
	("c",		ctypes.POINTER(AVCodecContext)),
	("func",		ctypes.c_void_p),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),
	("ret",		ctypes.POINTER(ctypes.c_int)),
	("count",		ctypes.c_int),
	("size",		ctypes.c_int),] )

avcodec_default_execute2 = _rpythonic_function_(		"avcodec_default_execute2", ctypes.c_int, [
	("c",		ctypes.POINTER(AVCodecContext)),
	("func",		ctypes.c_void_p),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),
	("ret",		ctypes.POINTER(ctypes.c_int)),
	("count",		ctypes.c_int),] )

avcodec_open = _rpythonic_function_(		"avcodec_open", ctypes.c_int, [
	("avctx",		ctypes.POINTER(AVCodecContext)),
	("codec",		ctypes.POINTER(AVCodec)),] )

avcodec_decode_audio2 = _rpythonic_function_(		"avcodec_decode_audio2", ctypes.c_int, [
	("avctx",		ctypes.POINTER(AVCodecContext)),
	("samples",		ctypes.POINTER(ctypes.c_int16)),
	("frame_size_ptr",		ctypes.POINTER(ctypes.c_int)),
	("buf",		ctypes.POINTER(ctypes.c_uint8)),
	("buf_size",		ctypes.c_int),] )

avcodec_decode_audio3 = _rpythonic_function_(		"avcodec_decode_audio3", ctypes.c_int, [
	("avctx",		ctypes.POINTER(AVCodecContext)),
	("samples",		ctypes.POINTER(ctypes.c_int16)),
	("frame_size_ptr",		ctypes.POINTER(ctypes.c_int)),
	("avpkt",		ctypes.POINTER(AVPacket)),] )

avcodec_decode_video = _rpythonic_function_(		"avcodec_decode_video", ctypes.c_int, [
	("avctx",		ctypes.POINTER(AVCodecContext)),
	("picture",		ctypes.POINTER(AVFrame)),
	("got_picture_ptr",		ctypes.POINTER(ctypes.c_int)),
	("buf",		ctypes.POINTER(ctypes.c_uint8)),
	("buf_size",		ctypes.c_int),] )

avcodec_decode_video2 = _rpythonic_function_(		"avcodec_decode_video2", ctypes.c_int, [
	("avctx",		ctypes.POINTER(AVCodecContext)),
	("picture",		ctypes.POINTER(AVFrame)),
	("got_picture_ptr",		ctypes.POINTER(ctypes.c_int)),
	("avpkt",		ctypes.POINTER(AVPacket)),] )

avcodec_decode_subtitle = _rpythonic_function_(		"avcodec_decode_subtitle", ctypes.c_int, [
	("avctx",		ctypes.POINTER(AVCodecContext)),
	("sub",		ctypes.POINTER(AVSubtitle)),
	("got_sub_ptr",		ctypes.POINTER(ctypes.c_int)),
	("buf",		ctypes.POINTER(ctypes.c_uint8)),
	("buf_size",		ctypes.c_int),] )

avcodec_decode_subtitle2 = _rpythonic_function_(		"avcodec_decode_subtitle2", ctypes.c_int, [
	("avctx",		ctypes.POINTER(AVCodecContext)),
	("sub",		ctypes.POINTER(AVSubtitle)),
	("got_sub_ptr",		ctypes.POINTER(ctypes.c_int)),
	("avpkt",		ctypes.POINTER(AVPacket)),] )

avcodec_parse_frame = _rpythonic_function_(		"avcodec_parse_frame", ctypes.c_int, [
	("avctx",		ctypes.POINTER(AVCodecContext)),
	("pdata",		ctypes.POINTER(ctypes.POINTER(ctypes.c_uint8))),
	("data_size_ptr",		ctypes.POINTER(ctypes.c_int)),
	("buf",		ctypes.POINTER(ctypes.c_uint8)),
	("buf_size",		ctypes.c_int),] )

avcodec_encode_audio = _rpythonic_function_(		"avcodec_encode_audio", ctypes.c_int, [
	("avctx",		ctypes.POINTER(AVCodecContext)),
	("buf",		ctypes.POINTER(ctypes.c_uint8)),
	("buf_size",		ctypes.c_int),
	("samples",		ctypes.POINTER(ctypes.c_short)),] )

avcodec_encode_video = _rpythonic_function_(		"avcodec_encode_video", ctypes.c_int, [
	("avctx",		ctypes.POINTER(AVCodecContext)),
	("buf",		ctypes.POINTER(ctypes.c_uint8)),
	("buf_size",		ctypes.c_int),
	("pict",		ctypes.POINTER(AVFrame)),] )

avcodec_encode_subtitle = _rpythonic_function_(		"avcodec_encode_subtitle", ctypes.c_int, [
	("avctx",		ctypes.POINTER(AVCodecContext)),
	("buf",		ctypes.POINTER(ctypes.c_uint8)),
	("buf_size",		ctypes.c_int),
	("sub",		ctypes.POINTER(AVSubtitle)),] )

avcodec_close = _rpythonic_function_(		"avcodec_close", ctypes.c_int, [
	("avctx",		ctypes.POINTER(AVCodecContext)),] )

avcodec_register_all = _rpythonic_function_(		"avcodec_register_all", ctypes.c_void_p, [] )

avcodec_flush_buffers = _rpythonic_function_(		"avcodec_flush_buffers", ctypes.c_void_p, [
	("avctx",		ctypes.POINTER(AVCodecContext)),] )

avcodec_default_free_buffers = _rpythonic_function_(		"avcodec_default_free_buffers", ctypes.c_void_p, [
	("s",		ctypes.POINTER(AVCodecContext)),] )

av_get_pict_type_char = _rpythonic_function_(		"av_get_pict_type_char", ctypes.c_char, [
	("pict_type",		ctypes.c_int),] )

av_get_bits_per_sample = _rpythonic_function_(		"av_get_bits_per_sample", ctypes.c_int, [
	("codec_id",		ctypes.c_int),] )

av_get_bits_per_sample_format = _rpythonic_function_(		"av_get_bits_per_sample_format", ctypes.c_int, [
	("sample_fmt",		ctypes.c_int),] )

parser_init = _rpythonic_function_(		"parser_init", ctypes.c_int, [
	("s",		ctypes.POINTER(AVCodecParserContext)),] )

parser_parse = _rpythonic_function_(		"parser_parse", ctypes.c_int, [
	("s",		ctypes.POINTER(AVCodecParserContext)),
	("avctx",		ctypes.POINTER(AVCodecContext)),
	("poutbuf",		ctypes.POINTER(ctypes.POINTER(ctypes.c_uint8))),
	("poutbuf_size",		ctypes.POINTER(ctypes.c_int)),
	("buf",		ctypes.POINTER(ctypes.c_uint8)),
	("buf_size",		ctypes.c_int),] )

parser_close = _rpythonic_function_(		"parser_close", ctypes.c_void_p, [
	("s",		ctypes.POINTER(AVCodecParserContext)),] )

split = _rpythonic_function_(		"split", ctypes.c_int, [
	("avctx",		ctypes.POINTER(AVCodecContext)),
	("buf",		ctypes.POINTER(ctypes.c_uint8)),
	("buf_size",		ctypes.c_int),] )

av_parser_next = _rpythonic_function_(		"av_parser_next", ctypes.POINTER(AVCodecParser), [
	("c",		ctypes.POINTER(AVCodecParser)),] )

av_register_codec_parser = _rpythonic_function_(		"av_register_codec_parser", ctypes.c_void_p, [
	("parser",		ctypes.POINTER(AVCodecParser)),] )

av_parser_init = _rpythonic_function_(		"av_parser_init", ctypes.POINTER(AVCodecParserContext), [
	("codec_id",		ctypes.c_int),] )

av_parser_parse = _rpythonic_function_(		"av_parser_parse", ctypes.c_int, [
	("s",		ctypes.POINTER(AVCodecParserContext)),
	("avctx",		ctypes.POINTER(AVCodecContext)),
	("poutbuf",		ctypes.POINTER(ctypes.POINTER(ctypes.c_uint8))),
	("poutbuf_size",		ctypes.POINTER(ctypes.c_int)),
	("buf",		ctypes.POINTER(ctypes.c_uint8)),
	("buf_size",		ctypes.c_int),
	("pts",		ctypes.c_int64),
	("dts",		ctypes.c_int64),] )

av_parser_parse2 = _rpythonic_function_(		"av_parser_parse2", ctypes.c_int, [
	("s",		ctypes.POINTER(AVCodecParserContext)),
	("avctx",		ctypes.POINTER(AVCodecContext)),
	("poutbuf",		ctypes.POINTER(ctypes.POINTER(ctypes.c_uint8))),
	("poutbuf_size",		ctypes.POINTER(ctypes.c_int)),
	("buf",		ctypes.POINTER(ctypes.c_uint8)),
	("buf_size",		ctypes.c_int),
	("pts",		ctypes.c_int64),
	("dts",		ctypes.c_int64),
	("pos",		ctypes.c_int64),] )

av_parser_change = _rpythonic_function_(		"av_parser_change", ctypes.c_int, [
	("s",		ctypes.POINTER(AVCodecParserContext)),
	("avctx",		ctypes.POINTER(AVCodecContext)),
	("poutbuf",		ctypes.POINTER(ctypes.POINTER(ctypes.c_uint8))),
	("poutbuf_size",		ctypes.POINTER(ctypes.c_int)),
	("buf",		ctypes.POINTER(ctypes.c_uint8)),
	("buf_size",		ctypes.c_int),
	("keyframe",		ctypes.c_int),] )

av_parser_close = _rpythonic_function_(		"av_parser_close", ctypes.c_void_p, [
	("s",		ctypes.POINTER(AVCodecParserContext)),] )

filter = _rpythonic_function_(		"filter", ctypes.c_int, [
	("bsfc",		ctypes.POINTER(AVBitStreamFilterContext)),
	("avctx",		ctypes.POINTER(AVCodecContext)),
	("args",		ctypes.POINTER(ctypes.c_char)),
	("poutbuf",		ctypes.POINTER(ctypes.POINTER(ctypes.c_uint8))),
	("poutbuf_size",		ctypes.POINTER(ctypes.c_int)),
	("buf",		ctypes.POINTER(ctypes.c_uint8)),
	("buf_size",		ctypes.c_int),
	("keyframe",		ctypes.c_int),] )

av_register_bitstream_filter = _rpythonic_function_(		"av_register_bitstream_filter", ctypes.c_void_p, [
	("bsf",		ctypes.POINTER(AVBitStreamFilter)),] )

av_bitstream_filter_init = _rpythonic_function_(		"av_bitstream_filter_init", ctypes.POINTER(AVBitStreamFilterContext), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

av_bitstream_filter_filter = _rpythonic_function_(		"av_bitstream_filter_filter", ctypes.c_int, [
	("bsfc",		ctypes.POINTER(AVBitStreamFilterContext)),
	("avctx",		ctypes.POINTER(AVCodecContext)),
	("args",		ctypes.POINTER(ctypes.c_char)),
	("poutbuf",		ctypes.POINTER(ctypes.POINTER(ctypes.c_uint8))),
	("poutbuf_size",		ctypes.POINTER(ctypes.c_int)),
	("buf",		ctypes.POINTER(ctypes.c_uint8)),
	("buf_size",		ctypes.c_int),
	("keyframe",		ctypes.c_int),] )

av_bitstream_filter_close = _rpythonic_function_(		"av_bitstream_filter_close", ctypes.c_void_p, [
	("bsf",		ctypes.POINTER(AVBitStreamFilterContext)),] )

av_bitstream_filter_next = _rpythonic_function_(		"av_bitstream_filter_next", ctypes.POINTER(AVBitStreamFilter), [
	("f",		ctypes.POINTER(AVBitStreamFilter)),] )

av_fast_realloc = _rpythonic_function_(		"av_fast_realloc", ctypes.POINTER(ctypes.c_void_p), [
	("ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.POINTER(ctypes.c_uint)),
	("min_size",		ctypes.c_uint),] )

av_fast_malloc = _rpythonic_function_(		"av_fast_malloc", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.POINTER(ctypes.c_uint)),
	("min_size",		ctypes.c_uint),] )

av_picture_copy = _rpythonic_function_(		"av_picture_copy", ctypes.c_void_p, [
	("dst",		ctypes.POINTER(AVPicture)),
	("src",		ctypes.POINTER(AVPicture)),
	("pix_fmt",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

av_picture_crop = _rpythonic_function_(		"av_picture_crop", ctypes.c_int, [
	("dst",		ctypes.POINTER(AVPicture)),
	("src",		ctypes.POINTER(AVPicture)),
	("pix_fmt",		ctypes.c_int),
	("top_band",		ctypes.c_int),
	("left_band",		ctypes.c_int),] )

av_picture_pad = _rpythonic_function_(		"av_picture_pad", ctypes.c_int, [
	("dst",		ctypes.POINTER(AVPicture)),
	("src",		ctypes.POINTER(AVPicture)),
	("height",		ctypes.c_int),
	("width",		ctypes.c_int),
	("pix_fmt",		ctypes.c_int),
	("padtop",		ctypes.c_int),
	("padbottom",		ctypes.c_int),
	("padleft",		ctypes.c_int),
	("padright",		ctypes.c_int),
	("color",		ctypes.POINTER(ctypes.c_int)),] )

av_xiphlacing = _rpythonic_function_(		"av_xiphlacing", ctypes.c_uint, [
	("s",		ctypes.POINTER(ctypes.c_ubyte)),
	("v",		ctypes.c_uint),] )

av_parse_video_frame_size = _rpythonic_function_(		"av_parse_video_frame_size", ctypes.c_int, [
	("width_ptr",		ctypes.POINTER(ctypes.c_int)),
	("height_ptr",		ctypes.POINTER(ctypes.c_int)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

av_parse_video_frame_rate = _rpythonic_function_(		"av_parse_video_frame_rate", ctypes.c_int, [
	("frame_rate",		ctypes.POINTER(AVRational)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

av_log_missing_feature = _rpythonic_function_(		"av_log_missing_feature", ctypes.c_void_p, [
	("avc",		ctypes.POINTER(ctypes.c_void_p)),
	("feature",		ctypes.POINTER(ctypes.c_char)),
	("want_sample",		ctypes.c_int),] )

av_log_ask_for_sample = _rpythonic_function_(		"av_log_ask_for_sample", ctypes.c_void_p, [
	("avc",		ctypes.POINTER(ctypes.c_void_p)),
	("msg",		ctypes.POINTER(ctypes.c_char)),] )

av_register_hwaccel = _rpythonic_function_(		"av_register_hwaccel", ctypes.c_void_p, [
	("hwaccel",		ctypes.POINTER(AVHWAccel)),] )

av_hwaccel_next = _rpythonic_function_(		"av_hwaccel_next", ctypes.POINTER(AVHWAccel), [
	("hwaccel",		ctypes.POINTER(AVHWAccel)),] )

av_lockmgr_register = _rpythonic_function_(		"av_lockmgr_register", ctypes.c_int, [
	("cb",		ctypes.c_void_p),] )

cb = _rpythonic_function_(		"cb", ctypes.c_int, [
	("mutex",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("op",		ctypes.c_int),] )


_rpythonic_convert_structs_to_objects()

_rpythonic_setup_return_wrappers()
_rpythonic_make_nice_global_enums_()
_rpythonic_clean_up_missing_functions_()
_rpythonic_strip_prefixes_(['AV', 'FF_'])