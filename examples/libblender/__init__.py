## generated by RPythonic 0.4.4
## http://code.google.com/p/rpythonic/
import os, sys, ctypes, inspect
__os = os
__sys = sys
__inspect = inspect

IS32BIT = (ctypes.sizeof(ctypes.c_void_p)==4)
PYTHON_RESERVED_KEYWORDS = 'for while in as global with try except lambda return raise if else elif eval exec and not or break continue finally print yield del def class assert from is pass'.split()

## try to load precompiled c-libraries from this directory, if the library is not there try to load from the system.
_clibs_dir = os.path.dirname(os.path.abspath(__file__))

def _load_ctypes_lib( name ):
	if __os.name == 'posix':
		if __sys.platform=='linux2':
			if not name.endswith('.so'): name += '.so'
			if not name.startswith('lib'): name = 'lib' + name

			if IS32BIT: 	path = __os.path.join(_clibs_dir,'linux32')
			else: 		path = __os.path.join(_clibs_dir,'linux64')
			url = __os.path.join( path, name )
			if __os.path.isfile( url ): return ctypes.CDLL(url)
			elif __os.path.isfile( '/usr/local/lib/%s'%name ): return ctypes.CDLL('/usr/local/lib/%s'%name)
			elif __os.path.isfile( '/usr/local/lib64/%s'%name ) and not IS32BIT: return ctypes.CDLL('/usr/local/lib64/%s'%name)
			elif __os.path.isfile( '/usr/lib/%s'%name ): return ctypes.CDLL('/usr/lib/%s'%name)
			elif __os.path.isfile( './%s'%name ): return ctypes.CDLL('./%s'%name)
			else:	# fallback
				try: return ctypes.CDLL(name)
				except: return ctypes.CDLL('')

		elif sys.platform == 'darwin':
			name += '.dylib'
			if IS32BIT: 	path = os.path.join(_clibs_dir,'osx32')
			else: 		path = os.path.join(_clibs_dir,'osx64')
			url = os.path.join( path, name )
			if os.path.isfile( url ): return ctypes.CDLL(url)
			else: return ctypes.CDLL(name) #fallback

	elif os.name == 'nt':
		name += '.dll'
		if IS32BIT: 	path = os.path.join(_clibs_dir,'win32')
		else: 		path = os.path.join(_clibs_dir,'win64')
		url = os.path.join( path, name )
		if os.path.isfile( url ): return ctypes.CDLL(url)
		else:
			try: return ctypes.CDLL(name)
			except: return ctypes.CDLL('', handle=sys.dllhandle )
			#return ctypes.CDLL(name) #fallback

RPYTHONIC_WRAPPER_FUNCTIONS = {}
RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES = []
RPYTHONIC_AUTOPREFIX_IGNORE = []

## ctypes does not clearly expose these types ##
PyCFuncPtrType = type(ctypes.CFUNCTYPE(ctypes.c_void_p))
PyCArrayType = type( ctypes.c_int * 2 )
PyCPointerType = type( ctypes.POINTER(ctypes.c_int) )
PyCStructType = type( ctypes.Structure )
CArgObject = type( ctypes.byref(ctypes.c_int()) )

class _rpythonic_meta_(object):
	'''
	Reserved Attributes:
		POINTER
		CSTRUCT
		CAST
	'''
	_rpythonic_ = True		# workaround for now, must have a way to know if object is a meta from another module, isinstance(o,_rpythonic_meta_) will fail in those cases. another workaround could be check sys.modules for other rpythonic modules and fetch _rpythonic_meta_ from there.
	def __init__(self, *args, **kw ):							# cheap trick, abuse **kw, and look for "pointer", "cast"
		if kw and 'pointer' not in kw: raise SyntaxError	# sorry, you can not init with keywords
		elif kw and 'pointer' in kw:
			if 'cast' in kw and kw['cast']:
				self.POINTER = ctypes.cast( kw['pointer'], ctypes.POINTER(self.CSTRUCT) )
			else: self.POINTER = kw['pointer']
		else: self.POINTER = ctypes.pointer( self.CSTRUCT(*args) )
		self.POINTER.pyobject = self	# .pyobject is local to this pointer "object"

	def __getattr__(self,name):
		if hasattr( self.POINTER.contents, name ):
			return getattr( self.POINTER.contents, name )

		else:	# when rpythonic failed to generate good bindings - these lookups should be cached
			for parent in self._rpythonic_parent_classes_:
				if hasattr( parent, name ):
					method = getattr( parent, name )	# should check if it really is an unbound method
					func = parent._rpythonic_unbound_lookup_[ method ]
					n = func.name
					if len(func.argnames) > 1:
						argnames = func.argnames[ 1 : ]
						a = ',' + '=None,'.join( argnames ) + '=None'
						b = ','.join( argnames )
					else: a = b = ''
					lamb = eval( 'lambda self %s: %s( self.POINTER, %s )' %(a,n,b) )
					setattr( self.__class__, name, lamb )
					#return lamb	# this would return the unbound lambda, must call getattr again
					return getattr( self, name )

			## last resort, load from global name space ##
			G = globals()
			if name in G: return lambda *args: G[name](self.POINTER, *args)
			else:
				for prefix in self._autoprefix_:
					n = prefix + name
					if n in G: return lambda *args: G[n](self.POINTER, *args)
				print( 'possible auto-prefixes available', self._autoprefix_ )
				raise AttributeError

	def __call__(self, type=False):
		print('calling object is DEPRECATED - use ob.POINTER or ob.CSTRUCT')
		if type: return self.CSTRUCT
		else: return self.POINTER


def _rpythonic_generate_subclass_( name, struct, functions ):
	head = 'class %s( _rpythonic_meta_ ):' %name
	body = [ 
		'_rpythonic_parent_classes_ = []' ,
		'_rpythonic_unbound_lookup_ = {}' 
	]

	names = [ func.name for func in functions ]

	possibles = {}
	rank = []		# rank by longest name
	if len(names) > 3000: print('too many functions to use this hack')
	else:
		for n1 in names:
			prefix = ''
			for i,char in enumerate(n1):
				prefix += char
				if prefix not in possibles:
					possibles[ prefix ] = 0
					for n2 in names:
						if n2.startswith( prefix ):
							possibles[ prefix ] += 1

					if not rank or len(prefix) > len(rank[-1]) and possibles[prefix] > len(names)/4:
						rank.append( prefix )

	top = []
	while rank:
		best = rank.pop()
		if possibles[best] > len(functions)/2 and best not in names:
			if best.endswith('_set_') or best.endswith('_get_'): best = best[ : -4 ]
			elif best.endswith('Set') or best.endswith('Get'): best = best[ : -3 ]

			rem = []
			for other in rank:
				if best.startswith(other): rem.append( other )
			for r in rem: rank.remove( r )

			if best not in top: top.append( best )

		if len(top) > 3: break

	for n in names:		# find shortest prefixes #
		prefix = ''
		for i,char in enumerate(n):		# cammelCase
			if i==0: prefix += char; continue
			if char.isupper() and len(prefix) >= 2: break
			prefix += char
		if prefix and prefix != n and len(prefix) >= 2:
			hits = 0
			for other in names:
				if other.startswith( prefix ): hits += 1
			if hits >= 2 and prefix not in top:
				top.append( prefix )
				if len(top) >= 6: break

	## setup full names
	for func in functions:
		n = func.name
		if len(func.argnames) > 1:
			argnames = func.argnames[ 1 : ]
			a = ',' + '=None,'.join( argnames ) + '=None'
			b = ','.join( argnames )
		else: a = b = ''

		fhead = 'def %s( self %s ):' %(n,a)
		fbody = ['return %s(self.POINTER, %s)' %(func.name,b)]
		g = fhead + '\n\t\t' + '\n\t\t'.join( fbody )
		body.append( g )
		#body.append( '%s._rpythonic_function_ = %s' %(func.name, func.name) )

	## setup short names ##
	for n in names:
		for prefix in top:
			if n.startswith(prefix) and n[len(prefix):] not in names:
				alt = n[ len(prefix) : ]
				if alt and alt != n and alt not in PYTHON_RESERVED_KEYWORDS and not alt.isdigit() and not alt[0].isdigit():
					body.append( '%s = %s' %(alt,n) )
					names.append( alt )

	gen = head + '\n\t' + '\n\t'.join( body )
	try: exec( gen )
	except:
		print( gen )
		raise SyntaxError

	klass = locals()[name]
	klass.CSTRUCT = struct	# ctypes struct class

	klass._autoprefix_ = top
	for func in functions:
		unbound = getattr( klass, func.name )
		klass._rpythonic_unbound_lookup_[ unbound ] = func
		# klass.longname is klass.shortname = False
		# klass.longname == klass.shortname = True
	return klass

def _rpythonic_convert_structs_to_objects():
	G = globals()
	for klass in _OOAPI_:
		altname = name = klass.__name__
		prefix = ''
		for i,char in enumerate(name):
			if i==0: prefix += char; continue
			if char.isupper(): break
			prefix += char
		if prefix and prefix != name:
			hits = 0
			for other in _OOAPI_:
				if other is not klass:
					if other.__name__.startswith( prefix ): hits += 1
			if hits >= 2:
				altname = name[ len(prefix) : ]

		funcs = _OOAPI_[ klass ]
		newklass = _rpythonic_generate_subclass_( altname, klass, funcs )
		klass._rpythonic_wrapper_class_ = newklass
		G[ name ] = newklass	# replace struct with wrapper
		if altname not in G: G[ altname ] = newklass	# safely define with nicer name
		elif altname != name: # odd cases, maybe a function that returns the object, almost never happens.
			print('WARN - not replacing something with struct wrapper:', G[altname] )


def _rpythonic_setup_return_wrappers():
	R = _rpythonic_function_
	for klass in _OOAPI_:
		if klass in _OOAPI_RETURNS_OBJECT_:
			for f in _OOAPI_RETURNS_OBJECT_[klass]:
				f.object_oriented = True
				if not f.return_wrapper:	# just in case the ctypes footer defines it
					f.return_wrapper = klass._rpythonic_wrapper_class_

def _rpythonic_function_( name, result=ctypes.c_void_p, args=[]):
	mname = '_metafunc_%s' %name
	exec( 'class %s( _rpythonic_metafunc_ ): pass' %mname )
	k = locals()[mname]
	return k( name, result, args )

_OOAPI_ = {}
_OOAPI_RETURNS_OBJECT_ = {}

class _rpythonic_metafunc_(object):
	def __init__(self, name, result=ctypes.c_void_p, args=[]):
		self.name = name
		self.result = result
		self.argtypes = []		# can dynamically change CFUNCTYPE trick
		self.argnames = []
		self.argtypestypes = []
		for i,arg in enumerate(args):
			n,t = arg
			if n in PYTHON_RESERVED_KEYWORDS: n = 'C_'+n
			if n in self.argnames: n = '%s%s' %(n,i)
			self.argnames.append( n )
			self.argtypes.append( t )
			self.argtypestypes.append( type(t) )		# precomputed for speed

		self.argnames = tuple( self.argnames )				# should never change
		self.numargs = len( self.argtypes )
		self.callbacks = [None] * self.numargs
		self.return_wrapper = None
		self.object_oriented = False
		self.function = None
		try:
			func = self.function = getattr(CTYPES_DLL, self.name )
			RPYTHONIC_WRAPPER_FUNCTIONS[ name ] = self
		except:
			RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES.append( name )
		if self.function: self.reset()

	def change_argument_type( self, name, t ):
		idx = self.argnames.index( name )
		self.argtypes[ idx ] = t
		self.argtypestypes[ idx ] = type(t)
		self.function.argtypes = self.argtypes

	def reset(self):
		if self.argnames:
			a = ',' + '=None,'.join( self.argnames ) + '=None'
			b = ','.join( self.argnames )
		else: a = b = ''

		callmeth = eval( 'lambda self %s: self._call_( %s )' %(a,b) )
		setattr( self.__class__, '__call__', callmeth )

		self.function.restype = self.result
		self.function.argtypes = self.argtypes

		if type( self.result ) is PyCPointerType and type(self.result._type_) is PyCStructType:
			klass = self.result._type_
			if klass not in _OOAPI_RETURNS_OBJECT_: _OOAPI_RETURNS_OBJECT_[klass] = []
			_OOAPI_RETURNS_OBJECT_[klass].append( self )

		self.defaults = []
		for i in range( self.numargs ):
			T = self.argtypes[ i ]
			if type(T) is PyCFuncPtrType:
				p = T()	# func pointers can not be None
				self.defaults.append( p )
				self.callbacks[ i ] = p					# save reference
			elif T in (ctypes.c_int, ctypes.c_uint, ctypes.c_long, ctypes.c_ulong):
				self.defaults.append( 0 )
			elif T in (ctypes.c_float, ctypes.c_double):
				self.defaults.append( .0 )
			else: self.defaults.append( None )	# None is allowed for all other types

			## generate OO API ##
			if i == 0 and type(T) is PyCPointerType and type(T._type_) is PyCStructType:
				klass = T._type_
				if klass not in _OOAPI_: _OOAPI_[ klass ] = []
				_OOAPI_[ klass ].append( self )

	def _call_( self, *args ):			# allow flexible calling types
		cargs = list( self.defaults )
		for i,arg in enumerate(args):
			if isinstance( arg, _rpythonic_meta_ ): arg = arg.POINTER
			elif hasattr( arg, '_rpythonic_' ): arg = arg.POINTER		# workaround - instance from another module

			t = type(arg)
			k = self.argtypes[ i ]
			kt = self.argtypestypes[ i ]
			if arg is None and cargs[i] is not None:	# use user defaults, very rare cases
				continue

			elif t is bool and k is ctypes.c_int:
				if arg: cargs[i] = 1	#ctypes.c_int(1)
				else: cargs[i] = 0	#ctypes.c_int(0)

			elif t in (list,tuple):				# convert lists and tuples into array
				if kt is PyCArrayType:
					cargs[ i ] = k(*arg)
				elif kt is PyCStructType:
					if k._array_wrapper_: cargs[ i ] = k(arg)	# allow easy array init
					else: cargs[ i ] = k(*arg)							# allow multiple args
				elif kt is PyCPointerType:
					cargs[ i ] = _convert_nested_list_to_pointer( k, arg )
				else: assert 0

			elif isinstance( arg, ctypes._Pointer ) and t is not k and kt is PyCPointerType:
				cargs[ i ] = ctypes.cast( arg, k )		# generic's that need to be cast

			elif kt is PyCStructType and isinstance( arg, ctypes._Pointer ):
				cargs[ i ] = arg.contents	# fixed may25

			elif kt is PyCPointerType and not isinstance( arg, (ctypes._Pointer,CArgObject) ):
				if t in (int,float,bool): ptr = k( k._type_(arg) )
				elif t is str:
					arg = arg.encode('utf-8')
					#ptr = k( k._type_() )								# not k() otherwise null pointer error
					#for j, char in enumerate(arg): ptr[ j ] = char		# not correct - missing null byte?
					ptr = ctypes.create_string_buffer(arg)				# correct and pypy compatible
				elif t in (PyCStructType, PyCArrayType):
					ptr = ctypes.cast( ctypes.pointer( arg ), k )
				else:
					ptr = arg	# TODO print warning?
				cargs[ i ] = ptr

			elif kt is PyCFuncPtrType:
				if t.__name__ == 'CFunctionType': cargs[ i ] = arg		# assume outside holds pointer
				else:													# this is not safe #
					cargs[ i ] = self.callbacks[ i ] = k( arg )				# assume arg is a callable
			else:
				cargs[ i ] = arg		# directly pass

		## if you define your own return_wrapper, it must take keyword "pointer"
		if self.return_wrapper: return self.return_wrapper( pointer=self.function( *cargs ) )
		else: return self.function( *cargs )



def _convert_nested_list_to_pointer( k, arg ):
	depth = 0; s = k
	while True:
		if type(s) is PyCPointerType:
			s = getattr( s, '_type_' )
			depth += 1
		else: break
	assert depth and depth <= 2
	if depth == 1:
		T = k._type_
		ptr = k( k._type_() )
		for i in range( len(arg) ):
			ptr[ i ] = T( *arg[i] )
	elif depth == 2:
		T = k._type_._type_
		_ptr = k._type_( k._type_._type_() )
		for i in range(len( arg )):
			for j in range( len(arg[i]) ):
				_ptr[ j ] = T( *arg[ i ][ j ] )
		ptr = k( _ptr )
	return ptr


def __freeze_rpythonic_struct( cls, fields ):
	if cls not in _OOAPI_: _OOAPI_[ cls ] = []	# wrap all structs
	try: setattr( cls, '_fields_', fields )
	except:
		print( 'WARN - bad order struct freeze', cls )
		#cls._fields_ = []

class _rpythonic_struct_( ctypes.Structure ):
	_array_wrapper_ = False
	_fields_ = []
	_methods_ = {}
	#def __call__(self): return self
	def __init__(self, *args, **kw ):
		cargs = []
		argtypes = []
		for a in self._fields_: argtypes.append( a[1] )
		if len(args) > len(argtypes): args = [args]	# allow both calling conventions
		for i,arg in enumerate( args ):
			if isinstance( arg, _rpythonic_meta_ ): arg = arg.POINTER

			t = type(arg)
			k = argtypes[ i ]
			if t in (list,tuple):
				if k.__class__.__name__	== 'PyCArrayType':
					cargs.append( k(*arg) )
				elif k.__class__.__name__ == 'PyCStructType':
					if k._array_wrapper_: cargs.append( k(arg) )	# allow easy array init
					else: cargs.append( k(*arg) )							# allow multiple args
			elif isinstance( arg, ctypes._Pointer ) and t is not k:
				cargs[ i ] = ctypes.cast( arg, k )	# generic's that need to be cast
			elif k.__class__.__name__ == 'PyCArrayType' and t in (float,int,bool):
				cargs.append( k(arg) )		# support init array from single value
			else:
				cargs.append( arg )		# directly pass

		ctypes.Structure.__init__(self, *cargs, **kw)


def _rpythonic_make_nice_global_enums_():
	G = globals()
	for name in RPYTHONIC_GLOBAL_ENUMS:
		if '_' in name and name.index('_') <= 4:
			altname = name[ name.index('_') + 1 : ]
			if altname not in G:
				G[altname] = RPYTHONIC_GLOBAL_ENUMS[ name ]

def _rpythonic_clean_up_missing_functions_():
	G = globals()
	for f in RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES:
		G.pop( f )
	print( "C functions loaded: %s" %len(RPYTHONIC_WRAPPER_FUNCTIONS) )
	print( "C functions failed: %s" %len(RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES) )



###### NEW API #########
CTYPES_DLL = None

class _VOID_POINTER_CONTAINER_(object):
	def __init__(self, ptr, name=None):
		self._pointer_ = ptr
		self.name = name
NULL = _VOID_POINTER_CONTAINER_(None,'<null pointer>')


class meta:	# NEW API - allow run time switch from ctypes to rffi
	'''
	Methods:
		RPython will not allow object wrapper around a method (__call__ not allowed)
		keep C function names in list "__cfunctions__"
		rpythonic.enable_rffi( classA, classB )	
		can take advantage of methods in object-method-wrapper,
		generate rffi wrapper and set method on classA, etc.
		replaces object-method-wrapper with rffi-method

	Properties:
		CPython: obj.x=1
		RPython: obj.set_x(1)	
	'''
	METAS = []
	def __init__(self, constructors=[], methods={}, properties={}):
		global CTYPES_DLL
		if not CTYPES_DLL:
			CTYPES_DLL = _load_ctypes_lib( _clib_name_ )

		self.constructors = constructors
		self.methods = methods
		self.properties = properties
		self.METAS.append( self )



	def __call__(self, cls ):
		print('@meta', cls )

		if not self.constructors:
			lamb = lambda s, _explicit_pointer_=None: setattr(s,'_pointer_',getattr(_explicit_pointer_,'_pointer_')) if hasattr(_explicit_pointer_,'_pointer_') else setattr(s,'_pointer_',_explicit_pointer_)
			lamb._debug = '(no constructor)'
			setattr( cls, '__init__', lamb )
		else:
			con = self._find_best_function( self.constructors )
			cfunc = self._build_cfunc( con )
			setattr( cls, '_%s'%con['name'], cfunc )
			g = self._gen_init( con )
			setattr( cls, '__init__', g )
		
		## set methods ##
		for name in self.methods:
			meth = self.methods[ name ]
			cfuncs = []
			for m in meth['functions']:
				cfunc = self._build_cfunc( m, method=True, static=meth['static'] )
				self._setup_return( cfunc, meth )
				setattr( cls, '_%s'%m['name'], cfunc )
				cfuncs.append( cfunc )

			f = self._find_best_function( meth['functions'] )
			g = self._gen_method( meth, f )
			g._cfuncs = cfuncs
			if meth['static']: g = classmethod( g )
			setattr( cls, name, g )

		for name in self.properties:
			print( 'property:', name )
			p = []
			for f in self.properties[name]:
				cfunc = self._build_cfunc( f )
				setattr( cls, '_%s'%f['name'], cfunc )
				g = self._gen_method( f, f )
				p.append( g )

			setattr( cls, name, property(*p) )

		return cls


	@staticmethod
	def _build_cfunc( info, method=False, static=False ):
		cfunc = getattr(CTYPES_DLL, info['name'])
		if method and not static: argtypes = [ ctypes.c_void_p ]
		else: argtypes = []
		for p in info['parameters']: argtypes.append( eval(p['ctypes_type']) )
		cfunc.argtypes = argtypes
		return cfunc

	@staticmethod
	def _setup_return( cfunc, info ):
		if not info['returns_fundamental']:
			cfunc.restype = ctypes.c_void_p
		elif info['returns_fundamental']:
			cfunc.restype = eval( info['returns_ctypes'] )
		else:
			cfunc.restype = ctypes.c_void_p

	@staticmethod
	def _gen_prepare_args( m ):
		a = []; b = []
		for i,p in enumerate(m['parameters']):
			if 'name' in p: n = p['name']
			else: n = '_unnamed_%s' %i
			if '<' in n: n = '_TODOfixme_%s' %i
			if n in PYTHON_RESERVED_KEYWORDS: n += str(i)
			if p['fundamental']:
				b.append( n )
				s = p['raw_type'].split()
				if 'default' in p:
					d = p['default']
					if p['raw_type'] in ('float', 'double'):
						if d.endswith('f'): d = d[:-1]
						d = d.replace(' ', '.')
						if 'e' in d: d = 0.0
						try: d = float(d)
						except: d = 0.0
					elif ('int' in s or 'size_t' in s) and not d.isdigit(): d = 0
					elif 'char' in s and '"' not in d: d = '""'
					elif d.lower() == 'false': d = False
					elif d.lower() == 'true': d = True
				elif 'char' in s: d = '""'
				elif 'float' in s or 'double' in s: d = 0.0
				elif 'size_t' in s or 'int' in s or 'long' in s or 'short' in s: d = 0
				elif p['raw_type'] == 'bool': d = False
				elif p['raw_type'] in ('void', '(template)'): d = 'NULL'
				else: print( p )
				a.append( n+'=%s' %d )

			else:
				b.append( '%s._pointer_'%n )
				a.append( n+'=NULL' )
		return a, b

	@staticmethod
	def _gen_init( m ):
		a, b = meta._gen_prepare_args( m )
		if a: e = 'lambda _py_self_, %s, _explicit_pointer_=None: ' %(','.join(a))
		else: e = 'lambda _py_self_, _explicit_pointer_=None: '
		e += 'setattr(_py_self_, "_pointer_", _py_self_._%s(%s))' %( m['name'], ','.join(b) )
		e += ' if not _explicit_pointer_ else '
		e += 'setattr(_py_self_, "_pointer_", _explicit_pointer_)'
		print( e )
		lamb = eval( e ); lamb._debug = e; lamb._introspect = m
		return lamb

	@staticmethod
	def _find_best_function( funcs ):
		best = funcs[0]
		score = -1
		if len(funcs) > 1:
			for f in funcs:
				hits = 0
				for p in f['parameters']:
					if p['fundamental']: hits += 1
				if hits and hits == len( f['parameters'] ):
					if hits > score:
						score = hits
						best = f
		return best

	@staticmethod
	def _gen_method( m, f ):
		a, b = meta._gen_prepare_args( f )
		if a: e = 'lambda _py_self_, %s: ' %(','.join(a))
		else: e = 'lambda _py_self_: '

		if 'static' in m and m['static']:	# static in c++ is like a classmethod
			c = '_py_self_._%s( %s )' %( f['name'], ','.join(b) )
		else:
			c = '_py_self_._%s( _py_self_._pointer_, %s )' %( f['name'], ','.join(b) )

		if not m['returns_fundamental']:
			if 'returns_unknown' in m or '<' in m['returns']: c = '_VOID_POINTER_CONTAINER_( %s, name="%s" )' %(c,m['returns'])
			else:
				something = m['returns'].replace('::', '.')
				c = '%s( _explicit_pointer_=%s )' %(something, c)

		e += c; lamb = eval( e )
		lamb._debug = e; lamb._introspect = f
		return lamb


	META_FUNCTIONS = []
	@classmethod
	def function( self, info ):
		print('@meta.function', info['name'] )
		global CTYPES_DLL
		if not CTYPES_DLL:
			CTYPES_DLL = _load_ctypes_lib( _clib_name_ )

		cfunc = self._build_cfunc( info, method=False, static=True )
		setattr( meta, '_%s'%info['name'], cfunc )
		self._setup_return( cfunc, info )
		a, b = meta._gen_prepare_args( info )
		e = 'lambda %s: ' %(','.join(a))
		c = 'meta._%s( %s )' %( info['name'], ','.join(b) )

		if not info['returns_fundamental']:
			if 'returns_unknown' in info or '<' in info['returns']:
				c = '_VOID_POINTER_CONTAINER_( %s, name="%s" )' %(c,info['returns'])
			else:
				something = info['returns'].replace('::', '.')
				c = '%s( _explicit_pointer_=%s )' %(something, c)
		e += c
		lamb = eval( e )
		lamb._debug = e
		lamb._introspect = info
		return lamb



def _rpythonic_strip_prefixes_( prefixes ):
	G = globals()
	names = list(G.keys())	# ensure list in py3
	for name in names:
		for prefix in prefixes:
			if name.startswith( prefix ):
				newname = name[ len(prefix) : ]
				if newname and newname not in G:
					G[ newname ] = G[ name ]






_clib_name_ = 'libblender'
print('loading lib', _clib_name_)
print( os.path.abspath( os.path.curdir ) )
CTYPES_DLL = _load_ctypes_lib( _clib_name_ )
assert CTYPES_DLL
print( CTYPES_DLL._name )

## macro globals ##
SYS_SystemHandle = 0
## enums ##
FE_INVALID = 1 
_FE_DENORM = 2 
FE_DIVBYZERO = 4 
FE_OVERFLOW = 8 
FE_UNDERFLOW = 16 
FE_INEXACT = 32 

FE_TONEAREST = 0 
FE_DOWNWARD = 1024 
FE_UPWARD = 2048 
FE_TOWARDZERO = 3072 

SIGEV_SIGNAL = 0 
SIGEV_NONE = 1 
SIGEV_THREAD = 2 
SIGEV_THREAD_ID = 4 

SI_ASYNCNL = -60 
SI_TKILL = -6 
SI_SIGIO = -5 
SI_ASYNCIO = -4 
SI_MESGQ = -3 
SI_TIMER = -2 
SI_QUEUE = -1 
SI_USER = 0 
SI_KERNEL = 128 

ILL_ILLOPC = 1 
ILL_ILLOPN = 2 
ILL_ILLADR = 3 
ILL_ILLTRP = 4 
ILL_PRVOPC = 5 
ILL_PRVREG = 6 
ILL_COPROC = 7 
ILL_BADSTK = 8 

FPE_INTDIV = 1 
FPE_INTOVF = 2 
FPE_FLTDIV = 3 
FPE_FLTOVF = 4 
FPE_FLTUND = 5 
FPE_FLTRES = 6 
FPE_FLTINV = 7 
FPE_FLTSUB = 8 

SEGV_MAPERR = 1 
SEGV_ACCERR = 2 

BUS_ADRALN = 1 
BUS_ADRERR = 2 
BUS_OBJERR = 3 

TRAP_BRKPT = 1 
TRAP_TRACE = 2 

CLD_EXITED = 1 
CLD_KILLED = 2 
CLD_DUMPED = 3 
CLD_TRAPPED = 4 
CLD_STOPPED = 5 
CLD_CONTINUED = 6 

POLL_IN = 1 
POLL_OUT = 2 
POLL_MSG = 3 
POLL_ERR = 4 
POLL_PRI = 5 
POLL_HUP = 6 

SS_ONSTACK = 1 
SS_DISABLE = 2 

REG_GS = 0 
REG_FS = 1 
REG_ES = 2 
REG_DS = 3 
REG_EDI = 4 
REG_ESI = 5 
REG_EBP = 6 
REG_ESP = 7 
REG_EBX = 8 
REG_EDX = 9 
REG_ECX = 10 
REG_EAX = 11 
REG_TRAPNO = 12 
REG_ERR = 13 
REG_EIP = 14 
REG_CS = 15 
REG_EFL = 16 
REG_UESP = 17 
REG_SS = 18 

_codecvt_result = { 
	"__codecvt_ok" : 0, 
	"__codecvt_partial" : 1, 
	"__codecvt_error" : 2, 
	"__codecvt_noconv" : 3, 
}

_socket_type = { 
	"SOCK_STREAM" : 1, 
	"SOCK_DGRAM" : 2, 
	"SOCK_RAW" : 3, 
	"SOCK_RDM" : 4, 
	"SOCK_SEQPACKET" : 5, 
	"SOCK_DCCP" : 6, 
	"SOCK_PACKET" : 10, 
	"SOCK_CLOEXEC" : 2000000, 
	"SOCK_NONBLOCK" : 4000, 
}

MSG_OOB = 1 
MSG_PEEK = 2 
MSG_DONTROUTE = 4 
MSG_TRYHARD = 4 
MSG_CTRUNC = 8 
MSG_PROXY = 16 
MSG_TRUNC = 32 
MSG_DONTWAIT = 64 
MSG_EOR = 128 
MSG_WAITALL = 256 
MSG_FIN = 512 
MSG_SYN = 1024 
MSG_CONFIRM = 2048 
MSG_RST = 4096 
MSG_ERRQUEUE = 8192 
MSG_NOSIGNAL = 16384 
MSG_MORE = 32768 
MSG_WAITFORONE = 65536 
MSG_CMSG_CLOEXEC = 1073741824 

SCM_RIGHTS = 1 
SCM_CREDENTIALS = 2 

SHUT_RD = 0 
SHUT_WR = 1 
SHUT_RDWR = 2 

IPPROTO_IP = 0 
IPPROTO_HOPOPTS = 0 
IPPROTO_ICMP = 1 
IPPROTO_IGMP = 2 
IPPROTO_IPIP = 4 
IPPROTO_TCP = 6 
IPPROTO_EGP = 8 
IPPROTO_PUP = 12 
IPPROTO_UDP = 17 
IPPROTO_IDP = 22 
IPPROTO_TP = 29 
IPPROTO_DCCP = 33 
IPPROTO_IPV6 = 41 
IPPROTO_ROUTING = 43 
IPPROTO_FRAGMENT = 44 
IPPROTO_RSVP = 46 
IPPROTO_GRE = 47 
IPPROTO_ESP = 50 
IPPROTO_AH = 51 
IPPROTO_ICMPV6 = 58 
IPPROTO_NONE = 59 
IPPROTO_DSTOPTS = 60 
IPPROTO_MTP = 92 
IPPROTO_ENCAP = 98 
IPPROTO_PIM = 103 
IPPROTO_COMP = 108 
IPPROTO_SCTP = 132 
IPPROTO_UDPLITE = 136 
IPPROTO_RAW = 255 
IPPROTO_MAX = 256 

IPPORT_ECHO = 7 
IPPORT_DISCARD = 9 
IPPORT_SYSTAT = 11 
IPPORT_DAYTIME = 13 
IPPORT_NETSTAT = 15 
IPPORT_FTP = 21 
IPPORT_TELNET = 23 
IPPORT_SMTP = 25 
IPPORT_TIMESERVER = 37 
IPPORT_NAMESERVER = 42 
IPPORT_WHOIS = 43 
IPPORT_MTP = 57 
IPPORT_TFTP = 69 
IPPORT_RJE = 77 
IPPORT_FINGER = 79 
IPPORT_TTYLINK = 87 
IPPORT_SUPDUP = 95 
IPPORT_EXECSERVER = 512 
IPPORT_LOGINSERVER = 513 
IPPORT_CMDSERVER = 514 
IPPORT_EFSSERVER = 520 
IPPORT_BIFFUDP = 512 
IPPORT_WHOSERVER = 513 
IPPORT_ROUTESERVER = 520 
IPPORT_RESERVED = 1024 
IPPORT_USERRESERVED = 5000 

PTHREAD_CREATE_JOINABLE = 0 
PTHREAD_CREATE_DETACHED = 1 

PTHREAD_MUTEX_TIMED_NP = 0 
PTHREAD_MUTEX_RECURSIVE_NP = 1 
PTHREAD_MUTEX_ERRORCHECK_NP = 2 
PTHREAD_MUTEX_ADAPTIVE_NP = 3 
PTHREAD_MUTEX_NORMAL = 0 
PTHREAD_MUTEX_RECURSIVE = 1 
PTHREAD_MUTEX_ERRORCHECK = 2 
PTHREAD_MUTEX_DEFAULT = 0 
PTHREAD_MUTEX_FAST_NP = 0 

PTHREAD_MUTEX_STALLED = 0 
PTHREAD_MUTEX_STALLED_NP = 0 
PTHREAD_MUTEX_ROBUST = 1 
PTHREAD_MUTEX_ROBUST_NP = 1 

PTHREAD_PRIO_NONE = 0 
PTHREAD_PRIO_INHERIT = 1 
PTHREAD_PRIO_PROTECT = 2 

PTHREAD_RWLOCK_PREFER_READER_NP = 0 
PTHREAD_RWLOCK_PREFER_WRITER_NP = 1 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = 2 
PTHREAD_RWLOCK_DEFAULT_NP = 0 

PTHREAD_INHERIT_SCHED = 0 
PTHREAD_EXPLICIT_SCHED = 1 

PTHREAD_SCOPE_SYSTEM = 0 
PTHREAD_SCOPE_PROCESS = 1 

PTHREAD_PROCESS_PRIVATE = 0 
PTHREAD_PROCESS_SHARED = 1 

PTHREAD_CANCEL_ENABLE = 0 
PTHREAD_CANCEL_DISABLE = 1 

PTHREAD_CANCEL_DEFERRED = 0 
PTHREAD_CANCEL_ASYNCHRONOUS = 1 

eIconSizes = { 
	"ICON_SIZE_ICON" : 0, 
	"ICON_SIZE_PREVIEW" : 1, 
}

PAINT_SHOW_BRUSH = 1 
PAINT_FAST_NAVIGATE = 2 
PAINT_SHOW_BRUSH_ON_SURFACE = 4 

SculptFlags = { 
	"SCULPT_SYMM_X" : 1, 
	"SCULPT_SYMM_Y" : 2, 
	"SCULPT_SYMM_Z" : 4, 
	"SCULPT_LOCK_X" : 8, 
	"SCULPT_LOCK_Y" : 16, 
	"SCULPT_LOCK_Z" : 32, 
	"SCULPT_SYMMETRY_FEATHER" : 64, 
	"SCULPT_USE_OPENMP" : 128, 
	"SCULPT_ONLY_DEFORM" : 256, 
}

PropertyType = { 
	"PROP_BOOLEAN" : 0, 
	"PROP_INT" : 1, 
	"PROP_FLOAT" : 2, 
	"PROP_STRING" : 3, 
	"PROP_ENUM" : 4, 
	"PROP_POINTER" : 5, 
	"PROP_COLLECTION" : 6, 
}

PropertyUnit = { 
	"PROP_UNIT_NONE" : 0, 
	"PROP_UNIT_LENGTH" : 4194304, 
	"PROP_UNIT_AREA" : 8388608, 
	"PROP_UNIT_VOLUME" : 12582912, 
	"PROP_UNIT_MASS" : 16777216, 
	"PROP_UNIT_ROTATION" : 20971520, 
	"PROP_UNIT_TIME" : 25165824, 
	"PROP_UNIT_VELOCITY" : 29360128, 
	"PROP_UNIT_ACCELERATION" : 33554432, 
}

PropertySubType = { 
	"PROP_NONE" : 0, 
	"PROP_FILEPATH" : 1, 
	"PROP_DIRPATH" : 2, 
	"PROP_FILENAME" : 3, 
	"PROP_UNSIGNED" : 13, 
	"PROP_PERCENTAGE" : 14, 
	"PROP_FACTOR" : 15, 
	"PROP_ANGLE" : 20971542, 
	"PROP_TIME" : 25165847, 
	"PROP_DISTANCE" : 4194328, 
	"PROP_COLOR" : 20, 
	"PROP_TRANSLATION" : 4194337, 
	"PROP_DIRECTION" : 22, 
	"PROP_VELOCITY" : 29360163, 
	"PROP_ACCELERATION" : 33554468, 
	"PROP_MATRIX" : 25, 
	"PROP_EULER" : 20971558, 
	"PROP_QUATERNION" : 27, 
	"PROP_AXISANGLE" : 28, 
	"PROP_XYZ" : 29, 
	"PROP_XYZ_LENGTH" : 4194345, 
	"PROP_COLOR_GAMMA" : 30, 
	"PROP_COORDS" : 31, 
	"PROP_LAYER" : 40, 
	"PROP_LAYER_MEMBER" : 41, 
}

PropertyFlag = { 
	"PROP_EDITABLE" : 1, 
	"PROP_LIB_EXCEPTION" : 4194304, 
	"PROP_ANIMATABLE" : 2, 
	"PROP_ICONS_CONSECUTIVE" : 262144, 
	"PROP_HIDDEN" : 33554432, 
	"PROP_SKIP_SAVE" : 1099511627776, 
	"PROP_REQUIRED" : 4, 
	"PROP_OUTPUT" : 8, 
	"PROP_RNAPTR" : 131072, 
	"PROP_REGISTER" : 16, 
	"PROP_REGISTER_OPTIONAL" : 48, 
	"PROP_ID_REFCOUNT" : 64, 
	"PROP_ID_SELF_CHECK" : 4294967296, 
	"PROP_NEVER_NULL" : 16777216, 
	"PROP_NEVER_UNLINK" : 137438953472, 
	"PROP_ENUM_FLAG" : 8589934592, 
	"PROP_CONTEXT_UPDATE" : 17179869184, 
	"PROP_CONTEXT_PROPERTY_UPDATE" : 566935683072, 
	"PROP_THICK_WRAP" : 34359738368, 
	"PROP_NEVER_CLAMP" : 274877906944, 
	"PROP_BUILTIN" : 128, 
	"PROP_EXPORT" : 256, 
	"PROP_RUNTIME" : 512, 
	"PROP_IDPROPERTY" : 65536, 
	"PROP_RAW_ACCESS" : 524288, 
	"PROP_RAW_ARRAY" : 1048576, 
	"PROP_FREE_POINTERS" : 2097152, 
	"PROP_DYNAMIC" : 8388608, 
	"PROP_ENUM_NO_CONTEXT" : 68719476736, 
}

RawPropertyType = { 
	"PROP_RAW_UNSET" : -1, 
	"PROP_RAW_INT" : 0, 
	"PROP_RAW_SHORT" : 1, 
	"PROP_RAW_CHAR" : 2, 
	"PROP_RAW_DOUBLE" : 3, 
	"PROP_RAW_FLOAT" : 4, 
}

FunctionFlag = { 
	"FUNC_NO_SELF" : 1, 
	"FUNC_USE_CONTEXT" : 2, 
	"FUNC_USE_REPORTS" : 4, 
	"FUNC_USE_SELF_ID" : 2048, 
	"FUNC_REGISTER" : 8, 
	"FUNC_REGISTER_OPTIONAL" : 30, 
	"FUNC_BUILTIN" : 128, 
	"FUNC_EXPORT" : 256, 
	"FUNC_RUNTIME" : 512, 
	"FUNC_FREE_POINTERS" : 1024, 
}

StructFlag = { 
	"STRUCT_ID" : 1, 
	"STRUCT_ID_REFCOUNT" : 2, 
	"STRUCT_RUNTIME" : 4, 
	"STRUCT_GENERATED" : 8, 
	"STRUCT_FREE_POINTERS" : 16, 
	"STRUCT_NO_IDPROPERTIES" : 32, 
}

CTX_MODE_EDIT_MESH = 0 
CTX_MODE_EDIT_CURVE = 1 
CTX_MODE_EDIT_SURFACE = 2 
CTX_MODE_EDIT_TEXT = 3 
CTX_MODE_EDIT_ARMATURE = 4 
CTX_MODE_EDIT_METABALL = 5 
CTX_MODE_EDIT_LATTICE = 6 
CTX_MODE_POSE = 7 
CTX_MODE_SCULPT = 8 
CTX_MODE_PAINT_WEIGHT = 9 
CTX_MODE_PAINT_VERTEX = 10 
CTX_MODE_PAINT_TEXTURE = 11 
CTX_MODE_PARTICLE = 12 
CTX_MODE_OBJECT = 13 

CTX_DATA_TYPE_POINTER = 0 
CTX_DATA_TYPE_COLLECTION = 1 

ReportType = { 
	"RPT_DEBUG" : 1, 
	"RPT_INFO" : 2, 
	"RPT_OPERATOR" : 4, 
	"RPT_WARNING" : 8, 
	"RPT_ERROR" : 16, 
	"RPT_ERROR_INVALID_INPUT" : 32, 
	"RPT_ERROR_INVALID_CONTEXT" : 64, 
	"RPT_ERROR_OUT_OF_MEMORY" : 128, 
}

ReportListFlags = { 
	"RPT_PRINT" : 1, 
	"RPT_STORE" : 2, 
	"RPT_FREE" : 4, 
	"RPT_OP_HOLD" : 8, 
}

IMB_BlendMode = { 
	"IMB_BLEND_MIX" : 0, 
	"IMB_BLEND_ADD" : 1, 
	"IMB_BLEND_SUB" : 2, 
	"IMB_BLEND_MUL" : 3, 
	"IMB_BLEND_LIGHTEN" : 4, 
	"IMB_BLEND_DARKEN" : 5, 
	"IMB_BLEND_ERASE_ALPHA" : 6, 
	"IMB_BLEND_ADD_ALPHA" : 7, 
	"IMB_BLEND_COPY" : 1000, 
	"IMB_BLEND_COPY_RGB" : 1001, 
	"IMB_BLEND_COPY_ALPHA" : 1002, 
}

IMB_Timecode_Type = { 
	"IMB_TC_NONE" : 0, 
	"IMB_TC_RECORD_RUN" : 1, 
	"IMB_TC_FREE_RUN" : 2, 
	"IMB_TC_INTERPOLATED_REC_DATE_FREE_RUN" : 4, 
	"IMB_TC_MAX_SLOT" : 3, 
}

IMB_Proxy_Size = { 
	"IMB_PROXY_NONE" : 0, 
	"IMB_PROXY_25" : 1, 
	"IMB_PROXY_50" : 2, 
	"IMB_PROXY_75" : 4, 
	"IMB_PROXY_100" : 8, 
	"IMB_PROXY_MAX_SLOT" : 4, 
}

eModifyKey_Modes = { 
	"MODIFYKEY_MODE_INSERT" : 0, 
	"MODIFYKEY_MODE_DELETE" : 1, 
}

eModifyKey_Returns = { 
	"MODIFYKEY_INVALID_CONTEXT" : -1, 
	"MODIFYKEY_MISSING_TYPEINFO" : -2, 
}

eCreateDriverFlags = { 
	"CREATEDRIVER_WITH_DEFAULT_DVAR" : 1, 
}

eAnimFilterFlags = { 
	"ANIMFILTER_KEYS_LOCAL" : 1, 
	"ANIMFILTER_KEYS_MUTED" : 2, 
	"ANIMFILTER_KEYS_ACTIVE" : 4, 
	"ANIMFILTER_KEYS_NOMAT" : 512, 
	"ANIMFILTER_KEYS_NOSKEY" : 65536, 
}

RGN_TYPE_WINDOW = 0 
RGN_TYPE_HEADER = 1 
RGN_TYPE_CHANNELS = 2 
RGN_TYPE_TEMPORARY = 3 
RGN_TYPE_UI = 4 
RGN_TYPE_TOOLS = 5 
RGN_TYPE_TOOL_PROPS = 6 
RGN_TYPE_PREVIEW = 7 

CurveMappingPreset = { 
	"CURVE_PRESET_LINE" : 0, 
	"CURVE_PRESET_SHARP" : 1, 
	"CURVE_PRESET_SMOOTH" : 2, 
	"CURVE_PRESET_MAX" : 3, 
	"CURVE_PRESET_MID9" : 4, 
	"CURVE_PRESET_ROUND" : 5, 
	"CURVE_PRESET_ROOT" : 6, 
}

INFO_RPT_DEBUG = 1 
INFO_RPT_INFO = 2 
INFO_RPT_OP = 4 
INFO_RPT_WARN = 8 
INFO_RPT_ERR = 16 

CONSOLE_LINE_OUTPUT = 0 
CONSOLE_LINE_INPUT = 1 
CONSOLE_LINE_INFO = 2 
CONSOLE_LINE_ERROR = 3 

FileDisplayTypeE = { 
	"FILE_SHORTDISPLAY" : 1, 
	"FILE_LONGDISPLAY" : 2, 
	"FILE_IMGDISPLAY" : 3, 
}

FileSortTypeE = { 
	"FILE_SORT_NONE" : 0, 
	"FILE_SORT_ALPHA" : 1, 
	"FILE_SORT_EXTENSION" : 2, 
	"FILE_SORT_TIME" : 3, 
	"FILE_SORT_SIZE" : 4, 
}

SPACE_EMPTY = 0 
SPACE_VIEW3D = 1 
SPACE_IPO = 2 
SPACE_OUTLINER = 3 
SPACE_BUTS = 4 
SPACE_FILE = 5 
SPACE_IMAGE = 6 
SPACE_INFO = 7 
SPACE_SEQ = 8 
SPACE_TEXT = 9 
SPACE_IMASEL = 10 
SPACE_SOUND = 11 
SPACE_ACTION = 12 
SPACE_NLA = 13 
SPACE_SCRIPT = 14 
SPACE_TIME = 15 
SPACE_NODE = 16 
SPACE_LOGIC = 17 
SPACE_CONSOLE = 18 
SPACE_USERPREF = 19 
SPACEICONMAX = 19 

SIPO_MODE_ANIMATION = 0 
SIPO_MODE_DRIVERS = 1 

CURSOR_FACESEL = 1000 
CURSOR_WAIT = 1001 
CURSOR_EDIT = 1002 
CURSOR_X_MOVE = 1003 
CURSOR_Y_MOVE = 1004 
CURSOR_HELP = 1005 
CURSOR_STD = 1006 
CURSOR_NONE = 1007 
CURSOR_PENCIL = 1008 
CURSOR_COPY = 1009 

BC_NW_ARROWCURSOR = 2 
BC_NS_ARROWCURSOR = 3 
BC_EW_ARROWCURSOR = 4 
BC_WAITCURSOR = 5 
BC_CROSSCURSOR = 6 
BC_EDITCROSSCURSOR = 7 
BC_BOXSELCURSOR = 8 
BC_KNIFECURSOR = 9 
BC_VLOOPCURSOR = 10 
BC_TEXTEDITCURSOR = 11 
BC_PAINTBRUSHCURSOR = 12 
BC_HANDCURSOR = 13 
BC_NSEW_SCROLLCURSOR = 14 
BC_NS_SCROLLCURSOR = 15 
BC_EW_SCROLLCURSOR = 16 
BC_EYEDROPPER_CURSOR = 17 
BC_SWAPAREA_CURSOR = 18 
BC_NUMCURSORS = 19 

BC_BLACK = 0 
BC_WHITE = 1 
BC_RED = 2 
BC_BLUE = 3 
BC_GREEN = 4 
BC_YELLOW = 5 

NDOF_BUTTON_NONE = 400 
NDOF_BUTTON_MENU = 401 
NDOF_BUTTON_FIT = 402 
NDOF_BUTTON_TOP = 403 
NDOF_BUTTON_BOTTOM = 404 
NDOF_BUTTON_LEFT = 405 
NDOF_BUTTON_RIGHT = 406 
NDOF_BUTTON_FRONT = 407 
NDOF_BUTTON_BACK = 408 
NDOF_BUTTON_ISO1 = 409 
NDOF_BUTTON_ISO2 = 410 
NDOF_BUTTON_ROLL_CW = 411 
NDOF_BUTTON_ROLL_CCW = 412 
NDOF_BUTTON_SPIN_CW = 413 
NDOF_BUTTON_SPIN_CCW = 414 
NDOF_BUTTON_TILT_CW = 415 
NDOF_BUTTON_TILT_CCW = 416 
NDOF_BUTTON_ROTATE = 417 
NDOF_BUTTON_PANZOOM = 418 
NDOF_BUTTON_DOMINANT = 419 
NDOF_BUTTON_PLUS = 420 
NDOF_BUTTON_MINUS = 421 
NDOF_BUTTON_1 = 422 
NDOF_BUTTON_2 = 423 
NDOF_BUTTON_3 = 424 
NDOF_BUTTON_4 = 425 
NDOF_BUTTON_5 = 426 
NDOF_BUTTON_6 = 427 
NDOF_BUTTON_7 = 428 
NDOF_BUTTON_8 = 429 
NDOF_BUTTON_9 = 430 
NDOF_BUTTON_10 = 431 
NDOF_LAST = 432 

WM_OP_INVOKE_DEFAULT = 0 
WM_OP_INVOKE_REGION_WIN = 1 
WM_OP_INVOKE_REGION_CHANNELS = 2 
WM_OP_INVOKE_REGION_PREVIEW = 3 
WM_OP_INVOKE_AREA = 4 
WM_OP_INVOKE_SCREEN = 5 
WM_OP_EXEC_DEFAULT = 6 
WM_OP_EXEC_REGION_WIN = 7 
WM_OP_EXEC_REGION_CHANNELS = 8 
WM_OP_EXEC_REGION_PREVIEW = 9 
WM_OP_EXEC_AREA = 10 
WM_OP_EXEC_SCREEN = 11 

P_NOT_STARTED = 0 
P_STARTING = 1 
P_IN_PROGRESS = 2 
P_FINISHING = 3 
P_FINISHED = 4 

WM_LOG_DEBUG = 0 
WM_LOG_INFO = 1000 
WM_LOG_WARNING = 2000 
WM_ERROR_UNDEFINED = 3000 
WM_ERROR_INVALID_INPUT = 3001 
WM_ERROR_INVALID_CONTEXT = 3002 
WM_ERROR_OUT_OF_MEMORY = 3003 

WM_HANDLER_DEFAULT = 0 
WM_HANDLER_FILESELECT = 1 

GPUDeviceType = { 
	"GPU_DEVICE_NVIDIA" : 1, 
	"GPU_DEVICE_ATI" : 2, 
	"GPU_DEVICE_INTEL" : 4, 
	"GPU_DEVICE_SOFTWARE" : 8, 
	"GPU_DEVICE_UNKNOWN" : 16, 
	"GPU_DEVICE_ANY" : 255, 
}

GPUOSType = { 
	"GPU_OS_WIN" : 256, 
	"GPU_OS_MAC" : 512, 
	"GPU_OS_UNIX" : 65536, 
	"GPU_OS_ANY" : 65280, 
}

GPUDriverType = { 
	"GPU_DRIVER_OFFICIAL" : 4194304, 
	"GPU_DRIVER_OPENSOURCE" : 8388608, 
	"GPU_DRIVER_SOFTWARE" : 16777216, 
	"GPU_DRIVER_ANY" : 16711680, 
}

FP_NAN = 0 
FP_INFINITE = 1 
FP_ZERO = 2 
FP_SUBNORMAL = 3 
FP_NORMAL = 4 

IEEE_ = -1 
SVID_ = 0 
XOPEN_ = 1 
POSIX_ = 2 
ISOC_ = 3 

eEulerRotationOrders = { 
	"EULER_ORDER_DEFAULT" : 1, 
	"EULER_ORDER_XYZ" : 1, 
	"EULER_ORDER_XZY" : 2, 
	"EULER_ORDER_YXZ" : 3, 
	"EULER_ORDER_YZX" : 4, 
	"EULER_ORDER_ZXY" : 5, 
	"EULER_ORDER_ZYX" : 6, 
}

BlenFileType = { 
	"BLENFILETYPE_BLEND" : 1, 
	"BLENFILETYPE_PUB" : 2, 
	"BLENFILETYPE_RUNTIME" : 3, 
}

BIK_ParamType = { 
	"BIK_PARAM_TYPE_FLOAT" : 0, 
	"BIK_PARAM_TYPE_INT" : 1, 
	"BIK_PARAM_TYPE_STRING" : 2, 
}

GHOST_kFailure = 0 
GHOST_kSuccess = 1 

GHOST_kTabletModeNone = 0 
GHOST_kTabletModeStylus = 1 
GHOST_kTabletModeEraser = 2 

GHOST_kNotVisible = 0 
GHOST_kPartiallyVisible = 1 
GHOST_kFullyVisible = 2 

GHOST_kFireTimeNever = 4294967295 

GHOST_kModifierKeyLeftShift = 0 
GHOST_kModifierKeyRightShift = 1 
GHOST_kModifierKeyLeftAlt = 2 
GHOST_kModifierKeyRightAlt = 3 
GHOST_kModifierKeyLeftControl = 4 
GHOST_kModifierKeyRightControl = 5 
GHOST_kModifierKeyOS = 6 
GHOST_kModifierKeyNumMasks = 7 

GHOST_kWindowStateNormal = 0 
GHOST_kWindowStateMaximized = 1 
GHOST_kWindowStateMinimized = 2 
GHOST_kWindowStateFullScreen = 3 
GHOST_kWindowStateEmbedded = 4 
GHOST_kWindowState8Normal = 8 
GHOST_kWindowState8Maximized = 9 
GHOST_kWindowState8Minimized = 10 
GHOST_kWindowState8FullScreen = 11 
GHOST_kWindowStateModified = 12 
GHOST_kWindowStateUnModified = 13 

GHOST_kExitCancel = 0 
GHOST_kExitNow = 1 

GHOST_kWindowOrderTop = 0 
GHOST_kWindowOrderBottom = 1 

GHOST_kDrawingContextTypeNone = 0 
GHOST_kDrawingContextTypeOpenGL = 1 

GHOST_kButtonMaskLeft = 0 
GHOST_kButtonMaskMiddle = 1 
GHOST_kButtonMaskRight = 2 
GHOST_kButtonMaskButton4 = 3 
GHOST_kButtonMaskButton5 = 4 
GHOST_kButtonNumMasks = 5 

GHOST_kEventUnknown = 0 
GHOST_kEventCursorMove = 1 
GHOST_kEventButtonDown = 2 
GHOST_kEventButtonUp = 3 
GHOST_kEventWheel = 4 
GHOST_kEventTrackpad = 5 
GHOST_kEventNDOFMotion = 6 
GHOST_kEventNDOFButton = 7 
GHOST_kEventKeyDown = 8 
GHOST_kEventKeyUp = 9 
GHOST_kEventQuit = 10 
GHOST_kEventWindowClose = 11 
GHOST_kEventWindowActivate = 12 
GHOST_kEventWindowDeactivate = 13 
GHOST_kEventWindowUpdate = 14 
GHOST_kEventWindowSize = 15 
GHOST_kEventWindowMove = 16 
GHOST_kEventDraggingEntered = 17 
GHOST_kEventDraggingUpdated = 18 
GHOST_kEventDraggingExited = 19 
GHOST_kEventDraggingDropDone = 20 
GHOST_kEventOpenMainFile = 21 
GHOST_kEventTimer = 22 
GHOST_kNumEventTypes = 23 

GHOST_kStandardCursorFirstCursor = 0 
GHOST_kStandardCursorDefault = 0 
GHOST_kStandardCursorRightArrow = 1 
GHOST_kStandardCursorLeftArrow = 2 
GHOST_kStandardCursorInfo = 3 
GHOST_kStandardCursorDestroy = 4 
GHOST_kStandardCursorHelp = 5 
GHOST_kStandardCursorCycle = 6 
GHOST_kStandardCursorSpray = 7 
GHOST_kStandardCursorWait = 8 
GHOST_kStandardCursorText = 9 
GHOST_kStandardCursorCrosshair = 10 
GHOST_kStandardCursorUpDown = 11 
GHOST_kStandardCursorLeftRight = 12 
GHOST_kStandardCursorTopSide = 13 
GHOST_kStandardCursorBottomSide = 14 
GHOST_kStandardCursorLeftSide = 15 
GHOST_kStandardCursorRightSide = 16 
GHOST_kStandardCursorTopLeftCorner = 17 
GHOST_kStandardCursorTopRightCorner = 18 
GHOST_kStandardCursorBottomRightCorner = 19 
GHOST_kStandardCursorBottomLeftCorner = 20 
GHOST_kStandardCursorCopy = 21 
GHOST_kStandardCursorCustom = 22 
GHOST_kStandardCursorPencil = 23 
GHOST_kStandardCursorNumCursors = 24 

GHOST_kKeyUnknown = -1 
GHOST_kKeyBackSpace = 0 
GHOST_kKeyTab = 1 
GHOST_kKeyLinefeed = 2 
GHOST_kKeyClear = 3 
GHOST_kKeyEnter = 13 
GHOST_kKeyEsc = 27 
GHOST_kKeySpace = " " 
GHOST_kKeyQuote = 39 
GHOST_kKeyComma = "," 
GHOST_kKeyMinus = "-" 
GHOST_kKeyPeriod = "." 
GHOST_kKeySlash = "/" 
GHOST_kKey0 = "0" 
GHOST_kKey1 = "0" 
GHOST_kKey2 = "0" 
GHOST_kKey3 = "0" 
GHOST_kKey4 = "0" 
GHOST_kKey5 = "0" 
GHOST_kKey6 = "0" 
GHOST_kKey7 = "0" 
GHOST_kKey8 = "0" 
GHOST_kKey9 = "0" 
GHOST_kKeySemicolon = ";" 
GHOST_kKeyEqual = "=" 
GHOST_kKeyA = "A" 
GHOST_kKeyB = "A" 
GHOST_kKeyC = "A" 
GHOST_kKeyD = "A" 
GHOST_kKeyE = "A" 
GHOST_kKeyF = "A" 
GHOST_kKeyG = "A" 
GHOST_kKeyH = "A" 
GHOST_kKeyI = "A" 
GHOST_kKeyJ = "A" 
GHOST_kKeyK = "A" 
GHOST_kKeyL = "A" 
GHOST_kKeyM = "A" 
GHOST_kKeyN = "A" 
GHOST_kKeyO = "A" 
GHOST_kKeyP = "A" 
GHOST_kKeyQ = "A" 
GHOST_kKeyR = "A" 
GHOST_kKeyS = "A" 
GHOST_kKeyT = "A" 
GHOST_kKeyU = "A" 
GHOST_kKeyV = "A" 
GHOST_kKeyW = "A" 
GHOST_kKeyX = "A" 
GHOST_kKeyY = "A" 
GHOST_kKeyZ = "A" 
GHOST_kKeyLeftBracket = "[" 
GHOST_kKeyRightBracket = "]" 
GHOST_kKeyBackslash = 92 
GHOST_kKeyAccentGrave = "`" 
GHOST_kKeyLeftShift = 256 
GHOST_kKeyRightShift = 257 
GHOST_kKeyLeftControl = 258 
GHOST_kKeyRightControl = 259 
GHOST_kKeyLeftAlt = 260 
GHOST_kKeyRightAlt = 261 
GHOST_kKeyOS = 262 
GHOST_kKeyGrLess = 263 
GHOST_kKeyCapsLock = 264 
GHOST_kKeyNumLock = 265 
GHOST_kKeyScrollLock = 266 
GHOST_kKeyLeftArrow = 267 
GHOST_kKeyRightArrow = 268 
GHOST_kKeyUpArrow = 269 
GHOST_kKeyDownArrow = 270 
GHOST_kKeyPrintScreen = 271 
GHOST_kKeyPause = 272 
GHOST_kKeyInsert = 273 
GHOST_kKeyDelete = 274 
GHOST_kKeyHome = 275 
GHOST_kKeyEnd = 276 
GHOST_kKeyUpPage = 277 
GHOST_kKeyDownPage = 278 
GHOST_kKeyNumpad0 = 279 
GHOST_kKeyNumpad1 = 280 
GHOST_kKeyNumpad2 = 281 
GHOST_kKeyNumpad3 = 282 
GHOST_kKeyNumpad4 = 283 
GHOST_kKeyNumpad5 = 284 
GHOST_kKeyNumpad6 = 285 
GHOST_kKeyNumpad7 = 286 
GHOST_kKeyNumpad8 = 287 
GHOST_kKeyNumpad9 = 288 
GHOST_kKeyNumpadPeriod = 289 
GHOST_kKeyNumpadEnter = 290 
GHOST_kKeyNumpadPlus = 291 
GHOST_kKeyNumpadMinus = 292 
GHOST_kKeyNumpadAsterisk = 293 
GHOST_kKeyNumpadSlash = 294 
GHOST_kKeyF1 = 295 
GHOST_kKeyF2 = 296 
GHOST_kKeyF3 = 297 
GHOST_kKeyF4 = 298 
GHOST_kKeyF5 = 299 
GHOST_kKeyF6 = 300 
GHOST_kKeyF7 = 301 
GHOST_kKeyF8 = 302 
GHOST_kKeyF9 = 303 
GHOST_kKeyF10 = 304 
GHOST_kKeyF11 = 305 
GHOST_kKeyF12 = 306 
GHOST_kKeyF13 = 307 
GHOST_kKeyF14 = 308 
GHOST_kKeyF15 = 309 
GHOST_kKeyF16 = 310 
GHOST_kKeyF17 = 311 
GHOST_kKeyF18 = 312 
GHOST_kKeyF19 = 313 
GHOST_kKeyF20 = 314 
GHOST_kKeyF21 = 315 
GHOST_kKeyF22 = 316 
GHOST_kKeyF23 = 317 
GHOST_kKeyF24 = 318 
GHOST_kKeyMediaPlay = 319 
GHOST_kKeyMediaStop = 320 
GHOST_kKeyMediaFirst = 321 
GHOST_kKeyMediaLast = 322 

GHOST_kGrabDisable = 0 
GHOST_kGrabNormal = 1 
GHOST_kGrabWrap = 2 
GHOST_kGrabHide = 3 

GHOST_kTrackpadEventUnknown = 0 
GHOST_kTrackpadEventScroll = 1 
GHOST_kTrackpadEventRotate = 2 
GHOST_kTrackpadEventSwipe = 3 
GHOST_kTrackpadEventMagnify = 4 

GHOST_kDragnDropTypeUnknown = 0 
GHOST_kDragnDropTypeFilenames = 1 
GHOST_kDragnDropTypeString = 2 
GHOST_kDragnDropTypeBitmap = 3 

GHOST_kNotStarted = 0 
GHOST_kStarting = 1 
GHOST_kInProgress = 2 
GHOST_kFinishing = 3 
GHOST_kFinished = 4 

GHOST_kPress = 0 
GHOST_kRelease = 1 

Action_id_root_ACTION = 17217 
Action_id_root_ARMATURE = 21057 
Action_id_root_BRUSH = 21058 
Action_id_root_CAMERA = 16707 
Action_id_root_CURVE = 21827 
Action_id_root_FONT = 18006 
Action_id_root_GREASEPENCIL = 17479 
Action_id_root_GROUP = 21063 
Action_id_root_IMAGE = 19785 
Action_id_root_KEY = 17739 
Action_id_root_LAMP = 16716 
Action_id_root_LIBRARY = 18764 
Action_id_root_LATTICE = 21580 
Action_id_root_MATERIAL = 16717 
Action_id_root_META = 16973 
Action_id_root_MESH = 17741 
Action_id_root_NODETREE = 21582 
Action_id_root_OBJECT = 16975 
Action_id_root_PARTICLE = 16720 
Action_id_root_SCENE = 17235 
Action_id_root_SCREEN = 21075 
Action_id_root_SPEAKER = 19283 
Action_id_root_SOUND = 20307 
Action_id_root_TEXT = 22612 
Action_id_root_TEXTURE = 17748 
Action_id_root_WORLD = 20311 
Action_id_root_WINDOWMANAGER = 19799 

ActionActuator_play_mode_PLAY = 0 
ActionActuator_play_mode_PINGPONG = 1 
ActionActuator_play_mode_FLIPPER = 2 
ActionActuator_play_mode_LOOPSTOP = 3 
ActionActuator_play_mode_LOOPEND = 4 
ActionActuator_play_mode_PROPERTY = 6 

ActionConstraint_transform_channel_LOCATION_X = 20 
ActionConstraint_transform_channel_LOCATION_Y = 21 
ActionConstraint_transform_channel_LOCATION_Z = 22 
ActionConstraint_transform_channel_ROTATION_X = 0 
ActionConstraint_transform_channel_ROTATION_Y = 1 
ActionConstraint_transform_channel_ROTATION_Z = 2 
ActionConstraint_transform_channel_SCALE_X = 10 
ActionConstraint_transform_channel_SCALE_Y = 11 
ActionConstraint_transform_channel_SCALE_Z = 12 

Actuator_type_ACTION = 15 
Actuator_type_ARMATURE = 23 
Actuator_type_CAMERA = 3 
Actuator_type_CONSTRAINT = 9 
Actuator_type_EDIT_OBJECT = 10 
Actuator_type_FILTER_2D = 19 
Actuator_type_GAME = 17 
Actuator_type_MESSAGE = 14 
Actuator_type_MOTION = 0 
Actuator_type_PARENT = 20 
Actuator_type_PROPERTY = 6 
Actuator_type_RANDOM = 13 
Actuator_type_SCENE = 11 
Actuator_type_SOUND = 5 
Actuator_type_STATE = 22 
Actuator_type_VISIBILITY = 18 

AnimData_action_blend_type_REPLACE = 0 
AnimData_action_blend_type_ADD = 1 
AnimData_action_blend_type_SUBTRACT = 2 
AnimData_action_blend_type_MULITPLY = 3 

AnimData_action_extrapolation_NOTHING = 2 
AnimData_action_extrapolation_HOLD = 0 
AnimData_action_extrapolation_HOLD_FORWARD = 1 

AnimVizMotionPaths_bake_location_HEADS = 2 
AnimVizMotionPaths_bake_location_TAILS = 0 

AnimVizMotionPaths_type_CURRENT_FRAME = 1 
AnimVizMotionPaths_type_RANGE = 0 

AnimVizOnionSkinning_type_NONE = 0 
AnimVizOnionSkinning_type_CURRENT_FRAME = 1 
AnimVizOnionSkinning_type_RANGE = 2 
AnimVizOnionSkinning_type_KEYS = 3 

Area_type_EMPTY = 0 
Area_type_VIEW_3D = 1 
Area_type_GRAPH_EDITOR = 2 
Area_type_OUTLINER = 3 
Area_type_PROPERTIES = 4 
Area_type_FILE_BROWSER = 5 
Area_type_IMAGE_EDITOR = 6 
Area_type_INFO = 7 
Area_type_SEQUENCE_EDITOR = 8 
Area_type_TEXT_EDITOR = 9 
Area_type_AUDIO_WINDOW = 11 
Area_type_DOPESHEET_EDITOR = 12 
Area_type_NLA_EDITOR = 13 
Area_type_SCRIPTS_WINDOW = 14 
Area_type_TIMELINE = 15 
Area_type_NODE_EDITOR = 16 
Area_type_LOGIC_EDITOR = 17 
Area_type_CONSOLE = 18 
Area_type_USER_PREFERENCES = 19 

AreaLamp_shadow_method_NOSHADOW = 0 
AreaLamp_shadow_method_RAY_SHADOW = 8192 

AreaLamp_shadow_ray_sample_method_ADAPTIVE_QMC = 1 
AreaLamp_shadow_ray_sample_method_CONSTANT_QMC = 2 
AreaLamp_shadow_ray_sample_method_CONSTANT_JITTERED = 0 

AreaLamp_shape_SQUARE = 0 
AreaLamp_shape_RECTANGLE = 1 

Armature_draw_type_OCTAHEDRAL = 0 
Armature_draw_type_STICK = 1 
Armature_draw_type_BBONE = 2 
Armature_draw_type_ENVELOPE = 3 
Armature_draw_type_WIRE = 4 

Armature_ghost_type_CURRENT_FRAME = 0 
Armature_ghost_type_RANGE = 1 
Armature_ghost_type_KEYS = 2 

Armature_pose_position_POSE = 0 
Armature_pose_position_REST = 1 

Armature_vert_deformer_BLENDER = 0 
Armature_vert_deformer_BGE_CPU = 1 

ArmatureActuator_mode_RUN = 0 
ArmatureActuator_mode_ENABLE = 1 
ArmatureActuator_mode_DISABLE = 2 
ArmatureActuator_mode_SETTARGET = 3 
ArmatureActuator_mode_SETWEIGHT = 4 

ArmatureSensor_test_type_STATECHG = 0 
ArmatureSensor_test_type_LINERRORBELOW = 1 
ArmatureSensor_test_type_LINERRORABOVE = 2 
ArmatureSensor_test_type_ROTERRORBELOW = 3 
ArmatureSensor_test_type_ROTERRORABOVE = 4 

ArrayModifier_fit_type_FIXED_COUNT = 0 
ArrayModifier_fit_type_FIT_LENGTH = 1 
ArrayModifier_fit_type_FIT_CURVE = 2 

BackgroundImage_view_axis_LEFT = 8 
BackgroundImage_view_axis_RIGHT = 16 
BackgroundImage_view_axis_BACK = 4 
BackgroundImage_view_axis_FRONT = 2 
BackgroundImage_view_axis_BOTTOM = 64 
BackgroundImage_view_axis_TOP = 32 
BackgroundImage_view_axis_ALL = 0 
BackgroundImage_view_axis_CAMERA = 256 

BevelModifier_edge_weight_method_AVERAGE = 0 
BevelModifier_edge_weight_method_SHARPEST = 128 
BevelModifier_edge_weight_method_LARGEST = 256 

BevelModifier_limit_method_NONE = 0 
BevelModifier_limit_method_ANGLE = 8 
BevelModifier_limit_method_WEIGHT = 16 

BezierSplinePoint_handle_left_type_FREE = 0 
BezierSplinePoint_handle_left_type_VECTOR = 2 
BezierSplinePoint_handle_left_type_ALIGNED = 3 
BezierSplinePoint_handle_left_type_AUTO = 1 

BezierSplinePoint_handle_right_type_FREE = 0 
BezierSplinePoint_handle_right_type_VECTOR = 2 
BezierSplinePoint_handle_right_type_ALIGNED = 3 
BezierSplinePoint_handle_right_type_AUTO = 1 

BlendTexture_use_flip_axis_HORIZONTAL = 0 
BlendTexture_use_flip_axis_VERTICAL = 2 

BlendTexture_progression_LINEAR = 0 
BlendTexture_progression_QUADRATIC = 1 
BlendTexture_progression_EASING = 2 
BlendTexture_progression_DIAGONAL = 3 
BlendTexture_progression_SPHERICAL = 4 
BlendTexture_progression_QUADRATIC_SPHERE = 5 
BlendTexture_progression_RADIAL = 6 

BoidRule_type_GOAL = 1 
BoidRule_type_AVOID = 2 
BoidRule_type_AVOID_COLLISION = 3 
BoidRule_type_SEPARATE = 4 
BoidRule_type_FLOCK = 5 
BoidRule_type_FOLLOW_LEADER = 6 
BoidRule_type_AVERAGE_SPEED = 7 
BoidRule_type_FIGHT = 8 

BoidState_ruleset_type_FUZZY = 0 
BoidState_ruleset_type_RANDOM = 1 
BoidState_ruleset_type_AVERAGE = 2 

BoneGroup_color_set_DEFAULT = 0 
BoneGroup_color_set_THEME01 = 1 
BoneGroup_color_set_THEME02 = 2 
BoneGroup_color_set_THEME03 = 3 
BoneGroup_color_set_THEME04 = 4 
BoneGroup_color_set_THEME05 = 5 
BoneGroup_color_set_THEME06 = 6 
BoneGroup_color_set_THEME07 = 7 
BoneGroup_color_set_THEME08 = 8 
BoneGroup_color_set_THEME09 = 9 
BoneGroup_color_set_THEME10 = 10 
BoneGroup_color_set_THEME11 = 11 
BoneGroup_color_set_THEME12 = 12 
BoneGroup_color_set_THEME13 = 13 
BoneGroup_color_set_THEME14 = 14 
BoneGroup_color_set_THEME15 = 15 
BoneGroup_color_set_THEME16 = 16 
BoneGroup_color_set_THEME17 = 17 
BoneGroup_color_set_THEME18 = 18 
BoneGroup_color_set_THEME19 = 19 
BoneGroup_color_set_THEME20 = 20 
BoneGroup_color_set_CUSTOM = -1 

BooleanModifier_operation_INTERSECT = 0 
BooleanModifier_operation_UNION = 1 
BooleanModifier_operation_DIFFERENCE = 2 

Brush_blend_MIX = 0 
Brush_blend_ADD = 1 
Brush_blend_SUB = 2 
Brush_blend_MUL = 3 
Brush_blend_LIGHTEN = 4 
Brush_blend_DARKEN = 5 
Brush_blend_ERASE_ALPHA = 6 
Brush_blend_ADD_ALPHA = 7 

Brush_direction_ADD = 0 
Brush_direction_SUBTRACT = 512 

Brush_image_tool_DRAW = 0 
Brush_image_tool_SOFTEN = 1 
Brush_image_tool_SMEAR = 2 
Brush_image_tool_CLONE = 3 

Brush_sculpt_plane_AREA = 0 
Brush_sculpt_plane_VIEW = 1 
Brush_sculpt_plane_X = 2 
Brush_sculpt_plane_Y = 3 
Brush_sculpt_plane_Z = 4 

Brush_sculpt_tool_BLOB = 17 
Brush_sculpt_tool_CLAY = 8 
Brush_sculpt_tool_CREASE = 16 
Brush_sculpt_tool_DRAW = 1 
Brush_sculpt_tool_FILL = 9 
Brush_sculpt_tool_FLATTEN = 7 
Brush_sculpt_tool_GRAB = 5 
Brush_sculpt_tool_INFLATE = 4 
Brush_sculpt_tool_LAYER = 6 
Brush_sculpt_tool_NUDGE = 11 
Brush_sculpt_tool_PINCH = 3 
Brush_sculpt_tool_ROTATE = 14 
Brush_sculpt_tool_SCRAPE = 10 
Brush_sculpt_tool_SMOOTH = 2 
Brush_sculpt_tool_SNAKE_HOOK = 13 
Brush_sculpt_tool_THUMB = 12 

Brush_stroke_method_DOTS = 0 
Brush_stroke_method_DRAG_DOT = 8388608 
Brush_stroke_method_SPACE = 1024 
Brush_stroke_method_ANCHORED = 256 
Brush_stroke_method_AIRBRUSH = 1 

Brush_texture_angle_source_random_USER = 0 
Brush_texture_angle_source_random_RAKE = 128 
Brush_texture_angle_source_random_RANDOM = 33554432 

Brush_texture_angle_source_no_random_USER = 0 
Brush_texture_angle_source_no_random_RAKE = 128 

Brush_vertex_tool_MIX = 0 
Brush_vertex_tool_ADD = 1 
Brush_vertex_tool_SUB = 2 
Brush_vertex_tool_MUL = 3 
Brush_vertex_tool_BLUR = 4 
Brush_vertex_tool_LIGHTEN = 5 
Brush_vertex_tool_DARKEN = 6 

BrushTextureSlot_map_mode_FIXED = 0 
BrushTextureSlot_map_mode_TILED = 1 
BrushTextureSlot_map_mode_3D = 2 

Camera_show_guide_CENTER = 1 
Camera_show_guide_CENTER_DIAGONAL = 2 
Camera_show_guide_THIRDS = 4 
Camera_show_guide_GOLDEN = 8 
Camera_show_guide_GOLDEN_TRIANGLE_A = 16 
Camera_show_guide_GOLDEN_TRIANGLE_B = 32 
Camera_show_guide_HARMONY_TRIANGLE_A = 64 
Camera_show_guide_HARMONY_TRIANGLE_B = 128 

Camera_lens_unit_MILLIMETERS = 0 
Camera_lens_unit_DEGREES = 32 

Camera_type_PERSP = 0 
Camera_type_ORTHO = 1 

CameraActuator_axis_X = 120 
CameraActuator_axis_Y = 121 

CastModifier_cast_type_SPHERE = 0 
CastModifier_cast_type_CYLINDER = 1 
CastModifier_cast_type_CUBOID = 2 

ClampToConstraint_main_axis_CLAMPTO_AUTO = 0 
ClampToConstraint_main_axis_CLAMPTO_X = 1 
ClampToConstraint_main_axis_CLAMPTO_Y = 2 
ClampToConstraint_main_axis_CLAMPTO_Z = 3 

CloudsTexture_cloud_type_GREYSCALE = 0 
CloudsTexture_cloud_type_COLOR = 1 

CloudsTexture_noise_basis_BLENDER_ORIGINAL = 0 
CloudsTexture_noise_basis_ORIGINAL_PERLIN = 1 
CloudsTexture_noise_basis_IMPROVED_PERLIN = 2 
CloudsTexture_noise_basis_VORONOI_F1 = 3 
CloudsTexture_noise_basis_VORONOI_F2 = 4 
CloudsTexture_noise_basis_VORONOI_F3 = 5 
CloudsTexture_noise_basis_VORONOI_F4 = 6 
CloudsTexture_noise_basis_VORONOI_F2_F1 = 7 
CloudsTexture_noise_basis_VORONOI_CRACKLE = 8 
CloudsTexture_noise_basis_CELL_NOISE = 14 

CloudsTexture_noise_type_SOFT_NOISE = 0 
CloudsTexture_noise_type_HARD_NOISE = 1 

ColorRamp_interpolation_EASE = 1 
ColorRamp_interpolation_CARDINAL = 3 
ColorRamp_interpolation_LINEAR = 0 
ColorRamp_interpolation_B_SPLINE = 2 
ColorRamp_interpolation_CONSTANT = 4 

CompositorNode_type_VIEWER = 201 
CompositorNode_type_RGB = 202 
CompositorNode_type_VALUE = 203 
CompositorNode_type_MIX_RGB = 204 
CompositorNode_type_VALTORGB = 205 
CompositorNode_type_RGBTOBW = 206 
CompositorNode_type_NORMAL = 207 
CompositorNode_type_CURVE_VEC = 208 
CompositorNode_type_CURVE_RGB = 209 
CompositorNode_type_ALPHAOVER = 210 
CompositorNode_type_BLUR = 211 
CompositorNode_type_FILTER = 212 
CompositorNode_type_MAP_VALUE = 213 
CompositorNode_type_TIME = 214 
CompositorNode_type_VECBLUR = 215 
CompositorNode_type_SEPRGBA = 216 
CompositorNode_type_SEPHSVA = 217 
CompositorNode_type_SETALPHA = 218 
CompositorNode_type_HUE_SAT = 219 
CompositorNode_type_IMAGE = 220 
CompositorNode_type_R_LAYERS = 221 
CompositorNode_type_COMPOSITE = 222 
CompositorNode_type_OUTPUT_FILE = 223 
CompositorNode_type_TEXTURE = 224 
CompositorNode_type_TRANSLATE = 225 
CompositorNode_type_ZCOMBINE = 226 
CompositorNode_type_COMBRGBA = 227 
CompositorNode_type_DILATEERODE = 228 
CompositorNode_type_ROTATE = 229 
CompositorNode_type_SCALE = 230 
CompositorNode_type_SEPYCCA = 231 
CompositorNode_type_COMBYCCA = 232 
CompositorNode_type_SEPYUVA = 233 
CompositorNode_type_COMBYUVA = 234 
CompositorNode_type_DIFF_MATTE = 235 
CompositorNode_type_COLOR_SPILL = 236 
CompositorNode_type_CHROMA_MATTE = 237 
CompositorNode_type_CHANNEL_MATTE = 238 
CompositorNode_type_FLIP = 239 
CompositorNode_type_SPLITVIEWER = 240 
CompositorNode_type_MAP_UV = 242 
CompositorNode_type_ID_MASK = 243 
CompositorNode_type_DEFOCUS = 244 
CompositorNode_type_DISPLACE = 245 
CompositorNode_type_COMBHSVA = 246 
CompositorNode_type_MATH = 247 
CompositorNode_type_LUMA_MATTE = 248 
CompositorNode_type_BRIGHTCONTRAST = 249 
CompositorNode_type_GAMMA = 250 
CompositorNode_type_INVERT = 251 
CompositorNode_type_NORMALIZE = 252 
CompositorNode_type_CROP = 253 
CompositorNode_type_DBLUR = 254 
CompositorNode_type_BILATERALBLUR = 255 
CompositorNode_type_PREMULKEY = 256 
CompositorNode_type_DISTANCE_MATTE = 257 
CompositorNode_type_LEVELS = 258 
CompositorNode_type_COLOR_MATTE = 259 
CompositorNode_type_COLORBALANCE = 260 
CompositorNode_type_HUECORRECT = 261 
CompositorNode_type_GLARE = 301 
CompositorNode_type_TONEMAP = 302 
CompositorNode_type_LENSDIST = 303 
CompositorNode_type_SCRIPT = 123 
CompositorNode_type_GROUP = 2 

CompositorNodeBlur_aspect_correction_NONE = 0 
CompositorNodeBlur_aspect_correction_Y = 1 
CompositorNodeBlur_aspect_correction_X = 2 

CompositorNodeBlur_filter_type_FLAT = 0 
CompositorNodeBlur_filter_type_TENT = 1 
CompositorNodeBlur_filter_type_QUAD = 2 
CompositorNodeBlur_filter_type_CUBIC = 3 
CompositorNodeBlur_filter_type_GAUSS = 5 
CompositorNodeBlur_filter_type_FAST_GAUSS = 7 
CompositorNodeBlur_filter_type_CATROM = 4 
CompositorNodeBlur_filter_type_MITCH = 6 

CompositorNodeChannelMatte_limit_method_SINGLE = 0 
CompositorNodeChannelMatte_limit_method_MAX = 1 

CompositorNodeChannelMatte_matte_channel_R = 1 
CompositorNodeChannelMatte_matte_channel_G = 2 
CompositorNodeChannelMatte_matte_channel_B = 3 

CompositorNodeChannelMatte_color_space_RGB = 1 
CompositorNodeChannelMatte_color_space_HSV = 2 
CompositorNodeChannelMatte_color_space_YUV = 3 
CompositorNodeChannelMatte_color_space_YCC = 4 

CompositorNodeChannelMatte_limit_channel_R = 1 
CompositorNodeChannelMatte_limit_channel_G = 2 
CompositorNodeChannelMatte_limit_channel_B = 3 

CompositorNodeColorBalance_correction_method_LIFT_GAMMA_GAIN = 0 
CompositorNodeColorBalance_correction_method_OFFSET_POWER_SLOPE = 1 

CompositorNodeColorSpill_limit_method_SIMPLE = 0 
CompositorNodeColorSpill_limit_method_AVERAGE = 1 

CompositorNodeColorSpill_channel_R = 1 
CompositorNodeColorSpill_channel_G = 2 
CompositorNodeColorSpill_channel_B = 3 

CompositorNodeColorSpill_limit_channel_R = 1 
CompositorNodeColorSpill_limit_channel_G = 2 
CompositorNodeColorSpill_limit_channel_B = 3 

CompositorNodeCombYCCA_mode_ITUBT601 = 0 
CompositorNodeCombYCCA_mode_ITUBT709 = 1 
CompositorNodeCombYCCA_mode_JFIF = 2 

CompositorNodeDefocus_bokeh_OCTAGON = 8 
CompositorNodeDefocus_bokeh_HEPTAGON = 7 
CompositorNodeDefocus_bokeh_HEXAGON = 6 
CompositorNodeDefocus_bokeh_PENTAGON = 5 
CompositorNodeDefocus_bokeh_SQUARE = 4 
CompositorNodeDefocus_bokeh_TRIANGLE = 3 
CompositorNodeDefocus_bokeh_CIRCLE = 0 

CompositorNodeFilter_filter_type_SOFTEN = 0 
CompositorNodeFilter_filter_type_SHARPEN = 1 
CompositorNodeFilter_filter_type_LAPLACE = 2 
CompositorNodeFilter_filter_type_SOBEL = 3 
CompositorNodeFilter_filter_type_PREWITT = 4 
CompositorNodeFilter_filter_type_KIRSCH = 5 
CompositorNodeFilter_filter_type_SHADOW = 6 

CompositorNodeFlip_axis_X = 0 
CompositorNodeFlip_axis_Y = 1 
CompositorNodeFlip_axis_XY = 2 

CompositorNodeGlare_glare_type_GHOSTS = 3 
CompositorNodeGlare_glare_type_STREAKS = 2 
CompositorNodeGlare_glare_type_FOG_GLOW = 1 
CompositorNodeGlare_glare_type_SIMPLE_STAR = 0 

CompositorNodeGlare_quality_HIGH = 0 
CompositorNodeGlare_quality_MEDIUM = 1 
CompositorNodeGlare_quality_LOW = 2 

CompositorNodeImage_layer_PLACEHOLDER = 0 

CompositorNodeLevels_channel_COMBINED_RGB = 1 
CompositorNodeLevels_channel_RED = 2 
CompositorNodeLevels_channel_GREEN = 3 
CompositorNodeLevels_channel_BLUE = 4 
CompositorNodeLevels_channel_LUMINANCE = 5 

CompositorNodeMath_operation_ADD = 0 
CompositorNodeMath_operation_SUBTRACT = 1 
CompositorNodeMath_operation_MULTIPLY = 2 
CompositorNodeMath_operation_DIVIDE = 3 
CompositorNodeMath_operation_SINE = 4 
CompositorNodeMath_operation_COSINE = 5 
CompositorNodeMath_operation_TANGENT = 6 
CompositorNodeMath_operation_ARCSINE = 7 
CompositorNodeMath_operation_ARCCOSINE = 8 
CompositorNodeMath_operation_ARCTANGENT = 9 
CompositorNodeMath_operation_POWER = 10 
CompositorNodeMath_operation_LOGARITHM = 11 
CompositorNodeMath_operation_MINIMUM = 12 
CompositorNodeMath_operation_MAXIMUM = 13 
CompositorNodeMath_operation_ROUND = 14 
CompositorNodeMath_operation_LESS_THAN = 15 
CompositorNodeMath_operation_GREATER_THAN = 16 

CompositorNodeMixRGB_blend_type_MIX = 0 
CompositorNodeMixRGB_blend_type_ADD = 1 
CompositorNodeMixRGB_blend_type_MULTIPLY = 2 
CompositorNodeMixRGB_blend_type_SUBTRACT = 3 
CompositorNodeMixRGB_blend_type_SCREEN = 4 
CompositorNodeMixRGB_blend_type_DIVIDE = 5 
CompositorNodeMixRGB_blend_type_DIFFERENCE = 6 
CompositorNodeMixRGB_blend_type_DARKEN = 7 
CompositorNodeMixRGB_blend_type_LIGHTEN = 8 
CompositorNodeMixRGB_blend_type_OVERLAY = 9 
CompositorNodeMixRGB_blend_type_DODGE = 10 
CompositorNodeMixRGB_blend_type_BURN = 11 
CompositorNodeMixRGB_blend_type_HUE = 12 
CompositorNodeMixRGB_blend_type_SATURATION = 13 
CompositorNodeMixRGB_blend_type_VALUE = 14 
CompositorNodeMixRGB_blend_type_COLOR = 15 
CompositorNodeMixRGB_blend_type_SOFT_LIGHT = 16 
CompositorNodeMixRGB_blend_type_LINEAR_LIGHT = 17 

CompositorNodeOutputFile_exr_codec_NONE = 0 
CompositorNodeOutputFile_exr_codec_PXR24 = 1 
CompositorNodeOutputFile_exr_codec_ZIP = 2 
CompositorNodeOutputFile_exr_codec_PIZ = 3 
CompositorNodeOutputFile_exr_codec_RLE = 4 

CompositorNodeOutputFile_image_type_TARGA = 0 
CompositorNodeOutputFile_image_type_RAW_TARGA = 14 
CompositorNodeOutputFile_image_type_PNG = 17 
CompositorNodeOutputFile_image_type_DDS = 29 
CompositorNodeOutputFile_image_type_BMP = 20 
CompositorNodeOutputFile_image_type_JPEG = 4 
CompositorNodeOutputFile_image_type_IRIS = 1 
CompositorNodeOutputFile_image_type_RADIANCE_HDR = 21 
CompositorNodeOutputFile_image_type_CINEON = 26 
CompositorNodeOutputFile_image_type_DPX = 27 
CompositorNodeOutputFile_image_type_OPENEXR = 23 

CompositorNodePremulKey_mapping_KEY_TO_PREMUL = 0 
CompositorNodePremulKey_mapping_PREMUL_TO_KEY = 1 

CompositorNodeRLayers_layer_PLACEHOLDER = 0 

CompositorNodeRotate_filter_type_NEAREST = 0 
CompositorNodeRotate_filter_type_BILINEAR = 1 
CompositorNodeRotate_filter_type_BICUBIC = 2 

CompositorNodeScale_space_RELATIVE = 0 
CompositorNodeScale_space_ABSOLUTE = 1 
CompositorNodeScale_space_SCENE_SIZE = 2 
CompositorNodeScale_space_RENDER_SIZE = 3 

CompositorNodeSepYCCA_mode_ITUBT601 = 0 
CompositorNodeSepYCCA_mode_ITUBT709 = 1 
CompositorNodeSepYCCA_mode_JFIF = 2 

CompositorNodeSplitViewer_axis_X = 0 
CompositorNodeSplitViewer_axis_Y = 1 

CompositorNodeTonemap_tonemap_type_RD_PHOTORECEPTOR = 1 
CompositorNodeTonemap_tonemap_type_RH_SIMPLE = 0 

Constraint_owner_space_WORLD = 0 
Constraint_owner_space_POSE = 2 
Constraint_owner_space_LOCAL_WITH_PARENT = 3 
Constraint_owner_space_LOCAL = 1 

Constraint_target_space_WORLD = 0 
Constraint_target_space_POSE = 2 
Constraint_target_space_LOCAL_WITH_PARENT = 3 
Constraint_target_space_LOCAL = 1 

Constraint_type_COPY_LOCATION = 9 
Constraint_type_COPY_ROTATION = 8 
Constraint_type_COPY_SCALE = 10 
Constraint_type_COPY_TRANSFORMS = 23 
Constraint_type_LIMIT_DISTANCE = 14 
Constraint_type_LIMIT_LOCATION = 6 
Constraint_type_LIMIT_ROTATION = 5 
Constraint_type_LIMIT_SCALE = 7 
Constraint_type_MAINTAIN_VOLUME = 24 
Constraint_type_TRANSFORM = 19 
Constraint_type_CLAMP_TO = 18 
Constraint_type_DAMPED_TRACK = 21 
Constraint_type_IK = 3 
Constraint_type_LOCKED_TRACK = 13 
Constraint_type_SPLINE_IK = 22 
Constraint_type_STRETCH_TO = 15 
Constraint_type_TRACK_TO = 2 
Constraint_type_ACTION = 12 
Constraint_type_CHILD_OF = 1 
Constraint_type_FLOOR = 16 
Constraint_type_FOLLOW_PATH = 4 
Constraint_type_PIVOT = 25 
Constraint_type_RIGID_BODY_JOINT = 17 
Constraint_type_SCRIPT = 11 
Constraint_type_SHRINKWRAP = 20 

ConstraintActuator_mode_LOC = 0 
ConstraintActuator_mode_DIST = 1 
ConstraintActuator_mode_ORI = 2 
ConstraintActuator_mode_FH = 3 

ConstraintActuator_direction_NONE = 0 
ConstraintActuator_direction_DIRPX = 1 
ConstraintActuator_direction_DIRPY = 2 
ConstraintActuator_direction_DIRPZ = 4 
ConstraintActuator_direction_DIRNX = 8 
ConstraintActuator_direction_DIRNY = 16 
ConstraintActuator_direction_DIRNZ = 32 

ConstraintActuator_direction_axis_NONE = 0 
ConstraintActuator_direction_axis_DIRPX = 1 
ConstraintActuator_direction_axis_DIRPY = 2 
ConstraintActuator_direction_axis_DIRPZ = 4 
ConstraintActuator_direction_axis_DIRNX = 8 
ConstraintActuator_direction_axis_DIRNY = 16 
ConstraintActuator_direction_axis_DIRNZ = 32 

ConstraintActuator_direction_axis_pos_NONE = 0 
ConstraintActuator_direction_axis_pos_DIRPX = 1 
ConstraintActuator_direction_axis_pos_DIRPY = 2 
ConstraintActuator_direction_axis_pos_DIRPZ = 4 

ConstraintActuator_limit_NONE = 0 
ConstraintActuator_limit_LOCX = 1 
ConstraintActuator_limit_LOCY = 2 
ConstraintActuator_limit_LOCZ = 4 

Context_mode_EDIT_MESH = 0 
Context_mode_EDIT_CURVE = 1 
Context_mode_EDIT_SURFACE = 2 
Context_mode_EDIT_TEXT = 3 
Context_mode_EDIT_ARMATURE = 4 
Context_mode_EDIT_METABALL = 5 
Context_mode_EDIT_LATTICE = 6 
Context_mode_POSE = 7 
Context_mode_SCULPT = 8 
Context_mode_PAINT_WEIGHT = 9 
Context_mode_PAINT_VERTEX = 10 
Context_mode_PAINT_TEXTURE = 11 
Context_mode_PARTICLE = 12 
Context_mode_OBJECT = 13 

Controller_type_LOGIC_AND = 0 
Controller_type_LOGIC_OR = 1 
Controller_type_LOGIC_NAND = 4 
Controller_type_LOGIC_NOR = 5 
Controller_type_LOGIC_XOR = 6 
Controller_type_LOGIC_XNOR = 7 
Controller_type_EXPRESSION = 2 
Controller_type_PYTHON = 3 

Curve_dimensions_2D = 0 
Curve_dimensions_3D = 1 

Curve_twist_mode_Z_UP = 0 
Curve_twist_mode_MINIMUM = 3 
Curve_twist_mode_TANGENT = 4 

CurveMap_extend_HORIZONTAL = 0 
CurveMap_extend_EXTRAPOLATED = 1 

CurveMapPoint_handle_type_AUTO = 0 
CurveMapPoint_handle_type_VECTOR = 2 

CurveModifier_deform_axis_POS_X = 1 
CurveModifier_deform_axis_POS_Y = 2 
CurveModifier_deform_axis_POS_Z = 3 
CurveModifier_deform_axis_NEG_X = 4 
CurveModifier_deform_axis_NEG_Y = 5 
CurveModifier_deform_axis_NEG_Z = 6 

DampedTrackConstraint_track_axis_TRACK_X = 0 
DampedTrackConstraint_track_axis_TRACK_Y = 1 
DampedTrackConstraint_track_axis_TRACK_Z = 2 
DampedTrackConstraint_track_axis_TRACK_NEGATIVE_X = 3 
DampedTrackConstraint_track_axis_TRACK_NEGATIVE_Y = 4 
DampedTrackConstraint_track_axis_TRACK_NEGATIVE_Z = 5 

DisplaceModifier_direction_X = 0 
DisplaceModifier_direction_Y = 1 
DisplaceModifier_direction_Z = 2 
DisplaceModifier_direction_NORMAL = 3 
DisplaceModifier_direction_RGB_TO_XYZ = 4 

DisplaceModifier_texture_coords_LOCAL = 0 
DisplaceModifier_texture_coords_GLOBAL = 1 
DisplaceModifier_texture_coords_OBJECT = 2 
DisplaceModifier_texture_coords_UV = 3 

DistortedNoiseTexture_noise_basis_BLENDER_ORIGINAL = 0 
DistortedNoiseTexture_noise_basis_ORIGINAL_PERLIN = 1 
DistortedNoiseTexture_noise_basis_IMPROVED_PERLIN = 2 
DistortedNoiseTexture_noise_basis_VORONOI_F1 = 3 
DistortedNoiseTexture_noise_basis_VORONOI_F2 = 4 
DistortedNoiseTexture_noise_basis_VORONOI_F3 = 5 
DistortedNoiseTexture_noise_basis_VORONOI_F4 = 6 
DistortedNoiseTexture_noise_basis_VORONOI_F2_F1 = 7 
DistortedNoiseTexture_noise_basis_VORONOI_CRACKLE = 8 
DistortedNoiseTexture_noise_basis_CELL_NOISE = 14 

DistortedNoiseTexture_noise_distortion_BLENDER_ORIGINAL = 0 
DistortedNoiseTexture_noise_distortion_ORIGINAL_PERLIN = 1 
DistortedNoiseTexture_noise_distortion_IMPROVED_PERLIN = 2 
DistortedNoiseTexture_noise_distortion_VORONOI_F1 = 3 
DistortedNoiseTexture_noise_distortion_VORONOI_F2 = 4 
DistortedNoiseTexture_noise_distortion_VORONOI_F3 = 5 
DistortedNoiseTexture_noise_distortion_VORONOI_F4 = 6 
DistortedNoiseTexture_noise_distortion_VORONOI_F2_F1 = 7 
DistortedNoiseTexture_noise_distortion_VORONOI_CRACKLE = 8 
DistortedNoiseTexture_noise_distortion_CELL_NOISE = 14 

DomainFluidSettings_render_display_mode_GEOMETRY = 1 
DomainFluidSettings_render_display_mode_PREVIEW = 2 
DomainFluidSettings_render_display_mode_FINAL = 3 

DomainFluidSettings_slip_type_NOSLIP = 512 
DomainFluidSettings_slip_type_PARTIALSLIP = 1024 
DomainFluidSettings_slip_type_FREESLIP = 2048 

DomainFluidSettings_viewport_display_mode_GEOMETRY = 1 
DomainFluidSettings_viewport_display_mode_PREVIEW = 2 
DomainFluidSettings_viewport_display_mode_FINAL = 3 

DomainFluidSettings_viscosity_preset_MANUAL = 1 
DomainFluidSettings_viscosity_preset_WATER = 2 
DomainFluidSettings_viscosity_preset_OIL = 3 
DomainFluidSettings_viscosity_preset_HONEY = 4 

Driver_type_AVERAGE = 0 
Driver_type_SUM = 2 
Driver_type_SCRIPTED = 1 
Driver_type_MIN = 3 
Driver_type_MAX = 4 

DriverTarget_id_type_ACTION = 17217 
DriverTarget_id_type_ARMATURE = 21057 
DriverTarget_id_type_BRUSH = 21058 
DriverTarget_id_type_CAMERA = 16707 
DriverTarget_id_type_CURVE = 21827 
DriverTarget_id_type_FONT = 18006 
DriverTarget_id_type_GREASEPENCIL = 17479 
DriverTarget_id_type_GROUP = 21063 
DriverTarget_id_type_IMAGE = 19785 
DriverTarget_id_type_KEY = 17739 
DriverTarget_id_type_LAMP = 16716 
DriverTarget_id_type_LIBRARY = 18764 
DriverTarget_id_type_LATTICE = 21580 
DriverTarget_id_type_MATERIAL = 16717 
DriverTarget_id_type_META = 16973 
DriverTarget_id_type_MESH = 17741 
DriverTarget_id_type_NODETREE = 21582 
DriverTarget_id_type_OBJECT = 16975 
DriverTarget_id_type_PARTICLE = 16720 
DriverTarget_id_type_SCENE = 17235 
DriverTarget_id_type_SCREEN = 21075 
DriverTarget_id_type_SPEAKER = 19283 
DriverTarget_id_type_SOUND = 20307 
DriverTarget_id_type_TEXT = 22612 
DriverTarget_id_type_TEXTURE = 17748 
DriverTarget_id_type_WORLD = 20311 
DriverTarget_id_type_WINDOWMANAGER = 19799 

DriverTarget_transform_space_WORLD_SPACE = 0 
DriverTarget_transform_space_TRANSFORM_SPACE = 4 
DriverTarget_transform_space_LOCAL_SPACE = 12 

DriverTarget_transform_type_LOC_X = 0 
DriverTarget_transform_type_LOC_Y = 1 
DriverTarget_transform_type_LOC_Z = 2 
DriverTarget_transform_type_ROT_X = 3 
DriverTarget_transform_type_ROT_Y = 4 
DriverTarget_transform_type_ROT_Z = 5 
DriverTarget_transform_type_SCALE_X = 6 
DriverTarget_transform_type_SCALE_Y = 7 
DriverTarget_transform_type_SCALE_Z = 8 

DriverVariable_type_SINGLE_PROP = 0 
DriverVariable_type_TRANSFORMS = 3 
DriverVariable_type_ROTATION_DIFF = 1 
DriverVariable_type_LOC_DIFF = 2 

EditObjectActuator_dynamic_operation_RESTOREDYN = 0 
EditObjectActuator_dynamic_operation_SUSPENDDYN = 1 
EditObjectActuator_dynamic_operation_ENABLERIGIDBODY = 2 
EditObjectActuator_dynamic_operation_DISABLERIGIDBODY = 3 
EditObjectActuator_dynamic_operation_SETMASS = 4 

EditObjectActuator_mode_ADDOBJECT = 0 
EditObjectActuator_mode_ENDOBJECT = 1 
EditObjectActuator_mode_REPLACEMESH = 2 
EditObjectActuator_mode_TRACKTO = 3 
EditObjectActuator_mode_DYNAMICS = 4 

EnumProperty_default_DUMMY = 0 

EnumProperty_default_flag_DUMMY = 0 

EnvironmentMap_mapping_CUBE = 0 
EnvironmentMap_mapping_PLANE = 1 

EnvironmentMap_source_STATIC = 0 
EnvironmentMap_source_ANIMATED = 1 
EnvironmentMap_source_IMAGE_FILE = 2 

EnvironmentMapTexture_filter_type_BOX = 0 
EnvironmentMapTexture_filter_type_EWA = 1 
EnvironmentMapTexture_filter_type_FELINE = 2 
EnvironmentMapTexture_filter_type_AREA = 3 

Event_type_NONE = 0 
Event_type_LEFTMOUSE = 1 
Event_type_MIDDLEMOUSE = 2 
Event_type_RIGHTMOUSE = 3 
Event_type_BUTTON4MOUSE = 7 
Event_type_BUTTON5MOUSE = 8 
Event_type_ACTIONMOUSE = 5 
Event_type_SELECTMOUSE = 6 
Event_type_MOUSEMOVE = 4 
Event_type_INBETWEEN_MOUSEMOVE = 17 
Event_type_TRACKPADPAN = 14 
Event_type_TRACKPADZOOM = 15 
Event_type_MOUSEROTATE = 16 
Event_type_WHEELUPMOUSE = 10 
Event_type_WHEELDOWNMOUSE = 11 
Event_type_WHEELINMOUSE = 12 
Event_type_WHEELOUTMOUSE = 13 
Event_type_EVT_TWEAK_L = 20482 
Event_type_EVT_TWEAK_M = 20483 
Event_type_EVT_TWEAK_R = 20484 
Event_type_EVT_TWEAK_A = 20485 
Event_type_EVT_TWEAK_S = 20486 
Event_type_A = 97 
Event_type_B = 98 
Event_type_C = 99 
Event_type_D = 100 
Event_type_E = 101 
Event_type_F = 102 
Event_type_G = 103 
Event_type_H = 104 
Event_type_I = 105 
Event_type_J = 106 
Event_type_K = 107 
Event_type_L = 108 
Event_type_M = 109 
Event_type_N = 110 
Event_type_O = 111 
Event_type_P = 112 
Event_type_Q = 113 
Event_type_R = 114 
Event_type_S = 115 
Event_type_T = 116 
Event_type_U = 117 
Event_type_V = 118 
Event_type_W = 119 
Event_type_X = 120 
Event_type_Y = 121 
Event_type_Z = 122 
Event_type_ZERO = 48 
Event_type_ONE = 49 
Event_type_TWO = 50 
Event_type_THREE = 51 
Event_type_FOUR = 52 
Event_type_FIVE = 53 
Event_type_SIX = 54 
Event_type_SEVEN = 55 
Event_type_EIGHT = 56 
Event_type_NINE = 57 
Event_type_LEFT_CTRL = 212 
Event_type_LEFT_ALT = 213 
Event_type_LEFT_SHIFT = 217 
Event_type_RIGHT_ALT = 214 
Event_type_RIGHT_CTRL = 215 
Event_type_RIGHT_SHIFT = 216 
Event_type_OSKEY = 172 
Event_type_GRLESS = 173 
Event_type_ESC = 218 
Event_type_TAB = 219 
Event_type_RET = 220 
Event_type_SPACE = 221 
Event_type_LINE_FEED = 222 
Event_type_BACK_SPACE = 223 
Event_type_DEL = 224 
Event_type_SEMI_COLON = 225 
Event_type_PERIOD = 226 
Event_type_COMMA = 227 
Event_type_QUOTE = 228 
Event_type_ACCENT_GRAVE = 229 
Event_type_MINUS = 230 
Event_type_SLASH = 232 
Event_type_BACK_SLASH = 233 
Event_type_EQUAL = 234 
Event_type_LEFT_BRACKET = 235 
Event_type_RIGHT_BRACKET = 236 
Event_type_LEFT_ARROW = 137 
Event_type_DOWN_ARROW = 138 
Event_type_RIGHT_ARROW = 139 
Event_type_UP_ARROW = 140 
Event_type_NUMPAD_2 = 152 
Event_type_NUMPAD_4 = 154 
Event_type_NUMPAD_6 = 156 
Event_type_NUMPAD_8 = 158 
Event_type_NUMPAD_1 = 151 
Event_type_NUMPAD_3 = 153 
Event_type_NUMPAD_5 = 155 
Event_type_NUMPAD_7 = 157 
Event_type_NUMPAD_9 = 159 
Event_type_NUMPAD_PERIOD = 199 
Event_type_NUMPAD_SLASH = 161 
Event_type_NUMPAD_ASTERIX = 160 
Event_type_NUMPAD_0 = 150 
Event_type_NUMPAD_MINUS = 162 
Event_type_NUMPAD_ENTER = 163 
Event_type_NUMPAD_PLUS = 164 
Event_type_F1 = 300 
Event_type_F2 = 301 
Event_type_F3 = 302 
Event_type_F4 = 303 
Event_type_F5 = 304 
Event_type_F6 = 305 
Event_type_F7 = 306 
Event_type_F8 = 307 
Event_type_F9 = 308 
Event_type_F10 = 309 
Event_type_F11 = 310 
Event_type_F12 = 311 
Event_type_F13 = 312 
Event_type_F14 = 313 
Event_type_F15 = 314 
Event_type_F16 = 315 
Event_type_F17 = 316 
Event_type_F18 = 317 
Event_type_F19 = 318 
Event_type_PAUSE = 165 
Event_type_INSERT = 166 
Event_type_HOME = 167 
Event_type_PAGE_UP = 168 
Event_type_PAGE_DOWN = 169 
Event_type_END = 170 
Event_type_MEDIA_PLAY = 174 
Event_type_MEDIA_STOP = 175 
Event_type_MEDIA_FIRST = 176 
Event_type_MEDIA_LAST = 177 
Event_type_WINDOW_DEACTIVATE = 260 
Event_type_TIMER = 272 
Event_type_TIMER0 = 273 
Event_type_TIMER1 = 274 
Event_type_TIMER2 = 275 
Event_type_NDOF_BUTTON_MENU = 401 
Event_type_NDOF_BUTTON_FIT = 402 
Event_type_NDOF_BUTTON_TOP = 403 
Event_type_NDOF_BUTTON_BOTTOM = 404 
Event_type_NDOF_BUTTON_LEFT = 405 
Event_type_NDOF_BUTTON_RIGHT = 406 
Event_type_NDOF_BUTTON_FRONT = 407 
Event_type_NDOF_BUTTON_BACK = 408 
Event_type_NDOF_BUTTON_ISO1 = 409 
Event_type_NDOF_BUTTON_ISO2 = 410 
Event_type_NDOF_BUTTON_ROLL_CW = 411 
Event_type_NDOF_BUTTON_ROLL_CCW = 412 
Event_type_NDOF_BUTTON_SPIN_CW = 413 
Event_type_NDOF_BUTTON_SPIN_CCW = 414 
Event_type_NDOF_BUTTON_TILT_CW = 415 
Event_type_NDOF_BUTTON_TILT_CCW = 416 
Event_type_NDOF_BUTTON_ROTATE = 417 
Event_type_NDOF_BUTTON_PANZOOM = 418 
Event_type_NDOF_BUTTON_DOMINANT = 419 
Event_type_NDOF_BUTTON_PLUS = 420 
Event_type_NDOF_BUTTON_MINUS = 421 
Event_type_NDOF_BUTTON_1 = 422 
Event_type_NDOF_BUTTON_2 = 423 
Event_type_NDOF_BUTTON_3 = 424 
Event_type_NDOF_BUTTON_4 = 425 
Event_type_NDOF_BUTTON_5 = 426 
Event_type_NDOF_BUTTON_6 = 427 
Event_type_NDOF_BUTTON_7 = 428 
Event_type_NDOF_BUTTON_8 = 429 
Event_type_NDOF_BUTTON_9 = 430 
Event_type_NDOF_BUTTON_10 = 431 

Event_value_ANY = -1 
Event_value_NOTHING = 0 
Event_value_PRESS = 1 
Event_value_RELEASE = 2 
Event_value_CLICK = 3 
Event_value_DOUBLE_CLICK = 4 

FCurve_color_mode_AUTO_RAINBOW = 0 
FCurve_color_mode_AUTO_RGB = 1 
FCurve_color_mode_CUSTOM = 2 

FCurve_extrapolation_CONSTANT = 0 
FCurve_extrapolation_LINEAR = 1 

FModifier_type_NULL = 0 
FModifier_type_GENERATOR = 1 
FModifier_type_FNGENERATOR = 2 
FModifier_type_ENVELOPE = 3 
FModifier_type_CYCLES = 4 
FModifier_type_NOISE = 5 
FModifier_type_FILTER = 6 
FModifier_type_LIMITS = 8 
FModifier_type_STEPPED = 9 

FModifierCycles_mode_after_NONE = 0 
FModifierCycles_mode_after_REPEAT = 1 
FModifierCycles_mode_after_REPEAT_OFFSET = 2 
FModifierCycles_mode_after_MIRROR = 3 

FModifierCycles_mode_before_NONE = 0 
FModifierCycles_mode_before_REPEAT = 1 
FModifierCycles_mode_before_REPEAT_OFFSET = 2 
FModifierCycles_mode_before_MIRROR = 3 

FModifierFunctionGenerator_function_type_SIN = 0 
FModifierFunctionGenerator_function_type_COS = 1 
FModifierFunctionGenerator_function_type_TAN = 2 
FModifierFunctionGenerator_function_type_SQRT = 3 
FModifierFunctionGenerator_function_type_LN = 4 
FModifierFunctionGenerator_function_type_SINC = 5 

FModifierGenerator_mode_POLYNOMIAL = 0 
FModifierGenerator_mode_POLYNOMIAL_FACTORISED = 1 

FModifierNoise_blend_type_REPLACE = 0 
FModifierNoise_blend_type_ADD = 1 
FModifierNoise_blend_type_SUBTRACT = 2 
FModifierNoise_blend_type_MULTIPLY = 3 

FieldSettings_guide_kink_axis_X = 0 
FieldSettings_guide_kink_axis_Y = 1 
FieldSettings_guide_kink_axis_Z = 2 

FieldSettings_falloff_type_SPHERE = 0 
FieldSettings_falloff_type_TUBE = 1 
FieldSettings_falloff_type_CONE = 2 

FieldSettings_guide_kink_type_NONE = 0 
FieldSettings_guide_kink_type_CURL = 1 
FieldSettings_guide_kink_type_RADIAL = 2 
FieldSettings_guide_kink_type_WAVE = 3 
FieldSettings_guide_kink_type_BRAID = 4 
FieldSettings_guide_kink_type_ROTATION = 5 
FieldSettings_guide_kink_type_ROLL = 6 

FieldSettings_shape_POINT = 0 
FieldSettings_shape_PLANE = 1 
FieldSettings_shape_SURFACE = 2 
FieldSettings_shape_POINTS = 3 

FieldSettings_texture_mode_RGB = 0 
FieldSettings_texture_mode_GRADIENT = 1 
FieldSettings_texture_mode_CURL = 2 

FieldSettings_type_NONE = 0 
FieldSettings_type_FORCE = 1 
FieldSettings_type_WIND = 4 
FieldSettings_type_VORTEX = 2 
FieldSettings_type_MAGNET = 3 
FieldSettings_type_HARMONIC = 7 
FieldSettings_type_CHARGE = 8 
FieldSettings_type_LENNARDJ = 9 
FieldSettings_type_TEXTURE = 6 
FieldSettings_type_GUIDE = 5 
FieldSettings_type_BOID = 10 
FieldSettings_type_TURBULENCE = 11 
FieldSettings_type_DRAG = 12 

FieldSettings_z_direction_BOTH = 0 
FieldSettings_z_direction_POSITIVE = 1 
FieldSettings_z_direction_NEGATIVE = 2 

FileSelectParams_display_type_FILE_SHORTDISPLAY = 1 
FileSelectParams_display_type_FILE_LONGDISPLAY = 2 
FileSelectParams_display_type_FILE_IMGDISPLAY = 3 

FileSelectParams_sort_method_FILE_SORT_ALPHA = 1 
FileSelectParams_sort_method_FILE_SORT_EXTENSION = 2 
FileSelectParams_sort_method_FILE_SORT_TIME = 3 
FileSelectParams_sort_method_FILE_SORT_SIZE = 4 

Filter2DActuator_mode_ENABLE = -2 
Filter2DActuator_mode_DISABLE = -1 
Filter2DActuator_mode_REMOVE = 0 
Filter2DActuator_mode_MOTIONBLUR = 1 
Filter2DActuator_mode_BLUR = 2 
Filter2DActuator_mode_SHARPEN = 3 
Filter2DActuator_mode_DILATION = 4 
Filter2DActuator_mode_EROSION = 5 
Filter2DActuator_mode_LAPLACIAN = 6 
Filter2DActuator_mode_SOBEL = 7 
Filter2DActuator_mode_PREWITT = 8 
Filter2DActuator_mode_GRAYSCALE = 9 
Filter2DActuator_mode_SEPIA = 10 
Filter2DActuator_mode_INVERT = 11 
Filter2DActuator_mode_CUSTOMFILTER = 12 

FloorConstraint_floor_location_FLOOR_X = 0 
FloorConstraint_floor_location_FLOOR_Y = 1 
FloorConstraint_floor_location_FLOOR_Z = 2 
FloorConstraint_floor_location_FLOOR_NEGATIVE_X = 3 
FloorConstraint_floor_location_FLOOR_NEGATIVE_Y = 4 
FloorConstraint_floor_location_FLOOR_NEGATIVE_Z = 5 

FluidFluidSettings_volume_initialization_VOLUME = 1 
FluidFluidSettings_volume_initialization_SHELL = 2 
FluidFluidSettings_volume_initialization_BOTH = 3 

FluidSettings_type_NONE = 1 
FluidSettings_type_DOMAIN = 2 
FluidSettings_type_FLUID = 4 
FluidSettings_type_OBSTACLE = 8 
FluidSettings_type_INFLOW = 16 
FluidSettings_type_OUTFLOW = 32 
FluidSettings_type_PARTICLE = 64 
FluidSettings_type_CONTROL = 128 

FollowPathConstraint_forward_axis_FORWARD_X = 0 
FollowPathConstraint_forward_axis_FORWARD_Y = 1 
FollowPathConstraint_forward_axis_FORWARD_Z = 2 
FollowPathConstraint_forward_axis_TRACK_NEGATIVE_X = 3 
FollowPathConstraint_forward_axis_TRACK_NEGATIVE_Y = 4 
FollowPathConstraint_forward_axis_TRACK_NEGATIVE_Z = 5 

FollowPathConstraint_up_axis_UP_X = 0 
FollowPathConstraint_up_axis_UP_Y = 1 
FollowPathConstraint_up_axis_UP_Z = 2 

GameActuator_mode_START = 0 
GameActuator_mode_RESTART = 2 
GameActuator_mode_QUIT = 3 
GameActuator_mode_SAVECFG = 4 
GameActuator_mode_LOADCFG = 5 

GameObjectSettings_collision_bounds_type_BOX = 0 
GameObjectSettings_collision_bounds_type_SPHERE = 1 
GameObjectSettings_collision_bounds_type_CYLINDER = 2 
GameObjectSettings_collision_bounds_type_CONE = 3 
GameObjectSettings_collision_bounds_type_CONVEX_HULL = 5 
GameObjectSettings_collision_bounds_type_TRIANGLE_MESH = 4 
GameObjectSettings_collision_bounds_type_CAPSULE = 7 

GameObjectSettings_physics_type_NO_COLLISION = 0 
GameObjectSettings_physics_type_STATIC = 1 
GameObjectSettings_physics_type_DYNAMIC = 2 
GameObjectSettings_physics_type_RIGID_BODY = 3 
GameObjectSettings_physics_type_SOFT_BODY = 4 
GameObjectSettings_physics_type_OCCLUDE = 5 
GameObjectSettings_physics_type_SENSOR = 6 

GameProperty_type_BOOL = 0 
GameProperty_type_INT = 1 
GameProperty_type_FLOAT = 2 
GameProperty_type_STRING = 3 
GameProperty_type_TIMER = 5 

GreasePencil_draw_mode_CURSOR = 16 
GreasePencil_draw_mode_VIEW = 0 
GreasePencil_draw_mode_SURFACE = 48 
GreasePencil_draw_mode_STROKE = 80 

Header_bl_space_type_EMPTY = 0 
Header_bl_space_type_VIEW_3D = 1 
Header_bl_space_type_GRAPH_EDITOR = 2 
Header_bl_space_type_OUTLINER = 3 
Header_bl_space_type_PROPERTIES = 4 
Header_bl_space_type_FILE_BROWSER = 5 
Header_bl_space_type_IMAGE_EDITOR = 6 
Header_bl_space_type_INFO = 7 
Header_bl_space_type_SEQUENCE_EDITOR = 8 
Header_bl_space_type_TEXT_EDITOR = 9 
Header_bl_space_type_AUDIO_WINDOW = 11 
Header_bl_space_type_DOPESHEET_EDITOR = 12 
Header_bl_space_type_NLA_EDITOR = 13 
Header_bl_space_type_SCRIPTS_WINDOW = 14 
Header_bl_space_type_TIMELINE = 15 
Header_bl_space_type_NODE_EDITOR = 16 
Header_bl_space_type_LOGIC_EDITOR = 17 
Header_bl_space_type_CONSOLE = 18 
Header_bl_space_type_USER_PREFERENCES = 19 

Histogram_mode_LUMA = 0 
Histogram_mode_RGB = 1 
Histogram_mode_R = 2 
Histogram_mode_G = 3 
Histogram_mode_B = 4 

IKParam_ik_solver_LEGACY = 0 
IKParam_ik_solver_ITASC = 1 

Image_field_order_EVEN = 0 
Image_field_order_ODD = 2 

Image_file_format_BMP = 20 
Image_file_format_DDS = 29 
Image_file_format_IRIS = 1 
Image_file_format_PNG = 17 
Image_file_format_JPEG = 4 
Image_file_format_JPEG2000 = 30 
Image_file_format_TARGA = 0 
Image_file_format_TARGA_RAW = 14 
Image_file_format_CINEON = 26 
Image_file_format_DPX = 27 
Image_file_format_MULTILAYER = 28 
Image_file_format_OPEN_EXR = 23 
Image_file_format_HDR = 21 
Image_file_format_TIFF = 22 
Image_file_format_AVI_JPEG = 16 
Image_file_format_AVI_RAW = 15 
Image_file_format_FRAMESERVER = 25 

Image_generated_type_BLANK = 0 
Image_generated_type_UV_GRID = 1 
Image_generated_type_COLOR_GRID = 2 

Image_mapping_UV = 0 
Image_mapping_REFLECTION = 16 

Image_source_FILE = 1 
Image_source_SEQUENCE = 2 
Image_source_MOVIE = 3 
Image_source_GENERATED = 4 
Image_source_VIEWER = 5 

Image_type_IMAGE = 0 
Image_type_MULTILAYER = 1 
Image_type_UV_TEST = 2 
Image_type_RENDER_RESULT = 4 
Image_type_COMPOSITING = 5 

ImageTexture_extension_EXTEND = 1 
ImageTexture_extension_CLIP = 2 
ImageTexture_extension_CLIP_CUBE = 4 
ImageTexture_extension_REPEAT = 3 
ImageTexture_extension_CHECKER = 5 

ImageTexture_filter_type_BOX = 0 
ImageTexture_filter_type_EWA = 1 
ImageTexture_filter_type_FELINE = 2 
ImageTexture_filter_type_AREA = 3 

InflowFluidSettings_volume_initialization_VOLUME = 1 
InflowFluidSettings_volume_initialization_SHELL = 2 
InflowFluidSettings_volume_initialization_BOTH = 3 

Itasc_mode_ANIMATION = 0 
Itasc_mode_SIMULATION = 8 

Itasc_reiteration_method_NEVER = 0 
Itasc_reiteration_method_INITIAL = 2 
Itasc_reiteration_method_ALWAYS = 6 

Itasc_solver_SDLS = 0 
Itasc_solver_DLS = 1 

JoystickSensor_axis_direction_RIGHTAXIS = 0 
JoystickSensor_axis_direction_UPAXIS = 1 
JoystickSensor_axis_direction_LEFTAXIS = 2 
JoystickSensor_axis_direction_DOWNAXIS = 3 

JoystickSensor_event_type_BUTTON = 0 
JoystickSensor_event_type_AXIS = 1 
JoystickSensor_event_type_HAT = 2 
JoystickSensor_event_type_AXIS_SINGLE = 3 

JoystickSensor_hat_direction_UP = 1 
JoystickSensor_hat_direction_DOWN = 4 
JoystickSensor_hat_direction_LEFT = 8 
JoystickSensor_hat_direction_RIGHT = 2 
JoystickSensor_hat_direction_UPRIGHT = 3 
JoystickSensor_hat_direction_DOWNLEFT = 12 
JoystickSensor_hat_direction_UPLEFT = 9 
JoystickSensor_hat_direction_DOWNRIGHT = 6 

KeyMap_region_type_WINDOW = 0 
KeyMap_region_type_HEADER = 1 
KeyMap_region_type_CHANNELS = 2 
KeyMap_region_type_TEMPORARY = 3 
KeyMap_region_type_UI = 4 
KeyMap_region_type_TOOLS = 5 
KeyMap_region_type_TOOL_PROPS = 6 
KeyMap_region_type_PREVIEW = 7 

KeyMap_space_type_EMPTY = 0 
KeyMap_space_type_VIEW_3D = 1 
KeyMap_space_type_GRAPH_EDITOR = 2 
KeyMap_space_type_OUTLINER = 3 
KeyMap_space_type_PROPERTIES = 4 
KeyMap_space_type_FILE_BROWSER = 5 
KeyMap_space_type_IMAGE_EDITOR = 6 
KeyMap_space_type_INFO = 7 
KeyMap_space_type_SEQUENCE_EDITOR = 8 
KeyMap_space_type_TEXT_EDITOR = 9 
KeyMap_space_type_AUDIO_WINDOW = 11 
KeyMap_space_type_DOPESHEET_EDITOR = 12 
KeyMap_space_type_NLA_EDITOR = 13 
KeyMap_space_type_SCRIPTS_WINDOW = 14 
KeyMap_space_type_TIMELINE = 15 
KeyMap_space_type_NODE_EDITOR = 16 
KeyMap_space_type_LOGIC_EDITOR = 17 
KeyMap_space_type_CONSOLE = 18 
KeyMap_space_type_USER_PREFERENCES = 19 

KeyMapItem_key_modifier_NONE = 0 
KeyMapItem_key_modifier_LEFTMOUSE = 1 
KeyMapItem_key_modifier_MIDDLEMOUSE = 2 
KeyMapItem_key_modifier_RIGHTMOUSE = 3 
KeyMapItem_key_modifier_BUTTON4MOUSE = 7 
KeyMapItem_key_modifier_BUTTON5MOUSE = 8 
KeyMapItem_key_modifier_ACTIONMOUSE = 5 
KeyMapItem_key_modifier_SELECTMOUSE = 6 
KeyMapItem_key_modifier_MOUSEMOVE = 4 
KeyMapItem_key_modifier_INBETWEEN_MOUSEMOVE = 17 
KeyMapItem_key_modifier_TRACKPADPAN = 14 
KeyMapItem_key_modifier_TRACKPADZOOM = 15 
KeyMapItem_key_modifier_MOUSEROTATE = 16 
KeyMapItem_key_modifier_WHEELUPMOUSE = 10 
KeyMapItem_key_modifier_WHEELDOWNMOUSE = 11 
KeyMapItem_key_modifier_WHEELINMOUSE = 12 
KeyMapItem_key_modifier_WHEELOUTMOUSE = 13 
KeyMapItem_key_modifier_EVT_TWEAK_L = 20482 
KeyMapItem_key_modifier_EVT_TWEAK_M = 20483 
KeyMapItem_key_modifier_EVT_TWEAK_R = 20484 
KeyMapItem_key_modifier_EVT_TWEAK_A = 20485 
KeyMapItem_key_modifier_EVT_TWEAK_S = 20486 
KeyMapItem_key_modifier_A = 97 
KeyMapItem_key_modifier_B = 98 
KeyMapItem_key_modifier_C = 99 
KeyMapItem_key_modifier_D = 100 
KeyMapItem_key_modifier_E = 101 
KeyMapItem_key_modifier_F = 102 
KeyMapItem_key_modifier_G = 103 
KeyMapItem_key_modifier_H = 104 
KeyMapItem_key_modifier_I = 105 
KeyMapItem_key_modifier_J = 106 
KeyMapItem_key_modifier_K = 107 
KeyMapItem_key_modifier_L = 108 
KeyMapItem_key_modifier_M = 109 
KeyMapItem_key_modifier_N = 110 
KeyMapItem_key_modifier_O = 111 
KeyMapItem_key_modifier_P = 112 
KeyMapItem_key_modifier_Q = 113 
KeyMapItem_key_modifier_R = 114 
KeyMapItem_key_modifier_S = 115 
KeyMapItem_key_modifier_T = 116 
KeyMapItem_key_modifier_U = 117 
KeyMapItem_key_modifier_V = 118 
KeyMapItem_key_modifier_W = 119 
KeyMapItem_key_modifier_X = 120 
KeyMapItem_key_modifier_Y = 121 
KeyMapItem_key_modifier_Z = 122 
KeyMapItem_key_modifier_ZERO = 48 
KeyMapItem_key_modifier_ONE = 49 
KeyMapItem_key_modifier_TWO = 50 
KeyMapItem_key_modifier_THREE = 51 
KeyMapItem_key_modifier_FOUR = 52 
KeyMapItem_key_modifier_FIVE = 53 
KeyMapItem_key_modifier_SIX = 54 
KeyMapItem_key_modifier_SEVEN = 55 
KeyMapItem_key_modifier_EIGHT = 56 
KeyMapItem_key_modifier_NINE = 57 
KeyMapItem_key_modifier_LEFT_CTRL = 212 
KeyMapItem_key_modifier_LEFT_ALT = 213 
KeyMapItem_key_modifier_LEFT_SHIFT = 217 
KeyMapItem_key_modifier_RIGHT_ALT = 214 
KeyMapItem_key_modifier_RIGHT_CTRL = 215 
KeyMapItem_key_modifier_RIGHT_SHIFT = 216 
KeyMapItem_key_modifier_OSKEY = 172 
KeyMapItem_key_modifier_GRLESS = 173 
KeyMapItem_key_modifier_ESC = 218 
KeyMapItem_key_modifier_TAB = 219 
KeyMapItem_key_modifier_RET = 220 
KeyMapItem_key_modifier_SPACE = 221 
KeyMapItem_key_modifier_LINE_FEED = 222 
KeyMapItem_key_modifier_BACK_SPACE = 223 
KeyMapItem_key_modifier_DEL = 224 
KeyMapItem_key_modifier_SEMI_COLON = 225 
KeyMapItem_key_modifier_PERIOD = 226 
KeyMapItem_key_modifier_COMMA = 227 
KeyMapItem_key_modifier_QUOTE = 228 
KeyMapItem_key_modifier_ACCENT_GRAVE = 229 
KeyMapItem_key_modifier_MINUS = 230 
KeyMapItem_key_modifier_SLASH = 232 
KeyMapItem_key_modifier_BACK_SLASH = 233 
KeyMapItem_key_modifier_EQUAL = 234 
KeyMapItem_key_modifier_LEFT_BRACKET = 235 
KeyMapItem_key_modifier_RIGHT_BRACKET = 236 
KeyMapItem_key_modifier_LEFT_ARROW = 137 
KeyMapItem_key_modifier_DOWN_ARROW = 138 
KeyMapItem_key_modifier_RIGHT_ARROW = 139 
KeyMapItem_key_modifier_UP_ARROW = 140 
KeyMapItem_key_modifier_NUMPAD_2 = 152 
KeyMapItem_key_modifier_NUMPAD_4 = 154 
KeyMapItem_key_modifier_NUMPAD_6 = 156 
KeyMapItem_key_modifier_NUMPAD_8 = 158 
KeyMapItem_key_modifier_NUMPAD_1 = 151 
KeyMapItem_key_modifier_NUMPAD_3 = 153 
KeyMapItem_key_modifier_NUMPAD_5 = 155 
KeyMapItem_key_modifier_NUMPAD_7 = 157 
KeyMapItem_key_modifier_NUMPAD_9 = 159 
KeyMapItem_key_modifier_NUMPAD_PERIOD = 199 
KeyMapItem_key_modifier_NUMPAD_SLASH = 161 
KeyMapItem_key_modifier_NUMPAD_ASTERIX = 160 
KeyMapItem_key_modifier_NUMPAD_0 = 150 
KeyMapItem_key_modifier_NUMPAD_MINUS = 162 
KeyMapItem_key_modifier_NUMPAD_ENTER = 163 
KeyMapItem_key_modifier_NUMPAD_PLUS = 164 
KeyMapItem_key_modifier_F1 = 300 
KeyMapItem_key_modifier_F2 = 301 
KeyMapItem_key_modifier_F3 = 302 
KeyMapItem_key_modifier_F4 = 303 
KeyMapItem_key_modifier_F5 = 304 
KeyMapItem_key_modifier_F6 = 305 
KeyMapItem_key_modifier_F7 = 306 
KeyMapItem_key_modifier_F8 = 307 
KeyMapItem_key_modifier_F9 = 308 
KeyMapItem_key_modifier_F10 = 309 
KeyMapItem_key_modifier_F11 = 310 
KeyMapItem_key_modifier_F12 = 311 
KeyMapItem_key_modifier_F13 = 312 
KeyMapItem_key_modifier_F14 = 313 
KeyMapItem_key_modifier_F15 = 314 
KeyMapItem_key_modifier_F16 = 315 
KeyMapItem_key_modifier_F17 = 316 
KeyMapItem_key_modifier_F18 = 317 
KeyMapItem_key_modifier_F19 = 318 
KeyMapItem_key_modifier_PAUSE = 165 
KeyMapItem_key_modifier_INSERT = 166 
KeyMapItem_key_modifier_HOME = 167 
KeyMapItem_key_modifier_PAGE_UP = 168 
KeyMapItem_key_modifier_PAGE_DOWN = 169 
KeyMapItem_key_modifier_END = 170 
KeyMapItem_key_modifier_MEDIA_PLAY = 174 
KeyMapItem_key_modifier_MEDIA_STOP = 175 
KeyMapItem_key_modifier_MEDIA_FIRST = 176 
KeyMapItem_key_modifier_MEDIA_LAST = 177 
KeyMapItem_key_modifier_WINDOW_DEACTIVATE = 260 
KeyMapItem_key_modifier_TIMER = 272 
KeyMapItem_key_modifier_TIMER0 = 273 
KeyMapItem_key_modifier_TIMER1 = 274 
KeyMapItem_key_modifier_TIMER2 = 275 
KeyMapItem_key_modifier_NDOF_BUTTON_MENU = 401 
KeyMapItem_key_modifier_NDOF_BUTTON_FIT = 402 
KeyMapItem_key_modifier_NDOF_BUTTON_TOP = 403 
KeyMapItem_key_modifier_NDOF_BUTTON_BOTTOM = 404 
KeyMapItem_key_modifier_NDOF_BUTTON_LEFT = 405 
KeyMapItem_key_modifier_NDOF_BUTTON_RIGHT = 406 
KeyMapItem_key_modifier_NDOF_BUTTON_FRONT = 407 
KeyMapItem_key_modifier_NDOF_BUTTON_BACK = 408 
KeyMapItem_key_modifier_NDOF_BUTTON_ISO1 = 409 
KeyMapItem_key_modifier_NDOF_BUTTON_ISO2 = 410 
KeyMapItem_key_modifier_NDOF_BUTTON_ROLL_CW = 411 
KeyMapItem_key_modifier_NDOF_BUTTON_ROLL_CCW = 412 
KeyMapItem_key_modifier_NDOF_BUTTON_SPIN_CW = 413 
KeyMapItem_key_modifier_NDOF_BUTTON_SPIN_CCW = 414 
KeyMapItem_key_modifier_NDOF_BUTTON_TILT_CW = 415 
KeyMapItem_key_modifier_NDOF_BUTTON_TILT_CCW = 416 
KeyMapItem_key_modifier_NDOF_BUTTON_ROTATE = 417 
KeyMapItem_key_modifier_NDOF_BUTTON_PANZOOM = 418 
KeyMapItem_key_modifier_NDOF_BUTTON_DOMINANT = 419 
KeyMapItem_key_modifier_NDOF_BUTTON_PLUS = 420 
KeyMapItem_key_modifier_NDOF_BUTTON_MINUS = 421 
KeyMapItem_key_modifier_NDOF_BUTTON_1 = 422 
KeyMapItem_key_modifier_NDOF_BUTTON_2 = 423 
KeyMapItem_key_modifier_NDOF_BUTTON_3 = 424 
KeyMapItem_key_modifier_NDOF_BUTTON_4 = 425 
KeyMapItem_key_modifier_NDOF_BUTTON_5 = 426 
KeyMapItem_key_modifier_NDOF_BUTTON_6 = 427 
KeyMapItem_key_modifier_NDOF_BUTTON_7 = 428 
KeyMapItem_key_modifier_NDOF_BUTTON_8 = 429 
KeyMapItem_key_modifier_NDOF_BUTTON_9 = 430 
KeyMapItem_key_modifier_NDOF_BUTTON_10 = 431 

KeyMapItem_map_type_KEYBOARD = 0 
KeyMapItem_map_type_TWEAK = 2 
KeyMapItem_map_type_MOUSE = 1 
KeyMapItem_map_type_NDOF = 5 
KeyMapItem_map_type_TEXTINPUT = 3 
KeyMapItem_map_type_TIMER = 4 

KeyMapItem_propvalue_NONE = 0 

KeyMapItem_type_NONE = 0 
KeyMapItem_type_LEFTMOUSE = 1 
KeyMapItem_type_MIDDLEMOUSE = 2 
KeyMapItem_type_RIGHTMOUSE = 3 
KeyMapItem_type_BUTTON4MOUSE = 7 
KeyMapItem_type_BUTTON5MOUSE = 8 
KeyMapItem_type_ACTIONMOUSE = 5 
KeyMapItem_type_SELECTMOUSE = 6 
KeyMapItem_type_MOUSEMOVE = 4 
KeyMapItem_type_INBETWEEN_MOUSEMOVE = 17 
KeyMapItem_type_TRACKPADPAN = 14 
KeyMapItem_type_TRACKPADZOOM = 15 
KeyMapItem_type_MOUSEROTATE = 16 
KeyMapItem_type_WHEELUPMOUSE = 10 
KeyMapItem_type_WHEELDOWNMOUSE = 11 
KeyMapItem_type_WHEELINMOUSE = 12 
KeyMapItem_type_WHEELOUTMOUSE = 13 
KeyMapItem_type_EVT_TWEAK_L = 20482 
KeyMapItem_type_EVT_TWEAK_M = 20483 
KeyMapItem_type_EVT_TWEAK_R = 20484 
KeyMapItem_type_EVT_TWEAK_A = 20485 
KeyMapItem_type_EVT_TWEAK_S = 20486 
KeyMapItem_type_A = 97 
KeyMapItem_type_B = 98 
KeyMapItem_type_C = 99 
KeyMapItem_type_D = 100 
KeyMapItem_type_E = 101 
KeyMapItem_type_F = 102 
KeyMapItem_type_G = 103 
KeyMapItem_type_H = 104 
KeyMapItem_type_I = 105 
KeyMapItem_type_J = 106 
KeyMapItem_type_K = 107 
KeyMapItem_type_L = 108 
KeyMapItem_type_M = 109 
KeyMapItem_type_N = 110 
KeyMapItem_type_O = 111 
KeyMapItem_type_P = 112 
KeyMapItem_type_Q = 113 
KeyMapItem_type_R = 114 
KeyMapItem_type_S = 115 
KeyMapItem_type_T = 116 
KeyMapItem_type_U = 117 
KeyMapItem_type_V = 118 
KeyMapItem_type_W = 119 
KeyMapItem_type_X = 120 
KeyMapItem_type_Y = 121 
KeyMapItem_type_Z = 122 
KeyMapItem_type_ZERO = 48 
KeyMapItem_type_ONE = 49 
KeyMapItem_type_TWO = 50 
KeyMapItem_type_THREE = 51 
KeyMapItem_type_FOUR = 52 
KeyMapItem_type_FIVE = 53 
KeyMapItem_type_SIX = 54 
KeyMapItem_type_SEVEN = 55 
KeyMapItem_type_EIGHT = 56 
KeyMapItem_type_NINE = 57 
KeyMapItem_type_LEFT_CTRL = 212 
KeyMapItem_type_LEFT_ALT = 213 
KeyMapItem_type_LEFT_SHIFT = 217 
KeyMapItem_type_RIGHT_ALT = 214 
KeyMapItem_type_RIGHT_CTRL = 215 
KeyMapItem_type_RIGHT_SHIFT = 216 
KeyMapItem_type_OSKEY = 172 
KeyMapItem_type_GRLESS = 173 
KeyMapItem_type_ESC = 218 
KeyMapItem_type_TAB = 219 
KeyMapItem_type_RET = 220 
KeyMapItem_type_SPACE = 221 
KeyMapItem_type_LINE_FEED = 222 
KeyMapItem_type_BACK_SPACE = 223 
KeyMapItem_type_DEL = 224 
KeyMapItem_type_SEMI_COLON = 225 
KeyMapItem_type_PERIOD = 226 
KeyMapItem_type_COMMA = 227 
KeyMapItem_type_QUOTE = 228 
KeyMapItem_type_ACCENT_GRAVE = 229 
KeyMapItem_type_MINUS = 230 
KeyMapItem_type_SLASH = 232 
KeyMapItem_type_BACK_SLASH = 233 
KeyMapItem_type_EQUAL = 234 
KeyMapItem_type_LEFT_BRACKET = 235 
KeyMapItem_type_RIGHT_BRACKET = 236 
KeyMapItem_type_LEFT_ARROW = 137 
KeyMapItem_type_DOWN_ARROW = 138 
KeyMapItem_type_RIGHT_ARROW = 139 
KeyMapItem_type_UP_ARROW = 140 
KeyMapItem_type_NUMPAD_2 = 152 
KeyMapItem_type_NUMPAD_4 = 154 
KeyMapItem_type_NUMPAD_6 = 156 
KeyMapItem_type_NUMPAD_8 = 158 
KeyMapItem_type_NUMPAD_1 = 151 
KeyMapItem_type_NUMPAD_3 = 153 
KeyMapItem_type_NUMPAD_5 = 155 
KeyMapItem_type_NUMPAD_7 = 157 
KeyMapItem_type_NUMPAD_9 = 159 
KeyMapItem_type_NUMPAD_PERIOD = 199 
KeyMapItem_type_NUMPAD_SLASH = 161 
KeyMapItem_type_NUMPAD_ASTERIX = 160 
KeyMapItem_type_NUMPAD_0 = 150 
KeyMapItem_type_NUMPAD_MINUS = 162 
KeyMapItem_type_NUMPAD_ENTER = 163 
KeyMapItem_type_NUMPAD_PLUS = 164 
KeyMapItem_type_F1 = 300 
KeyMapItem_type_F2 = 301 
KeyMapItem_type_F3 = 302 
KeyMapItem_type_F4 = 303 
KeyMapItem_type_F5 = 304 
KeyMapItem_type_F6 = 305 
KeyMapItem_type_F7 = 306 
KeyMapItem_type_F8 = 307 
KeyMapItem_type_F9 = 308 
KeyMapItem_type_F10 = 309 
KeyMapItem_type_F11 = 310 
KeyMapItem_type_F12 = 311 
KeyMapItem_type_F13 = 312 
KeyMapItem_type_F14 = 313 
KeyMapItem_type_F15 = 314 
KeyMapItem_type_F16 = 315 
KeyMapItem_type_F17 = 316 
KeyMapItem_type_F18 = 317 
KeyMapItem_type_F19 = 318 
KeyMapItem_type_PAUSE = 165 
KeyMapItem_type_INSERT = 166 
KeyMapItem_type_HOME = 167 
KeyMapItem_type_PAGE_UP = 168 
KeyMapItem_type_PAGE_DOWN = 169 
KeyMapItem_type_END = 170 
KeyMapItem_type_MEDIA_PLAY = 174 
KeyMapItem_type_MEDIA_STOP = 175 
KeyMapItem_type_MEDIA_FIRST = 176 
KeyMapItem_type_MEDIA_LAST = 177 
KeyMapItem_type_WINDOW_DEACTIVATE = 260 
KeyMapItem_type_TIMER = 272 
KeyMapItem_type_TIMER0 = 273 
KeyMapItem_type_TIMER1 = 274 
KeyMapItem_type_TIMER2 = 275 
KeyMapItem_type_NDOF_BUTTON_MENU = 401 
KeyMapItem_type_NDOF_BUTTON_FIT = 402 
KeyMapItem_type_NDOF_BUTTON_TOP = 403 
KeyMapItem_type_NDOF_BUTTON_BOTTOM = 404 
KeyMapItem_type_NDOF_BUTTON_LEFT = 405 
KeyMapItem_type_NDOF_BUTTON_RIGHT = 406 
KeyMapItem_type_NDOF_BUTTON_FRONT = 407 
KeyMapItem_type_NDOF_BUTTON_BACK = 408 
KeyMapItem_type_NDOF_BUTTON_ISO1 = 409 
KeyMapItem_type_NDOF_BUTTON_ISO2 = 410 
KeyMapItem_type_NDOF_BUTTON_ROLL_CW = 411 
KeyMapItem_type_NDOF_BUTTON_ROLL_CCW = 412 
KeyMapItem_type_NDOF_BUTTON_SPIN_CW = 413 
KeyMapItem_type_NDOF_BUTTON_SPIN_CCW = 414 
KeyMapItem_type_NDOF_BUTTON_TILT_CW = 415 
KeyMapItem_type_NDOF_BUTTON_TILT_CCW = 416 
KeyMapItem_type_NDOF_BUTTON_ROTATE = 417 
KeyMapItem_type_NDOF_BUTTON_PANZOOM = 418 
KeyMapItem_type_NDOF_BUTTON_DOMINANT = 419 
KeyMapItem_type_NDOF_BUTTON_PLUS = 420 
KeyMapItem_type_NDOF_BUTTON_MINUS = 421 
KeyMapItem_type_NDOF_BUTTON_1 = 422 
KeyMapItem_type_NDOF_BUTTON_2 = 423 
KeyMapItem_type_NDOF_BUTTON_3 = 424 
KeyMapItem_type_NDOF_BUTTON_4 = 425 
KeyMapItem_type_NDOF_BUTTON_5 = 426 
KeyMapItem_type_NDOF_BUTTON_6 = 427 
KeyMapItem_type_NDOF_BUTTON_7 = 428 
KeyMapItem_type_NDOF_BUTTON_8 = 429 
KeyMapItem_type_NDOF_BUTTON_9 = 430 
KeyMapItem_type_NDOF_BUTTON_10 = 431 

KeyMapItem_value_ANY = -1 
KeyMapItem_value_NOTHING = 0 
KeyMapItem_value_PRESS = 1 
KeyMapItem_value_RELEASE = 2 
KeyMapItem_value_CLICK = 3 
KeyMapItem_value_DOUBLE_CLICK = 4 

KeyboardSensor_key_NONE = 0 
KeyboardSensor_key_LEFTMOUSE = 1 
KeyboardSensor_key_MIDDLEMOUSE = 2 
KeyboardSensor_key_RIGHTMOUSE = 3 
KeyboardSensor_key_BUTTON4MOUSE = 7 
KeyboardSensor_key_BUTTON5MOUSE = 8 
KeyboardSensor_key_ACTIONMOUSE = 5 
KeyboardSensor_key_SELECTMOUSE = 6 
KeyboardSensor_key_MOUSEMOVE = 4 
KeyboardSensor_key_INBETWEEN_MOUSEMOVE = 17 
KeyboardSensor_key_TRACKPADPAN = 14 
KeyboardSensor_key_TRACKPADZOOM = 15 
KeyboardSensor_key_MOUSEROTATE = 16 
KeyboardSensor_key_WHEELUPMOUSE = 10 
KeyboardSensor_key_WHEELDOWNMOUSE = 11 
KeyboardSensor_key_WHEELINMOUSE = 12 
KeyboardSensor_key_WHEELOUTMOUSE = 13 
KeyboardSensor_key_EVT_TWEAK_L = 20482 
KeyboardSensor_key_EVT_TWEAK_M = 20483 
KeyboardSensor_key_EVT_TWEAK_R = 20484 
KeyboardSensor_key_EVT_TWEAK_A = 20485 
KeyboardSensor_key_EVT_TWEAK_S = 20486 
KeyboardSensor_key_A = 97 
KeyboardSensor_key_B = 98 
KeyboardSensor_key_C = 99 
KeyboardSensor_key_D = 100 
KeyboardSensor_key_E = 101 
KeyboardSensor_key_F = 102 
KeyboardSensor_key_G = 103 
KeyboardSensor_key_H = 104 
KeyboardSensor_key_I = 105 
KeyboardSensor_key_J = 106 
KeyboardSensor_key_K = 107 
KeyboardSensor_key_L = 108 
KeyboardSensor_key_M = 109 
KeyboardSensor_key_N = 110 
KeyboardSensor_key_O = 111 
KeyboardSensor_key_P = 112 
KeyboardSensor_key_Q = 113 
KeyboardSensor_key_R = 114 
KeyboardSensor_key_S = 115 
KeyboardSensor_key_T = 116 
KeyboardSensor_key_U = 117 
KeyboardSensor_key_V = 118 
KeyboardSensor_key_W = 119 
KeyboardSensor_key_X = 120 
KeyboardSensor_key_Y = 121 
KeyboardSensor_key_Z = 122 
KeyboardSensor_key_ZERO = 48 
KeyboardSensor_key_ONE = 49 
KeyboardSensor_key_TWO = 50 
KeyboardSensor_key_THREE = 51 
KeyboardSensor_key_FOUR = 52 
KeyboardSensor_key_FIVE = 53 
KeyboardSensor_key_SIX = 54 
KeyboardSensor_key_SEVEN = 55 
KeyboardSensor_key_EIGHT = 56 
KeyboardSensor_key_NINE = 57 
KeyboardSensor_key_LEFT_CTRL = 212 
KeyboardSensor_key_LEFT_ALT = 213 
KeyboardSensor_key_LEFT_SHIFT = 217 
KeyboardSensor_key_RIGHT_ALT = 214 
KeyboardSensor_key_RIGHT_CTRL = 215 
KeyboardSensor_key_RIGHT_SHIFT = 216 
KeyboardSensor_key_OSKEY = 172 
KeyboardSensor_key_GRLESS = 173 
KeyboardSensor_key_ESC = 218 
KeyboardSensor_key_TAB = 219 
KeyboardSensor_key_RET = 220 
KeyboardSensor_key_SPACE = 221 
KeyboardSensor_key_LINE_FEED = 222 
KeyboardSensor_key_BACK_SPACE = 223 
KeyboardSensor_key_DEL = 224 
KeyboardSensor_key_SEMI_COLON = 225 
KeyboardSensor_key_PERIOD = 226 
KeyboardSensor_key_COMMA = 227 
KeyboardSensor_key_QUOTE = 228 
KeyboardSensor_key_ACCENT_GRAVE = 229 
KeyboardSensor_key_MINUS = 230 
KeyboardSensor_key_SLASH = 232 
KeyboardSensor_key_BACK_SLASH = 233 
KeyboardSensor_key_EQUAL = 234 
KeyboardSensor_key_LEFT_BRACKET = 235 
KeyboardSensor_key_RIGHT_BRACKET = 236 
KeyboardSensor_key_LEFT_ARROW = 137 
KeyboardSensor_key_DOWN_ARROW = 138 
KeyboardSensor_key_RIGHT_ARROW = 139 
KeyboardSensor_key_UP_ARROW = 140 
KeyboardSensor_key_NUMPAD_2 = 152 
KeyboardSensor_key_NUMPAD_4 = 154 
KeyboardSensor_key_NUMPAD_6 = 156 
KeyboardSensor_key_NUMPAD_8 = 158 
KeyboardSensor_key_NUMPAD_1 = 151 
KeyboardSensor_key_NUMPAD_3 = 153 
KeyboardSensor_key_NUMPAD_5 = 155 
KeyboardSensor_key_NUMPAD_7 = 157 
KeyboardSensor_key_NUMPAD_9 = 159 
KeyboardSensor_key_NUMPAD_PERIOD = 199 
KeyboardSensor_key_NUMPAD_SLASH = 161 
KeyboardSensor_key_NUMPAD_ASTERIX = 160 
KeyboardSensor_key_NUMPAD_0 = 150 
KeyboardSensor_key_NUMPAD_MINUS = 162 
KeyboardSensor_key_NUMPAD_ENTER = 163 
KeyboardSensor_key_NUMPAD_PLUS = 164 
KeyboardSensor_key_F1 = 300 
KeyboardSensor_key_F2 = 301 
KeyboardSensor_key_F3 = 302 
KeyboardSensor_key_F4 = 303 
KeyboardSensor_key_F5 = 304 
KeyboardSensor_key_F6 = 305 
KeyboardSensor_key_F7 = 306 
KeyboardSensor_key_F8 = 307 
KeyboardSensor_key_F9 = 308 
KeyboardSensor_key_F10 = 309 
KeyboardSensor_key_F11 = 310 
KeyboardSensor_key_F12 = 311 
KeyboardSensor_key_F13 = 312 
KeyboardSensor_key_F14 = 313 
KeyboardSensor_key_F15 = 314 
KeyboardSensor_key_F16 = 315 
KeyboardSensor_key_F17 = 316 
KeyboardSensor_key_F18 = 317 
KeyboardSensor_key_F19 = 318 
KeyboardSensor_key_PAUSE = 165 
KeyboardSensor_key_INSERT = 166 
KeyboardSensor_key_HOME = 167 
KeyboardSensor_key_PAGE_UP = 168 
KeyboardSensor_key_PAGE_DOWN = 169 
KeyboardSensor_key_END = 170 
KeyboardSensor_key_MEDIA_PLAY = 174 
KeyboardSensor_key_MEDIA_STOP = 175 
KeyboardSensor_key_MEDIA_FIRST = 176 
KeyboardSensor_key_MEDIA_LAST = 177 
KeyboardSensor_key_WINDOW_DEACTIVATE = 260 
KeyboardSensor_key_TIMER = 272 
KeyboardSensor_key_TIMER0 = 273 
KeyboardSensor_key_TIMER1 = 274 
KeyboardSensor_key_TIMER2 = 275 
KeyboardSensor_key_NDOF_BUTTON_MENU = 401 
KeyboardSensor_key_NDOF_BUTTON_FIT = 402 
KeyboardSensor_key_NDOF_BUTTON_TOP = 403 
KeyboardSensor_key_NDOF_BUTTON_BOTTOM = 404 
KeyboardSensor_key_NDOF_BUTTON_LEFT = 405 
KeyboardSensor_key_NDOF_BUTTON_RIGHT = 406 
KeyboardSensor_key_NDOF_BUTTON_FRONT = 407 
KeyboardSensor_key_NDOF_BUTTON_BACK = 408 
KeyboardSensor_key_NDOF_BUTTON_ISO1 = 409 
KeyboardSensor_key_NDOF_BUTTON_ISO2 = 410 
KeyboardSensor_key_NDOF_BUTTON_ROLL_CW = 411 
KeyboardSensor_key_NDOF_BUTTON_ROLL_CCW = 412 
KeyboardSensor_key_NDOF_BUTTON_SPIN_CW = 413 
KeyboardSensor_key_NDOF_BUTTON_SPIN_CCW = 414 
KeyboardSensor_key_NDOF_BUTTON_TILT_CW = 415 
KeyboardSensor_key_NDOF_BUTTON_TILT_CCW = 416 
KeyboardSensor_key_NDOF_BUTTON_ROTATE = 417 
KeyboardSensor_key_NDOF_BUTTON_PANZOOM = 418 
KeyboardSensor_key_NDOF_BUTTON_DOMINANT = 419 
KeyboardSensor_key_NDOF_BUTTON_PLUS = 420 
KeyboardSensor_key_NDOF_BUTTON_MINUS = 421 
KeyboardSensor_key_NDOF_BUTTON_1 = 422 
KeyboardSensor_key_NDOF_BUTTON_2 = 423 
KeyboardSensor_key_NDOF_BUTTON_3 = 424 
KeyboardSensor_key_NDOF_BUTTON_4 = 425 
KeyboardSensor_key_NDOF_BUTTON_5 = 426 
KeyboardSensor_key_NDOF_BUTTON_6 = 427 
KeyboardSensor_key_NDOF_BUTTON_7 = 428 
KeyboardSensor_key_NDOF_BUTTON_8 = 429 
KeyboardSensor_key_NDOF_BUTTON_9 = 430 
KeyboardSensor_key_NDOF_BUTTON_10 = 431 

KeyboardSensor_modifier_key_1_NONE = 0 
KeyboardSensor_modifier_key_1_LEFTMOUSE = 1 
KeyboardSensor_modifier_key_1_MIDDLEMOUSE = 2 
KeyboardSensor_modifier_key_1_RIGHTMOUSE = 3 
KeyboardSensor_modifier_key_1_BUTTON4MOUSE = 7 
KeyboardSensor_modifier_key_1_BUTTON5MOUSE = 8 
KeyboardSensor_modifier_key_1_ACTIONMOUSE = 5 
KeyboardSensor_modifier_key_1_SELECTMOUSE = 6 
KeyboardSensor_modifier_key_1_MOUSEMOVE = 4 
KeyboardSensor_modifier_key_1_INBETWEEN_MOUSEMOVE = 17 
KeyboardSensor_modifier_key_1_TRACKPADPAN = 14 
KeyboardSensor_modifier_key_1_TRACKPADZOOM = 15 
KeyboardSensor_modifier_key_1_MOUSEROTATE = 16 
KeyboardSensor_modifier_key_1_WHEELUPMOUSE = 10 
KeyboardSensor_modifier_key_1_WHEELDOWNMOUSE = 11 
KeyboardSensor_modifier_key_1_WHEELINMOUSE = 12 
KeyboardSensor_modifier_key_1_WHEELOUTMOUSE = 13 
KeyboardSensor_modifier_key_1_EVT_TWEAK_L = 20482 
KeyboardSensor_modifier_key_1_EVT_TWEAK_M = 20483 
KeyboardSensor_modifier_key_1_EVT_TWEAK_R = 20484 
KeyboardSensor_modifier_key_1_EVT_TWEAK_A = 20485 
KeyboardSensor_modifier_key_1_EVT_TWEAK_S = 20486 
KeyboardSensor_modifier_key_1_A = 97 
KeyboardSensor_modifier_key_1_B = 98 
KeyboardSensor_modifier_key_1_C = 99 
KeyboardSensor_modifier_key_1_D = 100 
KeyboardSensor_modifier_key_1_E = 101 
KeyboardSensor_modifier_key_1_F = 102 
KeyboardSensor_modifier_key_1_G = 103 
KeyboardSensor_modifier_key_1_H = 104 
KeyboardSensor_modifier_key_1_I = 105 
KeyboardSensor_modifier_key_1_J = 106 
KeyboardSensor_modifier_key_1_K = 107 
KeyboardSensor_modifier_key_1_L = 108 
KeyboardSensor_modifier_key_1_M = 109 
KeyboardSensor_modifier_key_1_N = 110 
KeyboardSensor_modifier_key_1_O = 111 
KeyboardSensor_modifier_key_1_P = 112 
KeyboardSensor_modifier_key_1_Q = 113 
KeyboardSensor_modifier_key_1_R = 114 
KeyboardSensor_modifier_key_1_S = 115 
KeyboardSensor_modifier_key_1_T = 116 
KeyboardSensor_modifier_key_1_U = 117 
KeyboardSensor_modifier_key_1_V = 118 
KeyboardSensor_modifier_key_1_W = 119 
KeyboardSensor_modifier_key_1_X = 120 
KeyboardSensor_modifier_key_1_Y = 121 
KeyboardSensor_modifier_key_1_Z = 122 
KeyboardSensor_modifier_key_1_ZERO = 48 
KeyboardSensor_modifier_key_1_ONE = 49 
KeyboardSensor_modifier_key_1_TWO = 50 
KeyboardSensor_modifier_key_1_THREE = 51 
KeyboardSensor_modifier_key_1_FOUR = 52 
KeyboardSensor_modifier_key_1_FIVE = 53 
KeyboardSensor_modifier_key_1_SIX = 54 
KeyboardSensor_modifier_key_1_SEVEN = 55 
KeyboardSensor_modifier_key_1_EIGHT = 56 
KeyboardSensor_modifier_key_1_NINE = 57 
KeyboardSensor_modifier_key_1_LEFT_CTRL = 212 
KeyboardSensor_modifier_key_1_LEFT_ALT = 213 
KeyboardSensor_modifier_key_1_LEFT_SHIFT = 217 
KeyboardSensor_modifier_key_1_RIGHT_ALT = 214 
KeyboardSensor_modifier_key_1_RIGHT_CTRL = 215 
KeyboardSensor_modifier_key_1_RIGHT_SHIFT = 216 
KeyboardSensor_modifier_key_1_OSKEY = 172 
KeyboardSensor_modifier_key_1_GRLESS = 173 
KeyboardSensor_modifier_key_1_ESC = 218 
KeyboardSensor_modifier_key_1_TAB = 219 
KeyboardSensor_modifier_key_1_RET = 220 
KeyboardSensor_modifier_key_1_SPACE = 221 
KeyboardSensor_modifier_key_1_LINE_FEED = 222 
KeyboardSensor_modifier_key_1_BACK_SPACE = 223 
KeyboardSensor_modifier_key_1_DEL = 224 
KeyboardSensor_modifier_key_1_SEMI_COLON = 225 
KeyboardSensor_modifier_key_1_PERIOD = 226 
KeyboardSensor_modifier_key_1_COMMA = 227 
KeyboardSensor_modifier_key_1_QUOTE = 228 
KeyboardSensor_modifier_key_1_ACCENT_GRAVE = 229 
KeyboardSensor_modifier_key_1_MINUS = 230 
KeyboardSensor_modifier_key_1_SLASH = 232 
KeyboardSensor_modifier_key_1_BACK_SLASH = 233 
KeyboardSensor_modifier_key_1_EQUAL = 234 
KeyboardSensor_modifier_key_1_LEFT_BRACKET = 235 
KeyboardSensor_modifier_key_1_RIGHT_BRACKET = 236 
KeyboardSensor_modifier_key_1_LEFT_ARROW = 137 
KeyboardSensor_modifier_key_1_DOWN_ARROW = 138 
KeyboardSensor_modifier_key_1_RIGHT_ARROW = 139 
KeyboardSensor_modifier_key_1_UP_ARROW = 140 
KeyboardSensor_modifier_key_1_NUMPAD_2 = 152 
KeyboardSensor_modifier_key_1_NUMPAD_4 = 154 
KeyboardSensor_modifier_key_1_NUMPAD_6 = 156 
KeyboardSensor_modifier_key_1_NUMPAD_8 = 158 
KeyboardSensor_modifier_key_1_NUMPAD_1 = 151 
KeyboardSensor_modifier_key_1_NUMPAD_3 = 153 
KeyboardSensor_modifier_key_1_NUMPAD_5 = 155 
KeyboardSensor_modifier_key_1_NUMPAD_7 = 157 
KeyboardSensor_modifier_key_1_NUMPAD_9 = 159 
KeyboardSensor_modifier_key_1_NUMPAD_PERIOD = 199 
KeyboardSensor_modifier_key_1_NUMPAD_SLASH = 161 
KeyboardSensor_modifier_key_1_NUMPAD_ASTERIX = 160 
KeyboardSensor_modifier_key_1_NUMPAD_0 = 150 
KeyboardSensor_modifier_key_1_NUMPAD_MINUS = 162 
KeyboardSensor_modifier_key_1_NUMPAD_ENTER = 163 
KeyboardSensor_modifier_key_1_NUMPAD_PLUS = 164 
KeyboardSensor_modifier_key_1_F1 = 300 
KeyboardSensor_modifier_key_1_F2 = 301 
KeyboardSensor_modifier_key_1_F3 = 302 
KeyboardSensor_modifier_key_1_F4 = 303 
KeyboardSensor_modifier_key_1_F5 = 304 
KeyboardSensor_modifier_key_1_F6 = 305 
KeyboardSensor_modifier_key_1_F7 = 306 
KeyboardSensor_modifier_key_1_F8 = 307 
KeyboardSensor_modifier_key_1_F9 = 308 
KeyboardSensor_modifier_key_1_F10 = 309 
KeyboardSensor_modifier_key_1_F11 = 310 
KeyboardSensor_modifier_key_1_F12 = 311 
KeyboardSensor_modifier_key_1_F13 = 312 
KeyboardSensor_modifier_key_1_F14 = 313 
KeyboardSensor_modifier_key_1_F15 = 314 
KeyboardSensor_modifier_key_1_F16 = 315 
KeyboardSensor_modifier_key_1_F17 = 316 
KeyboardSensor_modifier_key_1_F18 = 317 
KeyboardSensor_modifier_key_1_F19 = 318 
KeyboardSensor_modifier_key_1_PAUSE = 165 
KeyboardSensor_modifier_key_1_INSERT = 166 
KeyboardSensor_modifier_key_1_HOME = 167 
KeyboardSensor_modifier_key_1_PAGE_UP = 168 
KeyboardSensor_modifier_key_1_PAGE_DOWN = 169 
KeyboardSensor_modifier_key_1_END = 170 
KeyboardSensor_modifier_key_1_MEDIA_PLAY = 174 
KeyboardSensor_modifier_key_1_MEDIA_STOP = 175 
KeyboardSensor_modifier_key_1_MEDIA_FIRST = 176 
KeyboardSensor_modifier_key_1_MEDIA_LAST = 177 
KeyboardSensor_modifier_key_1_WINDOW_DEACTIVATE = 260 
KeyboardSensor_modifier_key_1_TIMER = 272 
KeyboardSensor_modifier_key_1_TIMER0 = 273 
KeyboardSensor_modifier_key_1_TIMER1 = 274 
KeyboardSensor_modifier_key_1_TIMER2 = 275 
KeyboardSensor_modifier_key_1_NDOF_BUTTON_MENU = 401 
KeyboardSensor_modifier_key_1_NDOF_BUTTON_FIT = 402 
KeyboardSensor_modifier_key_1_NDOF_BUTTON_TOP = 403 
KeyboardSensor_modifier_key_1_NDOF_BUTTON_BOTTOM = 404 
KeyboardSensor_modifier_key_1_NDOF_BUTTON_LEFT = 405 
KeyboardSensor_modifier_key_1_NDOF_BUTTON_RIGHT = 406 
KeyboardSensor_modifier_key_1_NDOF_BUTTON_FRONT = 407 
KeyboardSensor_modifier_key_1_NDOF_BUTTON_BACK = 408 
KeyboardSensor_modifier_key_1_NDOF_BUTTON_ISO1 = 409 
KeyboardSensor_modifier_key_1_NDOF_BUTTON_ISO2 = 410 
KeyboardSensor_modifier_key_1_NDOF_BUTTON_ROLL_CW = 411 
KeyboardSensor_modifier_key_1_NDOF_BUTTON_ROLL_CCW = 412 
KeyboardSensor_modifier_key_1_NDOF_BUTTON_SPIN_CW = 413 
KeyboardSensor_modifier_key_1_NDOF_BUTTON_SPIN_CCW = 414 
KeyboardSensor_modifier_key_1_NDOF_BUTTON_TILT_CW = 415 
KeyboardSensor_modifier_key_1_NDOF_BUTTON_TILT_CCW = 416 
KeyboardSensor_modifier_key_1_NDOF_BUTTON_ROTATE = 417 
KeyboardSensor_modifier_key_1_NDOF_BUTTON_PANZOOM = 418 
KeyboardSensor_modifier_key_1_NDOF_BUTTON_DOMINANT = 419 
KeyboardSensor_modifier_key_1_NDOF_BUTTON_PLUS = 420 
KeyboardSensor_modifier_key_1_NDOF_BUTTON_MINUS = 421 
KeyboardSensor_modifier_key_1_NDOF_BUTTON_1 = 422 
KeyboardSensor_modifier_key_1_NDOF_BUTTON_2 = 423 
KeyboardSensor_modifier_key_1_NDOF_BUTTON_3 = 424 
KeyboardSensor_modifier_key_1_NDOF_BUTTON_4 = 425 
KeyboardSensor_modifier_key_1_NDOF_BUTTON_5 = 426 
KeyboardSensor_modifier_key_1_NDOF_BUTTON_6 = 427 
KeyboardSensor_modifier_key_1_NDOF_BUTTON_7 = 428 
KeyboardSensor_modifier_key_1_NDOF_BUTTON_8 = 429 
KeyboardSensor_modifier_key_1_NDOF_BUTTON_9 = 430 
KeyboardSensor_modifier_key_1_NDOF_BUTTON_10 = 431 

KeyboardSensor_modifier_key_2_NONE = 0 
KeyboardSensor_modifier_key_2_LEFTMOUSE = 1 
KeyboardSensor_modifier_key_2_MIDDLEMOUSE = 2 
KeyboardSensor_modifier_key_2_RIGHTMOUSE = 3 
KeyboardSensor_modifier_key_2_BUTTON4MOUSE = 7 
KeyboardSensor_modifier_key_2_BUTTON5MOUSE = 8 
KeyboardSensor_modifier_key_2_ACTIONMOUSE = 5 
KeyboardSensor_modifier_key_2_SELECTMOUSE = 6 
KeyboardSensor_modifier_key_2_MOUSEMOVE = 4 
KeyboardSensor_modifier_key_2_INBETWEEN_MOUSEMOVE = 17 
KeyboardSensor_modifier_key_2_TRACKPADPAN = 14 
KeyboardSensor_modifier_key_2_TRACKPADZOOM = 15 
KeyboardSensor_modifier_key_2_MOUSEROTATE = 16 
KeyboardSensor_modifier_key_2_WHEELUPMOUSE = 10 
KeyboardSensor_modifier_key_2_WHEELDOWNMOUSE = 11 
KeyboardSensor_modifier_key_2_WHEELINMOUSE = 12 
KeyboardSensor_modifier_key_2_WHEELOUTMOUSE = 13 
KeyboardSensor_modifier_key_2_EVT_TWEAK_L = 20482 
KeyboardSensor_modifier_key_2_EVT_TWEAK_M = 20483 
KeyboardSensor_modifier_key_2_EVT_TWEAK_R = 20484 
KeyboardSensor_modifier_key_2_EVT_TWEAK_A = 20485 
KeyboardSensor_modifier_key_2_EVT_TWEAK_S = 20486 
KeyboardSensor_modifier_key_2_A = 97 
KeyboardSensor_modifier_key_2_B = 98 
KeyboardSensor_modifier_key_2_C = 99 
KeyboardSensor_modifier_key_2_D = 100 
KeyboardSensor_modifier_key_2_E = 101 
KeyboardSensor_modifier_key_2_F = 102 
KeyboardSensor_modifier_key_2_G = 103 
KeyboardSensor_modifier_key_2_H = 104 
KeyboardSensor_modifier_key_2_I = 105 
KeyboardSensor_modifier_key_2_J = 106 
KeyboardSensor_modifier_key_2_K = 107 
KeyboardSensor_modifier_key_2_L = 108 
KeyboardSensor_modifier_key_2_M = 109 
KeyboardSensor_modifier_key_2_N = 110 
KeyboardSensor_modifier_key_2_O = 111 
KeyboardSensor_modifier_key_2_P = 112 
KeyboardSensor_modifier_key_2_Q = 113 
KeyboardSensor_modifier_key_2_R = 114 
KeyboardSensor_modifier_key_2_S = 115 
KeyboardSensor_modifier_key_2_T = 116 
KeyboardSensor_modifier_key_2_U = 117 
KeyboardSensor_modifier_key_2_V = 118 
KeyboardSensor_modifier_key_2_W = 119 
KeyboardSensor_modifier_key_2_X = 120 
KeyboardSensor_modifier_key_2_Y = 121 
KeyboardSensor_modifier_key_2_Z = 122 
KeyboardSensor_modifier_key_2_ZERO = 48 
KeyboardSensor_modifier_key_2_ONE = 49 
KeyboardSensor_modifier_key_2_TWO = 50 
KeyboardSensor_modifier_key_2_THREE = 51 
KeyboardSensor_modifier_key_2_FOUR = 52 
KeyboardSensor_modifier_key_2_FIVE = 53 
KeyboardSensor_modifier_key_2_SIX = 54 
KeyboardSensor_modifier_key_2_SEVEN = 55 
KeyboardSensor_modifier_key_2_EIGHT = 56 
KeyboardSensor_modifier_key_2_NINE = 57 
KeyboardSensor_modifier_key_2_LEFT_CTRL = 212 
KeyboardSensor_modifier_key_2_LEFT_ALT = 213 
KeyboardSensor_modifier_key_2_LEFT_SHIFT = 217 
KeyboardSensor_modifier_key_2_RIGHT_ALT = 214 
KeyboardSensor_modifier_key_2_RIGHT_CTRL = 215 
KeyboardSensor_modifier_key_2_RIGHT_SHIFT = 216 
KeyboardSensor_modifier_key_2_OSKEY = 172 
KeyboardSensor_modifier_key_2_GRLESS = 173 
KeyboardSensor_modifier_key_2_ESC = 218 
KeyboardSensor_modifier_key_2_TAB = 219 
KeyboardSensor_modifier_key_2_RET = 220 
KeyboardSensor_modifier_key_2_SPACE = 221 
KeyboardSensor_modifier_key_2_LINE_FEED = 222 
KeyboardSensor_modifier_key_2_BACK_SPACE = 223 
KeyboardSensor_modifier_key_2_DEL = 224 
KeyboardSensor_modifier_key_2_SEMI_COLON = 225 
KeyboardSensor_modifier_key_2_PERIOD = 226 
KeyboardSensor_modifier_key_2_COMMA = 227 
KeyboardSensor_modifier_key_2_QUOTE = 228 
KeyboardSensor_modifier_key_2_ACCENT_GRAVE = 229 
KeyboardSensor_modifier_key_2_MINUS = 230 
KeyboardSensor_modifier_key_2_SLASH = 232 
KeyboardSensor_modifier_key_2_BACK_SLASH = 233 
KeyboardSensor_modifier_key_2_EQUAL = 234 
KeyboardSensor_modifier_key_2_LEFT_BRACKET = 235 
KeyboardSensor_modifier_key_2_RIGHT_BRACKET = 236 
KeyboardSensor_modifier_key_2_LEFT_ARROW = 137 
KeyboardSensor_modifier_key_2_DOWN_ARROW = 138 
KeyboardSensor_modifier_key_2_RIGHT_ARROW = 139 
KeyboardSensor_modifier_key_2_UP_ARROW = 140 
KeyboardSensor_modifier_key_2_NUMPAD_2 = 152 
KeyboardSensor_modifier_key_2_NUMPAD_4 = 154 
KeyboardSensor_modifier_key_2_NUMPAD_6 = 156 
KeyboardSensor_modifier_key_2_NUMPAD_8 = 158 
KeyboardSensor_modifier_key_2_NUMPAD_1 = 151 
KeyboardSensor_modifier_key_2_NUMPAD_3 = 153 
KeyboardSensor_modifier_key_2_NUMPAD_5 = 155 
KeyboardSensor_modifier_key_2_NUMPAD_7 = 157 
KeyboardSensor_modifier_key_2_NUMPAD_9 = 159 
KeyboardSensor_modifier_key_2_NUMPAD_PERIOD = 199 
KeyboardSensor_modifier_key_2_NUMPAD_SLASH = 161 
KeyboardSensor_modifier_key_2_NUMPAD_ASTERIX = 160 
KeyboardSensor_modifier_key_2_NUMPAD_0 = 150 
KeyboardSensor_modifier_key_2_NUMPAD_MINUS = 162 
KeyboardSensor_modifier_key_2_NUMPAD_ENTER = 163 
KeyboardSensor_modifier_key_2_NUMPAD_PLUS = 164 
KeyboardSensor_modifier_key_2_F1 = 300 
KeyboardSensor_modifier_key_2_F2 = 301 
KeyboardSensor_modifier_key_2_F3 = 302 
KeyboardSensor_modifier_key_2_F4 = 303 
KeyboardSensor_modifier_key_2_F5 = 304 
KeyboardSensor_modifier_key_2_F6 = 305 
KeyboardSensor_modifier_key_2_F7 = 306 
KeyboardSensor_modifier_key_2_F8 = 307 
KeyboardSensor_modifier_key_2_F9 = 308 
KeyboardSensor_modifier_key_2_F10 = 309 
KeyboardSensor_modifier_key_2_F11 = 310 
KeyboardSensor_modifier_key_2_F12 = 311 
KeyboardSensor_modifier_key_2_F13 = 312 
KeyboardSensor_modifier_key_2_F14 = 313 
KeyboardSensor_modifier_key_2_F15 = 314 
KeyboardSensor_modifier_key_2_F16 = 315 
KeyboardSensor_modifier_key_2_F17 = 316 
KeyboardSensor_modifier_key_2_F18 = 317 
KeyboardSensor_modifier_key_2_F19 = 318 
KeyboardSensor_modifier_key_2_PAUSE = 165 
KeyboardSensor_modifier_key_2_INSERT = 166 
KeyboardSensor_modifier_key_2_HOME = 167 
KeyboardSensor_modifier_key_2_PAGE_UP = 168 
KeyboardSensor_modifier_key_2_PAGE_DOWN = 169 
KeyboardSensor_modifier_key_2_END = 170 
KeyboardSensor_modifier_key_2_MEDIA_PLAY = 174 
KeyboardSensor_modifier_key_2_MEDIA_STOP = 175 
KeyboardSensor_modifier_key_2_MEDIA_FIRST = 176 
KeyboardSensor_modifier_key_2_MEDIA_LAST = 177 
KeyboardSensor_modifier_key_2_WINDOW_DEACTIVATE = 260 
KeyboardSensor_modifier_key_2_TIMER = 272 
KeyboardSensor_modifier_key_2_TIMER0 = 273 
KeyboardSensor_modifier_key_2_TIMER1 = 274 
KeyboardSensor_modifier_key_2_TIMER2 = 275 
KeyboardSensor_modifier_key_2_NDOF_BUTTON_MENU = 401 
KeyboardSensor_modifier_key_2_NDOF_BUTTON_FIT = 402 
KeyboardSensor_modifier_key_2_NDOF_BUTTON_TOP = 403 
KeyboardSensor_modifier_key_2_NDOF_BUTTON_BOTTOM = 404 
KeyboardSensor_modifier_key_2_NDOF_BUTTON_LEFT = 405 
KeyboardSensor_modifier_key_2_NDOF_BUTTON_RIGHT = 406 
KeyboardSensor_modifier_key_2_NDOF_BUTTON_FRONT = 407 
KeyboardSensor_modifier_key_2_NDOF_BUTTON_BACK = 408 
KeyboardSensor_modifier_key_2_NDOF_BUTTON_ISO1 = 409 
KeyboardSensor_modifier_key_2_NDOF_BUTTON_ISO2 = 410 
KeyboardSensor_modifier_key_2_NDOF_BUTTON_ROLL_CW = 411 
KeyboardSensor_modifier_key_2_NDOF_BUTTON_ROLL_CCW = 412 
KeyboardSensor_modifier_key_2_NDOF_BUTTON_SPIN_CW = 413 
KeyboardSensor_modifier_key_2_NDOF_BUTTON_SPIN_CCW = 414 
KeyboardSensor_modifier_key_2_NDOF_BUTTON_TILT_CW = 415 
KeyboardSensor_modifier_key_2_NDOF_BUTTON_TILT_CCW = 416 
KeyboardSensor_modifier_key_2_NDOF_BUTTON_ROTATE = 417 
KeyboardSensor_modifier_key_2_NDOF_BUTTON_PANZOOM = 418 
KeyboardSensor_modifier_key_2_NDOF_BUTTON_DOMINANT = 419 
KeyboardSensor_modifier_key_2_NDOF_BUTTON_PLUS = 420 
KeyboardSensor_modifier_key_2_NDOF_BUTTON_MINUS = 421 
KeyboardSensor_modifier_key_2_NDOF_BUTTON_1 = 422 
KeyboardSensor_modifier_key_2_NDOF_BUTTON_2 = 423 
KeyboardSensor_modifier_key_2_NDOF_BUTTON_3 = 424 
KeyboardSensor_modifier_key_2_NDOF_BUTTON_4 = 425 
KeyboardSensor_modifier_key_2_NDOF_BUTTON_5 = 426 
KeyboardSensor_modifier_key_2_NDOF_BUTTON_6 = 427 
KeyboardSensor_modifier_key_2_NDOF_BUTTON_7 = 428 
KeyboardSensor_modifier_key_2_NDOF_BUTTON_8 = 429 
KeyboardSensor_modifier_key_2_NDOF_BUTTON_9 = 430 
KeyboardSensor_modifier_key_2_NDOF_BUTTON_10 = 431 

Keyframe_interpolation_CONSTANT = 0 
Keyframe_interpolation_LINEAR = 1 
Keyframe_interpolation_BEZIER = 2 

Keyframe_handle_left_type_FREE = 0 
Keyframe_handle_left_type_VECTOR = 2 
Keyframe_handle_left_type_ALIGNED = 3 
Keyframe_handle_left_type_AUTO = 1 
Keyframe_handle_left_type_AUTO_CLAMPED = 4 

Keyframe_handle_right_type_FREE = 0 
Keyframe_handle_right_type_VECTOR = 2 
Keyframe_handle_right_type_ALIGNED = 3 
Keyframe_handle_right_type_AUTO = 1 
Keyframe_handle_right_type_AUTO_CLAMPED = 4 

Keyframe_type_KEYFRAME = 0 
Keyframe_type_BREAKDOWN = 2 
Keyframe_type_EXTREME = 1 
Keyframe_type_JITTER = 3 

KeyingSet_bl_options_INSERTKEY_NEEDED = 1 
KeyingSet_bl_options_INSERTKEY_VISUAL = 2 
KeyingSet_bl_options_INSERTKEY_XYZ_TO_RGB = 32 

KeyingSetInfo_bl_options_INSERTKEY_NEEDED = 1 
KeyingSetInfo_bl_options_INSERTKEY_VISUAL = 2 
KeyingSetInfo_bl_options_INSERTKEY_XYZ_TO_RGB = 32 

KeyingSetPath_group_method_NAMED = 0 
KeyingSetPath_group_method_NONE = 1 
KeyingSetPath_group_method_KEYINGSET = 2 

KeyingSetPath_id_type_ACTION = 17217 
KeyingSetPath_id_type_ARMATURE = 21057 
KeyingSetPath_id_type_BRUSH = 21058 
KeyingSetPath_id_type_CAMERA = 16707 
KeyingSetPath_id_type_CURVE = 21827 
KeyingSetPath_id_type_FONT = 18006 
KeyingSetPath_id_type_GREASEPENCIL = 17479 
KeyingSetPath_id_type_GROUP = 21063 
KeyingSetPath_id_type_IMAGE = 19785 
KeyingSetPath_id_type_KEY = 17739 
KeyingSetPath_id_type_LAMP = 16716 
KeyingSetPath_id_type_LIBRARY = 18764 
KeyingSetPath_id_type_LATTICE = 21580 
KeyingSetPath_id_type_MATERIAL = 16717 
KeyingSetPath_id_type_META = 16973 
KeyingSetPath_id_type_MESH = 17741 
KeyingSetPath_id_type_NODETREE = 21582 
KeyingSetPath_id_type_OBJECT = 16975 
KeyingSetPath_id_type_PARTICLE = 16720 
KeyingSetPath_id_type_SCENE = 17235 
KeyingSetPath_id_type_SCREEN = 21075 
KeyingSetPath_id_type_SPEAKER = 19283 
KeyingSetPath_id_type_SOUND = 20307 
KeyingSetPath_id_type_TEXT = 22612 
KeyingSetPath_id_type_TEXTURE = 17748 
KeyingSetPath_id_type_WORLD = 20311 
KeyingSetPath_id_type_WINDOWMANAGER = 19799 

KeyingSetPath_bl_options_INSERTKEY_NEEDED = 1 
KeyingSetPath_bl_options_INSERTKEY_VISUAL = 2 
KeyingSetPath_bl_options_INSERTKEY_XYZ_TO_RGB = 32 

KinematicConstraint_reference_axis_BONE = 0 
KinematicConstraint_reference_axis_TARGET = 16384 

KinematicConstraint_ik_type_COPY_POSE = 0 
KinematicConstraint_ik_type_DISTANCE = 1 

KinematicConstraint_limit_mode_LIMITDIST_INSIDE = 0 
KinematicConstraint_limit_mode_LIMITDIST_OUTSIDE = 1 
KinematicConstraint_limit_mode_LIMITDIST_ONSURFACE = 2 

Lamp_type_POINT = 0 
Lamp_type_SUN = 1 
Lamp_type_SPOT = 2 
Lamp_type_HEMI = 3 
Lamp_type_AREA = 4 

LampSkySettings_sky_blend_type_MIX = 0 
LampSkySettings_sky_blend_type_ADD = 1 
LampSkySettings_sky_blend_type_MULTIPLY = 2 
LampSkySettings_sky_blend_type_SUBTRACT = 3 
LampSkySettings_sky_blend_type_SCREEN = 4 
LampSkySettings_sky_blend_type_DIVIDE = 5 
LampSkySettings_sky_blend_type_DIFFERENCE = 6 
LampSkySettings_sky_blend_type_DARKEN = 7 
LampSkySettings_sky_blend_type_LIGHTEN = 8 
LampSkySettings_sky_blend_type_OVERLAY = 9 
LampSkySettings_sky_blend_type_DODGE = 10 
LampSkySettings_sky_blend_type_BURN = 11 
LampSkySettings_sky_blend_type_HUE = 12 
LampSkySettings_sky_blend_type_SATURATION = 13 
LampSkySettings_sky_blend_type_VALUE = 14 
LampSkySettings_sky_blend_type_COLOR = 15 
LampSkySettings_sky_blend_type_SOFT_LIGHT = 16 
LampSkySettings_sky_blend_type_LINEAR_LIGHT = 17 

LampSkySettings_sky_color_space_SMPTE = 0 
LampSkySettings_sky_color_space_REC709 = 1 
LampSkySettings_sky_color_space_CIE = 2 

LampTextureSlot_texture_coords_GLOBAL = 8 
LampTextureSlot_texture_coords_VIEW = 128 
LampTextureSlot_texture_coords_OBJECT = 32 

Lattice_interpolation_type_u_KEY_LINEAR = 0 
Lattice_interpolation_type_u_KEY_CARDINAL = 1 
Lattice_interpolation_type_u_KEY_BSPLINE = 2 

Lattice_interpolation_type_v_KEY_LINEAR = 0 
Lattice_interpolation_type_v_KEY_CARDINAL = 1 
Lattice_interpolation_type_v_KEY_BSPLINE = 2 

Lattice_interpolation_type_w_KEY_LINEAR = 0 
Lattice_interpolation_type_w_KEY_CARDINAL = 1 
Lattice_interpolation_type_w_KEY_BSPLINE = 2 

LimitDistanceConstraint_limit_mode_LIMITDIST_INSIDE = 0 
LimitDistanceConstraint_limit_mode_LIMITDIST_OUTSIDE = 1 
LimitDistanceConstraint_limit_mode_LIMITDIST_ONSURFACE = 2 

LockedTrackConstraint_lock_axis_LOCK_X = 0 
LockedTrackConstraint_lock_axis_LOCK_Y = 1 
LockedTrackConstraint_lock_axis_LOCK_Z = 2 

LockedTrackConstraint_track_axis_TRACK_X = 0 
LockedTrackConstraint_track_axis_TRACK_Y = 1 
LockedTrackConstraint_track_axis_TRACK_Z = 2 
LockedTrackConstraint_track_axis_TRACK_NEGATIVE_X = 3 
LockedTrackConstraint_track_axis_TRACK_NEGATIVE_Y = 4 
LockedTrackConstraint_track_axis_TRACK_NEGATIVE_Z = 5 

Macro_bl_options_REGISTER = 1 
Macro_bl_options_UNDO = 2 
Macro_bl_options_BLOCKING = 4 
Macro_bl_options_MACRO = 8 
Macro_bl_options_GRAB_POINTER = 16 
Macro_bl_options_PRESET = 32 
Macro_bl_options_INTERNAL = 64 

MaintainVolumeConstraint_free_axis_SAMEVOL_X = 0 
MaintainVolumeConstraint_free_axis_SAMEVOL_Y = 1 
MaintainVolumeConstraint_free_axis_SAMEVOL_Z = 2 

MarbleTexture_noise_basis_BLENDER_ORIGINAL = 0 
MarbleTexture_noise_basis_ORIGINAL_PERLIN = 1 
MarbleTexture_noise_basis_IMPROVED_PERLIN = 2 
MarbleTexture_noise_basis_VORONOI_F1 = 3 
MarbleTexture_noise_basis_VORONOI_F2 = 4 
MarbleTexture_noise_basis_VORONOI_F3 = 5 
MarbleTexture_noise_basis_VORONOI_F4 = 6 
MarbleTexture_noise_basis_VORONOI_F2_F1 = 7 
MarbleTexture_noise_basis_VORONOI_CRACKLE = 8 
MarbleTexture_noise_basis_CELL_NOISE = 14 

MarbleTexture_noise_basis_2_SIN = 0 
MarbleTexture_noise_basis_2_SAW = 1 
MarbleTexture_noise_basis_2_TRI = 2 

MarbleTexture_noise_type_SOFT_NOISE = 0 
MarbleTexture_noise_type_HARD_NOISE = 1 

MarbleTexture_marble_type_SOFT = 0 
MarbleTexture_marble_type_SHARP = 1 
MarbleTexture_marble_type_SHARPER = 2 

MaskModifier_mode_VERTEX_GROUP = 0 
MaskModifier_mode_ARMATURE = 1 

Material_diffuse_ramp_blend_MIX = 0 
Material_diffuse_ramp_blend_ADD = 1 
Material_diffuse_ramp_blend_MULTIPLY = 2 
Material_diffuse_ramp_blend_SUBTRACT = 3 
Material_diffuse_ramp_blend_SCREEN = 4 
Material_diffuse_ramp_blend_DIVIDE = 5 
Material_diffuse_ramp_blend_DIFFERENCE = 6 
Material_diffuse_ramp_blend_DARKEN = 7 
Material_diffuse_ramp_blend_LIGHTEN = 8 
Material_diffuse_ramp_blend_OVERLAY = 9 
Material_diffuse_ramp_blend_DODGE = 10 
Material_diffuse_ramp_blend_BURN = 11 
Material_diffuse_ramp_blend_HUE = 12 
Material_diffuse_ramp_blend_SATURATION = 13 
Material_diffuse_ramp_blend_VALUE = 14 
Material_diffuse_ramp_blend_COLOR = 15 
Material_diffuse_ramp_blend_SOFT_LIGHT = 16 
Material_diffuse_ramp_blend_LINEAR_LIGHT = 17 

Material_specular_ramp_blend_MIX = 0 
Material_specular_ramp_blend_ADD = 1 
Material_specular_ramp_blend_MULTIPLY = 2 
Material_specular_ramp_blend_SUBTRACT = 3 
Material_specular_ramp_blend_SCREEN = 4 
Material_specular_ramp_blend_DIVIDE = 5 
Material_specular_ramp_blend_DIFFERENCE = 6 
Material_specular_ramp_blend_DARKEN = 7 
Material_specular_ramp_blend_LIGHTEN = 8 
Material_specular_ramp_blend_OVERLAY = 9 
Material_specular_ramp_blend_DODGE = 10 
Material_specular_ramp_blend_BURN = 11 
Material_specular_ramp_blend_HUE = 12 
Material_specular_ramp_blend_SATURATION = 13 
Material_specular_ramp_blend_VALUE = 14 
Material_specular_ramp_blend_COLOR = 15 
Material_specular_ramp_blend_SOFT_LIGHT = 16 
Material_specular_ramp_blend_LINEAR_LIGHT = 17 

Material_diffuse_ramp_input_SHADER = 0 
Material_diffuse_ramp_input_ENERGY = 1 
Material_diffuse_ramp_input_NORMAL = 2 
Material_diffuse_ramp_input_RESULT = 3 

Material_diffuse_shader_LAMBERT = 0 
Material_diffuse_shader_OREN_NAYAR = 1 
Material_diffuse_shader_TOON = 2 
Material_diffuse_shader_MINNAERT = 3 
Material_diffuse_shader_FRESNEL = 4 

Material_preview_render_type_FLAT = 0 
Material_preview_render_type_SPHERE = 1 
Material_preview_render_type_CUBE = 2 
Material_preview_render_type_MONKEY = 3 
Material_preview_render_type_HAIR = 10 
Material_preview_render_type_SPHERE_A = 4 

Material_shadow_only_type_SHADOW_ONLY_OLD = 0 
Material_shadow_only_type_SHADOW_ONLY = 1 
Material_shadow_only_type_SHADOW_ONLY_SHADED = 2 

Material_specular_ramp_input_SHADER = 0 
Material_specular_ramp_input_ENERGY = 1 
Material_specular_ramp_input_NORMAL = 2 
Material_specular_ramp_input_RESULT = 3 

Material_specular_shader_COOKTORR = 0 
Material_specular_shader_PHONG = 1 
Material_specular_shader_BLINN = 2 
Material_specular_shader_TOON = 3 
Material_specular_shader_WARDISO = 4 

Material_transparency_method_MASK = 0 
Material_transparency_method_Z_TRANSPARENCY = 64 
Material_transparency_method_RAYTRACE = 131072 

Material_type_SURFACE = 0 
Material_type_WIRE = 3 
Material_type_VOLUME = 2 
Material_type_HALO = 1 

MaterialRaytraceMirror_fade_to_FADE_TO_SKY = 0 
MaterialRaytraceMirror_fade_to_FADE_TO_MATERIAL = 1 

MaterialSlot_link_OBJECT = 1 
MaterialSlot_link_DATA = 0 

MaterialTextureSlot_bump_method_BUMP_ORIGINAL = 0 
MaterialTextureSlot_bump_method_BUMP_COMPATIBLE = 128 
MaterialTextureSlot_bump_method_BUMP_DEFAULT = 256 
MaterialTextureSlot_bump_method_BUMP_BEST_QUALITY = 512 

MaterialTextureSlot_bump_objectspace_BUMP_VIEWSPACE = 0 
MaterialTextureSlot_bump_objectspace_BUMP_OBJECTSPACE = 1024 
MaterialTextureSlot_bump_objectspace_BUMP_TEXTURESPACE = 2048 

MaterialTextureSlot_mapping_FLAT = 0 
MaterialTextureSlot_mapping_CUBE = 1 
MaterialTextureSlot_mapping_TUBE = 2 
MaterialTextureSlot_mapping_SPHERE = 3 

MaterialTextureSlot_normal_map_space_CAMERA = 0 
MaterialTextureSlot_normal_map_space_WORLD = 1 
MaterialTextureSlot_normal_map_space_OBJECT = 2 
MaterialTextureSlot_normal_map_space_TANGENT = 3 

MaterialTextureSlot_texture_coords_GLOBAL = 8 
MaterialTextureSlot_texture_coords_OBJECT = 32 
MaterialTextureSlot_texture_coords_UV = 16 
MaterialTextureSlot_texture_coords_ORCO = 1 
MaterialTextureSlot_texture_coords_STRAND = 8192 
MaterialTextureSlot_texture_coords_STICKY = 256 
MaterialTextureSlot_texture_coords_WINDOW = 1024 
MaterialTextureSlot_texture_coords_NORMAL = 4 
MaterialTextureSlot_texture_coords_REFLECTION = 2 
MaterialTextureSlot_texture_coords_STRESS = 16384 
MaterialTextureSlot_texture_coords_TANGENT = 4096 

MaterialTextureSlot_mapping_x_NONE = 0 
MaterialTextureSlot_mapping_x_X = 1 
MaterialTextureSlot_mapping_x_Y = 2 
MaterialTextureSlot_mapping_x_Z = 3 

MaterialTextureSlot_mapping_y_NONE = 0 
MaterialTextureSlot_mapping_y_X = 1 
MaterialTextureSlot_mapping_y_Y = 2 
MaterialTextureSlot_mapping_y_Z = 3 

MaterialTextureSlot_mapping_z_NONE = 0 
MaterialTextureSlot_mapping_z_X = 1 
MaterialTextureSlot_mapping_z_Y = 2 
MaterialTextureSlot_mapping_z_Z = 3 

MaterialVolume_light_method_SHADELESS = 0 
MaterialVolume_light_method_SHADOWED = 2 
MaterialVolume_light_method_SHADED = 1 
MaterialVolume_light_method_MULTIPLE_SCATTERING = 3 
MaterialVolume_light_method_SHADED_PLUS_MULTIPLE_SCATTERING = 4 

MaterialVolume_step_method_RANDOMIZED = 0 
MaterialVolume_step_method_CONSTANT = 1 

MeshTextureFace_blend_type_OPAQUE = 0 
MeshTextureFace_blend_type_ADD = 1 
MeshTextureFace_blend_type_ALPHA = 2 
MeshTextureFace_blend_type_CLIPALPHA = 4 

MessageActuator_body_type_TEXT = 0 
MessageActuator_body_type_PROPERTY = 1 

MetaBall_update_method_UPDATE_ALWAYS = 0 
MetaBall_update_method_HALFRES = 1 
MetaBall_update_method_FAST = 2 
MetaBall_update_method_NEVER = 3 

MetaElement_type_BALL = 0 
MetaElement_type_CAPSULE = 4 
MetaElement_type_PLANE = 5 
MetaElement_type_ELLIPSOID = 6 
MetaElement_type_CUBE = 7 

Modifier_type_ARRAY = 12 
Modifier_type_BEVEL = 24 
Modifier_type_BOOLEAN = 11 
Modifier_type_BUILD = 4 
Modifier_type_DECIMATE = 6 
Modifier_type_EDGE_SPLIT = 13 
Modifier_type_MASK = 27 
Modifier_type_MIRROR = 5 
Modifier_type_MULTIRES = 29 
Modifier_type_SCREW = 34 
Modifier_type_SOLIDIFY = 33 
Modifier_type_SUBSURF = 1 
Modifier_type_UV_PROJECT = 15 
Modifier_type_ARMATURE = 8 
Modifier_type_CAST = 17 
Modifier_type_CURVE = 3 
Modifier_type_DISPLACE = 14 
Modifier_type_HOOK = 9 
Modifier_type_LATTICE = 2 
Modifier_type_MESH_DEFORM = 18 
Modifier_type_SHRINKWRAP = 25 
Modifier_type_SIMPLE_DEFORM = 28 
Modifier_type_SMOOTH = 16 
Modifier_type_WARP = 35 
Modifier_type_WAVE = 7 
Modifier_type_CLOTH = 22 
Modifier_type_COLLISION = 23 
Modifier_type_EXPLODE = 21 
Modifier_type_FLUID_SIMULATION = 26 
Modifier_type_PARTICLE_INSTANCE = 20 
Modifier_type_PARTICLE_SYSTEM = 19 
Modifier_type_SMOKE = 31 
Modifier_type_SOFT_BODY = 10 
Modifier_type_SURFACE = 30 

MouseSensor_mouse_event_LEFTCLICK = 1 
MouseSensor_mouse_event_MIDDLECLICK = 2 
MouseSensor_mouse_event_RIGHTCLICK = 4 
MouseSensor_mouse_event_WHEELUP = 5 
MouseSensor_mouse_event_WHEELDOWN = 6 
MouseSensor_mouse_event_MOVEMENT = 8 
MouseSensor_mouse_event_MOUSEOVER = 16 
MouseSensor_mouse_event_MOUSEOVERANY = 32 

MultiresModifier_subdivision_type_CATMULL_CLARK = 0 
MultiresModifier_subdivision_type_SIMPLE = 1 

MusgraveTexture_noise_basis_BLENDER_ORIGINAL = 0 
MusgraveTexture_noise_basis_ORIGINAL_PERLIN = 1 
MusgraveTexture_noise_basis_IMPROVED_PERLIN = 2 
MusgraveTexture_noise_basis_VORONOI_F1 = 3 
MusgraveTexture_noise_basis_VORONOI_F2 = 4 
MusgraveTexture_noise_basis_VORONOI_F3 = 5 
MusgraveTexture_noise_basis_VORONOI_F4 = 6 
MusgraveTexture_noise_basis_VORONOI_F2_F1 = 7 
MusgraveTexture_noise_basis_VORONOI_CRACKLE = 8 
MusgraveTexture_noise_basis_CELL_NOISE = 14 

MusgraveTexture_musgrave_type_MULTIFRACTAL = 0 
MusgraveTexture_musgrave_type_RIDGED_MULTIFRACTAL = 1 
MusgraveTexture_musgrave_type_HYBRID_MULTIFRACTAL = 2 
MusgraveTexture_musgrave_type_FBM = 3 
MusgraveTexture_musgrave_type_HETERO_TERRAIN = 4 

NlaStrip_blend_type_REPLACE = 0 
NlaStrip_blend_type_ADD = 1 
NlaStrip_blend_type_SUBTRACT = 2 
NlaStrip_blend_type_MULITPLY = 3 

NlaStrip_extrapolation_NOTHING = 2 
NlaStrip_extrapolation_HOLD = 0 
NlaStrip_extrapolation_HOLD_FORWARD = 1 

NlaStrip_type_CLIP = 0 
NlaStrip_type_TRANSITION = 1 
NlaStrip_type_META = 2 
NlaStrip_type_SOUND = 3 

NodeSocket_type_VALUE = 0 
NodeSocket_type_VECTOR = 1 
NodeSocket_type_RGBA = 2 

NodeTree_type_SHADER = 0 
NodeTree_type_COMPOSITE = 1 
NodeTree_type_TEXTURE = 2 

Object_draw_bounds_type_BOX = 0 
Object_draw_bounds_type_SPHERE = 1 
Object_draw_bounds_type_CYLINDER = 2 
Object_draw_bounds_type_CONE = 3 
Object_draw_bounds_type_POLYHEDRON = 4 
Object_draw_bounds_type_CAPSULE = 7 

Object_dupli_type_NONE = 0 
Object_dupli_type_FRAMES = 8 
Object_dupli_type_VERTS = 16 
Object_dupli_type_FACES = 512 
Object_dupli_type_GROUP = 256 

Object_empty_draw_type_PLAIN_AXES = 2 
Object_empty_draw_type_ARROWS = 1 
Object_empty_draw_type_SINGLE_ARROW = 4 
Object_empty_draw_type_CIRCLE = 3 
Object_empty_draw_type_CUBE = 5 
Object_empty_draw_type_SPHERE = 6 
Object_empty_draw_type_CONE = 7 
Object_empty_draw_type_IMAGE = 8 

Object_draw_type_BOUNDS = 1 
Object_draw_type_WIRE = 2 
Object_draw_type_SOLID = 3 
Object_draw_type_TEXTURED = 5 

Object_mode_OBJECT = 0 
Object_mode_EDIT = 1 
Object_mode_SCULPT = 2 
Object_mode_VERTEX_PAINT = 4 
Object_mode_WEIGHT_PAINT = 8 
Object_mode_TEXTURE_PAINT = 16 
Object_mode_PARTICLE_EDIT = 32 
Object_mode_POSE = 64 

Object_parent_type_OBJECT = 0 
Object_parent_type_CURVE = 1 
Object_parent_type_KEY = 2 
Object_parent_type_ARMATURE = 4 
Object_parent_type_LATTICE = 4 
Object_parent_type_VERTEX = 5 
Object_parent_type_VERTEX_3 = 6 
Object_parent_type_BONE = 7 

Object_rotation_mode_QUATERNION = 0 
Object_rotation_mode_XYZ = 1 
Object_rotation_mode_XZY = 2 
Object_rotation_mode_YXZ = 3 
Object_rotation_mode_YZX = 4 
Object_rotation_mode_ZXY = 5 
Object_rotation_mode_ZYX = 6 
Object_rotation_mode_AXIS_ANGLE = -1 

Object_track_axis_POS_X = 0 
Object_track_axis_POS_Y = 1 
Object_track_axis_POS_Z = 2 
Object_track_axis_NEG_X = 3 
Object_track_axis_NEG_Y = 4 
Object_track_axis_NEG_Z = 5 

Object_type_MESH = 1 
Object_type_CURVE = 2 
Object_type_SURFACE = 3 
Object_type_META = 5 
Object_type_FONT = 4 
Object_type_ARMATURE = 25 
Object_type_LATTICE = 22 
Object_type_EMPTY = 0 
Object_type_CAMERA = 11 
Object_type_LAMP = 10 
Object_type_SPEAKER = 12 

Object_up_axis_X = 0 
Object_up_axis_Y = 1 
Object_up_axis_Z = 2 

ObjectActuator_mode_OBJECT_NORMAL = 0 
ObjectActuator_mode_OBJECT_SERVO = 1 

ObstacleFluidSettings_slip_type_NOSLIP = 512 
ObstacleFluidSettings_slip_type_PARTIALSLIP = 1024 
ObstacleFluidSettings_slip_type_FREESLIP = 2048 

ObstacleFluidSettings_volume_initialization_VOLUME = 1 
ObstacleFluidSettings_volume_initialization_SHELL = 2 
ObstacleFluidSettings_volume_initialization_BOTH = 3 

Operator_bl_options_REGISTER = 1 
Operator_bl_options_UNDO = 2 
Operator_bl_options_BLOCKING = 4 
Operator_bl_options_MACRO = 8 
Operator_bl_options_GRAB_POINTER = 16 
Operator_bl_options_PRESET = 32 
Operator_bl_options_INTERNAL = 64 

OutflowFluidSettings_volume_initialization_VOLUME = 1 
OutflowFluidSettings_volume_initialization_SHELL = 2 
OutflowFluidSettings_volume_initialization_BOTH = 3 

Panel_bl_options_DEFAULT_CLOSED = 1 
Panel_bl_options_HIDE_HEADER = 2 

Panel_bl_region_type_WINDOW = 0 
Panel_bl_region_type_HEADER = 1 
Panel_bl_region_type_CHANNELS = 2 
Panel_bl_region_type_TEMPORARY = 3 
Panel_bl_region_type_UI = 4 
Panel_bl_region_type_TOOLS = 5 
Panel_bl_region_type_TOOL_PROPS = 6 
Panel_bl_region_type_PREVIEW = 7 

Panel_bl_space_type_EMPTY = 0 
Panel_bl_space_type_VIEW_3D = 1 
Panel_bl_space_type_GRAPH_EDITOR = 2 
Panel_bl_space_type_OUTLINER = 3 
Panel_bl_space_type_PROPERTIES = 4 
Panel_bl_space_type_FILE_BROWSER = 5 
Panel_bl_space_type_IMAGE_EDITOR = 6 
Panel_bl_space_type_INFO = 7 
Panel_bl_space_type_SEQUENCE_EDITOR = 8 
Panel_bl_space_type_TEXT_EDITOR = 9 
Panel_bl_space_type_AUDIO_WINDOW = 11 
Panel_bl_space_type_DOPESHEET_EDITOR = 12 
Panel_bl_space_type_NLA_EDITOR = 13 
Panel_bl_space_type_SCRIPTS_WINDOW = 14 
Panel_bl_space_type_TIMELINE = 15 
Panel_bl_space_type_NODE_EDITOR = 16 
Panel_bl_space_type_LOGIC_EDITOR = 17 
Panel_bl_space_type_CONSOLE = 18 
Panel_bl_space_type_USER_PREFERENCES = 19 

ParentActuator_mode_SETPARENT = 0 
ParentActuator_mode_REMOVEPARENT = 1 

Particle_alive_state_DEAD = 1 
Particle_alive_state_UNBORN = 2 
Particle_alive_state_ALIVE = 3 
Particle_alive_state_DYING = 4 

ParticleBrush_length_mode_GROW = 0 
ParticleBrush_length_mode_SHRINK = 1 

ParticleBrush_puff_mode_ADD = 0 
ParticleBrush_puff_mode_SUB = 1 

ParticleEdit_select_mode_PATH = 1 
ParticleEdit_select_mode_POINT = 2 
ParticleEdit_select_mode_TIP = 4 

ParticleEdit_tool_NONE = -1 
ParticleEdit_tool_COMB = 0 
ParticleEdit_tool_SMOOTH = 5 
ParticleEdit_tool_ADD = 4 
ParticleEdit_tool_LENGTH = 2 
ParticleEdit_tool_PUFF = 3 
ParticleEdit_tool_CUT = 1 
ParticleEdit_tool_WEIGHT = 6 

ParticleEdit_type_PARTICLES = 0 
ParticleEdit_type_SOFT_BODY = 1 
ParticleEdit_type_CLOTH = 2 

ParticleInstanceModifier_axis_X = 0 
ParticleInstanceModifier_axis_Y = 1 
ParticleInstanceModifier_axis_Z = 2 

ParticleSettings_billboard_align_X = 0 
ParticleSettings_billboard_align_Y = 1 
ParticleSettings_billboard_align_Z = 2 
ParticleSettings_billboard_align_VIEW = 3 
ParticleSettings_billboard_align_VEL = 4 

ParticleSettings_angular_velocity_mode_NONE = 0 
ParticleSettings_angular_velocity_mode_SPIN = 1 
ParticleSettings_angular_velocity_mode_RAND = 2 

ParticleSettings_billboard_animation_NONE = 0 
ParticleSettings_billboard_animation_AGE = 1 
ParticleSettings_billboard_animation_FRAME = 3 
ParticleSettings_billboard_animation_ANGLE = 2 

ParticleSettings_kink_axis_X = 0 
ParticleSettings_kink_axis_Y = 1 
ParticleSettings_kink_axis_Z = 2 

ParticleSettings_child_type_NONE = 0 
ParticleSettings_child_type_SIMPLE = 1 
ParticleSettings_child_type_INTERPOLATED = 2 

ParticleSettings_distribution_NONE = 0 
ParticleSettings_distribution_RENDER = 10 
ParticleSettings_distribution_DOT = 1 
ParticleSettings_distribution_CIRC = 2 
ParticleSettings_distribution_CROSS = 3 
ParticleSettings_distribution_AXIS = 4 

ParticleSettings_draw_color_NONE = 0 
ParticleSettings_draw_color_MATERIAL = 1 
ParticleSettings_draw_color_VELOCITY = 2 
ParticleSettings_draw_color_ACCELERATION = 3 

ParticleSettings_emit_from_VERT = 0 
ParticleSettings_emit_from_FACE = 1 
ParticleSettings_emit_from_VOLUME = 2 

ParticleSettings_integrator_EULER = 0 
ParticleSettings_integrator_VERLET = 3 
ParticleSettings_integrator_MIDPOINT = 1 
ParticleSettings_integrator_RK4 = 2 

ParticleSettings_kink_NO = 0 
ParticleSettings_kink_CURL = 1 
ParticleSettings_kink_RADIAL = 2 
ParticleSettings_kink_WAVE = 3 
ParticleSettings_kink_BRAID = 4 

ParticleSettings_billboard_offset_split_NONE = 0 
ParticleSettings_billboard_offset_split_LINEAR = 1 
ParticleSettings_billboard_offset_split_RANDOM = 2 

ParticleSettings_draw_method_NONE = 0 
ParticleSettings_draw_method_RENDER = 10 
ParticleSettings_draw_method_DOT = 1 
ParticleSettings_draw_method_CIRC = 2 
ParticleSettings_draw_method_CROSS = 3 
ParticleSettings_draw_method_AXIS = 4 

ParticleSettings_render_type_NONE = 0 
ParticleSettings_render_type_HALO = 1 
ParticleSettings_render_type_LINE = 5 
ParticleSettings_render_type_PATH = 6 
ParticleSettings_render_type_OBJECT = 7 
ParticleSettings_render_type_GROUP = 8 
ParticleSettings_render_type_BILLBOARD = 9 

ParticleSettings_physics_type_NO = 0 
ParticleSettings_physics_type_NEWTON = 1 
ParticleSettings_physics_type_KEYED = 2 
ParticleSettings_physics_type_BOIDS = 3 
ParticleSettings_physics_type_FLUID = 4 

ParticleSettings_react_event_DEATH = 0 
ParticleSettings_react_event_COLLIDE = 1 
ParticleSettings_react_event_NEAR = 2 

ParticleSettings_rotation_mode_NONE = 0 
ParticleSettings_rotation_mode_NOR = 1 
ParticleSettings_rotation_mode_VEL = 2 
ParticleSettings_rotation_mode_GLOB_X = 3 
ParticleSettings_rotation_mode_GLOB_Y = 4 
ParticleSettings_rotation_mode_GLOB_Z = 5 
ParticleSettings_rotation_mode_OB_X = 6 
ParticleSettings_rotation_mode_OB_Y = 7 
ParticleSettings_rotation_mode_OB_Z = 8 

ParticleSettings_type_EMITTER = 0 
ParticleSettings_type_HAIR = 2 

ParticleSettingsTextureSlot_mapping_FLAT = 0 
ParticleSettingsTextureSlot_mapping_CUBE = 1 
ParticleSettingsTextureSlot_mapping_TUBE = 2 
ParticleSettingsTextureSlot_mapping_SPHERE = 3 

ParticleSettingsTextureSlot_texture_coords_GLOBAL = 8 
ParticleSettingsTextureSlot_texture_coords_OBJECT = 32 
ParticleSettingsTextureSlot_texture_coords_UV = 16 
ParticleSettingsTextureSlot_texture_coords_ORCO = 1 
ParticleSettingsTextureSlot_texture_coords_STRAND = 8192 

ParticleSettingsTextureSlot_mapping_x_NONE = 0 
ParticleSettingsTextureSlot_mapping_x_X = 1 
ParticleSettingsTextureSlot_mapping_x_Y = 2 
ParticleSettingsTextureSlot_mapping_x_Z = 3 

ParticleSettingsTextureSlot_mapping_y_NONE = 0 
ParticleSettingsTextureSlot_mapping_y_X = 1 
ParticleSettingsTextureSlot_mapping_y_Y = 2 
ParticleSettingsTextureSlot_mapping_y_Z = 3 

ParticleSettingsTextureSlot_mapping_z_NONE = 0 
ParticleSettingsTextureSlot_mapping_z_X = 1 
ParticleSettingsTextureSlot_mapping_z_Y = 2 
ParticleSettingsTextureSlot_mapping_z_Z = 3 

ParticleTarget_alliance_FRIEND = 1 
ParticleTarget_alliance_NEUTRAL = 0 
ParticleTarget_alliance_ENEMY = 2 

PivotConstraint_rotation_range_ALWAYS_ACTIVE = -1 
PivotConstraint_rotation_range_NX = 0 
PivotConstraint_rotation_range_NY = 1 
PivotConstraint_rotation_range_NZ = 2 
PivotConstraint_rotation_range_X = 3 
PivotConstraint_rotation_range_Y = 4 
PivotConstraint_rotation_range_Z = 5 

PointCache_compression_NO = 0 
PointCache_compression_LIGHT = 1 
PointCache_compression_HEAVY = 2 

PointDensity_color_source_CONSTANT = 0 
PointDensity_color_source_PARTICLE_AGE = 1 
PointDensity_color_source_PARTICLE_SPEED = 2 
PointDensity_color_source_PARTICLE_VELOCITY = 3 

PointDensity_falloff_STANDARD = 0 
PointDensity_falloff_SMOOTH = 1 
PointDensity_falloff_SOFT = 2 
PointDensity_falloff_CONSTANT = 3 
PointDensity_falloff_ROOT = 4 
PointDensity_falloff_PARTICLE_AGE = 5 
PointDensity_falloff_PARTICLE_VELOCITY = 6 

PointDensity_noise_basis_BLENDER_ORIGINAL = 0 
PointDensity_noise_basis_ORIGINAL_PERLIN = 1 
PointDensity_noise_basis_IMPROVED_PERLIN = 2 
PointDensity_noise_basis_VORONOI_F1 = 3 
PointDensity_noise_basis_VORONOI_F2 = 4 
PointDensity_noise_basis_VORONOI_F3 = 5 
PointDensity_noise_basis_VORONOI_F4 = 6 
PointDensity_noise_basis_VORONOI_F2_F1 = 7 
PointDensity_noise_basis_VORONOI_CRACKLE = 8 
PointDensity_noise_basis_CELL_NOISE = 14 

PointDensity_particle_cache_space_OBJECT_LOCATION = 0 
PointDensity_particle_cache_space_OBJECT_SPACE = 1 
PointDensity_particle_cache_space_WORLD_SPACE = 2 

PointDensity_point_source_PARTICLE_SYSTEM = 0 
PointDensity_point_source_OBJECT = 1 

PointDensity_turbulence_influence_STATIC = 0 
PointDensity_turbulence_influence_PARTICLE_VELOCITY = 1 
PointDensity_turbulence_influence_PARTICLE_AGE = 2 
PointDensity_turbulence_influence_GLOBAL_TIME = 3 

PointDensity_vertex_cache_space_OBJECT_LOCATION = 0 
PointDensity_vertex_cache_space_OBJECT_SPACE = 1 
PointDensity_vertex_cache_space_WORLD_SPACE = 2 

PointLamp_falloff_type_CONSTANT = 0 
PointLamp_falloff_type_INVERSE_LINEAR = 1 
PointLamp_falloff_type_INVERSE_SQUARE = 2 
PointLamp_falloff_type_CUSTOM_CURVE = 3 
PointLamp_falloff_type_LINEAR_QUADRATIC_WEIGHTED = 4 

PointLamp_shadow_method_NOSHADOW = 0 
PointLamp_shadow_method_RAY_SHADOW = 8192 

PointLamp_shadow_ray_sample_method_ADAPTIVE_QMC = 1 
PointLamp_shadow_ray_sample_method_CONSTANT_QMC = 2 

Pose_ik_solver_LEGACY = 0 
Pose_ik_solver_ITASC = 1 

PoseBone_rotation_mode_QUATERNION = 0 
PoseBone_rotation_mode_XYZ = 1 
PoseBone_rotation_mode_XZY = 2 
PoseBone_rotation_mode_YXZ = 3 
PoseBone_rotation_mode_YZX = 4 
PoseBone_rotation_mode_ZXY = 5 
PoseBone_rotation_mode_ZYX = 6 
PoseBone_rotation_mode_AXIS_ANGLE = -1 

Property_subtype_NONE = 0 
Property_subtype_FILE_PATH = 1 
Property_subtype_DIRECTORY_PATH = 2 
Property_subtype_UNSIGNED = 13 
Property_subtype_PERCENTAGE = 14 
Property_subtype_FACTOR = 15 
Property_subtype_ANGLE = 327696 
Property_subtype_TIME = 393233 
Property_subtype_DISTANCE = 65554 
Property_subtype_COLOR = 20 
Property_subtype_TRANSLATION = 65557 
Property_subtype_DIRECTION = 22 
Property_subtype_MATRIX = 25 
Property_subtype_EULER = 327706 
Property_subtype_QUATERNION = 27 
Property_subtype_XYZ = 29 
Property_subtype_COLOR_GAMMA = 30 
Property_subtype_COORDINATES = 31 
Property_subtype_LAYER = 40 
Property_subtype_LAYER_MEMBERSHIP = 41 

Property_type_BOOLEAN = 0 
Property_type_INT = 1 
Property_type_FLOAT = 2 
Property_type_STRING = 3 
Property_type_ENUM = 4 
Property_type_POINTER = 5 
Property_type_COLLECTION = 6 

Property_unit_NONE = 0 
Property_unit_LENGTH = 65536 
Property_unit_AREA = 131072 
Property_unit_VOLUME = 196608 
Property_unit_ROTATION = 327680 
Property_unit_TIME = 393216 
Property_unit_VELOCITY = 458752 
Property_unit_ACCELERATION = 524288 

PropertyActuator_mode_ASSIGN = 0 
PropertyActuator_mode_ADD = 1 
PropertyActuator_mode_COPY = 2 
PropertyActuator_mode_TOGGLE = 3 

PropertySensor_evaluation_type_PROPEQUAL = 0 
PropertySensor_evaluation_type_PROPNEQUAL = 1 
PropertySensor_evaluation_type_PROPINTERVAL = 2 
PropertySensor_evaluation_type_PROPCHANGED = 3 

PythonController_mode_SCRIPT = 0 
PythonController_mode_MODULE = 1 

RadarSensor_axis_XAXIS = 0 
RadarSensor_axis_YAXIS = 1 
RadarSensor_axis_ZAXIS = 2 
RadarSensor_axis_NEGXAXIS = 3 
RadarSensor_axis_NEGYAXIS = 4 
RadarSensor_axis_NEGZAXIS = 5 

RandomActuator_distribution_BOOL_CONSTANT = 0 
RandomActuator_distribution_BOOL_UNIFORM = 1 
RandomActuator_distribution_BOOL_BERNOUILLI = 2 
RandomActuator_distribution_INT_CONSTANT = 3 
RandomActuator_distribution_INT_UNIFORM = 4 
RandomActuator_distribution_INT_POISSON = 5 
RandomActuator_distribution_FLOAT_CONSTANT = 6 
RandomActuator_distribution_FLOAT_UNIFORM = 7 
RandomActuator_distribution_FLOAT_NORMAL = 8 
RandomActuator_distribution_FLOAT_NEGATIVE_EXPONENTIAL = 9 

RaySensor_axis_XAXIS = 1 
RaySensor_axis_YAXIS = 0 
RaySensor_axis_ZAXIS = 2 
RaySensor_axis_NEGXAXIS = 3 
RaySensor_axis_NEGYAXIS = 4 
RaySensor_axis_NEGZAXIS = 5 

RaySensor_ray_type_PROPERTY = 0 
RaySensor_ray_type_MATERIAL = 1 

Region_type_WINDOW = 0 
Region_type_HEADER = 1 
Region_type_CHANNELS = 2 
Region_type_TEMPORARY = 3 
Region_type_UI = 4 
Region_type_TOOLS = 5 
Region_type_TOOL_PROPS = 6 
Region_type_PREVIEW = 7 

RegionView3D_view_perspective_PERSP = 1 
RegionView3D_view_perspective_ORTHO = 0 
RegionView3D_view_perspective_CAMERA = 2 

RenderPass_type_COMBINED = 1 
RenderPass_type_Z = 2 
RenderPass_type_COLOR = 4 
RenderPass_type_DIFFUSE = 8 
RenderPass_type_SPECULAR = 16 
RenderPass_type_SHADOW = 32 
RenderPass_type_AO = 64 
RenderPass_type_REFLECTION = 128 
RenderPass_type_NORMAL = 256 
RenderPass_type_VECTOR = 512 
RenderPass_type_REFRACTION = 1024 
RenderPass_type_OBJECT_INDEX = 2048 
RenderPass_type_UV = 4096 
RenderPass_type_MIST = 16384 
RenderPass_type_EMIT = 65536 
RenderPass_type_ENVIRONMENT = 131072 
RenderPass_type_MATERIAL_INDEX = 262144 

RenderSettings_alpha_mode_SKY = 0 
RenderSettings_alpha_mode_PREMUL = 1 
RenderSettings_alpha_mode_STRAIGHT = 2 

RenderSettings_bake_aa_mode_5 = 5 
RenderSettings_bake_aa_mode_8 = 8 
RenderSettings_bake_aa_mode_11 = 11 
RenderSettings_bake_aa_mode_16 = 16 

RenderSettings_antialiasing_samples_5 = 5 
RenderSettings_antialiasing_samples_8 = 8 
RenderSettings_antialiasing_samples_11 = 11 
RenderSettings_antialiasing_samples_16 = 16 

RenderSettings_ffmpeg_audio_channels_MONO = 1 
RenderSettings_ffmpeg_audio_channels_STEREO = 2 
RenderSettings_ffmpeg_audio_channels_SURROUND4 = 4 
RenderSettings_ffmpeg_audio_channels_SURROUND51 = 6 
RenderSettings_ffmpeg_audio_channels_SURROUND71 = 8 

RenderSettings_bake_type_FULL = 1 
RenderSettings_bake_type_AO = 2 
RenderSettings_bake_type_SHADOW = 6 
RenderSettings_bake_type_NORMALS = 3 
RenderSettings_bake_type_TEXTURE = 4 
RenderSettings_bake_type_DISPLACEMENT = 5 
RenderSettings_bake_type_EMIT = 12 
RenderSettings_bake_type_ALPHA = 11 
RenderSettings_bake_type_MIRROR_INTENSITY = 10 
RenderSettings_bake_type_MIRROR_COLOR = 9 
RenderSettings_bake_type_SPEC_INTENSITY = 8 
RenderSettings_bake_type_SPEC_COLOR = 7 

RenderSettings_exr_codec_NONE = 0 
RenderSettings_exr_codec_PXR24 = 1 
RenderSettings_exr_codec_ZIP = 2 
RenderSettings_exr_codec_PIZ = 3 
RenderSettings_exr_codec_RLE = 4 

RenderSettings_color_mode_BW = 8 
RenderSettings_color_mode_RGB = 24 
RenderSettings_color_mode_RGBA = 32 

RenderSettings_jpeg2k_depth_8 = 8 
RenderSettings_jpeg2k_depth_12 = 12 
RenderSettings_jpeg2k_depth_16 = 16 

RenderSettings_display_mode_SCREEN = 0 
RenderSettings_display_mode_AREA = 1 
RenderSettings_display_mode_WINDOW = 2 
RenderSettings_display_mode_NONE = 3 

RenderSettings_engine_BLENDER_RENDER = 0 

RenderSettings_field_order_EVEN_FIRST = 0 
RenderSettings_field_order_ODD_FIRST = 8192 

RenderSettings_file_format_BMP = 20 
RenderSettings_file_format_DDS = 29 
RenderSettings_file_format_IRIS = 1 
RenderSettings_file_format_PNG = 17 
RenderSettings_file_format_JPEG = 4 
RenderSettings_file_format_JPEG2000 = 30 
RenderSettings_file_format_TARGA = 0 
RenderSettings_file_format_TARGA_RAW = 14 
RenderSettings_file_format_CINEON = 26 
RenderSettings_file_format_DPX = 27 
RenderSettings_file_format_MULTILAYER = 28 
RenderSettings_file_format_OPEN_EXR = 23 
RenderSettings_file_format_HDR = 21 
RenderSettings_file_format_TIFF = 22 
RenderSettings_file_format_AVI_JPEG = 16 
RenderSettings_file_format_AVI_RAW = 15 
RenderSettings_file_format_FRAMESERVER = 25 

RenderSettings_bake_normal_space_CAMERA = 0 
RenderSettings_bake_normal_space_WORLD = 1 
RenderSettings_bake_normal_space_OBJECT = 2 
RenderSettings_bake_normal_space_TANGENT = 3 

RenderSettings_octree_resolution_64 = 64 
RenderSettings_octree_resolution_128 = 128 
RenderSettings_octree_resolution_256 = 256 
RenderSettings_octree_resolution_512 = 512 

RenderSettings_pixel_filter_type_BOX = 0 
RenderSettings_pixel_filter_type_TENT = 1 
RenderSettings_pixel_filter_type_QUADRATIC = 2 
RenderSettings_pixel_filter_type_CUBIC = 3 
RenderSettings_pixel_filter_type_CATMULLROM = 4 
RenderSettings_pixel_filter_type_GAUSSIAN = 5 
RenderSettings_pixel_filter_type_MITCHELL = 6 

RenderSettings_jpeg2k_preset_NO_PRESET = 0 
RenderSettings_jpeg2k_preset_CINE_24FPS = 1 
RenderSettings_jpeg2k_preset_CINE_48FPS = 2 
RenderSettings_jpeg2k_preset_CINE_24FPS_4K = 3 
RenderSettings_jpeg2k_preset_CINE_SCOPE_24FPS = 4 
RenderSettings_jpeg2k_preset_CINE_SCOPE_48FPS = 5 
RenderSettings_jpeg2k_preset_CINE_FLAT_24FPS = 6 
RenderSettings_jpeg2k_preset_CINE_FLAT_48FPS = 7 

RenderSettings_bake_quad_split_AUTO = 0 
RenderSettings_bake_quad_split_FIXED = 1 
RenderSettings_bake_quad_split_FIXED_ALT = 2 

RenderSettings_raytrace_method_AUTO = 0 
RenderSettings_raytrace_method_OCTREE = 1 
RenderSettings_raytrace_method_BLIBVH = 2 
RenderSettings_raytrace_method_VBVH = 3 
RenderSettings_raytrace_method_SIMD_SVBVH = 4 
RenderSettings_raytrace_method_SIMD_QBVH = 5 

RenderSettings_sequencer_gl_preview_BOUNDBOX = 1 
RenderSettings_sequencer_gl_preview_WIREFRAME = 2 
RenderSettings_sequencer_gl_preview_SOLID = 3 
RenderSettings_sequencer_gl_preview_TEXTURED = 5 

RenderSettings_sequencer_gl_render_BOUNDBOX = 1 
RenderSettings_sequencer_gl_render_WIREFRAME = 2 
RenderSettings_sequencer_gl_render_SOLID = 3 
RenderSettings_sequencer_gl_render_TEXTURED = 5 

RenderSettings_threads_mode_AUTO = 0 
RenderSettings_threads_mode_FIXED = 524288 

RigidBodyJointConstraint_pivot_type_BALL = 1 
RigidBodyJointConstraint_pivot_type_HINGE = 2 
RigidBodyJointConstraint_pivot_type_CONE_TWIST = 4 
RigidBodyJointConstraint_pivot_type_GENERIC_6_DOF = 12 

Scene_audio_distance_model_NONE = 0 
Scene_audio_distance_model_INVERSE = 1 
Scene_audio_distance_model_INVERSE_CLAMPED = 2 
Scene_audio_distance_model_LINEAR = 3 
Scene_audio_distance_model_LINEAR_CLAMPED = 4 
Scene_audio_distance_model_EXPONENT = 5 
Scene_audio_distance_model_EXPONENT_CLAMPED = 6 

Scene_sync_mode_NONE = 0 
Scene_sync_mode_FRAME_DROP = 8 
Scene_sync_mode_AUDIO_SYNC = 2 

SceneActuator_mode_RESTART = 0 
SceneActuator_mode_SET = 1 
SceneActuator_mode_CAMERA = 2 
SceneActuator_mode_ADDFRONT = 3 
SceneActuator_mode_ADDBACK = 4 
SceneActuator_mode_REMOVE = 5 
SceneActuator_mode_SUSPEND = 6 
SceneActuator_mode_RESUME = 7 

SceneGameData_dome_mode_FISHEYE = 1 
SceneGameData_dome_mode_TRUNCATED_FRONT = 2 
SceneGameData_dome_mode_TRUNCATED_REAR = 3 
SceneGameData_dome_mode_ENVMAP = 4 
SceneGameData_dome_mode_PANORAM_SPH = 5 

SceneGameData_frame_type_LETTERBOX = 0 
SceneGameData_frame_type_EXTEND = 1 
SceneGameData_frame_type_SCALE = 2 

SceneGameData_material_mode_TEXTURE_FACE = 0 
SceneGameData_material_mode_MULTITEXTURE = 1 
SceneGameData_material_mode_GLSL = 2 

SceneGameData_physics_engine_NONE = 0 
SceneGameData_physics_engine_BULLET = 5 

SceneGameData_stereo_mode_QUADBUFFERED = 2 
SceneGameData_stereo_mode_ABOVEBELOW = 3 
SceneGameData_stereo_mode_INTERLACED = 4 
SceneGameData_stereo_mode_ANAGLYPH = 5 
SceneGameData_stereo_mode_SIDEBYSIDE = 6 
SceneGameData_stereo_mode_VINTERLACE = 7 

SceneGameData_stereo_NONE = 1 
SceneGameData_stereo_STEREO = 2 
SceneGameData_stereo_DOME = 3 

Scopes_waveform_mode_LUMA = 0 
Scopes_waveform_mode_RGB = 1 
Scopes_waveform_mode_YCBCR601 = 2 
Scopes_waveform_mode_YCBCR709 = 3 
Scopes_waveform_mode_YCBCRJPG = 4 

ScrewModifier_axis_X = 0 
ScrewModifier_axis_Y = 1 
ScrewModifier_axis_Z = 2 

Sensor_type_ACTUATOR = 12 
Sensor_type_ALWAYS = 0 
Sensor_type_ARMATURE = 14 
Sensor_type_COLLISION = 6 
Sensor_type_DELAY = 13 
Sensor_type_JOYSTICK = 11 
Sensor_type_KEYBOARD = 3 
Sensor_type_MESSAGE = 10 
Sensor_type_MOUSE = 5 
Sensor_type_NEAR = 2 
Sensor_type_PROPERTY = 4 
Sensor_type_RADAR = 7 
Sensor_type_RANDOM = 8 
Sensor_type_RAY = 9 
Sensor_type_TOUCH = 1 

Sequence_blend_type_REPLACE = 0 
Sequence_blend_type_CROSS = 8 
Sequence_blend_type_ADD = 9 
Sequence_blend_type_SUBTRACT = 10 
Sequence_blend_type_ALPHA_OVER = 11 
Sequence_blend_type_ALPHA_UNDER = 12 
Sequence_blend_type_GAMMA_CROSS = 13 
Sequence_blend_type_MULTIPLY = 14 
Sequence_blend_type_OVER_DROP = 15 

Sequence_type_IMAGE = 0 
Sequence_type_META = 1 
Sequence_type_SCENE = 2 
Sequence_type_MOVIE = 3 
Sequence_type_SOUND = 4 
Sequence_type_CROSS = 8 
Sequence_type_ADD = 9 
Sequence_type_SUBTRACT = 10 
Sequence_type_ALPHA_OVER = 11 
Sequence_type_ALPHA_UNDER = 12 
Sequence_type_GAMMA_CROSS = 13 
Sequence_type_MULTIPLY = 14 
Sequence_type_OVER_DROP = 15 
Sequence_type_PLUGIN = 24 
Sequence_type_WIPE = 25 
Sequence_type_GLOW = 26 
Sequence_type_TRANSFORM = 27 
Sequence_type_COLOR = 28 
Sequence_type_SPEED = 29 
Sequence_type_MULTICAM = 30 
Sequence_type_ADJUSTMENT = 31 

SequenceProxy_timecode_NONE = 0 
SequenceProxy_timecode_RECORD_RUN = 1 
SequenceProxy_timecode_FREE_RUN = 2 
SequenceProxy_timecode_FREE_RUN_REC_DATE = 4 

ShaderNode_type_OUTPUT = 1 
ShaderNode_type_MATERIAL = 100 
ShaderNode_type_RGB = 101 
ShaderNode_type_VALUE = 102 
ShaderNode_type_MIX_RGB = 103 
ShaderNode_type_VALTORGB = 104 
ShaderNode_type_RGBTOBW = 105 
ShaderNode_type_TEXTURE = 106 
ShaderNode_type_NORMAL = 107 
ShaderNode_type_GEOMETRY = 108 
ShaderNode_type_MAPPING = 109 
ShaderNode_type_CURVE_VEC = 110 
ShaderNode_type_CURVE_RGB = 111 
ShaderNode_type_CAMERA = 114 
ShaderNode_type_MATH = 115 
ShaderNode_type_VECT_MATH = 116 
ShaderNode_type_SQUEEZE = 117 
ShaderNode_type_MATERIAL_EXT = 118 
ShaderNode_type_INVERT = 119 
ShaderNode_type_SEPRGB = 120 
ShaderNode_type_COMBRGB = 121 
ShaderNode_type_HUE_SAT = 122 
ShaderNode_type_SCRIPT = 123 
ShaderNode_type_GROUP = 2 

ShaderNodeMath_operation_ADD = 0 
ShaderNodeMath_operation_SUBTRACT = 1 
ShaderNodeMath_operation_MULTIPLY = 2 
ShaderNodeMath_operation_DIVIDE = 3 
ShaderNodeMath_operation_SINE = 4 
ShaderNodeMath_operation_COSINE = 5 
ShaderNodeMath_operation_TANGENT = 6 
ShaderNodeMath_operation_ARCSINE = 7 
ShaderNodeMath_operation_ARCCOSINE = 8 
ShaderNodeMath_operation_ARCTANGENT = 9 
ShaderNodeMath_operation_POWER = 10 
ShaderNodeMath_operation_LOGARITHM = 11 
ShaderNodeMath_operation_MINIMUM = 12 
ShaderNodeMath_operation_MAXIMUM = 13 
ShaderNodeMath_operation_ROUND = 14 
ShaderNodeMath_operation_LESS_THAN = 15 
ShaderNodeMath_operation_GREATER_THAN = 16 

ShaderNodeMixRGB_blend_type_MIX = 0 
ShaderNodeMixRGB_blend_type_ADD = 1 
ShaderNodeMixRGB_blend_type_MULTIPLY = 2 
ShaderNodeMixRGB_blend_type_SUBTRACT = 3 
ShaderNodeMixRGB_blend_type_SCREEN = 4 
ShaderNodeMixRGB_blend_type_DIVIDE = 5 
ShaderNodeMixRGB_blend_type_DIFFERENCE = 6 
ShaderNodeMixRGB_blend_type_DARKEN = 7 
ShaderNodeMixRGB_blend_type_LIGHTEN = 8 
ShaderNodeMixRGB_blend_type_OVERLAY = 9 
ShaderNodeMixRGB_blend_type_DODGE = 10 
ShaderNodeMixRGB_blend_type_BURN = 11 
ShaderNodeMixRGB_blend_type_HUE = 12 
ShaderNodeMixRGB_blend_type_SATURATION = 13 
ShaderNodeMixRGB_blend_type_VALUE = 14 
ShaderNodeMixRGB_blend_type_COLOR = 15 
ShaderNodeMixRGB_blend_type_SOFT_LIGHT = 16 
ShaderNodeMixRGB_blend_type_LINEAR_LIGHT = 17 

ShaderNodeVectorMath_operation_ADD = 0 
ShaderNodeVectorMath_operation_SUBTRACT = 1 
ShaderNodeVectorMath_operation_AVERAGE = 2 
ShaderNodeVectorMath_operation_DOT_PRODUCT = 3 
ShaderNodeVectorMath_operation_CROSS_PRODUCT = 4 
ShaderNodeVectorMath_operation_NORMALIZE = 5 

ShapeActionActuator_mode_PLAY = 0 
ShapeActionActuator_mode_PINGPONG = 1 
ShapeActionActuator_mode_FLIPPER = 2 
ShapeActionActuator_mode_LOOPSTOP = 3 
ShapeActionActuator_mode_LOOPEND = 4 
ShapeActionActuator_mode_PROPERTY = 6 

ShapeKey_interpolation_KEY_LINEAR = 0 
ShapeKey_interpolation_KEY_CARDINAL = 1 
ShapeKey_interpolation_KEY_BSPLINE = 2 

ShrinkwrapConstraint_shrinkwrap_type_NEAREST_SURFACE = 0 
ShrinkwrapConstraint_shrinkwrap_type_PROJECT = 1 
ShrinkwrapConstraint_shrinkwrap_type_NEAREST_VERTEX = 2 

ShrinkwrapModifier_cull_face_OFF = 0 
ShrinkwrapModifier_cull_face_FRONT = 8 
ShrinkwrapModifier_cull_face_BACK = 16 

ShrinkwrapModifier_wrap_method_NEAREST_SURFACEPOINT = 0 
ShrinkwrapModifier_wrap_method_PROJECT = 1 
ShrinkwrapModifier_wrap_method_NEAREST_VERTEX = 2 

SimpleDeformModifier_deform_method_TWIST = 1 
SimpleDeformModifier_deform_method_BEND = 2 
SimpleDeformModifier_deform_method_TAPER = 3 
SimpleDeformModifier_deform_method_STRETCH = 4 

SmokeDomainSettings_collision_extents_BORDEROPEN = 0 
SmokeDomainSettings_collision_extents_BORDERVERTICAL = 1 
SmokeDomainSettings_collision_extents_BORDERCLOSED = 2 

SmokeDomainSettings_point_cache_compress_type_CACHELIGHT = 0 
SmokeDomainSettings_point_cache_compress_type_CACHEHEAVY = 1 

SmokeDomainSettings_noise_type_NOISEWAVE = 1 

SmokeModifier_smoke_type_NONE = 0 
SmokeModifier_smoke_type_DOMAIN = 1 
SmokeModifier_smoke_type_FLOW = 2 
SmokeModifier_smoke_type_COLLISION = 4 

SoftBodySettings_aerodynamics_type_SIMPLE = 0 
SoftBodySettings_aerodynamics_type_LIFT_FORCE = 1 

SoftBodySettings_collision_type_MANUAL = 0 
SoftBodySettings_collision_type_AVERAGE = 1 
SoftBodySettings_collision_type_MINIMAL = 2 
SoftBodySettings_collision_type_MAXIMAL = 3 
SoftBodySettings_collision_type_MINMAX = 4 

SoundActuator_mode_PLAYSTOP = 0 
SoundActuator_mode_PLAYEND = 1 
SoundActuator_mode_LOOPSTOP = 2 
SoundActuator_mode_LOOPEND = 3 
SoundActuator_mode_LOOPBIDIRECTIONAL = 4 
SoundActuator_mode_LOOPBIDIRECTIONALSTOP = 5 

Space_type_EMPTY = 0 
Space_type_VIEW_3D = 1 
Space_type_GRAPH_EDITOR = 2 
Space_type_OUTLINER = 3 
Space_type_PROPERTIES = 4 
Space_type_FILE_BROWSER = 5 
Space_type_IMAGE_EDITOR = 6 
Space_type_INFO = 7 
Space_type_SEQUENCE_EDITOR = 8 
Space_type_TEXT_EDITOR = 9 
Space_type_AUDIO_WINDOW = 11 
Space_type_DOPESHEET_EDITOR = 12 
Space_type_NLA_EDITOR = 13 
Space_type_SCRIPTS_WINDOW = 14 
Space_type_TIMELINE = 15 
Space_type_NODE_EDITOR = 16 
Space_type_LOGIC_EDITOR = 17 
Space_type_CONSOLE = 18 
Space_type_USER_PREFERENCES = 19 

SpaceDopeSheetEditor_auto_snap_NONE = 0 
SpaceDopeSheetEditor_auto_snap_STEP = 1 
SpaceDopeSheetEditor_auto_snap_FRAME = 2 
SpaceDopeSheetEditor_auto_snap_MARKER = 3 

SpaceDopeSheetEditor_mode_DOPESHEET = 3 
SpaceDopeSheetEditor_mode_ACTION = 0 
SpaceDopeSheetEditor_mode_SHAPEKEY = 1 
SpaceDopeSheetEditor_mode_GPENCIL = 2 

SpaceGraphEditor_auto_snap_NONE = 0 
SpaceGraphEditor_auto_snap_STEP = 1 
SpaceGraphEditor_auto_snap_FRAME = 2 
SpaceGraphEditor_auto_snap_MARKER = 3 

SpaceGraphEditor_mode_FCURVES = 0 
SpaceGraphEditor_mode_DRIVERS = 1 

SpaceGraphEditor_pivot_point_BOUNDING_BOX_CENTER = 0 
SpaceGraphEditor_pivot_point_CURSOR = 1 
SpaceGraphEditor_pivot_point_INDIVIDUAL_ORIGINS = 2 

SpaceImageEditor_draw_channels_COLOR = 0 
SpaceImageEditor_draw_channels_COLOR_ALPHA = 4096 
SpaceImageEditor_draw_channels_ALPHA = 8192 
SpaceImageEditor_draw_channels_Z_BUFFER = 16384 

SpaceNLA_auto_snap_NONE = 0 
SpaceNLA_auto_snap_STEP = 1 
SpaceNLA_auto_snap_FRAME = 2 
SpaceNLA_auto_snap_MARKER = 3 

SpaceNodeEditor_backdrop_channels_COLOR = 0 
SpaceNodeEditor_backdrop_channels_COLOR_ALPHA = 8 
SpaceNodeEditor_backdrop_channels_ALPHA = 16 

SpaceNodeEditor_texture_type_OBJECT = 0 
SpaceNodeEditor_texture_type_WORLD = 1 
SpaceNodeEditor_texture_type_BRUSH = 2 

SpaceNodeEditor_tree_type_MATERIAL = 0 
SpaceNodeEditor_tree_type_TEXTURE = 2 
SpaceNodeEditor_tree_type_COMPOSITING = 1 

SpaceOutliner_display_mode_ALL_SCENES = 0 
SpaceOutliner_display_mode_CURRENT_SCENE = 1 
SpaceOutliner_display_mode_VISIBLE_LAYERS = 2 
SpaceOutliner_display_mode_SELECTED = 3 
SpaceOutliner_display_mode_ACTIVE = 4 
SpaceOutliner_display_mode_SAME_TYPES = 5 
SpaceOutliner_display_mode_GROUPS = 6 
SpaceOutliner_display_mode_LIBRARIES = 7 
SpaceOutliner_display_mode_SEQUENCE = 10 
SpaceOutliner_display_mode_DATABLOCKS = 11 
SpaceOutliner_display_mode_USER_PREFERENCES = 12 
SpaceOutliner_display_mode_KEYMAPS = 13 

SpaceProperties_align_HORIZONTAL = 1 
SpaceProperties_align_VERTICAL = 2 

SpaceProperties_context_SCENE = 1 
SpaceProperties_context_RENDER = 0 
SpaceProperties_context_WORLD = 2 
SpaceProperties_context_OBJECT = 3 
SpaceProperties_context_CONSTRAINT = 12 
SpaceProperties_context_MODIFIER = 10 
SpaceProperties_context_DATA = 4 
SpaceProperties_context_BONE = 9 
SpaceProperties_context_BONE_CONSTRAINT = 13 
SpaceProperties_context_MATERIAL = 5 
SpaceProperties_context_TEXTURE = 6 
SpaceProperties_context_PARTICLES = 7 
SpaceProperties_context_PHYSICS = 8 

SpaceProperties_texture_context_MATERIAL = 0 

SpaceSequenceEditor_display_mode_IMAGE = 1 
SpaceSequenceEditor_display_mode_WAVEFORM = 2 
SpaceSequenceEditor_display_mode_VECTOR_SCOPE = 3 
SpaceSequenceEditor_display_mode_HISTOGRAM = 4 

SpaceSequenceEditor_proxy_render_size_NONE = -1 
SpaceSequenceEditor_proxy_render_size_SCENE = 0 
SpaceSequenceEditor_proxy_render_size_PROXY_25 = 25 
SpaceSequenceEditor_proxy_render_size_PROXY_50 = 50 
SpaceSequenceEditor_proxy_render_size_PROXY_75 = 75 
SpaceSequenceEditor_proxy_render_size_PROXY_100 = 99 
SpaceSequenceEditor_proxy_render_size_FULL = 100 

SpaceSequenceEditor_view_type_SEQUENCER = 1 
SpaceSequenceEditor_view_type_PREVIEW = 2 
SpaceSequenceEditor_view_type_SEQUENCER_PREVIEW = 3 

SpaceUVEditor_draw_stretch_type_ANGLE = 0 
SpaceUVEditor_draw_stretch_type_AREA = 1 

SpaceUVEditor_edge_draw_type_OUTLINE = 0 
SpaceUVEditor_edge_draw_type_DASH = 1 
SpaceUVEditor_edge_draw_type_BLACK = 2 
SpaceUVEditor_edge_draw_type_WHITE = 3 

SpaceUVEditor_pivot_point_CENTER = 0 
SpaceUVEditor_pivot_point_MEDIAN = 3 
SpaceUVEditor_pivot_point_CURSOR = 1 

SpaceUVEditor_sticky_select_mode_DISABLED = 1 
SpaceUVEditor_sticky_select_mode_SHARED_LOCATION = 0 
SpaceUVEditor_sticky_select_mode_SHARED_VERTEX = 2 

SpaceView3D_pivot_point_BOUNDING_BOX_CENTER = 0 
SpaceView3D_pivot_point_CURSOR = 1 
SpaceView3D_pivot_point_INDIVIDUAL_ORIGINS = 2 
SpaceView3D_pivot_point_MEDIAN_POINT = 3 
SpaceView3D_pivot_point_ACTIVE_ELEMENT = 4 

SpaceView3D_transform_orientation_GLOBAL = 0 
SpaceView3D_transform_orientation_LOCAL = 1 
SpaceView3D_transform_orientation_GIMBAL = 4 
SpaceView3D_transform_orientation_NORMAL = 2 
SpaceView3D_transform_orientation_VIEW = 3 
SpaceView3D_transform_orientation_CUSTOM = 5 

SpaceView3D_viewport_shade_BOUNDBOX = 1 
SpaceView3D_viewport_shade_WIREFRAME = 2 
SpaceView3D_viewport_shade_SOLID = 3 
SpaceView3D_viewport_shade_TEXTURED = 5 

Spline_radius_interpolation_LINEAR = 0 
Spline_radius_interpolation_CARDINAL = 1 
Spline_radius_interpolation_BSPLINE = 2 
Spline_radius_interpolation_EASE = 3 

Spline_tilt_interpolation_LINEAR = 0 
Spline_tilt_interpolation_CARDINAL = 1 
Spline_tilt_interpolation_BSPLINE = 2 
Spline_tilt_interpolation_EASE = 3 

Spline_type_POLY = 0 
Spline_type_BEZIER = 1 
Spline_type_BSPLINE = 2 
Spline_type_CARDINAL = 3 
Spline_type_NURBS = 4 

SplineIKConstraint_xz_scale_mode_NONE = 0 
SplineIKConstraint_xz_scale_mode_BONE_ORIGINAL = 1 
SplineIKConstraint_xz_scale_mode_VOLUME_PRESERVE = 2 

SpotLamp_falloff_type_CONSTANT = 0 
SpotLamp_falloff_type_INVERSE_LINEAR = 1 
SpotLamp_falloff_type_INVERSE_SQUARE = 2 
SpotLamp_falloff_type_CUSTOM_CURVE = 3 
SpotLamp_falloff_type_LINEAR_QUADRATIC_WEIGHTED = 4 

SpotLamp_shadow_buffer_type_REGULAR = 0 
SpotLamp_shadow_buffer_type_HALFWAY = 2 
SpotLamp_shadow_buffer_type_IRREGULAR = 1 
SpotLamp_shadow_buffer_type_DEEP = 3 

SpotLamp_shadow_filter_type_BOX = 0 
SpotLamp_shadow_filter_type_TENT = 1 
SpotLamp_shadow_filter_type_GAUSS = 2 

SpotLamp_shadow_method_NOSHADOW = 0 
SpotLamp_shadow_method_BUFFER_SHADOW = 1 
SpotLamp_shadow_method_RAY_SHADOW = 8192 

SpotLamp_shadow_ray_sample_method_ADAPTIVE_QMC = 1 
SpotLamp_shadow_ray_sample_method_CONSTANT_QMC = 2 

SpotLamp_shadow_sample_buffers_BUFFERS_1 = 1 
SpotLamp_shadow_sample_buffers_BUFFERS_4 = 4 
SpotLamp_shadow_sample_buffers_BUFFERS_9 = 9 

StateActuator_operation_SET = 0 
StateActuator_operation_ADD = 1 
StateActuator_operation_REMOVE = 2 
StateActuator_operation_CHANGE = 3 

StretchToConstraint_keep_axis_PLANE_X = 0 
StretchToConstraint_keep_axis_PLANE_Z = 2 

StretchToConstraint_volume_VOLUME_XZX = 0 
StretchToConstraint_volume_VOLUME_X = 1 
StretchToConstraint_volume_VOLUME_Z = 2 
StretchToConstraint_volume_NO_VOLUME = 3 

StucciTexture_noise_basis_BLENDER_ORIGINAL = 0 
StucciTexture_noise_basis_ORIGINAL_PERLIN = 1 
StucciTexture_noise_basis_IMPROVED_PERLIN = 2 
StucciTexture_noise_basis_VORONOI_F1 = 3 
StucciTexture_noise_basis_VORONOI_F2 = 4 
StucciTexture_noise_basis_VORONOI_F3 = 5 
StucciTexture_noise_basis_VORONOI_F4 = 6 
StucciTexture_noise_basis_VORONOI_F2_F1 = 7 
StucciTexture_noise_basis_VORONOI_CRACKLE = 8 
StucciTexture_noise_basis_CELL_NOISE = 14 

StucciTexture_noise_type_SOFT_NOISE = 0 
StucciTexture_noise_type_HARD_NOISE = 1 

StucciTexture_stucci_type_PLASTIC = 0 
StucciTexture_stucci_type_WALL_IN = 1 
StucciTexture_stucci_type_WALL_OUT = 2 

SubsurfModifier_subdivision_type_CATMULL_CLARK = 0 
SubsurfModifier_subdivision_type_SIMPLE = 1 

SunLamp_shadow_method_NOSHADOW = 0 
SunLamp_shadow_method_RAY_SHADOW = 8192 

SunLamp_shadow_ray_sample_method_ADAPTIVE_QMC = 1 
SunLamp_shadow_ray_sample_method_CONSTANT_QMC = 2 

TextCurve_align_LEFT = 0 
TextCurve_align_CENTER = 1 
TextCurve_align_RIGHT = 2 
TextCurve_align_JUSTIFY = 3 
TextCurve_align_FLUSH = 4 

Texture_type_NONE = 0 
Texture_type_BLEND = 5 
Texture_type_CLOUDS = 1 
Texture_type_DISTORTED_NOISE = 13 
Texture_type_ENVIRONMENT_MAP = 10 
Texture_type_IMAGE = 8 
Texture_type_MAGIC = 4 
Texture_type_MARBLE = 3 
Texture_type_MUSGRAVE = 11 
Texture_type_NOISE = 7 
Texture_type_POINT_DENSITY = 14 
Texture_type_STUCCI = 6 
Texture_type_VORONOI = 12 
Texture_type_VOXEL_DATA = 15 
Texture_type_WOOD = 2 

TextureNode_type_OUTPUT = 401 
TextureNode_type_CHECKER = 402 
TextureNode_type_TEXTURE = 403 
TextureNode_type_BRICKS = 404 
TextureNode_type_MATH = 405 
TextureNode_type_MIX_RGB = 406 
TextureNode_type_RGBTOBW = 407 
TextureNode_type_VALTORGB = 408 
TextureNode_type_IMAGE = 409 
TextureNode_type_CURVE_RGB = 410 
TextureNode_type_INVERT = 411 
TextureNode_type_HUE_SAT = 412 
TextureNode_type_CURVE_TIME = 413 
TextureNode_type_ROTATE = 414 
TextureNode_type_VIEWER = 415 
TextureNode_type_TRANSLATE = 416 
TextureNode_type_COORD = 417 
TextureNode_type_DISTANCE = 418 
TextureNode_type_COMPOSE = 419 
TextureNode_type_DECOMPOSE = 420 
TextureNode_type_VALTONOR = 421 
TextureNode_type_SCALE = 422 
TextureNode_type_SCRIPT = 123 
TextureNode_type_GROUP = 2 

TextureNodeMath_operation_ADD = 0 
TextureNodeMath_operation_SUBTRACT = 1 
TextureNodeMath_operation_MULTIPLY = 2 
TextureNodeMath_operation_DIVIDE = 3 
TextureNodeMath_operation_SINE = 4 
TextureNodeMath_operation_COSINE = 5 
TextureNodeMath_operation_TANGENT = 6 
TextureNodeMath_operation_ARCSINE = 7 
TextureNodeMath_operation_ARCCOSINE = 8 
TextureNodeMath_operation_ARCTANGENT = 9 
TextureNodeMath_operation_POWER = 10 
TextureNodeMath_operation_LOGARITHM = 11 
TextureNodeMath_operation_MINIMUM = 12 
TextureNodeMath_operation_MAXIMUM = 13 
TextureNodeMath_operation_ROUND = 14 
TextureNodeMath_operation_LESS_THAN = 15 
TextureNodeMath_operation_GREATER_THAN = 16 

TextureNodeMixRGB_blend_type_MIX = 0 
TextureNodeMixRGB_blend_type_ADD = 1 
TextureNodeMixRGB_blend_type_MULTIPLY = 2 
TextureNodeMixRGB_blend_type_SUBTRACT = 3 
TextureNodeMixRGB_blend_type_SCREEN = 4 
TextureNodeMixRGB_blend_type_DIVIDE = 5 
TextureNodeMixRGB_blend_type_DIFFERENCE = 6 
TextureNodeMixRGB_blend_type_DARKEN = 7 
TextureNodeMixRGB_blend_type_LIGHTEN = 8 
TextureNodeMixRGB_blend_type_OVERLAY = 9 
TextureNodeMixRGB_blend_type_DODGE = 10 
TextureNodeMixRGB_blend_type_BURN = 11 
TextureNodeMixRGB_blend_type_HUE = 12 
TextureNodeMixRGB_blend_type_SATURATION = 13 
TextureNodeMixRGB_blend_type_VALUE = 14 
TextureNodeMixRGB_blend_type_COLOR = 15 
TextureNodeMixRGB_blend_type_SOFT_LIGHT = 16 
TextureNodeMixRGB_blend_type_LINEAR_LIGHT = 17 

TextureSlot_blend_type_MIX = 0 
TextureSlot_blend_type_ADD = 2 
TextureSlot_blend_type_SUBTRACT = 3 
TextureSlot_blend_type_MULTIPLY = 1 
TextureSlot_blend_type_SCREEN = 8 
TextureSlot_blend_type_OVERLAY = 9 
TextureSlot_blend_type_DIFFERENCE = 6 
TextureSlot_blend_type_DIVIDE = 4 
TextureSlot_blend_type_DARKEN = 5 
TextureSlot_blend_type_LIGHTEN = 7 
TextureSlot_blend_type_HUE = 10 
TextureSlot_blend_type_SATURATION = 11 
TextureSlot_blend_type_VALUE = 12 
TextureSlot_blend_type_COLOR = 13 
TextureSlot_blend_type_SOFT_LIGHT = 15 
TextureSlot_blend_type_LINEAR_LIGHT = 16 

TextureSlot_output_node_DUMMY = 0 

Theme_theme_area_USER_INTERFACE = 0 
Theme_theme_area_BONE_COLOR_SETS = 18 
Theme_theme_area_VIEW_3D = 1 
Theme_theme_area_TIMELINE = 2 
Theme_theme_area_GRAPH_EDITOR = 3 
Theme_theme_area_DOPESHEET_EDITOR = 4 
Theme_theme_area_NLA_EDITOR = 5 
Theme_theme_area_IMAGE_EDITOR = 6 
Theme_theme_area_SEQUENCE_EDITOR = 7 
Theme_theme_area_TEXT_EDITOR = 8 
Theme_theme_area_NODE_EDITOR = 9 
Theme_theme_area_LOGIC_EDITOR = 10 
Theme_theme_area_PROPERTIES = 11 
Theme_theme_area_OUTLINER = 12 
Theme_theme_area_USER_PREFERENCES = 14 
Theme_theme_area_INFO = 15 
Theme_theme_area_FILE_BROWSER = 16 
Theme_theme_area_CONSOLE = 17 

ThemeFontStyle_font_kerning_style_UNFITTED = 0 
ThemeFontStyle_font_kerning_style_DEFAULT = 1 

ToolSettings_auto_keying_mode_ADD_REPLACE_KEYS = 2 
ToolSettings_auto_keying_mode_REPLACE_KEYS = 4 

ToolSettings_edge_path_mode_SELECT = 0 
ToolSettings_edge_path_mode_SEAM = 1 
ToolSettings_edge_path_mode_SHARP = 2 
ToolSettings_edge_path_mode_CREASE = 3 
ToolSettings_edge_path_mode_BEVEL = 4 

ToolSettings_proportional_edit_DISABLED = 0 
ToolSettings_proportional_edit_ENABLED = 1 
ToolSettings_proportional_edit_CONNECTED = 2 

ToolSettings_proportional_edit_falloff_SMOOTH = 0 
ToolSettings_proportional_edit_falloff_SPHERE = 1 
ToolSettings_proportional_edit_falloff_ROOT = 2 
ToolSettings_proportional_edit_falloff_SHARP = 3 
ToolSettings_proportional_edit_falloff_LINEAR = 4 
ToolSettings_proportional_edit_falloff_CONSTANT = 5 
ToolSettings_proportional_edit_falloff_RANDOM = 6 

ToolSettings_etch_roll_mode_NONE = 0 
ToolSettings_etch_roll_mode_VIEW = 1 
ToolSettings_etch_roll_mode_JOINT = 2 

ToolSettings_snap_element_INCREMENT = 0 
ToolSettings_snap_element_VERTEX = 1 
ToolSettings_snap_element_EDGE = 2 
ToolSettings_snap_element_FACE = 3 
ToolSettings_snap_element_VOLUME = 4 

ToolSettings_snap_target_CLOSEST = 0 
ToolSettings_snap_target_CENTER = 1 
ToolSettings_snap_target_MEDIAN = 2 
ToolSettings_snap_target_ACTIVE = 3 

ToolSettings_etch_convert_mode_FIXED = 0 
ToolSettings_etch_convert_mode_LENGTH = 1 
ToolSettings_etch_convert_mode_ADAPTIVE = 2 
ToolSettings_etch_convert_mode_RETARGET = 3 

ToolSettings_uv_select_mode_VERTEX = 1 
ToolSettings_uv_select_mode_EDGE = 2 
ToolSettings_uv_select_mode_FACE = 4 
ToolSettings_uv_select_mode_ISLAND = 8 

TrackToConstraint_track_axis_TRACK_X = 0 
TrackToConstraint_track_axis_TRACK_Y = 1 
TrackToConstraint_track_axis_TRACK_Z = 2 
TrackToConstraint_track_axis_TRACK_NEGATIVE_X = 3 
TrackToConstraint_track_axis_TRACK_NEGATIVE_Y = 4 
TrackToConstraint_track_axis_TRACK_NEGATIVE_Z = 5 

TrackToConstraint_up_axis_UP_X = 0 
TrackToConstraint_up_axis_UP_Y = 1 
TrackToConstraint_up_axis_UP_Z = 2 

TransformConstraint_map_from_LOCATION = 0 
TransformConstraint_map_from_ROTATION = 1 
TransformConstraint_map_from_SCALE = 2 

TransformConstraint_map_to_LOCATION = 0 
TransformConstraint_map_to_ROTATION = 1 
TransformConstraint_map_to_SCALE = 2 

TransformConstraint_map_to_x_from_X = 0 
TransformConstraint_map_to_x_from_Y = 1 
TransformConstraint_map_to_x_from_Z = 2 

TransformConstraint_map_to_y_from_X = 0 
TransformConstraint_map_to_y_from_Y = 1 
TransformConstraint_map_to_y_from_Z = 2 

TransformConstraint_map_to_z_from_X = 0 
TransformConstraint_map_to_z_from_Y = 1 
TransformConstraint_map_to_z_from_Z = 2 

TransformSequence_interpolation_NONE = 0 
TransformSequence_interpolation_BILINEAR = 1 
TransformSequence_interpolation_BICUBIC = 2 

TransformSequence_translation_unit_PIXELS = 0 
TransformSequence_translation_unit_PERCENT = 1 

UILayout_alignment_EXPAND = 0 
UILayout_alignment_LEFT = 1 
UILayout_alignment_CENTER = 2 
UILayout_alignment_RIGHT = 3 

UILayout_operator_context_INVOKE_DEFAULT = 0 
UILayout_operator_context_INVOKE_REGION_WIN = 1 
UILayout_operator_context_INVOKE_REGION_CHANNELS = 2 
UILayout_operator_context_INVOKE_REGION_PREVIEW = 3 
UILayout_operator_context_INVOKE_AREA = 4 
UILayout_operator_context_INVOKE_SCREEN = 5 
UILayout_operator_context_EXEC_DEFAULT = 6 
UILayout_operator_context_EXEC_REGION_WIN = 7 
UILayout_operator_context_EXEC_REGION_CHANNELS = 8 
UILayout_operator_context_EXEC_REGION_PREVIEW = 9 
UILayout_operator_context_EXEC_AREA = 10 
UILayout_operator_context_EXEC_SCREEN = 11 

UnitSettings_system_rotation_DEGREES = 0 
UnitSettings_system_rotation_RADIANS = 2 

UnitSettings_system_NONE = 0 
UnitSettings_system_METRIC = 1 
UnitSettings_system_IMPERIAL = 2 

UserPreferences_active_section_INTERFACE = 0 
UserPreferences_active_section_EDITING = 1 
UserPreferences_active_section_INPUT = 5 
UserPreferences_active_section_ADDONS = 6 
UserPreferences_active_section_THEMES = 4 
UserPreferences_active_section_FILES = 2 
UserPreferences_active_section_SYSTEM = 3 

UserPreferencesEdit_object_align_WORLD = 0 
UserPreferencesEdit_object_align_VIEW = 524288 

UserPreferencesEdit_auto_keying_mode_ADD_REPLACE_KEYS = 3 
UserPreferencesEdit_auto_keying_mode_REPLACE_KEYS = 5 

UserPreferencesEdit_material_link_OBDATA = 0 
UserPreferencesEdit_material_link_OBJECT = 256 

UserPreferencesEdit_keyframe_new_handle_type_FREE = 0 
UserPreferencesEdit_keyframe_new_handle_type_VECTOR = 2 
UserPreferencesEdit_keyframe_new_handle_type_ALIGNED = 3 
UserPreferencesEdit_keyframe_new_handle_type_AUTO = 1 
UserPreferencesEdit_keyframe_new_handle_type_AUTO_CLAMPED = 4 

UserPreferencesEdit_keyframe_new_interpolation_type_CONSTANT = 0 
UserPreferencesEdit_keyframe_new_interpolation_type_LINEAR = 1 
UserPreferencesEdit_keyframe_new_interpolation_type_BEZIER = 2 

UserPreferencesFilePaths_animation_player_preset_BLENDER24 = 1 
UserPreferencesFilePaths_animation_player_preset_DJV = 2 
UserPreferencesFilePaths_animation_player_preset_FRAMECYCLER = 3 
UserPreferencesFilePaths_animation_player_preset_RV = 4 
UserPreferencesFilePaths_animation_player_preset_MPLAYER = 5 
UserPreferencesFilePaths_animation_player_preset_CUSTOM = 50 

UserPreferencesInput_select_mouse_LEFT = 16384 
UserPreferencesInput_select_mouse_RIGHT = 0 

UserPreferencesInput_view_rotate_method_TURNTABLE = 0 
UserPreferencesInput_view_rotate_method_TRACKBALL = 32 

UserPreferencesInput_view_zoom_axis_VERTICAL = 0 
UserPreferencesInput_view_zoom_axis_HORIZONTAL = 67108864 

UserPreferencesInput_view_zoom_method_CONTINUE = 0 
UserPreferencesInput_view_zoom_method_DOLLY = 2 
UserPreferencesInput_view_zoom_method_SCALE = 1 

UserPreferencesSystem_anisotropic_filter_FILTER_0 = 1 
UserPreferencesSystem_anisotropic_filter_FILTER_2 = 2 
UserPreferencesSystem_anisotropic_filter_FILTER_4 = 4 
UserPreferencesSystem_anisotropic_filter_FILTER_8 = 8 
UserPreferencesSystem_anisotropic_filter_FILTER_16 = 16 

UserPreferencesSystem_audio_channels_MONO = 1 
UserPreferencesSystem_audio_channels_STEREO = 2 
UserPreferencesSystem_audio_channels_SURROUND4 = 4 
UserPreferencesSystem_audio_channels_SURROUND51 = 6 
UserPreferencesSystem_audio_channels_SURROUND71 = 8 

UserPreferencesSystem_audio_device_NONE = 0 
UserPreferencesSystem_audio_device_SDL = 1 
UserPreferencesSystem_audio_device_OPENAL = 2 

UserPreferencesSystem_audio_mixing_buffer_SAMPLES_256 = 256 
UserPreferencesSystem_audio_mixing_buffer_SAMPLES_512 = 512 
UserPreferencesSystem_audio_mixing_buffer_SAMPLES_1024 = 1024 
UserPreferencesSystem_audio_mixing_buffer_SAMPLES_2048 = 2048 
UserPreferencesSystem_audio_mixing_buffer_SAMPLES_4096 = 4096 
UserPreferencesSystem_audio_mixing_buffer_SAMPLES_8192 = 8192 
UserPreferencesSystem_audio_mixing_buffer_SAMPLES_16384 = 16384 
UserPreferencesSystem_audio_mixing_buffer_SAMPLES_32768 = 32768 

UserPreferencesSystem_audio_sample_format_U8 = 1 
UserPreferencesSystem_audio_sample_format_S16 = 18 
UserPreferencesSystem_audio_sample_format_S24 = 19 
UserPreferencesSystem_audio_sample_format_S32 = 20 
UserPreferencesSystem_audio_sample_format_FLOAT = 36 
UserPreferencesSystem_audio_sample_format_DOUBLE = 40 

UserPreferencesSystem_audio_sample_rate_RATE_44100 = 44100 
UserPreferencesSystem_audio_sample_rate_RATE_48000 = 48000 
UserPreferencesSystem_audio_sample_rate_RATE_96000 = 96000 
UserPreferencesSystem_audio_sample_rate_RATE_192000 = 192000 

UserPreferencesSystem_color_picker_type_CIRCLE = 0 
UserPreferencesSystem_color_picker_type_SQUARE_SV = 1 
UserPreferencesSystem_color_picker_type_SQUARE_HS = 2 
UserPreferencesSystem_color_picker_type_SQUARE_HV = 3 

UserPreferencesSystem_gl_texture_limit_CLAMP_OFF = 0 
UserPreferencesSystem_gl_texture_limit_CLAMP_8192 = 8192 
UserPreferencesSystem_gl_texture_limit_CLAMP_4096 = 4096 
UserPreferencesSystem_gl_texture_limit_CLAMP_2048 = 2048 
UserPreferencesSystem_gl_texture_limit_CLAMP_1024 = 1024 
UserPreferencesSystem_gl_texture_limit_CLAMP_512 = 512 
UserPreferencesSystem_gl_texture_limit_CLAMP_256 = 256 
UserPreferencesSystem_gl_texture_limit_CLAMP_128 = 128 

UserPreferencesSystem_language_ENGLISH = 0 
UserPreferencesSystem_language_JAPANESE = 1 
UserPreferencesSystem_language_DUTCH = 2 
UserPreferencesSystem_language_ITALIAN = 3 
UserPreferencesSystem_language_GERMAN = 4 
UserPreferencesSystem_language_FINNISH = 5 
UserPreferencesSystem_language_SWEDISH = 6 
UserPreferencesSystem_language_FRENCH = 7 
UserPreferencesSystem_language_SPANISH = 8 
UserPreferencesSystem_language_CATALAN = 9 
UserPreferencesSystem_language_CZECH = 10 
UserPreferencesSystem_language_BRAZILIAN_PORTUGUESE = 11 
UserPreferencesSystem_language_SIMPLIFIED_CHINESE = 12 
UserPreferencesSystem_language_RUSSIAN = 13 
UserPreferencesSystem_language_CROATIAN = 14 
UserPreferencesSystem_language_SERBIAN = 15 
UserPreferencesSystem_language_UKRAINIAN = 16 
UserPreferencesSystem_language_POLISH = 17 
UserPreferencesSystem_language_ROMANIAN = 18 
UserPreferencesSystem_language_ARABIC = 19 
UserPreferencesSystem_language_BULGARIAN = 20 
UserPreferencesSystem_language_GREEK = 21 
UserPreferencesSystem_language_KOREAN = 22 

UserPreferencesSystem_window_draw_method_AUTOMATIC = 3 
UserPreferencesSystem_window_draw_method_TRIPLE_BUFFER = 0 
UserPreferencesSystem_window_draw_method_OVERLAP = 1 
UserPreferencesSystem_window_draw_method_OVERLAP_FLIP = 4 
UserPreferencesSystem_window_draw_method_FULL = 2 

UserPreferencesView_timecode_style_MINIMAL = 0 
UserPreferencesView_timecode_style_SMPTE = 2 
UserPreferencesView_timecode_style_SMPTE_COMPACT = 1 
UserPreferencesView_timecode_style_MILLISECONDS = 3 
UserPreferencesView_timecode_style_SECONDS_ONLY = 4 

VoronoiTexture_color_mode_INTENSITY = 0 
VoronoiTexture_color_mode_POSITION = 1 
VoronoiTexture_color_mode_POSITION_OUTLINE = 2 
VoronoiTexture_color_mode_POSITION_OUTLINE_INTENSITY = 3 

VoronoiTexture_distance_metric_DISTANCE = 0 
VoronoiTexture_distance_metric_DISTANCE_SQUARED = 1 
VoronoiTexture_distance_metric_MANHATTAN = 2 
VoronoiTexture_distance_metric_CHEBYCHEV = 3 
VoronoiTexture_distance_metric_MINKOVSKY_HALF = 4 
VoronoiTexture_distance_metric_MINKOVSKY_FOUR = 5 
VoronoiTexture_distance_metric_MINKOVSKY = 6 

VoxelData_extension_EXTEND = 1 
VoxelData_extension_CLIP = 2 
VoxelData_extension_REPEAT = 3 

VoxelData_file_format_BLENDER_VOXEL = 0 
VoxelData_file_format_RAW_8BIT = 1 
VoxelData_file_format_IMAGE_SEQUENCE = 3 
VoxelData_file_format_SMOKE = 4 

VoxelData_interpolation_NEREASTNEIGHBOR = 0 
VoxelData_interpolation_TRILINEAR = 1 
VoxelData_interpolation_QUADRATIC = 2 
VoxelData_interpolation_TRICUBIC_CATROM = 3 
VoxelData_interpolation_TRICUBIC_BSPLINE = 4 

VoxelData_smoke_data_type_SMOKEDENSITY = 0 
VoxelData_smoke_data_type_SMOKEHEAT = 1 
VoxelData_smoke_data_type_SMOKEVEL = 2 

WarpModifier_falloff_type_NONE = 0 
WarpModifier_falloff_type_CURVE = 1 
WarpModifier_falloff_type_SMOOTH = 3 
WarpModifier_falloff_type_SPHERE = 7 
WarpModifier_falloff_type_ROOT = 4 
WarpModifier_falloff_type_SHARP = 2 
WarpModifier_falloff_type_LINEAR = 5 
WarpModifier_falloff_type_CONSTANT = 6 

WarpModifier_texture_coords_LOCAL = 0 
WarpModifier_texture_coords_GLOBAL = 1 
WarpModifier_texture_coords_OBJECT = 2 
WarpModifier_texture_coords_UV = 3 

WaveModifier_texture_coords_LOCAL = 0 
WaveModifier_texture_coords_GLOBAL = 1 
WaveModifier_texture_coords_OBJECT = 2 
WaveModifier_texture_coords_MAP_UV = 3 

WipeSequence_direction_OUT = 0 
WipeSequence_direction_IN = 1 

WipeSequence_transition_type_SINGLE = 0 
WipeSequence_transition_type_DOUBLE = 1 
WipeSequence_transition_type_IRIS = 4 
WipeSequence_transition_type_CLOCK = 5 

WoodTexture_noise_basis_BLENDER_ORIGINAL = 0 
WoodTexture_noise_basis_ORIGINAL_PERLIN = 1 
WoodTexture_noise_basis_IMPROVED_PERLIN = 2 
WoodTexture_noise_basis_VORONOI_F1 = 3 
WoodTexture_noise_basis_VORONOI_F2 = 4 
WoodTexture_noise_basis_VORONOI_F3 = 5 
WoodTexture_noise_basis_VORONOI_F4 = 6 
WoodTexture_noise_basis_VORONOI_F2_F1 = 7 
WoodTexture_noise_basis_VORONOI_CRACKLE = 8 
WoodTexture_noise_basis_CELL_NOISE = 14 

WoodTexture_noise_basis_2_SIN = 0 
WoodTexture_noise_basis_2_SAW = 1 
WoodTexture_noise_basis_2_TRI = 2 

WoodTexture_noise_type_SOFT_NOISE = 0 
WoodTexture_noise_type_HARD_NOISE = 1 

WoodTexture_wood_type_BANDS = 0 
WoodTexture_wood_type_RINGS = 1 
WoodTexture_wood_type_BANDNOISE = 2 
WoodTexture_wood_type_RINGNOISE = 3 

WorldLighting_ao_blend_type_MULTIPLY = 3 
WorldLighting_ao_blend_type_ADD = 0 

WorldLighting_environment_color_PLAIN = 0 
WorldLighting_environment_color_SKY_COLOR = 1 
WorldLighting_environment_color_SKY_TEXTURE = 2 

WorldLighting_gather_method_RAYTRACE = 0 
WorldLighting_gather_method_APPROXIMATE = 1 

WorldLighting_sample_method_CONSTANT_JITTERED = 0 
WorldLighting_sample_method_ADAPTIVE_QMC = 1 
WorldLighting_sample_method_CONSTANT_QMC = 2 

WorldMistSettings_falloff_QUADRATIC = 0 
WorldMistSettings_falloff_LINEAR = 1 
WorldMistSettings_falloff_INVERSE_QUADRATIC = 2 

WorldTextureSlot_texture_coords_VIEW = 128 
WorldTextureSlot_texture_coords_GLOBAL = 8 
WorldTextureSlot_texture_coords_ANGMAP = 64 
WorldTextureSlot_texture_coords_SPHERE = 256 
WorldTextureSlot_texture_coords_TUBE = 1024 
WorldTextureSlot_texture_coords_OBJECT = 32 

UI_BLOCK_BOUNDS = 1 
UI_BLOCK_BOUNDS_TEXT = 2 
UI_BLOCK_BOUNDS_POPUP_MOUSE = 3 
UI_BLOCK_BOUNDS_POPUP_MENU = 4 
UI_BLOCK_BOUNDS_POPUP_CENTER = 5 

BLI_CB_EVT_RENDER_PRE = 0 
BLI_CB_EVT_RENDER_POST = 1 
BLI_CB_EVT_RENDER_STATS = 2 
BLI_CB_EVT_LOAD_PRE = 3 
BLI_CB_EVT_LOAD_POST = 4 
BLI_CB_EVT_SAVE_PRE = 5 
BLI_CB_EVT_SAVE_POST = 6 
BLI_CB_EVT_TOT = 7 

## simple enums ##
RPYTHONIC_GLOBAL_ENUMS = { 
 "FE_INVALID" : 1,  "_FE_DENORM" : 2,  "FE_DIVBYZERO" : 4,  "FE_OVERFLOW" : 8,  "FE_UNDERFLOW" : 16,  "FE_INEXACT" : 32, 
 "FE_TONEAREST" : 0,  "FE_DOWNWARD" : 1024,  "FE_UPWARD" : 2048,  "FE_TOWARDZERO" : 3072, 
 "SIGEV_SIGNAL" : 0,  "SIGEV_NONE" : 1,  "SIGEV_THREAD" : 2,  "SIGEV_THREAD_ID" : 4, 
 "SI_ASYNCNL" : -60,  "SI_TKILL" : -6,  "SI_SIGIO" : -5,  "SI_ASYNCIO" : -4,  "SI_MESGQ" : -3,  "SI_TIMER" : -2,  "SI_QUEUE" : -1,  "SI_USER" : 0,  "SI_KERNEL" : 128, 
 "ILL_ILLOPC" : 1,  "ILL_ILLOPN" : 2,  "ILL_ILLADR" : 3,  "ILL_ILLTRP" : 4,  "ILL_PRVOPC" : 5,  "ILL_PRVREG" : 6,  "ILL_COPROC" : 7,  "ILL_BADSTK" : 8, 
 "FPE_INTDIV" : 1,  "FPE_INTOVF" : 2,  "FPE_FLTDIV" : 3,  "FPE_FLTOVF" : 4,  "FPE_FLTUND" : 5,  "FPE_FLTRES" : 6,  "FPE_FLTINV" : 7,  "FPE_FLTSUB" : 8, 
 "SEGV_MAPERR" : 1,  "SEGV_ACCERR" : 2, 
 "BUS_ADRALN" : 1,  "BUS_ADRERR" : 2,  "BUS_OBJERR" : 3, 
 "TRAP_BRKPT" : 1,  "TRAP_TRACE" : 2, 
 "CLD_EXITED" : 1,  "CLD_KILLED" : 2,  "CLD_DUMPED" : 3,  "CLD_TRAPPED" : 4,  "CLD_STOPPED" : 5,  "CLD_CONTINUED" : 6, 
 "POLL_IN" : 1,  "POLL_OUT" : 2,  "POLL_MSG" : 3,  "POLL_ERR" : 4,  "POLL_PRI" : 5,  "POLL_HUP" : 6, 
 "SS_ONSTACK" : 1,  "SS_DISABLE" : 2, 
 "REG_GS" : 0,  "REG_FS" : 1,  "REG_ES" : 2,  "REG_DS" : 3,  "REG_EDI" : 4,  "REG_ESI" : 5,  "REG_EBP" : 6,  "REG_ESP" : 7,  "REG_EBX" : 8,  "REG_EDX" : 9,  "REG_ECX" : 10,  "REG_EAX" : 11,  "REG_TRAPNO" : 12,  "REG_ERR" : 13,  "REG_EIP" : 14,  "REG_CS" : 15,  "REG_EFL" : 16,  "REG_UESP" : 17,  "REG_SS" : 18, 
 "MSG_OOB" : 1,  "MSG_PEEK" : 2,  "MSG_DONTROUTE" : 4,  "MSG_TRYHARD" : 4,  "MSG_CTRUNC" : 8,  "MSG_PROXY" : 16,  "MSG_TRUNC" : 32,  "MSG_DONTWAIT" : 64,  "MSG_EOR" : 128,  "MSG_WAITALL" : 256,  "MSG_FIN" : 512,  "MSG_SYN" : 1024,  "MSG_CONFIRM" : 2048,  "MSG_RST" : 4096,  "MSG_ERRQUEUE" : 8192,  "MSG_NOSIGNAL" : 16384,  "MSG_MORE" : 32768,  "MSG_WAITFORONE" : 65536,  "MSG_CMSG_CLOEXEC" : 1073741824, 
 "SCM_RIGHTS" : 1,  "SCM_CREDENTIALS" : 2, 
 "SHUT_RD" : 0,  "SHUT_WR" : 1,  "SHUT_RDWR" : 2, 
 "IPPROTO_IP" : 0,  "IPPROTO_HOPOPTS" : 0,  "IPPROTO_ICMP" : 1,  "IPPROTO_IGMP" : 2,  "IPPROTO_IPIP" : 4,  "IPPROTO_TCP" : 6,  "IPPROTO_EGP" : 8,  "IPPROTO_PUP" : 12,  "IPPROTO_UDP" : 17,  "IPPROTO_IDP" : 22,  "IPPROTO_TP" : 29,  "IPPROTO_DCCP" : 33,  "IPPROTO_IPV6" : 41,  "IPPROTO_ROUTING" : 43,  "IPPROTO_FRAGMENT" : 44,  "IPPROTO_RSVP" : 46,  "IPPROTO_GRE" : 47,  "IPPROTO_ESP" : 50,  "IPPROTO_AH" : 51,  "IPPROTO_ICMPV6" : 58,  "IPPROTO_NONE" : 59,  "IPPROTO_DSTOPTS" : 60,  "IPPROTO_MTP" : 92,  "IPPROTO_ENCAP" : 98,  "IPPROTO_PIM" : 103,  "IPPROTO_COMP" : 108,  "IPPROTO_SCTP" : 132,  "IPPROTO_UDPLITE" : 136,  "IPPROTO_RAW" : 255,  "IPPROTO_MAX" : 256, 
 "IPPORT_ECHO" : 7,  "IPPORT_DISCARD" : 9,  "IPPORT_SYSTAT" : 11,  "IPPORT_DAYTIME" : 13,  "IPPORT_NETSTAT" : 15,  "IPPORT_FTP" : 21,  "IPPORT_TELNET" : 23,  "IPPORT_SMTP" : 25,  "IPPORT_TIMESERVER" : 37,  "IPPORT_NAMESERVER" : 42,  "IPPORT_WHOIS" : 43,  "IPPORT_MTP" : 57,  "IPPORT_TFTP" : 69,  "IPPORT_RJE" : 77,  "IPPORT_FINGER" : 79,  "IPPORT_TTYLINK" : 87,  "IPPORT_SUPDUP" : 95,  "IPPORT_EXECSERVER" : 512,  "IPPORT_LOGINSERVER" : 513,  "IPPORT_CMDSERVER" : 514,  "IPPORT_EFSSERVER" : 520,  "IPPORT_BIFFUDP" : 512,  "IPPORT_WHOSERVER" : 513,  "IPPORT_ROUTESERVER" : 520,  "IPPORT_RESERVED" : 1024,  "IPPORT_USERRESERVED" : 5000, 
 "PTHREAD_CREATE_JOINABLE" : 0,  "PTHREAD_CREATE_DETACHED" : 1, 
 "PTHREAD_MUTEX_TIMED_NP" : 0,  "PTHREAD_MUTEX_RECURSIVE_NP" : 1,  "PTHREAD_MUTEX_ERRORCHECK_NP" : 2,  "PTHREAD_MUTEX_ADAPTIVE_NP" : 3,  "PTHREAD_MUTEX_NORMAL" : 0,  "PTHREAD_MUTEX_RECURSIVE" : 1,  "PTHREAD_MUTEX_ERRORCHECK" : 2,  "PTHREAD_MUTEX_DEFAULT" : 0,  "PTHREAD_MUTEX_FAST_NP" : 0, 
 "PTHREAD_MUTEX_STALLED" : 0,  "PTHREAD_MUTEX_STALLED_NP" : 0,  "PTHREAD_MUTEX_ROBUST" : 1,  "PTHREAD_MUTEX_ROBUST_NP" : 1, 
 "PTHREAD_PRIO_NONE" : 0,  "PTHREAD_PRIO_INHERIT" : 1,  "PTHREAD_PRIO_PROTECT" : 2, 
 "PTHREAD_RWLOCK_PREFER_READER_NP" : 0,  "PTHREAD_RWLOCK_PREFER_WRITER_NP" : 1,  "PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP" : 2,  "PTHREAD_RWLOCK_DEFAULT_NP" : 0, 
 "PTHREAD_INHERIT_SCHED" : 0,  "PTHREAD_EXPLICIT_SCHED" : 1, 
 "PTHREAD_SCOPE_SYSTEM" : 0,  "PTHREAD_SCOPE_PROCESS" : 1, 
 "PTHREAD_PROCESS_PRIVATE" : 0,  "PTHREAD_PROCESS_SHARED" : 1, 
 "PTHREAD_CANCEL_ENABLE" : 0,  "PTHREAD_CANCEL_DISABLE" : 1, 
 "PTHREAD_CANCEL_DEFERRED" : 0,  "PTHREAD_CANCEL_ASYNCHRONOUS" : 1, 
 "PAINT_SHOW_BRUSH" : 1,  "PAINT_FAST_NAVIGATE" : 2,  "PAINT_SHOW_BRUSH_ON_SURFACE" : 4, 
 "CTX_MODE_EDIT_MESH" : 0,  "CTX_MODE_EDIT_CURVE" : 1,  "CTX_MODE_EDIT_SURFACE" : 2,  "CTX_MODE_EDIT_TEXT" : 3,  "CTX_MODE_EDIT_ARMATURE" : 4,  "CTX_MODE_EDIT_METABALL" : 5,  "CTX_MODE_EDIT_LATTICE" : 6,  "CTX_MODE_POSE" : 7,  "CTX_MODE_SCULPT" : 8,  "CTX_MODE_PAINT_WEIGHT" : 9,  "CTX_MODE_PAINT_VERTEX" : 10,  "CTX_MODE_PAINT_TEXTURE" : 11,  "CTX_MODE_PARTICLE" : 12,  "CTX_MODE_OBJECT" : 13, 
 "CTX_DATA_TYPE_POINTER" : 0,  "CTX_DATA_TYPE_COLLECTION" : 1, 
 "RGN_TYPE_WINDOW" : 0,  "RGN_TYPE_HEADER" : 1,  "RGN_TYPE_CHANNELS" : 2,  "RGN_TYPE_TEMPORARY" : 3,  "RGN_TYPE_UI" : 4,  "RGN_TYPE_TOOLS" : 5,  "RGN_TYPE_TOOL_PROPS" : 6,  "RGN_TYPE_PREVIEW" : 7, 
 "INFO_RPT_DEBUG" : 1,  "INFO_RPT_INFO" : 2,  "INFO_RPT_OP" : 4,  "INFO_RPT_WARN" : 8,  "INFO_RPT_ERR" : 16, 
 "CONSOLE_LINE_OUTPUT" : 0,  "CONSOLE_LINE_INPUT" : 1,  "CONSOLE_LINE_INFO" : 2,  "CONSOLE_LINE_ERROR" : 3, 
 "SPACE_EMPTY" : 0,  "SPACE_VIEW3D" : 1,  "SPACE_IPO" : 2,  "SPACE_OUTLINER" : 3,  "SPACE_BUTS" : 4,  "SPACE_FILE" : 5,  "SPACE_IMAGE" : 6,  "SPACE_INFO" : 7,  "SPACE_SEQ" : 8,  "SPACE_TEXT" : 9,  "SPACE_IMASEL" : 10,  "SPACE_SOUND" : 11,  "SPACE_ACTION" : 12,  "SPACE_NLA" : 13,  "SPACE_SCRIPT" : 14,  "SPACE_TIME" : 15,  "SPACE_NODE" : 16,  "SPACE_LOGIC" : 17,  "SPACE_CONSOLE" : 18,  "SPACE_USERPREF" : 19,  "SPACEICONMAX" : 19, 
 "SIPO_MODE_ANIMATION" : 0,  "SIPO_MODE_DRIVERS" : 1, 
 "CURSOR_FACESEL" : 1000,  "CURSOR_WAIT" : 1001,  "CURSOR_EDIT" : 1002,  "CURSOR_X_MOVE" : 1003,  "CURSOR_Y_MOVE" : 1004,  "CURSOR_HELP" : 1005,  "CURSOR_STD" : 1006,  "CURSOR_NONE" : 1007,  "CURSOR_PENCIL" : 1008,  "CURSOR_COPY" : 1009, 
 "BC_NW_ARROWCURSOR" : 2,  "BC_NS_ARROWCURSOR" : 3,  "BC_EW_ARROWCURSOR" : 4,  "BC_WAITCURSOR" : 5,  "BC_CROSSCURSOR" : 6,  "BC_EDITCROSSCURSOR" : 7,  "BC_BOXSELCURSOR" : 8,  "BC_KNIFECURSOR" : 9,  "BC_VLOOPCURSOR" : 10,  "BC_TEXTEDITCURSOR" : 11,  "BC_PAINTBRUSHCURSOR" : 12,  "BC_HANDCURSOR" : 13,  "BC_NSEW_SCROLLCURSOR" : 14,  "BC_NS_SCROLLCURSOR" : 15,  "BC_EW_SCROLLCURSOR" : 16,  "BC_EYEDROPPER_CURSOR" : 17,  "BC_SWAPAREA_CURSOR" : 18,  "BC_NUMCURSORS" : 19, 
 "BC_BLACK" : 0,  "BC_WHITE" : 1,  "BC_RED" : 2,  "BC_BLUE" : 3,  "BC_GREEN" : 4,  "BC_YELLOW" : 5, 
 "NDOF_BUTTON_NONE" : 400,  "NDOF_BUTTON_MENU" : 401,  "NDOF_BUTTON_FIT" : 402,  "NDOF_BUTTON_TOP" : 403,  "NDOF_BUTTON_BOTTOM" : 404,  "NDOF_BUTTON_LEFT" : 405,  "NDOF_BUTTON_RIGHT" : 406,  "NDOF_BUTTON_FRONT" : 407,  "NDOF_BUTTON_BACK" : 408,  "NDOF_BUTTON_ISO1" : 409,  "NDOF_BUTTON_ISO2" : 410,  "NDOF_BUTTON_ROLL_CW" : 411,  "NDOF_BUTTON_ROLL_CCW" : 412,  "NDOF_BUTTON_SPIN_CW" : 413,  "NDOF_BUTTON_SPIN_CCW" : 414,  "NDOF_BUTTON_TILT_CW" : 415,  "NDOF_BUTTON_TILT_CCW" : 416,  "NDOF_BUTTON_ROTATE" : 417,  "NDOF_BUTTON_PANZOOM" : 418,  "NDOF_BUTTON_DOMINANT" : 419,  "NDOF_BUTTON_PLUS" : 420,  "NDOF_BUTTON_MINUS" : 421,  "NDOF_BUTTON_1" : 422,  "NDOF_BUTTON_2" : 423,  "NDOF_BUTTON_3" : 424,  "NDOF_BUTTON_4" : 425,  "NDOF_BUTTON_5" : 426,  "NDOF_BUTTON_6" : 427,  "NDOF_BUTTON_7" : 428,  "NDOF_BUTTON_8" : 429,  "NDOF_BUTTON_9" : 430,  "NDOF_BUTTON_10" : 431,  "NDOF_LAST" : 432, 
 "WM_OP_INVOKE_DEFAULT" : 0,  "WM_OP_INVOKE_REGION_WIN" : 1,  "WM_OP_INVOKE_REGION_CHANNELS" : 2,  "WM_OP_INVOKE_REGION_PREVIEW" : 3,  "WM_OP_INVOKE_AREA" : 4,  "WM_OP_INVOKE_SCREEN" : 5,  "WM_OP_EXEC_DEFAULT" : 6,  "WM_OP_EXEC_REGION_WIN" : 7,  "WM_OP_EXEC_REGION_CHANNELS" : 8,  "WM_OP_EXEC_REGION_PREVIEW" : 9,  "WM_OP_EXEC_AREA" : 10,  "WM_OP_EXEC_SCREEN" : 11, 
 "P_NOT_STARTED" : 0,  "P_STARTING" : 1,  "P_IN_PROGRESS" : 2,  "P_FINISHING" : 3,  "P_FINISHED" : 4, 
 "WM_LOG_DEBUG" : 0,  "WM_LOG_INFO" : 1000,  "WM_LOG_WARNING" : 2000,  "WM_ERROR_UNDEFINED" : 3000,  "WM_ERROR_INVALID_INPUT" : 3001,  "WM_ERROR_INVALID_CONTEXT" : 3002,  "WM_ERROR_OUT_OF_MEMORY" : 3003, 
 "WM_HANDLER_DEFAULT" : 0,  "WM_HANDLER_FILESELECT" : 1, 
 "FP_NAN" : 0,  "FP_INFINITE" : 1,  "FP_ZERO" : 2,  "FP_SUBNORMAL" : 3,  "FP_NORMAL" : 4, 
 "IEEE_" : -1,  "SVID_" : 0,  "XOPEN_" : 1,  "POSIX_" : 2,  "ISOC_" : 3, 
 "GHOST_kFailure" : 0,  "GHOST_kSuccess" : 1, 
 "GHOST_kTabletModeNone" : 0,  "GHOST_kTabletModeStylus" : 1,  "GHOST_kTabletModeEraser" : 2, 
 "GHOST_kNotVisible" : 0,  "GHOST_kPartiallyVisible" : 1,  "GHOST_kFullyVisible" : 2, 
 "GHOST_kFireTimeNever" : 4294967295, 
 "GHOST_kModifierKeyLeftShift" : 0,  "GHOST_kModifierKeyRightShift" : 1,  "GHOST_kModifierKeyLeftAlt" : 2,  "GHOST_kModifierKeyRightAlt" : 3,  "GHOST_kModifierKeyLeftControl" : 4,  "GHOST_kModifierKeyRightControl" : 5,  "GHOST_kModifierKeyOS" : 6,  "GHOST_kModifierKeyNumMasks" : 7, 
 "GHOST_kWindowStateNormal" : 0,  "GHOST_kWindowStateMaximized" : 1,  "GHOST_kWindowStateMinimized" : 2,  "GHOST_kWindowStateFullScreen" : 3,  "GHOST_kWindowStateEmbedded" : 4,  "GHOST_kWindowState8Normal" : 8,  "GHOST_kWindowState8Maximized" : 9,  "GHOST_kWindowState8Minimized" : 10,  "GHOST_kWindowState8FullScreen" : 11,  "GHOST_kWindowStateModified" : 12,  "GHOST_kWindowStateUnModified" : 13, 
 "GHOST_kExitCancel" : 0,  "GHOST_kExitNow" : 1, 
 "GHOST_kWindowOrderTop" : 0,  "GHOST_kWindowOrderBottom" : 1, 
 "GHOST_kDrawingContextTypeNone" : 0,  "GHOST_kDrawingContextTypeOpenGL" : 1, 
 "GHOST_kButtonMaskLeft" : 0,  "GHOST_kButtonMaskMiddle" : 1,  "GHOST_kButtonMaskRight" : 2,  "GHOST_kButtonMaskButton4" : 3,  "GHOST_kButtonMaskButton5" : 4,  "GHOST_kButtonNumMasks" : 5, 
 "GHOST_kEventUnknown" : 0,  "GHOST_kEventCursorMove" : 1,  "GHOST_kEventButtonDown" : 2,  "GHOST_kEventButtonUp" : 3,  "GHOST_kEventWheel" : 4,  "GHOST_kEventTrackpad" : 5,  "GHOST_kEventNDOFMotion" : 6,  "GHOST_kEventNDOFButton" : 7,  "GHOST_kEventKeyDown" : 8,  "GHOST_kEventKeyUp" : 9,  "GHOST_kEventQuit" : 10,  "GHOST_kEventWindowClose" : 11,  "GHOST_kEventWindowActivate" : 12,  "GHOST_kEventWindowDeactivate" : 13,  "GHOST_kEventWindowUpdate" : 14,  "GHOST_kEventWindowSize" : 15,  "GHOST_kEventWindowMove" : 16,  "GHOST_kEventDraggingEntered" : 17,  "GHOST_kEventDraggingUpdated" : 18,  "GHOST_kEventDraggingExited" : 19,  "GHOST_kEventDraggingDropDone" : 20,  "GHOST_kEventOpenMainFile" : 21,  "GHOST_kEventTimer" : 22,  "GHOST_kNumEventTypes" : 23, 
 "GHOST_kStandardCursorFirstCursor" : 0,  "GHOST_kStandardCursorDefault" : 0,  "GHOST_kStandardCursorRightArrow" : 1,  "GHOST_kStandardCursorLeftArrow" : 2,  "GHOST_kStandardCursorInfo" : 3,  "GHOST_kStandardCursorDestroy" : 4,  "GHOST_kStandardCursorHelp" : 5,  "GHOST_kStandardCursorCycle" : 6,  "GHOST_kStandardCursorSpray" : 7,  "GHOST_kStandardCursorWait" : 8,  "GHOST_kStandardCursorText" : 9,  "GHOST_kStandardCursorCrosshair" : 10,  "GHOST_kStandardCursorUpDown" : 11,  "GHOST_kStandardCursorLeftRight" : 12,  "GHOST_kStandardCursorTopSide" : 13,  "GHOST_kStandardCursorBottomSide" : 14,  "GHOST_kStandardCursorLeftSide" : 15,  "GHOST_kStandardCursorRightSide" : 16,  "GHOST_kStandardCursorTopLeftCorner" : 17,  "GHOST_kStandardCursorTopRightCorner" : 18,  "GHOST_kStandardCursorBottomRightCorner" : 19,  "GHOST_kStandardCursorBottomLeftCorner" : 20,  "GHOST_kStandardCursorCopy" : 21,  "GHOST_kStandardCursorCustom" : 22,  "GHOST_kStandardCursorPencil" : 23,  "GHOST_kStandardCursorNumCursors" : 24, 
 "GHOST_kKeyUnknown" : -1,  "GHOST_kKeyBackSpace" : 0,  "GHOST_kKeyTab" : 1,  "GHOST_kKeyLinefeed" : 2,  "GHOST_kKeyClear" : 3,  "GHOST_kKeyEnter" : 13,  "GHOST_kKeyEsc" : 27,  "GHOST_kKeySpace" : " ",  "GHOST_kKeyQuote" : 39,  "GHOST_kKeyComma" : ",",  "GHOST_kKeyMinus" : "-",  "GHOST_kKeyPeriod" : ".",  "GHOST_kKeySlash" : "/",  "GHOST_kKey0" : "0",  "GHOST_kKey1" : "0",  "GHOST_kKey2" : "0",  "GHOST_kKey3" : "0",  "GHOST_kKey4" : "0",  "GHOST_kKey5" : "0",  "GHOST_kKey6" : "0",  "GHOST_kKey7" : "0",  "GHOST_kKey8" : "0",  "GHOST_kKey9" : "0",  "GHOST_kKeySemicolon" : ";",  "GHOST_kKeyEqual" : "=",  "GHOST_kKeyA" : "A",  "GHOST_kKeyB" : "A",  "GHOST_kKeyC" : "A",  "GHOST_kKeyD" : "A",  "GHOST_kKeyE" : "A",  "GHOST_kKeyF" : "A",  "GHOST_kKeyG" : "A",  "GHOST_kKeyH" : "A",  "GHOST_kKeyI" : "A",  "GHOST_kKeyJ" : "A",  "GHOST_kKeyK" : "A",  "GHOST_kKeyL" : "A",  "GHOST_kKeyM" : "A",  "GHOST_kKeyN" : "A",  "GHOST_kKeyO" : "A",  "GHOST_kKeyP" : "A",  "GHOST_kKeyQ" : "A",  "GHOST_kKeyR" : "A",  "GHOST_kKeyS" : "A",  "GHOST_kKeyT" : "A",  "GHOST_kKeyU" : "A",  "GHOST_kKeyV" : "A",  "GHOST_kKeyW" : "A",  "GHOST_kKeyX" : "A",  "GHOST_kKeyY" : "A",  "GHOST_kKeyZ" : "A",  "GHOST_kKeyLeftBracket" : "[",  "GHOST_kKeyRightBracket" : "]",  "GHOST_kKeyBackslash" : 92,  "GHOST_kKeyAccentGrave" : "`",  "GHOST_kKeyLeftShift" : 256,  "GHOST_kKeyRightShift" : 257,  "GHOST_kKeyLeftControl" : 258,  "GHOST_kKeyRightControl" : 259,  "GHOST_kKeyLeftAlt" : 260,  "GHOST_kKeyRightAlt" : 261,  "GHOST_kKeyOS" : 262,  "GHOST_kKeyGrLess" : 263,  "GHOST_kKeyCapsLock" : 264,  "GHOST_kKeyNumLock" : 265,  "GHOST_kKeyScrollLock" : 266,  "GHOST_kKeyLeftArrow" : 267,  "GHOST_kKeyRightArrow" : 268,  "GHOST_kKeyUpArrow" : 269,  "GHOST_kKeyDownArrow" : 270,  "GHOST_kKeyPrintScreen" : 271,  "GHOST_kKeyPause" : 272,  "GHOST_kKeyInsert" : 273,  "GHOST_kKeyDelete" : 274,  "GHOST_kKeyHome" : 275,  "GHOST_kKeyEnd" : 276,  "GHOST_kKeyUpPage" : 277,  "GHOST_kKeyDownPage" : 278,  "GHOST_kKeyNumpad0" : 279,  "GHOST_kKeyNumpad1" : 280,  "GHOST_kKeyNumpad2" : 281,  "GHOST_kKeyNumpad3" : 282,  "GHOST_kKeyNumpad4" : 283,  "GHOST_kKeyNumpad5" : 284,  "GHOST_kKeyNumpad6" : 285,  "GHOST_kKeyNumpad7" : 286,  "GHOST_kKeyNumpad8" : 287,  "GHOST_kKeyNumpad9" : 288,  "GHOST_kKeyNumpadPeriod" : 289,  "GHOST_kKeyNumpadEnter" : 290,  "GHOST_kKeyNumpadPlus" : 291,  "GHOST_kKeyNumpadMinus" : 292,  "GHOST_kKeyNumpadAsterisk" : 293,  "GHOST_kKeyNumpadSlash" : 294,  "GHOST_kKeyF1" : 295,  "GHOST_kKeyF2" : 296,  "GHOST_kKeyF3" : 297,  "GHOST_kKeyF4" : 298,  "GHOST_kKeyF5" : 299,  "GHOST_kKeyF6" : 300,  "GHOST_kKeyF7" : 301,  "GHOST_kKeyF8" : 302,  "GHOST_kKeyF9" : 303,  "GHOST_kKeyF10" : 304,  "GHOST_kKeyF11" : 305,  "GHOST_kKeyF12" : 306,  "GHOST_kKeyF13" : 307,  "GHOST_kKeyF14" : 308,  "GHOST_kKeyF15" : 309,  "GHOST_kKeyF16" : 310,  "GHOST_kKeyF17" : 311,  "GHOST_kKeyF18" : 312,  "GHOST_kKeyF19" : 313,  "GHOST_kKeyF20" : 314,  "GHOST_kKeyF21" : 315,  "GHOST_kKeyF22" : 316,  "GHOST_kKeyF23" : 317,  "GHOST_kKeyF24" : 318,  "GHOST_kKeyMediaPlay" : 319,  "GHOST_kKeyMediaStop" : 320,  "GHOST_kKeyMediaFirst" : 321,  "GHOST_kKeyMediaLast" : 322, 
 "GHOST_kGrabDisable" : 0,  "GHOST_kGrabNormal" : 1,  "GHOST_kGrabWrap" : 2,  "GHOST_kGrabHide" : 3, 
 "GHOST_kTrackpadEventUnknown" : 0,  "GHOST_kTrackpadEventScroll" : 1,  "GHOST_kTrackpadEventRotate" : 2,  "GHOST_kTrackpadEventSwipe" : 3,  "GHOST_kTrackpadEventMagnify" : 4, 
 "GHOST_kDragnDropTypeUnknown" : 0,  "GHOST_kDragnDropTypeFilenames" : 1,  "GHOST_kDragnDropTypeString" : 2,  "GHOST_kDragnDropTypeBitmap" : 3, 
 "GHOST_kNotStarted" : 0,  "GHOST_kStarting" : 1,  "GHOST_kInProgress" : 2,  "GHOST_kFinishing" : 3,  "GHOST_kFinished" : 4, 
 "GHOST_kPress" : 0,  "GHOST_kRelease" : 1, 
 "Action_id_root_ACTION" : 17217,  "Action_id_root_ARMATURE" : 21057,  "Action_id_root_BRUSH" : 21058,  "Action_id_root_CAMERA" : 16707,  "Action_id_root_CURVE" : 21827,  "Action_id_root_FONT" : 18006,  "Action_id_root_GREASEPENCIL" : 17479,  "Action_id_root_GROUP" : 21063,  "Action_id_root_IMAGE" : 19785,  "Action_id_root_KEY" : 17739,  "Action_id_root_LAMP" : 16716,  "Action_id_root_LIBRARY" : 18764,  "Action_id_root_LATTICE" : 21580,  "Action_id_root_MATERIAL" : 16717,  "Action_id_root_META" : 16973,  "Action_id_root_MESH" : 17741,  "Action_id_root_NODETREE" : 21582,  "Action_id_root_OBJECT" : 16975,  "Action_id_root_PARTICLE" : 16720,  "Action_id_root_SCENE" : 17235,  "Action_id_root_SCREEN" : 21075,  "Action_id_root_SPEAKER" : 19283,  "Action_id_root_SOUND" : 20307,  "Action_id_root_TEXT" : 22612,  "Action_id_root_TEXTURE" : 17748,  "Action_id_root_WORLD" : 20311,  "Action_id_root_WINDOWMANAGER" : 19799, 
 "ActionActuator_play_mode_PLAY" : 0,  "ActionActuator_play_mode_PINGPONG" : 1,  "ActionActuator_play_mode_FLIPPER" : 2,  "ActionActuator_play_mode_LOOPSTOP" : 3,  "ActionActuator_play_mode_LOOPEND" : 4,  "ActionActuator_play_mode_PROPERTY" : 6, 
 "ActionConstraint_transform_channel_LOCATION_X" : 20,  "ActionConstraint_transform_channel_LOCATION_Y" : 21,  "ActionConstraint_transform_channel_LOCATION_Z" : 22,  "ActionConstraint_transform_channel_ROTATION_X" : 0,  "ActionConstraint_transform_channel_ROTATION_Y" : 1,  "ActionConstraint_transform_channel_ROTATION_Z" : 2,  "ActionConstraint_transform_channel_SCALE_X" : 10,  "ActionConstraint_transform_channel_SCALE_Y" : 11,  "ActionConstraint_transform_channel_SCALE_Z" : 12, 
 "Actuator_type_ACTION" : 15,  "Actuator_type_ARMATURE" : 23,  "Actuator_type_CAMERA" : 3,  "Actuator_type_CONSTRAINT" : 9,  "Actuator_type_EDIT_OBJECT" : 10,  "Actuator_type_FILTER_2D" : 19,  "Actuator_type_GAME" : 17,  "Actuator_type_MESSAGE" : 14,  "Actuator_type_MOTION" : 0,  "Actuator_type_PARENT" : 20,  "Actuator_type_PROPERTY" : 6,  "Actuator_type_RANDOM" : 13,  "Actuator_type_SCENE" : 11,  "Actuator_type_SOUND" : 5,  "Actuator_type_STATE" : 22,  "Actuator_type_VISIBILITY" : 18, 
 "AnimData_action_blend_type_REPLACE" : 0,  "AnimData_action_blend_type_ADD" : 1,  "AnimData_action_blend_type_SUBTRACT" : 2,  "AnimData_action_blend_type_MULITPLY" : 3, 
 "AnimData_action_extrapolation_NOTHING" : 2,  "AnimData_action_extrapolation_HOLD" : 0,  "AnimData_action_extrapolation_HOLD_FORWARD" : 1, 
 "AnimVizMotionPaths_bake_location_HEADS" : 2,  "AnimVizMotionPaths_bake_location_TAILS" : 0, 
 "AnimVizMotionPaths_type_CURRENT_FRAME" : 1,  "AnimVizMotionPaths_type_RANGE" : 0, 
 "AnimVizOnionSkinning_type_NONE" : 0,  "AnimVizOnionSkinning_type_CURRENT_FRAME" : 1,  "AnimVizOnionSkinning_type_RANGE" : 2,  "AnimVizOnionSkinning_type_KEYS" : 3, 
 "Area_type_EMPTY" : 0,  "Area_type_VIEW_3D" : 1,  "Area_type_GRAPH_EDITOR" : 2,  "Area_type_OUTLINER" : 3,  "Area_type_PROPERTIES" : 4,  "Area_type_FILE_BROWSER" : 5,  "Area_type_IMAGE_EDITOR" : 6,  "Area_type_INFO" : 7,  "Area_type_SEQUENCE_EDITOR" : 8,  "Area_type_TEXT_EDITOR" : 9,  "Area_type_AUDIO_WINDOW" : 11,  "Area_type_DOPESHEET_EDITOR" : 12,  "Area_type_NLA_EDITOR" : 13,  "Area_type_SCRIPTS_WINDOW" : 14,  "Area_type_TIMELINE" : 15,  "Area_type_NODE_EDITOR" : 16,  "Area_type_LOGIC_EDITOR" : 17,  "Area_type_CONSOLE" : 18,  "Area_type_USER_PREFERENCES" : 19, 
 "AreaLamp_shadow_method_NOSHADOW" : 0,  "AreaLamp_shadow_method_RAY_SHADOW" : 8192, 
 "AreaLamp_shadow_ray_sample_method_ADAPTIVE_QMC" : 1,  "AreaLamp_shadow_ray_sample_method_CONSTANT_QMC" : 2,  "AreaLamp_shadow_ray_sample_method_CONSTANT_JITTERED" : 0, 
 "AreaLamp_shape_SQUARE" : 0,  "AreaLamp_shape_RECTANGLE" : 1, 
 "Armature_draw_type_OCTAHEDRAL" : 0,  "Armature_draw_type_STICK" : 1,  "Armature_draw_type_BBONE" : 2,  "Armature_draw_type_ENVELOPE" : 3,  "Armature_draw_type_WIRE" : 4, 
 "Armature_ghost_type_CURRENT_FRAME" : 0,  "Armature_ghost_type_RANGE" : 1,  "Armature_ghost_type_KEYS" : 2, 
 "Armature_pose_position_POSE" : 0,  "Armature_pose_position_REST" : 1, 
 "Armature_vert_deformer_BLENDER" : 0,  "Armature_vert_deformer_BGE_CPU" : 1, 
 "ArmatureActuator_mode_RUN" : 0,  "ArmatureActuator_mode_ENABLE" : 1,  "ArmatureActuator_mode_DISABLE" : 2,  "ArmatureActuator_mode_SETTARGET" : 3,  "ArmatureActuator_mode_SETWEIGHT" : 4, 
 "ArmatureSensor_test_type_STATECHG" : 0,  "ArmatureSensor_test_type_LINERRORBELOW" : 1,  "ArmatureSensor_test_type_LINERRORABOVE" : 2,  "ArmatureSensor_test_type_ROTERRORBELOW" : 3,  "ArmatureSensor_test_type_ROTERRORABOVE" : 4, 
 "ArrayModifier_fit_type_FIXED_COUNT" : 0,  "ArrayModifier_fit_type_FIT_LENGTH" : 1,  "ArrayModifier_fit_type_FIT_CURVE" : 2, 
 "BackgroundImage_view_axis_LEFT" : 8,  "BackgroundImage_view_axis_RIGHT" : 16,  "BackgroundImage_view_axis_BACK" : 4,  "BackgroundImage_view_axis_FRONT" : 2,  "BackgroundImage_view_axis_BOTTOM" : 64,  "BackgroundImage_view_axis_TOP" : 32,  "BackgroundImage_view_axis_ALL" : 0,  "BackgroundImage_view_axis_CAMERA" : 256, 
 "BevelModifier_edge_weight_method_AVERAGE" : 0,  "BevelModifier_edge_weight_method_SHARPEST" : 128,  "BevelModifier_edge_weight_method_LARGEST" : 256, 
 "BevelModifier_limit_method_NONE" : 0,  "BevelModifier_limit_method_ANGLE" : 8,  "BevelModifier_limit_method_WEIGHT" : 16, 
 "BezierSplinePoint_handle_left_type_FREE" : 0,  "BezierSplinePoint_handle_left_type_VECTOR" : 2,  "BezierSplinePoint_handle_left_type_ALIGNED" : 3,  "BezierSplinePoint_handle_left_type_AUTO" : 1, 
 "BezierSplinePoint_handle_right_type_FREE" : 0,  "BezierSplinePoint_handle_right_type_VECTOR" : 2,  "BezierSplinePoint_handle_right_type_ALIGNED" : 3,  "BezierSplinePoint_handle_right_type_AUTO" : 1, 
 "BlendTexture_use_flip_axis_HORIZONTAL" : 0,  "BlendTexture_use_flip_axis_VERTICAL" : 2, 
 "BlendTexture_progression_LINEAR" : 0,  "BlendTexture_progression_QUADRATIC" : 1,  "BlendTexture_progression_EASING" : 2,  "BlendTexture_progression_DIAGONAL" : 3,  "BlendTexture_progression_SPHERICAL" : 4,  "BlendTexture_progression_QUADRATIC_SPHERE" : 5,  "BlendTexture_progression_RADIAL" : 6, 
 "BoidRule_type_GOAL" : 1,  "BoidRule_type_AVOID" : 2,  "BoidRule_type_AVOID_COLLISION" : 3,  "BoidRule_type_SEPARATE" : 4,  "BoidRule_type_FLOCK" : 5,  "BoidRule_type_FOLLOW_LEADER" : 6,  "BoidRule_type_AVERAGE_SPEED" : 7,  "BoidRule_type_FIGHT" : 8, 
 "BoidState_ruleset_type_FUZZY" : 0,  "BoidState_ruleset_type_RANDOM" : 1,  "BoidState_ruleset_type_AVERAGE" : 2, 
 "BoneGroup_color_set_DEFAULT" : 0,  "BoneGroup_color_set_THEME01" : 1,  "BoneGroup_color_set_THEME02" : 2,  "BoneGroup_color_set_THEME03" : 3,  "BoneGroup_color_set_THEME04" : 4,  "BoneGroup_color_set_THEME05" : 5,  "BoneGroup_color_set_THEME06" : 6,  "BoneGroup_color_set_THEME07" : 7,  "BoneGroup_color_set_THEME08" : 8,  "BoneGroup_color_set_THEME09" : 9,  "BoneGroup_color_set_THEME10" : 10,  "BoneGroup_color_set_THEME11" : 11,  "BoneGroup_color_set_THEME12" : 12,  "BoneGroup_color_set_THEME13" : 13,  "BoneGroup_color_set_THEME14" : 14,  "BoneGroup_color_set_THEME15" : 15,  "BoneGroup_color_set_THEME16" : 16,  "BoneGroup_color_set_THEME17" : 17,  "BoneGroup_color_set_THEME18" : 18,  "BoneGroup_color_set_THEME19" : 19,  "BoneGroup_color_set_THEME20" : 20,  "BoneGroup_color_set_CUSTOM" : -1, 
 "BooleanModifier_operation_INTERSECT" : 0,  "BooleanModifier_operation_UNION" : 1,  "BooleanModifier_operation_DIFFERENCE" : 2, 
 "Brush_blend_MIX" : 0,  "Brush_blend_ADD" : 1,  "Brush_blend_SUB" : 2,  "Brush_blend_MUL" : 3,  "Brush_blend_LIGHTEN" : 4,  "Brush_blend_DARKEN" : 5,  "Brush_blend_ERASE_ALPHA" : 6,  "Brush_blend_ADD_ALPHA" : 7, 
 "Brush_direction_ADD" : 0,  "Brush_direction_SUBTRACT" : 512, 
 "Brush_image_tool_DRAW" : 0,  "Brush_image_tool_SOFTEN" : 1,  "Brush_image_tool_SMEAR" : 2,  "Brush_image_tool_CLONE" : 3, 
 "Brush_sculpt_plane_AREA" : 0,  "Brush_sculpt_plane_VIEW" : 1,  "Brush_sculpt_plane_X" : 2,  "Brush_sculpt_plane_Y" : 3,  "Brush_sculpt_plane_Z" : 4, 
 "Brush_sculpt_tool_BLOB" : 17,  "Brush_sculpt_tool_CLAY" : 8,  "Brush_sculpt_tool_CREASE" : 16,  "Brush_sculpt_tool_DRAW" : 1,  "Brush_sculpt_tool_FILL" : 9,  "Brush_sculpt_tool_FLATTEN" : 7,  "Brush_sculpt_tool_GRAB" : 5,  "Brush_sculpt_tool_INFLATE" : 4,  "Brush_sculpt_tool_LAYER" : 6,  "Brush_sculpt_tool_NUDGE" : 11,  "Brush_sculpt_tool_PINCH" : 3,  "Brush_sculpt_tool_ROTATE" : 14,  "Brush_sculpt_tool_SCRAPE" : 10,  "Brush_sculpt_tool_SMOOTH" : 2,  "Brush_sculpt_tool_SNAKE_HOOK" : 13,  "Brush_sculpt_tool_THUMB" : 12, 
 "Brush_stroke_method_DOTS" : 0,  "Brush_stroke_method_DRAG_DOT" : 8388608,  "Brush_stroke_method_SPACE" : 1024,  "Brush_stroke_method_ANCHORED" : 256,  "Brush_stroke_method_AIRBRUSH" : 1, 
 "Brush_texture_angle_source_random_USER" : 0,  "Brush_texture_angle_source_random_RAKE" : 128,  "Brush_texture_angle_source_random_RANDOM" : 33554432, 
 "Brush_texture_angle_source_no_random_USER" : 0,  "Brush_texture_angle_source_no_random_RAKE" : 128, 
 "Brush_vertex_tool_MIX" : 0,  "Brush_vertex_tool_ADD" : 1,  "Brush_vertex_tool_SUB" : 2,  "Brush_vertex_tool_MUL" : 3,  "Brush_vertex_tool_BLUR" : 4,  "Brush_vertex_tool_LIGHTEN" : 5,  "Brush_vertex_tool_DARKEN" : 6, 
 "BrushTextureSlot_map_mode_FIXED" : 0,  "BrushTextureSlot_map_mode_TILED" : 1,  "BrushTextureSlot_map_mode_3D" : 2, 
 "Camera_show_guide_CENTER" : 1,  "Camera_show_guide_CENTER_DIAGONAL" : 2,  "Camera_show_guide_THIRDS" : 4,  "Camera_show_guide_GOLDEN" : 8,  "Camera_show_guide_GOLDEN_TRIANGLE_A" : 16,  "Camera_show_guide_GOLDEN_TRIANGLE_B" : 32,  "Camera_show_guide_HARMONY_TRIANGLE_A" : 64,  "Camera_show_guide_HARMONY_TRIANGLE_B" : 128, 
 "Camera_lens_unit_MILLIMETERS" : 0,  "Camera_lens_unit_DEGREES" : 32, 
 "Camera_type_PERSP" : 0,  "Camera_type_ORTHO" : 1, 
 "CameraActuator_axis_X" : 120,  "CameraActuator_axis_Y" : 121, 
 "CastModifier_cast_type_SPHERE" : 0,  "CastModifier_cast_type_CYLINDER" : 1,  "CastModifier_cast_type_CUBOID" : 2, 
 "ClampToConstraint_main_axis_CLAMPTO_AUTO" : 0,  "ClampToConstraint_main_axis_CLAMPTO_X" : 1,  "ClampToConstraint_main_axis_CLAMPTO_Y" : 2,  "ClampToConstraint_main_axis_CLAMPTO_Z" : 3, 
 "CloudsTexture_cloud_type_GREYSCALE" : 0,  "CloudsTexture_cloud_type_COLOR" : 1, 
 "CloudsTexture_noise_basis_BLENDER_ORIGINAL" : 0,  "CloudsTexture_noise_basis_ORIGINAL_PERLIN" : 1,  "CloudsTexture_noise_basis_IMPROVED_PERLIN" : 2,  "CloudsTexture_noise_basis_VORONOI_F1" : 3,  "CloudsTexture_noise_basis_VORONOI_F2" : 4,  "CloudsTexture_noise_basis_VORONOI_F3" : 5,  "CloudsTexture_noise_basis_VORONOI_F4" : 6,  "CloudsTexture_noise_basis_VORONOI_F2_F1" : 7,  "CloudsTexture_noise_basis_VORONOI_CRACKLE" : 8,  "CloudsTexture_noise_basis_CELL_NOISE" : 14, 
 "CloudsTexture_noise_type_SOFT_NOISE" : 0,  "CloudsTexture_noise_type_HARD_NOISE" : 1, 
 "ColorRamp_interpolation_EASE" : 1,  "ColorRamp_interpolation_CARDINAL" : 3,  "ColorRamp_interpolation_LINEAR" : 0,  "ColorRamp_interpolation_B_SPLINE" : 2,  "ColorRamp_interpolation_CONSTANT" : 4, 
 "CompositorNode_type_VIEWER" : 201,  "CompositorNode_type_RGB" : 202,  "CompositorNode_type_VALUE" : 203,  "CompositorNode_type_MIX_RGB" : 204,  "CompositorNode_type_VALTORGB" : 205,  "CompositorNode_type_RGBTOBW" : 206,  "CompositorNode_type_NORMAL" : 207,  "CompositorNode_type_CURVE_VEC" : 208,  "CompositorNode_type_CURVE_RGB" : 209,  "CompositorNode_type_ALPHAOVER" : 210,  "CompositorNode_type_BLUR" : 211,  "CompositorNode_type_FILTER" : 212,  "CompositorNode_type_MAP_VALUE" : 213,  "CompositorNode_type_TIME" : 214,  "CompositorNode_type_VECBLUR" : 215,  "CompositorNode_type_SEPRGBA" : 216,  "CompositorNode_type_SEPHSVA" : 217,  "CompositorNode_type_SETALPHA" : 218,  "CompositorNode_type_HUE_SAT" : 219,  "CompositorNode_type_IMAGE" : 220,  "CompositorNode_type_R_LAYERS" : 221,  "CompositorNode_type_COMPOSITE" : 222,  "CompositorNode_type_OUTPUT_FILE" : 223,  "CompositorNode_type_TEXTURE" : 224,  "CompositorNode_type_TRANSLATE" : 225,  "CompositorNode_type_ZCOMBINE" : 226,  "CompositorNode_type_COMBRGBA" : 227,  "CompositorNode_type_DILATEERODE" : 228,  "CompositorNode_type_ROTATE" : 229,  "CompositorNode_type_SCALE" : 230,  "CompositorNode_type_SEPYCCA" : 231,  "CompositorNode_type_COMBYCCA" : 232,  "CompositorNode_type_SEPYUVA" : 233,  "CompositorNode_type_COMBYUVA" : 234,  "CompositorNode_type_DIFF_MATTE" : 235,  "CompositorNode_type_COLOR_SPILL" : 236,  "CompositorNode_type_CHROMA_MATTE" : 237,  "CompositorNode_type_CHANNEL_MATTE" : 238,  "CompositorNode_type_FLIP" : 239,  "CompositorNode_type_SPLITVIEWER" : 240,  "CompositorNode_type_MAP_UV" : 242,  "CompositorNode_type_ID_MASK" : 243,  "CompositorNode_type_DEFOCUS" : 244,  "CompositorNode_type_DISPLACE" : 245,  "CompositorNode_type_COMBHSVA" : 246,  "CompositorNode_type_MATH" : 247,  "CompositorNode_type_LUMA_MATTE" : 248,  "CompositorNode_type_BRIGHTCONTRAST" : 249,  "CompositorNode_type_GAMMA" : 250,  "CompositorNode_type_INVERT" : 251,  "CompositorNode_type_NORMALIZE" : 252,  "CompositorNode_type_CROP" : 253,  "CompositorNode_type_DBLUR" : 254,  "CompositorNode_type_BILATERALBLUR" : 255,  "CompositorNode_type_PREMULKEY" : 256,  "CompositorNode_type_DISTANCE_MATTE" : 257,  "CompositorNode_type_LEVELS" : 258,  "CompositorNode_type_COLOR_MATTE" : 259,  "CompositorNode_type_COLORBALANCE" : 260,  "CompositorNode_type_HUECORRECT" : 261,  "CompositorNode_type_GLARE" : 301,  "CompositorNode_type_TONEMAP" : 302,  "CompositorNode_type_LENSDIST" : 303,  "CompositorNode_type_SCRIPT" : 123,  "CompositorNode_type_GROUP" : 2, 
 "CompositorNodeBlur_aspect_correction_NONE" : 0,  "CompositorNodeBlur_aspect_correction_Y" : 1,  "CompositorNodeBlur_aspect_correction_X" : 2, 
 "CompositorNodeBlur_filter_type_FLAT" : 0,  "CompositorNodeBlur_filter_type_TENT" : 1,  "CompositorNodeBlur_filter_type_QUAD" : 2,  "CompositorNodeBlur_filter_type_CUBIC" : 3,  "CompositorNodeBlur_filter_type_GAUSS" : 5,  "CompositorNodeBlur_filter_type_FAST_GAUSS" : 7,  "CompositorNodeBlur_filter_type_CATROM" : 4,  "CompositorNodeBlur_filter_type_MITCH" : 6, 
 "CompositorNodeChannelMatte_limit_method_SINGLE" : 0,  "CompositorNodeChannelMatte_limit_method_MAX" : 1, 
 "CompositorNodeChannelMatte_matte_channel_R" : 1,  "CompositorNodeChannelMatte_matte_channel_G" : 2,  "CompositorNodeChannelMatte_matte_channel_B" : 3, 
 "CompositorNodeChannelMatte_color_space_RGB" : 1,  "CompositorNodeChannelMatte_color_space_HSV" : 2,  "CompositorNodeChannelMatte_color_space_YUV" : 3,  "CompositorNodeChannelMatte_color_space_YCC" : 4, 
 "CompositorNodeChannelMatte_limit_channel_R" : 1,  "CompositorNodeChannelMatte_limit_channel_G" : 2,  "CompositorNodeChannelMatte_limit_channel_B" : 3, 
 "CompositorNodeColorBalance_correction_method_LIFT_GAMMA_GAIN" : 0,  "CompositorNodeColorBalance_correction_method_OFFSET_POWER_SLOPE" : 1, 
 "CompositorNodeColorSpill_limit_method_SIMPLE" : 0,  "CompositorNodeColorSpill_limit_method_AVERAGE" : 1, 
 "CompositorNodeColorSpill_channel_R" : 1,  "CompositorNodeColorSpill_channel_G" : 2,  "CompositorNodeColorSpill_channel_B" : 3, 
 "CompositorNodeColorSpill_limit_channel_R" : 1,  "CompositorNodeColorSpill_limit_channel_G" : 2,  "CompositorNodeColorSpill_limit_channel_B" : 3, 
 "CompositorNodeCombYCCA_mode_ITUBT601" : 0,  "CompositorNodeCombYCCA_mode_ITUBT709" : 1,  "CompositorNodeCombYCCA_mode_JFIF" : 2, 
 "CompositorNodeDefocus_bokeh_OCTAGON" : 8,  "CompositorNodeDefocus_bokeh_HEPTAGON" : 7,  "CompositorNodeDefocus_bokeh_HEXAGON" : 6,  "CompositorNodeDefocus_bokeh_PENTAGON" : 5,  "CompositorNodeDefocus_bokeh_SQUARE" : 4,  "CompositorNodeDefocus_bokeh_TRIANGLE" : 3,  "CompositorNodeDefocus_bokeh_CIRCLE" : 0, 
 "CompositorNodeFilter_filter_type_SOFTEN" : 0,  "CompositorNodeFilter_filter_type_SHARPEN" : 1,  "CompositorNodeFilter_filter_type_LAPLACE" : 2,  "CompositorNodeFilter_filter_type_SOBEL" : 3,  "CompositorNodeFilter_filter_type_PREWITT" : 4,  "CompositorNodeFilter_filter_type_KIRSCH" : 5,  "CompositorNodeFilter_filter_type_SHADOW" : 6, 
 "CompositorNodeFlip_axis_X" : 0,  "CompositorNodeFlip_axis_Y" : 1,  "CompositorNodeFlip_axis_XY" : 2, 
 "CompositorNodeGlare_glare_type_GHOSTS" : 3,  "CompositorNodeGlare_glare_type_STREAKS" : 2,  "CompositorNodeGlare_glare_type_FOG_GLOW" : 1,  "CompositorNodeGlare_glare_type_SIMPLE_STAR" : 0, 
 "CompositorNodeGlare_quality_HIGH" : 0,  "CompositorNodeGlare_quality_MEDIUM" : 1,  "CompositorNodeGlare_quality_LOW" : 2, 
 "CompositorNodeImage_layer_PLACEHOLDER" : 0, 
 "CompositorNodeLevels_channel_COMBINED_RGB" : 1,  "CompositorNodeLevels_channel_RED" : 2,  "CompositorNodeLevels_channel_GREEN" : 3,  "CompositorNodeLevels_channel_BLUE" : 4,  "CompositorNodeLevels_channel_LUMINANCE" : 5, 
 "CompositorNodeMath_operation_ADD" : 0,  "CompositorNodeMath_operation_SUBTRACT" : 1,  "CompositorNodeMath_operation_MULTIPLY" : 2,  "CompositorNodeMath_operation_DIVIDE" : 3,  "CompositorNodeMath_operation_SINE" : 4,  "CompositorNodeMath_operation_COSINE" : 5,  "CompositorNodeMath_operation_TANGENT" : 6,  "CompositorNodeMath_operation_ARCSINE" : 7,  "CompositorNodeMath_operation_ARCCOSINE" : 8,  "CompositorNodeMath_operation_ARCTANGENT" : 9,  "CompositorNodeMath_operation_POWER" : 10,  "CompositorNodeMath_operation_LOGARITHM" : 11,  "CompositorNodeMath_operation_MINIMUM" : 12,  "CompositorNodeMath_operation_MAXIMUM" : 13,  "CompositorNodeMath_operation_ROUND" : 14,  "CompositorNodeMath_operation_LESS_THAN" : 15,  "CompositorNodeMath_operation_GREATER_THAN" : 16, 
 "CompositorNodeMixRGB_blend_type_MIX" : 0,  "CompositorNodeMixRGB_blend_type_ADD" : 1,  "CompositorNodeMixRGB_blend_type_MULTIPLY" : 2,  "CompositorNodeMixRGB_blend_type_SUBTRACT" : 3,  "CompositorNodeMixRGB_blend_type_SCREEN" : 4,  "CompositorNodeMixRGB_blend_type_DIVIDE" : 5,  "CompositorNodeMixRGB_blend_type_DIFFERENCE" : 6,  "CompositorNodeMixRGB_blend_type_DARKEN" : 7,  "CompositorNodeMixRGB_blend_type_LIGHTEN" : 8,  "CompositorNodeMixRGB_blend_type_OVERLAY" : 9,  "CompositorNodeMixRGB_blend_type_DODGE" : 10,  "CompositorNodeMixRGB_blend_type_BURN" : 11,  "CompositorNodeMixRGB_blend_type_HUE" : 12,  "CompositorNodeMixRGB_blend_type_SATURATION" : 13,  "CompositorNodeMixRGB_blend_type_VALUE" : 14,  "CompositorNodeMixRGB_blend_type_COLOR" : 15,  "CompositorNodeMixRGB_blend_type_SOFT_LIGHT" : 16,  "CompositorNodeMixRGB_blend_type_LINEAR_LIGHT" : 17, 
 "CompositorNodeOutputFile_exr_codec_NONE" : 0,  "CompositorNodeOutputFile_exr_codec_PXR24" : 1,  "CompositorNodeOutputFile_exr_codec_ZIP" : 2,  "CompositorNodeOutputFile_exr_codec_PIZ" : 3,  "CompositorNodeOutputFile_exr_codec_RLE" : 4, 
 "CompositorNodeOutputFile_image_type_TARGA" : 0,  "CompositorNodeOutputFile_image_type_RAW_TARGA" : 14,  "CompositorNodeOutputFile_image_type_PNG" : 17,  "CompositorNodeOutputFile_image_type_DDS" : 29,  "CompositorNodeOutputFile_image_type_BMP" : 20,  "CompositorNodeOutputFile_image_type_JPEG" : 4,  "CompositorNodeOutputFile_image_type_IRIS" : 1,  "CompositorNodeOutputFile_image_type_RADIANCE_HDR" : 21,  "CompositorNodeOutputFile_image_type_CINEON" : 26,  "CompositorNodeOutputFile_image_type_DPX" : 27,  "CompositorNodeOutputFile_image_type_OPENEXR" : 23, 
 "CompositorNodePremulKey_mapping_KEY_TO_PREMUL" : 0,  "CompositorNodePremulKey_mapping_PREMUL_TO_KEY" : 1, 
 "CompositorNodeRLayers_layer_PLACEHOLDER" : 0, 
 "CompositorNodeRotate_filter_type_NEAREST" : 0,  "CompositorNodeRotate_filter_type_BILINEAR" : 1,  "CompositorNodeRotate_filter_type_BICUBIC" : 2, 
 "CompositorNodeScale_space_RELATIVE" : 0,  "CompositorNodeScale_space_ABSOLUTE" : 1,  "CompositorNodeScale_space_SCENE_SIZE" : 2,  "CompositorNodeScale_space_RENDER_SIZE" : 3, 
 "CompositorNodeSepYCCA_mode_ITUBT601" : 0,  "CompositorNodeSepYCCA_mode_ITUBT709" : 1,  "CompositorNodeSepYCCA_mode_JFIF" : 2, 
 "CompositorNodeSplitViewer_axis_X" : 0,  "CompositorNodeSplitViewer_axis_Y" : 1, 
 "CompositorNodeTonemap_tonemap_type_RD_PHOTORECEPTOR" : 1,  "CompositorNodeTonemap_tonemap_type_RH_SIMPLE" : 0, 
 "Constraint_owner_space_WORLD" : 0,  "Constraint_owner_space_POSE" : 2,  "Constraint_owner_space_LOCAL_WITH_PARENT" : 3,  "Constraint_owner_space_LOCAL" : 1, 
 "Constraint_target_space_WORLD" : 0,  "Constraint_target_space_POSE" : 2,  "Constraint_target_space_LOCAL_WITH_PARENT" : 3,  "Constraint_target_space_LOCAL" : 1, 
 "Constraint_type_COPY_LOCATION" : 9,  "Constraint_type_COPY_ROTATION" : 8,  "Constraint_type_COPY_SCALE" : 10,  "Constraint_type_COPY_TRANSFORMS" : 23,  "Constraint_type_LIMIT_DISTANCE" : 14,  "Constraint_type_LIMIT_LOCATION" : 6,  "Constraint_type_LIMIT_ROTATION" : 5,  "Constraint_type_LIMIT_SCALE" : 7,  "Constraint_type_MAINTAIN_VOLUME" : 24,  "Constraint_type_TRANSFORM" : 19,  "Constraint_type_CLAMP_TO" : 18,  "Constraint_type_DAMPED_TRACK" : 21,  "Constraint_type_IK" : 3,  "Constraint_type_LOCKED_TRACK" : 13,  "Constraint_type_SPLINE_IK" : 22,  "Constraint_type_STRETCH_TO" : 15,  "Constraint_type_TRACK_TO" : 2,  "Constraint_type_ACTION" : 12,  "Constraint_type_CHILD_OF" : 1,  "Constraint_type_FLOOR" : 16,  "Constraint_type_FOLLOW_PATH" : 4,  "Constraint_type_PIVOT" : 25,  "Constraint_type_RIGID_BODY_JOINT" : 17,  "Constraint_type_SCRIPT" : 11,  "Constraint_type_SHRINKWRAP" : 20, 
 "ConstraintActuator_mode_LOC" : 0,  "ConstraintActuator_mode_DIST" : 1,  "ConstraintActuator_mode_ORI" : 2,  "ConstraintActuator_mode_FH" : 3, 
 "ConstraintActuator_direction_NONE" : 0,  "ConstraintActuator_direction_DIRPX" : 1,  "ConstraintActuator_direction_DIRPY" : 2,  "ConstraintActuator_direction_DIRPZ" : 4,  "ConstraintActuator_direction_DIRNX" : 8,  "ConstraintActuator_direction_DIRNY" : 16,  "ConstraintActuator_direction_DIRNZ" : 32, 
 "ConstraintActuator_direction_axis_NONE" : 0,  "ConstraintActuator_direction_axis_DIRPX" : 1,  "ConstraintActuator_direction_axis_DIRPY" : 2,  "ConstraintActuator_direction_axis_DIRPZ" : 4,  "ConstraintActuator_direction_axis_DIRNX" : 8,  "ConstraintActuator_direction_axis_DIRNY" : 16,  "ConstraintActuator_direction_axis_DIRNZ" : 32, 
 "ConstraintActuator_direction_axis_pos_NONE" : 0,  "ConstraintActuator_direction_axis_pos_DIRPX" : 1,  "ConstraintActuator_direction_axis_pos_DIRPY" : 2,  "ConstraintActuator_direction_axis_pos_DIRPZ" : 4, 
 "ConstraintActuator_limit_NONE" : 0,  "ConstraintActuator_limit_LOCX" : 1,  "ConstraintActuator_limit_LOCY" : 2,  "ConstraintActuator_limit_LOCZ" : 4, 
 "Context_mode_EDIT_MESH" : 0,  "Context_mode_EDIT_CURVE" : 1,  "Context_mode_EDIT_SURFACE" : 2,  "Context_mode_EDIT_TEXT" : 3,  "Context_mode_EDIT_ARMATURE" : 4,  "Context_mode_EDIT_METABALL" : 5,  "Context_mode_EDIT_LATTICE" : 6,  "Context_mode_POSE" : 7,  "Context_mode_SCULPT" : 8,  "Context_mode_PAINT_WEIGHT" : 9,  "Context_mode_PAINT_VERTEX" : 10,  "Context_mode_PAINT_TEXTURE" : 11,  "Context_mode_PARTICLE" : 12,  "Context_mode_OBJECT" : 13, 
 "Controller_type_LOGIC_AND" : 0,  "Controller_type_LOGIC_OR" : 1,  "Controller_type_LOGIC_NAND" : 4,  "Controller_type_LOGIC_NOR" : 5,  "Controller_type_LOGIC_XOR" : 6,  "Controller_type_LOGIC_XNOR" : 7,  "Controller_type_EXPRESSION" : 2,  "Controller_type_PYTHON" : 3, 
 "Curve_dimensions_2D" : 0,  "Curve_dimensions_3D" : 1, 
 "Curve_twist_mode_Z_UP" : 0,  "Curve_twist_mode_MINIMUM" : 3,  "Curve_twist_mode_TANGENT" : 4, 
 "CurveMap_extend_HORIZONTAL" : 0,  "CurveMap_extend_EXTRAPOLATED" : 1, 
 "CurveMapPoint_handle_type_AUTO" : 0,  "CurveMapPoint_handle_type_VECTOR" : 2, 
 "CurveModifier_deform_axis_POS_X" : 1,  "CurveModifier_deform_axis_POS_Y" : 2,  "CurveModifier_deform_axis_POS_Z" : 3,  "CurveModifier_deform_axis_NEG_X" : 4,  "CurveModifier_deform_axis_NEG_Y" : 5,  "CurveModifier_deform_axis_NEG_Z" : 6, 
 "DampedTrackConstraint_track_axis_TRACK_X" : 0,  "DampedTrackConstraint_track_axis_TRACK_Y" : 1,  "DampedTrackConstraint_track_axis_TRACK_Z" : 2,  "DampedTrackConstraint_track_axis_TRACK_NEGATIVE_X" : 3,  "DampedTrackConstraint_track_axis_TRACK_NEGATIVE_Y" : 4,  "DampedTrackConstraint_track_axis_TRACK_NEGATIVE_Z" : 5, 
 "DisplaceModifier_direction_X" : 0,  "DisplaceModifier_direction_Y" : 1,  "DisplaceModifier_direction_Z" : 2,  "DisplaceModifier_direction_NORMAL" : 3,  "DisplaceModifier_direction_RGB_TO_XYZ" : 4, 
 "DisplaceModifier_texture_coords_LOCAL" : 0,  "DisplaceModifier_texture_coords_GLOBAL" : 1,  "DisplaceModifier_texture_coords_OBJECT" : 2,  "DisplaceModifier_texture_coords_UV" : 3, 
 "DistortedNoiseTexture_noise_basis_BLENDER_ORIGINAL" : 0,  "DistortedNoiseTexture_noise_basis_ORIGINAL_PERLIN" : 1,  "DistortedNoiseTexture_noise_basis_IMPROVED_PERLIN" : 2,  "DistortedNoiseTexture_noise_basis_VORONOI_F1" : 3,  "DistortedNoiseTexture_noise_basis_VORONOI_F2" : 4,  "DistortedNoiseTexture_noise_basis_VORONOI_F3" : 5,  "DistortedNoiseTexture_noise_basis_VORONOI_F4" : 6,  "DistortedNoiseTexture_noise_basis_VORONOI_F2_F1" : 7,  "DistortedNoiseTexture_noise_basis_VORONOI_CRACKLE" : 8,  "DistortedNoiseTexture_noise_basis_CELL_NOISE" : 14, 
 "DistortedNoiseTexture_noise_distortion_BLENDER_ORIGINAL" : 0,  "DistortedNoiseTexture_noise_distortion_ORIGINAL_PERLIN" : 1,  "DistortedNoiseTexture_noise_distortion_IMPROVED_PERLIN" : 2,  "DistortedNoiseTexture_noise_distortion_VORONOI_F1" : 3,  "DistortedNoiseTexture_noise_distortion_VORONOI_F2" : 4,  "DistortedNoiseTexture_noise_distortion_VORONOI_F3" : 5,  "DistortedNoiseTexture_noise_distortion_VORONOI_F4" : 6,  "DistortedNoiseTexture_noise_distortion_VORONOI_F2_F1" : 7,  "DistortedNoiseTexture_noise_distortion_VORONOI_CRACKLE" : 8,  "DistortedNoiseTexture_noise_distortion_CELL_NOISE" : 14, 
 "DomainFluidSettings_render_display_mode_GEOMETRY" : 1,  "DomainFluidSettings_render_display_mode_PREVIEW" : 2,  "DomainFluidSettings_render_display_mode_FINAL" : 3, 
 "DomainFluidSettings_slip_type_NOSLIP" : 512,  "DomainFluidSettings_slip_type_PARTIALSLIP" : 1024,  "DomainFluidSettings_slip_type_FREESLIP" : 2048, 
 "DomainFluidSettings_viewport_display_mode_GEOMETRY" : 1,  "DomainFluidSettings_viewport_display_mode_PREVIEW" : 2,  "DomainFluidSettings_viewport_display_mode_FINAL" : 3, 
 "DomainFluidSettings_viscosity_preset_MANUAL" : 1,  "DomainFluidSettings_viscosity_preset_WATER" : 2,  "DomainFluidSettings_viscosity_preset_OIL" : 3,  "DomainFluidSettings_viscosity_preset_HONEY" : 4, 
 "Driver_type_AVERAGE" : 0,  "Driver_type_SUM" : 2,  "Driver_type_SCRIPTED" : 1,  "Driver_type_MIN" : 3,  "Driver_type_MAX" : 4, 
 "DriverTarget_id_type_ACTION" : 17217,  "DriverTarget_id_type_ARMATURE" : 21057,  "DriverTarget_id_type_BRUSH" : 21058,  "DriverTarget_id_type_CAMERA" : 16707,  "DriverTarget_id_type_CURVE" : 21827,  "DriverTarget_id_type_FONT" : 18006,  "DriverTarget_id_type_GREASEPENCIL" : 17479,  "DriverTarget_id_type_GROUP" : 21063,  "DriverTarget_id_type_IMAGE" : 19785,  "DriverTarget_id_type_KEY" : 17739,  "DriverTarget_id_type_LAMP" : 16716,  "DriverTarget_id_type_LIBRARY" : 18764,  "DriverTarget_id_type_LATTICE" : 21580,  "DriverTarget_id_type_MATERIAL" : 16717,  "DriverTarget_id_type_META" : 16973,  "DriverTarget_id_type_MESH" : 17741,  "DriverTarget_id_type_NODETREE" : 21582,  "DriverTarget_id_type_OBJECT" : 16975,  "DriverTarget_id_type_PARTICLE" : 16720,  "DriverTarget_id_type_SCENE" : 17235,  "DriverTarget_id_type_SCREEN" : 21075,  "DriverTarget_id_type_SPEAKER" : 19283,  "DriverTarget_id_type_SOUND" : 20307,  "DriverTarget_id_type_TEXT" : 22612,  "DriverTarget_id_type_TEXTURE" : 17748,  "DriverTarget_id_type_WORLD" : 20311,  "DriverTarget_id_type_WINDOWMANAGER" : 19799, 
 "DriverTarget_transform_space_WORLD_SPACE" : 0,  "DriverTarget_transform_space_TRANSFORM_SPACE" : 4,  "DriverTarget_transform_space_LOCAL_SPACE" : 12, 
 "DriverTarget_transform_type_LOC_X" : 0,  "DriverTarget_transform_type_LOC_Y" : 1,  "DriverTarget_transform_type_LOC_Z" : 2,  "DriverTarget_transform_type_ROT_X" : 3,  "DriverTarget_transform_type_ROT_Y" : 4,  "DriverTarget_transform_type_ROT_Z" : 5,  "DriverTarget_transform_type_SCALE_X" : 6,  "DriverTarget_transform_type_SCALE_Y" : 7,  "DriverTarget_transform_type_SCALE_Z" : 8, 
 "DriverVariable_type_SINGLE_PROP" : 0,  "DriverVariable_type_TRANSFORMS" : 3,  "DriverVariable_type_ROTATION_DIFF" : 1,  "DriverVariable_type_LOC_DIFF" : 2, 
 "EditObjectActuator_dynamic_operation_RESTOREDYN" : 0,  "EditObjectActuator_dynamic_operation_SUSPENDDYN" : 1,  "EditObjectActuator_dynamic_operation_ENABLERIGIDBODY" : 2,  "EditObjectActuator_dynamic_operation_DISABLERIGIDBODY" : 3,  "EditObjectActuator_dynamic_operation_SETMASS" : 4, 
 "EditObjectActuator_mode_ADDOBJECT" : 0,  "EditObjectActuator_mode_ENDOBJECT" : 1,  "EditObjectActuator_mode_REPLACEMESH" : 2,  "EditObjectActuator_mode_TRACKTO" : 3,  "EditObjectActuator_mode_DYNAMICS" : 4, 
 "EnumProperty_default_DUMMY" : 0, 
 "EnumProperty_default_flag_DUMMY" : 0, 
 "EnvironmentMap_mapping_CUBE" : 0,  "EnvironmentMap_mapping_PLANE" : 1, 
 "EnvironmentMap_source_STATIC" : 0,  "EnvironmentMap_source_ANIMATED" : 1,  "EnvironmentMap_source_IMAGE_FILE" : 2, 
 "EnvironmentMapTexture_filter_type_BOX" : 0,  "EnvironmentMapTexture_filter_type_EWA" : 1,  "EnvironmentMapTexture_filter_type_FELINE" : 2,  "EnvironmentMapTexture_filter_type_AREA" : 3, 
 "Event_type_NONE" : 0,  "Event_type_LEFTMOUSE" : 1,  "Event_type_MIDDLEMOUSE" : 2,  "Event_type_RIGHTMOUSE" : 3,  "Event_type_BUTTON4MOUSE" : 7,  "Event_type_BUTTON5MOUSE" : 8,  "Event_type_ACTIONMOUSE" : 5,  "Event_type_SELECTMOUSE" : 6,  "Event_type_MOUSEMOVE" : 4,  "Event_type_INBETWEEN_MOUSEMOVE" : 17,  "Event_type_TRACKPADPAN" : 14,  "Event_type_TRACKPADZOOM" : 15,  "Event_type_MOUSEROTATE" : 16,  "Event_type_WHEELUPMOUSE" : 10,  "Event_type_WHEELDOWNMOUSE" : 11,  "Event_type_WHEELINMOUSE" : 12,  "Event_type_WHEELOUTMOUSE" : 13,  "Event_type_EVT_TWEAK_L" : 20482,  "Event_type_EVT_TWEAK_M" : 20483,  "Event_type_EVT_TWEAK_R" : 20484,  "Event_type_EVT_TWEAK_A" : 20485,  "Event_type_EVT_TWEAK_S" : 20486,  "Event_type_A" : 97,  "Event_type_B" : 98,  "Event_type_C" : 99,  "Event_type_D" : 100,  "Event_type_E" : 101,  "Event_type_F" : 102,  "Event_type_G" : 103,  "Event_type_H" : 104,  "Event_type_I" : 105,  "Event_type_J" : 106,  "Event_type_K" : 107,  "Event_type_L" : 108,  "Event_type_M" : 109,  "Event_type_N" : 110,  "Event_type_O" : 111,  "Event_type_P" : 112,  "Event_type_Q" : 113,  "Event_type_R" : 114,  "Event_type_S" : 115,  "Event_type_T" : 116,  "Event_type_U" : 117,  "Event_type_V" : 118,  "Event_type_W" : 119,  "Event_type_X" : 120,  "Event_type_Y" : 121,  "Event_type_Z" : 122,  "Event_type_ZERO" : 48,  "Event_type_ONE" : 49,  "Event_type_TWO" : 50,  "Event_type_THREE" : 51,  "Event_type_FOUR" : 52,  "Event_type_FIVE" : 53,  "Event_type_SIX" : 54,  "Event_type_SEVEN" : 55,  "Event_type_EIGHT" : 56,  "Event_type_NINE" : 57,  "Event_type_LEFT_CTRL" : 212,  "Event_type_LEFT_ALT" : 213,  "Event_type_LEFT_SHIFT" : 217,  "Event_type_RIGHT_ALT" : 214,  "Event_type_RIGHT_CTRL" : 215,  "Event_type_RIGHT_SHIFT" : 216,  "Event_type_OSKEY" : 172,  "Event_type_GRLESS" : 173,  "Event_type_ESC" : 218,  "Event_type_TAB" : 219,  "Event_type_RET" : 220,  "Event_type_SPACE" : 221,  "Event_type_LINE_FEED" : 222,  "Event_type_BACK_SPACE" : 223,  "Event_type_DEL" : 224,  "Event_type_SEMI_COLON" : 225,  "Event_type_PERIOD" : 226,  "Event_type_COMMA" : 227,  "Event_type_QUOTE" : 228,  "Event_type_ACCENT_GRAVE" : 229,  "Event_type_MINUS" : 230,  "Event_type_SLASH" : 232,  "Event_type_BACK_SLASH" : 233,  "Event_type_EQUAL" : 234,  "Event_type_LEFT_BRACKET" : 235,  "Event_type_RIGHT_BRACKET" : 236,  "Event_type_LEFT_ARROW" : 137,  "Event_type_DOWN_ARROW" : 138,  "Event_type_RIGHT_ARROW" : 139,  "Event_type_UP_ARROW" : 140,  "Event_type_NUMPAD_2" : 152,  "Event_type_NUMPAD_4" : 154,  "Event_type_NUMPAD_6" : 156,  "Event_type_NUMPAD_8" : 158,  "Event_type_NUMPAD_1" : 151,  "Event_type_NUMPAD_3" : 153,  "Event_type_NUMPAD_5" : 155,  "Event_type_NUMPAD_7" : 157,  "Event_type_NUMPAD_9" : 159,  "Event_type_NUMPAD_PERIOD" : 199,  "Event_type_NUMPAD_SLASH" : 161,  "Event_type_NUMPAD_ASTERIX" : 160,  "Event_type_NUMPAD_0" : 150,  "Event_type_NUMPAD_MINUS" : 162,  "Event_type_NUMPAD_ENTER" : 163,  "Event_type_NUMPAD_PLUS" : 164,  "Event_type_F1" : 300,  "Event_type_F2" : 301,  "Event_type_F3" : 302,  "Event_type_F4" : 303,  "Event_type_F5" : 304,  "Event_type_F6" : 305,  "Event_type_F7" : 306,  "Event_type_F8" : 307,  "Event_type_F9" : 308,  "Event_type_F10" : 309,  "Event_type_F11" : 310,  "Event_type_F12" : 311,  "Event_type_F13" : 312,  "Event_type_F14" : 313,  "Event_type_F15" : 314,  "Event_type_F16" : 315,  "Event_type_F17" : 316,  "Event_type_F18" : 317,  "Event_type_F19" : 318,  "Event_type_PAUSE" : 165,  "Event_type_INSERT" : 166,  "Event_type_HOME" : 167,  "Event_type_PAGE_UP" : 168,  "Event_type_PAGE_DOWN" : 169,  "Event_type_END" : 170,  "Event_type_MEDIA_PLAY" : 174,  "Event_type_MEDIA_STOP" : 175,  "Event_type_MEDIA_FIRST" : 176,  "Event_type_MEDIA_LAST" : 177,  "Event_type_WINDOW_DEACTIVATE" : 260,  "Event_type_TIMER" : 272,  "Event_type_TIMER0" : 273,  "Event_type_TIMER1" : 274,  "Event_type_TIMER2" : 275,  "Event_type_NDOF_BUTTON_MENU" : 401,  "Event_type_NDOF_BUTTON_FIT" : 402,  "Event_type_NDOF_BUTTON_TOP" : 403,  "Event_type_NDOF_BUTTON_BOTTOM" : 404,  "Event_type_NDOF_BUTTON_LEFT" : 405,  "Event_type_NDOF_BUTTON_RIGHT" : 406,  "Event_type_NDOF_BUTTON_FRONT" : 407,  "Event_type_NDOF_BUTTON_BACK" : 408,  "Event_type_NDOF_BUTTON_ISO1" : 409,  "Event_type_NDOF_BUTTON_ISO2" : 410,  "Event_type_NDOF_BUTTON_ROLL_CW" : 411,  "Event_type_NDOF_BUTTON_ROLL_CCW" : 412,  "Event_type_NDOF_BUTTON_SPIN_CW" : 413,  "Event_type_NDOF_BUTTON_SPIN_CCW" : 414,  "Event_type_NDOF_BUTTON_TILT_CW" : 415,  "Event_type_NDOF_BUTTON_TILT_CCW" : 416,  "Event_type_NDOF_BUTTON_ROTATE" : 417,  "Event_type_NDOF_BUTTON_PANZOOM" : 418,  "Event_type_NDOF_BUTTON_DOMINANT" : 419,  "Event_type_NDOF_BUTTON_PLUS" : 420,  "Event_type_NDOF_BUTTON_MINUS" : 421,  "Event_type_NDOF_BUTTON_1" : 422,  "Event_type_NDOF_BUTTON_2" : 423,  "Event_type_NDOF_BUTTON_3" : 424,  "Event_type_NDOF_BUTTON_4" : 425,  "Event_type_NDOF_BUTTON_5" : 426,  "Event_type_NDOF_BUTTON_6" : 427,  "Event_type_NDOF_BUTTON_7" : 428,  "Event_type_NDOF_BUTTON_8" : 429,  "Event_type_NDOF_BUTTON_9" : 430,  "Event_type_NDOF_BUTTON_10" : 431, 
 "Event_value_ANY" : -1,  "Event_value_NOTHING" : 0,  "Event_value_PRESS" : 1,  "Event_value_RELEASE" : 2,  "Event_value_CLICK" : 3,  "Event_value_DOUBLE_CLICK" : 4, 
 "FCurve_color_mode_AUTO_RAINBOW" : 0,  "FCurve_color_mode_AUTO_RGB" : 1,  "FCurve_color_mode_CUSTOM" : 2, 
 "FCurve_extrapolation_CONSTANT" : 0,  "FCurve_extrapolation_LINEAR" : 1, 
 "FModifier_type_NULL" : 0,  "FModifier_type_GENERATOR" : 1,  "FModifier_type_FNGENERATOR" : 2,  "FModifier_type_ENVELOPE" : 3,  "FModifier_type_CYCLES" : 4,  "FModifier_type_NOISE" : 5,  "FModifier_type_FILTER" : 6,  "FModifier_type_LIMITS" : 8,  "FModifier_type_STEPPED" : 9, 
 "FModifierCycles_mode_after_NONE" : 0,  "FModifierCycles_mode_after_REPEAT" : 1,  "FModifierCycles_mode_after_REPEAT_OFFSET" : 2,  "FModifierCycles_mode_after_MIRROR" : 3, 
 "FModifierCycles_mode_before_NONE" : 0,  "FModifierCycles_mode_before_REPEAT" : 1,  "FModifierCycles_mode_before_REPEAT_OFFSET" : 2,  "FModifierCycles_mode_before_MIRROR" : 3, 
 "FModifierFunctionGenerator_function_type_SIN" : 0,  "FModifierFunctionGenerator_function_type_COS" : 1,  "FModifierFunctionGenerator_function_type_TAN" : 2,  "FModifierFunctionGenerator_function_type_SQRT" : 3,  "FModifierFunctionGenerator_function_type_LN" : 4,  "FModifierFunctionGenerator_function_type_SINC" : 5, 
 "FModifierGenerator_mode_POLYNOMIAL" : 0,  "FModifierGenerator_mode_POLYNOMIAL_FACTORISED" : 1, 
 "FModifierNoise_blend_type_REPLACE" : 0,  "FModifierNoise_blend_type_ADD" : 1,  "FModifierNoise_blend_type_SUBTRACT" : 2,  "FModifierNoise_blend_type_MULTIPLY" : 3, 
 "FieldSettings_guide_kink_axis_X" : 0,  "FieldSettings_guide_kink_axis_Y" : 1,  "FieldSettings_guide_kink_axis_Z" : 2, 
 "FieldSettings_falloff_type_SPHERE" : 0,  "FieldSettings_falloff_type_TUBE" : 1,  "FieldSettings_falloff_type_CONE" : 2, 
 "FieldSettings_guide_kink_type_NONE" : 0,  "FieldSettings_guide_kink_type_CURL" : 1,  "FieldSettings_guide_kink_type_RADIAL" : 2,  "FieldSettings_guide_kink_type_WAVE" : 3,  "FieldSettings_guide_kink_type_BRAID" : 4,  "FieldSettings_guide_kink_type_ROTATION" : 5,  "FieldSettings_guide_kink_type_ROLL" : 6, 
 "FieldSettings_shape_POINT" : 0,  "FieldSettings_shape_PLANE" : 1,  "FieldSettings_shape_SURFACE" : 2,  "FieldSettings_shape_POINTS" : 3, 
 "FieldSettings_texture_mode_RGB" : 0,  "FieldSettings_texture_mode_GRADIENT" : 1,  "FieldSettings_texture_mode_CURL" : 2, 
 "FieldSettings_type_NONE" : 0,  "FieldSettings_type_FORCE" : 1,  "FieldSettings_type_WIND" : 4,  "FieldSettings_type_VORTEX" : 2,  "FieldSettings_type_MAGNET" : 3,  "FieldSettings_type_HARMONIC" : 7,  "FieldSettings_type_CHARGE" : 8,  "FieldSettings_type_LENNARDJ" : 9,  "FieldSettings_type_TEXTURE" : 6,  "FieldSettings_type_GUIDE" : 5,  "FieldSettings_type_BOID" : 10,  "FieldSettings_type_TURBULENCE" : 11,  "FieldSettings_type_DRAG" : 12, 
 "FieldSettings_z_direction_BOTH" : 0,  "FieldSettings_z_direction_POSITIVE" : 1,  "FieldSettings_z_direction_NEGATIVE" : 2, 
 "FileSelectParams_display_type_FILE_SHORTDISPLAY" : 1,  "FileSelectParams_display_type_FILE_LONGDISPLAY" : 2,  "FileSelectParams_display_type_FILE_IMGDISPLAY" : 3, 
 "FileSelectParams_sort_method_FILE_SORT_ALPHA" : 1,  "FileSelectParams_sort_method_FILE_SORT_EXTENSION" : 2,  "FileSelectParams_sort_method_FILE_SORT_TIME" : 3,  "FileSelectParams_sort_method_FILE_SORT_SIZE" : 4, 
 "Filter2DActuator_mode_ENABLE" : -2,  "Filter2DActuator_mode_DISABLE" : -1,  "Filter2DActuator_mode_REMOVE" : 0,  "Filter2DActuator_mode_MOTIONBLUR" : 1,  "Filter2DActuator_mode_BLUR" : 2,  "Filter2DActuator_mode_SHARPEN" : 3,  "Filter2DActuator_mode_DILATION" : 4,  "Filter2DActuator_mode_EROSION" : 5,  "Filter2DActuator_mode_LAPLACIAN" : 6,  "Filter2DActuator_mode_SOBEL" : 7,  "Filter2DActuator_mode_PREWITT" : 8,  "Filter2DActuator_mode_GRAYSCALE" : 9,  "Filter2DActuator_mode_SEPIA" : 10,  "Filter2DActuator_mode_INVERT" : 11,  "Filter2DActuator_mode_CUSTOMFILTER" : 12, 
 "FloorConstraint_floor_location_FLOOR_X" : 0,  "FloorConstraint_floor_location_FLOOR_Y" : 1,  "FloorConstraint_floor_location_FLOOR_Z" : 2,  "FloorConstraint_floor_location_FLOOR_NEGATIVE_X" : 3,  "FloorConstraint_floor_location_FLOOR_NEGATIVE_Y" : 4,  "FloorConstraint_floor_location_FLOOR_NEGATIVE_Z" : 5, 
 "FluidFluidSettings_volume_initialization_VOLUME" : 1,  "FluidFluidSettings_volume_initialization_SHELL" : 2,  "FluidFluidSettings_volume_initialization_BOTH" : 3, 
 "FluidSettings_type_NONE" : 1,  "FluidSettings_type_DOMAIN" : 2,  "FluidSettings_type_FLUID" : 4,  "FluidSettings_type_OBSTACLE" : 8,  "FluidSettings_type_INFLOW" : 16,  "FluidSettings_type_OUTFLOW" : 32,  "FluidSettings_type_PARTICLE" : 64,  "FluidSettings_type_CONTROL" : 128, 
 "FollowPathConstraint_forward_axis_FORWARD_X" : 0,  "FollowPathConstraint_forward_axis_FORWARD_Y" : 1,  "FollowPathConstraint_forward_axis_FORWARD_Z" : 2,  "FollowPathConstraint_forward_axis_TRACK_NEGATIVE_X" : 3,  "FollowPathConstraint_forward_axis_TRACK_NEGATIVE_Y" : 4,  "FollowPathConstraint_forward_axis_TRACK_NEGATIVE_Z" : 5, 
 "FollowPathConstraint_up_axis_UP_X" : 0,  "FollowPathConstraint_up_axis_UP_Y" : 1,  "FollowPathConstraint_up_axis_UP_Z" : 2, 
 "GameActuator_mode_START" : 0,  "GameActuator_mode_RESTART" : 2,  "GameActuator_mode_QUIT" : 3,  "GameActuator_mode_SAVECFG" : 4,  "GameActuator_mode_LOADCFG" : 5, 
 "GameObjectSettings_collision_bounds_type_BOX" : 0,  "GameObjectSettings_collision_bounds_type_SPHERE" : 1,  "GameObjectSettings_collision_bounds_type_CYLINDER" : 2,  "GameObjectSettings_collision_bounds_type_CONE" : 3,  "GameObjectSettings_collision_bounds_type_CONVEX_HULL" : 5,  "GameObjectSettings_collision_bounds_type_TRIANGLE_MESH" : 4,  "GameObjectSettings_collision_bounds_type_CAPSULE" : 7, 
 "GameObjectSettings_physics_type_NO_COLLISION" : 0,  "GameObjectSettings_physics_type_STATIC" : 1,  "GameObjectSettings_physics_type_DYNAMIC" : 2,  "GameObjectSettings_physics_type_RIGID_BODY" : 3,  "GameObjectSettings_physics_type_SOFT_BODY" : 4,  "GameObjectSettings_physics_type_OCCLUDE" : 5,  "GameObjectSettings_physics_type_SENSOR" : 6, 
 "GameProperty_type_BOOL" : 0,  "GameProperty_type_INT" : 1,  "GameProperty_type_FLOAT" : 2,  "GameProperty_type_STRING" : 3,  "GameProperty_type_TIMER" : 5, 
 "GreasePencil_draw_mode_CURSOR" : 16,  "GreasePencil_draw_mode_VIEW" : 0,  "GreasePencil_draw_mode_SURFACE" : 48,  "GreasePencil_draw_mode_STROKE" : 80, 
 "Header_bl_space_type_EMPTY" : 0,  "Header_bl_space_type_VIEW_3D" : 1,  "Header_bl_space_type_GRAPH_EDITOR" : 2,  "Header_bl_space_type_OUTLINER" : 3,  "Header_bl_space_type_PROPERTIES" : 4,  "Header_bl_space_type_FILE_BROWSER" : 5,  "Header_bl_space_type_IMAGE_EDITOR" : 6,  "Header_bl_space_type_INFO" : 7,  "Header_bl_space_type_SEQUENCE_EDITOR" : 8,  "Header_bl_space_type_TEXT_EDITOR" : 9,  "Header_bl_space_type_AUDIO_WINDOW" : 11,  "Header_bl_space_type_DOPESHEET_EDITOR" : 12,  "Header_bl_space_type_NLA_EDITOR" : 13,  "Header_bl_space_type_SCRIPTS_WINDOW" : 14,  "Header_bl_space_type_TIMELINE" : 15,  "Header_bl_space_type_NODE_EDITOR" : 16,  "Header_bl_space_type_LOGIC_EDITOR" : 17,  "Header_bl_space_type_CONSOLE" : 18,  "Header_bl_space_type_USER_PREFERENCES" : 19, 
 "Histogram_mode_LUMA" : 0,  "Histogram_mode_RGB" : 1,  "Histogram_mode_R" : 2,  "Histogram_mode_G" : 3,  "Histogram_mode_B" : 4, 
 "IKParam_ik_solver_LEGACY" : 0,  "IKParam_ik_solver_ITASC" : 1, 
 "Image_field_order_EVEN" : 0,  "Image_field_order_ODD" : 2, 
 "Image_file_format_BMP" : 20,  "Image_file_format_DDS" : 29,  "Image_file_format_IRIS" : 1,  "Image_file_format_PNG" : 17,  "Image_file_format_JPEG" : 4,  "Image_file_format_JPEG2000" : 30,  "Image_file_format_TARGA" : 0,  "Image_file_format_TARGA_RAW" : 14,  "Image_file_format_CINEON" : 26,  "Image_file_format_DPX" : 27,  "Image_file_format_MULTILAYER" : 28,  "Image_file_format_OPEN_EXR" : 23,  "Image_file_format_HDR" : 21,  "Image_file_format_TIFF" : 22,  "Image_file_format_AVI_JPEG" : 16,  "Image_file_format_AVI_RAW" : 15,  "Image_file_format_FRAMESERVER" : 25, 
 "Image_generated_type_BLANK" : 0,  "Image_generated_type_UV_GRID" : 1,  "Image_generated_type_COLOR_GRID" : 2, 
 "Image_mapping_UV" : 0,  "Image_mapping_REFLECTION" : 16, 
 "Image_source_FILE" : 1,  "Image_source_SEQUENCE" : 2,  "Image_source_MOVIE" : 3,  "Image_source_GENERATED" : 4,  "Image_source_VIEWER" : 5, 
 "Image_type_IMAGE" : 0,  "Image_type_MULTILAYER" : 1,  "Image_type_UV_TEST" : 2,  "Image_type_RENDER_RESULT" : 4,  "Image_type_COMPOSITING" : 5, 
 "ImageTexture_extension_EXTEND" : 1,  "ImageTexture_extension_CLIP" : 2,  "ImageTexture_extension_CLIP_CUBE" : 4,  "ImageTexture_extension_REPEAT" : 3,  "ImageTexture_extension_CHECKER" : 5, 
 "ImageTexture_filter_type_BOX" : 0,  "ImageTexture_filter_type_EWA" : 1,  "ImageTexture_filter_type_FELINE" : 2,  "ImageTexture_filter_type_AREA" : 3, 
 "InflowFluidSettings_volume_initialization_VOLUME" : 1,  "InflowFluidSettings_volume_initialization_SHELL" : 2,  "InflowFluidSettings_volume_initialization_BOTH" : 3, 
 "Itasc_mode_ANIMATION" : 0,  "Itasc_mode_SIMULATION" : 8, 
 "Itasc_reiteration_method_NEVER" : 0,  "Itasc_reiteration_method_INITIAL" : 2,  "Itasc_reiteration_method_ALWAYS" : 6, 
 "Itasc_solver_SDLS" : 0,  "Itasc_solver_DLS" : 1, 
 "JoystickSensor_axis_direction_RIGHTAXIS" : 0,  "JoystickSensor_axis_direction_UPAXIS" : 1,  "JoystickSensor_axis_direction_LEFTAXIS" : 2,  "JoystickSensor_axis_direction_DOWNAXIS" : 3, 
 "JoystickSensor_event_type_BUTTON" : 0,  "JoystickSensor_event_type_AXIS" : 1,  "JoystickSensor_event_type_HAT" : 2,  "JoystickSensor_event_type_AXIS_SINGLE" : 3, 
 "JoystickSensor_hat_direction_UP" : 1,  "JoystickSensor_hat_direction_DOWN" : 4,  "JoystickSensor_hat_direction_LEFT" : 8,  "JoystickSensor_hat_direction_RIGHT" : 2,  "JoystickSensor_hat_direction_UPRIGHT" : 3,  "JoystickSensor_hat_direction_DOWNLEFT" : 12,  "JoystickSensor_hat_direction_UPLEFT" : 9,  "JoystickSensor_hat_direction_DOWNRIGHT" : 6, 
 "KeyMap_region_type_WINDOW" : 0,  "KeyMap_region_type_HEADER" : 1,  "KeyMap_region_type_CHANNELS" : 2,  "KeyMap_region_type_TEMPORARY" : 3,  "KeyMap_region_type_UI" : 4,  "KeyMap_region_type_TOOLS" : 5,  "KeyMap_region_type_TOOL_PROPS" : 6,  "KeyMap_region_type_PREVIEW" : 7, 
 "KeyMap_space_type_EMPTY" : 0,  "KeyMap_space_type_VIEW_3D" : 1,  "KeyMap_space_type_GRAPH_EDITOR" : 2,  "KeyMap_space_type_OUTLINER" : 3,  "KeyMap_space_type_PROPERTIES" : 4,  "KeyMap_space_type_FILE_BROWSER" : 5,  "KeyMap_space_type_IMAGE_EDITOR" : 6,  "KeyMap_space_type_INFO" : 7,  "KeyMap_space_type_SEQUENCE_EDITOR" : 8,  "KeyMap_space_type_TEXT_EDITOR" : 9,  "KeyMap_space_type_AUDIO_WINDOW" : 11,  "KeyMap_space_type_DOPESHEET_EDITOR" : 12,  "KeyMap_space_type_NLA_EDITOR" : 13,  "KeyMap_space_type_SCRIPTS_WINDOW" : 14,  "KeyMap_space_type_TIMELINE" : 15,  "KeyMap_space_type_NODE_EDITOR" : 16,  "KeyMap_space_type_LOGIC_EDITOR" : 17,  "KeyMap_space_type_CONSOLE" : 18,  "KeyMap_space_type_USER_PREFERENCES" : 19, 
 "KeyMapItem_key_modifier_NONE" : 0,  "KeyMapItem_key_modifier_LEFTMOUSE" : 1,  "KeyMapItem_key_modifier_MIDDLEMOUSE" : 2,  "KeyMapItem_key_modifier_RIGHTMOUSE" : 3,  "KeyMapItem_key_modifier_BUTTON4MOUSE" : 7,  "KeyMapItem_key_modifier_BUTTON5MOUSE" : 8,  "KeyMapItem_key_modifier_ACTIONMOUSE" : 5,  "KeyMapItem_key_modifier_SELECTMOUSE" : 6,  "KeyMapItem_key_modifier_MOUSEMOVE" : 4,  "KeyMapItem_key_modifier_INBETWEEN_MOUSEMOVE" : 17,  "KeyMapItem_key_modifier_TRACKPADPAN" : 14,  "KeyMapItem_key_modifier_TRACKPADZOOM" : 15,  "KeyMapItem_key_modifier_MOUSEROTATE" : 16,  "KeyMapItem_key_modifier_WHEELUPMOUSE" : 10,  "KeyMapItem_key_modifier_WHEELDOWNMOUSE" : 11,  "KeyMapItem_key_modifier_WHEELINMOUSE" : 12,  "KeyMapItem_key_modifier_WHEELOUTMOUSE" : 13,  "KeyMapItem_key_modifier_EVT_TWEAK_L" : 20482,  "KeyMapItem_key_modifier_EVT_TWEAK_M" : 20483,  "KeyMapItem_key_modifier_EVT_TWEAK_R" : 20484,  "KeyMapItem_key_modifier_EVT_TWEAK_A" : 20485,  "KeyMapItem_key_modifier_EVT_TWEAK_S" : 20486,  "KeyMapItem_key_modifier_A" : 97,  "KeyMapItem_key_modifier_B" : 98,  "KeyMapItem_key_modifier_C" : 99,  "KeyMapItem_key_modifier_D" : 100,  "KeyMapItem_key_modifier_E" : 101,  "KeyMapItem_key_modifier_F" : 102,  "KeyMapItem_key_modifier_G" : 103,  "KeyMapItem_key_modifier_H" : 104,  "KeyMapItem_key_modifier_I" : 105,  "KeyMapItem_key_modifier_J" : 106,  "KeyMapItem_key_modifier_K" : 107,  "KeyMapItem_key_modifier_L" : 108,  "KeyMapItem_key_modifier_M" : 109,  "KeyMapItem_key_modifier_N" : 110,  "KeyMapItem_key_modifier_O" : 111,  "KeyMapItem_key_modifier_P" : 112,  "KeyMapItem_key_modifier_Q" : 113,  "KeyMapItem_key_modifier_R" : 114,  "KeyMapItem_key_modifier_S" : 115,  "KeyMapItem_key_modifier_T" : 116,  "KeyMapItem_key_modifier_U" : 117,  "KeyMapItem_key_modifier_V" : 118,  "KeyMapItem_key_modifier_W" : 119,  "KeyMapItem_key_modifier_X" : 120,  "KeyMapItem_key_modifier_Y" : 121,  "KeyMapItem_key_modifier_Z" : 122,  "KeyMapItem_key_modifier_ZERO" : 48,  "KeyMapItem_key_modifier_ONE" : 49,  "KeyMapItem_key_modifier_TWO" : 50,  "KeyMapItem_key_modifier_THREE" : 51,  "KeyMapItem_key_modifier_FOUR" : 52,  "KeyMapItem_key_modifier_FIVE" : 53,  "KeyMapItem_key_modifier_SIX" : 54,  "KeyMapItem_key_modifier_SEVEN" : 55,  "KeyMapItem_key_modifier_EIGHT" : 56,  "KeyMapItem_key_modifier_NINE" : 57,  "KeyMapItem_key_modifier_LEFT_CTRL" : 212,  "KeyMapItem_key_modifier_LEFT_ALT" : 213,  "KeyMapItem_key_modifier_LEFT_SHIFT" : 217,  "KeyMapItem_key_modifier_RIGHT_ALT" : 214,  "KeyMapItem_key_modifier_RIGHT_CTRL" : 215,  "KeyMapItem_key_modifier_RIGHT_SHIFT" : 216,  "KeyMapItem_key_modifier_OSKEY" : 172,  "KeyMapItem_key_modifier_GRLESS" : 173,  "KeyMapItem_key_modifier_ESC" : 218,  "KeyMapItem_key_modifier_TAB" : 219,  "KeyMapItem_key_modifier_RET" : 220,  "KeyMapItem_key_modifier_SPACE" : 221,  "KeyMapItem_key_modifier_LINE_FEED" : 222,  "KeyMapItem_key_modifier_BACK_SPACE" : 223,  "KeyMapItem_key_modifier_DEL" : 224,  "KeyMapItem_key_modifier_SEMI_COLON" : 225,  "KeyMapItem_key_modifier_PERIOD" : 226,  "KeyMapItem_key_modifier_COMMA" : 227,  "KeyMapItem_key_modifier_QUOTE" : 228,  "KeyMapItem_key_modifier_ACCENT_GRAVE" : 229,  "KeyMapItem_key_modifier_MINUS" : 230,  "KeyMapItem_key_modifier_SLASH" : 232,  "KeyMapItem_key_modifier_BACK_SLASH" : 233,  "KeyMapItem_key_modifier_EQUAL" : 234,  "KeyMapItem_key_modifier_LEFT_BRACKET" : 235,  "KeyMapItem_key_modifier_RIGHT_BRACKET" : 236,  "KeyMapItem_key_modifier_LEFT_ARROW" : 137,  "KeyMapItem_key_modifier_DOWN_ARROW" : 138,  "KeyMapItem_key_modifier_RIGHT_ARROW" : 139,  "KeyMapItem_key_modifier_UP_ARROW" : 140,  "KeyMapItem_key_modifier_NUMPAD_2" : 152,  "KeyMapItem_key_modifier_NUMPAD_4" : 154,  "KeyMapItem_key_modifier_NUMPAD_6" : 156,  "KeyMapItem_key_modifier_NUMPAD_8" : 158,  "KeyMapItem_key_modifier_NUMPAD_1" : 151,  "KeyMapItem_key_modifier_NUMPAD_3" : 153,  "KeyMapItem_key_modifier_NUMPAD_5" : 155,  "KeyMapItem_key_modifier_NUMPAD_7" : 157,  "KeyMapItem_key_modifier_NUMPAD_9" : 159,  "KeyMapItem_key_modifier_NUMPAD_PERIOD" : 199,  "KeyMapItem_key_modifier_NUMPAD_SLASH" : 161,  "KeyMapItem_key_modifier_NUMPAD_ASTERIX" : 160,  "KeyMapItem_key_modifier_NUMPAD_0" : 150,  "KeyMapItem_key_modifier_NUMPAD_MINUS" : 162,  "KeyMapItem_key_modifier_NUMPAD_ENTER" : 163,  "KeyMapItem_key_modifier_NUMPAD_PLUS" : 164,  "KeyMapItem_key_modifier_F1" : 300,  "KeyMapItem_key_modifier_F2" : 301,  "KeyMapItem_key_modifier_F3" : 302,  "KeyMapItem_key_modifier_F4" : 303,  "KeyMapItem_key_modifier_F5" : 304,  "KeyMapItem_key_modifier_F6" : 305,  "KeyMapItem_key_modifier_F7" : 306,  "KeyMapItem_key_modifier_F8" : 307,  "KeyMapItem_key_modifier_F9" : 308,  "KeyMapItem_key_modifier_F10" : 309,  "KeyMapItem_key_modifier_F11" : 310,  "KeyMapItem_key_modifier_F12" : 311,  "KeyMapItem_key_modifier_F13" : 312,  "KeyMapItem_key_modifier_F14" : 313,  "KeyMapItem_key_modifier_F15" : 314,  "KeyMapItem_key_modifier_F16" : 315,  "KeyMapItem_key_modifier_F17" : 316,  "KeyMapItem_key_modifier_F18" : 317,  "KeyMapItem_key_modifier_F19" : 318,  "KeyMapItem_key_modifier_PAUSE" : 165,  "KeyMapItem_key_modifier_INSERT" : 166,  "KeyMapItem_key_modifier_HOME" : 167,  "KeyMapItem_key_modifier_PAGE_UP" : 168,  "KeyMapItem_key_modifier_PAGE_DOWN" : 169,  "KeyMapItem_key_modifier_END" : 170,  "KeyMapItem_key_modifier_MEDIA_PLAY" : 174,  "KeyMapItem_key_modifier_MEDIA_STOP" : 175,  "KeyMapItem_key_modifier_MEDIA_FIRST" : 176,  "KeyMapItem_key_modifier_MEDIA_LAST" : 177,  "KeyMapItem_key_modifier_WINDOW_DEACTIVATE" : 260,  "KeyMapItem_key_modifier_TIMER" : 272,  "KeyMapItem_key_modifier_TIMER0" : 273,  "KeyMapItem_key_modifier_TIMER1" : 274,  "KeyMapItem_key_modifier_TIMER2" : 275,  "KeyMapItem_key_modifier_NDOF_BUTTON_MENU" : 401,  "KeyMapItem_key_modifier_NDOF_BUTTON_FIT" : 402,  "KeyMapItem_key_modifier_NDOF_BUTTON_TOP" : 403,  "KeyMapItem_key_modifier_NDOF_BUTTON_BOTTOM" : 404,  "KeyMapItem_key_modifier_NDOF_BUTTON_LEFT" : 405,  "KeyMapItem_key_modifier_NDOF_BUTTON_RIGHT" : 406,  "KeyMapItem_key_modifier_NDOF_BUTTON_FRONT" : 407,  "KeyMapItem_key_modifier_NDOF_BUTTON_BACK" : 408,  "KeyMapItem_key_modifier_NDOF_BUTTON_ISO1" : 409,  "KeyMapItem_key_modifier_NDOF_BUTTON_ISO2" : 410,  "KeyMapItem_key_modifier_NDOF_BUTTON_ROLL_CW" : 411,  "KeyMapItem_key_modifier_NDOF_BUTTON_ROLL_CCW" : 412,  "KeyMapItem_key_modifier_NDOF_BUTTON_SPIN_CW" : 413,  "KeyMapItem_key_modifier_NDOF_BUTTON_SPIN_CCW" : 414,  "KeyMapItem_key_modifier_NDOF_BUTTON_TILT_CW" : 415,  "KeyMapItem_key_modifier_NDOF_BUTTON_TILT_CCW" : 416,  "KeyMapItem_key_modifier_NDOF_BUTTON_ROTATE" : 417,  "KeyMapItem_key_modifier_NDOF_BUTTON_PANZOOM" : 418,  "KeyMapItem_key_modifier_NDOF_BUTTON_DOMINANT" : 419,  "KeyMapItem_key_modifier_NDOF_BUTTON_PLUS" : 420,  "KeyMapItem_key_modifier_NDOF_BUTTON_MINUS" : 421,  "KeyMapItem_key_modifier_NDOF_BUTTON_1" : 422,  "KeyMapItem_key_modifier_NDOF_BUTTON_2" : 423,  "KeyMapItem_key_modifier_NDOF_BUTTON_3" : 424,  "KeyMapItem_key_modifier_NDOF_BUTTON_4" : 425,  "KeyMapItem_key_modifier_NDOF_BUTTON_5" : 426,  "KeyMapItem_key_modifier_NDOF_BUTTON_6" : 427,  "KeyMapItem_key_modifier_NDOF_BUTTON_7" : 428,  "KeyMapItem_key_modifier_NDOF_BUTTON_8" : 429,  "KeyMapItem_key_modifier_NDOF_BUTTON_9" : 430,  "KeyMapItem_key_modifier_NDOF_BUTTON_10" : 431, 
 "KeyMapItem_map_type_KEYBOARD" : 0,  "KeyMapItem_map_type_TWEAK" : 2,  "KeyMapItem_map_type_MOUSE" : 1,  "KeyMapItem_map_type_NDOF" : 5,  "KeyMapItem_map_type_TEXTINPUT" : 3,  "KeyMapItem_map_type_TIMER" : 4, 
 "KeyMapItem_propvalue_NONE" : 0, 
 "KeyMapItem_type_NONE" : 0,  "KeyMapItem_type_LEFTMOUSE" : 1,  "KeyMapItem_type_MIDDLEMOUSE" : 2,  "KeyMapItem_type_RIGHTMOUSE" : 3,  "KeyMapItem_type_BUTTON4MOUSE" : 7,  "KeyMapItem_type_BUTTON5MOUSE" : 8,  "KeyMapItem_type_ACTIONMOUSE" : 5,  "KeyMapItem_type_SELECTMOUSE" : 6,  "KeyMapItem_type_MOUSEMOVE" : 4,  "KeyMapItem_type_INBETWEEN_MOUSEMOVE" : 17,  "KeyMapItem_type_TRACKPADPAN" : 14,  "KeyMapItem_type_TRACKPADZOOM" : 15,  "KeyMapItem_type_MOUSEROTATE" : 16,  "KeyMapItem_type_WHEELUPMOUSE" : 10,  "KeyMapItem_type_WHEELDOWNMOUSE" : 11,  "KeyMapItem_type_WHEELINMOUSE" : 12,  "KeyMapItem_type_WHEELOUTMOUSE" : 13,  "KeyMapItem_type_EVT_TWEAK_L" : 20482,  "KeyMapItem_type_EVT_TWEAK_M" : 20483,  "KeyMapItem_type_EVT_TWEAK_R" : 20484,  "KeyMapItem_type_EVT_TWEAK_A" : 20485,  "KeyMapItem_type_EVT_TWEAK_S" : 20486,  "KeyMapItem_type_A" : 97,  "KeyMapItem_type_B" : 98,  "KeyMapItem_type_C" : 99,  "KeyMapItem_type_D" : 100,  "KeyMapItem_type_E" : 101,  "KeyMapItem_type_F" : 102,  "KeyMapItem_type_G" : 103,  "KeyMapItem_type_H" : 104,  "KeyMapItem_type_I" : 105,  "KeyMapItem_type_J" : 106,  "KeyMapItem_type_K" : 107,  "KeyMapItem_type_L" : 108,  "KeyMapItem_type_M" : 109,  "KeyMapItem_type_N" : 110,  "KeyMapItem_type_O" : 111,  "KeyMapItem_type_P" : 112,  "KeyMapItem_type_Q" : 113,  "KeyMapItem_type_R" : 114,  "KeyMapItem_type_S" : 115,  "KeyMapItem_type_T" : 116,  "KeyMapItem_type_U" : 117,  "KeyMapItem_type_V" : 118,  "KeyMapItem_type_W" : 119,  "KeyMapItem_type_X" : 120,  "KeyMapItem_type_Y" : 121,  "KeyMapItem_type_Z" : 122,  "KeyMapItem_type_ZERO" : 48,  "KeyMapItem_type_ONE" : 49,  "KeyMapItem_type_TWO" : 50,  "KeyMapItem_type_THREE" : 51,  "KeyMapItem_type_FOUR" : 52,  "KeyMapItem_type_FIVE" : 53,  "KeyMapItem_type_SIX" : 54,  "KeyMapItem_type_SEVEN" : 55,  "KeyMapItem_type_EIGHT" : 56,  "KeyMapItem_type_NINE" : 57,  "KeyMapItem_type_LEFT_CTRL" : 212,  "KeyMapItem_type_LEFT_ALT" : 213,  "KeyMapItem_type_LEFT_SHIFT" : 217,  "KeyMapItem_type_RIGHT_ALT" : 214,  "KeyMapItem_type_RIGHT_CTRL" : 215,  "KeyMapItem_type_RIGHT_SHIFT" : 216,  "KeyMapItem_type_OSKEY" : 172,  "KeyMapItem_type_GRLESS" : 173,  "KeyMapItem_type_ESC" : 218,  "KeyMapItem_type_TAB" : 219,  "KeyMapItem_type_RET" : 220,  "KeyMapItem_type_SPACE" : 221,  "KeyMapItem_type_LINE_FEED" : 222,  "KeyMapItem_type_BACK_SPACE" : 223,  "KeyMapItem_type_DEL" : 224,  "KeyMapItem_type_SEMI_COLON" : 225,  "KeyMapItem_type_PERIOD" : 226,  "KeyMapItem_type_COMMA" : 227,  "KeyMapItem_type_QUOTE" : 228,  "KeyMapItem_type_ACCENT_GRAVE" : 229,  "KeyMapItem_type_MINUS" : 230,  "KeyMapItem_type_SLASH" : 232,  "KeyMapItem_type_BACK_SLASH" : 233,  "KeyMapItem_type_EQUAL" : 234,  "KeyMapItem_type_LEFT_BRACKET" : 235,  "KeyMapItem_type_RIGHT_BRACKET" : 236,  "KeyMapItem_type_LEFT_ARROW" : 137,  "KeyMapItem_type_DOWN_ARROW" : 138,  "KeyMapItem_type_RIGHT_ARROW" : 139,  "KeyMapItem_type_UP_ARROW" : 140,  "KeyMapItem_type_NUMPAD_2" : 152,  "KeyMapItem_type_NUMPAD_4" : 154,  "KeyMapItem_type_NUMPAD_6" : 156,  "KeyMapItem_type_NUMPAD_8" : 158,  "KeyMapItem_type_NUMPAD_1" : 151,  "KeyMapItem_type_NUMPAD_3" : 153,  "KeyMapItem_type_NUMPAD_5" : 155,  "KeyMapItem_type_NUMPAD_7" : 157,  "KeyMapItem_type_NUMPAD_9" : 159,  "KeyMapItem_type_NUMPAD_PERIOD" : 199,  "KeyMapItem_type_NUMPAD_SLASH" : 161,  "KeyMapItem_type_NUMPAD_ASTERIX" : 160,  "KeyMapItem_type_NUMPAD_0" : 150,  "KeyMapItem_type_NUMPAD_MINUS" : 162,  "KeyMapItem_type_NUMPAD_ENTER" : 163,  "KeyMapItem_type_NUMPAD_PLUS" : 164,  "KeyMapItem_type_F1" : 300,  "KeyMapItem_type_F2" : 301,  "KeyMapItem_type_F3" : 302,  "KeyMapItem_type_F4" : 303,  "KeyMapItem_type_F5" : 304,  "KeyMapItem_type_F6" : 305,  "KeyMapItem_type_F7" : 306,  "KeyMapItem_type_F8" : 307,  "KeyMapItem_type_F9" : 308,  "KeyMapItem_type_F10" : 309,  "KeyMapItem_type_F11" : 310,  "KeyMapItem_type_F12" : 311,  "KeyMapItem_type_F13" : 312,  "KeyMapItem_type_F14" : 313,  "KeyMapItem_type_F15" : 314,  "KeyMapItem_type_F16" : 315,  "KeyMapItem_type_F17" : 316,  "KeyMapItem_type_F18" : 317,  "KeyMapItem_type_F19" : 318,  "KeyMapItem_type_PAUSE" : 165,  "KeyMapItem_type_INSERT" : 166,  "KeyMapItem_type_HOME" : 167,  "KeyMapItem_type_PAGE_UP" : 168,  "KeyMapItem_type_PAGE_DOWN" : 169,  "KeyMapItem_type_END" : 170,  "KeyMapItem_type_MEDIA_PLAY" : 174,  "KeyMapItem_type_MEDIA_STOP" : 175,  "KeyMapItem_type_MEDIA_FIRST" : 176,  "KeyMapItem_type_MEDIA_LAST" : 177,  "KeyMapItem_type_WINDOW_DEACTIVATE" : 260,  "KeyMapItem_type_TIMER" : 272,  "KeyMapItem_type_TIMER0" : 273,  "KeyMapItem_type_TIMER1" : 274,  "KeyMapItem_type_TIMER2" : 275,  "KeyMapItem_type_NDOF_BUTTON_MENU" : 401,  "KeyMapItem_type_NDOF_BUTTON_FIT" : 402,  "KeyMapItem_type_NDOF_BUTTON_TOP" : 403,  "KeyMapItem_type_NDOF_BUTTON_BOTTOM" : 404,  "KeyMapItem_type_NDOF_BUTTON_LEFT" : 405,  "KeyMapItem_type_NDOF_BUTTON_RIGHT" : 406,  "KeyMapItem_type_NDOF_BUTTON_FRONT" : 407,  "KeyMapItem_type_NDOF_BUTTON_BACK" : 408,  "KeyMapItem_type_NDOF_BUTTON_ISO1" : 409,  "KeyMapItem_type_NDOF_BUTTON_ISO2" : 410,  "KeyMapItem_type_NDOF_BUTTON_ROLL_CW" : 411,  "KeyMapItem_type_NDOF_BUTTON_ROLL_CCW" : 412,  "KeyMapItem_type_NDOF_BUTTON_SPIN_CW" : 413,  "KeyMapItem_type_NDOF_BUTTON_SPIN_CCW" : 414,  "KeyMapItem_type_NDOF_BUTTON_TILT_CW" : 415,  "KeyMapItem_type_NDOF_BUTTON_TILT_CCW" : 416,  "KeyMapItem_type_NDOF_BUTTON_ROTATE" : 417,  "KeyMapItem_type_NDOF_BUTTON_PANZOOM" : 418,  "KeyMapItem_type_NDOF_BUTTON_DOMINANT" : 419,  "KeyMapItem_type_NDOF_BUTTON_PLUS" : 420,  "KeyMapItem_type_NDOF_BUTTON_MINUS" : 421,  "KeyMapItem_type_NDOF_BUTTON_1" : 422,  "KeyMapItem_type_NDOF_BUTTON_2" : 423,  "KeyMapItem_type_NDOF_BUTTON_3" : 424,  "KeyMapItem_type_NDOF_BUTTON_4" : 425,  "KeyMapItem_type_NDOF_BUTTON_5" : 426,  "KeyMapItem_type_NDOF_BUTTON_6" : 427,  "KeyMapItem_type_NDOF_BUTTON_7" : 428,  "KeyMapItem_type_NDOF_BUTTON_8" : 429,  "KeyMapItem_type_NDOF_BUTTON_9" : 430,  "KeyMapItem_type_NDOF_BUTTON_10" : 431, 
 "KeyMapItem_value_ANY" : -1,  "KeyMapItem_value_NOTHING" : 0,  "KeyMapItem_value_PRESS" : 1,  "KeyMapItem_value_RELEASE" : 2,  "KeyMapItem_value_CLICK" : 3,  "KeyMapItem_value_DOUBLE_CLICK" : 4, 
 "KeyboardSensor_key_NONE" : 0,  "KeyboardSensor_key_LEFTMOUSE" : 1,  "KeyboardSensor_key_MIDDLEMOUSE" : 2,  "KeyboardSensor_key_RIGHTMOUSE" : 3,  "KeyboardSensor_key_BUTTON4MOUSE" : 7,  "KeyboardSensor_key_BUTTON5MOUSE" : 8,  "KeyboardSensor_key_ACTIONMOUSE" : 5,  "KeyboardSensor_key_SELECTMOUSE" : 6,  "KeyboardSensor_key_MOUSEMOVE" : 4,  "KeyboardSensor_key_INBETWEEN_MOUSEMOVE" : 17,  "KeyboardSensor_key_TRACKPADPAN" : 14,  "KeyboardSensor_key_TRACKPADZOOM" : 15,  "KeyboardSensor_key_MOUSEROTATE" : 16,  "KeyboardSensor_key_WHEELUPMOUSE" : 10,  "KeyboardSensor_key_WHEELDOWNMOUSE" : 11,  "KeyboardSensor_key_WHEELINMOUSE" : 12,  "KeyboardSensor_key_WHEELOUTMOUSE" : 13,  "KeyboardSensor_key_EVT_TWEAK_L" : 20482,  "KeyboardSensor_key_EVT_TWEAK_M" : 20483,  "KeyboardSensor_key_EVT_TWEAK_R" : 20484,  "KeyboardSensor_key_EVT_TWEAK_A" : 20485,  "KeyboardSensor_key_EVT_TWEAK_S" : 20486,  "KeyboardSensor_key_A" : 97,  "KeyboardSensor_key_B" : 98,  "KeyboardSensor_key_C" : 99,  "KeyboardSensor_key_D" : 100,  "KeyboardSensor_key_E" : 101,  "KeyboardSensor_key_F" : 102,  "KeyboardSensor_key_G" : 103,  "KeyboardSensor_key_H" : 104,  "KeyboardSensor_key_I" : 105,  "KeyboardSensor_key_J" : 106,  "KeyboardSensor_key_K" : 107,  "KeyboardSensor_key_L" : 108,  "KeyboardSensor_key_M" : 109,  "KeyboardSensor_key_N" : 110,  "KeyboardSensor_key_O" : 111,  "KeyboardSensor_key_P" : 112,  "KeyboardSensor_key_Q" : 113,  "KeyboardSensor_key_R" : 114,  "KeyboardSensor_key_S" : 115,  "KeyboardSensor_key_T" : 116,  "KeyboardSensor_key_U" : 117,  "KeyboardSensor_key_V" : 118,  "KeyboardSensor_key_W" : 119,  "KeyboardSensor_key_X" : 120,  "KeyboardSensor_key_Y" : 121,  "KeyboardSensor_key_Z" : 122,  "KeyboardSensor_key_ZERO" : 48,  "KeyboardSensor_key_ONE" : 49,  "KeyboardSensor_key_TWO" : 50,  "KeyboardSensor_key_THREE" : 51,  "KeyboardSensor_key_FOUR" : 52,  "KeyboardSensor_key_FIVE" : 53,  "KeyboardSensor_key_SIX" : 54,  "KeyboardSensor_key_SEVEN" : 55,  "KeyboardSensor_key_EIGHT" : 56,  "KeyboardSensor_key_NINE" : 57,  "KeyboardSensor_key_LEFT_CTRL" : 212,  "KeyboardSensor_key_LEFT_ALT" : 213,  "KeyboardSensor_key_LEFT_SHIFT" : 217,  "KeyboardSensor_key_RIGHT_ALT" : 214,  "KeyboardSensor_key_RIGHT_CTRL" : 215,  "KeyboardSensor_key_RIGHT_SHIFT" : 216,  "KeyboardSensor_key_OSKEY" : 172,  "KeyboardSensor_key_GRLESS" : 173,  "KeyboardSensor_key_ESC" : 218,  "KeyboardSensor_key_TAB" : 219,  "KeyboardSensor_key_RET" : 220,  "KeyboardSensor_key_SPACE" : 221,  "KeyboardSensor_key_LINE_FEED" : 222,  "KeyboardSensor_key_BACK_SPACE" : 223,  "KeyboardSensor_key_DEL" : 224,  "KeyboardSensor_key_SEMI_COLON" : 225,  "KeyboardSensor_key_PERIOD" : 226,  "KeyboardSensor_key_COMMA" : 227,  "KeyboardSensor_key_QUOTE" : 228,  "KeyboardSensor_key_ACCENT_GRAVE" : 229,  "KeyboardSensor_key_MINUS" : 230,  "KeyboardSensor_key_SLASH" : 232,  "KeyboardSensor_key_BACK_SLASH" : 233,  "KeyboardSensor_key_EQUAL" : 234,  "KeyboardSensor_key_LEFT_BRACKET" : 235,  "KeyboardSensor_key_RIGHT_BRACKET" : 236,  "KeyboardSensor_key_LEFT_ARROW" : 137,  "KeyboardSensor_key_DOWN_ARROW" : 138,  "KeyboardSensor_key_RIGHT_ARROW" : 139,  "KeyboardSensor_key_UP_ARROW" : 140,  "KeyboardSensor_key_NUMPAD_2" : 152,  "KeyboardSensor_key_NUMPAD_4" : 154,  "KeyboardSensor_key_NUMPAD_6" : 156,  "KeyboardSensor_key_NUMPAD_8" : 158,  "KeyboardSensor_key_NUMPAD_1" : 151,  "KeyboardSensor_key_NUMPAD_3" : 153,  "KeyboardSensor_key_NUMPAD_5" : 155,  "KeyboardSensor_key_NUMPAD_7" : 157,  "KeyboardSensor_key_NUMPAD_9" : 159,  "KeyboardSensor_key_NUMPAD_PERIOD" : 199,  "KeyboardSensor_key_NUMPAD_SLASH" : 161,  "KeyboardSensor_key_NUMPAD_ASTERIX" : 160,  "KeyboardSensor_key_NUMPAD_0" : 150,  "KeyboardSensor_key_NUMPAD_MINUS" : 162,  "KeyboardSensor_key_NUMPAD_ENTER" : 163,  "KeyboardSensor_key_NUMPAD_PLUS" : 164,  "KeyboardSensor_key_F1" : 300,  "KeyboardSensor_key_F2" : 301,  "KeyboardSensor_key_F3" : 302,  "KeyboardSensor_key_F4" : 303,  "KeyboardSensor_key_F5" : 304,  "KeyboardSensor_key_F6" : 305,  "KeyboardSensor_key_F7" : 306,  "KeyboardSensor_key_F8" : 307,  "KeyboardSensor_key_F9" : 308,  "KeyboardSensor_key_F10" : 309,  "KeyboardSensor_key_F11" : 310,  "KeyboardSensor_key_F12" : 311,  "KeyboardSensor_key_F13" : 312,  "KeyboardSensor_key_F14" : 313,  "KeyboardSensor_key_F15" : 314,  "KeyboardSensor_key_F16" : 315,  "KeyboardSensor_key_F17" : 316,  "KeyboardSensor_key_F18" : 317,  "KeyboardSensor_key_F19" : 318,  "KeyboardSensor_key_PAUSE" : 165,  "KeyboardSensor_key_INSERT" : 166,  "KeyboardSensor_key_HOME" : 167,  "KeyboardSensor_key_PAGE_UP" : 168,  "KeyboardSensor_key_PAGE_DOWN" : 169,  "KeyboardSensor_key_END" : 170,  "KeyboardSensor_key_MEDIA_PLAY" : 174,  "KeyboardSensor_key_MEDIA_STOP" : 175,  "KeyboardSensor_key_MEDIA_FIRST" : 176,  "KeyboardSensor_key_MEDIA_LAST" : 177,  "KeyboardSensor_key_WINDOW_DEACTIVATE" : 260,  "KeyboardSensor_key_TIMER" : 272,  "KeyboardSensor_key_TIMER0" : 273,  "KeyboardSensor_key_TIMER1" : 274,  "KeyboardSensor_key_TIMER2" : 275,  "KeyboardSensor_key_NDOF_BUTTON_MENU" : 401,  "KeyboardSensor_key_NDOF_BUTTON_FIT" : 402,  "KeyboardSensor_key_NDOF_BUTTON_TOP" : 403,  "KeyboardSensor_key_NDOF_BUTTON_BOTTOM" : 404,  "KeyboardSensor_key_NDOF_BUTTON_LEFT" : 405,  "KeyboardSensor_key_NDOF_BUTTON_RIGHT" : 406,  "KeyboardSensor_key_NDOF_BUTTON_FRONT" : 407,  "KeyboardSensor_key_NDOF_BUTTON_BACK" : 408,  "KeyboardSensor_key_NDOF_BUTTON_ISO1" : 409,  "KeyboardSensor_key_NDOF_BUTTON_ISO2" : 410,  "KeyboardSensor_key_NDOF_BUTTON_ROLL_CW" : 411,  "KeyboardSensor_key_NDOF_BUTTON_ROLL_CCW" : 412,  "KeyboardSensor_key_NDOF_BUTTON_SPIN_CW" : 413,  "KeyboardSensor_key_NDOF_BUTTON_SPIN_CCW" : 414,  "KeyboardSensor_key_NDOF_BUTTON_TILT_CW" : 415,  "KeyboardSensor_key_NDOF_BUTTON_TILT_CCW" : 416,  "KeyboardSensor_key_NDOF_BUTTON_ROTATE" : 417,  "KeyboardSensor_key_NDOF_BUTTON_PANZOOM" : 418,  "KeyboardSensor_key_NDOF_BUTTON_DOMINANT" : 419,  "KeyboardSensor_key_NDOF_BUTTON_PLUS" : 420,  "KeyboardSensor_key_NDOF_BUTTON_MINUS" : 421,  "KeyboardSensor_key_NDOF_BUTTON_1" : 422,  "KeyboardSensor_key_NDOF_BUTTON_2" : 423,  "KeyboardSensor_key_NDOF_BUTTON_3" : 424,  "KeyboardSensor_key_NDOF_BUTTON_4" : 425,  "KeyboardSensor_key_NDOF_BUTTON_5" : 426,  "KeyboardSensor_key_NDOF_BUTTON_6" : 427,  "KeyboardSensor_key_NDOF_BUTTON_7" : 428,  "KeyboardSensor_key_NDOF_BUTTON_8" : 429,  "KeyboardSensor_key_NDOF_BUTTON_9" : 430,  "KeyboardSensor_key_NDOF_BUTTON_10" : 431, 
 "KeyboardSensor_modifier_key_1_NONE" : 0,  "KeyboardSensor_modifier_key_1_LEFTMOUSE" : 1,  "KeyboardSensor_modifier_key_1_MIDDLEMOUSE" : 2,  "KeyboardSensor_modifier_key_1_RIGHTMOUSE" : 3,  "KeyboardSensor_modifier_key_1_BUTTON4MOUSE" : 7,  "KeyboardSensor_modifier_key_1_BUTTON5MOUSE" : 8,  "KeyboardSensor_modifier_key_1_ACTIONMOUSE" : 5,  "KeyboardSensor_modifier_key_1_SELECTMOUSE" : 6,  "KeyboardSensor_modifier_key_1_MOUSEMOVE" : 4,  "KeyboardSensor_modifier_key_1_INBETWEEN_MOUSEMOVE" : 17,  "KeyboardSensor_modifier_key_1_TRACKPADPAN" : 14,  "KeyboardSensor_modifier_key_1_TRACKPADZOOM" : 15,  "KeyboardSensor_modifier_key_1_MOUSEROTATE" : 16,  "KeyboardSensor_modifier_key_1_WHEELUPMOUSE" : 10,  "KeyboardSensor_modifier_key_1_WHEELDOWNMOUSE" : 11,  "KeyboardSensor_modifier_key_1_WHEELINMOUSE" : 12,  "KeyboardSensor_modifier_key_1_WHEELOUTMOUSE" : 13,  "KeyboardSensor_modifier_key_1_EVT_TWEAK_L" : 20482,  "KeyboardSensor_modifier_key_1_EVT_TWEAK_M" : 20483,  "KeyboardSensor_modifier_key_1_EVT_TWEAK_R" : 20484,  "KeyboardSensor_modifier_key_1_EVT_TWEAK_A" : 20485,  "KeyboardSensor_modifier_key_1_EVT_TWEAK_S" : 20486,  "KeyboardSensor_modifier_key_1_A" : 97,  "KeyboardSensor_modifier_key_1_B" : 98,  "KeyboardSensor_modifier_key_1_C" : 99,  "KeyboardSensor_modifier_key_1_D" : 100,  "KeyboardSensor_modifier_key_1_E" : 101,  "KeyboardSensor_modifier_key_1_F" : 102,  "KeyboardSensor_modifier_key_1_G" : 103,  "KeyboardSensor_modifier_key_1_H" : 104,  "KeyboardSensor_modifier_key_1_I" : 105,  "KeyboardSensor_modifier_key_1_J" : 106,  "KeyboardSensor_modifier_key_1_K" : 107,  "KeyboardSensor_modifier_key_1_L" : 108,  "KeyboardSensor_modifier_key_1_M" : 109,  "KeyboardSensor_modifier_key_1_N" : 110,  "KeyboardSensor_modifier_key_1_O" : 111,  "KeyboardSensor_modifier_key_1_P" : 112,  "KeyboardSensor_modifier_key_1_Q" : 113,  "KeyboardSensor_modifier_key_1_R" : 114,  "KeyboardSensor_modifier_key_1_S" : 115,  "KeyboardSensor_modifier_key_1_T" : 116,  "KeyboardSensor_modifier_key_1_U" : 117,  "KeyboardSensor_modifier_key_1_V" : 118,  "KeyboardSensor_modifier_key_1_W" : 119,  "KeyboardSensor_modifier_key_1_X" : 120,  "KeyboardSensor_modifier_key_1_Y" : 121,  "KeyboardSensor_modifier_key_1_Z" : 122,  "KeyboardSensor_modifier_key_1_ZERO" : 48,  "KeyboardSensor_modifier_key_1_ONE" : 49,  "KeyboardSensor_modifier_key_1_TWO" : 50,  "KeyboardSensor_modifier_key_1_THREE" : 51,  "KeyboardSensor_modifier_key_1_FOUR" : 52,  "KeyboardSensor_modifier_key_1_FIVE" : 53,  "KeyboardSensor_modifier_key_1_SIX" : 54,  "KeyboardSensor_modifier_key_1_SEVEN" : 55,  "KeyboardSensor_modifier_key_1_EIGHT" : 56,  "KeyboardSensor_modifier_key_1_NINE" : 57,  "KeyboardSensor_modifier_key_1_LEFT_CTRL" : 212,  "KeyboardSensor_modifier_key_1_LEFT_ALT" : 213,  "KeyboardSensor_modifier_key_1_LEFT_SHIFT" : 217,  "KeyboardSensor_modifier_key_1_RIGHT_ALT" : 214,  "KeyboardSensor_modifier_key_1_RIGHT_CTRL" : 215,  "KeyboardSensor_modifier_key_1_RIGHT_SHIFT" : 216,  "KeyboardSensor_modifier_key_1_OSKEY" : 172,  "KeyboardSensor_modifier_key_1_GRLESS" : 173,  "KeyboardSensor_modifier_key_1_ESC" : 218,  "KeyboardSensor_modifier_key_1_TAB" : 219,  "KeyboardSensor_modifier_key_1_RET" : 220,  "KeyboardSensor_modifier_key_1_SPACE" : 221,  "KeyboardSensor_modifier_key_1_LINE_FEED" : 222,  "KeyboardSensor_modifier_key_1_BACK_SPACE" : 223,  "KeyboardSensor_modifier_key_1_DEL" : 224,  "KeyboardSensor_modifier_key_1_SEMI_COLON" : 225,  "KeyboardSensor_modifier_key_1_PERIOD" : 226,  "KeyboardSensor_modifier_key_1_COMMA" : 227,  "KeyboardSensor_modifier_key_1_QUOTE" : 228,  "KeyboardSensor_modifier_key_1_ACCENT_GRAVE" : 229,  "KeyboardSensor_modifier_key_1_MINUS" : 230,  "KeyboardSensor_modifier_key_1_SLASH" : 232,  "KeyboardSensor_modifier_key_1_BACK_SLASH" : 233,  "KeyboardSensor_modifier_key_1_EQUAL" : 234,  "KeyboardSensor_modifier_key_1_LEFT_BRACKET" : 235,  "KeyboardSensor_modifier_key_1_RIGHT_BRACKET" : 236,  "KeyboardSensor_modifier_key_1_LEFT_ARROW" : 137,  "KeyboardSensor_modifier_key_1_DOWN_ARROW" : 138,  "KeyboardSensor_modifier_key_1_RIGHT_ARROW" : 139,  "KeyboardSensor_modifier_key_1_UP_ARROW" : 140,  "KeyboardSensor_modifier_key_1_NUMPAD_2" : 152,  "KeyboardSensor_modifier_key_1_NUMPAD_4" : 154,  "KeyboardSensor_modifier_key_1_NUMPAD_6" : 156,  "KeyboardSensor_modifier_key_1_NUMPAD_8" : 158,  "KeyboardSensor_modifier_key_1_NUMPAD_1" : 151,  "KeyboardSensor_modifier_key_1_NUMPAD_3" : 153,  "KeyboardSensor_modifier_key_1_NUMPAD_5" : 155,  "KeyboardSensor_modifier_key_1_NUMPAD_7" : 157,  "KeyboardSensor_modifier_key_1_NUMPAD_9" : 159,  "KeyboardSensor_modifier_key_1_NUMPAD_PERIOD" : 199,  "KeyboardSensor_modifier_key_1_NUMPAD_SLASH" : 161,  "KeyboardSensor_modifier_key_1_NUMPAD_ASTERIX" : 160,  "KeyboardSensor_modifier_key_1_NUMPAD_0" : 150,  "KeyboardSensor_modifier_key_1_NUMPAD_MINUS" : 162,  "KeyboardSensor_modifier_key_1_NUMPAD_ENTER" : 163,  "KeyboardSensor_modifier_key_1_NUMPAD_PLUS" : 164,  "KeyboardSensor_modifier_key_1_F1" : 300,  "KeyboardSensor_modifier_key_1_F2" : 301,  "KeyboardSensor_modifier_key_1_F3" : 302,  "KeyboardSensor_modifier_key_1_F4" : 303,  "KeyboardSensor_modifier_key_1_F5" : 304,  "KeyboardSensor_modifier_key_1_F6" : 305,  "KeyboardSensor_modifier_key_1_F7" : 306,  "KeyboardSensor_modifier_key_1_F8" : 307,  "KeyboardSensor_modifier_key_1_F9" : 308,  "KeyboardSensor_modifier_key_1_F10" : 309,  "KeyboardSensor_modifier_key_1_F11" : 310,  "KeyboardSensor_modifier_key_1_F12" : 311,  "KeyboardSensor_modifier_key_1_F13" : 312,  "KeyboardSensor_modifier_key_1_F14" : 313,  "KeyboardSensor_modifier_key_1_F15" : 314,  "KeyboardSensor_modifier_key_1_F16" : 315,  "KeyboardSensor_modifier_key_1_F17" : 316,  "KeyboardSensor_modifier_key_1_F18" : 317,  "KeyboardSensor_modifier_key_1_F19" : 318,  "KeyboardSensor_modifier_key_1_PAUSE" : 165,  "KeyboardSensor_modifier_key_1_INSERT" : 166,  "KeyboardSensor_modifier_key_1_HOME" : 167,  "KeyboardSensor_modifier_key_1_PAGE_UP" : 168,  "KeyboardSensor_modifier_key_1_PAGE_DOWN" : 169,  "KeyboardSensor_modifier_key_1_END" : 170,  "KeyboardSensor_modifier_key_1_MEDIA_PLAY" : 174,  "KeyboardSensor_modifier_key_1_MEDIA_STOP" : 175,  "KeyboardSensor_modifier_key_1_MEDIA_FIRST" : 176,  "KeyboardSensor_modifier_key_1_MEDIA_LAST" : 177,  "KeyboardSensor_modifier_key_1_WINDOW_DEACTIVATE" : 260,  "KeyboardSensor_modifier_key_1_TIMER" : 272,  "KeyboardSensor_modifier_key_1_TIMER0" : 273,  "KeyboardSensor_modifier_key_1_TIMER1" : 274,  "KeyboardSensor_modifier_key_1_TIMER2" : 275,  "KeyboardSensor_modifier_key_1_NDOF_BUTTON_MENU" : 401,  "KeyboardSensor_modifier_key_1_NDOF_BUTTON_FIT" : 402,  "KeyboardSensor_modifier_key_1_NDOF_BUTTON_TOP" : 403,  "KeyboardSensor_modifier_key_1_NDOF_BUTTON_BOTTOM" : 404,  "KeyboardSensor_modifier_key_1_NDOF_BUTTON_LEFT" : 405,  "KeyboardSensor_modifier_key_1_NDOF_BUTTON_RIGHT" : 406,  "KeyboardSensor_modifier_key_1_NDOF_BUTTON_FRONT" : 407,  "KeyboardSensor_modifier_key_1_NDOF_BUTTON_BACK" : 408,  "KeyboardSensor_modifier_key_1_NDOF_BUTTON_ISO1" : 409,  "KeyboardSensor_modifier_key_1_NDOF_BUTTON_ISO2" : 410,  "KeyboardSensor_modifier_key_1_NDOF_BUTTON_ROLL_CW" : 411,  "KeyboardSensor_modifier_key_1_NDOF_BUTTON_ROLL_CCW" : 412,  "KeyboardSensor_modifier_key_1_NDOF_BUTTON_SPIN_CW" : 413,  "KeyboardSensor_modifier_key_1_NDOF_BUTTON_SPIN_CCW" : 414,  "KeyboardSensor_modifier_key_1_NDOF_BUTTON_TILT_CW" : 415,  "KeyboardSensor_modifier_key_1_NDOF_BUTTON_TILT_CCW" : 416,  "KeyboardSensor_modifier_key_1_NDOF_BUTTON_ROTATE" : 417,  "KeyboardSensor_modifier_key_1_NDOF_BUTTON_PANZOOM" : 418,  "KeyboardSensor_modifier_key_1_NDOF_BUTTON_DOMINANT" : 419,  "KeyboardSensor_modifier_key_1_NDOF_BUTTON_PLUS" : 420,  "KeyboardSensor_modifier_key_1_NDOF_BUTTON_MINUS" : 421,  "KeyboardSensor_modifier_key_1_NDOF_BUTTON_1" : 422,  "KeyboardSensor_modifier_key_1_NDOF_BUTTON_2" : 423,  "KeyboardSensor_modifier_key_1_NDOF_BUTTON_3" : 424,  "KeyboardSensor_modifier_key_1_NDOF_BUTTON_4" : 425,  "KeyboardSensor_modifier_key_1_NDOF_BUTTON_5" : 426,  "KeyboardSensor_modifier_key_1_NDOF_BUTTON_6" : 427,  "KeyboardSensor_modifier_key_1_NDOF_BUTTON_7" : 428,  "KeyboardSensor_modifier_key_1_NDOF_BUTTON_8" : 429,  "KeyboardSensor_modifier_key_1_NDOF_BUTTON_9" : 430,  "KeyboardSensor_modifier_key_1_NDOF_BUTTON_10" : 431, 
 "KeyboardSensor_modifier_key_2_NONE" : 0,  "KeyboardSensor_modifier_key_2_LEFTMOUSE" : 1,  "KeyboardSensor_modifier_key_2_MIDDLEMOUSE" : 2,  "KeyboardSensor_modifier_key_2_RIGHTMOUSE" : 3,  "KeyboardSensor_modifier_key_2_BUTTON4MOUSE" : 7,  "KeyboardSensor_modifier_key_2_BUTTON5MOUSE" : 8,  "KeyboardSensor_modifier_key_2_ACTIONMOUSE" : 5,  "KeyboardSensor_modifier_key_2_SELECTMOUSE" : 6,  "KeyboardSensor_modifier_key_2_MOUSEMOVE" : 4,  "KeyboardSensor_modifier_key_2_INBETWEEN_MOUSEMOVE" : 17,  "KeyboardSensor_modifier_key_2_TRACKPADPAN" : 14,  "KeyboardSensor_modifier_key_2_TRACKPADZOOM" : 15,  "KeyboardSensor_modifier_key_2_MOUSEROTATE" : 16,  "KeyboardSensor_modifier_key_2_WHEELUPMOUSE" : 10,  "KeyboardSensor_modifier_key_2_WHEELDOWNMOUSE" : 11,  "KeyboardSensor_modifier_key_2_WHEELINMOUSE" : 12,  "KeyboardSensor_modifier_key_2_WHEELOUTMOUSE" : 13,  "KeyboardSensor_modifier_key_2_EVT_TWEAK_L" : 20482,  "KeyboardSensor_modifier_key_2_EVT_TWEAK_M" : 20483,  "KeyboardSensor_modifier_key_2_EVT_TWEAK_R" : 20484,  "KeyboardSensor_modifier_key_2_EVT_TWEAK_A" : 20485,  "KeyboardSensor_modifier_key_2_EVT_TWEAK_S" : 20486,  "KeyboardSensor_modifier_key_2_A" : 97,  "KeyboardSensor_modifier_key_2_B" : 98,  "KeyboardSensor_modifier_key_2_C" : 99,  "KeyboardSensor_modifier_key_2_D" : 100,  "KeyboardSensor_modifier_key_2_E" : 101,  "KeyboardSensor_modifier_key_2_F" : 102,  "KeyboardSensor_modifier_key_2_G" : 103,  "KeyboardSensor_modifier_key_2_H" : 104,  "KeyboardSensor_modifier_key_2_I" : 105,  "KeyboardSensor_modifier_key_2_J" : 106,  "KeyboardSensor_modifier_key_2_K" : 107,  "KeyboardSensor_modifier_key_2_L" : 108,  "KeyboardSensor_modifier_key_2_M" : 109,  "KeyboardSensor_modifier_key_2_N" : 110,  "KeyboardSensor_modifier_key_2_O" : 111,  "KeyboardSensor_modifier_key_2_P" : 112,  "KeyboardSensor_modifier_key_2_Q" : 113,  "KeyboardSensor_modifier_key_2_R" : 114,  "KeyboardSensor_modifier_key_2_S" : 115,  "KeyboardSensor_modifier_key_2_T" : 116,  "KeyboardSensor_modifier_key_2_U" : 117,  "KeyboardSensor_modifier_key_2_V" : 118,  "KeyboardSensor_modifier_key_2_W" : 119,  "KeyboardSensor_modifier_key_2_X" : 120,  "KeyboardSensor_modifier_key_2_Y" : 121,  "KeyboardSensor_modifier_key_2_Z" : 122,  "KeyboardSensor_modifier_key_2_ZERO" : 48,  "KeyboardSensor_modifier_key_2_ONE" : 49,  "KeyboardSensor_modifier_key_2_TWO" : 50,  "KeyboardSensor_modifier_key_2_THREE" : 51,  "KeyboardSensor_modifier_key_2_FOUR" : 52,  "KeyboardSensor_modifier_key_2_FIVE" : 53,  "KeyboardSensor_modifier_key_2_SIX" : 54,  "KeyboardSensor_modifier_key_2_SEVEN" : 55,  "KeyboardSensor_modifier_key_2_EIGHT" : 56,  "KeyboardSensor_modifier_key_2_NINE" : 57,  "KeyboardSensor_modifier_key_2_LEFT_CTRL" : 212,  "KeyboardSensor_modifier_key_2_LEFT_ALT" : 213,  "KeyboardSensor_modifier_key_2_LEFT_SHIFT" : 217,  "KeyboardSensor_modifier_key_2_RIGHT_ALT" : 214,  "KeyboardSensor_modifier_key_2_RIGHT_CTRL" : 215,  "KeyboardSensor_modifier_key_2_RIGHT_SHIFT" : 216,  "KeyboardSensor_modifier_key_2_OSKEY" : 172,  "KeyboardSensor_modifier_key_2_GRLESS" : 173,  "KeyboardSensor_modifier_key_2_ESC" : 218,  "KeyboardSensor_modifier_key_2_TAB" : 219,  "KeyboardSensor_modifier_key_2_RET" : 220,  "KeyboardSensor_modifier_key_2_SPACE" : 221,  "KeyboardSensor_modifier_key_2_LINE_FEED" : 222,  "KeyboardSensor_modifier_key_2_BACK_SPACE" : 223,  "KeyboardSensor_modifier_key_2_DEL" : 224,  "KeyboardSensor_modifier_key_2_SEMI_COLON" : 225,  "KeyboardSensor_modifier_key_2_PERIOD" : 226,  "KeyboardSensor_modifier_key_2_COMMA" : 227,  "KeyboardSensor_modifier_key_2_QUOTE" : 228,  "KeyboardSensor_modifier_key_2_ACCENT_GRAVE" : 229,  "KeyboardSensor_modifier_key_2_MINUS" : 230,  "KeyboardSensor_modifier_key_2_SLASH" : 232,  "KeyboardSensor_modifier_key_2_BACK_SLASH" : 233,  "KeyboardSensor_modifier_key_2_EQUAL" : 234,  "KeyboardSensor_modifier_key_2_LEFT_BRACKET" : 235,  "KeyboardSensor_modifier_key_2_RIGHT_BRACKET" : 236,  "KeyboardSensor_modifier_key_2_LEFT_ARROW" : 137,  "KeyboardSensor_modifier_key_2_DOWN_ARROW" : 138,  "KeyboardSensor_modifier_key_2_RIGHT_ARROW" : 139,  "KeyboardSensor_modifier_key_2_UP_ARROW" : 140,  "KeyboardSensor_modifier_key_2_NUMPAD_2" : 152,  "KeyboardSensor_modifier_key_2_NUMPAD_4" : 154,  "KeyboardSensor_modifier_key_2_NUMPAD_6" : 156,  "KeyboardSensor_modifier_key_2_NUMPAD_8" : 158,  "KeyboardSensor_modifier_key_2_NUMPAD_1" : 151,  "KeyboardSensor_modifier_key_2_NUMPAD_3" : 153,  "KeyboardSensor_modifier_key_2_NUMPAD_5" : 155,  "KeyboardSensor_modifier_key_2_NUMPAD_7" : 157,  "KeyboardSensor_modifier_key_2_NUMPAD_9" : 159,  "KeyboardSensor_modifier_key_2_NUMPAD_PERIOD" : 199,  "KeyboardSensor_modifier_key_2_NUMPAD_SLASH" : 161,  "KeyboardSensor_modifier_key_2_NUMPAD_ASTERIX" : 160,  "KeyboardSensor_modifier_key_2_NUMPAD_0" : 150,  "KeyboardSensor_modifier_key_2_NUMPAD_MINUS" : 162,  "KeyboardSensor_modifier_key_2_NUMPAD_ENTER" : 163,  "KeyboardSensor_modifier_key_2_NUMPAD_PLUS" : 164,  "KeyboardSensor_modifier_key_2_F1" : 300,  "KeyboardSensor_modifier_key_2_F2" : 301,  "KeyboardSensor_modifier_key_2_F3" : 302,  "KeyboardSensor_modifier_key_2_F4" : 303,  "KeyboardSensor_modifier_key_2_F5" : 304,  "KeyboardSensor_modifier_key_2_F6" : 305,  "KeyboardSensor_modifier_key_2_F7" : 306,  "KeyboardSensor_modifier_key_2_F8" : 307,  "KeyboardSensor_modifier_key_2_F9" : 308,  "KeyboardSensor_modifier_key_2_F10" : 309,  "KeyboardSensor_modifier_key_2_F11" : 310,  "KeyboardSensor_modifier_key_2_F12" : 311,  "KeyboardSensor_modifier_key_2_F13" : 312,  "KeyboardSensor_modifier_key_2_F14" : 313,  "KeyboardSensor_modifier_key_2_F15" : 314,  "KeyboardSensor_modifier_key_2_F16" : 315,  "KeyboardSensor_modifier_key_2_F17" : 316,  "KeyboardSensor_modifier_key_2_F18" : 317,  "KeyboardSensor_modifier_key_2_F19" : 318,  "KeyboardSensor_modifier_key_2_PAUSE" : 165,  "KeyboardSensor_modifier_key_2_INSERT" : 166,  "KeyboardSensor_modifier_key_2_HOME" : 167,  "KeyboardSensor_modifier_key_2_PAGE_UP" : 168,  "KeyboardSensor_modifier_key_2_PAGE_DOWN" : 169,  "KeyboardSensor_modifier_key_2_END" : 170,  "KeyboardSensor_modifier_key_2_MEDIA_PLAY" : 174,  "KeyboardSensor_modifier_key_2_MEDIA_STOP" : 175,  "KeyboardSensor_modifier_key_2_MEDIA_FIRST" : 176,  "KeyboardSensor_modifier_key_2_MEDIA_LAST" : 177,  "KeyboardSensor_modifier_key_2_WINDOW_DEACTIVATE" : 260,  "KeyboardSensor_modifier_key_2_TIMER" : 272,  "KeyboardSensor_modifier_key_2_TIMER0" : 273,  "KeyboardSensor_modifier_key_2_TIMER1" : 274,  "KeyboardSensor_modifier_key_2_TIMER2" : 275,  "KeyboardSensor_modifier_key_2_NDOF_BUTTON_MENU" : 401,  "KeyboardSensor_modifier_key_2_NDOF_BUTTON_FIT" : 402,  "KeyboardSensor_modifier_key_2_NDOF_BUTTON_TOP" : 403,  "KeyboardSensor_modifier_key_2_NDOF_BUTTON_BOTTOM" : 404,  "KeyboardSensor_modifier_key_2_NDOF_BUTTON_LEFT" : 405,  "KeyboardSensor_modifier_key_2_NDOF_BUTTON_RIGHT" : 406,  "KeyboardSensor_modifier_key_2_NDOF_BUTTON_FRONT" : 407,  "KeyboardSensor_modifier_key_2_NDOF_BUTTON_BACK" : 408,  "KeyboardSensor_modifier_key_2_NDOF_BUTTON_ISO1" : 409,  "KeyboardSensor_modifier_key_2_NDOF_BUTTON_ISO2" : 410,  "KeyboardSensor_modifier_key_2_NDOF_BUTTON_ROLL_CW" : 411,  "KeyboardSensor_modifier_key_2_NDOF_BUTTON_ROLL_CCW" : 412,  "KeyboardSensor_modifier_key_2_NDOF_BUTTON_SPIN_CW" : 413,  "KeyboardSensor_modifier_key_2_NDOF_BUTTON_SPIN_CCW" : 414,  "KeyboardSensor_modifier_key_2_NDOF_BUTTON_TILT_CW" : 415,  "KeyboardSensor_modifier_key_2_NDOF_BUTTON_TILT_CCW" : 416,  "KeyboardSensor_modifier_key_2_NDOF_BUTTON_ROTATE" : 417,  "KeyboardSensor_modifier_key_2_NDOF_BUTTON_PANZOOM" : 418,  "KeyboardSensor_modifier_key_2_NDOF_BUTTON_DOMINANT" : 419,  "KeyboardSensor_modifier_key_2_NDOF_BUTTON_PLUS" : 420,  "KeyboardSensor_modifier_key_2_NDOF_BUTTON_MINUS" : 421,  "KeyboardSensor_modifier_key_2_NDOF_BUTTON_1" : 422,  "KeyboardSensor_modifier_key_2_NDOF_BUTTON_2" : 423,  "KeyboardSensor_modifier_key_2_NDOF_BUTTON_3" : 424,  "KeyboardSensor_modifier_key_2_NDOF_BUTTON_4" : 425,  "KeyboardSensor_modifier_key_2_NDOF_BUTTON_5" : 426,  "KeyboardSensor_modifier_key_2_NDOF_BUTTON_6" : 427,  "KeyboardSensor_modifier_key_2_NDOF_BUTTON_7" : 428,  "KeyboardSensor_modifier_key_2_NDOF_BUTTON_8" : 429,  "KeyboardSensor_modifier_key_2_NDOF_BUTTON_9" : 430,  "KeyboardSensor_modifier_key_2_NDOF_BUTTON_10" : 431, 
 "Keyframe_interpolation_CONSTANT" : 0,  "Keyframe_interpolation_LINEAR" : 1,  "Keyframe_interpolation_BEZIER" : 2, 
 "Keyframe_handle_left_type_FREE" : 0,  "Keyframe_handle_left_type_VECTOR" : 2,  "Keyframe_handle_left_type_ALIGNED" : 3,  "Keyframe_handle_left_type_AUTO" : 1,  "Keyframe_handle_left_type_AUTO_CLAMPED" : 4, 
 "Keyframe_handle_right_type_FREE" : 0,  "Keyframe_handle_right_type_VECTOR" : 2,  "Keyframe_handle_right_type_ALIGNED" : 3,  "Keyframe_handle_right_type_AUTO" : 1,  "Keyframe_handle_right_type_AUTO_CLAMPED" : 4, 
 "Keyframe_type_KEYFRAME" : 0,  "Keyframe_type_BREAKDOWN" : 2,  "Keyframe_type_EXTREME" : 1,  "Keyframe_type_JITTER" : 3, 
 "KeyingSet_bl_options_INSERTKEY_NEEDED" : 1,  "KeyingSet_bl_options_INSERTKEY_VISUAL" : 2,  "KeyingSet_bl_options_INSERTKEY_XYZ_TO_RGB" : 32, 
 "KeyingSetInfo_bl_options_INSERTKEY_NEEDED" : 1,  "KeyingSetInfo_bl_options_INSERTKEY_VISUAL" : 2,  "KeyingSetInfo_bl_options_INSERTKEY_XYZ_TO_RGB" : 32, 
 "KeyingSetPath_group_method_NAMED" : 0,  "KeyingSetPath_group_method_NONE" : 1,  "KeyingSetPath_group_method_KEYINGSET" : 2, 
 "KeyingSetPath_id_type_ACTION" : 17217,  "KeyingSetPath_id_type_ARMATURE" : 21057,  "KeyingSetPath_id_type_BRUSH" : 21058,  "KeyingSetPath_id_type_CAMERA" : 16707,  "KeyingSetPath_id_type_CURVE" : 21827,  "KeyingSetPath_id_type_FONT" : 18006,  "KeyingSetPath_id_type_GREASEPENCIL" : 17479,  "KeyingSetPath_id_type_GROUP" : 21063,  "KeyingSetPath_id_type_IMAGE" : 19785,  "KeyingSetPath_id_type_KEY" : 17739,  "KeyingSetPath_id_type_LAMP" : 16716,  "KeyingSetPath_id_type_LIBRARY" : 18764,  "KeyingSetPath_id_type_LATTICE" : 21580,  "KeyingSetPath_id_type_MATERIAL" : 16717,  "KeyingSetPath_id_type_META" : 16973,  "KeyingSetPath_id_type_MESH" : 17741,  "KeyingSetPath_id_type_NODETREE" : 21582,  "KeyingSetPath_id_type_OBJECT" : 16975,  "KeyingSetPath_id_type_PARTICLE" : 16720,  "KeyingSetPath_id_type_SCENE" : 17235,  "KeyingSetPath_id_type_SCREEN" : 21075,  "KeyingSetPath_id_type_SPEAKER" : 19283,  "KeyingSetPath_id_type_SOUND" : 20307,  "KeyingSetPath_id_type_TEXT" : 22612,  "KeyingSetPath_id_type_TEXTURE" : 17748,  "KeyingSetPath_id_type_WORLD" : 20311,  "KeyingSetPath_id_type_WINDOWMANAGER" : 19799, 
 "KeyingSetPath_bl_options_INSERTKEY_NEEDED" : 1,  "KeyingSetPath_bl_options_INSERTKEY_VISUAL" : 2,  "KeyingSetPath_bl_options_INSERTKEY_XYZ_TO_RGB" : 32, 
 "KinematicConstraint_reference_axis_BONE" : 0,  "KinematicConstraint_reference_axis_TARGET" : 16384, 
 "KinematicConstraint_ik_type_COPY_POSE" : 0,  "KinematicConstraint_ik_type_DISTANCE" : 1, 
 "KinematicConstraint_limit_mode_LIMITDIST_INSIDE" : 0,  "KinematicConstraint_limit_mode_LIMITDIST_OUTSIDE" : 1,  "KinematicConstraint_limit_mode_LIMITDIST_ONSURFACE" : 2, 
 "Lamp_type_POINT" : 0,  "Lamp_type_SUN" : 1,  "Lamp_type_SPOT" : 2,  "Lamp_type_HEMI" : 3,  "Lamp_type_AREA" : 4, 
 "LampSkySettings_sky_blend_type_MIX" : 0,  "LampSkySettings_sky_blend_type_ADD" : 1,  "LampSkySettings_sky_blend_type_MULTIPLY" : 2,  "LampSkySettings_sky_blend_type_SUBTRACT" : 3,  "LampSkySettings_sky_blend_type_SCREEN" : 4,  "LampSkySettings_sky_blend_type_DIVIDE" : 5,  "LampSkySettings_sky_blend_type_DIFFERENCE" : 6,  "LampSkySettings_sky_blend_type_DARKEN" : 7,  "LampSkySettings_sky_blend_type_LIGHTEN" : 8,  "LampSkySettings_sky_blend_type_OVERLAY" : 9,  "LampSkySettings_sky_blend_type_DODGE" : 10,  "LampSkySettings_sky_blend_type_BURN" : 11,  "LampSkySettings_sky_blend_type_HUE" : 12,  "LampSkySettings_sky_blend_type_SATURATION" : 13,  "LampSkySettings_sky_blend_type_VALUE" : 14,  "LampSkySettings_sky_blend_type_COLOR" : 15,  "LampSkySettings_sky_blend_type_SOFT_LIGHT" : 16,  "LampSkySettings_sky_blend_type_LINEAR_LIGHT" : 17, 
 "LampSkySettings_sky_color_space_SMPTE" : 0,  "LampSkySettings_sky_color_space_REC709" : 1,  "LampSkySettings_sky_color_space_CIE" : 2, 
 "LampTextureSlot_texture_coords_GLOBAL" : 8,  "LampTextureSlot_texture_coords_VIEW" : 128,  "LampTextureSlot_texture_coords_OBJECT" : 32, 
 "Lattice_interpolation_type_u_KEY_LINEAR" : 0,  "Lattice_interpolation_type_u_KEY_CARDINAL" : 1,  "Lattice_interpolation_type_u_KEY_BSPLINE" : 2, 
 "Lattice_interpolation_type_v_KEY_LINEAR" : 0,  "Lattice_interpolation_type_v_KEY_CARDINAL" : 1,  "Lattice_interpolation_type_v_KEY_BSPLINE" : 2, 
 "Lattice_interpolation_type_w_KEY_LINEAR" : 0,  "Lattice_interpolation_type_w_KEY_CARDINAL" : 1,  "Lattice_interpolation_type_w_KEY_BSPLINE" : 2, 
 "LimitDistanceConstraint_limit_mode_LIMITDIST_INSIDE" : 0,  "LimitDistanceConstraint_limit_mode_LIMITDIST_OUTSIDE" : 1,  "LimitDistanceConstraint_limit_mode_LIMITDIST_ONSURFACE" : 2, 
 "LockedTrackConstraint_lock_axis_LOCK_X" : 0,  "LockedTrackConstraint_lock_axis_LOCK_Y" : 1,  "LockedTrackConstraint_lock_axis_LOCK_Z" : 2, 
 "LockedTrackConstraint_track_axis_TRACK_X" : 0,  "LockedTrackConstraint_track_axis_TRACK_Y" : 1,  "LockedTrackConstraint_track_axis_TRACK_Z" : 2,  "LockedTrackConstraint_track_axis_TRACK_NEGATIVE_X" : 3,  "LockedTrackConstraint_track_axis_TRACK_NEGATIVE_Y" : 4,  "LockedTrackConstraint_track_axis_TRACK_NEGATIVE_Z" : 5, 
 "Macro_bl_options_REGISTER" : 1,  "Macro_bl_options_UNDO" : 2,  "Macro_bl_options_BLOCKING" : 4,  "Macro_bl_options_MACRO" : 8,  "Macro_bl_options_GRAB_POINTER" : 16,  "Macro_bl_options_PRESET" : 32,  "Macro_bl_options_INTERNAL" : 64, 
 "MaintainVolumeConstraint_free_axis_SAMEVOL_X" : 0,  "MaintainVolumeConstraint_free_axis_SAMEVOL_Y" : 1,  "MaintainVolumeConstraint_free_axis_SAMEVOL_Z" : 2, 
 "MarbleTexture_noise_basis_BLENDER_ORIGINAL" : 0,  "MarbleTexture_noise_basis_ORIGINAL_PERLIN" : 1,  "MarbleTexture_noise_basis_IMPROVED_PERLIN" : 2,  "MarbleTexture_noise_basis_VORONOI_F1" : 3,  "MarbleTexture_noise_basis_VORONOI_F2" : 4,  "MarbleTexture_noise_basis_VORONOI_F3" : 5,  "MarbleTexture_noise_basis_VORONOI_F4" : 6,  "MarbleTexture_noise_basis_VORONOI_F2_F1" : 7,  "MarbleTexture_noise_basis_VORONOI_CRACKLE" : 8,  "MarbleTexture_noise_basis_CELL_NOISE" : 14, 
 "MarbleTexture_noise_basis_2_SIN" : 0,  "MarbleTexture_noise_basis_2_SAW" : 1,  "MarbleTexture_noise_basis_2_TRI" : 2, 
 "MarbleTexture_noise_type_SOFT_NOISE" : 0,  "MarbleTexture_noise_type_HARD_NOISE" : 1, 
 "MarbleTexture_marble_type_SOFT" : 0,  "MarbleTexture_marble_type_SHARP" : 1,  "MarbleTexture_marble_type_SHARPER" : 2, 
 "MaskModifier_mode_VERTEX_GROUP" : 0,  "MaskModifier_mode_ARMATURE" : 1, 
 "Material_diffuse_ramp_blend_MIX" : 0,  "Material_diffuse_ramp_blend_ADD" : 1,  "Material_diffuse_ramp_blend_MULTIPLY" : 2,  "Material_diffuse_ramp_blend_SUBTRACT" : 3,  "Material_diffuse_ramp_blend_SCREEN" : 4,  "Material_diffuse_ramp_blend_DIVIDE" : 5,  "Material_diffuse_ramp_blend_DIFFERENCE" : 6,  "Material_diffuse_ramp_blend_DARKEN" : 7,  "Material_diffuse_ramp_blend_LIGHTEN" : 8,  "Material_diffuse_ramp_blend_OVERLAY" : 9,  "Material_diffuse_ramp_blend_DODGE" : 10,  "Material_diffuse_ramp_blend_BURN" : 11,  "Material_diffuse_ramp_blend_HUE" : 12,  "Material_diffuse_ramp_blend_SATURATION" : 13,  "Material_diffuse_ramp_blend_VALUE" : 14,  "Material_diffuse_ramp_blend_COLOR" : 15,  "Material_diffuse_ramp_blend_SOFT_LIGHT" : 16,  "Material_diffuse_ramp_blend_LINEAR_LIGHT" : 17, 
 "Material_specular_ramp_blend_MIX" : 0,  "Material_specular_ramp_blend_ADD" : 1,  "Material_specular_ramp_blend_MULTIPLY" : 2,  "Material_specular_ramp_blend_SUBTRACT" : 3,  "Material_specular_ramp_blend_SCREEN" : 4,  "Material_specular_ramp_blend_DIVIDE" : 5,  "Material_specular_ramp_blend_DIFFERENCE" : 6,  "Material_specular_ramp_blend_DARKEN" : 7,  "Material_specular_ramp_blend_LIGHTEN" : 8,  "Material_specular_ramp_blend_OVERLAY" : 9,  "Material_specular_ramp_blend_DODGE" : 10,  "Material_specular_ramp_blend_BURN" : 11,  "Material_specular_ramp_blend_HUE" : 12,  "Material_specular_ramp_blend_SATURATION" : 13,  "Material_specular_ramp_blend_VALUE" : 14,  "Material_specular_ramp_blend_COLOR" : 15,  "Material_specular_ramp_blend_SOFT_LIGHT" : 16,  "Material_specular_ramp_blend_LINEAR_LIGHT" : 17, 
 "Material_diffuse_ramp_input_SHADER" : 0,  "Material_diffuse_ramp_input_ENERGY" : 1,  "Material_diffuse_ramp_input_NORMAL" : 2,  "Material_diffuse_ramp_input_RESULT" : 3, 
 "Material_diffuse_shader_LAMBERT" : 0,  "Material_diffuse_shader_OREN_NAYAR" : 1,  "Material_diffuse_shader_TOON" : 2,  "Material_diffuse_shader_MINNAERT" : 3,  "Material_diffuse_shader_FRESNEL" : 4, 
 "Material_preview_render_type_FLAT" : 0,  "Material_preview_render_type_SPHERE" : 1,  "Material_preview_render_type_CUBE" : 2,  "Material_preview_render_type_MONKEY" : 3,  "Material_preview_render_type_HAIR" : 10,  "Material_preview_render_type_SPHERE_A" : 4, 
 "Material_shadow_only_type_SHADOW_ONLY_OLD" : 0,  "Material_shadow_only_type_SHADOW_ONLY" : 1,  "Material_shadow_only_type_SHADOW_ONLY_SHADED" : 2, 
 "Material_specular_ramp_input_SHADER" : 0,  "Material_specular_ramp_input_ENERGY" : 1,  "Material_specular_ramp_input_NORMAL" : 2,  "Material_specular_ramp_input_RESULT" : 3, 
 "Material_specular_shader_COOKTORR" : 0,  "Material_specular_shader_PHONG" : 1,  "Material_specular_shader_BLINN" : 2,  "Material_specular_shader_TOON" : 3,  "Material_specular_shader_WARDISO" : 4, 
 "Material_transparency_method_MASK" : 0,  "Material_transparency_method_Z_TRANSPARENCY" : 64,  "Material_transparency_method_RAYTRACE" : 131072, 
 "Material_type_SURFACE" : 0,  "Material_type_WIRE" : 3,  "Material_type_VOLUME" : 2,  "Material_type_HALO" : 1, 
 "MaterialRaytraceMirror_fade_to_FADE_TO_SKY" : 0,  "MaterialRaytraceMirror_fade_to_FADE_TO_MATERIAL" : 1, 
 "MaterialSlot_link_OBJECT" : 1,  "MaterialSlot_link_DATA" : 0, 
 "MaterialTextureSlot_bump_method_BUMP_ORIGINAL" : 0,  "MaterialTextureSlot_bump_method_BUMP_COMPATIBLE" : 128,  "MaterialTextureSlot_bump_method_BUMP_DEFAULT" : 256,  "MaterialTextureSlot_bump_method_BUMP_BEST_QUALITY" : 512, 
 "MaterialTextureSlot_bump_objectspace_BUMP_VIEWSPACE" : 0,  "MaterialTextureSlot_bump_objectspace_BUMP_OBJECTSPACE" : 1024,  "MaterialTextureSlot_bump_objectspace_BUMP_TEXTURESPACE" : 2048, 
 "MaterialTextureSlot_mapping_FLAT" : 0,  "MaterialTextureSlot_mapping_CUBE" : 1,  "MaterialTextureSlot_mapping_TUBE" : 2,  "MaterialTextureSlot_mapping_SPHERE" : 3, 
 "MaterialTextureSlot_normal_map_space_CAMERA" : 0,  "MaterialTextureSlot_normal_map_space_WORLD" : 1,  "MaterialTextureSlot_normal_map_space_OBJECT" : 2,  "MaterialTextureSlot_normal_map_space_TANGENT" : 3, 
 "MaterialTextureSlot_texture_coords_GLOBAL" : 8,  "MaterialTextureSlot_texture_coords_OBJECT" : 32,  "MaterialTextureSlot_texture_coords_UV" : 16,  "MaterialTextureSlot_texture_coords_ORCO" : 1,  "MaterialTextureSlot_texture_coords_STRAND" : 8192,  "MaterialTextureSlot_texture_coords_STICKY" : 256,  "MaterialTextureSlot_texture_coords_WINDOW" : 1024,  "MaterialTextureSlot_texture_coords_NORMAL" : 4,  "MaterialTextureSlot_texture_coords_REFLECTION" : 2,  "MaterialTextureSlot_texture_coords_STRESS" : 16384,  "MaterialTextureSlot_texture_coords_TANGENT" : 4096, 
 "MaterialTextureSlot_mapping_x_NONE" : 0,  "MaterialTextureSlot_mapping_x_X" : 1,  "MaterialTextureSlot_mapping_x_Y" : 2,  "MaterialTextureSlot_mapping_x_Z" : 3, 
 "MaterialTextureSlot_mapping_y_NONE" : 0,  "MaterialTextureSlot_mapping_y_X" : 1,  "MaterialTextureSlot_mapping_y_Y" : 2,  "MaterialTextureSlot_mapping_y_Z" : 3, 
 "MaterialTextureSlot_mapping_z_NONE" : 0,  "MaterialTextureSlot_mapping_z_X" : 1,  "MaterialTextureSlot_mapping_z_Y" : 2,  "MaterialTextureSlot_mapping_z_Z" : 3, 
 "MaterialVolume_light_method_SHADELESS" : 0,  "MaterialVolume_light_method_SHADOWED" : 2,  "MaterialVolume_light_method_SHADED" : 1,  "MaterialVolume_light_method_MULTIPLE_SCATTERING" : 3,  "MaterialVolume_light_method_SHADED_PLUS_MULTIPLE_SCATTERING" : 4, 
 "MaterialVolume_step_method_RANDOMIZED" : 0,  "MaterialVolume_step_method_CONSTANT" : 1, 
 "MeshTextureFace_blend_type_OPAQUE" : 0,  "MeshTextureFace_blend_type_ADD" : 1,  "MeshTextureFace_blend_type_ALPHA" : 2,  "MeshTextureFace_blend_type_CLIPALPHA" : 4, 
 "MessageActuator_body_type_TEXT" : 0,  "MessageActuator_body_type_PROPERTY" : 1, 
 "MetaBall_update_method_UPDATE_ALWAYS" : 0,  "MetaBall_update_method_HALFRES" : 1,  "MetaBall_update_method_FAST" : 2,  "MetaBall_update_method_NEVER" : 3, 
 "MetaElement_type_BALL" : 0,  "MetaElement_type_CAPSULE" : 4,  "MetaElement_type_PLANE" : 5,  "MetaElement_type_ELLIPSOID" : 6,  "MetaElement_type_CUBE" : 7, 
 "Modifier_type_ARRAY" : 12,  "Modifier_type_BEVEL" : 24,  "Modifier_type_BOOLEAN" : 11,  "Modifier_type_BUILD" : 4,  "Modifier_type_DECIMATE" : 6,  "Modifier_type_EDGE_SPLIT" : 13,  "Modifier_type_MASK" : 27,  "Modifier_type_MIRROR" : 5,  "Modifier_type_MULTIRES" : 29,  "Modifier_type_SCREW" : 34,  "Modifier_type_SOLIDIFY" : 33,  "Modifier_type_SUBSURF" : 1,  "Modifier_type_UV_PROJECT" : 15,  "Modifier_type_ARMATURE" : 8,  "Modifier_type_CAST" : 17,  "Modifier_type_CURVE" : 3,  "Modifier_type_DISPLACE" : 14,  "Modifier_type_HOOK" : 9,  "Modifier_type_LATTICE" : 2,  "Modifier_type_MESH_DEFORM" : 18,  "Modifier_type_SHRINKWRAP" : 25,  "Modifier_type_SIMPLE_DEFORM" : 28,  "Modifier_type_SMOOTH" : 16,  "Modifier_type_WARP" : 35,  "Modifier_type_WAVE" : 7,  "Modifier_type_CLOTH" : 22,  "Modifier_type_COLLISION" : 23,  "Modifier_type_EXPLODE" : 21,  "Modifier_type_FLUID_SIMULATION" : 26,  "Modifier_type_PARTICLE_INSTANCE" : 20,  "Modifier_type_PARTICLE_SYSTEM" : 19,  "Modifier_type_SMOKE" : 31,  "Modifier_type_SOFT_BODY" : 10,  "Modifier_type_SURFACE" : 30, 
 "MouseSensor_mouse_event_LEFTCLICK" : 1,  "MouseSensor_mouse_event_MIDDLECLICK" : 2,  "MouseSensor_mouse_event_RIGHTCLICK" : 4,  "MouseSensor_mouse_event_WHEELUP" : 5,  "MouseSensor_mouse_event_WHEELDOWN" : 6,  "MouseSensor_mouse_event_MOVEMENT" : 8,  "MouseSensor_mouse_event_MOUSEOVER" : 16,  "MouseSensor_mouse_event_MOUSEOVERANY" : 32, 
 "MultiresModifier_subdivision_type_CATMULL_CLARK" : 0,  "MultiresModifier_subdivision_type_SIMPLE" : 1, 
 "MusgraveTexture_noise_basis_BLENDER_ORIGINAL" : 0,  "MusgraveTexture_noise_basis_ORIGINAL_PERLIN" : 1,  "MusgraveTexture_noise_basis_IMPROVED_PERLIN" : 2,  "MusgraveTexture_noise_basis_VORONOI_F1" : 3,  "MusgraveTexture_noise_basis_VORONOI_F2" : 4,  "MusgraveTexture_noise_basis_VORONOI_F3" : 5,  "MusgraveTexture_noise_basis_VORONOI_F4" : 6,  "MusgraveTexture_noise_basis_VORONOI_F2_F1" : 7,  "MusgraveTexture_noise_basis_VORONOI_CRACKLE" : 8,  "MusgraveTexture_noise_basis_CELL_NOISE" : 14, 
 "MusgraveTexture_musgrave_type_MULTIFRACTAL" : 0,  "MusgraveTexture_musgrave_type_RIDGED_MULTIFRACTAL" : 1,  "MusgraveTexture_musgrave_type_HYBRID_MULTIFRACTAL" : 2,  "MusgraveTexture_musgrave_type_FBM" : 3,  "MusgraveTexture_musgrave_type_HETERO_TERRAIN" : 4, 
 "NlaStrip_blend_type_REPLACE" : 0,  "NlaStrip_blend_type_ADD" : 1,  "NlaStrip_blend_type_SUBTRACT" : 2,  "NlaStrip_blend_type_MULITPLY" : 3, 
 "NlaStrip_extrapolation_NOTHING" : 2,  "NlaStrip_extrapolation_HOLD" : 0,  "NlaStrip_extrapolation_HOLD_FORWARD" : 1, 
 "NlaStrip_type_CLIP" : 0,  "NlaStrip_type_TRANSITION" : 1,  "NlaStrip_type_META" : 2,  "NlaStrip_type_SOUND" : 3, 
 "NodeSocket_type_VALUE" : 0,  "NodeSocket_type_VECTOR" : 1,  "NodeSocket_type_RGBA" : 2, 
 "NodeTree_type_SHADER" : 0,  "NodeTree_type_COMPOSITE" : 1,  "NodeTree_type_TEXTURE" : 2, 
 "Object_draw_bounds_type_BOX" : 0,  "Object_draw_bounds_type_SPHERE" : 1,  "Object_draw_bounds_type_CYLINDER" : 2,  "Object_draw_bounds_type_CONE" : 3,  "Object_draw_bounds_type_POLYHEDRON" : 4,  "Object_draw_bounds_type_CAPSULE" : 7, 
 "Object_dupli_type_NONE" : 0,  "Object_dupli_type_FRAMES" : 8,  "Object_dupli_type_VERTS" : 16,  "Object_dupli_type_FACES" : 512,  "Object_dupli_type_GROUP" : 256, 
 "Object_empty_draw_type_PLAIN_AXES" : 2,  "Object_empty_draw_type_ARROWS" : 1,  "Object_empty_draw_type_SINGLE_ARROW" : 4,  "Object_empty_draw_type_CIRCLE" : 3,  "Object_empty_draw_type_CUBE" : 5,  "Object_empty_draw_type_SPHERE" : 6,  "Object_empty_draw_type_CONE" : 7,  "Object_empty_draw_type_IMAGE" : 8, 
 "Object_draw_type_BOUNDS" : 1,  "Object_draw_type_WIRE" : 2,  "Object_draw_type_SOLID" : 3,  "Object_draw_type_TEXTURED" : 5, 
 "Object_mode_OBJECT" : 0,  "Object_mode_EDIT" : 1,  "Object_mode_SCULPT" : 2,  "Object_mode_VERTEX_PAINT" : 4,  "Object_mode_WEIGHT_PAINT" : 8,  "Object_mode_TEXTURE_PAINT" : 16,  "Object_mode_PARTICLE_EDIT" : 32,  "Object_mode_POSE" : 64, 
 "Object_parent_type_OBJECT" : 0,  "Object_parent_type_CURVE" : 1,  "Object_parent_type_KEY" : 2,  "Object_parent_type_ARMATURE" : 4,  "Object_parent_type_LATTICE" : 4,  "Object_parent_type_VERTEX" : 5,  "Object_parent_type_VERTEX_3" : 6,  "Object_parent_type_BONE" : 7, 
 "Object_rotation_mode_QUATERNION" : 0,  "Object_rotation_mode_XYZ" : 1,  "Object_rotation_mode_XZY" : 2,  "Object_rotation_mode_YXZ" : 3,  "Object_rotation_mode_YZX" : 4,  "Object_rotation_mode_ZXY" : 5,  "Object_rotation_mode_ZYX" : 6,  "Object_rotation_mode_AXIS_ANGLE" : -1, 
 "Object_track_axis_POS_X" : 0,  "Object_track_axis_POS_Y" : 1,  "Object_track_axis_POS_Z" : 2,  "Object_track_axis_NEG_X" : 3,  "Object_track_axis_NEG_Y" : 4,  "Object_track_axis_NEG_Z" : 5, 
 "Object_type_MESH" : 1,  "Object_type_CURVE" : 2,  "Object_type_SURFACE" : 3,  "Object_type_META" : 5,  "Object_type_FONT" : 4,  "Object_type_ARMATURE" : 25,  "Object_type_LATTICE" : 22,  "Object_type_EMPTY" : 0,  "Object_type_CAMERA" : 11,  "Object_type_LAMP" : 10,  "Object_type_SPEAKER" : 12, 
 "Object_up_axis_X" : 0,  "Object_up_axis_Y" : 1,  "Object_up_axis_Z" : 2, 
 "ObjectActuator_mode_OBJECT_NORMAL" : 0,  "ObjectActuator_mode_OBJECT_SERVO" : 1, 
 "ObstacleFluidSettings_slip_type_NOSLIP" : 512,  "ObstacleFluidSettings_slip_type_PARTIALSLIP" : 1024,  "ObstacleFluidSettings_slip_type_FREESLIP" : 2048, 
 "ObstacleFluidSettings_volume_initialization_VOLUME" : 1,  "ObstacleFluidSettings_volume_initialization_SHELL" : 2,  "ObstacleFluidSettings_volume_initialization_BOTH" : 3, 
 "Operator_bl_options_REGISTER" : 1,  "Operator_bl_options_UNDO" : 2,  "Operator_bl_options_BLOCKING" : 4,  "Operator_bl_options_MACRO" : 8,  "Operator_bl_options_GRAB_POINTER" : 16,  "Operator_bl_options_PRESET" : 32,  "Operator_bl_options_INTERNAL" : 64, 
 "OutflowFluidSettings_volume_initialization_VOLUME" : 1,  "OutflowFluidSettings_volume_initialization_SHELL" : 2,  "OutflowFluidSettings_volume_initialization_BOTH" : 3, 
 "Panel_bl_options_DEFAULT_CLOSED" : 1,  "Panel_bl_options_HIDE_HEADER" : 2, 
 "Panel_bl_region_type_WINDOW" : 0,  "Panel_bl_region_type_HEADER" : 1,  "Panel_bl_region_type_CHANNELS" : 2,  "Panel_bl_region_type_TEMPORARY" : 3,  "Panel_bl_region_type_UI" : 4,  "Panel_bl_region_type_TOOLS" : 5,  "Panel_bl_region_type_TOOL_PROPS" : 6,  "Panel_bl_region_type_PREVIEW" : 7, 
 "Panel_bl_space_type_EMPTY" : 0,  "Panel_bl_space_type_VIEW_3D" : 1,  "Panel_bl_space_type_GRAPH_EDITOR" : 2,  "Panel_bl_space_type_OUTLINER" : 3,  "Panel_bl_space_type_PROPERTIES" : 4,  "Panel_bl_space_type_FILE_BROWSER" : 5,  "Panel_bl_space_type_IMAGE_EDITOR" : 6,  "Panel_bl_space_type_INFO" : 7,  "Panel_bl_space_type_SEQUENCE_EDITOR" : 8,  "Panel_bl_space_type_TEXT_EDITOR" : 9,  "Panel_bl_space_type_AUDIO_WINDOW" : 11,  "Panel_bl_space_type_DOPESHEET_EDITOR" : 12,  "Panel_bl_space_type_NLA_EDITOR" : 13,  "Panel_bl_space_type_SCRIPTS_WINDOW" : 14,  "Panel_bl_space_type_TIMELINE" : 15,  "Panel_bl_space_type_NODE_EDITOR" : 16,  "Panel_bl_space_type_LOGIC_EDITOR" : 17,  "Panel_bl_space_type_CONSOLE" : 18,  "Panel_bl_space_type_USER_PREFERENCES" : 19, 
 "ParentActuator_mode_SETPARENT" : 0,  "ParentActuator_mode_REMOVEPARENT" : 1, 
 "Particle_alive_state_DEAD" : 1,  "Particle_alive_state_UNBORN" : 2,  "Particle_alive_state_ALIVE" : 3,  "Particle_alive_state_DYING" : 4, 
 "ParticleBrush_length_mode_GROW" : 0,  "ParticleBrush_length_mode_SHRINK" : 1, 
 "ParticleBrush_puff_mode_ADD" : 0,  "ParticleBrush_puff_mode_SUB" : 1, 
 "ParticleEdit_select_mode_PATH" : 1,  "ParticleEdit_select_mode_POINT" : 2,  "ParticleEdit_select_mode_TIP" : 4, 
 "ParticleEdit_tool_NONE" : -1,  "ParticleEdit_tool_COMB" : 0,  "ParticleEdit_tool_SMOOTH" : 5,  "ParticleEdit_tool_ADD" : 4,  "ParticleEdit_tool_LENGTH" : 2,  "ParticleEdit_tool_PUFF" : 3,  "ParticleEdit_tool_CUT" : 1,  "ParticleEdit_tool_WEIGHT" : 6, 
 "ParticleEdit_type_PARTICLES" : 0,  "ParticleEdit_type_SOFT_BODY" : 1,  "ParticleEdit_type_CLOTH" : 2, 
 "ParticleInstanceModifier_axis_X" : 0,  "ParticleInstanceModifier_axis_Y" : 1,  "ParticleInstanceModifier_axis_Z" : 2, 
 "ParticleSettings_billboard_align_X" : 0,  "ParticleSettings_billboard_align_Y" : 1,  "ParticleSettings_billboard_align_Z" : 2,  "ParticleSettings_billboard_align_VIEW" : 3,  "ParticleSettings_billboard_align_VEL" : 4, 
 "ParticleSettings_angular_velocity_mode_NONE" : 0,  "ParticleSettings_angular_velocity_mode_SPIN" : 1,  "ParticleSettings_angular_velocity_mode_RAND" : 2, 
 "ParticleSettings_billboard_animation_NONE" : 0,  "ParticleSettings_billboard_animation_AGE" : 1,  "ParticleSettings_billboard_animation_FRAME" : 3,  "ParticleSettings_billboard_animation_ANGLE" : 2, 
 "ParticleSettings_kink_axis_X" : 0,  "ParticleSettings_kink_axis_Y" : 1,  "ParticleSettings_kink_axis_Z" : 2, 
 "ParticleSettings_child_type_NONE" : 0,  "ParticleSettings_child_type_SIMPLE" : 1,  "ParticleSettings_child_type_INTERPOLATED" : 2, 
 "ParticleSettings_distribution_NONE" : 0,  "ParticleSettings_distribution_RENDER" : 10,  "ParticleSettings_distribution_DOT" : 1,  "ParticleSettings_distribution_CIRC" : 2,  "ParticleSettings_distribution_CROSS" : 3,  "ParticleSettings_distribution_AXIS" : 4, 
 "ParticleSettings_draw_color_NONE" : 0,  "ParticleSettings_draw_color_MATERIAL" : 1,  "ParticleSettings_draw_color_VELOCITY" : 2,  "ParticleSettings_draw_color_ACCELERATION" : 3, 
 "ParticleSettings_emit_from_VERT" : 0,  "ParticleSettings_emit_from_FACE" : 1,  "ParticleSettings_emit_from_VOLUME" : 2, 
 "ParticleSettings_integrator_EULER" : 0,  "ParticleSettings_integrator_VERLET" : 3,  "ParticleSettings_integrator_MIDPOINT" : 1,  "ParticleSettings_integrator_RK4" : 2, 
 "ParticleSettings_kink_NO" : 0,  "ParticleSettings_kink_CURL" : 1,  "ParticleSettings_kink_RADIAL" : 2,  "ParticleSettings_kink_WAVE" : 3,  "ParticleSettings_kink_BRAID" : 4, 
 "ParticleSettings_billboard_offset_split_NONE" : 0,  "ParticleSettings_billboard_offset_split_LINEAR" : 1,  "ParticleSettings_billboard_offset_split_RANDOM" : 2, 
 "ParticleSettings_draw_method_NONE" : 0,  "ParticleSettings_draw_method_RENDER" : 10,  "ParticleSettings_draw_method_DOT" : 1,  "ParticleSettings_draw_method_CIRC" : 2,  "ParticleSettings_draw_method_CROSS" : 3,  "ParticleSettings_draw_method_AXIS" : 4, 
 "ParticleSettings_render_type_NONE" : 0,  "ParticleSettings_render_type_HALO" : 1,  "ParticleSettings_render_type_LINE" : 5,  "ParticleSettings_render_type_PATH" : 6,  "ParticleSettings_render_type_OBJECT" : 7,  "ParticleSettings_render_type_GROUP" : 8,  "ParticleSettings_render_type_BILLBOARD" : 9, 
 "ParticleSettings_physics_type_NO" : 0,  "ParticleSettings_physics_type_NEWTON" : 1,  "ParticleSettings_physics_type_KEYED" : 2,  "ParticleSettings_physics_type_BOIDS" : 3,  "ParticleSettings_physics_type_FLUID" : 4, 
 "ParticleSettings_react_event_DEATH" : 0,  "ParticleSettings_react_event_COLLIDE" : 1,  "ParticleSettings_react_event_NEAR" : 2, 
 "ParticleSettings_rotation_mode_NONE" : 0,  "ParticleSettings_rotation_mode_NOR" : 1,  "ParticleSettings_rotation_mode_VEL" : 2,  "ParticleSettings_rotation_mode_GLOB_X" : 3,  "ParticleSettings_rotation_mode_GLOB_Y" : 4,  "ParticleSettings_rotation_mode_GLOB_Z" : 5,  "ParticleSettings_rotation_mode_OB_X" : 6,  "ParticleSettings_rotation_mode_OB_Y" : 7,  "ParticleSettings_rotation_mode_OB_Z" : 8, 
 "ParticleSettings_type_EMITTER" : 0,  "ParticleSettings_type_HAIR" : 2, 
 "ParticleSettingsTextureSlot_mapping_FLAT" : 0,  "ParticleSettingsTextureSlot_mapping_CUBE" : 1,  "ParticleSettingsTextureSlot_mapping_TUBE" : 2,  "ParticleSettingsTextureSlot_mapping_SPHERE" : 3, 
 "ParticleSettingsTextureSlot_texture_coords_GLOBAL" : 8,  "ParticleSettingsTextureSlot_texture_coords_OBJECT" : 32,  "ParticleSettingsTextureSlot_texture_coords_UV" : 16,  "ParticleSettingsTextureSlot_texture_coords_ORCO" : 1,  "ParticleSettingsTextureSlot_texture_coords_STRAND" : 8192, 
 "ParticleSettingsTextureSlot_mapping_x_NONE" : 0,  "ParticleSettingsTextureSlot_mapping_x_X" : 1,  "ParticleSettingsTextureSlot_mapping_x_Y" : 2,  "ParticleSettingsTextureSlot_mapping_x_Z" : 3, 
 "ParticleSettingsTextureSlot_mapping_y_NONE" : 0,  "ParticleSettingsTextureSlot_mapping_y_X" : 1,  "ParticleSettingsTextureSlot_mapping_y_Y" : 2,  "ParticleSettingsTextureSlot_mapping_y_Z" : 3, 
 "ParticleSettingsTextureSlot_mapping_z_NONE" : 0,  "ParticleSettingsTextureSlot_mapping_z_X" : 1,  "ParticleSettingsTextureSlot_mapping_z_Y" : 2,  "ParticleSettingsTextureSlot_mapping_z_Z" : 3, 
 "ParticleTarget_alliance_FRIEND" : 1,  "ParticleTarget_alliance_NEUTRAL" : 0,  "ParticleTarget_alliance_ENEMY" : 2, 
 "PivotConstraint_rotation_range_ALWAYS_ACTIVE" : -1,  "PivotConstraint_rotation_range_NX" : 0,  "PivotConstraint_rotation_range_NY" : 1,  "PivotConstraint_rotation_range_NZ" : 2,  "PivotConstraint_rotation_range_X" : 3,  "PivotConstraint_rotation_range_Y" : 4,  "PivotConstraint_rotation_range_Z" : 5, 
 "PointCache_compression_NO" : 0,  "PointCache_compression_LIGHT" : 1,  "PointCache_compression_HEAVY" : 2, 
 "PointDensity_color_source_CONSTANT" : 0,  "PointDensity_color_source_PARTICLE_AGE" : 1,  "PointDensity_color_source_PARTICLE_SPEED" : 2,  "PointDensity_color_source_PARTICLE_VELOCITY" : 3, 
 "PointDensity_falloff_STANDARD" : 0,  "PointDensity_falloff_SMOOTH" : 1,  "PointDensity_falloff_SOFT" : 2,  "PointDensity_falloff_CONSTANT" : 3,  "PointDensity_falloff_ROOT" : 4,  "PointDensity_falloff_PARTICLE_AGE" : 5,  "PointDensity_falloff_PARTICLE_VELOCITY" : 6, 
 "PointDensity_noise_basis_BLENDER_ORIGINAL" : 0,  "PointDensity_noise_basis_ORIGINAL_PERLIN" : 1,  "PointDensity_noise_basis_IMPROVED_PERLIN" : 2,  "PointDensity_noise_basis_VORONOI_F1" : 3,  "PointDensity_noise_basis_VORONOI_F2" : 4,  "PointDensity_noise_basis_VORONOI_F3" : 5,  "PointDensity_noise_basis_VORONOI_F4" : 6,  "PointDensity_noise_basis_VORONOI_F2_F1" : 7,  "PointDensity_noise_basis_VORONOI_CRACKLE" : 8,  "PointDensity_noise_basis_CELL_NOISE" : 14, 
 "PointDensity_particle_cache_space_OBJECT_LOCATION" : 0,  "PointDensity_particle_cache_space_OBJECT_SPACE" : 1,  "PointDensity_particle_cache_space_WORLD_SPACE" : 2, 
 "PointDensity_point_source_PARTICLE_SYSTEM" : 0,  "PointDensity_point_source_OBJECT" : 1, 
 "PointDensity_turbulence_influence_STATIC" : 0,  "PointDensity_turbulence_influence_PARTICLE_VELOCITY" : 1,  "PointDensity_turbulence_influence_PARTICLE_AGE" : 2,  "PointDensity_turbulence_influence_GLOBAL_TIME" : 3, 
 "PointDensity_vertex_cache_space_OBJECT_LOCATION" : 0,  "PointDensity_vertex_cache_space_OBJECT_SPACE" : 1,  "PointDensity_vertex_cache_space_WORLD_SPACE" : 2, 
 "PointLamp_falloff_type_CONSTANT" : 0,  "PointLamp_falloff_type_INVERSE_LINEAR" : 1,  "PointLamp_falloff_type_INVERSE_SQUARE" : 2,  "PointLamp_falloff_type_CUSTOM_CURVE" : 3,  "PointLamp_falloff_type_LINEAR_QUADRATIC_WEIGHTED" : 4, 
 "PointLamp_shadow_method_NOSHADOW" : 0,  "PointLamp_shadow_method_RAY_SHADOW" : 8192, 
 "PointLamp_shadow_ray_sample_method_ADAPTIVE_QMC" : 1,  "PointLamp_shadow_ray_sample_method_CONSTANT_QMC" : 2, 
 "Pose_ik_solver_LEGACY" : 0,  "Pose_ik_solver_ITASC" : 1, 
 "PoseBone_rotation_mode_QUATERNION" : 0,  "PoseBone_rotation_mode_XYZ" : 1,  "PoseBone_rotation_mode_XZY" : 2,  "PoseBone_rotation_mode_YXZ" : 3,  "PoseBone_rotation_mode_YZX" : 4,  "PoseBone_rotation_mode_ZXY" : 5,  "PoseBone_rotation_mode_ZYX" : 6,  "PoseBone_rotation_mode_AXIS_ANGLE" : -1, 
 "Property_subtype_NONE" : 0,  "Property_subtype_FILE_PATH" : 1,  "Property_subtype_DIRECTORY_PATH" : 2,  "Property_subtype_UNSIGNED" : 13,  "Property_subtype_PERCENTAGE" : 14,  "Property_subtype_FACTOR" : 15,  "Property_subtype_ANGLE" : 327696,  "Property_subtype_TIME" : 393233,  "Property_subtype_DISTANCE" : 65554,  "Property_subtype_COLOR" : 20,  "Property_subtype_TRANSLATION" : 65557,  "Property_subtype_DIRECTION" : 22,  "Property_subtype_MATRIX" : 25,  "Property_subtype_EULER" : 327706,  "Property_subtype_QUATERNION" : 27,  "Property_subtype_XYZ" : 29,  "Property_subtype_COLOR_GAMMA" : 30,  "Property_subtype_COORDINATES" : 31,  "Property_subtype_LAYER" : 40,  "Property_subtype_LAYER_MEMBERSHIP" : 41, 
 "Property_type_BOOLEAN" : 0,  "Property_type_INT" : 1,  "Property_type_FLOAT" : 2,  "Property_type_STRING" : 3,  "Property_type_ENUM" : 4,  "Property_type_POINTER" : 5,  "Property_type_COLLECTION" : 6, 
 "Property_unit_NONE" : 0,  "Property_unit_LENGTH" : 65536,  "Property_unit_AREA" : 131072,  "Property_unit_VOLUME" : 196608,  "Property_unit_ROTATION" : 327680,  "Property_unit_TIME" : 393216,  "Property_unit_VELOCITY" : 458752,  "Property_unit_ACCELERATION" : 524288, 
 "PropertyActuator_mode_ASSIGN" : 0,  "PropertyActuator_mode_ADD" : 1,  "PropertyActuator_mode_COPY" : 2,  "PropertyActuator_mode_TOGGLE" : 3, 
 "PropertySensor_evaluation_type_PROPEQUAL" : 0,  "PropertySensor_evaluation_type_PROPNEQUAL" : 1,  "PropertySensor_evaluation_type_PROPINTERVAL" : 2,  "PropertySensor_evaluation_type_PROPCHANGED" : 3, 
 "PythonController_mode_SCRIPT" : 0,  "PythonController_mode_MODULE" : 1, 
 "RadarSensor_axis_XAXIS" : 0,  "RadarSensor_axis_YAXIS" : 1,  "RadarSensor_axis_ZAXIS" : 2,  "RadarSensor_axis_NEGXAXIS" : 3,  "RadarSensor_axis_NEGYAXIS" : 4,  "RadarSensor_axis_NEGZAXIS" : 5, 
 "RandomActuator_distribution_BOOL_CONSTANT" : 0,  "RandomActuator_distribution_BOOL_UNIFORM" : 1,  "RandomActuator_distribution_BOOL_BERNOUILLI" : 2,  "RandomActuator_distribution_INT_CONSTANT" : 3,  "RandomActuator_distribution_INT_UNIFORM" : 4,  "RandomActuator_distribution_INT_POISSON" : 5,  "RandomActuator_distribution_FLOAT_CONSTANT" : 6,  "RandomActuator_distribution_FLOAT_UNIFORM" : 7,  "RandomActuator_distribution_FLOAT_NORMAL" : 8,  "RandomActuator_distribution_FLOAT_NEGATIVE_EXPONENTIAL" : 9, 
 "RaySensor_axis_XAXIS" : 1,  "RaySensor_axis_YAXIS" : 0,  "RaySensor_axis_ZAXIS" : 2,  "RaySensor_axis_NEGXAXIS" : 3,  "RaySensor_axis_NEGYAXIS" : 4,  "RaySensor_axis_NEGZAXIS" : 5, 
 "RaySensor_ray_type_PROPERTY" : 0,  "RaySensor_ray_type_MATERIAL" : 1, 
 "Region_type_WINDOW" : 0,  "Region_type_HEADER" : 1,  "Region_type_CHANNELS" : 2,  "Region_type_TEMPORARY" : 3,  "Region_type_UI" : 4,  "Region_type_TOOLS" : 5,  "Region_type_TOOL_PROPS" : 6,  "Region_type_PREVIEW" : 7, 
 "RegionView3D_view_perspective_PERSP" : 1,  "RegionView3D_view_perspective_ORTHO" : 0,  "RegionView3D_view_perspective_CAMERA" : 2, 
 "RenderPass_type_COMBINED" : 1,  "RenderPass_type_Z" : 2,  "RenderPass_type_COLOR" : 4,  "RenderPass_type_DIFFUSE" : 8,  "RenderPass_type_SPECULAR" : 16,  "RenderPass_type_SHADOW" : 32,  "RenderPass_type_AO" : 64,  "RenderPass_type_REFLECTION" : 128,  "RenderPass_type_NORMAL" : 256,  "RenderPass_type_VECTOR" : 512,  "RenderPass_type_REFRACTION" : 1024,  "RenderPass_type_OBJECT_INDEX" : 2048,  "RenderPass_type_UV" : 4096,  "RenderPass_type_MIST" : 16384,  "RenderPass_type_EMIT" : 65536,  "RenderPass_type_ENVIRONMENT" : 131072,  "RenderPass_type_MATERIAL_INDEX" : 262144, 
 "RenderSettings_alpha_mode_SKY" : 0,  "RenderSettings_alpha_mode_PREMUL" : 1,  "RenderSettings_alpha_mode_STRAIGHT" : 2, 
 "RenderSettings_bake_aa_mode_5" : 5,  "RenderSettings_bake_aa_mode_8" : 8,  "RenderSettings_bake_aa_mode_11" : 11,  "RenderSettings_bake_aa_mode_16" : 16, 
 "RenderSettings_antialiasing_samples_5" : 5,  "RenderSettings_antialiasing_samples_8" : 8,  "RenderSettings_antialiasing_samples_11" : 11,  "RenderSettings_antialiasing_samples_16" : 16, 
 "RenderSettings_ffmpeg_audio_channels_MONO" : 1,  "RenderSettings_ffmpeg_audio_channels_STEREO" : 2,  "RenderSettings_ffmpeg_audio_channels_SURROUND4" : 4,  "RenderSettings_ffmpeg_audio_channels_SURROUND51" : 6,  "RenderSettings_ffmpeg_audio_channels_SURROUND71" : 8, 
 "RenderSettings_bake_type_FULL" : 1,  "RenderSettings_bake_type_AO" : 2,  "RenderSettings_bake_type_SHADOW" : 6,  "RenderSettings_bake_type_NORMALS" : 3,  "RenderSettings_bake_type_TEXTURE" : 4,  "RenderSettings_bake_type_DISPLACEMENT" : 5,  "RenderSettings_bake_type_EMIT" : 12,  "RenderSettings_bake_type_ALPHA" : 11,  "RenderSettings_bake_type_MIRROR_INTENSITY" : 10,  "RenderSettings_bake_type_MIRROR_COLOR" : 9,  "RenderSettings_bake_type_SPEC_INTENSITY" : 8,  "RenderSettings_bake_type_SPEC_COLOR" : 7, 
 "RenderSettings_exr_codec_NONE" : 0,  "RenderSettings_exr_codec_PXR24" : 1,  "RenderSettings_exr_codec_ZIP" : 2,  "RenderSettings_exr_codec_PIZ" : 3,  "RenderSettings_exr_codec_RLE" : 4, 
 "RenderSettings_color_mode_BW" : 8,  "RenderSettings_color_mode_RGB" : 24,  "RenderSettings_color_mode_RGBA" : 32, 
 "RenderSettings_jpeg2k_depth_8" : 8,  "RenderSettings_jpeg2k_depth_12" : 12,  "RenderSettings_jpeg2k_depth_16" : 16, 
 "RenderSettings_display_mode_SCREEN" : 0,  "RenderSettings_display_mode_AREA" : 1,  "RenderSettings_display_mode_WINDOW" : 2,  "RenderSettings_display_mode_NONE" : 3, 
 "RenderSettings_engine_BLENDER_RENDER" : 0, 
 "RenderSettings_field_order_EVEN_FIRST" : 0,  "RenderSettings_field_order_ODD_FIRST" : 8192, 
 "RenderSettings_file_format_BMP" : 20,  "RenderSettings_file_format_DDS" : 29,  "RenderSettings_file_format_IRIS" : 1,  "RenderSettings_file_format_PNG" : 17,  "RenderSettings_file_format_JPEG" : 4,  "RenderSettings_file_format_JPEG2000" : 30,  "RenderSettings_file_format_TARGA" : 0,  "RenderSettings_file_format_TARGA_RAW" : 14,  "RenderSettings_file_format_CINEON" : 26,  "RenderSettings_file_format_DPX" : 27,  "RenderSettings_file_format_MULTILAYER" : 28,  "RenderSettings_file_format_OPEN_EXR" : 23,  "RenderSettings_file_format_HDR" : 21,  "RenderSettings_file_format_TIFF" : 22,  "RenderSettings_file_format_AVI_JPEG" : 16,  "RenderSettings_file_format_AVI_RAW" : 15,  "RenderSettings_file_format_FRAMESERVER" : 25, 
 "RenderSettings_bake_normal_space_CAMERA" : 0,  "RenderSettings_bake_normal_space_WORLD" : 1,  "RenderSettings_bake_normal_space_OBJECT" : 2,  "RenderSettings_bake_normal_space_TANGENT" : 3, 
 "RenderSettings_octree_resolution_64" : 64,  "RenderSettings_octree_resolution_128" : 128,  "RenderSettings_octree_resolution_256" : 256,  "RenderSettings_octree_resolution_512" : 512, 
 "RenderSettings_pixel_filter_type_BOX" : 0,  "RenderSettings_pixel_filter_type_TENT" : 1,  "RenderSettings_pixel_filter_type_QUADRATIC" : 2,  "RenderSettings_pixel_filter_type_CUBIC" : 3,  "RenderSettings_pixel_filter_type_CATMULLROM" : 4,  "RenderSettings_pixel_filter_type_GAUSSIAN" : 5,  "RenderSettings_pixel_filter_type_MITCHELL" : 6, 
 "RenderSettings_jpeg2k_preset_NO_PRESET" : 0,  "RenderSettings_jpeg2k_preset_CINE_24FPS" : 1,  "RenderSettings_jpeg2k_preset_CINE_48FPS" : 2,  "RenderSettings_jpeg2k_preset_CINE_24FPS_4K" : 3,  "RenderSettings_jpeg2k_preset_CINE_SCOPE_24FPS" : 4,  "RenderSettings_jpeg2k_preset_CINE_SCOPE_48FPS" : 5,  "RenderSettings_jpeg2k_preset_CINE_FLAT_24FPS" : 6,  "RenderSettings_jpeg2k_preset_CINE_FLAT_48FPS" : 7, 
 "RenderSettings_bake_quad_split_AUTO" : 0,  "RenderSettings_bake_quad_split_FIXED" : 1,  "RenderSettings_bake_quad_split_FIXED_ALT" : 2, 
 "RenderSettings_raytrace_method_AUTO" : 0,  "RenderSettings_raytrace_method_OCTREE" : 1,  "RenderSettings_raytrace_method_BLIBVH" : 2,  "RenderSettings_raytrace_method_VBVH" : 3,  "RenderSettings_raytrace_method_SIMD_SVBVH" : 4,  "RenderSettings_raytrace_method_SIMD_QBVH" : 5, 
 "RenderSettings_sequencer_gl_preview_BOUNDBOX" : 1,  "RenderSettings_sequencer_gl_preview_WIREFRAME" : 2,  "RenderSettings_sequencer_gl_preview_SOLID" : 3,  "RenderSettings_sequencer_gl_preview_TEXTURED" : 5, 
 "RenderSettings_sequencer_gl_render_BOUNDBOX" : 1,  "RenderSettings_sequencer_gl_render_WIREFRAME" : 2,  "RenderSettings_sequencer_gl_render_SOLID" : 3,  "RenderSettings_sequencer_gl_render_TEXTURED" : 5, 
 "RenderSettings_threads_mode_AUTO" : 0,  "RenderSettings_threads_mode_FIXED" : 524288, 
 "RigidBodyJointConstraint_pivot_type_BALL" : 1,  "RigidBodyJointConstraint_pivot_type_HINGE" : 2,  "RigidBodyJointConstraint_pivot_type_CONE_TWIST" : 4,  "RigidBodyJointConstraint_pivot_type_GENERIC_6_DOF" : 12, 
 "Scene_audio_distance_model_NONE" : 0,  "Scene_audio_distance_model_INVERSE" : 1,  "Scene_audio_distance_model_INVERSE_CLAMPED" : 2,  "Scene_audio_distance_model_LINEAR" : 3,  "Scene_audio_distance_model_LINEAR_CLAMPED" : 4,  "Scene_audio_distance_model_EXPONENT" : 5,  "Scene_audio_distance_model_EXPONENT_CLAMPED" : 6, 
 "Scene_sync_mode_NONE" : 0,  "Scene_sync_mode_FRAME_DROP" : 8,  "Scene_sync_mode_AUDIO_SYNC" : 2, 
 "SceneActuator_mode_RESTART" : 0,  "SceneActuator_mode_SET" : 1,  "SceneActuator_mode_CAMERA" : 2,  "SceneActuator_mode_ADDFRONT" : 3,  "SceneActuator_mode_ADDBACK" : 4,  "SceneActuator_mode_REMOVE" : 5,  "SceneActuator_mode_SUSPEND" : 6,  "SceneActuator_mode_RESUME" : 7, 
 "SceneGameData_dome_mode_FISHEYE" : 1,  "SceneGameData_dome_mode_TRUNCATED_FRONT" : 2,  "SceneGameData_dome_mode_TRUNCATED_REAR" : 3,  "SceneGameData_dome_mode_ENVMAP" : 4,  "SceneGameData_dome_mode_PANORAM_SPH" : 5, 
 "SceneGameData_frame_type_LETTERBOX" : 0,  "SceneGameData_frame_type_EXTEND" : 1,  "SceneGameData_frame_type_SCALE" : 2, 
 "SceneGameData_material_mode_TEXTURE_FACE" : 0,  "SceneGameData_material_mode_MULTITEXTURE" : 1,  "SceneGameData_material_mode_GLSL" : 2, 
 "SceneGameData_physics_engine_NONE" : 0,  "SceneGameData_physics_engine_BULLET" : 5, 
 "SceneGameData_stereo_mode_QUADBUFFERED" : 2,  "SceneGameData_stereo_mode_ABOVEBELOW" : 3,  "SceneGameData_stereo_mode_INTERLACED" : 4,  "SceneGameData_stereo_mode_ANAGLYPH" : 5,  "SceneGameData_stereo_mode_SIDEBYSIDE" : 6,  "SceneGameData_stereo_mode_VINTERLACE" : 7, 
 "SceneGameData_stereo_NONE" : 1,  "SceneGameData_stereo_STEREO" : 2,  "SceneGameData_stereo_DOME" : 3, 
 "Scopes_waveform_mode_LUMA" : 0,  "Scopes_waveform_mode_RGB" : 1,  "Scopes_waveform_mode_YCBCR601" : 2,  "Scopes_waveform_mode_YCBCR709" : 3,  "Scopes_waveform_mode_YCBCRJPG" : 4, 
 "ScrewModifier_axis_X" : 0,  "ScrewModifier_axis_Y" : 1,  "ScrewModifier_axis_Z" : 2, 
 "Sensor_type_ACTUATOR" : 12,  "Sensor_type_ALWAYS" : 0,  "Sensor_type_ARMATURE" : 14,  "Sensor_type_COLLISION" : 6,  "Sensor_type_DELAY" : 13,  "Sensor_type_JOYSTICK" : 11,  "Sensor_type_KEYBOARD" : 3,  "Sensor_type_MESSAGE" : 10,  "Sensor_type_MOUSE" : 5,  "Sensor_type_NEAR" : 2,  "Sensor_type_PROPERTY" : 4,  "Sensor_type_RADAR" : 7,  "Sensor_type_RANDOM" : 8,  "Sensor_type_RAY" : 9,  "Sensor_type_TOUCH" : 1, 
 "Sequence_blend_type_REPLACE" : 0,  "Sequence_blend_type_CROSS" : 8,  "Sequence_blend_type_ADD" : 9,  "Sequence_blend_type_SUBTRACT" : 10,  "Sequence_blend_type_ALPHA_OVER" : 11,  "Sequence_blend_type_ALPHA_UNDER" : 12,  "Sequence_blend_type_GAMMA_CROSS" : 13,  "Sequence_blend_type_MULTIPLY" : 14,  "Sequence_blend_type_OVER_DROP" : 15, 
 "Sequence_type_IMAGE" : 0,  "Sequence_type_META" : 1,  "Sequence_type_SCENE" : 2,  "Sequence_type_MOVIE" : 3,  "Sequence_type_SOUND" : 4,  "Sequence_type_CROSS" : 8,  "Sequence_type_ADD" : 9,  "Sequence_type_SUBTRACT" : 10,  "Sequence_type_ALPHA_OVER" : 11,  "Sequence_type_ALPHA_UNDER" : 12,  "Sequence_type_GAMMA_CROSS" : 13,  "Sequence_type_MULTIPLY" : 14,  "Sequence_type_OVER_DROP" : 15,  "Sequence_type_PLUGIN" : 24,  "Sequence_type_WIPE" : 25,  "Sequence_type_GLOW" : 26,  "Sequence_type_TRANSFORM" : 27,  "Sequence_type_COLOR" : 28,  "Sequence_type_SPEED" : 29,  "Sequence_type_MULTICAM" : 30,  "Sequence_type_ADJUSTMENT" : 31, 
 "SequenceProxy_timecode_NONE" : 0,  "SequenceProxy_timecode_RECORD_RUN" : 1,  "SequenceProxy_timecode_FREE_RUN" : 2,  "SequenceProxy_timecode_FREE_RUN_REC_DATE" : 4, 
 "ShaderNode_type_OUTPUT" : 1,  "ShaderNode_type_MATERIAL" : 100,  "ShaderNode_type_RGB" : 101,  "ShaderNode_type_VALUE" : 102,  "ShaderNode_type_MIX_RGB" : 103,  "ShaderNode_type_VALTORGB" : 104,  "ShaderNode_type_RGBTOBW" : 105,  "ShaderNode_type_TEXTURE" : 106,  "ShaderNode_type_NORMAL" : 107,  "ShaderNode_type_GEOMETRY" : 108,  "ShaderNode_type_MAPPING" : 109,  "ShaderNode_type_CURVE_VEC" : 110,  "ShaderNode_type_CURVE_RGB" : 111,  "ShaderNode_type_CAMERA" : 114,  "ShaderNode_type_MATH" : 115,  "ShaderNode_type_VECT_MATH" : 116,  "ShaderNode_type_SQUEEZE" : 117,  "ShaderNode_type_MATERIAL_EXT" : 118,  "ShaderNode_type_INVERT" : 119,  "ShaderNode_type_SEPRGB" : 120,  "ShaderNode_type_COMBRGB" : 121,  "ShaderNode_type_HUE_SAT" : 122,  "ShaderNode_type_SCRIPT" : 123,  "ShaderNode_type_GROUP" : 2, 
 "ShaderNodeMath_operation_ADD" : 0,  "ShaderNodeMath_operation_SUBTRACT" : 1,  "ShaderNodeMath_operation_MULTIPLY" : 2,  "ShaderNodeMath_operation_DIVIDE" : 3,  "ShaderNodeMath_operation_SINE" : 4,  "ShaderNodeMath_operation_COSINE" : 5,  "ShaderNodeMath_operation_TANGENT" : 6,  "ShaderNodeMath_operation_ARCSINE" : 7,  "ShaderNodeMath_operation_ARCCOSINE" : 8,  "ShaderNodeMath_operation_ARCTANGENT" : 9,  "ShaderNodeMath_operation_POWER" : 10,  "ShaderNodeMath_operation_LOGARITHM" : 11,  "ShaderNodeMath_operation_MINIMUM" : 12,  "ShaderNodeMath_operation_MAXIMUM" : 13,  "ShaderNodeMath_operation_ROUND" : 14,  "ShaderNodeMath_operation_LESS_THAN" : 15,  "ShaderNodeMath_operation_GREATER_THAN" : 16, 
 "ShaderNodeMixRGB_blend_type_MIX" : 0,  "ShaderNodeMixRGB_blend_type_ADD" : 1,  "ShaderNodeMixRGB_blend_type_MULTIPLY" : 2,  "ShaderNodeMixRGB_blend_type_SUBTRACT" : 3,  "ShaderNodeMixRGB_blend_type_SCREEN" : 4,  "ShaderNodeMixRGB_blend_type_DIVIDE" : 5,  "ShaderNodeMixRGB_blend_type_DIFFERENCE" : 6,  "ShaderNodeMixRGB_blend_type_DARKEN" : 7,  "ShaderNodeMixRGB_blend_type_LIGHTEN" : 8,  "ShaderNodeMixRGB_blend_type_OVERLAY" : 9,  "ShaderNodeMixRGB_blend_type_DODGE" : 10,  "ShaderNodeMixRGB_blend_type_BURN" : 11,  "ShaderNodeMixRGB_blend_type_HUE" : 12,  "ShaderNodeMixRGB_blend_type_SATURATION" : 13,  "ShaderNodeMixRGB_blend_type_VALUE" : 14,  "ShaderNodeMixRGB_blend_type_COLOR" : 15,  "ShaderNodeMixRGB_blend_type_SOFT_LIGHT" : 16,  "ShaderNodeMixRGB_blend_type_LINEAR_LIGHT" : 17, 
 "ShaderNodeVectorMath_operation_ADD" : 0,  "ShaderNodeVectorMath_operation_SUBTRACT" : 1,  "ShaderNodeVectorMath_operation_AVERAGE" : 2,  "ShaderNodeVectorMath_operation_DOT_PRODUCT" : 3,  "ShaderNodeVectorMath_operation_CROSS_PRODUCT" : 4,  "ShaderNodeVectorMath_operation_NORMALIZE" : 5, 
 "ShapeActionActuator_mode_PLAY" : 0,  "ShapeActionActuator_mode_PINGPONG" : 1,  "ShapeActionActuator_mode_FLIPPER" : 2,  "ShapeActionActuator_mode_LOOPSTOP" : 3,  "ShapeActionActuator_mode_LOOPEND" : 4,  "ShapeActionActuator_mode_PROPERTY" : 6, 
 "ShapeKey_interpolation_KEY_LINEAR" : 0,  "ShapeKey_interpolation_KEY_CARDINAL" : 1,  "ShapeKey_interpolation_KEY_BSPLINE" : 2, 
 "ShrinkwrapConstraint_shrinkwrap_type_NEAREST_SURFACE" : 0,  "ShrinkwrapConstraint_shrinkwrap_type_PROJECT" : 1,  "ShrinkwrapConstraint_shrinkwrap_type_NEAREST_VERTEX" : 2, 
 "ShrinkwrapModifier_cull_face_OFF" : 0,  "ShrinkwrapModifier_cull_face_FRONT" : 8,  "ShrinkwrapModifier_cull_face_BACK" : 16, 
 "ShrinkwrapModifier_wrap_method_NEAREST_SURFACEPOINT" : 0,  "ShrinkwrapModifier_wrap_method_PROJECT" : 1,  "ShrinkwrapModifier_wrap_method_NEAREST_VERTEX" : 2, 
 "SimpleDeformModifier_deform_method_TWIST" : 1,  "SimpleDeformModifier_deform_method_BEND" : 2,  "SimpleDeformModifier_deform_method_TAPER" : 3,  "SimpleDeformModifier_deform_method_STRETCH" : 4, 
 "SmokeDomainSettings_collision_extents_BORDEROPEN" : 0,  "SmokeDomainSettings_collision_extents_BORDERVERTICAL" : 1,  "SmokeDomainSettings_collision_extents_BORDERCLOSED" : 2, 
 "SmokeDomainSettings_point_cache_compress_type_CACHELIGHT" : 0,  "SmokeDomainSettings_point_cache_compress_type_CACHEHEAVY" : 1, 
 "SmokeDomainSettings_noise_type_NOISEWAVE" : 1, 
 "SmokeModifier_smoke_type_NONE" : 0,  "SmokeModifier_smoke_type_DOMAIN" : 1,  "SmokeModifier_smoke_type_FLOW" : 2,  "SmokeModifier_smoke_type_COLLISION" : 4, 
 "SoftBodySettings_aerodynamics_type_SIMPLE" : 0,  "SoftBodySettings_aerodynamics_type_LIFT_FORCE" : 1, 
 "SoftBodySettings_collision_type_MANUAL" : 0,  "SoftBodySettings_collision_type_AVERAGE" : 1,  "SoftBodySettings_collision_type_MINIMAL" : 2,  "SoftBodySettings_collision_type_MAXIMAL" : 3,  "SoftBodySettings_collision_type_MINMAX" : 4, 
 "SoundActuator_mode_PLAYSTOP" : 0,  "SoundActuator_mode_PLAYEND" : 1,  "SoundActuator_mode_LOOPSTOP" : 2,  "SoundActuator_mode_LOOPEND" : 3,  "SoundActuator_mode_LOOPBIDIRECTIONAL" : 4,  "SoundActuator_mode_LOOPBIDIRECTIONALSTOP" : 5, 
 "Space_type_EMPTY" : 0,  "Space_type_VIEW_3D" : 1,  "Space_type_GRAPH_EDITOR" : 2,  "Space_type_OUTLINER" : 3,  "Space_type_PROPERTIES" : 4,  "Space_type_FILE_BROWSER" : 5,  "Space_type_IMAGE_EDITOR" : 6,  "Space_type_INFO" : 7,  "Space_type_SEQUENCE_EDITOR" : 8,  "Space_type_TEXT_EDITOR" : 9,  "Space_type_AUDIO_WINDOW" : 11,  "Space_type_DOPESHEET_EDITOR" : 12,  "Space_type_NLA_EDITOR" : 13,  "Space_type_SCRIPTS_WINDOW" : 14,  "Space_type_TIMELINE" : 15,  "Space_type_NODE_EDITOR" : 16,  "Space_type_LOGIC_EDITOR" : 17,  "Space_type_CONSOLE" : 18,  "Space_type_USER_PREFERENCES" : 19, 
 "SpaceDopeSheetEditor_auto_snap_NONE" : 0,  "SpaceDopeSheetEditor_auto_snap_STEP" : 1,  "SpaceDopeSheetEditor_auto_snap_FRAME" : 2,  "SpaceDopeSheetEditor_auto_snap_MARKER" : 3, 
 "SpaceDopeSheetEditor_mode_DOPESHEET" : 3,  "SpaceDopeSheetEditor_mode_ACTION" : 0,  "SpaceDopeSheetEditor_mode_SHAPEKEY" : 1,  "SpaceDopeSheetEditor_mode_GPENCIL" : 2, 
 "SpaceGraphEditor_auto_snap_NONE" : 0,  "SpaceGraphEditor_auto_snap_STEP" : 1,  "SpaceGraphEditor_auto_snap_FRAME" : 2,  "SpaceGraphEditor_auto_snap_MARKER" : 3, 
 "SpaceGraphEditor_mode_FCURVES" : 0,  "SpaceGraphEditor_mode_DRIVERS" : 1, 
 "SpaceGraphEditor_pivot_point_BOUNDING_BOX_CENTER" : 0,  "SpaceGraphEditor_pivot_point_CURSOR" : 1,  "SpaceGraphEditor_pivot_point_INDIVIDUAL_ORIGINS" : 2, 
 "SpaceImageEditor_draw_channels_COLOR" : 0,  "SpaceImageEditor_draw_channels_COLOR_ALPHA" : 4096,  "SpaceImageEditor_draw_channels_ALPHA" : 8192,  "SpaceImageEditor_draw_channels_Z_BUFFER" : 16384, 
 "SpaceNLA_auto_snap_NONE" : 0,  "SpaceNLA_auto_snap_STEP" : 1,  "SpaceNLA_auto_snap_FRAME" : 2,  "SpaceNLA_auto_snap_MARKER" : 3, 
 "SpaceNodeEditor_backdrop_channels_COLOR" : 0,  "SpaceNodeEditor_backdrop_channels_COLOR_ALPHA" : 8,  "SpaceNodeEditor_backdrop_channels_ALPHA" : 16, 
 "SpaceNodeEditor_texture_type_OBJECT" : 0,  "SpaceNodeEditor_texture_type_WORLD" : 1,  "SpaceNodeEditor_texture_type_BRUSH" : 2, 
 "SpaceNodeEditor_tree_type_MATERIAL" : 0,  "SpaceNodeEditor_tree_type_TEXTURE" : 2,  "SpaceNodeEditor_tree_type_COMPOSITING" : 1, 
 "SpaceOutliner_display_mode_ALL_SCENES" : 0,  "SpaceOutliner_display_mode_CURRENT_SCENE" : 1,  "SpaceOutliner_display_mode_VISIBLE_LAYERS" : 2,  "SpaceOutliner_display_mode_SELECTED" : 3,  "SpaceOutliner_display_mode_ACTIVE" : 4,  "SpaceOutliner_display_mode_SAME_TYPES" : 5,  "SpaceOutliner_display_mode_GROUPS" : 6,  "SpaceOutliner_display_mode_LIBRARIES" : 7,  "SpaceOutliner_display_mode_SEQUENCE" : 10,  "SpaceOutliner_display_mode_DATABLOCKS" : 11,  "SpaceOutliner_display_mode_USER_PREFERENCES" : 12,  "SpaceOutliner_display_mode_KEYMAPS" : 13, 
 "SpaceProperties_align_HORIZONTAL" : 1,  "SpaceProperties_align_VERTICAL" : 2, 
 "SpaceProperties_context_SCENE" : 1,  "SpaceProperties_context_RENDER" : 0,  "SpaceProperties_context_WORLD" : 2,  "SpaceProperties_context_OBJECT" : 3,  "SpaceProperties_context_CONSTRAINT" : 12,  "SpaceProperties_context_MODIFIER" : 10,  "SpaceProperties_context_DATA" : 4,  "SpaceProperties_context_BONE" : 9,  "SpaceProperties_context_BONE_CONSTRAINT" : 13,  "SpaceProperties_context_MATERIAL" : 5,  "SpaceProperties_context_TEXTURE" : 6,  "SpaceProperties_context_PARTICLES" : 7,  "SpaceProperties_context_PHYSICS" : 8, 
 "SpaceProperties_texture_context_MATERIAL" : 0, 
 "SpaceSequenceEditor_display_mode_IMAGE" : 1,  "SpaceSequenceEditor_display_mode_WAVEFORM" : 2,  "SpaceSequenceEditor_display_mode_VECTOR_SCOPE" : 3,  "SpaceSequenceEditor_display_mode_HISTOGRAM" : 4, 
 "SpaceSequenceEditor_proxy_render_size_NONE" : -1,  "SpaceSequenceEditor_proxy_render_size_SCENE" : 0,  "SpaceSequenceEditor_proxy_render_size_PROXY_25" : 25,  "SpaceSequenceEditor_proxy_render_size_PROXY_50" : 50,  "SpaceSequenceEditor_proxy_render_size_PROXY_75" : 75,  "SpaceSequenceEditor_proxy_render_size_PROXY_100" : 99,  "SpaceSequenceEditor_proxy_render_size_FULL" : 100, 
 "SpaceSequenceEditor_view_type_SEQUENCER" : 1,  "SpaceSequenceEditor_view_type_PREVIEW" : 2,  "SpaceSequenceEditor_view_type_SEQUENCER_PREVIEW" : 3, 
 "SpaceUVEditor_draw_stretch_type_ANGLE" : 0,  "SpaceUVEditor_draw_stretch_type_AREA" : 1, 
 "SpaceUVEditor_edge_draw_type_OUTLINE" : 0,  "SpaceUVEditor_edge_draw_type_DASH" : 1,  "SpaceUVEditor_edge_draw_type_BLACK" : 2,  "SpaceUVEditor_edge_draw_type_WHITE" : 3, 
 "SpaceUVEditor_pivot_point_CENTER" : 0,  "SpaceUVEditor_pivot_point_MEDIAN" : 3,  "SpaceUVEditor_pivot_point_CURSOR" : 1, 
 "SpaceUVEditor_sticky_select_mode_DISABLED" : 1,  "SpaceUVEditor_sticky_select_mode_SHARED_LOCATION" : 0,  "SpaceUVEditor_sticky_select_mode_SHARED_VERTEX" : 2, 
 "SpaceView3D_pivot_point_BOUNDING_BOX_CENTER" : 0,  "SpaceView3D_pivot_point_CURSOR" : 1,  "SpaceView3D_pivot_point_INDIVIDUAL_ORIGINS" : 2,  "SpaceView3D_pivot_point_MEDIAN_POINT" : 3,  "SpaceView3D_pivot_point_ACTIVE_ELEMENT" : 4, 
 "SpaceView3D_transform_orientation_GLOBAL" : 0,  "SpaceView3D_transform_orientation_LOCAL" : 1,  "SpaceView3D_transform_orientation_GIMBAL" : 4,  "SpaceView3D_transform_orientation_NORMAL" : 2,  "SpaceView3D_transform_orientation_VIEW" : 3,  "SpaceView3D_transform_orientation_CUSTOM" : 5, 
 "SpaceView3D_viewport_shade_BOUNDBOX" : 1,  "SpaceView3D_viewport_shade_WIREFRAME" : 2,  "SpaceView3D_viewport_shade_SOLID" : 3,  "SpaceView3D_viewport_shade_TEXTURED" : 5, 
 "Spline_radius_interpolation_LINEAR" : 0,  "Spline_radius_interpolation_CARDINAL" : 1,  "Spline_radius_interpolation_BSPLINE" : 2,  "Spline_radius_interpolation_EASE" : 3, 
 "Spline_tilt_interpolation_LINEAR" : 0,  "Spline_tilt_interpolation_CARDINAL" : 1,  "Spline_tilt_interpolation_BSPLINE" : 2,  "Spline_tilt_interpolation_EASE" : 3, 
 "Spline_type_POLY" : 0,  "Spline_type_BEZIER" : 1,  "Spline_type_BSPLINE" : 2,  "Spline_type_CARDINAL" : 3,  "Spline_type_NURBS" : 4, 
 "SplineIKConstraint_xz_scale_mode_NONE" : 0,  "SplineIKConstraint_xz_scale_mode_BONE_ORIGINAL" : 1,  "SplineIKConstraint_xz_scale_mode_VOLUME_PRESERVE" : 2, 
 "SpotLamp_falloff_type_CONSTANT" : 0,  "SpotLamp_falloff_type_INVERSE_LINEAR" : 1,  "SpotLamp_falloff_type_INVERSE_SQUARE" : 2,  "SpotLamp_falloff_type_CUSTOM_CURVE" : 3,  "SpotLamp_falloff_type_LINEAR_QUADRATIC_WEIGHTED" : 4, 
 "SpotLamp_shadow_buffer_type_REGULAR" : 0,  "SpotLamp_shadow_buffer_type_HALFWAY" : 2,  "SpotLamp_shadow_buffer_type_IRREGULAR" : 1,  "SpotLamp_shadow_buffer_type_DEEP" : 3, 
 "SpotLamp_shadow_filter_type_BOX" : 0,  "SpotLamp_shadow_filter_type_TENT" : 1,  "SpotLamp_shadow_filter_type_GAUSS" : 2, 
 "SpotLamp_shadow_method_NOSHADOW" : 0,  "SpotLamp_shadow_method_BUFFER_SHADOW" : 1,  "SpotLamp_shadow_method_RAY_SHADOW" : 8192, 
 "SpotLamp_shadow_ray_sample_method_ADAPTIVE_QMC" : 1,  "SpotLamp_shadow_ray_sample_method_CONSTANT_QMC" : 2, 
 "SpotLamp_shadow_sample_buffers_BUFFERS_1" : 1,  "SpotLamp_shadow_sample_buffers_BUFFERS_4" : 4,  "SpotLamp_shadow_sample_buffers_BUFFERS_9" : 9, 
 "StateActuator_operation_SET" : 0,  "StateActuator_operation_ADD" : 1,  "StateActuator_operation_REMOVE" : 2,  "StateActuator_operation_CHANGE" : 3, 
 "StretchToConstraint_keep_axis_PLANE_X" : 0,  "StretchToConstraint_keep_axis_PLANE_Z" : 2, 
 "StretchToConstraint_volume_VOLUME_XZX" : 0,  "StretchToConstraint_volume_VOLUME_X" : 1,  "StretchToConstraint_volume_VOLUME_Z" : 2,  "StretchToConstraint_volume_NO_VOLUME" : 3, 
 "StucciTexture_noise_basis_BLENDER_ORIGINAL" : 0,  "StucciTexture_noise_basis_ORIGINAL_PERLIN" : 1,  "StucciTexture_noise_basis_IMPROVED_PERLIN" : 2,  "StucciTexture_noise_basis_VORONOI_F1" : 3,  "StucciTexture_noise_basis_VORONOI_F2" : 4,  "StucciTexture_noise_basis_VORONOI_F3" : 5,  "StucciTexture_noise_basis_VORONOI_F4" : 6,  "StucciTexture_noise_basis_VORONOI_F2_F1" : 7,  "StucciTexture_noise_basis_VORONOI_CRACKLE" : 8,  "StucciTexture_noise_basis_CELL_NOISE" : 14, 
 "StucciTexture_noise_type_SOFT_NOISE" : 0,  "StucciTexture_noise_type_HARD_NOISE" : 1, 
 "StucciTexture_stucci_type_PLASTIC" : 0,  "StucciTexture_stucci_type_WALL_IN" : 1,  "StucciTexture_stucci_type_WALL_OUT" : 2, 
 "SubsurfModifier_subdivision_type_CATMULL_CLARK" : 0,  "SubsurfModifier_subdivision_type_SIMPLE" : 1, 
 "SunLamp_shadow_method_NOSHADOW" : 0,  "SunLamp_shadow_method_RAY_SHADOW" : 8192, 
 "SunLamp_shadow_ray_sample_method_ADAPTIVE_QMC" : 1,  "SunLamp_shadow_ray_sample_method_CONSTANT_QMC" : 2, 
 "TextCurve_align_LEFT" : 0,  "TextCurve_align_CENTER" : 1,  "TextCurve_align_RIGHT" : 2,  "TextCurve_align_JUSTIFY" : 3,  "TextCurve_align_FLUSH" : 4, 
 "Texture_type_NONE" : 0,  "Texture_type_BLEND" : 5,  "Texture_type_CLOUDS" : 1,  "Texture_type_DISTORTED_NOISE" : 13,  "Texture_type_ENVIRONMENT_MAP" : 10,  "Texture_type_IMAGE" : 8,  "Texture_type_MAGIC" : 4,  "Texture_type_MARBLE" : 3,  "Texture_type_MUSGRAVE" : 11,  "Texture_type_NOISE" : 7,  "Texture_type_POINT_DENSITY" : 14,  "Texture_type_STUCCI" : 6,  "Texture_type_VORONOI" : 12,  "Texture_type_VOXEL_DATA" : 15,  "Texture_type_WOOD" : 2, 
 "TextureNode_type_OUTPUT" : 401,  "TextureNode_type_CHECKER" : 402,  "TextureNode_type_TEXTURE" : 403,  "TextureNode_type_BRICKS" : 404,  "TextureNode_type_MATH" : 405,  "TextureNode_type_MIX_RGB" : 406,  "TextureNode_type_RGBTOBW" : 407,  "TextureNode_type_VALTORGB" : 408,  "TextureNode_type_IMAGE" : 409,  "TextureNode_type_CURVE_RGB" : 410,  "TextureNode_type_INVERT" : 411,  "TextureNode_type_HUE_SAT" : 412,  "TextureNode_type_CURVE_TIME" : 413,  "TextureNode_type_ROTATE" : 414,  "TextureNode_type_VIEWER" : 415,  "TextureNode_type_TRANSLATE" : 416,  "TextureNode_type_COORD" : 417,  "TextureNode_type_DISTANCE" : 418,  "TextureNode_type_COMPOSE" : 419,  "TextureNode_type_DECOMPOSE" : 420,  "TextureNode_type_VALTONOR" : 421,  "TextureNode_type_SCALE" : 422,  "TextureNode_type_SCRIPT" : 123,  "TextureNode_type_GROUP" : 2, 
 "TextureNodeMath_operation_ADD" : 0,  "TextureNodeMath_operation_SUBTRACT" : 1,  "TextureNodeMath_operation_MULTIPLY" : 2,  "TextureNodeMath_operation_DIVIDE" : 3,  "TextureNodeMath_operation_SINE" : 4,  "TextureNodeMath_operation_COSINE" : 5,  "TextureNodeMath_operation_TANGENT" : 6,  "TextureNodeMath_operation_ARCSINE" : 7,  "TextureNodeMath_operation_ARCCOSINE" : 8,  "TextureNodeMath_operation_ARCTANGENT" : 9,  "TextureNodeMath_operation_POWER" : 10,  "TextureNodeMath_operation_LOGARITHM" : 11,  "TextureNodeMath_operation_MINIMUM" : 12,  "TextureNodeMath_operation_MAXIMUM" : 13,  "TextureNodeMath_operation_ROUND" : 14,  "TextureNodeMath_operation_LESS_THAN" : 15,  "TextureNodeMath_operation_GREATER_THAN" : 16, 
 "TextureNodeMixRGB_blend_type_MIX" : 0,  "TextureNodeMixRGB_blend_type_ADD" : 1,  "TextureNodeMixRGB_blend_type_MULTIPLY" : 2,  "TextureNodeMixRGB_blend_type_SUBTRACT" : 3,  "TextureNodeMixRGB_blend_type_SCREEN" : 4,  "TextureNodeMixRGB_blend_type_DIVIDE" : 5,  "TextureNodeMixRGB_blend_type_DIFFERENCE" : 6,  "TextureNodeMixRGB_blend_type_DARKEN" : 7,  "TextureNodeMixRGB_blend_type_LIGHTEN" : 8,  "TextureNodeMixRGB_blend_type_OVERLAY" : 9,  "TextureNodeMixRGB_blend_type_DODGE" : 10,  "TextureNodeMixRGB_blend_type_BURN" : 11,  "TextureNodeMixRGB_blend_type_HUE" : 12,  "TextureNodeMixRGB_blend_type_SATURATION" : 13,  "TextureNodeMixRGB_blend_type_VALUE" : 14,  "TextureNodeMixRGB_blend_type_COLOR" : 15,  "TextureNodeMixRGB_blend_type_SOFT_LIGHT" : 16,  "TextureNodeMixRGB_blend_type_LINEAR_LIGHT" : 17, 
 "TextureSlot_blend_type_MIX" : 0,  "TextureSlot_blend_type_ADD" : 2,  "TextureSlot_blend_type_SUBTRACT" : 3,  "TextureSlot_blend_type_MULTIPLY" : 1,  "TextureSlot_blend_type_SCREEN" : 8,  "TextureSlot_blend_type_OVERLAY" : 9,  "TextureSlot_blend_type_DIFFERENCE" : 6,  "TextureSlot_blend_type_DIVIDE" : 4,  "TextureSlot_blend_type_DARKEN" : 5,  "TextureSlot_blend_type_LIGHTEN" : 7,  "TextureSlot_blend_type_HUE" : 10,  "TextureSlot_blend_type_SATURATION" : 11,  "TextureSlot_blend_type_VALUE" : 12,  "TextureSlot_blend_type_COLOR" : 13,  "TextureSlot_blend_type_SOFT_LIGHT" : 15,  "TextureSlot_blend_type_LINEAR_LIGHT" : 16, 
 "TextureSlot_output_node_DUMMY" : 0, 
 "Theme_theme_area_USER_INTERFACE" : 0,  "Theme_theme_area_BONE_COLOR_SETS" : 18,  "Theme_theme_area_VIEW_3D" : 1,  "Theme_theme_area_TIMELINE" : 2,  "Theme_theme_area_GRAPH_EDITOR" : 3,  "Theme_theme_area_DOPESHEET_EDITOR" : 4,  "Theme_theme_area_NLA_EDITOR" : 5,  "Theme_theme_area_IMAGE_EDITOR" : 6,  "Theme_theme_area_SEQUENCE_EDITOR" : 7,  "Theme_theme_area_TEXT_EDITOR" : 8,  "Theme_theme_area_NODE_EDITOR" : 9,  "Theme_theme_area_LOGIC_EDITOR" : 10,  "Theme_theme_area_PROPERTIES" : 11,  "Theme_theme_area_OUTLINER" : 12,  "Theme_theme_area_USER_PREFERENCES" : 14,  "Theme_theme_area_INFO" : 15,  "Theme_theme_area_FILE_BROWSER" : 16,  "Theme_theme_area_CONSOLE" : 17, 
 "ThemeFontStyle_font_kerning_style_UNFITTED" : 0,  "ThemeFontStyle_font_kerning_style_DEFAULT" : 1, 
 "ToolSettings_auto_keying_mode_ADD_REPLACE_KEYS" : 2,  "ToolSettings_auto_keying_mode_REPLACE_KEYS" : 4, 
 "ToolSettings_edge_path_mode_SELECT" : 0,  "ToolSettings_edge_path_mode_SEAM" : 1,  "ToolSettings_edge_path_mode_SHARP" : 2,  "ToolSettings_edge_path_mode_CREASE" : 3,  "ToolSettings_edge_path_mode_BEVEL" : 4, 
 "ToolSettings_proportional_edit_DISABLED" : 0,  "ToolSettings_proportional_edit_ENABLED" : 1,  "ToolSettings_proportional_edit_CONNECTED" : 2, 
 "ToolSettings_proportional_edit_falloff_SMOOTH" : 0,  "ToolSettings_proportional_edit_falloff_SPHERE" : 1,  "ToolSettings_proportional_edit_falloff_ROOT" : 2,  "ToolSettings_proportional_edit_falloff_SHARP" : 3,  "ToolSettings_proportional_edit_falloff_LINEAR" : 4,  "ToolSettings_proportional_edit_falloff_CONSTANT" : 5,  "ToolSettings_proportional_edit_falloff_RANDOM" : 6, 
 "ToolSettings_etch_roll_mode_NONE" : 0,  "ToolSettings_etch_roll_mode_VIEW" : 1,  "ToolSettings_etch_roll_mode_JOINT" : 2, 
 "ToolSettings_snap_element_INCREMENT" : 0,  "ToolSettings_snap_element_VERTEX" : 1,  "ToolSettings_snap_element_EDGE" : 2,  "ToolSettings_snap_element_FACE" : 3,  "ToolSettings_snap_element_VOLUME" : 4, 
 "ToolSettings_snap_target_CLOSEST" : 0,  "ToolSettings_snap_target_CENTER" : 1,  "ToolSettings_snap_target_MEDIAN" : 2,  "ToolSettings_snap_target_ACTIVE" : 3, 
 "ToolSettings_etch_convert_mode_FIXED" : 0,  "ToolSettings_etch_convert_mode_LENGTH" : 1,  "ToolSettings_etch_convert_mode_ADAPTIVE" : 2,  "ToolSettings_etch_convert_mode_RETARGET" : 3, 
 "ToolSettings_uv_select_mode_VERTEX" : 1,  "ToolSettings_uv_select_mode_EDGE" : 2,  "ToolSettings_uv_select_mode_FACE" : 4,  "ToolSettings_uv_select_mode_ISLAND" : 8, 
 "TrackToConstraint_track_axis_TRACK_X" : 0,  "TrackToConstraint_track_axis_TRACK_Y" : 1,  "TrackToConstraint_track_axis_TRACK_Z" : 2,  "TrackToConstraint_track_axis_TRACK_NEGATIVE_X" : 3,  "TrackToConstraint_track_axis_TRACK_NEGATIVE_Y" : 4,  "TrackToConstraint_track_axis_TRACK_NEGATIVE_Z" : 5, 
 "TrackToConstraint_up_axis_UP_X" : 0,  "TrackToConstraint_up_axis_UP_Y" : 1,  "TrackToConstraint_up_axis_UP_Z" : 2, 
 "TransformConstraint_map_from_LOCATION" : 0,  "TransformConstraint_map_from_ROTATION" : 1,  "TransformConstraint_map_from_SCALE" : 2, 
 "TransformConstraint_map_to_LOCATION" : 0,  "TransformConstraint_map_to_ROTATION" : 1,  "TransformConstraint_map_to_SCALE" : 2, 
 "TransformConstraint_map_to_x_from_X" : 0,  "TransformConstraint_map_to_x_from_Y" : 1,  "TransformConstraint_map_to_x_from_Z" : 2, 
 "TransformConstraint_map_to_y_from_X" : 0,  "TransformConstraint_map_to_y_from_Y" : 1,  "TransformConstraint_map_to_y_from_Z" : 2, 
 "TransformConstraint_map_to_z_from_X" : 0,  "TransformConstraint_map_to_z_from_Y" : 1,  "TransformConstraint_map_to_z_from_Z" : 2, 
 "TransformSequence_interpolation_NONE" : 0,  "TransformSequence_interpolation_BILINEAR" : 1,  "TransformSequence_interpolation_BICUBIC" : 2, 
 "TransformSequence_translation_unit_PIXELS" : 0,  "TransformSequence_translation_unit_PERCENT" : 1, 
 "UILayout_alignment_EXPAND" : 0,  "UILayout_alignment_LEFT" : 1,  "UILayout_alignment_CENTER" : 2,  "UILayout_alignment_RIGHT" : 3, 
 "UILayout_operator_context_INVOKE_DEFAULT" : 0,  "UILayout_operator_context_INVOKE_REGION_WIN" : 1,  "UILayout_operator_context_INVOKE_REGION_CHANNELS" : 2,  "UILayout_operator_context_INVOKE_REGION_PREVIEW" : 3,  "UILayout_operator_context_INVOKE_AREA" : 4,  "UILayout_operator_context_INVOKE_SCREEN" : 5,  "UILayout_operator_context_EXEC_DEFAULT" : 6,  "UILayout_operator_context_EXEC_REGION_WIN" : 7,  "UILayout_operator_context_EXEC_REGION_CHANNELS" : 8,  "UILayout_operator_context_EXEC_REGION_PREVIEW" : 9,  "UILayout_operator_context_EXEC_AREA" : 10,  "UILayout_operator_context_EXEC_SCREEN" : 11, 
 "UnitSettings_system_rotation_DEGREES" : 0,  "UnitSettings_system_rotation_RADIANS" : 2, 
 "UnitSettings_system_NONE" : 0,  "UnitSettings_system_METRIC" : 1,  "UnitSettings_system_IMPERIAL" : 2, 
 "UserPreferences_active_section_INTERFACE" : 0,  "UserPreferences_active_section_EDITING" : 1,  "UserPreferences_active_section_INPUT" : 5,  "UserPreferences_active_section_ADDONS" : 6,  "UserPreferences_active_section_THEMES" : 4,  "UserPreferences_active_section_FILES" : 2,  "UserPreferences_active_section_SYSTEM" : 3, 
 "UserPreferencesEdit_object_align_WORLD" : 0,  "UserPreferencesEdit_object_align_VIEW" : 524288, 
 "UserPreferencesEdit_auto_keying_mode_ADD_REPLACE_KEYS" : 3,  "UserPreferencesEdit_auto_keying_mode_REPLACE_KEYS" : 5, 
 "UserPreferencesEdit_material_link_OBDATA" : 0,  "UserPreferencesEdit_material_link_OBJECT" : 256, 
 "UserPreferencesEdit_keyframe_new_handle_type_FREE" : 0,  "UserPreferencesEdit_keyframe_new_handle_type_VECTOR" : 2,  "UserPreferencesEdit_keyframe_new_handle_type_ALIGNED" : 3,  "UserPreferencesEdit_keyframe_new_handle_type_AUTO" : 1,  "UserPreferencesEdit_keyframe_new_handle_type_AUTO_CLAMPED" : 4, 
 "UserPreferencesEdit_keyframe_new_interpolation_type_CONSTANT" : 0,  "UserPreferencesEdit_keyframe_new_interpolation_type_LINEAR" : 1,  "UserPreferencesEdit_keyframe_new_interpolation_type_BEZIER" : 2, 
 "UserPreferencesFilePaths_animation_player_preset_BLENDER24" : 1,  "UserPreferencesFilePaths_animation_player_preset_DJV" : 2,  "UserPreferencesFilePaths_animation_player_preset_FRAMECYCLER" : 3,  "UserPreferencesFilePaths_animation_player_preset_RV" : 4,  "UserPreferencesFilePaths_animation_player_preset_MPLAYER" : 5,  "UserPreferencesFilePaths_animation_player_preset_CUSTOM" : 50, 
 "UserPreferencesInput_select_mouse_LEFT" : 16384,  "UserPreferencesInput_select_mouse_RIGHT" : 0, 
 "UserPreferencesInput_view_rotate_method_TURNTABLE" : 0,  "UserPreferencesInput_view_rotate_method_TRACKBALL" : 32, 
 "UserPreferencesInput_view_zoom_axis_VERTICAL" : 0,  "UserPreferencesInput_view_zoom_axis_HORIZONTAL" : 67108864, 
 "UserPreferencesInput_view_zoom_method_CONTINUE" : 0,  "UserPreferencesInput_view_zoom_method_DOLLY" : 2,  "UserPreferencesInput_view_zoom_method_SCALE" : 1, 
 "UserPreferencesSystem_anisotropic_filter_FILTER_0" : 1,  "UserPreferencesSystem_anisotropic_filter_FILTER_2" : 2,  "UserPreferencesSystem_anisotropic_filter_FILTER_4" : 4,  "UserPreferencesSystem_anisotropic_filter_FILTER_8" : 8,  "UserPreferencesSystem_anisotropic_filter_FILTER_16" : 16, 
 "UserPreferencesSystem_audio_channels_MONO" : 1,  "UserPreferencesSystem_audio_channels_STEREO" : 2,  "UserPreferencesSystem_audio_channels_SURROUND4" : 4,  "UserPreferencesSystem_audio_channels_SURROUND51" : 6,  "UserPreferencesSystem_audio_channels_SURROUND71" : 8, 
 "UserPreferencesSystem_audio_device_NONE" : 0,  "UserPreferencesSystem_audio_device_SDL" : 1,  "UserPreferencesSystem_audio_device_OPENAL" : 2, 
 "UserPreferencesSystem_audio_mixing_buffer_SAMPLES_256" : 256,  "UserPreferencesSystem_audio_mixing_buffer_SAMPLES_512" : 512,  "UserPreferencesSystem_audio_mixing_buffer_SAMPLES_1024" : 1024,  "UserPreferencesSystem_audio_mixing_buffer_SAMPLES_2048" : 2048,  "UserPreferencesSystem_audio_mixing_buffer_SAMPLES_4096" : 4096,  "UserPreferencesSystem_audio_mixing_buffer_SAMPLES_8192" : 8192,  "UserPreferencesSystem_audio_mixing_buffer_SAMPLES_16384" : 16384,  "UserPreferencesSystem_audio_mixing_buffer_SAMPLES_32768" : 32768, 
 "UserPreferencesSystem_audio_sample_format_U8" : 1,  "UserPreferencesSystem_audio_sample_format_S16" : 18,  "UserPreferencesSystem_audio_sample_format_S24" : 19,  "UserPreferencesSystem_audio_sample_format_S32" : 20,  "UserPreferencesSystem_audio_sample_format_FLOAT" : 36,  "UserPreferencesSystem_audio_sample_format_DOUBLE" : 40, 
 "UserPreferencesSystem_audio_sample_rate_RATE_44100" : 44100,  "UserPreferencesSystem_audio_sample_rate_RATE_48000" : 48000,  "UserPreferencesSystem_audio_sample_rate_RATE_96000" : 96000,  "UserPreferencesSystem_audio_sample_rate_RATE_192000" : 192000, 
 "UserPreferencesSystem_color_picker_type_CIRCLE" : 0,  "UserPreferencesSystem_color_picker_type_SQUARE_SV" : 1,  "UserPreferencesSystem_color_picker_type_SQUARE_HS" : 2,  "UserPreferencesSystem_color_picker_type_SQUARE_HV" : 3, 
 "UserPreferencesSystem_gl_texture_limit_CLAMP_OFF" : 0,  "UserPreferencesSystem_gl_texture_limit_CLAMP_8192" : 8192,  "UserPreferencesSystem_gl_texture_limit_CLAMP_4096" : 4096,  "UserPreferencesSystem_gl_texture_limit_CLAMP_2048" : 2048,  "UserPreferencesSystem_gl_texture_limit_CLAMP_1024" : 1024,  "UserPreferencesSystem_gl_texture_limit_CLAMP_512" : 512,  "UserPreferencesSystem_gl_texture_limit_CLAMP_256" : 256,  "UserPreferencesSystem_gl_texture_limit_CLAMP_128" : 128, 
 "UserPreferencesSystem_language_ENGLISH" : 0,  "UserPreferencesSystem_language_JAPANESE" : 1,  "UserPreferencesSystem_language_DUTCH" : 2,  "UserPreferencesSystem_language_ITALIAN" : 3,  "UserPreferencesSystem_language_GERMAN" : 4,  "UserPreferencesSystem_language_FINNISH" : 5,  "UserPreferencesSystem_language_SWEDISH" : 6,  "UserPreferencesSystem_language_FRENCH" : 7,  "UserPreferencesSystem_language_SPANISH" : 8,  "UserPreferencesSystem_language_CATALAN" : 9,  "UserPreferencesSystem_language_CZECH" : 10,  "UserPreferencesSystem_language_BRAZILIAN_PORTUGUESE" : 11,  "UserPreferencesSystem_language_SIMPLIFIED_CHINESE" : 12,  "UserPreferencesSystem_language_RUSSIAN" : 13,  "UserPreferencesSystem_language_CROATIAN" : 14,  "UserPreferencesSystem_language_SERBIAN" : 15,  "UserPreferencesSystem_language_UKRAINIAN" : 16,  "UserPreferencesSystem_language_POLISH" : 17,  "UserPreferencesSystem_language_ROMANIAN" : 18,  "UserPreferencesSystem_language_ARABIC" : 19,  "UserPreferencesSystem_language_BULGARIAN" : 20,  "UserPreferencesSystem_language_GREEK" : 21,  "UserPreferencesSystem_language_KOREAN" : 22, 
 "UserPreferencesSystem_window_draw_method_AUTOMATIC" : 3,  "UserPreferencesSystem_window_draw_method_TRIPLE_BUFFER" : 0,  "UserPreferencesSystem_window_draw_method_OVERLAP" : 1,  "UserPreferencesSystem_window_draw_method_OVERLAP_FLIP" : 4,  "UserPreferencesSystem_window_draw_method_FULL" : 2, 
 "UserPreferencesView_timecode_style_MINIMAL" : 0,  "UserPreferencesView_timecode_style_SMPTE" : 2,  "UserPreferencesView_timecode_style_SMPTE_COMPACT" : 1,  "UserPreferencesView_timecode_style_MILLISECONDS" : 3,  "UserPreferencesView_timecode_style_SECONDS_ONLY" : 4, 
 "VoronoiTexture_color_mode_INTENSITY" : 0,  "VoronoiTexture_color_mode_POSITION" : 1,  "VoronoiTexture_color_mode_POSITION_OUTLINE" : 2,  "VoronoiTexture_color_mode_POSITION_OUTLINE_INTENSITY" : 3, 
 "VoronoiTexture_distance_metric_DISTANCE" : 0,  "VoronoiTexture_distance_metric_DISTANCE_SQUARED" : 1,  "VoronoiTexture_distance_metric_MANHATTAN" : 2,  "VoronoiTexture_distance_metric_CHEBYCHEV" : 3,  "VoronoiTexture_distance_metric_MINKOVSKY_HALF" : 4,  "VoronoiTexture_distance_metric_MINKOVSKY_FOUR" : 5,  "VoronoiTexture_distance_metric_MINKOVSKY" : 6, 
 "VoxelData_extension_EXTEND" : 1,  "VoxelData_extension_CLIP" : 2,  "VoxelData_extension_REPEAT" : 3, 
 "VoxelData_file_format_BLENDER_VOXEL" : 0,  "VoxelData_file_format_RAW_8BIT" : 1,  "VoxelData_file_format_IMAGE_SEQUENCE" : 3,  "VoxelData_file_format_SMOKE" : 4, 
 "VoxelData_interpolation_NEREASTNEIGHBOR" : 0,  "VoxelData_interpolation_TRILINEAR" : 1,  "VoxelData_interpolation_QUADRATIC" : 2,  "VoxelData_interpolation_TRICUBIC_CATROM" : 3,  "VoxelData_interpolation_TRICUBIC_BSPLINE" : 4, 
 "VoxelData_smoke_data_type_SMOKEDENSITY" : 0,  "VoxelData_smoke_data_type_SMOKEHEAT" : 1,  "VoxelData_smoke_data_type_SMOKEVEL" : 2, 
 "WarpModifier_falloff_type_NONE" : 0,  "WarpModifier_falloff_type_CURVE" : 1,  "WarpModifier_falloff_type_SMOOTH" : 3,  "WarpModifier_falloff_type_SPHERE" : 7,  "WarpModifier_falloff_type_ROOT" : 4,  "WarpModifier_falloff_type_SHARP" : 2,  "WarpModifier_falloff_type_LINEAR" : 5,  "WarpModifier_falloff_type_CONSTANT" : 6, 
 "WarpModifier_texture_coords_LOCAL" : 0,  "WarpModifier_texture_coords_GLOBAL" : 1,  "WarpModifier_texture_coords_OBJECT" : 2,  "WarpModifier_texture_coords_UV" : 3, 
 "WaveModifier_texture_coords_LOCAL" : 0,  "WaveModifier_texture_coords_GLOBAL" : 1,  "WaveModifier_texture_coords_OBJECT" : 2,  "WaveModifier_texture_coords_MAP_UV" : 3, 
 "WipeSequence_direction_OUT" : 0,  "WipeSequence_direction_IN" : 1, 
 "WipeSequence_transition_type_SINGLE" : 0,  "WipeSequence_transition_type_DOUBLE" : 1,  "WipeSequence_transition_type_IRIS" : 4,  "WipeSequence_transition_type_CLOCK" : 5, 
 "WoodTexture_noise_basis_BLENDER_ORIGINAL" : 0,  "WoodTexture_noise_basis_ORIGINAL_PERLIN" : 1,  "WoodTexture_noise_basis_IMPROVED_PERLIN" : 2,  "WoodTexture_noise_basis_VORONOI_F1" : 3,  "WoodTexture_noise_basis_VORONOI_F2" : 4,  "WoodTexture_noise_basis_VORONOI_F3" : 5,  "WoodTexture_noise_basis_VORONOI_F4" : 6,  "WoodTexture_noise_basis_VORONOI_F2_F1" : 7,  "WoodTexture_noise_basis_VORONOI_CRACKLE" : 8,  "WoodTexture_noise_basis_CELL_NOISE" : 14, 
 "WoodTexture_noise_basis_2_SIN" : 0,  "WoodTexture_noise_basis_2_SAW" : 1,  "WoodTexture_noise_basis_2_TRI" : 2, 
 "WoodTexture_noise_type_SOFT_NOISE" : 0,  "WoodTexture_noise_type_HARD_NOISE" : 1, 
 "WoodTexture_wood_type_BANDS" : 0,  "WoodTexture_wood_type_RINGS" : 1,  "WoodTexture_wood_type_BANDNOISE" : 2,  "WoodTexture_wood_type_RINGNOISE" : 3, 
 "WorldLighting_ao_blend_type_MULTIPLY" : 3,  "WorldLighting_ao_blend_type_ADD" : 0, 
 "WorldLighting_environment_color_PLAIN" : 0,  "WorldLighting_environment_color_SKY_COLOR" : 1,  "WorldLighting_environment_color_SKY_TEXTURE" : 2, 
 "WorldLighting_gather_method_RAYTRACE" : 0,  "WorldLighting_gather_method_APPROXIMATE" : 1, 
 "WorldLighting_sample_method_CONSTANT_JITTERED" : 0,  "WorldLighting_sample_method_ADAPTIVE_QMC" : 1,  "WorldLighting_sample_method_CONSTANT_QMC" : 2, 
 "WorldMistSettings_falloff_QUADRATIC" : 0,  "WorldMistSettings_falloff_LINEAR" : 1,  "WorldMistSettings_falloff_INVERSE_QUADRATIC" : 2, 
 "WorldTextureSlot_texture_coords_VIEW" : 128,  "WorldTextureSlot_texture_coords_GLOBAL" : 8,  "WorldTextureSlot_texture_coords_ANGMAP" : 64,  "WorldTextureSlot_texture_coords_SPHERE" : 256,  "WorldTextureSlot_texture_coords_TUBE" : 1024,  "WorldTextureSlot_texture_coords_OBJECT" : 32, 
 "UI_BLOCK_BOUNDS" : 1,  "UI_BLOCK_BOUNDS_TEXT" : 2,  "UI_BLOCK_BOUNDS_POPUP_MOUSE" : 3,  "UI_BLOCK_BOUNDS_POPUP_MENU" : 4,  "UI_BLOCK_BOUNDS_POPUP_CENTER" : 5, 
 "BLI_CB_EVT_RENDER_PRE" : 0,  "BLI_CB_EVT_RENDER_POST" : 1,  "BLI_CB_EVT_RENDER_STATS" : 2,  "BLI_CB_EVT_LOAD_PRE" : 3,  "BLI_CB_EVT_LOAD_POST" : 4,  "BLI_CB_EVT_SAVE_PRE" : 5,  "BLI_CB_EVT_SAVE_POST" : 6,  "BLI_CB_EVT_TOT" : 7, 

}
class fenv_t(_rpythonic_struct_): pass
class wait(ctypes.Union): pass
class __wait_terminated(_rpythonic_struct_): pass
class __wait_stopped(_rpythonic_struct_): pass
class __WAIT_STATUS(ctypes.Union): pass
class div_t(_rpythonic_struct_): pass
class ldiv_t(_rpythonic_struct_): pass
class lldiv_t(_rpythonic_struct_): pass
class __locale_struct(_rpythonic_struct_): _array_wrapper_ = True
class __locale_data(_rpythonic_struct_): pass
class __fsid_t(_rpythonic_struct_): _array_wrapper_ = True
class __sigset_t(_rpythonic_struct_): _array_wrapper_ = True
class timespec(_rpythonic_struct_): pass
class timeval(_rpythonic_struct_): pass
class fd_set(_rpythonic_struct_): _array_wrapper_ = True
class pthread_attr_t(ctypes.Union): pass
class __pthread_internal_slist(_rpythonic_struct_): pass
class pthread_mutex_t(ctypes.Union): pass
class __pthread_mutex_s(_rpythonic_struct_): pass
class pthread_mutexattr_t(ctypes.Union): pass
class pthread_cond_t(ctypes.Union): pass
class pthread_condattr_t(ctypes.Union): pass
class pthread_rwlock_t(ctypes.Union): pass
class __data(_rpythonic_struct_): pass
class pthread_rwlockattr_t(ctypes.Union): pass
class pthread_barrier_t(ctypes.Union): pass
class pthread_barrierattr_t(ctypes.Union): pass
class random_data(_rpythonic_struct_): pass
class drand48_data(_rpythonic_struct_): _array_wrapper_ = True
class sigval(ctypes.Union): pass
class siginfo(_rpythonic_struct_): pass
class _sifields(ctypes.Union): pass
class _kill(_rpythonic_struct_): pass
class _timer(_rpythonic_struct_): pass
class _rt(_rpythonic_struct_): pass
class _sigchld(_rpythonic_struct_): pass
class _sigfault(_rpythonic_struct_): pass
class _sigpoll(_rpythonic_struct_): pass
class sigevent(_rpythonic_struct_): pass
class _sigev_un(ctypes.Union): pass
class _sigev_thread(_rpythonic_struct_): pass
class sigaction(_rpythonic_struct_): pass
class __sigaction_handler(ctypes.Union): pass
class sigvec(_rpythonic_struct_): pass
class _fpreg(_rpythonic_struct_): _array_wrapper_ = True
class _fpxreg(_rpythonic_struct_): _array_wrapper_ = True
class _xmmreg(_rpythonic_struct_): _array_wrapper_ = True
class _fpstate(_rpythonic_struct_): _array_wrapper_ = True
class sigcontext(_rpythonic_struct_): pass
class sigstack(_rpythonic_struct_): pass
class sigaltstack(_rpythonic_struct_): pass
class _libc_fpreg(_rpythonic_struct_): _array_wrapper_ = True
class _libc_fpstate(_rpythonic_struct_): _array_wrapper_ = True
class mcontext_t(_rpythonic_struct_): pass
class ucontext(_rpythonic_struct_): pass
class __mbstate_t(_rpythonic_struct_): pass
class __value(ctypes.Union): pass
class _G_fpos_t(_rpythonic_struct_): pass
class _G_fpos64_t(_rpythonic_struct_): pass
class _IO_jump_t(_rpythonic_struct_): pass
class _IO_marker(_rpythonic_struct_): pass
class _IO_FILE(_rpythonic_struct_): _array_wrapper_ = True
class _IO_FILE_plus(_rpythonic_struct_): pass
class _IO_cookie_io_functions_t(_rpythonic_struct_): pass
class _IO_cookie_file(_rpythonic_struct_): pass
class obstack(_rpythonic_struct_): pass
class iovec(_rpythonic_struct_): pass
class sockaddr(_rpythonic_struct_): _array_wrapper_ = True
class sockaddr_storage(_rpythonic_struct_): _array_wrapper_ = True
class msghdr(_rpythonic_struct_): pass
class mmsghdr(_rpythonic_struct_): pass
class cmsghdr(_rpythonic_struct_): _array_wrapper_ = True
class ucred(_rpythonic_struct_): pass
class linger(_rpythonic_struct_): pass
class osockaddr(_rpythonic_struct_): _array_wrapper_ = True
class __SOCKADDR_ARG(ctypes.Union): pass
class sockaddr_at(_rpythonic_struct_): pass
class sockaddr_ax25(_rpythonic_struct_): pass
class sockaddr_dl(_rpythonic_struct_): pass
class sockaddr_eon(_rpythonic_struct_): pass
class sockaddr_inarp(_rpythonic_struct_): pass
class sockaddr_ipx(_rpythonic_struct_): pass
class sockaddr_iso(_rpythonic_struct_): pass
class sockaddr_ns(_rpythonic_struct_): pass
class sockaddr_un(_rpythonic_struct_): pass
class sockaddr_x25(_rpythonic_struct_): pass
class __CONST_SOCKADDR_ARG(ctypes.Union): pass
class in_addr(_rpythonic_struct_): pass
class in6_addr(_rpythonic_struct_): pass
class __in6_u(ctypes.Union): pass
class sockaddr_in(_rpythonic_struct_): _array_wrapper_ = True
class sockaddr_in6(_rpythonic_struct_): pass
class ip_mreq(_rpythonic_struct_): pass
class ip_mreq_source(_rpythonic_struct_): pass
class ipv6_mreq(_rpythonic_struct_): pass
class group_req(_rpythonic_struct_): pass
class group_source_req(_rpythonic_struct_): pass
class ip_msfilter(_rpythonic_struct_): _array_wrapper_ = True
class group_filter(_rpythonic_struct_): _array_wrapper_ = True
class ip_opts(_rpythonic_struct_): _array_wrapper_ = True
class ip_mreqn(_rpythonic_struct_): pass
class in_pktinfo(_rpythonic_struct_): pass
class in6_pktinfo(_rpythonic_struct_): pass
class ip6_mtuinfo(_rpythonic_struct_): pass
class bArgs(_rpythonic_struct_): pass
class sched_param(_rpythonic_struct_): pass
class __sched_param(_rpythonic_struct_): pass
class cpu_set_t(_rpythonic_struct_): _array_wrapper_ = True
class tm(_rpythonic_struct_): pass
class itimerspec(_rpythonic_struct_): pass
class _pthread_cleanup_buffer(_rpythonic_struct_): pass
class __pthread_unwind_buf_t(_rpythonic_struct_): _array_wrapper_ = True
class __cancel_jmp_buf(_rpythonic_struct_): _array_wrapper_ = True
class __pthread_cleanup_frame(_rpythonic_struct_): pass
class __jmp_buf_tag(_rpythonic_struct_): pass
class ThreadedWorker(_rpythonic_struct_): pass
class ThreadQueue(_rpythonic_struct_): pass
class EditVert(_rpythonic_struct_): pass
class EditEdge(_rpythonic_struct_): pass
class Link(_rpythonic_struct_): pass
class LinkData(_rpythonic_struct_): pass
class ListBase(_rpythonic_struct_): pass
class direntry(_rpythonic_struct_): pass
class LinkNode(_rpythonic_struct_): pass
class BLI_mempool(_rpythonic_struct_): pass
class Entry(_rpythonic_struct_): pass
class GHash(_rpythonic_struct_): pass
class GHashIterator(_rpythonic_struct_): pass
class FileData(_rpythonic_struct_): pass
class IDPropertyData(_rpythonic_struct_): pass
class IDProperty(_rpythonic_struct_): _array_wrapper_ = True
class ID(_rpythonic_struct_): _array_wrapper_ = True
class Library(_rpythonic_struct_): _array_wrapper_ = True
class PreviewImage(_rpythonic_struct_): _array_wrapper_ = True
class vec2s(_rpythonic_struct_): pass
class vec2f(_rpythonic_struct_): pass
class rcti(_rpythonic_struct_): pass
class rctf(_rpythonic_struct_): pass
class Object(_rpythonic_struct_): pass
class Brush(_rpythonic_struct_): pass
class World(_rpythonic_struct_): pass
class Group(_rpythonic_struct_): pass
class Text(_rpythonic_struct_): pass
class bNodeTree(_rpythonic_struct_): pass
class AnimData(_rpythonic_struct_): pass
class Editing(_rpythonic_struct_): pass
class SceneStats(_rpythonic_struct_): pass
class bGPdata(_rpythonic_struct_): pass
class Base(_rpythonic_struct_): pass
class AviCodecData(_rpythonic_struct_): _array_wrapper_ = True
class QuicktimeCodecData(_rpythonic_struct_): _array_wrapper_ = True
class QuicktimeCodecSettings(_rpythonic_struct_): pass
class FFMpegCodecData(_rpythonic_struct_): pass
class AudioData(_rpythonic_struct_): pass
class SceneRenderLayer(_rpythonic_struct_): _array_wrapper_ = True
class Material(_rpythonic_struct_): pass
class RenderData(_rpythonic_struct_): _array_wrapper_ = True
class RenderProfile(_rpythonic_struct_): _array_wrapper_ = True
class GameDome(_rpythonic_struct_): pass
class GameFraming(_rpythonic_struct_): _array_wrapper_ = True
class GameData(_rpythonic_struct_): _array_wrapper_ = True
class TimeMarker(_rpythonic_struct_): _array_wrapper_ = True
class Paint(_rpythonic_struct_): _array_wrapper_ = True
class ImagePaintSettings(_rpythonic_struct_): _array_wrapper_ = True
class ParticleBrushData(_rpythonic_struct_): pass
class ParticleEditSettings(_rpythonic_struct_): _array_wrapper_ = True
class TransformOrientation(_rpythonic_struct_): _array_wrapper_ = True
class Sculpt(_rpythonic_struct_): _array_wrapper_ = True
class VPaint(_rpythonic_struct_): pass
class MDeformVert(_rpythonic_struct_): pass
class ToolSettings(_rpythonic_struct_): _array_wrapper_ = True
class bStats(_rpythonic_struct_): pass
class UnitSettings(_rpythonic_struct_): pass
class PhysicsSettings(_rpythonic_struct_): _array_wrapper_ = True
class Scene(_rpythonic_struct_): _array_wrapper_ = True
class DagForest(_rpythonic_struct_): pass
class MemFile(_rpythonic_struct_): pass
class bContext(_rpythonic_struct_): pass
class FunctionRNA(_rpythonic_struct_): pass
class PropertyRNA(_rpythonic_struct_): pass
class EnumPropertyRNA(_rpythonic_struct_): pass
class StructRNA(_rpythonic_struct_): pass
class BlenderRNA(_rpythonic_struct_): pass
class PointerRNA(_rpythonic_struct_): pass
class C_id(_rpythonic_struct_): pass
class PropertyPointerRNA(_rpythonic_struct_): pass
class CollectionPropertyIterator(_rpythonic_struct_): pass
class CollectionPointerLink(_rpythonic_struct_): pass
class RawArray(_rpythonic_struct_): pass
class EnumPropertyItem(_rpythonic_struct_): pass
class ParameterList(_rpythonic_struct_): pass
class ParameterIterator(_rpythonic_struct_): pass
class ParameterDynAlloc(_rpythonic_struct_): pass
class ExtensionRNA(_rpythonic_struct_): pass
class EditMesh(_rpythonic_struct_): pass
class bPoseChannel(_rpythonic_struct_): pass
class bContextDataResult(_rpythonic_struct_): pass
class bContextStoreEntry(_rpythonic_struct_): _array_wrapper_ = True
class bContextStore(_rpythonic_struct_): pass
class SpaceAction(_rpythonic_struct_): pass
class VFont(_rpythonic_struct_): pass
class Curve(_rpythonic_struct_): pass
class objfnt(_rpythonic_struct_): pass
class TmpFont(_rpythonic_struct_): pass
class CharInfo(_rpythonic_struct_): pass
class chartrans(_rpythonic_struct_): pass
class SelBox(_rpythonic_struct_): pass
class EditFont(_rpythonic_struct_): _array_wrapper_ = True
class BME_Glob(_rpythonic_struct_): pass
class Global(_rpythonic_struct_): _array_wrapper_ = True
class Main(_rpythonic_struct_): _array_wrapper_ = True
class bSound(_rpythonic_struct_): pass
class PackedFile(_rpythonic_struct_): pass
class bglMats(_rpythonic_struct_): pass
class bNode(_rpythonic_struct_): pass
class bNodeLink(_rpythonic_struct_): pass
class bNodeSocket(_rpythonic_struct_): pass
class bNodeStack(_rpythonic_struct_): pass
class GPUMaterial(_rpythonic_struct_): pass
class GPUNode(_rpythonic_struct_): pass
class GPUNodeStack(_rpythonic_struct_): pass
class uiLayout(_rpythonic_struct_): pass
class bNodeSocketType(_rpythonic_struct_): pass
class bNodeType(_rpythonic_struct_): _array_wrapper_ = True
class ShadeInput(_rpythonic_struct_): pass
class ShadeResult(_rpythonic_struct_): pass
class CompBuf(_rpythonic_struct_): pass
class TexResult(_rpythonic_struct_): pass
class wmLocal(_rpythonic_struct_): pass
class uiBlock(_rpythonic_struct_): pass
class wmSubWindow(_rpythonic_struct_): pass
class Report(_rpythonic_struct_): pass
class ReportList(_rpythonic_struct_): pass
class ReportTimerInfo(_rpythonic_struct_): _array_wrapper_ = True
class wmWindowManager(_rpythonic_struct_): pass
class wmWindow(_rpythonic_struct_): _array_wrapper_ = True
class wmOperatorTypeMacro(_rpythonic_struct_): _array_wrapper_ = True
class wmKeyMapItem(_rpythonic_struct_): _array_wrapper_ = True
class wmKeyMapDiffItem(_rpythonic_struct_): pass
class wmKeyMap(_rpythonic_struct_): _array_wrapper_ = True
class wmKeyConfig(_rpythonic_struct_): _array_wrapper_ = True
class wmOperator(_rpythonic_struct_): _array_wrapper_ = True
class Sequence(_rpythonic_struct_): pass
class SoundWaveform(_rpythonic_struct_): pass
class DagNodeQueue(_rpythonic_struct_): pass
class DagNode(_rpythonic_struct_): pass
class IDPropertyTemplate(ctypes.Union): pass
class array(_rpythonic_struct_): pass
class matrix_or_vector(_rpythonic_struct_): pass
class uiMenuItem(_rpythonic_struct_): pass
class SpaceType(_rpythonic_struct_): _array_wrapper_ = True
class ARegionType(_rpythonic_struct_): pass
class PanelType(_rpythonic_struct_): _array_wrapper_ = True
class HeaderType(_rpythonic_struct_): _array_wrapper_ = True
class Header(_rpythonic_struct_): pass
class MenuType(_rpythonic_struct_): _array_wrapper_ = True
class Menu(_rpythonic_struct_): pass
class anim(_rpythonic_struct_): pass
class ImMetaData(_rpythonic_struct_): pass
class ImBuf(_rpythonic_struct_): _array_wrapper_ = True
class MEM_CacheLimiterHandle_s(_rpythonic_struct_): pass
class ChannelDriver(_rpythonic_struct_): pass
class bConstraint(_rpythonic_struct_): pass
class bPythonConstraint(_rpythonic_struct_): pass
class bConstraintOb(_rpythonic_struct_): pass
class bConstraintTarget(_rpythonic_struct_): pass
class BPyMenu(_rpythonic_struct_): pass
class NodeBlurData(_rpythonic_struct_): pass
class Render(_rpythonic_struct_): pass
class RenderPass(_rpythonic_struct_): _array_wrapper_ = True
class RenderLayer(_rpythonic_struct_): _array_wrapper_ = True
class RenderResult(_rpythonic_struct_): pass
class RenderStats(_rpythonic_struct_): _array_wrapper_ = True
class RenderEngineType(_rpythonic_struct_): _array_wrapper_ = True
class RenderEngine(_rpythonic_struct_): pass
class bArmature(_rpythonic_struct_): pass
class Bone(_rpythonic_struct_): pass
class DerivedMesh(_rpythonic_struct_): pass
class MeshDeformModifierData(_rpythonic_struct_): pass
class SK_Sketch(_rpythonic_struct_): pass
class ViewContext(_rpythonic_struct_): pass
class EditBone(_rpythonic_struct_): _array_wrapper_ = True
class KeyingSet(_rpythonic_struct_): pass
class bAction(_rpythonic_struct_): pass
class FCurve(_rpythonic_struct_): pass
class BezTriple(_rpythonic_struct_): pass
class KeyingSetInfo(_rpythonic_struct_): _array_wrapper_ = True
class RenderInfo(_rpythonic_struct_): pass
class View2D(_rpythonic_struct_): _array_wrapper_ = True
class bScreen(_rpythonic_struct_): _array_wrapper_ = True
class ScrVert(_rpythonic_struct_): pass
class ScrEdge(_rpythonic_struct_): pass
class Panel(_rpythonic_struct_): _array_wrapper_ = True
class ScrArea(_rpythonic_struct_): pass
class ARegion(_rpythonic_struct_): _array_wrapper_ = True
class CurveMapPoint(_rpythonic_struct_): pass
class CurveMap(_rpythonic_struct_): _array_wrapper_ = True
class CurveMapping(_rpythonic_struct_): _array_wrapper_ = True
class Histogram(_rpythonic_struct_): _array_wrapper_ = True
class Scopes(_rpythonic_struct_): _array_wrapper_ = True
class TreeStoreElem(_rpythonic_struct_): pass
class TreeStore(_rpythonic_struct_): pass
class GPUTexture(_rpythonic_struct_): pass
class ImageUser(_rpythonic_struct_): pass
class Image(_rpythonic_struct_): _array_wrapper_ = True
class BlendHandle(_rpythonic_struct_): pass
class FileList(_rpythonic_struct_): pass
class bDopeSheet(_rpythonic_struct_): pass
class FileLayout(_rpythonic_struct_): pass
class SpaceLink(_rpythonic_struct_): _array_wrapper_ = True
class SpaceInfo(_rpythonic_struct_): _array_wrapper_ = True
class SpaceIpo(_rpythonic_struct_): _array_wrapper_ = True
class SpaceButs(_rpythonic_struct_): _array_wrapper_ = True
class SpaceSeq(_rpythonic_struct_): _array_wrapper_ = True
class FileSelectParams(_rpythonic_struct_): _array_wrapper_ = True
class SpaceFile(_rpythonic_struct_): pass
class SpaceOops(_rpythonic_struct_): _array_wrapper_ = True
class SpaceImage(_rpythonic_struct_): _array_wrapper_ = True
class SpaceNla(_rpythonic_struct_): _array_wrapper_ = True
class SpaceText(_rpythonic_struct_): _array_wrapper_ = True
class Script(_rpythonic_struct_): _array_wrapper_ = True
class SpaceScript(_rpythonic_struct_): pass
class SpaceTimeCache(_rpythonic_struct_): pass
class SpaceTime(_rpythonic_struct_): pass
class SpaceNode(_rpythonic_struct_): _array_wrapper_ = True
class SpaceLogic(_rpythonic_struct_): _array_wrapper_ = True
class SpaceImaSel(_rpythonic_struct_): _array_wrapper_ = True
class ConsoleLine(_rpythonic_struct_): pass
class SpaceConsole(_rpythonic_struct_): _array_wrapper_ = True
class SpaceUserPref(_rpythonic_struct_): _array_wrapper_ = True
class SpaceSound(_rpythonic_struct_): pass
class ViewDepths(_rpythonic_struct_): pass
class BoundBox(_rpythonic_struct_): pass
class SmoothViewStore(_rpythonic_struct_): pass
class BGpic(_rpythonic_struct_): pass
class RegionView3D(_rpythonic_struct_): _array_wrapper_ = True
class View3D(_rpythonic_struct_): _array_wrapper_ = True
class Mesh(_rpythonic_struct_): pass
class wmJob(_rpythonic_struct_): pass
class BCursor(_rpythonic_struct_): pass
class wmNotifier(_rpythonic_struct_): pass
class wmGesture(_rpythonic_struct_): pass
class wmEvent(_rpythonic_struct_): _array_wrapper_ = True
class wmTabletData(_rpythonic_struct_): pass
class wmNDOFMotionData(_rpythonic_struct_): pass
class wmTimer(_rpythonic_struct_): pass
class wmOperatorType(_rpythonic_struct_): pass
class wmReport(_rpythonic_struct_): pass
class wmDrag(_rpythonic_struct_): _array_wrapper_ = True
class wmDropBox(_rpythonic_struct_): pass
class RecentFile(_rpythonic_struct_): pass
class wmPaintCursor(_rpythonic_struct_): pass
class wmEventHandler(_rpythonic_struct_): pass
class MTFace(_rpythonic_struct_): pass
class SmokeModifierData(_rpythonic_struct_): pass
class GPUFrameBuffer(_rpythonic_struct_): pass
class GPUOffScreen(_rpythonic_struct_): pass
class GPUShader(_rpythonic_struct_): pass
class GPUVertexAttribs(_rpythonic_struct_): _array_wrapper_ = True
class layer(_rpythonic_struct_): _array_wrapper_ = True
class DMGridData(_rpythonic_struct_): pass
class GPUVertPointLink(_rpythonic_struct_): pass
class GPUBuffer(_rpythonic_struct_): pass
class GPUBufferMaterial(_rpythonic_struct_): pass
class GPUDrawObject(_rpythonic_struct_): pass
class GPUAttrib(_rpythonic_struct_): pass
class MVert(_rpythonic_struct_): pass
class MFace(_rpythonic_struct_): pass
class exception(_rpythonic_struct_): pass
class DualQuat(_rpythonic_struct_): _array_wrapper_ = True
class VertexTangent(_rpythonic_struct_): _array_wrapper_ = True
class BHead(_rpythonic_struct_): pass
class BlendFileData(_rpythonic_struct_): _array_wrapper_ = True
class bPose(_rpythonic_struct_): pass
class BIK_ParamValue(_rpythonic_struct_): pass
class value(ctypes.Union): pass
class GHOST_TabletData(_rpythonic_struct_): pass
class GHOST_TEventCursorData(_rpythonic_struct_): pass
class GHOST_TEventButtonData(_rpythonic_struct_): pass
class GHOST_TEventWheelData(_rpythonic_struct_): pass
class GHOST_TEventTrackpadData(_rpythonic_struct_): pass
class GHOST_TEventDragnDropData(_rpythonic_struct_): pass
class GHOST_TStringArray(_rpythonic_struct_): pass
class GHOST_TEventNDOFMotionData(_rpythonic_struct_): pass
class GHOST_TEventNDOFButtonData(_rpythonic_struct_): pass
class GHOST_TEventKeyData(_rpythonic_struct_): pass
class GHOST_DisplaySetting(_rpythonic_struct_): pass
class GHOST_SystemHandle__(_rpythonic_struct_): pass
class GHOST_TimerTaskHandle__(_rpythonic_struct_): pass
class GHOST_WindowHandle__(_rpythonic_struct_): pass
class GHOST_EventHandle__(_rpythonic_struct_): pass
class GHOST_RectangleHandle__(_rpythonic_struct_): pass
class GHOST_EventConsumerHandle__(_rpythonic_struct_): pass
class GHOST_SystemPathsHandle__(_rpythonic_struct_): pass
class plPhysicsSdkHandle__(_rpythonic_struct_): pass
class plDynamicsWorldHandle__(_rpythonic_struct_): pass
class plRigidBodyHandle__(_rpythonic_struct_): pass
class plCollisionShapeHandle__(_rpythonic_struct_): pass
class plConstraintHandle__(_rpythonic_struct_): pass
class plMeshInterfaceHandle__(_rpythonic_struct_): pass
class plCollisionBroadphaseHandle__(_rpythonic_struct_): pass
class plBroadphaseProxyHandle__(_rpythonic_struct_): pass
class plCollisionWorldHandle__(_rpythonic_struct_): pass
class plRayCastResult(_rpythonic_struct_): pass
class Ipo(_rpythonic_struct_): pass
class MTex(_rpythonic_struct_): _array_wrapper_ = True
class PluginTex(_rpythonic_struct_): _array_wrapper_ = True
class CBData(_rpythonic_struct_): pass
class ColorBand(_rpythonic_struct_): _array_wrapper_ = True
class EnvMap(_rpythonic_struct_): _array_wrapper_ = True
class PointDensity(_rpythonic_struct_): _array_wrapper_ = True
class VoxelData(_rpythonic_struct_): _array_wrapper_ = True
class Tex(_rpythonic_struct_): _array_wrapper_ = True
class TexMapping(_rpythonic_struct_): _array_wrapper_ = True
class uiFont(_rpythonic_struct_): _array_wrapper_ = True
class uiFontStyle(_rpythonic_struct_): _array_wrapper_ = True
class uiStyle(_rpythonic_struct_): _array_wrapper_ = True
class uiWidgetColors(_rpythonic_struct_): _array_wrapper_ = True
class uiWidgetStateColors(_rpythonic_struct_): _array_wrapper_ = True
class ThemeUI(_rpythonic_struct_): _array_wrapper_ = True
class ThemeSpace(_rpythonic_struct_): _array_wrapper_ = True
class ThemeWireColor(_rpythonic_struct_): _array_wrapper_ = True
class bTheme(_rpythonic_struct_): _array_wrapper_ = True
class bAddon(_rpythonic_struct_): _array_wrapper_ = True
class SolidLight(_rpythonic_struct_): _array_wrapper_ = True
class UserDef(_rpythonic_struct_): _array_wrapper_ = True
class AutoComplete(_rpythonic_struct_): pass
class uiBut(_rpythonic_struct_): pass
class uiPopupBlockHandle(_rpythonic_struct_): pass
class uiPopupMenu(_rpythonic_struct_): pass
class uiSearchItems(_rpythonic_struct_): pass
class bCallbackFuncStore(_rpythonic_struct_): pass
## union and structures ##
__freeze_rpythonic_struct( fenv_t, [
	( "__control_word", ctypes.c_uint16 ),
	( "__unused1", ctypes.c_uint16 ),
	( "__status_word", ctypes.c_uint16 ),
	( "__unused2", ctypes.c_uint16 ),
	( "__tags", ctypes.c_uint16 ),
	( "__unused3", ctypes.c_uint16 ),
	( "__eip", ctypes.c_uint ),
	( "__cs_selector", ctypes.c_uint16 ),
	( "__opcode", ctypes.c_uint ),
	( "__unused4", ctypes.c_uint ),
	( "__data_offset", ctypes.c_uint ),
	( "__data_selector", ctypes.c_uint16 ),
	( "__unused5", ctypes.c_uint16 ),
])

__freeze_rpythonic_struct( __wait_terminated, [
	( "__w_termsig", ctypes.c_uint ),
	( "__w_coredump", ctypes.c_uint ),
	( "__w_retcode", ctypes.c_uint ),
	#opaque-warning# <rpythonic.rpythonic.SomeThing object at 0xc49666c>
])

__freeze_rpythonic_struct( __wait_stopped, [
	( "__w_stopval", ctypes.c_uint ),
	( "__w_stopsig", ctypes.c_uint ),
	#opaque-warning# <rpythonic.rpythonic.SomeThing object at 0xc4967cc>
])

__freeze_rpythonic_struct( wait, [
	( "w_status", ctypes.c_int ),
	( "__wait_terminated", __wait_terminated ),
	( "__wait_stopped", __wait_stopped ),
])

__freeze_rpythonic_struct( __WAIT_STATUS, [
	( "__uptr", ctypes.POINTER(wait) ),
	( "__iptr", ctypes.POINTER(ctypes.c_int) ),
])

__freeze_rpythonic_struct( div_t, [
	( "quot", ctypes.c_int ),
	( "rem", ctypes.c_int ),
])

__freeze_rpythonic_struct( ldiv_t, [
	( "quot", ctypes.c_int64 ),
	( "rem", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( lldiv_t, [
	( "quot", ctypes.c_longlong ),
	( "rem", ctypes.c_longlong ),
])

__freeze_rpythonic_struct( __locale_data, [
])

__freeze_rpythonic_struct( __locale_struct, [
	( "__locales", ctypes.POINTER(( __locale_data * 13 )) ),
	( "__ctype_b", ctypes.POINTER(ctypes.c_uint16) ),
	( "__ctype_tolower", ctypes.POINTER(ctypes.c_int) ),
	( "__ctype_toupper", ctypes.POINTER(ctypes.c_int) ),
	( "__names", ctypes.POINTER(( ctypes.c_char * 13 )) ),
])

__freeze_rpythonic_struct( __fsid_t, [
	( "__val", ( ctypes.c_int * 2 ) ),
])

__freeze_rpythonic_struct( __sigset_t, [
	( "__val", ctypes.c_uint64 ),
])

__freeze_rpythonic_struct( timespec, [
	( "tv_sec", ctypes.c_int64 ),
	( "tv_nsec", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( timeval, [
	( "tv_sec", ctypes.c_int64 ),
	( "tv_usec", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( fd_set, [
	( "fds_bits", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_attr_t, [
	( "__size", ( ctypes.c_char * 36 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( __pthread_internal_slist, [
	( "__next", ctypes.POINTER(__pthread_internal_slist) ),
])

__freeze_rpythonic_struct( __pthread_mutex_s, [
	( "__lock", ctypes.c_int ),
	( "__count", ctypes.c_uint ),
	( "__owner", ctypes.c_int ),
	( "__kind", ctypes.c_int ),
	( "__nusers", ctypes.c_uint ),
	#opaque-warning# <rpythonic.rpythonic.SomeThing object at 0xc54024c>
])

__freeze_rpythonic_struct( pthread_mutex_t, [
	( "__data", __pthread_mutex_s ),
	( "__size", ( ctypes.c_char * 24 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_mutexattr_t, [
	( "__size", ( ctypes.c_char * 4 ) ),
	( "__align", ctypes.c_int ),
])

__freeze_rpythonic_struct( __data, [
	( "__lock", ctypes.c_int ),
	( "__nr_readers", ctypes.c_uint ),
	( "__readers_wakeup", ctypes.c_uint ),
	( "__writer_wakeup", ctypes.c_uint ),
	( "__nr_readers_queued", ctypes.c_uint ),
	( "__nr_writers_queued", ctypes.c_uint ),
	( "__flags", ctypes.c_ubyte ),
	( "__shared", ctypes.c_ubyte ),
	( "__pad1", ctypes.c_ubyte ),
	( "__pad2", ctypes.c_ubyte ),
	( "__writer", ctypes.c_int ),
])

__freeze_rpythonic_struct( pthread_cond_t, [
	( "__data", __data ),
	( "__size", ( ctypes.c_char * 48 ) ),
	( "__align", ctypes.c_longlong ),
])

__freeze_rpythonic_struct( pthread_condattr_t, [
	( "__size", ( ctypes.c_char * 4 ) ),
	( "__align", ctypes.c_int ),
])

__freeze_rpythonic_struct( pthread_rwlock_t, [
	( "__data", __data ),
	( "__size", ( ctypes.c_char * 32 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_rwlockattr_t, [
	( "__size", ( ctypes.c_char * 8 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_barrier_t, [
	( "__size", ( ctypes.c_char * 20 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_barrierattr_t, [
	( "__size", ( ctypes.c_char * 4 ) ),
	( "__align", ctypes.c_int ),
])

__freeze_rpythonic_struct( random_data, [
	( "fptr", ctypes.POINTER(ctypes.c_int32) ),
	( "rptr", ctypes.POINTER(ctypes.c_int32) ),
	( "state", ctypes.POINTER(ctypes.c_int32) ),
	( "rand_type", ctypes.c_int ),
	( "rand_deg", ctypes.c_int ),
	( "rand_sep", ctypes.c_int ),
	( "end_ptr", ctypes.POINTER(ctypes.c_int32) ),
])

__freeze_rpythonic_struct( drand48_data, [
	( "__x", ( ctypes.c_uint16 * 3 ) ),
	( "__old_x", ( ctypes.c_uint16 * 3 ) ),
	( "__c", ctypes.c_uint16 ),
	( "__init", ctypes.c_uint16 ),
	( "__a", ctypes.c_ulonglong ),
])

__freeze_rpythonic_struct( sigval, [
	( "sival_int", ctypes.c_int ),
	( "sival_ptr", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _kill, [
	( "si_pid", ctypes.c_int ),
	( "si_uid", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _timer, [
	( "si_tid", ctypes.c_int ),
	( "si_overrun", ctypes.c_int ),
	( "si_sigval", sigval ),
])

__freeze_rpythonic_struct( _rt, [
	( "si_pid", ctypes.c_int ),
	( "si_uid", ctypes.c_uint ),
	( "si_sigval", sigval ),
])

__freeze_rpythonic_struct( _sigchld, [
	( "si_pid", ctypes.c_int ),
	( "si_uid", ctypes.c_uint ),
	( "si_status", ctypes.c_int ),
	( "si_utime", ctypes.c_int64 ),
	( "si_stime", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( _sigfault, [
	( "si_addr", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _sigpoll, [
	( "si_band", ctypes.c_int64 ),
	( "si_fd", ctypes.c_int ),
])

__freeze_rpythonic_struct( _sifields, [
	( "_pad", ctypes.c_int ),
	( "_kill", _kill ),
	( "_timer", _timer ),
	( "_rt", _rt ),
	( "_sigchld", _sigchld ),
	( "_sigfault", _sigfault ),
	( "_sigpoll", _sigpoll ),
])

__freeze_rpythonic_struct( siginfo, [
	( "si_signo", ctypes.c_int ),
	( "si_errno", ctypes.c_int ),
	( "si_code", ctypes.c_int ),
	( "_sifields", _sifields ),
])

__freeze_rpythonic_struct( _sigev_thread, [
	( "_function", ctypes.c_void_p ),
	( "_attribute", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _sigev_un, [
	( "_pad", ctypes.c_int ),
	( "_tid", ctypes.c_int ),
	( "_sigev_thread", _sigev_thread ),
])

__freeze_rpythonic_struct( sigevent, [
	( "sigev_value", sigval ),
	( "sigev_signo", ctypes.c_int ),
	( "sigev_notify", ctypes.c_int ),
	( "_sigev_un", _sigev_un ),
])

__freeze_rpythonic_struct( __sigaction_handler, [
	( "sa_handler", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,) ),
	( "sa_sigaction", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( sigaction, [
	( "__sigaction_handler", __sigaction_handler ),
	( "sa_mask", __sigset_t ),
	( "sa_flags", ctypes.c_int ),
	( "sa_restorer", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( sigvec, [
	( "sv_handler", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,) ),
	( "sv_mask", ctypes.c_int ),
	( "sv_flags", ctypes.c_int ),
])

__freeze_rpythonic_struct( _fpreg, [
	( "significand", ( ctypes.c_ushort * 4 ) ),
	( "exponent", ctypes.c_ushort ),
])

__freeze_rpythonic_struct( _fpxreg, [
	( "significand", ( ctypes.c_ushort * 4 ) ),
	( "exponent", ctypes.c_ushort ),
	( "padding", ( ctypes.c_ushort * 3 ) ),
])

__freeze_rpythonic_struct( _xmmreg, [
	( "element", ( ctypes.c_uint * 4 ) ),
])

__freeze_rpythonic_struct( _fpstate, [
	( "cw", ctypes.c_uint ),
	( "sw", ctypes.c_uint ),
	( "tag", ctypes.c_uint ),
	( "ipoff", ctypes.c_uint ),
	( "cssel", ctypes.c_uint ),
	( "dataoff", ctypes.c_uint ),
	( "datasel", ctypes.c_uint ),
	( "_st", ( _fpreg * 8 ) ),
	( "status", ctypes.c_ushort ),
	( "magic", ctypes.c_ushort ),
	( "_fxsr_env", ( ctypes.c_uint * 6 ) ),
	( "mxcsr", ctypes.c_uint ),
	( "reserved", ctypes.c_uint ),
	( "_fxsr_st", ( _fpxreg * 8 ) ),
	( "_xmm", ( _xmmreg * 8 ) ),
	( "padding", ( ctypes.c_uint * 56 ) ),
])

__freeze_rpythonic_struct( sigcontext, [
	( "gs", ctypes.c_ushort ),
	( "__gsh", ctypes.c_ushort ),
	( "fs", ctypes.c_ushort ),
	( "__fsh", ctypes.c_ushort ),
	( "es", ctypes.c_ushort ),
	( "__esh", ctypes.c_ushort ),
	( "ds", ctypes.c_ushort ),
	( "__dsh", ctypes.c_ushort ),
	( "edi", ctypes.c_ulong ),
	( "esi", ctypes.c_ulong ),
	( "ebp", ctypes.c_ulong ),
	( "esp", ctypes.c_ulong ),
	( "ebx", ctypes.c_ulong ),
	( "edx", ctypes.c_ulong ),
	( "ecx", ctypes.c_ulong ),
	( "eax", ctypes.c_ulong ),
	( "trapno", ctypes.c_ulong ),
	( "err", ctypes.c_ulong ),
	( "eip", ctypes.c_ulong ),
	( "cs", ctypes.c_ushort ),
	( "__csh", ctypes.c_ushort ),
	( "eflags", ctypes.c_ulong ),
	( "esp_at_signal", ctypes.c_ulong ),
	( "ss", ctypes.c_ushort ),
	( "__ssh", ctypes.c_ushort ),
	( "fpstate", ctypes.POINTER(_fpstate) ),
	( "oldmask", ctypes.c_ulong ),
	( "cr2", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( sigstack, [
	( "ss_sp", ctypes.POINTER(ctypes.c_void_p) ),
	( "ss_onstack", ctypes.c_int ),
])

__freeze_rpythonic_struct( sigaltstack, [
	( "ss_sp", ctypes.POINTER(ctypes.c_void_p) ),
	( "ss_flags", ctypes.c_int ),
	( "ss_size", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _libc_fpreg, [
	( "significand", ( ctypes.c_uint16 * 4 ) ),
	( "exponent", ctypes.c_uint16 ),
])

__freeze_rpythonic_struct( _libc_fpstate, [
	( "cw", ctypes.c_uint64 ),
	( "sw", ctypes.c_uint64 ),
	( "tag", ctypes.c_uint64 ),
	( "ipoff", ctypes.c_uint64 ),
	( "cssel", ctypes.c_uint64 ),
	( "dataoff", ctypes.c_uint64 ),
	( "datasel", ctypes.c_uint64 ),
	( "_st", ( _libc_fpreg * 8 ) ),
	( "status", ctypes.c_uint64 ),
])

__freeze_rpythonic_struct( mcontext_t, [
	( "gregs", ( ctypes.c_int * 19 ) ),
	( "fpregs", ctypes.POINTER(_libc_fpstate) ),
	( "oldmask", ctypes.c_uint64 ),
	( "cr2", ctypes.c_uint64 ),
])

__freeze_rpythonic_struct( ucontext, [
	( "uc_flags", ctypes.c_uint64 ),
	( "uc_link", ctypes.POINTER(ucontext) ),
	( "uc_stack", sigaltstack ),
	( "uc_mcontext", mcontext_t ),
	( "uc_sigmask", __sigset_t ),
	( "__fpregs_mem", _libc_fpstate ),
])

__freeze_rpythonic_struct( __value, [
	( "__wch", ctypes.c_uint ),
	( "__wchb", ( ctypes.c_char * 4 ) ),
])

__freeze_rpythonic_struct( __mbstate_t, [
	( "__count", ctypes.c_int ),
	( "__value", __value ),
])

__freeze_rpythonic_struct( _G_fpos_t, [
	( "__pos", ctypes.c_int64 ),
	( "__state", __mbstate_t ),
])

__freeze_rpythonic_struct( _G_fpos64_t, [
	( "__pos", ctypes.c_longlong ),
	( "__state", __mbstate_t ),
])

__freeze_rpythonic_struct( _IO_jump_t, [
])

__freeze_rpythonic_struct( _IO_marker, [
	( "_next", ctypes.POINTER(_IO_marker) ),
	( "_sbuf", ctypes.POINTER(_IO_FILE) ),
	( "_pos", ctypes.c_int ),
])

__freeze_rpythonic_struct( _IO_FILE, [
	( "_flags", ctypes.c_int ),
	( "_IO_read_ptr", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_read_end", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_read_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_write_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_write_ptr", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_write_end", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_buf_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_buf_end", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_save_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_backup_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_save_end", ctypes.POINTER(ctypes.c_char) ),
	( "_markers", ctypes.POINTER(_IO_marker) ),
	( "_chain", ctypes.POINTER(_IO_FILE) ),
	( "_fileno", ctypes.c_int ),
	( "_flags2", ctypes.c_int ),
	( "_old_offset", ctypes.c_int64 ),
	( "_cur_column", ctypes.c_ushort ),
	( "_vtable_offset", ctypes.c_char ),
	( "_shortbuf", ( ctypes.c_char * 1 ) ),
	( "_lock", ctypes.POINTER(ctypes.c_void_p) ),
	( "_offset", ctypes.c_longlong ),
	( "__pad1", ctypes.POINTER(ctypes.c_void_p) ),
	( "__pad2", ctypes.POINTER(ctypes.c_void_p) ),
	( "__pad3", ctypes.POINTER(ctypes.c_void_p) ),
	( "__pad4", ctypes.POINTER(ctypes.c_void_p) ),
	( "__pad5", ctypes.c_uint ),
	( "_mode", ctypes.c_int ),
	( "_unused2", ctypes.c_char ),
])

__freeze_rpythonic_struct( _IO_FILE_plus, [
])

__freeze_rpythonic_struct( _IO_cookie_io_functions_t, [
	( "read", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),ctypes.c_uint,) ),
	( "write", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),ctypes.c_uint,) ),
	( "seek", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_longlong),ctypes.c_int,) ),
	( "close", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
])

__freeze_rpythonic_struct( _IO_cookie_file, [
])

__freeze_rpythonic_struct( obstack, [
])

__freeze_rpythonic_struct( iovec, [
	( "iov_base", ctypes.POINTER(ctypes.c_void_p) ),
	( "iov_len", ctypes.c_uint ),
])

__freeze_rpythonic_struct( sockaddr, [
	( "sa_family", ctypes.c_uint16 ),
	( "sa_data", ( ctypes.c_char * 14 ) ),
])

__freeze_rpythonic_struct( sockaddr_storage, [
	( "ss_family", ctypes.c_uint16 ),
	( "__ss_align", ctypes.c_uint64 ),
	( "__ss_padding", ctypes.c_char ),
])

__freeze_rpythonic_struct( msghdr, [
	( "msg_name", ctypes.POINTER(ctypes.c_void_p) ),
	( "msg_namelen", ctypes.c_uint ),
	( "msg_iov", ctypes.POINTER(iovec) ),
	( "msg_iovlen", ctypes.c_uint ),
	( "msg_control", ctypes.POINTER(ctypes.c_void_p) ),
	( "msg_controllen", ctypes.c_uint ),
	( "msg_flags", ctypes.c_int ),
])

__freeze_rpythonic_struct( mmsghdr, [
	( "msg_hdr", msghdr ),
	( "msg_len", ctypes.c_uint ),
])

__freeze_rpythonic_struct( cmsghdr, [
	( "cmsg_len", ctypes.c_uint ),
	( "cmsg_level", ctypes.c_int ),
	( "cmsg_type", ctypes.c_int ),
	( "__cmsg_data", ctypes.c_ubyte ),
])

__freeze_rpythonic_struct( ucred, [
	( "pid", ctypes.c_int ),
	( "uid", ctypes.c_uint ),
	( "gid", ctypes.c_uint ),
])

__freeze_rpythonic_struct( linger, [
	( "l_onoff", ctypes.c_int ),
	( "l_linger", ctypes.c_int ),
])

__freeze_rpythonic_struct( osockaddr, [
	( "sa_family", ctypes.c_uint16 ),
	( "sa_data", ( ctypes.c_ubyte * 14 ) ),
])

__freeze_rpythonic_struct( sockaddr_at, [
])

__freeze_rpythonic_struct( sockaddr_ax25, [
])

__freeze_rpythonic_struct( sockaddr_dl, [
])

__freeze_rpythonic_struct( sockaddr_eon, [
])

__freeze_rpythonic_struct( in_addr, [
	( "s_addr", ctypes.c_uint32 ),
])

__freeze_rpythonic_struct( sockaddr_in, [
	( "sin_family", ctypes.c_uint16 ),
	( "sin_port", ctypes.c_uint16 ),
	( "sin_addr", in_addr ),
	( "sin_zero", ctypes.c_ubyte ),
])

__freeze_rpythonic_struct( __in6_u, [
	( "__u6_addr8", ( ctypes.c_uint8 * 16 ) ),
	( "__u6_addr16", ( ctypes.c_uint16 * 8 ) ),
	( "__u6_addr32", ( ctypes.c_uint32 * 4 ) ),
])

__freeze_rpythonic_struct( in6_addr, [
	( "__in6_u", __in6_u ),
])

__freeze_rpythonic_struct( sockaddr_in6, [
	( "sin6_family", ctypes.c_uint16 ),
	( "sin6_port", ctypes.c_uint16 ),
	( "sin6_flowinfo", ctypes.c_uint32 ),
	( "sin6_addr", in6_addr ),
	( "sin6_scope_id", ctypes.c_uint32 ),
])

__freeze_rpythonic_struct( sockaddr_inarp, [
])

__freeze_rpythonic_struct( sockaddr_ipx, [
])

__freeze_rpythonic_struct( sockaddr_iso, [
])

__freeze_rpythonic_struct( sockaddr_ns, [
])

__freeze_rpythonic_struct( sockaddr_un, [
])

__freeze_rpythonic_struct( sockaddr_x25, [
])

__freeze_rpythonic_struct( __SOCKADDR_ARG, [
	( "__sockaddr__", ctypes.POINTER(sockaddr) ),
	( "__sockaddr_at__", ctypes.POINTER(sockaddr_at) ),
	( "__sockaddr_ax25__", ctypes.POINTER(sockaddr_ax25) ),
	( "__sockaddr_dl__", ctypes.POINTER(sockaddr_dl) ),
	( "__sockaddr_eon__", ctypes.POINTER(sockaddr_eon) ),
	( "__sockaddr_in__", ctypes.POINTER(sockaddr_in) ),
	( "__sockaddr_in6__", ctypes.POINTER(sockaddr_in6) ),
	( "__sockaddr_inarp__", ctypes.POINTER(sockaddr_inarp) ),
	( "__sockaddr_ipx__", ctypes.POINTER(sockaddr_ipx) ),
	( "__sockaddr_iso__", ctypes.POINTER(sockaddr_iso) ),
	( "__sockaddr_ns__", ctypes.POINTER(sockaddr_ns) ),
	( "__sockaddr_un__", ctypes.POINTER(sockaddr_un) ),
	( "__sockaddr_x25__", ctypes.POINTER(sockaddr_x25) ),
])

__freeze_rpythonic_struct( __CONST_SOCKADDR_ARG, [
	( "__sockaddr__", ctypes.POINTER(sockaddr) ),
	( "__sockaddr_at__", ctypes.POINTER(sockaddr_at) ),
	( "__sockaddr_ax25__", ctypes.POINTER(sockaddr_ax25) ),
	( "__sockaddr_dl__", ctypes.POINTER(sockaddr_dl) ),
	( "__sockaddr_eon__", ctypes.POINTER(sockaddr_eon) ),
	( "__sockaddr_in__", ctypes.POINTER(sockaddr_in) ),
	( "__sockaddr_in6__", ctypes.POINTER(sockaddr_in6) ),
	( "__sockaddr_inarp__", ctypes.POINTER(sockaddr_inarp) ),
	( "__sockaddr_ipx__", ctypes.POINTER(sockaddr_ipx) ),
	( "__sockaddr_iso__", ctypes.POINTER(sockaddr_iso) ),
	( "__sockaddr_ns__", ctypes.POINTER(sockaddr_ns) ),
	( "__sockaddr_un__", ctypes.POINTER(sockaddr_un) ),
	( "__sockaddr_x25__", ctypes.POINTER(sockaddr_x25) ),
])

__freeze_rpythonic_struct( ip_mreq, [
	( "imr_multiaddr", in_addr ),
	( "imr_interface", in_addr ),
])

__freeze_rpythonic_struct( ip_mreq_source, [
	( "imr_multiaddr", in_addr ),
	( "imr_interface", in_addr ),
	( "imr_sourceaddr", in_addr ),
])

__freeze_rpythonic_struct( ipv6_mreq, [
	( "ipv6mr_multiaddr", in6_addr ),
	( "ipv6mr_interface", ctypes.c_uint ),
])

__freeze_rpythonic_struct( group_req, [
	( "gr_interface", ctypes.c_uint32 ),
	( "gr_group", sockaddr_storage ),
])

__freeze_rpythonic_struct( group_source_req, [
	( "gsr_interface", ctypes.c_uint32 ),
	( "gsr_group", sockaddr_storage ),
	( "gsr_source", sockaddr_storage ),
])

__freeze_rpythonic_struct( ip_msfilter, [
	( "imsf_multiaddr", in_addr ),
	( "imsf_interface", in_addr ),
	( "imsf_fmode", ctypes.c_uint32 ),
	( "imsf_numsrc", ctypes.c_uint32 ),
	( "imsf_slist", ( in_addr * 1 ) ),
])

__freeze_rpythonic_struct( group_filter, [
	( "gf_interface", ctypes.c_uint32 ),
	( "gf_group", sockaddr_storage ),
	( "gf_fmode", ctypes.c_uint32 ),
	( "gf_numsrc", ctypes.c_uint32 ),
	( "gf_slist", ( sockaddr_storage * 1 ) ),
])

__freeze_rpythonic_struct( ip_opts, [
	( "ip_dst", in_addr ),
	( "ip_opts", ( ctypes.c_char * 40 ) ),
])

__freeze_rpythonic_struct( ip_mreqn, [
	( "imr_multiaddr", in_addr ),
	( "imr_address", in_addr ),
	( "imr_ifindex", ctypes.c_int ),
])

__freeze_rpythonic_struct( in_pktinfo, [
	( "ipi_ifindex", ctypes.c_int ),
	( "ipi_spec_dst", in_addr ),
	( "ipi_addr", in_addr ),
])

__freeze_rpythonic_struct( in6_pktinfo, [
	( "ipi6_addr", in6_addr ),
	( "ipi6_ifindex", ctypes.c_uint ),
])

__freeze_rpythonic_struct( ip6_mtuinfo, [
	( "ip6m_addr", sockaddr_in6 ),
	( "ip6m_mtu", ctypes.c_uint32 ),
])

__freeze_rpythonic_struct( bArgs, [
])

__freeze_rpythonic_struct( sched_param, [
	( "__sched_priority", ctypes.c_int ),
])

__freeze_rpythonic_struct( __sched_param, [
	( "__sched_priority", ctypes.c_int ),
])

__freeze_rpythonic_struct( cpu_set_t, [
	( "__bits", ctypes.c_uint64 ),
])

__freeze_rpythonic_struct( tm, [
	( "tm_sec", ctypes.c_int ),
	( "tm_min", ctypes.c_int ),
	( "tm_hour", ctypes.c_int ),
	( "tm_mday", ctypes.c_int ),
	( "tm_mon", ctypes.c_int ),
	( "tm_year", ctypes.c_int ),
	( "tm_wday", ctypes.c_int ),
	( "tm_yday", ctypes.c_int ),
	( "tm_isdst", ctypes.c_int ),
	( "tm_gmtoff", ctypes.c_int64 ),
	( "tm_zone", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( itimerspec, [
	( "it_interval", timespec ),
	( "it_value", timespec ),
])

__freeze_rpythonic_struct( _pthread_cleanup_buffer, [
	( "__routine", ctypes.c_void_p ),
	( "__arg", ctypes.POINTER(ctypes.c_void_p) ),
	( "__canceltype", ctypes.c_int ),
	( "__prev", ctypes.POINTER(_pthread_cleanup_buffer) ),
])

__freeze_rpythonic_struct( __cancel_jmp_buf, [
	( "__cancel_jmp_buf", ( ctypes.c_int * 7 ) ),
	( "__mask_was_saved", ( ctypes.c_int * 1 ) ),
])

__freeze_rpythonic_struct( __pthread_unwind_buf_t, [
	( "__cancel_jmp_buf", ( __cancel_jmp_buf * 1 ) ),
	( "__pad", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( __pthread_cleanup_frame, [
	( "__cancel_routine", ctypes.c_void_p ),
	( "__cancel_arg", ctypes.POINTER(ctypes.c_void_p) ),
	( "__do_it", ctypes.c_int ),
	( "__cancel_type", ctypes.c_int ),
])

__freeze_rpythonic_struct( __jmp_buf_tag, [
])

__freeze_rpythonic_struct( ThreadedWorker, [
])

__freeze_rpythonic_struct( ThreadQueue, [
])

__freeze_rpythonic_struct( EditVert, [
])

__freeze_rpythonic_struct( EditEdge, [
])

__freeze_rpythonic_struct( Link, [
	( "next", ctypes.POINTER(Link) ),
	( "prev", ctypes.POINTER(Link) ),
])

__freeze_rpythonic_struct( LinkData, [
	( "next", ctypes.POINTER(LinkData) ),
	( "prev", ctypes.POINTER(LinkData) ),
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( ListBase, [
	( "first", ctypes.POINTER(ctypes.c_void_p) ),
	( "last", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( direntry, [
])

__freeze_rpythonic_struct( LinkNode, [
])

__freeze_rpythonic_struct( BLI_mempool, [
])

__freeze_rpythonic_struct( Entry, [
	( "next", ctypes.POINTER(Entry) ),
	( "key", ctypes.POINTER(ctypes.c_void_p) ),
	( "val", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( GHash, [
	( "hashfp", ctypes.CFUNCTYPE(ctypes.c_uint, ) ),
	( "cmpfp", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),) ),
	( "buckets", ctypes.POINTER(ctypes.POINTER(Entry)) ),
	( "entrypool", ctypes.POINTER(BLI_mempool) ),
	( "nbuckets", ctypes.c_int ),
	( "nentries", ctypes.c_int ),
	( "cursize", ctypes.c_int ),
])

__freeze_rpythonic_struct( GHashIterator, [
	( "gh", ctypes.POINTER(GHash) ),
	( "curBucket", ctypes.c_int ),
	( "curEntry", ctypes.POINTER(Entry) ),
])

__freeze_rpythonic_struct( FileData, [
])

__freeze_rpythonic_struct( IDPropertyData, [
	( "pointer", ctypes.POINTER(ctypes.c_void_p) ),
	( "group", ListBase ),
	( "val", ctypes.c_int ),
	( "val2", ctypes.c_int ),
])

__freeze_rpythonic_struct( IDProperty, [
	( "next", ctypes.POINTER(IDProperty) ),
	( "prev", ctypes.POINTER(IDProperty) ),
	( "C_type", ctypes.c_char ),
	( "subtype", ctypes.c_char ),
	( "flag", ctypes.c_short ),
	( "name", ( ctypes.c_char * 32 ) ),
	( "saved", ctypes.c_int ),
	( "data", IDPropertyData ),
	( "C_len", ctypes.c_int ),
	( "totallen", ctypes.c_int ),
])

__freeze_rpythonic_struct( ID, [
	( "next", ctypes.POINTER(ctypes.c_void_p) ),
	( "prev", ctypes.POINTER(ctypes.c_void_p) ),
	( "newid", ctypes.POINTER(ID) ),
	( "lib", ctypes.POINTER(Library) ),
	( "name", ( ctypes.c_char * 24 ) ),
	( "us", ctypes.c_short ),
	( "flag", ctypes.c_short ),
	( "icon_id", ctypes.c_int ),
	( "properties", ctypes.POINTER(IDProperty) ),
])

__freeze_rpythonic_struct( Library, [
	( "C_id", ID ),
	( "idblock", ctypes.POINTER(ID) ),
	( "filedata", ctypes.POINTER(FileData) ),
	( "name", ( ctypes.c_char * 240 ) ),
	( "filepath", ( ctypes.c_char * 240 ) ),
	( "tot", ctypes.c_int ),
	( "pad", ctypes.c_int ),
	( "parent", ctypes.POINTER(Library) ),
])

__freeze_rpythonic_struct( PreviewImage, [
	( "w", ( ctypes.c_uint * 2 ) ),
	( "h", ( ctypes.c_uint * 2 ) ),
	( "changed", ( ctypes.c_short * 2 ) ),
	( "changed_timestamp", ( ctypes.c_short * 2 ) ),
	( "rect", ctypes.POINTER(( ctypes.c_uint * 2 )) ),
])

__freeze_rpythonic_struct( vec2s, [
	( "x", ctypes.c_short ),
	( "y", ctypes.c_short ),
])

__freeze_rpythonic_struct( vec2f, [
	( "x", ctypes.c_float ),
	( "y", ctypes.c_float ),
])

__freeze_rpythonic_struct( rcti, [
	( "xmin", ctypes.c_int ),
	( "xmax", ctypes.c_int ),
	( "ymin", ctypes.c_int ),
	( "ymax", ctypes.c_int ),
])

__freeze_rpythonic_struct( rctf, [
	( "xmin", ctypes.c_float ),
	( "xmax", ctypes.c_float ),
	( "ymin", ctypes.c_float ),
	( "ymax", ctypes.c_float ),
])

__freeze_rpythonic_struct( Object, [
])

__freeze_rpythonic_struct( Brush, [
])

__freeze_rpythonic_struct( World, [
])

__freeze_rpythonic_struct( Group, [
])

__freeze_rpythonic_struct( Text, [
])

__freeze_rpythonic_struct( bNodeTree, [
])

__freeze_rpythonic_struct( AnimData, [
])

__freeze_rpythonic_struct( Editing, [
])

__freeze_rpythonic_struct( SceneStats, [
])

__freeze_rpythonic_struct( bGPdata, [
])

__freeze_rpythonic_struct( Base, [
	( "next", ctypes.POINTER(Base) ),
	( "prev", ctypes.POINTER(Base) ),
	( "lay", ctypes.c_uint ),
	( "selcol", ctypes.c_uint ),
	( "flag", ctypes.c_int ),
	( "sx", ctypes.c_short ),
	( "sy", ctypes.c_short ),
	( "C_object", ctypes.POINTER(Object) ),
])

__freeze_rpythonic_struct( AviCodecData, [
	( "lpFormat", ctypes.POINTER(ctypes.c_void_p) ),
	( "lpParms", ctypes.POINTER(ctypes.c_void_p) ),
	( "cbFormat", ctypes.c_uint ),
	( "cbParms", ctypes.c_uint ),
	( "fccType", ctypes.c_uint ),
	( "fccHandler", ctypes.c_uint ),
	( "dwKeyFrameEvery", ctypes.c_uint ),
	( "dwQuality", ctypes.c_uint ),
	( "dwBytesPerSecond", ctypes.c_uint ),
	( "dwFlags", ctypes.c_uint ),
	( "dwInterleaveEvery", ctypes.c_uint ),
	( "pad", ctypes.c_uint ),
	( "avicodecname", ( ctypes.c_char * 128 ) ),
])

__freeze_rpythonic_struct( QuicktimeCodecData, [
	( "cdParms", ctypes.POINTER(ctypes.c_void_p) ),
	( "pad", ctypes.POINTER(ctypes.c_void_p) ),
	( "cdSize", ctypes.c_uint ),
	( "pad2", ctypes.c_uint ),
	( "qtcodecname", ( ctypes.c_char * 128 ) ),
])

__freeze_rpythonic_struct( QuicktimeCodecSettings, [
	( "codecType", ctypes.c_int ),
	( "codecSpatialQuality", ctypes.c_int ),
	( "codec", ctypes.c_int ),
	( "codecFlags", ctypes.c_int ),
	( "colorDepth", ctypes.c_int ),
	( "codecTemporalQuality", ctypes.c_int ),
	( "minSpatialQuality", ctypes.c_int ),
	( "minTemporalQuality", ctypes.c_int ),
	( "keyFrameRate", ctypes.c_int ),
	( "bitRate", ctypes.c_int ),
	( "audiocodecType", ctypes.c_int ),
	( "audioSampleRate", ctypes.c_int ),
	( "audioBitDepth", ctypes.c_short ),
	( "audioChannels", ctypes.c_short ),
	( "audioCodecFlags", ctypes.c_int ),
	( "audioBitRate", ctypes.c_int ),
	( "pad1", ctypes.c_int ),
])

__freeze_rpythonic_struct( FFMpegCodecData, [
	( "C_type", ctypes.c_int ),
	( "codec", ctypes.c_int ),
	( "audio_codec", ctypes.c_int ),
	( "video_bitrate", ctypes.c_int ),
	( "audio_bitrate", ctypes.c_int ),
	( "audio_mixrate", ctypes.c_int ),
	( "audio_channels", ctypes.c_int ),
	( "audio_pad", ctypes.c_int ),
	( "audio_volume", ctypes.c_float ),
	( "gop_size", ctypes.c_int ),
	( "flags", ctypes.c_int ),
	( "rc_min_rate", ctypes.c_int ),
	( "rc_max_rate", ctypes.c_int ),
	( "rc_buffer_size", ctypes.c_int ),
	( "mux_packet_size", ctypes.c_int ),
	( "mux_rate", ctypes.c_int ),
	( "properties", ctypes.POINTER(IDProperty) ),
])

__freeze_rpythonic_struct( AudioData, [
	( "mixrate", ctypes.c_int ),
	( "main", ctypes.c_float ),
	( "speed_of_sound", ctypes.c_float ),
	( "doppler_factor", ctypes.c_float ),
	( "distance_model", ctypes.c_int ),
	( "flag", ctypes.c_short ),
	( "pad", ctypes.c_short ),
	( "volume", ctypes.c_float ),
	( "pad2", ctypes.c_float ),
])

__freeze_rpythonic_struct( Material, [
])

__freeze_rpythonic_struct( SceneRenderLayer, [
	( "next", ctypes.POINTER(SceneRenderLayer) ),
	( "prev", ctypes.POINTER(SceneRenderLayer) ),
	( "name", ( ctypes.c_char * 32 ) ),
	( "mat_override", ctypes.POINTER(Material) ),
	( "light_override", ctypes.POINTER(Group) ),
	( "lay", ctypes.c_uint ),
	( "lay_zmask", ctypes.c_uint ),
	( "layflag", ctypes.c_int ),
	( "pad", ctypes.c_int ),
	( "passflag", ctypes.c_int ),
	( "pass_xor", ctypes.c_int ),
])

__freeze_rpythonic_struct( RenderData, [
	( "avicodecdata", ctypes.POINTER(AviCodecData) ),
	( "qtcodecdata", ctypes.POINTER(QuicktimeCodecData) ),
	( "qtcodecsettings", QuicktimeCodecSettings ),
	( "ffcodecdata", FFMpegCodecData ),
	( "cfra", ctypes.c_int ),
	( "sfra", ctypes.c_int ),
	( "efra", ctypes.c_int ),
	( "subframe", ctypes.c_float ),
	( "psfra", ctypes.c_int ),
	( "pefra", ctypes.c_int ),
	( "images", ctypes.c_int ),
	( "framapto", ctypes.c_int ),
	( "flag", ctypes.c_short ),
	( "threads", ctypes.c_short ),
	( "framelen", ctypes.c_float ),
	( "blurfac", ctypes.c_float ),
	( "edgeR", ctypes.c_float ),
	( "edgeG", ctypes.c_float ),
	( "edgeB", ctypes.c_float ),
	( "fullscreen", ctypes.c_short ),
	( "xplay", ctypes.c_short ),
	( "yplay", ctypes.c_short ),
	( "freqplay", ctypes.c_short ),
	( "depth", ctypes.c_short ),
	( "attrib", ctypes.c_short ),
	( "frame_step", ctypes.c_int ),
	( "stereomode", ctypes.c_short ),
	( "dimensionspreset", ctypes.c_short ),
	( "filtertype", ctypes.c_short ),
	( "size", ctypes.c_short ),
	( "maximsize", ctypes.c_short ),
	( "xsch", ctypes.c_short ),
	( "ysch", ctypes.c_short ),
	( "xparts", ctypes.c_short ),
	( "yparts", ctypes.c_short ),
	( "planes", ctypes.c_short ),
	( "imtype", ctypes.c_short ),
	( "subimtype", ctypes.c_short ),
	( "quality", ctypes.c_short ),
	( "displaymode", ctypes.c_short ),
	( "scemode", ctypes.c_int ),
	( "mode", ctypes.c_int ),
	( "raytrace_options", ctypes.c_int ),
	( "raytrace_structure", ctypes.c_short ),
	( "renderer", ctypes.c_short ),
	( "ocres", ctypes.c_short ),
	( "pad4", ctypes.c_short ),
	( "alphamode", ctypes.c_short ),
	( "osa", ctypes.c_short ),
	( "frs_sec", ctypes.c_short ),
	( "edgeint", ctypes.c_short ),
	( "safety", rctf ),
	( "border", rctf ),
	( "disprect", rcti ),
	( "layers", ListBase ),
	( "actlay", ctypes.c_short ),
	( "mblur_samples", ctypes.c_short ),
	( "xasp", ctypes.c_float ),
	( "yasp", ctypes.c_float ),
	( "frs_sec_base", ctypes.c_float ),
	( "gauss", ctypes.c_float ),
	( "color_mgt_flag", ctypes.c_int ),
	( "postgamma", ctypes.c_float ),
	( "posthue", ctypes.c_float ),
	( "postsat", ctypes.c_float ),
	( "dither_intensity", ctypes.c_float ),
	( "bake_osa", ctypes.c_short ),
	( "bake_filter", ctypes.c_short ),
	( "bake_mode", ctypes.c_short ),
	( "bake_flag", ctypes.c_short ),
	( "bake_normal_space", ctypes.c_short ),
	( "bake_quad_split", ctypes.c_short ),
	( "bake_maxdist", ctypes.c_float ),
	( "bake_biasdist", ctypes.c_float ),
	( "bake_pad", ctypes.c_float ),
	( "pic", ( ctypes.c_char * 240 ) ),
	( "stamp", ctypes.c_int ),
	( "stamp_font_id", ctypes.c_short ),
	( "pad3", ctypes.c_short ),
	( "stamp_udata", ( ctypes.c_char * 160 ) ),
	( "fg_stamp", ( ctypes.c_float * 4 ) ),
	( "bg_stamp", ( ctypes.c_float * 4 ) ),
	( "seq_prev_type", ctypes.c_char ),
	( "seq_rend_type", ctypes.c_char ),
	( "seq_flag", ctypes.c_char ),
	( "pad5", ( ctypes.c_char * 5 ) ),
	( "simplify_flag", ctypes.c_int ),
	( "simplify_subsurf", ctypes.c_short ),
	( "simplify_shadowsamples", ctypes.c_short ),
	( "simplify_particles", ctypes.c_float ),
	( "simplify_aosss", ctypes.c_float ),
	( "cineonwhite", ctypes.c_short ),
	( "cineonblack", ctypes.c_short ),
	( "cineongamma", ctypes.c_float ),
	( "jp2_preset", ctypes.c_short ),
	( "jp2_depth", ctypes.c_short ),
	( "rpad3", ctypes.c_int ),
	( "domeres", ctypes.c_short ),
	( "domemode", ctypes.c_short ),
	( "domeangle", ctypes.c_short ),
	( "dometilt", ctypes.c_short ),
	( "domeresbuf", ctypes.c_float ),
	( "pad2", ctypes.c_float ),
	( "dometext", ctypes.POINTER(Text) ),
	( "engine", ( ctypes.c_char * 32 ) ),
])

__freeze_rpythonic_struct( RenderProfile, [
	( "next", ctypes.POINTER(RenderProfile) ),
	( "prev", ctypes.POINTER(RenderProfile) ),
	( "name", ( ctypes.c_char * 32 ) ),
	( "particle_perc", ctypes.c_short ),
	( "subsurf_max", ctypes.c_short ),
	( "shadbufsample_max", ctypes.c_short ),
	( "pad1", ctypes.c_short ),
	( "ao_error", ctypes.c_float ),
	( "pad2", ctypes.c_float ),
])

__freeze_rpythonic_struct( GameDome, [
	( "res", ctypes.c_short ),
	( "mode", ctypes.c_short ),
	( "angle", ctypes.c_short ),
	( "tilt", ctypes.c_short ),
	( "resbuf", ctypes.c_float ),
	( "pad2", ctypes.c_float ),
	( "warptext", ctypes.POINTER(Text) ),
])

__freeze_rpythonic_struct( GameFraming, [
	( "col", ( ctypes.c_float * 3 ) ),
	( "C_type", ctypes.c_char ),
	( "pad1", ctypes.c_char ),
	( "pad2", ctypes.c_char ),
	( "pad3", ctypes.c_char ),
])

__freeze_rpythonic_struct( GameData, [
	( "gravity", ctypes.c_float ),
	( "activityBoxRadius", ctypes.c_float ),
	( "mode", ctypes.c_short ),
	( "flag", ctypes.c_short ),
	( "matmode", ctypes.c_short ),
	( "pad", ( ctypes.c_short * 3 ) ),
	( "occlusionRes", ctypes.c_short ),
	( "physicsEngine", ctypes.c_short ),
	( "ticrate", ctypes.c_short ),
	( "maxlogicstep", ctypes.c_short ),
	( "physubstep", ctypes.c_short ),
	( "maxphystep", ctypes.c_short ),
	( "framing", GameFraming ),
	( "fullscreen", ctypes.c_short ),
	( "xplay", ctypes.c_short ),
	( "yplay", ctypes.c_short ),
	( "freqplay", ctypes.c_short ),
	( "depth", ctypes.c_short ),
	( "attrib", ctypes.c_short ),
	( "rt1", ctypes.c_short ),
	( "rt2", ctypes.c_short ),
	( "dome", GameDome ),
	( "stereoflag", ctypes.c_short ),
	( "stereomode", ctypes.c_short ),
	( "pad2", ctypes.c_short ),
	( "pad3", ctypes.c_short ),
	( "eyeseparation", ctypes.c_float ),
	( "pad1", ctypes.c_float ),
])

__freeze_rpythonic_struct( TimeMarker, [
	( "next", ctypes.POINTER(TimeMarker) ),
	( "prev", ctypes.POINTER(TimeMarker) ),
	( "frame", ctypes.c_int ),
	( "name", ( ctypes.c_char * 64 ) ),
	( "flag", ctypes.c_uint ),
	( "camera", ctypes.POINTER(Object) ),
])

__freeze_rpythonic_struct( Paint, [
	( "brush", ctypes.POINTER(Brush) ),
	( "paint_cursor", ctypes.POINTER(ctypes.c_void_p) ),
	( "paint_cursor_col", ( ctypes.c_ubyte * 4 ) ),
	( "flags", ctypes.c_int ),
])

__freeze_rpythonic_struct( ImagePaintSettings, [
	( "paint", Paint ),
	( "flag", ctypes.c_short ),
	( "pad", ctypes.c_short ),
	( "seam_bleed", ctypes.c_short ),
	( "normal_angle", ctypes.c_short ),
	( "screen_grab_size", ( ctypes.c_short * 2 ) ),
	( "pad1", ctypes.c_int ),
	( "paintcursor", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( ParticleBrushData, [
	( "size", ctypes.c_short ),
	( "step", ctypes.c_short ),
	( "invert", ctypes.c_short ),
	( "count", ctypes.c_short ),
	( "flag", ctypes.c_int ),
	( "strength", ctypes.c_float ),
])

__freeze_rpythonic_struct( MDeformVert, [
])

__freeze_rpythonic_struct( VPaint, [
	( "paint", Paint ),
	( "flag", ctypes.c_short ),
	( "pad", ctypes.c_short ),
	( "tot", ctypes.c_int ),
	( "vpaint_prev", ctypes.POINTER(ctypes.c_uint) ),
	( "wpaint_prev", ctypes.POINTER(MDeformVert) ),
	( "paintcursor", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( Sculpt, [
	( "paint", Paint ),
	( "flags", ctypes.c_int ),
	( "radial_symm", ( ctypes.c_int * 3 ) ),
	( "last_x", ctypes.c_float ),
	( "last_y", ctypes.c_float ),
	( "last_angle", ctypes.c_float ),
	( "draw_anchored", ctypes.c_int ),
	( "anchored_size", ctypes.c_int ),
	( "anchored_location", ( ctypes.c_float * 3 ) ),
	( "anchored_initial_mouse", ( ctypes.c_float * 2 ) ),
	( "draw_pressure", ctypes.c_int ),
	( "pressure_value", ctypes.c_float ),
	( "special_rotation", ctypes.c_float ),
	( "pad", ctypes.c_int ),
])

__freeze_rpythonic_struct( Scene, [
	( "C_id", ID ),
	( "adt", ctypes.POINTER(AnimData) ),
	( "camera", ctypes.POINTER(Object) ),
	( "world", ctypes.POINTER(World) ),
	( "set", ctypes.POINTER(Scene) ),
	( "base", ListBase ),
	( "basact", ctypes.POINTER(Base) ),
	( "obedit", ctypes.POINTER(Object) ),
	( "cursor", ( ctypes.c_float * 3 ) ),
	( "twcent", ( ctypes.c_float * 3 ) ),
	( "twmin", ( ctypes.c_float * 3 ) ),
	( "twmax", ( ctypes.c_float * 3 ) ),
	( "lay", ctypes.c_uint ),
	( "layact", ctypes.c_int ),
	( "lay_updated", ctypes.c_uint ),
	( "customdata_mask", ctypes.c_uint ),
	( "customdata_mask_modal", ctypes.c_uint ),
	( "flag", ctypes.c_short ),
	( "use_nodes", ctypes.c_short ),
	( "nodetree", ctypes.POINTER(bNodeTree) ),
	( "ed", ctypes.POINTER(Editing) ),
	( "toolsettings", ctypes.POINTER(ToolSettings) ),
	( "stats", ctypes.POINTER(SceneStats) ),
	( "r", RenderData ),
	( "audio", AudioData ),
	( "markers", ListBase ),
	( "transform_spaces", ListBase ),
	( "sound_scene", ctypes.POINTER(ctypes.c_void_p) ),
	( "sound_scene_handle", ctypes.POINTER(ctypes.c_void_p) ),
	( "sound_scrub_handle", ctypes.POINTER(ctypes.c_void_p) ),
	( "speaker_handles", ctypes.POINTER(ctypes.c_void_p) ),
	( "fps_info", ctypes.POINTER(ctypes.c_void_p) ),
	( "theDag", ctypes.POINTER(DagForest) ),
	( "dagisvalid", ctypes.c_short ),
	( "dagflags", ctypes.c_short ),
	( "recalc", ctypes.c_short ),
	( "pad6", ctypes.c_short ),
	( "pad5", ctypes.c_int ),
	( "active_keyingset", ctypes.c_int ),
	( "keyingsets", ListBase ),
	( "framing", GameFraming ),
	( "gm", GameData ),
	( "unit", UnitSettings ),
	( "gpd", ctypes.POINTER(bGPdata) ),
	( "physics_settings", PhysicsSettings ),
])

__freeze_rpythonic_struct( ParticleEditSettings, [
	( "flag", ctypes.c_short ),
	( "totrekey", ctypes.c_short ),
	( "totaddkey", ctypes.c_short ),
	( "brushtype", ctypes.c_short ),
	( "brush", ( ParticleBrushData * 7 ) ),
	( "paintcursor", ctypes.POINTER(ctypes.c_void_p) ),
	( "emitterdist", ctypes.c_float ),
	( "rt", ctypes.c_float ),
	( "selectmode", ctypes.c_int ),
	( "edittype", ctypes.c_int ),
	( "draw_step", ctypes.c_int ),
	( "fade_frames", ctypes.c_int ),
	( "scene", ctypes.POINTER(Scene) ),
	( "C_object", ctypes.POINTER(Object) ),
])

__freeze_rpythonic_struct( ToolSettings, [
	( "vpaint", ctypes.POINTER(VPaint) ),
	( "wpaint", ctypes.POINTER(VPaint) ),
	( "sculpt", ctypes.POINTER(Sculpt) ),
	( "vgroup_weight", ctypes.c_float ),
	( "cornertype", ctypes.c_short ),
	( "editbutflag", ctypes.c_short ),
	( "jointrilimit", ctypes.c_float ),
	( "degr", ctypes.c_float ),
	( "step", ctypes.c_short ),
	( "turn", ctypes.c_short ),
	( "extr_offs", ctypes.c_float ),
	( "doublimit", ctypes.c_float ),
	( "normalsize", ctypes.c_float ),
	( "automerge", ctypes.c_short ),
	( "selectmode", ctypes.c_short ),
	( "segments", ctypes.c_short ),
	( "rings", ctypes.c_short ),
	( "vertices", ctypes.c_short ),
	( "unwrapper", ctypes.c_short ),
	( "uvcalc_radius", ctypes.c_float ),
	( "uvcalc_cubesize", ctypes.c_float ),
	( "uvcalc_margin", ctypes.c_float ),
	( "uvcalc_mapdir", ctypes.c_short ),
	( "uvcalc_mapalign", ctypes.c_short ),
	( "uvcalc_flag", ctypes.c_short ),
	( "uv_flag", ctypes.c_short ),
	( "uv_selectmode", ctypes.c_short ),
	( "uv_pad", ctypes.c_short ),
	( "gpencil_flags", ctypes.c_short ),
	( "autoik_chainlen", ctypes.c_short ),
	( "imapaint", ImagePaintSettings ),
	( "particle", ParticleEditSettings ),
	( "proportional_size", ctypes.c_float ),
	( "select_thresh", ctypes.c_float ),
	( "clean_thresh", ctypes.c_float ),
	( "autokey_mode", ctypes.c_short ),
	( "autokey_flag", ctypes.c_short ),
	( "retopo_mode", ctypes.c_char ),
	( "retopo_paint_tool", ctypes.c_char ),
	( "line_div", ctypes.c_char ),
	( "ellipse_div", ctypes.c_char ),
	( "retopo_hotspot", ctypes.c_char ),
	( "multires_subdiv_type", ctypes.c_char ),
	( "skgen_resolution", ctypes.c_short ),
	( "skgen_threshold_internal", ctypes.c_float ),
	( "skgen_threshold_external", ctypes.c_float ),
	( "skgen_length_ratio", ctypes.c_float ),
	( "skgen_length_limit", ctypes.c_float ),
	( "skgen_angle_limit", ctypes.c_float ),
	( "skgen_correlation_limit", ctypes.c_float ),
	( "skgen_symmetry_limit", ctypes.c_float ),
	( "skgen_retarget_angle_weight", ctypes.c_float ),
	( "skgen_retarget_length_weight", ctypes.c_float ),
	( "skgen_retarget_distance_weight", ctypes.c_float ),
	( "skgen_options", ctypes.c_short ),
	( "skgen_postpro", ctypes.c_char ),
	( "skgen_postpro_passes", ctypes.c_char ),
	( "skgen_subdivisions", ( ctypes.c_char * 3 ) ),
	( "skgen_multi_level", ctypes.c_char ),
	( "skgen_template", ctypes.POINTER(Object) ),
	( "bone_sketching", ctypes.c_char ),
	( "bone_sketching_convert", ctypes.c_char ),
	( "skgen_subdivision_number", ctypes.c_char ),
	( "skgen_retarget_options", ctypes.c_char ),
	( "skgen_retarget_roll", ctypes.c_char ),
	( "skgen_side_string", ( ctypes.c_char * 8 ) ),
	( "skgen_num_string", ( ctypes.c_char * 8 ) ),
	( "edge_mode", ctypes.c_char ),
	( "edge_mode_live_unwrap", ctypes.c_char ),
	( "snap_mode", ctypes.c_char ),
	( "snap_flag", ctypes.c_short ),
	( "snap_target", ctypes.c_short ),
	( "proportional", ctypes.c_short ),
	( "prop_mode", ctypes.c_short ),
	( "proportional_objects", ctypes.c_char ),
	( "pad", ( ctypes.c_char * 3 ) ),
	( "auto_normalize", ctypes.c_int ),
	( "sculpt_paint_settings", ctypes.c_short ),
	( "pad1", ctypes.c_short ),
	( "sculpt_paint_unified_size", ctypes.c_int ),
	( "sculpt_paint_unified_unprojected_radius", ctypes.c_float ),
	( "sculpt_paint_unified_alpha", ctypes.c_float ),
])

__freeze_rpythonic_struct( TransformOrientation, [
	( "next", ctypes.POINTER(TransformOrientation) ),
	( "prev", ctypes.POINTER(TransformOrientation) ),
	( "name", ( ctypes.c_char * 36 ) ),
	( "mat", ( ctypes.c_float * 3 ) ),
])

__freeze_rpythonic_struct( bStats, [
	( "totobj", ctypes.c_int ),
	( "totlamp", ctypes.c_int ),
	( "totobjsel", ctypes.c_int ),
	( "totcurve", ctypes.c_int ),
	( "totmesh", ctypes.c_int ),
	( "totarmature", ctypes.c_int ),
	( "totvert", ctypes.c_int ),
	( "totface", ctypes.c_int ),
])

__freeze_rpythonic_struct( UnitSettings, [
	( "scale_length", ctypes.c_float ),
	( "system", ctypes.c_char ),
	( "system_rotation", ctypes.c_char ),
	( "flag", ctypes.c_short ),
])

__freeze_rpythonic_struct( PhysicsSettings, [
	( "gravity", ( ctypes.c_float * 3 ) ),
	( "flag", ctypes.c_int ),
	( "quick_cache_step", ctypes.c_int ),
	( "rt", ctypes.c_int ),
])

__freeze_rpythonic_struct( DagForest, [
])

__freeze_rpythonic_struct( MemFile, [
])

__freeze_rpythonic_struct( bContext, [
])

__freeze_rpythonic_struct( FunctionRNA, [
])

__freeze_rpythonic_struct( PropertyRNA, [
])

__freeze_rpythonic_struct( EnumPropertyRNA, [
])

__freeze_rpythonic_struct( StructRNA, [
])

__freeze_rpythonic_struct( BlenderRNA, [
])

__freeze_rpythonic_struct( PointerRNA, [
	( "C_id", C_id ),
	( "C_type", ctypes.POINTER(StructRNA) ),
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( C_id, [
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( PropertyPointerRNA, [
	( "ptr", PointerRNA ),
	( "prop", ctypes.POINTER(PropertyRNA) ),
])

__freeze_rpythonic_struct( CollectionPropertyIterator, [
	( "parent", PointerRNA ),
	( "builtin_parent", PointerRNA ),
	( "prop", ctypes.POINTER(PropertyRNA) ),
	( "internal", ctypes.POINTER(ctypes.c_void_p) ),
	( "idprop", ctypes.c_int ),
	( "level", ctypes.c_int ),
	( "valid", ctypes.c_int ),
	( "ptr", PointerRNA ),
])

__freeze_rpythonic_struct( CollectionPointerLink, [
	( "next", ctypes.POINTER(CollectionPointerLink) ),
	( "prev", ctypes.POINTER(CollectionPointerLink) ),
	( "ptr", PointerRNA ),
])

__freeze_rpythonic_struct( RawArray, [
	( "array", ctypes.POINTER(ctypes.c_void_p) ),
	( "C_type", ctypes.c_int ),
	( "C_len", ctypes.c_int ),
	( "stride", ctypes.c_int ),
])

__freeze_rpythonic_struct( EnumPropertyItem, [
	( "value", ctypes.c_int ),
	( "identifier", ctypes.POINTER(ctypes.c_char) ),
	( "icon", ctypes.c_int ),
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "description", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( ParameterList, [
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
	( "alloc_size", ctypes.c_int ),
	( "arg_count", ctypes.c_int ),
	( "ret_count", ctypes.c_int ),
	( "func", ctypes.POINTER(FunctionRNA) ),
])

__freeze_rpythonic_struct( ParameterIterator, [
	( "parms", ctypes.POINTER(ParameterList) ),
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
	( "size", ctypes.c_int ),
	( "offset", ctypes.c_int ),
	( "parm", ctypes.POINTER(PropertyRNA) ),
	( "valid", ctypes.c_int ),
])

__freeze_rpythonic_struct( ParameterDynAlloc, [
	( "array_tot", ctypes.c_int ),
	( "array", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( ExtensionRNA, [
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
	( "srna", ctypes.POINTER(StructRNA) ),
	( "call", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(bContext),ctypes.POINTER(PointerRNA),ctypes.POINTER(FunctionRNA),ctypes.POINTER(ParameterList),) ),
	( "free", ctypes.CFUNCTYPE(ctypes.c_void_p, ) ),
])

__freeze_rpythonic_struct( EditMesh, [
])

__freeze_rpythonic_struct( bPoseChannel, [
])

__freeze_rpythonic_struct( bContextDataResult, [
])

__freeze_rpythonic_struct( bContextStoreEntry, [
	( "next", ctypes.POINTER(bContextStoreEntry) ),
	( "prev", ctypes.POINTER(bContextStoreEntry) ),
	( "name", ( ctypes.c_char * 128 ) ),
	( "ptr", PointerRNA ),
])

__freeze_rpythonic_struct( bContextStore, [
	( "next", ctypes.POINTER(bContextStore) ),
	( "prev", ctypes.POINTER(bContextStore) ),
	( "entries", ListBase ),
	( "used", ctypes.c_int ),
])

__freeze_rpythonic_struct( SpaceAction, [
])

__freeze_rpythonic_struct( VFont, [
])

__freeze_rpythonic_struct( Curve, [
])

__freeze_rpythonic_struct( objfnt, [
])

__freeze_rpythonic_struct( TmpFont, [
])

__freeze_rpythonic_struct( CharInfo, [
])

__freeze_rpythonic_struct( chartrans, [
	( "xof", ctypes.c_float ),
	( "yof", ctypes.c_float ),
	( "rot", ctypes.c_float ),
	( "linenr", ctypes.c_short ),
	( "charnr", ctypes.c_short ),
	( "dobreak", ctypes.c_char ),
])

__freeze_rpythonic_struct( SelBox, [
	( "x", ctypes.c_float ),
	( "y", ctypes.c_float ),
	( "w", ctypes.c_float ),
	( "h", ctypes.c_float ),
])

__freeze_rpythonic_struct( EditFont, [
	( "copybuf", ctypes.POINTER(ctypes.c_int) ),
	( "copybufinfo", ctypes.POINTER(ctypes.c_int) ),
	( "textbuf", ctypes.POINTER(ctypes.c_int) ),
	( "textbufinfo", ctypes.POINTER(CharInfo) ),
	( "oldstr", ctypes.POINTER(ctypes.c_int) ),
	( "oldstrinfo", ctypes.POINTER(CharInfo) ),
	( "textcurs", ( ctypes.c_float * 4 ) ),
])

__freeze_rpythonic_struct( BME_Glob, [
])

__freeze_rpythonic_struct( Global, [
	( "main", ctypes.POINTER(Main) ),
	( "ima", ( ctypes.c_char * 256 ) ),
	( "lib", ( ctypes.c_char * 256 ) ),
	( "relbase_valid", ctypes.c_int ),
	( "recent_files", ListBase ),
	( "afbreek", ctypes.c_short ),
	( "moving", ctypes.c_short ),
	( "file_loaded", ctypes.c_short ),
	( "background", ctypes.c_char ),
	( "factory_startup", ctypes.c_char ),
	( "winpos", ctypes.c_short ),
	( "displaymode", ctypes.c_short ),
	( "rendering", ctypes.c_short ),
	( "rt", ctypes.c_short ),
	( "f", ctypes.c_int ),
	( "editBMesh", ctypes.POINTER(BME_Glob) ),
	( "save_over", ctypes.c_int ),
	( "have_quicktime", ctypes.c_int ),
	( "ui_international", ctypes.c_int ),
	( "charstart", ctypes.c_int ),
	( "charmin", ctypes.c_int ),
	( "charmax", ctypes.c_int ),
	( "selfont", ctypes.POINTER(VFont) ),
	( "ttfdata", ListBase ),
	( "fileflags", ctypes.c_int ),
	( "windowstate", ctypes.c_int ),
])

__freeze_rpythonic_struct( Main, [
	( "next", ctypes.POINTER(Main) ),
	( "prev", ctypes.POINTER(Main) ),
	( "name", ( ctypes.c_char * 240 ) ),
	( "versionfile", ctypes.c_short ),
	( "subversionfile", ctypes.c_short ),
	( "minversionfile", ctypes.c_short ),
	( "minsubversionfile", ctypes.c_short ),
	( "revision", ctypes.c_int ),
	( "curlib", ctypes.POINTER(Library) ),
	( "scene", ListBase ),
	( "library", ListBase ),
	( "C_object", ListBase ),
	( "mesh", ListBase ),
	( "curve", ListBase ),
	( "mball", ListBase ),
	( "mat", ListBase ),
	( "tex", ListBase ),
	( "image", ListBase ),
	( "latt", ListBase ),
	( "lamp", ListBase ),
	( "camera", ListBase ),
	( "ipo", ListBase ),
	( "key", ListBase ),
	( "world", ListBase ),
	( "screen", ListBase ),
	( "script", ListBase ),
	( "vfont", ListBase ),
	( "text", ListBase ),
	( "speaker", ListBase ),
	( "sound", ListBase ),
	( "group", ListBase ),
	( "armature", ListBase ),
	( "action", ListBase ),
	( "nodetree", ListBase ),
	( "brush", ListBase ),
	( "particle", ListBase ),
	( "wm", ListBase ),
	( "gpencil", ListBase ),
	( "id_tag_update", ( ctypes.c_char * 256 ) ),
])

__freeze_rpythonic_struct( bSound, [
])

__freeze_rpythonic_struct( PackedFile, [
])

__freeze_rpythonic_struct( bglMats, [
])

__freeze_rpythonic_struct( bNode, [
])

__freeze_rpythonic_struct( bNodeLink, [
])

__freeze_rpythonic_struct( bNodeSocket, [
])

__freeze_rpythonic_struct( bNodeStack, [
])

__freeze_rpythonic_struct( GPUMaterial, [
])

__freeze_rpythonic_struct( GPUNode, [
])

__freeze_rpythonic_struct( GPUNodeStack, [
])

__freeze_rpythonic_struct( uiLayout, [
])

__freeze_rpythonic_struct( bNodeSocketType, [
	( "C_type", ctypes.c_int ),
	( "limit", ctypes.c_int ),
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "val1", ctypes.c_float ),
	( "val2", ctypes.c_float ),
	( "val3", ctypes.c_float ),
	( "val4", ctypes.c_float ),
	( "min", ctypes.c_float ),
	( "max", ctypes.c_float ),
	( "sock", ctypes.POINTER(bNodeSocket) ),
])

__freeze_rpythonic_struct( bNodeType, [
	( "next", ctypes.POINTER(ctypes.c_void_p) ),
	( "prev", ctypes.POINTER(ctypes.c_void_p) ),
	( "C_type", ctypes.c_int ),
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "width", ctypes.c_float ),
	( "minwidth", ctypes.c_float ),
	( "maxwidth", ctypes.c_float ),
	( "nclass", ctypes.c_short ),
	( "flag", ctypes.c_short ),
	( "inputs", ctypes.POINTER(bNodeSocketType) ),
	( "outputs", ctypes.POINTER(bNodeSocketType) ),
	( "storagename", ( ctypes.c_char * 64 ) ),
	( "execfunc", ctypes.c_void_p ),
	( "uifunc", ctypes.c_void_p ),
	( "uifuncbut", ctypes.c_void_p ),
	( "labelfunc", ctypes.POINTER(ctypes.c_void_p) ),
	( "initfunc", ctypes.c_void_p ),
	( "freestoragefunc", ctypes.c_void_p ),
	( "copystoragefunc", ctypes.c_void_p ),
	( "C_id", ctypes.POINTER(ID) ),
	( "pynode", ctypes.POINTER(ctypes.c_void_p) ),
	( "pydict", ctypes.POINTER(ctypes.c_void_p) ),
	( "gpufunc", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( ShadeInput, [
])

__freeze_rpythonic_struct( ShadeResult, [
])

__freeze_rpythonic_struct( CompBuf, [
])

__freeze_rpythonic_struct( TexResult, [
])

__freeze_rpythonic_struct( wmLocal, [
])

__freeze_rpythonic_struct( uiBlock, [
])

__freeze_rpythonic_struct( wmSubWindow, [
])

__freeze_rpythonic_struct( Report, [
	( "next", ctypes.POINTER(Report) ),
	( "prev", ctypes.POINTER(Report) ),
	( "C_type", ctypes.c_short ),
	( "flag", ctypes.c_short ),
	( "C_len", ctypes.c_int ),
	( "typestr", ctypes.POINTER(ctypes.c_char) ),
	( "message", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( ReportList, [
	( "C_list", ListBase ),
	( "printlevel", ctypes.c_int ),
	( "storelevel", ctypes.c_int ),
	( "flag", ctypes.c_int ),
	( "pad", ctypes.c_int ),
	( "reporttimer", ctypes.POINTER(wmTimer) ),
])

__freeze_rpythonic_struct( ReportTimerInfo, [
	( "col", ( ctypes.c_float * 3 ) ),
	( "greyscale", ctypes.c_float ),
	( "widthfac", ctypes.c_float ),
])

__freeze_rpythonic_struct( wmWindowManager, [
	( "C_id", ID ),
	( "windrawable", ctypes.POINTER(wmWindow) ),
	( "winactive", ctypes.POINTER(wmWindow) ),
	( "windows", ListBase ),
	( "initialized", ctypes.c_int ),
	( "file_saved", ctypes.c_short ),
	( "op_undo_depth", ctypes.c_short ),
	( "operators", ListBase ),
	( "queue", ListBase ),
	( "reports", ReportList ),
	( "jobs", ListBase ),
	( "paintcursors", ListBase ),
	( "drags", ListBase ),
	( "keyconfigs", ListBase ),
	( "defaultconf", ctypes.POINTER(wmKeyConfig) ),
	( "addonconf", ctypes.POINTER(wmKeyConfig) ),
	( "userconf", ctypes.POINTER(wmKeyConfig) ),
	( "timers", ListBase ),
	( "autosavetimer", ctypes.POINTER(wmTimer) ),
])

__freeze_rpythonic_struct( wmWindow, [
	( "next", ctypes.POINTER(wmWindow) ),
	( "prev", ctypes.POINTER(wmWindow) ),
	( "ghostwin", ctypes.POINTER(ctypes.c_void_p) ),
	( "winid", ctypes.c_int ),
	( "grabcursor", ctypes.c_short ),
	( "pad", ctypes.c_short ),
	( "screen", ctypes.POINTER(bScreen) ),
	( "newscreen", ctypes.POINTER(bScreen) ),
	( "screenname", ( ctypes.c_char * 32 ) ),
	( "posx", ctypes.c_short ),
	( "posy", ctypes.c_short ),
	( "sizex", ctypes.c_short ),
	( "sizey", ctypes.c_short ),
	( "windowstate", ctypes.c_short ),
	( "monitor", ctypes.c_short ),
	( "active", ctypes.c_short ),
	( "cursor", ctypes.c_short ),
	( "lastcursor", ctypes.c_short ),
	( "modalcursor", ctypes.c_short ),
	( "addmousemove", ctypes.c_short ),
	( "pad2", ctypes.c_short ),
	( "eventstate", ctypes.POINTER(wmEvent) ),
	( "curswin", ctypes.POINTER(wmSubWindow) ),
	( "tweak", ctypes.POINTER(wmGesture) ),
	( "drawmethod", ctypes.c_int ),
	( "drawfail", ctypes.c_int ),
	( "drawdata", ctypes.POINTER(ctypes.c_void_p) ),
	( "queue", ListBase ),
	( "handlers", ListBase ),
	( "modalhandlers", ListBase ),
	( "subwindows", ListBase ),
	( "gesture", ListBase ),
])

__freeze_rpythonic_struct( wmOperatorTypeMacro, [
	( "next", ctypes.POINTER(wmOperatorTypeMacro) ),
	( "prev", ctypes.POINTER(wmOperatorTypeMacro) ),
	( "idname", ( ctypes.c_char * 64 ) ),
	( "properties", ctypes.POINTER(IDProperty) ),
	( "ptr", ctypes.POINTER(PointerRNA) ),
])

__freeze_rpythonic_struct( wmKeyMapItem, [
	( "next", ctypes.POINTER(wmKeyMapItem) ),
	( "prev", ctypes.POINTER(wmKeyMapItem) ),
	( "idname", ( ctypes.c_char * 64 ) ),
	( "properties", ctypes.POINTER(IDProperty) ),
	( "propvalue", ctypes.c_short ),
	( "C_type", ctypes.c_short ),
	( "val", ctypes.c_short ),
	( "shift", ctypes.c_short ),
	( "ctrl", ctypes.c_short ),
	( "alt", ctypes.c_short ),
	( "oskey", ctypes.c_short ),
	( "keymodifier", ctypes.c_short ),
	( "flag", ctypes.c_short ),
	( "maptype", ctypes.c_short ),
	( "C_id", ctypes.c_short ),
	( "pad", ctypes.c_short ),
	( "ptr", ctypes.POINTER(PointerRNA) ),
])

__freeze_rpythonic_struct( wmKeyMapDiffItem, [
	( "next", ctypes.POINTER(wmKeyMapDiffItem) ),
	( "prev", ctypes.POINTER(wmKeyMapDiffItem) ),
	( "remove_item", ctypes.POINTER(wmKeyMapItem) ),
	( "add_item", ctypes.POINTER(wmKeyMapItem) ),
])

__freeze_rpythonic_struct( wmKeyMap, [
	( "next", ctypes.POINTER(wmKeyMap) ),
	( "prev", ctypes.POINTER(wmKeyMap) ),
	( "items", ListBase ),
	( "diff_items", ListBase ),
	( "idname", ( ctypes.c_char * 64 ) ),
	( "spaceid", ctypes.c_short ),
	( "regionid", ctypes.c_short ),
	( "flag", ctypes.c_short ),
	( "kmi_id", ctypes.c_short ),
	( "poll", ctypes.c_void_p ),
	( "modal_items", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( wmKeyConfig, [
	( "next", ctypes.POINTER(wmKeyConfig) ),
	( "prev", ctypes.POINTER(wmKeyConfig) ),
	( "idname", ( ctypes.c_char * 64 ) ),
	( "basename", ( ctypes.c_char * 64 ) ),
	( "keymaps", ListBase ),
	( "actkeymap", ctypes.c_int ),
	( "flag", ctypes.c_int ),
])

__freeze_rpythonic_struct( wmOperator, [
	( "next", ctypes.POINTER(wmOperator) ),
	( "prev", ctypes.POINTER(wmOperator) ),
	( "idname", ( ctypes.c_char * 64 ) ),
	( "properties", ctypes.POINTER(IDProperty) ),
	( "C_type", ctypes.POINTER(wmOperatorType) ),
	( "customdata", ctypes.POINTER(ctypes.c_void_p) ),
	( "py_instance", ctypes.POINTER(ctypes.c_void_p) ),
	( "ptr", ctypes.POINTER(PointerRNA) ),
	( "reports", ctypes.POINTER(ReportList) ),
	( "macro", ListBase ),
	( "opm", ctypes.POINTER(wmOperator) ),
	( "layout", ctypes.POINTER(uiLayout) ),
	( "flag", ctypes.c_short ),
	( "pad", ( ctypes.c_short * 3 ) ),
])

__freeze_rpythonic_struct( Sequence, [
])

__freeze_rpythonic_struct( SoundWaveform, [
	( "length", ctypes.c_int ),
	( "data", ctypes.POINTER(ctypes.c_float) ),
])

__freeze_rpythonic_struct( DagNodeQueue, [
])

__freeze_rpythonic_struct( DagNode, [
])

__freeze_rpythonic_struct( IDPropertyTemplate, [
	( "i", ctypes.c_int ),
	( "f", ctypes.c_float ),
	( "d", ctypes.c_double ),
	( "C_str", ctypes.POINTER(ctypes.c_char) ),
	( "C_id", ctypes.POINTER(ID) ),
	( "array", array ),
	( "matrix_or_vector", matrix_or_vector ),
])

__freeze_rpythonic_struct( array, [
	( "C_type", ctypes.c_short ),
	( "C_len", ctypes.c_short ),
])

__freeze_rpythonic_struct( matrix_or_vector, [
	( "matvec_size", ctypes.c_int ),
	( "example", ctypes.POINTER(ctypes.c_float) ),
])

__freeze_rpythonic_struct( uiMenuItem, [
])

__freeze_rpythonic_struct( SpaceType, [
	( "next", ctypes.POINTER(SpaceType) ),
	( "prev", ctypes.POINTER(SpaceType) ),
	( "name", ( ctypes.c_char * 64 ) ),
	( "spaceid", ctypes.c_int ),
	( "iconid", ctypes.c_int ),
	( "new", ctypes.POINTER(ctypes.c_void_p) ),
	( "free", ctypes.c_void_p ),
	( "init", ctypes.c_void_p ),
	( "listener", ctypes.c_void_p ),
	( "refresh", ctypes.c_void_p ),
	( "duplicate", ctypes.POINTER(ctypes.c_void_p) ),
	( "operatortypes", ctypes.c_void_p ),
	( "keymap", ctypes.c_void_p ),
	( "dropboxes", ctypes.c_void_p ),
	( "context", ctypes.c_void_p ),
	( "regiontypes", ListBase ),
	( "toolshelf", ListBase ),
	( "keymapflag", ctypes.c_int ),
])

__freeze_rpythonic_struct( ARegionType, [
	( "next", ctypes.POINTER(ARegionType) ),
	( "prev", ctypes.POINTER(ARegionType) ),
	( "regionid", ctypes.c_int ),
	( "init", ctypes.c_void_p ),
	( "draw", ctypes.c_void_p ),
	( "listener", ctypes.c_void_p ),
	( "free", ctypes.c_void_p ),
	( "duplicate", ctypes.POINTER(ctypes.c_void_p) ),
	( "operatortypes", ctypes.c_void_p ),
	( "keymap", ctypes.c_void_p ),
	( "cursor", ctypes.c_void_p ),
	( "context", ctypes.c_void_p ),
	( "drawcalls", ListBase ),
	( "paneltypes", ListBase ),
	( "headertypes", ListBase ),
	( "minsizex", ctypes.c_int ),
	( "minsizey", ctypes.c_int ),
	( "prefsizex", ctypes.c_int ),
	( "prefsizey", ctypes.c_int ),
	( "keymapflag", ctypes.c_int ),
	( "do_lock", ctypes.c_short ),
	( "lock", ctypes.c_short ),
])

__freeze_rpythonic_struct( PanelType, [
	( "next", ctypes.POINTER(PanelType) ),
	( "prev", ctypes.POINTER(PanelType) ),
	( "idname", ( ctypes.c_char * 64 ) ),
	( "label", ( ctypes.c_char * 64 ) ),
	( "context", ( ctypes.c_char * 64 ) ),
	( "space_type", ctypes.c_int ),
	( "region_type", ctypes.c_int ),
	( "flag", ctypes.c_int ),
	( "poll", ctypes.c_void_p ),
	( "draw_header", ctypes.c_void_p ),
	( "draw", ctypes.c_void_p ),
	( "ext", ExtensionRNA ),
])

__freeze_rpythonic_struct( HeaderType, [
	( "next", ctypes.POINTER(HeaderType) ),
	( "prev", ctypes.POINTER(HeaderType) ),
	( "idname", ( ctypes.c_char * 64 ) ),
	( "space_type", ctypes.c_int ),
	( "draw", ctypes.c_void_p ),
	( "ext", ExtensionRNA ),
])

__freeze_rpythonic_struct( Header, [
	( "C_type", ctypes.POINTER(HeaderType) ),
	( "layout", ctypes.POINTER(uiLayout) ),
])

__freeze_rpythonic_struct( MenuType, [
	( "next", ctypes.POINTER(MenuType) ),
	( "prev", ctypes.POINTER(MenuType) ),
	( "idname", ( ctypes.c_char * 64 ) ),
	( "label", ( ctypes.c_char * 64 ) ),
	( "poll", ctypes.c_void_p ),
	( "draw", ctypes.c_void_p ),
	( "ext", ExtensionRNA ),
])

__freeze_rpythonic_struct( Menu, [
	( "C_type", ctypes.POINTER(MenuType) ),
	( "layout", ctypes.POINTER(uiLayout) ),
])

__freeze_rpythonic_struct( anim, [
])

__freeze_rpythonic_struct( ImMetaData, [
])

__freeze_rpythonic_struct( ImBuf, [
	( "next", ctypes.POINTER(ImBuf) ),
	( "prev", ctypes.POINTER(ImBuf) ),
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
	( "depth", ctypes.c_ubyte ),
	( "channels", ctypes.c_int ),
	( "flags", ctypes.c_int ),
	( "mall", ctypes.c_int ),
	( "rect", ctypes.POINTER(ctypes.c_uint) ),
	( "rect_float", ctypes.POINTER(ctypes.c_float) ),
	( "ppm", ( ctypes.c_double * 2 ) ),
	( "tilex", ctypes.c_int ),
	( "tiley", ctypes.c_int ),
	( "xtiles", ctypes.c_int ),
	( "ytiles", ctypes.c_int ),
	( "tiles", ctypes.POINTER(ctypes.POINTER(ctypes.c_uint)) ),
	( "zbuf", ctypes.POINTER(ctypes.c_int) ),
	( "zbuf_float", ctypes.POINTER(ctypes.c_float) ),
	( "dither", ctypes.c_float ),
	( "profile", ctypes.c_short ),
	( "mipmap", ctypes.POINTER(( ImBuf * 20 )) ),
	( "miptot", ctypes.c_int ),
	( "miplevel", ctypes.c_int ),
	( "index", ctypes.c_int ),
	( "userflags", ctypes.c_int ),
	( "metadata", ctypes.POINTER(ImMetaData) ),
	( "userdata", ctypes.POINTER(ctypes.c_void_p) ),
	( "ftype", ctypes.c_int ),
	( "name", ( ctypes.c_char * 1023 ) ),
	( "cachename", ( ctypes.c_char * 1023 ) ),
	( "c_handle", ctypes.POINTER(MEM_CacheLimiterHandle_s) ),
	( "refcounter", ctypes.c_int ),
	( "encodedbuffer", ctypes.POINTER(ctypes.c_ubyte) ),
	( "encodedsize", ctypes.c_uint ),
	( "encodedbuffersize", ctypes.c_uint ),
])

__freeze_rpythonic_struct( MEM_CacheLimiterHandle_s, [
])

__freeze_rpythonic_struct( ChannelDriver, [
])

__freeze_rpythonic_struct( bConstraint, [
])

__freeze_rpythonic_struct( bPythonConstraint, [
])

__freeze_rpythonic_struct( bConstraintOb, [
])

__freeze_rpythonic_struct( bConstraintTarget, [
])

__freeze_rpythonic_struct( BPyMenu, [
])

__freeze_rpythonic_struct( NodeBlurData, [
])

__freeze_rpythonic_struct( Render, [
])

__freeze_rpythonic_struct( RenderPass, [
	( "next", ctypes.POINTER(RenderPass) ),
	( "prev", ctypes.POINTER(RenderPass) ),
	( "passtype", ctypes.c_int ),
	( "channels", ctypes.c_int ),
	( "name", ( ctypes.c_char * 16 ) ),
	( "chan_id", ( ctypes.c_char * 8 ) ),
	( "rect", ctypes.POINTER(ctypes.c_float) ),
	( "rectx", ctypes.c_int ),
	( "recty", ctypes.c_int ),
])

__freeze_rpythonic_struct( RenderLayer, [
	( "next", ctypes.POINTER(RenderLayer) ),
	( "prev", ctypes.POINTER(RenderLayer) ),
	( "name", ( ctypes.c_char * 32 ) ),
	( "lay", ctypes.c_uint ),
	( "lay_zmask", ctypes.c_uint ),
	( "layflag", ctypes.c_int ),
	( "passflag", ctypes.c_int ),
	( "pass_xor", ctypes.c_int ),
	( "mat_override", ctypes.POINTER(Material) ),
	( "light_override", ctypes.POINTER(Group) ),
	( "rectf", ctypes.POINTER(ctypes.c_float) ),
	( "acolrect", ctypes.POINTER(ctypes.c_float) ),
	( "scolrect", ctypes.POINTER(ctypes.c_float) ),
	( "rectx", ctypes.c_int ),
	( "recty", ctypes.c_int ),
	( "passes", ListBase ),
])

__freeze_rpythonic_struct( RenderResult, [
	( "next", ctypes.POINTER(RenderResult) ),
	( "prev", ctypes.POINTER(RenderResult) ),
	( "rectx", ctypes.c_int ),
	( "recty", ctypes.c_int ),
	( "crop", ctypes.c_short ),
	( "sample_nr", ctypes.c_short ),
	( "rect32", ctypes.POINTER(ctypes.c_int) ),
	( "rectf", ctypes.POINTER(ctypes.c_float) ),
	( "rectz", ctypes.POINTER(ctypes.c_float) ),
	( "tilerect", rcti ),
	( "xof", ctypes.c_int ),
	( "yof", ctypes.c_int ),
	( "layers", ListBase ),
	( "renrect", rcti ),
	( "renlay", ctypes.POINTER(RenderLayer) ),
	( "exrhandle", ctypes.POINTER(ctypes.c_void_p) ),
	( "framenr", ctypes.c_int ),
	( "have_combined", ctypes.c_int ),
	( "text", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( RenderStats, [
	( "cfra", ctypes.c_int ),
	( "totface", ctypes.c_int ),
	( "totvert", ctypes.c_int ),
	( "totstrand", ctypes.c_int ),
	( "tothalo", ctypes.c_int ),
	( "totlamp", ctypes.c_int ),
	( "totpart", ctypes.c_int ),
	( "curfield", ctypes.c_short ),
	( "curblur", ctypes.c_short ),
	( "curpart", ctypes.c_short ),
	( "partsdone", ctypes.c_short ),
	( "convertdone", ctypes.c_short ),
	( "curfsa", ctypes.c_short ),
	( "starttime", ctypes.c_double ),
	( "lastframetime", ctypes.c_double ),
	( "infostr", ctypes.POINTER(ctypes.c_char) ),
	( "statstr", ctypes.POINTER(ctypes.c_char) ),
	( "scenename", ( ctypes.c_char * 32 ) ),
])

__freeze_rpythonic_struct( RenderEngineType, [
	( "next", ctypes.POINTER(RenderEngineType) ),
	( "prev", ctypes.POINTER(RenderEngineType) ),
	( "idname", ( ctypes.c_char * 64 ) ),
	( "name", ( ctypes.c_char * 64 ) ),
	( "flag", ctypes.c_int ),
	( "render", ctypes.c_void_p ),
	( "ext", ExtensionRNA ),
])

__freeze_rpythonic_struct( RenderEngine, [
	( "C_type", ctypes.POINTER(RenderEngineType) ),
	( "re", ctypes.POINTER(Render) ),
	( "fullresult", ListBase ),
])

__freeze_rpythonic_struct( bArmature, [
])

__freeze_rpythonic_struct( Bone, [
])

__freeze_rpythonic_struct( DerivedMesh, [
])

__freeze_rpythonic_struct( MeshDeformModifierData, [
])

__freeze_rpythonic_struct( SK_Sketch, [
])

__freeze_rpythonic_struct( ViewContext, [
])

__freeze_rpythonic_struct( EditBone, [
	( "next", ctypes.POINTER(EditBone) ),
	( "prev", ctypes.POINTER(EditBone) ),
	( "prop", ctypes.POINTER(IDProperty) ),
	( "parent", ctypes.POINTER(EditBone) ),
	( "temp", ctypes.POINTER(ctypes.c_void_p) ),
	( "name", ( ctypes.c_char * 32 ) ),
	( "roll", ctypes.c_float ),
	( "head", ( ctypes.c_float * 3 ) ),
	( "tail", ( ctypes.c_float * 3 ) ),
	( "flag", ctypes.c_int ),
	( "layer", ctypes.c_int ),
	( "dist", ctypes.c_float ),
	( "weight", ctypes.c_float ),
	( "xwidth", ctypes.c_float ),
	( "length", ctypes.c_float ),
	( "zwidth", ctypes.c_float ),
	( "ease1", ctypes.c_float ),
	( "ease2", ctypes.c_float ),
	( "rad_head", ctypes.c_float ),
	( "rad_tail", ctypes.c_float ),
	( "oldlength", ctypes.c_float ),
	( "segments", ctypes.c_short ),
])

__freeze_rpythonic_struct( KeyingSet, [
])

__freeze_rpythonic_struct( bAction, [
])

__freeze_rpythonic_struct( FCurve, [
])

__freeze_rpythonic_struct( BezTriple, [
])

__freeze_rpythonic_struct( KeyingSetInfo, [
	( "next", ctypes.POINTER(KeyingSetInfo) ),
	( "prev", ctypes.POINTER(KeyingSetInfo) ),
	( "name", ( ctypes.c_char * 64 ) ),
	( "idname", ( ctypes.c_char * 64 ) ),
	( "keyingflag", ctypes.c_short ),
	( "poll", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(KeyingSetInfo),ctypes.POINTER(bContext),) ),
	( "iter", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(KeyingSetInfo),ctypes.POINTER(bContext),ctypes.POINTER(KeyingSet),) ),
	( "generate", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(KeyingSetInfo),ctypes.POINTER(bContext),ctypes.POINTER(KeyingSet),ctypes.POINTER(PointerRNA),) ),
	( "ext", ExtensionRNA ),
])

__freeze_rpythonic_struct( RenderInfo, [
	( "pr_rectx", ctypes.c_int ),
	( "pr_recty", ctypes.c_int ),
	( "curtile", ctypes.c_short ),
	( "tottile", ctypes.c_short ),
	( "status", ctypes.c_short ),
	( "disprect", rcti ),
	( "rect", ctypes.POINTER(ctypes.c_uint) ),
	( "re", ctypes.POINTER(Render) ),
])

__freeze_rpythonic_struct( View2D, [
	( "tot", rctf ),
	( "cur", rctf ),
	( "vert", rcti ),
	( "hor", rcti ),
	( "mask", rcti ),
	( "min", ( ctypes.c_float * 2 ) ),
	( "max", ( ctypes.c_float * 2 ) ),
	( "minzoom", ctypes.c_float ),
	( "maxzoom", ctypes.c_float ),
	( "scroll", ctypes.c_short ),
	( "scroll_ui", ctypes.c_short ),
	( "keeptot", ctypes.c_short ),
	( "keepzoom", ctypes.c_short ),
	( "keepofs", ctypes.c_short ),
	( "flag", ctypes.c_short ),
	( "align", ctypes.c_short ),
	( "winx", ctypes.c_short ),
	( "winy", ctypes.c_short ),
	( "oldwinx", ctypes.c_short ),
	( "oldwiny", ctypes.c_short ),
	( "around", ctypes.c_short ),
	( "tab_offset", ctypes.POINTER(ctypes.c_float) ),
	( "tab_num", ctypes.c_int ),
	( "tab_cur", ctypes.c_int ),
])

__freeze_rpythonic_struct( bScreen, [
	( "C_id", ID ),
	( "vertbase", ListBase ),
	( "edgebase", ListBase ),
	( "areabase", ListBase ),
	( "regionbase", ListBase ),
	( "scene", ctypes.POINTER(Scene) ),
	( "newscene", ctypes.POINTER(Scene) ),
	( "redraws_flag", ctypes.c_int ),
	( "pad1", ctypes.c_int ),
	( "full", ctypes.c_short ),
	( "temp", ctypes.c_short ),
	( "winid", ctypes.c_short ),
	( "do_draw", ctypes.c_short ),
	( "do_refresh", ctypes.c_short ),
	( "do_draw_gesture", ctypes.c_short ),
	( "do_draw_paintcursor", ctypes.c_short ),
	( "do_draw_drag", ctypes.c_short ),
	( "swap", ctypes.c_short ),
	( "mainwin", ctypes.c_short ),
	( "subwinactive", ctypes.c_short ),
	( "pad", ctypes.c_short ),
	( "animtimer", ctypes.POINTER(wmTimer) ),
	( "context", ctypes.POINTER(ctypes.c_void_p) ),
	( "handler", ( ctypes.c_short * 8 ) ),
])

__freeze_rpythonic_struct( ScrVert, [
	( "next", ctypes.POINTER(ScrVert) ),
	( "prev", ctypes.POINTER(ScrVert) ),
	( "newv", ctypes.POINTER(ScrVert) ),
	( "vec", vec2s ),
	( "flag", ctypes.c_int ),
])

__freeze_rpythonic_struct( ScrEdge, [
	( "next", ctypes.POINTER(ScrEdge) ),
	( "prev", ctypes.POINTER(ScrEdge) ),
	( "v1", ctypes.POINTER(ScrVert) ),
	( "v2", ctypes.POINTER(ScrVert) ),
	( "border", ctypes.c_short ),
	( "flag", ctypes.c_short ),
	( "pad", ctypes.c_int ),
])

__freeze_rpythonic_struct( Panel, [
	( "next", ctypes.POINTER(Panel) ),
	( "prev", ctypes.POINTER(Panel) ),
	( "C_type", ctypes.POINTER(PanelType) ),
	( "layout", ctypes.POINTER(uiLayout) ),
	( "panelname", ( ctypes.c_char * 64 ) ),
	( "tabname", ( ctypes.c_char * 64 ) ),
	( "drawname", ( ctypes.c_char * 64 ) ),
	( "ofsx", ctypes.c_short ),
	( "ofsy", ctypes.c_short ),
	( "sizex", ctypes.c_short ),
	( "sizey", ctypes.c_short ),
	( "labelofs", ctypes.c_short ),
	( "pad", ctypes.c_short ),
	( "flag", ctypes.c_short ),
	( "runtime_flag", ctypes.c_short ),
	( "control", ctypes.c_short ),
	( "snap", ctypes.c_short ),
	( "sortorder", ctypes.c_int ),
	( "paneltab", ctypes.POINTER(Panel) ),
	( "activedata", ctypes.POINTER(ctypes.c_void_p) ),
	( "list_scroll", ctypes.c_int ),
	( "list_size", ctypes.c_int ),
	( "list_last_len", ctypes.c_int ),
	( "list_grip_size", ctypes.c_int ),
	( "list_search", ( ctypes.c_char * 64 ) ),
])

__freeze_rpythonic_struct( ScrArea, [
	( "next", ctypes.POINTER(ScrArea) ),
	( "prev", ctypes.POINTER(ScrArea) ),
	( "v1", ctypes.POINTER(ScrVert) ),
	( "v2", ctypes.POINTER(ScrVert) ),
	( "v3", ctypes.POINTER(ScrVert) ),
	( "v4", ctypes.POINTER(ScrVert) ),
	( "full", ctypes.POINTER(bScreen) ),
	( "totrct", rcti ),
	( "spacetype", ctypes.c_char ),
	( "butspacetype", ctypes.c_char ),
	( "winx", ctypes.c_short ),
	( "winy", ctypes.c_short ),
	( "headertype", ctypes.c_short ),
	( "pad", ctypes.c_short ),
	( "do_refresh", ctypes.c_short ),
	( "cursor", ctypes.c_short ),
	( "flag", ctypes.c_short ),
	( "C_type", ctypes.POINTER(SpaceType) ),
	( "spacedata", ListBase ),
	( "regionbase", ListBase ),
	( "handlers", ListBase ),
	( "actionzones", ListBase ),
])

__freeze_rpythonic_struct( ARegion, [
	( "next", ctypes.POINTER(ARegion) ),
	( "prev", ctypes.POINTER(ARegion) ),
	( "v2d", View2D ),
	( "winrct", rcti ),
	( "drawrct", rcti ),
	( "winx", ctypes.c_short ),
	( "winy", ctypes.c_short ),
	( "swinid", ctypes.c_short ),
	( "regiontype", ctypes.c_short ),
	( "alignment", ctypes.c_short ),
	( "flag", ctypes.c_short ),
	( "fsize", ctypes.c_float ),
	( "sizex", ctypes.c_short ),
	( "sizey", ctypes.c_short ),
	( "do_draw", ctypes.c_short ),
	( "do_draw_overlay", ctypes.c_short ),
	( "swap", ctypes.c_short ),
	( "pad", ( ctypes.c_short * 3 ) ),
	( "C_type", ctypes.POINTER(ARegionType) ),
	( "uiblocks", ListBase ),
	( "panels", ListBase ),
	( "handlers", ListBase ),
	( "headerstr", ctypes.POINTER(ctypes.c_char) ),
	( "regiondata", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( CurveMapPoint, [
	( "x", ctypes.c_float ),
	( "y", ctypes.c_float ),
	( "flag", ctypes.c_short ),
	( "shorty", ctypes.c_short ),
])

__freeze_rpythonic_struct( CurveMap, [
	( "totpoint", ctypes.c_short ),
	( "flag", ctypes.c_short ),
	( "C_range", ctypes.c_float ),
	( "mintable", ctypes.c_float ),
	( "maxtable", ctypes.c_float ),
	( "ext_in", ( ctypes.c_float * 2 ) ),
	( "ext_out", ( ctypes.c_float * 2 ) ),
	( "curve", ctypes.POINTER(CurveMapPoint) ),
	( "table", ctypes.POINTER(CurveMapPoint) ),
	( "premultable", ctypes.POINTER(CurveMapPoint) ),
])

__freeze_rpythonic_struct( CurveMapping, [
	( "flag", ctypes.c_int ),
	( "cur", ctypes.c_int ),
	( "preset", ctypes.c_int ),
	( "changed_timestamp", ctypes.c_int ),
	( "curr", rctf ),
	( "clipr", rctf ),
	( "cm", ( CurveMap * 4 ) ),
	( "black", ( ctypes.c_float * 3 ) ),
	( "white", ( ctypes.c_float * 3 ) ),
	( "bwmul", ( ctypes.c_float * 3 ) ),
	( "sample", ( ctypes.c_float * 3 ) ),
])

__freeze_rpythonic_struct( Histogram, [
	( "channels", ctypes.c_int ),
	( "x_resolution", ctypes.c_int ),
	( "data_r", ( ctypes.c_float * 256 ) ),
	( "data_g", ( ctypes.c_float * 256 ) ),
	( "data_b", ( ctypes.c_float * 256 ) ),
	( "data_luma", ( ctypes.c_float * 256 ) ),
	( "xmax", ctypes.c_float ),
	( "ymax", ctypes.c_float ),
	( "mode", ctypes.c_int ),
	( "height", ctypes.c_int ),
])

__freeze_rpythonic_struct( Scopes, [
	( "ok", ctypes.c_int ),
	( "sample_full", ctypes.c_int ),
	( "sample_lines", ctypes.c_int ),
	( "accuracy", ctypes.c_float ),
	( "wavefrm_mode", ctypes.c_int ),
	( "wavefrm_alpha", ctypes.c_float ),
	( "wavefrm_yfac", ctypes.c_float ),
	( "wavefrm_height", ctypes.c_int ),
	( "vecscope_alpha", ctypes.c_float ),
	( "vecscope_height", ctypes.c_int ),
	( "minmax", ( ctypes.c_float * 3 ) ),
	( "hist", Histogram ),
	( "waveform_1", ctypes.POINTER(ctypes.c_float) ),
	( "waveform_2", ctypes.POINTER(ctypes.c_float) ),
	( "waveform_3", ctypes.POINTER(ctypes.c_float) ),
	( "vecscope", ctypes.POINTER(ctypes.c_float) ),
	( "waveform_tot", ctypes.c_int ),
	( "pad", ctypes.c_int ),
])

__freeze_rpythonic_struct( TreeStoreElem, [
	( "C_type", ctypes.c_short ),
	( "nr", ctypes.c_short ),
	( "flag", ctypes.c_short ),
	( "used", ctypes.c_short ),
	( "C_id", ctypes.POINTER(ID) ),
])

__freeze_rpythonic_struct( TreeStore, [
	( "totelem", ctypes.c_int ),
	( "usedelem", ctypes.c_int ),
	( "data", ctypes.POINTER(TreeStoreElem) ),
])

__freeze_rpythonic_struct( GPUTexture, [
])

__freeze_rpythonic_struct( ImageUser, [
	( "scene", ctypes.POINTER(Scene) ),
	( "framenr", ctypes.c_int ),
	( "frames", ctypes.c_int ),
	( "offset", ctypes.c_int ),
	( "sfra", ctypes.c_int ),
	( "fie_ima", ctypes.c_char ),
	( "cycl", ctypes.c_char ),
	( "ok", ctypes.c_char ),
	( "pad", ctypes.c_char ),
	( "multi_index", ctypes.c_short ),
	( "layer", ctypes.c_short ),
	( "pass", ctypes.c_short ),
	( "flag", ctypes.c_short ),
	( "pad2", ctypes.c_int ),
])

__freeze_rpythonic_struct( Image, [
	( "C_id", ID ),
	( "name", ( ctypes.c_char * 240 ) ),
	( "ibufs", ListBase ),
	( "gputexture", ctypes.POINTER(GPUTexture) ),
	( "anim", ctypes.POINTER(anim) ),
	( "rr", ctypes.POINTER(RenderResult) ),
	( "renders", ctypes.POINTER(( RenderResult * 8 )) ),
	( "render_slot", ctypes.c_short ),
	( "last_render_slot", ctypes.c_short ),
	( "ok", ctypes.c_short ),
	( "flag", ctypes.c_short ),
	( "source", ctypes.c_short ),
	( "C_type", ctypes.c_short ),
	( "lastframe", ctypes.c_int ),
	( "tpageflag", ctypes.c_short ),
	( "totbind", ctypes.c_short ),
	( "xrep", ctypes.c_short ),
	( "yrep", ctypes.c_short ),
	( "twsta", ctypes.c_short ),
	( "twend", ctypes.c_short ),
	( "bindcode", ctypes.c_uint ),
	( "repbind", ctypes.POINTER(ctypes.c_uint) ),
	( "packedfile", ctypes.POINTER(PackedFile) ),
	( "preview", ctypes.POINTER(PreviewImage) ),
	( "lastupdate", ctypes.c_float ),
	( "lastused", ctypes.c_int ),
	( "animspeed", ctypes.c_short ),
	( "gen_x", ctypes.c_short ),
	( "gen_y", ctypes.c_short ),
	( "gen_type", ctypes.c_char ),
	( "gen_flag", ctypes.c_char ),
	( "aspx", ctypes.c_float ),
	( "aspy", ctypes.c_float ),
])

__freeze_rpythonic_struct( BlendHandle, [
])

__freeze_rpythonic_struct( FileList, [
])

__freeze_rpythonic_struct( bDopeSheet, [
])

__freeze_rpythonic_struct( FileLayout, [
])

__freeze_rpythonic_struct( SpaceLink, [
	( "next", ctypes.POINTER(SpaceLink) ),
	( "prev", ctypes.POINTER(SpaceLink) ),
	( "regionbase", ListBase ),
	( "spacetype", ctypes.c_int ),
	( "blockscale", ctypes.c_float ),
	( "blockhandler", ( ctypes.c_short * 8 ) ),
])

__freeze_rpythonic_struct( SpaceInfo, [
	( "next", ctypes.POINTER(SpaceLink) ),
	( "prev", ctypes.POINTER(SpaceLink) ),
	( "regionbase", ListBase ),
	( "spacetype", ctypes.c_int ),
	( "blockscale", ctypes.c_float ),
	( "blockhandler", ( ctypes.c_short * 8 ) ),
	( "rpt_mask", ctypes.c_char ),
	( "pad", ( ctypes.c_char * 7 ) ),
])

__freeze_rpythonic_struct( SpaceIpo, [
	( "next", ctypes.POINTER(SpaceLink) ),
	( "prev", ctypes.POINTER(SpaceLink) ),
	( "regionbase", ListBase ),
	( "spacetype", ctypes.c_int ),
	( "blockscale", ctypes.c_float ),
	( "blockhandler", ( ctypes.c_short * 8 ) ),
	( "v2d", View2D ),
	( "ads", ctypes.POINTER(bDopeSheet) ),
	( "ghostCurves", ListBase ),
	( "mode", ctypes.c_short ),
	( "autosnap", ctypes.c_short ),
	( "flag", ctypes.c_int ),
	( "cursorVal", ctypes.c_float ),
	( "around", ctypes.c_int ),
])

__freeze_rpythonic_struct( SpaceButs, [
	( "next", ctypes.POINTER(SpaceLink) ),
	( "prev", ctypes.POINTER(SpaceLink) ),
	( "regionbase", ListBase ),
	( "spacetype", ctypes.c_int ),
	( "blockscale", ctypes.c_float ),
	( "blockhandler", ( ctypes.c_short * 8 ) ),
	( "ri", ctypes.POINTER(RenderInfo) ),
	( "v2d", View2D ),
	( "mainb", ctypes.c_short ),
	( "mainbo", ctypes.c_short ),
	( "mainbuser", ctypes.c_short ),
	( "re_align", ctypes.c_short ),
	( "align", ctypes.c_short ),
	( "preview", ctypes.c_short ),
	( "texture_context", ctypes.c_short ),
	( "flag", ctypes.c_char ),
	( "pad", ctypes.c_char ),
	( "path", ctypes.POINTER(ctypes.c_void_p) ),
	( "pathflag", ctypes.c_int ),
	( "dataicon", ctypes.c_int ),
	( "pinid", ctypes.POINTER(ID) ),
])

__freeze_rpythonic_struct( SpaceSeq, [
	( "next", ctypes.POINTER(SpaceLink) ),
	( "prev", ctypes.POINTER(SpaceLink) ),
	( "regionbase", ListBase ),
	( "spacetype", ctypes.c_int ),
	( "blockscale", ctypes.c_float ),
	( "blockhandler", ( ctypes.c_short * 8 ) ),
	( "v2d", View2D ),
	( "xof", ctypes.c_float ),
	( "yof", ctypes.c_float ),
	( "mainb", ctypes.c_short ),
	( "render_size", ctypes.c_short ),
	( "chanshown", ctypes.c_short ),
	( "zebra", ctypes.c_short ),
	( "flag", ctypes.c_int ),
	( "zoom", ctypes.c_float ),
	( "view", ctypes.c_int ),
	( "pad", ctypes.c_int ),
	( "gpd", ctypes.POINTER(bGPdata) ),
])

__freeze_rpythonic_struct( FileSelectParams, [
	( "title", ( ctypes.c_char * 32 ) ),
	( "dir", ( ctypes.c_char * 240 ) ),
	( "file", ( ctypes.c_char * 80 ) ),
	( "renamefile", ( ctypes.c_char * 80 ) ),
	( "renameedit", ( ctypes.c_char * 80 ) ),
	( "filter_glob", ( ctypes.c_char * 64 ) ),
	( "active_file", ctypes.c_int ),
	( "sel_first", ctypes.c_int ),
	( "sel_last", ctypes.c_int ),
	( "C_type", ctypes.c_short ),
	( "flag", ctypes.c_short ),
	( "sort", ctypes.c_short ),
	( "display", ctypes.c_short ),
	( "filter", ctypes.c_short ),
	( "f_fp", ctypes.c_short ),
	( "fp_str", ( ctypes.c_char * 8 ) ),
])

__freeze_rpythonic_struct( SpaceFile, [
	( "next", ctypes.POINTER(SpaceLink) ),
	( "prev", ctypes.POINTER(SpaceLink) ),
	( "regionbase", ListBase ),
	( "spacetype", ctypes.c_int ),
	( "scroll_offset", ctypes.c_int ),
	( "params", ctypes.POINTER(FileSelectParams) ),
	( "files", ctypes.POINTER(FileList) ),
	( "folders_prev", ctypes.POINTER(ListBase) ),
	( "folders_next", ctypes.POINTER(ListBase) ),
	( "op", ctypes.POINTER(wmOperator) ),
	( "smoothscroll_timer", ctypes.POINTER(wmTimer) ),
	( "layout", ctypes.POINTER(FileLayout) ),
	( "recentnr", ctypes.c_short ),
	( "bookmarknr", ctypes.c_short ),
	( "systemnr", ctypes.c_short ),
	( "pad2", ctypes.c_short ),
])

__freeze_rpythonic_struct( SpaceOops, [
	( "next", ctypes.POINTER(SpaceLink) ),
	( "prev", ctypes.POINTER(SpaceLink) ),
	( "regionbase", ListBase ),
	( "spacetype", ctypes.c_int ),
	( "blockscale", ctypes.c_float ),
	( "blockhandler", ( ctypes.c_short * 8 ) ),
	( "v2d", View2D ),
	( "tree", ListBase ),
	( "treestore", ctypes.POINTER(TreeStore) ),
	( "search_string", ( ctypes.c_char * 32 ) ),
	( "search_tse", TreeStoreElem ),
	( "flag", ctypes.c_short ),
	( "outlinevis", ctypes.c_short ),
	( "storeflag", ctypes.c_short ),
	( "search_flags", ctypes.c_short ),
])

__freeze_rpythonic_struct( SpaceImage, [
	( "next", ctypes.POINTER(SpaceLink) ),
	( "prev", ctypes.POINTER(SpaceLink) ),
	( "regionbase", ListBase ),
	( "spacetype", ctypes.c_int ),
	( "flag", ctypes.c_int ),
	( "image", ctypes.POINTER(Image) ),
	( "iuser", ImageUser ),
	( "cumap", ctypes.POINTER(CurveMapping) ),
	( "scopes", Scopes ),
	( "sample_line_hist", Histogram ),
	( "gpd", ctypes.POINTER(bGPdata) ),
	( "cursor", ( ctypes.c_float * 2 ) ),
	( "xof", ctypes.c_float ),
	( "yof", ctypes.c_float ),
	( "zoom", ctypes.c_float ),
	( "centx", ctypes.c_float ),
	( "centy", ctypes.c_float ),
	( "curtile", ctypes.c_short ),
	( "pad", ctypes.c_short ),
	( "lock", ctypes.c_short ),
	( "pin", ctypes.c_short ),
	( "dt_uv", ctypes.c_char ),
	( "sticky", ctypes.c_char ),
	( "dt_uvstretch", ctypes.c_char ),
	( "around", ctypes.c_char ),
])

__freeze_rpythonic_struct( SpaceNla, [
	( "next", ctypes.POINTER(SpaceLink) ),
	( "prev", ctypes.POINTER(SpaceLink) ),
	( "regionbase", ListBase ),
	( "spacetype", ctypes.c_int ),
	( "blockscale", ctypes.c_float ),
	( "blockhandler", ( ctypes.c_short * 8 ) ),
	( "autosnap", ctypes.c_short ),
	( "flag", ctypes.c_short ),
	( "pad", ctypes.c_int ),
	( "ads", ctypes.POINTER(bDopeSheet) ),
	( "v2d", View2D ),
])

__freeze_rpythonic_struct( SpaceText, [
	( "next", ctypes.POINTER(SpaceLink) ),
	( "prev", ctypes.POINTER(SpaceLink) ),
	( "regionbase", ListBase ),
	( "spacetype", ctypes.c_int ),
	( "blockscale", ctypes.c_float ),
	( "blockhandler", ( ctypes.c_short * 8 ) ),
	( "text", ctypes.POINTER(Text) ),
	( "top", ctypes.c_int ),
	( "viewlines", ctypes.c_int ),
	( "flags", ctypes.c_short ),
	( "menunr", ctypes.c_short ),
	( "lheight", ctypes.c_short ),
	( "cwidth", ctypes.c_char ),
	( "linenrs_tot", ctypes.c_char ),
	( "left", ctypes.c_int ),
	( "showlinenrs", ctypes.c_int ),
	( "tabnumber", ctypes.c_int ),
	( "showsyntax", ctypes.c_short ),
	( "line_hlight", ctypes.c_short ),
	( "overwrite", ctypes.c_short ),
	( "live_edit", ctypes.c_short ),
	( "pix_per_line", ctypes.c_float ),
	( "txtscroll", rcti ),
	( "txtbar", rcti ),
	( "wordwrap", ctypes.c_int ),
	( "doplugins", ctypes.c_int ),
	( "findstr", ( ctypes.c_char * 256 ) ),
	( "replacestr", ( ctypes.c_char * 256 ) ),
	( "margin_column", ctypes.c_short ),
	( "pad", ( ctypes.c_char * 6 ) ),
	( "drawcache", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( Script, [
	( "C_id", ID ),
	( "py_draw", ctypes.POINTER(ctypes.c_void_p) ),
	( "py_event", ctypes.POINTER(ctypes.c_void_p) ),
	( "py_button", ctypes.POINTER(ctypes.c_void_p) ),
	( "py_browsercallback", ctypes.POINTER(ctypes.c_void_p) ),
	( "py_globaldict", ctypes.POINTER(ctypes.c_void_p) ),
	( "flags", ctypes.c_int ),
	( "lastspace", ctypes.c_int ),
	( "scriptname", ( ctypes.c_char * 256 ) ),
	( "scriptarg", ( ctypes.c_char * 256 ) ),
])

__freeze_rpythonic_struct( SpaceScript, [
	( "next", ctypes.POINTER(SpaceLink) ),
	( "prev", ctypes.POINTER(SpaceLink) ),
	( "regionbase", ListBase ),
	( "spacetype", ctypes.c_int ),
	( "blockscale", ctypes.c_float ),
	( "script", ctypes.POINTER(Script) ),
	( "flags", ctypes.c_short ),
	( "menunr", ctypes.c_short ),
	( "pad1", ctypes.c_int ),
	( "but_refs", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( SpaceTimeCache, [
	( "next", ctypes.POINTER(SpaceTimeCache) ),
	( "prev", ctypes.POINTER(SpaceTimeCache) ),
	( "array", ctypes.POINTER(ctypes.c_float) ),
])

__freeze_rpythonic_struct( SpaceTime, [
	( "next", ctypes.POINTER(SpaceLink) ),
	( "prev", ctypes.POINTER(SpaceLink) ),
	( "regionbase", ListBase ),
	( "spacetype", ctypes.c_int ),
	( "blockscale", ctypes.c_float ),
	( "v2d", View2D ),
	( "caches", ListBase ),
	( "cache_display", ctypes.c_int ),
	( "pad", ctypes.c_int ),
	( "flag", ctypes.c_int ),
	( "redraws", ctypes.c_int ),
])

__freeze_rpythonic_struct( SpaceNode, [
	( "next", ctypes.POINTER(SpaceLink) ),
	( "prev", ctypes.POINTER(SpaceLink) ),
	( "regionbase", ListBase ),
	( "spacetype", ctypes.c_int ),
	( "blockscale", ctypes.c_float ),
	( "blockhandler", ( ctypes.c_short * 8 ) ),
	( "v2d", View2D ),
	( "C_id", ctypes.POINTER(ID) ),
	( "from", ctypes.POINTER(ID) ),
	( "flag", ctypes.c_short ),
	( "menunr", ctypes.c_short ),
	( "aspect", ctypes.c_float ),
	( "curfont", ctypes.POINTER(ctypes.c_void_p) ),
	( "xof", ctypes.c_float ),
	( "yof", ctypes.c_float ),
	( "zoom", ctypes.c_float ),
	( "padf", ctypes.c_float ),
	( "mx", ctypes.c_float ),
	( "my", ctypes.c_float ),
	( "nodetree", ctypes.POINTER(bNodeTree) ),
	( "edittree", ctypes.POINTER(bNodeTree) ),
	( "treetype", ctypes.c_int ),
	( "texfrom", ctypes.c_short ),
	( "recalc", ctypes.c_short ),
	( "linkdrag", ListBase ),
	( "gpd", ctypes.POINTER(bGPdata) ),
])

__freeze_rpythonic_struct( SpaceLogic, [
	( "next", ctypes.POINTER(SpaceLink) ),
	( "prev", ctypes.POINTER(SpaceLink) ),
	( "regionbase", ListBase ),
	( "spacetype", ctypes.c_int ),
	( "blockscale", ctypes.c_float ),
	( "blockhandler", ( ctypes.c_short * 8 ) ),
	( "flag", ctypes.c_short ),
	( "scaflag", ctypes.c_short ),
	( "pad", ctypes.c_int ),
	( "gpd", ctypes.POINTER(bGPdata) ),
])

__freeze_rpythonic_struct( SpaceImaSel, [
	( "next", ctypes.POINTER(SpaceLink) ),
	( "prev", ctypes.POINTER(SpaceLink) ),
	( "regionbase", ListBase ),
	( "spacetype", ctypes.c_int ),
	( "blockscale", ctypes.c_float ),
	( "blockhandler", ( ctypes.c_short * 8 ) ),
	( "v2d", View2D ),
	( "files", ctypes.POINTER(FileList) ),
	( "title", ( ctypes.c_char * 24 ) ),
	( "dir", ( ctypes.c_char * 240 ) ),
	( "file", ( ctypes.c_char * 80 ) ),
	( "C_type", ctypes.c_short ),
	( "menu", ctypes.c_short ),
	( "flag", ctypes.c_short ),
	( "sort", ctypes.c_short ),
	( "curfont", ctypes.POINTER(ctypes.c_void_p) ),
	( "active_file", ctypes.c_int ),
	( "numtilesx", ctypes.c_int ),
	( "numtilesy", ctypes.c_int ),
	( "selstate", ctypes.c_int ),
	( "viewrect", rcti ),
	( "bookmarkrect", rcti ),
	( "scrollpos", ctypes.c_float ),
	( "scrollheight", ctypes.c_float ),
	( "scrollarea", ctypes.c_float ),
	( "aspect", ctypes.c_float ),
	( "retval", ctypes.c_ushort ),
	( "ipotype", ctypes.c_short ),
	( "filter", ctypes.c_short ),
	( "active_bookmark", ctypes.c_short ),
	( "pad", ctypes.c_short ),
	( "pad1", ctypes.c_short ),
	( "prv_w", ctypes.c_short ),
	( "prv_h", ctypes.c_short ),
	( "returnfunc", ctypes.c_void_p ),
	( "returnfunc_event", ctypes.c_void_p ),
	( "returnfunc_args", ctypes.c_void_p ),
	( "arg1", ctypes.POINTER(ctypes.c_void_p) ),
	( "arg2", ctypes.POINTER(ctypes.c_void_p) ),
	( "menup", ctypes.POINTER(ctypes.c_short) ),
	( "pupmenu", ctypes.POINTER(ctypes.c_char) ),
	( "img", ctypes.POINTER(ImBuf) ),
])

__freeze_rpythonic_struct( ConsoleLine, [
	( "next", ctypes.POINTER(ConsoleLine) ),
	( "prev", ctypes.POINTER(ConsoleLine) ),
	( "len_alloc", ctypes.c_int ),
	( "C_len", ctypes.c_int ),
	( "line", ctypes.POINTER(ctypes.c_char) ),
	( "cursor", ctypes.c_int ),
	( "C_type", ctypes.c_int ),
])

__freeze_rpythonic_struct( SpaceConsole, [
	( "next", ctypes.POINTER(SpaceLink) ),
	( "prev", ctypes.POINTER(SpaceLink) ),
	( "regionbase", ListBase ),
	( "spacetype", ctypes.c_int ),
	( "blockscale", ctypes.c_float ),
	( "blockhandler", ( ctypes.c_short * 8 ) ),
	( "lheight", ctypes.c_int ),
	( "pad", ctypes.c_int ),
	( "scrollback", ListBase ),
	( "history", ListBase ),
	( "prompt", ( ctypes.c_char * 256 ) ),
	( "language", ( ctypes.c_char * 32 ) ),
	( "sel_start", ctypes.c_int ),
	( "sel_end", ctypes.c_int ),
])

__freeze_rpythonic_struct( SpaceUserPref, [
	( "next", ctypes.POINTER(SpaceLink) ),
	( "prev", ctypes.POINTER(SpaceLink) ),
	( "regionbase", ListBase ),
	( "spacetype", ctypes.c_int ),
	( "pad", ctypes.c_int ),
	( "filter", ( ctypes.c_char * 64 ) ),
])

__freeze_rpythonic_struct( SpaceSound, [
	( "next", ctypes.POINTER(SpaceLink) ),
	( "prev", ctypes.POINTER(SpaceLink) ),
	( "regionbase", ListBase ),
	( "spacetype", ctypes.c_int ),
	( "blockscale", ctypes.c_float ),
	( "area", ctypes.POINTER(ScrArea) ),
	( "v2d", View2D ),
	( "sound", ctypes.POINTER(bSound) ),
	( "mode", ctypes.c_short ),
	( "sndnr", ctypes.c_short ),
	( "xof", ctypes.c_short ),
	( "yof", ctypes.c_short ),
	( "flag", ctypes.c_short ),
	( "lock", ctypes.c_short ),
	( "pad2", ctypes.c_int ),
])

__freeze_rpythonic_struct( ViewDepths, [
])

__freeze_rpythonic_struct( BoundBox, [
])

__freeze_rpythonic_struct( SmoothViewStore, [
])

__freeze_rpythonic_struct( BGpic, [
	( "next", ctypes.POINTER(BGpic) ),
	( "prev", ctypes.POINTER(BGpic) ),
	( "ima", ctypes.POINTER(Image) ),
	( "iuser", ImageUser ),
	( "xof", ctypes.c_float ),
	( "yof", ctypes.c_float ),
	( "size", ctypes.c_float ),
	( "blend", ctypes.c_float ),
	( "view", ctypes.c_short ),
	( "flag", ctypes.c_short ),
	( "pad2", ctypes.c_float ),
])

__freeze_rpythonic_struct( RegionView3D, [
	( "winmat", ( ctypes.c_float * 4 ) ),
	( "viewmat", ( ctypes.c_float * 4 ) ),
	( "viewinv", ( ctypes.c_float * 4 ) ),
	( "persmat", ( ctypes.c_float * 4 ) ),
	( "persinv", ( ctypes.c_float * 4 ) ),
	( "viewmatob", ( ctypes.c_float * 4 ) ),
	( "persmatob", ( ctypes.c_float * 4 ) ),
	( "twmat", ( ctypes.c_float * 4 ) ),
	( "viewquat", ( ctypes.c_float * 4 ) ),
	( "dist", ctypes.c_float ),
	( "zfac", ctypes.c_float ),
	( "camdx", ctypes.c_float ),
	( "camdy", ctypes.c_float ),
	( "pixsize", ctypes.c_float ),
	( "ofs", ( ctypes.c_float * 3 ) ),
	( "camzoom", ctypes.c_short ),
	( "twdrawflag", ctypes.c_short ),
	( "is_persp", ctypes.c_char ),
	( "pad", ( ctypes.c_char * 3 ) ),
	( "rflag", ctypes.c_short ),
	( "viewlock", ctypes.c_short ),
	( "persp", ctypes.c_short ),
	( "view", ctypes.c_short ),
	( "clip", ( ctypes.c_float * 6 ) ),
	( "clip_local", ( ctypes.c_float * 6 ) ),
	( "clipbb", ctypes.POINTER(BoundBox) ),
	( "gpd", ctypes.POINTER(bGPdata) ),
	( "localvd", ctypes.POINTER(RegionView3D) ),
	( "ri", ctypes.POINTER(RenderInfo) ),
	( "depths", ctypes.POINTER(ViewDepths) ),
	( "sms", ctypes.POINTER(SmoothViewStore) ),
	( "smooth_timer", ctypes.POINTER(wmTimer) ),
	( "lviewquat", ( ctypes.c_float * 4 ) ),
	( "lpersp", ctypes.c_short ),
	( "lview", ctypes.c_short ),
	( "gridview", ctypes.c_float ),
	( "twangle", ( ctypes.c_float * 3 ) ),
	( "rot_angle", ctypes.c_float ),
	( "rot_axis", ( ctypes.c_float * 3 ) ),
	( "pad2", ( ctypes.c_char * 4 ) ),
])

__freeze_rpythonic_struct( View3D, [
	( "next", ctypes.POINTER(SpaceLink) ),
	( "prev", ctypes.POINTER(SpaceLink) ),
	( "regionbase", ListBase ),
	( "spacetype", ctypes.c_int ),
	( "blockscale", ctypes.c_float ),
	( "blockhandler", ( ctypes.c_short * 8 ) ),
	( "viewquat", ( ctypes.c_float * 4 ) ),
	( "dist", ctypes.c_float ),
	( "pad1", ctypes.c_float ),
	( "lay_used", ctypes.c_uint ),
	( "persp", ctypes.c_short ),
	( "view", ctypes.c_short ),
	( "camera", ctypes.POINTER(Object) ),
	( "ob_centre", ctypes.POINTER(Object) ),
	( "bgpicbase", ListBase ),
	( "bgpic", ctypes.POINTER(BGpic) ),
	( "localvd", ctypes.POINTER(View3D) ),
	( "ob_centre_bone", ( ctypes.c_char * 32 ) ),
	( "lay", ctypes.c_uint ),
	( "layact", ctypes.c_int ),
	( "drawtype", ctypes.c_short ),
	( "ob_centre_cursor", ctypes.c_short ),
	( "scenelock", ctypes.c_short ),
	( "around", ctypes.c_short ),
	( "flag", ctypes.c_short ),
	( "flag2", ctypes.c_short ),
	( "lens", ctypes.c_float ),
	( "grid", ctypes.c_float ),
	( "near", ctypes.c_float ),
	( "far", ctypes.c_float ),
	( "ofs", ( ctypes.c_float * 3 ) ),
	( "cursor", ( ctypes.c_float * 3 ) ),
	( "modeselect", ctypes.c_short ),
	( "gridlines", ctypes.c_short ),
	( "gridsubdiv", ctypes.c_short ),
	( "gridflag", ctypes.c_char ),
	( "twtype", ctypes.c_char ),
	( "twmode", ctypes.c_char ),
	( "twflag", ctypes.c_char ),
	( "pad2", ( ctypes.c_char * 2 ) ),
	( "afterdraw_transp", ListBase ),
	( "afterdraw_xray", ListBase ),
	( "afterdraw_xraytransp", ListBase ),
	( "zbuf", ctypes.c_short ),
	( "transp", ctypes.c_short ),
	( "xray", ctypes.c_short ),
	( "pad3", ( ctypes.c_char * 2 ) ),
	( "properties_storage", ctypes.POINTER(ctypes.c_void_p) ),
	( "gpd", ctypes.POINTER(bGPdata) ),
])

__freeze_rpythonic_struct( Mesh, [
])

__freeze_rpythonic_struct( wmJob, [
])

__freeze_rpythonic_struct( BCursor, [
	( "small_bm", ctypes.POINTER(ctypes.c_char) ),
	( "small_mask", ctypes.POINTER(ctypes.c_char) ),
	( "small_sizex", ctypes.c_char ),
	( "small_sizey", ctypes.c_char ),
	( "small_hotx", ctypes.c_char ),
	( "small_hoty", ctypes.c_char ),
	( "big_bm", ctypes.POINTER(ctypes.c_char) ),
	( "big_mask", ctypes.POINTER(ctypes.c_char) ),
	( "big_sizex", ctypes.c_char ),
	( "big_sizey", ctypes.c_char ),
	( "big_hotx", ctypes.c_char ),
	( "big_hoty", ctypes.c_char ),
	( "fg_color", ctypes.c_char ),
	( "bg_color", ctypes.c_char ),
])

__freeze_rpythonic_struct( wmNotifier, [
	( "next", ctypes.POINTER(wmNotifier) ),
	( "prev", ctypes.POINTER(wmNotifier) ),
	( "wm", ctypes.POINTER(wmWindowManager) ),
	( "window", ctypes.POINTER(wmWindow) ),
	( "swinid", ctypes.c_int ),
	( "category", ctypes.c_uint ),
	( "data", ctypes.c_uint ),
	( "subtype", ctypes.c_uint ),
	( "action", ctypes.c_uint ),
	( "reference", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( wmGesture, [
	( "next", ctypes.POINTER(wmGesture) ),
	( "prev", ctypes.POINTER(wmGesture) ),
	( "event_type", ctypes.c_int ),
	( "mode", ctypes.c_int ),
	( "C_type", ctypes.c_int ),
	( "swinid", ctypes.c_int ),
	( "points", ctypes.c_int ),
	( "size", ctypes.c_int ),
	( "customdata", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( wmEvent, [
	( "next", ctypes.POINTER(wmEvent) ),
	( "prev", ctypes.POINTER(wmEvent) ),
	( "C_type", ctypes.c_short ),
	( "val", ctypes.c_short ),
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
	( "mval", ( ctypes.c_int * 2 ) ),
	( "unicode", ctypes.c_short ),
	( "ascii", ctypes.c_char ),
	( "pad", ctypes.c_char ),
	( "prevtype", ctypes.c_short ),
	( "prevval", ctypes.c_short ),
	( "prevx", ctypes.c_int ),
	( "prevy", ctypes.c_int ),
	( "prevclicktime", ctypes.c_double ),
	( "prevclickx", ctypes.c_int ),
	( "prevclicky", ctypes.c_int ),
	( "shift", ctypes.c_short ),
	( "ctrl", ctypes.c_short ),
	( "alt", ctypes.c_short ),
	( "oskey", ctypes.c_short ),
	( "keymodifier", ctypes.c_short ),
	( "pad1", ctypes.c_short ),
	( "keymap_idname", ctypes.POINTER(ctypes.c_char) ),
	( "custom", ctypes.c_short ),
	( "customdatafree", ctypes.c_short ),
	( "pad2", ctypes.c_int ),
	( "customdata", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( wmTabletData, [
	( "Active", ctypes.c_int ),
	( "Pressure", ctypes.c_float ),
	( "Xtilt", ctypes.c_float ),
	( "Ytilt", ctypes.c_float ),
])

__freeze_rpythonic_struct( wmNDOFMotionData, [
	#opaque-warning# <rpythonic.rpythonic.SomeThing object at 0xdb76ecc>
	#opaque-warning# <rpythonic.rpythonic.SomeThing object at 0xdb7b36c>
	( "dt", ctypes.c_float ),
	( "progress", ctypes.c_int ),
])

__freeze_rpythonic_struct( wmTimer, [
	( "next", ctypes.POINTER(wmTimer) ),
	( "prev", ctypes.POINTER(wmTimer) ),
	( "win", ctypes.POINTER(wmWindow) ),
	( "timestep", ctypes.c_double ),
	( "event_type", ctypes.c_int ),
	( "customdata", ctypes.POINTER(ctypes.c_void_p) ),
	( "duration", ctypes.c_double ),
	( "delta", ctypes.c_double ),
	( "ltime", ctypes.c_double ),
	( "ntime", ctypes.c_double ),
	( "stime", ctypes.c_double ),
	( "sleep", ctypes.c_int ),
])

__freeze_rpythonic_struct( wmOperatorType, [
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "idname", ctypes.POINTER(ctypes.c_char) ),
	( "description", ctypes.POINTER(ctypes.c_char) ),
	( "C_exec", ctypes.c_void_p ),
	( "check", ctypes.c_void_p ),
	( "invoke", ctypes.c_void_p ),
	( "cancel", ctypes.c_void_p ),
	( "modal", ctypes.c_void_p ),
	( "poll", ctypes.c_void_p ),
	( "ui", ctypes.c_void_p ),
	( "srna", ctypes.POINTER(StructRNA) ),
	( "prop", ctypes.POINTER(PropertyRNA) ),
	( "macro", ListBase ),
	( "flag", ctypes.c_short ),
	( "modalkeymap", ctypes.POINTER(wmKeyMap) ),
	( "pyop_data", ctypes.POINTER(ctypes.c_void_p) ),
	( "pyop_poll", ctypes.c_void_p ),
	( "ext", ExtensionRNA ),
])

__freeze_rpythonic_struct( wmReport, [
	( "next", ctypes.POINTER(wmReport) ),
	( "prev", ctypes.POINTER(wmReport) ),
	( "typestr", ctypes.POINTER(ctypes.c_char) ),
	( "message", ctypes.POINTER(ctypes.c_char) ),
	( "C_type", ctypes.c_int ),
])

__freeze_rpythonic_struct( wmDrag, [
	( "next", ctypes.POINTER(wmDrag) ),
	( "prev", ctypes.POINTER(wmDrag) ),
	( "icon", ctypes.c_int ),
	( "C_type", ctypes.c_int ),
	( "poin", ctypes.POINTER(ctypes.c_void_p) ),
	( "path", ( ctypes.c_char * 240 ) ),
	( "value", ctypes.c_double ),
	( "imb", ctypes.POINTER(ImBuf) ),
	( "scale", ctypes.c_float ),
	( "sx", ctypes.c_int ),
	( "sy", ctypes.c_int ),
	( "opname", ( ctypes.c_char * 240 ) ),
])

__freeze_rpythonic_struct( wmDropBox, [
	( "next", ctypes.POINTER(wmDropBox) ),
	( "prev", ctypes.POINTER(wmDropBox) ),
	( "poll", ctypes.c_void_p ),
	( "copy", ctypes.c_void_p ),
	( "ot", ctypes.POINTER(wmOperatorType) ),
	( "opcontext", ctypes.c_short ),
	( "properties", ctypes.POINTER(IDProperty) ),
	( "ptr", ctypes.POINTER(PointerRNA) ),
])

__freeze_rpythonic_struct( RecentFile, [
	( "next", ctypes.POINTER(RecentFile) ),
	( "prev", ctypes.POINTER(RecentFile) ),
	( "filepath", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( wmPaintCursor, [
	( "next", ctypes.POINTER(wmPaintCursor) ),
	( "prev", ctypes.POINTER(wmPaintCursor) ),
	( "customdata", ctypes.POINTER(ctypes.c_void_p) ),
	( "poll", ctypes.c_void_p ),
	( "draw", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( wmEventHandler, [
	( "next", ctypes.POINTER(wmEventHandler) ),
	( "prev", ctypes.POINTER(wmEventHandler) ),
	( "C_type", ctypes.c_int ),
	( "flag", ctypes.c_int ),
	( "keymap", ctypes.POINTER(wmKeyMap) ),
	( "bblocal", ctypes.POINTER(rcti) ),
	( "bbwin", ctypes.POINTER(rcti) ),
	( "op", ctypes.POINTER(wmOperator) ),
	( "op_area", ctypes.POINTER(ScrArea) ),
	( "op_region", ctypes.POINTER(ARegion) ),
	( "ui_handle", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(bContext),ctypes.POINTER(wmEvent),ctypes.POINTER(ctypes.c_void_p),) ),
	( "ui_remove", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(bContext),ctypes.POINTER(ctypes.c_void_p),) ),
	( "ui_userdata", ctypes.POINTER(ctypes.c_void_p) ),
	( "ui_area", ctypes.POINTER(ScrArea) ),
	( "ui_region", ctypes.POINTER(ARegion) ),
	( "ui_menu", ctypes.POINTER(ARegion) ),
	( "filescreen", ctypes.POINTER(bScreen) ),
	( "dropboxes", ctypes.POINTER(ListBase) ),
])

__freeze_rpythonic_struct( MTFace, [
])

__freeze_rpythonic_struct( SmokeModifierData, [
])

__freeze_rpythonic_struct( GPUFrameBuffer, [
])

__freeze_rpythonic_struct( GPUOffScreen, [
])

__freeze_rpythonic_struct( GPUShader, [
])

__freeze_rpythonic_struct( GPUVertexAttribs, [
	( "layer", ( layer * 32 ) ),
	( "totlayer", ctypes.c_int ),
])

__freeze_rpythonic_struct( layer, [
	( "C_type", ( ctypes.c_int * 32 ) ),
	( "glindex", ( ctypes.c_int * 32 ) ),
	( "gltexco", ( ctypes.c_int * 32 ) ),
	( "name", ( ctypes.c_char * 32 ) ),
])

__freeze_rpythonic_struct( DMGridData, [
])

__freeze_rpythonic_struct( GPUVertPointLink, [
])

__freeze_rpythonic_struct( GPUBuffer, [
	( "size", ctypes.c_int ),
	( "pointer", ctypes.POINTER(ctypes.c_void_p) ),
	( "C_id", ctypes.c_uint ),
])

__freeze_rpythonic_struct( GPUBufferMaterial, [
	( "start", ctypes.c_int ),
	( "totpoint", ctypes.c_int ),
	( "mat_nr", ctypes.c_short ),
])

__freeze_rpythonic_struct( GPUDrawObject, [
	( "points", ctypes.POINTER(GPUBuffer) ),
	( "normals", ctypes.POINTER(GPUBuffer) ),
	( "uv", ctypes.POINTER(GPUBuffer) ),
	( "colors", ctypes.POINTER(GPUBuffer) ),
	( "edges", ctypes.POINTER(GPUBuffer) ),
	( "uvedges", ctypes.POINTER(GPUBuffer) ),
	( "triangle_to_mface", ctypes.POINTER(ctypes.c_int) ),
	( "vert_points", ctypes.POINTER(GPUVertPointLink) ),
	( "vert_points_mem", ctypes.POINTER(GPUVertPointLink) ),
	( "vert_points_usage", ctypes.c_int ),
	( "colType", ctypes.c_int ),
	( "materials", ctypes.POINTER(GPUBufferMaterial) ),
	( "totmaterial", ctypes.c_int ),
	( "tot_triangle_point", ctypes.c_int ),
	( "tot_loose_point", ctypes.c_int ),
	( "totvert", ctypes.c_int ),
	( "totedge", ctypes.c_int ),
	( "legacy", ctypes.c_int ),
])

__freeze_rpythonic_struct( GPUAttrib, [
	( "index", ctypes.c_int ),
	( "size", ctypes.c_int ),
	( "C_type", ctypes.c_int ),
])

__freeze_rpythonic_struct( MVert, [
])

__freeze_rpythonic_struct( MFace, [
])

__freeze_rpythonic_struct( exception, [
	( "C_type", ctypes.c_int ),
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "arg1", ctypes.c_double ),
	( "arg2", ctypes.c_double ),
	( "retval", ctypes.c_double ),
])

__freeze_rpythonic_struct( DualQuat, [
	( "quat", ( ctypes.c_float * 4 ) ),
	( "trans", ( ctypes.c_float * 4 ) ),
	( "scale", ( ctypes.c_float * 4 ) ),
	( "scale_weight", ctypes.c_float ),
])

__freeze_rpythonic_struct( VertexTangent, [
	( "next", ctypes.POINTER(VertexTangent) ),
	( "tang", ( ctypes.c_float * 3 ) ),
	( "uv", ( ctypes.c_float * 2 ) ),
])

__freeze_rpythonic_struct( BHead, [
])

__freeze_rpythonic_struct( BlendFileData, [
	( "main", ctypes.POINTER(Main) ),
	( "user", ctypes.POINTER(UserDef) ),
	( "winpos", ctypes.c_int ),
	( "fileflags", ctypes.c_int ),
	( "displaymode", ctypes.c_int ),
	( "globalf", ctypes.c_int ),
	( "filename", ( ctypes.c_char * 240 ) ),
	( "curscreen", ctypes.POINTER(bScreen) ),
	( "curscene", ctypes.POINTER(Scene) ),
	( "C_type", ctypes.c_int ),
])

__freeze_rpythonic_struct( bPose, [
])

__freeze_rpythonic_struct( BIK_ParamValue, [
	( "C_type", ctypes.c_short ),
	( "length", ctypes.c_short ),
	( "value", value ),
])

__freeze_rpythonic_struct( value, [
	( "f", ( ctypes.c_float * 8 ) ),
	( "i", ( ctypes.c_int * 8 ) ),
	( "s", ( ctypes.c_char * 32 ) ),
])

__freeze_rpythonic_struct( GHOST_TabletData, [
	( "Active", ctypes.c_int ),
	( "Pressure", ctypes.c_float ),
	( "Xtilt", ctypes.c_float ),
	( "Ytilt", ctypes.c_float ),
])

__freeze_rpythonic_struct( GHOST_TEventCursorData, [
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
])

__freeze_rpythonic_struct( GHOST_TEventButtonData, [
	( "button", ctypes.c_int ),
])

__freeze_rpythonic_struct( GHOST_TEventWheelData, [
	( "z", ctypes.c_int ),
])

__freeze_rpythonic_struct( GHOST_TEventTrackpadData, [
	( "subtype", ctypes.c_int ),
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
	( "deltaX", ctypes.c_int ),
	( "deltaY", ctypes.c_int ),
])

__freeze_rpythonic_struct( GHOST_TEventDragnDropData, [
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
	( "dataType", ctypes.c_int ),
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( GHOST_TStringArray, [
	( "count", ctypes.c_int ),
	( "strings", ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)) ),
])

__freeze_rpythonic_struct( GHOST_TEventNDOFMotionData, [
	( "tx", ctypes.c_float ),
	( "ty", ctypes.c_float ),
	( "tz", ctypes.c_float ),
	( "rx", ctypes.c_float ),
	( "ry", ctypes.c_float ),
	( "rz", ctypes.c_float ),
	( "dt", ctypes.c_float ),
	( "progress", ctypes.c_int ),
])

__freeze_rpythonic_struct( GHOST_TEventNDOFButtonData, [
	( "action", ctypes.c_int ),
	( "button", ctypes.c_short ),
])

__freeze_rpythonic_struct( GHOST_TEventKeyData, [
	( "key", ctypes.c_int ),
	( "ascii", ctypes.c_char ),
])

__freeze_rpythonic_struct( GHOST_DisplaySetting, [
	( "xPixels", ctypes.c_uint ),
	( "yPixels", ctypes.c_uint ),
	( "bpp", ctypes.c_uint ),
	( "frequency", ctypes.c_uint ),
])

__freeze_rpythonic_struct( GHOST_SystemHandle__, [
	( "unused", ctypes.c_int ),
])

__freeze_rpythonic_struct( GHOST_TimerTaskHandle__, [
	( "unused", ctypes.c_int ),
])

__freeze_rpythonic_struct( GHOST_WindowHandle__, [
	( "unused", ctypes.c_int ),
])

__freeze_rpythonic_struct( GHOST_EventHandle__, [
	( "unused", ctypes.c_int ),
])

__freeze_rpythonic_struct( GHOST_RectangleHandle__, [
	( "unused", ctypes.c_int ),
])

__freeze_rpythonic_struct( GHOST_EventConsumerHandle__, [
	( "unused", ctypes.c_int ),
])

__freeze_rpythonic_struct( GHOST_SystemPathsHandle__, [
	( "unused", ctypes.c_int ),
])

__freeze_rpythonic_struct( plPhysicsSdkHandle__, [
	( "unused", ctypes.c_int ),
])

__freeze_rpythonic_struct( plDynamicsWorldHandle__, [
	( "unused", ctypes.c_int ),
])

__freeze_rpythonic_struct( plRigidBodyHandle__, [
	( "unused", ctypes.c_int ),
])

__freeze_rpythonic_struct( plCollisionShapeHandle__, [
	( "unused", ctypes.c_int ),
])

__freeze_rpythonic_struct( plConstraintHandle__, [
	( "unused", ctypes.c_int ),
])

__freeze_rpythonic_struct( plMeshInterfaceHandle__, [
	( "unused", ctypes.c_int ),
])

__freeze_rpythonic_struct( plCollisionBroadphaseHandle__, [
	( "unused", ctypes.c_int ),
])

__freeze_rpythonic_struct( plBroadphaseProxyHandle__, [
	( "unused", ctypes.c_int ),
])

__freeze_rpythonic_struct( plCollisionWorldHandle__, [
	( "unused", ctypes.c_int ),
])

__freeze_rpythonic_struct( plRayCastResult, [
	( "m_body", ctypes.POINTER(plRigidBodyHandle__) ),
	( "m_shape", ctypes.POINTER(plCollisionShapeHandle__) ),
	( "m_positionWorld", ( ctypes.c_float * 3 ) ),
	( "m_normalWorld", ( ctypes.c_float * 3 ) ),
])

__freeze_rpythonic_struct( Ipo, [
])

__freeze_rpythonic_struct( MTex, [
	( "texco", ctypes.c_short ),
	( "mapto", ctypes.c_short ),
	( "maptoneg", ctypes.c_short ),
	( "blendtype", ctypes.c_short ),
	( "C_object", ctypes.POINTER(Object) ),
	( "tex", ctypes.POINTER(Tex) ),
	( "uvname", ( ctypes.c_char * 32 ) ),
	( "projx", ctypes.c_char ),
	( "projy", ctypes.c_char ),
	( "projz", ctypes.c_char ),
	( "mapping", ctypes.c_char ),
	( "ofs", ( ctypes.c_float * 3 ) ),
	( "size", ( ctypes.c_float * 3 ) ),
	( "rot", ctypes.c_float ),
	( "texflag", ctypes.c_short ),
	( "colormodel", ctypes.c_short ),
	( "pmapto", ctypes.c_short ),
	( "pmaptoneg", ctypes.c_short ),
	( "normapspace", ctypes.c_short ),
	( "which_output", ctypes.c_short ),
	( "brush_map_mode", ctypes.c_char ),
	( "pad", ( ctypes.c_char * 7 ) ),
	( "r", ctypes.c_float ),
	( "g", ctypes.c_float ),
	( "b", ctypes.c_float ),
	( "k", ctypes.c_float ),
	( "def_var", ctypes.c_float ),
	( "rt", ctypes.c_float ),
	( "colfac", ctypes.c_float ),
	( "varfac", ctypes.c_float ),
	( "norfac", ctypes.c_float ),
	( "dispfac", ctypes.c_float ),
	( "warpfac", ctypes.c_float ),
	( "colspecfac", ctypes.c_float ),
	( "mirrfac", ctypes.c_float ),
	( "alphafac", ctypes.c_float ),
	( "difffac", ctypes.c_float ),
	( "specfac", ctypes.c_float ),
	( "emitfac", ctypes.c_float ),
	( "hardfac", ctypes.c_float ),
	( "raymirrfac", ctypes.c_float ),
	( "translfac", ctypes.c_float ),
	( "ambfac", ctypes.c_float ),
	( "colemitfac", ctypes.c_float ),
	( "colreflfac", ctypes.c_float ),
	( "coltransfac", ctypes.c_float ),
	( "densfac", ctypes.c_float ),
	( "scatterfac", ctypes.c_float ),
	( "reflfac", ctypes.c_float ),
	( "timefac", ctypes.c_float ),
	( "lengthfac", ctypes.c_float ),
	( "clumpfac", ctypes.c_float ),
	( "dampfac", ctypes.c_float ),
	( "kinkfac", ctypes.c_float ),
	( "roughfac", ctypes.c_float ),
	( "padensfac", ctypes.c_float ),
	( "gravityfac", ctypes.c_float ),
	( "lifefac", ctypes.c_float ),
	( "sizefac", ctypes.c_float ),
	( "ivelfac", ctypes.c_float ),
	( "fieldfac", ctypes.c_float ),
	( "shadowfac", ctypes.c_float ),
	( "zenupfac", ctypes.c_float ),
	( "zendownfac", ctypes.c_float ),
	( "blendfac", ctypes.c_float ),
])

__freeze_rpythonic_struct( PluginTex, [
	( "name", ( ctypes.c_char * 160 ) ),
	( "handle", ctypes.POINTER(ctypes.c_void_p) ),
	( "pname", ctypes.POINTER(ctypes.c_char) ),
	( "stnames", ctypes.POINTER(ctypes.c_char) ),
	( "stypes", ctypes.c_int ),
	( "vars", ctypes.c_int ),
	( "varstr", ctypes.POINTER(ctypes.c_void_p) ),
	( "result", ctypes.POINTER(ctypes.c_float) ),
	( "cfra", ctypes.POINTER(ctypes.c_float) ),
	( "data", ( ctypes.c_float * 32 ) ),
	( "doit", ctypes.c_void_p ),
	( "instance_init", ctypes.c_void_p ),
	( "callback", ctypes.c_void_p ),
	( "version", ctypes.c_int ),
	( "pad", ctypes.c_int ),
])

__freeze_rpythonic_struct( CBData, [
	( "r", ctypes.c_float ),
	( "g", ctypes.c_float ),
	( "b", ctypes.c_float ),
	( "a", ctypes.c_float ),
	( "pos", ctypes.c_float ),
	( "cur", ctypes.c_int ),
])

__freeze_rpythonic_struct( ColorBand, [
	( "flag", ctypes.c_short ),
	( "tot", ctypes.c_short ),
	( "cur", ctypes.c_short ),
	( "ipotype", ctypes.c_short ),
	( "data", ( CBData * 32 ) ),
])

__freeze_rpythonic_struct( EnvMap, [
	( "C_object", ctypes.POINTER(Object) ),
	( "ima", ctypes.POINTER(Image) ),
	( "cube", ctypes.POINTER(( ImBuf * 6 )) ),
	( "imat", ( ctypes.c_float * 4 ) ),
	( "obimat", ( ctypes.c_float * 3 ) ),
	( "C_type", ctypes.c_short ),
	( "stype", ctypes.c_short ),
	( "clipsta", ctypes.c_float ),
	( "clipend", ctypes.c_float ),
	( "viewscale", ctypes.c_float ),
	( "notlay", ctypes.c_uint ),
	( "cuberes", ctypes.c_short ),
	( "depth", ctypes.c_short ),
	( "ok", ctypes.c_int ),
	( "lastframe", ctypes.c_int ),
	( "recalc", ctypes.c_short ),
	( "lastsize", ctypes.c_short ),
])

__freeze_rpythonic_struct( PointDensity, [
	( "flag", ctypes.c_short ),
	( "falloff_type", ctypes.c_short ),
	( "falloff_softness", ctypes.c_float ),
	( "radius", ctypes.c_float ),
	( "source", ctypes.c_short ),
	( "color_source", ctypes.c_short ),
	( "totpoints", ctypes.c_int ),
	( "pdpad", ctypes.c_int ),
	( "C_object", ctypes.POINTER(Object) ),
	( "psys", ctypes.c_int ),
	( "psys_cache_space", ctypes.c_short ),
	( "ob_cache_space", ctypes.c_short ),
	( "point_tree", ctypes.POINTER(ctypes.c_void_p) ),
	( "point_data", ctypes.POINTER(ctypes.c_float) ),
	( "noise_size", ctypes.c_float ),
	( "noise_depth", ctypes.c_short ),
	( "noise_influence", ctypes.c_short ),
	( "noise_basis", ctypes.c_short ),
	( "pdpad3", ( ctypes.c_short * 3 ) ),
	( "noise_fac", ctypes.c_float ),
	( "speed_scale", ctypes.c_float ),
	( "falloff_speed_scale", ctypes.c_float ),
	( "pdpad2", ctypes.c_float ),
	( "coba", ctypes.POINTER(ColorBand) ),
	( "falloff_curve", ctypes.POINTER(CurveMapping) ),
])

__freeze_rpythonic_struct( VoxelData, [
	( "resol", ( ctypes.c_int * 3 ) ),
	( "interp_type", ctypes.c_int ),
	( "file_format", ctypes.c_short ),
	( "flag", ctypes.c_short ),
	( "extend", ctypes.c_short ),
	( "smoked_type", ctypes.c_short ),
	( "C_object", ctypes.POINTER(Object) ),
	( "int_multiplier", ctypes.c_float ),
	( "still_frame", ctypes.c_int ),
	( "source_path", ( ctypes.c_char * 240 ) ),
	( "dataset", ctypes.POINTER(ctypes.c_float) ),
	( "cachedframe", ctypes.c_int ),
	( "ok", ctypes.c_int ),
])

__freeze_rpythonic_struct( Tex, [
	( "C_id", ID ),
	( "adt", ctypes.POINTER(AnimData) ),
	( "noisesize", ctypes.c_float ),
	( "turbul", ctypes.c_float ),
	( "bright", ctypes.c_float ),
	( "contrast", ctypes.c_float ),
	( "saturation", ctypes.c_float ),
	( "rfac", ctypes.c_float ),
	( "gfac", ctypes.c_float ),
	( "bfac", ctypes.c_float ),
	( "filtersize", ctypes.c_float ),
	( "pad2", ctypes.c_float ),
	( "mg_H", ctypes.c_float ),
	( "mg_lacunarity", ctypes.c_float ),
	( "mg_octaves", ctypes.c_float ),
	( "mg_offset", ctypes.c_float ),
	( "mg_gain", ctypes.c_float ),
	( "dist_amount", ctypes.c_float ),
	( "ns_outscale", ctypes.c_float ),
	( "vn_w1", ctypes.c_float ),
	( "vn_w2", ctypes.c_float ),
	( "vn_w3", ctypes.c_float ),
	( "vn_w4", ctypes.c_float ),
	( "vn_mexp", ctypes.c_float ),
	( "vn_distm", ctypes.c_short ),
	( "vn_coltype", ctypes.c_short ),
	( "noisedepth", ctypes.c_short ),
	( "noisetype", ctypes.c_short ),
	( "noisebasis", ctypes.c_short ),
	( "noisebasis2", ctypes.c_short ),
	( "imaflag", ctypes.c_short ),
	( "flag", ctypes.c_short ),
	( "C_type", ctypes.c_short ),
	( "stype", ctypes.c_short ),
	( "cropxmin", ctypes.c_float ),
	( "cropymin", ctypes.c_float ),
	( "cropxmax", ctypes.c_float ),
	( "cropymax", ctypes.c_float ),
	( "texfilter", ctypes.c_int ),
	( "afmax", ctypes.c_int ),
	( "xrepeat", ctypes.c_short ),
	( "yrepeat", ctypes.c_short ),
	( "extend", ctypes.c_short ),
	( "fie_ima", ctypes.c_short ),
	( "C_len", ctypes.c_int ),
	( "frames", ctypes.c_int ),
	( "offset", ctypes.c_int ),
	( "sfra", ctypes.c_int ),
	( "checkerdist", ctypes.c_float ),
	( "nabla", ctypes.c_float ),
	( "pad1", ctypes.c_float ),
	( "iuser", ImageUser ),
	( "nodetree", ctypes.POINTER(bNodeTree) ),
	( "ipo", ctypes.POINTER(Ipo) ),
	( "ima", ctypes.POINTER(Image) ),
	( "plugin", ctypes.POINTER(PluginTex) ),
	( "coba", ctypes.POINTER(ColorBand) ),
	( "env", ctypes.POINTER(EnvMap) ),
	( "preview", ctypes.POINTER(PreviewImage) ),
	( "pd", ctypes.POINTER(PointDensity) ),
	( "vd", ctypes.POINTER(VoxelData) ),
	( "use_nodes", ctypes.c_char ),
	( "pad", ( ctypes.c_char * 7 ) ),
])

__freeze_rpythonic_struct( TexMapping, [
	( "loc", ( ctypes.c_float * 3 ) ),
	( "rot", ( ctypes.c_float * 3 ) ),
	( "size", ( ctypes.c_float * 3 ) ),
	( "flag", ctypes.c_int ),
	( "mat", ( ctypes.c_float * 4 ) ),
	( "min", ( ctypes.c_float * 3 ) ),
	( "max", ( ctypes.c_float * 3 ) ),
	( "ob", ctypes.POINTER(Object) ),
])

__freeze_rpythonic_struct( uiFont, [
	( "next", ctypes.POINTER(uiFont) ),
	( "prev", ctypes.POINTER(uiFont) ),
	( "filename", ( ctypes.c_char * 256 ) ),
	( "blf_id", ctypes.c_short ),
	( "uifont_id", ctypes.c_short ),
	( "r_to_l", ctypes.c_short ),
	( "pad", ctypes.c_short ),
])

__freeze_rpythonic_struct( uiFontStyle, [
	( "uifont_id", ctypes.c_short ),
	( "points", ctypes.c_short ),
	( "kerning", ctypes.c_short ),
	( "pad", ( ctypes.c_char * 6 ) ),
	( "italic", ctypes.c_short ),
	( "bold", ctypes.c_short ),
	( "shadow", ctypes.c_short ),
	( "shadx", ctypes.c_short ),
	( "shady", ctypes.c_short ),
	( "align", ctypes.c_short ),
	( "shadowalpha", ctypes.c_float ),
	( "shadowcolor", ctypes.c_float ),
])

__freeze_rpythonic_struct( uiStyle, [
	( "next", ctypes.POINTER(uiStyle) ),
	( "prev", ctypes.POINTER(uiStyle) ),
	( "name", ( ctypes.c_char * 64 ) ),
	( "paneltitle", uiFontStyle ),
	( "grouplabel", uiFontStyle ),
	( "widgetlabel", uiFontStyle ),
	( "widget", uiFontStyle ),
	( "panelzoom", ctypes.c_float ),
	( "minlabelchars", ctypes.c_short ),
	( "minwidgetchars", ctypes.c_short ),
	( "columnspace", ctypes.c_short ),
	( "templatespace", ctypes.c_short ),
	( "boxspace", ctypes.c_short ),
	( "buttonspacex", ctypes.c_short ),
	( "buttonspacey", ctypes.c_short ),
	( "panelspace", ctypes.c_short ),
	( "panelouter", ctypes.c_short ),
	( "pad", ( ctypes.c_short * 1 ) ),
])

__freeze_rpythonic_struct( uiWidgetColors, [
	( "outline", ( ctypes.c_char * 4 ) ),
	( "inner", ( ctypes.c_char * 4 ) ),
	( "inner_sel", ( ctypes.c_char * 4 ) ),
	( "item", ( ctypes.c_char * 4 ) ),
	( "text", ( ctypes.c_char * 4 ) ),
	( "text_sel", ( ctypes.c_char * 4 ) ),
	( "shaded", ctypes.c_short ),
	( "shadetop", ctypes.c_short ),
	( "shadedown", ctypes.c_short ),
	( "alpha_check", ctypes.c_short ),
])

__freeze_rpythonic_struct( uiWidgetStateColors, [
	( "inner_anim", ( ctypes.c_char * 4 ) ),
	( "inner_anim_sel", ( ctypes.c_char * 4 ) ),
	( "inner_key", ( ctypes.c_char * 4 ) ),
	( "inner_key_sel", ( ctypes.c_char * 4 ) ),
	( "inner_driven", ( ctypes.c_char * 4 ) ),
	( "inner_driven_sel", ( ctypes.c_char * 4 ) ),
	( "blend", ctypes.c_float ),
	( "pad", ctypes.c_float ),
])

__freeze_rpythonic_struct( ThemeUI, [
	( "wcol_regular", uiWidgetColors ),
	( "wcol_tool", uiWidgetColors ),
	( "wcol_text", uiWidgetColors ),
	( "wcol_radio", uiWidgetColors ),
	( "wcol_option", uiWidgetColors ),
	( "wcol_toggle", uiWidgetColors ),
	( "wcol_num", uiWidgetColors ),
	( "wcol_numslider", uiWidgetColors ),
	( "wcol_menu", uiWidgetColors ),
	( "wcol_pulldown", uiWidgetColors ),
	( "wcol_menu_back", uiWidgetColors ),
	( "wcol_menu_item", uiWidgetColors ),
	( "wcol_box", uiWidgetColors ),
	( "wcol_scroll", uiWidgetColors ),
	( "wcol_progress", uiWidgetColors ),
	( "wcol_list_item", uiWidgetColors ),
	( "wcol_state", uiWidgetStateColors ),
	( "iconfile", ( ctypes.c_char * 80 ) ),
])

__freeze_rpythonic_struct( ThemeSpace, [
	( "back", ( ctypes.c_char * 4 ) ),
	( "title", ( ctypes.c_char * 4 ) ),
	( "text", ( ctypes.c_char * 4 ) ),
	( "text_hi", ( ctypes.c_char * 4 ) ),
	( "header", ( ctypes.c_char * 4 ) ),
	( "header_title", ( ctypes.c_char * 4 ) ),
	( "header_text", ( ctypes.c_char * 4 ) ),
	( "header_text_hi", ( ctypes.c_char * 4 ) ),
	( "button", ( ctypes.c_char * 4 ) ),
	( "button_title", ( ctypes.c_char * 4 ) ),
	( "button_text", ( ctypes.c_char * 4 ) ),
	( "button_text_hi", ( ctypes.c_char * 4 ) ),
	( "C_list", ( ctypes.c_char * 4 ) ),
	( "list_title", ( ctypes.c_char * 4 ) ),
	( "list_text", ( ctypes.c_char * 4 ) ),
	( "list_text_hi", ( ctypes.c_char * 4 ) ),
	( "panel", ( ctypes.c_char * 4 ) ),
	( "panel_title", ( ctypes.c_char * 4 ) ),
	( "panel_text", ( ctypes.c_char * 4 ) ),
	( "panel_text_hi", ( ctypes.c_char * 4 ) ),
	( "shade1", ( ctypes.c_char * 4 ) ),
	( "shade2", ( ctypes.c_char * 4 ) ),
	( "hilite", ( ctypes.c_char * 4 ) ),
	( "grid", ( ctypes.c_char * 4 ) ),
	( "wire", ( ctypes.c_char * 4 ) ),
	( "select", ( ctypes.c_char * 4 ) ),
	( "lamp", ( ctypes.c_char * 4 ) ),
	( "speaker", ( ctypes.c_char * 4 ) ),
	( "pad2", ( ctypes.c_char * 4 ) ),
	( "active", ( ctypes.c_char * 4 ) ),
	( "group", ( ctypes.c_char * 4 ) ),
	( "group_active", ( ctypes.c_char * 4 ) ),
	( "transform", ( ctypes.c_char * 4 ) ),
	( "vertex", ( ctypes.c_char * 4 ) ),
	( "vertex_select", ( ctypes.c_char * 4 ) ),
	( "edge", ( ctypes.c_char * 4 ) ),
	( "edge_select", ( ctypes.c_char * 4 ) ),
	( "edge_seam", ( ctypes.c_char * 4 ) ),
	( "edge_sharp", ( ctypes.c_char * 4 ) ),
	( "edge_facesel", ( ctypes.c_char * 4 ) ),
	( "edge_crease", ( ctypes.c_char * 4 ) ),
	( "face", ( ctypes.c_char * 4 ) ),
	( "face_select", ( ctypes.c_char * 4 ) ),
	( "face_dot", ( ctypes.c_char * 4 ) ),
	( "extra_edge_len", ( ctypes.c_char * 4 ) ),
	( "extra_face_angle", ( ctypes.c_char * 4 ) ),
	( "extra_face_area", ( ctypes.c_char * 4 ) ),
	( "pad3", ( ctypes.c_char * 4 ) ),
	( "normal", ( ctypes.c_char * 4 ) ),
	( "vertex_normal", ( ctypes.c_char * 4 ) ),
	( "bone_solid", ( ctypes.c_char * 4 ) ),
	( "bone_pose", ( ctypes.c_char * 4 ) ),
	( "strip", ( ctypes.c_char * 4 ) ),
	( "strip_select", ( ctypes.c_char * 4 ) ),
	( "cframe", ( ctypes.c_char * 4 ) ),
	( "nurb_uline", ( ctypes.c_char * 4 ) ),
	( "nurb_vline", ( ctypes.c_char * 4 ) ),
	( "act_spline", ( ctypes.c_char * 4 ) ),
	( "nurb_sel_uline", ( ctypes.c_char * 4 ) ),
	( "nurb_sel_vline", ( ctypes.c_char * 4 ) ),
	( "lastsel_point", ( ctypes.c_char * 4 ) ),
	( "handle_free", ( ctypes.c_char * 4 ) ),
	( "handle_auto", ( ctypes.c_char * 4 ) ),
	( "handle_vect", ( ctypes.c_char * 4 ) ),
	( "handle_align", ( ctypes.c_char * 4 ) ),
	( "handle_auto_clamped", ( ctypes.c_char * 4 ) ),
	( "handle_sel_free", ( ctypes.c_char * 4 ) ),
	( "handle_sel_auto", ( ctypes.c_char * 4 ) ),
	( "handle_sel_vect", ( ctypes.c_char * 4 ) ),
	( "handle_sel_align", ( ctypes.c_char * 4 ) ),
	( "handle_sel_auto_clamped", ( ctypes.c_char * 4 ) ),
	( "ds_channel", ( ctypes.c_char * 4 ) ),
	( "ds_subchannel", ( ctypes.c_char * 4 ) ),
	( "console_output", ( ctypes.c_char * 4 ) ),
	( "console_input", ( ctypes.c_char * 4 ) ),
	( "console_info", ( ctypes.c_char * 4 ) ),
	( "console_error", ( ctypes.c_char * 4 ) ),
	( "console_cursor", ( ctypes.c_char * 4 ) ),
	( "vertex_size", ctypes.c_char ),
	( "outline_width", ctypes.c_char ),
	( "facedot_size", ctypes.c_char ),
	( "noodle_curving", ctypes.c_char ),
	( "syntaxl", ( ctypes.c_char * 4 ) ),
	( "syntaxn", ( ctypes.c_char * 4 ) ),
	( "syntaxb", ( ctypes.c_char * 4 ) ),
	( "syntaxv", ( ctypes.c_char * 4 ) ),
	( "syntaxc", ( ctypes.c_char * 4 ) ),
	( "movie", ( ctypes.c_char * 4 ) ),
	( "image", ( ctypes.c_char * 4 ) ),
	( "scene", ( ctypes.c_char * 4 ) ),
	( "audio", ( ctypes.c_char * 4 ) ),
	( "effect", ( ctypes.c_char * 4 ) ),
	( "plugin", ( ctypes.c_char * 4 ) ),
	( "transition", ( ctypes.c_char * 4 ) ),
	( "meta", ( ctypes.c_char * 4 ) ),
	( "editmesh_active", ( ctypes.c_char * 4 ) ),
	( "handle_vertex", ( ctypes.c_char * 4 ) ),
	( "handle_vertex_select", ( ctypes.c_char * 4 ) ),
	( "handle_vertex_size", ctypes.c_char ),
	( "hpad", ( ctypes.c_char * 7 ) ),
	( "preview_back", ( ctypes.c_char * 4 ) ),
])

__freeze_rpythonic_struct( ThemeWireColor, [
	( "solid", ( ctypes.c_char * 4 ) ),
	( "select", ( ctypes.c_char * 4 ) ),
	( "active", ( ctypes.c_char * 4 ) ),
	( "flag", ctypes.c_short ),
	( "pad", ctypes.c_short ),
])

__freeze_rpythonic_struct( bTheme, [
	( "next", ctypes.POINTER(bTheme) ),
	( "prev", ctypes.POINTER(bTheme) ),
	( "name", ( ctypes.c_char * 32 ) ),
	( "tui", ThemeUI ),
	( "tbuts", ThemeSpace ),
	( "tv3d", ThemeSpace ),
	( "tfile", ThemeSpace ),
	( "tipo", ThemeSpace ),
	( "tinfo", ThemeSpace ),
	( "tsnd", ThemeSpace ),
	( "tact", ThemeSpace ),
	( "tnla", ThemeSpace ),
	( "tseq", ThemeSpace ),
	( "tima", ThemeSpace ),
	( "timasel", ThemeSpace ),
	( "text", ThemeSpace ),
	( "toops", ThemeSpace ),
	( "ttime", ThemeSpace ),
	( "tnode", ThemeSpace ),
	( "tlogic", ThemeSpace ),
	( "tuserpref", ThemeSpace ),
	( "tconsole", ThemeSpace ),
	( "tarm", ( ThemeWireColor * 20 ) ),
	( "active_theme_area", ctypes.c_int ),
	( "pad", ctypes.c_int ),
])

__freeze_rpythonic_struct( bAddon, [
	( "next", ctypes.POINTER(bAddon) ),
	( "prev", ctypes.POINTER(bAddon) ),
	( "module", ( ctypes.c_char * 64 ) ),
])

__freeze_rpythonic_struct( SolidLight, [
	( "flag", ctypes.c_int ),
	( "pad", ctypes.c_int ),
	( "col", ( ctypes.c_float * 4 ) ),
	( "spec", ( ctypes.c_float * 4 ) ),
	( "vec", ( ctypes.c_float * 4 ) ),
])

__freeze_rpythonic_struct( UserDef, [
	( "flag", ctypes.c_int ),
	( "dupflag", ctypes.c_int ),
	( "savetime", ctypes.c_int ),
	( "tempdir", ( ctypes.c_char * 160 ) ),
	( "fontdir", ( ctypes.c_char * 160 ) ),
	( "renderdir", ( ctypes.c_char * 240 ) ),
	( "textudir", ( ctypes.c_char * 160 ) ),
	( "plugtexdir", ( ctypes.c_char * 160 ) ),
	( "plugseqdir", ( ctypes.c_char * 160 ) ),
	( "pythondir", ( ctypes.c_char * 160 ) ),
	( "sounddir", ( ctypes.c_char * 160 ) ),
	( "image_editor", ( ctypes.c_char * 240 ) ),
	( "anim_player", ( ctypes.c_char * 240 ) ),
	( "anim_player_preset", ctypes.c_int ),
	( "v2d_min_gridsize", ctypes.c_short ),
	( "timecode_style", ctypes.c_short ),
	( "versions", ctypes.c_short ),
	( "dbl_click_time", ctypes.c_short ),
	( "gameflags", ctypes.c_int ),
	( "wheellinescroll", ctypes.c_int ),
	( "uiflag", ctypes.c_int ),
	( "language", ctypes.c_int ),
	( "userpref", ctypes.c_short ),
	( "viewzoom", ctypes.c_short ),
	( "mixbufsize", ctypes.c_int ),
	( "audiodevice", ctypes.c_int ),
	( "audiorate", ctypes.c_int ),
	( "audioformat", ctypes.c_int ),
	( "audiochannels", ctypes.c_int ),
	( "scrollback", ctypes.c_int ),
	( "dpi", ctypes.c_int ),
	( "encoding", ctypes.c_short ),
	( "transopts", ctypes.c_short ),
	( "menuthreshold1", ctypes.c_short ),
	( "menuthreshold2", ctypes.c_short ),
	( "themes", ListBase ),
	( "uifonts", ListBase ),
	( "uistyles", ListBase ),
	( "keymaps", ListBase ),
	( "user_keymaps", ListBase ),
	( "addons", ListBase ),
	( "keyconfigstr", ( ctypes.c_char * 64 ) ),
	( "undosteps", ctypes.c_short ),
	( "undomemory", ctypes.c_short ),
	( "gp_manhattendist", ctypes.c_short ),
	( "gp_euclideandist", ctypes.c_short ),
	( "gp_eraser", ctypes.c_short ),
	( "gp_settings", ctypes.c_short ),
	( "tb_leftmouse", ctypes.c_short ),
	( "tb_rightmouse", ctypes.c_short ),
	( "light", ( SolidLight * 3 ) ),
	( "tw_hotspot", ctypes.c_short ),
	( "tw_flag", ctypes.c_short ),
	( "tw_handlesize", ctypes.c_short ),
	( "tw_size", ctypes.c_short ),
	( "textimeout", ctypes.c_short ),
	( "texcollectrate", ctypes.c_short ),
	( "wmdrawmethod", ctypes.c_short ),
	( "dragthreshold", ctypes.c_short ),
	( "memcachelimit", ctypes.c_int ),
	( "prefetchframes", ctypes.c_int ),
	( "frameserverport", ctypes.c_short ),
	( "pad_rot_angle", ctypes.c_short ),
	( "obcenter_dia", ctypes.c_short ),
	( "rvisize", ctypes.c_short ),
	( "rvibright", ctypes.c_short ),
	( "recent_files", ctypes.c_short ),
	( "smooth_viewtx", ctypes.c_short ),
	( "glreslimit", ctypes.c_short ),
	( "curssize", ctypes.c_short ),
	( "color_picker_type", ctypes.c_short ),
	( "ipo_new", ctypes.c_short ),
	( "keyhandles_new", ctypes.c_short ),
	( "scrcastfps", ctypes.c_short ),
	( "scrcastwait", ctypes.c_short ),
	( "widget_unit", ctypes.c_short ),
	( "anisotropic_filter", ctypes.c_short ),
	( "ndof_sensitivity", ctypes.c_float ),
	( "ndof_flag", ctypes.c_int ),
	( "versemaster", ( ctypes.c_char * 160 ) ),
	( "verseuser", ( ctypes.c_char * 160 ) ),
	( "glalphaclip", ctypes.c_float ),
	( "autokey_mode", ctypes.c_short ),
	( "autokey_flag", ctypes.c_short ),
	( "text_render", ctypes.c_short ),
	( "pad9", ( ctypes.c_short * 3 ) ),
	( "coba_weight", ColorBand ),
	( "sculpt_paint_overlay_col", ( ctypes.c_float * 3 ) ),
	( "pad3", ctypes.c_int ),
	( "author", ( ctypes.c_char * 80 ) ),
])

__freeze_rpythonic_struct( AutoComplete, [
])

__freeze_rpythonic_struct( uiBut, [
])

__freeze_rpythonic_struct( uiPopupBlockHandle, [
])

__freeze_rpythonic_struct( uiPopupMenu, [
])

__freeze_rpythonic_struct( uiSearchItems, [
])

__freeze_rpythonic_struct( bCallbackFuncStore, [
	( "next", ctypes.POINTER(bCallbackFuncStore) ),
	( "prev", ctypes.POINTER(bCallbackFuncStore) ),
	( "func", ctypes.c_void_p ),
	( "arg", ctypes.POINTER(ctypes.c_void_p) ),
	( "alloc", ctypes.c_short ),
])

## wrapper functions ##
feclearexcept = _rpythonic_function_(		"feclearexcept", ctypes.c_int, [
	("__excepts",		ctypes.c_int),] )

fegetexceptflag = _rpythonic_function_(		"fegetexceptflag", ctypes.c_int, [
	("__flagp",		ctypes.POINTER(ctypes.c_uint16)),
	("__excepts",		ctypes.c_int),] )

feraiseexcept = _rpythonic_function_(		"feraiseexcept", ctypes.c_int, [
	("__excepts",		ctypes.c_int),] )

fesetexceptflag = _rpythonic_function_(		"fesetexceptflag", ctypes.c_int, [
	("__flagp",		ctypes.POINTER(ctypes.c_uint16)),
	("__excepts",		ctypes.c_int),] )

fetestexcept = _rpythonic_function_(		"fetestexcept", ctypes.c_int, [
	("__excepts",		ctypes.c_int),] )

fegetround = _rpythonic_function_(		"fegetround", ctypes.c_int, [] )

fesetround = _rpythonic_function_(		"fesetround", ctypes.c_int, [
	("__rounding_direction",		ctypes.c_int),] )

fegetenv = _rpythonic_function_(		"fegetenv", ctypes.c_int, [
	("__envp",		ctypes.POINTER(fenv_t)),] )

feholdexcept = _rpythonic_function_(		"feholdexcept", ctypes.c_int, [
	("__envp",		ctypes.POINTER(fenv_t)),] )

fesetenv = _rpythonic_function_(		"fesetenv", ctypes.c_int, [
	("__envp",		ctypes.POINTER(fenv_t)),] )

feupdateenv = _rpythonic_function_(		"feupdateenv", ctypes.c_int, [
	("__envp",		ctypes.POINTER(fenv_t)),] )

feenableexcept = _rpythonic_function_(		"feenableexcept", ctypes.c_int, [
	("__excepts",		ctypes.c_int),] )

fedisableexcept = _rpythonic_function_(		"fedisableexcept", ctypes.c_int, [
	("__excepts",		ctypes.c_int),] )

fegetexcept = _rpythonic_function_(		"fegetexcept", ctypes.c_int, [] )

atof = _rpythonic_function_(		"atof", ctypes.c_double, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),] )

atoi = _rpythonic_function_(		"atoi", ctypes.c_int, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),] )

atol = _rpythonic_function_(		"atol", ctypes.c_int64, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),] )

atoll = _rpythonic_function_(		"atoll", ctypes.c_longlong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),] )

strtod = _rpythonic_function_(		"strtod", ctypes.c_double, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

strtof = _rpythonic_function_(		"strtof", ctypes.c_float, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

strtold = _rpythonic_function_(		"strtold", ctypes.c_double, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

strtol = _rpythonic_function_(		"strtol", ctypes.c_int64, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

strtoul = _rpythonic_function_(		"strtoul", ctypes.c_uint64, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

strtoq = _rpythonic_function_(		"strtoq", ctypes.c_longlong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

strtouq = _rpythonic_function_(		"strtouq", ctypes.c_ulonglong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

strtoll = _rpythonic_function_(		"strtoll", ctypes.c_longlong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

strtoull = _rpythonic_function_(		"strtoull", ctypes.c_ulonglong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

strtol_l = _rpythonic_function_(		"strtol_l", ctypes.c_int64, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

strtoul_l = _rpythonic_function_(		"strtoul_l", ctypes.c_uint64, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

strtoll_l = _rpythonic_function_(		"strtoll_l", ctypes.c_longlong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

strtoull_l = _rpythonic_function_(		"strtoull_l", ctypes.c_ulonglong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

strtod_l = _rpythonic_function_(		"strtod_l", ctypes.c_double, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

strtof_l = _rpythonic_function_(		"strtof_l", ctypes.c_float, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

strtold_l = _rpythonic_function_(		"strtold_l", ctypes.c_double, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

l64a = _rpythonic_function_(		"l64a", ctypes.POINTER(ctypes.c_char), [
	("__n",		ctypes.c_int64),] )

a64l = _rpythonic_function_(		"a64l", ctypes.c_int64, [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

select = _rpythonic_function_(		"select", ctypes.c_int, [
	("__nfds",		ctypes.c_int),
	("__readfds",		ctypes.POINTER(fd_set)),
	("__writefds",		ctypes.POINTER(fd_set)),
	("__exceptfds",		ctypes.POINTER(fd_set)),
	("__timeout",		ctypes.POINTER(timeval)),] )

pselect = _rpythonic_function_(		"pselect", ctypes.c_int, [
	("__nfds",		ctypes.c_int),
	("__readfds",		ctypes.POINTER(fd_set)),
	("__writefds",		ctypes.POINTER(fd_set)),
	("__exceptfds",		ctypes.POINTER(fd_set)),
	("__timeout",		ctypes.POINTER(timespec)),
	("__sigmask",		ctypes.POINTER(__sigset_t)),] )

gnu_dev_major = _rpythonic_function_(		"gnu_dev_major", ctypes.c_uint, [
	("__dev",		ctypes.c_ulonglong),] )

gnu_dev_minor = _rpythonic_function_(		"gnu_dev_minor", ctypes.c_uint, [
	("__dev",		ctypes.c_ulonglong),] )

gnu_dev_makedev = _rpythonic_function_(		"gnu_dev_makedev", ctypes.c_ulonglong, [
	("__major",		ctypes.c_uint),
	("__minor",		ctypes.c_uint),] )

mkstemps = _rpythonic_function_(		"mkstemps", ctypes.c_int, [
	("__template",		ctypes.POINTER(ctypes.c_char)),
	("__suffixlen",		ctypes.c_int),] )

random = _rpythonic_function_(		"random", ctypes.c_int64, [] )

srandom = _rpythonic_function_(		"srandom", ctypes.c_void_p, [
	("__seed",		ctypes.c_uint),] )

initstate = _rpythonic_function_(		"initstate", ctypes.POINTER(ctypes.c_char), [
	("__seed",		ctypes.c_uint),
	("__statebuf",		ctypes.POINTER(ctypes.c_char)),
	("__statelen",		ctypes.c_uint),] )

setstate = _rpythonic_function_(		"setstate", ctypes.POINTER(ctypes.c_char), [
	("__statebuf",		ctypes.POINTER(ctypes.c_char)),] )

random_r = _rpythonic_function_(		"random_r", ctypes.c_int, [
	("__buf",		ctypes.POINTER(random_data)),
	("__result",		ctypes.POINTER(ctypes.c_int32)),] )

srandom_r = _rpythonic_function_(		"srandom_r", ctypes.c_int, [
	("__seed",		ctypes.c_uint),
	("__buf",		ctypes.POINTER(random_data)),] )

initstate_r = _rpythonic_function_(		"initstate_r", ctypes.c_int, [
	("__seed",		ctypes.c_uint),
	("__statebuf",		ctypes.POINTER(ctypes.c_char)),
	("__statelen",		ctypes.c_uint),
	("__buf",		ctypes.POINTER(random_data)),] )

setstate_r = _rpythonic_function_(		"setstate_r", ctypes.c_int, [
	("__statebuf",		ctypes.POINTER(ctypes.c_char)),
	("__buf",		ctypes.POINTER(random_data)),] )

rand = _rpythonic_function_(		"rand", ctypes.c_int, [] )

srand = _rpythonic_function_(		"srand", ctypes.c_void_p, [
	("__seed",		ctypes.c_uint),] )

rand_r = _rpythonic_function_(		"rand_r", ctypes.c_int, [
	("__seed",		ctypes.POINTER(ctypes.c_uint)),] )

drand48 = _rpythonic_function_(		"drand48", ctypes.c_double, [] )

erand48 = _rpythonic_function_(		"erand48", ctypes.c_double, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),] )

lrand48 = _rpythonic_function_(		"lrand48", ctypes.c_int64, [] )

nrand48 = _rpythonic_function_(		"nrand48", ctypes.c_int64, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),] )

mrand48 = _rpythonic_function_(		"mrand48", ctypes.c_int64, [] )

jrand48 = _rpythonic_function_(		"jrand48", ctypes.c_int64, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),] )

srand48 = _rpythonic_function_(		"srand48", ctypes.c_void_p, [
	("__seedval",		ctypes.c_int64),] )

seed48 = _rpythonic_function_(		"seed48", ctypes.POINTER(ctypes.c_uint16), [
	("__seed16v",		( ctypes.c_uint16 * 3 )),] )

lcong48 = _rpythonic_function_(		"lcong48", ctypes.c_void_p, [
	("__param",		( ctypes.c_uint16 * 7 )),] )

drand48_r = _rpythonic_function_(		"drand48_r", ctypes.c_int, [
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_double)),] )

erand48_r = _rpythonic_function_(		"erand48_r", ctypes.c_int, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_double)),] )

lrand48_r = _rpythonic_function_(		"lrand48_r", ctypes.c_int, [
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_int64)),] )

nrand48_r = _rpythonic_function_(		"nrand48_r", ctypes.c_int, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_int64)),] )

mrand48_r = _rpythonic_function_(		"mrand48_r", ctypes.c_int, [
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_int64)),] )

jrand48_r = _rpythonic_function_(		"jrand48_r", ctypes.c_int, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_int64)),] )

srand48_r = _rpythonic_function_(		"srand48_r", ctypes.c_int, [
	("__seedval",		ctypes.c_int64),
	("__buffer",		ctypes.POINTER(drand48_data)),] )

seed48_r = _rpythonic_function_(		"seed48_r", ctypes.c_int, [
	("__seed16v",		( ctypes.c_uint16 * 3 )),
	("__buffer",		ctypes.POINTER(drand48_data)),] )

lcong48_r = _rpythonic_function_(		"lcong48_r", ctypes.c_int, [
	("__param",		( ctypes.c_uint16 * 7 )),
	("__buffer",		ctypes.POINTER(drand48_data)),] )

malloc = _rpythonic_function_(		"malloc", ctypes.POINTER(ctypes.c_void_p), [
	("__size",		ctypes.c_uint),] )

calloc = _rpythonic_function_(		"calloc", ctypes.POINTER(ctypes.c_void_p), [
	("__nmemb",		ctypes.c_uint),
	("__size",		ctypes.c_uint),] )

realloc = _rpythonic_function_(		"realloc", ctypes.POINTER(ctypes.c_void_p), [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint),] )

free = _rpythonic_function_(		"free", ctypes.c_void_p, [("__ptr",		ctypes.c_void_p)] )

cfree = _rpythonic_function_(		"cfree", ctypes.c_void_p, [("__ptr",		ctypes.c_void_p)] )

alloca = _rpythonic_function_(		"alloca", ctypes.POINTER(ctypes.c_void_p), [
	("__size",		ctypes.c_uint),] )

valloc = _rpythonic_function_(		"valloc", ctypes.POINTER(ctypes.c_void_p), [
	("__size",		ctypes.c_uint),] )

posix_memalign = _rpythonic_function_(		"posix_memalign", ctypes.c_int, [
	("__memptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("__alignment",		ctypes.c_uint),
	("__size",		ctypes.c_uint),] )

abort = _rpythonic_function_(		"abort", ctypes.c_void_p, [] )

atexit = _rpythonic_function_(		"atexit", ctypes.c_int, [
	("__func",		ctypes.c_void_p),] )

at_quick_exit = _rpythonic_function_(		"at_quick_exit", ctypes.c_int, [
	("__func",		ctypes.c_void_p),] )

on_exit = _rpythonic_function_(		"on_exit", ctypes.c_int, [
	("__func",		ctypes.c_void_p),
	("__arg",		ctypes.POINTER(ctypes.c_void_p)),] )

exit = _rpythonic_function_(		"exit", ctypes.c_void_p, [
	("__status",		ctypes.c_int),] )

quick_exit = _rpythonic_function_(		"quick_exit", ctypes.c_void_p, [
	("__status",		ctypes.c_int),] )

_Exit = _rpythonic_function_(		"_Exit", ctypes.c_void_p, [
	("__status",		ctypes.c_int),] )

getenv = _rpythonic_function_(		"getenv", ctypes.POINTER(ctypes.c_char), [
	("__name",		ctypes.POINTER(ctypes.c_char)),] )

putenv = _rpythonic_function_(		"putenv", ctypes.c_int, [
	("__string",		ctypes.POINTER(ctypes.c_char)),] )

setenv = _rpythonic_function_(		"setenv", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),
	("__value",		ctypes.POINTER(ctypes.c_char)),
	("__replace",		ctypes.c_int),] )

unsetenv = _rpythonic_function_(		"unsetenv", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),] )

clearenv = _rpythonic_function_(		"clearenv", ctypes.c_int, [] )

mktemp = _rpythonic_function_(		"mktemp", ctypes.POINTER(ctypes.c_char), [
	("__template",		ctypes.POINTER(ctypes.c_char)),] )

mkstemp = _rpythonic_function_(		"mkstemp", ctypes.c_int, [
	("__template",		ctypes.POINTER(ctypes.c_char)),] )

mkstemp64 = _rpythonic_function_(		"mkstemp64", ctypes.c_int, [
	("__template",		ctypes.POINTER(ctypes.c_char)),] )

mkstemps64 = _rpythonic_function_(		"mkstemps64", ctypes.c_int, [
	("__template",		ctypes.POINTER(ctypes.c_char)),
	("__suffixlen",		ctypes.c_int),] )

mkdtemp = _rpythonic_function_(		"mkdtemp", ctypes.POINTER(ctypes.c_char), [
	("__template",		ctypes.POINTER(ctypes.c_char)),] )

mkostemp = _rpythonic_function_(		"mkostemp", ctypes.c_int, [
	("__template",		ctypes.POINTER(ctypes.c_char)),
	("__flags",		ctypes.c_int),] )

mkostemp64 = _rpythonic_function_(		"mkostemp64", ctypes.c_int, [
	("__template",		ctypes.POINTER(ctypes.c_char)),
	("__flags",		ctypes.c_int),] )

mkostemps = _rpythonic_function_(		"mkostemps", ctypes.c_int, [
	("__template",		ctypes.POINTER(ctypes.c_char)),
	("__suffixlen",		ctypes.c_int),
	("__flags",		ctypes.c_int),] )

mkostemps64 = _rpythonic_function_(		"mkostemps64", ctypes.c_int, [
	("__template",		ctypes.POINTER(ctypes.c_char)),
	("__suffixlen",		ctypes.c_int),
	("__flags",		ctypes.c_int),] )

system = _rpythonic_function_(		"system", ctypes.c_int, [
	("__command",		ctypes.POINTER(ctypes.c_char)),] )

canonicalize_file_name = _rpythonic_function_(		"canonicalize_file_name", ctypes.POINTER(ctypes.c_char), [
	("__name",		ctypes.POINTER(ctypes.c_char)),] )

realpath = _rpythonic_function_(		"realpath", ctypes.POINTER(ctypes.c_char), [
	("__name",		ctypes.POINTER(ctypes.c_char)),
	("__resolved",		ctypes.POINTER(ctypes.c_char)),] )

bsearch = _rpythonic_function_(		"bsearch", ctypes.POINTER(ctypes.c_void_p), [
	("__key",		ctypes.POINTER(ctypes.c_void_p)),
	("__base",		ctypes.POINTER(ctypes.c_void_p)),
	("__nmemb",		ctypes.c_uint),
	("__size",		ctypes.c_uint),
	("__compar",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

qsort = _rpythonic_function_(		"qsort", ctypes.c_void_p, [
	("__base",		ctypes.POINTER(ctypes.c_void_p)),
	("__nmemb",		ctypes.c_uint),
	("__size",		ctypes.c_uint),
	("__compar",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

qsort_r = _rpythonic_function_(		"qsort_r", ctypes.c_void_p, [
	("__base",		ctypes.POINTER(ctypes.c_void_p)),
	("__nmemb",		ctypes.c_uint),
	("__size",		ctypes.c_uint),
	("__compar",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("__arg",		ctypes.POINTER(ctypes.c_void_p)),] )

abs = _rpythonic_function_(		"abs", ctypes.c_int, [
	("__x",		ctypes.c_int),] )

labs = _rpythonic_function_(		"labs", ctypes.c_int64, [
	("__x",		ctypes.c_int64),] )

llabs = _rpythonic_function_(		"llabs", ctypes.c_longlong, [
	("__x",		ctypes.c_longlong),] )

div = _rpythonic_function_(		"div", div_t, [
	("__numer",		ctypes.c_int),
	("__denom",		ctypes.c_int),] )

ldiv = _rpythonic_function_(		"ldiv", ldiv_t, [
	("__numer",		ctypes.c_int64),
	("__denom",		ctypes.c_int64),] )

lldiv = _rpythonic_function_(		"lldiv", lldiv_t, [
	("__numer",		ctypes.c_longlong),
	("__denom",		ctypes.c_longlong),] )

ecvt = _rpythonic_function_(		"ecvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),] )

fcvt = _rpythonic_function_(		"fcvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),] )

gcvt = _rpythonic_function_(		"gcvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

qecvt = _rpythonic_function_(		"qecvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),] )

qfcvt = _rpythonic_function_(		"qfcvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),] )

qgcvt = _rpythonic_function_(		"qgcvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

ecvt_r = _rpythonic_function_(		"ecvt_r", ctypes.c_int, [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint),] )

fcvt_r = _rpythonic_function_(		"fcvt_r", ctypes.c_int, [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint),] )

qecvt_r = _rpythonic_function_(		"qecvt_r", ctypes.c_int, [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint),] )

qfcvt_r = _rpythonic_function_(		"qfcvt_r", ctypes.c_int, [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint),] )

mblen = _rpythonic_function_(		"mblen", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

mbtowc = _rpythonic_function_(		"mbtowc", ctypes.c_int, [
	("__pwc",		ctypes.POINTER(ctypes.c_int)),
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

wctomb = _rpythonic_function_(		"wctomb", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__wchar",		ctypes.c_int),] )

mbstowcs = _rpythonic_function_(		"mbstowcs", ctypes.c_uint, [
	("__pwcs",		ctypes.POINTER(ctypes.c_int)),
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

wcstombs = _rpythonic_function_(		"wcstombs", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__pwcs",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),] )

rpmatch = _rpythonic_function_(		"rpmatch", ctypes.c_int, [
	("__response",		ctypes.POINTER(ctypes.c_char)),] )

getsubopt = _rpythonic_function_(		"getsubopt", ctypes.c_int, [
	("__optionp",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__tokens",		ctypes.POINTER(ctypes.c_char)),
	("__valuep",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

setkey = _rpythonic_function_(		"setkey", ctypes.c_void_p, [
	("__key",		ctypes.POINTER(ctypes.c_char)),] )

posix_openpt = _rpythonic_function_(		"posix_openpt", ctypes.c_int, [
	("__oflag",		ctypes.c_int),] )

grantpt = _rpythonic_function_(		"grantpt", ctypes.c_int, [
	("__fd",		ctypes.c_int),] )

unlockpt = _rpythonic_function_(		"unlockpt", ctypes.c_int, [
	("__fd",		ctypes.c_int),] )

ptsname = _rpythonic_function_(		"ptsname", ctypes.POINTER(ctypes.c_char), [
	("__fd",		ctypes.c_int),] )

ptsname_r = _rpythonic_function_(		"ptsname_r", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__buflen",		ctypes.c_uint),] )

getpt = _rpythonic_function_(		"getpt", ctypes.c_int, [] )

getloadavg = _rpythonic_function_(		"getloadavg", ctypes.c_int, [
	("__loadavg",		ctypes.c_double),
	("__nelem",		ctypes.c_int),] )

memcpy = _rpythonic_function_(		"memcpy", ctypes.POINTER(ctypes.c_void_p), [
	("__dest",		ctypes.POINTER(ctypes.c_void_p)),
	("__src",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),] )

memmove = _rpythonic_function_(		"memmove", ctypes.POINTER(ctypes.c_void_p), [
	("__dest",		ctypes.POINTER(ctypes.c_void_p)),
	("__src",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),] )

memccpy = _rpythonic_function_(		"memccpy", ctypes.POINTER(ctypes.c_void_p), [
	("__dest",		ctypes.POINTER(ctypes.c_void_p)),
	("__src",		ctypes.POINTER(ctypes.c_void_p)),
	("__c",		ctypes.c_int),
	("__n",		ctypes.c_uint),] )

memset = _rpythonic_function_(		"memset", ctypes.POINTER(ctypes.c_void_p), [
	("__s",		ctypes.POINTER(ctypes.c_void_p)),
	("__c",		ctypes.c_int),
	("__n",		ctypes.c_uint),] )

memcmp = _rpythonic_function_(		"memcmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_void_p)),
	("__s2",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),] )

memchr = _rpythonic_function_(		"memchr", ctypes.POINTER(ctypes.c_void_p), [
	("__s",		ctypes.POINTER(ctypes.c_void_p)),
	("__c",		ctypes.c_int),
	("__n",		ctypes.c_uint),] )

rawmemchr = _rpythonic_function_(		"rawmemchr", ctypes.POINTER(ctypes.c_void_p), [
	("__s",		ctypes.POINTER(ctypes.c_void_p)),
	("__c",		ctypes.c_int),] )

memrchr = _rpythonic_function_(		"memrchr", ctypes.POINTER(ctypes.c_void_p), [
	("__s",		ctypes.POINTER(ctypes.c_void_p)),
	("__c",		ctypes.c_int),
	("__n",		ctypes.c_uint),] )

strcpy = _rpythonic_function_(		"strcpy", ctypes.POINTER(ctypes.c_char), [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),] )

strncpy = _rpythonic_function_(		"strncpy", ctypes.POINTER(ctypes.c_char), [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

strcat = _rpythonic_function_(		"strcat", ctypes.POINTER(ctypes.c_char), [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),] )

strncat = _rpythonic_function_(		"strncat", ctypes.POINTER(ctypes.c_char), [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

strcmp = _rpythonic_function_(		"strcmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),] )

strncmp = _rpythonic_function_(		"strncmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

strcoll = _rpythonic_function_(		"strcoll", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),] )

strxfrm = _rpythonic_function_(		"strxfrm", ctypes.c_uint, [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

strcoll_l = _rpythonic_function_(		"strcoll_l", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),
	("__l",		ctypes.POINTER(__locale_struct)),] )

strxfrm_l = _rpythonic_function_(		"strxfrm_l", ctypes.c_uint, [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),
	("__l",		ctypes.POINTER(__locale_struct)),] )

strdup = _rpythonic_function_(		"strdup", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

strndup = _rpythonic_function_(		"strndup", ctypes.POINTER(ctypes.c_char), [
	("__string",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

strchr = _rpythonic_function_(		"strchr", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__c",		ctypes.c_int),] )

strrchr = _rpythonic_function_(		"strrchr", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__c",		ctypes.c_int),] )

strchrnul = _rpythonic_function_(		"strchrnul", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__c",		ctypes.c_int),] )

strcspn = _rpythonic_function_(		"strcspn", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__reject",		ctypes.POINTER(ctypes.c_char)),] )

strspn = _rpythonic_function_(		"strspn", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__accept",		ctypes.POINTER(ctypes.c_char)),] )

strpbrk = _rpythonic_function_(		"strpbrk", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__accept",		ctypes.POINTER(ctypes.c_char)),] )

strstr = _rpythonic_function_(		"strstr", ctypes.POINTER(ctypes.c_char), [
	("__haystack",		ctypes.POINTER(ctypes.c_char)),
	("__needle",		ctypes.POINTER(ctypes.c_char)),] )

strtok = _rpythonic_function_(		"strtok", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__delim",		ctypes.POINTER(ctypes.c_char)),] )

strtok_r = _rpythonic_function_(		"strtok_r", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__delim",		ctypes.POINTER(ctypes.c_char)),
	("__save_ptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

strcasestr = _rpythonic_function_(		"strcasestr", ctypes.POINTER(ctypes.c_char), [
	("__haystack",		ctypes.POINTER(ctypes.c_char)),
	("__needle",		ctypes.POINTER(ctypes.c_char)),] )

memmem = _rpythonic_function_(		"memmem", ctypes.POINTER(ctypes.c_void_p), [
	("__haystack",		ctypes.POINTER(ctypes.c_void_p)),
	("__haystacklen",		ctypes.c_uint),
	("__needle",		ctypes.POINTER(ctypes.c_void_p)),
	("__needlelen",		ctypes.c_uint),] )

mempcpy = _rpythonic_function_(		"mempcpy", ctypes.POINTER(ctypes.c_void_p), [
	("__dest",		ctypes.POINTER(ctypes.c_void_p)),
	("__src",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),] )

strlen = _rpythonic_function_(		"strlen", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

strnlen = _rpythonic_function_(		"strnlen", ctypes.c_uint, [
	("__string",		ctypes.POINTER(ctypes.c_char)),
	("__maxlen",		ctypes.c_uint),] )

strerror = _rpythonic_function_(		"strerror", ctypes.POINTER(ctypes.c_char), [
	("__errnum",		ctypes.c_int),] )

strerror_r = _rpythonic_function_(		"strerror_r", ctypes.POINTER(ctypes.c_char), [
	("__errnum",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__buflen",		ctypes.c_uint),] )

strerror_l = _rpythonic_function_(		"strerror_l", ctypes.POINTER(ctypes.c_char), [
	("__errnum",		ctypes.c_int),
	("__l",		ctypes.POINTER(__locale_struct)),] )

bcopy = _rpythonic_function_(		"bcopy", ctypes.c_void_p, [
	("__src",		ctypes.POINTER(ctypes.c_void_p)),
	("__dest",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),] )

bzero = _rpythonic_function_(		"bzero", ctypes.c_void_p, [
	("__s",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),] )

bcmp = _rpythonic_function_(		"bcmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_void_p)),
	("__s2",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),] )

index = _rpythonic_function_(		"index", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__c",		ctypes.c_int),] )

rindex = _rpythonic_function_(		"rindex", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__c",		ctypes.c_int),] )

ffs = _rpythonic_function_(		"ffs", ctypes.c_int, [
	("__i",		ctypes.c_int),] )

ffsl = _rpythonic_function_(		"ffsl", ctypes.c_int, [
	("__l",		ctypes.c_int64),] )

ffsll = _rpythonic_function_(		"ffsll", ctypes.c_int, [
	("__ll",		ctypes.c_longlong),] )

strcasecmp = _rpythonic_function_(		"strcasecmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),] )

strncasecmp = _rpythonic_function_(		"strncasecmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

strcasecmp_l = _rpythonic_function_(		"strcasecmp_l", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

strncasecmp_l = _rpythonic_function_(		"strncasecmp_l", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

strsep = _rpythonic_function_(		"strsep", ctypes.POINTER(ctypes.c_char), [
	("__stringp",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__delim",		ctypes.POINTER(ctypes.c_char)),] )

strsignal = _rpythonic_function_(		"strsignal", ctypes.POINTER(ctypes.c_char), [
	("__sig",		ctypes.c_int),] )

stpcpy = _rpythonic_function_(		"stpcpy", ctypes.POINTER(ctypes.c_char), [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),] )

stpncpy = _rpythonic_function_(		"stpncpy", ctypes.POINTER(ctypes.c_char), [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

strverscmp = _rpythonic_function_(		"strverscmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),] )

strfry = _rpythonic_function_(		"strfry", ctypes.POINTER(ctypes.c_char), [
	("__string",		ctypes.POINTER(ctypes.c_char)),] )

memfrob = _rpythonic_function_(		"memfrob", ctypes.POINTER(ctypes.c_void_p), [
	("__s",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),] )

basename = _rpythonic_function_(		"basename", ctypes.POINTER(ctypes.c_char), [
	("__filename",		ctypes.POINTER(ctypes.c_char)),] )

_function = _rpythonic_function_(		"_function", ctypes.c_void_p, [
	("none",		ctypes.c_void_p),] )

BoneGroup_name_length = _rpythonic_function_(		"BoneGroup_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

sysv_signal = _rpythonic_function_(		"sysv_signal", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,), [
	("__sig",		ctypes.c_int),
	("__handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,)),] )

signal = _rpythonic_function_(		"signal", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,), [
	("__sig",		ctypes.c_int),
	("__handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,)),] )

bsd_signal = _rpythonic_function_(		"bsd_signal", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,), [
	("__sig",		ctypes.c_int),
	("__handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,)),] )

kill = _rpythonic_function_(		"kill", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__sig",		ctypes.c_int),] )

killpg = _rpythonic_function_(		"killpg", ctypes.c_int, [
	("__pgrp",		ctypes.c_int),
	("__sig",		ctypes.c_int),] )

C_raise = _rpythonic_function_(		"C_raise", ctypes.c_int, [
	("__sig",		ctypes.c_int),] )

ssignal = _rpythonic_function_(		"ssignal", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,), [
	("__sig",		ctypes.c_int),
	("__handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,)),] )

gsignal = _rpythonic_function_(		"gsignal", ctypes.c_int, [
	("__sig",		ctypes.c_int),] )

psignal = _rpythonic_function_(		"psignal", ctypes.c_void_p, [
	("__sig",		ctypes.c_int),
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

psiginfo = _rpythonic_function_(		"psiginfo", ctypes.c_void_p, [
	("__pinfo",		ctypes.POINTER(siginfo)),
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

sigpause = _rpythonic_function_(		"sigpause", ctypes.c_int, [
	("__sig",		ctypes.c_int),] )

sigblock = _rpythonic_function_(		"sigblock", ctypes.c_int, [
	("__mask",		ctypes.c_int),] )

sigsetmask = _rpythonic_function_(		"sigsetmask", ctypes.c_int, [
	("__mask",		ctypes.c_int),] )

siggetmask = _rpythonic_function_(		"siggetmask", ctypes.c_int, [] )

sigemptyset = _rpythonic_function_(		"sigemptyset", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),] )

sigfillset = _rpythonic_function_(		"sigfillset", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),] )

sigaddset = _rpythonic_function_(		"sigaddset", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),
	("__signo",		ctypes.c_int),] )

sigdelset = _rpythonic_function_(		"sigdelset", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),
	("__signo",		ctypes.c_int),] )

sigismember = _rpythonic_function_(		"sigismember", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),
	("__signo",		ctypes.c_int),] )

sigisemptyset = _rpythonic_function_(		"sigisemptyset", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),] )

sigandset = _rpythonic_function_(		"sigandset", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),
	("__left",		ctypes.POINTER(__sigset_t)),
	("__right",		ctypes.POINTER(__sigset_t)),] )

sigorset = _rpythonic_function_(		"sigorset", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),
	("__left",		ctypes.POINTER(__sigset_t)),
	("__right",		ctypes.POINTER(__sigset_t)),] )

sa_sigaction = _rpythonic_function_(		"sa_sigaction", ctypes.c_void_p, [
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

sa_restorer = _rpythonic_function_(		"sa_restorer", ctypes.c_void_p, [] )

sigprocmask = _rpythonic_function_(		"sigprocmask", ctypes.c_int, [
	("__how",		ctypes.c_int),
	("__set",		ctypes.POINTER(__sigset_t)),
	("__oset",		ctypes.POINTER(__sigset_t)),] )

sigsuspend = _rpythonic_function_(		"sigsuspend", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),] )

sigpending = _rpythonic_function_(		"sigpending", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),] )

sigwait = _rpythonic_function_(		"sigwait", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),
	("__sig",		ctypes.POINTER(ctypes.c_int)),] )

sigwaitinfo = _rpythonic_function_(		"sigwaitinfo", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),
	("__info",		ctypes.POINTER(siginfo)),] )

sigtimedwait = _rpythonic_function_(		"sigtimedwait", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),
	("__info",		ctypes.POINTER(siginfo)),
	("__timeout",		ctypes.POINTER(timespec)),] )

sigqueue = _rpythonic_function_(		"sigqueue", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__sig",		ctypes.c_int),
	("__val",		sigval),] )

sigreturn = _rpythonic_function_(		"sigreturn", ctypes.c_int, [
	("__scp",		ctypes.POINTER(sigcontext)),] )

siginterrupt = _rpythonic_function_(		"siginterrupt", ctypes.c_int, [
	("__sig",		ctypes.c_int),
	("__interrupt",		ctypes.c_int),] )

sighold = _rpythonic_function_(		"sighold", ctypes.c_int, [
	("__sig",		ctypes.c_int),] )

sigrelse = _rpythonic_function_(		"sigrelse", ctypes.c_int, [
	("__sig",		ctypes.c_int),] )

sigignore = _rpythonic_function_(		"sigignore", ctypes.c_int, [
	("__sig",		ctypes.c_int),] )

sigset = _rpythonic_function_(		"sigset", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,), [
	("__sig",		ctypes.c_int),
	("__disp",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,)),] )

pthread_sigmask = _rpythonic_function_(		"pthread_sigmask", ctypes.c_int, [
	("__how",		ctypes.c_int),
	("__newmask",		ctypes.POINTER(__sigset_t)),
	("__oldmask",		ctypes.POINTER(__sigset_t)),] )

pthread_kill = _rpythonic_function_(		"pthread_kill", ctypes.c_int, [
	("__threadid",		ctypes.c_uint64),
	("__signo",		ctypes.c_int),] )

pthread_sigqueue = _rpythonic_function_(		"pthread_sigqueue", ctypes.c_int, [
	("__threadid",		ctypes.c_uint64),
	("__signo",		ctypes.c_int),
	("__value",		sigval),] )

_IO_cookie_init = _rpythonic_function_(		"_IO_cookie_init", ctypes.c_void_p, [
	("__cfile",		ctypes.POINTER(_IO_cookie_file)),
	("__read_write",		ctypes.c_int),
	("__cookie",		ctypes.POINTER(ctypes.c_void_p)),
	("__fns",		_IO_cookie_io_functions_t),] )

_IO_getc = _rpythonic_function_(		"_IO_getc", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_putc = _rpythonic_function_(		"_IO_putc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_feof = _rpythonic_function_(		"_IO_feof", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_ferror = _rpythonic_function_(		"_IO_ferror", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_peekc_locked = _rpythonic_function_(		"_IO_peekc_locked", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_flockfile = _rpythonic_function_(		"_IO_flockfile", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_IO_funlockfile = _rpythonic_function_(		"_IO_funlockfile", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_IO_ftrylockfile = _rpythonic_function_(		"_IO_ftrylockfile", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_IO_vfscanf = _rpythonic_function_(		"_IO_vfscanf", ctypes.c_int, [
	("__restrict",		ctypes.POINTER(_IO_FILE)),
	("__restrict",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_char),
	("__restrict",		ctypes.POINTER(ctypes.c_int)),] )

_IO_vfprintf = _rpythonic_function_(		"_IO_vfprintf", ctypes.c_int, [
	("__restrict",		ctypes.POINTER(_IO_FILE)),
	("__restrict",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_char),] )

_IO_padn = _rpythonic_function_(		"_IO_padn", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

_IO_sgetn = _rpythonic_function_(		"_IO_sgetn", ctypes.c_uint, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_uint),] )

_IO_seekoff = _rpythonic_function_(		"_IO_seekoff", ctypes.c_longlong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_longlong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

_IO_seekpos = _rpythonic_function_(		"_IO_seekpos", ctypes.c_longlong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_longlong),
	("none",		ctypes.c_int),] )

_IO_free_backup_area = _rpythonic_function_(		"_IO_free_backup_area", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

remove = _rpythonic_function_(		"remove", ctypes.c_int, [
	("__filename",		ctypes.POINTER(ctypes.c_char)),] )

rename = _rpythonic_function_(		"rename", ctypes.c_int, [
	("__old",		ctypes.POINTER(ctypes.c_char)),
	("__new",		ctypes.POINTER(ctypes.c_char)),] )

renameat = _rpythonic_function_(		"renameat", ctypes.c_int, [
	("__oldfd",		ctypes.c_int),
	("__old",		ctypes.POINTER(ctypes.c_char)),
	("__newfd",		ctypes.c_int),
	("__new",		ctypes.POINTER(ctypes.c_char)),] )

tmpfile = _rpythonic_function_(		"tmpfile", ctypes.POINTER(_IO_FILE), [] )

tmpfile64 = _rpythonic_function_(		"tmpfile64", ctypes.POINTER(_IO_FILE), [] )

tmpnam = _rpythonic_function_(		"tmpnam", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

tmpnam_r = _rpythonic_function_(		"tmpnam_r", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

tempnam = _rpythonic_function_(		"tempnam", ctypes.POINTER(ctypes.c_char), [
	("__dir",		ctypes.POINTER(ctypes.c_char)),
	("__pfx",		ctypes.POINTER(ctypes.c_char)),] )

fclose = _rpythonic_function_(		"fclose", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fflush = _rpythonic_function_(		"fflush", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fflush_unlocked = _rpythonic_function_(		"fflush_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fcloseall = _rpythonic_function_(		"fcloseall", ctypes.c_int, [] )

fopen = _rpythonic_function_(		"fopen", ctypes.POINTER(_IO_FILE), [
	("__filename",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

freopen = _rpythonic_function_(		"freopen", ctypes.POINTER(_IO_FILE), [
	("__filename",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.POINTER(ctypes.c_char)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fopen64 = _rpythonic_function_(		"fopen64", ctypes.POINTER(_IO_FILE), [
	("__filename",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

freopen64 = _rpythonic_function_(		"freopen64", ctypes.POINTER(_IO_FILE), [
	("__filename",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.POINTER(ctypes.c_char)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fdopen = _rpythonic_function_(		"fdopen", ctypes.POINTER(_IO_FILE), [
	("__fd",		ctypes.c_int),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

fopencookie = _rpythonic_function_(		"fopencookie", ctypes.POINTER(_IO_FILE), [
	("__magic_cookie",		ctypes.POINTER(ctypes.c_void_p)),
	("__modes",		ctypes.POINTER(ctypes.c_char)),
	("__io_funcs",		_IO_cookie_io_functions_t),] )

fmemopen = _rpythonic_function_(		"fmemopen", ctypes.POINTER(_IO_FILE), [
	("__s",		ctypes.POINTER(ctypes.c_void_p)),
	("__len",		ctypes.c_uint),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

open_memstream = _rpythonic_function_(		"open_memstream", ctypes.POINTER(_IO_FILE), [
	("__bufloc",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__sizeloc",		ctypes.POINTER(ctypes.c_uint)),] )

setbuf = _rpythonic_function_(		"setbuf", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

setvbuf = _rpythonic_function_(		"setvbuf", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.c_int),
	("__n",		ctypes.c_uint),] )

setbuffer = _rpythonic_function_(		"setbuffer", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__size",		ctypes.c_uint),] )

setlinebuf = _rpythonic_function_(		"setlinebuf", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fprintf = _rpythonic_function_(		"fprintf", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

printf = _rpythonic_function_(		"printf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

sprintf = _rpythonic_function_(		"sprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

vfprintf = _rpythonic_function_(		"vfprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vprintf = _rpythonic_function_(		"vprintf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vsprintf = _rpythonic_function_(		"vsprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

snprintf = _rpythonic_function_(		"snprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__maxlen",		ctypes.c_uint),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

vsnprintf = _rpythonic_function_(		"vsnprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__maxlen",		ctypes.c_uint),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vasprintf = _rpythonic_function_(		"vasprintf", ctypes.c_int, [
	("__ptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__f",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

asprintf = _rpythonic_function_(		"asprintf", ctypes.c_int, [
	("__ptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__fmt",		ctypes.POINTER(ctypes.c_char)),] )

vdprintf = _rpythonic_function_(		"vdprintf", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__fmt",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

dprintf = _rpythonic_function_(		"dprintf", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__fmt",		ctypes.POINTER(ctypes.c_char)),] )

fscanf = _rpythonic_function_(		"fscanf", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

scanf = _rpythonic_function_(		"scanf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

sscanf = _rpythonic_function_(		"sscanf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

vfscanf = _rpythonic_function_(		"vfscanf", ctypes.c_int, [
	("__s",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vscanf = _rpythonic_function_(		"vscanf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vsscanf = _rpythonic_function_(		"vsscanf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

fgetc = _rpythonic_function_(		"fgetc", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getc = _rpythonic_function_(		"getc", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getchar = _rpythonic_function_(		"getchar", ctypes.c_int, [] )

getc_unlocked = _rpythonic_function_(		"getc_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getchar_unlocked = _rpythonic_function_(		"getchar_unlocked", ctypes.c_int, [] )

fgetc_unlocked = _rpythonic_function_(		"fgetc_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fputc = _rpythonic_function_(		"fputc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putc = _rpythonic_function_(		"putc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putchar = _rpythonic_function_(		"putchar", ctypes.c_int, [
	("__c",		ctypes.c_int),] )

fputc_unlocked = _rpythonic_function_(		"fputc_unlocked", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putc_unlocked = _rpythonic_function_(		"putc_unlocked", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putchar_unlocked = _rpythonic_function_(		"putchar_unlocked", ctypes.c_int, [
	("__c",		ctypes.c_int),] )

getw = _rpythonic_function_(		"getw", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putw = _rpythonic_function_(		"putw", ctypes.c_int, [
	("__w",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fgets = _rpythonic_function_(		"fgets", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

gets = _rpythonic_function_(		"gets", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

fgets_unlocked = _rpythonic_function_(		"fgets_unlocked", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getdelim = _rpythonic_function_(		"getdelim", ctypes.c_int, [
	("__lineptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__n",		ctypes.POINTER(ctypes.c_uint)),
	("__delimiter",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getline = _rpythonic_function_(		"getline", ctypes.c_int, [
	("__lineptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__n",		ctypes.POINTER(ctypes.c_uint)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fputs = _rpythonic_function_(		"fputs", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

puts = _rpythonic_function_(		"puts", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

ungetc = _rpythonic_function_(		"ungetc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fread = _rpythonic_function_(		"fread", ctypes.c_uint, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint),
	("__n",		ctypes.c_uint),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fwrite = _rpythonic_function_(		"fwrite", ctypes.c_uint, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint),
	("__n",		ctypes.c_uint),
	("__s",		ctypes.POINTER(_IO_FILE)),] )

fputs_unlocked = _rpythonic_function_(		"fputs_unlocked", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fread_unlocked = _rpythonic_function_(		"fread_unlocked", ctypes.c_uint, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint),
	("__n",		ctypes.c_uint),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fwrite_unlocked = _rpythonic_function_(		"fwrite_unlocked", ctypes.c_uint, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint),
	("__n",		ctypes.c_uint),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fseek = _rpythonic_function_(		"fseek", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__off",		ctypes.c_int64),
	("__whence",		ctypes.c_int),] )

ftell = _rpythonic_function_(		"ftell", ctypes.c_int64, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

rewind = _rpythonic_function_(		"rewind", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fseeko = _rpythonic_function_(		"fseeko", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__off",		ctypes.c_int64),
	("__whence",		ctypes.c_int),] )

ftello = _rpythonic_function_(		"ftello", ctypes.c_int64, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fgetpos = _rpythonic_function_(		"fgetpos", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__pos",		ctypes.POINTER(_G_fpos_t)),] )

fsetpos = _rpythonic_function_(		"fsetpos", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__pos",		ctypes.POINTER(_G_fpos_t)),] )

fseeko64 = _rpythonic_function_(		"fseeko64", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__off",		ctypes.c_longlong),
	("__whence",		ctypes.c_int),] )

ftello64 = _rpythonic_function_(		"ftello64", ctypes.c_longlong, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fgetpos64 = _rpythonic_function_(		"fgetpos64", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__pos",		ctypes.POINTER(_G_fpos64_t)),] )

fsetpos64 = _rpythonic_function_(		"fsetpos64", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__pos",		ctypes.POINTER(_G_fpos64_t)),] )

clearerr = _rpythonic_function_(		"clearerr", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

feof = _rpythonic_function_(		"feof", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ferror = _rpythonic_function_(		"ferror", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

clearerr_unlocked = _rpythonic_function_(		"clearerr_unlocked", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

feof_unlocked = _rpythonic_function_(		"feof_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ferror_unlocked = _rpythonic_function_(		"ferror_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

perror = _rpythonic_function_(		"perror", ctypes.c_void_p, [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

fileno = _rpythonic_function_(		"fileno", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fileno_unlocked = _rpythonic_function_(		"fileno_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

popen = _rpythonic_function_(		"popen", ctypes.POINTER(_IO_FILE), [
	("__command",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

pclose = _rpythonic_function_(		"pclose", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ctermid = _rpythonic_function_(		"ctermid", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

cuserid = _rpythonic_function_(		"cuserid", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

obstack_printf = _rpythonic_function_(		"obstack_printf", ctypes.c_int, [
	("__obstack",		ctypes.POINTER(obstack)),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

obstack_vprintf = _rpythonic_function_(		"obstack_vprintf", ctypes.c_int, [
	("__obstack",		ctypes.POINTER(obstack)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__args",		ctypes.c_char),] )

flockfile = _rpythonic_function_(		"flockfile", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ftrylockfile = _rpythonic_function_(		"ftrylockfile", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

funlockfile = _rpythonic_function_(		"funlockfile", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

readv = _rpythonic_function_(		"readv", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__iovec",		ctypes.POINTER(iovec)),
	("__count",		ctypes.c_int),] )

writev = _rpythonic_function_(		"writev", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__iovec",		ctypes.POINTER(iovec)),
	("__count",		ctypes.c_int),] )

preadv = _rpythonic_function_(		"preadv", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__iovec",		ctypes.POINTER(iovec)),
	("__count",		ctypes.c_int),
	("__offset",		ctypes.c_int64),] )

pwritev = _rpythonic_function_(		"pwritev", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__iovec",		ctypes.POINTER(iovec)),
	("__count",		ctypes.c_int),
	("__offset",		ctypes.c_int64),] )

preadv64 = _rpythonic_function_(		"preadv64", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__iovec",		ctypes.POINTER(iovec)),
	("__count",		ctypes.c_int),
	("__offset",		ctypes.c_longlong),] )

pwritev64 = _rpythonic_function_(		"pwritev64", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__iovec",		ctypes.POINTER(iovec)),
	("__count",		ctypes.c_int),
	("__offset",		ctypes.c_longlong),] )

recvmmsg = _rpythonic_function_(		"recvmmsg", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__vmessages",		ctypes.POINTER(mmsghdr)),
	("__vlen",		ctypes.c_uint),
	("__flags",		ctypes.c_int),
	("__tmo",		ctypes.POINTER(timespec)),] )

socket = _rpythonic_function_(		"socket", ctypes.c_int, [
	("__domain",		ctypes.c_int),
	("__type",		ctypes.c_int),
	("__protocol",		ctypes.c_int),] )

socketpair = _rpythonic_function_(		"socketpair", ctypes.c_int, [
	("__domain",		ctypes.c_int),
	("__type",		ctypes.c_int),
	("__protocol",		ctypes.c_int),
	("__fds",		( ctypes.c_int * 2 )),] )

bind = _rpythonic_function_(		"bind", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__addr",		__CONST_SOCKADDR_ARG),
	("__len",		ctypes.c_uint),] )

getsockname = _rpythonic_function_(		"getsockname", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__addr",		__SOCKADDR_ARG),
	("__len",		ctypes.POINTER(ctypes.c_uint)),] )

connect = _rpythonic_function_(		"connect", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__addr",		__CONST_SOCKADDR_ARG),
	("__len",		ctypes.c_uint),] )

getpeername = _rpythonic_function_(		"getpeername", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__addr",		__SOCKADDR_ARG),
	("__len",		ctypes.POINTER(ctypes.c_uint)),] )

send = _rpythonic_function_(		"send", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),
	("__flags",		ctypes.c_int),] )

recv = _rpythonic_function_(		"recv", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),
	("__flags",		ctypes.c_int),] )

sendto = _rpythonic_function_(		"sendto", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),
	("__flags",		ctypes.c_int),
	("__addr",		__CONST_SOCKADDR_ARG),
	("__addr_len",		ctypes.c_uint),] )

recvfrom = _rpythonic_function_(		"recvfrom", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),
	("__flags",		ctypes.c_int),
	("__addr",		__SOCKADDR_ARG),
	("__addr_len",		ctypes.POINTER(ctypes.c_uint)),] )

sendmsg = _rpythonic_function_(		"sendmsg", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__message",		ctypes.POINTER(msghdr)),
	("__flags",		ctypes.c_int),] )

recvmsg = _rpythonic_function_(		"recvmsg", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__message",		ctypes.POINTER(msghdr)),
	("__flags",		ctypes.c_int),] )

getsockopt = _rpythonic_function_(		"getsockopt", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__level",		ctypes.c_int),
	("__optname",		ctypes.c_int),
	("__optval",		ctypes.POINTER(ctypes.c_void_p)),
	("__optlen",		ctypes.POINTER(ctypes.c_uint)),] )

setsockopt = _rpythonic_function_(		"setsockopt", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__level",		ctypes.c_int),
	("__optname",		ctypes.c_int),
	("__optval",		ctypes.POINTER(ctypes.c_void_p)),
	("__optlen",		ctypes.c_uint),] )

listen = _rpythonic_function_(		"listen", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__n",		ctypes.c_int),] )

accept = _rpythonic_function_(		"accept", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__addr",		__SOCKADDR_ARG),
	("__addr_len",		ctypes.POINTER(ctypes.c_uint)),] )

accept4 = _rpythonic_function_(		"accept4", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__addr",		__SOCKADDR_ARG),
	("__addr_len",		ctypes.POINTER(ctypes.c_uint)),
	("__flags",		ctypes.c_int),] )

shutdown = _rpythonic_function_(		"shutdown", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__how",		ctypes.c_int),] )

sockatmark = _rpythonic_function_(		"sockatmark", ctypes.c_int, [
	("__fd",		ctypes.c_int),] )

isfdtype = _rpythonic_function_(		"isfdtype", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__fdtype",		ctypes.c_int),] )

ntohl = _rpythonic_function_(		"ntohl", ctypes.c_uint32, [
	("__netlong",		ctypes.c_uint32),] )

ntohs = _rpythonic_function_(		"ntohs", ctypes.c_uint16, [
	("__netshort",		ctypes.c_uint16),] )

htonl = _rpythonic_function_(		"htonl", ctypes.c_uint32, [
	("__hostlong",		ctypes.c_uint32),] )

htons = _rpythonic_function_(		"htons", ctypes.c_uint16, [
	("__hostshort",		ctypes.c_uint16),] )

bindresvport = _rpythonic_function_(		"bindresvport", ctypes.c_int, [
	("__sockfd",		ctypes.c_int),
	("__sock_in",		ctypes.POINTER(sockaddr_in)),] )

bindresvport6 = _rpythonic_function_(		"bindresvport6", ctypes.c_int, [
	("__sockfd",		ctypes.c_int),
	("__sock_in",		ctypes.POINTER(sockaddr_in6)),] )

inet6_option_space = _rpythonic_function_(		"inet6_option_space", ctypes.c_int, [
	("__nbytes",		ctypes.c_int),] )

inet6_option_init = _rpythonic_function_(		"inet6_option_init", ctypes.c_int, [
	("__bp",		ctypes.POINTER(ctypes.c_void_p)),
	("__cmsgp",		ctypes.POINTER(ctypes.POINTER(cmsghdr))),
	("__type",		ctypes.c_int),] )

inet6_option_append = _rpythonic_function_(		"inet6_option_append", ctypes.c_int, [
	("__cmsg",		ctypes.POINTER(cmsghdr)),
	("__typep",		ctypes.POINTER(ctypes.c_uint8)),
	("__multx",		ctypes.c_int),
	("__plusy",		ctypes.c_int),] )

inet6_option_alloc = _rpythonic_function_(		"inet6_option_alloc", ctypes.POINTER(ctypes.c_uint8), [
	("__cmsg",		ctypes.POINTER(cmsghdr)),
	("__datalen",		ctypes.c_int),
	("__multx",		ctypes.c_int),
	("__plusy",		ctypes.c_int),] )

inet6_option_next = _rpythonic_function_(		"inet6_option_next", ctypes.c_int, [
	("__cmsg",		ctypes.POINTER(cmsghdr)),
	("__tptrp",		ctypes.POINTER(ctypes.POINTER(ctypes.c_uint8))),] )

inet6_option_find = _rpythonic_function_(		"inet6_option_find", ctypes.c_int, [
	("__cmsg",		ctypes.POINTER(cmsghdr)),
	("__tptrp",		ctypes.POINTER(ctypes.POINTER(ctypes.c_uint8))),
	("__type",		ctypes.c_int),] )

inet6_opt_init = _rpythonic_function_(		"inet6_opt_init", ctypes.c_int, [
	("__extbuf",		ctypes.POINTER(ctypes.c_void_p)),
	("__extlen",		ctypes.c_uint),] )

inet6_opt_append = _rpythonic_function_(		"inet6_opt_append", ctypes.c_int, [
	("__extbuf",		ctypes.POINTER(ctypes.c_void_p)),
	("__extlen",		ctypes.c_uint),
	("__offset",		ctypes.c_int),
	("__type",		ctypes.c_uint8),
	("__len",		ctypes.c_uint),
	("__align",		ctypes.c_uint8),
	("__databufp",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

inet6_opt_finish = _rpythonic_function_(		"inet6_opt_finish", ctypes.c_int, [
	("__extbuf",		ctypes.POINTER(ctypes.c_void_p)),
	("__extlen",		ctypes.c_uint),
	("__offset",		ctypes.c_int),] )

inet6_opt_set_val = _rpythonic_function_(		"inet6_opt_set_val", ctypes.c_int, [
	("__databuf",		ctypes.POINTER(ctypes.c_void_p)),
	("__offset",		ctypes.c_int),
	("__val",		ctypes.POINTER(ctypes.c_void_p)),
	("__vallen",		ctypes.c_uint),] )

inet6_opt_next = _rpythonic_function_(		"inet6_opt_next", ctypes.c_int, [
	("__extbuf",		ctypes.POINTER(ctypes.c_void_p)),
	("__extlen",		ctypes.c_uint),
	("__offset",		ctypes.c_int),
	("__typep",		ctypes.POINTER(ctypes.c_uint8)),
	("__lenp",		ctypes.POINTER(ctypes.c_uint)),
	("__databufp",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

inet6_opt_find = _rpythonic_function_(		"inet6_opt_find", ctypes.c_int, [
	("__extbuf",		ctypes.POINTER(ctypes.c_void_p)),
	("__extlen",		ctypes.c_uint),
	("__offset",		ctypes.c_int),
	("__type",		ctypes.c_uint8),
	("__lenp",		ctypes.POINTER(ctypes.c_uint)),
	("__databufp",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

inet6_opt_get_val = _rpythonic_function_(		"inet6_opt_get_val", ctypes.c_int, [
	("__databuf",		ctypes.POINTER(ctypes.c_void_p)),
	("__offset",		ctypes.c_int),
	("__val",		ctypes.POINTER(ctypes.c_void_p)),
	("__vallen",		ctypes.c_uint),] )

inet6_rth_space = _rpythonic_function_(		"inet6_rth_space", ctypes.c_uint, [
	("__type",		ctypes.c_int),
	("__segments",		ctypes.c_int),] )

inet6_rth_init = _rpythonic_function_(		"inet6_rth_init", ctypes.POINTER(ctypes.c_void_p), [
	("__bp",		ctypes.POINTER(ctypes.c_void_p)),
	("__bp_len",		ctypes.c_uint),
	("__type",		ctypes.c_int),
	("__segments",		ctypes.c_int),] )

inet6_rth_add = _rpythonic_function_(		"inet6_rth_add", ctypes.c_int, [
	("__bp",		ctypes.POINTER(ctypes.c_void_p)),
	("__addr",		ctypes.POINTER(in6_addr)),] )

inet6_rth_reverse = _rpythonic_function_(		"inet6_rth_reverse", ctypes.c_int, [
	("__in",		ctypes.POINTER(ctypes.c_void_p)),
	("__out",		ctypes.POINTER(ctypes.c_void_p)),] )

inet6_rth_segments = _rpythonic_function_(		"inet6_rth_segments", ctypes.c_int, [("__bp",		ctypes.c_void_p)] )

inet6_rth_getaddr = _rpythonic_function_(		"inet6_rth_getaddr", ctypes.POINTER(in6_addr), [
	("__bp",		ctypes.POINTER(ctypes.c_void_p)),
	("__index",		ctypes.c_int),] )

getipv4sourcefilter = _rpythonic_function_(		"getipv4sourcefilter", ctypes.c_int, [
	("__s",		ctypes.c_int),
	("__interface_addr",		in_addr),
	("__group",		in_addr),
	("__fmode",		ctypes.POINTER(ctypes.c_uint32)),
	("__numsrc",		ctypes.POINTER(ctypes.c_uint32)),
	("__slist",		ctypes.POINTER(in_addr)),] )

setipv4sourcefilter = _rpythonic_function_(		"setipv4sourcefilter", ctypes.c_int, [
	("__s",		ctypes.c_int),
	("__interface_addr",		in_addr),
	("__group",		in_addr),
	("__fmode",		ctypes.c_uint32),
	("__numsrc",		ctypes.c_uint32),
	("__slist",		ctypes.POINTER(in_addr)),] )

getsourcefilter = _rpythonic_function_(		"getsourcefilter", ctypes.c_int, [
	("__s",		ctypes.c_int),
	("__interface_addr",		ctypes.c_uint32),
	("__group",		ctypes.POINTER(sockaddr)),
	("__grouplen",		ctypes.c_uint),
	("__fmode",		ctypes.POINTER(ctypes.c_uint32)),
	("__numsrc",		ctypes.POINTER(ctypes.c_uint32)),
	("__slist",		ctypes.POINTER(sockaddr_storage)),] )

setsourcefilter = _rpythonic_function_(		"setsourcefilter", ctypes.c_int, [
	("__s",		ctypes.c_int),
	("__interface_addr",		ctypes.c_uint32),
	("__group",		ctypes.POINTER(sockaddr)),
	("__grouplen",		ctypes.c_uint),
	("__fmode",		ctypes.c_uint32),
	("__numsrc",		ctypes.c_uint32),
	("__slist",		ctypes.POINTER(sockaddr_storage)),] )

MEM_allocN_len = _rpythonic_function_(		"MEM_allocN_len", ctypes.c_uint, [("vmemh",		ctypes.c_void_p)] )

MEM_freeN = _rpythonic_function_(		"MEM_freeN", ctypes.c_short, [("vmemh",		ctypes.c_void_p)] )

MEM_testN = _rpythonic_function_(		"MEM_testN", ctypes.c_short, [("vmemh",		ctypes.c_void_p)] )

MEM_dupallocN = _rpythonic_function_(		"MEM_dupallocN", ctypes.POINTER(ctypes.c_void_p), [("vmemh",		ctypes.c_void_p)] )

MEM_reallocN = _rpythonic_function_(		"MEM_reallocN", ctypes.POINTER(ctypes.c_void_p), [
	("vmemh",		ctypes.POINTER(ctypes.c_void_p)),
	("C_len",		ctypes.c_uint),] )

MEM_callocN = _rpythonic_function_(		"MEM_callocN", ctypes.POINTER(ctypes.c_void_p), [
	("C_len",		ctypes.c_uint),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

MEM_mallocN = _rpythonic_function_(		"MEM_mallocN", ctypes.POINTER(ctypes.c_void_p), [
	("C_len",		ctypes.c_uint),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

MEM_mapallocN = _rpythonic_function_(		"MEM_mapallocN", ctypes.POINTER(ctypes.c_void_p), [
	("C_len",		ctypes.c_uint),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

MEM_printmemlist_pydict = _rpythonic_function_(		"MEM_printmemlist_pydict", ctypes.c_void_p, [] )

MEM_printmemlist = _rpythonic_function_(		"MEM_printmemlist", ctypes.c_void_p, [] )

MEM_callbackmemlist = _rpythonic_function_(		"MEM_callbackmemlist", ctypes.c_void_p, [
	("func",		ctypes.c_void_p),] )

func = _rpythonic_function_(		"func", ctypes.c_void_p, [] )

MEM_printmemlist_stats = _rpythonic_function_(		"MEM_printmemlist_stats", ctypes.c_void_p, [] )

MEM_set_error_callback = _rpythonic_function_(		"MEM_set_error_callback", ctypes.c_void_p, [
	("func",		ctypes.c_void_p),] )

MEM_check_memory_integrity = _rpythonic_function_(		"MEM_check_memory_integrity", ctypes.c_int, [] )

MEM_set_lock_callback = _rpythonic_function_(		"MEM_set_lock_callback", ctypes.c_void_p, [
	("lock",		ctypes.c_void_p),
	("unlock",		ctypes.c_void_p),] )

lock = _rpythonic_function_(		"lock", ctypes.c_void_p, [] )

unlock = _rpythonic_function_(		"unlock", ctypes.c_void_p, [] )

MEM_set_memory_debug = _rpythonic_function_(		"MEM_set_memory_debug", ctypes.c_void_p, [] )

MEM_get_memory_in_use = _rpythonic_function_(		"MEM_get_memory_in_use", ctypes.c_uint, [] )

MEM_get_mapped_memory_in_use = _rpythonic_function_(		"MEM_get_mapped_memory_in_use", ctypes.c_uint, [] )

MEM_get_memory_blocks_in_use = _rpythonic_function_(		"MEM_get_memory_blocks_in_use", ctypes.c_int, [] )

MEM_reset_peak_memory = _rpythonic_function_(		"MEM_reset_peak_memory", ctypes.c_void_p, [] )

MEM_get_peak_memory = _rpythonic_function_(		"MEM_get_peak_memory", ctypes.c_uint, [] )

MEM_name_ptr = _rpythonic_function_(		"MEM_name_ptr", ctypes.POINTER(ctypes.c_char), [("vmemh",		ctypes.c_void_p)] )

BLF_init = _rpythonic_function_(		"BLF_init", ctypes.c_int, [
	("points",		ctypes.c_int),
	("dpi",		ctypes.c_int),] )

BLF_exit = _rpythonic_function_(		"BLF_exit", ctypes.c_void_p, [] )

BLF_cache_clear = _rpythonic_function_(		"BLF_cache_clear", ctypes.c_void_p, [] )

BLF_load = _rpythonic_function_(		"BLF_load", ctypes.c_int, [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

BLF_load_mem = _rpythonic_function_(		"BLF_load_mem", ctypes.c_int, [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("mem",		ctypes.POINTER(ctypes.c_ubyte)),
	("mem_size",		ctypes.c_int),] )

BLF_load_unique = _rpythonic_function_(		"BLF_load_unique", ctypes.c_int, [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

BLF_load_mem_unique = _rpythonic_function_(		"BLF_load_mem_unique", ctypes.c_int, [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("mem",		ctypes.POINTER(ctypes.c_ubyte)),
	("mem_size",		ctypes.c_int),] )

BLF_metrics_attach = _rpythonic_function_(		"BLF_metrics_attach", ctypes.c_void_p, [
	("fontid",		ctypes.c_int),
	("mem",		ctypes.POINTER(ctypes.c_ubyte)),
	("mem_size",		ctypes.c_int),] )

BLF_aspect = _rpythonic_function_(		"BLF_aspect", ctypes.c_void_p, [
	("fontid",		ctypes.c_int),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

BLF_position = _rpythonic_function_(		"BLF_position", ctypes.c_void_p, [
	("fontid",		ctypes.c_int),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

BLF_size = _rpythonic_function_(		"BLF_size", ctypes.c_void_p, [
	("fontid",		ctypes.c_int),
	("size",		ctypes.c_int),
	("dpi",		ctypes.c_int),] )

BLF_matrix = _rpythonic_function_(		"BLF_matrix", ctypes.c_void_p, [
	("fontid",		ctypes.c_int),
	("m",		ctypes.POINTER(ctypes.c_double)),] )

BLF_draw_default = _rpythonic_function_(		"BLF_draw_default", ctypes.c_void_p, [
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_uint),] )

BLF_draw_default_ascii = _rpythonic_function_(		"BLF_draw_default_ascii", ctypes.c_void_p, [
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_uint),] )

BLF_draw = _rpythonic_function_(		"BLF_draw", ctypes.c_void_p, [
	("fontid",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_uint),] )

BLF_draw_ascii = _rpythonic_function_(		"BLF_draw_ascii", ctypes.c_void_p, [
	("fontid",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_uint),] )

BLF_boundbox = _rpythonic_function_(		"BLF_boundbox", ctypes.c_void_p, [
	("fontid",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("box",		ctypes.POINTER(rctf)),] )

BLF_width = _rpythonic_function_(		"BLF_width", ctypes.c_float, [
	("fontid",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

BLF_height = _rpythonic_function_(		"BLF_height", ctypes.c_float, [
	("fontid",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

BLF_height_max = _rpythonic_function_(		"BLF_height_max", ctypes.c_float, [
	("fontid",		ctypes.c_int),] )

BLF_width_max = _rpythonic_function_(		"BLF_width_max", ctypes.c_float, [
	("fontid",		ctypes.c_int),] )

BLF_descender = _rpythonic_function_(		"BLF_descender", ctypes.c_float, [
	("fontid",		ctypes.c_int),] )

BLF_ascender = _rpythonic_function_(		"BLF_ascender", ctypes.c_float, [
	("fontid",		ctypes.c_int),] )

BLF_width_and_height = _rpythonic_function_(		"BLF_width_and_height", ctypes.c_void_p, [
	("fontid",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("width",		ctypes.POINTER(ctypes.c_float)),
	("height",		ctypes.POINTER(ctypes.c_float)),] )

BLF_fixed_width = _rpythonic_function_(		"BLF_fixed_width", ctypes.c_float, [
	("fontid",		ctypes.c_int),] )

BLF_width_default = _rpythonic_function_(		"BLF_width_default", ctypes.c_float, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

BLF_height_default = _rpythonic_function_(		"BLF_height_default", ctypes.c_float, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

BLF_rotation_default = _rpythonic_function_(		"BLF_rotation_default", ctypes.c_void_p, [
	("angle",		ctypes.c_float),] )

BLF_enable_default = _rpythonic_function_(		"BLF_enable_default", ctypes.c_void_p, [
	("option",		ctypes.c_int),] )

BLF_disable_default = _rpythonic_function_(		"BLF_disable_default", ctypes.c_void_p, [
	("option",		ctypes.c_int),] )

BLF_rotation = _rpythonic_function_(		"BLF_rotation", ctypes.c_void_p, [
	("fontid",		ctypes.c_int),
	("angle",		ctypes.c_float),] )

BLF_clipping = _rpythonic_function_(		"BLF_clipping", ctypes.c_void_p, [
	("fontid",		ctypes.c_int),
	("xmin",		ctypes.c_float),
	("ymin",		ctypes.c_float),
	("xmax",		ctypes.c_float),
	("ymax",		ctypes.c_float),] )

BLF_clipping_default = _rpythonic_function_(		"BLF_clipping_default", ctypes.c_void_p, [
	("xmin",		ctypes.c_float),
	("ymin",		ctypes.c_float),
	("xmax",		ctypes.c_float),
	("ymax",		ctypes.c_float),] )

BLF_blur = _rpythonic_function_(		"BLF_blur", ctypes.c_void_p, [
	("fontid",		ctypes.c_int),
	("size",		ctypes.c_int),] )

BLF_enable = _rpythonic_function_(		"BLF_enable", ctypes.c_void_p, [
	("fontid",		ctypes.c_int),
	("option",		ctypes.c_int),] )

BLF_disable = _rpythonic_function_(		"BLF_disable", ctypes.c_void_p, [
	("fontid",		ctypes.c_int),
	("option",		ctypes.c_int),] )

BLF_shadow = _rpythonic_function_(		"BLF_shadow", ctypes.c_void_p, [
	("fontid",		ctypes.c_int),
	("level",		ctypes.c_int),
	("r",		ctypes.c_float),
	("g",		ctypes.c_float),
	("b",		ctypes.c_float),
	("a",		ctypes.c_float),] )

BLF_shadow_offset = _rpythonic_function_(		"BLF_shadow_offset", ctypes.c_void_p, [
	("fontid",		ctypes.c_int),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

BLF_buffer = _rpythonic_function_(		"BLF_buffer", ctypes.c_void_p, [
	("fontid",		ctypes.c_int),
	("fbuf",		ctypes.POINTER(ctypes.c_float)),
	("cbuf",		ctypes.POINTER(ctypes.c_ubyte)),
	("w",		ctypes.c_int),
	("h",		ctypes.c_int),
	("nch",		ctypes.c_int),] )

BLF_buffer_col = _rpythonic_function_(		"BLF_buffer_col", ctypes.c_void_p, [
	("fontid",		ctypes.c_int),
	("r",		ctypes.c_float),
	("g",		ctypes.c_float),
	("b",		ctypes.c_float),
	("a",		ctypes.c_float),] )

BLF_draw_buffer = _rpythonic_function_(		"BLF_draw_buffer", ctypes.c_void_p, [
	("fontid",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

BLF_lang_init = _rpythonic_function_(		"BLF_lang_init", ctypes.c_void_p, [] )

BLF_lang_set = _rpythonic_function_(		"BLF_lang_set", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_char)),] )

BLF_lang_encoding_name = _rpythonic_function_(		"BLF_lang_encoding_name", ctypes.c_void_p, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

BLF_lang_encoding = _rpythonic_function_(		"BLF_lang_encoding", ctypes.c_void_p, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

BLF_dir_add = _rpythonic_function_(		"BLF_dir_add", ctypes.c_void_p, [
	("path",		ctypes.POINTER(ctypes.c_char)),] )

BLF_dir_rem = _rpythonic_function_(		"BLF_dir_rem", ctypes.c_void_p, [
	("path",		ctypes.POINTER(ctypes.c_char)),] )

BLF_dir_get = _rpythonic_function_(		"BLF_dir_get", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("ndir",		ctypes.POINTER(ctypes.c_int)),] )

BLF_dir_free = _rpythonic_function_(		"BLF_dir_free", ctypes.c_void_p, [
	("dirs",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("count",		ctypes.c_int),] )

BA_ArgCallback = _rpythonic_function_(		"BA_ArgCallback", ctypes.c_int, [
	("argc",		ctypes.c_int),
	("argv",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_argsInit = _rpythonic_function_(		"BLI_argsInit", ctypes.POINTER(bArgs), [
	("argc",		ctypes.c_int),
	("argv",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

BLI_argsFree = _rpythonic_function_(		"BLI_argsFree", ctypes.c_void_p, [
	("ba",		ctypes.POINTER(bArgs)),] )

BLI_argsAdd = _rpythonic_function_(		"BLI_argsAdd", ctypes.c_void_p, [
	("ba",		ctypes.POINTER(bArgs)),
	("pass",		ctypes.c_int),
	("short_arg",		ctypes.POINTER(ctypes.c_char)),
	("long_arg",		ctypes.POINTER(ctypes.c_char)),
	("doc",		ctypes.POINTER(ctypes.c_char)),
	("cb",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int,ctypes.POINTER(ctypes.POINTER(ctypes.c_char)),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_argsAddCase = _rpythonic_function_(		"BLI_argsAddCase", ctypes.c_void_p, [
	("ba",		ctypes.POINTER(bArgs)),
	("pass",		ctypes.c_int),
	("short_arg",		ctypes.POINTER(ctypes.c_char)),
	("short_case",		ctypes.c_int),
	("long_arg",		ctypes.POINTER(ctypes.c_char)),
	("long_case",		ctypes.c_int),
	("doc",		ctypes.POINTER(ctypes.c_char)),
	("cb",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int,ctypes.POINTER(ctypes.POINTER(ctypes.c_char)),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_argsParse = _rpythonic_function_(		"BLI_argsParse", ctypes.c_void_p, [
	("ba",		ctypes.POINTER(bArgs)),
	("pass",		ctypes.c_int),
	("default_cb",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int,ctypes.POINTER(ctypes.POINTER(ctypes.c_char)),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_argsPrintArgDoc = _rpythonic_function_(		"BLI_argsPrintArgDoc", ctypes.c_void_p, [
	("ba",		ctypes.POINTER(bArgs)),
	("arg",		ctypes.POINTER(ctypes.c_char)),] )

BLI_argsPrintOtherDoc = _rpythonic_function_(		"BLI_argsPrintOtherDoc", ctypes.c_void_p, [
	("ba",		ctypes.POINTER(bArgs)),] )

BLI_argsPrint = _rpythonic_function_(		"BLI_argsPrint", ctypes.c_void_p, [
	("ba",		ctypes.POINTER(bArgs)),] )

clone = _rpythonic_function_(		"clone", ctypes.c_int, [
	("__fn",		ctypes.c_void_p),
	("__child_stack",		ctypes.POINTER(ctypes.c_void_p)),
	("__flags",		ctypes.c_int),
	("__arg",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_argsArgv = _rpythonic_function_(		"BLI_argsArgv", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("ba",		ctypes.POINTER(bArgs)),] )

unshare = _rpythonic_function_(		"unshare", ctypes.c_int, [
	("__flags",		ctypes.c_int),] )

sched_getcpu = _rpythonic_function_(		"sched_getcpu", ctypes.c_int, [] )

sched_setparam = _rpythonic_function_(		"sched_setparam", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__param",		ctypes.POINTER(sched_param)),] )

sched_getparam = _rpythonic_function_(		"sched_getparam", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__param",		ctypes.POINTER(sched_param)),] )

sched_setscheduler = _rpythonic_function_(		"sched_setscheduler", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__policy",		ctypes.c_int),
	("__param",		ctypes.POINTER(sched_param)),] )

sched_getscheduler = _rpythonic_function_(		"sched_getscheduler", ctypes.c_int, [
	("__pid",		ctypes.c_int),] )

sched_yield = _rpythonic_function_(		"sched_yield", ctypes.c_int, [] )

sched_get_priority_max = _rpythonic_function_(		"sched_get_priority_max", ctypes.c_int, [
	("__algorithm",		ctypes.c_int),] )

sched_get_priority_min = _rpythonic_function_(		"sched_get_priority_min", ctypes.c_int, [
	("__algorithm",		ctypes.c_int),] )

sched_rr_get_interval = _rpythonic_function_(		"sched_rr_get_interval", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__t",		ctypes.POINTER(timespec)),] )

sched_setaffinity = _rpythonic_function_(		"sched_setaffinity", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__cpusetsize",		ctypes.c_uint),
	("__cpuset",		ctypes.POINTER(cpu_set_t)),] )

sched_getaffinity = _rpythonic_function_(		"sched_getaffinity", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__cpusetsize",		ctypes.c_uint),
	("__cpuset",		ctypes.POINTER(cpu_set_t)),] )

clock = _rpythonic_function_(		"clock", ctypes.c_int64, [] )

time = _rpythonic_function_(		"time", ctypes.c_int64, [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),] )

difftime = _rpythonic_function_(		"difftime", ctypes.c_double, [
	("__time1",		ctypes.c_int64),
	("__time0",		ctypes.c_int64),] )

mktime = _rpythonic_function_(		"mktime", ctypes.c_int64, [
	("__tp",		ctypes.POINTER(tm)),] )

strftime = _rpythonic_function_(		"strftime", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__maxsize",		ctypes.c_uint),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__tp",		ctypes.POINTER(tm)),] )

strptime = _rpythonic_function_(		"strptime", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__fmt",		ctypes.POINTER(ctypes.c_char)),
	("__tp",		ctypes.POINTER(tm)),] )

strftime_l = _rpythonic_function_(		"strftime_l", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__maxsize",		ctypes.c_uint),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__tp",		ctypes.POINTER(tm)),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

strptime_l = _rpythonic_function_(		"strptime_l", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__fmt",		ctypes.POINTER(ctypes.c_char)),
	("__tp",		ctypes.POINTER(tm)),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

gmtime = _rpythonic_function_(		"gmtime", ctypes.POINTER(tm), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),] )

localtime = _rpythonic_function_(		"localtime", ctypes.POINTER(tm), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),] )

gmtime_r = _rpythonic_function_(		"gmtime_r", ctypes.POINTER(tm), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),
	("__tp",		ctypes.POINTER(tm)),] )

localtime_r = _rpythonic_function_(		"localtime_r", ctypes.POINTER(tm), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),
	("__tp",		ctypes.POINTER(tm)),] )

asctime = _rpythonic_function_(		"asctime", ctypes.POINTER(ctypes.c_char), [
	("__tp",		ctypes.POINTER(tm)),] )

ctime = _rpythonic_function_(		"ctime", ctypes.POINTER(ctypes.c_char), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),] )

asctime_r = _rpythonic_function_(		"asctime_r", ctypes.POINTER(ctypes.c_char), [
	("__tp",		ctypes.POINTER(tm)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

ctime_r = _rpythonic_function_(		"ctime_r", ctypes.POINTER(ctypes.c_char), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

tzset = _rpythonic_function_(		"tzset", ctypes.c_void_p, [] )

stime = _rpythonic_function_(		"stime", ctypes.c_int, [
	("__when",		ctypes.POINTER(ctypes.c_int64)),] )

timegm = _rpythonic_function_(		"timegm", ctypes.c_int64, [
	("__tp",		ctypes.POINTER(tm)),] )

timelocal = _rpythonic_function_(		"timelocal", ctypes.c_int64, [
	("__tp",		ctypes.POINTER(tm)),] )

dysize = _rpythonic_function_(		"dysize", ctypes.c_int, [
	("__year",		ctypes.c_int),] )

nanosleep = _rpythonic_function_(		"nanosleep", ctypes.c_int, [
	("__requested_time",		ctypes.POINTER(timespec)),
	("__remaining",		ctypes.POINTER(timespec)),] )

clock_getres = _rpythonic_function_(		"clock_getres", ctypes.c_int, [
	("__clock_id",		ctypes.c_int),
	("__res",		ctypes.POINTER(timespec)),] )

clock_gettime = _rpythonic_function_(		"clock_gettime", ctypes.c_int, [
	("__clock_id",		ctypes.c_int),
	("__tp",		ctypes.POINTER(timespec)),] )

clock_settime = _rpythonic_function_(		"clock_settime", ctypes.c_int, [
	("__clock_id",		ctypes.c_int),
	("__tp",		ctypes.POINTER(timespec)),] )

clock_nanosleep = _rpythonic_function_(		"clock_nanosleep", ctypes.c_int, [
	("__clock_id",		ctypes.c_int),
	("__flags",		ctypes.c_int),
	("__req",		ctypes.POINTER(timespec)),
	("__rem",		ctypes.POINTER(timespec)),] )

clock_getcpuclockid = _rpythonic_function_(		"clock_getcpuclockid", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__clock_id",		ctypes.POINTER(ctypes.c_int)),] )

timer_create = _rpythonic_function_(		"timer_create", ctypes.c_int, [
	("__clock_id",		ctypes.c_int),
	("__evp",		ctypes.POINTER(sigevent)),
	("__timerid",		ctypes.POINTER(ctypes.c_void_p)),] )

timer_delete = _rpythonic_function_(		"timer_delete", ctypes.c_int, [("__timerid",		ctypes.c_void_p)] )

timer_settime = _rpythonic_function_(		"timer_settime", ctypes.c_int, [
	("__timerid",		ctypes.c_void_p),
	("__flags",		ctypes.c_int),
	("__value",		ctypes.POINTER(itimerspec)),
	("__ovalue",		ctypes.POINTER(itimerspec)),] )

timer_gettime = _rpythonic_function_(		"timer_gettime", ctypes.c_int, [
	("__timerid",		ctypes.c_void_p),
	("__value",		ctypes.POINTER(itimerspec)),] )

timer_getoverrun = _rpythonic_function_(		"timer_getoverrun", ctypes.c_int, [("__timerid",		ctypes.c_void_p)] )

getdate = _rpythonic_function_(		"getdate", ctypes.POINTER(tm), [
	("__string",		ctypes.POINTER(ctypes.c_char)),] )

getdate_r = _rpythonic_function_(		"getdate_r", ctypes.c_int, [
	("__string",		ctypes.POINTER(ctypes.c_char)),
	("__resbufp",		ctypes.POINTER(tm)),] )

pthread_create = _rpythonic_function_(		"pthread_create", ctypes.c_int, [
	("__newthread",		ctypes.POINTER(ctypes.c_uint64)),
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__start_routine",		ctypes.POINTER(ctypes.c_void_p)),
	("__arg",		ctypes.POINTER(ctypes.c_void_p)),] )

pthread_exit = _rpythonic_function_(		"pthread_exit", ctypes.c_void_p, [("__retval",		ctypes.c_void_p)] )

pthread_join = _rpythonic_function_(		"pthread_join", ctypes.c_int, [
	("__th",		ctypes.c_uint64),
	("__thread_return",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

pthread_tryjoin_np = _rpythonic_function_(		"pthread_tryjoin_np", ctypes.c_int, [
	("__th",		ctypes.c_uint64),
	("__thread_return",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

pthread_timedjoin_np = _rpythonic_function_(		"pthread_timedjoin_np", ctypes.c_int, [
	("__th",		ctypes.c_uint64),
	("__thread_return",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("__abstime",		ctypes.POINTER(timespec)),] )

pthread_detach = _rpythonic_function_(		"pthread_detach", ctypes.c_int, [
	("__th",		ctypes.c_uint64),] )

pthread_self = _rpythonic_function_(		"pthread_self", ctypes.c_uint64, [] )

pthread_equal = _rpythonic_function_(		"pthread_equal", ctypes.c_int, [
	("__thread1",		ctypes.c_uint64),
	("__thread2",		ctypes.c_uint64),] )

pthread_attr_init = _rpythonic_function_(		"pthread_attr_init", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),] )

pthread_attr_destroy = _rpythonic_function_(		"pthread_attr_destroy", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),] )

pthread_attr_getdetachstate = _rpythonic_function_(		"pthread_attr_getdetachstate", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__detachstate",		ctypes.POINTER(ctypes.c_int)),] )

pthread_attr_setdetachstate = _rpythonic_function_(		"pthread_attr_setdetachstate", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__detachstate",		ctypes.c_int),] )

pthread_attr_getguardsize = _rpythonic_function_(		"pthread_attr_getguardsize", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__guardsize",		ctypes.POINTER(ctypes.c_uint)),] )

pthread_attr_setguardsize = _rpythonic_function_(		"pthread_attr_setguardsize", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__guardsize",		ctypes.c_uint),] )

pthread_attr_getschedparam = _rpythonic_function_(		"pthread_attr_getschedparam", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__param",		ctypes.POINTER(sched_param)),] )

pthread_attr_setschedparam = _rpythonic_function_(		"pthread_attr_setschedparam", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__param",		ctypes.POINTER(sched_param)),] )

pthread_attr_getschedpolicy = _rpythonic_function_(		"pthread_attr_getschedpolicy", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__policy",		ctypes.POINTER(ctypes.c_int)),] )

pthread_attr_setschedpolicy = _rpythonic_function_(		"pthread_attr_setschedpolicy", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__policy",		ctypes.c_int),] )

pthread_attr_getinheritsched = _rpythonic_function_(		"pthread_attr_getinheritsched", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__inherit",		ctypes.POINTER(ctypes.c_int)),] )

pthread_attr_setinheritsched = _rpythonic_function_(		"pthread_attr_setinheritsched", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__inherit",		ctypes.c_int),] )

pthread_attr_getscope = _rpythonic_function_(		"pthread_attr_getscope", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__scope",		ctypes.POINTER(ctypes.c_int)),] )

pthread_attr_setscope = _rpythonic_function_(		"pthread_attr_setscope", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__scope",		ctypes.c_int),] )

pthread_attr_getstackaddr = _rpythonic_function_(		"pthread_attr_getstackaddr", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__stackaddr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

pthread_attr_setstackaddr = _rpythonic_function_(		"pthread_attr_setstackaddr", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__stackaddr",		ctypes.POINTER(ctypes.c_void_p)),] )

pthread_attr_getstacksize = _rpythonic_function_(		"pthread_attr_getstacksize", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__stacksize",		ctypes.POINTER(ctypes.c_uint)),] )

pthread_attr_setstacksize = _rpythonic_function_(		"pthread_attr_setstacksize", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__stacksize",		ctypes.c_uint),] )

pthread_attr_getstack = _rpythonic_function_(		"pthread_attr_getstack", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__stackaddr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("__stacksize",		ctypes.POINTER(ctypes.c_uint)),] )

pthread_attr_setstack = _rpythonic_function_(		"pthread_attr_setstack", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__stackaddr",		ctypes.POINTER(ctypes.c_void_p)),
	("__stacksize",		ctypes.c_uint),] )

pthread_attr_setaffinity_np = _rpythonic_function_(		"pthread_attr_setaffinity_np", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__cpusetsize",		ctypes.c_uint),
	("__cpuset",		ctypes.POINTER(cpu_set_t)),] )

pthread_attr_getaffinity_np = _rpythonic_function_(		"pthread_attr_getaffinity_np", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__cpusetsize",		ctypes.c_uint),
	("__cpuset",		ctypes.POINTER(cpu_set_t)),] )

pthread_getattr_np = _rpythonic_function_(		"pthread_getattr_np", ctypes.c_int, [
	("__th",		ctypes.c_uint64),
	("__attr",		ctypes.POINTER(pthread_attr_t)),] )

pthread_setschedparam = _rpythonic_function_(		"pthread_setschedparam", ctypes.c_int, [
	("__target_thread",		ctypes.c_uint64),
	("__policy",		ctypes.c_int),
	("__param",		ctypes.POINTER(sched_param)),] )

pthread_getschedparam = _rpythonic_function_(		"pthread_getschedparam", ctypes.c_int, [
	("__target_thread",		ctypes.c_uint64),
	("__policy",		ctypes.POINTER(ctypes.c_int)),
	("__param",		ctypes.POINTER(sched_param)),] )

pthread_setschedprio = _rpythonic_function_(		"pthread_setschedprio", ctypes.c_int, [
	("__target_thread",		ctypes.c_uint64),
	("__prio",		ctypes.c_int),] )

pthread_getname_np = _rpythonic_function_(		"pthread_getname_np", ctypes.c_int, [
	("__target_thread",		ctypes.c_uint64),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__buflen",		ctypes.c_uint),] )

pthread_setname_np = _rpythonic_function_(		"pthread_setname_np", ctypes.c_int, [
	("__target_thread",		ctypes.c_uint64),
	("__name",		ctypes.POINTER(ctypes.c_char)),] )

pthread_getconcurrency = _rpythonic_function_(		"pthread_getconcurrency", ctypes.c_int, [] )

pthread_setconcurrency = _rpythonic_function_(		"pthread_setconcurrency", ctypes.c_int, [
	("__level",		ctypes.c_int),] )

pthread_yield = _rpythonic_function_(		"pthread_yield", ctypes.c_int, [] )

pthread_setaffinity_np = _rpythonic_function_(		"pthread_setaffinity_np", ctypes.c_int, [
	("__th",		ctypes.c_uint64),
	("__cpusetsize",		ctypes.c_uint),
	("__cpuset",		ctypes.POINTER(cpu_set_t)),] )

pthread_getaffinity_np = _rpythonic_function_(		"pthread_getaffinity_np", ctypes.c_int, [
	("__th",		ctypes.c_uint64),
	("__cpusetsize",		ctypes.c_uint),
	("__cpuset",		ctypes.POINTER(cpu_set_t)),] )

pthread_once = _rpythonic_function_(		"pthread_once", ctypes.c_int, [
	("__once_control",		ctypes.POINTER(ctypes.c_int)),
	("__init_routine",		ctypes.c_void_p),] )

pthread_setcancelstate = _rpythonic_function_(		"pthread_setcancelstate", ctypes.c_int, [
	("__state",		ctypes.c_int),
	("__oldstate",		ctypes.POINTER(ctypes.c_int)),] )

pthread_setcanceltype = _rpythonic_function_(		"pthread_setcanceltype", ctypes.c_int, [
	("__type",		ctypes.c_int),
	("__oldtype",		ctypes.POINTER(ctypes.c_int)),] )

pthread_cancel = _rpythonic_function_(		"pthread_cancel", ctypes.c_int, [
	("__th",		ctypes.c_uint64),] )

pthread_testcancel = _rpythonic_function_(		"pthread_testcancel", ctypes.c_void_p, [] )

pthread_mutex_init = _rpythonic_function_(		"pthread_mutex_init", ctypes.c_int, [
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),
	("__mutexattr",		ctypes.POINTER(pthread_mutexattr_t)),] )

pthread_mutex_destroy = _rpythonic_function_(		"pthread_mutex_destroy", ctypes.c_int, [
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),] )

pthread_mutex_trylock = _rpythonic_function_(		"pthread_mutex_trylock", ctypes.c_int, [
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),] )

pthread_mutex_lock = _rpythonic_function_(		"pthread_mutex_lock", ctypes.c_int, [
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),] )

pthread_mutex_timedlock = _rpythonic_function_(		"pthread_mutex_timedlock", ctypes.c_int, [
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),
	("__abstime",		ctypes.POINTER(timespec)),] )

pthread_mutex_unlock = _rpythonic_function_(		"pthread_mutex_unlock", ctypes.c_int, [
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),] )

pthread_mutex_getprioceiling = _rpythonic_function_(		"pthread_mutex_getprioceiling", ctypes.c_int, [
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),
	("__prioceiling",		ctypes.POINTER(ctypes.c_int)),] )

pthread_mutex_setprioceiling = _rpythonic_function_(		"pthread_mutex_setprioceiling", ctypes.c_int, [
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),
	("__prioceiling",		ctypes.c_int),
	("__old_ceiling",		ctypes.POINTER(ctypes.c_int)),] )

pthread_mutex_consistent = _rpythonic_function_(		"pthread_mutex_consistent", ctypes.c_int, [
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),] )

pthread_mutex_consistent_np = _rpythonic_function_(		"pthread_mutex_consistent_np", ctypes.c_int, [
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),] )

pthread_mutexattr_init = _rpythonic_function_(		"pthread_mutexattr_init", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),] )

pthread_mutexattr_destroy = _rpythonic_function_(		"pthread_mutexattr_destroy", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),] )

pthread_mutexattr_getpshared = _rpythonic_function_(		"pthread_mutexattr_getpshared", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__pshared",		ctypes.POINTER(ctypes.c_int)),] )

pthread_mutexattr_setpshared = _rpythonic_function_(		"pthread_mutexattr_setpshared", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__pshared",		ctypes.c_int),] )

pthread_mutexattr_gettype = _rpythonic_function_(		"pthread_mutexattr_gettype", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__kind",		ctypes.POINTER(ctypes.c_int)),] )

pthread_mutexattr_settype = _rpythonic_function_(		"pthread_mutexattr_settype", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__kind",		ctypes.c_int),] )

pthread_mutexattr_getprotocol = _rpythonic_function_(		"pthread_mutexattr_getprotocol", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__protocol",		ctypes.POINTER(ctypes.c_int)),] )

pthread_mutexattr_setprotocol = _rpythonic_function_(		"pthread_mutexattr_setprotocol", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__protocol",		ctypes.c_int),] )

pthread_mutexattr_getprioceiling = _rpythonic_function_(		"pthread_mutexattr_getprioceiling", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__prioceiling",		ctypes.POINTER(ctypes.c_int)),] )

pthread_mutexattr_setprioceiling = _rpythonic_function_(		"pthread_mutexattr_setprioceiling", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__prioceiling",		ctypes.c_int),] )

pthread_mutexattr_getrobust = _rpythonic_function_(		"pthread_mutexattr_getrobust", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__robustness",		ctypes.POINTER(ctypes.c_int)),] )

pthread_mutexattr_getrobust_np = _rpythonic_function_(		"pthread_mutexattr_getrobust_np", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__robustness",		ctypes.POINTER(ctypes.c_int)),] )

pthread_mutexattr_setrobust = _rpythonic_function_(		"pthread_mutexattr_setrobust", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__robustness",		ctypes.c_int),] )

pthread_mutexattr_setrobust_np = _rpythonic_function_(		"pthread_mutexattr_setrobust_np", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__robustness",		ctypes.c_int),] )

pthread_rwlock_init = _rpythonic_function_(		"pthread_rwlock_init", ctypes.c_int, [
	("__rwlock",		ctypes.POINTER(pthread_rwlock_t)),
	("__attr",		ctypes.POINTER(pthread_rwlockattr_t)),] )

pthread_rwlock_destroy = _rpythonic_function_(		"pthread_rwlock_destroy", ctypes.c_int, [
	("__rwlock",		ctypes.POINTER(pthread_rwlock_t)),] )

pthread_rwlock_rdlock = _rpythonic_function_(		"pthread_rwlock_rdlock", ctypes.c_int, [
	("__rwlock",		ctypes.POINTER(pthread_rwlock_t)),] )

pthread_rwlock_tryrdlock = _rpythonic_function_(		"pthread_rwlock_tryrdlock", ctypes.c_int, [
	("__rwlock",		ctypes.POINTER(pthread_rwlock_t)),] )

pthread_rwlock_timedrdlock = _rpythonic_function_(		"pthread_rwlock_timedrdlock", ctypes.c_int, [
	("__rwlock",		ctypes.POINTER(pthread_rwlock_t)),
	("__abstime",		ctypes.POINTER(timespec)),] )

pthread_rwlock_wrlock = _rpythonic_function_(		"pthread_rwlock_wrlock", ctypes.c_int, [
	("__rwlock",		ctypes.POINTER(pthread_rwlock_t)),] )

pthread_rwlock_trywrlock = _rpythonic_function_(		"pthread_rwlock_trywrlock", ctypes.c_int, [
	("__rwlock",		ctypes.POINTER(pthread_rwlock_t)),] )

pthread_rwlock_timedwrlock = _rpythonic_function_(		"pthread_rwlock_timedwrlock", ctypes.c_int, [
	("__rwlock",		ctypes.POINTER(pthread_rwlock_t)),
	("__abstime",		ctypes.POINTER(timespec)),] )

pthread_rwlock_unlock = _rpythonic_function_(		"pthread_rwlock_unlock", ctypes.c_int, [
	("__rwlock",		ctypes.POINTER(pthread_rwlock_t)),] )

pthread_rwlockattr_init = _rpythonic_function_(		"pthread_rwlockattr_init", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_rwlockattr_t)),] )

pthread_rwlockattr_destroy = _rpythonic_function_(		"pthread_rwlockattr_destroy", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_rwlockattr_t)),] )

pthread_rwlockattr_getpshared = _rpythonic_function_(		"pthread_rwlockattr_getpshared", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_rwlockattr_t)),
	("__pshared",		ctypes.POINTER(ctypes.c_int)),] )

pthread_rwlockattr_setpshared = _rpythonic_function_(		"pthread_rwlockattr_setpshared", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_rwlockattr_t)),
	("__pshared",		ctypes.c_int),] )

pthread_rwlockattr_getkind_np = _rpythonic_function_(		"pthread_rwlockattr_getkind_np", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_rwlockattr_t)),
	("__pref",		ctypes.POINTER(ctypes.c_int)),] )

pthread_rwlockattr_setkind_np = _rpythonic_function_(		"pthread_rwlockattr_setkind_np", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_rwlockattr_t)),
	("__pref",		ctypes.c_int),] )

pthread_cond_init = _rpythonic_function_(		"pthread_cond_init", ctypes.c_int, [
	("__cond",		ctypes.POINTER(pthread_cond_t)),
	("__cond_attr",		ctypes.POINTER(pthread_condattr_t)),] )

pthread_cond_destroy = _rpythonic_function_(		"pthread_cond_destroy", ctypes.c_int, [
	("__cond",		ctypes.POINTER(pthread_cond_t)),] )

pthread_cond_signal = _rpythonic_function_(		"pthread_cond_signal", ctypes.c_int, [
	("__cond",		ctypes.POINTER(pthread_cond_t)),] )

pthread_cond_broadcast = _rpythonic_function_(		"pthread_cond_broadcast", ctypes.c_int, [
	("__cond",		ctypes.POINTER(pthread_cond_t)),] )

pthread_cond_wait = _rpythonic_function_(		"pthread_cond_wait", ctypes.c_int, [
	("__cond",		ctypes.POINTER(pthread_cond_t)),
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),] )

pthread_cond_timedwait = _rpythonic_function_(		"pthread_cond_timedwait", ctypes.c_int, [
	("__cond",		ctypes.POINTER(pthread_cond_t)),
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),
	("__abstime",		ctypes.POINTER(timespec)),] )

pthread_condattr_init = _rpythonic_function_(		"pthread_condattr_init", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_condattr_t)),] )

pthread_condattr_destroy = _rpythonic_function_(		"pthread_condattr_destroy", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_condattr_t)),] )

pthread_condattr_getpshared = _rpythonic_function_(		"pthread_condattr_getpshared", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_condattr_t)),
	("__pshared",		ctypes.POINTER(ctypes.c_int)),] )

pthread_condattr_setpshared = _rpythonic_function_(		"pthread_condattr_setpshared", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_condattr_t)),
	("__pshared",		ctypes.c_int),] )

pthread_condattr_getclock = _rpythonic_function_(		"pthread_condattr_getclock", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_condattr_t)),
	("__clock_id",		ctypes.POINTER(ctypes.c_int)),] )

pthread_condattr_setclock = _rpythonic_function_(		"pthread_condattr_setclock", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_condattr_t)),
	("__clock_id",		ctypes.c_int),] )

pthread_spin_init = _rpythonic_function_(		"pthread_spin_init", ctypes.c_int, [
	("__lock",		ctypes.POINTER(ctypes.c_int)),
	("__pshared",		ctypes.c_int),] )

pthread_spin_destroy = _rpythonic_function_(		"pthread_spin_destroy", ctypes.c_int, [
	("__lock",		ctypes.POINTER(ctypes.c_int)),] )

pthread_spin_lock = _rpythonic_function_(		"pthread_spin_lock", ctypes.c_int, [
	("__lock",		ctypes.POINTER(ctypes.c_int)),] )

pthread_spin_trylock = _rpythonic_function_(		"pthread_spin_trylock", ctypes.c_int, [
	("__lock",		ctypes.POINTER(ctypes.c_int)),] )

pthread_spin_unlock = _rpythonic_function_(		"pthread_spin_unlock", ctypes.c_int, [
	("__lock",		ctypes.POINTER(ctypes.c_int)),] )

pthread_barrier_init = _rpythonic_function_(		"pthread_barrier_init", ctypes.c_int, [
	("__barrier",		ctypes.POINTER(pthread_barrier_t)),
	("__attr",		ctypes.POINTER(pthread_barrierattr_t)),
	("__count",		ctypes.c_uint),] )

pthread_barrier_destroy = _rpythonic_function_(		"pthread_barrier_destroy", ctypes.c_int, [
	("__barrier",		ctypes.POINTER(pthread_barrier_t)),] )

pthread_barrier_wait = _rpythonic_function_(		"pthread_barrier_wait", ctypes.c_int, [
	("__barrier",		ctypes.POINTER(pthread_barrier_t)),] )

pthread_barrierattr_init = _rpythonic_function_(		"pthread_barrierattr_init", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_barrierattr_t)),] )

pthread_barrierattr_destroy = _rpythonic_function_(		"pthread_barrierattr_destroy", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_barrierattr_t)),] )

pthread_barrierattr_getpshared = _rpythonic_function_(		"pthread_barrierattr_getpshared", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_barrierattr_t)),
	("__pshared",		ctypes.POINTER(ctypes.c_int)),] )

pthread_barrierattr_setpshared = _rpythonic_function_(		"pthread_barrierattr_setpshared", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_barrierattr_t)),
	("__pshared",		ctypes.c_int),] )

pthread_key_create = _rpythonic_function_(		"pthread_key_create", ctypes.c_int, [
	("__key",		ctypes.POINTER(ctypes.c_uint)),
	("__destr_function",		ctypes.c_void_p),] )

pthread_key_delete = _rpythonic_function_(		"pthread_key_delete", ctypes.c_int, [
	("__key",		ctypes.c_uint),] )

pthread_getspecific = _rpythonic_function_(		"pthread_getspecific", ctypes.POINTER(ctypes.c_void_p), [
	("__key",		ctypes.c_uint),] )

pthread_setspecific = _rpythonic_function_(		"pthread_setspecific", ctypes.c_int, [
	("__key",		ctypes.c_uint),
	("__pointer",		ctypes.POINTER(ctypes.c_void_p)),] )

pthread_getcpuclockid = _rpythonic_function_(		"pthread_getcpuclockid", ctypes.c_int, [
	("__thread_id",		ctypes.c_uint64),
	("__clock_id",		ctypes.POINTER(ctypes.c_int)),] )

pthread_atfork = _rpythonic_function_(		"pthread_atfork", ctypes.c_int, [
	("__prepare",		ctypes.c_void_p),
	("__parent",		ctypes.c_void_p),
	("__child",		ctypes.c_void_p),] )

BLI_threadapi_init = _rpythonic_function_(		"BLI_threadapi_init", ctypes.c_void_p, [] )

BLI_init_threads = _rpythonic_function_(		"BLI_init_threads", ctypes.c_void_p, [
	("threadbase",		ctypes.POINTER(ListBase)),
	("do_thread",		ctypes.POINTER(ctypes.c_void_p)),
	("tot",		ctypes.c_int),] )

do_thread = _rpythonic_function_(		"do_thread", ctypes.POINTER(ctypes.c_void_p), [] )

BLI_available_threads = _rpythonic_function_(		"BLI_available_threads", ctypes.c_int, [
	("threadbase",		ctypes.POINTER(ListBase)),] )

BLI_available_thread_index = _rpythonic_function_(		"BLI_available_thread_index", ctypes.c_int, [
	("threadbase",		ctypes.POINTER(ListBase)),] )

BLI_insert_thread = _rpythonic_function_(		"BLI_insert_thread", ctypes.c_void_p, [
	("threadbase",		ctypes.POINTER(ListBase)),
	("callerdata",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_remove_thread = _rpythonic_function_(		"BLI_remove_thread", ctypes.c_void_p, [
	("threadbase",		ctypes.POINTER(ListBase)),
	("callerdata",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_remove_thread_index = _rpythonic_function_(		"BLI_remove_thread_index", ctypes.c_void_p, [
	("threadbase",		ctypes.POINTER(ListBase)),
	("index",		ctypes.c_int),] )

BLI_remove_threads = _rpythonic_function_(		"BLI_remove_threads", ctypes.c_void_p, [
	("threadbase",		ctypes.POINTER(ListBase)),] )

BLI_end_threads = _rpythonic_function_(		"BLI_end_threads", ctypes.c_void_p, [
	("threadbase",		ctypes.POINTER(ListBase)),] )

BLI_thread_is_main = _rpythonic_function_(		"BLI_thread_is_main", ctypes.c_int, [] )

BLI_system_thread_count = _rpythonic_function_(		"BLI_system_thread_count", ctypes.c_int, [] )

BLI_lock_thread = _rpythonic_function_(		"BLI_lock_thread", ctypes.c_void_p, [
	("C_type",		ctypes.c_int),] )

BLI_unlock_thread = _rpythonic_function_(		"BLI_unlock_thread", ctypes.c_void_p, [
	("C_type",		ctypes.c_int),] )

BLI_mutex_init = _rpythonic_function_(		"BLI_mutex_init", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(pthread_mutex_t)),] )

BLI_mutex_lock = _rpythonic_function_(		"BLI_mutex_lock", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(pthread_mutex_t)),] )

BLI_mutex_unlock = _rpythonic_function_(		"BLI_mutex_unlock", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(pthread_mutex_t)),] )

BLI_mutex_end = _rpythonic_function_(		"BLI_mutex_end", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(pthread_mutex_t)),] )

BLI_rw_mutex_init = _rpythonic_function_(		"BLI_rw_mutex_init", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(pthread_rwlock_t)),] )

BLI_rw_mutex_lock = _rpythonic_function_(		"BLI_rw_mutex_lock", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(pthread_rwlock_t)),
	("mode",		ctypes.c_int),] )

BLI_rw_mutex_unlock = _rpythonic_function_(		"BLI_rw_mutex_unlock", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(pthread_rwlock_t)),] )

BLI_rw_mutex_end = _rpythonic_function_(		"BLI_rw_mutex_end", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(pthread_rwlock_t)),] )

BLI_create_worker = _rpythonic_function_(		"BLI_create_worker", ctypes.POINTER(ThreadedWorker), [
	("do_thread",		ctypes.POINTER(ctypes.c_void_p)),
	("tot",		ctypes.c_int),
	("sleep_time",		ctypes.c_int),] )

BLI_end_worker = _rpythonic_function_(		"BLI_end_worker", ctypes.c_void_p, [
	("worker",		ctypes.POINTER(ThreadedWorker)),] )

BLI_destroy_worker = _rpythonic_function_(		"BLI_destroy_worker", ctypes.c_void_p, [
	("worker",		ctypes.POINTER(ThreadedWorker)),] )

BLI_insert_work = _rpythonic_function_(		"BLI_insert_work", ctypes.c_void_p, [
	("worker",		ctypes.POINTER(ThreadedWorker)),
	("param",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_thread_queue_init = _rpythonic_function_(		"BLI_thread_queue_init", ctypes.POINTER(ThreadQueue), [] )

BLI_thread_queue_free = _rpythonic_function_(		"BLI_thread_queue_free", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(ThreadQueue)),] )

BLI_thread_queue_push = _rpythonic_function_(		"BLI_thread_queue_push", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(ThreadQueue)),
	("work",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_thread_queue_pop = _rpythonic_function_(		"BLI_thread_queue_pop", ctypes.POINTER(ctypes.c_void_p), [
	("queue",		ctypes.POINTER(ThreadQueue)),] )

BLI_thread_queue_pop_timeout = _rpythonic_function_(		"BLI_thread_queue_pop_timeout", ctypes.POINTER(ctypes.c_void_p), [
	("queue",		ctypes.POINTER(ThreadQueue)),
	("ms",		ctypes.c_int),] )

BLI_thread_queue_size = _rpythonic_function_(		"BLI_thread_queue_size", ctypes.c_int, [
	("queue",		ctypes.POINTER(ThreadQueue)),] )

BLI_thread_queue_nowait = _rpythonic_function_(		"BLI_thread_queue_nowait", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(ThreadQueue)),] )

BLI_addfillvert = _rpythonic_function_(		"BLI_addfillvert", ctypes.POINTER(EditVert), [
	("vec",		ctypes.POINTER(ctypes.c_float)),] )

BLI_addfilledge = _rpythonic_function_(		"BLI_addfilledge", ctypes.POINTER(EditEdge), [
	("v1",		ctypes.POINTER(EditVert)),
	("v2",		ctypes.POINTER(EditVert)),] )

BLI_edgefill = _rpythonic_function_(		"BLI_edgefill", ctypes.c_int, [
	("mat_nr",		ctypes.c_short),] )

BLI_end_edgefill = _rpythonic_function_(		"BLI_end_edgefill", ctypes.c_void_p, [] )

BLI_setErrorCallBack = _rpythonic_function_(		"BLI_setErrorCallBack", ctypes.c_void_p, [
	("f",		ctypes.c_void_p),] )

f = _rpythonic_function_(		"f", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_char)),] )

BLI_setInterruptCallBack = _rpythonic_function_(		"BLI_setInterruptCallBack", ctypes.c_void_p, [
	("f",		ctypes.c_void_p),] )

BLI_insertlink = _rpythonic_function_(		"BLI_insertlink", ctypes.c_void_p, [
	("listbase",		ctypes.POINTER(ListBase)),
	("vprevlink",		ctypes.POINTER(ctypes.c_void_p)),
	("vnewlink",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_findlink = _rpythonic_function_(		"BLI_findlink", ctypes.POINTER(ctypes.c_void_p), [
	("listbase",		ctypes.POINTER(ListBase)),
	("number",		ctypes.c_int),] )

BLI_findindex = _rpythonic_function_(		"BLI_findindex", ctypes.c_int, [
	("listbase",		ctypes.POINTER(ListBase)),
	("vlink",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_findstringindex = _rpythonic_function_(		"BLI_findstringindex", ctypes.c_int, [
	("listbase",		ctypes.POINTER(ListBase)),
	("C_id",		ctypes.POINTER(ctypes.c_char)),
	("offset",		ctypes.c_int),] )

BLI_findstring = _rpythonic_function_(		"BLI_findstring", ctypes.POINTER(ctypes.c_void_p), [
	("listbase",		ctypes.POINTER(ListBase)),
	("C_id",		ctypes.POINTER(ctypes.c_char)),
	("offset",		ctypes.c_int),] )

BLI_findstring_ptr = _rpythonic_function_(		"BLI_findstring_ptr", ctypes.POINTER(ctypes.c_void_p), [
	("listbase",		ctypes.POINTER(ListBase)),
	("C_id",		ctypes.POINTER(ctypes.c_char)),
	("offset",		ctypes.c_int),] )

BLI_rfindstring = _rpythonic_function_(		"BLI_rfindstring", ctypes.POINTER(ctypes.c_void_p), [
	("listbase",		ctypes.POINTER(ListBase)),
	("C_id",		ctypes.POINTER(ctypes.c_char)),
	("offset",		ctypes.c_int),] )

BLI_rfindstring_ptr = _rpythonic_function_(		"BLI_rfindstring_ptr", ctypes.POINTER(ctypes.c_void_p), [
	("listbase",		ctypes.POINTER(ListBase)),
	("C_id",		ctypes.POINTER(ctypes.c_char)),
	("offset",		ctypes.c_int),] )

BLI_freelistN = _rpythonic_function_(		"BLI_freelistN", ctypes.c_void_p, [
	("listbase",		ctypes.POINTER(ListBase)),] )

BLI_addtail = _rpythonic_function_(		"BLI_addtail", ctypes.c_void_p, [
	("listbase",		ctypes.POINTER(ListBase)),
	("vlink",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_remlink = _rpythonic_function_(		"BLI_remlink", ctypes.c_void_p, [
	("listbase",		ctypes.POINTER(ListBase)),
	("vlink",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_remlink_safe = _rpythonic_function_(		"BLI_remlink_safe", ctypes.c_int, [
	("listbase",		ctypes.POINTER(ListBase)),
	("vlink",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_addhead = _rpythonic_function_(		"BLI_addhead", ctypes.c_void_p, [
	("listbase",		ctypes.POINTER(ListBase)),
	("vlink",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_insertlinkbefore = _rpythonic_function_(		"BLI_insertlinkbefore", ctypes.c_void_p, [
	("listbase",		ctypes.POINTER(ListBase)),
	("vnextlink",		ctypes.POINTER(ctypes.c_void_p)),
	("vnewlink",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_insertlinkafter = _rpythonic_function_(		"BLI_insertlinkafter", ctypes.c_void_p, [
	("listbase",		ctypes.POINTER(ListBase)),
	("vprevlink",		ctypes.POINTER(ctypes.c_void_p)),
	("vnewlink",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_sortlist = _rpythonic_function_(		"BLI_sortlist", ctypes.c_void_p, [
	("listbase",		ctypes.POINTER(ListBase)),
	("cmp",		ctypes.c_void_p),] )

cmp = _rpythonic_function_(		"cmp", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_freelist = _rpythonic_function_(		"BLI_freelist", ctypes.c_void_p, [
	("listbase",		ctypes.POINTER(ListBase)),] )

BLI_countlist = _rpythonic_function_(		"BLI_countlist", ctypes.c_int, [
	("listbase",		ctypes.POINTER(ListBase)),] )

BLI_freelinkN = _rpythonic_function_(		"BLI_freelinkN", ctypes.c_void_p, [
	("listbase",		ctypes.POINTER(ListBase)),
	("vlink",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_movelisttolist = _rpythonic_function_(		"BLI_movelisttolist", ctypes.c_void_p, [
	("dst",		ctypes.POINTER(ListBase)),
	("src",		ctypes.POINTER(ListBase)),] )

BLI_duplicatelist = _rpythonic_function_(		"BLI_duplicatelist", ctypes.c_void_p, [
	("dst",		ctypes.POINTER(ListBase)),
	("src",		ctypes.POINTER(ListBase)),] )

BLI_genericNodeN = _rpythonic_function_(		"BLI_genericNodeN", ctypes.POINTER(LinkData), [("data",		ctypes.c_void_p)] )

BLI_strdup = _rpythonic_function_(		"BLI_strdup", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

BLI_strdupn = _rpythonic_function_(		"BLI_strdupn", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_uint),] )

BLI_strdupcat = _rpythonic_function_(		"BLI_strdupcat", ctypes.POINTER(ctypes.c_char), [
	("str1",		ctypes.POINTER(ctypes.c_char)),
	("str2",		ctypes.POINTER(ctypes.c_char)),] )

BLI_strncpy = _rpythonic_function_(		"BLI_strncpy", ctypes.POINTER(ctypes.c_char), [
	("dst",		ctypes.POINTER(ctypes.c_char)),
	("src",		ctypes.POINTER(ctypes.c_char)),
	("maxncpy",		ctypes.c_uint),] )

BLI_getQuotedStr = _rpythonic_function_(		"BLI_getQuotedStr", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("prefix",		ctypes.POINTER(ctypes.c_char)),] )

BLI_replacestr = _rpythonic_function_(		"BLI_replacestr", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("oldText",		ctypes.POINTER(ctypes.c_char)),
	("newText",		ctypes.POINTER(ctypes.c_char)),] )

BLI_snprintf = _rpythonic_function_(		"BLI_snprintf", ctypes.c_uint, [
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_uint),
	("format",		ctypes.POINTER(ctypes.c_char)),] )

BLI_sprintfN = _rpythonic_function_(		"BLI_sprintfN", ctypes.POINTER(ctypes.c_char), [
	("format",		ctypes.POINTER(ctypes.c_char)),] )

BLI_strescape = _rpythonic_function_(		"BLI_strescape", ctypes.c_uint, [
	("dst",		ctypes.POINTER(ctypes.c_char)),
	("src",		ctypes.POINTER(ctypes.c_char)),
	("maxlen",		ctypes.c_uint),] )

BLI_strcaseeq = _rpythonic_function_(		"BLI_strcaseeq", ctypes.c_int, [
	("a",		ctypes.POINTER(ctypes.c_char)),
	("b",		ctypes.POINTER(ctypes.c_char)),] )

BLI_strcasestr = _rpythonic_function_(		"BLI_strcasestr", ctypes.POINTER(ctypes.c_char), [
	("s",		ctypes.POINTER(ctypes.c_char)),
	("find",		ctypes.POINTER(ctypes.c_char)),] )

BLI_strcasecmp = _rpythonic_function_(		"BLI_strcasecmp", ctypes.c_int, [
	("s1",		ctypes.POINTER(ctypes.c_char)),
	("s2",		ctypes.POINTER(ctypes.c_char)),] )

BLI_strncasecmp = _rpythonic_function_(		"BLI_strncasecmp", ctypes.c_int, [
	("s1",		ctypes.POINTER(ctypes.c_char)),
	("s2",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_uint),] )

BLI_natstrcmp = _rpythonic_function_(		"BLI_natstrcmp", ctypes.c_int, [
	("s1",		ctypes.POINTER(ctypes.c_char)),
	("s2",		ctypes.POINTER(ctypes.c_char)),] )

BLI_strnlen = _rpythonic_function_(		"BLI_strnlen", ctypes.c_uint, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("maxlen",		ctypes.c_uint),] )

BLI_timestr = _rpythonic_function_(		"BLI_timestr", ctypes.c_void_p, [
	("_time",		ctypes.c_double),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

BLI_utf8_invalid_byte = _rpythonic_function_(		"BLI_utf8_invalid_byte", ctypes.c_int, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),] )

BLI_utf8_invalid_strip = _rpythonic_function_(		"BLI_utf8_invalid_strip", ctypes.c_int, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),] )

BLI_ascii_strtolower = _rpythonic_function_(		"BLI_ascii_strtolower", ctypes.c_void_p, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

BLI_ascii_strtoupper = _rpythonic_function_(		"BLI_ascii_strtoupper", ctypes.c_void_p, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

BLI_getDefaultDocumentFolder = _rpythonic_function_(		"BLI_getDefaultDocumentFolder", ctypes.POINTER(ctypes.c_char), [] )

BLI_get_folder = _rpythonic_function_(		"BLI_get_folder", ctypes.POINTER(ctypes.c_char), [
	("folder_id",		ctypes.c_int),
	("subfolder",		ctypes.POINTER(ctypes.c_char)),] )

BLI_get_folder_create = _rpythonic_function_(		"BLI_get_folder_create", ctypes.POINTER(ctypes.c_char), [
	("folder_id",		ctypes.c_int),
	("subfolder",		ctypes.POINTER(ctypes.c_char)),] )

BLI_get_user_folder_notest = _rpythonic_function_(		"BLI_get_user_folder_notest", ctypes.POINTER(ctypes.c_char), [
	("folder_id",		ctypes.c_int),
	("subfolder",		ctypes.POINTER(ctypes.c_char)),] )

BLI_get_folder_version = _rpythonic_function_(		"BLI_get_folder_version", ctypes.POINTER(ctypes.c_char), [
	("C_id",		ctypes.c_int),
	("ver",		ctypes.c_int),
	("do_check",		ctypes.c_int),] )

BLI_setenv = _rpythonic_function_(		"BLI_setenv", ctypes.c_void_p, [
	("env",		ctypes.POINTER(ctypes.c_char)),
	("val",		ctypes.POINTER(ctypes.c_char)),] )

BLI_setenv_if_new = _rpythonic_function_(		"BLI_setenv_if_new", ctypes.c_void_p, [
	("env",		ctypes.POINTER(ctypes.c_char)),
	("val",		ctypes.POINTER(ctypes.c_char)),] )

BLI_make_file_string = _rpythonic_function_(		"BLI_make_file_string", ctypes.c_void_p, [
	("relabase",		ctypes.POINTER(ctypes.c_char)),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("dir",		ctypes.POINTER(ctypes.c_char)),
	("file",		ctypes.POINTER(ctypes.c_char)),] )

BLI_make_exist = _rpythonic_function_(		"BLI_make_exist", ctypes.c_void_p, [
	("dir",		ctypes.POINTER(ctypes.c_char)),] )

BLI_make_existing_file = _rpythonic_function_(		"BLI_make_existing_file", ctypes.c_void_p, [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

BLI_split_dirfile = _rpythonic_function_(		"BLI_split_dirfile", ctypes.c_void_p, [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("dir",		ctypes.POINTER(ctypes.c_char)),
	("file",		ctypes.POINTER(ctypes.c_char)),] )

BLI_join_dirfile = _rpythonic_function_(		"BLI_join_dirfile", ctypes.c_void_p, [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("maxlen",		ctypes.c_uint),
	("dir",		ctypes.POINTER(ctypes.c_char)),
	("file",		ctypes.POINTER(ctypes.c_char)),] )

BLI_path_basename = _rpythonic_function_(		"BLI_path_basename", ctypes.POINTER(ctypes.c_char), [
	("path",		ctypes.POINTER(ctypes.c_char)),] )

BKE_rebase_path = _rpythonic_function_(		"BKE_rebase_path", ctypes.c_int, [
	("abs",		ctypes.POINTER(ctypes.c_char)),
	("abs_len",		ctypes.c_uint),
	("rel",		ctypes.POINTER(ctypes.c_char)),
	("rel_len",		ctypes.c_uint),
	("base_dir",		ctypes.POINTER(ctypes.c_char)),
	("src_dir",		ctypes.POINTER(ctypes.c_char)),
	("dest_dir",		ctypes.POINTER(ctypes.c_char)),] )

BLI_last_slash = _rpythonic_function_(		"BLI_last_slash", ctypes.POINTER(ctypes.c_char), [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

BLI_add_slash = _rpythonic_function_(		"BLI_add_slash", ctypes.c_int, [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

BLI_del_slash = _rpythonic_function_(		"BLI_del_slash", ctypes.c_void_p, [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

BLI_first_slash = _rpythonic_function_(		"BLI_first_slash", ctypes.POINTER(ctypes.c_char), [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

BLI_getlastdir = _rpythonic_function_(		"BLI_getlastdir", ctypes.c_void_p, [
	("dir",		ctypes.POINTER(ctypes.c_char)),
	("last",		ctypes.POINTER(ctypes.c_char)),
	("maxlen",		ctypes.c_uint),] )

BLI_testextensie = _rpythonic_function_(		"BLI_testextensie", ctypes.c_int, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("ext",		ctypes.POINTER(ctypes.c_char)),] )

BLI_testextensie_array = _rpythonic_function_(		"BLI_testextensie_array", ctypes.c_int, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("ext_array",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

BLI_testextensie_glob = _rpythonic_function_(		"BLI_testextensie_glob", ctypes.c_int, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("ext_fnmatch",		ctypes.POINTER(ctypes.c_char)),] )

BLI_replace_extension = _rpythonic_function_(		"BLI_replace_extension", ctypes.c_int, [
	("path",		ctypes.POINTER(ctypes.c_char)),
	("maxlen",		ctypes.c_uint),
	("ext",		ctypes.POINTER(ctypes.c_char)),] )

BLI_uniquename = _rpythonic_function_(		"BLI_uniquename", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(ListBase)),
	("vlink",		ctypes.POINTER(ctypes.c_void_p)),
	("defname",		ctypes.c_char),
	("delim",		ctypes.c_char),
	("name_offs",		ctypes.c_short),
	("C_len",		ctypes.c_short),] )

BLI_uniquename_cb = _rpythonic_function_(		"BLI_uniquename_cb", ctypes.c_int, [
	("unique_check",		ctypes.c_void_p),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),
	("defname",		ctypes.c_char),
	("delim",		ctypes.c_char),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("name_len",		ctypes.c_short),] )

unique_check = _rpythonic_function_(		"unique_check", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

BLI_newname = _rpythonic_function_(		"BLI_newname", ctypes.c_void_p, [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("add",		ctypes.c_int),] )

BLI_stringdec = _rpythonic_function_(		"BLI_stringdec", ctypes.c_int, [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("head",		ctypes.POINTER(ctypes.c_char)),
	("start",		ctypes.POINTER(ctypes.c_char)),
	("numlen",		ctypes.POINTER(ctypes.c_ushort)),] )

BLI_stringenc = _rpythonic_function_(		"BLI_stringenc", ctypes.c_void_p, [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("head",		ctypes.POINTER(ctypes.c_char)),
	("tail",		ctypes.POINTER(ctypes.c_char)),
	("numlen",		ctypes.c_ushort),
	("pic",		ctypes.c_int),] )

BLI_split_name_num = _rpythonic_function_(		"BLI_split_name_num", ctypes.c_int, [
	("left",		ctypes.POINTER(ctypes.c_char)),
	("nr",		ctypes.POINTER(ctypes.c_int)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("delim",		ctypes.c_char),] )

BLI_splitdirstring = _rpythonic_function_(		"BLI_splitdirstring", ctypes.c_void_p, [
	("di",		ctypes.POINTER(ctypes.c_char)),
	("fi",		ctypes.POINTER(ctypes.c_char)),] )

BLI_clean = _rpythonic_function_(		"BLI_clean", ctypes.c_void_p, [
	("path",		ctypes.POINTER(ctypes.c_char)),] )

BLI_cleanup_file = _rpythonic_function_(		"BLI_cleanup_file", ctypes.c_void_p, [
	("relabase",		ctypes.POINTER(ctypes.c_char)),
	("dir",		ctypes.POINTER(ctypes.c_char)),] )

BLI_cleanup_dir = _rpythonic_function_(		"BLI_cleanup_dir", ctypes.c_void_p, [
	("relabase",		ctypes.POINTER(ctypes.c_char)),
	("dir",		ctypes.POINTER(ctypes.c_char)),] )

BLI_cleanup_path = _rpythonic_function_(		"BLI_cleanup_path", ctypes.c_void_p, [
	("relabase",		ctypes.POINTER(ctypes.c_char)),
	("dir",		ctypes.POINTER(ctypes.c_char)),] )

BLI_parent_dir = _rpythonic_function_(		"BLI_parent_dir", ctypes.c_int, [
	("path",		ctypes.POINTER(ctypes.c_char)),] )

BLI_has_parent = _rpythonic_function_(		"BLI_has_parent", ctypes.c_int, [
	("path",		ctypes.POINTER(ctypes.c_char)),] )

BLI_path_abs = _rpythonic_function_(		"BLI_path_abs", ctypes.c_int, [
	("path",		ctypes.POINTER(ctypes.c_char)),
	("basepath",		ctypes.POINTER(ctypes.c_char)),] )

BLI_path_frame = _rpythonic_function_(		"BLI_path_frame", ctypes.c_int, [
	("path",		ctypes.POINTER(ctypes.c_char)),
	("frame",		ctypes.c_int),
	("digits",		ctypes.c_int),] )

BLI_path_frame_range = _rpythonic_function_(		"BLI_path_frame_range", ctypes.c_int, [
	("path",		ctypes.POINTER(ctypes.c_char)),
	("sta",		ctypes.c_int),
	("end",		ctypes.c_int),
	("digits",		ctypes.c_int),] )

BLI_path_cwd = _rpythonic_function_(		"BLI_path_cwd", ctypes.c_int, [
	("path",		ctypes.POINTER(ctypes.c_char)),] )

BLI_path_rel = _rpythonic_function_(		"BLI_path_rel", ctypes.c_void_p, [
	("file",		ctypes.POINTER(ctypes.c_char)),
	("relfile",		ctypes.POINTER(ctypes.c_char)),] )

BLI_char_switch = _rpythonic_function_(		"BLI_char_switch", ctypes.c_void_p, [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("from",		ctypes.c_char),
	("to",		ctypes.c_char),] )

BLI_where_am_i = _rpythonic_function_(		"BLI_where_am_i", ctypes.c_void_p, [
	("fullname",		ctypes.POINTER(ctypes.c_char)),
	("maxlen",		ctypes.c_uint),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

BLI_where_is_temp = _rpythonic_function_(		"BLI_where_is_temp", ctypes.c_void_p, [
	("fullname",		ctypes.POINTER(ctypes.c_char)),
	("maxlen",		ctypes.c_uint),
	("usertemp",		ctypes.c_int),] )

BLI_adddirstrings = _rpythonic_function_(		"BLI_adddirstrings", ctypes.c_void_p, [] )

BLI_builddir = _rpythonic_function_(		"BLI_builddir", ctypes.c_void_p, [
	("dirname",		ctypes.POINTER(ctypes.c_char)),
	("relname",		ctypes.POINTER(ctypes.c_char)),] )

BLI_compare = _rpythonic_function_(		"BLI_compare", ctypes.c_int, [
	("entry1",		ctypes.POINTER(direntry)),
	("entry2",		ctypes.POINTER(direntry)),] )

BLI_filesize = _rpythonic_function_(		"BLI_filesize", ctypes.c_uint, [
	("file",		ctypes.c_int),] )

BLI_filepathsize = _rpythonic_function_(		"BLI_filepathsize", ctypes.c_uint, [
	("path",		ctypes.POINTER(ctypes.c_char)),] )

BLI_diskfree = _rpythonic_function_(		"BLI_diskfree", ctypes.c_double, [
	("dir",		ctypes.POINTER(ctypes.c_char)),] )

BLI_getwdN = _rpythonic_function_(		"BLI_getwdN", ctypes.POINTER(ctypes.c_char), [
	("dir",		ctypes.POINTER(ctypes.c_char)),
	("maxncpy",		ctypes.c_int),] )

BLI_getdir = _rpythonic_function_(		"BLI_getdir", ctypes.c_uint, [
	("dirname",		ctypes.POINTER(ctypes.c_char)),
	("filelist",		ctypes.POINTER(ctypes.POINTER(direntry))),] )

BLI_exist = _rpythonic_function_(		"BLI_exist", ctypes.c_int, [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

BLI_is_dir = _rpythonic_function_(		"BLI_is_dir", ctypes.c_int, [
	("file",		ctypes.POINTER(ctypes.c_char)),] )

BLI_read_file_as_lines = _rpythonic_function_(		"BLI_read_file_as_lines", ctypes.POINTER(LinkNode), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

BLI_free_file_lines = _rpythonic_function_(		"BLI_free_file_lines", ctypes.c_void_p, [
	("lines",		ctypes.POINTER(LinkNode)),] )

BLI_file_older = _rpythonic_function_(		"BLI_file_older", ctypes.c_int, [
	("file1",		ctypes.POINTER(ctypes.c_char)),
	("file2",		ctypes.POINTER(ctypes.c_char)),] )

BLI_recurdir_fileops = _rpythonic_function_(		"BLI_recurdir_fileops", ctypes.c_void_p, [
	("dirname",		ctypes.POINTER(ctypes.c_char)),] )

BLI_link = _rpythonic_function_(		"BLI_link", ctypes.c_int, [
	("file",		ctypes.POINTER(ctypes.c_char)),
	("to",		ctypes.POINTER(ctypes.c_char)),] )

BLI_is_writable = _rpythonic_function_(		"BLI_is_writable", ctypes.c_int, [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

BLI_exists = _rpythonic_function_(		"BLI_exists", ctypes.c_int, [
	("file",		ctypes.POINTER(ctypes.c_char)),] )

BLI_copy_fileops = _rpythonic_function_(		"BLI_copy_fileops", ctypes.c_int, [
	("file",		ctypes.POINTER(ctypes.c_char)),
	("to",		ctypes.POINTER(ctypes.c_char)),] )

BLI_rename = _rpythonic_function_(		"BLI_rename", ctypes.c_int, [
	("from",		ctypes.POINTER(ctypes.c_char)),
	("to",		ctypes.POINTER(ctypes.c_char)),] )

BLI_gzip = _rpythonic_function_(		"BLI_gzip", ctypes.c_int, [
	("from",		ctypes.POINTER(ctypes.c_char)),
	("to",		ctypes.POINTER(ctypes.c_char)),] )

BLI_delete = _rpythonic_function_(		"BLI_delete", ctypes.c_int, [
	("file",		ctypes.POINTER(ctypes.c_char)),
	("dir",		ctypes.c_int),
	("recursive",		ctypes.c_int),] )

BLI_move = _rpythonic_function_(		"BLI_move", ctypes.c_int, [
	("file",		ctypes.POINTER(ctypes.c_char)),
	("to",		ctypes.POINTER(ctypes.c_char)),] )

BLI_touch = _rpythonic_function_(		"BLI_touch", ctypes.c_int, [
	("file",		ctypes.POINTER(ctypes.c_char)),] )

BLI_setCmdCallBack = _rpythonic_function_(		"BLI_setCmdCallBack", ctypes.c_void_p, [
	("f",		ctypes.c_void_p),] )

BLI_rcti_is_empty = _rpythonic_function_(		"BLI_rcti_is_empty", ctypes.c_int, [
	("rect",		ctypes.POINTER(rcti)),] )

BLI_rctf_is_empty = _rpythonic_function_(		"BLI_rctf_is_empty", ctypes.c_int, [
	("rect",		ctypes.POINTER(rctf)),] )

BLI_init_rctf = _rpythonic_function_(		"BLI_init_rctf", ctypes.c_void_p, [
	("rect",		ctypes.POINTER(rctf)),
	("xmin",		ctypes.c_float),
	("xmax",		ctypes.c_float),
	("ymin",		ctypes.c_float),
	("ymax",		ctypes.c_float),] )

BLI_init_rcti = _rpythonic_function_(		"BLI_init_rcti", ctypes.c_void_p, [
	("rect",		ctypes.POINTER(rcti)),
	("xmin",		ctypes.c_int),
	("xmax",		ctypes.c_int),
	("ymin",		ctypes.c_int),
	("ymax",		ctypes.c_int),] )

BLI_translate_rctf = _rpythonic_function_(		"BLI_translate_rctf", ctypes.c_void_p, [
	("rect",		ctypes.POINTER(rctf)),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),] )

BLI_translate_rcti = _rpythonic_function_(		"BLI_translate_rcti", ctypes.c_void_p, [
	("rect",		ctypes.POINTER(rcti)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

BLI_resize_rcti = _rpythonic_function_(		"BLI_resize_rcti", ctypes.c_void_p, [
	("rect",		ctypes.POINTER(rcti)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

BLI_resize_rctf = _rpythonic_function_(		"BLI_resize_rctf", ctypes.c_void_p, [
	("rect",		ctypes.POINTER(rctf)),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),] )

BLI_in_rcti = _rpythonic_function_(		"BLI_in_rcti", ctypes.c_int, [
	("rect",		ctypes.POINTER(rcti)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

BLI_in_rctf = _rpythonic_function_(		"BLI_in_rctf", ctypes.c_int, [
	("rect",		ctypes.POINTER(rctf)),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),] )

BLI_isect_rctf = _rpythonic_function_(		"BLI_isect_rctf", ctypes.c_int, [
	("src1",		ctypes.POINTER(rctf)),
	("src2",		ctypes.POINTER(rctf)),
	("dest",		ctypes.POINTER(rctf)),] )

BLI_isect_rcti = _rpythonic_function_(		"BLI_isect_rcti", ctypes.c_int, [
	("src1",		ctypes.POINTER(rcti)),
	("src2",		ctypes.POINTER(rcti)),
	("dest",		ctypes.POINTER(rcti)),] )

BLI_union_rctf = _rpythonic_function_(		"BLI_union_rctf", ctypes.c_void_p, [
	("rcta",		ctypes.POINTER(rctf)),
	("rctb",		ctypes.POINTER(rctf)),] )

BLI_union_rcti = _rpythonic_function_(		"BLI_union_rcti", ctypes.c_void_p, [
	("rcti1",		ctypes.POINTER(rcti)),
	("rcti2",		ctypes.POINTER(rcti)),] )

BLI_copy_rcti_rctf = _rpythonic_function_(		"BLI_copy_rcti_rctf", ctypes.c_void_p, [
	("tar",		ctypes.POINTER(rcti)),
	("src",		ctypes.POINTER(rctf)),] )

print_rctf = _rpythonic_function_(		"print_rctf", ctypes.c_void_p, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("rect",		ctypes.POINTER(rctf)),] )

print_rcti = _rpythonic_function_(		"print_rcti", ctypes.c_void_p, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("rect",		ctypes.POINTER(rcti)),] )

BLI_hnoise = _rpythonic_function_(		"BLI_hnoise", ctypes.c_float, [
	("noisesize",		ctypes.c_float),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

BLI_hnoisep = _rpythonic_function_(		"BLI_hnoisep", ctypes.c_float, [
	("noisesize",		ctypes.c_float),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

BLI_turbulence = _rpythonic_function_(		"BLI_turbulence", ctypes.c_float, [
	("noisesize",		ctypes.c_float),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),
	("nr",		ctypes.c_int),] )

BLI_turbulence1 = _rpythonic_function_(		"BLI_turbulence1", ctypes.c_float, [
	("noisesize",		ctypes.c_float),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),
	("nr",		ctypes.c_int),] )

BLI_gNoise = _rpythonic_function_(		"BLI_gNoise", ctypes.c_float, [
	("noisesize",		ctypes.c_float),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),
	("hard",		ctypes.c_int),
	("noisebasis",		ctypes.c_int),] )

BLI_gTurbulence = _rpythonic_function_(		"BLI_gTurbulence", ctypes.c_float, [
	("noisesize",		ctypes.c_float),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),
	("oct",		ctypes.c_int),
	("hard",		ctypes.c_int),
	("noisebasis",		ctypes.c_int),] )

mg_fBm = _rpythonic_function_(		"mg_fBm", ctypes.c_float, [
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),
	("H",		ctypes.c_float),
	("lacunarity",		ctypes.c_float),
	("octaves",		ctypes.c_float),
	("noisebasis",		ctypes.c_int),] )

mg_MultiFractal = _rpythonic_function_(		"mg_MultiFractal", ctypes.c_float, [
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),
	("H",		ctypes.c_float),
	("lacunarity",		ctypes.c_float),
	("octaves",		ctypes.c_float),
	("noisebasis",		ctypes.c_int),] )

mg_VLNoise = _rpythonic_function_(		"mg_VLNoise", ctypes.c_float, [
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),
	("distortion",		ctypes.c_float),
	("nbas1",		ctypes.c_int),
	("nbas2",		ctypes.c_int),] )

mg_HeteroTerrain = _rpythonic_function_(		"mg_HeteroTerrain", ctypes.c_float, [
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),
	("H",		ctypes.c_float),
	("lacunarity",		ctypes.c_float),
	("octaves",		ctypes.c_float),
	("offset",		ctypes.c_float),
	("noisebasis",		ctypes.c_int),] )

mg_HybridMultiFractal = _rpythonic_function_(		"mg_HybridMultiFractal", ctypes.c_float, [
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),
	("H",		ctypes.c_float),
	("lacunarity",		ctypes.c_float),
	("octaves",		ctypes.c_float),
	("offset",		ctypes.c_float),
	("gain",		ctypes.c_float),
	("noisebasis",		ctypes.c_int),] )

mg_RidgedMultiFractal = _rpythonic_function_(		"mg_RidgedMultiFractal", ctypes.c_float, [
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),
	("H",		ctypes.c_float),
	("lacunarity",		ctypes.c_float),
	("octaves",		ctypes.c_float),
	("offset",		ctypes.c_float),
	("gain",		ctypes.c_float),
	("noisebasis",		ctypes.c_int),] )

voronoi = _rpythonic_function_(		"voronoi", ctypes.c_void_p, [
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),
	("da",		ctypes.POINTER(ctypes.c_float)),
	("pa",		ctypes.POINTER(ctypes.c_float)),
	("me",		ctypes.c_float),
	("dtype",		ctypes.c_int),] )

cellNoise = _rpythonic_function_(		"cellNoise", ctypes.c_float, [
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

cellNoiseV = _rpythonic_function_(		"cellNoiseV", ctypes.c_void_p, [
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),
	("ca",		ctypes.POINTER(ctypes.c_float)),] )

BLI_mempool_create = _rpythonic_function_(		"BLI_mempool_create", ctypes.POINTER(BLI_mempool), [
	("esize",		ctypes.c_int),
	("tote",		ctypes.c_int),
	("pchunk",		ctypes.c_int),
	("use_sysmalloc",		ctypes.c_int),] )

BLI_mempool_alloc = _rpythonic_function_(		"BLI_mempool_alloc", ctypes.POINTER(ctypes.c_void_p), [
	("pool",		ctypes.POINTER(BLI_mempool)),] )

BLI_mempool_calloc = _rpythonic_function_(		"BLI_mempool_calloc", ctypes.POINTER(ctypes.c_void_p), [
	("pool",		ctypes.POINTER(BLI_mempool)),] )

BLI_mempool_free = _rpythonic_function_(		"BLI_mempool_free", ctypes.c_void_p, [
	("pool",		ctypes.POINTER(BLI_mempool)),
	("addr",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_mempool_destroy = _rpythonic_function_(		"BLI_mempool_destroy", ctypes.c_void_p, [
	("pool",		ctypes.POINTER(BLI_mempool)),] )

GHashHashFP = _rpythonic_function_(		"GHashHashFP", ctypes.c_uint, [("key",		ctypes.c_void_p)] )

GHashCmpFP = _rpythonic_function_(		"GHashCmpFP", ctypes.c_int, [
	("a",		ctypes.POINTER(ctypes.c_void_p)),
	("b",		ctypes.POINTER(ctypes.c_void_p)),] )

GHashKeyFreeFP = _rpythonic_function_(		"GHashKeyFreeFP", ctypes.c_void_p, [("key",		ctypes.c_void_p)] )

GHashValFreeFP = _rpythonic_function_(		"GHashValFreeFP", ctypes.c_void_p, [("val",		ctypes.c_void_p)] )

BLI_ghash_new = _rpythonic_function_(		"BLI_ghash_new", ctypes.POINTER(GHash), [
	("hashfp",		ctypes.CFUNCTYPE(ctypes.c_uint, )),
	("cmpfp",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("info",		ctypes.POINTER(ctypes.c_char)),] )

BLI_ghash_free = _rpythonic_function_(		"BLI_ghash_free", ctypes.c_void_p, [
	("gh",		ctypes.POINTER(GHash)),
	("keyfreefp",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("valfreefp",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

BLI_ghash_insert = _rpythonic_function_(		"BLI_ghash_insert", ctypes.c_void_p, [
	("gh",		ctypes.POINTER(GHash)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),
	("val",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_ghash_lookup = _rpythonic_function_(		"BLI_ghash_lookup", ctypes.POINTER(ctypes.c_void_p), [
	("gh",		ctypes.POINTER(GHash)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_ghash_remove = _rpythonic_function_(		"BLI_ghash_remove", ctypes.c_int, [
	("gh",		ctypes.POINTER(GHash)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),
	("keyfreefp",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("valfreefp",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

BLI_ghash_haskey = _rpythonic_function_(		"BLI_ghash_haskey", ctypes.c_int, [
	("gh",		ctypes.POINTER(GHash)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_ghash_size = _rpythonic_function_(		"BLI_ghash_size", ctypes.c_int, [
	("gh",		ctypes.POINTER(GHash)),] )

BLI_ghashIterator_new = _rpythonic_function_(		"BLI_ghashIterator_new", ctypes.POINTER(GHashIterator), [
	("gh",		ctypes.POINTER(GHash)),] )

BLI_ghashIterator_init = _rpythonic_function_(		"BLI_ghashIterator_init", ctypes.c_void_p, [
	("ghi",		ctypes.POINTER(GHashIterator)),
	("gh",		ctypes.POINTER(GHash)),] )

BLI_ghashIterator_free = _rpythonic_function_(		"BLI_ghashIterator_free", ctypes.c_void_p, [
	("ghi",		ctypes.POINTER(GHashIterator)),] )

BLI_ghashIterator_getKey = _rpythonic_function_(		"BLI_ghashIterator_getKey", ctypes.POINTER(ctypes.c_void_p), [
	("ghi",		ctypes.POINTER(GHashIterator)),] )

BLI_ghashIterator_getValue = _rpythonic_function_(		"BLI_ghashIterator_getValue", ctypes.POINTER(ctypes.c_void_p), [
	("ghi",		ctypes.POINTER(GHashIterator)),] )

BLI_ghashIterator_step = _rpythonic_function_(		"BLI_ghashIterator_step", ctypes.c_void_p, [
	("ghi",		ctypes.POINTER(GHashIterator)),] )

BLI_ghashIterator_isDone = _rpythonic_function_(		"BLI_ghashIterator_isDone", ctypes.c_int, [
	("ghi",		ctypes.POINTER(GHashIterator)),] )

BLI_ghashutil_ptrhash = _rpythonic_function_(		"BLI_ghashutil_ptrhash", ctypes.c_uint, [("key",		ctypes.c_void_p)] )

BLI_ghashutil_ptrcmp = _rpythonic_function_(		"BLI_ghashutil_ptrcmp", ctypes.c_int, [
	("a",		ctypes.POINTER(ctypes.c_void_p)),
	("b",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_ghashutil_strhash = _rpythonic_function_(		"BLI_ghashutil_strhash", ctypes.c_uint, [("key",		ctypes.c_void_p)] )

BLI_ghashutil_strcmp = _rpythonic_function_(		"BLI_ghashutil_strcmp", ctypes.c_int, [
	("a",		ctypes.POINTER(ctypes.c_void_p)),
	("b",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_ghashutil_inthash = _rpythonic_function_(		"BLI_ghashutil_inthash", ctypes.c_uint, [("ptr",		ctypes.c_void_p)] )

BLI_ghashutil_intcmp = _rpythonic_function_(		"BLI_ghashutil_intcmp", ctypes.c_int, [
	("a",		ctypes.POINTER(ctypes.c_void_p)),
	("b",		ctypes.POINTER(ctypes.c_void_p)),] )

BKE_read_file = _rpythonic_function_(		"BKE_read_file", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("filepath",		ctypes.POINTER(ctypes.c_char)),
	("reports",		ctypes.POINTER(ReportList)),] )

BKE_read_file_from_memory = _rpythonic_function_(		"BKE_read_file_from_memory", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("filebuf",		ctypes.POINTER(ctypes.c_char)),
	("filelength",		ctypes.c_int),
	("reports",		ctypes.POINTER(ReportList)),] )

BKE_read_file_from_memfile = _rpythonic_function_(		"BKE_read_file_from_memfile", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("memfile",		ctypes.POINTER(MemFile)),
	("reports",		ctypes.POINTER(ReportList)),] )

free_blender = _rpythonic_function_(		"free_blender", ctypes.c_void_p, [] )

initglobals = _rpythonic_function_(		"initglobals", ctypes.c_void_p, [] )

BKE_userdef_free = _rpythonic_function_(		"BKE_userdef_free", ctypes.c_void_p, [] )

set_blender_test_break_cb = _rpythonic_function_(		"set_blender_test_break_cb", ctypes.c_void_p, [
	("func",		ctypes.c_void_p),] )

blender_test_break = _rpythonic_function_(		"blender_test_break", ctypes.c_int, [] )

BKE_write_undo = _rpythonic_function_(		"BKE_write_undo", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

BKE_undo_step = _rpythonic_function_(		"BKE_undo_step", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("step",		ctypes.c_int),] )

BKE_undo_name = _rpythonic_function_(		"BKE_undo_name", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

BKE_undo_valid = _rpythonic_function_(		"BKE_undo_valid", ctypes.c_int, [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

BKE_reset_undo = _rpythonic_function_(		"BKE_reset_undo", ctypes.c_void_p, [] )

BKE_undo_menu_string = _rpythonic_function_(		"BKE_undo_menu_string", ctypes.POINTER(ctypes.c_char), [] )

BKE_undo_number = _rpythonic_function_(		"BKE_undo_number", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("nr",		ctypes.c_int),] )

BKE_undo_get_name = _rpythonic_function_(		"BKE_undo_get_name", ctypes.POINTER(ctypes.c_char), [
	("nr",		ctypes.c_int),
	("active",		ctypes.POINTER(ctypes.c_int)),] )

BKE_undo_save_quit = _rpythonic_function_(		"BKE_undo_save_quit", ctypes.c_void_p, [] )

BKE_undo_get_main = _rpythonic_function_(		"BKE_undo_get_main", ctypes.POINTER(Main), [
	("scene",		ctypes.POINTER(ctypes.POINTER(Scene))),] )

EnumPropertyItemFunc = _rpythonic_function_(		"EnumPropertyItemFunc", ctypes.POINTER(EnumPropertyItem), [
	("C",		ctypes.POINTER(bContext)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("prop",		ctypes.POINTER(PropertyRNA)),
	("free",		ctypes.POINTER(ctypes.c_int)),] )

CallFunc = _rpythonic_function_(		"CallFunc", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("reports",		ctypes.POINTER(ReportList)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("parms",		ctypes.POINTER(ParameterList)),] )

StructValidateFunc = _rpythonic_function_(		"StructValidateFunc", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("have_function",		ctypes.POINTER(ctypes.c_int)),] )

StructCallbackFunc = _rpythonic_function_(		"StructCallbackFunc", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("func",		ctypes.POINTER(FunctionRNA)),
	("C_list",		ctypes.POINTER(ParameterList)),] )

StructFreeFunc = _rpythonic_function_(		"StructFreeFunc", ctypes.c_void_p, [("data",		ctypes.c_void_p)] )

StructRegisterFunc = _rpythonic_function_(		"StructRegisterFunc", ctypes.POINTER(StructRNA), [
	("bmain",		ctypes.POINTER(Main)),
	("reports",		ctypes.POINTER(ReportList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("identifier",		ctypes.POINTER(ctypes.c_char)),
	("validate",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(PointerRNA),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_int),)),
	("call",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(bContext),ctypes.POINTER(PointerRNA),ctypes.POINTER(FunctionRNA),ctypes.POINTER(ParameterList),)),
	("free",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

StructUnregisterFunc = _rpythonic_function_(		"StructUnregisterFunc", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("C_type",		ctypes.POINTER(StructRNA)),] )

StructInstanceFunc = _rpythonic_function_(		"StructInstanceFunc", ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)), [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

bContextDataCallback = _rpythonic_function_(		"bContextDataCallback", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("member",		ctypes.POINTER(ctypes.c_char)),
	("result",		ctypes.POINTER(bContextDataResult)),] )

CTX_create = _rpythonic_function_(		"CTX_create", ctypes.POINTER(bContext), [] )

CTX_free = _rpythonic_function_(		"CTX_free", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

CTX_copy = _rpythonic_function_(		"CTX_copy", ctypes.POINTER(bContext), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_store_add = _rpythonic_function_(		"CTX_store_add", ctypes.POINTER(bContextStore), [
	("contexts",		ctypes.POINTER(ListBase)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CTX_store_set = _rpythonic_function_(		"CTX_store_set", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("store",		ctypes.POINTER(bContextStore)),] )

CTX_store_copy = _rpythonic_function_(		"CTX_store_copy", ctypes.POINTER(bContextStore), [
	("store",		ctypes.POINTER(bContextStore)),] )

CTX_store_free = _rpythonic_function_(		"CTX_store_free", ctypes.c_void_p, [
	("store",		ctypes.POINTER(bContextStore)),] )

CTX_store_free_list = _rpythonic_function_(		"CTX_store_free_list", ctypes.c_void_p, [
	("contexts",		ctypes.POINTER(ListBase)),] )

CTX_py_init_get = _rpythonic_function_(		"CTX_py_init_get", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

CTX_py_init_set = _rpythonic_function_(		"CTX_py_init_set", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("value",		ctypes.c_int),] )

CTX_py_dict_get = _rpythonic_function_(		"CTX_py_dict_get", ctypes.POINTER(ctypes.c_void_p), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_py_dict_set = _rpythonic_function_(		"CTX_py_dict_set", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("value",		ctypes.POINTER(ctypes.c_void_p)),] )

CTX_wm_manager = _rpythonic_function_(		"CTX_wm_manager", ctypes.POINTER(wmWindowManager), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_window = _rpythonic_function_(		"CTX_wm_window", ctypes.POINTER(wmWindow), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_screen = _rpythonic_function_(		"CTX_wm_screen", ctypes.POINTER(bScreen), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_area = _rpythonic_function_(		"CTX_wm_area", ctypes.POINTER(ScrArea), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_space_data = _rpythonic_function_(		"CTX_wm_space_data", ctypes.POINTER(SpaceLink), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_region = _rpythonic_function_(		"CTX_wm_region", ctypes.POINTER(ARegion), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_region_data = _rpythonic_function_(		"CTX_wm_region_data", ctypes.POINTER(ctypes.c_void_p), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_menu = _rpythonic_function_(		"CTX_wm_menu", ctypes.POINTER(ARegion), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_reports = _rpythonic_function_(		"CTX_wm_reports", ctypes.POINTER(ReportList), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_view3d = _rpythonic_function_(		"CTX_wm_view3d", ctypes.POINTER(View3D), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_region_view3d = _rpythonic_function_(		"CTX_wm_region_view3d", ctypes.POINTER(RegionView3D), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_space_text = _rpythonic_function_(		"CTX_wm_space_text", ctypes.POINTER(SpaceText), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_space_image = _rpythonic_function_(		"CTX_wm_space_image", ctypes.POINTER(SpaceImage), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_space_console = _rpythonic_function_(		"CTX_wm_space_console", ctypes.POINTER(SpaceConsole), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_space_buts = _rpythonic_function_(		"CTX_wm_space_buts", ctypes.POINTER(SpaceButs), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_space_file = _rpythonic_function_(		"CTX_wm_space_file", ctypes.POINTER(SpaceFile), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_space_seq = _rpythonic_function_(		"CTX_wm_space_seq", ctypes.POINTER(SpaceSeq), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_space_outliner = _rpythonic_function_(		"CTX_wm_space_outliner", ctypes.POINTER(SpaceOops), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_space_nla = _rpythonic_function_(		"CTX_wm_space_nla", ctypes.POINTER(SpaceNla), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_space_time = _rpythonic_function_(		"CTX_wm_space_time", ctypes.POINTER(SpaceTime), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_space_node = _rpythonic_function_(		"CTX_wm_space_node", ctypes.POINTER(SpaceNode), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_space_logic = _rpythonic_function_(		"CTX_wm_space_logic", ctypes.POINTER(SpaceLogic), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_space_graph = _rpythonic_function_(		"CTX_wm_space_graph", ctypes.POINTER(SpaceIpo), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_space_action = _rpythonic_function_(		"CTX_wm_space_action", ctypes.POINTER(SpaceAction), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_space_info = _rpythonic_function_(		"CTX_wm_space_info", ctypes.POINTER(SpaceInfo), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_space_userpref = _rpythonic_function_(		"CTX_wm_space_userpref", ctypes.POINTER(SpaceUserPref), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_manager_set = _rpythonic_function_(		"CTX_wm_manager_set", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("wm",		ctypes.POINTER(wmWindowManager)),] )

CTX_wm_window_set = _rpythonic_function_(		"CTX_wm_window_set", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("win",		ctypes.POINTER(wmWindow)),] )

CTX_wm_screen_set = _rpythonic_function_(		"CTX_wm_screen_set", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("screen",		ctypes.POINTER(bScreen)),] )

CTX_wm_area_set = _rpythonic_function_(		"CTX_wm_area_set", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("sa",		ctypes.POINTER(ScrArea)),] )

CTX_wm_region_set = _rpythonic_function_(		"CTX_wm_region_set", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("region",		ctypes.POINTER(ARegion)),] )

CTX_wm_menu_set = _rpythonic_function_(		"CTX_wm_menu_set", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("menu",		ctypes.POINTER(ARegion)),] )

CTX_wm_operator_poll_msg_get = _rpythonic_function_(		"CTX_wm_operator_poll_msg_get", ctypes.POINTER(ctypes.c_char), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_operator_poll_msg_set = _rpythonic_function_(		"CTX_wm_operator_poll_msg_set", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("msg",		ctypes.POINTER(ctypes.c_char)),] )

CTX_data_pointer_get = _rpythonic_function_(		"CTX_data_pointer_get", PointerRNA, [
	("C",		ctypes.POINTER(bContext)),
	("member",		ctypes.POINTER(ctypes.c_char)),] )

CTX_data_pointer_get_type = _rpythonic_function_(		"CTX_data_pointer_get_type", PointerRNA, [
	("C",		ctypes.POINTER(bContext)),
	("member",		ctypes.POINTER(ctypes.c_char)),
	("C_type",		ctypes.POINTER(StructRNA)),] )

CTX_data_collection_get = _rpythonic_function_(		"CTX_data_collection_get", ListBase, [
	("C",		ctypes.POINTER(bContext)),
	("member",		ctypes.POINTER(ctypes.c_char)),] )

CTX_data_dir_get = _rpythonic_function_(		"CTX_data_dir_get", ListBase, [
	("C",		ctypes.POINTER(bContext)),] )

CTX_data_get = _rpythonic_function_(		"CTX_data_get", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("member",		ctypes.POINTER(ctypes.c_char)),
	("r_ptr",		ctypes.POINTER(PointerRNA)),
	("r_lb",		ctypes.POINTER(ListBase)),
	("r_type",		ctypes.POINTER(ctypes.c_short)),] )

CTX_data_id_pointer_set = _rpythonic_function_(		"CTX_data_id_pointer_set", ctypes.c_void_p, [
	("result",		ctypes.POINTER(bContextDataResult)),
	("C_id",		ctypes.POINTER(ID)),] )

CTX_data_pointer_set = _rpythonic_function_(		"CTX_data_pointer_set", ctypes.c_void_p, [
	("result",		ctypes.POINTER(bContextDataResult)),
	("C_id",		ctypes.POINTER(ID)),
	("C_type",		ctypes.POINTER(StructRNA)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

CTX_data_id_list_add = _rpythonic_function_(		"CTX_data_id_list_add", ctypes.c_void_p, [
	("result",		ctypes.POINTER(bContextDataResult)),
	("C_id",		ctypes.POINTER(ID)),] )

CTX_data_list_add = _rpythonic_function_(		"CTX_data_list_add", ctypes.c_void_p, [
	("result",		ctypes.POINTER(bContextDataResult)),
	("C_id",		ctypes.POINTER(ID)),
	("C_type",		ctypes.POINTER(StructRNA)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

CTX_data_dir_set = _rpythonic_function_(		"CTX_data_dir_set", ctypes.c_void_p, [
	("result",		ctypes.POINTER(bContextDataResult)),
	("member",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

CTX_data_type_set = _rpythonic_function_(		"CTX_data_type_set", ctypes.c_void_p, [
	("result",		ctypes.POINTER(bContextDataResult)),
	("C_type",		ctypes.c_short),] )

CTX_data_type_get = _rpythonic_function_(		"CTX_data_type_get", ctypes.c_short, [
	("result",		ctypes.POINTER(bContextDataResult)),] )

CTX_data_equals = _rpythonic_function_(		"CTX_data_equals", ctypes.c_int, [
	("member",		ctypes.POINTER(ctypes.c_char)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

CTX_data_dir = _rpythonic_function_(		"CTX_data_dir", ctypes.c_int, [
	("member",		ctypes.POINTER(ctypes.c_char)),] )

ctx_data_list_count = _rpythonic_function_(		"ctx_data_list_count", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("func",		ctypes.c_void_p),] )

CTX_data_main = _rpythonic_function_(		"CTX_data_main", ctypes.POINTER(Main), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_data_scene = _rpythonic_function_(		"CTX_data_scene", ctypes.POINTER(Scene), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_data_tool_settings = _rpythonic_function_(		"CTX_data_tool_settings", ctypes.POINTER(ToolSettings), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_data_mode_string = _rpythonic_function_(		"CTX_data_mode_string", ctypes.POINTER(ctypes.c_char), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_data_mode_enum = _rpythonic_function_(		"CTX_data_mode_enum", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

CTX_data_main_set = _rpythonic_function_(		"CTX_data_main_set", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("bmain",		ctypes.POINTER(Main)),] )

CTX_data_scene_set = _rpythonic_function_(		"CTX_data_scene_set", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("bmain",		ctypes.POINTER(Scene)),] )

CTX_data_selected_editable_objects = _rpythonic_function_(		"CTX_data_selected_editable_objects", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("C_list",		ctypes.POINTER(ListBase)),] )

CTX_data_selected_editable_bases = _rpythonic_function_(		"CTX_data_selected_editable_bases", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("C_list",		ctypes.POINTER(ListBase)),] )

CTX_data_selected_objects = _rpythonic_function_(		"CTX_data_selected_objects", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("C_list",		ctypes.POINTER(ListBase)),] )

CTX_data_selected_bases = _rpythonic_function_(		"CTX_data_selected_bases", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("C_list",		ctypes.POINTER(ListBase)),] )

CTX_data_visible_objects = _rpythonic_function_(		"CTX_data_visible_objects", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("C_list",		ctypes.POINTER(ListBase)),] )

CTX_data_visible_bases = _rpythonic_function_(		"CTX_data_visible_bases", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("C_list",		ctypes.POINTER(ListBase)),] )

CTX_data_selectable_objects = _rpythonic_function_(		"CTX_data_selectable_objects", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("C_list",		ctypes.POINTER(ListBase)),] )

CTX_data_selectable_bases = _rpythonic_function_(		"CTX_data_selectable_bases", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("C_list",		ctypes.POINTER(ListBase)),] )

CTX_data_active_object = _rpythonic_function_(		"CTX_data_active_object", ctypes.POINTER(Object), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_data_active_base = _rpythonic_function_(		"CTX_data_active_base", ctypes.POINTER(Base), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_data_edit_object = _rpythonic_function_(		"CTX_data_edit_object", ctypes.POINTER(Object), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_data_edit_image = _rpythonic_function_(		"CTX_data_edit_image", ctypes.POINTER(Image), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_data_edit_text = _rpythonic_function_(		"CTX_data_edit_text", ctypes.POINTER(Text), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_data_selected_nodes = _rpythonic_function_(		"CTX_data_selected_nodes", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("C_list",		ctypes.POINTER(ListBase)),] )

CTX_data_active_bone = _rpythonic_function_(		"CTX_data_active_bone", ctypes.POINTER(EditBone), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_data_selected_bones = _rpythonic_function_(		"CTX_data_selected_bones", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("C_list",		ctypes.POINTER(ListBase)),] )

CTX_data_selected_editable_bones = _rpythonic_function_(		"CTX_data_selected_editable_bones", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("C_list",		ctypes.POINTER(ListBase)),] )

CTX_data_visible_bones = _rpythonic_function_(		"CTX_data_visible_bones", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("C_list",		ctypes.POINTER(ListBase)),] )

CTX_data_editable_bones = _rpythonic_function_(		"CTX_data_editable_bones", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("C_list",		ctypes.POINTER(ListBase)),] )

CTX_data_active_pose_bone = _rpythonic_function_(		"CTX_data_active_pose_bone", ctypes.POINTER(bPoseChannel), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_data_selected_pose_bones = _rpythonic_function_(		"CTX_data_selected_pose_bones", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("C_list",		ctypes.POINTER(ListBase)),] )

CTX_data_visible_pose_bones = _rpythonic_function_(		"CTX_data_visible_pose_bones", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("C_list",		ctypes.POINTER(ListBase)),] )

wcscpy = _rpythonic_function_(		"wcscpy", ctypes.POINTER(ctypes.c_int), [
	("__dest",		ctypes.POINTER(ctypes.c_int)),
	("__src",		ctypes.POINTER(ctypes.c_int)),] )

wcsncpy = _rpythonic_function_(		"wcsncpy", ctypes.POINTER(ctypes.c_int), [
	("__dest",		ctypes.POINTER(ctypes.c_int)),
	("__src",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),] )

wcscat = _rpythonic_function_(		"wcscat", ctypes.POINTER(ctypes.c_int), [
	("__dest",		ctypes.POINTER(ctypes.c_int)),
	("__src",		ctypes.POINTER(ctypes.c_int)),] )

wcsncat = _rpythonic_function_(		"wcsncat", ctypes.POINTER(ctypes.c_int), [
	("__dest",		ctypes.POINTER(ctypes.c_int)),
	("__src",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),] )

wcscmp = _rpythonic_function_(		"wcscmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_int)),
	("__s2",		ctypes.POINTER(ctypes.c_int)),] )

wcsncmp = _rpythonic_function_(		"wcsncmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_int)),
	("__s2",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),] )

wcscasecmp = _rpythonic_function_(		"wcscasecmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_int)),
	("__s2",		ctypes.POINTER(ctypes.c_int)),] )

wcsncasecmp = _rpythonic_function_(		"wcsncasecmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_int)),
	("__s2",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),] )

wcscasecmp_l = _rpythonic_function_(		"wcscasecmp_l", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_int)),
	("__s2",		ctypes.POINTER(ctypes.c_int)),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

wcsncasecmp_l = _rpythonic_function_(		"wcsncasecmp_l", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_int)),
	("__s2",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

wcscoll = _rpythonic_function_(		"wcscoll", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_int)),
	("__s2",		ctypes.POINTER(ctypes.c_int)),] )

wcsxfrm = _rpythonic_function_(		"wcsxfrm", ctypes.c_uint, [
	("__s1",		ctypes.POINTER(ctypes.c_int)),
	("__s2",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),] )

wcscoll_l = _rpythonic_function_(		"wcscoll_l", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_int)),
	("__s2",		ctypes.POINTER(ctypes.c_int)),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

wcsxfrm_l = _rpythonic_function_(		"wcsxfrm_l", ctypes.c_uint, [
	("__s1",		ctypes.POINTER(ctypes.c_int)),
	("__s2",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

wcsdup = _rpythonic_function_(		"wcsdup", ctypes.POINTER(ctypes.c_int), [
	("__s",		ctypes.POINTER(ctypes.c_int)),] )

wcschr = _rpythonic_function_(		"wcschr", ctypes.POINTER(ctypes.c_int), [
	("__wcs",		ctypes.POINTER(ctypes.c_int)),
	("__wc",		ctypes.c_int),] )

wcsrchr = _rpythonic_function_(		"wcsrchr", ctypes.POINTER(ctypes.c_int), [
	("__wcs",		ctypes.POINTER(ctypes.c_int)),
	("__wc",		ctypes.c_int),] )

wcschrnul = _rpythonic_function_(		"wcschrnul", ctypes.POINTER(ctypes.c_int), [
	("__s",		ctypes.POINTER(ctypes.c_int)),
	("__wc",		ctypes.c_int),] )

wcscspn = _rpythonic_function_(		"wcscspn", ctypes.c_uint, [
	("__wcs",		ctypes.POINTER(ctypes.c_int)),
	("__reject",		ctypes.POINTER(ctypes.c_int)),] )

wcsspn = _rpythonic_function_(		"wcsspn", ctypes.c_uint, [
	("__wcs",		ctypes.POINTER(ctypes.c_int)),
	("__accept",		ctypes.POINTER(ctypes.c_int)),] )

wcspbrk = _rpythonic_function_(		"wcspbrk", ctypes.POINTER(ctypes.c_int), [
	("__wcs",		ctypes.POINTER(ctypes.c_int)),
	("__accept",		ctypes.POINTER(ctypes.c_int)),] )

wcsstr = _rpythonic_function_(		"wcsstr", ctypes.POINTER(ctypes.c_int), [
	("__haystack",		ctypes.POINTER(ctypes.c_int)),
	("__needle",		ctypes.POINTER(ctypes.c_int)),] )

wcstok = _rpythonic_function_(		"wcstok", ctypes.POINTER(ctypes.c_int), [
	("__s",		ctypes.POINTER(ctypes.c_int)),
	("__delim",		ctypes.POINTER(ctypes.c_int)),
	("__ptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),] )

wcslen = _rpythonic_function_(		"wcslen", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_int)),] )

wcswcs = _rpythonic_function_(		"wcswcs", ctypes.POINTER(ctypes.c_int), [
	("__haystack",		ctypes.POINTER(ctypes.c_int)),
	("__needle",		ctypes.POINTER(ctypes.c_int)),] )

wcsnlen = _rpythonic_function_(		"wcsnlen", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_int)),
	("__maxlen",		ctypes.c_uint),] )

wmemchr = _rpythonic_function_(		"wmemchr", ctypes.POINTER(ctypes.c_int), [
	("__s",		ctypes.POINTER(ctypes.c_int)),
	("__c",		ctypes.c_int),
	("__n",		ctypes.c_uint),] )

wmemcmp = _rpythonic_function_(		"wmemcmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_int)),
	("__s2",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),] )

wmemcpy = _rpythonic_function_(		"wmemcpy", ctypes.POINTER(ctypes.c_int), [
	("__s1",		ctypes.POINTER(ctypes.c_int)),
	("__s2",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),] )

wmemmove = _rpythonic_function_(		"wmemmove", ctypes.POINTER(ctypes.c_int), [
	("__s1",		ctypes.POINTER(ctypes.c_int)),
	("__s2",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),] )

wmemset = _rpythonic_function_(		"wmemset", ctypes.POINTER(ctypes.c_int), [
	("__s",		ctypes.POINTER(ctypes.c_int)),
	("__c",		ctypes.c_int),
	("__n",		ctypes.c_uint),] )

wmempcpy = _rpythonic_function_(		"wmempcpy", ctypes.POINTER(ctypes.c_int), [
	("__s1",		ctypes.POINTER(ctypes.c_int)),
	("__s2",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),] )

btowc = _rpythonic_function_(		"btowc", ctypes.c_uint, [
	("__c",		ctypes.c_int),] )

wctob = _rpythonic_function_(		"wctob", ctypes.c_int, [
	("__c",		ctypes.c_uint),] )

mbsinit = _rpythonic_function_(		"mbsinit", ctypes.c_int, [
	("__ps",		ctypes.POINTER(__mbstate_t)),] )

mbrtowc = _rpythonic_function_(		"mbrtowc", ctypes.c_uint, [
	("__pwc",		ctypes.POINTER(ctypes.c_int)),
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),
	("__p",		ctypes.POINTER(__mbstate_t)),] )

wcrtomb = _rpythonic_function_(		"wcrtomb", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__wc",		ctypes.c_int),
	("__ps",		ctypes.POINTER(__mbstate_t)),] )

mbrlen = _rpythonic_function_(		"mbrlen", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),
	("__ps",		ctypes.POINTER(__mbstate_t)),] )

mbsrtowcs = _rpythonic_function_(		"mbsrtowcs", ctypes.c_uint, [
	("__dst",		ctypes.POINTER(ctypes.c_int)),
	("__src",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__len",		ctypes.c_uint),
	("__ps",		ctypes.POINTER(__mbstate_t)),] )

wcsrtombs = _rpythonic_function_(		"wcsrtombs", ctypes.c_uint, [
	("__dst",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__len",		ctypes.c_uint),
	("__ps",		ctypes.POINTER(__mbstate_t)),] )

mbsnrtowcs = _rpythonic_function_(		"mbsnrtowcs", ctypes.c_uint, [
	("__dst",		ctypes.POINTER(ctypes.c_int)),
	("__src",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__nmc",		ctypes.c_uint),
	("__len",		ctypes.c_uint),
	("__ps",		ctypes.POINTER(__mbstate_t)),] )

wcsnrtombs = _rpythonic_function_(		"wcsnrtombs", ctypes.c_uint, [
	("__dst",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__nwc",		ctypes.c_uint),
	("__len",		ctypes.c_uint),
	("__ps",		ctypes.POINTER(__mbstate_t)),] )

wcwidth = _rpythonic_function_(		"wcwidth", ctypes.c_int, [
	("__c",		ctypes.c_int),] )

wcswidth = _rpythonic_function_(		"wcswidth", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),] )

wcstod = _rpythonic_function_(		"wcstod", ctypes.c_double, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),] )

wcstof = _rpythonic_function_(		"wcstof", ctypes.c_float, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),] )

wcstold = _rpythonic_function_(		"wcstold", ctypes.c_double, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),] )

wcstol = _rpythonic_function_(		"wcstol", ctypes.c_int64, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__base",		ctypes.c_int),] )

wcstoul = _rpythonic_function_(		"wcstoul", ctypes.c_uint64, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__base",		ctypes.c_int),] )

wcstoll = _rpythonic_function_(		"wcstoll", ctypes.c_longlong, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__base",		ctypes.c_int),] )

wcstoull = _rpythonic_function_(		"wcstoull", ctypes.c_ulonglong, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__base",		ctypes.c_int),] )

wcstoq = _rpythonic_function_(		"wcstoq", ctypes.c_longlong, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__base",		ctypes.c_int),] )

wcstouq = _rpythonic_function_(		"wcstouq", ctypes.c_ulonglong, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__base",		ctypes.c_int),] )

wcstol_l = _rpythonic_function_(		"wcstol_l", ctypes.c_int64, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__base",		ctypes.c_int),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

wcstoul_l = _rpythonic_function_(		"wcstoul_l", ctypes.c_uint64, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__base",		ctypes.c_int),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

wcstoll_l = _rpythonic_function_(		"wcstoll_l", ctypes.c_longlong, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__base",		ctypes.c_int),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

wcstoull_l = _rpythonic_function_(		"wcstoull_l", ctypes.c_ulonglong, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__base",		ctypes.c_int),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

wcstod_l = _rpythonic_function_(		"wcstod_l", ctypes.c_double, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

wcstof_l = _rpythonic_function_(		"wcstof_l", ctypes.c_float, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

wcstold_l = _rpythonic_function_(		"wcstold_l", ctypes.c_double, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

wcpcpy = _rpythonic_function_(		"wcpcpy", ctypes.POINTER(ctypes.c_int), [
	("__dest",		ctypes.POINTER(ctypes.c_int)),
	("__src",		ctypes.POINTER(ctypes.c_int)),] )

wcpncpy = _rpythonic_function_(		"wcpncpy", ctypes.POINTER(ctypes.c_int), [
	("__dest",		ctypes.POINTER(ctypes.c_int)),
	("__src",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),] )

open_wmemstream = _rpythonic_function_(		"open_wmemstream", ctypes.POINTER(_IO_FILE), [
	("__bufloc",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__sizeloc",		ctypes.POINTER(ctypes.c_uint)),] )

fwide = _rpythonic_function_(		"fwide", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),
	("__mode",		ctypes.c_int),] )

fwprintf = _rpythonic_function_(		"fwprintf", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_int)),] )

wprintf = _rpythonic_function_(		"wprintf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_int)),] )

swprintf = _rpythonic_function_(		"swprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),
	("__format",		ctypes.POINTER(ctypes.c_int)),] )

vfwprintf = _rpythonic_function_(		"vfwprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_int)),
	("__arg",		ctypes.c_char),] )

vwprintf = _rpythonic_function_(		"vwprintf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_int)),
	("__arg",		ctypes.c_char),] )

vswprintf = _rpythonic_function_(		"vswprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),
	("__format",		ctypes.POINTER(ctypes.c_int)),
	("__arg",		ctypes.c_char),] )

fwscanf = _rpythonic_function_(		"fwscanf", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_int)),] )

wscanf = _rpythonic_function_(		"wscanf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_int)),] )

swscanf = _rpythonic_function_(		"swscanf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_int)),
	("__format",		ctypes.POINTER(ctypes.c_int)),] )

vfwscanf = _rpythonic_function_(		"vfwscanf", ctypes.c_int, [
	("__s",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_int)),
	("__arg",		ctypes.c_char),] )

vwscanf = _rpythonic_function_(		"vwscanf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_int)),
	("__arg",		ctypes.c_char),] )

vswscanf = _rpythonic_function_(		"vswscanf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_int)),
	("__format",		ctypes.POINTER(ctypes.c_int)),
	("__arg",		ctypes.c_char),] )

fgetwc = _rpythonic_function_(		"fgetwc", ctypes.c_uint, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getwc = _rpythonic_function_(		"getwc", ctypes.c_uint, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getwchar = _rpythonic_function_(		"getwchar", ctypes.c_uint, [] )

fputwc = _rpythonic_function_(		"fputwc", ctypes.c_uint, [
	("__wc",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putwc = _rpythonic_function_(		"putwc", ctypes.c_uint, [
	("__wc",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putwchar = _rpythonic_function_(		"putwchar", ctypes.c_uint, [
	("__wc",		ctypes.c_int),] )

fgetws = _rpythonic_function_(		"fgetws", ctypes.POINTER(ctypes.c_int), [
	("__ws",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fputws = _rpythonic_function_(		"fputws", ctypes.c_int, [
	("__ws",		ctypes.POINTER(ctypes.c_int)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ungetwc = _rpythonic_function_(		"ungetwc", ctypes.c_uint, [
	("__wc",		ctypes.c_uint),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getwc_unlocked = _rpythonic_function_(		"getwc_unlocked", ctypes.c_uint, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getwchar_unlocked = _rpythonic_function_(		"getwchar_unlocked", ctypes.c_uint, [] )

fgetwc_unlocked = _rpythonic_function_(		"fgetwc_unlocked", ctypes.c_uint, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fputwc_unlocked = _rpythonic_function_(		"fputwc_unlocked", ctypes.c_uint, [
	("__wc",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putwc_unlocked = _rpythonic_function_(		"putwc_unlocked", ctypes.c_uint, [
	("__wc",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putwchar_unlocked = _rpythonic_function_(		"putwchar_unlocked", ctypes.c_uint, [
	("__wc",		ctypes.c_int),] )

fgetws_unlocked = _rpythonic_function_(		"fgetws_unlocked", ctypes.POINTER(ctypes.c_int), [
	("__ws",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fputws_unlocked = _rpythonic_function_(		"fputws_unlocked", ctypes.c_int, [
	("__ws",		ctypes.POINTER(ctypes.c_int)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

wcsftime = _rpythonic_function_(		"wcsftime", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_int)),
	("__maxsize",		ctypes.c_uint),
	("__format",		ctypes.POINTER(ctypes.c_int)),
	("__tp",		ctypes.POINTER(tm)),] )

wcsftime_l = _rpythonic_function_(		"wcsftime_l", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_int)),
	("__maxsize",		ctypes.c_uint),
	("__format",		ctypes.POINTER(ctypes.c_int)),
	("__tp",		ctypes.POINTER(tm)),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

BKE_font_register_builtin = _rpythonic_function_(		"BKE_font_register_builtin", ctypes.c_void_p, [
	("mem",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.c_int),] )

free_vfont = _rpythonic_function_(		"free_vfont", ctypes.c_void_p, [
	("sc",		ctypes.POINTER(VFont)),] )

free_ttfont = _rpythonic_function_(		"free_ttfont", ctypes.c_void_p, [] )

get_builtin_font = _rpythonic_function_(		"get_builtin_font", ctypes.POINTER(VFont), [] )

load_vfont = _rpythonic_function_(		"load_vfont", ctypes.POINTER(VFont), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

vfont_find_tmpfont = _rpythonic_function_(		"vfont_find_tmpfont", ctypes.POINTER(TmpFont), [
	("vfont",		ctypes.POINTER(VFont)),] )

BKE_text_to_curve = _rpythonic_function_(		"BKE_text_to_curve", ctypes.POINTER(chartrans), [
	("scene",		ctypes.POINTER(Scene)),
	("ob",		ctypes.POINTER(Object)),
	("mode",		ctypes.c_int),] )

BKE_font_getselection = _rpythonic_function_(		"BKE_font_getselection", ctypes.c_int, [
	("ob",		ctypes.POINTER(Object)),
	("start",		ctypes.POINTER(ctypes.c_int)),
	("end",		ctypes.POINTER(ctypes.c_int)),] )

chtoutf8 = _rpythonic_function_(		"chtoutf8", ctypes.c_uint, [
	("c",		ctypes.c_ulong),
	("o",		( ctypes.c_char * 4 )),] )

wcs2utf8s = _rpythonic_function_(		"wcs2utf8s", ctypes.c_void_p, [
	("dst",		ctypes.POINTER(ctypes.c_char)),
	("src",		ctypes.POINTER(ctypes.c_int)),] )

wcsleninu8 = _rpythonic_function_(		"wcsleninu8", ctypes.c_uint, [
	("src",		ctypes.POINTER(ctypes.c_int)),] )

utf8towchar = _rpythonic_function_(		"utf8towchar", ctypes.c_uint, [
	("w",		ctypes.POINTER(ctypes.c_int)),
	("c",		ctypes.POINTER(ctypes.c_char)),] )

init_def_material = _rpythonic_function_(		"init_def_material", ctypes.c_void_p, [] )

free_material = _rpythonic_function_(		"free_material", ctypes.c_void_p, [
	("sc",		ctypes.POINTER(Material)),] )

test_object_materials = _rpythonic_function_(		"test_object_materials", ctypes.c_void_p, [
	("C_id",		ctypes.POINTER(ID)),] )

resize_object_material = _rpythonic_function_(		"resize_object_material", ctypes.c_void_p, [
	("ob",		ctypes.POINTER(Object)),
	("totcol",		ctypes.c_short),] )

init_material = _rpythonic_function_(		"init_material", ctypes.c_void_p, [
	("ma",		ctypes.POINTER(Material)),] )

add_material = _rpythonic_function_(		"add_material", ctypes.POINTER(Material), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

copy_material = _rpythonic_function_(		"copy_material", ctypes.POINTER(Material), [
	("ma",		ctypes.POINTER(Material)),] )

localize_material = _rpythonic_function_(		"localize_material", ctypes.POINTER(Material), [
	("ma",		ctypes.POINTER(Material)),] )

give_node_material = _rpythonic_function_(		"give_node_material", ctypes.POINTER(Material), [
	("ma",		ctypes.POINTER(Material)),] )

make_local_material = _rpythonic_function_(		"make_local_material", ctypes.c_void_p, [
	("ma",		ctypes.POINTER(Material)),] )

extern_local_matarar = _rpythonic_function_(		"extern_local_matarar", ctypes.c_void_p, [
	("matar",		ctypes.POINTER(ctypes.POINTER(Material))),
	("totcol",		ctypes.c_short),] )

automatname = _rpythonic_function_(		"automatname", ctypes.c_void_p, [
	("Material",		ctypes.POINTER(Material)),] )

give_matarar = _rpythonic_function_(		"give_matarar", ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(Material))), [
	("ob",		ctypes.POINTER(Object)),] )

give_totcolp = _rpythonic_function_(		"give_totcolp", ctypes.POINTER(ctypes.c_short), [
	("ob",		ctypes.POINTER(Object)),] )

give_matarar_id = _rpythonic_function_(		"give_matarar_id", ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(Material))), [
	("C_id",		ctypes.POINTER(ID)),] )

give_totcolp_id = _rpythonic_function_(		"give_totcolp_id", ctypes.POINTER(ctypes.c_short), [
	("C_id",		ctypes.POINTER(ID)),] )

give_current_material = _rpythonic_function_(		"give_current_material", ctypes.POINTER(Material), [
	("ob",		ctypes.POINTER(Object)),
	("act",		ctypes.c_int),] )

material_from = _rpythonic_function_(		"material_from", ctypes.POINTER(ID), [
	("ob",		ctypes.POINTER(Object)),
	("act",		ctypes.c_int),] )

assign_material = _rpythonic_function_(		"assign_material", ctypes.c_void_p, [
	("ob",		ctypes.POINTER(Object)),
	("ma",		ctypes.POINTER(Material)),
	("act",		ctypes.c_int),] )

assign_matarar = _rpythonic_function_(		"assign_matarar", ctypes.c_void_p, [
	("ob",		ctypes.POINTER(Object)),
	("matar",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(Material)))),
	("totcol",		ctypes.c_int),] )

find_material_index = _rpythonic_function_(		"find_material_index", ctypes.c_int, [
	("ob",		ctypes.POINTER(Object)),
	("ma",		ctypes.POINTER(Material)),] )

object_add_material_slot = _rpythonic_function_(		"object_add_material_slot", ctypes.c_int, [
	("ob",		ctypes.POINTER(Object)),] )

object_remove_material_slot = _rpythonic_function_(		"object_remove_material_slot", ctypes.c_int, [
	("ob",		ctypes.POINTER(Object)),] )

material_append_id = _rpythonic_function_(		"material_append_id", ctypes.c_void_p, [
	("C_id",		ctypes.POINTER(ID)),
	("ma",		ctypes.POINTER(Material)),] )

material_pop_id = _rpythonic_function_(		"material_pop_id", ctypes.POINTER(Material), [
	("C_id",		ctypes.POINTER(ID)),
	("index",		ctypes.c_int),
	("remove_material_slot",		ctypes.c_int),] )

init_render_material = _rpythonic_function_(		"init_render_material", ctypes.c_void_p, [
	("Material",		ctypes.POINTER(Material)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_float)),] )

init_render_materials = _rpythonic_function_(		"init_render_materials", ctypes.c_void_p, [
	("Main",		ctypes.POINTER(Main)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_float)),] )

end_render_material = _rpythonic_function_(		"end_render_material", ctypes.c_void_p, [
	("Material",		ctypes.POINTER(Material)),] )

end_render_materials = _rpythonic_function_(		"end_render_materials", ctypes.c_void_p, [
	("Main",		ctypes.POINTER(Main)),] )

material_in_material = _rpythonic_function_(		"material_in_material", ctypes.c_int, [
	("parmat",		ctypes.POINTER(Material)),
	("mat",		ctypes.POINTER(Material)),] )

ramp_blend = _rpythonic_function_(		"ramp_blend", ctypes.c_void_p, [
	("C_type",		ctypes.c_int),
	("r",		ctypes.POINTER(ctypes.c_float)),
	("g",		ctypes.POINTER(ctypes.c_float)),
	("b",		ctypes.POINTER(ctypes.c_float)),
	("fac",		ctypes.c_float),
	("col",		ctypes.POINTER(ctypes.c_float)),] )

clear_matcopybuf = _rpythonic_function_(		"clear_matcopybuf", ctypes.c_void_p, [] )

free_matcopybuf = _rpythonic_function_(		"free_matcopybuf", ctypes.c_void_p, [] )

copy_matcopybuf = _rpythonic_function_(		"copy_matcopybuf", ctypes.c_void_p, [
	("ma",		ctypes.POINTER(Material)),] )

paste_matcopybuf = _rpythonic_function_(		"paste_matcopybuf", ctypes.c_void_p, [
	("ma",		ctypes.POINTER(Material)),] )

clear_mat_mtex_copybuf = _rpythonic_function_(		"clear_mat_mtex_copybuf", ctypes.c_void_p, [] )

copy_mat_mtex_copybuf = _rpythonic_function_(		"copy_mat_mtex_copybuf", ctypes.c_void_p, [
	("C_id",		ctypes.POINTER(ID)),] )

paste_mat_mtex_copybuf = _rpythonic_function_(		"paste_mat_mtex_copybuf", ctypes.c_void_p, [
	("C_id",		ctypes.POINTER(ID)),] )

newPackedFile = _rpythonic_function_(		"newPackedFile", ctypes.POINTER(PackedFile), [
	("reports",		ctypes.POINTER(ReportList)),
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

newPackedFileMemory = _rpythonic_function_(		"newPackedFileMemory", ctypes.POINTER(PackedFile), [
	("mem",		ctypes.POINTER(ctypes.c_void_p)),
	("memlen",		ctypes.c_int),] )

packAll = _rpythonic_function_(		"packAll", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("reports",		ctypes.POINTER(ReportList)),] )

unpackFile = _rpythonic_function_(		"unpackFile", ctypes.POINTER(ctypes.c_char), [
	("reports",		ctypes.POINTER(ReportList)),
	("abs_name",		ctypes.POINTER(ctypes.c_char)),
	("local_name",		ctypes.POINTER(ctypes.c_char)),
	("pf",		ctypes.POINTER(PackedFile)),
	("how",		ctypes.c_int),] )

unpackVFont = _rpythonic_function_(		"unpackVFont", ctypes.c_int, [
	("reports",		ctypes.POINTER(ReportList)),
	("vfont",		ctypes.POINTER(VFont)),
	("how",		ctypes.c_int),] )

unpackSound = _rpythonic_function_(		"unpackSound", ctypes.c_int, [
	("bmain",		ctypes.POINTER(Main)),
	("reports",		ctypes.POINTER(ReportList)),
	("sound",		ctypes.POINTER(bSound)),
	("how",		ctypes.c_int),] )

unpackImage = _rpythonic_function_(		"unpackImage", ctypes.c_int, [
	("reports",		ctypes.POINTER(ReportList)),
	("ima",		ctypes.POINTER(Image)),
	("how",		ctypes.c_int),] )

unpackAll = _rpythonic_function_(		"unpackAll", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("reports",		ctypes.POINTER(ReportList)),
	("how",		ctypes.c_int),] )

writePackedFile = _rpythonic_function_(		"writePackedFile", ctypes.c_int, [
	("reports",		ctypes.POINTER(ReportList)),
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("pf",		ctypes.POINTER(PackedFile)),
	("guimode",		ctypes.c_int),] )

freePackedFile = _rpythonic_function_(		"freePackedFile", ctypes.c_void_p, [
	("pf",		ctypes.POINTER(PackedFile)),] )

countPackedFiles = _rpythonic_function_(		"countPackedFiles", ctypes.c_int, [
	("bmain",		ctypes.POINTER(Main)),] )

checkPackedFile = _rpythonic_function_(		"checkPackedFile", ctypes.c_int, [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("pf",		ctypes.POINTER(PackedFile)),] )

seekPackedFile = _rpythonic_function_(		"seekPackedFile", ctypes.c_int, [
	("pf",		ctypes.POINTER(PackedFile)),
	("offset",		ctypes.c_int),
	("whence",		ctypes.c_int),] )

rewindPackedFile = _rpythonic_function_(		"rewindPackedFile", ctypes.c_void_p, [
	("pf",		ctypes.POINTER(PackedFile)),] )

readPackedFile = _rpythonic_function_(		"readPackedFile", ctypes.c_int, [
	("pf",		ctypes.POINTER(PackedFile)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.c_int),] )

_setlooper_base_step = _rpythonic_function_(		"_setlooper_base_step", ctypes.POINTER(Base), [
	("sce_iter",		ctypes.POINTER(ctypes.POINTER(Scene))),
	("base",		ctypes.POINTER(Base)),] )

free_avicodecdata = _rpythonic_function_(		"free_avicodecdata", ctypes.c_void_p, [
	("acd",		ctypes.POINTER(AviCodecData)),] )

free_qtcodecdata = _rpythonic_function_(		"free_qtcodecdata", ctypes.c_void_p, [
	("acd",		ctypes.POINTER(QuicktimeCodecData)),] )

free_scene = _rpythonic_function_(		"free_scene", ctypes.c_void_p, [
	("sce",		ctypes.POINTER(Scene)),] )

add_scene = _rpythonic_function_(		"add_scene", ctypes.POINTER(Scene), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

object_in_scene = _rpythonic_function_(		"object_in_scene", ctypes.POINTER(Base), [
	("ob",		ctypes.POINTER(Object)),
	("sce",		ctypes.POINTER(Scene)),] )

set_scene_bg = _rpythonic_function_(		"set_scene_bg", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("sce",		ctypes.POINTER(Scene)),] )

set_scene_name = _rpythonic_function_(		"set_scene_name", ctypes.POINTER(Scene), [
	("bmain",		ctypes.POINTER(Main)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

copy_scene = _rpythonic_function_(		"copy_scene", ctypes.POINTER(Scene), [
	("sce",		ctypes.POINTER(Scene)),
	("C_type",		ctypes.c_int),] )

unlink_scene = _rpythonic_function_(		"unlink_scene", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("sce",		ctypes.POINTER(Scene)),
	("newsce",		ctypes.POINTER(Scene)),] )

next_object = _rpythonic_function_(		"next_object", ctypes.c_int, [
	("scene",		ctypes.POINTER(ctypes.POINTER(Scene))),
	("val",		ctypes.c_int),
	("base",		ctypes.POINTER(ctypes.POINTER(Base))),
	("ob",		ctypes.POINTER(ctypes.POINTER(Object))),] )

scene_find_camera = _rpythonic_function_(		"scene_find_camera", ctypes.POINTER(Object), [
	("sc",		ctypes.POINTER(Scene)),] )

scene_camera_switch_find = _rpythonic_function_(		"scene_camera_switch_find", ctypes.POINTER(Object), [
	("scene",		ctypes.POINTER(Scene)),] )

scene_camera_switch_update = _rpythonic_function_(		"scene_camera_switch_update", ctypes.c_int, [
	("scene",		ctypes.POINTER(Scene)),] )

scene_find_marker_name = _rpythonic_function_(		"scene_find_marker_name", ctypes.POINTER(ctypes.c_char), [
	("scene",		ctypes.POINTER(Scene)),
	("frame",		ctypes.c_int),] )

scene_find_last_marker_name = _rpythonic_function_(		"scene_find_last_marker_name", ctypes.POINTER(ctypes.c_char), [
	("scene",		ctypes.POINTER(Scene)),
	("frame",		ctypes.c_int),] )

scene_add_base = _rpythonic_function_(		"scene_add_base", ctypes.POINTER(Base), [
	("sce",		ctypes.POINTER(Scene)),
	("ob",		ctypes.POINTER(Object)),] )

scene_deselect_all = _rpythonic_function_(		"scene_deselect_all", ctypes.c_void_p, [
	("sce",		ctypes.POINTER(Scene)),] )

scene_select_base = _rpythonic_function_(		"scene_select_base", ctypes.c_void_p, [
	("sce",		ctypes.POINTER(Scene)),
	("selbase",		ctypes.POINTER(Base)),] )

scene_check_setscene = _rpythonic_function_(		"scene_check_setscene", ctypes.c_int, [
	("bmain",		ctypes.POINTER(Main)),
	("sce",		ctypes.POINTER(Scene)),] )

BKE_curframe = _rpythonic_function_(		"BKE_curframe", ctypes.c_float, [
	("scene",		ctypes.POINTER(Scene)),] )

scene_update_tagged = _rpythonic_function_(		"scene_update_tagged", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("sce",		ctypes.POINTER(Scene)),] )

scene_update_for_newframe = _rpythonic_function_(		"scene_update_for_newframe", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("sce",		ctypes.POINTER(Scene)),
	("lay",		ctypes.c_uint),] )

scene_add_render_layer = _rpythonic_function_(		"scene_add_render_layer", ctypes.c_void_p, [
	("sce",		ctypes.POINTER(Scene)),] )

get_render_subsurf_level = _rpythonic_function_(		"get_render_subsurf_level", ctypes.c_int, [
	("r",		ctypes.POINTER(RenderData)),
	("level",		ctypes.c_int),] )

get_render_child_particle_number = _rpythonic_function_(		"get_render_child_particle_number", ctypes.c_int, [
	("r",		ctypes.POINTER(RenderData)),
	("num",		ctypes.c_int),] )

get_render_shadow_samples = _rpythonic_function_(		"get_render_shadow_samples", ctypes.c_int, [
	("r",		ctypes.POINTER(RenderData)),
	("samples",		ctypes.c_int),] )

get_render_aosss_error = _rpythonic_function_(		"get_render_aosss_error", ctypes.c_float, [
	("r",		ctypes.POINTER(RenderData)),
	("error",		ctypes.c_float),] )

execfunc = _rpythonic_function_(		"execfunc", ctypes.c_void_p, [
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("bNode",		ctypes.POINTER(bNode)),
	("bNodeStack",		ctypes.POINTER(ctypes.POINTER(bNodeStack))),
	("bNodeStack",		ctypes.POINTER(ctypes.POINTER(bNodeStack))),] )

uifunc = _rpythonic_function_(		"uifunc", ctypes.c_void_p, [
	("uiLayout",		ctypes.POINTER(uiLayout)),
	("C",		ctypes.POINTER(bContext)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

uifuncbut = _rpythonic_function_(		"uifuncbut", ctypes.c_void_p, [
	("uiLayout",		ctypes.POINTER(uiLayout)),
	("C",		ctypes.POINTER(bContext)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

labelfunc = _rpythonic_function_(		"labelfunc", ctypes.POINTER(ctypes.c_char), [
	("bNode",		ctypes.POINTER(bNode)),] )

initfunc = _rpythonic_function_(		"initfunc", ctypes.c_void_p, [
	("bNode",		ctypes.POINTER(bNode)),] )

freestoragefunc = _rpythonic_function_(		"freestoragefunc", ctypes.c_void_p, [
	("bNode",		ctypes.POINTER(bNode)),] )

copystoragefunc = _rpythonic_function_(		"copystoragefunc", ctypes.c_void_p, [
	("bNode",		ctypes.POINTER(bNode)),
	("bNode",		ctypes.POINTER(bNode)),] )

ntreeVerifyTypes = _rpythonic_function_(		"ntreeVerifyTypes", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),] )

gpufunc = _rpythonic_function_(		"gpufunc", ctypes.c_int, [
	("mat",		ctypes.POINTER(GPUMaterial)),
	("node",		ctypes.POINTER(bNode)),
	("C_in",		ctypes.POINTER(GPUNodeStack)),
	("out",		ctypes.POINTER(GPUNodeStack)),] )

ntreeAddTree = _rpythonic_function_(		"ntreeAddTree", ctypes.POINTER(bNodeTree), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("C_type",		ctypes.c_int),
	("is_group",		ctypes.c_short),] )

ntreeInitTypes = _rpythonic_function_(		"ntreeInitTypes", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),] )

ntreeUpdateType = _rpythonic_function_(		"ntreeUpdateType", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("ntype",		ctypes.POINTER(bNodeType)),] )

ntreeFreeTree = _rpythonic_function_(		"ntreeFreeTree", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),] )

ntreeCopyTree = _rpythonic_function_(		"ntreeCopyTree", ctypes.POINTER(bNodeTree), [
	("ntree",		ctypes.POINTER(bNodeTree)),] )

ntreeSwitchID = _rpythonic_function_(		"ntreeSwitchID", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("sce_from",		ctypes.POINTER(ID)),
	("sce_to",		ctypes.POINTER(ID)),] )

ntreeMakeLocal = _rpythonic_function_(		"ntreeMakeLocal", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),] )

ntreeSocketUseFlags = _rpythonic_function_(		"ntreeSocketUseFlags", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),] )

ntreeSolveOrder = _rpythonic_function_(		"ntreeSolveOrder", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),] )

ntreeBeginExecTree = _rpythonic_function_(		"ntreeBeginExecTree", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),] )

ntreeExecTree = _rpythonic_function_(		"ntreeExecTree", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("callerdata",		ctypes.POINTER(ctypes.c_void_p)),
	("thread",		ctypes.c_int),] )

ntreeCompositExecTree = _rpythonic_function_(		"ntreeCompositExecTree", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("rd",		ctypes.POINTER(RenderData)),
	("do_previews",		ctypes.c_int),] )

ntreeEndExecTree = _rpythonic_function_(		"ntreeEndExecTree", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),] )

ntreeInitPreview = _rpythonic_function_(		"ntreeInitPreview", ctypes.c_void_p, [
	("bNodeTree",		ctypes.POINTER(bNodeTree)),
	("xsize",		ctypes.c_int),
	("ysize",		ctypes.c_int),] )

ntreeClearPreview = _rpythonic_function_(		"ntreeClearPreview", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),] )

ntreeFreeCache = _rpythonic_function_(		"ntreeFreeCache", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),] )

ntreeLocalize = _rpythonic_function_(		"ntreeLocalize", ctypes.POINTER(bNodeTree), [
	("ntree",		ctypes.POINTER(bNodeTree)),] )

ntreeLocalSync = _rpythonic_function_(		"ntreeLocalSync", ctypes.c_void_p, [
	("localtree",		ctypes.POINTER(bNodeTree)),
	("ntree",		ctypes.POINTER(bNodeTree)),] )

ntreeLocalMerge = _rpythonic_function_(		"ntreeLocalMerge", ctypes.c_void_p, [
	("localtree",		ctypes.POINTER(bNodeTree)),
	("ntree",		ctypes.POINTER(bNodeTree)),] )

nodeVerifyType = _rpythonic_function_(		"nodeVerifyType", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("node",		ctypes.POINTER(bNode)),] )

nodeAddToPreview = _rpythonic_function_(		"nodeAddToPreview", ctypes.c_void_p, [
	("bNode",		ctypes.POINTER(bNode)),
	("none",		ctypes.POINTER(ctypes.c_float)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

nodeUnlinkNode = _rpythonic_function_(		"nodeUnlinkNode", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("node",		ctypes.POINTER(bNode)),] )

nodeUniqueName = _rpythonic_function_(		"nodeUniqueName", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("node",		ctypes.POINTER(bNode)),] )

nodeAddSockets = _rpythonic_function_(		"nodeAddSockets", ctypes.c_void_p, [
	("node",		ctypes.POINTER(bNode)),
	("ntype",		ctypes.POINTER(bNodeType)),] )

nodeAddNodeType = _rpythonic_function_(		"nodeAddNodeType", ctypes.POINTER(bNode), [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("C_type",		ctypes.c_int),
	("ngroup",		ctypes.POINTER(bNodeTree)),
	("C_id",		ctypes.POINTER(ID)),] )

nodeRegisterType = _rpythonic_function_(		"nodeRegisterType", ctypes.c_void_p, [
	("typelist",		ctypes.POINTER(ListBase)),
	("ntype",		ctypes.POINTER(bNodeType)),] )

nodeUpdateType = _rpythonic_function_(		"nodeUpdateType", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("node",		ctypes.POINTER(bNode)),
	("ntype",		ctypes.POINTER(bNodeType)),] )

nodeMakeDynamicType = _rpythonic_function_(		"nodeMakeDynamicType", ctypes.c_void_p, [
	("node",		ctypes.POINTER(bNode)),] )

nodeDynamicUnlinkText = _rpythonic_function_(		"nodeDynamicUnlinkText", ctypes.c_int, [
	("txtid",		ctypes.POINTER(ID)),] )

nodeFreeNode = _rpythonic_function_(		"nodeFreeNode", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("node",		ctypes.POINTER(bNode)),] )

nodeCopyNode = _rpythonic_function_(		"nodeCopyNode", ctypes.POINTER(bNode), [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("node",		ctypes.POINTER(bNode)),] )

nodeAddLink = _rpythonic_function_(		"nodeAddLink", ctypes.POINTER(bNodeLink), [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("fromnode",		ctypes.POINTER(bNode)),
	("fromsock",		ctypes.POINTER(bNodeSocket)),
	("tonode",		ctypes.POINTER(bNode)),
	("tosock",		ctypes.POINTER(bNodeSocket)),] )

nodeRemLink = _rpythonic_function_(		"nodeRemLink", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("link",		ctypes.POINTER(bNodeLink)),] )

nodeRemSocketLinks = _rpythonic_function_(		"nodeRemSocketLinks", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("sock",		ctypes.POINTER(bNodeSocket)),] )

nodeFindNodebyName = _rpythonic_function_(		"nodeFindNodebyName", ctypes.POINTER(bNode), [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

nodeFindNode = _rpythonic_function_(		"nodeFindNode", ctypes.c_int, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("sock",		ctypes.POINTER(bNodeSocket)),
	("nodep",		ctypes.POINTER(ctypes.POINTER(bNode))),
	("sockindex",		ctypes.POINTER(ctypes.c_int)),
	("in_out",		ctypes.POINTER(ctypes.c_int)),] )

nodeFindLink = _rpythonic_function_(		"nodeFindLink", ctypes.POINTER(bNodeLink), [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("from",		ctypes.POINTER(bNodeSocket)),
	("to",		ctypes.POINTER(bNodeSocket)),] )

nodeCountSocketLinks = _rpythonic_function_(		"nodeCountSocketLinks", ctypes.c_int, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("sock",		ctypes.POINTER(bNodeSocket)),] )

nodeSetActive = _rpythonic_function_(		"nodeSetActive", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("node",		ctypes.POINTER(bNode)),] )

nodeGetActive = _rpythonic_function_(		"nodeGetActive", ctypes.POINTER(bNode), [
	("ntree",		ctypes.POINTER(bNodeTree)),] )

nodeGetActiveID = _rpythonic_function_(		"nodeGetActiveID", ctypes.POINTER(bNode), [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("idtype",		ctypes.c_short),] )

nodeSetActiveID = _rpythonic_function_(		"nodeSetActiveID", ctypes.c_int, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("idtype",		ctypes.c_short),
	("C_id",		ctypes.POINTER(ID)),] )

nodeClearActiveID = _rpythonic_function_(		"nodeClearActiveID", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("idtype",		ctypes.c_short),] )

NodeTagChanged = _rpythonic_function_(		"NodeTagChanged", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("node",		ctypes.POINTER(bNode)),] )

NodeTagIDChanged = _rpythonic_function_(		"NodeTagIDChanged", ctypes.c_int, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("C_id",		ctypes.POINTER(ID)),] )

ntreeClearTags = _rpythonic_function_(		"ntreeClearTags", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),] )

nodeMakeGroupFromSelected = _rpythonic_function_(		"nodeMakeGroupFromSelected", ctypes.POINTER(bNode), [
	("ntree",		ctypes.POINTER(bNodeTree)),] )

nodeGroupUnGroup = _rpythonic_function_(		"nodeGroupUnGroup", ctypes.c_int, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("gnode",		ctypes.POINTER(bNode)),] )

nodeGroupVerify = _rpythonic_function_(		"nodeGroupVerify", ctypes.c_void_p, [
	("ngroup",		ctypes.POINTER(bNodeTree)),] )

nodeGroupSocketUseFlags = _rpythonic_function_(		"nodeGroupSocketUseFlags", ctypes.c_void_p, [
	("ngroup",		ctypes.POINTER(bNodeTree)),] )

nodeGroupCopy = _rpythonic_function_(		"nodeGroupCopy", ctypes.c_void_p, [
	("gnode",		ctypes.POINTER(bNode)),] )

nodeGroupAddSocket = _rpythonic_function_(		"nodeGroupAddSocket", ctypes.POINTER(bNodeSocket), [
	("ngroup",		ctypes.POINTER(bNodeTree)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("C_type",		ctypes.c_int),
	("in_out",		ctypes.c_int),] )

nodeGroupExposeSocket = _rpythonic_function_(		"nodeGroupExposeSocket", ctypes.POINTER(bNodeSocket), [
	("ngroup",		ctypes.POINTER(bNodeTree)),
	("sock",		ctypes.POINTER(bNodeSocket)),
	("in_out",		ctypes.c_int),] )

nodeGroupExposeAllSockets = _rpythonic_function_(		"nodeGroupExposeAllSockets", ctypes.c_void_p, [
	("ngroup",		ctypes.POINTER(bNodeTree)),] )

nodeGroupRemoveSocket = _rpythonic_function_(		"nodeGroupRemoveSocket", ctypes.c_void_p, [
	("ngroup",		ctypes.POINTER(bNodeTree)),
	("gsock",		ctypes.POINTER(bNodeSocket)),
	("in_out",		ctypes.c_int),] )

node_type_base = _rpythonic_function_(		"node_type_base", ctypes.c_void_p, [
	("ntype",		ctypes.POINTER(bNodeType)),
	("C_type",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nclass",		ctypes.c_short),
	("flag",		ctypes.c_short),
	("inputs",		ctypes.POINTER(bNodeSocketType)),
	("outputs",		ctypes.POINTER(bNodeSocketType)),] )

node_type_size = _rpythonic_function_(		"node_type_size", ctypes.c_void_p, [
	("ntype",		ctypes.POINTER(bNodeType)),
	("width",		ctypes.c_int),
	("minwidth",		ctypes.c_int),
	("maxwidth",		ctypes.c_int),] )

node_type_init = _rpythonic_function_(		"node_type_init", ctypes.c_void_p, [
	("ntype",		ctypes.POINTER(bNodeType)),
	("initfunc",		ctypes.c_void_p),] )

node_type_storage = _rpythonic_function_(		"node_type_storage", ctypes.c_void_p, [
	("ntype",		ctypes.POINTER(bNodeType)),
	("storagename",		ctypes.POINTER(ctypes.c_char)),
	("freestoragefunc",		ctypes.c_void_p),
	("copystoragefunc",		ctypes.c_void_p),] )

node_type_exec = _rpythonic_function_(		"node_type_exec", ctypes.c_void_p, [
	("ntype",		ctypes.POINTER(bNodeType)),
	("execfunc",		ctypes.c_void_p),] )

node_type_gpu = _rpythonic_function_(		"node_type_gpu", ctypes.c_void_p, [
	("ntype",		ctypes.POINTER(bNodeType)),
	("gpufunc",		ctypes.c_void_p),] )

node_type_label = _rpythonic_function_(		"node_type_label", ctypes.c_void_p, [
	("ntype",		ctypes.POINTER(bNodeType)),
	("labelfunc",		ctypes.POINTER(ctypes.c_void_p)),] )

register_node_type_group = _rpythonic_function_(		"register_node_type_group", ctypes.c_void_p, [
	("lb",		ctypes.POINTER(ListBase)),] )

ntreeShaderExecTree = _rpythonic_function_(		"ntreeShaderExecTree", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("shi",		ctypes.POINTER(ShadeInput)),
	("shr",		ctypes.POINTER(ShadeResult)),] )

ntreeShaderGetTexcoMode = _rpythonic_function_(		"ntreeShaderGetTexcoMode", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("osa",		ctypes.c_int),
	("texco",		ctypes.POINTER(ctypes.c_short)),
	("mode",		ctypes.POINTER(ctypes.c_int)),] )

nodeShaderSynchronizeID = _rpythonic_function_(		"nodeShaderSynchronizeID", ctypes.c_void_p, [
	("node",		ctypes.POINTER(bNode)),
	("copyto",		ctypes.c_int),] )

node_shader_lamp_loop = _rpythonic_function_(		"node_shader_lamp_loop", ctypes.c_void_p, [
	("ShadeInput",		ctypes.POINTER(ShadeInput)),
	("ShadeResult",		ctypes.POINTER(ShadeResult)),] )

set_node_shader_lamp_loop = _rpythonic_function_(		"set_node_shader_lamp_loop", ctypes.c_void_p, [
	("lamp_loop_func",		ctypes.c_void_p),] )

lamp_loop_func = _rpythonic_function_(		"lamp_loop_func", ctypes.c_void_p, [
	("ShadeInput",		ctypes.POINTER(ShadeInput)),
	("ShadeResult",		ctypes.POINTER(ShadeResult)),] )

ntreeGPUMaterialNodes = _rpythonic_function_(		"ntreeGPUMaterialNodes", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("mat",		ctypes.POINTER(GPUMaterial)),] )

ntreeCompositTagRender = _rpythonic_function_(		"ntreeCompositTagRender", ctypes.c_void_p, [
	("sce",		ctypes.POINTER(Scene)),] )

ntreeCompositTagAnimated = _rpythonic_function_(		"ntreeCompositTagAnimated", ctypes.c_int, [
	("ntree",		ctypes.POINTER(bNodeTree)),] )

ntreeCompositTagGenerators = _rpythonic_function_(		"ntreeCompositTagGenerators", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),] )

ntreeCompositForceHidden = _rpythonic_function_(		"ntreeCompositForceHidden", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("scene",		ctypes.POINTER(Scene)),] )

ntreeTexTagAnimated = _rpythonic_function_(		"ntreeTexTagAnimated", ctypes.c_int, [
	("ntree",		ctypes.POINTER(bNodeTree)),] )

ntreeTexSetPreviewFlag = _rpythonic_function_(		"ntreeTexSetPreviewFlag", ctypes.c_void_p, [
	("none",		ctypes.c_int),] )

ntreeTexExecTree = _rpythonic_function_(		"ntreeTexExecTree", ctypes.c_int, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("target",		ctypes.POINTER(TexResult)),
	("coord",		ctypes.POINTER(ctypes.c_float)),
	("dxt",		ctypes.POINTER(ctypes.c_float)),
	("dyt",		ctypes.POINTER(ctypes.c_float)),
	("osatex",		ctypes.c_int),
	("thread",		ctypes.c_short),
	("tex",		ctypes.POINTER(Tex)),
	("which_output",		ctypes.c_short),
	("cfra",		ctypes.c_int),
	("preview",		ctypes.c_int),
	("shi",		ctypes.POINTER(ShadeInput)),
	("mtex",		ctypes.POINTER(MTex)),] )

ntreeTexCheckCyclics = _rpythonic_function_(		"ntreeTexCheckCyclics", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),] )

ntreeTexOutputMenu = _rpythonic_function_(		"ntreeTexOutputMenu", ctypes.POINTER(ctypes.c_char), [
	("ntree",		ctypes.POINTER(bNodeTree)),] )

init_nodesystem = _rpythonic_function_(		"init_nodesystem", ctypes.c_void_p, [] )

free_nodesystem = _rpythonic_function_(		"free_nodesystem", ctypes.c_void_p, [] )

clear_scene_in_nodes = _rpythonic_function_(		"clear_scene_in_nodes", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("sce",		ctypes.POINTER(Scene)),] )

poll = _rpythonic_function_(		"poll", ctypes.c_int, [
	("bContext",		ctypes.POINTER(bContext)),] )

BKE_reports_init = _rpythonic_function_(		"BKE_reports_init", ctypes.c_void_p, [
	("reports",		ctypes.POINTER(ReportList)),
	("flag",		ctypes.c_int),] )

BKE_reports_clear = _rpythonic_function_(		"BKE_reports_clear", ctypes.c_void_p, [
	("reports",		ctypes.POINTER(ReportList)),] )

BKE_report = _rpythonic_function_(		"BKE_report", ctypes.c_void_p, [
	("reports",		ctypes.POINTER(ReportList)),
	("C_type",		ctypes.c_int),
	("message",		ctypes.POINTER(ctypes.c_char)),] )

BKE_reportf = _rpythonic_function_(		"BKE_reportf", ctypes.c_void_p, [
	("reports",		ctypes.POINTER(ReportList)),
	("C_type",		ctypes.c_int),
	("format",		ctypes.POINTER(ctypes.c_char)),] )

BKE_reports_prepend = _rpythonic_function_(		"BKE_reports_prepend", ctypes.c_void_p, [
	("reports",		ctypes.POINTER(ReportList)),
	("prepend",		ctypes.POINTER(ctypes.c_char)),] )

BKE_reports_prependf = _rpythonic_function_(		"BKE_reports_prependf", ctypes.c_void_p, [
	("reports",		ctypes.POINTER(ReportList)),
	("prepend",		ctypes.POINTER(ctypes.c_char)),] )

BKE_report_print_level = _rpythonic_function_(		"BKE_report_print_level", ctypes.c_int, [
	("reports",		ctypes.POINTER(ReportList)),] )

BKE_report_print_level_set = _rpythonic_function_(		"BKE_report_print_level_set", ctypes.c_void_p, [
	("reports",		ctypes.POINTER(ReportList)),
	("level",		ctypes.c_int),] )

BKE_report_store_level = _rpythonic_function_(		"BKE_report_store_level", ctypes.c_int, [
	("reports",		ctypes.POINTER(ReportList)),] )

BKE_report_store_level_set = _rpythonic_function_(		"BKE_report_store_level_set", ctypes.c_void_p, [
	("reports",		ctypes.POINTER(ReportList)),
	("level",		ctypes.c_int),] )

BKE_reports_string = _rpythonic_function_(		"BKE_reports_string", ctypes.POINTER(ctypes.c_char), [
	("reports",		ctypes.POINTER(ReportList)),
	("level",		ctypes.c_int),] )

BKE_reports_print = _rpythonic_function_(		"BKE_reports_print", ctypes.c_void_p, [
	("reports",		ctypes.POINTER(ReportList)),
	("level",		ctypes.c_int),] )

BKE_reports_last_displayable = _rpythonic_function_(		"BKE_reports_last_displayable", ctypes.POINTER(Report), [
	("reports",		ctypes.POINTER(ReportList)),] )

sound_init_once = _rpythonic_function_(		"sound_init_once", ctypes.c_void_p, [] )

sound_init = _rpythonic_function_(		"sound_init", ctypes.c_void_p, [
	("main",		ctypes.POINTER(Main)),] )

sound_init_main = _rpythonic_function_(		"sound_init_main", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),] )

sound_exit = _rpythonic_function_(		"sound_exit", ctypes.c_void_p, [] )

sound_force_device = _rpythonic_function_(		"sound_force_device", ctypes.c_void_p, [
	("device",		ctypes.c_int),] )

sound_define_from_str = _rpythonic_function_(		"sound_define_from_str", ctypes.c_int, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

sound_new_file = _rpythonic_function_(		"sound_new_file", ctypes.POINTER(bSound), [
	("main",		ctypes.POINTER(Main)),
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

sound_delete = _rpythonic_function_(		"sound_delete", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("sound",		ctypes.POINTER(bSound)),] )

sound_cache = _rpythonic_function_(		"sound_cache", ctypes.c_void_p, [
	("sound",		ctypes.POINTER(bSound)),] )

sound_cache_notifying = _rpythonic_function_(		"sound_cache_notifying", ctypes.c_void_p, [
	("main",		ctypes.POINTER(Main)),
	("sound",		ctypes.POINTER(bSound)),] )

sound_delete_cache = _rpythonic_function_(		"sound_delete_cache", ctypes.c_void_p, [
	("sound",		ctypes.POINTER(bSound)),] )

sound_load = _rpythonic_function_(		"sound_load", ctypes.c_void_p, [
	("main",		ctypes.POINTER(Main)),
	("sound",		ctypes.POINTER(bSound)),] )

sound_free = _rpythonic_function_(		"sound_free", ctypes.c_void_p, [
	("sound",		ctypes.POINTER(bSound)),] )

sound_create_scene = _rpythonic_function_(		"sound_create_scene", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),] )

sound_destroy_scene = _rpythonic_function_(		"sound_destroy_scene", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),] )

sound_mute_scene = _rpythonic_function_(		"sound_mute_scene", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("muted",		ctypes.c_int),] )

sound_update_fps = _rpythonic_function_(		"sound_update_fps", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),] )

sound_update_scene_listener = _rpythonic_function_(		"sound_update_scene_listener", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),] )

sound_scene_add_scene_sound = _rpythonic_function_(		"sound_scene_add_scene_sound", ctypes.POINTER(ctypes.c_void_p), [
	("scene",		ctypes.POINTER(Scene)),
	("sequence",		ctypes.POINTER(Sequence)),
	("startframe",		ctypes.c_int),
	("endframe",		ctypes.c_int),
	("frameskip",		ctypes.c_int),] )

sound_add_scene_sound = _rpythonic_function_(		"sound_add_scene_sound", ctypes.POINTER(ctypes.c_void_p), [
	("scene",		ctypes.POINTER(Scene)),
	("sequence",		ctypes.POINTER(Sequence)),
	("startframe",		ctypes.c_int),
	("endframe",		ctypes.c_int),
	("frameskip",		ctypes.c_int),] )

sound_remove_scene_sound = _rpythonic_function_(		"sound_remove_scene_sound", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("handle",		ctypes.POINTER(ctypes.c_void_p)),] )

sound_mute_scene_sound = _rpythonic_function_(		"sound_mute_scene_sound", ctypes.c_void_p, [
	("handle",		ctypes.POINTER(ctypes.c_void_p)),
	("mute",		ctypes.c_char),] )

sound_move_scene_sound = _rpythonic_function_(		"sound_move_scene_sound", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("handle",		ctypes.POINTER(ctypes.c_void_p)),
	("startframe",		ctypes.c_int),
	("endframe",		ctypes.c_int),
	("frameskip",		ctypes.c_int),] )

sound_update_scene_sound = _rpythonic_function_(		"sound_update_scene_sound", ctypes.c_void_p, [
	("handle",		ctypes.POINTER(ctypes.c_void_p)),
	("sound",		ctypes.POINTER(bSound)),] )

sound_set_cfra = _rpythonic_function_(		"sound_set_cfra", ctypes.c_void_p, [
	("cfra",		ctypes.c_int),] )

sound_set_scene_volume = _rpythonic_function_(		"sound_set_scene_volume", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("volume",		ctypes.c_float),] )

sound_set_scene_sound_volume = _rpythonic_function_(		"sound_set_scene_sound_volume", ctypes.c_void_p, [
	("handle",		ctypes.POINTER(ctypes.c_void_p)),
	("volume",		ctypes.c_float),
	("animated",		ctypes.c_char),] )

sound_set_scene_sound_pitch = _rpythonic_function_(		"sound_set_scene_sound_pitch", ctypes.c_void_p, [
	("handle",		ctypes.POINTER(ctypes.c_void_p)),
	("pitch",		ctypes.c_float),
	("animated",		ctypes.c_char),] )

sound_set_scene_sound_pan = _rpythonic_function_(		"sound_set_scene_sound_pan", ctypes.c_void_p, [
	("handle",		ctypes.POINTER(ctypes.c_void_p)),
	("pan",		ctypes.c_float),
	("animated",		ctypes.c_char),] )

sound_update_sequencer = _rpythonic_function_(		"sound_update_sequencer", ctypes.c_void_p, [
	("main",		ctypes.POINTER(Main)),
	("sound",		ctypes.POINTER(bSound)),] )

sound_play_scene = _rpythonic_function_(		"sound_play_scene", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),] )

sound_stop_scene = _rpythonic_function_(		"sound_stop_scene", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),] )

sound_seek_scene = _rpythonic_function_(		"sound_seek_scene", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

sound_sync_scene = _rpythonic_function_(		"sound_sync_scene", ctypes.c_float, [
	("scene",		ctypes.POINTER(Scene)),] )

sound_scene_playing = _rpythonic_function_(		"sound_scene_playing", ctypes.c_int, [
	("scene",		ctypes.POINTER(Scene)),] )

sound_free_waveform = _rpythonic_function_(		"sound_free_waveform", ctypes.c_void_p, [
	("sound",		ctypes.POINTER(bSound)),] )

sound_read_waveform = _rpythonic_function_(		"sound_read_waveform", ctypes.c_void_p, [
	("sound",		ctypes.POINTER(bSound)),] )

sound_update_scene = _rpythonic_function_(		"sound_update_scene", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),] )

sound_get_factory = _rpythonic_function_(		"sound_get_factory", ctypes.POINTER(ctypes.c_void_p), [("sound",		ctypes.c_void_p)] )

graph_action_func = _rpythonic_function_(		"graph_action_func", ctypes.c_void_p, [
	("ob",		ctypes.POINTER(ctypes.c_void_p)),
	("data",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

pop_ob_queue = _rpythonic_function_(		"pop_ob_queue", ctypes.POINTER(ctypes.c_void_p), [
	("queue",		ctypes.POINTER(DagNodeQueue)),] )

queue_count = _rpythonic_function_(		"queue_count", ctypes.c_int, [
	("queue",		ctypes.POINTER(DagNodeQueue)),] )

queue_delete = _rpythonic_function_(		"queue_delete", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(DagNodeQueue)),] )

build_dag = _rpythonic_function_(		"build_dag", ctypes.POINTER(DagForest), [
	("bmain",		ctypes.POINTER(Main)),
	("sce",		ctypes.POINTER(Scene)),
	("mask",		ctypes.c_short),] )

free_forest = _rpythonic_function_(		"free_forest", ctypes.c_void_p, [
	("Dag",		ctypes.POINTER(DagForest)),] )

pre_and_post_BFS = _rpythonic_function_(		"pre_and_post_BFS", ctypes.c_int, [
	("dag",		ctypes.POINTER(DagForest)),
	("mask",		ctypes.c_short),
	("pre_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)),)),
	("post_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)),)),
	("data",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

pre_and_post_DFS = _rpythonic_function_(		"pre_and_post_DFS", ctypes.c_int, [
	("dag",		ctypes.POINTER(DagForest)),
	("mask",		ctypes.c_short),
	("pre_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)),)),
	("post_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)),)),
	("data",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

pre_and_post_source_BFS = _rpythonic_function_(		"pre_and_post_source_BFS", ctypes.c_int, [
	("dag",		ctypes.POINTER(DagForest)),
	("mask",		ctypes.c_short),
	("source",		ctypes.POINTER(DagNode)),
	("pre_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)),)),
	("post_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)),)),
	("data",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

pre_and_post_source_DFS = _rpythonic_function_(		"pre_and_post_source_DFS", ctypes.c_int, [
	("dag",		ctypes.POINTER(DagForest)),
	("mask",		ctypes.c_short),
	("source",		ctypes.POINTER(DagNode)),
	("pre_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)),)),
	("post_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)),)),
	("data",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

get_obparents = _rpythonic_function_(		"get_obparents", ctypes.POINTER(DagNodeQueue), [
	("dag",		ctypes.POINTER(DagForest)),
	("ob",		ctypes.POINTER(ctypes.c_void_p)),] )

get_first_ancestors = _rpythonic_function_(		"get_first_ancestors", ctypes.POINTER(DagNodeQueue), [
	("dag",		ctypes.POINTER(DagForest)),
	("ob",		ctypes.POINTER(ctypes.c_void_p)),] )

get_all_childs = _rpythonic_function_(		"get_all_childs", ctypes.POINTER(DagNodeQueue), [
	("dag",		ctypes.POINTER(DagForest)),
	("ob",		ctypes.POINTER(ctypes.c_void_p)),] )

are_obs_related = _rpythonic_function_(		"are_obs_related", ctypes.c_short, [
	("dag",		ctypes.POINTER(DagForest)),
	("ob1",		ctypes.POINTER(ctypes.c_void_p)),
	("ob2",		ctypes.POINTER(ctypes.c_void_p)),] )

is_acyclic = _rpythonic_function_(		"is_acyclic", ctypes.c_int, [
	("dag",		ctypes.POINTER(DagForest)),] )

boundbox_deps = _rpythonic_function_(		"boundbox_deps", ctypes.c_void_p, [] )

draw_all_deps = _rpythonic_function_(		"draw_all_deps", ctypes.c_void_p, [] )

DAG_scene_sort = _rpythonic_function_(		"DAG_scene_sort", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("sce",		ctypes.POINTER(Scene)),] )

DAG_scene_update_flags = _rpythonic_function_(		"DAG_scene_update_flags", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("sce",		ctypes.POINTER(Scene)),
	("lay",		ctypes.c_uint),
	("do_time",		ctypes.c_short),] )

DAG_scene_flush_update = _rpythonic_function_(		"DAG_scene_flush_update", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("sce",		ctypes.POINTER(Scene)),
	("lay",		ctypes.c_uint),
	("do_time",		ctypes.c_short),] )

DAG_on_visible_update = _rpythonic_function_(		"DAG_on_visible_update", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("do_time",		ctypes.c_short),] )

DAG_ids_flush_update = _rpythonic_function_(		"DAG_ids_flush_update", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("time",		ctypes.c_int),] )

DAG_id_tag_update = _rpythonic_function_(		"DAG_id_tag_update", ctypes.c_void_p, [
	("C_id",		ctypes.POINTER(ID)),
	("flag",		ctypes.c_short),] )

DAG_ids_flush_tagged = _rpythonic_function_(		"DAG_ids_flush_tagged", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),] )

DAG_pose_sort = _rpythonic_function_(		"DAG_pose_sort", ctypes.c_void_p, [
	("ob",		ctypes.POINTER(Object)),] )

DAG_editors_update_cb = _rpythonic_function_(		"DAG_editors_update_cb", ctypes.c_void_p, [
	("func",		ctypes.c_void_p),] )

IDP_NewIDPArray = _rpythonic_function_(		"IDP_NewIDPArray", ctypes.POINTER(IDProperty), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

IDP_CopyIDPArray = _rpythonic_function_(		"IDP_CopyIDPArray", ctypes.POINTER(IDProperty), [
	("array",		ctypes.POINTER(IDProperty)),] )

IDP_FreeIDPArray = _rpythonic_function_(		"IDP_FreeIDPArray", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(IDProperty)),] )

IDP_SetIndexArray = _rpythonic_function_(		"IDP_SetIndexArray", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(IDProperty)),
	("index",		ctypes.c_int),
	("item",		ctypes.POINTER(IDProperty)),] )

IDP_GetIndexArray = _rpythonic_function_(		"IDP_GetIndexArray", ctypes.POINTER(IDProperty), [
	("prop",		ctypes.POINTER(IDProperty)),
	("index",		ctypes.c_int),] )

IDP_AppendArray = _rpythonic_function_(		"IDP_AppendArray", ctypes.POINTER(IDProperty), [
	("prop",		ctypes.POINTER(IDProperty)),
	("item",		ctypes.POINTER(IDProperty)),] )

IDP_ResizeIDPArray = _rpythonic_function_(		"IDP_ResizeIDPArray", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(IDProperty)),
	("C_len",		ctypes.c_int),] )

IDP_ResizeArray = _rpythonic_function_(		"IDP_ResizeArray", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(IDProperty)),
	("newlen",		ctypes.c_int),] )

IDP_FreeArray = _rpythonic_function_(		"IDP_FreeArray", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(IDProperty)),] )

IDP_UnlinkArray = _rpythonic_function_(		"IDP_UnlinkArray", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(IDProperty)),] )

IDP_NewString = _rpythonic_function_(		"IDP_NewString", ctypes.POINTER(IDProperty), [
	("st",		ctypes.POINTER(ctypes.c_char)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("maxlen",		ctypes.c_int),] )

IDP_AssignString = _rpythonic_function_(		"IDP_AssignString", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(IDProperty)),
	("st",		ctypes.POINTER(ctypes.c_char)),
	("maxlen",		ctypes.c_int),] )

IDP_ConcatStringC = _rpythonic_function_(		"IDP_ConcatStringC", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(IDProperty)),
	("st",		ctypes.POINTER(ctypes.c_char)),] )

IDP_ConcatString = _rpythonic_function_(		"IDP_ConcatString", ctypes.c_void_p, [
	("str1",		ctypes.POINTER(IDProperty)),
	("append",		ctypes.POINTER(IDProperty)),] )

IDP_FreeString = _rpythonic_function_(		"IDP_FreeString", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(IDProperty)),] )

IDP_LinkID = _rpythonic_function_(		"IDP_LinkID", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(IDProperty)),
	("C_id",		ctypes.POINTER(ID)),] )

IDP_UnlinkID = _rpythonic_function_(		"IDP_UnlinkID", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(IDProperty)),] )

IDP_SyncGroupValues = _rpythonic_function_(		"IDP_SyncGroupValues", ctypes.c_void_p, [
	("dest",		ctypes.POINTER(IDProperty)),
	("src",		ctypes.POINTER(IDProperty)),] )

IDP_ReplaceGroupInGroup = _rpythonic_function_(		"IDP_ReplaceGroupInGroup", ctypes.c_void_p, [
	("dest",		ctypes.POINTER(IDProperty)),
	("src",		ctypes.POINTER(IDProperty)),] )

IDP_ReplaceInGroup = _rpythonic_function_(		"IDP_ReplaceInGroup", ctypes.c_void_p, [
	("group",		ctypes.POINTER(IDProperty)),
	("prop",		ctypes.POINTER(IDProperty)),] )

IDP_AddToGroup = _rpythonic_function_(		"IDP_AddToGroup", ctypes.c_int, [
	("group",		ctypes.POINTER(IDProperty)),
	("prop",		ctypes.POINTER(IDProperty)),] )

IDP_InsertToGroup = _rpythonic_function_(		"IDP_InsertToGroup", ctypes.c_int, [
	("group",		ctypes.POINTER(IDProperty)),
	("previous",		ctypes.POINTER(IDProperty)),
	("pnew",		ctypes.POINTER(IDProperty)),] )

IDP_RemFromGroup = _rpythonic_function_(		"IDP_RemFromGroup", ctypes.c_void_p, [
	("group",		ctypes.POINTER(IDProperty)),
	("prop",		ctypes.POINTER(IDProperty)),] )

IDP_GetPropertyFromGroup = _rpythonic_function_(		"IDP_GetPropertyFromGroup", ctypes.POINTER(IDProperty), [
	("prop",		ctypes.POINTER(IDProperty)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

IDP_GetPropertyTypeFromGroup = _rpythonic_function_(		"IDP_GetPropertyTypeFromGroup", ctypes.POINTER(IDProperty), [
	("prop",		ctypes.POINTER(IDProperty)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("C_type",		ctypes.c_char),] )

IDP_GetGroupIterator = _rpythonic_function_(		"IDP_GetGroupIterator", ctypes.POINTER(ctypes.c_void_p), [
	("prop",		ctypes.POINTER(IDProperty)),] )

IDP_GroupIterNext = _rpythonic_function_(		"IDP_GroupIterNext", ctypes.POINTER(IDProperty), [("vself",		ctypes.c_void_p)] )

IDP_FreeIterBeforeEnd = _rpythonic_function_(		"IDP_FreeIterBeforeEnd", ctypes.c_void_p, [("vself",		ctypes.c_void_p)] )

IDP_GetProperties = _rpythonic_function_(		"IDP_GetProperties", ctypes.POINTER(IDProperty), [
	("C_id",		ctypes.POINTER(ID)),
	("create_if_needed",		ctypes.c_int),] )

IDP_CopyProperty = _rpythonic_function_(		"IDP_CopyProperty", ctypes.POINTER(IDProperty), [
	("prop",		ctypes.POINTER(IDProperty)),] )

IDP_EqualsProperties = _rpythonic_function_(		"IDP_EqualsProperties", ctypes.c_int, [
	("prop1",		ctypes.POINTER(IDProperty)),
	("prop2",		ctypes.POINTER(IDProperty)),] )

IDP_New = _rpythonic_function_(		"IDP_New", ctypes.POINTER(IDProperty), [
	("C_type",		ctypes.c_int),
	("val",		IDPropertyTemplate),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

IDP_FreeProperty = _rpythonic_function_(		"IDP_FreeProperty", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(IDProperty)),] )

IDP_UnlinkProperty = _rpythonic_function_(		"IDP_UnlinkProperty", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(IDProperty)),] )

alloc_libblock = _rpythonic_function_(		"alloc_libblock", ctypes.POINTER(ctypes.c_void_p), [
	("lb",		ctypes.POINTER(ListBase)),
	("C_type",		ctypes.c_short),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

copy_libblock = _rpythonic_function_(		"copy_libblock", ctypes.POINTER(ctypes.c_void_p), [("rt",		ctypes.c_void_p)] )

copy_libblock_data = _rpythonic_function_(		"copy_libblock_data", ctypes.c_void_p, [
	("C_id",		ctypes.POINTER(ID)),
	("id_from",		ctypes.POINTER(ID)),
	("do_action",		ctypes.c_short),] )

id_lib_extern = _rpythonic_function_(		"id_lib_extern", ctypes.c_void_p, [
	("C_id",		ctypes.POINTER(ID)),] )

id_us_plus = _rpythonic_function_(		"id_us_plus", ctypes.c_void_p, [
	("C_id",		ctypes.POINTER(ID)),] )

id_us_min = _rpythonic_function_(		"id_us_min", ctypes.c_void_p, [
	("C_id",		ctypes.POINTER(ID)),] )

id_make_local = _rpythonic_function_(		"id_make_local", ctypes.c_int, [
	("C_id",		ctypes.POINTER(ID)),
	("test",		ctypes.c_int),] )

id_single_user = _rpythonic_function_(		"id_single_user", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("C_id",		ctypes.POINTER(ID)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("prop",		ctypes.POINTER(PropertyRNA)),] )

id_copy = _rpythonic_function_(		"id_copy", ctypes.c_int, [
	("C_id",		ctypes.POINTER(ID)),
	("newid",		ctypes.POINTER(ctypes.POINTER(ID))),
	("test",		ctypes.c_int),] )

id_unlink = _rpythonic_function_(		"id_unlink", ctypes.c_int, [
	("C_id",		ctypes.POINTER(ID)),
	("test",		ctypes.c_int),] )

new_id = _rpythonic_function_(		"new_id", ctypes.c_int, [
	("lb",		ctypes.POINTER(ListBase)),
	("C_id",		ctypes.POINTER(ID)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

which_libbase = _rpythonic_function_(		"which_libbase", ctypes.POINTER(ListBase), [
	("mainlib",		ctypes.POINTER(Main)),
	("C_type",		ctypes.c_short),] )

set_listbasepointers = _rpythonic_function_(		"set_listbasepointers", ctypes.c_int, [
	("main",		ctypes.POINTER(Main)),
	("lb",		ctypes.POINTER(ctypes.POINTER(ListBase))),] )

free_libblock = _rpythonic_function_(		"free_libblock", ctypes.c_void_p, [
	("lb",		ctypes.POINTER(ListBase)),
	("idv",		ctypes.POINTER(ctypes.c_void_p)),] )

free_libblock_us = _rpythonic_function_(		"free_libblock_us", ctypes.c_void_p, [
	("lb",		ctypes.POINTER(ListBase)),
	("idv",		ctypes.POINTER(ctypes.c_void_p)),] )

free_main = _rpythonic_function_(		"free_main", ctypes.c_void_p, [
	("mainvar",		ctypes.POINTER(Main)),] )

tag_main_idcode = _rpythonic_function_(		"tag_main_idcode", ctypes.c_void_p, [
	("mainvar",		ctypes.POINTER(Main)),
	("C_type",		ctypes.c_short),
	("tag",		ctypes.c_short),] )

tag_main_lb = _rpythonic_function_(		"tag_main_lb", ctypes.c_void_p, [
	("lb",		ctypes.POINTER(ListBase)),
	("tag",		ctypes.c_short),] )

tag_main = _rpythonic_function_(		"tag_main", ctypes.c_void_p, [
	("mainvar",		ctypes.POINTER(Main)),
	("tag",		ctypes.c_short),] )

rename_id = _rpythonic_function_(		"rename_id", ctypes.c_void_p, [
	("C_id",		ctypes.POINTER(ID)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

name_uiprefix_id = _rpythonic_function_(		"name_uiprefix_id", ctypes.c_void_p, [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("C_id",		ctypes.POINTER(ID)),] )

test_idbutton = _rpythonic_function_(		"test_idbutton", ctypes.c_void_p, [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

text_idbutton = _rpythonic_function_(		"text_idbutton", ctypes.c_void_p, [
	("C_id",		ctypes.POINTER(ID)),
	("text",		ctypes.POINTER(ctypes.c_char)),] )

all_local = _rpythonic_function_(		"all_local", ctypes.c_void_p, [
	("lib",		ctypes.POINTER(Library)),
	("untagged_only",		ctypes.c_int),] )

find_id = _rpythonic_function_(		"find_id", ctypes.POINTER(ID), [
	("C_type",		ctypes.POINTER(ctypes.c_char)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

clear_id_newpoins = _rpythonic_function_(		"clear_id_newpoins", ctypes.c_void_p, [] )

IDnames_to_pupstring = _rpythonic_function_(		"IDnames_to_pupstring", ctypes.c_void_p, [
	("C_str",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("title",		ctypes.POINTER(ctypes.c_char)),
	("extraops",		ctypes.POINTER(ctypes.c_char)),
	("lb",		ctypes.POINTER(ListBase)),
	("link",		ctypes.POINTER(ID)),
	("nr",		ctypes.POINTER(ctypes.c_short)),] )

IMAnames_to_pupstring = _rpythonic_function_(		"IMAnames_to_pupstring", ctypes.c_void_p, [
	("C_str",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("title",		ctypes.POINTER(ctypes.c_char)),
	("extraops",		ctypes.POINTER(ctypes.c_char)),
	("lb",		ctypes.POINTER(ListBase)),
	("link",		ctypes.POINTER(ID)),
	("nr",		ctypes.POINTER(ctypes.c_short)),] )

IPOnames_to_pupstring = _rpythonic_function_(		"IPOnames_to_pupstring", ctypes.c_void_p, [
	("C_str",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("title",		ctypes.POINTER(ctypes.c_char)),
	("extraops",		ctypes.POINTER(ctypes.c_char)),
	("lb",		ctypes.POINTER(ListBase)),
	("link",		ctypes.POINTER(ID)),
	("nr",		ctypes.POINTER(ctypes.c_short)),
	("blocktype",		ctypes.c_int),] )

flag_listbase_ids = _rpythonic_function_(		"flag_listbase_ids", ctypes.c_void_p, [
	("lb",		ctypes.POINTER(ListBase)),
	("flag",		ctypes.c_short),
	("value",		ctypes.c_short),] )

flag_all_listbases_ids = _rpythonic_function_(		"flag_all_listbases_ids", ctypes.c_void_p, [
	("flag",		ctypes.c_short),
	("value",		ctypes.c_short),] )

recalc_all_library_objects = _rpythonic_function_(		"recalc_all_library_objects", ctypes.c_void_p, [
	("main",		ctypes.POINTER(Main)),] )

set_free_windowmanager_cb = _rpythonic_function_(		"set_free_windowmanager_cb", ctypes.c_void_p, [
	("func",		ctypes.c_void_p),] )

new = _rpythonic_function_(		"new", ctypes.POINTER(SpaceLink), [
	("C",		ctypes.POINTER(bContext)),] )

init = _rpythonic_function_(		"init", ctypes.c_void_p, [
	("wmWindowManager",		ctypes.POINTER(wmWindowManager)),
	("ScrArea",		ctypes.POINTER(ScrArea)),] )

listener = _rpythonic_function_(		"listener", ctypes.c_void_p, [
	("ScrArea",		ctypes.POINTER(ScrArea)),
	("wmNotifier",		ctypes.POINTER(wmNotifier)),] )

refresh = _rpythonic_function_(		"refresh", ctypes.c_void_p, [
	("bContext",		ctypes.POINTER(bContext)),
	("ScrArea",		ctypes.POINTER(ScrArea)),] )

duplicate = _rpythonic_function_(		"duplicate", ctypes.POINTER(SpaceLink), [
	("SpaceLink",		ctypes.POINTER(SpaceLink)),] )

operatortypes = _rpythonic_function_(		"operatortypes", ctypes.c_void_p, [] )

keymap = _rpythonic_function_(		"keymap", ctypes.c_void_p, [
	("wmKeyConfig",		ctypes.POINTER(wmKeyConfig)),] )

dropboxes = _rpythonic_function_(		"dropboxes", ctypes.c_void_p, [] )

context = _rpythonic_function_(		"context", ctypes.c_int, [
	("bContext",		ctypes.POINTER(bContext)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("bContextDataResult",		ctypes.POINTER(bContextDataResult)),] )

draw = _rpythonic_function_(		"draw", ctypes.c_void_p, [
	("bContext",		ctypes.POINTER(bContext)),
	("ARegion",		ctypes.POINTER(ARegion)),] )

cursor = _rpythonic_function_(		"cursor", ctypes.c_void_p, [
	("wmWindow",		ctypes.POINTER(wmWindow)),
	("ScrArea",		ctypes.POINTER(ScrArea)),
	("ar",		ctypes.POINTER(ARegion)),] )

draw_header = _rpythonic_function_(		"draw_header", ctypes.c_void_p, [
	("bContext",		ctypes.POINTER(bContext)),
	("Panel",		ctypes.POINTER(Panel)),] )

BKE_spacetype_from_id = _rpythonic_function_(		"BKE_spacetype_from_id", ctypes.POINTER(SpaceType), [
	("spaceid",		ctypes.c_int),] )

BKE_regiontype_from_id = _rpythonic_function_(		"BKE_regiontype_from_id", ctypes.POINTER(ARegionType), [
	("st",		ctypes.POINTER(SpaceType)),
	("regionid",		ctypes.c_int),] )

BKE_spacetypes_list = _rpythonic_function_(		"BKE_spacetypes_list", ctypes.POINTER(ListBase), [] )

BKE_spacetype_register = _rpythonic_function_(		"BKE_spacetype_register", ctypes.c_void_p, [
	("st",		ctypes.POINTER(SpaceType)),] )

BKE_spacetypes_free = _rpythonic_function_(		"BKE_spacetypes_free", ctypes.c_void_p, [] )

BKE_spacedata_freelist = _rpythonic_function_(		"BKE_spacedata_freelist", ctypes.c_void_p, [
	("lb",		ctypes.POINTER(ListBase)),] )

BKE_spacedata_copylist = _rpythonic_function_(		"BKE_spacedata_copylist", ctypes.c_void_p, [
	("lb1",		ctypes.POINTER(ListBase)),
	("lb2",		ctypes.POINTER(ListBase)),] )

BKE_spacedata_draw_locks = _rpythonic_function_(		"BKE_spacedata_draw_locks", ctypes.c_void_p, [
	("set",		ctypes.c_int),] )

BKE_area_region_copy = _rpythonic_function_(		"BKE_area_region_copy", ctypes.POINTER(ARegion), [
	("st",		ctypes.POINTER(SpaceType)),
	("ar",		ctypes.POINTER(ARegion)),] )

BKE_area_region_free = _rpythonic_function_(		"BKE_area_region_free", ctypes.c_void_p, [
	("st",		ctypes.POINTER(SpaceType)),
	("ar",		ctypes.POINTER(ARegion)),] )

BKE_screen_area_free = _rpythonic_function_(		"BKE_screen_area_free", ctypes.c_void_p, [
	("sa",		ctypes.POINTER(ScrArea)),] )

BKE_area_find_region_type = _rpythonic_function_(		"BKE_area_find_region_type", ctypes.POINTER(ARegion), [
	("sa",		ctypes.POINTER(ScrArea)),
	("C_type",		ctypes.c_int),] )

BKE_screen_view3d_sync = _rpythonic_function_(		"BKE_screen_view3d_sync", ctypes.c_void_p, [
	("v3d",		ctypes.POINTER(View3D)),
	("scene",		ctypes.POINTER(Scene)),] )

BKE_screen_view3d_scene_sync = _rpythonic_function_(		"BKE_screen_view3d_scene_sync", ctypes.c_void_p, [
	("sc",		ctypes.POINTER(bScreen)),] )

BKE_screen_view3d_main_sync = _rpythonic_function_(		"BKE_screen_view3d_main_sync", ctypes.c_void_p, [
	("screen_lb",		ctypes.POINTER(ListBase)),
	("scene",		ctypes.POINTER(Scene)),] )

BKE_screen_view3d_zoom_to_fac = _rpythonic_function_(		"BKE_screen_view3d_zoom_to_fac", ctypes.c_float, [
	("camzoom",		ctypes.c_float),] )

BKE_screen_view3d_zoom_from_fac = _rpythonic_function_(		"BKE_screen_view3d_zoom_from_fac", ctypes.c_float, [
	("zoomfac",		ctypes.c_float),] )

free_screen = _rpythonic_function_(		"free_screen", ctypes.c_void_p, [
	("sc",		ctypes.POINTER(bScreen)),] )

BKE_screen_visible_layers = _rpythonic_function_(		"BKE_screen_visible_layers", ctypes.c_uint, [
	("screen",		ctypes.POINTER(bScreen)),
	("scene",		ctypes.POINTER(Scene)),] )

BKE_idcode_to_name = _rpythonic_function_(		"BKE_idcode_to_name", ctypes.POINTER(ctypes.c_char), [
	("code",		ctypes.c_int),] )

BKE_idcode_to_name_plural = _rpythonic_function_(		"BKE_idcode_to_name_plural", ctypes.POINTER(ctypes.c_char), [
	("code",		ctypes.c_int),] )

BKE_idcode_from_name = _rpythonic_function_(		"BKE_idcode_from_name", ctypes.c_int, [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

BKE_idcode_is_linkable = _rpythonic_function_(		"BKE_idcode_is_linkable", ctypes.c_int, [
	("code",		ctypes.c_int),] )

BKE_idcode_is_valid = _rpythonic_function_(		"BKE_idcode_is_valid", ctypes.c_int, [
	("code",		ctypes.c_int),] )

BKE_idcode_iter_step = _rpythonic_function_(		"BKE_idcode_iter_step", ctypes.c_int, [
	("index",		ctypes.POINTER(ctypes.c_int)),] )

free_image = _rpythonic_function_(		"free_image", ctypes.c_void_p, [
	("me",		ctypes.POINTER(Image)),] )

BKE_stamp_info = _rpythonic_function_(		"BKE_stamp_info", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("camera",		ctypes.POINTER(Object)),
	("ibuf",		ctypes.POINTER(ImBuf)),] )

BKE_stamp_buf = _rpythonic_function_(		"BKE_stamp_buf", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("camera",		ctypes.POINTER(Object)),
	("rect",		ctypes.POINTER(ctypes.c_ubyte)),
	("rectf",		ctypes.POINTER(ctypes.c_float)),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("channels",		ctypes.c_int),] )

BKE_alphatest_ibuf = _rpythonic_function_(		"BKE_alphatest_ibuf", ctypes.c_int, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

BKE_write_ibuf_stamp = _rpythonic_function_(		"BKE_write_ibuf_stamp", ctypes.c_int, [
	("scene",		ctypes.POINTER(Scene)),
	("camera",		ctypes.POINTER(Object)),
	("ibuf",		ctypes.POINTER(ImBuf)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("imtype",		ctypes.c_int),
	("subimtype",		ctypes.c_int),
	("quality",		ctypes.c_int),] )

BKE_write_ibuf = _rpythonic_function_(		"BKE_write_ibuf", ctypes.c_int, [
	("ibuf",		ctypes.POINTER(ImBuf)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("imtype",		ctypes.c_int),
	("subimtype",		ctypes.c_int),
	("quality",		ctypes.c_int),] )

BKE_makepicstring = _rpythonic_function_(		"BKE_makepicstring", ctypes.c_void_p, [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("base",		ctypes.POINTER(ctypes.c_char)),
	("frame",		ctypes.c_int),
	("imtype",		ctypes.c_int),
	("use_ext",		ctypes.c_short),
	("use_frames",		ctypes.c_short),] )

BKE_add_image_extension = _rpythonic_function_(		"BKE_add_image_extension", ctypes.c_int, [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("imtype",		ctypes.c_int),] )

BKE_ftype_to_imtype = _rpythonic_function_(		"BKE_ftype_to_imtype", ctypes.c_int, [
	("ftype",		ctypes.c_int),] )

BKE_imtype_to_ftype = _rpythonic_function_(		"BKE_imtype_to_ftype", ctypes.c_int, [
	("imtype",		ctypes.c_int),] )

BKE_imtype_is_movie = _rpythonic_function_(		"BKE_imtype_is_movie", ctypes.c_int, [
	("imtype",		ctypes.c_int),] )

openanim = _rpythonic_function_(		"openanim", ctypes.POINTER(anim), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("streamindex",		ctypes.c_int),] )

image_de_interlace = _rpythonic_function_(		"image_de_interlace", ctypes.c_void_p, [
	("ima",		ctypes.POINTER(Image)),
	("odd",		ctypes.c_int),] )

tag_image_time = _rpythonic_function_(		"tag_image_time", ctypes.c_void_p, [
	("ima",		ctypes.POINTER(Image)),] )

free_old_images = _rpythonic_function_(		"free_old_images", ctypes.c_void_p, [] )

BKE_image_get_ibuf = _rpythonic_function_(		"BKE_image_get_ibuf", ctypes.POINTER(ImBuf), [
	("ima",		ctypes.POINTER(Image)),
	("iuser",		ctypes.POINTER(ImageUser)),] )

BKE_image_acquire_ibuf = _rpythonic_function_(		"BKE_image_acquire_ibuf", ctypes.POINTER(ImBuf), [
	("ima",		ctypes.POINTER(Image)),
	("iuser",		ctypes.POINTER(ImageUser)),
	("lock_r",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

BKE_image_release_ibuf = _rpythonic_function_(		"BKE_image_release_ibuf", ctypes.c_void_p, [
	("ima",		ctypes.POINTER(Image)),
	("lock",		ctypes.POINTER(ctypes.c_void_p)),] )

BKE_add_image_file = _rpythonic_function_(		"BKE_add_image_file", ctypes.POINTER(Image), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

BKE_add_image_size = _rpythonic_function_(		"BKE_add_image_size", ctypes.POINTER(Image), [
	("width",		ctypes.c_uint),
	("height",		ctypes.c_uint),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("depth",		ctypes.c_int),
	("floatbuf",		ctypes.c_int),
	("uvtestgrid",		ctypes.c_short),
	("color",		( ctypes.c_float * 4 )),] )

BKE_add_image_imbuf = _rpythonic_function_(		"BKE_add_image_imbuf", ctypes.POINTER(Image), [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

BKE_image_signal = _rpythonic_function_(		"BKE_image_signal", ctypes.c_void_p, [
	("ima",		ctypes.POINTER(Image)),
	("iuser",		ctypes.POINTER(ImageUser)),
	("signal",		ctypes.c_int),] )

BKE_image_verify_viewer = _rpythonic_function_(		"BKE_image_verify_viewer", ctypes.POINTER(Image), [
	("C_type",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

BKE_image_assign_ibuf = _rpythonic_function_(		"BKE_image_assign_ibuf", ctypes.c_void_p, [
	("ima",		ctypes.POINTER(Image)),
	("ibuf",		ctypes.POINTER(ImBuf)),] )

BKE_image_user_calc_frame = _rpythonic_function_(		"BKE_image_user_calc_frame", ctypes.c_void_p, [
	("iuser",		ctypes.POINTER(ImageUser)),
	("cfra",		ctypes.c_int),
	("fieldnr",		ctypes.c_int),] )

BKE_image_user_get_frame = _rpythonic_function_(		"BKE_image_user_get_frame", ctypes.c_int, [
	("iuser",		ctypes.POINTER(ImageUser)),
	("cfra",		ctypes.c_int),
	("fieldnr",		ctypes.c_int),] )

BKE_image_user_new_image = _rpythonic_function_(		"BKE_image_user_new_image", ctypes.c_void_p, [
	("ima",		ctypes.POINTER(Image)),
	("iuser",		ctypes.POINTER(ImageUser)),] )

BKE_image_multilayer_index = _rpythonic_function_(		"BKE_image_multilayer_index", ctypes.POINTER(RenderPass), [
	("rr",		ctypes.POINTER(RenderResult)),
	("iuser",		ctypes.POINTER(ImageUser)),] )

BKE_image_acquire_renderresult = _rpythonic_function_(		"BKE_image_acquire_renderresult", ctypes.POINTER(RenderResult), [
	("scene",		ctypes.POINTER(Scene)),
	("ima",		ctypes.POINTER(Image)),] )

BKE_image_release_renderresult = _rpythonic_function_(		"BKE_image_release_renderresult", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("ima",		ctypes.POINTER(Image)),] )

BKE_image_backup_render = _rpythonic_function_(		"BKE_image_backup_render", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("ima",		ctypes.POINTER(Image)),] )

BKE_image_free_all_textures = _rpythonic_function_(		"BKE_image_free_all_textures", ctypes.c_void_p, [] )

BKE_image_free_anim_ibufs = _rpythonic_function_(		"BKE_image_free_anim_ibufs", ctypes.c_void_p, [
	("ima",		ctypes.POINTER(Image)),
	("except_frame",		ctypes.c_int),] )

BKE_image_all_free_anim_ibufs = _rpythonic_function_(		"BKE_image_all_free_anim_ibufs", ctypes.c_void_p, [
	("except_frame",		ctypes.c_int),] )

BKE_image_memorypack = _rpythonic_function_(		"BKE_image_memorypack", ctypes.c_void_p, [
	("ima",		ctypes.POINTER(Image)),] )

BKE_image_print_memlist = _rpythonic_function_(		"BKE_image_print_memlist", ctypes.c_void_p, [] )

copy_image = _rpythonic_function_(		"copy_image", ctypes.POINTER(Image), [
	("ima",		ctypes.POINTER(Image)),] )

BKE_image_merge = _rpythonic_function_(		"BKE_image_merge", ctypes.c_void_p, [
	("dest",		ctypes.POINTER(Image)),
	("source",		ctypes.POINTER(Image)),] )

BKE_image_buf_fill_color = _rpythonic_function_(		"BKE_image_buf_fill_color", ctypes.c_void_p, [
	("rect",		ctypes.POINTER(ctypes.c_ubyte)),
	("rect_float",		ctypes.POINTER(ctypes.c_float)),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("color",		( ctypes.c_float * 4 )),] )

BKE_image_buf_fill_checker = _rpythonic_function_(		"BKE_image_buf_fill_checker", ctypes.c_void_p, [
	("rect",		ctypes.POINTER(ctypes.c_ubyte)),
	("rect_float",		ctypes.POINTER(ctypes.c_float)),
	("height",		ctypes.c_int),
	("width",		ctypes.c_int),] )

BKE_image_buf_fill_checker_color = _rpythonic_function_(		"BKE_image_buf_fill_checker_color", ctypes.c_void_p, [
	("rect",		ctypes.POINTER(ctypes.c_ubyte)),
	("rect_float",		ctypes.POINTER(ctypes.c_float)),
	("height",		ctypes.c_int),
	("width",		ctypes.c_int),] )

IMB_init = _rpythonic_function_(		"IMB_init", ctypes.c_void_p, [] )

IMB_exit = _rpythonic_function_(		"IMB_exit", ctypes.c_void_p, [] )

IMB_ibImageFromMemory = _rpythonic_function_(		"IMB_ibImageFromMemory", ctypes.POINTER(ImBuf), [
	("mem",		ctypes.POINTER(ctypes.c_ubyte)),
	("size",		ctypes.c_uint),
	("flags",		ctypes.c_int),] )

IMB_testiffname = _rpythonic_function_(		"IMB_testiffname", ctypes.POINTER(ImBuf), [
	("naam",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),] )

IMB_loadiffname = _rpythonic_function_(		"IMB_loadiffname", ctypes.POINTER(ImBuf), [
	("naam",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),] )

IMB_freeImBuf = _rpythonic_function_(		"IMB_freeImBuf", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

IMB_allocImBuf = _rpythonic_function_(		"IMB_allocImBuf", ctypes.POINTER(ImBuf), [
	("x",		ctypes.c_uint),
	("y",		ctypes.c_uint),
	("d",		ctypes.c_ubyte),
	("flags",		ctypes.c_uint),] )

IMB_refImBuf = _rpythonic_function_(		"IMB_refImBuf", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

IMB_makeSingleUser = _rpythonic_function_(		"IMB_makeSingleUser", ctypes.POINTER(ImBuf), [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

IMB_cache_limiter_insert = _rpythonic_function_(		"IMB_cache_limiter_insert", ctypes.c_void_p, [
	("i",		ctypes.POINTER(ImBuf)),] )

IMB_cache_limiter_unmanage = _rpythonic_function_(		"IMB_cache_limiter_unmanage", ctypes.c_void_p, [
	("i",		ctypes.POINTER(ImBuf)),] )

IMB_cache_limiter_touch = _rpythonic_function_(		"IMB_cache_limiter_touch", ctypes.c_void_p, [
	("i",		ctypes.POINTER(ImBuf)),] )

IMB_cache_limiter_ref = _rpythonic_function_(		"IMB_cache_limiter_ref", ctypes.c_void_p, [
	("i",		ctypes.POINTER(ImBuf)),] )

IMB_cache_limiter_unref = _rpythonic_function_(		"IMB_cache_limiter_unref", ctypes.c_void_p, [
	("i",		ctypes.POINTER(ImBuf)),] )

IMB_cache_limiter_get_refcount = _rpythonic_function_(		"IMB_cache_limiter_get_refcount", ctypes.c_int, [
	("i",		ctypes.POINTER(ImBuf)),] )

IMB_free_cache_limiter = _rpythonic_function_(		"IMB_free_cache_limiter", ctypes.c_void_p, [] )

IMB_dupImBuf = _rpythonic_function_(		"IMB_dupImBuf", ctypes.POINTER(ImBuf), [
	("ibuf1",		ctypes.POINTER(ImBuf)),] )

addzbufImBuf = _rpythonic_function_(		"addzbufImBuf", ctypes.c_short, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

addzbuffloatImBuf = _rpythonic_function_(		"addzbuffloatImBuf", ctypes.c_short, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

IMB_blend_color = _rpythonic_function_(		"IMB_blend_color", ctypes.c_uint, [
	("src1",		ctypes.c_uint),
	("src2",		ctypes.c_uint),
	("fac",		ctypes.c_int),
	("mode",		ctypes.c_int),] )

IMB_blend_color_float = _rpythonic_function_(		"IMB_blend_color_float", ctypes.c_void_p, [
	("dst",		ctypes.POINTER(ctypes.c_float)),
	("src1",		ctypes.POINTER(ctypes.c_float)),
	("src2",		ctypes.POINTER(ctypes.c_float)),
	("fac",		ctypes.c_float),
	("mode",		ctypes.c_int),] )

IMB_rectclip = _rpythonic_function_(		"IMB_rectclip", ctypes.c_void_p, [
	("dbuf",		ctypes.POINTER(ImBuf)),
	("sbuf",		ctypes.POINTER(ImBuf)),
	("destx",		ctypes.POINTER(ctypes.c_int)),
	("desty",		ctypes.POINTER(ctypes.c_int)),
	("srcx",		ctypes.POINTER(ctypes.c_int)),
	("srcy",		ctypes.POINTER(ctypes.c_int)),
	("width",		ctypes.POINTER(ctypes.c_int)),
	("height",		ctypes.POINTER(ctypes.c_int)),] )

IMB_rectcpy = _rpythonic_function_(		"IMB_rectcpy", ctypes.c_void_p, [
	("drect",		ctypes.POINTER(ImBuf)),
	("srect",		ctypes.POINTER(ImBuf)),
	("destx",		ctypes.c_int),
	("desty",		ctypes.c_int),
	("srcx",		ctypes.c_int),
	("srcy",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

IMB_rectblend = _rpythonic_function_(		"IMB_rectblend", ctypes.c_void_p, [
	("dbuf",		ctypes.POINTER(ImBuf)),
	("sbuf",		ctypes.POINTER(ImBuf)),
	("destx",		ctypes.c_int),
	("desty",		ctypes.c_int),
	("srcx",		ctypes.c_int),
	("srcy",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("mode",		ctypes.c_int),] )

IMB_anim_set_index_dir = _rpythonic_function_(		"IMB_anim_set_index_dir", ctypes.c_void_p, [
	("anim",		ctypes.POINTER(anim)),
	("dir",		ctypes.POINTER(ctypes.c_char)),] )

IMB_anim_index_get_frame_index = _rpythonic_function_(		"IMB_anim_index_get_frame_index", ctypes.c_int, [
	("anim",		ctypes.POINTER(anim)),
	("tc",		ctypes.c_int),
	("position",		ctypes.c_int),] )

IMB_anim_index_rebuild = _rpythonic_function_(		"IMB_anim_index_rebuild", ctypes.c_void_p, [
	("anim",		ctypes.POINTER(anim)),
	("build_tcs",		ctypes.c_int),
	("build_preview_sizes",		ctypes.c_int),
	("build_quality",		ctypes.c_int),
	("stop",		ctypes.POINTER(ctypes.c_short)),
	("do_update",		ctypes.POINTER(ctypes.c_short)),
	("progress",		ctypes.POINTER(ctypes.c_float)),] )

IMB_anim_get_duration = _rpythonic_function_(		"IMB_anim_get_duration", ctypes.c_int, [
	("anim",		ctypes.POINTER(anim)),
	("tc",		ctypes.c_int),] )

IMB_anim_get_fps = _rpythonic_function_(		"IMB_anim_get_fps", ctypes.c_int, [
	("anim",		ctypes.POINTER(anim)),
	("frs_sec",		ctypes.POINTER(ctypes.c_short)),
	("frs_sec_base",		ctypes.POINTER(ctypes.c_float)),] )

IMB_open_anim = _rpythonic_function_(		"IMB_open_anim", ctypes.POINTER(anim), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("ib_flags",		ctypes.c_int),
	("streamindex",		ctypes.c_int),] )

IMB_close_anim = _rpythonic_function_(		"IMB_close_anim", ctypes.c_void_p, [
	("anim",		ctypes.POINTER(anim)),] )

ismovie = _rpythonic_function_(		"ismovie", ctypes.c_int, [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

IMB_anim_set_preseek = _rpythonic_function_(		"IMB_anim_set_preseek", ctypes.c_void_p, [
	("anim",		ctypes.POINTER(anim)),
	("preseek",		ctypes.c_int),] )

IMB_anim_get_preseek = _rpythonic_function_(		"IMB_anim_get_preseek", ctypes.c_int, [
	("anim",		ctypes.POINTER(anim)),] )

IMB_anim_absolute = _rpythonic_function_(		"IMB_anim_absolute", ctypes.POINTER(ImBuf), [
	("anim",		ctypes.POINTER(anim)),
	("position",		ctypes.c_int),
	("tc",		ctypes.c_int),
	("preview_size",		ctypes.c_int),] )

IMB_anim_previewframe = _rpythonic_function_(		"IMB_anim_previewframe", ctypes.POINTER(ImBuf), [
	("anim",		ctypes.POINTER(anim)),] )

IMB_free_anim = _rpythonic_function_(		"IMB_free_anim", ctypes.c_void_p, [
	("anim",		ctypes.POINTER(anim)),] )

IMB_filter = _rpythonic_function_(		"IMB_filter", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

IMB_filterN = _rpythonic_function_(		"IMB_filterN", ctypes.c_void_p, [
	("out",		ctypes.POINTER(ImBuf)),
	("C_in",		ctypes.POINTER(ImBuf)),] )

IMB_mask_filter_extend = _rpythonic_function_(		"IMB_mask_filter_extend", ctypes.c_void_p, [
	("mask",		ctypes.POINTER(ctypes.c_char)),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

IMB_mask_clear = _rpythonic_function_(		"IMB_mask_clear", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),
	("mask",		ctypes.POINTER(ctypes.c_char)),
	("val",		ctypes.c_int),] )

IMB_filter_extend = _rpythonic_function_(		"IMB_filter_extend", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),
	("mask",		ctypes.POINTER(ctypes.c_char)),
	("filter",		ctypes.c_int),] )

IMB_makemipmap = _rpythonic_function_(		"IMB_makemipmap", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),
	("use_filter",		ctypes.c_int),] )

IMB_remakemipmap = _rpythonic_function_(		"IMB_remakemipmap", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),
	("use_filter",		ctypes.c_int),] )

IMB_getmipmap = _rpythonic_function_(		"IMB_getmipmap", ctypes.POINTER(ImBuf), [
	("ibuf",		ctypes.POINTER(ImBuf)),
	("level",		ctypes.c_int),] )

IMB_tile_cache_params = _rpythonic_function_(		"IMB_tile_cache_params", ctypes.c_void_p, [
	("totthread",		ctypes.c_int),
	("maxmem",		ctypes.c_int),] )

IMB_gettile = _rpythonic_function_(		"IMB_gettile", ctypes.POINTER(ctypes.c_uint), [
	("ibuf",		ctypes.POINTER(ImBuf)),
	("tx",		ctypes.c_int),
	("ty",		ctypes.c_int),
	("thread",		ctypes.c_int),] )

IMB_tiles_to_rect = _rpythonic_function_(		"IMB_tiles_to_rect", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

IMB_filtery = _rpythonic_function_(		"IMB_filtery", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

IMB_onehalf = _rpythonic_function_(		"IMB_onehalf", ctypes.POINTER(ImBuf), [
	("ibuf1",		ctypes.POINTER(ImBuf)),] )

IMB_scaleImBuf = _rpythonic_function_(		"IMB_scaleImBuf", ctypes.POINTER(ImBuf), [
	("ibuf",		ctypes.POINTER(ImBuf)),
	("newx",		ctypes.c_uint),
	("newy",		ctypes.c_uint),] )

IMB_scalefastImBuf = _rpythonic_function_(		"IMB_scalefastImBuf", ctypes.POINTER(ImBuf), [
	("ibuf",		ctypes.POINTER(ImBuf)),
	("newx",		ctypes.c_uint),
	("newy",		ctypes.c_uint),] )

IMB_saveiff = _rpythonic_function_(		"IMB_saveiff", ctypes.c_short, [
	("ibuf",		ctypes.POINTER(ImBuf)),
	("filepath",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),] )

IMB_png_encode = _rpythonic_function_(		"IMB_png_encode", ctypes.c_short, [
	("ibuf",		ctypes.POINTER(ImBuf)),
	("file",		ctypes.c_int),
	("flags",		ctypes.c_int),] )

IMB_ispic = _rpythonic_function_(		"IMB_ispic", ctypes.c_int, [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

IMB_isanim = _rpythonic_function_(		"IMB_isanim", ctypes.c_int, [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

imb_get_anim_type = _rpythonic_function_(		"imb_get_anim_type", ctypes.c_int, [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

IMB_de_interlace = _rpythonic_function_(		"IMB_de_interlace", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

IMB_interlace = _rpythonic_function_(		"IMB_interlace", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

IMB_rect_from_float = _rpythonic_function_(		"IMB_rect_from_float", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

IMB_partial_rect_from_float = _rpythonic_function_(		"IMB_partial_rect_from_float", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),
	("buffer",		ctypes.POINTER(ctypes.c_float)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("w",		ctypes.c_int),
	("h",		ctypes.c_int),] )

IMB_float_from_rect = _rpythonic_function_(		"IMB_float_from_rect", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

IMB_float_from_rect_simple = _rpythonic_function_(		"IMB_float_from_rect_simple", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

IMB_convert_profile = _rpythonic_function_(		"IMB_convert_profile", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),
	("profile",		ctypes.c_int),] )

IMB_float_profile_ensure = _rpythonic_function_(		"IMB_float_profile_ensure", ctypes.POINTER(ctypes.c_float), [
	("ibuf",		ctypes.POINTER(ImBuf)),
	("profile",		ctypes.c_int),
	("alloc",		ctypes.POINTER(ctypes.c_int)),] )

IMB_color_to_bw = _rpythonic_function_(		"IMB_color_to_bw", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

IMB_convert_rgba_to_abgr = _rpythonic_function_(		"IMB_convert_rgba_to_abgr", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

IMB_convert_bgra_to_rgba = _rpythonic_function_(		"IMB_convert_bgra_to_rgba", ctypes.c_void_p, [
	("size",		ctypes.c_int),
	("rect",		ctypes.POINTER(ctypes.c_uint)),] )

bicubic_interpolation = _rpythonic_function_(		"bicubic_interpolation", ctypes.c_void_p, [
	("C_in",		ctypes.POINTER(ImBuf)),
	("out",		ctypes.POINTER(ImBuf)),
	("u",		ctypes.c_float),
	("v",		ctypes.c_float),
	("xout",		ctypes.c_int),
	("yout",		ctypes.c_int),] )

neareast_interpolation = _rpythonic_function_(		"neareast_interpolation", ctypes.c_void_p, [
	("C_in",		ctypes.POINTER(ImBuf)),
	("out",		ctypes.POINTER(ImBuf)),
	("u",		ctypes.c_float),
	("v",		ctypes.c_float),
	("xout",		ctypes.c_int),
	("yout",		ctypes.c_int),] )

bilinear_interpolation = _rpythonic_function_(		"bilinear_interpolation", ctypes.c_void_p, [
	("C_in",		ctypes.POINTER(ImBuf)),
	("out",		ctypes.POINTER(ImBuf)),
	("u",		ctypes.c_float),
	("v",		ctypes.c_float),
	("xout",		ctypes.c_int),
	("yout",		ctypes.c_int),] )

bicubic_interpolation_color = _rpythonic_function_(		"bicubic_interpolation_color", ctypes.c_void_p, [
	("C_in",		ctypes.POINTER(ImBuf)),
	("col",		ctypes.POINTER(ctypes.c_ubyte)),
	("col_float",		ctypes.POINTER(ctypes.c_float)),
	("u",		ctypes.c_float),
	("v",		ctypes.c_float),] )

neareast_interpolation_color = _rpythonic_function_(		"neareast_interpolation_color", ctypes.c_void_p, [
	("C_in",		ctypes.POINTER(ImBuf)),
	("col",		ctypes.POINTER(ctypes.c_ubyte)),
	("col_float",		ctypes.POINTER(ctypes.c_float)),
	("u",		ctypes.c_float),
	("v",		ctypes.c_float),] )

bilinear_interpolation_color = _rpythonic_function_(		"bilinear_interpolation_color", ctypes.c_void_p, [
	("C_in",		ctypes.POINTER(ImBuf)),
	("col",		ctypes.POINTER(ctypes.c_ubyte)),
	("col_float",		ctypes.POINTER(ctypes.c_float)),
	("u",		ctypes.c_float),
	("v",		ctypes.c_float),] )

bilinear_interpolation_color_wrap = _rpythonic_function_(		"bilinear_interpolation_color_wrap", ctypes.c_void_p, [
	("C_in",		ctypes.POINTER(ImBuf)),
	("col",		ctypes.POINTER(ctypes.c_ubyte)),
	("col_float",		ctypes.POINTER(ctypes.c_float)),
	("u",		ctypes.c_float),
	("v",		ctypes.c_float),] )

IMB_loadiffmem = _rpythonic_function_(		"IMB_loadiffmem", ctypes.POINTER(ImBuf), [
	("mem",		ctypes.POINTER(ctypes.c_int)),
	("flags",		ctypes.c_int),] )

IMB_loadifffile = _rpythonic_function_(		"IMB_loadifffile", ctypes.POINTER(ImBuf), [
	("file",		ctypes.c_int),
	("flags",		ctypes.c_int),] )

IMB_half_x = _rpythonic_function_(		"IMB_half_x", ctypes.POINTER(ImBuf), [
	("ibuf1",		ctypes.POINTER(ImBuf)),] )

IMB_double_fast_x = _rpythonic_function_(		"IMB_double_fast_x", ctypes.POINTER(ImBuf), [
	("ibuf1",		ctypes.POINTER(ImBuf)),] )

IMB_double_x = _rpythonic_function_(		"IMB_double_x", ctypes.POINTER(ImBuf), [
	("ibuf1",		ctypes.POINTER(ImBuf)),] )

IMB_half_y = _rpythonic_function_(		"IMB_half_y", ctypes.POINTER(ImBuf), [
	("ibuf1",		ctypes.POINTER(ImBuf)),] )

IMB_double_fast_y = _rpythonic_function_(		"IMB_double_fast_y", ctypes.POINTER(ImBuf), [
	("ibuf1",		ctypes.POINTER(ImBuf)),] )

IMB_double_y = _rpythonic_function_(		"IMB_double_y", ctypes.POINTER(ImBuf), [
	("ibuf1",		ctypes.POINTER(ImBuf)),] )

IMB_flipx = _rpythonic_function_(		"IMB_flipx", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

IMB_flipy = _rpythonic_function_(		"IMB_flipy", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

IMB_premultiply_alpha = _rpythonic_function_(		"IMB_premultiply_alpha", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

IMB_freezbufImBuf = _rpythonic_function_(		"IMB_freezbufImBuf", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

IMB_freezbuffloatImBuf = _rpythonic_function_(		"IMB_freezbuffloatImBuf", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

IMB_rectfill = _rpythonic_function_(		"IMB_rectfill", ctypes.c_void_p, [
	("drect",		ctypes.POINTER(ImBuf)),
	("col",		( ctypes.c_float * 4 )),] )

IMB_rectfill_area = _rpythonic_function_(		"IMB_rectfill_area", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),
	("col",		ctypes.POINTER(ctypes.c_float)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_int),
	("y2",		ctypes.c_int),] )

IMB_rectfill_alpha = _rpythonic_function_(		"IMB_rectfill_alpha", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),
	("value",		ctypes.c_float),] )

buf_rectfill_area = _rpythonic_function_(		"buf_rectfill_area", ctypes.c_void_p, [
	("rect",		ctypes.POINTER(ctypes.c_ubyte)),
	("rectf",		ctypes.POINTER(ctypes.c_float)),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("col",		( ctypes.c_float * 4 )),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_int),
	("y2",		ctypes.c_int),] )

IMB_metadata_change_field = _rpythonic_function_(		"IMB_metadata_change_field", ctypes.c_int, [
	("img",		ctypes.POINTER(ImBuf)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("field",		ctypes.POINTER(ctypes.c_char)),] )

imb_addrectImBuf = _rpythonic_function_(		"imb_addrectImBuf", ctypes.c_short, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

imb_freerectImBuf = _rpythonic_function_(		"imb_freerectImBuf", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

imb_addrectfloatImBuf = _rpythonic_function_(		"imb_addrectfloatImBuf", ctypes.c_short, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

imb_freerectfloatImBuf = _rpythonic_function_(		"imb_freerectfloatImBuf", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

imb_freemipmapImBuf = _rpythonic_function_(		"imb_freemipmapImBuf", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

imb_addtilesImBuf = _rpythonic_function_(		"imb_addtilesImBuf", ctypes.c_short, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

imb_freetilesImBuf = _rpythonic_function_(		"imb_freetilesImBuf", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

BPY_pyconstraint_exec = _rpythonic_function_(		"BPY_pyconstraint_exec", ctypes.c_void_p, [
	("con",		ctypes.POINTER(bPythonConstraint)),
	("cob",		ctypes.POINTER(bConstraintOb)),
	("targets",		ctypes.POINTER(ListBase)),] )

BPY_pyconstraint_target = _rpythonic_function_(		"BPY_pyconstraint_target", ctypes.c_void_p, [
	("con",		ctypes.POINTER(bPythonConstraint)),
	("ct",		ctypes.POINTER(bConstraintTarget)),] )

BPY_pyconstraint_update = _rpythonic_function_(		"BPY_pyconstraint_update", ctypes.c_void_p, [
	("owner",		ctypes.POINTER(Object)),
	("con",		ctypes.POINTER(bConstraint)),] )

BPY_is_pyconstraint = _rpythonic_function_(		"BPY_is_pyconstraint", ctypes.c_int, [
	("text",		ctypes.POINTER(Text)),] )

BPY_python_start = _rpythonic_function_(		"BPY_python_start", ctypes.c_void_p, [
	("argc",		ctypes.c_int),
	("argv",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

BPY_python_end = _rpythonic_function_(		"BPY_python_end", ctypes.c_void_p, [] )

BPY_filepath_exec = _rpythonic_function_(		"BPY_filepath_exec", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("filepath",		ctypes.POINTER(ctypes.c_char)),
	("reports",		ctypes.POINTER(ReportList)),] )

BPY_text_exec = _rpythonic_function_(		"BPY_text_exec", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("text",		ctypes.POINTER(Text)),
	("reports",		ctypes.POINTER(ReportList)),
	("do_jump",		ctypes.c_short),] )

BPY_text_free_code = _rpythonic_function_(		"BPY_text_free_code", ctypes.c_void_p, [
	("text",		ctypes.POINTER(Text)),] )

BPY_modules_update = _rpythonic_function_(		"BPY_modules_update", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

BPY_modules_load_user = _rpythonic_function_(		"BPY_modules_load_user", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

BPY_app_handlers_reset = _rpythonic_function_(		"BPY_app_handlers_reset", ctypes.c_void_p, [] )

BPY_driver_reset = _rpythonic_function_(		"BPY_driver_reset", ctypes.c_void_p, [] )

BPY_driver_exec = _rpythonic_function_(		"BPY_driver_exec", ctypes.c_float, [
	("driver",		ctypes.POINTER(ChannelDriver)),] )

BPY_button_exec = _rpythonic_function_(		"BPY_button_exec", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("expr",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_double)),
	("verbose",		ctypes.c_short),] )

BPY_string_exec = _rpythonic_function_(		"BPY_string_exec", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("expr",		ctypes.POINTER(ctypes.c_char)),] )

BPY_DECREF = _rpythonic_function_(		"BPY_DECREF", ctypes.c_void_p, [("pyob_ptr",		ctypes.c_void_p)] )

BPY_context_member_get = _rpythonic_function_(		"BPY_context_member_get", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("member",		ctypes.POINTER(ctypes.c_char)),
	("result",		ctypes.POINTER(bContextDataResult)),] )

BPY_context_set = _rpythonic_function_(		"BPY_context_set", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

BPY_id_release = _rpythonic_function_(		"BPY_id_release", ctypes.c_void_p, [
	("C_id",		ctypes.POINTER(ID)),] )

RE_NewRender = _rpythonic_function_(		"RE_NewRender", ctypes.POINTER(Render), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

RE_GetRender = _rpythonic_function_(		"RE_GetRender", ctypes.POINTER(Render), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

RE_RenderInProgress = _rpythonic_function_(		"RE_RenderInProgress", ctypes.c_int, [
	("re",		ctypes.POINTER(Render)),] )

RE_InitRenderCB = _rpythonic_function_(		"RE_InitRenderCB", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),] )

RE_FreeRender = _rpythonic_function_(		"RE_FreeRender", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),] )

RE_FreeAllRender = _rpythonic_function_(		"RE_FreeAllRender", ctypes.c_void_p, [] )

RE_FreeRenderResult = _rpythonic_function_(		"RE_FreeRenderResult", ctypes.c_void_p, [
	("rr",		ctypes.POINTER(RenderResult)),] )

RE_AcquireResultRead = _rpythonic_function_(		"RE_AcquireResultRead", ctypes.POINTER(RenderResult), [
	("re",		ctypes.POINTER(Render)),] )

RE_AcquireResultWrite = _rpythonic_function_(		"RE_AcquireResultWrite", ctypes.POINTER(RenderResult), [
	("re",		ctypes.POINTER(Render)),] )

RE_ReleaseResult = _rpythonic_function_(		"RE_ReleaseResult", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),] )

RE_AcquireResultImage = _rpythonic_function_(		"RE_AcquireResultImage", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("rr",		ctypes.POINTER(RenderResult)),] )

RE_ReleaseResultImage = _rpythonic_function_(		"RE_ReleaseResultImage", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),] )

RE_SwapResult = _rpythonic_function_(		"RE_SwapResult", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("rr",		ctypes.POINTER(ctypes.POINTER(RenderResult))),] )

RE_GetStats = _rpythonic_function_(		"RE_GetStats", ctypes.POINTER(RenderStats), [
	("re",		ctypes.POINTER(Render)),] )

RE_ResultGet32 = _rpythonic_function_(		"RE_ResultGet32", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("rect",		ctypes.POINTER(ctypes.c_uint)),] )

RE_GetRenderLayer = _rpythonic_function_(		"RE_GetRenderLayer", ctypes.POINTER(RenderLayer), [
	("rr",		ctypes.POINTER(RenderResult)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

RE_RenderLayerGetPass = _rpythonic_function_(		"RE_RenderLayerGetPass", ctypes.POINTER(ctypes.c_float), [
	("rl",		ctypes.POINTER(RenderLayer)),
	("passtype",		ctypes.c_int),] )

RE_InitState = _rpythonic_function_(		"RE_InitState", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("source",		ctypes.POINTER(Render)),
	("rd",		ctypes.POINTER(RenderData)),
	("srl",		ctypes.POINTER(SceneRenderLayer)),
	("winx",		ctypes.c_int),
	("winy",		ctypes.c_int),
	("disprect",		ctypes.POINTER(rcti)),] )

RE_SetDispRect = _rpythonic_function_(		"RE_SetDispRect", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("disprect",		ctypes.POINTER(rcti)),] )

RE_GetCamera = _rpythonic_function_(		"RE_GetCamera", ctypes.POINTER(Object), [
	("re",		ctypes.POINTER(Render)),] )

RE_SetCamera = _rpythonic_function_(		"RE_SetCamera", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("camera",		ctypes.POINTER(Object)),] )

RE_SetWindow = _rpythonic_function_(		"RE_SetWindow", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("viewplane",		ctypes.POINTER(rctf)),
	("clipsta",		ctypes.c_float),
	("clipend",		ctypes.c_float),] )

RE_SetOrtho = _rpythonic_function_(		"RE_SetOrtho", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("viewplane",		ctypes.POINTER(rctf)),
	("clipsta",		ctypes.c_float),
	("clipend",		ctypes.c_float),] )

RE_SetPixelSize = _rpythonic_function_(		"RE_SetPixelSize", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("pixsize",		ctypes.c_float),] )

RE_SetView = _rpythonic_function_(		"RE_SetView", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("mat",		ctypes.c_float),] )

RE_Database_FromScene = _rpythonic_function_(		"RE_Database_FromScene", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("bmain",		ctypes.POINTER(Main)),
	("scene",		ctypes.POINTER(Scene)),
	("lay",		ctypes.c_uint),
	("use_camera_view",		ctypes.c_int),] )

RE_Database_Free = _rpythonic_function_(		"RE_Database_Free", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),] )

RE_DataBase_ApplyWindow = _rpythonic_function_(		"RE_DataBase_ApplyWindow", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),] )

RE_set_max_threads = _rpythonic_function_(		"RE_set_max_threads", ctypes.c_void_p, [
	("threads",		ctypes.c_int),] )

RE_init_threadcount = _rpythonic_function_(		"RE_init_threadcount", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),] )

RE_TileProcessor = _rpythonic_function_(		"RE_TileProcessor", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),] )

RE_BlenderFrame = _rpythonic_function_(		"RE_BlenderFrame", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("bmain",		ctypes.POINTER(Main)),
	("scene",		ctypes.POINTER(Scene)),
	("srl",		ctypes.POINTER(SceneRenderLayer)),
	("camera_override",		ctypes.POINTER(Object)),
	("lay",		ctypes.c_uint),
	("frame",		ctypes.c_int),
	("write_still",		ctypes.c_short),] )

RE_BlenderAnim = _rpythonic_function_(		"RE_BlenderAnim", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("bmain",		ctypes.POINTER(Main)),
	("scene",		ctypes.POINTER(Scene)),
	("camera_override",		ctypes.POINTER(Object)),
	("lay",		ctypes.c_uint),
	("sfra",		ctypes.c_int),
	("efra",		ctypes.c_int),
	("tfra",		ctypes.c_int),] )

RE_SetReports = _rpythonic_function_(		"RE_SetReports", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("reports",		ctypes.POINTER(ReportList)),] )

RE_PreviewRender = _rpythonic_function_(		"RE_PreviewRender", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("bmain",		ctypes.POINTER(Main)),
	("scene",		ctypes.POINTER(Scene)),] )

RE_ReadRenderResult = _rpythonic_function_(		"RE_ReadRenderResult", ctypes.c_int, [
	("scene",		ctypes.POINTER(Scene)),
	("scenode",		ctypes.POINTER(Scene)),] )

RE_WriteRenderResult = _rpythonic_function_(		"RE_WriteRenderResult", ctypes.c_int, [
	("reports",		ctypes.POINTER(ReportList)),
	("rr",		ctypes.POINTER(RenderResult)),
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("compress",		ctypes.c_int),] )

RE_MultilayerConvert = _rpythonic_function_(		"RE_MultilayerConvert", ctypes.POINTER(RenderResult), [
	("exrhandle",		ctypes.POINTER(ctypes.c_void_p)),
	("rectx",		ctypes.c_int),
	("recty",		ctypes.c_int),] )

RE_WriteEnvmapResult = _rpythonic_function_(		"RE_WriteEnvmapResult", ctypes.c_int, [
	("reports",		ctypes.POINTER(ReportList)),
	("scene",		ctypes.POINTER(Scene)),
	("env",		ctypes.POINTER(EnvMap)),
	("relpath",		ctypes.POINTER(ctypes.c_char)),
	("imtype",		ctypes.c_int),
	("layout",		( ctypes.c_float * 12 )),] )

RE_MergeFullSample = _rpythonic_function_(		"RE_MergeFullSample", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("bmain",		ctypes.POINTER(Main)),
	("sce",		ctypes.POINTER(Scene)),
	("ntree",		ctypes.POINTER(bNodeTree)),] )

RE_make_stars = _rpythonic_function_(		"RE_make_stars", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("scenev3d",		ctypes.POINTER(Scene)),
	("initfunc",		ctypes.c_void_p),
	("vertexfunc",		ctypes.c_void_p),
	("termfunc",		ctypes.c_void_p),] )

vertexfunc = _rpythonic_function_(		"vertexfunc", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_float)),] )

termfunc = _rpythonic_function_(		"termfunc", ctypes.c_void_p, [] )

RE_display_init_cb = _rpythonic_function_(		"RE_display_init_cb", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("handle",		ctypes.POINTER(ctypes.c_void_p)),
	("f",		ctypes.c_void_p),] )

RE_display_clear_cb = _rpythonic_function_(		"RE_display_clear_cb", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("handle",		ctypes.POINTER(ctypes.c_void_p)),
	("f",		ctypes.c_void_p),] )

RE_display_draw_cb = _rpythonic_function_(		"RE_display_draw_cb", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("handle",		ctypes.POINTER(ctypes.c_void_p)),
	("f",		ctypes.c_void_p),] )

RE_stats_draw_cb = _rpythonic_function_(		"RE_stats_draw_cb", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("handle",		ctypes.POINTER(ctypes.c_void_p)),
	("f",		ctypes.c_void_p),] )

RE_progress_cb = _rpythonic_function_(		"RE_progress_cb", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("handle",		ctypes.POINTER(ctypes.c_void_p)),
	("f",		ctypes.c_void_p),] )

RE_draw_lock_cb = _rpythonic_function_(		"RE_draw_lock_cb", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("handle",		ctypes.POINTER(ctypes.c_void_p)),
	("f",		ctypes.c_void_p),] )

RE_test_break_cb = _rpythonic_function_(		"RE_test_break_cb", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("handle",		ctypes.POINTER(ctypes.c_void_p)),
	("f",		ctypes.c_void_p),] )

RE_filter_value = _rpythonic_function_(		"RE_filter_value", ctypes.c_float, [
	("C_type",		ctypes.c_int),
	("x",		ctypes.c_float),] )

RE_zbuf_accumulate_vecblur = _rpythonic_function_(		"RE_zbuf_accumulate_vecblur", ctypes.c_void_p, [
	("nbd",		ctypes.POINTER(NodeBlurData)),
	("xsize",		ctypes.c_int),
	("ysize",		ctypes.c_int),
	("newrect",		ctypes.POINTER(ctypes.c_float)),
	("imgrect",		ctypes.POINTER(ctypes.c_float)),
	("vecbufrect",		ctypes.POINTER(ctypes.c_float)),
	("zbufrect",		ctypes.POINTER(ctypes.c_float)),] )

RE_Database_Baking = _rpythonic_function_(		"RE_Database_Baking", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("bmain",		ctypes.POINTER(Main)),
	("scene",		ctypes.POINTER(Scene)),
	("lay",		ctypes.c_uint),
	("C_type",		ctypes.c_int),
	("actob",		ctypes.POINTER(Object)),] )

RE_DataBase_GetView = _rpythonic_function_(		"RE_DataBase_GetView", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("mat",		ctypes.c_float),] )

RE_GetCameraWindow = _rpythonic_function_(		"RE_GetCameraWindow", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("camera",		ctypes.POINTER(Object)),
	("frame",		ctypes.c_int),
	("mat",		ctypes.c_float),] )

RE_GetScene = _rpythonic_function_(		"RE_GetScene", ctypes.POINTER(Scene), [
	("re",		ctypes.POINTER(Render)),] )

render = _rpythonic_function_(		"render", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(RenderEngine)),
	("scene",		ctypes.POINTER(Scene)),] )

RE_layer_load_from_file = _rpythonic_function_(		"RE_layer_load_from_file", ctypes.c_void_p, [
	("layer",		ctypes.POINTER(RenderLayer)),
	("reports",		ctypes.POINTER(ReportList)),
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

RE_result_load_from_file = _rpythonic_function_(		"RE_result_load_from_file", ctypes.c_void_p, [
	("result",		ctypes.POINTER(RenderResult)),
	("reports",		ctypes.POINTER(ReportList)),
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

RE_engine_begin_result = _rpythonic_function_(		"RE_engine_begin_result", ctypes.POINTER(RenderResult), [
	("engine",		ctypes.POINTER(RenderEngine)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("w",		ctypes.c_int),
	("h",		ctypes.c_int),] )

RE_engine_update_result = _rpythonic_function_(		"RE_engine_update_result", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(RenderEngine)),
	("result",		ctypes.POINTER(RenderResult)),] )

RE_engine_end_result = _rpythonic_function_(		"RE_engine_end_result", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(RenderEngine)),
	("result",		ctypes.POINTER(RenderResult)),] )

RE_engine_test_break = _rpythonic_function_(		"RE_engine_test_break", ctypes.c_int, [
	("engine",		ctypes.POINTER(RenderEngine)),] )

RE_engine_update_stats = _rpythonic_function_(		"RE_engine_update_stats", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(RenderEngine)),
	("stats",		ctypes.POINTER(ctypes.c_char)),
	("info",		ctypes.POINTER(ctypes.c_char)),] )

RE_engine_report = _rpythonic_function_(		"RE_engine_report", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(RenderEngine)),
	("C_type",		ctypes.c_int),
	("msg",		ctypes.POINTER(ctypes.c_char)),] )

RE_engines_init = _rpythonic_function_(		"RE_engines_init", ctypes.c_void_p, [] )

RE_engines_exit = _rpythonic_function_(		"RE_engines_exit", ctypes.c_void_p, [] )

RE_is_rendering_allowed = _rpythonic_function_(		"RE_is_rendering_allowed", ctypes.c_int, [
	("scene",		ctypes.POINTER(Scene)),
	("camera_override",		ctypes.POINTER(Object)),
	("reports",		ctypes.POINTER(ReportList)),] )

ED_operatortypes_armature = _rpythonic_function_(		"ED_operatortypes_armature", ctypes.c_void_p, [] )

ED_operatormacros_armature = _rpythonic_function_(		"ED_operatormacros_armature", ctypes.c_void_p, [] )

ED_keymap_armature = _rpythonic_function_(		"ED_keymap_armature", ctypes.c_void_p, [
	("keyconf",		ctypes.POINTER(wmKeyConfig)),] )

ED_armature_from_edit = _rpythonic_function_(		"ED_armature_from_edit", ctypes.c_void_p, [
	("obedit",		ctypes.POINTER(Object)),] )

ED_armature_to_edit = _rpythonic_function_(		"ED_armature_to_edit", ctypes.c_void_p, [
	("ob",		ctypes.POINTER(Object)),] )

ED_armature_edit_free = _rpythonic_function_(		"ED_armature_edit_free", ctypes.c_void_p, [
	("ob",		ctypes.POINTER(Object)),] )

ED_armature_deselect_all = _rpythonic_function_(		"ED_armature_deselect_all", ctypes.c_void_p, [
	("obedit",		ctypes.POINTER(Object)),
	("toggle",		ctypes.c_int),] )

ED_armature_deselect_all_visible = _rpythonic_function_(		"ED_armature_deselect_all_visible", ctypes.c_void_p, [
	("obedit",		ctypes.POINTER(Object)),] )

ED_do_pose_selectbuffer = _rpythonic_function_(		"ED_do_pose_selectbuffer", ctypes.c_int, [
	("scene",		ctypes.POINTER(Scene)),
	("base",		ctypes.POINTER(Base)),
	("buffer",		ctypes.POINTER(ctypes.c_uint)),
	("hits",		ctypes.c_short),
	("extend",		ctypes.c_short),] )

mouse_armature = _rpythonic_function_(		"mouse_armature", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("mval",		( ctypes.c_int * 2 )),
	("extend",		ctypes.c_int),] )

join_armature_exec = _rpythonic_function_(		"join_armature_exec", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),] )

get_indexed_bone = _rpythonic_function_(		"get_indexed_bone", ctypes.POINTER(Bone), [
	("ob",		ctypes.POINTER(Object)),
	("index",		ctypes.c_int),] )

ED_rollBoneToVector = _rpythonic_function_(		"ED_rollBoneToVector", ctypes.c_float, [
	("bone",		ctypes.POINTER(EditBone)),
	("new_up_axis",		( ctypes.c_float * 3 )),
	("axis_only",		ctypes.c_short),] )

ED_armature_bone_get_mirrored = _rpythonic_function_(		"ED_armature_bone_get_mirrored", ctypes.POINTER(EditBone), [
	("edbo",		ctypes.POINTER(ListBase)),
	("ebo",		ctypes.POINTER(EditBone)),] )

ED_armature_sync_selection = _rpythonic_function_(		"ED_armature_sync_selection", ctypes.c_void_p, [
	("edbo",		ctypes.POINTER(ListBase)),] )

ED_armature_validate_active = _rpythonic_function_(		"ED_armature_validate_active", ctypes.c_void_p, [
	("arm",		ctypes.POINTER(bArmature)),] )

add_primitive_bone = _rpythonic_function_(		"add_primitive_bone", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("v3d",		ctypes.POINTER(View3D)),
	("rv3d",		ctypes.POINTER(RegionView3D)),] )

ED_armature_edit_bone_add = _rpythonic_function_(		"ED_armature_edit_bone_add", ctypes.POINTER(EditBone), [
	("arm",		ctypes.POINTER(bArmature)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

ED_armature_edit_bone_remove = _rpythonic_function_(		"ED_armature_edit_bone_remove", ctypes.c_void_p, [
	("arm",		ctypes.POINTER(bArmature)),
	("exBone",		ctypes.POINTER(EditBone)),] )

transform_armature_mirror_update = _rpythonic_function_(		"transform_armature_mirror_update", ctypes.c_void_p, [
	("obedit",		ctypes.POINTER(Object)),] )

clear_armature = _rpythonic_function_(		"clear_armature", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("ob",		ctypes.POINTER(Object)),
	("mode",		ctypes.c_char),] )

docenter_armature = _rpythonic_function_(		"docenter_armature", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("ob",		ctypes.POINTER(Object)),
	("cursor",		( ctypes.c_float * 3 )),
	("centermode",		ctypes.c_int),
	("around",		ctypes.c_int),] )

ED_armature_apply_transform = _rpythonic_function_(		"ED_armature_apply_transform", ctypes.c_void_p, [
	("ob",		ctypes.POINTER(Object)),
	("mat",		( ctypes.c_float * 4 )),] )

create_vgroups_from_armature = _rpythonic_function_(		"create_vgroups_from_armature", ctypes.c_void_p, [
	("reports",		ctypes.POINTER(ReportList)),
	("scene",		ctypes.POINTER(Scene)),
	("ob",		ctypes.POINTER(Object)),
	("par",		ctypes.POINTER(Object)),
	("mode",		ctypes.c_int),
	("mirror",		ctypes.c_int),] )

auto_align_armature = _rpythonic_function_(		"auto_align_armature", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("v3d",		ctypes.POINTER(View3D)),
	("mode",		ctypes.c_short),] )

unique_editbone_name = _rpythonic_function_(		"unique_editbone_name", ctypes.c_void_p, [
	("ebones",		ctypes.POINTER(ListBase)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("bone",		ctypes.POINTER(EditBone)),] )

ED_armature_bone_rename = _rpythonic_function_(		"ED_armature_bone_rename", ctypes.c_void_p, [
	("arm",		ctypes.POINTER(bArmature)),
	("oldnamep",		ctypes.POINTER(ctypes.c_char)),
	("newnamep",		ctypes.POINTER(ctypes.c_char)),] )

undo_push_armature = _rpythonic_function_(		"undo_push_armature", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

ED_object_pose_armature = _rpythonic_function_(		"ED_object_pose_armature", ctypes.POINTER(Object), [
	("ob",		ctypes.POINTER(Object)),] )

ED_armature_exit_posemode = _rpythonic_function_(		"ED_armature_exit_posemode", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("base",		ctypes.POINTER(Base)),] )

ED_armature_enter_posemode = _rpythonic_function_(		"ED_armature_enter_posemode", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("base",		ctypes.POINTER(Base)),] )

ED_pose_channel_in_IK_chain = _rpythonic_function_(		"ED_pose_channel_in_IK_chain", ctypes.c_int, [
	("ob",		ctypes.POINTER(Object)),
	("pchan",		ctypes.POINTER(bPoseChannel)),] )

ED_pose_deselectall = _rpythonic_function_(		"ED_pose_deselectall", ctypes.c_void_p, [
	("ob",		ctypes.POINTER(Object)),
	("test",		ctypes.c_int),] )

ED_pose_recalculate_paths = _rpythonic_function_(		"ED_pose_recalculate_paths", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("ob",		ctypes.POINTER(Object)),] )

ED_operator_sketch_mode_active_stroke = _rpythonic_function_(		"ED_operator_sketch_mode_active_stroke", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_sketch_full_mode = _rpythonic_function_(		"ED_operator_sketch_full_mode", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_sketch_mode = _rpythonic_function_(		"ED_operator_sketch_mode", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

BIF_convertSketch = _rpythonic_function_(		"BIF_convertSketch", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

BIF_deleteSketch = _rpythonic_function_(		"BIF_deleteSketch", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

BIF_selectAllSketch = _rpythonic_function_(		"BIF_selectAllSketch", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("mode",		ctypes.c_int),] )

BIF_makeListTemplates = _rpythonic_function_(		"BIF_makeListTemplates", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

BIF_listTemplates = _rpythonic_function_(		"BIF_listTemplates", ctypes.POINTER(ctypes.c_char), [
	("C",		ctypes.POINTER(bContext)),] )

BIF_currentTemplate = _rpythonic_function_(		"BIF_currentTemplate", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

BIF_freeTemplates = _rpythonic_function_(		"BIF_freeTemplates", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

BIF_setTemplate = _rpythonic_function_(		"BIF_setTemplate", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("index",		ctypes.c_int),] )

BIF_nbJointsTemplate = _rpythonic_function_(		"BIF_nbJointsTemplate", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

BIF_nameBoneTemplate = _rpythonic_function_(		"BIF_nameBoneTemplate", ctypes.POINTER(ctypes.c_char), [
	("C",		ctypes.POINTER(bContext)),] )

BDR_drawSketch = _rpythonic_function_(		"BDR_drawSketch", ctypes.c_void_p, [
	("vc",		ctypes.POINTER(bContext)),] )

BDR_drawSketchNames = _rpythonic_function_(		"BDR_drawSketchNames", ctypes.c_int, [
	("vc",		ctypes.POINTER(ViewContext)),] )

mesh_deform_bind = _rpythonic_function_(		"mesh_deform_bind", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("mmd",		ctypes.POINTER(MeshDeformModifierData)),
	("vertexcos",		ctypes.POINTER(ctypes.c_float)),
	("totvert",		ctypes.c_int),
	("cagemat",		ctypes.c_float),] )

ANIM_get_keyframing_flags = _rpythonic_function_(		"ANIM_get_keyframing_flags", ctypes.c_short, [
	("scene",		ctypes.POINTER(Scene)),
	("incl_mode",		ctypes.c_short),] )

verify_adt_action = _rpythonic_function_(		"verify_adt_action", ctypes.POINTER(bAction), [
	("C_id",		ctypes.POINTER(ID)),
	("add",		ctypes.c_short),] )

verify_fcurve = _rpythonic_function_(		"verify_fcurve", ctypes.POINTER(FCurve), [
	("act",		ctypes.POINTER(bAction)),
	("group",		ctypes.c_char),
	("rna_path",		ctypes.c_char),
	("array_index",		ctypes.c_int),
	("add",		ctypes.c_short),] )

insert_bezt_fcurve = _rpythonic_function_(		"insert_bezt_fcurve", ctypes.c_int, [
	("fcu",		ctypes.POINTER(FCurve)),
	("bezt",		ctypes.POINTER(BezTriple)),
	("flag",		ctypes.c_short),] )

insert_vert_fcurve = _rpythonic_function_(		"insert_vert_fcurve", ctypes.c_int, [
	("fcu",		ctypes.POINTER(FCurve)),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("flag",		ctypes.c_short),] )

insert_keyframe_direct = _rpythonic_function_(		"insert_keyframe_direct", ctypes.c_short, [
	("reports",		ctypes.POINTER(ReportList)),
	("ptr",		PointerRNA),
	("prop",		ctypes.POINTER(PropertyRNA)),
	("fcu",		ctypes.POINTER(FCurve)),
	("cfra",		ctypes.c_float),
	("flag",		ctypes.c_short),] )

insert_keyframe = _rpythonic_function_(		"insert_keyframe", ctypes.c_short, [
	("reports",		ctypes.POINTER(ReportList)),
	("C_id",		ctypes.POINTER(ID)),
	("act",		ctypes.POINTER(bAction)),
	("group",		ctypes.c_char),
	("rna_path",		ctypes.c_char),
	("array_index",		ctypes.c_int),
	("cfra",		ctypes.c_float),
	("flag",		ctypes.c_short),] )

delete_keyframe = _rpythonic_function_(		"delete_keyframe", ctypes.c_short, [
	("reports",		ctypes.POINTER(ReportList)),
	("C_id",		ctypes.POINTER(ID)),
	("act",		ctypes.POINTER(bAction)),
	("group",		ctypes.c_char),
	("rna_path",		ctypes.c_char),
	("array_index",		ctypes.c_int),
	("cfra",		ctypes.c_float),
	("flag",		ctypes.c_short),] )

cbKeyingSet_Poll = _rpythonic_function_(		"cbKeyingSet_Poll", ctypes.c_int, [
	("ksi",		ctypes.POINTER(KeyingSetInfo)),
	("C",		ctypes.POINTER(bContext)),] )

cbKeyingSet_Iterator = _rpythonic_function_(		"cbKeyingSet_Iterator", ctypes.c_void_p, [
	("ksi",		ctypes.POINTER(KeyingSetInfo)),
	("C",		ctypes.POINTER(bContext)),
	("ks",		ctypes.POINTER(KeyingSet)),] )

cbKeyingSet_Generate = _rpythonic_function_(		"cbKeyingSet_Generate", ctypes.c_void_p, [
	("ksi",		ctypes.POINTER(KeyingSetInfo)),
	("C",		ctypes.POINTER(bContext)),
	("ks",		ctypes.POINTER(KeyingSet)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ANIM_relative_keyingset_add_source = _rpythonic_function_(		"ANIM_relative_keyingset_add_source", ctypes.c_void_p, [
	("dsources",		ctypes.POINTER(ListBase)),
	("C_id",		ctypes.POINTER(ID)),
	("srna",		ctypes.POINTER(StructRNA)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

ANIM_validate_keyingset = _rpythonic_function_(		"ANIM_validate_keyingset", ctypes.c_short, [
	("C",		ctypes.POINTER(bContext)),
	("dsources",		ctypes.POINTER(ListBase)),
	("ks",		ctypes.POINTER(KeyingSet)),] )

ANIM_apply_keyingset = _rpythonic_function_(		"ANIM_apply_keyingset", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("dsources",		ctypes.POINTER(ListBase)),
	("act",		ctypes.POINTER(bAction)),
	("ks",		ctypes.POINTER(KeyingSet)),
	("mode",		ctypes.c_short),
	("cfra",		ctypes.c_float),] )

ANIM_builtin_keyingset_get_named = _rpythonic_function_(		"ANIM_builtin_keyingset_get_named", ctypes.POINTER(KeyingSet), [
	("prevKS",		ctypes.POINTER(KeyingSet)),
	("name",		ctypes.c_char),] )

ANIM_keyingset_info_find_named = _rpythonic_function_(		"ANIM_keyingset_info_find_named", ctypes.POINTER(KeyingSetInfo), [
	("name",		ctypes.c_char),] )

ANIM_keyingset_info_register = _rpythonic_function_(		"ANIM_keyingset_info_register", ctypes.c_void_p, [
	("ksi",		ctypes.POINTER(KeyingSetInfo)),] )

ANIM_keyingset_info_unregister = _rpythonic_function_(		"ANIM_keyingset_info_unregister", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("ksi",		ctypes.POINTER(KeyingSetInfo)),] )

ANIM_keyingset_infos_exit = _rpythonic_function_(		"ANIM_keyingset_infos_exit", ctypes.c_void_p, [] )

ANIM_scene_get_active_keyingset = _rpythonic_function_(		"ANIM_scene_get_active_keyingset", ctypes.POINTER(KeyingSet), [
	("scene",		ctypes.POINTER(Scene)),] )

ANIM_scene_get_keyingset_index = _rpythonic_function_(		"ANIM_scene_get_keyingset_index", ctypes.c_int, [
	("scene",		ctypes.POINTER(Scene)),
	("ks",		ctypes.POINTER(KeyingSet)),] )

ANIM_get_keyingset_for_autokeying = _rpythonic_function_(		"ANIM_get_keyingset_for_autokeying", ctypes.POINTER(KeyingSet), [
	("scene",		ctypes.POINTER(Scene)),
	("tranformKSName",		ctypes.POINTER(ctypes.c_char)),] )

ANIM_keying_sets_menu_setup = _rpythonic_function_(		"ANIM_keying_sets_menu_setup", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("title",		ctypes.c_char),
	("op_name",		ctypes.c_char),] )

ANIM_keying_sets_enum_itemf = _rpythonic_function_(		"ANIM_keying_sets_enum_itemf", ctypes.POINTER(EnumPropertyItem), [
	("C",		ctypes.POINTER(bContext)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("prop",		ctypes.POINTER(PropertyRNA)),
	("free",		ctypes.POINTER(ctypes.c_int)),] )

ANIM_keyingset_context_ok_poll = _rpythonic_function_(		"ANIM_keyingset_context_ok_poll", ctypes.c_short, [
	("C",		ctypes.POINTER(bContext)),
	("ks",		ctypes.POINTER(KeyingSet)),] )

verify_driver_fcurve = _rpythonic_function_(		"verify_driver_fcurve", ctypes.POINTER(FCurve), [
	("C_id",		ctypes.POINTER(ID)),
	("rna_path",		ctypes.c_char),
	("array_index",		ctypes.c_int),
	("add",		ctypes.c_short),] )

ANIM_driver_can_paste = _rpythonic_function_(		"ANIM_driver_can_paste", ctypes.c_short, [] )

ANIM_add_driver = _rpythonic_function_(		"ANIM_add_driver", ctypes.c_short, [
	("reports",		ctypes.POINTER(ReportList)),
	("C_id",		ctypes.POINTER(ID)),
	("rna_path",		ctypes.c_char),
	("array_index",		ctypes.c_int),
	("flag",		ctypes.c_short),
	("C_type",		ctypes.c_int),] )

ANIM_remove_driver = _rpythonic_function_(		"ANIM_remove_driver", ctypes.c_short, [
	("reports",		ctypes.POINTER(ReportList)),
	("C_id",		ctypes.POINTER(ID)),
	("rna_path",		ctypes.c_char),
	("array_index",		ctypes.c_int),
	("flag",		ctypes.c_short),] )

ANIM_copy_driver = _rpythonic_function_(		"ANIM_copy_driver", ctypes.c_short, [
	("reports",		ctypes.POINTER(ReportList)),
	("C_id",		ctypes.POINTER(ID)),
	("rna_path",		ctypes.c_char),
	("array_index",		ctypes.c_int),
	("flag",		ctypes.c_short),] )

ANIM_paste_driver = _rpythonic_function_(		"ANIM_paste_driver", ctypes.c_short, [
	("reports",		ctypes.POINTER(ReportList)),
	("C_id",		ctypes.POINTER(ID)),
	("rna_path",		ctypes.c_char),
	("array_index",		ctypes.c_int),
	("flag",		ctypes.c_short),] )

autokeyframe_cfra_can_key = _rpythonic_function_(		"autokeyframe_cfra_can_key", ctypes.c_int, [
	("scene",		ctypes.POINTER(Scene)),
	("C_id",		ctypes.POINTER(ID)),] )

fcurve_frame_has_keyframe = _rpythonic_function_(		"fcurve_frame_has_keyframe", ctypes.c_short, [
	("fcu",		ctypes.POINTER(FCurve)),
	("frame",		ctypes.c_float),
	("filter",		ctypes.c_short),] )

id_frame_has_keyframe = _rpythonic_function_(		"id_frame_has_keyframe", ctypes.c_short, [
	("C_id",		ctypes.POINTER(ID)),
	("frame",		ctypes.c_float),
	("filter",		ctypes.c_short),] )

ED_init_node_butfuncs = _rpythonic_function_(		"ED_init_node_butfuncs", ctypes.c_void_p, [] )

ED_node_changed_update = _rpythonic_function_(		"ED_node_changed_update", ctypes.c_void_p, [
	("C_id",		ctypes.POINTER(ID)),
	("node",		ctypes.POINTER(bNode)),] )

ED_node_generic_update = _rpythonic_function_(		"ED_node_generic_update", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("ntree",		ctypes.POINTER(bNodeTree)),
	("node",		ctypes.POINTER(bNode)),] )

ED_node_shader_default = _rpythonic_function_(		"ED_node_shader_default", ctypes.c_void_p, [
	("ma",		ctypes.POINTER(Material)),] )

ED_node_composit_default = _rpythonic_function_(		"ED_node_composit_default", ctypes.c_void_p, [
	("sce",		ctypes.POINTER(Scene)),] )

ED_node_texture_default = _rpythonic_function_(		"ED_node_texture_default", ctypes.c_void_p, [
	("tex",		ctypes.POINTER(Tex)),] )

ED_node_link_intersect_test = _rpythonic_function_(		"ED_node_link_intersect_test", ctypes.c_void_p, [
	("sa",		ctypes.POINTER(ScrArea)),
	("test",		ctypes.c_int),] )

ED_node_link_insert = _rpythonic_function_(		"ED_node_link_insert", ctypes.c_void_p, [
	("sa",		ctypes.POINTER(ScrArea)),] )

ED_node_set_active = _rpythonic_function_(		"ED_node_set_active", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("ntree",		ctypes.POINTER(bNodeTree)),
	("node",		ctypes.POINTER(bNode)),] )

ED_operatormacros_node = _rpythonic_function_(		"ED_operatormacros_node", ctypes.c_void_p, [] )

ED_operatortypes_render = _rpythonic_function_(		"ED_operatortypes_render", ctypes.c_void_p, [] )

ED_render_id_flush_update = _rpythonic_function_(		"ED_render_id_flush_update", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("C_id",		ctypes.POINTER(ID)),] )

ED_preview_init_dbase = _rpythonic_function_(		"ED_preview_init_dbase", ctypes.c_void_p, [] )

ED_preview_free_dbase = _rpythonic_function_(		"ED_preview_free_dbase", ctypes.c_void_p, [] )

ED_preview_shader_job = _rpythonic_function_(		"ED_preview_shader_job", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("owner",		ctypes.POINTER(ctypes.c_void_p)),
	("C_id",		ctypes.POINTER(ID)),
	("parent",		ctypes.POINTER(ID)),
	("slot",		ctypes.POINTER(MTex)),
	("sizex",		ctypes.c_int),
	("sizey",		ctypes.c_int),
	("method",		ctypes.c_int),] )

ED_preview_icon_job = _rpythonic_function_(		"ED_preview_icon_job", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("owner",		ctypes.POINTER(ctypes.c_void_p)),
	("C_id",		ctypes.POINTER(ID)),
	("rect",		ctypes.POINTER(ctypes.c_uint)),
	("sizex",		ctypes.c_int),
	("sizey",		ctypes.c_int),] )

ED_preview_kill_jobs = _rpythonic_function_(		"ED_preview_kill_jobs", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

ED_preview_draw = _rpythonic_function_(		"ED_preview_draw", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("idp",		ctypes.POINTER(ctypes.c_void_p)),
	("parentp",		ctypes.POINTER(ctypes.c_void_p)),
	("slot",		ctypes.POINTER(ctypes.c_void_p)),
	("rect",		ctypes.POINTER(rcti)),] )

ED_render_clear_mtex_copybuf = _rpythonic_function_(		"ED_render_clear_mtex_copybuf", ctypes.c_void_p, [] )

ED_spacetype_outliner = _rpythonic_function_(		"ED_spacetype_outliner", ctypes.c_void_p, [] )

ED_spacetype_time = _rpythonic_function_(		"ED_spacetype_time", ctypes.c_void_p, [] )

ED_spacetype_view3d = _rpythonic_function_(		"ED_spacetype_view3d", ctypes.c_void_p, [] )

ED_spacetype_ipo = _rpythonic_function_(		"ED_spacetype_ipo", ctypes.c_void_p, [] )

ED_spacetype_image = _rpythonic_function_(		"ED_spacetype_image", ctypes.c_void_p, [] )

ED_spacetype_node = _rpythonic_function_(		"ED_spacetype_node", ctypes.c_void_p, [] )

ED_spacetype_buttons = _rpythonic_function_(		"ED_spacetype_buttons", ctypes.c_void_p, [] )

ED_spacetype_info = _rpythonic_function_(		"ED_spacetype_info", ctypes.c_void_p, [] )

ED_spacetype_file = _rpythonic_function_(		"ED_spacetype_file", ctypes.c_void_p, [] )

ED_spacetype_sound = _rpythonic_function_(		"ED_spacetype_sound", ctypes.c_void_p, [] )

ED_spacetype_action = _rpythonic_function_(		"ED_spacetype_action", ctypes.c_void_p, [] )

ED_spacetype_nla = _rpythonic_function_(		"ED_spacetype_nla", ctypes.c_void_p, [] )

ED_spacetype_script = _rpythonic_function_(		"ED_spacetype_script", ctypes.c_void_p, [] )

ED_spacetype_text = _rpythonic_function_(		"ED_spacetype_text", ctypes.c_void_p, [] )

ED_spacetype_sequencer = _rpythonic_function_(		"ED_spacetype_sequencer", ctypes.c_void_p, [] )

ED_spacetype_logic = _rpythonic_function_(		"ED_spacetype_logic", ctypes.c_void_p, [] )

ED_spacetype_console = _rpythonic_function_(		"ED_spacetype_console", ctypes.c_void_p, [] )

ED_spacetype_userpref = _rpythonic_function_(		"ED_spacetype_userpref", ctypes.c_void_p, [] )

ED_file_init = _rpythonic_function_(		"ED_file_init", ctypes.c_void_p, [] )

ED_file_exit = _rpythonic_function_(		"ED_file_exit", ctypes.c_void_p, [] )

ED_region_draw_cb_activate = _rpythonic_function_(		"ED_region_draw_cb_activate", ctypes.POINTER(ctypes.c_void_p), [
	("ARegionType",		ctypes.POINTER(ARegionType)),
	("draw",		ctypes.c_void_p),
	("custumdata",		ctypes.POINTER(ctypes.c_void_p)),
	("C_type",		ctypes.c_int),] )

ED_region_draw_cb_draw = _rpythonic_function_(		"ED_region_draw_cb_draw", ctypes.c_void_p, [
	("bContext",		ctypes.POINTER(bContext)),
	("ARegion",		ctypes.POINTER(ARegion)),
	("none",		ctypes.c_int),] )

ED_region_draw_cb_exit = _rpythonic_function_(		"ED_region_draw_cb_exit", ctypes.c_void_p, [
	("ARegionType",		ctypes.POINTER(ARegionType)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

ED_region_draw_cb_customdata = _rpythonic_function_(		"ED_region_draw_cb_customdata", ctypes.POINTER(ctypes.c_void_p), [("handle",		ctypes.c_void_p)] )

returnfunc = _rpythonic_function_(		"returnfunc", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_char)),] )

returnfunc_event = _rpythonic_function_(		"returnfunc_event", ctypes.c_void_p, [
	("none",		ctypes.c_ushort),] )

returnfunc_args = _rpythonic_function_(		"returnfunc_args", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

ED_region_do_listen = _rpythonic_function_(		"ED_region_do_listen", ctypes.c_void_p, [
	("ar",		ctypes.POINTER(ARegion)),
	("note",		ctypes.POINTER(wmNotifier)),] )

ED_region_do_draw = _rpythonic_function_(		"ED_region_do_draw", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("ar",		ctypes.POINTER(ARegion)),] )

ED_region_exit = _rpythonic_function_(		"ED_region_exit", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("ar",		ctypes.POINTER(ARegion)),] )

ED_region_pixelspace = _rpythonic_function_(		"ED_region_pixelspace", ctypes.c_void_p, [
	("ar",		ctypes.POINTER(ARegion)),] )

ED_region_set = _rpythonic_function_(		"ED_region_set", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("ar",		ctypes.POINTER(ARegion)),] )

ED_region_init = _rpythonic_function_(		"ED_region_init", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("ar",		ctypes.POINTER(ARegion)),] )

ED_region_tag_redraw = _rpythonic_function_(		"ED_region_tag_redraw", ctypes.c_void_p, [
	("ar",		ctypes.POINTER(ARegion)),] )

ED_region_tag_redraw_partial = _rpythonic_function_(		"ED_region_tag_redraw_partial", ctypes.c_void_p, [
	("ar",		ctypes.POINTER(ARegion)),
	("rct",		ctypes.POINTER(rcti)),] )

ED_region_tag_redraw_overlay = _rpythonic_function_(		"ED_region_tag_redraw_overlay", ctypes.c_void_p, [
	("ar",		ctypes.POINTER(ARegion)),] )

ED_region_panels_init = _rpythonic_function_(		"ED_region_panels_init", ctypes.c_void_p, [
	("wm",		ctypes.POINTER(wmWindowManager)),
	("ar",		ctypes.POINTER(ARegion)),] )

ED_region_panels = _rpythonic_function_(		"ED_region_panels", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("ar",		ctypes.POINTER(ARegion)),
	("vertical",		ctypes.c_int),
	("context",		ctypes.POINTER(ctypes.c_char)),
	("contextnr",		ctypes.c_int),] )

ED_region_header_init = _rpythonic_function_(		"ED_region_header_init", ctypes.c_void_p, [
	("ar",		ctypes.POINTER(ARegion)),] )

ED_region_header = _rpythonic_function_(		"ED_region_header", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("ar",		ctypes.POINTER(ARegion)),] )

ED_region_toggle_hidden = _rpythonic_function_(		"ED_region_toggle_hidden", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("ar",		ctypes.POINTER(ARegion)),] )

region_scissor_winrct = _rpythonic_function_(		"region_scissor_winrct", ctypes.c_void_p, [
	("ar",		ctypes.POINTER(ARegion)),
	("winrct",		ctypes.POINTER(rcti)),] )

ED_spacetypes_init = _rpythonic_function_(		"ED_spacetypes_init", ctypes.c_void_p, [] )

ED_spacetypes_keymap = _rpythonic_function_(		"ED_spacetypes_keymap", ctypes.c_void_p, [
	("keyconf",		ctypes.POINTER(wmKeyConfig)),] )

ED_area_header_switchbutton = _rpythonic_function_(		"ED_area_header_switchbutton", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("block",		ctypes.POINTER(uiBlock)),
	("yco",		ctypes.c_int),] )

ED_area_header_standardbuttons = _rpythonic_function_(		"ED_area_header_standardbuttons", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("block",		ctypes.POINTER(uiBlock)),
	("yco",		ctypes.c_int),] )

ED_area_overdraw = _rpythonic_function_(		"ED_area_overdraw", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

ED_area_overdraw_flush = _rpythonic_function_(		"ED_area_overdraw_flush", ctypes.c_void_p, [
	("sa",		ctypes.POINTER(ScrArea)),
	("ar",		ctypes.POINTER(ARegion)),] )

ED_area_initialize = _rpythonic_function_(		"ED_area_initialize", ctypes.c_void_p, [
	("wm",		ctypes.POINTER(wmWindowManager)),
	("win",		ctypes.POINTER(wmWindow)),
	("sa",		ctypes.POINTER(ScrArea)),] )

ED_area_exit = _rpythonic_function_(		"ED_area_exit", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("sa",		ctypes.POINTER(ScrArea)),] )

ED_screen_area_active = _rpythonic_function_(		"ED_screen_area_active", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_area_do_listen = _rpythonic_function_(		"ED_area_do_listen", ctypes.c_void_p, [
	("sa",		ctypes.POINTER(ScrArea)),
	("note",		ctypes.POINTER(wmNotifier)),] )

ED_area_tag_redraw = _rpythonic_function_(		"ED_area_tag_redraw", ctypes.c_void_p, [
	("sa",		ctypes.POINTER(ScrArea)),] )

ED_area_tag_redraw_regiontype = _rpythonic_function_(		"ED_area_tag_redraw_regiontype", ctypes.c_void_p, [
	("sa",		ctypes.POINTER(ScrArea)),
	("C_type",		ctypes.c_int),] )

ED_area_tag_refresh = _rpythonic_function_(		"ED_area_tag_refresh", ctypes.c_void_p, [
	("sa",		ctypes.POINTER(ScrArea)),] )

ED_area_do_refresh = _rpythonic_function_(		"ED_area_do_refresh", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("sa",		ctypes.POINTER(ScrArea)),] )

ED_area_headerprint = _rpythonic_function_(		"ED_area_headerprint", ctypes.c_void_p, [
	("sa",		ctypes.POINTER(ScrArea)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

ED_area_newspace = _rpythonic_function_(		"ED_area_newspace", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("sa",		ctypes.POINTER(ScrArea)),
	("C_type",		ctypes.c_int),] )

ED_area_prevspace = _rpythonic_function_(		"ED_area_prevspace", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("sa",		ctypes.POINTER(ScrArea)),] )

ED_area_swapspace = _rpythonic_function_(		"ED_area_swapspace", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("sa1",		ctypes.POINTER(ScrArea)),
	("sa2",		ctypes.POINTER(ScrArea)),] )

ED_area_headersize = _rpythonic_function_(		"ED_area_headersize", ctypes.c_int, [] )

ED_screens_initialize = _rpythonic_function_(		"ED_screens_initialize", ctypes.c_void_p, [
	("wm",		ctypes.POINTER(wmWindowManager)),] )

ED_screen_draw = _rpythonic_function_(		"ED_screen_draw", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),] )

ED_screen_refresh = _rpythonic_function_(		"ED_screen_refresh", ctypes.c_void_p, [
	("wm",		ctypes.POINTER(wmWindowManager)),
	("win",		ctypes.POINTER(wmWindow)),] )

ED_screen_do_listen = _rpythonic_function_(		"ED_screen_do_listen", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("note",		ctypes.POINTER(wmNotifier)),] )

ED_screen_duplicate = _rpythonic_function_(		"ED_screen_duplicate", ctypes.POINTER(bScreen), [
	("win",		ctypes.POINTER(wmWindow)),
	("sc",		ctypes.POINTER(bScreen)),] )

ED_screen_add = _rpythonic_function_(		"ED_screen_add", ctypes.POINTER(bScreen), [
	("win",		ctypes.POINTER(wmWindow)),
	("scene",		ctypes.POINTER(Scene)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

ED_screen_set = _rpythonic_function_(		"ED_screen_set", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("sc",		ctypes.POINTER(bScreen)),] )

ED_screen_delete = _rpythonic_function_(		"ED_screen_delete", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("sc",		ctypes.POINTER(bScreen)),] )

ED_screen_set_scene = _rpythonic_function_(		"ED_screen_set_scene", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("scene",		ctypes.POINTER(Scene)),] )

ED_screen_delete_scene = _rpythonic_function_(		"ED_screen_delete_scene", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("scene",		ctypes.POINTER(Scene)),] )

ED_screen_set_subwinactive = _rpythonic_function_(		"ED_screen_set_subwinactive", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("event",		ctypes.POINTER(wmEvent)),] )

ED_screen_exit = _rpythonic_function_(		"ED_screen_exit", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("window",		ctypes.POINTER(wmWindow)),
	("screen",		ctypes.POINTER(bScreen)),] )

ED_screen_animation_timer = _rpythonic_function_(		"ED_screen_animation_timer", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("redraws",		ctypes.c_int),
	("refresh",		ctypes.c_int),
	("sync",		ctypes.c_int),
	("enable",		ctypes.c_int),] )

ED_screen_animation_timer_update = _rpythonic_function_(		"ED_screen_animation_timer_update", ctypes.c_void_p, [
	("screen",		ctypes.POINTER(bScreen)),
	("redraws",		ctypes.c_int),
	("refresh",		ctypes.c_int),] )

ED_screen_full_newspace = _rpythonic_function_(		"ED_screen_full_newspace", ctypes.POINTER(ScrArea), [
	("C",		ctypes.POINTER(bContext)),
	("sa",		ctypes.POINTER(ScrArea)),
	("C_type",		ctypes.c_int),] )

ED_screen_full_prevspace = _rpythonic_function_(		"ED_screen_full_prevspace", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("sa",		ctypes.POINTER(ScrArea)),] )

ED_screen_full_restore = _rpythonic_function_(		"ED_screen_full_restore", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("sa",		ctypes.POINTER(ScrArea)),] )

ED_screen_full_toggle = _rpythonic_function_(		"ED_screen_full_toggle", ctypes.POINTER(ScrArea), [
	("C",		ctypes.POINTER(bContext)),
	("win",		ctypes.POINTER(wmWindow)),
	("sa",		ctypes.POINTER(ScrArea)),] )

ED_screen_new_window = _rpythonic_function_(		"ED_screen_new_window", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("position",		ctypes.POINTER(rcti)),
	("C_type",		ctypes.c_int),] )

ED_update_for_newframe = _rpythonic_function_(		"ED_update_for_newframe", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("scene",		ctypes.POINTER(Scene)),
	("screen",		ctypes.POINTER(bScreen)),
	("mute",		ctypes.c_int),] )

ED_refresh_viewport_fps = _rpythonic_function_(		"ED_refresh_viewport_fps", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

ED_screen_animation_play = _rpythonic_function_(		"ED_screen_animation_play", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("sync",		ctypes.c_int),
	("mode",		ctypes.c_int),] )

ED_operatortypes_screen = _rpythonic_function_(		"ED_operatortypes_screen", ctypes.c_void_p, [] )

ED_keymap_screen = _rpythonic_function_(		"ED_keymap_screen", ctypes.c_void_p, [
	("keyconf",		ctypes.POINTER(wmKeyConfig)),] )

ED_operator_screenactive = _rpythonic_function_(		"ED_operator_screenactive", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_screen_mainwinactive = _rpythonic_function_(		"ED_operator_screen_mainwinactive", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_areaactive = _rpythonic_function_(		"ED_operator_areaactive", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_regionactive = _rpythonic_function_(		"ED_operator_regionactive", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_scene_editable = _rpythonic_function_(		"ED_operator_scene_editable", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_objectmode = _rpythonic_function_(		"ED_operator_objectmode", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_view3d_active = _rpythonic_function_(		"ED_operator_view3d_active", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_region_view3d_active = _rpythonic_function_(		"ED_operator_region_view3d_active", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_animview_active = _rpythonic_function_(		"ED_operator_animview_active", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_timeline_active = _rpythonic_function_(		"ED_operator_timeline_active", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_outliner_active = _rpythonic_function_(		"ED_operator_outliner_active", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_outliner_active_no_editobject = _rpythonic_function_(		"ED_operator_outliner_active_no_editobject", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_file_active = _rpythonic_function_(		"ED_operator_file_active", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_action_active = _rpythonic_function_(		"ED_operator_action_active", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_buttons_active = _rpythonic_function_(		"ED_operator_buttons_active", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_node_active = _rpythonic_function_(		"ED_operator_node_active", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_graphedit_active = _rpythonic_function_(		"ED_operator_graphedit_active", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_sequencer_active = _rpythonic_function_(		"ED_operator_sequencer_active", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_image_active = _rpythonic_function_(		"ED_operator_image_active", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_nla_active = _rpythonic_function_(		"ED_operator_nla_active", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_logic_active = _rpythonic_function_(		"ED_operator_logic_active", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_info_active = _rpythonic_function_(		"ED_operator_info_active", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_console_active = _rpythonic_function_(		"ED_operator_console_active", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_object_active = _rpythonic_function_(		"ED_operator_object_active", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_object_active_editable = _rpythonic_function_(		"ED_operator_object_active_editable", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_object_active_editable_mesh = _rpythonic_function_(		"ED_operator_object_active_editable_mesh", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_object_active_editable_font = _rpythonic_function_(		"ED_operator_object_active_editable_font", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_editmesh = _rpythonic_function_(		"ED_operator_editmesh", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_editmesh_view3d = _rpythonic_function_(		"ED_operator_editmesh_view3d", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_editmesh_region_view3d = _rpythonic_function_(		"ED_operator_editmesh_region_view3d", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_editarmature = _rpythonic_function_(		"ED_operator_editarmature", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_editcurve = _rpythonic_function_(		"ED_operator_editcurve", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_editsurf = _rpythonic_function_(		"ED_operator_editsurf", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_editsurfcurve = _rpythonic_function_(		"ED_operator_editsurfcurve", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_editsurfcurve_region_view3d = _rpythonic_function_(		"ED_operator_editsurfcurve_region_view3d", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_editfont = _rpythonic_function_(		"ED_operator_editfont", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_editlattice = _rpythonic_function_(		"ED_operator_editlattice", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_editmball = _rpythonic_function_(		"ED_operator_editmball", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_uvedit = _rpythonic_function_(		"ED_operator_uvedit", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_uvmap = _rpythonic_function_(		"ED_operator_uvmap", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_posemode = _rpythonic_function_(		"ED_operator_posemode", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_editors_init = _rpythonic_function_(		"ED_editors_init", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

ED_editors_exit = _rpythonic_function_(		"ED_editors_exit", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

ED_undo_push = _rpythonic_function_(		"ED_undo_push", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

ED_undo_push_op = _rpythonic_function_(		"ED_undo_push_op", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),] )

ED_undo_pop_op = _rpythonic_function_(		"ED_undo_pop_op", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),] )

ED_undo_pop = _rpythonic_function_(		"ED_undo_pop", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

ED_undo_redo = _rpythonic_function_(		"ED_undo_redo", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

ED_OT_undo = _rpythonic_function_(		"ED_OT_undo", ctypes.c_void_p, [
	("ot",		ctypes.POINTER(wmOperatorType)),] )

ED_OT_undo_push = _rpythonic_function_(		"ED_OT_undo_push", ctypes.c_void_p, [
	("ot",		ctypes.POINTER(wmOperatorType)),] )

ED_OT_redo = _rpythonic_function_(		"ED_OT_redo", ctypes.c_void_p, [
	("ot",		ctypes.POINTER(wmOperatorType)),] )

ED_OT_undo_history = _rpythonic_function_(		"ED_OT_undo_history", ctypes.c_void_p, [
	("ot",		ctypes.POINTER(wmOperatorType)),] )

ED_undo_operator_repeat = _rpythonic_function_(		"ED_undo_operator_repeat", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),] )

ED_undo_operator_repeat_cb = _rpythonic_function_(		"ED_undo_operator_repeat_cb", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("arg_op",		ctypes.POINTER(ctypes.c_void_p)),
	("arg_unused",		ctypes.POINTER(ctypes.c_void_p)),] )

ED_undo_operator_repeat_cb_evt = _rpythonic_function_(		"ED_undo_operator_repeat_cb_evt", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("arg_op",		ctypes.POINTER(ctypes.c_void_p)),
	("arg_unused",		ctypes.c_int),] )

ED_undo_valid = _rpythonic_function_(		"ED_undo_valid", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("undoname",		ctypes.POINTER(ctypes.c_char)),] )

undo_editmode_push = _rpythonic_function_(		"undo_editmode_push", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("getdata",		ctypes.POINTER(ctypes.c_void_p)),
	("freedata",		ctypes.c_void_p),
	("to_editmode",		ctypes.c_void_p),
	("from_editmode",		ctypes.POINTER(ctypes.c_void_p)),
	("validate_undo",		ctypes.c_void_p),] )

getdata = _rpythonic_function_(		"getdata", ctypes.POINTER(ctypes.c_void_p), [
	("C",		ctypes.POINTER(bContext)),] )

freedata = _rpythonic_function_(		"freedata", ctypes.c_void_p, [] )

to_editmode = _rpythonic_function_(		"to_editmode", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

from_editmode = _rpythonic_function_(		"from_editmode", ctypes.POINTER(ctypes.c_void_p), [] )

validate_undo = _rpythonic_function_(		"validate_undo", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

undo_editmode_clear = _rpythonic_function_(		"undo_editmode_clear", ctypes.c_void_p, [] )

crazyspace_get_mapped_editverts = _rpythonic_function_(		"crazyspace_get_mapped_editverts", ctypes.POINTER(ctypes.c_float), [
	("scene",		ctypes.POINTER(Scene)),
	("obedit",		ctypes.POINTER(Object)),] )

crazyspace_set_quats_editmesh = _rpythonic_function_(		"crazyspace_set_quats_editmesh", ctypes.c_void_p, [
	("em",		ctypes.POINTER(EditMesh)),
	("origcos",		ctypes.POINTER(ctypes.c_float)),
	("mappedcos",		ctypes.POINTER(ctypes.c_float)),
	("quats",		ctypes.POINTER(ctypes.c_float)),] )

crazyspace_set_quats_mesh = _rpythonic_function_(		"crazyspace_set_quats_mesh", ctypes.c_void_p, [
	("me",		ctypes.POINTER(Mesh)),
	("origcos",		ctypes.POINTER(ctypes.c_float)),
	("mappedcos",		ctypes.POINTER(ctypes.c_float)),
	("quats",		ctypes.POINTER(ctypes.c_float)),] )

sculpt_get_first_deform_matrices = _rpythonic_function_(		"sculpt_get_first_deform_matrices", ctypes.c_int, [
	("scene",		ctypes.POINTER(Scene)),
	("ob",		ctypes.POINTER(Object)),
	("deformmats",		ctypes.POINTER(ctypes.POINTER(ctypes.c_float))),
	("deformcos",		ctypes.POINTER(ctypes.POINTER(ctypes.c_float))),] )

crazyspace_build_sculpt = _rpythonic_function_(		"crazyspace_build_sculpt", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("ob",		ctypes.POINTER(Object)),
	("deformmats",		ctypes.POINTER(ctypes.POINTER(ctypes.c_float))),
	("deformcos",		ctypes.POINTER(ctypes.POINTER(ctypes.c_float))),] )

apply_keyb_grid = _rpythonic_function_(		"apply_keyb_grid", ctypes.c_void_p, [
	("shift",		ctypes.c_int),
	("ctrl",		ctypes.c_int),
	("val",		ctypes.POINTER(ctypes.c_float)),
	("fac1",		ctypes.c_float),
	("fac2",		ctypes.c_float),
	("fac3",		ctypes.c_float),
	("invert",		ctypes.c_int),] )

GetButStringLength = _rpythonic_function_(		"GetButStringLength", ctypes.c_int, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

unpack_menu = _rpythonic_function_(		"unpack_menu", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("opname",		ctypes.POINTER(ctypes.c_char)),
	("id_name",		ctypes.POINTER(ctypes.c_char)),
	("abs_name",		ctypes.POINTER(ctypes.c_char)),
	("folder",		ctypes.POINTER(ctypes.c_char)),
	("pf",		ctypes.POINTER(PackedFile)),] )

WM_keyconfig_new = _rpythonic_function_(		"WM_keyconfig_new", ctypes.POINTER(wmKeyConfig), [
	("wm",		ctypes.POINTER(wmWindowManager)),
	("idname",		ctypes.POINTER(ctypes.c_char)),] )

WM_keyconfig_new_user = _rpythonic_function_(		"WM_keyconfig_new_user", ctypes.POINTER(wmKeyConfig), [
	("wm",		ctypes.POINTER(wmWindowManager)),
	("idname",		ctypes.POINTER(ctypes.c_char)),] )

WM_keyconfig_remove = _rpythonic_function_(		"WM_keyconfig_remove", ctypes.c_void_p, [
	("wm",		ctypes.POINTER(wmWindowManager)),
	("keyconf",		ctypes.POINTER(wmKeyConfig)),] )

WM_keyconfig_free = _rpythonic_function_(		"WM_keyconfig_free", ctypes.c_void_p, [
	("keyconf",		ctypes.POINTER(wmKeyConfig)),] )

WM_keyconfig_set_active = _rpythonic_function_(		"WM_keyconfig_set_active", ctypes.c_void_p, [
	("wm",		ctypes.POINTER(wmWindowManager)),
	("idname",		ctypes.POINTER(ctypes.c_char)),] )

WM_keyconfig_update = _rpythonic_function_(		"WM_keyconfig_update", ctypes.c_void_p, [
	("wm",		ctypes.POINTER(wmWindowManager)),] )

WM_keyconfig_update_tag = _rpythonic_function_(		"WM_keyconfig_update_tag", ctypes.c_void_p, [
	("keymap",		ctypes.POINTER(wmKeyMap)),
	("kmi",		ctypes.POINTER(wmKeyMapItem)),] )

WM_keymap_init = _rpythonic_function_(		"WM_keymap_init", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

WM_keymap_free = _rpythonic_function_(		"WM_keymap_free", ctypes.c_void_p, [
	("keymap",		ctypes.POINTER(wmKeyMap)),] )

WM_keymap_verify_item = _rpythonic_function_(		"WM_keymap_verify_item", ctypes.POINTER(wmKeyMapItem), [
	("keymap",		ctypes.POINTER(wmKeyMap)),
	("idname",		ctypes.POINTER(ctypes.c_char)),
	("C_type",		ctypes.c_int),
	("val",		ctypes.c_int),
	("modifier",		ctypes.c_int),
	("keymodifier",		ctypes.c_int),] )

WM_keymap_add_item = _rpythonic_function_(		"WM_keymap_add_item", ctypes.POINTER(wmKeyMapItem), [
	("keymap",		ctypes.POINTER(wmKeyMap)),
	("idname",		ctypes.POINTER(ctypes.c_char)),
	("C_type",		ctypes.c_int),
	("val",		ctypes.c_int),
	("modifier",		ctypes.c_int),
	("keymodifier",		ctypes.c_int),] )

WM_keymap_add_menu = _rpythonic_function_(		"WM_keymap_add_menu", ctypes.POINTER(wmKeyMapItem), [
	("keymap",		ctypes.POINTER(wmKeyMap)),
	("idname",		ctypes.POINTER(ctypes.c_char)),
	("C_type",		ctypes.c_int),
	("val",		ctypes.c_int),
	("modifier",		ctypes.c_int),
	("keymodifier",		ctypes.c_int),] )

WM_keymap_remove_item = _rpythonic_function_(		"WM_keymap_remove_item", ctypes.c_void_p, [
	("keymap",		ctypes.POINTER(wmKeyMap)),
	("kmi",		ctypes.POINTER(wmKeyMapItem)),] )

WM_keymap_item_to_string = _rpythonic_function_(		"WM_keymap_item_to_string", ctypes.POINTER(ctypes.c_char), [
	("kmi",		ctypes.POINTER(wmKeyMapItem)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

WM_keymap_list_find = _rpythonic_function_(		"WM_keymap_list_find", ctypes.POINTER(wmKeyMap), [
	("lb",		ctypes.POINTER(ListBase)),
	("idname",		ctypes.POINTER(ctypes.c_char)),
	("spaceid",		ctypes.c_int),
	("regionid",		ctypes.c_int),] )

WM_keymap_find = _rpythonic_function_(		"WM_keymap_find", ctypes.POINTER(wmKeyMap), [
	("keyconf",		ctypes.POINTER(wmKeyConfig)),
	("idname",		ctypes.POINTER(ctypes.c_char)),
	("spaceid",		ctypes.c_int),
	("regionid",		ctypes.c_int),] )

WM_keymap_find_all = _rpythonic_function_(		"WM_keymap_find_all", ctypes.POINTER(wmKeyMap), [
	("C",		ctypes.POINTER(bContext)),
	("idname",		ctypes.POINTER(ctypes.c_char)),
	("spaceid",		ctypes.c_int),
	("regionid",		ctypes.c_int),] )

WM_keymap_active = _rpythonic_function_(		"WM_keymap_active", ctypes.POINTER(wmKeyMap), [
	("wm",		ctypes.POINTER(wmWindowManager)),
	("keymap",		ctypes.POINTER(wmKeyMap)),] )

WM_keymap_guess_opname = _rpythonic_function_(		"WM_keymap_guess_opname", ctypes.POINTER(wmKeyMap), [
	("C",		ctypes.POINTER(bContext)),
	("opname",		ctypes.POINTER(ctypes.c_char)),] )

WM_keymap_item_find_id = _rpythonic_function_(		"WM_keymap_item_find_id", ctypes.POINTER(wmKeyMapItem), [
	("keymap",		ctypes.POINTER(wmKeyMap)),
	("C_id",		ctypes.c_int),] )

WM_keymap_item_compare = _rpythonic_function_(		"WM_keymap_item_compare", ctypes.c_int, [
	("k1",		ctypes.POINTER(wmKeyMapItem)),
	("k2",		ctypes.POINTER(wmKeyMapItem)),] )

WM_modalkeymap_add = _rpythonic_function_(		"WM_modalkeymap_add", ctypes.POINTER(wmKeyMap), [
	("keyconf",		ctypes.POINTER(wmKeyConfig)),
	("idname",		ctypes.POINTER(ctypes.c_char)),
	("items",		ctypes.POINTER(EnumPropertyItem)),] )

WM_modalkeymap_get = _rpythonic_function_(		"WM_modalkeymap_get", ctypes.POINTER(wmKeyMap), [
	("keyconf",		ctypes.POINTER(wmKeyConfig)),
	("idname",		ctypes.POINTER(ctypes.c_char)),] )

WM_modalkeymap_add_item = _rpythonic_function_(		"WM_modalkeymap_add_item", ctypes.POINTER(wmKeyMapItem), [
	("km",		ctypes.POINTER(wmKeyMap)),
	("C_type",		ctypes.c_int),
	("val",		ctypes.c_int),
	("modifier",		ctypes.c_int),
	("keymodifier",		ctypes.c_int),
	("value",		ctypes.c_int),] )

WM_modalkeymap_assign = _rpythonic_function_(		"WM_modalkeymap_assign", ctypes.c_void_p, [
	("km",		ctypes.POINTER(wmKeyMap)),
	("opname",		ctypes.POINTER(ctypes.c_char)),] )

WM_keymap_restore_to_default = _rpythonic_function_(		"WM_keymap_restore_to_default", ctypes.c_void_p, [
	("keymap",		ctypes.POINTER(wmKeyMap)),
	("C",		ctypes.POINTER(bContext)),] )

WM_keymap_properties_reset = _rpythonic_function_(		"WM_keymap_properties_reset", ctypes.c_void_p, [
	("kmi",		ctypes.POINTER(wmKeyMapItem)),
	("properties",		ctypes.POINTER(IDProperty)),] )

WM_keymap_restore_item_to_default = _rpythonic_function_(		"WM_keymap_restore_item_to_default", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("keymap",		ctypes.POINTER(wmKeyMap)),
	("kmi",		ctypes.POINTER(wmKeyMapItem)),] )

WM_key_event_string = _rpythonic_function_(		"WM_key_event_string", ctypes.POINTER(ctypes.c_char), [
	("C_type",		ctypes.c_short),] )

WM_key_event_operator_id = _rpythonic_function_(		"WM_key_event_operator_id", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("opname",		ctypes.POINTER(ctypes.c_char)),
	("opcontext",		ctypes.c_int),
	("properties",		ctypes.POINTER(IDProperty)),
	("hotkey",		ctypes.c_int),
	("keymap_r",		ctypes.POINTER(ctypes.POINTER(wmKeyMap))),] )

WM_key_event_operator_string = _rpythonic_function_(		"WM_key_event_operator_string", ctypes.POINTER(ctypes.c_char), [
	("C",		ctypes.POINTER(bContext)),
	("opname",		ctypes.POINTER(ctypes.c_char)),
	("opcontext",		ctypes.c_int),
	("properties",		ctypes.POINTER(IDProperty)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

WM_setprefsize = _rpythonic_function_(		"WM_setprefsize", ctypes.c_void_p, [
	("stax",		ctypes.c_int),
	("stay",		ctypes.c_int),
	("sizx",		ctypes.c_int),
	("sizy",		ctypes.c_int),] )

WM_setinitialstate_fullscreen = _rpythonic_function_(		"WM_setinitialstate_fullscreen", ctypes.c_void_p, [] )

WM_setinitialstate_normal = _rpythonic_function_(		"WM_setinitialstate_normal", ctypes.c_void_p, [] )

WM_init = _rpythonic_function_(		"WM_init", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("argc",		ctypes.c_int),
	("argv",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

WM_exit = _rpythonic_function_(		"WM_exit", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

WM_main = _rpythonic_function_(		"WM_main", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

WM_init_game = _rpythonic_function_(		"WM_init_game", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

WM_init_splash = _rpythonic_function_(		"WM_init_splash", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

WM_check = _rpythonic_function_(		"WM_check", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

WM_window_open = _rpythonic_function_(		"WM_window_open", ctypes.POINTER(wmWindow), [
	("C",		ctypes.POINTER(bContext)),
	("rect",		ctypes.POINTER(rcti)),] )

WM_window_open_temp = _rpythonic_function_(		"WM_window_open_temp", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("position",		ctypes.POINTER(rcti)),
	("C_type",		ctypes.c_int),] )

WM_read_homefile_exec = _rpythonic_function_(		"WM_read_homefile_exec", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),] )

WM_read_homefile = _rpythonic_function_(		"WM_read_homefile", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("reports",		ctypes.POINTER(ReportList)),
	("from_memory",		ctypes.c_short),] )

WM_write_homefile = _rpythonic_function_(		"WM_write_homefile", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),] )

WM_read_file = _rpythonic_function_(		"WM_read_file", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("filepath",		ctypes.POINTER(ctypes.c_char)),
	("reports",		ctypes.POINTER(ReportList)),] )

WM_write_file = _rpythonic_function_(		"WM_write_file", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("target",		ctypes.POINTER(ctypes.c_char)),
	("fileflags",		ctypes.c_int),
	("reports",		ctypes.POINTER(ReportList)),
	("copy",		ctypes.c_int),] )

WM_read_autosavefile = _rpythonic_function_(		"WM_read_autosavefile", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

WM_autosave_init = _rpythonic_function_(		"WM_autosave_init", ctypes.c_void_p, [
	("wm",		ctypes.POINTER(wmWindowManager)),] )

WM_cursor_set = _rpythonic_function_(		"WM_cursor_set", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),
	("curs",		ctypes.c_int),] )

WM_cursor_modal = _rpythonic_function_(		"WM_cursor_modal", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),
	("curs",		ctypes.c_int),] )

WM_cursor_restore = _rpythonic_function_(		"WM_cursor_restore", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),] )

WM_cursor_wait = _rpythonic_function_(		"WM_cursor_wait", ctypes.c_void_p, [
	("val",		ctypes.c_int),] )

WM_cursor_grab = _rpythonic_function_(		"WM_cursor_grab", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),
	("wrap",		ctypes.c_int),
	("hide",		ctypes.c_int),
	("bounds",		ctypes.POINTER(ctypes.c_int)),] )

WM_cursor_ungrab = _rpythonic_function_(		"WM_cursor_ungrab", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),] )

WM_timecursor = _rpythonic_function_(		"WM_timecursor", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),
	("nr",		ctypes.c_int),] )

WM_paint_cursor_activate = _rpythonic_function_(		"WM_paint_cursor_activate", ctypes.POINTER(ctypes.c_void_p), [
	("wm",		ctypes.POINTER(wmWindowManager)),
	("poll",		ctypes.c_void_p),
	("draw",		ctypes.c_void_p),
	("customdata",		ctypes.POINTER(ctypes.c_void_p)),] )

WM_paint_cursor_end = _rpythonic_function_(		"WM_paint_cursor_end", ctypes.c_void_p, [
	("wm",		ctypes.POINTER(wmWindowManager)),
	("handle",		ctypes.POINTER(ctypes.c_void_p)),] )

WM_cursor_warp = _rpythonic_function_(		"WM_cursor_warp", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

WM_userdef_event_map = _rpythonic_function_(		"WM_userdef_event_map", ctypes.c_int, [
	("kmitype",		ctypes.c_int),] )

WM_event_add_keymap_handler = _rpythonic_function_(		"WM_event_add_keymap_handler", ctypes.POINTER(wmEventHandler), [
	("handlers",		ctypes.POINTER(ListBase)),
	("keymap",		ctypes.POINTER(wmKeyMap)),] )

WM_event_add_keymap_handler_bb = _rpythonic_function_(		"WM_event_add_keymap_handler_bb", ctypes.POINTER(wmEventHandler), [
	("handlers",		ctypes.POINTER(ListBase)),
	("keymap",		ctypes.POINTER(wmKeyMap)),
	("bb",		ctypes.POINTER(rcti)),
	("swinbb",		ctypes.POINTER(rcti)),] )

WM_event_add_keymap_handler_priority = _rpythonic_function_(		"WM_event_add_keymap_handler_priority", ctypes.POINTER(wmEventHandler), [
	("handlers",		ctypes.POINTER(ListBase)),
	("keymap",		ctypes.POINTER(wmKeyMap)),
	("priority",		ctypes.c_int),] )

WM_event_remove_keymap_handler = _rpythonic_function_(		"WM_event_remove_keymap_handler", ctypes.c_void_p, [
	("handlers",		ctypes.POINTER(ListBase)),
	("keymap",		ctypes.POINTER(wmKeyMap)),] )

WM_event_add_ui_handler = _rpythonic_function_(		"WM_event_add_ui_handler", ctypes.POINTER(wmEventHandler), [
	("C",		ctypes.POINTER(bContext)),
	("handlers",		ctypes.POINTER(ListBase)),
	("func",		ctypes.c_void_p),
	("remove",		ctypes.c_void_p),
	("userdata",		ctypes.POINTER(ctypes.c_void_p)),] )

WM_event_remove_ui_handler = _rpythonic_function_(		"WM_event_remove_ui_handler", ctypes.c_void_p, [
	("handlers",		ctypes.POINTER(ListBase)),
	("func",		ctypes.c_void_p),
	("remove",		ctypes.c_void_p),
	("userdata",		ctypes.POINTER(ctypes.c_void_p)),
	("postpone",		ctypes.c_int),] )

WM_event_remove_area_handler = _rpythonic_function_(		"WM_event_remove_area_handler", ctypes.c_void_p, [
	("handlers",		ctypes.POINTER(ListBase)),
	("area",		ctypes.POINTER(ctypes.c_void_p)),] )

WM_event_add_modal_handler = _rpythonic_function_(		"WM_event_add_modal_handler", ctypes.POINTER(wmEventHandler), [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),] )

WM_event_remove_handlers = _rpythonic_function_(		"WM_event_remove_handlers", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("handlers",		ctypes.POINTER(ListBase)),] )

WM_event_add_dropbox_handler = _rpythonic_function_(		"WM_event_add_dropbox_handler", ctypes.POINTER(wmEventHandler), [
	("handlers",		ctypes.POINTER(ListBase)),
	("dropboxes",		ctypes.POINTER(ListBase)),] )

WM_event_add_mousemove = _rpythonic_function_(		"WM_event_add_mousemove", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

WM_modal_tweak_exit = _rpythonic_function_(		"WM_modal_tweak_exit", ctypes.c_int, [
	("evt",		ctypes.POINTER(wmEvent)),
	("tweak_event",		ctypes.c_int),] )

WM_event_add_notifier = _rpythonic_function_(		"WM_event_add_notifier", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("C_type",		ctypes.c_uint),
	("reference",		ctypes.POINTER(ctypes.c_void_p)),] )

WM_main_add_notifier = _rpythonic_function_(		"WM_main_add_notifier", ctypes.c_void_p, [
	("C_type",		ctypes.c_uint),
	("reference",		ctypes.POINTER(ctypes.c_void_p)),] )

wm_event_add = _rpythonic_function_(		"wm_event_add", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),
	("event_to_add",		ctypes.POINTER(wmEvent)),] )

WM_event_add_timer = _rpythonic_function_(		"WM_event_add_timer", ctypes.POINTER(wmTimer), [
	("wm",		ctypes.POINTER(wmWindowManager)),
	("win",		ctypes.POINTER(wmWindow)),
	("event_type",		ctypes.c_int),
	("timestep",		ctypes.c_double),] )

WM_event_remove_timer = _rpythonic_function_(		"WM_event_remove_timer", ctypes.c_void_p, [
	("wm",		ctypes.POINTER(wmWindowManager)),
	("win",		ctypes.POINTER(wmWindow)),
	("timer",		ctypes.POINTER(wmTimer)),] )

WM_event_timer_sleep = _rpythonic_function_(		"WM_event_timer_sleep", ctypes.c_void_p, [
	("wm",		ctypes.POINTER(wmWindowManager)),
	("win",		ctypes.POINTER(wmWindow)),
	("timer",		ctypes.POINTER(wmTimer)),
	("dosleep",		ctypes.c_int),] )

WM_menu_invoke = _rpythonic_function_(		"WM_menu_invoke", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),
	("event",		ctypes.POINTER(wmEvent)),] )

WM_enum_search_invoke = _rpythonic_function_(		"WM_enum_search_invoke", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),
	("event",		ctypes.POINTER(wmEvent)),] )

WM_operator_confirm = _rpythonic_function_(		"WM_operator_confirm", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),
	("event",		ctypes.POINTER(wmEvent)),] )

WM_operator_filesel = _rpythonic_function_(		"WM_operator_filesel", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),
	("event",		ctypes.POINTER(wmEvent)),] )

WM_operator_winactive = _rpythonic_function_(		"WM_operator_winactive", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

WM_operator_props_popup = _rpythonic_function_(		"WM_operator_props_popup", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),
	("event",		ctypes.POINTER(wmEvent)),] )

WM_operator_props_dialog_popup = _rpythonic_function_(		"WM_operator_props_dialog_popup", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

WM_operator_redo_popup = _rpythonic_function_(		"WM_operator_redo_popup", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),] )

WM_operator_ui_popup = _rpythonic_function_(		"WM_operator_ui_popup", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

WM_operator_confirm_message = _rpythonic_function_(		"WM_operator_confirm_message", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),
	("message",		ctypes.POINTER(ctypes.c_char)),] )

WM_operator_free = _rpythonic_function_(		"WM_operator_free", ctypes.c_void_p, [
	("op",		ctypes.POINTER(wmOperator)),] )

WM_operator_stack_clear = _rpythonic_function_(		"WM_operator_stack_clear", ctypes.c_void_p, [
	("wm",		ctypes.POINTER(wmWindowManager)),] )

WM_operatortype_find = _rpythonic_function_(		"WM_operatortype_find", ctypes.POINTER(wmOperatorType), [
	("idnamem",		ctypes.POINTER(ctypes.c_char)),
	("quiet",		ctypes.c_int),] )

WM_operatortype_iter = _rpythonic_function_(		"WM_operatortype_iter", ctypes.POINTER(GHashIterator), [] )

WM_operatortype_append = _rpythonic_function_(		"WM_operatortype_append", ctypes.c_void_p, [
	("opfunc",		ctypes.c_void_p),] )

opfunc = _rpythonic_function_(		"opfunc", ctypes.c_void_p, [
	("wmOperatorType",		ctypes.POINTER(wmOperatorType)),] )

WM_operatortype_append_ptr = _rpythonic_function_(		"WM_operatortype_append_ptr", ctypes.c_void_p, [
	("opfunc",		ctypes.c_void_p),
	("userdata",		ctypes.POINTER(ctypes.c_void_p)),] )

WM_operatortype_append_macro_ptr = _rpythonic_function_(		"WM_operatortype_append_macro_ptr", ctypes.c_void_p, [
	("opfunc",		ctypes.c_void_p),
	("userdata",		ctypes.POINTER(ctypes.c_void_p)),] )

WM_operatortype_remove = _rpythonic_function_(		"WM_operatortype_remove", ctypes.c_int, [
	("idname",		ctypes.POINTER(ctypes.c_char)),] )

WM_operatortype_append_macro = _rpythonic_function_(		"WM_operatortype_append_macro", ctypes.POINTER(wmOperatorType), [
	("idname",		ctypes.POINTER(ctypes.c_char)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("flag",		ctypes.c_int),] )

WM_operatortype_macro_define = _rpythonic_function_(		"WM_operatortype_macro_define", ctypes.POINTER(wmOperatorTypeMacro), [
	("ot",		ctypes.POINTER(wmOperatorType)),
	("idname",		ctypes.POINTER(ctypes.c_char)),] )

WM_operator_poll = _rpythonic_function_(		"WM_operator_poll", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("ot",		ctypes.POINTER(wmOperatorType)),] )

WM_operator_poll_context = _rpythonic_function_(		"WM_operator_poll_context", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("ot",		ctypes.POINTER(wmOperatorType)),
	("context",		ctypes.c_int),] )

WM_operator_call = _rpythonic_function_(		"WM_operator_call", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),] )

WM_operator_repeat = _rpythonic_function_(		"WM_operator_repeat", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),] )

WM_operator_repeat_check = _rpythonic_function_(		"WM_operator_repeat_check", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),] )

WM_operator_name_call = _rpythonic_function_(		"WM_operator_name_call", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("opstring",		ctypes.POINTER(ctypes.c_char)),
	("context",		ctypes.c_int),
	("properties",		ctypes.POINTER(PointerRNA)),] )

WM_operator_call_py = _rpythonic_function_(		"WM_operator_call_py", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("ot",		ctypes.POINTER(wmOperatorType)),
	("context",		ctypes.c_int),
	("properties",		ctypes.POINTER(PointerRNA)),
	("reports",		ctypes.POINTER(ReportList)),] )

WM_operator_properties_alloc = _rpythonic_function_(		"WM_operator_properties_alloc", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(ctypes.POINTER(PointerRNA))),
	("properties",		ctypes.POINTER(ctypes.POINTER(IDProperty))),
	("opstring",		ctypes.POINTER(ctypes.c_char)),] )

WM_operator_properties_sanitize = _rpythonic_function_(		"WM_operator_properties_sanitize", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("no_context",		ctypes.c_short),] )

WM_operator_properties_create = _rpythonic_function_(		"WM_operator_properties_create", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("opstring",		ctypes.POINTER(ctypes.c_char)),] )

WM_operator_properties_create_ptr = _rpythonic_function_(		"WM_operator_properties_create_ptr", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("ot",		ctypes.POINTER(wmOperatorType)),] )

WM_operator_properties_free = _rpythonic_function_(		"WM_operator_properties_free", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WM_operator_properties_filesel = _rpythonic_function_(		"WM_operator_properties_filesel", ctypes.c_void_p, [
	("ot",		ctypes.POINTER(wmOperatorType)),
	("filter",		ctypes.c_int),
	("C_type",		ctypes.c_short),
	("action",		ctypes.c_short),
	("flag",		ctypes.c_short),] )

WM_operator_properties_gesture_border = _rpythonic_function_(		"WM_operator_properties_gesture_border", ctypes.c_void_p, [
	("ot",		ctypes.POINTER(wmOperatorType)),
	("extend",		ctypes.c_int),] )

WM_operator_properties_gesture_straightline = _rpythonic_function_(		"WM_operator_properties_gesture_straightline", ctypes.c_void_p, [
	("ot",		ctypes.POINTER(wmOperatorType)),
	("cursor",		ctypes.c_int),] )

WM_operator_properties_select_all = _rpythonic_function_(		"WM_operator_properties_select_all", ctypes.c_void_p, [
	("ot",		ctypes.POINTER(wmOperatorType)),] )

WM_operator_last_redo = _rpythonic_function_(		"WM_operator_last_redo", ctypes.POINTER(wmOperator), [
	("C",		ctypes.POINTER(bContext)),] )

WM_operator_pystring = _rpythonic_function_(		"WM_operator_pystring", ctypes.POINTER(ctypes.c_char), [
	("C",		ctypes.POINTER(bContext)),
	("ot",		ctypes.POINTER(wmOperatorType)),
	("opptr",		ctypes.POINTER(PointerRNA)),
	("all_args",		ctypes.c_int),] )

WM_operator_bl_idname = _rpythonic_function_(		"WM_operator_bl_idname", ctypes.c_void_p, [
	("to",		ctypes.POINTER(ctypes.c_char)),
	("from",		ctypes.POINTER(ctypes.c_char)),] )

WM_operator_py_idname = _rpythonic_function_(		"WM_operator_py_idname", ctypes.c_void_p, [
	("to",		ctypes.POINTER(ctypes.c_char)),
	("from",		ctypes.POINTER(ctypes.c_char)),] )

WM_menutype_init = _rpythonic_function_(		"WM_menutype_init", ctypes.c_void_p, [] )

WM_menutype_find = _rpythonic_function_(		"WM_menutype_find", ctypes.POINTER(MenuType), [
	("idname",		ctypes.POINTER(ctypes.c_char)),
	("quiet",		ctypes.c_int),] )

WM_menutype_add = _rpythonic_function_(		"WM_menutype_add", ctypes.c_int, [
	("mt",		ctypes.POINTER(MenuType)),] )

WM_menutype_contains = _rpythonic_function_(		"WM_menutype_contains", ctypes.c_int, [
	("mt",		ctypes.POINTER(MenuType)),] )

WM_menutype_freelink = _rpythonic_function_(		"WM_menutype_freelink", ctypes.c_void_p, [
	("mt",		ctypes.POINTER(MenuType)),] )

WM_menutype_free = _rpythonic_function_(		"WM_menutype_free", ctypes.c_void_p, [] )

WM_border_select_invoke = _rpythonic_function_(		"WM_border_select_invoke", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),
	("event",		ctypes.POINTER(wmEvent)),] )

WM_border_select_modal = _rpythonic_function_(		"WM_border_select_modal", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),
	("event",		ctypes.POINTER(wmEvent)),] )

WM_border_select_cancel = _rpythonic_function_(		"WM_border_select_cancel", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),] )

WM_gesture_circle_invoke = _rpythonic_function_(		"WM_gesture_circle_invoke", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),
	("event",		ctypes.POINTER(wmEvent)),] )

WM_gesture_circle_modal = _rpythonic_function_(		"WM_gesture_circle_modal", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),
	("event",		ctypes.POINTER(wmEvent)),] )

WM_gesture_circle_cancel = _rpythonic_function_(		"WM_gesture_circle_cancel", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),] )

WM_gesture_lines_invoke = _rpythonic_function_(		"WM_gesture_lines_invoke", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),
	("event",		ctypes.POINTER(wmEvent)),] )

WM_gesture_lines_modal = _rpythonic_function_(		"WM_gesture_lines_modal", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),
	("event",		ctypes.POINTER(wmEvent)),] )

WM_gesture_lines_cancel = _rpythonic_function_(		"WM_gesture_lines_cancel", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),] )

WM_gesture_lasso_invoke = _rpythonic_function_(		"WM_gesture_lasso_invoke", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),
	("event",		ctypes.POINTER(wmEvent)),] )

WM_gesture_lasso_modal = _rpythonic_function_(		"WM_gesture_lasso_modal", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),
	("event",		ctypes.POINTER(wmEvent)),] )

WM_gesture_lasso_cancel = _rpythonic_function_(		"WM_gesture_lasso_cancel", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),] )

WM_gesture_straightline_invoke = _rpythonic_function_(		"WM_gesture_straightline_invoke", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),
	("event",		ctypes.POINTER(wmEvent)),] )

WM_gesture_straightline_modal = _rpythonic_function_(		"WM_gesture_straightline_modal", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),
	("event",		ctypes.POINTER(wmEvent)),] )

WM_gesture_straightline_cancel = _rpythonic_function_(		"WM_gesture_straightline_cancel", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),] )

WM_OT_tweak_gesture = _rpythonic_function_(		"WM_OT_tweak_gesture", ctypes.c_void_p, [
	("ot",		ctypes.POINTER(wmOperatorType)),] )

WM_gesture_new = _rpythonic_function_(		"WM_gesture_new", ctypes.POINTER(wmGesture), [
	("C",		ctypes.POINTER(bContext)),
	("event",		ctypes.POINTER(wmEvent)),
	("C_type",		ctypes.c_int),] )

WM_gesture_end = _rpythonic_function_(		"WM_gesture_end", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("gesture",		ctypes.POINTER(wmGesture)),] )

WM_gestures_remove = _rpythonic_function_(		"WM_gestures_remove", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

WM_event_add_fileselect = _rpythonic_function_(		"WM_event_add_fileselect", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),] )

WM_event_fileselect_event = _rpythonic_function_(		"WM_event_fileselect_event", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("ophandle",		ctypes.POINTER(ctypes.c_void_p)),
	("eventval",		ctypes.c_int),] )

WM_event_start_drag = _rpythonic_function_(		"WM_event_start_drag", ctypes.POINTER(wmDrag), [
	("C",		ctypes.POINTER(bContext)),
	("icon",		ctypes.c_int),
	("C_type",		ctypes.c_int),
	("poin",		ctypes.POINTER(ctypes.c_void_p)),
	("value",		ctypes.c_double),] )

WM_event_drag_image = _rpythonic_function_(		"WM_event_drag_image", ctypes.c_void_p, [
	("wmDrag",		ctypes.POINTER(wmDrag)),
	("ImBuf",		ctypes.POINTER(ImBuf)),
	("scale",		ctypes.c_float),
	("sx",		ctypes.c_int),
	("sy",		ctypes.c_int),] )

WM_dropbox_add = _rpythonic_function_(		"WM_dropbox_add", ctypes.POINTER(wmDropBox), [
	("lb",		ctypes.POINTER(ListBase)),
	("idname",		ctypes.POINTER(ctypes.c_char)),
	("poll",		ctypes.c_void_p),
	("copy",		ctypes.c_void_p),] )

copy = _rpythonic_function_(		"copy", ctypes.c_void_p, [
	("wmDrag",		ctypes.POINTER(wmDrag)),
	("wmDropBox",		ctypes.POINTER(wmDropBox)),] )

WM_dropboxmap_find = _rpythonic_function_(		"WM_dropboxmap_find", ctypes.POINTER(ListBase), [
	("idname",		ctypes.POINTER(ctypes.c_char)),
	("spaceid",		ctypes.c_int),
	("regionid",		ctypes.c_int),] )

wmSubWindowSet = _rpythonic_function_(		"wmSubWindowSet", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),
	("swinid",		ctypes.c_int),] )

wmSubWindowScissorSet = _rpythonic_function_(		"wmSubWindowScissorSet", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),
	("swinid",		ctypes.c_int),
	("srct",		ctypes.POINTER(rcti)),] )

wmFrustum = _rpythonic_function_(		"wmFrustum", ctypes.c_void_p, [
	("x1",		ctypes.c_float),
	("x2",		ctypes.c_float),
	("y1",		ctypes.c_float),
	("y2",		ctypes.c_float),
	("n",		ctypes.c_float),
	("f",		ctypes.c_float),] )

wmOrtho = _rpythonic_function_(		"wmOrtho", ctypes.c_void_p, [
	("x1",		ctypes.c_float),
	("x2",		ctypes.c_float),
	("y1",		ctypes.c_float),
	("y2",		ctypes.c_float),
	("n",		ctypes.c_float),
	("f",		ctypes.c_float),] )

wmOrtho2 = _rpythonic_function_(		"wmOrtho2", ctypes.c_void_p, [
	("x1",		ctypes.c_float),
	("x2",		ctypes.c_float),
	("y1",		ctypes.c_float),
	("y2",		ctypes.c_float),] )

WM_set_framebuffer_index_color = _rpythonic_function_(		"WM_set_framebuffer_index_color", ctypes.c_void_p, [
	("index",		ctypes.c_int),] )

WM_framebuffer_to_index = _rpythonic_function_(		"WM_framebuffer_to_index", ctypes.c_int, [
	("col",		ctypes.c_uint),] )

WM_jobs_get = _rpythonic_function_(		"WM_jobs_get", ctypes.POINTER(wmJob), [
	("wm",		ctypes.POINTER(wmWindowManager)),
	("win",		ctypes.POINTER(wmWindow)),
	("owner",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("flag",		ctypes.c_int),] )

WM_jobs_test = _rpythonic_function_(		"WM_jobs_test", ctypes.c_int, [
	("wm",		ctypes.POINTER(wmWindowManager)),
	("owner",		ctypes.POINTER(ctypes.c_void_p)),] )

WM_jobs_progress = _rpythonic_function_(		"WM_jobs_progress", ctypes.c_float, [
	("wm",		ctypes.POINTER(wmWindowManager)),
	("owner",		ctypes.POINTER(ctypes.c_void_p)),] )

WM_jobs_name = _rpythonic_function_(		"WM_jobs_name", ctypes.POINTER(ctypes.c_char), [
	("wm",		ctypes.POINTER(wmWindowManager)),
	("owner",		ctypes.POINTER(ctypes.c_void_p)),] )

WM_jobs_is_running = _rpythonic_function_(		"WM_jobs_is_running", ctypes.c_int, [
	("wmJob",		ctypes.POINTER(wmJob)),] )

WM_jobs_get_customdata = _rpythonic_function_(		"WM_jobs_get_customdata", ctypes.POINTER(ctypes.c_void_p), [
	("wmJob",		ctypes.POINTER(wmJob)),] )

WM_jobs_customdata = _rpythonic_function_(		"WM_jobs_customdata", ctypes.c_void_p, [
	("wmJob",		ctypes.POINTER(wmJob)),
	("customdata",		ctypes.POINTER(ctypes.c_void_p)),
	("free",		ctypes.c_void_p),] )

WM_jobs_timer = _rpythonic_function_(		"WM_jobs_timer", ctypes.c_void_p, [
	("wmJob",		ctypes.POINTER(wmJob)),
	("timestep",		ctypes.c_double),
	("note",		ctypes.c_uint),
	("endnote",		ctypes.c_uint),] )

WM_jobs_callbacks = _rpythonic_function_(		"WM_jobs_callbacks", ctypes.c_void_p, [
	("wmJob",		ctypes.POINTER(wmJob)),
	("startjob",		ctypes.c_void_p),
	("initjob",		ctypes.c_void_p),
	("update",		ctypes.c_void_p),
	("endjob",		ctypes.c_void_p),] )

startjob = _rpythonic_function_(		"startjob", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_short)),
	("none",		ctypes.POINTER(ctypes.c_short)),
	("none",		ctypes.POINTER(ctypes.c_float)),] )

initjob = _rpythonic_function_(		"initjob", ctypes.c_void_p, [] )

update = _rpythonic_function_(		"update", ctypes.c_void_p, [] )

endjob = _rpythonic_function_(		"endjob", ctypes.c_void_p, [] )

WM_jobs_start = _rpythonic_function_(		"WM_jobs_start", ctypes.c_void_p, [
	("wm",		ctypes.POINTER(wmWindowManager)),
	("wmJob",		ctypes.POINTER(wmJob)),] )

WM_jobs_stop = _rpythonic_function_(		"WM_jobs_stop", ctypes.c_void_p, [
	("wm",		ctypes.POINTER(wmWindowManager)),
	("owner",		ctypes.POINTER(ctypes.c_void_p)),
	("startjob",		ctypes.POINTER(ctypes.c_void_p)),] )

WM_jobs_kill = _rpythonic_function_(		"WM_jobs_kill", ctypes.c_void_p, [
	("wm",		ctypes.POINTER(wmWindowManager)),
	("owner",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_void_p),] )

WM_jobs_stop_all = _rpythonic_function_(		"WM_jobs_stop_all", ctypes.c_void_p, [
	("wm",		ctypes.POINTER(wmWindowManager)),] )

WM_clipboard_text_get = _rpythonic_function_(		"WM_clipboard_text_get", ctypes.POINTER(ctypes.c_char), [
	("selection",		ctypes.c_int),] )

WM_clipboard_text_set = _rpythonic_function_(		"WM_clipboard_text_set", ctypes.c_void_p, [
	("buf",		ctypes.POINTER(ctypes.c_char)),
	("selection",		ctypes.c_int),] )

WM_progress_set = _rpythonic_function_(		"WM_progress_set", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),
	("progress",		ctypes.c_float),] )

WM_progress_clear = _rpythonic_function_(		"WM_progress_clear", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),] )

write_crash_blend = _rpythonic_function_(		"write_crash_blend", ctypes.c_int, [] )

wm_init_cursor_data = _rpythonic_function_(		"wm_init_cursor_data", ctypes.c_void_p, [] )

wm_cursor_arrow_move = _rpythonic_function_(		"wm_cursor_arrow_move", ctypes.c_int, [
	("win",		ctypes.POINTER(wmWindow)),
	("event",		ctypes.POINTER(wmEvent)),] )

wmUIHandlerFunc = _rpythonic_function_(		"wmUIHandlerFunc", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("event",		ctypes.POINTER(wmEvent)),
	("userdata",		ctypes.POINTER(ctypes.c_void_p)),] )

wmUIHandlerRemoveFunc = _rpythonic_function_(		"wmUIHandlerRemoveFunc", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("userdata",		ctypes.POINTER(ctypes.c_void_p)),] )

C_exec = _rpythonic_function_(		"C_exec", ctypes.c_int, [
	("bContext",		ctypes.POINTER(bContext)),
	("wmOperator",		ctypes.POINTER(wmOperator)),] )

check = _rpythonic_function_(		"check", ctypes.c_int, [
	("bContext",		ctypes.POINTER(bContext)),
	("wmOperator",		ctypes.POINTER(wmOperator)),] )

invoke = _rpythonic_function_(		"invoke", ctypes.c_int, [
	("bContext",		ctypes.POINTER(bContext)),
	("wmOperator",		ctypes.POINTER(wmOperator)),
	("wmEvent",		ctypes.POINTER(wmEvent)),] )

cancel = _rpythonic_function_(		"cancel", ctypes.c_int, [
	("bContext",		ctypes.POINTER(bContext)),
	("wmOperator",		ctypes.POINTER(wmOperator)),] )

modal = _rpythonic_function_(		"modal", ctypes.c_int, [
	("bContext",		ctypes.POINTER(bContext)),
	("wmOperator",		ctypes.POINTER(wmOperator)),
	("wmEvent",		ctypes.POINTER(wmEvent)),] )

ui = _rpythonic_function_(		"ui", ctypes.c_void_p, [
	("bContext",		ctypes.POINTER(bContext)),
	("wmOperator",		ctypes.POINTER(wmOperator)),] )

pyop_poll = _rpythonic_function_(		"pyop_poll", ctypes.c_int, [
	("bContext",		ctypes.POINTER(bContext)),
	("ot",		ctypes.POINTER(wmOperatorType)),] )

wmPaintCursorDraw = _rpythonic_function_(		"wmPaintCursorDraw", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("customdata",		ctypes.POINTER(ctypes.c_void_p)),] )

wm_close_and_free = _rpythonic_function_(		"wm_close_and_free", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

wm_close_and_free_all = _rpythonic_function_(		"wm_close_and_free_all", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

wm_add_default = _rpythonic_function_(		"wm_add_default", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

wm_clear_default_size = _rpythonic_function_(		"wm_clear_default_size", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

wm_operator_register = _rpythonic_function_(		"wm_operator_register", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),] )

wm_report_free = _rpythonic_function_(		"wm_report_free", ctypes.c_void_p, [
	("report",		ctypes.POINTER(wmReport)),] )

wm_operatortype_free = _rpythonic_function_(		"wm_operatortype_free", ctypes.c_void_p, [] )

wm_operatortype_init = _rpythonic_function_(		"wm_operatortype_init", ctypes.c_void_p, [] )

wm_window_keymap = _rpythonic_function_(		"wm_window_keymap", ctypes.c_void_p, [
	("keyconf",		ctypes.POINTER(wmKeyConfig)),] )

wm_tweakevent_test = _rpythonic_function_(		"wm_tweakevent_test", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("event",		ctypes.POINTER(wmEvent)),
	("action",		ctypes.c_int),] )

wm_gesture_draw = _rpythonic_function_(		"wm_gesture_draw", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),] )

wm_gesture_evaluate = _rpythonic_function_(		"wm_gesture_evaluate", ctypes.c_int, [
	("gesture",		ctypes.POINTER(wmGesture)),] )

wm_gesture_tag_redraw = _rpythonic_function_(		"wm_gesture_tag_redraw", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

wm_jobs_timer = _rpythonic_function_(		"wm_jobs_timer", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("wm",		ctypes.POINTER(wmWindowManager)),
	("wt",		ctypes.POINTER(wmTimer)),] )

wm_jobs_timer_ended = _rpythonic_function_(		"wm_jobs_timer_ended", ctypes.c_void_p, [
	("wm",		ctypes.POINTER(wmWindowManager)),
	("wt",		ctypes.POINTER(wmTimer)),] )

wm_autosave_timer = _rpythonic_function_(		"wm_autosave_timer", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("wm",		ctypes.POINTER(wmWindowManager)),
	("wt",		ctypes.POINTER(wmTimer)),] )

wm_autosave_timer_ended = _rpythonic_function_(		"wm_autosave_timer_ended", ctypes.c_void_p, [
	("wm",		ctypes.POINTER(wmWindowManager)),] )

wm_autosave_delete = _rpythonic_function_(		"wm_autosave_delete", ctypes.c_void_p, [] )

wm_autosave_read = _rpythonic_function_(		"wm_autosave_read", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("reports",		ctypes.POINTER(ReportList)),] )

wm_autosave_location = _rpythonic_function_(		"wm_autosave_location", ctypes.c_void_p, [
	("filepath",		ctypes.POINTER(ctypes.c_char)),] )

wm_event_free_all = _rpythonic_function_(		"wm_event_free_all", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),] )

wm_event_free = _rpythonic_function_(		"wm_event_free", ctypes.c_void_p, [
	("event",		ctypes.POINTER(wmEvent)),] )

wm_event_free_handler = _rpythonic_function_(		"wm_event_free_handler", ctypes.c_void_p, [
	("handler",		ctypes.POINTER(wmEventHandler)),] )

wm_event_do_handlers = _rpythonic_function_(		"wm_event_do_handlers", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

wm_event_add_ghostevent = _rpythonic_function_(		"wm_event_add_ghostevent", ctypes.c_void_p, [
	("wm",		ctypes.POINTER(wmWindowManager)),
	("win",		ctypes.POINTER(wmWindow)),
	("C_type",		ctypes.c_int),
	("time",		ctypes.c_int),
	("customdata",		ctypes.POINTER(ctypes.c_void_p)),] )

wm_event_do_notifiers = _rpythonic_function_(		"wm_event_do_notifiers", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

wm_dropbox_free = _rpythonic_function_(		"wm_dropbox_free", ctypes.c_void_p, [] )

wm_drags_check_ops = _rpythonic_function_(		"wm_drags_check_ops", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("event",		ctypes.POINTER(wmEvent)),] )

wm_drags_draw = _rpythonic_function_(		"wm_drags_draw", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("win",		ctypes.POINTER(wmWindow)),
	("rect",		ctypes.POINTER(rcti)),] )

wm_draw_update = _rpythonic_function_(		"wm_draw_update", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

wm_draw_window_clear = _rpythonic_function_(		"wm_draw_window_clear", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),] )

wm_draw_region_clear = _rpythonic_function_(		"wm_draw_region_clear", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),
	("ar",		ctypes.POINTER(ARegion)),] )

wm_tag_redraw_overlay = _rpythonic_function_(		"wm_tag_redraw_overlay", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),
	("ar",		ctypes.POINTER(ARegion)),] )

wm_ghost_init = _rpythonic_function_(		"wm_ghost_init", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

wm_ghost_exit = _rpythonic_function_(		"wm_ghost_exit", ctypes.c_void_p, [] )

wm_get_screensize = _rpythonic_function_(		"wm_get_screensize", ctypes.c_void_p, [
	("width_r",		ctypes.POINTER(ctypes.c_int)),
	("height_r",		ctypes.POINTER(ctypes.c_int)),] )

wm_window_new = _rpythonic_function_(		"wm_window_new", ctypes.POINTER(wmWindow), [
	("C",		ctypes.POINTER(bContext)),] )

wm_window_free = _rpythonic_function_(		"wm_window_free", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("wm",		ctypes.POINTER(wmWindowManager)),
	("win",		ctypes.POINTER(wmWindow)),] )

wm_window_close = _rpythonic_function_(		"wm_window_close", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("wm",		ctypes.POINTER(wmWindowManager)),
	("win",		ctypes.POINTER(wmWindow)),] )

wm_window_title = _rpythonic_function_(		"wm_window_title", ctypes.c_void_p, [
	("wm",		ctypes.POINTER(wmWindowManager)),
	("win",		ctypes.POINTER(wmWindow)),] )

wm_window_add_ghostwindows = _rpythonic_function_(		"wm_window_add_ghostwindows", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("wm",		ctypes.POINTER(wmWindowManager)),] )

wm_window_process_events = _rpythonic_function_(		"wm_window_process_events", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

wm_window_process_events_nosleep = _rpythonic_function_(		"wm_window_process_events_nosleep", ctypes.c_void_p, [] )

wm_window_make_drawable = _rpythonic_function_(		"wm_window_make_drawable", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("win",		ctypes.POINTER(wmWindow)),] )

wm_window_raise = _rpythonic_function_(		"wm_window_raise", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),] )

wm_window_lower = _rpythonic_function_(		"wm_window_lower", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),] )

wm_window_set_size = _rpythonic_function_(		"wm_window_set_size", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

wm_window_get_size = _rpythonic_function_(		"wm_window_get_size", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),
	("width_r",		ctypes.POINTER(ctypes.c_int)),
	("height_r",		ctypes.POINTER(ctypes.c_int)),] )

wm_window_get_size_ghost = _rpythonic_function_(		"wm_window_get_size_ghost", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),
	("width_r",		ctypes.POINTER(ctypes.c_int)),
	("height_r",		ctypes.POINTER(ctypes.c_int)),] )

wm_window_get_position = _rpythonic_function_(		"wm_window_get_position", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),
	("posx_r",		ctypes.POINTER(ctypes.c_int)),
	("posy_r",		ctypes.POINTER(ctypes.c_int)),] )

wm_window_swap_buffers = _rpythonic_function_(		"wm_window_swap_buffers", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),] )

wm_get_cursor_position = _rpythonic_function_(		"wm_get_cursor_position", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),
	("x",		ctypes.POINTER(ctypes.c_int)),
	("y",		ctypes.POINTER(ctypes.c_int)),] )

wm_window_copy = _rpythonic_function_(		"wm_window_copy", ctypes.POINTER(wmWindow), [
	("C",		ctypes.POINTER(bContext)),
	("winorig",		ctypes.POINTER(wmWindow)),] )

wm_window_testbreak = _rpythonic_function_(		"wm_window_testbreak", ctypes.c_void_p, [] )

wm_window_duplicate_exec = _rpythonic_function_(		"wm_window_duplicate_exec", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),] )

wm_window_fullscreen_toggle_exec = _rpythonic_function_(		"wm_window_fullscreen_toggle_exec", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),] )

wm_subwindows_free = _rpythonic_function_(		"wm_subwindows_free", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),] )

wm_subwindow_open = _rpythonic_function_(		"wm_subwindow_open", ctypes.c_int, [
	("win",		ctypes.POINTER(wmWindow)),
	("winrct",		ctypes.POINTER(rcti)),] )

wm_subwindow_close = _rpythonic_function_(		"wm_subwindow_close", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),
	("swinid",		ctypes.c_int),] )

wm_subwindow_get = _rpythonic_function_(		"wm_subwindow_get", ctypes.c_int, [
	("win",		ctypes.POINTER(wmWindow)),] )

wm_subwindow_position = _rpythonic_function_(		"wm_subwindow_position", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),
	("swinid",		ctypes.c_int),
	("winrct",		ctypes.POINTER(rcti)),] )

wm_subwindow_getsize = _rpythonic_function_(		"wm_subwindow_getsize", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),
	("swinid",		ctypes.c_int),
	("x",		ctypes.POINTER(ctypes.c_int)),
	("y",		ctypes.POINTER(ctypes.c_int)),] )

wm_subwindow_getorigin = _rpythonic_function_(		"wm_subwindow_getorigin", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),
	("swinid",		ctypes.c_int),
	("x",		ctypes.POINTER(ctypes.c_int)),
	("y",		ctypes.POINTER(ctypes.c_int)),] )

wm_subwindow_getmatrix = _rpythonic_function_(		"wm_subwindow_getmatrix", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),
	("swinid",		ctypes.c_int),
	("mat",		ctypes.c_float),] )

index_to_framebuffer = _rpythonic_function_(		"index_to_framebuffer", ctypes.c_uint, [
	("index",		ctypes.c_int),] )

GPU_state_init = _rpythonic_function_(		"GPU_state_init", ctypes.c_void_p, [] )

GPU_state_print = _rpythonic_function_(		"GPU_state_print", ctypes.c_void_p, [] )

GPU_begin_object_materials = _rpythonic_function_(		"GPU_begin_object_materials", ctypes.c_void_p, [
	("v3d",		ctypes.POINTER(View3D)),
	("rv3d",		ctypes.POINTER(RegionView3D)),
	("scene",		ctypes.POINTER(Scene)),
	("ob",		ctypes.POINTER(Object)),
	("glsl",		ctypes.c_int),
	("do_alpha_pass",		ctypes.POINTER(ctypes.c_int)),] )

GPU_end_object_materials = _rpythonic_function_(		"GPU_end_object_materials", ctypes.c_void_p, [] )

GPU_enable_material = _rpythonic_function_(		"GPU_enable_material", ctypes.c_int, [
	("nr",		ctypes.c_int),
	("attribs",		ctypes.POINTER(ctypes.c_void_p)),] )

GPU_disable_material = _rpythonic_function_(		"GPU_disable_material", ctypes.c_void_p, [] )

GPU_set_material_blend_mode = _rpythonic_function_(		"GPU_set_material_blend_mode", ctypes.c_void_p, [
	("blendmode",		ctypes.c_int),] )

GPU_get_material_blend_mode = _rpythonic_function_(		"GPU_get_material_blend_mode", ctypes.c_int, [] )

GPU_set_tpage = _rpythonic_function_(		"GPU_set_tpage", ctypes.c_int, [
	("tface",		ctypes.POINTER(MTFace)),
	("mipmap",		ctypes.c_int),] )

GPU_default_lights = _rpythonic_function_(		"GPU_default_lights", ctypes.c_int, [] )

GPU_scene_object_lights = _rpythonic_function_(		"GPU_scene_object_lights", ctypes.c_int, [
	("scene",		ctypes.POINTER(Scene)),
	("ob",		ctypes.POINTER(Object)),
	("lay",		ctypes.c_int),
	("viewmat",		ctypes.c_float),
	("ortho",		ctypes.c_int),] )

GPU_render_text = _rpythonic_function_(		"GPU_render_text", ctypes.c_void_p, [
	("tface",		ctypes.POINTER(MTFace)),
	("mode",		ctypes.c_int),
	("textstr",		ctypes.POINTER(ctypes.c_char)),
	("textlen",		ctypes.c_int),
	("col",		ctypes.POINTER(ctypes.c_uint)),
	("v1",		ctypes.POINTER(ctypes.c_float)),
	("v2",		ctypes.POINTER(ctypes.c_float)),
	("v3",		ctypes.POINTER(ctypes.c_float)),
	("v4",		ctypes.POINTER(ctypes.c_float)),
	("glattrib",		ctypes.c_int),] )

GPU_set_mipmap = _rpythonic_function_(		"GPU_set_mipmap", ctypes.c_void_p, [
	("mipmap",		ctypes.c_int),] )

GPU_set_linear_mipmap = _rpythonic_function_(		"GPU_set_linear_mipmap", ctypes.c_void_p, [
	("linear",		ctypes.c_int),] )

GPU_paint_set_mipmap = _rpythonic_function_(		"GPU_paint_set_mipmap", ctypes.c_void_p, [
	("mipmap",		ctypes.c_int),] )

GPU_set_anisotropic = _rpythonic_function_(		"GPU_set_anisotropic", ctypes.c_void_p, [
	("value",		ctypes.c_float),] )

GPU_get_anisotropic = _rpythonic_function_(		"GPU_get_anisotropic", ctypes.c_float, [] )

GPU_paint_update_image = _rpythonic_function_(		"GPU_paint_update_image", ctypes.c_void_p, [
	("ima",		ctypes.POINTER(Image)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("w",		ctypes.c_int),
	("h",		ctypes.c_int),
	("mipmap",		ctypes.c_int),] )

GPU_update_images_framechange = _rpythonic_function_(		"GPU_update_images_framechange", ctypes.c_void_p, [] )

GPU_update_image_time = _rpythonic_function_(		"GPU_update_image_time", ctypes.c_int, [
	("ima",		ctypes.POINTER(Image)),
	("time",		ctypes.c_double),] )

GPU_verify_image = _rpythonic_function_(		"GPU_verify_image", ctypes.c_int, [
	("ima",		ctypes.POINTER(Image)),
	("iuser",		ctypes.POINTER(ImageUser)),
	("tftile",		ctypes.c_int),
	("compare",		ctypes.c_int),
	("mipmap",		ctypes.c_int),] )

GPU_free_image = _rpythonic_function_(		"GPU_free_image", ctypes.c_void_p, [
	("ima",		ctypes.POINTER(Image)),] )

GPU_free_images = _rpythonic_function_(		"GPU_free_images", ctypes.c_void_p, [] )

GPU_free_images_anim = _rpythonic_function_(		"GPU_free_images_anim", ctypes.c_void_p, [] )

GPU_free_smoke = _rpythonic_function_(		"GPU_free_smoke", ctypes.c_void_p, [
	("smd",		ctypes.POINTER(SmokeModifierData)),] )

GPU_create_smoke = _rpythonic_function_(		"GPU_create_smoke", ctypes.c_void_p, [
	("smd",		ctypes.POINTER(SmokeModifierData)),
	("highres",		ctypes.c_int),] )

GPU_free_unused_buffers = _rpythonic_function_(		"GPU_free_unused_buffers", ctypes.c_void_p, [] )

GPU_extensions_disable = _rpythonic_function_(		"GPU_extensions_disable", ctypes.c_void_p, [] )

GPU_extensions_init = _rpythonic_function_(		"GPU_extensions_init", ctypes.c_void_p, [] )

GPU_extensions_exit = _rpythonic_function_(		"GPU_extensions_exit", ctypes.c_void_p, [] )

GPU_print_error = _rpythonic_function_(		"GPU_print_error", ctypes.c_int, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

GPU_glsl_support = _rpythonic_function_(		"GPU_glsl_support", ctypes.c_int, [] )

GPU_non_power_of_two_support = _rpythonic_function_(		"GPU_non_power_of_two_support", ctypes.c_int, [] )

GPU_color_depth = _rpythonic_function_(		"GPU_color_depth", ctypes.c_int, [] )

GPU_type_matches = _rpythonic_function_(		"GPU_type_matches", ctypes.c_int, [
	("device",		ctypes.c_int),
	("os",		ctypes.c_int),
	("driver",		ctypes.c_int),] )

GPU_texture_create_1D = _rpythonic_function_(		"GPU_texture_create_1D", ctypes.POINTER(GPUTexture), [
	("w",		ctypes.c_int),
	("pixels",		ctypes.POINTER(ctypes.c_float)),
	("err_out",		( ctypes.c_char * 256 )),] )

GPU_texture_create_2D = _rpythonic_function_(		"GPU_texture_create_2D", ctypes.POINTER(GPUTexture), [
	("w",		ctypes.c_int),
	("h",		ctypes.c_int),
	("pixels",		ctypes.POINTER(ctypes.c_float)),
	("err_out",		( ctypes.c_char * 256 )),] )

GPU_texture_create_3D = _rpythonic_function_(		"GPU_texture_create_3D", ctypes.POINTER(GPUTexture), [
	("w",		ctypes.c_int),
	("h",		ctypes.c_int),
	("depth",		ctypes.c_int),
	("fpixels",		ctypes.POINTER(ctypes.c_float)),] )

GPU_texture_create_depth = _rpythonic_function_(		"GPU_texture_create_depth", ctypes.POINTER(GPUTexture), [
	("w",		ctypes.c_int),
	("h",		ctypes.c_int),
	("err_out",		( ctypes.c_char * 256 )),] )

GPU_texture_from_blender = _rpythonic_function_(		"GPU_texture_from_blender", ctypes.POINTER(GPUTexture), [
	("ima",		ctypes.POINTER(Image)),
	("iuser",		ctypes.POINTER(ImageUser)),
	("time",		ctypes.c_double),
	("mipmap",		ctypes.c_int),] )

GPU_texture_free = _rpythonic_function_(		"GPU_texture_free", ctypes.c_void_p, [
	("tex",		ctypes.POINTER(GPUTexture)),] )

GPU_texture_ref = _rpythonic_function_(		"GPU_texture_ref", ctypes.c_void_p, [
	("tex",		ctypes.POINTER(GPUTexture)),] )

GPU_texture_bind = _rpythonic_function_(		"GPU_texture_bind", ctypes.c_void_p, [
	("tex",		ctypes.POINTER(GPUTexture)),
	("number",		ctypes.c_int),] )

GPU_texture_unbind = _rpythonic_function_(		"GPU_texture_unbind", ctypes.c_void_p, [
	("tex",		ctypes.POINTER(GPUTexture)),] )

GPU_texture_framebuffer = _rpythonic_function_(		"GPU_texture_framebuffer", ctypes.POINTER(GPUFrameBuffer), [
	("tex",		ctypes.POINTER(GPUTexture)),] )

GPU_texture_target = _rpythonic_function_(		"GPU_texture_target", ctypes.c_int, [
	("tex",		ctypes.POINTER(GPUTexture)),] )

GPU_texture_opengl_width = _rpythonic_function_(		"GPU_texture_opengl_width", ctypes.c_int, [
	("tex",		ctypes.POINTER(GPUTexture)),] )

GPU_texture_opengl_height = _rpythonic_function_(		"GPU_texture_opengl_height", ctypes.c_int, [
	("tex",		ctypes.POINTER(GPUTexture)),] )

GPU_framebuffer_create = _rpythonic_function_(		"GPU_framebuffer_create", ctypes.POINTER(GPUFrameBuffer), [] )

GPU_framebuffer_texture_attach = _rpythonic_function_(		"GPU_framebuffer_texture_attach", ctypes.c_int, [
	("fb",		ctypes.POINTER(GPUFrameBuffer)),
	("tex",		ctypes.POINTER(GPUTexture)),
	("err_out",		( ctypes.c_char * 256 )),] )

GPU_framebuffer_texture_detach = _rpythonic_function_(		"GPU_framebuffer_texture_detach", ctypes.c_void_p, [
	("fb",		ctypes.POINTER(GPUFrameBuffer)),
	("tex",		ctypes.POINTER(GPUTexture)),] )

GPU_framebuffer_texture_bind = _rpythonic_function_(		"GPU_framebuffer_texture_bind", ctypes.c_void_p, [
	("fb",		ctypes.POINTER(GPUFrameBuffer)),
	("tex",		ctypes.POINTER(GPUTexture)),] )

GPU_framebuffer_texture_unbind = _rpythonic_function_(		"GPU_framebuffer_texture_unbind", ctypes.c_void_p, [
	("fb",		ctypes.POINTER(GPUFrameBuffer)),
	("tex",		ctypes.POINTER(GPUTexture)),] )

GPU_framebuffer_free = _rpythonic_function_(		"GPU_framebuffer_free", ctypes.c_void_p, [
	("fb",		ctypes.POINTER(GPUFrameBuffer)),] )

GPU_framebuffer_restore = _rpythonic_function_(		"GPU_framebuffer_restore", ctypes.c_void_p, [] )

GPU_offscreen_create = _rpythonic_function_(		"GPU_offscreen_create", ctypes.POINTER(GPUOffScreen), [
	("width",		ctypes.POINTER(ctypes.c_int)),
	("height",		ctypes.POINTER(ctypes.c_int)),
	("err_out",		( ctypes.c_char * 256 )),] )

GPU_offscreen_free = _rpythonic_function_(		"GPU_offscreen_free", ctypes.c_void_p, [
	("ofs",		ctypes.POINTER(GPUOffScreen)),] )

GPU_offscreen_bind = _rpythonic_function_(		"GPU_offscreen_bind", ctypes.c_void_p, [
	("ofs",		ctypes.POINTER(GPUOffScreen)),] )

GPU_offscreen_unbind = _rpythonic_function_(		"GPU_offscreen_unbind", ctypes.c_void_p, [
	("ofs",		ctypes.POINTER(GPUOffScreen)),] )

GPU_shader_create = _rpythonic_function_(		"GPU_shader_create", ctypes.POINTER(GPUShader), [
	("vertexcode",		ctypes.POINTER(ctypes.c_char)),
	("fragcode",		ctypes.POINTER(ctypes.c_char)),
	("libcode",		ctypes.POINTER(ctypes.c_char)),] )

GPU_shader_free = _rpythonic_function_(		"GPU_shader_free", ctypes.c_void_p, [
	("shader",		ctypes.POINTER(GPUShader)),] )

GPU_shader_bind = _rpythonic_function_(		"GPU_shader_bind", ctypes.c_void_p, [
	("shader",		ctypes.POINTER(GPUShader)),] )

GPU_shader_unbind = _rpythonic_function_(		"GPU_shader_unbind", ctypes.c_void_p, [
	("shader",		ctypes.POINTER(GPUShader)),] )

GPU_shader_get_uniform = _rpythonic_function_(		"GPU_shader_get_uniform", ctypes.c_int, [
	("shader",		ctypes.POINTER(GPUShader)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

GPU_shader_uniform_vector = _rpythonic_function_(		"GPU_shader_uniform_vector", ctypes.c_void_p, [
	("shader",		ctypes.POINTER(GPUShader)),
	("location",		ctypes.c_int),
	("length",		ctypes.c_int),
	("arraysize",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

GPU_shader_uniform_texture = _rpythonic_function_(		"GPU_shader_uniform_texture", ctypes.c_void_p, [
	("shader",		ctypes.POINTER(GPUShader)),
	("location",		ctypes.c_int),
	("tex",		ctypes.POINTER(GPUTexture)),] )

GPU_shader_get_attribute = _rpythonic_function_(		"GPU_shader_get_attribute", ctypes.c_int, [
	("shader",		ctypes.POINTER(GPUShader)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

GPU_global_buffer_pool_free = _rpythonic_function_(		"GPU_global_buffer_pool_free", ctypes.c_void_p, [] )

GPU_buffer_alloc = _rpythonic_function_(		"GPU_buffer_alloc", ctypes.POINTER(GPUBuffer), [
	("size",		ctypes.c_int),] )

GPU_buffer_free = _rpythonic_function_(		"GPU_buffer_free", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(GPUBuffer)),] )

GPU_drawobject_new = _rpythonic_function_(		"GPU_drawobject_new", ctypes.POINTER(GPUDrawObject), [
	("dm",		ctypes.POINTER(DerivedMesh)),] )

GPU_drawobject_free = _rpythonic_function_(		"GPU_drawobject_free", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),] )

GPU_vertex_setup = _rpythonic_function_(		"GPU_vertex_setup", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),] )

GPU_normal_setup = _rpythonic_function_(		"GPU_normal_setup", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),] )

GPU_uv_setup = _rpythonic_function_(		"GPU_uv_setup", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),] )

GPU_color_setup = _rpythonic_function_(		"GPU_color_setup", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),] )

GPU_edge_setup = _rpythonic_function_(		"GPU_edge_setup", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),] )

GPU_uvedge_setup = _rpythonic_function_(		"GPU_uvedge_setup", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),] )

GPU_interleaved_setup = _rpythonic_function_(		"GPU_interleaved_setup", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(GPUBuffer)),
	("data",		ctypes.c_int),] )

GPU_attrib_element_size = _rpythonic_function_(		"GPU_attrib_element_size", ctypes.c_int, [
	("data",		GPUAttrib),
	("numdata",		ctypes.c_int),] )

GPU_interleaved_attrib_setup = _rpythonic_function_(		"GPU_interleaved_attrib_setup", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(GPUBuffer)),
	("data",		GPUAttrib),
	("numdata",		ctypes.c_int),] )

GPU_buffer_lock = _rpythonic_function_(		"GPU_buffer_lock", ctypes.POINTER(ctypes.c_void_p), [
	("buffer",		ctypes.POINTER(GPUBuffer)),] )

GPU_buffer_lock_stream = _rpythonic_function_(		"GPU_buffer_lock_stream", ctypes.POINTER(ctypes.c_void_p), [
	("buffer",		ctypes.POINTER(GPUBuffer)),] )

GPU_buffer_unlock = _rpythonic_function_(		"GPU_buffer_unlock", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(GPUBuffer)),] )

GPU_color3_upload = _rpythonic_function_(		"GPU_color3_upload", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("data",		ctypes.POINTER(ctypes.c_ubyte)),] )

GPU_color4_upload = _rpythonic_function_(		"GPU_color4_upload", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("data",		ctypes.POINTER(ctypes.c_ubyte)),] )

GPU_color_switch = _rpythonic_function_(		"GPU_color_switch", ctypes.c_void_p, [
	("mode",		ctypes.c_int),] )

GPU_buffer_draw_elements = _rpythonic_function_(		"GPU_buffer_draw_elements", ctypes.c_void_p, [
	("elements",		ctypes.POINTER(GPUBuffer)),
	("mode",		ctypes.c_uint),
	("start",		ctypes.c_int),
	("count",		ctypes.c_int),] )

GPU_buffer_unbind = _rpythonic_function_(		"GPU_buffer_unbind", ctypes.c_void_p, [] )

GPU_buffer_legacy = _rpythonic_function_(		"GPU_buffer_legacy", ctypes.c_int, [
	("dm",		ctypes.POINTER(DerivedMesh)),] )

GPU_build_mesh_buffers = _rpythonic_function_(		"GPU_build_mesh_buffers", ctypes.POINTER(ctypes.c_void_p), [
	("map",		ctypes.POINTER(GHash)),
	("mvert",		ctypes.POINTER(MVert)),
	("mface",		ctypes.POINTER(MFace)),
	("face_indices",		ctypes.POINTER(ctypes.c_int)),
	("totface",		ctypes.c_int),
	("vert_indices",		ctypes.POINTER(ctypes.c_int)),
	("uniq_verts",		ctypes.c_int),
	("totvert",		ctypes.c_int),] )

GPU_update_mesh_buffers = _rpythonic_function_(		"GPU_update_mesh_buffers", ctypes.c_void_p, [
	("buffers",		ctypes.POINTER(ctypes.c_void_p)),
	("mvert",		ctypes.POINTER(MVert)),
	("vert_indices",		ctypes.POINTER(ctypes.c_int)),
	("totvert",		ctypes.c_int),] )

GPU_build_grid_buffers = _rpythonic_function_(		"GPU_build_grid_buffers", ctypes.POINTER(ctypes.c_void_p), [
	("grids",		ctypes.POINTER(ctypes.POINTER(DMGridData))),
	("grid_indices",		ctypes.POINTER(ctypes.c_int)),
	("totgrid",		ctypes.c_int),
	("gridsize",		ctypes.c_int),] )

GPU_update_grid_buffers = _rpythonic_function_(		"GPU_update_grid_buffers", ctypes.c_void_p, [
	("buffers_v",		ctypes.POINTER(ctypes.c_void_p)),
	("grids",		ctypes.POINTER(ctypes.POINTER(DMGridData))),
	("grid_indices",		ctypes.POINTER(ctypes.c_int)),
	("totgrid",		ctypes.c_int),
	("gridsize",		ctypes.c_int),
	("smooth",		ctypes.c_int),] )

GPU_draw_buffers = _rpythonic_function_(		"GPU_draw_buffers", ctypes.c_void_p, [("buffers",		ctypes.c_void_p)] )

GPU_free_buffers = _rpythonic_function_(		"GPU_free_buffers", ctypes.c_void_p, [("buffers",		ctypes.c_void_p)] )

acos = _rpythonic_function_(		"acos", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

asin = _rpythonic_function_(		"asin", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

atan = _rpythonic_function_(		"atan", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

atan2 = _rpythonic_function_(		"atan2", ctypes.c_double, [
	("__y",		ctypes.c_double),
	("__x",		ctypes.c_double),] )

cos = _rpythonic_function_(		"cos", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

sin = _rpythonic_function_(		"sin", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

tan = _rpythonic_function_(		"tan", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

cosh = _rpythonic_function_(		"cosh", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

sinh = _rpythonic_function_(		"sinh", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

tanh = _rpythonic_function_(		"tanh", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

sincos = _rpythonic_function_(		"sincos", ctypes.c_void_p, [
	("__x",		ctypes.c_double),
	("__sinx",		ctypes.POINTER(ctypes.c_double)),
	("__cosx",		ctypes.POINTER(ctypes.c_double)),] )

acosh = _rpythonic_function_(		"acosh", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

asinh = _rpythonic_function_(		"asinh", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

atanh = _rpythonic_function_(		"atanh", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

exp = _rpythonic_function_(		"exp", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

frexp = _rpythonic_function_(		"frexp", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__exponent",		ctypes.POINTER(ctypes.c_int)),] )

ldexp = _rpythonic_function_(		"ldexp", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__exponent",		ctypes.c_int),] )

log = _rpythonic_function_(		"log", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

log10 = _rpythonic_function_(		"log10", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

modf = _rpythonic_function_(		"modf", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__iptr",		ctypes.POINTER(ctypes.c_double)),] )

exp10 = _rpythonic_function_(		"exp10", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

pow10 = _rpythonic_function_(		"pow10", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

expm1 = _rpythonic_function_(		"expm1", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

log1p = _rpythonic_function_(		"log1p", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

logb = _rpythonic_function_(		"logb", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

exp2 = _rpythonic_function_(		"exp2", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

log2 = _rpythonic_function_(		"log2", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

pow = _rpythonic_function_(		"pow", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

sqrt = _rpythonic_function_(		"sqrt", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

hypot = _rpythonic_function_(		"hypot", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

cbrt = _rpythonic_function_(		"cbrt", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

ceil = _rpythonic_function_(		"ceil", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

fabs = _rpythonic_function_(		"fabs", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

floor = _rpythonic_function_(		"floor", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

fmod = _rpythonic_function_(		"fmod", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

isinf = _rpythonic_function_(		"isinf", ctypes.c_int, [
	("__value",		ctypes.c_double),] )

finite = _rpythonic_function_(		"finite", ctypes.c_int, [
	("__value",		ctypes.c_double),] )

drem = _rpythonic_function_(		"drem", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

significand = _rpythonic_function_(		"significand", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

copysign = _rpythonic_function_(		"copysign", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

nan = _rpythonic_function_(		"nan", ctypes.c_double, [
	("__tagb",		ctypes.POINTER(ctypes.c_char)),] )

isnan = _rpythonic_function_(		"isnan", ctypes.c_int, [
	("__value",		ctypes.c_double),] )

j0 = _rpythonic_function_(		"j0", ctypes.c_double, [
	("none",		ctypes.c_double),] )

j1 = _rpythonic_function_(		"j1", ctypes.c_double, [
	("none",		ctypes.c_double),] )

jn = _rpythonic_function_(		"jn", ctypes.c_double, [
	("none",		ctypes.c_int),
	("none",		ctypes.c_double),] )

y0 = _rpythonic_function_(		"y0", ctypes.c_double, [
	("none",		ctypes.c_double),] )

y1 = _rpythonic_function_(		"y1", ctypes.c_double, [
	("none",		ctypes.c_double),] )

yn = _rpythonic_function_(		"yn", ctypes.c_double, [
	("none",		ctypes.c_int),
	("none",		ctypes.c_double),] )

erf = _rpythonic_function_(		"erf", ctypes.c_double, [
	("none",		ctypes.c_double),] )

erfc = _rpythonic_function_(		"erfc", ctypes.c_double, [
	("none",		ctypes.c_double),] )

lgamma = _rpythonic_function_(		"lgamma", ctypes.c_double, [
	("none",		ctypes.c_double),] )

tgamma = _rpythonic_function_(		"tgamma", ctypes.c_double, [
	("none",		ctypes.c_double),] )

gamma = _rpythonic_function_(		"gamma", ctypes.c_double, [
	("none",		ctypes.c_double),] )

lgamma_r = _rpythonic_function_(		"lgamma_r", ctypes.c_double, [
	("none",		ctypes.c_double),
	("__signgamp",		ctypes.POINTER(ctypes.c_int)),] )

rint = _rpythonic_function_(		"rint", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

nextafter = _rpythonic_function_(		"nextafter", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

nexttoward = _rpythonic_function_(		"nexttoward", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

remainder = _rpythonic_function_(		"remainder", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

scalbn = _rpythonic_function_(		"scalbn", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__n",		ctypes.c_int),] )

ilogb = _rpythonic_function_(		"ilogb", ctypes.c_int, [
	("__x",		ctypes.c_double),] )

scalbln = _rpythonic_function_(		"scalbln", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__n",		ctypes.c_int64),] )

nearbyint = _rpythonic_function_(		"nearbyint", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

round = _rpythonic_function_(		"round", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

trunc = _rpythonic_function_(		"trunc", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

remquo = _rpythonic_function_(		"remquo", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),
	("__quo",		ctypes.POINTER(ctypes.c_int)),] )

lrint = _rpythonic_function_(		"lrint", ctypes.c_int64, [
	("__x",		ctypes.c_double),] )

llrint = _rpythonic_function_(		"llrint", ctypes.c_longlong, [
	("__x",		ctypes.c_double),] )

lround = _rpythonic_function_(		"lround", ctypes.c_int64, [
	("__x",		ctypes.c_double),] )

llround = _rpythonic_function_(		"llround", ctypes.c_longlong, [
	("__x",		ctypes.c_double),] )

fdim = _rpythonic_function_(		"fdim", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

fmax = _rpythonic_function_(		"fmax", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

fmin = _rpythonic_function_(		"fmin", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

fma = _rpythonic_function_(		"fma", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),
	("__z",		ctypes.c_double),] )

scalb = _rpythonic_function_(		"scalb", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__n",		ctypes.c_double),] )

acosf = _rpythonic_function_(		"acosf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

asinf = _rpythonic_function_(		"asinf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

atanf = _rpythonic_function_(		"atanf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

atan2f = _rpythonic_function_(		"atan2f", ctypes.c_float, [
	("__y",		ctypes.c_float),
	("__x",		ctypes.c_float),] )

cosf = _rpythonic_function_(		"cosf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

sinf = _rpythonic_function_(		"sinf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

tanf = _rpythonic_function_(		"tanf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

coshf = _rpythonic_function_(		"coshf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

sinhf = _rpythonic_function_(		"sinhf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

tanhf = _rpythonic_function_(		"tanhf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

sincosf = _rpythonic_function_(		"sincosf", ctypes.c_void_p, [
	("__x",		ctypes.c_float),
	("__sinx",		ctypes.POINTER(ctypes.c_float)),
	("__cosx",		ctypes.POINTER(ctypes.c_float)),] )

acoshf = _rpythonic_function_(		"acoshf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

asinhf = _rpythonic_function_(		"asinhf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

atanhf = _rpythonic_function_(		"atanhf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

expf = _rpythonic_function_(		"expf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

frexpf = _rpythonic_function_(		"frexpf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__exponent",		ctypes.POINTER(ctypes.c_int)),] )

ldexpf = _rpythonic_function_(		"ldexpf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__exponent",		ctypes.c_int),] )

logf = _rpythonic_function_(		"logf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

log10f = _rpythonic_function_(		"log10f", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

modff = _rpythonic_function_(		"modff", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__iptr",		ctypes.POINTER(ctypes.c_float)),] )

exp10f = _rpythonic_function_(		"exp10f", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

pow10f = _rpythonic_function_(		"pow10f", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

expm1f = _rpythonic_function_(		"expm1f", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

log1pf = _rpythonic_function_(		"log1pf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

logbf = _rpythonic_function_(		"logbf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

exp2f = _rpythonic_function_(		"exp2f", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

log2f = _rpythonic_function_(		"log2f", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

powf = _rpythonic_function_(		"powf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),] )

sqrtf = _rpythonic_function_(		"sqrtf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

hypotf = _rpythonic_function_(		"hypotf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),] )

cbrtf = _rpythonic_function_(		"cbrtf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

ceilf = _rpythonic_function_(		"ceilf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

fabsf = _rpythonic_function_(		"fabsf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

floorf = _rpythonic_function_(		"floorf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

fmodf = _rpythonic_function_(		"fmodf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),] )

isinff = _rpythonic_function_(		"isinff", ctypes.c_int, [
	("__value",		ctypes.c_float),] )

finitef = _rpythonic_function_(		"finitef", ctypes.c_int, [
	("__value",		ctypes.c_float),] )

dremf = _rpythonic_function_(		"dremf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),] )

significandf = _rpythonic_function_(		"significandf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

copysignf = _rpythonic_function_(		"copysignf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),] )

nanf = _rpythonic_function_(		"nanf", ctypes.c_float, [
	("__tagb",		ctypes.POINTER(ctypes.c_char)),] )

isnanf = _rpythonic_function_(		"isnanf", ctypes.c_int, [
	("__value",		ctypes.c_float),] )

j0f = _rpythonic_function_(		"j0f", ctypes.c_float, [
	("none",		ctypes.c_float),] )

j1f = _rpythonic_function_(		"j1f", ctypes.c_float, [
	("none",		ctypes.c_float),] )

jnf = _rpythonic_function_(		"jnf", ctypes.c_float, [
	("none",		ctypes.c_int),
	("none",		ctypes.c_float),] )

y0f = _rpythonic_function_(		"y0f", ctypes.c_float, [
	("none",		ctypes.c_float),] )

y1f = _rpythonic_function_(		"y1f", ctypes.c_float, [
	("none",		ctypes.c_float),] )

ynf = _rpythonic_function_(		"ynf", ctypes.c_float, [
	("none",		ctypes.c_int),
	("none",		ctypes.c_float),] )

erff = _rpythonic_function_(		"erff", ctypes.c_float, [
	("none",		ctypes.c_float),] )

erfcf = _rpythonic_function_(		"erfcf", ctypes.c_float, [
	("none",		ctypes.c_float),] )

lgammaf = _rpythonic_function_(		"lgammaf", ctypes.c_float, [
	("none",		ctypes.c_float),] )

tgammaf = _rpythonic_function_(		"tgammaf", ctypes.c_float, [
	("none",		ctypes.c_float),] )

gammaf = _rpythonic_function_(		"gammaf", ctypes.c_float, [
	("none",		ctypes.c_float),] )

lgammaf_r = _rpythonic_function_(		"lgammaf_r", ctypes.c_float, [
	("none",		ctypes.c_float),
	("__signgamp",		ctypes.POINTER(ctypes.c_int)),] )

rintf = _rpythonic_function_(		"rintf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

nextafterf = _rpythonic_function_(		"nextafterf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),] )

nexttowardf = _rpythonic_function_(		"nexttowardf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_double),] )

remainderf = _rpythonic_function_(		"remainderf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),] )

scalbnf = _rpythonic_function_(		"scalbnf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__n",		ctypes.c_int),] )

ilogbf = _rpythonic_function_(		"ilogbf", ctypes.c_int, [
	("__x",		ctypes.c_float),] )

scalblnf = _rpythonic_function_(		"scalblnf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__n",		ctypes.c_int64),] )

nearbyintf = _rpythonic_function_(		"nearbyintf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

roundf = _rpythonic_function_(		"roundf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

truncf = _rpythonic_function_(		"truncf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

remquof = _rpythonic_function_(		"remquof", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),
	("__quo",		ctypes.POINTER(ctypes.c_int)),] )

lrintf = _rpythonic_function_(		"lrintf", ctypes.c_int64, [
	("__x",		ctypes.c_float),] )

llrintf = _rpythonic_function_(		"llrintf", ctypes.c_longlong, [
	("__x",		ctypes.c_float),] )

lroundf = _rpythonic_function_(		"lroundf", ctypes.c_int64, [
	("__x",		ctypes.c_float),] )

llroundf = _rpythonic_function_(		"llroundf", ctypes.c_longlong, [
	("__x",		ctypes.c_float),] )

fdimf = _rpythonic_function_(		"fdimf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),] )

fmaxf = _rpythonic_function_(		"fmaxf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),] )

fminf = _rpythonic_function_(		"fminf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),] )

fmaf = _rpythonic_function_(		"fmaf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),
	("__z",		ctypes.c_float),] )

scalbf = _rpythonic_function_(		"scalbf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__n",		ctypes.c_float),] )

acosl = _rpythonic_function_(		"acosl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

asinl = _rpythonic_function_(		"asinl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

atanl = _rpythonic_function_(		"atanl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

atan2l = _rpythonic_function_(		"atan2l", ctypes.c_double, [
	("__y",		ctypes.c_double),
	("__x",		ctypes.c_double),] )

cosl = _rpythonic_function_(		"cosl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

sinl = _rpythonic_function_(		"sinl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

tanl = _rpythonic_function_(		"tanl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

coshl = _rpythonic_function_(		"coshl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

sinhl = _rpythonic_function_(		"sinhl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

tanhl = _rpythonic_function_(		"tanhl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

sincosl = _rpythonic_function_(		"sincosl", ctypes.c_void_p, [
	("__x",		ctypes.c_double),
	("__sinx",		ctypes.POINTER(ctypes.c_double)),
	("__cosx",		ctypes.POINTER(ctypes.c_double)),] )

acoshl = _rpythonic_function_(		"acoshl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

asinhl = _rpythonic_function_(		"asinhl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

atanhl = _rpythonic_function_(		"atanhl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

expl = _rpythonic_function_(		"expl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

frexpl = _rpythonic_function_(		"frexpl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__exponent",		ctypes.POINTER(ctypes.c_int)),] )

ldexpl = _rpythonic_function_(		"ldexpl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__exponent",		ctypes.c_int),] )

logl = _rpythonic_function_(		"logl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

log10l = _rpythonic_function_(		"log10l", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

modfl = _rpythonic_function_(		"modfl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__iptr",		ctypes.POINTER(ctypes.c_double)),] )

exp10l = _rpythonic_function_(		"exp10l", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

pow10l = _rpythonic_function_(		"pow10l", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

expm1l = _rpythonic_function_(		"expm1l", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

log1pl = _rpythonic_function_(		"log1pl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

logbl = _rpythonic_function_(		"logbl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

exp2l = _rpythonic_function_(		"exp2l", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

log2l = _rpythonic_function_(		"log2l", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

powl = _rpythonic_function_(		"powl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

sqrtl = _rpythonic_function_(		"sqrtl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

hypotl = _rpythonic_function_(		"hypotl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

cbrtl = _rpythonic_function_(		"cbrtl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

ceill = _rpythonic_function_(		"ceill", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

fabsl = _rpythonic_function_(		"fabsl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

floorl = _rpythonic_function_(		"floorl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

fmodl = _rpythonic_function_(		"fmodl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

isinfl = _rpythonic_function_(		"isinfl", ctypes.c_int, [
	("__value",		ctypes.c_double),] )

finitel = _rpythonic_function_(		"finitel", ctypes.c_int, [
	("__value",		ctypes.c_double),] )

dreml = _rpythonic_function_(		"dreml", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

significandl = _rpythonic_function_(		"significandl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

copysignl = _rpythonic_function_(		"copysignl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

nanl = _rpythonic_function_(		"nanl", ctypes.c_double, [
	("__tagb",		ctypes.POINTER(ctypes.c_char)),] )

isnanl = _rpythonic_function_(		"isnanl", ctypes.c_int, [
	("__value",		ctypes.c_double),] )

j0l = _rpythonic_function_(		"j0l", ctypes.c_double, [
	("none",		ctypes.c_double),] )

j1l = _rpythonic_function_(		"j1l", ctypes.c_double, [
	("none",		ctypes.c_double),] )

jnl = _rpythonic_function_(		"jnl", ctypes.c_double, [
	("none",		ctypes.c_int),
	("none",		ctypes.c_double),] )

y0l = _rpythonic_function_(		"y0l", ctypes.c_double, [
	("none",		ctypes.c_double),] )

y1l = _rpythonic_function_(		"y1l", ctypes.c_double, [
	("none",		ctypes.c_double),] )

ynl = _rpythonic_function_(		"ynl", ctypes.c_double, [
	("none",		ctypes.c_int),
	("none",		ctypes.c_double),] )

erfl = _rpythonic_function_(		"erfl", ctypes.c_double, [
	("none",		ctypes.c_double),] )

erfcl = _rpythonic_function_(		"erfcl", ctypes.c_double, [
	("none",		ctypes.c_double),] )

lgammal = _rpythonic_function_(		"lgammal", ctypes.c_double, [
	("none",		ctypes.c_double),] )

tgammal = _rpythonic_function_(		"tgammal", ctypes.c_double, [
	("none",		ctypes.c_double),] )

gammal = _rpythonic_function_(		"gammal", ctypes.c_double, [
	("none",		ctypes.c_double),] )

lgammal_r = _rpythonic_function_(		"lgammal_r", ctypes.c_double, [
	("none",		ctypes.c_double),
	("__signgamp",		ctypes.POINTER(ctypes.c_int)),] )

rintl = _rpythonic_function_(		"rintl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

nextafterl = _rpythonic_function_(		"nextafterl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

nexttowardl = _rpythonic_function_(		"nexttowardl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

remainderl = _rpythonic_function_(		"remainderl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

scalbnl = _rpythonic_function_(		"scalbnl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__n",		ctypes.c_int),] )

ilogbl = _rpythonic_function_(		"ilogbl", ctypes.c_int, [
	("__x",		ctypes.c_double),] )

scalblnl = _rpythonic_function_(		"scalblnl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__n",		ctypes.c_int64),] )

nearbyintl = _rpythonic_function_(		"nearbyintl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

roundl = _rpythonic_function_(		"roundl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

truncl = _rpythonic_function_(		"truncl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

remquol = _rpythonic_function_(		"remquol", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),
	("__quo",		ctypes.POINTER(ctypes.c_int)),] )

lrintl = _rpythonic_function_(		"lrintl", ctypes.c_int64, [
	("__x",		ctypes.c_double),] )

llrintl = _rpythonic_function_(		"llrintl", ctypes.c_longlong, [
	("__x",		ctypes.c_double),] )

lroundl = _rpythonic_function_(		"lroundl", ctypes.c_int64, [
	("__x",		ctypes.c_double),] )

llroundl = _rpythonic_function_(		"llroundl", ctypes.c_longlong, [
	("__x",		ctypes.c_double),] )

fdiml = _rpythonic_function_(		"fdiml", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

fmaxl = _rpythonic_function_(		"fmaxl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

fminl = _rpythonic_function_(		"fminl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

fmal = _rpythonic_function_(		"fmal", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),
	("__z",		ctypes.c_double),] )

scalbl = _rpythonic_function_(		"scalbl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__n",		ctypes.c_double),] )

matherr = _rpythonic_function_(		"matherr", ctypes.c_int, [
	("__exc",		ctypes.POINTER(exception)),] )

double_round = _rpythonic_function_(		"double_round", ctypes.c_double, [
	("x",		ctypes.c_double),
	("ndigits",		ctypes.c_int),] )

hsv_to_rgb = _rpythonic_function_(		"hsv_to_rgb", ctypes.c_void_p, [
	("h",		ctypes.c_float),
	("s",		ctypes.c_float),
	("v",		ctypes.c_float),
	("r",		ctypes.POINTER(ctypes.c_float)),
	("g",		ctypes.POINTER(ctypes.c_float)),
	("b",		ctypes.POINTER(ctypes.c_float)),] )

hex_to_rgb = _rpythonic_function_(		"hex_to_rgb", ctypes.c_void_p, [
	("hexcol",		ctypes.POINTER(ctypes.c_char)),
	("r",		ctypes.POINTER(ctypes.c_float)),
	("g",		ctypes.POINTER(ctypes.c_float)),
	("b",		ctypes.POINTER(ctypes.c_float)),] )

yuv_to_rgb = _rpythonic_function_(		"yuv_to_rgb", ctypes.c_void_p, [
	("y",		ctypes.c_float),
	("u",		ctypes.c_float),
	("v",		ctypes.c_float),
	("lr",		ctypes.POINTER(ctypes.c_float)),
	("lg",		ctypes.POINTER(ctypes.c_float)),
	("lb",		ctypes.POINTER(ctypes.c_float)),] )

ycc_to_rgb = _rpythonic_function_(		"ycc_to_rgb", ctypes.c_void_p, [
	("y",		ctypes.c_float),
	("cb",		ctypes.c_float),
	("cr",		ctypes.c_float),
	("lr",		ctypes.POINTER(ctypes.c_float)),
	("lg",		ctypes.POINTER(ctypes.c_float)),
	("lb",		ctypes.POINTER(ctypes.c_float)),
	("colorspace",		ctypes.c_int),] )

xyz_to_rgb = _rpythonic_function_(		"xyz_to_rgb", ctypes.c_void_p, [
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),
	("r",		ctypes.POINTER(ctypes.c_float)),
	("g",		ctypes.POINTER(ctypes.c_float)),
	("b",		ctypes.POINTER(ctypes.c_float)),
	("colorspace",		ctypes.c_int),] )

cpack_to_rgb = _rpythonic_function_(		"cpack_to_rgb", ctypes.c_void_p, [
	("col",		ctypes.c_uint),
	("r",		ctypes.POINTER(ctypes.c_float)),
	("g",		ctypes.POINTER(ctypes.c_float)),
	("b",		ctypes.POINTER(ctypes.c_float)),] )

rgb_to_yuv = _rpythonic_function_(		"rgb_to_yuv", ctypes.c_void_p, [
	("r",		ctypes.c_float),
	("g",		ctypes.c_float),
	("b",		ctypes.c_float),
	("ly",		ctypes.POINTER(ctypes.c_float)),
	("lu",		ctypes.POINTER(ctypes.c_float)),
	("lv",		ctypes.POINTER(ctypes.c_float)),] )

rgb_to_ycc = _rpythonic_function_(		"rgb_to_ycc", ctypes.c_void_p, [
	("r",		ctypes.c_float),
	("g",		ctypes.c_float),
	("b",		ctypes.c_float),
	("ly",		ctypes.POINTER(ctypes.c_float)),
	("lcb",		ctypes.POINTER(ctypes.c_float)),
	("lcr",		ctypes.POINTER(ctypes.c_float)),
	("colorspace",		ctypes.c_int),] )

rgb_to_hsv = _rpythonic_function_(		"rgb_to_hsv", ctypes.c_void_p, [
	("r",		ctypes.c_float),
	("g",		ctypes.c_float),
	("b",		ctypes.c_float),
	("lh",		ctypes.POINTER(ctypes.c_float)),
	("ls",		ctypes.POINTER(ctypes.c_float)),
	("lv",		ctypes.POINTER(ctypes.c_float)),] )

rgb_to_hsv_compat = _rpythonic_function_(		"rgb_to_hsv_compat", ctypes.c_void_p, [
	("r",		ctypes.c_float),
	("g",		ctypes.c_float),
	("b",		ctypes.c_float),
	("lh",		ctypes.POINTER(ctypes.c_float)),
	("ls",		ctypes.POINTER(ctypes.c_float)),
	("lv",		ctypes.POINTER(ctypes.c_float)),] )

rgb_to_cpack = _rpythonic_function_(		"rgb_to_cpack", ctypes.c_uint, [
	("r",		ctypes.c_float),
	("g",		ctypes.c_float),
	("b",		ctypes.c_float),] )

hsv_to_cpack = _rpythonic_function_(		"hsv_to_cpack", ctypes.c_uint, [
	("h",		ctypes.c_float),
	("s",		ctypes.c_float),
	("v",		ctypes.c_float),] )

rgb_to_grayscale = _rpythonic_function_(		"rgb_to_grayscale", ctypes.c_float, [
	("rgb",		( ctypes.c_float * 3 )),] )

rgb_to_grayscale_byte = _rpythonic_function_(		"rgb_to_grayscale_byte", ctypes.c_ubyte, [
	("rgb",		( ctypes.c_ubyte * 3 )),] )

gamma_correct = _rpythonic_function_(		"gamma_correct", ctypes.c_void_p, [
	("c",		ctypes.POINTER(ctypes.c_float)),
	("gamma",		ctypes.c_float),] )

rec709_to_linearrgb = _rpythonic_function_(		"rec709_to_linearrgb", ctypes.c_float, [
	("c",		ctypes.c_float),] )

linearrgb_to_rec709 = _rpythonic_function_(		"linearrgb_to_rec709", ctypes.c_float, [
	("c",		ctypes.c_float),] )

srgb_to_linearrgb = _rpythonic_function_(		"srgb_to_linearrgb", ctypes.c_float, [
	("c",		ctypes.c_float),] )

linearrgb_to_srgb = _rpythonic_function_(		"linearrgb_to_srgb", ctypes.c_float, [
	("c",		ctypes.c_float),] )

srgb_to_linearrgb_v3_v3 = _rpythonic_function_(		"srgb_to_linearrgb_v3_v3", ctypes.c_void_p, [
	("col_to",		ctypes.POINTER(ctypes.c_float)),
	("col_from",		ctypes.POINTER(ctypes.c_float)),] )

linearrgb_to_srgb_v3_v3 = _rpythonic_function_(		"linearrgb_to_srgb_v3_v3", ctypes.c_void_p, [
	("col_to",		ctypes.POINTER(ctypes.c_float)),
	("col_from",		ctypes.POINTER(ctypes.c_float)),] )

srgb_to_linearrgb_rgba_buf = _rpythonic_function_(		"srgb_to_linearrgb_rgba_buf", ctypes.c_void_p, [
	("col",		ctypes.POINTER(ctypes.c_float)),
	("tot",		ctypes.c_int),] )

linearrgb_to_srgb_rgba_buf = _rpythonic_function_(		"linearrgb_to_srgb_rgba_buf", ctypes.c_void_p, [
	("col",		ctypes.POINTER(ctypes.c_float)),
	("tot",		ctypes.c_int),] )

srgb_to_linearrgb_rgba_rgba_buf = _rpythonic_function_(		"srgb_to_linearrgb_rgba_rgba_buf", ctypes.c_void_p, [
	("col_to",		ctypes.POINTER(ctypes.c_float)),
	("col_from",		ctypes.POINTER(ctypes.c_float)),
	("tot",		ctypes.c_int),] )

linearrgb_to_srgb_rgba_rgba_buf = _rpythonic_function_(		"linearrgb_to_srgb_rgba_rgba_buf", ctypes.c_void_p, [
	("col_to",		ctypes.POINTER(ctypes.c_float)),
	("col_from",		ctypes.POINTER(ctypes.c_float)),
	("tot",		ctypes.c_int),] )

constrain_rgb = _rpythonic_function_(		"constrain_rgb", ctypes.c_int, [
	("r",		ctypes.POINTER(ctypes.c_float)),
	("g",		ctypes.POINTER(ctypes.c_float)),
	("b",		ctypes.POINTER(ctypes.c_float)),] )

minmax_rgb = _rpythonic_function_(		"minmax_rgb", ctypes.c_void_p, [
	("c",		( ctypes.c_short * 3 )),] )

rgb_float_set_hue_float_offset = _rpythonic_function_(		"rgb_float_set_hue_float_offset", ctypes.c_void_p, [
	("rgb",		ctypes.POINTER(ctypes.c_float)),
	("hue_offset",		ctypes.c_float),] )

rgb_byte_set_hue_float_offset = _rpythonic_function_(		"rgb_byte_set_hue_float_offset", ctypes.c_void_p, [
	("rgb",		ctypes.POINTER(ctypes.c_ubyte)),
	("hue_offset",		ctypes.c_float),] )

lift_gamma_gain_to_asc_cdl = _rpythonic_function_(		"lift_gamma_gain_to_asc_cdl", ctypes.c_void_p, [
	("lift",		ctypes.POINTER(ctypes.c_float)),
	("gamma",		ctypes.POINTER(ctypes.c_float)),
	("gain",		ctypes.POINTER(ctypes.c_float)),
	("offset",		ctypes.POINTER(ctypes.c_float)),
	("slope",		ctypes.POINTER(ctypes.c_float)),
	("power",		ctypes.POINTER(ctypes.c_float)),] )

rgb_byte_to_float = _rpythonic_function_(		"rgb_byte_to_float", ctypes.c_void_p, [
	("C_in",		ctypes.POINTER(ctypes.c_ubyte)),
	("out",		ctypes.POINTER(ctypes.c_float)),] )

rgb_float_to_byte = _rpythonic_function_(		"rgb_float_to_byte", ctypes.c_void_p, [
	("C_in",		ctypes.POINTER(ctypes.c_float)),
	("out",		ctypes.POINTER(ctypes.c_ubyte)),] )

zero_m3 = _rpythonic_function_(		"zero_m3", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 3 )),] )

zero_m4 = _rpythonic_function_(		"zero_m4", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),] )

unit_m3 = _rpythonic_function_(		"unit_m3", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 3 )),] )

unit_m4 = _rpythonic_function_(		"unit_m4", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),] )

copy_m3_m3 = _rpythonic_function_(		"copy_m3_m3", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 3 )),
	("A",		( ctypes.c_float * 3 )),] )

copy_m4_m4 = _rpythonic_function_(		"copy_m4_m4", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),
	("A",		( ctypes.c_float * 4 )),] )

copy_m3_m4 = _rpythonic_function_(		"copy_m3_m4", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 3 )),
	("A",		( ctypes.c_float * 4 )),] )

copy_m4_m3 = _rpythonic_function_(		"copy_m4_m3", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),
	("A",		( ctypes.c_float * 3 )),] )

swap_m3m3 = _rpythonic_function_(		"swap_m3m3", ctypes.c_void_p, [
	("A",		( ctypes.c_float * 3 )),
	("B",		( ctypes.c_float * 3 )),] )

swap_m4m4 = _rpythonic_function_(		"swap_m4m4", ctypes.c_void_p, [
	("A",		( ctypes.c_float * 4 )),
	("B",		( ctypes.c_float * 4 )),] )

add_m3_m3m3 = _rpythonic_function_(		"add_m3_m3m3", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 3 )),
	("A",		( ctypes.c_float * 3 )),
	("B",		( ctypes.c_float * 3 )),] )

add_m4_m4m4 = _rpythonic_function_(		"add_m4_m4m4", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),
	("A",		( ctypes.c_float * 4 )),
	("B",		( ctypes.c_float * 4 )),] )

mul_m3_m3m3 = _rpythonic_function_(		"mul_m3_m3m3", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 3 )),
	("A",		( ctypes.c_float * 3 )),
	("B",		( ctypes.c_float * 3 )),] )

mul_m4_m4m4 = _rpythonic_function_(		"mul_m4_m4m4", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),
	("A",		( ctypes.c_float * 4 )),
	("B",		( ctypes.c_float * 4 )),] )

mul_m4_m3m4 = _rpythonic_function_(		"mul_m4_m3m4", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),
	("A",		( ctypes.c_float * 3 )),
	("B",		( ctypes.c_float * 4 )),] )

mul_m4_m4m3 = _rpythonic_function_(		"mul_m4_m4m3", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),
	("A",		( ctypes.c_float * 4 )),
	("B",		( ctypes.c_float * 3 )),] )

mul_m3_m3m4 = _rpythonic_function_(		"mul_m3_m3m4", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 3 )),
	("A",		( ctypes.c_float * 3 )),
	("B",		( ctypes.c_float * 4 )),] )

mul_serie_m3 = _rpythonic_function_(		"mul_serie_m3", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 3 )),
	("M1",		( ctypes.c_float * 3 )),
	("M2",		( ctypes.c_float * 3 )),
	("M3",		( ctypes.c_float * 3 )),
	("M4",		( ctypes.c_float * 3 )),
	("M5",		( ctypes.c_float * 3 )),
	("M6",		( ctypes.c_float * 3 )),
	("M7",		( ctypes.c_float * 3 )),
	("M8",		( ctypes.c_float * 3 )),] )

mul_serie_m4 = _rpythonic_function_(		"mul_serie_m4", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),
	("M1",		( ctypes.c_float * 4 )),
	("M2",		( ctypes.c_float * 4 )),
	("M3",		( ctypes.c_float * 4 )),
	("M4",		( ctypes.c_float * 4 )),
	("M5",		( ctypes.c_float * 4 )),
	("M6",		( ctypes.c_float * 4 )),
	("M7",		( ctypes.c_float * 4 )),
	("M8",		( ctypes.c_float * 4 )),] )

mul_m4_v3 = _rpythonic_function_(		"mul_m4_v3", ctypes.c_void_p, [
	("M",		( ctypes.c_float * 4 )),
	("r",		( ctypes.c_float * 3 )),] )

mul_v3_m4v3 = _rpythonic_function_(		"mul_v3_m4v3", ctypes.c_void_p, [
	("r",		( ctypes.c_float * 3 )),
	("M",		( ctypes.c_float * 4 )),
	("v",		( ctypes.c_float * 3 )),] )

mul_mat3_m4_v3 = _rpythonic_function_(		"mul_mat3_m4_v3", ctypes.c_void_p, [
	("M",		( ctypes.c_float * 4 )),
	("r",		( ctypes.c_float * 3 )),] )

mul_m4_v4 = _rpythonic_function_(		"mul_m4_v4", ctypes.c_void_p, [
	("M",		( ctypes.c_float * 4 )),
	("r",		( ctypes.c_float * 4 )),] )

mul_v4_m4v4 = _rpythonic_function_(		"mul_v4_m4v4", ctypes.c_void_p, [
	("r",		( ctypes.c_float * 4 )),
	("M",		( ctypes.c_float * 4 )),
	("v",		( ctypes.c_float * 4 )),] )

mul_project_m4_v3 = _rpythonic_function_(		"mul_project_m4_v3", ctypes.c_void_p, [
	("M",		( ctypes.c_float * 4 )),
	("vec",		( ctypes.c_float * 3 )),] )

mul_m3_v3 = _rpythonic_function_(		"mul_m3_v3", ctypes.c_void_p, [
	("M",		( ctypes.c_float * 3 )),
	("r",		( ctypes.c_float * 3 )),] )

mul_v3_m3v3 = _rpythonic_function_(		"mul_v3_m3v3", ctypes.c_void_p, [
	("r",		( ctypes.c_float * 3 )),
	("M",		( ctypes.c_float * 3 )),
	("a",		( ctypes.c_float * 3 )),] )

mul_transposed_m3_v3 = _rpythonic_function_(		"mul_transposed_m3_v3", ctypes.c_void_p, [
	("M",		( ctypes.c_float * 3 )),
	("r",		( ctypes.c_float * 3 )),] )

mul_m3_v3_double = _rpythonic_function_(		"mul_m3_v3_double", ctypes.c_void_p, [
	("M",		( ctypes.c_float * 3 )),
	("r",		( ctypes.c_double * 3 )),] )

mul_m3_fl = _rpythonic_function_(		"mul_m3_fl", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 3 )),
	("f",		ctypes.c_float),] )

mul_m4_fl = _rpythonic_function_(		"mul_m4_fl", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),
	("f",		ctypes.c_float),] )

mul_mat3_m4_fl = _rpythonic_function_(		"mul_mat3_m4_fl", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),
	("f",		ctypes.c_float),] )

invert_m3 = _rpythonic_function_(		"invert_m3", ctypes.c_int, [
	("R",		( ctypes.c_float * 3 )),] )

invert_m3_m3 = _rpythonic_function_(		"invert_m3_m3", ctypes.c_int, [
	("R",		( ctypes.c_float * 3 )),
	("A",		( ctypes.c_float * 3 )),] )

invert_m4 = _rpythonic_function_(		"invert_m4", ctypes.c_int, [
	("R",		( ctypes.c_float * 4 )),] )

invert_m4_m4 = _rpythonic_function_(		"invert_m4_m4", ctypes.c_int, [
	("R",		( ctypes.c_float * 4 )),
	("A",		( ctypes.c_float * 4 )),] )

transpose_m3 = _rpythonic_function_(		"transpose_m3", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 3 )),] )

transpose_m4 = _rpythonic_function_(		"transpose_m4", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),] )

normalize_m3 = _rpythonic_function_(		"normalize_m3", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 3 )),] )

normalize_m3_m3 = _rpythonic_function_(		"normalize_m3_m3", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 3 )),
	("A",		( ctypes.c_float * 3 )),] )

normalize_m4 = _rpythonic_function_(		"normalize_m4", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),] )

normalize_m4_m4 = _rpythonic_function_(		"normalize_m4_m4", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),
	("A",		( ctypes.c_float * 4 )),] )

orthogonalize_m3 = _rpythonic_function_(		"orthogonalize_m3", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 3 )),
	("axis",		ctypes.c_int),] )

orthogonalize_m4 = _rpythonic_function_(		"orthogonalize_m4", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),
	("axis",		ctypes.c_int),] )

is_orthogonal_m3 = _rpythonic_function_(		"is_orthogonal_m3", ctypes.c_int, [
	("mat",		( ctypes.c_float * 3 )),] )

is_orthogonal_m4 = _rpythonic_function_(		"is_orthogonal_m4", ctypes.c_int, [
	("mat",		( ctypes.c_float * 4 )),] )

adjoint_m3_m3 = _rpythonic_function_(		"adjoint_m3_m3", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 3 )),
	("A",		( ctypes.c_float * 3 )),] )

adjoint_m4_m4 = _rpythonic_function_(		"adjoint_m4_m4", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),
	("A",		( ctypes.c_float * 4 )),] )

determinant_m2 = _rpythonic_function_(		"determinant_m2", ctypes.c_float, [
	("a",		ctypes.c_float),
	("b",		ctypes.c_float),
	("c",		ctypes.c_float),
	("d",		ctypes.c_float),] )

determinant_m3 = _rpythonic_function_(		"determinant_m3", ctypes.c_float, [
	("a",		ctypes.c_float),
	("b",		ctypes.c_float),
	("c",		ctypes.c_float),
	("d",		ctypes.c_float),
	("e",		ctypes.c_float),
	("f",		ctypes.c_float),
	("g",		ctypes.c_float),
	("h",		ctypes.c_float),
	("i",		ctypes.c_float),] )

determinant_m4 = _rpythonic_function_(		"determinant_m4", ctypes.c_float, [
	("A",		( ctypes.c_float * 4 )),] )

svd_m4 = _rpythonic_function_(		"svd_m4", ctypes.c_void_p, [
	("U",		( ctypes.c_float * 4 )),
	("s",		( ctypes.c_float * 4 )),
	("V",		( ctypes.c_float * 4 )),
	("A",		( ctypes.c_float * 4 )),] )

pseudoinverse_m4_m4 = _rpythonic_function_(		"pseudoinverse_m4_m4", ctypes.c_void_p, [
	("Ainv",		( ctypes.c_float * 4 )),
	("A",		( ctypes.c_float * 4 )),
	("epsilon",		ctypes.c_float),] )

scale_m3_fl = _rpythonic_function_(		"scale_m3_fl", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 3 )),
	("scale",		ctypes.c_float),] )

scale_m4_fl = _rpythonic_function_(		"scale_m4_fl", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),
	("scale",		ctypes.c_float),] )

mat3_to_scale = _rpythonic_function_(		"mat3_to_scale", ctypes.c_float, [
	("M",		( ctypes.c_float * 3 )),] )

mat4_to_scale = _rpythonic_function_(		"mat4_to_scale", ctypes.c_float, [
	("M",		( ctypes.c_float * 4 )),] )

size_to_mat3 = _rpythonic_function_(		"size_to_mat3", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 3 )),
	("size",		( ctypes.c_float * 3 )),] )

size_to_mat4 = _rpythonic_function_(		"size_to_mat4", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),
	("size",		( ctypes.c_float * 3 )),] )

mat3_to_size = _rpythonic_function_(		"mat3_to_size", ctypes.c_void_p, [
	("r",		( ctypes.c_float * 3 )),
	("M",		( ctypes.c_float * 3 )),] )

mat4_to_size = _rpythonic_function_(		"mat4_to_size", ctypes.c_void_p, [
	("r",		( ctypes.c_float * 3 )),
	("M",		( ctypes.c_float * 4 )),] )

translate_m4 = _rpythonic_function_(		"translate_m4", ctypes.c_void_p, [
	("mat",		( ctypes.c_float * 4 )),
	("tx",		ctypes.c_float),
	("ty",		ctypes.c_float),
	("tz",		ctypes.c_float),] )

rotate_m4 = _rpythonic_function_(		"rotate_m4", ctypes.c_void_p, [
	("mat",		( ctypes.c_float * 4 )),
	("axis",		ctypes.c_char),
	("angle",		ctypes.c_float),] )

mat3_to_rot_size = _rpythonic_function_(		"mat3_to_rot_size", ctypes.c_void_p, [
	("rot",		( ctypes.c_float * 3 )),
	("size",		( ctypes.c_float * 3 )),
	("mat3",		ctypes.c_float),] )

mat4_to_loc_rot_size = _rpythonic_function_(		"mat4_to_loc_rot_size", ctypes.c_void_p, [
	("loc",		( ctypes.c_float * 3 )),
	("rot",		( ctypes.c_float * 3 )),
	("size",		( ctypes.c_float * 3 )),
	("wmat",		ctypes.c_float),] )

loc_eul_size_to_mat4 = _rpythonic_function_(		"loc_eul_size_to_mat4", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),
	("loc",		( ctypes.c_float * 3 )),
	("eul",		( ctypes.c_float * 3 )),
	("size",		( ctypes.c_float * 3 )),] )

loc_eulO_size_to_mat4 = _rpythonic_function_(		"loc_eulO_size_to_mat4", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),
	("loc",		( ctypes.c_float * 3 )),
	("eul",		( ctypes.c_float * 3 )),
	("size",		( ctypes.c_float * 3 )),
	("order",		ctypes.c_short),] )

loc_quat_size_to_mat4 = _rpythonic_function_(		"loc_quat_size_to_mat4", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),
	("loc",		( ctypes.c_float * 3 )),
	("quat",		( ctypes.c_float * 4 )),
	("size",		( ctypes.c_float * 3 )),] )

loc_axisangle_size_to_mat4 = _rpythonic_function_(		"loc_axisangle_size_to_mat4", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),
	("loc",		( ctypes.c_float * 3 )),
	("axis",		( ctypes.c_float * 4 )),
	("angle",		ctypes.c_float),
	("size",		( ctypes.c_float * 3 )),] )

blend_m3_m3m3 = _rpythonic_function_(		"blend_m3_m3m3", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 3 )),
	("A",		( ctypes.c_float * 3 )),
	("B",		( ctypes.c_float * 3 )),
	("t",		ctypes.c_float),] )

blend_m4_m4m4 = _rpythonic_function_(		"blend_m4_m4m4", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),
	("A",		( ctypes.c_float * 4 )),
	("B",		( ctypes.c_float * 4 )),
	("t",		ctypes.c_float),] )

is_negative_m3 = _rpythonic_function_(		"is_negative_m3", ctypes.c_int, [
	("mat",		( ctypes.c_float * 3 )),] )

is_negative_m4 = _rpythonic_function_(		"is_negative_m4", ctypes.c_int, [
	("mat",		( ctypes.c_float * 4 )),] )

print_m3 = _rpythonic_function_(		"print_m3", ctypes.c_void_p, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("M",		( ctypes.c_float * 3 )),] )

print_m4 = _rpythonic_function_(		"print_m4", ctypes.c_void_p, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("M",		( ctypes.c_float * 3 )),] )

unit_axis_angle = _rpythonic_function_(		"unit_axis_angle", ctypes.c_void_p, [
	("axis",		( ctypes.c_float * 3 )),
	("angle",		ctypes.POINTER(ctypes.c_float)),] )

unit_qt = _rpythonic_function_(		"unit_qt", ctypes.c_void_p, [
	("q",		( ctypes.c_float * 4 )),] )

copy_qt_qt = _rpythonic_function_(		"copy_qt_qt", ctypes.c_void_p, [
	("q",		( ctypes.c_float * 4 )),
	("a",		( ctypes.c_float * 4 )),] )

mul_qt_qtqt = _rpythonic_function_(		"mul_qt_qtqt", ctypes.c_void_p, [
	("q",		( ctypes.c_float * 4 )),
	("a",		( ctypes.c_float * 4 )),
	("b",		( ctypes.c_float * 4 )),] )

mul_qt_v3 = _rpythonic_function_(		"mul_qt_v3", ctypes.c_void_p, [
	("q",		( ctypes.c_float * 4 )),
	("r",		( ctypes.c_float * 3 )),] )

mul_qt_fl = _rpythonic_function_(		"mul_qt_fl", ctypes.c_void_p, [
	("q",		( ctypes.c_float * 4 )),
	("f",		ctypes.c_float),] )

mul_fac_qt_fl = _rpythonic_function_(		"mul_fac_qt_fl", ctypes.c_void_p, [
	("q",		( ctypes.c_float * 4 )),
	("f",		ctypes.c_float),] )

sub_qt_qtqt = _rpythonic_function_(		"sub_qt_qtqt", ctypes.c_void_p, [
	("q",		( ctypes.c_float * 4 )),
	("a",		( ctypes.c_float * 4 )),
	("b",		( ctypes.c_float * 4 )),] )

invert_qt = _rpythonic_function_(		"invert_qt", ctypes.c_void_p, [
	("q",		( ctypes.c_float * 4 )),] )

invert_qt_qt = _rpythonic_function_(		"invert_qt_qt", ctypes.c_void_p, [
	("q1",		( ctypes.c_float * 4 )),
	("q2",		( ctypes.c_float * 4 )),] )

conjugate_qt = _rpythonic_function_(		"conjugate_qt", ctypes.c_void_p, [
	("q",		( ctypes.c_float * 4 )),] )

dot_qtqt = _rpythonic_function_(		"dot_qtqt", ctypes.c_float, [
	("a",		( ctypes.c_float * 4 )),
	("b",		( ctypes.c_float * 4 )),] )

normalize_qt = _rpythonic_function_(		"normalize_qt", ctypes.c_float, [
	("q",		( ctypes.c_float * 4 )),] )

normalize_qt_qt = _rpythonic_function_(		"normalize_qt_qt", ctypes.c_float, [
	("q1",		( ctypes.c_float * 4 )),
	("q2",		( ctypes.c_float * 4 )),] )

is_zero_qt = _rpythonic_function_(		"is_zero_qt", ctypes.c_int, [
	("q",		( ctypes.c_float * 4 )),] )

interp_qt_qtqt = _rpythonic_function_(		"interp_qt_qtqt", ctypes.c_void_p, [
	("q",		( ctypes.c_float * 4 )),
	("a",		( ctypes.c_float * 4 )),
	("b",		( ctypes.c_float * 4 )),
	("t",		ctypes.c_float),] )

add_qt_qtqt = _rpythonic_function_(		"add_qt_qtqt", ctypes.c_void_p, [
	("q",		( ctypes.c_float * 4 )),
	("a",		( ctypes.c_float * 4 )),
	("b",		( ctypes.c_float * 4 )),
	("t",		ctypes.c_float),] )

quat_to_mat3 = _rpythonic_function_(		"quat_to_mat3", ctypes.c_void_p, [
	("mat",		( ctypes.c_float * 3 )),
	("q",		( ctypes.c_float * 4 )),] )

quat_to_mat4 = _rpythonic_function_(		"quat_to_mat4", ctypes.c_void_p, [
	("mat",		( ctypes.c_float * 4 )),
	("q",		( ctypes.c_float * 4 )),] )

mat3_to_quat = _rpythonic_function_(		"mat3_to_quat", ctypes.c_void_p, [
	("q",		( ctypes.c_float * 4 )),
	("mat",		( ctypes.c_float * 3 )),] )

mat4_to_quat = _rpythonic_function_(		"mat4_to_quat", ctypes.c_void_p, [
	("q",		( ctypes.c_float * 4 )),
	("mat",		( ctypes.c_float * 4 )),] )

tri_to_quat = _rpythonic_function_(		"tri_to_quat", ctypes.c_void_p, [
	("q",		( ctypes.c_float * 4 )),
	("a",		( ctypes.c_float * 3 )),
	("b",		( ctypes.c_float * 3 )),
	("c",		( ctypes.c_float * 3 )),] )

vec_to_quat = _rpythonic_function_(		"vec_to_quat", ctypes.c_void_p, [
	("q",		( ctypes.c_float * 4 )),
	("vec",		( ctypes.c_float * 3 )),
	("axis",		ctypes.c_short),
	("upflag",		ctypes.c_short),] )

rotation_between_vecs_to_quat = _rpythonic_function_(		"rotation_between_vecs_to_quat", ctypes.c_void_p, [
	("q",		( ctypes.c_float * 4 )),
	("v1",		( ctypes.c_float * 3 )),
	("v2",		( ctypes.c_float * 3 )),] )

rotation_between_quats_to_quat = _rpythonic_function_(		"rotation_between_quats_to_quat", ctypes.c_void_p, [
	("q",		( ctypes.c_float * 4 )),
	("q1",		( ctypes.c_float * 4 )),
	("q2",		( ctypes.c_float * 4 )),] )

mat3_to_quat_is_ok = _rpythonic_function_(		"mat3_to_quat_is_ok", ctypes.c_void_p, [
	("q",		( ctypes.c_float * 4 )),
	("mat",		( ctypes.c_float * 3 )),] )

print_qt = _rpythonic_function_(		"print_qt", ctypes.c_void_p, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("q",		( ctypes.c_float * 4 )),] )

axis_angle_to_quat = _rpythonic_function_(		"axis_angle_to_quat", ctypes.c_void_p, [
	("r",		( ctypes.c_float * 4 )),
	("axis",		( ctypes.c_float * 3 )),
	("angle",		ctypes.c_float),] )

axis_angle_to_mat3 = _rpythonic_function_(		"axis_angle_to_mat3", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 3 )),
	("axis",		( ctypes.c_float * 3 )),
	("angle",		ctypes.c_float),] )

axis_angle_to_mat4 = _rpythonic_function_(		"axis_angle_to_mat4", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),
	("axis",		( ctypes.c_float * 3 )),
	("angle",		ctypes.c_float),] )

quat_to_axis_angle = _rpythonic_function_(		"quat_to_axis_angle", ctypes.c_void_p, [
	("axis",		( ctypes.c_float * 3 )),
	("angle",		ctypes.POINTER(ctypes.c_float)),
	("q",		( ctypes.c_float * 4 )),] )

mat3_to_axis_angle = _rpythonic_function_(		"mat3_to_axis_angle", ctypes.c_void_p, [
	("axis",		( ctypes.c_float * 3 )),
	("angle",		ctypes.POINTER(ctypes.c_float)),
	("M",		( ctypes.c_float * 3 )),] )

mat4_to_axis_angle = _rpythonic_function_(		"mat4_to_axis_angle", ctypes.c_void_p, [
	("axis",		( ctypes.c_float * 3 )),
	("angle",		ctypes.POINTER(ctypes.c_float)),
	("M",		( ctypes.c_float * 4 )),] )

vec_rot_to_quat = _rpythonic_function_(		"vec_rot_to_quat", ctypes.c_void_p, [
	("quat",		( ctypes.c_float * 4 )),
	("vec",		( ctypes.c_float * 3 )),
	("phi",		ctypes.c_float),] )

vec_rot_to_mat3 = _rpythonic_function_(		"vec_rot_to_mat3", ctypes.c_void_p, [
	("mat",		( ctypes.c_float * 3 )),
	("vec",		( ctypes.c_float * 3 )),
	("phi",		ctypes.c_float),] )

vec_rot_to_mat4 = _rpythonic_function_(		"vec_rot_to_mat4", ctypes.c_void_p, [
	("mat",		( ctypes.c_float * 4 )),
	("vec",		( ctypes.c_float * 3 )),
	("phi",		ctypes.c_float),] )

eul_to_quat = _rpythonic_function_(		"eul_to_quat", ctypes.c_void_p, [
	("quat",		( ctypes.c_float * 4 )),
	("eul",		( ctypes.c_float * 3 )),] )

eul_to_mat3 = _rpythonic_function_(		"eul_to_mat3", ctypes.c_void_p, [
	("mat",		( ctypes.c_float * 3 )),
	("eul",		( ctypes.c_float * 3 )),] )

eul_to_mat4 = _rpythonic_function_(		"eul_to_mat4", ctypes.c_void_p, [
	("mat",		( ctypes.c_float * 4 )),
	("eul",		( ctypes.c_float * 3 )),] )

quat_to_eul = _rpythonic_function_(		"quat_to_eul", ctypes.c_void_p, [
	("eul",		( ctypes.c_float * 3 )),
	("quat",		( ctypes.c_float * 4 )),] )

mat3_to_eul = _rpythonic_function_(		"mat3_to_eul", ctypes.c_void_p, [
	("eul",		( ctypes.c_float * 3 )),
	("mat",		( ctypes.c_float * 3 )),] )

mat4_to_eul = _rpythonic_function_(		"mat4_to_eul", ctypes.c_void_p, [
	("eul",		( ctypes.c_float * 3 )),
	("mat",		( ctypes.c_float * 4 )),] )

compatible_eul = _rpythonic_function_(		"compatible_eul", ctypes.c_void_p, [
	("eul",		( ctypes.c_float * 3 )),
	("old",		( ctypes.c_float * 3 )),] )

mat3_to_compatible_eul = _rpythonic_function_(		"mat3_to_compatible_eul", ctypes.c_void_p, [
	("eul",		( ctypes.c_float * 3 )),
	("old",		( ctypes.c_float * 3 )),
	("mat",		( ctypes.c_float * 3 )),] )

rotate_eul = _rpythonic_function_(		"rotate_eul", ctypes.c_void_p, [
	("eul",		( ctypes.c_float * 3 )),
	("axis",		ctypes.c_char),
	("angle",		ctypes.c_float),] )

eulO_to_quat = _rpythonic_function_(		"eulO_to_quat", ctypes.c_void_p, [
	("quat",		( ctypes.c_float * 4 )),
	("eul",		( ctypes.c_float * 3 )),
	("order",		ctypes.c_short),] )

eulO_to_mat3 = _rpythonic_function_(		"eulO_to_mat3", ctypes.c_void_p, [
	("mat",		( ctypes.c_float * 3 )),
	("eul",		( ctypes.c_float * 3 )),
	("order",		ctypes.c_short),] )

eulO_to_mat4 = _rpythonic_function_(		"eulO_to_mat4", ctypes.c_void_p, [
	("mat",		( ctypes.c_float * 4 )),
	("eul",		( ctypes.c_float * 3 )),
	("order",		ctypes.c_short),] )

eulO_to_axis_angle = _rpythonic_function_(		"eulO_to_axis_angle", ctypes.c_void_p, [
	("axis",		( ctypes.c_float * 3 )),
	("angle",		ctypes.POINTER(ctypes.c_float)),
	("eul",		( ctypes.c_float * 3 )),
	("order",		ctypes.c_short),] )

eulO_to_gimbal_axis = _rpythonic_function_(		"eulO_to_gimbal_axis", ctypes.c_void_p, [
	("gmat",		( ctypes.c_float * 3 )),
	("eul",		( ctypes.c_float * 3 )),
	("order",		ctypes.c_short),] )

quat_to_eulO = _rpythonic_function_(		"quat_to_eulO", ctypes.c_void_p, [
	("eul",		( ctypes.c_float * 3 )),
	("order",		ctypes.c_short),
	("quat",		( ctypes.c_float * 4 )),] )

mat3_to_eulO = _rpythonic_function_(		"mat3_to_eulO", ctypes.c_void_p, [
	("eul",		( ctypes.c_float * 3 )),
	("order",		ctypes.c_short),
	("mat",		( ctypes.c_float * 3 )),] )

mat4_to_eulO = _rpythonic_function_(		"mat4_to_eulO", ctypes.c_void_p, [
	("eul",		( ctypes.c_float * 3 )),
	("order",		ctypes.c_short),
	("mat",		( ctypes.c_float * 4 )),] )

axis_angle_to_eulO = _rpythonic_function_(		"axis_angle_to_eulO", ctypes.c_void_p, [
	("eul",		( ctypes.c_float * 3 )),
	("order",		ctypes.c_short),
	("axis",		( ctypes.c_float * 3 )),
	("angle",		ctypes.c_float),] )

mat3_to_compatible_eulO = _rpythonic_function_(		"mat3_to_compatible_eulO", ctypes.c_void_p, [
	("eul",		( ctypes.c_float * 3 )),
	("old",		( ctypes.c_float * 3 )),
	("order",		ctypes.c_short),
	("mat",		( ctypes.c_float * 3 )),] )

mat4_to_compatible_eulO = _rpythonic_function_(		"mat4_to_compatible_eulO", ctypes.c_void_p, [
	("eul",		( ctypes.c_float * 3 )),
	("old",		( ctypes.c_float * 3 )),
	("order",		ctypes.c_short),
	("mat",		( ctypes.c_float * 4 )),] )

rotate_eulO = _rpythonic_function_(		"rotate_eulO", ctypes.c_void_p, [
	("eul",		( ctypes.c_float * 3 )),
	("order",		ctypes.c_short),
	("axis",		ctypes.c_char),
	("angle",		ctypes.c_float),] )

copy_dq_dq = _rpythonic_function_(		"copy_dq_dq", ctypes.c_void_p, [
	("r",		ctypes.POINTER(DualQuat)),
	("dq",		ctypes.POINTER(DualQuat)),] )

normalize_dq = _rpythonic_function_(		"normalize_dq", ctypes.c_void_p, [
	("dq",		ctypes.POINTER(DualQuat)),
	("totw",		ctypes.c_float),] )

add_weighted_dq_dq = _rpythonic_function_(		"add_weighted_dq_dq", ctypes.c_void_p, [
	("r",		ctypes.POINTER(DualQuat)),
	("dq",		ctypes.POINTER(DualQuat)),
	("weight",		ctypes.c_float),] )

mul_v3m3_dq = _rpythonic_function_(		"mul_v3m3_dq", ctypes.c_void_p, [
	("r",		( ctypes.c_float * 3 )),
	("R",		( ctypes.c_float * 3 )),
	("dq",		ctypes.POINTER(DualQuat)),] )

mat4_to_dquat = _rpythonic_function_(		"mat4_to_dquat", ctypes.c_void_p, [
	("r",		ctypes.POINTER(DualQuat)),
	("base",		( ctypes.c_float * 4 )),
	("M",		( ctypes.c_float * 4 )),] )

dquat_to_mat4 = _rpythonic_function_(		"dquat_to_mat4", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),
	("dq",		ctypes.POINTER(DualQuat)),] )

quat_apply_track = _rpythonic_function_(		"quat_apply_track", ctypes.c_void_p, [
	("quat",		( ctypes.c_float * 4 )),
	("axis",		ctypes.c_short),
	("upflag",		ctypes.c_short),] )

vec_apply_track = _rpythonic_function_(		"vec_apply_track", ctypes.c_void_p, [
	("vec",		( ctypes.c_float * 3 )),
	("axis",		ctypes.c_short),] )

lens_to_angle = _rpythonic_function_(		"lens_to_angle", ctypes.c_float, [
	("lens",		ctypes.c_float),] )

angle_to_lens = _rpythonic_function_(		"angle_to_lens", ctypes.c_float, [
	("angle",		ctypes.c_float),] )

angle_wrap_rad = _rpythonic_function_(		"angle_wrap_rad", ctypes.c_float, [
	("angle",		ctypes.c_float),] )

angle_wrap_deg = _rpythonic_function_(		"angle_wrap_deg", ctypes.c_float, [
	("angle",		ctypes.c_float),] )

interp_v2_v2v2 = _rpythonic_function_(		"interp_v2_v2v2", ctypes.c_void_p, [
	("r",		( ctypes.c_float * 2 )),
	("a",		( ctypes.c_float * 2 )),
	("b",		( ctypes.c_float * 2 )),
	("t",		ctypes.c_float),] )

interp_v2_v2v2v2 = _rpythonic_function_(		"interp_v2_v2v2v2", ctypes.c_void_p, [
	("r",		( ctypes.c_float * 2 )),
	("a",		( ctypes.c_float * 2 )),
	("b",		( ctypes.c_float * 2 )),
	("c",		( ctypes.c_float * 3 )),
	("t",		( ctypes.c_float * 3 )),] )

interp_v3_v3v3 = _rpythonic_function_(		"interp_v3_v3v3", ctypes.c_void_p, [
	("r",		( ctypes.c_float * 3 )),
	("a",		( ctypes.c_float * 3 )),
	("b",		( ctypes.c_float * 3 )),
	("t",		ctypes.c_float),] )

interp_v3_v3v3v3 = _rpythonic_function_(		"interp_v3_v3v3v3", ctypes.c_void_p, [
	("p",		( ctypes.c_float * 3 )),
	("v1",		( ctypes.c_float * 3 )),
	("v2",		( ctypes.c_float * 3 )),
	("v3",		( ctypes.c_float * 3 )),
	("w",		( ctypes.c_float * 3 )),] )

interp_v3_v3v3v3v3 = _rpythonic_function_(		"interp_v3_v3v3v3v3", ctypes.c_void_p, [
	("p",		( ctypes.c_float * 3 )),
	("v1",		( ctypes.c_float * 3 )),
	("v2",		( ctypes.c_float * 3 )),
	("v3",		( ctypes.c_float * 3 )),
	("v4",		( ctypes.c_float * 3 )),
	("w",		( ctypes.c_float * 4 )),] )

interp_v4_v4v4 = _rpythonic_function_(		"interp_v4_v4v4", ctypes.c_void_p, [
	("r",		( ctypes.c_float * 4 )),
	("a",		( ctypes.c_float * 4 )),
	("b",		( ctypes.c_float * 4 )),
	("t",		ctypes.c_float),] )

interp_v4_v4v4v4 = _rpythonic_function_(		"interp_v4_v4v4v4", ctypes.c_void_p, [
	("p",		( ctypes.c_float * 4 )),
	("v1",		( ctypes.c_float * 4 )),
	("v2",		( ctypes.c_float * 4 )),
	("v3",		( ctypes.c_float * 4 )),
	("w",		( ctypes.c_float * 3 )),] )

mid_v3_v3v3 = _rpythonic_function_(		"mid_v3_v3v3", ctypes.c_void_p, [
	("r",		( ctypes.c_float * 3 )),
	("a",		( ctypes.c_float * 3 )),
	("b",		( ctypes.c_float * 3 )),] )

angle_v2v2 = _rpythonic_function_(		"angle_v2v2", ctypes.c_float, [
	("a",		( ctypes.c_float * 2 )),
	("b",		( ctypes.c_float * 2 )),] )

angle_v2v2v2 = _rpythonic_function_(		"angle_v2v2v2", ctypes.c_float, [
	("a",		( ctypes.c_float * 2 )),
	("b",		( ctypes.c_float * 2 )),
	("c",		( ctypes.c_float * 2 )),] )

angle_normalized_v2v2 = _rpythonic_function_(		"angle_normalized_v2v2", ctypes.c_float, [
	("a",		( ctypes.c_float * 2 )),
	("b",		( ctypes.c_float * 2 )),] )

angle_v3v3 = _rpythonic_function_(		"angle_v3v3", ctypes.c_float, [
	("a",		( ctypes.c_float * 3 )),
	("b",		( ctypes.c_float * 3 )),] )

angle_v3v3v3 = _rpythonic_function_(		"angle_v3v3v3", ctypes.c_float, [
	("a",		( ctypes.c_float * 3 )),
	("b",		( ctypes.c_float * 3 )),
	("c",		( ctypes.c_float * 3 )),] )

angle_normalized_v3v3 = _rpythonic_function_(		"angle_normalized_v3v3", ctypes.c_float, [
	("v1",		( ctypes.c_float * 3 )),
	("v2",		( ctypes.c_float * 3 )),] )

angle_tri_v3 = _rpythonic_function_(		"angle_tri_v3", ctypes.c_void_p, [
	("angles",		( ctypes.c_float * 3 )),
	("v1",		( ctypes.c_float * 3 )),
	("v2",		( ctypes.c_float * 3 )),
	("v3",		( ctypes.c_float * 3 )),] )

angle_quad_v3 = _rpythonic_function_(		"angle_quad_v3", ctypes.c_void_p, [
	("angles",		( ctypes.c_float * 4 )),
	("v1",		( ctypes.c_float * 3 )),
	("v2",		( ctypes.c_float * 3 )),
	("v3",		( ctypes.c_float * 3 )),
	("v4",		( ctypes.c_float * 3 )),] )

project_v2_v2v2 = _rpythonic_function_(		"project_v2_v2v2", ctypes.c_void_p, [
	("c",		( ctypes.c_float * 2 )),
	("v1",		( ctypes.c_float * 2 )),
	("v2",		( ctypes.c_float * 2 )),] )

project_v3_v3v3 = _rpythonic_function_(		"project_v3_v3v3", ctypes.c_void_p, [
	("r",		( ctypes.c_float * 3 )),
	("p",		( ctypes.c_float * 3 )),
	("n",		( ctypes.c_float * 3 )),] )

reflect_v3_v3v3 = _rpythonic_function_(		"reflect_v3_v3v3", ctypes.c_void_p, [
	("r",		( ctypes.c_float * 3 )),
	("v",		( ctypes.c_float * 3 )),
	("n",		( ctypes.c_float * 3 )),] )

ortho_basis_v3v3_v3 = _rpythonic_function_(		"ortho_basis_v3v3_v3", ctypes.c_void_p, [
	("r1",		( ctypes.c_float * 3 )),
	("r2",		( ctypes.c_float * 3 )),
	("a",		( ctypes.c_float * 3 )),] )

bisect_v3_v3v3v3 = _rpythonic_function_(		"bisect_v3_v3v3v3", ctypes.c_void_p, [
	("r",		( ctypes.c_float * 3 )),
	("a",		( ctypes.c_float * 3 )),
	("b",		( ctypes.c_float * 3 )),
	("c",		( ctypes.c_float * 3 )),] )

rotate_v3_v3v3fl = _rpythonic_function_(		"rotate_v3_v3v3fl", ctypes.c_void_p, [
	("v",		( ctypes.c_float * 3 )),
	("p",		( ctypes.c_float * 3 )),
	("axis",		( ctypes.c_float * 3 )),
	("angle",		ctypes.c_float),] )

rotate_normalized_v3_v3v3fl = _rpythonic_function_(		"rotate_normalized_v3_v3v3fl", ctypes.c_void_p, [
	("v",		( ctypes.c_float * 3 )),
	("p",		( ctypes.c_float * 3 )),
	("axis",		( ctypes.c_float * 3 )),
	("angle",		ctypes.c_float),] )

print_v2 = _rpythonic_function_(		"print_v2", ctypes.c_void_p, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("a",		( ctypes.c_float * 2 )),] )

print_v3 = _rpythonic_function_(		"print_v3", ctypes.c_void_p, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("a",		( ctypes.c_float * 3 )),] )

print_v4 = _rpythonic_function_(		"print_v4", ctypes.c_void_p, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("a",		( ctypes.c_float * 4 )),] )

minmax_v3v3_v3 = _rpythonic_function_(		"minmax_v3v3_v3", ctypes.c_void_p, [
	("min",		( ctypes.c_float * 3 )),
	("max",		( ctypes.c_float * 3 )),
	("vec",		( ctypes.c_float * 3 )),] )

range_vni = _rpythonic_function_(		"range_vni", ctypes.c_void_p, [
	("array",		ctypes.POINTER(ctypes.c_int)),
	("size",		ctypes.c_int),
	("start",		ctypes.c_int),] )

negate_vn = _rpythonic_function_(		"negate_vn", ctypes.c_void_p, [
	("array_tar",		ctypes.POINTER(ctypes.c_float)),
	("size",		ctypes.c_int),] )

negate_vn_vn = _rpythonic_function_(		"negate_vn_vn", ctypes.c_void_p, [
	("array_tar",		ctypes.POINTER(ctypes.c_float)),
	("array_src",		ctypes.POINTER(ctypes.c_float)),
	("size",		ctypes.c_int),] )

mul_vn_fl = _rpythonic_function_(		"mul_vn_fl", ctypes.c_void_p, [
	("array",		ctypes.POINTER(ctypes.c_float)),
	("size",		ctypes.c_int),
	("f",		ctypes.c_float),] )

mul_vn_vn_fl = _rpythonic_function_(		"mul_vn_vn_fl", ctypes.c_void_p, [
	("array_tar",		ctypes.POINTER(ctypes.c_float)),
	("array_src",		ctypes.POINTER(ctypes.c_float)),
	("size",		ctypes.c_int),
	("f",		ctypes.c_float),] )

add_vn_vn = _rpythonic_function_(		"add_vn_vn", ctypes.c_void_p, [
	("array_tar",		ctypes.POINTER(ctypes.c_float)),
	("array_src",		ctypes.POINTER(ctypes.c_float)),
	("size",		ctypes.c_int),] )

add_vn_vnvn = _rpythonic_function_(		"add_vn_vnvn", ctypes.c_void_p, [
	("array_tar",		ctypes.POINTER(ctypes.c_float)),
	("array_src_a",		ctypes.POINTER(ctypes.c_float)),
	("array_src_b",		ctypes.POINTER(ctypes.c_float)),
	("size",		ctypes.c_int),] )

sub_vn_vn = _rpythonic_function_(		"sub_vn_vn", ctypes.c_void_p, [
	("array_tar",		ctypes.POINTER(ctypes.c_float)),
	("array_src",		ctypes.POINTER(ctypes.c_float)),
	("size",		ctypes.c_int),] )

sub_vn_vnvn = _rpythonic_function_(		"sub_vn_vnvn", ctypes.c_void_p, [
	("array_tar",		ctypes.POINTER(ctypes.c_float)),
	("array_src_a",		ctypes.POINTER(ctypes.c_float)),
	("array_src_b",		ctypes.POINTER(ctypes.c_float)),
	("size",		ctypes.c_int),] )

fill_vni = _rpythonic_function_(		"fill_vni", ctypes.c_void_p, [
	("array_tar",		ctypes.POINTER(ctypes.c_int)),
	("size",		ctypes.c_int),
	("val",		ctypes.c_int),] )

fill_vn = _rpythonic_function_(		"fill_vn", ctypes.c_void_p, [
	("array_tar",		ctypes.POINTER(ctypes.c_float)),
	("size",		ctypes.c_int),
	("val",		ctypes.c_float),] )

cent_tri_v3 = _rpythonic_function_(		"cent_tri_v3", ctypes.c_void_p, [
	("r",		( ctypes.c_float * 3 )),
	("a",		( ctypes.c_float * 3 )),
	("b",		( ctypes.c_float * 3 )),
	("c",		( ctypes.c_float * 3 )),] )

cent_quad_v3 = _rpythonic_function_(		"cent_quad_v3", ctypes.c_void_p, [
	("r",		( ctypes.c_float * 3 )),
	("a",		( ctypes.c_float * 3 )),
	("b",		( ctypes.c_float * 3 )),
	("c",		( ctypes.c_float * 3 )),
	("d",		( ctypes.c_float * 3 )),] )

normal_tri_v3 = _rpythonic_function_(		"normal_tri_v3", ctypes.c_float, [
	("r",		( ctypes.c_float * 3 )),
	("a",		( ctypes.c_float * 3 )),
	("b",		( ctypes.c_float * 3 )),
	("c",		( ctypes.c_float * 3 )),] )

normal_quad_v3 = _rpythonic_function_(		"normal_quad_v3", ctypes.c_float, [
	("r",		( ctypes.c_float * 3 )),
	("a",		( ctypes.c_float * 3 )),
	("b",		( ctypes.c_float * 3 )),
	("c",		( ctypes.c_float * 3 )),
	("d",		( ctypes.c_float * 3 )),] )

area_tri_v2 = _rpythonic_function_(		"area_tri_v2", ctypes.c_float, [
	("a",		( ctypes.c_float * 2 )),
	("b",		( ctypes.c_float * 2 )),
	("c",		( ctypes.c_float * 2 )),] )

area_tri_signed_v2 = _rpythonic_function_(		"area_tri_signed_v2", ctypes.c_float, [
	("v1",		( ctypes.c_float * 2 )),
	("v2",		( ctypes.c_float * 2 )),
	("v3",		( ctypes.c_float * 2 )),] )

area_tri_v3 = _rpythonic_function_(		"area_tri_v3", ctypes.c_float, [
	("a",		( ctypes.c_float * 3 )),
	("b",		( ctypes.c_float * 3 )),
	("c",		( ctypes.c_float * 3 )),] )

area_quad_v3 = _rpythonic_function_(		"area_quad_v3", ctypes.c_float, [
	("a",		( ctypes.c_float * 3 )),
	("b",		( ctypes.c_float * 3 )),
	("c",		( ctypes.c_float * 3 )),
	("d",		( ctypes.c_float * 3 )),] )

area_poly_v3 = _rpythonic_function_(		"area_poly_v3", ctypes.c_float, [
	("nr",		ctypes.c_int),
	("verts",		ctypes.c_float),
	("normal",		( ctypes.c_float * 3 )),] )

dist_to_line_v2 = _rpythonic_function_(		"dist_to_line_v2", ctypes.c_float, [
	("p",		( ctypes.c_float * 2 )),
	("l1",		( ctypes.c_float * 2 )),
	("l2",		( ctypes.c_float * 2 )),] )

dist_to_line_segment_v2 = _rpythonic_function_(		"dist_to_line_segment_v2", ctypes.c_float, [
	("p",		( ctypes.c_float * 2 )),
	("l1",		( ctypes.c_float * 2 )),
	("l2",		( ctypes.c_float * 2 )),] )

dist_to_line_segment_v3 = _rpythonic_function_(		"dist_to_line_segment_v3", ctypes.c_float, [
	("p",		( ctypes.c_float * 3 )),
	("l1",		( ctypes.c_float * 3 )),
	("l2",		( ctypes.c_float * 3 )),] )

closest_to_line_v3 = _rpythonic_function_(		"closest_to_line_v3", ctypes.c_float, [
	("r",		( ctypes.c_float * 3 )),
	("p",		( ctypes.c_float * 3 )),
	("l1",		( ctypes.c_float * 3 )),
	("l2",		( ctypes.c_float * 3 )),] )

closest_to_line_v2 = _rpythonic_function_(		"closest_to_line_v2", ctypes.c_float, [
	("r",		( ctypes.c_float * 2 )),
	("p",		( ctypes.c_float * 2 )),
	("l1",		( ctypes.c_float * 2 )),
	("l2",		( ctypes.c_float * 2 )),] )

closest_to_line_segment_v3 = _rpythonic_function_(		"closest_to_line_segment_v3", ctypes.c_void_p, [
	("r",		( ctypes.c_float * 3 )),
	("p",		( ctypes.c_float * 3 )),
	("l1",		( ctypes.c_float * 3 )),
	("l2",		( ctypes.c_float * 3 )),] )

line_point_factor_v3 = _rpythonic_function_(		"line_point_factor_v3", ctypes.c_float, [
	("p",		( ctypes.c_float * 3 )),
	("l1",		( ctypes.c_float * 3 )),
	("l2",		( ctypes.c_float * 3 )),] )

line_point_factor_v2 = _rpythonic_function_(		"line_point_factor_v2", ctypes.c_float, [
	("p",		( ctypes.c_float * 2 )),
	("l1",		( ctypes.c_float * 2 )),
	("l2",		( ctypes.c_float * 2 )),] )

isect_line_line_v2 = _rpythonic_function_(		"isect_line_line_v2", ctypes.c_int, [
	("a1",		( ctypes.c_float * 2 )),
	("a2",		( ctypes.c_float * 2 )),
	("b1",		( ctypes.c_float * 2 )),
	("b2",		( ctypes.c_float * 2 )),] )

isect_line_line_v2_int = _rpythonic_function_(		"isect_line_line_v2_int", ctypes.c_int, [
	("a1",		( ctypes.c_int * 2 )),
	("a2",		( ctypes.c_int * 2 )),
	("b1",		( ctypes.c_int * 2 )),
	("b2",		( ctypes.c_int * 2 )),] )

isect_line_sphere_v3 = _rpythonic_function_(		"isect_line_sphere_v3", ctypes.c_int, [
	("l1",		( ctypes.c_float * 3 )),
	("l2",		( ctypes.c_float * 3 )),
	("sp",		( ctypes.c_float * 3 )),
	("r",		ctypes.c_float),
	("r_p1",		( ctypes.c_float * 3 )),
	("r_p2",		( ctypes.c_float * 3 )),] )

isect_line_sphere_v2 = _rpythonic_function_(		"isect_line_sphere_v2", ctypes.c_int, [
	("l1",		( ctypes.c_float * 2 )),
	("l2",		( ctypes.c_float * 2 )),
	("sp",		( ctypes.c_float * 2 )),
	("r",		ctypes.c_float),
	("r_p1",		( ctypes.c_float * 2 )),
	("r_p2",		( ctypes.c_float * 2 )),] )

isect_seg_seg_v2_point = _rpythonic_function_(		"isect_seg_seg_v2_point", ctypes.c_int, [
	("v1",		( ctypes.c_float * 2 )),
	("v2",		( ctypes.c_float * 2 )),
	("v3",		( ctypes.c_float * 2 )),
	("v4",		( ctypes.c_float * 2 )),
	("vi",		( ctypes.c_float * 2 )),] )

isect_line_line_v3 = _rpythonic_function_(		"isect_line_line_v3", ctypes.c_int, [
	("v1",		( ctypes.c_float * 3 )),
	("v2",		( ctypes.c_float * 3 )),
	("v3",		( ctypes.c_float * 3 )),
	("v4",		( ctypes.c_float * 3 )),
	("i1",		( ctypes.c_float * 3 )),
	("i2",		( ctypes.c_float * 3 )),] )

isect_line_line_strict_v3 = _rpythonic_function_(		"isect_line_line_strict_v3", ctypes.c_int, [
	("v1",		( ctypes.c_float * 3 )),
	("v2",		( ctypes.c_float * 3 )),
	("v3",		( ctypes.c_float * 3 )),
	("v4",		( ctypes.c_float * 3 )),
	("vi",		( ctypes.c_float * 3 )),
	("C_lambda",		ctypes.POINTER(ctypes.c_float)),] )

isect_ray_plane_v3 = _rpythonic_function_(		"isect_ray_plane_v3", ctypes.c_int, [
	("p1",		( ctypes.c_float * 3 )),
	("d",		( ctypes.c_float * 3 )),
	("v0",		( ctypes.c_float * 3 )),
	("v1",		( ctypes.c_float * 3 )),
	("v2",		( ctypes.c_float * 3 )),
	("C_lambda",		ctypes.POINTER(ctypes.c_float)),
	("clip",		ctypes.c_int),] )

isect_line_plane_v3 = _rpythonic_function_(		"isect_line_plane_v3", ctypes.c_int, [
	("out",		( ctypes.c_float * 3 )),
	("l1",		( ctypes.c_float * 3 )),
	("l2",		( ctypes.c_float * 3 )),
	("plane_co",		( ctypes.c_float * 3 )),
	("plane_no",		( ctypes.c_float * 3 )),
	("no_flip",		ctypes.c_short),] )

isect_line_tri_v3 = _rpythonic_function_(		"isect_line_tri_v3", ctypes.c_int, [
	("p1",		( ctypes.c_float * 3 )),
	("p2",		( ctypes.c_float * 3 )),
	("v0",		( ctypes.c_float * 3 )),
	("v1",		( ctypes.c_float * 3 )),
	("v2",		( ctypes.c_float * 3 )),
	("C_lambda",		ctypes.POINTER(ctypes.c_float)),
	("uv",		( ctypes.c_float * 2 )),] )

isect_ray_tri_v3 = _rpythonic_function_(		"isect_ray_tri_v3", ctypes.c_int, [
	("p1",		( ctypes.c_float * 3 )),
	("d",		( ctypes.c_float * 3 )),
	("v0",		( ctypes.c_float * 3 )),
	("v1",		( ctypes.c_float * 3 )),
	("v2",		( ctypes.c_float * 3 )),
	("C_lambda",		ctypes.POINTER(ctypes.c_float)),
	("uv",		( ctypes.c_float * 2 )),] )

isect_ray_tri_threshold_v3 = _rpythonic_function_(		"isect_ray_tri_threshold_v3", ctypes.c_int, [
	("p1",		( ctypes.c_float * 3 )),
	("d",		( ctypes.c_float * 3 )),
	("v0",		( ctypes.c_float * 3 )),
	("v1",		( ctypes.c_float * 3 )),
	("v2",		( ctypes.c_float * 3 )),
	("C_lambda",		ctypes.POINTER(ctypes.c_float)),
	("uv",		( ctypes.c_float * 2 )),
	("threshold",		ctypes.c_float),] )

isect_ray_tri_epsilon_v3 = _rpythonic_function_(		"isect_ray_tri_epsilon_v3", ctypes.c_int, [
	("p1",		( ctypes.c_float * 3 )),
	("d",		( ctypes.c_float * 3 )),
	("v0",		( ctypes.c_float * 3 )),
	("v1",		( ctypes.c_float * 3 )),
	("v2",		( ctypes.c_float * 3 )),
	("C_lambda",		ctypes.POINTER(ctypes.c_float)),
	("uv",		( ctypes.c_float * 2 )),
	("epsilon",		ctypes.c_float),] )

isect_point_quad_v2 = _rpythonic_function_(		"isect_point_quad_v2", ctypes.c_int, [
	("p",		( ctypes.c_float * 2 )),
	("a",		( ctypes.c_float * 2 )),
	("b",		( ctypes.c_float * 2 )),
	("c",		( ctypes.c_float * 2 )),
	("d",		( ctypes.c_float * 2 )),] )

isect_point_tri_v2 = _rpythonic_function_(		"isect_point_tri_v2", ctypes.c_int, [
	("v1",		( ctypes.c_float * 2 )),
	("v2",		( ctypes.c_float * 2 )),
	("v3",		( ctypes.c_float * 2 )),
	("pt",		( ctypes.c_float * 2 )),] )

isect_point_tri_v2_int = _rpythonic_function_(		"isect_point_tri_v2_int", ctypes.c_int, [
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_int),
	("y2",		ctypes.c_int),
	("a",		ctypes.c_int),
	("b",		ctypes.c_int),] )

isect_point_tri_prism_v3 = _rpythonic_function_(		"isect_point_tri_prism_v3", ctypes.c_int, [
	("p",		( ctypes.c_float * 3 )),
	("v1",		( ctypes.c_float * 3 )),
	("v2",		( ctypes.c_float * 3 )),
	("v3",		( ctypes.c_float * 3 )),] )

isect_point_quad_uv_v2 = _rpythonic_function_(		"isect_point_quad_uv_v2", ctypes.c_void_p, [
	("v0",		( ctypes.c_float * 2 )),
	("v1",		( ctypes.c_float * 2 )),
	("v2",		( ctypes.c_float * 2 )),
	("v3",		( ctypes.c_float * 2 )),
	("pt",		( ctypes.c_float * 2 )),
	("uv",		ctypes.POINTER(ctypes.c_float)),] )

isect_point_face_uv_v2 = _rpythonic_function_(		"isect_point_face_uv_v2", ctypes.c_void_p, [
	("isquad",		ctypes.c_int),
	("v0",		( ctypes.c_float * 2 )),
	("v1",		( ctypes.c_float * 2 )),
	("v2",		( ctypes.c_float * 2 )),
	("v3",		( ctypes.c_float * 2 )),
	("pt",		( ctypes.c_float * 2 )),
	("uv",		ctypes.POINTER(ctypes.c_float)),] )

isect_sweeping_sphere_tri_v3 = _rpythonic_function_(		"isect_sweeping_sphere_tri_v3", ctypes.c_int, [
	("p1",		( ctypes.c_float * 3 )),
	("p2",		( ctypes.c_float * 3 )),
	("radius",		ctypes.c_float),
	("v0",		( ctypes.c_float * 3 )),
	("v1",		( ctypes.c_float * 3 )),
	("v2",		( ctypes.c_float * 3 )),
	("C_lambda",		ctypes.POINTER(ctypes.c_float)),
	("ipoint",		( ctypes.c_float * 3 )),] )

isect_axial_line_tri_v3 = _rpythonic_function_(		"isect_axial_line_tri_v3", ctypes.c_int, [
	("axis",		ctypes.c_int),
	("co1",		( ctypes.c_float * 3 )),
	("co2",		( ctypes.c_float * 3 )),
	("v0",		( ctypes.c_float * 3 )),
	("v1",		( ctypes.c_float * 3 )),
	("v2",		( ctypes.c_float * 3 )),
	("C_lambda",		ctypes.POINTER(ctypes.c_float)),] )

isect_aabb_aabb_v3 = _rpythonic_function_(		"isect_aabb_aabb_v3", ctypes.c_int, [
	("min1",		( ctypes.c_float * 3 )),
	("max1",		( ctypes.c_float * 3 )),
	("min2",		( ctypes.c_float * 3 )),
	("max2",		( ctypes.c_float * 3 )),] )

clip_line_plane = _rpythonic_function_(		"clip_line_plane", ctypes.c_int, [
	("p1",		( ctypes.c_float * 3 )),
	("p2",		( ctypes.c_float * 3 )),
	("plane",		( ctypes.c_float * 4 )),] )

plot_line_v2v2i = _rpythonic_function_(		"plot_line_v2v2i", ctypes.c_void_p, [
	("p1",		( ctypes.c_int * 2 )),
	("p2",		( ctypes.c_int * 2 )),
	("callback",		ctypes.c_void_p),
	("userData",		ctypes.POINTER(ctypes.c_void_p)),] )

callback = _rpythonic_function_(		"callback", ctypes.c_int, [
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

interp_weights_face_v3 = _rpythonic_function_(		"interp_weights_face_v3", ctypes.c_void_p, [
	("w",		( ctypes.c_float * 4 )),
	("a",		( ctypes.c_float * 3 )),
	("b",		( ctypes.c_float * 3 )),
	("c",		( ctypes.c_float * 3 )),
	("d",		( ctypes.c_float * 3 )),
	("p",		( ctypes.c_float * 3 )),] )

interp_weights_poly_v3 = _rpythonic_function_(		"interp_weights_poly_v3", ctypes.c_void_p, [
	("w",		ctypes.c_float),
	("v",		ctypes.c_float),
	("n",		ctypes.c_int),
	("p",		( ctypes.c_float * 3 )),] )

interp_cubic_v3 = _rpythonic_function_(		"interp_cubic_v3", ctypes.c_void_p, [
	("x",		( ctypes.c_float * 3 )),
	("v",		( ctypes.c_float * 3 )),
	("x1",		( ctypes.c_float * 3 )),
	("v1",		( ctypes.c_float * 3 )),
	("x2",		( ctypes.c_float * 3 )),
	("v2",		( ctypes.c_float * 3 )),
	("t",		ctypes.c_float),] )

interp_sparse_array = _rpythonic_function_(		"interp_sparse_array", ctypes.c_int, [
	("array",		ctypes.POINTER(ctypes.c_float)),
	("list_size",		ctypes.c_int),
	("invalid",		ctypes.c_float),] )

barycentric_transform = _rpythonic_function_(		"barycentric_transform", ctypes.c_void_p, [
	("pt_tar",		( ctypes.c_float * 3 )),
	("pt_src",		( ctypes.c_float * 3 )),
	("tri_tar_p1",		( ctypes.c_float * 3 )),
	("tri_tar_p2",		( ctypes.c_float * 3 )),
	("tri_tar_p3",		( ctypes.c_float * 3 )),
	("tri_src_p1",		( ctypes.c_float * 3 )),
	("tri_src_p2",		( ctypes.c_float * 3 )),
	("tri_src_p3",		( ctypes.c_float * 3 )),] )

barycentric_weights_v2 = _rpythonic_function_(		"barycentric_weights_v2", ctypes.c_void_p, [
	("v1",		( ctypes.c_float * 2 )),
	("v2",		( ctypes.c_float * 2 )),
	("v3",		( ctypes.c_float * 2 )),
	("co",		( ctypes.c_float * 2 )),
	("w",		( ctypes.c_float * 3 )),] )

resolve_tri_uv = _rpythonic_function_(		"resolve_tri_uv", ctypes.c_void_p, [
	("uv",		( ctypes.c_float * 2 )),
	("st",		( ctypes.c_float * 2 )),
	("st0",		( ctypes.c_float * 2 )),
	("st1",		( ctypes.c_float * 2 )),
	("st2",		( ctypes.c_float * 2 )),] )

resolve_quad_uv = _rpythonic_function_(		"resolve_quad_uv", ctypes.c_void_p, [
	("uv",		( ctypes.c_float * 2 )),
	("st",		( ctypes.c_float * 2 )),
	("st0",		( ctypes.c_float * 2 )),
	("st1",		( ctypes.c_float * 2 )),
	("st2",		( ctypes.c_float * 2 )),
	("st3",		( ctypes.c_float * 2 )),] )

lookat_m4 = _rpythonic_function_(		"lookat_m4", ctypes.c_void_p, [
	("mat",		( ctypes.c_float * 4 )),
	("vx",		ctypes.c_float),
	("vy",		ctypes.c_float),
	("vz",		ctypes.c_float),
	("px",		ctypes.c_float),
	("py",		ctypes.c_float),
	("pz",		ctypes.c_float),
	("twist",		ctypes.c_float),] )

polarview_m4 = _rpythonic_function_(		"polarview_m4", ctypes.c_void_p, [
	("mat",		( ctypes.c_float * 4 )),
	("dist",		ctypes.c_float),
	("azimuth",		ctypes.c_float),
	("incidence",		ctypes.c_float),
	("twist",		ctypes.c_float),] )

perspective_m4 = _rpythonic_function_(		"perspective_m4", ctypes.c_void_p, [
	("mat",		( ctypes.c_float * 4 )),
	("left",		ctypes.c_float),
	("right",		ctypes.c_float),
	("bottom",		ctypes.c_float),
	("top",		ctypes.c_float),
	("nearClip",		ctypes.c_float),
	("farClip",		ctypes.c_float),] )

orthographic_m4 = _rpythonic_function_(		"orthographic_m4", ctypes.c_void_p, [
	("mat",		( ctypes.c_float * 4 )),
	("left",		ctypes.c_float),
	("right",		ctypes.c_float),
	("bottom",		ctypes.c_float),
	("top",		ctypes.c_float),
	("nearClip",		ctypes.c_float),
	("farClip",		ctypes.c_float),] )

window_translate_m4 = _rpythonic_function_(		"window_translate_m4", ctypes.c_void_p, [
	("winmat",		ctypes.c_float),
	("perspmat",		ctypes.c_float),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),] )

box_clip_bounds_m4 = _rpythonic_function_(		"box_clip_bounds_m4", ctypes.c_int, [
	("boundbox",		( ctypes.c_float * 2 )),
	("bounds",		( ctypes.c_float * 4 )),
	("winmat",		( ctypes.c_float * 4 )),] )

box_minmax_bounds_m4 = _rpythonic_function_(		"box_minmax_bounds_m4", ctypes.c_void_p, [
	("min",		( ctypes.c_float * 3 )),
	("max",		( ctypes.c_float * 3 )),
	("boundbox",		( ctypes.c_float * 2 )),
	("mat",		( ctypes.c_float * 4 )),] )

map_to_tube = _rpythonic_function_(		"map_to_tube", ctypes.c_void_p, [
	("u",		ctypes.POINTER(ctypes.c_float)),
	("v",		ctypes.POINTER(ctypes.c_float)),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

map_to_sphere = _rpythonic_function_(		"map_to_sphere", ctypes.c_void_p, [
	("u",		ctypes.POINTER(ctypes.c_float)),
	("v",		ctypes.POINTER(ctypes.c_float)),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

accumulate_vertex_normals = _rpythonic_function_(		"accumulate_vertex_normals", ctypes.c_void_p, [
	("n1",		( ctypes.c_float * 3 )),
	("n2",		( ctypes.c_float * 3 )),
	("n3",		( ctypes.c_float * 3 )),
	("n4",		( ctypes.c_float * 3 )),
	("f_no",		( ctypes.c_float * 3 )),
	("co1",		( ctypes.c_float * 3 )),
	("co2",		( ctypes.c_float * 3 )),
	("co3",		( ctypes.c_float * 3 )),
	("co4",		( ctypes.c_float * 3 )),] )

find_vertex_tangent = _rpythonic_function_(		"find_vertex_tangent", ctypes.POINTER(ctypes.c_float), [
	("vtang",		ctypes.POINTER(VertexTangent)),
	("uv",		( ctypes.c_float * 2 )),] )

sum_or_add_vertex_tangent = _rpythonic_function_(		"sum_or_add_vertex_tangent", ctypes.c_void_p, [
	("arena",		ctypes.POINTER(ctypes.c_void_p)),
	("vtang",		ctypes.POINTER(ctypes.POINTER(VertexTangent))),
	("tang",		( ctypes.c_float * 3 )),
	("uv",		( ctypes.c_float * 2 )),] )

tangent_from_uv = _rpythonic_function_(		"tangent_from_uv", ctypes.c_void_p, [
	("uv1",		( ctypes.c_float * 2 )),
	("uv2",		( ctypes.c_float * 2 )),
	("uv3",		( ctypes.c_float * 2 )),
	("co1",		( ctypes.c_float * 3 )),
	("co2",		( ctypes.c_float * 3 )),
	("co3",		( ctypes.c_float * 3 )),
	("n",		( ctypes.c_float * 3 )),
	("tang",		( ctypes.c_float * 3 )),] )

vcloud_estimate_transform = _rpythonic_function_(		"vcloud_estimate_transform", ctypes.c_void_p, [
	("list_size",		ctypes.c_int),
	("pos",		ctypes.POINTER(ctypes.c_float)),
	("weight",		ctypes.POINTER(ctypes.c_float)),
	("rpos",		ctypes.POINTER(ctypes.c_float)),
	("rweight",		ctypes.POINTER(ctypes.c_float)),
	("lloc",		( ctypes.c_float * 3 )),
	("rloc",		( ctypes.c_float * 3 )),
	("lrot",		( ctypes.c_float * 3 )),
	("lscale",		( ctypes.c_float * 3 )),] )

form_factor_hemi_poly = _rpythonic_function_(		"form_factor_hemi_poly", ctypes.c_float, [
	("p",		( ctypes.c_float * 3 )),
	("n",		( ctypes.c_float * 3 )),
	("v1",		( ctypes.c_float * 3 )),
	("v2",		( ctypes.c_float * 3 )),
	("v3",		( ctypes.c_float * 3 )),
	("v4",		( ctypes.c_float * 3 )),] )

voxel_sample_nearest = _rpythonic_function_(		"voxel_sample_nearest", ctypes.c_float, [
	("data",		ctypes.POINTER(ctypes.c_float)),
	("res",		ctypes.POINTER(ctypes.c_int)),
	("co",		ctypes.POINTER(ctypes.c_float)),] )

voxel_sample_trilinear = _rpythonic_function_(		"voxel_sample_trilinear", ctypes.c_float, [
	("data",		ctypes.POINTER(ctypes.c_float)),
	("res",		ctypes.POINTER(ctypes.c_int)),
	("co",		ctypes.POINTER(ctypes.c_float)),] )

voxel_sample_triquadratic = _rpythonic_function_(		"voxel_sample_triquadratic", ctypes.c_float, [
	("data",		ctypes.POINTER(ctypes.c_float)),
	("res",		ctypes.POINTER(ctypes.c_int)),
	("co",		ctypes.POINTER(ctypes.c_float)),] )

voxel_sample_tricubic = _rpythonic_function_(		"voxel_sample_tricubic", ctypes.c_float, [
	("data",		ctypes.POINTER(ctypes.c_float)),
	("res",		ctypes.POINTER(ctypes.c_int)),
	("co",		ctypes.POINTER(ctypes.c_float)),
	("bspline",		ctypes.c_int),] )

BLO_read_from_file = _rpythonic_function_(		"BLO_read_from_file", ctypes.POINTER(BlendFileData), [
	("filepath",		ctypes.POINTER(ctypes.c_char)),
	("reports",		ctypes.POINTER(ReportList)),] )

BLO_read_from_memory = _rpythonic_function_(		"BLO_read_from_memory", ctypes.POINTER(BlendFileData), [
	("mem",		ctypes.POINTER(ctypes.c_void_p)),
	("memsize",		ctypes.c_int),
	("reports",		ctypes.POINTER(ReportList)),] )

BLO_read_from_memfile = _rpythonic_function_(		"BLO_read_from_memfile", ctypes.POINTER(BlendFileData), [
	("oldmain",		ctypes.POINTER(Main)),
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("memfile",		ctypes.POINTER(MemFile)),
	("reports",		ctypes.POINTER(ReportList)),] )

BLO_blendfiledata_free = _rpythonic_function_(		"BLO_blendfiledata_free", ctypes.c_void_p, [
	("bfd",		ctypes.POINTER(BlendFileData)),] )

BLO_blendhandle_from_file = _rpythonic_function_(		"BLO_blendhandle_from_file", ctypes.POINTER(BlendHandle), [
	("file",		ctypes.POINTER(ctypes.c_char)),
	("reports",		ctypes.POINTER(ReportList)),] )

BLO_blendhandle_from_memory = _rpythonic_function_(		"BLO_blendhandle_from_memory", ctypes.POINTER(BlendHandle), [
	("mem",		ctypes.POINTER(ctypes.c_void_p)),
	("memsize",		ctypes.c_int),] )

BLO_blendhandle_get_datablock_names = _rpythonic_function_(		"BLO_blendhandle_get_datablock_names", ctypes.POINTER(LinkNode), [
	("bh",		ctypes.POINTER(BlendHandle)),
	("ofblocktype",		ctypes.c_int),
	("tot_names",		ctypes.POINTER(ctypes.c_int)),] )

BLO_blendhandle_get_previews = _rpythonic_function_(		"BLO_blendhandle_get_previews", ctypes.POINTER(LinkNode), [
	("bh",		ctypes.POINTER(BlendHandle)),
	("ofblocktype",		ctypes.c_int),
	("tot_prev",		ctypes.POINTER(ctypes.c_int)),] )

BLO_blendhandle_get_linkable_groups = _rpythonic_function_(		"BLO_blendhandle_get_linkable_groups", ctypes.POINTER(LinkNode), [
	("bh",		ctypes.POINTER(BlendHandle)),] )

BLO_blendhandle_close = _rpythonic_function_(		"BLO_blendhandle_close", ctypes.c_void_p, [
	("bh",		ctypes.POINTER(BlendHandle)),] )

BLO_has_bfile_extension = _rpythonic_function_(		"BLO_has_bfile_extension", ctypes.c_int, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

BLO_is_a_library = _rpythonic_function_(		"BLO_is_a_library", ctypes.c_int, [
	("path",		ctypes.POINTER(ctypes.c_char)),
	("dir",		ctypes.POINTER(ctypes.c_char)),
	("group",		ctypes.POINTER(ctypes.c_char)),] )

BLO_library_append_begin = _rpythonic_function_(		"BLO_library_append_begin", ctypes.POINTER(Main), [
	("mainvar",		ctypes.POINTER(Main)),
	("bh",		ctypes.POINTER(ctypes.POINTER(BlendHandle))),
	("filepath",		ctypes.POINTER(ctypes.c_char)),] )

BLO_library_append_named_part = _rpythonic_function_(		"BLO_library_append_named_part", ctypes.POINTER(ID), [
	("mainl",		ctypes.POINTER(Main)),
	("bh",		ctypes.POINTER(ctypes.POINTER(BlendHandle))),
	("idname",		ctypes.POINTER(ctypes.c_char)),
	("idcode",		ctypes.c_int),] )

BLO_library_append_named_part_ex = _rpythonic_function_(		"BLO_library_append_named_part_ex", ctypes.POINTER(ID), [
	("C",		ctypes.POINTER(bContext)),
	("mainl",		ctypes.POINTER(Main)),
	("bh",		ctypes.POINTER(ctypes.POINTER(BlendHandle))),
	("idname",		ctypes.POINTER(ctypes.c_char)),
	("idcode",		ctypes.c_int),
	("flag",		ctypes.c_short),] )

BLO_library_append_end = _rpythonic_function_(		"BLO_library_append_end", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("mainl",		ctypes.POINTER(Main)),
	("bh",		ctypes.POINTER(ctypes.POINTER(BlendHandle))),
	("idcode",		ctypes.c_int),
	("flag",		ctypes.c_short),] )

BLO_library_read_struct = _rpythonic_function_(		"BLO_library_read_struct", ctypes.POINTER(ctypes.c_void_p), [
	("fd",		ctypes.POINTER(FileData)),
	("bh",		ctypes.POINTER(BHead)),
	("blockname",		ctypes.POINTER(ctypes.c_char)),] )

blo_read_blendafterruntime = _rpythonic_function_(		"blo_read_blendafterruntime", ctypes.POINTER(BlendFileData), [
	("file",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("actualsize",		ctypes.c_int),
	("reports",		ctypes.POINTER(ReportList)),] )

BLO_write_file = _rpythonic_function_(		"BLO_write_file", ctypes.c_int, [
	("mainvar",		ctypes.POINTER(Main)),
	("filepath",		ctypes.POINTER(ctypes.c_char)),
	("write_flags",		ctypes.c_int),
	("reports",		ctypes.POINTER(ReportList)),
	("thumb",		ctypes.POINTER(ctypes.c_int)),] )

BLO_write_file_mem = _rpythonic_function_(		"BLO_write_file_mem", ctypes.c_int, [
	("mainvar",		ctypes.POINTER(Main)),
	("compare",		ctypes.POINTER(MemFile)),
	("current",		ctypes.POINTER(MemFile)),
	("write_flags",		ctypes.c_int),] )

BLO_write_runtime = _rpythonic_function_(		"BLO_write_runtime", ctypes.c_int, [
	("mainvar",		ctypes.POINTER(Main)),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("exename",		ctypes.POINTER(ctypes.c_char)),
	("reports",		ctypes.POINTER(ReportList)),] )

BIK_initialize_tree = _rpythonic_function_(		"BIK_initialize_tree", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("ob",		ctypes.POINTER(Object)),
	("ctime",		ctypes.c_float),] )

BIK_execute_tree = _rpythonic_function_(		"BIK_execute_tree", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("ob",		ctypes.POINTER(Object)),
	("pchan",		ctypes.POINTER(bPoseChannel)),
	("ctime",		ctypes.c_float),] )

BIK_release_tree = _rpythonic_function_(		"BIK_release_tree", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("ob",		ctypes.POINTER(Object)),
	("ctime",		ctypes.c_float),] )

BIK_clear_data = _rpythonic_function_(		"BIK_clear_data", ctypes.c_void_p, [
	("pose",		ctypes.POINTER(bPose)),] )

BIK_clear_cache = _rpythonic_function_(		"BIK_clear_cache", ctypes.c_void_p, [
	("pose",		ctypes.POINTER(bPose)),] )

BIK_update_param = _rpythonic_function_(		"BIK_update_param", ctypes.c_void_p, [
	("pose",		ctypes.POINTER(bPose)),] )

BIK_test_constraint = _rpythonic_function_(		"BIK_test_constraint", ctypes.c_void_p, [
	("ob",		ctypes.POINTER(Object)),
	("cons",		ctypes.POINTER(bConstraint)),] )

BIK_get_constraint_param = _rpythonic_function_(		"BIK_get_constraint_param", ctypes.c_int, [
	("pose",		ctypes.POINTER(bPose)),
	("cons",		ctypes.POINTER(bConstraint)),
	("C_id",		ctypes.c_int),
	("value",		ctypes.POINTER(BIK_ParamValue)),] )

BIK_get_channel_param = _rpythonic_function_(		"BIK_get_channel_param", ctypes.c_int, [
	("pose",		ctypes.POINTER(bPose)),
	("pchan",		ctypes.POINTER(bPoseChannel)),
	("C_id",		ctypes.c_int),
	("value",		ctypes.POINTER(BIK_ParamValue)),] )

BIK_get_solver_param = _rpythonic_function_(		"BIK_get_solver_param", ctypes.c_int, [
	("pose",		ctypes.POINTER(bPose)),
	("pchan",		ctypes.POINTER(bPoseChannel)),
	("C_id",		ctypes.c_int),
	("value",		ctypes.POINTER(BIK_ParamValue)),] )

GHOST_TimerProcPtr = _rpythonic_function_(		"GHOST_TimerProcPtr", ctypes.c_void_p, [
	("task",		ctypes.POINTER(GHOST_TimerTaskHandle__)),
	("time",		ctypes.c_ulonglong),] )

GHOST_EventCallbackProcPtr = _rpythonic_function_(		"GHOST_EventCallbackProcPtr", ctypes.c_int, [
	("event",		ctypes.POINTER(GHOST_EventHandle__)),
	("userdata",		ctypes.POINTER(ctypes.c_void_p)),] )

GHOST_CreateSystem = _rpythonic_function_(		"GHOST_CreateSystem", ctypes.POINTER(GHOST_SystemHandle__), [] )

GHOST_DisposeSystem = _rpythonic_function_(		"GHOST_DisposeSystem", ctypes.c_int, [
	("systemhandle",		ctypes.POINTER(GHOST_SystemHandle__)),] )

GHOST_CreateEventConsumer = _rpythonic_function_(		"GHOST_CreateEventConsumer", ctypes.POINTER(GHOST_EventConsumerHandle__), [
	("eventCallback",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(GHOST_EventHandle__),ctypes.POINTER(ctypes.c_void_p),)),
	("userdata",		ctypes.POINTER(ctypes.c_void_p)),] )

GHOST_DisposeEventConsumer = _rpythonic_function_(		"GHOST_DisposeEventConsumer", ctypes.c_int, [
	("consumerhandle",		ctypes.POINTER(GHOST_EventConsumerHandle__)),] )

GHOST_GetMilliSeconds = _rpythonic_function_(		"GHOST_GetMilliSeconds", ctypes.c_ulonglong, [
	("systemhandle",		ctypes.POINTER(GHOST_SystemHandle__)),] )

GHOST_InstallTimer = _rpythonic_function_(		"GHOST_InstallTimer", ctypes.POINTER(GHOST_TimerTaskHandle__), [
	("systemhandle",		ctypes.POINTER(GHOST_SystemHandle__)),
	("delay",		ctypes.c_ulonglong),
	("interval",		ctypes.c_ulonglong),
	("timerProc",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(GHOST_TimerTaskHandle__),ctypes.c_ulonglong,)),
	("userData",		ctypes.POINTER(ctypes.c_void_p)),] )

GHOST_RemoveTimer = _rpythonic_function_(		"GHOST_RemoveTimer", ctypes.c_int, [
	("systemhandle",		ctypes.POINTER(GHOST_SystemHandle__)),
	("timertaskhandle",		ctypes.POINTER(GHOST_TimerTaskHandle__)),] )

GHOST_GetNumDisplays = _rpythonic_function_(		"GHOST_GetNumDisplays", ctypes.c_ubyte, [
	("systemhandle",		ctypes.POINTER(GHOST_SystemHandle__)),] )

GHOST_GetMainDisplayDimensions = _rpythonic_function_(		"GHOST_GetMainDisplayDimensions", ctypes.c_void_p, [
	("systemhandle",		ctypes.POINTER(GHOST_SystemHandle__)),
	("width",		ctypes.POINTER(ctypes.c_uint)),
	("height",		ctypes.POINTER(ctypes.c_uint)),] )

GHOST_CreateWindow = _rpythonic_function_(		"GHOST_CreateWindow", ctypes.POINTER(GHOST_WindowHandle__), [
	("systemhandle",		ctypes.POINTER(GHOST_SystemHandle__)),
	("title",		ctypes.POINTER(ctypes.c_char)),
	("left",		ctypes.c_int),
	("top",		ctypes.c_int),
	("width",		ctypes.c_uint),
	("height",		ctypes.c_uint),
	("state",		ctypes.c_int),
	("C_type",		ctypes.c_int),
	("stereoVisual",		ctypes.c_int),
	("numOfAASamples",		ctypes.c_ushort),] )

GHOST_GetWindowUserData = _rpythonic_function_(		"GHOST_GetWindowUserData", ctypes.POINTER(ctypes.c_void_p), [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),] )

GHOST_SetWindowUserData = _rpythonic_function_(		"GHOST_SetWindowUserData", ctypes.c_void_p, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),
	("userdata",		ctypes.POINTER(ctypes.c_void_p)),] )

GHOST_DisposeWindow = _rpythonic_function_(		"GHOST_DisposeWindow", ctypes.c_int, [
	("systemhandle",		ctypes.POINTER(GHOST_SystemHandle__)),
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),] )

GHOST_ValidWindow = _rpythonic_function_(		"GHOST_ValidWindow", ctypes.c_int, [
	("systemhandle",		ctypes.POINTER(GHOST_SystemHandle__)),
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),] )

GHOST_BeginFullScreen = _rpythonic_function_(		"GHOST_BeginFullScreen", ctypes.POINTER(GHOST_WindowHandle__), [
	("systemhandle",		ctypes.POINTER(GHOST_SystemHandle__)),
	("setting",		ctypes.POINTER(GHOST_DisplaySetting)),
	("stereoVisual",		ctypes.c_int),] )

GHOST_EndFullScreen = _rpythonic_function_(		"GHOST_EndFullScreen", ctypes.c_int, [
	("systemhandle",		ctypes.POINTER(GHOST_SystemHandle__)),] )

GHOST_GetFullScreen = _rpythonic_function_(		"GHOST_GetFullScreen", ctypes.c_int, [
	("systemhandle",		ctypes.POINTER(GHOST_SystemHandle__)),] )

GHOST_ProcessEvents = _rpythonic_function_(		"GHOST_ProcessEvents", ctypes.c_int, [
	("systemhandle",		ctypes.POINTER(GHOST_SystemHandle__)),
	("waitForEvent",		ctypes.c_int),] )

GHOST_DispatchEvents = _rpythonic_function_(		"GHOST_DispatchEvents", ctypes.c_int, [
	("systemhandle",		ctypes.POINTER(GHOST_SystemHandle__)),] )

GHOST_AddEventConsumer = _rpythonic_function_(		"GHOST_AddEventConsumer", ctypes.c_int, [
	("systemhandle",		ctypes.POINTER(GHOST_SystemHandle__)),
	("consumerhandle",		ctypes.POINTER(GHOST_EventConsumerHandle__)),] )

GHOST_RemoveEventConsumer = _rpythonic_function_(		"GHOST_RemoveEventConsumer", ctypes.c_int, [
	("systemhandle",		ctypes.POINTER(GHOST_SystemHandle__)),
	("consumerhandle",		ctypes.POINTER(GHOST_EventConsumerHandle__)),] )

GHOST_SetProgressBar = _rpythonic_function_(		"GHOST_SetProgressBar", ctypes.c_int, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),
	("progress",		ctypes.c_float),] )

GHOST_EndProgressBar = _rpythonic_function_(		"GHOST_EndProgressBar", ctypes.c_int, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),] )

GHOST_GetCursorShape = _rpythonic_function_(		"GHOST_GetCursorShape", ctypes.c_int, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),] )

GHOST_SetCursorShape = _rpythonic_function_(		"GHOST_SetCursorShape", ctypes.c_int, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),
	("cursorshape",		ctypes.c_int),] )

GHOST_SetCustomCursorShape = _rpythonic_function_(		"GHOST_SetCustomCursorShape", ctypes.c_int, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),
	("bitmap",		( ctypes.c_ubyte * 16 )),
	("mask",		( ctypes.c_ubyte * 16 )),
	("hotX",		ctypes.c_int),
	("hotY",		ctypes.c_int),] )

GHOST_SetCustomCursorShapeEx = _rpythonic_function_(		"GHOST_SetCustomCursorShapeEx", ctypes.c_int, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),
	("bitmap",		ctypes.POINTER(ctypes.c_ubyte)),
	("mask",		ctypes.POINTER(ctypes.c_ubyte)),
	("sizex",		ctypes.c_int),
	("sizey",		ctypes.c_int),
	("hotX",		ctypes.c_int),
	("hotY",		ctypes.c_int),
	("fg_color",		ctypes.c_int),
	("bg_color",		ctypes.c_int),] )

GHOST_GetCursorVisibility = _rpythonic_function_(		"GHOST_GetCursorVisibility", ctypes.c_int, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),] )

GHOST_SetCursorVisibility = _rpythonic_function_(		"GHOST_SetCursorVisibility", ctypes.c_int, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),
	("visible",		ctypes.c_int),] )

GHOST_GetCursorPosition = _rpythonic_function_(		"GHOST_GetCursorPosition", ctypes.c_int, [
	("systemhandle",		ctypes.POINTER(GHOST_SystemHandle__)),
	("x",		ctypes.POINTER(ctypes.c_int)),
	("y",		ctypes.POINTER(ctypes.c_int)),] )

GHOST_SetCursorPosition = _rpythonic_function_(		"GHOST_SetCursorPosition", ctypes.c_int, [
	("systemhandle",		ctypes.POINTER(GHOST_SystemHandle__)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

GHOST_SetCursorGrab = _rpythonic_function_(		"GHOST_SetCursorGrab", ctypes.c_int, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),
	("mode",		ctypes.c_int),
	("bounds",		ctypes.POINTER(ctypes.c_int)),] )

GHOST_GetModifierKeyState = _rpythonic_function_(		"GHOST_GetModifierKeyState", ctypes.c_int, [
	("systemhandle",		ctypes.POINTER(GHOST_SystemHandle__)),
	("mask",		ctypes.c_int),
	("isDown",		ctypes.POINTER(ctypes.c_int)),] )

GHOST_GetButtonState = _rpythonic_function_(		"GHOST_GetButtonState", ctypes.c_int, [
	("systemhandle",		ctypes.POINTER(GHOST_SystemHandle__)),
	("mask",		ctypes.c_int),
	("isDown",		ctypes.POINTER(ctypes.c_int)),] )

GHOST_setAcceptDragOperation = _rpythonic_function_(		"GHOST_setAcceptDragOperation", ctypes.c_void_p, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),
	("canAccept",		ctypes.c_char),] )

GHOST_GetEventType = _rpythonic_function_(		"GHOST_GetEventType", ctypes.c_int, [
	("eventhandle",		ctypes.POINTER(GHOST_EventHandle__)),] )

GHOST_GetEventTime = _rpythonic_function_(		"GHOST_GetEventTime", ctypes.c_ulonglong, [
	("eventhandle",		ctypes.POINTER(GHOST_EventHandle__)),] )

GHOST_GetEventWindow = _rpythonic_function_(		"GHOST_GetEventWindow", ctypes.POINTER(GHOST_WindowHandle__), [
	("eventhandle",		ctypes.POINTER(GHOST_EventHandle__)),] )

GHOST_GetEventData = _rpythonic_function_(		"GHOST_GetEventData", ctypes.POINTER(ctypes.c_void_p), [
	("eventhandle",		ctypes.POINTER(GHOST_EventHandle__)),] )

GHOST_GetTimerProc = _rpythonic_function_(		"GHOST_GetTimerProc", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(GHOST_TimerTaskHandle__),ctypes.c_ulonglong,), [
	("timertaskhandle",		ctypes.POINTER(GHOST_TimerTaskHandle__)),] )

GHOST_SetTimerProc = _rpythonic_function_(		"GHOST_SetTimerProc", ctypes.c_void_p, [
	("timertaskhandle",		ctypes.POINTER(GHOST_TimerTaskHandle__)),
	("timerProc",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(GHOST_TimerTaskHandle__),ctypes.c_ulonglong,)),] )

GHOST_GetTimerTaskUserData = _rpythonic_function_(		"GHOST_GetTimerTaskUserData", ctypes.POINTER(ctypes.c_void_p), [
	("timertaskhandle",		ctypes.POINTER(GHOST_TimerTaskHandle__)),] )

GHOST_SetTimerTaskUserData = _rpythonic_function_(		"GHOST_SetTimerTaskUserData", ctypes.c_void_p, [
	("timertaskhandle",		ctypes.POINTER(GHOST_TimerTaskHandle__)),
	("userData",		ctypes.POINTER(ctypes.c_void_p)),] )

GHOST_GetValid = _rpythonic_function_(		"GHOST_GetValid", ctypes.c_int, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),] )

GHOST_GetDrawingContextType = _rpythonic_function_(		"GHOST_GetDrawingContextType", ctypes.c_int, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),] )

GHOST_SetDrawingContextType = _rpythonic_function_(		"GHOST_SetDrawingContextType", ctypes.c_int, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),
	("C_type",		ctypes.c_int),] )

GHOST_SetTitle = _rpythonic_function_(		"GHOST_SetTitle", ctypes.c_void_p, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),
	("title",		ctypes.POINTER(ctypes.c_char)),] )

GHOST_GetTitle = _rpythonic_function_(		"GHOST_GetTitle", ctypes.POINTER(ctypes.c_char), [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),] )

GHOST_GetWindowBounds = _rpythonic_function_(		"GHOST_GetWindowBounds", ctypes.POINTER(GHOST_RectangleHandle__), [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),] )

GHOST_GetClientBounds = _rpythonic_function_(		"GHOST_GetClientBounds", ctypes.POINTER(GHOST_RectangleHandle__), [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),] )

GHOST_DisposeRectangle = _rpythonic_function_(		"GHOST_DisposeRectangle", ctypes.c_void_p, [
	("rectanglehandle",		ctypes.POINTER(GHOST_RectangleHandle__)),] )

GHOST_SetClientWidth = _rpythonic_function_(		"GHOST_SetClientWidth", ctypes.c_int, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),
	("width",		ctypes.c_uint),] )

GHOST_SetClientHeight = _rpythonic_function_(		"GHOST_SetClientHeight", ctypes.c_int, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),
	("height",		ctypes.c_uint),] )

GHOST_SetClientSize = _rpythonic_function_(		"GHOST_SetClientSize", ctypes.c_int, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),
	("width",		ctypes.c_uint),
	("height",		ctypes.c_uint),] )

GHOST_ScreenToClient = _rpythonic_function_(		"GHOST_ScreenToClient", ctypes.c_void_p, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),
	("inX",		ctypes.c_int),
	("inY",		ctypes.c_int),
	("outX",		ctypes.POINTER(ctypes.c_int)),
	("outY",		ctypes.POINTER(ctypes.c_int)),] )

GHOST_ClientToScreen = _rpythonic_function_(		"GHOST_ClientToScreen", ctypes.c_void_p, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),
	("inX",		ctypes.c_int),
	("inY",		ctypes.c_int),
	("outX",		ctypes.POINTER(ctypes.c_int)),
	("outY",		ctypes.POINTER(ctypes.c_int)),] )

GHOST_GetWindowState = _rpythonic_function_(		"GHOST_GetWindowState", ctypes.c_int, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),] )

GHOST_SetWindowState = _rpythonic_function_(		"GHOST_SetWindowState", ctypes.c_int, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),
	("state",		ctypes.c_int),] )

GHOST_SetWindowModifiedState = _rpythonic_function_(		"GHOST_SetWindowModifiedState", ctypes.c_int, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),
	("isUnsavedChanges",		ctypes.c_ubyte),] )

GHOST_SetWindowOrder = _rpythonic_function_(		"GHOST_SetWindowOrder", ctypes.c_int, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),
	("order",		ctypes.c_int),] )

GHOST_SwapWindowBuffers = _rpythonic_function_(		"GHOST_SwapWindowBuffers", ctypes.c_int, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),] )

GHOST_ActivateWindowDrawingContext = _rpythonic_function_(		"GHOST_ActivateWindowDrawingContext", ctypes.c_int, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),] )

GHOST_InvalidateWindow = _rpythonic_function_(		"GHOST_InvalidateWindow", ctypes.c_int, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),] )

GHOST_GetTabletData = _rpythonic_function_(		"GHOST_GetTabletData", ctypes.POINTER(GHOST_TabletData), [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),] )

GHOST_GetWidthRectangle = _rpythonic_function_(		"GHOST_GetWidthRectangle", ctypes.c_int, [
	("rectanglehandle",		ctypes.POINTER(GHOST_RectangleHandle__)),] )

GHOST_GetHeightRectangle = _rpythonic_function_(		"GHOST_GetHeightRectangle", ctypes.c_int, [
	("rectanglehandle",		ctypes.POINTER(GHOST_RectangleHandle__)),] )

GHOST_GetRectangle = _rpythonic_function_(		"GHOST_GetRectangle", ctypes.c_void_p, [
	("rectanglehandle",		ctypes.POINTER(GHOST_RectangleHandle__)),
	("l",		ctypes.POINTER(ctypes.c_int)),
	("t",		ctypes.POINTER(ctypes.c_int)),
	("r",		ctypes.POINTER(ctypes.c_int)),
	("b",		ctypes.POINTER(ctypes.c_int)),] )

GHOST_SetRectangle = _rpythonic_function_(		"GHOST_SetRectangle", ctypes.c_void_p, [
	("rectanglehandle",		ctypes.POINTER(GHOST_RectangleHandle__)),
	("l",		ctypes.c_int),
	("t",		ctypes.c_int),
	("r",		ctypes.c_int),
	("b",		ctypes.c_int),] )

GHOST_IsEmptyRectangle = _rpythonic_function_(		"GHOST_IsEmptyRectangle", ctypes.c_int, [
	("rectanglehandle",		ctypes.POINTER(GHOST_RectangleHandle__)),] )

GHOST_IsValidRectangle = _rpythonic_function_(		"GHOST_IsValidRectangle", ctypes.c_int, [
	("rectanglehandle",		ctypes.POINTER(GHOST_RectangleHandle__)),] )

GHOST_InsetRectangle = _rpythonic_function_(		"GHOST_InsetRectangle", ctypes.c_void_p, [
	("rectanglehandle",		ctypes.POINTER(GHOST_RectangleHandle__)),
	("i",		ctypes.c_int),] )

GHOST_UnionRectangle = _rpythonic_function_(		"GHOST_UnionRectangle", ctypes.c_void_p, [
	("rectanglehandle",		ctypes.POINTER(GHOST_RectangleHandle__)),
	("anotherrectanglehandle",		ctypes.POINTER(GHOST_RectangleHandle__)),] )

GHOST_UnionPointRectangle = _rpythonic_function_(		"GHOST_UnionPointRectangle", ctypes.c_void_p, [
	("rectanglehandle",		ctypes.POINTER(GHOST_RectangleHandle__)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

GHOST_IsInsideRectangle = _rpythonic_function_(		"GHOST_IsInsideRectangle", ctypes.c_int, [
	("rectanglehandle",		ctypes.POINTER(GHOST_RectangleHandle__)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

GHOST_GetRectangleVisibility = _rpythonic_function_(		"GHOST_GetRectangleVisibility", ctypes.c_int, [
	("rectanglehandle",		ctypes.POINTER(GHOST_RectangleHandle__)),
	("anotherrectanglehandle",		ctypes.POINTER(GHOST_RectangleHandle__)),] )

GHOST_SetCenterRectangle = _rpythonic_function_(		"GHOST_SetCenterRectangle", ctypes.c_void_p, [
	("rectanglehandle",		ctypes.POINTER(GHOST_RectangleHandle__)),
	("cx",		ctypes.c_int),
	("cy",		ctypes.c_int),] )

GHOST_SetRectangleCenter = _rpythonic_function_(		"GHOST_SetRectangleCenter", ctypes.c_void_p, [
	("rectanglehandle",		ctypes.POINTER(GHOST_RectangleHandle__)),
	("cx",		ctypes.c_int),
	("cy",		ctypes.c_int),
	("w",		ctypes.c_int),
	("h",		ctypes.c_int),] )

GHOST_ClipRectangle = _rpythonic_function_(		"GHOST_ClipRectangle", ctypes.c_int, [
	("rectanglehandle",		ctypes.POINTER(GHOST_RectangleHandle__)),
	("anotherrectanglehandle",		ctypes.POINTER(GHOST_RectangleHandle__)),] )

GHOST_getClipboard = _rpythonic_function_(		"GHOST_getClipboard", ctypes.POINTER(ctypes.c_ubyte), [
	("selection",		ctypes.c_int),] )

GHOST_putClipboard = _rpythonic_function_(		"GHOST_putClipboard", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("selection",		ctypes.c_int),] )

GHOST_CreateSystemPaths = _rpythonic_function_(		"GHOST_CreateSystemPaths", ctypes.c_int, [] )

GHOST_toggleConsole = _rpythonic_function_(		"GHOST_toggleConsole", ctypes.c_int, [
	("action",		ctypes.c_int),] )

GHOST_DisposeSystemPaths = _rpythonic_function_(		"GHOST_DisposeSystemPaths", ctypes.c_int, [] )

GHOST_getSystemDir = _rpythonic_function_(		"GHOST_getSystemDir", ctypes.POINTER(ctypes.c_ubyte), [] )

GHOST_getUserDir = _rpythonic_function_(		"GHOST_getUserDir", ctypes.POINTER(ctypes.c_ubyte), [] )

GHOST_getBinaryDir = _rpythonic_function_(		"GHOST_getBinaryDir", ctypes.POINTER(ctypes.c_ubyte), [] )

GHOST_addToSystemRecentFiles = _rpythonic_function_(		"GHOST_addToSystemRecentFiles", ctypes.c_void_p, [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

plNewBulletSdk = _rpythonic_function_(		"plNewBulletSdk", ctypes.POINTER(plPhysicsSdkHandle__), [] )

plDeletePhysicsSdk = _rpythonic_function_(		"plDeletePhysicsSdk", ctypes.c_void_p, [
	("physicsSdk",		ctypes.POINTER(plPhysicsSdkHandle__)),] )

btBroadphaseCallback = _rpythonic_function_(		"btBroadphaseCallback", ctypes.c_void_p, [
	("clientData",		ctypes.POINTER(ctypes.c_void_p)),
	("object1",		ctypes.POINTER(ctypes.c_void_p)),
	("object2",		ctypes.POINTER(ctypes.c_void_p)),] )

plCreateSapBroadphase = _rpythonic_function_(		"plCreateSapBroadphase", ctypes.POINTER(plCollisionBroadphaseHandle__), [
	("beginCallback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("endCallback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

plDestroyBroadphase = _rpythonic_function_(		"plDestroyBroadphase", ctypes.c_void_p, [
	("bp",		ctypes.POINTER(plCollisionBroadphaseHandle__)),] )

plCreateProxy = _rpythonic_function_(		"plCreateProxy", ctypes.POINTER(plBroadphaseProxyHandle__), [
	("bp",		ctypes.POINTER(plCollisionBroadphaseHandle__)),
	("clientData",		ctypes.POINTER(ctypes.c_void_p)),
	("minX",		ctypes.c_float),
	("minY",		ctypes.c_float),
	("minZ",		ctypes.c_float),
	("maxX",		ctypes.c_float),
	("maxY",		ctypes.c_float),
	("maxZ",		ctypes.c_float),] )

plDestroyProxy = _rpythonic_function_(		"plDestroyProxy", ctypes.c_void_p, [
	("bp",		ctypes.POINTER(plCollisionBroadphaseHandle__)),
	("proxyHandle",		ctypes.POINTER(plBroadphaseProxyHandle__)),] )

plSetBoundingBox = _rpythonic_function_(		"plSetBoundingBox", ctypes.c_void_p, [
	("proxyHandle",		ctypes.POINTER(plBroadphaseProxyHandle__)),
	("minX",		ctypes.c_float),
	("minY",		ctypes.c_float),
	("minZ",		ctypes.c_float),
	("maxX",		ctypes.c_float),
	("maxY",		ctypes.c_float),
	("maxZ",		ctypes.c_float),] )

plCreateCollisionWorld = _rpythonic_function_(		"plCreateCollisionWorld", ctypes.POINTER(plCollisionWorldHandle__), [
	("physicsSdk",		ctypes.POINTER(plPhysicsSdkHandle__)),] )

plCreateDynamicsWorld = _rpythonic_function_(		"plCreateDynamicsWorld", ctypes.POINTER(plDynamicsWorldHandle__), [
	("physicsSdk",		ctypes.POINTER(plPhysicsSdkHandle__)),] )

plDeleteDynamicsWorld = _rpythonic_function_(		"plDeleteDynamicsWorld", ctypes.c_void_p, [
	("world",		ctypes.POINTER(plDynamicsWorldHandle__)),] )

plStepSimulation = _rpythonic_function_(		"plStepSimulation", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("timeStep",		ctypes.c_float),] )

plAddRigidBody = _rpythonic_function_(		"plAddRigidBody", ctypes.c_void_p, [
	("world",		ctypes.POINTER(plDynamicsWorldHandle__)),
	("C_object",		ctypes.POINTER(plRigidBodyHandle__)),] )

plRemoveRigidBody = _rpythonic_function_(		"plRemoveRigidBody", ctypes.c_void_p, [
	("world",		ctypes.POINTER(plDynamicsWorldHandle__)),
	("C_object",		ctypes.POINTER(plRigidBodyHandle__)),] )

plCreateRigidBody = _rpythonic_function_(		"plCreateRigidBody", ctypes.POINTER(plRigidBodyHandle__), [
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("mass",		ctypes.c_float),
	("cshape",		ctypes.POINTER(plCollisionShapeHandle__)),] )

plDeleteRigidBody = _rpythonic_function_(		"plDeleteRigidBody", ctypes.c_void_p, [
	("body",		ctypes.POINTER(plRigidBodyHandle__)),] )

plNewSphereShape = _rpythonic_function_(		"plNewSphereShape", ctypes.POINTER(plCollisionShapeHandle__), [
	("radius",		ctypes.c_float),] )

plNewBoxShape = _rpythonic_function_(		"plNewBoxShape", ctypes.POINTER(plCollisionShapeHandle__), [
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

plNewCapsuleShape = _rpythonic_function_(		"plNewCapsuleShape", ctypes.POINTER(plCollisionShapeHandle__), [
	("radius",		ctypes.c_float),
	("height",		ctypes.c_float),] )

plNewConeShape = _rpythonic_function_(		"plNewConeShape", ctypes.POINTER(plCollisionShapeHandle__), [
	("radius",		ctypes.c_float),
	("height",		ctypes.c_float),] )

plNewCylinderShape = _rpythonic_function_(		"plNewCylinderShape", ctypes.POINTER(plCollisionShapeHandle__), [
	("radius",		ctypes.c_float),
	("height",		ctypes.c_float),] )

plNewCompoundShape = _rpythonic_function_(		"plNewCompoundShape", ctypes.POINTER(plCollisionShapeHandle__), [] )

plAddChildShape = _rpythonic_function_(		"plAddChildShape", ctypes.c_void_p, [
	("compoundShape",		ctypes.POINTER(plCollisionShapeHandle__)),
	("childShape",		ctypes.POINTER(plCollisionShapeHandle__)),
	("childPos",		( ctypes.c_float * 3 )),
	("childOrn",		( ctypes.c_float * 4 )),] )

plDeleteShape = _rpythonic_function_(		"plDeleteShape", ctypes.c_void_p, [
	("shape",		ctypes.POINTER(plCollisionShapeHandle__)),] )

plNewConvexHullShape = _rpythonic_function_(		"plNewConvexHullShape", ctypes.POINTER(plCollisionShapeHandle__), [] )

plAddVertex = _rpythonic_function_(		"plAddVertex", ctypes.c_void_p, [
	("convexHull",		ctypes.POINTER(plCollisionShapeHandle__)),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

plNewMeshInterface = _rpythonic_function_(		"plNewMeshInterface", ctypes.POINTER(plMeshInterfaceHandle__), [] )

plAddTriangle = _rpythonic_function_(		"plAddTriangle", ctypes.c_void_p, [
	("meshHandle",		ctypes.POINTER(plMeshInterfaceHandle__)),
	("v0",		( ctypes.c_float * 3 )),
	("v1",		( ctypes.c_float * 3 )),
	("v2",		( ctypes.c_float * 3 )),] )

plNewStaticTriangleMeshShape = _rpythonic_function_(		"plNewStaticTriangleMeshShape", ctypes.POINTER(plCollisionShapeHandle__), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

plSetScaling = _rpythonic_function_(		"plSetScaling", ctypes.c_void_p, [
	("shape",		ctypes.POINTER(plCollisionShapeHandle__)),
	("scaling",		( ctypes.c_float * 3 )),] )

plGetOpenGLMatrix = _rpythonic_function_(		"plGetOpenGLMatrix", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(plRigidBodyHandle__)),
	("matrix",		ctypes.POINTER(ctypes.c_float)),] )

plGetPosition = _rpythonic_function_(		"plGetPosition", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(plRigidBodyHandle__)),
	("position",		( ctypes.c_float * 3 )),] )

plGetOrientation = _rpythonic_function_(		"plGetOrientation", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(plRigidBodyHandle__)),
	("orientation",		( ctypes.c_float * 4 )),] )

plSetPosition = _rpythonic_function_(		"plSetPosition", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(plRigidBodyHandle__)),
	("position",		( ctypes.c_float * 3 )),] )

plSetOrientation = _rpythonic_function_(		"plSetOrientation", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(plRigidBodyHandle__)),
	("orientation",		( ctypes.c_float * 4 )),] )

plSetEuler = _rpythonic_function_(		"plSetEuler", ctypes.c_void_p, [
	("yaw",		ctypes.c_float),
	("pitch",		ctypes.c_float),
	("roll",		ctypes.c_float),
	("orient",		( ctypes.c_float * 4 )),] )

plSetOpenGLMatrix = _rpythonic_function_(		"plSetOpenGLMatrix", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(plRigidBodyHandle__)),
	("matrix",		ctypes.POINTER(ctypes.c_float)),] )

plRayCast = _rpythonic_function_(		"plRayCast", ctypes.c_int, [
	("world",		ctypes.POINTER(plDynamicsWorldHandle__)),
	("rayStart",		( ctypes.c_float * 3 )),
	("rayEnd",		( ctypes.c_float * 3 )),
	("res",		plRayCastResult),] )

plNearestPoints = _rpythonic_function_(		"plNearestPoints", ctypes.c_double, [
	("p1",		( ctypes.c_float * 3 )),
	("p2",		( ctypes.c_float * 3 )),
	("p3",		( ctypes.c_float * 3 )),
	("q1",		( ctypes.c_float * 3 )),
	("q2",		( ctypes.c_float * 3 )),
	("q3",		( ctypes.c_float * 3 )),
	("pa",		ctypes.POINTER(ctypes.c_float)),
	("pb",		ctypes.POINTER(ctypes.c_float)),
	("normal",		( ctypes.c_float * 3 )),] )

Action_fcurves_begin = _rpythonic_function_(		"Action_fcurves_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Action_fcurves_next = _rpythonic_function_(		"Action_fcurves_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Action_fcurves_end = _rpythonic_function_(		"Action_fcurves_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Action_frame_range_get = _rpythonic_function_(		"Action_frame_range_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 2 )),] )

Action_groups_begin = _rpythonic_function_(		"Action_groups_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Action_groups_next = _rpythonic_function_(		"Action_groups_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Action_groups_end = _rpythonic_function_(		"Action_groups_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Action_id_root_get = _rpythonic_function_(		"Action_id_root_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Action_pose_markers_begin = _rpythonic_function_(		"Action_pose_markers_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Action_pose_markers_next = _rpythonic_function_(		"Action_pose_markers_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Action_pose_markers_end = _rpythonic_function_(		"Action_pose_markers_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

ActionActuator_action_get = _rpythonic_function_(		"ActionActuator_action_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ActionActuator_play_mode_get = _rpythonic_function_(		"ActionActuator_play_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ActionActuator_use_additive_get = _rpythonic_function_(		"ActionActuator_use_additive_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ActionActuator_frame_blend_in_get = _rpythonic_function_(		"ActionActuator_frame_blend_in_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ActionActuator_apply_to_children_get = _rpythonic_function_(		"ActionActuator_apply_to_children_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ActionActuator_use_continue_last_frame_get = _rpythonic_function_(		"ActionActuator_use_continue_last_frame_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ActionActuator_frame_end_get = _rpythonic_function_(		"ActionActuator_frame_end_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ActionActuator_use_force_get = _rpythonic_function_(		"ActionActuator_use_force_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ActionActuator_frame_property_get = _rpythonic_function_(		"ActionActuator_frame_property_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ActionActuator_frame_property_length = _rpythonic_function_(		"ActionActuator_frame_property_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ActionActuator_use_local_get = _rpythonic_function_(		"ActionActuator_use_local_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ActionActuator_layer_get = _rpythonic_function_(		"ActionActuator_layer_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ActionActuator_layer_weight_get = _rpythonic_function_(		"ActionActuator_layer_weight_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ActionActuator_priority_get = _rpythonic_function_(		"ActionActuator_priority_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ActionActuator_property_get = _rpythonic_function_(		"ActionActuator_property_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ActionActuator_property_length = _rpythonic_function_(		"ActionActuator_property_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ActionActuator_frame_start_get = _rpythonic_function_(		"ActionActuator_frame_start_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ActionConstraint_action_get = _rpythonic_function_(		"ActionConstraint_action_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ActionConstraint_frame_end_get = _rpythonic_function_(		"ActionConstraint_frame_end_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ActionConstraint_max_get = _rpythonic_function_(		"ActionConstraint_max_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ActionConstraint_min_get = _rpythonic_function_(		"ActionConstraint_min_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ActionConstraint_frame_start_get = _rpythonic_function_(		"ActionConstraint_frame_start_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ActionConstraint_subtarget_get = _rpythonic_function_(		"ActionConstraint_subtarget_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ActionConstraint_subtarget_length = _rpythonic_function_(		"ActionConstraint_subtarget_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ActionConstraint_target_get = _rpythonic_function_(		"ActionConstraint_target_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ActionConstraint_transform_channel_get = _rpythonic_function_(		"ActionConstraint_transform_channel_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ActionFCurves_rna_type_get = _rpythonic_function_(		"ActionFCurves_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ActionGroup_rna_type_get = _rpythonic_function_(		"ActionGroup_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ActionGroup_name_get = _rpythonic_function_(		"ActionGroup_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ActionGroup_name_length = _rpythonic_function_(		"ActionGroup_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ActionGroup_channels_begin = _rpythonic_function_(		"ActionGroup_channels_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ActionGroup_channels_next = _rpythonic_function_(		"ActionGroup_channels_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

ActionGroup_channels_end = _rpythonic_function_(		"ActionGroup_channels_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

ActionGroup_custom_color_get = _rpythonic_function_(		"ActionGroup_custom_color_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ActionGroup_show_expanded_get = _rpythonic_function_(		"ActionGroup_show_expanded_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ActionGroup_lock_get = _rpythonic_function_(		"ActionGroup_lock_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ActionGroup_select_get = _rpythonic_function_(		"ActionGroup_select_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ActionGroups_rna_type_get = _rpythonic_function_(		"ActionGroups_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ActionPoseMarkers_rna_type_get = _rpythonic_function_(		"ActionPoseMarkers_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ActionPoseMarkers_active_get = _rpythonic_function_(		"ActionPoseMarkers_active_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ActionPoseMarkers_active_index_get = _rpythonic_function_(		"ActionPoseMarkers_active_index_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Actuator_rna_type_get = _rpythonic_function_(		"Actuator_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Actuator_name_get = _rpythonic_function_(		"Actuator_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

Actuator_name_length = _rpythonic_function_(		"Actuator_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Actuator_show_expanded_get = _rpythonic_function_(		"Actuator_show_expanded_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Actuator_pin_get = _rpythonic_function_(		"Actuator_pin_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Actuator_type_get = _rpythonic_function_(		"Actuator_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ActuatorSensor_actuator_get = _rpythonic_function_(		"ActuatorSensor_actuator_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ActuatorSensor_actuator_length = _rpythonic_function_(		"ActuatorSensor_actuator_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Addon_rna_type_get = _rpythonic_function_(		"Addon_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Addon_module_get = _rpythonic_function_(		"Addon_module_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

Addon_module_length = _rpythonic_function_(		"Addon_module_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Addons_rna_type_get = _rpythonic_function_(		"Addons_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AdjustmentSequence_animation_offset_end_get = _rpythonic_function_(		"AdjustmentSequence_animation_offset_end_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AdjustmentSequence_animation_offset_start_get = _rpythonic_function_(		"AdjustmentSequence_animation_offset_start_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AdjustmentSequence_color_balance_get = _rpythonic_function_(		"AdjustmentSequence_color_balance_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AdjustmentSequence_use_float_get = _rpythonic_function_(		"AdjustmentSequence_use_float_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AdjustmentSequence_crop_get = _rpythonic_function_(		"AdjustmentSequence_crop_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AdjustmentSequence_use_deinterlace_get = _rpythonic_function_(		"AdjustmentSequence_use_deinterlace_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AdjustmentSequence_use_reverse_frames_get = _rpythonic_function_(		"AdjustmentSequence_use_reverse_frames_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AdjustmentSequence_use_flip_x_get = _rpythonic_function_(		"AdjustmentSequence_use_flip_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AdjustmentSequence_use_flip_y_get = _rpythonic_function_(		"AdjustmentSequence_use_flip_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AdjustmentSequence_color_multiply_get = _rpythonic_function_(		"AdjustmentSequence_color_multiply_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AdjustmentSequence_use_premultiply_get = _rpythonic_function_(		"AdjustmentSequence_use_premultiply_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AdjustmentSequence_proxy_get = _rpythonic_function_(		"AdjustmentSequence_proxy_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AdjustmentSequence_use_proxy_custom_directory_get = _rpythonic_function_(		"AdjustmentSequence_use_proxy_custom_directory_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AdjustmentSequence_use_proxy_custom_file_get = _rpythonic_function_(		"AdjustmentSequence_use_proxy_custom_file_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AdjustmentSequence_color_saturation_get = _rpythonic_function_(		"AdjustmentSequence_color_saturation_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AdjustmentSequence_strobe_get = _rpythonic_function_(		"AdjustmentSequence_strobe_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AdjustmentSequence_transform_get = _rpythonic_function_(		"AdjustmentSequence_transform_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AdjustmentSequence_use_color_balance_get = _rpythonic_function_(		"AdjustmentSequence_use_color_balance_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AdjustmentSequence_use_crop_get = _rpythonic_function_(		"AdjustmentSequence_use_crop_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AdjustmentSequence_use_proxy_get = _rpythonic_function_(		"AdjustmentSequence_use_proxy_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AdjustmentSequence_use_translation_get = _rpythonic_function_(		"AdjustmentSequence_use_translation_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AnimData_rna_type_get = _rpythonic_function_(		"AnimData_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AnimData_action_get = _rpythonic_function_(		"AnimData_action_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AnimData_action_blend_type_get = _rpythonic_function_(		"AnimData_action_blend_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AnimData_action_extrapolation_get = _rpythonic_function_(		"AnimData_action_extrapolation_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AnimData_action_influence_get = _rpythonic_function_(		"AnimData_action_influence_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AnimData_drivers_begin = _rpythonic_function_(		"AnimData_drivers_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AnimData_drivers_next = _rpythonic_function_(		"AnimData_drivers_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

AnimData_drivers_end = _rpythonic_function_(		"AnimData_drivers_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

AnimData_use_nla_get = _rpythonic_function_(		"AnimData_use_nla_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AnimData_nla_tracks_begin = _rpythonic_function_(		"AnimData_nla_tracks_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AnimData_nla_tracks_next = _rpythonic_function_(		"AnimData_nla_tracks_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

AnimData_nla_tracks_end = _rpythonic_function_(		"AnimData_nla_tracks_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

AnimDataDrivers_rna_type_get = _rpythonic_function_(		"AnimDataDrivers_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AnimViz_rna_type_get = _rpythonic_function_(		"AnimViz_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AnimViz_motion_path_get = _rpythonic_function_(		"AnimViz_motion_path_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AnimViz_onion_skin_frames_get = _rpythonic_function_(		"AnimViz_onion_skin_frames_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AnimVizMotionPaths_rna_type_get = _rpythonic_function_(		"AnimVizMotionPaths_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AnimVizMotionPaths_frame_after_get = _rpythonic_function_(		"AnimVizMotionPaths_frame_after_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AnimVizMotionPaths_show_keyframe_action_all_get = _rpythonic_function_(		"AnimVizMotionPaths_show_keyframe_action_all_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AnimVizMotionPaths_bake_location_get = _rpythonic_function_(		"AnimVizMotionPaths_bake_location_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AnimVizMotionPaths_frame_before_get = _rpythonic_function_(		"AnimVizMotionPaths_frame_before_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AnimVizMotionPaths_frame_end_get = _rpythonic_function_(		"AnimVizMotionPaths_frame_end_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AnimVizMotionPaths_frame_step_get = _rpythonic_function_(		"AnimVizMotionPaths_frame_step_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AnimVizMotionPaths_show_keyframe_highlight_get = _rpythonic_function_(		"AnimVizMotionPaths_show_keyframe_highlight_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AnimVizMotionPaths_type_get = _rpythonic_function_(		"AnimVizMotionPaths_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AnimVizMotionPaths_show_frame_numbers_get = _rpythonic_function_(		"AnimVizMotionPaths_show_frame_numbers_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AnimVizMotionPaths_show_keyframe_numbers_get = _rpythonic_function_(		"AnimVizMotionPaths_show_keyframe_numbers_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AnimVizMotionPaths_frame_start_get = _rpythonic_function_(		"AnimVizMotionPaths_frame_start_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AnimVizOnionSkinning_rna_type_get = _rpythonic_function_(		"AnimVizOnionSkinning_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AnimVizOnionSkinning_frame_after_get = _rpythonic_function_(		"AnimVizOnionSkinning_frame_after_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AnimVizOnionSkinning_frame_before_get = _rpythonic_function_(		"AnimVizOnionSkinning_frame_before_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AnimVizOnionSkinning_frame_end_get = _rpythonic_function_(		"AnimVizOnionSkinning_frame_end_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AnimVizOnionSkinning_frame_step_get = _rpythonic_function_(		"AnimVizOnionSkinning_frame_step_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AnimVizOnionSkinning_show_only_selected_get = _rpythonic_function_(		"AnimVizOnionSkinning_show_only_selected_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AnimVizOnionSkinning_frame_start_get = _rpythonic_function_(		"AnimVizOnionSkinning_frame_start_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AnimVizOnionSkinning_type_get = _rpythonic_function_(		"AnimVizOnionSkinning_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AnyType_rna_type_get = _rpythonic_function_(		"AnyType_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Area_rna_type_get = _rpythonic_function_(		"Area_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Area_height_get = _rpythonic_function_(		"Area_height_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Area_regions_begin = _rpythonic_function_(		"Area_regions_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Area_regions_next = _rpythonic_function_(		"Area_regions_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Area_regions_end = _rpythonic_function_(		"Area_regions_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Area_show_menus_get = _rpythonic_function_(		"Area_show_menus_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Area_spaces_begin = _rpythonic_function_(		"Area_spaces_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Area_spaces_next = _rpythonic_function_(		"Area_spaces_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Area_spaces_end = _rpythonic_function_(		"Area_spaces_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Area_type_get = _rpythonic_function_(		"Area_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Area_width_get = _rpythonic_function_(		"Area_width_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AreaLamp_use_dither_get = _rpythonic_function_(		"AreaLamp_use_dither_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AreaLamp_gamma_get = _rpythonic_function_(		"AreaLamp_gamma_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AreaLamp_use_jitter_get = _rpythonic_function_(		"AreaLamp_use_jitter_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AreaLamp_use_only_shadow_get = _rpythonic_function_(		"AreaLamp_use_only_shadow_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AreaLamp_shadow_adaptive_threshold_get = _rpythonic_function_(		"AreaLamp_shadow_adaptive_threshold_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AreaLamp_shadow_color_get = _rpythonic_function_(		"AreaLamp_shadow_color_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

AreaLamp_use_shadow_layer_get = _rpythonic_function_(		"AreaLamp_use_shadow_layer_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AreaLamp_shadow_method_get = _rpythonic_function_(		"AreaLamp_shadow_method_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AreaLamp_shadow_ray_samples_x_get = _rpythonic_function_(		"AreaLamp_shadow_ray_samples_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AreaLamp_shadow_ray_samples_y_get = _rpythonic_function_(		"AreaLamp_shadow_ray_samples_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AreaLamp_shadow_ray_sample_method_get = _rpythonic_function_(		"AreaLamp_shadow_ray_sample_method_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AreaLamp_shadow_soft_size_get = _rpythonic_function_(		"AreaLamp_shadow_soft_size_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AreaLamp_shape_get = _rpythonic_function_(		"AreaLamp_shape_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AreaLamp_size_get = _rpythonic_function_(		"AreaLamp_size_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AreaLamp_size_y_get = _rpythonic_function_(		"AreaLamp_size_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AreaLamp_use_umbra_get = _rpythonic_function_(		"AreaLamp_use_umbra_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AreaSpaces_rna_type_get = _rpythonic_function_(		"AreaSpaces_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

AreaSpaces_active_get = _rpythonic_function_(		"AreaSpaces_active_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Armature_animation_data_get = _rpythonic_function_(		"Armature_animation_data_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Armature_use_auto_ik_get = _rpythonic_function_(		"Armature_use_auto_ik_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Armature_bones_begin = _rpythonic_function_(		"Armature_bones_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Armature_bones_next = _rpythonic_function_(		"Armature_bones_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Armature_bones_end = _rpythonic_function_(		"Armature_bones_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Armature_use_deform_envelopes_get = _rpythonic_function_(		"Armature_use_deform_envelopes_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Armature_use_deform_vertex_groups_get = _rpythonic_function_(		"Armature_use_deform_vertex_groups_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Armature_use_deform_delay_get = _rpythonic_function_(		"Armature_use_deform_delay_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Armature_show_axes_get = _rpythonic_function_(		"Armature_show_axes_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Armature_show_group_colors_get = _rpythonic_function_(		"Armature_show_group_colors_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Armature_show_bone_custom_shapes_get = _rpythonic_function_(		"Armature_show_bone_custom_shapes_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Armature_show_only_ghost_selected_get = _rpythonic_function_(		"Armature_show_only_ghost_selected_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Armature_show_names_get = _rpythonic_function_(		"Armature_show_names_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Armature_draw_type_get = _rpythonic_function_(		"Armature_draw_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Armature_edit_bones_begin = _rpythonic_function_(		"Armature_edit_bones_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Armature_edit_bones_next = _rpythonic_function_(		"Armature_edit_bones_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Armature_edit_bones_end = _rpythonic_function_(		"Armature_edit_bones_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Armature_ghost_type_get = _rpythonic_function_(		"Armature_ghost_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Armature_ghost_frame_end_get = _rpythonic_function_(		"Armature_ghost_frame_end_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Armature_ghost_size_get = _rpythonic_function_(		"Armature_ghost_size_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Armature_ghost_frame_start_get = _rpythonic_function_(		"Armature_ghost_frame_start_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Armature_ghost_step_get = _rpythonic_function_(		"Armature_ghost_step_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Armature_layers_protected_get = _rpythonic_function_(		"Armature_layers_protected_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_int * 32 )),] )

Armature_pose_position_get = _rpythonic_function_(		"Armature_pose_position_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Armature_use_deform_preserve_volume_get = _rpythonic_function_(		"Armature_use_deform_preserve_volume_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Armature_vert_deformer_get = _rpythonic_function_(		"Armature_vert_deformer_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Armature_layers_get = _rpythonic_function_(		"Armature_layers_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_int * 32 )),] )

Armature_use_mirror_x_get = _rpythonic_function_(		"Armature_use_mirror_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ArmatureActuator_bone_get = _rpythonic_function_(		"ArmatureActuator_bone_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ArmatureActuator_bone_length = _rpythonic_function_(		"ArmatureActuator_bone_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ArmatureActuator_constraint_get = _rpythonic_function_(		"ArmatureActuator_constraint_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ArmatureActuator_constraint_length = _rpythonic_function_(		"ArmatureActuator_constraint_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ArmatureActuator_mode_get = _rpythonic_function_(		"ArmatureActuator_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ArmatureActuator_secondary_target_get = _rpythonic_function_(		"ArmatureActuator_secondary_target_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ArmatureActuator_target_get = _rpythonic_function_(		"ArmatureActuator_target_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ArmatureActuator_weight_get = _rpythonic_function_(		"ArmatureActuator_weight_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ArmatureBones_rna_type_get = _rpythonic_function_(		"ArmatureBones_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ArmatureBones_active_get = _rpythonic_function_(		"ArmatureBones_active_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ArmatureEditBones_rna_type_get = _rpythonic_function_(		"ArmatureEditBones_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ArmatureEditBones_active_get = _rpythonic_function_(		"ArmatureEditBones_active_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ArmatureModifier_invert_vertex_group_get = _rpythonic_function_(		"ArmatureModifier_invert_vertex_group_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ArmatureModifier_use_multi_modifier_get = _rpythonic_function_(		"ArmatureModifier_use_multi_modifier_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ArmatureModifier_object_get = _rpythonic_function_(		"ArmatureModifier_object_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ArmatureModifier_use_deform_preserve_volume_get = _rpythonic_function_(		"ArmatureModifier_use_deform_preserve_volume_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ArmatureModifier_use_bone_envelopes_get = _rpythonic_function_(		"ArmatureModifier_use_bone_envelopes_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ArmatureModifier_use_vertex_groups_get = _rpythonic_function_(		"ArmatureModifier_use_vertex_groups_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ArmatureModifier_vertex_group_get = _rpythonic_function_(		"ArmatureModifier_vertex_group_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ArmatureModifier_vertex_group_length = _rpythonic_function_(		"ArmatureModifier_vertex_group_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ArmatureSensor_bone_get = _rpythonic_function_(		"ArmatureSensor_bone_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ArmatureSensor_bone_length = _rpythonic_function_(		"ArmatureSensor_bone_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ArmatureSensor_value_get = _rpythonic_function_(		"ArmatureSensor_value_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ArmatureSensor_constraint_get = _rpythonic_function_(		"ArmatureSensor_constraint_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ArmatureSensor_constraint_length = _rpythonic_function_(		"ArmatureSensor_constraint_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ArmatureSensor_test_type_get = _rpythonic_function_(		"ArmatureSensor_test_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ArrayModifier_use_constant_offset_get = _rpythonic_function_(		"ArrayModifier_use_constant_offset_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ArrayModifier_constant_offset_displace_get = _rpythonic_function_(		"ArrayModifier_constant_offset_displace_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ArrayModifier_count_get = _rpythonic_function_(		"ArrayModifier_count_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ArrayModifier_curve_get = _rpythonic_function_(		"ArrayModifier_curve_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ArrayModifier_end_cap_get = _rpythonic_function_(		"ArrayModifier_end_cap_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ArrayModifier_fit_type_get = _rpythonic_function_(		"ArrayModifier_fit_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ArrayModifier_fit_length_get = _rpythonic_function_(		"ArrayModifier_fit_length_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ArrayModifier_merge_threshold_get = _rpythonic_function_(		"ArrayModifier_merge_threshold_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ArrayModifier_use_merge_vertices_get = _rpythonic_function_(		"ArrayModifier_use_merge_vertices_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ArrayModifier_use_merge_vertices_cap_get = _rpythonic_function_(		"ArrayModifier_use_merge_vertices_cap_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ArrayModifier_use_object_offset_get = _rpythonic_function_(		"ArrayModifier_use_object_offset_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ArrayModifier_offset_object_get = _rpythonic_function_(		"ArrayModifier_offset_object_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ArrayModifier_use_relative_offset_get = _rpythonic_function_(		"ArrayModifier_use_relative_offset_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ArrayModifier_relative_offset_displace_get = _rpythonic_function_(		"ArrayModifier_relative_offset_displace_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ArrayModifier_start_cap_get = _rpythonic_function_(		"ArrayModifier_start_cap_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BackgroundImage_rna_type_get = _rpythonic_function_(		"BackgroundImage_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BackgroundImage_image_get = _rpythonic_function_(		"BackgroundImage_image_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BackgroundImage_view_axis_get = _rpythonic_function_(		"BackgroundImage_view_axis_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BackgroundImage_image_user_get = _rpythonic_function_(		"BackgroundImage_image_user_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BackgroundImage_opacity_get = _rpythonic_function_(		"BackgroundImage_opacity_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BackgroundImage_show_expanded_get = _rpythonic_function_(		"BackgroundImage_show_expanded_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BackgroundImage_size_get = _rpythonic_function_(		"BackgroundImage_size_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BackgroundImage_offset_x_get = _rpythonic_function_(		"BackgroundImage_offset_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BackgroundImage_offset_y_get = _rpythonic_function_(		"BackgroundImage_offset_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BevelModifier_angle_limit_get = _rpythonic_function_(		"BevelModifier_angle_limit_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BevelModifier_edge_weight_method_get = _rpythonic_function_(		"BevelModifier_edge_weight_method_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BevelModifier_limit_method_get = _rpythonic_function_(		"BevelModifier_limit_method_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BevelModifier_use_only_vertices_get = _rpythonic_function_(		"BevelModifier_use_only_vertices_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BevelModifier_width_get = _rpythonic_function_(		"BevelModifier_width_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BezierSplinePoint_rna_type_get = _rpythonic_function_(		"BezierSplinePoint_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BezierSplinePoint_radius_get = _rpythonic_function_(		"BezierSplinePoint_radius_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BezierSplinePoint_co_get = _rpythonic_function_(		"BezierSplinePoint_co_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

BezierSplinePoint_select_control_point_get = _rpythonic_function_(		"BezierSplinePoint_select_control_point_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BezierSplinePoint_handle_left_get = _rpythonic_function_(		"BezierSplinePoint_handle_left_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

BezierSplinePoint_handle_left_type_get = _rpythonic_function_(		"BezierSplinePoint_handle_left_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BezierSplinePoint_select_left_handle_get = _rpythonic_function_(		"BezierSplinePoint_select_left_handle_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BezierSplinePoint_handle_right_get = _rpythonic_function_(		"BezierSplinePoint_handle_right_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

BezierSplinePoint_handle_right_type_get = _rpythonic_function_(		"BezierSplinePoint_handle_right_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BezierSplinePoint_select_right_handle_get = _rpythonic_function_(		"BezierSplinePoint_select_right_handle_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BezierSplinePoint_hide_get = _rpythonic_function_(		"BezierSplinePoint_hide_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BezierSplinePoint_tilt_get = _rpythonic_function_(		"BezierSplinePoint_tilt_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BezierSplinePoint_weight_get = _rpythonic_function_(		"BezierSplinePoint_weight_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendData_rna_type_get = _rpythonic_function_(		"BlendData_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendData_actions_begin = _rpythonic_function_(		"BlendData_actions_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendData_actions_next = _rpythonic_function_(		"BlendData_actions_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_actions_end = _rpythonic_function_(		"BlendData_actions_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_armatures_begin = _rpythonic_function_(		"BlendData_armatures_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendData_armatures_next = _rpythonic_function_(		"BlendData_armatures_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_armatures_end = _rpythonic_function_(		"BlendData_armatures_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_brushes_begin = _rpythonic_function_(		"BlendData_brushes_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendData_brushes_next = _rpythonic_function_(		"BlendData_brushes_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_brushes_end = _rpythonic_function_(		"BlendData_brushes_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_cameras_begin = _rpythonic_function_(		"BlendData_cameras_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendData_cameras_next = _rpythonic_function_(		"BlendData_cameras_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_cameras_end = _rpythonic_function_(		"BlendData_cameras_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_curves_begin = _rpythonic_function_(		"BlendData_curves_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendData_curves_next = _rpythonic_function_(		"BlendData_curves_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_curves_end = _rpythonic_function_(		"BlendData_curves_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_is_dirty_get = _rpythonic_function_(		"BlendData_is_dirty_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendData_is_saved_get = _rpythonic_function_(		"BlendData_is_saved_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendData_filepath_get = _rpythonic_function_(		"BlendData_filepath_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

BlendData_filepath_length = _rpythonic_function_(		"BlendData_filepath_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendData_grease_pencil_begin = _rpythonic_function_(		"BlendData_grease_pencil_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendData_grease_pencil_next = _rpythonic_function_(		"BlendData_grease_pencil_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_grease_pencil_end = _rpythonic_function_(		"BlendData_grease_pencil_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_groups_begin = _rpythonic_function_(		"BlendData_groups_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendData_groups_next = _rpythonic_function_(		"BlendData_groups_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_groups_end = _rpythonic_function_(		"BlendData_groups_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_images_begin = _rpythonic_function_(		"BlendData_images_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendData_images_next = _rpythonic_function_(		"BlendData_images_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_images_end = _rpythonic_function_(		"BlendData_images_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_lamps_begin = _rpythonic_function_(		"BlendData_lamps_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendData_lamps_next = _rpythonic_function_(		"BlendData_lamps_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_lamps_end = _rpythonic_function_(		"BlendData_lamps_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_lattices_begin = _rpythonic_function_(		"BlendData_lattices_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendData_lattices_next = _rpythonic_function_(		"BlendData_lattices_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_lattices_end = _rpythonic_function_(		"BlendData_lattices_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_libraries_begin = _rpythonic_function_(		"BlendData_libraries_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendData_libraries_next = _rpythonic_function_(		"BlendData_libraries_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_libraries_end = _rpythonic_function_(		"BlendData_libraries_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_materials_begin = _rpythonic_function_(		"BlendData_materials_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendData_materials_next = _rpythonic_function_(		"BlendData_materials_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_materials_end = _rpythonic_function_(		"BlendData_materials_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_meshes_begin = _rpythonic_function_(		"BlendData_meshes_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendData_meshes_next = _rpythonic_function_(		"BlendData_meshes_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_meshes_end = _rpythonic_function_(		"BlendData_meshes_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_metaballs_begin = _rpythonic_function_(		"BlendData_metaballs_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendData_metaballs_next = _rpythonic_function_(		"BlendData_metaballs_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_metaballs_end = _rpythonic_function_(		"BlendData_metaballs_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_node_groups_begin = _rpythonic_function_(		"BlendData_node_groups_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendData_node_groups_next = _rpythonic_function_(		"BlendData_node_groups_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_node_groups_end = _rpythonic_function_(		"BlendData_node_groups_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_objects_begin = _rpythonic_function_(		"BlendData_objects_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendData_objects_next = _rpythonic_function_(		"BlendData_objects_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_objects_end = _rpythonic_function_(		"BlendData_objects_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_particles_begin = _rpythonic_function_(		"BlendData_particles_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendData_particles_next = _rpythonic_function_(		"BlendData_particles_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_particles_end = _rpythonic_function_(		"BlendData_particles_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_scenes_begin = _rpythonic_function_(		"BlendData_scenes_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendData_scenes_next = _rpythonic_function_(		"BlendData_scenes_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_scenes_end = _rpythonic_function_(		"BlendData_scenes_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_screens_begin = _rpythonic_function_(		"BlendData_screens_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendData_screens_next = _rpythonic_function_(		"BlendData_screens_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_screens_end = _rpythonic_function_(		"BlendData_screens_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_scripts_begin = _rpythonic_function_(		"BlendData_scripts_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendData_scripts_next = _rpythonic_function_(		"BlendData_scripts_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_scripts_end = _rpythonic_function_(		"BlendData_scripts_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_shape_keys_begin = _rpythonic_function_(		"BlendData_shape_keys_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendData_shape_keys_next = _rpythonic_function_(		"BlendData_shape_keys_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_shape_keys_end = _rpythonic_function_(		"BlendData_shape_keys_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_sounds_begin = _rpythonic_function_(		"BlendData_sounds_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendData_sounds_next = _rpythonic_function_(		"BlendData_sounds_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_sounds_end = _rpythonic_function_(		"BlendData_sounds_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_speakers_begin = _rpythonic_function_(		"BlendData_speakers_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendData_speakers_next = _rpythonic_function_(		"BlendData_speakers_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_speakers_end = _rpythonic_function_(		"BlendData_speakers_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_texts_begin = _rpythonic_function_(		"BlendData_texts_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendData_texts_next = _rpythonic_function_(		"BlendData_texts_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_texts_end = _rpythonic_function_(		"BlendData_texts_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_textures_begin = _rpythonic_function_(		"BlendData_textures_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendData_textures_next = _rpythonic_function_(		"BlendData_textures_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_textures_end = _rpythonic_function_(		"BlendData_textures_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_fonts_begin = _rpythonic_function_(		"BlendData_fonts_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendData_fonts_next = _rpythonic_function_(		"BlendData_fonts_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_fonts_end = _rpythonic_function_(		"BlendData_fonts_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_window_managers_begin = _rpythonic_function_(		"BlendData_window_managers_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendData_window_managers_next = _rpythonic_function_(		"BlendData_window_managers_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_window_managers_end = _rpythonic_function_(		"BlendData_window_managers_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_worlds_begin = _rpythonic_function_(		"BlendData_worlds_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendData_worlds_next = _rpythonic_function_(		"BlendData_worlds_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendData_worlds_end = _rpythonic_function_(		"BlendData_worlds_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlendDataActions_rna_type_get = _rpythonic_function_(		"BlendDataActions_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendDataArmatures_rna_type_get = _rpythonic_function_(		"BlendDataArmatures_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendDataBrushes_rna_type_get = _rpythonic_function_(		"BlendDataBrushes_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendDataCameras_rna_type_get = _rpythonic_function_(		"BlendDataCameras_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendDataCurves_rna_type_get = _rpythonic_function_(		"BlendDataCurves_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendDataFonts_rna_type_get = _rpythonic_function_(		"BlendDataFonts_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendDataGreasePencils_rna_type_get = _rpythonic_function_(		"BlendDataGreasePencils_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendDataGroups_rna_type_get = _rpythonic_function_(		"BlendDataGroups_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendDataImages_rna_type_get = _rpythonic_function_(		"BlendDataImages_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendDataLamps_rna_type_get = _rpythonic_function_(		"BlendDataLamps_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendDataLattices_rna_type_get = _rpythonic_function_(		"BlendDataLattices_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendDataLibraries_rna_type_get = _rpythonic_function_(		"BlendDataLibraries_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendDataMaterials_rna_type_get = _rpythonic_function_(		"BlendDataMaterials_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendDataMeshes_rna_type_get = _rpythonic_function_(		"BlendDataMeshes_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendDataMetaBalls_rna_type_get = _rpythonic_function_(		"BlendDataMetaBalls_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendDataNodeTrees_rna_type_get = _rpythonic_function_(		"BlendDataNodeTrees_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendDataObjects_rna_type_get = _rpythonic_function_(		"BlendDataObjects_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendDataParticles_rna_type_get = _rpythonic_function_(		"BlendDataParticles_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendDataScenes_rna_type_get = _rpythonic_function_(		"BlendDataScenes_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendDataScreens_rna_type_get = _rpythonic_function_(		"BlendDataScreens_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendDataSounds_rna_type_get = _rpythonic_function_(		"BlendDataSounds_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendDataSpeakers_rna_type_get = _rpythonic_function_(		"BlendDataSpeakers_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendDataTexts_rna_type_get = _rpythonic_function_(		"BlendDataTexts_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendDataTextures_rna_type_get = _rpythonic_function_(		"BlendDataTextures_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendDataWindowManagers_rna_type_get = _rpythonic_function_(		"BlendDataWindowManagers_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendDataWorlds_rna_type_get = _rpythonic_function_(		"BlendDataWorlds_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendTexture_use_flip_axis_get = _rpythonic_function_(		"BlendTexture_use_flip_axis_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlendTexture_progression_get = _rpythonic_function_(		"BlendTexture_progression_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlenderRNA_rna_type_get = _rpythonic_function_(		"BlenderRNA_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlenderRNA_structs_begin = _rpythonic_function_(		"BlenderRNA_structs_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BlenderRNA_structs_next = _rpythonic_function_(		"BlenderRNA_structs_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BlenderRNA_structs_end = _rpythonic_function_(		"BlenderRNA_structs_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BoidRule_rna_type_get = _rpythonic_function_(		"BoidRule_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidRule_name_get = _rpythonic_function_(		"BoidRule_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

BoidRule_name_length = _rpythonic_function_(		"BoidRule_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidRule_use_in_air_get = _rpythonic_function_(		"BoidRule_use_in_air_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidRule_use_on_land_get = _rpythonic_function_(		"BoidRule_use_on_land_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidRule_type_get = _rpythonic_function_(		"BoidRule_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidRuleAverageSpeed_level_get = _rpythonic_function_(		"BoidRuleAverageSpeed_level_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidRuleAverageSpeed_speed_get = _rpythonic_function_(		"BoidRuleAverageSpeed_speed_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidRuleAverageSpeed_wander_get = _rpythonic_function_(		"BoidRuleAverageSpeed_wander_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidRuleAvoid_fear_factor_get = _rpythonic_function_(		"BoidRuleAvoid_fear_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidRuleAvoid_object_get = _rpythonic_function_(		"BoidRuleAvoid_object_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidRuleAvoid_use_predict_get = _rpythonic_function_(		"BoidRuleAvoid_use_predict_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidRuleAvoidCollision_use_avoid_get = _rpythonic_function_(		"BoidRuleAvoidCollision_use_avoid_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidRuleAvoidCollision_use_avoid_collision_get = _rpythonic_function_(		"BoidRuleAvoidCollision_use_avoid_collision_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidRuleAvoidCollision_look_ahead_get = _rpythonic_function_(		"BoidRuleAvoidCollision_look_ahead_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidRuleFight_distance_get = _rpythonic_function_(		"BoidRuleFight_distance_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidRuleFight_flee_distance_get = _rpythonic_function_(		"BoidRuleFight_flee_distance_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidRuleFollowLeader_distance_get = _rpythonic_function_(		"BoidRuleFollowLeader_distance_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidRuleFollowLeader_use_line_get = _rpythonic_function_(		"BoidRuleFollowLeader_use_line_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidRuleFollowLeader_object_get = _rpythonic_function_(		"BoidRuleFollowLeader_object_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidRuleFollowLeader_queue_count_get = _rpythonic_function_(		"BoidRuleFollowLeader_queue_count_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidRuleGoal_object_get = _rpythonic_function_(		"BoidRuleGoal_object_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidRuleGoal_use_predict_get = _rpythonic_function_(		"BoidRuleGoal_use_predict_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidSettings_rna_type_get = _rpythonic_function_(		"BoidSettings_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidSettings_accuracy_get = _rpythonic_function_(		"BoidSettings_accuracy_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidSettings_active_boid_state_get = _rpythonic_function_(		"BoidSettings_active_boid_state_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidSettings_active_boid_state_index_get = _rpythonic_function_(		"BoidSettings_active_boid_state_index_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidSettings_aggression_get = _rpythonic_function_(		"BoidSettings_aggression_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidSettings_air_personal_space_get = _rpythonic_function_(		"BoidSettings_air_personal_space_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidSettings_use_climb_get = _rpythonic_function_(		"BoidSettings_use_climb_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidSettings_use_flight_get = _rpythonic_function_(		"BoidSettings_use_flight_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidSettings_use_land_get = _rpythonic_function_(		"BoidSettings_use_land_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidSettings_bank_get = _rpythonic_function_(		"BoidSettings_bank_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidSettings_states_begin = _rpythonic_function_(		"BoidSettings_states_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidSettings_states_next = _rpythonic_function_(		"BoidSettings_states_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BoidSettings_states_end = _rpythonic_function_(		"BoidSettings_states_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BoidSettings_health_get = _rpythonic_function_(		"BoidSettings_health_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidSettings_height_get = _rpythonic_function_(		"BoidSettings_height_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidSettings_land_jump_speed_get = _rpythonic_function_(		"BoidSettings_land_jump_speed_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidSettings_land_personal_space_get = _rpythonic_function_(		"BoidSettings_land_personal_space_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidSettings_land_stick_force_get = _rpythonic_function_(		"BoidSettings_land_stick_force_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidSettings_land_smooth_get = _rpythonic_function_(		"BoidSettings_land_smooth_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidSettings_air_acc_max_get = _rpythonic_function_(		"BoidSettings_air_acc_max_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidSettings_air_ave_max_get = _rpythonic_function_(		"BoidSettings_air_ave_max_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidSettings_air_speed_max_get = _rpythonic_function_(		"BoidSettings_air_speed_max_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidSettings_land_acc_max_get = _rpythonic_function_(		"BoidSettings_land_acc_max_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidSettings_land_ave_max_get = _rpythonic_function_(		"BoidSettings_land_ave_max_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidSettings_land_speed_max_get = _rpythonic_function_(		"BoidSettings_land_speed_max_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidSettings_air_speed_min_get = _rpythonic_function_(		"BoidSettings_air_speed_min_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidSettings_pitch_get = _rpythonic_function_(		"BoidSettings_pitch_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidSettings_range_get = _rpythonic_function_(		"BoidSettings_range_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidSettings_strength_get = _rpythonic_function_(		"BoidSettings_strength_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidState_rna_type_get = _rpythonic_function_(		"BoidState_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidState_name_get = _rpythonic_function_(		"BoidState_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

BoidState_name_length = _rpythonic_function_(		"BoidState_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidState_active_boid_rule_get = _rpythonic_function_(		"BoidState_active_boid_rule_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidState_active_boid_rule_index_get = _rpythonic_function_(		"BoidState_active_boid_rule_index_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidState_rules_begin = _rpythonic_function_(		"BoidState_rules_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidState_rules_next = _rpythonic_function_(		"BoidState_rules_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BoidState_rules_end = _rpythonic_function_(		"BoidState_rules_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

BoidState_falloff_get = _rpythonic_function_(		"BoidState_falloff_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidState_ruleset_type_get = _rpythonic_function_(		"BoidState_ruleset_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidState_rule_fuzzy_get = _rpythonic_function_(		"BoidState_rule_fuzzy_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoidState_volume_get = _rpythonic_function_(		"BoidState_volume_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Bone_rna_type_get = _rpythonic_function_(		"Bone_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Bone_name_get = _rpythonic_function_(		"Bone_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

Bone_name_length = _rpythonic_function_(		"Bone_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Bone_head_local_get = _rpythonic_function_(		"Bone_head_local_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

Bone_tail_local_get = _rpythonic_function_(		"Bone_tail_local_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

Bone_bbone_x_get = _rpythonic_function_(		"Bone_bbone_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Bone_bbone_z_get = _rpythonic_function_(		"Bone_bbone_z_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Bone_bbone_in_get = _rpythonic_function_(		"Bone_bbone_in_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Bone_bbone_out_get = _rpythonic_function_(		"Bone_bbone_out_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Bone_bbone_segments_get = _rpythonic_function_(		"Bone_bbone_segments_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Bone_matrix_local_get = _rpythonic_function_(		"Bone_matrix_local_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 16 )),] )

Bone_matrix_get = _rpythonic_function_(		"Bone_matrix_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 9 )),] )

Bone_children_begin = _rpythonic_function_(		"Bone_children_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Bone_children_next = _rpythonic_function_(		"Bone_children_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Bone_children_end = _rpythonic_function_(		"Bone_children_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Bone_use_connect_get = _rpythonic_function_(		"Bone_use_connect_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Bone_use_cyclic_offset_get = _rpythonic_function_(		"Bone_use_cyclic_offset_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Bone_use_deform_get = _rpythonic_function_(		"Bone_use_deform_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Bone_show_wire_get = _rpythonic_function_(		"Bone_show_wire_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Bone_envelope_distance_get = _rpythonic_function_(		"Bone_envelope_distance_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Bone_envelope_weight_get = _rpythonic_function_(		"Bone_envelope_weight_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Bone_head_radius_get = _rpythonic_function_(		"Bone_head_radius_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Bone_tail_radius_get = _rpythonic_function_(		"Bone_tail_radius_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Bone_head_get = _rpythonic_function_(		"Bone_head_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

Bone_hide_get = _rpythonic_function_(		"Bone_hide_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Bone_use_inherit_rotation_get = _rpythonic_function_(		"Bone_use_inherit_rotation_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Bone_use_inherit_scale_get = _rpythonic_function_(		"Bone_use_inherit_scale_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Bone_layers_get = _rpythonic_function_(		"Bone_layers_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_int * 32 )),] )

Bone_use_local_location_get = _rpythonic_function_(		"Bone_use_local_location_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Bone_use_envelope_multiply_get = _rpythonic_function_(		"Bone_use_envelope_multiply_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Bone_parent_get = _rpythonic_function_(		"Bone_parent_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Bone_select_get = _rpythonic_function_(		"Bone_select_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Bone_select_head_get = _rpythonic_function_(		"Bone_select_head_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Bone_select_tail_get = _rpythonic_function_(		"Bone_select_tail_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Bone_hide_select_get = _rpythonic_function_(		"Bone_hide_select_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Bone_tail_get = _rpythonic_function_(		"Bone_tail_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

BoneGroup_rna_type_get = _rpythonic_function_(		"BoneGroup_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoneGroup_name_get = _rpythonic_function_(		"BoneGroup_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

BoneGroup_color_set_get = _rpythonic_function_(		"BoneGroup_color_set_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoneGroup_colors_get = _rpythonic_function_(		"BoneGroup_colors_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoneGroups_rna_type_get = _rpythonic_function_(		"BoneGroups_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoneGroups_active_get = _rpythonic_function_(		"BoneGroups_active_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BoneGroups_active_index_get = _rpythonic_function_(		"BoneGroups_active_index_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BooleanModifier_object_get = _rpythonic_function_(		"BooleanModifier_object_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BooleanModifier_operation_get = _rpythonic_function_(		"BooleanModifier_operation_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BooleanProperty_array_length_get = _rpythonic_function_(		"BooleanProperty_array_length_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BooleanProperty_default_value_get = _rpythonic_function_(		"BooleanProperty_default_value_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BooleanProperty_default_array_get = _rpythonic_function_(		"BooleanProperty_default_array_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_int * 3 )),] )

Brush_use_accumulate_get = _rpythonic_function_(		"Brush_use_accumulate_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_use_adaptive_space_get = _rpythonic_function_(		"Brush_use_adaptive_space_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_cursor_color_add_get = _rpythonic_function_(		"Brush_cursor_color_add_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

Brush_use_airbrush_get = _rpythonic_function_(		"Brush_use_airbrush_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_use_alpha_get = _rpythonic_function_(		"Brush_use_alpha_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_use_anchor_get = _rpythonic_function_(		"Brush_use_anchor_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_auto_smooth_factor_get = _rpythonic_function_(		"Brush_auto_smooth_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_blend_get = _rpythonic_function_(		"Brush_blend_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_height_get = _rpythonic_function_(		"Brush_height_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_icon_filepath_get = _rpythonic_function_(		"Brush_icon_filepath_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

Brush_icon_filepath_length = _rpythonic_function_(		"Brush_icon_filepath_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_clone_alpha_get = _rpythonic_function_(		"Brush_clone_alpha_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_clone_image_get = _rpythonic_function_(		"Brush_clone_image_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_clone_offset_get = _rpythonic_function_(		"Brush_clone_offset_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 2 )),] )

Brush_color_get = _rpythonic_function_(		"Brush_color_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

Brush_crease_pinch_factor_get = _rpythonic_function_(		"Brush_crease_pinch_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_curve_get = _rpythonic_function_(		"Brush_curve_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_use_custom_icon_get = _rpythonic_function_(		"Brush_use_custom_icon_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_direction_get = _rpythonic_function_(		"Brush_direction_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_use_edge_to_edge_get = _rpythonic_function_(		"Brush_use_edge_to_edge_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_use_fixed_texture_get = _rpythonic_function_(		"Brush_use_fixed_texture_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_image_tool_get = _rpythonic_function_(		"Brush_image_tool_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_use_inverse_smooth_pressure_get = _rpythonic_function_(		"Brush_use_inverse_smooth_pressure_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_jitter_get = _rpythonic_function_(		"Brush_jitter_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_use_pressure_jitter_get = _rpythonic_function_(		"Brush_use_pressure_jitter_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_normal_weight_get = _rpythonic_function_(		"Brush_normal_weight_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_use_original_normal_get = _rpythonic_function_(		"Brush_use_original_normal_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_use_persistent_get = _rpythonic_function_(		"Brush_use_persistent_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_plane_offset_get = _rpythonic_function_(		"Brush_plane_offset_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_use_offset_pressure_get = _rpythonic_function_(		"Brush_use_offset_pressure_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_plane_trim_get = _rpythonic_function_(		"Brush_plane_trim_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_size_get = _rpythonic_function_(		"Brush_size_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_use_rake_get = _rpythonic_function_(		"Brush_use_rake_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_use_random_rotation_get = _rpythonic_function_(		"Brush_use_random_rotation_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_rate_get = _rpythonic_function_(		"Brush_rate_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_use_restore_mesh_get = _rpythonic_function_(		"Brush_use_restore_mesh_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_sculpt_plane_get = _rpythonic_function_(		"Brush_sculpt_plane_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_sculpt_tool_get = _rpythonic_function_(		"Brush_sculpt_tool_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_use_pressure_size_get = _rpythonic_function_(		"Brush_use_pressure_size_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_use_smooth_stroke_get = _rpythonic_function_(		"Brush_use_smooth_stroke_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_smooth_stroke_factor_get = _rpythonic_function_(		"Brush_smooth_stroke_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_smooth_stroke_radius_get = _rpythonic_function_(		"Brush_smooth_stroke_radius_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_use_space_get = _rpythonic_function_(		"Brush_use_space_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_spacing_get = _rpythonic_function_(		"Brush_spacing_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_use_pressure_spacing_get = _rpythonic_function_(		"Brush_use_pressure_spacing_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_strength_get = _rpythonic_function_(		"Brush_strength_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_use_pressure_strength_get = _rpythonic_function_(		"Brush_use_pressure_strength_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_stroke_method_get = _rpythonic_function_(		"Brush_stroke_method_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_cursor_color_subtract_get = _rpythonic_function_(		"Brush_cursor_color_subtract_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

Brush_texture_get = _rpythonic_function_(		"Brush_texture_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_texture_angle_source_random_get = _rpythonic_function_(		"Brush_texture_angle_source_random_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_texture_angle_source_no_random_get = _rpythonic_function_(		"Brush_texture_angle_source_no_random_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_texture_overlay_alpha_get = _rpythonic_function_(		"Brush_texture_overlay_alpha_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_texture_sample_bias_get = _rpythonic_function_(		"Brush_texture_sample_bias_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_texture_slot_get = _rpythonic_function_(		"Brush_texture_slot_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_unprojected_radius_get = _rpythonic_function_(		"Brush_unprojected_radius_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_use_space_atten_get = _rpythonic_function_(		"Brush_use_space_atten_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_use_locked_size_get = _rpythonic_function_(		"Brush_use_locked_size_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_use_frontface_get = _rpythonic_function_(		"Brush_use_frontface_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_use_plane_trim_get = _rpythonic_function_(		"Brush_use_plane_trim_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_use_paint_sculpt_get = _rpythonic_function_(		"Brush_use_paint_sculpt_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_use_paint_image_get = _rpythonic_function_(		"Brush_use_paint_image_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_use_texture_overlay_get = _rpythonic_function_(		"Brush_use_texture_overlay_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_use_paint_vertex_get = _rpythonic_function_(		"Brush_use_paint_vertex_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_use_paint_weight_get = _rpythonic_function_(		"Brush_use_paint_weight_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_vertex_tool_get = _rpythonic_function_(		"Brush_vertex_tool_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Brush_use_wrap_get = _rpythonic_function_(		"Brush_use_wrap_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BrushTextureSlot_angle_get = _rpythonic_function_(		"BrushTextureSlot_angle_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BrushTextureSlot_map_mode_get = _rpythonic_function_(		"BrushTextureSlot_map_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BuildModifier_frame_duration_get = _rpythonic_function_(		"BuildModifier_frame_duration_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BuildModifier_use_random_order_get = _rpythonic_function_(		"BuildModifier_use_random_order_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BuildModifier_seed_get = _rpythonic_function_(		"BuildModifier_seed_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

BuildModifier_frame_start_get = _rpythonic_function_(		"BuildModifier_frame_start_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Camera_angle_get = _rpythonic_function_(		"Camera_angle_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Camera_animation_data_get = _rpythonic_function_(		"Camera_animation_data_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Camera_clip_end_get = _rpythonic_function_(		"Camera_clip_end_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Camera_clip_start_get = _rpythonic_function_(		"Camera_clip_start_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Camera_show_guide_get = _rpythonic_function_(		"Camera_show_guide_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Camera_dof_distance_get = _rpythonic_function_(		"Camera_dof_distance_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Camera_dof_object_get = _rpythonic_function_(		"Camera_dof_object_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Camera_draw_size_get = _rpythonic_function_(		"Camera_draw_size_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Camera_lens_get = _rpythonic_function_(		"Camera_lens_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Camera_lens_unit_get = _rpythonic_function_(		"Camera_lens_unit_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Camera_ortho_scale_get = _rpythonic_function_(		"Camera_ortho_scale_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Camera_use_panorama_get = _rpythonic_function_(		"Camera_use_panorama_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Camera_passepartout_alpha_get = _rpythonic_function_(		"Camera_passepartout_alpha_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Camera_shift_x_get = _rpythonic_function_(		"Camera_shift_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Camera_shift_y_get = _rpythonic_function_(		"Camera_shift_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Camera_show_limits_get = _rpythonic_function_(		"Camera_show_limits_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Camera_show_mist_get = _rpythonic_function_(		"Camera_show_mist_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Camera_show_name_get = _rpythonic_function_(		"Camera_show_name_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Camera_show_passepartout_get = _rpythonic_function_(		"Camera_show_passepartout_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Camera_show_title_safe_get = _rpythonic_function_(		"Camera_show_title_safe_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Camera_type_get = _rpythonic_function_(		"Camera_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CameraActuator_axis_get = _rpythonic_function_(		"CameraActuator_axis_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CameraActuator_object_get = _rpythonic_function_(		"CameraActuator_object_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CameraActuator_damping_get = _rpythonic_function_(		"CameraActuator_damping_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CameraActuator_height_get = _rpythonic_function_(		"CameraActuator_height_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CameraActuator_max_get = _rpythonic_function_(		"CameraActuator_max_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CameraActuator_min_get = _rpythonic_function_(		"CameraActuator_min_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CastModifier_cast_type_get = _rpythonic_function_(		"CastModifier_cast_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CastModifier_factor_get = _rpythonic_function_(		"CastModifier_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CastModifier_use_radius_as_size_get = _rpythonic_function_(		"CastModifier_use_radius_as_size_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CastModifier_object_get = _rpythonic_function_(		"CastModifier_object_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CastModifier_radius_get = _rpythonic_function_(		"CastModifier_radius_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CastModifier_size_get = _rpythonic_function_(		"CastModifier_size_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CastModifier_use_transform_get = _rpythonic_function_(		"CastModifier_use_transform_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CastModifier_vertex_group_get = _rpythonic_function_(		"CastModifier_vertex_group_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

CastModifier_vertex_group_length = _rpythonic_function_(		"CastModifier_vertex_group_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CastModifier_use_x_get = _rpythonic_function_(		"CastModifier_use_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CastModifier_use_y_get = _rpythonic_function_(		"CastModifier_use_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CastModifier_use_z_get = _rpythonic_function_(		"CastModifier_use_z_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ChannelDriverVariables_rna_type_get = _rpythonic_function_(		"ChannelDriverVariables_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ChildOfConstraint_inverse_matrix_get = _rpythonic_function_(		"ChildOfConstraint_inverse_matrix_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 16 )),] )

ChildOfConstraint_use_location_x_get = _rpythonic_function_(		"ChildOfConstraint_use_location_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ChildOfConstraint_use_location_y_get = _rpythonic_function_(		"ChildOfConstraint_use_location_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ChildOfConstraint_use_location_z_get = _rpythonic_function_(		"ChildOfConstraint_use_location_z_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ChildOfConstraint_use_rotation_x_get = _rpythonic_function_(		"ChildOfConstraint_use_rotation_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ChildOfConstraint_use_rotation_y_get = _rpythonic_function_(		"ChildOfConstraint_use_rotation_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ChildOfConstraint_use_rotation_z_get = _rpythonic_function_(		"ChildOfConstraint_use_rotation_z_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ChildOfConstraint_use_scale_x_get = _rpythonic_function_(		"ChildOfConstraint_use_scale_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ChildOfConstraint_use_scale_y_get = _rpythonic_function_(		"ChildOfConstraint_use_scale_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ChildOfConstraint_use_scale_z_get = _rpythonic_function_(		"ChildOfConstraint_use_scale_z_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ChildOfConstraint_subtarget_get = _rpythonic_function_(		"ChildOfConstraint_subtarget_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ChildOfConstraint_subtarget_length = _rpythonic_function_(		"ChildOfConstraint_subtarget_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ChildOfConstraint_target_get = _rpythonic_function_(		"ChildOfConstraint_target_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ChildParticle_rna_type_get = _rpythonic_function_(		"ChildParticle_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ClampToConstraint_use_cyclic_get = _rpythonic_function_(		"ClampToConstraint_use_cyclic_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ClampToConstraint_main_axis_get = _rpythonic_function_(		"ClampToConstraint_main_axis_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ClampToConstraint_target_get = _rpythonic_function_(		"ClampToConstraint_target_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ClothCollisionSettings_rna_type_get = _rpythonic_function_(		"ClothCollisionSettings_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ClothCollisionSettings_group_get = _rpythonic_function_(		"ClothCollisionSettings_group_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ClothCollisionSettings_collision_quality_get = _rpythonic_function_(		"ClothCollisionSettings_collision_quality_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ClothCollisionSettings_use_collision_get = _rpythonic_function_(		"ClothCollisionSettings_use_collision_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ClothCollisionSettings_use_self_collision_get = _rpythonic_function_(		"ClothCollisionSettings_use_self_collision_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ClothCollisionSettings_friction_get = _rpythonic_function_(		"ClothCollisionSettings_friction_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ClothCollisionSettings_distance_min_get = _rpythonic_function_(		"ClothCollisionSettings_distance_min_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ClothCollisionSettings_distance_repel_get = _rpythonic_function_(		"ClothCollisionSettings_distance_repel_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ClothCollisionSettings_repel_force_get = _rpythonic_function_(		"ClothCollisionSettings_repel_force_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ClothCollisionSettings_self_collision_quality_get = _rpythonic_function_(		"ClothCollisionSettings_self_collision_quality_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ClothCollisionSettings_self_friction_get = _rpythonic_function_(		"ClothCollisionSettings_self_friction_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ClothCollisionSettings_self_distance_min_get = _rpythonic_function_(		"ClothCollisionSettings_self_distance_min_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ClothModifier_collision_settings_get = _rpythonic_function_(		"ClothModifier_collision_settings_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ClothModifier_settings_get = _rpythonic_function_(		"ClothModifier_settings_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ClothModifier_point_cache_get = _rpythonic_function_(		"ClothModifier_point_cache_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ClothSettings_rna_type_get = _rpythonic_function_(		"ClothSettings_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ClothSettings_air_damping_get = _rpythonic_function_(		"ClothSettings_air_damping_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ClothSettings_bending_stiffness_get = _rpythonic_function_(		"ClothSettings_bending_stiffness_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ClothSettings_bending_stiffness_max_get = _rpythonic_function_(		"ClothSettings_bending_stiffness_max_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ClothSettings_vertex_group_bending_get = _rpythonic_function_(		"ClothSettings_vertex_group_bending_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ClothSettings_vertex_group_bending_length = _rpythonic_function_(		"ClothSettings_vertex_group_bending_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ClothSettings_collider_friction_get = _rpythonic_function_(		"ClothSettings_collider_friction_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ClothSettings_effector_weights_get = _rpythonic_function_(		"ClothSettings_effector_weights_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ClothSettings_goal_friction_get = _rpythonic_function_(		"ClothSettings_goal_friction_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ClothSettings_goal_default_get = _rpythonic_function_(		"ClothSettings_goal_default_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ClothSettings_goal_max_get = _rpythonic_function_(		"ClothSettings_goal_max_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ClothSettings_goal_min_get = _rpythonic_function_(		"ClothSettings_goal_min_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ClothSettings_goal_spring_get = _rpythonic_function_(		"ClothSettings_goal_spring_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ClothSettings_gravity_get = _rpythonic_function_(		"ClothSettings_gravity_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ClothSettings_internal_friction_get = _rpythonic_function_(		"ClothSettings_internal_friction_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ClothSettings_mass_get = _rpythonic_function_(		"ClothSettings_mass_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ClothSettings_vertex_group_mass_get = _rpythonic_function_(		"ClothSettings_vertex_group_mass_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ClothSettings_vertex_group_mass_length = _rpythonic_function_(		"ClothSettings_vertex_group_mass_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ClothSettings_use_pin_cloth_get = _rpythonic_function_(		"ClothSettings_use_pin_cloth_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ClothSettings_pin_stiffness_get = _rpythonic_function_(		"ClothSettings_pin_stiffness_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ClothSettings_pre_roll_get = _rpythonic_function_(		"ClothSettings_pre_roll_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ClothSettings_quality_get = _rpythonic_function_(		"ClothSettings_quality_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ClothSettings_rest_shape_key_get = _rpythonic_function_(		"ClothSettings_rest_shape_key_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ClothSettings_spring_damping_get = _rpythonic_function_(		"ClothSettings_spring_damping_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ClothSettings_use_stiffness_scale_get = _rpythonic_function_(		"ClothSettings_use_stiffness_scale_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ClothSettings_structural_stiffness_get = _rpythonic_function_(		"ClothSettings_structural_stiffness_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ClothSettings_structural_stiffness_max_get = _rpythonic_function_(		"ClothSettings_structural_stiffness_max_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ClothSettings_vertex_group_structural_stiffness_get = _rpythonic_function_(		"ClothSettings_vertex_group_structural_stiffness_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ClothSettings_vertex_group_structural_stiffness_length = _rpythonic_function_(		"ClothSettings_vertex_group_structural_stiffness_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CloudsTexture_cloud_type_get = _rpythonic_function_(		"CloudsTexture_cloud_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CloudsTexture_nabla_get = _rpythonic_function_(		"CloudsTexture_nabla_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CloudsTexture_noise_basis_get = _rpythonic_function_(		"CloudsTexture_noise_basis_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CloudsTexture_noise_depth_get = _rpythonic_function_(		"CloudsTexture_noise_depth_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CloudsTexture_noise_scale_get = _rpythonic_function_(		"CloudsTexture_noise_scale_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CloudsTexture_noise_type_get = _rpythonic_function_(		"CloudsTexture_noise_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CollectionProperty_fixed_type_get = _rpythonic_function_(		"CollectionProperty_fixed_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CollisionModifier_settings_get = _rpythonic_function_(		"CollisionModifier_settings_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CollisionSensor_use_material_get = _rpythonic_function_(		"CollisionSensor_use_material_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CollisionSensor_material_get = _rpythonic_function_(		"CollisionSensor_material_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

CollisionSensor_material_length = _rpythonic_function_(		"CollisionSensor_material_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CollisionSensor_property_get = _rpythonic_function_(		"CollisionSensor_property_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

CollisionSensor_property_length = _rpythonic_function_(		"CollisionSensor_property_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CollisionSensor_use_pulse_get = _rpythonic_function_(		"CollisionSensor_use_pulse_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CollisionSettings_rna_type_get = _rpythonic_function_(		"CollisionSettings_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CollisionSettings_absorption_get = _rpythonic_function_(		"CollisionSettings_absorption_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CollisionSettings_damping_get = _rpythonic_function_(		"CollisionSettings_damping_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CollisionSettings_damping_factor_get = _rpythonic_function_(		"CollisionSettings_damping_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CollisionSettings_use_get = _rpythonic_function_(		"CollisionSettings_use_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CollisionSettings_friction_factor_get = _rpythonic_function_(		"CollisionSettings_friction_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CollisionSettings_thickness_inner_get = _rpythonic_function_(		"CollisionSettings_thickness_inner_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CollisionSettings_use_particle_kill_get = _rpythonic_function_(		"CollisionSettings_use_particle_kill_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CollisionSettings_thickness_outer_get = _rpythonic_function_(		"CollisionSettings_thickness_outer_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CollisionSettings_permeability_get = _rpythonic_function_(		"CollisionSettings_permeability_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CollisionSettings_damping_random_get = _rpythonic_function_(		"CollisionSettings_damping_random_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CollisionSettings_friction_random_get = _rpythonic_function_(		"CollisionSettings_friction_random_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CollisionSettings_stickness_get = _rpythonic_function_(		"CollisionSettings_stickness_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ColorRamp_rna_type_get = _rpythonic_function_(		"ColorRamp_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ColorRamp_elements_begin = _rpythonic_function_(		"ColorRamp_elements_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ColorRamp_elements_next = _rpythonic_function_(		"ColorRamp_elements_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

ColorRamp_elements_end = _rpythonic_function_(		"ColorRamp_elements_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

ColorRamp_interpolation_get = _rpythonic_function_(		"ColorRamp_interpolation_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ColorRampElement_rna_type_get = _rpythonic_function_(		"ColorRampElement_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ColorRampElement_color_get = _rpythonic_function_(		"ColorRampElement_color_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 4 )),] )

ColorRampElement_position_get = _rpythonic_function_(		"ColorRampElement_position_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ColorRampElements_rna_type_get = _rpythonic_function_(		"ColorRampElements_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ColorSequence_color_get = _rpythonic_function_(		"ColorSequence_color_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

CompositorNode_type_get = _rpythonic_function_(		"CompositorNode_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeAlphaOver_use_premultiply_get = _rpythonic_function_(		"CompositorNodeAlphaOver_use_premultiply_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeAlphaOver_premul_get = _rpythonic_function_(		"CompositorNodeAlphaOver_premul_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeBilateralblur_sigma_color_get = _rpythonic_function_(		"CompositorNodeBilateralblur_sigma_color_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeBilateralblur_iterations_get = _rpythonic_function_(		"CompositorNodeBilateralblur_iterations_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeBilateralblur_sigma_space_get = _rpythonic_function_(		"CompositorNodeBilateralblur_sigma_space_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeBlur_aspect_correction_get = _rpythonic_function_(		"CompositorNodeBlur_aspect_correction_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeBlur_use_bokeh_get = _rpythonic_function_(		"CompositorNodeBlur_use_bokeh_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeBlur_factor_get = _rpythonic_function_(		"CompositorNodeBlur_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeBlur_filter_type_get = _rpythonic_function_(		"CompositorNodeBlur_filter_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeBlur_use_gamma_correction_get = _rpythonic_function_(		"CompositorNodeBlur_use_gamma_correction_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeBlur_use_relative_get = _rpythonic_function_(		"CompositorNodeBlur_use_relative_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeBlur_factor_x_get = _rpythonic_function_(		"CompositorNodeBlur_factor_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeBlur_factor_y_get = _rpythonic_function_(		"CompositorNodeBlur_factor_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeBlur_size_x_get = _rpythonic_function_(		"CompositorNodeBlur_size_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeBlur_size_y_get = _rpythonic_function_(		"CompositorNodeBlur_size_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeChannelMatte_limit_method_get = _rpythonic_function_(		"CompositorNodeChannelMatte_limit_method_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeChannelMatte_matte_channel_get = _rpythonic_function_(		"CompositorNodeChannelMatte_matte_channel_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeChannelMatte_color_space_get = _rpythonic_function_(		"CompositorNodeChannelMatte_color_space_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeChannelMatte_limit_max_get = _rpythonic_function_(		"CompositorNodeChannelMatte_limit_max_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeChannelMatte_limit_channel_get = _rpythonic_function_(		"CompositorNodeChannelMatte_limit_channel_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeChannelMatte_limit_min_get = _rpythonic_function_(		"CompositorNodeChannelMatte_limit_min_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeChromaMatte_tolerance_get = _rpythonic_function_(		"CompositorNodeChromaMatte_tolerance_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeChromaMatte_threshold_get = _rpythonic_function_(		"CompositorNodeChromaMatte_threshold_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeChromaMatte_gain_get = _rpythonic_function_(		"CompositorNodeChromaMatte_gain_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeChromaMatte_lift_get = _rpythonic_function_(		"CompositorNodeChromaMatte_lift_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeChromaMatte_shadow_adjust_get = _rpythonic_function_(		"CompositorNodeChromaMatte_shadow_adjust_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeColorBalance_correction_method_get = _rpythonic_function_(		"CompositorNodeColorBalance_correction_method_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeColorBalance_gain_get = _rpythonic_function_(		"CompositorNodeColorBalance_gain_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

CompositorNodeColorBalance_gamma_get = _rpythonic_function_(		"CompositorNodeColorBalance_gamma_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

CompositorNodeColorBalance_lift_get = _rpythonic_function_(		"CompositorNodeColorBalance_lift_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

CompositorNodeColorBalance_offset_get = _rpythonic_function_(		"CompositorNodeColorBalance_offset_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

CompositorNodeColorBalance_power_get = _rpythonic_function_(		"CompositorNodeColorBalance_power_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

CompositorNodeColorBalance_slope_get = _rpythonic_function_(		"CompositorNodeColorBalance_slope_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

CompositorNodeColorMatte_color_hue_get = _rpythonic_function_(		"CompositorNodeColorMatte_color_hue_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeColorMatte_color_saturation_get = _rpythonic_function_(		"CompositorNodeColorMatte_color_saturation_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeColorMatte_color_value_get = _rpythonic_function_(		"CompositorNodeColorMatte_color_value_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeColorSpill_limit_method_get = _rpythonic_function_(		"CompositorNodeColorSpill_limit_method_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeColorSpill_unspill_blue_get = _rpythonic_function_(		"CompositorNodeColorSpill_unspill_blue_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeColorSpill_channel_get = _rpythonic_function_(		"CompositorNodeColorSpill_channel_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeColorSpill_unspill_green_get = _rpythonic_function_(		"CompositorNodeColorSpill_unspill_green_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeColorSpill_limit_channel_get = _rpythonic_function_(		"CompositorNodeColorSpill_limit_channel_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeColorSpill_unspill_red_get = _rpythonic_function_(		"CompositorNodeColorSpill_unspill_red_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeColorSpill_ratio_get = _rpythonic_function_(		"CompositorNodeColorSpill_ratio_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeColorSpill_use_unspill_get = _rpythonic_function_(		"CompositorNodeColorSpill_use_unspill_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeCombYCCA_mode_get = _rpythonic_function_(		"CompositorNodeCombYCCA_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeCrop_use_crop_size_get = _rpythonic_function_(		"CompositorNodeCrop_use_crop_size_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeCrop_relative_get = _rpythonic_function_(		"CompositorNodeCrop_relative_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeCrop_min_x_get = _rpythonic_function_(		"CompositorNodeCrop_min_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeCrop_rel_min_x_get = _rpythonic_function_(		"CompositorNodeCrop_rel_min_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeCrop_max_x_get = _rpythonic_function_(		"CompositorNodeCrop_max_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeCrop_rel_max_x_get = _rpythonic_function_(		"CompositorNodeCrop_rel_max_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeCrop_min_y_get = _rpythonic_function_(		"CompositorNodeCrop_min_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeCrop_rel_min_y_get = _rpythonic_function_(		"CompositorNodeCrop_rel_min_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeCrop_max_y_get = _rpythonic_function_(		"CompositorNodeCrop_max_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeCrop_rel_max_y_get = _rpythonic_function_(		"CompositorNodeCrop_rel_max_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeCurveRGB_mapping_get = _rpythonic_function_(		"CompositorNodeCurveRGB_mapping_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeCurveVec_mapping_get = _rpythonic_function_(		"CompositorNodeCurveVec_mapping_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeDBlur_angle_get = _rpythonic_function_(		"CompositorNodeDBlur_angle_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeDBlur_center_x_get = _rpythonic_function_(		"CompositorNodeDBlur_center_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeDBlur_center_y_get = _rpythonic_function_(		"CompositorNodeDBlur_center_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeDBlur_distance_get = _rpythonic_function_(		"CompositorNodeDBlur_distance_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeDBlur_iterations_get = _rpythonic_function_(		"CompositorNodeDBlur_iterations_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeDBlur_spin_get = _rpythonic_function_(		"CompositorNodeDBlur_spin_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeDBlur_use_wrap_get = _rpythonic_function_(		"CompositorNodeDBlur_use_wrap_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeDBlur_zoom_get = _rpythonic_function_(		"CompositorNodeDBlur_zoom_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeDefocus_angle_get = _rpythonic_function_(		"CompositorNodeDefocus_angle_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeDefocus_bokeh_get = _rpythonic_function_(		"CompositorNodeDefocus_bokeh_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeDefocus_use_gamma_correction_get = _rpythonic_function_(		"CompositorNodeDefocus_use_gamma_correction_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeDefocus_blur_max_get = _rpythonic_function_(		"CompositorNodeDefocus_blur_max_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeDefocus_use_preview_get = _rpythonic_function_(		"CompositorNodeDefocus_use_preview_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeDefocus_samples_get = _rpythonic_function_(		"CompositorNodeDefocus_samples_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeDefocus_threshold_get = _rpythonic_function_(		"CompositorNodeDefocus_threshold_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeDefocus_use_zbuffer_get = _rpythonic_function_(		"CompositorNodeDefocus_use_zbuffer_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeDefocus_z_scale_get = _rpythonic_function_(		"CompositorNodeDefocus_z_scale_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeDefocus_f_stop_get = _rpythonic_function_(		"CompositorNodeDefocus_f_stop_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeDiffMatte_falloff_get = _rpythonic_function_(		"CompositorNodeDiffMatte_falloff_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeDiffMatte_tolerance_get = _rpythonic_function_(		"CompositorNodeDiffMatte_tolerance_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeDilateErode_distance_get = _rpythonic_function_(		"CompositorNodeDilateErode_distance_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeDistanceMatte_falloff_get = _rpythonic_function_(		"CompositorNodeDistanceMatte_falloff_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeDistanceMatte_tolerance_get = _rpythonic_function_(		"CompositorNodeDistanceMatte_tolerance_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeFilter_filter_type_get = _rpythonic_function_(		"CompositorNodeFilter_filter_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeFlip_axis_get = _rpythonic_function_(		"CompositorNodeFlip_axis_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeGlare_angle_offset_get = _rpythonic_function_(		"CompositorNodeGlare_angle_offset_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeGlare_color_modulation_get = _rpythonic_function_(		"CompositorNodeGlare_color_modulation_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeGlare_fade_get = _rpythonic_function_(		"CompositorNodeGlare_fade_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeGlare_glare_type_get = _rpythonic_function_(		"CompositorNodeGlare_glare_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeGlare_iterations_get = _rpythonic_function_(		"CompositorNodeGlare_iterations_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeGlare_mix_get = _rpythonic_function_(		"CompositorNodeGlare_mix_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeGlare_quality_get = _rpythonic_function_(		"CompositorNodeGlare_quality_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeGlare_use_rotate_45_get = _rpythonic_function_(		"CompositorNodeGlare_use_rotate_45_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeGlare_size_get = _rpythonic_function_(		"CompositorNodeGlare_size_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeGlare_streaks_get = _rpythonic_function_(		"CompositorNodeGlare_streaks_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeGlare_threshold_get = _rpythonic_function_(		"CompositorNodeGlare_threshold_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeHueCorrect_mapping_get = _rpythonic_function_(		"CompositorNodeHueCorrect_mapping_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeHueSat_color_hue_get = _rpythonic_function_(		"CompositorNodeHueSat_color_hue_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeHueSat_color_saturation_get = _rpythonic_function_(		"CompositorNodeHueSat_color_saturation_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeHueSat_color_value_get = _rpythonic_function_(		"CompositorNodeHueSat_color_value_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeIDMask_index_get = _rpythonic_function_(		"CompositorNodeIDMask_index_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeImage_use_auto_refresh_get = _rpythonic_function_(		"CompositorNodeImage_use_auto_refresh_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeImage_use_cyclic_get = _rpythonic_function_(		"CompositorNodeImage_use_cyclic_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeImage_frame_duration_get = _rpythonic_function_(		"CompositorNodeImage_frame_duration_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeImage_image_get = _rpythonic_function_(		"CompositorNodeImage_image_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeImage_layer_get = _rpythonic_function_(		"CompositorNodeImage_layer_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeImage_frame_offset_get = _rpythonic_function_(		"CompositorNodeImage_frame_offset_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeImage_frame_start_get = _rpythonic_function_(		"CompositorNodeImage_frame_start_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeInvert_invert_alpha_get = _rpythonic_function_(		"CompositorNodeInvert_invert_alpha_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeInvert_invert_rgb_get = _rpythonic_function_(		"CompositorNodeInvert_invert_rgb_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeLensdist_use_fit_get = _rpythonic_function_(		"CompositorNodeLensdist_use_fit_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeLensdist_use_jitter_get = _rpythonic_function_(		"CompositorNodeLensdist_use_jitter_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeLensdist_use_projector_get = _rpythonic_function_(		"CompositorNodeLensdist_use_projector_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeLevels_channel_get = _rpythonic_function_(		"CompositorNodeLevels_channel_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeLumaMatte_limit_max_get = _rpythonic_function_(		"CompositorNodeLumaMatte_limit_max_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeLumaMatte_limit_min_get = _rpythonic_function_(		"CompositorNodeLumaMatte_limit_min_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeMapUV_alpha_get = _rpythonic_function_(		"CompositorNodeMapUV_alpha_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeMapValue_max_get = _rpythonic_function_(		"CompositorNodeMapValue_max_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 1 )),] )

CompositorNodeMapValue_min_get = _rpythonic_function_(		"CompositorNodeMapValue_min_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 1 )),] )

CompositorNodeMapValue_offset_get = _rpythonic_function_(		"CompositorNodeMapValue_offset_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 1 )),] )

CompositorNodeMapValue_size_get = _rpythonic_function_(		"CompositorNodeMapValue_size_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 1 )),] )

CompositorNodeMapValue_use_max_get = _rpythonic_function_(		"CompositorNodeMapValue_use_max_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeMapValue_use_min_get = _rpythonic_function_(		"CompositorNodeMapValue_use_min_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeMath_operation_get = _rpythonic_function_(		"CompositorNodeMath_operation_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeMixRGB_use_alpha_get = _rpythonic_function_(		"CompositorNodeMixRGB_use_alpha_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeMixRGB_blend_type_get = _rpythonic_function_(		"CompositorNodeMixRGB_blend_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeOutputFile_exr_codec_get = _rpythonic_function_(		"CompositorNodeOutputFile_exr_codec_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeOutputFile_frame_end_get = _rpythonic_function_(		"CompositorNodeOutputFile_frame_end_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeOutputFile_filepath_get = _rpythonic_function_(		"CompositorNodeOutputFile_filepath_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

CompositorNodeOutputFile_filepath_length = _rpythonic_function_(		"CompositorNodeOutputFile_filepath_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeOutputFile_use_exr_half_get = _rpythonic_function_(		"CompositorNodeOutputFile_use_exr_half_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeOutputFile_image_type_get = _rpythonic_function_(		"CompositorNodeOutputFile_image_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeOutputFile_quality_get = _rpythonic_function_(		"CompositorNodeOutputFile_quality_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeOutputFile_frame_start_get = _rpythonic_function_(		"CompositorNodeOutputFile_frame_start_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodePremulKey_mapping_get = _rpythonic_function_(		"CompositorNodePremulKey_mapping_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeRLayers_layer_get = _rpythonic_function_(		"CompositorNodeRLayers_layer_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeRLayers_scene_get = _rpythonic_function_(		"CompositorNodeRLayers_scene_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeRotate_filter_type_get = _rpythonic_function_(		"CompositorNodeRotate_filter_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeScale_space_get = _rpythonic_function_(		"CompositorNodeScale_space_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeSepYCCA_mode_get = _rpythonic_function_(		"CompositorNodeSepYCCA_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeSplitViewer_axis_get = _rpythonic_function_(		"CompositorNodeSplitViewer_axis_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeSplitViewer_factor_get = _rpythonic_function_(		"CompositorNodeSplitViewer_factor_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeTexture_node_output_get = _rpythonic_function_(		"CompositorNodeTexture_node_output_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeTexture_texture_get = _rpythonic_function_(		"CompositorNodeTexture_texture_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeTime_curve_get = _rpythonic_function_(		"CompositorNodeTime_curve_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeTime_frame_end_get = _rpythonic_function_(		"CompositorNodeTime_frame_end_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeTime_frame_start_get = _rpythonic_function_(		"CompositorNodeTime_frame_start_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeTonemap_adaptation_get = _rpythonic_function_(		"CompositorNodeTonemap_adaptation_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeTonemap_correction_get = _rpythonic_function_(		"CompositorNodeTonemap_correction_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeTonemap_contrast_get = _rpythonic_function_(		"CompositorNodeTonemap_contrast_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeTonemap_gamma_get = _rpythonic_function_(		"CompositorNodeTonemap_gamma_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeTonemap_intensity_get = _rpythonic_function_(		"CompositorNodeTonemap_intensity_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeTonemap_key_get = _rpythonic_function_(		"CompositorNodeTonemap_key_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeTonemap_offset_get = _rpythonic_function_(		"CompositorNodeTonemap_offset_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeTonemap_tonemap_type_get = _rpythonic_function_(		"CompositorNodeTonemap_tonemap_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeTree_nodes_begin = _rpythonic_function_(		"CompositorNodeTree_nodes_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeTree_nodes_next = _rpythonic_function_(		"CompositorNodeTree_nodes_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

CompositorNodeTree_nodes_end = _rpythonic_function_(		"CompositorNodeTree_nodes_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

CompositorNodeValToRGB_color_ramp_get = _rpythonic_function_(		"CompositorNodeValToRGB_color_ramp_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeVecBlur_factor_get = _rpythonic_function_(		"CompositorNodeVecBlur_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeVecBlur_use_curved_get = _rpythonic_function_(		"CompositorNodeVecBlur_use_curved_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeVecBlur_speed_max_get = _rpythonic_function_(		"CompositorNodeVecBlur_speed_max_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeVecBlur_speed_min_get = _rpythonic_function_(		"CompositorNodeVecBlur_speed_min_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeVecBlur_samples_get = _rpythonic_function_(		"CompositorNodeVecBlur_samples_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodeZcombine_use_alpha_get = _rpythonic_function_(		"CompositorNodeZcombine_use_alpha_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CompositorNodes_rna_type_get = _rpythonic_function_(		"CompositorNodes_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ConsoleLine_rna_type_get = _rpythonic_function_(		"ConsoleLine_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ConsoleLine_body_get = _rpythonic_function_(		"ConsoleLine_body_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ConsoleLine_body_length = _rpythonic_function_(		"ConsoleLine_body_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ConsoleLine_current_character_get = _rpythonic_function_(		"ConsoleLine_current_character_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Constraint_rna_type_get = _rpythonic_function_(		"Constraint_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Constraint_name_get = _rpythonic_function_(		"Constraint_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

Constraint_name_length = _rpythonic_function_(		"Constraint_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Constraint_active_get = _rpythonic_function_(		"Constraint_active_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Constraint_mute_get = _rpythonic_function_(		"Constraint_mute_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Constraint_show_expanded_get = _rpythonic_function_(		"Constraint_show_expanded_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Constraint_influence_get = _rpythonic_function_(		"Constraint_influence_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Constraint_error_location_get = _rpythonic_function_(		"Constraint_error_location_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Constraint_owner_space_get = _rpythonic_function_(		"Constraint_owner_space_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Constraint_is_proxy_local_get = _rpythonic_function_(		"Constraint_is_proxy_local_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Constraint_error_rotation_get = _rpythonic_function_(		"Constraint_error_rotation_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Constraint_target_space_get = _rpythonic_function_(		"Constraint_target_space_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Constraint_type_get = _rpythonic_function_(		"Constraint_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Constraint_is_valid_get = _rpythonic_function_(		"Constraint_is_valid_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ConstraintActuator_mode_get = _rpythonic_function_(		"ConstraintActuator_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ConstraintActuator_damping_get = _rpythonic_function_(		"ConstraintActuator_damping_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ConstraintActuator_fh_damping_get = _rpythonic_function_(		"ConstraintActuator_fh_damping_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ConstraintActuator_direction_get = _rpythonic_function_(		"ConstraintActuator_direction_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ConstraintActuator_direction_axis_get = _rpythonic_function_(		"ConstraintActuator_direction_axis_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ConstraintActuator_direction_axis_pos_get = _rpythonic_function_(		"ConstraintActuator_direction_axis_pos_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ConstraintActuator_distance_get = _rpythonic_function_(		"ConstraintActuator_distance_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ConstraintActuator_fh_height_get = _rpythonic_function_(		"ConstraintActuator_fh_height_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ConstraintActuator_fh_force_get = _rpythonic_function_(		"ConstraintActuator_fh_force_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ConstraintActuator_use_force_distance_get = _rpythonic_function_(		"ConstraintActuator_use_force_distance_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ConstraintActuator_use_local_get = _rpythonic_function_(		"ConstraintActuator_use_local_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ConstraintActuator_limit_get = _rpythonic_function_(		"ConstraintActuator_limit_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ConstraintActuator_use_material_detect_get = _rpythonic_function_(		"ConstraintActuator_use_material_detect_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ConstraintActuator_material_get = _rpythonic_function_(		"ConstraintActuator_material_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ConstraintActuator_material_length = _rpythonic_function_(		"ConstraintActuator_material_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ConstraintActuator_limit_max_get = _rpythonic_function_(		"ConstraintActuator_limit_max_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ConstraintActuator_angle_max_get = _rpythonic_function_(		"ConstraintActuator_angle_max_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ConstraintActuator_limit_min_get = _rpythonic_function_(		"ConstraintActuator_limit_min_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ConstraintActuator_angle_min_get = _rpythonic_function_(		"ConstraintActuator_angle_min_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ConstraintActuator_use_normal_get = _rpythonic_function_(		"ConstraintActuator_use_normal_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ConstraintActuator_use_fh_normal_get = _rpythonic_function_(		"ConstraintActuator_use_fh_normal_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ConstraintActuator_use_persistent_get = _rpythonic_function_(		"ConstraintActuator_use_persistent_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ConstraintActuator_property_get = _rpythonic_function_(		"ConstraintActuator_property_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ConstraintActuator_property_length = _rpythonic_function_(		"ConstraintActuator_property_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ConstraintActuator_range_get = _rpythonic_function_(		"ConstraintActuator_range_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ConstraintActuator_rotation_max_get = _rpythonic_function_(		"ConstraintActuator_rotation_max_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ConstraintActuator_use_fh_paralel_axis_get = _rpythonic_function_(		"ConstraintActuator_use_fh_paralel_axis_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ConstraintActuator_damping_rotation_get = _rpythonic_function_(		"ConstraintActuator_damping_rotation_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ConstraintActuator_time_get = _rpythonic_function_(		"ConstraintActuator_time_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ConstraintTarget_rna_type_get = _rpythonic_function_(		"ConstraintTarget_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ConstraintTarget_subtarget_get = _rpythonic_function_(		"ConstraintTarget_subtarget_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ConstraintTarget_subtarget_length = _rpythonic_function_(		"ConstraintTarget_subtarget_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ConstraintTarget_target_get = _rpythonic_function_(		"ConstraintTarget_target_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Context_rna_type_get = _rpythonic_function_(		"Context_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Context_area_get = _rpythonic_function_(		"Context_area_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Context_blend_data_get = _rpythonic_function_(		"Context_blend_data_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Context_mode_get = _rpythonic_function_(		"Context_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Context_region_get = _rpythonic_function_(		"Context_region_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Context_region_data_get = _rpythonic_function_(		"Context_region_data_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Context_scene_get = _rpythonic_function_(		"Context_scene_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Context_screen_get = _rpythonic_function_(		"Context_screen_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Context_space_data_get = _rpythonic_function_(		"Context_space_data_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Context_tool_settings_get = _rpythonic_function_(		"Context_tool_settings_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Context_user_preferences_get = _rpythonic_function_(		"Context_user_preferences_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Context_window_get = _rpythonic_function_(		"Context_window_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Context_window_manager_get = _rpythonic_function_(		"Context_window_manager_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ControlFluidSettings_attraction_radius_get = _rpythonic_function_(		"ControlFluidSettings_attraction_radius_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ControlFluidSettings_attraction_strength_get = _rpythonic_function_(		"ControlFluidSettings_attraction_strength_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ControlFluidSettings_use_get = _rpythonic_function_(		"ControlFluidSettings_use_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ControlFluidSettings_end_time_get = _rpythonic_function_(		"ControlFluidSettings_end_time_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ControlFluidSettings_quality_get = _rpythonic_function_(		"ControlFluidSettings_quality_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ControlFluidSettings_use_reverse_frames_get = _rpythonic_function_(		"ControlFluidSettings_use_reverse_frames_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ControlFluidSettings_start_time_get = _rpythonic_function_(		"ControlFluidSettings_start_time_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ControlFluidSettings_velocity_radius_get = _rpythonic_function_(		"ControlFluidSettings_velocity_radius_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ControlFluidSettings_velocity_strength_get = _rpythonic_function_(		"ControlFluidSettings_velocity_strength_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Controller_rna_type_get = _rpythonic_function_(		"Controller_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Controller_name_get = _rpythonic_function_(		"Controller_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

Controller_name_length = _rpythonic_function_(		"Controller_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Controller_states_get = _rpythonic_function_(		"Controller_states_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Controller_show_expanded_get = _rpythonic_function_(		"Controller_show_expanded_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Controller_use_priority_get = _rpythonic_function_(		"Controller_use_priority_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Controller_type_get = _rpythonic_function_(		"Controller_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CopyLocationConstraint_use_x_get = _rpythonic_function_(		"CopyLocationConstraint_use_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CopyLocationConstraint_use_y_get = _rpythonic_function_(		"CopyLocationConstraint_use_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CopyLocationConstraint_use_z_get = _rpythonic_function_(		"CopyLocationConstraint_use_z_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CopyLocationConstraint_head_tail_get = _rpythonic_function_(		"CopyLocationConstraint_head_tail_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CopyLocationConstraint_invert_x_get = _rpythonic_function_(		"CopyLocationConstraint_invert_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CopyLocationConstraint_invert_y_get = _rpythonic_function_(		"CopyLocationConstraint_invert_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CopyLocationConstraint_invert_z_get = _rpythonic_function_(		"CopyLocationConstraint_invert_z_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CopyLocationConstraint_use_offset_get = _rpythonic_function_(		"CopyLocationConstraint_use_offset_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CopyLocationConstraint_subtarget_get = _rpythonic_function_(		"CopyLocationConstraint_subtarget_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

CopyLocationConstraint_subtarget_length = _rpythonic_function_(		"CopyLocationConstraint_subtarget_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CopyLocationConstraint_target_get = _rpythonic_function_(		"CopyLocationConstraint_target_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CopyRotationConstraint_use_x_get = _rpythonic_function_(		"CopyRotationConstraint_use_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CopyRotationConstraint_use_y_get = _rpythonic_function_(		"CopyRotationConstraint_use_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CopyRotationConstraint_use_z_get = _rpythonic_function_(		"CopyRotationConstraint_use_z_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CopyRotationConstraint_invert_x_get = _rpythonic_function_(		"CopyRotationConstraint_invert_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CopyRotationConstraint_invert_y_get = _rpythonic_function_(		"CopyRotationConstraint_invert_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CopyRotationConstraint_invert_z_get = _rpythonic_function_(		"CopyRotationConstraint_invert_z_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CopyRotationConstraint_use_offset_get = _rpythonic_function_(		"CopyRotationConstraint_use_offset_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CopyRotationConstraint_subtarget_get = _rpythonic_function_(		"CopyRotationConstraint_subtarget_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

CopyRotationConstraint_subtarget_length = _rpythonic_function_(		"CopyRotationConstraint_subtarget_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CopyRotationConstraint_target_get = _rpythonic_function_(		"CopyRotationConstraint_target_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CopyScaleConstraint_use_x_get = _rpythonic_function_(		"CopyScaleConstraint_use_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CopyScaleConstraint_use_y_get = _rpythonic_function_(		"CopyScaleConstraint_use_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CopyScaleConstraint_use_z_get = _rpythonic_function_(		"CopyScaleConstraint_use_z_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CopyScaleConstraint_use_offset_get = _rpythonic_function_(		"CopyScaleConstraint_use_offset_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CopyScaleConstraint_subtarget_get = _rpythonic_function_(		"CopyScaleConstraint_subtarget_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

CopyScaleConstraint_subtarget_length = _rpythonic_function_(		"CopyScaleConstraint_subtarget_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CopyScaleConstraint_target_get = _rpythonic_function_(		"CopyScaleConstraint_target_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CopyTransformsConstraint_head_tail_get = _rpythonic_function_(		"CopyTransformsConstraint_head_tail_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CopyTransformsConstraint_subtarget_get = _rpythonic_function_(		"CopyTransformsConstraint_subtarget_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

CopyTransformsConstraint_subtarget_length = _rpythonic_function_(		"CopyTransformsConstraint_subtarget_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CopyTransformsConstraint_target_get = _rpythonic_function_(		"CopyTransformsConstraint_target_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Curve_animation_data_get = _rpythonic_function_(		"Curve_animation_data_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Curve_use_auto_texspace_get = _rpythonic_function_(		"Curve_use_auto_texspace_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Curve_use_fill_back_get = _rpythonic_function_(		"Curve_use_fill_back_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Curve_bevel_depth_get = _rpythonic_function_(		"Curve_bevel_depth_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Curve_bevel_object_get = _rpythonic_function_(		"Curve_bevel_object_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Curve_bevel_resolution_get = _rpythonic_function_(		"Curve_bevel_resolution_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Curve_use_deform_bounds_get = _rpythonic_function_(		"Curve_use_deform_bounds_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Curve_dimensions_get = _rpythonic_function_(		"Curve_dimensions_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Curve_show_handles_get = _rpythonic_function_(		"Curve_show_handles_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Curve_show_normal_face_get = _rpythonic_function_(		"Curve_show_normal_face_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Curve_eval_time_get = _rpythonic_function_(		"Curve_eval_time_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Curve_extrude_get = _rpythonic_function_(		"Curve_extrude_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Curve_use_fill_deform_get = _rpythonic_function_(		"Curve_use_fill_deform_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Curve_use_path_follow_get = _rpythonic_function_(		"Curve_use_path_follow_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Curve_use_fill_front_get = _rpythonic_function_(		"Curve_use_fill_front_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Curve_materials_begin = _rpythonic_function_(		"Curve_materials_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Curve_materials_next = _rpythonic_function_(		"Curve_materials_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Curve_materials_end = _rpythonic_function_(		"Curve_materials_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Curve_offset_get = _rpythonic_function_(		"Curve_offset_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Curve_use_time_offset_get = _rpythonic_function_(		"Curve_use_time_offset_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Curve_use_path_get = _rpythonic_function_(		"Curve_use_path_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Curve_path_duration_get = _rpythonic_function_(		"Curve_path_duration_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Curve_use_radius_get = _rpythonic_function_(		"Curve_use_radius_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Curve_render_resolution_u_get = _rpythonic_function_(		"Curve_render_resolution_u_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Curve_render_resolution_v_get = _rpythonic_function_(		"Curve_render_resolution_v_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Curve_resolution_u_get = _rpythonic_function_(		"Curve_resolution_u_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Curve_resolution_v_get = _rpythonic_function_(		"Curve_resolution_v_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Curve_shape_keys_get = _rpythonic_function_(		"Curve_shape_keys_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Curve_splines_begin = _rpythonic_function_(		"Curve_splines_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Curve_splines_next = _rpythonic_function_(		"Curve_splines_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Curve_splines_end = _rpythonic_function_(		"Curve_splines_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Curve_use_stretch_get = _rpythonic_function_(		"Curve_use_stretch_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Curve_taper_object_get = _rpythonic_function_(		"Curve_taper_object_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Curve_texspace_location_get = _rpythonic_function_(		"Curve_texspace_location_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

Curve_texspace_size_get = _rpythonic_function_(		"Curve_texspace_size_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

Curve_twist_mode_get = _rpythonic_function_(		"Curve_twist_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Curve_twist_smooth_get = _rpythonic_function_(		"Curve_twist_smooth_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Curve_use_uv_as_generated_get = _rpythonic_function_(		"Curve_use_uv_as_generated_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CurveMap_rna_type_get = _rpythonic_function_(		"CurveMap_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CurveMap_extend_get = _rpythonic_function_(		"CurveMap_extend_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CurveMap_points_begin = _rpythonic_function_(		"CurveMap_points_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CurveMap_points_next = _rpythonic_function_(		"CurveMap_points_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

CurveMap_points_end = _rpythonic_function_(		"CurveMap_points_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

CurveMapPoint_rna_type_get = _rpythonic_function_(		"CurveMapPoint_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CurveMapPoint_handle_type_get = _rpythonic_function_(		"CurveMapPoint_handle_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CurveMapPoint_location_get = _rpythonic_function_(		"CurveMapPoint_location_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 2 )),] )

CurveMapPoint_select_get = _rpythonic_function_(		"CurveMapPoint_select_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CurveMapping_rna_type_get = _rpythonic_function_(		"CurveMapping_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CurveMapping_black_level_get = _rpythonic_function_(		"CurveMapping_black_level_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

CurveMapping_use_clip_get = _rpythonic_function_(		"CurveMapping_use_clip_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CurveMapping_clip_max_x_get = _rpythonic_function_(		"CurveMapping_clip_max_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CurveMapping_clip_max_y_get = _rpythonic_function_(		"CurveMapping_clip_max_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CurveMapping_clip_min_x_get = _rpythonic_function_(		"CurveMapping_clip_min_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CurveMapping_clip_min_y_get = _rpythonic_function_(		"CurveMapping_clip_min_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CurveMapping_curves_begin = _rpythonic_function_(		"CurveMapping_curves_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CurveMapping_curves_next = _rpythonic_function_(		"CurveMapping_curves_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

CurveMapping_curves_end = _rpythonic_function_(		"CurveMapping_curves_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

CurveMapping_white_level_get = _rpythonic_function_(		"CurveMapping_white_level_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

CurveModifier_deform_axis_get = _rpythonic_function_(		"CurveModifier_deform_axis_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CurveModifier_object_get = _rpythonic_function_(		"CurveModifier_object_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CurveModifier_vertex_group_get = _rpythonic_function_(		"CurveModifier_vertex_group_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

CurveModifier_vertex_group_length = _rpythonic_function_(		"CurveModifier_vertex_group_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CurveSplines_rna_type_get = _rpythonic_function_(		"CurveSplines_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CurveSplines_active_get = _rpythonic_function_(		"CurveSplines_active_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DampedTrackConstraint_head_tail_get = _rpythonic_function_(		"DampedTrackConstraint_head_tail_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DampedTrackConstraint_subtarget_get = _rpythonic_function_(		"DampedTrackConstraint_subtarget_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

DampedTrackConstraint_subtarget_length = _rpythonic_function_(		"DampedTrackConstraint_subtarget_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DampedTrackConstraint_target_get = _rpythonic_function_(		"DampedTrackConstraint_target_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DampedTrackConstraint_track_axis_get = _rpythonic_function_(		"DampedTrackConstraint_track_axis_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DecimateModifier_face_count_get = _rpythonic_function_(		"DecimateModifier_face_count_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DecimateModifier_ratio_get = _rpythonic_function_(		"DecimateModifier_ratio_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DelaySensor_delay_get = _rpythonic_function_(		"DelaySensor_delay_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DelaySensor_duration_get = _rpythonic_function_(		"DelaySensor_duration_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DelaySensor_use_repeat_get = _rpythonic_function_(		"DelaySensor_use_repeat_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DisplaceModifier_direction_get = _rpythonic_function_(		"DisplaceModifier_direction_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DisplaceModifier_mid_level_get = _rpythonic_function_(		"DisplaceModifier_mid_level_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DisplaceModifier_strength_get = _rpythonic_function_(		"DisplaceModifier_strength_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DisplaceModifier_texture_get = _rpythonic_function_(		"DisplaceModifier_texture_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DisplaceModifier_texture_coords_object_get = _rpythonic_function_(		"DisplaceModifier_texture_coords_object_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DisplaceModifier_texture_coords_get = _rpythonic_function_(		"DisplaceModifier_texture_coords_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DisplaceModifier_uv_layer_get = _rpythonic_function_(		"DisplaceModifier_uv_layer_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

DisplaceModifier_uv_layer_length = _rpythonic_function_(		"DisplaceModifier_uv_layer_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DisplaceModifier_vertex_group_get = _rpythonic_function_(		"DisplaceModifier_vertex_group_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

DisplaceModifier_vertex_group_length = _rpythonic_function_(		"DisplaceModifier_vertex_group_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DistortedNoiseTexture_distortion_get = _rpythonic_function_(		"DistortedNoiseTexture_distortion_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DistortedNoiseTexture_nabla_get = _rpythonic_function_(		"DistortedNoiseTexture_nabla_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DistortedNoiseTexture_noise_basis_get = _rpythonic_function_(		"DistortedNoiseTexture_noise_basis_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DistortedNoiseTexture_noise_distortion_get = _rpythonic_function_(		"DistortedNoiseTexture_noise_distortion_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DistortedNoiseTexture_noise_scale_get = _rpythonic_function_(		"DistortedNoiseTexture_noise_scale_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DomainFluidSettings_compressibility_get = _rpythonic_function_(		"DomainFluidSettings_compressibility_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DomainFluidSettings_end_time_get = _rpythonic_function_(		"DomainFluidSettings_end_time_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DomainFluidSettings_fluid_mesh_vertices_begin = _rpythonic_function_(		"DomainFluidSettings_fluid_mesh_vertices_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DomainFluidSettings_fluid_mesh_vertices_next = _rpythonic_function_(		"DomainFluidSettings_fluid_mesh_vertices_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

DomainFluidSettings_fluid_mesh_vertices_end = _rpythonic_function_(		"DomainFluidSettings_fluid_mesh_vertices_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

DomainFluidSettings_generate_particles_get = _rpythonic_function_(		"DomainFluidSettings_generate_particles_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DomainFluidSettings_use_speed_vectors_get = _rpythonic_function_(		"DomainFluidSettings_use_speed_vectors_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DomainFluidSettings_gravity_get = _rpythonic_function_(		"DomainFluidSettings_gravity_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

DomainFluidSettings_grid_levels_get = _rpythonic_function_(		"DomainFluidSettings_grid_levels_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DomainFluidSettings_surface_noobs_get = _rpythonic_function_(		"DomainFluidSettings_surface_noobs_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DomainFluidSettings_memory_estimate_get = _rpythonic_function_(		"DomainFluidSettings_memory_estimate_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

DomainFluidSettings_memory_estimate_length = _rpythonic_function_(		"DomainFluidSettings_memory_estimate_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DomainFluidSettings_use_time_override_get = _rpythonic_function_(		"DomainFluidSettings_use_time_override_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DomainFluidSettings_partial_slip_factor_get = _rpythonic_function_(		"DomainFluidSettings_partial_slip_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DomainFluidSettings_filepath_get = _rpythonic_function_(		"DomainFluidSettings_filepath_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

DomainFluidSettings_filepath_length = _rpythonic_function_(		"DomainFluidSettings_filepath_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DomainFluidSettings_preview_resolution_get = _rpythonic_function_(		"DomainFluidSettings_preview_resolution_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DomainFluidSettings_simulation_scale_get = _rpythonic_function_(		"DomainFluidSettings_simulation_scale_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DomainFluidSettings_render_display_mode_get = _rpythonic_function_(		"DomainFluidSettings_render_display_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DomainFluidSettings_resolution_get = _rpythonic_function_(		"DomainFluidSettings_resolution_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DomainFluidSettings_use_reverse_frames_get = _rpythonic_function_(		"DomainFluidSettings_use_reverse_frames_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DomainFluidSettings_slip_type_get = _rpythonic_function_(		"DomainFluidSettings_slip_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DomainFluidSettings_start_time_get = _rpythonic_function_(		"DomainFluidSettings_start_time_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DomainFluidSettings_surface_smooth_get = _rpythonic_function_(		"DomainFluidSettings_surface_smooth_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DomainFluidSettings_surface_subdivisions_get = _rpythonic_function_(		"DomainFluidSettings_surface_subdivisions_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DomainFluidSettings_tracer_particles_get = _rpythonic_function_(		"DomainFluidSettings_tracer_particles_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DomainFluidSettings_viewport_display_mode_get = _rpythonic_function_(		"DomainFluidSettings_viewport_display_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DomainFluidSettings_viscosity_base_get = _rpythonic_function_(		"DomainFluidSettings_viscosity_base_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DomainFluidSettings_viscosity_exponent_get = _rpythonic_function_(		"DomainFluidSettings_viscosity_exponent_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DomainFluidSettings_viscosity_preset_get = _rpythonic_function_(		"DomainFluidSettings_viscosity_preset_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DopeSheet_rna_type_get = _rpythonic_function_(		"DopeSheet_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DopeSheet_show_expanded_summary_get = _rpythonic_function_(		"DopeSheet_show_expanded_summary_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DopeSheet_show_armatures_get = _rpythonic_function_(		"DopeSheet_show_armatures_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DopeSheet_show_cameras_get = _rpythonic_function_(		"DopeSheet_show_cameras_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DopeSheet_show_curves_get = _rpythonic_function_(		"DopeSheet_show_curves_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DopeSheet_show_hidden_get = _rpythonic_function_(		"DopeSheet_show_hidden_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DopeSheet_show_lamps_get = _rpythonic_function_(		"DopeSheet_show_lamps_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DopeSheet_show_lattices_get = _rpythonic_function_(		"DopeSheet_show_lattices_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DopeSheet_show_materials_get = _rpythonic_function_(		"DopeSheet_show_materials_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DopeSheet_show_meshes_get = _rpythonic_function_(		"DopeSheet_show_meshes_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DopeSheet_show_metaballs_get = _rpythonic_function_(		"DopeSheet_show_metaballs_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DopeSheet_show_nodes_get = _rpythonic_function_(		"DopeSheet_show_nodes_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DopeSheet_show_particles_get = _rpythonic_function_(		"DopeSheet_show_particles_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DopeSheet_show_scenes_get = _rpythonic_function_(		"DopeSheet_show_scenes_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DopeSheet_show_shapekeys_get = _rpythonic_function_(		"DopeSheet_show_shapekeys_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DopeSheet_show_speakers_get = _rpythonic_function_(		"DopeSheet_show_speakers_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DopeSheet_show_summary_get = _rpythonic_function_(		"DopeSheet_show_summary_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DopeSheet_show_textures_get = _rpythonic_function_(		"DopeSheet_show_textures_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DopeSheet_show_transforms_get = _rpythonic_function_(		"DopeSheet_show_transforms_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DopeSheet_show_worlds_get = _rpythonic_function_(		"DopeSheet_show_worlds_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DopeSheet_filter_fcurve_name_get = _rpythonic_function_(		"DopeSheet_filter_fcurve_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

DopeSheet_filter_fcurve_name_length = _rpythonic_function_(		"DopeSheet_filter_fcurve_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DopeSheet_filter_group_get = _rpythonic_function_(		"DopeSheet_filter_group_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DopeSheet_show_missing_nla_get = _rpythonic_function_(		"DopeSheet_show_missing_nla_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DopeSheet_show_only_matching_fcurves_get = _rpythonic_function_(		"DopeSheet_show_only_matching_fcurves_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DopeSheet_show_only_group_objects_get = _rpythonic_function_(		"DopeSheet_show_only_group_objects_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DopeSheet_show_only_selected_get = _rpythonic_function_(		"DopeSheet_show_only_selected_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DopeSheet_show_datablock_filters_get = _rpythonic_function_(		"DopeSheet_show_datablock_filters_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DopeSheet_source_get = _rpythonic_function_(		"DopeSheet_source_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Driver_rna_type_get = _rpythonic_function_(		"Driver_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Driver_expression_get = _rpythonic_function_(		"Driver_expression_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

Driver_expression_length = _rpythonic_function_(		"Driver_expression_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Driver_is_valid_get = _rpythonic_function_(		"Driver_is_valid_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Driver_show_debug_info_get = _rpythonic_function_(		"Driver_show_debug_info_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Driver_type_get = _rpythonic_function_(		"Driver_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Driver_variables_begin = _rpythonic_function_(		"Driver_variables_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Driver_variables_next = _rpythonic_function_(		"Driver_variables_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Driver_variables_end = _rpythonic_function_(		"Driver_variables_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

DriverTarget_rna_type_get = _rpythonic_function_(		"DriverTarget_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DriverTarget_bone_target_get = _rpythonic_function_(		"DriverTarget_bone_target_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

DriverTarget_bone_target_length = _rpythonic_function_(		"DriverTarget_bone_target_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DriverTarget_data_path_get = _rpythonic_function_(		"DriverTarget_data_path_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

DriverTarget_data_path_length = _rpythonic_function_(		"DriverTarget_data_path_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DriverTarget_id_get = _rpythonic_function_(		"DriverTarget_id_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DriverTarget_id_type_get = _rpythonic_function_(		"DriverTarget_id_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DriverTarget_transform_space_get = _rpythonic_function_(		"DriverTarget_transform_space_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DriverTarget_transform_type_get = _rpythonic_function_(		"DriverTarget_transform_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DriverVariable_rna_type_get = _rpythonic_function_(		"DriverVariable_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DriverVariable_name_get = _rpythonic_function_(		"DriverVariable_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

DriverVariable_name_length = _rpythonic_function_(		"DriverVariable_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DriverVariable_targets_begin = _rpythonic_function_(		"DriverVariable_targets_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DriverVariable_targets_next = _rpythonic_function_(		"DriverVariable_targets_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

DriverVariable_targets_end = _rpythonic_function_(		"DriverVariable_targets_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

DriverVariable_type_get = _rpythonic_function_(		"DriverVariable_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DupliObject_rna_type_get = _rpythonic_function_(		"DupliObject_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DupliObject_object_get = _rpythonic_function_(		"DupliObject_object_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

DupliObject_matrix_get = _rpythonic_function_(		"DupliObject_matrix_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 16 )),] )

DupliObject_matrix_original_get = _rpythonic_function_(		"DupliObject_matrix_original_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 16 )),] )

EdgeSplitModifier_split_angle_get = _rpythonic_function_(		"EdgeSplitModifier_split_angle_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EdgeSplitModifier_use_edge_angle_get = _rpythonic_function_(		"EdgeSplitModifier_use_edge_angle_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EdgeSplitModifier_use_edge_sharp_get = _rpythonic_function_(		"EdgeSplitModifier_use_edge_sharp_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EditBone_rna_type_get = _rpythonic_function_(		"EditBone_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EditBone_name_get = _rpythonic_function_(		"EditBone_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

EditBone_name_length = _rpythonic_function_(		"EditBone_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EditBone_bbone_x_get = _rpythonic_function_(		"EditBone_bbone_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EditBone_bbone_z_get = _rpythonic_function_(		"EditBone_bbone_z_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EditBone_bbone_in_get = _rpythonic_function_(		"EditBone_bbone_in_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EditBone_bbone_out_get = _rpythonic_function_(		"EditBone_bbone_out_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EditBone_bbone_segments_get = _rpythonic_function_(		"EditBone_bbone_segments_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EditBone_use_connect_get = _rpythonic_function_(		"EditBone_use_connect_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EditBone_use_cyclic_offset_get = _rpythonic_function_(		"EditBone_use_cyclic_offset_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EditBone_use_deform_get = _rpythonic_function_(		"EditBone_use_deform_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EditBone_show_wire_get = _rpythonic_function_(		"EditBone_show_wire_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EditBone_matrix_get = _rpythonic_function_(		"EditBone_matrix_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 16 )),] )

EditBone_envelope_distance_get = _rpythonic_function_(		"EditBone_envelope_distance_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EditBone_envelope_weight_get = _rpythonic_function_(		"EditBone_envelope_weight_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EditBone_head_radius_get = _rpythonic_function_(		"EditBone_head_radius_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EditBone_tail_radius_get = _rpythonic_function_(		"EditBone_tail_radius_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EditBone_head_get = _rpythonic_function_(		"EditBone_head_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

EditBone_select_head_get = _rpythonic_function_(		"EditBone_select_head_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EditBone_hide_get = _rpythonic_function_(		"EditBone_hide_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EditBone_use_inherit_rotation_get = _rpythonic_function_(		"EditBone_use_inherit_rotation_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EditBone_use_inherit_scale_get = _rpythonic_function_(		"EditBone_use_inherit_scale_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EditBone_layers_get = _rpythonic_function_(		"EditBone_layers_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_int * 32 )),] )

EditBone_use_local_location_get = _rpythonic_function_(		"EditBone_use_local_location_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EditBone_lock_get = _rpythonic_function_(		"EditBone_lock_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EditBone_use_envelope_multiply_get = _rpythonic_function_(		"EditBone_use_envelope_multiply_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EditBone_parent_get = _rpythonic_function_(		"EditBone_parent_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EditBone_roll_get = _rpythonic_function_(		"EditBone_roll_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EditBone_select_get = _rpythonic_function_(		"EditBone_select_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EditBone_hide_select_get = _rpythonic_function_(		"EditBone_hide_select_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EditBone_tail_get = _rpythonic_function_(		"EditBone_tail_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

EditBone_select_tail_get = _rpythonic_function_(		"EditBone_select_tail_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EditObjectActuator_use_3d_tracking_get = _rpythonic_function_(		"EditObjectActuator_use_3d_tracking_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EditObjectActuator_angular_velocity_get = _rpythonic_function_(		"EditObjectActuator_angular_velocity_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

EditObjectActuator_dynamic_operation_get = _rpythonic_function_(		"EditObjectActuator_dynamic_operation_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EditObjectActuator_mode_get = _rpythonic_function_(		"EditObjectActuator_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EditObjectActuator_use_replace_display_mesh_get = _rpythonic_function_(		"EditObjectActuator_use_replace_display_mesh_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EditObjectActuator_use_local_linear_velocity_get = _rpythonic_function_(		"EditObjectActuator_use_local_linear_velocity_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EditObjectActuator_use_local_angular_velocity_get = _rpythonic_function_(		"EditObjectActuator_use_local_angular_velocity_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EditObjectActuator_linear_velocity_get = _rpythonic_function_(		"EditObjectActuator_linear_velocity_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

EditObjectActuator_mass_get = _rpythonic_function_(		"EditObjectActuator_mass_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EditObjectActuator_mesh_get = _rpythonic_function_(		"EditObjectActuator_mesh_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EditObjectActuator_object_get = _rpythonic_function_(		"EditObjectActuator_object_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EditObjectActuator_track_object_get = _rpythonic_function_(		"EditObjectActuator_track_object_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EditObjectActuator_use_replace_physics_mesh_get = _rpythonic_function_(		"EditObjectActuator_use_replace_physics_mesh_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EditObjectActuator_time_get = _rpythonic_function_(		"EditObjectActuator_time_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EffectSequence_color_balance_get = _rpythonic_function_(		"EffectSequence_color_balance_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EffectSequence_use_float_get = _rpythonic_function_(		"EffectSequence_use_float_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EffectSequence_crop_get = _rpythonic_function_(		"EffectSequence_crop_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EffectSequence_use_deinterlace_get = _rpythonic_function_(		"EffectSequence_use_deinterlace_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EffectSequence_use_reverse_frames_get = _rpythonic_function_(		"EffectSequence_use_reverse_frames_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EffectSequence_use_flip_x_get = _rpythonic_function_(		"EffectSequence_use_flip_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EffectSequence_use_flip_y_get = _rpythonic_function_(		"EffectSequence_use_flip_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EffectSequence_color_multiply_get = _rpythonic_function_(		"EffectSequence_color_multiply_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EffectSequence_use_premultiply_get = _rpythonic_function_(		"EffectSequence_use_premultiply_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EffectSequence_proxy_get = _rpythonic_function_(		"EffectSequence_proxy_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EffectSequence_use_proxy_custom_directory_get = _rpythonic_function_(		"EffectSequence_use_proxy_custom_directory_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EffectSequence_use_proxy_custom_file_get = _rpythonic_function_(		"EffectSequence_use_proxy_custom_file_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EffectSequence_color_saturation_get = _rpythonic_function_(		"EffectSequence_color_saturation_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EffectSequence_strobe_get = _rpythonic_function_(		"EffectSequence_strobe_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EffectSequence_transform_get = _rpythonic_function_(		"EffectSequence_transform_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EffectSequence_use_color_balance_get = _rpythonic_function_(		"EffectSequence_use_color_balance_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EffectSequence_use_crop_get = _rpythonic_function_(		"EffectSequence_use_crop_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EffectSequence_use_proxy_get = _rpythonic_function_(		"EffectSequence_use_proxy_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EffectSequence_use_translation_get = _rpythonic_function_(		"EffectSequence_use_translation_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EffectorWeights_rna_type_get = _rpythonic_function_(		"EffectorWeights_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EffectorWeights_all_get = _rpythonic_function_(		"EffectorWeights_all_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EffectorWeights_boid_get = _rpythonic_function_(		"EffectorWeights_boid_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EffectorWeights_charge_get = _rpythonic_function_(		"EffectorWeights_charge_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EffectorWeights_curve_guide_get = _rpythonic_function_(		"EffectorWeights_curve_guide_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EffectorWeights_drag_get = _rpythonic_function_(		"EffectorWeights_drag_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EffectorWeights_group_get = _rpythonic_function_(		"EffectorWeights_group_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EffectorWeights_force_get = _rpythonic_function_(		"EffectorWeights_force_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EffectorWeights_gravity_get = _rpythonic_function_(		"EffectorWeights_gravity_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EffectorWeights_harmonic_get = _rpythonic_function_(		"EffectorWeights_harmonic_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EffectorWeights_lennardjones_get = _rpythonic_function_(		"EffectorWeights_lennardjones_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EffectorWeights_magnetic_get = _rpythonic_function_(		"EffectorWeights_magnetic_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EffectorWeights_texture_get = _rpythonic_function_(		"EffectorWeights_texture_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EffectorWeights_turbulence_get = _rpythonic_function_(		"EffectorWeights_turbulence_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EffectorWeights_apply_to_hair_growing_get = _rpythonic_function_(		"EffectorWeights_apply_to_hair_growing_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EffectorWeights_vortex_get = _rpythonic_function_(		"EffectorWeights_vortex_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EffectorWeights_wind_get = _rpythonic_function_(		"EffectorWeights_wind_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EnumProperty_default_value_get = _rpythonic_function_(		"EnumProperty_default_value_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EnumProperty_default_flag_get = _rpythonic_function_(		"EnumProperty_default_flag_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EnumProperty_enum_items_begin = _rpythonic_function_(		"EnumProperty_enum_items_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EnumProperty_enum_items_next = _rpythonic_function_(		"EnumProperty_enum_items_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

EnumProperty_enum_items_end = _rpythonic_function_(		"EnumProperty_enum_items_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

EnumPropertyItem_rna_type_get = _rpythonic_function_(		"EnumPropertyItem_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EnumPropertyItem_name_get = _rpythonic_function_(		"EnumPropertyItem_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

EnumPropertyItem_name_length = _rpythonic_function_(		"EnumPropertyItem_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EnumPropertyItem_description_get = _rpythonic_function_(		"EnumPropertyItem_description_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

EnumPropertyItem_description_length = _rpythonic_function_(		"EnumPropertyItem_description_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EnumPropertyItem_identifier_get = _rpythonic_function_(		"EnumPropertyItem_identifier_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

EnumPropertyItem_identifier_length = _rpythonic_function_(		"EnumPropertyItem_identifier_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EnumPropertyItem_value_get = _rpythonic_function_(		"EnumPropertyItem_value_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EnvironmentMap_rna_type_get = _rpythonic_function_(		"EnvironmentMap_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EnvironmentMap_clip_end_get = _rpythonic_function_(		"EnvironmentMap_clip_end_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EnvironmentMap_clip_start_get = _rpythonic_function_(		"EnvironmentMap_clip_start_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EnvironmentMap_depth_get = _rpythonic_function_(		"EnvironmentMap_depth_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EnvironmentMap_layers_ignore_get = _rpythonic_function_(		"EnvironmentMap_layers_ignore_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_int * 20 )),] )

EnvironmentMap_mapping_get = _rpythonic_function_(		"EnvironmentMap_mapping_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EnvironmentMap_resolution_get = _rpythonic_function_(		"EnvironmentMap_resolution_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EnvironmentMap_source_get = _rpythonic_function_(		"EnvironmentMap_source_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EnvironmentMap_is_valid_get = _rpythonic_function_(		"EnvironmentMap_is_valid_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EnvironmentMap_viewpoint_object_get = _rpythonic_function_(		"EnvironmentMap_viewpoint_object_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EnvironmentMap_zoom_get = _rpythonic_function_(		"EnvironmentMap_zoom_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EnvironmentMapTexture_environment_map_get = _rpythonic_function_(		"EnvironmentMapTexture_environment_map_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EnvironmentMapTexture_filter_type_get = _rpythonic_function_(		"EnvironmentMapTexture_filter_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EnvironmentMapTexture_filter_eccentricity_get = _rpythonic_function_(		"EnvironmentMapTexture_filter_eccentricity_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EnvironmentMapTexture_filter_probes_get = _rpythonic_function_(		"EnvironmentMapTexture_filter_probes_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EnvironmentMapTexture_filter_size_get = _rpythonic_function_(		"EnvironmentMapTexture_filter_size_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EnvironmentMapTexture_image_get = _rpythonic_function_(		"EnvironmentMapTexture_image_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EnvironmentMapTexture_image_user_get = _rpythonic_function_(		"EnvironmentMapTexture_image_user_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EnvironmentMapTexture_use_mipmap_get = _rpythonic_function_(		"EnvironmentMapTexture_use_mipmap_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EnvironmentMapTexture_use_mipmap_gauss_get = _rpythonic_function_(		"EnvironmentMapTexture_use_mipmap_gauss_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

EnvironmentMapTexture_use_filter_size_min_get = _rpythonic_function_(		"EnvironmentMapTexture_use_filter_size_min_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Event_rna_type_get = _rpythonic_function_(		"Event_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Event_ascii_get = _rpythonic_function_(		"Event_ascii_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

Event_ascii_length = _rpythonic_function_(		"Event_ascii_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Event_alt_get = _rpythonic_function_(		"Event_alt_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Event_ctrl_get = _rpythonic_function_(		"Event_ctrl_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Event_mouse_prev_x_get = _rpythonic_function_(		"Event_mouse_prev_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Event_mouse_prev_y_get = _rpythonic_function_(		"Event_mouse_prev_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Event_mouse_x_get = _rpythonic_function_(		"Event_mouse_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Event_mouse_region_x_get = _rpythonic_function_(		"Event_mouse_region_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Event_mouse_y_get = _rpythonic_function_(		"Event_mouse_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Event_mouse_region_y_get = _rpythonic_function_(		"Event_mouse_region_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Event_oskey_get = _rpythonic_function_(		"Event_oskey_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Event_shift_get = _rpythonic_function_(		"Event_shift_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Event_type_get = _rpythonic_function_(		"Event_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Event_value_get = _rpythonic_function_(		"Event_value_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ExplodeModifier_show_alive_get = _rpythonic_function_(		"ExplodeModifier_show_alive_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ExplodeModifier_use_edge_cut_get = _rpythonic_function_(		"ExplodeModifier_use_edge_cut_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ExplodeModifier_show_dead_get = _rpythonic_function_(		"ExplodeModifier_show_dead_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ExplodeModifier_particle_uv_get = _rpythonic_function_(		"ExplodeModifier_particle_uv_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ExplodeModifier_particle_uv_length = _rpythonic_function_(		"ExplodeModifier_particle_uv_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ExplodeModifier_protect_get = _rpythonic_function_(		"ExplodeModifier_protect_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ExplodeModifier_use_size_get = _rpythonic_function_(		"ExplodeModifier_use_size_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ExplodeModifier_show_unborn_get = _rpythonic_function_(		"ExplodeModifier_show_unborn_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ExplodeModifier_vertex_group_get = _rpythonic_function_(		"ExplodeModifier_vertex_group_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ExplodeModifier_vertex_group_length = _rpythonic_function_(		"ExplodeModifier_vertex_group_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ExpressionController_expression_get = _rpythonic_function_(		"ExpressionController_expression_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ExpressionController_expression_length = _rpythonic_function_(		"ExpressionController_expression_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FCurve_rna_type_get = _rpythonic_function_(		"FCurve_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FCurve_color_get = _rpythonic_function_(		"FCurve_color_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

FCurve_color_mode_get = _rpythonic_function_(		"FCurve_color_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FCurve_data_path_get = _rpythonic_function_(		"FCurve_data_path_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

FCurve_data_path_length = _rpythonic_function_(		"FCurve_data_path_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FCurve_driver_get = _rpythonic_function_(		"FCurve_driver_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FCurve_extrapolation_get = _rpythonic_function_(		"FCurve_extrapolation_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FCurve_group_get = _rpythonic_function_(		"FCurve_group_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FCurve_hide_get = _rpythonic_function_(		"FCurve_hide_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FCurve_keyframe_points_begin = _rpythonic_function_(		"FCurve_keyframe_points_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FCurve_keyframe_points_next = _rpythonic_function_(		"FCurve_keyframe_points_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

FCurve_keyframe_points_end = _rpythonic_function_(		"FCurve_keyframe_points_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

FCurve_lock_get = _rpythonic_function_(		"FCurve_lock_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FCurve_modifiers_begin = _rpythonic_function_(		"FCurve_modifiers_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FCurve_modifiers_next = _rpythonic_function_(		"FCurve_modifiers_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

FCurve_modifiers_end = _rpythonic_function_(		"FCurve_modifiers_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

FCurve_mute_get = _rpythonic_function_(		"FCurve_mute_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FCurve_array_index_get = _rpythonic_function_(		"FCurve_array_index_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FCurve_sampled_points_begin = _rpythonic_function_(		"FCurve_sampled_points_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FCurve_sampled_points_next = _rpythonic_function_(		"FCurve_sampled_points_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

FCurve_sampled_points_end = _rpythonic_function_(		"FCurve_sampled_points_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

FCurve_select_get = _rpythonic_function_(		"FCurve_select_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FCurve_is_valid_get = _rpythonic_function_(		"FCurve_is_valid_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FCurveKeyframePoints_rna_type_get = _rpythonic_function_(		"FCurveKeyframePoints_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FCurveModifiers_rna_type_get = _rpythonic_function_(		"FCurveModifiers_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FCurveModifiers_active_get = _rpythonic_function_(		"FCurveModifiers_active_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FCurveSample_rna_type_get = _rpythonic_function_(		"FCurveSample_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FCurveSample_co_get = _rpythonic_function_(		"FCurveSample_co_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 2 )),] )

FCurveSample_select_get = _rpythonic_function_(		"FCurveSample_select_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifier_rna_type_get = _rpythonic_function_(		"FModifier_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifier_active_get = _rpythonic_function_(		"FModifier_active_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifier_blend_in_get = _rpythonic_function_(		"FModifier_blend_in_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifier_blend_out_get = _rpythonic_function_(		"FModifier_blend_out_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifier_is_valid_get = _rpythonic_function_(		"FModifier_is_valid_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifier_frame_end_get = _rpythonic_function_(		"FModifier_frame_end_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifier_show_expanded_get = _rpythonic_function_(		"FModifier_show_expanded_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifier_influence_get = _rpythonic_function_(		"FModifier_influence_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifier_mute_get = _rpythonic_function_(		"FModifier_mute_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifier_use_restricted_range_get = _rpythonic_function_(		"FModifier_use_restricted_range_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifier_frame_start_get = _rpythonic_function_(		"FModifier_frame_start_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifier_type_get = _rpythonic_function_(		"FModifier_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifier_use_influence_get = _rpythonic_function_(		"FModifier_use_influence_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifierCycles_cycles_after_get = _rpythonic_function_(		"FModifierCycles_cycles_after_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifierCycles_mode_after_get = _rpythonic_function_(		"FModifierCycles_mode_after_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifierCycles_cycles_before_get = _rpythonic_function_(		"FModifierCycles_cycles_before_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifierCycles_mode_before_get = _rpythonic_function_(		"FModifierCycles_mode_before_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifierEnvelope_control_points_begin = _rpythonic_function_(		"FModifierEnvelope_control_points_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifierEnvelope_control_points_next = _rpythonic_function_(		"FModifierEnvelope_control_points_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

FModifierEnvelope_control_points_end = _rpythonic_function_(		"FModifierEnvelope_control_points_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

FModifierEnvelope_default_max_get = _rpythonic_function_(		"FModifierEnvelope_default_max_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifierEnvelope_default_min_get = _rpythonic_function_(		"FModifierEnvelope_default_min_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifierEnvelope_reference_value_get = _rpythonic_function_(		"FModifierEnvelope_reference_value_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifierEnvelopeControlPoint_rna_type_get = _rpythonic_function_(		"FModifierEnvelopeControlPoint_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifierEnvelopeControlPoint_frame_get = _rpythonic_function_(		"FModifierEnvelopeControlPoint_frame_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifierEnvelopeControlPoint_max_get = _rpythonic_function_(		"FModifierEnvelopeControlPoint_max_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifierEnvelopeControlPoint_min_get = _rpythonic_function_(		"FModifierEnvelopeControlPoint_min_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifierFunctionGenerator_use_additive_get = _rpythonic_function_(		"FModifierFunctionGenerator_use_additive_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifierFunctionGenerator_amplitude_get = _rpythonic_function_(		"FModifierFunctionGenerator_amplitude_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifierFunctionGenerator_phase_multiplier_get = _rpythonic_function_(		"FModifierFunctionGenerator_phase_multiplier_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifierFunctionGenerator_phase_offset_get = _rpythonic_function_(		"FModifierFunctionGenerator_phase_offset_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifierFunctionGenerator_function_type_get = _rpythonic_function_(		"FModifierFunctionGenerator_function_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifierFunctionGenerator_value_offset_get = _rpythonic_function_(		"FModifierFunctionGenerator_value_offset_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifierGenerator_use_additive_get = _rpythonic_function_(		"FModifierGenerator_use_additive_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifierGenerator_coefficients_get = _rpythonic_function_(		"FModifierGenerator_coefficients_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 32 )),] )

FModifierGenerator_mode_get = _rpythonic_function_(		"FModifierGenerator_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifierGenerator_poly_order_get = _rpythonic_function_(		"FModifierGenerator_poly_order_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifierLimits_use_max_x_get = _rpythonic_function_(		"FModifierLimits_use_max_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifierLimits_max_x_get = _rpythonic_function_(		"FModifierLimits_max_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifierLimits_use_max_y_get = _rpythonic_function_(		"FModifierLimits_use_max_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifierLimits_max_y_get = _rpythonic_function_(		"FModifierLimits_max_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifierLimits_use_min_x_get = _rpythonic_function_(		"FModifierLimits_use_min_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifierLimits_min_x_get = _rpythonic_function_(		"FModifierLimits_min_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifierLimits_use_min_y_get = _rpythonic_function_(		"FModifierLimits_use_min_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifierLimits_min_y_get = _rpythonic_function_(		"FModifierLimits_min_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifierNoise_blend_type_get = _rpythonic_function_(		"FModifierNoise_blend_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifierNoise_depth_get = _rpythonic_function_(		"FModifierNoise_depth_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifierNoise_phase_get = _rpythonic_function_(		"FModifierNoise_phase_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifierNoise_scale_get = _rpythonic_function_(		"FModifierNoise_scale_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifierNoise_strength_get = _rpythonic_function_(		"FModifierNoise_strength_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifierStepped_frame_end_get = _rpythonic_function_(		"FModifierStepped_frame_end_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifierStepped_frame_offset_get = _rpythonic_function_(		"FModifierStepped_frame_offset_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifierStepped_frame_start_get = _rpythonic_function_(		"FModifierStepped_frame_start_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifierStepped_frame_step_get = _rpythonic_function_(		"FModifierStepped_frame_step_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifierStepped_use_frame_end_get = _rpythonic_function_(		"FModifierStepped_use_frame_end_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FModifierStepped_use_frame_start_get = _rpythonic_function_(		"FModifierStepped_use_frame_start_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FieldSettings_rna_type_get = _rpythonic_function_(		"FieldSettings_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FieldSettings_use_2d_force_get = _rpythonic_function_(		"FieldSettings_use_2d_force_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FieldSettings_use_absorption_get = _rpythonic_function_(		"FieldSettings_use_absorption_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FieldSettings_use_guide_path_add_get = _rpythonic_function_(		"FieldSettings_use_guide_path_add_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FieldSettings_guide_clump_amount_get = _rpythonic_function_(		"FieldSettings_guide_clump_amount_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FieldSettings_guide_kink_amplitude_get = _rpythonic_function_(		"FieldSettings_guide_kink_amplitude_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FieldSettings_guide_kink_axis_get = _rpythonic_function_(		"FieldSettings_guide_kink_axis_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FieldSettings_falloff_type_get = _rpythonic_function_(		"FieldSettings_falloff_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FieldSettings_falloff_power_get = _rpythonic_function_(		"FieldSettings_falloff_power_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FieldSettings_flow_get = _rpythonic_function_(		"FieldSettings_flow_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FieldSettings_guide_free_get = _rpythonic_function_(		"FieldSettings_guide_free_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FieldSettings_guide_kink_frequency_get = _rpythonic_function_(		"FieldSettings_guide_kink_frequency_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FieldSettings_harmonic_damping_get = _rpythonic_function_(		"FieldSettings_harmonic_damping_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FieldSettings_inflow_get = _rpythonic_function_(		"FieldSettings_inflow_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FieldSettings_guide_kink_type_get = _rpythonic_function_(		"FieldSettings_guide_kink_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FieldSettings_linear_drag_get = _rpythonic_function_(		"FieldSettings_linear_drag_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FieldSettings_apply_to_location_get = _rpythonic_function_(		"FieldSettings_apply_to_location_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FieldSettings_distance_max_get = _rpythonic_function_(		"FieldSettings_distance_max_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FieldSettings_radial_max_get = _rpythonic_function_(		"FieldSettings_radial_max_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FieldSettings_distance_min_get = _rpythonic_function_(		"FieldSettings_distance_min_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FieldSettings_guide_minimum_get = _rpythonic_function_(		"FieldSettings_guide_minimum_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FieldSettings_radial_min_get = _rpythonic_function_(		"FieldSettings_radial_min_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FieldSettings_use_multiple_springs_get = _rpythonic_function_(		"FieldSettings_use_multiple_springs_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FieldSettings_texture_nabla_get = _rpythonic_function_(		"FieldSettings_texture_nabla_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FieldSettings_noise_get = _rpythonic_function_(		"FieldSettings_noise_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FieldSettings_quadratic_drag_get = _rpythonic_function_(		"FieldSettings_quadratic_drag_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FieldSettings_radial_falloff_get = _rpythonic_function_(		"FieldSettings_radial_falloff_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FieldSettings_rest_length_get = _rpythonic_function_(		"FieldSettings_rest_length_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FieldSettings_use_root_coords_get = _rpythonic_function_(		"FieldSettings_use_root_coords_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FieldSettings_apply_to_rotation_get = _rpythonic_function_(		"FieldSettings_apply_to_rotation_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FieldSettings_seed_get = _rpythonic_function_(		"FieldSettings_seed_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FieldSettings_shape_get = _rpythonic_function_(		"FieldSettings_shape_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FieldSettings_guide_clump_shape_get = _rpythonic_function_(		"FieldSettings_guide_clump_shape_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FieldSettings_guide_kink_shape_get = _rpythonic_function_(		"FieldSettings_guide_kink_shape_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FieldSettings_size_get = _rpythonic_function_(		"FieldSettings_size_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FieldSettings_strength_get = _rpythonic_function_(		"FieldSettings_strength_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FieldSettings_texture_get = _rpythonic_function_(		"FieldSettings_texture_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FieldSettings_texture_mode_get = _rpythonic_function_(		"FieldSettings_texture_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FieldSettings_type_get = _rpythonic_function_(		"FieldSettings_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FieldSettings_use_object_coords_get = _rpythonic_function_(		"FieldSettings_use_object_coords_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FieldSettings_use_global_coords_get = _rpythonic_function_(		"FieldSettings_use_global_coords_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FieldSettings_use_max_distance_get = _rpythonic_function_(		"FieldSettings_use_max_distance_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FieldSettings_use_radial_max_get = _rpythonic_function_(		"FieldSettings_use_radial_max_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FieldSettings_use_min_distance_get = _rpythonic_function_(		"FieldSettings_use_min_distance_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FieldSettings_use_radial_min_get = _rpythonic_function_(		"FieldSettings_use_radial_min_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FieldSettings_use_guide_path_weight_get = _rpythonic_function_(		"FieldSettings_use_guide_path_weight_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FieldSettings_z_direction_get = _rpythonic_function_(		"FieldSettings_z_direction_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FileSelectParams_rna_type_get = _rpythonic_function_(		"FileSelectParams_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FileSelectParams_directory_get = _rpythonic_function_(		"FileSelectParams_directory_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

FileSelectParams_directory_length = _rpythonic_function_(		"FileSelectParams_directory_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FileSelectParams_display_type_get = _rpythonic_function_(		"FileSelectParams_display_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FileSelectParams_filter_glob_get = _rpythonic_function_(		"FileSelectParams_filter_glob_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

FileSelectParams_filter_glob_length = _rpythonic_function_(		"FileSelectParams_filter_glob_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FileSelectParams_filename_get = _rpythonic_function_(		"FileSelectParams_filename_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

FileSelectParams_filename_length = _rpythonic_function_(		"FileSelectParams_filename_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FileSelectParams_use_filter_blender_get = _rpythonic_function_(		"FileSelectParams_use_filter_blender_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FileSelectParams_use_filter_get = _rpythonic_function_(		"FileSelectParams_use_filter_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FileSelectParams_use_filter_folder_get = _rpythonic_function_(		"FileSelectParams_use_filter_folder_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FileSelectParams_use_filter_font_get = _rpythonic_function_(		"FileSelectParams_use_filter_font_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FileSelectParams_use_filter_image_get = _rpythonic_function_(		"FileSelectParams_use_filter_image_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FileSelectParams_use_filter_movie_get = _rpythonic_function_(		"FileSelectParams_use_filter_movie_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FileSelectParams_use_filter_script_get = _rpythonic_function_(		"FileSelectParams_use_filter_script_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FileSelectParams_use_filter_sound_get = _rpythonic_function_(		"FileSelectParams_use_filter_sound_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FileSelectParams_use_filter_text_get = _rpythonic_function_(		"FileSelectParams_use_filter_text_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FileSelectParams_show_hidden_get = _rpythonic_function_(		"FileSelectParams_show_hidden_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FileSelectParams_sort_method_get = _rpythonic_function_(		"FileSelectParams_sort_method_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FileSelectParams_title_get = _rpythonic_function_(		"FileSelectParams_title_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

FileSelectParams_title_length = _rpythonic_function_(		"FileSelectParams_title_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Filter2DActuator_use_motion_blur_get = _rpythonic_function_(		"Filter2DActuator_use_motion_blur_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Filter2DActuator_mode_get = _rpythonic_function_(		"Filter2DActuator_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Filter2DActuator_filter_pass_get = _rpythonic_function_(		"Filter2DActuator_filter_pass_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Filter2DActuator_glsl_shader_get = _rpythonic_function_(		"Filter2DActuator_glsl_shader_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Filter2DActuator_motion_blur_factor_get = _rpythonic_function_(		"Filter2DActuator_motion_blur_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FloatProperty_array_length_get = _rpythonic_function_(		"FloatProperty_array_length_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FloatProperty_default_value_get = _rpythonic_function_(		"FloatProperty_default_value_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FloatProperty_default_array_get = _rpythonic_function_(		"FloatProperty_default_array_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

FloatProperty_hard_max_get = _rpythonic_function_(		"FloatProperty_hard_max_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FloatProperty_hard_min_get = _rpythonic_function_(		"FloatProperty_hard_min_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FloatProperty_precision_get = _rpythonic_function_(		"FloatProperty_precision_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FloatProperty_soft_max_get = _rpythonic_function_(		"FloatProperty_soft_max_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FloatProperty_soft_min_get = _rpythonic_function_(		"FloatProperty_soft_min_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FloatProperty_step_get = _rpythonic_function_(		"FloatProperty_step_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FloorConstraint_floor_location_get = _rpythonic_function_(		"FloorConstraint_floor_location_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FloorConstraint_offset_get = _rpythonic_function_(		"FloorConstraint_offset_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FloorConstraint_use_sticky_get = _rpythonic_function_(		"FloorConstraint_use_sticky_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FloorConstraint_subtarget_get = _rpythonic_function_(		"FloorConstraint_subtarget_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

FloorConstraint_subtarget_length = _rpythonic_function_(		"FloorConstraint_subtarget_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FloorConstraint_target_get = _rpythonic_function_(		"FloorConstraint_target_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FloorConstraint_use_rotation_get = _rpythonic_function_(		"FloorConstraint_use_rotation_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FluidFluidSettings_use_get = _rpythonic_function_(		"FluidFluidSettings_use_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FluidFluidSettings_use_animated_mesh_get = _rpythonic_function_(		"FluidFluidSettings_use_animated_mesh_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FluidFluidSettings_initial_velocity_get = _rpythonic_function_(		"FluidFluidSettings_initial_velocity_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

FluidFluidSettings_volume_initialization_get = _rpythonic_function_(		"FluidFluidSettings_volume_initialization_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FluidMeshVertex_rna_type_get = _rpythonic_function_(		"FluidMeshVertex_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FluidMeshVertex_velocity_get = _rpythonic_function_(		"FluidMeshVertex_velocity_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

FluidSettings_rna_type_get = _rpythonic_function_(		"FluidSettings_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FluidSettings_type_get = _rpythonic_function_(		"FluidSettings_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FluidSimulationModifier_settings_get = _rpythonic_function_(		"FluidSimulationModifier_settings_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FollowPathConstraint_use_curve_radius_get = _rpythonic_function_(		"FollowPathConstraint_use_curve_radius_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FollowPathConstraint_use_fixed_location_get = _rpythonic_function_(		"FollowPathConstraint_use_fixed_location_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FollowPathConstraint_use_curve_follow_get = _rpythonic_function_(		"FollowPathConstraint_use_curve_follow_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FollowPathConstraint_forward_axis_get = _rpythonic_function_(		"FollowPathConstraint_forward_axis_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FollowPathConstraint_offset_get = _rpythonic_function_(		"FollowPathConstraint_offset_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FollowPathConstraint_offset_factor_get = _rpythonic_function_(		"FollowPathConstraint_offset_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FollowPathConstraint_target_get = _rpythonic_function_(		"FollowPathConstraint_target_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

FollowPathConstraint_up_axis_get = _rpythonic_function_(		"FollowPathConstraint_up_axis_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Function_rna_type_get = _rpythonic_function_(		"Function_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Function_description_get = _rpythonic_function_(		"Function_description_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

Function_description_length = _rpythonic_function_(		"Function_description_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Function_identifier_get = _rpythonic_function_(		"Function_identifier_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

Function_identifier_length = _rpythonic_function_(		"Function_identifier_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Function_use_self_get = _rpythonic_function_(		"Function_use_self_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Function_parameters_begin = _rpythonic_function_(		"Function_parameters_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Function_parameters_next = _rpythonic_function_(		"Function_parameters_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Function_parameters_end = _rpythonic_function_(		"Function_parameters_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Function_is_registered_get = _rpythonic_function_(		"Function_is_registered_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Function_is_registered_optional_get = _rpythonic_function_(		"Function_is_registered_optional_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GPencilFrame_rna_type_get = _rpythonic_function_(		"GPencilFrame_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GPencilFrame_frame_number_get = _rpythonic_function_(		"GPencilFrame_frame_number_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GPencilFrame_is_edited_get = _rpythonic_function_(		"GPencilFrame_is_edited_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GPencilFrame_select_get = _rpythonic_function_(		"GPencilFrame_select_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GPencilFrame_strokes_begin = _rpythonic_function_(		"GPencilFrame_strokes_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GPencilFrame_strokes_next = _rpythonic_function_(		"GPencilFrame_strokes_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

GPencilFrame_strokes_end = _rpythonic_function_(		"GPencilFrame_strokes_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

GPencilLayer_rna_type_get = _rpythonic_function_(		"GPencilLayer_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GPencilLayer_active_frame_get = _rpythonic_function_(		"GPencilLayer_active_frame_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GPencilLayer_color_get = _rpythonic_function_(		"GPencilLayer_color_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

GPencilLayer_lock_frame_get = _rpythonic_function_(		"GPencilLayer_lock_frame_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GPencilLayer_frames_begin = _rpythonic_function_(		"GPencilLayer_frames_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GPencilLayer_frames_next = _rpythonic_function_(		"GPencilLayer_frames_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

GPencilLayer_frames_end = _rpythonic_function_(		"GPencilLayer_frames_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

GPencilLayer_hide_get = _rpythonic_function_(		"GPencilLayer_hide_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GPencilLayer_info_get = _rpythonic_function_(		"GPencilLayer_info_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

GPencilLayer_info_length = _rpythonic_function_(		"GPencilLayer_info_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GPencilLayer_lock_get = _rpythonic_function_(		"GPencilLayer_lock_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GPencilLayer_ghost_range_max_get = _rpythonic_function_(		"GPencilLayer_ghost_range_max_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GPencilLayer_alpha_get = _rpythonic_function_(		"GPencilLayer_alpha_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GPencilLayer_select_get = _rpythonic_function_(		"GPencilLayer_select_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GPencilLayer_show_points_get = _rpythonic_function_(		"GPencilLayer_show_points_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GPencilLayer_line_width_get = _rpythonic_function_(		"GPencilLayer_line_width_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GPencilLayer_use_onion_skinning_get = _rpythonic_function_(		"GPencilLayer_use_onion_skinning_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GPencilLayer_show_x_ray_get = _rpythonic_function_(		"GPencilLayer_show_x_ray_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GPencilStroke_rna_type_get = _rpythonic_function_(		"GPencilStroke_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GPencilStroke_points_begin = _rpythonic_function_(		"GPencilStroke_points_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GPencilStroke_points_next = _rpythonic_function_(		"GPencilStroke_points_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

GPencilStroke_points_end = _rpythonic_function_(		"GPencilStroke_points_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

GPencilStrokePoint_rna_type_get = _rpythonic_function_(		"GPencilStrokePoint_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GPencilStrokePoint_co_get = _rpythonic_function_(		"GPencilStrokePoint_co_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

GPencilStrokePoint_pressure_get = _rpythonic_function_(		"GPencilStrokePoint_pressure_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameActuator_filename_get = _rpythonic_function_(		"GameActuator_filename_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

GameActuator_filename_length = _rpythonic_function_(		"GameActuator_filename_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameActuator_mode_get = _rpythonic_function_(		"GameActuator_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameBooleanProperty_value_get = _rpythonic_function_(		"GameBooleanProperty_value_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameFloatProperty_value_get = _rpythonic_function_(		"GameFloatProperty_value_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameIntProperty_value_get = _rpythonic_function_(		"GameIntProperty_value_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameObjectSettings_rna_type_get = _rpythonic_function_(		"GameObjectSettings_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameObjectSettings_use_actor_get = _rpythonic_function_(		"GameObjectSettings_use_actor_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameObjectSettings_actuators_begin = _rpythonic_function_(		"GameObjectSettings_actuators_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameObjectSettings_actuators_next = _rpythonic_function_(		"GameObjectSettings_actuators_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

GameObjectSettings_actuators_end = _rpythonic_function_(		"GameObjectSettings_actuators_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

GameObjectSettings_use_all_states_get = _rpythonic_function_(		"GameObjectSettings_use_all_states_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameObjectSettings_use_anisotropic_friction_get = _rpythonic_function_(		"GameObjectSettings_use_anisotropic_friction_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameObjectSettings_collision_bounds_type_get = _rpythonic_function_(		"GameObjectSettings_collision_bounds_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameObjectSettings_use_collision_compound_get = _rpythonic_function_(		"GameObjectSettings_use_collision_compound_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameObjectSettings_collision_margin_get = _rpythonic_function_(		"GameObjectSettings_collision_margin_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameObjectSettings_controllers_begin = _rpythonic_function_(		"GameObjectSettings_controllers_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameObjectSettings_controllers_next = _rpythonic_function_(		"GameObjectSettings_controllers_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

GameObjectSettings_controllers_end = _rpythonic_function_(		"GameObjectSettings_controllers_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

GameObjectSettings_damping_get = _rpythonic_function_(		"GameObjectSettings_damping_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameObjectSettings_show_debug_state_get = _rpythonic_function_(		"GameObjectSettings_show_debug_state_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameObjectSettings_form_factor_get = _rpythonic_function_(		"GameObjectSettings_form_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameObjectSettings_friction_coefficients_get = _rpythonic_function_(		"GameObjectSettings_friction_coefficients_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

GameObjectSettings_use_ghost_get = _rpythonic_function_(		"GameObjectSettings_use_ghost_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameObjectSettings_states_initial_get = _rpythonic_function_(		"GameObjectSettings_states_initial_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_int * 30 )),] )

GameObjectSettings_lock_location_x_get = _rpythonic_function_(		"GameObjectSettings_lock_location_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameObjectSettings_lock_rotation_x_get = _rpythonic_function_(		"GameObjectSettings_lock_rotation_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameObjectSettings_lock_location_y_get = _rpythonic_function_(		"GameObjectSettings_lock_location_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameObjectSettings_lock_rotation_y_get = _rpythonic_function_(		"GameObjectSettings_lock_rotation_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameObjectSettings_lock_location_z_get = _rpythonic_function_(		"GameObjectSettings_lock_location_z_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameObjectSettings_lock_rotation_z_get = _rpythonic_function_(		"GameObjectSettings_lock_rotation_z_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameObjectSettings_use_activity_culling_get = _rpythonic_function_(		"GameObjectSettings_use_activity_culling_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameObjectSettings_mass_get = _rpythonic_function_(		"GameObjectSettings_mass_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameObjectSettings_use_sleep_get = _rpythonic_function_(		"GameObjectSettings_use_sleep_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameObjectSettings_physics_type_get = _rpythonic_function_(		"GameObjectSettings_physics_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameObjectSettings_properties_begin = _rpythonic_function_(		"GameObjectSettings_properties_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameObjectSettings_properties_next = _rpythonic_function_(		"GameObjectSettings_properties_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

GameObjectSettings_properties_end = _rpythonic_function_(		"GameObjectSettings_properties_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

GameObjectSettings_radius_get = _rpythonic_function_(		"GameObjectSettings_radius_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameObjectSettings_use_rotate_from_normal_get = _rpythonic_function_(		"GameObjectSettings_use_rotate_from_normal_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameObjectSettings_rotation_damping_get = _rpythonic_function_(		"GameObjectSettings_rotation_damping_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameObjectSettings_sensors_begin = _rpythonic_function_(		"GameObjectSettings_sensors_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameObjectSettings_sensors_next = _rpythonic_function_(		"GameObjectSettings_sensors_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

GameObjectSettings_sensors_end = _rpythonic_function_(		"GameObjectSettings_sensors_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

GameObjectSettings_show_actuators_get = _rpythonic_function_(		"GameObjectSettings_show_actuators_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameObjectSettings_show_controllers_get = _rpythonic_function_(		"GameObjectSettings_show_controllers_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameObjectSettings_show_sensors_get = _rpythonic_function_(		"GameObjectSettings_show_sensors_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameObjectSettings_soft_body_get = _rpythonic_function_(		"GameObjectSettings_soft_body_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameObjectSettings_states_visible_get = _rpythonic_function_(		"GameObjectSettings_states_visible_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_int * 30 )),] )

GameObjectSettings_show_state_panel_get = _rpythonic_function_(		"GameObjectSettings_show_state_panel_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameObjectSettings_use_collision_bounds_get = _rpythonic_function_(		"GameObjectSettings_use_collision_bounds_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameObjectSettings_use_material_physics_fh_get = _rpythonic_function_(		"GameObjectSettings_use_material_physics_fh_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameObjectSettings_used_states_get = _rpythonic_function_(		"GameObjectSettings_used_states_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_int * 30 )),] )

GameObjectSettings_velocity_max_get = _rpythonic_function_(		"GameObjectSettings_velocity_max_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameObjectSettings_velocity_min_get = _rpythonic_function_(		"GameObjectSettings_velocity_min_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameProperty_rna_type_get = _rpythonic_function_(		"GameProperty_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameProperty_name_get = _rpythonic_function_(		"GameProperty_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

GameProperty_name_length = _rpythonic_function_(		"GameProperty_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameProperty_show_debug_get = _rpythonic_function_(		"GameProperty_show_debug_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameProperty_type_get = _rpythonic_function_(		"GameProperty_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameSoftBodySettings_rna_type_get = _rpythonic_function_(		"GameSoftBodySettings_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameSoftBodySettings_use_bending_constraints_get = _rpythonic_function_(		"GameSoftBodySettings_use_bending_constraints_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameSoftBodySettings_cluster_iterations_get = _rpythonic_function_(		"GameSoftBodySettings_cluster_iterations_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameSoftBodySettings_dynamic_friction_get = _rpythonic_function_(		"GameSoftBodySettings_dynamic_friction_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameSoftBodySettings_linear_stiffness_get = _rpythonic_function_(		"GameSoftBodySettings_linear_stiffness_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameSoftBodySettings_collision_margin_get = _rpythonic_function_(		"GameSoftBodySettings_collision_margin_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameSoftBodySettings_location_iterations_get = _rpythonic_function_(		"GameSoftBodySettings_location_iterations_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameSoftBodySettings_use_cluster_rigid_to_softbody_get = _rpythonic_function_(		"GameSoftBodySettings_use_cluster_rigid_to_softbody_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameSoftBodySettings_use_shape_match_get = _rpythonic_function_(		"GameSoftBodySettings_use_shape_match_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameSoftBodySettings_use_cluster_soft_to_softbody_get = _rpythonic_function_(		"GameSoftBodySettings_use_cluster_soft_to_softbody_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameSoftBodySettings_shape_threshold_get = _rpythonic_function_(		"GameSoftBodySettings_shape_threshold_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameSoftBodySettings_weld_threshold_get = _rpythonic_function_(		"GameSoftBodySettings_weld_threshold_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameStringProperty_value_get = _rpythonic_function_(		"GameStringProperty_value_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

GameStringProperty_value_length = _rpythonic_function_(		"GameStringProperty_value_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GameTimerProperty_value_get = _rpythonic_function_(		"GameTimerProperty_value_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GlowSequence_blur_radius_get = _rpythonic_function_(		"GlowSequence_blur_radius_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GlowSequence_boost_factor_get = _rpythonic_function_(		"GlowSequence_boost_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GlowSequence_clamp_get = _rpythonic_function_(		"GlowSequence_clamp_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GlowSequence_use_only_boost_get = _rpythonic_function_(		"GlowSequence_use_only_boost_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GlowSequence_quality_get = _rpythonic_function_(		"GlowSequence_quality_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GlowSequence_threshold_get = _rpythonic_function_(		"GlowSequence_threshold_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GreasePencil_draw_mode_get = _rpythonic_function_(		"GreasePencil_draw_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GreasePencil_layers_begin = _rpythonic_function_(		"GreasePencil_layers_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GreasePencil_layers_next = _rpythonic_function_(		"GreasePencil_layers_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

GreasePencil_layers_end = _rpythonic_function_(		"GreasePencil_layers_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

GreasePencil_use_stroke_endpoints_get = _rpythonic_function_(		"GreasePencil_use_stroke_endpoints_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GreasePencilLayers_rna_type_get = _rpythonic_function_(		"GreasePencilLayers_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GreasePencilLayers_active_get = _rpythonic_function_(		"GreasePencilLayers_active_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Group_layers_get = _rpythonic_function_(		"Group_layers_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_int * 20 )),] )

Group_dupli_offset_get = _rpythonic_function_(		"Group_dupli_offset_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

Group_objects_begin = _rpythonic_function_(		"Group_objects_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Group_objects_next = _rpythonic_function_(		"Group_objects_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Group_objects_end = _rpythonic_function_(		"Group_objects_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

GroupInputs_rna_type_get = _rpythonic_function_(		"GroupInputs_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GroupObjects_rna_type_get = _rpythonic_function_(		"GroupObjects_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

GroupOutputs_rna_type_get = _rpythonic_function_(		"GroupOutputs_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Header_rna_type_get = _rpythonic_function_(		"Header_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Header_bl_idname_get = _rpythonic_function_(		"Header_bl_idname_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

Header_bl_idname_length = _rpythonic_function_(		"Header_bl_idname_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Header_layout_get = _rpythonic_function_(		"Header_layout_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Header_bl_space_type_get = _rpythonic_function_(		"Header_bl_space_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Histogram_rna_type_get = _rpythonic_function_(		"Histogram_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Histogram_mode_get = _rpythonic_function_(		"Histogram_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

HookModifier_falloff_get = _rpythonic_function_(		"HookModifier_falloff_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

HookModifier_force_get = _rpythonic_function_(		"HookModifier_force_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

HookModifier_object_get = _rpythonic_function_(		"HookModifier_object_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

HookModifier_subtarget_get = _rpythonic_function_(		"HookModifier_subtarget_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

HookModifier_subtarget_length = _rpythonic_function_(		"HookModifier_subtarget_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

HookModifier_vertex_group_get = _rpythonic_function_(		"HookModifier_vertex_group_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

HookModifier_vertex_group_length = _rpythonic_function_(		"HookModifier_vertex_group_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ID_rna_type_get = _rpythonic_function_(		"ID_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ID_name_get = _rpythonic_function_(		"ID_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ID_name_length = _rpythonic_function_(		"ID_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ID_use_fake_user_get = _rpythonic_function_(		"ID_use_fake_user_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ID_library_get = _rpythonic_function_(		"ID_library_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ID_tag_get = _rpythonic_function_(		"ID_tag_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ID_users_get = _rpythonic_function_(		"ID_users_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

IDMaterials_rna_type_get = _rpythonic_function_(		"IDMaterials_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

IKParam_rna_type_get = _rpythonic_function_(		"IKParam_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

IKParam_ik_solver_get = _rpythonic_function_(		"IKParam_ik_solver_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Image_use_animation_get = _rpythonic_function_(		"Image_use_animation_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Image_frame_end_get = _rpythonic_function_(		"Image_frame_end_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Image_fps_get = _rpythonic_function_(		"Image_fps_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Image_frame_start_get = _rpythonic_function_(		"Image_frame_start_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Image_bindcode_get = _rpythonic_function_(		"Image_bindcode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Image_use_clamp_x_get = _rpythonic_function_(		"Image_use_clamp_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Image_use_clamp_y_get = _rpythonic_function_(		"Image_use_clamp_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Image_depth_get = _rpythonic_function_(		"Image_depth_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Image_is_dirty_get = _rpythonic_function_(		"Image_is_dirty_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Image_display_aspect_get = _rpythonic_function_(		"Image_display_aspect_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 2 )),] )

Image_field_order_get = _rpythonic_function_(		"Image_field_order_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Image_use_fields_get = _rpythonic_function_(		"Image_use_fields_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Image_file_format_get = _rpythonic_function_(		"Image_file_format_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Image_filepath_get = _rpythonic_function_(		"Image_filepath_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

Image_filepath_length = _rpythonic_function_(		"Image_filepath_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Image_filepath_raw_get = _rpythonic_function_(		"Image_filepath_raw_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

Image_filepath_raw_length = _rpythonic_function_(		"Image_filepath_raw_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Image_use_generated_float_get = _rpythonic_function_(		"Image_use_generated_float_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Image_generated_height_get = _rpythonic_function_(		"Image_generated_height_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Image_generated_type_get = _rpythonic_function_(		"Image_generated_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Image_generated_width_get = _rpythonic_function_(		"Image_generated_width_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Image_has_data_get = _rpythonic_function_(		"Image_has_data_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Image_mapping_get = _rpythonic_function_(		"Image_mapping_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Image_packed_file_get = _rpythonic_function_(		"Image_packed_file_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Image_pixels_get = _rpythonic_function_(		"Image_pixels_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		ctypes.c_float),] )

Image_use_premultiply_get = _rpythonic_function_(		"Image_use_premultiply_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Image_resolution_get = _rpythonic_function_(		"Image_resolution_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 2 )),] )

Image_size_get = _rpythonic_function_(		"Image_size_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_int * 2 )),] )

Image_source_get = _rpythonic_function_(		"Image_source_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Image_use_tiles_get = _rpythonic_function_(		"Image_use_tiles_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Image_tiles_x_get = _rpythonic_function_(		"Image_tiles_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Image_tiles_y_get = _rpythonic_function_(		"Image_tiles_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Image_type_get = _rpythonic_function_(		"Image_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImagePaint_normal_angle_get = _rpythonic_function_(		"ImagePaint_normal_angle_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImagePaint_seam_bleed_get = _rpythonic_function_(		"ImagePaint_seam_bleed_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImagePaint_use_clone_layer_get = _rpythonic_function_(		"ImagePaint_use_clone_layer_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImagePaint_use_backface_culling_get = _rpythonic_function_(		"ImagePaint_use_backface_culling_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImagePaint_invert_stencil_get = _rpythonic_function_(		"ImagePaint_invert_stencil_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImagePaint_use_normal_falloff_get = _rpythonic_function_(		"ImagePaint_use_normal_falloff_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImagePaint_use_occlude_get = _rpythonic_function_(		"ImagePaint_use_occlude_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImagePaint_use_projection_get = _rpythonic_function_(		"ImagePaint_use_projection_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImagePaint_use_stencil_layer_get = _rpythonic_function_(		"ImagePaint_use_stencil_layer_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImagePaint_screen_grab_size_get = _rpythonic_function_(		"ImagePaint_screen_grab_size_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_int * 2 )),] )

ImageSequence_animation_offset_end_get = _rpythonic_function_(		"ImageSequence_animation_offset_end_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageSequence_animation_offset_start_get = _rpythonic_function_(		"ImageSequence_animation_offset_start_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageSequence_color_balance_get = _rpythonic_function_(		"ImageSequence_color_balance_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageSequence_use_float_get = _rpythonic_function_(		"ImageSequence_use_float_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageSequence_crop_get = _rpythonic_function_(		"ImageSequence_crop_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageSequence_use_deinterlace_get = _rpythonic_function_(		"ImageSequence_use_deinterlace_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageSequence_directory_get = _rpythonic_function_(		"ImageSequence_directory_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ImageSequence_directory_length = _rpythonic_function_(		"ImageSequence_directory_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageSequence_elements_begin = _rpythonic_function_(		"ImageSequence_elements_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageSequence_elements_next = _rpythonic_function_(		"ImageSequence_elements_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

ImageSequence_elements_end = _rpythonic_function_(		"ImageSequence_elements_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

ImageSequence_use_reverse_frames_get = _rpythonic_function_(		"ImageSequence_use_reverse_frames_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageSequence_use_flip_x_get = _rpythonic_function_(		"ImageSequence_use_flip_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageSequence_use_flip_y_get = _rpythonic_function_(		"ImageSequence_use_flip_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageSequence_color_multiply_get = _rpythonic_function_(		"ImageSequence_color_multiply_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageSequence_use_premultiply_get = _rpythonic_function_(		"ImageSequence_use_premultiply_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageSequence_proxy_get = _rpythonic_function_(		"ImageSequence_proxy_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageSequence_use_proxy_custom_directory_get = _rpythonic_function_(		"ImageSequence_use_proxy_custom_directory_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageSequence_use_proxy_custom_file_get = _rpythonic_function_(		"ImageSequence_use_proxy_custom_file_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageSequence_color_saturation_get = _rpythonic_function_(		"ImageSequence_color_saturation_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageSequence_strobe_get = _rpythonic_function_(		"ImageSequence_strobe_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageSequence_transform_get = _rpythonic_function_(		"ImageSequence_transform_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageSequence_use_color_balance_get = _rpythonic_function_(		"ImageSequence_use_color_balance_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageSequence_use_crop_get = _rpythonic_function_(		"ImageSequence_use_crop_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageSequence_use_proxy_get = _rpythonic_function_(		"ImageSequence_use_proxy_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageSequence_use_translation_get = _rpythonic_function_(		"ImageSequence_use_translation_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageTexture_use_calculate_alpha_get = _rpythonic_function_(		"ImageTexture_use_calculate_alpha_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageTexture_checker_distance_get = _rpythonic_function_(		"ImageTexture_checker_distance_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageTexture_use_checker_even_get = _rpythonic_function_(		"ImageTexture_use_checker_even_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageTexture_use_checker_odd_get = _rpythonic_function_(		"ImageTexture_use_checker_odd_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageTexture_crop_max_x_get = _rpythonic_function_(		"ImageTexture_crop_max_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageTexture_crop_max_y_get = _rpythonic_function_(		"ImageTexture_crop_max_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageTexture_crop_min_x_get = _rpythonic_function_(		"ImageTexture_crop_min_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageTexture_crop_min_y_get = _rpythonic_function_(		"ImageTexture_crop_min_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageTexture_use_derivative_map_get = _rpythonic_function_(		"ImageTexture_use_derivative_map_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageTexture_extension_get = _rpythonic_function_(		"ImageTexture_extension_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageTexture_filter_type_get = _rpythonic_function_(		"ImageTexture_filter_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageTexture_filter_eccentricity_get = _rpythonic_function_(		"ImageTexture_filter_eccentricity_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageTexture_filter_probes_get = _rpythonic_function_(		"ImageTexture_filter_probes_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageTexture_filter_size_get = _rpythonic_function_(		"ImageTexture_filter_size_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageTexture_use_flip_axis_get = _rpythonic_function_(		"ImageTexture_use_flip_axis_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageTexture_image_get = _rpythonic_function_(		"ImageTexture_image_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageTexture_image_user_get = _rpythonic_function_(		"ImageTexture_image_user_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageTexture_use_interpolation_get = _rpythonic_function_(		"ImageTexture_use_interpolation_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageTexture_invert_alpha_get = _rpythonic_function_(		"ImageTexture_invert_alpha_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageTexture_use_mipmap_get = _rpythonic_function_(		"ImageTexture_use_mipmap_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageTexture_use_mipmap_gauss_get = _rpythonic_function_(		"ImageTexture_use_mipmap_gauss_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageTexture_use_filter_size_min_get = _rpythonic_function_(		"ImageTexture_use_filter_size_min_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageTexture_use_mirror_x_get = _rpythonic_function_(		"ImageTexture_use_mirror_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageTexture_use_mirror_y_get = _rpythonic_function_(		"ImageTexture_use_mirror_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageTexture_use_normal_map_get = _rpythonic_function_(		"ImageTexture_use_normal_map_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageTexture_repeat_x_get = _rpythonic_function_(		"ImageTexture_repeat_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageTexture_repeat_y_get = _rpythonic_function_(		"ImageTexture_repeat_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageTexture_use_alpha_get = _rpythonic_function_(		"ImageTexture_use_alpha_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageUser_rna_type_get = _rpythonic_function_(		"ImageUser_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageUser_use_auto_refresh_get = _rpythonic_function_(		"ImageUser_use_auto_refresh_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageUser_use_cyclic_get = _rpythonic_function_(		"ImageUser_use_cyclic_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageUser_fields_per_frame_get = _rpythonic_function_(		"ImageUser_fields_per_frame_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageUser_frame_duration_get = _rpythonic_function_(		"ImageUser_frame_duration_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageUser_multilayer_layer_get = _rpythonic_function_(		"ImageUser_multilayer_layer_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageUser_frame_offset_get = _rpythonic_function_(		"ImageUser_frame_offset_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageUser_multilayer_pass_get = _rpythonic_function_(		"ImageUser_multilayer_pass_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ImageUser_frame_start_get = _rpythonic_function_(		"ImageUser_frame_start_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

InflowFluidSettings_use_get = _rpythonic_function_(		"InflowFluidSettings_use_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

InflowFluidSettings_use_animated_mesh_get = _rpythonic_function_(		"InflowFluidSettings_use_animated_mesh_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

InflowFluidSettings_inflow_velocity_get = _rpythonic_function_(		"InflowFluidSettings_inflow_velocity_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

InflowFluidSettings_use_local_coords_get = _rpythonic_function_(		"InflowFluidSettings_use_local_coords_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

InflowFluidSettings_volume_initialization_get = _rpythonic_function_(		"InflowFluidSettings_volume_initialization_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

IntProperty_array_length_get = _rpythonic_function_(		"IntProperty_array_length_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

IntProperty_default_value_get = _rpythonic_function_(		"IntProperty_default_value_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

IntProperty_default_array_get = _rpythonic_function_(		"IntProperty_default_array_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_int * 3 )),] )

IntProperty_hard_max_get = _rpythonic_function_(		"IntProperty_hard_max_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

IntProperty_hard_min_get = _rpythonic_function_(		"IntProperty_hard_min_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

IntProperty_soft_max_get = _rpythonic_function_(		"IntProperty_soft_max_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

IntProperty_soft_min_get = _rpythonic_function_(		"IntProperty_soft_min_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

IntProperty_step_get = _rpythonic_function_(		"IntProperty_step_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Itasc_use_auto_step_get = _rpythonic_function_(		"Itasc_use_auto_step_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Itasc_damping_max_get = _rpythonic_function_(		"Itasc_damping_max_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Itasc_damping_epsilon_get = _rpythonic_function_(		"Itasc_damping_epsilon_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Itasc_feedback_get = _rpythonic_function_(		"Itasc_feedback_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Itasc_iterations_get = _rpythonic_function_(		"Itasc_iterations_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Itasc_velocity_max_get = _rpythonic_function_(		"Itasc_velocity_max_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Itasc_step_max_get = _rpythonic_function_(		"Itasc_step_max_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Itasc_step_min_get = _rpythonic_function_(		"Itasc_step_min_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Itasc_mode_get = _rpythonic_function_(		"Itasc_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Itasc_step_count_get = _rpythonic_function_(		"Itasc_step_count_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Itasc_precision_get = _rpythonic_function_(		"Itasc_precision_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Itasc_reiteration_method_get = _rpythonic_function_(		"Itasc_reiteration_method_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Itasc_solver_get = _rpythonic_function_(		"Itasc_solver_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

JoystickSensor_use_all_events_get = _rpythonic_function_(		"JoystickSensor_use_all_events_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

JoystickSensor_axis_direction_get = _rpythonic_function_(		"JoystickSensor_axis_direction_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

JoystickSensor_axis_number_get = _rpythonic_function_(		"JoystickSensor_axis_number_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

JoystickSensor_single_axis_number_get = _rpythonic_function_(		"JoystickSensor_single_axis_number_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

JoystickSensor_axis_threshold_get = _rpythonic_function_(		"JoystickSensor_axis_threshold_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

JoystickSensor_button_number_get = _rpythonic_function_(		"JoystickSensor_button_number_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

JoystickSensor_event_type_get = _rpythonic_function_(		"JoystickSensor_event_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

JoystickSensor_hat_direction_get = _rpythonic_function_(		"JoystickSensor_hat_direction_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

JoystickSensor_hat_number_get = _rpythonic_function_(		"JoystickSensor_hat_number_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

JoystickSensor_joystick_index_get = _rpythonic_function_(		"JoystickSensor_joystick_index_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Key_animation_data_get = _rpythonic_function_(		"Key_animation_data_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Key_key_blocks_begin = _rpythonic_function_(		"Key_key_blocks_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Key_key_blocks_next = _rpythonic_function_(		"Key_key_blocks_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Key_key_blocks_end = _rpythonic_function_(		"Key_key_blocks_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Key_reference_key_get = _rpythonic_function_(		"Key_reference_key_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Key_use_relative_get = _rpythonic_function_(		"Key_use_relative_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Key_slurph_get = _rpythonic_function_(		"Key_slurph_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Key_user_get = _rpythonic_function_(		"Key_user_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyConfig_rna_type_get = _rpythonic_function_(		"KeyConfig_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyConfig_name_get = _rpythonic_function_(		"KeyConfig_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

KeyConfig_name_length = _rpythonic_function_(		"KeyConfig_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyConfig_keymaps_begin = _rpythonic_function_(		"KeyConfig_keymaps_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyConfig_keymaps_next = _rpythonic_function_(		"KeyConfig_keymaps_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

KeyConfig_keymaps_end = _rpythonic_function_(		"KeyConfig_keymaps_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

KeyConfig_is_user_defined_get = _rpythonic_function_(		"KeyConfig_is_user_defined_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyConfigurations_rna_type_get = _rpythonic_function_(		"KeyConfigurations_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyConfigurations_active_get = _rpythonic_function_(		"KeyConfigurations_active_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyConfigurations_addon_get = _rpythonic_function_(		"KeyConfigurations_addon_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyConfigurations_default_value_get = _rpythonic_function_(		"KeyConfigurations_default_value_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyConfigurations_user_get = _rpythonic_function_(		"KeyConfigurations_user_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyMap_rna_type_get = _rpythonic_function_(		"KeyMap_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyMap_name_get = _rpythonic_function_(		"KeyMap_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

KeyMap_name_length = _rpythonic_function_(		"KeyMap_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyMap_show_expanded_children_get = _rpythonic_function_(		"KeyMap_show_expanded_children_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyMap_keymap_items_begin = _rpythonic_function_(		"KeyMap_keymap_items_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyMap_keymap_items_next = _rpythonic_function_(		"KeyMap_keymap_items_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

KeyMap_keymap_items_end = _rpythonic_function_(		"KeyMap_keymap_items_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

KeyMap_show_expanded_items_get = _rpythonic_function_(		"KeyMap_show_expanded_items_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyMap_is_modal_get = _rpythonic_function_(		"KeyMap_is_modal_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyMap_region_type_get = _rpythonic_function_(		"KeyMap_region_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyMap_space_type_get = _rpythonic_function_(		"KeyMap_space_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyMap_is_user_modified_get = _rpythonic_function_(		"KeyMap_is_user_modified_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyMapItem_rna_type_get = _rpythonic_function_(		"KeyMapItem_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyMapItem_name_get = _rpythonic_function_(		"KeyMapItem_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

KeyMapItem_name_length = _rpythonic_function_(		"KeyMapItem_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyMapItem_active_get = _rpythonic_function_(		"KeyMapItem_active_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyMapItem_alt_get = _rpythonic_function_(		"KeyMapItem_alt_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyMapItem_any_get = _rpythonic_function_(		"KeyMapItem_any_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyMapItem_ctrl_get = _rpythonic_function_(		"KeyMapItem_ctrl_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyMapItem_show_expanded_get = _rpythonic_function_(		"KeyMapItem_show_expanded_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyMapItem_idname_get = _rpythonic_function_(		"KeyMapItem_idname_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

KeyMapItem_idname_length = _rpythonic_function_(		"KeyMapItem_idname_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyMapItem_key_modifier_get = _rpythonic_function_(		"KeyMapItem_key_modifier_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyMapItem_map_type_get = _rpythonic_function_(		"KeyMapItem_map_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyMapItem_oskey_get = _rpythonic_function_(		"KeyMapItem_oskey_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyMapItem_properties_get = _rpythonic_function_(		"KeyMapItem_properties_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyMapItem_propvalue_get = _rpythonic_function_(		"KeyMapItem_propvalue_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyMapItem_shift_get = _rpythonic_function_(		"KeyMapItem_shift_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyMapItem_type_get = _rpythonic_function_(		"KeyMapItem_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyMapItem_is_user_defined_get = _rpythonic_function_(		"KeyMapItem_is_user_defined_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyMapItem_is_user_modified_get = _rpythonic_function_(		"KeyMapItem_is_user_modified_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyMapItem_value_get = _rpythonic_function_(		"KeyMapItem_value_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyMapItem_id_get = _rpythonic_function_(		"KeyMapItem_id_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyMapItems_rna_type_get = _rpythonic_function_(		"KeyMapItems_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyMaps_rna_type_get = _rpythonic_function_(		"KeyMaps_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyboardSensor_use_all_keys_get = _rpythonic_function_(		"KeyboardSensor_use_all_keys_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyboardSensor_key_get = _rpythonic_function_(		"KeyboardSensor_key_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyboardSensor_log_get = _rpythonic_function_(		"KeyboardSensor_log_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

KeyboardSensor_log_length = _rpythonic_function_(		"KeyboardSensor_log_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyboardSensor_modifier_key_1_get = _rpythonic_function_(		"KeyboardSensor_modifier_key_1_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyboardSensor_modifier_key_2_get = _rpythonic_function_(		"KeyboardSensor_modifier_key_2_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyboardSensor_target_get = _rpythonic_function_(		"KeyboardSensor_target_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

KeyboardSensor_target_length = _rpythonic_function_(		"KeyboardSensor_target_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Keyframe_rna_type_get = _rpythonic_function_(		"Keyframe_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Keyframe_co_get = _rpythonic_function_(		"Keyframe_co_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 2 )),] )

Keyframe_select_left_handle_get = _rpythonic_function_(		"Keyframe_select_left_handle_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Keyframe_select_right_handle_get = _rpythonic_function_(		"Keyframe_select_right_handle_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Keyframe_interpolation_get = _rpythonic_function_(		"Keyframe_interpolation_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Keyframe_handle_left_get = _rpythonic_function_(		"Keyframe_handle_left_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 2 )),] )

Keyframe_handle_left_type_get = _rpythonic_function_(		"Keyframe_handle_left_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Keyframe_handle_right_get = _rpythonic_function_(		"Keyframe_handle_right_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 2 )),] )

Keyframe_handle_right_type_get = _rpythonic_function_(		"Keyframe_handle_right_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Keyframe_select_control_point_get = _rpythonic_function_(		"Keyframe_select_control_point_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Keyframe_type_get = _rpythonic_function_(		"Keyframe_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyingSet_rna_type_get = _rpythonic_function_(		"KeyingSet_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyingSet_name_get = _rpythonic_function_(		"KeyingSet_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

KeyingSet_name_length = _rpythonic_function_(		"KeyingSet_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyingSet_is_path_absolute_get = _rpythonic_function_(		"KeyingSet_is_path_absolute_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyingSet_bl_options_get = _rpythonic_function_(		"KeyingSet_bl_options_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyingSet_paths_begin = _rpythonic_function_(		"KeyingSet_paths_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyingSet_paths_next = _rpythonic_function_(		"KeyingSet_paths_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

KeyingSet_paths_end = _rpythonic_function_(		"KeyingSet_paths_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

KeyingSet_type_info_get = _rpythonic_function_(		"KeyingSet_type_info_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyingSetInfo_rna_type_get = _rpythonic_function_(		"KeyingSetInfo_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyingSetInfo_bl_label_get = _rpythonic_function_(		"KeyingSetInfo_bl_label_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

KeyingSetInfo_bl_label_length = _rpythonic_function_(		"KeyingSetInfo_bl_label_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyingSetInfo_bl_options_get = _rpythonic_function_(		"KeyingSetInfo_bl_options_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyingSetInfo_bl_idname_get = _rpythonic_function_(		"KeyingSetInfo_bl_idname_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

KeyingSetInfo_bl_idname_length = _rpythonic_function_(		"KeyingSetInfo_bl_idname_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyingSetPath_rna_type_get = _rpythonic_function_(		"KeyingSetPath_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyingSetPath_data_path_get = _rpythonic_function_(		"KeyingSetPath_data_path_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

KeyingSetPath_data_path_length = _rpythonic_function_(		"KeyingSetPath_data_path_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyingSetPath_use_entire_array_get = _rpythonic_function_(		"KeyingSetPath_use_entire_array_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyingSetPath_group_get = _rpythonic_function_(		"KeyingSetPath_group_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

KeyingSetPath_group_length = _rpythonic_function_(		"KeyingSetPath_group_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyingSetPath_group_method_get = _rpythonic_function_(		"KeyingSetPath_group_method_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyingSetPath_id_type_get = _rpythonic_function_(		"KeyingSetPath_id_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyingSetPath_id_get = _rpythonic_function_(		"KeyingSetPath_id_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyingSetPath_bl_options_get = _rpythonic_function_(		"KeyingSetPath_bl_options_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyingSetPath_array_index_get = _rpythonic_function_(		"KeyingSetPath_array_index_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyingSetPaths_rna_type_get = _rpythonic_function_(		"KeyingSetPaths_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyingSetPaths_active_get = _rpythonic_function_(		"KeyingSetPaths_active_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyingSetPaths_active_index_get = _rpythonic_function_(		"KeyingSetPaths_active_index_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyingSets_rna_type_get = _rpythonic_function_(		"KeyingSets_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyingSets_active_get = _rpythonic_function_(		"KeyingSets_active_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyingSets_active_index_get = _rpythonic_function_(		"KeyingSets_active_index_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyingSetsAll_rna_type_get = _rpythonic_function_(		"KeyingSetsAll_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyingSetsAll_active_get = _rpythonic_function_(		"KeyingSetsAll_active_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KeyingSetsAll_active_index_get = _rpythonic_function_(		"KeyingSetsAll_active_index_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KinematicConstraint_reference_axis_get = _rpythonic_function_(		"KinematicConstraint_reference_axis_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KinematicConstraint_chain_count_get = _rpythonic_function_(		"KinematicConstraint_chain_count_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KinematicConstraint_distance_get = _rpythonic_function_(		"KinematicConstraint_distance_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KinematicConstraint_ik_type_get = _rpythonic_function_(		"KinematicConstraint_ik_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KinematicConstraint_iterations_get = _rpythonic_function_(		"KinematicConstraint_iterations_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KinematicConstraint_limit_mode_get = _rpythonic_function_(		"KinematicConstraint_limit_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KinematicConstraint_lock_location_x_get = _rpythonic_function_(		"KinematicConstraint_lock_location_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KinematicConstraint_lock_rotation_x_get = _rpythonic_function_(		"KinematicConstraint_lock_rotation_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KinematicConstraint_lock_location_y_get = _rpythonic_function_(		"KinematicConstraint_lock_location_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KinematicConstraint_lock_rotation_y_get = _rpythonic_function_(		"KinematicConstraint_lock_rotation_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KinematicConstraint_lock_location_z_get = _rpythonic_function_(		"KinematicConstraint_lock_location_z_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KinematicConstraint_lock_rotation_z_get = _rpythonic_function_(		"KinematicConstraint_lock_rotation_z_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KinematicConstraint_orient_weight_get = _rpythonic_function_(		"KinematicConstraint_orient_weight_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KinematicConstraint_pole_angle_get = _rpythonic_function_(		"KinematicConstraint_pole_angle_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KinematicConstraint_pole_subtarget_get = _rpythonic_function_(		"KinematicConstraint_pole_subtarget_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

KinematicConstraint_pole_subtarget_length = _rpythonic_function_(		"KinematicConstraint_pole_subtarget_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KinematicConstraint_pole_target_get = _rpythonic_function_(		"KinematicConstraint_pole_target_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KinematicConstraint_use_location_get = _rpythonic_function_(		"KinematicConstraint_use_location_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KinematicConstraint_use_rotation_get = _rpythonic_function_(		"KinematicConstraint_use_rotation_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KinematicConstraint_use_stretch_get = _rpythonic_function_(		"KinematicConstraint_use_stretch_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KinematicConstraint_subtarget_get = _rpythonic_function_(		"KinematicConstraint_subtarget_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

KinematicConstraint_subtarget_length = _rpythonic_function_(		"KinematicConstraint_subtarget_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KinematicConstraint_target_get = _rpythonic_function_(		"KinematicConstraint_target_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KinematicConstraint_use_target_get = _rpythonic_function_(		"KinematicConstraint_use_target_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KinematicConstraint_use_tail_get = _rpythonic_function_(		"KinematicConstraint_use_tail_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

KinematicConstraint_weight_get = _rpythonic_function_(		"KinematicConstraint_weight_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Lamp_active_texture_get = _rpythonic_function_(		"Lamp_active_texture_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Lamp_active_texture_index_get = _rpythonic_function_(		"Lamp_active_texture_index_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Lamp_animation_data_get = _rpythonic_function_(		"Lamp_animation_data_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Lamp_color_get = _rpythonic_function_(		"Lamp_color_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

Lamp_use_diffuse_get = _rpythonic_function_(		"Lamp_use_diffuse_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Lamp_distance_get = _rpythonic_function_(		"Lamp_distance_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Lamp_energy_get = _rpythonic_function_(		"Lamp_energy_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Lamp_use_own_layer_get = _rpythonic_function_(		"Lamp_use_own_layer_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Lamp_use_negative_get = _rpythonic_function_(		"Lamp_use_negative_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Lamp_use_specular_get = _rpythonic_function_(		"Lamp_use_specular_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Lamp_texture_slots_begin = _rpythonic_function_(		"Lamp_texture_slots_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Lamp_texture_slots_next = _rpythonic_function_(		"Lamp_texture_slots_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Lamp_texture_slots_end = _rpythonic_function_(		"Lamp_texture_slots_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Lamp_type_get = _rpythonic_function_(		"Lamp_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LampSkySettings_rna_type_get = _rpythonic_function_(		"LampSkySettings_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LampSkySettings_use_atmosphere_get = _rpythonic_function_(		"LampSkySettings_use_atmosphere_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LampSkySettings_atmosphere_distance_factor_get = _rpythonic_function_(		"LampSkySettings_atmosphere_distance_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LampSkySettings_atmosphere_extinction_get = _rpythonic_function_(		"LampSkySettings_atmosphere_extinction_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LampSkySettings_atmosphere_inscattering_get = _rpythonic_function_(		"LampSkySettings_atmosphere_inscattering_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LampSkySettings_atmosphere_turbidity_get = _rpythonic_function_(		"LampSkySettings_atmosphere_turbidity_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LampSkySettings_backscattered_light_get = _rpythonic_function_(		"LampSkySettings_backscattered_light_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LampSkySettings_horizon_brightness_get = _rpythonic_function_(		"LampSkySettings_horizon_brightness_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LampSkySettings_spread_get = _rpythonic_function_(		"LampSkySettings_spread_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LampSkySettings_use_sky_get = _rpythonic_function_(		"LampSkySettings_use_sky_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LampSkySettings_sky_blend_get = _rpythonic_function_(		"LampSkySettings_sky_blend_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LampSkySettings_sky_blend_type_get = _rpythonic_function_(		"LampSkySettings_sky_blend_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LampSkySettings_sky_color_space_get = _rpythonic_function_(		"LampSkySettings_sky_color_space_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LampSkySettings_sky_exposure_get = _rpythonic_function_(		"LampSkySettings_sky_exposure_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LampSkySettings_sun_brightness_get = _rpythonic_function_(		"LampSkySettings_sun_brightness_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LampSkySettings_sun_intensity_get = _rpythonic_function_(		"LampSkySettings_sun_intensity_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LampSkySettings_sun_size_get = _rpythonic_function_(		"LampSkySettings_sun_size_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LampTextureSlot_use_map_color_get = _rpythonic_function_(		"LampTextureSlot_use_map_color_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LampTextureSlot_color_factor_get = _rpythonic_function_(		"LampTextureSlot_color_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LampTextureSlot_object_get = _rpythonic_function_(		"LampTextureSlot_object_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LampTextureSlot_use_map_shadow_get = _rpythonic_function_(		"LampTextureSlot_use_map_shadow_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LampTextureSlot_shadow_factor_get = _rpythonic_function_(		"LampTextureSlot_shadow_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LampTextureSlot_texture_coords_get = _rpythonic_function_(		"LampTextureSlot_texture_coords_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LampTextureSlots_rna_type_get = _rpythonic_function_(		"LampTextureSlots_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Lattice_animation_data_get = _rpythonic_function_(		"Lattice_animation_data_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Lattice_interpolation_type_u_get = _rpythonic_function_(		"Lattice_interpolation_type_u_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Lattice_interpolation_type_v_get = _rpythonic_function_(		"Lattice_interpolation_type_v_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Lattice_interpolation_type_w_get = _rpythonic_function_(		"Lattice_interpolation_type_w_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Lattice_use_outside_get = _rpythonic_function_(		"Lattice_use_outside_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Lattice_points_begin = _rpythonic_function_(		"Lattice_points_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Lattice_points_next = _rpythonic_function_(		"Lattice_points_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Lattice_points_end = _rpythonic_function_(		"Lattice_points_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Lattice_shape_keys_get = _rpythonic_function_(		"Lattice_shape_keys_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Lattice_points_u_get = _rpythonic_function_(		"Lattice_points_u_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Lattice_points_v_get = _rpythonic_function_(		"Lattice_points_v_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Lattice_vertex_group_get = _rpythonic_function_(		"Lattice_vertex_group_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

Lattice_vertex_group_length = _rpythonic_function_(		"Lattice_vertex_group_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Lattice_points_w_get = _rpythonic_function_(		"Lattice_points_w_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LatticeModifier_object_get = _rpythonic_function_(		"LatticeModifier_object_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LatticeModifier_vertex_group_get = _rpythonic_function_(		"LatticeModifier_vertex_group_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

LatticeModifier_vertex_group_length = _rpythonic_function_(		"LatticeModifier_vertex_group_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LatticePoint_rna_type_get = _rpythonic_function_(		"LatticePoint_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LatticePoint_co_deform_get = _rpythonic_function_(		"LatticePoint_co_deform_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

LatticePoint_groups_begin = _rpythonic_function_(		"LatticePoint_groups_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LatticePoint_groups_next = _rpythonic_function_(		"LatticePoint_groups_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

LatticePoint_groups_end = _rpythonic_function_(		"LatticePoint_groups_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

LatticePoint_co_get = _rpythonic_function_(		"LatticePoint_co_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

Library_filepath_get = _rpythonic_function_(		"Library_filepath_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

Library_filepath_length = _rpythonic_function_(		"Library_filepath_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Library_parent_get = _rpythonic_function_(		"Library_parent_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LimitDistanceConstraint_distance_get = _rpythonic_function_(		"LimitDistanceConstraint_distance_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LimitDistanceConstraint_use_transform_limit_get = _rpythonic_function_(		"LimitDistanceConstraint_use_transform_limit_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LimitDistanceConstraint_head_tail_get = _rpythonic_function_(		"LimitDistanceConstraint_head_tail_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LimitDistanceConstraint_limit_mode_get = _rpythonic_function_(		"LimitDistanceConstraint_limit_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LimitDistanceConstraint_subtarget_get = _rpythonic_function_(		"LimitDistanceConstraint_subtarget_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

LimitDistanceConstraint_subtarget_length = _rpythonic_function_(		"LimitDistanceConstraint_subtarget_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LimitDistanceConstraint_target_get = _rpythonic_function_(		"LimitDistanceConstraint_target_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LimitLocationConstraint_use_transform_limit_get = _rpythonic_function_(		"LimitLocationConstraint_use_transform_limit_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LimitLocationConstraint_use_max_x_get = _rpythonic_function_(		"LimitLocationConstraint_use_max_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LimitLocationConstraint_max_x_get = _rpythonic_function_(		"LimitLocationConstraint_max_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LimitLocationConstraint_use_max_y_get = _rpythonic_function_(		"LimitLocationConstraint_use_max_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LimitLocationConstraint_max_y_get = _rpythonic_function_(		"LimitLocationConstraint_max_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LimitLocationConstraint_use_max_z_get = _rpythonic_function_(		"LimitLocationConstraint_use_max_z_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LimitLocationConstraint_max_z_get = _rpythonic_function_(		"LimitLocationConstraint_max_z_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LimitLocationConstraint_use_min_x_get = _rpythonic_function_(		"LimitLocationConstraint_use_min_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LimitLocationConstraint_min_x_get = _rpythonic_function_(		"LimitLocationConstraint_min_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LimitLocationConstraint_use_min_y_get = _rpythonic_function_(		"LimitLocationConstraint_use_min_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LimitLocationConstraint_min_y_get = _rpythonic_function_(		"LimitLocationConstraint_min_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LimitLocationConstraint_use_min_z_get = _rpythonic_function_(		"LimitLocationConstraint_use_min_z_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LimitLocationConstraint_min_z_get = _rpythonic_function_(		"LimitLocationConstraint_min_z_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LimitRotationConstraint_use_transform_limit_get = _rpythonic_function_(		"LimitRotationConstraint_use_transform_limit_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LimitRotationConstraint_use_limit_x_get = _rpythonic_function_(		"LimitRotationConstraint_use_limit_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LimitRotationConstraint_use_limit_y_get = _rpythonic_function_(		"LimitRotationConstraint_use_limit_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LimitRotationConstraint_use_limit_z_get = _rpythonic_function_(		"LimitRotationConstraint_use_limit_z_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LimitRotationConstraint_max_x_get = _rpythonic_function_(		"LimitRotationConstraint_max_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LimitRotationConstraint_max_y_get = _rpythonic_function_(		"LimitRotationConstraint_max_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LimitRotationConstraint_max_z_get = _rpythonic_function_(		"LimitRotationConstraint_max_z_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LimitRotationConstraint_min_x_get = _rpythonic_function_(		"LimitRotationConstraint_min_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LimitRotationConstraint_min_y_get = _rpythonic_function_(		"LimitRotationConstraint_min_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LimitRotationConstraint_min_z_get = _rpythonic_function_(		"LimitRotationConstraint_min_z_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LimitScaleConstraint_use_transform_limit_get = _rpythonic_function_(		"LimitScaleConstraint_use_transform_limit_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LimitScaleConstraint_use_max_x_get = _rpythonic_function_(		"LimitScaleConstraint_use_max_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LimitScaleConstraint_max_x_get = _rpythonic_function_(		"LimitScaleConstraint_max_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LimitScaleConstraint_use_max_y_get = _rpythonic_function_(		"LimitScaleConstraint_use_max_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LimitScaleConstraint_max_y_get = _rpythonic_function_(		"LimitScaleConstraint_max_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LimitScaleConstraint_use_max_z_get = _rpythonic_function_(		"LimitScaleConstraint_use_max_z_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LimitScaleConstraint_max_z_get = _rpythonic_function_(		"LimitScaleConstraint_max_z_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LimitScaleConstraint_use_min_x_get = _rpythonic_function_(		"LimitScaleConstraint_use_min_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LimitScaleConstraint_min_x_get = _rpythonic_function_(		"LimitScaleConstraint_min_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LimitScaleConstraint_use_min_y_get = _rpythonic_function_(		"LimitScaleConstraint_use_min_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LimitScaleConstraint_min_y_get = _rpythonic_function_(		"LimitScaleConstraint_min_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LimitScaleConstraint_use_min_z_get = _rpythonic_function_(		"LimitScaleConstraint_use_min_z_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LimitScaleConstraint_min_z_get = _rpythonic_function_(		"LimitScaleConstraint_min_z_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LockedTrackConstraint_head_tail_get = _rpythonic_function_(		"LockedTrackConstraint_head_tail_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LockedTrackConstraint_lock_axis_get = _rpythonic_function_(		"LockedTrackConstraint_lock_axis_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LockedTrackConstraint_subtarget_get = _rpythonic_function_(		"LockedTrackConstraint_subtarget_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

LockedTrackConstraint_subtarget_length = _rpythonic_function_(		"LockedTrackConstraint_subtarget_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LockedTrackConstraint_target_get = _rpythonic_function_(		"LockedTrackConstraint_target_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

LockedTrackConstraint_track_axis_get = _rpythonic_function_(		"LockedTrackConstraint_track_axis_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Macro_rna_type_get = _rpythonic_function_(		"Macro_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Macro_name_get = _rpythonic_function_(		"Macro_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

Macro_name_length = _rpythonic_function_(		"Macro_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Macro_bl_options_get = _rpythonic_function_(		"Macro_bl_options_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Macro_properties_get = _rpythonic_function_(		"Macro_properties_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Macro_bl_description_get = _rpythonic_function_(		"Macro_bl_description_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

Macro_bl_description_length = _rpythonic_function_(		"Macro_bl_description_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Macro_bl_idname_get = _rpythonic_function_(		"Macro_bl_idname_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

Macro_bl_idname_length = _rpythonic_function_(		"Macro_bl_idname_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Macro_bl_label_get = _rpythonic_function_(		"Macro_bl_label_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

Macro_bl_label_length = _rpythonic_function_(		"Macro_bl_label_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MagicTexture_noise_depth_get = _rpythonic_function_(		"MagicTexture_noise_depth_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MagicTexture_turbulence_get = _rpythonic_function_(		"MagicTexture_turbulence_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaintainVolumeConstraint_free_axis_get = _rpythonic_function_(		"MaintainVolumeConstraint_free_axis_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaintainVolumeConstraint_volume_get = _rpythonic_function_(		"MaintainVolumeConstraint_volume_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MarbleTexture_nabla_get = _rpythonic_function_(		"MarbleTexture_nabla_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MarbleTexture_noise_basis_get = _rpythonic_function_(		"MarbleTexture_noise_basis_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MarbleTexture_noise_basis_2_get = _rpythonic_function_(		"MarbleTexture_noise_basis_2_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MarbleTexture_noise_depth_get = _rpythonic_function_(		"MarbleTexture_noise_depth_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MarbleTexture_noise_scale_get = _rpythonic_function_(		"MarbleTexture_noise_scale_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MarbleTexture_noise_type_get = _rpythonic_function_(		"MarbleTexture_noise_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MarbleTexture_marble_type_get = _rpythonic_function_(		"MarbleTexture_marble_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MarbleTexture_turbulence_get = _rpythonic_function_(		"MarbleTexture_turbulence_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaskModifier_armature_get = _rpythonic_function_(		"MaskModifier_armature_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaskModifier_invert_vertex_group_get = _rpythonic_function_(		"MaskModifier_invert_vertex_group_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaskModifier_mode_get = _rpythonic_function_(		"MaskModifier_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaskModifier_vertex_group_get = _rpythonic_function_(		"MaskModifier_vertex_group_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

MaskModifier_vertex_group_length = _rpythonic_function_(		"MaskModifier_vertex_group_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_active_texture_get = _rpythonic_function_(		"Material_active_texture_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_active_texture_index_get = _rpythonic_function_(		"Material_active_texture_index_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_alpha_get = _rpythonic_function_(		"Material_alpha_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_ambient_get = _rpythonic_function_(		"Material_ambient_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_animation_data_get = _rpythonic_function_(		"Material_animation_data_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_use_cast_approximate_get = _rpythonic_function_(		"Material_use_cast_approximate_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_use_cast_buffer_shadows_get = _rpythonic_function_(		"Material_use_cast_buffer_shadows_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_use_cast_shadows_only_get = _rpythonic_function_(		"Material_use_cast_shadows_only_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_use_cubic_get = _rpythonic_function_(		"Material_use_cubic_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_darkness_get = _rpythonic_function_(		"Material_darkness_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_diffuse_color_get = _rpythonic_function_(		"Material_diffuse_color_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

Material_diffuse_fresnel_get = _rpythonic_function_(		"Material_diffuse_fresnel_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_diffuse_fresnel_factor_get = _rpythonic_function_(		"Material_diffuse_fresnel_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_diffuse_intensity_get = _rpythonic_function_(		"Material_diffuse_intensity_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_diffuse_ramp_get = _rpythonic_function_(		"Material_diffuse_ramp_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_diffuse_ramp_blend_get = _rpythonic_function_(		"Material_diffuse_ramp_blend_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_specular_ramp_blend_get = _rpythonic_function_(		"Material_specular_ramp_blend_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_diffuse_ramp_factor_get = _rpythonic_function_(		"Material_diffuse_ramp_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_diffuse_ramp_input_get = _rpythonic_function_(		"Material_diffuse_ramp_input_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_diffuse_shader_get = _rpythonic_function_(		"Material_diffuse_shader_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_diffuse_toon_size_get = _rpythonic_function_(		"Material_diffuse_toon_size_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_diffuse_toon_smooth_get = _rpythonic_function_(		"Material_diffuse_toon_smooth_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_emit_get = _rpythonic_function_(		"Material_emit_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_use_face_texture_get = _rpythonic_function_(		"Material_use_face_texture_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_use_face_texture_alpha_get = _rpythonic_function_(		"Material_use_face_texture_alpha_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_use_full_oversampling_get = _rpythonic_function_(		"Material_use_full_oversampling_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_halo_get = _rpythonic_function_(		"Material_halo_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_invert_z_get = _rpythonic_function_(		"Material_invert_z_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_light_group_get = _rpythonic_function_(		"Material_light_group_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_use_light_group_exclusive_get = _rpythonic_function_(		"Material_use_light_group_exclusive_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_active_node_material_get = _rpythonic_function_(		"Material_active_node_material_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_mirror_color_get = _rpythonic_function_(		"Material_mirror_color_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

Material_node_tree_get = _rpythonic_function_(		"Material_node_tree_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_use_object_color_get = _rpythonic_function_(		"Material_use_object_color_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_use_only_shadow_get = _rpythonic_function_(		"Material_use_only_shadow_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_pass_index_get = _rpythonic_function_(		"Material_pass_index_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_physics_get = _rpythonic_function_(		"Material_physics_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_preview_render_type_get = _rpythonic_function_(		"Material_preview_render_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_use_ray_shadow_bias_get = _rpythonic_function_(		"Material_use_ray_shadow_bias_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_raytrace_mirror_get = _rpythonic_function_(		"Material_raytrace_mirror_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_raytrace_transparency_get = _rpythonic_function_(		"Material_raytrace_transparency_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_use_transparent_shadows_get = _rpythonic_function_(		"Material_use_transparent_shadows_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_roughness_get = _rpythonic_function_(		"Material_roughness_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_use_shadeless_get = _rpythonic_function_(		"Material_use_shadeless_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_shadow_buffer_bias_get = _rpythonic_function_(		"Material_shadow_buffer_bias_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_shadow_cast_alpha_get = _rpythonic_function_(		"Material_shadow_cast_alpha_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_shadow_ray_bias_get = _rpythonic_function_(		"Material_shadow_ray_bias_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_shadow_only_type_get = _rpythonic_function_(		"Material_shadow_only_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_use_shadows_get = _rpythonic_function_(		"Material_use_shadows_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_use_sky_get = _rpythonic_function_(		"Material_use_sky_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_specular_alpha_get = _rpythonic_function_(		"Material_specular_alpha_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_specular_color_get = _rpythonic_function_(		"Material_specular_color_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

Material_specular_hardness_get = _rpythonic_function_(		"Material_specular_hardness_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_specular_ior_get = _rpythonic_function_(		"Material_specular_ior_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_specular_intensity_get = _rpythonic_function_(		"Material_specular_intensity_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_specular_ramp_get = _rpythonic_function_(		"Material_specular_ramp_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_specular_ramp_factor_get = _rpythonic_function_(		"Material_specular_ramp_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_specular_ramp_input_get = _rpythonic_function_(		"Material_specular_ramp_input_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_specular_shader_get = _rpythonic_function_(		"Material_specular_shader_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_specular_slope_get = _rpythonic_function_(		"Material_specular_slope_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_specular_toon_size_get = _rpythonic_function_(		"Material_specular_toon_size_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_specular_toon_smooth_get = _rpythonic_function_(		"Material_specular_toon_smooth_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_strand_get = _rpythonic_function_(		"Material_strand_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_subsurface_scattering_get = _rpythonic_function_(		"Material_subsurface_scattering_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_use_tangent_shading_get = _rpythonic_function_(		"Material_use_tangent_shading_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_texture_slots_begin = _rpythonic_function_(		"Material_texture_slots_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_texture_slots_next = _rpythonic_function_(		"Material_texture_slots_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Material_texture_slots_end = _rpythonic_function_(		"Material_texture_slots_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Material_use_raytrace_get = _rpythonic_function_(		"Material_use_raytrace_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_translucency_get = _rpythonic_function_(		"Material_translucency_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_use_transparency_get = _rpythonic_function_(		"Material_use_transparency_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_transparency_method_get = _rpythonic_function_(		"Material_transparency_method_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_type_get = _rpythonic_function_(		"Material_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_use_diffuse_ramp_get = _rpythonic_function_(		"Material_use_diffuse_ramp_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_use_mist_get = _rpythonic_function_(		"Material_use_mist_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_use_nodes_get = _rpythonic_function_(		"Material_use_nodes_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_use_specular_ramp_get = _rpythonic_function_(		"Material_use_specular_ramp_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_use_textures_get = _rpythonic_function_(		"Material_use_textures_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_int * 18 )),] )

Material_use_vertex_color_light_get = _rpythonic_function_(		"Material_use_vertex_color_light_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_use_vertex_color_paint_get = _rpythonic_function_(		"Material_use_vertex_color_paint_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_volume_get = _rpythonic_function_(		"Material_volume_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Material_offset_z_get = _rpythonic_function_(		"Material_offset_z_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialHalo_rna_type_get = _rpythonic_function_(		"MaterialHalo_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialHalo_add_get = _rpythonic_function_(		"MaterialHalo_add_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialHalo_use_extreme_alpha_get = _rpythonic_function_(		"MaterialHalo_use_extreme_alpha_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialHalo_use_flare_mode_get = _rpythonic_function_(		"MaterialHalo_use_flare_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialHalo_flare_boost_get = _rpythonic_function_(		"MaterialHalo_flare_boost_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialHalo_flare_seed_get = _rpythonic_function_(		"MaterialHalo_flare_seed_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialHalo_flare_size_get = _rpythonic_function_(		"MaterialHalo_flare_size_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialHalo_flare_subflare_size_get = _rpythonic_function_(		"MaterialHalo_flare_subflare_size_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialHalo_flare_subflare_count_get = _rpythonic_function_(		"MaterialHalo_flare_subflare_count_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialHalo_hardness_get = _rpythonic_function_(		"MaterialHalo_hardness_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialHalo_line_count_get = _rpythonic_function_(		"MaterialHalo_line_count_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialHalo_use_lines_get = _rpythonic_function_(		"MaterialHalo_use_lines_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialHalo_ring_count_get = _rpythonic_function_(		"MaterialHalo_ring_count_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialHalo_use_ring_get = _rpythonic_function_(		"MaterialHalo_use_ring_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialHalo_seed_get = _rpythonic_function_(		"MaterialHalo_seed_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialHalo_use_shaded_get = _rpythonic_function_(		"MaterialHalo_use_shaded_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialHalo_size_get = _rpythonic_function_(		"MaterialHalo_size_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialHalo_use_soft_get = _rpythonic_function_(		"MaterialHalo_use_soft_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialHalo_use_star_get = _rpythonic_function_(		"MaterialHalo_use_star_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialHalo_star_tip_count_get = _rpythonic_function_(		"MaterialHalo_star_tip_count_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialHalo_use_texture_get = _rpythonic_function_(		"MaterialHalo_use_texture_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialHalo_use_vertex_normal_get = _rpythonic_function_(		"MaterialHalo_use_vertex_normal_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialPhysics_rna_type_get = _rpythonic_function_(		"MaterialPhysics_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialPhysics_use_fh_normal_get = _rpythonic_function_(		"MaterialPhysics_use_fh_normal_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialPhysics_fh_damping_get = _rpythonic_function_(		"MaterialPhysics_fh_damping_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialPhysics_fh_distance_get = _rpythonic_function_(		"MaterialPhysics_fh_distance_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialPhysics_elasticity_get = _rpythonic_function_(		"MaterialPhysics_elasticity_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialPhysics_fh_force_get = _rpythonic_function_(		"MaterialPhysics_fh_force_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialPhysics_friction_get = _rpythonic_function_(		"MaterialPhysics_friction_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialRaytraceMirror_rna_type_get = _rpythonic_function_(		"MaterialRaytraceMirror_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialRaytraceMirror_depth_get = _rpythonic_function_(		"MaterialRaytraceMirror_depth_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialRaytraceMirror_use_get = _rpythonic_function_(		"MaterialRaytraceMirror_use_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialRaytraceMirror_fade_to_get = _rpythonic_function_(		"MaterialRaytraceMirror_fade_to_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialRaytraceMirror_fresnel_get = _rpythonic_function_(		"MaterialRaytraceMirror_fresnel_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialRaytraceMirror_fresnel_factor_get = _rpythonic_function_(		"MaterialRaytraceMirror_fresnel_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialRaytraceMirror_gloss_factor_get = _rpythonic_function_(		"MaterialRaytraceMirror_gloss_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialRaytraceMirror_gloss_anisotropic_get = _rpythonic_function_(		"MaterialRaytraceMirror_gloss_anisotropic_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialRaytraceMirror_gloss_samples_get = _rpythonic_function_(		"MaterialRaytraceMirror_gloss_samples_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialRaytraceMirror_gloss_threshold_get = _rpythonic_function_(		"MaterialRaytraceMirror_gloss_threshold_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialRaytraceMirror_distance_get = _rpythonic_function_(		"MaterialRaytraceMirror_distance_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialRaytraceMirror_reflect_factor_get = _rpythonic_function_(		"MaterialRaytraceMirror_reflect_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialRaytraceTransparency_rna_type_get = _rpythonic_function_(		"MaterialRaytraceTransparency_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialRaytraceTransparency_depth_get = _rpythonic_function_(		"MaterialRaytraceTransparency_depth_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialRaytraceTransparency_falloff_get = _rpythonic_function_(		"MaterialRaytraceTransparency_falloff_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialRaytraceTransparency_filter_get = _rpythonic_function_(		"MaterialRaytraceTransparency_filter_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialRaytraceTransparency_fresnel_get = _rpythonic_function_(		"MaterialRaytraceTransparency_fresnel_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialRaytraceTransparency_fresnel_factor_get = _rpythonic_function_(		"MaterialRaytraceTransparency_fresnel_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialRaytraceTransparency_gloss_factor_get = _rpythonic_function_(		"MaterialRaytraceTransparency_gloss_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialRaytraceTransparency_gloss_samples_get = _rpythonic_function_(		"MaterialRaytraceTransparency_gloss_samples_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialRaytraceTransparency_gloss_threshold_get = _rpythonic_function_(		"MaterialRaytraceTransparency_gloss_threshold_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialRaytraceTransparency_ior_get = _rpythonic_function_(		"MaterialRaytraceTransparency_ior_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialRaytraceTransparency_depth_max_get = _rpythonic_function_(		"MaterialRaytraceTransparency_depth_max_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialSlot_rna_type_get = _rpythonic_function_(		"MaterialSlot_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialSlot_name_get = _rpythonic_function_(		"MaterialSlot_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

MaterialSlot_name_length = _rpythonic_function_(		"MaterialSlot_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialSlot_link_get = _rpythonic_function_(		"MaterialSlot_link_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialSlot_material_get = _rpythonic_function_(		"MaterialSlot_material_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialStrand_rna_type_get = _rpythonic_function_(		"MaterialStrand_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialStrand_blend_distance_get = _rpythonic_function_(		"MaterialStrand_blend_distance_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialStrand_use_blender_units_get = _rpythonic_function_(		"MaterialStrand_use_blender_units_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialStrand_size_min_get = _rpythonic_function_(		"MaterialStrand_size_min_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialStrand_root_size_get = _rpythonic_function_(		"MaterialStrand_root_size_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialStrand_shape_get = _rpythonic_function_(		"MaterialStrand_shape_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialStrand_use_surface_diffuse_get = _rpythonic_function_(		"MaterialStrand_use_surface_diffuse_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialStrand_use_tangent_shading_get = _rpythonic_function_(		"MaterialStrand_use_tangent_shading_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialStrand_tip_size_get = _rpythonic_function_(		"MaterialStrand_tip_size_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialStrand_uv_layer_get = _rpythonic_function_(		"MaterialStrand_uv_layer_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

MaterialStrand_uv_layer_length = _rpythonic_function_(		"MaterialStrand_uv_layer_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialStrand_width_fade_get = _rpythonic_function_(		"MaterialStrand_width_fade_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialSubsurfaceScattering_rna_type_get = _rpythonic_function_(		"MaterialSubsurfaceScattering_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialSubsurfaceScattering_back_get = _rpythonic_function_(		"MaterialSubsurfaceScattering_back_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialSubsurfaceScattering_color_get = _rpythonic_function_(		"MaterialSubsurfaceScattering_color_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

MaterialSubsurfaceScattering_color_factor_get = _rpythonic_function_(		"MaterialSubsurfaceScattering_color_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialSubsurfaceScattering_use_get = _rpythonic_function_(		"MaterialSubsurfaceScattering_use_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialSubsurfaceScattering_error_threshold_get = _rpythonic_function_(		"MaterialSubsurfaceScattering_error_threshold_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialSubsurfaceScattering_front_get = _rpythonic_function_(		"MaterialSubsurfaceScattering_front_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialSubsurfaceScattering_ior_get = _rpythonic_function_(		"MaterialSubsurfaceScattering_ior_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialSubsurfaceScattering_radius_get = _rpythonic_function_(		"MaterialSubsurfaceScattering_radius_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

MaterialSubsurfaceScattering_scale_get = _rpythonic_function_(		"MaterialSubsurfaceScattering_scale_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialSubsurfaceScattering_texture_factor_get = _rpythonic_function_(		"MaterialSubsurfaceScattering_texture_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_use_map_alpha_get = _rpythonic_function_(		"MaterialTextureSlot_use_map_alpha_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_alpha_factor_get = _rpythonic_function_(		"MaterialTextureSlot_alpha_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_use_map_ambient_get = _rpythonic_function_(		"MaterialTextureSlot_use_map_ambient_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_ambient_factor_get = _rpythonic_function_(		"MaterialTextureSlot_ambient_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_bump_method_get = _rpythonic_function_(		"MaterialTextureSlot_bump_method_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_bump_objectspace_get = _rpythonic_function_(		"MaterialTextureSlot_bump_objectspace_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_use_map_density_get = _rpythonic_function_(		"MaterialTextureSlot_use_map_density_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_density_factor_get = _rpythonic_function_(		"MaterialTextureSlot_density_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_use_map_diffuse_get = _rpythonic_function_(		"MaterialTextureSlot_use_map_diffuse_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_use_map_color_diffuse_get = _rpythonic_function_(		"MaterialTextureSlot_use_map_color_diffuse_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_diffuse_color_factor_get = _rpythonic_function_(		"MaterialTextureSlot_diffuse_color_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_diffuse_factor_get = _rpythonic_function_(		"MaterialTextureSlot_diffuse_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_use_map_displacement_get = _rpythonic_function_(		"MaterialTextureSlot_use_map_displacement_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_displacement_factor_get = _rpythonic_function_(		"MaterialTextureSlot_displacement_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_use_map_emission_get = _rpythonic_function_(		"MaterialTextureSlot_use_map_emission_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_use_map_color_emission_get = _rpythonic_function_(		"MaterialTextureSlot_use_map_color_emission_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_emission_color_factor_get = _rpythonic_function_(		"MaterialTextureSlot_emission_color_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_emission_factor_get = _rpythonic_function_(		"MaterialTextureSlot_emission_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_use_map_emit_get = _rpythonic_function_(		"MaterialTextureSlot_use_map_emit_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_emit_factor_get = _rpythonic_function_(		"MaterialTextureSlot_emit_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_use_get = _rpythonic_function_(		"MaterialTextureSlot_use_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_use_from_dupli_get = _rpythonic_function_(		"MaterialTextureSlot_use_from_dupli_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_use_from_original_get = _rpythonic_function_(		"MaterialTextureSlot_use_from_original_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_use_map_hardness_get = _rpythonic_function_(		"MaterialTextureSlot_use_map_hardness_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_hardness_factor_get = _rpythonic_function_(		"MaterialTextureSlot_hardness_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_mapping_get = _rpythonic_function_(		"MaterialTextureSlot_mapping_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_use_map_mirror_get = _rpythonic_function_(		"MaterialTextureSlot_use_map_mirror_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_mirror_factor_get = _rpythonic_function_(		"MaterialTextureSlot_mirror_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_use_map_normal_get = _rpythonic_function_(		"MaterialTextureSlot_use_map_normal_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_normal_factor_get = _rpythonic_function_(		"MaterialTextureSlot_normal_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_normal_map_space_get = _rpythonic_function_(		"MaterialTextureSlot_normal_map_space_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_object_get = _rpythonic_function_(		"MaterialTextureSlot_object_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_raymir_factor_get = _rpythonic_function_(		"MaterialTextureSlot_raymir_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_use_map_raymir_get = _rpythonic_function_(		"MaterialTextureSlot_use_map_raymir_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_use_map_reflect_get = _rpythonic_function_(		"MaterialTextureSlot_use_map_reflect_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_use_map_color_reflection_get = _rpythonic_function_(		"MaterialTextureSlot_use_map_color_reflection_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_reflection_color_factor_get = _rpythonic_function_(		"MaterialTextureSlot_reflection_color_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_reflection_factor_get = _rpythonic_function_(		"MaterialTextureSlot_reflection_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_use_map_scatter_get = _rpythonic_function_(		"MaterialTextureSlot_use_map_scatter_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_scattering_factor_get = _rpythonic_function_(		"MaterialTextureSlot_scattering_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_use_map_specular_get = _rpythonic_function_(		"MaterialTextureSlot_use_map_specular_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_use_map_color_spec_get = _rpythonic_function_(		"MaterialTextureSlot_use_map_color_spec_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_specular_color_factor_get = _rpythonic_function_(		"MaterialTextureSlot_specular_color_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_specular_factor_get = _rpythonic_function_(		"MaterialTextureSlot_specular_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_texture_coords_get = _rpythonic_function_(		"MaterialTextureSlot_texture_coords_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_use_map_translucency_get = _rpythonic_function_(		"MaterialTextureSlot_use_map_translucency_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_translucency_factor_get = _rpythonic_function_(		"MaterialTextureSlot_translucency_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_use_map_color_transmission_get = _rpythonic_function_(		"MaterialTextureSlot_use_map_color_transmission_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_transmission_color_factor_get = _rpythonic_function_(		"MaterialTextureSlot_transmission_color_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_uv_layer_get = _rpythonic_function_(		"MaterialTextureSlot_uv_layer_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

MaterialTextureSlot_uv_layer_length = _rpythonic_function_(		"MaterialTextureSlot_uv_layer_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_use_map_warp_get = _rpythonic_function_(		"MaterialTextureSlot_use_map_warp_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_warp_factor_get = _rpythonic_function_(		"MaterialTextureSlot_warp_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_mapping_x_get = _rpythonic_function_(		"MaterialTextureSlot_mapping_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_mapping_y_get = _rpythonic_function_(		"MaterialTextureSlot_mapping_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlot_mapping_z_get = _rpythonic_function_(		"MaterialTextureSlot_mapping_z_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialTextureSlots_rna_type_get = _rpythonic_function_(		"MaterialTextureSlots_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialVolume_rna_type_get = _rpythonic_function_(		"MaterialVolume_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialVolume_asymmetry_get = _rpythonic_function_(		"MaterialVolume_asymmetry_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialVolume_density_get = _rpythonic_function_(		"MaterialVolume_density_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialVolume_density_scale_get = _rpythonic_function_(		"MaterialVolume_density_scale_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialVolume_depth_threshold_get = _rpythonic_function_(		"MaterialVolume_depth_threshold_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialVolume_ms_diffusion_get = _rpythonic_function_(		"MaterialVolume_ms_diffusion_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialVolume_emission_get = _rpythonic_function_(		"MaterialVolume_emission_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialVolume_emission_color_get = _rpythonic_function_(		"MaterialVolume_emission_color_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

MaterialVolume_use_external_shadows_get = _rpythonic_function_(		"MaterialVolume_use_external_shadows_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialVolume_ms_intensity_get = _rpythonic_function_(		"MaterialVolume_ms_intensity_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialVolume_use_light_cache_get = _rpythonic_function_(		"MaterialVolume_use_light_cache_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialVolume_light_method_get = _rpythonic_function_(		"MaterialVolume_light_method_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialVolume_reflection_get = _rpythonic_function_(		"MaterialVolume_reflection_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialVolume_reflection_color_get = _rpythonic_function_(		"MaterialVolume_reflection_color_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

MaterialVolume_cache_resolution_get = _rpythonic_function_(		"MaterialVolume_cache_resolution_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialVolume_scattering_get = _rpythonic_function_(		"MaterialVolume_scattering_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialVolume_ms_spread_get = _rpythonic_function_(		"MaterialVolume_ms_spread_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialVolume_step_method_get = _rpythonic_function_(		"MaterialVolume_step_method_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialVolume_step_size_get = _rpythonic_function_(		"MaterialVolume_step_size_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MaterialVolume_transmission_color_get = _rpythonic_function_(		"MaterialVolume_transmission_color_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

Menu_rna_type_get = _rpythonic_function_(		"Menu_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Menu_bl_idname_get = _rpythonic_function_(		"Menu_bl_idname_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

Menu_bl_idname_length = _rpythonic_function_(		"Menu_bl_idname_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Menu_bl_label_get = _rpythonic_function_(		"Menu_bl_label_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

Menu_bl_label_length = _rpythonic_function_(		"Menu_bl_label_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Menu_layout_get = _rpythonic_function_(		"Menu_layout_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Mesh_show_all_edges_get = _rpythonic_function_(		"Mesh_show_all_edges_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Mesh_animation_data_get = _rpythonic_function_(		"Mesh_animation_data_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Mesh_use_auto_smooth_get = _rpythonic_function_(		"Mesh_use_auto_smooth_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Mesh_auto_smooth_angle_get = _rpythonic_function_(		"Mesh_auto_smooth_angle_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Mesh_use_auto_texspace_get = _rpythonic_function_(		"Mesh_use_auto_texspace_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Mesh_uv_texture_clone_get = _rpythonic_function_(		"Mesh_uv_texture_clone_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Mesh_uv_texture_clone_index_get = _rpythonic_function_(		"Mesh_uv_texture_clone_index_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Mesh_show_double_sided_get = _rpythonic_function_(		"Mesh_show_double_sided_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Mesh_show_edge_bevel_weight_get = _rpythonic_function_(		"Mesh_show_edge_bevel_weight_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Mesh_show_edge_crease_get = _rpythonic_function_(		"Mesh_show_edge_crease_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Mesh_show_edges_get = _rpythonic_function_(		"Mesh_show_edges_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Mesh_show_faces_get = _rpythonic_function_(		"Mesh_show_faces_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Mesh_show_normal_face_get = _rpythonic_function_(		"Mesh_show_normal_face_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Mesh_show_edge_seams_get = _rpythonic_function_(		"Mesh_show_edge_seams_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Mesh_show_edge_sharp_get = _rpythonic_function_(		"Mesh_show_edge_sharp_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Mesh_show_normal_vertex_get = _rpythonic_function_(		"Mesh_show_normal_vertex_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Mesh_show_extra_edge_length_get = _rpythonic_function_(		"Mesh_show_extra_edge_length_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Mesh_edges_begin = _rpythonic_function_(		"Mesh_edges_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Mesh_edges_next = _rpythonic_function_(		"Mesh_edges_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Mesh_edges_end = _rpythonic_function_(		"Mesh_edges_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Mesh_show_extra_face_area_get = _rpythonic_function_(		"Mesh_show_extra_face_area_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Mesh_faces_begin = _rpythonic_function_(		"Mesh_faces_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Mesh_faces_next = _rpythonic_function_(		"Mesh_faces_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Mesh_faces_end = _rpythonic_function_(		"Mesh_faces_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Mesh_show_extra_face_angle_get = _rpythonic_function_(		"Mesh_show_extra_face_angle_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Mesh_layers_float_begin = _rpythonic_function_(		"Mesh_layers_float_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Mesh_layers_float_next = _rpythonic_function_(		"Mesh_layers_float_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Mesh_layers_float_end = _rpythonic_function_(		"Mesh_layers_float_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Mesh_layers_int_begin = _rpythonic_function_(		"Mesh_layers_int_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Mesh_layers_int_next = _rpythonic_function_(		"Mesh_layers_int_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Mesh_layers_int_end = _rpythonic_function_(		"Mesh_layers_int_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Mesh_uv_texture_stencil_get = _rpythonic_function_(		"Mesh_uv_texture_stencil_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Mesh_uv_texture_stencil_index_get = _rpythonic_function_(		"Mesh_uv_texture_stencil_index_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Mesh_materials_begin = _rpythonic_function_(		"Mesh_materials_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Mesh_materials_next = _rpythonic_function_(		"Mesh_materials_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Mesh_materials_end = _rpythonic_function_(		"Mesh_materials_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Mesh_use_paint_mask_get = _rpythonic_function_(		"Mesh_use_paint_mask_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Mesh_total_edge_sel_get = _rpythonic_function_(		"Mesh_total_edge_sel_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Mesh_total_face_sel_get = _rpythonic_function_(		"Mesh_total_face_sel_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Mesh_total_vert_sel_get = _rpythonic_function_(		"Mesh_total_vert_sel_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Mesh_shape_keys_get = _rpythonic_function_(		"Mesh_shape_keys_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Mesh_sticky_begin = _rpythonic_function_(		"Mesh_sticky_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Mesh_sticky_next = _rpythonic_function_(		"Mesh_sticky_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Mesh_sticky_end = _rpythonic_function_(		"Mesh_sticky_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Mesh_layers_string_begin = _rpythonic_function_(		"Mesh_layers_string_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Mesh_layers_string_next = _rpythonic_function_(		"Mesh_layers_string_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Mesh_layers_string_end = _rpythonic_function_(		"Mesh_layers_string_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Mesh_texture_mesh_get = _rpythonic_function_(		"Mesh_texture_mesh_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Mesh_texspace_location_get = _rpythonic_function_(		"Mesh_texspace_location_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

Mesh_texco_mesh_get = _rpythonic_function_(		"Mesh_texco_mesh_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Mesh_texspace_size_get = _rpythonic_function_(		"Mesh_texspace_size_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

Mesh_use_mirror_topology_get = _rpythonic_function_(		"Mesh_use_mirror_topology_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Mesh_uv_textures_begin = _rpythonic_function_(		"Mesh_uv_textures_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Mesh_uv_textures_next = _rpythonic_function_(		"Mesh_uv_textures_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Mesh_uv_textures_end = _rpythonic_function_(		"Mesh_uv_textures_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Mesh_vertex_colors_begin = _rpythonic_function_(		"Mesh_vertex_colors_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Mesh_vertex_colors_next = _rpythonic_function_(		"Mesh_vertex_colors_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Mesh_vertex_colors_end = _rpythonic_function_(		"Mesh_vertex_colors_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Mesh_vertices_begin = _rpythonic_function_(		"Mesh_vertices_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Mesh_vertices_next = _rpythonic_function_(		"Mesh_vertices_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Mesh_vertices_end = _rpythonic_function_(		"Mesh_vertices_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Mesh_use_mirror_x_get = _rpythonic_function_(		"Mesh_use_mirror_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshColor_rna_type_get = _rpythonic_function_(		"MeshColor_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshColor_color1_get = _rpythonic_function_(		"MeshColor_color1_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

MeshColor_color2_get = _rpythonic_function_(		"MeshColor_color2_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

MeshColor_color3_get = _rpythonic_function_(		"MeshColor_color3_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

MeshColor_color4_get = _rpythonic_function_(		"MeshColor_color4_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

MeshColorLayer_rna_type_get = _rpythonic_function_(		"MeshColorLayer_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshColorLayer_name_get = _rpythonic_function_(		"MeshColorLayer_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

MeshColorLayer_name_length = _rpythonic_function_(		"MeshColorLayer_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshColorLayer_active_get = _rpythonic_function_(		"MeshColorLayer_active_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshColorLayer_active_render_get = _rpythonic_function_(		"MeshColorLayer_active_render_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshColorLayer_data_begin = _rpythonic_function_(		"MeshColorLayer_data_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshColorLayer_data_next = _rpythonic_function_(		"MeshColorLayer_data_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

MeshColorLayer_data_end = _rpythonic_function_(		"MeshColorLayer_data_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

MeshDeformModifier_is_bound_get = _rpythonic_function_(		"MeshDeformModifier_is_bound_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshDeformModifier_use_dynamic_bind_get = _rpythonic_function_(		"MeshDeformModifier_use_dynamic_bind_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshDeformModifier_invert_vertex_group_get = _rpythonic_function_(		"MeshDeformModifier_invert_vertex_group_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshDeformModifier_object_get = _rpythonic_function_(		"MeshDeformModifier_object_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshDeformModifier_precision_get = _rpythonic_function_(		"MeshDeformModifier_precision_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshDeformModifier_vertex_group_get = _rpythonic_function_(		"MeshDeformModifier_vertex_group_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

MeshDeformModifier_vertex_group_length = _rpythonic_function_(		"MeshDeformModifier_vertex_group_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshEdge_rna_type_get = _rpythonic_function_(		"MeshEdge_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshEdge_bevel_weight_get = _rpythonic_function_(		"MeshEdge_bevel_weight_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshEdge_crease_get = _rpythonic_function_(		"MeshEdge_crease_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshEdge_is_fgon_get = _rpythonic_function_(		"MeshEdge_is_fgon_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshEdge_hide_get = _rpythonic_function_(		"MeshEdge_hide_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshEdge_index_get = _rpythonic_function_(		"MeshEdge_index_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshEdge_is_loose_get = _rpythonic_function_(		"MeshEdge_is_loose_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshEdge_use_seam_get = _rpythonic_function_(		"MeshEdge_use_seam_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshEdge_select_get = _rpythonic_function_(		"MeshEdge_select_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshEdge_use_edge_sharp_get = _rpythonic_function_(		"MeshEdge_use_edge_sharp_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshEdge_vertices_get = _rpythonic_function_(		"MeshEdge_vertices_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_int * 2 )),] )

MeshEdges_rna_type_get = _rpythonic_function_(		"MeshEdges_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshFace_rna_type_get = _rpythonic_function_(		"MeshFace_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshFace_hide_get = _rpythonic_function_(		"MeshFace_hide_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshFace_index_get = _rpythonic_function_(		"MeshFace_index_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshFace_material_index_get = _rpythonic_function_(		"MeshFace_material_index_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshFace_select_get = _rpythonic_function_(		"MeshFace_select_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshFace_use_smooth_get = _rpythonic_function_(		"MeshFace_use_smooth_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshFace_vertices_get = _rpythonic_function_(		"MeshFace_vertices_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_int * 4 )),] )

MeshFace_vertices_raw_get = _rpythonic_function_(		"MeshFace_vertices_raw_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_int * 4 )),] )

MeshFace_area_get = _rpythonic_function_(		"MeshFace_area_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshFace_normal_get = _rpythonic_function_(		"MeshFace_normal_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

MeshFaces_rna_type_get = _rpythonic_function_(		"MeshFaces_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshFaces_active_get = _rpythonic_function_(		"MeshFaces_active_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshFaces_active_tface_get = _rpythonic_function_(		"MeshFaces_active_tface_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshFloatProperty_rna_type_get = _rpythonic_function_(		"MeshFloatProperty_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshFloatProperty_value_get = _rpythonic_function_(		"MeshFloatProperty_value_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshFloatPropertyLayer_rna_type_get = _rpythonic_function_(		"MeshFloatPropertyLayer_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshFloatPropertyLayer_name_get = _rpythonic_function_(		"MeshFloatPropertyLayer_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

MeshFloatPropertyLayer_name_length = _rpythonic_function_(		"MeshFloatPropertyLayer_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshFloatPropertyLayer_data_begin = _rpythonic_function_(		"MeshFloatPropertyLayer_data_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshFloatPropertyLayer_data_next = _rpythonic_function_(		"MeshFloatPropertyLayer_data_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

MeshFloatPropertyLayer_data_end = _rpythonic_function_(		"MeshFloatPropertyLayer_data_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

MeshIntProperty_rna_type_get = _rpythonic_function_(		"MeshIntProperty_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshIntProperty_value_get = _rpythonic_function_(		"MeshIntProperty_value_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshIntPropertyLayer_rna_type_get = _rpythonic_function_(		"MeshIntPropertyLayer_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshIntPropertyLayer_name_get = _rpythonic_function_(		"MeshIntPropertyLayer_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

MeshIntPropertyLayer_name_length = _rpythonic_function_(		"MeshIntPropertyLayer_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshIntPropertyLayer_data_begin = _rpythonic_function_(		"MeshIntPropertyLayer_data_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshIntPropertyLayer_data_next = _rpythonic_function_(		"MeshIntPropertyLayer_data_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

MeshIntPropertyLayer_data_end = _rpythonic_function_(		"MeshIntPropertyLayer_data_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

MeshSticky_rna_type_get = _rpythonic_function_(		"MeshSticky_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshSticky_co_get = _rpythonic_function_(		"MeshSticky_co_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 2 )),] )

MeshStringProperty_rna_type_get = _rpythonic_function_(		"MeshStringProperty_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshStringProperty_value_get = _rpythonic_function_(		"MeshStringProperty_value_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

MeshStringProperty_value_length = _rpythonic_function_(		"MeshStringProperty_value_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshStringPropertyLayer_rna_type_get = _rpythonic_function_(		"MeshStringPropertyLayer_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshStringPropertyLayer_name_get = _rpythonic_function_(		"MeshStringPropertyLayer_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

MeshStringPropertyLayer_name_length = _rpythonic_function_(		"MeshStringPropertyLayer_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshStringPropertyLayer_data_begin = _rpythonic_function_(		"MeshStringPropertyLayer_data_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshStringPropertyLayer_data_next = _rpythonic_function_(		"MeshStringPropertyLayer_data_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

MeshStringPropertyLayer_data_end = _rpythonic_function_(		"MeshStringPropertyLayer_data_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

MeshTextureFace_rna_type_get = _rpythonic_function_(		"MeshTextureFace_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshTextureFace_use_alpha_sort_get = _rpythonic_function_(		"MeshTextureFace_use_alpha_sort_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshTextureFace_use_billboard_get = _rpythonic_function_(		"MeshTextureFace_use_billboard_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshTextureFace_use_collision_get = _rpythonic_function_(		"MeshTextureFace_use_collision_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshTextureFace_use_halo_get = _rpythonic_function_(		"MeshTextureFace_use_halo_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshTextureFace_image_get = _rpythonic_function_(		"MeshTextureFace_image_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshTextureFace_hide_get = _rpythonic_function_(		"MeshTextureFace_hide_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshTextureFace_use_light_get = _rpythonic_function_(		"MeshTextureFace_use_light_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshTextureFace_use_object_color_get = _rpythonic_function_(		"MeshTextureFace_use_object_color_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshTextureFace_use_shadow_cast_get = _rpythonic_function_(		"MeshTextureFace_use_shadow_cast_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshTextureFace_use_blend_shared_get = _rpythonic_function_(		"MeshTextureFace_use_blend_shared_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshTextureFace_use_image_get = _rpythonic_function_(		"MeshTextureFace_use_image_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshTextureFace_use_bitmap_text_get = _rpythonic_function_(		"MeshTextureFace_use_bitmap_text_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshTextureFace_blend_type_get = _rpythonic_function_(		"MeshTextureFace_blend_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshTextureFace_use_twoside_get = _rpythonic_function_(		"MeshTextureFace_use_twoside_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshTextureFace_uv_get = _rpythonic_function_(		"MeshTextureFace_uv_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 8 )),] )

MeshTextureFace_uv_raw_get = _rpythonic_function_(		"MeshTextureFace_uv_raw_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 8 )),] )

MeshTextureFace_uv1_get = _rpythonic_function_(		"MeshTextureFace_uv1_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 2 )),] )

MeshTextureFace_uv2_get = _rpythonic_function_(		"MeshTextureFace_uv2_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 2 )),] )

MeshTextureFace_uv3_get = _rpythonic_function_(		"MeshTextureFace_uv3_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 2 )),] )

MeshTextureFace_uv4_get = _rpythonic_function_(		"MeshTextureFace_uv4_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 2 )),] )

MeshTextureFace_pin_uv_get = _rpythonic_function_(		"MeshTextureFace_pin_uv_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_int * 4 )),] )

MeshTextureFace_select_uv_get = _rpythonic_function_(		"MeshTextureFace_select_uv_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_int * 4 )),] )

MeshTextureFaceLayer_rna_type_get = _rpythonic_function_(		"MeshTextureFaceLayer_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshTextureFaceLayer_name_get = _rpythonic_function_(		"MeshTextureFaceLayer_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

MeshTextureFaceLayer_name_length = _rpythonic_function_(		"MeshTextureFaceLayer_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshTextureFaceLayer_active_get = _rpythonic_function_(		"MeshTextureFaceLayer_active_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshTextureFaceLayer_active_clone_get = _rpythonic_function_(		"MeshTextureFaceLayer_active_clone_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshTextureFaceLayer_active_render_get = _rpythonic_function_(		"MeshTextureFaceLayer_active_render_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshTextureFaceLayer_data_begin = _rpythonic_function_(		"MeshTextureFaceLayer_data_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshTextureFaceLayer_data_next = _rpythonic_function_(		"MeshTextureFaceLayer_data_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

MeshTextureFaceLayer_data_end = _rpythonic_function_(		"MeshTextureFaceLayer_data_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

MeshVertex_rna_type_get = _rpythonic_function_(		"MeshVertex_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshVertex_bevel_weight_get = _rpythonic_function_(		"MeshVertex_bevel_weight_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshVertex_groups_begin = _rpythonic_function_(		"MeshVertex_groups_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshVertex_groups_next = _rpythonic_function_(		"MeshVertex_groups_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

MeshVertex_groups_end = _rpythonic_function_(		"MeshVertex_groups_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

MeshVertex_hide_get = _rpythonic_function_(		"MeshVertex_hide_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshVertex_index_get = _rpythonic_function_(		"MeshVertex_index_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshVertex_co_get = _rpythonic_function_(		"MeshVertex_co_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

MeshVertex_normal_get = _rpythonic_function_(		"MeshVertex_normal_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

MeshVertex_select_get = _rpythonic_function_(		"MeshVertex_select_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MeshVertices_rna_type_get = _rpythonic_function_(		"MeshVertices_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MessageActuator_body_type_get = _rpythonic_function_(		"MessageActuator_body_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MessageActuator_body_message_get = _rpythonic_function_(		"MessageActuator_body_message_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

MessageActuator_body_message_length = _rpythonic_function_(		"MessageActuator_body_message_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MessageActuator_body_property_get = _rpythonic_function_(		"MessageActuator_body_property_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

MessageActuator_body_property_length = _rpythonic_function_(		"MessageActuator_body_property_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MessageActuator_subject_get = _rpythonic_function_(		"MessageActuator_subject_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

MessageActuator_subject_length = _rpythonic_function_(		"MessageActuator_subject_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MessageActuator_to_property_get = _rpythonic_function_(		"MessageActuator_to_property_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

MessageActuator_to_property_length = _rpythonic_function_(		"MessageActuator_to_property_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MessageSensor_subject_get = _rpythonic_function_(		"MessageSensor_subject_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

MessageSensor_subject_length = _rpythonic_function_(		"MessageSensor_subject_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MetaBall_animation_data_get = _rpythonic_function_(		"MetaBall_animation_data_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MetaBall_use_auto_texspace_get = _rpythonic_function_(		"MetaBall_use_auto_texspace_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MetaBall_elements_begin = _rpythonic_function_(		"MetaBall_elements_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MetaBall_elements_next = _rpythonic_function_(		"MetaBall_elements_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

MetaBall_elements_end = _rpythonic_function_(		"MetaBall_elements_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

MetaBall_materials_begin = _rpythonic_function_(		"MetaBall_materials_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MetaBall_materials_next = _rpythonic_function_(		"MetaBall_materials_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

MetaBall_materials_end = _rpythonic_function_(		"MetaBall_materials_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

MetaBall_render_resolution_get = _rpythonic_function_(		"MetaBall_render_resolution_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MetaBall_texspace_location_get = _rpythonic_function_(		"MetaBall_texspace_location_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

MetaBall_texspace_size_get = _rpythonic_function_(		"MetaBall_texspace_size_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

MetaBall_threshold_get = _rpythonic_function_(		"MetaBall_threshold_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MetaBall_update_method_get = _rpythonic_function_(		"MetaBall_update_method_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MetaBall_resolution_get = _rpythonic_function_(		"MetaBall_resolution_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MetaBallElements_rna_type_get = _rpythonic_function_(		"MetaBallElements_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MetaBallElements_active_get = _rpythonic_function_(		"MetaBallElements_active_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MetaElement_rna_type_get = _rpythonic_function_(		"MetaElement_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MetaElement_hide_get = _rpythonic_function_(		"MetaElement_hide_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MetaElement_co_get = _rpythonic_function_(		"MetaElement_co_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

MetaElement_use_negative_get = _rpythonic_function_(		"MetaElement_use_negative_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MetaElement_radius_get = _rpythonic_function_(		"MetaElement_radius_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MetaElement_rotation_get = _rpythonic_function_(		"MetaElement_rotation_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 4 )),] )

MetaElement_size_x_get = _rpythonic_function_(		"MetaElement_size_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MetaElement_size_y_get = _rpythonic_function_(		"MetaElement_size_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MetaElement_size_z_get = _rpythonic_function_(		"MetaElement_size_z_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MetaElement_stiffness_get = _rpythonic_function_(		"MetaElement_stiffness_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MetaElement_type_get = _rpythonic_function_(		"MetaElement_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MetaSequence_animation_offset_end_get = _rpythonic_function_(		"MetaSequence_animation_offset_end_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MetaSequence_animation_offset_start_get = _rpythonic_function_(		"MetaSequence_animation_offset_start_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MetaSequence_color_balance_get = _rpythonic_function_(		"MetaSequence_color_balance_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MetaSequence_use_float_get = _rpythonic_function_(		"MetaSequence_use_float_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MetaSequence_crop_get = _rpythonic_function_(		"MetaSequence_crop_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MetaSequence_use_deinterlace_get = _rpythonic_function_(		"MetaSequence_use_deinterlace_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MetaSequence_use_reverse_frames_get = _rpythonic_function_(		"MetaSequence_use_reverse_frames_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MetaSequence_use_flip_x_get = _rpythonic_function_(		"MetaSequence_use_flip_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MetaSequence_use_flip_y_get = _rpythonic_function_(		"MetaSequence_use_flip_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MetaSequence_color_multiply_get = _rpythonic_function_(		"MetaSequence_color_multiply_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MetaSequence_use_premultiply_get = _rpythonic_function_(		"MetaSequence_use_premultiply_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MetaSequence_proxy_get = _rpythonic_function_(		"MetaSequence_proxy_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MetaSequence_use_proxy_custom_directory_get = _rpythonic_function_(		"MetaSequence_use_proxy_custom_directory_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MetaSequence_use_proxy_custom_file_get = _rpythonic_function_(		"MetaSequence_use_proxy_custom_file_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MetaSequence_color_saturation_get = _rpythonic_function_(		"MetaSequence_color_saturation_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MetaSequence_sequences_begin = _rpythonic_function_(		"MetaSequence_sequences_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MetaSequence_sequences_next = _rpythonic_function_(		"MetaSequence_sequences_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

MetaSequence_sequences_end = _rpythonic_function_(		"MetaSequence_sequences_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

MetaSequence_strobe_get = _rpythonic_function_(		"MetaSequence_strobe_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MetaSequence_transform_get = _rpythonic_function_(		"MetaSequence_transform_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MetaSequence_use_color_balance_get = _rpythonic_function_(		"MetaSequence_use_color_balance_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MetaSequence_use_crop_get = _rpythonic_function_(		"MetaSequence_use_crop_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MetaSequence_use_proxy_get = _rpythonic_function_(		"MetaSequence_use_proxy_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MetaSequence_use_translation_get = _rpythonic_function_(		"MetaSequence_use_translation_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MirrorModifier_use_clip_get = _rpythonic_function_(		"MirrorModifier_use_clip_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MirrorModifier_merge_threshold_get = _rpythonic_function_(		"MirrorModifier_merge_threshold_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MirrorModifier_use_mirror_merge_get = _rpythonic_function_(		"MirrorModifier_use_mirror_merge_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MirrorModifier_mirror_object_get = _rpythonic_function_(		"MirrorModifier_mirror_object_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MirrorModifier_use_mirror_u_get = _rpythonic_function_(		"MirrorModifier_use_mirror_u_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MirrorModifier_use_mirror_v_get = _rpythonic_function_(		"MirrorModifier_use_mirror_v_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MirrorModifier_use_mirror_vertex_groups_get = _rpythonic_function_(		"MirrorModifier_use_mirror_vertex_groups_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MirrorModifier_use_x_get = _rpythonic_function_(		"MirrorModifier_use_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MirrorModifier_use_y_get = _rpythonic_function_(		"MirrorModifier_use_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MirrorModifier_use_z_get = _rpythonic_function_(		"MirrorModifier_use_z_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Modifier_rna_type_get = _rpythonic_function_(		"Modifier_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Modifier_name_get = _rpythonic_function_(		"Modifier_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

Modifier_name_length = _rpythonic_function_(		"Modifier_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Modifier_use_apply_on_spline_get = _rpythonic_function_(		"Modifier_use_apply_on_spline_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Modifier_show_in_editmode_get = _rpythonic_function_(		"Modifier_show_in_editmode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Modifier_show_expanded_get = _rpythonic_function_(		"Modifier_show_expanded_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Modifier_show_on_cage_get = _rpythonic_function_(		"Modifier_show_on_cage_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Modifier_show_viewport_get = _rpythonic_function_(		"Modifier_show_viewport_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Modifier_show_render_get = _rpythonic_function_(		"Modifier_show_render_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Modifier_type_get = _rpythonic_function_(		"Modifier_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MotionPath_rna_type_get = _rpythonic_function_(		"MotionPath_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MotionPath_is_modified_get = _rpythonic_function_(		"MotionPath_is_modified_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MotionPath_frame_end_get = _rpythonic_function_(		"MotionPath_frame_end_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MotionPath_length_get = _rpythonic_function_(		"MotionPath_length_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MotionPath_points_begin = _rpythonic_function_(		"MotionPath_points_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MotionPath_points_next = _rpythonic_function_(		"MotionPath_points_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

MotionPath_points_end = _rpythonic_function_(		"MotionPath_points_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

MotionPath_frame_start_get = _rpythonic_function_(		"MotionPath_frame_start_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MotionPath_use_bone_head_get = _rpythonic_function_(		"MotionPath_use_bone_head_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MotionPathVert_rna_type_get = _rpythonic_function_(		"MotionPathVert_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MotionPathVert_co_get = _rpythonic_function_(		"MotionPathVert_co_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

MotionPathVert_select_get = _rpythonic_function_(		"MotionPathVert_select_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MouseSensor_mouse_event_get = _rpythonic_function_(		"MouseSensor_mouse_event_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MovieSequence_animation_offset_end_get = _rpythonic_function_(		"MovieSequence_animation_offset_end_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MovieSequence_animation_offset_start_get = _rpythonic_function_(		"MovieSequence_animation_offset_start_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MovieSequence_color_balance_get = _rpythonic_function_(		"MovieSequence_color_balance_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MovieSequence_use_float_get = _rpythonic_function_(		"MovieSequence_use_float_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MovieSequence_crop_get = _rpythonic_function_(		"MovieSequence_crop_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MovieSequence_use_deinterlace_get = _rpythonic_function_(		"MovieSequence_use_deinterlace_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MovieSequence_elements_begin = _rpythonic_function_(		"MovieSequence_elements_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MovieSequence_elements_next = _rpythonic_function_(		"MovieSequence_elements_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

MovieSequence_elements_end = _rpythonic_function_(		"MovieSequence_elements_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

MovieSequence_filepath_get = _rpythonic_function_(		"MovieSequence_filepath_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

MovieSequence_filepath_length = _rpythonic_function_(		"MovieSequence_filepath_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MovieSequence_use_reverse_frames_get = _rpythonic_function_(		"MovieSequence_use_reverse_frames_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MovieSequence_use_flip_x_get = _rpythonic_function_(		"MovieSequence_use_flip_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MovieSequence_use_flip_y_get = _rpythonic_function_(		"MovieSequence_use_flip_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MovieSequence_mpeg_preseek_get = _rpythonic_function_(		"MovieSequence_mpeg_preseek_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MovieSequence_color_multiply_get = _rpythonic_function_(		"MovieSequence_color_multiply_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MovieSequence_use_premultiply_get = _rpythonic_function_(		"MovieSequence_use_premultiply_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MovieSequence_proxy_get = _rpythonic_function_(		"MovieSequence_proxy_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MovieSequence_use_proxy_custom_directory_get = _rpythonic_function_(		"MovieSequence_use_proxy_custom_directory_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MovieSequence_use_proxy_custom_file_get = _rpythonic_function_(		"MovieSequence_use_proxy_custom_file_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MovieSequence_color_saturation_get = _rpythonic_function_(		"MovieSequence_color_saturation_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MovieSequence_streamindex_get = _rpythonic_function_(		"MovieSequence_streamindex_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MovieSequence_strobe_get = _rpythonic_function_(		"MovieSequence_strobe_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MovieSequence_transform_get = _rpythonic_function_(		"MovieSequence_transform_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MovieSequence_use_color_balance_get = _rpythonic_function_(		"MovieSequence_use_color_balance_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MovieSequence_use_crop_get = _rpythonic_function_(		"MovieSequence_use_crop_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MovieSequence_use_proxy_get = _rpythonic_function_(		"MovieSequence_use_proxy_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MovieSequence_use_translation_get = _rpythonic_function_(		"MovieSequence_use_translation_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MulticamSequence_animation_offset_end_get = _rpythonic_function_(		"MulticamSequence_animation_offset_end_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MulticamSequence_animation_offset_start_get = _rpythonic_function_(		"MulticamSequence_animation_offset_start_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MulticamSequence_color_balance_get = _rpythonic_function_(		"MulticamSequence_color_balance_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MulticamSequence_use_float_get = _rpythonic_function_(		"MulticamSequence_use_float_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MulticamSequence_crop_get = _rpythonic_function_(		"MulticamSequence_crop_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MulticamSequence_use_deinterlace_get = _rpythonic_function_(		"MulticamSequence_use_deinterlace_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MulticamSequence_use_reverse_frames_get = _rpythonic_function_(		"MulticamSequence_use_reverse_frames_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MulticamSequence_use_flip_x_get = _rpythonic_function_(		"MulticamSequence_use_flip_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MulticamSequence_use_flip_y_get = _rpythonic_function_(		"MulticamSequence_use_flip_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MulticamSequence_multicam_source_get = _rpythonic_function_(		"MulticamSequence_multicam_source_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MulticamSequence_color_multiply_get = _rpythonic_function_(		"MulticamSequence_color_multiply_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MulticamSequence_use_premultiply_get = _rpythonic_function_(		"MulticamSequence_use_premultiply_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MulticamSequence_proxy_get = _rpythonic_function_(		"MulticamSequence_proxy_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MulticamSequence_use_proxy_custom_directory_get = _rpythonic_function_(		"MulticamSequence_use_proxy_custom_directory_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MulticamSequence_use_proxy_custom_file_get = _rpythonic_function_(		"MulticamSequence_use_proxy_custom_file_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MulticamSequence_color_saturation_get = _rpythonic_function_(		"MulticamSequence_color_saturation_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MulticamSequence_strobe_get = _rpythonic_function_(		"MulticamSequence_strobe_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MulticamSequence_transform_get = _rpythonic_function_(		"MulticamSequence_transform_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MulticamSequence_use_color_balance_get = _rpythonic_function_(		"MulticamSequence_use_color_balance_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MulticamSequence_use_crop_get = _rpythonic_function_(		"MulticamSequence_use_crop_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MulticamSequence_use_proxy_get = _rpythonic_function_(		"MulticamSequence_use_proxy_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MulticamSequence_use_translation_get = _rpythonic_function_(		"MulticamSequence_use_translation_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MultiresModifier_is_external_get = _rpythonic_function_(		"MultiresModifier_is_external_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MultiresModifier_filepath_get = _rpythonic_function_(		"MultiresModifier_filepath_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

MultiresModifier_filepath_length = _rpythonic_function_(		"MultiresModifier_filepath_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MultiresModifier_levels_get = _rpythonic_function_(		"MultiresModifier_levels_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MultiresModifier_show_only_control_edges_get = _rpythonic_function_(		"MultiresModifier_show_only_control_edges_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MultiresModifier_render_levels_get = _rpythonic_function_(		"MultiresModifier_render_levels_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MultiresModifier_sculpt_levels_get = _rpythonic_function_(		"MultiresModifier_sculpt_levels_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MultiresModifier_use_subsurf_uv_get = _rpythonic_function_(		"MultiresModifier_use_subsurf_uv_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MultiresModifier_subdivision_type_get = _rpythonic_function_(		"MultiresModifier_subdivision_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MultiresModifier_total_levels_get = _rpythonic_function_(		"MultiresModifier_total_levels_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MusgraveTexture_gain_get = _rpythonic_function_(		"MusgraveTexture_gain_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MusgraveTexture_dimension_max_get = _rpythonic_function_(		"MusgraveTexture_dimension_max_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MusgraveTexture_lacunarity_get = _rpythonic_function_(		"MusgraveTexture_lacunarity_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MusgraveTexture_nabla_get = _rpythonic_function_(		"MusgraveTexture_nabla_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MusgraveTexture_noise_basis_get = _rpythonic_function_(		"MusgraveTexture_noise_basis_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MusgraveTexture_noise_intensity_get = _rpythonic_function_(		"MusgraveTexture_noise_intensity_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MusgraveTexture_noise_scale_get = _rpythonic_function_(		"MusgraveTexture_noise_scale_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MusgraveTexture_octaves_get = _rpythonic_function_(		"MusgraveTexture_octaves_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MusgraveTexture_offset_get = _rpythonic_function_(		"MusgraveTexture_offset_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

MusgraveTexture_musgrave_type_get = _rpythonic_function_(		"MusgraveTexture_musgrave_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NearSensor_distance_get = _rpythonic_function_(		"NearSensor_distance_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NearSensor_property_get = _rpythonic_function_(		"NearSensor_property_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

NearSensor_property_length = _rpythonic_function_(		"NearSensor_property_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NearSensor_reset_distance_get = _rpythonic_function_(		"NearSensor_reset_distance_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NlaStrip_rna_type_get = _rpythonic_function_(		"NlaStrip_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NlaStrip_name_get = _rpythonic_function_(		"NlaStrip_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

NlaStrip_name_length = _rpythonic_function_(		"NlaStrip_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NlaStrip_action_get = _rpythonic_function_(		"NlaStrip_action_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NlaStrip_action_frame_end_get = _rpythonic_function_(		"NlaStrip_action_frame_end_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NlaStrip_action_frame_start_get = _rpythonic_function_(		"NlaStrip_action_frame_start_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NlaStrip_active_get = _rpythonic_function_(		"NlaStrip_active_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NlaStrip_use_animated_influence_get = _rpythonic_function_(		"NlaStrip_use_animated_influence_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NlaStrip_use_animated_time_get = _rpythonic_function_(		"NlaStrip_use_animated_time_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NlaStrip_use_auto_blend_get = _rpythonic_function_(		"NlaStrip_use_auto_blend_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NlaStrip_blend_in_get = _rpythonic_function_(		"NlaStrip_blend_in_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NlaStrip_blend_out_get = _rpythonic_function_(		"NlaStrip_blend_out_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NlaStrip_blend_type_get = _rpythonic_function_(		"NlaStrip_blend_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NlaStrip_use_animated_time_cyclic_get = _rpythonic_function_(		"NlaStrip_use_animated_time_cyclic_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NlaStrip_frame_end_get = _rpythonic_function_(		"NlaStrip_frame_end_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NlaStrip_extrapolation_get = _rpythonic_function_(		"NlaStrip_extrapolation_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NlaStrip_fcurves_begin = _rpythonic_function_(		"NlaStrip_fcurves_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NlaStrip_fcurves_next = _rpythonic_function_(		"NlaStrip_fcurves_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

NlaStrip_fcurves_end = _rpythonic_function_(		"NlaStrip_fcurves_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

NlaStrip_influence_get = _rpythonic_function_(		"NlaStrip_influence_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NlaStrip_modifiers_begin = _rpythonic_function_(		"NlaStrip_modifiers_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NlaStrip_modifiers_next = _rpythonic_function_(		"NlaStrip_modifiers_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

NlaStrip_modifiers_end = _rpythonic_function_(		"NlaStrip_modifiers_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

NlaStrip_mute_get = _rpythonic_function_(		"NlaStrip_mute_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NlaStrip_strips_begin = _rpythonic_function_(		"NlaStrip_strips_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NlaStrip_strips_next = _rpythonic_function_(		"NlaStrip_strips_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

NlaStrip_strips_end = _rpythonic_function_(		"NlaStrip_strips_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

NlaStrip_repeat_get = _rpythonic_function_(		"NlaStrip_repeat_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NlaStrip_use_reverse_get = _rpythonic_function_(		"NlaStrip_use_reverse_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NlaStrip_scale_get = _rpythonic_function_(		"NlaStrip_scale_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NlaStrip_select_get = _rpythonic_function_(		"NlaStrip_select_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NlaStrip_frame_start_get = _rpythonic_function_(		"NlaStrip_frame_start_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NlaStrip_strip_time_get = _rpythonic_function_(		"NlaStrip_strip_time_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NlaStrip_type_get = _rpythonic_function_(		"NlaStrip_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NlaStrips_rna_type_get = _rpythonic_function_(		"NlaStrips_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NlaTrack_rna_type_get = _rpythonic_function_(		"NlaTrack_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NlaTrack_name_get = _rpythonic_function_(		"NlaTrack_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

NlaTrack_name_length = _rpythonic_function_(		"NlaTrack_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NlaTrack_active_get = _rpythonic_function_(		"NlaTrack_active_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NlaTrack_lock_get = _rpythonic_function_(		"NlaTrack_lock_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NlaTrack_mute_get = _rpythonic_function_(		"NlaTrack_mute_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NlaTrack_strips_begin = _rpythonic_function_(		"NlaTrack_strips_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NlaTrack_strips_next = _rpythonic_function_(		"NlaTrack_strips_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

NlaTrack_strips_end = _rpythonic_function_(		"NlaTrack_strips_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

NlaTrack_select_get = _rpythonic_function_(		"NlaTrack_select_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NlaTrack_is_solo_get = _rpythonic_function_(		"NlaTrack_is_solo_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NlaTracks_rna_type_get = _rpythonic_function_(		"NlaTracks_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NlaTracks_active_get = _rpythonic_function_(		"NlaTracks_active_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Node_rna_type_get = _rpythonic_function_(		"Node_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Node_name_get = _rpythonic_function_(		"Node_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

Node_name_length = _rpythonic_function_(		"Node_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Node_inputs_begin = _rpythonic_function_(		"Node_inputs_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Node_inputs_next = _rpythonic_function_(		"Node_inputs_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Node_inputs_end = _rpythonic_function_(		"Node_inputs_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Node_label_get = _rpythonic_function_(		"Node_label_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

Node_label_length = _rpythonic_function_(		"Node_label_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Node_location_get = _rpythonic_function_(		"Node_location_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 2 )),] )

Node_outputs_begin = _rpythonic_function_(		"Node_outputs_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Node_outputs_next = _rpythonic_function_(		"Node_outputs_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Node_outputs_end = _rpythonic_function_(		"Node_outputs_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

NodeGroup_node_tree_get = _rpythonic_function_(		"NodeGroup_node_tree_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NodeLink_rna_type_get = _rpythonic_function_(		"NodeLink_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NodeLink_from_node_get = _rpythonic_function_(		"NodeLink_from_node_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NodeLink_from_socket_get = _rpythonic_function_(		"NodeLink_from_socket_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NodeLink_to_node_get = _rpythonic_function_(		"NodeLink_to_node_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NodeLink_to_socket_get = _rpythonic_function_(		"NodeLink_to_socket_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NodeLinks_rna_type_get = _rpythonic_function_(		"NodeLinks_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NodeSocket_rna_type_get = _rpythonic_function_(		"NodeSocket_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NodeSocket_name_get = _rpythonic_function_(		"NodeSocket_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

NodeSocket_name_length = _rpythonic_function_(		"NodeSocket_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NodeSocket_type_get = _rpythonic_function_(		"NodeSocket_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NodeTree_animation_data_get = _rpythonic_function_(		"NodeTree_animation_data_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NodeTree_grease_pencil_get = _rpythonic_function_(		"NodeTree_grease_pencil_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NodeTree_inputs_begin = _rpythonic_function_(		"NodeTree_inputs_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NodeTree_inputs_next = _rpythonic_function_(		"NodeTree_inputs_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

NodeTree_inputs_end = _rpythonic_function_(		"NodeTree_inputs_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

NodeTree_links_begin = _rpythonic_function_(		"NodeTree_links_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NodeTree_links_next = _rpythonic_function_(		"NodeTree_links_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

NodeTree_links_end = _rpythonic_function_(		"NodeTree_links_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

NodeTree_outputs_begin = _rpythonic_function_(		"NodeTree_outputs_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

NodeTree_outputs_next = _rpythonic_function_(		"NodeTree_outputs_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

NodeTree_outputs_end = _rpythonic_function_(		"NodeTree_outputs_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

NodeTree_type_get = _rpythonic_function_(		"NodeTree_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_active_material_get = _rpythonic_function_(		"Object_active_material_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_active_material_index_get = _rpythonic_function_(		"Object_active_material_index_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_active_shape_key_get = _rpythonic_function_(		"Object_active_shape_key_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_active_shape_key_index_get = _rpythonic_function_(		"Object_active_shape_key_index_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_animation_data_get = _rpythonic_function_(		"Object_animation_data_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_animation_visualisation_get = _rpythonic_function_(		"Object_animation_visualisation_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_rotation_axis_angle_get = _rpythonic_function_(		"Object_rotation_axis_angle_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 4 )),] )

Object_bound_box_get = _rpythonic_function_(		"Object_bound_box_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 24 )),] )

Object_collision_get = _rpythonic_function_(		"Object_collision_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_color_get = _rpythonic_function_(		"Object_color_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 4 )),] )

Object_constraints_begin = _rpythonic_function_(		"Object_constraints_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_constraints_next = _rpythonic_function_(		"Object_constraints_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Object_constraints_end = _rpythonic_function_(		"Object_constraints_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Object_data_get = _rpythonic_function_(		"Object_data_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_delta_location_get = _rpythonic_function_(		"Object_delta_location_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

Object_delta_rotation_euler_get = _rpythonic_function_(		"Object_delta_rotation_euler_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

Object_delta_rotation_quaternion_get = _rpythonic_function_(		"Object_delta_rotation_quaternion_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 4 )),] )

Object_delta_scale_get = _rpythonic_function_(		"Object_delta_scale_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

Object_dimensions_get = _rpythonic_function_(		"Object_dimensions_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

Object_show_axis_get = _rpythonic_function_(		"Object_show_axis_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_show_bounds_get = _rpythonic_function_(		"Object_show_bounds_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_draw_bounds_type_get = _rpythonic_function_(		"Object_draw_bounds_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_show_name_get = _rpythonic_function_(		"Object_show_name_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_show_texture_space_get = _rpythonic_function_(		"Object_show_texture_space_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_show_transparent_get = _rpythonic_function_(		"Object_show_transparent_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_show_wire_get = _rpythonic_function_(		"Object_show_wire_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_use_dupli_faces_scale_get = _rpythonic_function_(		"Object_use_dupli_faces_scale_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_dupli_faces_scale_get = _rpythonic_function_(		"Object_dupli_faces_scale_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_dupli_frames_end_get = _rpythonic_function_(		"Object_dupli_frames_end_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_dupli_frames_off_get = _rpythonic_function_(		"Object_dupli_frames_off_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_dupli_frames_on_get = _rpythonic_function_(		"Object_dupli_frames_on_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_use_dupli_frames_speed_get = _rpythonic_function_(		"Object_use_dupli_frames_speed_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_dupli_frames_start_get = _rpythonic_function_(		"Object_dupli_frames_start_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_dupli_group_get = _rpythonic_function_(		"Object_dupli_group_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_dupli_type_get = _rpythonic_function_(		"Object_dupli_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_use_dupli_vertices_rotation_get = _rpythonic_function_(		"Object_use_dupli_vertices_rotation_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_dupli_list_begin = _rpythonic_function_(		"Object_dupli_list_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_dupli_list_next = _rpythonic_function_(		"Object_dupli_list_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Object_dupli_list_end = _rpythonic_function_(		"Object_dupli_list_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Object_empty_draw_size_get = _rpythonic_function_(		"Object_empty_draw_size_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_empty_draw_type_get = _rpythonic_function_(		"Object_empty_draw_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_rotation_euler_get = _rpythonic_function_(		"Object_rotation_euler_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

Object_field_get = _rpythonic_function_(		"Object_field_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_game_get = _rpythonic_function_(		"Object_game_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_grease_pencil_get = _rpythonic_function_(		"Object_grease_pencil_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_matrix_basis_get = _rpythonic_function_(		"Object_matrix_basis_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 16 )),] )

Object_layers_get = _rpythonic_function_(		"Object_layers_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_int * 20 )),] )

Object_matrix_local_get = _rpythonic_function_(		"Object_matrix_local_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 16 )),] )

Object_location_get = _rpythonic_function_(		"Object_location_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

Object_lock_location_get = _rpythonic_function_(		"Object_lock_location_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_int * 3 )),] )

Object_lock_rotation_get = _rpythonic_function_(		"Object_lock_rotation_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_int * 3 )),] )

Object_lock_rotation_w_get = _rpythonic_function_(		"Object_lock_rotation_w_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_lock_rotations_4d_get = _rpythonic_function_(		"Object_lock_rotations_4d_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_lock_scale_get = _rpythonic_function_(		"Object_lock_scale_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_int * 3 )),] )

Object_material_slots_begin = _rpythonic_function_(		"Object_material_slots_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_material_slots_next = _rpythonic_function_(		"Object_material_slots_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Object_material_slots_end = _rpythonic_function_(		"Object_material_slots_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Object_matrix_parent_inverse_get = _rpythonic_function_(		"Object_matrix_parent_inverse_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 16 )),] )

Object_matrix_world_get = _rpythonic_function_(		"Object_matrix_world_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 16 )),] )

Object_draw_type_get = _rpythonic_function_(		"Object_draw_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_mode_get = _rpythonic_function_(		"Object_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_modifiers_begin = _rpythonic_function_(		"Object_modifiers_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_modifiers_next = _rpythonic_function_(		"Object_modifiers_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Object_modifiers_end = _rpythonic_function_(		"Object_modifiers_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Object_motion_path_get = _rpythonic_function_(		"Object_motion_path_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_empty_image_offset_get = _rpythonic_function_(		"Object_empty_image_offset_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 2 )),] )

Object_parent_get = _rpythonic_function_(		"Object_parent_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_parent_bone_get = _rpythonic_function_(		"Object_parent_bone_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

Object_parent_bone_length = _rpythonic_function_(		"Object_parent_bone_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_parent_type_get = _rpythonic_function_(		"Object_parent_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_parent_vertices_get = _rpythonic_function_(		"Object_parent_vertices_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_int * 3 )),] )

Object_particle_systems_begin = _rpythonic_function_(		"Object_particle_systems_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_particle_systems_next = _rpythonic_function_(		"Object_particle_systems_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Object_particle_systems_end = _rpythonic_function_(		"Object_particle_systems_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Object_pass_index_get = _rpythonic_function_(		"Object_pass_index_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_pose_get = _rpythonic_function_(		"Object_pose_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_pose_library_get = _rpythonic_function_(		"Object_pose_library_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_proxy_get = _rpythonic_function_(		"Object_proxy_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_proxy_group_get = _rpythonic_function_(		"Object_proxy_group_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_rotation_quaternion_get = _rpythonic_function_(		"Object_rotation_quaternion_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 4 )),] )

Object_hide_render_get = _rpythonic_function_(		"Object_hide_render_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_hide_select_get = _rpythonic_function_(		"Object_hide_select_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_hide_get = _rpythonic_function_(		"Object_hide_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_rotation_mode_get = _rpythonic_function_(		"Object_rotation_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_scale_get = _rpythonic_function_(		"Object_scale_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

Object_select_get = _rpythonic_function_(		"Object_select_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_use_shape_key_edit_mode_get = _rpythonic_function_(		"Object_use_shape_key_edit_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_show_only_shape_key_get = _rpythonic_function_(		"Object_show_only_shape_key_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_use_slow_parent_get = _rpythonic_function_(		"Object_use_slow_parent_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_soft_body_get = _rpythonic_function_(		"Object_soft_body_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_time_offset_get = _rpythonic_function_(		"Object_time_offset_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_use_time_offset_add_parent_get = _rpythonic_function_(		"Object_use_time_offset_add_parent_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_use_time_offset_edit_get = _rpythonic_function_(		"Object_use_time_offset_edit_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_use_time_offset_parent_get = _rpythonic_function_(		"Object_use_time_offset_parent_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_use_time_offset_particle_get = _rpythonic_function_(		"Object_use_time_offset_particle_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_track_axis_get = _rpythonic_function_(		"Object_track_axis_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_type_get = _rpythonic_function_(		"Object_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_up_axis_get = _rpythonic_function_(		"Object_up_axis_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_vertex_groups_begin = _rpythonic_function_(		"Object_vertex_groups_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_vertex_groups_next = _rpythonic_function_(		"Object_vertex_groups_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Object_vertex_groups_end = _rpythonic_function_(		"Object_vertex_groups_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Object_show_x_ray_get = _rpythonic_function_(		"Object_show_x_ray_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Object_is_duplicator_get = _rpythonic_function_(		"Object_is_duplicator_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ObjectActuator_use_add_linear_velocity_get = _rpythonic_function_(		"ObjectActuator_use_add_linear_velocity_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ObjectActuator_angular_velocity_get = _rpythonic_function_(		"ObjectActuator_angular_velocity_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ObjectActuator_damping_get = _rpythonic_function_(		"ObjectActuator_damping_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ObjectActuator_derivate_coefficient_get = _rpythonic_function_(		"ObjectActuator_derivate_coefficient_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ObjectActuator_force_get = _rpythonic_function_(		"ObjectActuator_force_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ObjectActuator_integral_coefficient_get = _rpythonic_function_(		"ObjectActuator_integral_coefficient_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ObjectActuator_use_local_location_get = _rpythonic_function_(		"ObjectActuator_use_local_location_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ObjectActuator_use_local_rotation_get = _rpythonic_function_(		"ObjectActuator_use_local_rotation_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ObjectActuator_use_local_force_get = _rpythonic_function_(		"ObjectActuator_use_local_force_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ObjectActuator_use_local_torque_get = _rpythonic_function_(		"ObjectActuator_use_local_torque_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ObjectActuator_use_local_linear_velocity_get = _rpythonic_function_(		"ObjectActuator_use_local_linear_velocity_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ObjectActuator_use_local_angular_velocity_get = _rpythonic_function_(		"ObjectActuator_use_local_angular_velocity_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ObjectActuator_linear_velocity_get = _rpythonic_function_(		"ObjectActuator_linear_velocity_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ObjectActuator_offset_location_get = _rpythonic_function_(		"ObjectActuator_offset_location_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ObjectActuator_force_max_x_get = _rpythonic_function_(		"ObjectActuator_force_max_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ObjectActuator_force_max_y_get = _rpythonic_function_(		"ObjectActuator_force_max_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ObjectActuator_force_max_z_get = _rpythonic_function_(		"ObjectActuator_force_max_z_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ObjectActuator_force_min_x_get = _rpythonic_function_(		"ObjectActuator_force_min_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ObjectActuator_force_min_y_get = _rpythonic_function_(		"ObjectActuator_force_min_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ObjectActuator_force_min_z_get = _rpythonic_function_(		"ObjectActuator_force_min_z_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ObjectActuator_mode_get = _rpythonic_function_(		"ObjectActuator_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ObjectActuator_proportional_coefficient_get = _rpythonic_function_(		"ObjectActuator_proportional_coefficient_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ObjectActuator_reference_object_get = _rpythonic_function_(		"ObjectActuator_reference_object_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ObjectActuator_offset_rotation_get = _rpythonic_function_(		"ObjectActuator_offset_rotation_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ObjectActuator_torque_get = _rpythonic_function_(		"ObjectActuator_torque_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ObjectActuator_use_servo_limit_x_get = _rpythonic_function_(		"ObjectActuator_use_servo_limit_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ObjectActuator_use_servo_limit_y_get = _rpythonic_function_(		"ObjectActuator_use_servo_limit_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ObjectActuator_use_servo_limit_z_get = _rpythonic_function_(		"ObjectActuator_use_servo_limit_z_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ObjectBase_rna_type_get = _rpythonic_function_(		"ObjectBase_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ObjectBase_layers_get = _rpythonic_function_(		"ObjectBase_layers_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_int * 20 )),] )

ObjectBase_object_get = _rpythonic_function_(		"ObjectBase_object_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ObjectBase_select_get = _rpythonic_function_(		"ObjectBase_select_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ObjectConstraints_rna_type_get = _rpythonic_function_(		"ObjectConstraints_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ObjectConstraints_active_get = _rpythonic_function_(		"ObjectConstraints_active_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ObjectModifiers_rna_type_get = _rpythonic_function_(		"ObjectModifiers_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ObstacleFluidSettings_use_get = _rpythonic_function_(		"ObstacleFluidSettings_use_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ObstacleFluidSettings_use_animated_mesh_get = _rpythonic_function_(		"ObstacleFluidSettings_use_animated_mesh_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ObstacleFluidSettings_impact_factor_get = _rpythonic_function_(		"ObstacleFluidSettings_impact_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ObstacleFluidSettings_partial_slip_factor_get = _rpythonic_function_(		"ObstacleFluidSettings_partial_slip_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ObstacleFluidSettings_slip_type_get = _rpythonic_function_(		"ObstacleFluidSettings_slip_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ObstacleFluidSettings_volume_initialization_get = _rpythonic_function_(		"ObstacleFluidSettings_volume_initialization_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Operator_rna_type_get = _rpythonic_function_(		"Operator_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Operator_name_get = _rpythonic_function_(		"Operator_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

Operator_name_length = _rpythonic_function_(		"Operator_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Operator_has_reports_get = _rpythonic_function_(		"Operator_has_reports_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Operator_bl_options_get = _rpythonic_function_(		"Operator_bl_options_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Operator_properties_get = _rpythonic_function_(		"Operator_properties_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Operator_bl_description_get = _rpythonic_function_(		"Operator_bl_description_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

Operator_bl_description_length = _rpythonic_function_(		"Operator_bl_description_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Operator_bl_idname_get = _rpythonic_function_(		"Operator_bl_idname_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

Operator_bl_idname_length = _rpythonic_function_(		"Operator_bl_idname_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Operator_bl_label_get = _rpythonic_function_(		"Operator_bl_label_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

Operator_bl_label_length = _rpythonic_function_(		"Operator_bl_label_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Operator_layout_get = _rpythonic_function_(		"Operator_layout_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

OperatorProperties_rna_type_get = _rpythonic_function_(		"OperatorProperties_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

OperatorTypeMacro_rna_type_get = _rpythonic_function_(		"OperatorTypeMacro_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

OperatorTypeMacro_properties_get = _rpythonic_function_(		"OperatorTypeMacro_properties_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

OutflowFluidSettings_use_get = _rpythonic_function_(		"OutflowFluidSettings_use_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

OutflowFluidSettings_use_animated_mesh_get = _rpythonic_function_(		"OutflowFluidSettings_use_animated_mesh_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

OutflowFluidSettings_volume_initialization_get = _rpythonic_function_(		"OutflowFluidSettings_volume_initialization_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PackedFile_rna_type_get = _rpythonic_function_(		"PackedFile_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PackedFile_size_get = _rpythonic_function_(		"PackedFile_size_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Paint_rna_type_get = _rpythonic_function_(		"Paint_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Paint_brush_get = _rpythonic_function_(		"Paint_brush_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Paint_show_low_resolution_get = _rpythonic_function_(		"Paint_show_low_resolution_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Paint_show_brush_get = _rpythonic_function_(		"Paint_show_brush_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Paint_show_brush_on_surface_get = _rpythonic_function_(		"Paint_show_brush_on_surface_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Panel_rna_type_get = _rpythonic_function_(		"Panel_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Panel_bl_context_get = _rpythonic_function_(		"Panel_bl_context_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

Panel_bl_context_length = _rpythonic_function_(		"Panel_bl_context_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Panel_bl_idname_get = _rpythonic_function_(		"Panel_bl_idname_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

Panel_bl_idname_length = _rpythonic_function_(		"Panel_bl_idname_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Panel_bl_label_get = _rpythonic_function_(		"Panel_bl_label_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

Panel_bl_label_length = _rpythonic_function_(		"Panel_bl_label_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Panel_layout_get = _rpythonic_function_(		"Panel_layout_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Panel_bl_options_get = _rpythonic_function_(		"Panel_bl_options_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Panel_bl_region_type_get = _rpythonic_function_(		"Panel_bl_region_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Panel_bl_space_type_get = _rpythonic_function_(		"Panel_bl_space_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Panel_text_get = _rpythonic_function_(		"Panel_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

Panel_text_length = _rpythonic_function_(		"Panel_text_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParentActuator_use_compound_get = _rpythonic_function_(		"ParentActuator_use_compound_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParentActuator_use_ghost_get = _rpythonic_function_(		"ParentActuator_use_ghost_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParentActuator_object_get = _rpythonic_function_(		"ParentActuator_object_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParentActuator_mode_get = _rpythonic_function_(		"ParentActuator_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Particle_rna_type_get = _rpythonic_function_(		"Particle_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Particle_alive_state_get = _rpythonic_function_(		"Particle_alive_state_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Particle_angular_velocity_get = _rpythonic_function_(		"Particle_angular_velocity_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

Particle_birth_time_get = _rpythonic_function_(		"Particle_birth_time_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Particle_die_time_get = _rpythonic_function_(		"Particle_die_time_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Particle_is_exist_get = _rpythonic_function_(		"Particle_is_exist_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Particle_hair_keys_begin = _rpythonic_function_(		"Particle_hair_keys_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Particle_hair_keys_next = _rpythonic_function_(		"Particle_hair_keys_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Particle_hair_keys_end = _rpythonic_function_(		"Particle_hair_keys_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Particle_particle_keys_begin = _rpythonic_function_(		"Particle_particle_keys_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Particle_particle_keys_next = _rpythonic_function_(		"Particle_particle_keys_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Particle_particle_keys_end = _rpythonic_function_(		"Particle_particle_keys_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Particle_lifetime_get = _rpythonic_function_(		"Particle_lifetime_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Particle_location_get = _rpythonic_function_(		"Particle_location_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

Particle_velocity_get = _rpythonic_function_(		"Particle_velocity_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

Particle_prev_angular_velocity_get = _rpythonic_function_(		"Particle_prev_angular_velocity_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

Particle_prev_location_get = _rpythonic_function_(		"Particle_prev_location_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

Particle_prev_velocity_get = _rpythonic_function_(		"Particle_prev_velocity_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

Particle_prev_rotation_get = _rpythonic_function_(		"Particle_prev_rotation_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 4 )),] )

Particle_rotation_get = _rpythonic_function_(		"Particle_rotation_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 4 )),] )

Particle_size_get = _rpythonic_function_(		"Particle_size_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Particle_is_visible_get = _rpythonic_function_(		"Particle_is_visible_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleBrush_rna_type_get = _rpythonic_function_(		"ParticleBrush_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleBrush_count_get = _rpythonic_function_(		"ParticleBrush_count_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleBrush_curve_get = _rpythonic_function_(		"ParticleBrush_curve_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleBrush_length_mode_get = _rpythonic_function_(		"ParticleBrush_length_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleBrush_puff_mode_get = _rpythonic_function_(		"ParticleBrush_puff_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleBrush_use_puff_volume_get = _rpythonic_function_(		"ParticleBrush_use_puff_volume_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleBrush_size_get = _rpythonic_function_(		"ParticleBrush_size_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleBrush_steps_get = _rpythonic_function_(		"ParticleBrush_steps_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleBrush_strength_get = _rpythonic_function_(		"ParticleBrush_strength_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleDupliWeight_rna_type_get = _rpythonic_function_(		"ParticleDupliWeight_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleDupliWeight_name_get = _rpythonic_function_(		"ParticleDupliWeight_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ParticleDupliWeight_name_length = _rpythonic_function_(		"ParticleDupliWeight_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleDupliWeight_count_get = _rpythonic_function_(		"ParticleDupliWeight_count_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleEdit_rna_type_get = _rpythonic_function_(		"ParticleEdit_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleEdit_use_auto_velocity_get = _rpythonic_function_(		"ParticleEdit_use_auto_velocity_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleEdit_brush_get = _rpythonic_function_(		"ParticleEdit_brush_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleEdit_use_emitter_deflect_get = _rpythonic_function_(		"ParticleEdit_use_emitter_deflect_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleEdit_show_particles_get = _rpythonic_function_(		"ParticleEdit_show_particles_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleEdit_is_editable_get = _rpythonic_function_(		"ParticleEdit_is_editable_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleEdit_emitter_distance_get = _rpythonic_function_(		"ParticleEdit_emitter_distance_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleEdit_use_fade_time_get = _rpythonic_function_(		"ParticleEdit_use_fade_time_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleEdit_fade_frames_get = _rpythonic_function_(		"ParticleEdit_fade_frames_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleEdit_is_hair_get = _rpythonic_function_(		"ParticleEdit_is_hair_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleEdit_use_default_interpolate_get = _rpythonic_function_(		"ParticleEdit_use_default_interpolate_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleEdit_use_preserve_length_get = _rpythonic_function_(		"ParticleEdit_use_preserve_length_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleEdit_use_preserve_root_get = _rpythonic_function_(		"ParticleEdit_use_preserve_root_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleEdit_default_key_count_get = _rpythonic_function_(		"ParticleEdit_default_key_count_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleEdit_object_get = _rpythonic_function_(		"ParticleEdit_object_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleEdit_select_mode_get = _rpythonic_function_(		"ParticleEdit_select_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleEdit_draw_step_get = _rpythonic_function_(		"ParticleEdit_draw_step_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleEdit_tool_get = _rpythonic_function_(		"ParticleEdit_tool_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleEdit_type_get = _rpythonic_function_(		"ParticleEdit_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleFluidSettings_alpha_influence_get = _rpythonic_function_(		"ParticleFluidSettings_alpha_influence_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleFluidSettings_use_drops_get = _rpythonic_function_(		"ParticleFluidSettings_use_drops_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleFluidSettings_use_floats_get = _rpythonic_function_(		"ParticleFluidSettings_use_floats_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleFluidSettings_particle_influence_get = _rpythonic_function_(		"ParticleFluidSettings_particle_influence_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleFluidSettings_filepath_get = _rpythonic_function_(		"ParticleFluidSettings_filepath_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ParticleFluidSettings_filepath_length = _rpythonic_function_(		"ParticleFluidSettings_filepath_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleFluidSettings_show_tracer_get = _rpythonic_function_(		"ParticleFluidSettings_show_tracer_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleHairKey_rna_type_get = _rpythonic_function_(		"ParticleHairKey_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleHairKey_co_hair_space_get = _rpythonic_function_(		"ParticleHairKey_co_hair_space_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ParticleHairKey_co_get = _rpythonic_function_(		"ParticleHairKey_co_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ParticleHairKey_time_get = _rpythonic_function_(		"ParticleHairKey_time_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleHairKey_weight_get = _rpythonic_function_(		"ParticleHairKey_weight_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleInstanceModifier_show_alive_get = _rpythonic_function_(		"ParticleInstanceModifier_show_alive_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleInstanceModifier_axis_get = _rpythonic_function_(		"ParticleInstanceModifier_axis_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleInstanceModifier_use_children_get = _rpythonic_function_(		"ParticleInstanceModifier_use_children_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleInstanceModifier_show_dead_get = _rpythonic_function_(		"ParticleInstanceModifier_show_dead_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleInstanceModifier_use_preserve_shape_get = _rpythonic_function_(		"ParticleInstanceModifier_use_preserve_shape_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleInstanceModifier_use_normal_get = _rpythonic_function_(		"ParticleInstanceModifier_use_normal_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleInstanceModifier_object_get = _rpythonic_function_(		"ParticleInstanceModifier_object_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleInstanceModifier_particle_system_index_get = _rpythonic_function_(		"ParticleInstanceModifier_particle_system_index_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleInstanceModifier_use_path_get = _rpythonic_function_(		"ParticleInstanceModifier_use_path_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleInstanceModifier_position_get = _rpythonic_function_(		"ParticleInstanceModifier_position_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleInstanceModifier_random_position_get = _rpythonic_function_(		"ParticleInstanceModifier_random_position_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleInstanceModifier_use_size_get = _rpythonic_function_(		"ParticleInstanceModifier_use_size_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleInstanceModifier_show_unborn_get = _rpythonic_function_(		"ParticleInstanceModifier_show_unborn_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleKey_rna_type_get = _rpythonic_function_(		"ParticleKey_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleKey_angular_velocity_get = _rpythonic_function_(		"ParticleKey_angular_velocity_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ParticleKey_location_get = _rpythonic_function_(		"ParticleKey_location_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ParticleKey_rotation_get = _rpythonic_function_(		"ParticleKey_rotation_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 4 )),] )

ParticleKey_time_get = _rpythonic_function_(		"ParticleKey_time_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleKey_velocity_get = _rpythonic_function_(		"ParticleKey_velocity_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ParticleSettings_use_absolute_path_time_get = _rpythonic_function_(		"ParticleSettings_use_absolute_path_time_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_active_dupliweight_get = _rpythonic_function_(		"ParticleSettings_active_dupliweight_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_active_dupliweight_index_get = _rpythonic_function_(		"ParticleSettings_active_dupliweight_index_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_active_texture_get = _rpythonic_function_(		"ParticleSettings_active_texture_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_active_texture_index_get = _rpythonic_function_(		"ParticleSettings_active_texture_index_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_use_render_adaptive_get = _rpythonic_function_(		"ParticleSettings_use_render_adaptive_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_use_advanced_hair_get = _rpythonic_function_(		"ParticleSettings_use_advanced_hair_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_billboard_align_get = _rpythonic_function_(		"ParticleSettings_billboard_align_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_jitter_factor_get = _rpythonic_function_(		"ParticleSettings_jitter_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_count_get = _rpythonic_function_(		"ParticleSettings_count_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_kink_amplitude_get = _rpythonic_function_(		"ParticleSettings_kink_amplitude_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_kink_amplitude_clump_get = _rpythonic_function_(		"ParticleSettings_kink_amplitude_clump_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_angular_velocity_factor_get = _rpythonic_function_(		"ParticleSettings_angular_velocity_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_angular_velocity_mode_get = _rpythonic_function_(		"ParticleSettings_angular_velocity_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_billboard_animation_get = _rpythonic_function_(		"ParticleSettings_billboard_animation_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_animation_data_get = _rpythonic_function_(		"ParticleSettings_animation_data_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_kink_axis_get = _rpythonic_function_(		"ParticleSettings_kink_axis_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_use_hair_bspline_get = _rpythonic_function_(		"ParticleSettings_use_hair_bspline_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_line_length_tail_get = _rpythonic_function_(		"ParticleSettings_line_length_tail_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_billboard_object_get = _rpythonic_function_(		"ParticleSettings_billboard_object_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_billboard_offset_get = _rpythonic_function_(		"ParticleSettings_billboard_offset_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 2 )),] )

ParticleSettings_billboard_size_get = _rpythonic_function_(		"ParticleSettings_billboard_size_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 2 )),] )

ParticleSettings_billboard_velocity_head_get = _rpythonic_function_(		"ParticleSettings_billboard_velocity_head_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_billboard_velocity_tail_get = _rpythonic_function_(		"ParticleSettings_billboard_velocity_tail_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_boids_get = _rpythonic_function_(		"ParticleSettings_boids_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_lock_boids_to_surface_get = _rpythonic_function_(		"ParticleSettings_lock_boids_to_surface_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_brownian_factor_get = _rpythonic_function_(		"ParticleSettings_brownian_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_child_radius_get = _rpythonic_function_(		"ParticleSettings_child_radius_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_child_roundness_get = _rpythonic_function_(		"ParticleSettings_child_roundness_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_use_simplify_get = _rpythonic_function_(		"ParticleSettings_use_simplify_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_child_size_get = _rpythonic_function_(		"ParticleSettings_child_size_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_child_type_get = _rpythonic_function_(		"ParticleSettings_child_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_child_nbr_get = _rpythonic_function_(		"ParticleSettings_child_nbr_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_clump_factor_get = _rpythonic_function_(		"ParticleSettings_clump_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_color_maximum_get = _rpythonic_function_(		"ParticleSettings_color_maximum_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_damping_get = _rpythonic_function_(		"ParticleSettings_damping_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_adaptive_angle_get = _rpythonic_function_(		"ParticleSettings_adaptive_angle_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_use_die_on_collision_get = _rpythonic_function_(		"ParticleSettings_use_die_on_collision_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_use_dead_get = _rpythonic_function_(		"ParticleSettings_use_dead_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_draw_percentage_get = _rpythonic_function_(		"ParticleSettings_draw_percentage_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_distribution_get = _rpythonic_function_(		"ParticleSettings_distribution_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_drag_factor_get = _rpythonic_function_(		"ParticleSettings_drag_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_draw_color_get = _rpythonic_function_(		"ParticleSettings_draw_color_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_draw_size_get = _rpythonic_function_(		"ParticleSettings_draw_size_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_dupli_group_get = _rpythonic_function_(		"ParticleSettings_dupli_group_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_dupli_weights_begin = _rpythonic_function_(		"ParticleSettings_dupli_weights_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_dupli_weights_next = _rpythonic_function_(		"ParticleSettings_dupli_weights_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

ParticleSettings_dupli_weights_end = _rpythonic_function_(		"ParticleSettings_dupli_weights_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

ParticleSettings_dupli_object_get = _rpythonic_function_(		"ParticleSettings_dupli_object_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_use_dynamic_rotation_get = _rpythonic_function_(		"ParticleSettings_use_dynamic_rotation_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_apply_effector_to_children_get = _rpythonic_function_(		"ParticleSettings_apply_effector_to_children_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_effector_amount_get = _rpythonic_function_(		"ParticleSettings_effector_amount_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_effector_weights_get = _rpythonic_function_(		"ParticleSettings_effector_weights_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_emit_from_get = _rpythonic_function_(		"ParticleSettings_emit_from_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_use_render_emitter_get = _rpythonic_function_(		"ParticleSettings_use_render_emitter_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_frame_end_get = _rpythonic_function_(		"ParticleSettings_frame_end_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_use_even_distribution_get = _rpythonic_function_(		"ParticleSettings_use_even_distribution_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_kink_flat_get = _rpythonic_function_(		"ParticleSettings_kink_flat_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_is_fluid_get = _rpythonic_function_(		"ParticleSettings_is_fluid_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_force_field_1_get = _rpythonic_function_(		"ParticleSettings_force_field_1_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_force_field_2_get = _rpythonic_function_(		"ParticleSettings_force_field_2_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_kink_frequency_get = _rpythonic_function_(		"ParticleSettings_kink_frequency_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_grid_random_get = _rpythonic_function_(		"ParticleSettings_grid_random_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_hair_length_get = _rpythonic_function_(		"ParticleSettings_hair_length_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_line_length_head_get = _rpythonic_function_(		"ParticleSettings_line_length_head_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_show_health_get = _rpythonic_function_(		"ParticleSettings_show_health_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_hexagonal_grid_get = _rpythonic_function_(		"ParticleSettings_hexagonal_grid_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_integrator_get = _rpythonic_function_(		"ParticleSettings_integrator_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_invert_grid_get = _rpythonic_function_(		"ParticleSettings_invert_grid_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_keys_step_get = _rpythonic_function_(		"ParticleSettings_keys_step_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_kink_get = _rpythonic_function_(		"ParticleSettings_kink_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_child_length_get = _rpythonic_function_(		"ParticleSettings_child_length_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_lifetime_get = _rpythonic_function_(		"ParticleSettings_lifetime_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_lock_billboard_get = _rpythonic_function_(		"ParticleSettings_lock_billboard_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_create_long_hair_children_get = _rpythonic_function_(		"ParticleSettings_create_long_hair_children_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_keyed_loops_get = _rpythonic_function_(		"ParticleSettings_keyed_loops_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_mass_get = _rpythonic_function_(		"ParticleSettings_mass_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_use_multiply_size_mass_get = _rpythonic_function_(		"ParticleSettings_use_multiply_size_mass_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_material_get = _rpythonic_function_(		"ParticleSettings_material_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_use_react_multiple_get = _rpythonic_function_(		"ParticleSettings_use_react_multiple_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_normal_factor_get = _rpythonic_function_(		"ParticleSettings_normal_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_show_number_get = _rpythonic_function_(		"ParticleSettings_show_number_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_object_factor_get = _rpythonic_function_(		"ParticleSettings_object_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_object_align_factor_get = _rpythonic_function_(		"ParticleSettings_object_align_factor_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ParticleSettings_billboard_offset_split_get = _rpythonic_function_(		"ParticleSettings_billboard_offset_split_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_userjit_get = _rpythonic_function_(		"ParticleSettings_userjit_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_use_parent_particles_get = _rpythonic_function_(		"ParticleSettings_use_parent_particles_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_particle_factor_get = _rpythonic_function_(		"ParticleSettings_particle_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_draw_method_get = _rpythonic_function_(		"ParticleSettings_draw_method_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_render_type_get = _rpythonic_function_(		"ParticleSettings_render_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_child_parting_factor_get = _rpythonic_function_(		"ParticleSettings_child_parting_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_child_parting_max_get = _rpythonic_function_(		"ParticleSettings_child_parting_max_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_child_parting_min_get = _rpythonic_function_(		"ParticleSettings_child_parting_min_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_path_end_get = _rpythonic_function_(		"ParticleSettings_path_end_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_path_start_get = _rpythonic_function_(		"ParticleSettings_path_start_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_phase_factor_get = _rpythonic_function_(		"ParticleSettings_phase_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_physics_type_get = _rpythonic_function_(		"ParticleSettings_physics_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_use_group_pick_random_get = _rpythonic_function_(		"ParticleSettings_use_group_pick_random_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_adaptive_pixel_get = _rpythonic_function_(		"ParticleSettings_adaptive_pixel_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_use_emit_random_get = _rpythonic_function_(		"ParticleSettings_use_emit_random_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_lifetime_random_get = _rpythonic_function_(		"ParticleSettings_lifetime_random_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_factor_random_get = _rpythonic_function_(		"ParticleSettings_factor_random_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_child_size_random_get = _rpythonic_function_(		"ParticleSettings_child_size_random_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_length_random_get = _rpythonic_function_(		"ParticleSettings_length_random_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_phase_factor_random_get = _rpythonic_function_(		"ParticleSettings_phase_factor_random_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_rotation_factor_random_get = _rpythonic_function_(		"ParticleSettings_rotation_factor_random_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_size_random_get = _rpythonic_function_(		"ParticleSettings_size_random_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_billboard_tilt_random_get = _rpythonic_function_(		"ParticleSettings_billboard_tilt_random_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_simplify_rate_get = _rpythonic_function_(		"ParticleSettings_simplify_rate_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_simplify_viewport_get = _rpythonic_function_(		"ParticleSettings_simplify_viewport_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_react_event_get = _rpythonic_function_(		"ParticleSettings_react_event_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_reactor_factor_get = _rpythonic_function_(		"ParticleSettings_reactor_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_simplify_refsize_get = _rpythonic_function_(		"ParticleSettings_simplify_refsize_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_regrow_hair_get = _rpythonic_function_(		"ParticleSettings_regrow_hair_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_render_step_get = _rpythonic_function_(		"ParticleSettings_render_step_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_rendered_child_count_get = _rpythonic_function_(		"ParticleSettings_rendered_child_count_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_grid_resolution_get = _rpythonic_function_(		"ParticleSettings_grid_resolution_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_tangent_phase_get = _rpythonic_function_(		"ParticleSettings_tangent_phase_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_rotation_mode_get = _rpythonic_function_(		"ParticleSettings_rotation_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_roughness_endpoint_get = _rpythonic_function_(		"ParticleSettings_roughness_endpoint_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_roughness_1_get = _rpythonic_function_(		"ParticleSettings_roughness_1_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_roughness_2_get = _rpythonic_function_(		"ParticleSettings_roughness_2_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_fluid_get = _rpythonic_function_(		"ParticleSettings_fluid_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_hair_step_get = _rpythonic_function_(		"ParticleSettings_hair_step_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_use_self_effect_get = _rpythonic_function_(		"ParticleSettings_use_self_effect_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_clump_shape_get = _rpythonic_function_(		"ParticleSettings_clump_shape_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_kink_shape_get = _rpythonic_function_(		"ParticleSettings_kink_shape_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_roughness_end_shape_get = _rpythonic_function_(		"ParticleSettings_roughness_end_shape_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_show_size_get = _rpythonic_function_(		"ParticleSettings_show_size_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_particle_size_get = _rpythonic_function_(		"ParticleSettings_particle_size_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_use_size_deflect_get = _rpythonic_function_(		"ParticleSettings_use_size_deflect_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_roughness_1_size_get = _rpythonic_function_(		"ParticleSettings_roughness_1_size_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_roughness_2_size_get = _rpythonic_function_(		"ParticleSettings_roughness_2_size_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_use_velocity_length_get = _rpythonic_function_(		"ParticleSettings_use_velocity_length_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_frame_start_get = _rpythonic_function_(		"ParticleSettings_frame_start_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_use_react_start_end_get = _rpythonic_function_(		"ParticleSettings_use_react_start_end_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_draw_step_get = _rpythonic_function_(		"ParticleSettings_draw_step_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_effect_hair_get = _rpythonic_function_(		"ParticleSettings_effect_hair_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_use_strand_primitive_get = _rpythonic_function_(		"ParticleSettings_use_strand_primitive_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_subframes_get = _rpythonic_function_(		"ParticleSettings_subframes_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_tangent_factor_get = _rpythonic_function_(		"ParticleSettings_tangent_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_texture_slots_begin = _rpythonic_function_(		"ParticleSettings_texture_slots_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_texture_slots_next = _rpythonic_function_(		"ParticleSettings_texture_slots_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

ParticleSettings_texture_slots_end = _rpythonic_function_(		"ParticleSettings_texture_slots_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

ParticleSettings_roughness_2_threshold_get = _rpythonic_function_(		"ParticleSettings_roughness_2_threshold_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_child_length_threshold_get = _rpythonic_function_(		"ParticleSettings_child_length_threshold_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_branch_threshold_get = _rpythonic_function_(		"ParticleSettings_branch_threshold_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_billboard_tilt_get = _rpythonic_function_(		"ParticleSettings_billboard_tilt_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_timestep_get = _rpythonic_function_(		"ParticleSettings_timestep_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_trail_count_get = _rpythonic_function_(		"ParticleSettings_trail_count_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_simplify_transition_get = _rpythonic_function_(		"ParticleSettings_simplify_transition_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_time_tweak_get = _rpythonic_function_(		"ParticleSettings_time_tweak_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_type_get = _rpythonic_function_(		"ParticleSettings_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_billboard_uv_split_get = _rpythonic_function_(		"ParticleSettings_billboard_uv_split_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_show_unborn_get = _rpythonic_function_(		"ParticleSettings_show_unborn_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_use_group_count_get = _rpythonic_function_(		"ParticleSettings_use_group_count_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_use_global_dupli_get = _rpythonic_function_(		"ParticleSettings_use_global_dupli_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_show_velocity_get = _rpythonic_function_(		"ParticleSettings_show_velocity_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_use_simplify_viewport_get = _rpythonic_function_(		"ParticleSettings_use_simplify_viewport_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_virtual_parents_get = _rpythonic_function_(		"ParticleSettings_virtual_parents_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_use_whole_group_get = _rpythonic_function_(		"ParticleSettings_use_whole_group_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettings_apply_guide_to_children_get = _rpythonic_function_(		"ParticleSettings_apply_guide_to_children_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettingsTextureSlot_use_map_clump_get = _rpythonic_function_(		"ParticleSettingsTextureSlot_use_map_clump_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettingsTextureSlot_clump_factor_get = _rpythonic_function_(		"ParticleSettingsTextureSlot_clump_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettingsTextureSlot_use_map_damp_get = _rpythonic_function_(		"ParticleSettingsTextureSlot_use_map_damp_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettingsTextureSlot_damp_factor_get = _rpythonic_function_(		"ParticleSettingsTextureSlot_damp_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettingsTextureSlot_use_map_density_get = _rpythonic_function_(		"ParticleSettingsTextureSlot_use_map_density_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettingsTextureSlot_density_factor_get = _rpythonic_function_(		"ParticleSettingsTextureSlot_density_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettingsTextureSlot_use_map_time_get = _rpythonic_function_(		"ParticleSettingsTextureSlot_use_map_time_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettingsTextureSlot_time_factor_get = _rpythonic_function_(		"ParticleSettingsTextureSlot_time_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettingsTextureSlot_field_factor_get = _rpythonic_function_(		"ParticleSettingsTextureSlot_field_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettingsTextureSlot_use_map_field_get = _rpythonic_function_(		"ParticleSettingsTextureSlot_use_map_field_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettingsTextureSlot_use_map_gravity_get = _rpythonic_function_(		"ParticleSettingsTextureSlot_use_map_gravity_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettingsTextureSlot_gravity_factor_get = _rpythonic_function_(		"ParticleSettingsTextureSlot_gravity_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettingsTextureSlot_use_map_velocity_get = _rpythonic_function_(		"ParticleSettingsTextureSlot_use_map_velocity_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettingsTextureSlot_use_map_kink_get = _rpythonic_function_(		"ParticleSettingsTextureSlot_use_map_kink_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettingsTextureSlot_kink_factor_get = _rpythonic_function_(		"ParticleSettingsTextureSlot_kink_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettingsTextureSlot_use_map_length_get = _rpythonic_function_(		"ParticleSettingsTextureSlot_use_map_length_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettingsTextureSlot_length_factor_get = _rpythonic_function_(		"ParticleSettingsTextureSlot_length_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettingsTextureSlot_use_map_life_get = _rpythonic_function_(		"ParticleSettingsTextureSlot_use_map_life_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettingsTextureSlot_life_factor_get = _rpythonic_function_(		"ParticleSettingsTextureSlot_life_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettingsTextureSlot_mapping_get = _rpythonic_function_(		"ParticleSettingsTextureSlot_mapping_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettingsTextureSlot_object_get = _rpythonic_function_(		"ParticleSettingsTextureSlot_object_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettingsTextureSlot_use_map_rough_get = _rpythonic_function_(		"ParticleSettingsTextureSlot_use_map_rough_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettingsTextureSlot_rough_factor_get = _rpythonic_function_(		"ParticleSettingsTextureSlot_rough_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettingsTextureSlot_use_map_size_get = _rpythonic_function_(		"ParticleSettingsTextureSlot_use_map_size_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettingsTextureSlot_size_factor_get = _rpythonic_function_(		"ParticleSettingsTextureSlot_size_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettingsTextureSlot_texture_coords_get = _rpythonic_function_(		"ParticleSettingsTextureSlot_texture_coords_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettingsTextureSlot_uv_layer_get = _rpythonic_function_(		"ParticleSettingsTextureSlot_uv_layer_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ParticleSettingsTextureSlot_uv_layer_length = _rpythonic_function_(		"ParticleSettingsTextureSlot_uv_layer_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettingsTextureSlot_velocity_factor_get = _rpythonic_function_(		"ParticleSettingsTextureSlot_velocity_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettingsTextureSlot_mapping_x_get = _rpythonic_function_(		"ParticleSettingsTextureSlot_mapping_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettingsTextureSlot_mapping_y_get = _rpythonic_function_(		"ParticleSettingsTextureSlot_mapping_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettingsTextureSlot_mapping_z_get = _rpythonic_function_(		"ParticleSettingsTextureSlot_mapping_z_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSettingsTextureSlots_rna_type_get = _rpythonic_function_(		"ParticleSettingsTextureSlots_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_rna_type_get = _rpythonic_function_(		"ParticleSystem_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_name_get = _rpythonic_function_(		"ParticleSystem_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ParticleSystem_name_length = _rpythonic_function_(		"ParticleSystem_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_active_particle_target_get = _rpythonic_function_(		"ParticleSystem_active_particle_target_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_active_particle_target_index_get = _rpythonic_function_(		"ParticleSystem_active_particle_target_index_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_billboard_normal_uv_get = _rpythonic_function_(		"ParticleSystem_billboard_normal_uv_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ParticleSystem_billboard_normal_uv_length = _rpythonic_function_(		"ParticleSystem_billboard_normal_uv_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_billboard_split_uv_get = _rpythonic_function_(		"ParticleSystem_billboard_split_uv_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ParticleSystem_billboard_split_uv_length = _rpythonic_function_(		"ParticleSystem_billboard_split_uv_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_billboard_time_index_uv_get = _rpythonic_function_(		"ParticleSystem_billboard_time_index_uv_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ParticleSystem_billboard_time_index_uv_length = _rpythonic_function_(		"ParticleSystem_billboard_time_index_uv_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_child_particles_begin = _rpythonic_function_(		"ParticleSystem_child_particles_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_child_particles_next = _rpythonic_function_(		"ParticleSystem_child_particles_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

ParticleSystem_child_particles_end = _rpythonic_function_(		"ParticleSystem_child_particles_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

ParticleSystem_child_seed_get = _rpythonic_function_(		"ParticleSystem_child_seed_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_cloth_get = _rpythonic_function_(		"ParticleSystem_cloth_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_is_editable_get = _rpythonic_function_(		"ParticleSystem_is_editable_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_is_edited_get = _rpythonic_function_(		"ParticleSystem_is_edited_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_is_global_hair_get = _rpythonic_function_(		"ParticleSystem_is_global_hair_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_use_hair_dynamics_get = _rpythonic_function_(		"ParticleSystem_use_hair_dynamics_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_use_keyed_timing_get = _rpythonic_function_(		"ParticleSystem_use_keyed_timing_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_has_multiple_caches_get = _rpythonic_function_(		"ParticleSystem_has_multiple_caches_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_parent_get = _rpythonic_function_(		"ParticleSystem_parent_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_particles_begin = _rpythonic_function_(		"ParticleSystem_particles_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_particles_next = _rpythonic_function_(		"ParticleSystem_particles_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

ParticleSystem_particles_end = _rpythonic_function_(		"ParticleSystem_particles_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

ParticleSystem_point_cache_get = _rpythonic_function_(		"ParticleSystem_point_cache_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_reactor_target_object_get = _rpythonic_function_(		"ParticleSystem_reactor_target_object_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_reactor_target_particle_system_get = _rpythonic_function_(		"ParticleSystem_reactor_target_particle_system_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_seed_get = _rpythonic_function_(		"ParticleSystem_seed_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_settings_get = _rpythonic_function_(		"ParticleSystem_settings_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_targets_begin = _rpythonic_function_(		"ParticleSystem_targets_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_targets_next = _rpythonic_function_(		"ParticleSystem_targets_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

ParticleSystem_targets_end = _rpythonic_function_(		"ParticleSystem_targets_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

ParticleSystem_vertex_group_clump_get = _rpythonic_function_(		"ParticleSystem_vertex_group_clump_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ParticleSystem_vertex_group_clump_length = _rpythonic_function_(		"ParticleSystem_vertex_group_clump_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_invert_vertex_group_clump_get = _rpythonic_function_(		"ParticleSystem_invert_vertex_group_clump_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_vertex_group_density_get = _rpythonic_function_(		"ParticleSystem_vertex_group_density_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ParticleSystem_vertex_group_density_length = _rpythonic_function_(		"ParticleSystem_vertex_group_density_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_invert_vertex_group_density_get = _rpythonic_function_(		"ParticleSystem_invert_vertex_group_density_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_vertex_group_field_get = _rpythonic_function_(		"ParticleSystem_vertex_group_field_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ParticleSystem_vertex_group_field_length = _rpythonic_function_(		"ParticleSystem_vertex_group_field_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_invert_vertex_group_field_get = _rpythonic_function_(		"ParticleSystem_invert_vertex_group_field_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_vertex_group_kink_get = _rpythonic_function_(		"ParticleSystem_vertex_group_kink_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ParticleSystem_vertex_group_kink_length = _rpythonic_function_(		"ParticleSystem_vertex_group_kink_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_invert_vertex_group_kink_get = _rpythonic_function_(		"ParticleSystem_invert_vertex_group_kink_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_vertex_group_length_get = _rpythonic_function_(		"ParticleSystem_vertex_group_length_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ParticleSystem_vertex_group_length_length = _rpythonic_function_(		"ParticleSystem_vertex_group_length_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_invert_vertex_group_length_get = _rpythonic_function_(		"ParticleSystem_invert_vertex_group_length_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_vertex_group_rotation_get = _rpythonic_function_(		"ParticleSystem_vertex_group_rotation_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ParticleSystem_vertex_group_rotation_length = _rpythonic_function_(		"ParticleSystem_vertex_group_rotation_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_invert_vertex_group_rotation_get = _rpythonic_function_(		"ParticleSystem_invert_vertex_group_rotation_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_vertex_group_roughness_1_get = _rpythonic_function_(		"ParticleSystem_vertex_group_roughness_1_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ParticleSystem_vertex_group_roughness_1_length = _rpythonic_function_(		"ParticleSystem_vertex_group_roughness_1_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_invert_vertex_group_roughness_1_get = _rpythonic_function_(		"ParticleSystem_invert_vertex_group_roughness_1_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_vertex_group_roughness_2_get = _rpythonic_function_(		"ParticleSystem_vertex_group_roughness_2_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ParticleSystem_vertex_group_roughness_2_length = _rpythonic_function_(		"ParticleSystem_vertex_group_roughness_2_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_invert_vertex_group_roughness_2_get = _rpythonic_function_(		"ParticleSystem_invert_vertex_group_roughness_2_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_vertex_group_roughness_end_get = _rpythonic_function_(		"ParticleSystem_vertex_group_roughness_end_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ParticleSystem_vertex_group_roughness_end_length = _rpythonic_function_(		"ParticleSystem_vertex_group_roughness_end_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_invert_vertex_group_roughness_end_get = _rpythonic_function_(		"ParticleSystem_invert_vertex_group_roughness_end_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_vertex_group_size_get = _rpythonic_function_(		"ParticleSystem_vertex_group_size_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ParticleSystem_vertex_group_size_length = _rpythonic_function_(		"ParticleSystem_vertex_group_size_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_invert_vertex_group_size_get = _rpythonic_function_(		"ParticleSystem_invert_vertex_group_size_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_vertex_group_tangent_get = _rpythonic_function_(		"ParticleSystem_vertex_group_tangent_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ParticleSystem_vertex_group_tangent_length = _rpythonic_function_(		"ParticleSystem_vertex_group_tangent_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_invert_vertex_group_tangent_get = _rpythonic_function_(		"ParticleSystem_invert_vertex_group_tangent_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_vertex_group_velocity_get = _rpythonic_function_(		"ParticleSystem_vertex_group_velocity_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ParticleSystem_vertex_group_velocity_length = _rpythonic_function_(		"ParticleSystem_vertex_group_velocity_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystem_invert_vertex_group_velocity_get = _rpythonic_function_(		"ParticleSystem_invert_vertex_group_velocity_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystemModifier_particle_system_get = _rpythonic_function_(		"ParticleSystemModifier_particle_system_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystems_rna_type_get = _rpythonic_function_(		"ParticleSystems_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystems_active_get = _rpythonic_function_(		"ParticleSystems_active_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleSystems_active_index_get = _rpythonic_function_(		"ParticleSystems_active_index_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleTarget_rna_type_get = _rpythonic_function_(		"ParticleTarget_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleTarget_name_get = _rpythonic_function_(		"ParticleTarget_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ParticleTarget_name_length = _rpythonic_function_(		"ParticleTarget_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleTarget_duration_get = _rpythonic_function_(		"ParticleTarget_duration_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleTarget_alliance_get = _rpythonic_function_(		"ParticleTarget_alliance_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleTarget_object_get = _rpythonic_function_(		"ParticleTarget_object_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleTarget_system_get = _rpythonic_function_(		"ParticleTarget_system_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleTarget_time_get = _rpythonic_function_(		"ParticleTarget_time_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ParticleTarget_is_valid_get = _rpythonic_function_(		"ParticleTarget_is_valid_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PivotConstraint_rotation_range_get = _rpythonic_function_(		"PivotConstraint_rotation_range_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PivotConstraint_head_tail_get = _rpythonic_function_(		"PivotConstraint_head_tail_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PivotConstraint_offset_get = _rpythonic_function_(		"PivotConstraint_offset_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

PivotConstraint_subtarget_get = _rpythonic_function_(		"PivotConstraint_subtarget_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

PivotConstraint_subtarget_length = _rpythonic_function_(		"PivotConstraint_subtarget_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PivotConstraint_target_get = _rpythonic_function_(		"PivotConstraint_target_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PivotConstraint_use_relative_location_get = _rpythonic_function_(		"PivotConstraint_use_relative_location_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PluginSequence_filename_get = _rpythonic_function_(		"PluginSequence_filename_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

PluginSequence_filename_length = _rpythonic_function_(		"PluginSequence_filename_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointCache_rna_type_get = _rpythonic_function_(		"PointCache_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointCache_name_get = _rpythonic_function_(		"PointCache_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

PointCache_name_length = _rpythonic_function_(		"PointCache_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointCache_compression_get = _rpythonic_function_(		"PointCache_compression_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointCache_index_get = _rpythonic_function_(		"PointCache_index_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointCache_info_get = _rpythonic_function_(		"PointCache_info_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

PointCache_info_length = _rpythonic_function_(		"PointCache_info_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointCache_frame_step_get = _rpythonic_function_(		"PointCache_frame_step_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointCache_is_outdated_get = _rpythonic_function_(		"PointCache_is_outdated_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointCache_use_disk_cache_get = _rpythonic_function_(		"PointCache_use_disk_cache_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointCache_frame_end_get = _rpythonic_function_(		"PointCache_frame_end_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointCache_use_external_get = _rpythonic_function_(		"PointCache_use_external_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointCache_filepath_get = _rpythonic_function_(		"PointCache_filepath_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

PointCache_filepath_length = _rpythonic_function_(		"PointCache_filepath_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointCache_use_library_path_get = _rpythonic_function_(		"PointCache_use_library_path_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointCache_point_caches_begin = _rpythonic_function_(		"PointCache_point_caches_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointCache_point_caches_next = _rpythonic_function_(		"PointCache_point_caches_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

PointCache_point_caches_end = _rpythonic_function_(		"PointCache_point_caches_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

PointCache_use_quick_cache_get = _rpythonic_function_(		"PointCache_use_quick_cache_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointCache_frame_start_get = _rpythonic_function_(		"PointCache_frame_start_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointCache_frames_skipped_get = _rpythonic_function_(		"PointCache_frames_skipped_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointCache_is_baked_get = _rpythonic_function_(		"PointCache_is_baked_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointCache_is_baking_get = _rpythonic_function_(		"PointCache_is_baking_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointCaches_rna_type_get = _rpythonic_function_(		"PointCaches_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointCaches_active_index_get = _rpythonic_function_(		"PointCaches_active_index_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointDensity_rna_type_get = _rpythonic_function_(		"PointDensity_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointDensity_color_ramp_get = _rpythonic_function_(		"PointDensity_color_ramp_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointDensity_color_source_get = _rpythonic_function_(		"PointDensity_color_source_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointDensity_turbulence_depth_get = _rpythonic_function_(		"PointDensity_turbulence_depth_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointDensity_falloff_get = _rpythonic_function_(		"PointDensity_falloff_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointDensity_falloff_curve_get = _rpythonic_function_(		"PointDensity_falloff_curve_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointDensity_use_falloff_curve_get = _rpythonic_function_(		"PointDensity_use_falloff_curve_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointDensity_noise_basis_get = _rpythonic_function_(		"PointDensity_noise_basis_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointDensity_object_get = _rpythonic_function_(		"PointDensity_object_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointDensity_particle_cache_space_get = _rpythonic_function_(		"PointDensity_particle_cache_space_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointDensity_particle_system_get = _rpythonic_function_(		"PointDensity_particle_system_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointDensity_point_source_get = _rpythonic_function_(		"PointDensity_point_source_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointDensity_radius_get = _rpythonic_function_(		"PointDensity_radius_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointDensity_speed_scale_get = _rpythonic_function_(		"PointDensity_speed_scale_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointDensity_turbulence_scale_get = _rpythonic_function_(		"PointDensity_turbulence_scale_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointDensity_falloff_soft_get = _rpythonic_function_(		"PointDensity_falloff_soft_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointDensity_use_turbulence_get = _rpythonic_function_(		"PointDensity_use_turbulence_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointDensity_turbulence_influence_get = _rpythonic_function_(		"PointDensity_turbulence_influence_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointDensity_falloff_speed_scale_get = _rpythonic_function_(		"PointDensity_falloff_speed_scale_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointDensity_vertex_cache_space_get = _rpythonic_function_(		"PointDensity_vertex_cache_space_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointDensity_turbulence_strength_get = _rpythonic_function_(		"PointDensity_turbulence_strength_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointDensityTexture_point_density_get = _rpythonic_function_(		"PointDensityTexture_point_density_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointLamp_falloff_curve_get = _rpythonic_function_(		"PointLamp_falloff_curve_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointLamp_falloff_type_get = _rpythonic_function_(		"PointLamp_falloff_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointLamp_linear_attenuation_get = _rpythonic_function_(		"PointLamp_linear_attenuation_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointLamp_use_only_shadow_get = _rpythonic_function_(		"PointLamp_use_only_shadow_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointLamp_quadratic_attenuation_get = _rpythonic_function_(		"PointLamp_quadratic_attenuation_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointLamp_shadow_adaptive_threshold_get = _rpythonic_function_(		"PointLamp_shadow_adaptive_threshold_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointLamp_shadow_color_get = _rpythonic_function_(		"PointLamp_shadow_color_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

PointLamp_use_shadow_layer_get = _rpythonic_function_(		"PointLamp_use_shadow_layer_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointLamp_shadow_method_get = _rpythonic_function_(		"PointLamp_shadow_method_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointLamp_shadow_ray_samples_get = _rpythonic_function_(		"PointLamp_shadow_ray_samples_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointLamp_shadow_ray_sample_method_get = _rpythonic_function_(		"PointLamp_shadow_ray_sample_method_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointLamp_shadow_soft_size_get = _rpythonic_function_(		"PointLamp_shadow_soft_size_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointLamp_use_sphere_get = _rpythonic_function_(		"PointLamp_use_sphere_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PointerProperty_fixed_type_get = _rpythonic_function_(		"PointerProperty_fixed_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Pose_rna_type_get = _rpythonic_function_(		"Pose_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Pose_animation_visualisation_get = _rpythonic_function_(		"Pose_animation_visualisation_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Pose_bone_groups_begin = _rpythonic_function_(		"Pose_bone_groups_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Pose_bone_groups_next = _rpythonic_function_(		"Pose_bone_groups_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Pose_bone_groups_end = _rpythonic_function_(		"Pose_bone_groups_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Pose_ik_param_get = _rpythonic_function_(		"Pose_ik_param_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Pose_ik_solver_get = _rpythonic_function_(		"Pose_ik_solver_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Pose_bones_begin = _rpythonic_function_(		"Pose_bones_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Pose_bones_next = _rpythonic_function_(		"Pose_bones_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Pose_bones_end = _rpythonic_function_(		"Pose_bones_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

PoseBone_rna_type_get = _rpythonic_function_(		"PoseBone_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PoseBone_name_get = _rpythonic_function_(		"PoseBone_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

PoseBone_name_length = _rpythonic_function_(		"PoseBone_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PoseBone_rotation_axis_angle_get = _rpythonic_function_(		"PoseBone_rotation_axis_angle_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 4 )),] )

PoseBone_matrix_basis_get = _rpythonic_function_(		"PoseBone_matrix_basis_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 16 )),] )

PoseBone_bone_get = _rpythonic_function_(		"PoseBone_bone_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PoseBone_bone_group_get = _rpythonic_function_(		"PoseBone_bone_group_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PoseBone_bone_group_index_get = _rpythonic_function_(		"PoseBone_bone_group_index_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PoseBone_matrix_channel_get = _rpythonic_function_(		"PoseBone_matrix_channel_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 16 )),] )

PoseBone_child_get = _rpythonic_function_(		"PoseBone_child_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PoseBone_constraints_begin = _rpythonic_function_(		"PoseBone_constraints_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PoseBone_constraints_next = _rpythonic_function_(		"PoseBone_constraints_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

PoseBone_constraints_end = _rpythonic_function_(		"PoseBone_constraints_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

PoseBone_custom_shape_get = _rpythonic_function_(		"PoseBone_custom_shape_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PoseBone_custom_shape_transform_get = _rpythonic_function_(		"PoseBone_custom_shape_transform_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PoseBone_rotation_euler_get = _rpythonic_function_(		"PoseBone_rotation_euler_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

PoseBone_is_in_ik_chain_get = _rpythonic_function_(		"PoseBone_is_in_ik_chain_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PoseBone_ik_linear_weight_get = _rpythonic_function_(		"PoseBone_ik_linear_weight_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PoseBone_ik_rotation_weight_get = _rpythonic_function_(		"PoseBone_ik_rotation_weight_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PoseBone_ik_stretch_get = _rpythonic_function_(		"PoseBone_ik_stretch_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PoseBone_use_ik_limit_x_get = _rpythonic_function_(		"PoseBone_use_ik_limit_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PoseBone_lock_ik_x_get = _rpythonic_function_(		"PoseBone_lock_ik_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PoseBone_ik_max_x_get = _rpythonic_function_(		"PoseBone_ik_max_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PoseBone_ik_min_x_get = _rpythonic_function_(		"PoseBone_ik_min_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PoseBone_ik_stiffness_x_get = _rpythonic_function_(		"PoseBone_ik_stiffness_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PoseBone_use_ik_limit_y_get = _rpythonic_function_(		"PoseBone_use_ik_limit_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PoseBone_lock_ik_y_get = _rpythonic_function_(		"PoseBone_lock_ik_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PoseBone_ik_max_y_get = _rpythonic_function_(		"PoseBone_ik_max_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PoseBone_ik_min_y_get = _rpythonic_function_(		"PoseBone_ik_min_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PoseBone_ik_stiffness_y_get = _rpythonic_function_(		"PoseBone_ik_stiffness_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PoseBone_use_ik_limit_z_get = _rpythonic_function_(		"PoseBone_use_ik_limit_z_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PoseBone_lock_ik_z_get = _rpythonic_function_(		"PoseBone_lock_ik_z_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PoseBone_ik_max_z_get = _rpythonic_function_(		"PoseBone_ik_max_z_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PoseBone_ik_min_z_get = _rpythonic_function_(		"PoseBone_ik_min_z_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PoseBone_ik_stiffness_z_get = _rpythonic_function_(		"PoseBone_ik_stiffness_z_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PoseBone_use_ik_rotation_control_get = _rpythonic_function_(		"PoseBone_use_ik_rotation_control_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PoseBone_use_ik_linear_control_get = _rpythonic_function_(		"PoseBone_use_ik_linear_control_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PoseBone_location_get = _rpythonic_function_(		"PoseBone_location_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

PoseBone_lock_location_get = _rpythonic_function_(		"PoseBone_lock_location_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_int * 3 )),] )

PoseBone_lock_rotation_get = _rpythonic_function_(		"PoseBone_lock_rotation_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_int * 3 )),] )

PoseBone_lock_rotation_w_get = _rpythonic_function_(		"PoseBone_lock_rotation_w_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PoseBone_lock_rotations_4d_get = _rpythonic_function_(		"PoseBone_lock_rotations_4d_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PoseBone_lock_scale_get = _rpythonic_function_(		"PoseBone_lock_scale_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_int * 3 )),] )

PoseBone_motion_path_get = _rpythonic_function_(		"PoseBone_motion_path_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PoseBone_parent_get = _rpythonic_function_(		"PoseBone_parent_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PoseBone_head_get = _rpythonic_function_(		"PoseBone_head_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

PoseBone_matrix_get = _rpythonic_function_(		"PoseBone_matrix_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 16 )),] )

PoseBone_tail_get = _rpythonic_function_(		"PoseBone_tail_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

PoseBone_rotation_quaternion_get = _rpythonic_function_(		"PoseBone_rotation_quaternion_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 4 )),] )

PoseBone_rotation_mode_get = _rpythonic_function_(		"PoseBone_rotation_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PoseBone_scale_get = _rpythonic_function_(		"PoseBone_scale_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

PoseBoneConstraints_rna_type_get = _rpythonic_function_(		"PoseBoneConstraints_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PoseBoneConstraints_active_get = _rpythonic_function_(		"PoseBoneConstraints_active_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Property_rna_type_get = _rpythonic_function_(		"Property_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Property_name_get = _rpythonic_function_(		"Property_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

Property_name_length = _rpythonic_function_(		"Property_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Property_srna_get = _rpythonic_function_(		"Property_srna_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Property_description_get = _rpythonic_function_(		"Property_description_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

Property_description_length = _rpythonic_function_(		"Property_description_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Property_is_enum_flag_get = _rpythonic_function_(		"Property_is_enum_flag_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Property_is_hidden_get = _rpythonic_function_(		"Property_is_hidden_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Property_identifier_get = _rpythonic_function_(		"Property_identifier_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

Property_identifier_length = _rpythonic_function_(		"Property_identifier_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Property_is_never_none_get = _rpythonic_function_(		"Property_is_never_none_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Property_is_readonly_get = _rpythonic_function_(		"Property_is_readonly_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Property_is_registered_get = _rpythonic_function_(		"Property_is_registered_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Property_is_registered_optional_get = _rpythonic_function_(		"Property_is_registered_optional_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Property_is_required_get = _rpythonic_function_(		"Property_is_required_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Property_is_output_get = _rpythonic_function_(		"Property_is_output_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Property_is_runtime_get = _rpythonic_function_(		"Property_is_runtime_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Property_is_skip_save_get = _rpythonic_function_(		"Property_is_skip_save_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Property_subtype_get = _rpythonic_function_(		"Property_subtype_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Property_type_get = _rpythonic_function_(		"Property_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Property_unit_get = _rpythonic_function_(		"Property_unit_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PropertyActuator_mode_get = _rpythonic_function_(		"PropertyActuator_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PropertyActuator_object_get = _rpythonic_function_(		"PropertyActuator_object_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PropertyActuator_property_get = _rpythonic_function_(		"PropertyActuator_property_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

PropertyActuator_property_length = _rpythonic_function_(		"PropertyActuator_property_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PropertyActuator_object_property_get = _rpythonic_function_(		"PropertyActuator_object_property_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

PropertyActuator_object_property_length = _rpythonic_function_(		"PropertyActuator_object_property_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PropertyActuator_value_get = _rpythonic_function_(		"PropertyActuator_value_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

PropertyActuator_value_length = _rpythonic_function_(		"PropertyActuator_value_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PropertyGroup_rna_type_get = _rpythonic_function_(		"PropertyGroup_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PropertyGroupItem_rna_type_get = _rpythonic_function_(		"PropertyGroupItem_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PropertySensor_evaluation_type_get = _rpythonic_function_(		"PropertySensor_evaluation_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PropertySensor_value_max_get = _rpythonic_function_(		"PropertySensor_value_max_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

PropertySensor_value_max_length = _rpythonic_function_(		"PropertySensor_value_max_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PropertySensor_value_min_get = _rpythonic_function_(		"PropertySensor_value_min_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

PropertySensor_value_min_length = _rpythonic_function_(		"PropertySensor_value_min_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PropertySensor_property_get = _rpythonic_function_(		"PropertySensor_property_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

PropertySensor_property_length = _rpythonic_function_(		"PropertySensor_property_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PropertySensor_value_get = _rpythonic_function_(		"PropertySensor_value_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

PropertySensor_value_length = _rpythonic_function_(		"PropertySensor_value_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PythonConstraint_target_count_get = _rpythonic_function_(		"PythonConstraint_target_count_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PythonConstraint_text_get = _rpythonic_function_(		"PythonConstraint_text_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PythonConstraint_has_script_error_get = _rpythonic_function_(		"PythonConstraint_has_script_error_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PythonConstraint_targets_begin = _rpythonic_function_(		"PythonConstraint_targets_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PythonConstraint_targets_next = _rpythonic_function_(		"PythonConstraint_targets_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

PythonConstraint_targets_end = _rpythonic_function_(		"PythonConstraint_targets_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

PythonConstraint_use_targets_get = _rpythonic_function_(		"PythonConstraint_use_targets_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PythonController_use_debug_get = _rpythonic_function_(		"PythonController_use_debug_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PythonController_mode_get = _rpythonic_function_(		"PythonController_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PythonController_module_get = _rpythonic_function_(		"PythonController_module_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

PythonController_module_length = _rpythonic_function_(		"PythonController_module_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

PythonController_text_get = _rpythonic_function_(		"PythonController_text_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RGBANodeSocket_default_value_get = _rpythonic_function_(		"RGBANodeSocket_default_value_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 4 )),] )

RadarSensor_angle_get = _rpythonic_function_(		"RadarSensor_angle_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RadarSensor_axis_get = _rpythonic_function_(		"RadarSensor_axis_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RadarSensor_distance_get = _rpythonic_function_(		"RadarSensor_distance_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RadarSensor_property_get = _rpythonic_function_(		"RadarSensor_property_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

RadarSensor_property_length = _rpythonic_function_(		"RadarSensor_property_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RandomActuator_use_always_true_get = _rpythonic_function_(		"RandomActuator_use_always_true_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RandomActuator_chance_get = _rpythonic_function_(		"RandomActuator_chance_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RandomActuator_distribution_get = _rpythonic_function_(		"RandomActuator_distribution_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RandomActuator_half_life_time_get = _rpythonic_function_(		"RandomActuator_half_life_time_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RandomActuator_int_max_get = _rpythonic_function_(		"RandomActuator_int_max_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RandomActuator_float_max_get = _rpythonic_function_(		"RandomActuator_float_max_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RandomActuator_int_mean_get = _rpythonic_function_(		"RandomActuator_int_mean_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RandomActuator_float_mean_get = _rpythonic_function_(		"RandomActuator_float_mean_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RandomActuator_int_min_get = _rpythonic_function_(		"RandomActuator_int_min_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RandomActuator_float_min_get = _rpythonic_function_(		"RandomActuator_float_min_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RandomActuator_property_get = _rpythonic_function_(		"RandomActuator_property_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

RandomActuator_property_length = _rpythonic_function_(		"RandomActuator_property_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RandomActuator_standard_derivation_get = _rpythonic_function_(		"RandomActuator_standard_derivation_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RandomActuator_seed_get = _rpythonic_function_(		"RandomActuator_seed_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RandomActuator_int_value_get = _rpythonic_function_(		"RandomActuator_int_value_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RandomActuator_float_value_get = _rpythonic_function_(		"RandomActuator_float_value_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RandomSensor_seed_get = _rpythonic_function_(		"RandomSensor_seed_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RaySensor_axis_get = _rpythonic_function_(		"RaySensor_axis_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RaySensor_material_get = _rpythonic_function_(		"RaySensor_material_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

RaySensor_material_length = _rpythonic_function_(		"RaySensor_material_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RaySensor_property_get = _rpythonic_function_(		"RaySensor_property_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

RaySensor_property_length = _rpythonic_function_(		"RaySensor_property_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RaySensor_range_get = _rpythonic_function_(		"RaySensor_range_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RaySensor_ray_type_get = _rpythonic_function_(		"RaySensor_ray_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RaySensor_use_x_ray_get = _rpythonic_function_(		"RaySensor_use_x_ray_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Region_rna_type_get = _rpythonic_function_(		"Region_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Region_height_get = _rpythonic_function_(		"Region_height_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Region_id_get = _rpythonic_function_(		"Region_id_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Region_type_get = _rpythonic_function_(		"Region_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Region_width_get = _rpythonic_function_(		"Region_width_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RegionView3D_rna_type_get = _rpythonic_function_(		"RegionView3D_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RegionView3D_show_sync_view_get = _rpythonic_function_(		"RegionView3D_show_sync_view_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RegionView3D_use_box_clip_get = _rpythonic_function_(		"RegionView3D_use_box_clip_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RegionView3D_view_distance_get = _rpythonic_function_(		"RegionView3D_view_distance_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RegionView3D_is_perspective_get = _rpythonic_function_(		"RegionView3D_is_perspective_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RegionView3D_lock_rotation_get = _rpythonic_function_(		"RegionView3D_lock_rotation_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RegionView3D_view_perspective_get = _rpythonic_function_(		"RegionView3D_view_perspective_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RegionView3D_perspective_matrix_get = _rpythonic_function_(		"RegionView3D_perspective_matrix_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 16 )),] )

RegionView3D_view_location_get = _rpythonic_function_(		"RegionView3D_view_location_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

RegionView3D_view_matrix_get = _rpythonic_function_(		"RegionView3D_view_matrix_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 16 )),] )

RegionView3D_view_rotation_get = _rpythonic_function_(		"RegionView3D_view_rotation_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 4 )),] )

RenderEngine_rna_type_get = _rpythonic_function_(		"RenderEngine_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderEngine_bl_idname_get = _rpythonic_function_(		"RenderEngine_bl_idname_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

RenderEngine_bl_idname_length = _rpythonic_function_(		"RenderEngine_bl_idname_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderEngine_bl_label_get = _rpythonic_function_(		"RenderEngine_bl_label_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

RenderEngine_bl_label_length = _rpythonic_function_(		"RenderEngine_bl_label_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderEngine_bl_use_postprocess_get = _rpythonic_function_(		"RenderEngine_bl_use_postprocess_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderEngine_bl_use_preview_get = _rpythonic_function_(		"RenderEngine_bl_use_preview_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderLayer_rna_type_get = _rpythonic_function_(		"RenderLayer_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderLayer_name_get = _rpythonic_function_(		"RenderLayer_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

RenderLayer_name_length = _rpythonic_function_(		"RenderLayer_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderLayer_use_pass_ambient_occlusion_get = _rpythonic_function_(		"RenderLayer_use_pass_ambient_occlusion_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderLayer_exclude_ambient_occlusion_get = _rpythonic_function_(		"RenderLayer_exclude_ambient_occlusion_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderLayer_use_all_z_get = _rpythonic_function_(		"RenderLayer_use_all_z_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderLayer_use_pass_color_get = _rpythonic_function_(		"RenderLayer_use_pass_color_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderLayer_use_pass_combined_get = _rpythonic_function_(		"RenderLayer_use_pass_combined_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderLayer_use_pass_diffuse_get = _rpythonic_function_(		"RenderLayer_use_pass_diffuse_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderLayer_use_edge_enhance_get = _rpythonic_function_(		"RenderLayer_use_edge_enhance_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderLayer_use_pass_emit_get = _rpythonic_function_(		"RenderLayer_use_pass_emit_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderLayer_exclude_emit_get = _rpythonic_function_(		"RenderLayer_exclude_emit_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderLayer_use_get = _rpythonic_function_(		"RenderLayer_use_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderLayer_use_pass_environment_get = _rpythonic_function_(		"RenderLayer_use_pass_environment_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderLayer_exclude_environment_get = _rpythonic_function_(		"RenderLayer_exclude_environment_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderLayer_use_halo_get = _rpythonic_function_(		"RenderLayer_use_halo_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderLayer_use_pass_indirect_get = _rpythonic_function_(		"RenderLayer_use_pass_indirect_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderLayer_exclude_indirect_get = _rpythonic_function_(		"RenderLayer_exclude_indirect_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderLayer_light_override_get = _rpythonic_function_(		"RenderLayer_light_override_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderLayer_use_pass_material_index_get = _rpythonic_function_(		"RenderLayer_use_pass_material_index_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderLayer_material_override_get = _rpythonic_function_(		"RenderLayer_material_override_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderLayer_use_pass_mist_get = _rpythonic_function_(		"RenderLayer_use_pass_mist_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderLayer_use_pass_normal_get = _rpythonic_function_(		"RenderLayer_use_pass_normal_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderLayer_use_pass_object_index_get = _rpythonic_function_(		"RenderLayer_use_pass_object_index_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderLayer_use_pass_reflection_get = _rpythonic_function_(		"RenderLayer_use_pass_reflection_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderLayer_exclude_reflection_get = _rpythonic_function_(		"RenderLayer_exclude_reflection_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderLayer_use_pass_refraction_get = _rpythonic_function_(		"RenderLayer_use_pass_refraction_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderLayer_exclude_refraction_get = _rpythonic_function_(		"RenderLayer_exclude_refraction_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderLayer_use_pass_shadow_get = _rpythonic_function_(		"RenderLayer_use_pass_shadow_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderLayer_exclude_shadow_get = _rpythonic_function_(		"RenderLayer_exclude_shadow_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderLayer_use_sky_get = _rpythonic_function_(		"RenderLayer_use_sky_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderLayer_use_solid_get = _rpythonic_function_(		"RenderLayer_use_solid_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderLayer_use_pass_specular_get = _rpythonic_function_(		"RenderLayer_use_pass_specular_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderLayer_exclude_specular_get = _rpythonic_function_(		"RenderLayer_exclude_specular_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderLayer_use_strand_get = _rpythonic_function_(		"RenderLayer_use_strand_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderLayer_use_pass_uv_get = _rpythonic_function_(		"RenderLayer_use_pass_uv_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderLayer_use_pass_vector_get = _rpythonic_function_(		"RenderLayer_use_pass_vector_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderLayer_layers_get = _rpythonic_function_(		"RenderLayer_layers_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_int * 20 )),] )

RenderLayer_use_pass_z_get = _rpythonic_function_(		"RenderLayer_use_pass_z_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderLayer_use_ztransp_get = _rpythonic_function_(		"RenderLayer_use_ztransp_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderLayer_use_zmask_get = _rpythonic_function_(		"RenderLayer_use_zmask_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderLayer_layers_zmask_get = _rpythonic_function_(		"RenderLayer_layers_zmask_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_int * 20 )),] )

RenderLayer_invert_zmask_get = _rpythonic_function_(		"RenderLayer_invert_zmask_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderLayer_passes_begin = _rpythonic_function_(		"RenderLayer_passes_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderLayer_passes_next = _rpythonic_function_(		"RenderLayer_passes_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

RenderLayer_passes_end = _rpythonic_function_(		"RenderLayer_passes_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

RenderLayer_rect_get = _rpythonic_function_(		"RenderLayer_rect_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		ctypes.c_float),] )

RenderLayers_rna_type_get = _rpythonic_function_(		"RenderLayers_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderLayers_active_index_get = _rpythonic_function_(		"RenderLayers_active_index_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderLayers_active_get = _rpythonic_function_(		"RenderLayers_active_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderPass_rna_type_get = _rpythonic_function_(		"RenderPass_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderPass_name_get = _rpythonic_function_(		"RenderPass_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

RenderPass_name_length = _rpythonic_function_(		"RenderPass_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderPass_channel_id_get = _rpythonic_function_(		"RenderPass_channel_id_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

RenderPass_channel_id_length = _rpythonic_function_(		"RenderPass_channel_id_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderPass_channels_get = _rpythonic_function_(		"RenderPass_channels_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderPass_rect_get = _rpythonic_function_(		"RenderPass_rect_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		ctypes.c_float),] )

RenderPass_type_get = _rpythonic_function_(		"RenderPass_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderResult_rna_type_get = _rpythonic_function_(		"RenderResult_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderResult_layers_begin = _rpythonic_function_(		"RenderResult_layers_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderResult_layers_next = _rpythonic_function_(		"RenderResult_layers_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

RenderResult_layers_end = _rpythonic_function_(		"RenderResult_layers_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

RenderResult_resolution_x_get = _rpythonic_function_(		"RenderResult_resolution_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderResult_resolution_y_get = _rpythonic_function_(		"RenderResult_resolution_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_rna_type_get = _rpythonic_function_(		"RenderSettings_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_tiff_16bit_get = _rpythonic_function_(		"RenderSettings_use_tiff_16bit_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_alpha_mode_get = _rpythonic_function_(		"RenderSettings_alpha_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_antialiasing_get = _rpythonic_function_(		"RenderSettings_use_antialiasing_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_bake_antialiasing_get = _rpythonic_function_(		"RenderSettings_use_bake_antialiasing_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_bake_aa_mode_get = _rpythonic_function_(		"RenderSettings_bake_aa_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_antialiasing_samples_get = _rpythonic_function_(		"RenderSettings_antialiasing_samples_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_ffmpeg_audio_channels_get = _rpythonic_function_(		"RenderSettings_ffmpeg_audio_channels_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_cineon_black_get = _rpythonic_function_(		"RenderSettings_cineon_black_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_bake_type_get = _rpythonic_function_(		"RenderSettings_bake_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_bake_multires_get = _rpythonic_function_(		"RenderSettings_use_bake_multires_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_bake_bias_get = _rpythonic_function_(		"RenderSettings_bake_bias_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_border_get = _rpythonic_function_(		"RenderSettings_use_border_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_border_max_x_get = _rpythonic_function_(		"RenderSettings_border_max_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_border_max_y_get = _rpythonic_function_(		"RenderSettings_border_max_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_border_min_x_get = _rpythonic_function_(		"RenderSettings_border_min_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_border_min_y_get = _rpythonic_function_(		"RenderSettings_border_min_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_bake_clear_get = _rpythonic_function_(		"RenderSettings_use_bake_clear_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_exr_codec_get = _rpythonic_function_(		"RenderSettings_exr_codec_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_color_management_get = _rpythonic_function_(		"RenderSettings_use_color_management_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_color_mode_get = _rpythonic_function_(		"RenderSettings_color_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_compositing_get = _rpythonic_function_(		"RenderSettings_use_compositing_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_crop_to_border_get = _rpythonic_function_(		"RenderSettings_use_crop_to_border_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_jpeg2k_depth_get = _rpythonic_function_(		"RenderSettings_jpeg2k_depth_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_display_mode_get = _rpythonic_function_(		"RenderSettings_display_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_bake_distance_get = _rpythonic_function_(		"RenderSettings_bake_distance_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_dither_intensity_get = _rpythonic_function_(		"RenderSettings_dither_intensity_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_edge_enhance_get = _rpythonic_function_(		"RenderSettings_use_edge_enhance_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_edge_color_get = _rpythonic_function_(		"RenderSettings_edge_color_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

RenderSettings_edge_threshold_get = _rpythonic_function_(		"RenderSettings_edge_threshold_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_engine_get = _rpythonic_function_(		"RenderSettings_engine_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_envmaps_get = _rpythonic_function_(		"RenderSettings_use_envmaps_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_file_extension_get = _rpythonic_function_(		"RenderSettings_file_extension_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

RenderSettings_file_extension_length = _rpythonic_function_(		"RenderSettings_file_extension_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_fps_get = _rpythonic_function_(		"RenderSettings_fps_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_fps_base_get = _rpythonic_function_(		"RenderSettings_fps_base_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_field_order_get = _rpythonic_function_(		"RenderSettings_field_order_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_fields_get = _rpythonic_function_(		"RenderSettings_use_fields_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_fields_still_get = _rpythonic_function_(		"RenderSettings_use_fields_still_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_file_extension_get = _rpythonic_function_(		"RenderSettings_use_file_extension_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_file_format_get = _rpythonic_function_(		"RenderSettings_file_format_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_filter_size_get = _rpythonic_function_(		"RenderSettings_filter_size_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_stamp_font_size_get = _rpythonic_function_(		"RenderSettings_stamp_font_size_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_frame_map_new_get = _rpythonic_function_(		"RenderSettings_frame_map_new_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_frame_map_old_get = _rpythonic_function_(		"RenderSettings_frame_map_old_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_free_image_textures_get = _rpythonic_function_(		"RenderSettings_use_free_image_textures_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_free_unused_nodes_get = _rpythonic_function_(		"RenderSettings_use_free_unused_nodes_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_full_sample_get = _rpythonic_function_(		"RenderSettings_use_full_sample_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_cineon_gamma_get = _rpythonic_function_(		"RenderSettings_cineon_gamma_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_exr_half_get = _rpythonic_function_(		"RenderSettings_use_exr_half_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_cineon_log_get = _rpythonic_function_(		"RenderSettings_use_cineon_log_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_bake_lores_mesh_get = _rpythonic_function_(		"RenderSettings_use_bake_lores_mesh_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_bake_margin_get = _rpythonic_function_(		"RenderSettings_bake_margin_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_motion_blur_get = _rpythonic_function_(		"RenderSettings_use_motion_blur_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_motion_blur_samples_get = _rpythonic_function_(		"RenderSettings_motion_blur_samples_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_is_movie_format_get = _rpythonic_function_(		"RenderSettings_is_movie_format_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_has_multiple_engines_get = _rpythonic_function_(		"RenderSettings_has_multiple_engines_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_bake_normal_space_get = _rpythonic_function_(		"RenderSettings_bake_normal_space_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_bake_normalize_get = _rpythonic_function_(		"RenderSettings_use_bake_normalize_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_octree_resolution_get = _rpythonic_function_(		"RenderSettings_octree_resolution_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_filepath_get = _rpythonic_function_(		"RenderSettings_filepath_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

RenderSettings_filepath_length = _rpythonic_function_(		"RenderSettings_filepath_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_overwrite_get = _rpythonic_function_(		"RenderSettings_use_overwrite_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_parts_x_get = _rpythonic_function_(		"RenderSettings_parts_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_parts_y_get = _rpythonic_function_(		"RenderSettings_parts_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_pixel_aspect_x_get = _rpythonic_function_(		"RenderSettings_pixel_aspect_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_pixel_aspect_y_get = _rpythonic_function_(		"RenderSettings_pixel_aspect_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_pixel_filter_type_get = _rpythonic_function_(		"RenderSettings_pixel_filter_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_placeholder_get = _rpythonic_function_(		"RenderSettings_use_placeholder_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_jpeg2k_preset_get = _rpythonic_function_(		"RenderSettings_jpeg2k_preset_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_exr_preview_get = _rpythonic_function_(		"RenderSettings_exr_preview_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_bake_quad_split_get = _rpythonic_function_(		"RenderSettings_bake_quad_split_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_file_quality_get = _rpythonic_function_(		"RenderSettings_file_quality_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_radiosity_get = _rpythonic_function_(		"RenderSettings_use_radiosity_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_raytrace_method_get = _rpythonic_function_(		"RenderSettings_raytrace_method_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_raytrace_get = _rpythonic_function_(		"RenderSettings_use_raytrace_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_layers_begin = _rpythonic_function_(		"RenderSettings_layers_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_layers_next = _rpythonic_function_(		"RenderSettings_layers_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

RenderSettings_layers_end = _rpythonic_function_(		"RenderSettings_layers_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

RenderSettings_use_stamp_get = _rpythonic_function_(		"RenderSettings_use_stamp_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_resolution_percentage_get = _rpythonic_function_(		"RenderSettings_resolution_percentage_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_resolution_x_get = _rpythonic_function_(		"RenderSettings_resolution_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_resolution_y_get = _rpythonic_function_(		"RenderSettings_resolution_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_ffmpeg_audio_mixrate_get = _rpythonic_function_(		"RenderSettings_ffmpeg_audio_mixrate_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_save_buffers_get = _rpythonic_function_(		"RenderSettings_use_save_buffers_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_bake_selected_to_active_get = _rpythonic_function_(		"RenderSettings_use_bake_selected_to_active_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_sequencer_get = _rpythonic_function_(		"RenderSettings_use_sequencer_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_sequencer_gl_preview_get = _rpythonic_function_(		"RenderSettings_use_sequencer_gl_preview_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_sequencer_gl_render_get = _rpythonic_function_(		"RenderSettings_use_sequencer_gl_render_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_sequencer_gl_preview_get = _rpythonic_function_(		"RenderSettings_sequencer_gl_preview_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_sequencer_gl_render_get = _rpythonic_function_(		"RenderSettings_sequencer_gl_render_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_shadows_get = _rpythonic_function_(		"RenderSettings_use_shadows_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_motion_blur_shutter_get = _rpythonic_function_(		"RenderSettings_motion_blur_shutter_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_simplify_ao_sss_get = _rpythonic_function_(		"RenderSettings_simplify_ao_sss_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_simplify_child_particles_get = _rpythonic_function_(		"RenderSettings_simplify_child_particles_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_simplify_shadow_samples_get = _rpythonic_function_(		"RenderSettings_simplify_shadow_samples_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_simplify_subdivision_get = _rpythonic_function_(		"RenderSettings_simplify_subdivision_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_single_layer_get = _rpythonic_function_(		"RenderSettings_use_single_layer_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_simplify_triangulate_get = _rpythonic_function_(		"RenderSettings_use_simplify_triangulate_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_stamp_background_get = _rpythonic_function_(		"RenderSettings_stamp_background_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 4 )),] )

RenderSettings_use_stamp_camera_get = _rpythonic_function_(		"RenderSettings_use_stamp_camera_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_stamp_date_get = _rpythonic_function_(		"RenderSettings_use_stamp_date_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_stamp_filename_get = _rpythonic_function_(		"RenderSettings_use_stamp_filename_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_stamp_frame_get = _rpythonic_function_(		"RenderSettings_use_stamp_frame_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_stamp_lens_get = _rpythonic_function_(		"RenderSettings_use_stamp_lens_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_stamp_marker_get = _rpythonic_function_(		"RenderSettings_use_stamp_marker_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_stamp_note_get = _rpythonic_function_(		"RenderSettings_use_stamp_note_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_stamp_note_text_get = _rpythonic_function_(		"RenderSettings_stamp_note_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

RenderSettings_stamp_note_text_length = _rpythonic_function_(		"RenderSettings_stamp_note_text_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_stamp_render_time_get = _rpythonic_function_(		"RenderSettings_use_stamp_render_time_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_stamp_scene_get = _rpythonic_function_(		"RenderSettings_use_stamp_scene_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_stamp_sequencer_strip_get = _rpythonic_function_(		"RenderSettings_use_stamp_sequencer_strip_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_stamp_foreground_get = _rpythonic_function_(		"RenderSettings_stamp_foreground_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 4 )),] )

RenderSettings_use_stamp_time_get = _rpythonic_function_(		"RenderSettings_use_stamp_time_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_sss_get = _rpythonic_function_(		"RenderSettings_use_sss_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_textures_get = _rpythonic_function_(		"RenderSettings_use_textures_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_threads_get = _rpythonic_function_(		"RenderSettings_threads_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_threads_mode_get = _rpythonic_function_(		"RenderSettings_threads_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_game_engine_get = _rpythonic_function_(		"RenderSettings_use_game_engine_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_instances_get = _rpythonic_function_(		"RenderSettings_use_instances_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_local_coords_get = _rpythonic_function_(		"RenderSettings_use_local_coords_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_use_simplify_get = _rpythonic_function_(		"RenderSettings_use_simplify_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_cineon_white_get = _rpythonic_function_(		"RenderSettings_cineon_white_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_jpeg2k_ycc_get = _rpythonic_function_(		"RenderSettings_jpeg2k_ycc_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RenderSettings_exr_zbuf_get = _rpythonic_function_(		"RenderSettings_exr_zbuf_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RigidBodyJointConstraint_use_angular_limit_x_get = _rpythonic_function_(		"RigidBodyJointConstraint_use_angular_limit_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RigidBodyJointConstraint_use_angular_limit_y_get = _rpythonic_function_(		"RigidBodyJointConstraint_use_angular_limit_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RigidBodyJointConstraint_use_angular_limit_z_get = _rpythonic_function_(		"RigidBodyJointConstraint_use_angular_limit_z_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RigidBodyJointConstraint_axis_x_get = _rpythonic_function_(		"RigidBodyJointConstraint_axis_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RigidBodyJointConstraint_axis_y_get = _rpythonic_function_(		"RigidBodyJointConstraint_axis_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RigidBodyJointConstraint_axis_z_get = _rpythonic_function_(		"RigidBodyJointConstraint_axis_z_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RigidBodyJointConstraint_child_get = _rpythonic_function_(		"RigidBodyJointConstraint_child_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RigidBodyJointConstraint_use_linked_collision_get = _rpythonic_function_(		"RigidBodyJointConstraint_use_linked_collision_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RigidBodyJointConstraint_show_pivot_get = _rpythonic_function_(		"RigidBodyJointConstraint_show_pivot_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RigidBodyJointConstraint_use_limit_x_get = _rpythonic_function_(		"RigidBodyJointConstraint_use_limit_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RigidBodyJointConstraint_use_limit_y_get = _rpythonic_function_(		"RigidBodyJointConstraint_use_limit_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RigidBodyJointConstraint_use_limit_z_get = _rpythonic_function_(		"RigidBodyJointConstraint_use_limit_z_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RigidBodyJointConstraint_limit_angle_max_x_get = _rpythonic_function_(		"RigidBodyJointConstraint_limit_angle_max_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RigidBodyJointConstraint_limit_angle_max_y_get = _rpythonic_function_(		"RigidBodyJointConstraint_limit_angle_max_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RigidBodyJointConstraint_limit_angle_max_z_get = _rpythonic_function_(		"RigidBodyJointConstraint_limit_angle_max_z_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RigidBodyJointConstraint_limit_max_x_get = _rpythonic_function_(		"RigidBodyJointConstraint_limit_max_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RigidBodyJointConstraint_limit_max_y_get = _rpythonic_function_(		"RigidBodyJointConstraint_limit_max_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RigidBodyJointConstraint_limit_max_z_get = _rpythonic_function_(		"RigidBodyJointConstraint_limit_max_z_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RigidBodyJointConstraint_limit_angle_min_x_get = _rpythonic_function_(		"RigidBodyJointConstraint_limit_angle_min_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RigidBodyJointConstraint_limit_angle_min_y_get = _rpythonic_function_(		"RigidBodyJointConstraint_limit_angle_min_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RigidBodyJointConstraint_limit_angle_min_z_get = _rpythonic_function_(		"RigidBodyJointConstraint_limit_angle_min_z_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RigidBodyJointConstraint_limit_min_x_get = _rpythonic_function_(		"RigidBodyJointConstraint_limit_min_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RigidBodyJointConstraint_limit_min_y_get = _rpythonic_function_(		"RigidBodyJointConstraint_limit_min_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RigidBodyJointConstraint_limit_min_z_get = _rpythonic_function_(		"RigidBodyJointConstraint_limit_min_z_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RigidBodyJointConstraint_pivot_type_get = _rpythonic_function_(		"RigidBodyJointConstraint_pivot_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RigidBodyJointConstraint_pivot_x_get = _rpythonic_function_(		"RigidBodyJointConstraint_pivot_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RigidBodyJointConstraint_pivot_y_get = _rpythonic_function_(		"RigidBodyJointConstraint_pivot_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RigidBodyJointConstraint_pivot_z_get = _rpythonic_function_(		"RigidBodyJointConstraint_pivot_z_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RigidBodyJointConstraint_target_get = _rpythonic_function_(		"RigidBodyJointConstraint_target_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SPHFluidSettings_rna_type_get = _rpythonic_function_(		"SPHFluidSettings_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SPHFluidSettings_buoyancy_get = _rpythonic_function_(		"SPHFluidSettings_buoyancy_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SPHFluidSettings_yield_ratio_get = _rpythonic_function_(		"SPHFluidSettings_yield_ratio_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SPHFluidSettings_factor_density_get = _rpythonic_function_(		"SPHFluidSettings_factor_density_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SPHFluidSettings_factor_radius_get = _rpythonic_function_(		"SPHFluidSettings_factor_radius_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SPHFluidSettings_factor_repulsion_get = _rpythonic_function_(		"SPHFluidSettings_factor_repulsion_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SPHFluidSettings_factor_rest_length_get = _rpythonic_function_(		"SPHFluidSettings_factor_rest_length_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SPHFluidSettings_factor_stiff_viscosity_get = _rpythonic_function_(		"SPHFluidSettings_factor_stiff_viscosity_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SPHFluidSettings_use_initial_rest_length_get = _rpythonic_function_(		"SPHFluidSettings_use_initial_rest_length_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SPHFluidSettings_fluid_radius_get = _rpythonic_function_(		"SPHFluidSettings_fluid_radius_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SPHFluidSettings_plasticity_get = _rpythonic_function_(		"SPHFluidSettings_plasticity_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SPHFluidSettings_repulsion_get = _rpythonic_function_(		"SPHFluidSettings_repulsion_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SPHFluidSettings_rest_density_get = _rpythonic_function_(		"SPHFluidSettings_rest_density_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SPHFluidSettings_rest_length_get = _rpythonic_function_(		"SPHFluidSettings_rest_length_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SPHFluidSettings_spring_force_get = _rpythonic_function_(		"SPHFluidSettings_spring_force_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SPHFluidSettings_spring_frames_get = _rpythonic_function_(		"SPHFluidSettings_spring_frames_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SPHFluidSettings_stiff_viscosity_get = _rpythonic_function_(		"SPHFluidSettings_stiff_viscosity_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SPHFluidSettings_stiffness_get = _rpythonic_function_(		"SPHFluidSettings_stiffness_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SPHFluidSettings_use_viscoelastic_springs_get = _rpythonic_function_(		"SPHFluidSettings_use_viscoelastic_springs_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SPHFluidSettings_linear_viscosity_get = _rpythonic_function_(		"SPHFluidSettings_linear_viscosity_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Scene_keying_sets_begin = _rpythonic_function_(		"Scene_keying_sets_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Scene_keying_sets_next = _rpythonic_function_(		"Scene_keying_sets_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Scene_keying_sets_end = _rpythonic_function_(		"Scene_keying_sets_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Scene_keying_sets_all_begin = _rpythonic_function_(		"Scene_keying_sets_all_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Scene_keying_sets_all_next = _rpythonic_function_(		"Scene_keying_sets_all_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Scene_keying_sets_all_end = _rpythonic_function_(		"Scene_keying_sets_all_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Scene_animation_data_get = _rpythonic_function_(		"Scene_animation_data_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Scene_use_audio_get = _rpythonic_function_(		"Scene_use_audio_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Scene_use_audio_scrub_get = _rpythonic_function_(		"Scene_use_audio_scrub_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Scene_use_audio_sync_get = _rpythonic_function_(		"Scene_use_audio_sync_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Scene_background_set_get = _rpythonic_function_(		"Scene_background_set_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Scene_object_bases_begin = _rpythonic_function_(		"Scene_object_bases_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Scene_object_bases_next = _rpythonic_function_(		"Scene_object_bases_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Scene_object_bases_end = _rpythonic_function_(		"Scene_object_bases_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Scene_camera_get = _rpythonic_function_(		"Scene_camera_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Scene_frame_current_get = _rpythonic_function_(		"Scene_frame_current_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Scene_frame_subframe_get = _rpythonic_function_(		"Scene_frame_subframe_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Scene_cursor_location_get = _rpythonic_function_(		"Scene_cursor_location_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

Scene_audio_distance_model_get = _rpythonic_function_(		"Scene_audio_distance_model_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Scene_audio_doppler_factor_get = _rpythonic_function_(		"Scene_audio_doppler_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Scene_frame_end_get = _rpythonic_function_(		"Scene_frame_end_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Scene_use_frame_drop_get = _rpythonic_function_(		"Scene_use_frame_drop_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Scene_frame_step_get = _rpythonic_function_(		"Scene_frame_step_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Scene_game_settings_get = _rpythonic_function_(		"Scene_game_settings_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Scene_use_gravity_get = _rpythonic_function_(		"Scene_use_gravity_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Scene_gravity_get = _rpythonic_function_(		"Scene_gravity_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

Scene_grease_pencil_get = _rpythonic_function_(		"Scene_grease_pencil_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Scene_layers_get = _rpythonic_function_(		"Scene_layers_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_int * 20 )),] )

Scene_is_nla_tweakmode_get = _rpythonic_function_(		"Scene_is_nla_tweakmode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Scene_node_tree_get = _rpythonic_function_(		"Scene_node_tree_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Scene_objects_begin = _rpythonic_function_(		"Scene_objects_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Scene_objects_next = _rpythonic_function_(		"Scene_objects_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Scene_objects_end = _rpythonic_function_(		"Scene_objects_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Scene_frame_preview_end_get = _rpythonic_function_(		"Scene_frame_preview_end_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Scene_frame_preview_start_get = _rpythonic_function_(		"Scene_frame_preview_start_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Scene_render_get = _rpythonic_function_(		"Scene_render_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Scene_sequence_editor_get = _rpythonic_function_(		"Scene_sequence_editor_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Scene_audio_doppler_speed_get = _rpythonic_function_(		"Scene_audio_doppler_speed_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Scene_use_stamp_note_get = _rpythonic_function_(		"Scene_use_stamp_note_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

Scene_use_stamp_note_length = _rpythonic_function_(		"Scene_use_stamp_note_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Scene_frame_start_get = _rpythonic_function_(		"Scene_frame_start_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Scene_sync_mode_get = _rpythonic_function_(		"Scene_sync_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Scene_timeline_markers_begin = _rpythonic_function_(		"Scene_timeline_markers_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Scene_timeline_markers_next = _rpythonic_function_(		"Scene_timeline_markers_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Scene_timeline_markers_end = _rpythonic_function_(		"Scene_timeline_markers_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Scene_tool_settings_get = _rpythonic_function_(		"Scene_tool_settings_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Scene_orientations_begin = _rpythonic_function_(		"Scene_orientations_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Scene_orientations_next = _rpythonic_function_(		"Scene_orientations_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Scene_orientations_end = _rpythonic_function_(		"Scene_orientations_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Scene_unit_settings_get = _rpythonic_function_(		"Scene_unit_settings_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Scene_use_nodes_get = _rpythonic_function_(		"Scene_use_nodes_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Scene_use_preview_range_get = _rpythonic_function_(		"Scene_use_preview_range_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Scene_audio_volume_get = _rpythonic_function_(		"Scene_audio_volume_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Scene_world_get = _rpythonic_function_(		"Scene_world_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneActuator_camera_get = _rpythonic_function_(		"SceneActuator_camera_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneActuator_mode_get = _rpythonic_function_(		"SceneActuator_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneActuator_scene_get = _rpythonic_function_(		"SceneActuator_scene_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneBases_rna_type_get = _rpythonic_function_(		"SceneBases_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneBases_active_get = _rpythonic_function_(		"SceneBases_active_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneGameData_rna_type_get = _rpythonic_function_(		"SceneGameData_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneGameData_use_activity_culling_get = _rpythonic_function_(		"SceneGameData_use_activity_culling_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneGameData_dome_angle_get = _rpythonic_function_(		"SceneGameData_dome_angle_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneGameData_use_auto_start_get = _rpythonic_function_(		"SceneGameData_use_auto_start_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneGameData_depth_get = _rpythonic_function_(		"SceneGameData_depth_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneGameData_dome_buffer_resolution_get = _rpythonic_function_(		"SceneGameData_dome_buffer_resolution_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneGameData_use_occlusion_culling_get = _rpythonic_function_(		"SceneGameData_use_occlusion_culling_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneGameData_use_deprecation_warnings_get = _rpythonic_function_(		"SceneGameData_use_deprecation_warnings_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneGameData_use_display_lists_get = _rpythonic_function_(		"SceneGameData_use_display_lists_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneGameData_dome_mode_get = _rpythonic_function_(		"SceneGameData_dome_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneGameData_stereo_eye_separation_get = _rpythonic_function_(		"SceneGameData_stereo_eye_separation_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneGameData_fps_get = _rpythonic_function_(		"SceneGameData_fps_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneGameData_frame_color_get = _rpythonic_function_(		"SceneGameData_frame_color_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

SceneGameData_frame_type_get = _rpythonic_function_(		"SceneGameData_frame_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneGameData_frequency_get = _rpythonic_function_(		"SceneGameData_frequency_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneGameData_show_fullscreen_get = _rpythonic_function_(		"SceneGameData_show_fullscreen_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneGameData_use_glsl_color_management_get = _rpythonic_function_(		"SceneGameData_use_glsl_color_management_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneGameData_use_glsl_extra_textures_get = _rpythonic_function_(		"SceneGameData_use_glsl_extra_textures_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneGameData_use_glsl_lights_get = _rpythonic_function_(		"SceneGameData_use_glsl_lights_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneGameData_use_glsl_nodes_get = _rpythonic_function_(		"SceneGameData_use_glsl_nodes_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneGameData_use_glsl_ramps_get = _rpythonic_function_(		"SceneGameData_use_glsl_ramps_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneGameData_use_glsl_shaders_get = _rpythonic_function_(		"SceneGameData_use_glsl_shaders_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneGameData_use_glsl_shadows_get = _rpythonic_function_(		"SceneGameData_use_glsl_shadows_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneGameData_material_mode_get = _rpythonic_function_(		"SceneGameData_material_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneGameData_logic_step_max_get = _rpythonic_function_(		"SceneGameData_logic_step_max_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneGameData_physics_step_max_get = _rpythonic_function_(		"SceneGameData_physics_step_max_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneGameData_occlusion_culling_resolution_get = _rpythonic_function_(		"SceneGameData_occlusion_culling_resolution_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneGameData_physics_engine_get = _rpythonic_function_(		"SceneGameData_physics_engine_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneGameData_physics_gravity_get = _rpythonic_function_(		"SceneGameData_physics_gravity_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneGameData_physics_step_sub_get = _rpythonic_function_(		"SceneGameData_physics_step_sub_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneGameData_use_animation_record_get = _rpythonic_function_(		"SceneGameData_use_animation_record_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneGameData_resolution_x_get = _rpythonic_function_(		"SceneGameData_resolution_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneGameData_resolution_y_get = _rpythonic_function_(		"SceneGameData_resolution_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneGameData_restrict_animation_updates_get = _rpythonic_function_(		"SceneGameData_restrict_animation_updates_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneGameData_show_debug_properties_get = _rpythonic_function_(		"SceneGameData_show_debug_properties_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneGameData_show_framerate_profile_get = _rpythonic_function_(		"SceneGameData_show_framerate_profile_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneGameData_show_mouse_get = _rpythonic_function_(		"SceneGameData_show_mouse_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneGameData_show_physics_visualization_get = _rpythonic_function_(		"SceneGameData_show_physics_visualization_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneGameData_stereo_mode_get = _rpythonic_function_(		"SceneGameData_stereo_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneGameData_stereo_get = _rpythonic_function_(		"SceneGameData_stereo_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneGameData_dome_tesselation_get = _rpythonic_function_(		"SceneGameData_dome_tesselation_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneGameData_dome_tilt_get = _rpythonic_function_(		"SceneGameData_dome_tilt_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneGameData_use_frame_rate_get = _rpythonic_function_(		"SceneGameData_use_frame_rate_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneGameData_dome_text_get = _rpythonic_function_(		"SceneGameData_dome_text_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneGameData_activity_culling_box_radius_get = _rpythonic_function_(		"SceneGameData_activity_culling_box_radius_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneObjects_rna_type_get = _rpythonic_function_(		"SceneObjects_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneObjects_active_get = _rpythonic_function_(		"SceneObjects_active_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneRenderLayer_rna_type_get = _rpythonic_function_(		"SceneRenderLayer_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneRenderLayer_name_get = _rpythonic_function_(		"SceneRenderLayer_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

SceneRenderLayer_name_length = _rpythonic_function_(		"SceneRenderLayer_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneRenderLayer_use_pass_ambient_occlusion_get = _rpythonic_function_(		"SceneRenderLayer_use_pass_ambient_occlusion_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneRenderLayer_exclude_ambient_occlusion_get = _rpythonic_function_(		"SceneRenderLayer_exclude_ambient_occlusion_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneRenderLayer_use_all_z_get = _rpythonic_function_(		"SceneRenderLayer_use_all_z_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneRenderLayer_use_pass_color_get = _rpythonic_function_(		"SceneRenderLayer_use_pass_color_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneRenderLayer_use_pass_combined_get = _rpythonic_function_(		"SceneRenderLayer_use_pass_combined_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneRenderLayer_use_pass_diffuse_get = _rpythonic_function_(		"SceneRenderLayer_use_pass_diffuse_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneRenderLayer_use_edge_enhance_get = _rpythonic_function_(		"SceneRenderLayer_use_edge_enhance_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneRenderLayer_use_pass_emit_get = _rpythonic_function_(		"SceneRenderLayer_use_pass_emit_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneRenderLayer_exclude_emit_get = _rpythonic_function_(		"SceneRenderLayer_exclude_emit_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneRenderLayer_use_get = _rpythonic_function_(		"SceneRenderLayer_use_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneRenderLayer_use_pass_environment_get = _rpythonic_function_(		"SceneRenderLayer_use_pass_environment_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneRenderLayer_exclude_environment_get = _rpythonic_function_(		"SceneRenderLayer_exclude_environment_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneRenderLayer_use_halo_get = _rpythonic_function_(		"SceneRenderLayer_use_halo_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneRenderLayer_use_pass_indirect_get = _rpythonic_function_(		"SceneRenderLayer_use_pass_indirect_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneRenderLayer_exclude_indirect_get = _rpythonic_function_(		"SceneRenderLayer_exclude_indirect_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneRenderLayer_light_override_get = _rpythonic_function_(		"SceneRenderLayer_light_override_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneRenderLayer_use_pass_material_index_get = _rpythonic_function_(		"SceneRenderLayer_use_pass_material_index_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneRenderLayer_material_override_get = _rpythonic_function_(		"SceneRenderLayer_material_override_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneRenderLayer_use_pass_mist_get = _rpythonic_function_(		"SceneRenderLayer_use_pass_mist_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneRenderLayer_use_pass_normal_get = _rpythonic_function_(		"SceneRenderLayer_use_pass_normal_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneRenderLayer_use_pass_object_index_get = _rpythonic_function_(		"SceneRenderLayer_use_pass_object_index_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneRenderLayer_use_pass_reflection_get = _rpythonic_function_(		"SceneRenderLayer_use_pass_reflection_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneRenderLayer_exclude_reflection_get = _rpythonic_function_(		"SceneRenderLayer_exclude_reflection_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneRenderLayer_use_pass_refraction_get = _rpythonic_function_(		"SceneRenderLayer_use_pass_refraction_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneRenderLayer_exclude_refraction_get = _rpythonic_function_(		"SceneRenderLayer_exclude_refraction_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneRenderLayer_use_pass_shadow_get = _rpythonic_function_(		"SceneRenderLayer_use_pass_shadow_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneRenderLayer_exclude_shadow_get = _rpythonic_function_(		"SceneRenderLayer_exclude_shadow_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneRenderLayer_use_sky_get = _rpythonic_function_(		"SceneRenderLayer_use_sky_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneRenderLayer_use_solid_get = _rpythonic_function_(		"SceneRenderLayer_use_solid_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneRenderLayer_use_pass_specular_get = _rpythonic_function_(		"SceneRenderLayer_use_pass_specular_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneRenderLayer_exclude_specular_get = _rpythonic_function_(		"SceneRenderLayer_exclude_specular_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneRenderLayer_use_strand_get = _rpythonic_function_(		"SceneRenderLayer_use_strand_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneRenderLayer_use_pass_uv_get = _rpythonic_function_(		"SceneRenderLayer_use_pass_uv_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneRenderLayer_use_pass_vector_get = _rpythonic_function_(		"SceneRenderLayer_use_pass_vector_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneRenderLayer_layers_get = _rpythonic_function_(		"SceneRenderLayer_layers_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_int * 20 )),] )

SceneRenderLayer_use_pass_z_get = _rpythonic_function_(		"SceneRenderLayer_use_pass_z_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneRenderLayer_use_ztransp_get = _rpythonic_function_(		"SceneRenderLayer_use_ztransp_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneRenderLayer_use_zmask_get = _rpythonic_function_(		"SceneRenderLayer_use_zmask_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneRenderLayer_layers_zmask_get = _rpythonic_function_(		"SceneRenderLayer_layers_zmask_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_int * 20 )),] )

SceneRenderLayer_invert_zmask_get = _rpythonic_function_(		"SceneRenderLayer_invert_zmask_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneSequence_animation_offset_end_get = _rpythonic_function_(		"SceneSequence_animation_offset_end_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneSequence_animation_offset_start_get = _rpythonic_function_(		"SceneSequence_animation_offset_start_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneSequence_scene_camera_get = _rpythonic_function_(		"SceneSequence_scene_camera_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneSequence_color_balance_get = _rpythonic_function_(		"SceneSequence_color_balance_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneSequence_use_float_get = _rpythonic_function_(		"SceneSequence_use_float_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneSequence_crop_get = _rpythonic_function_(		"SceneSequence_crop_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneSequence_use_deinterlace_get = _rpythonic_function_(		"SceneSequence_use_deinterlace_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneSequence_use_reverse_frames_get = _rpythonic_function_(		"SceneSequence_use_reverse_frames_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneSequence_use_flip_x_get = _rpythonic_function_(		"SceneSequence_use_flip_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneSequence_use_flip_y_get = _rpythonic_function_(		"SceneSequence_use_flip_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneSequence_color_multiply_get = _rpythonic_function_(		"SceneSequence_color_multiply_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneSequence_use_premultiply_get = _rpythonic_function_(		"SceneSequence_use_premultiply_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneSequence_proxy_get = _rpythonic_function_(		"SceneSequence_proxy_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneSequence_use_proxy_custom_directory_get = _rpythonic_function_(		"SceneSequence_use_proxy_custom_directory_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneSequence_use_proxy_custom_file_get = _rpythonic_function_(		"SceneSequence_use_proxy_custom_file_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneSequence_color_saturation_get = _rpythonic_function_(		"SceneSequence_color_saturation_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneSequence_scene_get = _rpythonic_function_(		"SceneSequence_scene_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneSequence_strobe_get = _rpythonic_function_(		"SceneSequence_strobe_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneSequence_transform_get = _rpythonic_function_(		"SceneSequence_transform_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneSequence_use_color_balance_get = _rpythonic_function_(		"SceneSequence_use_color_balance_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneSequence_use_crop_get = _rpythonic_function_(		"SceneSequence_use_crop_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneSequence_use_proxy_get = _rpythonic_function_(		"SceneSequence_use_proxy_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SceneSequence_use_translation_get = _rpythonic_function_(		"SceneSequence_use_translation_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Scopes_rna_type_get = _rpythonic_function_(		"Scopes_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Scopes_accuracy_get = _rpythonic_function_(		"Scopes_accuracy_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Scopes_use_full_resolution_get = _rpythonic_function_(		"Scopes_use_full_resolution_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Scopes_histogram_get = _rpythonic_function_(		"Scopes_histogram_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Scopes_vectorscope_alpha_get = _rpythonic_function_(		"Scopes_vectorscope_alpha_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Scopes_waveform_mode_get = _rpythonic_function_(		"Scopes_waveform_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Scopes_waveform_alpha_get = _rpythonic_function_(		"Scopes_waveform_alpha_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Screen_use_play_3d_editors_get = _rpythonic_function_(		"Screen_use_play_3d_editors_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Screen_use_play_animation_editors_get = _rpythonic_function_(		"Screen_use_play_animation_editors_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Screen_is_animation_playing_get = _rpythonic_function_(		"Screen_is_animation_playing_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Screen_areas_begin = _rpythonic_function_(		"Screen_areas_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Screen_areas_next = _rpythonic_function_(		"Screen_areas_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Screen_areas_end = _rpythonic_function_(		"Screen_areas_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Screen_show_fullscreen_get = _rpythonic_function_(		"Screen_show_fullscreen_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Screen_use_play_image_editors_get = _rpythonic_function_(		"Screen_use_play_image_editors_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Screen_use_play_node_editors_get = _rpythonic_function_(		"Screen_use_play_node_editors_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Screen_use_play_properties_editors_get = _rpythonic_function_(		"Screen_use_play_properties_editors_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Screen_scene_get = _rpythonic_function_(		"Screen_scene_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Screen_use_play_sequence_editors_get = _rpythonic_function_(		"Screen_use_play_sequence_editors_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Screen_use_play_top_left_3d_editor_get = _rpythonic_function_(		"Screen_use_play_top_left_3d_editor_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ScrewModifier_angle_get = _rpythonic_function_(		"ScrewModifier_angle_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ScrewModifier_axis_get = _rpythonic_function_(		"ScrewModifier_axis_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ScrewModifier_use_normal_calculate_get = _rpythonic_function_(		"ScrewModifier_use_normal_calculate_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ScrewModifier_use_normal_flip_get = _rpythonic_function_(		"ScrewModifier_use_normal_flip_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ScrewModifier_iterations_get = _rpythonic_function_(		"ScrewModifier_iterations_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ScrewModifier_object_get = _rpythonic_function_(		"ScrewModifier_object_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ScrewModifier_use_object_screw_offset_get = _rpythonic_function_(		"ScrewModifier_use_object_screw_offset_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ScrewModifier_render_steps_get = _rpythonic_function_(		"ScrewModifier_render_steps_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ScrewModifier_screw_offset_get = _rpythonic_function_(		"ScrewModifier_screw_offset_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ScrewModifier_steps_get = _rpythonic_function_(		"ScrewModifier_steps_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sculpt_lock_x_get = _rpythonic_function_(		"Sculpt_lock_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sculpt_lock_y_get = _rpythonic_function_(		"Sculpt_lock_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sculpt_lock_z_get = _rpythonic_function_(		"Sculpt_lock_z_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sculpt_radial_symmetry_get = _rpythonic_function_(		"Sculpt_radial_symmetry_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_int * 3 )),] )

Sculpt_use_symmetry_feather_get = _rpythonic_function_(		"Sculpt_use_symmetry_feather_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sculpt_use_symmetry_x_get = _rpythonic_function_(		"Sculpt_use_symmetry_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sculpt_use_symmetry_y_get = _rpythonic_function_(		"Sculpt_use_symmetry_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sculpt_use_symmetry_z_get = _rpythonic_function_(		"Sculpt_use_symmetry_z_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sculpt_use_deform_only_get = _rpythonic_function_(		"Sculpt_use_deform_only_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sculpt_use_threaded_get = _rpythonic_function_(		"Sculpt_use_threaded_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sensor_rna_type_get = _rpythonic_function_(		"Sensor_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sensor_name_get = _rpythonic_function_(		"Sensor_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

Sensor_name_length = _rpythonic_function_(		"Sensor_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sensor_show_expanded_get = _rpythonic_function_(		"Sensor_show_expanded_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sensor_frequency_get = _rpythonic_function_(		"Sensor_frequency_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sensor_invert_get = _rpythonic_function_(		"Sensor_invert_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sensor_use_level_get = _rpythonic_function_(		"Sensor_use_level_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sensor_pin_get = _rpythonic_function_(		"Sensor_pin_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sensor_use_pulse_false_level_get = _rpythonic_function_(		"Sensor_use_pulse_false_level_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sensor_use_pulse_true_level_get = _rpythonic_function_(		"Sensor_use_pulse_true_level_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sensor_use_tap_get = _rpythonic_function_(		"Sensor_use_tap_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sensor_type_get = _rpythonic_function_(		"Sensor_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sequence_rna_type_get = _rpythonic_function_(		"Sequence_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sequence_name_get = _rpythonic_function_(		"Sequence_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

Sequence_name_length = _rpythonic_function_(		"Sequence_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sequence_blend_type_get = _rpythonic_function_(		"Sequence_blend_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sequence_blend_alpha_get = _rpythonic_function_(		"Sequence_blend_alpha_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sequence_channel_get = _rpythonic_function_(		"Sequence_channel_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sequence_waveform_get = _rpythonic_function_(		"Sequence_waveform_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sequence_effect_fader_get = _rpythonic_function_(		"Sequence_effect_fader_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sequence_frame_final_end_get = _rpythonic_function_(		"Sequence_frame_final_end_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sequence_frame_offset_end_get = _rpythonic_function_(		"Sequence_frame_offset_end_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sequence_frame_still_end_get = _rpythonic_function_(		"Sequence_frame_still_end_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sequence_input_1_get = _rpythonic_function_(		"Sequence_input_1_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sequence_input_2_get = _rpythonic_function_(		"Sequence_input_2_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sequence_input_3_get = _rpythonic_function_(		"Sequence_input_3_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sequence_select_left_handle_get = _rpythonic_function_(		"Sequence_select_left_handle_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sequence_frame_final_duration_get = _rpythonic_function_(		"Sequence_frame_final_duration_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sequence_frame_duration_get = _rpythonic_function_(		"Sequence_frame_duration_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sequence_lock_get = _rpythonic_function_(		"Sequence_lock_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sequence_mute_get = _rpythonic_function_(		"Sequence_mute_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sequence_select_right_handle_get = _rpythonic_function_(		"Sequence_select_right_handle_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sequence_select_get = _rpythonic_function_(		"Sequence_select_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sequence_speed_factor_get = _rpythonic_function_(		"Sequence_speed_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sequence_frame_start_get = _rpythonic_function_(		"Sequence_frame_start_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sequence_frame_final_start_get = _rpythonic_function_(		"Sequence_frame_final_start_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sequence_frame_offset_start_get = _rpythonic_function_(		"Sequence_frame_offset_start_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sequence_frame_still_start_get = _rpythonic_function_(		"Sequence_frame_still_start_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sequence_type_get = _rpythonic_function_(		"Sequence_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sequence_use_default_fade_get = _rpythonic_function_(		"Sequence_use_default_fade_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sequence_input_count_get = _rpythonic_function_(		"Sequence_input_count_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SequenceColorBalance_rna_type_get = _rpythonic_function_(		"SequenceColorBalance_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SequenceColorBalance_gain_get = _rpythonic_function_(		"SequenceColorBalance_gain_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

SequenceColorBalance_gamma_get = _rpythonic_function_(		"SequenceColorBalance_gamma_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

SequenceColorBalance_invert_gain_get = _rpythonic_function_(		"SequenceColorBalance_invert_gain_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SequenceColorBalance_invert_gamma_get = _rpythonic_function_(		"SequenceColorBalance_invert_gamma_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SequenceColorBalance_invert_lift_get = _rpythonic_function_(		"SequenceColorBalance_invert_lift_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SequenceColorBalance_lift_get = _rpythonic_function_(		"SequenceColorBalance_lift_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

SequenceCrop_rna_type_get = _rpythonic_function_(		"SequenceCrop_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SequenceCrop_min_y_get = _rpythonic_function_(		"SequenceCrop_min_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SequenceCrop_min_x_get = _rpythonic_function_(		"SequenceCrop_min_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SequenceCrop_max_x_get = _rpythonic_function_(		"SequenceCrop_max_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SequenceCrop_max_y_get = _rpythonic_function_(		"SequenceCrop_max_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SequenceEditor_rna_type_get = _rpythonic_function_(		"SequenceEditor_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SequenceEditor_overlay_frame_get = _rpythonic_function_(		"SequenceEditor_overlay_frame_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SequenceEditor_show_overlay_get = _rpythonic_function_(		"SequenceEditor_show_overlay_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SequenceEditor_meta_stack_begin = _rpythonic_function_(		"SequenceEditor_meta_stack_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SequenceEditor_meta_stack_next = _rpythonic_function_(		"SequenceEditor_meta_stack_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

SequenceEditor_meta_stack_end = _rpythonic_function_(		"SequenceEditor_meta_stack_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

SequenceEditor_overlay_lock_get = _rpythonic_function_(		"SequenceEditor_overlay_lock_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SequenceEditor_sequences_begin = _rpythonic_function_(		"SequenceEditor_sequences_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SequenceEditor_sequences_next = _rpythonic_function_(		"SequenceEditor_sequences_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

SequenceEditor_sequences_end = _rpythonic_function_(		"SequenceEditor_sequences_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

SequenceEditor_sequences_all_begin = _rpythonic_function_(		"SequenceEditor_sequences_all_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SequenceEditor_sequences_all_next = _rpythonic_function_(		"SequenceEditor_sequences_all_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

SequenceEditor_sequences_all_end = _rpythonic_function_(		"SequenceEditor_sequences_all_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

SequenceEditor_active_strip_get = _rpythonic_function_(		"SequenceEditor_active_strip_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SequenceElement_rna_type_get = _rpythonic_function_(		"SequenceElement_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SequenceElement_filename_get = _rpythonic_function_(		"SequenceElement_filename_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

SequenceElement_filename_length = _rpythonic_function_(		"SequenceElement_filename_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SequenceElement_orig_height_get = _rpythonic_function_(		"SequenceElement_orig_height_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SequenceElement_orig_width_get = _rpythonic_function_(		"SequenceElement_orig_width_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SequenceProxy_rna_type_get = _rpythonic_function_(		"SequenceProxy_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SequenceProxy_build_100_get = _rpythonic_function_(		"SequenceProxy_build_100_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SequenceProxy_build_25_get = _rpythonic_function_(		"SequenceProxy_build_25_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SequenceProxy_build_50_get = _rpythonic_function_(		"SequenceProxy_build_50_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SequenceProxy_build_75_get = _rpythonic_function_(		"SequenceProxy_build_75_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SequenceProxy_directory_get = _rpythonic_function_(		"SequenceProxy_directory_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

SequenceProxy_directory_length = _rpythonic_function_(		"SequenceProxy_directory_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SequenceProxy_build_free_run_get = _rpythonic_function_(		"SequenceProxy_build_free_run_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SequenceProxy_build_free_run_rec_date_get = _rpythonic_function_(		"SequenceProxy_build_free_run_rec_date_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SequenceProxy_filepath_get = _rpythonic_function_(		"SequenceProxy_filepath_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

SequenceProxy_filepath_length = _rpythonic_function_(		"SequenceProxy_filepath_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SequenceProxy_quality_get = _rpythonic_function_(		"SequenceProxy_quality_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SequenceProxy_build_record_run_get = _rpythonic_function_(		"SequenceProxy_build_record_run_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SequenceProxy_timecode_get = _rpythonic_function_(		"SequenceProxy_timecode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SequenceTransform_rna_type_get = _rpythonic_function_(		"SequenceTransform_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SequenceTransform_offset_x_get = _rpythonic_function_(		"SequenceTransform_offset_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SequenceTransform_offset_y_get = _rpythonic_function_(		"SequenceTransform_offset_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShaderNode_type_get = _rpythonic_function_(		"ShaderNode_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShaderNodeExtendedMaterial_use_diffuse_get = _rpythonic_function_(		"ShaderNodeExtendedMaterial_use_diffuse_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShaderNodeExtendedMaterial_invert_normal_get = _rpythonic_function_(		"ShaderNodeExtendedMaterial_invert_normal_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShaderNodeExtendedMaterial_material_get = _rpythonic_function_(		"ShaderNodeExtendedMaterial_material_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShaderNodeExtendedMaterial_use_specular_get = _rpythonic_function_(		"ShaderNodeExtendedMaterial_use_specular_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShaderNodeGeometry_uv_layer_get = _rpythonic_function_(		"ShaderNodeGeometry_uv_layer_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ShaderNodeGeometry_uv_layer_length = _rpythonic_function_(		"ShaderNodeGeometry_uv_layer_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShaderNodeGeometry_color_layer_get = _rpythonic_function_(		"ShaderNodeGeometry_color_layer_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ShaderNodeGeometry_color_layer_length = _rpythonic_function_(		"ShaderNodeGeometry_color_layer_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShaderNodeMapping_use_max_get = _rpythonic_function_(		"ShaderNodeMapping_use_max_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShaderNodeMapping_use_min_get = _rpythonic_function_(		"ShaderNodeMapping_use_min_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShaderNodeMapping_location_get = _rpythonic_function_(		"ShaderNodeMapping_location_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ShaderNodeMapping_max_get = _rpythonic_function_(		"ShaderNodeMapping_max_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ShaderNodeMapping_min_get = _rpythonic_function_(		"ShaderNodeMapping_min_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ShaderNodeMapping_rotation_get = _rpythonic_function_(		"ShaderNodeMapping_rotation_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ShaderNodeMapping_scale_get = _rpythonic_function_(		"ShaderNodeMapping_scale_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ShaderNodeMaterial_use_diffuse_get = _rpythonic_function_(		"ShaderNodeMaterial_use_diffuse_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShaderNodeMaterial_invert_normal_get = _rpythonic_function_(		"ShaderNodeMaterial_invert_normal_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShaderNodeMaterial_material_get = _rpythonic_function_(		"ShaderNodeMaterial_material_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShaderNodeMaterial_use_specular_get = _rpythonic_function_(		"ShaderNodeMaterial_use_specular_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShaderNodeMath_operation_get = _rpythonic_function_(		"ShaderNodeMath_operation_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShaderNodeMixRGB_use_alpha_get = _rpythonic_function_(		"ShaderNodeMixRGB_use_alpha_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShaderNodeMixRGB_blend_type_get = _rpythonic_function_(		"ShaderNodeMixRGB_blend_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShaderNodeRGBCurve_mapping_get = _rpythonic_function_(		"ShaderNodeRGBCurve_mapping_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShaderNodeTexture_node_output_get = _rpythonic_function_(		"ShaderNodeTexture_node_output_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShaderNodeTexture_texture_get = _rpythonic_function_(		"ShaderNodeTexture_texture_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShaderNodeTree_nodes_begin = _rpythonic_function_(		"ShaderNodeTree_nodes_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShaderNodeTree_nodes_next = _rpythonic_function_(		"ShaderNodeTree_nodes_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

ShaderNodeTree_nodes_end = _rpythonic_function_(		"ShaderNodeTree_nodes_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

ShaderNodeValToRGB_color_ramp_get = _rpythonic_function_(		"ShaderNodeValToRGB_color_ramp_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShaderNodeVectorCurve_mapping_get = _rpythonic_function_(		"ShaderNodeVectorCurve_mapping_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShaderNodeVectorMath_operation_get = _rpythonic_function_(		"ShaderNodeVectorMath_operation_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShaderNodes_rna_type_get = _rpythonic_function_(		"ShaderNodes_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShapeActionActuator_action_get = _rpythonic_function_(		"ShapeActionActuator_action_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShapeActionActuator_mode_get = _rpythonic_function_(		"ShapeActionActuator_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShapeActionActuator_frame_blend_in_get = _rpythonic_function_(		"ShapeActionActuator_frame_blend_in_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShapeActionActuator_use_continue_last_frame_get = _rpythonic_function_(		"ShapeActionActuator_use_continue_last_frame_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShapeActionActuator_frame_end_get = _rpythonic_function_(		"ShapeActionActuator_frame_end_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShapeActionActuator_frame_property_get = _rpythonic_function_(		"ShapeActionActuator_frame_property_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ShapeActionActuator_frame_property_length = _rpythonic_function_(		"ShapeActionActuator_frame_property_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShapeActionActuator_priority_get = _rpythonic_function_(		"ShapeActionActuator_priority_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShapeActionActuator_property_get = _rpythonic_function_(		"ShapeActionActuator_property_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ShapeActionActuator_property_length = _rpythonic_function_(		"ShapeActionActuator_property_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShapeActionActuator_frame_start_get = _rpythonic_function_(		"ShapeActionActuator_frame_start_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShapeKey_rna_type_get = _rpythonic_function_(		"ShapeKey_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShapeKey_name_get = _rpythonic_function_(		"ShapeKey_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ShapeKey_name_length = _rpythonic_function_(		"ShapeKey_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShapeKey_data_begin = _rpythonic_function_(		"ShapeKey_data_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShapeKey_data_next = _rpythonic_function_(		"ShapeKey_data_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

ShapeKey_data_end = _rpythonic_function_(		"ShapeKey_data_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

ShapeKey_frame_get = _rpythonic_function_(		"ShapeKey_frame_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShapeKey_interpolation_get = _rpythonic_function_(		"ShapeKey_interpolation_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShapeKey_mute_get = _rpythonic_function_(		"ShapeKey_mute_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShapeKey_relative_key_get = _rpythonic_function_(		"ShapeKey_relative_key_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShapeKey_slider_max_get = _rpythonic_function_(		"ShapeKey_slider_max_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShapeKey_slider_min_get = _rpythonic_function_(		"ShapeKey_slider_min_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShapeKey_value_get = _rpythonic_function_(		"ShapeKey_value_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShapeKey_vertex_group_get = _rpythonic_function_(		"ShapeKey_vertex_group_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ShapeKey_vertex_group_length = _rpythonic_function_(		"ShapeKey_vertex_group_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShapeKeyBezierPoint_rna_type_get = _rpythonic_function_(		"ShapeKeyBezierPoint_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShapeKeyBezierPoint_handle_left_get = _rpythonic_function_(		"ShapeKeyBezierPoint_handle_left_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ShapeKeyBezierPoint_handle_right_get = _rpythonic_function_(		"ShapeKeyBezierPoint_handle_right_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ShapeKeyBezierPoint_co_get = _rpythonic_function_(		"ShapeKeyBezierPoint_co_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ShapeKeyCurvePoint_rna_type_get = _rpythonic_function_(		"ShapeKeyCurvePoint_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShapeKeyCurvePoint_co_get = _rpythonic_function_(		"ShapeKeyCurvePoint_co_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ShapeKeyCurvePoint_tilt_get = _rpythonic_function_(		"ShapeKeyCurvePoint_tilt_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShapeKeyPoint_rna_type_get = _rpythonic_function_(		"ShapeKeyPoint_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShapeKeyPoint_co_get = _rpythonic_function_(		"ShapeKeyPoint_co_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ShrinkwrapConstraint_use_x_get = _rpythonic_function_(		"ShrinkwrapConstraint_use_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShrinkwrapConstraint_use_y_get = _rpythonic_function_(		"ShrinkwrapConstraint_use_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShrinkwrapConstraint_use_z_get = _rpythonic_function_(		"ShrinkwrapConstraint_use_z_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShrinkwrapConstraint_distance_get = _rpythonic_function_(		"ShrinkwrapConstraint_distance_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShrinkwrapConstraint_shrinkwrap_type_get = _rpythonic_function_(		"ShrinkwrapConstraint_shrinkwrap_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShrinkwrapConstraint_target_get = _rpythonic_function_(		"ShrinkwrapConstraint_target_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShrinkwrapModifier_auxiliary_target_get = _rpythonic_function_(		"ShrinkwrapModifier_auxiliary_target_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShrinkwrapModifier_cull_face_get = _rpythonic_function_(		"ShrinkwrapModifier_cull_face_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShrinkwrapModifier_use_keep_above_surface_get = _rpythonic_function_(		"ShrinkwrapModifier_use_keep_above_surface_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShrinkwrapModifier_wrap_method_get = _rpythonic_function_(		"ShrinkwrapModifier_wrap_method_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShrinkwrapModifier_use_negative_direction_get = _rpythonic_function_(		"ShrinkwrapModifier_use_negative_direction_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShrinkwrapModifier_offset_get = _rpythonic_function_(		"ShrinkwrapModifier_offset_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShrinkwrapModifier_use_positive_direction_get = _rpythonic_function_(		"ShrinkwrapModifier_use_positive_direction_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShrinkwrapModifier_subsurf_levels_get = _rpythonic_function_(		"ShrinkwrapModifier_subsurf_levels_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShrinkwrapModifier_target_get = _rpythonic_function_(		"ShrinkwrapModifier_target_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShrinkwrapModifier_vertex_group_get = _rpythonic_function_(		"ShrinkwrapModifier_vertex_group_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ShrinkwrapModifier_vertex_group_length = _rpythonic_function_(		"ShrinkwrapModifier_vertex_group_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShrinkwrapModifier_use_project_x_get = _rpythonic_function_(		"ShrinkwrapModifier_use_project_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShrinkwrapModifier_use_project_y_get = _rpythonic_function_(		"ShrinkwrapModifier_use_project_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ShrinkwrapModifier_use_project_z_get = _rpythonic_function_(		"ShrinkwrapModifier_use_project_z_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SimpleDeformModifier_factor_get = _rpythonic_function_(		"SimpleDeformModifier_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SimpleDeformModifier_limits_get = _rpythonic_function_(		"SimpleDeformModifier_limits_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 2 )),] )

SimpleDeformModifier_lock_x_get = _rpythonic_function_(		"SimpleDeformModifier_lock_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SimpleDeformModifier_lock_y_get = _rpythonic_function_(		"SimpleDeformModifier_lock_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SimpleDeformModifier_deform_method_get = _rpythonic_function_(		"SimpleDeformModifier_deform_method_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SimpleDeformModifier_origin_get = _rpythonic_function_(		"SimpleDeformModifier_origin_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SimpleDeformModifier_use_relative_get = _rpythonic_function_(		"SimpleDeformModifier_use_relative_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SimpleDeformModifier_vertex_group_get = _rpythonic_function_(		"SimpleDeformModifier_vertex_group_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

SimpleDeformModifier_vertex_group_length = _rpythonic_function_(		"SimpleDeformModifier_vertex_group_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SmokeCollSettings_rna_type_get = _rpythonic_function_(		"SmokeCollSettings_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SmokeDomainSettings_rna_type_get = _rpythonic_function_(		"SmokeDomainSettings_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SmokeDomainSettings_amplify_get = _rpythonic_function_(		"SmokeDomainSettings_amplify_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SmokeDomainSettings_collision_extents_get = _rpythonic_function_(		"SmokeDomainSettings_collision_extents_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SmokeDomainSettings_point_cache_compress_type_get = _rpythonic_function_(		"SmokeDomainSettings_point_cache_compress_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SmokeDomainSettings_collision_group_get = _rpythonic_function_(		"SmokeDomainSettings_collision_group_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SmokeDomainSettings_alpha_get = _rpythonic_function_(		"SmokeDomainSettings_alpha_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SmokeDomainSettings_use_dissolve_smoke_get = _rpythonic_function_(		"SmokeDomainSettings_use_dissolve_smoke_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SmokeDomainSettings_dissolve_speed_get = _rpythonic_function_(		"SmokeDomainSettings_dissolve_speed_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SmokeDomainSettings_effector_group_get = _rpythonic_function_(		"SmokeDomainSettings_effector_group_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SmokeDomainSettings_effector_weights_get = _rpythonic_function_(		"SmokeDomainSettings_effector_weights_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SmokeDomainSettings_fluid_group_get = _rpythonic_function_(		"SmokeDomainSettings_fluid_group_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SmokeDomainSettings_beta_get = _rpythonic_function_(		"SmokeDomainSettings_beta_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SmokeDomainSettings_use_high_resolution_get = _rpythonic_function_(		"SmokeDomainSettings_use_high_resolution_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SmokeDomainSettings_use_dissolve_smoke_log_get = _rpythonic_function_(		"SmokeDomainSettings_use_dissolve_smoke_log_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SmokeDomainSettings_resolution_max_get = _rpythonic_function_(		"SmokeDomainSettings_resolution_max_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SmokeDomainSettings_noise_type_get = _rpythonic_function_(		"SmokeDomainSettings_noise_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SmokeDomainSettings_point_cache_get = _rpythonic_function_(		"SmokeDomainSettings_point_cache_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SmokeDomainSettings_show_high_resolution_get = _rpythonic_function_(		"SmokeDomainSettings_show_high_resolution_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SmokeDomainSettings_smooth_emitter_get = _rpythonic_function_(		"SmokeDomainSettings_smooth_emitter_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SmokeDomainSettings_strength_get = _rpythonic_function_(		"SmokeDomainSettings_strength_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SmokeDomainSettings_time_scale_get = _rpythonic_function_(		"SmokeDomainSettings_time_scale_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SmokeDomainSettings_vorticity_get = _rpythonic_function_(		"SmokeDomainSettings_vorticity_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SmokeFlowSettings_rna_type_get = _rpythonic_function_(		"SmokeFlowSettings_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SmokeFlowSettings_use_absolute_get = _rpythonic_function_(		"SmokeFlowSettings_use_absolute_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SmokeFlowSettings_density_get = _rpythonic_function_(		"SmokeFlowSettings_density_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SmokeFlowSettings_initial_velocity_get = _rpythonic_function_(		"SmokeFlowSettings_initial_velocity_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SmokeFlowSettings_velocity_factor_get = _rpythonic_function_(		"SmokeFlowSettings_velocity_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SmokeFlowSettings_use_outflow_get = _rpythonic_function_(		"SmokeFlowSettings_use_outflow_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SmokeFlowSettings_particle_system_get = _rpythonic_function_(		"SmokeFlowSettings_particle_system_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SmokeFlowSettings_temperature_get = _rpythonic_function_(		"SmokeFlowSettings_temperature_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SmokeModifier_coll_settings_get = _rpythonic_function_(		"SmokeModifier_coll_settings_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SmokeModifier_domain_settings_get = _rpythonic_function_(		"SmokeModifier_domain_settings_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SmokeModifier_flow_settings_get = _rpythonic_function_(		"SmokeModifier_flow_settings_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SmokeModifier_smoke_type_get = _rpythonic_function_(		"SmokeModifier_smoke_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SmoothModifier_factor_get = _rpythonic_function_(		"SmoothModifier_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SmoothModifier_iterations_get = _rpythonic_function_(		"SmoothModifier_iterations_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SmoothModifier_vertex_group_get = _rpythonic_function_(		"SmoothModifier_vertex_group_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

SmoothModifier_vertex_group_length = _rpythonic_function_(		"SmoothModifier_vertex_group_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SmoothModifier_use_x_get = _rpythonic_function_(		"SmoothModifier_use_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SmoothModifier_use_y_get = _rpythonic_function_(		"SmoothModifier_use_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SmoothModifier_use_z_get = _rpythonic_function_(		"SmoothModifier_use_z_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoftBodyModifier_point_cache_get = _rpythonic_function_(		"SoftBodyModifier_point_cache_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoftBodyModifier_settings_get = _rpythonic_function_(		"SoftBodyModifier_settings_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoftBodySettings_rna_type_get = _rpythonic_function_(		"SoftBodySettings_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoftBodySettings_aero_get = _rpythonic_function_(		"SoftBodySettings_aero_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoftBodySettings_aerodynamics_type_get = _rpythonic_function_(		"SoftBodySettings_aerodynamics_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoftBodySettings_ball_size_get = _rpythonic_function_(		"SoftBodySettings_ball_size_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoftBodySettings_ball_stiff_get = _rpythonic_function_(		"SoftBodySettings_ball_stiff_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoftBodySettings_ball_damp_get = _rpythonic_function_(		"SoftBodySettings_ball_damp_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoftBodySettings_bend_get = _rpythonic_function_(		"SoftBodySettings_bend_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoftBodySettings_location_mass_center_get = _rpythonic_function_(		"SoftBodySettings_location_mass_center_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

SoftBodySettings_choke_get = _rpythonic_function_(		"SoftBodySettings_choke_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoftBodySettings_collision_type_get = _rpythonic_function_(		"SoftBodySettings_collision_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoftBodySettings_damping_get = _rpythonic_function_(		"SoftBodySettings_damping_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoftBodySettings_use_edge_collision_get = _rpythonic_function_(		"SoftBodySettings_use_edge_collision_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoftBodySettings_effector_weights_get = _rpythonic_function_(		"SoftBodySettings_effector_weights_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoftBodySettings_error_threshold_get = _rpythonic_function_(		"SoftBodySettings_error_threshold_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoftBodySettings_use_estimate_matrix_get = _rpythonic_function_(		"SoftBodySettings_use_estimate_matrix_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoftBodySettings_use_face_collision_get = _rpythonic_function_(		"SoftBodySettings_use_face_collision_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoftBodySettings_friction_get = _rpythonic_function_(		"SoftBodySettings_friction_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoftBodySettings_fuzzy_get = _rpythonic_function_(		"SoftBodySettings_fuzzy_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoftBodySettings_goal_friction_get = _rpythonic_function_(		"SoftBodySettings_goal_friction_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoftBodySettings_goal_default_get = _rpythonic_function_(		"SoftBodySettings_goal_default_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoftBodySettings_goal_max_get = _rpythonic_function_(		"SoftBodySettings_goal_max_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoftBodySettings_goal_min_get = _rpythonic_function_(		"SoftBodySettings_goal_min_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoftBodySettings_goal_spring_get = _rpythonic_function_(		"SoftBodySettings_goal_spring_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoftBodySettings_vertex_group_goal_get = _rpythonic_function_(		"SoftBodySettings_vertex_group_goal_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

SoftBodySettings_vertex_group_goal_length = _rpythonic_function_(		"SoftBodySettings_vertex_group_goal_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoftBodySettings_gravity_get = _rpythonic_function_(		"SoftBodySettings_gravity_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoftBodySettings_mass_get = _rpythonic_function_(		"SoftBodySettings_mass_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoftBodySettings_vertex_group_mass_get = _rpythonic_function_(		"SoftBodySettings_vertex_group_mass_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

SoftBodySettings_vertex_group_mass_length = _rpythonic_function_(		"SoftBodySettings_vertex_group_mass_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoftBodySettings_step_max_get = _rpythonic_function_(		"SoftBodySettings_step_max_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoftBodySettings_step_min_get = _rpythonic_function_(		"SoftBodySettings_step_min_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoftBodySettings_plastic_get = _rpythonic_function_(		"SoftBodySettings_plastic_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoftBodySettings_use_diagnose_get = _rpythonic_function_(		"SoftBodySettings_use_diagnose_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoftBodySettings_pull_get = _rpythonic_function_(		"SoftBodySettings_pull_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoftBodySettings_push_get = _rpythonic_function_(		"SoftBodySettings_push_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoftBodySettings_rotation_estimate_get = _rpythonic_function_(		"SoftBodySettings_rotation_estimate_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 9 )),] )

SoftBodySettings_spring_length_get = _rpythonic_function_(		"SoftBodySettings_spring_length_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoftBodySettings_scale_estimate_get = _rpythonic_function_(		"SoftBodySettings_scale_estimate_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 9 )),] )

SoftBodySettings_use_self_collision_get = _rpythonic_function_(		"SoftBodySettings_use_self_collision_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoftBodySettings_shear_get = _rpythonic_function_(		"SoftBodySettings_shear_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoftBodySettings_speed_get = _rpythonic_function_(		"SoftBodySettings_speed_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoftBodySettings_vertex_group_spring_get = _rpythonic_function_(		"SoftBodySettings_vertex_group_spring_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

SoftBodySettings_vertex_group_spring_length = _rpythonic_function_(		"SoftBodySettings_vertex_group_spring_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoftBodySettings_use_stiff_quads_get = _rpythonic_function_(		"SoftBodySettings_use_stiff_quads_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoftBodySettings_use_edges_get = _rpythonic_function_(		"SoftBodySettings_use_edges_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoftBodySettings_use_goal_get = _rpythonic_function_(		"SoftBodySettings_use_goal_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoftBodySettings_use_auto_step_get = _rpythonic_function_(		"SoftBodySettings_use_auto_step_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SolidifyModifier_use_even_offset_get = _rpythonic_function_(		"SolidifyModifier_use_even_offset_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SolidifyModifier_use_rim_get = _rpythonic_function_(		"SolidifyModifier_use_rim_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SolidifyModifier_use_quality_normals_get = _rpythonic_function_(		"SolidifyModifier_use_quality_normals_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SolidifyModifier_edge_crease_inner_get = _rpythonic_function_(		"SolidifyModifier_edge_crease_inner_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SolidifyModifier_material_offset_get = _rpythonic_function_(		"SolidifyModifier_material_offset_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SolidifyModifier_offset_get = _rpythonic_function_(		"SolidifyModifier_offset_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SolidifyModifier_edge_crease_outer_get = _rpythonic_function_(		"SolidifyModifier_edge_crease_outer_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SolidifyModifier_edge_crease_rim_get = _rpythonic_function_(		"SolidifyModifier_edge_crease_rim_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SolidifyModifier_material_offset_rim_get = _rpythonic_function_(		"SolidifyModifier_material_offset_rim_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SolidifyModifier_thickness_get = _rpythonic_function_(		"SolidifyModifier_thickness_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SolidifyModifier_vertex_group_get = _rpythonic_function_(		"SolidifyModifier_vertex_group_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

SolidifyModifier_vertex_group_length = _rpythonic_function_(		"SolidifyModifier_vertex_group_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SolidifyModifier_thickness_vertex_group_get = _rpythonic_function_(		"SolidifyModifier_thickness_vertex_group_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SolidifyModifier_invert_vertex_group_get = _rpythonic_function_(		"SolidifyModifier_invert_vertex_group_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sound_use_memory_cache_get = _rpythonic_function_(		"Sound_use_memory_cache_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sound_filepath_get = _rpythonic_function_(		"Sound_filepath_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

Sound_filepath_length = _rpythonic_function_(		"Sound_filepath_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sound_mono_get = _rpythonic_function_(		"Sound_mono_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Sound_packed_file_get = _rpythonic_function_(		"Sound_packed_file_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoundActuator_use_sound_3d_get = _rpythonic_function_(		"SoundActuator_use_sound_3d_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoundActuator_cone_inner_angle_3d_get = _rpythonic_function_(		"SoundActuator_cone_inner_angle_3d_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoundActuator_cone_outer_angle_3d_get = _rpythonic_function_(		"SoundActuator_cone_outer_angle_3d_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoundActuator_cone_outer_gain_3d_get = _rpythonic_function_(		"SoundActuator_cone_outer_gain_3d_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoundActuator_distance_3d_max_get = _rpythonic_function_(		"SoundActuator_distance_3d_max_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoundActuator_gain_3d_max_get = _rpythonic_function_(		"SoundActuator_gain_3d_max_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoundActuator_gain_3d_min_get = _rpythonic_function_(		"SoundActuator_gain_3d_min_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoundActuator_pitch_get = _rpythonic_function_(		"SoundActuator_pitch_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoundActuator_mode_get = _rpythonic_function_(		"SoundActuator_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoundActuator_distance_3d_reference_get = _rpythonic_function_(		"SoundActuator_distance_3d_reference_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoundActuator_rolloff_factor_3d_get = _rpythonic_function_(		"SoundActuator_rolloff_factor_3d_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoundActuator_volume_get = _rpythonic_function_(		"SoundActuator_volume_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoundActuator_sound_get = _rpythonic_function_(		"SoundActuator_sound_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoundSequence_animation_offset_end_get = _rpythonic_function_(		"SoundSequence_animation_offset_end_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoundSequence_animation_offset_start_get = _rpythonic_function_(		"SoundSequence_animation_offset_start_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoundSequence_filepath_get = _rpythonic_function_(		"SoundSequence_filepath_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

SoundSequence_filepath_length = _rpythonic_function_(		"SoundSequence_filepath_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoundSequence_pan_get = _rpythonic_function_(		"SoundSequence_pan_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoundSequence_pitch_get = _rpythonic_function_(		"SoundSequence_pitch_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoundSequence_sound_get = _rpythonic_function_(		"SoundSequence_sound_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SoundSequence_volume_get = _rpythonic_function_(		"SoundSequence_volume_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Space_rna_type_get = _rpythonic_function_(		"Space_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Space_type_get = _rpythonic_function_(		"Space_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceConsole_font_size_get = _rpythonic_function_(		"SpaceConsole_font_size_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceConsole_history_begin = _rpythonic_function_(		"SpaceConsole_history_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceConsole_history_next = _rpythonic_function_(		"SpaceConsole_history_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

SpaceConsole_history_end = _rpythonic_function_(		"SpaceConsole_history_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

SpaceConsole_language_get = _rpythonic_function_(		"SpaceConsole_language_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

SpaceConsole_language_length = _rpythonic_function_(		"SpaceConsole_language_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceConsole_scrollback_begin = _rpythonic_function_(		"SpaceConsole_scrollback_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceConsole_scrollback_next = _rpythonic_function_(		"SpaceConsole_scrollback_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

SpaceConsole_scrollback_end = _rpythonic_function_(		"SpaceConsole_scrollback_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

SpaceConsole_prompt_get = _rpythonic_function_(		"SpaceConsole_prompt_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

SpaceConsole_prompt_length = _rpythonic_function_(		"SpaceConsole_prompt_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceConsole_select_end_get = _rpythonic_function_(		"SpaceConsole_select_end_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceConsole_select_start_get = _rpythonic_function_(		"SpaceConsole_select_start_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceDopeSheetEditor_action_get = _rpythonic_function_(		"SpaceDopeSheetEditor_action_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceDopeSheetEditor_auto_snap_get = _rpythonic_function_(		"SpaceDopeSheetEditor_auto_snap_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceDopeSheetEditor_use_auto_merge_keyframes_get = _rpythonic_function_(		"SpaceDopeSheetEditor_use_auto_merge_keyframes_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceDopeSheetEditor_dopesheet_get = _rpythonic_function_(		"SpaceDopeSheetEditor_dopesheet_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceDopeSheetEditor_mode_get = _rpythonic_function_(		"SpaceDopeSheetEditor_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceDopeSheetEditor_use_realtime_update_get = _rpythonic_function_(		"SpaceDopeSheetEditor_use_realtime_update_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceDopeSheetEditor_show_frame_indicator_get = _rpythonic_function_(		"SpaceDopeSheetEditor_show_frame_indicator_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceDopeSheetEditor_show_pose_markers_get = _rpythonic_function_(		"SpaceDopeSheetEditor_show_pose_markers_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceDopeSheetEditor_show_seconds_get = _rpythonic_function_(		"SpaceDopeSheetEditor_show_seconds_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceDopeSheetEditor_show_sliders_get = _rpythonic_function_(		"SpaceDopeSheetEditor_show_sliders_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceDopeSheetEditor_use_marker_sync_get = _rpythonic_function_(		"SpaceDopeSheetEditor_use_marker_sync_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceFileBrowser_params_get = _rpythonic_function_(		"SpaceFileBrowser_params_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceFileBrowser_operator_value_get = _rpythonic_function_(		"SpaceFileBrowser_operator_value_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceGraphEditor_auto_snap_get = _rpythonic_function_(		"SpaceGraphEditor_auto_snap_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceGraphEditor_use_auto_merge_keyframes_get = _rpythonic_function_(		"SpaceGraphEditor_use_auto_merge_keyframes_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceGraphEditor_cursor_position_y_get = _rpythonic_function_(		"SpaceGraphEditor_cursor_position_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceGraphEditor_dopesheet_get = _rpythonic_function_(		"SpaceGraphEditor_dopesheet_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceGraphEditor_has_ghost_curves_get = _rpythonic_function_(		"SpaceGraphEditor_has_ghost_curves_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceGraphEditor_mode_get = _rpythonic_function_(		"SpaceGraphEditor_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceGraphEditor_use_only_selected_curves_handles_get = _rpythonic_function_(		"SpaceGraphEditor_use_only_selected_curves_handles_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceGraphEditor_use_only_selected_keyframe_handles_get = _rpythonic_function_(		"SpaceGraphEditor_use_only_selected_keyframe_handles_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceGraphEditor_pivot_point_get = _rpythonic_function_(		"SpaceGraphEditor_pivot_point_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceGraphEditor_use_realtime_update_get = _rpythonic_function_(		"SpaceGraphEditor_use_realtime_update_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceGraphEditor_show_cursor_get = _rpythonic_function_(		"SpaceGraphEditor_show_cursor_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceGraphEditor_show_frame_indicator_get = _rpythonic_function_(		"SpaceGraphEditor_show_frame_indicator_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceGraphEditor_show_handles_get = _rpythonic_function_(		"SpaceGraphEditor_show_handles_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceGraphEditor_show_seconds_get = _rpythonic_function_(		"SpaceGraphEditor_show_seconds_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceGraphEditor_show_sliders_get = _rpythonic_function_(		"SpaceGraphEditor_show_sliders_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceGraphEditor_use_beauty_drawing_get = _rpythonic_function_(		"SpaceGraphEditor_use_beauty_drawing_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceImageEditor_curve_get = _rpythonic_function_(		"SpaceImageEditor_curve_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceImageEditor_draw_channels_get = _rpythonic_function_(		"SpaceImageEditor_draw_channels_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceImageEditor_show_repeat_get = _rpythonic_function_(		"SpaceImageEditor_show_repeat_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceImageEditor_grease_pencil_get = _rpythonic_function_(		"SpaceImageEditor_grease_pencil_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceImageEditor_image_get = _rpythonic_function_(		"SpaceImageEditor_image_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceImageEditor_use_image_paint_get = _rpythonic_function_(		"SpaceImageEditor_use_image_paint_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceImageEditor_use_image_pin_get = _rpythonic_function_(		"SpaceImageEditor_use_image_pin_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceImageEditor_image_user_get = _rpythonic_function_(		"SpaceImageEditor_image_user_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceImageEditor_sample_histogram_get = _rpythonic_function_(		"SpaceImageEditor_sample_histogram_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceImageEditor_scopes_get = _rpythonic_function_(		"SpaceImageEditor_scopes_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceImageEditor_show_paint_get = _rpythonic_function_(		"SpaceImageEditor_show_paint_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceImageEditor_show_render_get = _rpythonic_function_(		"SpaceImageEditor_show_render_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceImageEditor_show_uvedit_get = _rpythonic_function_(		"SpaceImageEditor_show_uvedit_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceImageEditor_uv_editor_get = _rpythonic_function_(		"SpaceImageEditor_uv_editor_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceImageEditor_use_realtime_update_get = _rpythonic_function_(		"SpaceImageEditor_use_realtime_update_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceImageEditor_use_grease_pencil_get = _rpythonic_function_(		"SpaceImageEditor_use_grease_pencil_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceImageEditor_zoom_get = _rpythonic_function_(		"SpaceImageEditor_zoom_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 2 )),] )

SpaceInfo_show_report_debug_get = _rpythonic_function_(		"SpaceInfo_show_report_debug_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceInfo_show_report_error_get = _rpythonic_function_(		"SpaceInfo_show_report_error_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceInfo_show_report_info_get = _rpythonic_function_(		"SpaceInfo_show_report_info_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceInfo_show_report_operator_get = _rpythonic_function_(		"SpaceInfo_show_report_operator_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceInfo_show_report_warning_get = _rpythonic_function_(		"SpaceInfo_show_report_warning_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceLogicEditor_show_sensors_active_object_get = _rpythonic_function_(		"SpaceLogicEditor_show_sensors_active_object_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceLogicEditor_show_controllers_active_object_get = _rpythonic_function_(		"SpaceLogicEditor_show_controllers_active_object_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceLogicEditor_show_actuators_active_object_get = _rpythonic_function_(		"SpaceLogicEditor_show_actuators_active_object_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceLogicEditor_show_sensors_active_states_get = _rpythonic_function_(		"SpaceLogicEditor_show_sensors_active_states_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceLogicEditor_show_actuators_active_states_get = _rpythonic_function_(		"SpaceLogicEditor_show_actuators_active_states_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceLogicEditor_show_actuators_linked_controller_get = _rpythonic_function_(		"SpaceLogicEditor_show_actuators_linked_controller_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceLogicEditor_show_sensors_linked_controller_get = _rpythonic_function_(		"SpaceLogicEditor_show_sensors_linked_controller_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceLogicEditor_show_controllers_linked_controller_get = _rpythonic_function_(		"SpaceLogicEditor_show_controllers_linked_controller_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceLogicEditor_show_sensors_selected_objects_get = _rpythonic_function_(		"SpaceLogicEditor_show_sensors_selected_objects_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceLogicEditor_show_controllers_selected_objects_get = _rpythonic_function_(		"SpaceLogicEditor_show_controllers_selected_objects_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceLogicEditor_show_actuators_selected_objects_get = _rpythonic_function_(		"SpaceLogicEditor_show_actuators_selected_objects_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceNLA_auto_snap_get = _rpythonic_function_(		"SpaceNLA_auto_snap_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceNLA_dopesheet_get = _rpythonic_function_(		"SpaceNLA_dopesheet_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceNLA_use_realtime_update_get = _rpythonic_function_(		"SpaceNLA_use_realtime_update_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceNLA_show_strip_curves_get = _rpythonic_function_(		"SpaceNLA_show_strip_curves_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceNLA_show_frame_indicator_get = _rpythonic_function_(		"SpaceNLA_show_frame_indicator_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceNLA_show_seconds_get = _rpythonic_function_(		"SpaceNLA_show_seconds_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceNodeEditor_use_auto_render_get = _rpythonic_function_(		"SpaceNodeEditor_use_auto_render_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceNodeEditor_show_backdrop_get = _rpythonic_function_(		"SpaceNodeEditor_show_backdrop_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceNodeEditor_backdrop_x_get = _rpythonic_function_(		"SpaceNodeEditor_backdrop_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceNodeEditor_backdrop_y_get = _rpythonic_function_(		"SpaceNodeEditor_backdrop_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceNodeEditor_backdrop_zoom_get = _rpythonic_function_(		"SpaceNodeEditor_backdrop_zoom_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceNodeEditor_backdrop_channels_get = _rpythonic_function_(		"SpaceNodeEditor_backdrop_channels_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceNodeEditor_id_get = _rpythonic_function_(		"SpaceNodeEditor_id_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceNodeEditor_id_from_get = _rpythonic_function_(		"SpaceNodeEditor_id_from_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceNodeEditor_node_tree_get = _rpythonic_function_(		"SpaceNodeEditor_node_tree_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceNodeEditor_texture_type_get = _rpythonic_function_(		"SpaceNodeEditor_texture_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceNodeEditor_tree_type_get = _rpythonic_function_(		"SpaceNodeEditor_tree_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceOutliner_use_filter_case_sensitive_get = _rpythonic_function_(		"SpaceOutliner_use_filter_case_sensitive_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceOutliner_use_filter_complete_get = _rpythonic_function_(		"SpaceOutliner_use_filter_complete_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceOutliner_filter_text_get = _rpythonic_function_(		"SpaceOutliner_filter_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

SpaceOutliner_filter_text_length = _rpythonic_function_(		"SpaceOutliner_filter_text_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceOutliner_display_mode_get = _rpythonic_function_(		"SpaceOutliner_display_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceOutliner_show_restrict_columns_get = _rpythonic_function_(		"SpaceOutliner_show_restrict_columns_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceProperties_align_get = _rpythonic_function_(		"SpaceProperties_align_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceProperties_context_get = _rpythonic_function_(		"SpaceProperties_context_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceProperties_use_pin_id_get = _rpythonic_function_(		"SpaceProperties_use_pin_id_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceProperties_texture_context_get = _rpythonic_function_(		"SpaceProperties_texture_context_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceProperties_pin_id_get = _rpythonic_function_(		"SpaceProperties_pin_id_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceSequenceEditor_display_channel_get = _rpythonic_function_(		"SpaceSequenceEditor_display_channel_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceSequenceEditor_display_mode_get = _rpythonic_function_(		"SpaceSequenceEditor_display_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceSequenceEditor_show_frames_get = _rpythonic_function_(		"SpaceSequenceEditor_show_frames_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceSequenceEditor_grease_pencil_get = _rpythonic_function_(		"SpaceSequenceEditor_grease_pencil_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceSequenceEditor_proxy_render_size_get = _rpythonic_function_(		"SpaceSequenceEditor_proxy_render_size_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceSequenceEditor_show_safe_margin_get = _rpythonic_function_(		"SpaceSequenceEditor_show_safe_margin_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceSequenceEditor_show_separate_color_get = _rpythonic_function_(		"SpaceSequenceEditor_show_separate_color_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceSequenceEditor_show_frame_indicator_get = _rpythonic_function_(		"SpaceSequenceEditor_show_frame_indicator_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceSequenceEditor_draw_overexposed_get = _rpythonic_function_(		"SpaceSequenceEditor_draw_overexposed_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceSequenceEditor_use_marker_sync_get = _rpythonic_function_(		"SpaceSequenceEditor_use_marker_sync_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceSequenceEditor_use_grease_pencil_get = _rpythonic_function_(		"SpaceSequenceEditor_use_grease_pencil_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceSequenceEditor_view_type_get = _rpythonic_function_(		"SpaceSequenceEditor_view_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceSequenceEditor_offset_x_get = _rpythonic_function_(		"SpaceSequenceEditor_offset_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceSequenceEditor_offset_y_get = _rpythonic_function_(		"SpaceSequenceEditor_offset_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceSequenceEditor_zoom_get = _rpythonic_function_(		"SpaceSequenceEditor_zoom_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceTextEditor_use_find_all_get = _rpythonic_function_(		"SpaceTextEditor_use_find_all_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceTextEditor_find_text_get = _rpythonic_function_(		"SpaceTextEditor_find_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

SpaceTextEditor_find_text_length = _rpythonic_function_(		"SpaceTextEditor_find_text_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceTextEditor_use_find_wrap_get = _rpythonic_function_(		"SpaceTextEditor_use_find_wrap_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceTextEditor_font_size_get = _rpythonic_function_(		"SpaceTextEditor_font_size_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceTextEditor_show_line_highlight_get = _rpythonic_function_(		"SpaceTextEditor_show_line_highlight_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceTextEditor_show_line_numbers_get = _rpythonic_function_(		"SpaceTextEditor_show_line_numbers_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceTextEditor_use_live_edit_get = _rpythonic_function_(		"SpaceTextEditor_use_live_edit_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceTextEditor_margin_column_get = _rpythonic_function_(		"SpaceTextEditor_margin_column_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceTextEditor_use_match_case_get = _rpythonic_function_(		"SpaceTextEditor_use_match_case_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceTextEditor_use_overwrite_get = _rpythonic_function_(		"SpaceTextEditor_use_overwrite_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceTextEditor_replace_text_get = _rpythonic_function_(		"SpaceTextEditor_replace_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

SpaceTextEditor_replace_text_length = _rpythonic_function_(		"SpaceTextEditor_replace_text_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceTextEditor_show_margin_get = _rpythonic_function_(		"SpaceTextEditor_show_margin_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceTextEditor_show_syntax_highlight_get = _rpythonic_function_(		"SpaceTextEditor_show_syntax_highlight_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceTextEditor_tab_width_get = _rpythonic_function_(		"SpaceTextEditor_tab_width_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceTextEditor_text_get = _rpythonic_function_(		"SpaceTextEditor_text_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceTextEditor_show_word_wrap_get = _rpythonic_function_(		"SpaceTextEditor_show_word_wrap_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceTimeline_cache_cloth_get = _rpythonic_function_(		"SpaceTimeline_cache_cloth_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceTimeline_show_only_selected_get = _rpythonic_function_(		"SpaceTimeline_show_only_selected_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceTimeline_cache_particles_get = _rpythonic_function_(		"SpaceTimeline_cache_particles_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceTimeline_show_cache_get = _rpythonic_function_(		"SpaceTimeline_show_cache_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceTimeline_show_frame_indicator_get = _rpythonic_function_(		"SpaceTimeline_show_frame_indicator_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceTimeline_cache_smoke_get = _rpythonic_function_(		"SpaceTimeline_cache_smoke_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceTimeline_cache_softbody_get = _rpythonic_function_(		"SpaceTimeline_cache_softbody_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceUVEditor_rna_type_get = _rpythonic_function_(		"SpaceUVEditor_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceUVEditor_cursor_location_get = _rpythonic_function_(		"SpaceUVEditor_cursor_location_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 2 )),] )

SpaceUVEditor_lock_bounds_get = _rpythonic_function_(		"SpaceUVEditor_lock_bounds_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceUVEditor_show_faces_get = _rpythonic_function_(		"SpaceUVEditor_show_faces_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceUVEditor_show_modified_edges_get = _rpythonic_function_(		"SpaceUVEditor_show_modified_edges_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceUVEditor_show_other_objects_get = _rpythonic_function_(		"SpaceUVEditor_show_other_objects_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceUVEditor_show_smooth_edges_get = _rpythonic_function_(		"SpaceUVEditor_show_smooth_edges_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceUVEditor_show_stretch_get = _rpythonic_function_(		"SpaceUVEditor_show_stretch_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceUVEditor_draw_stretch_type_get = _rpythonic_function_(		"SpaceUVEditor_draw_stretch_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceUVEditor_edge_draw_type_get = _rpythonic_function_(		"SpaceUVEditor_edge_draw_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceUVEditor_use_live_unwrap_get = _rpythonic_function_(		"SpaceUVEditor_use_live_unwrap_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceUVEditor_show_normalized_coords_get = _rpythonic_function_(		"SpaceUVEditor_show_normalized_coords_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceUVEditor_pivot_point_get = _rpythonic_function_(		"SpaceUVEditor_pivot_point_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceUVEditor_use_snap_to_pixels_get = _rpythonic_function_(		"SpaceUVEditor_use_snap_to_pixels_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceUVEditor_sticky_select_mode_get = _rpythonic_function_(		"SpaceUVEditor_sticky_select_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceUserPreferences_filter_text_get = _rpythonic_function_(		"SpaceUserPreferences_filter_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

SpaceUserPreferences_filter_text_length = _rpythonic_function_(		"SpaceUserPreferences_filter_text_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceView3D_cursor_location_get = _rpythonic_function_(		"SpaceView3D_cursor_location_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

SpaceView3D_region_3d_get = _rpythonic_function_(		"SpaceView3D_region_3d_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceView3D_use_pivot_point_align_get = _rpythonic_function_(		"SpaceView3D_use_pivot_point_align_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceView3D_show_all_objects_origin_get = _rpythonic_function_(		"SpaceView3D_show_all_objects_origin_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceView3D_background_images_begin = _rpythonic_function_(		"SpaceView3D_background_images_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceView3D_background_images_next = _rpythonic_function_(		"SpaceView3D_background_images_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

SpaceView3D_background_images_end = _rpythonic_function_(		"SpaceView3D_background_images_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

SpaceView3D_camera_get = _rpythonic_function_(		"SpaceView3D_camera_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceView3D_clip_end_get = _rpythonic_function_(		"SpaceView3D_clip_end_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceView3D_clip_start_get = _rpythonic_function_(		"SpaceView3D_clip_start_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceView3D_current_orientation_get = _rpythonic_function_(		"SpaceView3D_current_orientation_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceView3D_show_background_images_get = _rpythonic_function_(		"SpaceView3D_show_background_images_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceView3D_show_floor_get = _rpythonic_function_(		"SpaceView3D_show_floor_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceView3D_show_axis_x_get = _rpythonic_function_(		"SpaceView3D_show_axis_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceView3D_show_axis_y_get = _rpythonic_function_(		"SpaceView3D_show_axis_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceView3D_show_axis_z_get = _rpythonic_function_(		"SpaceView3D_show_axis_z_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceView3D_grid_lines_get = _rpythonic_function_(		"SpaceView3D_grid_lines_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceView3D_grid_scale_get = _rpythonic_function_(		"SpaceView3D_grid_scale_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceView3D_grid_subdivisions_get = _rpythonic_function_(		"SpaceView3D_grid_subdivisions_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceView3D_lens_get = _rpythonic_function_(		"SpaceView3D_lens_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceView3D_local_view_get = _rpythonic_function_(		"SpaceView3D_local_view_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceView3D_lock_camera_and_layers_get = _rpythonic_function_(		"SpaceView3D_lock_camera_and_layers_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceView3D_lock_camera_get = _rpythonic_function_(		"SpaceView3D_lock_camera_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceView3D_lock_bone_get = _rpythonic_function_(		"SpaceView3D_lock_bone_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

SpaceView3D_lock_bone_length = _rpythonic_function_(		"SpaceView3D_lock_bone_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceView3D_lock_cursor_get = _rpythonic_function_(		"SpaceView3D_lock_cursor_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceView3D_lock_object_get = _rpythonic_function_(		"SpaceView3D_lock_object_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceView3D_show_manipulator_get = _rpythonic_function_(		"SpaceView3D_show_manipulator_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceView3D_use_manipulator_rotate_get = _rpythonic_function_(		"SpaceView3D_use_manipulator_rotate_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceView3D_use_manipulator_scale_get = _rpythonic_function_(		"SpaceView3D_use_manipulator_scale_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceView3D_use_manipulator_translate_get = _rpythonic_function_(		"SpaceView3D_use_manipulator_translate_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceView3D_use_occlude_geometry_get = _rpythonic_function_(		"SpaceView3D_use_occlude_geometry_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceView3D_show_only_render_get = _rpythonic_function_(		"SpaceView3D_show_only_render_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceView3D_show_outline_selected_get = _rpythonic_function_(		"SpaceView3D_show_outline_selected_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceView3D_pivot_point_get = _rpythonic_function_(		"SpaceView3D_pivot_point_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceView3D_region_quadview_get = _rpythonic_function_(		"SpaceView3D_region_quadview_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceView3D_show_relationship_lines_get = _rpythonic_function_(		"SpaceView3D_show_relationship_lines_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceView3D_show_textured_solid_get = _rpythonic_function_(		"SpaceView3D_show_textured_solid_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceView3D_transform_orientation_get = _rpythonic_function_(		"SpaceView3D_transform_orientation_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceView3D_layers_used_get = _rpythonic_function_(		"SpaceView3D_layers_used_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_int * 20 )),] )

SpaceView3D_viewport_shade_get = _rpythonic_function_(		"SpaceView3D_viewport_shade_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpaceView3D_layers_get = _rpythonic_function_(		"SpaceView3D_layers_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_int * 20 )),] )

Speaker_animation_data_get = _rpythonic_function_(		"Speaker_animation_data_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Speaker_attenuation_get = _rpythonic_function_(		"Speaker_attenuation_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Speaker_cone_angle_inner_get = _rpythonic_function_(		"Speaker_cone_angle_inner_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Speaker_distance_max_get = _rpythonic_function_(		"Speaker_distance_max_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Speaker_volume_max_get = _rpythonic_function_(		"Speaker_volume_max_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Speaker_volume_min_get = _rpythonic_function_(		"Speaker_volume_min_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Speaker_muted_get = _rpythonic_function_(		"Speaker_muted_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Speaker_cone_angle_outer_get = _rpythonic_function_(		"Speaker_cone_angle_outer_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Speaker_cone_volume_outer_get = _rpythonic_function_(		"Speaker_cone_volume_outer_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Speaker_pitch_get = _rpythonic_function_(		"Speaker_pitch_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Speaker_distance_reference_get = _rpythonic_function_(		"Speaker_distance_reference_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Speaker_sound_get = _rpythonic_function_(		"Speaker_sound_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Speaker_volume_get = _rpythonic_function_(		"Speaker_volume_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpeedControlSequence_use_frame_blend_get = _rpythonic_function_(		"SpeedControlSequence_use_frame_blend_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpeedControlSequence_multiply_speed_get = _rpythonic_function_(		"SpeedControlSequence_multiply_speed_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpeedControlSequence_scale_to_length_get = _rpythonic_function_(		"SpeedControlSequence_scale_to_length_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpeedControlSequence_use_as_speed_get = _rpythonic_function_(		"SpeedControlSequence_use_as_speed_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Spline_rna_type_get = _rpythonic_function_(		"Spline_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Spline_bezier_points_begin = _rpythonic_function_(		"Spline_bezier_points_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Spline_bezier_points_next = _rpythonic_function_(		"Spline_bezier_points_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Spline_bezier_points_end = _rpythonic_function_(		"Spline_bezier_points_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Spline_use_bezier_u_get = _rpythonic_function_(		"Spline_use_bezier_u_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Spline_use_bezier_v_get = _rpythonic_function_(		"Spline_use_bezier_v_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Spline_character_index_get = _rpythonic_function_(		"Spline_character_index_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Spline_use_cyclic_u_get = _rpythonic_function_(		"Spline_use_cyclic_u_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Spline_use_cyclic_v_get = _rpythonic_function_(		"Spline_use_cyclic_v_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Spline_use_endpoint_u_get = _rpythonic_function_(		"Spline_use_endpoint_u_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Spline_use_endpoint_v_get = _rpythonic_function_(		"Spline_use_endpoint_v_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Spline_hide_get = _rpythonic_function_(		"Spline_hide_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Spline_material_index_get = _rpythonic_function_(		"Spline_material_index_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Spline_order_u_get = _rpythonic_function_(		"Spline_order_u_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Spline_order_v_get = _rpythonic_function_(		"Spline_order_v_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Spline_points_begin = _rpythonic_function_(		"Spline_points_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Spline_points_next = _rpythonic_function_(		"Spline_points_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Spline_points_end = _rpythonic_function_(		"Spline_points_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Spline_point_count_u_get = _rpythonic_function_(		"Spline_point_count_u_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Spline_point_count_v_get = _rpythonic_function_(		"Spline_point_count_v_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Spline_radius_interpolation_get = _rpythonic_function_(		"Spline_radius_interpolation_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Spline_resolution_u_get = _rpythonic_function_(		"Spline_resolution_u_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Spline_resolution_v_get = _rpythonic_function_(		"Spline_resolution_v_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Spline_use_smooth_get = _rpythonic_function_(		"Spline_use_smooth_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Spline_tilt_interpolation_get = _rpythonic_function_(		"Spline_tilt_interpolation_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Spline_type_get = _rpythonic_function_(		"Spline_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SplineBezierPoints_rna_type_get = _rpythonic_function_(		"SplineBezierPoints_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SplineIKConstraint_chain_count_get = _rpythonic_function_(		"SplineIKConstraint_chain_count_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SplineIKConstraint_use_chain_offset_get = _rpythonic_function_(		"SplineIKConstraint_use_chain_offset_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SplineIKConstraint_use_even_divisions_get = _rpythonic_function_(		"SplineIKConstraint_use_even_divisions_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SplineIKConstraint_joint_bindings_get = _rpythonic_function_(		"SplineIKConstraint_joint_bindings_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 32 )),] )

SplineIKConstraint_target_get = _rpythonic_function_(		"SplineIKConstraint_target_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SplineIKConstraint_use_curve_radius_get = _rpythonic_function_(		"SplineIKConstraint_use_curve_radius_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SplineIKConstraint_xz_scale_mode_get = _rpythonic_function_(		"SplineIKConstraint_xz_scale_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SplineIKConstraint_use_y_stretch_get = _rpythonic_function_(		"SplineIKConstraint_use_y_stretch_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SplinePoint_rna_type_get = _rpythonic_function_(		"SplinePoint_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SplinePoint_radius_get = _rpythonic_function_(		"SplinePoint_radius_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SplinePoint_hide_get = _rpythonic_function_(		"SplinePoint_hide_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SplinePoint_co_get = _rpythonic_function_(		"SplinePoint_co_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 4 )),] )

SplinePoint_select_get = _rpythonic_function_(		"SplinePoint_select_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SplinePoint_tilt_get = _rpythonic_function_(		"SplinePoint_tilt_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SplinePoint_weight_get = _rpythonic_function_(		"SplinePoint_weight_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SplinePoint_weight_softbody_get = _rpythonic_function_(		"SplinePoint_weight_softbody_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SplinePoints_rna_type_get = _rpythonic_function_(		"SplinePoints_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpotLamp_use_auto_clip_end_get = _rpythonic_function_(		"SpotLamp_use_auto_clip_end_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpotLamp_use_auto_clip_start_get = _rpythonic_function_(		"SpotLamp_use_auto_clip_start_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpotLamp_compression_threshold_get = _rpythonic_function_(		"SpotLamp_compression_threshold_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpotLamp_falloff_curve_get = _rpythonic_function_(		"SpotLamp_falloff_curve_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpotLamp_falloff_type_get = _rpythonic_function_(		"SpotLamp_falloff_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpotLamp_use_halo_get = _rpythonic_function_(		"SpotLamp_use_halo_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpotLamp_halo_intensity_get = _rpythonic_function_(		"SpotLamp_halo_intensity_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpotLamp_halo_step_get = _rpythonic_function_(		"SpotLamp_halo_step_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpotLamp_linear_attenuation_get = _rpythonic_function_(		"SpotLamp_linear_attenuation_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpotLamp_use_only_shadow_get = _rpythonic_function_(		"SpotLamp_use_only_shadow_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpotLamp_quadratic_attenuation_get = _rpythonic_function_(		"SpotLamp_quadratic_attenuation_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpotLamp_shadow_buffer_samples_get = _rpythonic_function_(		"SpotLamp_shadow_buffer_samples_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpotLamp_shadow_adaptive_threshold_get = _rpythonic_function_(		"SpotLamp_shadow_adaptive_threshold_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpotLamp_shadow_buffer_bias_get = _rpythonic_function_(		"SpotLamp_shadow_buffer_bias_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpotLamp_shadow_buffer_clip_end_get = _rpythonic_function_(		"SpotLamp_shadow_buffer_clip_end_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpotLamp_shadow_buffer_clip_start_get = _rpythonic_function_(		"SpotLamp_shadow_buffer_clip_start_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpotLamp_shadow_buffer_size_get = _rpythonic_function_(		"SpotLamp_shadow_buffer_size_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpotLamp_shadow_buffer_soft_get = _rpythonic_function_(		"SpotLamp_shadow_buffer_soft_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpotLamp_shadow_buffer_type_get = _rpythonic_function_(		"SpotLamp_shadow_buffer_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpotLamp_shadow_color_get = _rpythonic_function_(		"SpotLamp_shadow_color_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

SpotLamp_shadow_filter_type_get = _rpythonic_function_(		"SpotLamp_shadow_filter_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpotLamp_use_shadow_layer_get = _rpythonic_function_(		"SpotLamp_use_shadow_layer_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpotLamp_shadow_method_get = _rpythonic_function_(		"SpotLamp_shadow_method_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpotLamp_shadow_ray_samples_get = _rpythonic_function_(		"SpotLamp_shadow_ray_samples_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpotLamp_shadow_ray_sample_method_get = _rpythonic_function_(		"SpotLamp_shadow_ray_sample_method_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpotLamp_shadow_sample_buffers_get = _rpythonic_function_(		"SpotLamp_shadow_sample_buffers_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpotLamp_shadow_soft_size_get = _rpythonic_function_(		"SpotLamp_shadow_soft_size_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpotLamp_show_cone_get = _rpythonic_function_(		"SpotLamp_show_cone_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpotLamp_use_sphere_get = _rpythonic_function_(		"SpotLamp_use_sphere_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpotLamp_spot_blend_get = _rpythonic_function_(		"SpotLamp_spot_blend_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpotLamp_spot_size_get = _rpythonic_function_(		"SpotLamp_spot_size_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SpotLamp_use_square_get = _rpythonic_function_(		"SpotLamp_use_square_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

StateActuator_operation_get = _rpythonic_function_(		"StateActuator_operation_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

StateActuator_states_get = _rpythonic_function_(		"StateActuator_states_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_int * 30 )),] )

StretchToConstraint_head_tail_get = _rpythonic_function_(		"StretchToConstraint_head_tail_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

StretchToConstraint_keep_axis_get = _rpythonic_function_(		"StretchToConstraint_keep_axis_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

StretchToConstraint_volume_get = _rpythonic_function_(		"StretchToConstraint_volume_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

StretchToConstraint_rest_length_get = _rpythonic_function_(		"StretchToConstraint_rest_length_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

StretchToConstraint_subtarget_get = _rpythonic_function_(		"StretchToConstraint_subtarget_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

StretchToConstraint_subtarget_length = _rpythonic_function_(		"StretchToConstraint_subtarget_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

StretchToConstraint_target_get = _rpythonic_function_(		"StretchToConstraint_target_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

StretchToConstraint_bulge_get = _rpythonic_function_(		"StretchToConstraint_bulge_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

StringProperty_default_value_get = _rpythonic_function_(		"StringProperty_default_value_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

StringProperty_default_value_length = _rpythonic_function_(		"StringProperty_default_value_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

StringProperty_length_max_get = _rpythonic_function_(		"StringProperty_length_max_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Struct_rna_type_get = _rpythonic_function_(		"Struct_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Struct_name_get = _rpythonic_function_(		"Struct_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

Struct_name_length = _rpythonic_function_(		"Struct_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Struct_base_get = _rpythonic_function_(		"Struct_base_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Struct_description_get = _rpythonic_function_(		"Struct_description_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

Struct_description_length = _rpythonic_function_(		"Struct_description_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Struct_functions_begin = _rpythonic_function_(		"Struct_functions_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Struct_functions_next = _rpythonic_function_(		"Struct_functions_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Struct_functions_end = _rpythonic_function_(		"Struct_functions_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Struct_identifier_get = _rpythonic_function_(		"Struct_identifier_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

Struct_identifier_length = _rpythonic_function_(		"Struct_identifier_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Struct_name_property_get = _rpythonic_function_(		"Struct_name_property_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Struct_nested_get = _rpythonic_function_(		"Struct_nested_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Struct_properties_begin = _rpythonic_function_(		"Struct_properties_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Struct_properties_next = _rpythonic_function_(		"Struct_properties_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Struct_properties_end = _rpythonic_function_(		"Struct_properties_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

StucciTexture_noise_basis_get = _rpythonic_function_(		"StucciTexture_noise_basis_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

StucciTexture_noise_scale_get = _rpythonic_function_(		"StucciTexture_noise_scale_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

StucciTexture_noise_type_get = _rpythonic_function_(		"StucciTexture_noise_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

StucciTexture_stucci_type_get = _rpythonic_function_(		"StucciTexture_stucci_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

StucciTexture_turbulence_get = _rpythonic_function_(		"StucciTexture_turbulence_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SubsurfModifier_levels_get = _rpythonic_function_(		"SubsurfModifier_levels_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SubsurfModifier_show_only_control_edges_get = _rpythonic_function_(		"SubsurfModifier_show_only_control_edges_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SubsurfModifier_render_levels_get = _rpythonic_function_(		"SubsurfModifier_render_levels_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SubsurfModifier_use_subsurf_uv_get = _rpythonic_function_(		"SubsurfModifier_use_subsurf_uv_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SubsurfModifier_subdivision_type_get = _rpythonic_function_(		"SubsurfModifier_subdivision_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SunLamp_use_only_shadow_get = _rpythonic_function_(		"SunLamp_use_only_shadow_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SunLamp_shadow_adaptive_threshold_get = _rpythonic_function_(		"SunLamp_shadow_adaptive_threshold_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SunLamp_shadow_color_get = _rpythonic_function_(		"SunLamp_shadow_color_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

SunLamp_use_shadow_layer_get = _rpythonic_function_(		"SunLamp_use_shadow_layer_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SunLamp_shadow_method_get = _rpythonic_function_(		"SunLamp_shadow_method_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SunLamp_shadow_ray_samples_get = _rpythonic_function_(		"SunLamp_shadow_ray_samples_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SunLamp_shadow_ray_sample_method_get = _rpythonic_function_(		"SunLamp_shadow_ray_sample_method_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SunLamp_shadow_soft_size_get = _rpythonic_function_(		"SunLamp_shadow_soft_size_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SunLamp_sky_get = _rpythonic_function_(		"SunLamp_sky_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

SurfaceCurve_use_uv_as_generated_get = _rpythonic_function_(		"SurfaceCurve_use_uv_as_generated_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TexMapping_rna_type_get = _rpythonic_function_(		"TexMapping_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TexMapping_use_max_get = _rpythonic_function_(		"TexMapping_use_max_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TexMapping_use_min_get = _rpythonic_function_(		"TexMapping_use_min_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TexMapping_location_get = _rpythonic_function_(		"TexMapping_location_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

TexMapping_max_get = _rpythonic_function_(		"TexMapping_max_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

TexMapping_min_get = _rpythonic_function_(		"TexMapping_min_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

TexMapping_rotation_get = _rpythonic_function_(		"TexMapping_rotation_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

TexMapping_scale_get = _rpythonic_function_(		"TexMapping_scale_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

Text_current_character_get = _rpythonic_function_(		"Text_current_character_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Text_current_line_get = _rpythonic_function_(		"Text_current_line_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Text_is_dirty_get = _rpythonic_function_(		"Text_is_dirty_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Text_filepath_get = _rpythonic_function_(		"Text_filepath_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

Text_filepath_length = _rpythonic_function_(		"Text_filepath_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Text_lines_begin = _rpythonic_function_(		"Text_lines_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Text_lines_next = _rpythonic_function_(		"Text_lines_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Text_lines_end = _rpythonic_function_(		"Text_lines_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Text_markers_begin = _rpythonic_function_(		"Text_markers_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Text_markers_next = _rpythonic_function_(		"Text_markers_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Text_markers_end = _rpythonic_function_(		"Text_markers_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Text_is_in_memory_get = _rpythonic_function_(		"Text_is_in_memory_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Text_is_modified_get = _rpythonic_function_(		"Text_is_modified_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Text_use_module_get = _rpythonic_function_(		"Text_use_module_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Text_select_end_character_get = _rpythonic_function_(		"Text_select_end_character_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Text_select_end_line_get = _rpythonic_function_(		"Text_select_end_line_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Text_use_tabs_as_spaces_get = _rpythonic_function_(		"Text_use_tabs_as_spaces_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextBox_rna_type_get = _rpythonic_function_(		"TextBox_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextBox_height_get = _rpythonic_function_(		"TextBox_height_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextBox_width_get = _rpythonic_function_(		"TextBox_width_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextBox_x_get = _rpythonic_function_(		"TextBox_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextBox_y_get = _rpythonic_function_(		"TextBox_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextCharacterFormat_rna_type_get = _rpythonic_function_(		"TextCharacterFormat_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextCharacterFormat_use_bold_get = _rpythonic_function_(		"TextCharacterFormat_use_bold_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextCharacterFormat_use_italic_get = _rpythonic_function_(		"TextCharacterFormat_use_italic_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextCharacterFormat_use_small_caps_get = _rpythonic_function_(		"TextCharacterFormat_use_small_caps_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextCharacterFormat_use_underline_get = _rpythonic_function_(		"TextCharacterFormat_use_underline_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextCurve_body_get = _rpythonic_function_(		"TextCurve_body_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

TextCurve_body_length = _rpythonic_function_(		"TextCurve_body_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextCurve_body_format_begin = _rpythonic_function_(		"TextCurve_body_format_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextCurve_body_format_next = _rpythonic_function_(		"TextCurve_body_format_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

TextCurve_body_format_end = _rpythonic_function_(		"TextCurve_body_format_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

TextCurve_space_line_get = _rpythonic_function_(		"TextCurve_space_line_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextCurve_edit_format_get = _rpythonic_function_(		"TextCurve_edit_format_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextCurve_use_fast_edit_get = _rpythonic_function_(		"TextCurve_use_fast_edit_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextCurve_font_get = _rpythonic_function_(		"TextCurve_font_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextCurve_font_bold_get = _rpythonic_function_(		"TextCurve_font_bold_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextCurve_font_bold_italic_get = _rpythonic_function_(		"TextCurve_font_bold_italic_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextCurve_font_italic_get = _rpythonic_function_(		"TextCurve_font_italic_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextCurve_size_get = _rpythonic_function_(		"TextCurve_size_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextCurve_space_character_get = _rpythonic_function_(		"TextCurve_space_character_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextCurve_family_get = _rpythonic_function_(		"TextCurve_family_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

TextCurve_family_length = _rpythonic_function_(		"TextCurve_family_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextCurve_shear_get = _rpythonic_function_(		"TextCurve_shear_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextCurve_small_caps_scale_get = _rpythonic_function_(		"TextCurve_small_caps_scale_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextCurve_space_word_get = _rpythonic_function_(		"TextCurve_space_word_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextCurve_align_get = _rpythonic_function_(		"TextCurve_align_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextCurve_follow_curve_get = _rpythonic_function_(		"TextCurve_follow_curve_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextCurve_text_boxes_begin = _rpythonic_function_(		"TextCurve_text_boxes_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextCurve_text_boxes_next = _rpythonic_function_(		"TextCurve_text_boxes_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

TextCurve_text_boxes_end = _rpythonic_function_(		"TextCurve_text_boxes_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

TextCurve_active_textbox_get = _rpythonic_function_(		"TextCurve_active_textbox_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextCurve_underline_position_get = _rpythonic_function_(		"TextCurve_underline_position_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextCurve_underline_height_get = _rpythonic_function_(		"TextCurve_underline_height_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextCurve_use_uv_as_generated_get = _rpythonic_function_(		"TextCurve_use_uv_as_generated_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextCurve_offset_x_get = _rpythonic_function_(		"TextCurve_offset_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextCurve_offset_y_get = _rpythonic_function_(		"TextCurve_offset_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextLine_rna_type_get = _rpythonic_function_(		"TextLine_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextLine_body_get = _rpythonic_function_(		"TextLine_body_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

TextLine_body_length = _rpythonic_function_(		"TextLine_body_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextMarker_rna_type_get = _rpythonic_function_(		"TextMarker_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextMarker_color_get = _rpythonic_function_(		"TextMarker_color_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 4 )),] )

TextMarker_use_edit_all_get = _rpythonic_function_(		"TextMarker_use_edit_all_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextMarker_character_index_end_get = _rpythonic_function_(		"TextMarker_character_index_end_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextMarker_group_get = _rpythonic_function_(		"TextMarker_group_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextMarker_line_get = _rpythonic_function_(		"TextMarker_line_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextMarker_character_index_start_get = _rpythonic_function_(		"TextMarker_character_index_start_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextMarker_is_temporary_get = _rpythonic_function_(		"TextMarker_is_temporary_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Texture_animation_data_get = _rpythonic_function_(		"Texture_animation_data_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Texture_intensity_get = _rpythonic_function_(		"Texture_intensity_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Texture_color_ramp_get = _rpythonic_function_(		"Texture_color_ramp_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Texture_contrast_get = _rpythonic_function_(		"Texture_contrast_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Texture_factor_blue_get = _rpythonic_function_(		"Texture_factor_blue_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Texture_factor_green_get = _rpythonic_function_(		"Texture_factor_green_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Texture_factor_red_get = _rpythonic_function_(		"Texture_factor_red_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Texture_node_tree_get = _rpythonic_function_(		"Texture_node_tree_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Texture_saturation_get = _rpythonic_function_(		"Texture_saturation_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Texture_use_preview_alpha_get = _rpythonic_function_(		"Texture_use_preview_alpha_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Texture_type_get = _rpythonic_function_(		"Texture_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Texture_use_color_ramp_get = _rpythonic_function_(		"Texture_use_color_ramp_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Texture_use_nodes_get = _rpythonic_function_(		"Texture_use_nodes_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextureNode_type_get = _rpythonic_function_(		"TextureNode_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextureNodeBricks_offset_get = _rpythonic_function_(		"TextureNodeBricks_offset_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextureNodeBricks_offset_frequency_get = _rpythonic_function_(		"TextureNodeBricks_offset_frequency_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextureNodeBricks_squash_get = _rpythonic_function_(		"TextureNodeBricks_squash_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextureNodeBricks_squash_frequency_get = _rpythonic_function_(		"TextureNodeBricks_squash_frequency_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextureNodeCurveRGB_mapping_get = _rpythonic_function_(		"TextureNodeCurveRGB_mapping_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextureNodeCurveTime_curve_get = _rpythonic_function_(		"TextureNodeCurveTime_curve_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextureNodeCurveTime_frame_end_get = _rpythonic_function_(		"TextureNodeCurveTime_frame_end_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextureNodeCurveTime_frame_start_get = _rpythonic_function_(		"TextureNodeCurveTime_frame_start_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextureNodeImage_image_get = _rpythonic_function_(		"TextureNodeImage_image_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextureNodeMath_operation_get = _rpythonic_function_(		"TextureNodeMath_operation_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextureNodeMixRGB_use_alpha_get = _rpythonic_function_(		"TextureNodeMixRGB_use_alpha_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextureNodeMixRGB_blend_type_get = _rpythonic_function_(		"TextureNodeMixRGB_blend_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextureNodeOutput_filepath_get = _rpythonic_function_(		"TextureNodeOutput_filepath_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

TextureNodeOutput_filepath_length = _rpythonic_function_(		"TextureNodeOutput_filepath_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextureNodeTexture_node_output_get = _rpythonic_function_(		"TextureNodeTexture_node_output_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextureNodeTexture_texture_get = _rpythonic_function_(		"TextureNodeTexture_texture_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextureNodeTree_nodes_begin = _rpythonic_function_(		"TextureNodeTree_nodes_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextureNodeTree_nodes_next = _rpythonic_function_(		"TextureNodeTree_nodes_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

TextureNodeTree_nodes_end = _rpythonic_function_(		"TextureNodeTree_nodes_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

TextureNodeValToRGB_color_ramp_get = _rpythonic_function_(		"TextureNodeValToRGB_color_ramp_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextureNodes_rna_type_get = _rpythonic_function_(		"TextureNodes_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextureSlot_rna_type_get = _rpythonic_function_(		"TextureSlot_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextureSlot_name_get = _rpythonic_function_(		"TextureSlot_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

TextureSlot_name_length = _rpythonic_function_(		"TextureSlot_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextureSlot_blend_type_get = _rpythonic_function_(		"TextureSlot_blend_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextureSlot_color_get = _rpythonic_function_(		"TextureSlot_color_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

TextureSlot_default_value_get = _rpythonic_function_(		"TextureSlot_default_value_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextureSlot_invert_get = _rpythonic_function_(		"TextureSlot_invert_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextureSlot_offset_get = _rpythonic_function_(		"TextureSlot_offset_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

TextureSlot_output_node_get = _rpythonic_function_(		"TextureSlot_output_node_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextureSlot_use_rgb_to_intensity_get = _rpythonic_function_(		"TextureSlot_use_rgb_to_intensity_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextureSlot_scale_get = _rpythonic_function_(		"TextureSlot_scale_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

TextureSlot_use_stencil_get = _rpythonic_function_(		"TextureSlot_use_stencil_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TextureSlot_texture_get = _rpythonic_function_(		"TextureSlot_texture_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Theme_rna_type_get = _rpythonic_function_(		"Theme_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Theme_name_get = _rpythonic_function_(		"Theme_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

Theme_name_length = _rpythonic_function_(		"Theme_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Theme_view_3d_get = _rpythonic_function_(		"Theme_view_3d_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Theme_theme_area_get = _rpythonic_function_(		"Theme_theme_area_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Theme_bone_color_sets_begin = _rpythonic_function_(		"Theme_bone_color_sets_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Theme_bone_color_sets_next = _rpythonic_function_(		"Theme_bone_color_sets_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Theme_bone_color_sets_end = _rpythonic_function_(		"Theme_bone_color_sets_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

Theme_console_get = _rpythonic_function_(		"Theme_console_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Theme_dopesheet_editor_get = _rpythonic_function_(		"Theme_dopesheet_editor_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Theme_file_browser_get = _rpythonic_function_(		"Theme_file_browser_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Theme_graph_editor_get = _rpythonic_function_(		"Theme_graph_editor_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Theme_image_editor_get = _rpythonic_function_(		"Theme_image_editor_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Theme_info_get = _rpythonic_function_(		"Theme_info_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Theme_logic_editor_get = _rpythonic_function_(		"Theme_logic_editor_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Theme_nla_editor_get = _rpythonic_function_(		"Theme_nla_editor_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Theme_node_editor_get = _rpythonic_function_(		"Theme_node_editor_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Theme_outliner_get = _rpythonic_function_(		"Theme_outliner_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Theme_properties_get = _rpythonic_function_(		"Theme_properties_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Theme_sequence_editor_get = _rpythonic_function_(		"Theme_sequence_editor_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Theme_text_editor_get = _rpythonic_function_(		"Theme_text_editor_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Theme_timeline_get = _rpythonic_function_(		"Theme_timeline_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Theme_user_interface_get = _rpythonic_function_(		"Theme_user_interface_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Theme_user_preferences_get = _rpythonic_function_(		"Theme_user_preferences_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeAudioWindow_rna_type_get = _rpythonic_function_(		"ThemeAudioWindow_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeAudioWindow_frame_current_get = _rpythonic_function_(		"ThemeAudioWindow_frame_current_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeAudioWindow_grid_get = _rpythonic_function_(		"ThemeAudioWindow_grid_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeAudioWindow_header_get = _rpythonic_function_(		"ThemeAudioWindow_header_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeAudioWindow_header_text_get = _rpythonic_function_(		"ThemeAudioWindow_header_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeAudioWindow_header_text_hi_get = _rpythonic_function_(		"ThemeAudioWindow_header_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeAudioWindow_button_get = _rpythonic_function_(		"ThemeAudioWindow_button_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeAudioWindow_button_text_get = _rpythonic_function_(		"ThemeAudioWindow_button_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeAudioWindow_button_text_hi_get = _rpythonic_function_(		"ThemeAudioWindow_button_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeAudioWindow_button_title_get = _rpythonic_function_(		"ThemeAudioWindow_button_title_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeAudioWindow_text_get = _rpythonic_function_(		"ThemeAudioWindow_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeAudioWindow_text_hi_get = _rpythonic_function_(		"ThemeAudioWindow_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeAudioWindow_title_get = _rpythonic_function_(		"ThemeAudioWindow_title_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeAudioWindow_back_get = _rpythonic_function_(		"ThemeAudioWindow_back_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeAudioWindow_window_sliders_get = _rpythonic_function_(		"ThemeAudioWindow_window_sliders_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeBoneColorSet_rna_type_get = _rpythonic_function_(		"ThemeBoneColorSet_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeBoneColorSet_active_get = _rpythonic_function_(		"ThemeBoneColorSet_active_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeBoneColorSet_show_colored_constraints_get = _rpythonic_function_(		"ThemeBoneColorSet_show_colored_constraints_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeBoneColorSet_normal_get = _rpythonic_function_(		"ThemeBoneColorSet_normal_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeBoneColorSet_select_get = _rpythonic_function_(		"ThemeBoneColorSet_select_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeConsole_rna_type_get = _rpythonic_function_(		"ThemeConsole_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeConsole_cursor_get = _rpythonic_function_(		"ThemeConsole_cursor_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeConsole_header_get = _rpythonic_function_(		"ThemeConsole_header_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeConsole_header_text_get = _rpythonic_function_(		"ThemeConsole_header_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeConsole_header_text_hi_get = _rpythonic_function_(		"ThemeConsole_header_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeConsole_line_error_get = _rpythonic_function_(		"ThemeConsole_line_error_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeConsole_line_info_get = _rpythonic_function_(		"ThemeConsole_line_info_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeConsole_line_input_get = _rpythonic_function_(		"ThemeConsole_line_input_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeConsole_line_output_get = _rpythonic_function_(		"ThemeConsole_line_output_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeConsole_button_get = _rpythonic_function_(		"ThemeConsole_button_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeConsole_button_text_get = _rpythonic_function_(		"ThemeConsole_button_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeConsole_button_text_hi_get = _rpythonic_function_(		"ThemeConsole_button_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeConsole_button_title_get = _rpythonic_function_(		"ThemeConsole_button_title_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeConsole_text_get = _rpythonic_function_(		"ThemeConsole_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeConsole_text_hi_get = _rpythonic_function_(		"ThemeConsole_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeConsole_title_get = _rpythonic_function_(		"ThemeConsole_title_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeConsole_back_get = _rpythonic_function_(		"ThemeConsole_back_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeDopeSheet_rna_type_get = _rpythonic_function_(		"ThemeDopeSheet_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeDopeSheet_active_channels_group_get = _rpythonic_function_(		"ThemeDopeSheet_active_channels_group_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeDopeSheet_channel_group_get = _rpythonic_function_(		"ThemeDopeSheet_channel_group_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeDopeSheet_channels_get = _rpythonic_function_(		"ThemeDopeSheet_channels_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeDopeSheet_channels_selected_get = _rpythonic_function_(		"ThemeDopeSheet_channels_selected_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeDopeSheet_frame_current_get = _rpythonic_function_(		"ThemeDopeSheet_frame_current_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeDopeSheet_dopesheet_channel_get = _rpythonic_function_(		"ThemeDopeSheet_dopesheet_channel_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeDopeSheet_dopesheet_subchannel_get = _rpythonic_function_(		"ThemeDopeSheet_dopesheet_subchannel_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeDopeSheet_grid_get = _rpythonic_function_(		"ThemeDopeSheet_grid_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeDopeSheet_header_get = _rpythonic_function_(		"ThemeDopeSheet_header_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeDopeSheet_header_text_get = _rpythonic_function_(		"ThemeDopeSheet_header_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeDopeSheet_header_text_hi_get = _rpythonic_function_(		"ThemeDopeSheet_header_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeDopeSheet_long_key_get = _rpythonic_function_(		"ThemeDopeSheet_long_key_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeDopeSheet_long_key_selected_get = _rpythonic_function_(		"ThemeDopeSheet_long_key_selected_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeDopeSheet_button_get = _rpythonic_function_(		"ThemeDopeSheet_button_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeDopeSheet_button_text_get = _rpythonic_function_(		"ThemeDopeSheet_button_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeDopeSheet_button_text_hi_get = _rpythonic_function_(		"ThemeDopeSheet_button_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeDopeSheet_button_title_get = _rpythonic_function_(		"ThemeDopeSheet_button_title_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeDopeSheet_list_get = _rpythonic_function_(		"ThemeDopeSheet_list_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeDopeSheet_list_text_get = _rpythonic_function_(		"ThemeDopeSheet_list_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeDopeSheet_list_text_hi_get = _rpythonic_function_(		"ThemeDopeSheet_list_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeDopeSheet_list_title_get = _rpythonic_function_(		"ThemeDopeSheet_list_title_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeDopeSheet_text_get = _rpythonic_function_(		"ThemeDopeSheet_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeDopeSheet_text_hi_get = _rpythonic_function_(		"ThemeDopeSheet_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeDopeSheet_title_get = _rpythonic_function_(		"ThemeDopeSheet_title_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeDopeSheet_value_sliders_get = _rpythonic_function_(		"ThemeDopeSheet_value_sliders_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeDopeSheet_view_sliders_get = _rpythonic_function_(		"ThemeDopeSheet_view_sliders_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeDopeSheet_back_get = _rpythonic_function_(		"ThemeDopeSheet_back_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeFileBrowser_rna_type_get = _rpythonic_function_(		"ThemeFileBrowser_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeFileBrowser_active_file_get = _rpythonic_function_(		"ThemeFileBrowser_active_file_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeFileBrowser_active_file_text_get = _rpythonic_function_(		"ThemeFileBrowser_active_file_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeFileBrowser_header_get = _rpythonic_function_(		"ThemeFileBrowser_header_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeFileBrowser_header_text_get = _rpythonic_function_(		"ThemeFileBrowser_header_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeFileBrowser_header_text_hi_get = _rpythonic_function_(		"ThemeFileBrowser_header_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeFileBrowser_button_get = _rpythonic_function_(		"ThemeFileBrowser_button_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeFileBrowser_button_text_get = _rpythonic_function_(		"ThemeFileBrowser_button_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeFileBrowser_button_text_hi_get = _rpythonic_function_(		"ThemeFileBrowser_button_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeFileBrowser_button_title_get = _rpythonic_function_(		"ThemeFileBrowser_button_title_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeFileBrowser_scroll_handle_get = _rpythonic_function_(		"ThemeFileBrowser_scroll_handle_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeFileBrowser_scrollbar_get = _rpythonic_function_(		"ThemeFileBrowser_scrollbar_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeFileBrowser_selected_file_get = _rpythonic_function_(		"ThemeFileBrowser_selected_file_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeFileBrowser_list_get = _rpythonic_function_(		"ThemeFileBrowser_list_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeFileBrowser_list_text_get = _rpythonic_function_(		"ThemeFileBrowser_list_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeFileBrowser_list_text_hi_get = _rpythonic_function_(		"ThemeFileBrowser_list_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeFileBrowser_list_title_get = _rpythonic_function_(		"ThemeFileBrowser_list_title_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeFileBrowser_text_get = _rpythonic_function_(		"ThemeFileBrowser_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeFileBrowser_text_hi_get = _rpythonic_function_(		"ThemeFileBrowser_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeFileBrowser_tiles_get = _rpythonic_function_(		"ThemeFileBrowser_tiles_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeFileBrowser_title_get = _rpythonic_function_(		"ThemeFileBrowser_title_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeFileBrowser_back_get = _rpythonic_function_(		"ThemeFileBrowser_back_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeFontStyle_rna_type_get = _rpythonic_function_(		"ThemeFontStyle_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeFontStyle_font_kerning_style_get = _rpythonic_function_(		"ThemeFontStyle_font_kerning_style_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeFontStyle_points_get = _rpythonic_function_(		"ThemeFontStyle_points_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeFontStyle_shadowalpha_get = _rpythonic_function_(		"ThemeFontStyle_shadowalpha_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeFontStyle_shadowcolor_get = _rpythonic_function_(		"ThemeFontStyle_shadowcolor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeFontStyle_shadow_get = _rpythonic_function_(		"ThemeFontStyle_shadow_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeFontStyle_shadow_offset_x_get = _rpythonic_function_(		"ThemeFontStyle_shadow_offset_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeFontStyle_shadow_offset_y_get = _rpythonic_function_(		"ThemeFontStyle_shadow_offset_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeGraphEditor_rna_type_get = _rpythonic_function_(		"ThemeGraphEditor_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeGraphEditor_active_channels_group_get = _rpythonic_function_(		"ThemeGraphEditor_active_channels_group_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeGraphEditor_handle_align_get = _rpythonic_function_(		"ThemeGraphEditor_handle_align_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeGraphEditor_handle_sel_align_get = _rpythonic_function_(		"ThemeGraphEditor_handle_sel_align_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeGraphEditor_handle_auto_get = _rpythonic_function_(		"ThemeGraphEditor_handle_auto_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeGraphEditor_handle_sel_auto_get = _rpythonic_function_(		"ThemeGraphEditor_handle_sel_auto_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeGraphEditor_handle_auto_clamped_get = _rpythonic_function_(		"ThemeGraphEditor_handle_auto_clamped_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeGraphEditor_handle_sel_auto_clamped_get = _rpythonic_function_(		"ThemeGraphEditor_handle_sel_auto_clamped_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeGraphEditor_channel_group_get = _rpythonic_function_(		"ThemeGraphEditor_channel_group_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeGraphEditor_channels_region_get = _rpythonic_function_(		"ThemeGraphEditor_channels_region_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeGraphEditor_frame_current_get = _rpythonic_function_(		"ThemeGraphEditor_frame_current_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeGraphEditor_dopesheet_channel_get = _rpythonic_function_(		"ThemeGraphEditor_dopesheet_channel_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeGraphEditor_dopesheet_subchannel_get = _rpythonic_function_(		"ThemeGraphEditor_dopesheet_subchannel_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeGraphEditor_handle_free_get = _rpythonic_function_(		"ThemeGraphEditor_handle_free_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeGraphEditor_handle_sel_free_get = _rpythonic_function_(		"ThemeGraphEditor_handle_sel_free_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeGraphEditor_grid_get = _rpythonic_function_(		"ThemeGraphEditor_grid_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeGraphEditor_handle_vertex_get = _rpythonic_function_(		"ThemeGraphEditor_handle_vertex_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeGraphEditor_handle_vertex_select_get = _rpythonic_function_(		"ThemeGraphEditor_handle_vertex_select_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeGraphEditor_handle_vertex_size_get = _rpythonic_function_(		"ThemeGraphEditor_handle_vertex_size_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeGraphEditor_header_get = _rpythonic_function_(		"ThemeGraphEditor_header_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeGraphEditor_header_text_get = _rpythonic_function_(		"ThemeGraphEditor_header_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeGraphEditor_header_text_hi_get = _rpythonic_function_(		"ThemeGraphEditor_header_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeGraphEditor_lastsel_point_get = _rpythonic_function_(		"ThemeGraphEditor_lastsel_point_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeGraphEditor_panel_get = _rpythonic_function_(		"ThemeGraphEditor_panel_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeGraphEditor_button_get = _rpythonic_function_(		"ThemeGraphEditor_button_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeGraphEditor_button_text_get = _rpythonic_function_(		"ThemeGraphEditor_button_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeGraphEditor_button_text_hi_get = _rpythonic_function_(		"ThemeGraphEditor_button_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeGraphEditor_button_title_get = _rpythonic_function_(		"ThemeGraphEditor_button_title_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeGraphEditor_list_get = _rpythonic_function_(		"ThemeGraphEditor_list_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeGraphEditor_list_text_get = _rpythonic_function_(		"ThemeGraphEditor_list_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeGraphEditor_list_text_hi_get = _rpythonic_function_(		"ThemeGraphEditor_list_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeGraphEditor_list_title_get = _rpythonic_function_(		"ThemeGraphEditor_list_title_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeGraphEditor_text_get = _rpythonic_function_(		"ThemeGraphEditor_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeGraphEditor_text_hi_get = _rpythonic_function_(		"ThemeGraphEditor_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeGraphEditor_title_get = _rpythonic_function_(		"ThemeGraphEditor_title_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeGraphEditor_handle_vect_get = _rpythonic_function_(		"ThemeGraphEditor_handle_vect_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeGraphEditor_handle_sel_vect_get = _rpythonic_function_(		"ThemeGraphEditor_handle_sel_vect_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeGraphEditor_vertex_get = _rpythonic_function_(		"ThemeGraphEditor_vertex_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeGraphEditor_vertex_select_get = _rpythonic_function_(		"ThemeGraphEditor_vertex_select_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeGraphEditor_vertex_size_get = _rpythonic_function_(		"ThemeGraphEditor_vertex_size_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeGraphEditor_back_get = _rpythonic_function_(		"ThemeGraphEditor_back_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeGraphEditor_window_sliders_get = _rpythonic_function_(		"ThemeGraphEditor_window_sliders_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeImageEditor_rna_type_get = _rpythonic_function_(		"ThemeImageEditor_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeImageEditor_editmesh_active_get = _rpythonic_function_(		"ThemeImageEditor_editmesh_active_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 4 )),] )

ThemeImageEditor_face_get = _rpythonic_function_(		"ThemeImageEditor_face_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 4 )),] )

ThemeImageEditor_face_dot_get = _rpythonic_function_(		"ThemeImageEditor_face_dot_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeImageEditor_facedot_size_get = _rpythonic_function_(		"ThemeImageEditor_facedot_size_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeImageEditor_face_select_get = _rpythonic_function_(		"ThemeImageEditor_face_select_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 4 )),] )

ThemeImageEditor_header_get = _rpythonic_function_(		"ThemeImageEditor_header_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeImageEditor_header_text_get = _rpythonic_function_(		"ThemeImageEditor_header_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeImageEditor_header_text_hi_get = _rpythonic_function_(		"ThemeImageEditor_header_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeImageEditor_button_get = _rpythonic_function_(		"ThemeImageEditor_button_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeImageEditor_button_text_get = _rpythonic_function_(		"ThemeImageEditor_button_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeImageEditor_button_text_hi_get = _rpythonic_function_(		"ThemeImageEditor_button_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeImageEditor_button_title_get = _rpythonic_function_(		"ThemeImageEditor_button_title_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeImageEditor_scope_back_get = _rpythonic_function_(		"ThemeImageEditor_scope_back_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 4 )),] )

ThemeImageEditor_text_get = _rpythonic_function_(		"ThemeImageEditor_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeImageEditor_text_hi_get = _rpythonic_function_(		"ThemeImageEditor_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeImageEditor_title_get = _rpythonic_function_(		"ThemeImageEditor_title_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeImageEditor_vertex_get = _rpythonic_function_(		"ThemeImageEditor_vertex_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeImageEditor_vertex_select_get = _rpythonic_function_(		"ThemeImageEditor_vertex_select_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeImageEditor_vertex_size_get = _rpythonic_function_(		"ThemeImageEditor_vertex_size_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeImageEditor_back_get = _rpythonic_function_(		"ThemeImageEditor_back_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeInfo_rna_type_get = _rpythonic_function_(		"ThemeInfo_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeInfo_header_get = _rpythonic_function_(		"ThemeInfo_header_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeInfo_header_text_get = _rpythonic_function_(		"ThemeInfo_header_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeInfo_header_text_hi_get = _rpythonic_function_(		"ThemeInfo_header_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeInfo_button_get = _rpythonic_function_(		"ThemeInfo_button_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeInfo_button_text_get = _rpythonic_function_(		"ThemeInfo_button_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeInfo_button_text_hi_get = _rpythonic_function_(		"ThemeInfo_button_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeInfo_button_title_get = _rpythonic_function_(		"ThemeInfo_button_title_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeInfo_text_get = _rpythonic_function_(		"ThemeInfo_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeInfo_text_hi_get = _rpythonic_function_(		"ThemeInfo_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeInfo_title_get = _rpythonic_function_(		"ThemeInfo_title_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeInfo_back_get = _rpythonic_function_(		"ThemeInfo_back_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeLogicEditor_rna_type_get = _rpythonic_function_(		"ThemeLogicEditor_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeLogicEditor_header_get = _rpythonic_function_(		"ThemeLogicEditor_header_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeLogicEditor_header_text_get = _rpythonic_function_(		"ThemeLogicEditor_header_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeLogicEditor_header_text_hi_get = _rpythonic_function_(		"ThemeLogicEditor_header_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeLogicEditor_panel_get = _rpythonic_function_(		"ThemeLogicEditor_panel_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeLogicEditor_button_get = _rpythonic_function_(		"ThemeLogicEditor_button_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeLogicEditor_button_text_get = _rpythonic_function_(		"ThemeLogicEditor_button_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeLogicEditor_button_text_hi_get = _rpythonic_function_(		"ThemeLogicEditor_button_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeLogicEditor_button_title_get = _rpythonic_function_(		"ThemeLogicEditor_button_title_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeLogicEditor_text_get = _rpythonic_function_(		"ThemeLogicEditor_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeLogicEditor_text_hi_get = _rpythonic_function_(		"ThemeLogicEditor_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeLogicEditor_title_get = _rpythonic_function_(		"ThemeLogicEditor_title_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeLogicEditor_back_get = _rpythonic_function_(		"ThemeLogicEditor_back_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeNLAEditor_rna_type_get = _rpythonic_function_(		"ThemeNLAEditor_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeNLAEditor_bars_get = _rpythonic_function_(		"ThemeNLAEditor_bars_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeNLAEditor_bars_selected_get = _rpythonic_function_(		"ThemeNLAEditor_bars_selected_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeNLAEditor_frame_current_get = _rpythonic_function_(		"ThemeNLAEditor_frame_current_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeNLAEditor_grid_get = _rpythonic_function_(		"ThemeNLAEditor_grid_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeNLAEditor_header_get = _rpythonic_function_(		"ThemeNLAEditor_header_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeNLAEditor_header_text_get = _rpythonic_function_(		"ThemeNLAEditor_header_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeNLAEditor_header_text_hi_get = _rpythonic_function_(		"ThemeNLAEditor_header_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeNLAEditor_button_get = _rpythonic_function_(		"ThemeNLAEditor_button_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeNLAEditor_button_text_get = _rpythonic_function_(		"ThemeNLAEditor_button_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeNLAEditor_button_text_hi_get = _rpythonic_function_(		"ThemeNLAEditor_button_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeNLAEditor_button_title_get = _rpythonic_function_(		"ThemeNLAEditor_button_title_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeNLAEditor_list_get = _rpythonic_function_(		"ThemeNLAEditor_list_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeNLAEditor_list_text_get = _rpythonic_function_(		"ThemeNLAEditor_list_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeNLAEditor_list_text_hi_get = _rpythonic_function_(		"ThemeNLAEditor_list_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeNLAEditor_list_title_get = _rpythonic_function_(		"ThemeNLAEditor_list_title_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeNLAEditor_strips_get = _rpythonic_function_(		"ThemeNLAEditor_strips_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeNLAEditor_strips_selected_get = _rpythonic_function_(		"ThemeNLAEditor_strips_selected_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeNLAEditor_text_get = _rpythonic_function_(		"ThemeNLAEditor_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeNLAEditor_text_hi_get = _rpythonic_function_(		"ThemeNLAEditor_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeNLAEditor_title_get = _rpythonic_function_(		"ThemeNLAEditor_title_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeNLAEditor_view_sliders_get = _rpythonic_function_(		"ThemeNLAEditor_view_sliders_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeNLAEditor_back_get = _rpythonic_function_(		"ThemeNLAEditor_back_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeNodeEditor_rna_type_get = _rpythonic_function_(		"ThemeNodeEditor_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeNodeEditor_converter_node_get = _rpythonic_function_(		"ThemeNodeEditor_converter_node_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeNodeEditor_group_node_get = _rpythonic_function_(		"ThemeNodeEditor_group_node_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeNodeEditor_header_get = _rpythonic_function_(		"ThemeNodeEditor_header_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeNodeEditor_header_text_get = _rpythonic_function_(		"ThemeNodeEditor_header_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeNodeEditor_header_text_hi_get = _rpythonic_function_(		"ThemeNodeEditor_header_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeNodeEditor_in_out_node_get = _rpythonic_function_(		"ThemeNodeEditor_in_out_node_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeNodeEditor_node_backdrop_get = _rpythonic_function_(		"ThemeNodeEditor_node_backdrop_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 4 )),] )

ThemeNodeEditor_noodle_curving_get = _rpythonic_function_(		"ThemeNodeEditor_noodle_curving_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeNodeEditor_operator_node_get = _rpythonic_function_(		"ThemeNodeEditor_operator_node_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeNodeEditor_button_get = _rpythonic_function_(		"ThemeNodeEditor_button_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeNodeEditor_button_text_get = _rpythonic_function_(		"ThemeNodeEditor_button_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeNodeEditor_button_text_hi_get = _rpythonic_function_(		"ThemeNodeEditor_button_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeNodeEditor_button_title_get = _rpythonic_function_(		"ThemeNodeEditor_button_title_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeNodeEditor_selected_text_get = _rpythonic_function_(		"ThemeNodeEditor_selected_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeNodeEditor_list_get = _rpythonic_function_(		"ThemeNodeEditor_list_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeNodeEditor_list_text_get = _rpythonic_function_(		"ThemeNodeEditor_list_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeNodeEditor_list_text_hi_get = _rpythonic_function_(		"ThemeNodeEditor_list_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeNodeEditor_list_title_get = _rpythonic_function_(		"ThemeNodeEditor_list_title_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeNodeEditor_text_get = _rpythonic_function_(		"ThemeNodeEditor_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeNodeEditor_text_hi_get = _rpythonic_function_(		"ThemeNodeEditor_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeNodeEditor_title_get = _rpythonic_function_(		"ThemeNodeEditor_title_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeNodeEditor_back_get = _rpythonic_function_(		"ThemeNodeEditor_back_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeNodeEditor_wire_select_get = _rpythonic_function_(		"ThemeNodeEditor_wire_select_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeNodeEditor_wire_get = _rpythonic_function_(		"ThemeNodeEditor_wire_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeOutliner_rna_type_get = _rpythonic_function_(		"ThemeOutliner_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeOutliner_header_get = _rpythonic_function_(		"ThemeOutliner_header_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeOutliner_header_text_get = _rpythonic_function_(		"ThemeOutliner_header_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeOutliner_header_text_hi_get = _rpythonic_function_(		"ThemeOutliner_header_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeOutliner_button_get = _rpythonic_function_(		"ThemeOutliner_button_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeOutliner_button_text_get = _rpythonic_function_(		"ThemeOutliner_button_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeOutliner_button_text_hi_get = _rpythonic_function_(		"ThemeOutliner_button_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeOutliner_button_title_get = _rpythonic_function_(		"ThemeOutliner_button_title_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeOutliner_text_get = _rpythonic_function_(		"ThemeOutliner_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeOutliner_text_hi_get = _rpythonic_function_(		"ThemeOutliner_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeOutliner_title_get = _rpythonic_function_(		"ThemeOutliner_title_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeOutliner_back_get = _rpythonic_function_(		"ThemeOutliner_back_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeProperties_rna_type_get = _rpythonic_function_(		"ThemeProperties_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeProperties_header_get = _rpythonic_function_(		"ThemeProperties_header_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeProperties_header_text_get = _rpythonic_function_(		"ThemeProperties_header_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeProperties_header_text_hi_get = _rpythonic_function_(		"ThemeProperties_header_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeProperties_panel_get = _rpythonic_function_(		"ThemeProperties_panel_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeProperties_button_get = _rpythonic_function_(		"ThemeProperties_button_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeProperties_button_text_get = _rpythonic_function_(		"ThemeProperties_button_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeProperties_button_text_hi_get = _rpythonic_function_(		"ThemeProperties_button_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeProperties_button_title_get = _rpythonic_function_(		"ThemeProperties_button_title_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeProperties_text_get = _rpythonic_function_(		"ThemeProperties_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeProperties_text_hi_get = _rpythonic_function_(		"ThemeProperties_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeProperties_title_get = _rpythonic_function_(		"ThemeProperties_title_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeProperties_back_get = _rpythonic_function_(		"ThemeProperties_back_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeSequenceEditor_rna_type_get = _rpythonic_function_(		"ThemeSequenceEditor_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeSequenceEditor_audio_strip_get = _rpythonic_function_(		"ThemeSequenceEditor_audio_strip_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeSequenceEditor_frame_current_get = _rpythonic_function_(		"ThemeSequenceEditor_frame_current_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeSequenceEditor_draw_action_get = _rpythonic_function_(		"ThemeSequenceEditor_draw_action_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeSequenceEditor_effect_strip_get = _rpythonic_function_(		"ThemeSequenceEditor_effect_strip_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeSequenceEditor_grid_get = _rpythonic_function_(		"ThemeSequenceEditor_grid_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeSequenceEditor_header_get = _rpythonic_function_(		"ThemeSequenceEditor_header_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeSequenceEditor_header_text_get = _rpythonic_function_(		"ThemeSequenceEditor_header_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeSequenceEditor_header_text_hi_get = _rpythonic_function_(		"ThemeSequenceEditor_header_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeSequenceEditor_image_strip_get = _rpythonic_function_(		"ThemeSequenceEditor_image_strip_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeSequenceEditor_keyframe_get = _rpythonic_function_(		"ThemeSequenceEditor_keyframe_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeSequenceEditor_meta_strip_get = _rpythonic_function_(		"ThemeSequenceEditor_meta_strip_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeSequenceEditor_movie_strip_get = _rpythonic_function_(		"ThemeSequenceEditor_movie_strip_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeSequenceEditor_plugin_strip_get = _rpythonic_function_(		"ThemeSequenceEditor_plugin_strip_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeSequenceEditor_button_get = _rpythonic_function_(		"ThemeSequenceEditor_button_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeSequenceEditor_button_text_get = _rpythonic_function_(		"ThemeSequenceEditor_button_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeSequenceEditor_button_text_hi_get = _rpythonic_function_(		"ThemeSequenceEditor_button_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeSequenceEditor_button_title_get = _rpythonic_function_(		"ThemeSequenceEditor_button_title_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeSequenceEditor_scene_strip_get = _rpythonic_function_(		"ThemeSequenceEditor_scene_strip_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeSequenceEditor_text_get = _rpythonic_function_(		"ThemeSequenceEditor_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeSequenceEditor_text_hi_get = _rpythonic_function_(		"ThemeSequenceEditor_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeSequenceEditor_title_get = _rpythonic_function_(		"ThemeSequenceEditor_title_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeSequenceEditor_transition_strip_get = _rpythonic_function_(		"ThemeSequenceEditor_transition_strip_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeSequenceEditor_back_get = _rpythonic_function_(		"ThemeSequenceEditor_back_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeSequenceEditor_window_sliders_get = _rpythonic_function_(		"ThemeSequenceEditor_window_sliders_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeStyle_rna_type_get = _rpythonic_function_(		"ThemeStyle_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeStyle_panel_title_get = _rpythonic_function_(		"ThemeStyle_panel_title_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeStyle_widget_label_get = _rpythonic_function_(		"ThemeStyle_widget_label_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeStyle_widget_get = _rpythonic_function_(		"ThemeStyle_widget_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeTextEditor_rna_type_get = _rpythonic_function_(		"ThemeTextEditor_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeTextEditor_cursor_get = _rpythonic_function_(		"ThemeTextEditor_cursor_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeTextEditor_header_get = _rpythonic_function_(		"ThemeTextEditor_header_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeTextEditor_header_text_get = _rpythonic_function_(		"ThemeTextEditor_header_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeTextEditor_header_text_hi_get = _rpythonic_function_(		"ThemeTextEditor_header_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeTextEditor_line_numbers_background_get = _rpythonic_function_(		"ThemeTextEditor_line_numbers_background_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeTextEditor_button_get = _rpythonic_function_(		"ThemeTextEditor_button_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeTextEditor_button_text_get = _rpythonic_function_(		"ThemeTextEditor_button_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeTextEditor_button_text_hi_get = _rpythonic_function_(		"ThemeTextEditor_button_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeTextEditor_button_title_get = _rpythonic_function_(		"ThemeTextEditor_button_title_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeTextEditor_scroll_bar_get = _rpythonic_function_(		"ThemeTextEditor_scroll_bar_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeTextEditor_selected_text_get = _rpythonic_function_(		"ThemeTextEditor_selected_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeTextEditor_syntax_builtin_get = _rpythonic_function_(		"ThemeTextEditor_syntax_builtin_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeTextEditor_syntax_comment_get = _rpythonic_function_(		"ThemeTextEditor_syntax_comment_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeTextEditor_syntax_numbers_get = _rpythonic_function_(		"ThemeTextEditor_syntax_numbers_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeTextEditor_syntax_special_get = _rpythonic_function_(		"ThemeTextEditor_syntax_special_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeTextEditor_syntax_string_get = _rpythonic_function_(		"ThemeTextEditor_syntax_string_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeTextEditor_text_get = _rpythonic_function_(		"ThemeTextEditor_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeTextEditor_text_hi_get = _rpythonic_function_(		"ThemeTextEditor_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeTextEditor_title_get = _rpythonic_function_(		"ThemeTextEditor_title_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeTextEditor_back_get = _rpythonic_function_(		"ThemeTextEditor_back_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeTimeline_rna_type_get = _rpythonic_function_(		"ThemeTimeline_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeTimeline_frame_current_get = _rpythonic_function_(		"ThemeTimeline_frame_current_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeTimeline_grid_get = _rpythonic_function_(		"ThemeTimeline_grid_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeTimeline_header_get = _rpythonic_function_(		"ThemeTimeline_header_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeTimeline_header_text_get = _rpythonic_function_(		"ThemeTimeline_header_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeTimeline_header_text_hi_get = _rpythonic_function_(		"ThemeTimeline_header_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeTimeline_button_get = _rpythonic_function_(		"ThemeTimeline_button_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeTimeline_button_text_get = _rpythonic_function_(		"ThemeTimeline_button_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeTimeline_button_text_hi_get = _rpythonic_function_(		"ThemeTimeline_button_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeTimeline_button_title_get = _rpythonic_function_(		"ThemeTimeline_button_title_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeTimeline_text_get = _rpythonic_function_(		"ThemeTimeline_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeTimeline_text_hi_get = _rpythonic_function_(		"ThemeTimeline_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeTimeline_title_get = _rpythonic_function_(		"ThemeTimeline_title_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeTimeline_back_get = _rpythonic_function_(		"ThemeTimeline_back_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeUserInterface_rna_type_get = _rpythonic_function_(		"ThemeUserInterface_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeUserInterface_wcol_box_get = _rpythonic_function_(		"ThemeUserInterface_wcol_box_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeUserInterface_icon_file_get = _rpythonic_function_(		"ThemeUserInterface_icon_file_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ThemeUserInterface_icon_file_length = _rpythonic_function_(		"ThemeUserInterface_icon_file_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeUserInterface_wcol_list_item_get = _rpythonic_function_(		"ThemeUserInterface_wcol_list_item_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeUserInterface_wcol_menu_back_get = _rpythonic_function_(		"ThemeUserInterface_wcol_menu_back_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeUserInterface_wcol_menu_item_get = _rpythonic_function_(		"ThemeUserInterface_wcol_menu_item_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeUserInterface_wcol_menu_get = _rpythonic_function_(		"ThemeUserInterface_wcol_menu_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeUserInterface_wcol_num_get = _rpythonic_function_(		"ThemeUserInterface_wcol_num_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeUserInterface_wcol_option_get = _rpythonic_function_(		"ThemeUserInterface_wcol_option_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeUserInterface_wcol_progress_get = _rpythonic_function_(		"ThemeUserInterface_wcol_progress_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeUserInterface_wcol_pulldown_get = _rpythonic_function_(		"ThemeUserInterface_wcol_pulldown_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeUserInterface_wcol_radio_get = _rpythonic_function_(		"ThemeUserInterface_wcol_radio_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeUserInterface_wcol_regular_get = _rpythonic_function_(		"ThemeUserInterface_wcol_regular_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeUserInterface_wcol_scroll_get = _rpythonic_function_(		"ThemeUserInterface_wcol_scroll_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeUserInterface_wcol_numslider_get = _rpythonic_function_(		"ThemeUserInterface_wcol_numslider_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeUserInterface_wcol_state_get = _rpythonic_function_(		"ThemeUserInterface_wcol_state_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeUserInterface_wcol_text_get = _rpythonic_function_(		"ThemeUserInterface_wcol_text_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeUserInterface_wcol_toggle_get = _rpythonic_function_(		"ThemeUserInterface_wcol_toggle_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeUserInterface_wcol_tool_get = _rpythonic_function_(		"ThemeUserInterface_wcol_tool_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeUserPreferences_rna_type_get = _rpythonic_function_(		"ThemeUserPreferences_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeUserPreferences_header_get = _rpythonic_function_(		"ThemeUserPreferences_header_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeUserPreferences_header_text_get = _rpythonic_function_(		"ThemeUserPreferences_header_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeUserPreferences_header_text_hi_get = _rpythonic_function_(		"ThemeUserPreferences_header_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeUserPreferences_button_get = _rpythonic_function_(		"ThemeUserPreferences_button_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeUserPreferences_button_text_get = _rpythonic_function_(		"ThemeUserPreferences_button_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeUserPreferences_button_text_hi_get = _rpythonic_function_(		"ThemeUserPreferences_button_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeUserPreferences_button_title_get = _rpythonic_function_(		"ThemeUserPreferences_button_title_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeUserPreferences_text_get = _rpythonic_function_(		"ThemeUserPreferences_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeUserPreferences_text_hi_get = _rpythonic_function_(		"ThemeUserPreferences_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeUserPreferences_title_get = _rpythonic_function_(		"ThemeUserPreferences_title_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeUserPreferences_back_get = _rpythonic_function_(		"ThemeUserPreferences_back_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_rna_type_get = _rpythonic_function_(		"ThemeView3D_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeView3D_object_active_get = _rpythonic_function_(		"ThemeView3D_object_active_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_editmesh_active_get = _rpythonic_function_(		"ThemeView3D_editmesh_active_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 4 )),] )

ThemeView3D_act_spline_get = _rpythonic_function_(		"ThemeView3D_act_spline_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_handle_align_get = _rpythonic_function_(		"ThemeView3D_handle_align_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_handle_sel_align_get = _rpythonic_function_(		"ThemeView3D_handle_sel_align_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_handle_auto_get = _rpythonic_function_(		"ThemeView3D_handle_auto_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_handle_sel_auto_get = _rpythonic_function_(		"ThemeView3D_handle_sel_auto_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_bone_pose_get = _rpythonic_function_(		"ThemeView3D_bone_pose_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_bone_solid_get = _rpythonic_function_(		"ThemeView3D_bone_solid_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_frame_current_get = _rpythonic_function_(		"ThemeView3D_frame_current_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_edge_crease_get = _rpythonic_function_(		"ThemeView3D_edge_crease_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_extra_edge_len_get = _rpythonic_function_(		"ThemeView3D_extra_edge_len_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_edge_seam_get = _rpythonic_function_(		"ThemeView3D_edge_seam_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_edge_select_get = _rpythonic_function_(		"ThemeView3D_edge_select_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_edge_sharp_get = _rpythonic_function_(		"ThemeView3D_edge_sharp_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_edge_facesel_get = _rpythonic_function_(		"ThemeView3D_edge_facesel_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_face_get = _rpythonic_function_(		"ThemeView3D_face_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 4 )),] )

ThemeView3D_extra_face_angle_get = _rpythonic_function_(		"ThemeView3D_extra_face_angle_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_extra_face_area_get = _rpythonic_function_(		"ThemeView3D_extra_face_area_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_face_dot_get = _rpythonic_function_(		"ThemeView3D_face_dot_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_facedot_size_get = _rpythonic_function_(		"ThemeView3D_facedot_size_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeView3D_normal_get = _rpythonic_function_(		"ThemeView3D_normal_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_face_select_get = _rpythonic_function_(		"ThemeView3D_face_select_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 4 )),] )

ThemeView3D_handle_free_get = _rpythonic_function_(		"ThemeView3D_handle_free_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_handle_sel_free_get = _rpythonic_function_(		"ThemeView3D_handle_sel_free_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_grid_get = _rpythonic_function_(		"ThemeView3D_grid_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_header_get = _rpythonic_function_(		"ThemeView3D_header_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_header_text_get = _rpythonic_function_(		"ThemeView3D_header_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_header_text_hi_get = _rpythonic_function_(		"ThemeView3D_header_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_lamp_get = _rpythonic_function_(		"ThemeView3D_lamp_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 4 )),] )

ThemeView3D_lastsel_point_get = _rpythonic_function_(		"ThemeView3D_lastsel_point_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_nurb_uline_get = _rpythonic_function_(		"ThemeView3D_nurb_uline_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_nurb_vline_get = _rpythonic_function_(		"ThemeView3D_nurb_vline_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_nurb_sel_uline_get = _rpythonic_function_(		"ThemeView3D_nurb_sel_uline_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_nurb_sel_vline_get = _rpythonic_function_(		"ThemeView3D_nurb_sel_vline_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_object_grouped_get = _rpythonic_function_(		"ThemeView3D_object_grouped_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_object_grouped_active_get = _rpythonic_function_(		"ThemeView3D_object_grouped_active_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_object_selected_get = _rpythonic_function_(		"ThemeView3D_object_selected_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_outline_width_get = _rpythonic_function_(		"ThemeView3D_outline_width_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeView3D_panel_get = _rpythonic_function_(		"ThemeView3D_panel_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 4 )),] )

ThemeView3D_button_get = _rpythonic_function_(		"ThemeView3D_button_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_button_text_get = _rpythonic_function_(		"ThemeView3D_button_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_button_text_hi_get = _rpythonic_function_(		"ThemeView3D_button_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_button_title_get = _rpythonic_function_(		"ThemeView3D_button_title_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_speaker_get = _rpythonic_function_(		"ThemeView3D_speaker_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_text_get = _rpythonic_function_(		"ThemeView3D_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_text_hi_get = _rpythonic_function_(		"ThemeView3D_text_hi_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_title_get = _rpythonic_function_(		"ThemeView3D_title_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_transform_get = _rpythonic_function_(		"ThemeView3D_transform_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_handle_vect_get = _rpythonic_function_(		"ThemeView3D_handle_vect_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_handle_sel_vect_get = _rpythonic_function_(		"ThemeView3D_handle_sel_vect_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_vertex_get = _rpythonic_function_(		"ThemeView3D_vertex_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_vertex_normal_get = _rpythonic_function_(		"ThemeView3D_vertex_normal_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_vertex_select_get = _rpythonic_function_(		"ThemeView3D_vertex_select_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_vertex_size_get = _rpythonic_function_(		"ThemeView3D_vertex_size_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeView3D_back_get = _rpythonic_function_(		"ThemeView3D_back_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeView3D_wire_get = _rpythonic_function_(		"ThemeView3D_wire_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeWidgetColors_rna_type_get = _rpythonic_function_(		"ThemeWidgetColors_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeWidgetColors_inner_get = _rpythonic_function_(		"ThemeWidgetColors_inner_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 4 )),] )

ThemeWidgetColors_inner_sel_get = _rpythonic_function_(		"ThemeWidgetColors_inner_sel_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 4 )),] )

ThemeWidgetColors_item_get = _rpythonic_function_(		"ThemeWidgetColors_item_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 4 )),] )

ThemeWidgetColors_outline_get = _rpythonic_function_(		"ThemeWidgetColors_outline_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeWidgetColors_shadedown_get = _rpythonic_function_(		"ThemeWidgetColors_shadedown_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeWidgetColors_shadetop_get = _rpythonic_function_(		"ThemeWidgetColors_shadetop_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeWidgetColors_show_shaded_get = _rpythonic_function_(		"ThemeWidgetColors_show_shaded_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeWidgetColors_text_get = _rpythonic_function_(		"ThemeWidgetColors_text_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeWidgetColors_text_sel_get = _rpythonic_function_(		"ThemeWidgetColors_text_sel_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeWidgetStateColors_rna_type_get = _rpythonic_function_(		"ThemeWidgetStateColors_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeWidgetStateColors_inner_anim_get = _rpythonic_function_(		"ThemeWidgetStateColors_inner_anim_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeWidgetStateColors_inner_anim_sel_get = _rpythonic_function_(		"ThemeWidgetStateColors_inner_anim_sel_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeWidgetStateColors_blend_get = _rpythonic_function_(		"ThemeWidgetStateColors_blend_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ThemeWidgetStateColors_inner_driven_get = _rpythonic_function_(		"ThemeWidgetStateColors_inner_driven_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeWidgetStateColors_inner_driven_sel_get = _rpythonic_function_(		"ThemeWidgetStateColors_inner_driven_sel_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeWidgetStateColors_inner_key_get = _rpythonic_function_(		"ThemeWidgetStateColors_inner_key_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ThemeWidgetStateColors_inner_key_sel_get = _rpythonic_function_(		"ThemeWidgetStateColors_inner_key_sel_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

TimelineMarker_rna_type_get = _rpythonic_function_(		"TimelineMarker_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TimelineMarker_name_get = _rpythonic_function_(		"TimelineMarker_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

TimelineMarker_name_length = _rpythonic_function_(		"TimelineMarker_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TimelineMarker_camera_get = _rpythonic_function_(		"TimelineMarker_camera_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TimelineMarker_frame_get = _rpythonic_function_(		"TimelineMarker_frame_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TimelineMarker_select_get = _rpythonic_function_(		"TimelineMarker_select_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TimelineMarkers_rna_type_get = _rpythonic_function_(		"TimelineMarkers_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Timer_rna_type_get = _rpythonic_function_(		"Timer_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Timer_time_delta_get = _rpythonic_function_(		"Timer_time_delta_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Timer_time_duration_get = _rpythonic_function_(		"Timer_time_duration_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Timer_time_step_get = _rpythonic_function_(		"Timer_time_step_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ToolSettings_rna_type_get = _rpythonic_function_(		"ToolSettings_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ToolSettings_use_keyframe_insert_keyingset_get = _rpythonic_function_(		"ToolSettings_use_keyframe_insert_keyingset_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ToolSettings_use_keyframe_insert_auto_get = _rpythonic_function_(		"ToolSettings_use_keyframe_insert_auto_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ToolSettings_auto_keying_mode_get = _rpythonic_function_(		"ToolSettings_auto_keying_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ToolSettings_use_mesh_automerge_get = _rpythonic_function_(		"ToolSettings_use_mesh_automerge_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ToolSettings_use_etch_autoname_get = _rpythonic_function_(		"ToolSettings_use_etch_autoname_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ToolSettings_edge_path_mode_get = _rpythonic_function_(		"ToolSettings_edge_path_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ToolSettings_image_paint_get = _rpythonic_function_(		"ToolSettings_image_paint_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ToolSettings_use_record_with_nla_get = _rpythonic_function_(		"ToolSettings_use_record_with_nla_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ToolSettings_etch_length_limit_get = _rpythonic_function_(		"ToolSettings_etch_length_limit_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ToolSettings_etch_adaptive_limit_get = _rpythonic_function_(		"ToolSettings_etch_adaptive_limit_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ToolSettings_edge_path_live_unwrap_get = _rpythonic_function_(		"ToolSettings_edge_path_live_unwrap_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ToolSettings_mesh_select_mode_get = _rpythonic_function_(		"ToolSettings_mesh_select_mode_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_int * 3 )),] )

ToolSettings_normal_size_get = _rpythonic_function_(		"ToolSettings_normal_size_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ToolSettings_etch_number_get = _rpythonic_function_(		"ToolSettings_etch_number_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ToolSettings_etch_number_length = _rpythonic_function_(		"ToolSettings_etch_number_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ToolSettings_use_etch_overdraw_get = _rpythonic_function_(		"ToolSettings_use_etch_overdraw_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ToolSettings_particle_edit_get = _rpythonic_function_(		"ToolSettings_particle_edit_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ToolSettings_use_snap_project_get = _rpythonic_function_(		"ToolSettings_use_snap_project_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ToolSettings_use_snap_self_get = _rpythonic_function_(		"ToolSettings_use_snap_self_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ToolSettings_proportional_edit_get = _rpythonic_function_(		"ToolSettings_proportional_edit_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ToolSettings_proportional_edit_falloff_get = _rpythonic_function_(		"ToolSettings_proportional_edit_falloff_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ToolSettings_use_proportional_edit_objects_get = _rpythonic_function_(		"ToolSettings_use_proportional_edit_objects_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ToolSettings_proportional_size_get = _rpythonic_function_(		"ToolSettings_proportional_size_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ToolSettings_use_etch_quick_get = _rpythonic_function_(		"ToolSettings_use_etch_quick_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ToolSettings_etch_roll_mode_get = _rpythonic_function_(		"ToolSettings_etch_roll_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ToolSettings_sculpt_get = _rpythonic_function_(		"ToolSettings_sculpt_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ToolSettings_sculpt_paint_use_unified_size_get = _rpythonic_function_(		"ToolSettings_sculpt_paint_use_unified_size_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ToolSettings_sculpt_paint_use_unified_strength_get = _rpythonic_function_(		"ToolSettings_sculpt_paint_use_unified_strength_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ToolSettings_etch_side_get = _rpythonic_function_(		"ToolSettings_etch_side_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

ToolSettings_etch_side_length = _rpythonic_function_(		"ToolSettings_etch_side_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ToolSettings_use_snap_get = _rpythonic_function_(		"ToolSettings_use_snap_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ToolSettings_use_snap_align_rotation_get = _rpythonic_function_(		"ToolSettings_use_snap_align_rotation_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ToolSettings_snap_element_get = _rpythonic_function_(		"ToolSettings_snap_element_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ToolSettings_use_snap_peel_object_get = _rpythonic_function_(		"ToolSettings_use_snap_peel_object_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ToolSettings_snap_target_get = _rpythonic_function_(		"ToolSettings_snap_target_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ToolSettings_etch_convert_mode_get = _rpythonic_function_(		"ToolSettings_etch_convert_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ToolSettings_etch_subdivision_number_get = _rpythonic_function_(		"ToolSettings_etch_subdivision_number_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ToolSettings_etch_template_get = _rpythonic_function_(		"ToolSettings_etch_template_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ToolSettings_show_uv_local_view_get = _rpythonic_function_(		"ToolSettings_show_uv_local_view_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ToolSettings_uv_select_mode_get = _rpythonic_function_(		"ToolSettings_uv_select_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ToolSettings_use_uv_select_sync_get = _rpythonic_function_(		"ToolSettings_use_uv_select_sync_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ToolSettings_use_bone_sketching_get = _rpythonic_function_(		"ToolSettings_use_bone_sketching_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ToolSettings_use_grease_pencil_sessions_get = _rpythonic_function_(		"ToolSettings_use_grease_pencil_sessions_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ToolSettings_vertex_group_weight_get = _rpythonic_function_(		"ToolSettings_vertex_group_weight_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ToolSettings_vertex_paint_get = _rpythonic_function_(		"ToolSettings_vertex_paint_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ToolSettings_use_auto_normalize_get = _rpythonic_function_(		"ToolSettings_use_auto_normalize_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ToolSettings_weight_paint_get = _rpythonic_function_(		"ToolSettings_weight_paint_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TouchSensor_material_get = _rpythonic_function_(		"TouchSensor_material_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TrackToConstraint_head_tail_get = _rpythonic_function_(		"TrackToConstraint_head_tail_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TrackToConstraint_subtarget_get = _rpythonic_function_(		"TrackToConstraint_subtarget_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

TrackToConstraint_subtarget_length = _rpythonic_function_(		"TrackToConstraint_subtarget_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TrackToConstraint_target_get = _rpythonic_function_(		"TrackToConstraint_target_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TrackToConstraint_use_target_z_get = _rpythonic_function_(		"TrackToConstraint_use_target_z_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TrackToConstraint_track_axis_get = _rpythonic_function_(		"TrackToConstraint_track_axis_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TrackToConstraint_up_axis_get = _rpythonic_function_(		"TrackToConstraint_up_axis_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TransformConstraint_use_motion_extrapolate_get = _rpythonic_function_(		"TransformConstraint_use_motion_extrapolate_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TransformConstraint_from_max_x_get = _rpythonic_function_(		"TransformConstraint_from_max_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TransformConstraint_from_max_y_get = _rpythonic_function_(		"TransformConstraint_from_max_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TransformConstraint_from_max_z_get = _rpythonic_function_(		"TransformConstraint_from_max_z_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TransformConstraint_from_min_x_get = _rpythonic_function_(		"TransformConstraint_from_min_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TransformConstraint_from_min_y_get = _rpythonic_function_(		"TransformConstraint_from_min_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TransformConstraint_from_min_z_get = _rpythonic_function_(		"TransformConstraint_from_min_z_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TransformConstraint_map_from_get = _rpythonic_function_(		"TransformConstraint_map_from_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TransformConstraint_map_to_get = _rpythonic_function_(		"TransformConstraint_map_to_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TransformConstraint_map_to_x_from_get = _rpythonic_function_(		"TransformConstraint_map_to_x_from_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TransformConstraint_map_to_y_from_get = _rpythonic_function_(		"TransformConstraint_map_to_y_from_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TransformConstraint_map_to_z_from_get = _rpythonic_function_(		"TransformConstraint_map_to_z_from_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TransformConstraint_subtarget_get = _rpythonic_function_(		"TransformConstraint_subtarget_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

TransformConstraint_subtarget_length = _rpythonic_function_(		"TransformConstraint_subtarget_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TransformConstraint_target_get = _rpythonic_function_(		"TransformConstraint_target_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TransformConstraint_to_max_x_get = _rpythonic_function_(		"TransformConstraint_to_max_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TransformConstraint_to_max_y_get = _rpythonic_function_(		"TransformConstraint_to_max_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TransformConstraint_to_max_z_get = _rpythonic_function_(		"TransformConstraint_to_max_z_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TransformConstraint_to_min_x_get = _rpythonic_function_(		"TransformConstraint_to_min_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TransformConstraint_to_min_y_get = _rpythonic_function_(		"TransformConstraint_to_min_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TransformConstraint_to_min_z_get = _rpythonic_function_(		"TransformConstraint_to_min_z_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TransformOrientation_rna_type_get = _rpythonic_function_(		"TransformOrientation_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TransformOrientation_name_get = _rpythonic_function_(		"TransformOrientation_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

TransformOrientation_name_length = _rpythonic_function_(		"TransformOrientation_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TransformOrientation_matrix_get = _rpythonic_function_(		"TransformOrientation_matrix_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 9 )),] )

TransformSequence_interpolation_get = _rpythonic_function_(		"TransformSequence_interpolation_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TransformSequence_rotation_start_get = _rpythonic_function_(		"TransformSequence_rotation_start_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TransformSequence_scale_start_x_get = _rpythonic_function_(		"TransformSequence_scale_start_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TransformSequence_scale_start_y_get = _rpythonic_function_(		"TransformSequence_scale_start_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TransformSequence_translate_start_x_get = _rpythonic_function_(		"TransformSequence_translate_start_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TransformSequence_translate_start_y_get = _rpythonic_function_(		"TransformSequence_translate_start_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TransformSequence_translation_unit_get = _rpythonic_function_(		"TransformSequence_translation_unit_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

TransformSequence_use_uniform_scale_get = _rpythonic_function_(		"TransformSequence_use_uniform_scale_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UILayout_rna_type_get = _rpythonic_function_(		"UILayout_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UILayout_enabled_get = _rpythonic_function_(		"UILayout_enabled_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UILayout_scale_x_get = _rpythonic_function_(		"UILayout_scale_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UILayout_scale_y_get = _rpythonic_function_(		"UILayout_scale_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UILayout_active_get = _rpythonic_function_(		"UILayout_active_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UILayout_alert_get = _rpythonic_function_(		"UILayout_alert_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UILayout_alignment_get = _rpythonic_function_(		"UILayout_alignment_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UILayout_operator_context_get = _rpythonic_function_(		"UILayout_operator_context_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UVProjectModifier_aspect_x_get = _rpythonic_function_(		"UVProjectModifier_aspect_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UVProjectModifier_scale_x_get = _rpythonic_function_(		"UVProjectModifier_scale_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UVProjectModifier_image_get = _rpythonic_function_(		"UVProjectModifier_image_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UVProjectModifier_projector_count_get = _rpythonic_function_(		"UVProjectModifier_projector_count_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UVProjectModifier_use_image_override_get = _rpythonic_function_(		"UVProjectModifier_use_image_override_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UVProjectModifier_projectors_begin = _rpythonic_function_(		"UVProjectModifier_projectors_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UVProjectModifier_projectors_next = _rpythonic_function_(		"UVProjectModifier_projectors_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

UVProjectModifier_projectors_end = _rpythonic_function_(		"UVProjectModifier_projectors_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

UVProjectModifier_uv_layer_get = _rpythonic_function_(		"UVProjectModifier_uv_layer_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

UVProjectModifier_uv_layer_length = _rpythonic_function_(		"UVProjectModifier_uv_layer_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UVProjectModifier_aspect_y_get = _rpythonic_function_(		"UVProjectModifier_aspect_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UVProjectModifier_scale_y_get = _rpythonic_function_(		"UVProjectModifier_scale_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UVProjector_rna_type_get = _rpythonic_function_(		"UVProjector_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UVProjector_object_get = _rpythonic_function_(		"UVProjector_object_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UVTextures_rna_type_get = _rpythonic_function_(		"UVTextures_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UVTextures_active_get = _rpythonic_function_(		"UVTextures_active_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UVTextures_active_index_get = _rpythonic_function_(		"UVTextures_active_index_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UnitSettings_rna_type_get = _rpythonic_function_(		"UnitSettings_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UnitSettings_system_rotation_get = _rpythonic_function_(		"UnitSettings_system_rotation_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UnitSettings_use_separate_get = _rpythonic_function_(		"UnitSettings_use_separate_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UnitSettings_scale_length_get = _rpythonic_function_(		"UnitSettings_scale_length_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UnitSettings_system_get = _rpythonic_function_(		"UnitSettings_system_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UnknownType_rna_type_get = _rpythonic_function_(		"UnknownType_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferences_rna_type_get = _rpythonic_function_(		"UserPreferences_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferences_active_section_get = _rpythonic_function_(		"UserPreferences_active_section_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferences_addons_begin = _rpythonic_function_(		"UserPreferences_addons_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferences_addons_next = _rpythonic_function_(		"UserPreferences_addons_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

UserPreferences_addons_end = _rpythonic_function_(		"UserPreferences_addons_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

UserPreferences_edit_get = _rpythonic_function_(		"UserPreferences_edit_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferences_filepaths_get = _rpythonic_function_(		"UserPreferences_filepaths_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferences_inputs_get = _rpythonic_function_(		"UserPreferences_inputs_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferences_ui_styles_begin = _rpythonic_function_(		"UserPreferences_ui_styles_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferences_ui_styles_next = _rpythonic_function_(		"UserPreferences_ui_styles_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

UserPreferences_ui_styles_end = _rpythonic_function_(		"UserPreferences_ui_styles_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

UserPreferences_system_get = _rpythonic_function_(		"UserPreferences_system_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferences_themes_begin = _rpythonic_function_(		"UserPreferences_themes_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferences_themes_next = _rpythonic_function_(		"UserPreferences_themes_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

UserPreferences_themes_end = _rpythonic_function_(		"UserPreferences_themes_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

UserPreferences_view_get = _rpythonic_function_(		"UserPreferences_view_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesEdit_rna_type_get = _rpythonic_function_(		"UserPreferencesEdit_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesEdit_object_align_get = _rpythonic_function_(		"UserPreferencesEdit_object_align_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesEdit_use_negative_frames_get = _rpythonic_function_(		"UserPreferencesEdit_use_negative_frames_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesEdit_use_keyframe_insert_available_get = _rpythonic_function_(		"UserPreferencesEdit_use_keyframe_insert_available_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesEdit_use_auto_keying_get = _rpythonic_function_(		"UserPreferencesEdit_use_auto_keying_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesEdit_auto_keying_mode_get = _rpythonic_function_(		"UserPreferencesEdit_auto_keying_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesEdit_use_duplicate_action_get = _rpythonic_function_(		"UserPreferencesEdit_use_duplicate_action_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesEdit_use_duplicate_armature_get = _rpythonic_function_(		"UserPreferencesEdit_use_duplicate_armature_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesEdit_use_duplicate_curve_get = _rpythonic_function_(		"UserPreferencesEdit_use_duplicate_curve_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesEdit_use_duplicate_fcurve_get = _rpythonic_function_(		"UserPreferencesEdit_use_duplicate_fcurve_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesEdit_use_duplicate_lamp_get = _rpythonic_function_(		"UserPreferencesEdit_use_duplicate_lamp_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesEdit_use_duplicate_material_get = _rpythonic_function_(		"UserPreferencesEdit_use_duplicate_material_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesEdit_use_duplicate_mesh_get = _rpythonic_function_(		"UserPreferencesEdit_use_duplicate_mesh_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesEdit_use_duplicate_metaball_get = _rpythonic_function_(		"UserPreferencesEdit_use_duplicate_metaball_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesEdit_use_duplicate_particle_get = _rpythonic_function_(		"UserPreferencesEdit_use_duplicate_particle_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesEdit_use_duplicate_surface_get = _rpythonic_function_(		"UserPreferencesEdit_use_duplicate_surface_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesEdit_use_duplicate_text_get = _rpythonic_function_(		"UserPreferencesEdit_use_duplicate_text_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesEdit_use_duplicate_texture_get = _rpythonic_function_(		"UserPreferencesEdit_use_duplicate_texture_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesEdit_use_enter_edit_mode_get = _rpythonic_function_(		"UserPreferencesEdit_use_enter_edit_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesEdit_use_global_undo_get = _rpythonic_function_(		"UserPreferencesEdit_use_global_undo_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesEdit_grease_pencil_eraser_radius_get = _rpythonic_function_(		"UserPreferencesEdit_grease_pencil_eraser_radius_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesEdit_grease_pencil_euclidean_distance_get = _rpythonic_function_(		"UserPreferencesEdit_grease_pencil_euclidean_distance_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesEdit_grease_pencil_manhattan_distance_get = _rpythonic_function_(		"UserPreferencesEdit_grease_pencil_manhattan_distance_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesEdit_use_grease_pencil_simplify_stroke_get = _rpythonic_function_(		"UserPreferencesEdit_use_grease_pencil_simplify_stroke_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesEdit_use_grease_pencil_smooth_stroke_get = _rpythonic_function_(		"UserPreferencesEdit_use_grease_pencil_smooth_stroke_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesEdit_use_keyframe_insert_needed_get = _rpythonic_function_(		"UserPreferencesEdit_use_keyframe_insert_needed_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesEdit_material_link_get = _rpythonic_function_(		"UserPreferencesEdit_material_link_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesEdit_use_insertkey_xyz_to_rgb_get = _rpythonic_function_(		"UserPreferencesEdit_use_insertkey_xyz_to_rgb_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesEdit_keyframe_new_handle_type_get = _rpythonic_function_(		"UserPreferencesEdit_keyframe_new_handle_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesEdit_keyframe_new_interpolation_type_get = _rpythonic_function_(		"UserPreferencesEdit_keyframe_new_interpolation_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesEdit_use_drag_immediately_get = _rpythonic_function_(		"UserPreferencesEdit_use_drag_immediately_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesEdit_sculpt_paint_overlay_color_get = _rpythonic_function_(		"UserPreferencesEdit_sculpt_paint_overlay_color_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

UserPreferencesEdit_undo_memory_limit_get = _rpythonic_function_(		"UserPreferencesEdit_undo_memory_limit_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesEdit_undo_steps_get = _rpythonic_function_(		"UserPreferencesEdit_undo_steps_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesEdit_use_visual_keying_get = _rpythonic_function_(		"UserPreferencesEdit_use_visual_keying_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesFilePaths_rna_type_get = _rpythonic_function_(		"UserPreferencesFilePaths_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesFilePaths_animation_player_get = _rpythonic_function_(		"UserPreferencesFilePaths_animation_player_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

UserPreferencesFilePaths_animation_player_length = _rpythonic_function_(		"UserPreferencesFilePaths_animation_player_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesFilePaths_animation_player_preset_get = _rpythonic_function_(		"UserPreferencesFilePaths_animation_player_preset_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesFilePaths_use_auto_save_temporary_files_get = _rpythonic_function_(		"UserPreferencesFilePaths_use_auto_save_temporary_files_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesFilePaths_auto_save_time_get = _rpythonic_function_(		"UserPreferencesFilePaths_auto_save_time_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesFilePaths_use_file_compression_get = _rpythonic_function_(		"UserPreferencesFilePaths_use_file_compression_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesFilePaths_use_filter_files_get = _rpythonic_function_(		"UserPreferencesFilePaths_use_filter_files_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesFilePaths_font_directory_get = _rpythonic_function_(		"UserPreferencesFilePaths_font_directory_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

UserPreferencesFilePaths_font_directory_length = _rpythonic_function_(		"UserPreferencesFilePaths_font_directory_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesFilePaths_show_hidden_files_datablocks_get = _rpythonic_function_(		"UserPreferencesFilePaths_show_hidden_files_datablocks_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesFilePaths_hide_recent_locations_get = _rpythonic_function_(		"UserPreferencesFilePaths_hide_recent_locations_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesFilePaths_image_editor_get = _rpythonic_function_(		"UserPreferencesFilePaths_image_editor_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

UserPreferencesFilePaths_image_editor_length = _rpythonic_function_(		"UserPreferencesFilePaths_image_editor_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesFilePaths_use_load_ui_get = _rpythonic_function_(		"UserPreferencesFilePaths_use_load_ui_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesFilePaths_script_directory_get = _rpythonic_function_(		"UserPreferencesFilePaths_script_directory_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

UserPreferencesFilePaths_script_directory_length = _rpythonic_function_(		"UserPreferencesFilePaths_script_directory_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesFilePaths_recent_files_get = _rpythonic_function_(		"UserPreferencesFilePaths_recent_files_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesFilePaths_use_relative_paths_get = _rpythonic_function_(		"UserPreferencesFilePaths_use_relative_paths_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesFilePaths_render_output_directory_get = _rpythonic_function_(		"UserPreferencesFilePaths_render_output_directory_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

UserPreferencesFilePaths_render_output_directory_length = _rpythonic_function_(		"UserPreferencesFilePaths_render_output_directory_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesFilePaths_use_save_preview_images_get = _rpythonic_function_(		"UserPreferencesFilePaths_use_save_preview_images_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesFilePaths_save_version_get = _rpythonic_function_(		"UserPreferencesFilePaths_save_version_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesFilePaths_sequence_plugin_directory_get = _rpythonic_function_(		"UserPreferencesFilePaths_sequence_plugin_directory_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

UserPreferencesFilePaths_sequence_plugin_directory_length = _rpythonic_function_(		"UserPreferencesFilePaths_sequence_plugin_directory_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesFilePaths_show_thumbnails_get = _rpythonic_function_(		"UserPreferencesFilePaths_show_thumbnails_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesFilePaths_sound_directory_get = _rpythonic_function_(		"UserPreferencesFilePaths_sound_directory_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

UserPreferencesFilePaths_sound_directory_length = _rpythonic_function_(		"UserPreferencesFilePaths_sound_directory_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesFilePaths_temporary_directory_get = _rpythonic_function_(		"UserPreferencesFilePaths_temporary_directory_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

UserPreferencesFilePaths_temporary_directory_length = _rpythonic_function_(		"UserPreferencesFilePaths_temporary_directory_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesFilePaths_texture_plugin_directory_get = _rpythonic_function_(		"UserPreferencesFilePaths_texture_plugin_directory_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

UserPreferencesFilePaths_texture_plugin_directory_length = _rpythonic_function_(		"UserPreferencesFilePaths_texture_plugin_directory_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesFilePaths_texture_directory_get = _rpythonic_function_(		"UserPreferencesFilePaths_texture_directory_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

UserPreferencesFilePaths_texture_directory_length = _rpythonic_function_(		"UserPreferencesFilePaths_texture_directory_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesInput_rna_type_get = _rpythonic_function_(		"UserPreferencesInput_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesInput_use_mouse_continuous_get = _rpythonic_function_(		"UserPreferencesInput_use_mouse_continuous_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesInput_mouse_double_click_time_get = _rpythonic_function_(		"UserPreferencesInput_mouse_double_click_time_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesInput_drag_threshold_get = _rpythonic_function_(		"UserPreferencesInput_drag_threshold_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesInput_use_mouse_emulate_3_button_get = _rpythonic_function_(		"UserPreferencesInput_use_mouse_emulate_3_button_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesInput_use_emulate_numpad_get = _rpythonic_function_(		"UserPreferencesInput_use_emulate_numpad_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesInput_ndof_fly_helicopter_get = _rpythonic_function_(		"UserPreferencesInput_ndof_fly_helicopter_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesInput_ndof_orbit_invert_axes_get = _rpythonic_function_(		"UserPreferencesInput_ndof_orbit_invert_axes_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesInput_ndof_zoom_invert_get = _rpythonic_function_(		"UserPreferencesInput_ndof_zoom_invert_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesInput_invert_mouse_zoom_get = _rpythonic_function_(		"UserPreferencesInput_invert_mouse_zoom_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesInput_active_keyconfig_get = _rpythonic_function_(		"UserPreferencesInput_active_keyconfig_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

UserPreferencesInput_active_keyconfig_length = _rpythonic_function_(		"UserPreferencesInput_active_keyconfig_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesInput_ndof_lock_horizon_get = _rpythonic_function_(		"UserPreferencesInput_ndof_lock_horizon_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesInput_use_mouse_mmb_paste_get = _rpythonic_function_(		"UserPreferencesInput_use_mouse_mmb_paste_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesInput_select_mouse_get = _rpythonic_function_(		"UserPreferencesInput_select_mouse_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesInput_ndof_sensitivity_get = _rpythonic_function_(		"UserPreferencesInput_ndof_sensitivity_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesInput_ndof_show_guide_get = _rpythonic_function_(		"UserPreferencesInput_ndof_show_guide_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesInput_view_rotate_method_get = _rpythonic_function_(		"UserPreferencesInput_view_rotate_method_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesInput_invert_zoom_wheel_get = _rpythonic_function_(		"UserPreferencesInput_invert_zoom_wheel_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesInput_wheel_scroll_lines_get = _rpythonic_function_(		"UserPreferencesInput_wheel_scroll_lines_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesInput_ndof_zoom_updown_get = _rpythonic_function_(		"UserPreferencesInput_ndof_zoom_updown_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesInput_view_zoom_axis_get = _rpythonic_function_(		"UserPreferencesInput_view_zoom_axis_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesInput_view_zoom_method_get = _rpythonic_function_(		"UserPreferencesInput_view_zoom_method_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesSystem_rna_type_get = _rpythonic_function_(		"UserPreferencesSystem_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesSystem_anisotropic_filter_get = _rpythonic_function_(		"UserPreferencesSystem_anisotropic_filter_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesSystem_use_antialiasing_get = _rpythonic_function_(		"UserPreferencesSystem_use_antialiasing_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesSystem_audio_channels_get = _rpythonic_function_(		"UserPreferencesSystem_audio_channels_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesSystem_audio_device_get = _rpythonic_function_(		"UserPreferencesSystem_audio_device_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesSystem_audio_mixing_buffer_get = _rpythonic_function_(		"UserPreferencesSystem_audio_mixing_buffer_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesSystem_audio_sample_format_get = _rpythonic_function_(		"UserPreferencesSystem_audio_sample_format_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesSystem_audio_sample_rate_get = _rpythonic_function_(		"UserPreferencesSystem_audio_sample_rate_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesSystem_author_get = _rpythonic_function_(		"UserPreferencesSystem_author_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

UserPreferencesSystem_author_length = _rpythonic_function_(		"UserPreferencesSystem_author_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesSystem_use_scripts_auto_execute_get = _rpythonic_function_(		"UserPreferencesSystem_use_scripts_auto_execute_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesSystem_gl_clip_alpha_get = _rpythonic_function_(		"UserPreferencesSystem_gl_clip_alpha_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesSystem_color_picker_type_get = _rpythonic_function_(		"UserPreferencesSystem_color_picker_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesSystem_dpi_get = _rpythonic_function_(		"UserPreferencesSystem_dpi_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesSystem_use_preview_images_get = _rpythonic_function_(		"UserPreferencesSystem_use_preview_images_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesSystem_screencast_fps_get = _rpythonic_function_(		"UserPreferencesSystem_screencast_fps_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesSystem_frame_server_port_get = _rpythonic_function_(		"UserPreferencesSystem_frame_server_port_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesSystem_gl_texture_limit_get = _rpythonic_function_(		"UserPreferencesSystem_gl_texture_limit_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesSystem_use_international_fonts_get = _rpythonic_function_(		"UserPreferencesSystem_use_international_fonts_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesSystem_language_get = _rpythonic_function_(		"UserPreferencesSystem_language_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesSystem_memory_cache_limit_get = _rpythonic_function_(		"UserPreferencesSystem_memory_cache_limit_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesSystem_use_mipmaps_get = _rpythonic_function_(		"UserPreferencesSystem_use_mipmaps_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesSystem_prefetch_frames_get = _rpythonic_function_(		"UserPreferencesSystem_prefetch_frames_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesSystem_scrollback_get = _rpythonic_function_(		"UserPreferencesSystem_scrollback_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesSystem_solid_lights_begin = _rpythonic_function_(		"UserPreferencesSystem_solid_lights_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesSystem_solid_lights_next = _rpythonic_function_(		"UserPreferencesSystem_solid_lights_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

UserPreferencesSystem_solid_lights_end = _rpythonic_function_(		"UserPreferencesSystem_solid_lights_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

UserPreferencesSystem_use_tabs_as_spaces_get = _rpythonic_function_(		"UserPreferencesSystem_use_tabs_as_spaces_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesSystem_use_text_antialiasing_get = _rpythonic_function_(		"UserPreferencesSystem_use_text_antialiasing_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesSystem_texture_collection_rate_get = _rpythonic_function_(		"UserPreferencesSystem_texture_collection_rate_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesSystem_texture_time_out_get = _rpythonic_function_(		"UserPreferencesSystem_texture_time_out_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesSystem_use_textured_fonts_get = _rpythonic_function_(		"UserPreferencesSystem_use_textured_fonts_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesSystem_use_translate_buttons_get = _rpythonic_function_(		"UserPreferencesSystem_use_translate_buttons_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesSystem_use_translate_toolbox_get = _rpythonic_function_(		"UserPreferencesSystem_use_translate_toolbox_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesSystem_use_translate_tooltips_get = _rpythonic_function_(		"UserPreferencesSystem_use_translate_tooltips_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesSystem_use_weight_color_range_get = _rpythonic_function_(		"UserPreferencesSystem_use_weight_color_range_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesSystem_use_vertex_buffer_objects_get = _rpythonic_function_(		"UserPreferencesSystem_use_vertex_buffer_objects_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesSystem_screencast_wait_time_get = _rpythonic_function_(		"UserPreferencesSystem_screencast_wait_time_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesSystem_weight_color_range_get = _rpythonic_function_(		"UserPreferencesSystem_weight_color_range_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesSystem_window_draw_method_get = _rpythonic_function_(		"UserPreferencesSystem_window_draw_method_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesView_rna_type_get = _rpythonic_function_(		"UserPreferencesView_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesView_view2d_grid_spacing_min_get = _rpythonic_function_(		"UserPreferencesView_view2d_grid_spacing_min_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesView_use_mouse_auto_depth_get = _rpythonic_function_(		"UserPreferencesView_use_mouse_auto_depth_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesView_use_auto_perspective_get = _rpythonic_function_(		"UserPreferencesView_use_auto_perspective_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesView_use_camera_lock_parent_get = _rpythonic_function_(		"UserPreferencesView_use_camera_lock_parent_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesView_use_directional_menus_get = _rpythonic_function_(		"UserPreferencesView_use_directional_menus_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesView_show_object_info_get = _rpythonic_function_(		"UserPreferencesView_show_object_info_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesView_use_global_pivot_get = _rpythonic_function_(		"UserPreferencesView_use_global_pivot_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesView_use_global_scene_get = _rpythonic_function_(		"UserPreferencesView_use_global_scene_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesView_open_left_mouse_delay_get = _rpythonic_function_(		"UserPreferencesView_open_left_mouse_delay_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesView_open_right_mouse_delay_get = _rpythonic_function_(		"UserPreferencesView_open_right_mouse_delay_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesView_show_large_cursors_get = _rpythonic_function_(		"UserPreferencesView_show_large_cursors_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesView_show_manipulator_get = _rpythonic_function_(		"UserPreferencesView_show_manipulator_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesView_manipulator_handle_size_get = _rpythonic_function_(		"UserPreferencesView_manipulator_handle_size_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesView_manipulator_hotspot_get = _rpythonic_function_(		"UserPreferencesView_manipulator_hotspot_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesView_manipulator_size_get = _rpythonic_function_(		"UserPreferencesView_manipulator_size_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesView_mini_axis_brightness_get = _rpythonic_function_(		"UserPreferencesView_mini_axis_brightness_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesView_mini_axis_size_get = _rpythonic_function_(		"UserPreferencesView_mini_axis_size_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesView_object_origin_size_get = _rpythonic_function_(		"UserPreferencesView_object_origin_size_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesView_use_mouse_over_open_get = _rpythonic_function_(		"UserPreferencesView_use_mouse_over_open_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesView_use_rotate_around_active_get = _rpythonic_function_(		"UserPreferencesView_use_rotate_around_active_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesView_rotation_angle_get = _rpythonic_function_(		"UserPreferencesView_rotation_angle_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesView_show_mini_axis_get = _rpythonic_function_(		"UserPreferencesView_show_mini_axis_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesView_show_playback_fps_get = _rpythonic_function_(		"UserPreferencesView_show_playback_fps_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesView_show_tooltips_python_get = _rpythonic_function_(		"UserPreferencesView_show_tooltips_python_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesView_show_splash_get = _rpythonic_function_(		"UserPreferencesView_show_splash_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesView_show_view_name_get = _rpythonic_function_(		"UserPreferencesView_show_view_name_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesView_smooth_view_get = _rpythonic_function_(		"UserPreferencesView_smooth_view_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesView_open_sublevel_delay_get = _rpythonic_function_(		"UserPreferencesView_open_sublevel_delay_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesView_timecode_style_get = _rpythonic_function_(		"UserPreferencesView_timecode_style_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesView_show_column_layout_get = _rpythonic_function_(		"UserPreferencesView_show_column_layout_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesView_show_tooltips_get = _rpythonic_function_(		"UserPreferencesView_show_tooltips_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesView_open_toplevel_delay_get = _rpythonic_function_(		"UserPreferencesView_open_toplevel_delay_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserPreferencesView_use_zoom_to_mouse_get = _rpythonic_function_(		"UserPreferencesView_use_zoom_to_mouse_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserSolidLight_rna_type_get = _rpythonic_function_(		"UserSolidLight_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserSolidLight_diffuse_color_get = _rpythonic_function_(		"UserSolidLight_diffuse_color_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

UserSolidLight_direction_get = _rpythonic_function_(		"UserSolidLight_direction_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

UserSolidLight_use_get = _rpythonic_function_(		"UserSolidLight_use_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

UserSolidLight_specular_color_get = _rpythonic_function_(		"UserSolidLight_specular_color_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

ValueNodeSocket_default_value_get = _rpythonic_function_(		"ValueNodeSocket_default_value_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 1 )),] )

VectorFont_filepath_get = _rpythonic_function_(		"VectorFont_filepath_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

VectorFont_filepath_length = _rpythonic_function_(		"VectorFont_filepath_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

VectorFont_packed_file_get = _rpythonic_function_(		"VectorFont_packed_file_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

VectorNodeSocket_default_value_get = _rpythonic_function_(		"VectorNodeSocket_default_value_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

VertexColors_rna_type_get = _rpythonic_function_(		"VertexColors_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

VertexColors_active_index_get = _rpythonic_function_(		"VertexColors_active_index_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

VertexColors_active_get = _rpythonic_function_(		"VertexColors_active_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

VertexGroup_rna_type_get = _rpythonic_function_(		"VertexGroup_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

VertexGroup_name_get = _rpythonic_function_(		"VertexGroup_name_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

VertexGroup_name_length = _rpythonic_function_(		"VertexGroup_name_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

VertexGroup_index_get = _rpythonic_function_(		"VertexGroup_index_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

VertexGroupElement_rna_type_get = _rpythonic_function_(		"VertexGroupElement_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

VertexGroupElement_group_get = _rpythonic_function_(		"VertexGroupElement_group_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

VertexGroupElement_weight_get = _rpythonic_function_(		"VertexGroupElement_weight_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

VertexGroups_rna_type_get = _rpythonic_function_(		"VertexGroups_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

VertexGroups_active_get = _rpythonic_function_(		"VertexGroups_active_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

VertexGroups_active_index_get = _rpythonic_function_(		"VertexGroups_active_index_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

VertexPaint_use_all_faces_get = _rpythonic_function_(		"VertexPaint_use_all_faces_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

VertexPaint_use_normal_get = _rpythonic_function_(		"VertexPaint_use_normal_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

VertexPaint_use_spray_get = _rpythonic_function_(		"VertexPaint_use_spray_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

VisibilityActuator_apply_to_children_get = _rpythonic_function_(		"VisibilityActuator_apply_to_children_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

VisibilityActuator_use_occlusion_get = _rpythonic_function_(		"VisibilityActuator_use_occlusion_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

VisibilityActuator_use_visible_get = _rpythonic_function_(		"VisibilityActuator_use_visible_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

VoronoiTexture_color_mode_get = _rpythonic_function_(		"VoronoiTexture_color_mode_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

VoronoiTexture_distance_metric_get = _rpythonic_function_(		"VoronoiTexture_distance_metric_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

VoronoiTexture_minkovsky_exponent_get = _rpythonic_function_(		"VoronoiTexture_minkovsky_exponent_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

VoronoiTexture_nabla_get = _rpythonic_function_(		"VoronoiTexture_nabla_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

VoronoiTexture_noise_intensity_get = _rpythonic_function_(		"VoronoiTexture_noise_intensity_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

VoronoiTexture_noise_scale_get = _rpythonic_function_(		"VoronoiTexture_noise_scale_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

VoronoiTexture_weight_1_get = _rpythonic_function_(		"VoronoiTexture_weight_1_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

VoronoiTexture_weight_2_get = _rpythonic_function_(		"VoronoiTexture_weight_2_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

VoronoiTexture_weight_3_get = _rpythonic_function_(		"VoronoiTexture_weight_3_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

VoronoiTexture_weight_4_get = _rpythonic_function_(		"VoronoiTexture_weight_4_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

VoxelData_rna_type_get = _rpythonic_function_(		"VoxelData_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

VoxelData_domain_object_get = _rpythonic_function_(		"VoxelData_domain_object_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

VoxelData_extension_get = _rpythonic_function_(		"VoxelData_extension_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

VoxelData_file_format_get = _rpythonic_function_(		"VoxelData_file_format_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

VoxelData_intensity_get = _rpythonic_function_(		"VoxelData_intensity_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

VoxelData_interpolation_get = _rpythonic_function_(		"VoxelData_interpolation_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

VoxelData_resolution_get = _rpythonic_function_(		"VoxelData_resolution_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_int * 3 )),] )

VoxelData_smoke_data_type_get = _rpythonic_function_(		"VoxelData_smoke_data_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

VoxelData_filepath_get = _rpythonic_function_(		"VoxelData_filepath_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

VoxelData_filepath_length = _rpythonic_function_(		"VoxelData_filepath_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

VoxelData_still_frame_get = _rpythonic_function_(		"VoxelData_still_frame_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

VoxelData_use_still_frame_get = _rpythonic_function_(		"VoxelData_use_still_frame_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

VoxelDataTexture_image_get = _rpythonic_function_(		"VoxelDataTexture_image_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

VoxelDataTexture_image_user_get = _rpythonic_function_(		"VoxelDataTexture_image_user_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

VoxelDataTexture_voxel_data_get = _rpythonic_function_(		"VoxelDataTexture_voxel_data_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WarpModifier_falloff_curve_get = _rpythonic_function_(		"WarpModifier_falloff_curve_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WarpModifier_falloff_type_get = _rpythonic_function_(		"WarpModifier_falloff_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WarpModifier_object_from_get = _rpythonic_function_(		"WarpModifier_object_from_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WarpModifier_use_volume_preserve_get = _rpythonic_function_(		"WarpModifier_use_volume_preserve_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WarpModifier_falloff_radius_get = _rpythonic_function_(		"WarpModifier_falloff_radius_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WarpModifier_strength_get = _rpythonic_function_(		"WarpModifier_strength_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WarpModifier_texture_get = _rpythonic_function_(		"WarpModifier_texture_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WarpModifier_texture_coords_object_get = _rpythonic_function_(		"WarpModifier_texture_coords_object_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WarpModifier_texture_coords_get = _rpythonic_function_(		"WarpModifier_texture_coords_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WarpModifier_object_to_get = _rpythonic_function_(		"WarpModifier_object_to_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WarpModifier_uv_layer_get = _rpythonic_function_(		"WarpModifier_uv_layer_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

WarpModifier_uv_layer_length = _rpythonic_function_(		"WarpModifier_uv_layer_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WarpModifier_vertex_group_get = _rpythonic_function_(		"WarpModifier_vertex_group_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

WarpModifier_vertex_group_length = _rpythonic_function_(		"WarpModifier_vertex_group_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WaveModifier_use_cyclic_get = _rpythonic_function_(		"WaveModifier_use_cyclic_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WaveModifier_damping_time_get = _rpythonic_function_(		"WaveModifier_damping_time_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WaveModifier_falloff_radius_get = _rpythonic_function_(		"WaveModifier_falloff_radius_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WaveModifier_height_get = _rpythonic_function_(		"WaveModifier_height_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WaveModifier_lifetime_get = _rpythonic_function_(		"WaveModifier_lifetime_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WaveModifier_narrowness_get = _rpythonic_function_(		"WaveModifier_narrowness_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WaveModifier_use_normal_get = _rpythonic_function_(		"WaveModifier_use_normal_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WaveModifier_speed_get = _rpythonic_function_(		"WaveModifier_speed_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WaveModifier_start_position_object_get = _rpythonic_function_(		"WaveModifier_start_position_object_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WaveModifier_start_position_x_get = _rpythonic_function_(		"WaveModifier_start_position_x_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WaveModifier_start_position_y_get = _rpythonic_function_(		"WaveModifier_start_position_y_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WaveModifier_texture_get = _rpythonic_function_(		"WaveModifier_texture_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WaveModifier_texture_coords_get = _rpythonic_function_(		"WaveModifier_texture_coords_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WaveModifier_texture_coords_object_get = _rpythonic_function_(		"WaveModifier_texture_coords_object_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WaveModifier_time_offset_get = _rpythonic_function_(		"WaveModifier_time_offset_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WaveModifier_uv_layer_get = _rpythonic_function_(		"WaveModifier_uv_layer_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

WaveModifier_uv_layer_length = _rpythonic_function_(		"WaveModifier_uv_layer_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WaveModifier_vertex_group_get = _rpythonic_function_(		"WaveModifier_vertex_group_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

WaveModifier_vertex_group_length = _rpythonic_function_(		"WaveModifier_vertex_group_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WaveModifier_width_get = _rpythonic_function_(		"WaveModifier_width_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WaveModifier_use_x_get = _rpythonic_function_(		"WaveModifier_use_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WaveModifier_use_normal_x_get = _rpythonic_function_(		"WaveModifier_use_normal_x_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WaveModifier_use_y_get = _rpythonic_function_(		"WaveModifier_use_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WaveModifier_use_normal_y_get = _rpythonic_function_(		"WaveModifier_use_normal_y_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WaveModifier_use_normal_z_get = _rpythonic_function_(		"WaveModifier_use_normal_z_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Window_rna_type_get = _rpythonic_function_(		"Window_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

Window_screen_get = _rpythonic_function_(		"Window_screen_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WindowManager_keyconfigs_begin = _rpythonic_function_(		"WindowManager_keyconfigs_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WindowManager_keyconfigs_next = _rpythonic_function_(		"WindowManager_keyconfigs_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

WindowManager_keyconfigs_end = _rpythonic_function_(		"WindowManager_keyconfigs_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

WindowManager_operators_begin = _rpythonic_function_(		"WindowManager_operators_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WindowManager_operators_next = _rpythonic_function_(		"WindowManager_operators_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

WindowManager_operators_end = _rpythonic_function_(		"WindowManager_operators_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

WindowManager_clipboard_get = _rpythonic_function_(		"WindowManager_clipboard_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

WindowManager_clipboard_length = _rpythonic_function_(		"WindowManager_clipboard_length", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WindowManager_windows_begin = _rpythonic_function_(		"WindowManager_windows_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WindowManager_windows_next = _rpythonic_function_(		"WindowManager_windows_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

WindowManager_windows_end = _rpythonic_function_(		"WindowManager_windows_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

WipeSequence_angle_get = _rpythonic_function_(		"WipeSequence_angle_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WipeSequence_blur_width_get = _rpythonic_function_(		"WipeSequence_blur_width_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WipeSequence_direction_get = _rpythonic_function_(		"WipeSequence_direction_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WipeSequence_transition_type_get = _rpythonic_function_(		"WipeSequence_transition_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WoodTexture_nabla_get = _rpythonic_function_(		"WoodTexture_nabla_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WoodTexture_noise_basis_get = _rpythonic_function_(		"WoodTexture_noise_basis_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WoodTexture_noise_basis_2_get = _rpythonic_function_(		"WoodTexture_noise_basis_2_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WoodTexture_noise_scale_get = _rpythonic_function_(		"WoodTexture_noise_scale_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WoodTexture_noise_type_get = _rpythonic_function_(		"WoodTexture_noise_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WoodTexture_wood_type_get = _rpythonic_function_(		"WoodTexture_wood_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WoodTexture_turbulence_get = _rpythonic_function_(		"WoodTexture_turbulence_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

World_active_texture_get = _rpythonic_function_(		"World_active_texture_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

World_active_texture_index_get = _rpythonic_function_(		"World_active_texture_index_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

World_ambient_color_get = _rpythonic_function_(		"World_ambient_color_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

World_animation_data_get = _rpythonic_function_(		"World_animation_data_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

World_use_sky_blend_get = _rpythonic_function_(		"World_use_sky_blend_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

World_exposure_get = _rpythonic_function_(		"World_exposure_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

World_horizon_color_get = _rpythonic_function_(		"World_horizon_color_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

World_light_settings_get = _rpythonic_function_(		"World_light_settings_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

World_mist_settings_get = _rpythonic_function_(		"World_mist_settings_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

World_use_sky_paper_get = _rpythonic_function_(		"World_use_sky_paper_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

World_color_range_get = _rpythonic_function_(		"World_color_range_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

World_use_sky_real_get = _rpythonic_function_(		"World_use_sky_real_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

World_star_settings_get = _rpythonic_function_(		"World_star_settings_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

World_texture_slots_begin = _rpythonic_function_(		"World_texture_slots_begin", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

World_texture_slots_next = _rpythonic_function_(		"World_texture_slots_next", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

World_texture_slots_end = _rpythonic_function_(		"World_texture_slots_end", ctypes.c_void_p, [
	("iter",		ctypes.POINTER(CollectionPropertyIterator)),] )

World_zenith_color_get = _rpythonic_function_(		"World_zenith_color_get", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("values",		( ctypes.c_float * 3 )),] )

WorldLighting_rna_type_get = _rpythonic_function_(		"WorldLighting_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WorldLighting_adapt_to_speed_get = _rpythonic_function_(		"WorldLighting_adapt_to_speed_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WorldLighting_bias_get = _rpythonic_function_(		"WorldLighting_bias_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WorldLighting_ao_blend_type_get = _rpythonic_function_(		"WorldLighting_ao_blend_type_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WorldLighting_indirect_bounces_get = _rpythonic_function_(		"WorldLighting_indirect_bounces_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WorldLighting_correction_get = _rpythonic_function_(		"WorldLighting_correction_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WorldLighting_distance_get = _rpythonic_function_(		"WorldLighting_distance_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WorldLighting_environment_energy_get = _rpythonic_function_(		"WorldLighting_environment_energy_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WorldLighting_environment_color_get = _rpythonic_function_(		"WorldLighting_environment_color_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WorldLighting_error_threshold_get = _rpythonic_function_(		"WorldLighting_error_threshold_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WorldLighting_ao_factor_get = _rpythonic_function_(		"WorldLighting_ao_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WorldLighting_use_falloff_get = _rpythonic_function_(		"WorldLighting_use_falloff_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WorldLighting_gather_method_get = _rpythonic_function_(		"WorldLighting_gather_method_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WorldLighting_indirect_factor_get = _rpythonic_function_(		"WorldLighting_indirect_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WorldLighting_passes_get = _rpythonic_function_(		"WorldLighting_passes_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WorldLighting_use_cache_get = _rpythonic_function_(		"WorldLighting_use_cache_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WorldLighting_sample_method_get = _rpythonic_function_(		"WorldLighting_sample_method_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WorldLighting_samples_get = _rpythonic_function_(		"WorldLighting_samples_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WorldLighting_falloff_strength_get = _rpythonic_function_(		"WorldLighting_falloff_strength_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WorldLighting_threshold_get = _rpythonic_function_(		"WorldLighting_threshold_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WorldLighting_use_ambient_occlusion_get = _rpythonic_function_(		"WorldLighting_use_ambient_occlusion_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WorldLighting_use_environment_light_get = _rpythonic_function_(		"WorldLighting_use_environment_light_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WorldLighting_use_indirect_light_get = _rpythonic_function_(		"WorldLighting_use_indirect_light_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WorldMistSettings_rna_type_get = _rpythonic_function_(		"WorldMistSettings_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WorldMistSettings_depth_get = _rpythonic_function_(		"WorldMistSettings_depth_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WorldMistSettings_falloff_get = _rpythonic_function_(		"WorldMistSettings_falloff_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WorldMistSettings_height_get = _rpythonic_function_(		"WorldMistSettings_height_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WorldMistSettings_intensity_get = _rpythonic_function_(		"WorldMistSettings_intensity_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WorldMistSettings_start_get = _rpythonic_function_(		"WorldMistSettings_start_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WorldMistSettings_use_mist_get = _rpythonic_function_(		"WorldMistSettings_use_mist_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WorldStarsSettings_rna_type_get = _rpythonic_function_(		"WorldStarsSettings_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WorldStarsSettings_average_separation_get = _rpythonic_function_(		"WorldStarsSettings_average_separation_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WorldStarsSettings_color_random_get = _rpythonic_function_(		"WorldStarsSettings_color_random_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WorldStarsSettings_distance_min_get = _rpythonic_function_(		"WorldStarsSettings_distance_min_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WorldStarsSettings_size_get = _rpythonic_function_(		"WorldStarsSettings_size_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WorldStarsSettings_use_stars_get = _rpythonic_function_(		"WorldStarsSettings_use_stars_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WorldTextureSlot_use_map_blend_get = _rpythonic_function_(		"WorldTextureSlot_use_map_blend_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WorldTextureSlot_blend_factor_get = _rpythonic_function_(		"WorldTextureSlot_blend_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WorldTextureSlot_use_map_horizon_get = _rpythonic_function_(		"WorldTextureSlot_use_map_horizon_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WorldTextureSlot_horizon_factor_get = _rpythonic_function_(		"WorldTextureSlot_horizon_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WorldTextureSlot_object_get = _rpythonic_function_(		"WorldTextureSlot_object_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WorldTextureSlot_texture_coords_get = _rpythonic_function_(		"WorldTextureSlot_texture_coords_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WorldTextureSlot_use_map_zenith_down_get = _rpythonic_function_(		"WorldTextureSlot_use_map_zenith_down_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WorldTextureSlot_zenith_down_factor_get = _rpythonic_function_(		"WorldTextureSlot_zenith_down_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WorldTextureSlot_use_map_zenith_up_get = _rpythonic_function_(		"WorldTextureSlot_use_map_zenith_up_get", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WorldTextureSlot_zenith_up_factor_get = _rpythonic_function_(		"WorldTextureSlot_zenith_up_factor_get", ctypes.c_float, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WorldTextureSlots_rna_type_get = _rpythonic_function_(		"WorldTextureSlots_rna_type_get", PointerRNA, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

RNA_create = _rpythonic_function_(		"RNA_create", ctypes.POINTER(BlenderRNA), [] )

RNA_define_free = _rpythonic_function_(		"RNA_define_free", ctypes.c_void_p, [
	("brna",		ctypes.POINTER(BlenderRNA)),] )

RNA_free = _rpythonic_function_(		"RNA_free", ctypes.c_void_p, [
	("brna",		ctypes.POINTER(BlenderRNA)),] )

RNA_define_verify_sdna = _rpythonic_function_(		"RNA_define_verify_sdna", ctypes.c_void_p, [
	("verify",		ctypes.c_int),] )

RNA_init = _rpythonic_function_(		"RNA_init", ctypes.c_void_p, [] )

RNA_exit = _rpythonic_function_(		"RNA_exit", ctypes.c_void_p, [] )

RNA_def_struct = _rpythonic_function_(		"RNA_def_struct", ctypes.POINTER(StructRNA), [
	("brna",		ctypes.POINTER(BlenderRNA)),
	("identifier",		ctypes.POINTER(ctypes.c_char)),
	("from",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_struct_sdna = _rpythonic_function_(		"RNA_def_struct_sdna", ctypes.c_void_p, [
	("srna",		ctypes.POINTER(StructRNA)),
	("structname",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_struct_sdna_from = _rpythonic_function_(		"RNA_def_struct_sdna_from", ctypes.c_void_p, [
	("srna",		ctypes.POINTER(StructRNA)),
	("structname",		ctypes.POINTER(ctypes.c_char)),
	("propname",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_struct_name_property = _rpythonic_function_(		"RNA_def_struct_name_property", ctypes.c_void_p, [
	("srna",		ctypes.POINTER(StructRNA)),
	("prop",		ctypes.POINTER(PropertyRNA)),] )

RNA_def_struct_nested = _rpythonic_function_(		"RNA_def_struct_nested", ctypes.c_void_p, [
	("brna",		ctypes.POINTER(BlenderRNA)),
	("srna",		ctypes.POINTER(StructRNA)),
	("structname",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_struct_flag = _rpythonic_function_(		"RNA_def_struct_flag", ctypes.c_void_p, [
	("srna",		ctypes.POINTER(StructRNA)),
	("flag",		ctypes.c_int),] )

RNA_def_struct_clear_flag = _rpythonic_function_(		"RNA_def_struct_clear_flag", ctypes.c_void_p, [
	("srna",		ctypes.POINTER(StructRNA)),
	("flag",		ctypes.c_int),] )

RNA_def_struct_refine_func = _rpythonic_function_(		"RNA_def_struct_refine_func", ctypes.c_void_p, [
	("srna",		ctypes.POINTER(StructRNA)),
	("refine",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_struct_idprops_func = _rpythonic_function_(		"RNA_def_struct_idprops_func", ctypes.c_void_p, [
	("srna",		ctypes.POINTER(StructRNA)),
	("refine",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_struct_register_funcs = _rpythonic_function_(		"RNA_def_struct_register_funcs", ctypes.c_void_p, [
	("srna",		ctypes.POINTER(StructRNA)),
	("reg",		ctypes.POINTER(ctypes.c_char)),
	("unreg",		ctypes.POINTER(ctypes.c_char)),
	("instance",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_struct_path_func = _rpythonic_function_(		"RNA_def_struct_path_func", ctypes.c_void_p, [
	("srna",		ctypes.POINTER(StructRNA)),
	("path",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_struct_identifier = _rpythonic_function_(		"RNA_def_struct_identifier", ctypes.c_void_p, [
	("srna",		ctypes.POINTER(StructRNA)),
	("identifier",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_struct_ui_text = _rpythonic_function_(		"RNA_def_struct_ui_text", ctypes.c_void_p, [
	("srna",		ctypes.POINTER(StructRNA)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("description",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_struct_ui_icon = _rpythonic_function_(		"RNA_def_struct_ui_icon", ctypes.c_void_p, [
	("srna",		ctypes.POINTER(StructRNA)),
	("icon",		ctypes.c_int),] )

RNA_struct_free_extension = _rpythonic_function_(		"RNA_struct_free_extension", ctypes.c_void_p, [
	("srna",		ctypes.POINTER(StructRNA)),
	("ext",		ctypes.POINTER(ExtensionRNA)),] )

RNA_struct_free = _rpythonic_function_(		"RNA_struct_free", ctypes.c_void_p, [
	("brna",		ctypes.POINTER(BlenderRNA)),
	("srna",		ctypes.POINTER(StructRNA)),] )

RNA_def_boolean = _rpythonic_function_(		"RNA_def_boolean", ctypes.POINTER(PropertyRNA), [
	("cont",		ctypes.POINTER(ctypes.c_void_p)),
	("identifier",		ctypes.POINTER(ctypes.c_char)),
	("default_value",		ctypes.c_int),
	("ui_name",		ctypes.POINTER(ctypes.c_char)),
	("ui_description",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_boolean_array = _rpythonic_function_(		"RNA_def_boolean_array", ctypes.POINTER(PropertyRNA), [
	("cont",		ctypes.POINTER(ctypes.c_void_p)),
	("identifier",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),
	("default_value",		ctypes.POINTER(ctypes.c_int)),
	("ui_name",		ctypes.POINTER(ctypes.c_char)),
	("ui_description",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_boolean_layer = _rpythonic_function_(		"RNA_def_boolean_layer", ctypes.POINTER(PropertyRNA), [
	("cont",		ctypes.POINTER(ctypes.c_void_p)),
	("identifier",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),
	("default_value",		ctypes.POINTER(ctypes.c_int)),
	("ui_name",		ctypes.POINTER(ctypes.c_char)),
	("ui_description",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_boolean_layer_member = _rpythonic_function_(		"RNA_def_boolean_layer_member", ctypes.POINTER(PropertyRNA), [
	("cont",		ctypes.POINTER(ctypes.c_void_p)),
	("identifier",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),
	("default_value",		ctypes.POINTER(ctypes.c_int)),
	("ui_name",		ctypes.POINTER(ctypes.c_char)),
	("ui_description",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_boolean_vector = _rpythonic_function_(		"RNA_def_boolean_vector", ctypes.POINTER(PropertyRNA), [
	("cont",		ctypes.POINTER(ctypes.c_void_p)),
	("identifier",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),
	("default_value",		ctypes.POINTER(ctypes.c_int)),
	("ui_name",		ctypes.POINTER(ctypes.c_char)),
	("ui_description",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_int = _rpythonic_function_(		"RNA_def_int", ctypes.POINTER(PropertyRNA), [
	("cont",		ctypes.POINTER(ctypes.c_void_p)),
	("identifier",		ctypes.POINTER(ctypes.c_char)),
	("default_value",		ctypes.c_int),
	("hardmin",		ctypes.c_int),
	("hardmax",		ctypes.c_int),
	("ui_name",		ctypes.POINTER(ctypes.c_char)),
	("ui_description",		ctypes.POINTER(ctypes.c_char)),
	("softmin",		ctypes.c_int),
	("softmax",		ctypes.c_int),] )

RNA_def_int_vector = _rpythonic_function_(		"RNA_def_int_vector", ctypes.POINTER(PropertyRNA), [
	("cont",		ctypes.POINTER(ctypes.c_void_p)),
	("identifier",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),
	("default_value",		ctypes.POINTER(ctypes.c_int)),
	("hardmin",		ctypes.c_int),
	("hardmax",		ctypes.c_int),
	("ui_name",		ctypes.POINTER(ctypes.c_char)),
	("ui_description",		ctypes.POINTER(ctypes.c_char)),
	("softmin",		ctypes.c_int),
	("softmax",		ctypes.c_int),] )

RNA_def_int_array = _rpythonic_function_(		"RNA_def_int_array", ctypes.POINTER(PropertyRNA), [
	("cont",		ctypes.POINTER(ctypes.c_void_p)),
	("identifier",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),
	("default_value",		ctypes.POINTER(ctypes.c_int)),
	("hardmin",		ctypes.c_int),
	("hardmax",		ctypes.c_int),
	("ui_name",		ctypes.POINTER(ctypes.c_char)),
	("ui_description",		ctypes.POINTER(ctypes.c_char)),
	("softmin",		ctypes.c_int),
	("softmax",		ctypes.c_int),] )

RNA_def_string = _rpythonic_function_(		"RNA_def_string", ctypes.POINTER(PropertyRNA), [
	("cont",		ctypes.POINTER(ctypes.c_void_p)),
	("identifier",		ctypes.POINTER(ctypes.c_char)),
	("default_value",		ctypes.POINTER(ctypes.c_char)),
	("maxlen",		ctypes.c_int),
	("ui_name",		ctypes.POINTER(ctypes.c_char)),
	("ui_description",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_string_file_path = _rpythonic_function_(		"RNA_def_string_file_path", ctypes.POINTER(PropertyRNA), [
	("cont",		ctypes.POINTER(ctypes.c_void_p)),
	("identifier",		ctypes.POINTER(ctypes.c_char)),
	("default_value",		ctypes.POINTER(ctypes.c_char)),
	("maxlen",		ctypes.c_int),
	("ui_name",		ctypes.POINTER(ctypes.c_char)),
	("ui_description",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_string_dir_path = _rpythonic_function_(		"RNA_def_string_dir_path", ctypes.POINTER(PropertyRNA), [
	("cont",		ctypes.POINTER(ctypes.c_void_p)),
	("identifier",		ctypes.POINTER(ctypes.c_char)),
	("default_value",		ctypes.POINTER(ctypes.c_char)),
	("maxlen",		ctypes.c_int),
	("ui_name",		ctypes.POINTER(ctypes.c_char)),
	("ui_description",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_string_file_name = _rpythonic_function_(		"RNA_def_string_file_name", ctypes.POINTER(PropertyRNA), [
	("cont",		ctypes.POINTER(ctypes.c_void_p)),
	("identifier",		ctypes.POINTER(ctypes.c_char)),
	("default_value",		ctypes.POINTER(ctypes.c_char)),
	("maxlen",		ctypes.c_int),
	("ui_name",		ctypes.POINTER(ctypes.c_char)),
	("ui_description",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_enum = _rpythonic_function_(		"RNA_def_enum", ctypes.POINTER(PropertyRNA), [
	("cont",		ctypes.POINTER(ctypes.c_void_p)),
	("identifier",		ctypes.POINTER(ctypes.c_char)),
	("items",		ctypes.POINTER(EnumPropertyItem)),
	("default_value",		ctypes.c_int),
	("ui_name",		ctypes.POINTER(ctypes.c_char)),
	("ui_description",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_enum_flag = _rpythonic_function_(		"RNA_def_enum_flag", ctypes.POINTER(PropertyRNA), [
	("cont",		ctypes.POINTER(ctypes.c_void_p)),
	("identifier",		ctypes.POINTER(ctypes.c_char)),
	("items",		ctypes.POINTER(EnumPropertyItem)),
	("default_value",		ctypes.c_int),
	("ui_name",		ctypes.POINTER(ctypes.c_char)),
	("ui_description",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_enum_funcs = _rpythonic_function_(		"RNA_def_enum_funcs", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(PropertyRNA)),
	("itemfunc",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(EnumPropertyItem), ctypes.POINTER(bContext),ctypes.POINTER(PointerRNA),ctypes.POINTER(PropertyRNA),ctypes.POINTER(ctypes.c_int),))),] )

RNA_def_enum_py_data = _rpythonic_function_(		"RNA_def_enum_py_data", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(PropertyRNA)),
	("py_data",		ctypes.POINTER(ctypes.c_void_p)),] )

RNA_def_float = _rpythonic_function_(		"RNA_def_float", ctypes.POINTER(PropertyRNA), [
	("cont",		ctypes.POINTER(ctypes.c_void_p)),
	("identifier",		ctypes.POINTER(ctypes.c_char)),
	("default_value",		ctypes.c_float),
	("hardmin",		ctypes.c_float),
	("hardmax",		ctypes.c_float),
	("ui_name",		ctypes.POINTER(ctypes.c_char)),
	("ui_description",		ctypes.POINTER(ctypes.c_char)),
	("softmin",		ctypes.c_float),
	("softmax",		ctypes.c_float),] )

RNA_def_float_vector = _rpythonic_function_(		"RNA_def_float_vector", ctypes.POINTER(PropertyRNA), [
	("cont",		ctypes.POINTER(ctypes.c_void_p)),
	("identifier",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),
	("default_value",		ctypes.POINTER(ctypes.c_float)),
	("hardmin",		ctypes.c_float),
	("hardmax",		ctypes.c_float),
	("ui_name",		ctypes.POINTER(ctypes.c_char)),
	("ui_description",		ctypes.POINTER(ctypes.c_char)),
	("softmin",		ctypes.c_float),
	("softmax",		ctypes.c_float),] )

RNA_def_float_vector_xyz = _rpythonic_function_(		"RNA_def_float_vector_xyz", ctypes.POINTER(PropertyRNA), [
	("cont",		ctypes.POINTER(ctypes.c_void_p)),
	("identifier",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),
	("default_value",		ctypes.POINTER(ctypes.c_float)),
	("hardmin",		ctypes.c_float),
	("hardmax",		ctypes.c_float),
	("ui_name",		ctypes.POINTER(ctypes.c_char)),
	("ui_description",		ctypes.POINTER(ctypes.c_char)),
	("softmin",		ctypes.c_float),
	("softmax",		ctypes.c_float),] )

RNA_def_float_color = _rpythonic_function_(		"RNA_def_float_color", ctypes.POINTER(PropertyRNA), [
	("cont",		ctypes.POINTER(ctypes.c_void_p)),
	("identifier",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),
	("default_value",		ctypes.POINTER(ctypes.c_float)),
	("hardmin",		ctypes.c_float),
	("hardmax",		ctypes.c_float),
	("ui_name",		ctypes.POINTER(ctypes.c_char)),
	("ui_description",		ctypes.POINTER(ctypes.c_char)),
	("softmin",		ctypes.c_float),
	("softmax",		ctypes.c_float),] )

RNA_def_float_matrix = _rpythonic_function_(		"RNA_def_float_matrix", ctypes.POINTER(PropertyRNA), [
	("cont",		ctypes.POINTER(ctypes.c_void_p)),
	("identifier",		ctypes.POINTER(ctypes.c_char)),
	("rows",		ctypes.c_int),
	("columns",		ctypes.c_int),
	("default_value",		ctypes.POINTER(ctypes.c_float)),
	("hardmin",		ctypes.c_float),
	("hardmax",		ctypes.c_float),
	("ui_name",		ctypes.POINTER(ctypes.c_char)),
	("ui_description",		ctypes.POINTER(ctypes.c_char)),
	("softmin",		ctypes.c_float),
	("softmax",		ctypes.c_float),] )

RNA_def_float_rotation = _rpythonic_function_(		"RNA_def_float_rotation", ctypes.POINTER(PropertyRNA), [
	("cont",		ctypes.POINTER(ctypes.c_void_p)),
	("identifier",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),
	("default_value",		ctypes.POINTER(ctypes.c_float)),
	("hardmin",		ctypes.c_float),
	("hardmax",		ctypes.c_float),
	("ui_name",		ctypes.POINTER(ctypes.c_char)),
	("ui_description",		ctypes.POINTER(ctypes.c_char)),
	("softmin",		ctypes.c_float),
	("softmax",		ctypes.c_float),] )

RNA_def_float_array = _rpythonic_function_(		"RNA_def_float_array", ctypes.POINTER(PropertyRNA), [
	("cont",		ctypes.POINTER(ctypes.c_void_p)),
	("identifier",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),
	("default_value",		ctypes.POINTER(ctypes.c_float)),
	("hardmin",		ctypes.c_float),
	("hardmax",		ctypes.c_float),
	("ui_name",		ctypes.POINTER(ctypes.c_char)),
	("ui_description",		ctypes.POINTER(ctypes.c_char)),
	("softmin",		ctypes.c_float),
	("softmax",		ctypes.c_float),] )

RNA_def_float_percentage = _rpythonic_function_(		"RNA_def_float_percentage", ctypes.POINTER(PropertyRNA), [
	("cont",		ctypes.POINTER(ctypes.c_void_p)),
	("identifier",		ctypes.POINTER(ctypes.c_char)),
	("default_value",		ctypes.c_float),
	("hardmin",		ctypes.c_float),
	("hardmax",		ctypes.c_float),
	("ui_name",		ctypes.POINTER(ctypes.c_char)),
	("ui_description",		ctypes.POINTER(ctypes.c_char)),
	("softmin",		ctypes.c_float),
	("softmax",		ctypes.c_float),] )

RNA_def_float_factor = _rpythonic_function_(		"RNA_def_float_factor", ctypes.POINTER(PropertyRNA), [
	("cont",		ctypes.POINTER(ctypes.c_void_p)),
	("identifier",		ctypes.POINTER(ctypes.c_char)),
	("default_value",		ctypes.c_float),
	("hardmin",		ctypes.c_float),
	("hardmax",		ctypes.c_float),
	("ui_name",		ctypes.POINTER(ctypes.c_char)),
	("ui_description",		ctypes.POINTER(ctypes.c_char)),
	("softmin",		ctypes.c_float),
	("softmax",		ctypes.c_float),] )

RNA_def_pointer = _rpythonic_function_(		"RNA_def_pointer", ctypes.POINTER(PropertyRNA), [
	("cont",		ctypes.POINTER(ctypes.c_void_p)),
	("identifier",		ctypes.POINTER(ctypes.c_char)),
	("C_type",		ctypes.POINTER(ctypes.c_char)),
	("ui_name",		ctypes.POINTER(ctypes.c_char)),
	("ui_description",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_pointer_runtime = _rpythonic_function_(		"RNA_def_pointer_runtime", ctypes.POINTER(PropertyRNA), [
	("cont",		ctypes.POINTER(ctypes.c_void_p)),
	("identifier",		ctypes.POINTER(ctypes.c_char)),
	("C_type",		ctypes.POINTER(StructRNA)),
	("ui_name",		ctypes.POINTER(ctypes.c_char)),
	("ui_description",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_collection = _rpythonic_function_(		"RNA_def_collection", ctypes.POINTER(PropertyRNA), [
	("cont",		ctypes.POINTER(ctypes.c_void_p)),
	("identifier",		ctypes.POINTER(ctypes.c_char)),
	("C_type",		ctypes.POINTER(ctypes.c_char)),
	("ui_name",		ctypes.POINTER(ctypes.c_char)),
	("ui_description",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_collection_runtime = _rpythonic_function_(		"RNA_def_collection_runtime", ctypes.POINTER(PropertyRNA), [
	("cont",		ctypes.POINTER(ctypes.c_void_p)),
	("identifier",		ctypes.POINTER(ctypes.c_char)),
	("C_type",		ctypes.POINTER(StructRNA)),
	("ui_name",		ctypes.POINTER(ctypes.c_char)),
	("ui_description",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_property = _rpythonic_function_(		"RNA_def_property", ctypes.POINTER(PropertyRNA), [
	("cont",		ctypes.POINTER(ctypes.c_void_p)),
	("identifier",		ctypes.POINTER(ctypes.c_char)),
	("C_type",		ctypes.c_int),
	("subtype",		ctypes.c_int),] )

RNA_def_property_boolean_sdna = _rpythonic_function_(		"RNA_def_property_boolean_sdna", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(PropertyRNA)),
	("structname",		ctypes.POINTER(ctypes.c_char)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("bit",		ctypes.c_int),] )

RNA_def_property_boolean_negative_sdna = _rpythonic_function_(		"RNA_def_property_boolean_negative_sdna", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(PropertyRNA)),
	("structname",		ctypes.POINTER(ctypes.c_char)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("bit",		ctypes.c_int),] )

RNA_def_property_int_sdna = _rpythonic_function_(		"RNA_def_property_int_sdna", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(PropertyRNA)),
	("structname",		ctypes.POINTER(ctypes.c_char)),
	("propname",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_property_float_sdna = _rpythonic_function_(		"RNA_def_property_float_sdna", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(PropertyRNA)),
	("structname",		ctypes.POINTER(ctypes.c_char)),
	("propname",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_property_string_sdna = _rpythonic_function_(		"RNA_def_property_string_sdna", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(PropertyRNA)),
	("structname",		ctypes.POINTER(ctypes.c_char)),
	("propname",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_property_enum_sdna = _rpythonic_function_(		"RNA_def_property_enum_sdna", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(PropertyRNA)),
	("structname",		ctypes.POINTER(ctypes.c_char)),
	("propname",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_property_enum_bitflag_sdna = _rpythonic_function_(		"RNA_def_property_enum_bitflag_sdna", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(PropertyRNA)),
	("structname",		ctypes.POINTER(ctypes.c_char)),
	("propname",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_property_pointer_sdna = _rpythonic_function_(		"RNA_def_property_pointer_sdna", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(PropertyRNA)),
	("structname",		ctypes.POINTER(ctypes.c_char)),
	("propname",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_property_collection_sdna = _rpythonic_function_(		"RNA_def_property_collection_sdna", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(PropertyRNA)),
	("structname",		ctypes.POINTER(ctypes.c_char)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("lengthpropname",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_property_flag = _rpythonic_function_(		"RNA_def_property_flag", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(PropertyRNA)),
	("flag",		ctypes.c_int),] )

RNA_def_property_clear_flag = _rpythonic_function_(		"RNA_def_property_clear_flag", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(PropertyRNA)),
	("flag",		ctypes.c_int),] )

RNA_def_property_subtype = _rpythonic_function_(		"RNA_def_property_subtype", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(PropertyRNA)),
	("subtype",		ctypes.c_int),] )

RNA_def_property_array = _rpythonic_function_(		"RNA_def_property_array", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(PropertyRNA)),
	("length",		ctypes.c_int),] )

RNA_def_property_multi_array = _rpythonic_function_(		"RNA_def_property_multi_array", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(PropertyRNA)),
	("dimension",		ctypes.c_int),
	("length",		ctypes.c_int),] )

RNA_def_property_range = _rpythonic_function_(		"RNA_def_property_range", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(PropertyRNA)),
	("min",		ctypes.c_double),
	("max",		ctypes.c_double),] )

RNA_def_property_enum_items = _rpythonic_function_(		"RNA_def_property_enum_items", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(PropertyRNA)),
	("item",		ctypes.POINTER(EnumPropertyItem)),] )

RNA_def_property_string_maxlength = _rpythonic_function_(		"RNA_def_property_string_maxlength", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(PropertyRNA)),
	("maxlength",		ctypes.c_int),] )

RNA_def_property_struct_type = _rpythonic_function_(		"RNA_def_property_struct_type", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(PropertyRNA)),
	("C_type",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_property_struct_runtime = _rpythonic_function_(		"RNA_def_property_struct_runtime", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(PropertyRNA)),
	("C_type",		ctypes.POINTER(StructRNA)),] )

RNA_def_property_boolean_default = _rpythonic_function_(		"RNA_def_property_boolean_default", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(PropertyRNA)),
	("value",		ctypes.c_int),] )

RNA_def_property_boolean_array_default = _rpythonic_function_(		"RNA_def_property_boolean_array_default", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(PropertyRNA)),
	("array",		ctypes.POINTER(ctypes.c_int)),] )

RNA_def_property_int_default = _rpythonic_function_(		"RNA_def_property_int_default", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(PropertyRNA)),
	("value",		ctypes.c_int),] )

RNA_def_property_int_array_default = _rpythonic_function_(		"RNA_def_property_int_array_default", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(PropertyRNA)),
	("array",		ctypes.POINTER(ctypes.c_int)),] )

RNA_def_property_float_default = _rpythonic_function_(		"RNA_def_property_float_default", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(PropertyRNA)),
	("value",		ctypes.c_float),] )

RNA_def_property_float_array_default = _rpythonic_function_(		"RNA_def_property_float_array_default", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(PropertyRNA)),
	("array",		ctypes.POINTER(ctypes.c_float)),] )

RNA_def_property_enum_default = _rpythonic_function_(		"RNA_def_property_enum_default", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(PropertyRNA)),
	("value",		ctypes.c_int),] )

RNA_def_property_string_default = _rpythonic_function_(		"RNA_def_property_string_default", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(PropertyRNA)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_property_ui_text = _rpythonic_function_(		"RNA_def_property_ui_text", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(PropertyRNA)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("description",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_property_ui_range = _rpythonic_function_(		"RNA_def_property_ui_range", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(PropertyRNA)),
	("min",		ctypes.c_double),
	("max",		ctypes.c_double),
	("step",		ctypes.c_double),
	("precision",		ctypes.c_int),] )

RNA_def_property_ui_icon = _rpythonic_function_(		"RNA_def_property_ui_icon", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(PropertyRNA)),
	("icon",		ctypes.c_int),
	("consecutive",		ctypes.c_int),] )

RNA_def_property_update = _rpythonic_function_(		"RNA_def_property_update", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(PropertyRNA)),
	("noteflag",		ctypes.c_int),
	("updatefunc",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_property_editable_func = _rpythonic_function_(		"RNA_def_property_editable_func", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(PropertyRNA)),
	("editable",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_property_editable_array_func = _rpythonic_function_(		"RNA_def_property_editable_array_func", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(PropertyRNA)),
	("editable",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_property_update_runtime = _rpythonic_function_(		"RNA_def_property_update_runtime", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(PropertyRNA)),
	("func",		ctypes.POINTER(ctypes.c_void_p)),] )

RNA_def_property_dynamic_array_funcs = _rpythonic_function_(		"RNA_def_property_dynamic_array_funcs", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(PropertyRNA)),
	("getlength",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_property_boolean_funcs = _rpythonic_function_(		"RNA_def_property_boolean_funcs", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(PropertyRNA)),
	("get",		ctypes.POINTER(ctypes.c_char)),
	("set",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_property_int_funcs = _rpythonic_function_(		"RNA_def_property_int_funcs", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(PropertyRNA)),
	("get",		ctypes.POINTER(ctypes.c_char)),
	("set",		ctypes.POINTER(ctypes.c_char)),
	("C_range",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_property_float_funcs = _rpythonic_function_(		"RNA_def_property_float_funcs", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(PropertyRNA)),
	("get",		ctypes.POINTER(ctypes.c_char)),
	("set",		ctypes.POINTER(ctypes.c_char)),
	("C_range",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_property_enum_funcs = _rpythonic_function_(		"RNA_def_property_enum_funcs", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(PropertyRNA)),
	("get",		ctypes.POINTER(ctypes.c_char)),
	("set",		ctypes.POINTER(ctypes.c_char)),
	("item",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_property_string_funcs = _rpythonic_function_(		"RNA_def_property_string_funcs", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(PropertyRNA)),
	("get",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.POINTER(ctypes.c_char)),
	("set",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_property_pointer_funcs = _rpythonic_function_(		"RNA_def_property_pointer_funcs", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(PropertyRNA)),
	("get",		ctypes.POINTER(ctypes.c_char)),
	("set",		ctypes.POINTER(ctypes.c_char)),
	("typef",		ctypes.POINTER(ctypes.c_char)),
	("poll",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_property_collection_funcs = _rpythonic_function_(		"RNA_def_property_collection_funcs", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(PropertyRNA)),
	("begin",		ctypes.POINTER(ctypes.c_char)),
	("next",		ctypes.POINTER(ctypes.c_char)),
	("end",		ctypes.POINTER(ctypes.c_char)),
	("get",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.POINTER(ctypes.c_char)),
	("lookupint",		ctypes.POINTER(ctypes.c_char)),
	("lookupstring",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_property_srna = _rpythonic_function_(		"RNA_def_property_srna", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(PropertyRNA)),
	("C_type",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_py_data = _rpythonic_function_(		"RNA_def_py_data", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(PropertyRNA)),
	("py_data",		ctypes.POINTER(ctypes.c_void_p)),] )

RNA_def_function = _rpythonic_function_(		"RNA_def_function", ctypes.POINTER(FunctionRNA), [
	("srna",		ctypes.POINTER(StructRNA)),
	("identifier",		ctypes.POINTER(ctypes.c_char)),
	("call",		ctypes.POINTER(ctypes.c_char)),] )

RNA_def_function_runtime = _rpythonic_function_(		"RNA_def_function_runtime", ctypes.POINTER(FunctionRNA), [
	("srna",		ctypes.POINTER(StructRNA)),
	("identifier",		ctypes.POINTER(ctypes.c_char)),
	("call",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(bContext),ctypes.POINTER(ReportList),ctypes.POINTER(PointerRNA),ctypes.POINTER(ParameterList),)),] )

RNA_def_function_return = _rpythonic_function_(		"RNA_def_function_return", ctypes.c_void_p, [
	("func",		ctypes.POINTER(FunctionRNA)),
	("ret",		ctypes.POINTER(PropertyRNA)),] )

RNA_def_function_output = _rpythonic_function_(		"RNA_def_function_output", ctypes.c_void_p, [
	("func",		ctypes.POINTER(FunctionRNA)),
	("ret",		ctypes.POINTER(PropertyRNA)),] )

RNA_def_function_flag = _rpythonic_function_(		"RNA_def_function_flag", ctypes.c_void_p, [
	("func",		ctypes.POINTER(FunctionRNA)),
	("flag",		ctypes.c_int),] )

RNA_def_function_ui_description = _rpythonic_function_(		"RNA_def_function_ui_description", ctypes.c_void_p, [
	("func",		ctypes.POINTER(FunctionRNA)),
	("description",		ctypes.POINTER(ctypes.c_char)),] )

RNA_enum_item_add = _rpythonic_function_(		"RNA_enum_item_add", ctypes.c_void_p, [
	("items",		ctypes.POINTER(ctypes.POINTER(EnumPropertyItem))),
	("totitem",		ctypes.POINTER(ctypes.c_int)),
	("item",		ctypes.POINTER(EnumPropertyItem)),] )

RNA_enum_item_add_separator = _rpythonic_function_(		"RNA_enum_item_add_separator", ctypes.c_void_p, [
	("items",		ctypes.POINTER(ctypes.POINTER(EnumPropertyItem))),
	("totitem",		ctypes.POINTER(ctypes.c_int)),] )

RNA_enum_items_add = _rpythonic_function_(		"RNA_enum_items_add", ctypes.c_void_p, [
	("items",		ctypes.POINTER(ctypes.POINTER(EnumPropertyItem))),
	("totitem",		ctypes.POINTER(ctypes.c_int)),
	("item",		ctypes.POINTER(EnumPropertyItem)),] )

RNA_enum_items_add_value = _rpythonic_function_(		"RNA_enum_items_add_value", ctypes.c_void_p, [
	("items",		ctypes.POINTER(ctypes.POINTER(EnumPropertyItem))),
	("totitem",		ctypes.POINTER(ctypes.c_int)),
	("item",		ctypes.POINTER(EnumPropertyItem)),
	("value",		ctypes.c_int),] )

RNA_enum_item_end = _rpythonic_function_(		"RNA_enum_item_end", ctypes.c_void_p, [
	("items",		ctypes.POINTER(ctypes.POINTER(EnumPropertyItem))),
	("totitem",		ctypes.POINTER(ctypes.c_int)),] )

RNA_def_struct_duplicate_pointers = _rpythonic_function_(		"RNA_def_struct_duplicate_pointers", ctypes.c_void_p, [
	("srna",		ctypes.POINTER(StructRNA)),] )

RNA_def_struct_free_pointers = _rpythonic_function_(		"RNA_def_struct_free_pointers", ctypes.c_void_p, [
	("srna",		ctypes.POINTER(StructRNA)),] )

RNA_def_func_duplicate_pointers = _rpythonic_function_(		"RNA_def_func_duplicate_pointers", ctypes.c_void_p, [
	("func",		ctypes.POINTER(FunctionRNA)),] )

RNA_def_func_free_pointers = _rpythonic_function_(		"RNA_def_func_free_pointers", ctypes.c_void_p, [
	("func",		ctypes.POINTER(FunctionRNA)),] )

RNA_def_property_duplicate_pointers = _rpythonic_function_(		"RNA_def_property_duplicate_pointers", ctypes.c_void_p, [
	("cont_",		ctypes.POINTER(ctypes.c_void_p)),
	("prop",		ctypes.POINTER(PropertyRNA)),] )

RNA_def_property_free_pointers = _rpythonic_function_(		"RNA_def_property_free_pointers", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(PropertyRNA)),] )

RNA_def_property_free_identifier = _rpythonic_function_(		"RNA_def_property_free_identifier", ctypes.c_int, [
	("cont_",		ctypes.POINTER(ctypes.c_void_p)),
	("identifier",		ctypes.POINTER(ctypes.c_char)),] )

RNA_property_typename = _rpythonic_function_(		"RNA_property_typename", ctypes.POINTER(ctypes.c_char), [
	("C_type",		ctypes.c_int),] )

doit = _rpythonic_function_(		"doit", ctypes.c_int, [] )

instance_init = _rpythonic_function_(		"instance_init", ctypes.c_void_p, [] )

uiEmboss = _rpythonic_function_(		"uiEmboss", ctypes.c_void_p, [
	("x1",		ctypes.c_float),
	("y1",		ctypes.c_float),
	("x2",		ctypes.c_float),
	("y2",		ctypes.c_float),
	("sel",		ctypes.c_int),] )

uiRoundBox = _rpythonic_function_(		"uiRoundBox", ctypes.c_void_p, [
	("minx",		ctypes.c_float),
	("miny",		ctypes.c_float),
	("maxx",		ctypes.c_float),
	("maxy",		ctypes.c_float),
	("rad",		ctypes.c_float),] )

uiSetRoundBox = _rpythonic_function_(		"uiSetRoundBox", ctypes.c_void_p, [
	("C_type",		ctypes.c_int),] )

uiGetRoundBox = _rpythonic_function_(		"uiGetRoundBox", ctypes.c_int, [] )

uiRoundRect = _rpythonic_function_(		"uiRoundRect", ctypes.c_void_p, [
	("minx",		ctypes.c_float),
	("miny",		ctypes.c_float),
	("maxx",		ctypes.c_float),
	("maxy",		ctypes.c_float),
	("rad",		ctypes.c_float),] )

uiDrawMenuBox = _rpythonic_function_(		"uiDrawMenuBox", ctypes.c_void_p, [
	("minx",		ctypes.c_float),
	("miny",		ctypes.c_float),
	("maxx",		ctypes.c_float),
	("maxy",		ctypes.c_float),
	("flag",		ctypes.c_short),
	("direction",		ctypes.c_short),] )

uiDrawBoxShadow = _rpythonic_function_(		"uiDrawBoxShadow", ctypes.c_void_p, [
	("alpha",		ctypes.c_ubyte),
	("minx",		ctypes.c_float),
	("miny",		ctypes.c_float),
	("maxx",		ctypes.c_float),
	("maxy",		ctypes.c_float),] )

uiDrawBox = _rpythonic_function_(		"uiDrawBox", ctypes.c_void_p, [
	("mode",		ctypes.c_int),
	("minx",		ctypes.c_float),
	("miny",		ctypes.c_float),
	("maxx",		ctypes.c_float),
	("maxy",		ctypes.c_float),
	("rad",		ctypes.c_float),] )

uiDrawBoxShade = _rpythonic_function_(		"uiDrawBoxShade", ctypes.c_void_p, [
	("mode",		ctypes.c_int),
	("minx",		ctypes.c_float),
	("miny",		ctypes.c_float),
	("maxx",		ctypes.c_float),
	("maxy",		ctypes.c_float),
	("rad",		ctypes.c_float),
	("shadetop",		ctypes.c_float),
	("shadedown",		ctypes.c_float),] )

uiDrawBoxVerticalShade = _rpythonic_function_(		"uiDrawBoxVerticalShade", ctypes.c_void_p, [
	("mode",		ctypes.c_int),
	("minx",		ctypes.c_float),
	("miny",		ctypes.c_float),
	("maxx",		ctypes.c_float),
	("maxy",		ctypes.c_float),
	("rad",		ctypes.c_float),
	("shadeLeft",		ctypes.c_float),
	("shadeRight",		ctypes.c_float),] )

uiWidgetScrollDraw = _rpythonic_function_(		"uiWidgetScrollDraw", ctypes.c_void_p, [
	("wcol",		ctypes.POINTER(uiWidgetColors)),
	("rect",		ctypes.POINTER(rcti)),
	("slider",		ctypes.POINTER(rcti)),
	("state",		ctypes.c_int),] )

uiMenuCreateFunc = _rpythonic_function_(		"uiMenuCreateFunc", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("layout",		ctypes.POINTER(uiLayout)),
	("arg1",		ctypes.POINTER(ctypes.c_void_p)),] )

uiMenuHandleFunc = _rpythonic_function_(		"uiMenuHandleFunc", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),
	("event",		ctypes.c_int),] )

uiPupMenuBegin = _rpythonic_function_(		"uiPupMenuBegin", ctypes.POINTER(uiPopupMenu), [
	("C",		ctypes.POINTER(bContext)),
	("title",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),] )

uiPupMenuEnd = _rpythonic_function_(		"uiPupMenuEnd", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("head",		ctypes.POINTER(uiPopupMenu)),] )

uiPupMenuLayout = _rpythonic_function_(		"uiPupMenuLayout", ctypes.POINTER(uiLayout), [
	("head",		ctypes.POINTER(uiPopupMenu)),] )

uiPupMenuOkee = _rpythonic_function_(		"uiPupMenuOkee", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("opname",		ctypes.POINTER(ctypes.c_char)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

uiPupMenuSaveOver = _rpythonic_function_(		"uiPupMenuSaveOver", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

uiPupMenuNotice = _rpythonic_function_(		"uiPupMenuNotice", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

uiPupMenuError = _rpythonic_function_(		"uiPupMenuError", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

uiPupMenuReports = _rpythonic_function_(		"uiPupMenuReports", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("reports",		ctypes.POINTER(ReportList)),] )

uiPupMenuInvoke = _rpythonic_function_(		"uiPupMenuInvoke", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("idname",		ctypes.POINTER(ctypes.c_char)),] )

uiBlockCreateFunc = _rpythonic_function_(		"uiBlockCreateFunc", ctypes.POINTER(uiBlock), [
	("C",		ctypes.POINTER(bContext)),
	("ar",		ctypes.POINTER(ARegion)),
	("arg1",		ctypes.POINTER(ctypes.c_void_p)),] )

uiBlockCancelFunc = _rpythonic_function_(		"uiBlockCancelFunc", ctypes.c_void_p, [("arg1",		ctypes.c_void_p)] )

uiPupBlock = _rpythonic_function_(		"uiPupBlock", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("func",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(uiBlock), ctypes.POINTER(bContext),ctypes.POINTER(ARegion),ctypes.POINTER(ctypes.c_void_p),))),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),] )

uiPupBlockO = _rpythonic_function_(		"uiPupBlockO", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("func",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(uiBlock), ctypes.POINTER(bContext),ctypes.POINTER(ARegion),ctypes.POINTER(ctypes.c_void_p),))),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),
	("opname",		ctypes.POINTER(ctypes.c_char)),
	("opcontext",		ctypes.c_int),] )

uiPupBlockEx = _rpythonic_function_(		"uiPupBlockEx", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("func",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(uiBlock), ctypes.POINTER(bContext),ctypes.POINTER(ARegion),ctypes.POINTER(ctypes.c_void_p),))),
	("cancel_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),] )

uiPupBlockClose = _rpythonic_function_(		"uiPupBlockClose", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("block",		ctypes.POINTER(uiBlock)),] )

uiBeginBlock = _rpythonic_function_(		"uiBeginBlock", ctypes.POINTER(uiBlock), [
	("C",		ctypes.POINTER(bContext)),
	("region",		ctypes.POINTER(ARegion)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("dt",		ctypes.c_short),] )

uiEndBlock = _rpythonic_function_(		"uiEndBlock", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("block",		ctypes.POINTER(uiBlock)),] )

uiDrawBlock = _rpythonic_function_(		"uiDrawBlock", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("block",		ctypes.POINTER(uiBlock)),] )

uiGetBlock = _rpythonic_function_(		"uiGetBlock", ctypes.POINTER(uiBlock), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("ar",		ctypes.POINTER(ARegion)),] )

uiBlockSetEmboss = _rpythonic_function_(		"uiBlockSetEmboss", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),
	("dt",		ctypes.c_char),] )

uiFreeBlock = _rpythonic_function_(		"uiFreeBlock", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("block",		ctypes.POINTER(uiBlock)),] )

uiFreeBlocks = _rpythonic_function_(		"uiFreeBlocks", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("lb",		ctypes.POINTER(ListBase)),] )

uiFreeInactiveBlocks = _rpythonic_function_(		"uiFreeInactiveBlocks", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("lb",		ctypes.POINTER(ListBase)),] )

uiFreeActiveButtons = _rpythonic_function_(		"uiFreeActiveButtons", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("screen",		ctypes.POINTER(bScreen)),] )

uiBlockSetRegion = _rpythonic_function_(		"uiBlockSetRegion", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),
	("region",		ctypes.POINTER(ARegion)),] )

uiBlockSetButLock = _rpythonic_function_(		"uiBlockSetButLock", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),
	("val",		ctypes.c_int),
	("lockstr",		ctypes.POINTER(ctypes.c_char)),] )

uiBlockClearButLock = _rpythonic_function_(		"uiBlockClearButLock", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),] )

uiBlockBeginAlign = _rpythonic_function_(		"uiBlockBeginAlign", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),] )

uiBlockEndAlign = _rpythonic_function_(		"uiBlockEndAlign", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),] )

uiBoundsBlock = _rpythonic_function_(		"uiBoundsBlock", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),
	("addval",		ctypes.c_int),] )

uiTextBoundsBlock = _rpythonic_function_(		"uiTextBoundsBlock", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),
	("addval",		ctypes.c_int),] )

uiPopupBoundsBlock = _rpythonic_function_(		"uiPopupBoundsBlock", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),
	("addval",		ctypes.c_int),
	("mx",		ctypes.c_int),
	("my",		ctypes.c_int),] )

uiMenuPopupBoundsBlock = _rpythonic_function_(		"uiMenuPopupBoundsBlock", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),
	("addvall",		ctypes.c_int),
	("mx",		ctypes.c_int),
	("my",		ctypes.c_int),] )

uiCenteredBoundsBlock = _rpythonic_function_(		"uiCenteredBoundsBlock", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),
	("addval",		ctypes.c_int),] )

uiBlocksGetYMin = _rpythonic_function_(		"uiBlocksGetYMin", ctypes.c_int, [
	("lb",		ctypes.POINTER(ListBase)),] )

uiBlockSetDirection = _rpythonic_function_(		"uiBlockSetDirection", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),
	("direction",		ctypes.c_int),] )

uiBlockFlipOrder = _rpythonic_function_(		"uiBlockFlipOrder", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),] )

uiBlockSetFlag = _rpythonic_function_(		"uiBlockSetFlag", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),
	("flag",		ctypes.c_int),] )

uiBlockClearFlag = _rpythonic_function_(		"uiBlockClearFlag", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),
	("flag",		ctypes.c_int),] )

uiBlockSetXOfs = _rpythonic_function_(		"uiBlockSetXOfs", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),
	("xofs",		ctypes.c_int),] )

uiButGetRetVal = _rpythonic_function_(		"uiButGetRetVal", ctypes.c_int, [
	("but",		ctypes.POINTER(uiBut)),] )

uiButSetDragID = _rpythonic_function_(		"uiButSetDragID", ctypes.c_void_p, [
	("but",		ctypes.POINTER(uiBut)),
	("C_id",		ctypes.POINTER(ID)),] )

uiButSetDragRNA = _rpythonic_function_(		"uiButSetDragRNA", ctypes.c_void_p, [
	("but",		ctypes.POINTER(uiBut)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

uiButSetDragPath = _rpythonic_function_(		"uiButSetDragPath", ctypes.c_void_p, [
	("but",		ctypes.POINTER(uiBut)),
	("path",		ctypes.POINTER(ctypes.c_char)),] )

uiButSetDragName = _rpythonic_function_(		"uiButSetDragName", ctypes.c_void_p, [
	("but",		ctypes.POINTER(uiBut)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

uiButSetDragValue = _rpythonic_function_(		"uiButSetDragValue", ctypes.c_void_p, [
	("but",		ctypes.POINTER(uiBut)),] )

uiButSetDragImage = _rpythonic_function_(		"uiButSetDragImage", ctypes.c_void_p, [
	("but",		ctypes.POINTER(uiBut)),
	("path",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),
	("ima",		ctypes.POINTER(ImBuf)),
	("scale",		ctypes.c_float),] )

UI_but_active_drop_name = _rpythonic_function_(		"UI_but_active_drop_name", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

uiButSetFlag = _rpythonic_function_(		"uiButSetFlag", ctypes.c_void_p, [
	("but",		ctypes.POINTER(uiBut)),
	("flag",		ctypes.c_int),] )

uiButClearFlag = _rpythonic_function_(		"uiButClearFlag", ctypes.c_void_p, [
	("but",		ctypes.POINTER(uiBut)),
	("flag",		ctypes.c_int),] )

uiButActiveOnly = _rpythonic_function_(		"uiButActiveOnly", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("block",		ctypes.POINTER(uiBlock)),
	("but",		ctypes.POINTER(uiBut)),] )

uiDefBut = _rpythonic_function_(		"uiDefBut", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_void_p)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefButF = _rpythonic_function_(		"uiDefButF", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_float)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefButBitF = _rpythonic_function_(		"uiDefButBitF", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("bit",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_float)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefButI = _rpythonic_function_(		"uiDefButI", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_int)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefButBitI = _rpythonic_function_(		"uiDefButBitI", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("bit",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_int)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefButS = _rpythonic_function_(		"uiDefButS", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_short)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefButBitS = _rpythonic_function_(		"uiDefButBitS", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("bit",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_short)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefButC = _rpythonic_function_(		"uiDefButC", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_char)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefButBitC = _rpythonic_function_(		"uiDefButBitC", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("bit",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_char)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefButR = _rpythonic_function_(		"uiDefButR", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("index",		ctypes.c_int),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefButR_prop = _rpythonic_function_(		"uiDefButR_prop", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("prop",		ctypes.POINTER(PropertyRNA)),
	("index",		ctypes.c_int),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefButO = _rpythonic_function_(		"uiDefButO", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("opname",		ctypes.POINTER(ctypes.c_char)),
	("opcontext",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefButTextO = _rpythonic_function_(		"uiDefButTextO", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("opname",		ctypes.POINTER(ctypes.c_char)),
	("opcontext",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_void_p)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconBut = _rpythonic_function_(		"uiDefIconBut", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_void_p)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconButF = _rpythonic_function_(		"uiDefIconButF", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_float)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconButBitF = _rpythonic_function_(		"uiDefIconButBitF", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("bit",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_float)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconButI = _rpythonic_function_(		"uiDefIconButI", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_int)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconButBitI = _rpythonic_function_(		"uiDefIconButBitI", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("bit",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_int)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconButS = _rpythonic_function_(		"uiDefIconButS", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_short)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconButBitS = _rpythonic_function_(		"uiDefIconButBitS", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("bit",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_short)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconButC = _rpythonic_function_(		"uiDefIconButC", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_char)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconButBitC = _rpythonic_function_(		"uiDefIconButBitC", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("bit",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_char)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconButR = _rpythonic_function_(		"uiDefIconButR", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("index",		ctypes.c_int),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconButR_prop = _rpythonic_function_(		"uiDefIconButR_prop", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("prop",		ctypes.POINTER(PropertyRNA)),
	("index",		ctypes.c_int),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconButO = _rpythonic_function_(		"uiDefIconButO", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("opname",		ctypes.POINTER(ctypes.c_char)),
	("opcontext",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconTextBut = _rpythonic_function_(		"uiDefIconTextBut", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_void_p)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconTextButF = _rpythonic_function_(		"uiDefIconTextButF", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_float)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconTextButBitF = _rpythonic_function_(		"uiDefIconTextButBitF", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("bit",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_float)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconTextButI = _rpythonic_function_(		"uiDefIconTextButI", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_int)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconTextButBitI = _rpythonic_function_(		"uiDefIconTextButBitI", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("bit",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_int)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconTextButS = _rpythonic_function_(		"uiDefIconTextButS", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_short)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconTextButBitS = _rpythonic_function_(		"uiDefIconTextButBitS", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("bit",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_short)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconTextButC = _rpythonic_function_(		"uiDefIconTextButC", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_char)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconTextButBitC = _rpythonic_function_(		"uiDefIconTextButBitC", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("bit",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_char)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconTextButR = _rpythonic_function_(		"uiDefIconTextButR", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("index",		ctypes.c_int),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconTextButR_prop = _rpythonic_function_(		"uiDefIconTextButR_prop", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("prop",		ctypes.POINTER(PropertyRNA)),
	("index",		ctypes.c_int),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconTextButO = _rpythonic_function_(		"uiDefIconTextButO", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("opname",		ctypes.POINTER(ctypes.c_char)),
	("opcontext",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiButGetOperatorPtrRNA = _rpythonic_function_(		"uiButGetOperatorPtrRNA", ctypes.POINTER(PointerRNA), [
	("but",		ctypes.POINTER(uiBut)),] )

uiButSetUnitType = _rpythonic_function_(		"uiButSetUnitType", ctypes.c_void_p, [
	("but",		ctypes.POINTER(uiBut)),
	("unit_type",		ctypes.c_int),] )

uiButGetUnitType = _rpythonic_function_(		"uiButGetUnitType", ctypes.c_int, [
	("but",		ctypes.POINTER(uiBut)),] )

uiIDPoinFuncFP = _rpythonic_function_(		"uiIDPoinFuncFP", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("idpp",		ctypes.POINTER(ctypes.POINTER(ID))),] )

uiIDPoinFunc = _rpythonic_function_(		"uiIDPoinFunc", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("C_id",		ctypes.POINTER(ID)),
	("event",		ctypes.c_int),] )

uiDefIDPoinBut = _rpythonic_function_(		"uiDefIDPoinBut", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(bContext),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.POINTER(ID)),)),
	("blocktype",		ctypes.c_short),
	("retval",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("idpp",		ctypes.POINTER(ctypes.c_void_p)),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiIconFromID = _rpythonic_function_(		"uiIconFromID", ctypes.c_int, [
	("C_id",		ctypes.POINTER(ID)),] )

uiDefPulldownBut = _rpythonic_function_(		"uiDefPulldownBut", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("func",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(uiBlock), ctypes.POINTER(bContext),ctypes.POINTER(ARegion),ctypes.POINTER(ctypes.c_void_p),))),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefMenuBut = _rpythonic_function_(		"uiDefMenuBut", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(bContext),ctypes.POINTER(uiLayout),ctypes.POINTER(ctypes.c_void_p),)),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconTextMenuBut = _rpythonic_function_(		"uiDefIconTextMenuBut", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(bContext),ctypes.POINTER(uiLayout),ctypes.POINTER(ctypes.c_void_p),)),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),
	("icon",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconMenuBut = _rpythonic_function_(		"uiDefIconMenuBut", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(bContext),ctypes.POINTER(uiLayout),ctypes.POINTER(ctypes.c_void_p),)),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),
	("icon",		ctypes.c_int),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefBlockBut = _rpythonic_function_(		"uiDefBlockBut", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("func",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(uiBlock), ctypes.POINTER(bContext),ctypes.POINTER(ARegion),ctypes.POINTER(ctypes.c_void_p),))),
	("func_arg1",		ctypes.POINTER(ctypes.c_void_p)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefBlockButN = _rpythonic_function_(		"uiDefBlockButN", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("func",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(uiBlock), ctypes.POINTER(bContext),ctypes.POINTER(ARegion),ctypes.POINTER(ctypes.c_void_p),))),
	("argN",		ctypes.POINTER(ctypes.c_void_p)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconBlockBut = _rpythonic_function_(		"uiDefIconBlockBut", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("func",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(uiBlock), ctypes.POINTER(bContext),ctypes.POINTER(ARegion),ctypes.POINTER(ctypes.c_void_p),))),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconTextBlockBut = _rpythonic_function_(		"uiDefIconTextBlockBut", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("func",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(uiBlock), ctypes.POINTER(bContext),ctypes.POINTER(ARegion),ctypes.POINTER(ctypes.c_void_p),))),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),
	("icon",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefKeyevtButS = _rpythonic_function_(		"uiDefKeyevtButS", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("retval",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("spoin",		ctypes.POINTER(ctypes.c_short)),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefHotKeyevtButS = _rpythonic_function_(		"uiDefHotKeyevtButS", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("retval",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("keypoin",		ctypes.POINTER(ctypes.c_short)),
	("modkeypoin",		ctypes.POINTER(ctypes.c_short)),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefSearchBut = _rpythonic_function_(		"uiDefSearchBut", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("maxlen",		ctypes.c_int),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiBlockPickerButtons = _rpythonic_function_(		"uiBlockPickerButtons", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),
	("col",		ctypes.POINTER(ctypes.c_float)),
	("hsv",		ctypes.POINTER(ctypes.c_float)),
	("old",		ctypes.POINTER(ctypes.c_float)),
	("hexcol",		ctypes.POINTER(ctypes.c_char)),
	("mode",		ctypes.c_char),
	("retval",		ctypes.c_short),] )

uiDefAutoButR = _rpythonic_function_(		"uiDefAutoButR", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("prop",		ctypes.POINTER(PropertyRNA)),
	("index",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_int),
	("y2",		ctypes.c_int),] )

uiDefAutoButsRNA = _rpythonic_function_(		"uiDefAutoButsRNA", ctypes.c_int, [
	("layout",		ctypes.POINTER(uiLayout)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("check_prop",		ctypes.c_void_p),
	("label_align",		ctypes.c_char),] )

check_prop = _rpythonic_function_(		"check_prop", ctypes.c_int, [
	("PropertyRNA",		ctypes.POINTER(PropertyRNA)),] )

uiSetButLink = _rpythonic_function_(		"uiSetButLink", ctypes.c_void_p, [
	("but",		ctypes.POINTER(uiBut)),
	("poin",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("ppoin",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)))),
	("tot",		ctypes.POINTER(ctypes.c_short)),
	("from",		ctypes.c_int),
	("to",		ctypes.c_int),] )

uiComposeLinks = _rpythonic_function_(		"uiComposeLinks", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),] )

uiFindInlink = _rpythonic_function_(		"uiFindInlink", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("poin",		ctypes.POINTER(ctypes.c_void_p)),] )

uiButHandleFunc = _rpythonic_function_(		"uiButHandleFunc", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("arg1",		ctypes.POINTER(ctypes.c_void_p)),
	("arg2",		ctypes.POINTER(ctypes.c_void_p)),] )

uiButHandleRenameFunc = _rpythonic_function_(		"uiButHandleRenameFunc", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),
	("origstr",		ctypes.POINTER(ctypes.c_char)),] )

uiButHandleNFunc = _rpythonic_function_(		"uiButHandleNFunc", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("argN",		ctypes.POINTER(ctypes.c_void_p)),
	("arg2",		ctypes.POINTER(ctypes.c_void_p)),] )

uiButCompleteFunc = _rpythonic_function_(		"uiButCompleteFunc", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),] )

uiButSearchFunc = _rpythonic_function_(		"uiButSearchFunc", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("items",		ctypes.POINTER(uiSearchItems)),] )

uiBlockHandleFunc = _rpythonic_function_(		"uiBlockHandleFunc", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),
	("event",		ctypes.c_int),] )

uiSearchItemAdd = _rpythonic_function_(		"uiSearchItemAdd", ctypes.c_int, [
	("items",		ctypes.POINTER(uiSearchItems)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("poin",		ctypes.POINTER(ctypes.c_void_p)),
	("iconid",		ctypes.c_int),] )

uiButSetSearchFunc = _rpythonic_function_(		"uiButSetSearchFunc", ctypes.c_void_p, [
	("but",		ctypes.POINTER(uiBut)),
	("sfunc",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(bContext),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(uiSearchItems),)),
	("arg1",		ctypes.POINTER(ctypes.c_void_p)),
	("bfunc",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(bContext),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("active",		ctypes.POINTER(ctypes.c_void_p)),] )

uiSearchBoxhHeight = _rpythonic_function_(		"uiSearchBoxhHeight", ctypes.c_int, [] )

uiBlockSetHandleFunc = _rpythonic_function_(		"uiBlockSetHandleFunc", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(bContext),ctypes.POINTER(ctypes.c_void_p),ctypes.c_int,)),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),] )

uiBlockSetButmFunc = _rpythonic_function_(		"uiBlockSetButmFunc", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(bContext),ctypes.POINTER(ctypes.c_void_p),ctypes.c_int,)),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),] )

uiBlockSetFunc = _rpythonic_function_(		"uiBlockSetFunc", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(bContext),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("arg1",		ctypes.POINTER(ctypes.c_void_p)),
	("arg2",		ctypes.POINTER(ctypes.c_void_p)),] )

uiBlockSetNFunc = _rpythonic_function_(		"uiBlockSetNFunc", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(bContext),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("argN",		ctypes.POINTER(ctypes.c_void_p)),
	("arg2",		ctypes.POINTER(ctypes.c_void_p)),] )

uiButSetRenameFunc = _rpythonic_function_(		"uiButSetRenameFunc", ctypes.c_void_p, [
	("but",		ctypes.POINTER(uiBut)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(bContext),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),)),
	("arg1",		ctypes.POINTER(ctypes.c_void_p)),] )

uiButSetFunc = _rpythonic_function_(		"uiButSetFunc", ctypes.c_void_p, [
	("but",		ctypes.POINTER(uiBut)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(bContext),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("arg1",		ctypes.POINTER(ctypes.c_void_p)),
	("arg2",		ctypes.POINTER(ctypes.c_void_p)),] )

uiButSetNFunc = _rpythonic_function_(		"uiButSetNFunc", ctypes.c_void_p, [
	("but",		ctypes.POINTER(uiBut)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(bContext),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("argN",		ctypes.POINTER(ctypes.c_void_p)),
	("arg2",		ctypes.POINTER(ctypes.c_void_p)),] )

uiButSetCompleteFunc = _rpythonic_function_(		"uiButSetCompleteFunc", ctypes.c_void_p, [
	("but",		ctypes.POINTER(uiBut)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(bContext),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),)),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),] )

uiBlockSetDrawExtraFunc = _rpythonic_function_(		"uiBlockSetDrawExtraFunc", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),
	("func",		ctypes.c_void_p),
	("arg1",		ctypes.POINTER(ctypes.c_void_p)),
	("arg2",		ctypes.POINTER(ctypes.c_void_p)),] )

uiButSetFocusOnEnter = _rpythonic_function_(		"uiButSetFocusOnEnter", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),
	("but",		ctypes.POINTER(uiBut)),] )

autocomplete_begin = _rpythonic_function_(		"autocomplete_begin", ctypes.POINTER(AutoComplete), [
	("startname",		ctypes.POINTER(ctypes.c_char)),
	("maxlen",		ctypes.c_int),] )

autocomplete_do_name = _rpythonic_function_(		"autocomplete_do_name", ctypes.c_void_p, [
	("autocpl",		ctypes.POINTER(AutoComplete)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

autocomplete_end = _rpythonic_function_(		"autocomplete_end", ctypes.c_void_p, [
	("autocpl",		ctypes.POINTER(AutoComplete)),
	("autoname",		ctypes.POINTER(ctypes.c_char)),] )

uiBeginPanels = _rpythonic_function_(		"uiBeginPanels", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("ar",		ctypes.POINTER(ARegion)),] )

uiEndPanels = _rpythonic_function_(		"uiEndPanels", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("ar",		ctypes.POINTER(ARegion)),] )

uiBeginPanel = _rpythonic_function_(		"uiBeginPanel", ctypes.POINTER(Panel), [
	("sa",		ctypes.POINTER(ScrArea)),
	("ar",		ctypes.POINTER(ARegion)),
	("block",		ctypes.POINTER(uiBlock)),
	("pt",		ctypes.POINTER(PanelType)),
	("open",		ctypes.POINTER(ctypes.c_int)),] )

uiEndPanel = _rpythonic_function_(		"uiEndPanel", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

UI_add_region_handlers = _rpythonic_function_(		"UI_add_region_handlers", ctypes.c_void_p, [
	("handlers",		ctypes.POINTER(ListBase)),] )

UI_add_area_handlers = _rpythonic_function_(		"UI_add_area_handlers", ctypes.c_void_p, [
	("handlers",		ctypes.POINTER(ListBase)),] )

UI_add_popup_handlers = _rpythonic_function_(		"UI_add_popup_handlers", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("handlers",		ctypes.POINTER(ListBase)),
	("popup",		ctypes.POINTER(uiPopupBlockHandle)),] )

UI_remove_popup_handlers = _rpythonic_function_(		"UI_remove_popup_handlers", ctypes.c_void_p, [
	("handlers",		ctypes.POINTER(ListBase)),
	("popup",		ctypes.POINTER(uiPopupBlockHandle)),] )

UI_init = _rpythonic_function_(		"UI_init", ctypes.c_void_p, [] )

UI_init_userdef = _rpythonic_function_(		"UI_init_userdef", ctypes.c_void_p, [] )

UI_exit = _rpythonic_function_(		"UI_exit", ctypes.c_void_p, [] )

uiBlockLayout = _rpythonic_function_(		"uiBlockLayout", ctypes.POINTER(uiLayout), [
	("block",		ctypes.POINTER(uiBlock)),
	("dir",		ctypes.c_int),
	("C_type",		ctypes.c_int),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("size",		ctypes.c_int),
	("em",		ctypes.c_int),
	("style",		ctypes.POINTER(uiStyle)),] )

uiBlockSetCurLayout = _rpythonic_function_(		"uiBlockSetCurLayout", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),
	("layout",		ctypes.POINTER(uiLayout)),] )

uiBlockLayoutResolve = _rpythonic_function_(		"uiBlockLayoutResolve", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),
	("x",		ctypes.POINTER(ctypes.c_int)),
	("y",		ctypes.POINTER(ctypes.c_int)),] )

uiLayoutGetBlock = _rpythonic_function_(		"uiLayoutGetBlock", ctypes.POINTER(uiBlock), [
	("layout",		ctypes.POINTER(uiLayout)),] )

uiLayoutSetFunc = _rpythonic_function_(		"uiLayoutSetFunc", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("handlefunc",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(bContext),ctypes.POINTER(ctypes.c_void_p),ctypes.c_int,)),
	("argv",		ctypes.POINTER(ctypes.c_void_p)),] )

uiLayoutSetContextPointer = _rpythonic_function_(		"uiLayoutSetContextPointer", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

uiLayoutIntrospect = _rpythonic_function_(		"uiLayoutIntrospect", ctypes.POINTER(ctypes.c_char), [
	("layout",		ctypes.POINTER(uiLayout)),] )

uiLayoutOperatorButs = _rpythonic_function_(		"uiLayoutOperatorButs", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("layout",		ctypes.POINTER(uiLayout)),
	("op",		ctypes.POINTER(wmOperator)),
	("check_prop",		ctypes.c_void_p),
	("label_align",		ctypes.c_char),
	("flag",		ctypes.c_short),] )

uiLayoutSetOperatorContext = _rpythonic_function_(		"uiLayoutSetOperatorContext", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("opcontext",		ctypes.c_int),] )

uiLayoutSetActive = _rpythonic_function_(		"uiLayoutSetActive", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("active",		ctypes.c_int),] )

uiLayoutSetEnabled = _rpythonic_function_(		"uiLayoutSetEnabled", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("enabled",		ctypes.c_int),] )

uiLayoutSetRedAlert = _rpythonic_function_(		"uiLayoutSetRedAlert", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("redalert",		ctypes.c_int),] )

uiLayoutSetAlignment = _rpythonic_function_(		"uiLayoutSetAlignment", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("alignment",		ctypes.c_int),] )

uiLayoutSetKeepAspect = _rpythonic_function_(		"uiLayoutSetKeepAspect", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("keepaspect",		ctypes.c_int),] )

uiLayoutSetScaleX = _rpythonic_function_(		"uiLayoutSetScaleX", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("scale",		ctypes.c_float),] )

uiLayoutSetScaleY = _rpythonic_function_(		"uiLayoutSetScaleY", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("scale",		ctypes.c_float),] )

uiLayoutGetOperatorContext = _rpythonic_function_(		"uiLayoutGetOperatorContext", ctypes.c_int, [
	("layout",		ctypes.POINTER(uiLayout)),] )

uiLayoutGetActive = _rpythonic_function_(		"uiLayoutGetActive", ctypes.c_int, [
	("layout",		ctypes.POINTER(uiLayout)),] )

uiLayoutGetEnabled = _rpythonic_function_(		"uiLayoutGetEnabled", ctypes.c_int, [
	("layout",		ctypes.POINTER(uiLayout)),] )

uiLayoutGetRedAlert = _rpythonic_function_(		"uiLayoutGetRedAlert", ctypes.c_int, [
	("layout",		ctypes.POINTER(uiLayout)),] )

uiLayoutGetAlignment = _rpythonic_function_(		"uiLayoutGetAlignment", ctypes.c_int, [
	("layout",		ctypes.POINTER(uiLayout)),] )

uiLayoutGetKeepAspect = _rpythonic_function_(		"uiLayoutGetKeepAspect", ctypes.c_int, [
	("layout",		ctypes.POINTER(uiLayout)),] )

uiLayoutGetWidth = _rpythonic_function_(		"uiLayoutGetWidth", ctypes.c_int, [
	("layout",		ctypes.POINTER(uiLayout)),] )

uiLayoutGetScaleX = _rpythonic_function_(		"uiLayoutGetScaleX", ctypes.c_float, [
	("layout",		ctypes.POINTER(uiLayout)),] )

uiLayoutGetScaleY = _rpythonic_function_(		"uiLayoutGetScaleY", ctypes.c_float, [
	("layout",		ctypes.POINTER(uiLayout)),] )

uiLayoutRow = _rpythonic_function_(		"uiLayoutRow", ctypes.POINTER(uiLayout), [
	("layout",		ctypes.POINTER(uiLayout)),
	("align",		ctypes.c_int),] )

uiLayoutColumn = _rpythonic_function_(		"uiLayoutColumn", ctypes.POINTER(uiLayout), [
	("layout",		ctypes.POINTER(uiLayout)),
	("align",		ctypes.c_int),] )

uiLayoutColumnFlow = _rpythonic_function_(		"uiLayoutColumnFlow", ctypes.POINTER(uiLayout), [
	("layout",		ctypes.POINTER(uiLayout)),
	("number",		ctypes.c_int),
	("align",		ctypes.c_int),] )

uiLayoutBox = _rpythonic_function_(		"uiLayoutBox", ctypes.POINTER(uiLayout), [
	("layout",		ctypes.POINTER(uiLayout)),] )

uiLayoutListBox = _rpythonic_function_(		"uiLayoutListBox", ctypes.POINTER(uiLayout), [
	("layout",		ctypes.POINTER(uiLayout)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("prop",		ctypes.POINTER(PropertyRNA)),
	("actptr",		ctypes.POINTER(PointerRNA)),
	("actprop",		ctypes.POINTER(PropertyRNA)),] )

uiLayoutAbsolute = _rpythonic_function_(		"uiLayoutAbsolute", ctypes.POINTER(uiLayout), [
	("layout",		ctypes.POINTER(uiLayout)),
	("align",		ctypes.c_int),] )

uiLayoutSplit = _rpythonic_function_(		"uiLayoutSplit", ctypes.POINTER(uiLayout), [
	("layout",		ctypes.POINTER(uiLayout)),
	("percentage",		ctypes.c_float),
	("align",		ctypes.c_int),] )

uiLayoutOverlap = _rpythonic_function_(		"uiLayoutOverlap", ctypes.POINTER(uiLayout), [
	("layout",		ctypes.POINTER(uiLayout)),] )

uiLayoutAbsoluteBlock = _rpythonic_function_(		"uiLayoutAbsoluteBlock", ctypes.POINTER(uiBlock), [
	("layout",		ctypes.POINTER(uiLayout)),] )

uiTemplateHeader = _rpythonic_function_(		"uiTemplateHeader", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("C",		ctypes.POINTER(bContext)),
	("menus",		ctypes.c_int),] )

uiTemplateDopeSheetFilter = _rpythonic_function_(		"uiTemplateDopeSheetFilter", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("C",		ctypes.POINTER(bContext)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

uiTemplateID = _rpythonic_function_(		"uiTemplateID", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("C",		ctypes.POINTER(bContext)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("newop",		ctypes.POINTER(ctypes.c_char)),
	("openop",		ctypes.POINTER(ctypes.c_char)),
	("unlinkop",		ctypes.POINTER(ctypes.c_char)),] )

uiTemplateIDBrowse = _rpythonic_function_(		"uiTemplateIDBrowse", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("C",		ctypes.POINTER(bContext)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("newop",		ctypes.POINTER(ctypes.c_char)),
	("openop",		ctypes.POINTER(ctypes.c_char)),
	("unlinkop",		ctypes.POINTER(ctypes.c_char)),] )

uiTemplateIDPreview = _rpythonic_function_(		"uiTemplateIDPreview", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("C",		ctypes.POINTER(bContext)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("newop",		ctypes.POINTER(ctypes.c_char)),
	("openop",		ctypes.POINTER(ctypes.c_char)),
	("unlinkop",		ctypes.POINTER(ctypes.c_char)),
	("rows",		ctypes.c_int),
	("cols",		ctypes.c_int),] )

uiTemplateAnyID = _rpythonic_function_(		"uiTemplateAnyID", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("proptypename",		ctypes.POINTER(ctypes.c_char)),
	("text",		ctypes.POINTER(ctypes.c_char)),] )

uiTemplatePathBuilder = _rpythonic_function_(		"uiTemplatePathBuilder", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("root_ptr",		ctypes.POINTER(PointerRNA)),
	("text",		ctypes.POINTER(ctypes.c_char)),] )

uiTemplateModifier = _rpythonic_function_(		"uiTemplateModifier", ctypes.POINTER(uiLayout), [
	("layout",		ctypes.POINTER(uiLayout)),
	("C",		ctypes.POINTER(bContext)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

uiTemplateConstraint = _rpythonic_function_(		"uiTemplateConstraint", ctypes.POINTER(uiLayout), [
	("layout",		ctypes.POINTER(uiLayout)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

uiTemplatePreview = _rpythonic_function_(		"uiTemplatePreview", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("C_id",		ctypes.POINTER(ID)),
	("show_buttons",		ctypes.c_int),
	("parent",		ctypes.POINTER(ID)),
	("slot",		ctypes.POINTER(MTex)),] )

uiTemplateColorRamp = _rpythonic_function_(		"uiTemplateColorRamp", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("expand",		ctypes.c_int),] )

uiTemplateHistogram = _rpythonic_function_(		"uiTemplateHistogram", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),] )

uiTemplateWaveform = _rpythonic_function_(		"uiTemplateWaveform", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),] )

uiTemplateVectorscope = _rpythonic_function_(		"uiTemplateVectorscope", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),] )

uiTemplateCurveMapping = _rpythonic_function_(		"uiTemplateCurveMapping", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("C_type",		ctypes.c_int),
	("levels",		ctypes.c_int),
	("brush",		ctypes.c_int),] )

uiTemplateColorWheel = _rpythonic_function_(		"uiTemplateColorWheel", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("value_slider",		ctypes.c_int),
	("lock",		ctypes.c_int),
	("lock_luminosity",		ctypes.c_int),
	("cubic",		ctypes.c_int),] )

uiTemplateLayers = _rpythonic_function_(		"uiTemplateLayers", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("used_ptr",		ctypes.POINTER(PointerRNA)),
	("used_propname",		ctypes.POINTER(ctypes.c_char)),
	("active_layer",		ctypes.c_int),] )

uiTemplateImage = _rpythonic_function_(		"uiTemplateImage", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("C",		ctypes.POINTER(bContext)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("userptr",		ctypes.POINTER(PointerRNA)),
	("compact",		ctypes.c_int),] )

uiTemplateImageLayers = _rpythonic_function_(		"uiTemplateImageLayers", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("C",		ctypes.POINTER(bContext)),
	("ima",		ctypes.POINTER(Image)),
	("iuser",		ctypes.POINTER(ImageUser)),] )

uiTemplateRunningJobs = _rpythonic_function_(		"uiTemplateRunningJobs", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("C",		ctypes.POINTER(bContext)),] )

uiTemplateOperatorSearch = _rpythonic_function_(		"uiTemplateOperatorSearch", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),] )

uiTemplateHeader3D = _rpythonic_function_(		"uiTemplateHeader3D", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("C",		ctypes.POINTER(bContext)),] )

uiTemplateEditModeSelection = _rpythonic_function_(		"uiTemplateEditModeSelection", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("C",		ctypes.POINTER(bContext)),] )

uiTemplateTextureImage = _rpythonic_function_(		"uiTemplateTextureImage", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("C",		ctypes.POINTER(bContext)),
	("tex",		ctypes.POINTER(Tex)),] )

uiTemplateReportsBanner = _rpythonic_function_(		"uiTemplateReportsBanner", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("C",		ctypes.POINTER(bContext)),] )

uiTemplateList = _rpythonic_function_(		"uiTemplateList", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("C",		ctypes.POINTER(bContext)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("activeptr",		ctypes.POINTER(PointerRNA)),
	("activeprop",		ctypes.POINTER(ctypes.c_char)),
	("rows",		ctypes.c_int),
	("maxrows",		ctypes.c_int),
	("C_type",		ctypes.c_int),] )

uiItemO = _rpythonic_function_(		"uiItemO", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),
	("opname",		ctypes.POINTER(ctypes.c_char)),] )

uiItemEnumO = _rpythonic_function_(		"uiItemEnumO", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("opname",		ctypes.POINTER(ctypes.c_char)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_int),] )

uiItemEnumO_value = _rpythonic_function_(		"uiItemEnumO_value", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),
	("opname",		ctypes.POINTER(ctypes.c_char)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_int),] )

uiItemEnumO_string = _rpythonic_function_(		"uiItemEnumO_string", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),
	("opname",		ctypes.POINTER(ctypes.c_char)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

uiItemsEnumO = _rpythonic_function_(		"uiItemsEnumO", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("opname",		ctypes.POINTER(ctypes.c_char)),
	("propname",		ctypes.POINTER(ctypes.c_char)),] )

uiItemBooleanO = _rpythonic_function_(		"uiItemBooleanO", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),
	("opname",		ctypes.POINTER(ctypes.c_char)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_int),] )

uiItemIntO = _rpythonic_function_(		"uiItemIntO", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),
	("opname",		ctypes.POINTER(ctypes.c_char)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_int),] )

uiItemFloatO = _rpythonic_function_(		"uiItemFloatO", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),
	("opname",		ctypes.POINTER(ctypes.c_char)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_float),] )

uiItemStringO = _rpythonic_function_(		"uiItemStringO", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),
	("opname",		ctypes.POINTER(ctypes.c_char)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

uiItemFullO = _rpythonic_function_(		"uiItemFullO", PointerRNA, [
	("layout",		ctypes.POINTER(uiLayout)),
	("idname",		ctypes.POINTER(ctypes.c_char)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),
	("properties",		ctypes.POINTER(IDProperty)),
	("context",		ctypes.c_int),
	("flag",		ctypes.c_int),] )

uiItemR = _rpythonic_function_(		"uiItemR", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("flag",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),] )

uiItemFullR = _rpythonic_function_(		"uiItemFullR", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("prop",		ctypes.POINTER(PropertyRNA)),
	("index",		ctypes.c_int),
	("value",		ctypes.c_int),
	("flag",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),] )

uiItemEnumR = _rpythonic_function_(		"uiItemEnumR", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_int),] )

uiItemEnumR_string = _rpythonic_function_(		"uiItemEnumR_string", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_char)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),] )

uiItemsEnumR = _rpythonic_function_(		"uiItemsEnumR", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),] )

uiItemPointerR = _rpythonic_function_(		"uiItemPointerR", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("searchptr",		ctypes.POINTER(PointerRNA)),
	("searchpropname",		ctypes.POINTER(ctypes.c_char)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),] )

uiItemsFullEnumO = _rpythonic_function_(		"uiItemsFullEnumO", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("opname",		ctypes.POINTER(ctypes.c_char)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("properties",		ctypes.POINTER(IDProperty)),
	("context",		ctypes.c_int),
	("flag",		ctypes.c_int),] )

uiItemL = _rpythonic_function_(		"uiItemL", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),] )

uiItemLDrag = _rpythonic_function_(		"uiItemLDrag", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),] )

uiItemM = _rpythonic_function_(		"uiItemM", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("C",		ctypes.POINTER(bContext)),
	("menuname",		ctypes.POINTER(ctypes.c_char)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),] )

uiItemV = _rpythonic_function_(		"uiItemV", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),
	("argval",		ctypes.c_int),] )

uiItemS = _rpythonic_function_(		"uiItemS", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),] )

uiItemMenuF = _rpythonic_function_(		"uiItemMenuF", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(bContext),ctypes.POINTER(uiLayout),ctypes.POINTER(ctypes.c_void_p),)),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),] )

uiItemMenuEnumO = _rpythonic_function_(		"uiItemMenuEnumO", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("opname",		ctypes.POINTER(ctypes.c_char)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),] )

uiItemMenuEnumR = _rpythonic_function_(		"uiItemMenuEnumR", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),] )

UI_buttons_operatortypes = _rpythonic_function_(		"UI_buttons_operatortypes", ctypes.c_void_p, [] )

uiContextActiveProperty = _rpythonic_function_(		"uiContextActiveProperty", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("prop",		ctypes.POINTER(ctypes.POINTER(PropertyRNA))),
	("index",		ctypes.POINTER(ctypes.c_int)),] )

uiContextAnimUpdate = _rpythonic_function_(		"uiContextAnimUpdate", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

uiFileBrowseContextProperty = _rpythonic_function_(		"uiFileBrowseContextProperty", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("prop",		ctypes.POINTER(ctypes.POINTER(PropertyRNA))),] )

uiIDContextProperty = _rpythonic_function_(		"uiIDContextProperty", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("prop",		ctypes.POINTER(ctypes.POINTER(PropertyRNA))),] )

uiStyleFontSet = _rpythonic_function_(		"uiStyleFontSet", ctypes.c_void_p, [
	("fs",		ctypes.POINTER(uiFontStyle)),] )

uiStyleFontDrawExt = _rpythonic_function_(		"uiStyleFontDrawExt", ctypes.c_void_p, [
	("fs",		ctypes.POINTER(uiFontStyle)),
	("rect",		ctypes.POINTER(rcti)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("r_xofs",		ctypes.POINTER(ctypes.c_float)),
	("r_yofs",		ctypes.POINTER(ctypes.c_float)),] )

uiStyleFontDraw = _rpythonic_function_(		"uiStyleFontDraw", ctypes.c_void_p, [
	("fs",		ctypes.POINTER(uiFontStyle)),
	("rect",		ctypes.POINTER(rcti)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

uiStyleFontDrawRotated = _rpythonic_function_(		"uiStyleFontDrawRotated", ctypes.c_void_p, [
	("fs",		ctypes.POINTER(uiFontStyle)),
	("rect",		ctypes.POINTER(rcti)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

UI_GetStringWidth = _rpythonic_function_(		"UI_GetStringWidth", ctypes.c_int, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

UI_DrawString = _rpythonic_function_(		"UI_DrawString", ctypes.c_void_p, [
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

UI_DrawTriIcon = _rpythonic_function_(		"UI_DrawTriIcon", ctypes.c_void_p, [
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("dir",		ctypes.c_char),] )

UI_template_fix_linking = _rpythonic_function_(		"UI_template_fix_linking", ctypes.c_void_p, [] )

BLI_exec_cb = _rpythonic_function_(		"BLI_exec_cb", ctypes.c_void_p, [
	("main",		ctypes.POINTER(Main)),
	("C_self",		ctypes.POINTER(ID)),
	("evt",		ctypes.c_int),] )

BLI_add_cb = _rpythonic_function_(		"BLI_add_cb", ctypes.c_void_p, [
	("funcstore",		ctypes.POINTER(bCallbackFuncStore)),
	("evt",		ctypes.c_int),] )

BLI_cb_init = _rpythonic_function_(		"BLI_cb_init", ctypes.c_void_p, [] )

BLI_cb_finalize = _rpythonic_function_(		"BLI_cb_finalize", ctypes.c_void_p, [] )

callLocalErrorCallBack = _rpythonic_function_(		"callLocalErrorCallBack", ctypes.c_void_p, [
	("msg",		ctypes.POINTER(ctypes.c_char)),] )

pluginapi_force_ref = _rpythonic_function_(		"pluginapi_force_ref", ctypes.c_int, [] )

PIL_check_seconds_timer = _rpythonic_function_(		"PIL_check_seconds_timer", ctypes.c_double, [] )

main = _rpythonic_function_(		"main", ctypes.c_void_p, [
	("argc",		ctypes.c_int),
	("argv",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )


_rpythonic_convert_structs_to_objects()

_rpythonic_setup_return_wrappers()
_rpythonic_make_nice_global_enums_()
_rpythonic_clean_up_missing_functions_()

################### Raymond Hettinger's Constant Folding ##################
# Decorator for BindingConstants at compile time
# A recipe by Raymond Hettinger, from Python Cookbook:
# http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/277940
# updated for Python3 and still compatible with Python2 - by Hart, May17th 2011

try: _BUILTINS_DICT_ = vars(__builtins__)
except: _BUILTINS_DICT_ = __builtins__
ISPYTHON2 = sys.version_info[0] == 2
_HETTINGER_FOLDS_ = 0

def _hettinger_make_constants(f, builtin_only=False, stoplist=[], verbose=0):
    from opcode import opmap, HAVE_ARGUMENT, EXTENDED_ARG
    global _HETTINGER_FOLDS_
    try:
        if ISPYTHON2: co = f.func_code; fname = f.func_name
        else: co = f.__code__; fname = f.__name__
    except AttributeError: return f        # Jython doesn't have a func_code attribute.
    if ISPYTHON2: newcode = map(ord, co.co_code)
    else: newcode = list( co.co_code )
    newconsts = list(co.co_consts)
    names = co.co_names
    codelen = len(newcode)
    if ISPYTHON2:
        if verbose >= 2: print( f.func_name )
        func_globals = f.func_globals
    else:
        if verbose >= 2: print( f.__name__ )
        func_globals = f.__globals__

    env = _BUILTINS_DICT_.copy()
    if builtin_only:
        stoplist = dict.fromkeys(stoplist)
        stoplist.update(func_globals)
    else:
        env.update(func_globals)

    # First pass converts global lookups into constants
    i = 0
    while i < codelen:
        opcode = newcode[i]
        if opcode in (EXTENDED_ARG, opmap['STORE_GLOBAL']):
            if verbose >= 1: print('skipping function', fname)
            return f    # for simplicity, only optimize common cases
        if opcode == opmap['LOAD_GLOBAL']:
            oparg = newcode[i+1] + (newcode[i+2] << 8)
            name = co.co_names[oparg]
            if name in env and name not in stoplist:
                value = env[name]
                for pos, v in enumerate(newconsts):
                    if v is value:
                        break
                else:
                    pos = len(newconsts)
                    newconsts.append(value)
                newcode[i] = opmap['LOAD_CONST']
                newcode[i+1] = pos & 0xFF
                newcode[i+2] = pos >> 8
                _HETTINGER_FOLDS_ += 1
                if verbose >= 2:
                    print( "    global constant fold:", name )
        i += 1
        if opcode >= HAVE_ARGUMENT:
            i += 2

    # Second pass folds tuples of constants and constant attribute lookups
    i = 0
    while i < codelen:

        newtuple = []
        while newcode[i] == opmap['LOAD_CONST']:
            oparg = newcode[i+1] + (newcode[i+2] << 8)
            newtuple.append(newconsts[oparg])
            i += 3

        opcode = newcode[i]
        if not newtuple:
            i += 1
            if opcode >= HAVE_ARGUMENT:
                i += 2
            continue

        if opcode == opmap['LOAD_ATTR']:
            obj = newtuple[-1]
            oparg = newcode[i+1] + (newcode[i+2] << 8)
            name = names[oparg]
            try:
                value = getattr(obj, name)
                if verbose >= 2: print( '    folding attribute', name )
            except AttributeError:
                continue
            deletions = 1

        elif opcode == opmap['BUILD_TUPLE']:
            oparg = newcode[i+1] + (newcode[i+2] << 8)
            if oparg != len(newtuple): continue
            deletions = len(newtuple)
            value = tuple(newtuple)

        else: continue

        reljump = deletions * 3
        newcode[i-reljump] = opmap['JUMP_FORWARD']
        newcode[i-reljump+1] = (reljump-3) & 0xFF
        newcode[i-reljump+2] = (reljump-3) >> 8

        n = len(newconsts)
        newconsts.append(value)
        newcode[i] = opmap['LOAD_CONST']
        newcode[i+1] = n & 0xFF
        newcode[i+2] = n >> 8
        i += 3
        _HETTINGER_FOLDS_ += 1
        if verbose >= 2:
            print( "    folded constant:",value )

    if ISPYTHON2:
        codestr = ''.join(map(chr, newcode))
        codeobj = type(co)(co.co_argcount, co.co_nlocals, co.co_stacksize,
                        co.co_flags, codestr, tuple(newconsts), co.co_names,
                        co.co_varnames, co.co_filename, co.co_name,
                        co.co_firstlineno, co.co_lnotab, co.co_freevars,
                        co.co_cellvars)
        return type(f)(codeobj, f.func_globals, f.func_name, f.func_defaults, f.func_closure)
    else:
        codestr = b''
        for s in newcode: codestr += s.to_bytes(1,'little')
        codeobj = type(co)(co.co_argcount, co.co_kwonlyargcount, co.co_nlocals, co.co_stacksize,
                        co.co_flags, codestr, tuple(newconsts), co.co_names,
                        co.co_varnames, co.co_filename, co.co_name,
                        co.co_firstlineno, co.co_lnotab, co.co_freevars,
                        co.co_cellvars)
        return type(f)(codeobj, f.__globals__, f.__name__, f.__defaults__, f.__closure__)


def hettinger_bind_recursive(mc, builtin_only=False, stoplist=[],  verbose=0):
    """Recursively apply constant binding to functions in a module or class.

    Use as the last line of the module (after everything is defined, but
    before test code).  In modules that need modifiable globals, set
    builtin_only to True.

    """
    import types
    try: d = vars(mc)
    except TypeError: return
    if ISPYTHON2: recursivetypes = (type, types.ClassType)
    else: recursivetypes = (type,)
    for k, v in d.items():
        if type(v) is types.FunctionType:
            newv = _hettinger_make_constants(v, builtin_only, stoplist,  verbose)
            setattr(mc, k, newv)
        elif type(v) in recursivetypes:
            hettinger_bind_recursive(v, builtin_only, stoplist, verbose)

def hettinger_transform( module=None ):
    global _HETTINGER_FOLDS_
    _HETTINGER_FOLDS_ = 0
    if not module: module = sys.modules[__name__]
    hettinger_bind_recursive( module, verbose=1 )
    print( 'HETTINGER: constants folded', _HETTINGER_FOLDS_ )
