## generated by RPythonic 0.4.8h	| host: 64bits
## http://code.google.com/p/rpythonic/
import os, sys, ctypes, inspect
__os = os
__sys = sys
__inspect = inspect
_CTYPES_CDLLS = []	# support loading functions from multiple libraries


PYTHON_RESERVED_KEYWORDS = 'for while in as global with try except lambda return raise if else elif eval exec and not or break continue finally print yield del def class assert from is pass'.split()


IS32BIT = (ctypes.sizeof(ctypes.c_void_p)==4)

_ISPYTHON2 = sys.version_info[0] == 2
if _ISPYTHON2: _NULLBYTE = '\0'
else: _NULLBYTE = bytes( chr(0), 'ascii' )

def _CHARP2STRING( charp, encoding='utf-8' ):
	b = bytes()
	i = 0
	while True:
		char = charp[ i ]
		if char == _NULLBYTE: break
		else:
			b += char
			i += 1
	return b.decode( encoding )

## try to load precompiled c-libraries from this directory, if the library is not there try to load from the system.
_clibs_dir = os.path.dirname(os.path.abspath(__file__))

def _load_ctypes_lib( name ):
	if __os.name == 'posix':
		if __sys.platform.startswith('linux'):
			if not name.endswith('.so'): name += '.so'
			if not name.startswith('lib'): name = 'lib' + name

			if IS32BIT: 	path = __os.path.join(_clibs_dir,'linux32')
			else: 		path = __os.path.join(_clibs_dir,'linux64')
			url = __os.path.join( path, name )
			if __os.path.isfile( url ): return ctypes.CDLL(url)
			elif __os.path.isfile( '/usr/local/lib/%s'%name ): return ctypes.CDLL('/usr/local/lib/%s'%name)
			elif __os.path.isfile( '/usr/local/lib64/%s'%name ) and not IS32BIT: return ctypes.CDLL('/usr/local/lib64/%s'%name)
			elif __os.path.isfile( '/usr/lib/%s'%name ): return ctypes.CDLL('/usr/lib/%s'%name)
			elif __os.path.isfile( './%s'%name ): return ctypes.CDLL('./%s'%name)
			
			elif __os.path.isfile( '/usr/lib/%s.0'%name ):	# Fedora style
				return ctypes.CDLL('/usr/lib/%s.0'%name )
			elif __os.path.isfile( '/usr/lib64/%s.0'%name ):	# Fedora style
				return ctypes.CDLL('/usr/lib64/%s.0'%name )

			else:	# fallback
				print('[ falling back to loading from current process ]')
				try: return ctypes.CDLL(name)
				except: return ctypes.CDLL('')

		elif sys.platform == 'darwin':
			name += '.dylib'
			if IS32BIT: 	path = os.path.join(_clibs_dir,'osx32')
			else: 		path = os.path.join(_clibs_dir,'osx64')
			url = os.path.join( path, name )
			if os.path.isfile( url ): return ctypes.CDLL(url)
			else: return ctypes.CDLL(name) #fallback

	elif os.name == 'nt':
		name += '.dll'
		if IS32BIT: 	path = os.path.join(_clibs_dir,'win32')
		else: 		path = os.path.join(_clibs_dir,'win64')
		url = os.path.join( path, name )
		if os.path.isfile( url ): return ctypes.CDLL(url)
		else: return ctypes.CDLL(name) #fallback

RPYTHONIC_WRAPPER_FUNCTIONS = {}
RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES = []
RPYTHONIC_AUTOPREFIX_IGNORE = []

## ctypes does not clearly expose these types ##
PyCFuncPtrType = type(ctypes.CFUNCTYPE(ctypes.c_void_p))
PyCArrayType = type( ctypes.c_int * 2 )
PyCPointerType = type( ctypes.POINTER(ctypes.c_int) )
PyCStructType = type( ctypes.Structure )
CArgObject = type( ctypes.byref(ctypes.c_int()) )

class _rpythonic_meta_(object):
	'''
	Reserved Attributes:
		POINTER
		CSTRUCT
		CAST
	'''
	_rpythonic_ = True		# workaround for now, must have a way to know if object is a meta from another module, isinstance(o,_rpythonic_meta_) will fail in those cases. another workaround could be check sys.modules for other rpythonic modules and fetch _rpythonic_meta_ from there.
	def __init__(self, *args, **kw ):							# cheap trick, abuse **kw, and look for "pointer", "cast"
		if kw and 'pointer' not in kw: raise SyntaxError	# sorry, you can not init with keywords
		elif kw and 'pointer' in kw:
			if 'cast' in kw and kw['cast']:
				self.POINTER = ctypes.cast( kw['pointer'], ctypes.POINTER(self.CSTRUCT) )
			else: self.POINTER = kw['pointer']
		else: self.POINTER = ctypes.pointer( self.CSTRUCT(*args) )
		self.POINTER.pyobject = self	# .pyobject is local to this pointer "object"

	def __getattr__(self,name):
		if hasattr( self.POINTER.contents, name ):
			return getattr( self.POINTER.contents, name )

		else:	# when rpythonic failed to generate good bindings - these lookups should be cached
			for parent in self._rpythonic_parent_classes_:
				if hasattr( parent, name ):
					method = getattr( parent, name )	# should check if it really is an unbound method
					if method in parent._rpythonic_unbound_lookup_:
						func = parent._rpythonic_unbound_lookup_[ method ]
						n = func.name
						if len(func.argnames) > 1:
							argnames = func.argnames[ 1 : ]
							a = ',' + '=None,'.join( argnames ) + '=None'
							b = ','.join( argnames )
						else: a = b = ''
						lamb = eval( 'lambda self %s: %s( self.POINTER, %s )' %(a,n,b) )
						setattr( self.__class__, name, lamb )
						#return lamb	# this would return the unbound lambda, must call getattr again
						return getattr( self, name )
					else:
						# this can happen if self also inherits from the same parent class,
						# assume that by continuing this reaches that shared parent class,
						# and the lambda above is created as normal.
						continue
			## last resort, load from global name space ##
			G = globals()
			if name in G: return lambda *args: G[name](self.POINTER, *args)
			else:
				for prefix in self._autoprefix_:
					n = prefix + name
					if n in G: return lambda *args: G[n](self.POINTER, *args)
				print( 'possible auto-prefixes available', self._autoprefix_ )
				raise AttributeError

	def __call__(self, type=False):
		print('calling object is DEPRECATED - use ob.POINTER or ob.CSTRUCT')
		if type: return self.CSTRUCT
		else: return self.POINTER


def _rpythonic_generate_subclass_( name, struct, functions ):
	head = 'class %s( _rpythonic_meta_ ):' %name
	body = [ 
		'_rpythonic_parent_classes_ = []' ,
		'_rpythonic_unbound_lookup_ = {}' 
	]

	names = [ func.name for func in functions ]

	possibles = {}
	rank = []		# rank by longest name
	if len(names) > 3000: print('too many functions to use this hack')
	else:
		for n1 in names:
			prefix = ''
			for i,char in enumerate(n1):
				prefix += char
				if prefix not in possibles:
					possibles[ prefix ] = 0
					for n2 in names:
						if n2.startswith( prefix ):
							possibles[ prefix ] += 1

					if not rank or len(prefix) > len(rank[-1]) and possibles[prefix] > len(names)/4:
						rank.append( prefix )

	top = []
	while rank:
		best = rank.pop()
		if possibles[best] > len(functions)/2 and best not in names:
			if best.endswith('_set_') or best.endswith('_get_'): best = best[ : -4 ]
			elif best.endswith('Set') or best.endswith('Get'): best = best[ : -3 ]

			rem = []
			for other in rank:
				if best.startswith(other): rem.append( other )
			for r in rem: rank.remove( r )

			if best not in top: top.append( best )

		if len(top) > 3: break

	for n in names:		# find shortest prefixes #
		prefix = ''
		for i,char in enumerate(n):		# cammelCase
			if i==0: prefix += char; continue
			if char.isupper() and len(prefix) >= 2: break
			prefix += char
		if prefix and prefix != n and len(prefix) >= 2:
			hits = 0
			for other in names:
				if other.startswith( prefix ): hits += 1
			if hits >= 2 and prefix not in top:
				top.append( prefix )
				if len(top) >= 6: break

	## setup full names
	for func in functions:
		n = func.name
		if len(func.argnames) > 1:
			argnames = func.argnames[ 1 : ]
			a = ',' + '=None,'.join( argnames ) + '=None'
			b = ','.join( argnames )
		else: a = b = ''

		fhead = 'def %s( self %s ):' %(n,a)
		fbody = ['return %s(self.POINTER, %s)' %(func.name,b)]
		g = fhead + '\n\t\t' + '\n\t\t'.join( fbody )
		body.append( g )
		#body.append( '%s._rpythonic_function_ = %s' %(func.name, func.name) )

	## setup short names ##
	for n in names:
		for prefix in top:
			if n.startswith(prefix) and n[len(prefix):] not in names:
				alt = n[ len(prefix) : ]
				if alt and alt != n and alt not in PYTHON_RESERVED_KEYWORDS and not alt.isdigit() and not alt[0].isdigit():
					body.append( '%s = %s' %(alt,n) )
					names.append( alt )

	gen = head + '\n\t' + '\n\t'.join( body )
	try: exec( gen )
	except:
		print( gen )
		raise SyntaxError

	klass = locals()[name]
	klass.CSTRUCT = struct	# ctypes struct class

	klass._autoprefix_ = top
	for func in functions:
		unbound = getattr( klass, func.name )
		klass._rpythonic_unbound_lookup_[ unbound ] = func
		# klass.longname is klass.shortname = False
		# klass.longname == klass.shortname = True
	return klass

def _rpythonic_convert_structs_to_objects():
	G = globals()
	for klass in _OOAPI_:
		altname = name = klass.__name__
		prefix = ''
		for i,char in enumerate(name):
			if i==0: prefix += char; continue
			if char.isupper(): break
			prefix += char
		if prefix and prefix != name:
			hits = 0
			for other in _OOAPI_:
				if other is not klass:
					if other.__name__.startswith( prefix ): hits += 1
			if hits >= 2:
				altname = name[ len(prefix) : ]

		funcs = _OOAPI_[ klass ]
		newklass = _rpythonic_generate_subclass_( altname, klass, funcs )
		klass._rpythonic_wrapper_class_ = newklass
		G[ name ] = newklass	# replace struct with wrapper
		if altname not in G: G[ altname ] = newklass	# safely define with nicer name
		elif altname != name: # odd cases, maybe a function that returns the object, almost never happens.
			print('WARN - not replacing something with struct wrapper:', G[altname] )


def _rpythonic_setup_return_wrappers():
	R = _rpythonic_function_
	for klass in _OOAPI_:
		if klass in _OOAPI_RETURNS_OBJECT_:
			for f in _OOAPI_RETURNS_OBJECT_[klass]:
				f.object_oriented = True
				if not f.return_wrapper:	# just in case the ctypes footer had already defined it, do not overwrite
					f.return_wrapper = klass._rpythonic_wrapper_class_


###############################################################
##						OLD META FUNC						##
###############################################################
def _rpythonic_function_( name, result=ctypes.c_void_p, args=[]):
	mname = '_metafunc_%s' %name
	exec( 'class %s( _rpythonic_metafunc_ ): pass' %mname )
	k = locals()[mname]
	return k( name, result, args )
_OOAPI_ = {}
_OOAPI_RETURNS_OBJECT_ = {}
class _rpythonic_metafunc_(object):
	def __init__(self, name, result=ctypes.c_void_p, args=[]):
		self.name = name
		self.result = result
		self.argtypes = []		# can dynamically change CFUNCTYPE trick
		self.argnames = []
		self.argtypestypes = []
		for i,arg in enumerate(args):
			n,t = arg
			if n in PYTHON_RESERVED_KEYWORDS: n = 'C_'+n
			if n in self.argnames: n = '%s%s' %(n,i)
			self.argnames.append( n )
			self.argtypes.append( t )
			self.argtypestypes.append( type(t) )		# precomputed for speed

		self.argnames = tuple( self.argnames )				# should never change
		self.numargs = len( self.argtypes )
		self.callbacks = [None] * self.numargs
		self.return_wrapper = None
		self.object_oriented = False
		self.function = None
		for cdll in _CTYPES_CDLLS:	# functions could be multiple libraries
			if hasattr(cdll, self.name):
				func = self.function = getattr(cdll, self.name )
				RPYTHONIC_WRAPPER_FUNCTIONS[ name ] = self
				break
		if not self.function:
			RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES.append( name )

		if self.function: self.reset()

	def change_argument_type( self, name, t ):
		idx = self.argnames.index( name )
		self.argtypes[ idx ] = t
		self.argtypestypes[ idx ] = type(t)
		self.function.argtypes = self.argtypes

	def reset(self):
		if self.argnames:
			a = ',' + '=None,'.join( self.argnames ) + '=None'
			b = ','.join( self.argnames )
		else: a = b = ''

		callmeth = eval( 'lambda self %s: self._call_( %s )' %(a,b) )
		setattr( self.__class__, '__call__', callmeth )

		self.function.restype = self.result
		self.function.argtypes = self.argtypes

		if type( self.result ) is PyCPointerType and type(self.result._type_) is PyCStructType:
			klass = self.result._type_
			if klass not in _OOAPI_RETURNS_OBJECT_: _OOAPI_RETURNS_OBJECT_[klass] = []
			_OOAPI_RETURNS_OBJECT_[klass].append( self )

		self.defaults = []
		for i in range( self.numargs ):
			T = self.argtypes[ i ]
			if type(T) is PyCFuncPtrType:
				p = T()	# func pointers can not be None
				self.defaults.append( p )
				self.callbacks[ i ] = p					# save reference
			elif T in (ctypes.c_int, ctypes.c_uint, ctypes.c_long, ctypes.c_ulong):
				self.defaults.append( 0 )
			elif T in (ctypes.c_float, ctypes.c_double):
				self.defaults.append( .0 )
			else: self.defaults.append( None )	# None is allowed for all other types

			## generate OO API ##
			if i == 0 and type(T) is PyCPointerType and type(T._type_) is PyCStructType:
				klass = T._type_
				if klass not in _OOAPI_: _OOAPI_[ klass ] = []
				_OOAPI_[ klass ].append( self )

	def _call_( self, *args ):			# allow flexible calling types
		cargs = list( self.defaults )
		for i,arg in enumerate(args):
			if isinstance( arg, _rpythonic_meta_ ): arg = arg.POINTER
			elif hasattr( arg, '_rpythonic_' ): arg = arg.POINTER		# workaround - instance from another module

			t = type(arg)
			k = self.argtypes[ i ]
			kt = self.argtypestypes[ i ]
			if arg is None and cargs[i] is not None:	# use user defaults, very rare cases
				continue

			elif t is bool and k is ctypes.c_int:
				if arg: cargs[i] = 1	#ctypes.c_int(1)
				else: cargs[i] = 0	#ctypes.c_int(0)

			elif t in (list,tuple):				# convert lists and tuples into array
				if kt is PyCArrayType:
					cargs[ i ] = k(*arg)
				elif kt is PyCStructType:
					if k._array_wrapper_: cargs[ i ] = k(arg)	# allow easy array init
					else: cargs[ i ] = k(*arg)							# allow multiple args
				elif kt is PyCPointerType:
					cargs[ i ] = _convert_nested_list_to_pointer( k, arg )
				else: assert 0

			elif isinstance( arg, ctypes._Pointer ) and t is not k and kt is PyCPointerType:
				cargs[ i ] = ctypes.cast( arg, k )		# generic's that need to be cast

			elif kt is PyCStructType and isinstance( arg, ctypes._Pointer ):
				cargs[ i ] = arg.contents	# fixed may25

			elif kt is PyCPointerType and not isinstance( arg, (ctypes._Pointer,CArgObject) ):
				if t in (int,float,bool): ptr = k( k._type_(arg) )
				elif t is str:
					if not _ISPYTHON2: arg = arg.encode('utf-8')	# encode to ascii in python3
					ptr = ctypes.create_string_buffer(arg)				# correct and pypy compatible
				elif t in (PyCStructType, PyCArrayType):
					ptr = ctypes.cast( ctypes.pointer( arg ), k )
				else:
					ptr = arg	# TODO print warning?
				cargs[ i ] = ptr

			elif kt is PyCFuncPtrType:
				if t.__name__ == 'CFunctionType': cargs[ i ] = arg		# assume outside holds pointer
				else:													# this is not safe #
					cargs[ i ] = self.callbacks[ i ] = k( arg )				# assume arg is a callable
			else:
				cargs[ i ] = arg		# directly pass

		## if you define your own return_wrapper, it must take keyword "pointer"
		if self.return_wrapper: return self.return_wrapper( pointer=self.function( *cargs ) )
		else: return self.function( *cargs )



def _convert_nested_list_to_pointer( k, arg ):
	depth = 0; s = k
	while True:
		if type(s) is PyCPointerType:
			s = getattr( s, '_type_' )
			depth += 1
		else: break
	assert depth and depth <= 2
	if depth == 1:
		T = k._type_
		ptr = k( k._type_() )
		for i in range( len(arg) ):
			ptr[ i ] = T( *arg[i] )
	elif depth == 2:
		T = k._type_._type_
		_ptr = k._type_( k._type_._type_() )
		for i in range(len( arg )):
			for j in range( len(arg[i]) ):
				_ptr[ j ] = T( *arg[ i ][ j ] )
		ptr = k( _ptr )
	return ptr


def __freeze_rpythonic_struct( cls, fields ):
	if cls not in _OOAPI_: _OOAPI_[ cls ] = []	# wrap all structs
	try: setattr( cls, '_fields_', fields )
	except:
		print( 'WARN - bad order struct freeze', cls )
		#cls._fields_ = []

class _rpythonic_struct_( ctypes.Structure ):
	_array_wrapper_ = False
	_fields_ = []
	_methods_ = {}
	#def __call__(self): return self
	def __init__(self, *args, **kw ):
		cargs = []
		argtypes = []
		for a in self._fields_: argtypes.append( a[1] )
		if len(args) > len(argtypes): args = [args]	# allow both calling conventions
		for i,arg in enumerate( args ):
			if isinstance( arg, _rpythonic_meta_ ): arg = arg.POINTER

			t = type(arg)
			k = argtypes[ i ]
			if t in (list,tuple):
				if k.__class__.__name__	== 'PyCArrayType':
					cargs.append( k(*arg) )
				elif k.__class__.__name__ == 'PyCStructType':
					if k._array_wrapper_: cargs.append( k(arg) )	# allow easy array init
					else: cargs.append( k(*arg) )							# allow multiple args
			elif isinstance( arg, ctypes._Pointer ) and t is not k:
				cargs[ i ] = ctypes.cast( arg, k )	# generic's that need to be cast
			elif k.__class__.__name__ == 'PyCArrayType' and t in (float,int,bool):
				cargs.append( k(arg) )		# support init array from single value
			else:
				cargs.append( arg )		# directly pass

		ctypes.Structure.__init__(self, *cargs, **kw)


def _rpythonic_make_nice_global_enums_():
	G = globals()
	for name in RPYTHONIC_GLOBAL_ENUMS:
		if '_' in name and name.index('_') <= 4:
			altname = name[ name.index('_') + 1 : ]
			if altname not in G:
				G[altname] = RPYTHONIC_GLOBAL_ENUMS[ name ]

def _rpythonic_clean_up_missing_functions_():
	G = globals()
	for f in RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES:
		G.pop( f )
	print( "C functions loaded: %s" %len(RPYTHONIC_WRAPPER_FUNCTIONS) )
	print( "C functions failed: %s" %len(RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES) )



###### NEW API #########
CTYPES_DLL = None

class _VOID_POINTER_CONTAINER_(object):
	def __init__(self, ptr, name=None):
		self._pointer_ = ptr
		self.name = name
NULL = _VOID_POINTER_CONTAINER_(None,'<null pointer>')


class meta:	# NEW API - allow run time switch from ctypes to rffi
	'''
	Methods:
		RPython will not allow object wrapper around a method (__call__ not allowed)
		keep C function names in list "__cfunctions__"
		rpythonic.enable_rffi( classA, classB )	
		can take advantage of methods in object-method-wrapper,
		generate rffi wrapper and set method on classA, etc.
		replaces object-method-wrapper with rffi-method

	Properties:
		CPython: obj.x=1
		RPython: obj.set_x(1)	
	'''
	METAS = []
	def __init__(self, constructors=[], methods={}, properties={}):
		#global CTYPES_DLL	# TODO update me to using _CTYPES_CDLLS
		#if not CTYPES_DLL:
		#	CTYPES_DLL = _load_ctypes_lib( _clib_name_ )

		self.constructors = constructors
		self.methods = methods
		self.properties = properties
		self.METAS.append( self )



	def __call__(self, cls ):
		print('@meta', cls )

		if not self.constructors:
			lamb = lambda s, _explicit_pointer_=None: setattr(s,'_pointer_',getattr(_explicit_pointer_,'_pointer_')) if hasattr(_explicit_pointer_,'_pointer_') else setattr(s,'_pointer_',_explicit_pointer_)
			lamb._debug = '(no constructor)'
			setattr( cls, '__init__', lamb )
		else:
			con = self._find_best_function( self.constructors )
			cfunc = self._build_cfunc( con )
			setattr( cls, '_%s'%con['name'], cfunc )
			g = self._gen_init( con )
			setattr( cls, '__init__', g )
		
		## set methods ##
		for name in self.methods:
			meth = self.methods[ name ]
			cfuncs = []
			for m in meth['functions']:
				cfunc = self._build_cfunc( m, method=True, static=meth['static'] )
				self._setup_return( cfunc, meth )
				setattr( cls, '_%s'%m['name'], cfunc )
				cfuncs.append( cfunc )

			f = self._find_best_function( meth['functions'] )
			g = self._gen_method( meth, f )
			g._cfuncs = cfuncs
			if meth['static']: g = classmethod( g )
			setattr( cls, name, g )

		for name in self.properties:
			print( 'property:', name )
			p = []
			for f in self.properties[name]:
				cfunc = self._build_cfunc( f )
				setattr( cls, '_%s'%f['name'], cfunc )
				g = self._gen_method( f, f )
				p.append( g )

			setattr( cls, name, property(*p) )

		return cls


	@staticmethod
	def _build_cfunc( info, method=False, static=False ):
		cfunc = getattr(CTYPES_DLL, info['name'])
		if method and not static: argtypes = [ ctypes.c_void_p ]
		else: argtypes = []
		for p in info['parameters']: argtypes.append( eval(p['ctypes_type']) )
		cfunc.argtypes = argtypes
		return cfunc

	@staticmethod
	def _setup_return( cfunc, info ):
		if not info['returns_fundamental']:
			cfunc.restype = ctypes.c_void_p
		elif info['returns_fundamental']:
			cfunc.restype = eval( info['returns_ctypes'] )
		else:
			cfunc.restype = ctypes.c_void_p

	@staticmethod
	def _gen_prepare_args( m ):
		a = []; b = []
		for i,p in enumerate(m['parameters']):
			if 'name' in p: n = p['name']
			else: n = '_unnamed_%s' %i
			if '<' in n: n = '_TODOfixme_%s' %i
			if n in PYTHON_RESERVED_KEYWORDS: n += str(i)
			if p['fundamental']:
				b.append( n )
				s = p['raw_type'].split()
				if 'default' in p:
					d = p['default']
					if p['raw_type'] in ('float', 'double'):
						if d.endswith('f'): d = d[:-1]
						d = d.replace(' ', '.')
						if 'e' in d: d = 0.0
						try: d = float(d)
						except: d = 0.0
					elif ('int' in s or 'size_t' in s) and not d.isdigit(): d = 0
					elif 'char' in s and '"' not in d: d = '""'
					elif d.lower() == 'false': d = False
					elif d.lower() == 'true': d = True
				elif 'char' in s: d = '""'
				elif 'float' in s or 'double' in s: d = 0.0
				elif 'size_t' in s or 'int' in s or 'long' in s or 'short' in s: d = 0
				elif p['raw_type'] == 'bool': d = False
				elif p['raw_type'] in ('void', '(template)'): d = 'NULL'
				else: print( p )
				a.append( n+'=%s' %d )

			else:
				b.append( '%s._pointer_'%n )
				a.append( n+'=NULL' )
		return a, b

	@staticmethod
	def _gen_init( m ):
		a, b = meta._gen_prepare_args( m )
		if a: e = 'lambda _py_self_, %s, _explicit_pointer_=None: ' %(','.join(a))
		else: e = 'lambda _py_self_, _explicit_pointer_=None: '
		e += 'setattr(_py_self_, "_pointer_", _py_self_._%s(%s))' %( m['name'], ','.join(b) )
		e += ' if not _explicit_pointer_ else '
		e += 'setattr(_py_self_, "_pointer_", _explicit_pointer_)'
		print( e )
		lamb = eval( e ); lamb._debug = e; lamb._introspect = m
		return lamb

	@staticmethod
	def _find_best_function( funcs ):
		best = funcs[0]
		score = -1
		if len(funcs) > 1:
			for f in funcs:
				hits = 0
				for p in f['parameters']:
					if p['fundamental']: hits += 1
				if hits and hits == len( f['parameters'] ):
					if hits > score:
						score = hits
						best = f
		return best

	@staticmethod
	def _gen_method( m, f ):
		a, b = meta._gen_prepare_args( f )
		if a: e = 'lambda _py_self_, %s: ' %(','.join(a))
		else: e = 'lambda _py_self_: '

		if 'static' in m and m['static']:	# static in c++ is like a classmethod
			c = '_py_self_._%s( %s )' %( f['name'], ','.join(b) )
		else:
			c = '_py_self_._%s( _py_self_._pointer_, %s )' %( f['name'], ','.join(b) )

		if not m['returns_fundamental']:
			if 'returns_unknown' in m or '<' in m['returns']: c = '_VOID_POINTER_CONTAINER_( %s, name="%s" )' %(c,m['returns'])
			else:
				something = m['returns'].replace('::', '.')
				c = '%s( _explicit_pointer_=%s )' %(something, c)

		e += c; lamb = eval( e )
		lamb._debug = e; lamb._introspect = f
		return lamb


	META_FUNCTIONS = []
	@classmethod
	def function( self, info ):
		print('@meta.function', info['name'] )
		#global CTYPES_DLL
		#if not CTYPES_DLL:
		#	CTYPES_DLL = _load_ctypes_lib( _clib_name_ )

		cfunc = self._build_cfunc( info, method=False, static=True )
		setattr( meta, '_%s'%info['name'], cfunc )
		self._setup_return( cfunc, info )
		a, b = meta._gen_prepare_args( info )
		e = 'lambda %s: ' %(','.join(a))
		c = 'meta._%s( %s )' %( info['name'], ','.join(b) )

		if not info['returns_fundamental']:
			if 'returns_unknown' in info or '<' in info['returns']:
				c = '_VOID_POINTER_CONTAINER_( %s, name="%s" )' %(c,info['returns'])
			else:
				something = info['returns'].replace('::', '.')
				c = '%s( _explicit_pointer_=%s )' %(something, c)
		e += c
		lamb = eval( e )
		lamb._debug = e
		lamb._introspect = info
		return lamb



def _rpythonic_strip_prefixes_( prefixes ):
	G = globals()
	names = list(G.keys())	# ensure list in py3
	for name in names:
		for prefix in prefixes:
			if name.startswith( prefix ):
				newname = name[ len(prefix) : ]
				if newname and newname not in G:
					G[ newname ] = G[ name ]


########################################################
##				Load Dynamic Libaries					##
def _rpythonic_load_dynamic_libraries(names):
	global _CTYPES_CDLLS
	for name in names:
		cdll = _load_ctypes_lib( name )
		if cdll:
			print('[[dynamic library loaded: %s]]' %name)
			_CTYPES_CDLLS.append( cdll )
#----------------------------------------------------------#
print( os.path.abspath( os.path.curdir ) )



_rpythonic_load_dynamic_libraries( ['libvncserver'] )

## macro globals ##
UPDATE_BUF_SIZE = 30000
ULTRA_MAX_RECT_SIZE = 32768
VNC_ENCODE_ZLIB_MIN_COMP_SIZE = 17
ZLIB_MAX_RECT_SIZE = 32768
TIGHT_DEFAULT_COMPRESSION = 6
## enums ##
_codecvt_result = { 
	"__codecvt_ok" : 0, 
	"__codecvt_partial" : 1, 
	"__codecvt_error" : 2, 
	"__codecvt_noconv" : 3, 
}

PC_LINK_MAX = 0 
PC_MAX_CANON = 1 
PC_MAX_INPUT = 2 
PC_NAME_MAX = 3 
PC_PATH_MAX = 4 
PC_PIPE_BUF = 5 
PC_CHOWN_RESTRICTED = 6 
PC_NO_TRUNC = 7 
PC_VDISABLE = 8 
PC_SYNC_IO = 9 
PC_ASYNC_IO = 10 
PC_PRIO_IO = 11 
PC_SOCK_MAXBUF = 12 
PC_FILESIZEBITS = 13 
PC_REC_INCR_XFER_SIZE = 14 
PC_REC_MAX_XFER_SIZE = 15 
PC_REC_MIN_XFER_SIZE = 16 
PC_REC_XFER_ALIGN = 17 
PC_ALLOC_SIZE_MIN = 18 
PC_SYMLINK_MAX = 19 
PC_2_SYMLINKS = 20 

SC_ARG_MAX = 0 
SC_CHILD_MAX = 1 
SC_CLK_TCK = 2 
SC_NGROUPS_MAX = 3 
SC_OPEN_MAX = 4 
SC_STREAM_MAX = 5 
SC_TZNAME_MAX = 6 
SC_JOB_CONTROL = 7 
SC_SAVED_IDS = 8 
SC_REALTIME_SIGNALS = 9 
SC_PRIORITY_SCHEDULING = 10 
SC_TIMERS = 11 
SC_ASYNCHRONOUS_IO = 12 
SC_PRIORITIZED_IO = 13 
SC_SYNCHRONIZED_IO = 14 
SC_FSYNC = 15 
SC_MAPPED_FILES = 16 
SC_MEMLOCK = 17 
SC_MEMLOCK_RANGE = 18 
SC_MEMORY_PROTECTION = 19 
SC_MESSAGE_PASSING = 20 
SC_SEMAPHORES = 21 
SC_SHARED_MEMORY_OBJECTS = 22 
SC_AIO_LISTIO_MAX = 23 
SC_AIO_MAX = 24 
SC_AIO_PRIO_DELTA_MAX = 25 
SC_DELAYTIMER_MAX = 26 
SC_MQ_OPEN_MAX = 27 
SC_MQ_PRIO_MAX = 28 
SC_VERSION = 29 
SC_PAGESIZE = 30 
SC_RTSIG_MAX = 31 
SC_SEM_NSEMS_MAX = 32 
SC_SEM_VALUE_MAX = 33 
SC_SIGQUEUE_MAX = 34 
SC_TIMER_MAX = 35 
SC_BC_BASE_MAX = 36 
SC_BC_DIM_MAX = 37 
SC_BC_SCALE_MAX = 38 
SC_BC_STRING_MAX = 39 
SC_COLL_WEIGHTS_MAX = 40 
SC_EQUIV_CLASS_MAX = 41 
SC_EXPR_NEST_MAX = 42 
SC_LINE_MAX = 43 
SC_RE_DUP_MAX = 44 
SC_CHARCLASS_NAME_MAX = 45 
SC_2_VERSION = 46 
SC_2_C_BIND = 47 
SC_2_C_DEV = 48 
SC_2_FORT_DEV = 49 
SC_2_FORT_RUN = 50 
SC_2_SW_DEV = 51 
SC_2_LOCALEDEF = 52 
SC_PII = 53 
SC_PII_XTI = 54 
SC_PII_SOCKET = 55 
SC_PII_INTERNET = 56 
SC_PII_OSI = 57 
SC_POLL = 58 
SC_SELECT = 59 
SC_UIO_MAXIOV = 60 
SC_IOV_MAX = 60 
SC_PII_INTERNET_STREAM = 61 
SC_PII_INTERNET_DGRAM = 62 
SC_PII_OSI_COTS = 63 
SC_PII_OSI_CLTS = 64 
SC_PII_OSI_M = 65 
SC_T_IOV_MAX = 66 
SC_THREADS = 67 
SC_THREAD_SAFE_FUNCTIONS = 68 
SC_GETGR_R_SIZE_MAX = 69 
SC_GETPW_R_SIZE_MAX = 70 
SC_LOGIN_NAME_MAX = 71 
SC_TTY_NAME_MAX = 72 
SC_THREAD_DESTRUCTOR_ITERATIONS = 73 
SC_THREAD_KEYS_MAX = 74 
SC_THREAD_STACK_MIN = 75 
SC_THREAD_THREADS_MAX = 76 
SC_THREAD_ATTR_STACKADDR = 77 
SC_THREAD_ATTR_STACKSIZE = 78 
SC_THREAD_PRIORITY_SCHEDULING = 79 
SC_THREAD_PRIO_INHERIT = 80 
SC_THREAD_PRIO_PROTECT = 81 
SC_THREAD_PROCESS_SHARED = 82 
SC_NPROCESSORS_CONF = 83 
SC_NPROCESSORS_ONLN = 84 
SC_PHYS_PAGES = 85 
SC_AVPHYS_PAGES = 86 
SC_ATEXIT_MAX = 87 
SC_PASS_MAX = 88 
SC_XOPEN_VERSION = 89 
SC_XOPEN_XCU_VERSION = 90 
SC_XOPEN_UNIX = 91 
SC_XOPEN_CRYPT = 92 
SC_XOPEN_ENH_I18N = 93 
SC_XOPEN_SHM = 94 
SC_2_CHAR_TERM = 95 
SC_2_C_VERSION = 96 
SC_2_UPE = 97 
SC_XOPEN_XPG2 = 98 
SC_XOPEN_XPG3 = 99 
SC_XOPEN_XPG4 = 100 
SC_CHAR_BIT = 101 
SC_CHAR_MAX = 102 
SC_CHAR_MIN = 103 
SC_INT_MAX = 104 
SC_INT_MIN = 105 
SC_LONG_BIT = 106 
SC_WORD_BIT = 107 
SC_MB_LEN_MAX = 108 
SC_NZERO = 109 
SC_SSIZE_MAX = 110 
SC_SCHAR_MAX = 111 
SC_SCHAR_MIN = 112 
SC_SHRT_MAX = 113 
SC_SHRT_MIN = 114 
SC_UCHAR_MAX = 115 
SC_UINT_MAX = 116 
SC_ULONG_MAX = 117 
SC_USHRT_MAX = 118 
SC_NL_ARGMAX = 119 
SC_NL_LANGMAX = 120 
SC_NL_MSGMAX = 121 
SC_NL_NMAX = 122 
SC_NL_SETMAX = 123 
SC_NL_TEXTMAX = 124 
SC_XBS5_ILP32_OFF32 = 125 
SC_XBS5_ILP32_OFFBIG = 126 
SC_XBS5_LP64_OFF64 = 127 
SC_XBS5_LPBIG_OFFBIG = 128 
SC_XOPEN_LEGACY = 129 
SC_XOPEN_REALTIME = 130 
SC_XOPEN_REALTIME_THREADS = 131 
SC_ADVISORY_INFO = 132 
SC_BARRIERS = 133 
SC_BASE = 134 
SC_C_LANG_SUPPORT = 135 
SC_C_LANG_SUPPORT_R = 136 
SC_CLOCK_SELECTION = 137 
SC_CPUTIME = 138 
SC_THREAD_CPUTIME = 139 
SC_DEVICE_IO = 140 
SC_DEVICE_SPECIFIC = 141 
SC_DEVICE_SPECIFIC_R = 142 
SC_FD_MGMT = 143 
SC_FIFO = 144 
SC_PIPE = 145 
SC_FILE_ATTRIBUTES = 146 
SC_FILE_LOCKING = 147 
SC_FILE_SYSTEM = 148 
SC_MONOTONIC_CLOCK = 149 
SC_MULTI_PROCESS = 150 
SC_SINGLE_PROCESS = 151 
SC_NETWORKING = 152 
SC_READER_WRITER_LOCKS = 153 
SC_SPIN_LOCKS = 154 
SC_REGEXP = 155 
SC_REGEX_VERSION = 156 
SC_SHELL = 157 
SC_SIGNALS = 158 
SC_SPAWN = 159 
SC_SPORADIC_SERVER = 160 
SC_THREAD_SPORADIC_SERVER = 161 
SC_SYSTEM_DATABASE = 162 
SC_SYSTEM_DATABASE_R = 163 
SC_TIMEOUTS = 164 
SC_TYPED_MEMORY_OBJECTS = 165 
SC_USER_GROUPS = 166 
SC_USER_GROUPS_R = 167 
SC_2_PBS = 168 
SC_2_PBS_ACCOUNTING = 169 
SC_2_PBS_LOCATE = 170 
SC_2_PBS_MESSAGE = 171 
SC_2_PBS_TRACK = 172 
SC_SYMLOOP_MAX = 173 
SC_STREAMS = 174 
SC_2_PBS_CHECKPOINT = 175 
SC_V6_ILP32_OFF32 = 176 
SC_V6_ILP32_OFFBIG = 177 
SC_V6_LP64_OFF64 = 178 
SC_V6_LPBIG_OFFBIG = 179 
SC_HOST_NAME_MAX = 180 
SC_TRACE = 181 
SC_TRACE_EVENT_FILTER = 182 
SC_TRACE_INHERIT = 183 
SC_TRACE_LOG = 184 
SC_LEVEL1_ICACHE_SIZE = 185 
SC_LEVEL1_ICACHE_ASSOC = 186 
SC_LEVEL1_ICACHE_LINESIZE = 187 
SC_LEVEL1_DCACHE_SIZE = 188 
SC_LEVEL1_DCACHE_ASSOC = 189 
SC_LEVEL1_DCACHE_LINESIZE = 190 
SC_LEVEL2_CACHE_SIZE = 191 
SC_LEVEL2_CACHE_ASSOC = 192 
SC_LEVEL2_CACHE_LINESIZE = 193 
SC_LEVEL3_CACHE_SIZE = 194 
SC_LEVEL3_CACHE_ASSOC = 195 
SC_LEVEL3_CACHE_LINESIZE = 196 
SC_LEVEL4_CACHE_SIZE = 197 
SC_LEVEL4_CACHE_ASSOC = 198 
SC_LEVEL4_CACHE_LINESIZE = 199 
SC_IPV6 = 265 
SC_RAW_SOCKETS = 266 
SC_V7_ILP32_OFF32 = 267 
SC_V7_ILP32_OFFBIG = 268 
SC_V7_LP64_OFF64 = 269 
SC_V7_LPBIG_OFFBIG = 270 
SC_SS_REPL_MAX = 271 
SC_TRACE_EVENT_NAME_MAX = 272 
SC_TRACE_NAME_MAX = 273 
SC_TRACE_SYS_MAX = 274 
SC_TRACE_USER_EVENT_MAX = 275 
SC_XOPEN_STREAMS = 276 
SC_THREAD_ROBUST_PRIO_INHERIT = 277 
SC_THREAD_ROBUST_PRIO_PROTECT = 278 

CS_PATH = 0 
CS_V6_WIDTH_RESTRICTED_ENVS = 1 
CS_GNU_LIBC_VERSION = 2 
CS_GNU_LIBPTHREAD_VERSION = 3 
CS_V5_WIDTH_RESTRICTED_ENVS = 4 
CS_V7_WIDTH_RESTRICTED_ENVS = 5 
CS_LFS_CFLAGS = 1000 
CS_LFS_LDFLAGS = 1001 
CS_LFS_LIBS = 1002 
CS_LFS_LINTFLAGS = 1003 
CS_LFS64_CFLAGS = 1004 
CS_LFS64_LDFLAGS = 1005 
CS_LFS64_LIBS = 1006 
CS_LFS64_LINTFLAGS = 1007 
CS_XBS5_ILP32_OFF32_CFLAGS = 1100 
CS_XBS5_ILP32_OFF32_LDFLAGS = 1101 
CS_XBS5_ILP32_OFF32_LIBS = 1102 
CS_XBS5_ILP32_OFF32_LINTFLAGS = 1103 
CS_XBS5_ILP32_OFFBIG_CFLAGS = 1104 
CS_XBS5_ILP32_OFFBIG_LDFLAGS = 1105 
CS_XBS5_ILP32_OFFBIG_LIBS = 1106 
CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 1107 
CS_XBS5_LP64_OFF64_CFLAGS = 1108 
CS_XBS5_LP64_OFF64_LDFLAGS = 1109 
CS_XBS5_LP64_OFF64_LIBS = 1110 
CS_XBS5_LP64_OFF64_LINTFLAGS = 1111 
CS_XBS5_LPBIG_OFFBIG_CFLAGS = 1112 
CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 1113 
CS_XBS5_LPBIG_OFFBIG_LIBS = 1114 
CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 1115 
CS_POSIX_V6_ILP32_OFF32_CFLAGS = 1116 
CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 1117 
CS_POSIX_V6_ILP32_OFF32_LIBS = 1118 
CS_POSIX_V6_ILP32_OFF32_LINTFLAGS = 1119 
CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 1120 
CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 1121 
CS_POSIX_V6_ILP32_OFFBIG_LIBS = 1122 
CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS = 1123 
CS_POSIX_V6_LP64_OFF64_CFLAGS = 1124 
CS_POSIX_V6_LP64_OFF64_LDFLAGS = 1125 
CS_POSIX_V6_LP64_OFF64_LIBS = 1126 
CS_POSIX_V6_LP64_OFF64_LINTFLAGS = 1127 
CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 1128 
CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 1129 
CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 1130 
CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS = 1131 
CS_POSIX_V7_ILP32_OFF32_CFLAGS = 1132 
CS_POSIX_V7_ILP32_OFF32_LDFLAGS = 1133 
CS_POSIX_V7_ILP32_OFF32_LIBS = 1134 
CS_POSIX_V7_ILP32_OFF32_LINTFLAGS = 1135 
CS_POSIX_V7_ILP32_OFFBIG_CFLAGS = 1136 
CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS = 1137 
CS_POSIX_V7_ILP32_OFFBIG_LIBS = 1138 
CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS = 1139 
CS_POSIX_V7_LP64_OFF64_CFLAGS = 1140 
CS_POSIX_V7_LP64_OFF64_LDFLAGS = 1141 
CS_POSIX_V7_LP64_OFF64_LIBS = 1142 
CS_POSIX_V7_LP64_OFF64_LINTFLAGS = 1143 
CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS = 1144 
CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS = 1145 
CS_POSIX_V7_LPBIG_OFFBIG_LIBS = 1146 
CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS = 1147 
CS_V6_ENV = 1148 
CS_V7_ENV = 1149 

_itimer_which = { 
	"ITIMER_REAL" : 0, 
	"ITIMER_VIRTUAL" : 1, 
	"ITIMER_PROF" : 2, 
}

_socket_type = { 
	"SOCK_STREAM" : 1, 
	"SOCK_DGRAM" : 2, 
	"SOCK_RAW" : 3, 
	"SOCK_RDM" : 4, 
	"SOCK_SEQPACKET" : 5, 
	"SOCK_DCCP" : 6, 
	"SOCK_PACKET" : 10, 
	"SOCK_CLOEXEC" : 2000000, 
	"SOCK_NONBLOCK" : 4000, 
}

MSG_OOB = 1 
MSG_PEEK = 2 
MSG_DONTROUTE = 4 
MSG_CTRUNC = 8 
MSG_PROXY = 16 
MSG_TRUNC = 32 
MSG_DONTWAIT = 64 
MSG_EOR = 128 
MSG_WAITALL = 256 
MSG_FIN = 512 
MSG_SYN = 1024 
MSG_CONFIRM = 2048 
MSG_RST = 4096 
MSG_ERRQUEUE = 8192 
MSG_NOSIGNAL = 16384 
MSG_MORE = 32768 
MSG_WAITFORONE = 65536 
MSG_CMSG_CLOEXEC = 1073741824 

SCM_RIGHTS = 1 

SHUT_RD = 0 
SHUT_WR = 1 
SHUT_RDWR = 2 

IPPROTO_IP = 0 
IPPROTO_HOPOPTS = 0 
IPPROTO_ICMP = 1 
IPPROTO_IGMP = 2 
IPPROTO_IPIP = 4 
IPPROTO_TCP = 6 
IPPROTO_EGP = 8 
IPPROTO_PUP = 12 
IPPROTO_UDP = 17 
IPPROTO_IDP = 22 
IPPROTO_TP = 29 
IPPROTO_DCCP = 33 
IPPROTO_IPV6 = 41 
IPPROTO_ROUTING = 43 
IPPROTO_FRAGMENT = 44 
IPPROTO_RSVP = 46 
IPPROTO_GRE = 47 
IPPROTO_ESP = 50 
IPPROTO_AH = 51 
IPPROTO_ICMPV6 = 58 
IPPROTO_NONE = 59 
IPPROTO_DSTOPTS = 60 
IPPROTO_MTP = 92 
IPPROTO_ENCAP = 98 
IPPROTO_PIM = 103 
IPPROTO_COMP = 108 
IPPROTO_SCTP = 132 
IPPROTO_UDPLITE = 136 
IPPROTO_RAW = 255 
IPPROTO_MAX = 256 

IPPORT_ECHO = 7 
IPPORT_DISCARD = 9 
IPPORT_SYSTAT = 11 
IPPORT_DAYTIME = 13 
IPPORT_NETSTAT = 15 
IPPORT_FTP = 21 
IPPORT_TELNET = 23 
IPPORT_SMTP = 25 
IPPORT_TIMESERVER = 37 
IPPORT_NAMESERVER = 42 
IPPORT_WHOIS = 43 
IPPORT_MTP = 57 
IPPORT_TFTP = 69 
IPPORT_RJE = 77 
IPPORT_FINGER = 79 
IPPORT_TTYLINK = 87 
IPPORT_SUPDUP = 95 
IPPORT_EXECSERVER = 512 
IPPORT_LOGINSERVER = 513 
IPPORT_CMDSERVER = 514 
IPPORT_EFSSERVER = 520 
IPPORT_BIFFUDP = 512 
IPPORT_WHOSERVER = 513 
IPPORT_ROUTESERVER = 520 
IPPORT_RESERVED = 1024 
IPPORT_USERRESERVED = 5000 

PTHREAD_CREATE_JOINABLE = 0 
PTHREAD_CREATE_DETACHED = 1 

PTHREAD_MUTEX_TIMED_NP = 0 
PTHREAD_MUTEX_RECURSIVE_NP = 1 
PTHREAD_MUTEX_ERRORCHECK_NP = 2 
PTHREAD_MUTEX_ADAPTIVE_NP = 3 
PTHREAD_MUTEX_NORMAL = 0 
PTHREAD_MUTEX_RECURSIVE = 1 
PTHREAD_MUTEX_ERRORCHECK = 2 
PTHREAD_MUTEX_DEFAULT = 0 

PTHREAD_MUTEX_STALLED = 0 
PTHREAD_MUTEX_STALLED_NP = 0 
PTHREAD_MUTEX_ROBUST = 1 
PTHREAD_MUTEX_ROBUST_NP = 1 

PTHREAD_RWLOCK_PREFER_READER_NP = 0 
PTHREAD_RWLOCK_PREFER_WRITER_NP = 1 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = 2 
PTHREAD_RWLOCK_DEFAULT_NP = 0 

PTHREAD_INHERIT_SCHED = 0 
PTHREAD_EXPLICIT_SCHED = 1 

PTHREAD_SCOPE_SYSTEM = 0 
PTHREAD_SCOPE_PROCESS = 1 

PTHREAD_PROCESS_PRIVATE = 0 
PTHREAD_PROCESS_SHARED = 1 

PTHREAD_CANCEL_ENABLE = 0 
PTHREAD_CANCEL_DISABLE = 1 

PTHREAD_CANCEL_DEFERRED = 0 
PTHREAD_CANCEL_ASYNCHRONOUS = 1 

rfbNewClientAction = { 
	"RFB_CLIENT_ACCEPT" : 0, 
	"RFB_CLIENT_ON_HOLD" : 1, 
	"RFB_CLIENT_REFUSE" : 2, 
}

rfbSocketState = { 
	"RFB_SOCKET_INIT" : 0, 
	"RFB_SOCKET_READY" : 1, 
	"RFB_SOCKET_SHUTDOWN" : 2, 
}

RFB_PROTOCOL_VERSION = 0 
RFB_SECURITY_TYPE = 1 
RFB_AUTHENTICATION = 2 
RFB_INITIALISATION = 3 
RFB_NORMAL = 4 

RFB_PROTOCOL_VERSION = 0 
RFB_SECURITY_TYPE = 1 
RFB_AUTHENTICATION = 2 
RFB_INITIALISATION = 3 
RFB_NORMAL = 4 

## simple enums ##
RPYTHONIC_GLOBAL_ENUMS = { 
 "PC_LINK_MAX" : 0,  "PC_MAX_CANON" : 1,  "PC_MAX_INPUT" : 2,  "PC_NAME_MAX" : 3,  "PC_PATH_MAX" : 4,  "PC_PIPE_BUF" : 5,  "PC_CHOWN_RESTRICTED" : 6,  "PC_NO_TRUNC" : 7,  "PC_VDISABLE" : 8,  "PC_SYNC_IO" : 9,  "PC_ASYNC_IO" : 10,  "PC_PRIO_IO" : 11,  "PC_SOCK_MAXBUF" : 12,  "PC_FILESIZEBITS" : 13,  "PC_REC_INCR_XFER_SIZE" : 14,  "PC_REC_MAX_XFER_SIZE" : 15,  "PC_REC_MIN_XFER_SIZE" : 16,  "PC_REC_XFER_ALIGN" : 17,  "PC_ALLOC_SIZE_MIN" : 18,  "PC_SYMLINK_MAX" : 19,  "PC_2_SYMLINKS" : 20, 
 "SC_ARG_MAX" : 0,  "SC_CHILD_MAX" : 1,  "SC_CLK_TCK" : 2,  "SC_NGROUPS_MAX" : 3,  "SC_OPEN_MAX" : 4,  "SC_STREAM_MAX" : 5,  "SC_TZNAME_MAX" : 6,  "SC_JOB_CONTROL" : 7,  "SC_SAVED_IDS" : 8,  "SC_REALTIME_SIGNALS" : 9,  "SC_PRIORITY_SCHEDULING" : 10,  "SC_TIMERS" : 11,  "SC_ASYNCHRONOUS_IO" : 12,  "SC_PRIORITIZED_IO" : 13,  "SC_SYNCHRONIZED_IO" : 14,  "SC_FSYNC" : 15,  "SC_MAPPED_FILES" : 16,  "SC_MEMLOCK" : 17,  "SC_MEMLOCK_RANGE" : 18,  "SC_MEMORY_PROTECTION" : 19,  "SC_MESSAGE_PASSING" : 20,  "SC_SEMAPHORES" : 21,  "SC_SHARED_MEMORY_OBJECTS" : 22,  "SC_AIO_LISTIO_MAX" : 23,  "SC_AIO_MAX" : 24,  "SC_AIO_PRIO_DELTA_MAX" : 25,  "SC_DELAYTIMER_MAX" : 26,  "SC_MQ_OPEN_MAX" : 27,  "SC_MQ_PRIO_MAX" : 28,  "SC_VERSION" : 29,  "SC_PAGESIZE" : 30,  "SC_RTSIG_MAX" : 31,  "SC_SEM_NSEMS_MAX" : 32,  "SC_SEM_VALUE_MAX" : 33,  "SC_SIGQUEUE_MAX" : 34,  "SC_TIMER_MAX" : 35,  "SC_BC_BASE_MAX" : 36,  "SC_BC_DIM_MAX" : 37,  "SC_BC_SCALE_MAX" : 38,  "SC_BC_STRING_MAX" : 39,  "SC_COLL_WEIGHTS_MAX" : 40,  "SC_EQUIV_CLASS_MAX" : 41,  "SC_EXPR_NEST_MAX" : 42,  "SC_LINE_MAX" : 43,  "SC_RE_DUP_MAX" : 44,  "SC_CHARCLASS_NAME_MAX" : 45,  "SC_2_VERSION" : 46,  "SC_2_C_BIND" : 47,  "SC_2_C_DEV" : 48,  "SC_2_FORT_DEV" : 49,  "SC_2_FORT_RUN" : 50,  "SC_2_SW_DEV" : 51,  "SC_2_LOCALEDEF" : 52,  "SC_PII" : 53,  "SC_PII_XTI" : 54,  "SC_PII_SOCKET" : 55,  "SC_PII_INTERNET" : 56,  "SC_PII_OSI" : 57,  "SC_POLL" : 58,  "SC_SELECT" : 59,  "SC_UIO_MAXIOV" : 60,  "SC_IOV_MAX" : 60,  "SC_PII_INTERNET_STREAM" : 61,  "SC_PII_INTERNET_DGRAM" : 62,  "SC_PII_OSI_COTS" : 63,  "SC_PII_OSI_CLTS" : 64,  "SC_PII_OSI_M" : 65,  "SC_T_IOV_MAX" : 66,  "SC_THREADS" : 67,  "SC_THREAD_SAFE_FUNCTIONS" : 68,  "SC_GETGR_R_SIZE_MAX" : 69,  "SC_GETPW_R_SIZE_MAX" : 70,  "SC_LOGIN_NAME_MAX" : 71,  "SC_TTY_NAME_MAX" : 72,  "SC_THREAD_DESTRUCTOR_ITERATIONS" : 73,  "SC_THREAD_KEYS_MAX" : 74,  "SC_THREAD_STACK_MIN" : 75,  "SC_THREAD_THREADS_MAX" : 76,  "SC_THREAD_ATTR_STACKADDR" : 77,  "SC_THREAD_ATTR_STACKSIZE" : 78,  "SC_THREAD_PRIORITY_SCHEDULING" : 79,  "SC_THREAD_PRIO_INHERIT" : 80,  "SC_THREAD_PRIO_PROTECT" : 81,  "SC_THREAD_PROCESS_SHARED" : 82,  "SC_NPROCESSORS_CONF" : 83,  "SC_NPROCESSORS_ONLN" : 84,  "SC_PHYS_PAGES" : 85,  "SC_AVPHYS_PAGES" : 86,  "SC_ATEXIT_MAX" : 87,  "SC_PASS_MAX" : 88,  "SC_XOPEN_VERSION" : 89,  "SC_XOPEN_XCU_VERSION" : 90,  "SC_XOPEN_UNIX" : 91,  "SC_XOPEN_CRYPT" : 92,  "SC_XOPEN_ENH_I18N" : 93,  "SC_XOPEN_SHM" : 94,  "SC_2_CHAR_TERM" : 95,  "SC_2_C_VERSION" : 96,  "SC_2_UPE" : 97,  "SC_XOPEN_XPG2" : 98,  "SC_XOPEN_XPG3" : 99,  "SC_XOPEN_XPG4" : 100,  "SC_CHAR_BIT" : 101,  "SC_CHAR_MAX" : 102,  "SC_CHAR_MIN" : 103,  "SC_INT_MAX" : 104,  "SC_INT_MIN" : 105,  "SC_LONG_BIT" : 106,  "SC_WORD_BIT" : 107,  "SC_MB_LEN_MAX" : 108,  "SC_NZERO" : 109,  "SC_SSIZE_MAX" : 110,  "SC_SCHAR_MAX" : 111,  "SC_SCHAR_MIN" : 112,  "SC_SHRT_MAX" : 113,  "SC_SHRT_MIN" : 114,  "SC_UCHAR_MAX" : 115,  "SC_UINT_MAX" : 116,  "SC_ULONG_MAX" : 117,  "SC_USHRT_MAX" : 118,  "SC_NL_ARGMAX" : 119,  "SC_NL_LANGMAX" : 120,  "SC_NL_MSGMAX" : 121,  "SC_NL_NMAX" : 122,  "SC_NL_SETMAX" : 123,  "SC_NL_TEXTMAX" : 124,  "SC_XBS5_ILP32_OFF32" : 125,  "SC_XBS5_ILP32_OFFBIG" : 126,  "SC_XBS5_LP64_OFF64" : 127,  "SC_XBS5_LPBIG_OFFBIG" : 128,  "SC_XOPEN_LEGACY" : 129,  "SC_XOPEN_REALTIME" : 130,  "SC_XOPEN_REALTIME_THREADS" : 131,  "SC_ADVISORY_INFO" : 132,  "SC_BARRIERS" : 133,  "SC_BASE" : 134,  "SC_C_LANG_SUPPORT" : 135,  "SC_C_LANG_SUPPORT_R" : 136,  "SC_CLOCK_SELECTION" : 137,  "SC_CPUTIME" : 138,  "SC_THREAD_CPUTIME" : 139,  "SC_DEVICE_IO" : 140,  "SC_DEVICE_SPECIFIC" : 141,  "SC_DEVICE_SPECIFIC_R" : 142,  "SC_FD_MGMT" : 143,  "SC_FIFO" : 144,  "SC_PIPE" : 145,  "SC_FILE_ATTRIBUTES" : 146,  "SC_FILE_LOCKING" : 147,  "SC_FILE_SYSTEM" : 148,  "SC_MONOTONIC_CLOCK" : 149,  "SC_MULTI_PROCESS" : 150,  "SC_SINGLE_PROCESS" : 151,  "SC_NETWORKING" : 152,  "SC_READER_WRITER_LOCKS" : 153,  "SC_SPIN_LOCKS" : 154,  "SC_REGEXP" : 155,  "SC_REGEX_VERSION" : 156,  "SC_SHELL" : 157,  "SC_SIGNALS" : 158,  "SC_SPAWN" : 159,  "SC_SPORADIC_SERVER" : 160,  "SC_THREAD_SPORADIC_SERVER" : 161,  "SC_SYSTEM_DATABASE" : 162,  "SC_SYSTEM_DATABASE_R" : 163,  "SC_TIMEOUTS" : 164,  "SC_TYPED_MEMORY_OBJECTS" : 165,  "SC_USER_GROUPS" : 166,  "SC_USER_GROUPS_R" : 167,  "SC_2_PBS" : 168,  "SC_2_PBS_ACCOUNTING" : 169,  "SC_2_PBS_LOCATE" : 170,  "SC_2_PBS_MESSAGE" : 171,  "SC_2_PBS_TRACK" : 172,  "SC_SYMLOOP_MAX" : 173,  "SC_STREAMS" : 174,  "SC_2_PBS_CHECKPOINT" : 175,  "SC_V6_ILP32_OFF32" : 176,  "SC_V6_ILP32_OFFBIG" : 177,  "SC_V6_LP64_OFF64" : 178,  "SC_V6_LPBIG_OFFBIG" : 179,  "SC_HOST_NAME_MAX" : 180,  "SC_TRACE" : 181,  "SC_TRACE_EVENT_FILTER" : 182,  "SC_TRACE_INHERIT" : 183,  "SC_TRACE_LOG" : 184,  "SC_LEVEL1_ICACHE_SIZE" : 185,  "SC_LEVEL1_ICACHE_ASSOC" : 186,  "SC_LEVEL1_ICACHE_LINESIZE" : 187,  "SC_LEVEL1_DCACHE_SIZE" : 188,  "SC_LEVEL1_DCACHE_ASSOC" : 189,  "SC_LEVEL1_DCACHE_LINESIZE" : 190,  "SC_LEVEL2_CACHE_SIZE" : 191,  "SC_LEVEL2_CACHE_ASSOC" : 192,  "SC_LEVEL2_CACHE_LINESIZE" : 193,  "SC_LEVEL3_CACHE_SIZE" : 194,  "SC_LEVEL3_CACHE_ASSOC" : 195,  "SC_LEVEL3_CACHE_LINESIZE" : 196,  "SC_LEVEL4_CACHE_SIZE" : 197,  "SC_LEVEL4_CACHE_ASSOC" : 198,  "SC_LEVEL4_CACHE_LINESIZE" : 199,  "SC_IPV6" : 265,  "SC_RAW_SOCKETS" : 266,  "SC_V7_ILP32_OFF32" : 267,  "SC_V7_ILP32_OFFBIG" : 268,  "SC_V7_LP64_OFF64" : 269,  "SC_V7_LPBIG_OFFBIG" : 270,  "SC_SS_REPL_MAX" : 271,  "SC_TRACE_EVENT_NAME_MAX" : 272,  "SC_TRACE_NAME_MAX" : 273,  "SC_TRACE_SYS_MAX" : 274,  "SC_TRACE_USER_EVENT_MAX" : 275,  "SC_XOPEN_STREAMS" : 276,  "SC_THREAD_ROBUST_PRIO_INHERIT" : 277,  "SC_THREAD_ROBUST_PRIO_PROTECT" : 278, 
 "CS_PATH" : 0,  "CS_V6_WIDTH_RESTRICTED_ENVS" : 1,  "CS_GNU_LIBC_VERSION" : 2,  "CS_GNU_LIBPTHREAD_VERSION" : 3,  "CS_V5_WIDTH_RESTRICTED_ENVS" : 4,  "CS_V7_WIDTH_RESTRICTED_ENVS" : 5,  "CS_LFS_CFLAGS" : 1000,  "CS_LFS_LDFLAGS" : 1001,  "CS_LFS_LIBS" : 1002,  "CS_LFS_LINTFLAGS" : 1003,  "CS_LFS64_CFLAGS" : 1004,  "CS_LFS64_LDFLAGS" : 1005,  "CS_LFS64_LIBS" : 1006,  "CS_LFS64_LINTFLAGS" : 1007,  "CS_XBS5_ILP32_OFF32_CFLAGS" : 1100,  "CS_XBS5_ILP32_OFF32_LDFLAGS" : 1101,  "CS_XBS5_ILP32_OFF32_LIBS" : 1102,  "CS_XBS5_ILP32_OFF32_LINTFLAGS" : 1103,  "CS_XBS5_ILP32_OFFBIG_CFLAGS" : 1104,  "CS_XBS5_ILP32_OFFBIG_LDFLAGS" : 1105,  "CS_XBS5_ILP32_OFFBIG_LIBS" : 1106,  "CS_XBS5_ILP32_OFFBIG_LINTFLAGS" : 1107,  "CS_XBS5_LP64_OFF64_CFLAGS" : 1108,  "CS_XBS5_LP64_OFF64_LDFLAGS" : 1109,  "CS_XBS5_LP64_OFF64_LIBS" : 1110,  "CS_XBS5_LP64_OFF64_LINTFLAGS" : 1111,  "CS_XBS5_LPBIG_OFFBIG_CFLAGS" : 1112,  "CS_XBS5_LPBIG_OFFBIG_LDFLAGS" : 1113,  "CS_XBS5_LPBIG_OFFBIG_LIBS" : 1114,  "CS_XBS5_LPBIG_OFFBIG_LINTFLAGS" : 1115,  "CS_POSIX_V6_ILP32_OFF32_CFLAGS" : 1116,  "CS_POSIX_V6_ILP32_OFF32_LDFLAGS" : 1117,  "CS_POSIX_V6_ILP32_OFF32_LIBS" : 1118,  "CS_POSIX_V6_ILP32_OFF32_LINTFLAGS" : 1119,  "CS_POSIX_V6_ILP32_OFFBIG_CFLAGS" : 1120,  "CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS" : 1121,  "CS_POSIX_V6_ILP32_OFFBIG_LIBS" : 1122,  "CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS" : 1123,  "CS_POSIX_V6_LP64_OFF64_CFLAGS" : 1124,  "CS_POSIX_V6_LP64_OFF64_LDFLAGS" : 1125,  "CS_POSIX_V6_LP64_OFF64_LIBS" : 1126,  "CS_POSIX_V6_LP64_OFF64_LINTFLAGS" : 1127,  "CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS" : 1128,  "CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS" : 1129,  "CS_POSIX_V6_LPBIG_OFFBIG_LIBS" : 1130,  "CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS" : 1131,  "CS_POSIX_V7_ILP32_OFF32_CFLAGS" : 1132,  "CS_POSIX_V7_ILP32_OFF32_LDFLAGS" : 1133,  "CS_POSIX_V7_ILP32_OFF32_LIBS" : 1134,  "CS_POSIX_V7_ILP32_OFF32_LINTFLAGS" : 1135,  "CS_POSIX_V7_ILP32_OFFBIG_CFLAGS" : 1136,  "CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS" : 1137,  "CS_POSIX_V7_ILP32_OFFBIG_LIBS" : 1138,  "CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS" : 1139,  "CS_POSIX_V7_LP64_OFF64_CFLAGS" : 1140,  "CS_POSIX_V7_LP64_OFF64_LDFLAGS" : 1141,  "CS_POSIX_V7_LP64_OFF64_LIBS" : 1142,  "CS_POSIX_V7_LP64_OFF64_LINTFLAGS" : 1143,  "CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS" : 1144,  "CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS" : 1145,  "CS_POSIX_V7_LPBIG_OFFBIG_LIBS" : 1146,  "CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS" : 1147,  "CS_V6_ENV" : 1148,  "CS_V7_ENV" : 1149, 
 "MSG_OOB" : 1,  "MSG_PEEK" : 2,  "MSG_DONTROUTE" : 4,  "MSG_CTRUNC" : 8,  "MSG_PROXY" : 16,  "MSG_TRUNC" : 32,  "MSG_DONTWAIT" : 64,  "MSG_EOR" : 128,  "MSG_WAITALL" : 256,  "MSG_FIN" : 512,  "MSG_SYN" : 1024,  "MSG_CONFIRM" : 2048,  "MSG_RST" : 4096,  "MSG_ERRQUEUE" : 8192,  "MSG_NOSIGNAL" : 16384,  "MSG_MORE" : 32768,  "MSG_WAITFORONE" : 65536,  "MSG_CMSG_CLOEXEC" : 1073741824, 
 "SCM_RIGHTS" : 1, 
 "SHUT_RD" : 0,  "SHUT_WR" : 1,  "SHUT_RDWR" : 2, 
 "IPPROTO_IP" : 0,  "IPPROTO_HOPOPTS" : 0,  "IPPROTO_ICMP" : 1,  "IPPROTO_IGMP" : 2,  "IPPROTO_IPIP" : 4,  "IPPROTO_TCP" : 6,  "IPPROTO_EGP" : 8,  "IPPROTO_PUP" : 12,  "IPPROTO_UDP" : 17,  "IPPROTO_IDP" : 22,  "IPPROTO_TP" : 29,  "IPPROTO_DCCP" : 33,  "IPPROTO_IPV6" : 41,  "IPPROTO_ROUTING" : 43,  "IPPROTO_FRAGMENT" : 44,  "IPPROTO_RSVP" : 46,  "IPPROTO_GRE" : 47,  "IPPROTO_ESP" : 50,  "IPPROTO_AH" : 51,  "IPPROTO_ICMPV6" : 58,  "IPPROTO_NONE" : 59,  "IPPROTO_DSTOPTS" : 60,  "IPPROTO_MTP" : 92,  "IPPROTO_ENCAP" : 98,  "IPPROTO_PIM" : 103,  "IPPROTO_COMP" : 108,  "IPPROTO_SCTP" : 132,  "IPPROTO_UDPLITE" : 136,  "IPPROTO_RAW" : 255,  "IPPROTO_MAX" : 256, 
 "IPPORT_ECHO" : 7,  "IPPORT_DISCARD" : 9,  "IPPORT_SYSTAT" : 11,  "IPPORT_DAYTIME" : 13,  "IPPORT_NETSTAT" : 15,  "IPPORT_FTP" : 21,  "IPPORT_TELNET" : 23,  "IPPORT_SMTP" : 25,  "IPPORT_TIMESERVER" : 37,  "IPPORT_NAMESERVER" : 42,  "IPPORT_WHOIS" : 43,  "IPPORT_MTP" : 57,  "IPPORT_TFTP" : 69,  "IPPORT_RJE" : 77,  "IPPORT_FINGER" : 79,  "IPPORT_TTYLINK" : 87,  "IPPORT_SUPDUP" : 95,  "IPPORT_EXECSERVER" : 512,  "IPPORT_LOGINSERVER" : 513,  "IPPORT_CMDSERVER" : 514,  "IPPORT_EFSSERVER" : 520,  "IPPORT_BIFFUDP" : 512,  "IPPORT_WHOSERVER" : 513,  "IPPORT_ROUTESERVER" : 520,  "IPPORT_RESERVED" : 1024,  "IPPORT_USERRESERVED" : 5000, 
 "PTHREAD_CREATE_JOINABLE" : 0,  "PTHREAD_CREATE_DETACHED" : 1, 
 "PTHREAD_MUTEX_TIMED_NP" : 0,  "PTHREAD_MUTEX_RECURSIVE_NP" : 1,  "PTHREAD_MUTEX_ERRORCHECK_NP" : 2,  "PTHREAD_MUTEX_ADAPTIVE_NP" : 3,  "PTHREAD_MUTEX_NORMAL" : 0,  "PTHREAD_MUTEX_RECURSIVE" : 1,  "PTHREAD_MUTEX_ERRORCHECK" : 2,  "PTHREAD_MUTEX_DEFAULT" : 0, 
 "PTHREAD_MUTEX_STALLED" : 0,  "PTHREAD_MUTEX_STALLED_NP" : 0,  "PTHREAD_MUTEX_ROBUST" : 1,  "PTHREAD_MUTEX_ROBUST_NP" : 1, 
 "PTHREAD_RWLOCK_PREFER_READER_NP" : 0,  "PTHREAD_RWLOCK_PREFER_WRITER_NP" : 1,  "PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP" : 2,  "PTHREAD_RWLOCK_DEFAULT_NP" : 0, 
 "PTHREAD_INHERIT_SCHED" : 0,  "PTHREAD_EXPLICIT_SCHED" : 1, 
 "PTHREAD_SCOPE_SYSTEM" : 0,  "PTHREAD_SCOPE_PROCESS" : 1, 
 "PTHREAD_PROCESS_PRIVATE" : 0,  "PTHREAD_PROCESS_SHARED" : 1, 
 "PTHREAD_CANCEL_ENABLE" : 0,  "PTHREAD_CANCEL_DISABLE" : 1, 
 "PTHREAD_CANCEL_DEFERRED" : 0,  "PTHREAD_CANCEL_ASYNCHRONOUS" : 1, 
 "RFB_PROTOCOL_VERSION" : 0,  "RFB_SECURITY_TYPE" : 1,  "RFB_AUTHENTICATION" : 2,  "RFB_INITIALISATION" : 3,  "RFB_NORMAL" : 4, 
 "RFB_PROTOCOL_VERSION" : 0,  "RFB_SECURITY_TYPE" : 1,  "RFB_AUTHENTICATION" : 2,  "RFB_INITIALISATION" : 3,  "RFB_NORMAL" : 4, 

}
class __fsid_t(_rpythonic_struct_): _array_wrapper_ = True
class __mbstate_t(_rpythonic_struct_): pass
class __value(ctypes.Union): pass
class _G_fpos_t(_rpythonic_struct_): pass
class _G_fpos64_t(_rpythonic_struct_): pass
class _IO_jump_t(_rpythonic_struct_): pass
class _IO_marker(_rpythonic_struct_): pass
class _IO_FILE(_rpythonic_struct_): _array_wrapper_ = True
class _IO_FILE_plus(_rpythonic_struct_): pass
class wait(ctypes.Union): pass
class __wait_terminated(_rpythonic_struct_): pass
class __wait_stopped(_rpythonic_struct_): pass
class __WAIT_STATUS(ctypes.Union): pass
class div_t(_rpythonic_struct_): pass
class ldiv_t(_rpythonic_struct_): pass
class lldiv_t(_rpythonic_struct_): pass
class __sigset_t(_rpythonic_struct_): _array_wrapper_ = True
class timespec(_rpythonic_struct_): pass
class timeval(_rpythonic_struct_): pass
class fd_set(_rpythonic_struct_): _array_wrapper_ = True
class pthread_attr_t(ctypes.Union): pass
class __pthread_internal_list(_rpythonic_struct_): pass
class pthread_mutex_t(ctypes.Union): pass
class __pthread_mutex_s(_rpythonic_struct_): pass
class pthread_mutexattr_t(ctypes.Union): pass
class pthread_cond_t(ctypes.Union): pass
class pthread_condattr_t(ctypes.Union): pass
class pthread_rwlock_t(ctypes.Union): pass
class __data(_rpythonic_struct_): pass
class pthread_rwlockattr_t(ctypes.Union): pass
class pthread_barrier_t(ctypes.Union): pass
class pthread_barrierattr_t(ctypes.Union): pass
class random_data(_rpythonic_struct_): pass
class drand48_data(_rpythonic_struct_): _array_wrapper_ = True
class __locale_struct(_rpythonic_struct_): _array_wrapper_ = True
class __locale_data(_rpythonic_struct_): pass
class z_stream_s(_rpythonic_struct_): pass
class gz_header_s(_rpythonic_struct_): pass
class internal_state(_rpythonic_struct_): pass
class timezone(_rpythonic_struct_): pass
class itimerval(_rpythonic_struct_): pass
class iovec(_rpythonic_struct_): pass
class sockaddr(_rpythonic_struct_): _array_wrapper_ = True
class sockaddr_storage(_rpythonic_struct_): _array_wrapper_ = True
class msghdr(_rpythonic_struct_): pass
class cmsghdr(_rpythonic_struct_): _array_wrapper_ = True
class linger(_rpythonic_struct_): pass
class mmsghdr(_rpythonic_struct_): pass
class osockaddr(_rpythonic_struct_): _array_wrapper_ = True
class in_addr(_rpythonic_struct_): pass
class in6_addr(_rpythonic_struct_): pass
class __in6_u(ctypes.Union): pass
class sockaddr_in(_rpythonic_struct_): _array_wrapper_ = True
class sockaddr_in6(_rpythonic_struct_): pass
class ip_mreq(_rpythonic_struct_): pass
class ip_mreq_source(_rpythonic_struct_): pass
class ipv6_mreq(_rpythonic_struct_): pass
class group_req(_rpythonic_struct_): pass
class group_source_req(_rpythonic_struct_): pass
class ip_msfilter(_rpythonic_struct_): _array_wrapper_ = True
class group_filter(_rpythonic_struct_): _array_wrapper_ = True
class ip_opts(_rpythonic_struct_): _array_wrapper_ = True
class ip_mreqn(_rpythonic_struct_): pass
class in_pktinfo(_rpythonic_struct_): pass
class rfbRectangle(_rpythonic_struct_): pass
class rfbPixelFormat(_rpythonic_struct_): pass
class rfbClientInitMsg(_rpythonic_struct_): pass
class rfbServerInitMsg(_rpythonic_struct_): pass
class rfbFramebufferUpdateMsg(_rpythonic_struct_): pass
class rfbFramebufferUpdateRectHeader(_rpythonic_struct_): pass
class rfbSupportedMessages(_rpythonic_struct_): _array_wrapper_ = True
class rfbCopyRect(_rpythonic_struct_): pass
class rfbRREHeader(_rpythonic_struct_): pass
class rfbCoRRERectangle(_rpythonic_struct_): pass
class rfbZlibHeader(_rpythonic_struct_): pass
class rfbXCursorColors(_rpythonic_struct_): pass
class rfbZRLEHeader(_rpythonic_struct_): pass
class rfbSetColourMapEntriesMsg(_rpythonic_struct_): pass
class rfbBellMsg(_rpythonic_struct_): pass
class rfbServerCutTextMsg(_rpythonic_struct_): pass
class _rfbFileTransferMsg(_rpythonic_struct_): pass
class _rfbTextChatMsg(_rpythonic_struct_): pass
class rfbXvpMsg(_rpythonic_struct_): pass
class _rfbResizeFrameBufferMsg(_rpythonic_struct_): pass
class rfbPalmVNCReSizeFrameBufferMsg(_rpythonic_struct_): pass
class rfbServerToClientMsg(ctypes.Union): pass
class rfbCacheRect(_rpythonic_struct_): pass
class rfbSetPixelFormatMsg(_rpythonic_struct_): pass
class rfbFixColourMapEntriesMsg(_rpythonic_struct_): pass
class rfbSetEncodingsMsg(_rpythonic_struct_): pass
class rfbFramebufferUpdateRequestMsg(_rpythonic_struct_): pass
class rfbKeyEventMsg(_rpythonic_struct_): pass
class rfbPointerEventMsg(_rpythonic_struct_): pass
class rfbClientCutTextMsg(_rpythonic_struct_): pass
class _rfbSetScaleMsg(_rpythonic_struct_): pass
class rfbPalmVNCSetScaleFactorMsg(_rpythonic_struct_): pass
class _rfbSetServerInputMsg(_rpythonic_struct_): pass
class _rfbSetSWMsg(_rpythonic_struct_): pass
class rfbClientToServerMsg(ctypes.Union): pass
class sched_param(_rpythonic_struct_): pass
class __sched_param(_rpythonic_struct_): pass
class cpu_set_t(_rpythonic_struct_): _array_wrapper_ = True
class tm(_rpythonic_struct_): pass
class itimerspec(_rpythonic_struct_): pass
class sigevent(_rpythonic_struct_): pass
class _pthread_cleanup_buffer(_rpythonic_struct_): pass
class __pthread_unwind_buf_t(_rpythonic_struct_): _array_wrapper_ = True
class __cancel_jmp_buf(_rpythonic_struct_): _array_wrapper_ = True
class __pthread_cleanup_frame(_rpythonic_struct_): pass
class __jmp_buf_tag(_rpythonic_struct_): pass
class rfbColourMap(_rpythonic_struct_): pass
class data(ctypes.Union): pass
class _rfbSecurity(_rpythonic_struct_): pass
class _rfbProtocolExtension(_rpythonic_struct_): pass
class _rfbExtensionData(_rpythonic_struct_): pass
class _rfbScreenInfo(_rpythonic_struct_): _array_wrapper_ = True
class sraRegion(_rpythonic_struct_): pass
class _rfbFileTransferData(_rpythonic_struct_): pass
class _rfbStatList(_rpythonic_struct_): pass
class _rfbClientRec(_rpythonic_struct_): _array_wrapper_ = True
class rfbClientIterator(_rpythonic_struct_): pass
class rfbCursor(_rpythonic_struct_): pass
class rfbFontData(_rpythonic_struct_): pass
## union and structures ##
__freeze_rpythonic_struct( __fsid_t, [
	( "__val", ( ctypes.c_int * 2 ) ),
])

__freeze_rpythonic_struct( __value, [
	( "__wch", ctypes.c_uint ),
	( "__wchb", ( ctypes.c_char * 4 ) ),
])

__freeze_rpythonic_struct( __mbstate_t, [
	( "__count", ctypes.c_int ),
	( "__value", __value ),
])

__freeze_rpythonic_struct( _G_fpos_t, [
	( "__pos", ctypes.c_int64 ),
	( "__state", __mbstate_t ),
])

__freeze_rpythonic_struct( _G_fpos64_t, [
	( "__pos", ctypes.c_int64 ),
	( "__state", __mbstate_t ),
])

__freeze_rpythonic_struct( _IO_jump_t, [
])

__freeze_rpythonic_struct( _IO_marker, [
	( "_next", ctypes.POINTER(_IO_marker) ),
	( "_sbuf", ctypes.POINTER(_IO_FILE) ),
	( "_pos", ctypes.c_int ),
])

__freeze_rpythonic_struct( _IO_FILE, [
	( "_flags", ctypes.c_int ),
	( "_IO_read_ptr", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_read_end", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_read_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_write_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_write_ptr", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_write_end", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_buf_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_buf_end", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_save_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_backup_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_save_end", ctypes.POINTER(ctypes.c_char) ),
	( "_markers", ctypes.POINTER(_IO_marker) ),
	( "_chain", ctypes.POINTER(_IO_FILE) ),
	( "_fileno", ctypes.c_int ),
	( "_flags2", ctypes.c_int ),
	( "_old_offset", ctypes.c_int64 ),
	( "_cur_column", ctypes.c_ushort ),
	( "_vtable_offset", ctypes.c_char ),
	( "_shortbuf", ( ctypes.c_char * 1 ) ),
	( "_lock", ctypes.POINTER(ctypes.c_void_p) ),
	( "_offset", ctypes.c_int64 ),
	( "__pad1", ctypes.POINTER(ctypes.c_void_p) ),
	( "__pad2", ctypes.POINTER(ctypes.c_void_p) ),
	( "__pad3", ctypes.POINTER(ctypes.c_void_p) ),
	( "__pad4", ctypes.POINTER(ctypes.c_void_p) ),
	( "__pad5", ctypes.c_uint64 ),
	( "_mode", ctypes.c_int ),
	( "_unused2", ctypes.c_char ),
])

__freeze_rpythonic_struct( _IO_FILE_plus, [
])

__freeze_rpythonic_struct( __wait_terminated, [
	( "__w_termsig", ctypes.c_uint ),
	( "__w_coredump", ctypes.c_uint ),
	( "__w_retcode", ctypes.c_uint ),
	#opaque-warning# <rpythonic.rpythonic.SomeThing object at 0x2433710>
])

__freeze_rpythonic_struct( __wait_stopped, [
	( "__w_stopval", ctypes.c_uint ),
	( "__w_stopsig", ctypes.c_uint ),
	#opaque-warning# <rpythonic.rpythonic.SomeThing object at 0x2433a10>
])

__freeze_rpythonic_struct( wait, [
	( "w_status", ctypes.c_int ),
	( "__wait_terminated", __wait_terminated ),
	( "__wait_stopped", __wait_stopped ),
])

__freeze_rpythonic_struct( __WAIT_STATUS, [
	( "__uptr", ctypes.POINTER(wait) ),
	( "__iptr", ctypes.POINTER(ctypes.c_int) ),
])

__freeze_rpythonic_struct( div_t, [
	( "quot", ctypes.c_int ),
	( "rem", ctypes.c_int ),
])

__freeze_rpythonic_struct( ldiv_t, [
	( "quot", ctypes.c_int64 ),
	( "rem", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( lldiv_t, [
	( "quot", ctypes.c_longlong ),
	( "rem", ctypes.c_longlong ),
])

__freeze_rpythonic_struct( __sigset_t, [
	( "__val", ctypes.c_uint64 ),
])

__freeze_rpythonic_struct( timespec, [
	( "tv_sec", ctypes.c_int64 ),
	( "tv_nsec", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( timeval, [
	( "tv_sec", ctypes.c_int64 ),
	( "tv_usec", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( fd_set, [
	( "__fds_bits", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_attr_t, [
	( "__size", ( ctypes.c_char * 56 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( __pthread_internal_list, [
	( "__prev", ctypes.POINTER(__pthread_internal_list) ),
	( "__next", ctypes.POINTER(__pthread_internal_list) ),
])

__freeze_rpythonic_struct( __pthread_mutex_s, [
	( "__lock", ctypes.c_int ),
	( "__count", ctypes.c_uint ),
	( "__owner", ctypes.c_int ),
	( "__nusers", ctypes.c_uint ),
	( "__kind", ctypes.c_int ),
	( "__spins", ctypes.c_int ),
	( "__list", __pthread_internal_list ),
])

__freeze_rpythonic_struct( pthread_mutex_t, [
	( "__data", __pthread_mutex_s ),
	( "__size", ( ctypes.c_char * 40 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_mutexattr_t, [
	( "__size", ( ctypes.c_char * 4 ) ),
	( "__align", ctypes.c_int ),
])

__freeze_rpythonic_struct( __data, [
	( "__lock", ctypes.c_int ),
	( "__nr_readers", ctypes.c_uint ),
	( "__readers_wakeup", ctypes.c_uint ),
	( "__writer_wakeup", ctypes.c_uint ),
	( "__nr_readers_queued", ctypes.c_uint ),
	( "__nr_writers_queued", ctypes.c_uint ),
	( "__writer", ctypes.c_int ),
	( "__shared", ctypes.c_int ),
	( "__pad1", ctypes.c_uint64 ),
	( "__pad2", ctypes.c_uint64 ),
	( "__flags", ctypes.c_uint ),
])

__freeze_rpythonic_struct( pthread_cond_t, [
	( "__data", __data ),
	( "__size", ( ctypes.c_char * 48 ) ),
	( "__align", ctypes.c_longlong ),
])

__freeze_rpythonic_struct( pthread_condattr_t, [
	( "__size", ( ctypes.c_char * 4 ) ),
	( "__align", ctypes.c_int ),
])

__freeze_rpythonic_struct( pthread_rwlock_t, [
	( "__data", __data ),
	( "__size", ( ctypes.c_char * 56 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_rwlockattr_t, [
	( "__size", ( ctypes.c_char * 8 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_barrier_t, [
	( "__size", ( ctypes.c_char * 32 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_barrierattr_t, [
	( "__size", ( ctypes.c_char * 4 ) ),
	( "__align", ctypes.c_int ),
])

__freeze_rpythonic_struct( random_data, [
	( "fptr", ctypes.POINTER(ctypes.c_int32) ),
	( "rptr", ctypes.POINTER(ctypes.c_int32) ),
	( "state", ctypes.POINTER(ctypes.c_int32) ),
	( "rand_type", ctypes.c_int ),
	( "rand_deg", ctypes.c_int ),
	( "rand_sep", ctypes.c_int ),
	( "end_ptr", ctypes.POINTER(ctypes.c_int32) ),
])

__freeze_rpythonic_struct( drand48_data, [
	( "__x", ( ctypes.c_uint16 * 3 ) ),
	( "__old_x", ( ctypes.c_uint16 * 3 ) ),
	( "__c", ctypes.c_uint16 ),
	( "__init", ctypes.c_uint16 ),
	( "__a", ctypes.c_ulonglong ),
])

__freeze_rpythonic_struct( __locale_data, [
])

__freeze_rpythonic_struct( __locale_struct, [
	( "__locales", ctypes.POINTER(( __locale_data * 13 )) ),
	( "__ctype_b", ctypes.POINTER(ctypes.c_uint16) ),
	( "__ctype_tolower", ctypes.POINTER(ctypes.c_int) ),
	( "__ctype_toupper", ctypes.POINTER(ctypes.c_int) ),
	( "__names", ctypes.POINTER(( ctypes.c_char * 13 )) ),
])

__freeze_rpythonic_struct( internal_state, [
	( "dummy", ctypes.c_int ),
])

__freeze_rpythonic_struct( z_stream_s, [
	( "next_in", ctypes.POINTER(ctypes.c_ubyte) ),
	( "avail_in", ctypes.c_uint ),
	( "total_in", ctypes.c_ulong ),
	( "next_out", ctypes.POINTER(ctypes.c_ubyte) ),
	( "avail_out", ctypes.c_uint ),
	( "total_out", ctypes.c_ulong ),
	( "msg", ctypes.POINTER(ctypes.c_char) ),
	( "state", ctypes.POINTER(internal_state) ),
	( "zalloc", ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_void_p), ctypes.POINTER(ctypes.c_void_p),ctypes.c_uint,ctypes.c_uint,) ),
	( "zfree", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),) ),
	( "opaque", ctypes.POINTER(ctypes.c_void_p) ),
	( "data_type", ctypes.c_int ),
	( "adler", ctypes.c_ulong ),
	( "reserved", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( gz_header_s, [
	( "text", ctypes.c_int ),
	( "time", ctypes.c_ulong ),
	( "xflags", ctypes.c_int ),
	( "os", ctypes.c_int ),
	( "extra", ctypes.POINTER(ctypes.c_ubyte) ),
	( "extra_len", ctypes.c_uint ),
	( "extra_max", ctypes.c_uint ),
	( "name", ctypes.POINTER(ctypes.c_ubyte) ),
	( "name_max", ctypes.c_uint ),
	( "comment", ctypes.POINTER(ctypes.c_ubyte) ),
	( "comm_max", ctypes.c_uint ),
	( "hcrc", ctypes.c_int ),
	( "done", ctypes.c_int ),
])

__freeze_rpythonic_struct( timezone, [
	( "tz_minuteswest", ctypes.c_int ),
	( "tz_dsttime", ctypes.c_int ),
])

__freeze_rpythonic_struct( itimerval, [
	( "it_interval", timeval ),
	( "it_value", timeval ),
])

__freeze_rpythonic_struct( iovec, [
	( "iov_base", ctypes.POINTER(ctypes.c_void_p) ),
	( "iov_len", ctypes.c_uint64 ),
])

__freeze_rpythonic_struct( sockaddr, [
	( "sa_family", ctypes.c_uint16 ),
	( "sa_data", ( ctypes.c_char * 14 ) ),
])

__freeze_rpythonic_struct( sockaddr_storage, [
	( "ss_family", ctypes.c_uint16 ),
	( "__ss_align", ctypes.c_uint64 ),
	( "__ss_padding", ctypes.c_char ),
])

__freeze_rpythonic_struct( msghdr, [
	( "msg_name", ctypes.POINTER(ctypes.c_void_p) ),
	( "msg_namelen", ctypes.c_uint ),
	( "msg_iov", ctypes.POINTER(iovec) ),
	( "msg_iovlen", ctypes.c_uint64 ),
	( "msg_control", ctypes.POINTER(ctypes.c_void_p) ),
	( "msg_controllen", ctypes.c_uint64 ),
	( "msg_flags", ctypes.c_int ),
])

__freeze_rpythonic_struct( cmsghdr, [
	( "cmsg_len", ctypes.c_uint64 ),
	( "cmsg_level", ctypes.c_int ),
	( "cmsg_type", ctypes.c_int ),
	( "__cmsg_data", ctypes.c_ubyte ),
])

__freeze_rpythonic_struct( linger, [
	( "l_onoff", ctypes.c_int ),
	( "l_linger", ctypes.c_int ),
])

__freeze_rpythonic_struct( mmsghdr, [
])

__freeze_rpythonic_struct( osockaddr, [
	( "sa_family", ctypes.c_uint16 ),
	( "sa_data", ( ctypes.c_ubyte * 14 ) ),
])

__freeze_rpythonic_struct( in_addr, [
	( "s_addr", ctypes.c_uint32 ),
])

__freeze_rpythonic_struct( __in6_u, [
	( "__u6_addr8", ( ctypes.c_uint8 * 16 ) ),
	( "__u6_addr16", ( ctypes.c_uint16 * 8 ) ),
	( "__u6_addr32", ( ctypes.c_uint32 * 4 ) ),
])

__freeze_rpythonic_struct( in6_addr, [
	( "__in6_u", __in6_u ),
])

__freeze_rpythonic_struct( sockaddr_in, [
	( "sin_family", ctypes.c_uint16 ),
	( "sin_port", ctypes.c_uint16 ),
	( "sin_addr", in_addr ),
	( "sin_zero", ctypes.c_ubyte ),
])

__freeze_rpythonic_struct( sockaddr_in6, [
	( "sin6_family", ctypes.c_uint16 ),
	( "sin6_port", ctypes.c_uint16 ),
	( "sin6_flowinfo", ctypes.c_uint32 ),
	( "sin6_addr", in6_addr ),
	( "sin6_scope_id", ctypes.c_uint32 ),
])

__freeze_rpythonic_struct( ip_mreq, [
	( "imr_multiaddr", in_addr ),
	( "imr_interface", in_addr ),
])

__freeze_rpythonic_struct( ip_mreq_source, [
	( "imr_multiaddr", in_addr ),
	( "imr_interface", in_addr ),
	( "imr_sourceaddr", in_addr ),
])

__freeze_rpythonic_struct( ipv6_mreq, [
	( "ipv6mr_multiaddr", in6_addr ),
	( "ipv6mr_interface", ctypes.c_uint ),
])

__freeze_rpythonic_struct( group_req, [
	( "gr_interface", ctypes.c_uint32 ),
	( "gr_group", sockaddr_storage ),
])

__freeze_rpythonic_struct( group_source_req, [
	( "gsr_interface", ctypes.c_uint32 ),
	( "gsr_group", sockaddr_storage ),
	( "gsr_source", sockaddr_storage ),
])

__freeze_rpythonic_struct( ip_msfilter, [
	( "imsf_multiaddr", in_addr ),
	( "imsf_interface", in_addr ),
	( "imsf_fmode", ctypes.c_uint32 ),
	( "imsf_numsrc", ctypes.c_uint32 ),
	( "imsf_slist", ( in_addr * 1 ) ),
])

__freeze_rpythonic_struct( group_filter, [
	( "gf_interface", ctypes.c_uint32 ),
	( "gf_group", sockaddr_storage ),
	( "gf_fmode", ctypes.c_uint32 ),
	( "gf_numsrc", ctypes.c_uint32 ),
	( "gf_slist", ( sockaddr_storage * 1 ) ),
])

__freeze_rpythonic_struct( ip_opts, [
	( "ip_dst", in_addr ),
	( "ip_opts", ( ctypes.c_char * 40 ) ),
])

__freeze_rpythonic_struct( ip_mreqn, [
	( "imr_multiaddr", in_addr ),
	( "imr_address", in_addr ),
	( "imr_ifindex", ctypes.c_int ),
])

__freeze_rpythonic_struct( in_pktinfo, [
	( "ipi_ifindex", ctypes.c_int ),
	( "ipi_spec_dst", in_addr ),
	( "ipi_addr", in_addr ),
])

__freeze_rpythonic_struct( rfbRectangle, [
	( "x", ctypes.c_uint16 ),
	( "y", ctypes.c_uint16 ),
	( "w", ctypes.c_uint16 ),
	( "h", ctypes.c_uint16 ),
])

__freeze_rpythonic_struct( rfbPixelFormat, [
	( "bitsPerPixel", ctypes.c_uint8 ),
	( "depth", ctypes.c_uint8 ),
	( "bigEndian", ctypes.c_uint8 ),
	( "trueColour", ctypes.c_uint8 ),
	( "redMax", ctypes.c_uint16 ),
	( "greenMax", ctypes.c_uint16 ),
	( "blueMax", ctypes.c_uint16 ),
	( "redShift", ctypes.c_uint8 ),
	( "greenShift", ctypes.c_uint8 ),
	( "blueShift", ctypes.c_uint8 ),
	( "pad1", ctypes.c_uint8 ),
	( "pad2", ctypes.c_uint16 ),
])

__freeze_rpythonic_struct( rfbClientInitMsg, [
	( "shared", ctypes.c_uint8 ),
])

__freeze_rpythonic_struct( rfbServerInitMsg, [
	( "framebufferWidth", ctypes.c_uint16 ),
	( "framebufferHeight", ctypes.c_uint16 ),
	( "format", rfbPixelFormat ),
	( "nameLength", ctypes.c_uint32 ),
])

__freeze_rpythonic_struct( rfbFramebufferUpdateMsg, [
	( "C_type", ctypes.c_uint8 ),
	( "pad", ctypes.c_uint8 ),
	( "nRects", ctypes.c_uint16 ),
])

__freeze_rpythonic_struct( rfbFramebufferUpdateRectHeader, [
	( "r", rfbRectangle ),
	( "encoding", ctypes.c_uint32 ),
])

__freeze_rpythonic_struct( rfbSupportedMessages, [
	( "client2server", ( ctypes.c_uint8 * 32 ) ),
	( "server2client", ( ctypes.c_uint8 * 32 ) ),
])

__freeze_rpythonic_struct( rfbCopyRect, [
	( "srcX", ctypes.c_uint16 ),
	( "srcY", ctypes.c_uint16 ),
])

__freeze_rpythonic_struct( rfbRREHeader, [
	( "nSubrects", ctypes.c_uint32 ),
])

__freeze_rpythonic_struct( rfbCoRRERectangle, [
	( "x", ctypes.c_uint8 ),
	( "y", ctypes.c_uint8 ),
	( "w", ctypes.c_uint8 ),
	( "h", ctypes.c_uint8 ),
])

__freeze_rpythonic_struct( rfbZlibHeader, [
	( "nBytes", ctypes.c_uint32 ),
])

__freeze_rpythonic_struct( rfbXCursorColors, [
	( "foreRed", ctypes.c_uint8 ),
	( "foreGreen", ctypes.c_uint8 ),
	( "foreBlue", ctypes.c_uint8 ),
	( "backRed", ctypes.c_uint8 ),
	( "backGreen", ctypes.c_uint8 ),
	( "backBlue", ctypes.c_uint8 ),
])

__freeze_rpythonic_struct( rfbZRLEHeader, [
	( "length", ctypes.c_uint32 ),
])

__freeze_rpythonic_struct( rfbSetColourMapEntriesMsg, [
	( "C_type", ctypes.c_uint8 ),
	( "pad", ctypes.c_uint8 ),
	( "firstColour", ctypes.c_uint16 ),
	( "nColours", ctypes.c_uint16 ),
])

__freeze_rpythonic_struct( rfbBellMsg, [
	( "C_type", ctypes.c_uint8 ),
])

__freeze_rpythonic_struct( rfbServerCutTextMsg, [
	( "C_type", ctypes.c_uint8 ),
	( "pad1", ctypes.c_uint8 ),
	( "pad2", ctypes.c_uint16 ),
	( "length", ctypes.c_uint32 ),
])

__freeze_rpythonic_struct( _rfbFileTransferMsg, [
	( "C_type", ctypes.c_uint8 ),
	( "contentType", ctypes.c_uint8 ),
	( "contentParam", ctypes.c_uint8 ),
	( "pad", ctypes.c_uint8 ),
	( "size", ctypes.c_uint32 ),
	( "length", ctypes.c_uint32 ),
])

__freeze_rpythonic_struct( _rfbTextChatMsg, [
	( "C_type", ctypes.c_uint8 ),
	( "pad1", ctypes.c_uint8 ),
	( "pad2", ctypes.c_uint16 ),
	( "length", ctypes.c_uint32 ),
])

__freeze_rpythonic_struct( rfbXvpMsg, [
	( "C_type", ctypes.c_uint8 ),
	( "pad", ctypes.c_uint8 ),
	( "version", ctypes.c_uint8 ),
	( "code", ctypes.c_uint8 ),
])

__freeze_rpythonic_struct( _rfbResizeFrameBufferMsg, [
	( "C_type", ctypes.c_uint8 ),
	( "pad1", ctypes.c_uint8 ),
	( "framebufferWidth", ctypes.c_uint16 ),
	( "framebufferHeigth", ctypes.c_uint16 ),
])

__freeze_rpythonic_struct( rfbPalmVNCReSizeFrameBufferMsg, [
	( "C_type", ctypes.c_uint8 ),
	( "pad1", ctypes.c_uint8 ),
	( "desktop_w", ctypes.c_uint16 ),
	( "desktop_h", ctypes.c_uint16 ),
	( "buffer_w", ctypes.c_uint16 ),
	( "buffer_h", ctypes.c_uint16 ),
	( "pad2", ctypes.c_uint16 ),
])

__freeze_rpythonic_struct( rfbServerToClientMsg, [
	( "C_type", ctypes.c_uint8 ),
	( "fu", rfbFramebufferUpdateMsg ),
	( "scme", rfbSetColourMapEntriesMsg ),
	( "b", rfbBellMsg ),
	( "sct", rfbServerCutTextMsg ),
	( "rsfb", _rfbResizeFrameBufferMsg ),
	( "prsfb", rfbPalmVNCReSizeFrameBufferMsg ),
	( "ft", _rfbFileTransferMsg ),
	( "tc", _rfbTextChatMsg ),
	( "xvp", rfbXvpMsg ),
])

__freeze_rpythonic_struct( rfbCacheRect, [
	( "special", ctypes.c_uint16 ),
])

__freeze_rpythonic_struct( rfbSetPixelFormatMsg, [
	( "C_type", ctypes.c_uint8 ),
	( "pad1", ctypes.c_uint8 ),
	( "pad2", ctypes.c_uint16 ),
	( "format", rfbPixelFormat ),
])

__freeze_rpythonic_struct( rfbFixColourMapEntriesMsg, [
	( "C_type", ctypes.c_uint8 ),
	( "pad", ctypes.c_uint8 ),
	( "firstColour", ctypes.c_uint16 ),
	( "nColours", ctypes.c_uint16 ),
])

__freeze_rpythonic_struct( rfbSetEncodingsMsg, [
	( "C_type", ctypes.c_uint8 ),
	( "pad", ctypes.c_uint8 ),
	( "nEncodings", ctypes.c_uint16 ),
])

__freeze_rpythonic_struct( rfbFramebufferUpdateRequestMsg, [
	( "C_type", ctypes.c_uint8 ),
	( "incremental", ctypes.c_uint8 ),
	( "x", ctypes.c_uint16 ),
	( "y", ctypes.c_uint16 ),
	( "w", ctypes.c_uint16 ),
	( "h", ctypes.c_uint16 ),
])

__freeze_rpythonic_struct( rfbKeyEventMsg, [
	( "C_type", ctypes.c_uint8 ),
	( "down", ctypes.c_uint8 ),
	( "pad", ctypes.c_uint16 ),
	( "key", ctypes.c_uint32 ),
])

__freeze_rpythonic_struct( rfbPointerEventMsg, [
	( "C_type", ctypes.c_uint8 ),
	( "buttonMask", ctypes.c_uint8 ),
	( "x", ctypes.c_uint16 ),
	( "y", ctypes.c_uint16 ),
])

__freeze_rpythonic_struct( rfbClientCutTextMsg, [
	( "C_type", ctypes.c_uint8 ),
	( "pad1", ctypes.c_uint8 ),
	( "pad2", ctypes.c_uint16 ),
	( "length", ctypes.c_uint32 ),
])

__freeze_rpythonic_struct( _rfbSetScaleMsg, [
	( "C_type", ctypes.c_uint8 ),
	( "scale", ctypes.c_uint8 ),
	( "pad", ctypes.c_uint16 ),
])

__freeze_rpythonic_struct( rfbPalmVNCSetScaleFactorMsg, [
	( "C_type", ctypes.c_uint8 ),
	( "scale", ctypes.c_uint8 ),
	( "pad2", ctypes.c_uint16 ),
])

__freeze_rpythonic_struct( _rfbSetServerInputMsg, [
	( "C_type", ctypes.c_uint8 ),
	( "status", ctypes.c_uint8 ),
	( "pad", ctypes.c_uint16 ),
])

__freeze_rpythonic_struct( _rfbSetSWMsg, [
	( "C_type", ctypes.c_uint8 ),
	( "status", ctypes.c_uint8 ),
	( "x", ctypes.c_uint16 ),
	( "y", ctypes.c_uint16 ),
])

__freeze_rpythonic_struct( rfbClientToServerMsg, [
	( "C_type", ctypes.c_uint8 ),
	( "spf", rfbSetPixelFormatMsg ),
	( "fcme", rfbFixColourMapEntriesMsg ),
	( "se", rfbSetEncodingsMsg ),
	( "fur", rfbFramebufferUpdateRequestMsg ),
	( "ke", rfbKeyEventMsg ),
	( "pe", rfbPointerEventMsg ),
	( "cct", rfbClientCutTextMsg ),
	( "ssc", _rfbSetScaleMsg ),
	( "pssf", rfbPalmVNCSetScaleFactorMsg ),
	( "sim", _rfbSetServerInputMsg ),
	( "ft", _rfbFileTransferMsg ),
	( "sw", _rfbSetSWMsg ),
	( "tc", _rfbTextChatMsg ),
	( "xvp", rfbXvpMsg ),
])

__freeze_rpythonic_struct( sched_param, [
	( "__sched_priority", ctypes.c_int ),
])

__freeze_rpythonic_struct( __sched_param, [
	( "__sched_priority", ctypes.c_int ),
])

__freeze_rpythonic_struct( cpu_set_t, [
	( "__bits", ctypes.c_uint64 ),
])

__freeze_rpythonic_struct( tm, [
	( "tm_sec", ctypes.c_int ),
	( "tm_min", ctypes.c_int ),
	( "tm_hour", ctypes.c_int ),
	( "tm_mday", ctypes.c_int ),
	( "tm_mon", ctypes.c_int ),
	( "tm_year", ctypes.c_int ),
	( "tm_wday", ctypes.c_int ),
	( "tm_yday", ctypes.c_int ),
	( "tm_isdst", ctypes.c_int ),
	( "tm_gmtoff", ctypes.c_int64 ),
	( "tm_zone", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( itimerspec, [
	( "it_interval", timespec ),
	( "it_value", timespec ),
])

__freeze_rpythonic_struct( sigevent, [
])

__freeze_rpythonic_struct( _pthread_cleanup_buffer, [
	( "__routine", ctypes.c_void_p ),
	( "__arg", ctypes.POINTER(ctypes.c_void_p) ),
	( "__canceltype", ctypes.c_int ),
	( "__prev", ctypes.POINTER(_pthread_cleanup_buffer) ),
])

__freeze_rpythonic_struct( __cancel_jmp_buf, [
	( "__cancel_jmp_buf", ( ctypes.c_int64 * 9 ) ),
	( "__mask_was_saved", ( ctypes.c_int * 1 ) ),
])

__freeze_rpythonic_struct( __pthread_unwind_buf_t, [
	( "__cancel_jmp_buf", ( __cancel_jmp_buf * 1 ) ),
	( "__pad", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( __pthread_cleanup_frame, [
	( "__cancel_routine", ctypes.c_void_p ),
	( "__cancel_arg", ctypes.POINTER(ctypes.c_void_p) ),
	( "__do_it", ctypes.c_int ),
	( "__cancel_type", ctypes.c_int ),
])

__freeze_rpythonic_struct( __jmp_buf_tag, [
])

__freeze_rpythonic_struct( data, [
	( "bytes", ctypes.POINTER(ctypes.c_uint8) ),
	( "shorts", ctypes.POINTER(ctypes.c_uint16) ),
])

__freeze_rpythonic_struct( rfbColourMap, [
	( "count", ctypes.c_uint32 ),
	( "is16", ctypes.c_int8 ),
	( "data", data ),
])

__freeze_rpythonic_struct( _rfbSecurity, [
	( "C_type", ctypes.c_uint8 ),
	( "handler", ctypes.c_void_p ),
	( "next", ctypes.POINTER(_rfbSecurity) ),
])

__freeze_rpythonic_struct( _rfbProtocolExtension, [
	( "newClient", ctypes.c_void_p ),
	( "init", ctypes.c_void_p ),
	( "pseudoEncodings", ctypes.POINTER(ctypes.c_int) ),
	( "enablePseudoEncoding", ctypes.c_void_p ),
	( "handleMessage", ctypes.c_void_p ),
	( "close", ctypes.c_void_p ),
	( "usage", ctypes.c_void_p ),
	( "processArgument", ctypes.c_void_p ),
	( "next", ctypes.POINTER(_rfbProtocolExtension) ),
])

__freeze_rpythonic_struct( _rfbExtensionData, [
	( "extension", ctypes.POINTER(_rfbProtocolExtension) ),
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
	( "next", ctypes.POINTER(_rfbExtensionData) ),
])

__freeze_rpythonic_struct( rfbCursor, [
	( "cleanup", ctypes.c_int8 ),
	( "cleanupSource", ctypes.c_int8 ),
	( "cleanupMask", ctypes.c_int8 ),
	( "cleanupRichSource", ctypes.c_int8 ),
	( "source", ctypes.POINTER(ctypes.c_ubyte) ),
	( "mask", ctypes.POINTER(ctypes.c_ubyte) ),
	( "width", ctypes.c_ushort ),
	( "height", ctypes.c_ushort ),
	( "xhot", ctypes.c_ushort ),
	( "yhot", ctypes.c_ushort ),
	( "foreRed", ctypes.c_ushort ),
	( "foreGreen", ctypes.c_ushort ),
	( "foreBlue", ctypes.c_ushort ),
	( "backRed", ctypes.c_ushort ),
	( "backGreen", ctypes.c_ushort ),
	( "backBlue", ctypes.c_ushort ),
	( "richSource", ctypes.POINTER(ctypes.c_ubyte) ),
	( "alphaSource", ctypes.POINTER(ctypes.c_ubyte) ),
	( "alphaPreMultiplied", ctypes.c_int8 ),
])

__freeze_rpythonic_struct( _rfbScreenInfo, [
	( "scaledScreenNext", ctypes.POINTER(_rfbScreenInfo) ),
	( "scaledScreenRefCount", ctypes.c_int ),
	( "width", ctypes.c_int ),
	( "paddedWidthInBytes", ctypes.c_int ),
	( "height", ctypes.c_int ),
	( "depth", ctypes.c_int ),
	( "bitsPerPixel", ctypes.c_int ),
	( "sizeInBytes", ctypes.c_int ),
	( "blackPixel", ctypes.c_uint32 ),
	( "whitePixel", ctypes.c_uint32 ),
	( "screenData", ctypes.POINTER(ctypes.c_void_p) ),
	( "serverFormat", rfbPixelFormat ),
	( "colourMap", rfbColourMap ),
	( "desktopName", ctypes.POINTER(ctypes.c_char) ),
	( "thisHost", ( ctypes.c_char * 255 ) ),
	( "autoPort", ctypes.c_int8 ),
	( "port", ctypes.c_int ),
	( "listenSock", ctypes.c_int ),
	( "maxSock", ctypes.c_int ),
	( "maxFd", ctypes.c_int ),
	( "allFds", fd_set ),
	( "socketState", ctypes.c_int ),
	( "inetdSock", ctypes.c_int ),
	( "inetdInitDone", ctypes.c_int8 ),
	( "udpPort", ctypes.c_int ),
	( "udpSock", ctypes.c_int ),
	( "udpClient", ctypes.POINTER(_rfbClientRec) ),
	( "udpSockConnected", ctypes.c_int8 ),
	( "udpRemoteAddr", sockaddr_in ),
	( "maxClientWait", ctypes.c_int ),
	( "httpInitDone", ctypes.c_int8 ),
	( "httpEnableProxyConnect", ctypes.c_int8 ),
	( "httpPort", ctypes.c_int ),
	( "httpDir", ctypes.POINTER(ctypes.c_char) ),
	( "httpListenSock", ctypes.c_int ),
	( "httpSock", ctypes.c_int ),
	( "passwordCheck", ctypes.CFUNCTYPE(ctypes.c_int8, ctypes.POINTER(_rfbClientRec),ctypes.POINTER(ctypes.c_char),ctypes.c_int,) ),
	( "authPasswdData", ctypes.POINTER(ctypes.c_void_p) ),
	( "authPasswdFirstViewOnly", ctypes.c_int ),
	( "maxRectsPerUpdate", ctypes.c_int ),
	( "deferUpdateTime", ctypes.c_int ),
	( "alwaysShared", ctypes.c_int8 ),
	( "neverShared", ctypes.c_int8 ),
	( "dontDisconnect", ctypes.c_int8 ),
	( "clientHead", ctypes.POINTER(_rfbClientRec) ),
	( "pointerClient", ctypes.POINTER(_rfbClientRec) ),
	( "cursorX", ctypes.c_int ),
	( "cursorY", ctypes.c_int ),
	( "underCursorBufferLen", ctypes.c_int ),
	( "underCursorBuffer", ctypes.POINTER(ctypes.c_char) ),
	( "dontConvertRichCursorToXCursor", ctypes.c_int8 ),
	( "cursor", ctypes.POINTER(rfbCursor) ),
	( "frameBuffer", ctypes.POINTER(ctypes.c_char) ),
	( "kbdAddEvent", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int8,ctypes.c_uint32,ctypes.POINTER(_rfbClientRec),) ),
	( "kbdReleaseAllKeys", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_rfbClientRec),) ),
	( "ptrAddEvent", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,ctypes.c_int,ctypes.c_int,ctypes.POINTER(_rfbClientRec),) ),
	( "setXCutText", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_char),ctypes.c_int,ctypes.POINTER(_rfbClientRec),) ),
	( "getCursorPtr", ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(rfbCursor), ctypes.POINTER(_rfbClientRec),)) ),
	( "setTranslateFunction", ctypes.CFUNCTYPE(ctypes.c_int8, ctypes.POINTER(_rfbClientRec),) ),
	( "setSingleWindow", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_rfbClientRec),ctypes.c_int,ctypes.c_int,) ),
	( "setServerInput", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_rfbClientRec),ctypes.c_int,) ),
	( "getFileTransferPermission", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_rfbClientRec),) ),
	( "setTextChat", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_rfbClientRec),ctypes.c_int,ctypes.POINTER(ctypes.c_char),) ),
	( "newClientHook", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_rfbClientRec),) ),
	( "displayHook", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_rfbClientRec),) ),
	( "getKeyboardLedStateHook", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(_rfbScreenInfo),) ),
	( "cursorMutex", pthread_mutex_t ),
	( "backgroundLoop", ctypes.c_int8 ),
	( "ignoreSIGPIPE", ctypes.c_int8 ),
	( "progressiveSliceHeight", ctypes.c_int ),
	( "listenInterface", ctypes.c_uint32 ),
	( "deferPtrUpdateTime", ctypes.c_int ),
	( "handleEventsEagerly", ctypes.c_int8 ),
	( "versionString", ctypes.POINTER(ctypes.c_char) ),
	( "protocolMajorVersion", ctypes.c_int ),
	( "protocolMinorVersion", ctypes.c_int ),
	( "permitFileTransfer", ctypes.c_int8 ),
	( "displayFinishedHook", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_rfbClientRec),ctypes.c_int,) ),
	( "xvpHook", ctypes.CFUNCTYPE(ctypes.c_int8, ctypes.POINTER(_rfbClientRec),ctypes.c_uint8,ctypes.c_uint8,) ),
])

__freeze_rpythonic_struct( sraRegion, [
])

__freeze_rpythonic_struct( _rfbFileTransferData, [
	( "fd", ctypes.c_int ),
	( "compressionEnabled", ctypes.c_int ),
	( "fileSize", ctypes.c_int ),
	( "numPackets", ctypes.c_int ),
	( "receiving", ctypes.c_int ),
	( "sending", ctypes.c_int ),
])

__freeze_rpythonic_struct( _rfbStatList, [
	( "C_type", ctypes.c_uint32 ),
	( "sentCount", ctypes.c_uint32 ),
	( "bytesSent", ctypes.c_uint32 ),
	( "bytesSentIfRaw", ctypes.c_uint32 ),
	( "rcvdCount", ctypes.c_uint32 ),
	( "bytesRcvd", ctypes.c_uint32 ),
	( "bytesRcvdIfRaw", ctypes.c_uint32 ),
	( "Next", ctypes.POINTER(_rfbStatList) ),
])

__freeze_rpythonic_struct( _rfbClientRec, [
	( "screen", ctypes.POINTER(_rfbScreenInfo) ),
	( "scaledScreen", ctypes.POINTER(_rfbScreenInfo) ),
	( "PalmVNC", ctypes.c_int8 ),
	( "clientData", ctypes.POINTER(ctypes.c_void_p) ),
	( "clientGoneHook", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(_rfbClientRec),) ),
	( "sock", ctypes.c_int ),
	( "host", ctypes.POINTER(ctypes.c_char) ),
	( "protocolMajorVersion", ctypes.c_int ),
	( "protocolMinorVersion", ctypes.c_int ),
	( "client_thread", ctypes.c_uint64 ),
	( "state", ctypes.c_int ),
	( "reverseConnection", ctypes.c_int8 ),
	( "onHold", ctypes.c_int8 ),
	( "readyForSetColourMapEntries", ctypes.c_int8 ),
	( "useCopyRect", ctypes.c_int8 ),
	( "preferredEncoding", ctypes.c_int ),
	( "correMaxWidth", ctypes.c_int ),
	( "correMaxHeight", ctypes.c_int ),
	( "viewOnly", ctypes.c_int8 ),
	( "authChallenge", ( ctypes.c_uint8 * 16 ) ),
	( "copyRegion", ctypes.POINTER(sraRegion) ),
	( "copyDX", ctypes.c_int ),
	( "copyDY", ctypes.c_int ),
	( "modifiedRegion", ctypes.POINTER(sraRegion) ),
	( "requestedRegion", ctypes.POINTER(sraRegion) ),
	( "startDeferring", timeval ),
	( "startPtrDeferring", timeval ),
	( "lastPtrX", ctypes.c_int ),
	( "lastPtrY", ctypes.c_int ),
	( "lastPtrButtons", ctypes.c_int ),
	( "translateFn", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_char),ctypes.POINTER(rfbPixelFormat),ctypes.POINTER(rfbPixelFormat),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_char),ctypes.c_int,ctypes.c_int,ctypes.c_int,) ),
	( "translateLookupTable", ctypes.POINTER(ctypes.c_char) ),
	( "format", rfbPixelFormat ),
	( "updateBuf", ( ctypes.c_char * 30000 ) ),
	( "ublen", ctypes.c_int ),
	( "statEncList", ctypes.POINTER(_rfbStatList) ),
	( "statMsgList", ctypes.POINTER(_rfbStatList) ),
	( "rawBytesEquivalent", ctypes.c_int ),
	( "bytesSent", ctypes.c_int ),
	( "compStream", z_stream_s ),
	( "compStreamInited", ctypes.c_int8 ),
	( "zlibCompressLevel", ctypes.c_uint32 ),
	( "tightQualityLevel", ctypes.c_int ),
	( "zsStruct", ( z_stream_s * 4 ) ),
	( "zsActive", ( ctypes.c_int8 * 4 ) ),
	( "zsLevel", ( ctypes.c_int * 4 ) ),
	( "tightCompressLevel", ctypes.c_int ),
	( "compStreamInitedLZO", ctypes.c_int8 ),
	( "lzoWrkMem", ctypes.POINTER(ctypes.c_char) ),
	( "fileTransfer", _rfbFileTransferData ),
	( "lastKeyboardLedState", ctypes.c_int ),
	( "enableSupportedMessages", ctypes.c_int8 ),
	( "enableSupportedEncodings", ctypes.c_int8 ),
	( "enableServerIdentity", ctypes.c_int8 ),
	( "enableKeyboardLedState", ctypes.c_int8 ),
	( "enableLastRectEncoding", ctypes.c_int8 ),
	( "enableCursorShapeUpdates", ctypes.c_int8 ),
	( "enableCursorPosUpdates", ctypes.c_int8 ),
	( "useRichCursorEncoding", ctypes.c_int8 ),
	( "cursorWasChanged", ctypes.c_int8 ),
	( "cursorWasMoved", ctypes.c_int8 ),
	( "cursorX", ctypes.c_int ),
	( "cursorY", ctypes.c_int ),
	( "useNewFBSize", ctypes.c_int8 ),
	( "newFBSizePending", ctypes.c_int8 ),
	( "prev", ctypes.POINTER(_rfbClientRec) ),
	( "next", ctypes.POINTER(_rfbClientRec) ),
	( "refCount", ctypes.c_int ),
	( "refCountMutex", pthread_mutex_t ),
	( "deleteCond", pthread_cond_t ),
	( "outputMutex", pthread_mutex_t ),
	( "updateMutex", pthread_mutex_t ),
	( "updateCond", pthread_cond_t ),
	( "zrleData", ctypes.POINTER(ctypes.c_void_p) ),
	( "zywrleLevel", ctypes.c_int ),
	( "zywrleBuf", ( ctypes.c_int * 10000 ) ),
	( "progressiveSliceY", ctypes.c_int ),
	( "extensions", ctypes.POINTER(_rfbExtensionData) ),
	( "zrleBeforeBuf", ctypes.POINTER(ctypes.c_char) ),
	( "paletteHelper", ctypes.POINTER(ctypes.c_void_p) ),
	( "sendMutex", pthread_mutex_t ),
	( "beforeEncBuf", ctypes.POINTER(ctypes.c_char) ),
	( "beforeEncBufSize", ctypes.c_int ),
	( "afterEncBuf", ctypes.POINTER(ctypes.c_char) ),
	( "afterEncBufSize", ctypes.c_int ),
	( "afterEncBufLen", ctypes.c_int ),
])

__freeze_rpythonic_struct( rfbClientIterator, [
])

__freeze_rpythonic_struct( rfbFontData, [
	( "data", ctypes.POINTER(ctypes.c_ubyte) ),
	( "metaData", ctypes.POINTER(ctypes.c_int) ),
])

## wrapper functions ##
_IO_getc = _rpythonic_function_(		"_IO_getc", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_putc = _rpythonic_function_(		"_IO_putc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_feof = _rpythonic_function_(		"_IO_feof", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_ferror = _rpythonic_function_(		"_IO_ferror", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_peekc_locked = _rpythonic_function_(		"_IO_peekc_locked", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_flockfile = _rpythonic_function_(		"_IO_flockfile", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_IO_funlockfile = _rpythonic_function_(		"_IO_funlockfile", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_IO_ftrylockfile = _rpythonic_function_(		"_IO_ftrylockfile", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_IO_vfscanf = _rpythonic_function_(		"_IO_vfscanf", ctypes.c_int, [
	("__restrict",		ctypes.POINTER(_IO_FILE)),
	("__restrict",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_char),
	("__restrict",		ctypes.POINTER(ctypes.c_int)),] )

_IO_vfprintf = _rpythonic_function_(		"_IO_vfprintf", ctypes.c_int, [
	("__restrict",		ctypes.POINTER(_IO_FILE)),
	("__restrict",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_char),] )

_IO_padn = _rpythonic_function_(		"_IO_padn", ctypes.c_int64, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int64),] )

_IO_sgetn = _rpythonic_function_(		"_IO_sgetn", ctypes.c_uint64, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_uint64),] )

_IO_seekoff = _rpythonic_function_(		"_IO_seekoff", ctypes.c_int64, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int64),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

_IO_seekpos = _rpythonic_function_(		"_IO_seekpos", ctypes.c_int64, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int64),
	("none",		ctypes.c_int),] )

_IO_free_backup_area = _rpythonic_function_(		"_IO_free_backup_area", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

remove = _rpythonic_function_(		"remove", ctypes.c_int, [
	("__filename",		ctypes.POINTER(ctypes.c_char)),] )

rename = _rpythonic_function_(		"rename", ctypes.c_int, [
	("__old",		ctypes.POINTER(ctypes.c_char)),
	("__new",		ctypes.POINTER(ctypes.c_char)),] )

renameat = _rpythonic_function_(		"renameat", ctypes.c_int, [
	("__oldfd",		ctypes.c_int),
	("__old",		ctypes.POINTER(ctypes.c_char)),
	("__newfd",		ctypes.c_int),
	("__new",		ctypes.POINTER(ctypes.c_char)),] )

tmpfile = _rpythonic_function_(		"tmpfile", ctypes.POINTER(_IO_FILE), [] )

tmpnam = _rpythonic_function_(		"tmpnam", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

tmpnam_r = _rpythonic_function_(		"tmpnam_r", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

tempnam = _rpythonic_function_(		"tempnam", ctypes.POINTER(ctypes.c_char), [
	("__dir",		ctypes.POINTER(ctypes.c_char)),
	("__pfx",		ctypes.POINTER(ctypes.c_char)),] )

fclose = _rpythonic_function_(		"fclose", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fflush = _rpythonic_function_(		"fflush", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fflush_unlocked = _rpythonic_function_(		"fflush_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fopen = _rpythonic_function_(		"fopen", ctypes.POINTER(_IO_FILE), [
	("__filename",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

freopen = _rpythonic_function_(		"freopen", ctypes.POINTER(_IO_FILE), [
	("__filename",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.POINTER(ctypes.c_char)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fdopen = _rpythonic_function_(		"fdopen", ctypes.POINTER(_IO_FILE), [
	("__fd",		ctypes.c_int),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

fmemopen = _rpythonic_function_(		"fmemopen", ctypes.POINTER(_IO_FILE), [
	("__s",		ctypes.POINTER(ctypes.c_void_p)),
	("__len",		ctypes.c_uint64),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

open_memstream = _rpythonic_function_(		"open_memstream", ctypes.POINTER(_IO_FILE), [
	("__bufloc",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__sizeloc",		ctypes.POINTER(ctypes.c_uint64)),] )

setbuf = _rpythonic_function_(		"setbuf", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

setvbuf = _rpythonic_function_(		"setvbuf", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.c_int),
	("__n",		ctypes.c_uint64),] )

setbuffer = _rpythonic_function_(		"setbuffer", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__size",		ctypes.c_uint64),] )

setlinebuf = _rpythonic_function_(		"setlinebuf", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

vfprintf = _rpythonic_function_(		"vfprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vprintf = _rpythonic_function_(		"vprintf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vsprintf = _rpythonic_function_(		"vsprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vsnprintf = _rpythonic_function_(		"vsnprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__maxlen",		ctypes.c_uint64),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vdprintf = _rpythonic_function_(		"vdprintf", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__fmt",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vfscanf = _rpythonic_function_(		"vfscanf", ctypes.c_int, [
	("__s",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vscanf = _rpythonic_function_(		"vscanf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vsscanf = _rpythonic_function_(		"vsscanf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

fgetc = _rpythonic_function_(		"fgetc", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getc = _rpythonic_function_(		"getc", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getchar = _rpythonic_function_(		"getchar", ctypes.c_int, [] )

getc_unlocked = _rpythonic_function_(		"getc_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getchar_unlocked = _rpythonic_function_(		"getchar_unlocked", ctypes.c_int, [] )

fgetc_unlocked = _rpythonic_function_(		"fgetc_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fputc = _rpythonic_function_(		"fputc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putc = _rpythonic_function_(		"putc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putchar = _rpythonic_function_(		"putchar", ctypes.c_int, [
	("__c",		ctypes.c_int),] )

fputc_unlocked = _rpythonic_function_(		"fputc_unlocked", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putc_unlocked = _rpythonic_function_(		"putc_unlocked", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putchar_unlocked = _rpythonic_function_(		"putchar_unlocked", ctypes.c_int, [
	("__c",		ctypes.c_int),] )

getw = _rpythonic_function_(		"getw", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putw = _rpythonic_function_(		"putw", ctypes.c_int, [
	("__w",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fgets = _rpythonic_function_(		"fgets", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

gets = _rpythonic_function_(		"gets", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

getdelim = _rpythonic_function_(		"getdelim", ctypes.c_int64, [
	("__lineptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__n",		ctypes.POINTER(ctypes.c_uint64)),
	("__delimiter",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getline = _rpythonic_function_(		"getline", ctypes.c_int64, [
	("__lineptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__n",		ctypes.POINTER(ctypes.c_uint64)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fputs = _rpythonic_function_(		"fputs", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

puts = _rpythonic_function_(		"puts", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

ungetc = _rpythonic_function_(		"ungetc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fread = _rpythonic_function_(		"fread", ctypes.c_uint64, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint64),
	("__n",		ctypes.c_uint64),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fwrite = _rpythonic_function_(		"fwrite", ctypes.c_uint64, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint64),
	("__n",		ctypes.c_uint64),
	("__s",		ctypes.POINTER(_IO_FILE)),] )

fread_unlocked = _rpythonic_function_(		"fread_unlocked", ctypes.c_uint64, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint64),
	("__n",		ctypes.c_uint64),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fwrite_unlocked = _rpythonic_function_(		"fwrite_unlocked", ctypes.c_uint64, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint64),
	("__n",		ctypes.c_uint64),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fseek = _rpythonic_function_(		"fseek", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__off",		ctypes.c_int64),
	("__whence",		ctypes.c_int),] )

ftell = _rpythonic_function_(		"ftell", ctypes.c_int64, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

rewind = _rpythonic_function_(		"rewind", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fseeko = _rpythonic_function_(		"fseeko", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__off",		ctypes.c_int64),
	("__whence",		ctypes.c_int),] )

ftello = _rpythonic_function_(		"ftello", ctypes.c_int64, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fgetpos = _rpythonic_function_(		"fgetpos", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__pos",		ctypes.POINTER(_G_fpos_t)),] )

fsetpos = _rpythonic_function_(		"fsetpos", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__pos",		ctypes.POINTER(_G_fpos_t)),] )

clearerr = _rpythonic_function_(		"clearerr", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

feof = _rpythonic_function_(		"feof", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ferror = _rpythonic_function_(		"ferror", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

clearerr_unlocked = _rpythonic_function_(		"clearerr_unlocked", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

feof_unlocked = _rpythonic_function_(		"feof_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ferror_unlocked = _rpythonic_function_(		"ferror_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

perror = _rpythonic_function_(		"perror", ctypes.c_void_p, [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

fileno = _rpythonic_function_(		"fileno", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fileno_unlocked = _rpythonic_function_(		"fileno_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

popen = _rpythonic_function_(		"popen", ctypes.POINTER(_IO_FILE), [
	("__command",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

pclose = _rpythonic_function_(		"pclose", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ctermid = _rpythonic_function_(		"ctermid", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

flockfile = _rpythonic_function_(		"flockfile", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ftrylockfile = _rpythonic_function_(		"ftrylockfile", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

funlockfile = _rpythonic_function_(		"funlockfile", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

atof = _rpythonic_function_(		"atof", ctypes.c_double, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),] )

atoi = _rpythonic_function_(		"atoi", ctypes.c_int, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),] )

atol = _rpythonic_function_(		"atol", ctypes.c_int64, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),] )

atoll = _rpythonic_function_(		"atoll", ctypes.c_longlong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),] )

strtod = _rpythonic_function_(		"strtod", ctypes.c_double, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

strtof = _rpythonic_function_(		"strtof", ctypes.c_float, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

strtold = _rpythonic_function_(		"strtold", ctypes.c_double, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

strtol = _rpythonic_function_(		"strtol", ctypes.c_int64, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

strtoul = _rpythonic_function_(		"strtoul", ctypes.c_uint64, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

strtoq = _rpythonic_function_(		"strtoq", ctypes.c_longlong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

strtouq = _rpythonic_function_(		"strtouq", ctypes.c_ulonglong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

strtoll = _rpythonic_function_(		"strtoll", ctypes.c_longlong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

strtoull = _rpythonic_function_(		"strtoull", ctypes.c_ulonglong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

l64a = _rpythonic_function_(		"l64a", ctypes.POINTER(ctypes.c_char), [
	("__n",		ctypes.c_int64),] )

a64l = _rpythonic_function_(		"a64l", ctypes.c_int64, [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

select = _rpythonic_function_(		"select", ctypes.c_int, [
	("__nfds",		ctypes.c_int),
	("__readfds",		ctypes.POINTER(fd_set)),
	("__writefds",		ctypes.POINTER(fd_set)),
	("__exceptfds",		ctypes.POINTER(fd_set)),
	("__timeout",		ctypes.POINTER(timeval)),] )

pselect = _rpythonic_function_(		"pselect", ctypes.c_int, [
	("__nfds",		ctypes.c_int),
	("__readfds",		ctypes.POINTER(fd_set)),
	("__writefds",		ctypes.POINTER(fd_set)),
	("__exceptfds",		ctypes.POINTER(fd_set)),
	("__timeout",		ctypes.POINTER(timespec)),
	("__sigmask",		ctypes.POINTER(__sigset_t)),] )

gnu_dev_major = _rpythonic_function_(		"gnu_dev_major", ctypes.c_uint, [
	("__dev",		ctypes.c_ulonglong),] )

gnu_dev_minor = _rpythonic_function_(		"gnu_dev_minor", ctypes.c_uint, [
	("__dev",		ctypes.c_ulonglong),] )

gnu_dev_makedev = _rpythonic_function_(		"gnu_dev_makedev", ctypes.c_ulonglong, [
	("__major",		ctypes.c_uint),
	("__minor",		ctypes.c_uint),] )

random = _rpythonic_function_(		"random", ctypes.c_int64, [] )

srandom = _rpythonic_function_(		"srandom", ctypes.c_void_p, [
	("__seed",		ctypes.c_uint),] )

initstate = _rpythonic_function_(		"initstate", ctypes.POINTER(ctypes.c_char), [
	("__seed",		ctypes.c_uint),
	("__statebuf",		ctypes.POINTER(ctypes.c_char)),
	("__statelen",		ctypes.c_uint64),] )

setstate = _rpythonic_function_(		"setstate", ctypes.POINTER(ctypes.c_char), [
	("__statebuf",		ctypes.POINTER(ctypes.c_char)),] )

random_r = _rpythonic_function_(		"random_r", ctypes.c_int, [
	("__buf",		ctypes.POINTER(random_data)),
	("__result",		ctypes.POINTER(ctypes.c_int32)),] )

srandom_r = _rpythonic_function_(		"srandom_r", ctypes.c_int, [
	("__seed",		ctypes.c_uint),
	("__buf",		ctypes.POINTER(random_data)),] )

initstate_r = _rpythonic_function_(		"initstate_r", ctypes.c_int, [
	("__seed",		ctypes.c_uint),
	("__statebuf",		ctypes.POINTER(ctypes.c_char)),
	("__statelen",		ctypes.c_uint64),
	("__buf",		ctypes.POINTER(random_data)),] )

setstate_r = _rpythonic_function_(		"setstate_r", ctypes.c_int, [
	("__statebuf",		ctypes.POINTER(ctypes.c_char)),
	("__buf",		ctypes.POINTER(random_data)),] )

rand = _rpythonic_function_(		"rand", ctypes.c_int, [] )

srand = _rpythonic_function_(		"srand", ctypes.c_void_p, [
	("__seed",		ctypes.c_uint),] )

rand_r = _rpythonic_function_(		"rand_r", ctypes.c_int, [
	("__seed",		ctypes.POINTER(ctypes.c_uint)),] )

drand48 = _rpythonic_function_(		"drand48", ctypes.c_double, [] )

erand48 = _rpythonic_function_(		"erand48", ctypes.c_double, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),] )

lrand48 = _rpythonic_function_(		"lrand48", ctypes.c_int64, [] )

nrand48 = _rpythonic_function_(		"nrand48", ctypes.c_int64, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),] )

mrand48 = _rpythonic_function_(		"mrand48", ctypes.c_int64, [] )

jrand48 = _rpythonic_function_(		"jrand48", ctypes.c_int64, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),] )

srand48 = _rpythonic_function_(		"srand48", ctypes.c_void_p, [
	("__seedval",		ctypes.c_int64),] )

seed48 = _rpythonic_function_(		"seed48", ctypes.POINTER(ctypes.c_uint16), [
	("__seed16v",		( ctypes.c_uint16 * 3 )),] )

lcong48 = _rpythonic_function_(		"lcong48", ctypes.c_void_p, [
	("__param",		( ctypes.c_uint16 * 7 )),] )

drand48_r = _rpythonic_function_(		"drand48_r", ctypes.c_int, [
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_double)),] )

erand48_r = _rpythonic_function_(		"erand48_r", ctypes.c_int, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_double)),] )

lrand48_r = _rpythonic_function_(		"lrand48_r", ctypes.c_int, [
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_int64)),] )

nrand48_r = _rpythonic_function_(		"nrand48_r", ctypes.c_int, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_int64)),] )

mrand48_r = _rpythonic_function_(		"mrand48_r", ctypes.c_int, [
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_int64)),] )

jrand48_r = _rpythonic_function_(		"jrand48_r", ctypes.c_int, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_int64)),] )

srand48_r = _rpythonic_function_(		"srand48_r", ctypes.c_int, [
	("__seedval",		ctypes.c_int64),
	("__buffer",		ctypes.POINTER(drand48_data)),] )

seed48_r = _rpythonic_function_(		"seed48_r", ctypes.c_int, [
	("__seed16v",		( ctypes.c_uint16 * 3 )),
	("__buffer",		ctypes.POINTER(drand48_data)),] )

lcong48_r = _rpythonic_function_(		"lcong48_r", ctypes.c_int, [
	("__param",		( ctypes.c_uint16 * 7 )),
	("__buffer",		ctypes.POINTER(drand48_data)),] )

malloc = _rpythonic_function_(		"malloc", ctypes.POINTER(ctypes.c_void_p), [
	("__size",		ctypes.c_uint64),] )

calloc = _rpythonic_function_(		"calloc", ctypes.POINTER(ctypes.c_void_p), [
	("__nmemb",		ctypes.c_uint64),
	("__size",		ctypes.c_uint64),] )

realloc = _rpythonic_function_(		"realloc", ctypes.POINTER(ctypes.c_void_p), [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint64),] )

free = _rpythonic_function_(		"free", ctypes.c_void_p, [("__ptr",		ctypes.c_void_p)] )

cfree = _rpythonic_function_(		"cfree", ctypes.c_void_p, [("__ptr",		ctypes.c_void_p)] )

alloca = _rpythonic_function_(		"alloca", ctypes.POINTER(ctypes.c_void_p), [
	("__size",		ctypes.c_uint64),] )

valloc = _rpythonic_function_(		"valloc", ctypes.POINTER(ctypes.c_void_p), [
	("__size",		ctypes.c_uint64),] )

posix_memalign = _rpythonic_function_(		"posix_memalign", ctypes.c_int, [
	("__memptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("__alignment",		ctypes.c_uint64),
	("__size",		ctypes.c_uint64),] )

abort = _rpythonic_function_(		"abort", ctypes.c_void_p, [] )

atexit = _rpythonic_function_(		"atexit", ctypes.c_int, [
	("__func",		ctypes.c_void_p),] )

on_exit = _rpythonic_function_(		"on_exit", ctypes.c_int, [
	("__func",		ctypes.c_void_p),
	("__arg",		ctypes.POINTER(ctypes.c_void_p)),] )

exit = _rpythonic_function_(		"exit", ctypes.c_void_p, [
	("__status",		ctypes.c_int),] )

_Exit = _rpythonic_function_(		"_Exit", ctypes.c_void_p, [
	("__status",		ctypes.c_int),] )

getenv = _rpythonic_function_(		"getenv", ctypes.POINTER(ctypes.c_char), [
	("__name",		ctypes.POINTER(ctypes.c_char)),] )

putenv = _rpythonic_function_(		"putenv", ctypes.c_int, [
	("__string",		ctypes.POINTER(ctypes.c_char)),] )

setenv = _rpythonic_function_(		"setenv", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),
	("__value",		ctypes.POINTER(ctypes.c_char)),
	("__replace",		ctypes.c_int),] )

unsetenv = _rpythonic_function_(		"unsetenv", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),] )

clearenv = _rpythonic_function_(		"clearenv", ctypes.c_int, [] )

mktemp = _rpythonic_function_(		"mktemp", ctypes.POINTER(ctypes.c_char), [
	("__template",		ctypes.POINTER(ctypes.c_char)),] )

mkstemp = _rpythonic_function_(		"mkstemp", ctypes.c_int, [
	("__template",		ctypes.POINTER(ctypes.c_char)),] )

mkstemps = _rpythonic_function_(		"mkstemps", ctypes.c_int, [
	("__template",		ctypes.POINTER(ctypes.c_char)),
	("__suffixlen",		ctypes.c_int),] )

mkdtemp = _rpythonic_function_(		"mkdtemp", ctypes.POINTER(ctypes.c_char), [
	("__template",		ctypes.POINTER(ctypes.c_char)),] )

system = _rpythonic_function_(		"system", ctypes.c_int, [
	("__command",		ctypes.POINTER(ctypes.c_char)),] )

realpath = _rpythonic_function_(		"realpath", ctypes.POINTER(ctypes.c_char), [
	("__name",		ctypes.POINTER(ctypes.c_char)),
	("__resolved",		ctypes.POINTER(ctypes.c_char)),] )

bsearch = _rpythonic_function_(		"bsearch", ctypes.POINTER(ctypes.c_void_p), [
	("__key",		ctypes.POINTER(ctypes.c_void_p)),
	("__base",		ctypes.POINTER(ctypes.c_void_p)),
	("__nmemb",		ctypes.c_uint64),
	("__size",		ctypes.c_uint64),
	("__compar",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

qsort = _rpythonic_function_(		"qsort", ctypes.c_void_p, [
	("__base",		ctypes.POINTER(ctypes.c_void_p)),
	("__nmemb",		ctypes.c_uint64),
	("__size",		ctypes.c_uint64),
	("__compar",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

abs = _rpythonic_function_(		"abs", ctypes.c_int, [
	("__x",		ctypes.c_int),] )

labs = _rpythonic_function_(		"labs", ctypes.c_int64, [
	("__x",		ctypes.c_int64),] )

llabs = _rpythonic_function_(		"llabs", ctypes.c_longlong, [
	("__x",		ctypes.c_longlong),] )

div = _rpythonic_function_(		"div", div_t, [
	("__numer",		ctypes.c_int),
	("__denom",		ctypes.c_int),] )

ldiv = _rpythonic_function_(		"ldiv", ldiv_t, [
	("__numer",		ctypes.c_int64),
	("__denom",		ctypes.c_int64),] )

lldiv = _rpythonic_function_(		"lldiv", lldiv_t, [
	("__numer",		ctypes.c_longlong),
	("__denom",		ctypes.c_longlong),] )

ecvt = _rpythonic_function_(		"ecvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),] )

fcvt = _rpythonic_function_(		"fcvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),] )

gcvt = _rpythonic_function_(		"gcvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

qecvt = _rpythonic_function_(		"qecvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),] )

qfcvt = _rpythonic_function_(		"qfcvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),] )

qgcvt = _rpythonic_function_(		"qgcvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

ecvt_r = _rpythonic_function_(		"ecvt_r", ctypes.c_int, [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint64),] )

fcvt_r = _rpythonic_function_(		"fcvt_r", ctypes.c_int, [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint64),] )

qecvt_r = _rpythonic_function_(		"qecvt_r", ctypes.c_int, [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint64),] )

qfcvt_r = _rpythonic_function_(		"qfcvt_r", ctypes.c_int, [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint64),] )

mblen = _rpythonic_function_(		"mblen", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint64),] )

mbtowc = _rpythonic_function_(		"mbtowc", ctypes.c_int, [
	("__pwc",		ctypes.POINTER(ctypes.c_int)),
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint64),] )

wctomb = _rpythonic_function_(		"wctomb", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__wchar",		ctypes.c_int),] )

mbstowcs = _rpythonic_function_(		"mbstowcs", ctypes.c_uint64, [
	("__pwcs",		ctypes.POINTER(ctypes.c_int)),
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint64),] )

wcstombs = _rpythonic_function_(		"wcstombs", ctypes.c_uint64, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__pwcs",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint64),] )

rpmatch = _rpythonic_function_(		"rpmatch", ctypes.c_int, [
	("__response",		ctypes.POINTER(ctypes.c_char)),] )

getsubopt = _rpythonic_function_(		"getsubopt", ctypes.c_int, [
	("__optionp",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__tokens",		ctypes.POINTER(ctypes.c_char)),
	("__valuep",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

getloadavg = _rpythonic_function_(		"getloadavg", ctypes.c_int, [
	("__loadavg",		ctypes.c_double),
	("__nelem",		ctypes.c_int),] )

memcpy = _rpythonic_function_(		"memcpy", ctypes.POINTER(ctypes.c_void_p), [
	("__dest",		ctypes.POINTER(ctypes.c_void_p)),
	("__src",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint64),] )

memmove = _rpythonic_function_(		"memmove", ctypes.POINTER(ctypes.c_void_p), [
	("__dest",		ctypes.POINTER(ctypes.c_void_p)),
	("__src",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint64),] )

memccpy = _rpythonic_function_(		"memccpy", ctypes.POINTER(ctypes.c_void_p), [
	("__dest",		ctypes.POINTER(ctypes.c_void_p)),
	("__src",		ctypes.POINTER(ctypes.c_void_p)),
	("__c",		ctypes.c_int),
	("__n",		ctypes.c_uint64),] )

memset = _rpythonic_function_(		"memset", ctypes.POINTER(ctypes.c_void_p), [
	("__s",		ctypes.POINTER(ctypes.c_void_p)),
	("__c",		ctypes.c_int),
	("__n",		ctypes.c_uint64),] )

memcmp = _rpythonic_function_(		"memcmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_void_p)),
	("__s2",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint64),] )

memchr = _rpythonic_function_(		"memchr", ctypes.POINTER(ctypes.c_void_p), [
	("__s",		ctypes.POINTER(ctypes.c_void_p)),
	("__c",		ctypes.c_int),
	("__n",		ctypes.c_uint64),] )

strcpy = _rpythonic_function_(		"strcpy", ctypes.POINTER(ctypes.c_char), [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),] )

strncpy = _rpythonic_function_(		"strncpy", ctypes.POINTER(ctypes.c_char), [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint64),] )

strcat = _rpythonic_function_(		"strcat", ctypes.POINTER(ctypes.c_char), [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),] )

strncat = _rpythonic_function_(		"strncat", ctypes.POINTER(ctypes.c_char), [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint64),] )

strcmp = _rpythonic_function_(		"strcmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),] )

strncmp = _rpythonic_function_(		"strncmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint64),] )

strcoll = _rpythonic_function_(		"strcoll", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),] )

strxfrm = _rpythonic_function_(		"strxfrm", ctypes.c_uint64, [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint64),] )

strcoll_l = _rpythonic_function_(		"strcoll_l", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),
	("__l",		ctypes.POINTER(__locale_struct)),] )

strxfrm_l = _rpythonic_function_(		"strxfrm_l", ctypes.c_uint64, [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint64),
	("__l",		ctypes.POINTER(__locale_struct)),] )

strdup = _rpythonic_function_(		"strdup", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

strndup = _rpythonic_function_(		"strndup", ctypes.POINTER(ctypes.c_char), [
	("__string",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint64),] )

strchr = _rpythonic_function_(		"strchr", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__c",		ctypes.c_int),] )

strrchr = _rpythonic_function_(		"strrchr", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__c",		ctypes.c_int),] )

strcspn = _rpythonic_function_(		"strcspn", ctypes.c_uint64, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__reject",		ctypes.POINTER(ctypes.c_char)),] )

strspn = _rpythonic_function_(		"strspn", ctypes.c_uint64, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__accept",		ctypes.POINTER(ctypes.c_char)),] )

strpbrk = _rpythonic_function_(		"strpbrk", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__accept",		ctypes.POINTER(ctypes.c_char)),] )

strstr = _rpythonic_function_(		"strstr", ctypes.POINTER(ctypes.c_char), [
	("__haystack",		ctypes.POINTER(ctypes.c_char)),
	("__needle",		ctypes.POINTER(ctypes.c_char)),] )

strtok = _rpythonic_function_(		"strtok", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__delim",		ctypes.POINTER(ctypes.c_char)),] )

strtok_r = _rpythonic_function_(		"strtok_r", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__delim",		ctypes.POINTER(ctypes.c_char)),
	("__save_ptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

strlen = _rpythonic_function_(		"strlen", ctypes.c_uint64, [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

strnlen = _rpythonic_function_(		"strnlen", ctypes.c_uint64, [
	("__string",		ctypes.POINTER(ctypes.c_char)),
	("__maxlen",		ctypes.c_uint64),] )

strerror = _rpythonic_function_(		"strerror", ctypes.POINTER(ctypes.c_char), [
	("__errnum",		ctypes.c_int),] )

strerror_r = _rpythonic_function_(		"strerror_r", ctypes.c_int, [
	("__errnum",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__buflen",		ctypes.c_uint64),] )

strerror_l = _rpythonic_function_(		"strerror_l", ctypes.POINTER(ctypes.c_char), [
	("__errnum",		ctypes.c_int),
	("__l",		ctypes.POINTER(__locale_struct)),] )

bcopy = _rpythonic_function_(		"bcopy", ctypes.c_void_p, [
	("__src",		ctypes.POINTER(ctypes.c_void_p)),
	("__dest",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint64),] )

bzero = _rpythonic_function_(		"bzero", ctypes.c_void_p, [
	("__s",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint64),] )

bcmp = _rpythonic_function_(		"bcmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_void_p)),
	("__s2",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint64),] )

index = _rpythonic_function_(		"index", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__c",		ctypes.c_int),] )

rindex = _rpythonic_function_(		"rindex", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__c",		ctypes.c_int),] )

ffs = _rpythonic_function_(		"ffs", ctypes.c_int, [
	("__i",		ctypes.c_int),] )

strcasecmp = _rpythonic_function_(		"strcasecmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),] )

strncasecmp = _rpythonic_function_(		"strncasecmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint64),] )

strsep = _rpythonic_function_(		"strsep", ctypes.POINTER(ctypes.c_char), [
	("__stringp",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__delim",		ctypes.POINTER(ctypes.c_char)),] )

strsignal = _rpythonic_function_(		"strsignal", ctypes.POINTER(ctypes.c_char), [
	("__sig",		ctypes.c_int),] )

stpcpy = _rpythonic_function_(		"stpcpy", ctypes.POINTER(ctypes.c_char), [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),] )

stpncpy = _rpythonic_function_(		"stpncpy", ctypes.POINTER(ctypes.c_char), [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint64),] )

access = _rpythonic_function_(		"access", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),
	("__type",		ctypes.c_int),] )

faccessat = _rpythonic_function_(		"faccessat", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__type",		ctypes.c_int),
	("__flag",		ctypes.c_int),] )

lseek = _rpythonic_function_(		"lseek", ctypes.c_int64, [
	("__fd",		ctypes.c_int),
	("__offset",		ctypes.c_int64),
	("__whence",		ctypes.c_int),] )

close = _rpythonic_function_(		"close", ctypes.c_int, [
	("__fd",		ctypes.c_int),] )

read = _rpythonic_function_(		"read", ctypes.c_int64, [
	("__fd",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_void_p)),
	("__nbytes",		ctypes.c_uint64),] )

write = _rpythonic_function_(		"write", ctypes.c_int64, [
	("__fd",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint64),] )

pread = _rpythonic_function_(		"pread", ctypes.c_int64, [
	("__fd",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_void_p)),
	("__nbytes",		ctypes.c_uint64),
	("__offset",		ctypes.c_int64),] )

pwrite = _rpythonic_function_(		"pwrite", ctypes.c_int64, [
	("__fd",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint64),
	("__offset",		ctypes.c_int64),] )

pipe = _rpythonic_function_(		"pipe", ctypes.c_int, [
	("__pipedes",		( ctypes.c_int * 2 )),] )

alarm = _rpythonic_function_(		"alarm", ctypes.c_uint, [
	("__seconds",		ctypes.c_uint),] )

sleep = _rpythonic_function_(		"sleep", ctypes.c_uint, [
	("__seconds",		ctypes.c_uint),] )

ualarm = _rpythonic_function_(		"ualarm", ctypes.c_uint, [
	("__value",		ctypes.c_uint),
	("__interval",		ctypes.c_uint),] )

usleep = _rpythonic_function_(		"usleep", ctypes.c_int, [
	("__useconds",		ctypes.c_uint),] )

pause = _rpythonic_function_(		"pause", ctypes.c_int, [] )

chown = _rpythonic_function_(		"chown", ctypes.c_int, [
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__owner",		ctypes.c_uint),
	("__group",		ctypes.c_uint),] )

fchown = _rpythonic_function_(		"fchown", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__owner",		ctypes.c_uint),
	("__group",		ctypes.c_uint),] )

lchown = _rpythonic_function_(		"lchown", ctypes.c_int, [
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__owner",		ctypes.c_uint),
	("__group",		ctypes.c_uint),] )

fchownat = _rpythonic_function_(		"fchownat", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__owner",		ctypes.c_uint),
	("__group",		ctypes.c_uint),
	("__flag",		ctypes.c_int),] )

chdir = _rpythonic_function_(		"chdir", ctypes.c_int, [
	("__path",		ctypes.POINTER(ctypes.c_char)),] )

fchdir = _rpythonic_function_(		"fchdir", ctypes.c_int, [
	("__fd",		ctypes.c_int),] )

getcwd = _rpythonic_function_(		"getcwd", ctypes.POINTER(ctypes.c_char), [
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__size",		ctypes.c_uint64),] )

getwd = _rpythonic_function_(		"getwd", ctypes.POINTER(ctypes.c_char), [
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

dup = _rpythonic_function_(		"dup", ctypes.c_int, [
	("__fd",		ctypes.c_int),] )

dup2 = _rpythonic_function_(		"dup2", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__fd2",		ctypes.c_int),] )

execve = _rpythonic_function_(		"execve", ctypes.c_int, [
	("__path",		ctypes.POINTER(ctypes.c_char)),
	("__argv",		ctypes.c_char),
	("__envp",		ctypes.c_char),] )

fexecve = _rpythonic_function_(		"fexecve", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__argv",		ctypes.c_char),
	("__envp",		ctypes.c_char),] )

execv = _rpythonic_function_(		"execv", ctypes.c_int, [
	("__path",		ctypes.POINTER(ctypes.c_char)),
	("__argv",		ctypes.c_char),] )

execvp = _rpythonic_function_(		"execvp", ctypes.c_int, [
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__argv",		ctypes.c_char),] )

nice = _rpythonic_function_(		"nice", ctypes.c_int, [
	("__inc",		ctypes.c_int),] )

_exit = _rpythonic_function_(		"_exit", ctypes.c_void_p, [
	("__status",		ctypes.c_int),] )

pathconf = _rpythonic_function_(		"pathconf", ctypes.c_int64, [
	("__path",		ctypes.POINTER(ctypes.c_char)),
	("__name",		ctypes.c_int),] )

fpathconf = _rpythonic_function_(		"fpathconf", ctypes.c_int64, [
	("__fd",		ctypes.c_int),
	("__name",		ctypes.c_int),] )

sysconf = _rpythonic_function_(		"sysconf", ctypes.c_int64, [
	("__name",		ctypes.c_int),] )

confstr = _rpythonic_function_(		"confstr", ctypes.c_uint64, [
	("__name",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint64),] )

setpgrp = _rpythonic_function_(		"setpgrp", ctypes.c_int, [] )

setsid = _rpythonic_function_(		"setsid", ctypes.c_int, [] )

getsid = _rpythonic_function_(		"getsid", ctypes.c_int, [
	("__pid",		ctypes.c_int),] )

getuid = _rpythonic_function_(		"getuid", ctypes.c_uint, [] )

geteuid = _rpythonic_function_(		"geteuid", ctypes.c_uint, [] )

getgid = _rpythonic_function_(		"getgid", ctypes.c_uint, [] )

getegid = _rpythonic_function_(		"getegid", ctypes.c_uint, [] )

getgroups = _rpythonic_function_(		"getgroups", ctypes.c_int, [
	("__size",		ctypes.c_int),
	("__list",		ctypes.c_uint),] )

setuid = _rpythonic_function_(		"setuid", ctypes.c_int, [
	("__uid",		ctypes.c_uint),] )

setreuid = _rpythonic_function_(		"setreuid", ctypes.c_int, [
	("__ruid",		ctypes.c_uint),
	("__euid",		ctypes.c_uint),] )

seteuid = _rpythonic_function_(		"seteuid", ctypes.c_int, [
	("__uid",		ctypes.c_uint),] )

setgid = _rpythonic_function_(		"setgid", ctypes.c_int, [
	("__gid",		ctypes.c_uint),] )

setregid = _rpythonic_function_(		"setregid", ctypes.c_int, [
	("__rgid",		ctypes.c_uint),
	("__egid",		ctypes.c_uint),] )

getpid = _rpythonic_function_(		"getpid", ctypes.c_int, [] )

getppid = _rpythonic_function_(		"getppid", ctypes.c_int, [] )

getpgrp = _rpythonic_function_(		"getpgrp", ctypes.c_int, [] )

getpgid = _rpythonic_function_(		"getpgid", ctypes.c_int, [
	("__pid",		ctypes.c_int),] )

setpgid = _rpythonic_function_(		"setpgid", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__pgid",		ctypes.c_int),] )

setegid = _rpythonic_function_(		"setegid", ctypes.c_int, [
	("__gid",		ctypes.c_uint),] )

fork = _rpythonic_function_(		"fork", ctypes.c_int, [] )

vfork = _rpythonic_function_(		"vfork", ctypes.c_int, [] )

ttyname = _rpythonic_function_(		"ttyname", ctypes.POINTER(ctypes.c_char), [
	("__fd",		ctypes.c_int),] )

ttyname_r = _rpythonic_function_(		"ttyname_r", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__buflen",		ctypes.c_uint64),] )

isatty = _rpythonic_function_(		"isatty", ctypes.c_int, [
	("__fd",		ctypes.c_int),] )

ttyslot = _rpythonic_function_(		"ttyslot", ctypes.c_int, [] )

link = _rpythonic_function_(		"link", ctypes.c_int, [
	("__from",		ctypes.POINTER(ctypes.c_char)),
	("__to",		ctypes.POINTER(ctypes.c_char)),] )

linkat = _rpythonic_function_(		"linkat", ctypes.c_int, [
	("__fromfd",		ctypes.c_int),
	("__from",		ctypes.POINTER(ctypes.c_char)),
	("__tofd",		ctypes.c_int),
	("__to",		ctypes.POINTER(ctypes.c_char)),
	("__flags",		ctypes.c_int),] )

symlink = _rpythonic_function_(		"symlink", ctypes.c_int, [
	("__from",		ctypes.POINTER(ctypes.c_char)),
	("__to",		ctypes.POINTER(ctypes.c_char)),] )

readlink = _rpythonic_function_(		"readlink", ctypes.c_int64, [
	("__path",		ctypes.POINTER(ctypes.c_char)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint64),] )

symlinkat = _rpythonic_function_(		"symlinkat", ctypes.c_int, [
	("__from",		ctypes.POINTER(ctypes.c_char)),
	("__tofd",		ctypes.c_int),
	("__to",		ctypes.POINTER(ctypes.c_char)),] )

readlinkat = _rpythonic_function_(		"readlinkat", ctypes.c_int64, [
	("__fd",		ctypes.c_int),
	("__path",		ctypes.POINTER(ctypes.c_char)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint64),] )

unlink = _rpythonic_function_(		"unlink", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),] )

unlinkat = _rpythonic_function_(		"unlinkat", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__name",		ctypes.POINTER(ctypes.c_char)),
	("__flag",		ctypes.c_int),] )

rmdir = _rpythonic_function_(		"rmdir", ctypes.c_int, [
	("__path",		ctypes.POINTER(ctypes.c_char)),] )

tcgetpgrp = _rpythonic_function_(		"tcgetpgrp", ctypes.c_int, [
	("__fd",		ctypes.c_int),] )

tcsetpgrp = _rpythonic_function_(		"tcsetpgrp", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__pgrp_id",		ctypes.c_int),] )

getlogin = _rpythonic_function_(		"getlogin", ctypes.POINTER(ctypes.c_char), [] )

getlogin_r = _rpythonic_function_(		"getlogin_r", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),
	("__name_len",		ctypes.c_uint64),] )

setlogin = _rpythonic_function_(		"setlogin", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),] )

getopt = _rpythonic_function_(		"getopt", ctypes.c_int, [
	("___argc",		ctypes.c_int),
	("___argv",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__shortopts",		ctypes.POINTER(ctypes.c_char)),] )

gethostname = _rpythonic_function_(		"gethostname", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint64),] )

sethostname = _rpythonic_function_(		"sethostname", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint64),] )

sethostid = _rpythonic_function_(		"sethostid", ctypes.c_int, [
	("__id",		ctypes.c_int64),] )

getdomainname = _rpythonic_function_(		"getdomainname", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint64),] )

setdomainname = _rpythonic_function_(		"setdomainname", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint64),] )

vhangup = _rpythonic_function_(		"vhangup", ctypes.c_int, [] )

revoke = _rpythonic_function_(		"revoke", ctypes.c_int, [
	("__file",		ctypes.POINTER(ctypes.c_char)),] )

profil = _rpythonic_function_(		"profil", ctypes.c_int, [
	("__sample_buffer",		ctypes.POINTER(ctypes.c_uint16)),
	("__size",		ctypes.c_uint64),
	("__offset",		ctypes.c_uint64),
	("__scale",		ctypes.c_uint),] )

acct = _rpythonic_function_(		"acct", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),] )

getusershell = _rpythonic_function_(		"getusershell", ctypes.POINTER(ctypes.c_char), [] )

endusershell = _rpythonic_function_(		"endusershell", ctypes.c_void_p, [] )

setusershell = _rpythonic_function_(		"setusershell", ctypes.c_void_p, [] )

daemon = _rpythonic_function_(		"daemon", ctypes.c_int, [
	("__nochdir",		ctypes.c_int),
	("__noclose",		ctypes.c_int),] )

chroot = _rpythonic_function_(		"chroot", ctypes.c_int, [
	("__path",		ctypes.POINTER(ctypes.c_char)),] )

getpass = _rpythonic_function_(		"getpass", ctypes.POINTER(ctypes.c_char), [
	("__prompt",		ctypes.POINTER(ctypes.c_char)),] )

fsync = _rpythonic_function_(		"fsync", ctypes.c_int, [
	("__fd",		ctypes.c_int),] )

gethostid = _rpythonic_function_(		"gethostid", ctypes.c_int64, [] )

sync = _rpythonic_function_(		"sync", ctypes.c_void_p, [] )

getpagesize = _rpythonic_function_(		"getpagesize", ctypes.c_int, [] )

getdtablesize = _rpythonic_function_(		"getdtablesize", ctypes.c_int, [] )

truncate = _rpythonic_function_(		"truncate", ctypes.c_int, [
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__length",		ctypes.c_int64),] )

ftruncate = _rpythonic_function_(		"ftruncate", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__length",		ctypes.c_int64),] )

brk = _rpythonic_function_(		"brk", ctypes.c_int, [("__addr",		ctypes.c_void_p)] )

sbrk = _rpythonic_function_(		"sbrk", ctypes.POINTER(ctypes.c_void_p), [
	("__delta",		ctypes.c_int64),] )

lockf = _rpythonic_function_(		"lockf", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__cmd",		ctypes.c_int),
	("__len",		ctypes.c_int64),] )

fdatasync = _rpythonic_function_(		"fdatasync", ctypes.c_int, [
	("__fildes",		ctypes.c_int),] )

alloc_func = _rpythonic_function_(		"alloc_func", ctypes.POINTER(ctypes.c_void_p), [
	("opaque",		ctypes.POINTER(ctypes.c_void_p)),
	("items",		ctypes.c_uint),
	("size",		ctypes.c_uint),] )

free_func = _rpythonic_function_(		"free_func", ctypes.c_void_p, [
	("opaque",		ctypes.POINTER(ctypes.c_void_p)),
	("address",		ctypes.POINTER(ctypes.c_void_p)),] )

zlibVersion = _rpythonic_function_(		"zlibVersion", ctypes.POINTER(ctypes.c_char), [] )

deflate = _rpythonic_function_(		"deflate", ctypes.c_int, [
	("strm",		ctypes.POINTER(z_stream_s)),
	("flush",		ctypes.c_int),] )

deflateEnd = _rpythonic_function_(		"deflateEnd", ctypes.c_int, [
	("strm",		ctypes.POINTER(z_stream_s)),] )

inflate = _rpythonic_function_(		"inflate", ctypes.c_int, [
	("strm",		ctypes.POINTER(z_stream_s)),
	("flush",		ctypes.c_int),] )

inflateEnd = _rpythonic_function_(		"inflateEnd", ctypes.c_int, [
	("strm",		ctypes.POINTER(z_stream_s)),] )

deflateSetDictionary = _rpythonic_function_(		"deflateSetDictionary", ctypes.c_int, [
	("strm",		ctypes.POINTER(z_stream_s)),
	("dictionary",		ctypes.POINTER(ctypes.c_ubyte)),
	("dictLength",		ctypes.c_uint),] )

deflateCopy = _rpythonic_function_(		"deflateCopy", ctypes.c_int, [
	("dest",		ctypes.POINTER(z_stream_s)),
	("source",		ctypes.POINTER(z_stream_s)),] )

deflateReset = _rpythonic_function_(		"deflateReset", ctypes.c_int, [
	("strm",		ctypes.POINTER(z_stream_s)),] )

deflateParams = _rpythonic_function_(		"deflateParams", ctypes.c_int, [
	("strm",		ctypes.POINTER(z_stream_s)),
	("level",		ctypes.c_int),
	("strategy",		ctypes.c_int),] )

deflateTune = _rpythonic_function_(		"deflateTune", ctypes.c_int, [
	("strm",		ctypes.POINTER(z_stream_s)),
	("good_length",		ctypes.c_int),
	("max_lazy",		ctypes.c_int),
	("nice_length",		ctypes.c_int),
	("max_chain",		ctypes.c_int),] )

deflateBound = _rpythonic_function_(		"deflateBound", ctypes.c_ulong, [
	("strm",		ctypes.POINTER(z_stream_s)),
	("sourceLen",		ctypes.c_ulong),] )

deflatePrime = _rpythonic_function_(		"deflatePrime", ctypes.c_int, [
	("strm",		ctypes.POINTER(z_stream_s)),
	("bits",		ctypes.c_int),
	("value",		ctypes.c_int),] )

deflateSetHeader = _rpythonic_function_(		"deflateSetHeader", ctypes.c_int, [
	("strm",		ctypes.POINTER(z_stream_s)),
	("head",		ctypes.POINTER(gz_header_s)),] )

inflateSetDictionary = _rpythonic_function_(		"inflateSetDictionary", ctypes.c_int, [
	("strm",		ctypes.POINTER(z_stream_s)),
	("dictionary",		ctypes.POINTER(ctypes.c_ubyte)),
	("dictLength",		ctypes.c_uint),] )

inflateSync = _rpythonic_function_(		"inflateSync", ctypes.c_int, [
	("strm",		ctypes.POINTER(z_stream_s)),] )

inflateCopy = _rpythonic_function_(		"inflateCopy", ctypes.c_int, [
	("dest",		ctypes.POINTER(z_stream_s)),
	("source",		ctypes.POINTER(z_stream_s)),] )

inflateReset = _rpythonic_function_(		"inflateReset", ctypes.c_int, [
	("strm",		ctypes.POINTER(z_stream_s)),] )

inflateReset2 = _rpythonic_function_(		"inflateReset2", ctypes.c_int, [
	("strm",		ctypes.POINTER(z_stream_s)),
	("windowBits",		ctypes.c_int),] )

inflatePrime = _rpythonic_function_(		"inflatePrime", ctypes.c_int, [
	("strm",		ctypes.POINTER(z_stream_s)),
	("bits",		ctypes.c_int),
	("value",		ctypes.c_int),] )

inflateMark = _rpythonic_function_(		"inflateMark", ctypes.c_long, [
	("strm",		ctypes.POINTER(z_stream_s)),] )

inflateGetHeader = _rpythonic_function_(		"inflateGetHeader", ctypes.c_int, [
	("strm",		ctypes.POINTER(z_stream_s)),
	("head",		ctypes.POINTER(gz_header_s)),] )

in_func = _rpythonic_function_(		"in_func", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte))),] )

out_func = _rpythonic_function_(		"out_func", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_ubyte)),
	("none",		ctypes.c_void_p),] )

inflateBack = _rpythonic_function_(		"inflateBack", ctypes.c_int, [
	("strm",		ctypes.POINTER(z_stream_s)),
	("C_in",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)),)),
	("in_desc",		ctypes.POINTER(ctypes.c_void_p)),
	("out",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_ubyte),ctypes.c_void_p,)),
	("out_desc",		ctypes.POINTER(ctypes.c_void_p)),] )

inflateBackEnd = _rpythonic_function_(		"inflateBackEnd", ctypes.c_int, [
	("strm",		ctypes.POINTER(z_stream_s)),] )

zlibCompileFlags = _rpythonic_function_(		"zlibCompileFlags", ctypes.c_ulong, [] )

compress = _rpythonic_function_(		"compress", ctypes.c_int, [
	("dest",		ctypes.POINTER(ctypes.c_ubyte)),
	("destLen",		ctypes.POINTER(ctypes.c_ulong)),
	("source",		ctypes.POINTER(ctypes.c_ubyte)),
	("sourceLen",		ctypes.c_ulong),] )

compress2 = _rpythonic_function_(		"compress2", ctypes.c_int, [
	("dest",		ctypes.POINTER(ctypes.c_ubyte)),
	("destLen",		ctypes.POINTER(ctypes.c_ulong)),
	("source",		ctypes.POINTER(ctypes.c_ubyte)),
	("sourceLen",		ctypes.c_ulong),
	("level",		ctypes.c_int),] )

compressBound = _rpythonic_function_(		"compressBound", ctypes.c_ulong, [
	("sourceLen",		ctypes.c_ulong),] )

uncompress = _rpythonic_function_(		"uncompress", ctypes.c_int, [
	("dest",		ctypes.POINTER(ctypes.c_ubyte)),
	("destLen",		ctypes.POINTER(ctypes.c_ulong)),
	("source",		ctypes.POINTER(ctypes.c_ubyte)),
	("sourceLen",		ctypes.c_ulong),] )

gzdopen = _rpythonic_function_(		"gzdopen", ctypes.c_void_p, [
	("fd",		ctypes.c_int),
	("mode",		ctypes.POINTER(ctypes.c_char)),] )

gzsetparams = _rpythonic_function_(		"gzsetparams", ctypes.c_int, [
	("file",		ctypes.c_void_p),
	("level",		ctypes.c_int),
	("strategy",		ctypes.c_int),] )

gzread = _rpythonic_function_(		"gzread", ctypes.c_int, [
	("file",		ctypes.c_void_p),
	("buf",		ctypes.POINTER(ctypes.c_void_p)),
	("C_len",		ctypes.c_void_p),] )

gzwrite = _rpythonic_function_(		"gzwrite", ctypes.c_int, [
	("file",		ctypes.c_void_p),
	("buf",		ctypes.POINTER(ctypes.c_void_p)),
	("C_len",		ctypes.c_void_p),] )

gzputs = _rpythonic_function_(		"gzputs", ctypes.c_int, [
	("file",		ctypes.c_void_p),
	("s",		ctypes.POINTER(ctypes.c_char)),] )

gzgets = _rpythonic_function_(		"gzgets", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.c_void_p),
	("buf",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

gzputc = _rpythonic_function_(		"gzputc", ctypes.c_int, [
	("file",		ctypes.c_void_p),
	("c",		ctypes.c_int),] )

gzgetc = _rpythonic_function_(		"gzgetc", ctypes.c_int, [("file",		ctypes.c_void_p)] )

gzungetc = _rpythonic_function_(		"gzungetc", ctypes.c_int, [
	("c",		ctypes.c_int),
	("file",		ctypes.c_void_p),] )

gzflush = _rpythonic_function_(		"gzflush", ctypes.c_int, [
	("file",		ctypes.c_void_p),
	("flush",		ctypes.c_int),] )

gzrewind = _rpythonic_function_(		"gzrewind", ctypes.c_int, [("file",		ctypes.c_void_p)] )

gzeof = _rpythonic_function_(		"gzeof", ctypes.c_int, [("file",		ctypes.c_void_p)] )

gzdirect = _rpythonic_function_(		"gzdirect", ctypes.c_int, [("file",		ctypes.c_void_p)] )

gzclose = _rpythonic_function_(		"gzclose", ctypes.c_int, [("file",		ctypes.c_void_p)] )

gzerror = _rpythonic_function_(		"gzerror", ctypes.POINTER(ctypes.c_char), [
	("file",		ctypes.c_void_p),
	("errnum",		ctypes.POINTER(ctypes.c_int)),] )

gzclearerr = _rpythonic_function_(		"gzclearerr", ctypes.c_void_p, [("file",		ctypes.c_void_p)] )

adler32 = _rpythonic_function_(		"adler32", ctypes.c_ulong, [
	("adler",		ctypes.c_ulong),
	("buf",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_uint),] )

crc32 = _rpythonic_function_(		"crc32", ctypes.c_ulong, [
	("crc",		ctypes.c_ulong),
	("buf",		ctypes.POINTER(ctypes.c_ubyte)),
	("C_len",		ctypes.c_uint),] )

deflateInit_ = _rpythonic_function_(		"deflateInit_", ctypes.c_int, [
	("strm",		ctypes.POINTER(z_stream_s)),
	("level",		ctypes.c_int),
	("version",		ctypes.POINTER(ctypes.c_char)),
	("stream_size",		ctypes.c_int),] )

inflateInit_ = _rpythonic_function_(		"inflateInit_", ctypes.c_int, [
	("strm",		ctypes.POINTER(z_stream_s)),
	("version",		ctypes.POINTER(ctypes.c_char)),
	("stream_size",		ctypes.c_int),] )

deflateInit2_ = _rpythonic_function_(		"deflateInit2_", ctypes.c_int, [
	("strm",		ctypes.POINTER(z_stream_s)),
	("level",		ctypes.c_int),
	("method",		ctypes.c_int),
	("windowBits",		ctypes.c_int),
	("memLevel",		ctypes.c_int),
	("strategy",		ctypes.c_int),
	("version",		ctypes.POINTER(ctypes.c_char)),
	("stream_size",		ctypes.c_int),] )

inflateInit2_ = _rpythonic_function_(		"inflateInit2_", ctypes.c_int, [
	("strm",		ctypes.POINTER(z_stream_s)),
	("windowBits",		ctypes.c_int),
	("version",		ctypes.POINTER(ctypes.c_char)),
	("stream_size",		ctypes.c_int),] )

inflateBackInit_ = _rpythonic_function_(		"inflateBackInit_", ctypes.c_int, [
	("strm",		ctypes.POINTER(z_stream_s)),
	("windowBits",		ctypes.c_int),
	("window",		ctypes.POINTER(ctypes.c_ubyte)),
	("version",		ctypes.POINTER(ctypes.c_char)),
	("stream_size",		ctypes.c_int),] )

gzopen = _rpythonic_function_(		"gzopen", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

gzseek = _rpythonic_function_(		"gzseek", ctypes.c_int64, [
	("none",		ctypes.c_void_p),
	("none",		ctypes.c_int64),
	("none",		ctypes.c_int),] )

gztell = _rpythonic_function_(		"gztell", ctypes.c_int64, [] )

adler32_combine = _rpythonic_function_(		"adler32_combine", ctypes.c_ulong, [
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int64),] )

crc32_combine = _rpythonic_function_(		"crc32_combine", ctypes.c_ulong, [
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_ulong),
	("none",		ctypes.c_int64),] )

zError = _rpythonic_function_(		"zError", ctypes.POINTER(ctypes.c_char), [
	("none",		ctypes.c_int),] )

inflateSyncPoint = _rpythonic_function_(		"inflateSyncPoint", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

get_crc_table = _rpythonic_function_(		"get_crc_table", ctypes.POINTER(ctypes.c_ulong), [] )

inflateUndermine = _rpythonic_function_(		"inflateUndermine", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),] )

gettimeofday = _rpythonic_function_(		"gettimeofday", ctypes.c_int, [
	("__tv",		ctypes.POINTER(timeval)),
	("__tz",		ctypes.POINTER(timezone)),] )

settimeofday = _rpythonic_function_(		"settimeofday", ctypes.c_int, [
	("__tv",		ctypes.POINTER(timeval)),
	("__tz",		ctypes.POINTER(timezone)),] )

adjtime = _rpythonic_function_(		"adjtime", ctypes.c_int, [
	("__delta",		ctypes.POINTER(timeval)),
	("__olddelta",		ctypes.POINTER(timeval)),] )

getitimer = _rpythonic_function_(		"getitimer", ctypes.c_int, [
	("__which",		ctypes.c_int),
	("__value",		ctypes.POINTER(itimerval)),] )

setitimer = _rpythonic_function_(		"setitimer", ctypes.c_int, [
	("__which",		ctypes.c_int),
	("__new",		ctypes.POINTER(itimerval)),
	("__old",		ctypes.POINTER(itimerval)),] )

utimes = _rpythonic_function_(		"utimes", ctypes.c_int, [
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__tvp",		( timeval * 2 )),] )

lutimes = _rpythonic_function_(		"lutimes", ctypes.c_int, [
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__tvp",		( timeval * 2 )),] )

futimes = _rpythonic_function_(		"futimes", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__tvp",		( timeval * 2 )),] )

process_vm_readv = _rpythonic_function_(		"process_vm_readv", ctypes.c_int64, [
	("__pid",		ctypes.c_int),
	("__lvec",		ctypes.POINTER(iovec)),
	("__liovcnt",		ctypes.c_uint64),
	("__rvec",		ctypes.POINTER(iovec)),
	("__riovcnt",		ctypes.c_uint64),
	("__flags",		ctypes.c_uint64),] )

process_vm_writev = _rpythonic_function_(		"process_vm_writev", ctypes.c_int64, [
	("__pid",		ctypes.c_int),
	("__lvec",		ctypes.POINTER(iovec)),
	("__liovcnt",		ctypes.c_uint64),
	("__rvec",		ctypes.POINTER(iovec)),
	("__riovcnt",		ctypes.c_uint64),
	("__flags",		ctypes.c_uint64),] )

readv = _rpythonic_function_(		"readv", ctypes.c_int64, [
	("__fd",		ctypes.c_int),
	("__iovec",		ctypes.POINTER(iovec)),
	("__count",		ctypes.c_int),] )

writev = _rpythonic_function_(		"writev", ctypes.c_int64, [
	("__fd",		ctypes.c_int),
	("__iovec",		ctypes.POINTER(iovec)),
	("__count",		ctypes.c_int),] )

preadv = _rpythonic_function_(		"preadv", ctypes.c_int64, [
	("__fd",		ctypes.c_int),
	("__iovec",		ctypes.POINTER(iovec)),
	("__count",		ctypes.c_int),
	("__offset",		ctypes.c_int64),] )

pwritev = _rpythonic_function_(		"pwritev", ctypes.c_int64, [
	("__fd",		ctypes.c_int),
	("__iovec",		ctypes.POINTER(iovec)),
	("__count",		ctypes.c_int),
	("__offset",		ctypes.c_int64),] )

recvmmsg = _rpythonic_function_(		"recvmmsg", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__vmessages",		ctypes.POINTER(mmsghdr)),
	("__vlen",		ctypes.c_uint),
	("__flags",		ctypes.c_int),
	("__tmo",		ctypes.POINTER(timespec)),] )

sendmmsg = _rpythonic_function_(		"sendmmsg", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__vmessages",		ctypes.POINTER(mmsghdr)),
	("__vlen",		ctypes.c_uint),
	("__flags",		ctypes.c_int),] )

socket = _rpythonic_function_(		"socket", ctypes.c_int, [
	("__domain",		ctypes.c_int),
	("__type",		ctypes.c_int),
	("__protocol",		ctypes.c_int),] )

socketpair = _rpythonic_function_(		"socketpair", ctypes.c_int, [
	("__domain",		ctypes.c_int),
	("__type",		ctypes.c_int),
	("__protocol",		ctypes.c_int),
	("__fds",		( ctypes.c_int * 2 )),] )

bind = _rpythonic_function_(		"bind", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__addr",		ctypes.POINTER(sockaddr)),
	("__len",		ctypes.c_uint),] )

getsockname = _rpythonic_function_(		"getsockname", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__addr",		ctypes.POINTER(sockaddr)),
	("__len",		ctypes.POINTER(ctypes.c_uint)),] )

connect = _rpythonic_function_(		"connect", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__addr",		ctypes.POINTER(sockaddr)),
	("__len",		ctypes.c_uint),] )

getpeername = _rpythonic_function_(		"getpeername", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__addr",		ctypes.POINTER(sockaddr)),
	("__len",		ctypes.POINTER(ctypes.c_uint)),] )

send = _rpythonic_function_(		"send", ctypes.c_int64, [
	("__fd",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint64),
	("__flags",		ctypes.c_int),] )

recv = _rpythonic_function_(		"recv", ctypes.c_int64, [
	("__fd",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint64),
	("__flags",		ctypes.c_int),] )

sendto = _rpythonic_function_(		"sendto", ctypes.c_int64, [
	("__fd",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint64),
	("__flags",		ctypes.c_int),
	("__addr",		ctypes.POINTER(sockaddr)),
	("__addr_len",		ctypes.c_uint),] )

recvfrom = _rpythonic_function_(		"recvfrom", ctypes.c_int64, [
	("__fd",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint64),
	("__flags",		ctypes.c_int),
	("__addr",		ctypes.POINTER(sockaddr)),
	("__addr_len",		ctypes.POINTER(ctypes.c_uint)),] )

sendmsg = _rpythonic_function_(		"sendmsg", ctypes.c_int64, [
	("__fd",		ctypes.c_int),
	("__message",		ctypes.POINTER(msghdr)),
	("__flags",		ctypes.c_int),] )

recvmsg = _rpythonic_function_(		"recvmsg", ctypes.c_int64, [
	("__fd",		ctypes.c_int),
	("__message",		ctypes.POINTER(msghdr)),
	("__flags",		ctypes.c_int),] )

getsockopt = _rpythonic_function_(		"getsockopt", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__level",		ctypes.c_int),
	("__optname",		ctypes.c_int),
	("__optval",		ctypes.POINTER(ctypes.c_void_p)),
	("__optlen",		ctypes.POINTER(ctypes.c_uint)),] )

setsockopt = _rpythonic_function_(		"setsockopt", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__level",		ctypes.c_int),
	("__optname",		ctypes.c_int),
	("__optval",		ctypes.POINTER(ctypes.c_void_p)),
	("__optlen",		ctypes.c_uint),] )

listen = _rpythonic_function_(		"listen", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__n",		ctypes.c_int),] )

accept = _rpythonic_function_(		"accept", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__addr",		ctypes.POINTER(sockaddr)),
	("__addr_len",		ctypes.POINTER(ctypes.c_uint)),] )

shutdown = _rpythonic_function_(		"shutdown", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__how",		ctypes.c_int),] )

sockatmark = _rpythonic_function_(		"sockatmark", ctypes.c_int, [
	("__fd",		ctypes.c_int),] )

isfdtype = _rpythonic_function_(		"isfdtype", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__fdtype",		ctypes.c_int),] )

ntohl = _rpythonic_function_(		"ntohl", ctypes.c_uint32, [
	("__netlong",		ctypes.c_uint32),] )

ntohs = _rpythonic_function_(		"ntohs", ctypes.c_uint16, [
	("__netshort",		ctypes.c_uint16),] )

htonl = _rpythonic_function_(		"htonl", ctypes.c_uint32, [
	("__hostlong",		ctypes.c_uint32),] )

htons = _rpythonic_function_(		"htons", ctypes.c_uint16, [
	("__hostshort",		ctypes.c_uint16),] )

bindresvport = _rpythonic_function_(		"bindresvport", ctypes.c_int, [
	("__sockfd",		ctypes.c_int),
	("__sock_in",		ctypes.POINTER(sockaddr_in)),] )

bindresvport6 = _rpythonic_function_(		"bindresvport6", ctypes.c_int, [
	("__sockfd",		ctypes.c_int),
	("__sock_in",		ctypes.POINTER(sockaddr_in6)),] )

rfbEncryptAndStorePasswd = _rpythonic_function_(		"rfbEncryptAndStorePasswd", ctypes.c_int, [
	("passwd",		ctypes.POINTER(ctypes.c_char)),
	("fname",		ctypes.POINTER(ctypes.c_char)),] )

rfbDecryptPasswdFromFile = _rpythonic_function_(		"rfbDecryptPasswdFromFile", ctypes.POINTER(ctypes.c_char), [
	("fname",		ctypes.POINTER(ctypes.c_char)),] )

rfbRandomBytes = _rpythonic_function_(		"rfbRandomBytes", ctypes.c_void_p, [
	("bytes",		ctypes.POINTER(ctypes.c_ubyte)),] )

rfbEncryptBytes = _rpythonic_function_(		"rfbEncryptBytes", ctypes.c_void_p, [
	("bytes",		ctypes.POINTER(ctypes.c_ubyte)),
	("passwd",		ctypes.POINTER(ctypes.c_char)),] )

sched_setparam = _rpythonic_function_(		"sched_setparam", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__param",		ctypes.POINTER(sched_param)),] )

sched_getparam = _rpythonic_function_(		"sched_getparam", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__param",		ctypes.POINTER(sched_param)),] )

sched_setscheduler = _rpythonic_function_(		"sched_setscheduler", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__policy",		ctypes.c_int),
	("__param",		ctypes.POINTER(sched_param)),] )

sched_getscheduler = _rpythonic_function_(		"sched_getscheduler", ctypes.c_int, [
	("__pid",		ctypes.c_int),] )

sched_yield = _rpythonic_function_(		"sched_yield", ctypes.c_int, [] )

sched_get_priority_max = _rpythonic_function_(		"sched_get_priority_max", ctypes.c_int, [
	("__algorithm",		ctypes.c_int),] )

sched_get_priority_min = _rpythonic_function_(		"sched_get_priority_min", ctypes.c_int, [
	("__algorithm",		ctypes.c_int),] )

sched_rr_get_interval = _rpythonic_function_(		"sched_rr_get_interval", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__t",		ctypes.POINTER(timespec)),] )

clock = _rpythonic_function_(		"clock", ctypes.c_int64, [] )

time = _rpythonic_function_(		"time", ctypes.c_int64, [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),] )

difftime = _rpythonic_function_(		"difftime", ctypes.c_double, [
	("__time1",		ctypes.c_int64),
	("__time0",		ctypes.c_int64),] )

mktime = _rpythonic_function_(		"mktime", ctypes.c_int64, [
	("__tp",		ctypes.POINTER(tm)),] )

strftime = _rpythonic_function_(		"strftime", ctypes.c_uint64, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__maxsize",		ctypes.c_uint64),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__tp",		ctypes.POINTER(tm)),] )

strftime_l = _rpythonic_function_(		"strftime_l", ctypes.c_uint64, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__maxsize",		ctypes.c_uint64),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__tp",		ctypes.POINTER(tm)),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

gmtime = _rpythonic_function_(		"gmtime", ctypes.POINTER(tm), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),] )

localtime = _rpythonic_function_(		"localtime", ctypes.POINTER(tm), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),] )

gmtime_r = _rpythonic_function_(		"gmtime_r", ctypes.POINTER(tm), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),
	("__tp",		ctypes.POINTER(tm)),] )

localtime_r = _rpythonic_function_(		"localtime_r", ctypes.POINTER(tm), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),
	("__tp",		ctypes.POINTER(tm)),] )

asctime = _rpythonic_function_(		"asctime", ctypes.POINTER(ctypes.c_char), [
	("__tp",		ctypes.POINTER(tm)),] )

ctime = _rpythonic_function_(		"ctime", ctypes.POINTER(ctypes.c_char), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),] )

asctime_r = _rpythonic_function_(		"asctime_r", ctypes.POINTER(ctypes.c_char), [
	("__tp",		ctypes.POINTER(tm)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

ctime_r = _rpythonic_function_(		"ctime_r", ctypes.POINTER(ctypes.c_char), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

tzset = _rpythonic_function_(		"tzset", ctypes.c_void_p, [] )

stime = _rpythonic_function_(		"stime", ctypes.c_int, [
	("__when",		ctypes.POINTER(ctypes.c_int64)),] )

timegm = _rpythonic_function_(		"timegm", ctypes.c_int64, [
	("__tp",		ctypes.POINTER(tm)),] )

timelocal = _rpythonic_function_(		"timelocal", ctypes.c_int64, [
	("__tp",		ctypes.POINTER(tm)),] )

dysize = _rpythonic_function_(		"dysize", ctypes.c_int, [
	("__year",		ctypes.c_int),] )

nanosleep = _rpythonic_function_(		"nanosleep", ctypes.c_int, [
	("__requested_time",		ctypes.POINTER(timespec)),
	("__remaining",		ctypes.POINTER(timespec)),] )

clock_getres = _rpythonic_function_(		"clock_getres", ctypes.c_int, [
	("__clock_id",		ctypes.c_int),
	("__res",		ctypes.POINTER(timespec)),] )

clock_gettime = _rpythonic_function_(		"clock_gettime", ctypes.c_int, [
	("__clock_id",		ctypes.c_int),
	("__tp",		ctypes.POINTER(timespec)),] )

clock_settime = _rpythonic_function_(		"clock_settime", ctypes.c_int, [
	("__clock_id",		ctypes.c_int),
	("__tp",		ctypes.POINTER(timespec)),] )

clock_nanosleep = _rpythonic_function_(		"clock_nanosleep", ctypes.c_int, [
	("__clock_id",		ctypes.c_int),
	("__flags",		ctypes.c_int),
	("__req",		ctypes.POINTER(timespec)),
	("__rem",		ctypes.POINTER(timespec)),] )

clock_getcpuclockid = _rpythonic_function_(		"clock_getcpuclockid", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__clock_id",		ctypes.POINTER(ctypes.c_int)),] )

timer_create = _rpythonic_function_(		"timer_create", ctypes.c_int, [
	("__clock_id",		ctypes.c_int),
	("__evp",		ctypes.POINTER(sigevent)),
	("__timerid",		ctypes.POINTER(ctypes.c_void_p)),] )

timer_delete = _rpythonic_function_(		"timer_delete", ctypes.c_int, [("__timerid",		ctypes.c_void_p)] )

timer_settime = _rpythonic_function_(		"timer_settime", ctypes.c_int, [
	("__timerid",		ctypes.c_void_p),
	("__flags",		ctypes.c_int),
	("__value",		ctypes.POINTER(itimerspec)),
	("__ovalue",		ctypes.POINTER(itimerspec)),] )

timer_gettime = _rpythonic_function_(		"timer_gettime", ctypes.c_int, [
	("__timerid",		ctypes.c_void_p),
	("__value",		ctypes.POINTER(itimerspec)),] )

timer_getoverrun = _rpythonic_function_(		"timer_getoverrun", ctypes.c_int, [("__timerid",		ctypes.c_void_p)] )

pthread_create = _rpythonic_function_(		"pthread_create", ctypes.c_int, [
	("__newthread",		ctypes.POINTER(ctypes.c_uint64)),
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__start_routine",		ctypes.POINTER(ctypes.c_void_p)),
	("__arg",		ctypes.POINTER(ctypes.c_void_p)),] )

pthread_exit = _rpythonic_function_(		"pthread_exit", ctypes.c_void_p, [("__retval",		ctypes.c_void_p)] )

pthread_join = _rpythonic_function_(		"pthread_join", ctypes.c_int, [
	("__th",		ctypes.c_uint64),
	("__thread_return",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

pthread_detach = _rpythonic_function_(		"pthread_detach", ctypes.c_int, [
	("__th",		ctypes.c_uint64),] )

pthread_self = _rpythonic_function_(		"pthread_self", ctypes.c_uint64, [] )

pthread_equal = _rpythonic_function_(		"pthread_equal", ctypes.c_int, [
	("__thread1",		ctypes.c_uint64),
	("__thread2",		ctypes.c_uint64),] )

pthread_attr_init = _rpythonic_function_(		"pthread_attr_init", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),] )

pthread_attr_destroy = _rpythonic_function_(		"pthread_attr_destroy", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),] )

pthread_attr_getdetachstate = _rpythonic_function_(		"pthread_attr_getdetachstate", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__detachstate",		ctypes.POINTER(ctypes.c_int)),] )

pthread_attr_setdetachstate = _rpythonic_function_(		"pthread_attr_setdetachstate", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__detachstate",		ctypes.c_int),] )

pthread_attr_getguardsize = _rpythonic_function_(		"pthread_attr_getguardsize", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__guardsize",		ctypes.POINTER(ctypes.c_uint64)),] )

pthread_attr_setguardsize = _rpythonic_function_(		"pthread_attr_setguardsize", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__guardsize",		ctypes.c_uint64),] )

pthread_attr_getschedparam = _rpythonic_function_(		"pthread_attr_getschedparam", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__param",		ctypes.POINTER(sched_param)),] )

pthread_attr_setschedparam = _rpythonic_function_(		"pthread_attr_setschedparam", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__param",		ctypes.POINTER(sched_param)),] )

pthread_attr_getschedpolicy = _rpythonic_function_(		"pthread_attr_getschedpolicy", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__policy",		ctypes.POINTER(ctypes.c_int)),] )

pthread_attr_setschedpolicy = _rpythonic_function_(		"pthread_attr_setschedpolicy", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__policy",		ctypes.c_int),] )

pthread_attr_getinheritsched = _rpythonic_function_(		"pthread_attr_getinheritsched", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__inherit",		ctypes.POINTER(ctypes.c_int)),] )

pthread_attr_setinheritsched = _rpythonic_function_(		"pthread_attr_setinheritsched", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__inherit",		ctypes.c_int),] )

pthread_attr_getscope = _rpythonic_function_(		"pthread_attr_getscope", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__scope",		ctypes.POINTER(ctypes.c_int)),] )

pthread_attr_setscope = _rpythonic_function_(		"pthread_attr_setscope", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__scope",		ctypes.c_int),] )

pthread_attr_getstackaddr = _rpythonic_function_(		"pthread_attr_getstackaddr", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__stackaddr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

pthread_attr_setstackaddr = _rpythonic_function_(		"pthread_attr_setstackaddr", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__stackaddr",		ctypes.POINTER(ctypes.c_void_p)),] )

pthread_attr_getstacksize = _rpythonic_function_(		"pthread_attr_getstacksize", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__stacksize",		ctypes.POINTER(ctypes.c_uint64)),] )

pthread_attr_setstacksize = _rpythonic_function_(		"pthread_attr_setstacksize", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__stacksize",		ctypes.c_uint64),] )

pthread_attr_getstack = _rpythonic_function_(		"pthread_attr_getstack", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__stackaddr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("__stacksize",		ctypes.POINTER(ctypes.c_uint64)),] )

pthread_attr_setstack = _rpythonic_function_(		"pthread_attr_setstack", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__stackaddr",		ctypes.POINTER(ctypes.c_void_p)),
	("__stacksize",		ctypes.c_uint64),] )

pthread_setschedparam = _rpythonic_function_(		"pthread_setschedparam", ctypes.c_int, [
	("__target_thread",		ctypes.c_uint64),
	("__policy",		ctypes.c_int),
	("__param",		ctypes.POINTER(sched_param)),] )

pthread_getschedparam = _rpythonic_function_(		"pthread_getschedparam", ctypes.c_int, [
	("__target_thread",		ctypes.c_uint64),
	("__policy",		ctypes.POINTER(ctypes.c_int)),
	("__param",		ctypes.POINTER(sched_param)),] )

pthread_setschedprio = _rpythonic_function_(		"pthread_setschedprio", ctypes.c_int, [
	("__target_thread",		ctypes.c_uint64),
	("__prio",		ctypes.c_int),] )

pthread_once = _rpythonic_function_(		"pthread_once", ctypes.c_int, [
	("__once_control",		ctypes.POINTER(ctypes.c_int)),
	("__init_routine",		ctypes.c_void_p),] )

pthread_setcancelstate = _rpythonic_function_(		"pthread_setcancelstate", ctypes.c_int, [
	("__state",		ctypes.c_int),
	("__oldstate",		ctypes.POINTER(ctypes.c_int)),] )

pthread_setcanceltype = _rpythonic_function_(		"pthread_setcanceltype", ctypes.c_int, [
	("__type",		ctypes.c_int),
	("__oldtype",		ctypes.POINTER(ctypes.c_int)),] )

pthread_cancel = _rpythonic_function_(		"pthread_cancel", ctypes.c_int, [
	("__th",		ctypes.c_uint64),] )

pthread_testcancel = _rpythonic_function_(		"pthread_testcancel", ctypes.c_void_p, [] )

pthread_mutex_init = _rpythonic_function_(		"pthread_mutex_init", ctypes.c_int, [
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),
	("__mutexattr",		ctypes.POINTER(pthread_mutexattr_t)),] )

pthread_mutex_destroy = _rpythonic_function_(		"pthread_mutex_destroy", ctypes.c_int, [
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),] )

pthread_mutex_trylock = _rpythonic_function_(		"pthread_mutex_trylock", ctypes.c_int, [
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),] )

pthread_mutex_lock = _rpythonic_function_(		"pthread_mutex_lock", ctypes.c_int, [
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),] )

pthread_mutex_timedlock = _rpythonic_function_(		"pthread_mutex_timedlock", ctypes.c_int, [
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),
	("__abstime",		ctypes.POINTER(timespec)),] )

pthread_mutex_unlock = _rpythonic_function_(		"pthread_mutex_unlock", ctypes.c_int, [
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),] )

pthread_mutex_getprioceiling = _rpythonic_function_(		"pthread_mutex_getprioceiling", ctypes.c_int, [
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),
	("__prioceiling",		ctypes.POINTER(ctypes.c_int)),] )

pthread_mutex_setprioceiling = _rpythonic_function_(		"pthread_mutex_setprioceiling", ctypes.c_int, [
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),
	("__prioceiling",		ctypes.c_int),
	("__old_ceiling",		ctypes.POINTER(ctypes.c_int)),] )

pthread_mutex_consistent = _rpythonic_function_(		"pthread_mutex_consistent", ctypes.c_int, [
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),] )

pthread_mutexattr_init = _rpythonic_function_(		"pthread_mutexattr_init", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),] )

pthread_mutexattr_destroy = _rpythonic_function_(		"pthread_mutexattr_destroy", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),] )

pthread_mutexattr_getpshared = _rpythonic_function_(		"pthread_mutexattr_getpshared", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__pshared",		ctypes.POINTER(ctypes.c_int)),] )

pthread_mutexattr_setpshared = _rpythonic_function_(		"pthread_mutexattr_setpshared", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__pshared",		ctypes.c_int),] )

pthread_mutexattr_gettype = _rpythonic_function_(		"pthread_mutexattr_gettype", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__kind",		ctypes.POINTER(ctypes.c_int)),] )

pthread_mutexattr_settype = _rpythonic_function_(		"pthread_mutexattr_settype", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__kind",		ctypes.c_int),] )

pthread_mutexattr_getprotocol = _rpythonic_function_(		"pthread_mutexattr_getprotocol", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__protocol",		ctypes.POINTER(ctypes.c_int)),] )

pthread_mutexattr_setprotocol = _rpythonic_function_(		"pthread_mutexattr_setprotocol", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__protocol",		ctypes.c_int),] )

pthread_mutexattr_getprioceiling = _rpythonic_function_(		"pthread_mutexattr_getprioceiling", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__prioceiling",		ctypes.POINTER(ctypes.c_int)),] )

pthread_mutexattr_setprioceiling = _rpythonic_function_(		"pthread_mutexattr_setprioceiling", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__prioceiling",		ctypes.c_int),] )

pthread_mutexattr_getrobust = _rpythonic_function_(		"pthread_mutexattr_getrobust", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__robustness",		ctypes.POINTER(ctypes.c_int)),] )

pthread_mutexattr_setrobust = _rpythonic_function_(		"pthread_mutexattr_setrobust", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__robustness",		ctypes.c_int),] )

pthread_rwlock_init = _rpythonic_function_(		"pthread_rwlock_init", ctypes.c_int, [
	("__rwlock",		ctypes.POINTER(pthread_rwlock_t)),
	("__attr",		ctypes.POINTER(pthread_rwlockattr_t)),] )

pthread_rwlock_destroy = _rpythonic_function_(		"pthread_rwlock_destroy", ctypes.c_int, [
	("__rwlock",		ctypes.POINTER(pthread_rwlock_t)),] )

pthread_rwlock_rdlock = _rpythonic_function_(		"pthread_rwlock_rdlock", ctypes.c_int, [
	("__rwlock",		ctypes.POINTER(pthread_rwlock_t)),] )

pthread_rwlock_tryrdlock = _rpythonic_function_(		"pthread_rwlock_tryrdlock", ctypes.c_int, [
	("__rwlock",		ctypes.POINTER(pthread_rwlock_t)),] )

pthread_rwlock_timedrdlock = _rpythonic_function_(		"pthread_rwlock_timedrdlock", ctypes.c_int, [
	("__rwlock",		ctypes.POINTER(pthread_rwlock_t)),
	("__abstime",		ctypes.POINTER(timespec)),] )

pthread_rwlock_wrlock = _rpythonic_function_(		"pthread_rwlock_wrlock", ctypes.c_int, [
	("__rwlock",		ctypes.POINTER(pthread_rwlock_t)),] )

pthread_rwlock_trywrlock = _rpythonic_function_(		"pthread_rwlock_trywrlock", ctypes.c_int, [
	("__rwlock",		ctypes.POINTER(pthread_rwlock_t)),] )

pthread_rwlock_timedwrlock = _rpythonic_function_(		"pthread_rwlock_timedwrlock", ctypes.c_int, [
	("__rwlock",		ctypes.POINTER(pthread_rwlock_t)),
	("__abstime",		ctypes.POINTER(timespec)),] )

pthread_rwlock_unlock = _rpythonic_function_(		"pthread_rwlock_unlock", ctypes.c_int, [
	("__rwlock",		ctypes.POINTER(pthread_rwlock_t)),] )

pthread_rwlockattr_init = _rpythonic_function_(		"pthread_rwlockattr_init", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_rwlockattr_t)),] )

pthread_rwlockattr_destroy = _rpythonic_function_(		"pthread_rwlockattr_destroy", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_rwlockattr_t)),] )

pthread_rwlockattr_getpshared = _rpythonic_function_(		"pthread_rwlockattr_getpshared", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_rwlockattr_t)),
	("__pshared",		ctypes.POINTER(ctypes.c_int)),] )

pthread_rwlockattr_setpshared = _rpythonic_function_(		"pthread_rwlockattr_setpshared", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_rwlockattr_t)),
	("__pshared",		ctypes.c_int),] )

pthread_rwlockattr_getkind_np = _rpythonic_function_(		"pthread_rwlockattr_getkind_np", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_rwlockattr_t)),
	("__pref",		ctypes.POINTER(ctypes.c_int)),] )

pthread_rwlockattr_setkind_np = _rpythonic_function_(		"pthread_rwlockattr_setkind_np", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_rwlockattr_t)),
	("__pref",		ctypes.c_int),] )

pthread_cond_init = _rpythonic_function_(		"pthread_cond_init", ctypes.c_int, [
	("__cond",		ctypes.POINTER(pthread_cond_t)),
	("__cond_attr",		ctypes.POINTER(pthread_condattr_t)),] )

pthread_cond_destroy = _rpythonic_function_(		"pthread_cond_destroy", ctypes.c_int, [
	("__cond",		ctypes.POINTER(pthread_cond_t)),] )

pthread_cond_signal = _rpythonic_function_(		"pthread_cond_signal", ctypes.c_int, [
	("__cond",		ctypes.POINTER(pthread_cond_t)),] )

pthread_cond_broadcast = _rpythonic_function_(		"pthread_cond_broadcast", ctypes.c_int, [
	("__cond",		ctypes.POINTER(pthread_cond_t)),] )

pthread_cond_wait = _rpythonic_function_(		"pthread_cond_wait", ctypes.c_int, [
	("__cond",		ctypes.POINTER(pthread_cond_t)),
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),] )

pthread_cond_timedwait = _rpythonic_function_(		"pthread_cond_timedwait", ctypes.c_int, [
	("__cond",		ctypes.POINTER(pthread_cond_t)),
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),
	("__abstime",		ctypes.POINTER(timespec)),] )

pthread_condattr_init = _rpythonic_function_(		"pthread_condattr_init", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_condattr_t)),] )

pthread_condattr_destroy = _rpythonic_function_(		"pthread_condattr_destroy", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_condattr_t)),] )

pthread_condattr_getpshared = _rpythonic_function_(		"pthread_condattr_getpshared", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_condattr_t)),
	("__pshared",		ctypes.POINTER(ctypes.c_int)),] )

pthread_condattr_setpshared = _rpythonic_function_(		"pthread_condattr_setpshared", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_condattr_t)),
	("__pshared",		ctypes.c_int),] )

pthread_condattr_getclock = _rpythonic_function_(		"pthread_condattr_getclock", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_condattr_t)),
	("__clock_id",		ctypes.POINTER(ctypes.c_int)),] )

pthread_condattr_setclock = _rpythonic_function_(		"pthread_condattr_setclock", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_condattr_t)),
	("__clock_id",		ctypes.c_int),] )

pthread_spin_init = _rpythonic_function_(		"pthread_spin_init", ctypes.c_int, [
	("__lock",		ctypes.POINTER(ctypes.c_int)),
	("__pshared",		ctypes.c_int),] )

pthread_spin_destroy = _rpythonic_function_(		"pthread_spin_destroy", ctypes.c_int, [
	("__lock",		ctypes.POINTER(ctypes.c_int)),] )

pthread_spin_lock = _rpythonic_function_(		"pthread_spin_lock", ctypes.c_int, [
	("__lock",		ctypes.POINTER(ctypes.c_int)),] )

pthread_spin_trylock = _rpythonic_function_(		"pthread_spin_trylock", ctypes.c_int, [
	("__lock",		ctypes.POINTER(ctypes.c_int)),] )

pthread_spin_unlock = _rpythonic_function_(		"pthread_spin_unlock", ctypes.c_int, [
	("__lock",		ctypes.POINTER(ctypes.c_int)),] )

pthread_barrier_init = _rpythonic_function_(		"pthread_barrier_init", ctypes.c_int, [
	("__barrier",		ctypes.POINTER(pthread_barrier_t)),
	("__attr",		ctypes.POINTER(pthread_barrierattr_t)),
	("__count",		ctypes.c_uint),] )

pthread_barrier_destroy = _rpythonic_function_(		"pthread_barrier_destroy", ctypes.c_int, [
	("__barrier",		ctypes.POINTER(pthread_barrier_t)),] )

pthread_barrier_wait = _rpythonic_function_(		"pthread_barrier_wait", ctypes.c_int, [
	("__barrier",		ctypes.POINTER(pthread_barrier_t)),] )

pthread_barrierattr_init = _rpythonic_function_(		"pthread_barrierattr_init", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_barrierattr_t)),] )

pthread_barrierattr_destroy = _rpythonic_function_(		"pthread_barrierattr_destroy", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_barrierattr_t)),] )

pthread_barrierattr_getpshared = _rpythonic_function_(		"pthread_barrierattr_getpshared", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_barrierattr_t)),
	("__pshared",		ctypes.POINTER(ctypes.c_int)),] )

pthread_barrierattr_setpshared = _rpythonic_function_(		"pthread_barrierattr_setpshared", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_barrierattr_t)),
	("__pshared",		ctypes.c_int),] )

pthread_key_create = _rpythonic_function_(		"pthread_key_create", ctypes.c_int, [
	("__key",		ctypes.POINTER(ctypes.c_uint)),
	("__destr_function",		ctypes.c_void_p),] )

pthread_key_delete = _rpythonic_function_(		"pthread_key_delete", ctypes.c_int, [
	("__key",		ctypes.c_uint),] )

pthread_getspecific = _rpythonic_function_(		"pthread_getspecific", ctypes.POINTER(ctypes.c_void_p), [
	("__key",		ctypes.c_uint),] )

pthread_setspecific = _rpythonic_function_(		"pthread_setspecific", ctypes.c_int, [
	("__key",		ctypes.c_uint),
	("__pointer",		ctypes.POINTER(ctypes.c_void_p)),] )

pthread_getcpuclockid = _rpythonic_function_(		"pthread_getcpuclockid", ctypes.c_int, [
	("__thread_id",		ctypes.c_uint64),
	("__clock_id",		ctypes.POINTER(ctypes.c_int)),] )

pthread_atfork = _rpythonic_function_(		"pthread_atfork", ctypes.c_int, [
	("__prepare",		ctypes.c_void_p),
	("__parent",		ctypes.c_void_p),
	("__child",		ctypes.c_void_p),] )

rfbKbdAddEventProcPtr = _rpythonic_function_(		"rfbKbdAddEventProcPtr", ctypes.c_void_p, [
	("down",		ctypes.c_int8),
	("keySym",		ctypes.c_uint32),
	("cl",		ctypes.POINTER(_rfbClientRec)),] )

rfbKbdReleaseAllKeysProcPtr = _rpythonic_function_(		"rfbKbdReleaseAllKeysProcPtr", ctypes.c_void_p, [
	("cl",		ctypes.POINTER(_rfbClientRec)),] )

rfbPtrAddEventProcPtr = _rpythonic_function_(		"rfbPtrAddEventProcPtr", ctypes.c_void_p, [
	("buttonMask",		ctypes.c_int),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("cl",		ctypes.POINTER(_rfbClientRec)),] )

rfbSetXCutTextProcPtr = _rpythonic_function_(		"rfbSetXCutTextProcPtr", ctypes.c_void_p, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),
	("cl",		ctypes.POINTER(_rfbClientRec)),] )

rfbGetCursorProcPtr = _rpythonic_function_(		"rfbGetCursorProcPtr", ctypes.POINTER(rfbCursor), [
	("pScreen",		ctypes.POINTER(_rfbClientRec)),] )

rfbSetTranslateFunctionProcPtr = _rpythonic_function_(		"rfbSetTranslateFunctionProcPtr", ctypes.c_int8, [
	("cl",		ctypes.POINTER(_rfbClientRec)),] )

rfbPasswordCheckProcPtr = _rpythonic_function_(		"rfbPasswordCheckProcPtr", ctypes.c_int8, [
	("cl",		ctypes.POINTER(_rfbClientRec)),
	("encryptedPassWord",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

rfbNewClientHookPtr = _rpythonic_function_(		"rfbNewClientHookPtr", ctypes.c_int, [
	("cl",		ctypes.POINTER(_rfbClientRec)),] )

rfbDisplayHookPtr = _rpythonic_function_(		"rfbDisplayHookPtr", ctypes.c_void_p, [
	("cl",		ctypes.POINTER(_rfbClientRec)),] )

rfbDisplayFinishedHookPtr = _rpythonic_function_(		"rfbDisplayFinishedHookPtr", ctypes.c_void_p, [
	("cl",		ctypes.POINTER(_rfbClientRec)),
	("result",		ctypes.c_int),] )

rfbGetKeyboardLedStateHookPtr = _rpythonic_function_(		"rfbGetKeyboardLedStateHookPtr", ctypes.c_int, [
	("screen",		ctypes.POINTER(_rfbScreenInfo)),] )

rfbXvpHookPtr = _rpythonic_function_(		"rfbXvpHookPtr", ctypes.c_int8, [
	("cl",		ctypes.POINTER(_rfbClientRec)),
	("none",		ctypes.c_uint8),
	("none",		ctypes.c_uint8),] )

rfbSetSingleWindowProcPtr = _rpythonic_function_(		"rfbSetSingleWindowProcPtr", ctypes.c_void_p, [
	("cl",		ctypes.POINTER(_rfbClientRec)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

rfbSetServerInputProcPtr = _rpythonic_function_(		"rfbSetServerInputProcPtr", ctypes.c_void_p, [
	("cl",		ctypes.POINTER(_rfbClientRec)),
	("status",		ctypes.c_int),] )

rfbFileTransferPermitted = _rpythonic_function_(		"rfbFileTransferPermitted", ctypes.c_int, [
	("cl",		ctypes.POINTER(_rfbClientRec)),] )

rfbSetTextChat = _rpythonic_function_(		"rfbSetTextChat", ctypes.c_void_p, [
	("cl",		ctypes.POINTER(_rfbClientRec)),
	("length",		ctypes.c_int),
	("string",		ctypes.POINTER(ctypes.c_char)),] )

handler = _rpythonic_function_(		"handler", ctypes.c_void_p, [
	("cl",		ctypes.POINTER(_rfbClientRec)),] )

newClient = _rpythonic_function_(		"newClient", ctypes.c_int8, [
	("client",		ctypes.POINTER(_rfbClientRec)),
	("data",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

init = _rpythonic_function_(		"init", ctypes.c_int8, [
	("client",		ctypes.POINTER(_rfbClientRec)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

enablePseudoEncoding = _rpythonic_function_(		"enablePseudoEncoding", ctypes.c_int8, [
	("client",		ctypes.POINTER(_rfbClientRec)),
	("data",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("encodingNumber",		ctypes.c_int),] )

handleMessage = _rpythonic_function_(		"handleMessage", ctypes.c_int8, [
	("client",		ctypes.POINTER(_rfbClientRec)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("message",		ctypes.POINTER(rfbClientToServerMsg)),] )

usage = _rpythonic_function_(		"usage", ctypes.c_void_p, [] )

processArgument = _rpythonic_function_(		"processArgument", ctypes.c_int, [
	("argc",		ctypes.c_int),
	("argv",		ctypes.POINTER(ctypes.c_char)),] )

rfbTranslateFnType = _rpythonic_function_(		"rfbTranslateFnType", ctypes.c_void_p, [
	("table",		ctypes.POINTER(ctypes.c_char)),
	("C_in",		ctypes.POINTER(rfbPixelFormat)),
	("out",		ctypes.POINTER(rfbPixelFormat)),
	("iptr",		ctypes.POINTER(ctypes.c_char)),
	("optr",		ctypes.POINTER(ctypes.c_char)),
	("bytesBetweenInputLines",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

ClientGoneHookPtr = _rpythonic_function_(		"ClientGoneHookPtr", ctypes.c_void_p, [
	("cl",		ctypes.POINTER(_rfbClientRec)),] )

rfbInitSockets = _rpythonic_function_(		"rfbInitSockets", ctypes.c_void_p, [
	("rfbScreen",		ctypes.POINTER(_rfbScreenInfo)),] )

rfbShutdownSockets = _rpythonic_function_(		"rfbShutdownSockets", ctypes.c_void_p, [
	("rfbScreen",		ctypes.POINTER(_rfbScreenInfo)),] )

rfbDisconnectUDPSock = _rpythonic_function_(		"rfbDisconnectUDPSock", ctypes.c_void_p, [
	("rfbScreen",		ctypes.POINTER(_rfbScreenInfo)),] )

rfbCloseClient = _rpythonic_function_(		"rfbCloseClient", ctypes.c_void_p, [
	("cl",		ctypes.POINTER(_rfbClientRec)),] )

rfbReadExact = _rpythonic_function_(		"rfbReadExact", ctypes.c_int, [
	("cl",		ctypes.POINTER(_rfbClientRec)),
	("buf",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

rfbReadExactTimeout = _rpythonic_function_(		"rfbReadExactTimeout", ctypes.c_int, [
	("cl",		ctypes.POINTER(_rfbClientRec)),
	("buf",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),
	("timeout",		ctypes.c_int),] )

rfbWriteExact = _rpythonic_function_(		"rfbWriteExact", ctypes.c_int, [
	("cl",		ctypes.POINTER(_rfbClientRec)),
	("buf",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

rfbCheckFds = _rpythonic_function_(		"rfbCheckFds", ctypes.c_int, [
	("rfbScreen",		ctypes.POINTER(_rfbScreenInfo)),
	("usec",		ctypes.c_long),] )

rfbConnect = _rpythonic_function_(		"rfbConnect", ctypes.c_int, [
	("rfbScreen",		ctypes.POINTER(_rfbScreenInfo)),
	("host",		ctypes.POINTER(ctypes.c_char)),
	("port",		ctypes.c_int),] )

rfbConnectToTcpAddr = _rpythonic_function_(		"rfbConnectToTcpAddr", ctypes.c_int, [
	("host",		ctypes.POINTER(ctypes.c_char)),
	("port",		ctypes.c_int),] )

rfbListenOnTCPPort = _rpythonic_function_(		"rfbListenOnTCPPort", ctypes.c_int, [
	("port",		ctypes.c_int),
	("iface",		ctypes.c_uint32),] )

rfbListenOnUDPPort = _rpythonic_function_(		"rfbListenOnUDPPort", ctypes.c_int, [
	("port",		ctypes.c_int),
	("iface",		ctypes.c_uint32),] )

rfbStringToAddr = _rpythonic_function_(		"rfbStringToAddr", ctypes.c_int, [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("addr",		ctypes.POINTER(ctypes.c_uint32)),] )

rfbSetNonBlocking = _rpythonic_function_(		"rfbSetNonBlocking", ctypes.c_int8, [
	("sock",		ctypes.c_int),] )

rfbClientListInit = _rpythonic_function_(		"rfbClientListInit", ctypes.c_void_p, [
	("rfbScreen",		ctypes.POINTER(_rfbScreenInfo)),] )

rfbGetClientIterator = _rpythonic_function_(		"rfbGetClientIterator", ctypes.POINTER(rfbClientIterator), [
	("rfbScreen",		ctypes.POINTER(_rfbScreenInfo)),] )

rfbClientIteratorNext = _rpythonic_function_(		"rfbClientIteratorNext", ctypes.POINTER(_rfbClientRec), [
	("iterator",		ctypes.POINTER(rfbClientIterator)),] )

rfbReleaseClientIterator = _rpythonic_function_(		"rfbReleaseClientIterator", ctypes.c_void_p, [
	("iterator",		ctypes.POINTER(rfbClientIterator)),] )

rfbIncrClientRef = _rpythonic_function_(		"rfbIncrClientRef", ctypes.c_void_p, [
	("cl",		ctypes.POINTER(_rfbClientRec)),] )

rfbDecrClientRef = _rpythonic_function_(		"rfbDecrClientRef", ctypes.c_void_p, [
	("cl",		ctypes.POINTER(_rfbClientRec)),] )

rfbNewClientConnection = _rpythonic_function_(		"rfbNewClientConnection", ctypes.c_void_p, [
	("rfbScreen",		ctypes.POINTER(_rfbScreenInfo)),
	("sock",		ctypes.c_int),] )

rfbNewClient = _rpythonic_function_(		"rfbNewClient", ctypes.POINTER(_rfbClientRec), [
	("rfbScreen",		ctypes.POINTER(_rfbScreenInfo)),
	("sock",		ctypes.c_int),] )

rfbNewUDPClient = _rpythonic_function_(		"rfbNewUDPClient", ctypes.POINTER(_rfbClientRec), [
	("rfbScreen",		ctypes.POINTER(_rfbScreenInfo)),] )

rfbReverseConnection = _rpythonic_function_(		"rfbReverseConnection", ctypes.POINTER(_rfbClientRec), [
	("rfbScreen",		ctypes.POINTER(_rfbScreenInfo)),
	("host",		ctypes.POINTER(ctypes.c_char)),
	("port",		ctypes.c_int),] )

rfbClientConnectionGone = _rpythonic_function_(		"rfbClientConnectionGone", ctypes.c_void_p, [
	("cl",		ctypes.POINTER(_rfbClientRec)),] )

rfbProcessClientMessage = _rpythonic_function_(		"rfbProcessClientMessage", ctypes.c_void_p, [
	("cl",		ctypes.POINTER(_rfbClientRec)),] )

rfbClientConnFailed = _rpythonic_function_(		"rfbClientConnFailed", ctypes.c_void_p, [
	("cl",		ctypes.POINTER(_rfbClientRec)),
	("reason",		ctypes.POINTER(ctypes.c_char)),] )

rfbNewUDPConnection = _rpythonic_function_(		"rfbNewUDPConnection", ctypes.c_void_p, [
	("rfbScreen",		ctypes.POINTER(_rfbScreenInfo)),
	("sock",		ctypes.c_int),] )

rfbProcessUDPInput = _rpythonic_function_(		"rfbProcessUDPInput", ctypes.c_void_p, [
	("rfbScreen",		ctypes.POINTER(_rfbScreenInfo)),] )

rfbSendFramebufferUpdate = _rpythonic_function_(		"rfbSendFramebufferUpdate", ctypes.c_int8, [
	("cl",		ctypes.POINTER(_rfbClientRec)),
	("updateRegion",		ctypes.POINTER(sraRegion)),] )

rfbSendRectEncodingRaw = _rpythonic_function_(		"rfbSendRectEncodingRaw", ctypes.c_int8, [
	("cl",		ctypes.POINTER(_rfbClientRec)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("w",		ctypes.c_int),
	("h",		ctypes.c_int),] )

rfbSendUpdateBuf = _rpythonic_function_(		"rfbSendUpdateBuf", ctypes.c_int8, [
	("cl",		ctypes.POINTER(_rfbClientRec)),] )

rfbSendServerCutText = _rpythonic_function_(		"rfbSendServerCutText", ctypes.c_void_p, [
	("rfbScreen",		ctypes.POINTER(_rfbScreenInfo)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

rfbSendCopyRegion = _rpythonic_function_(		"rfbSendCopyRegion", ctypes.c_int8, [
	("cl",		ctypes.POINTER(_rfbClientRec)),
	("reg",		ctypes.POINTER(sraRegion)),
	("dx",		ctypes.c_int),
	("dy",		ctypes.c_int),] )

rfbSendLastRectMarker = _rpythonic_function_(		"rfbSendLastRectMarker", ctypes.c_int8, [
	("cl",		ctypes.POINTER(_rfbClientRec)),] )

rfbSendNewFBSize = _rpythonic_function_(		"rfbSendNewFBSize", ctypes.c_int8, [
	("cl",		ctypes.POINTER(_rfbClientRec)),
	("w",		ctypes.c_int),
	("h",		ctypes.c_int),] )

rfbSendSetColourMapEntries = _rpythonic_function_(		"rfbSendSetColourMapEntries", ctypes.c_int8, [
	("cl",		ctypes.POINTER(_rfbClientRec)),
	("firstColour",		ctypes.c_int),
	("nColours",		ctypes.c_int),] )

rfbSendBell = _rpythonic_function_(		"rfbSendBell", ctypes.c_void_p, [
	("rfbScreen",		ctypes.POINTER(_rfbScreenInfo)),] )

rfbProcessFileTransferReadBuffer = _rpythonic_function_(		"rfbProcessFileTransferReadBuffer", ctypes.POINTER(ctypes.c_char), [
	("cl",		ctypes.POINTER(_rfbClientRec)),
	("length",		ctypes.c_uint32),] )

rfbSendFileTransferChunk = _rpythonic_function_(		"rfbSendFileTransferChunk", ctypes.c_int8, [
	("cl",		ctypes.POINTER(_rfbClientRec)),] )

rfbSendDirContent = _rpythonic_function_(		"rfbSendDirContent", ctypes.c_int8, [
	("cl",		ctypes.POINTER(_rfbClientRec)),
	("length",		ctypes.c_int),
	("buffer",		ctypes.POINTER(ctypes.c_char)),] )

rfbSendFileTransferMessage = _rpythonic_function_(		"rfbSendFileTransferMessage", ctypes.c_int8, [
	("cl",		ctypes.POINTER(_rfbClientRec)),
	("contentType",		ctypes.c_uint8),
	("contentParam",		ctypes.c_uint8),
	("size",		ctypes.c_uint32),
	("length",		ctypes.c_uint32),
	("buffer",		ctypes.POINTER(ctypes.c_char)),] )

rfbProcessFileTransfer = _rpythonic_function_(		"rfbProcessFileTransfer", ctypes.c_int8, [
	("cl",		ctypes.POINTER(_rfbClientRec)),
	("contentType",		ctypes.c_uint8),
	("contentParam",		ctypes.c_uint8),
	("size",		ctypes.c_uint32),
	("length",		ctypes.c_uint32),] )

rfbGotXCutText = _rpythonic_function_(		"rfbGotXCutText", ctypes.c_void_p, [
	("rfbScreen",		ctypes.POINTER(_rfbScreenInfo)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

rfbTranslateNone = _rpythonic_function_(		"rfbTranslateNone", ctypes.c_void_p, [
	("table",		ctypes.POINTER(ctypes.c_char)),
	("C_in",		ctypes.POINTER(rfbPixelFormat)),
	("out",		ctypes.POINTER(rfbPixelFormat)),
	("iptr",		ctypes.POINTER(ctypes.c_char)),
	("optr",		ctypes.POINTER(ctypes.c_char)),
	("bytesBetweenInputLines",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

rfbSetTranslateFunction = _rpythonic_function_(		"rfbSetTranslateFunction", ctypes.c_int8, [
	("cl",		ctypes.POINTER(_rfbClientRec)),] )

rfbSetClientColourMap = _rpythonic_function_(		"rfbSetClientColourMap", ctypes.c_int8, [
	("cl",		ctypes.POINTER(_rfbClientRec)),
	("firstColour",		ctypes.c_int),
	("nColours",		ctypes.c_int),] )

rfbSetClientColourMaps = _rpythonic_function_(		"rfbSetClientColourMaps", ctypes.c_void_p, [
	("rfbScreen",		ctypes.POINTER(_rfbScreenInfo)),
	("firstColour",		ctypes.c_int),
	("nColours",		ctypes.c_int),] )

rfbHttpInitSockets = _rpythonic_function_(		"rfbHttpInitSockets", ctypes.c_void_p, [
	("rfbScreen",		ctypes.POINTER(_rfbScreenInfo)),] )

rfbHttpShutdownSockets = _rpythonic_function_(		"rfbHttpShutdownSockets", ctypes.c_void_p, [
	("rfbScreen",		ctypes.POINTER(_rfbScreenInfo)),] )

rfbHttpCheckFds = _rpythonic_function_(		"rfbHttpCheckFds", ctypes.c_void_p, [
	("rfbScreen",		ctypes.POINTER(_rfbScreenInfo)),] )

rfbAuthNewClient = _rpythonic_function_(		"rfbAuthNewClient", ctypes.c_void_p, [
	("cl",		ctypes.POINTER(_rfbClientRec)),] )

rfbProcessClientSecurityType = _rpythonic_function_(		"rfbProcessClientSecurityType", ctypes.c_void_p, [
	("cl",		ctypes.POINTER(_rfbClientRec)),] )

rfbAuthProcessClientMessage = _rpythonic_function_(		"rfbAuthProcessClientMessage", ctypes.c_void_p, [
	("cl",		ctypes.POINTER(_rfbClientRec)),] )

rfbRegisterSecurityHandler = _rpythonic_function_(		"rfbRegisterSecurityHandler", ctypes.c_void_p, [
	("handler",		ctypes.POINTER(_rfbSecurity)),] )

rfbUnregisterSecurityHandler = _rpythonic_function_(		"rfbUnregisterSecurityHandler", ctypes.c_void_p, [
	("handler",		ctypes.POINTER(_rfbSecurity)),] )

rfbSendRectEncodingRRE = _rpythonic_function_(		"rfbSendRectEncodingRRE", ctypes.c_int8, [
	("cl",		ctypes.POINTER(_rfbClientRec)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("w",		ctypes.c_int),
	("h",		ctypes.c_int),] )

rfbSendRectEncodingCoRRE = _rpythonic_function_(		"rfbSendRectEncodingCoRRE", ctypes.c_int8, [
	("cl",		ctypes.POINTER(_rfbClientRec)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("w",		ctypes.c_int),
	("h",		ctypes.c_int),] )

rfbSendRectEncodingHextile = _rpythonic_function_(		"rfbSendRectEncodingHextile", ctypes.c_int8, [
	("cl",		ctypes.POINTER(_rfbClientRec)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("w",		ctypes.c_int),
	("h",		ctypes.c_int),] )

rfbSendRectEncodingUltra = _rpythonic_function_(		"rfbSendRectEncodingUltra", ctypes.c_int8, [
	("cl",		ctypes.POINTER(_rfbClientRec)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("w",		ctypes.c_int),
	("h",		ctypes.c_int),] )

rfbSendRectEncodingZlib = _rpythonic_function_(		"rfbSendRectEncodingZlib", ctypes.c_int8, [
	("cl",		ctypes.POINTER(_rfbClientRec)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("w",		ctypes.c_int),
	("h",		ctypes.c_int),] )

rfbNumCodedRectsTight = _rpythonic_function_(		"rfbNumCodedRectsTight", ctypes.c_int, [
	("cl",		ctypes.POINTER(_rfbClientRec)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("w",		ctypes.c_int),
	("h",		ctypes.c_int),] )

rfbSendRectEncodingTight = _rpythonic_function_(		"rfbSendRectEncodingTight", ctypes.c_int8, [
	("cl",		ctypes.POINTER(_rfbClientRec)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("w",		ctypes.c_int),
	("h",		ctypes.c_int),] )

rfbSendCursorShape = _rpythonic_function_(		"rfbSendCursorShape", ctypes.c_int8, [
	("cl",		ctypes.POINTER(_rfbClientRec)),] )

rfbSendCursorPos = _rpythonic_function_(		"rfbSendCursorPos", ctypes.c_int8, [
	("cl",		ctypes.POINTER(_rfbClientRec)),] )

rfbConvertLSBCursorBitmapOrMask = _rpythonic_function_(		"rfbConvertLSBCursorBitmapOrMask", ctypes.c_void_p, [
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("bitmap",		ctypes.POINTER(ctypes.c_ubyte)),] )

rfbMakeXCursor = _rpythonic_function_(		"rfbMakeXCursor", ctypes.POINTER(rfbCursor), [
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("cursorString",		ctypes.POINTER(ctypes.c_char)),
	("maskString",		ctypes.POINTER(ctypes.c_char)),] )

rfbMakeMaskForXCursor = _rpythonic_function_(		"rfbMakeMaskForXCursor", ctypes.POINTER(ctypes.c_char), [
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("cursorString",		ctypes.POINTER(ctypes.c_char)),] )

rfbMakeMaskFromAlphaSource = _rpythonic_function_(		"rfbMakeMaskFromAlphaSource", ctypes.POINTER(ctypes.c_char), [
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("alphaSource",		ctypes.POINTER(ctypes.c_ubyte)),] )

rfbMakeXCursorFromRichCursor = _rpythonic_function_(		"rfbMakeXCursorFromRichCursor", ctypes.c_void_p, [
	("rfbScreen",		ctypes.POINTER(_rfbScreenInfo)),
	("cursor",		ctypes.POINTER(rfbCursor)),] )

rfbMakeRichCursorFromXCursor = _rpythonic_function_(		"rfbMakeRichCursorFromXCursor", ctypes.c_void_p, [
	("rfbScreen",		ctypes.POINTER(_rfbScreenInfo)),
	("cursor",		ctypes.POINTER(rfbCursor)),] )

rfbFreeCursor = _rpythonic_function_(		"rfbFreeCursor", ctypes.c_void_p, [
	("cursor",		ctypes.POINTER(rfbCursor)),] )

rfbSetCursor = _rpythonic_function_(		"rfbSetCursor", ctypes.c_void_p, [
	("rfbScreen",		ctypes.POINTER(_rfbScreenInfo)),
	("c",		ctypes.POINTER(rfbCursor)),] )

rfbDefaultPtrAddEvent = _rpythonic_function_(		"rfbDefaultPtrAddEvent", ctypes.c_void_p, [
	("buttonMask",		ctypes.c_int),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("cl",		ctypes.POINTER(_rfbClientRec)),] )

rfbSendRectEncodingZRLE = _rpythonic_function_(		"rfbSendRectEncodingZRLE", ctypes.c_int8, [
	("cl",		ctypes.POINTER(_rfbClientRec)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("w",		ctypes.c_int),
	("h",		ctypes.c_int),] )

rfbResetStats = _rpythonic_function_(		"rfbResetStats", ctypes.c_void_p, [
	("cl",		ctypes.POINTER(_rfbClientRec)),] )

rfbPrintStats = _rpythonic_function_(		"rfbPrintStats", ctypes.c_void_p, [
	("cl",		ctypes.POINTER(_rfbClientRec)),] )

rfbDrawChar = _rpythonic_function_(		"rfbDrawChar", ctypes.c_int, [
	("rfbScreen",		ctypes.POINTER(_rfbScreenInfo)),
	("font",		ctypes.POINTER(rfbFontData)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("c",		ctypes.c_ubyte),
	("colour",		ctypes.c_uint32),] )

rfbDrawString = _rpythonic_function_(		"rfbDrawString", ctypes.c_void_p, [
	("rfbScreen",		ctypes.POINTER(_rfbScreenInfo)),
	("font",		ctypes.POINTER(rfbFontData)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("colour",		ctypes.c_uint32),] )

rfbDrawCharWithClip = _rpythonic_function_(		"rfbDrawCharWithClip", ctypes.c_int, [
	("rfbScreen",		ctypes.POINTER(_rfbScreenInfo)),
	("font",		ctypes.POINTER(rfbFontData)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("c",		ctypes.c_ubyte),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_int),
	("y2",		ctypes.c_int),
	("colour",		ctypes.c_uint32),
	("backColour",		ctypes.c_uint32),] )

rfbDrawStringWithClip = _rpythonic_function_(		"rfbDrawStringWithClip", ctypes.c_void_p, [
	("rfbScreen",		ctypes.POINTER(_rfbScreenInfo)),
	("font",		ctypes.POINTER(rfbFontData)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_int),
	("y2",		ctypes.c_int),
	("colour",		ctypes.c_uint32),
	("backColour",		ctypes.c_uint32),] )

rfbWidthOfString = _rpythonic_function_(		"rfbWidthOfString", ctypes.c_int, [
	("font",		ctypes.POINTER(rfbFontData)),
	("string",		ctypes.POINTER(ctypes.c_char)),] )

rfbWidthOfChar = _rpythonic_function_(		"rfbWidthOfChar", ctypes.c_int, [
	("font",		ctypes.POINTER(rfbFontData)),
	("c",		ctypes.c_ubyte),] )

rfbFontBBox = _rpythonic_function_(		"rfbFontBBox", ctypes.c_void_p, [
	("font",		ctypes.POINTER(rfbFontData)),
	("c",		ctypes.c_ubyte),
	("x1",		ctypes.POINTER(ctypes.c_int)),
	("y1",		ctypes.POINTER(ctypes.c_int)),
	("x2",		ctypes.POINTER(ctypes.c_int)),
	("y2",		ctypes.POINTER(ctypes.c_int)),] )

rfbWholeFontBBox = _rpythonic_function_(		"rfbWholeFontBBox", ctypes.c_void_p, [
	("font",		ctypes.POINTER(rfbFontData)),
	("x1",		ctypes.POINTER(ctypes.c_int)),
	("y1",		ctypes.POINTER(ctypes.c_int)),
	("x2",		ctypes.POINTER(ctypes.c_int)),
	("y2",		ctypes.POINTER(ctypes.c_int)),] )

rfbLoadConsoleFont = _rpythonic_function_(		"rfbLoadConsoleFont", ctypes.POINTER(rfbFontData), [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

rfbFreeFont = _rpythonic_function_(		"rfbFreeFont", ctypes.c_void_p, [
	("font",		ctypes.POINTER(rfbFontData)),] )

rfbFillRect = _rpythonic_function_(		"rfbFillRect", ctypes.c_void_p, [
	("s",		ctypes.POINTER(_rfbScreenInfo)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_int),
	("y2",		ctypes.c_int),
	("col",		ctypes.c_uint32),] )

rfbDrawPixel = _rpythonic_function_(		"rfbDrawPixel", ctypes.c_void_p, [
	("s",		ctypes.POINTER(_rfbScreenInfo)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("col",		ctypes.c_uint32),] )

rfbDrawLine = _rpythonic_function_(		"rfbDrawLine", ctypes.c_void_p, [
	("s",		ctypes.POINTER(_rfbScreenInfo)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_int),
	("y2",		ctypes.c_int),
	("col",		ctypes.c_uint32),] )

SelectionChangedHookPtr = _rpythonic_function_(		"SelectionChangedHookPtr", ctypes.c_void_p, [
	("_index",		ctypes.c_int),] )

rfbSelectBox = _rpythonic_function_(		"rfbSelectBox", ctypes.c_int, [
	("rfbScreen",		ctypes.POINTER(_rfbScreenInfo)),
	("font",		ctypes.POINTER(rfbFontData)),
	("C_list",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_int),
	("y2",		ctypes.c_int),
	("foreColour",		ctypes.c_uint32),
	("backColour",		ctypes.c_uint32),
	("border",		ctypes.c_int),
	("selChangedHook",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,)),] )

rfbUsage = _rpythonic_function_(		"rfbUsage", ctypes.c_void_p, [] )

rfbPurgeArguments = _rpythonic_function_(		"rfbPurgeArguments", ctypes.c_void_p, [
	("argc",		ctypes.POINTER(ctypes.c_int)),
	("position",		ctypes.POINTER(ctypes.c_int)),
	("count",		ctypes.c_int),
	("argv",		ctypes.POINTER(ctypes.c_char)),] )

rfbProcessArguments = _rpythonic_function_(		"rfbProcessArguments", ctypes.c_int8, [
	("rfbScreen",		ctypes.POINTER(_rfbScreenInfo)),
	("argc",		ctypes.POINTER(ctypes.c_int)),
	("argv",		ctypes.POINTER(ctypes.c_char)),] )

rfbProcessSizeArguments = _rpythonic_function_(		"rfbProcessSizeArguments", ctypes.c_int8, [
	("width",		ctypes.POINTER(ctypes.c_int)),
	("height",		ctypes.POINTER(ctypes.c_int)),
	("bpp",		ctypes.POINTER(ctypes.c_int)),
	("argc",		ctypes.POINTER(ctypes.c_int)),
	("argv",		ctypes.POINTER(ctypes.c_char)),] )

rfbLogEnable = _rpythonic_function_(		"rfbLogEnable", ctypes.c_void_p, [
	("enabled",		ctypes.c_int),] )

rfbLogPerror = _rpythonic_function_(		"rfbLogPerror", ctypes.c_void_p, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

rfbScheduleCopyRect = _rpythonic_function_(		"rfbScheduleCopyRect", ctypes.c_void_p, [
	("rfbScreen",		ctypes.POINTER(_rfbScreenInfo)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_int),
	("y2",		ctypes.c_int),
	("dx",		ctypes.c_int),
	("dy",		ctypes.c_int),] )

rfbScheduleCopyRegion = _rpythonic_function_(		"rfbScheduleCopyRegion", ctypes.c_void_p, [
	("rfbScreen",		ctypes.POINTER(_rfbScreenInfo)),
	("copyRegion",		ctypes.POINTER(sraRegion)),
	("dx",		ctypes.c_int),
	("dy",		ctypes.c_int),] )

rfbDoCopyRect = _rpythonic_function_(		"rfbDoCopyRect", ctypes.c_void_p, [
	("rfbScreen",		ctypes.POINTER(_rfbScreenInfo)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_int),
	("y2",		ctypes.c_int),
	("dx",		ctypes.c_int),
	("dy",		ctypes.c_int),] )

rfbDoCopyRegion = _rpythonic_function_(		"rfbDoCopyRegion", ctypes.c_void_p, [
	("rfbScreen",		ctypes.POINTER(_rfbScreenInfo)),
	("copyRegion",		ctypes.POINTER(sraRegion)),
	("dx",		ctypes.c_int),
	("dy",		ctypes.c_int),] )

rfbMarkRectAsModified = _rpythonic_function_(		"rfbMarkRectAsModified", ctypes.c_void_p, [
	("rfbScreen",		ctypes.POINTER(_rfbScreenInfo)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_int),
	("y2",		ctypes.c_int),] )

rfbMarkRegionAsModified = _rpythonic_function_(		"rfbMarkRegionAsModified", ctypes.c_void_p, [
	("rfbScreen",		ctypes.POINTER(_rfbScreenInfo)),
	("modRegion",		ctypes.POINTER(sraRegion)),] )

rfbDoNothingWithClient = _rpythonic_function_(		"rfbDoNothingWithClient", ctypes.c_void_p, [
	("cl",		ctypes.POINTER(_rfbClientRec)),] )

defaultNewClientHook = _rpythonic_function_(		"defaultNewClientHook", ctypes.c_int, [
	("cl",		ctypes.POINTER(_rfbClientRec)),] )

rfbRegisterProtocolExtension = _rpythonic_function_(		"rfbRegisterProtocolExtension", ctypes.c_void_p, [
	("extension",		ctypes.POINTER(_rfbProtocolExtension)),] )

rfbUnregisterProtocolExtension = _rpythonic_function_(		"rfbUnregisterProtocolExtension", ctypes.c_void_p, [
	("extension",		ctypes.POINTER(_rfbProtocolExtension)),] )

rfbGetExtensionIterator = _rpythonic_function_(		"rfbGetExtensionIterator", ctypes.POINTER(_rfbProtocolExtension), [] )

rfbReleaseExtensionIterator = _rpythonic_function_(		"rfbReleaseExtensionIterator", ctypes.c_void_p, [] )

rfbEnableExtension = _rpythonic_function_(		"rfbEnableExtension", ctypes.c_int8, [
	("cl",		ctypes.POINTER(_rfbClientRec)),
	("extension",		ctypes.POINTER(_rfbProtocolExtension)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

rfbDisableExtension = _rpythonic_function_(		"rfbDisableExtension", ctypes.c_int8, [
	("cl",		ctypes.POINTER(_rfbClientRec)),
	("extension",		ctypes.POINTER(_rfbProtocolExtension)),] )

rfbGetExtensionClientData = _rpythonic_function_(		"rfbGetExtensionClientData", ctypes.POINTER(ctypes.c_void_p), [
	("cl",		ctypes.POINTER(_rfbClientRec)),
	("extension",		ctypes.POINTER(_rfbProtocolExtension)),] )

rfbCheckPasswordByList = _rpythonic_function_(		"rfbCheckPasswordByList", ctypes.c_int8, [
	("cl",		ctypes.POINTER(_rfbClientRec)),
	("response",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

rfbGetScreen = _rpythonic_function_(		"rfbGetScreen", ctypes.POINTER(_rfbScreenInfo), [
	("argc",		ctypes.POINTER(ctypes.c_int)),
	("argv",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("bitsPerSample",		ctypes.c_int),
	("samplesPerPixel",		ctypes.c_int),
	("bytesPerPixel",		ctypes.c_int),] )

rfbInitServerWithPthreadsAndZRLE = _rpythonic_function_(		"rfbInitServerWithPthreadsAndZRLE", ctypes.c_void_p, [
	("rfbScreen",		ctypes.POINTER(_rfbScreenInfo)),] )

rfbShutdownServer = _rpythonic_function_(		"rfbShutdownServer", ctypes.c_void_p, [
	("rfbScreen",		ctypes.POINTER(_rfbScreenInfo)),
	("disconnectClients",		ctypes.c_int8),] )

rfbNewFramebuffer = _rpythonic_function_(		"rfbNewFramebuffer", ctypes.c_void_p, [
	("rfbScreen",		ctypes.POINTER(_rfbScreenInfo)),
	("framebuffer",		ctypes.POINTER(ctypes.c_char)),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("bitsPerSample",		ctypes.c_int),
	("samplesPerPixel",		ctypes.c_int),
	("bytesPerPixel",		ctypes.c_int),] )

rfbScreenCleanup = _rpythonic_function_(		"rfbScreenCleanup", ctypes.c_void_p, [
	("screenInfo",		ctypes.POINTER(_rfbScreenInfo)),] )

rfbStartOnHoldClient = _rpythonic_function_(		"rfbStartOnHoldClient", ctypes.c_void_p, [
	("cl",		ctypes.POINTER(_rfbClientRec)),] )

rfbRefuseOnHoldClient = _rpythonic_function_(		"rfbRefuseOnHoldClient", ctypes.c_void_p, [
	("cl",		ctypes.POINTER(_rfbClientRec)),] )

rfbRunEventLoop = _rpythonic_function_(		"rfbRunEventLoop", ctypes.c_void_p, [
	("screenInfo",		ctypes.POINTER(_rfbScreenInfo)),
	("usec",		ctypes.c_long),
	("runInBackground",		ctypes.c_int8),] )

rfbProcessEvents = _rpythonic_function_(		"rfbProcessEvents", ctypes.c_int8, [
	("screenInfo",		ctypes.POINTER(_rfbScreenInfo)),
	("usec",		ctypes.c_long),] )

rfbIsActive = _rpythonic_function_(		"rfbIsActive", ctypes.c_int8, [
	("screenInfo",		ctypes.POINTER(_rfbScreenInfo)),] )

rfbRegisterTightVNCFileTransferExtension = _rpythonic_function_(		"rfbRegisterTightVNCFileTransferExtension", ctypes.c_void_p, [] )

rfbUnregisterTightVNCFileTransferExtension = _rpythonic_function_(		"rfbUnregisterTightVNCFileTransferExtension", ctypes.c_void_p, [] )

messageNameServer2Client = _rpythonic_function_(		"messageNameServer2Client", ctypes.POINTER(ctypes.c_char), [
	("C_type",		ctypes.c_uint32),
	("buf",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

messageNameClient2Server = _rpythonic_function_(		"messageNameClient2Server", ctypes.POINTER(ctypes.c_char), [
	("C_type",		ctypes.c_uint32),
	("buf",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

encodingName = _rpythonic_function_(		"encodingName", ctypes.POINTER(ctypes.c_char), [
	("enc",		ctypes.c_uint32),
	("buf",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

rfbStatLookupEncoding = _rpythonic_function_(		"rfbStatLookupEncoding", ctypes.POINTER(_rfbStatList), [
	("cl",		ctypes.POINTER(_rfbClientRec)),
	("C_type",		ctypes.c_uint32),] )

rfbStatLookupMessage = _rpythonic_function_(		"rfbStatLookupMessage", ctypes.POINTER(_rfbStatList), [
	("cl",		ctypes.POINTER(_rfbClientRec)),
	("C_type",		ctypes.c_uint32),] )

rfbStatRecordEncodingSent = _rpythonic_function_(		"rfbStatRecordEncodingSent", ctypes.c_void_p, [
	("cl",		ctypes.POINTER(_rfbClientRec)),
	("C_type",		ctypes.c_uint32),
	("byteCount",		ctypes.c_int),
	("byteIfRaw",		ctypes.c_int),] )

rfbStatRecordEncodingSentAdd = _rpythonic_function_(		"rfbStatRecordEncodingSentAdd", ctypes.c_void_p, [
	("cl",		ctypes.POINTER(_rfbClientRec)),
	("C_type",		ctypes.c_uint32),
	("byteCount",		ctypes.c_int),] )

rfbStatRecordEncodingRcvd = _rpythonic_function_(		"rfbStatRecordEncodingRcvd", ctypes.c_void_p, [
	("cl",		ctypes.POINTER(_rfbClientRec)),
	("C_type",		ctypes.c_uint32),
	("byteCount",		ctypes.c_int),
	("byteIfRaw",		ctypes.c_int),] )

rfbStatRecordMessageSent = _rpythonic_function_(		"rfbStatRecordMessageSent", ctypes.c_void_p, [
	("cl",		ctypes.POINTER(_rfbClientRec)),
	("C_type",		ctypes.c_uint32),
	("byteCount",		ctypes.c_int),
	("byteIfRaw",		ctypes.c_int),] )

rfbStatRecordMessageRcvd = _rpythonic_function_(		"rfbStatRecordMessageRcvd", ctypes.c_void_p, [
	("cl",		ctypes.POINTER(_rfbClientRec)),
	("C_type",		ctypes.c_uint32),
	("byteCount",		ctypes.c_int),
	("byteIfRaw",		ctypes.c_int),] )

rfbStatGetSentBytes = _rpythonic_function_(		"rfbStatGetSentBytes", ctypes.c_int, [
	("cl",		ctypes.POINTER(_rfbClientRec)),] )

rfbStatGetSentBytesIfRaw = _rpythonic_function_(		"rfbStatGetSentBytesIfRaw", ctypes.c_int, [
	("cl",		ctypes.POINTER(_rfbClientRec)),] )

rfbStatGetRcvdBytes = _rpythonic_function_(		"rfbStatGetRcvdBytes", ctypes.c_int, [
	("cl",		ctypes.POINTER(_rfbClientRec)),] )

rfbStatGetRcvdBytesIfRaw = _rpythonic_function_(		"rfbStatGetRcvdBytesIfRaw", ctypes.c_int, [
	("cl",		ctypes.POINTER(_rfbClientRec)),] )

rfbStatGetMessageCountSent = _rpythonic_function_(		"rfbStatGetMessageCountSent", ctypes.c_int, [
	("cl",		ctypes.POINTER(_rfbClientRec)),
	("C_type",		ctypes.c_uint32),] )

rfbStatGetMessageCountRcvd = _rpythonic_function_(		"rfbStatGetMessageCountRcvd", ctypes.c_int, [
	("cl",		ctypes.POINTER(_rfbClientRec)),
	("C_type",		ctypes.c_uint32),] )

rfbStatGetEncodingCountSent = _rpythonic_function_(		"rfbStatGetEncodingCountSent", ctypes.c_int, [
	("cl",		ctypes.POINTER(_rfbClientRec)),
	("C_type",		ctypes.c_uint32),] )

rfbStatGetEncodingCountRcvd = _rpythonic_function_(		"rfbStatGetEncodingCountRcvd", ctypes.c_int, [
	("cl",		ctypes.POINTER(_rfbClientRec)),
	("C_type",		ctypes.c_uint32),] )

rfbSetProtocolVersion = _rpythonic_function_(		"rfbSetProtocolVersion", ctypes.c_void_p, [
	("rfbScreen",		ctypes.POINTER(_rfbScreenInfo)),
	("major_",		ctypes.c_int),
	("minor_",		ctypes.c_int),] )

rfbSendTextChatMessage = _rpythonic_function_(		"rfbSendTextChatMessage", ctypes.c_int8, [
	("cl",		ctypes.POINTER(_rfbClientRec)),
	("length",		ctypes.c_uint32),
	("buffer",		ctypes.POINTER(ctypes.c_char)),] )


_rpythonic_convert_structs_to_objects()

_rpythonic_setup_return_wrappers()
_rpythonic_make_nice_global_enums_()
_rpythonic_clean_up_missing_functions_()